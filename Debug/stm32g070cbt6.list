
stm32g070cbt6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001296c  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ab8  08012a28  08012a28  00022a28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080134e0  080134e0  00030288  2**0
                  CONTENTS
  4 .ARM          00000000  080134e0  080134e0  00030288  2**0
                  CONTENTS
  5 .preinit_array 00000000  080134e0  080134e0  00030288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080134e0  080134e0  000234e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080134e4  080134e4  000234e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000288  20000000  080134e8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000de8  20000288  08013770  00030288  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001070  08013770  00031070  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030288  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016ddb  00000000  00000000  000302b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cbc  00000000  00000000  0004708b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f0  00000000  00000000  00049d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012c8  00000000  00000000  0004b038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d86  00000000  00000000  0004c300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017536  00000000  00000000  00064086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092f7a  00000000  00000000  0007b5bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010e536  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005da8  00000000  00000000  0010e588  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000288 	.word	0x20000288
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08012a0c 	.word	0x08012a0c

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	2000028c 	.word	0x2000028c
 80000fc:	08012a0c 	.word	0x08012a0c

08000100 <strcmp>:
 8000100:	7802      	ldrb	r2, [r0, #0]
 8000102:	780b      	ldrb	r3, [r1, #0]
 8000104:	2a00      	cmp	r2, #0
 8000106:	d003      	beq.n	8000110 <strcmp+0x10>
 8000108:	3001      	adds	r0, #1
 800010a:	3101      	adds	r1, #1
 800010c:	429a      	cmp	r2, r3
 800010e:	d0f7      	beq.n	8000100 <strcmp>
 8000110:	1ad0      	subs	r0, r2, r3
 8000112:	4770      	bx	lr

08000114 <strlen>:
 8000114:	2300      	movs	r3, #0
 8000116:	5cc2      	ldrb	r2, [r0, r3]
 8000118:	3301      	adds	r3, #1
 800011a:	2a00      	cmp	r2, #0
 800011c:	d1fb      	bne.n	8000116 <strlen+0x2>
 800011e:	1e58      	subs	r0, r3, #1
 8000120:	4770      	bx	lr
	...

08000124 <__gnu_thumb1_case_uqi>:
 8000124:	b402      	push	{r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0049      	lsls	r1, r1, #1
 800012c:	5c09      	ldrb	r1, [r1, r0]
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	448e      	add	lr, r1
 8000132:	bc02      	pop	{r1}
 8000134:	4770      	bx	lr
 8000136:	46c0      	nop			; (mov r8, r8)

08000138 <__gnu_thumb1_case_shi>:
 8000138:	b403      	push	{r0, r1}
 800013a:	4671      	mov	r1, lr
 800013c:	0849      	lsrs	r1, r1, #1
 800013e:	0040      	lsls	r0, r0, #1
 8000140:	0049      	lsls	r1, r1, #1
 8000142:	5e09      	ldrsh	r1, [r1, r0]
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	448e      	add	lr, r1
 8000148:	bc03      	pop	{r0, r1}
 800014a:	4770      	bx	lr

0800014c <__udivsi3>:
 800014c:	2200      	movs	r2, #0
 800014e:	0843      	lsrs	r3, r0, #1
 8000150:	428b      	cmp	r3, r1
 8000152:	d374      	bcc.n	800023e <__udivsi3+0xf2>
 8000154:	0903      	lsrs	r3, r0, #4
 8000156:	428b      	cmp	r3, r1
 8000158:	d35f      	bcc.n	800021a <__udivsi3+0xce>
 800015a:	0a03      	lsrs	r3, r0, #8
 800015c:	428b      	cmp	r3, r1
 800015e:	d344      	bcc.n	80001ea <__udivsi3+0x9e>
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d328      	bcc.n	80001b8 <__udivsi3+0x6c>
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d30d      	bcc.n	8000188 <__udivsi3+0x3c>
 800016c:	22ff      	movs	r2, #255	; 0xff
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	ba12      	rev	r2, r2
 8000172:	0c03      	lsrs	r3, r0, #16
 8000174:	428b      	cmp	r3, r1
 8000176:	d302      	bcc.n	800017e <__udivsi3+0x32>
 8000178:	1212      	asrs	r2, r2, #8
 800017a:	0209      	lsls	r1, r1, #8
 800017c:	d065      	beq.n	800024a <__udivsi3+0xfe>
 800017e:	0b03      	lsrs	r3, r0, #12
 8000180:	428b      	cmp	r3, r1
 8000182:	d319      	bcc.n	80001b8 <__udivsi3+0x6c>
 8000184:	e000      	b.n	8000188 <__udivsi3+0x3c>
 8000186:	0a09      	lsrs	r1, r1, #8
 8000188:	0bc3      	lsrs	r3, r0, #15
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x46>
 800018e:	03cb      	lsls	r3, r1, #15
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b83      	lsrs	r3, r0, #14
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x52>
 800019a:	038b      	lsls	r3, r1, #14
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b43      	lsrs	r3, r0, #13
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x5e>
 80001a6:	034b      	lsls	r3, r1, #13
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0b03      	lsrs	r3, r0, #12
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x6a>
 80001b2:	030b      	lsls	r3, r1, #12
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0ac3      	lsrs	r3, r0, #11
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x76>
 80001be:	02cb      	lsls	r3, r1, #11
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a83      	lsrs	r3, r0, #10
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x82>
 80001ca:	028b      	lsls	r3, r1, #10
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a43      	lsrs	r3, r0, #9
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x8e>
 80001d6:	024b      	lsls	r3, r1, #9
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	0a03      	lsrs	r3, r0, #8
 80001de:	428b      	cmp	r3, r1
 80001e0:	d301      	bcc.n	80001e6 <__udivsi3+0x9a>
 80001e2:	020b      	lsls	r3, r1, #8
 80001e4:	1ac0      	subs	r0, r0, r3
 80001e6:	4152      	adcs	r2, r2
 80001e8:	d2cd      	bcs.n	8000186 <__udivsi3+0x3a>
 80001ea:	09c3      	lsrs	r3, r0, #7
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xa8>
 80001f0:	01cb      	lsls	r3, r1, #7
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0983      	lsrs	r3, r0, #6
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xb4>
 80001fc:	018b      	lsls	r3, r1, #6
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0943      	lsrs	r3, r0, #5
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xc0>
 8000208:	014b      	lsls	r3, r1, #5
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0903      	lsrs	r3, r0, #4
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xcc>
 8000214:	010b      	lsls	r3, r1, #4
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	08c3      	lsrs	r3, r0, #3
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xd8>
 8000220:	00cb      	lsls	r3, r1, #3
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0883      	lsrs	r3, r0, #2
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xe4>
 800022c:	008b      	lsls	r3, r1, #2
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	0843      	lsrs	r3, r0, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d301      	bcc.n	800023c <__udivsi3+0xf0>
 8000238:	004b      	lsls	r3, r1, #1
 800023a:	1ac0      	subs	r0, r0, r3
 800023c:	4152      	adcs	r2, r2
 800023e:	1a41      	subs	r1, r0, r1
 8000240:	d200      	bcs.n	8000244 <__udivsi3+0xf8>
 8000242:	4601      	mov	r1, r0
 8000244:	4152      	adcs	r2, r2
 8000246:	4610      	mov	r0, r2
 8000248:	4770      	bx	lr
 800024a:	e7ff      	b.n	800024c <__udivsi3+0x100>
 800024c:	b501      	push	{r0, lr}
 800024e:	2000      	movs	r0, #0
 8000250:	f000 f8f0 	bl	8000434 <__aeabi_idiv0>
 8000254:	bd02      	pop	{r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_uidivmod>:
 8000258:	2900      	cmp	r1, #0
 800025a:	d0f7      	beq.n	800024c <__udivsi3+0x100>
 800025c:	e776      	b.n	800014c <__udivsi3>
 800025e:	4770      	bx	lr

08000260 <__divsi3>:
 8000260:	4603      	mov	r3, r0
 8000262:	430b      	orrs	r3, r1
 8000264:	d47f      	bmi.n	8000366 <__divsi3+0x106>
 8000266:	2200      	movs	r2, #0
 8000268:	0843      	lsrs	r3, r0, #1
 800026a:	428b      	cmp	r3, r1
 800026c:	d374      	bcc.n	8000358 <__divsi3+0xf8>
 800026e:	0903      	lsrs	r3, r0, #4
 8000270:	428b      	cmp	r3, r1
 8000272:	d35f      	bcc.n	8000334 <__divsi3+0xd4>
 8000274:	0a03      	lsrs	r3, r0, #8
 8000276:	428b      	cmp	r3, r1
 8000278:	d344      	bcc.n	8000304 <__divsi3+0xa4>
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d328      	bcc.n	80002d2 <__divsi3+0x72>
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d30d      	bcc.n	80002a2 <__divsi3+0x42>
 8000286:	22ff      	movs	r2, #255	; 0xff
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	ba12      	rev	r2, r2
 800028c:	0c03      	lsrs	r3, r0, #16
 800028e:	428b      	cmp	r3, r1
 8000290:	d302      	bcc.n	8000298 <__divsi3+0x38>
 8000292:	1212      	asrs	r2, r2, #8
 8000294:	0209      	lsls	r1, r1, #8
 8000296:	d065      	beq.n	8000364 <__divsi3+0x104>
 8000298:	0b03      	lsrs	r3, r0, #12
 800029a:	428b      	cmp	r3, r1
 800029c:	d319      	bcc.n	80002d2 <__divsi3+0x72>
 800029e:	e000      	b.n	80002a2 <__divsi3+0x42>
 80002a0:	0a09      	lsrs	r1, r1, #8
 80002a2:	0bc3      	lsrs	r3, r0, #15
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x4c>
 80002a8:	03cb      	lsls	r3, r1, #15
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b83      	lsrs	r3, r0, #14
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x58>
 80002b4:	038b      	lsls	r3, r1, #14
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b43      	lsrs	r3, r0, #13
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x64>
 80002c0:	034b      	lsls	r3, r1, #13
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0b03      	lsrs	r3, r0, #12
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x70>
 80002cc:	030b      	lsls	r3, r1, #12
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0ac3      	lsrs	r3, r0, #11
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x7c>
 80002d8:	02cb      	lsls	r3, r1, #11
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a83      	lsrs	r3, r0, #10
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x88>
 80002e4:	028b      	lsls	r3, r1, #10
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a43      	lsrs	r3, r0, #9
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0x94>
 80002f0:	024b      	lsls	r3, r1, #9
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	0a03      	lsrs	r3, r0, #8
 80002f8:	428b      	cmp	r3, r1
 80002fa:	d301      	bcc.n	8000300 <__divsi3+0xa0>
 80002fc:	020b      	lsls	r3, r1, #8
 80002fe:	1ac0      	subs	r0, r0, r3
 8000300:	4152      	adcs	r2, r2
 8000302:	d2cd      	bcs.n	80002a0 <__divsi3+0x40>
 8000304:	09c3      	lsrs	r3, r0, #7
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xae>
 800030a:	01cb      	lsls	r3, r1, #7
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0983      	lsrs	r3, r0, #6
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xba>
 8000316:	018b      	lsls	r3, r1, #6
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0943      	lsrs	r3, r0, #5
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xc6>
 8000322:	014b      	lsls	r3, r1, #5
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0903      	lsrs	r3, r0, #4
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xd2>
 800032e:	010b      	lsls	r3, r1, #4
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	08c3      	lsrs	r3, r0, #3
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xde>
 800033a:	00cb      	lsls	r3, r1, #3
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0883      	lsrs	r3, r0, #2
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xea>
 8000346:	008b      	lsls	r3, r1, #2
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	0843      	lsrs	r3, r0, #1
 800034e:	428b      	cmp	r3, r1
 8000350:	d301      	bcc.n	8000356 <__divsi3+0xf6>
 8000352:	004b      	lsls	r3, r1, #1
 8000354:	1ac0      	subs	r0, r0, r3
 8000356:	4152      	adcs	r2, r2
 8000358:	1a41      	subs	r1, r0, r1
 800035a:	d200      	bcs.n	800035e <__divsi3+0xfe>
 800035c:	4601      	mov	r1, r0
 800035e:	4152      	adcs	r2, r2
 8000360:	4610      	mov	r0, r2
 8000362:	4770      	bx	lr
 8000364:	e05d      	b.n	8000422 <__divsi3+0x1c2>
 8000366:	0fca      	lsrs	r2, r1, #31
 8000368:	d000      	beq.n	800036c <__divsi3+0x10c>
 800036a:	4249      	negs	r1, r1
 800036c:	1003      	asrs	r3, r0, #32
 800036e:	d300      	bcc.n	8000372 <__divsi3+0x112>
 8000370:	4240      	negs	r0, r0
 8000372:	4053      	eors	r3, r2
 8000374:	2200      	movs	r2, #0
 8000376:	469c      	mov	ip, r3
 8000378:	0903      	lsrs	r3, r0, #4
 800037a:	428b      	cmp	r3, r1
 800037c:	d32d      	bcc.n	80003da <__divsi3+0x17a>
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d312      	bcc.n	80003aa <__divsi3+0x14a>
 8000384:	22fc      	movs	r2, #252	; 0xfc
 8000386:	0189      	lsls	r1, r1, #6
 8000388:	ba12      	rev	r2, r2
 800038a:	0a03      	lsrs	r3, r0, #8
 800038c:	428b      	cmp	r3, r1
 800038e:	d30c      	bcc.n	80003aa <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	1192      	asrs	r2, r2, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d308      	bcc.n	80003aa <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d304      	bcc.n	80003aa <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	d03a      	beq.n	800041a <__divsi3+0x1ba>
 80003a4:	1192      	asrs	r2, r2, #6
 80003a6:	e000      	b.n	80003aa <__divsi3+0x14a>
 80003a8:	0989      	lsrs	r1, r1, #6
 80003aa:	09c3      	lsrs	r3, r0, #7
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x154>
 80003b0:	01cb      	lsls	r3, r1, #7
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0983      	lsrs	r3, r0, #6
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x160>
 80003bc:	018b      	lsls	r3, r1, #6
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0943      	lsrs	r3, r0, #5
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x16c>
 80003c8:	014b      	lsls	r3, r1, #5
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	0903      	lsrs	r3, r0, #4
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x178>
 80003d4:	010b      	lsls	r3, r1, #4
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	08c3      	lsrs	r3, r0, #3
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x184>
 80003e0:	00cb      	lsls	r3, r1, #3
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	0883      	lsrs	r3, r0, #2
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x190>
 80003ec:	008b      	lsls	r3, r1, #2
 80003ee:	1ac0      	subs	r0, r0, r3
 80003f0:	4152      	adcs	r2, r2
 80003f2:	d2d9      	bcs.n	80003a8 <__divsi3+0x148>
 80003f4:	0843      	lsrs	r3, r0, #1
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d301      	bcc.n	80003fe <__divsi3+0x19e>
 80003fa:	004b      	lsls	r3, r1, #1
 80003fc:	1ac0      	subs	r0, r0, r3
 80003fe:	4152      	adcs	r2, r2
 8000400:	1a41      	subs	r1, r0, r1
 8000402:	d200      	bcs.n	8000406 <__divsi3+0x1a6>
 8000404:	4601      	mov	r1, r0
 8000406:	4663      	mov	r3, ip
 8000408:	4152      	adcs	r2, r2
 800040a:	105b      	asrs	r3, r3, #1
 800040c:	4610      	mov	r0, r2
 800040e:	d301      	bcc.n	8000414 <__divsi3+0x1b4>
 8000410:	4240      	negs	r0, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d500      	bpl.n	8000418 <__divsi3+0x1b8>
 8000416:	4249      	negs	r1, r1
 8000418:	4770      	bx	lr
 800041a:	4663      	mov	r3, ip
 800041c:	105b      	asrs	r3, r3, #1
 800041e:	d300      	bcc.n	8000422 <__divsi3+0x1c2>
 8000420:	4240      	negs	r0, r0
 8000422:	b501      	push	{r0, lr}
 8000424:	2000      	movs	r0, #0
 8000426:	f000 f805 	bl	8000434 <__aeabi_idiv0>
 800042a:	bd02      	pop	{r1, pc}

0800042c <__aeabi_idivmod>:
 800042c:	2900      	cmp	r1, #0
 800042e:	d0f8      	beq.n	8000422 <__divsi3+0x1c2>
 8000430:	e716      	b.n	8000260 <__divsi3>
 8000432:	4770      	bx	lr

08000434 <__aeabi_idiv0>:
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdrcmple>:
 8000438:	4684      	mov	ip, r0
 800043a:	0010      	movs	r0, r2
 800043c:	4662      	mov	r2, ip
 800043e:	468c      	mov	ip, r1
 8000440:	0019      	movs	r1, r3
 8000442:	4663      	mov	r3, ip
 8000444:	e000      	b.n	8000448 <__aeabi_cdcmpeq>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_cdcmpeq>:
 8000448:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044a:	f001 fe8d 	bl	8002168 <__ledf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	d401      	bmi.n	8000456 <__aeabi_cdcmpeq+0xe>
 8000452:	2100      	movs	r1, #0
 8000454:	42c8      	cmn	r0, r1
 8000456:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000458 <__aeabi_dcmpeq>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fddd 	bl	8002018 <__eqdf2>
 800045e:	4240      	negs	r0, r0
 8000460:	3001      	adds	r0, #1
 8000462:	bd10      	pop	{r4, pc}

08000464 <__aeabi_dcmplt>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f001 fe7f 	bl	8002168 <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	db01      	blt.n	8000472 <__aeabi_dcmplt+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__aeabi_dcmple>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f001 fe75 	bl	8002168 <__ledf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dd01      	ble.n	8000486 <__aeabi_dcmple+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			; (mov r8, r8)

0800048c <__aeabi_dcmpgt>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f001 fe05 	bl	800209c <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	dc01      	bgt.n	800049a <__aeabi_dcmpgt+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			; (mov r8, r8)

080004a0 <__aeabi_dcmpge>:
 80004a0:	b510      	push	{r4, lr}
 80004a2:	f001 fdfb 	bl	800209c <__gedf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	da01      	bge.n	80004ae <__aeabi_dcmpge+0xe>
 80004aa:	2000      	movs	r0, #0
 80004ac:	bd10      	pop	{r4, pc}
 80004ae:	2001      	movs	r0, #1
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	46c0      	nop			; (mov r8, r8)

080004b4 <__aeabi_cfrcmple>:
 80004b4:	4684      	mov	ip, r0
 80004b6:	0008      	movs	r0, r1
 80004b8:	4661      	mov	r1, ip
 80004ba:	e7ff      	b.n	80004bc <__aeabi_cfcmpeq>

080004bc <__aeabi_cfcmpeq>:
 80004bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004be:	f000 fbdd 	bl	8000c7c <__lesf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	d401      	bmi.n	80004ca <__aeabi_cfcmpeq+0xe>
 80004c6:	2100      	movs	r1, #0
 80004c8:	42c8      	cmn	r0, r1
 80004ca:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004cc <__aeabi_fcmpeq>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fb69 	bl	8000ba4 <__eqsf2>
 80004d2:	4240      	negs	r0, r0
 80004d4:	3001      	adds	r0, #1
 80004d6:	bd10      	pop	{r4, pc}

080004d8 <__aeabi_fcmplt>:
 80004d8:	b510      	push	{r4, lr}
 80004da:	f000 fbcf 	bl	8000c7c <__lesf2>
 80004de:	2800      	cmp	r0, #0
 80004e0:	db01      	blt.n	80004e6 <__aeabi_fcmplt+0xe>
 80004e2:	2000      	movs	r0, #0
 80004e4:	bd10      	pop	{r4, pc}
 80004e6:	2001      	movs	r0, #1
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	46c0      	nop			; (mov r8, r8)

080004ec <__aeabi_fcmple>:
 80004ec:	b510      	push	{r4, lr}
 80004ee:	f000 fbc5 	bl	8000c7c <__lesf2>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	dd01      	ble.n	80004fa <__aeabi_fcmple+0xe>
 80004f6:	2000      	movs	r0, #0
 80004f8:	bd10      	pop	{r4, pc}
 80004fa:	2001      	movs	r0, #1
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	46c0      	nop			; (mov r8, r8)

08000500 <__aeabi_fcmpgt>:
 8000500:	b510      	push	{r4, lr}
 8000502:	f000 fb75 	bl	8000bf0 <__gesf2>
 8000506:	2800      	cmp	r0, #0
 8000508:	dc01      	bgt.n	800050e <__aeabi_fcmpgt+0xe>
 800050a:	2000      	movs	r0, #0
 800050c:	bd10      	pop	{r4, pc}
 800050e:	2001      	movs	r0, #1
 8000510:	bd10      	pop	{r4, pc}
 8000512:	46c0      	nop			; (mov r8, r8)

08000514 <__aeabi_fcmpge>:
 8000514:	b510      	push	{r4, lr}
 8000516:	f000 fb6b 	bl	8000bf0 <__gesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	da01      	bge.n	8000522 <__aeabi_fcmpge+0xe>
 800051e:	2000      	movs	r0, #0
 8000520:	bd10      	pop	{r4, pc}
 8000522:	2001      	movs	r0, #1
 8000524:	bd10      	pop	{r4, pc}
 8000526:	46c0      	nop			; (mov r8, r8)

08000528 <__aeabi_f2uiz>:
 8000528:	219e      	movs	r1, #158	; 0x9e
 800052a:	b510      	push	{r4, lr}
 800052c:	05c9      	lsls	r1, r1, #23
 800052e:	1c04      	adds	r4, r0, #0
 8000530:	f7ff fff0 	bl	8000514 <__aeabi_fcmpge>
 8000534:	2800      	cmp	r0, #0
 8000536:	d103      	bne.n	8000540 <__aeabi_f2uiz+0x18>
 8000538:	1c20      	adds	r0, r4, #0
 800053a:	f000 fecd 	bl	80012d8 <__aeabi_f2iz>
 800053e:	bd10      	pop	{r4, pc}
 8000540:	219e      	movs	r1, #158	; 0x9e
 8000542:	1c20      	adds	r0, r4, #0
 8000544:	05c9      	lsls	r1, r1, #23
 8000546:	f000 fd03 	bl	8000f50 <__aeabi_fsub>
 800054a:	f000 fec5 	bl	80012d8 <__aeabi_f2iz>
 800054e:	2380      	movs	r3, #128	; 0x80
 8000550:	061b      	lsls	r3, r3, #24
 8000552:	469c      	mov	ip, r3
 8000554:	4460      	add	r0, ip
 8000556:	e7f2      	b.n	800053e <__aeabi_f2uiz+0x16>

08000558 <__aeabi_d2uiz>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	2200      	movs	r2, #0
 800055c:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <__aeabi_d2uiz+0x38>)
 800055e:	0004      	movs	r4, r0
 8000560:	000d      	movs	r5, r1
 8000562:	f7ff ff9d 	bl	80004a0 <__aeabi_dcmpge>
 8000566:	2800      	cmp	r0, #0
 8000568:	d104      	bne.n	8000574 <__aeabi_d2uiz+0x1c>
 800056a:	0020      	movs	r0, r4
 800056c:	0029      	movs	r1, r5
 800056e:	f002 fc7b 	bl	8002e68 <__aeabi_d2iz>
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <__aeabi_d2uiz+0x38>)
 8000576:	2200      	movs	r2, #0
 8000578:	0020      	movs	r0, r4
 800057a:	0029      	movs	r1, r5
 800057c:	f002 f8c4 	bl	8002708 <__aeabi_dsub>
 8000580:	f002 fc72 	bl	8002e68 <__aeabi_d2iz>
 8000584:	2380      	movs	r3, #128	; 0x80
 8000586:	061b      	lsls	r3, r3, #24
 8000588:	469c      	mov	ip, r3
 800058a:	4460      	add	r0, ip
 800058c:	e7f1      	b.n	8000572 <__aeabi_d2uiz+0x1a>
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	41e00000 	.word	0x41e00000

08000594 <__aeabi_d2lz>:
 8000594:	b570      	push	{r4, r5, r6, lr}
 8000596:	0005      	movs	r5, r0
 8000598:	000c      	movs	r4, r1
 800059a:	2200      	movs	r2, #0
 800059c:	2300      	movs	r3, #0
 800059e:	0028      	movs	r0, r5
 80005a0:	0021      	movs	r1, r4
 80005a2:	f7ff ff5f 	bl	8000464 <__aeabi_dcmplt>
 80005a6:	2800      	cmp	r0, #0
 80005a8:	d108      	bne.n	80005bc <__aeabi_d2lz+0x28>
 80005aa:	0028      	movs	r0, r5
 80005ac:	0021      	movs	r1, r4
 80005ae:	f000 f80f 	bl	80005d0 <__aeabi_d2ulz>
 80005b2:	0002      	movs	r2, r0
 80005b4:	000b      	movs	r3, r1
 80005b6:	0010      	movs	r0, r2
 80005b8:	0019      	movs	r1, r3
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	2380      	movs	r3, #128	; 0x80
 80005be:	061b      	lsls	r3, r3, #24
 80005c0:	18e1      	adds	r1, r4, r3
 80005c2:	0028      	movs	r0, r5
 80005c4:	f000 f804 	bl	80005d0 <__aeabi_d2ulz>
 80005c8:	2300      	movs	r3, #0
 80005ca:	4242      	negs	r2, r0
 80005cc:	418b      	sbcs	r3, r1
 80005ce:	e7f2      	b.n	80005b6 <__aeabi_d2lz+0x22>

080005d0 <__aeabi_d2ulz>:
 80005d0:	b570      	push	{r4, r5, r6, lr}
 80005d2:	2200      	movs	r2, #0
 80005d4:	4b0b      	ldr	r3, [pc, #44]	; (8000604 <__aeabi_d2ulz+0x34>)
 80005d6:	000d      	movs	r5, r1
 80005d8:	0004      	movs	r4, r0
 80005da:	f001 fe29 	bl	8002230 <__aeabi_dmul>
 80005de:	f7ff ffbb 	bl	8000558 <__aeabi_d2uiz>
 80005e2:	0006      	movs	r6, r0
 80005e4:	f002 fca6 	bl	8002f34 <__aeabi_ui2d>
 80005e8:	2200      	movs	r2, #0
 80005ea:	4b07      	ldr	r3, [pc, #28]	; (8000608 <__aeabi_d2ulz+0x38>)
 80005ec:	f001 fe20 	bl	8002230 <__aeabi_dmul>
 80005f0:	0002      	movs	r2, r0
 80005f2:	000b      	movs	r3, r1
 80005f4:	0020      	movs	r0, r4
 80005f6:	0029      	movs	r1, r5
 80005f8:	f002 f886 	bl	8002708 <__aeabi_dsub>
 80005fc:	f7ff ffac 	bl	8000558 <__aeabi_d2uiz>
 8000600:	0031      	movs	r1, r6
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	3df00000 	.word	0x3df00000
 8000608:	41f00000 	.word	0x41f00000

0800060c <__aeabi_l2d>:
 800060c:	b570      	push	{r4, r5, r6, lr}
 800060e:	0006      	movs	r6, r0
 8000610:	0008      	movs	r0, r1
 8000612:	f002 fc5f 	bl	8002ed4 <__aeabi_i2d>
 8000616:	2200      	movs	r2, #0
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <__aeabi_l2d+0x28>)
 800061a:	f001 fe09 	bl	8002230 <__aeabi_dmul>
 800061e:	000d      	movs	r5, r1
 8000620:	0004      	movs	r4, r0
 8000622:	0030      	movs	r0, r6
 8000624:	f002 fc86 	bl	8002f34 <__aeabi_ui2d>
 8000628:	002b      	movs	r3, r5
 800062a:	0022      	movs	r2, r4
 800062c:	f000 fec2 	bl	80013b4 <__aeabi_dadd>
 8000630:	bd70      	pop	{r4, r5, r6, pc}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	41f00000 	.word	0x41f00000

08000638 <__aeabi_fadd>:
 8000638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800063a:	46c6      	mov	lr, r8
 800063c:	0243      	lsls	r3, r0, #9
 800063e:	0a5b      	lsrs	r3, r3, #9
 8000640:	024e      	lsls	r6, r1, #9
 8000642:	0045      	lsls	r5, r0, #1
 8000644:	004f      	lsls	r7, r1, #1
 8000646:	00da      	lsls	r2, r3, #3
 8000648:	0fc4      	lsrs	r4, r0, #31
 800064a:	469c      	mov	ip, r3
 800064c:	0a70      	lsrs	r0, r6, #9
 800064e:	4690      	mov	r8, r2
 8000650:	b500      	push	{lr}
 8000652:	0e2d      	lsrs	r5, r5, #24
 8000654:	0e3f      	lsrs	r7, r7, #24
 8000656:	0fc9      	lsrs	r1, r1, #31
 8000658:	09b6      	lsrs	r6, r6, #6
 800065a:	428c      	cmp	r4, r1
 800065c:	d04b      	beq.n	80006f6 <__aeabi_fadd+0xbe>
 800065e:	1bea      	subs	r2, r5, r7
 8000660:	2a00      	cmp	r2, #0
 8000662:	dd36      	ble.n	80006d2 <__aeabi_fadd+0x9a>
 8000664:	2f00      	cmp	r7, #0
 8000666:	d061      	beq.n	800072c <__aeabi_fadd+0xf4>
 8000668:	2dff      	cmp	r5, #255	; 0xff
 800066a:	d100      	bne.n	800066e <__aeabi_fadd+0x36>
 800066c:	e0ad      	b.n	80007ca <__aeabi_fadd+0x192>
 800066e:	2380      	movs	r3, #128	; 0x80
 8000670:	04db      	lsls	r3, r3, #19
 8000672:	431e      	orrs	r6, r3
 8000674:	2a1b      	cmp	r2, #27
 8000676:	dc00      	bgt.n	800067a <__aeabi_fadd+0x42>
 8000678:	e0d3      	b.n	8000822 <__aeabi_fadd+0x1ea>
 800067a:	2001      	movs	r0, #1
 800067c:	4643      	mov	r3, r8
 800067e:	1a18      	subs	r0, r3, r0
 8000680:	0143      	lsls	r3, r0, #5
 8000682:	d400      	bmi.n	8000686 <__aeabi_fadd+0x4e>
 8000684:	e08c      	b.n	80007a0 <__aeabi_fadd+0x168>
 8000686:	0180      	lsls	r0, r0, #6
 8000688:	0987      	lsrs	r7, r0, #6
 800068a:	0038      	movs	r0, r7
 800068c:	f002 fd48 	bl	8003120 <__clzsi2>
 8000690:	3805      	subs	r0, #5
 8000692:	4087      	lsls	r7, r0
 8000694:	4285      	cmp	r5, r0
 8000696:	dc00      	bgt.n	800069a <__aeabi_fadd+0x62>
 8000698:	e0b6      	b.n	8000808 <__aeabi_fadd+0x1d0>
 800069a:	1a2d      	subs	r5, r5, r0
 800069c:	48b3      	ldr	r0, [pc, #716]	; (800096c <__aeabi_fadd+0x334>)
 800069e:	4038      	ands	r0, r7
 80006a0:	0743      	lsls	r3, r0, #29
 80006a2:	d004      	beq.n	80006ae <__aeabi_fadd+0x76>
 80006a4:	230f      	movs	r3, #15
 80006a6:	4003      	ands	r3, r0
 80006a8:	2b04      	cmp	r3, #4
 80006aa:	d000      	beq.n	80006ae <__aeabi_fadd+0x76>
 80006ac:	3004      	adds	r0, #4
 80006ae:	0143      	lsls	r3, r0, #5
 80006b0:	d400      	bmi.n	80006b4 <__aeabi_fadd+0x7c>
 80006b2:	e078      	b.n	80007a6 <__aeabi_fadd+0x16e>
 80006b4:	1c6a      	adds	r2, r5, #1
 80006b6:	2dfe      	cmp	r5, #254	; 0xfe
 80006b8:	d065      	beq.n	8000786 <__aeabi_fadd+0x14e>
 80006ba:	0180      	lsls	r0, r0, #6
 80006bc:	0a43      	lsrs	r3, r0, #9
 80006be:	469c      	mov	ip, r3
 80006c0:	b2d2      	uxtb	r2, r2
 80006c2:	4663      	mov	r3, ip
 80006c4:	05d0      	lsls	r0, r2, #23
 80006c6:	4318      	orrs	r0, r3
 80006c8:	07e4      	lsls	r4, r4, #31
 80006ca:	4320      	orrs	r0, r4
 80006cc:	bc80      	pop	{r7}
 80006ce:	46b8      	mov	r8, r7
 80006d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006d2:	2a00      	cmp	r2, #0
 80006d4:	d035      	beq.n	8000742 <__aeabi_fadd+0x10a>
 80006d6:	1b7a      	subs	r2, r7, r5
 80006d8:	2d00      	cmp	r5, #0
 80006da:	d000      	beq.n	80006de <__aeabi_fadd+0xa6>
 80006dc:	e0af      	b.n	800083e <__aeabi_fadd+0x206>
 80006de:	4643      	mov	r3, r8
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d100      	bne.n	80006e6 <__aeabi_fadd+0xae>
 80006e4:	e0a7      	b.n	8000836 <__aeabi_fadd+0x1fe>
 80006e6:	1e53      	subs	r3, r2, #1
 80006e8:	2a01      	cmp	r2, #1
 80006ea:	d100      	bne.n	80006ee <__aeabi_fadd+0xb6>
 80006ec:	e12f      	b.n	800094e <__aeabi_fadd+0x316>
 80006ee:	2aff      	cmp	r2, #255	; 0xff
 80006f0:	d069      	beq.n	80007c6 <__aeabi_fadd+0x18e>
 80006f2:	001a      	movs	r2, r3
 80006f4:	e0aa      	b.n	800084c <__aeabi_fadd+0x214>
 80006f6:	1be9      	subs	r1, r5, r7
 80006f8:	2900      	cmp	r1, #0
 80006fa:	dd70      	ble.n	80007de <__aeabi_fadd+0x1a6>
 80006fc:	2f00      	cmp	r7, #0
 80006fe:	d037      	beq.n	8000770 <__aeabi_fadd+0x138>
 8000700:	2dff      	cmp	r5, #255	; 0xff
 8000702:	d062      	beq.n	80007ca <__aeabi_fadd+0x192>
 8000704:	2380      	movs	r3, #128	; 0x80
 8000706:	04db      	lsls	r3, r3, #19
 8000708:	431e      	orrs	r6, r3
 800070a:	291b      	cmp	r1, #27
 800070c:	dc00      	bgt.n	8000710 <__aeabi_fadd+0xd8>
 800070e:	e0b0      	b.n	8000872 <__aeabi_fadd+0x23a>
 8000710:	2001      	movs	r0, #1
 8000712:	4440      	add	r0, r8
 8000714:	0143      	lsls	r3, r0, #5
 8000716:	d543      	bpl.n	80007a0 <__aeabi_fadd+0x168>
 8000718:	3501      	adds	r5, #1
 800071a:	2dff      	cmp	r5, #255	; 0xff
 800071c:	d033      	beq.n	8000786 <__aeabi_fadd+0x14e>
 800071e:	2301      	movs	r3, #1
 8000720:	4a93      	ldr	r2, [pc, #588]	; (8000970 <__aeabi_fadd+0x338>)
 8000722:	4003      	ands	r3, r0
 8000724:	0840      	lsrs	r0, r0, #1
 8000726:	4010      	ands	r0, r2
 8000728:	4318      	orrs	r0, r3
 800072a:	e7b9      	b.n	80006a0 <__aeabi_fadd+0x68>
 800072c:	2e00      	cmp	r6, #0
 800072e:	d100      	bne.n	8000732 <__aeabi_fadd+0xfa>
 8000730:	e083      	b.n	800083a <__aeabi_fadd+0x202>
 8000732:	1e51      	subs	r1, r2, #1
 8000734:	2a01      	cmp	r2, #1
 8000736:	d100      	bne.n	800073a <__aeabi_fadd+0x102>
 8000738:	e0d8      	b.n	80008ec <__aeabi_fadd+0x2b4>
 800073a:	2aff      	cmp	r2, #255	; 0xff
 800073c:	d045      	beq.n	80007ca <__aeabi_fadd+0x192>
 800073e:	000a      	movs	r2, r1
 8000740:	e798      	b.n	8000674 <__aeabi_fadd+0x3c>
 8000742:	27fe      	movs	r7, #254	; 0xfe
 8000744:	1c6a      	adds	r2, r5, #1
 8000746:	4217      	tst	r7, r2
 8000748:	d000      	beq.n	800074c <__aeabi_fadd+0x114>
 800074a:	e086      	b.n	800085a <__aeabi_fadd+0x222>
 800074c:	2d00      	cmp	r5, #0
 800074e:	d000      	beq.n	8000752 <__aeabi_fadd+0x11a>
 8000750:	e0b7      	b.n	80008c2 <__aeabi_fadd+0x28a>
 8000752:	4643      	mov	r3, r8
 8000754:	2b00      	cmp	r3, #0
 8000756:	d100      	bne.n	800075a <__aeabi_fadd+0x122>
 8000758:	e0f3      	b.n	8000942 <__aeabi_fadd+0x30a>
 800075a:	2200      	movs	r2, #0
 800075c:	2e00      	cmp	r6, #0
 800075e:	d0b0      	beq.n	80006c2 <__aeabi_fadd+0x8a>
 8000760:	1b98      	subs	r0, r3, r6
 8000762:	0143      	lsls	r3, r0, #5
 8000764:	d400      	bmi.n	8000768 <__aeabi_fadd+0x130>
 8000766:	e0fa      	b.n	800095e <__aeabi_fadd+0x326>
 8000768:	4643      	mov	r3, r8
 800076a:	000c      	movs	r4, r1
 800076c:	1af0      	subs	r0, r6, r3
 800076e:	e797      	b.n	80006a0 <__aeabi_fadd+0x68>
 8000770:	2e00      	cmp	r6, #0
 8000772:	d100      	bne.n	8000776 <__aeabi_fadd+0x13e>
 8000774:	e0c8      	b.n	8000908 <__aeabi_fadd+0x2d0>
 8000776:	1e4a      	subs	r2, r1, #1
 8000778:	2901      	cmp	r1, #1
 800077a:	d100      	bne.n	800077e <__aeabi_fadd+0x146>
 800077c:	e0ae      	b.n	80008dc <__aeabi_fadd+0x2a4>
 800077e:	29ff      	cmp	r1, #255	; 0xff
 8000780:	d023      	beq.n	80007ca <__aeabi_fadd+0x192>
 8000782:	0011      	movs	r1, r2
 8000784:	e7c1      	b.n	800070a <__aeabi_fadd+0xd2>
 8000786:	2300      	movs	r3, #0
 8000788:	22ff      	movs	r2, #255	; 0xff
 800078a:	469c      	mov	ip, r3
 800078c:	e799      	b.n	80006c2 <__aeabi_fadd+0x8a>
 800078e:	21fe      	movs	r1, #254	; 0xfe
 8000790:	1c6a      	adds	r2, r5, #1
 8000792:	4211      	tst	r1, r2
 8000794:	d077      	beq.n	8000886 <__aeabi_fadd+0x24e>
 8000796:	2aff      	cmp	r2, #255	; 0xff
 8000798:	d0f5      	beq.n	8000786 <__aeabi_fadd+0x14e>
 800079a:	0015      	movs	r5, r2
 800079c:	4446      	add	r6, r8
 800079e:	0870      	lsrs	r0, r6, #1
 80007a0:	0743      	lsls	r3, r0, #29
 80007a2:	d000      	beq.n	80007a6 <__aeabi_fadd+0x16e>
 80007a4:	e77e      	b.n	80006a4 <__aeabi_fadd+0x6c>
 80007a6:	08c3      	lsrs	r3, r0, #3
 80007a8:	2dff      	cmp	r5, #255	; 0xff
 80007aa:	d00e      	beq.n	80007ca <__aeabi_fadd+0x192>
 80007ac:	025b      	lsls	r3, r3, #9
 80007ae:	0a5b      	lsrs	r3, r3, #9
 80007b0:	469c      	mov	ip, r3
 80007b2:	b2ea      	uxtb	r2, r5
 80007b4:	e785      	b.n	80006c2 <__aeabi_fadd+0x8a>
 80007b6:	2e00      	cmp	r6, #0
 80007b8:	d007      	beq.n	80007ca <__aeabi_fadd+0x192>
 80007ba:	2280      	movs	r2, #128	; 0x80
 80007bc:	03d2      	lsls	r2, r2, #15
 80007be:	4213      	tst	r3, r2
 80007c0:	d003      	beq.n	80007ca <__aeabi_fadd+0x192>
 80007c2:	4210      	tst	r0, r2
 80007c4:	d101      	bne.n	80007ca <__aeabi_fadd+0x192>
 80007c6:	000c      	movs	r4, r1
 80007c8:	0003      	movs	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d0db      	beq.n	8000786 <__aeabi_fadd+0x14e>
 80007ce:	2080      	movs	r0, #128	; 0x80
 80007d0:	03c0      	lsls	r0, r0, #15
 80007d2:	4318      	orrs	r0, r3
 80007d4:	0240      	lsls	r0, r0, #9
 80007d6:	0a43      	lsrs	r3, r0, #9
 80007d8:	469c      	mov	ip, r3
 80007da:	22ff      	movs	r2, #255	; 0xff
 80007dc:	e771      	b.n	80006c2 <__aeabi_fadd+0x8a>
 80007de:	2900      	cmp	r1, #0
 80007e0:	d0d5      	beq.n	800078e <__aeabi_fadd+0x156>
 80007e2:	1b7a      	subs	r2, r7, r5
 80007e4:	2d00      	cmp	r5, #0
 80007e6:	d160      	bne.n	80008aa <__aeabi_fadd+0x272>
 80007e8:	4643      	mov	r3, r8
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d024      	beq.n	8000838 <__aeabi_fadd+0x200>
 80007ee:	1e53      	subs	r3, r2, #1
 80007f0:	2a01      	cmp	r2, #1
 80007f2:	d073      	beq.n	80008dc <__aeabi_fadd+0x2a4>
 80007f4:	2aff      	cmp	r2, #255	; 0xff
 80007f6:	d0e7      	beq.n	80007c8 <__aeabi_fadd+0x190>
 80007f8:	001a      	movs	r2, r3
 80007fa:	2a1b      	cmp	r2, #27
 80007fc:	dc00      	bgt.n	8000800 <__aeabi_fadd+0x1c8>
 80007fe:	e085      	b.n	800090c <__aeabi_fadd+0x2d4>
 8000800:	2001      	movs	r0, #1
 8000802:	003d      	movs	r5, r7
 8000804:	1980      	adds	r0, r0, r6
 8000806:	e785      	b.n	8000714 <__aeabi_fadd+0xdc>
 8000808:	2320      	movs	r3, #32
 800080a:	003a      	movs	r2, r7
 800080c:	1b45      	subs	r5, r0, r5
 800080e:	0038      	movs	r0, r7
 8000810:	3501      	adds	r5, #1
 8000812:	40ea      	lsrs	r2, r5
 8000814:	1b5d      	subs	r5, r3, r5
 8000816:	40a8      	lsls	r0, r5
 8000818:	1e43      	subs	r3, r0, #1
 800081a:	4198      	sbcs	r0, r3
 800081c:	2500      	movs	r5, #0
 800081e:	4310      	orrs	r0, r2
 8000820:	e73e      	b.n	80006a0 <__aeabi_fadd+0x68>
 8000822:	2320      	movs	r3, #32
 8000824:	0030      	movs	r0, r6
 8000826:	1a9b      	subs	r3, r3, r2
 8000828:	0031      	movs	r1, r6
 800082a:	4098      	lsls	r0, r3
 800082c:	40d1      	lsrs	r1, r2
 800082e:	1e43      	subs	r3, r0, #1
 8000830:	4198      	sbcs	r0, r3
 8000832:	4308      	orrs	r0, r1
 8000834:	e722      	b.n	800067c <__aeabi_fadd+0x44>
 8000836:	000c      	movs	r4, r1
 8000838:	0003      	movs	r3, r0
 800083a:	0015      	movs	r5, r2
 800083c:	e7b4      	b.n	80007a8 <__aeabi_fadd+0x170>
 800083e:	2fff      	cmp	r7, #255	; 0xff
 8000840:	d0c1      	beq.n	80007c6 <__aeabi_fadd+0x18e>
 8000842:	2380      	movs	r3, #128	; 0x80
 8000844:	4640      	mov	r0, r8
 8000846:	04db      	lsls	r3, r3, #19
 8000848:	4318      	orrs	r0, r3
 800084a:	4680      	mov	r8, r0
 800084c:	2a1b      	cmp	r2, #27
 800084e:	dd51      	ble.n	80008f4 <__aeabi_fadd+0x2bc>
 8000850:	2001      	movs	r0, #1
 8000852:	000c      	movs	r4, r1
 8000854:	003d      	movs	r5, r7
 8000856:	1a30      	subs	r0, r6, r0
 8000858:	e712      	b.n	8000680 <__aeabi_fadd+0x48>
 800085a:	4643      	mov	r3, r8
 800085c:	1b9f      	subs	r7, r3, r6
 800085e:	017b      	lsls	r3, r7, #5
 8000860:	d42b      	bmi.n	80008ba <__aeabi_fadd+0x282>
 8000862:	2f00      	cmp	r7, #0
 8000864:	d000      	beq.n	8000868 <__aeabi_fadd+0x230>
 8000866:	e710      	b.n	800068a <__aeabi_fadd+0x52>
 8000868:	2300      	movs	r3, #0
 800086a:	2400      	movs	r4, #0
 800086c:	2200      	movs	r2, #0
 800086e:	469c      	mov	ip, r3
 8000870:	e727      	b.n	80006c2 <__aeabi_fadd+0x8a>
 8000872:	2320      	movs	r3, #32
 8000874:	0032      	movs	r2, r6
 8000876:	0030      	movs	r0, r6
 8000878:	40ca      	lsrs	r2, r1
 800087a:	1a59      	subs	r1, r3, r1
 800087c:	4088      	lsls	r0, r1
 800087e:	1e43      	subs	r3, r0, #1
 8000880:	4198      	sbcs	r0, r3
 8000882:	4310      	orrs	r0, r2
 8000884:	e745      	b.n	8000712 <__aeabi_fadd+0xda>
 8000886:	2d00      	cmp	r5, #0
 8000888:	d14a      	bne.n	8000920 <__aeabi_fadd+0x2e8>
 800088a:	4643      	mov	r3, r8
 800088c:	2b00      	cmp	r3, #0
 800088e:	d063      	beq.n	8000958 <__aeabi_fadd+0x320>
 8000890:	2200      	movs	r2, #0
 8000892:	2e00      	cmp	r6, #0
 8000894:	d100      	bne.n	8000898 <__aeabi_fadd+0x260>
 8000896:	e714      	b.n	80006c2 <__aeabi_fadd+0x8a>
 8000898:	0030      	movs	r0, r6
 800089a:	4440      	add	r0, r8
 800089c:	0143      	lsls	r3, r0, #5
 800089e:	d400      	bmi.n	80008a2 <__aeabi_fadd+0x26a>
 80008a0:	e77e      	b.n	80007a0 <__aeabi_fadd+0x168>
 80008a2:	4b32      	ldr	r3, [pc, #200]	; (800096c <__aeabi_fadd+0x334>)
 80008a4:	3501      	adds	r5, #1
 80008a6:	4018      	ands	r0, r3
 80008a8:	e77a      	b.n	80007a0 <__aeabi_fadd+0x168>
 80008aa:	2fff      	cmp	r7, #255	; 0xff
 80008ac:	d08c      	beq.n	80007c8 <__aeabi_fadd+0x190>
 80008ae:	2380      	movs	r3, #128	; 0x80
 80008b0:	4641      	mov	r1, r8
 80008b2:	04db      	lsls	r3, r3, #19
 80008b4:	4319      	orrs	r1, r3
 80008b6:	4688      	mov	r8, r1
 80008b8:	e79f      	b.n	80007fa <__aeabi_fadd+0x1c2>
 80008ba:	4643      	mov	r3, r8
 80008bc:	000c      	movs	r4, r1
 80008be:	1af7      	subs	r7, r6, r3
 80008c0:	e6e3      	b.n	800068a <__aeabi_fadd+0x52>
 80008c2:	4642      	mov	r2, r8
 80008c4:	2a00      	cmp	r2, #0
 80008c6:	d000      	beq.n	80008ca <__aeabi_fadd+0x292>
 80008c8:	e775      	b.n	80007b6 <__aeabi_fadd+0x17e>
 80008ca:	2e00      	cmp	r6, #0
 80008cc:	d000      	beq.n	80008d0 <__aeabi_fadd+0x298>
 80008ce:	e77a      	b.n	80007c6 <__aeabi_fadd+0x18e>
 80008d0:	2380      	movs	r3, #128	; 0x80
 80008d2:	03db      	lsls	r3, r3, #15
 80008d4:	2400      	movs	r4, #0
 80008d6:	469c      	mov	ip, r3
 80008d8:	22ff      	movs	r2, #255	; 0xff
 80008da:	e6f2      	b.n	80006c2 <__aeabi_fadd+0x8a>
 80008dc:	0030      	movs	r0, r6
 80008de:	4440      	add	r0, r8
 80008e0:	2501      	movs	r5, #1
 80008e2:	0143      	lsls	r3, r0, #5
 80008e4:	d400      	bmi.n	80008e8 <__aeabi_fadd+0x2b0>
 80008e6:	e75b      	b.n	80007a0 <__aeabi_fadd+0x168>
 80008e8:	2502      	movs	r5, #2
 80008ea:	e718      	b.n	800071e <__aeabi_fadd+0xe6>
 80008ec:	4643      	mov	r3, r8
 80008ee:	2501      	movs	r5, #1
 80008f0:	1b98      	subs	r0, r3, r6
 80008f2:	e6c5      	b.n	8000680 <__aeabi_fadd+0x48>
 80008f4:	2320      	movs	r3, #32
 80008f6:	4644      	mov	r4, r8
 80008f8:	4640      	mov	r0, r8
 80008fa:	40d4      	lsrs	r4, r2
 80008fc:	1a9a      	subs	r2, r3, r2
 80008fe:	4090      	lsls	r0, r2
 8000900:	1e43      	subs	r3, r0, #1
 8000902:	4198      	sbcs	r0, r3
 8000904:	4320      	orrs	r0, r4
 8000906:	e7a4      	b.n	8000852 <__aeabi_fadd+0x21a>
 8000908:	000d      	movs	r5, r1
 800090a:	e74d      	b.n	80007a8 <__aeabi_fadd+0x170>
 800090c:	2320      	movs	r3, #32
 800090e:	4641      	mov	r1, r8
 8000910:	4640      	mov	r0, r8
 8000912:	40d1      	lsrs	r1, r2
 8000914:	1a9a      	subs	r2, r3, r2
 8000916:	4090      	lsls	r0, r2
 8000918:	1e43      	subs	r3, r0, #1
 800091a:	4198      	sbcs	r0, r3
 800091c:	4308      	orrs	r0, r1
 800091e:	e770      	b.n	8000802 <__aeabi_fadd+0x1ca>
 8000920:	4642      	mov	r2, r8
 8000922:	2a00      	cmp	r2, #0
 8000924:	d100      	bne.n	8000928 <__aeabi_fadd+0x2f0>
 8000926:	e74f      	b.n	80007c8 <__aeabi_fadd+0x190>
 8000928:	2e00      	cmp	r6, #0
 800092a:	d100      	bne.n	800092e <__aeabi_fadd+0x2f6>
 800092c:	e74d      	b.n	80007ca <__aeabi_fadd+0x192>
 800092e:	2280      	movs	r2, #128	; 0x80
 8000930:	03d2      	lsls	r2, r2, #15
 8000932:	4213      	tst	r3, r2
 8000934:	d100      	bne.n	8000938 <__aeabi_fadd+0x300>
 8000936:	e748      	b.n	80007ca <__aeabi_fadd+0x192>
 8000938:	4210      	tst	r0, r2
 800093a:	d000      	beq.n	800093e <__aeabi_fadd+0x306>
 800093c:	e745      	b.n	80007ca <__aeabi_fadd+0x192>
 800093e:	0003      	movs	r3, r0
 8000940:	e743      	b.n	80007ca <__aeabi_fadd+0x192>
 8000942:	2e00      	cmp	r6, #0
 8000944:	d090      	beq.n	8000868 <__aeabi_fadd+0x230>
 8000946:	000c      	movs	r4, r1
 8000948:	4684      	mov	ip, r0
 800094a:	2200      	movs	r2, #0
 800094c:	e6b9      	b.n	80006c2 <__aeabi_fadd+0x8a>
 800094e:	4643      	mov	r3, r8
 8000950:	000c      	movs	r4, r1
 8000952:	1af0      	subs	r0, r6, r3
 8000954:	3501      	adds	r5, #1
 8000956:	e693      	b.n	8000680 <__aeabi_fadd+0x48>
 8000958:	4684      	mov	ip, r0
 800095a:	2200      	movs	r2, #0
 800095c:	e6b1      	b.n	80006c2 <__aeabi_fadd+0x8a>
 800095e:	2800      	cmp	r0, #0
 8000960:	d000      	beq.n	8000964 <__aeabi_fadd+0x32c>
 8000962:	e71d      	b.n	80007a0 <__aeabi_fadd+0x168>
 8000964:	2300      	movs	r3, #0
 8000966:	2400      	movs	r4, #0
 8000968:	469c      	mov	ip, r3
 800096a:	e6aa      	b.n	80006c2 <__aeabi_fadd+0x8a>
 800096c:	fbffffff 	.word	0xfbffffff
 8000970:	7dffffff 	.word	0x7dffffff

08000974 <__aeabi_fdiv>:
 8000974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000976:	464f      	mov	r7, r9
 8000978:	4646      	mov	r6, r8
 800097a:	46d6      	mov	lr, sl
 800097c:	0245      	lsls	r5, r0, #9
 800097e:	b5c0      	push	{r6, r7, lr}
 8000980:	0047      	lsls	r7, r0, #1
 8000982:	1c0c      	adds	r4, r1, #0
 8000984:	0a6d      	lsrs	r5, r5, #9
 8000986:	0e3f      	lsrs	r7, r7, #24
 8000988:	0fc6      	lsrs	r6, r0, #31
 800098a:	2f00      	cmp	r7, #0
 800098c:	d100      	bne.n	8000990 <__aeabi_fdiv+0x1c>
 800098e:	e070      	b.n	8000a72 <__aeabi_fdiv+0xfe>
 8000990:	2fff      	cmp	r7, #255	; 0xff
 8000992:	d100      	bne.n	8000996 <__aeabi_fdiv+0x22>
 8000994:	e075      	b.n	8000a82 <__aeabi_fdiv+0x10e>
 8000996:	00eb      	lsls	r3, r5, #3
 8000998:	2580      	movs	r5, #128	; 0x80
 800099a:	04ed      	lsls	r5, r5, #19
 800099c:	431d      	orrs	r5, r3
 800099e:	2300      	movs	r3, #0
 80009a0:	4699      	mov	r9, r3
 80009a2:	469a      	mov	sl, r3
 80009a4:	3f7f      	subs	r7, #127	; 0x7f
 80009a6:	0260      	lsls	r0, r4, #9
 80009a8:	0a43      	lsrs	r3, r0, #9
 80009aa:	4698      	mov	r8, r3
 80009ac:	0063      	lsls	r3, r4, #1
 80009ae:	0e1b      	lsrs	r3, r3, #24
 80009b0:	0fe4      	lsrs	r4, r4, #31
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d04e      	beq.n	8000a54 <__aeabi_fdiv+0xe0>
 80009b6:	2bff      	cmp	r3, #255	; 0xff
 80009b8:	d046      	beq.n	8000a48 <__aeabi_fdiv+0xd4>
 80009ba:	4642      	mov	r2, r8
 80009bc:	00d0      	lsls	r0, r2, #3
 80009be:	2280      	movs	r2, #128	; 0x80
 80009c0:	04d2      	lsls	r2, r2, #19
 80009c2:	4302      	orrs	r2, r0
 80009c4:	4690      	mov	r8, r2
 80009c6:	2200      	movs	r2, #0
 80009c8:	3b7f      	subs	r3, #127	; 0x7f
 80009ca:	0031      	movs	r1, r6
 80009cc:	1aff      	subs	r7, r7, r3
 80009ce:	464b      	mov	r3, r9
 80009d0:	4061      	eors	r1, r4
 80009d2:	b2c9      	uxtb	r1, r1
 80009d4:	4313      	orrs	r3, r2
 80009d6:	2b0f      	cmp	r3, #15
 80009d8:	d900      	bls.n	80009dc <__aeabi_fdiv+0x68>
 80009da:	e0b5      	b.n	8000b48 <__aeabi_fdiv+0x1d4>
 80009dc:	486e      	ldr	r0, [pc, #440]	; (8000b98 <__aeabi_fdiv+0x224>)
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	58c3      	ldr	r3, [r0, r3]
 80009e2:	469f      	mov	pc, r3
 80009e4:	2300      	movs	r3, #0
 80009e6:	4698      	mov	r8, r3
 80009e8:	0026      	movs	r6, r4
 80009ea:	4645      	mov	r5, r8
 80009ec:	4692      	mov	sl, r2
 80009ee:	4653      	mov	r3, sl
 80009f0:	2b02      	cmp	r3, #2
 80009f2:	d100      	bne.n	80009f6 <__aeabi_fdiv+0x82>
 80009f4:	e089      	b.n	8000b0a <__aeabi_fdiv+0x196>
 80009f6:	2b03      	cmp	r3, #3
 80009f8:	d100      	bne.n	80009fc <__aeabi_fdiv+0x88>
 80009fa:	e09e      	b.n	8000b3a <__aeabi_fdiv+0x1c6>
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d018      	beq.n	8000a32 <__aeabi_fdiv+0xbe>
 8000a00:	003b      	movs	r3, r7
 8000a02:	337f      	adds	r3, #127	; 0x7f
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	dd69      	ble.n	8000adc <__aeabi_fdiv+0x168>
 8000a08:	076a      	lsls	r2, r5, #29
 8000a0a:	d004      	beq.n	8000a16 <__aeabi_fdiv+0xa2>
 8000a0c:	220f      	movs	r2, #15
 8000a0e:	402a      	ands	r2, r5
 8000a10:	2a04      	cmp	r2, #4
 8000a12:	d000      	beq.n	8000a16 <__aeabi_fdiv+0xa2>
 8000a14:	3504      	adds	r5, #4
 8000a16:	012a      	lsls	r2, r5, #4
 8000a18:	d503      	bpl.n	8000a22 <__aeabi_fdiv+0xae>
 8000a1a:	4b60      	ldr	r3, [pc, #384]	; (8000b9c <__aeabi_fdiv+0x228>)
 8000a1c:	401d      	ands	r5, r3
 8000a1e:	003b      	movs	r3, r7
 8000a20:	3380      	adds	r3, #128	; 0x80
 8000a22:	2bfe      	cmp	r3, #254	; 0xfe
 8000a24:	dd00      	ble.n	8000a28 <__aeabi_fdiv+0xb4>
 8000a26:	e070      	b.n	8000b0a <__aeabi_fdiv+0x196>
 8000a28:	01ad      	lsls	r5, r5, #6
 8000a2a:	0a6d      	lsrs	r5, r5, #9
 8000a2c:	b2d8      	uxtb	r0, r3
 8000a2e:	e002      	b.n	8000a36 <__aeabi_fdiv+0xc2>
 8000a30:	000e      	movs	r6, r1
 8000a32:	2000      	movs	r0, #0
 8000a34:	2500      	movs	r5, #0
 8000a36:	05c0      	lsls	r0, r0, #23
 8000a38:	4328      	orrs	r0, r5
 8000a3a:	07f6      	lsls	r6, r6, #31
 8000a3c:	4330      	orrs	r0, r6
 8000a3e:	bce0      	pop	{r5, r6, r7}
 8000a40:	46ba      	mov	sl, r7
 8000a42:	46b1      	mov	r9, r6
 8000a44:	46a8      	mov	r8, r5
 8000a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a48:	4643      	mov	r3, r8
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d13f      	bne.n	8000ace <__aeabi_fdiv+0x15a>
 8000a4e:	2202      	movs	r2, #2
 8000a50:	3fff      	subs	r7, #255	; 0xff
 8000a52:	e003      	b.n	8000a5c <__aeabi_fdiv+0xe8>
 8000a54:	4643      	mov	r3, r8
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d12d      	bne.n	8000ab6 <__aeabi_fdiv+0x142>
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	0031      	movs	r1, r6
 8000a5e:	464b      	mov	r3, r9
 8000a60:	4061      	eors	r1, r4
 8000a62:	b2c9      	uxtb	r1, r1
 8000a64:	4313      	orrs	r3, r2
 8000a66:	2b0f      	cmp	r3, #15
 8000a68:	d834      	bhi.n	8000ad4 <__aeabi_fdiv+0x160>
 8000a6a:	484d      	ldr	r0, [pc, #308]	; (8000ba0 <__aeabi_fdiv+0x22c>)
 8000a6c:	009b      	lsls	r3, r3, #2
 8000a6e:	58c3      	ldr	r3, [r0, r3]
 8000a70:	469f      	mov	pc, r3
 8000a72:	2d00      	cmp	r5, #0
 8000a74:	d113      	bne.n	8000a9e <__aeabi_fdiv+0x12a>
 8000a76:	2304      	movs	r3, #4
 8000a78:	4699      	mov	r9, r3
 8000a7a:	3b03      	subs	r3, #3
 8000a7c:	2700      	movs	r7, #0
 8000a7e:	469a      	mov	sl, r3
 8000a80:	e791      	b.n	80009a6 <__aeabi_fdiv+0x32>
 8000a82:	2d00      	cmp	r5, #0
 8000a84:	d105      	bne.n	8000a92 <__aeabi_fdiv+0x11e>
 8000a86:	2308      	movs	r3, #8
 8000a88:	4699      	mov	r9, r3
 8000a8a:	3b06      	subs	r3, #6
 8000a8c:	27ff      	movs	r7, #255	; 0xff
 8000a8e:	469a      	mov	sl, r3
 8000a90:	e789      	b.n	80009a6 <__aeabi_fdiv+0x32>
 8000a92:	230c      	movs	r3, #12
 8000a94:	4699      	mov	r9, r3
 8000a96:	3b09      	subs	r3, #9
 8000a98:	27ff      	movs	r7, #255	; 0xff
 8000a9a:	469a      	mov	sl, r3
 8000a9c:	e783      	b.n	80009a6 <__aeabi_fdiv+0x32>
 8000a9e:	0028      	movs	r0, r5
 8000aa0:	f002 fb3e 	bl	8003120 <__clzsi2>
 8000aa4:	2776      	movs	r7, #118	; 0x76
 8000aa6:	1f43      	subs	r3, r0, #5
 8000aa8:	409d      	lsls	r5, r3
 8000aaa:	2300      	movs	r3, #0
 8000aac:	427f      	negs	r7, r7
 8000aae:	4699      	mov	r9, r3
 8000ab0:	469a      	mov	sl, r3
 8000ab2:	1a3f      	subs	r7, r7, r0
 8000ab4:	e777      	b.n	80009a6 <__aeabi_fdiv+0x32>
 8000ab6:	4640      	mov	r0, r8
 8000ab8:	f002 fb32 	bl	8003120 <__clzsi2>
 8000abc:	4642      	mov	r2, r8
 8000abe:	1f43      	subs	r3, r0, #5
 8000ac0:	409a      	lsls	r2, r3
 8000ac2:	2376      	movs	r3, #118	; 0x76
 8000ac4:	425b      	negs	r3, r3
 8000ac6:	4690      	mov	r8, r2
 8000ac8:	1a1b      	subs	r3, r3, r0
 8000aca:	2200      	movs	r2, #0
 8000acc:	e77d      	b.n	80009ca <__aeabi_fdiv+0x56>
 8000ace:	23ff      	movs	r3, #255	; 0xff
 8000ad0:	2203      	movs	r2, #3
 8000ad2:	e77a      	b.n	80009ca <__aeabi_fdiv+0x56>
 8000ad4:	000e      	movs	r6, r1
 8000ad6:	20ff      	movs	r0, #255	; 0xff
 8000ad8:	2500      	movs	r5, #0
 8000ada:	e7ac      	b.n	8000a36 <__aeabi_fdiv+0xc2>
 8000adc:	2001      	movs	r0, #1
 8000ade:	1ac0      	subs	r0, r0, r3
 8000ae0:	281b      	cmp	r0, #27
 8000ae2:	dca6      	bgt.n	8000a32 <__aeabi_fdiv+0xbe>
 8000ae4:	379e      	adds	r7, #158	; 0x9e
 8000ae6:	002a      	movs	r2, r5
 8000ae8:	40bd      	lsls	r5, r7
 8000aea:	40c2      	lsrs	r2, r0
 8000aec:	1e6b      	subs	r3, r5, #1
 8000aee:	419d      	sbcs	r5, r3
 8000af0:	4315      	orrs	r5, r2
 8000af2:	076b      	lsls	r3, r5, #29
 8000af4:	d004      	beq.n	8000b00 <__aeabi_fdiv+0x18c>
 8000af6:	230f      	movs	r3, #15
 8000af8:	402b      	ands	r3, r5
 8000afa:	2b04      	cmp	r3, #4
 8000afc:	d000      	beq.n	8000b00 <__aeabi_fdiv+0x18c>
 8000afe:	3504      	adds	r5, #4
 8000b00:	016b      	lsls	r3, r5, #5
 8000b02:	d544      	bpl.n	8000b8e <__aeabi_fdiv+0x21a>
 8000b04:	2001      	movs	r0, #1
 8000b06:	2500      	movs	r5, #0
 8000b08:	e795      	b.n	8000a36 <__aeabi_fdiv+0xc2>
 8000b0a:	20ff      	movs	r0, #255	; 0xff
 8000b0c:	2500      	movs	r5, #0
 8000b0e:	e792      	b.n	8000a36 <__aeabi_fdiv+0xc2>
 8000b10:	2580      	movs	r5, #128	; 0x80
 8000b12:	2600      	movs	r6, #0
 8000b14:	20ff      	movs	r0, #255	; 0xff
 8000b16:	03ed      	lsls	r5, r5, #15
 8000b18:	e78d      	b.n	8000a36 <__aeabi_fdiv+0xc2>
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	4698      	mov	r8, r3
 8000b1e:	2080      	movs	r0, #128	; 0x80
 8000b20:	03c0      	lsls	r0, r0, #15
 8000b22:	4205      	tst	r5, r0
 8000b24:	d009      	beq.n	8000b3a <__aeabi_fdiv+0x1c6>
 8000b26:	4643      	mov	r3, r8
 8000b28:	4203      	tst	r3, r0
 8000b2a:	d106      	bne.n	8000b3a <__aeabi_fdiv+0x1c6>
 8000b2c:	4645      	mov	r5, r8
 8000b2e:	4305      	orrs	r5, r0
 8000b30:	026d      	lsls	r5, r5, #9
 8000b32:	0026      	movs	r6, r4
 8000b34:	20ff      	movs	r0, #255	; 0xff
 8000b36:	0a6d      	lsrs	r5, r5, #9
 8000b38:	e77d      	b.n	8000a36 <__aeabi_fdiv+0xc2>
 8000b3a:	2080      	movs	r0, #128	; 0x80
 8000b3c:	03c0      	lsls	r0, r0, #15
 8000b3e:	4305      	orrs	r5, r0
 8000b40:	026d      	lsls	r5, r5, #9
 8000b42:	20ff      	movs	r0, #255	; 0xff
 8000b44:	0a6d      	lsrs	r5, r5, #9
 8000b46:	e776      	b.n	8000a36 <__aeabi_fdiv+0xc2>
 8000b48:	4642      	mov	r2, r8
 8000b4a:	016b      	lsls	r3, r5, #5
 8000b4c:	0150      	lsls	r0, r2, #5
 8000b4e:	4283      	cmp	r3, r0
 8000b50:	d219      	bcs.n	8000b86 <__aeabi_fdiv+0x212>
 8000b52:	221b      	movs	r2, #27
 8000b54:	2500      	movs	r5, #0
 8000b56:	3f01      	subs	r7, #1
 8000b58:	2601      	movs	r6, #1
 8000b5a:	001c      	movs	r4, r3
 8000b5c:	006d      	lsls	r5, r5, #1
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	2c00      	cmp	r4, #0
 8000b62:	db01      	blt.n	8000b68 <__aeabi_fdiv+0x1f4>
 8000b64:	4298      	cmp	r0, r3
 8000b66:	d801      	bhi.n	8000b6c <__aeabi_fdiv+0x1f8>
 8000b68:	1a1b      	subs	r3, r3, r0
 8000b6a:	4335      	orrs	r5, r6
 8000b6c:	3a01      	subs	r2, #1
 8000b6e:	2a00      	cmp	r2, #0
 8000b70:	d1f3      	bne.n	8000b5a <__aeabi_fdiv+0x1e6>
 8000b72:	1e5a      	subs	r2, r3, #1
 8000b74:	4193      	sbcs	r3, r2
 8000b76:	431d      	orrs	r5, r3
 8000b78:	003b      	movs	r3, r7
 8000b7a:	337f      	adds	r3, #127	; 0x7f
 8000b7c:	000e      	movs	r6, r1
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	dd00      	ble.n	8000b84 <__aeabi_fdiv+0x210>
 8000b82:	e741      	b.n	8000a08 <__aeabi_fdiv+0x94>
 8000b84:	e7aa      	b.n	8000adc <__aeabi_fdiv+0x168>
 8000b86:	221a      	movs	r2, #26
 8000b88:	2501      	movs	r5, #1
 8000b8a:	1a1b      	subs	r3, r3, r0
 8000b8c:	e7e4      	b.n	8000b58 <__aeabi_fdiv+0x1e4>
 8000b8e:	01ad      	lsls	r5, r5, #6
 8000b90:	2000      	movs	r0, #0
 8000b92:	0a6d      	lsrs	r5, r5, #9
 8000b94:	e74f      	b.n	8000a36 <__aeabi_fdiv+0xc2>
 8000b96:	46c0      	nop			; (mov r8, r8)
 8000b98:	08012c40 	.word	0x08012c40
 8000b9c:	f7ffffff 	.word	0xf7ffffff
 8000ba0:	08012c80 	.word	0x08012c80

08000ba4 <__eqsf2>:
 8000ba4:	b570      	push	{r4, r5, r6, lr}
 8000ba6:	0042      	lsls	r2, r0, #1
 8000ba8:	0245      	lsls	r5, r0, #9
 8000baa:	024e      	lsls	r6, r1, #9
 8000bac:	004c      	lsls	r4, r1, #1
 8000bae:	0fc3      	lsrs	r3, r0, #31
 8000bb0:	0a6d      	lsrs	r5, r5, #9
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	0e12      	lsrs	r2, r2, #24
 8000bb6:	0a76      	lsrs	r6, r6, #9
 8000bb8:	0e24      	lsrs	r4, r4, #24
 8000bba:	0fc9      	lsrs	r1, r1, #31
 8000bbc:	2aff      	cmp	r2, #255	; 0xff
 8000bbe:	d006      	beq.n	8000bce <__eqsf2+0x2a>
 8000bc0:	2cff      	cmp	r4, #255	; 0xff
 8000bc2:	d003      	beq.n	8000bcc <__eqsf2+0x28>
 8000bc4:	42a2      	cmp	r2, r4
 8000bc6:	d101      	bne.n	8000bcc <__eqsf2+0x28>
 8000bc8:	42b5      	cmp	r5, r6
 8000bca:	d006      	beq.n	8000bda <__eqsf2+0x36>
 8000bcc:	bd70      	pop	{r4, r5, r6, pc}
 8000bce:	2d00      	cmp	r5, #0
 8000bd0:	d1fc      	bne.n	8000bcc <__eqsf2+0x28>
 8000bd2:	2cff      	cmp	r4, #255	; 0xff
 8000bd4:	d1fa      	bne.n	8000bcc <__eqsf2+0x28>
 8000bd6:	2e00      	cmp	r6, #0
 8000bd8:	d1f8      	bne.n	8000bcc <__eqsf2+0x28>
 8000bda:	428b      	cmp	r3, r1
 8000bdc:	d006      	beq.n	8000bec <__eqsf2+0x48>
 8000bde:	2001      	movs	r0, #1
 8000be0:	2a00      	cmp	r2, #0
 8000be2:	d1f3      	bne.n	8000bcc <__eqsf2+0x28>
 8000be4:	0028      	movs	r0, r5
 8000be6:	1e43      	subs	r3, r0, #1
 8000be8:	4198      	sbcs	r0, r3
 8000bea:	e7ef      	b.n	8000bcc <__eqsf2+0x28>
 8000bec:	2000      	movs	r0, #0
 8000bee:	e7ed      	b.n	8000bcc <__eqsf2+0x28>

08000bf0 <__gesf2>:
 8000bf0:	b570      	push	{r4, r5, r6, lr}
 8000bf2:	0042      	lsls	r2, r0, #1
 8000bf4:	0245      	lsls	r5, r0, #9
 8000bf6:	024e      	lsls	r6, r1, #9
 8000bf8:	004c      	lsls	r4, r1, #1
 8000bfa:	0fc3      	lsrs	r3, r0, #31
 8000bfc:	0a6d      	lsrs	r5, r5, #9
 8000bfe:	0e12      	lsrs	r2, r2, #24
 8000c00:	0a76      	lsrs	r6, r6, #9
 8000c02:	0e24      	lsrs	r4, r4, #24
 8000c04:	0fc8      	lsrs	r0, r1, #31
 8000c06:	2aff      	cmp	r2, #255	; 0xff
 8000c08:	d01b      	beq.n	8000c42 <__gesf2+0x52>
 8000c0a:	2cff      	cmp	r4, #255	; 0xff
 8000c0c:	d00e      	beq.n	8000c2c <__gesf2+0x3c>
 8000c0e:	2a00      	cmp	r2, #0
 8000c10:	d11b      	bne.n	8000c4a <__gesf2+0x5a>
 8000c12:	2c00      	cmp	r4, #0
 8000c14:	d101      	bne.n	8000c1a <__gesf2+0x2a>
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	d01c      	beq.n	8000c54 <__gesf2+0x64>
 8000c1a:	2d00      	cmp	r5, #0
 8000c1c:	d00c      	beq.n	8000c38 <__gesf2+0x48>
 8000c1e:	4283      	cmp	r3, r0
 8000c20:	d01c      	beq.n	8000c5c <__gesf2+0x6c>
 8000c22:	2102      	movs	r1, #2
 8000c24:	1e58      	subs	r0, r3, #1
 8000c26:	4008      	ands	r0, r1
 8000c28:	3801      	subs	r0, #1
 8000c2a:	bd70      	pop	{r4, r5, r6, pc}
 8000c2c:	2e00      	cmp	r6, #0
 8000c2e:	d122      	bne.n	8000c76 <__gesf2+0x86>
 8000c30:	2a00      	cmp	r2, #0
 8000c32:	d1f4      	bne.n	8000c1e <__gesf2+0x2e>
 8000c34:	2d00      	cmp	r5, #0
 8000c36:	d1f2      	bne.n	8000c1e <__gesf2+0x2e>
 8000c38:	2800      	cmp	r0, #0
 8000c3a:	d1f6      	bne.n	8000c2a <__gesf2+0x3a>
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	4240      	negs	r0, r0
 8000c40:	e7f3      	b.n	8000c2a <__gesf2+0x3a>
 8000c42:	2d00      	cmp	r5, #0
 8000c44:	d117      	bne.n	8000c76 <__gesf2+0x86>
 8000c46:	2cff      	cmp	r4, #255	; 0xff
 8000c48:	d0f0      	beq.n	8000c2c <__gesf2+0x3c>
 8000c4a:	2c00      	cmp	r4, #0
 8000c4c:	d1e7      	bne.n	8000c1e <__gesf2+0x2e>
 8000c4e:	2e00      	cmp	r6, #0
 8000c50:	d1e5      	bne.n	8000c1e <__gesf2+0x2e>
 8000c52:	e7e6      	b.n	8000c22 <__gesf2+0x32>
 8000c54:	2000      	movs	r0, #0
 8000c56:	2d00      	cmp	r5, #0
 8000c58:	d0e7      	beq.n	8000c2a <__gesf2+0x3a>
 8000c5a:	e7e2      	b.n	8000c22 <__gesf2+0x32>
 8000c5c:	42a2      	cmp	r2, r4
 8000c5e:	dc05      	bgt.n	8000c6c <__gesf2+0x7c>
 8000c60:	dbea      	blt.n	8000c38 <__gesf2+0x48>
 8000c62:	42b5      	cmp	r5, r6
 8000c64:	d802      	bhi.n	8000c6c <__gesf2+0x7c>
 8000c66:	d3e7      	bcc.n	8000c38 <__gesf2+0x48>
 8000c68:	2000      	movs	r0, #0
 8000c6a:	e7de      	b.n	8000c2a <__gesf2+0x3a>
 8000c6c:	4243      	negs	r3, r0
 8000c6e:	4158      	adcs	r0, r3
 8000c70:	0040      	lsls	r0, r0, #1
 8000c72:	3801      	subs	r0, #1
 8000c74:	e7d9      	b.n	8000c2a <__gesf2+0x3a>
 8000c76:	2002      	movs	r0, #2
 8000c78:	4240      	negs	r0, r0
 8000c7a:	e7d6      	b.n	8000c2a <__gesf2+0x3a>

08000c7c <__lesf2>:
 8000c7c:	b570      	push	{r4, r5, r6, lr}
 8000c7e:	0042      	lsls	r2, r0, #1
 8000c80:	0245      	lsls	r5, r0, #9
 8000c82:	024e      	lsls	r6, r1, #9
 8000c84:	004c      	lsls	r4, r1, #1
 8000c86:	0fc3      	lsrs	r3, r0, #31
 8000c88:	0a6d      	lsrs	r5, r5, #9
 8000c8a:	0e12      	lsrs	r2, r2, #24
 8000c8c:	0a76      	lsrs	r6, r6, #9
 8000c8e:	0e24      	lsrs	r4, r4, #24
 8000c90:	0fc8      	lsrs	r0, r1, #31
 8000c92:	2aff      	cmp	r2, #255	; 0xff
 8000c94:	d00b      	beq.n	8000cae <__lesf2+0x32>
 8000c96:	2cff      	cmp	r4, #255	; 0xff
 8000c98:	d00d      	beq.n	8000cb6 <__lesf2+0x3a>
 8000c9a:	2a00      	cmp	r2, #0
 8000c9c:	d11f      	bne.n	8000cde <__lesf2+0x62>
 8000c9e:	2c00      	cmp	r4, #0
 8000ca0:	d116      	bne.n	8000cd0 <__lesf2+0x54>
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	d114      	bne.n	8000cd0 <__lesf2+0x54>
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	2d00      	cmp	r5, #0
 8000caa:	d010      	beq.n	8000cce <__lesf2+0x52>
 8000cac:	e009      	b.n	8000cc2 <__lesf2+0x46>
 8000cae:	2d00      	cmp	r5, #0
 8000cb0:	d10c      	bne.n	8000ccc <__lesf2+0x50>
 8000cb2:	2cff      	cmp	r4, #255	; 0xff
 8000cb4:	d113      	bne.n	8000cde <__lesf2+0x62>
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	d108      	bne.n	8000ccc <__lesf2+0x50>
 8000cba:	2a00      	cmp	r2, #0
 8000cbc:	d008      	beq.n	8000cd0 <__lesf2+0x54>
 8000cbe:	4283      	cmp	r3, r0
 8000cc0:	d012      	beq.n	8000ce8 <__lesf2+0x6c>
 8000cc2:	2102      	movs	r1, #2
 8000cc4:	1e58      	subs	r0, r3, #1
 8000cc6:	4008      	ands	r0, r1
 8000cc8:	3801      	subs	r0, #1
 8000cca:	e000      	b.n	8000cce <__lesf2+0x52>
 8000ccc:	2002      	movs	r0, #2
 8000cce:	bd70      	pop	{r4, r5, r6, pc}
 8000cd0:	2d00      	cmp	r5, #0
 8000cd2:	d1f4      	bne.n	8000cbe <__lesf2+0x42>
 8000cd4:	2800      	cmp	r0, #0
 8000cd6:	d1fa      	bne.n	8000cce <__lesf2+0x52>
 8000cd8:	2001      	movs	r0, #1
 8000cda:	4240      	negs	r0, r0
 8000cdc:	e7f7      	b.n	8000cce <__lesf2+0x52>
 8000cde:	2c00      	cmp	r4, #0
 8000ce0:	d1ed      	bne.n	8000cbe <__lesf2+0x42>
 8000ce2:	2e00      	cmp	r6, #0
 8000ce4:	d1eb      	bne.n	8000cbe <__lesf2+0x42>
 8000ce6:	e7ec      	b.n	8000cc2 <__lesf2+0x46>
 8000ce8:	42a2      	cmp	r2, r4
 8000cea:	dc05      	bgt.n	8000cf8 <__lesf2+0x7c>
 8000cec:	dbf2      	blt.n	8000cd4 <__lesf2+0x58>
 8000cee:	42b5      	cmp	r5, r6
 8000cf0:	d802      	bhi.n	8000cf8 <__lesf2+0x7c>
 8000cf2:	d3ef      	bcc.n	8000cd4 <__lesf2+0x58>
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	e7ea      	b.n	8000cce <__lesf2+0x52>
 8000cf8:	4243      	negs	r3, r0
 8000cfa:	4158      	adcs	r0, r3
 8000cfc:	0040      	lsls	r0, r0, #1
 8000cfe:	3801      	subs	r0, #1
 8000d00:	e7e5      	b.n	8000cce <__lesf2+0x52>
 8000d02:	46c0      	nop			; (mov r8, r8)

08000d04 <__aeabi_fmul>:
 8000d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d06:	464f      	mov	r7, r9
 8000d08:	4646      	mov	r6, r8
 8000d0a:	46d6      	mov	lr, sl
 8000d0c:	0244      	lsls	r4, r0, #9
 8000d0e:	0045      	lsls	r5, r0, #1
 8000d10:	b5c0      	push	{r6, r7, lr}
 8000d12:	0a64      	lsrs	r4, r4, #9
 8000d14:	1c0f      	adds	r7, r1, #0
 8000d16:	0e2d      	lsrs	r5, r5, #24
 8000d18:	0fc6      	lsrs	r6, r0, #31
 8000d1a:	2d00      	cmp	r5, #0
 8000d1c:	d100      	bne.n	8000d20 <__aeabi_fmul+0x1c>
 8000d1e:	e08d      	b.n	8000e3c <__aeabi_fmul+0x138>
 8000d20:	2dff      	cmp	r5, #255	; 0xff
 8000d22:	d100      	bne.n	8000d26 <__aeabi_fmul+0x22>
 8000d24:	e092      	b.n	8000e4c <__aeabi_fmul+0x148>
 8000d26:	2300      	movs	r3, #0
 8000d28:	2080      	movs	r0, #128	; 0x80
 8000d2a:	4699      	mov	r9, r3
 8000d2c:	469a      	mov	sl, r3
 8000d2e:	00e4      	lsls	r4, r4, #3
 8000d30:	04c0      	lsls	r0, r0, #19
 8000d32:	4304      	orrs	r4, r0
 8000d34:	3d7f      	subs	r5, #127	; 0x7f
 8000d36:	0278      	lsls	r0, r7, #9
 8000d38:	0a43      	lsrs	r3, r0, #9
 8000d3a:	4698      	mov	r8, r3
 8000d3c:	007b      	lsls	r3, r7, #1
 8000d3e:	0e1b      	lsrs	r3, r3, #24
 8000d40:	0fff      	lsrs	r7, r7, #31
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d100      	bne.n	8000d48 <__aeabi_fmul+0x44>
 8000d46:	e070      	b.n	8000e2a <__aeabi_fmul+0x126>
 8000d48:	2bff      	cmp	r3, #255	; 0xff
 8000d4a:	d100      	bne.n	8000d4e <__aeabi_fmul+0x4a>
 8000d4c:	e086      	b.n	8000e5c <__aeabi_fmul+0x158>
 8000d4e:	4642      	mov	r2, r8
 8000d50:	00d0      	lsls	r0, r2, #3
 8000d52:	2280      	movs	r2, #128	; 0x80
 8000d54:	3b7f      	subs	r3, #127	; 0x7f
 8000d56:	18ed      	adds	r5, r5, r3
 8000d58:	2300      	movs	r3, #0
 8000d5a:	04d2      	lsls	r2, r2, #19
 8000d5c:	4302      	orrs	r2, r0
 8000d5e:	4690      	mov	r8, r2
 8000d60:	469c      	mov	ip, r3
 8000d62:	0031      	movs	r1, r6
 8000d64:	464b      	mov	r3, r9
 8000d66:	4079      	eors	r1, r7
 8000d68:	1c68      	adds	r0, r5, #1
 8000d6a:	2b0f      	cmp	r3, #15
 8000d6c:	d81c      	bhi.n	8000da8 <__aeabi_fmul+0xa4>
 8000d6e:	4a76      	ldr	r2, [pc, #472]	; (8000f48 <__aeabi_fmul+0x244>)
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	58d3      	ldr	r3, [r2, r3]
 8000d74:	469f      	mov	pc, r3
 8000d76:	0039      	movs	r1, r7
 8000d78:	4644      	mov	r4, r8
 8000d7a:	46e2      	mov	sl, ip
 8000d7c:	4653      	mov	r3, sl
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d00f      	beq.n	8000da2 <__aeabi_fmul+0x9e>
 8000d82:	2b03      	cmp	r3, #3
 8000d84:	d100      	bne.n	8000d88 <__aeabi_fmul+0x84>
 8000d86:	e0d7      	b.n	8000f38 <__aeabi_fmul+0x234>
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d137      	bne.n	8000dfc <__aeabi_fmul+0xf8>
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	2400      	movs	r4, #0
 8000d90:	05c0      	lsls	r0, r0, #23
 8000d92:	4320      	orrs	r0, r4
 8000d94:	07c9      	lsls	r1, r1, #31
 8000d96:	4308      	orrs	r0, r1
 8000d98:	bce0      	pop	{r5, r6, r7}
 8000d9a:	46ba      	mov	sl, r7
 8000d9c:	46b1      	mov	r9, r6
 8000d9e:	46a8      	mov	r8, r5
 8000da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000da2:	20ff      	movs	r0, #255	; 0xff
 8000da4:	2400      	movs	r4, #0
 8000da6:	e7f3      	b.n	8000d90 <__aeabi_fmul+0x8c>
 8000da8:	0c26      	lsrs	r6, r4, #16
 8000daa:	0424      	lsls	r4, r4, #16
 8000dac:	0c22      	lsrs	r2, r4, #16
 8000dae:	4644      	mov	r4, r8
 8000db0:	0424      	lsls	r4, r4, #16
 8000db2:	0c24      	lsrs	r4, r4, #16
 8000db4:	4643      	mov	r3, r8
 8000db6:	0027      	movs	r7, r4
 8000db8:	0c1b      	lsrs	r3, r3, #16
 8000dba:	4357      	muls	r7, r2
 8000dbc:	4374      	muls	r4, r6
 8000dbe:	435a      	muls	r2, r3
 8000dc0:	435e      	muls	r6, r3
 8000dc2:	1912      	adds	r2, r2, r4
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	189b      	adds	r3, r3, r2
 8000dc8:	429c      	cmp	r4, r3
 8000dca:	d903      	bls.n	8000dd4 <__aeabi_fmul+0xd0>
 8000dcc:	2280      	movs	r2, #128	; 0x80
 8000dce:	0252      	lsls	r2, r2, #9
 8000dd0:	4694      	mov	ip, r2
 8000dd2:	4466      	add	r6, ip
 8000dd4:	043f      	lsls	r7, r7, #16
 8000dd6:	041a      	lsls	r2, r3, #16
 8000dd8:	0c3f      	lsrs	r7, r7, #16
 8000dda:	19d2      	adds	r2, r2, r7
 8000ddc:	0194      	lsls	r4, r2, #6
 8000dde:	1e67      	subs	r7, r4, #1
 8000de0:	41bc      	sbcs	r4, r7
 8000de2:	0c1b      	lsrs	r3, r3, #16
 8000de4:	0e92      	lsrs	r2, r2, #26
 8000de6:	199b      	adds	r3, r3, r6
 8000de8:	4314      	orrs	r4, r2
 8000dea:	019b      	lsls	r3, r3, #6
 8000dec:	431c      	orrs	r4, r3
 8000dee:	011b      	lsls	r3, r3, #4
 8000df0:	d400      	bmi.n	8000df4 <__aeabi_fmul+0xf0>
 8000df2:	e09b      	b.n	8000f2c <__aeabi_fmul+0x228>
 8000df4:	2301      	movs	r3, #1
 8000df6:	0862      	lsrs	r2, r4, #1
 8000df8:	401c      	ands	r4, r3
 8000dfa:	4314      	orrs	r4, r2
 8000dfc:	0002      	movs	r2, r0
 8000dfe:	327f      	adds	r2, #127	; 0x7f
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	dd64      	ble.n	8000ece <__aeabi_fmul+0x1ca>
 8000e04:	0763      	lsls	r3, r4, #29
 8000e06:	d004      	beq.n	8000e12 <__aeabi_fmul+0x10e>
 8000e08:	230f      	movs	r3, #15
 8000e0a:	4023      	ands	r3, r4
 8000e0c:	2b04      	cmp	r3, #4
 8000e0e:	d000      	beq.n	8000e12 <__aeabi_fmul+0x10e>
 8000e10:	3404      	adds	r4, #4
 8000e12:	0123      	lsls	r3, r4, #4
 8000e14:	d503      	bpl.n	8000e1e <__aeabi_fmul+0x11a>
 8000e16:	0002      	movs	r2, r0
 8000e18:	4b4c      	ldr	r3, [pc, #304]	; (8000f4c <__aeabi_fmul+0x248>)
 8000e1a:	3280      	adds	r2, #128	; 0x80
 8000e1c:	401c      	ands	r4, r3
 8000e1e:	2afe      	cmp	r2, #254	; 0xfe
 8000e20:	dcbf      	bgt.n	8000da2 <__aeabi_fmul+0x9e>
 8000e22:	01a4      	lsls	r4, r4, #6
 8000e24:	0a64      	lsrs	r4, r4, #9
 8000e26:	b2d0      	uxtb	r0, r2
 8000e28:	e7b2      	b.n	8000d90 <__aeabi_fmul+0x8c>
 8000e2a:	4643      	mov	r3, r8
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d13d      	bne.n	8000eac <__aeabi_fmul+0x1a8>
 8000e30:	464a      	mov	r2, r9
 8000e32:	3301      	adds	r3, #1
 8000e34:	431a      	orrs	r2, r3
 8000e36:	4691      	mov	r9, r2
 8000e38:	469c      	mov	ip, r3
 8000e3a:	e792      	b.n	8000d62 <__aeabi_fmul+0x5e>
 8000e3c:	2c00      	cmp	r4, #0
 8000e3e:	d129      	bne.n	8000e94 <__aeabi_fmul+0x190>
 8000e40:	2304      	movs	r3, #4
 8000e42:	4699      	mov	r9, r3
 8000e44:	3b03      	subs	r3, #3
 8000e46:	2500      	movs	r5, #0
 8000e48:	469a      	mov	sl, r3
 8000e4a:	e774      	b.n	8000d36 <__aeabi_fmul+0x32>
 8000e4c:	2c00      	cmp	r4, #0
 8000e4e:	d11b      	bne.n	8000e88 <__aeabi_fmul+0x184>
 8000e50:	2308      	movs	r3, #8
 8000e52:	4699      	mov	r9, r3
 8000e54:	3b06      	subs	r3, #6
 8000e56:	25ff      	movs	r5, #255	; 0xff
 8000e58:	469a      	mov	sl, r3
 8000e5a:	e76c      	b.n	8000d36 <__aeabi_fmul+0x32>
 8000e5c:	4643      	mov	r3, r8
 8000e5e:	35ff      	adds	r5, #255	; 0xff
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d10b      	bne.n	8000e7c <__aeabi_fmul+0x178>
 8000e64:	2302      	movs	r3, #2
 8000e66:	464a      	mov	r2, r9
 8000e68:	431a      	orrs	r2, r3
 8000e6a:	4691      	mov	r9, r2
 8000e6c:	469c      	mov	ip, r3
 8000e6e:	e778      	b.n	8000d62 <__aeabi_fmul+0x5e>
 8000e70:	4653      	mov	r3, sl
 8000e72:	0031      	movs	r1, r6
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d000      	beq.n	8000e7a <__aeabi_fmul+0x176>
 8000e78:	e783      	b.n	8000d82 <__aeabi_fmul+0x7e>
 8000e7a:	e792      	b.n	8000da2 <__aeabi_fmul+0x9e>
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	464a      	mov	r2, r9
 8000e80:	431a      	orrs	r2, r3
 8000e82:	4691      	mov	r9, r2
 8000e84:	469c      	mov	ip, r3
 8000e86:	e76c      	b.n	8000d62 <__aeabi_fmul+0x5e>
 8000e88:	230c      	movs	r3, #12
 8000e8a:	4699      	mov	r9, r3
 8000e8c:	3b09      	subs	r3, #9
 8000e8e:	25ff      	movs	r5, #255	; 0xff
 8000e90:	469a      	mov	sl, r3
 8000e92:	e750      	b.n	8000d36 <__aeabi_fmul+0x32>
 8000e94:	0020      	movs	r0, r4
 8000e96:	f002 f943 	bl	8003120 <__clzsi2>
 8000e9a:	2576      	movs	r5, #118	; 0x76
 8000e9c:	1f43      	subs	r3, r0, #5
 8000e9e:	409c      	lsls	r4, r3
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	426d      	negs	r5, r5
 8000ea4:	4699      	mov	r9, r3
 8000ea6:	469a      	mov	sl, r3
 8000ea8:	1a2d      	subs	r5, r5, r0
 8000eaa:	e744      	b.n	8000d36 <__aeabi_fmul+0x32>
 8000eac:	4640      	mov	r0, r8
 8000eae:	f002 f937 	bl	8003120 <__clzsi2>
 8000eb2:	4642      	mov	r2, r8
 8000eb4:	1f43      	subs	r3, r0, #5
 8000eb6:	409a      	lsls	r2, r3
 8000eb8:	2300      	movs	r3, #0
 8000eba:	1a2d      	subs	r5, r5, r0
 8000ebc:	4690      	mov	r8, r2
 8000ebe:	469c      	mov	ip, r3
 8000ec0:	3d76      	subs	r5, #118	; 0x76
 8000ec2:	e74e      	b.n	8000d62 <__aeabi_fmul+0x5e>
 8000ec4:	2480      	movs	r4, #128	; 0x80
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	20ff      	movs	r0, #255	; 0xff
 8000eca:	03e4      	lsls	r4, r4, #15
 8000ecc:	e760      	b.n	8000d90 <__aeabi_fmul+0x8c>
 8000ece:	2301      	movs	r3, #1
 8000ed0:	1a9b      	subs	r3, r3, r2
 8000ed2:	2b1b      	cmp	r3, #27
 8000ed4:	dd00      	ble.n	8000ed8 <__aeabi_fmul+0x1d4>
 8000ed6:	e759      	b.n	8000d8c <__aeabi_fmul+0x88>
 8000ed8:	0022      	movs	r2, r4
 8000eda:	309e      	adds	r0, #158	; 0x9e
 8000edc:	40da      	lsrs	r2, r3
 8000ede:	4084      	lsls	r4, r0
 8000ee0:	0013      	movs	r3, r2
 8000ee2:	1e62      	subs	r2, r4, #1
 8000ee4:	4194      	sbcs	r4, r2
 8000ee6:	431c      	orrs	r4, r3
 8000ee8:	0763      	lsls	r3, r4, #29
 8000eea:	d004      	beq.n	8000ef6 <__aeabi_fmul+0x1f2>
 8000eec:	230f      	movs	r3, #15
 8000eee:	4023      	ands	r3, r4
 8000ef0:	2b04      	cmp	r3, #4
 8000ef2:	d000      	beq.n	8000ef6 <__aeabi_fmul+0x1f2>
 8000ef4:	3404      	adds	r4, #4
 8000ef6:	0163      	lsls	r3, r4, #5
 8000ef8:	d51a      	bpl.n	8000f30 <__aeabi_fmul+0x22c>
 8000efa:	2001      	movs	r0, #1
 8000efc:	2400      	movs	r4, #0
 8000efe:	e747      	b.n	8000d90 <__aeabi_fmul+0x8c>
 8000f00:	2080      	movs	r0, #128	; 0x80
 8000f02:	03c0      	lsls	r0, r0, #15
 8000f04:	4204      	tst	r4, r0
 8000f06:	d009      	beq.n	8000f1c <__aeabi_fmul+0x218>
 8000f08:	4643      	mov	r3, r8
 8000f0a:	4203      	tst	r3, r0
 8000f0c:	d106      	bne.n	8000f1c <__aeabi_fmul+0x218>
 8000f0e:	4644      	mov	r4, r8
 8000f10:	4304      	orrs	r4, r0
 8000f12:	0264      	lsls	r4, r4, #9
 8000f14:	0039      	movs	r1, r7
 8000f16:	20ff      	movs	r0, #255	; 0xff
 8000f18:	0a64      	lsrs	r4, r4, #9
 8000f1a:	e739      	b.n	8000d90 <__aeabi_fmul+0x8c>
 8000f1c:	2080      	movs	r0, #128	; 0x80
 8000f1e:	03c0      	lsls	r0, r0, #15
 8000f20:	4304      	orrs	r4, r0
 8000f22:	0264      	lsls	r4, r4, #9
 8000f24:	0031      	movs	r1, r6
 8000f26:	20ff      	movs	r0, #255	; 0xff
 8000f28:	0a64      	lsrs	r4, r4, #9
 8000f2a:	e731      	b.n	8000d90 <__aeabi_fmul+0x8c>
 8000f2c:	0028      	movs	r0, r5
 8000f2e:	e765      	b.n	8000dfc <__aeabi_fmul+0xf8>
 8000f30:	01a4      	lsls	r4, r4, #6
 8000f32:	2000      	movs	r0, #0
 8000f34:	0a64      	lsrs	r4, r4, #9
 8000f36:	e72b      	b.n	8000d90 <__aeabi_fmul+0x8c>
 8000f38:	2080      	movs	r0, #128	; 0x80
 8000f3a:	03c0      	lsls	r0, r0, #15
 8000f3c:	4304      	orrs	r4, r0
 8000f3e:	0264      	lsls	r4, r4, #9
 8000f40:	20ff      	movs	r0, #255	; 0xff
 8000f42:	0a64      	lsrs	r4, r4, #9
 8000f44:	e724      	b.n	8000d90 <__aeabi_fmul+0x8c>
 8000f46:	46c0      	nop			; (mov r8, r8)
 8000f48:	08012cc0 	.word	0x08012cc0
 8000f4c:	f7ffffff 	.word	0xf7ffffff

08000f50 <__aeabi_fsub>:
 8000f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f52:	46ce      	mov	lr, r9
 8000f54:	4647      	mov	r7, r8
 8000f56:	0243      	lsls	r3, r0, #9
 8000f58:	0a5b      	lsrs	r3, r3, #9
 8000f5a:	024e      	lsls	r6, r1, #9
 8000f5c:	00da      	lsls	r2, r3, #3
 8000f5e:	4694      	mov	ip, r2
 8000f60:	0a72      	lsrs	r2, r6, #9
 8000f62:	4691      	mov	r9, r2
 8000f64:	0045      	lsls	r5, r0, #1
 8000f66:	004a      	lsls	r2, r1, #1
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	0e2d      	lsrs	r5, r5, #24
 8000f6c:	001f      	movs	r7, r3
 8000f6e:	0fc4      	lsrs	r4, r0, #31
 8000f70:	0e12      	lsrs	r2, r2, #24
 8000f72:	0fc9      	lsrs	r1, r1, #31
 8000f74:	09b6      	lsrs	r6, r6, #6
 8000f76:	2aff      	cmp	r2, #255	; 0xff
 8000f78:	d05b      	beq.n	8001032 <__aeabi_fsub+0xe2>
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	4041      	eors	r1, r0
 8000f7e:	428c      	cmp	r4, r1
 8000f80:	d039      	beq.n	8000ff6 <__aeabi_fsub+0xa6>
 8000f82:	1aa8      	subs	r0, r5, r2
 8000f84:	2800      	cmp	r0, #0
 8000f86:	dd5a      	ble.n	800103e <__aeabi_fsub+0xee>
 8000f88:	2a00      	cmp	r2, #0
 8000f8a:	d06a      	beq.n	8001062 <__aeabi_fsub+0x112>
 8000f8c:	2dff      	cmp	r5, #255	; 0xff
 8000f8e:	d100      	bne.n	8000f92 <__aeabi_fsub+0x42>
 8000f90:	e0d9      	b.n	8001146 <__aeabi_fsub+0x1f6>
 8000f92:	2280      	movs	r2, #128	; 0x80
 8000f94:	04d2      	lsls	r2, r2, #19
 8000f96:	4316      	orrs	r6, r2
 8000f98:	281b      	cmp	r0, #27
 8000f9a:	dc00      	bgt.n	8000f9e <__aeabi_fsub+0x4e>
 8000f9c:	e0e9      	b.n	8001172 <__aeabi_fsub+0x222>
 8000f9e:	2001      	movs	r0, #1
 8000fa0:	4663      	mov	r3, ip
 8000fa2:	1a18      	subs	r0, r3, r0
 8000fa4:	0143      	lsls	r3, r0, #5
 8000fa6:	d400      	bmi.n	8000faa <__aeabi_fsub+0x5a>
 8000fa8:	e0b4      	b.n	8001114 <__aeabi_fsub+0x1c4>
 8000faa:	0180      	lsls	r0, r0, #6
 8000fac:	0987      	lsrs	r7, r0, #6
 8000fae:	0038      	movs	r0, r7
 8000fb0:	f002 f8b6 	bl	8003120 <__clzsi2>
 8000fb4:	3805      	subs	r0, #5
 8000fb6:	4087      	lsls	r7, r0
 8000fb8:	4285      	cmp	r5, r0
 8000fba:	dc00      	bgt.n	8000fbe <__aeabi_fsub+0x6e>
 8000fbc:	e0cc      	b.n	8001158 <__aeabi_fsub+0x208>
 8000fbe:	1a2d      	subs	r5, r5, r0
 8000fc0:	48b5      	ldr	r0, [pc, #724]	; (8001298 <__aeabi_fsub+0x348>)
 8000fc2:	4038      	ands	r0, r7
 8000fc4:	0743      	lsls	r3, r0, #29
 8000fc6:	d004      	beq.n	8000fd2 <__aeabi_fsub+0x82>
 8000fc8:	230f      	movs	r3, #15
 8000fca:	4003      	ands	r3, r0
 8000fcc:	2b04      	cmp	r3, #4
 8000fce:	d000      	beq.n	8000fd2 <__aeabi_fsub+0x82>
 8000fd0:	3004      	adds	r0, #4
 8000fd2:	0143      	lsls	r3, r0, #5
 8000fd4:	d400      	bmi.n	8000fd8 <__aeabi_fsub+0x88>
 8000fd6:	e0a0      	b.n	800111a <__aeabi_fsub+0x1ca>
 8000fd8:	1c6a      	adds	r2, r5, #1
 8000fda:	2dfe      	cmp	r5, #254	; 0xfe
 8000fdc:	d100      	bne.n	8000fe0 <__aeabi_fsub+0x90>
 8000fde:	e08d      	b.n	80010fc <__aeabi_fsub+0x1ac>
 8000fe0:	0180      	lsls	r0, r0, #6
 8000fe2:	0a47      	lsrs	r7, r0, #9
 8000fe4:	b2d2      	uxtb	r2, r2
 8000fe6:	05d0      	lsls	r0, r2, #23
 8000fe8:	4338      	orrs	r0, r7
 8000fea:	07e4      	lsls	r4, r4, #31
 8000fec:	4320      	orrs	r0, r4
 8000fee:	bcc0      	pop	{r6, r7}
 8000ff0:	46b9      	mov	r9, r7
 8000ff2:	46b0      	mov	r8, r6
 8000ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ff6:	1aa8      	subs	r0, r5, r2
 8000ff8:	4680      	mov	r8, r0
 8000ffa:	2800      	cmp	r0, #0
 8000ffc:	dd45      	ble.n	800108a <__aeabi_fsub+0x13a>
 8000ffe:	2a00      	cmp	r2, #0
 8001000:	d070      	beq.n	80010e4 <__aeabi_fsub+0x194>
 8001002:	2dff      	cmp	r5, #255	; 0xff
 8001004:	d100      	bne.n	8001008 <__aeabi_fsub+0xb8>
 8001006:	e09e      	b.n	8001146 <__aeabi_fsub+0x1f6>
 8001008:	2380      	movs	r3, #128	; 0x80
 800100a:	04db      	lsls	r3, r3, #19
 800100c:	431e      	orrs	r6, r3
 800100e:	4643      	mov	r3, r8
 8001010:	2b1b      	cmp	r3, #27
 8001012:	dc00      	bgt.n	8001016 <__aeabi_fsub+0xc6>
 8001014:	e0d2      	b.n	80011bc <__aeabi_fsub+0x26c>
 8001016:	2001      	movs	r0, #1
 8001018:	4460      	add	r0, ip
 800101a:	0143      	lsls	r3, r0, #5
 800101c:	d57a      	bpl.n	8001114 <__aeabi_fsub+0x1c4>
 800101e:	3501      	adds	r5, #1
 8001020:	2dff      	cmp	r5, #255	; 0xff
 8001022:	d06b      	beq.n	80010fc <__aeabi_fsub+0x1ac>
 8001024:	2301      	movs	r3, #1
 8001026:	4a9d      	ldr	r2, [pc, #628]	; (800129c <__aeabi_fsub+0x34c>)
 8001028:	4003      	ands	r3, r0
 800102a:	0840      	lsrs	r0, r0, #1
 800102c:	4010      	ands	r0, r2
 800102e:	4318      	orrs	r0, r3
 8001030:	e7c8      	b.n	8000fc4 <__aeabi_fsub+0x74>
 8001032:	2e00      	cmp	r6, #0
 8001034:	d020      	beq.n	8001078 <__aeabi_fsub+0x128>
 8001036:	428c      	cmp	r4, r1
 8001038:	d023      	beq.n	8001082 <__aeabi_fsub+0x132>
 800103a:	0028      	movs	r0, r5
 800103c:	38ff      	subs	r0, #255	; 0xff
 800103e:	2800      	cmp	r0, #0
 8001040:	d039      	beq.n	80010b6 <__aeabi_fsub+0x166>
 8001042:	1b57      	subs	r7, r2, r5
 8001044:	2d00      	cmp	r5, #0
 8001046:	d000      	beq.n	800104a <__aeabi_fsub+0xfa>
 8001048:	e09d      	b.n	8001186 <__aeabi_fsub+0x236>
 800104a:	4663      	mov	r3, ip
 800104c:	2b00      	cmp	r3, #0
 800104e:	d100      	bne.n	8001052 <__aeabi_fsub+0x102>
 8001050:	e0db      	b.n	800120a <__aeabi_fsub+0x2ba>
 8001052:	1e7b      	subs	r3, r7, #1
 8001054:	2f01      	cmp	r7, #1
 8001056:	d100      	bne.n	800105a <__aeabi_fsub+0x10a>
 8001058:	e10d      	b.n	8001276 <__aeabi_fsub+0x326>
 800105a:	2fff      	cmp	r7, #255	; 0xff
 800105c:	d071      	beq.n	8001142 <__aeabi_fsub+0x1f2>
 800105e:	001f      	movs	r7, r3
 8001060:	e098      	b.n	8001194 <__aeabi_fsub+0x244>
 8001062:	2e00      	cmp	r6, #0
 8001064:	d100      	bne.n	8001068 <__aeabi_fsub+0x118>
 8001066:	e0a7      	b.n	80011b8 <__aeabi_fsub+0x268>
 8001068:	1e42      	subs	r2, r0, #1
 800106a:	2801      	cmp	r0, #1
 800106c:	d100      	bne.n	8001070 <__aeabi_fsub+0x120>
 800106e:	e0e6      	b.n	800123e <__aeabi_fsub+0x2ee>
 8001070:	28ff      	cmp	r0, #255	; 0xff
 8001072:	d068      	beq.n	8001146 <__aeabi_fsub+0x1f6>
 8001074:	0010      	movs	r0, r2
 8001076:	e78f      	b.n	8000f98 <__aeabi_fsub+0x48>
 8001078:	2001      	movs	r0, #1
 800107a:	4041      	eors	r1, r0
 800107c:	42a1      	cmp	r1, r4
 800107e:	d000      	beq.n	8001082 <__aeabi_fsub+0x132>
 8001080:	e77f      	b.n	8000f82 <__aeabi_fsub+0x32>
 8001082:	20ff      	movs	r0, #255	; 0xff
 8001084:	4240      	negs	r0, r0
 8001086:	4680      	mov	r8, r0
 8001088:	44a8      	add	r8, r5
 800108a:	4640      	mov	r0, r8
 800108c:	2800      	cmp	r0, #0
 800108e:	d038      	beq.n	8001102 <__aeabi_fsub+0x1b2>
 8001090:	1b51      	subs	r1, r2, r5
 8001092:	2d00      	cmp	r5, #0
 8001094:	d100      	bne.n	8001098 <__aeabi_fsub+0x148>
 8001096:	e0ae      	b.n	80011f6 <__aeabi_fsub+0x2a6>
 8001098:	2aff      	cmp	r2, #255	; 0xff
 800109a:	d100      	bne.n	800109e <__aeabi_fsub+0x14e>
 800109c:	e0df      	b.n	800125e <__aeabi_fsub+0x30e>
 800109e:	2380      	movs	r3, #128	; 0x80
 80010a0:	4660      	mov	r0, ip
 80010a2:	04db      	lsls	r3, r3, #19
 80010a4:	4318      	orrs	r0, r3
 80010a6:	4684      	mov	ip, r0
 80010a8:	291b      	cmp	r1, #27
 80010aa:	dc00      	bgt.n	80010ae <__aeabi_fsub+0x15e>
 80010ac:	e0d9      	b.n	8001262 <__aeabi_fsub+0x312>
 80010ae:	2001      	movs	r0, #1
 80010b0:	0015      	movs	r5, r2
 80010b2:	1980      	adds	r0, r0, r6
 80010b4:	e7b1      	b.n	800101a <__aeabi_fsub+0xca>
 80010b6:	20fe      	movs	r0, #254	; 0xfe
 80010b8:	1c6a      	adds	r2, r5, #1
 80010ba:	4210      	tst	r0, r2
 80010bc:	d171      	bne.n	80011a2 <__aeabi_fsub+0x252>
 80010be:	2d00      	cmp	r5, #0
 80010c0:	d000      	beq.n	80010c4 <__aeabi_fsub+0x174>
 80010c2:	e0a6      	b.n	8001212 <__aeabi_fsub+0x2c2>
 80010c4:	4663      	mov	r3, ip
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d100      	bne.n	80010cc <__aeabi_fsub+0x17c>
 80010ca:	e0d9      	b.n	8001280 <__aeabi_fsub+0x330>
 80010cc:	2200      	movs	r2, #0
 80010ce:	2e00      	cmp	r6, #0
 80010d0:	d100      	bne.n	80010d4 <__aeabi_fsub+0x184>
 80010d2:	e788      	b.n	8000fe6 <__aeabi_fsub+0x96>
 80010d4:	1b98      	subs	r0, r3, r6
 80010d6:	0143      	lsls	r3, r0, #5
 80010d8:	d400      	bmi.n	80010dc <__aeabi_fsub+0x18c>
 80010da:	e0e1      	b.n	80012a0 <__aeabi_fsub+0x350>
 80010dc:	4663      	mov	r3, ip
 80010de:	000c      	movs	r4, r1
 80010e0:	1af0      	subs	r0, r6, r3
 80010e2:	e76f      	b.n	8000fc4 <__aeabi_fsub+0x74>
 80010e4:	2e00      	cmp	r6, #0
 80010e6:	d100      	bne.n	80010ea <__aeabi_fsub+0x19a>
 80010e8:	e0b7      	b.n	800125a <__aeabi_fsub+0x30a>
 80010ea:	0002      	movs	r2, r0
 80010ec:	3a01      	subs	r2, #1
 80010ee:	2801      	cmp	r0, #1
 80010f0:	d100      	bne.n	80010f4 <__aeabi_fsub+0x1a4>
 80010f2:	e09c      	b.n	800122e <__aeabi_fsub+0x2de>
 80010f4:	28ff      	cmp	r0, #255	; 0xff
 80010f6:	d026      	beq.n	8001146 <__aeabi_fsub+0x1f6>
 80010f8:	4690      	mov	r8, r2
 80010fa:	e788      	b.n	800100e <__aeabi_fsub+0xbe>
 80010fc:	22ff      	movs	r2, #255	; 0xff
 80010fe:	2700      	movs	r7, #0
 8001100:	e771      	b.n	8000fe6 <__aeabi_fsub+0x96>
 8001102:	20fe      	movs	r0, #254	; 0xfe
 8001104:	1c6a      	adds	r2, r5, #1
 8001106:	4210      	tst	r0, r2
 8001108:	d064      	beq.n	80011d4 <__aeabi_fsub+0x284>
 800110a:	2aff      	cmp	r2, #255	; 0xff
 800110c:	d0f6      	beq.n	80010fc <__aeabi_fsub+0x1ac>
 800110e:	0015      	movs	r5, r2
 8001110:	4466      	add	r6, ip
 8001112:	0870      	lsrs	r0, r6, #1
 8001114:	0743      	lsls	r3, r0, #29
 8001116:	d000      	beq.n	800111a <__aeabi_fsub+0x1ca>
 8001118:	e756      	b.n	8000fc8 <__aeabi_fsub+0x78>
 800111a:	08c3      	lsrs	r3, r0, #3
 800111c:	2dff      	cmp	r5, #255	; 0xff
 800111e:	d012      	beq.n	8001146 <__aeabi_fsub+0x1f6>
 8001120:	025b      	lsls	r3, r3, #9
 8001122:	0a5f      	lsrs	r7, r3, #9
 8001124:	b2ea      	uxtb	r2, r5
 8001126:	e75e      	b.n	8000fe6 <__aeabi_fsub+0x96>
 8001128:	4662      	mov	r2, ip
 800112a:	2a00      	cmp	r2, #0
 800112c:	d100      	bne.n	8001130 <__aeabi_fsub+0x1e0>
 800112e:	e096      	b.n	800125e <__aeabi_fsub+0x30e>
 8001130:	2e00      	cmp	r6, #0
 8001132:	d008      	beq.n	8001146 <__aeabi_fsub+0x1f6>
 8001134:	2280      	movs	r2, #128	; 0x80
 8001136:	03d2      	lsls	r2, r2, #15
 8001138:	4213      	tst	r3, r2
 800113a:	d004      	beq.n	8001146 <__aeabi_fsub+0x1f6>
 800113c:	4648      	mov	r0, r9
 800113e:	4210      	tst	r0, r2
 8001140:	d101      	bne.n	8001146 <__aeabi_fsub+0x1f6>
 8001142:	000c      	movs	r4, r1
 8001144:	464b      	mov	r3, r9
 8001146:	2b00      	cmp	r3, #0
 8001148:	d0d8      	beq.n	80010fc <__aeabi_fsub+0x1ac>
 800114a:	2780      	movs	r7, #128	; 0x80
 800114c:	03ff      	lsls	r7, r7, #15
 800114e:	431f      	orrs	r7, r3
 8001150:	027f      	lsls	r7, r7, #9
 8001152:	22ff      	movs	r2, #255	; 0xff
 8001154:	0a7f      	lsrs	r7, r7, #9
 8001156:	e746      	b.n	8000fe6 <__aeabi_fsub+0x96>
 8001158:	2320      	movs	r3, #32
 800115a:	003a      	movs	r2, r7
 800115c:	1b45      	subs	r5, r0, r5
 800115e:	0038      	movs	r0, r7
 8001160:	3501      	adds	r5, #1
 8001162:	40ea      	lsrs	r2, r5
 8001164:	1b5d      	subs	r5, r3, r5
 8001166:	40a8      	lsls	r0, r5
 8001168:	1e43      	subs	r3, r0, #1
 800116a:	4198      	sbcs	r0, r3
 800116c:	2500      	movs	r5, #0
 800116e:	4310      	orrs	r0, r2
 8001170:	e728      	b.n	8000fc4 <__aeabi_fsub+0x74>
 8001172:	2320      	movs	r3, #32
 8001174:	1a1b      	subs	r3, r3, r0
 8001176:	0032      	movs	r2, r6
 8001178:	409e      	lsls	r6, r3
 800117a:	40c2      	lsrs	r2, r0
 800117c:	0030      	movs	r0, r6
 800117e:	1e43      	subs	r3, r0, #1
 8001180:	4198      	sbcs	r0, r3
 8001182:	4310      	orrs	r0, r2
 8001184:	e70c      	b.n	8000fa0 <__aeabi_fsub+0x50>
 8001186:	2aff      	cmp	r2, #255	; 0xff
 8001188:	d0db      	beq.n	8001142 <__aeabi_fsub+0x1f2>
 800118a:	2380      	movs	r3, #128	; 0x80
 800118c:	4660      	mov	r0, ip
 800118e:	04db      	lsls	r3, r3, #19
 8001190:	4318      	orrs	r0, r3
 8001192:	4684      	mov	ip, r0
 8001194:	2f1b      	cmp	r7, #27
 8001196:	dd56      	ble.n	8001246 <__aeabi_fsub+0x2f6>
 8001198:	2001      	movs	r0, #1
 800119a:	000c      	movs	r4, r1
 800119c:	0015      	movs	r5, r2
 800119e:	1a30      	subs	r0, r6, r0
 80011a0:	e700      	b.n	8000fa4 <__aeabi_fsub+0x54>
 80011a2:	4663      	mov	r3, ip
 80011a4:	1b9f      	subs	r7, r3, r6
 80011a6:	017b      	lsls	r3, r7, #5
 80011a8:	d43d      	bmi.n	8001226 <__aeabi_fsub+0x2d6>
 80011aa:	2f00      	cmp	r7, #0
 80011ac:	d000      	beq.n	80011b0 <__aeabi_fsub+0x260>
 80011ae:	e6fe      	b.n	8000fae <__aeabi_fsub+0x5e>
 80011b0:	2400      	movs	r4, #0
 80011b2:	2200      	movs	r2, #0
 80011b4:	2700      	movs	r7, #0
 80011b6:	e716      	b.n	8000fe6 <__aeabi_fsub+0x96>
 80011b8:	0005      	movs	r5, r0
 80011ba:	e7af      	b.n	800111c <__aeabi_fsub+0x1cc>
 80011bc:	0032      	movs	r2, r6
 80011be:	4643      	mov	r3, r8
 80011c0:	4641      	mov	r1, r8
 80011c2:	40da      	lsrs	r2, r3
 80011c4:	2320      	movs	r3, #32
 80011c6:	1a5b      	subs	r3, r3, r1
 80011c8:	409e      	lsls	r6, r3
 80011ca:	0030      	movs	r0, r6
 80011cc:	1e43      	subs	r3, r0, #1
 80011ce:	4198      	sbcs	r0, r3
 80011d0:	4310      	orrs	r0, r2
 80011d2:	e721      	b.n	8001018 <__aeabi_fsub+0xc8>
 80011d4:	2d00      	cmp	r5, #0
 80011d6:	d1a7      	bne.n	8001128 <__aeabi_fsub+0x1d8>
 80011d8:	4663      	mov	r3, ip
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d059      	beq.n	8001292 <__aeabi_fsub+0x342>
 80011de:	2200      	movs	r2, #0
 80011e0:	2e00      	cmp	r6, #0
 80011e2:	d100      	bne.n	80011e6 <__aeabi_fsub+0x296>
 80011e4:	e6ff      	b.n	8000fe6 <__aeabi_fsub+0x96>
 80011e6:	0030      	movs	r0, r6
 80011e8:	4460      	add	r0, ip
 80011ea:	0143      	lsls	r3, r0, #5
 80011ec:	d592      	bpl.n	8001114 <__aeabi_fsub+0x1c4>
 80011ee:	4b2a      	ldr	r3, [pc, #168]	; (8001298 <__aeabi_fsub+0x348>)
 80011f0:	3501      	adds	r5, #1
 80011f2:	4018      	ands	r0, r3
 80011f4:	e78e      	b.n	8001114 <__aeabi_fsub+0x1c4>
 80011f6:	4663      	mov	r3, ip
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d047      	beq.n	800128c <__aeabi_fsub+0x33c>
 80011fc:	1e4b      	subs	r3, r1, #1
 80011fe:	2901      	cmp	r1, #1
 8001200:	d015      	beq.n	800122e <__aeabi_fsub+0x2de>
 8001202:	29ff      	cmp	r1, #255	; 0xff
 8001204:	d02b      	beq.n	800125e <__aeabi_fsub+0x30e>
 8001206:	0019      	movs	r1, r3
 8001208:	e74e      	b.n	80010a8 <__aeabi_fsub+0x158>
 800120a:	000c      	movs	r4, r1
 800120c:	464b      	mov	r3, r9
 800120e:	003d      	movs	r5, r7
 8001210:	e784      	b.n	800111c <__aeabi_fsub+0x1cc>
 8001212:	4662      	mov	r2, ip
 8001214:	2a00      	cmp	r2, #0
 8001216:	d18b      	bne.n	8001130 <__aeabi_fsub+0x1e0>
 8001218:	2e00      	cmp	r6, #0
 800121a:	d192      	bne.n	8001142 <__aeabi_fsub+0x1f2>
 800121c:	2780      	movs	r7, #128	; 0x80
 800121e:	2400      	movs	r4, #0
 8001220:	22ff      	movs	r2, #255	; 0xff
 8001222:	03ff      	lsls	r7, r7, #15
 8001224:	e6df      	b.n	8000fe6 <__aeabi_fsub+0x96>
 8001226:	4663      	mov	r3, ip
 8001228:	000c      	movs	r4, r1
 800122a:	1af7      	subs	r7, r6, r3
 800122c:	e6bf      	b.n	8000fae <__aeabi_fsub+0x5e>
 800122e:	0030      	movs	r0, r6
 8001230:	4460      	add	r0, ip
 8001232:	2501      	movs	r5, #1
 8001234:	0143      	lsls	r3, r0, #5
 8001236:	d400      	bmi.n	800123a <__aeabi_fsub+0x2ea>
 8001238:	e76c      	b.n	8001114 <__aeabi_fsub+0x1c4>
 800123a:	2502      	movs	r5, #2
 800123c:	e6f2      	b.n	8001024 <__aeabi_fsub+0xd4>
 800123e:	4663      	mov	r3, ip
 8001240:	2501      	movs	r5, #1
 8001242:	1b98      	subs	r0, r3, r6
 8001244:	e6ae      	b.n	8000fa4 <__aeabi_fsub+0x54>
 8001246:	2320      	movs	r3, #32
 8001248:	4664      	mov	r4, ip
 800124a:	4660      	mov	r0, ip
 800124c:	40fc      	lsrs	r4, r7
 800124e:	1bdf      	subs	r7, r3, r7
 8001250:	40b8      	lsls	r0, r7
 8001252:	1e43      	subs	r3, r0, #1
 8001254:	4198      	sbcs	r0, r3
 8001256:	4320      	orrs	r0, r4
 8001258:	e79f      	b.n	800119a <__aeabi_fsub+0x24a>
 800125a:	0005      	movs	r5, r0
 800125c:	e75e      	b.n	800111c <__aeabi_fsub+0x1cc>
 800125e:	464b      	mov	r3, r9
 8001260:	e771      	b.n	8001146 <__aeabi_fsub+0x1f6>
 8001262:	2320      	movs	r3, #32
 8001264:	4665      	mov	r5, ip
 8001266:	4660      	mov	r0, ip
 8001268:	40cd      	lsrs	r5, r1
 800126a:	1a59      	subs	r1, r3, r1
 800126c:	4088      	lsls	r0, r1
 800126e:	1e43      	subs	r3, r0, #1
 8001270:	4198      	sbcs	r0, r3
 8001272:	4328      	orrs	r0, r5
 8001274:	e71c      	b.n	80010b0 <__aeabi_fsub+0x160>
 8001276:	4663      	mov	r3, ip
 8001278:	000c      	movs	r4, r1
 800127a:	2501      	movs	r5, #1
 800127c:	1af0      	subs	r0, r6, r3
 800127e:	e691      	b.n	8000fa4 <__aeabi_fsub+0x54>
 8001280:	2e00      	cmp	r6, #0
 8001282:	d095      	beq.n	80011b0 <__aeabi_fsub+0x260>
 8001284:	000c      	movs	r4, r1
 8001286:	464f      	mov	r7, r9
 8001288:	2200      	movs	r2, #0
 800128a:	e6ac      	b.n	8000fe6 <__aeabi_fsub+0x96>
 800128c:	464b      	mov	r3, r9
 800128e:	000d      	movs	r5, r1
 8001290:	e744      	b.n	800111c <__aeabi_fsub+0x1cc>
 8001292:	464f      	mov	r7, r9
 8001294:	2200      	movs	r2, #0
 8001296:	e6a6      	b.n	8000fe6 <__aeabi_fsub+0x96>
 8001298:	fbffffff 	.word	0xfbffffff
 800129c:	7dffffff 	.word	0x7dffffff
 80012a0:	2800      	cmp	r0, #0
 80012a2:	d000      	beq.n	80012a6 <__aeabi_fsub+0x356>
 80012a4:	e736      	b.n	8001114 <__aeabi_fsub+0x1c4>
 80012a6:	2400      	movs	r4, #0
 80012a8:	2700      	movs	r7, #0
 80012aa:	e69c      	b.n	8000fe6 <__aeabi_fsub+0x96>

080012ac <__aeabi_fcmpun>:
 80012ac:	0243      	lsls	r3, r0, #9
 80012ae:	024a      	lsls	r2, r1, #9
 80012b0:	0040      	lsls	r0, r0, #1
 80012b2:	0049      	lsls	r1, r1, #1
 80012b4:	0a5b      	lsrs	r3, r3, #9
 80012b6:	0a52      	lsrs	r2, r2, #9
 80012b8:	0e09      	lsrs	r1, r1, #24
 80012ba:	0e00      	lsrs	r0, r0, #24
 80012bc:	28ff      	cmp	r0, #255	; 0xff
 80012be:	d006      	beq.n	80012ce <__aeabi_fcmpun+0x22>
 80012c0:	2000      	movs	r0, #0
 80012c2:	29ff      	cmp	r1, #255	; 0xff
 80012c4:	d102      	bne.n	80012cc <__aeabi_fcmpun+0x20>
 80012c6:	1e53      	subs	r3, r2, #1
 80012c8:	419a      	sbcs	r2, r3
 80012ca:	0010      	movs	r0, r2
 80012cc:	4770      	bx	lr
 80012ce:	38fe      	subs	r0, #254	; 0xfe
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d1fb      	bne.n	80012cc <__aeabi_fcmpun+0x20>
 80012d4:	e7f4      	b.n	80012c0 <__aeabi_fcmpun+0x14>
 80012d6:	46c0      	nop			; (mov r8, r8)

080012d8 <__aeabi_f2iz>:
 80012d8:	0241      	lsls	r1, r0, #9
 80012da:	0042      	lsls	r2, r0, #1
 80012dc:	0fc3      	lsrs	r3, r0, #31
 80012de:	0a49      	lsrs	r1, r1, #9
 80012e0:	2000      	movs	r0, #0
 80012e2:	0e12      	lsrs	r2, r2, #24
 80012e4:	2a7e      	cmp	r2, #126	; 0x7e
 80012e6:	dd03      	ble.n	80012f0 <__aeabi_f2iz+0x18>
 80012e8:	2a9d      	cmp	r2, #157	; 0x9d
 80012ea:	dd02      	ble.n	80012f2 <__aeabi_f2iz+0x1a>
 80012ec:	4a09      	ldr	r2, [pc, #36]	; (8001314 <__aeabi_f2iz+0x3c>)
 80012ee:	1898      	adds	r0, r3, r2
 80012f0:	4770      	bx	lr
 80012f2:	2080      	movs	r0, #128	; 0x80
 80012f4:	0400      	lsls	r0, r0, #16
 80012f6:	4301      	orrs	r1, r0
 80012f8:	2a95      	cmp	r2, #149	; 0x95
 80012fa:	dc07      	bgt.n	800130c <__aeabi_f2iz+0x34>
 80012fc:	2096      	movs	r0, #150	; 0x96
 80012fe:	1a82      	subs	r2, r0, r2
 8001300:	40d1      	lsrs	r1, r2
 8001302:	4248      	negs	r0, r1
 8001304:	2b00      	cmp	r3, #0
 8001306:	d1f3      	bne.n	80012f0 <__aeabi_f2iz+0x18>
 8001308:	0008      	movs	r0, r1
 800130a:	e7f1      	b.n	80012f0 <__aeabi_f2iz+0x18>
 800130c:	3a96      	subs	r2, #150	; 0x96
 800130e:	4091      	lsls	r1, r2
 8001310:	e7f7      	b.n	8001302 <__aeabi_f2iz+0x2a>
 8001312:	46c0      	nop			; (mov r8, r8)
 8001314:	7fffffff 	.word	0x7fffffff

08001318 <__aeabi_i2f>:
 8001318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800131a:	2800      	cmp	r0, #0
 800131c:	d013      	beq.n	8001346 <__aeabi_i2f+0x2e>
 800131e:	17c3      	asrs	r3, r0, #31
 8001320:	18c6      	adds	r6, r0, r3
 8001322:	405e      	eors	r6, r3
 8001324:	0fc4      	lsrs	r4, r0, #31
 8001326:	0030      	movs	r0, r6
 8001328:	f001 fefa 	bl	8003120 <__clzsi2>
 800132c:	239e      	movs	r3, #158	; 0x9e
 800132e:	0005      	movs	r5, r0
 8001330:	1a1b      	subs	r3, r3, r0
 8001332:	2b96      	cmp	r3, #150	; 0x96
 8001334:	dc0f      	bgt.n	8001356 <__aeabi_i2f+0x3e>
 8001336:	2808      	cmp	r0, #8
 8001338:	dd01      	ble.n	800133e <__aeabi_i2f+0x26>
 800133a:	3d08      	subs	r5, #8
 800133c:	40ae      	lsls	r6, r5
 800133e:	0276      	lsls	r6, r6, #9
 8001340:	0a76      	lsrs	r6, r6, #9
 8001342:	b2d8      	uxtb	r0, r3
 8001344:	e002      	b.n	800134c <__aeabi_i2f+0x34>
 8001346:	2400      	movs	r4, #0
 8001348:	2000      	movs	r0, #0
 800134a:	2600      	movs	r6, #0
 800134c:	05c0      	lsls	r0, r0, #23
 800134e:	4330      	orrs	r0, r6
 8001350:	07e4      	lsls	r4, r4, #31
 8001352:	4320      	orrs	r0, r4
 8001354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001356:	2b99      	cmp	r3, #153	; 0x99
 8001358:	dd0c      	ble.n	8001374 <__aeabi_i2f+0x5c>
 800135a:	2205      	movs	r2, #5
 800135c:	0031      	movs	r1, r6
 800135e:	1a12      	subs	r2, r2, r0
 8001360:	40d1      	lsrs	r1, r2
 8001362:	000a      	movs	r2, r1
 8001364:	0001      	movs	r1, r0
 8001366:	0030      	movs	r0, r6
 8001368:	311b      	adds	r1, #27
 800136a:	4088      	lsls	r0, r1
 800136c:	1e41      	subs	r1, r0, #1
 800136e:	4188      	sbcs	r0, r1
 8001370:	4302      	orrs	r2, r0
 8001372:	0016      	movs	r6, r2
 8001374:	2d05      	cmp	r5, #5
 8001376:	dc12      	bgt.n	800139e <__aeabi_i2f+0x86>
 8001378:	0031      	movs	r1, r6
 800137a:	4f0d      	ldr	r7, [pc, #52]	; (80013b0 <__aeabi_i2f+0x98>)
 800137c:	4039      	ands	r1, r7
 800137e:	0772      	lsls	r2, r6, #29
 8001380:	d009      	beq.n	8001396 <__aeabi_i2f+0x7e>
 8001382:	200f      	movs	r0, #15
 8001384:	4030      	ands	r0, r6
 8001386:	2804      	cmp	r0, #4
 8001388:	d005      	beq.n	8001396 <__aeabi_i2f+0x7e>
 800138a:	3104      	adds	r1, #4
 800138c:	014a      	lsls	r2, r1, #5
 800138e:	d502      	bpl.n	8001396 <__aeabi_i2f+0x7e>
 8001390:	239f      	movs	r3, #159	; 0x9f
 8001392:	4039      	ands	r1, r7
 8001394:	1b5b      	subs	r3, r3, r5
 8001396:	0189      	lsls	r1, r1, #6
 8001398:	0a4e      	lsrs	r6, r1, #9
 800139a:	b2d8      	uxtb	r0, r3
 800139c:	e7d6      	b.n	800134c <__aeabi_i2f+0x34>
 800139e:	1f6a      	subs	r2, r5, #5
 80013a0:	4096      	lsls	r6, r2
 80013a2:	0031      	movs	r1, r6
 80013a4:	4f02      	ldr	r7, [pc, #8]	; (80013b0 <__aeabi_i2f+0x98>)
 80013a6:	4039      	ands	r1, r7
 80013a8:	0772      	lsls	r2, r6, #29
 80013aa:	d0f4      	beq.n	8001396 <__aeabi_i2f+0x7e>
 80013ac:	e7e9      	b.n	8001382 <__aeabi_i2f+0x6a>
 80013ae:	46c0      	nop			; (mov r8, r8)
 80013b0:	fbffffff 	.word	0xfbffffff

080013b4 <__aeabi_dadd>:
 80013b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013b6:	464f      	mov	r7, r9
 80013b8:	4646      	mov	r6, r8
 80013ba:	46d6      	mov	lr, sl
 80013bc:	000d      	movs	r5, r1
 80013be:	0004      	movs	r4, r0
 80013c0:	b5c0      	push	{r6, r7, lr}
 80013c2:	001f      	movs	r7, r3
 80013c4:	0011      	movs	r1, r2
 80013c6:	0328      	lsls	r0, r5, #12
 80013c8:	0f62      	lsrs	r2, r4, #29
 80013ca:	0a40      	lsrs	r0, r0, #9
 80013cc:	4310      	orrs	r0, r2
 80013ce:	007a      	lsls	r2, r7, #1
 80013d0:	0d52      	lsrs	r2, r2, #21
 80013d2:	00e3      	lsls	r3, r4, #3
 80013d4:	033c      	lsls	r4, r7, #12
 80013d6:	4691      	mov	r9, r2
 80013d8:	0a64      	lsrs	r4, r4, #9
 80013da:	0ffa      	lsrs	r2, r7, #31
 80013dc:	0f4f      	lsrs	r7, r1, #29
 80013de:	006e      	lsls	r6, r5, #1
 80013e0:	4327      	orrs	r7, r4
 80013e2:	4692      	mov	sl, r2
 80013e4:	46b8      	mov	r8, r7
 80013e6:	0d76      	lsrs	r6, r6, #21
 80013e8:	0fed      	lsrs	r5, r5, #31
 80013ea:	00c9      	lsls	r1, r1, #3
 80013ec:	4295      	cmp	r5, r2
 80013ee:	d100      	bne.n	80013f2 <__aeabi_dadd+0x3e>
 80013f0:	e099      	b.n	8001526 <__aeabi_dadd+0x172>
 80013f2:	464c      	mov	r4, r9
 80013f4:	1b34      	subs	r4, r6, r4
 80013f6:	46a4      	mov	ip, r4
 80013f8:	2c00      	cmp	r4, #0
 80013fa:	dc00      	bgt.n	80013fe <__aeabi_dadd+0x4a>
 80013fc:	e07c      	b.n	80014f8 <__aeabi_dadd+0x144>
 80013fe:	464a      	mov	r2, r9
 8001400:	2a00      	cmp	r2, #0
 8001402:	d100      	bne.n	8001406 <__aeabi_dadd+0x52>
 8001404:	e0b8      	b.n	8001578 <__aeabi_dadd+0x1c4>
 8001406:	4ac5      	ldr	r2, [pc, #788]	; (800171c <__aeabi_dadd+0x368>)
 8001408:	4296      	cmp	r6, r2
 800140a:	d100      	bne.n	800140e <__aeabi_dadd+0x5a>
 800140c:	e11c      	b.n	8001648 <__aeabi_dadd+0x294>
 800140e:	2280      	movs	r2, #128	; 0x80
 8001410:	003c      	movs	r4, r7
 8001412:	0412      	lsls	r2, r2, #16
 8001414:	4314      	orrs	r4, r2
 8001416:	46a0      	mov	r8, r4
 8001418:	4662      	mov	r2, ip
 800141a:	2a38      	cmp	r2, #56	; 0x38
 800141c:	dd00      	ble.n	8001420 <__aeabi_dadd+0x6c>
 800141e:	e161      	b.n	80016e4 <__aeabi_dadd+0x330>
 8001420:	2a1f      	cmp	r2, #31
 8001422:	dd00      	ble.n	8001426 <__aeabi_dadd+0x72>
 8001424:	e1cc      	b.n	80017c0 <__aeabi_dadd+0x40c>
 8001426:	4664      	mov	r4, ip
 8001428:	2220      	movs	r2, #32
 800142a:	1b12      	subs	r2, r2, r4
 800142c:	4644      	mov	r4, r8
 800142e:	4094      	lsls	r4, r2
 8001430:	000f      	movs	r7, r1
 8001432:	46a1      	mov	r9, r4
 8001434:	4664      	mov	r4, ip
 8001436:	4091      	lsls	r1, r2
 8001438:	40e7      	lsrs	r7, r4
 800143a:	464c      	mov	r4, r9
 800143c:	1e4a      	subs	r2, r1, #1
 800143e:	4191      	sbcs	r1, r2
 8001440:	433c      	orrs	r4, r7
 8001442:	4642      	mov	r2, r8
 8001444:	4321      	orrs	r1, r4
 8001446:	4664      	mov	r4, ip
 8001448:	40e2      	lsrs	r2, r4
 800144a:	1a80      	subs	r0, r0, r2
 800144c:	1a5c      	subs	r4, r3, r1
 800144e:	42a3      	cmp	r3, r4
 8001450:	419b      	sbcs	r3, r3
 8001452:	425f      	negs	r7, r3
 8001454:	1bc7      	subs	r7, r0, r7
 8001456:	023b      	lsls	r3, r7, #8
 8001458:	d400      	bmi.n	800145c <__aeabi_dadd+0xa8>
 800145a:	e0d0      	b.n	80015fe <__aeabi_dadd+0x24a>
 800145c:	027f      	lsls	r7, r7, #9
 800145e:	0a7f      	lsrs	r7, r7, #9
 8001460:	2f00      	cmp	r7, #0
 8001462:	d100      	bne.n	8001466 <__aeabi_dadd+0xb2>
 8001464:	e0ff      	b.n	8001666 <__aeabi_dadd+0x2b2>
 8001466:	0038      	movs	r0, r7
 8001468:	f001 fe5a 	bl	8003120 <__clzsi2>
 800146c:	0001      	movs	r1, r0
 800146e:	3908      	subs	r1, #8
 8001470:	2320      	movs	r3, #32
 8001472:	0022      	movs	r2, r4
 8001474:	1a5b      	subs	r3, r3, r1
 8001476:	408f      	lsls	r7, r1
 8001478:	40da      	lsrs	r2, r3
 800147a:	408c      	lsls	r4, r1
 800147c:	4317      	orrs	r7, r2
 800147e:	42b1      	cmp	r1, r6
 8001480:	da00      	bge.n	8001484 <__aeabi_dadd+0xd0>
 8001482:	e0ff      	b.n	8001684 <__aeabi_dadd+0x2d0>
 8001484:	1b89      	subs	r1, r1, r6
 8001486:	1c4b      	adds	r3, r1, #1
 8001488:	2b1f      	cmp	r3, #31
 800148a:	dd00      	ble.n	800148e <__aeabi_dadd+0xda>
 800148c:	e0a8      	b.n	80015e0 <__aeabi_dadd+0x22c>
 800148e:	2220      	movs	r2, #32
 8001490:	0039      	movs	r1, r7
 8001492:	1ad2      	subs	r2, r2, r3
 8001494:	0020      	movs	r0, r4
 8001496:	4094      	lsls	r4, r2
 8001498:	4091      	lsls	r1, r2
 800149a:	40d8      	lsrs	r0, r3
 800149c:	1e62      	subs	r2, r4, #1
 800149e:	4194      	sbcs	r4, r2
 80014a0:	40df      	lsrs	r7, r3
 80014a2:	2600      	movs	r6, #0
 80014a4:	4301      	orrs	r1, r0
 80014a6:	430c      	orrs	r4, r1
 80014a8:	0763      	lsls	r3, r4, #29
 80014aa:	d009      	beq.n	80014c0 <__aeabi_dadd+0x10c>
 80014ac:	230f      	movs	r3, #15
 80014ae:	4023      	ands	r3, r4
 80014b0:	2b04      	cmp	r3, #4
 80014b2:	d005      	beq.n	80014c0 <__aeabi_dadd+0x10c>
 80014b4:	1d23      	adds	r3, r4, #4
 80014b6:	42a3      	cmp	r3, r4
 80014b8:	41a4      	sbcs	r4, r4
 80014ba:	4264      	negs	r4, r4
 80014bc:	193f      	adds	r7, r7, r4
 80014be:	001c      	movs	r4, r3
 80014c0:	023b      	lsls	r3, r7, #8
 80014c2:	d400      	bmi.n	80014c6 <__aeabi_dadd+0x112>
 80014c4:	e09e      	b.n	8001604 <__aeabi_dadd+0x250>
 80014c6:	4b95      	ldr	r3, [pc, #596]	; (800171c <__aeabi_dadd+0x368>)
 80014c8:	3601      	adds	r6, #1
 80014ca:	429e      	cmp	r6, r3
 80014cc:	d100      	bne.n	80014d0 <__aeabi_dadd+0x11c>
 80014ce:	e0b7      	b.n	8001640 <__aeabi_dadd+0x28c>
 80014d0:	4a93      	ldr	r2, [pc, #588]	; (8001720 <__aeabi_dadd+0x36c>)
 80014d2:	08e4      	lsrs	r4, r4, #3
 80014d4:	4017      	ands	r7, r2
 80014d6:	077b      	lsls	r3, r7, #29
 80014d8:	0571      	lsls	r1, r6, #21
 80014da:	027f      	lsls	r7, r7, #9
 80014dc:	4323      	orrs	r3, r4
 80014de:	0b3f      	lsrs	r7, r7, #12
 80014e0:	0d4a      	lsrs	r2, r1, #21
 80014e2:	0512      	lsls	r2, r2, #20
 80014e4:	433a      	orrs	r2, r7
 80014e6:	07ed      	lsls	r5, r5, #31
 80014e8:	432a      	orrs	r2, r5
 80014ea:	0018      	movs	r0, r3
 80014ec:	0011      	movs	r1, r2
 80014ee:	bce0      	pop	{r5, r6, r7}
 80014f0:	46ba      	mov	sl, r7
 80014f2:	46b1      	mov	r9, r6
 80014f4:	46a8      	mov	r8, r5
 80014f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014f8:	2c00      	cmp	r4, #0
 80014fa:	d04b      	beq.n	8001594 <__aeabi_dadd+0x1e0>
 80014fc:	464c      	mov	r4, r9
 80014fe:	1ba4      	subs	r4, r4, r6
 8001500:	46a4      	mov	ip, r4
 8001502:	2e00      	cmp	r6, #0
 8001504:	d000      	beq.n	8001508 <__aeabi_dadd+0x154>
 8001506:	e123      	b.n	8001750 <__aeabi_dadd+0x39c>
 8001508:	0004      	movs	r4, r0
 800150a:	431c      	orrs	r4, r3
 800150c:	d100      	bne.n	8001510 <__aeabi_dadd+0x15c>
 800150e:	e1af      	b.n	8001870 <__aeabi_dadd+0x4bc>
 8001510:	4662      	mov	r2, ip
 8001512:	1e54      	subs	r4, r2, #1
 8001514:	2a01      	cmp	r2, #1
 8001516:	d100      	bne.n	800151a <__aeabi_dadd+0x166>
 8001518:	e215      	b.n	8001946 <__aeabi_dadd+0x592>
 800151a:	4d80      	ldr	r5, [pc, #512]	; (800171c <__aeabi_dadd+0x368>)
 800151c:	45ac      	cmp	ip, r5
 800151e:	d100      	bne.n	8001522 <__aeabi_dadd+0x16e>
 8001520:	e1c8      	b.n	80018b4 <__aeabi_dadd+0x500>
 8001522:	46a4      	mov	ip, r4
 8001524:	e11b      	b.n	800175e <__aeabi_dadd+0x3aa>
 8001526:	464a      	mov	r2, r9
 8001528:	1ab2      	subs	r2, r6, r2
 800152a:	4694      	mov	ip, r2
 800152c:	2a00      	cmp	r2, #0
 800152e:	dc00      	bgt.n	8001532 <__aeabi_dadd+0x17e>
 8001530:	e0ac      	b.n	800168c <__aeabi_dadd+0x2d8>
 8001532:	464a      	mov	r2, r9
 8001534:	2a00      	cmp	r2, #0
 8001536:	d043      	beq.n	80015c0 <__aeabi_dadd+0x20c>
 8001538:	4a78      	ldr	r2, [pc, #480]	; (800171c <__aeabi_dadd+0x368>)
 800153a:	4296      	cmp	r6, r2
 800153c:	d100      	bne.n	8001540 <__aeabi_dadd+0x18c>
 800153e:	e1af      	b.n	80018a0 <__aeabi_dadd+0x4ec>
 8001540:	2280      	movs	r2, #128	; 0x80
 8001542:	003c      	movs	r4, r7
 8001544:	0412      	lsls	r2, r2, #16
 8001546:	4314      	orrs	r4, r2
 8001548:	46a0      	mov	r8, r4
 800154a:	4662      	mov	r2, ip
 800154c:	2a38      	cmp	r2, #56	; 0x38
 800154e:	dc67      	bgt.n	8001620 <__aeabi_dadd+0x26c>
 8001550:	2a1f      	cmp	r2, #31
 8001552:	dc00      	bgt.n	8001556 <__aeabi_dadd+0x1a2>
 8001554:	e15f      	b.n	8001816 <__aeabi_dadd+0x462>
 8001556:	4647      	mov	r7, r8
 8001558:	3a20      	subs	r2, #32
 800155a:	40d7      	lsrs	r7, r2
 800155c:	4662      	mov	r2, ip
 800155e:	2a20      	cmp	r2, #32
 8001560:	d005      	beq.n	800156e <__aeabi_dadd+0x1ba>
 8001562:	4664      	mov	r4, ip
 8001564:	2240      	movs	r2, #64	; 0x40
 8001566:	1b12      	subs	r2, r2, r4
 8001568:	4644      	mov	r4, r8
 800156a:	4094      	lsls	r4, r2
 800156c:	4321      	orrs	r1, r4
 800156e:	1e4a      	subs	r2, r1, #1
 8001570:	4191      	sbcs	r1, r2
 8001572:	000c      	movs	r4, r1
 8001574:	433c      	orrs	r4, r7
 8001576:	e057      	b.n	8001628 <__aeabi_dadd+0x274>
 8001578:	003a      	movs	r2, r7
 800157a:	430a      	orrs	r2, r1
 800157c:	d100      	bne.n	8001580 <__aeabi_dadd+0x1cc>
 800157e:	e105      	b.n	800178c <__aeabi_dadd+0x3d8>
 8001580:	0022      	movs	r2, r4
 8001582:	3a01      	subs	r2, #1
 8001584:	2c01      	cmp	r4, #1
 8001586:	d100      	bne.n	800158a <__aeabi_dadd+0x1d6>
 8001588:	e182      	b.n	8001890 <__aeabi_dadd+0x4dc>
 800158a:	4c64      	ldr	r4, [pc, #400]	; (800171c <__aeabi_dadd+0x368>)
 800158c:	45a4      	cmp	ip, r4
 800158e:	d05b      	beq.n	8001648 <__aeabi_dadd+0x294>
 8001590:	4694      	mov	ip, r2
 8001592:	e741      	b.n	8001418 <__aeabi_dadd+0x64>
 8001594:	4c63      	ldr	r4, [pc, #396]	; (8001724 <__aeabi_dadd+0x370>)
 8001596:	1c77      	adds	r7, r6, #1
 8001598:	4227      	tst	r7, r4
 800159a:	d000      	beq.n	800159e <__aeabi_dadd+0x1ea>
 800159c:	e0c4      	b.n	8001728 <__aeabi_dadd+0x374>
 800159e:	0004      	movs	r4, r0
 80015a0:	431c      	orrs	r4, r3
 80015a2:	2e00      	cmp	r6, #0
 80015a4:	d000      	beq.n	80015a8 <__aeabi_dadd+0x1f4>
 80015a6:	e169      	b.n	800187c <__aeabi_dadd+0x4c8>
 80015a8:	2c00      	cmp	r4, #0
 80015aa:	d100      	bne.n	80015ae <__aeabi_dadd+0x1fa>
 80015ac:	e1bf      	b.n	800192e <__aeabi_dadd+0x57a>
 80015ae:	4644      	mov	r4, r8
 80015b0:	430c      	orrs	r4, r1
 80015b2:	d000      	beq.n	80015b6 <__aeabi_dadd+0x202>
 80015b4:	e1d0      	b.n	8001958 <__aeabi_dadd+0x5a4>
 80015b6:	0742      	lsls	r2, r0, #29
 80015b8:	08db      	lsrs	r3, r3, #3
 80015ba:	4313      	orrs	r3, r2
 80015bc:	08c0      	lsrs	r0, r0, #3
 80015be:	e029      	b.n	8001614 <__aeabi_dadd+0x260>
 80015c0:	003a      	movs	r2, r7
 80015c2:	430a      	orrs	r2, r1
 80015c4:	d100      	bne.n	80015c8 <__aeabi_dadd+0x214>
 80015c6:	e170      	b.n	80018aa <__aeabi_dadd+0x4f6>
 80015c8:	4662      	mov	r2, ip
 80015ca:	4664      	mov	r4, ip
 80015cc:	3a01      	subs	r2, #1
 80015ce:	2c01      	cmp	r4, #1
 80015d0:	d100      	bne.n	80015d4 <__aeabi_dadd+0x220>
 80015d2:	e0e0      	b.n	8001796 <__aeabi_dadd+0x3e2>
 80015d4:	4c51      	ldr	r4, [pc, #324]	; (800171c <__aeabi_dadd+0x368>)
 80015d6:	45a4      	cmp	ip, r4
 80015d8:	d100      	bne.n	80015dc <__aeabi_dadd+0x228>
 80015da:	e161      	b.n	80018a0 <__aeabi_dadd+0x4ec>
 80015dc:	4694      	mov	ip, r2
 80015de:	e7b4      	b.n	800154a <__aeabi_dadd+0x196>
 80015e0:	003a      	movs	r2, r7
 80015e2:	391f      	subs	r1, #31
 80015e4:	40ca      	lsrs	r2, r1
 80015e6:	0011      	movs	r1, r2
 80015e8:	2b20      	cmp	r3, #32
 80015ea:	d003      	beq.n	80015f4 <__aeabi_dadd+0x240>
 80015ec:	2240      	movs	r2, #64	; 0x40
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	409f      	lsls	r7, r3
 80015f2:	433c      	orrs	r4, r7
 80015f4:	1e63      	subs	r3, r4, #1
 80015f6:	419c      	sbcs	r4, r3
 80015f8:	2700      	movs	r7, #0
 80015fa:	2600      	movs	r6, #0
 80015fc:	430c      	orrs	r4, r1
 80015fe:	0763      	lsls	r3, r4, #29
 8001600:	d000      	beq.n	8001604 <__aeabi_dadd+0x250>
 8001602:	e753      	b.n	80014ac <__aeabi_dadd+0xf8>
 8001604:	46b4      	mov	ip, r6
 8001606:	08e4      	lsrs	r4, r4, #3
 8001608:	077b      	lsls	r3, r7, #29
 800160a:	4323      	orrs	r3, r4
 800160c:	08f8      	lsrs	r0, r7, #3
 800160e:	4a43      	ldr	r2, [pc, #268]	; (800171c <__aeabi_dadd+0x368>)
 8001610:	4594      	cmp	ip, r2
 8001612:	d01d      	beq.n	8001650 <__aeabi_dadd+0x29c>
 8001614:	4662      	mov	r2, ip
 8001616:	0307      	lsls	r7, r0, #12
 8001618:	0552      	lsls	r2, r2, #21
 800161a:	0b3f      	lsrs	r7, r7, #12
 800161c:	0d52      	lsrs	r2, r2, #21
 800161e:	e760      	b.n	80014e2 <__aeabi_dadd+0x12e>
 8001620:	4644      	mov	r4, r8
 8001622:	430c      	orrs	r4, r1
 8001624:	1e62      	subs	r2, r4, #1
 8001626:	4194      	sbcs	r4, r2
 8001628:	18e4      	adds	r4, r4, r3
 800162a:	429c      	cmp	r4, r3
 800162c:	419b      	sbcs	r3, r3
 800162e:	425f      	negs	r7, r3
 8001630:	183f      	adds	r7, r7, r0
 8001632:	023b      	lsls	r3, r7, #8
 8001634:	d5e3      	bpl.n	80015fe <__aeabi_dadd+0x24a>
 8001636:	4b39      	ldr	r3, [pc, #228]	; (800171c <__aeabi_dadd+0x368>)
 8001638:	3601      	adds	r6, #1
 800163a:	429e      	cmp	r6, r3
 800163c:	d000      	beq.n	8001640 <__aeabi_dadd+0x28c>
 800163e:	e0b5      	b.n	80017ac <__aeabi_dadd+0x3f8>
 8001640:	0032      	movs	r2, r6
 8001642:	2700      	movs	r7, #0
 8001644:	2300      	movs	r3, #0
 8001646:	e74c      	b.n	80014e2 <__aeabi_dadd+0x12e>
 8001648:	0742      	lsls	r2, r0, #29
 800164a:	08db      	lsrs	r3, r3, #3
 800164c:	4313      	orrs	r3, r2
 800164e:	08c0      	lsrs	r0, r0, #3
 8001650:	001a      	movs	r2, r3
 8001652:	4302      	orrs	r2, r0
 8001654:	d100      	bne.n	8001658 <__aeabi_dadd+0x2a4>
 8001656:	e1e1      	b.n	8001a1c <__aeabi_dadd+0x668>
 8001658:	2780      	movs	r7, #128	; 0x80
 800165a:	033f      	lsls	r7, r7, #12
 800165c:	4307      	orrs	r7, r0
 800165e:	033f      	lsls	r7, r7, #12
 8001660:	4a2e      	ldr	r2, [pc, #184]	; (800171c <__aeabi_dadd+0x368>)
 8001662:	0b3f      	lsrs	r7, r7, #12
 8001664:	e73d      	b.n	80014e2 <__aeabi_dadd+0x12e>
 8001666:	0020      	movs	r0, r4
 8001668:	f001 fd5a 	bl	8003120 <__clzsi2>
 800166c:	0001      	movs	r1, r0
 800166e:	3118      	adds	r1, #24
 8001670:	291f      	cmp	r1, #31
 8001672:	dc00      	bgt.n	8001676 <__aeabi_dadd+0x2c2>
 8001674:	e6fc      	b.n	8001470 <__aeabi_dadd+0xbc>
 8001676:	3808      	subs	r0, #8
 8001678:	4084      	lsls	r4, r0
 800167a:	0027      	movs	r7, r4
 800167c:	2400      	movs	r4, #0
 800167e:	42b1      	cmp	r1, r6
 8001680:	db00      	blt.n	8001684 <__aeabi_dadd+0x2d0>
 8001682:	e6ff      	b.n	8001484 <__aeabi_dadd+0xd0>
 8001684:	4a26      	ldr	r2, [pc, #152]	; (8001720 <__aeabi_dadd+0x36c>)
 8001686:	1a76      	subs	r6, r6, r1
 8001688:	4017      	ands	r7, r2
 800168a:	e70d      	b.n	80014a8 <__aeabi_dadd+0xf4>
 800168c:	2a00      	cmp	r2, #0
 800168e:	d02f      	beq.n	80016f0 <__aeabi_dadd+0x33c>
 8001690:	464a      	mov	r2, r9
 8001692:	1b92      	subs	r2, r2, r6
 8001694:	4694      	mov	ip, r2
 8001696:	2e00      	cmp	r6, #0
 8001698:	d100      	bne.n	800169c <__aeabi_dadd+0x2e8>
 800169a:	e0ad      	b.n	80017f8 <__aeabi_dadd+0x444>
 800169c:	4a1f      	ldr	r2, [pc, #124]	; (800171c <__aeabi_dadd+0x368>)
 800169e:	4591      	cmp	r9, r2
 80016a0:	d100      	bne.n	80016a4 <__aeabi_dadd+0x2f0>
 80016a2:	e10f      	b.n	80018c4 <__aeabi_dadd+0x510>
 80016a4:	2280      	movs	r2, #128	; 0x80
 80016a6:	0412      	lsls	r2, r2, #16
 80016a8:	4310      	orrs	r0, r2
 80016aa:	4662      	mov	r2, ip
 80016ac:	2a38      	cmp	r2, #56	; 0x38
 80016ae:	dd00      	ble.n	80016b2 <__aeabi_dadd+0x2fe>
 80016b0:	e10f      	b.n	80018d2 <__aeabi_dadd+0x51e>
 80016b2:	2a1f      	cmp	r2, #31
 80016b4:	dd00      	ble.n	80016b8 <__aeabi_dadd+0x304>
 80016b6:	e180      	b.n	80019ba <__aeabi_dadd+0x606>
 80016b8:	4664      	mov	r4, ip
 80016ba:	2220      	movs	r2, #32
 80016bc:	001e      	movs	r6, r3
 80016be:	1b12      	subs	r2, r2, r4
 80016c0:	4667      	mov	r7, ip
 80016c2:	0004      	movs	r4, r0
 80016c4:	4093      	lsls	r3, r2
 80016c6:	4094      	lsls	r4, r2
 80016c8:	40fe      	lsrs	r6, r7
 80016ca:	1e5a      	subs	r2, r3, #1
 80016cc:	4193      	sbcs	r3, r2
 80016ce:	40f8      	lsrs	r0, r7
 80016d0:	4334      	orrs	r4, r6
 80016d2:	431c      	orrs	r4, r3
 80016d4:	4480      	add	r8, r0
 80016d6:	1864      	adds	r4, r4, r1
 80016d8:	428c      	cmp	r4, r1
 80016da:	41bf      	sbcs	r7, r7
 80016dc:	427f      	negs	r7, r7
 80016de:	464e      	mov	r6, r9
 80016e0:	4447      	add	r7, r8
 80016e2:	e7a6      	b.n	8001632 <__aeabi_dadd+0x27e>
 80016e4:	4642      	mov	r2, r8
 80016e6:	430a      	orrs	r2, r1
 80016e8:	0011      	movs	r1, r2
 80016ea:	1e4a      	subs	r2, r1, #1
 80016ec:	4191      	sbcs	r1, r2
 80016ee:	e6ad      	b.n	800144c <__aeabi_dadd+0x98>
 80016f0:	4c0c      	ldr	r4, [pc, #48]	; (8001724 <__aeabi_dadd+0x370>)
 80016f2:	1c72      	adds	r2, r6, #1
 80016f4:	4222      	tst	r2, r4
 80016f6:	d000      	beq.n	80016fa <__aeabi_dadd+0x346>
 80016f8:	e0a1      	b.n	800183e <__aeabi_dadd+0x48a>
 80016fa:	0002      	movs	r2, r0
 80016fc:	431a      	orrs	r2, r3
 80016fe:	2e00      	cmp	r6, #0
 8001700:	d000      	beq.n	8001704 <__aeabi_dadd+0x350>
 8001702:	e0fa      	b.n	80018fa <__aeabi_dadd+0x546>
 8001704:	2a00      	cmp	r2, #0
 8001706:	d100      	bne.n	800170a <__aeabi_dadd+0x356>
 8001708:	e145      	b.n	8001996 <__aeabi_dadd+0x5e2>
 800170a:	003a      	movs	r2, r7
 800170c:	430a      	orrs	r2, r1
 800170e:	d000      	beq.n	8001712 <__aeabi_dadd+0x35e>
 8001710:	e146      	b.n	80019a0 <__aeabi_dadd+0x5ec>
 8001712:	0742      	lsls	r2, r0, #29
 8001714:	08db      	lsrs	r3, r3, #3
 8001716:	4313      	orrs	r3, r2
 8001718:	08c0      	lsrs	r0, r0, #3
 800171a:	e77b      	b.n	8001614 <__aeabi_dadd+0x260>
 800171c:	000007ff 	.word	0x000007ff
 8001720:	ff7fffff 	.word	0xff7fffff
 8001724:	000007fe 	.word	0x000007fe
 8001728:	4647      	mov	r7, r8
 800172a:	1a5c      	subs	r4, r3, r1
 800172c:	1bc2      	subs	r2, r0, r7
 800172e:	42a3      	cmp	r3, r4
 8001730:	41bf      	sbcs	r7, r7
 8001732:	427f      	negs	r7, r7
 8001734:	46b9      	mov	r9, r7
 8001736:	0017      	movs	r7, r2
 8001738:	464a      	mov	r2, r9
 800173a:	1abf      	subs	r7, r7, r2
 800173c:	023a      	lsls	r2, r7, #8
 800173e:	d500      	bpl.n	8001742 <__aeabi_dadd+0x38e>
 8001740:	e08d      	b.n	800185e <__aeabi_dadd+0x4aa>
 8001742:	0023      	movs	r3, r4
 8001744:	433b      	orrs	r3, r7
 8001746:	d000      	beq.n	800174a <__aeabi_dadd+0x396>
 8001748:	e68a      	b.n	8001460 <__aeabi_dadd+0xac>
 800174a:	2000      	movs	r0, #0
 800174c:	2500      	movs	r5, #0
 800174e:	e761      	b.n	8001614 <__aeabi_dadd+0x260>
 8001750:	4cb4      	ldr	r4, [pc, #720]	; (8001a24 <__aeabi_dadd+0x670>)
 8001752:	45a1      	cmp	r9, r4
 8001754:	d100      	bne.n	8001758 <__aeabi_dadd+0x3a4>
 8001756:	e0ad      	b.n	80018b4 <__aeabi_dadd+0x500>
 8001758:	2480      	movs	r4, #128	; 0x80
 800175a:	0424      	lsls	r4, r4, #16
 800175c:	4320      	orrs	r0, r4
 800175e:	4664      	mov	r4, ip
 8001760:	2c38      	cmp	r4, #56	; 0x38
 8001762:	dc3d      	bgt.n	80017e0 <__aeabi_dadd+0x42c>
 8001764:	4662      	mov	r2, ip
 8001766:	2c1f      	cmp	r4, #31
 8001768:	dd00      	ble.n	800176c <__aeabi_dadd+0x3b8>
 800176a:	e0b7      	b.n	80018dc <__aeabi_dadd+0x528>
 800176c:	2520      	movs	r5, #32
 800176e:	001e      	movs	r6, r3
 8001770:	1b2d      	subs	r5, r5, r4
 8001772:	0004      	movs	r4, r0
 8001774:	40ab      	lsls	r3, r5
 8001776:	40ac      	lsls	r4, r5
 8001778:	40d6      	lsrs	r6, r2
 800177a:	40d0      	lsrs	r0, r2
 800177c:	4642      	mov	r2, r8
 800177e:	1e5d      	subs	r5, r3, #1
 8001780:	41ab      	sbcs	r3, r5
 8001782:	4334      	orrs	r4, r6
 8001784:	1a12      	subs	r2, r2, r0
 8001786:	4690      	mov	r8, r2
 8001788:	4323      	orrs	r3, r4
 800178a:	e02c      	b.n	80017e6 <__aeabi_dadd+0x432>
 800178c:	0742      	lsls	r2, r0, #29
 800178e:	08db      	lsrs	r3, r3, #3
 8001790:	4313      	orrs	r3, r2
 8001792:	08c0      	lsrs	r0, r0, #3
 8001794:	e73b      	b.n	800160e <__aeabi_dadd+0x25a>
 8001796:	185c      	adds	r4, r3, r1
 8001798:	429c      	cmp	r4, r3
 800179a:	419b      	sbcs	r3, r3
 800179c:	4440      	add	r0, r8
 800179e:	425b      	negs	r3, r3
 80017a0:	18c7      	adds	r7, r0, r3
 80017a2:	2601      	movs	r6, #1
 80017a4:	023b      	lsls	r3, r7, #8
 80017a6:	d400      	bmi.n	80017aa <__aeabi_dadd+0x3f6>
 80017a8:	e729      	b.n	80015fe <__aeabi_dadd+0x24a>
 80017aa:	2602      	movs	r6, #2
 80017ac:	4a9e      	ldr	r2, [pc, #632]	; (8001a28 <__aeabi_dadd+0x674>)
 80017ae:	0863      	lsrs	r3, r4, #1
 80017b0:	4017      	ands	r7, r2
 80017b2:	2201      	movs	r2, #1
 80017b4:	4014      	ands	r4, r2
 80017b6:	431c      	orrs	r4, r3
 80017b8:	07fb      	lsls	r3, r7, #31
 80017ba:	431c      	orrs	r4, r3
 80017bc:	087f      	lsrs	r7, r7, #1
 80017be:	e673      	b.n	80014a8 <__aeabi_dadd+0xf4>
 80017c0:	4644      	mov	r4, r8
 80017c2:	3a20      	subs	r2, #32
 80017c4:	40d4      	lsrs	r4, r2
 80017c6:	4662      	mov	r2, ip
 80017c8:	2a20      	cmp	r2, #32
 80017ca:	d005      	beq.n	80017d8 <__aeabi_dadd+0x424>
 80017cc:	4667      	mov	r7, ip
 80017ce:	2240      	movs	r2, #64	; 0x40
 80017d0:	1bd2      	subs	r2, r2, r7
 80017d2:	4647      	mov	r7, r8
 80017d4:	4097      	lsls	r7, r2
 80017d6:	4339      	orrs	r1, r7
 80017d8:	1e4a      	subs	r2, r1, #1
 80017da:	4191      	sbcs	r1, r2
 80017dc:	4321      	orrs	r1, r4
 80017de:	e635      	b.n	800144c <__aeabi_dadd+0x98>
 80017e0:	4303      	orrs	r3, r0
 80017e2:	1e58      	subs	r0, r3, #1
 80017e4:	4183      	sbcs	r3, r0
 80017e6:	1acc      	subs	r4, r1, r3
 80017e8:	42a1      	cmp	r1, r4
 80017ea:	41bf      	sbcs	r7, r7
 80017ec:	4643      	mov	r3, r8
 80017ee:	427f      	negs	r7, r7
 80017f0:	4655      	mov	r5, sl
 80017f2:	464e      	mov	r6, r9
 80017f4:	1bdf      	subs	r7, r3, r7
 80017f6:	e62e      	b.n	8001456 <__aeabi_dadd+0xa2>
 80017f8:	0002      	movs	r2, r0
 80017fa:	431a      	orrs	r2, r3
 80017fc:	d100      	bne.n	8001800 <__aeabi_dadd+0x44c>
 80017fe:	e0bd      	b.n	800197c <__aeabi_dadd+0x5c8>
 8001800:	4662      	mov	r2, ip
 8001802:	4664      	mov	r4, ip
 8001804:	3a01      	subs	r2, #1
 8001806:	2c01      	cmp	r4, #1
 8001808:	d100      	bne.n	800180c <__aeabi_dadd+0x458>
 800180a:	e0e5      	b.n	80019d8 <__aeabi_dadd+0x624>
 800180c:	4c85      	ldr	r4, [pc, #532]	; (8001a24 <__aeabi_dadd+0x670>)
 800180e:	45a4      	cmp	ip, r4
 8001810:	d058      	beq.n	80018c4 <__aeabi_dadd+0x510>
 8001812:	4694      	mov	ip, r2
 8001814:	e749      	b.n	80016aa <__aeabi_dadd+0x2f6>
 8001816:	4664      	mov	r4, ip
 8001818:	2220      	movs	r2, #32
 800181a:	1b12      	subs	r2, r2, r4
 800181c:	4644      	mov	r4, r8
 800181e:	4094      	lsls	r4, r2
 8001820:	000f      	movs	r7, r1
 8001822:	46a1      	mov	r9, r4
 8001824:	4664      	mov	r4, ip
 8001826:	4091      	lsls	r1, r2
 8001828:	40e7      	lsrs	r7, r4
 800182a:	464c      	mov	r4, r9
 800182c:	1e4a      	subs	r2, r1, #1
 800182e:	4191      	sbcs	r1, r2
 8001830:	433c      	orrs	r4, r7
 8001832:	4642      	mov	r2, r8
 8001834:	430c      	orrs	r4, r1
 8001836:	4661      	mov	r1, ip
 8001838:	40ca      	lsrs	r2, r1
 800183a:	1880      	adds	r0, r0, r2
 800183c:	e6f4      	b.n	8001628 <__aeabi_dadd+0x274>
 800183e:	4c79      	ldr	r4, [pc, #484]	; (8001a24 <__aeabi_dadd+0x670>)
 8001840:	42a2      	cmp	r2, r4
 8001842:	d100      	bne.n	8001846 <__aeabi_dadd+0x492>
 8001844:	e6fd      	b.n	8001642 <__aeabi_dadd+0x28e>
 8001846:	1859      	adds	r1, r3, r1
 8001848:	4299      	cmp	r1, r3
 800184a:	419b      	sbcs	r3, r3
 800184c:	4440      	add	r0, r8
 800184e:	425f      	negs	r7, r3
 8001850:	19c7      	adds	r7, r0, r7
 8001852:	07fc      	lsls	r4, r7, #31
 8001854:	0849      	lsrs	r1, r1, #1
 8001856:	0016      	movs	r6, r2
 8001858:	430c      	orrs	r4, r1
 800185a:	087f      	lsrs	r7, r7, #1
 800185c:	e6cf      	b.n	80015fe <__aeabi_dadd+0x24a>
 800185e:	1acc      	subs	r4, r1, r3
 8001860:	42a1      	cmp	r1, r4
 8001862:	41bf      	sbcs	r7, r7
 8001864:	4643      	mov	r3, r8
 8001866:	427f      	negs	r7, r7
 8001868:	1a18      	subs	r0, r3, r0
 800186a:	4655      	mov	r5, sl
 800186c:	1bc7      	subs	r7, r0, r7
 800186e:	e5f7      	b.n	8001460 <__aeabi_dadd+0xac>
 8001870:	08c9      	lsrs	r1, r1, #3
 8001872:	077b      	lsls	r3, r7, #29
 8001874:	4655      	mov	r5, sl
 8001876:	430b      	orrs	r3, r1
 8001878:	08f8      	lsrs	r0, r7, #3
 800187a:	e6c8      	b.n	800160e <__aeabi_dadd+0x25a>
 800187c:	2c00      	cmp	r4, #0
 800187e:	d000      	beq.n	8001882 <__aeabi_dadd+0x4ce>
 8001880:	e081      	b.n	8001986 <__aeabi_dadd+0x5d2>
 8001882:	4643      	mov	r3, r8
 8001884:	430b      	orrs	r3, r1
 8001886:	d115      	bne.n	80018b4 <__aeabi_dadd+0x500>
 8001888:	2080      	movs	r0, #128	; 0x80
 800188a:	2500      	movs	r5, #0
 800188c:	0300      	lsls	r0, r0, #12
 800188e:	e6e3      	b.n	8001658 <__aeabi_dadd+0x2a4>
 8001890:	1a5c      	subs	r4, r3, r1
 8001892:	42a3      	cmp	r3, r4
 8001894:	419b      	sbcs	r3, r3
 8001896:	1bc7      	subs	r7, r0, r7
 8001898:	425b      	negs	r3, r3
 800189a:	2601      	movs	r6, #1
 800189c:	1aff      	subs	r7, r7, r3
 800189e:	e5da      	b.n	8001456 <__aeabi_dadd+0xa2>
 80018a0:	0742      	lsls	r2, r0, #29
 80018a2:	08db      	lsrs	r3, r3, #3
 80018a4:	4313      	orrs	r3, r2
 80018a6:	08c0      	lsrs	r0, r0, #3
 80018a8:	e6d2      	b.n	8001650 <__aeabi_dadd+0x29c>
 80018aa:	0742      	lsls	r2, r0, #29
 80018ac:	08db      	lsrs	r3, r3, #3
 80018ae:	4313      	orrs	r3, r2
 80018b0:	08c0      	lsrs	r0, r0, #3
 80018b2:	e6ac      	b.n	800160e <__aeabi_dadd+0x25a>
 80018b4:	4643      	mov	r3, r8
 80018b6:	4642      	mov	r2, r8
 80018b8:	08c9      	lsrs	r1, r1, #3
 80018ba:	075b      	lsls	r3, r3, #29
 80018bc:	4655      	mov	r5, sl
 80018be:	430b      	orrs	r3, r1
 80018c0:	08d0      	lsrs	r0, r2, #3
 80018c2:	e6c5      	b.n	8001650 <__aeabi_dadd+0x29c>
 80018c4:	4643      	mov	r3, r8
 80018c6:	4642      	mov	r2, r8
 80018c8:	075b      	lsls	r3, r3, #29
 80018ca:	08c9      	lsrs	r1, r1, #3
 80018cc:	430b      	orrs	r3, r1
 80018ce:	08d0      	lsrs	r0, r2, #3
 80018d0:	e6be      	b.n	8001650 <__aeabi_dadd+0x29c>
 80018d2:	4303      	orrs	r3, r0
 80018d4:	001c      	movs	r4, r3
 80018d6:	1e63      	subs	r3, r4, #1
 80018d8:	419c      	sbcs	r4, r3
 80018da:	e6fc      	b.n	80016d6 <__aeabi_dadd+0x322>
 80018dc:	0002      	movs	r2, r0
 80018de:	3c20      	subs	r4, #32
 80018e0:	40e2      	lsrs	r2, r4
 80018e2:	0014      	movs	r4, r2
 80018e4:	4662      	mov	r2, ip
 80018e6:	2a20      	cmp	r2, #32
 80018e8:	d003      	beq.n	80018f2 <__aeabi_dadd+0x53e>
 80018ea:	2540      	movs	r5, #64	; 0x40
 80018ec:	1aad      	subs	r5, r5, r2
 80018ee:	40a8      	lsls	r0, r5
 80018f0:	4303      	orrs	r3, r0
 80018f2:	1e58      	subs	r0, r3, #1
 80018f4:	4183      	sbcs	r3, r0
 80018f6:	4323      	orrs	r3, r4
 80018f8:	e775      	b.n	80017e6 <__aeabi_dadd+0x432>
 80018fa:	2a00      	cmp	r2, #0
 80018fc:	d0e2      	beq.n	80018c4 <__aeabi_dadd+0x510>
 80018fe:	003a      	movs	r2, r7
 8001900:	430a      	orrs	r2, r1
 8001902:	d0cd      	beq.n	80018a0 <__aeabi_dadd+0x4ec>
 8001904:	0742      	lsls	r2, r0, #29
 8001906:	08db      	lsrs	r3, r3, #3
 8001908:	4313      	orrs	r3, r2
 800190a:	2280      	movs	r2, #128	; 0x80
 800190c:	08c0      	lsrs	r0, r0, #3
 800190e:	0312      	lsls	r2, r2, #12
 8001910:	4210      	tst	r0, r2
 8001912:	d006      	beq.n	8001922 <__aeabi_dadd+0x56e>
 8001914:	08fc      	lsrs	r4, r7, #3
 8001916:	4214      	tst	r4, r2
 8001918:	d103      	bne.n	8001922 <__aeabi_dadd+0x56e>
 800191a:	0020      	movs	r0, r4
 800191c:	08cb      	lsrs	r3, r1, #3
 800191e:	077a      	lsls	r2, r7, #29
 8001920:	4313      	orrs	r3, r2
 8001922:	0f5a      	lsrs	r2, r3, #29
 8001924:	00db      	lsls	r3, r3, #3
 8001926:	0752      	lsls	r2, r2, #29
 8001928:	08db      	lsrs	r3, r3, #3
 800192a:	4313      	orrs	r3, r2
 800192c:	e690      	b.n	8001650 <__aeabi_dadd+0x29c>
 800192e:	4643      	mov	r3, r8
 8001930:	430b      	orrs	r3, r1
 8001932:	d100      	bne.n	8001936 <__aeabi_dadd+0x582>
 8001934:	e709      	b.n	800174a <__aeabi_dadd+0x396>
 8001936:	4643      	mov	r3, r8
 8001938:	4642      	mov	r2, r8
 800193a:	08c9      	lsrs	r1, r1, #3
 800193c:	075b      	lsls	r3, r3, #29
 800193e:	4655      	mov	r5, sl
 8001940:	430b      	orrs	r3, r1
 8001942:	08d0      	lsrs	r0, r2, #3
 8001944:	e666      	b.n	8001614 <__aeabi_dadd+0x260>
 8001946:	1acc      	subs	r4, r1, r3
 8001948:	42a1      	cmp	r1, r4
 800194a:	4189      	sbcs	r1, r1
 800194c:	1a3f      	subs	r7, r7, r0
 800194e:	4249      	negs	r1, r1
 8001950:	4655      	mov	r5, sl
 8001952:	2601      	movs	r6, #1
 8001954:	1a7f      	subs	r7, r7, r1
 8001956:	e57e      	b.n	8001456 <__aeabi_dadd+0xa2>
 8001958:	4642      	mov	r2, r8
 800195a:	1a5c      	subs	r4, r3, r1
 800195c:	1a87      	subs	r7, r0, r2
 800195e:	42a3      	cmp	r3, r4
 8001960:	4192      	sbcs	r2, r2
 8001962:	4252      	negs	r2, r2
 8001964:	1abf      	subs	r7, r7, r2
 8001966:	023a      	lsls	r2, r7, #8
 8001968:	d53d      	bpl.n	80019e6 <__aeabi_dadd+0x632>
 800196a:	1acc      	subs	r4, r1, r3
 800196c:	42a1      	cmp	r1, r4
 800196e:	4189      	sbcs	r1, r1
 8001970:	4643      	mov	r3, r8
 8001972:	4249      	negs	r1, r1
 8001974:	1a1f      	subs	r7, r3, r0
 8001976:	4655      	mov	r5, sl
 8001978:	1a7f      	subs	r7, r7, r1
 800197a:	e595      	b.n	80014a8 <__aeabi_dadd+0xf4>
 800197c:	077b      	lsls	r3, r7, #29
 800197e:	08c9      	lsrs	r1, r1, #3
 8001980:	430b      	orrs	r3, r1
 8001982:	08f8      	lsrs	r0, r7, #3
 8001984:	e643      	b.n	800160e <__aeabi_dadd+0x25a>
 8001986:	4644      	mov	r4, r8
 8001988:	08db      	lsrs	r3, r3, #3
 800198a:	430c      	orrs	r4, r1
 800198c:	d130      	bne.n	80019f0 <__aeabi_dadd+0x63c>
 800198e:	0742      	lsls	r2, r0, #29
 8001990:	4313      	orrs	r3, r2
 8001992:	08c0      	lsrs	r0, r0, #3
 8001994:	e65c      	b.n	8001650 <__aeabi_dadd+0x29c>
 8001996:	077b      	lsls	r3, r7, #29
 8001998:	08c9      	lsrs	r1, r1, #3
 800199a:	430b      	orrs	r3, r1
 800199c:	08f8      	lsrs	r0, r7, #3
 800199e:	e639      	b.n	8001614 <__aeabi_dadd+0x260>
 80019a0:	185c      	adds	r4, r3, r1
 80019a2:	429c      	cmp	r4, r3
 80019a4:	419b      	sbcs	r3, r3
 80019a6:	4440      	add	r0, r8
 80019a8:	425b      	negs	r3, r3
 80019aa:	18c7      	adds	r7, r0, r3
 80019ac:	023b      	lsls	r3, r7, #8
 80019ae:	d400      	bmi.n	80019b2 <__aeabi_dadd+0x5fe>
 80019b0:	e625      	b.n	80015fe <__aeabi_dadd+0x24a>
 80019b2:	4b1d      	ldr	r3, [pc, #116]	; (8001a28 <__aeabi_dadd+0x674>)
 80019b4:	2601      	movs	r6, #1
 80019b6:	401f      	ands	r7, r3
 80019b8:	e621      	b.n	80015fe <__aeabi_dadd+0x24a>
 80019ba:	0004      	movs	r4, r0
 80019bc:	3a20      	subs	r2, #32
 80019be:	40d4      	lsrs	r4, r2
 80019c0:	4662      	mov	r2, ip
 80019c2:	2a20      	cmp	r2, #32
 80019c4:	d004      	beq.n	80019d0 <__aeabi_dadd+0x61c>
 80019c6:	2240      	movs	r2, #64	; 0x40
 80019c8:	4666      	mov	r6, ip
 80019ca:	1b92      	subs	r2, r2, r6
 80019cc:	4090      	lsls	r0, r2
 80019ce:	4303      	orrs	r3, r0
 80019d0:	1e5a      	subs	r2, r3, #1
 80019d2:	4193      	sbcs	r3, r2
 80019d4:	431c      	orrs	r4, r3
 80019d6:	e67e      	b.n	80016d6 <__aeabi_dadd+0x322>
 80019d8:	185c      	adds	r4, r3, r1
 80019da:	428c      	cmp	r4, r1
 80019dc:	4189      	sbcs	r1, r1
 80019de:	4440      	add	r0, r8
 80019e0:	4249      	negs	r1, r1
 80019e2:	1847      	adds	r7, r0, r1
 80019e4:	e6dd      	b.n	80017a2 <__aeabi_dadd+0x3ee>
 80019e6:	0023      	movs	r3, r4
 80019e8:	433b      	orrs	r3, r7
 80019ea:	d100      	bne.n	80019ee <__aeabi_dadd+0x63a>
 80019ec:	e6ad      	b.n	800174a <__aeabi_dadd+0x396>
 80019ee:	e606      	b.n	80015fe <__aeabi_dadd+0x24a>
 80019f0:	0744      	lsls	r4, r0, #29
 80019f2:	4323      	orrs	r3, r4
 80019f4:	2480      	movs	r4, #128	; 0x80
 80019f6:	08c0      	lsrs	r0, r0, #3
 80019f8:	0324      	lsls	r4, r4, #12
 80019fa:	4220      	tst	r0, r4
 80019fc:	d008      	beq.n	8001a10 <__aeabi_dadd+0x65c>
 80019fe:	4642      	mov	r2, r8
 8001a00:	08d6      	lsrs	r6, r2, #3
 8001a02:	4226      	tst	r6, r4
 8001a04:	d104      	bne.n	8001a10 <__aeabi_dadd+0x65c>
 8001a06:	4655      	mov	r5, sl
 8001a08:	0030      	movs	r0, r6
 8001a0a:	08cb      	lsrs	r3, r1, #3
 8001a0c:	0751      	lsls	r1, r2, #29
 8001a0e:	430b      	orrs	r3, r1
 8001a10:	0f5a      	lsrs	r2, r3, #29
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	08db      	lsrs	r3, r3, #3
 8001a16:	0752      	lsls	r2, r2, #29
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	e619      	b.n	8001650 <__aeabi_dadd+0x29c>
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	4a01      	ldr	r2, [pc, #4]	; (8001a24 <__aeabi_dadd+0x670>)
 8001a20:	001f      	movs	r7, r3
 8001a22:	e55e      	b.n	80014e2 <__aeabi_dadd+0x12e>
 8001a24:	000007ff 	.word	0x000007ff
 8001a28:	ff7fffff 	.word	0xff7fffff

08001a2c <__aeabi_ddiv>:
 8001a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a2e:	4657      	mov	r7, sl
 8001a30:	464e      	mov	r6, r9
 8001a32:	4645      	mov	r5, r8
 8001a34:	46de      	mov	lr, fp
 8001a36:	b5e0      	push	{r5, r6, r7, lr}
 8001a38:	4681      	mov	r9, r0
 8001a3a:	0005      	movs	r5, r0
 8001a3c:	030c      	lsls	r4, r1, #12
 8001a3e:	0048      	lsls	r0, r1, #1
 8001a40:	4692      	mov	sl, r2
 8001a42:	001f      	movs	r7, r3
 8001a44:	b085      	sub	sp, #20
 8001a46:	0b24      	lsrs	r4, r4, #12
 8001a48:	0d40      	lsrs	r0, r0, #21
 8001a4a:	0fce      	lsrs	r6, r1, #31
 8001a4c:	2800      	cmp	r0, #0
 8001a4e:	d100      	bne.n	8001a52 <__aeabi_ddiv+0x26>
 8001a50:	e156      	b.n	8001d00 <__aeabi_ddiv+0x2d4>
 8001a52:	4bd4      	ldr	r3, [pc, #848]	; (8001da4 <__aeabi_ddiv+0x378>)
 8001a54:	4298      	cmp	r0, r3
 8001a56:	d100      	bne.n	8001a5a <__aeabi_ddiv+0x2e>
 8001a58:	e172      	b.n	8001d40 <__aeabi_ddiv+0x314>
 8001a5a:	0f6b      	lsrs	r3, r5, #29
 8001a5c:	00e4      	lsls	r4, r4, #3
 8001a5e:	431c      	orrs	r4, r3
 8001a60:	2380      	movs	r3, #128	; 0x80
 8001a62:	041b      	lsls	r3, r3, #16
 8001a64:	4323      	orrs	r3, r4
 8001a66:	4698      	mov	r8, r3
 8001a68:	4bcf      	ldr	r3, [pc, #828]	; (8001da8 <__aeabi_ddiv+0x37c>)
 8001a6a:	00ed      	lsls	r5, r5, #3
 8001a6c:	469b      	mov	fp, r3
 8001a6e:	2300      	movs	r3, #0
 8001a70:	4699      	mov	r9, r3
 8001a72:	4483      	add	fp, r0
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	033c      	lsls	r4, r7, #12
 8001a78:	007b      	lsls	r3, r7, #1
 8001a7a:	4650      	mov	r0, sl
 8001a7c:	0b24      	lsrs	r4, r4, #12
 8001a7e:	0d5b      	lsrs	r3, r3, #21
 8001a80:	0fff      	lsrs	r7, r7, #31
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d100      	bne.n	8001a88 <__aeabi_ddiv+0x5c>
 8001a86:	e11f      	b.n	8001cc8 <__aeabi_ddiv+0x29c>
 8001a88:	4ac6      	ldr	r2, [pc, #792]	; (8001da4 <__aeabi_ddiv+0x378>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_ddiv+0x64>
 8001a8e:	e162      	b.n	8001d56 <__aeabi_ddiv+0x32a>
 8001a90:	49c5      	ldr	r1, [pc, #788]	; (8001da8 <__aeabi_ddiv+0x37c>)
 8001a92:	0f42      	lsrs	r2, r0, #29
 8001a94:	468c      	mov	ip, r1
 8001a96:	00e4      	lsls	r4, r4, #3
 8001a98:	4659      	mov	r1, fp
 8001a9a:	4314      	orrs	r4, r2
 8001a9c:	2280      	movs	r2, #128	; 0x80
 8001a9e:	4463      	add	r3, ip
 8001aa0:	0412      	lsls	r2, r2, #16
 8001aa2:	1acb      	subs	r3, r1, r3
 8001aa4:	4314      	orrs	r4, r2
 8001aa6:	469b      	mov	fp, r3
 8001aa8:	00c2      	lsls	r2, r0, #3
 8001aaa:	2000      	movs	r0, #0
 8001aac:	0033      	movs	r3, r6
 8001aae:	407b      	eors	r3, r7
 8001ab0:	469a      	mov	sl, r3
 8001ab2:	464b      	mov	r3, r9
 8001ab4:	2b0f      	cmp	r3, #15
 8001ab6:	d827      	bhi.n	8001b08 <__aeabi_ddiv+0xdc>
 8001ab8:	49bc      	ldr	r1, [pc, #752]	; (8001dac <__aeabi_ddiv+0x380>)
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	58cb      	ldr	r3, [r1, r3]
 8001abe:	469f      	mov	pc, r3
 8001ac0:	46b2      	mov	sl, r6
 8001ac2:	9b00      	ldr	r3, [sp, #0]
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d016      	beq.n	8001af6 <__aeabi_ddiv+0xca>
 8001ac8:	2b03      	cmp	r3, #3
 8001aca:	d100      	bne.n	8001ace <__aeabi_ddiv+0xa2>
 8001acc:	e28e      	b.n	8001fec <__aeabi_ddiv+0x5c0>
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d000      	beq.n	8001ad4 <__aeabi_ddiv+0xa8>
 8001ad2:	e0d9      	b.n	8001c88 <__aeabi_ddiv+0x25c>
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	2400      	movs	r4, #0
 8001ad8:	2500      	movs	r5, #0
 8001ada:	4652      	mov	r2, sl
 8001adc:	051b      	lsls	r3, r3, #20
 8001ade:	4323      	orrs	r3, r4
 8001ae0:	07d2      	lsls	r2, r2, #31
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	0028      	movs	r0, r5
 8001ae6:	0019      	movs	r1, r3
 8001ae8:	b005      	add	sp, #20
 8001aea:	bcf0      	pop	{r4, r5, r6, r7}
 8001aec:	46bb      	mov	fp, r7
 8001aee:	46b2      	mov	sl, r6
 8001af0:	46a9      	mov	r9, r5
 8001af2:	46a0      	mov	r8, r4
 8001af4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001af6:	2400      	movs	r4, #0
 8001af8:	2500      	movs	r5, #0
 8001afa:	4baa      	ldr	r3, [pc, #680]	; (8001da4 <__aeabi_ddiv+0x378>)
 8001afc:	e7ed      	b.n	8001ada <__aeabi_ddiv+0xae>
 8001afe:	46ba      	mov	sl, r7
 8001b00:	46a0      	mov	r8, r4
 8001b02:	0015      	movs	r5, r2
 8001b04:	9000      	str	r0, [sp, #0]
 8001b06:	e7dc      	b.n	8001ac2 <__aeabi_ddiv+0x96>
 8001b08:	4544      	cmp	r4, r8
 8001b0a:	d200      	bcs.n	8001b0e <__aeabi_ddiv+0xe2>
 8001b0c:	e1c7      	b.n	8001e9e <__aeabi_ddiv+0x472>
 8001b0e:	d100      	bne.n	8001b12 <__aeabi_ddiv+0xe6>
 8001b10:	e1c2      	b.n	8001e98 <__aeabi_ddiv+0x46c>
 8001b12:	2301      	movs	r3, #1
 8001b14:	425b      	negs	r3, r3
 8001b16:	469c      	mov	ip, r3
 8001b18:	002e      	movs	r6, r5
 8001b1a:	4640      	mov	r0, r8
 8001b1c:	2500      	movs	r5, #0
 8001b1e:	44e3      	add	fp, ip
 8001b20:	0223      	lsls	r3, r4, #8
 8001b22:	0e14      	lsrs	r4, r2, #24
 8001b24:	431c      	orrs	r4, r3
 8001b26:	0c1b      	lsrs	r3, r3, #16
 8001b28:	4699      	mov	r9, r3
 8001b2a:	0423      	lsls	r3, r4, #16
 8001b2c:	0c1f      	lsrs	r7, r3, #16
 8001b2e:	0212      	lsls	r2, r2, #8
 8001b30:	4649      	mov	r1, r9
 8001b32:	9200      	str	r2, [sp, #0]
 8001b34:	9701      	str	r7, [sp, #4]
 8001b36:	f7fe fb8f 	bl	8000258 <__aeabi_uidivmod>
 8001b3a:	0002      	movs	r2, r0
 8001b3c:	437a      	muls	r2, r7
 8001b3e:	040b      	lsls	r3, r1, #16
 8001b40:	0c31      	lsrs	r1, r6, #16
 8001b42:	4680      	mov	r8, r0
 8001b44:	4319      	orrs	r1, r3
 8001b46:	428a      	cmp	r2, r1
 8001b48:	d907      	bls.n	8001b5a <__aeabi_ddiv+0x12e>
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	425b      	negs	r3, r3
 8001b4e:	469c      	mov	ip, r3
 8001b50:	1909      	adds	r1, r1, r4
 8001b52:	44e0      	add	r8, ip
 8001b54:	428c      	cmp	r4, r1
 8001b56:	d800      	bhi.n	8001b5a <__aeabi_ddiv+0x12e>
 8001b58:	e207      	b.n	8001f6a <__aeabi_ddiv+0x53e>
 8001b5a:	1a88      	subs	r0, r1, r2
 8001b5c:	4649      	mov	r1, r9
 8001b5e:	f7fe fb7b 	bl	8000258 <__aeabi_uidivmod>
 8001b62:	0409      	lsls	r1, r1, #16
 8001b64:	468c      	mov	ip, r1
 8001b66:	0431      	lsls	r1, r6, #16
 8001b68:	4666      	mov	r6, ip
 8001b6a:	9a01      	ldr	r2, [sp, #4]
 8001b6c:	0c09      	lsrs	r1, r1, #16
 8001b6e:	4342      	muls	r2, r0
 8001b70:	0003      	movs	r3, r0
 8001b72:	4331      	orrs	r1, r6
 8001b74:	428a      	cmp	r2, r1
 8001b76:	d904      	bls.n	8001b82 <__aeabi_ddiv+0x156>
 8001b78:	1909      	adds	r1, r1, r4
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	428c      	cmp	r4, r1
 8001b7e:	d800      	bhi.n	8001b82 <__aeabi_ddiv+0x156>
 8001b80:	e1ed      	b.n	8001f5e <__aeabi_ddiv+0x532>
 8001b82:	1a88      	subs	r0, r1, r2
 8001b84:	4642      	mov	r2, r8
 8001b86:	0412      	lsls	r2, r2, #16
 8001b88:	431a      	orrs	r2, r3
 8001b8a:	4690      	mov	r8, r2
 8001b8c:	4641      	mov	r1, r8
 8001b8e:	9b00      	ldr	r3, [sp, #0]
 8001b90:	040e      	lsls	r6, r1, #16
 8001b92:	0c1b      	lsrs	r3, r3, #16
 8001b94:	001f      	movs	r7, r3
 8001b96:	9302      	str	r3, [sp, #8]
 8001b98:	9b00      	ldr	r3, [sp, #0]
 8001b9a:	0c36      	lsrs	r6, r6, #16
 8001b9c:	041b      	lsls	r3, r3, #16
 8001b9e:	0c19      	lsrs	r1, r3, #16
 8001ba0:	000b      	movs	r3, r1
 8001ba2:	4373      	muls	r3, r6
 8001ba4:	0c12      	lsrs	r2, r2, #16
 8001ba6:	437e      	muls	r6, r7
 8001ba8:	9103      	str	r1, [sp, #12]
 8001baa:	4351      	muls	r1, r2
 8001bac:	437a      	muls	r2, r7
 8001bae:	0c1f      	lsrs	r7, r3, #16
 8001bb0:	46bc      	mov	ip, r7
 8001bb2:	1876      	adds	r6, r6, r1
 8001bb4:	4466      	add	r6, ip
 8001bb6:	42b1      	cmp	r1, r6
 8001bb8:	d903      	bls.n	8001bc2 <__aeabi_ddiv+0x196>
 8001bba:	2180      	movs	r1, #128	; 0x80
 8001bbc:	0249      	lsls	r1, r1, #9
 8001bbe:	468c      	mov	ip, r1
 8001bc0:	4462      	add	r2, ip
 8001bc2:	0c31      	lsrs	r1, r6, #16
 8001bc4:	188a      	adds	r2, r1, r2
 8001bc6:	0431      	lsls	r1, r6, #16
 8001bc8:	041e      	lsls	r6, r3, #16
 8001bca:	0c36      	lsrs	r6, r6, #16
 8001bcc:	198e      	adds	r6, r1, r6
 8001bce:	4290      	cmp	r0, r2
 8001bd0:	d302      	bcc.n	8001bd8 <__aeabi_ddiv+0x1ac>
 8001bd2:	d112      	bne.n	8001bfa <__aeabi_ddiv+0x1ce>
 8001bd4:	42b5      	cmp	r5, r6
 8001bd6:	d210      	bcs.n	8001bfa <__aeabi_ddiv+0x1ce>
 8001bd8:	4643      	mov	r3, r8
 8001bda:	1e59      	subs	r1, r3, #1
 8001bdc:	9b00      	ldr	r3, [sp, #0]
 8001bde:	469c      	mov	ip, r3
 8001be0:	4465      	add	r5, ip
 8001be2:	001f      	movs	r7, r3
 8001be4:	429d      	cmp	r5, r3
 8001be6:	419b      	sbcs	r3, r3
 8001be8:	425b      	negs	r3, r3
 8001bea:	191b      	adds	r3, r3, r4
 8001bec:	18c0      	adds	r0, r0, r3
 8001bee:	4284      	cmp	r4, r0
 8001bf0:	d200      	bcs.n	8001bf4 <__aeabi_ddiv+0x1c8>
 8001bf2:	e1a0      	b.n	8001f36 <__aeabi_ddiv+0x50a>
 8001bf4:	d100      	bne.n	8001bf8 <__aeabi_ddiv+0x1cc>
 8001bf6:	e19b      	b.n	8001f30 <__aeabi_ddiv+0x504>
 8001bf8:	4688      	mov	r8, r1
 8001bfa:	1bae      	subs	r6, r5, r6
 8001bfc:	42b5      	cmp	r5, r6
 8001bfe:	41ad      	sbcs	r5, r5
 8001c00:	1a80      	subs	r0, r0, r2
 8001c02:	426d      	negs	r5, r5
 8001c04:	1b40      	subs	r0, r0, r5
 8001c06:	4284      	cmp	r4, r0
 8001c08:	d100      	bne.n	8001c0c <__aeabi_ddiv+0x1e0>
 8001c0a:	e1d5      	b.n	8001fb8 <__aeabi_ddiv+0x58c>
 8001c0c:	4649      	mov	r1, r9
 8001c0e:	f7fe fb23 	bl	8000258 <__aeabi_uidivmod>
 8001c12:	9a01      	ldr	r2, [sp, #4]
 8001c14:	040b      	lsls	r3, r1, #16
 8001c16:	4342      	muls	r2, r0
 8001c18:	0c31      	lsrs	r1, r6, #16
 8001c1a:	0005      	movs	r5, r0
 8001c1c:	4319      	orrs	r1, r3
 8001c1e:	428a      	cmp	r2, r1
 8001c20:	d900      	bls.n	8001c24 <__aeabi_ddiv+0x1f8>
 8001c22:	e16c      	b.n	8001efe <__aeabi_ddiv+0x4d2>
 8001c24:	1a88      	subs	r0, r1, r2
 8001c26:	4649      	mov	r1, r9
 8001c28:	f7fe fb16 	bl	8000258 <__aeabi_uidivmod>
 8001c2c:	9a01      	ldr	r2, [sp, #4]
 8001c2e:	0436      	lsls	r6, r6, #16
 8001c30:	4342      	muls	r2, r0
 8001c32:	0409      	lsls	r1, r1, #16
 8001c34:	0c36      	lsrs	r6, r6, #16
 8001c36:	0003      	movs	r3, r0
 8001c38:	430e      	orrs	r6, r1
 8001c3a:	42b2      	cmp	r2, r6
 8001c3c:	d900      	bls.n	8001c40 <__aeabi_ddiv+0x214>
 8001c3e:	e153      	b.n	8001ee8 <__aeabi_ddiv+0x4bc>
 8001c40:	9803      	ldr	r0, [sp, #12]
 8001c42:	1ab6      	subs	r6, r6, r2
 8001c44:	0002      	movs	r2, r0
 8001c46:	042d      	lsls	r5, r5, #16
 8001c48:	431d      	orrs	r5, r3
 8001c4a:	9f02      	ldr	r7, [sp, #8]
 8001c4c:	042b      	lsls	r3, r5, #16
 8001c4e:	0c1b      	lsrs	r3, r3, #16
 8001c50:	435a      	muls	r2, r3
 8001c52:	437b      	muls	r3, r7
 8001c54:	469c      	mov	ip, r3
 8001c56:	0c29      	lsrs	r1, r5, #16
 8001c58:	4348      	muls	r0, r1
 8001c5a:	0c13      	lsrs	r3, r2, #16
 8001c5c:	4484      	add	ip, r0
 8001c5e:	4463      	add	r3, ip
 8001c60:	4379      	muls	r1, r7
 8001c62:	4298      	cmp	r0, r3
 8001c64:	d903      	bls.n	8001c6e <__aeabi_ddiv+0x242>
 8001c66:	2080      	movs	r0, #128	; 0x80
 8001c68:	0240      	lsls	r0, r0, #9
 8001c6a:	4684      	mov	ip, r0
 8001c6c:	4461      	add	r1, ip
 8001c6e:	0c18      	lsrs	r0, r3, #16
 8001c70:	0412      	lsls	r2, r2, #16
 8001c72:	041b      	lsls	r3, r3, #16
 8001c74:	0c12      	lsrs	r2, r2, #16
 8001c76:	1841      	adds	r1, r0, r1
 8001c78:	189b      	adds	r3, r3, r2
 8001c7a:	428e      	cmp	r6, r1
 8001c7c:	d200      	bcs.n	8001c80 <__aeabi_ddiv+0x254>
 8001c7e:	e0ff      	b.n	8001e80 <__aeabi_ddiv+0x454>
 8001c80:	d100      	bne.n	8001c84 <__aeabi_ddiv+0x258>
 8001c82:	e0fa      	b.n	8001e7a <__aeabi_ddiv+0x44e>
 8001c84:	2301      	movs	r3, #1
 8001c86:	431d      	orrs	r5, r3
 8001c88:	4a49      	ldr	r2, [pc, #292]	; (8001db0 <__aeabi_ddiv+0x384>)
 8001c8a:	445a      	add	r2, fp
 8001c8c:	2a00      	cmp	r2, #0
 8001c8e:	dc00      	bgt.n	8001c92 <__aeabi_ddiv+0x266>
 8001c90:	e0aa      	b.n	8001de8 <__aeabi_ddiv+0x3bc>
 8001c92:	076b      	lsls	r3, r5, #29
 8001c94:	d000      	beq.n	8001c98 <__aeabi_ddiv+0x26c>
 8001c96:	e13d      	b.n	8001f14 <__aeabi_ddiv+0x4e8>
 8001c98:	08ed      	lsrs	r5, r5, #3
 8001c9a:	4643      	mov	r3, r8
 8001c9c:	01db      	lsls	r3, r3, #7
 8001c9e:	d506      	bpl.n	8001cae <__aeabi_ddiv+0x282>
 8001ca0:	4642      	mov	r2, r8
 8001ca2:	4b44      	ldr	r3, [pc, #272]	; (8001db4 <__aeabi_ddiv+0x388>)
 8001ca4:	401a      	ands	r2, r3
 8001ca6:	4690      	mov	r8, r2
 8001ca8:	2280      	movs	r2, #128	; 0x80
 8001caa:	00d2      	lsls	r2, r2, #3
 8001cac:	445a      	add	r2, fp
 8001cae:	4b42      	ldr	r3, [pc, #264]	; (8001db8 <__aeabi_ddiv+0x38c>)
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	dd00      	ble.n	8001cb6 <__aeabi_ddiv+0x28a>
 8001cb4:	e71f      	b.n	8001af6 <__aeabi_ddiv+0xca>
 8001cb6:	4643      	mov	r3, r8
 8001cb8:	075b      	lsls	r3, r3, #29
 8001cba:	431d      	orrs	r5, r3
 8001cbc:	4643      	mov	r3, r8
 8001cbe:	0552      	lsls	r2, r2, #21
 8001cc0:	025c      	lsls	r4, r3, #9
 8001cc2:	0b24      	lsrs	r4, r4, #12
 8001cc4:	0d53      	lsrs	r3, r2, #21
 8001cc6:	e708      	b.n	8001ada <__aeabi_ddiv+0xae>
 8001cc8:	4652      	mov	r2, sl
 8001cca:	4322      	orrs	r2, r4
 8001ccc:	d100      	bne.n	8001cd0 <__aeabi_ddiv+0x2a4>
 8001cce:	e07b      	b.n	8001dc8 <__aeabi_ddiv+0x39c>
 8001cd0:	2c00      	cmp	r4, #0
 8001cd2:	d100      	bne.n	8001cd6 <__aeabi_ddiv+0x2aa>
 8001cd4:	e0fa      	b.n	8001ecc <__aeabi_ddiv+0x4a0>
 8001cd6:	0020      	movs	r0, r4
 8001cd8:	f001 fa22 	bl	8003120 <__clzsi2>
 8001cdc:	0002      	movs	r2, r0
 8001cde:	3a0b      	subs	r2, #11
 8001ce0:	231d      	movs	r3, #29
 8001ce2:	0001      	movs	r1, r0
 8001ce4:	1a9b      	subs	r3, r3, r2
 8001ce6:	4652      	mov	r2, sl
 8001ce8:	3908      	subs	r1, #8
 8001cea:	40da      	lsrs	r2, r3
 8001cec:	408c      	lsls	r4, r1
 8001cee:	4314      	orrs	r4, r2
 8001cf0:	4652      	mov	r2, sl
 8001cf2:	408a      	lsls	r2, r1
 8001cf4:	4b31      	ldr	r3, [pc, #196]	; (8001dbc <__aeabi_ddiv+0x390>)
 8001cf6:	4458      	add	r0, fp
 8001cf8:	469b      	mov	fp, r3
 8001cfa:	4483      	add	fp, r0
 8001cfc:	2000      	movs	r0, #0
 8001cfe:	e6d5      	b.n	8001aac <__aeabi_ddiv+0x80>
 8001d00:	464b      	mov	r3, r9
 8001d02:	4323      	orrs	r3, r4
 8001d04:	4698      	mov	r8, r3
 8001d06:	d044      	beq.n	8001d92 <__aeabi_ddiv+0x366>
 8001d08:	2c00      	cmp	r4, #0
 8001d0a:	d100      	bne.n	8001d0e <__aeabi_ddiv+0x2e2>
 8001d0c:	e0ce      	b.n	8001eac <__aeabi_ddiv+0x480>
 8001d0e:	0020      	movs	r0, r4
 8001d10:	f001 fa06 	bl	8003120 <__clzsi2>
 8001d14:	0001      	movs	r1, r0
 8001d16:	0002      	movs	r2, r0
 8001d18:	390b      	subs	r1, #11
 8001d1a:	231d      	movs	r3, #29
 8001d1c:	1a5b      	subs	r3, r3, r1
 8001d1e:	4649      	mov	r1, r9
 8001d20:	0010      	movs	r0, r2
 8001d22:	40d9      	lsrs	r1, r3
 8001d24:	3808      	subs	r0, #8
 8001d26:	4084      	lsls	r4, r0
 8001d28:	000b      	movs	r3, r1
 8001d2a:	464d      	mov	r5, r9
 8001d2c:	4323      	orrs	r3, r4
 8001d2e:	4698      	mov	r8, r3
 8001d30:	4085      	lsls	r5, r0
 8001d32:	4823      	ldr	r0, [pc, #140]	; (8001dc0 <__aeabi_ddiv+0x394>)
 8001d34:	1a83      	subs	r3, r0, r2
 8001d36:	469b      	mov	fp, r3
 8001d38:	2300      	movs	r3, #0
 8001d3a:	4699      	mov	r9, r3
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	e69a      	b.n	8001a76 <__aeabi_ddiv+0x4a>
 8001d40:	464b      	mov	r3, r9
 8001d42:	4323      	orrs	r3, r4
 8001d44:	4698      	mov	r8, r3
 8001d46:	d11d      	bne.n	8001d84 <__aeabi_ddiv+0x358>
 8001d48:	2308      	movs	r3, #8
 8001d4a:	4699      	mov	r9, r3
 8001d4c:	3b06      	subs	r3, #6
 8001d4e:	2500      	movs	r5, #0
 8001d50:	4683      	mov	fp, r0
 8001d52:	9300      	str	r3, [sp, #0]
 8001d54:	e68f      	b.n	8001a76 <__aeabi_ddiv+0x4a>
 8001d56:	4652      	mov	r2, sl
 8001d58:	4322      	orrs	r2, r4
 8001d5a:	d109      	bne.n	8001d70 <__aeabi_ddiv+0x344>
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	4649      	mov	r1, r9
 8001d60:	4319      	orrs	r1, r3
 8001d62:	4b18      	ldr	r3, [pc, #96]	; (8001dc4 <__aeabi_ddiv+0x398>)
 8001d64:	4689      	mov	r9, r1
 8001d66:	469c      	mov	ip, r3
 8001d68:	2400      	movs	r4, #0
 8001d6a:	2002      	movs	r0, #2
 8001d6c:	44e3      	add	fp, ip
 8001d6e:	e69d      	b.n	8001aac <__aeabi_ddiv+0x80>
 8001d70:	2303      	movs	r3, #3
 8001d72:	464a      	mov	r2, r9
 8001d74:	431a      	orrs	r2, r3
 8001d76:	4b13      	ldr	r3, [pc, #76]	; (8001dc4 <__aeabi_ddiv+0x398>)
 8001d78:	4691      	mov	r9, r2
 8001d7a:	469c      	mov	ip, r3
 8001d7c:	4652      	mov	r2, sl
 8001d7e:	2003      	movs	r0, #3
 8001d80:	44e3      	add	fp, ip
 8001d82:	e693      	b.n	8001aac <__aeabi_ddiv+0x80>
 8001d84:	230c      	movs	r3, #12
 8001d86:	4699      	mov	r9, r3
 8001d88:	3b09      	subs	r3, #9
 8001d8a:	46a0      	mov	r8, r4
 8001d8c:	4683      	mov	fp, r0
 8001d8e:	9300      	str	r3, [sp, #0]
 8001d90:	e671      	b.n	8001a76 <__aeabi_ddiv+0x4a>
 8001d92:	2304      	movs	r3, #4
 8001d94:	4699      	mov	r9, r3
 8001d96:	2300      	movs	r3, #0
 8001d98:	469b      	mov	fp, r3
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	2500      	movs	r5, #0
 8001d9e:	9300      	str	r3, [sp, #0]
 8001da0:	e669      	b.n	8001a76 <__aeabi_ddiv+0x4a>
 8001da2:	46c0      	nop			; (mov r8, r8)
 8001da4:	000007ff 	.word	0x000007ff
 8001da8:	fffffc01 	.word	0xfffffc01
 8001dac:	08012d00 	.word	0x08012d00
 8001db0:	000003ff 	.word	0x000003ff
 8001db4:	feffffff 	.word	0xfeffffff
 8001db8:	000007fe 	.word	0x000007fe
 8001dbc:	000003f3 	.word	0x000003f3
 8001dc0:	fffffc0d 	.word	0xfffffc0d
 8001dc4:	fffff801 	.word	0xfffff801
 8001dc8:	4649      	mov	r1, r9
 8001dca:	2301      	movs	r3, #1
 8001dcc:	4319      	orrs	r1, r3
 8001dce:	4689      	mov	r9, r1
 8001dd0:	2400      	movs	r4, #0
 8001dd2:	2001      	movs	r0, #1
 8001dd4:	e66a      	b.n	8001aac <__aeabi_ddiv+0x80>
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	2480      	movs	r4, #128	; 0x80
 8001dda:	469a      	mov	sl, r3
 8001ddc:	2500      	movs	r5, #0
 8001dde:	4b8a      	ldr	r3, [pc, #552]	; (8002008 <__aeabi_ddiv+0x5dc>)
 8001de0:	0324      	lsls	r4, r4, #12
 8001de2:	e67a      	b.n	8001ada <__aeabi_ddiv+0xae>
 8001de4:	2501      	movs	r5, #1
 8001de6:	426d      	negs	r5, r5
 8001de8:	2301      	movs	r3, #1
 8001dea:	1a9b      	subs	r3, r3, r2
 8001dec:	2b38      	cmp	r3, #56	; 0x38
 8001dee:	dd00      	ble.n	8001df2 <__aeabi_ddiv+0x3c6>
 8001df0:	e670      	b.n	8001ad4 <__aeabi_ddiv+0xa8>
 8001df2:	2b1f      	cmp	r3, #31
 8001df4:	dc00      	bgt.n	8001df8 <__aeabi_ddiv+0x3cc>
 8001df6:	e0bf      	b.n	8001f78 <__aeabi_ddiv+0x54c>
 8001df8:	211f      	movs	r1, #31
 8001dfa:	4249      	negs	r1, r1
 8001dfc:	1a8a      	subs	r2, r1, r2
 8001dfe:	4641      	mov	r1, r8
 8001e00:	40d1      	lsrs	r1, r2
 8001e02:	000a      	movs	r2, r1
 8001e04:	2b20      	cmp	r3, #32
 8001e06:	d004      	beq.n	8001e12 <__aeabi_ddiv+0x3e6>
 8001e08:	4641      	mov	r1, r8
 8001e0a:	4b80      	ldr	r3, [pc, #512]	; (800200c <__aeabi_ddiv+0x5e0>)
 8001e0c:	445b      	add	r3, fp
 8001e0e:	4099      	lsls	r1, r3
 8001e10:	430d      	orrs	r5, r1
 8001e12:	1e6b      	subs	r3, r5, #1
 8001e14:	419d      	sbcs	r5, r3
 8001e16:	2307      	movs	r3, #7
 8001e18:	432a      	orrs	r2, r5
 8001e1a:	001d      	movs	r5, r3
 8001e1c:	2400      	movs	r4, #0
 8001e1e:	4015      	ands	r5, r2
 8001e20:	4213      	tst	r3, r2
 8001e22:	d100      	bne.n	8001e26 <__aeabi_ddiv+0x3fa>
 8001e24:	e0d4      	b.n	8001fd0 <__aeabi_ddiv+0x5a4>
 8001e26:	210f      	movs	r1, #15
 8001e28:	2300      	movs	r3, #0
 8001e2a:	4011      	ands	r1, r2
 8001e2c:	2904      	cmp	r1, #4
 8001e2e:	d100      	bne.n	8001e32 <__aeabi_ddiv+0x406>
 8001e30:	e0cb      	b.n	8001fca <__aeabi_ddiv+0x59e>
 8001e32:	1d11      	adds	r1, r2, #4
 8001e34:	4291      	cmp	r1, r2
 8001e36:	4192      	sbcs	r2, r2
 8001e38:	4252      	negs	r2, r2
 8001e3a:	189b      	adds	r3, r3, r2
 8001e3c:	000a      	movs	r2, r1
 8001e3e:	0219      	lsls	r1, r3, #8
 8001e40:	d400      	bmi.n	8001e44 <__aeabi_ddiv+0x418>
 8001e42:	e0c2      	b.n	8001fca <__aeabi_ddiv+0x59e>
 8001e44:	2301      	movs	r3, #1
 8001e46:	2400      	movs	r4, #0
 8001e48:	2500      	movs	r5, #0
 8001e4a:	e646      	b.n	8001ada <__aeabi_ddiv+0xae>
 8001e4c:	2380      	movs	r3, #128	; 0x80
 8001e4e:	4641      	mov	r1, r8
 8001e50:	031b      	lsls	r3, r3, #12
 8001e52:	4219      	tst	r1, r3
 8001e54:	d008      	beq.n	8001e68 <__aeabi_ddiv+0x43c>
 8001e56:	421c      	tst	r4, r3
 8001e58:	d106      	bne.n	8001e68 <__aeabi_ddiv+0x43c>
 8001e5a:	431c      	orrs	r4, r3
 8001e5c:	0324      	lsls	r4, r4, #12
 8001e5e:	46ba      	mov	sl, r7
 8001e60:	0015      	movs	r5, r2
 8001e62:	4b69      	ldr	r3, [pc, #420]	; (8002008 <__aeabi_ddiv+0x5dc>)
 8001e64:	0b24      	lsrs	r4, r4, #12
 8001e66:	e638      	b.n	8001ada <__aeabi_ddiv+0xae>
 8001e68:	2480      	movs	r4, #128	; 0x80
 8001e6a:	4643      	mov	r3, r8
 8001e6c:	0324      	lsls	r4, r4, #12
 8001e6e:	431c      	orrs	r4, r3
 8001e70:	0324      	lsls	r4, r4, #12
 8001e72:	46b2      	mov	sl, r6
 8001e74:	4b64      	ldr	r3, [pc, #400]	; (8002008 <__aeabi_ddiv+0x5dc>)
 8001e76:	0b24      	lsrs	r4, r4, #12
 8001e78:	e62f      	b.n	8001ada <__aeabi_ddiv+0xae>
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d100      	bne.n	8001e80 <__aeabi_ddiv+0x454>
 8001e7e:	e703      	b.n	8001c88 <__aeabi_ddiv+0x25c>
 8001e80:	19a6      	adds	r6, r4, r6
 8001e82:	1e68      	subs	r0, r5, #1
 8001e84:	42a6      	cmp	r6, r4
 8001e86:	d200      	bcs.n	8001e8a <__aeabi_ddiv+0x45e>
 8001e88:	e08d      	b.n	8001fa6 <__aeabi_ddiv+0x57a>
 8001e8a:	428e      	cmp	r6, r1
 8001e8c:	d200      	bcs.n	8001e90 <__aeabi_ddiv+0x464>
 8001e8e:	e0a3      	b.n	8001fd8 <__aeabi_ddiv+0x5ac>
 8001e90:	d100      	bne.n	8001e94 <__aeabi_ddiv+0x468>
 8001e92:	e0b3      	b.n	8001ffc <__aeabi_ddiv+0x5d0>
 8001e94:	0005      	movs	r5, r0
 8001e96:	e6f5      	b.n	8001c84 <__aeabi_ddiv+0x258>
 8001e98:	42aa      	cmp	r2, r5
 8001e9a:	d900      	bls.n	8001e9e <__aeabi_ddiv+0x472>
 8001e9c:	e639      	b.n	8001b12 <__aeabi_ddiv+0xe6>
 8001e9e:	4643      	mov	r3, r8
 8001ea0:	07de      	lsls	r6, r3, #31
 8001ea2:	0858      	lsrs	r0, r3, #1
 8001ea4:	086b      	lsrs	r3, r5, #1
 8001ea6:	431e      	orrs	r6, r3
 8001ea8:	07ed      	lsls	r5, r5, #31
 8001eaa:	e639      	b.n	8001b20 <__aeabi_ddiv+0xf4>
 8001eac:	4648      	mov	r0, r9
 8001eae:	f001 f937 	bl	8003120 <__clzsi2>
 8001eb2:	0001      	movs	r1, r0
 8001eb4:	0002      	movs	r2, r0
 8001eb6:	3115      	adds	r1, #21
 8001eb8:	3220      	adds	r2, #32
 8001eba:	291c      	cmp	r1, #28
 8001ebc:	dc00      	bgt.n	8001ec0 <__aeabi_ddiv+0x494>
 8001ebe:	e72c      	b.n	8001d1a <__aeabi_ddiv+0x2ee>
 8001ec0:	464b      	mov	r3, r9
 8001ec2:	3808      	subs	r0, #8
 8001ec4:	4083      	lsls	r3, r0
 8001ec6:	2500      	movs	r5, #0
 8001ec8:	4698      	mov	r8, r3
 8001eca:	e732      	b.n	8001d32 <__aeabi_ddiv+0x306>
 8001ecc:	f001 f928 	bl	8003120 <__clzsi2>
 8001ed0:	0003      	movs	r3, r0
 8001ed2:	001a      	movs	r2, r3
 8001ed4:	3215      	adds	r2, #21
 8001ed6:	3020      	adds	r0, #32
 8001ed8:	2a1c      	cmp	r2, #28
 8001eda:	dc00      	bgt.n	8001ede <__aeabi_ddiv+0x4b2>
 8001edc:	e700      	b.n	8001ce0 <__aeabi_ddiv+0x2b4>
 8001ede:	4654      	mov	r4, sl
 8001ee0:	3b08      	subs	r3, #8
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	409c      	lsls	r4, r3
 8001ee6:	e705      	b.n	8001cf4 <__aeabi_ddiv+0x2c8>
 8001ee8:	1936      	adds	r6, r6, r4
 8001eea:	3b01      	subs	r3, #1
 8001eec:	42b4      	cmp	r4, r6
 8001eee:	d900      	bls.n	8001ef2 <__aeabi_ddiv+0x4c6>
 8001ef0:	e6a6      	b.n	8001c40 <__aeabi_ddiv+0x214>
 8001ef2:	42b2      	cmp	r2, r6
 8001ef4:	d800      	bhi.n	8001ef8 <__aeabi_ddiv+0x4cc>
 8001ef6:	e6a3      	b.n	8001c40 <__aeabi_ddiv+0x214>
 8001ef8:	1e83      	subs	r3, r0, #2
 8001efa:	1936      	adds	r6, r6, r4
 8001efc:	e6a0      	b.n	8001c40 <__aeabi_ddiv+0x214>
 8001efe:	1909      	adds	r1, r1, r4
 8001f00:	3d01      	subs	r5, #1
 8001f02:	428c      	cmp	r4, r1
 8001f04:	d900      	bls.n	8001f08 <__aeabi_ddiv+0x4dc>
 8001f06:	e68d      	b.n	8001c24 <__aeabi_ddiv+0x1f8>
 8001f08:	428a      	cmp	r2, r1
 8001f0a:	d800      	bhi.n	8001f0e <__aeabi_ddiv+0x4e2>
 8001f0c:	e68a      	b.n	8001c24 <__aeabi_ddiv+0x1f8>
 8001f0e:	1e85      	subs	r5, r0, #2
 8001f10:	1909      	adds	r1, r1, r4
 8001f12:	e687      	b.n	8001c24 <__aeabi_ddiv+0x1f8>
 8001f14:	230f      	movs	r3, #15
 8001f16:	402b      	ands	r3, r5
 8001f18:	2b04      	cmp	r3, #4
 8001f1a:	d100      	bne.n	8001f1e <__aeabi_ddiv+0x4f2>
 8001f1c:	e6bc      	b.n	8001c98 <__aeabi_ddiv+0x26c>
 8001f1e:	2305      	movs	r3, #5
 8001f20:	425b      	negs	r3, r3
 8001f22:	42ab      	cmp	r3, r5
 8001f24:	419b      	sbcs	r3, r3
 8001f26:	3504      	adds	r5, #4
 8001f28:	425b      	negs	r3, r3
 8001f2a:	08ed      	lsrs	r5, r5, #3
 8001f2c:	4498      	add	r8, r3
 8001f2e:	e6b4      	b.n	8001c9a <__aeabi_ddiv+0x26e>
 8001f30:	42af      	cmp	r7, r5
 8001f32:	d900      	bls.n	8001f36 <__aeabi_ddiv+0x50a>
 8001f34:	e660      	b.n	8001bf8 <__aeabi_ddiv+0x1cc>
 8001f36:	4282      	cmp	r2, r0
 8001f38:	d804      	bhi.n	8001f44 <__aeabi_ddiv+0x518>
 8001f3a:	d000      	beq.n	8001f3e <__aeabi_ddiv+0x512>
 8001f3c:	e65c      	b.n	8001bf8 <__aeabi_ddiv+0x1cc>
 8001f3e:	42ae      	cmp	r6, r5
 8001f40:	d800      	bhi.n	8001f44 <__aeabi_ddiv+0x518>
 8001f42:	e659      	b.n	8001bf8 <__aeabi_ddiv+0x1cc>
 8001f44:	2302      	movs	r3, #2
 8001f46:	425b      	negs	r3, r3
 8001f48:	469c      	mov	ip, r3
 8001f4a:	9b00      	ldr	r3, [sp, #0]
 8001f4c:	44e0      	add	r8, ip
 8001f4e:	469c      	mov	ip, r3
 8001f50:	4465      	add	r5, ip
 8001f52:	429d      	cmp	r5, r3
 8001f54:	419b      	sbcs	r3, r3
 8001f56:	425b      	negs	r3, r3
 8001f58:	191b      	adds	r3, r3, r4
 8001f5a:	18c0      	adds	r0, r0, r3
 8001f5c:	e64d      	b.n	8001bfa <__aeabi_ddiv+0x1ce>
 8001f5e:	428a      	cmp	r2, r1
 8001f60:	d800      	bhi.n	8001f64 <__aeabi_ddiv+0x538>
 8001f62:	e60e      	b.n	8001b82 <__aeabi_ddiv+0x156>
 8001f64:	1e83      	subs	r3, r0, #2
 8001f66:	1909      	adds	r1, r1, r4
 8001f68:	e60b      	b.n	8001b82 <__aeabi_ddiv+0x156>
 8001f6a:	428a      	cmp	r2, r1
 8001f6c:	d800      	bhi.n	8001f70 <__aeabi_ddiv+0x544>
 8001f6e:	e5f4      	b.n	8001b5a <__aeabi_ddiv+0x12e>
 8001f70:	1e83      	subs	r3, r0, #2
 8001f72:	4698      	mov	r8, r3
 8001f74:	1909      	adds	r1, r1, r4
 8001f76:	e5f0      	b.n	8001b5a <__aeabi_ddiv+0x12e>
 8001f78:	4925      	ldr	r1, [pc, #148]	; (8002010 <__aeabi_ddiv+0x5e4>)
 8001f7a:	0028      	movs	r0, r5
 8001f7c:	4459      	add	r1, fp
 8001f7e:	408d      	lsls	r5, r1
 8001f80:	4642      	mov	r2, r8
 8001f82:	408a      	lsls	r2, r1
 8001f84:	1e69      	subs	r1, r5, #1
 8001f86:	418d      	sbcs	r5, r1
 8001f88:	4641      	mov	r1, r8
 8001f8a:	40d8      	lsrs	r0, r3
 8001f8c:	40d9      	lsrs	r1, r3
 8001f8e:	4302      	orrs	r2, r0
 8001f90:	432a      	orrs	r2, r5
 8001f92:	000b      	movs	r3, r1
 8001f94:	0751      	lsls	r1, r2, #29
 8001f96:	d100      	bne.n	8001f9a <__aeabi_ddiv+0x56e>
 8001f98:	e751      	b.n	8001e3e <__aeabi_ddiv+0x412>
 8001f9a:	210f      	movs	r1, #15
 8001f9c:	4011      	ands	r1, r2
 8001f9e:	2904      	cmp	r1, #4
 8001fa0:	d000      	beq.n	8001fa4 <__aeabi_ddiv+0x578>
 8001fa2:	e746      	b.n	8001e32 <__aeabi_ddiv+0x406>
 8001fa4:	e74b      	b.n	8001e3e <__aeabi_ddiv+0x412>
 8001fa6:	0005      	movs	r5, r0
 8001fa8:	428e      	cmp	r6, r1
 8001faa:	d000      	beq.n	8001fae <__aeabi_ddiv+0x582>
 8001fac:	e66a      	b.n	8001c84 <__aeabi_ddiv+0x258>
 8001fae:	9a00      	ldr	r2, [sp, #0]
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d000      	beq.n	8001fb6 <__aeabi_ddiv+0x58a>
 8001fb4:	e666      	b.n	8001c84 <__aeabi_ddiv+0x258>
 8001fb6:	e667      	b.n	8001c88 <__aeabi_ddiv+0x25c>
 8001fb8:	4a16      	ldr	r2, [pc, #88]	; (8002014 <__aeabi_ddiv+0x5e8>)
 8001fba:	445a      	add	r2, fp
 8001fbc:	2a00      	cmp	r2, #0
 8001fbe:	dc00      	bgt.n	8001fc2 <__aeabi_ddiv+0x596>
 8001fc0:	e710      	b.n	8001de4 <__aeabi_ddiv+0x3b8>
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	2500      	movs	r5, #0
 8001fc6:	4498      	add	r8, r3
 8001fc8:	e667      	b.n	8001c9a <__aeabi_ddiv+0x26e>
 8001fca:	075d      	lsls	r5, r3, #29
 8001fcc:	025b      	lsls	r3, r3, #9
 8001fce:	0b1c      	lsrs	r4, r3, #12
 8001fd0:	08d2      	lsrs	r2, r2, #3
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	4315      	orrs	r5, r2
 8001fd6:	e580      	b.n	8001ada <__aeabi_ddiv+0xae>
 8001fd8:	9800      	ldr	r0, [sp, #0]
 8001fda:	3d02      	subs	r5, #2
 8001fdc:	0042      	lsls	r2, r0, #1
 8001fde:	4282      	cmp	r2, r0
 8001fe0:	41bf      	sbcs	r7, r7
 8001fe2:	427f      	negs	r7, r7
 8001fe4:	193c      	adds	r4, r7, r4
 8001fe6:	1936      	adds	r6, r6, r4
 8001fe8:	9200      	str	r2, [sp, #0]
 8001fea:	e7dd      	b.n	8001fa8 <__aeabi_ddiv+0x57c>
 8001fec:	2480      	movs	r4, #128	; 0x80
 8001fee:	4643      	mov	r3, r8
 8001ff0:	0324      	lsls	r4, r4, #12
 8001ff2:	431c      	orrs	r4, r3
 8001ff4:	0324      	lsls	r4, r4, #12
 8001ff6:	4b04      	ldr	r3, [pc, #16]	; (8002008 <__aeabi_ddiv+0x5dc>)
 8001ff8:	0b24      	lsrs	r4, r4, #12
 8001ffa:	e56e      	b.n	8001ada <__aeabi_ddiv+0xae>
 8001ffc:	9a00      	ldr	r2, [sp, #0]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d3ea      	bcc.n	8001fd8 <__aeabi_ddiv+0x5ac>
 8002002:	0005      	movs	r5, r0
 8002004:	e7d3      	b.n	8001fae <__aeabi_ddiv+0x582>
 8002006:	46c0      	nop			; (mov r8, r8)
 8002008:	000007ff 	.word	0x000007ff
 800200c:	0000043e 	.word	0x0000043e
 8002010:	0000041e 	.word	0x0000041e
 8002014:	000003ff 	.word	0x000003ff

08002018 <__eqdf2>:
 8002018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800201a:	464e      	mov	r6, r9
 800201c:	4645      	mov	r5, r8
 800201e:	46de      	mov	lr, fp
 8002020:	4657      	mov	r7, sl
 8002022:	4690      	mov	r8, r2
 8002024:	b5e0      	push	{r5, r6, r7, lr}
 8002026:	0017      	movs	r7, r2
 8002028:	031a      	lsls	r2, r3, #12
 800202a:	0b12      	lsrs	r2, r2, #12
 800202c:	0005      	movs	r5, r0
 800202e:	4684      	mov	ip, r0
 8002030:	4819      	ldr	r0, [pc, #100]	; (8002098 <__eqdf2+0x80>)
 8002032:	030e      	lsls	r6, r1, #12
 8002034:	004c      	lsls	r4, r1, #1
 8002036:	4691      	mov	r9, r2
 8002038:	005a      	lsls	r2, r3, #1
 800203a:	0fdb      	lsrs	r3, r3, #31
 800203c:	469b      	mov	fp, r3
 800203e:	0b36      	lsrs	r6, r6, #12
 8002040:	0d64      	lsrs	r4, r4, #21
 8002042:	0fc9      	lsrs	r1, r1, #31
 8002044:	0d52      	lsrs	r2, r2, #21
 8002046:	4284      	cmp	r4, r0
 8002048:	d019      	beq.n	800207e <__eqdf2+0x66>
 800204a:	4282      	cmp	r2, r0
 800204c:	d010      	beq.n	8002070 <__eqdf2+0x58>
 800204e:	2001      	movs	r0, #1
 8002050:	4294      	cmp	r4, r2
 8002052:	d10e      	bne.n	8002072 <__eqdf2+0x5a>
 8002054:	454e      	cmp	r6, r9
 8002056:	d10c      	bne.n	8002072 <__eqdf2+0x5a>
 8002058:	2001      	movs	r0, #1
 800205a:	45c4      	cmp	ip, r8
 800205c:	d109      	bne.n	8002072 <__eqdf2+0x5a>
 800205e:	4559      	cmp	r1, fp
 8002060:	d017      	beq.n	8002092 <__eqdf2+0x7a>
 8002062:	2c00      	cmp	r4, #0
 8002064:	d105      	bne.n	8002072 <__eqdf2+0x5a>
 8002066:	0030      	movs	r0, r6
 8002068:	4328      	orrs	r0, r5
 800206a:	1e43      	subs	r3, r0, #1
 800206c:	4198      	sbcs	r0, r3
 800206e:	e000      	b.n	8002072 <__eqdf2+0x5a>
 8002070:	2001      	movs	r0, #1
 8002072:	bcf0      	pop	{r4, r5, r6, r7}
 8002074:	46bb      	mov	fp, r7
 8002076:	46b2      	mov	sl, r6
 8002078:	46a9      	mov	r9, r5
 800207a:	46a0      	mov	r8, r4
 800207c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800207e:	0033      	movs	r3, r6
 8002080:	2001      	movs	r0, #1
 8002082:	432b      	orrs	r3, r5
 8002084:	d1f5      	bne.n	8002072 <__eqdf2+0x5a>
 8002086:	42a2      	cmp	r2, r4
 8002088:	d1f3      	bne.n	8002072 <__eqdf2+0x5a>
 800208a:	464b      	mov	r3, r9
 800208c:	433b      	orrs	r3, r7
 800208e:	d1f0      	bne.n	8002072 <__eqdf2+0x5a>
 8002090:	e7e2      	b.n	8002058 <__eqdf2+0x40>
 8002092:	2000      	movs	r0, #0
 8002094:	e7ed      	b.n	8002072 <__eqdf2+0x5a>
 8002096:	46c0      	nop			; (mov r8, r8)
 8002098:	000007ff 	.word	0x000007ff

0800209c <__gedf2>:
 800209c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800209e:	4647      	mov	r7, r8
 80020a0:	46ce      	mov	lr, r9
 80020a2:	0004      	movs	r4, r0
 80020a4:	0018      	movs	r0, r3
 80020a6:	0016      	movs	r6, r2
 80020a8:	031b      	lsls	r3, r3, #12
 80020aa:	0b1b      	lsrs	r3, r3, #12
 80020ac:	4d2d      	ldr	r5, [pc, #180]	; (8002164 <__gedf2+0xc8>)
 80020ae:	004a      	lsls	r2, r1, #1
 80020b0:	4699      	mov	r9, r3
 80020b2:	b580      	push	{r7, lr}
 80020b4:	0043      	lsls	r3, r0, #1
 80020b6:	030f      	lsls	r7, r1, #12
 80020b8:	46a4      	mov	ip, r4
 80020ba:	46b0      	mov	r8, r6
 80020bc:	0b3f      	lsrs	r7, r7, #12
 80020be:	0d52      	lsrs	r2, r2, #21
 80020c0:	0fc9      	lsrs	r1, r1, #31
 80020c2:	0d5b      	lsrs	r3, r3, #21
 80020c4:	0fc0      	lsrs	r0, r0, #31
 80020c6:	42aa      	cmp	r2, r5
 80020c8:	d021      	beq.n	800210e <__gedf2+0x72>
 80020ca:	42ab      	cmp	r3, r5
 80020cc:	d013      	beq.n	80020f6 <__gedf2+0x5a>
 80020ce:	2a00      	cmp	r2, #0
 80020d0:	d122      	bne.n	8002118 <__gedf2+0x7c>
 80020d2:	433c      	orrs	r4, r7
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d102      	bne.n	80020de <__gedf2+0x42>
 80020d8:	464d      	mov	r5, r9
 80020da:	432e      	orrs	r6, r5
 80020dc:	d022      	beq.n	8002124 <__gedf2+0x88>
 80020de:	2c00      	cmp	r4, #0
 80020e0:	d010      	beq.n	8002104 <__gedf2+0x68>
 80020e2:	4281      	cmp	r1, r0
 80020e4:	d022      	beq.n	800212c <__gedf2+0x90>
 80020e6:	2002      	movs	r0, #2
 80020e8:	3901      	subs	r1, #1
 80020ea:	4008      	ands	r0, r1
 80020ec:	3801      	subs	r0, #1
 80020ee:	bcc0      	pop	{r6, r7}
 80020f0:	46b9      	mov	r9, r7
 80020f2:	46b0      	mov	r8, r6
 80020f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020f6:	464d      	mov	r5, r9
 80020f8:	432e      	orrs	r6, r5
 80020fa:	d129      	bne.n	8002150 <__gedf2+0xb4>
 80020fc:	2a00      	cmp	r2, #0
 80020fe:	d1f0      	bne.n	80020e2 <__gedf2+0x46>
 8002100:	433c      	orrs	r4, r7
 8002102:	d1ee      	bne.n	80020e2 <__gedf2+0x46>
 8002104:	2800      	cmp	r0, #0
 8002106:	d1f2      	bne.n	80020ee <__gedf2+0x52>
 8002108:	2001      	movs	r0, #1
 800210a:	4240      	negs	r0, r0
 800210c:	e7ef      	b.n	80020ee <__gedf2+0x52>
 800210e:	003d      	movs	r5, r7
 8002110:	4325      	orrs	r5, r4
 8002112:	d11d      	bne.n	8002150 <__gedf2+0xb4>
 8002114:	4293      	cmp	r3, r2
 8002116:	d0ee      	beq.n	80020f6 <__gedf2+0x5a>
 8002118:	2b00      	cmp	r3, #0
 800211a:	d1e2      	bne.n	80020e2 <__gedf2+0x46>
 800211c:	464c      	mov	r4, r9
 800211e:	4326      	orrs	r6, r4
 8002120:	d1df      	bne.n	80020e2 <__gedf2+0x46>
 8002122:	e7e0      	b.n	80020e6 <__gedf2+0x4a>
 8002124:	2000      	movs	r0, #0
 8002126:	2c00      	cmp	r4, #0
 8002128:	d0e1      	beq.n	80020ee <__gedf2+0x52>
 800212a:	e7dc      	b.n	80020e6 <__gedf2+0x4a>
 800212c:	429a      	cmp	r2, r3
 800212e:	dc0a      	bgt.n	8002146 <__gedf2+0xaa>
 8002130:	dbe8      	blt.n	8002104 <__gedf2+0x68>
 8002132:	454f      	cmp	r7, r9
 8002134:	d8d7      	bhi.n	80020e6 <__gedf2+0x4a>
 8002136:	d00e      	beq.n	8002156 <__gedf2+0xba>
 8002138:	2000      	movs	r0, #0
 800213a:	454f      	cmp	r7, r9
 800213c:	d2d7      	bcs.n	80020ee <__gedf2+0x52>
 800213e:	2900      	cmp	r1, #0
 8002140:	d0e2      	beq.n	8002108 <__gedf2+0x6c>
 8002142:	0008      	movs	r0, r1
 8002144:	e7d3      	b.n	80020ee <__gedf2+0x52>
 8002146:	4243      	negs	r3, r0
 8002148:	4158      	adcs	r0, r3
 800214a:	0040      	lsls	r0, r0, #1
 800214c:	3801      	subs	r0, #1
 800214e:	e7ce      	b.n	80020ee <__gedf2+0x52>
 8002150:	2002      	movs	r0, #2
 8002152:	4240      	negs	r0, r0
 8002154:	e7cb      	b.n	80020ee <__gedf2+0x52>
 8002156:	45c4      	cmp	ip, r8
 8002158:	d8c5      	bhi.n	80020e6 <__gedf2+0x4a>
 800215a:	2000      	movs	r0, #0
 800215c:	45c4      	cmp	ip, r8
 800215e:	d2c6      	bcs.n	80020ee <__gedf2+0x52>
 8002160:	e7ed      	b.n	800213e <__gedf2+0xa2>
 8002162:	46c0      	nop			; (mov r8, r8)
 8002164:	000007ff 	.word	0x000007ff

08002168 <__ledf2>:
 8002168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800216a:	4647      	mov	r7, r8
 800216c:	46ce      	mov	lr, r9
 800216e:	0004      	movs	r4, r0
 8002170:	0018      	movs	r0, r3
 8002172:	0016      	movs	r6, r2
 8002174:	031b      	lsls	r3, r3, #12
 8002176:	0b1b      	lsrs	r3, r3, #12
 8002178:	4d2c      	ldr	r5, [pc, #176]	; (800222c <__ledf2+0xc4>)
 800217a:	004a      	lsls	r2, r1, #1
 800217c:	4699      	mov	r9, r3
 800217e:	b580      	push	{r7, lr}
 8002180:	0043      	lsls	r3, r0, #1
 8002182:	030f      	lsls	r7, r1, #12
 8002184:	46a4      	mov	ip, r4
 8002186:	46b0      	mov	r8, r6
 8002188:	0b3f      	lsrs	r7, r7, #12
 800218a:	0d52      	lsrs	r2, r2, #21
 800218c:	0fc9      	lsrs	r1, r1, #31
 800218e:	0d5b      	lsrs	r3, r3, #21
 8002190:	0fc0      	lsrs	r0, r0, #31
 8002192:	42aa      	cmp	r2, r5
 8002194:	d00d      	beq.n	80021b2 <__ledf2+0x4a>
 8002196:	42ab      	cmp	r3, r5
 8002198:	d010      	beq.n	80021bc <__ledf2+0x54>
 800219a:	2a00      	cmp	r2, #0
 800219c:	d127      	bne.n	80021ee <__ledf2+0x86>
 800219e:	433c      	orrs	r4, r7
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d111      	bne.n	80021c8 <__ledf2+0x60>
 80021a4:	464d      	mov	r5, r9
 80021a6:	432e      	orrs	r6, r5
 80021a8:	d10e      	bne.n	80021c8 <__ledf2+0x60>
 80021aa:	2000      	movs	r0, #0
 80021ac:	2c00      	cmp	r4, #0
 80021ae:	d015      	beq.n	80021dc <__ledf2+0x74>
 80021b0:	e00e      	b.n	80021d0 <__ledf2+0x68>
 80021b2:	003d      	movs	r5, r7
 80021b4:	4325      	orrs	r5, r4
 80021b6:	d110      	bne.n	80021da <__ledf2+0x72>
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d118      	bne.n	80021ee <__ledf2+0x86>
 80021bc:	464d      	mov	r5, r9
 80021be:	432e      	orrs	r6, r5
 80021c0:	d10b      	bne.n	80021da <__ledf2+0x72>
 80021c2:	2a00      	cmp	r2, #0
 80021c4:	d102      	bne.n	80021cc <__ledf2+0x64>
 80021c6:	433c      	orrs	r4, r7
 80021c8:	2c00      	cmp	r4, #0
 80021ca:	d00b      	beq.n	80021e4 <__ledf2+0x7c>
 80021cc:	4281      	cmp	r1, r0
 80021ce:	d014      	beq.n	80021fa <__ledf2+0x92>
 80021d0:	2002      	movs	r0, #2
 80021d2:	3901      	subs	r1, #1
 80021d4:	4008      	ands	r0, r1
 80021d6:	3801      	subs	r0, #1
 80021d8:	e000      	b.n	80021dc <__ledf2+0x74>
 80021da:	2002      	movs	r0, #2
 80021dc:	bcc0      	pop	{r6, r7}
 80021de:	46b9      	mov	r9, r7
 80021e0:	46b0      	mov	r8, r6
 80021e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021e4:	2800      	cmp	r0, #0
 80021e6:	d1f9      	bne.n	80021dc <__ledf2+0x74>
 80021e8:	2001      	movs	r0, #1
 80021ea:	4240      	negs	r0, r0
 80021ec:	e7f6      	b.n	80021dc <__ledf2+0x74>
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d1ec      	bne.n	80021cc <__ledf2+0x64>
 80021f2:	464c      	mov	r4, r9
 80021f4:	4326      	orrs	r6, r4
 80021f6:	d1e9      	bne.n	80021cc <__ledf2+0x64>
 80021f8:	e7ea      	b.n	80021d0 <__ledf2+0x68>
 80021fa:	429a      	cmp	r2, r3
 80021fc:	dd04      	ble.n	8002208 <__ledf2+0xa0>
 80021fe:	4243      	negs	r3, r0
 8002200:	4158      	adcs	r0, r3
 8002202:	0040      	lsls	r0, r0, #1
 8002204:	3801      	subs	r0, #1
 8002206:	e7e9      	b.n	80021dc <__ledf2+0x74>
 8002208:	429a      	cmp	r2, r3
 800220a:	dbeb      	blt.n	80021e4 <__ledf2+0x7c>
 800220c:	454f      	cmp	r7, r9
 800220e:	d8df      	bhi.n	80021d0 <__ledf2+0x68>
 8002210:	d006      	beq.n	8002220 <__ledf2+0xb8>
 8002212:	2000      	movs	r0, #0
 8002214:	454f      	cmp	r7, r9
 8002216:	d2e1      	bcs.n	80021dc <__ledf2+0x74>
 8002218:	2900      	cmp	r1, #0
 800221a:	d0e5      	beq.n	80021e8 <__ledf2+0x80>
 800221c:	0008      	movs	r0, r1
 800221e:	e7dd      	b.n	80021dc <__ledf2+0x74>
 8002220:	45c4      	cmp	ip, r8
 8002222:	d8d5      	bhi.n	80021d0 <__ledf2+0x68>
 8002224:	2000      	movs	r0, #0
 8002226:	45c4      	cmp	ip, r8
 8002228:	d2d8      	bcs.n	80021dc <__ledf2+0x74>
 800222a:	e7f5      	b.n	8002218 <__ledf2+0xb0>
 800222c:	000007ff 	.word	0x000007ff

08002230 <__aeabi_dmul>:
 8002230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002232:	4657      	mov	r7, sl
 8002234:	464e      	mov	r6, r9
 8002236:	4645      	mov	r5, r8
 8002238:	46de      	mov	lr, fp
 800223a:	b5e0      	push	{r5, r6, r7, lr}
 800223c:	4698      	mov	r8, r3
 800223e:	030c      	lsls	r4, r1, #12
 8002240:	004b      	lsls	r3, r1, #1
 8002242:	0006      	movs	r6, r0
 8002244:	4692      	mov	sl, r2
 8002246:	b087      	sub	sp, #28
 8002248:	0b24      	lsrs	r4, r4, #12
 800224a:	0d5b      	lsrs	r3, r3, #21
 800224c:	0fcf      	lsrs	r7, r1, #31
 800224e:	2b00      	cmp	r3, #0
 8002250:	d100      	bne.n	8002254 <__aeabi_dmul+0x24>
 8002252:	e15c      	b.n	800250e <__aeabi_dmul+0x2de>
 8002254:	4ad9      	ldr	r2, [pc, #868]	; (80025bc <__aeabi_dmul+0x38c>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d100      	bne.n	800225c <__aeabi_dmul+0x2c>
 800225a:	e175      	b.n	8002548 <__aeabi_dmul+0x318>
 800225c:	0f42      	lsrs	r2, r0, #29
 800225e:	00e4      	lsls	r4, r4, #3
 8002260:	4314      	orrs	r4, r2
 8002262:	2280      	movs	r2, #128	; 0x80
 8002264:	0412      	lsls	r2, r2, #16
 8002266:	4314      	orrs	r4, r2
 8002268:	4ad5      	ldr	r2, [pc, #852]	; (80025c0 <__aeabi_dmul+0x390>)
 800226a:	00c5      	lsls	r5, r0, #3
 800226c:	4694      	mov	ip, r2
 800226e:	4463      	add	r3, ip
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	2300      	movs	r3, #0
 8002274:	4699      	mov	r9, r3
 8002276:	469b      	mov	fp, r3
 8002278:	4643      	mov	r3, r8
 800227a:	4642      	mov	r2, r8
 800227c:	031e      	lsls	r6, r3, #12
 800227e:	0fd2      	lsrs	r2, r2, #31
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	4650      	mov	r0, sl
 8002284:	4690      	mov	r8, r2
 8002286:	0b36      	lsrs	r6, r6, #12
 8002288:	0d5b      	lsrs	r3, r3, #21
 800228a:	d100      	bne.n	800228e <__aeabi_dmul+0x5e>
 800228c:	e120      	b.n	80024d0 <__aeabi_dmul+0x2a0>
 800228e:	4acb      	ldr	r2, [pc, #812]	; (80025bc <__aeabi_dmul+0x38c>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d100      	bne.n	8002296 <__aeabi_dmul+0x66>
 8002294:	e162      	b.n	800255c <__aeabi_dmul+0x32c>
 8002296:	49ca      	ldr	r1, [pc, #808]	; (80025c0 <__aeabi_dmul+0x390>)
 8002298:	0f42      	lsrs	r2, r0, #29
 800229a:	468c      	mov	ip, r1
 800229c:	9900      	ldr	r1, [sp, #0]
 800229e:	4463      	add	r3, ip
 80022a0:	00f6      	lsls	r6, r6, #3
 80022a2:	468c      	mov	ip, r1
 80022a4:	4316      	orrs	r6, r2
 80022a6:	2280      	movs	r2, #128	; 0x80
 80022a8:	449c      	add	ip, r3
 80022aa:	0412      	lsls	r2, r2, #16
 80022ac:	4663      	mov	r3, ip
 80022ae:	4316      	orrs	r6, r2
 80022b0:	00c2      	lsls	r2, r0, #3
 80022b2:	2000      	movs	r0, #0
 80022b4:	9300      	str	r3, [sp, #0]
 80022b6:	9900      	ldr	r1, [sp, #0]
 80022b8:	4643      	mov	r3, r8
 80022ba:	3101      	adds	r1, #1
 80022bc:	468c      	mov	ip, r1
 80022be:	4649      	mov	r1, r9
 80022c0:	407b      	eors	r3, r7
 80022c2:	9301      	str	r3, [sp, #4]
 80022c4:	290f      	cmp	r1, #15
 80022c6:	d826      	bhi.n	8002316 <__aeabi_dmul+0xe6>
 80022c8:	4bbe      	ldr	r3, [pc, #760]	; (80025c4 <__aeabi_dmul+0x394>)
 80022ca:	0089      	lsls	r1, r1, #2
 80022cc:	5859      	ldr	r1, [r3, r1]
 80022ce:	468f      	mov	pc, r1
 80022d0:	4643      	mov	r3, r8
 80022d2:	9301      	str	r3, [sp, #4]
 80022d4:	0034      	movs	r4, r6
 80022d6:	0015      	movs	r5, r2
 80022d8:	4683      	mov	fp, r0
 80022da:	465b      	mov	r3, fp
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d016      	beq.n	800230e <__aeabi_dmul+0xde>
 80022e0:	2b03      	cmp	r3, #3
 80022e2:	d100      	bne.n	80022e6 <__aeabi_dmul+0xb6>
 80022e4:	e203      	b.n	80026ee <__aeabi_dmul+0x4be>
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d000      	beq.n	80022ec <__aeabi_dmul+0xbc>
 80022ea:	e0cd      	b.n	8002488 <__aeabi_dmul+0x258>
 80022ec:	2200      	movs	r2, #0
 80022ee:	2400      	movs	r4, #0
 80022f0:	2500      	movs	r5, #0
 80022f2:	9b01      	ldr	r3, [sp, #4]
 80022f4:	0512      	lsls	r2, r2, #20
 80022f6:	4322      	orrs	r2, r4
 80022f8:	07db      	lsls	r3, r3, #31
 80022fa:	431a      	orrs	r2, r3
 80022fc:	0028      	movs	r0, r5
 80022fe:	0011      	movs	r1, r2
 8002300:	b007      	add	sp, #28
 8002302:	bcf0      	pop	{r4, r5, r6, r7}
 8002304:	46bb      	mov	fp, r7
 8002306:	46b2      	mov	sl, r6
 8002308:	46a9      	mov	r9, r5
 800230a:	46a0      	mov	r8, r4
 800230c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800230e:	2400      	movs	r4, #0
 8002310:	2500      	movs	r5, #0
 8002312:	4aaa      	ldr	r2, [pc, #680]	; (80025bc <__aeabi_dmul+0x38c>)
 8002314:	e7ed      	b.n	80022f2 <__aeabi_dmul+0xc2>
 8002316:	0c28      	lsrs	r0, r5, #16
 8002318:	042d      	lsls	r5, r5, #16
 800231a:	0c2d      	lsrs	r5, r5, #16
 800231c:	002b      	movs	r3, r5
 800231e:	0c11      	lsrs	r1, r2, #16
 8002320:	0412      	lsls	r2, r2, #16
 8002322:	0c12      	lsrs	r2, r2, #16
 8002324:	4353      	muls	r3, r2
 8002326:	4698      	mov	r8, r3
 8002328:	0013      	movs	r3, r2
 800232a:	002f      	movs	r7, r5
 800232c:	4343      	muls	r3, r0
 800232e:	4699      	mov	r9, r3
 8002330:	434f      	muls	r7, r1
 8002332:	444f      	add	r7, r9
 8002334:	46bb      	mov	fp, r7
 8002336:	4647      	mov	r7, r8
 8002338:	000b      	movs	r3, r1
 800233a:	0c3f      	lsrs	r7, r7, #16
 800233c:	46ba      	mov	sl, r7
 800233e:	4343      	muls	r3, r0
 8002340:	44da      	add	sl, fp
 8002342:	9302      	str	r3, [sp, #8]
 8002344:	45d1      	cmp	r9, sl
 8002346:	d904      	bls.n	8002352 <__aeabi_dmul+0x122>
 8002348:	2780      	movs	r7, #128	; 0x80
 800234a:	027f      	lsls	r7, r7, #9
 800234c:	46b9      	mov	r9, r7
 800234e:	444b      	add	r3, r9
 8002350:	9302      	str	r3, [sp, #8]
 8002352:	4653      	mov	r3, sl
 8002354:	0c1b      	lsrs	r3, r3, #16
 8002356:	469b      	mov	fp, r3
 8002358:	4653      	mov	r3, sl
 800235a:	041f      	lsls	r7, r3, #16
 800235c:	4643      	mov	r3, r8
 800235e:	041b      	lsls	r3, r3, #16
 8002360:	0c1b      	lsrs	r3, r3, #16
 8002362:	4698      	mov	r8, r3
 8002364:	003b      	movs	r3, r7
 8002366:	4443      	add	r3, r8
 8002368:	9304      	str	r3, [sp, #16]
 800236a:	0c33      	lsrs	r3, r6, #16
 800236c:	0436      	lsls	r6, r6, #16
 800236e:	0c36      	lsrs	r6, r6, #16
 8002370:	4698      	mov	r8, r3
 8002372:	0033      	movs	r3, r6
 8002374:	4343      	muls	r3, r0
 8002376:	4699      	mov	r9, r3
 8002378:	4643      	mov	r3, r8
 800237a:	4343      	muls	r3, r0
 800237c:	002f      	movs	r7, r5
 800237e:	469a      	mov	sl, r3
 8002380:	4643      	mov	r3, r8
 8002382:	4377      	muls	r7, r6
 8002384:	435d      	muls	r5, r3
 8002386:	0c38      	lsrs	r0, r7, #16
 8002388:	444d      	add	r5, r9
 800238a:	1945      	adds	r5, r0, r5
 800238c:	45a9      	cmp	r9, r5
 800238e:	d903      	bls.n	8002398 <__aeabi_dmul+0x168>
 8002390:	2380      	movs	r3, #128	; 0x80
 8002392:	025b      	lsls	r3, r3, #9
 8002394:	4699      	mov	r9, r3
 8002396:	44ca      	add	sl, r9
 8002398:	043f      	lsls	r7, r7, #16
 800239a:	0c28      	lsrs	r0, r5, #16
 800239c:	0c3f      	lsrs	r7, r7, #16
 800239e:	042d      	lsls	r5, r5, #16
 80023a0:	19ed      	adds	r5, r5, r7
 80023a2:	0c27      	lsrs	r7, r4, #16
 80023a4:	0424      	lsls	r4, r4, #16
 80023a6:	0c24      	lsrs	r4, r4, #16
 80023a8:	0003      	movs	r3, r0
 80023aa:	0020      	movs	r0, r4
 80023ac:	4350      	muls	r0, r2
 80023ae:	437a      	muls	r2, r7
 80023b0:	4691      	mov	r9, r2
 80023b2:	003a      	movs	r2, r7
 80023b4:	4453      	add	r3, sl
 80023b6:	9305      	str	r3, [sp, #20]
 80023b8:	0c03      	lsrs	r3, r0, #16
 80023ba:	469a      	mov	sl, r3
 80023bc:	434a      	muls	r2, r1
 80023be:	4361      	muls	r1, r4
 80023c0:	4449      	add	r1, r9
 80023c2:	4451      	add	r1, sl
 80023c4:	44ab      	add	fp, r5
 80023c6:	4589      	cmp	r9, r1
 80023c8:	d903      	bls.n	80023d2 <__aeabi_dmul+0x1a2>
 80023ca:	2380      	movs	r3, #128	; 0x80
 80023cc:	025b      	lsls	r3, r3, #9
 80023ce:	4699      	mov	r9, r3
 80023d0:	444a      	add	r2, r9
 80023d2:	0400      	lsls	r0, r0, #16
 80023d4:	0c0b      	lsrs	r3, r1, #16
 80023d6:	0c00      	lsrs	r0, r0, #16
 80023d8:	0409      	lsls	r1, r1, #16
 80023da:	1809      	adds	r1, r1, r0
 80023dc:	0020      	movs	r0, r4
 80023de:	4699      	mov	r9, r3
 80023e0:	4643      	mov	r3, r8
 80023e2:	4370      	muls	r0, r6
 80023e4:	435c      	muls	r4, r3
 80023e6:	437e      	muls	r6, r7
 80023e8:	435f      	muls	r7, r3
 80023ea:	0c03      	lsrs	r3, r0, #16
 80023ec:	4698      	mov	r8, r3
 80023ee:	19a4      	adds	r4, r4, r6
 80023f0:	4444      	add	r4, r8
 80023f2:	444a      	add	r2, r9
 80023f4:	9703      	str	r7, [sp, #12]
 80023f6:	42a6      	cmp	r6, r4
 80023f8:	d904      	bls.n	8002404 <__aeabi_dmul+0x1d4>
 80023fa:	2380      	movs	r3, #128	; 0x80
 80023fc:	025b      	lsls	r3, r3, #9
 80023fe:	4698      	mov	r8, r3
 8002400:	4447      	add	r7, r8
 8002402:	9703      	str	r7, [sp, #12]
 8002404:	0423      	lsls	r3, r4, #16
 8002406:	9e02      	ldr	r6, [sp, #8]
 8002408:	469a      	mov	sl, r3
 800240a:	9b05      	ldr	r3, [sp, #20]
 800240c:	445e      	add	r6, fp
 800240e:	4698      	mov	r8, r3
 8002410:	42ae      	cmp	r6, r5
 8002412:	41ad      	sbcs	r5, r5
 8002414:	1876      	adds	r6, r6, r1
 8002416:	428e      	cmp	r6, r1
 8002418:	4189      	sbcs	r1, r1
 800241a:	0400      	lsls	r0, r0, #16
 800241c:	0c00      	lsrs	r0, r0, #16
 800241e:	4450      	add	r0, sl
 8002420:	4440      	add	r0, r8
 8002422:	426d      	negs	r5, r5
 8002424:	1947      	adds	r7, r0, r5
 8002426:	46b8      	mov	r8, r7
 8002428:	4693      	mov	fp, r2
 800242a:	4249      	negs	r1, r1
 800242c:	4689      	mov	r9, r1
 800242e:	44c3      	add	fp, r8
 8002430:	44d9      	add	r9, fp
 8002432:	4298      	cmp	r0, r3
 8002434:	4180      	sbcs	r0, r0
 8002436:	45a8      	cmp	r8, r5
 8002438:	41ad      	sbcs	r5, r5
 800243a:	4593      	cmp	fp, r2
 800243c:	4192      	sbcs	r2, r2
 800243e:	4589      	cmp	r9, r1
 8002440:	4189      	sbcs	r1, r1
 8002442:	426d      	negs	r5, r5
 8002444:	4240      	negs	r0, r0
 8002446:	4328      	orrs	r0, r5
 8002448:	0c24      	lsrs	r4, r4, #16
 800244a:	4252      	negs	r2, r2
 800244c:	4249      	negs	r1, r1
 800244e:	430a      	orrs	r2, r1
 8002450:	9b03      	ldr	r3, [sp, #12]
 8002452:	1900      	adds	r0, r0, r4
 8002454:	1880      	adds	r0, r0, r2
 8002456:	18c7      	adds	r7, r0, r3
 8002458:	464b      	mov	r3, r9
 800245a:	0ddc      	lsrs	r4, r3, #23
 800245c:	9b04      	ldr	r3, [sp, #16]
 800245e:	0275      	lsls	r5, r6, #9
 8002460:	431d      	orrs	r5, r3
 8002462:	1e6a      	subs	r2, r5, #1
 8002464:	4195      	sbcs	r5, r2
 8002466:	464b      	mov	r3, r9
 8002468:	0df6      	lsrs	r6, r6, #23
 800246a:	027f      	lsls	r7, r7, #9
 800246c:	4335      	orrs	r5, r6
 800246e:	025a      	lsls	r2, r3, #9
 8002470:	433c      	orrs	r4, r7
 8002472:	4315      	orrs	r5, r2
 8002474:	01fb      	lsls	r3, r7, #7
 8002476:	d400      	bmi.n	800247a <__aeabi_dmul+0x24a>
 8002478:	e11c      	b.n	80026b4 <__aeabi_dmul+0x484>
 800247a:	2101      	movs	r1, #1
 800247c:	086a      	lsrs	r2, r5, #1
 800247e:	400d      	ands	r5, r1
 8002480:	4315      	orrs	r5, r2
 8002482:	07e2      	lsls	r2, r4, #31
 8002484:	4315      	orrs	r5, r2
 8002486:	0864      	lsrs	r4, r4, #1
 8002488:	494f      	ldr	r1, [pc, #316]	; (80025c8 <__aeabi_dmul+0x398>)
 800248a:	4461      	add	r1, ip
 800248c:	2900      	cmp	r1, #0
 800248e:	dc00      	bgt.n	8002492 <__aeabi_dmul+0x262>
 8002490:	e0b0      	b.n	80025f4 <__aeabi_dmul+0x3c4>
 8002492:	076b      	lsls	r3, r5, #29
 8002494:	d009      	beq.n	80024aa <__aeabi_dmul+0x27a>
 8002496:	220f      	movs	r2, #15
 8002498:	402a      	ands	r2, r5
 800249a:	2a04      	cmp	r2, #4
 800249c:	d005      	beq.n	80024aa <__aeabi_dmul+0x27a>
 800249e:	1d2a      	adds	r2, r5, #4
 80024a0:	42aa      	cmp	r2, r5
 80024a2:	41ad      	sbcs	r5, r5
 80024a4:	426d      	negs	r5, r5
 80024a6:	1964      	adds	r4, r4, r5
 80024a8:	0015      	movs	r5, r2
 80024aa:	01e3      	lsls	r3, r4, #7
 80024ac:	d504      	bpl.n	80024b8 <__aeabi_dmul+0x288>
 80024ae:	2180      	movs	r1, #128	; 0x80
 80024b0:	4a46      	ldr	r2, [pc, #280]	; (80025cc <__aeabi_dmul+0x39c>)
 80024b2:	00c9      	lsls	r1, r1, #3
 80024b4:	4014      	ands	r4, r2
 80024b6:	4461      	add	r1, ip
 80024b8:	4a45      	ldr	r2, [pc, #276]	; (80025d0 <__aeabi_dmul+0x3a0>)
 80024ba:	4291      	cmp	r1, r2
 80024bc:	dd00      	ble.n	80024c0 <__aeabi_dmul+0x290>
 80024be:	e726      	b.n	800230e <__aeabi_dmul+0xde>
 80024c0:	0762      	lsls	r2, r4, #29
 80024c2:	08ed      	lsrs	r5, r5, #3
 80024c4:	0264      	lsls	r4, r4, #9
 80024c6:	0549      	lsls	r1, r1, #21
 80024c8:	4315      	orrs	r5, r2
 80024ca:	0b24      	lsrs	r4, r4, #12
 80024cc:	0d4a      	lsrs	r2, r1, #21
 80024ce:	e710      	b.n	80022f2 <__aeabi_dmul+0xc2>
 80024d0:	4652      	mov	r2, sl
 80024d2:	4332      	orrs	r2, r6
 80024d4:	d100      	bne.n	80024d8 <__aeabi_dmul+0x2a8>
 80024d6:	e07f      	b.n	80025d8 <__aeabi_dmul+0x3a8>
 80024d8:	2e00      	cmp	r6, #0
 80024da:	d100      	bne.n	80024de <__aeabi_dmul+0x2ae>
 80024dc:	e0dc      	b.n	8002698 <__aeabi_dmul+0x468>
 80024de:	0030      	movs	r0, r6
 80024e0:	f000 fe1e 	bl	8003120 <__clzsi2>
 80024e4:	0002      	movs	r2, r0
 80024e6:	3a0b      	subs	r2, #11
 80024e8:	231d      	movs	r3, #29
 80024ea:	0001      	movs	r1, r0
 80024ec:	1a9b      	subs	r3, r3, r2
 80024ee:	4652      	mov	r2, sl
 80024f0:	3908      	subs	r1, #8
 80024f2:	40da      	lsrs	r2, r3
 80024f4:	408e      	lsls	r6, r1
 80024f6:	4316      	orrs	r6, r2
 80024f8:	4652      	mov	r2, sl
 80024fa:	408a      	lsls	r2, r1
 80024fc:	9b00      	ldr	r3, [sp, #0]
 80024fe:	4935      	ldr	r1, [pc, #212]	; (80025d4 <__aeabi_dmul+0x3a4>)
 8002500:	1a18      	subs	r0, r3, r0
 8002502:	0003      	movs	r3, r0
 8002504:	468c      	mov	ip, r1
 8002506:	4463      	add	r3, ip
 8002508:	2000      	movs	r0, #0
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	e6d3      	b.n	80022b6 <__aeabi_dmul+0x86>
 800250e:	0025      	movs	r5, r4
 8002510:	4305      	orrs	r5, r0
 8002512:	d04a      	beq.n	80025aa <__aeabi_dmul+0x37a>
 8002514:	2c00      	cmp	r4, #0
 8002516:	d100      	bne.n	800251a <__aeabi_dmul+0x2ea>
 8002518:	e0b0      	b.n	800267c <__aeabi_dmul+0x44c>
 800251a:	0020      	movs	r0, r4
 800251c:	f000 fe00 	bl	8003120 <__clzsi2>
 8002520:	0001      	movs	r1, r0
 8002522:	0002      	movs	r2, r0
 8002524:	390b      	subs	r1, #11
 8002526:	231d      	movs	r3, #29
 8002528:	0010      	movs	r0, r2
 800252a:	1a5b      	subs	r3, r3, r1
 800252c:	0031      	movs	r1, r6
 800252e:	0035      	movs	r5, r6
 8002530:	3808      	subs	r0, #8
 8002532:	4084      	lsls	r4, r0
 8002534:	40d9      	lsrs	r1, r3
 8002536:	4085      	lsls	r5, r0
 8002538:	430c      	orrs	r4, r1
 800253a:	4826      	ldr	r0, [pc, #152]	; (80025d4 <__aeabi_dmul+0x3a4>)
 800253c:	1a83      	subs	r3, r0, r2
 800253e:	9300      	str	r3, [sp, #0]
 8002540:	2300      	movs	r3, #0
 8002542:	4699      	mov	r9, r3
 8002544:	469b      	mov	fp, r3
 8002546:	e697      	b.n	8002278 <__aeabi_dmul+0x48>
 8002548:	0005      	movs	r5, r0
 800254a:	4325      	orrs	r5, r4
 800254c:	d126      	bne.n	800259c <__aeabi_dmul+0x36c>
 800254e:	2208      	movs	r2, #8
 8002550:	9300      	str	r3, [sp, #0]
 8002552:	2302      	movs	r3, #2
 8002554:	2400      	movs	r4, #0
 8002556:	4691      	mov	r9, r2
 8002558:	469b      	mov	fp, r3
 800255a:	e68d      	b.n	8002278 <__aeabi_dmul+0x48>
 800255c:	4652      	mov	r2, sl
 800255e:	9b00      	ldr	r3, [sp, #0]
 8002560:	4332      	orrs	r2, r6
 8002562:	d110      	bne.n	8002586 <__aeabi_dmul+0x356>
 8002564:	4915      	ldr	r1, [pc, #84]	; (80025bc <__aeabi_dmul+0x38c>)
 8002566:	2600      	movs	r6, #0
 8002568:	468c      	mov	ip, r1
 800256a:	4463      	add	r3, ip
 800256c:	4649      	mov	r1, r9
 800256e:	9300      	str	r3, [sp, #0]
 8002570:	2302      	movs	r3, #2
 8002572:	4319      	orrs	r1, r3
 8002574:	4689      	mov	r9, r1
 8002576:	2002      	movs	r0, #2
 8002578:	e69d      	b.n	80022b6 <__aeabi_dmul+0x86>
 800257a:	465b      	mov	r3, fp
 800257c:	9701      	str	r7, [sp, #4]
 800257e:	2b02      	cmp	r3, #2
 8002580:	d000      	beq.n	8002584 <__aeabi_dmul+0x354>
 8002582:	e6ad      	b.n	80022e0 <__aeabi_dmul+0xb0>
 8002584:	e6c3      	b.n	800230e <__aeabi_dmul+0xde>
 8002586:	4a0d      	ldr	r2, [pc, #52]	; (80025bc <__aeabi_dmul+0x38c>)
 8002588:	2003      	movs	r0, #3
 800258a:	4694      	mov	ip, r2
 800258c:	4463      	add	r3, ip
 800258e:	464a      	mov	r2, r9
 8002590:	9300      	str	r3, [sp, #0]
 8002592:	2303      	movs	r3, #3
 8002594:	431a      	orrs	r2, r3
 8002596:	4691      	mov	r9, r2
 8002598:	4652      	mov	r2, sl
 800259a:	e68c      	b.n	80022b6 <__aeabi_dmul+0x86>
 800259c:	220c      	movs	r2, #12
 800259e:	9300      	str	r3, [sp, #0]
 80025a0:	2303      	movs	r3, #3
 80025a2:	0005      	movs	r5, r0
 80025a4:	4691      	mov	r9, r2
 80025a6:	469b      	mov	fp, r3
 80025a8:	e666      	b.n	8002278 <__aeabi_dmul+0x48>
 80025aa:	2304      	movs	r3, #4
 80025ac:	4699      	mov	r9, r3
 80025ae:	2300      	movs	r3, #0
 80025b0:	9300      	str	r3, [sp, #0]
 80025b2:	3301      	adds	r3, #1
 80025b4:	2400      	movs	r4, #0
 80025b6:	469b      	mov	fp, r3
 80025b8:	e65e      	b.n	8002278 <__aeabi_dmul+0x48>
 80025ba:	46c0      	nop			; (mov r8, r8)
 80025bc:	000007ff 	.word	0x000007ff
 80025c0:	fffffc01 	.word	0xfffffc01
 80025c4:	08012d40 	.word	0x08012d40
 80025c8:	000003ff 	.word	0x000003ff
 80025cc:	feffffff 	.word	0xfeffffff
 80025d0:	000007fe 	.word	0x000007fe
 80025d4:	fffffc0d 	.word	0xfffffc0d
 80025d8:	4649      	mov	r1, r9
 80025da:	2301      	movs	r3, #1
 80025dc:	4319      	orrs	r1, r3
 80025de:	4689      	mov	r9, r1
 80025e0:	2600      	movs	r6, #0
 80025e2:	2001      	movs	r0, #1
 80025e4:	e667      	b.n	80022b6 <__aeabi_dmul+0x86>
 80025e6:	2300      	movs	r3, #0
 80025e8:	2480      	movs	r4, #128	; 0x80
 80025ea:	2500      	movs	r5, #0
 80025ec:	4a43      	ldr	r2, [pc, #268]	; (80026fc <__aeabi_dmul+0x4cc>)
 80025ee:	9301      	str	r3, [sp, #4]
 80025f0:	0324      	lsls	r4, r4, #12
 80025f2:	e67e      	b.n	80022f2 <__aeabi_dmul+0xc2>
 80025f4:	2001      	movs	r0, #1
 80025f6:	1a40      	subs	r0, r0, r1
 80025f8:	2838      	cmp	r0, #56	; 0x38
 80025fa:	dd00      	ble.n	80025fe <__aeabi_dmul+0x3ce>
 80025fc:	e676      	b.n	80022ec <__aeabi_dmul+0xbc>
 80025fe:	281f      	cmp	r0, #31
 8002600:	dd5b      	ble.n	80026ba <__aeabi_dmul+0x48a>
 8002602:	221f      	movs	r2, #31
 8002604:	0023      	movs	r3, r4
 8002606:	4252      	negs	r2, r2
 8002608:	1a51      	subs	r1, r2, r1
 800260a:	40cb      	lsrs	r3, r1
 800260c:	0019      	movs	r1, r3
 800260e:	2820      	cmp	r0, #32
 8002610:	d003      	beq.n	800261a <__aeabi_dmul+0x3ea>
 8002612:	4a3b      	ldr	r2, [pc, #236]	; (8002700 <__aeabi_dmul+0x4d0>)
 8002614:	4462      	add	r2, ip
 8002616:	4094      	lsls	r4, r2
 8002618:	4325      	orrs	r5, r4
 800261a:	1e6a      	subs	r2, r5, #1
 800261c:	4195      	sbcs	r5, r2
 800261e:	002a      	movs	r2, r5
 8002620:	430a      	orrs	r2, r1
 8002622:	2107      	movs	r1, #7
 8002624:	000d      	movs	r5, r1
 8002626:	2400      	movs	r4, #0
 8002628:	4015      	ands	r5, r2
 800262a:	4211      	tst	r1, r2
 800262c:	d05b      	beq.n	80026e6 <__aeabi_dmul+0x4b6>
 800262e:	210f      	movs	r1, #15
 8002630:	2400      	movs	r4, #0
 8002632:	4011      	ands	r1, r2
 8002634:	2904      	cmp	r1, #4
 8002636:	d053      	beq.n	80026e0 <__aeabi_dmul+0x4b0>
 8002638:	1d11      	adds	r1, r2, #4
 800263a:	4291      	cmp	r1, r2
 800263c:	4192      	sbcs	r2, r2
 800263e:	4252      	negs	r2, r2
 8002640:	18a4      	adds	r4, r4, r2
 8002642:	000a      	movs	r2, r1
 8002644:	0223      	lsls	r3, r4, #8
 8002646:	d54b      	bpl.n	80026e0 <__aeabi_dmul+0x4b0>
 8002648:	2201      	movs	r2, #1
 800264a:	2400      	movs	r4, #0
 800264c:	2500      	movs	r5, #0
 800264e:	e650      	b.n	80022f2 <__aeabi_dmul+0xc2>
 8002650:	2380      	movs	r3, #128	; 0x80
 8002652:	031b      	lsls	r3, r3, #12
 8002654:	421c      	tst	r4, r3
 8002656:	d009      	beq.n	800266c <__aeabi_dmul+0x43c>
 8002658:	421e      	tst	r6, r3
 800265a:	d107      	bne.n	800266c <__aeabi_dmul+0x43c>
 800265c:	4333      	orrs	r3, r6
 800265e:	031c      	lsls	r4, r3, #12
 8002660:	4643      	mov	r3, r8
 8002662:	0015      	movs	r5, r2
 8002664:	0b24      	lsrs	r4, r4, #12
 8002666:	4a25      	ldr	r2, [pc, #148]	; (80026fc <__aeabi_dmul+0x4cc>)
 8002668:	9301      	str	r3, [sp, #4]
 800266a:	e642      	b.n	80022f2 <__aeabi_dmul+0xc2>
 800266c:	2280      	movs	r2, #128	; 0x80
 800266e:	0312      	lsls	r2, r2, #12
 8002670:	4314      	orrs	r4, r2
 8002672:	0324      	lsls	r4, r4, #12
 8002674:	4a21      	ldr	r2, [pc, #132]	; (80026fc <__aeabi_dmul+0x4cc>)
 8002676:	0b24      	lsrs	r4, r4, #12
 8002678:	9701      	str	r7, [sp, #4]
 800267a:	e63a      	b.n	80022f2 <__aeabi_dmul+0xc2>
 800267c:	f000 fd50 	bl	8003120 <__clzsi2>
 8002680:	0001      	movs	r1, r0
 8002682:	0002      	movs	r2, r0
 8002684:	3115      	adds	r1, #21
 8002686:	3220      	adds	r2, #32
 8002688:	291c      	cmp	r1, #28
 800268a:	dc00      	bgt.n	800268e <__aeabi_dmul+0x45e>
 800268c:	e74b      	b.n	8002526 <__aeabi_dmul+0x2f6>
 800268e:	0034      	movs	r4, r6
 8002690:	3808      	subs	r0, #8
 8002692:	2500      	movs	r5, #0
 8002694:	4084      	lsls	r4, r0
 8002696:	e750      	b.n	800253a <__aeabi_dmul+0x30a>
 8002698:	f000 fd42 	bl	8003120 <__clzsi2>
 800269c:	0003      	movs	r3, r0
 800269e:	001a      	movs	r2, r3
 80026a0:	3215      	adds	r2, #21
 80026a2:	3020      	adds	r0, #32
 80026a4:	2a1c      	cmp	r2, #28
 80026a6:	dc00      	bgt.n	80026aa <__aeabi_dmul+0x47a>
 80026a8:	e71e      	b.n	80024e8 <__aeabi_dmul+0x2b8>
 80026aa:	4656      	mov	r6, sl
 80026ac:	3b08      	subs	r3, #8
 80026ae:	2200      	movs	r2, #0
 80026b0:	409e      	lsls	r6, r3
 80026b2:	e723      	b.n	80024fc <__aeabi_dmul+0x2cc>
 80026b4:	9b00      	ldr	r3, [sp, #0]
 80026b6:	469c      	mov	ip, r3
 80026b8:	e6e6      	b.n	8002488 <__aeabi_dmul+0x258>
 80026ba:	4912      	ldr	r1, [pc, #72]	; (8002704 <__aeabi_dmul+0x4d4>)
 80026bc:	0022      	movs	r2, r4
 80026be:	4461      	add	r1, ip
 80026c0:	002e      	movs	r6, r5
 80026c2:	408d      	lsls	r5, r1
 80026c4:	408a      	lsls	r2, r1
 80026c6:	40c6      	lsrs	r6, r0
 80026c8:	1e69      	subs	r1, r5, #1
 80026ca:	418d      	sbcs	r5, r1
 80026cc:	4332      	orrs	r2, r6
 80026ce:	432a      	orrs	r2, r5
 80026d0:	40c4      	lsrs	r4, r0
 80026d2:	0753      	lsls	r3, r2, #29
 80026d4:	d0b6      	beq.n	8002644 <__aeabi_dmul+0x414>
 80026d6:	210f      	movs	r1, #15
 80026d8:	4011      	ands	r1, r2
 80026da:	2904      	cmp	r1, #4
 80026dc:	d1ac      	bne.n	8002638 <__aeabi_dmul+0x408>
 80026de:	e7b1      	b.n	8002644 <__aeabi_dmul+0x414>
 80026e0:	0765      	lsls	r5, r4, #29
 80026e2:	0264      	lsls	r4, r4, #9
 80026e4:	0b24      	lsrs	r4, r4, #12
 80026e6:	08d2      	lsrs	r2, r2, #3
 80026e8:	4315      	orrs	r5, r2
 80026ea:	2200      	movs	r2, #0
 80026ec:	e601      	b.n	80022f2 <__aeabi_dmul+0xc2>
 80026ee:	2280      	movs	r2, #128	; 0x80
 80026f0:	0312      	lsls	r2, r2, #12
 80026f2:	4314      	orrs	r4, r2
 80026f4:	0324      	lsls	r4, r4, #12
 80026f6:	4a01      	ldr	r2, [pc, #4]	; (80026fc <__aeabi_dmul+0x4cc>)
 80026f8:	0b24      	lsrs	r4, r4, #12
 80026fa:	e5fa      	b.n	80022f2 <__aeabi_dmul+0xc2>
 80026fc:	000007ff 	.word	0x000007ff
 8002700:	0000043e 	.word	0x0000043e
 8002704:	0000041e 	.word	0x0000041e

08002708 <__aeabi_dsub>:
 8002708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800270a:	4657      	mov	r7, sl
 800270c:	464e      	mov	r6, r9
 800270e:	4645      	mov	r5, r8
 8002710:	46de      	mov	lr, fp
 8002712:	b5e0      	push	{r5, r6, r7, lr}
 8002714:	001e      	movs	r6, r3
 8002716:	0017      	movs	r7, r2
 8002718:	004a      	lsls	r2, r1, #1
 800271a:	030b      	lsls	r3, r1, #12
 800271c:	0d52      	lsrs	r2, r2, #21
 800271e:	0a5b      	lsrs	r3, r3, #9
 8002720:	4690      	mov	r8, r2
 8002722:	0f42      	lsrs	r2, r0, #29
 8002724:	431a      	orrs	r2, r3
 8002726:	0fcd      	lsrs	r5, r1, #31
 8002728:	4ccd      	ldr	r4, [pc, #820]	; (8002a60 <__aeabi_dsub+0x358>)
 800272a:	0331      	lsls	r1, r6, #12
 800272c:	00c3      	lsls	r3, r0, #3
 800272e:	4694      	mov	ip, r2
 8002730:	0070      	lsls	r0, r6, #1
 8002732:	0f7a      	lsrs	r2, r7, #29
 8002734:	0a49      	lsrs	r1, r1, #9
 8002736:	00ff      	lsls	r7, r7, #3
 8002738:	469a      	mov	sl, r3
 800273a:	46b9      	mov	r9, r7
 800273c:	0d40      	lsrs	r0, r0, #21
 800273e:	0ff6      	lsrs	r6, r6, #31
 8002740:	4311      	orrs	r1, r2
 8002742:	42a0      	cmp	r0, r4
 8002744:	d100      	bne.n	8002748 <__aeabi_dsub+0x40>
 8002746:	e0b1      	b.n	80028ac <__aeabi_dsub+0x1a4>
 8002748:	2201      	movs	r2, #1
 800274a:	4056      	eors	r6, r2
 800274c:	46b3      	mov	fp, r6
 800274e:	42b5      	cmp	r5, r6
 8002750:	d100      	bne.n	8002754 <__aeabi_dsub+0x4c>
 8002752:	e088      	b.n	8002866 <__aeabi_dsub+0x15e>
 8002754:	4642      	mov	r2, r8
 8002756:	1a12      	subs	r2, r2, r0
 8002758:	2a00      	cmp	r2, #0
 800275a:	dc00      	bgt.n	800275e <__aeabi_dsub+0x56>
 800275c:	e0ae      	b.n	80028bc <__aeabi_dsub+0x1b4>
 800275e:	2800      	cmp	r0, #0
 8002760:	d100      	bne.n	8002764 <__aeabi_dsub+0x5c>
 8002762:	e0c1      	b.n	80028e8 <__aeabi_dsub+0x1e0>
 8002764:	48be      	ldr	r0, [pc, #760]	; (8002a60 <__aeabi_dsub+0x358>)
 8002766:	4580      	cmp	r8, r0
 8002768:	d100      	bne.n	800276c <__aeabi_dsub+0x64>
 800276a:	e151      	b.n	8002a10 <__aeabi_dsub+0x308>
 800276c:	2080      	movs	r0, #128	; 0x80
 800276e:	0400      	lsls	r0, r0, #16
 8002770:	4301      	orrs	r1, r0
 8002772:	2a38      	cmp	r2, #56	; 0x38
 8002774:	dd00      	ble.n	8002778 <__aeabi_dsub+0x70>
 8002776:	e17b      	b.n	8002a70 <__aeabi_dsub+0x368>
 8002778:	2a1f      	cmp	r2, #31
 800277a:	dd00      	ble.n	800277e <__aeabi_dsub+0x76>
 800277c:	e1ee      	b.n	8002b5c <__aeabi_dsub+0x454>
 800277e:	2020      	movs	r0, #32
 8002780:	003e      	movs	r6, r7
 8002782:	1a80      	subs	r0, r0, r2
 8002784:	000c      	movs	r4, r1
 8002786:	40d6      	lsrs	r6, r2
 8002788:	40d1      	lsrs	r1, r2
 800278a:	4087      	lsls	r7, r0
 800278c:	4662      	mov	r2, ip
 800278e:	4084      	lsls	r4, r0
 8002790:	1a52      	subs	r2, r2, r1
 8002792:	1e78      	subs	r0, r7, #1
 8002794:	4187      	sbcs	r7, r0
 8002796:	4694      	mov	ip, r2
 8002798:	4334      	orrs	r4, r6
 800279a:	4327      	orrs	r7, r4
 800279c:	1bdc      	subs	r4, r3, r7
 800279e:	42a3      	cmp	r3, r4
 80027a0:	419b      	sbcs	r3, r3
 80027a2:	4662      	mov	r2, ip
 80027a4:	425b      	negs	r3, r3
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	4699      	mov	r9, r3
 80027aa:	464b      	mov	r3, r9
 80027ac:	021b      	lsls	r3, r3, #8
 80027ae:	d400      	bmi.n	80027b2 <__aeabi_dsub+0xaa>
 80027b0:	e118      	b.n	80029e4 <__aeabi_dsub+0x2dc>
 80027b2:	464b      	mov	r3, r9
 80027b4:	0258      	lsls	r0, r3, #9
 80027b6:	0a43      	lsrs	r3, r0, #9
 80027b8:	4699      	mov	r9, r3
 80027ba:	464b      	mov	r3, r9
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d100      	bne.n	80027c2 <__aeabi_dsub+0xba>
 80027c0:	e137      	b.n	8002a32 <__aeabi_dsub+0x32a>
 80027c2:	4648      	mov	r0, r9
 80027c4:	f000 fcac 	bl	8003120 <__clzsi2>
 80027c8:	0001      	movs	r1, r0
 80027ca:	3908      	subs	r1, #8
 80027cc:	2320      	movs	r3, #32
 80027ce:	0022      	movs	r2, r4
 80027d0:	4648      	mov	r0, r9
 80027d2:	1a5b      	subs	r3, r3, r1
 80027d4:	40da      	lsrs	r2, r3
 80027d6:	4088      	lsls	r0, r1
 80027d8:	408c      	lsls	r4, r1
 80027da:	4643      	mov	r3, r8
 80027dc:	4310      	orrs	r0, r2
 80027de:	4588      	cmp	r8, r1
 80027e0:	dd00      	ble.n	80027e4 <__aeabi_dsub+0xdc>
 80027e2:	e136      	b.n	8002a52 <__aeabi_dsub+0x34a>
 80027e4:	1ac9      	subs	r1, r1, r3
 80027e6:	1c4b      	adds	r3, r1, #1
 80027e8:	2b1f      	cmp	r3, #31
 80027ea:	dd00      	ble.n	80027ee <__aeabi_dsub+0xe6>
 80027ec:	e0ea      	b.n	80029c4 <__aeabi_dsub+0x2bc>
 80027ee:	2220      	movs	r2, #32
 80027f0:	0026      	movs	r6, r4
 80027f2:	1ad2      	subs	r2, r2, r3
 80027f4:	0001      	movs	r1, r0
 80027f6:	4094      	lsls	r4, r2
 80027f8:	40de      	lsrs	r6, r3
 80027fa:	40d8      	lsrs	r0, r3
 80027fc:	2300      	movs	r3, #0
 80027fe:	4091      	lsls	r1, r2
 8002800:	1e62      	subs	r2, r4, #1
 8002802:	4194      	sbcs	r4, r2
 8002804:	4681      	mov	r9, r0
 8002806:	4698      	mov	r8, r3
 8002808:	4331      	orrs	r1, r6
 800280a:	430c      	orrs	r4, r1
 800280c:	0763      	lsls	r3, r4, #29
 800280e:	d009      	beq.n	8002824 <__aeabi_dsub+0x11c>
 8002810:	230f      	movs	r3, #15
 8002812:	4023      	ands	r3, r4
 8002814:	2b04      	cmp	r3, #4
 8002816:	d005      	beq.n	8002824 <__aeabi_dsub+0x11c>
 8002818:	1d23      	adds	r3, r4, #4
 800281a:	42a3      	cmp	r3, r4
 800281c:	41a4      	sbcs	r4, r4
 800281e:	4264      	negs	r4, r4
 8002820:	44a1      	add	r9, r4
 8002822:	001c      	movs	r4, r3
 8002824:	464b      	mov	r3, r9
 8002826:	021b      	lsls	r3, r3, #8
 8002828:	d400      	bmi.n	800282c <__aeabi_dsub+0x124>
 800282a:	e0de      	b.n	80029ea <__aeabi_dsub+0x2e2>
 800282c:	4641      	mov	r1, r8
 800282e:	4b8c      	ldr	r3, [pc, #560]	; (8002a60 <__aeabi_dsub+0x358>)
 8002830:	3101      	adds	r1, #1
 8002832:	4299      	cmp	r1, r3
 8002834:	d100      	bne.n	8002838 <__aeabi_dsub+0x130>
 8002836:	e0e7      	b.n	8002a08 <__aeabi_dsub+0x300>
 8002838:	464b      	mov	r3, r9
 800283a:	488a      	ldr	r0, [pc, #552]	; (8002a64 <__aeabi_dsub+0x35c>)
 800283c:	08e4      	lsrs	r4, r4, #3
 800283e:	4003      	ands	r3, r0
 8002840:	0018      	movs	r0, r3
 8002842:	0549      	lsls	r1, r1, #21
 8002844:	075b      	lsls	r3, r3, #29
 8002846:	0240      	lsls	r0, r0, #9
 8002848:	4323      	orrs	r3, r4
 800284a:	0d4a      	lsrs	r2, r1, #21
 800284c:	0b04      	lsrs	r4, r0, #12
 800284e:	0512      	lsls	r2, r2, #20
 8002850:	07ed      	lsls	r5, r5, #31
 8002852:	4322      	orrs	r2, r4
 8002854:	432a      	orrs	r2, r5
 8002856:	0018      	movs	r0, r3
 8002858:	0011      	movs	r1, r2
 800285a:	bcf0      	pop	{r4, r5, r6, r7}
 800285c:	46bb      	mov	fp, r7
 800285e:	46b2      	mov	sl, r6
 8002860:	46a9      	mov	r9, r5
 8002862:	46a0      	mov	r8, r4
 8002864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002866:	4642      	mov	r2, r8
 8002868:	1a12      	subs	r2, r2, r0
 800286a:	2a00      	cmp	r2, #0
 800286c:	dd52      	ble.n	8002914 <__aeabi_dsub+0x20c>
 800286e:	2800      	cmp	r0, #0
 8002870:	d100      	bne.n	8002874 <__aeabi_dsub+0x16c>
 8002872:	e09c      	b.n	80029ae <__aeabi_dsub+0x2a6>
 8002874:	45a0      	cmp	r8, r4
 8002876:	d100      	bne.n	800287a <__aeabi_dsub+0x172>
 8002878:	e0ca      	b.n	8002a10 <__aeabi_dsub+0x308>
 800287a:	2080      	movs	r0, #128	; 0x80
 800287c:	0400      	lsls	r0, r0, #16
 800287e:	4301      	orrs	r1, r0
 8002880:	2a38      	cmp	r2, #56	; 0x38
 8002882:	dd00      	ble.n	8002886 <__aeabi_dsub+0x17e>
 8002884:	e149      	b.n	8002b1a <__aeabi_dsub+0x412>
 8002886:	2a1f      	cmp	r2, #31
 8002888:	dc00      	bgt.n	800288c <__aeabi_dsub+0x184>
 800288a:	e197      	b.n	8002bbc <__aeabi_dsub+0x4b4>
 800288c:	0010      	movs	r0, r2
 800288e:	000e      	movs	r6, r1
 8002890:	3820      	subs	r0, #32
 8002892:	40c6      	lsrs	r6, r0
 8002894:	2a20      	cmp	r2, #32
 8002896:	d004      	beq.n	80028a2 <__aeabi_dsub+0x19a>
 8002898:	2040      	movs	r0, #64	; 0x40
 800289a:	1a82      	subs	r2, r0, r2
 800289c:	4091      	lsls	r1, r2
 800289e:	430f      	orrs	r7, r1
 80028a0:	46b9      	mov	r9, r7
 80028a2:	464c      	mov	r4, r9
 80028a4:	1e62      	subs	r2, r4, #1
 80028a6:	4194      	sbcs	r4, r2
 80028a8:	4334      	orrs	r4, r6
 80028aa:	e13a      	b.n	8002b22 <__aeabi_dsub+0x41a>
 80028ac:	000a      	movs	r2, r1
 80028ae:	433a      	orrs	r2, r7
 80028b0:	d028      	beq.n	8002904 <__aeabi_dsub+0x1fc>
 80028b2:	46b3      	mov	fp, r6
 80028b4:	42b5      	cmp	r5, r6
 80028b6:	d02b      	beq.n	8002910 <__aeabi_dsub+0x208>
 80028b8:	4a6b      	ldr	r2, [pc, #428]	; (8002a68 <__aeabi_dsub+0x360>)
 80028ba:	4442      	add	r2, r8
 80028bc:	2a00      	cmp	r2, #0
 80028be:	d05d      	beq.n	800297c <__aeabi_dsub+0x274>
 80028c0:	4642      	mov	r2, r8
 80028c2:	4644      	mov	r4, r8
 80028c4:	1a82      	subs	r2, r0, r2
 80028c6:	2c00      	cmp	r4, #0
 80028c8:	d000      	beq.n	80028cc <__aeabi_dsub+0x1c4>
 80028ca:	e0f5      	b.n	8002ab8 <__aeabi_dsub+0x3b0>
 80028cc:	4665      	mov	r5, ip
 80028ce:	431d      	orrs	r5, r3
 80028d0:	d100      	bne.n	80028d4 <__aeabi_dsub+0x1cc>
 80028d2:	e19c      	b.n	8002c0e <__aeabi_dsub+0x506>
 80028d4:	1e55      	subs	r5, r2, #1
 80028d6:	2a01      	cmp	r2, #1
 80028d8:	d100      	bne.n	80028dc <__aeabi_dsub+0x1d4>
 80028da:	e1fb      	b.n	8002cd4 <__aeabi_dsub+0x5cc>
 80028dc:	4c60      	ldr	r4, [pc, #384]	; (8002a60 <__aeabi_dsub+0x358>)
 80028de:	42a2      	cmp	r2, r4
 80028e0:	d100      	bne.n	80028e4 <__aeabi_dsub+0x1dc>
 80028e2:	e1bd      	b.n	8002c60 <__aeabi_dsub+0x558>
 80028e4:	002a      	movs	r2, r5
 80028e6:	e0f0      	b.n	8002aca <__aeabi_dsub+0x3c2>
 80028e8:	0008      	movs	r0, r1
 80028ea:	4338      	orrs	r0, r7
 80028ec:	d100      	bne.n	80028f0 <__aeabi_dsub+0x1e8>
 80028ee:	e0c3      	b.n	8002a78 <__aeabi_dsub+0x370>
 80028f0:	1e50      	subs	r0, r2, #1
 80028f2:	2a01      	cmp	r2, #1
 80028f4:	d100      	bne.n	80028f8 <__aeabi_dsub+0x1f0>
 80028f6:	e1a8      	b.n	8002c4a <__aeabi_dsub+0x542>
 80028f8:	4c59      	ldr	r4, [pc, #356]	; (8002a60 <__aeabi_dsub+0x358>)
 80028fa:	42a2      	cmp	r2, r4
 80028fc:	d100      	bne.n	8002900 <__aeabi_dsub+0x1f8>
 80028fe:	e087      	b.n	8002a10 <__aeabi_dsub+0x308>
 8002900:	0002      	movs	r2, r0
 8002902:	e736      	b.n	8002772 <__aeabi_dsub+0x6a>
 8002904:	2201      	movs	r2, #1
 8002906:	4056      	eors	r6, r2
 8002908:	46b3      	mov	fp, r6
 800290a:	42b5      	cmp	r5, r6
 800290c:	d000      	beq.n	8002910 <__aeabi_dsub+0x208>
 800290e:	e721      	b.n	8002754 <__aeabi_dsub+0x4c>
 8002910:	4a55      	ldr	r2, [pc, #340]	; (8002a68 <__aeabi_dsub+0x360>)
 8002912:	4442      	add	r2, r8
 8002914:	2a00      	cmp	r2, #0
 8002916:	d100      	bne.n	800291a <__aeabi_dsub+0x212>
 8002918:	e0b5      	b.n	8002a86 <__aeabi_dsub+0x37e>
 800291a:	4642      	mov	r2, r8
 800291c:	4644      	mov	r4, r8
 800291e:	1a82      	subs	r2, r0, r2
 8002920:	2c00      	cmp	r4, #0
 8002922:	d100      	bne.n	8002926 <__aeabi_dsub+0x21e>
 8002924:	e138      	b.n	8002b98 <__aeabi_dsub+0x490>
 8002926:	4e4e      	ldr	r6, [pc, #312]	; (8002a60 <__aeabi_dsub+0x358>)
 8002928:	42b0      	cmp	r0, r6
 800292a:	d100      	bne.n	800292e <__aeabi_dsub+0x226>
 800292c:	e1de      	b.n	8002cec <__aeabi_dsub+0x5e4>
 800292e:	2680      	movs	r6, #128	; 0x80
 8002930:	4664      	mov	r4, ip
 8002932:	0436      	lsls	r6, r6, #16
 8002934:	4334      	orrs	r4, r6
 8002936:	46a4      	mov	ip, r4
 8002938:	2a38      	cmp	r2, #56	; 0x38
 800293a:	dd00      	ble.n	800293e <__aeabi_dsub+0x236>
 800293c:	e196      	b.n	8002c6c <__aeabi_dsub+0x564>
 800293e:	2a1f      	cmp	r2, #31
 8002940:	dd00      	ble.n	8002944 <__aeabi_dsub+0x23c>
 8002942:	e224      	b.n	8002d8e <__aeabi_dsub+0x686>
 8002944:	2620      	movs	r6, #32
 8002946:	1ab4      	subs	r4, r6, r2
 8002948:	46a2      	mov	sl, r4
 800294a:	4664      	mov	r4, ip
 800294c:	4656      	mov	r6, sl
 800294e:	40b4      	lsls	r4, r6
 8002950:	46a1      	mov	r9, r4
 8002952:	001c      	movs	r4, r3
 8002954:	464e      	mov	r6, r9
 8002956:	40d4      	lsrs	r4, r2
 8002958:	4326      	orrs	r6, r4
 800295a:	0034      	movs	r4, r6
 800295c:	4656      	mov	r6, sl
 800295e:	40b3      	lsls	r3, r6
 8002960:	1e5e      	subs	r6, r3, #1
 8002962:	41b3      	sbcs	r3, r6
 8002964:	431c      	orrs	r4, r3
 8002966:	4663      	mov	r3, ip
 8002968:	40d3      	lsrs	r3, r2
 800296a:	18c9      	adds	r1, r1, r3
 800296c:	19e4      	adds	r4, r4, r7
 800296e:	42bc      	cmp	r4, r7
 8002970:	41bf      	sbcs	r7, r7
 8002972:	427f      	negs	r7, r7
 8002974:	46b9      	mov	r9, r7
 8002976:	4680      	mov	r8, r0
 8002978:	4489      	add	r9, r1
 800297a:	e0d8      	b.n	8002b2e <__aeabi_dsub+0x426>
 800297c:	4640      	mov	r0, r8
 800297e:	4c3b      	ldr	r4, [pc, #236]	; (8002a6c <__aeabi_dsub+0x364>)
 8002980:	3001      	adds	r0, #1
 8002982:	4220      	tst	r0, r4
 8002984:	d000      	beq.n	8002988 <__aeabi_dsub+0x280>
 8002986:	e0b4      	b.n	8002af2 <__aeabi_dsub+0x3ea>
 8002988:	4640      	mov	r0, r8
 800298a:	2800      	cmp	r0, #0
 800298c:	d000      	beq.n	8002990 <__aeabi_dsub+0x288>
 800298e:	e144      	b.n	8002c1a <__aeabi_dsub+0x512>
 8002990:	4660      	mov	r0, ip
 8002992:	4318      	orrs	r0, r3
 8002994:	d100      	bne.n	8002998 <__aeabi_dsub+0x290>
 8002996:	e190      	b.n	8002cba <__aeabi_dsub+0x5b2>
 8002998:	0008      	movs	r0, r1
 800299a:	4338      	orrs	r0, r7
 800299c:	d000      	beq.n	80029a0 <__aeabi_dsub+0x298>
 800299e:	e1aa      	b.n	8002cf6 <__aeabi_dsub+0x5ee>
 80029a0:	4661      	mov	r1, ip
 80029a2:	08db      	lsrs	r3, r3, #3
 80029a4:	0749      	lsls	r1, r1, #29
 80029a6:	430b      	orrs	r3, r1
 80029a8:	4661      	mov	r1, ip
 80029aa:	08cc      	lsrs	r4, r1, #3
 80029ac:	e027      	b.n	80029fe <__aeabi_dsub+0x2f6>
 80029ae:	0008      	movs	r0, r1
 80029b0:	4338      	orrs	r0, r7
 80029b2:	d061      	beq.n	8002a78 <__aeabi_dsub+0x370>
 80029b4:	1e50      	subs	r0, r2, #1
 80029b6:	2a01      	cmp	r2, #1
 80029b8:	d100      	bne.n	80029bc <__aeabi_dsub+0x2b4>
 80029ba:	e139      	b.n	8002c30 <__aeabi_dsub+0x528>
 80029bc:	42a2      	cmp	r2, r4
 80029be:	d027      	beq.n	8002a10 <__aeabi_dsub+0x308>
 80029c0:	0002      	movs	r2, r0
 80029c2:	e75d      	b.n	8002880 <__aeabi_dsub+0x178>
 80029c4:	0002      	movs	r2, r0
 80029c6:	391f      	subs	r1, #31
 80029c8:	40ca      	lsrs	r2, r1
 80029ca:	0011      	movs	r1, r2
 80029cc:	2b20      	cmp	r3, #32
 80029ce:	d003      	beq.n	80029d8 <__aeabi_dsub+0x2d0>
 80029d0:	2240      	movs	r2, #64	; 0x40
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	4098      	lsls	r0, r3
 80029d6:	4304      	orrs	r4, r0
 80029d8:	1e63      	subs	r3, r4, #1
 80029da:	419c      	sbcs	r4, r3
 80029dc:	2300      	movs	r3, #0
 80029de:	4699      	mov	r9, r3
 80029e0:	4698      	mov	r8, r3
 80029e2:	430c      	orrs	r4, r1
 80029e4:	0763      	lsls	r3, r4, #29
 80029e6:	d000      	beq.n	80029ea <__aeabi_dsub+0x2e2>
 80029e8:	e712      	b.n	8002810 <__aeabi_dsub+0x108>
 80029ea:	464b      	mov	r3, r9
 80029ec:	464a      	mov	r2, r9
 80029ee:	08e4      	lsrs	r4, r4, #3
 80029f0:	075b      	lsls	r3, r3, #29
 80029f2:	4323      	orrs	r3, r4
 80029f4:	08d4      	lsrs	r4, r2, #3
 80029f6:	4642      	mov	r2, r8
 80029f8:	4919      	ldr	r1, [pc, #100]	; (8002a60 <__aeabi_dsub+0x358>)
 80029fa:	428a      	cmp	r2, r1
 80029fc:	d00e      	beq.n	8002a1c <__aeabi_dsub+0x314>
 80029fe:	0324      	lsls	r4, r4, #12
 8002a00:	0552      	lsls	r2, r2, #21
 8002a02:	0b24      	lsrs	r4, r4, #12
 8002a04:	0d52      	lsrs	r2, r2, #21
 8002a06:	e722      	b.n	800284e <__aeabi_dsub+0x146>
 8002a08:	000a      	movs	r2, r1
 8002a0a:	2400      	movs	r4, #0
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	e71e      	b.n	800284e <__aeabi_dsub+0x146>
 8002a10:	08db      	lsrs	r3, r3, #3
 8002a12:	4662      	mov	r2, ip
 8002a14:	0752      	lsls	r2, r2, #29
 8002a16:	4313      	orrs	r3, r2
 8002a18:	4662      	mov	r2, ip
 8002a1a:	08d4      	lsrs	r4, r2, #3
 8002a1c:	001a      	movs	r2, r3
 8002a1e:	4322      	orrs	r2, r4
 8002a20:	d100      	bne.n	8002a24 <__aeabi_dsub+0x31c>
 8002a22:	e1fc      	b.n	8002e1e <__aeabi_dsub+0x716>
 8002a24:	2280      	movs	r2, #128	; 0x80
 8002a26:	0312      	lsls	r2, r2, #12
 8002a28:	4314      	orrs	r4, r2
 8002a2a:	0324      	lsls	r4, r4, #12
 8002a2c:	4a0c      	ldr	r2, [pc, #48]	; (8002a60 <__aeabi_dsub+0x358>)
 8002a2e:	0b24      	lsrs	r4, r4, #12
 8002a30:	e70d      	b.n	800284e <__aeabi_dsub+0x146>
 8002a32:	0020      	movs	r0, r4
 8002a34:	f000 fb74 	bl	8003120 <__clzsi2>
 8002a38:	0001      	movs	r1, r0
 8002a3a:	3118      	adds	r1, #24
 8002a3c:	291f      	cmp	r1, #31
 8002a3e:	dc00      	bgt.n	8002a42 <__aeabi_dsub+0x33a>
 8002a40:	e6c4      	b.n	80027cc <__aeabi_dsub+0xc4>
 8002a42:	3808      	subs	r0, #8
 8002a44:	4084      	lsls	r4, r0
 8002a46:	4643      	mov	r3, r8
 8002a48:	0020      	movs	r0, r4
 8002a4a:	2400      	movs	r4, #0
 8002a4c:	4588      	cmp	r8, r1
 8002a4e:	dc00      	bgt.n	8002a52 <__aeabi_dsub+0x34a>
 8002a50:	e6c8      	b.n	80027e4 <__aeabi_dsub+0xdc>
 8002a52:	4a04      	ldr	r2, [pc, #16]	; (8002a64 <__aeabi_dsub+0x35c>)
 8002a54:	1a5b      	subs	r3, r3, r1
 8002a56:	4010      	ands	r0, r2
 8002a58:	4698      	mov	r8, r3
 8002a5a:	4681      	mov	r9, r0
 8002a5c:	e6d6      	b.n	800280c <__aeabi_dsub+0x104>
 8002a5e:	46c0      	nop			; (mov r8, r8)
 8002a60:	000007ff 	.word	0x000007ff
 8002a64:	ff7fffff 	.word	0xff7fffff
 8002a68:	fffff801 	.word	0xfffff801
 8002a6c:	000007fe 	.word	0x000007fe
 8002a70:	430f      	orrs	r7, r1
 8002a72:	1e7a      	subs	r2, r7, #1
 8002a74:	4197      	sbcs	r7, r2
 8002a76:	e691      	b.n	800279c <__aeabi_dsub+0x94>
 8002a78:	4661      	mov	r1, ip
 8002a7a:	08db      	lsrs	r3, r3, #3
 8002a7c:	0749      	lsls	r1, r1, #29
 8002a7e:	430b      	orrs	r3, r1
 8002a80:	4661      	mov	r1, ip
 8002a82:	08cc      	lsrs	r4, r1, #3
 8002a84:	e7b8      	b.n	80029f8 <__aeabi_dsub+0x2f0>
 8002a86:	4640      	mov	r0, r8
 8002a88:	4cd3      	ldr	r4, [pc, #844]	; (8002dd8 <__aeabi_dsub+0x6d0>)
 8002a8a:	3001      	adds	r0, #1
 8002a8c:	4220      	tst	r0, r4
 8002a8e:	d000      	beq.n	8002a92 <__aeabi_dsub+0x38a>
 8002a90:	e0a2      	b.n	8002bd8 <__aeabi_dsub+0x4d0>
 8002a92:	4640      	mov	r0, r8
 8002a94:	2800      	cmp	r0, #0
 8002a96:	d000      	beq.n	8002a9a <__aeabi_dsub+0x392>
 8002a98:	e101      	b.n	8002c9e <__aeabi_dsub+0x596>
 8002a9a:	4660      	mov	r0, ip
 8002a9c:	4318      	orrs	r0, r3
 8002a9e:	d100      	bne.n	8002aa2 <__aeabi_dsub+0x39a>
 8002aa0:	e15e      	b.n	8002d60 <__aeabi_dsub+0x658>
 8002aa2:	0008      	movs	r0, r1
 8002aa4:	4338      	orrs	r0, r7
 8002aa6:	d000      	beq.n	8002aaa <__aeabi_dsub+0x3a2>
 8002aa8:	e15f      	b.n	8002d6a <__aeabi_dsub+0x662>
 8002aaa:	4661      	mov	r1, ip
 8002aac:	08db      	lsrs	r3, r3, #3
 8002aae:	0749      	lsls	r1, r1, #29
 8002ab0:	430b      	orrs	r3, r1
 8002ab2:	4661      	mov	r1, ip
 8002ab4:	08cc      	lsrs	r4, r1, #3
 8002ab6:	e7a2      	b.n	80029fe <__aeabi_dsub+0x2f6>
 8002ab8:	4dc8      	ldr	r5, [pc, #800]	; (8002ddc <__aeabi_dsub+0x6d4>)
 8002aba:	42a8      	cmp	r0, r5
 8002abc:	d100      	bne.n	8002ac0 <__aeabi_dsub+0x3b8>
 8002abe:	e0cf      	b.n	8002c60 <__aeabi_dsub+0x558>
 8002ac0:	2580      	movs	r5, #128	; 0x80
 8002ac2:	4664      	mov	r4, ip
 8002ac4:	042d      	lsls	r5, r5, #16
 8002ac6:	432c      	orrs	r4, r5
 8002ac8:	46a4      	mov	ip, r4
 8002aca:	2a38      	cmp	r2, #56	; 0x38
 8002acc:	dc56      	bgt.n	8002b7c <__aeabi_dsub+0x474>
 8002ace:	2a1f      	cmp	r2, #31
 8002ad0:	dd00      	ble.n	8002ad4 <__aeabi_dsub+0x3cc>
 8002ad2:	e0d1      	b.n	8002c78 <__aeabi_dsub+0x570>
 8002ad4:	2520      	movs	r5, #32
 8002ad6:	001e      	movs	r6, r3
 8002ad8:	1aad      	subs	r5, r5, r2
 8002ada:	4664      	mov	r4, ip
 8002adc:	40ab      	lsls	r3, r5
 8002ade:	40ac      	lsls	r4, r5
 8002ae0:	40d6      	lsrs	r6, r2
 8002ae2:	1e5d      	subs	r5, r3, #1
 8002ae4:	41ab      	sbcs	r3, r5
 8002ae6:	4334      	orrs	r4, r6
 8002ae8:	4323      	orrs	r3, r4
 8002aea:	4664      	mov	r4, ip
 8002aec:	40d4      	lsrs	r4, r2
 8002aee:	1b09      	subs	r1, r1, r4
 8002af0:	e049      	b.n	8002b86 <__aeabi_dsub+0x47e>
 8002af2:	4660      	mov	r0, ip
 8002af4:	1bdc      	subs	r4, r3, r7
 8002af6:	1a46      	subs	r6, r0, r1
 8002af8:	42a3      	cmp	r3, r4
 8002afa:	4180      	sbcs	r0, r0
 8002afc:	4240      	negs	r0, r0
 8002afe:	4681      	mov	r9, r0
 8002b00:	0030      	movs	r0, r6
 8002b02:	464e      	mov	r6, r9
 8002b04:	1b80      	subs	r0, r0, r6
 8002b06:	4681      	mov	r9, r0
 8002b08:	0200      	lsls	r0, r0, #8
 8002b0a:	d476      	bmi.n	8002bfa <__aeabi_dsub+0x4f2>
 8002b0c:	464b      	mov	r3, r9
 8002b0e:	4323      	orrs	r3, r4
 8002b10:	d000      	beq.n	8002b14 <__aeabi_dsub+0x40c>
 8002b12:	e652      	b.n	80027ba <__aeabi_dsub+0xb2>
 8002b14:	2400      	movs	r4, #0
 8002b16:	2500      	movs	r5, #0
 8002b18:	e771      	b.n	80029fe <__aeabi_dsub+0x2f6>
 8002b1a:	4339      	orrs	r1, r7
 8002b1c:	000c      	movs	r4, r1
 8002b1e:	1e62      	subs	r2, r4, #1
 8002b20:	4194      	sbcs	r4, r2
 8002b22:	18e4      	adds	r4, r4, r3
 8002b24:	429c      	cmp	r4, r3
 8002b26:	419b      	sbcs	r3, r3
 8002b28:	425b      	negs	r3, r3
 8002b2a:	4463      	add	r3, ip
 8002b2c:	4699      	mov	r9, r3
 8002b2e:	464b      	mov	r3, r9
 8002b30:	021b      	lsls	r3, r3, #8
 8002b32:	d400      	bmi.n	8002b36 <__aeabi_dsub+0x42e>
 8002b34:	e756      	b.n	80029e4 <__aeabi_dsub+0x2dc>
 8002b36:	2301      	movs	r3, #1
 8002b38:	469c      	mov	ip, r3
 8002b3a:	4ba8      	ldr	r3, [pc, #672]	; (8002ddc <__aeabi_dsub+0x6d4>)
 8002b3c:	44e0      	add	r8, ip
 8002b3e:	4598      	cmp	r8, r3
 8002b40:	d038      	beq.n	8002bb4 <__aeabi_dsub+0x4ac>
 8002b42:	464b      	mov	r3, r9
 8002b44:	48a6      	ldr	r0, [pc, #664]	; (8002de0 <__aeabi_dsub+0x6d8>)
 8002b46:	2201      	movs	r2, #1
 8002b48:	4003      	ands	r3, r0
 8002b4a:	0018      	movs	r0, r3
 8002b4c:	0863      	lsrs	r3, r4, #1
 8002b4e:	4014      	ands	r4, r2
 8002b50:	431c      	orrs	r4, r3
 8002b52:	07c3      	lsls	r3, r0, #31
 8002b54:	431c      	orrs	r4, r3
 8002b56:	0843      	lsrs	r3, r0, #1
 8002b58:	4699      	mov	r9, r3
 8002b5a:	e657      	b.n	800280c <__aeabi_dsub+0x104>
 8002b5c:	0010      	movs	r0, r2
 8002b5e:	000e      	movs	r6, r1
 8002b60:	3820      	subs	r0, #32
 8002b62:	40c6      	lsrs	r6, r0
 8002b64:	2a20      	cmp	r2, #32
 8002b66:	d004      	beq.n	8002b72 <__aeabi_dsub+0x46a>
 8002b68:	2040      	movs	r0, #64	; 0x40
 8002b6a:	1a82      	subs	r2, r0, r2
 8002b6c:	4091      	lsls	r1, r2
 8002b6e:	430f      	orrs	r7, r1
 8002b70:	46b9      	mov	r9, r7
 8002b72:	464f      	mov	r7, r9
 8002b74:	1e7a      	subs	r2, r7, #1
 8002b76:	4197      	sbcs	r7, r2
 8002b78:	4337      	orrs	r7, r6
 8002b7a:	e60f      	b.n	800279c <__aeabi_dsub+0x94>
 8002b7c:	4662      	mov	r2, ip
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	0013      	movs	r3, r2
 8002b82:	1e5a      	subs	r2, r3, #1
 8002b84:	4193      	sbcs	r3, r2
 8002b86:	1afc      	subs	r4, r7, r3
 8002b88:	42a7      	cmp	r7, r4
 8002b8a:	41bf      	sbcs	r7, r7
 8002b8c:	427f      	negs	r7, r7
 8002b8e:	1bcb      	subs	r3, r1, r7
 8002b90:	4699      	mov	r9, r3
 8002b92:	465d      	mov	r5, fp
 8002b94:	4680      	mov	r8, r0
 8002b96:	e608      	b.n	80027aa <__aeabi_dsub+0xa2>
 8002b98:	4666      	mov	r6, ip
 8002b9a:	431e      	orrs	r6, r3
 8002b9c:	d100      	bne.n	8002ba0 <__aeabi_dsub+0x498>
 8002b9e:	e0be      	b.n	8002d1e <__aeabi_dsub+0x616>
 8002ba0:	1e56      	subs	r6, r2, #1
 8002ba2:	2a01      	cmp	r2, #1
 8002ba4:	d100      	bne.n	8002ba8 <__aeabi_dsub+0x4a0>
 8002ba6:	e109      	b.n	8002dbc <__aeabi_dsub+0x6b4>
 8002ba8:	4c8c      	ldr	r4, [pc, #560]	; (8002ddc <__aeabi_dsub+0x6d4>)
 8002baa:	42a2      	cmp	r2, r4
 8002bac:	d100      	bne.n	8002bb0 <__aeabi_dsub+0x4a8>
 8002bae:	e119      	b.n	8002de4 <__aeabi_dsub+0x6dc>
 8002bb0:	0032      	movs	r2, r6
 8002bb2:	e6c1      	b.n	8002938 <__aeabi_dsub+0x230>
 8002bb4:	4642      	mov	r2, r8
 8002bb6:	2400      	movs	r4, #0
 8002bb8:	2300      	movs	r3, #0
 8002bba:	e648      	b.n	800284e <__aeabi_dsub+0x146>
 8002bbc:	2020      	movs	r0, #32
 8002bbe:	000c      	movs	r4, r1
 8002bc0:	1a80      	subs	r0, r0, r2
 8002bc2:	003e      	movs	r6, r7
 8002bc4:	4087      	lsls	r7, r0
 8002bc6:	4084      	lsls	r4, r0
 8002bc8:	40d6      	lsrs	r6, r2
 8002bca:	1e78      	subs	r0, r7, #1
 8002bcc:	4187      	sbcs	r7, r0
 8002bce:	40d1      	lsrs	r1, r2
 8002bd0:	4334      	orrs	r4, r6
 8002bd2:	433c      	orrs	r4, r7
 8002bd4:	448c      	add	ip, r1
 8002bd6:	e7a4      	b.n	8002b22 <__aeabi_dsub+0x41a>
 8002bd8:	4a80      	ldr	r2, [pc, #512]	; (8002ddc <__aeabi_dsub+0x6d4>)
 8002bda:	4290      	cmp	r0, r2
 8002bdc:	d100      	bne.n	8002be0 <__aeabi_dsub+0x4d8>
 8002bde:	e0e9      	b.n	8002db4 <__aeabi_dsub+0x6ac>
 8002be0:	19df      	adds	r7, r3, r7
 8002be2:	429f      	cmp	r7, r3
 8002be4:	419b      	sbcs	r3, r3
 8002be6:	4461      	add	r1, ip
 8002be8:	425b      	negs	r3, r3
 8002bea:	18c9      	adds	r1, r1, r3
 8002bec:	07cc      	lsls	r4, r1, #31
 8002bee:	087f      	lsrs	r7, r7, #1
 8002bf0:	084b      	lsrs	r3, r1, #1
 8002bf2:	4699      	mov	r9, r3
 8002bf4:	4680      	mov	r8, r0
 8002bf6:	433c      	orrs	r4, r7
 8002bf8:	e6f4      	b.n	80029e4 <__aeabi_dsub+0x2dc>
 8002bfa:	1afc      	subs	r4, r7, r3
 8002bfc:	42a7      	cmp	r7, r4
 8002bfe:	41bf      	sbcs	r7, r7
 8002c00:	4663      	mov	r3, ip
 8002c02:	427f      	negs	r7, r7
 8002c04:	1ac9      	subs	r1, r1, r3
 8002c06:	1bcb      	subs	r3, r1, r7
 8002c08:	4699      	mov	r9, r3
 8002c0a:	465d      	mov	r5, fp
 8002c0c:	e5d5      	b.n	80027ba <__aeabi_dsub+0xb2>
 8002c0e:	08ff      	lsrs	r7, r7, #3
 8002c10:	074b      	lsls	r3, r1, #29
 8002c12:	465d      	mov	r5, fp
 8002c14:	433b      	orrs	r3, r7
 8002c16:	08cc      	lsrs	r4, r1, #3
 8002c18:	e6ee      	b.n	80029f8 <__aeabi_dsub+0x2f0>
 8002c1a:	4662      	mov	r2, ip
 8002c1c:	431a      	orrs	r2, r3
 8002c1e:	d000      	beq.n	8002c22 <__aeabi_dsub+0x51a>
 8002c20:	e082      	b.n	8002d28 <__aeabi_dsub+0x620>
 8002c22:	000b      	movs	r3, r1
 8002c24:	433b      	orrs	r3, r7
 8002c26:	d11b      	bne.n	8002c60 <__aeabi_dsub+0x558>
 8002c28:	2480      	movs	r4, #128	; 0x80
 8002c2a:	2500      	movs	r5, #0
 8002c2c:	0324      	lsls	r4, r4, #12
 8002c2e:	e6f9      	b.n	8002a24 <__aeabi_dsub+0x31c>
 8002c30:	19dc      	adds	r4, r3, r7
 8002c32:	429c      	cmp	r4, r3
 8002c34:	419b      	sbcs	r3, r3
 8002c36:	4461      	add	r1, ip
 8002c38:	4689      	mov	r9, r1
 8002c3a:	425b      	negs	r3, r3
 8002c3c:	4499      	add	r9, r3
 8002c3e:	464b      	mov	r3, r9
 8002c40:	021b      	lsls	r3, r3, #8
 8002c42:	d444      	bmi.n	8002cce <__aeabi_dsub+0x5c6>
 8002c44:	2301      	movs	r3, #1
 8002c46:	4698      	mov	r8, r3
 8002c48:	e6cc      	b.n	80029e4 <__aeabi_dsub+0x2dc>
 8002c4a:	1bdc      	subs	r4, r3, r7
 8002c4c:	4662      	mov	r2, ip
 8002c4e:	42a3      	cmp	r3, r4
 8002c50:	419b      	sbcs	r3, r3
 8002c52:	1a51      	subs	r1, r2, r1
 8002c54:	425b      	negs	r3, r3
 8002c56:	1acb      	subs	r3, r1, r3
 8002c58:	4699      	mov	r9, r3
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	4698      	mov	r8, r3
 8002c5e:	e5a4      	b.n	80027aa <__aeabi_dsub+0xa2>
 8002c60:	08ff      	lsrs	r7, r7, #3
 8002c62:	074b      	lsls	r3, r1, #29
 8002c64:	465d      	mov	r5, fp
 8002c66:	433b      	orrs	r3, r7
 8002c68:	08cc      	lsrs	r4, r1, #3
 8002c6a:	e6d7      	b.n	8002a1c <__aeabi_dsub+0x314>
 8002c6c:	4662      	mov	r2, ip
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	0014      	movs	r4, r2
 8002c72:	1e63      	subs	r3, r4, #1
 8002c74:	419c      	sbcs	r4, r3
 8002c76:	e679      	b.n	800296c <__aeabi_dsub+0x264>
 8002c78:	0015      	movs	r5, r2
 8002c7a:	4664      	mov	r4, ip
 8002c7c:	3d20      	subs	r5, #32
 8002c7e:	40ec      	lsrs	r4, r5
 8002c80:	46a0      	mov	r8, r4
 8002c82:	2a20      	cmp	r2, #32
 8002c84:	d005      	beq.n	8002c92 <__aeabi_dsub+0x58a>
 8002c86:	2540      	movs	r5, #64	; 0x40
 8002c88:	4664      	mov	r4, ip
 8002c8a:	1aaa      	subs	r2, r5, r2
 8002c8c:	4094      	lsls	r4, r2
 8002c8e:	4323      	orrs	r3, r4
 8002c90:	469a      	mov	sl, r3
 8002c92:	4654      	mov	r4, sl
 8002c94:	1e63      	subs	r3, r4, #1
 8002c96:	419c      	sbcs	r4, r3
 8002c98:	4643      	mov	r3, r8
 8002c9a:	4323      	orrs	r3, r4
 8002c9c:	e773      	b.n	8002b86 <__aeabi_dsub+0x47e>
 8002c9e:	4662      	mov	r2, ip
 8002ca0:	431a      	orrs	r2, r3
 8002ca2:	d023      	beq.n	8002cec <__aeabi_dsub+0x5e4>
 8002ca4:	000a      	movs	r2, r1
 8002ca6:	433a      	orrs	r2, r7
 8002ca8:	d000      	beq.n	8002cac <__aeabi_dsub+0x5a4>
 8002caa:	e0a0      	b.n	8002dee <__aeabi_dsub+0x6e6>
 8002cac:	4662      	mov	r2, ip
 8002cae:	08db      	lsrs	r3, r3, #3
 8002cb0:	0752      	lsls	r2, r2, #29
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	4662      	mov	r2, ip
 8002cb6:	08d4      	lsrs	r4, r2, #3
 8002cb8:	e6b0      	b.n	8002a1c <__aeabi_dsub+0x314>
 8002cba:	000b      	movs	r3, r1
 8002cbc:	433b      	orrs	r3, r7
 8002cbe:	d100      	bne.n	8002cc2 <__aeabi_dsub+0x5ba>
 8002cc0:	e728      	b.n	8002b14 <__aeabi_dsub+0x40c>
 8002cc2:	08ff      	lsrs	r7, r7, #3
 8002cc4:	074b      	lsls	r3, r1, #29
 8002cc6:	465d      	mov	r5, fp
 8002cc8:	433b      	orrs	r3, r7
 8002cca:	08cc      	lsrs	r4, r1, #3
 8002ccc:	e697      	b.n	80029fe <__aeabi_dsub+0x2f6>
 8002cce:	2302      	movs	r3, #2
 8002cd0:	4698      	mov	r8, r3
 8002cd2:	e736      	b.n	8002b42 <__aeabi_dsub+0x43a>
 8002cd4:	1afc      	subs	r4, r7, r3
 8002cd6:	42a7      	cmp	r7, r4
 8002cd8:	41bf      	sbcs	r7, r7
 8002cda:	4663      	mov	r3, ip
 8002cdc:	427f      	negs	r7, r7
 8002cde:	1ac9      	subs	r1, r1, r3
 8002ce0:	1bcb      	subs	r3, r1, r7
 8002ce2:	4699      	mov	r9, r3
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	465d      	mov	r5, fp
 8002ce8:	4698      	mov	r8, r3
 8002cea:	e55e      	b.n	80027aa <__aeabi_dsub+0xa2>
 8002cec:	074b      	lsls	r3, r1, #29
 8002cee:	08ff      	lsrs	r7, r7, #3
 8002cf0:	433b      	orrs	r3, r7
 8002cf2:	08cc      	lsrs	r4, r1, #3
 8002cf4:	e692      	b.n	8002a1c <__aeabi_dsub+0x314>
 8002cf6:	1bdc      	subs	r4, r3, r7
 8002cf8:	4660      	mov	r0, ip
 8002cfa:	42a3      	cmp	r3, r4
 8002cfc:	41b6      	sbcs	r6, r6
 8002cfe:	1a40      	subs	r0, r0, r1
 8002d00:	4276      	negs	r6, r6
 8002d02:	1b80      	subs	r0, r0, r6
 8002d04:	4681      	mov	r9, r0
 8002d06:	0200      	lsls	r0, r0, #8
 8002d08:	d560      	bpl.n	8002dcc <__aeabi_dsub+0x6c4>
 8002d0a:	1afc      	subs	r4, r7, r3
 8002d0c:	42a7      	cmp	r7, r4
 8002d0e:	41bf      	sbcs	r7, r7
 8002d10:	4663      	mov	r3, ip
 8002d12:	427f      	negs	r7, r7
 8002d14:	1ac9      	subs	r1, r1, r3
 8002d16:	1bcb      	subs	r3, r1, r7
 8002d18:	4699      	mov	r9, r3
 8002d1a:	465d      	mov	r5, fp
 8002d1c:	e576      	b.n	800280c <__aeabi_dsub+0x104>
 8002d1e:	08ff      	lsrs	r7, r7, #3
 8002d20:	074b      	lsls	r3, r1, #29
 8002d22:	433b      	orrs	r3, r7
 8002d24:	08cc      	lsrs	r4, r1, #3
 8002d26:	e667      	b.n	80029f8 <__aeabi_dsub+0x2f0>
 8002d28:	000a      	movs	r2, r1
 8002d2a:	08db      	lsrs	r3, r3, #3
 8002d2c:	433a      	orrs	r2, r7
 8002d2e:	d100      	bne.n	8002d32 <__aeabi_dsub+0x62a>
 8002d30:	e66f      	b.n	8002a12 <__aeabi_dsub+0x30a>
 8002d32:	4662      	mov	r2, ip
 8002d34:	0752      	lsls	r2, r2, #29
 8002d36:	4313      	orrs	r3, r2
 8002d38:	4662      	mov	r2, ip
 8002d3a:	08d4      	lsrs	r4, r2, #3
 8002d3c:	2280      	movs	r2, #128	; 0x80
 8002d3e:	0312      	lsls	r2, r2, #12
 8002d40:	4214      	tst	r4, r2
 8002d42:	d007      	beq.n	8002d54 <__aeabi_dsub+0x64c>
 8002d44:	08c8      	lsrs	r0, r1, #3
 8002d46:	4210      	tst	r0, r2
 8002d48:	d104      	bne.n	8002d54 <__aeabi_dsub+0x64c>
 8002d4a:	465d      	mov	r5, fp
 8002d4c:	0004      	movs	r4, r0
 8002d4e:	08fb      	lsrs	r3, r7, #3
 8002d50:	0749      	lsls	r1, r1, #29
 8002d52:	430b      	orrs	r3, r1
 8002d54:	0f5a      	lsrs	r2, r3, #29
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	08db      	lsrs	r3, r3, #3
 8002d5a:	0752      	lsls	r2, r2, #29
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	e65d      	b.n	8002a1c <__aeabi_dsub+0x314>
 8002d60:	074b      	lsls	r3, r1, #29
 8002d62:	08ff      	lsrs	r7, r7, #3
 8002d64:	433b      	orrs	r3, r7
 8002d66:	08cc      	lsrs	r4, r1, #3
 8002d68:	e649      	b.n	80029fe <__aeabi_dsub+0x2f6>
 8002d6a:	19dc      	adds	r4, r3, r7
 8002d6c:	429c      	cmp	r4, r3
 8002d6e:	419b      	sbcs	r3, r3
 8002d70:	4461      	add	r1, ip
 8002d72:	4689      	mov	r9, r1
 8002d74:	425b      	negs	r3, r3
 8002d76:	4499      	add	r9, r3
 8002d78:	464b      	mov	r3, r9
 8002d7a:	021b      	lsls	r3, r3, #8
 8002d7c:	d400      	bmi.n	8002d80 <__aeabi_dsub+0x678>
 8002d7e:	e631      	b.n	80029e4 <__aeabi_dsub+0x2dc>
 8002d80:	464a      	mov	r2, r9
 8002d82:	4b17      	ldr	r3, [pc, #92]	; (8002de0 <__aeabi_dsub+0x6d8>)
 8002d84:	401a      	ands	r2, r3
 8002d86:	2301      	movs	r3, #1
 8002d88:	4691      	mov	r9, r2
 8002d8a:	4698      	mov	r8, r3
 8002d8c:	e62a      	b.n	80029e4 <__aeabi_dsub+0x2dc>
 8002d8e:	0016      	movs	r6, r2
 8002d90:	4664      	mov	r4, ip
 8002d92:	3e20      	subs	r6, #32
 8002d94:	40f4      	lsrs	r4, r6
 8002d96:	46a0      	mov	r8, r4
 8002d98:	2a20      	cmp	r2, #32
 8002d9a:	d005      	beq.n	8002da8 <__aeabi_dsub+0x6a0>
 8002d9c:	2640      	movs	r6, #64	; 0x40
 8002d9e:	4664      	mov	r4, ip
 8002da0:	1ab2      	subs	r2, r6, r2
 8002da2:	4094      	lsls	r4, r2
 8002da4:	4323      	orrs	r3, r4
 8002da6:	469a      	mov	sl, r3
 8002da8:	4654      	mov	r4, sl
 8002daa:	1e63      	subs	r3, r4, #1
 8002dac:	419c      	sbcs	r4, r3
 8002dae:	4643      	mov	r3, r8
 8002db0:	431c      	orrs	r4, r3
 8002db2:	e5db      	b.n	800296c <__aeabi_dsub+0x264>
 8002db4:	0002      	movs	r2, r0
 8002db6:	2400      	movs	r4, #0
 8002db8:	2300      	movs	r3, #0
 8002dba:	e548      	b.n	800284e <__aeabi_dsub+0x146>
 8002dbc:	19dc      	adds	r4, r3, r7
 8002dbe:	42bc      	cmp	r4, r7
 8002dc0:	41bf      	sbcs	r7, r7
 8002dc2:	4461      	add	r1, ip
 8002dc4:	4689      	mov	r9, r1
 8002dc6:	427f      	negs	r7, r7
 8002dc8:	44b9      	add	r9, r7
 8002dca:	e738      	b.n	8002c3e <__aeabi_dsub+0x536>
 8002dcc:	464b      	mov	r3, r9
 8002dce:	4323      	orrs	r3, r4
 8002dd0:	d100      	bne.n	8002dd4 <__aeabi_dsub+0x6cc>
 8002dd2:	e69f      	b.n	8002b14 <__aeabi_dsub+0x40c>
 8002dd4:	e606      	b.n	80029e4 <__aeabi_dsub+0x2dc>
 8002dd6:	46c0      	nop			; (mov r8, r8)
 8002dd8:	000007fe 	.word	0x000007fe
 8002ddc:	000007ff 	.word	0x000007ff
 8002de0:	ff7fffff 	.word	0xff7fffff
 8002de4:	08ff      	lsrs	r7, r7, #3
 8002de6:	074b      	lsls	r3, r1, #29
 8002de8:	433b      	orrs	r3, r7
 8002dea:	08cc      	lsrs	r4, r1, #3
 8002dec:	e616      	b.n	8002a1c <__aeabi_dsub+0x314>
 8002dee:	4662      	mov	r2, ip
 8002df0:	08db      	lsrs	r3, r3, #3
 8002df2:	0752      	lsls	r2, r2, #29
 8002df4:	4313      	orrs	r3, r2
 8002df6:	4662      	mov	r2, ip
 8002df8:	08d4      	lsrs	r4, r2, #3
 8002dfa:	2280      	movs	r2, #128	; 0x80
 8002dfc:	0312      	lsls	r2, r2, #12
 8002dfe:	4214      	tst	r4, r2
 8002e00:	d007      	beq.n	8002e12 <__aeabi_dsub+0x70a>
 8002e02:	08c8      	lsrs	r0, r1, #3
 8002e04:	4210      	tst	r0, r2
 8002e06:	d104      	bne.n	8002e12 <__aeabi_dsub+0x70a>
 8002e08:	465d      	mov	r5, fp
 8002e0a:	0004      	movs	r4, r0
 8002e0c:	08fb      	lsrs	r3, r7, #3
 8002e0e:	0749      	lsls	r1, r1, #29
 8002e10:	430b      	orrs	r3, r1
 8002e12:	0f5a      	lsrs	r2, r3, #29
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	0752      	lsls	r2, r2, #29
 8002e18:	08db      	lsrs	r3, r3, #3
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	e5fe      	b.n	8002a1c <__aeabi_dsub+0x314>
 8002e1e:	2300      	movs	r3, #0
 8002e20:	4a01      	ldr	r2, [pc, #4]	; (8002e28 <__aeabi_dsub+0x720>)
 8002e22:	001c      	movs	r4, r3
 8002e24:	e513      	b.n	800284e <__aeabi_dsub+0x146>
 8002e26:	46c0      	nop			; (mov r8, r8)
 8002e28:	000007ff 	.word	0x000007ff

08002e2c <__aeabi_dcmpun>:
 8002e2c:	b570      	push	{r4, r5, r6, lr}
 8002e2e:	0005      	movs	r5, r0
 8002e30:	480c      	ldr	r0, [pc, #48]	; (8002e64 <__aeabi_dcmpun+0x38>)
 8002e32:	031c      	lsls	r4, r3, #12
 8002e34:	0016      	movs	r6, r2
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	030a      	lsls	r2, r1, #12
 8002e3a:	0049      	lsls	r1, r1, #1
 8002e3c:	0b12      	lsrs	r2, r2, #12
 8002e3e:	0d49      	lsrs	r1, r1, #21
 8002e40:	0b24      	lsrs	r4, r4, #12
 8002e42:	0d5b      	lsrs	r3, r3, #21
 8002e44:	4281      	cmp	r1, r0
 8002e46:	d008      	beq.n	8002e5a <__aeabi_dcmpun+0x2e>
 8002e48:	4a06      	ldr	r2, [pc, #24]	; (8002e64 <__aeabi_dcmpun+0x38>)
 8002e4a:	2000      	movs	r0, #0
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d103      	bne.n	8002e58 <__aeabi_dcmpun+0x2c>
 8002e50:	0020      	movs	r0, r4
 8002e52:	4330      	orrs	r0, r6
 8002e54:	1e43      	subs	r3, r0, #1
 8002e56:	4198      	sbcs	r0, r3
 8002e58:	bd70      	pop	{r4, r5, r6, pc}
 8002e5a:	2001      	movs	r0, #1
 8002e5c:	432a      	orrs	r2, r5
 8002e5e:	d1fb      	bne.n	8002e58 <__aeabi_dcmpun+0x2c>
 8002e60:	e7f2      	b.n	8002e48 <__aeabi_dcmpun+0x1c>
 8002e62:	46c0      	nop			; (mov r8, r8)
 8002e64:	000007ff 	.word	0x000007ff

08002e68 <__aeabi_d2iz>:
 8002e68:	000a      	movs	r2, r1
 8002e6a:	b530      	push	{r4, r5, lr}
 8002e6c:	4c13      	ldr	r4, [pc, #76]	; (8002ebc <__aeabi_d2iz+0x54>)
 8002e6e:	0053      	lsls	r3, r2, #1
 8002e70:	0309      	lsls	r1, r1, #12
 8002e72:	0005      	movs	r5, r0
 8002e74:	0b09      	lsrs	r1, r1, #12
 8002e76:	2000      	movs	r0, #0
 8002e78:	0d5b      	lsrs	r3, r3, #21
 8002e7a:	0fd2      	lsrs	r2, r2, #31
 8002e7c:	42a3      	cmp	r3, r4
 8002e7e:	dd04      	ble.n	8002e8a <__aeabi_d2iz+0x22>
 8002e80:	480f      	ldr	r0, [pc, #60]	; (8002ec0 <__aeabi_d2iz+0x58>)
 8002e82:	4283      	cmp	r3, r0
 8002e84:	dd02      	ble.n	8002e8c <__aeabi_d2iz+0x24>
 8002e86:	4b0f      	ldr	r3, [pc, #60]	; (8002ec4 <__aeabi_d2iz+0x5c>)
 8002e88:	18d0      	adds	r0, r2, r3
 8002e8a:	bd30      	pop	{r4, r5, pc}
 8002e8c:	2080      	movs	r0, #128	; 0x80
 8002e8e:	0340      	lsls	r0, r0, #13
 8002e90:	4301      	orrs	r1, r0
 8002e92:	480d      	ldr	r0, [pc, #52]	; (8002ec8 <__aeabi_d2iz+0x60>)
 8002e94:	1ac0      	subs	r0, r0, r3
 8002e96:	281f      	cmp	r0, #31
 8002e98:	dd08      	ble.n	8002eac <__aeabi_d2iz+0x44>
 8002e9a:	480c      	ldr	r0, [pc, #48]	; (8002ecc <__aeabi_d2iz+0x64>)
 8002e9c:	1ac3      	subs	r3, r0, r3
 8002e9e:	40d9      	lsrs	r1, r3
 8002ea0:	000b      	movs	r3, r1
 8002ea2:	4258      	negs	r0, r3
 8002ea4:	2a00      	cmp	r2, #0
 8002ea6:	d1f0      	bne.n	8002e8a <__aeabi_d2iz+0x22>
 8002ea8:	0018      	movs	r0, r3
 8002eaa:	e7ee      	b.n	8002e8a <__aeabi_d2iz+0x22>
 8002eac:	4c08      	ldr	r4, [pc, #32]	; (8002ed0 <__aeabi_d2iz+0x68>)
 8002eae:	40c5      	lsrs	r5, r0
 8002eb0:	46a4      	mov	ip, r4
 8002eb2:	4463      	add	r3, ip
 8002eb4:	4099      	lsls	r1, r3
 8002eb6:	000b      	movs	r3, r1
 8002eb8:	432b      	orrs	r3, r5
 8002eba:	e7f2      	b.n	8002ea2 <__aeabi_d2iz+0x3a>
 8002ebc:	000003fe 	.word	0x000003fe
 8002ec0:	0000041d 	.word	0x0000041d
 8002ec4:	7fffffff 	.word	0x7fffffff
 8002ec8:	00000433 	.word	0x00000433
 8002ecc:	00000413 	.word	0x00000413
 8002ed0:	fffffbed 	.word	0xfffffbed

08002ed4 <__aeabi_i2d>:
 8002ed4:	b570      	push	{r4, r5, r6, lr}
 8002ed6:	2800      	cmp	r0, #0
 8002ed8:	d016      	beq.n	8002f08 <__aeabi_i2d+0x34>
 8002eda:	17c3      	asrs	r3, r0, #31
 8002edc:	18c5      	adds	r5, r0, r3
 8002ede:	405d      	eors	r5, r3
 8002ee0:	0fc4      	lsrs	r4, r0, #31
 8002ee2:	0028      	movs	r0, r5
 8002ee4:	f000 f91c 	bl	8003120 <__clzsi2>
 8002ee8:	4a11      	ldr	r2, [pc, #68]	; (8002f30 <__aeabi_i2d+0x5c>)
 8002eea:	1a12      	subs	r2, r2, r0
 8002eec:	280a      	cmp	r0, #10
 8002eee:	dc16      	bgt.n	8002f1e <__aeabi_i2d+0x4a>
 8002ef0:	0003      	movs	r3, r0
 8002ef2:	002e      	movs	r6, r5
 8002ef4:	3315      	adds	r3, #21
 8002ef6:	409e      	lsls	r6, r3
 8002ef8:	230b      	movs	r3, #11
 8002efa:	1a18      	subs	r0, r3, r0
 8002efc:	40c5      	lsrs	r5, r0
 8002efe:	0552      	lsls	r2, r2, #21
 8002f00:	032d      	lsls	r5, r5, #12
 8002f02:	0b2d      	lsrs	r5, r5, #12
 8002f04:	0d53      	lsrs	r3, r2, #21
 8002f06:	e003      	b.n	8002f10 <__aeabi_i2d+0x3c>
 8002f08:	2400      	movs	r4, #0
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	2500      	movs	r5, #0
 8002f0e:	2600      	movs	r6, #0
 8002f10:	051b      	lsls	r3, r3, #20
 8002f12:	432b      	orrs	r3, r5
 8002f14:	07e4      	lsls	r4, r4, #31
 8002f16:	4323      	orrs	r3, r4
 8002f18:	0030      	movs	r0, r6
 8002f1a:	0019      	movs	r1, r3
 8002f1c:	bd70      	pop	{r4, r5, r6, pc}
 8002f1e:	380b      	subs	r0, #11
 8002f20:	4085      	lsls	r5, r0
 8002f22:	0552      	lsls	r2, r2, #21
 8002f24:	032d      	lsls	r5, r5, #12
 8002f26:	2600      	movs	r6, #0
 8002f28:	0b2d      	lsrs	r5, r5, #12
 8002f2a:	0d53      	lsrs	r3, r2, #21
 8002f2c:	e7f0      	b.n	8002f10 <__aeabi_i2d+0x3c>
 8002f2e:	46c0      	nop			; (mov r8, r8)
 8002f30:	0000041e 	.word	0x0000041e

08002f34 <__aeabi_ui2d>:
 8002f34:	b510      	push	{r4, lr}
 8002f36:	1e04      	subs	r4, r0, #0
 8002f38:	d010      	beq.n	8002f5c <__aeabi_ui2d+0x28>
 8002f3a:	f000 f8f1 	bl	8003120 <__clzsi2>
 8002f3e:	4b0f      	ldr	r3, [pc, #60]	; (8002f7c <__aeabi_ui2d+0x48>)
 8002f40:	1a1b      	subs	r3, r3, r0
 8002f42:	280a      	cmp	r0, #10
 8002f44:	dc11      	bgt.n	8002f6a <__aeabi_ui2d+0x36>
 8002f46:	220b      	movs	r2, #11
 8002f48:	0021      	movs	r1, r4
 8002f4a:	1a12      	subs	r2, r2, r0
 8002f4c:	40d1      	lsrs	r1, r2
 8002f4e:	3015      	adds	r0, #21
 8002f50:	030a      	lsls	r2, r1, #12
 8002f52:	055b      	lsls	r3, r3, #21
 8002f54:	4084      	lsls	r4, r0
 8002f56:	0b12      	lsrs	r2, r2, #12
 8002f58:	0d5b      	lsrs	r3, r3, #21
 8002f5a:	e001      	b.n	8002f60 <__aeabi_ui2d+0x2c>
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	2200      	movs	r2, #0
 8002f60:	051b      	lsls	r3, r3, #20
 8002f62:	4313      	orrs	r3, r2
 8002f64:	0020      	movs	r0, r4
 8002f66:	0019      	movs	r1, r3
 8002f68:	bd10      	pop	{r4, pc}
 8002f6a:	0022      	movs	r2, r4
 8002f6c:	380b      	subs	r0, #11
 8002f6e:	4082      	lsls	r2, r0
 8002f70:	055b      	lsls	r3, r3, #21
 8002f72:	0312      	lsls	r2, r2, #12
 8002f74:	2400      	movs	r4, #0
 8002f76:	0b12      	lsrs	r2, r2, #12
 8002f78:	0d5b      	lsrs	r3, r3, #21
 8002f7a:	e7f1      	b.n	8002f60 <__aeabi_ui2d+0x2c>
 8002f7c:	0000041e 	.word	0x0000041e

08002f80 <__aeabi_f2d>:
 8002f80:	b570      	push	{r4, r5, r6, lr}
 8002f82:	0043      	lsls	r3, r0, #1
 8002f84:	0246      	lsls	r6, r0, #9
 8002f86:	0fc4      	lsrs	r4, r0, #31
 8002f88:	20fe      	movs	r0, #254	; 0xfe
 8002f8a:	0e1b      	lsrs	r3, r3, #24
 8002f8c:	1c59      	adds	r1, r3, #1
 8002f8e:	0a75      	lsrs	r5, r6, #9
 8002f90:	4208      	tst	r0, r1
 8002f92:	d00c      	beq.n	8002fae <__aeabi_f2d+0x2e>
 8002f94:	22e0      	movs	r2, #224	; 0xe0
 8002f96:	0092      	lsls	r2, r2, #2
 8002f98:	4694      	mov	ip, r2
 8002f9a:	076d      	lsls	r5, r5, #29
 8002f9c:	0b36      	lsrs	r6, r6, #12
 8002f9e:	4463      	add	r3, ip
 8002fa0:	051b      	lsls	r3, r3, #20
 8002fa2:	4333      	orrs	r3, r6
 8002fa4:	07e4      	lsls	r4, r4, #31
 8002fa6:	4323      	orrs	r3, r4
 8002fa8:	0028      	movs	r0, r5
 8002faa:	0019      	movs	r1, r3
 8002fac:	bd70      	pop	{r4, r5, r6, pc}
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d114      	bne.n	8002fdc <__aeabi_f2d+0x5c>
 8002fb2:	2d00      	cmp	r5, #0
 8002fb4:	d01b      	beq.n	8002fee <__aeabi_f2d+0x6e>
 8002fb6:	0028      	movs	r0, r5
 8002fb8:	f000 f8b2 	bl	8003120 <__clzsi2>
 8002fbc:	280a      	cmp	r0, #10
 8002fbe:	dc1c      	bgt.n	8002ffa <__aeabi_f2d+0x7a>
 8002fc0:	230b      	movs	r3, #11
 8002fc2:	002e      	movs	r6, r5
 8002fc4:	1a1b      	subs	r3, r3, r0
 8002fc6:	40de      	lsrs	r6, r3
 8002fc8:	0003      	movs	r3, r0
 8002fca:	3315      	adds	r3, #21
 8002fcc:	409d      	lsls	r5, r3
 8002fce:	4a0e      	ldr	r2, [pc, #56]	; (8003008 <__aeabi_f2d+0x88>)
 8002fd0:	0336      	lsls	r6, r6, #12
 8002fd2:	1a12      	subs	r2, r2, r0
 8002fd4:	0552      	lsls	r2, r2, #21
 8002fd6:	0b36      	lsrs	r6, r6, #12
 8002fd8:	0d53      	lsrs	r3, r2, #21
 8002fda:	e7e1      	b.n	8002fa0 <__aeabi_f2d+0x20>
 8002fdc:	2d00      	cmp	r5, #0
 8002fde:	d009      	beq.n	8002ff4 <__aeabi_f2d+0x74>
 8002fe0:	2280      	movs	r2, #128	; 0x80
 8002fe2:	0b36      	lsrs	r6, r6, #12
 8002fe4:	0312      	lsls	r2, r2, #12
 8002fe6:	4b09      	ldr	r3, [pc, #36]	; (800300c <__aeabi_f2d+0x8c>)
 8002fe8:	076d      	lsls	r5, r5, #29
 8002fea:	4316      	orrs	r6, r2
 8002fec:	e7d8      	b.n	8002fa0 <__aeabi_f2d+0x20>
 8002fee:	2300      	movs	r3, #0
 8002ff0:	2600      	movs	r6, #0
 8002ff2:	e7d5      	b.n	8002fa0 <__aeabi_f2d+0x20>
 8002ff4:	2600      	movs	r6, #0
 8002ff6:	4b05      	ldr	r3, [pc, #20]	; (800300c <__aeabi_f2d+0x8c>)
 8002ff8:	e7d2      	b.n	8002fa0 <__aeabi_f2d+0x20>
 8002ffa:	0003      	movs	r3, r0
 8002ffc:	3b0b      	subs	r3, #11
 8002ffe:	409d      	lsls	r5, r3
 8003000:	002e      	movs	r6, r5
 8003002:	2500      	movs	r5, #0
 8003004:	e7e3      	b.n	8002fce <__aeabi_f2d+0x4e>
 8003006:	46c0      	nop			; (mov r8, r8)
 8003008:	00000389 	.word	0x00000389
 800300c:	000007ff 	.word	0x000007ff

08003010 <__aeabi_d2f>:
 8003010:	0002      	movs	r2, r0
 8003012:	004b      	lsls	r3, r1, #1
 8003014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003016:	0d5b      	lsrs	r3, r3, #21
 8003018:	030c      	lsls	r4, r1, #12
 800301a:	4e3d      	ldr	r6, [pc, #244]	; (8003110 <__aeabi_d2f+0x100>)
 800301c:	0a64      	lsrs	r4, r4, #9
 800301e:	0f40      	lsrs	r0, r0, #29
 8003020:	1c5f      	adds	r7, r3, #1
 8003022:	0fc9      	lsrs	r1, r1, #31
 8003024:	4304      	orrs	r4, r0
 8003026:	00d5      	lsls	r5, r2, #3
 8003028:	4237      	tst	r7, r6
 800302a:	d00a      	beq.n	8003042 <__aeabi_d2f+0x32>
 800302c:	4839      	ldr	r0, [pc, #228]	; (8003114 <__aeabi_d2f+0x104>)
 800302e:	181e      	adds	r6, r3, r0
 8003030:	2efe      	cmp	r6, #254	; 0xfe
 8003032:	dd16      	ble.n	8003062 <__aeabi_d2f+0x52>
 8003034:	20ff      	movs	r0, #255	; 0xff
 8003036:	2400      	movs	r4, #0
 8003038:	05c0      	lsls	r0, r0, #23
 800303a:	4320      	orrs	r0, r4
 800303c:	07c9      	lsls	r1, r1, #31
 800303e:	4308      	orrs	r0, r1
 8003040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003042:	2b00      	cmp	r3, #0
 8003044:	d106      	bne.n	8003054 <__aeabi_d2f+0x44>
 8003046:	432c      	orrs	r4, r5
 8003048:	d026      	beq.n	8003098 <__aeabi_d2f+0x88>
 800304a:	2205      	movs	r2, #5
 800304c:	0192      	lsls	r2, r2, #6
 800304e:	0a54      	lsrs	r4, r2, #9
 8003050:	b2d8      	uxtb	r0, r3
 8003052:	e7f1      	b.n	8003038 <__aeabi_d2f+0x28>
 8003054:	4325      	orrs	r5, r4
 8003056:	d0ed      	beq.n	8003034 <__aeabi_d2f+0x24>
 8003058:	2080      	movs	r0, #128	; 0x80
 800305a:	03c0      	lsls	r0, r0, #15
 800305c:	4304      	orrs	r4, r0
 800305e:	20ff      	movs	r0, #255	; 0xff
 8003060:	e7ea      	b.n	8003038 <__aeabi_d2f+0x28>
 8003062:	2e00      	cmp	r6, #0
 8003064:	dd1b      	ble.n	800309e <__aeabi_d2f+0x8e>
 8003066:	0192      	lsls	r2, r2, #6
 8003068:	1e53      	subs	r3, r2, #1
 800306a:	419a      	sbcs	r2, r3
 800306c:	00e4      	lsls	r4, r4, #3
 800306e:	0f6d      	lsrs	r5, r5, #29
 8003070:	4322      	orrs	r2, r4
 8003072:	432a      	orrs	r2, r5
 8003074:	0753      	lsls	r3, r2, #29
 8003076:	d048      	beq.n	800310a <__aeabi_d2f+0xfa>
 8003078:	230f      	movs	r3, #15
 800307a:	4013      	ands	r3, r2
 800307c:	2b04      	cmp	r3, #4
 800307e:	d000      	beq.n	8003082 <__aeabi_d2f+0x72>
 8003080:	3204      	adds	r2, #4
 8003082:	2380      	movs	r3, #128	; 0x80
 8003084:	04db      	lsls	r3, r3, #19
 8003086:	4013      	ands	r3, r2
 8003088:	d03f      	beq.n	800310a <__aeabi_d2f+0xfa>
 800308a:	1c70      	adds	r0, r6, #1
 800308c:	2efe      	cmp	r6, #254	; 0xfe
 800308e:	d0d1      	beq.n	8003034 <__aeabi_d2f+0x24>
 8003090:	0192      	lsls	r2, r2, #6
 8003092:	0a54      	lsrs	r4, r2, #9
 8003094:	b2c0      	uxtb	r0, r0
 8003096:	e7cf      	b.n	8003038 <__aeabi_d2f+0x28>
 8003098:	2000      	movs	r0, #0
 800309a:	2400      	movs	r4, #0
 800309c:	e7cc      	b.n	8003038 <__aeabi_d2f+0x28>
 800309e:	0032      	movs	r2, r6
 80030a0:	3217      	adds	r2, #23
 80030a2:	db22      	blt.n	80030ea <__aeabi_d2f+0xda>
 80030a4:	2080      	movs	r0, #128	; 0x80
 80030a6:	0400      	lsls	r0, r0, #16
 80030a8:	4320      	orrs	r0, r4
 80030aa:	241e      	movs	r4, #30
 80030ac:	1ba4      	subs	r4, r4, r6
 80030ae:	2c1f      	cmp	r4, #31
 80030b0:	dd1d      	ble.n	80030ee <__aeabi_d2f+0xde>
 80030b2:	2202      	movs	r2, #2
 80030b4:	4252      	negs	r2, r2
 80030b6:	1b96      	subs	r6, r2, r6
 80030b8:	0002      	movs	r2, r0
 80030ba:	40f2      	lsrs	r2, r6
 80030bc:	0016      	movs	r6, r2
 80030be:	2c20      	cmp	r4, #32
 80030c0:	d004      	beq.n	80030cc <__aeabi_d2f+0xbc>
 80030c2:	4a15      	ldr	r2, [pc, #84]	; (8003118 <__aeabi_d2f+0x108>)
 80030c4:	4694      	mov	ip, r2
 80030c6:	4463      	add	r3, ip
 80030c8:	4098      	lsls	r0, r3
 80030ca:	4305      	orrs	r5, r0
 80030cc:	002a      	movs	r2, r5
 80030ce:	1e53      	subs	r3, r2, #1
 80030d0:	419a      	sbcs	r2, r3
 80030d2:	4332      	orrs	r2, r6
 80030d4:	2600      	movs	r6, #0
 80030d6:	0753      	lsls	r3, r2, #29
 80030d8:	d1ce      	bne.n	8003078 <__aeabi_d2f+0x68>
 80030da:	2480      	movs	r4, #128	; 0x80
 80030dc:	0013      	movs	r3, r2
 80030de:	04e4      	lsls	r4, r4, #19
 80030e0:	2001      	movs	r0, #1
 80030e2:	4023      	ands	r3, r4
 80030e4:	4222      	tst	r2, r4
 80030e6:	d1d3      	bne.n	8003090 <__aeabi_d2f+0x80>
 80030e8:	e7b0      	b.n	800304c <__aeabi_d2f+0x3c>
 80030ea:	2300      	movs	r3, #0
 80030ec:	e7ad      	b.n	800304a <__aeabi_d2f+0x3a>
 80030ee:	4a0b      	ldr	r2, [pc, #44]	; (800311c <__aeabi_d2f+0x10c>)
 80030f0:	4694      	mov	ip, r2
 80030f2:	002a      	movs	r2, r5
 80030f4:	40e2      	lsrs	r2, r4
 80030f6:	0014      	movs	r4, r2
 80030f8:	002a      	movs	r2, r5
 80030fa:	4463      	add	r3, ip
 80030fc:	409a      	lsls	r2, r3
 80030fe:	4098      	lsls	r0, r3
 8003100:	1e55      	subs	r5, r2, #1
 8003102:	41aa      	sbcs	r2, r5
 8003104:	4302      	orrs	r2, r0
 8003106:	4322      	orrs	r2, r4
 8003108:	e7e4      	b.n	80030d4 <__aeabi_d2f+0xc4>
 800310a:	0033      	movs	r3, r6
 800310c:	e79e      	b.n	800304c <__aeabi_d2f+0x3c>
 800310e:	46c0      	nop			; (mov r8, r8)
 8003110:	000007fe 	.word	0x000007fe
 8003114:	fffffc80 	.word	0xfffffc80
 8003118:	fffffca2 	.word	0xfffffca2
 800311c:	fffffc82 	.word	0xfffffc82

08003120 <__clzsi2>:
 8003120:	211c      	movs	r1, #28
 8003122:	2301      	movs	r3, #1
 8003124:	041b      	lsls	r3, r3, #16
 8003126:	4298      	cmp	r0, r3
 8003128:	d301      	bcc.n	800312e <__clzsi2+0xe>
 800312a:	0c00      	lsrs	r0, r0, #16
 800312c:	3910      	subs	r1, #16
 800312e:	0a1b      	lsrs	r3, r3, #8
 8003130:	4298      	cmp	r0, r3
 8003132:	d301      	bcc.n	8003138 <__clzsi2+0x18>
 8003134:	0a00      	lsrs	r0, r0, #8
 8003136:	3908      	subs	r1, #8
 8003138:	091b      	lsrs	r3, r3, #4
 800313a:	4298      	cmp	r0, r3
 800313c:	d301      	bcc.n	8003142 <__clzsi2+0x22>
 800313e:	0900      	lsrs	r0, r0, #4
 8003140:	3904      	subs	r1, #4
 8003142:	a202      	add	r2, pc, #8	; (adr r2, 800314c <__clzsi2+0x2c>)
 8003144:	5c10      	ldrb	r0, [r2, r0]
 8003146:	1840      	adds	r0, r0, r1
 8003148:	4770      	bx	lr
 800314a:	46c0      	nop			; (mov r8, r8)
 800314c:	02020304 	.word	0x02020304
 8003150:	01010101 	.word	0x01010101
	...

0800315c <hex2int>:
//}



uint8_t hex2int(char ch)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	0002      	movs	r2, r0
 8003164:	1dfb      	adds	r3, r7, #7
 8003166:	701a      	strb	r2, [r3, #0]
	if (ch >= '0' && ch <= '9')
 8003168:	1dfb      	adds	r3, r7, #7
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	2b2f      	cmp	r3, #47	; 0x2f
 800316e:	d908      	bls.n	8003182 <hex2int+0x26>
 8003170:	1dfb      	adds	r3, r7, #7
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	2b39      	cmp	r3, #57	; 0x39
 8003176:	d804      	bhi.n	8003182 <hex2int+0x26>
		return ch - '0';
 8003178:	1dfb      	adds	r3, r7, #7
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	3b30      	subs	r3, #48	; 0x30
 800317e:	b2db      	uxtb	r3, r3
 8003180:	e01a      	b.n	80031b8 <hex2int+0x5c>
	if (ch >= 'A' && ch <= 'F')
 8003182:	1dfb      	adds	r3, r7, #7
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	2b40      	cmp	r3, #64	; 0x40
 8003188:	d908      	bls.n	800319c <hex2int+0x40>
 800318a:	1dfb      	adds	r3, r7, #7
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	2b46      	cmp	r3, #70	; 0x46
 8003190:	d804      	bhi.n	800319c <hex2int+0x40>
		return ch - 'A' + 10;
 8003192:	1dfb      	adds	r3, r7, #7
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	3b37      	subs	r3, #55	; 0x37
 8003198:	b2db      	uxtb	r3, r3
 800319a:	e00d      	b.n	80031b8 <hex2int+0x5c>
	if (ch >= 'a' && ch <= 'f')
 800319c:	1dfb      	adds	r3, r7, #7
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	2b60      	cmp	r3, #96	; 0x60
 80031a2:	d908      	bls.n	80031b6 <hex2int+0x5a>
 80031a4:	1dfb      	adds	r3, r7, #7
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	2b66      	cmp	r3, #102	; 0x66
 80031aa:	d804      	bhi.n	80031b6 <hex2int+0x5a>
		return ch - 'a' + 10;
 80031ac:	1dfb      	adds	r3, r7, #7
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	3b57      	subs	r3, #87	; 0x57
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	e000      	b.n	80031b8 <hex2int+0x5c>
	return -1;
 80031b6:	23ff      	movs	r3, #255	; 0xff
}
 80031b8:	0018      	movs	r0, r3
 80031ba:	46bd      	mov	sp, r7
 80031bc:	b002      	add	sp, #8
 80031be:	bd80      	pop	{r7, pc}

080031c0 <nmea_parser>:
		crc ^= nmea_data[i];
	}
	return crc;
}
uint8_t* nmea_parser(char *NR,uint8_t responseLenght,uint8_t *checkSum ,uint8_t *rCheckSum)
{
 80031c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031c2:	b0c1      	sub	sp, #260	; 0x104
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6178      	str	r0, [r7, #20]
 80031c8:	60fa      	str	r2, [r7, #12]
 80031ca:	60bb      	str	r3, [r7, #8]
 80031cc:	200b      	movs	r0, #11
 80031ce:	2608      	movs	r6, #8
 80031d0:	1983      	adds	r3, r0, r6
 80031d2:	19db      	adds	r3, r3, r7
 80031d4:	1c0a      	adds	r2, r1, #0
 80031d6:	701a      	strb	r2, [r3, #0]
	char (*nmeaResponse)[responseLenght];
 80031d8:	0031      	movs	r1, r6
 80031da:	1843      	adds	r3, r0, r1
 80031dc:	19db      	adds	r3, r3, r7
 80031de:	781e      	ldrb	r6, [r3, #0]
 80031e0:	0033      	movs	r3, r6
 80031e2:	3b01      	subs	r3, #1
 80031e4:	22d0      	movs	r2, #208	; 0xd0
 80031e6:	1852      	adds	r2, r2, r1
 80031e8:	19d2      	adds	r2, r2, r7
 80031ea:	6013      	str	r3, [r2, #0]
 80031ec:	603e      	str	r6, [r7, #0]
 80031ee:	2300      	movs	r3, #0
 80031f0:	607b      	str	r3, [r7, #4]
 80031f2:	6839      	ldr	r1, [r7, #0]
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	000b      	movs	r3, r1
 80031f8:	0f5b      	lsrs	r3, r3, #29
 80031fa:	0010      	movs	r0, r2
 80031fc:	00c5      	lsls	r5, r0, #3
 80031fe:	431d      	orrs	r5, r3
 8003200:	000b      	movs	r3, r1
 8003202:	00dc      	lsls	r4, r3, #3
	uint8_t gnssCRC = 0;
 8003204:	23f5      	movs	r3, #245	; 0xf5
 8003206:	2008      	movs	r0, #8
 8003208:	181b      	adds	r3, r3, r0
 800320a:	19db      	adds	r3, r3, r7
 800320c:	2200      	movs	r2, #0
 800320e:	701a      	strb	r2, [r3, #0]
	nmeaResponse=NR;
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	21cc      	movs	r1, #204	; 0xcc
 8003214:	180a      	adds	r2, r1, r0
 8003216:	19d2      	adds	r2, r2, r7
 8003218:	6013      	str	r3, [r2, #0]
	uint8_t QOG = 0xC0;
 800321a:	23cb      	movs	r3, #203	; 0xcb
 800321c:	181b      	adds	r3, r3, r0
 800321e:	19db      	adds	r3, r3, r7
 8003220:	22c0      	movs	r2, #192	; 0xc0
 8003222:	701a      	strb	r2, [r3, #0]
	uint16_t courseStatus = 0x0;
 8003224:	23f6      	movs	r3, #246	; 0xf6
 8003226:	181b      	adds	r3, r3, r0
 8003228:	19db      	adds	r3, r3, r7
 800322a:	2200      	movs	r2, #0
 800322c:	801a      	strh	r2, [r3, #0]
	static uint8_t GPSInformation[18] = {0};


	char *p1;
	char *p2;
	p1 = strstr(nmeaResponse[GNGGA],"$GNGGA");
 800322e:	0032      	movs	r2, r6
 8003230:	000c      	movs	r4, r1
 8003232:	180b      	adds	r3, r1, r0
 8003234:	19db      	adds	r3, r3, r7
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	189b      	adds	r3, r3, r2
 800323a:	4ad2      	ldr	r2, [pc, #840]	; (8003584 <nmea_parser+0x3c4>)
 800323c:	0011      	movs	r1, r2
 800323e:	0018      	movs	r0, r3
 8003240:	f00b f9fd 	bl	800e63e <strstr>
 8003244:	0003      	movs	r3, r0
 8003246:	25c4      	movs	r5, #196	; 0xc4
 8003248:	2008      	movs	r0, #8
 800324a:	182a      	adds	r2, r5, r0
 800324c:	19d2      	adds	r2, r2, r7
 800324e:	6013      	str	r3, [r2, #0]
	p2 = strstr(nmeaResponse[GNRMC],"$GNRMC");
 8003250:	4acd      	ldr	r2, [pc, #820]	; (8003588 <nmea_parser+0x3c8>)
 8003252:	1823      	adds	r3, r4, r0
 8003254:	19db      	adds	r3, r3, r7
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	0011      	movs	r1, r2
 800325a:	0018      	movs	r0, r3
 800325c:	f00b f9ef 	bl	800e63e <strstr>
 8003260:	0003      	movs	r3, r0
 8003262:	22c0      	movs	r2, #192	; 0xc0
 8003264:	2008      	movs	r0, #8
 8003266:	1811      	adds	r1, r2, r0
 8003268:	19c9      	adds	r1, r1, r7
 800326a:	600b      	str	r3, [r1, #0]

	if(p1 != NULL && p2 != NULL){
 800326c:	0001      	movs	r1, r0
 800326e:	186b      	adds	r3, r5, r1
 8003270:	19db      	adds	r3, r3, r7
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d101      	bne.n	800327c <nmea_parser+0xbc>
 8003278:	f000 fe90 	bl	8003f9c <nmea_parser+0xddc>
 800327c:	1853      	adds	r3, r2, r1
 800327e:	19db      	adds	r3, r3, r7
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <nmea_parser+0xca>
 8003286:	f000 fe89 	bl	8003f9c <nmea_parser+0xddc>


		for(uint8_t sen=0;sen<2;sen++){
 800328a:	23f4      	movs	r3, #244	; 0xf4
 800328c:	185b      	adds	r3, r3, r1
 800328e:	19db      	adds	r3, r3, r7
 8003290:	2200      	movs	r2, #0
 8003292:	701a      	strb	r2, [r3, #0]
 8003294:	e0d9      	b.n	800344a <nmea_parser+0x28a>
			uint8_t recvCrc=0;
 8003296:	23bf      	movs	r3, #191	; 0xbf
 8003298:	2108      	movs	r1, #8
 800329a:	185b      	adds	r3, r3, r1
 800329c:	19db      	adds	r3, r3, r7
 800329e:	2200      	movs	r2, #0
 80032a0:	701a      	strb	r2, [r3, #0]
			char rawData[100];
			memset(rawData,0,sizeof(rawData));
 80032a2:	2214      	movs	r2, #20
 80032a4:	000c      	movs	r4, r1
 80032a6:	1853      	adds	r3, r2, r1
 80032a8:	19db      	adds	r3, r3, r7
 80032aa:	2264      	movs	r2, #100	; 0x64
 80032ac:	2100      	movs	r1, #0
 80032ae:	0018      	movs	r0, r3
 80032b0:	f00b f96d 	bl	800e58e <memset>

			char *ind1;
			char *ind2;
			ind1=strchr(nmeaResponse[sen],'$');
 80032b4:	25f4      	movs	r5, #244	; 0xf4
 80032b6:	0021      	movs	r1, r4
 80032b8:	186b      	adds	r3, r5, r1
 80032ba:	19db      	adds	r3, r3, r7
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	0032      	movs	r2, r6
 80032c0:	4353      	muls	r3, r2
 80032c2:	22cc      	movs	r2, #204	; 0xcc
 80032c4:	1850      	adds	r0, r2, r1
 80032c6:	19c1      	adds	r1, r0, r7
 80032c8:	680a      	ldr	r2, [r1, #0]
 80032ca:	18d3      	adds	r3, r2, r3
 80032cc:	2124      	movs	r1, #36	; 0x24
 80032ce:	0018      	movs	r0, r3
 80032d0:	f00b f993 	bl	800e5fa <strchr>
 80032d4:	0003      	movs	r3, r0
 80032d6:	24b8      	movs	r4, #184	; 0xb8
 80032d8:	2208      	movs	r2, #8
 80032da:	18a1      	adds	r1, r4, r2
 80032dc:	19c9      	adds	r1, r1, r7
 80032de:	600b      	str	r3, [r1, #0]
			ind2=strchr(nmeaResponse[sen],'*');
 80032e0:	0011      	movs	r1, r2
 80032e2:	186b      	adds	r3, r5, r1
 80032e4:	19db      	adds	r3, r3, r7
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	0032      	movs	r2, r6
 80032ea:	4353      	muls	r3, r2
 80032ec:	22cc      	movs	r2, #204	; 0xcc
 80032ee:	000d      	movs	r5, r1
 80032f0:	1852      	adds	r2, r2, r1
 80032f2:	19d2      	adds	r2, r2, r7
 80032f4:	6812      	ldr	r2, [r2, #0]
 80032f6:	18d3      	adds	r3, r2, r3
 80032f8:	212a      	movs	r1, #42	; 0x2a
 80032fa:	0018      	movs	r0, r3
 80032fc:	f00b f97d 	bl	800e5fa <strchr>
 8003300:	0003      	movs	r3, r0
 8003302:	21b4      	movs	r1, #180	; 0xb4
 8003304:	194a      	adds	r2, r1, r5
 8003306:	19d2      	adds	r2, r2, r7
 8003308:	6013      	str	r3, [r2, #0]

			if(ind1!=NULL && ind2!=NULL){
 800330a:	1963      	adds	r3, r4, r5
 800330c:	19da      	adds	r2, r3, r7
 800330e:	6813      	ldr	r3, [r2, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d100      	bne.n	8003316 <nmea_parser+0x156>
 8003314:	e08a      	b.n	800342c <nmea_parser+0x26c>
 8003316:	194b      	adds	r3, r1, r5
 8003318:	19da      	adds	r2, r3, r7
 800331a:	6813      	ldr	r3, [r2, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d100      	bne.n	8003322 <nmea_parser+0x162>
 8003320:	e084      	b.n	800342c <nmea_parser+0x26c>
				uint8_t len = ind2-ind1;
 8003322:	194b      	adds	r3, r1, r5
 8003324:	19da      	adds	r2, r3, r7
 8003326:	6812      	ldr	r2, [r2, #0]
 8003328:	1963      	adds	r3, r4, r5
 800332a:	19d8      	adds	r0, r3, r7
 800332c:	6803      	ldr	r3, [r0, #0]
 800332e:	1ad2      	subs	r2, r2, r3
 8003330:	20b3      	movs	r0, #179	; 0xb3
 8003332:	002c      	movs	r4, r5
 8003334:	1903      	adds	r3, r0, r4
 8003336:	19db      	adds	r3, r3, r7
 8003338:	701a      	strb	r2, [r3, #0]
				gnssCRC = 0;
 800333a:	22f5      	movs	r2, #245	; 0xf5
 800333c:	0020      	movs	r0, r4
 800333e:	1813      	adds	r3, r2, r0
 8003340:	19db      	adds	r3, r3, r7
 8003342:	2200      	movs	r2, #0
 8003344:	701a      	strb	r2, [r3, #0]
				recvCrc = hex2int(*(ind2+2)) | hex2int(*(ind2+1)) <<4;
 8003346:	000d      	movs	r5, r1
 8003348:	180b      	adds	r3, r1, r0
 800334a:	19da      	adds	r2, r3, r7
 800334c:	6813      	ldr	r3, [r2, #0]
 800334e:	3302      	adds	r3, #2
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	0018      	movs	r0, r3
 8003354:	f7ff ff02 	bl	800315c <hex2int>
 8003358:	0003      	movs	r3, r0
 800335a:	b25c      	sxtb	r4, r3
 800335c:	2108      	movs	r1, #8
 800335e:	186b      	adds	r3, r5, r1
 8003360:	19da      	adds	r2, r3, r7
 8003362:	6813      	ldr	r3, [r2, #0]
 8003364:	3301      	adds	r3, #1
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	0018      	movs	r0, r3
 800336a:	f7ff fef7 	bl	800315c <hex2int>
 800336e:	0003      	movs	r3, r0
 8003370:	011b      	lsls	r3, r3, #4
 8003372:	b25b      	sxtb	r3, r3
 8003374:	4323      	orrs	r3, r4
 8003376:	b25a      	sxtb	r2, r3
 8003378:	23bf      	movs	r3, #191	; 0xbf
 800337a:	2108      	movs	r1, #8
 800337c:	185b      	adds	r3, r3, r1
 800337e:	19db      	adds	r3, r3, r7
 8003380:	701a      	strb	r2, [r3, #0]
				for(uint8_t i=0;i<len-1;i++){
 8003382:	23f3      	movs	r3, #243	; 0xf3
 8003384:	185b      	adds	r3, r3, r1
 8003386:	19db      	adds	r3, r3, r7
 8003388:	2200      	movs	r2, #0
 800338a:	701a      	strb	r2, [r3, #0]
 800338c:	e02b      	b.n	80033e6 <nmea_parser+0x226>
					rawData[i]=*(ind1+1+i);
 800338e:	20f3      	movs	r0, #243	; 0xf3
 8003390:	2108      	movs	r1, #8
 8003392:	1843      	adds	r3, r0, r1
 8003394:	19db      	adds	r3, r3, r7
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	3301      	adds	r3, #1
 800339a:	22b8      	movs	r2, #184	; 0xb8
 800339c:	1852      	adds	r2, r2, r1
 800339e:	19d2      	adds	r2, r2, r7
 80033a0:	6812      	ldr	r2, [r2, #0]
 80033a2:	18d2      	adds	r2, r2, r3
 80033a4:	000d      	movs	r5, r1
 80033a6:	1943      	adds	r3, r0, r5
 80033a8:	19db      	adds	r3, r3, r7
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	7811      	ldrb	r1, [r2, #0]
 80033ae:	2414      	movs	r4, #20
 80033b0:	1962      	adds	r2, r4, r5
 80033b2:	19d2      	adds	r2, r2, r7
 80033b4:	54d1      	strb	r1, [r2, r3]
					gnssCRC ^= rawData[i];
 80033b6:	0029      	movs	r1, r5
 80033b8:	1843      	adds	r3, r0, r1
 80033ba:	19db      	adds	r3, r3, r7
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	000d      	movs	r5, r1
 80033c0:	1862      	adds	r2, r4, r1
 80033c2:	19d2      	adds	r2, r2, r7
 80033c4:	5cd1      	ldrb	r1, [r2, r3]
 80033c6:	22f5      	movs	r2, #245	; 0xf5
 80033c8:	002c      	movs	r4, r5
 80033ca:	1913      	adds	r3, r2, r4
 80033cc:	19db      	adds	r3, r3, r7
 80033ce:	1912      	adds	r2, r2, r4
 80033d0:	19d2      	adds	r2, r2, r7
 80033d2:	7812      	ldrb	r2, [r2, #0]
 80033d4:	404a      	eors	r2, r1
 80033d6:	701a      	strb	r2, [r3, #0]
				for(uint8_t i=0;i<len-1;i++){
 80033d8:	1903      	adds	r3, r0, r4
 80033da:	19db      	adds	r3, r3, r7
 80033dc:	781a      	ldrb	r2, [r3, #0]
 80033de:	1903      	adds	r3, r0, r4
 80033e0:	19db      	adds	r3, r3, r7
 80033e2:	3201      	adds	r2, #1
 80033e4:	701a      	strb	r2, [r3, #0]
 80033e6:	23f3      	movs	r3, #243	; 0xf3
 80033e8:	2008      	movs	r0, #8
 80033ea:	181b      	adds	r3, r3, r0
 80033ec:	19db      	adds	r3, r3, r7
 80033ee:	781a      	ldrb	r2, [r3, #0]
 80033f0:	23b3      	movs	r3, #179	; 0xb3
 80033f2:	181b      	adds	r3, r3, r0
 80033f4:	19db      	adds	r3, r3, r7
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	3b01      	subs	r3, #1
 80033fa:	429a      	cmp	r2, r3
 80033fc:	dbc7      	blt.n	800338e <nmea_parser+0x1ce>

				}
				*checkSum = gnssCRC;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	21f5      	movs	r1, #245	; 0xf5
 8003402:	0004      	movs	r4, r0
 8003404:	190a      	adds	r2, r1, r4
 8003406:	19d2      	adds	r2, r2, r7
 8003408:	7812      	ldrb	r2, [r2, #0]
 800340a:	701a      	strb	r2, [r3, #0]
				*rCheckSum = recvCrc;
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	20bf      	movs	r0, #191	; 0xbf
 8003410:	1902      	adds	r2, r0, r4
 8003412:	19d2      	adds	r2, r2, r7
 8003414:	7812      	ldrb	r2, [r2, #0]
 8003416:	701a      	strb	r2, [r3, #0]
			if(ind1!=NULL && ind2!=NULL){
 8003418:	46c0      	nop			; (mov r8, r8)
			}
			else{
				return NULL;
			}
			if(recvCrc != gnssCRC){
 800341a:	1903      	adds	r3, r0, r4
 800341c:	19da      	adds	r2, r3, r7
 800341e:	190b      	adds	r3, r1, r4
 8003420:	19db      	adds	r3, r3, r7
 8003422:	7812      	ldrb	r2, [r2, #0]
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	429a      	cmp	r2, r3
 8003428:	d006      	beq.n	8003438 <nmea_parser+0x278>
 800342a:	e002      	b.n	8003432 <nmea_parser+0x272>
				return NULL;
 800342c:	2300      	movs	r3, #0
 800342e:	f000 fdb9 	bl	8003fa4 <nmea_parser+0xde4>
				return NULL;
 8003432:	2300      	movs	r3, #0
 8003434:	f000 fdb6 	bl	8003fa4 <nmea_parser+0xde4>
		for(uint8_t sen=0;sen<2;sen++){
 8003438:	21f4      	movs	r1, #244	; 0xf4
 800343a:	2008      	movs	r0, #8
 800343c:	180b      	adds	r3, r1, r0
 800343e:	19db      	adds	r3, r3, r7
 8003440:	781a      	ldrb	r2, [r3, #0]
 8003442:	180b      	adds	r3, r1, r0
 8003444:	19db      	adds	r3, r3, r7
 8003446:	3201      	adds	r2, #1
 8003448:	701a      	strb	r2, [r3, #0]
 800344a:	23f4      	movs	r3, #244	; 0xf4
 800344c:	2108      	movs	r1, #8
 800344e:	185b      	adds	r3, r3, r1
 8003450:	19db      	adds	r3, r3, r7
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d800      	bhi.n	800345a <nmea_parser+0x29a>
 8003458:	e71d      	b.n	8003296 <nmea_parser+0xd6>
		// }

		//data is valid. go on
		uint8_t GNGGAComma[15];
		uint8_t GNRMCComma[15];
		memset(GNGGAComma, 0, sizeof(GNGGAComma)); // for automatically-allocated arrays
 800345a:	23a4      	movs	r3, #164	; 0xa4
 800345c:	000c      	movs	r4, r1
 800345e:	191b      	adds	r3, r3, r4
 8003460:	19db      	adds	r3, r3, r7
 8003462:	220f      	movs	r2, #15
 8003464:	2100      	movs	r1, #0
 8003466:	0018      	movs	r0, r3
 8003468:	f00b f891 	bl	800e58e <memset>
		memset(GNRMCComma, 0, sizeof(GNRMCComma)); // for automatically-allocated arrays
 800346c:	2394      	movs	r3, #148	; 0x94
 800346e:	191b      	adds	r3, r3, r4
 8003470:	19db      	adds	r3, r3, r7
 8003472:	220f      	movs	r2, #15
 8003474:	2100      	movs	r1, #0
 8003476:	0018      	movs	r0, r3
 8003478:	f00b f889 	bl	800e58e <memset>


		uint8_t GNGGACInd=0;
 800347c:	23f2      	movs	r3, #242	; 0xf2
 800347e:	0021      	movs	r1, r4
 8003480:	185b      	adds	r3, r3, r1
 8003482:	19db      	adds	r3, r3, r7
 8003484:	2200      	movs	r2, #0
 8003486:	701a      	strb	r2, [r3, #0]
		uint8_t GNRMCCInd=0;
 8003488:	23f1      	movs	r3, #241	; 0xf1
 800348a:	185b      	adds	r3, r3, r1
 800348c:	19db      	adds	r3, r3, r7
 800348e:	2200      	movs	r2, #0
 8003490:	701a      	strb	r2, [r3, #0]
		uint32_t latitude;
		uint32_t longitude;
		uint8_t tempDataIndex = 0;
 8003492:	23e7      	movs	r3, #231	; 0xe7
 8003494:	185b      	adds	r3, r3, r1
 8003496:	19db      	adds	r3, r3, r7
 8003498:	2200      	movs	r2, #0
 800349a:	701a      	strb	r2, [r3, #0]




		//-------store all parameter's comma
		for(uint8_t i=0;i<responseLenght;i++ ){
 800349c:	23e6      	movs	r3, #230	; 0xe6
 800349e:	185b      	adds	r3, r3, r1
 80034a0:	19db      	adds	r3, r3, r7
 80034a2:	2200      	movs	r2, #0
 80034a4:	701a      	strb	r2, [r3, #0]
 80034a6:	e048      	b.n	800353a <nmea_parser+0x37a>
			if(nmeaResponse[GNGGA][i]==44){
 80034a8:	0032      	movs	r2, r6
 80034aa:	23cc      	movs	r3, #204	; 0xcc
 80034ac:	2408      	movs	r4, #8
 80034ae:	191b      	adds	r3, r3, r4
 80034b0:	19db      	adds	r3, r3, r7
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	189a      	adds	r2, r3, r2
 80034b6:	21e6      	movs	r1, #230	; 0xe6
 80034b8:	190b      	adds	r3, r1, r4
 80034ba:	19db      	adds	r3, r3, r7
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	5cd3      	ldrb	r3, [r2, r3]
 80034c0:	2b2c      	cmp	r3, #44	; 0x2c
 80034c2:	d112      	bne.n	80034ea <nmea_parser+0x32a>
				GNGGAComma[GNGGACInd]=i;
 80034c4:	20f2      	movs	r0, #242	; 0xf2
 80034c6:	1903      	adds	r3, r0, r4
 80034c8:	19db      	adds	r3, r3, r7
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	22a4      	movs	r2, #164	; 0xa4
 80034ce:	1912      	adds	r2, r2, r4
 80034d0:	19d2      	adds	r2, r2, r7
 80034d2:	1909      	adds	r1, r1, r4
 80034d4:	19c9      	adds	r1, r1, r7
 80034d6:	7809      	ldrb	r1, [r1, #0]
 80034d8:	54d1      	strb	r1, [r2, r3]
				GNGGACInd++;
 80034da:	0021      	movs	r1, r4
 80034dc:	1843      	adds	r3, r0, r1
 80034de:	19db      	adds	r3, r3, r7
 80034e0:	781a      	ldrb	r2, [r3, #0]
 80034e2:	1843      	adds	r3, r0, r1
 80034e4:	19db      	adds	r3, r3, r7
 80034e6:	3201      	adds	r2, #1
 80034e8:	701a      	strb	r2, [r3, #0]
			}
			if(nmeaResponse[GNRMC][i]==44){
 80034ea:	21e6      	movs	r1, #230	; 0xe6
 80034ec:	2408      	movs	r4, #8
 80034ee:	190b      	adds	r3, r1, r4
 80034f0:	19db      	adds	r3, r3, r7
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	22cc      	movs	r2, #204	; 0xcc
 80034f6:	1912      	adds	r2, r2, r4
 80034f8:	19d2      	adds	r2, r2, r7
 80034fa:	6812      	ldr	r2, [r2, #0]
 80034fc:	5cd3      	ldrb	r3, [r2, r3]
 80034fe:	2b2c      	cmp	r3, #44	; 0x2c
 8003500:	d112      	bne.n	8003528 <nmea_parser+0x368>
				GNRMCComma[GNRMCCInd]=i;
 8003502:	20f1      	movs	r0, #241	; 0xf1
 8003504:	1903      	adds	r3, r0, r4
 8003506:	19db      	adds	r3, r3, r7
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	2294      	movs	r2, #148	; 0x94
 800350c:	1912      	adds	r2, r2, r4
 800350e:	19d2      	adds	r2, r2, r7
 8003510:	1909      	adds	r1, r1, r4
 8003512:	19c9      	adds	r1, r1, r7
 8003514:	7809      	ldrb	r1, [r1, #0]
 8003516:	54d1      	strb	r1, [r2, r3]
				GNRMCCInd++;
 8003518:	0021      	movs	r1, r4
 800351a:	1843      	adds	r3, r0, r1
 800351c:	19db      	adds	r3, r3, r7
 800351e:	781a      	ldrb	r2, [r3, #0]
 8003520:	1843      	adds	r3, r0, r1
 8003522:	19db      	adds	r3, r3, r7
 8003524:	3201      	adds	r2, #1
 8003526:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0;i<responseLenght;i++ ){
 8003528:	21e6      	movs	r1, #230	; 0xe6
 800352a:	2008      	movs	r0, #8
 800352c:	180b      	adds	r3, r1, r0
 800352e:	19db      	adds	r3, r3, r7
 8003530:	781a      	ldrb	r2, [r3, #0]
 8003532:	180b      	adds	r3, r1, r0
 8003534:	19db      	adds	r3, r3, r7
 8003536:	3201      	adds	r2, #1
 8003538:	701a      	strb	r2, [r3, #0]
 800353a:	23e6      	movs	r3, #230	; 0xe6
 800353c:	2108      	movs	r1, #8
 800353e:	185b      	adds	r3, r3, r1
 8003540:	19da      	adds	r2, r3, r7
 8003542:	230b      	movs	r3, #11
 8003544:	185b      	adds	r3, r3, r1
 8003546:	19db      	adds	r3, r3, r7
 8003548:	7812      	ldrb	r2, [r2, #0]
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	429a      	cmp	r2, r3
 800354e:	d3ab      	bcc.n	80034a8 <nmea_parser+0x2e8>
			}
		}

		//------------------------Time and date Stamp------------------------------------
		memset(tempData,0,sizeof(tempData));
 8003550:	2384      	movs	r3, #132	; 0x84
 8003552:	000c      	movs	r4, r1
 8003554:	185b      	adds	r3, r3, r1
 8003556:	19db      	adds	r3, r3, r7
 8003558:	220f      	movs	r2, #15
 800355a:	2100      	movs	r1, #0
 800355c:	0018      	movs	r0, r3
 800355e:	f00b f816 	bl	800e58e <memset>
		tempDataIndex = 0;
 8003562:	23e7      	movs	r3, #231	; 0xe7
 8003564:	0021      	movs	r1, r4
 8003566:	185b      	adds	r3, r3, r1
 8003568:	19db      	adds	r3, r3, r7
 800356a:	2200      	movs	r2, #0
 800356c:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[8]+1;x<GNRMCComma[9];x++){
 800356e:	2394      	movs	r3, #148	; 0x94
 8003570:	185b      	adds	r3, r3, r1
 8003572:	19db      	adds	r3, r3, r7
 8003574:	7a1a      	ldrb	r2, [r3, #8]
 8003576:	23e5      	movs	r3, #229	; 0xe5
 8003578:	185b      	adds	r3, r3, r1
 800357a:	19db      	adds	r3, r3, r7
 800357c:	3201      	adds	r2, #1
 800357e:	701a      	strb	r2, [r3, #0]
 8003580:	e025      	b.n	80035ce <nmea_parser+0x40e>
 8003582:	46c0      	nop			; (mov r8, r8)
 8003584:	08012a28 	.word	0x08012a28
 8003588:	08012a30 	.word	0x08012a30
			tempData[tempDataIndex]= nmeaResponse[GNRMC][x];
 800358c:	20e5      	movs	r0, #229	; 0xe5
 800358e:	2508      	movs	r5, #8
 8003590:	1943      	adds	r3, r0, r5
 8003592:	19db      	adds	r3, r3, r7
 8003594:	781a      	ldrb	r2, [r3, #0]
 8003596:	24e7      	movs	r4, #231	; 0xe7
 8003598:	1963      	adds	r3, r4, r5
 800359a:	19db      	adds	r3, r3, r7
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	21cc      	movs	r1, #204	; 0xcc
 80035a0:	1949      	adds	r1, r1, r5
 80035a2:	19c9      	adds	r1, r1, r7
 80035a4:	6809      	ldr	r1, [r1, #0]
 80035a6:	5c89      	ldrb	r1, [r1, r2]
 80035a8:	2284      	movs	r2, #132	; 0x84
 80035aa:	1952      	adds	r2, r2, r5
 80035ac:	19d2      	adds	r2, r2, r7
 80035ae:	54d1      	strb	r1, [r2, r3]
			tempDataIndex++;
 80035b0:	0029      	movs	r1, r5
 80035b2:	1863      	adds	r3, r4, r1
 80035b4:	19db      	adds	r3, r3, r7
 80035b6:	781a      	ldrb	r2, [r3, #0]
 80035b8:	1863      	adds	r3, r4, r1
 80035ba:	19db      	adds	r3, r3, r7
 80035bc:	3201      	adds	r2, #1
 80035be:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[8]+1;x<GNRMCComma[9];x++){
 80035c0:	1843      	adds	r3, r0, r1
 80035c2:	19db      	adds	r3, r3, r7
 80035c4:	781a      	ldrb	r2, [r3, #0]
 80035c6:	1843      	adds	r3, r0, r1
 80035c8:	19db      	adds	r3, r3, r7
 80035ca:	3201      	adds	r2, #1
 80035cc:	701a      	strb	r2, [r3, #0]
 80035ce:	2394      	movs	r3, #148	; 0x94
 80035d0:	2008      	movs	r0, #8
 80035d2:	181b      	adds	r3, r3, r0
 80035d4:	19db      	adds	r3, r3, r7
 80035d6:	7a5b      	ldrb	r3, [r3, #9]
 80035d8:	22e5      	movs	r2, #229	; 0xe5
 80035da:	1812      	adds	r2, r2, r0
 80035dc:	19d2      	adds	r2, r2, r7
 80035de:	7812      	ldrb	r2, [r2, #0]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d3d3      	bcc.n	800358c <nmea_parser+0x3cc>
		}
		char tempData2[4];

		//Year (1 byte)
		memset(tempData2,0,sizeof(tempData2));
 80035e4:	2480      	movs	r4, #128	; 0x80
 80035e6:	1823      	adds	r3, r4, r0
 80035e8:	19db      	adds	r3, r3, r7
 80035ea:	2204      	movs	r2, #4
 80035ec:	2100      	movs	r1, #0
 80035ee:	0018      	movs	r0, r3
 80035f0:	f00a ffcd 	bl	800e58e <memset>
		tempData2[0]=tempData[4];
 80035f4:	2584      	movs	r5, #132	; 0x84
 80035f6:	2008      	movs	r0, #8
 80035f8:	182b      	adds	r3, r5, r0
 80035fa:	19db      	adds	r3, r3, r7
 80035fc:	791a      	ldrb	r2, [r3, #4]
 80035fe:	0021      	movs	r1, r4
 8003600:	180b      	adds	r3, r1, r0
 8003602:	19db      	adds	r3, r3, r7
 8003604:	701a      	strb	r2, [r3, #0]
		tempData2[1]=tempData[5];
 8003606:	182b      	adds	r3, r5, r0
 8003608:	19db      	adds	r3, r3, r7
 800360a:	795a      	ldrb	r2, [r3, #5]
 800360c:	000c      	movs	r4, r1
 800360e:	1823      	adds	r3, r4, r0
 8003610:	19db      	adds	r3, r3, r7
 8003612:	705a      	strb	r2, [r3, #1]
		GPSInformation[0] = (uint8_t)atoi(tempData2);
 8003614:	1823      	adds	r3, r4, r0
 8003616:	19db      	adds	r3, r3, r7
 8003618:	0018      	movs	r0, r3
 800361a:	f00a ff59 	bl	800e4d0 <atoi>
 800361e:	0003      	movs	r3, r0
 8003620:	b2da      	uxtb	r2, r3
 8003622:	4bd4      	ldr	r3, [pc, #848]	; (8003974 <nmea_parser+0x7b4>)
 8003624:	701a      	strb	r2, [r3, #0]

		//month (1 byte)
		memset(tempData2,0,sizeof(tempData2));
 8003626:	2008      	movs	r0, #8
 8003628:	1823      	adds	r3, r4, r0
 800362a:	19db      	adds	r3, r3, r7
 800362c:	2204      	movs	r2, #4
 800362e:	2100      	movs	r1, #0
 8003630:	0018      	movs	r0, r3
 8003632:	f00a ffac 	bl	800e58e <memset>
		tempData2[0]=tempData[2];
 8003636:	2008      	movs	r0, #8
 8003638:	182b      	adds	r3, r5, r0
 800363a:	19db      	adds	r3, r3, r7
 800363c:	789a      	ldrb	r2, [r3, #2]
 800363e:	0021      	movs	r1, r4
 8003640:	180b      	adds	r3, r1, r0
 8003642:	19db      	adds	r3, r3, r7
 8003644:	701a      	strb	r2, [r3, #0]
		tempData2[1]=tempData[3];
 8003646:	182b      	adds	r3, r5, r0
 8003648:	19db      	adds	r3, r3, r7
 800364a:	78da      	ldrb	r2, [r3, #3]
 800364c:	000c      	movs	r4, r1
 800364e:	1823      	adds	r3, r4, r0
 8003650:	19db      	adds	r3, r3, r7
 8003652:	705a      	strb	r2, [r3, #1]
		GPSInformation[1] = atoi(tempData2);
 8003654:	1823      	adds	r3, r4, r0
 8003656:	19db      	adds	r3, r3, r7
 8003658:	0018      	movs	r0, r3
 800365a:	f00a ff39 	bl	800e4d0 <atoi>
 800365e:	0003      	movs	r3, r0
 8003660:	b2da      	uxtb	r2, r3
 8003662:	4bc4      	ldr	r3, [pc, #784]	; (8003974 <nmea_parser+0x7b4>)
 8003664:	705a      	strb	r2, [r3, #1]
		//day (1 byte)
		memset(tempData2,0,sizeof(tempData2));
 8003666:	2008      	movs	r0, #8
 8003668:	1823      	adds	r3, r4, r0
 800366a:	19db      	adds	r3, r3, r7
 800366c:	2204      	movs	r2, #4
 800366e:	2100      	movs	r1, #0
 8003670:	0018      	movs	r0, r3
 8003672:	f00a ff8c 	bl	800e58e <memset>
		tempData2[0]=tempData[0];
 8003676:	2008      	movs	r0, #8
 8003678:	182b      	adds	r3, r5, r0
 800367a:	19db      	adds	r3, r3, r7
 800367c:	781a      	ldrb	r2, [r3, #0]
 800367e:	0021      	movs	r1, r4
 8003680:	0004      	movs	r4, r0
 8003682:	190b      	adds	r3, r1, r4
 8003684:	19db      	adds	r3, r3, r7
 8003686:	701a      	strb	r2, [r3, #0]
		tempData2[1]=tempData[1];
 8003688:	192b      	adds	r3, r5, r4
 800368a:	19db      	adds	r3, r3, r7
 800368c:	785a      	ldrb	r2, [r3, #1]
 800368e:	190b      	adds	r3, r1, r4
 8003690:	19db      	adds	r3, r3, r7
 8003692:	705a      	strb	r2, [r3, #1]
		GPSInformation[2] = atoi(tempData2);
 8003694:	190b      	adds	r3, r1, r4
 8003696:	19db      	adds	r3, r3, r7
 8003698:	0018      	movs	r0, r3
 800369a:	f00a ff19 	bl	800e4d0 <atoi>
 800369e:	0003      	movs	r3, r0
 80036a0:	b2da      	uxtb	r2, r3
 80036a2:	4bb4      	ldr	r3, [pc, #720]	; (8003974 <nmea_parser+0x7b4>)
 80036a4:	709a      	strb	r2, [r3, #2]

		memset(tempData,0,sizeof(tempData));
 80036a6:	192b      	adds	r3, r5, r4
 80036a8:	19db      	adds	r3, r3, r7
 80036aa:	220f      	movs	r2, #15
 80036ac:	2100      	movs	r1, #0
 80036ae:	0018      	movs	r0, r3
 80036b0:	f00a ff6d 	bl	800e58e <memset>
		tempDataIndex = 0;
 80036b4:	22e7      	movs	r2, #231	; 0xe7
 80036b6:	1913      	adds	r3, r2, r4
 80036b8:	19db      	adds	r3, r3, r7
 80036ba:	2200      	movs	r2, #0
 80036bc:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[0]+1;x<GNRMCComma[1]-4;x++){
 80036be:	2394      	movs	r3, #148	; 0x94
 80036c0:	191b      	adds	r3, r3, r4
 80036c2:	19db      	adds	r3, r3, r7
 80036c4:	781a      	ldrb	r2, [r3, #0]
 80036c6:	23e4      	movs	r3, #228	; 0xe4
 80036c8:	191b      	adds	r3, r3, r4
 80036ca:	19db      	adds	r3, r3, r7
 80036cc:	3201      	adds	r2, #1
 80036ce:	701a      	strb	r2, [r3, #0]
 80036d0:	e020      	b.n	8003714 <nmea_parser+0x554>
			tempData[tempDataIndex]= nmeaResponse[GNRMC][x];
 80036d2:	20e4      	movs	r0, #228	; 0xe4
 80036d4:	2508      	movs	r5, #8
 80036d6:	1943      	adds	r3, r0, r5
 80036d8:	19db      	adds	r3, r3, r7
 80036da:	781a      	ldrb	r2, [r3, #0]
 80036dc:	24e7      	movs	r4, #231	; 0xe7
 80036de:	1963      	adds	r3, r4, r5
 80036e0:	19db      	adds	r3, r3, r7
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	21cc      	movs	r1, #204	; 0xcc
 80036e6:	1949      	adds	r1, r1, r5
 80036e8:	19c9      	adds	r1, r1, r7
 80036ea:	6809      	ldr	r1, [r1, #0]
 80036ec:	5c89      	ldrb	r1, [r1, r2]
 80036ee:	2284      	movs	r2, #132	; 0x84
 80036f0:	1952      	adds	r2, r2, r5
 80036f2:	19d2      	adds	r2, r2, r7
 80036f4:	54d1      	strb	r1, [r2, r3]
			tempDataIndex++;
 80036f6:	0029      	movs	r1, r5
 80036f8:	1863      	adds	r3, r4, r1
 80036fa:	19db      	adds	r3, r3, r7
 80036fc:	781a      	ldrb	r2, [r3, #0]
 80036fe:	1863      	adds	r3, r4, r1
 8003700:	19db      	adds	r3, r3, r7
 8003702:	3201      	adds	r2, #1
 8003704:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[0]+1;x<GNRMCComma[1]-4;x++){
 8003706:	1843      	adds	r3, r0, r1
 8003708:	19db      	adds	r3, r3, r7
 800370a:	781a      	ldrb	r2, [r3, #0]
 800370c:	1843      	adds	r3, r0, r1
 800370e:	19db      	adds	r3, r3, r7
 8003710:	3201      	adds	r2, #1
 8003712:	701a      	strb	r2, [r3, #0]
 8003714:	23e4      	movs	r3, #228	; 0xe4
 8003716:	2108      	movs	r1, #8
 8003718:	185b      	adds	r3, r3, r1
 800371a:	19db      	adds	r3, r3, r7
 800371c:	781a      	ldrb	r2, [r3, #0]
 800371e:	2394      	movs	r3, #148	; 0x94
 8003720:	185b      	adds	r3, r3, r1
 8003722:	19db      	adds	r3, r3, r7
 8003724:	785b      	ldrb	r3, [r3, #1]
 8003726:	3b04      	subs	r3, #4
 8003728:	429a      	cmp	r2, r3
 800372a:	dbd2      	blt.n	80036d2 <nmea_parser+0x512>
		}
		//hour(1 byte)
		memset(tempData2,0,sizeof(tempData2));
 800372c:	2480      	movs	r4, #128	; 0x80
 800372e:	1863      	adds	r3, r4, r1
 8003730:	19db      	adds	r3, r3, r7
 8003732:	2204      	movs	r2, #4
 8003734:	2100      	movs	r1, #0
 8003736:	0018      	movs	r0, r3
 8003738:	f00a ff29 	bl	800e58e <memset>
		tempData2[0]=tempData[0];
 800373c:	2584      	movs	r5, #132	; 0x84
 800373e:	2008      	movs	r0, #8
 8003740:	182b      	adds	r3, r5, r0
 8003742:	19db      	adds	r3, r3, r7
 8003744:	781a      	ldrb	r2, [r3, #0]
 8003746:	0021      	movs	r1, r4
 8003748:	180b      	adds	r3, r1, r0
 800374a:	19db      	adds	r3, r3, r7
 800374c:	701a      	strb	r2, [r3, #0]
		tempData2[1]=tempData[1];
 800374e:	182b      	adds	r3, r5, r0
 8003750:	19db      	adds	r3, r3, r7
 8003752:	785a      	ldrb	r2, [r3, #1]
 8003754:	000c      	movs	r4, r1
 8003756:	1823      	adds	r3, r4, r0
 8003758:	19db      	adds	r3, r3, r7
 800375a:	705a      	strb	r2, [r3, #1]
		GPSInformation[3] = (uint8_t)atoi(tempData2);
 800375c:	1823      	adds	r3, r4, r0
 800375e:	19db      	adds	r3, r3, r7
 8003760:	0018      	movs	r0, r3
 8003762:	f00a feb5 	bl	800e4d0 <atoi>
 8003766:	0003      	movs	r3, r0
 8003768:	b2da      	uxtb	r2, r3
 800376a:	4b82      	ldr	r3, [pc, #520]	; (8003974 <nmea_parser+0x7b4>)
 800376c:	70da      	strb	r2, [r3, #3]
		//minutes(1 byte)
		memset(tempData2,0,sizeof(tempData2));
 800376e:	2008      	movs	r0, #8
 8003770:	1823      	adds	r3, r4, r0
 8003772:	19db      	adds	r3, r3, r7
 8003774:	2204      	movs	r2, #4
 8003776:	2100      	movs	r1, #0
 8003778:	0018      	movs	r0, r3
 800377a:	f00a ff08 	bl	800e58e <memset>
		tempData2[0]=tempData[2];
 800377e:	2008      	movs	r0, #8
 8003780:	182b      	adds	r3, r5, r0
 8003782:	19db      	adds	r3, r3, r7
 8003784:	789a      	ldrb	r2, [r3, #2]
 8003786:	0021      	movs	r1, r4
 8003788:	180b      	adds	r3, r1, r0
 800378a:	19db      	adds	r3, r3, r7
 800378c:	701a      	strb	r2, [r3, #0]
		tempData2[1]=tempData[3];
 800378e:	182b      	adds	r3, r5, r0
 8003790:	19db      	adds	r3, r3, r7
 8003792:	78da      	ldrb	r2, [r3, #3]
 8003794:	000c      	movs	r4, r1
 8003796:	1823      	adds	r3, r4, r0
 8003798:	19db      	adds	r3, r3, r7
 800379a:	705a      	strb	r2, [r3, #1]
		GPSInformation[4] = (uint8_t)atoi(tempData2);
 800379c:	1823      	adds	r3, r4, r0
 800379e:	19db      	adds	r3, r3, r7
 80037a0:	0018      	movs	r0, r3
 80037a2:	f00a fe95 	bl	800e4d0 <atoi>
 80037a6:	0003      	movs	r3, r0
 80037a8:	b2da      	uxtb	r2, r3
 80037aa:	4b72      	ldr	r3, [pc, #456]	; (8003974 <nmea_parser+0x7b4>)
 80037ac:	711a      	strb	r2, [r3, #4]
		//seconds(1 byte)
		memset(tempData2,0,sizeof(tempData2));
 80037ae:	2008      	movs	r0, #8
 80037b0:	1823      	adds	r3, r4, r0
 80037b2:	19db      	adds	r3, r3, r7
 80037b4:	2204      	movs	r2, #4
 80037b6:	2100      	movs	r1, #0
 80037b8:	0018      	movs	r0, r3
 80037ba:	f00a fee8 	bl	800e58e <memset>
		tempData2[0]=tempData[4];
 80037be:	2008      	movs	r0, #8
 80037c0:	182b      	adds	r3, r5, r0
 80037c2:	19db      	adds	r3, r3, r7
 80037c4:	791a      	ldrb	r2, [r3, #4]
 80037c6:	0021      	movs	r1, r4
 80037c8:	0004      	movs	r4, r0
 80037ca:	190b      	adds	r3, r1, r4
 80037cc:	19db      	adds	r3, r3, r7
 80037ce:	701a      	strb	r2, [r3, #0]
		tempData2[1]=tempData[5];
 80037d0:	192b      	adds	r3, r5, r4
 80037d2:	19db      	adds	r3, r3, r7
 80037d4:	795a      	ldrb	r2, [r3, #5]
 80037d6:	190b      	adds	r3, r1, r4
 80037d8:	19db      	adds	r3, r3, r7
 80037da:	705a      	strb	r2, [r3, #1]
		GPSInformation[5] = (uint8_t)atoi(tempData2);
 80037dc:	190b      	adds	r3, r1, r4
 80037de:	19db      	adds	r3, r3, r7
 80037e0:	0018      	movs	r0, r3
 80037e2:	f00a fe75 	bl	800e4d0 <atoi>
 80037e6:	0003      	movs	r3, r0
 80037e8:	b2da      	uxtb	r2, r3
 80037ea:	4b62      	ldr	r3, [pc, #392]	; (8003974 <nmea_parser+0x7b4>)
 80037ec:	715a      	strb	r2, [r3, #5]
		//--------------------------------time/date stamp end-------------------------------------------------

		//-----Quantity of GPS information satellites(1 byte, left 4 bit for gps info len, right 4 bit for qty of sats)
		memset(tempData,0,sizeof(tempData));
 80037ee:	192b      	adds	r3, r5, r4
 80037f0:	19db      	adds	r3, r3, r7
 80037f2:	220f      	movs	r2, #15
 80037f4:	2100      	movs	r1, #0
 80037f6:	0018      	movs	r0, r3
 80037f8:	f00a fec9 	bl	800e58e <memset>
		tempDataIndex = 0;
 80037fc:	23e7      	movs	r3, #231	; 0xe7
 80037fe:	191b      	adds	r3, r3, r4
 8003800:	19db      	adds	r3, r3, r7
 8003802:	2200      	movs	r2, #0
 8003804:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNGGAComma[6]+1;x<GNGGAComma[7];x++){
 8003806:	23a4      	movs	r3, #164	; 0xa4
 8003808:	191b      	adds	r3, r3, r4
 800380a:	19db      	adds	r3, r3, r7
 800380c:	799a      	ldrb	r2, [r3, #6]
 800380e:	23e3      	movs	r3, #227	; 0xe3
 8003810:	191b      	adds	r3, r3, r4
 8003812:	19db      	adds	r3, r3, r7
 8003814:	3201      	adds	r2, #1
 8003816:	701a      	strb	r2, [r3, #0]
 8003818:	e022      	b.n	8003860 <nmea_parser+0x6a0>
			tempData[tempDataIndex] = nmeaResponse[GNGGA][x];
 800381a:	0032      	movs	r2, r6
 800381c:	23cc      	movs	r3, #204	; 0xcc
 800381e:	2508      	movs	r5, #8
 8003820:	195b      	adds	r3, r3, r5
 8003822:	19db      	adds	r3, r3, r7
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	1899      	adds	r1, r3, r2
 8003828:	20e3      	movs	r0, #227	; 0xe3
 800382a:	1943      	adds	r3, r0, r5
 800382c:	19db      	adds	r3, r3, r7
 800382e:	781a      	ldrb	r2, [r3, #0]
 8003830:	24e7      	movs	r4, #231	; 0xe7
 8003832:	1963      	adds	r3, r4, r5
 8003834:	19db      	adds	r3, r3, r7
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	5c89      	ldrb	r1, [r1, r2]
 800383a:	2284      	movs	r2, #132	; 0x84
 800383c:	1952      	adds	r2, r2, r5
 800383e:	19d2      	adds	r2, r2, r7
 8003840:	54d1      	strb	r1, [r2, r3]
			tempDataIndex++;
 8003842:	0029      	movs	r1, r5
 8003844:	1863      	adds	r3, r4, r1
 8003846:	19db      	adds	r3, r3, r7
 8003848:	781a      	ldrb	r2, [r3, #0]
 800384a:	1863      	adds	r3, r4, r1
 800384c:	19db      	adds	r3, r3, r7
 800384e:	3201      	adds	r2, #1
 8003850:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNGGAComma[6]+1;x<GNGGAComma[7];x++){
 8003852:	1843      	adds	r3, r0, r1
 8003854:	19db      	adds	r3, r3, r7
 8003856:	781a      	ldrb	r2, [r3, #0]
 8003858:	1843      	adds	r3, r0, r1
 800385a:	19db      	adds	r3, r3, r7
 800385c:	3201      	adds	r2, #1
 800385e:	701a      	strb	r2, [r3, #0]
 8003860:	23a4      	movs	r3, #164	; 0xa4
 8003862:	2508      	movs	r5, #8
 8003864:	195b      	adds	r3, r3, r5
 8003866:	19db      	adds	r3, r3, r7
 8003868:	79db      	ldrb	r3, [r3, #7]
 800386a:	22e3      	movs	r2, #227	; 0xe3
 800386c:	1952      	adds	r2, r2, r5
 800386e:	19d2      	adds	r2, r2, r7
 8003870:	7812      	ldrb	r2, [r2, #0]
 8003872:	429a      	cmp	r2, r3
 8003874:	d3d1      	bcc.n	800381a <nmea_parser+0x65a>
		}
		QOG |= (atoi(tempData));
 8003876:	2484      	movs	r4, #132	; 0x84
 8003878:	1963      	adds	r3, r4, r5
 800387a:	19db      	adds	r3, r3, r7
 800387c:	0018      	movs	r0, r3
 800387e:	f00a fe27 	bl	800e4d0 <atoi>
 8003882:	0003      	movs	r3, r0
 8003884:	b25a      	sxtb	r2, r3
 8003886:	21cb      	movs	r1, #203	; 0xcb
 8003888:	0028      	movs	r0, r5
 800388a:	180b      	adds	r3, r1, r0
 800388c:	19db      	adds	r3, r3, r7
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	b25b      	sxtb	r3, r3
 8003892:	4313      	orrs	r3, r2
 8003894:	b25a      	sxtb	r2, r3
 8003896:	180b      	adds	r3, r1, r0
 8003898:	19db      	adds	r3, r3, r7
 800389a:	701a      	strb	r2, [r3, #0]
		GPSInformation[6] = QOG;
 800389c:	4b35      	ldr	r3, [pc, #212]	; (8003974 <nmea_parser+0x7b4>)
 800389e:	180a      	adds	r2, r1, r0
 80038a0:	19d2      	adds	r2, r2, r7
 80038a2:	7812      	ldrb	r2, [r2, #0]
 80038a4:	719a      	strb	r2, [r3, #6]
		//-------------------------------------QOG END------------------------------------------------------


		//------------------------------------latitude (4 bytes)--------------------------------------
		// char *ptr1;
		memset(tempData,0,sizeof(tempData));
 80038a6:	0005      	movs	r5, r0
 80038a8:	1823      	adds	r3, r4, r0
 80038aa:	19db      	adds	r3, r3, r7
 80038ac:	220f      	movs	r2, #15
 80038ae:	2100      	movs	r1, #0
 80038b0:	0018      	movs	r0, r3
 80038b2:	f00a fe6c 	bl	800e58e <memset>
		memset(tempData2,0,sizeof(tempData2));
 80038b6:	2380      	movs	r3, #128	; 0x80
 80038b8:	002c      	movs	r4, r5
 80038ba:	191b      	adds	r3, r3, r4
 80038bc:	19db      	adds	r3, r3, r7
 80038be:	2204      	movs	r2, #4
 80038c0:	2100      	movs	r1, #0
 80038c2:	0018      	movs	r0, r3
 80038c4:	f00a fe63 	bl	800e58e <memset>
		tempDataIndex = 0;
 80038c8:	23e7      	movs	r3, #231	; 0xe7
 80038ca:	0021      	movs	r1, r4
 80038cc:	185b      	adds	r3, r3, r1
 80038ce:	19db      	adds	r3, r3, r7
 80038d0:	2200      	movs	r2, #0
 80038d2:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[2]+1;x<GNRMCComma[3];x++){
 80038d4:	2394      	movs	r3, #148	; 0x94
 80038d6:	185b      	adds	r3, r3, r1
 80038d8:	19db      	adds	r3, r3, r7
 80038da:	789a      	ldrb	r2, [r3, #2]
 80038dc:	23e2      	movs	r3, #226	; 0xe2
 80038de:	185b      	adds	r3, r3, r1
 80038e0:	19db      	adds	r3, r3, r7
 80038e2:	3201      	adds	r2, #1
 80038e4:	701a      	strb	r2, [r3, #0]
 80038e6:	e020      	b.n	800392a <nmea_parser+0x76a>
			tempData[tempDataIndex]= nmeaResponse[GNRMC][x];
 80038e8:	20e2      	movs	r0, #226	; 0xe2
 80038ea:	2508      	movs	r5, #8
 80038ec:	1943      	adds	r3, r0, r5
 80038ee:	19db      	adds	r3, r3, r7
 80038f0:	781a      	ldrb	r2, [r3, #0]
 80038f2:	24e7      	movs	r4, #231	; 0xe7
 80038f4:	1963      	adds	r3, r4, r5
 80038f6:	19db      	adds	r3, r3, r7
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	21cc      	movs	r1, #204	; 0xcc
 80038fc:	1949      	adds	r1, r1, r5
 80038fe:	19c9      	adds	r1, r1, r7
 8003900:	6809      	ldr	r1, [r1, #0]
 8003902:	5c89      	ldrb	r1, [r1, r2]
 8003904:	2284      	movs	r2, #132	; 0x84
 8003906:	1952      	adds	r2, r2, r5
 8003908:	19d2      	adds	r2, r2, r7
 800390a:	54d1      	strb	r1, [r2, r3]
			tempDataIndex++;
 800390c:	0029      	movs	r1, r5
 800390e:	1863      	adds	r3, r4, r1
 8003910:	19db      	adds	r3, r3, r7
 8003912:	781a      	ldrb	r2, [r3, #0]
 8003914:	1863      	adds	r3, r4, r1
 8003916:	19db      	adds	r3, r3, r7
 8003918:	3201      	adds	r2, #1
 800391a:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[2]+1;x<GNRMCComma[3];x++){
 800391c:	1843      	adds	r3, r0, r1
 800391e:	19db      	adds	r3, r3, r7
 8003920:	781a      	ldrb	r2, [r3, #0]
 8003922:	1843      	adds	r3, r0, r1
 8003924:	19db      	adds	r3, r3, r7
 8003926:	3201      	adds	r2, #1
 8003928:	701a      	strb	r2, [r3, #0]
 800392a:	2394      	movs	r3, #148	; 0x94
 800392c:	2408      	movs	r4, #8
 800392e:	191b      	adds	r3, r3, r4
 8003930:	19db      	adds	r3, r3, r7
 8003932:	78db      	ldrb	r3, [r3, #3]
 8003934:	22e2      	movs	r2, #226	; 0xe2
 8003936:	1912      	adds	r2, r2, r4
 8003938:	19d2      	adds	r2, r2, r7
 800393a:	7812      	ldrb	r2, [r2, #0]
 800393c:	429a      	cmp	r2, r3
 800393e:	d3d3      	bcc.n	80038e8 <nmea_parser+0x728>
		}
		tempData2[0]=tempData[0];
 8003940:	2184      	movs	r1, #132	; 0x84
 8003942:	190b      	adds	r3, r1, r4
 8003944:	19db      	adds	r3, r3, r7
 8003946:	781a      	ldrb	r2, [r3, #0]
 8003948:	2080      	movs	r0, #128	; 0x80
 800394a:	1903      	adds	r3, r0, r4
 800394c:	19db      	adds	r3, r3, r7
 800394e:	701a      	strb	r2, [r3, #0]
		tempData2[1]=tempData[1];
 8003950:	190b      	adds	r3, r1, r4
 8003952:	19db      	adds	r3, r3, r7
 8003954:	785a      	ldrb	r2, [r3, #1]
 8003956:	0021      	movs	r1, r4
 8003958:	1843      	adds	r3, r0, r1
 800395a:	19db      	adds	r3, r3, r7
 800395c:	705a      	strb	r2, [r3, #1]
		uint8_t t1=2;
 800395e:	23e1      	movs	r3, #225	; 0xe1
 8003960:	185b      	adds	r3, r3, r1
 8003962:	19db      	adds	r3, r3, r7
 8003964:	2202      	movs	r2, #2
 8003966:	701a      	strb	r2, [r3, #0]
		uint8_t t2=0;
 8003968:	23e0      	movs	r3, #224	; 0xe0
 800396a:	185b      	adds	r3, r3, r1
 800396c:	19db      	adds	r3, r3, r7
 800396e:	2200      	movs	r2, #0
 8003970:	701a      	strb	r2, [r3, #0]
		char tB[8];
		while(tempData[t1]!=NULL){
 8003972:	e02f      	b.n	80039d4 <nmea_parser+0x814>
 8003974:	200002a4 	.word	0x200002a4
			if(tempData[t1]!='.'){
 8003978:	21e1      	movs	r1, #225	; 0xe1
 800397a:	2008      	movs	r0, #8
 800397c:	180b      	adds	r3, r1, r0
 800397e:	19db      	adds	r3, r3, r7
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	2484      	movs	r4, #132	; 0x84
 8003984:	1822      	adds	r2, r4, r0
 8003986:	19d2      	adds	r2, r2, r7
 8003988:	5cd3      	ldrb	r3, [r2, r3]
 800398a:	2b2e      	cmp	r3, #46	; 0x2e
 800398c:	d019      	beq.n	80039c2 <nmea_parser+0x802>
				tB[t2]=tempData[t1];
 800398e:	0005      	movs	r5, r0
 8003990:	180b      	adds	r3, r1, r0
 8003992:	19db      	adds	r3, r3, r7
 8003994:	781a      	ldrb	r2, [r3, #0]
 8003996:	20e0      	movs	r0, #224	; 0xe0
 8003998:	0029      	movs	r1, r5
 800399a:	1843      	adds	r3, r0, r1
 800399c:	19db      	adds	r3, r3, r7
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	000d      	movs	r5, r1
 80039a2:	1861      	adds	r1, r4, r1
 80039a4:	19c9      	adds	r1, r1, r7
 80039a6:	5c89      	ldrb	r1, [r1, r2]
 80039a8:	2278      	movs	r2, #120	; 0x78
 80039aa:	002c      	movs	r4, r5
 80039ac:	1912      	adds	r2, r2, r4
 80039ae:	19d2      	adds	r2, r2, r7
 80039b0:	54d1      	strb	r1, [r2, r3]
				t2++;
 80039b2:	0021      	movs	r1, r4
 80039b4:	1843      	adds	r3, r0, r1
 80039b6:	19db      	adds	r3, r3, r7
 80039b8:	781a      	ldrb	r2, [r3, #0]
 80039ba:	1843      	adds	r3, r0, r1
 80039bc:	19db      	adds	r3, r3, r7
 80039be:	3201      	adds	r2, #1
 80039c0:	701a      	strb	r2, [r3, #0]
			}
			t1++;
 80039c2:	21e1      	movs	r1, #225	; 0xe1
 80039c4:	2008      	movs	r0, #8
 80039c6:	180b      	adds	r3, r1, r0
 80039c8:	19db      	adds	r3, r3, r7
 80039ca:	781a      	ldrb	r2, [r3, #0]
 80039cc:	180b      	adds	r3, r1, r0
 80039ce:	19db      	adds	r3, r3, r7
 80039d0:	3201      	adds	r2, #1
 80039d2:	701a      	strb	r2, [r3, #0]
		while(tempData[t1]!=NULL){
 80039d4:	23e1      	movs	r3, #225	; 0xe1
 80039d6:	2008      	movs	r0, #8
 80039d8:	181b      	adds	r3, r3, r0
 80039da:	19db      	adds	r3, r3, r7
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	2284      	movs	r2, #132	; 0x84
 80039e0:	1812      	adds	r2, r2, r0
 80039e2:	19d2      	adds	r2, r2, r7
 80039e4:	5cd3      	ldrb	r3, [r2, r3]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1c6      	bne.n	8003978 <nmea_parser+0x7b8>
		}
		latitude=atoi(tB);
 80039ea:	2378      	movs	r3, #120	; 0x78
 80039ec:	0004      	movs	r4, r0
 80039ee:	181b      	adds	r3, r3, r0
 80039f0:	19db      	adds	r3, r3, r7
 80039f2:	0018      	movs	r0, r3
 80039f4:	f00a fd6c 	bl	800e4d0 <atoi>
 80039f8:	0003      	movs	r3, r0
 80039fa:	22ec      	movs	r2, #236	; 0xec
 80039fc:	0020      	movs	r0, r4
 80039fe:	1811      	adds	r1, r2, r0
 8003a00:	19c9      	adds	r1, r1, r7
 8003a02:	600b      	str	r3, [r1, #0]
		if(t2==4){
 8003a04:	23e0      	movs	r3, #224	; 0xe0
 8003a06:	181b      	adds	r3, r3, r0
 8003a08:	19db      	adds	r3, r3, r7
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	2b04      	cmp	r3, #4
 8003a0e:	d109      	bne.n	8003a24 <nmea_parser+0x864>
			latitude*=100;
 8003a10:	0011      	movs	r1, r2
 8003a12:	1813      	adds	r3, r2, r0
 8003a14:	19db      	adds	r3, r3, r7
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2264      	movs	r2, #100	; 0x64
 8003a1a:	4353      	muls	r3, r2
 8003a1c:	180a      	adds	r2, r1, r0
 8003a1e:	19d2      	adds	r2, r2, r7
 8003a20:	6013      	str	r3, [r2, #0]
 8003a22:	e011      	b.n	8003a48 <nmea_parser+0x888>
		}
		else if(t2==5){
 8003a24:	23e0      	movs	r3, #224	; 0xe0
 8003a26:	2008      	movs	r0, #8
 8003a28:	181b      	adds	r3, r3, r0
 8003a2a:	19db      	adds	r3, r3, r7
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	2b05      	cmp	r3, #5
 8003a30:	d10a      	bne.n	8003a48 <nmea_parser+0x888>
			latitude*=10;
 8003a32:	21ec      	movs	r1, #236	; 0xec
 8003a34:	180b      	adds	r3, r1, r0
 8003a36:	19db      	adds	r3, r3, r7
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	0013      	movs	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	189b      	adds	r3, r3, r2
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	180a      	adds	r2, r1, r0
 8003a44:	19d2      	adds	r2, r2, r7
 8003a46:	6013      	str	r3, [r2, #0]
		}
		latitude=latitude*3;
 8003a48:	24ec      	movs	r4, #236	; 0xec
 8003a4a:	2008      	movs	r0, #8
 8003a4c:	1823      	adds	r3, r4, r0
 8003a4e:	19db      	adds	r3, r3, r7
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	0013      	movs	r3, r2
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	189b      	adds	r3, r3, r2
 8003a58:	1822      	adds	r2, r4, r0
 8003a5a:	19d2      	adds	r2, r2, r7
 8003a5c:	6013      	str	r3, [r2, #0]
		latitude+= (atoi(tempData2)*60*30000);
 8003a5e:	2580      	movs	r5, #128	; 0x80
 8003a60:	182b      	adds	r3, r5, r0
 8003a62:	19db      	adds	r3, r3, r7
 8003a64:	0018      	movs	r0, r3
 8003a66:	f00a fd33 	bl	800e4d0 <atoi>
 8003a6a:	0003      	movs	r3, r0
 8003a6c:	4aae      	ldr	r2, [pc, #696]	; (8003d28 <nmea_parser+0xb68>)
 8003a6e:	4353      	muls	r3, r2
 8003a70:	001a      	movs	r2, r3
 8003a72:	2008      	movs	r0, #8
 8003a74:	1823      	adds	r3, r4, r0
 8003a76:	19db      	adds	r3, r3, r7
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	189b      	adds	r3, r3, r2
 8003a7c:	0021      	movs	r1, r4
 8003a7e:	180a      	adds	r2, r1, r0
 8003a80:	19d2      	adds	r2, r2, r7
 8003a82:	6013      	str	r3, [r2, #0]
		GPSInformation[7] = latitude>>24;
 8003a84:	180b      	adds	r3, r1, r0
 8003a86:	19db      	adds	r3, r3, r7
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	0e1b      	lsrs	r3, r3, #24
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	4ba7      	ldr	r3, [pc, #668]	; (8003d2c <nmea_parser+0xb6c>)
 8003a90:	71da      	strb	r2, [r3, #7]
		GPSInformation[8] = latitude>>16;
 8003a92:	180b      	adds	r3, r1, r0
 8003a94:	19db      	adds	r3, r3, r7
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	0c1b      	lsrs	r3, r3, #16
 8003a9a:	b2da      	uxtb	r2, r3
 8003a9c:	4ba3      	ldr	r3, [pc, #652]	; (8003d2c <nmea_parser+0xb6c>)
 8003a9e:	721a      	strb	r2, [r3, #8]
		GPSInformation[9] = latitude>>8;
 8003aa0:	180b      	adds	r3, r1, r0
 8003aa2:	19db      	adds	r3, r3, r7
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	0a1b      	lsrs	r3, r3, #8
 8003aa8:	b2da      	uxtb	r2, r3
 8003aaa:	4ba0      	ldr	r3, [pc, #640]	; (8003d2c <nmea_parser+0xb6c>)
 8003aac:	725a      	strb	r2, [r3, #9]
		GPSInformation[10] = latitude;
 8003aae:	180b      	adds	r3, r1, r0
 8003ab0:	19db      	adds	r3, r3, r7
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	b2da      	uxtb	r2, r3
 8003ab6:	4b9d      	ldr	r3, [pc, #628]	; (8003d2c <nmea_parser+0xb6c>)
 8003ab8:	729a      	strb	r2, [r3, #10]



		//------------------------------------longitude (4 bytes)--------------------------------------
		// char *ptr2;
		memset(tempData,0,sizeof(tempData));
 8003aba:	2384      	movs	r3, #132	; 0x84
 8003abc:	0004      	movs	r4, r0
 8003abe:	191b      	adds	r3, r3, r4
 8003ac0:	19db      	adds	r3, r3, r7
 8003ac2:	220f      	movs	r2, #15
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	0018      	movs	r0, r3
 8003ac8:	f00a fd61 	bl	800e58e <memset>
		memset(tempData2,0,sizeof(tempData2));
 8003acc:	192b      	adds	r3, r5, r4
 8003ace:	19db      	adds	r3, r3, r7
 8003ad0:	2204      	movs	r2, #4
 8003ad2:	2100      	movs	r1, #0
 8003ad4:	0018      	movs	r0, r3
 8003ad6:	f00a fd5a 	bl	800e58e <memset>
		tempDataIndex = 0;
 8003ada:	23e7      	movs	r3, #231	; 0xe7
 8003adc:	0020      	movs	r0, r4
 8003ade:	181b      	adds	r3, r3, r0
 8003ae0:	19db      	adds	r3, r3, r7
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[4]+1;x<GNRMCComma[5];x++){
 8003ae6:	2394      	movs	r3, #148	; 0x94
 8003ae8:	181b      	adds	r3, r3, r0
 8003aea:	19db      	adds	r3, r3, r7
 8003aec:	791a      	ldrb	r2, [r3, #4]
 8003aee:	23df      	movs	r3, #223	; 0xdf
 8003af0:	181b      	adds	r3, r3, r0
 8003af2:	19db      	adds	r3, r3, r7
 8003af4:	3201      	adds	r2, #1
 8003af6:	701a      	strb	r2, [r3, #0]
 8003af8:	e020      	b.n	8003b3c <nmea_parser+0x97c>
			tempData[tempDataIndex]= nmeaResponse[GNRMC][x];
 8003afa:	20df      	movs	r0, #223	; 0xdf
 8003afc:	2508      	movs	r5, #8
 8003afe:	1943      	adds	r3, r0, r5
 8003b00:	19db      	adds	r3, r3, r7
 8003b02:	781a      	ldrb	r2, [r3, #0]
 8003b04:	24e7      	movs	r4, #231	; 0xe7
 8003b06:	1963      	adds	r3, r4, r5
 8003b08:	19db      	adds	r3, r3, r7
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	21cc      	movs	r1, #204	; 0xcc
 8003b0e:	1949      	adds	r1, r1, r5
 8003b10:	19c9      	adds	r1, r1, r7
 8003b12:	6809      	ldr	r1, [r1, #0]
 8003b14:	5c89      	ldrb	r1, [r1, r2]
 8003b16:	2284      	movs	r2, #132	; 0x84
 8003b18:	1952      	adds	r2, r2, r5
 8003b1a:	19d2      	adds	r2, r2, r7
 8003b1c:	54d1      	strb	r1, [r2, r3]
			tempDataIndex++;
 8003b1e:	0029      	movs	r1, r5
 8003b20:	1863      	adds	r3, r4, r1
 8003b22:	19db      	adds	r3, r3, r7
 8003b24:	781a      	ldrb	r2, [r3, #0]
 8003b26:	1863      	adds	r3, r4, r1
 8003b28:	19db      	adds	r3, r3, r7
 8003b2a:	3201      	adds	r2, #1
 8003b2c:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[4]+1;x<GNRMCComma[5];x++){
 8003b2e:	1843      	adds	r3, r0, r1
 8003b30:	19db      	adds	r3, r3, r7
 8003b32:	781a      	ldrb	r2, [r3, #0]
 8003b34:	1843      	adds	r3, r0, r1
 8003b36:	19db      	adds	r3, r3, r7
 8003b38:	3201      	adds	r2, #1
 8003b3a:	701a      	strb	r2, [r3, #0]
 8003b3c:	2394      	movs	r3, #148	; 0x94
 8003b3e:	2408      	movs	r4, #8
 8003b40:	191b      	adds	r3, r3, r4
 8003b42:	19db      	adds	r3, r3, r7
 8003b44:	795b      	ldrb	r3, [r3, #5]
 8003b46:	22df      	movs	r2, #223	; 0xdf
 8003b48:	1912      	adds	r2, r2, r4
 8003b4a:	19d2      	adds	r2, r2, r7
 8003b4c:	7812      	ldrb	r2, [r2, #0]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d3d3      	bcc.n	8003afa <nmea_parser+0x93a>
		}

		tempData2[0]=tempData[0];
 8003b52:	2184      	movs	r1, #132	; 0x84
 8003b54:	190b      	adds	r3, r1, r4
 8003b56:	19db      	adds	r3, r3, r7
 8003b58:	781a      	ldrb	r2, [r3, #0]
 8003b5a:	2080      	movs	r0, #128	; 0x80
 8003b5c:	1903      	adds	r3, r0, r4
 8003b5e:	19db      	adds	r3, r3, r7
 8003b60:	701a      	strb	r2, [r3, #0]
		tempData2[1]=tempData[1];
 8003b62:	190b      	adds	r3, r1, r4
 8003b64:	19db      	adds	r3, r3, r7
 8003b66:	785a      	ldrb	r2, [r3, #1]
 8003b68:	1903      	adds	r3, r0, r4
 8003b6a:	19db      	adds	r3, r3, r7
 8003b6c:	705a      	strb	r2, [r3, #1]
		tempData2[2]=tempData[2];
 8003b6e:	190b      	adds	r3, r1, r4
 8003b70:	19db      	adds	r3, r3, r7
 8003b72:	789a      	ldrb	r2, [r3, #2]
 8003b74:	0021      	movs	r1, r4
 8003b76:	1843      	adds	r3, r0, r1
 8003b78:	19db      	adds	r3, r3, r7
 8003b7a:	709a      	strb	r2, [r3, #2]
		memset(tB,0,sizeof(tB));
 8003b7c:	2378      	movs	r3, #120	; 0x78
 8003b7e:	000c      	movs	r4, r1
 8003b80:	185b      	adds	r3, r3, r1
 8003b82:	19db      	adds	r3, r3, r7
 8003b84:	2208      	movs	r2, #8
 8003b86:	2100      	movs	r1, #0
 8003b88:	0018      	movs	r0, r3
 8003b8a:	f00a fd00 	bl	800e58e <memset>
		t1=3;
 8003b8e:	23e1      	movs	r3, #225	; 0xe1
 8003b90:	0021      	movs	r1, r4
 8003b92:	185b      	adds	r3, r3, r1
 8003b94:	19db      	adds	r3, r3, r7
 8003b96:	2203      	movs	r2, #3
 8003b98:	701a      	strb	r2, [r3, #0]
		t2=0;
 8003b9a:	23e0      	movs	r3, #224	; 0xe0
 8003b9c:	185b      	adds	r3, r3, r1
 8003b9e:	19db      	adds	r3, r3, r7
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	701a      	strb	r2, [r3, #0]
		while(tempData[t1]!=NULL){
 8003ba4:	e02d      	b.n	8003c02 <nmea_parser+0xa42>
			if(tempData[t1]!='.'){
 8003ba6:	21e1      	movs	r1, #225	; 0xe1
 8003ba8:	2008      	movs	r0, #8
 8003baa:	180b      	adds	r3, r1, r0
 8003bac:	19db      	adds	r3, r3, r7
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	2484      	movs	r4, #132	; 0x84
 8003bb2:	1822      	adds	r2, r4, r0
 8003bb4:	19d2      	adds	r2, r2, r7
 8003bb6:	5cd3      	ldrb	r3, [r2, r3]
 8003bb8:	2b2e      	cmp	r3, #46	; 0x2e
 8003bba:	d019      	beq.n	8003bf0 <nmea_parser+0xa30>
				tB[t2]=tempData[t1];
 8003bbc:	0005      	movs	r5, r0
 8003bbe:	180b      	adds	r3, r1, r0
 8003bc0:	19db      	adds	r3, r3, r7
 8003bc2:	781a      	ldrb	r2, [r3, #0]
 8003bc4:	20e0      	movs	r0, #224	; 0xe0
 8003bc6:	0029      	movs	r1, r5
 8003bc8:	1843      	adds	r3, r0, r1
 8003bca:	19db      	adds	r3, r3, r7
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	000d      	movs	r5, r1
 8003bd0:	1861      	adds	r1, r4, r1
 8003bd2:	19c9      	adds	r1, r1, r7
 8003bd4:	5c89      	ldrb	r1, [r1, r2]
 8003bd6:	2278      	movs	r2, #120	; 0x78
 8003bd8:	002c      	movs	r4, r5
 8003bda:	1912      	adds	r2, r2, r4
 8003bdc:	19d2      	adds	r2, r2, r7
 8003bde:	54d1      	strb	r1, [r2, r3]
				t2++;
 8003be0:	0021      	movs	r1, r4
 8003be2:	1843      	adds	r3, r0, r1
 8003be4:	19db      	adds	r3, r3, r7
 8003be6:	781a      	ldrb	r2, [r3, #0]
 8003be8:	1843      	adds	r3, r0, r1
 8003bea:	19db      	adds	r3, r3, r7
 8003bec:	3201      	adds	r2, #1
 8003bee:	701a      	strb	r2, [r3, #0]
			}
			t1++;
 8003bf0:	21e1      	movs	r1, #225	; 0xe1
 8003bf2:	2008      	movs	r0, #8
 8003bf4:	180b      	adds	r3, r1, r0
 8003bf6:	19db      	adds	r3, r3, r7
 8003bf8:	781a      	ldrb	r2, [r3, #0]
 8003bfa:	180b      	adds	r3, r1, r0
 8003bfc:	19db      	adds	r3, r3, r7
 8003bfe:	3201      	adds	r2, #1
 8003c00:	701a      	strb	r2, [r3, #0]
		while(tempData[t1]!=NULL){
 8003c02:	23e1      	movs	r3, #225	; 0xe1
 8003c04:	2008      	movs	r0, #8
 8003c06:	181b      	adds	r3, r3, r0
 8003c08:	19db      	adds	r3, r3, r7
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	2284      	movs	r2, #132	; 0x84
 8003c0e:	1812      	adds	r2, r2, r0
 8003c10:	19d2      	adds	r2, r2, r7
 8003c12:	5cd3      	ldrb	r3, [r2, r3]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d1c6      	bne.n	8003ba6 <nmea_parser+0x9e6>
		}
		longitude=atoi(tB);
 8003c18:	2378      	movs	r3, #120	; 0x78
 8003c1a:	0004      	movs	r4, r0
 8003c1c:	181b      	adds	r3, r3, r0
 8003c1e:	19db      	adds	r3, r3, r7
 8003c20:	0018      	movs	r0, r3
 8003c22:	f00a fc55 	bl	800e4d0 <atoi>
 8003c26:	0003      	movs	r3, r0
 8003c28:	22e8      	movs	r2, #232	; 0xe8
 8003c2a:	0020      	movs	r0, r4
 8003c2c:	1811      	adds	r1, r2, r0
 8003c2e:	19c9      	adds	r1, r1, r7
 8003c30:	600b      	str	r3, [r1, #0]
		if(t2==4){
 8003c32:	23e0      	movs	r3, #224	; 0xe0
 8003c34:	181b      	adds	r3, r3, r0
 8003c36:	19db      	adds	r3, r3, r7
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	2b04      	cmp	r3, #4
 8003c3c:	d109      	bne.n	8003c52 <nmea_parser+0xa92>
			longitude*=100;
 8003c3e:	0011      	movs	r1, r2
 8003c40:	1813      	adds	r3, r2, r0
 8003c42:	19db      	adds	r3, r3, r7
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2264      	movs	r2, #100	; 0x64
 8003c48:	4353      	muls	r3, r2
 8003c4a:	180a      	adds	r2, r1, r0
 8003c4c:	19d2      	adds	r2, r2, r7
 8003c4e:	6013      	str	r3, [r2, #0]
 8003c50:	e011      	b.n	8003c76 <nmea_parser+0xab6>
		}
		else if(t2==5){
 8003c52:	23e0      	movs	r3, #224	; 0xe0
 8003c54:	2008      	movs	r0, #8
 8003c56:	181b      	adds	r3, r3, r0
 8003c58:	19db      	adds	r3, r3, r7
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	2b05      	cmp	r3, #5
 8003c5e:	d10a      	bne.n	8003c76 <nmea_parser+0xab6>
			longitude*=10;
 8003c60:	21e8      	movs	r1, #232	; 0xe8
 8003c62:	180b      	adds	r3, r1, r0
 8003c64:	19db      	adds	r3, r3, r7
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	0013      	movs	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	189b      	adds	r3, r3, r2
 8003c6e:	005b      	lsls	r3, r3, #1
 8003c70:	180a      	adds	r2, r1, r0
 8003c72:	19d2      	adds	r2, r2, r7
 8003c74:	6013      	str	r3, [r2, #0]
		}
		longitude=longitude*3;
 8003c76:	24e8      	movs	r4, #232	; 0xe8
 8003c78:	2008      	movs	r0, #8
 8003c7a:	1823      	adds	r3, r4, r0
 8003c7c:	19db      	adds	r3, r3, r7
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	0013      	movs	r3, r2
 8003c82:	005b      	lsls	r3, r3, #1
 8003c84:	189b      	adds	r3, r3, r2
 8003c86:	1822      	adds	r2, r4, r0
 8003c88:	19d2      	adds	r2, r2, r7
 8003c8a:	6013      	str	r3, [r2, #0]
		longitude+= (atoi(tempData2)*60*30000);
 8003c8c:	2580      	movs	r5, #128	; 0x80
 8003c8e:	182b      	adds	r3, r5, r0
 8003c90:	19db      	adds	r3, r3, r7
 8003c92:	0018      	movs	r0, r3
 8003c94:	f00a fc1c 	bl	800e4d0 <atoi>
 8003c98:	0003      	movs	r3, r0
 8003c9a:	4a23      	ldr	r2, [pc, #140]	; (8003d28 <nmea_parser+0xb68>)
 8003c9c:	4353      	muls	r3, r2
 8003c9e:	001a      	movs	r2, r3
 8003ca0:	2008      	movs	r0, #8
 8003ca2:	1823      	adds	r3, r4, r0
 8003ca4:	19db      	adds	r3, r3, r7
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	189b      	adds	r3, r3, r2
 8003caa:	0021      	movs	r1, r4
 8003cac:	180a      	adds	r2, r1, r0
 8003cae:	19d2      	adds	r2, r2, r7
 8003cb0:	6013      	str	r3, [r2, #0]
		GPSInformation[11] = longitude>>24;
 8003cb2:	180b      	adds	r3, r1, r0
 8003cb4:	19db      	adds	r3, r3, r7
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	0e1b      	lsrs	r3, r3, #24
 8003cba:	b2da      	uxtb	r2, r3
 8003cbc:	4b1b      	ldr	r3, [pc, #108]	; (8003d2c <nmea_parser+0xb6c>)
 8003cbe:	72da      	strb	r2, [r3, #11]
		GPSInformation[12] = longitude>>16;
 8003cc0:	180b      	adds	r3, r1, r0
 8003cc2:	19db      	adds	r3, r3, r7
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	0c1b      	lsrs	r3, r3, #16
 8003cc8:	b2da      	uxtb	r2, r3
 8003cca:	4b18      	ldr	r3, [pc, #96]	; (8003d2c <nmea_parser+0xb6c>)
 8003ccc:	731a      	strb	r2, [r3, #12]
		GPSInformation[13] = longitude>>8;
 8003cce:	180b      	adds	r3, r1, r0
 8003cd0:	19db      	adds	r3, r3, r7
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	0a1b      	lsrs	r3, r3, #8
 8003cd6:	b2da      	uxtb	r2, r3
 8003cd8:	4b14      	ldr	r3, [pc, #80]	; (8003d2c <nmea_parser+0xb6c>)
 8003cda:	735a      	strb	r2, [r3, #13]
		GPSInformation[14] = longitude;
 8003cdc:	180b      	adds	r3, r1, r0
 8003cde:	19db      	adds	r3, r3, r7
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	b2da      	uxtb	r2, r3
 8003ce4:	4b11      	ldr	r3, [pc, #68]	; (8003d2c <nmea_parser+0xb6c>)
 8003ce6:	739a      	strb	r2, [r3, #14]
		//------------------------------------longitude end--------------------------------------



		//----------------------------------speed----------------------------------------------------
		memset(tempData,0,sizeof(tempData));
 8003ce8:	2384      	movs	r3, #132	; 0x84
 8003cea:	0004      	movs	r4, r0
 8003cec:	191b      	adds	r3, r3, r4
 8003cee:	19db      	adds	r3, r3, r7
 8003cf0:	220f      	movs	r2, #15
 8003cf2:	2100      	movs	r1, #0
 8003cf4:	0018      	movs	r0, r3
 8003cf6:	f00a fc4a 	bl	800e58e <memset>
		memset(tempData2,0,sizeof(tempData2));
 8003cfa:	192b      	adds	r3, r5, r4
 8003cfc:	19db      	adds	r3, r3, r7
 8003cfe:	2204      	movs	r2, #4
 8003d00:	2100      	movs	r1, #0
 8003d02:	0018      	movs	r0, r3
 8003d04:	f00a fc43 	bl	800e58e <memset>
		tempDataIndex = 0;
 8003d08:	23e7      	movs	r3, #231	; 0xe7
 8003d0a:	0020      	movs	r0, r4
 8003d0c:	181b      	adds	r3, r3, r0
 8003d0e:	19db      	adds	r3, r3, r7
 8003d10:	2200      	movs	r2, #0
 8003d12:	701a      	strb	r2, [r3, #0]
		float speedinf;
		for(uint8_t x =GNRMCComma[6]+1;x<GNRMCComma[7];x++){
 8003d14:	2394      	movs	r3, #148	; 0x94
 8003d16:	181b      	adds	r3, r3, r0
 8003d18:	19db      	adds	r3, r3, r7
 8003d1a:	799a      	ldrb	r2, [r3, #6]
 8003d1c:	23d7      	movs	r3, #215	; 0xd7
 8003d1e:	181b      	adds	r3, r3, r0
 8003d20:	19db      	adds	r3, r3, r7
 8003d22:	3201      	adds	r2, #1
 8003d24:	701a      	strb	r2, [r3, #0]
 8003d26:	e024      	b.n	8003d72 <nmea_parser+0xbb2>
 8003d28:	001b7740 	.word	0x001b7740
 8003d2c:	200002a4 	.word	0x200002a4
			tempData[tempDataIndex]= nmeaResponse[GNRMC][x];
 8003d30:	20d7      	movs	r0, #215	; 0xd7
 8003d32:	2508      	movs	r5, #8
 8003d34:	1943      	adds	r3, r0, r5
 8003d36:	19db      	adds	r3, r3, r7
 8003d38:	781a      	ldrb	r2, [r3, #0]
 8003d3a:	24e7      	movs	r4, #231	; 0xe7
 8003d3c:	1963      	adds	r3, r4, r5
 8003d3e:	19db      	adds	r3, r3, r7
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	21cc      	movs	r1, #204	; 0xcc
 8003d44:	1949      	adds	r1, r1, r5
 8003d46:	19c9      	adds	r1, r1, r7
 8003d48:	6809      	ldr	r1, [r1, #0]
 8003d4a:	5c89      	ldrb	r1, [r1, r2]
 8003d4c:	2284      	movs	r2, #132	; 0x84
 8003d4e:	1952      	adds	r2, r2, r5
 8003d50:	19d2      	adds	r2, r2, r7
 8003d52:	54d1      	strb	r1, [r2, r3]
			tempDataIndex++;
 8003d54:	0029      	movs	r1, r5
 8003d56:	1863      	adds	r3, r4, r1
 8003d58:	19db      	adds	r3, r3, r7
 8003d5a:	781a      	ldrb	r2, [r3, #0]
 8003d5c:	1863      	adds	r3, r4, r1
 8003d5e:	19db      	adds	r3, r3, r7
 8003d60:	3201      	adds	r2, #1
 8003d62:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[6]+1;x<GNRMCComma[7];x++){
 8003d64:	1843      	adds	r3, r0, r1
 8003d66:	19db      	adds	r3, r3, r7
 8003d68:	781a      	ldrb	r2, [r3, #0]
 8003d6a:	1843      	adds	r3, r0, r1
 8003d6c:	19db      	adds	r3, r3, r7
 8003d6e:	3201      	adds	r2, #1
 8003d70:	701a      	strb	r2, [r3, #0]
 8003d72:	2394      	movs	r3, #148	; 0x94
 8003d74:	2508      	movs	r5, #8
 8003d76:	195b      	adds	r3, r3, r5
 8003d78:	19db      	adds	r3, r3, r7
 8003d7a:	79db      	ldrb	r3, [r3, #7]
 8003d7c:	22d7      	movs	r2, #215	; 0xd7
 8003d7e:	1952      	adds	r2, r2, r5
 8003d80:	19d2      	adds	r2, r2, r7
 8003d82:	7812      	ldrb	r2, [r2, #0]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d3d3      	bcc.n	8003d30 <nmea_parser+0xb70>
		}

		speedinf = strtof(tempData,NULL);
 8003d88:	2384      	movs	r3, #132	; 0x84
 8003d8a:	195b      	adds	r3, r3, r5
 8003d8c:	19db      	adds	r3, r3, r7
 8003d8e:	2100      	movs	r1, #0
 8003d90:	0018      	movs	r0, r3
 8003d92:	f00b fa97 	bl	800f2c4 <strtof>
 8003d96:	1c03      	adds	r3, r0, #0
 8003d98:	24d8      	movs	r4, #216	; 0xd8
 8003d9a:	1962      	adds	r2, r4, r5
 8003d9c:	19d2      	adds	r2, r2, r7
 8003d9e:	6013      	str	r3, [r2, #0]
		speedinf= speedinf * 1.85;
 8003da0:	1963      	adds	r3, r4, r5
 8003da2:	19db      	adds	r3, r3, r7
 8003da4:	6818      	ldr	r0, [r3, #0]
 8003da6:	f7ff f8eb 	bl	8002f80 <__aeabi_f2d>
 8003daa:	4a80      	ldr	r2, [pc, #512]	; (8003fac <nmea_parser+0xdec>)
 8003dac:	4b80      	ldr	r3, [pc, #512]	; (8003fb0 <nmea_parser+0xdf0>)
 8003dae:	f7fe fa3f 	bl	8002230 <__aeabi_dmul>
 8003db2:	0002      	movs	r2, r0
 8003db4:	000b      	movs	r3, r1
 8003db6:	0010      	movs	r0, r2
 8003db8:	0019      	movs	r1, r3
 8003dba:	f7ff f929 	bl	8003010 <__aeabi_d2f>
 8003dbe:	1c03      	adds	r3, r0, #0
 8003dc0:	1962      	adds	r2, r4, r5
 8003dc2:	19d2      	adds	r2, r2, r7
 8003dc4:	6013      	str	r3, [r2, #0]
		if(speedinf>255){
 8003dc6:	497b      	ldr	r1, [pc, #492]	; (8003fb4 <nmea_parser+0xdf4>)
 8003dc8:	1963      	adds	r3, r4, r5
 8003dca:	19db      	adds	r3, r3, r7
 8003dcc:	6818      	ldr	r0, [r3, #0]
 8003dce:	f7fc fb97 	bl	8000500 <__aeabi_fcmpgt>
 8003dd2:	1e03      	subs	r3, r0, #0
 8003dd4:	d003      	beq.n	8003dde <nmea_parser+0xc1e>
			speedinf=255;
 8003dd6:	4b77      	ldr	r3, [pc, #476]	; (8003fb4 <nmea_parser+0xdf4>)
 8003dd8:	1962      	adds	r2, r4, r5
 8003dda:	19d2      	adds	r2, r2, r7
 8003ddc:	6013      	str	r3, [r2, #0]
		}
		if(speedinf<1){
 8003dde:	21fe      	movs	r1, #254	; 0xfe
 8003de0:	0589      	lsls	r1, r1, #22
 8003de2:	24d8      	movs	r4, #216	; 0xd8
 8003de4:	2508      	movs	r5, #8
 8003de6:	1963      	adds	r3, r4, r5
 8003de8:	19db      	adds	r3, r3, r7
 8003dea:	6818      	ldr	r0, [r3, #0]
 8003dec:	f7fc fb74 	bl	80004d8 <__aeabi_fcmplt>
 8003df0:	1e03      	subs	r3, r0, #0
 8003df2:	d003      	beq.n	8003dfc <nmea_parser+0xc3c>
			speedinf=0;
 8003df4:	2300      	movs	r3, #0
 8003df6:	1962      	adds	r2, r4, r5
 8003df8:	19d2      	adds	r2, r2, r7
 8003dfa:	6013      	str	r3, [r2, #0]

		}

		GPSInformation[15] = (int)speedinf;
 8003dfc:	23d8      	movs	r3, #216	; 0xd8
 8003dfe:	2408      	movs	r4, #8
 8003e00:	191b      	adds	r3, r3, r4
 8003e02:	19db      	adds	r3, r3, r7
 8003e04:	6818      	ldr	r0, [r3, #0]
 8003e06:	f7fd fa67 	bl	80012d8 <__aeabi_f2iz>
 8003e0a:	0003      	movs	r3, r0
 8003e0c:	b2da      	uxtb	r2, r3
 8003e0e:	4b6a      	ldr	r3, [pc, #424]	; (8003fb8 <nmea_parser+0xdf8>)
 8003e10:	73da      	strb	r2, [r3, #15]



		//------------------------------Coursestatus block(2 byte)--------------------------------
		//Byte1, bit 4(gps position bit)
		if (nmeaResponse[GNRMC][GNRMCComma[1]+1] == 'A'){
 8003e12:	2394      	movs	r3, #148	; 0x94
 8003e14:	191b      	adds	r3, r3, r4
 8003e16:	19db      	adds	r3, r3, r7
 8003e18:	785b      	ldrb	r3, [r3, #1]
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	22cc      	movs	r2, #204	; 0xcc
 8003e1e:	1912      	adds	r2, r2, r4
 8003e20:	19d2      	adds	r2, r2, r7
 8003e22:	6812      	ldr	r2, [r2, #0]
 8003e24:	5cd3      	ldrb	r3, [r2, r3]
 8003e26:	2b41      	cmp	r3, #65	; 0x41
 8003e28:	d109      	bne.n	8003e3e <nmea_parser+0xc7e>
			courseStatus |= 0x1000;
 8003e2a:	22f6      	movs	r2, #246	; 0xf6
 8003e2c:	1913      	adds	r3, r2, r4
 8003e2e:	19db      	adds	r3, r3, r7
 8003e30:	1912      	adds	r2, r2, r4
 8003e32:	19d2      	adds	r2, r2, r7
 8003e34:	8812      	ldrh	r2, [r2, #0]
 8003e36:	2180      	movs	r1, #128	; 0x80
 8003e38:	0149      	lsls	r1, r1, #5
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	801a      	strh	r2, [r3, #0]
		}
		//Byte1, bit 5(realtime differential)
		if (nmeaResponse[GNGGA][GNGGAComma[5]+1] != '1'){
 8003e3e:	0032      	movs	r2, r6
 8003e40:	23cc      	movs	r3, #204	; 0xcc
 8003e42:	2108      	movs	r1, #8
 8003e44:	185b      	adds	r3, r3, r1
 8003e46:	19db      	adds	r3, r3, r7
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	189a      	adds	r2, r3, r2
 8003e4c:	23a4      	movs	r3, #164	; 0xa4
 8003e4e:	185b      	adds	r3, r3, r1
 8003e50:	19db      	adds	r3, r3, r7
 8003e52:	795b      	ldrb	r3, [r3, #5]
 8003e54:	3301      	adds	r3, #1
 8003e56:	5cd3      	ldrb	r3, [r2, r3]
 8003e58:	2b31      	cmp	r3, #49	; 0x31
 8003e5a:	d009      	beq.n	8003e70 <nmea_parser+0xcb0>
			courseStatus |= 0x2000;
 8003e5c:	22f6      	movs	r2, #246	; 0xf6
 8003e5e:	1853      	adds	r3, r2, r1
 8003e60:	19db      	adds	r3, r3, r7
 8003e62:	1852      	adds	r2, r2, r1
 8003e64:	19d2      	adds	r2, r2, r7
 8003e66:	8812      	ldrh	r2, [r2, #0]
 8003e68:	2180      	movs	r1, #128	; 0x80
 8003e6a:	0189      	lsls	r1, r1, #6
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	801a      	strh	r2, [r3, #0]
		}
		//Byte1, bit 3(East/West bit)
		if(nmeaResponse[GNRMC][GNRMCComma[5]+1] == 'W' ){
 8003e70:	2394      	movs	r3, #148	; 0x94
 8003e72:	2108      	movs	r1, #8
 8003e74:	185b      	adds	r3, r3, r1
 8003e76:	19db      	adds	r3, r3, r7
 8003e78:	795b      	ldrb	r3, [r3, #5]
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	22cc      	movs	r2, #204	; 0xcc
 8003e7e:	1852      	adds	r2, r2, r1
 8003e80:	19d2      	adds	r2, r2, r7
 8003e82:	6812      	ldr	r2, [r2, #0]
 8003e84:	5cd3      	ldrb	r3, [r2, r3]
 8003e86:	2b57      	cmp	r3, #87	; 0x57
 8003e88:	d109      	bne.n	8003e9e <nmea_parser+0xcde>
			courseStatus |= 0x800;
 8003e8a:	22f6      	movs	r2, #246	; 0xf6
 8003e8c:	1853      	adds	r3, r2, r1
 8003e8e:	19db      	adds	r3, r3, r7
 8003e90:	1852      	adds	r2, r2, r1
 8003e92:	19d2      	adds	r2, r2, r7
 8003e94:	8812      	ldrh	r2, [r2, #0]
 8003e96:	2180      	movs	r1, #128	; 0x80
 8003e98:	0109      	lsls	r1, r1, #4
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	801a      	strh	r2, [r3, #0]
		}
		//Byte1, bit 2(North/South bit)
		if(nmeaResponse[GNRMC][GNRMCComma[3]+1] == 'N' ){
 8003e9e:	2394      	movs	r3, #148	; 0x94
 8003ea0:	2108      	movs	r1, #8
 8003ea2:	185b      	adds	r3, r3, r1
 8003ea4:	19db      	adds	r3, r3, r7
 8003ea6:	78db      	ldrb	r3, [r3, #3]
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	22cc      	movs	r2, #204	; 0xcc
 8003eac:	1852      	adds	r2, r2, r1
 8003eae:	19d2      	adds	r2, r2, r7
 8003eb0:	6812      	ldr	r2, [r2, #0]
 8003eb2:	5cd3      	ldrb	r3, [r2, r3]
 8003eb4:	2b4e      	cmp	r3, #78	; 0x4e
 8003eb6:	d109      	bne.n	8003ecc <nmea_parser+0xd0c>
			courseStatus |= 0x400;
 8003eb8:	22f6      	movs	r2, #246	; 0xf6
 8003eba:	1853      	adds	r3, r2, r1
 8003ebc:	19db      	adds	r3, r3, r7
 8003ebe:	1852      	adds	r2, r2, r1
 8003ec0:	19d2      	adds	r2, r2, r7
 8003ec2:	8812      	ldrh	r2, [r2, #0]
 8003ec4:	2180      	movs	r1, #128	; 0x80
 8003ec6:	00c9      	lsls	r1, r1, #3
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	801a      	strh	r2, [r3, #0]
		}

		//Course
		memset(tempData,0,sizeof(tempData));
 8003ecc:	2384      	movs	r3, #132	; 0x84
 8003ece:	2408      	movs	r4, #8
 8003ed0:	191b      	adds	r3, r3, r4
 8003ed2:	19db      	adds	r3, r3, r7
 8003ed4:	220f      	movs	r2, #15
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	0018      	movs	r0, r3
 8003eda:	f00a fb58 	bl	800e58e <memset>
		tempDataIndex = 0;
 8003ede:	23e7      	movs	r3, #231	; 0xe7
 8003ee0:	0021      	movs	r1, r4
 8003ee2:	185b      	adds	r3, r3, r1
 8003ee4:	19db      	adds	r3, r3, r7
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[7]+1;x<GNRMCComma[8];x++){
 8003eea:	2394      	movs	r3, #148	; 0x94
 8003eec:	185b      	adds	r3, r3, r1
 8003eee:	19db      	adds	r3, r3, r7
 8003ef0:	79da      	ldrb	r2, [r3, #7]
 8003ef2:	23d6      	movs	r3, #214	; 0xd6
 8003ef4:	185b      	adds	r3, r3, r1
 8003ef6:	19db      	adds	r3, r3, r7
 8003ef8:	3201      	adds	r2, #1
 8003efa:	701a      	strb	r2, [r3, #0]
 8003efc:	e020      	b.n	8003f40 <nmea_parser+0xd80>
			tempData[tempDataIndex]= nmeaResponse[GNRMC][x];
 8003efe:	20d6      	movs	r0, #214	; 0xd6
 8003f00:	2508      	movs	r5, #8
 8003f02:	1943      	adds	r3, r0, r5
 8003f04:	19db      	adds	r3, r3, r7
 8003f06:	781a      	ldrb	r2, [r3, #0]
 8003f08:	24e7      	movs	r4, #231	; 0xe7
 8003f0a:	1963      	adds	r3, r4, r5
 8003f0c:	19db      	adds	r3, r3, r7
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	21cc      	movs	r1, #204	; 0xcc
 8003f12:	1949      	adds	r1, r1, r5
 8003f14:	19c9      	adds	r1, r1, r7
 8003f16:	6809      	ldr	r1, [r1, #0]
 8003f18:	5c89      	ldrb	r1, [r1, r2]
 8003f1a:	2284      	movs	r2, #132	; 0x84
 8003f1c:	1952      	adds	r2, r2, r5
 8003f1e:	19d2      	adds	r2, r2, r7
 8003f20:	54d1      	strb	r1, [r2, r3]
			tempDataIndex++;
 8003f22:	0029      	movs	r1, r5
 8003f24:	1863      	adds	r3, r4, r1
 8003f26:	19db      	adds	r3, r3, r7
 8003f28:	781a      	ldrb	r2, [r3, #0]
 8003f2a:	1863      	adds	r3, r4, r1
 8003f2c:	19db      	adds	r3, r3, r7
 8003f2e:	3201      	adds	r2, #1
 8003f30:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[7]+1;x<GNRMCComma[8];x++){
 8003f32:	1843      	adds	r3, r0, r1
 8003f34:	19db      	adds	r3, r3, r7
 8003f36:	781a      	ldrb	r2, [r3, #0]
 8003f38:	1843      	adds	r3, r0, r1
 8003f3a:	19db      	adds	r3, r3, r7
 8003f3c:	3201      	adds	r2, #1
 8003f3e:	701a      	strb	r2, [r3, #0]
 8003f40:	2394      	movs	r3, #148	; 0x94
 8003f42:	2408      	movs	r4, #8
 8003f44:	191b      	adds	r3, r3, r4
 8003f46:	19db      	adds	r3, r3, r7
 8003f48:	7a1b      	ldrb	r3, [r3, #8]
 8003f4a:	22d6      	movs	r2, #214	; 0xd6
 8003f4c:	1912      	adds	r2, r2, r4
 8003f4e:	19d2      	adds	r2, r2, r7
 8003f50:	7812      	ldrb	r2, [r2, #0]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d3d3      	bcc.n	8003efe <nmea_parser+0xd3e>
		}
		courseStatus |= atoi(tempData);
 8003f56:	2384      	movs	r3, #132	; 0x84
 8003f58:	191b      	adds	r3, r3, r4
 8003f5a:	19db      	adds	r3, r3, r7
 8003f5c:	0018      	movs	r0, r3
 8003f5e:	f00a fab7 	bl	800e4d0 <atoi>
 8003f62:	0003      	movs	r3, r0
 8003f64:	b21a      	sxth	r2, r3
 8003f66:	21f6      	movs	r1, #246	; 0xf6
 8003f68:	190b      	adds	r3, r1, r4
 8003f6a:	19db      	adds	r3, r3, r7
 8003f6c:	2000      	movs	r0, #0
 8003f6e:	5e1b      	ldrsh	r3, [r3, r0]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	b21a      	sxth	r2, r3
 8003f74:	0020      	movs	r0, r4
 8003f76:	180b      	adds	r3, r1, r0
 8003f78:	19db      	adds	r3, r3, r7
 8003f7a:	801a      	strh	r2, [r3, #0]
		GPSInformation[16]= courseStatus>>8;
 8003f7c:	180b      	adds	r3, r1, r0
 8003f7e:	19db      	adds	r3, r3, r7
 8003f80:	881b      	ldrh	r3, [r3, #0]
 8003f82:	0a1b      	lsrs	r3, r3, #8
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	b2da      	uxtb	r2, r3
 8003f88:	4b0b      	ldr	r3, [pc, #44]	; (8003fb8 <nmea_parser+0xdf8>)
 8003f8a:	741a      	strb	r2, [r3, #16]
		GPSInformation[17]= courseStatus;
 8003f8c:	180b      	adds	r3, r1, r0
 8003f8e:	19db      	adds	r3, r3, r7
 8003f90:	881b      	ldrh	r3, [r3, #0]
 8003f92:	b2da      	uxtb	r2, r3
 8003f94:	4b08      	ldr	r3, [pc, #32]	; (8003fb8 <nmea_parser+0xdf8>)
 8003f96:	745a      	strb	r2, [r3, #17]
		//------------------------------Course Status Block END------------------------------------

		return GPSInformation;
 8003f98:	4b07      	ldr	r3, [pc, #28]	; (8003fb8 <nmea_parser+0xdf8>)
 8003f9a:	e003      	b.n	8003fa4 <nmea_parser+0xde4>
	}
	else{
		*checkSum = 55;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2237      	movs	r2, #55	; 0x37
 8003fa0:	701a      	strb	r2, [r3, #0]
		return NULL;
 8003fa2:	2300      	movs	r3, #0
	}

}
 8003fa4:	0018      	movs	r0, r3
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	b041      	add	sp, #260	; 0x104
 8003faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fac:	9999999a 	.word	0x9999999a
 8003fb0:	3ffd9999 	.word	0x3ffd9999
 8003fb4:	437f0000 	.word	0x437f0000
 8003fb8:	200002a4 	.word	0x200002a4

08003fbc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003fc0:	f3bf 8f4f 	dsb	sy
}
 8003fc4:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fc6:	4b04      	ldr	r3, [pc, #16]	; (8003fd8 <__NVIC_SystemReset+0x1c>)
 8003fc8:	4a04      	ldr	r2, [pc, #16]	; (8003fdc <__NVIC_SystemReset+0x20>)
 8003fca:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003fcc:	f3bf 8f4f 	dsb	sy
}
 8003fd0:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003fd2:	46c0      	nop			; (mov r8, r8)
 8003fd4:	e7fd      	b.n	8003fd2 <__NVIC_SystemReset+0x16>
 8003fd6:	46c0      	nop			; (mov r8, r8)
 8003fd8:	e000ed00 	.word	0xe000ed00
 8003fdc:	05fa0004 	.word	0x05fa0004

08003fe0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003fe0:	b590      	push	{r4, r7, lr}
 8003fe2:	b099      	sub	sp, #100	; 0x64
 8003fe4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003fe6:	f004 fe77 	bl	8008cd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003fea:	f000 fafd 	bl	80045e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003fee:	f000 fd8b 	bl	8004b08 <MX_GPIO_Init>
  MX_DMA_Init();
 8003ff2:	f000 fd6b 	bl	8004acc <MX_DMA_Init>
  MX_SPI1_Init();
 8003ff6:	f000 fb51 	bl	800469c <MX_SPI1_Init>
  MX_TIM3_Init();
 8003ffa:	f000 fb8d 	bl	8004718 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8003ffe:	f000 fc61 	bl	80048c4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8004002:	f000 fcad 	bl	8004960 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8004006:	f000 fcf9 	bl	80049fc <MX_USART3_UART_Init>
  MX_USART4_UART_Init();
 800400a:	f000 fd2b 	bl	8004a64 <MX_USART4_UART_Init>
  MX_TIM17_Init();
 800400e:	f000 fc31 	bl	8004874 <MX_TIM17_Init>
  MX_TIM16_Init();
 8004012:	f000 fc05 	bl	8004820 <MX_TIM16_Init>
  MX_TIM14_Init();
 8004016:	f000 fbdd 	bl	80047d4 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&AT_PORT, AT_BUFFER, 1);
 800401a:	49d9      	ldr	r1, [pc, #868]	; (8004380 <main+0x3a0>)
 800401c:	4bd9      	ldr	r3, [pc, #868]	; (8004384 <main+0x3a4>)
 800401e:	2201      	movs	r2, #1
 8004020:	0018      	movs	r0, r3
 8004022:	f008 fbf5 	bl	800c810 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart2, GNSS_BUFFER, 1);
 8004026:	49d8      	ldr	r1, [pc, #864]	; (8004388 <main+0x3a8>)
 8004028:	4bd8      	ldr	r3, [pc, #864]	; (800438c <main+0x3ac>)
 800402a:	2201      	movs	r2, #1
 800402c:	0018      	movs	r0, r3
 800402e:	f008 fbef 	bl	800c810 <HAL_UART_Receive_IT>
	W25qxx_Init();
 8004032:	f004 fa23 	bl	800847c <W25qxx_Init>
	//INPUT CAPTURE------
	HAL_TIM_Base_Start_IT(&htim3);
 8004036:	4bd6      	ldr	r3, [pc, #856]	; (8004390 <main+0x3b0>)
 8004038:	0018      	movs	r0, r3
 800403a:	f007 fb3f 	bl	800b6bc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim14);
 800403e:	4bd5      	ldr	r3, [pc, #852]	; (8004394 <main+0x3b4>)
 8004040:	0018      	movs	r0, r3
 8004042:	f007 fb3b 	bl	800b6bc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim16);
 8004046:	4bd4      	ldr	r3, [pc, #848]	; (8004398 <main+0x3b8>)
 8004048:	0018      	movs	r0, r3
 800404a:	f007 fb37 	bl	800b6bc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim17);
 800404e:	4bd3      	ldr	r3, [pc, #844]	; (800439c <main+0x3bc>)
 8004050:	0018      	movs	r0, r3
 8004052:	f007 fb33 	bl	800b6bc <HAL_TIM_Base_Start_IT>
	W25qxx_EraseSector(0);
 8004056:	2000      	movs	r0, #0
 8004058:	f004 faca 	bl	80085f0 <W25qxx_EraseSector>
	W25qxx_EraseSector(1);
 800405c:	2001      	movs	r0, #1
 800405e:	f004 fac7 	bl	80085f0 <W25qxx_EraseSector>
	W25qxx_ReadByte(&isFlash, 0);
 8004062:	4bcf      	ldr	r3, [pc, #828]	; (80043a0 <main+0x3c0>)
 8004064:	2100      	movs	r1, #0
 8004066:	0018      	movs	r0, r3
 8004068:	f004 fc76 	bl	8008958 <W25qxx_ReadByte>
	if (isFlash != 1) {
 800406c:	4bcc      	ldr	r3, [pc, #816]	; (80043a0 <main+0x3c0>)
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d100      	bne.n	8004076 <main+0x96>
 8004074:	e0b2      	b.n	80041dc <main+0x1fc>
		HAL_UART_Transmit(&huart4, "first time", sizeof("first time"),
 8004076:	49cb      	ldr	r1, [pc, #812]	; (80043a4 <main+0x3c4>)
 8004078:	48cb      	ldr	r0, [pc, #812]	; (80043a8 <main+0x3c8>)
 800407a:	2364      	movs	r3, #100	; 0x64
 800407c:	220b      	movs	r2, #11
 800407e:	f008 fb2b 	bl	800c6d8 <HAL_UART_Transmit>
				100);
		W25qxx_EraseSector(0);
 8004082:	2000      	movs	r0, #0
 8004084:	f004 fab4 	bl	80085f0 <W25qxx_EraseSector>
		W25qxx_EraseSector(1);
 8004088:	2001      	movs	r0, #1
 800408a:	f004 fab1 	bl	80085f0 <W25qxx_EraseSector>
		W25qxx_WriteByte(1, 0);
 800408e:	2100      	movs	r1, #0
 8004090:	2001      	movs	r0, #1
 8004092:	f004 fb1d 	bl	80086d0 <W25qxx_WriteByte>
		//printf("chip erased/n");
		StartN = 0;
 8004096:	4bc5      	ldr	r3, [pc, #788]	; (80043ac <main+0x3cc>)
 8004098:	2200      	movs	r2, #0
 800409a:	801a      	strh	r2, [r3, #0]
		EndN = 0;
 800409c:	4bc4      	ldr	r3, [pc, #784]	; (80043b0 <main+0x3d0>)
 800409e:	2200      	movs	r2, #0
 80040a0:	801a      	strh	r2, [r3, #0]
		StartSec = 1;
 80040a2:	4bc4      	ldr	r3, [pc, #784]	; (80043b4 <main+0x3d4>)
 80040a4:	2201      	movs	r2, #1
 80040a6:	801a      	strh	r2, [r3, #0]
		EndSec = 1;
 80040a8:	4bc3      	ldr	r3, [pc, #780]	; (80043b8 <main+0x3d8>)
 80040aa:	2201      	movs	r2, #1
 80040ac:	801a      	strh	r2, [r3, #0]
		flashready = 1;
 80040ae:	4bc3      	ldr	r3, [pc, #780]	; (80043bc <main+0x3dc>)
 80040b0:	2201      	movs	r2, #1
 80040b2:	701a      	strb	r2, [r3, #0]
		W25qxx_WriteByte('1', 9);
 80040b4:	2109      	movs	r1, #9
 80040b6:	2031      	movs	r0, #49	; 0x31
 80040b8:	f004 fb0a 	bl	80086d0 <W25qxx_WriteByte>
		W25qxx_WriteByte('2', 10);
 80040bc:	210a      	movs	r1, #10
 80040be:	2032      	movs	r0, #50	; 0x32
 80040c0:	f004 fb06 	bl	80086d0 <W25qxx_WriteByte>
		W25qxx_WriteByte('3', 11);
 80040c4:	210b      	movs	r1, #11
 80040c6:	2033      	movs	r0, #51	; 0x33
 80040c8:	f004 fb02 	bl	80086d0 <W25qxx_WriteByte>
		W25qxx_WriteByte('4', 12);
 80040cc:	210c      	movs	r1, #12
 80040ce:	2034      	movs	r0, #52	; 0x34
 80040d0:	f004 fafe 	bl	80086d0 <W25qxx_WriteByte>
		W25qxx_WriteByte(0, 1);
 80040d4:	2101      	movs	r1, #1
 80040d6:	2000      	movs	r0, #0
 80040d8:	f004 fafa 	bl	80086d0 <W25qxx_WriteByte>
		W25qxx_WriteByte(1, 2);
 80040dc:	2102      	movs	r1, #2
 80040de:	2001      	movs	r0, #1
 80040e0:	f004 faf6 	bl	80086d0 <W25qxx_WriteByte>
		W25qxx_WriteByte(0, 3);
 80040e4:	2103      	movs	r1, #3
 80040e6:	2000      	movs	r0, #0
 80040e8:	f004 faf2 	bl	80086d0 <W25qxx_WriteByte>
		W25qxx_WriteByte(0, 4);
 80040ec:	2104      	movs	r1, #4
 80040ee:	2000      	movs	r0, #0
 80040f0:	f004 faee 	bl	80086d0 <W25qxx_WriteByte>
		W25qxx_WriteByte(0, 5);
 80040f4:	2105      	movs	r1, #5
 80040f6:	2000      	movs	r0, #0
 80040f8:	f004 faea 	bl	80086d0 <W25qxx_WriteByte>
		W25qxx_WriteByte(1, 6);
 80040fc:	2106      	movs	r1, #6
 80040fe:	2001      	movs	r0, #1
 8004100:	f004 fae6 	bl	80086d0 <W25qxx_WriteByte>
		W25qxx_WriteByte(0, 7);
 8004104:	2107      	movs	r1, #7
 8004106:	2000      	movs	r0, #0
 8004108:	f004 fae2 	bl	80086d0 <W25qxx_WriteByte>
		W25qxx_WriteByte(0, 8);
 800410c:	2108      	movs	r1, #8
 800410e:	2000      	movs	r0, #0
 8004110:	f004 fade 	bl	80086d0 <W25qxx_WriteByte>
		cPin[0] = '1';
 8004114:	4baa      	ldr	r3, [pc, #680]	; (80043c0 <main+0x3e0>)
 8004116:	2231      	movs	r2, #49	; 0x31
 8004118:	701a      	strb	r2, [r3, #0]
		cPin[1] = '2';
 800411a:	4ba9      	ldr	r3, [pc, #676]	; (80043c0 <main+0x3e0>)
 800411c:	2232      	movs	r2, #50	; 0x32
 800411e:	705a      	strb	r2, [r3, #1]
		cPin[2] = '3';
 8004120:	4ba7      	ldr	r3, [pc, #668]	; (80043c0 <main+0x3e0>)
 8004122:	2233      	movs	r2, #51	; 0x33
 8004124:	709a      	strb	r2, [r3, #2]
		cPin[3] = '4';
 8004126:	4ba6      	ldr	r3, [pc, #664]	; (80043c0 <main+0x3e0>)
 8004128:	2234      	movs	r2, #52	; 0x34
 800412a:	70da      	strb	r2, [r3, #3]
		for (uint8_t te = 13; te < 23; te++) {
 800412c:	2357      	movs	r3, #87	; 0x57
 800412e:	18fb      	adds	r3, r7, r3
 8004130:	220d      	movs	r2, #13
 8004132:	701a      	strb	r2, [r3, #0]
 8004134:	e012      	b.n	800415c <main+0x17c>
			W25qxx_WriteByte(0, te);
 8004136:	2457      	movs	r4, #87	; 0x57
 8004138:	193b      	adds	r3, r7, r4
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	0019      	movs	r1, r3
 800413e:	2000      	movs	r0, #0
 8004140:	f004 fac6 	bl	80086d0 <W25qxx_WriteByte>
			validSender[te - 13] = 0;
 8004144:	0020      	movs	r0, r4
 8004146:	183b      	adds	r3, r7, r0
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	3b0d      	subs	r3, #13
 800414c:	4a9d      	ldr	r2, [pc, #628]	; (80043c4 <main+0x3e4>)
 800414e:	2100      	movs	r1, #0
 8004150:	54d1      	strb	r1, [r2, r3]
		for (uint8_t te = 13; te < 23; te++) {
 8004152:	183b      	adds	r3, r7, r0
 8004154:	781a      	ldrb	r2, [r3, #0]
 8004156:	183b      	adds	r3, r7, r0
 8004158:	3201      	adds	r2, #1
 800415a:	701a      	strb	r2, [r3, #0]
 800415c:	2357      	movs	r3, #87	; 0x57
 800415e:	18fb      	adds	r3, r7, r3
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	2b16      	cmp	r3, #22
 8004164:	d9e7      	bls.n	8004136 <main+0x156>
		}
		for (uint8_t te = 23; te < 73; te++) {
 8004166:	2356      	movs	r3, #86	; 0x56
 8004168:	18fb      	adds	r3, r7, r3
 800416a:	2217      	movs	r2, #23
 800416c:	701a      	strb	r2, [r3, #0]
 800416e:	e012      	b.n	8004196 <main+0x1b6>
			W25qxx_WriteByte(domainAdd[te - 23], te);
 8004170:	2156      	movs	r1, #86	; 0x56
 8004172:	187b      	adds	r3, r7, r1
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	3b17      	subs	r3, #23
 8004178:	4a93      	ldr	r2, [pc, #588]	; (80043c8 <main+0x3e8>)
 800417a:	5cd2      	ldrb	r2, [r2, r3]
 800417c:	000c      	movs	r4, r1
 800417e:	187b      	adds	r3, r7, r1
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	0019      	movs	r1, r3
 8004184:	0010      	movs	r0, r2
 8004186:	f004 faa3 	bl	80086d0 <W25qxx_WriteByte>
		for (uint8_t te = 23; te < 73; te++) {
 800418a:	0021      	movs	r1, r4
 800418c:	187b      	adds	r3, r7, r1
 800418e:	781a      	ldrb	r2, [r3, #0]
 8004190:	187b      	adds	r3, r7, r1
 8004192:	3201      	adds	r2, #1
 8004194:	701a      	strb	r2, [r3, #0]
 8004196:	2356      	movs	r3, #86	; 0x56
 8004198:	18fb      	adds	r3, r7, r3
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	2b48      	cmp	r3, #72	; 0x48
 800419e:	d9e7      	bls.n	8004170 <main+0x190>
		}
		for (uint8_t te = 73; te < 79; te++) {
 80041a0:	2355      	movs	r3, #85	; 0x55
 80041a2:	18fb      	adds	r3, r7, r3
 80041a4:	2249      	movs	r2, #73	; 0x49
 80041a6:	701a      	strb	r2, [r3, #0]
 80041a8:	e012      	b.n	80041d0 <main+0x1f0>
			W25qxx_WriteByte(portAdd[te - 73], te);
 80041aa:	2155      	movs	r1, #85	; 0x55
 80041ac:	187b      	adds	r3, r7, r1
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	3b49      	subs	r3, #73	; 0x49
 80041b2:	4a86      	ldr	r2, [pc, #536]	; (80043cc <main+0x3ec>)
 80041b4:	5cd2      	ldrb	r2, [r2, r3]
 80041b6:	000c      	movs	r4, r1
 80041b8:	187b      	adds	r3, r7, r1
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	0019      	movs	r1, r3
 80041be:	0010      	movs	r0, r2
 80041c0:	f004 fa86 	bl	80086d0 <W25qxx_WriteByte>
		for (uint8_t te = 73; te < 79; te++) {
 80041c4:	0021      	movs	r1, r4
 80041c6:	187b      	adds	r3, r7, r1
 80041c8:	781a      	ldrb	r2, [r3, #0]
 80041ca:	187b      	adds	r3, r7, r1
 80041cc:	3201      	adds	r2, #1
 80041ce:	701a      	strb	r2, [r3, #0]
 80041d0:	2355      	movs	r3, #85	; 0x55
 80041d2:	18fb      	adds	r3, r7, r3
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	2b4e      	cmp	r3, #78	; 0x4e
 80041d8:	d9e7      	bls.n	80041aa <main+0x1ca>
 80041da:	e0bd      	b.n	8004358 <main+0x378>
		}
	} else {
		HAL_UART_Transmit(&huart4, "reading from rom",
 80041dc:	497c      	ldr	r1, [pc, #496]	; (80043d0 <main+0x3f0>)
 80041de:	4872      	ldr	r0, [pc, #456]	; (80043a8 <main+0x3c8>)
 80041e0:	2364      	movs	r3, #100	; 0x64
 80041e2:	2211      	movs	r2, #17
 80041e4:	f008 fa78 	bl	800c6d8 <HAL_UART_Transmit>
				sizeof("reading from rom"), 100);

		uint8_t myread[78];
		memset(myread, 0, sizeof(myread));
 80041e8:	003b      	movs	r3, r7
 80041ea:	224e      	movs	r2, #78	; 0x4e
 80041ec:	2100      	movs	r1, #0
 80041ee:	0018      	movs	r0, r3
 80041f0:	f00a f9cd 	bl	800e58e <memset>
		//printf("already flashed once/n");
		W25qxx_ReadBytes(myread, 1, 78);
 80041f4:	003b      	movs	r3, r7
 80041f6:	224e      	movs	r2, #78	; 0x4e
 80041f8:	2101      	movs	r1, #1
 80041fa:	0018      	movs	r0, r3
 80041fc:	f004 fc02 	bl	8008a04 <W25qxx_ReadBytes>
		StartSec = myread[0];
 8004200:	003b      	movs	r3, r7
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	b29a      	uxth	r2, r3
 8004206:	4b6b      	ldr	r3, [pc, #428]	; (80043b4 <main+0x3d4>)
 8004208:	801a      	strh	r2, [r3, #0]
		StartSec = StartSec << 8 | myread[1];
 800420a:	4b6a      	ldr	r3, [pc, #424]	; (80043b4 <main+0x3d4>)
 800420c:	881b      	ldrh	r3, [r3, #0]
 800420e:	b29b      	uxth	r3, r3
 8004210:	021b      	lsls	r3, r3, #8
 8004212:	b21a      	sxth	r2, r3
 8004214:	003b      	movs	r3, r7
 8004216:	785b      	ldrb	r3, [r3, #1]
 8004218:	b21b      	sxth	r3, r3
 800421a:	4313      	orrs	r3, r2
 800421c:	b21b      	sxth	r3, r3
 800421e:	b29a      	uxth	r2, r3
 8004220:	4b64      	ldr	r3, [pc, #400]	; (80043b4 <main+0x3d4>)
 8004222:	801a      	strh	r2, [r3, #0]

		StartN = myread[2];
 8004224:	003b      	movs	r3, r7
 8004226:	789b      	ldrb	r3, [r3, #2]
 8004228:	b29a      	uxth	r2, r3
 800422a:	4b60      	ldr	r3, [pc, #384]	; (80043ac <main+0x3cc>)
 800422c:	801a      	strh	r2, [r3, #0]
		StartN = StartN << 8 | myread[3];
 800422e:	4b5f      	ldr	r3, [pc, #380]	; (80043ac <main+0x3cc>)
 8004230:	881b      	ldrh	r3, [r3, #0]
 8004232:	b29b      	uxth	r3, r3
 8004234:	021b      	lsls	r3, r3, #8
 8004236:	b21a      	sxth	r2, r3
 8004238:	003b      	movs	r3, r7
 800423a:	78db      	ldrb	r3, [r3, #3]
 800423c:	b21b      	sxth	r3, r3
 800423e:	4313      	orrs	r3, r2
 8004240:	b21b      	sxth	r3, r3
 8004242:	b29a      	uxth	r2, r3
 8004244:	4b59      	ldr	r3, [pc, #356]	; (80043ac <main+0x3cc>)
 8004246:	801a      	strh	r2, [r3, #0]

		EndSec = myread[4];
 8004248:	003b      	movs	r3, r7
 800424a:	791b      	ldrb	r3, [r3, #4]
 800424c:	b29a      	uxth	r2, r3
 800424e:	4b5a      	ldr	r3, [pc, #360]	; (80043b8 <main+0x3d8>)
 8004250:	801a      	strh	r2, [r3, #0]
		EndSec = EndSec << 8 | myread[5];
 8004252:	4b59      	ldr	r3, [pc, #356]	; (80043b8 <main+0x3d8>)
 8004254:	881b      	ldrh	r3, [r3, #0]
 8004256:	b29b      	uxth	r3, r3
 8004258:	021b      	lsls	r3, r3, #8
 800425a:	b21a      	sxth	r2, r3
 800425c:	003b      	movs	r3, r7
 800425e:	795b      	ldrb	r3, [r3, #5]
 8004260:	b21b      	sxth	r3, r3
 8004262:	4313      	orrs	r3, r2
 8004264:	b21b      	sxth	r3, r3
 8004266:	b29a      	uxth	r2, r3
 8004268:	4b53      	ldr	r3, [pc, #332]	; (80043b8 <main+0x3d8>)
 800426a:	801a      	strh	r2, [r3, #0]

		EndN = myread[6];
 800426c:	003b      	movs	r3, r7
 800426e:	799b      	ldrb	r3, [r3, #6]
 8004270:	b29a      	uxth	r2, r3
 8004272:	4b4f      	ldr	r3, [pc, #316]	; (80043b0 <main+0x3d0>)
 8004274:	801a      	strh	r2, [r3, #0]
		EndN = EndN << 8 | myread[7];
 8004276:	4b4e      	ldr	r3, [pc, #312]	; (80043b0 <main+0x3d0>)
 8004278:	881b      	ldrh	r3, [r3, #0]
 800427a:	b29b      	uxth	r3, r3
 800427c:	021b      	lsls	r3, r3, #8
 800427e:	b21a      	sxth	r2, r3
 8004280:	003b      	movs	r3, r7
 8004282:	79db      	ldrb	r3, [r3, #7]
 8004284:	b21b      	sxth	r3, r3
 8004286:	4313      	orrs	r3, r2
 8004288:	b21b      	sxth	r3, r3
 800428a:	b29a      	uxth	r2, r3
 800428c:	4b48      	ldr	r3, [pc, #288]	; (80043b0 <main+0x3d0>)
 800428e:	801a      	strh	r2, [r3, #0]

		cPin[0] = myread[8];
 8004290:	003b      	movs	r3, r7
 8004292:	7a1a      	ldrb	r2, [r3, #8]
 8004294:	4b4a      	ldr	r3, [pc, #296]	; (80043c0 <main+0x3e0>)
 8004296:	701a      	strb	r2, [r3, #0]
		cPin[1] = myread[9];
 8004298:	003b      	movs	r3, r7
 800429a:	7a5a      	ldrb	r2, [r3, #9]
 800429c:	4b48      	ldr	r3, [pc, #288]	; (80043c0 <main+0x3e0>)
 800429e:	705a      	strb	r2, [r3, #1]
		cPin[2] = myread[10];
 80042a0:	003b      	movs	r3, r7
 80042a2:	7a9a      	ldrb	r2, [r3, #10]
 80042a4:	4b46      	ldr	r3, [pc, #280]	; (80043c0 <main+0x3e0>)
 80042a6:	709a      	strb	r2, [r3, #2]
		cPin[3] = myread[11];
 80042a8:	003b      	movs	r3, r7
 80042aa:	7ada      	ldrb	r2, [r3, #11]
 80042ac:	4b44      	ldr	r3, [pc, #272]	; (80043c0 <main+0x3e0>)
 80042ae:	70da      	strb	r2, [r3, #3]
		for (uint8_t te = 0; te < 10; te++) {
 80042b0:	2354      	movs	r3, #84	; 0x54
 80042b2:	18fb      	adds	r3, r7, r3
 80042b4:	2200      	movs	r2, #0
 80042b6:	701a      	strb	r2, [r3, #0]
 80042b8:	e00f      	b.n	80042da <main+0x2fa>
			validSender[te] = myread[te + 12];
 80042ba:	2054      	movs	r0, #84	; 0x54
 80042bc:	183b      	adds	r3, r7, r0
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	330c      	adds	r3, #12
 80042c2:	001a      	movs	r2, r3
 80042c4:	183b      	adds	r3, r7, r0
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	0039      	movs	r1, r7
 80042ca:	5c89      	ldrb	r1, [r1, r2]
 80042cc:	4a3d      	ldr	r2, [pc, #244]	; (80043c4 <main+0x3e4>)
 80042ce:	54d1      	strb	r1, [r2, r3]
		for (uint8_t te = 0; te < 10; te++) {
 80042d0:	183b      	adds	r3, r7, r0
 80042d2:	781a      	ldrb	r2, [r3, #0]
 80042d4:	183b      	adds	r3, r7, r0
 80042d6:	3201      	adds	r2, #1
 80042d8:	701a      	strb	r2, [r3, #0]
 80042da:	2354      	movs	r3, #84	; 0x54
 80042dc:	18fb      	adds	r3, r7, r3
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	2b09      	cmp	r3, #9
 80042e2:	d9ea      	bls.n	80042ba <main+0x2da>
		}
		for (uint8_t te = 0; te < 50; te++) {
 80042e4:	2353      	movs	r3, #83	; 0x53
 80042e6:	18fb      	adds	r3, r7, r3
 80042e8:	2200      	movs	r2, #0
 80042ea:	701a      	strb	r2, [r3, #0]
 80042ec:	e00f      	b.n	800430e <main+0x32e>
			domainAdd[te] = myread[te + 22];
 80042ee:	2053      	movs	r0, #83	; 0x53
 80042f0:	183b      	adds	r3, r7, r0
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	3316      	adds	r3, #22
 80042f6:	001a      	movs	r2, r3
 80042f8:	183b      	adds	r3, r7, r0
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	0039      	movs	r1, r7
 80042fe:	5c89      	ldrb	r1, [r1, r2]
 8004300:	4a31      	ldr	r2, [pc, #196]	; (80043c8 <main+0x3e8>)
 8004302:	54d1      	strb	r1, [r2, r3]
		for (uint8_t te = 0; te < 50; te++) {
 8004304:	183b      	adds	r3, r7, r0
 8004306:	781a      	ldrb	r2, [r3, #0]
 8004308:	183b      	adds	r3, r7, r0
 800430a:	3201      	adds	r2, #1
 800430c:	701a      	strb	r2, [r3, #0]
 800430e:	2353      	movs	r3, #83	; 0x53
 8004310:	18fb      	adds	r3, r7, r3
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	2b31      	cmp	r3, #49	; 0x31
 8004316:	d9ea      	bls.n	80042ee <main+0x30e>
		}
		for (uint8_t te = 0; te < 6; te++) {
 8004318:	2352      	movs	r3, #82	; 0x52
 800431a:	18fb      	adds	r3, r7, r3
 800431c:	2200      	movs	r2, #0
 800431e:	701a      	strb	r2, [r3, #0]
 8004320:	e00f      	b.n	8004342 <main+0x362>
			portAdd[te] = myread[te + 72];
 8004322:	2052      	movs	r0, #82	; 0x52
 8004324:	183b      	adds	r3, r7, r0
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	3348      	adds	r3, #72	; 0x48
 800432a:	001a      	movs	r2, r3
 800432c:	183b      	adds	r3, r7, r0
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	0039      	movs	r1, r7
 8004332:	5c89      	ldrb	r1, [r1, r2]
 8004334:	4a25      	ldr	r2, [pc, #148]	; (80043cc <main+0x3ec>)
 8004336:	54d1      	strb	r1, [r2, r3]
		for (uint8_t te = 0; te < 6; te++) {
 8004338:	183b      	adds	r3, r7, r0
 800433a:	781a      	ldrb	r2, [r3, #0]
 800433c:	183b      	adds	r3, r7, r0
 800433e:	3201      	adds	r2, #1
 8004340:	701a      	strb	r2, [r3, #0]
 8004342:	2352      	movs	r3, #82	; 0x52
 8004344:	18fb      	adds	r3, r7, r3
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	2b05      	cmp	r3, #5
 800434a:	d9ea      	bls.n	8004322 <main+0x342>
		}

		HAL_Delay(100);
 800434c:	2064      	movs	r0, #100	; 0x64
 800434e:	f004 fd49 	bl	8008de4 <HAL_Delay>
		flashready = 1;
 8004352:	4b1a      	ldr	r3, [pc, #104]	; (80043bc <main+0x3dc>)
 8004354:	2201      	movs	r2, #1
 8004356:	701a      	strb	r2, [r3, #0]
	}

	//-------------------check if tracker has registered any mobile number?-------------
	isSMSActive=0;
 8004358:	4b1e      	ldr	r3, [pc, #120]	; (80043d4 <main+0x3f4>)
 800435a:	2200      	movs	r2, #0
 800435c:	701a      	strb	r2, [r3, #0]
	for(uint8_t a=0;a<6;a++){
 800435e:	2351      	movs	r3, #81	; 0x51
 8004360:	18fb      	adds	r3, r7, r3
 8004362:	2200      	movs	r2, #0
 8004364:	701a      	strb	r2, [r3, #0]
 8004366:	e03d      	b.n	80043e4 <main+0x404>
		if(validSender[a]!=0){
 8004368:	2351      	movs	r3, #81	; 0x51
 800436a:	18fb      	adds	r3, r7, r3
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	4a15      	ldr	r2, [pc, #84]	; (80043c4 <main+0x3e4>)
 8004370:	5cd3      	ldrb	r3, [r2, r3]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d030      	beq.n	80043d8 <main+0x3f8>
			isSMSActive=1;
 8004376:	4b17      	ldr	r3, [pc, #92]	; (80043d4 <main+0x3f4>)
 8004378:	2201      	movs	r2, #1
 800437a:	701a      	strb	r2, [r3, #0]
			break;
 800437c:	e037      	b.n	80043ee <main+0x40e>
 800437e:	46c0      	nop			; (mov r8, r8)
 8004380:	20000714 	.word	0x20000714
 8004384:	200004a8 	.word	0x200004a8
 8004388:	20000718 	.word	0x20000718
 800438c:	2000053c 	.word	0x2000053c
 8004390:	2000031c 	.word	0x2000031c
 8004394:	20000368 	.word	0x20000368
 8004398:	200003b4 	.word	0x200003b4
 800439c:	20000400 	.word	0x20000400
 80043a0:	20000704 	.word	0x20000704
 80043a4:	08012a38 	.word	0x08012a38
 80043a8:	20000664 	.word	0x20000664
 80043ac:	20001024 	.word	0x20001024
 80043b0:	20001026 	.word	0x20001026
 80043b4:	20001028 	.word	0x20001028
 80043b8:	2000102a 	.word	0x2000102a
 80043bc:	2000102c 	.word	0x2000102c
 80043c0:	20000708 	.word	0x20000708
 80043c4:	20000000 	.word	0x20000000
 80043c8:	2000002c 	.word	0x2000002c
 80043cc:	20000024 	.word	0x20000024
 80043d0:	08012a44 	.word	0x08012a44
 80043d4:	20000700 	.word	0x20000700
	for(uint8_t a=0;a<6;a++){
 80043d8:	2151      	movs	r1, #81	; 0x51
 80043da:	187b      	adds	r3, r7, r1
 80043dc:	781a      	ldrb	r2, [r3, #0]
 80043de:	187b      	adds	r3, r7, r1
 80043e0:	3201      	adds	r2, #1
 80043e2:	701a      	strb	r2, [r3, #0]
 80043e4:	2351      	movs	r3, #81	; 0x51
 80043e6:	18fb      	adds	r3, r7, r3
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	2b05      	cmp	r3, #5
 80043ec:	d9bc      	bls.n	8004368 <main+0x388>
	}
	//----------------------------------------------------------------------------------



	HAL_GPIO_WritePin(PWR_KEY_GPIO_Port, PWR_KEY_Pin, 1);
 80043ee:	2380      	movs	r3, #128	; 0x80
 80043f0:	01db      	lsls	r3, r3, #7
 80043f2:	486f      	ldr	r0, [pc, #444]	; (80045b0 <main+0x5d0>)
 80043f4:	2201      	movs	r2, #1
 80043f6:	0019      	movs	r1, r3
 80043f8:	f005 fa78 	bl	80098ec <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80043fc:	23fa      	movs	r3, #250	; 0xfa
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	0018      	movs	r0, r3
 8004402:	f004 fcef 	bl	8008de4 <HAL_Delay>
	HAL_GPIO_WritePin(PWR_KEY_GPIO_Port, PWR_KEY_Pin, 0);
 8004406:	2380      	movs	r3, #128	; 0x80
 8004408:	01db      	lsls	r3, r3, #7
 800440a:	4869      	ldr	r0, [pc, #420]	; (80045b0 <main+0x5d0>)
 800440c:	2200      	movs	r2, #0
 800440e:	0019      	movs	r1, r3
 8004410:	f005 fa6c 	bl	80098ec <HAL_GPIO_WritePin>
	HAL_Delay(5000);
 8004414:	4b67      	ldr	r3, [pc, #412]	; (80045b4 <main+0x5d4>)
 8004416:	0018      	movs	r0, r3
 8004418:	f004 fce4 	bl	8008de4 <HAL_Delay>
	quectel_init();
 800441c:	f002 f8ee 	bl	80065fc <quectel_init>

	//INPUT CAPTURE------
	HAL_TIM_IC_Start_DMA(&htim3, TIM_CHANNEL_1, vals, NUMVAL);
 8004420:	4a65      	ldr	r2, [pc, #404]	; (80045b8 <main+0x5d8>)
 8004422:	4866      	ldr	r0, [pc, #408]	; (80045bc <main+0x5dc>)
 8004424:	2302      	movs	r3, #2
 8004426:	2100      	movs	r1, #0
 8004428:	f007 fa24 	bl	800b874 <HAL_TIM_IC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		while (isTcpOpen == 0 && isLoggedIn == 0) {
 800442c:	e065      	b.n	80044fa <main+0x51a>
			stats = 1;
 800442e:	4b64      	ldr	r3, [pc, #400]	; (80045c0 <main+0x5e0>)
 8004430:	2201      	movs	r2, #1
 8004432:	701a      	strb	r2, [r3, #0]
			while (isReg == 0) {
 8004434:	e021      	b.n	800447a <main+0x49a>
				stats = 2;
 8004436:	4b62      	ldr	r3, [pc, #392]	; (80045c0 <main+0x5e0>)
 8004438:	2202      	movs	r2, #2
 800443a:	701a      	strb	r2, [r3, #0]
				// HAL_UART_Transmit(&huart4, "at+creg",
				// sizeof("at+creg"), 100);
				send_command("AT+CREG?\r\n", 3, 3, 5, 1);
 800443c:	4861      	ldr	r0, [pc, #388]	; (80045c4 <main+0x5e4>)
 800443e:	2301      	movs	r3, #1
 8004440:	9300      	str	r3, [sp, #0]
 8004442:	2305      	movs	r3, #5
 8004444:	2203      	movs	r2, #3
 8004446:	2103      	movs	r1, #3
 8004448:	f002 f82c 	bl	80064a4 <send_command>
				if (!isReg) {
 800444c:	4b5e      	ldr	r3, [pc, #376]	; (80045c8 <main+0x5e8>)
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d112      	bne.n	800447a <main+0x49a>
					HAL_Delay(10000);
 8004454:	4b5d      	ldr	r3, [pc, #372]	; (80045cc <main+0x5ec>)
 8004456:	0018      	movs	r0, r3
 8004458:	f004 fcc4 	bl	8008de4 <HAL_Delay>
					stats = 3;
 800445c:	4b58      	ldr	r3, [pc, #352]	; (80045c0 <main+0x5e0>)
 800445e:	2203      	movs	r2, #3
 8004460:	701a      	strb	r2, [r3, #0]
					rebootCounter++;
 8004462:	4b5b      	ldr	r3, [pc, #364]	; (80045d0 <main+0x5f0>)
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	3301      	adds	r3, #1
 8004468:	b2da      	uxtb	r2, r3
 800446a:	4b59      	ldr	r3, [pc, #356]	; (80045d0 <main+0x5f0>)
 800446c:	701a      	strb	r2, [r3, #0]
					if (rebootCounter > mainCount) {
 800446e:	4b58      	ldr	r3, [pc, #352]	; (80045d0 <main+0x5f0>)
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	2b78      	cmp	r3, #120	; 0x78
 8004474:	d901      	bls.n	800447a <main+0x49a>
						rebootsystem();
 8004476:	f001 ff25 	bl	80062c4 <rebootsystem>
			while (isReg == 0) {
 800447a:	4b53      	ldr	r3, [pc, #332]	; (80045c8 <main+0x5e8>)
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d0d9      	beq.n	8004436 <main+0x456>
					}
				}
			}
			if (estabilish_tcp() == 1) {
 8004482:	f002 f8fd 	bl	8006680 <estabilish_tcp>
 8004486:	0003      	movs	r3, r0
 8004488:	2b01      	cmp	r3, #1
 800448a:	d11c      	bne.n	80044c6 <main+0x4e6>
				stats = 4;
 800448c:	4b4c      	ldr	r3, [pc, #304]	; (80045c0 <main+0x5e0>)
 800448e:	2204      	movs	r2, #4
 8004490:	701a      	strb	r2, [r3, #0]
				// HAL_UART_Transmit(&huart4, "Loginpacket sending",
				// sizeof("loginpacket sending"), 100);
				send_login_packet();
 8004492:	f002 faa7 	bl	80069e4 <send_login_packet>
				HAL_Delay(5000);
 8004496:	4b47      	ldr	r3, [pc, #284]	; (80045b4 <main+0x5d4>)
 8004498:	0018      	movs	r0, r3
 800449a:	f004 fca3 	bl	8008de4 <HAL_Delay>
				if (isLoggedIn == 0) {
 800449e:	4b4d      	ldr	r3, [pc, #308]	; (80045d4 <main+0x5f4>)
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d128      	bne.n	80044fa <main+0x51a>
					// HAL_UART_Transmit(&huart4, "Loginpacket sending",
					// sizeof("loginpacket sending"), 100);
					send_login_packet();
 80044a8:	f002 fa9c 	bl	80069e4 <send_login_packet>
					HAL_Delay(5000);
 80044ac:	4b41      	ldr	r3, [pc, #260]	; (80045b4 <main+0x5d4>)
 80044ae:	0018      	movs	r0, r3
 80044b0:	f004 fc98 	bl	8008de4 <HAL_Delay>
					if (isLoggedIn == 0) {
 80044b4:	4b47      	ldr	r3, [pc, #284]	; (80045d4 <main+0x5f4>)
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d11d      	bne.n	80044fa <main+0x51a>
						isTcpOpen = 0;
 80044be:	4b46      	ldr	r3, [pc, #280]	; (80045d8 <main+0x5f8>)
 80044c0:	2200      	movs	r2, #0
 80044c2:	701a      	strb	r2, [r3, #0]
 80044c4:	e019      	b.n	80044fa <main+0x51a>
					}
				}
			}
			else {
				stats = 5;
 80044c6:	4b3e      	ldr	r3, [pc, #248]	; (80045c0 <main+0x5e0>)
 80044c8:	2205      	movs	r2, #5
 80044ca:	701a      	strb	r2, [r3, #0]
				recTimeA = 0;
 80044cc:	4b43      	ldr	r3, [pc, #268]	; (80045dc <main+0x5fc>)
 80044ce:	2200      	movs	r2, #0
 80044d0:	701a      	strb	r2, [r3, #0]
				while (recTimeA < rTime) { //18 to 180
 80044d2:	e00c      	b.n	80044ee <main+0x50e>
					HAL_Delay(1000);
 80044d4:	23fa      	movs	r3, #250	; 0xfa
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	0018      	movs	r0, r3
 80044da:	f004 fc83 	bl	8008de4 <HAL_Delay>
					recTimeA++;
 80044de:	4b3f      	ldr	r3, [pc, #252]	; (80045dc <main+0x5fc>)
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	3301      	adds	r3, #1
 80044e4:	b2da      	uxtb	r2, r3
 80044e6:	4b3d      	ldr	r3, [pc, #244]	; (80045dc <main+0x5fc>)
 80044e8:	701a      	strb	r2, [r3, #0]
					where_api_handler();
 80044ea:	f002 f9c7 	bl	800687c <where_api_handler>
				while (recTimeA < rTime) { //18 to 180
 80044ee:	4b3b      	ldr	r3, [pc, #236]	; (80045dc <main+0x5fc>)
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	2bb3      	cmp	r3, #179	; 0xb3
 80044f4:	d9ee      	bls.n	80044d4 <main+0x4f4>
				}
				//SEND LOCATION VIA SMS
				//--------------------------------------------------------------------------
				send_location_packet_via_sms();
 80044f6:	f003 f903 	bl	8007700 <send_location_packet_via_sms>
		while (isTcpOpen == 0 && isLoggedIn == 0) {
 80044fa:	4b37      	ldr	r3, [pc, #220]	; (80045d8 <main+0x5f8>)
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	2b00      	cmp	r3, #0
 8004502:	d13b      	bne.n	800457c <main+0x59c>
 8004504:	4b33      	ldr	r3, [pc, #204]	; (80045d4 <main+0x5f4>)
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d08f      	beq.n	800442e <main+0x44e>
				//--------------------------------------------------------
			}
		}
		while (isTcpOpen == 1 && isLoggedIn == 1 && isDataMode == 1) {
 800450e:	e035      	b.n	800457c <main+0x59c>
			stats = 7;
 8004510:	4b2b      	ldr	r3, [pc, #172]	; (80045c0 <main+0x5e0>)
 8004512:	2207      	movs	r2, #7
 8004514:	701a      	strb	r2, [r3, #0]
			HAL_Delay(LOC_PKT_INTVL);
 8004516:	4b27      	ldr	r3, [pc, #156]	; (80045b4 <main+0x5d4>)
 8004518:	0018      	movs	r0, r3
 800451a:	f004 fc63 	bl	8008de4 <HAL_Delay>
			heartBeatTimer++;
 800451e:	4b30      	ldr	r3, [pc, #192]	; (80045e0 <main+0x600>)
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	3301      	adds	r3, #1
 8004524:	b2da      	uxtb	r2, r3
 8004526:	4b2e      	ldr	r3, [pc, #184]	; (80045e0 <main+0x600>)
 8004528:	701a      	strb	r2, [r3, #0]
			if (heartBeatTimer > 36) {
 800452a:	4b2d      	ldr	r3, [pc, #180]	; (80045e0 <main+0x600>)
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	2b24      	cmp	r3, #36	; 0x24
 8004530:	d90e      	bls.n	8004550 <main+0x570>
				stats = 8;
 8004532:	4b23      	ldr	r3, [pc, #140]	; (80045c0 <main+0x5e0>)
 8004534:	2208      	movs	r2, #8
 8004536:	701a      	strb	r2, [r3, #0]
				isLoggedIn = 0;
 8004538:	4b26      	ldr	r3, [pc, #152]	; (80045d4 <main+0x5f4>)
 800453a:	2200      	movs	r2, #0
 800453c:	701a      	strb	r2, [r3, #0]
				send_hb_packet();
 800453e:	f002 fd23 	bl	8006f88 <send_hb_packet>
				HAL_Delay(10000);
 8004542:	4b22      	ldr	r3, [pc, #136]	; (80045cc <main+0x5ec>)
 8004544:	0018      	movs	r0, r3
 8004546:	f004 fc4d 	bl	8008de4 <HAL_Delay>
				heartBeatTimer = 0;
 800454a:	4b25      	ldr	r3, [pc, #148]	; (80045e0 <main+0x600>)
 800454c:	2200      	movs	r2, #0
 800454e:	701a      	strb	r2, [r3, #0]
			}
			if (isDataMode == 1 && isLoggedIn == 1 && isTcpOpen == 1) {
 8004550:	4b24      	ldr	r3, [pc, #144]	; (80045e4 <main+0x604>)
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b01      	cmp	r3, #1
 8004558:	d110      	bne.n	800457c <main+0x59c>
 800455a:	4b1e      	ldr	r3, [pc, #120]	; (80045d4 <main+0x5f4>)
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	b2db      	uxtb	r3, r3
 8004560:	2b01      	cmp	r3, #1
 8004562:	d10b      	bne.n	800457c <main+0x59c>
 8004564:	4b1c      	ldr	r3, [pc, #112]	; (80045d8 <main+0x5f8>)
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b01      	cmp	r3, #1
 800456c:	d106      	bne.n	800457c <main+0x59c>
				stats = 8;
 800456e:	4b14      	ldr	r3, [pc, #80]	; (80045c0 <main+0x5e0>)
 8004570:	2208      	movs	r2, #8
 8004572:	701a      	strb	r2, [r3, #0]
				incoming_msg_handler();
 8004574:	f002 f9d2 	bl	800691c <incoming_msg_handler>
				send_data_packet();
 8004578:	f002 fab6 	bl	8006ae8 <send_data_packet>
		while (isTcpOpen == 1 && isLoggedIn == 1 && isDataMode == 1) {
 800457c:	4b16      	ldr	r3, [pc, #88]	; (80045d8 <main+0x5f8>)
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b01      	cmp	r3, #1
 8004584:	d109      	bne.n	800459a <main+0x5ba>
 8004586:	4b13      	ldr	r3, [pc, #76]	; (80045d4 <main+0x5f4>)
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	b2db      	uxtb	r3, r3
 800458c:	2b01      	cmp	r3, #1
 800458e:	d104      	bne.n	800459a <main+0x5ba>
 8004590:	4b14      	ldr	r3, [pc, #80]	; (80045e4 <main+0x604>)
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	b2db      	uxtb	r3, r3
 8004596:	2b01      	cmp	r3, #1
 8004598:	d0ba      	beq.n	8004510 <main+0x530>
			}

		}
		isTcpOpen = 0;
 800459a:	4b0f      	ldr	r3, [pc, #60]	; (80045d8 <main+0x5f8>)
 800459c:	2200      	movs	r2, #0
 800459e:	701a      	strb	r2, [r3, #0]
		isLoggedIn = 0;
 80045a0:	4b0c      	ldr	r3, [pc, #48]	; (80045d4 <main+0x5f4>)
 80045a2:	2200      	movs	r2, #0
 80045a4:	701a      	strb	r2, [r3, #0]
		isDataMode = 0;
 80045a6:	4b0f      	ldr	r3, [pc, #60]	; (80045e4 <main+0x604>)
 80045a8:	2200      	movs	r2, #0
 80045aa:	701a      	strb	r2, [r3, #0]
		while (isTcpOpen == 0 && isLoggedIn == 0) {
 80045ac:	e7a5      	b.n	80044fa <main+0x51a>
 80045ae:	46c0      	nop			; (mov r8, r8)
 80045b0:	50000400 	.word	0x50000400
 80045b4:	00001388 	.word	0x00001388
 80045b8:	200006fc 	.word	0x200006fc
 80045bc:	2000031c 	.word	0x2000031c
 80045c0:	2000102d 	.word	0x2000102d
 80045c4:	08012a58 	.word	0x08012a58
 80045c8:	20000d3f 	.word	0x20000d3f
 80045cc:	00002710 	.word	0x00002710
 80045d0:	20000710 	.word	0x20000710
 80045d4:	20000d41 	.word	0x20000d41
 80045d8:	20000d3e 	.word	0x20000d3e
 80045dc:	2000070c 	.word	0x2000070c
 80045e0:	2000070f 	.word	0x2000070f
 80045e4:	2000084e 	.word	0x2000084e

080045e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80045e8:	b590      	push	{r4, r7, lr}
 80045ea:	b093      	sub	sp, #76	; 0x4c
 80045ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80045ee:	2414      	movs	r4, #20
 80045f0:	193b      	adds	r3, r7, r4
 80045f2:	0018      	movs	r0, r3
 80045f4:	2334      	movs	r3, #52	; 0x34
 80045f6:	001a      	movs	r2, r3
 80045f8:	2100      	movs	r1, #0
 80045fa:	f009 ffc8 	bl	800e58e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80045fe:	1d3b      	adds	r3, r7, #4
 8004600:	0018      	movs	r0, r3
 8004602:	2310      	movs	r3, #16
 8004604:	001a      	movs	r2, r3
 8004606:	2100      	movs	r1, #0
 8004608:	f009 ffc1 	bl	800e58e <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800460c:	2380      	movs	r3, #128	; 0x80
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	0018      	movs	r0, r3
 8004612:	f005 f9a3 	bl	800995c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004616:	193b      	adds	r3, r7, r4
 8004618:	2202      	movs	r2, #2
 800461a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800461c:	193b      	adds	r3, r7, r4
 800461e:	2280      	movs	r2, #128	; 0x80
 8004620:	0052      	lsls	r2, r2, #1
 8004622:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8004624:	0021      	movs	r1, r4
 8004626:	187b      	adds	r3, r7, r1
 8004628:	2200      	movs	r2, #0
 800462a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800462c:	187b      	adds	r3, r7, r1
 800462e:	2240      	movs	r2, #64	; 0x40
 8004630:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004632:	187b      	adds	r3, r7, r1
 8004634:	2202      	movs	r2, #2
 8004636:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004638:	187b      	adds	r3, r7, r1
 800463a:	2202      	movs	r2, #2
 800463c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800463e:	187b      	adds	r3, r7, r1
 8004640:	2200      	movs	r2, #0
 8004642:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8004644:	187b      	adds	r3, r7, r1
 8004646:	2208      	movs	r2, #8
 8004648:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800464a:	187b      	adds	r3, r7, r1
 800464c:	2280      	movs	r2, #128	; 0x80
 800464e:	0292      	lsls	r2, r2, #10
 8004650:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004652:	187b      	adds	r3, r7, r1
 8004654:	2280      	movs	r2, #128	; 0x80
 8004656:	0592      	lsls	r2, r2, #22
 8004658:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800465a:	187b      	adds	r3, r7, r1
 800465c:	0018      	movs	r0, r3
 800465e:	f005 f9c9 	bl	80099f4 <HAL_RCC_OscConfig>
 8004662:	1e03      	subs	r3, r0, #0
 8004664:	d001      	beq.n	800466a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8004666:	f003 f9c7 	bl	80079f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800466a:	1d3b      	adds	r3, r7, #4
 800466c:	2207      	movs	r2, #7
 800466e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004670:	1d3b      	adds	r3, r7, #4
 8004672:	2202      	movs	r2, #2
 8004674:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004676:	1d3b      	adds	r3, r7, #4
 8004678:	2200      	movs	r2, #0
 800467a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800467c:	1d3b      	adds	r3, r7, #4
 800467e:	2200      	movs	r2, #0
 8004680:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004682:	1d3b      	adds	r3, r7, #4
 8004684:	2102      	movs	r1, #2
 8004686:	0018      	movs	r0, r3
 8004688:	f005 fcc4 	bl	800a014 <HAL_RCC_ClockConfig>
 800468c:	1e03      	subs	r3, r0, #0
 800468e:	d001      	beq.n	8004694 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8004690:	f003 f9b2 	bl	80079f8 <Error_Handler>
  }
}
 8004694:	46c0      	nop			; (mov r8, r8)
 8004696:	46bd      	mov	sp, r7
 8004698:	b013      	add	sp, #76	; 0x4c
 800469a:	bd90      	pop	{r4, r7, pc}

0800469c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80046a0:	4b1b      	ldr	r3, [pc, #108]	; (8004710 <MX_SPI1_Init+0x74>)
 80046a2:	4a1c      	ldr	r2, [pc, #112]	; (8004714 <MX_SPI1_Init+0x78>)
 80046a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80046a6:	4b1a      	ldr	r3, [pc, #104]	; (8004710 <MX_SPI1_Init+0x74>)
 80046a8:	2282      	movs	r2, #130	; 0x82
 80046aa:	0052      	lsls	r2, r2, #1
 80046ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80046ae:	4b18      	ldr	r3, [pc, #96]	; (8004710 <MX_SPI1_Init+0x74>)
 80046b0:	2200      	movs	r2, #0
 80046b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80046b4:	4b16      	ldr	r3, [pc, #88]	; (8004710 <MX_SPI1_Init+0x74>)
 80046b6:	22e0      	movs	r2, #224	; 0xe0
 80046b8:	00d2      	lsls	r2, r2, #3
 80046ba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80046bc:	4b14      	ldr	r3, [pc, #80]	; (8004710 <MX_SPI1_Init+0x74>)
 80046be:	2200      	movs	r2, #0
 80046c0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80046c2:	4b13      	ldr	r3, [pc, #76]	; (8004710 <MX_SPI1_Init+0x74>)
 80046c4:	2200      	movs	r2, #0
 80046c6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80046c8:	4b11      	ldr	r3, [pc, #68]	; (8004710 <MX_SPI1_Init+0x74>)
 80046ca:	2280      	movs	r2, #128	; 0x80
 80046cc:	0092      	lsls	r2, r2, #2
 80046ce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80046d0:	4b0f      	ldr	r3, [pc, #60]	; (8004710 <MX_SPI1_Init+0x74>)
 80046d2:	2220      	movs	r2, #32
 80046d4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80046d6:	4b0e      	ldr	r3, [pc, #56]	; (8004710 <MX_SPI1_Init+0x74>)
 80046d8:	2200      	movs	r2, #0
 80046da:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80046dc:	4b0c      	ldr	r3, [pc, #48]	; (8004710 <MX_SPI1_Init+0x74>)
 80046de:	2200      	movs	r2, #0
 80046e0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046e2:	4b0b      	ldr	r3, [pc, #44]	; (8004710 <MX_SPI1_Init+0x74>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80046e8:	4b09      	ldr	r3, [pc, #36]	; (8004710 <MX_SPI1_Init+0x74>)
 80046ea:	2207      	movs	r2, #7
 80046ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80046ee:	4b08      	ldr	r3, [pc, #32]	; (8004710 <MX_SPI1_Init+0x74>)
 80046f0:	2200      	movs	r2, #0
 80046f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80046f4:	4b06      	ldr	r3, [pc, #24]	; (8004710 <MX_SPI1_Init+0x74>)
 80046f6:	2208      	movs	r2, #8
 80046f8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80046fa:	4b05      	ldr	r3, [pc, #20]	; (8004710 <MX_SPI1_Init+0x74>)
 80046fc:	0018      	movs	r0, r3
 80046fe:	f005 ff67 	bl	800a5d0 <HAL_SPI_Init>
 8004702:	1e03      	subs	r3, r0, #0
 8004704:	d001      	beq.n	800470a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8004706:	f003 f977 	bl	80079f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800470a:	46c0      	nop			; (mov r8, r8)
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	200002b8 	.word	0x200002b8
 8004714:	40013000 	.word	0x40013000

08004718 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b088      	sub	sp, #32
 800471c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800471e:	2314      	movs	r3, #20
 8004720:	18fb      	adds	r3, r7, r3
 8004722:	0018      	movs	r0, r3
 8004724:	230c      	movs	r3, #12
 8004726:	001a      	movs	r2, r3
 8004728:	2100      	movs	r1, #0
 800472a:	f009 ff30 	bl	800e58e <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 800472e:	1d3b      	adds	r3, r7, #4
 8004730:	0018      	movs	r0, r3
 8004732:	2310      	movs	r3, #16
 8004734:	001a      	movs	r2, r3
 8004736:	2100      	movs	r1, #0
 8004738:	f009 ff29 	bl	800e58e <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800473c:	4b22      	ldr	r3, [pc, #136]	; (80047c8 <MX_TIM3_Init+0xb0>)
 800473e:	4a23      	ldr	r2, [pc, #140]	; (80047cc <MX_TIM3_Init+0xb4>)
 8004740:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 640;
 8004742:	4b21      	ldr	r3, [pc, #132]	; (80047c8 <MX_TIM3_Init+0xb0>)
 8004744:	22a0      	movs	r2, #160	; 0xa0
 8004746:	0092      	lsls	r2, r2, #2
 8004748:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800474a:	4b1f      	ldr	r3, [pc, #124]	; (80047c8 <MX_TIM3_Init+0xb0>)
 800474c:	2200      	movs	r2, #0
 800474e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004750:	4b1d      	ldr	r3, [pc, #116]	; (80047c8 <MX_TIM3_Init+0xb0>)
 8004752:	4a1f      	ldr	r2, [pc, #124]	; (80047d0 <MX_TIM3_Init+0xb8>)
 8004754:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004756:	4b1c      	ldr	r3, [pc, #112]	; (80047c8 <MX_TIM3_Init+0xb0>)
 8004758:	2200      	movs	r2, #0
 800475a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800475c:	4b1a      	ldr	r3, [pc, #104]	; (80047c8 <MX_TIM3_Init+0xb0>)
 800475e:	2280      	movs	r2, #128	; 0x80
 8004760:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8004762:	4b19      	ldr	r3, [pc, #100]	; (80047c8 <MX_TIM3_Init+0xb0>)
 8004764:	0018      	movs	r0, r3
 8004766:	f007 f82d 	bl	800b7c4 <HAL_TIM_IC_Init>
 800476a:	1e03      	subs	r3, r0, #0
 800476c:	d001      	beq.n	8004772 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800476e:	f003 f943 	bl	80079f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004772:	2114      	movs	r1, #20
 8004774:	187b      	adds	r3, r7, r1
 8004776:	2200      	movs	r2, #0
 8004778:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800477a:	187b      	adds	r3, r7, r1
 800477c:	2200      	movs	r2, #0
 800477e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004780:	187a      	adds	r2, r7, r1
 8004782:	4b11      	ldr	r3, [pc, #68]	; (80047c8 <MX_TIM3_Init+0xb0>)
 8004784:	0011      	movs	r1, r2
 8004786:	0018      	movs	r0, r3
 8004788:	f007 fed0 	bl	800c52c <HAL_TIMEx_MasterConfigSynchronization>
 800478c:	1e03      	subs	r3, r0, #0
 800478e:	d001      	beq.n	8004794 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8004790:	f003 f932 	bl	80079f8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8004794:	1d3b      	adds	r3, r7, #4
 8004796:	220a      	movs	r2, #10
 8004798:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800479a:	1d3b      	adds	r3, r7, #4
 800479c:	2201      	movs	r2, #1
 800479e:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80047a0:	1d3b      	adds	r3, r7, #4
 80047a2:	2200      	movs	r2, #0
 80047a4:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 80047a6:	1d3b      	adds	r3, r7, #4
 80047a8:	2200      	movs	r2, #0
 80047aa:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80047ac:	1d39      	adds	r1, r7, #4
 80047ae:	4b06      	ldr	r3, [pc, #24]	; (80047c8 <MX_TIM3_Init+0xb0>)
 80047b0:	2200      	movs	r2, #0
 80047b2:	0018      	movs	r0, r3
 80047b4:	f007 fb50 	bl	800be58 <HAL_TIM_IC_ConfigChannel>
 80047b8:	1e03      	subs	r3, r0, #0
 80047ba:	d001      	beq.n	80047c0 <MX_TIM3_Init+0xa8>
  {
    Error_Handler();
 80047bc:	f003 f91c 	bl	80079f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80047c0:	46c0      	nop			; (mov r8, r8)
 80047c2:	46bd      	mov	sp, r7
 80047c4:	b008      	add	sp, #32
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	2000031c 	.word	0x2000031c
 80047cc:	40000400 	.word	0x40000400
 80047d0:	0000ffff 	.word	0x0000ffff

080047d4 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80047d8:	4b0f      	ldr	r3, [pc, #60]	; (8004818 <MX_TIM14_Init+0x44>)
 80047da:	4a10      	ldr	r2, [pc, #64]	; (800481c <MX_TIM14_Init+0x48>)
 80047dc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 7200;
 80047de:	4b0e      	ldr	r3, [pc, #56]	; (8004818 <MX_TIM14_Init+0x44>)
 80047e0:	22e1      	movs	r2, #225	; 0xe1
 80047e2:	0152      	lsls	r2, r2, #5
 80047e4:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047e6:	4b0c      	ldr	r3, [pc, #48]	; (8004818 <MX_TIM14_Init+0x44>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000;
 80047ec:	4b0a      	ldr	r3, [pc, #40]	; (8004818 <MX_TIM14_Init+0x44>)
 80047ee:	22fa      	movs	r2, #250	; 0xfa
 80047f0:	0092      	lsls	r2, r2, #2
 80047f2:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80047f4:	4b08      	ldr	r3, [pc, #32]	; (8004818 <MX_TIM14_Init+0x44>)
 80047f6:	2200      	movs	r2, #0
 80047f8:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80047fa:	4b07      	ldr	r3, [pc, #28]	; (8004818 <MX_TIM14_Init+0x44>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8004800:	4b05      	ldr	r3, [pc, #20]	; (8004818 <MX_TIM14_Init+0x44>)
 8004802:	0018      	movs	r0, r3
 8004804:	f006 ff02 	bl	800b60c <HAL_TIM_Base_Init>
 8004808:	1e03      	subs	r3, r0, #0
 800480a:	d001      	beq.n	8004810 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 800480c:	f003 f8f4 	bl	80079f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8004810:	46c0      	nop			; (mov r8, r8)
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	46c0      	nop			; (mov r8, r8)
 8004818:	20000368 	.word	0x20000368
 800481c:	40002000 	.word	0x40002000

08004820 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8004824:	4b10      	ldr	r3, [pc, #64]	; (8004868 <MX_TIM16_Init+0x48>)
 8004826:	4a11      	ldr	r2, [pc, #68]	; (800486c <MX_TIM16_Init+0x4c>)
 8004828:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 7200;
 800482a:	4b0f      	ldr	r3, [pc, #60]	; (8004868 <MX_TIM16_Init+0x48>)
 800482c:	22e1      	movs	r2, #225	; 0xe1
 800482e:	0152      	lsls	r2, r2, #5
 8004830:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004832:	4b0d      	ldr	r3, [pc, #52]	; (8004868 <MX_TIM16_Init+0x48>)
 8004834:	2200      	movs	r2, #0
 8004836:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 8004838:	4b0b      	ldr	r3, [pc, #44]	; (8004868 <MX_TIM16_Init+0x48>)
 800483a:	4a0d      	ldr	r2, [pc, #52]	; (8004870 <MX_TIM16_Init+0x50>)
 800483c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800483e:	4b0a      	ldr	r3, [pc, #40]	; (8004868 <MX_TIM16_Init+0x48>)
 8004840:	2200      	movs	r2, #0
 8004842:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8004844:	4b08      	ldr	r3, [pc, #32]	; (8004868 <MX_TIM16_Init+0x48>)
 8004846:	2200      	movs	r2, #0
 8004848:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800484a:	4b07      	ldr	r3, [pc, #28]	; (8004868 <MX_TIM16_Init+0x48>)
 800484c:	2200      	movs	r2, #0
 800484e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8004850:	4b05      	ldr	r3, [pc, #20]	; (8004868 <MX_TIM16_Init+0x48>)
 8004852:	0018      	movs	r0, r3
 8004854:	f006 feda 	bl	800b60c <HAL_TIM_Base_Init>
 8004858:	1e03      	subs	r3, r0, #0
 800485a:	d001      	beq.n	8004860 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 800485c:	f003 f8cc 	bl	80079f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8004860:	46c0      	nop			; (mov r8, r8)
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	46c0      	nop			; (mov r8, r8)
 8004868:	200003b4 	.word	0x200003b4
 800486c:	40014400 	.word	0x40014400
 8004870:	000003e7 	.word	0x000003e7

08004874 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8004878:	4b10      	ldr	r3, [pc, #64]	; (80048bc <MX_TIM17_Init+0x48>)
 800487a:	4a11      	ldr	r2, [pc, #68]	; (80048c0 <MX_TIM17_Init+0x4c>)
 800487c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 7200;
 800487e:	4b0f      	ldr	r3, [pc, #60]	; (80048bc <MX_TIM17_Init+0x48>)
 8004880:	22e1      	movs	r2, #225	; 0xe1
 8004882:	0152      	lsls	r2, r2, #5
 8004884:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004886:	4b0d      	ldr	r3, [pc, #52]	; (80048bc <MX_TIM17_Init+0x48>)
 8004888:	2200      	movs	r2, #0
 800488a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 4000;
 800488c:	4b0b      	ldr	r3, [pc, #44]	; (80048bc <MX_TIM17_Init+0x48>)
 800488e:	22fa      	movs	r2, #250	; 0xfa
 8004890:	0112      	lsls	r2, r2, #4
 8004892:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004894:	4b09      	ldr	r3, [pc, #36]	; (80048bc <MX_TIM17_Init+0x48>)
 8004896:	2200      	movs	r2, #0
 8004898:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800489a:	4b08      	ldr	r3, [pc, #32]	; (80048bc <MX_TIM17_Init+0x48>)
 800489c:	2200      	movs	r2, #0
 800489e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80048a0:	4b06      	ldr	r3, [pc, #24]	; (80048bc <MX_TIM17_Init+0x48>)
 80048a2:	2280      	movs	r2, #128	; 0x80
 80048a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80048a6:	4b05      	ldr	r3, [pc, #20]	; (80048bc <MX_TIM17_Init+0x48>)
 80048a8:	0018      	movs	r0, r3
 80048aa:	f006 feaf 	bl	800b60c <HAL_TIM_Base_Init>
 80048ae:	1e03      	subs	r3, r0, #0
 80048b0:	d001      	beq.n	80048b6 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 80048b2:	f003 f8a1 	bl	80079f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80048b6:	46c0      	nop			; (mov r8, r8)
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	20000400 	.word	0x20000400
 80048c0:	40014800 	.word	0x40014800

080048c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80048c8:	4b23      	ldr	r3, [pc, #140]	; (8004958 <MX_USART1_UART_Init+0x94>)
 80048ca:	4a24      	ldr	r2, [pc, #144]	; (800495c <MX_USART1_UART_Init+0x98>)
 80048cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80048ce:	4b22      	ldr	r3, [pc, #136]	; (8004958 <MX_USART1_UART_Init+0x94>)
 80048d0:	2296      	movs	r2, #150	; 0x96
 80048d2:	0192      	lsls	r2, r2, #6
 80048d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80048d6:	4b20      	ldr	r3, [pc, #128]	; (8004958 <MX_USART1_UART_Init+0x94>)
 80048d8:	2200      	movs	r2, #0
 80048da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80048dc:	4b1e      	ldr	r3, [pc, #120]	; (8004958 <MX_USART1_UART_Init+0x94>)
 80048de:	2200      	movs	r2, #0
 80048e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80048e2:	4b1d      	ldr	r3, [pc, #116]	; (8004958 <MX_USART1_UART_Init+0x94>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80048e8:	4b1b      	ldr	r3, [pc, #108]	; (8004958 <MX_USART1_UART_Init+0x94>)
 80048ea:	220c      	movs	r2, #12
 80048ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048ee:	4b1a      	ldr	r3, [pc, #104]	; (8004958 <MX_USART1_UART_Init+0x94>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80048f4:	4b18      	ldr	r3, [pc, #96]	; (8004958 <MX_USART1_UART_Init+0x94>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80048fa:	4b17      	ldr	r3, [pc, #92]	; (8004958 <MX_USART1_UART_Init+0x94>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004900:	4b15      	ldr	r3, [pc, #84]	; (8004958 <MX_USART1_UART_Init+0x94>)
 8004902:	2200      	movs	r2, #0
 8004904:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004906:	4b14      	ldr	r3, [pc, #80]	; (8004958 <MX_USART1_UART_Init+0x94>)
 8004908:	2200      	movs	r2, #0
 800490a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800490c:	4b12      	ldr	r3, [pc, #72]	; (8004958 <MX_USART1_UART_Init+0x94>)
 800490e:	0018      	movs	r0, r3
 8004910:	f007 fe8c 	bl	800c62c <HAL_UART_Init>
 8004914:	1e03      	subs	r3, r0, #0
 8004916:	d001      	beq.n	800491c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8004918:	f003 f86e 	bl	80079f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800491c:	4b0e      	ldr	r3, [pc, #56]	; (8004958 <MX_USART1_UART_Init+0x94>)
 800491e:	2100      	movs	r1, #0
 8004920:	0018      	movs	r0, r3
 8004922:	f009 fcf5 	bl	800e310 <HAL_UARTEx_SetTxFifoThreshold>
 8004926:	1e03      	subs	r3, r0, #0
 8004928:	d001      	beq.n	800492e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800492a:	f003 f865 	bl	80079f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800492e:	4b0a      	ldr	r3, [pc, #40]	; (8004958 <MX_USART1_UART_Init+0x94>)
 8004930:	2100      	movs	r1, #0
 8004932:	0018      	movs	r0, r3
 8004934:	f009 fd2c 	bl	800e390 <HAL_UARTEx_SetRxFifoThreshold>
 8004938:	1e03      	subs	r3, r0, #0
 800493a:	d001      	beq.n	8004940 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800493c:	f003 f85c 	bl	80079f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004940:	4b05      	ldr	r3, [pc, #20]	; (8004958 <MX_USART1_UART_Init+0x94>)
 8004942:	0018      	movs	r0, r3
 8004944:	f009 fcaa 	bl	800e29c <HAL_UARTEx_DisableFifoMode>
 8004948:	1e03      	subs	r3, r0, #0
 800494a:	d001      	beq.n	8004950 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800494c:	f003 f854 	bl	80079f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004950:	46c0      	nop			; (mov r8, r8)
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	46c0      	nop			; (mov r8, r8)
 8004958:	200004a8 	.word	0x200004a8
 800495c:	40013800 	.word	0x40013800

08004960 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004964:	4b23      	ldr	r3, [pc, #140]	; (80049f4 <MX_USART2_UART_Init+0x94>)
 8004966:	4a24      	ldr	r2, [pc, #144]	; (80049f8 <MX_USART2_UART_Init+0x98>)
 8004968:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800496a:	4b22      	ldr	r3, [pc, #136]	; (80049f4 <MX_USART2_UART_Init+0x94>)
 800496c:	22e1      	movs	r2, #225	; 0xe1
 800496e:	0252      	lsls	r2, r2, #9
 8004970:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004972:	4b20      	ldr	r3, [pc, #128]	; (80049f4 <MX_USART2_UART_Init+0x94>)
 8004974:	2200      	movs	r2, #0
 8004976:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004978:	4b1e      	ldr	r3, [pc, #120]	; (80049f4 <MX_USART2_UART_Init+0x94>)
 800497a:	2200      	movs	r2, #0
 800497c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800497e:	4b1d      	ldr	r3, [pc, #116]	; (80049f4 <MX_USART2_UART_Init+0x94>)
 8004980:	2200      	movs	r2, #0
 8004982:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004984:	4b1b      	ldr	r3, [pc, #108]	; (80049f4 <MX_USART2_UART_Init+0x94>)
 8004986:	220c      	movs	r2, #12
 8004988:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800498a:	4b1a      	ldr	r3, [pc, #104]	; (80049f4 <MX_USART2_UART_Init+0x94>)
 800498c:	2200      	movs	r2, #0
 800498e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004990:	4b18      	ldr	r3, [pc, #96]	; (80049f4 <MX_USART2_UART_Init+0x94>)
 8004992:	2200      	movs	r2, #0
 8004994:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004996:	4b17      	ldr	r3, [pc, #92]	; (80049f4 <MX_USART2_UART_Init+0x94>)
 8004998:	2200      	movs	r2, #0
 800499a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800499c:	4b15      	ldr	r3, [pc, #84]	; (80049f4 <MX_USART2_UART_Init+0x94>)
 800499e:	2200      	movs	r2, #0
 80049a0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80049a2:	4b14      	ldr	r3, [pc, #80]	; (80049f4 <MX_USART2_UART_Init+0x94>)
 80049a4:	2200      	movs	r2, #0
 80049a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80049a8:	4b12      	ldr	r3, [pc, #72]	; (80049f4 <MX_USART2_UART_Init+0x94>)
 80049aa:	0018      	movs	r0, r3
 80049ac:	f007 fe3e 	bl	800c62c <HAL_UART_Init>
 80049b0:	1e03      	subs	r3, r0, #0
 80049b2:	d001      	beq.n	80049b8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80049b4:	f003 f820 	bl	80079f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80049b8:	4b0e      	ldr	r3, [pc, #56]	; (80049f4 <MX_USART2_UART_Init+0x94>)
 80049ba:	2100      	movs	r1, #0
 80049bc:	0018      	movs	r0, r3
 80049be:	f009 fca7 	bl	800e310 <HAL_UARTEx_SetTxFifoThreshold>
 80049c2:	1e03      	subs	r3, r0, #0
 80049c4:	d001      	beq.n	80049ca <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80049c6:	f003 f817 	bl	80079f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80049ca:	4b0a      	ldr	r3, [pc, #40]	; (80049f4 <MX_USART2_UART_Init+0x94>)
 80049cc:	2100      	movs	r1, #0
 80049ce:	0018      	movs	r0, r3
 80049d0:	f009 fcde 	bl	800e390 <HAL_UARTEx_SetRxFifoThreshold>
 80049d4:	1e03      	subs	r3, r0, #0
 80049d6:	d001      	beq.n	80049dc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80049d8:	f003 f80e 	bl	80079f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80049dc:	4b05      	ldr	r3, [pc, #20]	; (80049f4 <MX_USART2_UART_Init+0x94>)
 80049de:	0018      	movs	r0, r3
 80049e0:	f009 fc5c 	bl	800e29c <HAL_UARTEx_DisableFifoMode>
 80049e4:	1e03      	subs	r3, r0, #0
 80049e6:	d001      	beq.n	80049ec <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80049e8:	f003 f806 	bl	80079f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80049ec:	46c0      	nop			; (mov r8, r8)
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	46c0      	nop			; (mov r8, r8)
 80049f4:	2000053c 	.word	0x2000053c
 80049f8:	40004400 	.word	0x40004400

080049fc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004a00:	4b16      	ldr	r3, [pc, #88]	; (8004a5c <MX_USART3_UART_Init+0x60>)
 8004a02:	4a17      	ldr	r2, [pc, #92]	; (8004a60 <MX_USART3_UART_Init+0x64>)
 8004a04:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004a06:	4b15      	ldr	r3, [pc, #84]	; (8004a5c <MX_USART3_UART_Init+0x60>)
 8004a08:	22e1      	movs	r2, #225	; 0xe1
 8004a0a:	0252      	lsls	r2, r2, #9
 8004a0c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004a0e:	4b13      	ldr	r3, [pc, #76]	; (8004a5c <MX_USART3_UART_Init+0x60>)
 8004a10:	2200      	movs	r2, #0
 8004a12:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004a14:	4b11      	ldr	r3, [pc, #68]	; (8004a5c <MX_USART3_UART_Init+0x60>)
 8004a16:	2200      	movs	r2, #0
 8004a18:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004a1a:	4b10      	ldr	r3, [pc, #64]	; (8004a5c <MX_USART3_UART_Init+0x60>)
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004a20:	4b0e      	ldr	r3, [pc, #56]	; (8004a5c <MX_USART3_UART_Init+0x60>)
 8004a22:	220c      	movs	r2, #12
 8004a24:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a26:	4b0d      	ldr	r3, [pc, #52]	; (8004a5c <MX_USART3_UART_Init+0x60>)
 8004a28:	2200      	movs	r2, #0
 8004a2a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a2c:	4b0b      	ldr	r3, [pc, #44]	; (8004a5c <MX_USART3_UART_Init+0x60>)
 8004a2e:	2200      	movs	r2, #0
 8004a30:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004a32:	4b0a      	ldr	r3, [pc, #40]	; (8004a5c <MX_USART3_UART_Init+0x60>)
 8004a34:	2200      	movs	r2, #0
 8004a36:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004a38:	4b08      	ldr	r3, [pc, #32]	; (8004a5c <MX_USART3_UART_Init+0x60>)
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004a3e:	4b07      	ldr	r3, [pc, #28]	; (8004a5c <MX_USART3_UART_Init+0x60>)
 8004a40:	2200      	movs	r2, #0
 8004a42:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004a44:	4b05      	ldr	r3, [pc, #20]	; (8004a5c <MX_USART3_UART_Init+0x60>)
 8004a46:	0018      	movs	r0, r3
 8004a48:	f007 fdf0 	bl	800c62c <HAL_UART_Init>
 8004a4c:	1e03      	subs	r3, r0, #0
 8004a4e:	d001      	beq.n	8004a54 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8004a50:	f002 ffd2 	bl	80079f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004a54:	46c0      	nop			; (mov r8, r8)
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	46c0      	nop			; (mov r8, r8)
 8004a5c:	200005d0 	.word	0x200005d0
 8004a60:	40004800 	.word	0x40004800

08004a64 <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8004a68:	4b16      	ldr	r3, [pc, #88]	; (8004ac4 <MX_USART4_UART_Init+0x60>)
 8004a6a:	4a17      	ldr	r2, [pc, #92]	; (8004ac8 <MX_USART4_UART_Init+0x64>)
 8004a6c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8004a6e:	4b15      	ldr	r3, [pc, #84]	; (8004ac4 <MX_USART4_UART_Init+0x60>)
 8004a70:	22e1      	movs	r2, #225	; 0xe1
 8004a72:	0252      	lsls	r2, r2, #9
 8004a74:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004a76:	4b13      	ldr	r3, [pc, #76]	; (8004ac4 <MX_USART4_UART_Init+0x60>)
 8004a78:	2200      	movs	r2, #0
 8004a7a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004a7c:	4b11      	ldr	r3, [pc, #68]	; (8004ac4 <MX_USART4_UART_Init+0x60>)
 8004a7e:	2200      	movs	r2, #0
 8004a80:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004a82:	4b10      	ldr	r3, [pc, #64]	; (8004ac4 <MX_USART4_UART_Init+0x60>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004a88:	4b0e      	ldr	r3, [pc, #56]	; (8004ac4 <MX_USART4_UART_Init+0x60>)
 8004a8a:	220c      	movs	r2, #12
 8004a8c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a8e:	4b0d      	ldr	r3, [pc, #52]	; (8004ac4 <MX_USART4_UART_Init+0x60>)
 8004a90:	2200      	movs	r2, #0
 8004a92:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a94:	4b0b      	ldr	r3, [pc, #44]	; (8004ac4 <MX_USART4_UART_Init+0x60>)
 8004a96:	2200      	movs	r2, #0
 8004a98:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004a9a:	4b0a      	ldr	r3, [pc, #40]	; (8004ac4 <MX_USART4_UART_Init+0x60>)
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004aa0:	4b08      	ldr	r3, [pc, #32]	; (8004ac4 <MX_USART4_UART_Init+0x60>)
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004aa6:	4b07      	ldr	r3, [pc, #28]	; (8004ac4 <MX_USART4_UART_Init+0x60>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004aac:	4b05      	ldr	r3, [pc, #20]	; (8004ac4 <MX_USART4_UART_Init+0x60>)
 8004aae:	0018      	movs	r0, r3
 8004ab0:	f007 fdbc 	bl	800c62c <HAL_UART_Init>
 8004ab4:	1e03      	subs	r3, r0, #0
 8004ab6:	d001      	beq.n	8004abc <MX_USART4_UART_Init+0x58>
  {
    Error_Handler();
 8004ab8:	f002 ff9e 	bl	80079f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8004abc:	46c0      	nop			; (mov r8, r8)
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	46c0      	nop			; (mov r8, r8)
 8004ac4:	20000664 	.word	0x20000664
 8004ac8:	40004c00 	.word	0x40004c00

08004acc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004ad2:	4b0c      	ldr	r3, [pc, #48]	; (8004b04 <MX_DMA_Init+0x38>)
 8004ad4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ad6:	4b0b      	ldr	r3, [pc, #44]	; (8004b04 <MX_DMA_Init+0x38>)
 8004ad8:	2101      	movs	r1, #1
 8004ada:	430a      	orrs	r2, r1
 8004adc:	639a      	str	r2, [r3, #56]	; 0x38
 8004ade:	4b09      	ldr	r3, [pc, #36]	; (8004b04 <MX_DMA_Init+0x38>)
 8004ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	607b      	str	r3, [r7, #4]
 8004ae8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 8004aea:	2200      	movs	r2, #0
 8004aec:	2103      	movs	r1, #3
 8004aee:	2009      	movs	r0, #9
 8004af0:	f004 fa48 	bl	8008f84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004af4:	2009      	movs	r0, #9
 8004af6:	f004 fa5a 	bl	8008fae <HAL_NVIC_EnableIRQ>

}
 8004afa:	46c0      	nop			; (mov r8, r8)
 8004afc:	46bd      	mov	sp, r7
 8004afe:	b002      	add	sp, #8
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	46c0      	nop			; (mov r8, r8)
 8004b04:	40021000 	.word	0x40021000

08004b08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004b08:	b590      	push	{r4, r7, lr}
 8004b0a:	b08b      	sub	sp, #44	; 0x2c
 8004b0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b0e:	2414      	movs	r4, #20
 8004b10:	193b      	adds	r3, r7, r4
 8004b12:	0018      	movs	r0, r3
 8004b14:	2314      	movs	r3, #20
 8004b16:	001a      	movs	r2, r3
 8004b18:	2100      	movs	r1, #0
 8004b1a:	f009 fd38 	bl	800e58e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004b1e:	4b60      	ldr	r3, [pc, #384]	; (8004ca0 <MX_GPIO_Init+0x198>)
 8004b20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b22:	4b5f      	ldr	r3, [pc, #380]	; (8004ca0 <MX_GPIO_Init+0x198>)
 8004b24:	2120      	movs	r1, #32
 8004b26:	430a      	orrs	r2, r1
 8004b28:	635a      	str	r2, [r3, #52]	; 0x34
 8004b2a:	4b5d      	ldr	r3, [pc, #372]	; (8004ca0 <MX_GPIO_Init+0x198>)
 8004b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b2e:	2220      	movs	r2, #32
 8004b30:	4013      	ands	r3, r2
 8004b32:	613b      	str	r3, [r7, #16]
 8004b34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b36:	4b5a      	ldr	r3, [pc, #360]	; (8004ca0 <MX_GPIO_Init+0x198>)
 8004b38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b3a:	4b59      	ldr	r3, [pc, #356]	; (8004ca0 <MX_GPIO_Init+0x198>)
 8004b3c:	2101      	movs	r1, #1
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	635a      	str	r2, [r3, #52]	; 0x34
 8004b42:	4b57      	ldr	r3, [pc, #348]	; (8004ca0 <MX_GPIO_Init+0x198>)
 8004b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b46:	2201      	movs	r2, #1
 8004b48:	4013      	ands	r3, r2
 8004b4a:	60fb      	str	r3, [r7, #12]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b4e:	4b54      	ldr	r3, [pc, #336]	; (8004ca0 <MX_GPIO_Init+0x198>)
 8004b50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b52:	4b53      	ldr	r3, [pc, #332]	; (8004ca0 <MX_GPIO_Init+0x198>)
 8004b54:	2102      	movs	r1, #2
 8004b56:	430a      	orrs	r2, r1
 8004b58:	635a      	str	r2, [r3, #52]	; 0x34
 8004b5a:	4b51      	ldr	r3, [pc, #324]	; (8004ca0 <MX_GPIO_Init+0x198>)
 8004b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b5e:	2202      	movs	r2, #2
 8004b60:	4013      	ands	r3, r2
 8004b62:	60bb      	str	r3, [r7, #8]
 8004b64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b66:	4b4e      	ldr	r3, [pc, #312]	; (8004ca0 <MX_GPIO_Init+0x198>)
 8004b68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b6a:	4b4d      	ldr	r3, [pc, #308]	; (8004ca0 <MX_GPIO_Init+0x198>)
 8004b6c:	2104      	movs	r1, #4
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	635a      	str	r2, [r3, #52]	; 0x34
 8004b72:	4b4b      	ldr	r3, [pc, #300]	; (8004ca0 <MX_GPIO_Init+0x198>)
 8004b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b76:	2204      	movs	r2, #4
 8004b78:	4013      	ands	r3, r2
 8004b7a:	607b      	str	r3, [r7, #4]
 8004b7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004b7e:	4b48      	ldr	r3, [pc, #288]	; (8004ca0 <MX_GPIO_Init+0x198>)
 8004b80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b82:	4b47      	ldr	r3, [pc, #284]	; (8004ca0 <MX_GPIO_Init+0x198>)
 8004b84:	2108      	movs	r1, #8
 8004b86:	430a      	orrs	r2, r1
 8004b88:	635a      	str	r2, [r3, #52]	; 0x34
 8004b8a:	4b45      	ldr	r3, [pc, #276]	; (8004ca0 <MX_GPIO_Init+0x198>)
 8004b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b8e:	2208      	movs	r2, #8
 8004b90:	4013      	ands	r3, r2
 8004b92:	603b      	str	r3, [r7, #0]
 8004b94:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WD_GPIO_Port, WD_Pin, GPIO_PIN_RESET);
 8004b96:	23a0      	movs	r3, #160	; 0xa0
 8004b98:	05db      	lsls	r3, r3, #23
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	2110      	movs	r1, #16
 8004b9e:	0018      	movs	r0, r3
 8004ba0:	f004 fea4 	bl	80098ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CTS_Pin|DCD_Pin|LED_1_Pin|LED_2_Pin
 8004ba4:	493f      	ldr	r1, [pc, #252]	; (8004ca4 <MX_GPIO_Init+0x19c>)
 8004ba6:	4b40      	ldr	r3, [pc, #256]	; (8004ca8 <MX_GPIO_Init+0x1a0>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	0018      	movs	r0, r3
 8004bac:	f004 fe9e 	bl	80098ec <HAL_GPIO_WritePin>
                          |PWR_KEY_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUTPUT_1_GPIO_Port, OUTPUT_1_Pin, GPIO_PIN_RESET);
 8004bb0:	4b3e      	ldr	r3, [pc, #248]	; (8004cac <MX_GPIO_Init+0x1a4>)
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	2140      	movs	r1, #64	; 0x40
 8004bb6:	0018      	movs	r0, r3
 8004bb8:	f004 fe98 	bl	80098ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Q_CTRL_Pin|FLASH_CS_Pin, GPIO_PIN_RESET);
 8004bbc:	4b3c      	ldr	r3, [pc, #240]	; (8004cb0 <MX_GPIO_Init+0x1a8>)
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	210c      	movs	r1, #12
 8004bc2:	0018      	movs	r0, r3
 8004bc4:	f004 fe92 	bl	80098ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : WD_Pin */
  GPIO_InitStruct.Pin = WD_Pin;
 8004bc8:	193b      	adds	r3, r7, r4
 8004bca:	2210      	movs	r2, #16
 8004bcc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004bce:	193b      	adds	r3, r7, r4
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bd4:	193b      	adds	r3, r7, r4
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bda:	193b      	adds	r3, r7, r4
 8004bdc:	2200      	movs	r2, #0
 8004bde:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(WD_GPIO_Port, &GPIO_InitStruct);
 8004be0:	193a      	adds	r2, r7, r4
 8004be2:	23a0      	movs	r3, #160	; 0xa0
 8004be4:	05db      	lsls	r3, r3, #23
 8004be6:	0011      	movs	r1, r2
 8004be8:	0018      	movs	r0, r3
 8004bea:	f004 fd1b 	bl	8009624 <HAL_GPIO_Init>

  /*Configure GPIO pins : RTS_Pin DTR_Pin */
  GPIO_InitStruct.Pin = RTS_Pin|DTR_Pin;
 8004bee:	193b      	adds	r3, r7, r4
 8004bf0:	4a30      	ldr	r2, [pc, #192]	; (8004cb4 <MX_GPIO_Init+0x1ac>)
 8004bf2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004bf4:	193b      	adds	r3, r7, r4
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bfa:	193b      	adds	r3, r7, r4
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c00:	193b      	adds	r3, r7, r4
 8004c02:	4a29      	ldr	r2, [pc, #164]	; (8004ca8 <MX_GPIO_Init+0x1a0>)
 8004c04:	0019      	movs	r1, r3
 8004c06:	0010      	movs	r0, r2
 8004c08:	f004 fd0c 	bl	8009624 <HAL_GPIO_Init>

  /*Configure GPIO pins : CTS_Pin DCD_Pin LED_1_Pin LED_2_Pin
                           PWR_KEY_Pin */
  GPIO_InitStruct.Pin = CTS_Pin|DCD_Pin|LED_1_Pin|LED_2_Pin
 8004c0c:	193b      	adds	r3, r7, r4
 8004c0e:	4a25      	ldr	r2, [pc, #148]	; (8004ca4 <MX_GPIO_Init+0x19c>)
 8004c10:	601a      	str	r2, [r3, #0]
                          |PWR_KEY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c12:	193b      	adds	r3, r7, r4
 8004c14:	2201      	movs	r2, #1
 8004c16:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c18:	193b      	adds	r3, r7, r4
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c1e:	193b      	adds	r3, r7, r4
 8004c20:	2200      	movs	r2, #0
 8004c22:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c24:	193b      	adds	r3, r7, r4
 8004c26:	4a20      	ldr	r2, [pc, #128]	; (8004ca8 <MX_GPIO_Init+0x1a0>)
 8004c28:	0019      	movs	r1, r3
 8004c2a:	0010      	movs	r0, r2
 8004c2c:	f004 fcfa 	bl	8009624 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUTPUT_1_Pin */
  GPIO_InitStruct.Pin = OUTPUT_1_Pin;
 8004c30:	193b      	adds	r3, r7, r4
 8004c32:	2240      	movs	r2, #64	; 0x40
 8004c34:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c36:	193b      	adds	r3, r7, r4
 8004c38:	2201      	movs	r2, #1
 8004c3a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c3c:	193b      	adds	r3, r7, r4
 8004c3e:	2200      	movs	r2, #0
 8004c40:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c42:	193b      	adds	r3, r7, r4
 8004c44:	2200      	movs	r2, #0
 8004c46:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(OUTPUT_1_GPIO_Port, &GPIO_InitStruct);
 8004c48:	193b      	adds	r3, r7, r4
 8004c4a:	4a18      	ldr	r2, [pc, #96]	; (8004cac <MX_GPIO_Init+0x1a4>)
 8004c4c:	0019      	movs	r1, r3
 8004c4e:	0010      	movs	r0, r2
 8004c50:	f004 fce8 	bl	8009624 <HAL_GPIO_Init>

  /*Configure GPIO pin : INPUT_1_Pin */
  GPIO_InitStruct.Pin = INPUT_1_Pin;
 8004c54:	193b      	adds	r3, r7, r4
 8004c56:	2280      	movs	r2, #128	; 0x80
 8004c58:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c5a:	193b      	adds	r3, r7, r4
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c60:	193b      	adds	r3, r7, r4
 8004c62:	2200      	movs	r2, #0
 8004c64:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(INPUT_1_GPIO_Port, &GPIO_InitStruct);
 8004c66:	193b      	adds	r3, r7, r4
 8004c68:	4a10      	ldr	r2, [pc, #64]	; (8004cac <MX_GPIO_Init+0x1a4>)
 8004c6a:	0019      	movs	r1, r3
 8004c6c:	0010      	movs	r0, r2
 8004c6e:	f004 fcd9 	bl	8009624 <HAL_GPIO_Init>

  /*Configure GPIO pins : Q_CTRL_Pin FLASH_CS_Pin */
  GPIO_InitStruct.Pin = Q_CTRL_Pin|FLASH_CS_Pin;
 8004c72:	0021      	movs	r1, r4
 8004c74:	187b      	adds	r3, r7, r1
 8004c76:	220c      	movs	r2, #12
 8004c78:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c7a:	187b      	adds	r3, r7, r1
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c80:	187b      	adds	r3, r7, r1
 8004c82:	2200      	movs	r2, #0
 8004c84:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c86:	187b      	adds	r3, r7, r1
 8004c88:	2200      	movs	r2, #0
 8004c8a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004c8c:	187b      	adds	r3, r7, r1
 8004c8e:	4a08      	ldr	r2, [pc, #32]	; (8004cb0 <MX_GPIO_Init+0x1a8>)
 8004c90:	0019      	movs	r1, r3
 8004c92:	0010      	movs	r0, r2
 8004c94:	f004 fcc6 	bl	8009624 <HAL_GPIO_Init>

}
 8004c98:	46c0      	nop			; (mov r8, r8)
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	b00b      	add	sp, #44	; 0x2c
 8004c9e:	bd90      	pop	{r4, r7, pc}
 8004ca0:	40021000 	.word	0x40021000
 8004ca4:	00007804 	.word	0x00007804
 8004ca8:	50000400 	.word	0x50000400
 8004cac:	50000800 	.word	0x50000800
 8004cb0:	50000c00 	.word	0x50000c00
 8004cb4:	00000402 	.word	0x00000402

08004cb8 <HAL_UART_ErrorCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a0d      	ldr	r2, [pc, #52]	; (8004cfc <HAL_UART_ErrorCallback+0x44>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d107      	bne.n	8004cda <HAL_UART_ErrorCallback+0x22>
		MX_USART2_UART_Init();
 8004cca:	f7ff fe49 	bl	8004960 <MX_USART2_UART_Init>
		HAL_UART_Receive_IT(&GNSS_PORT, GNSS_BUFFER, 1);
 8004cce:	490c      	ldr	r1, [pc, #48]	; (8004d00 <HAL_UART_ErrorCallback+0x48>)
 8004cd0:	4b0c      	ldr	r3, [pc, #48]	; (8004d04 <HAL_UART_ErrorCallback+0x4c>)
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	0018      	movs	r0, r3
 8004cd6:	f007 fd9b 	bl	800c810 <HAL_UART_Receive_IT>
	}
	if (huart->Instance == USART1) {
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a0a      	ldr	r2, [pc, #40]	; (8004d08 <HAL_UART_ErrorCallback+0x50>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d107      	bne.n	8004cf4 <HAL_UART_ErrorCallback+0x3c>
		MX_USART1_UART_Init();
 8004ce4:	f7ff fdee 	bl	80048c4 <MX_USART1_UART_Init>
		HAL_UART_Receive_IT(&AT_PORT, AT_BUFFER, 1);
 8004ce8:	4908      	ldr	r1, [pc, #32]	; (8004d0c <HAL_UART_ErrorCallback+0x54>)
 8004cea:	4b09      	ldr	r3, [pc, #36]	; (8004d10 <HAL_UART_ErrorCallback+0x58>)
 8004cec:	2201      	movs	r2, #1
 8004cee:	0018      	movs	r0, r3
 8004cf0:	f007 fd8e 	bl	800c810 <HAL_UART_Receive_IT>
	}
}
 8004cf4:	46c0      	nop			; (mov r8, r8)
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	b002      	add	sp, #8
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	40004400 	.word	0x40004400
 8004d00:	20000718 	.word	0x20000718
 8004d04:	2000053c 	.word	0x2000053c
 8004d08:	40013800 	.word	0x40013800
 8004d0c:	20000714 	.word	0x20000714
 8004d10:	200004a8 	.word	0x200004a8

08004d14 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8004d14:	b590      	push	{r4, r7, lr}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]

	//------------------------------------------------------------------
	if (huart == &GNSS_PORT) {
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	4b5a      	ldr	r3, [pc, #360]	; (8004e88 <HAL_UART_RxCpltCallback+0x174>)
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d152      	bne.n	8004dca <HAL_UART_RxCpltCallback+0xb6>
		// Incoming data from GNSS, receiving single byte
		HAL_UART_Receive_IT(&GNSS_PORT, GNSS_BUFFER, 1);
 8004d24:	4959      	ldr	r1, [pc, #356]	; (8004e8c <HAL_UART_RxCpltCallback+0x178>)
 8004d26:	4b58      	ldr	r3, [pc, #352]	; (8004e88 <HAL_UART_RxCpltCallback+0x174>)
 8004d28:	2201      	movs	r2, #1
 8004d2a:	0018      	movs	r0, r3
 8004d2c:	f007 fd70 	bl	800c810 <HAL_UART_Receive_IT>
		if (isGNSSTimStart == 0) {
 8004d30:	4b57      	ldr	r3, [pc, #348]	; (8004e90 <HAL_UART_RxCpltCallback+0x17c>)
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d106      	bne.n	8004d46 <HAL_UART_RxCpltCallback+0x32>
			isGNSSTimStart = 1;
 8004d38:	4b55      	ldr	r3, [pc, #340]	; (8004e90 <HAL_UART_RxCpltCallback+0x17c>)
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim17);
 8004d3e:	4b55      	ldr	r3, [pc, #340]	; (8004e94 <HAL_UART_RxCpltCallback+0x180>)
 8004d40:	0018      	movs	r0, r3
 8004d42:	f006 fcbb 	bl	800b6bc <HAL_TIM_Base_Start_IT>
		}
		TIM17->CNT &= 0x0;
 8004d46:	4b54      	ldr	r3, [pc, #336]	; (8004e98 <HAL_UART_RxCpltCallback+0x184>)
 8004d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4a:	4b53      	ldr	r3, [pc, #332]	; (8004e98 <HAL_UART_RxCpltCallback+0x184>)
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	625a      	str	r2, [r3, #36]	; 0x24
		if(GNSS_BUFFER[0] != NULL){
 8004d50:	4b4e      	ldr	r3, [pc, #312]	; (8004e8c <HAL_UART_RxCpltCallback+0x178>)
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d038      	beq.n	8004dca <HAL_UART_RxCpltCallback+0xb6>
			nmeaResponse[nmeaLC][nmeaCC] = GNSS_BUFFER[0];
 8004d58:	4b50      	ldr	r3, [pc, #320]	; (8004e9c <HAL_UART_RxCpltCallback+0x188>)
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	0019      	movs	r1, r3
 8004d60:	4b4f      	ldr	r3, [pc, #316]	; (8004ea0 <HAL_UART_RxCpltCallback+0x18c>)
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	0018      	movs	r0, r3
 8004d68:	4b48      	ldr	r3, [pc, #288]	; (8004e8c <HAL_UART_RxCpltCallback+0x178>)
 8004d6a:	781c      	ldrb	r4, [r3, #0]
 8004d6c:	4a4d      	ldr	r2, [pc, #308]	; (8004ea4 <HAL_UART_RxCpltCallback+0x190>)
 8004d6e:	000b      	movs	r3, r1
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	185b      	adds	r3, r3, r1
 8004d74:	0119      	lsls	r1, r3, #4
 8004d76:	185b      	adds	r3, r3, r1
 8004d78:	18d3      	adds	r3, r2, r3
 8004d7a:	1c22      	adds	r2, r4, #0
 8004d7c:	541a      	strb	r2, [r3, r0]
			if (GNSS_BUFFER[0] == '\n') {
 8004d7e:	4b43      	ldr	r3, [pc, #268]	; (8004e8c <HAL_UART_RxCpltCallback+0x178>)
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	2b0a      	cmp	r3, #10
 8004d84:	d112      	bne.n	8004dac <HAL_UART_RxCpltCallback+0x98>
				nmeaLC++;
 8004d86:	4b45      	ldr	r3, [pc, #276]	; (8004e9c <HAL_UART_RxCpltCallback+0x188>)
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	b2da      	uxtb	r2, r3
 8004d90:	4b42      	ldr	r3, [pc, #264]	; (8004e9c <HAL_UART_RxCpltCallback+0x188>)
 8004d92:	701a      	strb	r2, [r3, #0]
				if (nmeaLC > NMEA_MAX_LINES - 1) {
 8004d94:	4b41      	ldr	r3, [pc, #260]	; (8004e9c <HAL_UART_RxCpltCallback+0x188>)
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	2b0d      	cmp	r3, #13
 8004d9c:	d902      	bls.n	8004da4 <HAL_UART_RxCpltCallback+0x90>
					nmeaLC = 0;
 8004d9e:	4b3f      	ldr	r3, [pc, #252]	; (8004e9c <HAL_UART_RxCpltCallback+0x188>)
 8004da0:	2200      	movs	r2, #0
 8004da2:	701a      	strb	r2, [r3, #0]
				}
				nmeaCC = 0;
 8004da4:	4b3e      	ldr	r3, [pc, #248]	; (8004ea0 <HAL_UART_RxCpltCallback+0x18c>)
 8004da6:	2200      	movs	r2, #0
 8004da8:	701a      	strb	r2, [r3, #0]
 8004daa:	e00e      	b.n	8004dca <HAL_UART_RxCpltCallback+0xb6>
			} else {
				nmeaCC++;
 8004dac:	4b3c      	ldr	r3, [pc, #240]	; (8004ea0 <HAL_UART_RxCpltCallback+0x18c>)
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	3301      	adds	r3, #1
 8004db4:	b2da      	uxtb	r2, r3
 8004db6:	4b3a      	ldr	r3, [pc, #232]	; (8004ea0 <HAL_UART_RxCpltCallback+0x18c>)
 8004db8:	701a      	strb	r2, [r3, #0]
				if (nmeaCC > NMEA_MAX_CHARS - 1) {
 8004dba:	4b39      	ldr	r3, [pc, #228]	; (8004ea0 <HAL_UART_RxCpltCallback+0x18c>)
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	2b54      	cmp	r3, #84	; 0x54
 8004dc2:	d902      	bls.n	8004dca <HAL_UART_RxCpltCallback+0xb6>
					nmeaCC = 0;
 8004dc4:	4b36      	ldr	r3, [pc, #216]	; (8004ea0 <HAL_UART_RxCpltCallback+0x18c>)
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	701a      	strb	r2, [r3, #0]

		}
	}
	//------------------------------------------------------------------

	if (huart == &AT_PORT) {
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	4b36      	ldr	r3, [pc, #216]	; (8004ea8 <HAL_UART_RxCpltCallback+0x194>)
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d155      	bne.n	8004e7e <HAL_UART_RxCpltCallback+0x16a>
		recResponse = 1;
 8004dd2:	4b36      	ldr	r3, [pc, #216]	; (8004eac <HAL_UART_RxCpltCallback+0x198>)
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	701a      	strb	r2, [r3, #0]
		if (isStart == 0) {
 8004dd8:	4b35      	ldr	r3, [pc, #212]	; (8004eb0 <HAL_UART_RxCpltCallback+0x19c>)
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d10b      	bne.n	8004dfa <HAL_UART_RxCpltCallback+0xe6>
			isStart = 1;
 8004de2:	4b33      	ldr	r3, [pc, #204]	; (8004eb0 <HAL_UART_RxCpltCallback+0x19c>)
 8004de4:	2201      	movs	r2, #1
 8004de6:	701a      	strb	r2, [r3, #0]
			FIX_TIMER_TRIGGER(&htim16);
 8004de8:	4b32      	ldr	r3, [pc, #200]	; (8004eb4 <HAL_UART_RxCpltCallback+0x1a0>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2202      	movs	r2, #2
 8004dee:	4252      	negs	r2, r2
 8004df0:	611a      	str	r2, [r3, #16]
			HAL_TIM_Base_Start_IT(&htim16);
 8004df2:	4b30      	ldr	r3, [pc, #192]	; (8004eb4 <HAL_UART_RxCpltCallback+0x1a0>)
 8004df4:	0018      	movs	r0, r3
 8004df6:	f006 fc61 	bl	800b6bc <HAL_TIM_Base_Start_IT>
		}
		TIM16->CNT &= 0x0;
 8004dfa:	4b2f      	ldr	r3, [pc, #188]	; (8004eb8 <HAL_UART_RxCpltCallback+0x1a4>)
 8004dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfe:	4b2e      	ldr	r3, [pc, #184]	; (8004eb8 <HAL_UART_RxCpltCallback+0x1a4>)
 8004e00:	2200      	movs	r2, #0
 8004e02:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_UART_Receive_IT(&AT_PORT, AT_BUFFER, 1);
 8004e04:	492d      	ldr	r1, [pc, #180]	; (8004ebc <HAL_UART_RxCpltCallback+0x1a8>)
 8004e06:	4b28      	ldr	r3, [pc, #160]	; (8004ea8 <HAL_UART_RxCpltCallback+0x194>)
 8004e08:	2201      	movs	r2, #1
 8004e0a:	0018      	movs	r0, r3
 8004e0c:	f007 fd00 	bl	800c810 <HAL_UART_Receive_IT>
		if (AT_BUFFER[0] == '\n') {
 8004e10:	4b2a      	ldr	r3, [pc, #168]	; (8004ebc <HAL_UART_RxCpltCallback+0x1a8>)
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	2b0a      	cmp	r3, #10
 8004e16:	d113      	bne.n	8004e40 <HAL_UART_RxCpltCallback+0x12c>
			if (lineCount > RESPONSE_MAX_LINE - 2) {
 8004e18:	4b29      	ldr	r3, [pc, #164]	; (8004ec0 <HAL_UART_RxCpltCallback+0x1ac>)
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	2b04      	cmp	r3, #4
 8004e20:	d903      	bls.n	8004e2a <HAL_UART_RxCpltCallback+0x116>
				lineCount = 0;
 8004e22:	4b27      	ldr	r3, [pc, #156]	; (8004ec0 <HAL_UART_RxCpltCallback+0x1ac>)
 8004e24:	2200      	movs	r2, #0
 8004e26:	701a      	strb	r2, [r3, #0]
 8004e28:	e006      	b.n	8004e38 <HAL_UART_RxCpltCallback+0x124>
			} else {
				lineCount++;
 8004e2a:	4b25      	ldr	r3, [pc, #148]	; (8004ec0 <HAL_UART_RxCpltCallback+0x1ac>)
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	3301      	adds	r3, #1
 8004e32:	b2da      	uxtb	r2, r3
 8004e34:	4b22      	ldr	r3, [pc, #136]	; (8004ec0 <HAL_UART_RxCpltCallback+0x1ac>)
 8004e36:	701a      	strb	r2, [r3, #0]
			}
			charCount = 0;
 8004e38:	4b22      	ldr	r3, [pc, #136]	; (8004ec4 <HAL_UART_RxCpltCallback+0x1b0>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	//-----------------------------------------------------------------------------

}
 8004e3e:	e01e      	b.n	8004e7e <HAL_UART_RxCpltCallback+0x16a>
			responseBuffer[lineCount][charCount] = AT_BUFFER[0];
 8004e40:	4b1f      	ldr	r3, [pc, #124]	; (8004ec0 <HAL_UART_RxCpltCallback+0x1ac>)
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	001c      	movs	r4, r3
 8004e48:	4b1e      	ldr	r3, [pc, #120]	; (8004ec4 <HAL_UART_RxCpltCallback+0x1b0>)
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	0019      	movs	r1, r3
 8004e50:	4b1a      	ldr	r3, [pc, #104]	; (8004ebc <HAL_UART_RxCpltCallback+0x1a8>)
 8004e52:	7818      	ldrb	r0, [r3, #0]
 8004e54:	4a1c      	ldr	r2, [pc, #112]	; (8004ec8 <HAL_UART_RxCpltCallback+0x1b4>)
 8004e56:	2332      	movs	r3, #50	; 0x32
 8004e58:	4363      	muls	r3, r4
 8004e5a:	18d3      	adds	r3, r2, r3
 8004e5c:	1c02      	adds	r2, r0, #0
 8004e5e:	545a      	strb	r2, [r3, r1]
			charCount++;
 8004e60:	4b18      	ldr	r3, [pc, #96]	; (8004ec4 <HAL_UART_RxCpltCallback+0x1b0>)
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	3301      	adds	r3, #1
 8004e68:	b2da      	uxtb	r2, r3
 8004e6a:	4b16      	ldr	r3, [pc, #88]	; (8004ec4 <HAL_UART_RxCpltCallback+0x1b0>)
 8004e6c:	701a      	strb	r2, [r3, #0]
			if (lineCount > RESPONSE_MAX_CHAR - 2) {
 8004e6e:	4b14      	ldr	r3, [pc, #80]	; (8004ec0 <HAL_UART_RxCpltCallback+0x1ac>)
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	2b30      	cmp	r3, #48	; 0x30
 8004e76:	d902      	bls.n	8004e7e <HAL_UART_RxCpltCallback+0x16a>
				charCount = 0;
 8004e78:	4b12      	ldr	r3, [pc, #72]	; (8004ec4 <HAL_UART_RxCpltCallback+0x1b0>)
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	701a      	strb	r2, [r3, #0]
}
 8004e7e:	46c0      	nop			; (mov r8, r8)
 8004e80:	46bd      	mov	sp, r7
 8004e82:	b003      	add	sp, #12
 8004e84:	bd90      	pop	{r4, r7, pc}
 8004e86:	46c0      	nop			; (mov r8, r8)
 8004e88:	2000053c 	.word	0x2000053c
 8004e8c:	20000718 	.word	0x20000718
 8004e90:	20000852 	.word	0x20000852
 8004e94:	20000400 	.word	0x20000400
 8004e98:	40014800 	.word	0x40014800
 8004e9c:	2000084a 	.word	0x2000084a
 8004ea0:	2000084b 	.word	0x2000084b
 8004ea4:	20000898 	.word	0x20000898
 8004ea8:	200004a8 	.word	0x200004a8
 8004eac:	20000855 	.word	0x20000855
 8004eb0:	2000084c 	.word	0x2000084c
 8004eb4:	200003b4 	.word	0x200003b4
 8004eb8:	40014400 	.word	0x40014400
 8004ebc:	20000714 	.word	0x20000714
 8004ec0:	20000848 	.word	0x20000848
 8004ec4:	20000849 	.word	0x20000849
 8004ec8:	2000071c 	.word	0x2000071c

08004ecc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ece:	46c6      	mov	lr, r8
 8004ed0:	b500      	push	{lr}
 8004ed2:	b0c8      	sub	sp, #288	; 0x120
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	61f8      	str	r0, [r7, #28]

	if (htim == &htim14) {
 8004ed8:	69fa      	ldr	r2, [r7, #28]
 8004eda:	4b89      	ldr	r3, [pc, #548]	; (8005100 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d10c      	bne.n	8004efa <HAL_TIM_PeriodElapsedCallback+0x2e>
		HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 8004ee0:	2380      	movs	r3, #128	; 0x80
 8004ee2:	015b      	lsls	r3, r3, #5
 8004ee4:	4a87      	ldr	r2, [pc, #540]	; (8005104 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8004ee6:	0019      	movs	r1, r3
 8004ee8:	0010      	movs	r0, r2
 8004eea:	f004 fd1c 	bl	8009926 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(WD_GPIO_Port, WD_Pin);
 8004eee:	23a0      	movs	r3, #160	; 0xa0
 8004ef0:	05db      	lsls	r3, r3, #23
 8004ef2:	2110      	movs	r1, #16
 8004ef4:	0018      	movs	r0, r3
 8004ef6:	f004 fd16 	bl	8009926 <HAL_GPIO_TogglePin>
	}
	if (htim == &htim16) {
 8004efa:	69fa      	ldr	r2, [r7, #28]
 8004efc:	4b82      	ldr	r3, [pc, #520]	; (8005108 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d001      	beq.n	8004f06 <HAL_TIM_PeriodElapsedCallback+0x3a>
 8004f02:	f001 f8c3 	bl	800608c <HAL_TIM_PeriodElapsedCallback+0x11c0>
		char tResponse = '0';
 8004f06:	2308      	movs	r3, #8
 8004f08:	33ff      	adds	r3, #255	; 0xff
 8004f0a:	2018      	movs	r0, #24
 8004f0c:	181b      	adds	r3, r3, r0
 8004f0e:	19db      	adds	r3, r3, r7
 8004f10:	2230      	movs	r2, #48	; 0x30
 8004f12:	701a      	strb	r2, [r3, #0]
		//todo
		//---- server response check
		if (responseBuffer[0][0] == 0x78 && responseBuffer[0][1] == 0x78) {
 8004f14:	4b7d      	ldr	r3, [pc, #500]	; (800510c <HAL_TIM_PeriodElapsedCallback+0x240>)
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	2b78      	cmp	r3, #120	; 0x78
 8004f1a:	d000      	beq.n	8004f1e <HAL_TIM_PeriodElapsedCallback+0x52>
 8004f1c:	e0c6      	b.n	80050ac <HAL_TIM_PeriodElapsedCallback+0x1e0>
 8004f1e:	4b7b      	ldr	r3, [pc, #492]	; (800510c <HAL_TIM_PeriodElapsedCallback+0x240>)
 8004f20:	785b      	ldrb	r3, [r3, #1]
 8004f22:	2b78      	cmp	r3, #120	; 0x78
 8004f24:	d000      	beq.n	8004f28 <HAL_TIM_PeriodElapsedCallback+0x5c>
 8004f26:	e0c1      	b.n	80050ac <HAL_TIM_PeriodElapsedCallback+0x1e0>
 8004f28:	466b      	mov	r3, sp
 8004f2a:	4698      	mov	r8, r3
			// HAL_UART_Transmit(&huart4, "Res rec server",
			// sizeof("Res rec server"), 100);
			uint8_t c = responseBuffer[0][2];
 8004f2c:	21db      	movs	r1, #219	; 0xdb
 8004f2e:	180b      	adds	r3, r1, r0
 8004f30:	19db      	adds	r3, r3, r7
 8004f32:	4a76      	ldr	r2, [pc, #472]	; (800510c <HAL_TIM_PeriodElapsedCallback+0x240>)
 8004f34:	7892      	ldrb	r2, [r2, #2]
 8004f36:	701a      	strb	r2, [r3, #0]
			uint8_t tempCrcData[c - 1];
 8004f38:	180b      	adds	r3, r1, r0
 8004f3a:	19db      	adds	r3, r3, r7
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	1e5a      	subs	r2, r3, #1
 8004f42:	21d4      	movs	r1, #212	; 0xd4
 8004f44:	1809      	adds	r1, r1, r0
 8004f46:	19c9      	adds	r1, r1, r7
 8004f48:	600a      	str	r2, [r1, #0]
 8004f4a:	001a      	movs	r2, r3
 8004f4c:	60ba      	str	r2, [r7, #8]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	60fa      	str	r2, [r7, #12]
 8004f52:	68b8      	ldr	r0, [r7, #8]
 8004f54:	68f9      	ldr	r1, [r7, #12]
 8004f56:	0002      	movs	r2, r0
 8004f58:	0f52      	lsrs	r2, r2, #29
 8004f5a:	000e      	movs	r6, r1
 8004f5c:	00f6      	lsls	r6, r6, #3
 8004f5e:	617e      	str	r6, [r7, #20]
 8004f60:	697e      	ldr	r6, [r7, #20]
 8004f62:	4316      	orrs	r6, r2
 8004f64:	617e      	str	r6, [r7, #20]
 8004f66:	0002      	movs	r2, r0
 8004f68:	00d2      	lsls	r2, r2, #3
 8004f6a:	613a      	str	r2, [r7, #16]
 8004f6c:	001a      	movs	r2, r3
 8004f6e:	603a      	str	r2, [r7, #0]
 8004f70:	2200      	movs	r2, #0
 8004f72:	607a      	str	r2, [r7, #4]
 8004f74:	6838      	ldr	r0, [r7, #0]
 8004f76:	6879      	ldr	r1, [r7, #4]
 8004f78:	0002      	movs	r2, r0
 8004f7a:	0f52      	lsrs	r2, r2, #29
 8004f7c:	000e      	movs	r6, r1
 8004f7e:	00f5      	lsls	r5, r6, #3
 8004f80:	4315      	orrs	r5, r2
 8004f82:	0002      	movs	r2, r0
 8004f84:	00d4      	lsls	r4, r2, #3
 8004f86:	001a      	movs	r2, r3
 8004f88:	3207      	adds	r2, #7
 8004f8a:	08d2      	lsrs	r2, r2, #3
 8004f8c:	00d2      	lsls	r2, r2, #3
 8004f8e:	4669      	mov	r1, sp
 8004f90:	1a8a      	subs	r2, r1, r2
 8004f92:	4695      	mov	sp, r2
 8004f94:	466a      	mov	r2, sp
 8004f96:	3200      	adds	r2, #0
 8004f98:	21d0      	movs	r1, #208	; 0xd0
 8004f9a:	2018      	movs	r0, #24
 8004f9c:	1809      	adds	r1, r1, r0
 8004f9e:	19c9      	adds	r1, r1, r7
 8004fa0:	600a      	str	r2, [r1, #0]
			uint16_t crcResult = 0;
 8004fa2:	22ce      	movs	r2, #206	; 0xce
 8004fa4:	1812      	adds	r2, r2, r0
 8004fa6:	19d2      	adds	r2, r2, r7
 8004fa8:	2100      	movs	r1, #0
 8004faa:	8011      	strh	r1, [r2, #0]
			for (uint8_t i = 2; i < c + 1; i++) {
 8004fac:	228f      	movs	r2, #143	; 0x8f
 8004fae:	0052      	lsls	r2, r2, #1
 8004fb0:	18ba      	adds	r2, r7, r2
 8004fb2:	2102      	movs	r1, #2
 8004fb4:	7011      	strb	r1, [r2, #0]
 8004fb6:	e013      	b.n	8004fe0 <HAL_TIM_PeriodElapsedCallback+0x114>
				tempCrcData[i - 2] = responseBuffer[0][i];
 8004fb8:	248f      	movs	r4, #143	; 0x8f
 8004fba:	0064      	lsls	r4, r4, #1
 8004fbc:	193a      	adds	r2, r7, r4
 8004fbe:	7811      	ldrb	r1, [r2, #0]
 8004fc0:	193a      	adds	r2, r7, r4
 8004fc2:	7812      	ldrb	r2, [r2, #0]
 8004fc4:	3a02      	subs	r2, #2
 8004fc6:	4851      	ldr	r0, [pc, #324]	; (800510c <HAL_TIM_PeriodElapsedCallback+0x240>)
 8004fc8:	5c40      	ldrb	r0, [r0, r1]
 8004fca:	21d0      	movs	r1, #208	; 0xd0
 8004fcc:	2518      	movs	r5, #24
 8004fce:	1949      	adds	r1, r1, r5
 8004fd0:	19c9      	adds	r1, r1, r7
 8004fd2:	6809      	ldr	r1, [r1, #0]
 8004fd4:	5488      	strb	r0, [r1, r2]
			for (uint8_t i = 2; i < c + 1; i++) {
 8004fd6:	193a      	adds	r2, r7, r4
 8004fd8:	7811      	ldrb	r1, [r2, #0]
 8004fda:	193a      	adds	r2, r7, r4
 8004fdc:	3101      	adds	r1, #1
 8004fde:	7011      	strb	r1, [r2, #0]
 8004fe0:	25db      	movs	r5, #219	; 0xdb
 8004fe2:	2018      	movs	r0, #24
 8004fe4:	182a      	adds	r2, r5, r0
 8004fe6:	19d1      	adds	r1, r2, r7
 8004fe8:	228f      	movs	r2, #143	; 0x8f
 8004fea:	0052      	lsls	r2, r2, #1
 8004fec:	18ba      	adds	r2, r7, r2
 8004fee:	7809      	ldrb	r1, [r1, #0]
 8004ff0:	7812      	ldrb	r2, [r2, #0]
 8004ff2:	4291      	cmp	r1, r2
 8004ff4:	d2e0      	bcs.n	8004fb8 <HAL_TIM_PeriodElapsedCallback+0xec>
			}
			uint8_t *tempPtr = tempCrcData;
 8004ff6:	22d0      	movs	r2, #208	; 0xd0
 8004ff8:	1812      	adds	r2, r2, r0
 8004ffa:	19d2      	adds	r2, r2, r7
 8004ffc:	6812      	ldr	r2, [r2, #0]
 8004ffe:	21c8      	movs	r1, #200	; 0xc8
 8005000:	0004      	movs	r4, r0
 8005002:	1808      	adds	r0, r1, r0
 8005004:	19c0      	adds	r0, r0, r7
 8005006:	6002      	str	r2, [r0, #0]
			crcResult = GetCrc16(tempPtr,
 8005008:	26ce      	movs	r6, #206	; 0xce
 800500a:	0020      	movs	r0, r4
 800500c:	1832      	adds	r2, r6, r0
 800500e:	19d4      	adds	r4, r2, r7
 8005010:	180a      	adds	r2, r1, r0
 8005012:	19d2      	adds	r2, r2, r7
 8005014:	6812      	ldr	r2, [r2, #0]
 8005016:	0019      	movs	r1, r3
 8005018:	0010      	movs	r0, r2
 800501a:	f001 fbf9 	bl	8006810 <GetCrc16>
 800501e:	0003      	movs	r3, r0
 8005020:	8023      	strh	r3, [r4, #0]
					sizeof(tempCrcData) / sizeof(tempCrcData[0]));
			uint16_t checker = responseBuffer[0][c + 1];
 8005022:	2418      	movs	r4, #24
 8005024:	192b      	adds	r3, r5, r4
 8005026:	19db      	adds	r3, r3, r7
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	3301      	adds	r3, #1
 800502c:	4a37      	ldr	r2, [pc, #220]	; (800510c <HAL_TIM_PeriodElapsedCallback+0x240>)
 800502e:	5cd2      	ldrb	r2, [r2, r3]
 8005030:	20c6      	movs	r0, #198	; 0xc6
 8005032:	1903      	adds	r3, r0, r4
 8005034:	19db      	adds	r3, r3, r7
 8005036:	801a      	strh	r2, [r3, #0]
			checker = checker << 8 | responseBuffer[0][c + 2];
 8005038:	1903      	adds	r3, r0, r4
 800503a:	19db      	adds	r3, r3, r7
 800503c:	881b      	ldrh	r3, [r3, #0]
 800503e:	021b      	lsls	r3, r3, #8
 8005040:	b21a      	sxth	r2, r3
 8005042:	192b      	adds	r3, r5, r4
 8005044:	19db      	adds	r3, r3, r7
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	3302      	adds	r3, #2
 800504a:	4930      	ldr	r1, [pc, #192]	; (800510c <HAL_TIM_PeriodElapsedCallback+0x240>)
 800504c:	5ccb      	ldrb	r3, [r1, r3]
 800504e:	b21b      	sxth	r3, r3
 8005050:	4313      	orrs	r3, r2
 8005052:	b21a      	sxth	r2, r3
 8005054:	1903      	adds	r3, r0, r4
 8005056:	19db      	adds	r3, r3, r7
 8005058:	801a      	strh	r2, [r3, #0]
			if (crcResult == checker) {
 800505a:	1933      	adds	r3, r6, r4
 800505c:	19da      	adds	r2, r3, r7
 800505e:	1903      	adds	r3, r0, r4
 8005060:	19db      	adds	r3, r3, r7
 8005062:	8812      	ldrh	r2, [r2, #0]
 8005064:	881b      	ldrh	r3, [r3, #0]
 8005066:	429a      	cmp	r2, r3
 8005068:	d10a      	bne.n	8005080 <HAL_TIM_PeriodElapsedCallback+0x1b4>
				if (responseBuffer[0][3] == 1 || responseBuffer[0][3] == 0x13) {
 800506a:	4b28      	ldr	r3, [pc, #160]	; (800510c <HAL_TIM_PeriodElapsedCallback+0x240>)
 800506c:	78db      	ldrb	r3, [r3, #3]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d003      	beq.n	800507a <HAL_TIM_PeriodElapsedCallback+0x1ae>
 8005072:	4b26      	ldr	r3, [pc, #152]	; (800510c <HAL_TIM_PeriodElapsedCallback+0x240>)
 8005074:	78db      	ldrb	r3, [r3, #3]
 8005076:	2b13      	cmp	r3, #19
 8005078:	d102      	bne.n	8005080 <HAL_TIM_PeriodElapsedCallback+0x1b4>
					isLoggedIn = 1;
 800507a:	4b25      	ldr	r3, [pc, #148]	; (8005110 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800507c:	2201      	movs	r2, #1
 800507e:	701a      	strb	r2, [r3, #0]
						// HAL_UART_Transmit(&huart4, "HB rec", sizeof("HB rec"),
						// 100);
					}
				}
			}
			HAL_TIM_Base_Stop_IT(&htim16);
 8005080:	4b21      	ldr	r3, [pc, #132]	; (8005108 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8005082:	0018      	movs	r0, r3
 8005084:	f006 fb70 	bl	800b768 <HAL_TIM_Base_Stop_IT>
			memset(responseBuffer, 0, sizeof(responseBuffer));
 8005088:	2396      	movs	r3, #150	; 0x96
 800508a:	005a      	lsls	r2, r3, #1
 800508c:	4b1f      	ldr	r3, [pc, #124]	; (800510c <HAL_TIM_PeriodElapsedCallback+0x240>)
 800508e:	2100      	movs	r1, #0
 8005090:	0018      	movs	r0, r3
 8005092:	f009 fa7c 	bl	800e58e <memset>
			lineCount = 0;
 8005096:	4b1f      	ldr	r3, [pc, #124]	; (8005114 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8005098:	2200      	movs	r2, #0
 800509a:	701a      	strb	r2, [r3, #0]
			charCount = 0;
 800509c:	4b1e      	ldr	r3, [pc, #120]	; (8005118 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800509e:	2200      	movs	r2, #0
 80050a0:	701a      	strb	r2, [r3, #0]
			isStart = 0;
 80050a2:	4b1e      	ldr	r3, [pc, #120]	; (800511c <HAL_TIM_PeriodElapsedCallback+0x250>)
 80050a4:	2200      	movs	r2, #0
 80050a6:	701a      	strb	r2, [r3, #0]
 80050a8:	46c5      	mov	sp, r8
		if (responseBuffer[0][0] == 0x78 && responseBuffer[0][1] == 0x78) {
 80050aa:	e22f      	b.n	800550c <HAL_TIM_PeriodElapsedCallback+0x640>
		} else {
			uint8_t tLine = 99;
 80050ac:	231e      	movs	r3, #30
 80050ae:	33ff      	adds	r3, #255	; 0xff
 80050b0:	18fb      	adds	r3, r7, r3
 80050b2:	2263      	movs	r2, #99	; 0x63
 80050b4:	701a      	strb	r2, [r3, #0]
			char *ptr;
			uint8_t tIndex;
			//message handling here------------------------------------------
			for (uint8_t i = 0; i <= RESPONSE_MAX_LINE; i++) {
 80050b6:	238e      	movs	r3, #142	; 0x8e
 80050b8:	005b      	lsls	r3, r3, #1
 80050ba:	18fb      	adds	r3, r7, r3
 80050bc:	2200      	movs	r2, #0
 80050be:	701a      	strb	r2, [r3, #0]
 80050c0:	e037      	b.n	8005132 <HAL_TIM_PeriodElapsedCallback+0x266>
				ptr = strstr(responseBuffer[i], "+CMT:");
 80050c2:	248e      	movs	r4, #142	; 0x8e
 80050c4:	0064      	lsls	r4, r4, #1
 80050c6:	193b      	adds	r3, r7, r4
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	2232      	movs	r2, #50	; 0x32
 80050cc:	435a      	muls	r2, r3
 80050ce:	4b0f      	ldr	r3, [pc, #60]	; (800510c <HAL_TIM_PeriodElapsedCallback+0x240>)
 80050d0:	18d3      	adds	r3, r2, r3
 80050d2:	4a13      	ldr	r2, [pc, #76]	; (8005120 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80050d4:	0011      	movs	r1, r2
 80050d6:	0018      	movs	r0, r3
 80050d8:	f009 fab1 	bl	800e63e <strstr>
 80050dc:	0003      	movs	r3, r0
 80050de:	22c0      	movs	r2, #192	; 0xc0
 80050e0:	2018      	movs	r0, #24
 80050e2:	1811      	adds	r1, r2, r0
 80050e4:	19c9      	adds	r1, r1, r7
 80050e6:	600b      	str	r3, [r1, #0]
				if (ptr != NULL) {
 80050e8:	1813      	adds	r3, r2, r0
 80050ea:	19db      	adds	r3, r3, r7
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d018      	beq.n	8005124 <HAL_TIM_PeriodElapsedCallback+0x258>
					tLine = i;
 80050f2:	231e      	movs	r3, #30
 80050f4:	33ff      	adds	r3, #255	; 0xff
 80050f6:	18fb      	adds	r3, r7, r3
 80050f8:	193a      	adds	r2, r7, r4
 80050fa:	7812      	ldrb	r2, [r2, #0]
 80050fc:	701a      	strb	r2, [r3, #0]
					break;
 80050fe:	e01e      	b.n	800513e <HAL_TIM_PeriodElapsedCallback+0x272>
 8005100:	20000368 	.word	0x20000368
 8005104:	50000400 	.word	0x50000400
 8005108:	200003b4 	.word	0x200003b4
 800510c:	2000071c 	.word	0x2000071c
 8005110:	20000d41 	.word	0x20000d41
 8005114:	20000848 	.word	0x20000848
 8005118:	20000849 	.word	0x20000849
 800511c:	2000084c 	.word	0x2000084c
 8005120:	08012a64 	.word	0x08012a64
			for (uint8_t i = 0; i <= RESPONSE_MAX_LINE; i++) {
 8005124:	218e      	movs	r1, #142	; 0x8e
 8005126:	0049      	lsls	r1, r1, #1
 8005128:	187b      	adds	r3, r7, r1
 800512a:	781a      	ldrb	r2, [r3, #0]
 800512c:	187b      	adds	r3, r7, r1
 800512e:	3201      	adds	r2, #1
 8005130:	701a      	strb	r2, [r3, #0]
 8005132:	238e      	movs	r3, #142	; 0x8e
 8005134:	005b      	lsls	r3, r3, #1
 8005136:	18fb      	adds	r3, r7, r3
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	2b06      	cmp	r3, #6
 800513c:	d9c1      	bls.n	80050c2 <HAL_TIM_PeriodElapsedCallback+0x1f6>
				}
			}
			if (tLine != 99) {
 800513e:	261e      	movs	r6, #30
 8005140:	36ff      	adds	r6, #255	; 0xff
 8005142:	19bb      	adds	r3, r7, r6
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	2b63      	cmp	r3, #99	; 0x63
 8005148:	d100      	bne.n	800514c <HAL_TIM_PeriodElapsedCallback+0x280>
 800514a:	e1df      	b.n	800550c <HAL_TIM_PeriodElapsedCallback+0x640>
				//some message is received!!!.
				//---check the sender's number.
				char sender[50];
				memset(sender, 0, sizeof(sender));
 800514c:	2408      	movs	r4, #8
 800514e:	2518      	movs	r5, #24
 8005150:	1963      	adds	r3, r4, r5
 8005152:	19db      	adds	r3, r3, r7
 8005154:	2232      	movs	r2, #50	; 0x32
 8005156:	2100      	movs	r1, #0
 8005158:	0018      	movs	r0, r3
 800515a:	f009 fa18 	bl	800e58e <memset>
				ptr = strchr(responseBuffer[tLine], '\"');
 800515e:	19bb      	adds	r3, r7, r6
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	2232      	movs	r2, #50	; 0x32
 8005164:	435a      	muls	r2, r3
 8005166:	4bd1      	ldr	r3, [pc, #836]	; (80054ac <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 8005168:	18d3      	adds	r3, r2, r3
 800516a:	2122      	movs	r1, #34	; 0x22
 800516c:	0018      	movs	r0, r3
 800516e:	f009 fa44 	bl	800e5fa <strchr>
 8005172:	0003      	movs	r3, r0
 8005174:	21c0      	movs	r1, #192	; 0xc0
 8005176:	0028      	movs	r0, r5
 8005178:	180a      	adds	r2, r1, r0
 800517a:	19d2      	adds	r2, r2, r7
 800517c:	6013      	str	r3, [r2, #0]
				if (ptr != NULL) {
 800517e:	180b      	adds	r3, r1, r0
 8005180:	19db      	adds	r3, r3, r7
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d100      	bne.n	800518a <HAL_TIM_PeriodElapsedCallback+0x2be>
 8005188:	e1c0      	b.n	800550c <HAL_TIM_PeriodElapsedCallback+0x640>
					tIndex = ptr - (char) responseBuffer[tLine];
 800518a:	19bb      	adds	r3, r7, r6
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	2232      	movs	r2, #50	; 0x32
 8005190:	435a      	muls	r2, r3
 8005192:	4bc6      	ldr	r3, [pc, #792]	; (80054ac <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 8005194:	18d3      	adds	r3, r2, r3
 8005196:	b2db      	uxtb	r3, r3
 8005198:	425b      	negs	r3, r3
 800519a:	0005      	movs	r5, r0
 800519c:	194a      	adds	r2, r1, r5
 800519e:	19d2      	adds	r2, r2, r7
 80051a0:	6812      	ldr	r2, [r2, #0]
 80051a2:	18d3      	adds	r3, r2, r3
 80051a4:	001a      	movs	r2, r3
 80051a6:	20bf      	movs	r0, #191	; 0xbf
 80051a8:	1943      	adds	r3, r0, r5
 80051aa:	19db      	adds	r3, r3, r7
 80051ac:	701a      	strb	r2, [r3, #0]
					substring(sender, responseBuffer[tLine], tIndex + 1, 13);
 80051ae:	19bb      	adds	r3, r7, r6
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	2232      	movs	r2, #50	; 0x32
 80051b4:	435a      	muls	r2, r3
 80051b6:	4bbd      	ldr	r3, [pc, #756]	; (80054ac <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 80051b8:	18d1      	adds	r1, r2, r3
 80051ba:	1942      	adds	r2, r0, r5
 80051bc:	19d3      	adds	r3, r2, r7
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	3301      	adds	r3, #1
 80051c2:	b2da      	uxtb	r2, r3
 80051c4:	002e      	movs	r6, r5
 80051c6:	19a0      	adds	r0, r4, r6
 80051c8:	19c0      	adds	r0, r0, r7
 80051ca:	230d      	movs	r3, #13
 80051cc:	f002 f876 	bl	80072bc <substring>
					substring(sender, sender, 3, 10);
 80051d0:	19a2      	adds	r2, r4, r6
 80051d2:	19d1      	adds	r1, r2, r7
 80051d4:	19a2      	adds	r2, r4, r6
 80051d6:	19d0      	adds	r0, r2, r7
 80051d8:	230a      	movs	r3, #10
 80051da:	2203      	movs	r2, #3
 80051dc:	f002 f86e 	bl	80072bc <substring>
					uint8_t isOwner = 0;
 80051e0:	25be      	movs	r5, #190	; 0xbe
 80051e2:	19aa      	adds	r2, r5, r6
 80051e4:	19d3      	adds	r3, r2, r7
 80051e6:	2200      	movs	r2, #0
 80051e8:	701a      	strb	r2, [r3, #0]
					isOwner = !strcmp(sender, validSender); //check if sender's number is an owner?
 80051ea:	4ab1      	ldr	r2, [pc, #708]	; (80054b0 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 80051ec:	19a1      	adds	r1, r4, r6
 80051ee:	19cb      	adds	r3, r1, r7
 80051f0:	0011      	movs	r1, r2
 80051f2:	0018      	movs	r0, r3
 80051f4:	f7fa ff84 	bl	8000100 <strcmp>
 80051f8:	0003      	movs	r3, r0
 80051fa:	425a      	negs	r2, r3
 80051fc:	4153      	adcs	r3, r2
 80051fe:	b2da      	uxtb	r2, r3
 8005200:	19a9      	adds	r1, r5, r6
 8005202:	19cb      	adds	r3, r1, r7
 8005204:	701a      	strb	r2, [r3, #0]
					//---check the message content for any command. (*auto# for example)
					uint8_t ind1;
					uint8_t ind2; //command length.
					char *x;
					char sCommand[MAX_COMMAND_LEN];
					x = strchr(responseBuffer[tLine + 1], '*');
 8005206:	231e      	movs	r3, #30
 8005208:	33ff      	adds	r3, #255	; 0xff
 800520a:	18fb      	adds	r3, r7, r3
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	3301      	adds	r3, #1
 8005210:	2232      	movs	r2, #50	; 0x32
 8005212:	435a      	muls	r2, r3
 8005214:	4ba5      	ldr	r3, [pc, #660]	; (80054ac <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 8005216:	18d3      	adds	r3, r2, r3
 8005218:	212a      	movs	r1, #42	; 0x2a
 800521a:	0018      	movs	r0, r3
 800521c:	f009 f9ed 	bl	800e5fa <strchr>
 8005220:	0003      	movs	r3, r0
 8005222:	24b8      	movs	r4, #184	; 0xb8
 8005224:	0035      	movs	r5, r6
 8005226:	1962      	adds	r2, r4, r5
 8005228:	19d2      	adds	r2, r2, r7
 800522a:	6013      	str	r3, [r2, #0]
					if (x != NULL) {
 800522c:	1962      	adds	r2, r4, r5
 800522e:	19d3      	adds	r3, r2, r7
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d100      	bne.n	8005238 <HAL_TIM_PeriodElapsedCallback+0x36c>
 8005236:	e169      	b.n	800550c <HAL_TIM_PeriodElapsedCallback+0x640>
						char *y;
						y = strchr(responseBuffer[tLine + 1], '#');
 8005238:	261e      	movs	r6, #30
 800523a:	36ff      	adds	r6, #255	; 0xff
 800523c:	19bb      	adds	r3, r7, r6
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	3301      	adds	r3, #1
 8005242:	2232      	movs	r2, #50	; 0x32
 8005244:	435a      	muls	r2, r3
 8005246:	4b99      	ldr	r3, [pc, #612]	; (80054ac <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 8005248:	18d3      	adds	r3, r2, r3
 800524a:	2123      	movs	r1, #35	; 0x23
 800524c:	0018      	movs	r0, r3
 800524e:	f009 f9d4 	bl	800e5fa <strchr>
 8005252:	0003      	movs	r3, r0
 8005254:	21b4      	movs	r1, #180	; 0xb4
 8005256:	0028      	movs	r0, r5
 8005258:	180a      	adds	r2, r1, r0
 800525a:	19d2      	adds	r2, r2, r7
 800525c:	6013      	str	r3, [r2, #0]
						if (y != NULL) {
 800525e:	180b      	adds	r3, r1, r0
 8005260:	19db      	adds	r3, r3, r7
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d100      	bne.n	800526a <HAL_TIM_PeriodElapsedCallback+0x39e>
 8005268:	e150      	b.n	800550c <HAL_TIM_PeriodElapsedCallback+0x640>
							// HAL_UART_Transmit(&huart4, "command rec",
							// sizeof("command rec"), 100);

							//command found!!!
							//---extract the command.
							ind1 = x - (char) responseBuffer[tLine + 1] + 1;
 800526a:	19bb      	adds	r3, r7, r6
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	3301      	adds	r3, #1
 8005270:	2232      	movs	r2, #50	; 0x32
 8005272:	435a      	muls	r2, r3
 8005274:	4b8d      	ldr	r3, [pc, #564]	; (80054ac <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 8005276:	18d3      	adds	r3, r2, r3
 8005278:	b2db      	uxtb	r3, r3
 800527a:	001a      	movs	r2, r3
 800527c:	2301      	movs	r3, #1
 800527e:	1a9b      	subs	r3, r3, r2
 8005280:	0005      	movs	r5, r0
 8005282:	1822      	adds	r2, r4, r0
 8005284:	19d2      	adds	r2, r2, r7
 8005286:	6812      	ldr	r2, [r2, #0]
 8005288:	18d3      	adds	r3, r2, r3
 800528a:	001a      	movs	r2, r3
 800528c:	20b3      	movs	r0, #179	; 0xb3
 800528e:	002c      	movs	r4, r5
 8005290:	1903      	adds	r3, r0, r4
 8005292:	19db      	adds	r3, r3, r7
 8005294:	701a      	strb	r2, [r3, #0]
							ind2 = y - (char) responseBuffer[tLine + 1] - 1;
 8005296:	0035      	movs	r5, r6
 8005298:	197b      	adds	r3, r7, r5
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	3301      	adds	r3, #1
 800529e:	2232      	movs	r2, #50	; 0x32
 80052a0:	435a      	muls	r2, r3
 80052a2:	4b82      	ldr	r3, [pc, #520]	; (80054ac <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 80052a4:	18d3      	adds	r3, r2, r3
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	43db      	mvns	r3, r3
 80052aa:	190a      	adds	r2, r1, r4
 80052ac:	19d2      	adds	r2, r2, r7
 80052ae:	6812      	ldr	r2, [r2, #0]
 80052b0:	18d3      	adds	r3, r2, r3
 80052b2:	001a      	movs	r2, r3
 80052b4:	26b2      	movs	r6, #178	; 0xb2
 80052b6:	1933      	adds	r3, r6, r4
 80052b8:	19db      	adds	r3, r3, r7
 80052ba:	701a      	strb	r2, [r3, #0]
							substring(sCommand, responseBuffer[tLine + 1], ind1,
 80052bc:	197b      	adds	r3, r7, r5
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	3301      	adds	r3, #1
 80052c2:	2232      	movs	r2, #50	; 0x32
 80052c4:	435a      	muls	r2, r3
 80052c6:	4b79      	ldr	r3, [pc, #484]	; (80054ac <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 80052c8:	18d1      	adds	r1, r2, r3
 80052ca:	0022      	movs	r2, r4
 80052cc:	1933      	adds	r3, r6, r4
 80052ce:	19db      	adds	r3, r3, r7
 80052d0:	781c      	ldrb	r4, [r3, #0]
 80052d2:	1880      	adds	r0, r0, r2
 80052d4:	19c3      	adds	r3, r0, r7
 80052d6:	781a      	ldrb	r2, [r3, #0]
 80052d8:	2548      	movs	r5, #72	; 0x48
 80052da:	2318      	movs	r3, #24
 80052dc:	18e8      	adds	r0, r5, r3
 80052de:	19c0      	adds	r0, r0, r7
 80052e0:	0023      	movs	r3, r4
 80052e2:	f001 ffeb 	bl	80072bc <substring>
							//--->RES0 = reset user PIN and registered NUMBER
							//--->RNUM3322336979xxxx = register new owner's number
							//--->RPIN = set new pin
							//--->WHERE
							//
							if (sCommand[0] == 'R' && sCommand[1] == 'E'
 80052e6:	002a      	movs	r2, r5
 80052e8:	2118      	movs	r1, #24
 80052ea:	1853      	adds	r3, r2, r1
 80052ec:	19db      	adds	r3, r3, r7
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	2b52      	cmp	r3, #82	; 0x52
 80052f2:	d122      	bne.n	800533a <HAL_TIM_PeriodElapsedCallback+0x46e>
 80052f4:	1853      	adds	r3, r2, r1
 80052f6:	19db      	adds	r3, r3, r7
 80052f8:	785b      	ldrb	r3, [r3, #1]
 80052fa:	2b45      	cmp	r3, #69	; 0x45
 80052fc:	d11d      	bne.n	800533a <HAL_TIM_PeriodElapsedCallback+0x46e>
									&& sCommand[2] == 'S' && sCommand[3] == '0'
 80052fe:	1853      	adds	r3, r2, r1
 8005300:	19db      	adds	r3, r3, r7
 8005302:	789b      	ldrb	r3, [r3, #2]
 8005304:	2b53      	cmp	r3, #83	; 0x53
 8005306:	d118      	bne.n	800533a <HAL_TIM_PeriodElapsedCallback+0x46e>
 8005308:	1853      	adds	r3, r2, r1
 800530a:	19db      	adds	r3, r3, r7
 800530c:	78db      	ldrb	r3, [r3, #3]
 800530e:	2b30      	cmp	r3, #48	; 0x30
 8005310:	d113      	bne.n	800533a <HAL_TIM_PeriodElapsedCallback+0x46e>
											&& ind2 == 4) {
 8005312:	1873      	adds	r3, r6, r1
 8005314:	19db      	adds	r3, r3, r7
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	2b04      	cmp	r3, #4
 800531a:	d10e      	bne.n	800533a <HAL_TIM_PeriodElapsedCallback+0x46e>
								//--- reset command received.
								cPin[0] = '1';
 800531c:	4b65      	ldr	r3, [pc, #404]	; (80054b4 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 800531e:	2231      	movs	r2, #49	; 0x31
 8005320:	701a      	strb	r2, [r3, #0]
								cPin[1] = '2';
 8005322:	4b64      	ldr	r3, [pc, #400]	; (80054b4 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8005324:	2232      	movs	r2, #50	; 0x32
 8005326:	705a      	strb	r2, [r3, #1]
								cPin[2] = '3';
 8005328:	4b62      	ldr	r3, [pc, #392]	; (80054b4 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 800532a:	2233      	movs	r2, #51	; 0x33
 800532c:	709a      	strb	r2, [r3, #2]
								cPin[3] = '4';
 800532e:	4b61      	ldr	r3, [pc, #388]	; (80054b4 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8005330:	2234      	movs	r2, #52	; 0x34
 8005332:	70da      	strb	r2, [r3, #3]
								//---saving to flash memory
								save_to_flash();
 8005334:	f000 ffcc 	bl	80062d0 <save_to_flash>
											&& ind2 == 4) {
 8005338:	e0e8      	b.n	800550c <HAL_TIM_PeriodElapsedCallback+0x640>
								//printf("Reset Completed\n");
							} else if (sCommand[0] == 'R' && sCommand[1] == 'N'
 800533a:	2248      	movs	r2, #72	; 0x48
 800533c:	2018      	movs	r0, #24
 800533e:	1813      	adds	r3, r2, r0
 8005340:	19db      	adds	r3, r3, r7
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	2b52      	cmp	r3, #82	; 0x52
 8005346:	d15a      	bne.n	80053fe <HAL_TIM_PeriodElapsedCallback+0x532>
 8005348:	1813      	adds	r3, r2, r0
 800534a:	19db      	adds	r3, r3, r7
 800534c:	785b      	ldrb	r3, [r3, #1]
 800534e:	2b4e      	cmp	r3, #78	; 0x4e
 8005350:	d155      	bne.n	80053fe <HAL_TIM_PeriodElapsedCallback+0x532>
									&& sCommand[2] == 'U' && sCommand[3] == 'M'
 8005352:	1813      	adds	r3, r2, r0
 8005354:	19db      	adds	r3, r3, r7
 8005356:	789b      	ldrb	r3, [r3, #2]
 8005358:	2b55      	cmp	r3, #85	; 0x55
 800535a:	d150      	bne.n	80053fe <HAL_TIM_PeriodElapsedCallback+0x532>
 800535c:	1813      	adds	r3, r2, r0
 800535e:	19db      	adds	r3, r3, r7
 8005360:	78db      	ldrb	r3, [r3, #3]
 8005362:	2b4d      	cmp	r3, #77	; 0x4d
 8005364:	d14b      	bne.n	80053fe <HAL_TIM_PeriodElapsedCallback+0x532>
											&& ind2 == 18) {
 8005366:	23b2      	movs	r3, #178	; 0xb2
 8005368:	181b      	adds	r3, r3, r0
 800536a:	19db      	adds	r3, r3, r7
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	2b12      	cmp	r3, #18
 8005370:	d145      	bne.n	80053fe <HAL_TIM_PeriodElapsedCallback+0x532>
								// HAL_UART_Transmit(&huart4, "RNUM inside\n", 12,
								// 100);
								//---owner number registration command received
								//printf("number registration command received\n");
								if (sCommand[14] == cPin[0]
 8005372:	0011      	movs	r1, r2
 8005374:	180b      	adds	r3, r1, r0
 8005376:	19db      	adds	r3, r3, r7
 8005378:	7b9a      	ldrb	r2, [r3, #14]
 800537a:	4b4e      	ldr	r3, [pc, #312]	; (80054b4 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	429a      	cmp	r2, r3
 8005380:	d000      	beq.n	8005384 <HAL_TIM_PeriodElapsedCallback+0x4b8>
 8005382:	e0c0      	b.n	8005506 <HAL_TIM_PeriodElapsedCallback+0x63a>
									&& sCommand[15] == cPin[1]
 8005384:	180b      	adds	r3, r1, r0
 8005386:	19db      	adds	r3, r3, r7
 8005388:	7bda      	ldrb	r2, [r3, #15]
 800538a:	4b4a      	ldr	r3, [pc, #296]	; (80054b4 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 800538c:	785b      	ldrb	r3, [r3, #1]
 800538e:	429a      	cmp	r2, r3
 8005390:	d000      	beq.n	8005394 <HAL_TIM_PeriodElapsedCallback+0x4c8>
 8005392:	e0b8      	b.n	8005506 <HAL_TIM_PeriodElapsedCallback+0x63a>
									&& sCommand[16] == cPin[2]
 8005394:	180b      	adds	r3, r1, r0
 8005396:	19db      	adds	r3, r3, r7
 8005398:	7c1a      	ldrb	r2, [r3, #16]
 800539a:	4b46      	ldr	r3, [pc, #280]	; (80054b4 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 800539c:	789b      	ldrb	r3, [r3, #2]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d000      	beq.n	80053a4 <HAL_TIM_PeriodElapsedCallback+0x4d8>
 80053a2:	e0b0      	b.n	8005506 <HAL_TIM_PeriodElapsedCallback+0x63a>
									&& sCommand[17] == cPin[3]) {
 80053a4:	180b      	adds	r3, r1, r0
 80053a6:	19db      	adds	r3, r3, r7
 80053a8:	7c5a      	ldrb	r2, [r3, #17]
 80053aa:	4b42      	ldr	r3, [pc, #264]	; (80054b4 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 80053ac:	78db      	ldrb	r3, [r3, #3]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d000      	beq.n	80053b4 <HAL_TIM_PeriodElapsedCallback+0x4e8>
 80053b2:	e0a8      	b.n	8005506 <HAL_TIM_PeriodElapsedCallback+0x63a>
									//PIN is valid!!!
									//---register new number
									for (uint8_t m = 0; m < 10; m++) {
 80053b4:	231c      	movs	r3, #28
 80053b6:	33ff      	adds	r3, #255	; 0xff
 80053b8:	18fb      	adds	r3, r7, r3
 80053ba:	2200      	movs	r2, #0
 80053bc:	701a      	strb	r2, [r3, #0]
 80053be:	e012      	b.n	80053e6 <HAL_TIM_PeriodElapsedCallback+0x51a>
										validSender[m] = sCommand[m + 4];
 80053c0:	201c      	movs	r0, #28
 80053c2:	30ff      	adds	r0, #255	; 0xff
 80053c4:	183b      	adds	r3, r7, r0
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	1d1a      	adds	r2, r3, #4
 80053ca:	183b      	adds	r3, r7, r0
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	2148      	movs	r1, #72	; 0x48
 80053d0:	2418      	movs	r4, #24
 80053d2:	1909      	adds	r1, r1, r4
 80053d4:	19c9      	adds	r1, r1, r7
 80053d6:	5c89      	ldrb	r1, [r1, r2]
 80053d8:	4a35      	ldr	r2, [pc, #212]	; (80054b0 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 80053da:	54d1      	strb	r1, [r2, r3]
									for (uint8_t m = 0; m < 10; m++) {
 80053dc:	183b      	adds	r3, r7, r0
 80053de:	781a      	ldrb	r2, [r3, #0]
 80053e0:	183b      	adds	r3, r7, r0
 80053e2:	3201      	adds	r2, #1
 80053e4:	701a      	strb	r2, [r3, #0]
 80053e6:	231c      	movs	r3, #28
 80053e8:	33ff      	adds	r3, #255	; 0xff
 80053ea:	18fb      	adds	r3, r7, r3
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	2b09      	cmp	r3, #9
 80053f0:	d9e6      	bls.n	80053c0 <HAL_TIM_PeriodElapsedCallback+0x4f4>
									}
									save_to_flash();
 80053f2:	f000 ff6d 	bl	80062d0 <save_to_flash>
									isSMSActive=1;
 80053f6:	4b30      	ldr	r3, [pc, #192]	; (80054b8 <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 80053f8:	2201      	movs	r2, #1
 80053fa:	701a      	strb	r2, [r3, #0]
								if (sCommand[14] == cPin[0]
 80053fc:	e083      	b.n	8005506 <HAL_TIM_PeriodElapsedCallback+0x63a>
									// HAL_UART_Transmit(&huart4, "WRONGPIN\n", 9,
									// 100);
									// incorrect pin, send message (incoorect pin),(todo)
									// *future* stop sending message after 3 fails
								}
							} else if (sCommand[0] == 'R' && sCommand[1] == 'P'
 80053fe:	2248      	movs	r2, #72	; 0x48
 8005400:	2018      	movs	r0, #24
 8005402:	1813      	adds	r3, r2, r0
 8005404:	19db      	adds	r3, r3, r7
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	2b52      	cmp	r3, #82	; 0x52
 800540a:	d157      	bne.n	80054bc <HAL_TIM_PeriodElapsedCallback+0x5f0>
 800540c:	1813      	adds	r3, r2, r0
 800540e:	19db      	adds	r3, r3, r7
 8005410:	785b      	ldrb	r3, [r3, #1]
 8005412:	2b50      	cmp	r3, #80	; 0x50
 8005414:	d152      	bne.n	80054bc <HAL_TIM_PeriodElapsedCallback+0x5f0>
									&& sCommand[2] == 'I' && sCommand[3] == 'N'
 8005416:	1813      	adds	r3, r2, r0
 8005418:	19db      	adds	r3, r3, r7
 800541a:	789b      	ldrb	r3, [r3, #2]
 800541c:	2b49      	cmp	r3, #73	; 0x49
 800541e:	d14d      	bne.n	80054bc <HAL_TIM_PeriodElapsedCallback+0x5f0>
 8005420:	1813      	adds	r3, r2, r0
 8005422:	19db      	adds	r3, r3, r7
 8005424:	78db      	ldrb	r3, [r3, #3]
 8005426:	2b4e      	cmp	r3, #78	; 0x4e
 8005428:	d148      	bne.n	80054bc <HAL_TIM_PeriodElapsedCallback+0x5f0>
											&& ind2 == 12 && isOwner == 1) {
 800542a:	23b2      	movs	r3, #178	; 0xb2
 800542c:	181b      	adds	r3, r3, r0
 800542e:	19db      	adds	r3, r3, r7
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	2b0c      	cmp	r3, #12
 8005434:	d142      	bne.n	80054bc <HAL_TIM_PeriodElapsedCallback+0x5f0>
 8005436:	23be      	movs	r3, #190	; 0xbe
 8005438:	181b      	adds	r3, r3, r0
 800543a:	19db      	adds	r3, r3, r7
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	2b01      	cmp	r3, #1
 8005440:	d13c      	bne.n	80054bc <HAL_TIM_PeriodElapsedCallback+0x5f0>
								//---SET PIN command received from owner.
								// RPINxxxxNNNN
								//printf("set PIN command received\n");
								if (sCommand[4] == cPin[0]
 8005442:	0011      	movs	r1, r2
 8005444:	180b      	adds	r3, r1, r0
 8005446:	19db      	adds	r3, r3, r7
 8005448:	791a      	ldrb	r2, [r3, #4]
 800544a:	4b1a      	ldr	r3, [pc, #104]	; (80054b4 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	429a      	cmp	r2, r3
 8005450:	d15b      	bne.n	800550a <HAL_TIM_PeriodElapsedCallback+0x63e>
														&& sCommand[5] == cPin[1]
 8005452:	180b      	adds	r3, r1, r0
 8005454:	19db      	adds	r3, r3, r7
 8005456:	795a      	ldrb	r2, [r3, #5]
 8005458:	4b16      	ldr	r3, [pc, #88]	; (80054b4 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 800545a:	785b      	ldrb	r3, [r3, #1]
 800545c:	429a      	cmp	r2, r3
 800545e:	d154      	bne.n	800550a <HAL_TIM_PeriodElapsedCallback+0x63e>
																			   && sCommand[6] == cPin[2]
 8005460:	180b      	adds	r3, r1, r0
 8005462:	19db      	adds	r3, r3, r7
 8005464:	799a      	ldrb	r2, [r3, #6]
 8005466:	4b13      	ldr	r3, [pc, #76]	; (80054b4 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8005468:	789b      	ldrb	r3, [r3, #2]
 800546a:	429a      	cmp	r2, r3
 800546c:	d14d      	bne.n	800550a <HAL_TIM_PeriodElapsedCallback+0x63e>
																									  && sCommand[7] == cPin[3]) {
 800546e:	180b      	adds	r3, r1, r0
 8005470:	19db      	adds	r3, r3, r7
 8005472:	79da      	ldrb	r2, [r3, #7]
 8005474:	4b0f      	ldr	r3, [pc, #60]	; (80054b4 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8005476:	78db      	ldrb	r3, [r3, #3]
 8005478:	429a      	cmp	r2, r3
 800547a:	d146      	bne.n	800550a <HAL_TIM_PeriodElapsedCallback+0x63e>
									//old PIN is valid!!!
									//---set new pin
									cPin[0] = sCommand[8];
 800547c:	180b      	adds	r3, r1, r0
 800547e:	19db      	adds	r3, r3, r7
 8005480:	7a1a      	ldrb	r2, [r3, #8]
 8005482:	4b0c      	ldr	r3, [pc, #48]	; (80054b4 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8005484:	701a      	strb	r2, [r3, #0]
									cPin[1] = sCommand[9];
 8005486:	180b      	adds	r3, r1, r0
 8005488:	19db      	adds	r3, r3, r7
 800548a:	7a5a      	ldrb	r2, [r3, #9]
 800548c:	4b09      	ldr	r3, [pc, #36]	; (80054b4 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 800548e:	705a      	strb	r2, [r3, #1]
									cPin[2] = sCommand[10];
 8005490:	180b      	adds	r3, r1, r0
 8005492:	19db      	adds	r3, r3, r7
 8005494:	7a9a      	ldrb	r2, [r3, #10]
 8005496:	4b07      	ldr	r3, [pc, #28]	; (80054b4 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8005498:	709a      	strb	r2, [r3, #2]
									cPin[3] = sCommand[11];
 800549a:	180b      	adds	r3, r1, r0
 800549c:	19db      	adds	r3, r3, r7
 800549e:	7ada      	ldrb	r2, [r3, #11]
 80054a0:	4b04      	ldr	r3, [pc, #16]	; (80054b4 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 80054a2:	70da      	strb	r2, [r3, #3]
									//---saving to flash memory
									save_to_flash();
 80054a4:	f000 ff14 	bl	80062d0 <save_to_flash>
								if (sCommand[4] == cPin[0]
 80054a8:	e02f      	b.n	800550a <HAL_TIM_PeriodElapsedCallback+0x63e>
 80054aa:	46c0      	nop			; (mov r8, r8)
 80054ac:	2000071c 	.word	0x2000071c
 80054b0:	20000000 	.word	0x20000000
 80054b4:	20000708 	.word	0x20000708
 80054b8:	20000700 	.word	0x20000700
									//printf("NEW PIN set \n");
								}
							} else if (sCommand[0] == 'W' && sCommand[1] == 'H'
 80054bc:	2248      	movs	r2, #72	; 0x48
 80054be:	2118      	movs	r1, #24
 80054c0:	1853      	adds	r3, r2, r1
 80054c2:	19db      	adds	r3, r3, r7
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	2b57      	cmp	r3, #87	; 0x57
 80054c8:	d120      	bne.n	800550c <HAL_TIM_PeriodElapsedCallback+0x640>
 80054ca:	1853      	adds	r3, r2, r1
 80054cc:	19db      	adds	r3, r3, r7
 80054ce:	785b      	ldrb	r3, [r3, #1]
 80054d0:	2b48      	cmp	r3, #72	; 0x48
 80054d2:	d11b      	bne.n	800550c <HAL_TIM_PeriodElapsedCallback+0x640>
									&& sCommand[2] == 'E' && sCommand[3] == 'R'
 80054d4:	1853      	adds	r3, r2, r1
 80054d6:	19db      	adds	r3, r3, r7
 80054d8:	789b      	ldrb	r3, [r3, #2]
 80054da:	2b45      	cmp	r3, #69	; 0x45
 80054dc:	d116      	bne.n	800550c <HAL_TIM_PeriodElapsedCallback+0x640>
 80054de:	1853      	adds	r3, r2, r1
 80054e0:	19db      	adds	r3, r3, r7
 80054e2:	78db      	ldrb	r3, [r3, #3]
 80054e4:	2b52      	cmp	r3, #82	; 0x52
 80054e6:	d111      	bne.n	800550c <HAL_TIM_PeriodElapsedCallback+0x640>
											&& sCommand[4] == 'E' && isOwner == 1) {
 80054e8:	1853      	adds	r3, r2, r1
 80054ea:	19db      	adds	r3, r3, r7
 80054ec:	791b      	ldrb	r3, [r3, #4]
 80054ee:	2b45      	cmp	r3, #69	; 0x45
 80054f0:	d10c      	bne.n	800550c <HAL_TIM_PeriodElapsedCallback+0x640>
 80054f2:	23be      	movs	r3, #190	; 0xbe
 80054f4:	185b      	adds	r3, r3, r1
 80054f6:	19db      	adds	r3, r3, r7
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d106      	bne.n	800550c <HAL_TIM_PeriodElapsedCallback+0x640>
								// HAL_UART_Transmit(&huart4, "where command",
								// sizeof("where command"), 100);
								isWhereApiCalled = 1;
 80054fe:	4bcd      	ldr	r3, [pc, #820]	; (8005834 <HAL_TIM_PeriodElapsedCallback+0x968>)
 8005500:	2201      	movs	r2, #1
 8005502:	701a      	strb	r2, [r3, #0]
 8005504:	e002      	b.n	800550c <HAL_TIM_PeriodElapsedCallback+0x640>
								if (sCommand[14] == cPin[0]
 8005506:	46c0      	nop			; (mov r8, r8)
 8005508:	e000      	b.n	800550c <HAL_TIM_PeriodElapsedCallback+0x640>
								if (sCommand[4] == cPin[0]
 800550a:	46c0      	nop			; (mov r8, r8)

				}

			}
		}
		if (commandCase == 0) {
 800550c:	4bca      	ldr	r3, [pc, #808]	; (8005838 <HAL_TIM_PeriodElapsedCallback+0x96c>)
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	b2db      	uxtb	r3, r3
 8005512:	2b00      	cmp	r3, #0
 8005514:	d169      	bne.n	80055ea <HAL_TIM_PeriodElapsedCallback+0x71e>
			char *ptr;
			char *ptr2;
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 8005516:	238d      	movs	r3, #141	; 0x8d
 8005518:	005b      	lsls	r3, r3, #1
 800551a:	18fb      	adds	r3, r7, r3
 800551c:	2200      	movs	r2, #0
 800551e:	701a      	strb	r2, [r3, #0]
 8005520:	e049      	b.n	80055b6 <HAL_TIM_PeriodElapsedCallback+0x6ea>
				ptr = strstr(responseBuffer[i], "CLOSED");
 8005522:	268d      	movs	r6, #141	; 0x8d
 8005524:	0076      	lsls	r6, r6, #1
 8005526:	19bb      	adds	r3, r7, r6
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	2232      	movs	r2, #50	; 0x32
 800552c:	435a      	muls	r2, r3
 800552e:	4bc3      	ldr	r3, [pc, #780]	; (800583c <HAL_TIM_PeriodElapsedCallback+0x970>)
 8005530:	18d3      	adds	r3, r2, r3
 8005532:	4ac3      	ldr	r2, [pc, #780]	; (8005840 <HAL_TIM_PeriodElapsedCallback+0x974>)
 8005534:	0011      	movs	r1, r2
 8005536:	0018      	movs	r0, r3
 8005538:	f009 f881 	bl	800e63e <strstr>
 800553c:	0003      	movs	r3, r0
 800553e:	24ac      	movs	r4, #172	; 0xac
 8005540:	2518      	movs	r5, #24
 8005542:	1962      	adds	r2, r4, r5
 8005544:	19d2      	adds	r2, r2, r7
 8005546:	6013      	str	r3, [r2, #0]
				ptr2 = strstr(responseBuffer[i], "+PDP DEACT");
 8005548:	19bb      	adds	r3, r7, r6
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	2232      	movs	r2, #50	; 0x32
 800554e:	435a      	muls	r2, r3
 8005550:	4bba      	ldr	r3, [pc, #744]	; (800583c <HAL_TIM_PeriodElapsedCallback+0x970>)
 8005552:	18d3      	adds	r3, r2, r3
 8005554:	4abb      	ldr	r2, [pc, #748]	; (8005844 <HAL_TIM_PeriodElapsedCallback+0x978>)
 8005556:	0011      	movs	r1, r2
 8005558:	0018      	movs	r0, r3
 800555a:	f009 f870 	bl	800e63e <strstr>
 800555e:	0003      	movs	r3, r0
 8005560:	22a8      	movs	r2, #168	; 0xa8
 8005562:	1952      	adds	r2, r2, r5
 8005564:	19d2      	adds	r2, r2, r7
 8005566:	6013      	str	r3, [r2, #0]
				if (ptr != NULL) {
 8005568:	1963      	adds	r3, r4, r5
 800556a:	19db      	adds	r3, r3, r7
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d009      	beq.n	8005586 <HAL_TIM_PeriodElapsedCallback+0x6ba>
					// HAL_UART_Transmit(&huart4, "closed recv",
					// sizeof("closed recv"), 100);

					isLoggedIn = 0;
 8005572:	4bb5      	ldr	r3, [pc, #724]	; (8005848 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8005574:	2200      	movs	r2, #0
 8005576:	701a      	strb	r2, [r3, #0]
					isDataMode = 0; //command mode activated
 8005578:	4bb4      	ldr	r3, [pc, #720]	; (800584c <HAL_TIM_PeriodElapsedCallback+0x980>)
 800557a:	2200      	movs	r2, #0
 800557c:	701a      	strb	r2, [r3, #0]
					isTcpOpen = 0;
 800557e:	4bb4      	ldr	r3, [pc, #720]	; (8005850 <HAL_TIM_PeriodElapsedCallback+0x984>)
 8005580:	2200      	movs	r2, #0
 8005582:	701a      	strb	r2, [r3, #0]
					break;
 8005584:	e01d      	b.n	80055c2 <HAL_TIM_PeriodElapsedCallback+0x6f6>
				}
				if (ptr2 != NULL) {
 8005586:	23a8      	movs	r3, #168	; 0xa8
 8005588:	2218      	movs	r2, #24
 800558a:	189b      	adds	r3, r3, r2
 800558c:	19db      	adds	r3, r3, r7
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d009      	beq.n	80055a8 <HAL_TIM_PeriodElapsedCallback+0x6dc>
					// HAL_UART_Transmit(&huart4, "pdp deact recv",
					// sizeof("pdp deact"), 100);
					isLoggedIn = 0;
 8005594:	4bac      	ldr	r3, [pc, #688]	; (8005848 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8005596:	2200      	movs	r2, #0
 8005598:	701a      	strb	r2, [r3, #0]
					isDataMode = 0; //command mode activated
 800559a:	4bac      	ldr	r3, [pc, #688]	; (800584c <HAL_TIM_PeriodElapsedCallback+0x980>)
 800559c:	2200      	movs	r2, #0
 800559e:	701a      	strb	r2, [r3, #0]
					isTcpOpen = 0;
 80055a0:	4bab      	ldr	r3, [pc, #684]	; (8005850 <HAL_TIM_PeriodElapsedCallback+0x984>)
 80055a2:	2200      	movs	r2, #0
 80055a4:	701a      	strb	r2, [r3, #0]
					break;
 80055a6:	e00c      	b.n	80055c2 <HAL_TIM_PeriodElapsedCallback+0x6f6>
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 80055a8:	218d      	movs	r1, #141	; 0x8d
 80055aa:	0049      	lsls	r1, r1, #1
 80055ac:	187b      	adds	r3, r7, r1
 80055ae:	781a      	ldrb	r2, [r3, #0]
 80055b0:	187b      	adds	r3, r7, r1
 80055b2:	3201      	adds	r2, #1
 80055b4:	701a      	strb	r2, [r3, #0]
 80055b6:	238d      	movs	r3, #141	; 0x8d
 80055b8:	005b      	lsls	r3, r3, #1
 80055ba:	18fb      	adds	r3, r7, r3
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	2b05      	cmp	r3, #5
 80055c0:	d9af      	bls.n	8005522 <HAL_TIM_PeriodElapsedCallback+0x656>
				}
			}
			HAL_TIM_Base_Stop_IT(&htim16);
 80055c2:	4ba4      	ldr	r3, [pc, #656]	; (8005854 <HAL_TIM_PeriodElapsedCallback+0x988>)
 80055c4:	0018      	movs	r0, r3
 80055c6:	f006 f8cf 	bl	800b768 <HAL_TIM_Base_Stop_IT>
			memset(responseBuffer, 0, sizeof(responseBuffer));
 80055ca:	2396      	movs	r3, #150	; 0x96
 80055cc:	005a      	lsls	r2, r3, #1
 80055ce:	4b9b      	ldr	r3, [pc, #620]	; (800583c <HAL_TIM_PeriodElapsedCallback+0x970>)
 80055d0:	2100      	movs	r1, #0
 80055d2:	0018      	movs	r0, r3
 80055d4:	f008 ffdb 	bl	800e58e <memset>
			lineCount = 0;
 80055d8:	4b9f      	ldr	r3, [pc, #636]	; (8005858 <HAL_TIM_PeriodElapsedCallback+0x98c>)
 80055da:	2200      	movs	r2, #0
 80055dc:	701a      	strb	r2, [r3, #0]
			charCount = 0;
 80055de:	4b9f      	ldr	r3, [pc, #636]	; (800585c <HAL_TIM_PeriodElapsedCallback+0x990>)
 80055e0:	2200      	movs	r2, #0
 80055e2:	701a      	strb	r2, [r3, #0]
			isStart = 0;
 80055e4:	4b9e      	ldr	r3, [pc, #632]	; (8005860 <HAL_TIM_PeriodElapsedCallback+0x994>)
 80055e6:	2200      	movs	r2, #0
 80055e8:	701a      	strb	r2, [r3, #0]
		}

		// }
		if (commandCase == 1) {
 80055ea:	4b93      	ldr	r3, [pc, #588]	; (8005838 <HAL_TIM_PeriodElapsedCallback+0x96c>)
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d000      	beq.n	80055f6 <HAL_TIM_PeriodElapsedCallback+0x72a>
 80055f4:	e0a3      	b.n	800573e <HAL_TIM_PeriodElapsedCallback+0x872>
			uint8_t tLine = 99;
 80055f6:	231a      	movs	r3, #26
 80055f8:	33ff      	adds	r3, #255	; 0xff
 80055fa:	18fb      	adds	r3, r7, r3
 80055fc:	2263      	movs	r2, #99	; 0x63
 80055fe:	701a      	strb	r2, [r3, #0]
			char *ptr;
			char *ptr2;
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 8005600:	238c      	movs	r3, #140	; 0x8c
 8005602:	005b      	lsls	r3, r3, #1
 8005604:	18fb      	adds	r3, r7, r3
 8005606:	2200      	movs	r2, #0
 8005608:	701a      	strb	r2, [r3, #0]
 800560a:	e04f      	b.n	80056ac <HAL_TIM_PeriodElapsedCallback+0x7e0>
				ptr = strstr(responseBuffer[i], "OK");
 800560c:	268c      	movs	r6, #140	; 0x8c
 800560e:	0076      	lsls	r6, r6, #1
 8005610:	19bb      	adds	r3, r7, r6
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	2232      	movs	r2, #50	; 0x32
 8005616:	435a      	muls	r2, r3
 8005618:	4b88      	ldr	r3, [pc, #544]	; (800583c <HAL_TIM_PeriodElapsedCallback+0x970>)
 800561a:	18d3      	adds	r3, r2, r3
 800561c:	4a91      	ldr	r2, [pc, #580]	; (8005864 <HAL_TIM_PeriodElapsedCallback+0x998>)
 800561e:	0011      	movs	r1, r2
 8005620:	0018      	movs	r0, r3
 8005622:	f009 f80c 	bl	800e63e <strstr>
 8005626:	0003      	movs	r3, r0
 8005628:	2480      	movs	r4, #128	; 0x80
 800562a:	2518      	movs	r5, #24
 800562c:	1962      	adds	r2, r4, r5
 800562e:	19d2      	adds	r2, r2, r7
 8005630:	6013      	str	r3, [r2, #0]
				ptr2 = strstr(responseBuffer[i], "ERROR");
 8005632:	19bb      	adds	r3, r7, r6
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	2232      	movs	r2, #50	; 0x32
 8005638:	435a      	muls	r2, r3
 800563a:	4b80      	ldr	r3, [pc, #512]	; (800583c <HAL_TIM_PeriodElapsedCallback+0x970>)
 800563c:	18d3      	adds	r3, r2, r3
 800563e:	4a8a      	ldr	r2, [pc, #552]	; (8005868 <HAL_TIM_PeriodElapsedCallback+0x99c>)
 8005640:	0011      	movs	r1, r2
 8005642:	0018      	movs	r0, r3
 8005644:	f008 fffb 	bl	800e63e <strstr>
 8005648:	0003      	movs	r3, r0
 800564a:	2294      	movs	r2, #148	; 0x94
 800564c:	18ba      	adds	r2, r7, r2
 800564e:	6013      	str	r3, [r2, #0]

				if (ptr != NULL) {
 8005650:	1963      	adds	r3, r4, r5
 8005652:	19db      	adds	r3, r3, r7
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00c      	beq.n	8005674 <HAL_TIM_PeriodElapsedCallback+0x7a8>
					tLine = i;
 800565a:	231a      	movs	r3, #26
 800565c:	33ff      	adds	r3, #255	; 0xff
 800565e:	18fb      	adds	r3, r7, r3
 8005660:	19ba      	adds	r2, r7, r6
 8005662:	7812      	ldrb	r2, [r2, #0]
 8005664:	701a      	strb	r2, [r3, #0]
					tResponse = 'G';
 8005666:	2308      	movs	r3, #8
 8005668:	33ff      	adds	r3, #255	; 0xff
 800566a:	195b      	adds	r3, r3, r5
 800566c:	19db      	adds	r3, r3, r7
 800566e:	2247      	movs	r2, #71	; 0x47
 8005670:	701a      	strb	r2, [r3, #0]
					break;
 8005672:	e021      	b.n	80056b8 <HAL_TIM_PeriodElapsedCallback+0x7ec>
				}
				if (ptr2 != NULL) {
 8005674:	2394      	movs	r3, #148	; 0x94
 8005676:	18fb      	adds	r3, r7, r3
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00f      	beq.n	800569e <HAL_TIM_PeriodElapsedCallback+0x7d2>
					tLine = i;
 800567e:	231a      	movs	r3, #26
 8005680:	33ff      	adds	r3, #255	; 0xff
 8005682:	18fb      	adds	r3, r7, r3
 8005684:	228c      	movs	r2, #140	; 0x8c
 8005686:	0052      	lsls	r2, r2, #1
 8005688:	18ba      	adds	r2, r7, r2
 800568a:	7812      	ldrb	r2, [r2, #0]
 800568c:	701a      	strb	r2, [r3, #0]
					tResponse = 'B';
 800568e:	2308      	movs	r3, #8
 8005690:	33ff      	adds	r3, #255	; 0xff
 8005692:	2218      	movs	r2, #24
 8005694:	189b      	adds	r3, r3, r2
 8005696:	19db      	adds	r3, r3, r7
 8005698:	2242      	movs	r2, #66	; 0x42
 800569a:	701a      	strb	r2, [r3, #0]
					break;
 800569c:	e00c      	b.n	80056b8 <HAL_TIM_PeriodElapsedCallback+0x7ec>
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 800569e:	218c      	movs	r1, #140	; 0x8c
 80056a0:	0049      	lsls	r1, r1, #1
 80056a2:	187b      	adds	r3, r7, r1
 80056a4:	781a      	ldrb	r2, [r3, #0]
 80056a6:	187b      	adds	r3, r7, r1
 80056a8:	3201      	adds	r2, #1
 80056aa:	701a      	strb	r2, [r3, #0]
 80056ac:	238c      	movs	r3, #140	; 0x8c
 80056ae:	005b      	lsls	r3, r3, #1
 80056b0:	18fb      	adds	r3, r7, r3
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	2b05      	cmp	r3, #5
 80056b6:	d9a9      	bls.n	800560c <HAL_TIM_PeriodElapsedCallback+0x740>
				}
			}
			if (tLine != 99) {
 80056b8:	231a      	movs	r3, #26
 80056ba:	33ff      	adds	r3, #255	; 0xff
 80056bc:	18fb      	adds	r3, r7, r3
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	2b63      	cmp	r3, #99	; 0x63
 80056c2:	d022      	beq.n	800570a <HAL_TIM_PeriodElapsedCallback+0x83e>
				if (tResponse == 'G') {
 80056c4:	2308      	movs	r3, #8
 80056c6:	33ff      	adds	r3, #255	; 0xff
 80056c8:	2218      	movs	r2, #24
 80056ca:	189b      	adds	r3, r3, r2
 80056cc:	19db      	adds	r3, r3, r7
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	2b47      	cmp	r3, #71	; 0x47
 80056d2:	d108      	bne.n	80056e6 <HAL_TIM_PeriodElapsedCallback+0x81a>
					isResponseOk = 1;
 80056d4:	4b65      	ldr	r3, [pc, #404]	; (800586c <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 80056d6:	2201      	movs	r2, #1
 80056d8:	701a      	strb	r2, [r3, #0]
					clearit();
 80056da:	f001 f8f1 	bl	80068c0 <clearit>
					commandCase = 0;
 80056de:	4b56      	ldr	r3, [pc, #344]	; (8005838 <HAL_TIM_PeriodElapsedCallback+0x96c>)
 80056e0:	2200      	movs	r2, #0
 80056e2:	701a      	strb	r2, [r3, #0]
 80056e4:	e344      	b.n	8005d70 <HAL_TIM_PeriodElapsedCallback+0xea4>

				} else if (tResponse == 'B') {
 80056e6:	2308      	movs	r3, #8
 80056e8:	33ff      	adds	r3, #255	; 0xff
 80056ea:	2218      	movs	r2, #24
 80056ec:	189b      	adds	r3, r3, r2
 80056ee:	19db      	adds	r3, r3, r7
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	2b42      	cmp	r3, #66	; 0x42
 80056f4:	d000      	beq.n	80056f8 <HAL_TIM_PeriodElapsedCallback+0x82c>
 80056f6:	e33b      	b.n	8005d70 <HAL_TIM_PeriodElapsedCallback+0xea4>
					isResponseOk = 0;
 80056f8:	4b5c      	ldr	r3, [pc, #368]	; (800586c <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 80056fa:	2200      	movs	r2, #0
 80056fc:	701a      	strb	r2, [r3, #0]
					clearit();
 80056fe:	f001 f8df 	bl	80068c0 <clearit>
					commandCase = 0;
 8005702:	4b4d      	ldr	r3, [pc, #308]	; (8005838 <HAL_TIM_PeriodElapsedCallback+0x96c>)
 8005704:	2200      	movs	r2, #0
 8005706:	701a      	strb	r2, [r3, #0]
 8005708:	e332      	b.n	8005d70 <HAL_TIM_PeriodElapsedCallback+0xea4>
				}
			} else {

				resTimeout--;
 800570a:	4b59      	ldr	r3, [pc, #356]	; (8005870 <HAL_TIM_PeriodElapsedCallback+0x9a4>)
 800570c:	881b      	ldrh	r3, [r3, #0]
 800570e:	b29b      	uxth	r3, r3
 8005710:	3b01      	subs	r3, #1
 8005712:	b29a      	uxth	r2, r3
 8005714:	4b56      	ldr	r3, [pc, #344]	; (8005870 <HAL_TIM_PeriodElapsedCallback+0x9a4>)
 8005716:	801a      	strh	r2, [r3, #0]
				if (resTimeout < 1) {
 8005718:	4b55      	ldr	r3, [pc, #340]	; (8005870 <HAL_TIM_PeriodElapsedCallback+0x9a4>)
 800571a:	881b      	ldrh	r3, [r3, #0]
 800571c:	b29b      	uxth	r3, r3
 800571e:	2b00      	cmp	r3, #0
 8005720:	d000      	beq.n	8005724 <HAL_TIM_PeriodElapsedCallback+0x858>
 8005722:	e325      	b.n	8005d70 <HAL_TIM_PeriodElapsedCallback+0xea4>
					if (!recResponse) {
 8005724:	4b53      	ldr	r3, [pc, #332]	; (8005874 <HAL_TIM_PeriodElapsedCallback+0x9a8>)
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	b2db      	uxtb	r3, r3
 800572a:	2b00      	cmp	r3, #0
 800572c:	d101      	bne.n	8005732 <HAL_TIM_PeriodElapsedCallback+0x866>
						//printf("TIMEOUT HASH TAG\n");
						rebootsystem();
 800572e:	f000 fdc9 	bl	80062c4 <rebootsystem>

					}
					clearit();
 8005732:	f001 f8c5 	bl	80068c0 <clearit>
					isResponseOk = 0;
 8005736:	4b4d      	ldr	r3, [pc, #308]	; (800586c <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 8005738:	2200      	movs	r2, #0
 800573a:	701a      	strb	r2, [r3, #0]
 800573c:	e318      	b.n	8005d70 <HAL_TIM_PeriodElapsedCallback+0xea4>

				}
			}
		} else if (commandCase == 2) {
 800573e:	4b3e      	ldr	r3, [pc, #248]	; (8005838 <HAL_TIM_PeriodElapsedCallback+0x96c>)
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	b2db      	uxtb	r3, r3
 8005744:	2b02      	cmp	r3, #2
 8005746:	d162      	bne.n	800580e <HAL_TIM_PeriodElapsedCallback+0x942>
			//CPIN Case
			uint8_t tLine = 99;
 8005748:	23ff      	movs	r3, #255	; 0xff
 800574a:	2118      	movs	r1, #24
 800574c:	185b      	adds	r3, r3, r1
 800574e:	19db      	adds	r3, r3, r7
 8005750:	2263      	movs	r2, #99	; 0x63
 8005752:	701a      	strb	r2, [r3, #0]
			char *ptr;
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 8005754:	23fe      	movs	r3, #254	; 0xfe
 8005756:	185b      	adds	r3, r3, r1
 8005758:	19db      	adds	r3, r3, r7
 800575a:	2200      	movs	r2, #0
 800575c:	701a      	strb	r2, [r3, #0]
 800575e:	e028      	b.n	80057b2 <HAL_TIM_PeriodElapsedCallback+0x8e6>
				ptr = strstr(responseBuffer[i], "READY");
 8005760:	24fe      	movs	r4, #254	; 0xfe
 8005762:	2518      	movs	r5, #24
 8005764:	1963      	adds	r3, r4, r5
 8005766:	19db      	adds	r3, r3, r7
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	2232      	movs	r2, #50	; 0x32
 800576c:	435a      	muls	r2, r3
 800576e:	4b33      	ldr	r3, [pc, #204]	; (800583c <HAL_TIM_PeriodElapsedCallback+0x970>)
 8005770:	18d3      	adds	r3, r2, r3
 8005772:	4a41      	ldr	r2, [pc, #260]	; (8005878 <HAL_TIM_PeriodElapsedCallback+0x9ac>)
 8005774:	0011      	movs	r1, r2
 8005776:	0018      	movs	r0, r3
 8005778:	f008 ff61 	bl	800e63e <strstr>
 800577c:	0003      	movs	r3, r0
 800577e:	2284      	movs	r2, #132	; 0x84
 8005780:	1951      	adds	r1, r2, r5
 8005782:	19c9      	adds	r1, r1, r7
 8005784:	600b      	str	r3, [r1, #0]
				if (ptr != NULL) {
 8005786:	1953      	adds	r3, r2, r5
 8005788:	19db      	adds	r3, r3, r7
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d007      	beq.n	80057a0 <HAL_TIM_PeriodElapsedCallback+0x8d4>
					tLine = i;
 8005790:	23ff      	movs	r3, #255	; 0xff
 8005792:	195b      	adds	r3, r3, r5
 8005794:	19db      	adds	r3, r3, r7
 8005796:	1962      	adds	r2, r4, r5
 8005798:	19d2      	adds	r2, r2, r7
 800579a:	7812      	ldrb	r2, [r2, #0]
 800579c:	701a      	strb	r2, [r3, #0]
					break;
 800579e:	e00f      	b.n	80057c0 <HAL_TIM_PeriodElapsedCallback+0x8f4>
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 80057a0:	21fe      	movs	r1, #254	; 0xfe
 80057a2:	2018      	movs	r0, #24
 80057a4:	180b      	adds	r3, r1, r0
 80057a6:	19db      	adds	r3, r3, r7
 80057a8:	781a      	ldrb	r2, [r3, #0]
 80057aa:	180b      	adds	r3, r1, r0
 80057ac:	19db      	adds	r3, r3, r7
 80057ae:	3201      	adds	r2, #1
 80057b0:	701a      	strb	r2, [r3, #0]
 80057b2:	23fe      	movs	r3, #254	; 0xfe
 80057b4:	2218      	movs	r2, #24
 80057b6:	189b      	adds	r3, r3, r2
 80057b8:	19db      	adds	r3, r3, r7
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	2b05      	cmp	r3, #5
 80057be:	d9cf      	bls.n	8005760 <HAL_TIM_PeriodElapsedCallback+0x894>
				}
			}
			if (tLine != 99) {
 80057c0:	23ff      	movs	r3, #255	; 0xff
 80057c2:	2218      	movs	r2, #24
 80057c4:	189b      	adds	r3, r3, r2
 80057c6:	19db      	adds	r3, r3, r7
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	2b63      	cmp	r3, #99	; 0x63
 80057cc:	d005      	beq.n	80057da <HAL_TIM_PeriodElapsedCallback+0x90e>
				isResponseOk = 1;
 80057ce:	4b27      	ldr	r3, [pc, #156]	; (800586c <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 80057d0:	2201      	movs	r2, #1
 80057d2:	701a      	strb	r2, [r3, #0]
				clearit();
 80057d4:	f001 f874 	bl	80068c0 <clearit>
 80057d8:	e2ca      	b.n	8005d70 <HAL_TIM_PeriodElapsedCallback+0xea4>
			} else {
				resTimeout--;
 80057da:	4b25      	ldr	r3, [pc, #148]	; (8005870 <HAL_TIM_PeriodElapsedCallback+0x9a4>)
 80057dc:	881b      	ldrh	r3, [r3, #0]
 80057de:	b29b      	uxth	r3, r3
 80057e0:	3b01      	subs	r3, #1
 80057e2:	b29a      	uxth	r2, r3
 80057e4:	4b22      	ldr	r3, [pc, #136]	; (8005870 <HAL_TIM_PeriodElapsedCallback+0x9a4>)
 80057e6:	801a      	strh	r2, [r3, #0]
				if (resTimeout < 1) {
 80057e8:	4b21      	ldr	r3, [pc, #132]	; (8005870 <HAL_TIM_PeriodElapsedCallback+0x9a4>)
 80057ea:	881b      	ldrh	r3, [r3, #0]
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d000      	beq.n	80057f4 <HAL_TIM_PeriodElapsedCallback+0x928>
 80057f2:	e2bd      	b.n	8005d70 <HAL_TIM_PeriodElapsedCallback+0xea4>
					if (!recResponse) {
 80057f4:	4b1f      	ldr	r3, [pc, #124]	; (8005874 <HAL_TIM_PeriodElapsedCallback+0x9a8>)
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d101      	bne.n	8005802 <HAL_TIM_PeriodElapsedCallback+0x936>
						rebootsystem();
 80057fe:	f000 fd61 	bl	80062c4 <rebootsystem>

					}
					clearit();
 8005802:	f001 f85d 	bl	80068c0 <clearit>
					isResponseOk = 0;
 8005806:	4b19      	ldr	r3, [pc, #100]	; (800586c <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 8005808:	2200      	movs	r2, #0
 800580a:	701a      	strb	r2, [r3, #0]
 800580c:	e2b0      	b.n	8005d70 <HAL_TIM_PeriodElapsedCallback+0xea4>
				}
			}
		} else if (commandCase == 3) {
 800580e:	4b0a      	ldr	r3, [pc, #40]	; (8005838 <HAL_TIM_PeriodElapsedCallback+0x96c>)
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	b2db      	uxtb	r3, r3
 8005814:	2b03      	cmp	r3, #3
 8005816:	d000      	beq.n	800581a <HAL_TIM_PeriodElapsedCallback+0x94e>
 8005818:	e0d3      	b.n	80059c2 <HAL_TIM_PeriodElapsedCallback+0xaf6>
			// CREG? / CGREG? case
			uint8_t tLine = 99;
 800581a:	23fd      	movs	r3, #253	; 0xfd
 800581c:	2118      	movs	r1, #24
 800581e:	185b      	adds	r3, r3, r1
 8005820:	19db      	adds	r3, r3, r7
 8005822:	2263      	movs	r2, #99	; 0x63
 8005824:	701a      	strb	r2, [r3, #0]
			char *ptr;
			char *ptr2;
			char *ptr3;
			char *ptr4;
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 8005826:	23fc      	movs	r3, #252	; 0xfc
 8005828:	185b      	adds	r3, r3, r1
 800582a:	19db      	adds	r3, r3, r7
 800582c:	2200      	movs	r2, #0
 800582e:	701a      	strb	r2, [r3, #0]
 8005830:	e096      	b.n	8005960 <HAL_TIM_PeriodElapsedCallback+0xa94>
 8005832:	46c0      	nop			; (mov r8, r8)
 8005834:	20000d40 	.word	0x20000d40
 8005838:	20000853 	.word	0x20000853
 800583c:	2000071c 	.word	0x2000071c
 8005840:	08012a6c 	.word	0x08012a6c
 8005844:	08012a74 	.word	0x08012a74
 8005848:	20000d41 	.word	0x20000d41
 800584c:	2000084e 	.word	0x2000084e
 8005850:	20000d3e 	.word	0x20000d3e
 8005854:	200003b4 	.word	0x200003b4
 8005858:	20000848 	.word	0x20000848
 800585c:	20000849 	.word	0x20000849
 8005860:	2000084c 	.word	0x2000084c
 8005864:	08012a80 	.word	0x08012a80
 8005868:	08012a84 	.word	0x08012a84
 800586c:	20000854 	.word	0x20000854
 8005870:	20000850 	.word	0x20000850
 8005874:	20000855 	.word	0x20000855
 8005878:	08012a8c 	.word	0x08012a8c
				ptr = strstr(responseBuffer[i], "+CREG: 0,1");
 800587c:	24fc      	movs	r4, #252	; 0xfc
 800587e:	2618      	movs	r6, #24
 8005880:	19a3      	adds	r3, r4, r6
 8005882:	19db      	adds	r3, r3, r7
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	2232      	movs	r2, #50	; 0x32
 8005888:	435a      	muls	r2, r3
 800588a:	4bc4      	ldr	r3, [pc, #784]	; (8005b9c <HAL_TIM_PeriodElapsedCallback+0xcd0>)
 800588c:	18d3      	adds	r3, r2, r3
 800588e:	4ac4      	ldr	r2, [pc, #784]	; (8005ba0 <HAL_TIM_PeriodElapsedCallback+0xcd4>)
 8005890:	0011      	movs	r1, r2
 8005892:	0018      	movs	r0, r3
 8005894:	f008 fed3 	bl	800e63e <strstr>
 8005898:	0003      	movs	r3, r0
 800589a:	2594      	movs	r5, #148	; 0x94
 800589c:	19aa      	adds	r2, r5, r6
 800589e:	19d2      	adds	r2, r2, r7
 80058a0:	6013      	str	r3, [r2, #0]
				ptr2 = strstr(responseBuffer[i], "+CREG: 0,5");
 80058a2:	19a3      	adds	r3, r4, r6
 80058a4:	19db      	adds	r3, r3, r7
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	2232      	movs	r2, #50	; 0x32
 80058aa:	435a      	muls	r2, r3
 80058ac:	4bbb      	ldr	r3, [pc, #748]	; (8005b9c <HAL_TIM_PeriodElapsedCallback+0xcd0>)
 80058ae:	18d3      	adds	r3, r2, r3
 80058b0:	4abc      	ldr	r2, [pc, #752]	; (8005ba4 <HAL_TIM_PeriodElapsedCallback+0xcd8>)
 80058b2:	0011      	movs	r1, r2
 80058b4:	0018      	movs	r0, r3
 80058b6:	f008 fec2 	bl	800e63e <strstr>
 80058ba:	0003      	movs	r3, r0
 80058bc:	2690      	movs	r6, #144	; 0x90
 80058be:	2018      	movs	r0, #24
 80058c0:	1832      	adds	r2, r6, r0
 80058c2:	19d2      	adds	r2, r2, r7
 80058c4:	6013      	str	r3, [r2, #0]
				ptr3 = strstr(responseBuffer[i], "+CGREG: 0,1");
 80058c6:	1823      	adds	r3, r4, r0
 80058c8:	19db      	adds	r3, r3, r7
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	2232      	movs	r2, #50	; 0x32
 80058ce:	435a      	muls	r2, r3
 80058d0:	4bb2      	ldr	r3, [pc, #712]	; (8005b9c <HAL_TIM_PeriodElapsedCallback+0xcd0>)
 80058d2:	18d3      	adds	r3, r2, r3
 80058d4:	4ab4      	ldr	r2, [pc, #720]	; (8005ba8 <HAL_TIM_PeriodElapsedCallback+0xcdc>)
 80058d6:	0011      	movs	r1, r2
 80058d8:	0018      	movs	r0, r3
 80058da:	f008 feb0 	bl	800e63e <strstr>
 80058de:	0003      	movs	r3, r0
 80058e0:	228c      	movs	r2, #140	; 0x8c
 80058e2:	2018      	movs	r0, #24
 80058e4:	1812      	adds	r2, r2, r0
 80058e6:	19d1      	adds	r1, r2, r7
 80058e8:	600b      	str	r3, [r1, #0]
				ptr4 = strstr(responseBuffer[i], "+CGREG: 0,5");
 80058ea:	1823      	adds	r3, r4, r0
 80058ec:	19db      	adds	r3, r3, r7
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	2232      	movs	r2, #50	; 0x32
 80058f2:	435a      	muls	r2, r3
 80058f4:	4ba9      	ldr	r3, [pc, #676]	; (8005b9c <HAL_TIM_PeriodElapsedCallback+0xcd0>)
 80058f6:	18d3      	adds	r3, r2, r3
 80058f8:	4aac      	ldr	r2, [pc, #688]	; (8005bac <HAL_TIM_PeriodElapsedCallback+0xce0>)
 80058fa:	0011      	movs	r1, r2
 80058fc:	0018      	movs	r0, r3
 80058fe:	f008 fe9e 	bl	800e63e <strstr>
 8005902:	0003      	movs	r3, r0
 8005904:	2188      	movs	r1, #136	; 0x88
 8005906:	2218      	movs	r2, #24
 8005908:	1888      	adds	r0, r1, r2
 800590a:	19c0      	adds	r0, r0, r7
 800590c:	6003      	str	r3, [r0, #0]
				if (ptr != NULL || ptr2 != NULL || ptr3 != NULL || ptr4 != NULL) {
 800590e:	0010      	movs	r0, r2
 8005910:	182b      	adds	r3, r5, r0
 8005912:	19db      	adds	r3, r3, r7
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d10f      	bne.n	800593a <HAL_TIM_PeriodElapsedCallback+0xa6e>
 800591a:	1833      	adds	r3, r6, r0
 800591c:	19db      	adds	r3, r3, r7
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d10a      	bne.n	800593a <HAL_TIM_PeriodElapsedCallback+0xa6e>
 8005924:	228c      	movs	r2, #140	; 0x8c
 8005926:	1813      	adds	r3, r2, r0
 8005928:	19db      	adds	r3, r3, r7
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d104      	bne.n	800593a <HAL_TIM_PeriodElapsedCallback+0xa6e>
 8005930:	180b      	adds	r3, r1, r0
 8005932:	19db      	adds	r3, r3, r7
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d009      	beq.n	800594e <HAL_TIM_PeriodElapsedCallback+0xa82>
					tLine = i;
 800593a:	23fd      	movs	r3, #253	; 0xfd
 800593c:	2118      	movs	r1, #24
 800593e:	185b      	adds	r3, r3, r1
 8005940:	19db      	adds	r3, r3, r7
 8005942:	22fc      	movs	r2, #252	; 0xfc
 8005944:	1852      	adds	r2, r2, r1
 8005946:	19d2      	adds	r2, r2, r7
 8005948:	7812      	ldrb	r2, [r2, #0]
 800594a:	701a      	strb	r2, [r3, #0]
					break;
 800594c:	e00f      	b.n	800596e <HAL_TIM_PeriodElapsedCallback+0xaa2>
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 800594e:	21fc      	movs	r1, #252	; 0xfc
 8005950:	2018      	movs	r0, #24
 8005952:	180b      	adds	r3, r1, r0
 8005954:	19db      	adds	r3, r3, r7
 8005956:	781a      	ldrb	r2, [r3, #0]
 8005958:	180b      	adds	r3, r1, r0
 800595a:	19db      	adds	r3, r3, r7
 800595c:	3201      	adds	r2, #1
 800595e:	701a      	strb	r2, [r3, #0]
 8005960:	23fc      	movs	r3, #252	; 0xfc
 8005962:	2218      	movs	r2, #24
 8005964:	189b      	adds	r3, r3, r2
 8005966:	19db      	adds	r3, r3, r7
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	2b05      	cmp	r3, #5
 800596c:	d986      	bls.n	800587c <HAL_TIM_PeriodElapsedCallback+0x9b0>
				}
			}
			if (tLine != 99) {
 800596e:	23fd      	movs	r3, #253	; 0xfd
 8005970:	2218      	movs	r2, #24
 8005972:	189b      	adds	r3, r3, r2
 8005974:	19db      	adds	r3, r3, r7
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	2b63      	cmp	r3, #99	; 0x63
 800597a:	d008      	beq.n	800598e <HAL_TIM_PeriodElapsedCallback+0xac2>
				isReg = 1;
 800597c:	4b8c      	ldr	r3, [pc, #560]	; (8005bb0 <HAL_TIM_PeriodElapsedCallback+0xce4>)
 800597e:	2201      	movs	r2, #1
 8005980:	701a      	strb	r2, [r3, #0]
				isResponseOk = 1;
 8005982:	4b8c      	ldr	r3, [pc, #560]	; (8005bb4 <HAL_TIM_PeriodElapsedCallback+0xce8>)
 8005984:	2201      	movs	r2, #1
 8005986:	701a      	strb	r2, [r3, #0]
				clearit();
 8005988:	f000 ff9a 	bl	80068c0 <clearit>
 800598c:	e1f0      	b.n	8005d70 <HAL_TIM_PeriodElapsedCallback+0xea4>

			} else {
				resTimeout--;
 800598e:	4b8a      	ldr	r3, [pc, #552]	; (8005bb8 <HAL_TIM_PeriodElapsedCallback+0xcec>)
 8005990:	881b      	ldrh	r3, [r3, #0]
 8005992:	b29b      	uxth	r3, r3
 8005994:	3b01      	subs	r3, #1
 8005996:	b29a      	uxth	r2, r3
 8005998:	4b87      	ldr	r3, [pc, #540]	; (8005bb8 <HAL_TIM_PeriodElapsedCallback+0xcec>)
 800599a:	801a      	strh	r2, [r3, #0]
				if (resTimeout < 1) {
 800599c:	4b86      	ldr	r3, [pc, #536]	; (8005bb8 <HAL_TIM_PeriodElapsedCallback+0xcec>)
 800599e:	881b      	ldrh	r3, [r3, #0]
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d000      	beq.n	80059a8 <HAL_TIM_PeriodElapsedCallback+0xadc>
 80059a6:	e1e3      	b.n	8005d70 <HAL_TIM_PeriodElapsedCallback+0xea4>
					if (!recResponse) {
 80059a8:	4b84      	ldr	r3, [pc, #528]	; (8005bbc <HAL_TIM_PeriodElapsedCallback+0xcf0>)
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d101      	bne.n	80059b6 <HAL_TIM_PeriodElapsedCallback+0xaea>
						rebootsystem();
 80059b2:	f000 fc87 	bl	80062c4 <rebootsystem>
					}
					clearit();
 80059b6:	f000 ff83 	bl	80068c0 <clearit>
					isResponseOk = 0;
 80059ba:	4b7e      	ldr	r3, [pc, #504]	; (8005bb4 <HAL_TIM_PeriodElapsedCallback+0xce8>)
 80059bc:	2200      	movs	r2, #0
 80059be:	701a      	strb	r2, [r3, #0]
 80059c0:	e1d6      	b.n	8005d70 <HAL_TIM_PeriodElapsedCallback+0xea4>
				}
			}
		}

		else if (commandCase == 4) {
 80059c2:	4b7f      	ldr	r3, [pc, #508]	; (8005bc0 <HAL_TIM_PeriodElapsedCallback+0xcf4>)
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	2b04      	cmp	r3, #4
 80059ca:	d000      	beq.n	80059ce <HAL_TIM_PeriodElapsedCallback+0xb02>
 80059cc:	e0d4      	b.n	8005b78 <HAL_TIM_PeriodElapsedCallback+0xcac>
			//CGSN (IMEI) case
			uint8_t tLine = 99;
 80059ce:	23fb      	movs	r3, #251	; 0xfb
 80059d0:	2118      	movs	r1, #24
 80059d2:	185b      	adds	r3, r3, r1
 80059d4:	19db      	adds	r3, r3, r7
 80059d6:	2263      	movs	r2, #99	; 0x63
 80059d8:	701a      	strb	r2, [r3, #0]
			char *ptr;
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 80059da:	23fa      	movs	r3, #250	; 0xfa
 80059dc:	185b      	adds	r3, r3, r1
 80059de:	19db      	adds	r3, r3, r7
 80059e0:	2200      	movs	r2, #0
 80059e2:	701a      	strb	r2, [r3, #0]
 80059e4:	e028      	b.n	8005a38 <HAL_TIM_PeriodElapsedCallback+0xb6c>
				ptr = strstr(responseBuffer[i], "OK");
 80059e6:	24fa      	movs	r4, #250	; 0xfa
 80059e8:	2518      	movs	r5, #24
 80059ea:	1963      	adds	r3, r4, r5
 80059ec:	19db      	adds	r3, r3, r7
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	2232      	movs	r2, #50	; 0x32
 80059f2:	435a      	muls	r2, r3
 80059f4:	4b69      	ldr	r3, [pc, #420]	; (8005b9c <HAL_TIM_PeriodElapsedCallback+0xcd0>)
 80059f6:	18d3      	adds	r3, r2, r3
 80059f8:	4a72      	ldr	r2, [pc, #456]	; (8005bc4 <HAL_TIM_PeriodElapsedCallback+0xcf8>)
 80059fa:	0011      	movs	r1, r2
 80059fc:	0018      	movs	r0, r3
 80059fe:	f008 fe1e 	bl	800e63e <strstr>
 8005a02:	0003      	movs	r3, r0
 8005a04:	2298      	movs	r2, #152	; 0x98
 8005a06:	1951      	adds	r1, r2, r5
 8005a08:	19c9      	adds	r1, r1, r7
 8005a0a:	600b      	str	r3, [r1, #0]
				if (ptr != NULL) {
 8005a0c:	1953      	adds	r3, r2, r5
 8005a0e:	19db      	adds	r3, r3, r7
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d007      	beq.n	8005a26 <HAL_TIM_PeriodElapsedCallback+0xb5a>
					tLine = i;
 8005a16:	23fb      	movs	r3, #251	; 0xfb
 8005a18:	195b      	adds	r3, r3, r5
 8005a1a:	19db      	adds	r3, r3, r7
 8005a1c:	1962      	adds	r2, r4, r5
 8005a1e:	19d2      	adds	r2, r2, r7
 8005a20:	7812      	ldrb	r2, [r2, #0]
 8005a22:	701a      	strb	r2, [r3, #0]
					break;
 8005a24:	e00f      	b.n	8005a46 <HAL_TIM_PeriodElapsedCallback+0xb7a>
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 8005a26:	21fa      	movs	r1, #250	; 0xfa
 8005a28:	2018      	movs	r0, #24
 8005a2a:	180b      	adds	r3, r1, r0
 8005a2c:	19db      	adds	r3, r3, r7
 8005a2e:	781a      	ldrb	r2, [r3, #0]
 8005a30:	180b      	adds	r3, r1, r0
 8005a32:	19db      	adds	r3, r3, r7
 8005a34:	3201      	adds	r2, #1
 8005a36:	701a      	strb	r2, [r3, #0]
 8005a38:	23fa      	movs	r3, #250	; 0xfa
 8005a3a:	2218      	movs	r2, #24
 8005a3c:	189b      	adds	r3, r3, r2
 8005a3e:	19db      	adds	r3, r3, r7
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	2b05      	cmp	r3, #5
 8005a44:	d9cf      	bls.n	80059e6 <HAL_TIM_PeriodElapsedCallback+0xb1a>
				}
			}
			if (tLine != 99) {
 8005a46:	24fb      	movs	r4, #251	; 0xfb
 8005a48:	2118      	movs	r1, #24
 8005a4a:	1863      	adds	r3, r4, r1
 8005a4c:	19db      	adds	r3, r3, r7
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	2b63      	cmp	r3, #99	; 0x63
 8005a52:	d077      	beq.n	8005b44 <HAL_TIM_PeriodElapsedCallback+0xc78>
				isResponseOk = 1;
 8005a54:	4b57      	ldr	r3, [pc, #348]	; (8005bb4 <HAL_TIM_PeriodElapsedCallback+0xce8>)
 8005a56:	2201      	movs	r2, #1
 8005a58:	701a      	strb	r2, [r3, #0]
				//to-do with that line
				char p[10];
				memset(p, 0, sizeof(p));
 8005a5a:	253c      	movs	r5, #60	; 0x3c
 8005a5c:	000e      	movs	r6, r1
 8005a5e:	186b      	adds	r3, r5, r1
 8005a60:	19db      	adds	r3, r3, r7
 8005a62:	220a      	movs	r2, #10
 8005a64:	2100      	movs	r1, #0
 8005a66:	0018      	movs	r0, r3
 8005a68:	f008 fd91 	bl	800e58e <memset>
				char *myt;
				myt = responseBuffer[tLine - 2];
 8005a6c:	0031      	movs	r1, r6
 8005a6e:	1863      	adds	r3, r4, r1
 8005a70:	19db      	adds	r3, r3, r7
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	3b02      	subs	r3, #2
 8005a76:	2232      	movs	r2, #50	; 0x32
 8005a78:	435a      	muls	r2, r3
 8005a7a:	4b48      	ldr	r3, [pc, #288]	; (8005b9c <HAL_TIM_PeriodElapsedCallback+0xcd0>)
 8005a7c:	18d3      	adds	r3, r2, r3
 8005a7e:	24f4      	movs	r4, #244	; 0xf4
 8005a80:	000e      	movs	r6, r1
 8005a82:	19a2      	adds	r2, r4, r6
 8005a84:	19d2      	adds	r2, r2, r7
 8005a86:	6013      	str	r3, [r2, #0]
				strncpy(p, myt, 1);
 8005a88:	19a3      	adds	r3, r4, r6
 8005a8a:	19db      	adds	r3, r3, r7
 8005a8c:	6819      	ldr	r1, [r3, #0]
 8005a8e:	19ab      	adds	r3, r5, r6
 8005a90:	19db      	adds	r3, r3, r7
 8005a92:	2201      	movs	r2, #1
 8005a94:	0018      	movs	r0, r3
 8005a96:	f008 fdbe 	bl	800e616 <strncpy>
				imei[0] = (int) strtol(p, NULL, 16);
 8005a9a:	19ab      	adds	r3, r5, r6
 8005a9c:	19db      	adds	r3, r3, r7
 8005a9e:	2210      	movs	r2, #16
 8005aa0:	2100      	movs	r1, #0
 8005aa2:	0018      	movs	r0, r3
 8005aa4:	f009 fcf2 	bl	800f48c <strtol>
 8005aa8:	0003      	movs	r3, r0
 8005aaa:	b2da      	uxtb	r2, r3
 8005aac:	4b46      	ldr	r3, [pc, #280]	; (8005bc8 <HAL_TIM_PeriodElapsedCallback+0xcfc>)
 8005aae:	701a      	strb	r2, [r3, #0]
				myt++;
 8005ab0:	19a3      	adds	r3, r4, r6
 8005ab2:	19db      	adds	r3, r3, r7
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	19a2      	adds	r2, r4, r6
 8005aba:	19d2      	adds	r2, r2, r7
 8005abc:	6013      	str	r3, [r2, #0]
				for (int i = 1; i < 8; i++) {
 8005abe:	2301      	movs	r3, #1
 8005ac0:	22f0      	movs	r2, #240	; 0xf0
 8005ac2:	1992      	adds	r2, r2, r6
 8005ac4:	19d2      	adds	r2, r2, r7
 8005ac6:	6013      	str	r3, [r2, #0]
 8005ac8:	e032      	b.n	8005b30 <HAL_TIM_PeriodElapsedCallback+0xc64>
					memset(p, 0, sizeof(p));
 8005aca:	243c      	movs	r4, #60	; 0x3c
 8005acc:	2618      	movs	r6, #24
 8005ace:	19a3      	adds	r3, r4, r6
 8005ad0:	19db      	adds	r3, r3, r7
 8005ad2:	220a      	movs	r2, #10
 8005ad4:	2100      	movs	r1, #0
 8005ad6:	0018      	movs	r0, r3
 8005ad8:	f008 fd59 	bl	800e58e <memset>
					strncpy(p, myt, 2);
 8005adc:	25f4      	movs	r5, #244	; 0xf4
 8005ade:	19ab      	adds	r3, r5, r6
 8005ae0:	19db      	adds	r3, r3, r7
 8005ae2:	6819      	ldr	r1, [r3, #0]
 8005ae4:	19a3      	adds	r3, r4, r6
 8005ae6:	19db      	adds	r3, r3, r7
 8005ae8:	2202      	movs	r2, #2
 8005aea:	0018      	movs	r0, r3
 8005aec:	f008 fd93 	bl	800e616 <strncpy>
					imei[i] = (int) strtol(p, NULL, 16);
 8005af0:	19a3      	adds	r3, r4, r6
 8005af2:	19db      	adds	r3, r3, r7
 8005af4:	2210      	movs	r2, #16
 8005af6:	2100      	movs	r1, #0
 8005af8:	0018      	movs	r0, r3
 8005afa:	f009 fcc7 	bl	800f48c <strtol>
 8005afe:	0003      	movs	r3, r0
 8005b00:	b2d9      	uxtb	r1, r3
 8005b02:	4a31      	ldr	r2, [pc, #196]	; (8005bc8 <HAL_TIM_PeriodElapsedCallback+0xcfc>)
 8005b04:	20f0      	movs	r0, #240	; 0xf0
 8005b06:	0034      	movs	r4, r6
 8005b08:	1903      	adds	r3, r0, r4
 8005b0a:	19db      	adds	r3, r3, r7
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	18d3      	adds	r3, r2, r3
 8005b10:	1c0a      	adds	r2, r1, #0
 8005b12:	701a      	strb	r2, [r3, #0]
					myt += 2;
 8005b14:	192b      	adds	r3, r5, r4
 8005b16:	19db      	adds	r3, r3, r7
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	3302      	adds	r3, #2
 8005b1c:	192a      	adds	r2, r5, r4
 8005b1e:	19d2      	adds	r2, r2, r7
 8005b20:	6013      	str	r3, [r2, #0]
				for (int i = 1; i < 8; i++) {
 8005b22:	1903      	adds	r3, r0, r4
 8005b24:	19db      	adds	r3, r3, r7
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	3301      	adds	r3, #1
 8005b2a:	1902      	adds	r2, r0, r4
 8005b2c:	19d2      	adds	r2, r2, r7
 8005b2e:	6013      	str	r3, [r2, #0]
 8005b30:	23f0      	movs	r3, #240	; 0xf0
 8005b32:	2218      	movs	r2, #24
 8005b34:	189b      	adds	r3, r3, r2
 8005b36:	19db      	adds	r3, r3, r7
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2b07      	cmp	r3, #7
 8005b3c:	ddc5      	ble.n	8005aca <HAL_TIM_PeriodElapsedCallback+0xbfe>
				}
				clearit();
 8005b3e:	f000 febf 	bl	80068c0 <clearit>
 8005b42:	e115      	b.n	8005d70 <HAL_TIM_PeriodElapsedCallback+0xea4>

			} else {
				resTimeout--;
 8005b44:	4b1c      	ldr	r3, [pc, #112]	; (8005bb8 <HAL_TIM_PeriodElapsedCallback+0xcec>)
 8005b46:	881b      	ldrh	r3, [r3, #0]
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	b29a      	uxth	r2, r3
 8005b4e:	4b1a      	ldr	r3, [pc, #104]	; (8005bb8 <HAL_TIM_PeriodElapsedCallback+0xcec>)
 8005b50:	801a      	strh	r2, [r3, #0]
				if (resTimeout < 1) {
 8005b52:	4b19      	ldr	r3, [pc, #100]	; (8005bb8 <HAL_TIM_PeriodElapsedCallback+0xcec>)
 8005b54:	881b      	ldrh	r3, [r3, #0]
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d000      	beq.n	8005b5e <HAL_TIM_PeriodElapsedCallback+0xc92>
 8005b5c:	e108      	b.n	8005d70 <HAL_TIM_PeriodElapsedCallback+0xea4>
					if (!recResponse) {
 8005b5e:	4b17      	ldr	r3, [pc, #92]	; (8005bbc <HAL_TIM_PeriodElapsedCallback+0xcf0>)
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d101      	bne.n	8005b6c <HAL_TIM_PeriodElapsedCallback+0xca0>
						rebootsystem();
 8005b68:	f000 fbac 	bl	80062c4 <rebootsystem>
					}
					isResponseOk = 0;
 8005b6c:	4b11      	ldr	r3, [pc, #68]	; (8005bb4 <HAL_TIM_PeriodElapsedCallback+0xce8>)
 8005b6e:	2200      	movs	r2, #0
 8005b70:	701a      	strb	r2, [r3, #0]
					clearit();
 8005b72:	f000 fea5 	bl	80068c0 <clearit>
 8005b76:	e0fb      	b.n	8005d70 <HAL_TIM_PeriodElapsedCallback+0xea4>

				}
			}
		} else if (commandCase == 5) {
 8005b78:	4b11      	ldr	r3, [pc, #68]	; (8005bc0 <HAL_TIM_PeriodElapsedCallback+0xcf4>)
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	2b05      	cmp	r3, #5
 8005b80:	d000      	beq.n	8005b84 <HAL_TIM_PeriodElapsedCallback+0xcb8>
 8005b82:	e0f5      	b.n	8005d70 <HAL_TIM_PeriodElapsedCallback+0xea4>
			//tcp open case
			uint8_t tLine = 99;
 8005b84:	23ef      	movs	r3, #239	; 0xef
 8005b86:	2118      	movs	r1, #24
 8005b88:	185b      	adds	r3, r3, r1
 8005b8a:	19db      	adds	r3, r3, r7
 8005b8c:	2263      	movs	r2, #99	; 0x63
 8005b8e:	701a      	strb	r2, [r3, #0]
			char *ptr;
			char *ptr2;
			char *ptr3;
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 8005b90:	23ee      	movs	r3, #238	; 0xee
 8005b92:	185b      	adds	r3, r3, r1
 8005b94:	19db      	adds	r3, r3, r7
 8005b96:	2200      	movs	r2, #0
 8005b98:	701a      	strb	r2, [r3, #0]
 8005b9a:	e09e      	b.n	8005cda <HAL_TIM_PeriodElapsedCallback+0xe0e>
 8005b9c:	2000071c 	.word	0x2000071c
 8005ba0:	08012a94 	.word	0x08012a94
 8005ba4:	08012aa0 	.word	0x08012aa0
 8005ba8:	08012aac 	.word	0x08012aac
 8005bac:	08012ab8 	.word	0x08012ab8
 8005bb0:	20000d3f 	.word	0x20000d3f
 8005bb4:	20000854 	.word	0x20000854
 8005bb8:	20000850 	.word	0x20000850
 8005bbc:	20000855 	.word	0x20000855
 8005bc0:	20000853 	.word	0x20000853
 8005bc4:	08012a80 	.word	0x08012a80
 8005bc8:	20000858 	.word	0x20000858
				ptr = strstr(responseBuffer[i], "ALREADY CONNECT"); //todo check wether in data mode or not
 8005bcc:	24ee      	movs	r4, #238	; 0xee
 8005bce:	2618      	movs	r6, #24
 8005bd0:	19a3      	adds	r3, r4, r6
 8005bd2:	19db      	adds	r3, r3, r7
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	2232      	movs	r2, #50	; 0x32
 8005bd8:	435a      	muls	r2, r3
 8005bda:	4bd5      	ldr	r3, [pc, #852]	; (8005f30 <HAL_TIM_PeriodElapsedCallback+0x1064>)
 8005bdc:	18d3      	adds	r3, r2, r3
 8005bde:	4ad5      	ldr	r2, [pc, #852]	; (8005f34 <HAL_TIM_PeriodElapsedCallback+0x1068>)
 8005be0:	0011      	movs	r1, r2
 8005be2:	0018      	movs	r0, r3
 8005be4:	f008 fd2b 	bl	800e63e <strstr>
 8005be8:	0003      	movs	r3, r0
 8005bea:	25a4      	movs	r5, #164	; 0xa4
 8005bec:	19aa      	adds	r2, r5, r6
 8005bee:	19d2      	adds	r2, r2, r7
 8005bf0:	6013      	str	r3, [r2, #0]
				ptr2 = strstr(responseBuffer[i], "CONNECT FAIL");
 8005bf2:	19a3      	adds	r3, r4, r6
 8005bf4:	19db      	adds	r3, r3, r7
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	2232      	movs	r2, #50	; 0x32
 8005bfa:	435a      	muls	r2, r3
 8005bfc:	4bcc      	ldr	r3, [pc, #816]	; (8005f30 <HAL_TIM_PeriodElapsedCallback+0x1064>)
 8005bfe:	18d3      	adds	r3, r2, r3
 8005c00:	4acd      	ldr	r2, [pc, #820]	; (8005f38 <HAL_TIM_PeriodElapsedCallback+0x106c>)
 8005c02:	0011      	movs	r1, r2
 8005c04:	0018      	movs	r0, r3
 8005c06:	f008 fd1a 	bl	800e63e <strstr>
 8005c0a:	0003      	movs	r3, r0
 8005c0c:	22a0      	movs	r2, #160	; 0xa0
 8005c0e:	1992      	adds	r2, r2, r6
 8005c10:	19d2      	adds	r2, r2, r7
 8005c12:	6013      	str	r3, [r2, #0]
				ptr3 = strstr(responseBuffer[i], "CONNECT");
 8005c14:	19a3      	adds	r3, r4, r6
 8005c16:	19db      	adds	r3, r3, r7
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	2232      	movs	r2, #50	; 0x32
 8005c1c:	435a      	muls	r2, r3
 8005c1e:	4bc4      	ldr	r3, [pc, #784]	; (8005f30 <HAL_TIM_PeriodElapsedCallback+0x1064>)
 8005c20:	18d3      	adds	r3, r2, r3
 8005c22:	4ac6      	ldr	r2, [pc, #792]	; (8005f3c <HAL_TIM_PeriodElapsedCallback+0x1070>)
 8005c24:	0011      	movs	r1, r2
 8005c26:	0018      	movs	r0, r3
 8005c28:	f008 fd09 	bl	800e63e <strstr>
 8005c2c:	0003      	movs	r3, r0
 8005c2e:	229c      	movs	r2, #156	; 0x9c
 8005c30:	0031      	movs	r1, r6
 8005c32:	1852      	adds	r2, r2, r1
 8005c34:	19d2      	adds	r2, r2, r7
 8005c36:	6013      	str	r3, [r2, #0]

				if (ptr != NULL) {
 8005c38:	186b      	adds	r3, r5, r1
 8005c3a:	19db      	adds	r3, r3, r7
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d010      	beq.n	8005c64 <HAL_TIM_PeriodElapsedCallback+0xd98>
					tLine = i;
 8005c42:	23ef      	movs	r3, #239	; 0xef
 8005c44:	185b      	adds	r3, r3, r1
 8005c46:	19db      	adds	r3, r3, r7
 8005c48:	1862      	adds	r2, r4, r1
 8005c4a:	19d2      	adds	r2, r2, r7
 8005c4c:	7812      	ldrb	r2, [r2, #0]
 8005c4e:	701a      	strb	r2, [r3, #0]
					tResponse = 'G';
 8005c50:	2308      	movs	r3, #8
 8005c52:	33ff      	adds	r3, #255	; 0xff
 8005c54:	185b      	adds	r3, r3, r1
 8005c56:	19db      	adds	r3, r3, r7
 8005c58:	2247      	movs	r2, #71	; 0x47
 8005c5a:	701a      	strb	r2, [r3, #0]
					isDataMode = 0;
 8005c5c:	4bb8      	ldr	r3, [pc, #736]	; (8005f40 <HAL_TIM_PeriodElapsedCallback+0x1074>)
 8005c5e:	2200      	movs	r2, #0
 8005c60:	701a      	strb	r2, [r3, #0]
					break;
 8005c62:	e042      	b.n	8005cea <HAL_TIM_PeriodElapsedCallback+0xe1e>
				} else if (ptr2 != NULL) {
 8005c64:	23a0      	movs	r3, #160	; 0xa0
 8005c66:	2118      	movs	r1, #24
 8005c68:	185b      	adds	r3, r3, r1
 8005c6a:	19db      	adds	r3, r3, r7
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d011      	beq.n	8005c96 <HAL_TIM_PeriodElapsedCallback+0xdca>
					tLine = i;
 8005c72:	23ef      	movs	r3, #239	; 0xef
 8005c74:	185b      	adds	r3, r3, r1
 8005c76:	19db      	adds	r3, r3, r7
 8005c78:	22ee      	movs	r2, #238	; 0xee
 8005c7a:	1852      	adds	r2, r2, r1
 8005c7c:	19d2      	adds	r2, r2, r7
 8005c7e:	7812      	ldrb	r2, [r2, #0]
 8005c80:	701a      	strb	r2, [r3, #0]
					tResponse = 'B';
 8005c82:	2308      	movs	r3, #8
 8005c84:	33ff      	adds	r3, #255	; 0xff
 8005c86:	185b      	adds	r3, r3, r1
 8005c88:	19db      	adds	r3, r3, r7
 8005c8a:	2242      	movs	r2, #66	; 0x42
 8005c8c:	701a      	strb	r2, [r3, #0]
					isDataMode = 0;
 8005c8e:	4bac      	ldr	r3, [pc, #688]	; (8005f40 <HAL_TIM_PeriodElapsedCallback+0x1074>)
 8005c90:	2200      	movs	r2, #0
 8005c92:	701a      	strb	r2, [r3, #0]
					break;
 8005c94:	e029      	b.n	8005cea <HAL_TIM_PeriodElapsedCallback+0xe1e>
				} else if (ptr3 != NULL) {
 8005c96:	239c      	movs	r3, #156	; 0x9c
 8005c98:	2118      	movs	r1, #24
 8005c9a:	185b      	adds	r3, r3, r1
 8005c9c:	19db      	adds	r3, r3, r7
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d011      	beq.n	8005cc8 <HAL_TIM_PeriodElapsedCallback+0xdfc>
					tLine = i;
 8005ca4:	23ef      	movs	r3, #239	; 0xef
 8005ca6:	185b      	adds	r3, r3, r1
 8005ca8:	19db      	adds	r3, r3, r7
 8005caa:	22ee      	movs	r2, #238	; 0xee
 8005cac:	1852      	adds	r2, r2, r1
 8005cae:	19d2      	adds	r2, r2, r7
 8005cb0:	7812      	ldrb	r2, [r2, #0]
 8005cb2:	701a      	strb	r2, [r3, #0]
					tResponse = 'G';
 8005cb4:	2308      	movs	r3, #8
 8005cb6:	33ff      	adds	r3, #255	; 0xff
 8005cb8:	185b      	adds	r3, r3, r1
 8005cba:	19db      	adds	r3, r3, r7
 8005cbc:	2247      	movs	r2, #71	; 0x47
 8005cbe:	701a      	strb	r2, [r3, #0]
					isDataMode = 1;
 8005cc0:	4b9f      	ldr	r3, [pc, #636]	; (8005f40 <HAL_TIM_PeriodElapsedCallback+0x1074>)
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	701a      	strb	r2, [r3, #0]
					break;
 8005cc6:	e010      	b.n	8005cea <HAL_TIM_PeriodElapsedCallback+0xe1e>
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 8005cc8:	21ee      	movs	r1, #238	; 0xee
 8005cca:	2018      	movs	r0, #24
 8005ccc:	180b      	adds	r3, r1, r0
 8005cce:	19db      	adds	r3, r3, r7
 8005cd0:	781a      	ldrb	r2, [r3, #0]
 8005cd2:	180b      	adds	r3, r1, r0
 8005cd4:	19db      	adds	r3, r3, r7
 8005cd6:	3201      	adds	r2, #1
 8005cd8:	701a      	strb	r2, [r3, #0]
 8005cda:	23ee      	movs	r3, #238	; 0xee
 8005cdc:	2218      	movs	r2, #24
 8005cde:	189b      	adds	r3, r3, r2
 8005ce0:	19db      	adds	r3, r3, r7
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	2b05      	cmp	r3, #5
 8005ce6:	d800      	bhi.n	8005cea <HAL_TIM_PeriodElapsedCallback+0xe1e>
 8005ce8:	e770      	b.n	8005bcc <HAL_TIM_PeriodElapsedCallback+0xd00>
				}
			}
			if (tLine != 99) {
 8005cea:	23ef      	movs	r3, #239	; 0xef
 8005cec:	2218      	movs	r2, #24
 8005cee:	189b      	adds	r3, r3, r2
 8005cf0:	19db      	adds	r3, r3, r7
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	2b63      	cmp	r3, #99	; 0x63
 8005cf6:	d023      	beq.n	8005d40 <HAL_TIM_PeriodElapsedCallback+0xe74>
				if (tResponse == 'G') {
 8005cf8:	2308      	movs	r3, #8
 8005cfa:	33ff      	adds	r3, #255	; 0xff
 8005cfc:	189b      	adds	r3, r3, r2
 8005cfe:	19db      	adds	r3, r3, r7
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	2b47      	cmp	r3, #71	; 0x47
 8005d04:	d10b      	bne.n	8005d1e <HAL_TIM_PeriodElapsedCallback+0xe52>
					isResponseOk = 1;
 8005d06:	4b8f      	ldr	r3, [pc, #572]	; (8005f44 <HAL_TIM_PeriodElapsedCallback+0x1078>)
 8005d08:	2201      	movs	r2, #1
 8005d0a:	701a      	strb	r2, [r3, #0]
					//to-do with that line
					clearit();
 8005d0c:	f000 fdd8 	bl	80068c0 <clearit>
					isTcpOpen = 1;
 8005d10:	4b8d      	ldr	r3, [pc, #564]	; (8005f48 <HAL_TIM_PeriodElapsedCallback+0x107c>)
 8005d12:	2201      	movs	r2, #1
 8005d14:	701a      	strb	r2, [r3, #0]
					isDataMode = 1;
 8005d16:	4b8a      	ldr	r3, [pc, #552]	; (8005f40 <HAL_TIM_PeriodElapsedCallback+0x1074>)
 8005d18:	2201      	movs	r2, #1
 8005d1a:	701a      	strb	r2, [r3, #0]
 8005d1c:	e028      	b.n	8005d70 <HAL_TIM_PeriodElapsedCallback+0xea4>

				} else if (tResponse == 'B') {
 8005d1e:	2308      	movs	r3, #8
 8005d20:	33ff      	adds	r3, #255	; 0xff
 8005d22:	2218      	movs	r2, #24
 8005d24:	189b      	adds	r3, r3, r2
 8005d26:	19db      	adds	r3, r3, r7
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	2b42      	cmp	r3, #66	; 0x42
 8005d2c:	d120      	bne.n	8005d70 <HAL_TIM_PeriodElapsedCallback+0xea4>
					isResponseOk = 0;
 8005d2e:	4b85      	ldr	r3, [pc, #532]	; (8005f44 <HAL_TIM_PeriodElapsedCallback+0x1078>)
 8005d30:	2200      	movs	r2, #0
 8005d32:	701a      	strb	r2, [r3, #0]
					clearit();
 8005d34:	f000 fdc4 	bl	80068c0 <clearit>
					isTcpOpen = 0;
 8005d38:	4b83      	ldr	r3, [pc, #524]	; (8005f48 <HAL_TIM_PeriodElapsedCallback+0x107c>)
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	701a      	strb	r2, [r3, #0]
 8005d3e:	e017      	b.n	8005d70 <HAL_TIM_PeriodElapsedCallback+0xea4>
				}
			} else {
				resTimeout--;
 8005d40:	4b82      	ldr	r3, [pc, #520]	; (8005f4c <HAL_TIM_PeriodElapsedCallback+0x1080>)
 8005d42:	881b      	ldrh	r3, [r3, #0]
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	3b01      	subs	r3, #1
 8005d48:	b29a      	uxth	r2, r3
 8005d4a:	4b80      	ldr	r3, [pc, #512]	; (8005f4c <HAL_TIM_PeriodElapsedCallback+0x1080>)
 8005d4c:	801a      	strh	r2, [r3, #0]
				if (resTimeout < 1) {
 8005d4e:	4b7f      	ldr	r3, [pc, #508]	; (8005f4c <HAL_TIM_PeriodElapsedCallback+0x1080>)
 8005d50:	881b      	ldrh	r3, [r3, #0]
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d10b      	bne.n	8005d70 <HAL_TIM_PeriodElapsedCallback+0xea4>
					if (!recResponse) {
 8005d58:	4b7d      	ldr	r3, [pc, #500]	; (8005f50 <HAL_TIM_PeriodElapsedCallback+0x1084>)
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d101      	bne.n	8005d66 <HAL_TIM_PeriodElapsedCallback+0xe9a>
						rebootsystem();
 8005d62:	f000 faaf 	bl	80062c4 <rebootsystem>
					}
					clearit();
 8005d66:	f000 fdab 	bl	80068c0 <clearit>
					isResponseOk = 0;
 8005d6a:	4b76      	ldr	r3, [pc, #472]	; (8005f44 <HAL_TIM_PeriodElapsedCallback+0x1078>)
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	701a      	strb	r2, [r3, #0]

				}
			}
		}
		if (commandCase == 6) {
 8005d70:	4b78      	ldr	r3, [pc, #480]	; (8005f54 <HAL_TIM_PeriodElapsedCallback+0x1088>)
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	2b06      	cmp	r3, #6
 8005d78:	d000      	beq.n	8005d7c <HAL_TIM_PeriodElapsedCallback+0xeb0>
 8005d7a:	e0c6      	b.n	8005f0a <HAL_TIM_PeriodElapsedCallback+0x103e>
			uint8_t tLine = 99;
 8005d7c:	23ed      	movs	r3, #237	; 0xed
 8005d7e:	2118      	movs	r1, #24
 8005d80:	185b      	adds	r3, r3, r1
 8005d82:	19db      	adds	r3, r3, r7
 8005d84:	2263      	movs	r2, #99	; 0x63
 8005d86:	701a      	strb	r2, [r3, #0]
			char *ptr;
			char *ptr2;
			char *ptr3;

			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 8005d88:	23ec      	movs	r3, #236	; 0xec
 8005d8a:	185b      	adds	r3, r3, r1
 8005d8c:	19db      	adds	r3, r3, r7
 8005d8e:	2200      	movs	r2, #0
 8005d90:	701a      	strb	r2, [r3, #0]
 8005d92:	e076      	b.n	8005e82 <HAL_TIM_PeriodElapsedCallback+0xfb6>
				ptr = strstr(responseBuffer[i], "NO CARRIER");
 8005d94:	24ec      	movs	r4, #236	; 0xec
 8005d96:	2518      	movs	r5, #24
 8005d98:	1963      	adds	r3, r4, r5
 8005d9a:	19db      	adds	r3, r3, r7
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	2232      	movs	r2, #50	; 0x32
 8005da0:	435a      	muls	r2, r3
 8005da2:	4b63      	ldr	r3, [pc, #396]	; (8005f30 <HAL_TIM_PeriodElapsedCallback+0x1064>)
 8005da4:	18d3      	adds	r3, r2, r3
 8005da6:	4a6c      	ldr	r2, [pc, #432]	; (8005f58 <HAL_TIM_PeriodElapsedCallback+0x108c>)
 8005da8:	0011      	movs	r1, r2
 8005daa:	0018      	movs	r0, r3
 8005dac:	f008 fc47 	bl	800e63e <strstr>
 8005db0:	0003      	movs	r3, r0
 8005db2:	2688      	movs	r6, #136	; 0x88
 8005db4:	19ba      	adds	r2, r7, r6
 8005db6:	6013      	str	r3, [r2, #0]
				ptr2 = strstr(responseBuffer[i], "ERROR");
 8005db8:	1963      	adds	r3, r4, r5
 8005dba:	19db      	adds	r3, r3, r7
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	2232      	movs	r2, #50	; 0x32
 8005dc0:	435a      	muls	r2, r3
 8005dc2:	4b5b      	ldr	r3, [pc, #364]	; (8005f30 <HAL_TIM_PeriodElapsedCallback+0x1064>)
 8005dc4:	18d3      	adds	r3, r2, r3
 8005dc6:	4a65      	ldr	r2, [pc, #404]	; (8005f5c <HAL_TIM_PeriodElapsedCallback+0x1090>)
 8005dc8:	0011      	movs	r1, r2
 8005dca:	0018      	movs	r0, r3
 8005dcc:	f008 fc37 	bl	800e63e <strstr>
 8005dd0:	0003      	movs	r3, r0
 8005dd2:	2284      	movs	r2, #132	; 0x84
 8005dd4:	18ba      	adds	r2, r7, r2
 8005dd6:	6013      	str	r3, [r2, #0]
				ptr3 = strstr(responseBuffer[i], "CONNECT");
 8005dd8:	1963      	adds	r3, r4, r5
 8005dda:	19db      	adds	r3, r3, r7
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	2232      	movs	r2, #50	; 0x32
 8005de0:	435a      	muls	r2, r3
 8005de2:	4b53      	ldr	r3, [pc, #332]	; (8005f30 <HAL_TIM_PeriodElapsedCallback+0x1064>)
 8005de4:	18d3      	adds	r3, r2, r3
 8005de6:	4a55      	ldr	r2, [pc, #340]	; (8005f3c <HAL_TIM_PeriodElapsedCallback+0x1070>)
 8005de8:	0011      	movs	r1, r2
 8005dea:	0018      	movs	r0, r3
 8005dec:	f008 fc27 	bl	800e63e <strstr>
 8005df0:	0003      	movs	r3, r0
 8005df2:	2280      	movs	r2, #128	; 0x80
 8005df4:	18ba      	adds	r2, r7, r2
 8005df6:	6013      	str	r3, [r2, #0]

				if (ptr != NULL) {
 8005df8:	19bb      	adds	r3, r7, r6
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d00d      	beq.n	8005e1c <HAL_TIM_PeriodElapsedCallback+0xf50>
					tLine = i;
 8005e00:	23ed      	movs	r3, #237	; 0xed
 8005e02:	195b      	adds	r3, r3, r5
 8005e04:	19db      	adds	r3, r3, r7
 8005e06:	1962      	adds	r2, r4, r5
 8005e08:	19d2      	adds	r2, r2, r7
 8005e0a:	7812      	ldrb	r2, [r2, #0]
 8005e0c:	701a      	strb	r2, [r3, #0]
					tResponse = 'B';
 8005e0e:	2308      	movs	r3, #8
 8005e10:	33ff      	adds	r3, #255	; 0xff
 8005e12:	195b      	adds	r3, r3, r5
 8005e14:	19db      	adds	r3, r3, r7
 8005e16:	2242      	movs	r2, #66	; 0x42
 8005e18:	701a      	strb	r2, [r3, #0]
					break;
 8005e1a:	e039      	b.n	8005e90 <HAL_TIM_PeriodElapsedCallback+0xfc4>
				}
				if (ptr2 != NULL) {
 8005e1c:	2384      	movs	r3, #132	; 0x84
 8005e1e:	18fb      	adds	r3, r7, r3
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d00f      	beq.n	8005e46 <HAL_TIM_PeriodElapsedCallback+0xf7a>
					tLine = i;
 8005e26:	23ed      	movs	r3, #237	; 0xed
 8005e28:	2118      	movs	r1, #24
 8005e2a:	185b      	adds	r3, r3, r1
 8005e2c:	19db      	adds	r3, r3, r7
 8005e2e:	22ec      	movs	r2, #236	; 0xec
 8005e30:	1852      	adds	r2, r2, r1
 8005e32:	19d2      	adds	r2, r2, r7
 8005e34:	7812      	ldrb	r2, [r2, #0]
 8005e36:	701a      	strb	r2, [r3, #0]
					tResponse = 'B';
 8005e38:	2308      	movs	r3, #8
 8005e3a:	33ff      	adds	r3, #255	; 0xff
 8005e3c:	185b      	adds	r3, r3, r1
 8005e3e:	19db      	adds	r3, r3, r7
 8005e40:	2242      	movs	r2, #66	; 0x42
 8005e42:	701a      	strb	r2, [r3, #0]
					break;
 8005e44:	e024      	b.n	8005e90 <HAL_TIM_PeriodElapsedCallback+0xfc4>
				}
				if (ptr3 != NULL) {
 8005e46:	2380      	movs	r3, #128	; 0x80
 8005e48:	18fb      	adds	r3, r7, r3
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d00f      	beq.n	8005e70 <HAL_TIM_PeriodElapsedCallback+0xfa4>
					tLine = i;
 8005e50:	23ed      	movs	r3, #237	; 0xed
 8005e52:	2118      	movs	r1, #24
 8005e54:	185b      	adds	r3, r3, r1
 8005e56:	19db      	adds	r3, r3, r7
 8005e58:	22ec      	movs	r2, #236	; 0xec
 8005e5a:	1852      	adds	r2, r2, r1
 8005e5c:	19d2      	adds	r2, r2, r7
 8005e5e:	7812      	ldrb	r2, [r2, #0]
 8005e60:	701a      	strb	r2, [r3, #0]
					tResponse = 'G';
 8005e62:	2308      	movs	r3, #8
 8005e64:	33ff      	adds	r3, #255	; 0xff
 8005e66:	185b      	adds	r3, r3, r1
 8005e68:	19db      	adds	r3, r3, r7
 8005e6a:	2247      	movs	r2, #71	; 0x47
 8005e6c:	701a      	strb	r2, [r3, #0]
					break;
 8005e6e:	e00f      	b.n	8005e90 <HAL_TIM_PeriodElapsedCallback+0xfc4>
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 8005e70:	21ec      	movs	r1, #236	; 0xec
 8005e72:	2018      	movs	r0, #24
 8005e74:	180b      	adds	r3, r1, r0
 8005e76:	19db      	adds	r3, r3, r7
 8005e78:	781a      	ldrb	r2, [r3, #0]
 8005e7a:	180b      	adds	r3, r1, r0
 8005e7c:	19db      	adds	r3, r3, r7
 8005e7e:	3201      	adds	r2, #1
 8005e80:	701a      	strb	r2, [r3, #0]
 8005e82:	23ec      	movs	r3, #236	; 0xec
 8005e84:	2218      	movs	r2, #24
 8005e86:	189b      	adds	r3, r3, r2
 8005e88:	19db      	adds	r3, r3, r7
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	2b05      	cmp	r3, #5
 8005e8e:	d981      	bls.n	8005d94 <HAL_TIM_PeriodElapsedCallback+0xec8>
				}
			}
			if (tLine != 99) {
 8005e90:	23ed      	movs	r3, #237	; 0xed
 8005e92:	2218      	movs	r2, #24
 8005e94:	189b      	adds	r3, r3, r2
 8005e96:	19db      	adds	r3, r3, r7
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	2b63      	cmp	r3, #99	; 0x63
 8005e9c:	d01b      	beq.n	8005ed6 <HAL_TIM_PeriodElapsedCallback+0x100a>
				if (tResponse == 'G') {
 8005e9e:	2308      	movs	r3, #8
 8005ea0:	33ff      	adds	r3, #255	; 0xff
 8005ea2:	189b      	adds	r3, r3, r2
 8005ea4:	19db      	adds	r3, r3, r7
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	2b47      	cmp	r3, #71	; 0x47
 8005eaa:	d105      	bne.n	8005eb8 <HAL_TIM_PeriodElapsedCallback+0xfec>
					isResponseOk = 1;
 8005eac:	4b25      	ldr	r3, [pc, #148]	; (8005f44 <HAL_TIM_PeriodElapsedCallback+0x1078>)
 8005eae:	2201      	movs	r2, #1
 8005eb0:	701a      	strb	r2, [r3, #0]
					//to-do with that line
					clearit();
 8005eb2:	f000 fd05 	bl	80068c0 <clearit>
		nmeaLC = 0;
		nmeaCC = 0;
		HAL_UART_Receive_IT(&GNSS_PORT, GNSS_BUFFER, 1);
		HAL_UART_Receive_IT(&GNSS_PORT, GNSS_BUFFER, 1);
	}
}
 8005eb6:	e1c8      	b.n	800624a <HAL_TIM_PeriodElapsedCallback+0x137e>
				} else if (tResponse == 'B') {
 8005eb8:	2308      	movs	r3, #8
 8005eba:	33ff      	adds	r3, #255	; 0xff
 8005ebc:	2218      	movs	r2, #24
 8005ebe:	189b      	adds	r3, r3, r2
 8005ec0:	19db      	adds	r3, r3, r7
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	2b42      	cmp	r3, #66	; 0x42
 8005ec6:	d000      	beq.n	8005eca <HAL_TIM_PeriodElapsedCallback+0xffe>
 8005ec8:	e1bf      	b.n	800624a <HAL_TIM_PeriodElapsedCallback+0x137e>
					isResponseOk = 0;
 8005eca:	4b1e      	ldr	r3, [pc, #120]	; (8005f44 <HAL_TIM_PeriodElapsedCallback+0x1078>)
 8005ecc:	2200      	movs	r2, #0
 8005ece:	701a      	strb	r2, [r3, #0]
					clearit();
 8005ed0:	f000 fcf6 	bl	80068c0 <clearit>
}
 8005ed4:	e1b9      	b.n	800624a <HAL_TIM_PeriodElapsedCallback+0x137e>
				resTimeout--;
 8005ed6:	4b1d      	ldr	r3, [pc, #116]	; (8005f4c <HAL_TIM_PeriodElapsedCallback+0x1080>)
 8005ed8:	881b      	ldrh	r3, [r3, #0]
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	3b01      	subs	r3, #1
 8005ede:	b29a      	uxth	r2, r3
 8005ee0:	4b1a      	ldr	r3, [pc, #104]	; (8005f4c <HAL_TIM_PeriodElapsedCallback+0x1080>)
 8005ee2:	801a      	strh	r2, [r3, #0]
				if (resTimeout < 1) {
 8005ee4:	4b19      	ldr	r3, [pc, #100]	; (8005f4c <HAL_TIM_PeriodElapsedCallback+0x1080>)
 8005ee6:	881b      	ldrh	r3, [r3, #0]
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d000      	beq.n	8005ef0 <HAL_TIM_PeriodElapsedCallback+0x1024>
 8005eee:	e1ac      	b.n	800624a <HAL_TIM_PeriodElapsedCallback+0x137e>
					if (!recResponse) {
 8005ef0:	4b17      	ldr	r3, [pc, #92]	; (8005f50 <HAL_TIM_PeriodElapsedCallback+0x1084>)
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d101      	bne.n	8005efe <HAL_TIM_PeriodElapsedCallback+0x1032>
						rebootsystem();
 8005efa:	f000 f9e3 	bl	80062c4 <rebootsystem>
					clearit();
 8005efe:	f000 fcdf 	bl	80068c0 <clearit>
					isResponseOk = 0;
 8005f02:	4b10      	ldr	r3, [pc, #64]	; (8005f44 <HAL_TIM_PeriodElapsedCallback+0x1078>)
 8005f04:	2200      	movs	r2, #0
 8005f06:	701a      	strb	r2, [r3, #0]
}
 8005f08:	e19f      	b.n	800624a <HAL_TIM_PeriodElapsedCallback+0x137e>
		} else if (commandCase == 7) { //cmgs response check
 8005f0a:	4b12      	ldr	r3, [pc, #72]	; (8005f54 <HAL_TIM_PeriodElapsedCallback+0x1088>)
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	2b07      	cmp	r3, #7
 8005f12:	d000      	beq.n	8005f16 <HAL_TIM_PeriodElapsedCallback+0x104a>
 8005f14:	e199      	b.n	800624a <HAL_TIM_PeriodElapsedCallback+0x137e>
			uint8_t tLine = 99;
 8005f16:	23eb      	movs	r3, #235	; 0xeb
 8005f18:	2118      	movs	r1, #24
 8005f1a:	185b      	adds	r3, r3, r1
 8005f1c:	19db      	adds	r3, r3, r7
 8005f1e:	2263      	movs	r2, #99	; 0x63
 8005f20:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 8005f22:	23ea      	movs	r3, #234	; 0xea
 8005f24:	185b      	adds	r3, r3, r1
 8005f26:	19db      	adds	r3, r3, r7
 8005f28:	2200      	movs	r2, #0
 8005f2a:	701a      	strb	r2, [r3, #0]
 8005f2c:	e06a      	b.n	8006004 <HAL_TIM_PeriodElapsedCallback+0x1138>
 8005f2e:	46c0      	nop			; (mov r8, r8)
 8005f30:	2000071c 	.word	0x2000071c
 8005f34:	08012ac4 	.word	0x08012ac4
 8005f38:	08012ad4 	.word	0x08012ad4
 8005f3c:	08012ae4 	.word	0x08012ae4
 8005f40:	2000084e 	.word	0x2000084e
 8005f44:	20000854 	.word	0x20000854
 8005f48:	20000d3e 	.word	0x20000d3e
 8005f4c:	20000850 	.word	0x20000850
 8005f50:	20000855 	.word	0x20000855
 8005f54:	20000853 	.word	0x20000853
 8005f58:	08012aec 	.word	0x08012aec
 8005f5c:	08012a84 	.word	0x08012a84
				ptr = strstr(responseBuffer[i], "+CMGS:");
 8005f60:	24ea      	movs	r4, #234	; 0xea
 8005f62:	2518      	movs	r5, #24
 8005f64:	1963      	adds	r3, r4, r5
 8005f66:	19db      	adds	r3, r3, r7
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	2232      	movs	r2, #50	; 0x32
 8005f6c:	435a      	muls	r2, r3
 8005f6e:	4bba      	ldr	r3, [pc, #744]	; (8006258 <HAL_TIM_PeriodElapsedCallback+0x138c>)
 8005f70:	18d3      	adds	r3, r2, r3
 8005f72:	4aba      	ldr	r2, [pc, #744]	; (800625c <HAL_TIM_PeriodElapsedCallback+0x1390>)
 8005f74:	0011      	movs	r1, r2
 8005f76:	0018      	movs	r0, r3
 8005f78:	f008 fb61 	bl	800e63e <strstr>
 8005f7c:	0003      	movs	r3, r0
 8005f7e:	2690      	movs	r6, #144	; 0x90
 8005f80:	19ba      	adds	r2, r7, r6
 8005f82:	6013      	str	r3, [r2, #0]
				ptr2 = strstr(responseBuffer[i], "ERROR");
 8005f84:	1963      	adds	r3, r4, r5
 8005f86:	19db      	adds	r3, r3, r7
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	2232      	movs	r2, #50	; 0x32
 8005f8c:	435a      	muls	r2, r3
 8005f8e:	4bb2      	ldr	r3, [pc, #712]	; (8006258 <HAL_TIM_PeriodElapsedCallback+0x138c>)
 8005f90:	18d3      	adds	r3, r2, r3
 8005f92:	4ab3      	ldr	r2, [pc, #716]	; (8006260 <HAL_TIM_PeriodElapsedCallback+0x1394>)
 8005f94:	0011      	movs	r1, r2
 8005f96:	0018      	movs	r0, r3
 8005f98:	f008 fb51 	bl	800e63e <strstr>
 8005f9c:	0003      	movs	r3, r0
 8005f9e:	228c      	movs	r2, #140	; 0x8c
 8005fa0:	18ba      	adds	r2, r7, r2
 8005fa2:	6013      	str	r3, [r2, #0]
				if (ptr != NULL) {
 8005fa4:	19bb      	adds	r3, r7, r6
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d00d      	beq.n	8005fc8 <HAL_TIM_PeriodElapsedCallback+0x10fc>
					tLine = i;
 8005fac:	23eb      	movs	r3, #235	; 0xeb
 8005fae:	195b      	adds	r3, r3, r5
 8005fb0:	19db      	adds	r3, r3, r7
 8005fb2:	1962      	adds	r2, r4, r5
 8005fb4:	19d2      	adds	r2, r2, r7
 8005fb6:	7812      	ldrb	r2, [r2, #0]
 8005fb8:	701a      	strb	r2, [r3, #0]
					tResponse = 'G';
 8005fba:	2308      	movs	r3, #8
 8005fbc:	33ff      	adds	r3, #255	; 0xff
 8005fbe:	195b      	adds	r3, r3, r5
 8005fc0:	19db      	adds	r3, r3, r7
 8005fc2:	2247      	movs	r2, #71	; 0x47
 8005fc4:	701a      	strb	r2, [r3, #0]
					break;
 8005fc6:	e024      	b.n	8006012 <HAL_TIM_PeriodElapsedCallback+0x1146>
				if (ptr2 != NULL) {
 8005fc8:	238c      	movs	r3, #140	; 0x8c
 8005fca:	18fb      	adds	r3, r7, r3
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00f      	beq.n	8005ff2 <HAL_TIM_PeriodElapsedCallback+0x1126>
					tLine = i;
 8005fd2:	23eb      	movs	r3, #235	; 0xeb
 8005fd4:	2118      	movs	r1, #24
 8005fd6:	185b      	adds	r3, r3, r1
 8005fd8:	19db      	adds	r3, r3, r7
 8005fda:	22ea      	movs	r2, #234	; 0xea
 8005fdc:	1852      	adds	r2, r2, r1
 8005fde:	19d2      	adds	r2, r2, r7
 8005fe0:	7812      	ldrb	r2, [r2, #0]
 8005fe2:	701a      	strb	r2, [r3, #0]
					tResponse = 'B';
 8005fe4:	2308      	movs	r3, #8
 8005fe6:	33ff      	adds	r3, #255	; 0xff
 8005fe8:	185b      	adds	r3, r3, r1
 8005fea:	19db      	adds	r3, r3, r7
 8005fec:	2242      	movs	r2, #66	; 0x42
 8005fee:	701a      	strb	r2, [r3, #0]
					break;
 8005ff0:	e00f      	b.n	8006012 <HAL_TIM_PeriodElapsedCallback+0x1146>
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 8005ff2:	21ea      	movs	r1, #234	; 0xea
 8005ff4:	2018      	movs	r0, #24
 8005ff6:	180b      	adds	r3, r1, r0
 8005ff8:	19db      	adds	r3, r3, r7
 8005ffa:	781a      	ldrb	r2, [r3, #0]
 8005ffc:	180b      	adds	r3, r1, r0
 8005ffe:	19db      	adds	r3, r3, r7
 8006000:	3201      	adds	r2, #1
 8006002:	701a      	strb	r2, [r3, #0]
 8006004:	23ea      	movs	r3, #234	; 0xea
 8006006:	2218      	movs	r2, #24
 8006008:	189b      	adds	r3, r3, r2
 800600a:	19db      	adds	r3, r3, r7
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	2b05      	cmp	r3, #5
 8006010:	d9a6      	bls.n	8005f60 <HAL_TIM_PeriodElapsedCallback+0x1094>
			if (tLine != 99) {
 8006012:	23eb      	movs	r3, #235	; 0xeb
 8006014:	2218      	movs	r2, #24
 8006016:	189b      	adds	r3, r3, r2
 8006018:	19db      	adds	r3, r3, r7
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	2b63      	cmp	r3, #99	; 0x63
 800601e:	d01b      	beq.n	8006058 <HAL_TIM_PeriodElapsedCallback+0x118c>
				if (tResponse == 'G') {
 8006020:	2308      	movs	r3, #8
 8006022:	33ff      	adds	r3, #255	; 0xff
 8006024:	189b      	adds	r3, r3, r2
 8006026:	19db      	adds	r3, r3, r7
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	2b47      	cmp	r3, #71	; 0x47
 800602c:	d105      	bne.n	800603a <HAL_TIM_PeriodElapsedCallback+0x116e>
					isResponseOk = 1;
 800602e:	4b8d      	ldr	r3, [pc, #564]	; (8006264 <HAL_TIM_PeriodElapsedCallback+0x1398>)
 8006030:	2201      	movs	r2, #1
 8006032:	701a      	strb	r2, [r3, #0]
					clearit();
 8006034:	f000 fc44 	bl	80068c0 <clearit>
}
 8006038:	e107      	b.n	800624a <HAL_TIM_PeriodElapsedCallback+0x137e>
				} else if (tResponse == 'B') {
 800603a:	2308      	movs	r3, #8
 800603c:	33ff      	adds	r3, #255	; 0xff
 800603e:	2218      	movs	r2, #24
 8006040:	189b      	adds	r3, r3, r2
 8006042:	19db      	adds	r3, r3, r7
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	2b42      	cmp	r3, #66	; 0x42
 8006048:	d000      	beq.n	800604c <HAL_TIM_PeriodElapsedCallback+0x1180>
 800604a:	e0fe      	b.n	800624a <HAL_TIM_PeriodElapsedCallback+0x137e>
					isResponseOk = 1;
 800604c:	4b85      	ldr	r3, [pc, #532]	; (8006264 <HAL_TIM_PeriodElapsedCallback+0x1398>)
 800604e:	2201      	movs	r2, #1
 8006050:	701a      	strb	r2, [r3, #0]
					clearit();
 8006052:	f000 fc35 	bl	80068c0 <clearit>
}
 8006056:	e0f8      	b.n	800624a <HAL_TIM_PeriodElapsedCallback+0x137e>
				resTimeout--;
 8006058:	4b83      	ldr	r3, [pc, #524]	; (8006268 <HAL_TIM_PeriodElapsedCallback+0x139c>)
 800605a:	881b      	ldrh	r3, [r3, #0]
 800605c:	b29b      	uxth	r3, r3
 800605e:	3b01      	subs	r3, #1
 8006060:	b29a      	uxth	r2, r3
 8006062:	4b81      	ldr	r3, [pc, #516]	; (8006268 <HAL_TIM_PeriodElapsedCallback+0x139c>)
 8006064:	801a      	strh	r2, [r3, #0]
				if (resTimeout < 1) {
 8006066:	4b80      	ldr	r3, [pc, #512]	; (8006268 <HAL_TIM_PeriodElapsedCallback+0x139c>)
 8006068:	881b      	ldrh	r3, [r3, #0]
 800606a:	b29b      	uxth	r3, r3
 800606c:	2b00      	cmp	r3, #0
 800606e:	d000      	beq.n	8006072 <HAL_TIM_PeriodElapsedCallback+0x11a6>
 8006070:	e0eb      	b.n	800624a <HAL_TIM_PeriodElapsedCallback+0x137e>
					if (!recResponse) {
 8006072:	4b7e      	ldr	r3, [pc, #504]	; (800626c <HAL_TIM_PeriodElapsedCallback+0x13a0>)
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	b2db      	uxtb	r3, r3
 8006078:	2b00      	cmp	r3, #0
 800607a:	d101      	bne.n	8006080 <HAL_TIM_PeriodElapsedCallback+0x11b4>
						rebootsystem();
 800607c:	f000 f922 	bl	80062c4 <rebootsystem>
					isResponseOk = 0;
 8006080:	4b78      	ldr	r3, [pc, #480]	; (8006264 <HAL_TIM_PeriodElapsedCallback+0x1398>)
 8006082:	2200      	movs	r2, #0
 8006084:	701a      	strb	r2, [r3, #0]
					clearit();
 8006086:	f000 fc1b 	bl	80068c0 <clearit>
}
 800608a:	e0de      	b.n	800624a <HAL_TIM_PeriodElapsedCallback+0x137e>
	} else if (htim == &htim17) {
 800608c:	69fa      	ldr	r2, [r7, #28]
 800608e:	4b78      	ldr	r3, [pc, #480]	; (8006270 <HAL_TIM_PeriodElapsedCallback+0x13a4>)
 8006090:	429a      	cmp	r2, r3
 8006092:	d000      	beq.n	8006096 <HAL_TIM_PeriodElapsedCallback+0x11ca>
 8006094:	e0d9      	b.n	800624a <HAL_TIM_PeriodElapsedCallback+0x137e>
		for(uint8_t tLine =0; tLine< nmeaLC; tLine++){
 8006096:	23e9      	movs	r3, #233	; 0xe9
 8006098:	2218      	movs	r2, #24
 800609a:	189b      	adds	r3, r3, r2
 800609c:	19db      	adds	r3, r3, r7
 800609e:	2200      	movs	r2, #0
 80060a0:	701a      	strb	r2, [r3, #0]
 80060a2:	e068      	b.n	8006176 <HAL_TIM_PeriodElapsedCallback+0x12aa>
			uint8_t commandSize = 0;
 80060a4:	23e8      	movs	r3, #232	; 0xe8
 80060a6:	2418      	movs	r4, #24
 80060a8:	191b      	adds	r3, r3, r4
 80060aa:	19db      	adds	r3, r3, r7
 80060ac:	2200      	movs	r2, #0
 80060ae:	701a      	strb	r2, [r3, #0]
			tempSentenceCheck = strstr(nmeaResponse[tLine],"VTG");
 80060b0:	23e9      	movs	r3, #233	; 0xe9
 80060b2:	191b      	adds	r3, r3, r4
 80060b4:	19db      	adds	r3, r3, r7
 80060b6:	781a      	ldrb	r2, [r3, #0]
 80060b8:	0013      	movs	r3, r2
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	189b      	adds	r3, r3, r2
 80060be:	011a      	lsls	r2, r3, #4
 80060c0:	189b      	adds	r3, r3, r2
 80060c2:	4a6c      	ldr	r2, [pc, #432]	; (8006274 <HAL_TIM_PeriodElapsedCallback+0x13a8>)
 80060c4:	189b      	adds	r3, r3, r2
 80060c6:	4a6c      	ldr	r2, [pc, #432]	; (8006278 <HAL_TIM_PeriodElapsedCallback+0x13ac>)
 80060c8:	0011      	movs	r1, r2
 80060ca:	0018      	movs	r0, r3
 80060cc:	f008 fab7 	bl	800e63e <strstr>
 80060d0:	0003      	movs	r3, r0
 80060d2:	22dc      	movs	r2, #220	; 0xdc
 80060d4:	1911      	adds	r1, r2, r4
 80060d6:	19c9      	adds	r1, r1, r7
 80060d8:	600b      	str	r3, [r1, #0]
			if(tempSentenceCheck != NULL){
 80060da:	1913      	adds	r3, r2, r4
 80060dc:	19db      	adds	r3, r3, r7
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d00d      	beq.n	8006100 <HAL_TIM_PeriodElapsedCallback+0x1234>
				HAL_UART_Transmit(&GNSS_PORT, "$PMTK314,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*28\r\n",51,2000);
 80060e4:	23fa      	movs	r3, #250	; 0xfa
 80060e6:	00db      	lsls	r3, r3, #3
 80060e8:	4964      	ldr	r1, [pc, #400]	; (800627c <HAL_TIM_PeriodElapsedCallback+0x13b0>)
 80060ea:	4865      	ldr	r0, [pc, #404]	; (8006280 <HAL_TIM_PeriodElapsedCallback+0x13b4>)
 80060ec:	2233      	movs	r2, #51	; 0x33
 80060ee:	f006 faf3 	bl	800c6d8 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart4, "GNS SET\r\n", 9, 500);
 80060f2:	23fa      	movs	r3, #250	; 0xfa
 80060f4:	005b      	lsls	r3, r3, #1
 80060f6:	4963      	ldr	r1, [pc, #396]	; (8006284 <HAL_TIM_PeriodElapsedCallback+0x13b8>)
 80060f8:	4863      	ldr	r0, [pc, #396]	; (8006288 <HAL_TIM_PeriodElapsedCallback+0x13bc>)
 80060fa:	2209      	movs	r2, #9
 80060fc:	f006 faec 	bl	800c6d8 <HAL_UART_Transmit>
			for(uint8_t tChar =0 ;tChar<NMEA_MAX_CHARS;tChar++) {
 8006100:	23e7      	movs	r3, #231	; 0xe7
 8006102:	2218      	movs	r2, #24
 8006104:	189b      	adds	r3, r3, r2
 8006106:	19db      	adds	r3, r3, r7
 8006108:	2200      	movs	r2, #0
 800610a:	701a      	strb	r2, [r3, #0]
 800610c:	e021      	b.n	8006152 <HAL_TIM_PeriodElapsedCallback+0x1286>
				if(nmeaResponse[tLine][tChar] != NULL){
 800610e:	23e9      	movs	r3, #233	; 0xe9
 8006110:	2518      	movs	r5, #24
 8006112:	195b      	adds	r3, r3, r5
 8006114:	19db      	adds	r3, r3, r7
 8006116:	781a      	ldrb	r2, [r3, #0]
 8006118:	24e7      	movs	r4, #231	; 0xe7
 800611a:	1963      	adds	r3, r4, r5
 800611c:	19db      	adds	r3, r3, r7
 800611e:	7819      	ldrb	r1, [r3, #0]
 8006120:	4854      	ldr	r0, [pc, #336]	; (8006274 <HAL_TIM_PeriodElapsedCallback+0x13a8>)
 8006122:	0013      	movs	r3, r2
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	189b      	adds	r3, r3, r2
 8006128:	011a      	lsls	r2, r3, #4
 800612a:	189b      	adds	r3, r3, r2
 800612c:	18c3      	adds	r3, r0, r3
 800612e:	5c5b      	ldrb	r3, [r3, r1]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d016      	beq.n	8006162 <HAL_TIM_PeriodElapsedCallback+0x1296>
					commandSize++;
 8006134:	21e8      	movs	r1, #232	; 0xe8
 8006136:	194b      	adds	r3, r1, r5
 8006138:	19db      	adds	r3, r3, r7
 800613a:	781a      	ldrb	r2, [r3, #0]
 800613c:	194b      	adds	r3, r1, r5
 800613e:	19db      	adds	r3, r3, r7
 8006140:	3201      	adds	r2, #1
 8006142:	701a      	strb	r2, [r3, #0]
			for(uint8_t tChar =0 ;tChar<NMEA_MAX_CHARS;tChar++) {
 8006144:	1963      	adds	r3, r4, r5
 8006146:	19db      	adds	r3, r3, r7
 8006148:	781a      	ldrb	r2, [r3, #0]
 800614a:	1963      	adds	r3, r4, r5
 800614c:	19db      	adds	r3, r3, r7
 800614e:	3201      	adds	r2, #1
 8006150:	701a      	strb	r2, [r3, #0]
 8006152:	23e7      	movs	r3, #231	; 0xe7
 8006154:	2218      	movs	r2, #24
 8006156:	189b      	adds	r3, r3, r2
 8006158:	19db      	adds	r3, r3, r7
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	2b54      	cmp	r3, #84	; 0x54
 800615e:	d9d6      	bls.n	800610e <HAL_TIM_PeriodElapsedCallback+0x1242>
 8006160:	e000      	b.n	8006164 <HAL_TIM_PeriodElapsedCallback+0x1298>
					break;
 8006162:	46c0      	nop			; (mov r8, r8)
		for(uint8_t tLine =0; tLine< nmeaLC; tLine++){
 8006164:	21e9      	movs	r1, #233	; 0xe9
 8006166:	2018      	movs	r0, #24
 8006168:	180b      	adds	r3, r1, r0
 800616a:	19db      	adds	r3, r3, r7
 800616c:	781a      	ldrb	r2, [r3, #0]
 800616e:	180b      	adds	r3, r1, r0
 8006170:	19db      	adds	r3, r3, r7
 8006172:	3201      	adds	r2, #1
 8006174:	701a      	strb	r2, [r3, #0]
 8006176:	4b45      	ldr	r3, [pc, #276]	; (800628c <HAL_TIM_PeriodElapsedCallback+0x13c0>)
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	b2db      	uxtb	r3, r3
 800617c:	22e9      	movs	r2, #233	; 0xe9
 800617e:	2418      	movs	r4, #24
 8006180:	1912      	adds	r2, r2, r4
 8006182:	19d2      	adds	r2, r2, r7
 8006184:	7812      	ldrb	r2, [r2, #0]
 8006186:	429a      	cmp	r2, r3
 8006188:	d38c      	bcc.n	80060a4 <HAL_TIM_PeriodElapsedCallback+0x11d8>
		indicationCounter++;
 800618a:	4b41      	ldr	r3, [pc, #260]	; (8006290 <HAL_TIM_PeriodElapsedCallback+0x13c4>)
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	3301      	adds	r3, #1
 8006190:	b2da      	uxtb	r2, r3
 8006192:	4b3f      	ldr	r3, [pc, #252]	; (8006290 <HAL_TIM_PeriodElapsedCallback+0x13c4>)
 8006194:	701a      	strb	r2, [r3, #0]
		tempGps = nmea_parser(nmeaResponse, NMEA_MAX_CHARS,&crcc,&rCrc);
 8006196:	4b3f      	ldr	r3, [pc, #252]	; (8006294 <HAL_TIM_PeriodElapsedCallback+0x13c8>)
 8006198:	4a3f      	ldr	r2, [pc, #252]	; (8006298 <HAL_TIM_PeriodElapsedCallback+0x13cc>)
 800619a:	4836      	ldr	r0, [pc, #216]	; (8006274 <HAL_TIM_PeriodElapsedCallback+0x13a8>)
 800619c:	2155      	movs	r1, #85	; 0x55
 800619e:	f7fd f80f 	bl	80031c0 <nmea_parser>
 80061a2:	0003      	movs	r3, r0
 80061a4:	22e0      	movs	r2, #224	; 0xe0
 80061a6:	1911      	adds	r1, r2, r4
 80061a8:	19c9      	adds	r1, r1, r7
 80061aa:	600b      	str	r3, [r1, #0]
		if (tempGps != NULL) {
 80061ac:	1913      	adds	r3, r2, r4
 80061ae:	19db      	adds	r3, r3, r7
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d005      	beq.n	80061c2 <HAL_TIM_PeriodElapsedCallback+0x12f6>
			gps_info = tempGps;
 80061b6:	4b39      	ldr	r3, [pc, #228]	; (800629c <HAL_TIM_PeriodElapsedCallback+0x13d0>)
 80061b8:	1912      	adds	r2, r2, r4
 80061ba:	19d2      	adds	r2, r2, r7
 80061bc:	6812      	ldr	r2, [r2, #0]
 80061be:	601a      	str	r2, [r3, #0]
 80061c0:	e005      	b.n	80061ce <HAL_TIM_PeriodElapsedCallback+0x1302>
			HAL_UART_Transmit(&huart4, "WRONG", 5, 100);
 80061c2:	4937      	ldr	r1, [pc, #220]	; (80062a0 <HAL_TIM_PeriodElapsedCallback+0x13d4>)
 80061c4:	4830      	ldr	r0, [pc, #192]	; (8006288 <HAL_TIM_PeriodElapsedCallback+0x13bc>)
 80061c6:	2364      	movs	r3, #100	; 0x64
 80061c8:	2205      	movs	r2, #5
 80061ca:	f006 fa85 	bl	800c6d8 <HAL_UART_Transmit>
		HAL_TIM_Base_Stop_IT(&htim17);
 80061ce:	4b28      	ldr	r3, [pc, #160]	; (8006270 <HAL_TIM_PeriodElapsedCallback+0x13a4>)
 80061d0:	0018      	movs	r0, r3
 80061d2:	f005 fac9 	bl	800b768 <HAL_TIM_Base_Stop_IT>
		isGNSSTimStart = 0;
 80061d6:	4b33      	ldr	r3, [pc, #204]	; (80062a4 <HAL_TIM_PeriodElapsedCallback+0x13d8>)
 80061d8:	2200      	movs	r2, #0
 80061da:	701a      	strb	r2, [r3, #0]
		if (tim6Count > 5) {
 80061dc:	4b32      	ldr	r3, [pc, #200]	; (80062a8 <HAL_TIM_PeriodElapsedCallback+0x13dc>)
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	2b05      	cmp	r3, #5
 80061e2:	d914      	bls.n	800620e <HAL_TIM_PeriodElapsedCallback+0x1342>
			if (isLoggedIn == 0 && isTcpOpen == 0 && flashready == 1) {
 80061e4:	4b31      	ldr	r3, [pc, #196]	; (80062ac <HAL_TIM_PeriodElapsedCallback+0x13e0>)
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d10b      	bne.n	8006206 <HAL_TIM_PeriodElapsedCallback+0x133a>
 80061ee:	4b30      	ldr	r3, [pc, #192]	; (80062b0 <HAL_TIM_PeriodElapsedCallback+0x13e4>)
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d106      	bne.n	8006206 <HAL_TIM_PeriodElapsedCallback+0x133a>
 80061f8:	4b2e      	ldr	r3, [pc, #184]	; (80062b4 <HAL_TIM_PeriodElapsedCallback+0x13e8>)
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d101      	bne.n	8006206 <HAL_TIM_PeriodElapsedCallback+0x133a>
				save_data_packet();
 8006202:	f000 fdc7 	bl	8006d94 <save_data_packet>
			tim6Count = 0;
 8006206:	4b28      	ldr	r3, [pc, #160]	; (80062a8 <HAL_TIM_PeriodElapsedCallback+0x13dc>)
 8006208:	2200      	movs	r2, #0
 800620a:	701a      	strb	r2, [r3, #0]
 800620c:	e005      	b.n	800621a <HAL_TIM_PeriodElapsedCallback+0x134e>
			tim6Count++;
 800620e:	4b26      	ldr	r3, [pc, #152]	; (80062a8 <HAL_TIM_PeriodElapsedCallback+0x13dc>)
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	3301      	adds	r3, #1
 8006214:	b2da      	uxtb	r2, r3
 8006216:	4b24      	ldr	r3, [pc, #144]	; (80062a8 <HAL_TIM_PeriodElapsedCallback+0x13dc>)
 8006218:	701a      	strb	r2, [r3, #0]
		memset(nmeaResponse, 0, sizeof(nmeaResponse));
 800621a:	4a27      	ldr	r2, [pc, #156]	; (80062b8 <HAL_TIM_PeriodElapsedCallback+0x13ec>)
 800621c:	4b15      	ldr	r3, [pc, #84]	; (8006274 <HAL_TIM_PeriodElapsedCallback+0x13a8>)
 800621e:	2100      	movs	r1, #0
 8006220:	0018      	movs	r0, r3
 8006222:	f008 f9b4 	bl	800e58e <memset>
		nmeaLC = 0;
 8006226:	4b19      	ldr	r3, [pc, #100]	; (800628c <HAL_TIM_PeriodElapsedCallback+0x13c0>)
 8006228:	2200      	movs	r2, #0
 800622a:	701a      	strb	r2, [r3, #0]
		nmeaCC = 0;
 800622c:	4b23      	ldr	r3, [pc, #140]	; (80062bc <HAL_TIM_PeriodElapsedCallback+0x13f0>)
 800622e:	2200      	movs	r2, #0
 8006230:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&GNSS_PORT, GNSS_BUFFER, 1);
 8006232:	4923      	ldr	r1, [pc, #140]	; (80062c0 <HAL_TIM_PeriodElapsedCallback+0x13f4>)
 8006234:	4b12      	ldr	r3, [pc, #72]	; (8006280 <HAL_TIM_PeriodElapsedCallback+0x13b4>)
 8006236:	2201      	movs	r2, #1
 8006238:	0018      	movs	r0, r3
 800623a:	f006 fae9 	bl	800c810 <HAL_UART_Receive_IT>
		HAL_UART_Receive_IT(&GNSS_PORT, GNSS_BUFFER, 1);
 800623e:	4920      	ldr	r1, [pc, #128]	; (80062c0 <HAL_TIM_PeriodElapsedCallback+0x13f4>)
 8006240:	4b0f      	ldr	r3, [pc, #60]	; (8006280 <HAL_TIM_PeriodElapsedCallback+0x13b4>)
 8006242:	2201      	movs	r2, #1
 8006244:	0018      	movs	r0, r3
 8006246:	f006 fae3 	bl	800c810 <HAL_UART_Receive_IT>
}
 800624a:	46c0      	nop			; (mov r8, r8)
 800624c:	46bd      	mov	sp, r7
 800624e:	b048      	add	sp, #288	; 0x120
 8006250:	bc80      	pop	{r7}
 8006252:	46b8      	mov	r8, r7
 8006254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006256:	46c0      	nop			; (mov r8, r8)
 8006258:	2000071c 	.word	0x2000071c
 800625c:	08012af8 	.word	0x08012af8
 8006260:	08012a84 	.word	0x08012a84
 8006264:	20000854 	.word	0x20000854
 8006268:	20000850 	.word	0x20000850
 800626c:	20000855 	.word	0x20000855
 8006270:	20000400 	.word	0x20000400
 8006274:	20000898 	.word	0x20000898
 8006278:	08012b00 	.word	0x08012b00
 800627c:	08012b04 	.word	0x08012b04
 8006280:	2000053c 	.word	0x2000053c
 8006284:	08012b38 	.word	0x08012b38
 8006288:	20000664 	.word	0x20000664
 800628c:	2000084a 	.word	0x2000084a
 8006290:	20000701 	.word	0x20000701
 8006294:	20000703 	.word	0x20000703
 8006298:	20000702 	.word	0x20000702
 800629c:	20000020 	.word	0x20000020
 80062a0:	08012b44 	.word	0x08012b44
 80062a4:	20000852 	.word	0x20000852
 80062a8:	20000d42 	.word	0x20000d42
 80062ac:	20000d41 	.word	0x20000d41
 80062b0:	20000d3e 	.word	0x20000d3e
 80062b4:	2000102c 	.word	0x2000102c
 80062b8:	000004a6 	.word	0x000004a6
 80062bc:	2000084b 	.word	0x2000084b
 80062c0:	20000718 	.word	0x20000718

080062c4 <rebootsystem>:

void rebootsystem() {
 80062c4:	b580      	push	{r7, lr}
 80062c6:	af00      	add	r7, sp, #0
	save_to_flash();
 80062c8:	f000 f802 	bl	80062d0 <save_to_flash>
	// printf("rebooting system \n");
	NVIC_SystemReset();
 80062cc:	f7fd fe76 	bl	8003fbc <__NVIC_SystemReset>

080062d0 <save_to_flash>:

	// todo save flash info
}
void save_to_flash() {
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
	W25qxx_EraseSector(0);
 80062d6:	2000      	movs	r0, #0
 80062d8:	f002 f98a 	bl	80085f0 <W25qxx_EraseSector>
	W25qxx_WriteByte(1, 0);
 80062dc:	2100      	movs	r1, #0
 80062de:	2001      	movs	r0, #1
 80062e0:	f002 f9f6 	bl	80086d0 <W25qxx_WriteByte>
	uint8_t t[2];
	t[0] = StartSec >> 8;
 80062e4:	4b67      	ldr	r3, [pc, #412]	; (8006484 <save_to_flash+0x1b4>)
 80062e6:	881b      	ldrh	r3, [r3, #0]
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	0a1b      	lsrs	r3, r3, #8
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	b2da      	uxtb	r2, r3
 80062f0:	003b      	movs	r3, r7
 80062f2:	701a      	strb	r2, [r3, #0]
	t[1] = StartSec;
 80062f4:	4b63      	ldr	r3, [pc, #396]	; (8006484 <save_to_flash+0x1b4>)
 80062f6:	881b      	ldrh	r3, [r3, #0]
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	b2da      	uxtb	r2, r3
 80062fc:	003b      	movs	r3, r7
 80062fe:	705a      	strb	r2, [r3, #1]
	W25qxx_WriteByte(t[0], 1);
 8006300:	003b      	movs	r3, r7
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	2101      	movs	r1, #1
 8006306:	0018      	movs	r0, r3
 8006308:	f002 f9e2 	bl	80086d0 <W25qxx_WriteByte>
	W25qxx_WriteByte(t[1], 2);
 800630c:	003b      	movs	r3, r7
 800630e:	785b      	ldrb	r3, [r3, #1]
 8006310:	2102      	movs	r1, #2
 8006312:	0018      	movs	r0, r3
 8006314:	f002 f9dc 	bl	80086d0 <W25qxx_WriteByte>
	t[0] = StartN >> 8;
 8006318:	4b5b      	ldr	r3, [pc, #364]	; (8006488 <save_to_flash+0x1b8>)
 800631a:	881b      	ldrh	r3, [r3, #0]
 800631c:	b29b      	uxth	r3, r3
 800631e:	0a1b      	lsrs	r3, r3, #8
 8006320:	b29b      	uxth	r3, r3
 8006322:	b2da      	uxtb	r2, r3
 8006324:	003b      	movs	r3, r7
 8006326:	701a      	strb	r2, [r3, #0]
	t[1] = StartN;
 8006328:	4b57      	ldr	r3, [pc, #348]	; (8006488 <save_to_flash+0x1b8>)
 800632a:	881b      	ldrh	r3, [r3, #0]
 800632c:	b29b      	uxth	r3, r3
 800632e:	b2da      	uxtb	r2, r3
 8006330:	003b      	movs	r3, r7
 8006332:	705a      	strb	r2, [r3, #1]
	W25qxx_WriteByte(t[0], 3);
 8006334:	003b      	movs	r3, r7
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	2103      	movs	r1, #3
 800633a:	0018      	movs	r0, r3
 800633c:	f002 f9c8 	bl	80086d0 <W25qxx_WriteByte>
	W25qxx_WriteByte(t[1], 4);
 8006340:	003b      	movs	r3, r7
 8006342:	785b      	ldrb	r3, [r3, #1]
 8006344:	2104      	movs	r1, #4
 8006346:	0018      	movs	r0, r3
 8006348:	f002 f9c2 	bl	80086d0 <W25qxx_WriteByte>
	t[0] = EndSec >> 8;
 800634c:	4b4f      	ldr	r3, [pc, #316]	; (800648c <save_to_flash+0x1bc>)
 800634e:	881b      	ldrh	r3, [r3, #0]
 8006350:	b29b      	uxth	r3, r3
 8006352:	0a1b      	lsrs	r3, r3, #8
 8006354:	b29b      	uxth	r3, r3
 8006356:	b2da      	uxtb	r2, r3
 8006358:	003b      	movs	r3, r7
 800635a:	701a      	strb	r2, [r3, #0]
	t[1] = EndSec;
 800635c:	4b4b      	ldr	r3, [pc, #300]	; (800648c <save_to_flash+0x1bc>)
 800635e:	881b      	ldrh	r3, [r3, #0]
 8006360:	b29b      	uxth	r3, r3
 8006362:	b2da      	uxtb	r2, r3
 8006364:	003b      	movs	r3, r7
 8006366:	705a      	strb	r2, [r3, #1]
	W25qxx_WriteByte(t[0], 5);
 8006368:	003b      	movs	r3, r7
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	2105      	movs	r1, #5
 800636e:	0018      	movs	r0, r3
 8006370:	f002 f9ae 	bl	80086d0 <W25qxx_WriteByte>
	W25qxx_WriteByte(t[1], 6);
 8006374:	003b      	movs	r3, r7
 8006376:	785b      	ldrb	r3, [r3, #1]
 8006378:	2106      	movs	r1, #6
 800637a:	0018      	movs	r0, r3
 800637c:	f002 f9a8 	bl	80086d0 <W25qxx_WriteByte>
	t[0] = EndN >> 8;
 8006380:	4b43      	ldr	r3, [pc, #268]	; (8006490 <save_to_flash+0x1c0>)
 8006382:	881b      	ldrh	r3, [r3, #0]
 8006384:	b29b      	uxth	r3, r3
 8006386:	0a1b      	lsrs	r3, r3, #8
 8006388:	b29b      	uxth	r3, r3
 800638a:	b2da      	uxtb	r2, r3
 800638c:	003b      	movs	r3, r7
 800638e:	701a      	strb	r2, [r3, #0]
	t[1] = EndN;
 8006390:	4b3f      	ldr	r3, [pc, #252]	; (8006490 <save_to_flash+0x1c0>)
 8006392:	881b      	ldrh	r3, [r3, #0]
 8006394:	b29b      	uxth	r3, r3
 8006396:	b2da      	uxtb	r2, r3
 8006398:	003b      	movs	r3, r7
 800639a:	705a      	strb	r2, [r3, #1]
	W25qxx_WriteByte(t[0], 7);
 800639c:	003b      	movs	r3, r7
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	2107      	movs	r1, #7
 80063a2:	0018      	movs	r0, r3
 80063a4:	f002 f994 	bl	80086d0 <W25qxx_WriteByte>
	W25qxx_WriteByte(t[1], 8);
 80063a8:	003b      	movs	r3, r7
 80063aa:	785b      	ldrb	r3, [r3, #1]
 80063ac:	2108      	movs	r1, #8
 80063ae:	0018      	movs	r0, r3
 80063b0:	f002 f98e 	bl	80086d0 <W25qxx_WriteByte>

	W25qxx_WriteByte(cPin[0], 9);
 80063b4:	4b37      	ldr	r3, [pc, #220]	; (8006494 <save_to_flash+0x1c4>)
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	2109      	movs	r1, #9
 80063ba:	0018      	movs	r0, r3
 80063bc:	f002 f988 	bl	80086d0 <W25qxx_WriteByte>
	W25qxx_WriteByte(cPin[1], 10);
 80063c0:	4b34      	ldr	r3, [pc, #208]	; (8006494 <save_to_flash+0x1c4>)
 80063c2:	785b      	ldrb	r3, [r3, #1]
 80063c4:	210a      	movs	r1, #10
 80063c6:	0018      	movs	r0, r3
 80063c8:	f002 f982 	bl	80086d0 <W25qxx_WriteByte>
	W25qxx_WriteByte(cPin[2], 11);
 80063cc:	4b31      	ldr	r3, [pc, #196]	; (8006494 <save_to_flash+0x1c4>)
 80063ce:	789b      	ldrb	r3, [r3, #2]
 80063d0:	210b      	movs	r1, #11
 80063d2:	0018      	movs	r0, r3
 80063d4:	f002 f97c 	bl	80086d0 <W25qxx_WriteByte>
	W25qxx_WriteByte(cPin[3], 12);
 80063d8:	4b2e      	ldr	r3, [pc, #184]	; (8006494 <save_to_flash+0x1c4>)
 80063da:	78db      	ldrb	r3, [r3, #3]
 80063dc:	210c      	movs	r1, #12
 80063de:	0018      	movs	r0, r3
 80063e0:	f002 f976 	bl	80086d0 <W25qxx_WriteByte>

	for (uint8_t te = 13; te < 23; te++) {
 80063e4:	1dfb      	adds	r3, r7, #7
 80063e6:	220d      	movs	r2, #13
 80063e8:	701a      	strb	r2, [r3, #0]
 80063ea:	e00f      	b.n	800640c <save_to_flash+0x13c>
		W25qxx_WriteByte(validSender[te - 13], te);
 80063ec:	1dfb      	adds	r3, r7, #7
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	3b0d      	subs	r3, #13
 80063f2:	4a29      	ldr	r2, [pc, #164]	; (8006498 <save_to_flash+0x1c8>)
 80063f4:	5cd2      	ldrb	r2, [r2, r3]
 80063f6:	1dfb      	adds	r3, r7, #7
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	0019      	movs	r1, r3
 80063fc:	0010      	movs	r0, r2
 80063fe:	f002 f967 	bl	80086d0 <W25qxx_WriteByte>
	for (uint8_t te = 13; te < 23; te++) {
 8006402:	1dfb      	adds	r3, r7, #7
 8006404:	781a      	ldrb	r2, [r3, #0]
 8006406:	1dfb      	adds	r3, r7, #7
 8006408:	3201      	adds	r2, #1
 800640a:	701a      	strb	r2, [r3, #0]
 800640c:	1dfb      	adds	r3, r7, #7
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	2b16      	cmp	r3, #22
 8006412:	d9eb      	bls.n	80063ec <save_to_flash+0x11c>
	}

	for (uint8_t te = 23; te < 73; te++) {
 8006414:	1dbb      	adds	r3, r7, #6
 8006416:	2217      	movs	r2, #23
 8006418:	701a      	strb	r2, [r3, #0]
 800641a:	e00f      	b.n	800643c <save_to_flash+0x16c>
		W25qxx_WriteByte(domainAdd[te - 23], te);
 800641c:	1dbb      	adds	r3, r7, #6
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	3b17      	subs	r3, #23
 8006422:	4a1e      	ldr	r2, [pc, #120]	; (800649c <save_to_flash+0x1cc>)
 8006424:	5cd2      	ldrb	r2, [r2, r3]
 8006426:	1dbb      	adds	r3, r7, #6
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	0019      	movs	r1, r3
 800642c:	0010      	movs	r0, r2
 800642e:	f002 f94f 	bl	80086d0 <W25qxx_WriteByte>
	for (uint8_t te = 23; te < 73; te++) {
 8006432:	1dbb      	adds	r3, r7, #6
 8006434:	781a      	ldrb	r2, [r3, #0]
 8006436:	1dbb      	adds	r3, r7, #6
 8006438:	3201      	adds	r2, #1
 800643a:	701a      	strb	r2, [r3, #0]
 800643c:	1dbb      	adds	r3, r7, #6
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	2b48      	cmp	r3, #72	; 0x48
 8006442:	d9eb      	bls.n	800641c <save_to_flash+0x14c>
	}

	for (uint8_t te = 73; te < 79; te++) {
 8006444:	1d7b      	adds	r3, r7, #5
 8006446:	2249      	movs	r2, #73	; 0x49
 8006448:	701a      	strb	r2, [r3, #0]
 800644a:	e00f      	b.n	800646c <save_to_flash+0x19c>
		W25qxx_WriteByte(portAdd[te - 73], te);
 800644c:	1d7b      	adds	r3, r7, #5
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	3b49      	subs	r3, #73	; 0x49
 8006452:	4a13      	ldr	r2, [pc, #76]	; (80064a0 <save_to_flash+0x1d0>)
 8006454:	5cd2      	ldrb	r2, [r2, r3]
 8006456:	1d7b      	adds	r3, r7, #5
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	0019      	movs	r1, r3
 800645c:	0010      	movs	r0, r2
 800645e:	f002 f937 	bl	80086d0 <W25qxx_WriteByte>
	for (uint8_t te = 73; te < 79; te++) {
 8006462:	1d7b      	adds	r3, r7, #5
 8006464:	781a      	ldrb	r2, [r3, #0]
 8006466:	1d7b      	adds	r3, r7, #5
 8006468:	3201      	adds	r2, #1
 800646a:	701a      	strb	r2, [r3, #0]
 800646c:	1d7b      	adds	r3, r7, #5
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	2b4e      	cmp	r3, #78	; 0x4e
 8006472:	d9eb      	bls.n	800644c <save_to_flash+0x17c>
	}
	HAL_Delay(100);
 8006474:	2064      	movs	r0, #100	; 0x64
 8006476:	f002 fcb5 	bl	8008de4 <HAL_Delay>
	// HAL_UART_Transmit(&huart4, "saved to flash",
	// sizeof("saved to flash"), 100);

}
 800647a:	46c0      	nop			; (mov r8, r8)
 800647c:	46bd      	mov	sp, r7
 800647e:	b002      	add	sp, #8
 8006480:	bd80      	pop	{r7, pc}
 8006482:	46c0      	nop			; (mov r8, r8)
 8006484:	20001028 	.word	0x20001028
 8006488:	20001024 	.word	0x20001024
 800648c:	2000102a 	.word	0x2000102a
 8006490:	20001026 	.word	0x20001026
 8006494:	20000708 	.word	0x20000708
 8006498:	20000000 	.word	0x20000000
 800649c:	2000002c 	.word	0x2000002c
 80064a0:	20000024 	.word	0x20000024

080064a4 <send_command>:

void send_command(char *command, uint16_t timeout, uint8_t caseId,
		uint8_t retryCount, uint8_t isReset) {
 80064a4:	b590      	push	{r4, r7, lr}
 80064a6:	b085      	sub	sp, #20
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	000c      	movs	r4, r1
 80064ae:	0010      	movs	r0, r2
 80064b0:	0019      	movs	r1, r3
 80064b2:	1cbb      	adds	r3, r7, #2
 80064b4:	1c22      	adds	r2, r4, #0
 80064b6:	801a      	strh	r2, [r3, #0]
 80064b8:	1c7b      	adds	r3, r7, #1
 80064ba:	1c02      	adds	r2, r0, #0
 80064bc:	701a      	strb	r2, [r3, #0]
 80064be:	003b      	movs	r3, r7
 80064c0:	1c0a      	adds	r2, r1, #0
 80064c2:	701a      	strb	r2, [r3, #0]
	uint8_t processComplete = 0, processCount = 0;
 80064c4:	230f      	movs	r3, #15
 80064c6:	18fb      	adds	r3, r7, r3
 80064c8:	2200      	movs	r2, #0
 80064ca:	701a      	strb	r2, [r3, #0]
 80064cc:	230e      	movs	r3, #14
 80064ce:	18fb      	adds	r3, r7, r3
 80064d0:	2200      	movs	r2, #0
 80064d2:	701a      	strb	r2, [r3, #0]
	uint16_t commandSize = 0;
 80064d4:	230c      	movs	r3, #12
 80064d6:	18fb      	adds	r3, r7, r3
 80064d8:	2200      	movs	r2, #0
 80064da:	801a      	strh	r2, [r3, #0]
	uint16_t i = 0;
 80064dc:	230a      	movs	r3, #10
 80064de:	18fb      	adds	r3, r7, r3
 80064e0:	2200      	movs	r2, #0
 80064e2:	801a      	strh	r2, [r3, #0]
	while (command[i] != NULL) {
 80064e4:	e00b      	b.n	80064fe <send_command+0x5a>
		commandSize++;
 80064e6:	210c      	movs	r1, #12
 80064e8:	187b      	adds	r3, r7, r1
 80064ea:	881a      	ldrh	r2, [r3, #0]
 80064ec:	187b      	adds	r3, r7, r1
 80064ee:	3201      	adds	r2, #1
 80064f0:	801a      	strh	r2, [r3, #0]
		i++;
 80064f2:	210a      	movs	r1, #10
 80064f4:	187b      	adds	r3, r7, r1
 80064f6:	881a      	ldrh	r2, [r3, #0]
 80064f8:	187b      	adds	r3, r7, r1
 80064fa:	3201      	adds	r2, #1
 80064fc:	801a      	strh	r2, [r3, #0]
	while (command[i] != NULL) {
 80064fe:	230a      	movs	r3, #10
 8006500:	18fb      	adds	r3, r7, r3
 8006502:	881b      	ldrh	r3, [r3, #0]
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	18d3      	adds	r3, r2, r3
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d1eb      	bne.n	80064e6 <send_command+0x42>
	}
	while (processComplete == 0) {
 800650e:	e057      	b.n	80065c0 <send_command+0x11c>
		while (isBusy)
 8006510:	46c0      	nop			; (mov r8, r8)
 8006512:	4b31      	ldr	r3, [pc, #196]	; (80065d8 <send_command+0x134>)
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	b2db      	uxtb	r3, r3
 8006518:	2b00      	cmp	r3, #0
 800651a:	d1fa      	bne.n	8006512 <send_command+0x6e>
			;
		isBusy = 1;
 800651c:	4b2e      	ldr	r3, [pc, #184]	; (80065d8 <send_command+0x134>)
 800651e:	2201      	movs	r2, #1
 8006520:	701a      	strb	r2, [r3, #0]
		isResponseOk = 0;
 8006522:	4b2e      	ldr	r3, [pc, #184]	; (80065dc <send_command+0x138>)
 8006524:	2200      	movs	r2, #0
 8006526:	701a      	strb	r2, [r3, #0]
		commandCase = caseId;
 8006528:	4b2d      	ldr	r3, [pc, #180]	; (80065e0 <send_command+0x13c>)
 800652a:	1c7a      	adds	r2, r7, #1
 800652c:	7812      	ldrb	r2, [r2, #0]
 800652e:	701a      	strb	r2, [r3, #0]
		isStart = 1;
 8006530:	4b2c      	ldr	r3, [pc, #176]	; (80065e4 <send_command+0x140>)
 8006532:	2201      	movs	r2, #1
 8006534:	701a      	strb	r2, [r3, #0]
		recResponse = 0;
 8006536:	4b2c      	ldr	r3, [pc, #176]	; (80065e8 <send_command+0x144>)
 8006538:	2200      	movs	r2, #0
 800653a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&AT_PORT, command, commandSize, 1000);
 800653c:	23fa      	movs	r3, #250	; 0xfa
 800653e:	009c      	lsls	r4, r3, #2
 8006540:	230c      	movs	r3, #12
 8006542:	18fb      	adds	r3, r7, r3
 8006544:	881a      	ldrh	r2, [r3, #0]
 8006546:	6879      	ldr	r1, [r7, #4]
 8006548:	4828      	ldr	r0, [pc, #160]	; (80065ec <send_command+0x148>)
 800654a:	0023      	movs	r3, r4
 800654c:	f006 f8c4 	bl	800c6d8 <HAL_UART_Transmit>
		FIX_TIMER_TRIGGER(&htim16);
 8006550:	4b27      	ldr	r3, [pc, #156]	; (80065f0 <send_command+0x14c>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	2202      	movs	r2, #2
 8006556:	4252      	negs	r2, r2
 8006558:	611a      	str	r2, [r3, #16]
		HAL_TIM_Base_Start_IT(&htim16);
 800655a:	4b25      	ldr	r3, [pc, #148]	; (80065f0 <send_command+0x14c>)
 800655c:	0018      	movs	r0, r3
 800655e:	f005 f8ad 	bl	800b6bc <HAL_TIM_Base_Start_IT>
		resTimeout = timeout; //300 ms
 8006562:	4b24      	ldr	r3, [pc, #144]	; (80065f4 <send_command+0x150>)
 8006564:	1cba      	adds	r2, r7, #2
 8006566:	8812      	ldrh	r2, [r2, #0]
 8006568:	801a      	strh	r2, [r3, #0]
		while (isBusy)
 800656a:	46c0      	nop			; (mov r8, r8)
 800656c:	4b1a      	ldr	r3, [pc, #104]	; (80065d8 <send_command+0x134>)
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	b2db      	uxtb	r3, r3
 8006572:	2b00      	cmp	r3, #0
 8006574:	d1fa      	bne.n	800656c <send_command+0xc8>
			;
		commandCase = 0;
 8006576:	4b1a      	ldr	r3, [pc, #104]	; (80065e0 <send_command+0x13c>)
 8006578:	2200      	movs	r2, #0
 800657a:	701a      	strb	r2, [r3, #0]
		if (isResponseOk) {
 800657c:	4b17      	ldr	r3, [pc, #92]	; (80065dc <send_command+0x138>)
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	b2db      	uxtb	r3, r3
 8006582:	2b00      	cmp	r3, #0
 8006584:	d004      	beq.n	8006590 <send_command+0xec>
			processComplete = 1;
 8006586:	230f      	movs	r3, #15
 8006588:	18fb      	adds	r3, r7, r3
 800658a:	2201      	movs	r2, #1
 800658c:	701a      	strb	r2, [r3, #0]
 800658e:	e017      	b.n	80065c0 <send_command+0x11c>
		} else {
			//printf("failed\n");
			processCount++;
 8006590:	210e      	movs	r1, #14
 8006592:	187b      	adds	r3, r7, r1
 8006594:	781a      	ldrb	r2, [r3, #0]
 8006596:	187b      	adds	r3, r7, r1
 8006598:	3201      	adds	r2, #1
 800659a:	701a      	strb	r2, [r3, #0]
			if (processCount > retryCount) {
 800659c:	187a      	adds	r2, r7, r1
 800659e:	003b      	movs	r3, r7
 80065a0:	7812      	ldrb	r2, [r2, #0]
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d907      	bls.n	80065b8 <send_command+0x114>
				if (isReset == 1) {
 80065a8:	2320      	movs	r3, #32
 80065aa:	18fb      	adds	r3, r7, r3
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d10c      	bne.n	80065cc <send_command+0x128>
					rebootsystem();
 80065b2:	f7ff fe87 	bl	80062c4 <rebootsystem>
				}
				break;
 80065b6:	e009      	b.n	80065cc <send_command+0x128>
			}
			HAL_Delay(5000);
 80065b8:	4b0f      	ldr	r3, [pc, #60]	; (80065f8 <send_command+0x154>)
 80065ba:	0018      	movs	r0, r3
 80065bc:	f002 fc12 	bl	8008de4 <HAL_Delay>
	while (processComplete == 0) {
 80065c0:	230f      	movs	r3, #15
 80065c2:	18fb      	adds	r3, r7, r3
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d0a2      	beq.n	8006510 <send_command+0x6c>
		}
	}
}
 80065ca:	e000      	b.n	80065ce <send_command+0x12a>
				break;
 80065cc:	46c0      	nop			; (mov r8, r8)
}
 80065ce:	46c0      	nop			; (mov r8, r8)
 80065d0:	46bd      	mov	sp, r7
 80065d2:	b005      	add	sp, #20
 80065d4:	bd90      	pop	{r4, r7, pc}
 80065d6:	46c0      	nop			; (mov r8, r8)
 80065d8:	2000084d 	.word	0x2000084d
 80065dc:	20000854 	.word	0x20000854
 80065e0:	20000853 	.word	0x20000853
 80065e4:	2000084c 	.word	0x2000084c
 80065e8:	20000855 	.word	0x20000855
 80065ec:	200004a8 	.word	0x200004a8
 80065f0:	200003b4 	.word	0x200003b4
 80065f4:	20000850 	.word	0x20000850
 80065f8:	00001388 	.word	0x00001388

080065fc <quectel_init>:
void quectel_init() {
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af02      	add	r7, sp, #8
	// printf("--Sending AT-- \n");
	send_command("AT\r\n", 3, 1, 1, 1);
 8006602:	4819      	ldr	r0, [pc, #100]	; (8006668 <quectel_init+0x6c>)
 8006604:	2301      	movs	r3, #1
 8006606:	9300      	str	r3, [sp, #0]
 8006608:	2301      	movs	r3, #1
 800660a:	2201      	movs	r2, #1
 800660c:	2103      	movs	r1, #3
 800660e:	f7ff ff49 	bl	80064a4 <send_command>
	// printf("--sending AT+QIURC=1--\n");
	// send_command("AT+QIURC=1\r\n", 3, 1, 1,1);
	// printf("--Sending AT+CPIN-- \n");
	send_command("AT+CPIN?\r\n", 51, 2, 2, 1);
 8006612:	4816      	ldr	r0, [pc, #88]	; (800666c <quectel_init+0x70>)
 8006614:	2301      	movs	r3, #1
 8006616:	9300      	str	r3, [sp, #0]
 8006618:	2302      	movs	r3, #2
 800661a:	2202      	movs	r2, #2
 800661c:	2133      	movs	r1, #51	; 0x33
 800661e:	f7ff ff41 	bl	80064a4 <send_command>
	// printf("--Sending AT+CREG?-- \n");
	// send_command("AT+CREG?\r\n",3,3,5,1);
	// printf("--Sending AT+CGREG?-- \n");
	// send_command("AT+CGREG?\r\n",3,3,3,1);
	// printf("--Sending AT+CMGF=1-- \n");
	send_command("AT+CMGF=1\r\n", 3, 1, 3, 1);
 8006622:	4813      	ldr	r0, [pc, #76]	; (8006670 <quectel_init+0x74>)
 8006624:	2301      	movs	r3, #1
 8006626:	9300      	str	r3, [sp, #0]
 8006628:	2303      	movs	r3, #3
 800662a:	2201      	movs	r2, #1
 800662c:	2103      	movs	r1, #3
 800662e:	f7ff ff39 	bl	80064a4 <send_command>
	// printf("--Sending AT+CNMI=2,2-- \n");
	send_command("AT+CNMI=2,2\r\n", 3, 1, 3, 1);
 8006632:	4810      	ldr	r0, [pc, #64]	; (8006674 <quectel_init+0x78>)
 8006634:	2301      	movs	r3, #1
 8006636:	9300      	str	r3, [sp, #0]
 8006638:	2303      	movs	r3, #3
 800663a:	2201      	movs	r2, #1
 800663c:	2103      	movs	r1, #3
 800663e:	f7ff ff31 	bl	80064a4 <send_command>
	// printf("--Sending AT+CGSN--\r\n \n");
	send_command("AT+CGSN\r\n", 3, 4, 2, 1);
 8006642:	480d      	ldr	r0, [pc, #52]	; (8006678 <quectel_init+0x7c>)
 8006644:	2301      	movs	r3, #1
 8006646:	9300      	str	r3, [sp, #0]
 8006648:	2302      	movs	r3, #2
 800664a:	2204      	movs	r2, #4
 800664c:	2103      	movs	r1, #3
 800664e:	f7ff ff29 	bl	80064a4 <send_command>
	send_command("AT+QMGDA=\"DEL ALL\"\r\n", 50, 1, 0, 0);
 8006652:	480a      	ldr	r0, [pc, #40]	; (800667c <quectel_init+0x80>)
 8006654:	2300      	movs	r3, #0
 8006656:	9300      	str	r3, [sp, #0]
 8006658:	2300      	movs	r3, #0
 800665a:	2201      	movs	r2, #1
 800665c:	2132      	movs	r1, #50	; 0x32
 800665e:	f7ff ff21 	bl	80064a4 <send_command>

}
 8006662:	46c0      	nop			; (mov r8, r8)
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}
 8006668:	08012b4c 	.word	0x08012b4c
 800666c:	08012b54 	.word	0x08012b54
 8006670:	08012b60 	.word	0x08012b60
 8006674:	08012b6c 	.word	0x08012b6c
 8006678:	08012b7c 	.word	0x08012b7c
 800667c:	08012b88 	.word	0x08012b88

08006680 <estabilish_tcp>:

uint8_t estabilish_tcp() {
 8006680:	b580      	push	{r7, lr}
 8006682:	b082      	sub	sp, #8
 8006684:	af02      	add	r7, sp, #8
	// HAL_UART_Transmit(&huart4, "est tcp",
	// sizeof("est tcp"), 100);
	send_command("+++", 10, 1, 0, 0);
 8006686:	4853      	ldr	r0, [pc, #332]	; (80067d4 <estabilish_tcp+0x154>)
 8006688:	2300      	movs	r3, #0
 800668a:	9300      	str	r3, [sp, #0]
 800668c:	2300      	movs	r3, #0
 800668e:	2201      	movs	r2, #1
 8006690:	210a      	movs	r1, #10
 8006692:	f7ff ff07 	bl	80064a4 <send_command>
	memset(tcpCommand, 0, sizeof(tcpCommand));
 8006696:	4b50      	ldr	r3, [pc, #320]	; (80067d8 <estabilish_tcp+0x158>)
 8006698:	2232      	movs	r2, #50	; 0x32
 800669a:	2100      	movs	r1, #0
 800669c:	0018      	movs	r0, r3
 800669e:	f007 ff76 	bl	800e58e <memset>
	strcat(tcpCommand, "AT+QIOPEN=\"TCP\",");
 80066a2:	4b4d      	ldr	r3, [pc, #308]	; (80067d8 <estabilish_tcp+0x158>)
 80066a4:	0018      	movs	r0, r3
 80066a6:	f7f9 fd35 	bl	8000114 <strlen>
 80066aa:	0003      	movs	r3, r0
 80066ac:	001a      	movs	r2, r3
 80066ae:	4b4a      	ldr	r3, [pc, #296]	; (80067d8 <estabilish_tcp+0x158>)
 80066b0:	18d2      	adds	r2, r2, r3
 80066b2:	4b4a      	ldr	r3, [pc, #296]	; (80067dc <estabilish_tcp+0x15c>)
 80066b4:	0010      	movs	r0, r2
 80066b6:	0019      	movs	r1, r3
 80066b8:	2311      	movs	r3, #17
 80066ba:	001a      	movs	r2, r3
 80066bc:	f007 ff5e 	bl	800e57c <memcpy>
	strcat(tcpCommand, domainAdd);
 80066c0:	4a47      	ldr	r2, [pc, #284]	; (80067e0 <estabilish_tcp+0x160>)
 80066c2:	4b45      	ldr	r3, [pc, #276]	; (80067d8 <estabilish_tcp+0x158>)
 80066c4:	0011      	movs	r1, r2
 80066c6:	0018      	movs	r0, r3
 80066c8:	f007 ff8a 	bl	800e5e0 <strcat>
	strcat(tcpCommand, ",");
 80066cc:	4b42      	ldr	r3, [pc, #264]	; (80067d8 <estabilish_tcp+0x158>)
 80066ce:	0018      	movs	r0, r3
 80066d0:	f7f9 fd20 	bl	8000114 <strlen>
 80066d4:	0003      	movs	r3, r0
 80066d6:	001a      	movs	r2, r3
 80066d8:	4b3f      	ldr	r3, [pc, #252]	; (80067d8 <estabilish_tcp+0x158>)
 80066da:	18d2      	adds	r2, r2, r3
 80066dc:	4b41      	ldr	r3, [pc, #260]	; (80067e4 <estabilish_tcp+0x164>)
 80066de:	0010      	movs	r0, r2
 80066e0:	0019      	movs	r1, r3
 80066e2:	2302      	movs	r3, #2
 80066e4:	001a      	movs	r2, r3
 80066e6:	f007 ff49 	bl	800e57c <memcpy>
	strcat(tcpCommand, portAdd);
 80066ea:	4a3f      	ldr	r2, [pc, #252]	; (80067e8 <estabilish_tcp+0x168>)
 80066ec:	4b3a      	ldr	r3, [pc, #232]	; (80067d8 <estabilish_tcp+0x158>)
 80066ee:	0011      	movs	r1, r2
 80066f0:	0018      	movs	r0, r3
 80066f2:	f007 ff75 	bl	800e5e0 <strcat>
	strcat(tcpCommand, "\r\n");
 80066f6:	4b38      	ldr	r3, [pc, #224]	; (80067d8 <estabilish_tcp+0x158>)
 80066f8:	0018      	movs	r0, r3
 80066fa:	f7f9 fd0b 	bl	8000114 <strlen>
 80066fe:	0003      	movs	r3, r0
 8006700:	001a      	movs	r2, r3
 8006702:	4b35      	ldr	r3, [pc, #212]	; (80067d8 <estabilish_tcp+0x158>)
 8006704:	18d2      	adds	r2, r2, r3
 8006706:	4b39      	ldr	r3, [pc, #228]	; (80067ec <estabilish_tcp+0x16c>)
 8006708:	0010      	movs	r0, r2
 800670a:	0019      	movs	r1, r3
 800670c:	2303      	movs	r3, #3
 800670e:	001a      	movs	r2, r3
 8006710:	f007 ff34 	bl	800e57c <memcpy>
	// printf("--Sent AT+QIDEACT \n");
	send_command("AT+QIDEACT\r\n", 401, 1, 2, 0);
 8006714:	2392      	movs	r3, #146	; 0x92
 8006716:	33ff      	adds	r3, #255	; 0xff
 8006718:	0019      	movs	r1, r3
 800671a:	4835      	ldr	r0, [pc, #212]	; (80067f0 <estabilish_tcp+0x170>)
 800671c:	2300      	movs	r3, #0
 800671e:	9300      	str	r3, [sp, #0]
 8006720:	2302      	movs	r3, #2
 8006722:	2201      	movs	r2, #1
 8006724:	f7ff febe 	bl	80064a4 <send_command>

	if (isResponseOk == 0) {
 8006728:	4b32      	ldr	r3, [pc, #200]	; (80067f4 <estabilish_tcp+0x174>)
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	b2db      	uxtb	r3, r3
 800672e:	2b00      	cmp	r3, #0
 8006730:	d101      	bne.n	8006736 <estabilish_tcp+0xb6>
		return 0;
 8006732:	2300      	movs	r3, #0
 8006734:	e04b      	b.n	80067ce <estabilish_tcp+0x14e>
	}
	send_command("AT+QIMODE=1\r\n", 3, 1, 3, 0);
 8006736:	4830      	ldr	r0, [pc, #192]	; (80067f8 <estabilish_tcp+0x178>)
 8006738:	2300      	movs	r3, #0
 800673a:	9300      	str	r3, [sp, #0]
 800673c:	2303      	movs	r3, #3
 800673e:	2201      	movs	r2, #1
 8006740:	2103      	movs	r1, #3
 8006742:	f7ff feaf 	bl	80064a4 <send_command>
	if (isResponseOk == 0) {
 8006746:	4b2b      	ldr	r3, [pc, #172]	; (80067f4 <estabilish_tcp+0x174>)
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	b2db      	uxtb	r3, r3
 800674c:	2b00      	cmp	r3, #0
 800674e:	d101      	bne.n	8006754 <estabilish_tcp+0xd4>
		return 0;
 8006750:	2300      	movs	r3, #0
 8006752:	e03c      	b.n	80067ce <estabilish_tcp+0x14e>
	}
	send_command("AT+QITCFG=3,2,512,1\r\n", 3, 1, 1, 0);
 8006754:	4829      	ldr	r0, [pc, #164]	; (80067fc <estabilish_tcp+0x17c>)
 8006756:	2300      	movs	r3, #0
 8006758:	9300      	str	r3, [sp, #0]
 800675a:	2301      	movs	r3, #1
 800675c:	2201      	movs	r2, #1
 800675e:	2103      	movs	r1, #3
 8006760:	f7ff fea0 	bl	80064a4 <send_command>
	if (isResponseOk == 0) {
 8006764:	4b23      	ldr	r3, [pc, #140]	; (80067f4 <estabilish_tcp+0x174>)
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	b2db      	uxtb	r3, r3
 800676a:	2b00      	cmp	r3, #0
 800676c:	d101      	bne.n	8006772 <estabilish_tcp+0xf2>
		return 0;
 800676e:	2300      	movs	r3, #0
 8006770:	e02d      	b.n	80067ce <estabilish_tcp+0x14e>
	}
	send_command("AT+QIREGAPP=\"network\",\"\",\"\"\r\n", 3, 1, 1, 0);
 8006772:	4823      	ldr	r0, [pc, #140]	; (8006800 <estabilish_tcp+0x180>)
 8006774:	2300      	movs	r3, #0
 8006776:	9300      	str	r3, [sp, #0]
 8006778:	2301      	movs	r3, #1
 800677a:	2201      	movs	r2, #1
 800677c:	2103      	movs	r1, #3
 800677e:	f7ff fe91 	bl	80064a4 <send_command>
	if (isResponseOk == 0) {
 8006782:	4b1c      	ldr	r3, [pc, #112]	; (80067f4 <estabilish_tcp+0x174>)
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	b2db      	uxtb	r3, r3
 8006788:	2b00      	cmp	r3, #0
 800678a:	d101      	bne.n	8006790 <estabilish_tcp+0x110>
		return 0;
 800678c:	2300      	movs	r3, #0
 800678e:	e01e      	b.n	80067ce <estabilish_tcp+0x14e>
	}
	send_command("AT+QIACT\r\n", 15100, 1, 0, 0);
 8006790:	491c      	ldr	r1, [pc, #112]	; (8006804 <estabilish_tcp+0x184>)
 8006792:	481d      	ldr	r0, [pc, #116]	; (8006808 <estabilish_tcp+0x188>)
 8006794:	2300      	movs	r3, #0
 8006796:	9300      	str	r3, [sp, #0]
 8006798:	2300      	movs	r3, #0
 800679a:	2201      	movs	r2, #1
 800679c:	f7ff fe82 	bl	80064a4 <send_command>
	if (isResponseOk == 0) {
 80067a0:	4b14      	ldr	r3, [pc, #80]	; (80067f4 <estabilish_tcp+0x174>)
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d101      	bne.n	80067ae <estabilish_tcp+0x12e>
		return 0;
 80067aa:	2300      	movs	r3, #0
 80067ac:	e00f      	b.n	80067ce <estabilish_tcp+0x14e>
	}
	// HAL_UART_Transmit(&huart4, "S qiopen", sizeof("S qiopen"), 100);

	send_command(tcpCommand, 7510, 5, 2, 0);
 80067ae:	4917      	ldr	r1, [pc, #92]	; (800680c <estabilish_tcp+0x18c>)
 80067b0:	4809      	ldr	r0, [pc, #36]	; (80067d8 <estabilish_tcp+0x158>)
 80067b2:	2300      	movs	r3, #0
 80067b4:	9300      	str	r3, [sp, #0]
 80067b6:	2302      	movs	r3, #2
 80067b8:	2205      	movs	r2, #5
 80067ba:	f7ff fe73 	bl	80064a4 <send_command>
	if (isResponseOk == 1) {
 80067be:	4b0d      	ldr	r3, [pc, #52]	; (80067f4 <estabilish_tcp+0x174>)
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d101      	bne.n	80067cc <estabilish_tcp+0x14c>
		return 1;
 80067c8:	2301      	movs	r3, #1
 80067ca:	e000      	b.n	80067ce <estabilish_tcp+0x14e>
	} else {
		return 0;
 80067cc:	2300      	movs	r3, #0
	}
}
 80067ce:	0018      	movs	r0, r3
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	08012ba0 	.word	0x08012ba0
 80067d8:	20000864 	.word	0x20000864
 80067dc:	08012ba4 	.word	0x08012ba4
 80067e0:	2000002c 	.word	0x2000002c
 80067e4:	08012bb8 	.word	0x08012bb8
 80067e8:	20000024 	.word	0x20000024
 80067ec:	08012bbc 	.word	0x08012bbc
 80067f0:	08012bc0 	.word	0x08012bc0
 80067f4:	20000854 	.word	0x20000854
 80067f8:	08012bd0 	.word	0x08012bd0
 80067fc:	08012be0 	.word	0x08012be0
 8006800:	08012bf8 	.word	0x08012bf8
 8006804:	00003afc 	.word	0x00003afc
 8006808:	08012c18 	.word	0x08012c18
 800680c:	00001d56 	.word	0x00001d56

08006810 <GetCrc16>:

uint16_t GetCrc16(const uint8_t *pData, int nLength) {
 8006810:	b580      	push	{r7, lr}
 8006812:	b084      	sub	sp, #16
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	6039      	str	r1, [r7, #0]
	uint16_t fcs = 0xffff; // initialization
 800681a:	230e      	movs	r3, #14
 800681c:	18fb      	adds	r3, r7, r3
 800681e:	2201      	movs	r2, #1
 8006820:	4252      	negs	r2, r2
 8006822:	801a      	strh	r2, [r3, #0]
	int a = 0;
 8006824:	2300      	movs	r3, #0
 8006826:	60bb      	str	r3, [r7, #8]
	while (nLength > 0) {
 8006828:	e019      	b.n	800685e <GetCrc16+0x4e>
		a = (fcs ^ *pData) & 0xff;
 800682a:	200e      	movs	r0, #14
 800682c:	183b      	adds	r3, r7, r0
 800682e:	881b      	ldrh	r3, [r3, #0]
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	7812      	ldrb	r2, [r2, #0]
 8006834:	4053      	eors	r3, r2
 8006836:	22ff      	movs	r2, #255	; 0xff
 8006838:	4013      	ands	r3, r2
 800683a:	60bb      	str	r3, [r7, #8]
		fcs = (fcs >> 8) ^ crctab16[a];
 800683c:	183b      	adds	r3, r7, r0
 800683e:	881b      	ldrh	r3, [r3, #0]
 8006840:	0a1b      	lsrs	r3, r3, #8
 8006842:	b299      	uxth	r1, r3
 8006844:	4b0c      	ldr	r3, [pc, #48]	; (8006878 <GetCrc16+0x68>)
 8006846:	68ba      	ldr	r2, [r7, #8]
 8006848:	0052      	lsls	r2, r2, #1
 800684a:	5ad2      	ldrh	r2, [r2, r3]
 800684c:	183b      	adds	r3, r7, r0
 800684e:	404a      	eors	r2, r1
 8006850:	801a      	strh	r2, [r3, #0]
		nLength--;
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	3b01      	subs	r3, #1
 8006856:	603b      	str	r3, [r7, #0]
		pData++;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	3301      	adds	r3, #1
 800685c:	607b      	str	r3, [r7, #4]
	while (nLength > 0) {
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	2b00      	cmp	r3, #0
 8006862:	dce2      	bgt.n	800682a <GetCrc16+0x1a>
	}
	return ~fcs; // negated
 8006864:	230e      	movs	r3, #14
 8006866:	18fb      	adds	r3, r7, r3
 8006868:	881b      	ldrh	r3, [r3, #0]
 800686a:	43db      	mvns	r3, r3
 800686c:	b29b      	uxth	r3, r3
}
 800686e:	0018      	movs	r0, r3
 8006870:	46bd      	mov	sp, r7
 8006872:	b004      	add	sp, #16
 8006874:	bd80      	pop	{r7, pc}
 8006876:	46c0      	nop			; (mov r8, r8)
 8006878:	08012d80 	.word	0x08012d80

0800687c <where_api_handler>:

void where_api_handler() {
 800687c:	b580      	push	{r7, lr}
 800687e:	b082      	sub	sp, #8
 8006880:	af02      	add	r7, sp, #8
	if (isWhereApiCalled == 1) {
 8006882:	4b0c      	ldr	r3, [pc, #48]	; (80068b4 <where_api_handler+0x38>)
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	2b01      	cmp	r3, #1
 8006888:	d110      	bne.n	80068ac <where_api_handler+0x30>
		// printf("--Sending AT+CREG?-- \n");
		// HAL_UART_Transmit(&huart4, "S creg in api", sizeof("S creg in api"),
		// 100);
		send_command("AT+CREG?\r\n", 3, 3, 3, 1);
 800688a:	480b      	ldr	r0, [pc, #44]	; (80068b8 <where_api_handler+0x3c>)
 800688c:	2301      	movs	r3, #1
 800688e:	9300      	str	r3, [sp, #0]
 8006890:	2303      	movs	r3, #3
 8006892:	2203      	movs	r2, #3
 8006894:	2103      	movs	r1, #3
 8006896:	f7ff fe05 	bl	80064a4 <send_command>
		if (isReg == 1) {
 800689a:	4b08      	ldr	r3, [pc, #32]	; (80068bc <where_api_handler+0x40>)
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d104      	bne.n	80068ac <where_api_handler+0x30>
			//todo send current location via sms
			//printf("sending current location");
			send_current_location_via_sms(); //sending current location
 80068a2:	f000 fd35 	bl	8007310 <send_current_location_via_sms>
			isWhereApiCalled = 0;
 80068a6:	4b03      	ldr	r3, [pc, #12]	; (80068b4 <where_api_handler+0x38>)
 80068a8:	2200      	movs	r2, #0
 80068aa:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80068ac:	46c0      	nop			; (mov r8, r8)
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	46c0      	nop			; (mov r8, r8)
 80068b4:	20000d40 	.word	0x20000d40
 80068b8:	08012a58 	.word	0x08012a58
 80068bc:	20000d3f 	.word	0x20000d3f

080068c0 <clearit>:

void clearit() {
 80068c0:	b580      	push	{r7, lr}
 80068c2:	af00      	add	r7, sp, #0
	resTimeout = 3;
 80068c4:	4b0e      	ldr	r3, [pc, #56]	; (8006900 <clearit+0x40>)
 80068c6:	2203      	movs	r2, #3
 80068c8:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim16);
 80068ca:	4b0e      	ldr	r3, [pc, #56]	; (8006904 <clearit+0x44>)
 80068cc:	0018      	movs	r0, r3
 80068ce:	f004 ff4b 	bl	800b768 <HAL_TIM_Base_Stop_IT>
	memset(responseBuffer, 0, sizeof(responseBuffer));
 80068d2:	2396      	movs	r3, #150	; 0x96
 80068d4:	005a      	lsls	r2, r3, #1
 80068d6:	4b0c      	ldr	r3, [pc, #48]	; (8006908 <clearit+0x48>)
 80068d8:	2100      	movs	r1, #0
 80068da:	0018      	movs	r0, r3
 80068dc:	f007 fe57 	bl	800e58e <memset>
	lineCount = 0;
 80068e0:	4b0a      	ldr	r3, [pc, #40]	; (800690c <clearit+0x4c>)
 80068e2:	2200      	movs	r2, #0
 80068e4:	701a      	strb	r2, [r3, #0]
	charCount = 0;
 80068e6:	4b0a      	ldr	r3, [pc, #40]	; (8006910 <clearit+0x50>)
 80068e8:	2200      	movs	r2, #0
 80068ea:	701a      	strb	r2, [r3, #0]
	isStart = 0;
 80068ec:	4b09      	ldr	r3, [pc, #36]	; (8006914 <clearit+0x54>)
 80068ee:	2200      	movs	r2, #0
 80068f0:	701a      	strb	r2, [r3, #0]
	isBusy = 0;
 80068f2:	4b09      	ldr	r3, [pc, #36]	; (8006918 <clearit+0x58>)
 80068f4:	2200      	movs	r2, #0
 80068f6:	701a      	strb	r2, [r3, #0]

}
 80068f8:	46c0      	nop			; (mov r8, r8)
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	46c0      	nop			; (mov r8, r8)
 8006900:	20000850 	.word	0x20000850
 8006904:	200003b4 	.word	0x200003b4
 8006908:	2000071c 	.word	0x2000071c
 800690c:	20000848 	.word	0x20000848
 8006910:	20000849 	.word	0x20000849
 8006914:	2000084c 	.word	0x2000084c
 8006918:	2000084d 	.word	0x2000084d

0800691c <incoming_msg_handler>:

void incoming_msg_handler() {
 800691c:	b580      	push	{r7, lr}
 800691e:	b082      	sub	sp, #8
 8006920:	af02      	add	r7, sp, #8
	if (isPulse == 1) {
 8006922:	4b26      	ldr	r3, [pc, #152]	; (80069bc <incoming_msg_handler+0xa0>)
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	b2db      	uxtb	r3, r3
 8006928:	2b01      	cmp	r3, #1
 800692a:	d144      	bne.n	80069b6 <incoming_msg_handler+0x9a>
		isPulse = 0;
 800692c:	4b23      	ldr	r3, [pc, #140]	; (80069bc <incoming_msg_handler+0xa0>)
 800692e:	2200      	movs	r2, #0
 8006930:	701a      	strb	r2, [r3, #0]
		//printf("--Sending +++-- \n");
		//HAL_UART_Transmit(&huart4, "S +++ incom", sizeof("S +++ incom"), 100);
		send_command("+++", 10, 1, 0, 0);
 8006932:	4823      	ldr	r0, [pc, #140]	; (80069c0 <incoming_msg_handler+0xa4>)
 8006934:	2300      	movs	r3, #0
 8006936:	9300      	str	r3, [sp, #0]
 8006938:	2300      	movs	r3, #0
 800693a:	2201      	movs	r2, #1
 800693c:	210a      	movs	r1, #10
 800693e:	f7ff fdb1 	bl	80064a4 <send_command>
		isDataMode = 0;
 8006942:	4b20      	ldr	r3, [pc, #128]	; (80069c4 <incoming_msg_handler+0xa8>)
 8006944:	2200      	movs	r2, #0
 8006946:	701a      	strb	r2, [r3, #0]
		indicationCounter = 0;
 8006948:	4b1f      	ldr	r3, [pc, #124]	; (80069c8 <incoming_msg_handler+0xac>)
 800694a:	2200      	movs	r2, #0
 800694c:	701a      	strb	r2, [r3, #0]
		while (indicationCounter < 5)
 800694e:	46c0      	nop			; (mov r8, r8)
 8006950:	4b1d      	ldr	r3, [pc, #116]	; (80069c8 <incoming_msg_handler+0xac>)
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	2b04      	cmp	r3, #4
 8006956:	d9fb      	bls.n	8006950 <incoming_msg_handler+0x34>
			;
		where_api_handler();
 8006958:	f7ff ff90 	bl	800687c <where_api_handler>
		//HAL_UART_Transmit(&huart4, "S msg del", sizeof("S msg del"), 100);
		send_command("AT+QMGDA=\"DEL ALL\"\r\n", 50, 1, 0, 0);
 800695c:	481b      	ldr	r0, [pc, #108]	; (80069cc <incoming_msg_handler+0xb0>)
 800695e:	2300      	movs	r3, #0
 8006960:	9300      	str	r3, [sp, #0]
 8006962:	2300      	movs	r3, #0
 8006964:	2201      	movs	r2, #1
 8006966:	2132      	movs	r1, #50	; 0x32
 8006968:	f7ff fd9c 	bl	80064a4 <send_command>
		msgcleared = 0;
 800696c:	4b18      	ldr	r3, [pc, #96]	; (80069d0 <incoming_msg_handler+0xb4>)
 800696e:	2200      	movs	r2, #0
 8006970:	701a      	strb	r2, [r3, #0]
		if (isResponseOk == 1) {
 8006972:	4b18      	ldr	r3, [pc, #96]	; (80069d4 <incoming_msg_handler+0xb8>)
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	b2db      	uxtb	r3, r3
 8006978:	2b01      	cmp	r3, #1
 800697a:	d102      	bne.n	8006982 <incoming_msg_handler+0x66>
			msgcleared = 1;
 800697c:	4b14      	ldr	r3, [pc, #80]	; (80069d0 <incoming_msg_handler+0xb4>)
 800697e:	2201      	movs	r2, #1
 8006980:	701a      	strb	r2, [r3, #0]
		}
		//printf("--Sending ATO-- \n");
		send_command("ATO\r\n", 10, 6, 0, 0);
 8006982:	4815      	ldr	r0, [pc, #84]	; (80069d8 <incoming_msg_handler+0xbc>)
 8006984:	2300      	movs	r3, #0
 8006986:	9300      	str	r3, [sp, #0]
 8006988:	2300      	movs	r3, #0
 800698a:	2206      	movs	r2, #6
 800698c:	210a      	movs	r1, #10
 800698e:	f7ff fd89 	bl	80064a4 <send_command>
		if (isResponseOk == 1) {
 8006992:	4b10      	ldr	r3, [pc, #64]	; (80069d4 <incoming_msg_handler+0xb8>)
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	b2db      	uxtb	r3, r3
 8006998:	2b01      	cmp	r3, #1
 800699a:	d103      	bne.n	80069a4 <incoming_msg_handler+0x88>
			isDataMode = 1;
 800699c:	4b09      	ldr	r3, [pc, #36]	; (80069c4 <incoming_msg_handler+0xa8>)
 800699e:	2201      	movs	r2, #1
 80069a0:	701a      	strb	r2, [r3, #0]
			isDataMode = 0;
			isTcpOpen = 0;
		}
	}

}
 80069a2:	e008      	b.n	80069b6 <incoming_msg_handler+0x9a>
			isLoggedIn = 0;
 80069a4:	4b0d      	ldr	r3, [pc, #52]	; (80069dc <incoming_msg_handler+0xc0>)
 80069a6:	2200      	movs	r2, #0
 80069a8:	701a      	strb	r2, [r3, #0]
			isDataMode = 0;
 80069aa:	4b06      	ldr	r3, [pc, #24]	; (80069c4 <incoming_msg_handler+0xa8>)
 80069ac:	2200      	movs	r2, #0
 80069ae:	701a      	strb	r2, [r3, #0]
			isTcpOpen = 0;
 80069b0:	4b0b      	ldr	r3, [pc, #44]	; (80069e0 <incoming_msg_handler+0xc4>)
 80069b2:	2200      	movs	r2, #0
 80069b4:	701a      	strb	r2, [r3, #0]
}
 80069b6:	46c0      	nop			; (mov r8, r8)
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}
 80069bc:	2000070e 	.word	0x2000070e
 80069c0:	08012ba0 	.word	0x08012ba0
 80069c4:	2000084e 	.word	0x2000084e
 80069c8:	20000701 	.word	0x20000701
 80069cc:	08012b88 	.word	0x08012b88
 80069d0:	20000860 	.word	0x20000860
 80069d4:	20000854 	.word	0x20000854
 80069d8:	08012c24 	.word	0x08012c24
 80069dc:	20000d41 	.word	0x20000d41
 80069e0:	20000d3e 	.word	0x20000d3e

080069e4 <send_login_packet>:

void send_login_packet() {
 80069e4:	b5b0      	push	{r4, r5, r7, lr}
 80069e6:	b086      	sub	sp, #24
 80069e8:	af00      	add	r7, sp, #0
	if (isTcpOpen == 1 && isDataMode == 1) {
 80069ea:	4b39      	ldr	r3, [pc, #228]	; (8006ad0 <send_login_packet+0xec>)
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d169      	bne.n	8006ac8 <send_login_packet+0xe4>
 80069f4:	4b37      	ldr	r3, [pc, #220]	; (8006ad4 <send_login_packet+0xf0>)
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d164      	bne.n	8006ac8 <send_login_packet+0xe4>
		for (uint8_t i = 0; i < 8; i++) {
 80069fe:	2317      	movs	r3, #23
 8006a00:	18fb      	adds	r3, r7, r3
 8006a02:	2200      	movs	r2, #0
 8006a04:	701a      	strb	r2, [r3, #0]
 8006a06:	e00e      	b.n	8006a26 <send_login_packet+0x42>
			loginPacket[i + 4] = imei[i];
 8006a08:	2017      	movs	r0, #23
 8006a0a:	183b      	adds	r3, r7, r0
 8006a0c:	781a      	ldrb	r2, [r3, #0]
 8006a0e:	183b      	adds	r3, r7, r0
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	3304      	adds	r3, #4
 8006a14:	4930      	ldr	r1, [pc, #192]	; (8006ad8 <send_login_packet+0xf4>)
 8006a16:	5c89      	ldrb	r1, [r1, r2]
 8006a18:	4a30      	ldr	r2, [pc, #192]	; (8006adc <send_login_packet+0xf8>)
 8006a1a:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 8; i++) {
 8006a1c:	183b      	adds	r3, r7, r0
 8006a1e:	781a      	ldrb	r2, [r3, #0]
 8006a20:	183b      	adds	r3, r7, r0
 8006a22:	3201      	adds	r2, #1
 8006a24:	701a      	strb	r2, [r3, #0]
 8006a26:	2317      	movs	r3, #23
 8006a28:	18fb      	adds	r3, r7, r3
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	2b07      	cmp	r3, #7
 8006a2e:	d9eb      	bls.n	8006a08 <send_login_packet+0x24>
		}
		loginPacket[12] = infoSNo >> 8;
 8006a30:	4b2b      	ldr	r3, [pc, #172]	; (8006ae0 <send_login_packet+0xfc>)
 8006a32:	881b      	ldrh	r3, [r3, #0]
 8006a34:	0a1b      	lsrs	r3, r3, #8
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	b2da      	uxtb	r2, r3
 8006a3a:	4b28      	ldr	r3, [pc, #160]	; (8006adc <send_login_packet+0xf8>)
 8006a3c:	731a      	strb	r2, [r3, #12]
		loginPacket[13] = infoSNo;
 8006a3e:	4b28      	ldr	r3, [pc, #160]	; (8006ae0 <send_login_packet+0xfc>)
 8006a40:	881b      	ldrh	r3, [r3, #0]
 8006a42:	b2da      	uxtb	r2, r3
 8006a44:	4b25      	ldr	r3, [pc, #148]	; (8006adc <send_login_packet+0xf8>)
 8006a46:	735a      	strb	r2, [r3, #13]
		uint8_t tempCrcData[12];
		for (uint8_t i = 0; i < 12; i++) {
 8006a48:	2316      	movs	r3, #22
 8006a4a:	18fb      	adds	r3, r7, r3
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	701a      	strb	r2, [r3, #0]
 8006a50:	e00e      	b.n	8006a70 <send_login_packet+0x8c>
			tempCrcData[i] = loginPacket[i + 2];
 8006a52:	2016      	movs	r0, #22
 8006a54:	183b      	adds	r3, r7, r0
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	1c9a      	adds	r2, r3, #2
 8006a5a:	183b      	adds	r3, r7, r0
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	491f      	ldr	r1, [pc, #124]	; (8006adc <send_login_packet+0xf8>)
 8006a60:	5c89      	ldrb	r1, [r1, r2]
 8006a62:	003a      	movs	r2, r7
 8006a64:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 12; i++) {
 8006a66:	183b      	adds	r3, r7, r0
 8006a68:	781a      	ldrb	r2, [r3, #0]
 8006a6a:	183b      	adds	r3, r7, r0
 8006a6c:	3201      	adds	r2, #1
 8006a6e:	701a      	strb	r2, [r3, #0]
 8006a70:	2316      	movs	r3, #22
 8006a72:	18fb      	adds	r3, r7, r3
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	2b0b      	cmp	r3, #11
 8006a78:	d9eb      	bls.n	8006a52 <send_login_packet+0x6e>
		}
		uint8_t *tempPtr = tempCrcData;
 8006a7a:	003b      	movs	r3, r7
 8006a7c:	613b      	str	r3, [r7, #16]
		uint16_t crcResult = 0;
 8006a7e:	250e      	movs	r5, #14
 8006a80:	197b      	adds	r3, r7, r5
 8006a82:	2200      	movs	r2, #0
 8006a84:	801a      	strh	r2, [r3, #0]
		crcResult = GetCrc16(tempPtr,
 8006a86:	197c      	adds	r4, r7, r5
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	210c      	movs	r1, #12
 8006a8c:	0018      	movs	r0, r3
 8006a8e:	f7ff febf 	bl	8006810 <GetCrc16>
 8006a92:	0003      	movs	r3, r0
 8006a94:	8023      	strh	r3, [r4, #0]
				sizeof(tempCrcData) / sizeof(tempCrcData[0]));
		loginPacket[14] = crcResult >> 8;
 8006a96:	0029      	movs	r1, r5
 8006a98:	187b      	adds	r3, r7, r1
 8006a9a:	881b      	ldrh	r3, [r3, #0]
 8006a9c:	0a1b      	lsrs	r3, r3, #8
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	b2da      	uxtb	r2, r3
 8006aa2:	4b0e      	ldr	r3, [pc, #56]	; (8006adc <send_login_packet+0xf8>)
 8006aa4:	739a      	strb	r2, [r3, #14]
		loginPacket[15] = crcResult;
 8006aa6:	187b      	adds	r3, r7, r1
 8006aa8:	881b      	ldrh	r3, [r3, #0]
 8006aaa:	b2da      	uxtb	r2, r3
 8006aac:	4b0b      	ldr	r3, [pc, #44]	; (8006adc <send_login_packet+0xf8>)
 8006aae:	73da      	strb	r2, [r3, #15]
		HAL_UART_Transmit(&AT_PORT, loginPacket, 18, 100);
 8006ab0:	490a      	ldr	r1, [pc, #40]	; (8006adc <send_login_packet+0xf8>)
 8006ab2:	480c      	ldr	r0, [pc, #48]	; (8006ae4 <send_login_packet+0x100>)
 8006ab4:	2364      	movs	r3, #100	; 0x64
 8006ab6:	2212      	movs	r2, #18
 8006ab8:	f005 fe0e 	bl	800c6d8 <HAL_UART_Transmit>
		//printf("SENT LOGING PACKET SUCCESSFULLY\n");
		infoSNo++;
 8006abc:	4b08      	ldr	r3, [pc, #32]	; (8006ae0 <send_login_packet+0xfc>)
 8006abe:	881b      	ldrh	r3, [r3, #0]
 8006ac0:	3301      	adds	r3, #1
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	4b06      	ldr	r3, [pc, #24]	; (8006ae0 <send_login_packet+0xfc>)
 8006ac6:	801a      	strh	r2, [r3, #0]

	} else {
		//printf("TCP SESSION NOT OPENED\n");
	}
}
 8006ac8:	46c0      	nop			; (mov r8, r8)
 8006aca:	46bd      	mov	sp, r7
 8006acc:	b006      	add	sp, #24
 8006ace:	bdb0      	pop	{r4, r5, r7, pc}
 8006ad0:	20000d3e 	.word	0x20000d3e
 8006ad4:	2000084e 	.word	0x2000084e
 8006ad8:	20000858 	.word	0x20000858
 8006adc:	20000060 	.word	0x20000060
 8006ae0:	2000005e 	.word	0x2000005e
 8006ae4:	200004a8 	.word	0x200004a8

08006ae8 <send_data_packet>:

void send_data_packet() {
 8006ae8:	b5b0      	push	{r4, r5, r7, lr}
 8006aea:	b096      	sub	sp, #88	; 0x58
 8006aec:	af00      	add	r7, sp, #0
	infoSNo++;
 8006aee:	4b7f      	ldr	r3, [pc, #508]	; (8006cec <send_data_packet+0x204>)
 8006af0:	881b      	ldrh	r3, [r3, #0]
 8006af2:	3301      	adds	r3, #1
 8006af4:	b29a      	uxth	r2, r3
 8006af6:	4b7d      	ldr	r3, [pc, #500]	; (8006cec <send_data_packet+0x204>)
 8006af8:	801a      	strh	r2, [r3, #0]
	uint8_t sendCounter = 0;
 8006afa:	2357      	movs	r3, #87	; 0x57
 8006afc:	18fb      	adds	r3, r7, r3
 8006afe:	2200      	movs	r2, #0
 8006b00:	701a      	strb	r2, [r3, #0]
	while (read_data_packet() == 1 && sendCounter < 100 && isLoggedIn == 1
 8006b02:	e06d      	b.n	8006be0 <send_data_packet+0xf8>
			&& isDataMode == 1 && isTcpOpen == 1) {
		for (uint8_t i = 0; i < 18; i++) {
 8006b04:	2356      	movs	r3, #86	; 0x56
 8006b06:	18fb      	adds	r3, r7, r3
 8006b08:	2200      	movs	r2, #0
 8006b0a:	701a      	strb	r2, [r3, #0]
 8006b0c:	e00e      	b.n	8006b2c <send_data_packet+0x44>
			dataPacket[i + 4] = readPacket[i];
 8006b0e:	2056      	movs	r0, #86	; 0x56
 8006b10:	183b      	adds	r3, r7, r0
 8006b12:	781a      	ldrb	r2, [r3, #0]
 8006b14:	183b      	adds	r3, r7, r0
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	3304      	adds	r3, #4
 8006b1a:	4975      	ldr	r1, [pc, #468]	; (8006cf0 <send_data_packet+0x208>)
 8006b1c:	5c89      	ldrb	r1, [r1, r2]
 8006b1e:	4a75      	ldr	r2, [pc, #468]	; (8006cf4 <send_data_packet+0x20c>)
 8006b20:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 18; i++) {
 8006b22:	183b      	adds	r3, r7, r0
 8006b24:	781a      	ldrb	r2, [r3, #0]
 8006b26:	183b      	adds	r3, r7, r0
 8006b28:	3201      	adds	r2, #1
 8006b2a:	701a      	strb	r2, [r3, #0]
 8006b2c:	2356      	movs	r3, #86	; 0x56
 8006b2e:	18fb      	adds	r3, r7, r3
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	2b11      	cmp	r3, #17
 8006b34:	d9eb      	bls.n	8006b0e <send_data_packet+0x26>
		}
		dataPacket[30] = infoSNo >> 8;
 8006b36:	4b6d      	ldr	r3, [pc, #436]	; (8006cec <send_data_packet+0x204>)
 8006b38:	881b      	ldrh	r3, [r3, #0]
 8006b3a:	0a1b      	lsrs	r3, r3, #8
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	b2da      	uxtb	r2, r3
 8006b40:	4b6c      	ldr	r3, [pc, #432]	; (8006cf4 <send_data_packet+0x20c>)
 8006b42:	779a      	strb	r2, [r3, #30]
		dataPacket[31] = infoSNo;
 8006b44:	4b69      	ldr	r3, [pc, #420]	; (8006cec <send_data_packet+0x204>)
 8006b46:	881b      	ldrh	r3, [r3, #0]
 8006b48:	b2da      	uxtb	r2, r3
 8006b4a:	4b6a      	ldr	r3, [pc, #424]	; (8006cf4 <send_data_packet+0x20c>)
 8006b4c:	77da      	strb	r2, [r3, #31]
		uint8_t tempCrcData[30];
		for (uint8_t i = 0; i < 29; i++) {
 8006b4e:	2355      	movs	r3, #85	; 0x55
 8006b50:	18fb      	adds	r3, r7, r3
 8006b52:	2200      	movs	r2, #0
 8006b54:	701a      	strb	r2, [r3, #0]
 8006b56:	e00f      	b.n	8006b78 <send_data_packet+0x90>
			tempCrcData[i] = dataPacket[i + 2];
 8006b58:	2055      	movs	r0, #85	; 0x55
 8006b5a:	183b      	adds	r3, r7, r0
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	1c9a      	adds	r2, r3, #2
 8006b60:	183b      	adds	r3, r7, r0
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	4963      	ldr	r1, [pc, #396]	; (8006cf4 <send_data_packet+0x20c>)
 8006b66:	5c89      	ldrb	r1, [r1, r2]
 8006b68:	2224      	movs	r2, #36	; 0x24
 8006b6a:	18ba      	adds	r2, r7, r2
 8006b6c:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 29; i++) {
 8006b6e:	183b      	adds	r3, r7, r0
 8006b70:	781a      	ldrb	r2, [r3, #0]
 8006b72:	183b      	adds	r3, r7, r0
 8006b74:	3201      	adds	r2, #1
 8006b76:	701a      	strb	r2, [r3, #0]
 8006b78:	2355      	movs	r3, #85	; 0x55
 8006b7a:	18fb      	adds	r3, r7, r3
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	2b1c      	cmp	r3, #28
 8006b80:	d9ea      	bls.n	8006b58 <send_data_packet+0x70>
		}
		uint8_t *tempPtr = tempCrcData;
 8006b82:	2324      	movs	r3, #36	; 0x24
 8006b84:	18fb      	adds	r3, r7, r3
 8006b86:	64fb      	str	r3, [r7, #76]	; 0x4c
		uint16_t crcResult = 0;
 8006b88:	254a      	movs	r5, #74	; 0x4a
 8006b8a:	197b      	adds	r3, r7, r5
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	801a      	strh	r2, [r3, #0]
		crcResult = GetCrc16(tempPtr,
 8006b90:	197c      	adds	r4, r7, r5
 8006b92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b94:	211e      	movs	r1, #30
 8006b96:	0018      	movs	r0, r3
 8006b98:	f7ff fe3a 	bl	8006810 <GetCrc16>
 8006b9c:	0003      	movs	r3, r0
 8006b9e:	8023      	strh	r3, [r4, #0]
				sizeof(tempCrcData) / sizeof(tempCrcData[0]));
		dataPacket[32] = crcResult >> 8;
 8006ba0:	0028      	movs	r0, r5
 8006ba2:	183b      	adds	r3, r7, r0
 8006ba4:	881b      	ldrh	r3, [r3, #0]
 8006ba6:	0a1b      	lsrs	r3, r3, #8
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	b2d9      	uxtb	r1, r3
 8006bac:	4b51      	ldr	r3, [pc, #324]	; (8006cf4 <send_data_packet+0x20c>)
 8006bae:	2220      	movs	r2, #32
 8006bb0:	5499      	strb	r1, [r3, r2]
		dataPacket[33] = crcResult;
 8006bb2:	183b      	adds	r3, r7, r0
 8006bb4:	881b      	ldrh	r3, [r3, #0]
 8006bb6:	b2d9      	uxtb	r1, r3
 8006bb8:	4b4e      	ldr	r3, [pc, #312]	; (8006cf4 <send_data_packet+0x20c>)
 8006bba:	2221      	movs	r2, #33	; 0x21
 8006bbc:	5499      	strb	r1, [r3, r2]
		HAL_UART_Transmit(&AT_PORT, dataPacket, 36, 100);
 8006bbe:	494d      	ldr	r1, [pc, #308]	; (8006cf4 <send_data_packet+0x20c>)
 8006bc0:	484d      	ldr	r0, [pc, #308]	; (8006cf8 <send_data_packet+0x210>)
 8006bc2:	2364      	movs	r3, #100	; 0x64
 8006bc4:	2224      	movs	r2, #36	; 0x24
 8006bc6:	f005 fd87 	bl	800c6d8 <HAL_UART_Transmit>
		// HAL_UART_Transmit(&huart4, dataPacket, 36, 100);
		sendCounter++;
 8006bca:	2157      	movs	r1, #87	; 0x57
 8006bcc:	187b      	adds	r3, r7, r1
 8006bce:	781a      	ldrb	r2, [r3, #0]
 8006bd0:	187b      	adds	r3, r7, r1
 8006bd2:	3201      	adds	r2, #1
 8006bd4:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1000);
 8006bd6:	23fa      	movs	r3, #250	; 0xfa
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	0018      	movs	r0, r3
 8006bdc:	f002 f902 	bl	8008de4 <HAL_Delay>
	while (read_data_packet() == 1 && sendCounter < 100 && isLoggedIn == 1
 8006be0:	f000 f95c 	bl	8006e9c <read_data_packet>
 8006be4:	0003      	movs	r3, r0
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d114      	bne.n	8006c14 <send_data_packet+0x12c>
 8006bea:	2357      	movs	r3, #87	; 0x57
 8006bec:	18fb      	adds	r3, r7, r3
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	2b63      	cmp	r3, #99	; 0x63
 8006bf2:	d80f      	bhi.n	8006c14 <send_data_packet+0x12c>
 8006bf4:	4b41      	ldr	r3, [pc, #260]	; (8006cfc <send_data_packet+0x214>)
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d10a      	bne.n	8006c14 <send_data_packet+0x12c>
			&& isDataMode == 1 && isTcpOpen == 1) {
 8006bfe:	4b40      	ldr	r3, [pc, #256]	; (8006d00 <send_data_packet+0x218>)
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d105      	bne.n	8006c14 <send_data_packet+0x12c>
 8006c08:	4b3e      	ldr	r3, [pc, #248]	; (8006d04 <send_data_packet+0x21c>)
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d100      	bne.n	8006c14 <send_data_packet+0x12c>
 8006c12:	e777      	b.n	8006b04 <send_data_packet+0x1c>
	}
	if (read_data_packet() == 0) {
 8006c14:	f000 f942 	bl	8006e9c <read_data_packet>
 8006c18:	1e03      	subs	r3, r0, #0
 8006c1a:	d162      	bne.n	8006ce2 <send_data_packet+0x1fa>
		for (uint8_t i = 0; i < 18; i++) {
 8006c1c:	2354      	movs	r3, #84	; 0x54
 8006c1e:	18fb      	adds	r3, r7, r3
 8006c20:	2200      	movs	r2, #0
 8006c22:	701a      	strb	r2, [r3, #0]
 8006c24:	e010      	b.n	8006c48 <send_data_packet+0x160>
			dataPacket[i + 4] = gps_info[i];
 8006c26:	4b38      	ldr	r3, [pc, #224]	; (8006d08 <send_data_packet+0x220>)
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	2054      	movs	r0, #84	; 0x54
 8006c2c:	183b      	adds	r3, r7, r0
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	18d2      	adds	r2, r2, r3
 8006c32:	183b      	adds	r3, r7, r0
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	3304      	adds	r3, #4
 8006c38:	7811      	ldrb	r1, [r2, #0]
 8006c3a:	4a2e      	ldr	r2, [pc, #184]	; (8006cf4 <send_data_packet+0x20c>)
 8006c3c:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 18; i++) {
 8006c3e:	183b      	adds	r3, r7, r0
 8006c40:	781a      	ldrb	r2, [r3, #0]
 8006c42:	183b      	adds	r3, r7, r0
 8006c44:	3201      	adds	r2, #1
 8006c46:	701a      	strb	r2, [r3, #0]
 8006c48:	2354      	movs	r3, #84	; 0x54
 8006c4a:	18fb      	adds	r3, r7, r3
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	2b11      	cmp	r3, #17
 8006c50:	d9e9      	bls.n	8006c26 <send_data_packet+0x13e>
		}
		dataPacket[30] = infoSNo >> 8;
 8006c52:	4b26      	ldr	r3, [pc, #152]	; (8006cec <send_data_packet+0x204>)
 8006c54:	881b      	ldrh	r3, [r3, #0]
 8006c56:	0a1b      	lsrs	r3, r3, #8
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	b2da      	uxtb	r2, r3
 8006c5c:	4b25      	ldr	r3, [pc, #148]	; (8006cf4 <send_data_packet+0x20c>)
 8006c5e:	779a      	strb	r2, [r3, #30]
		dataPacket[31] = infoSNo;
 8006c60:	4b22      	ldr	r3, [pc, #136]	; (8006cec <send_data_packet+0x204>)
 8006c62:	881b      	ldrh	r3, [r3, #0]
 8006c64:	b2da      	uxtb	r2, r3
 8006c66:	4b23      	ldr	r3, [pc, #140]	; (8006cf4 <send_data_packet+0x20c>)
 8006c68:	77da      	strb	r2, [r3, #31]
		uint8_t tempCrcData[30];
		for (uint8_t i = 0; i < 29; i++) {
 8006c6a:	2353      	movs	r3, #83	; 0x53
 8006c6c:	18fb      	adds	r3, r7, r3
 8006c6e:	2200      	movs	r2, #0
 8006c70:	701a      	strb	r2, [r3, #0]
 8006c72:	e00e      	b.n	8006c92 <send_data_packet+0x1aa>
			tempCrcData[i] = dataPacket[i + 2];
 8006c74:	2053      	movs	r0, #83	; 0x53
 8006c76:	183b      	adds	r3, r7, r0
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	1c9a      	adds	r2, r3, #2
 8006c7c:	183b      	adds	r3, r7, r0
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	491c      	ldr	r1, [pc, #112]	; (8006cf4 <send_data_packet+0x20c>)
 8006c82:	5c89      	ldrb	r1, [r1, r2]
 8006c84:	1d3a      	adds	r2, r7, #4
 8006c86:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 29; i++) {
 8006c88:	183b      	adds	r3, r7, r0
 8006c8a:	781a      	ldrb	r2, [r3, #0]
 8006c8c:	183b      	adds	r3, r7, r0
 8006c8e:	3201      	adds	r2, #1
 8006c90:	701a      	strb	r2, [r3, #0]
 8006c92:	2353      	movs	r3, #83	; 0x53
 8006c94:	18fb      	adds	r3, r7, r3
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	2b1c      	cmp	r3, #28
 8006c9a:	d9eb      	bls.n	8006c74 <send_data_packet+0x18c>
		}
		uint8_t *tempPtr = tempCrcData;
 8006c9c:	1d3b      	adds	r3, r7, #4
 8006c9e:	647b      	str	r3, [r7, #68]	; 0x44
		uint16_t crcResult = 0;
 8006ca0:	2542      	movs	r5, #66	; 0x42
 8006ca2:	197b      	adds	r3, r7, r5
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	801a      	strh	r2, [r3, #0]
		crcResult = GetCrc16(tempPtr,
 8006ca8:	197c      	adds	r4, r7, r5
 8006caa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cac:	211e      	movs	r1, #30
 8006cae:	0018      	movs	r0, r3
 8006cb0:	f7ff fdae 	bl	8006810 <GetCrc16>
 8006cb4:	0003      	movs	r3, r0
 8006cb6:	8023      	strh	r3, [r4, #0]
				sizeof(tempCrcData) / sizeof(tempCrcData[0]));
		dataPacket[32] = crcResult >> 8;
 8006cb8:	0028      	movs	r0, r5
 8006cba:	183b      	adds	r3, r7, r0
 8006cbc:	881b      	ldrh	r3, [r3, #0]
 8006cbe:	0a1b      	lsrs	r3, r3, #8
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	b2d9      	uxtb	r1, r3
 8006cc4:	4b0b      	ldr	r3, [pc, #44]	; (8006cf4 <send_data_packet+0x20c>)
 8006cc6:	2220      	movs	r2, #32
 8006cc8:	5499      	strb	r1, [r3, r2]
		dataPacket[33] = crcResult;
 8006cca:	183b      	adds	r3, r7, r0
 8006ccc:	881b      	ldrh	r3, [r3, #0]
 8006cce:	b2d9      	uxtb	r1, r3
 8006cd0:	4b08      	ldr	r3, [pc, #32]	; (8006cf4 <send_data_packet+0x20c>)
 8006cd2:	2221      	movs	r2, #33	; 0x21
 8006cd4:	5499      	strb	r1, [r3, r2]
		HAL_UART_Transmit(&AT_PORT, dataPacket, 36, 100);
 8006cd6:	4907      	ldr	r1, [pc, #28]	; (8006cf4 <send_data_packet+0x20c>)
 8006cd8:	4807      	ldr	r0, [pc, #28]	; (8006cf8 <send_data_packet+0x210>)
 8006cda:	2364      	movs	r3, #100	; 0x64
 8006cdc:	2224      	movs	r2, #36	; 0x24
 8006cde:	f005 fcfb 	bl	800c6d8 <HAL_UART_Transmit>

		// HAL_UART_Transmit(&huart4, dataPacket, 36, 100);

	}
}
 8006ce2:	46c0      	nop			; (mov r8, r8)
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	b016      	add	sp, #88	; 0x58
 8006ce8:	bdb0      	pop	{r4, r5, r7, pc}
 8006cea:	46c0      	nop			; (mov r8, r8)
 8006cec:	2000005e 	.word	0x2000005e
 8006cf0:	20000d64 	.word	0x20000d64
 8006cf4:	20000074 	.word	0x20000074
 8006cf8:	200004a8 	.word	0x200004a8
 8006cfc:	20000d41 	.word	0x20000d41
 8006d00:	2000084e 	.word	0x2000084e
 8006d04:	20000d3e 	.word	0x20000d3e
 8006d08:	20000020 	.word	0x20000020

08006d0c <checkdatasize>:
uint8_t checkdatasize() {
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	af00      	add	r7, sp, #0
	if (StartSec == EndSec) {
 8006d10:	4b1c      	ldr	r3, [pc, #112]	; (8006d84 <checkdatasize+0x78>)
 8006d12:	881b      	ldrh	r3, [r3, #0]
 8006d14:	b29a      	uxth	r2, r3
 8006d16:	4b1c      	ldr	r3, [pc, #112]	; (8006d88 <checkdatasize+0x7c>)
 8006d18:	881b      	ldrh	r3, [r3, #0]
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d10f      	bne.n	8006d40 <checkdatasize+0x34>
		if ((StartN - EndN) >= 672) {
 8006d20:	4b1a      	ldr	r3, [pc, #104]	; (8006d8c <checkdatasize+0x80>)
 8006d22:	881b      	ldrh	r3, [r3, #0]
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	001a      	movs	r2, r3
 8006d28:	4b19      	ldr	r3, [pc, #100]	; (8006d90 <checkdatasize+0x84>)
 8006d2a:	881b      	ldrh	r3, [r3, #0]
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	1ad2      	subs	r2, r2, r3
 8006d30:	23a8      	movs	r3, #168	; 0xa8
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	429a      	cmp	r2, r3
 8006d36:	db01      	blt.n	8006d3c <checkdatasize+0x30>
			return 1;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e01f      	b.n	8006d7c <checkdatasize+0x70>
		} else {
			return 0;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	e01d      	b.n	8006d7c <checkdatasize+0x70>
		}
	} else if ((StartSec - EndSec) == 1) {
 8006d40:	4b10      	ldr	r3, [pc, #64]	; (8006d84 <checkdatasize+0x78>)
 8006d42:	881b      	ldrh	r3, [r3, #0]
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	001a      	movs	r2, r3
 8006d48:	4b0f      	ldr	r3, [pc, #60]	; (8006d88 <checkdatasize+0x7c>)
 8006d4a:	881b      	ldrh	r3, [r3, #0]
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	1ad3      	subs	r3, r2, r3
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d112      	bne.n	8006d7a <checkdatasize+0x6e>
		if ((4096 - EndN + StartN) >= 672) {
 8006d54:	4b0e      	ldr	r3, [pc, #56]	; (8006d90 <checkdatasize+0x84>)
 8006d56:	881b      	ldrh	r3, [r3, #0]
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	001a      	movs	r2, r3
 8006d5c:	2380      	movs	r3, #128	; 0x80
 8006d5e:	015b      	lsls	r3, r3, #5
 8006d60:	1a9b      	subs	r3, r3, r2
 8006d62:	4a0a      	ldr	r2, [pc, #40]	; (8006d8c <checkdatasize+0x80>)
 8006d64:	8812      	ldrh	r2, [r2, #0]
 8006d66:	b292      	uxth	r2, r2
 8006d68:	189a      	adds	r2, r3, r2
 8006d6a:	23a8      	movs	r3, #168	; 0xa8
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	db01      	blt.n	8006d76 <checkdatasize+0x6a>
			return 1;
 8006d72:	2301      	movs	r3, #1
 8006d74:	e002      	b.n	8006d7c <checkdatasize+0x70>
		} else {
			return 0;
 8006d76:	2300      	movs	r3, #0
 8006d78:	e000      	b.n	8006d7c <checkdatasize+0x70>
		}
	} else {
		return 1;
 8006d7a:	2301      	movs	r3, #1
	}
}
 8006d7c:	0018      	movs	r0, r3
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	46c0      	nop			; (mov r8, r8)
 8006d84:	20001028 	.word	0x20001028
 8006d88:	2000102a 	.word	0x2000102a
 8006d8c:	20001024 	.word	0x20001024
 8006d90:	20001026 	.word	0x20001026

08006d94 <save_data_packet>:

void save_data_packet() {
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b082      	sub	sp, #8
 8006d98:	af00      	add	r7, sp, #0
	memset(savePacket, 0, sizeof(savePacket));
 8006d9a:	4b38      	ldr	r3, [pc, #224]	; (8006e7c <save_data_packet+0xe8>)
 8006d9c:	2220      	movs	r2, #32
 8006d9e:	2100      	movs	r1, #0
 8006da0:	0018      	movs	r0, r3
 8006da2:	f007 fbf4 	bl	800e58e <memset>
	for (uint8_t i = 0; i < 18; i++) {
 8006da6:	1dfb      	adds	r3, r7, #7
 8006da8:	2200      	movs	r2, #0
 8006daa:	701a      	strb	r2, [r3, #0]
 8006dac:	e00e      	b.n	8006dcc <save_data_packet+0x38>
		savePacket[i] = gps_info[i];
 8006dae:	4b34      	ldr	r3, [pc, #208]	; (8006e80 <save_data_packet+0xec>)
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	1dfb      	adds	r3, r7, #7
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	18d2      	adds	r2, r2, r3
 8006db8:	1dfb      	adds	r3, r7, #7
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	7811      	ldrb	r1, [r2, #0]
 8006dbe:	4a2f      	ldr	r2, [pc, #188]	; (8006e7c <save_data_packet+0xe8>)
 8006dc0:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 18; i++) {
 8006dc2:	1dfb      	adds	r3, r7, #7
 8006dc4:	781a      	ldrb	r2, [r3, #0]
 8006dc6:	1dfb      	adds	r3, r7, #7
 8006dc8:	3201      	adds	r2, #1
 8006dca:	701a      	strb	r2, [r3, #0]
 8006dcc:	1dfb      	adds	r3, r7, #7
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	2b11      	cmp	r3, #17
 8006dd2:	d9ec      	bls.n	8006dae <save_data_packet+0x1a>
	}
	W25qxx_WriteSector(savePacket, StartSec, StartN, 32);
 8006dd4:	4b2b      	ldr	r3, [pc, #172]	; (8006e84 <save_data_packet+0xf0>)
 8006dd6:	881b      	ldrh	r3, [r3, #0]
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	0019      	movs	r1, r3
 8006ddc:	4b2a      	ldr	r3, [pc, #168]	; (8006e88 <save_data_packet+0xf4>)
 8006dde:	881b      	ldrh	r3, [r3, #0]
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	001a      	movs	r2, r3
 8006de4:	4825      	ldr	r0, [pc, #148]	; (8006e7c <save_data_packet+0xe8>)
 8006de6:	2320      	movs	r3, #32
 8006de8:	f001 fd52 	bl	8008890 <W25qxx_WriteSector>
	StartN = StartN + 32;
 8006dec:	4b26      	ldr	r3, [pc, #152]	; (8006e88 <save_data_packet+0xf4>)
 8006dee:	881b      	ldrh	r3, [r3, #0]
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	3320      	adds	r3, #32
 8006df4:	b29a      	uxth	r2, r3
 8006df6:	4b24      	ldr	r3, [pc, #144]	; (8006e88 <save_data_packet+0xf4>)
 8006df8:	801a      	strh	r2, [r3, #0]
	if (StartN > 4090) {
 8006dfa:	4b23      	ldr	r3, [pc, #140]	; (8006e88 <save_data_packet+0xf4>)
 8006dfc:	881b      	ldrh	r3, [r3, #0]
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	4a22      	ldr	r2, [pc, #136]	; (8006e8c <save_data_packet+0xf8>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d935      	bls.n	8006e72 <save_data_packet+0xde>
		StartN = 0;
 8006e06:	4b20      	ldr	r3, [pc, #128]	; (8006e88 <save_data_packet+0xf4>)
 8006e08:	2200      	movs	r2, #0
 8006e0a:	801a      	strh	r2, [r3, #0]
		StartSec += 1;
 8006e0c:	4b1d      	ldr	r3, [pc, #116]	; (8006e84 <save_data_packet+0xf0>)
 8006e0e:	881b      	ldrh	r3, [r3, #0]
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	3301      	adds	r3, #1
 8006e14:	b29a      	uxth	r2, r3
 8006e16:	4b1b      	ldr	r3, [pc, #108]	; (8006e84 <save_data_packet+0xf0>)
 8006e18:	801a      	strh	r2, [r3, #0]
		if (StartSec == 1024) {
 8006e1a:	4b1a      	ldr	r3, [pc, #104]	; (8006e84 <save_data_packet+0xf0>)
 8006e1c:	881b      	ldrh	r3, [r3, #0]
 8006e1e:	b29a      	uxth	r2, r3
 8006e20:	2380      	movs	r3, #128	; 0x80
 8006e22:	00db      	lsls	r3, r3, #3
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d102      	bne.n	8006e2e <save_data_packet+0x9a>
			StartSec = 1;
 8006e28:	4b16      	ldr	r3, [pc, #88]	; (8006e84 <save_data_packet+0xf0>)
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	801a      	strh	r2, [r3, #0]
		}
		W25qxx_EraseSector(StartSec);
 8006e2e:	4b15      	ldr	r3, [pc, #84]	; (8006e84 <save_data_packet+0xf0>)
 8006e30:	881b      	ldrh	r3, [r3, #0]
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	0018      	movs	r0, r3
 8006e36:	f001 fbdb 	bl	80085f0 <W25qxx_EraseSector>
		if (StartSec == EndSec) {
 8006e3a:	4b12      	ldr	r3, [pc, #72]	; (8006e84 <save_data_packet+0xf0>)
 8006e3c:	881b      	ldrh	r3, [r3, #0]
 8006e3e:	b29a      	uxth	r2, r3
 8006e40:	4b13      	ldr	r3, [pc, #76]	; (8006e90 <save_data_packet+0xfc>)
 8006e42:	881b      	ldrh	r3, [r3, #0]
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d113      	bne.n	8006e72 <save_data_packet+0xde>
			EndN = 0;
 8006e4a:	4b12      	ldr	r3, [pc, #72]	; (8006e94 <save_data_packet+0x100>)
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	801a      	strh	r2, [r3, #0]
			if (EndSec == 1023) {
 8006e50:	4b0f      	ldr	r3, [pc, #60]	; (8006e90 <save_data_packet+0xfc>)
 8006e52:	881b      	ldrh	r3, [r3, #0]
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	4a10      	ldr	r2, [pc, #64]	; (8006e98 <save_data_packet+0x104>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d103      	bne.n	8006e64 <save_data_packet+0xd0>
				EndSec = 1;
 8006e5c:	4b0c      	ldr	r3, [pc, #48]	; (8006e90 <save_data_packet+0xfc>)
 8006e5e:	2201      	movs	r2, #1
 8006e60:	801a      	strh	r2, [r3, #0]
			} else {
				EndSec += 1;
			}
		}
	}
}
 8006e62:	e006      	b.n	8006e72 <save_data_packet+0xde>
				EndSec += 1;
 8006e64:	4b0a      	ldr	r3, [pc, #40]	; (8006e90 <save_data_packet+0xfc>)
 8006e66:	881b      	ldrh	r3, [r3, #0]
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	b29a      	uxth	r2, r3
 8006e6e:	4b08      	ldr	r3, [pc, #32]	; (8006e90 <save_data_packet+0xfc>)
 8006e70:	801a      	strh	r2, [r3, #0]
}
 8006e72:	46c0      	nop			; (mov r8, r8)
 8006e74:	46bd      	mov	sp, r7
 8006e76:	b002      	add	sp, #8
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	46c0      	nop			; (mov r8, r8)
 8006e7c:	20000d44 	.word	0x20000d44
 8006e80:	20000020 	.word	0x20000020
 8006e84:	20001028 	.word	0x20001028
 8006e88:	20001024 	.word	0x20001024
 8006e8c:	00000ffa 	.word	0x00000ffa
 8006e90:	2000102a 	.word	0x2000102a
 8006e94:	20001026 	.word	0x20001026
 8006e98:	000003ff 	.word	0x000003ff

08006e9c <read_data_packet>:
uint8_t read_data_packet() {
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	af00      	add	r7, sp, #0
	memset(readPacket, 0, sizeof(readPacket));
 8006ea0:	4b32      	ldr	r3, [pc, #200]	; (8006f6c <read_data_packet+0xd0>)
 8006ea2:	2220      	movs	r2, #32
 8006ea4:	2100      	movs	r1, #0
 8006ea6:	0018      	movs	r0, r3
 8006ea8:	f007 fb71 	bl	800e58e <memset>
	if ((EndSec == StartSec) && (EndN == StartN)) {
 8006eac:	4b30      	ldr	r3, [pc, #192]	; (8006f70 <read_data_packet+0xd4>)
 8006eae:	881b      	ldrh	r3, [r3, #0]
 8006eb0:	b29a      	uxth	r2, r3
 8006eb2:	4b30      	ldr	r3, [pc, #192]	; (8006f74 <read_data_packet+0xd8>)
 8006eb4:	881b      	ldrh	r3, [r3, #0]
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d122      	bne.n	8006f02 <read_data_packet+0x66>
 8006ebc:	4b2e      	ldr	r3, [pc, #184]	; (8006f78 <read_data_packet+0xdc>)
 8006ebe:	881b      	ldrh	r3, [r3, #0]
 8006ec0:	b29a      	uxth	r2, r3
 8006ec2:	4b2e      	ldr	r3, [pc, #184]	; (8006f7c <read_data_packet+0xe0>)
 8006ec4:	881b      	ldrh	r3, [r3, #0]
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d11a      	bne.n	8006f02 <read_data_packet+0x66>
		if (EndN != 0 || EndSec != 1) {
 8006ecc:	4b2a      	ldr	r3, [pc, #168]	; (8006f78 <read_data_packet+0xdc>)
 8006ece:	881b      	ldrh	r3, [r3, #0]
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d104      	bne.n	8006ee0 <read_data_packet+0x44>
 8006ed6:	4b26      	ldr	r3, [pc, #152]	; (8006f70 <read_data_packet+0xd4>)
 8006ed8:	881b      	ldrh	r3, [r3, #0]
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d00e      	beq.n	8006efe <read_data_packet+0x62>
			W25qxx_EraseSector(1);
 8006ee0:	2001      	movs	r0, #1
 8006ee2:	f001 fb85 	bl	80085f0 <W25qxx_EraseSector>
			StartN = 0;
 8006ee6:	4b25      	ldr	r3, [pc, #148]	; (8006f7c <read_data_packet+0xe0>)
 8006ee8:	2200      	movs	r2, #0
 8006eea:	801a      	strh	r2, [r3, #0]
			EndN = 0;
 8006eec:	4b22      	ldr	r3, [pc, #136]	; (8006f78 <read_data_packet+0xdc>)
 8006eee:	2200      	movs	r2, #0
 8006ef0:	801a      	strh	r2, [r3, #0]
			StartSec = 1;
 8006ef2:	4b20      	ldr	r3, [pc, #128]	; (8006f74 <read_data_packet+0xd8>)
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	801a      	strh	r2, [r3, #0]
			EndSec = 1;
 8006ef8:	4b1d      	ldr	r3, [pc, #116]	; (8006f70 <read_data_packet+0xd4>)
 8006efa:	2201      	movs	r2, #1
 8006efc:	801a      	strh	r2, [r3, #0]
		}
		return 0;
 8006efe:	2300      	movs	r3, #0
 8006f00:	e030      	b.n	8006f64 <read_data_packet+0xc8>
	} else {
		W25qxx_ReadSector(readPacket, EndSec, EndN, 32);
 8006f02:	4b1b      	ldr	r3, [pc, #108]	; (8006f70 <read_data_packet+0xd4>)
 8006f04:	881b      	ldrh	r3, [r3, #0]
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	0019      	movs	r1, r3
 8006f0a:	4b1b      	ldr	r3, [pc, #108]	; (8006f78 <read_data_packet+0xdc>)
 8006f0c:	881b      	ldrh	r3, [r3, #0]
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	001a      	movs	r2, r3
 8006f12:	4816      	ldr	r0, [pc, #88]	; (8006f6c <read_data_packet+0xd0>)
 8006f14:	2320      	movs	r3, #32
 8006f16:	f001 fe51 	bl	8008bbc <W25qxx_ReadSector>
		//reading data//
		EndN = EndN + 32;
 8006f1a:	4b17      	ldr	r3, [pc, #92]	; (8006f78 <read_data_packet+0xdc>)
 8006f1c:	881b      	ldrh	r3, [r3, #0]
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	3320      	adds	r3, #32
 8006f22:	b29a      	uxth	r2, r3
 8006f24:	4b14      	ldr	r3, [pc, #80]	; (8006f78 <read_data_packet+0xdc>)
 8006f26:	801a      	strh	r2, [r3, #0]
		if (EndN > 4090) {
 8006f28:	4b13      	ldr	r3, [pc, #76]	; (8006f78 <read_data_packet+0xdc>)
 8006f2a:	881b      	ldrh	r3, [r3, #0]
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	4a14      	ldr	r2, [pc, #80]	; (8006f80 <read_data_packet+0xe4>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d916      	bls.n	8006f62 <read_data_packet+0xc6>
			if (EndSec == 1023) {
 8006f34:	4b0e      	ldr	r3, [pc, #56]	; (8006f70 <read_data_packet+0xd4>)
 8006f36:	881b      	ldrh	r3, [r3, #0]
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	4a12      	ldr	r2, [pc, #72]	; (8006f84 <read_data_packet+0xe8>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d106      	bne.n	8006f4e <read_data_packet+0xb2>
				EndSec = 1;
 8006f40:	4b0b      	ldr	r3, [pc, #44]	; (8006f70 <read_data_packet+0xd4>)
 8006f42:	2201      	movs	r2, #1
 8006f44:	801a      	strh	r2, [r3, #0]
				EndN = 0;
 8006f46:	4b0c      	ldr	r3, [pc, #48]	; (8006f78 <read_data_packet+0xdc>)
 8006f48:	2200      	movs	r2, #0
 8006f4a:	801a      	strh	r2, [r3, #0]
 8006f4c:	e009      	b.n	8006f62 <read_data_packet+0xc6>
			} else {
				EndSec = EndSec + 1;
 8006f4e:	4b08      	ldr	r3, [pc, #32]	; (8006f70 <read_data_packet+0xd4>)
 8006f50:	881b      	ldrh	r3, [r3, #0]
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	3301      	adds	r3, #1
 8006f56:	b29a      	uxth	r2, r3
 8006f58:	4b05      	ldr	r3, [pc, #20]	; (8006f70 <read_data_packet+0xd4>)
 8006f5a:	801a      	strh	r2, [r3, #0]
				EndN = 0;
 8006f5c:	4b06      	ldr	r3, [pc, #24]	; (8006f78 <read_data_packet+0xdc>)
 8006f5e:	2200      	movs	r2, #0
 8006f60:	801a      	strh	r2, [r3, #0]
			}
		}
		return 1;
 8006f62:	2301      	movs	r3, #1
	}
}
 8006f64:	0018      	movs	r0, r3
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	46c0      	nop			; (mov r8, r8)
 8006f6c:	20000d64 	.word	0x20000d64
 8006f70:	2000102a 	.word	0x2000102a
 8006f74:	20001028 	.word	0x20001028
 8006f78:	20001026 	.word	0x20001026
 8006f7c:	20001024 	.word	0x20001024
 8006f80:	00000ffa 	.word	0x00000ffa
 8006f84:	000003ff 	.word	0x000003ff

08006f88 <send_hb_packet>:

void send_hb_packet() {
 8006f88:	b5b0      	push	{r4, r5, r7, lr}
 8006f8a:	b088      	sub	sp, #32
 8006f8c:	af00      	add	r7, sp, #0
	if (isTcpOpen == 1 && isDataMode == 1) {
 8006f8e:	4b89      	ldr	r3, [pc, #548]	; (80071b4 <send_hb_packet+0x22c>)
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d000      	beq.n	8006f9a <send_hb_packet+0x12>
 8006f98:	e108      	b.n	80071ac <send_hb_packet+0x224>
 8006f9a:	4b87      	ldr	r3, [pc, #540]	; (80071b8 <send_hb_packet+0x230>)
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d000      	beq.n	8006fa6 <send_hb_packet+0x1e>
 8006fa4:	e102      	b.n	80071ac <send_hb_packet+0x224>
		uint8_t TermInfo = 0;
 8006fa6:	211c      	movs	r1, #28
 8006fa8:	187b      	adds	r3, r7, r1
 8006faa:	2200      	movs	r2, #0
 8006fac:	701a      	strb	r2, [r3, #0]
		uint8_t VLvl;
		uint8_t SigStre = 20;
 8006fae:	231b      	movs	r3, #27
 8006fb0:	18fb      	adds	r3, r7, r3
 8006fb2:	2214      	movs	r2, #20
 8006fb4:	701a      	strb	r2, [r3, #0]
		uint8_t GSMSS;

		int voltage = 4400;
 8006fb6:	4b81      	ldr	r3, [pc, #516]	; (80071bc <send_hb_packet+0x234>)
 8006fb8:	617b      	str	r3, [r7, #20]
			TermInfo = TermInfo | 0x80;
		}
		//if gps tracking is on

		if (1) {
			TermInfo = TermInfo | 0x40;
 8006fba:	0008      	movs	r0, r1
 8006fbc:	183b      	adds	r3, r7, r0
 8006fbe:	183a      	adds	r2, r7, r0
 8006fc0:	7812      	ldrb	r2, [r2, #0]
 8006fc2:	2140      	movs	r1, #64	; 0x40
 8006fc4:	430a      	orrs	r2, r1
 8006fc6:	701a      	strb	r2, [r3, #0]
		}
		//if SOS is on

		if (1) {
			TermInfo = TermInfo | 0x20;
 8006fc8:	183b      	adds	r3, r7, r0
 8006fca:	183a      	adds	r2, r7, r0
 8006fcc:	7812      	ldrb	r2, [r2, #0]
 8006fce:	2120      	movs	r1, #32
 8006fd0:	430a      	orrs	r2, r1
 8006fd2:	701a      	strb	r2, [r3, #0]
		}
		//if Low batt alarm is on

		if (1) {
			TermInfo = TermInfo | 0x18;
 8006fd4:	183b      	adds	r3, r7, r0
 8006fd6:	183a      	adds	r2, r7, r0
 8006fd8:	7812      	ldrb	r2, [r2, #0]
 8006fda:	2118      	movs	r1, #24
 8006fdc:	430a      	orrs	r2, r1
 8006fde:	701a      	strb	r2, [r3, #0]
		}
		//if Power Cut alarm is on

		if (1) {
			TermInfo = TermInfo | 0x10;
 8006fe0:	183b      	adds	r3, r7, r0
 8006fe2:	183a      	adds	r2, r7, r0
 8006fe4:	7812      	ldrb	r2, [r2, #0]
 8006fe6:	2110      	movs	r1, #16
 8006fe8:	430a      	orrs	r2, r1
 8006fea:	701a      	strb	r2, [r3, #0]
		}
		//if shock alarm is on
		if (1) {
			TermInfo = TermInfo | 0x8;
 8006fec:	183b      	adds	r3, r7, r0
 8006fee:	183a      	adds	r2, r7, r0
 8006ff0:	7812      	ldrb	r2, [r2, #0]
 8006ff2:	2108      	movs	r1, #8
 8006ff4:	430a      	orrs	r2, r1
 8006ff6:	701a      	strb	r2, [r3, #0]
		}
		// 000 means normal
		//if charge is on
		if (1) {
			TermInfo = TermInfo | 0x4;
 8006ff8:	183b      	adds	r3, r7, r0
 8006ffa:	183a      	adds	r2, r7, r0
 8006ffc:	7812      	ldrb	r2, [r2, #0]
 8006ffe:	2104      	movs	r1, #4
 8007000:	430a      	orrs	r2, r1
 8007002:	701a      	strb	r2, [r3, #0]
		}
		//if ACC is on
		if (1) {
			TermInfo = TermInfo | 0x2;
 8007004:	183b      	adds	r3, r7, r0
 8007006:	183a      	adds	r2, r7, r0
 8007008:	7812      	ldrb	r2, [r2, #0]
 800700a:	2102      	movs	r1, #2
 800700c:	430a      	orrs	r2, r1
 800700e:	701a      	strb	r2, [r3, #0]
		}
		//if Activated
		if (1) {
			TermInfo = TermInfo | 0x1;
 8007010:	183b      	adds	r3, r7, r0
 8007012:	183a      	adds	r2, r7, r0
 8007014:	7812      	ldrb	r2, [r2, #0]
 8007016:	2101      	movs	r1, #1
 8007018:	430a      	orrs	r2, r1
 800701a:	701a      	strb	r2, [r3, #0]
		}
		if (voltage > 4400) {
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	4a67      	ldr	r2, [pc, #412]	; (80071bc <send_hb_packet+0x234>)
 8007020:	4293      	cmp	r3, r2
 8007022:	dd04      	ble.n	800702e <send_hb_packet+0xa6>
			VLvl = 6;
 8007024:	231f      	movs	r3, #31
 8007026:	18fb      	adds	r3, r7, r3
 8007028:	2206      	movs	r2, #6
 800702a:	701a      	strb	r2, [r3, #0]
 800702c:	e031      	b.n	8007092 <send_hb_packet+0x10a>
		} else if (voltage > 4100) {
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	4a63      	ldr	r2, [pc, #396]	; (80071c0 <send_hb_packet+0x238>)
 8007032:	4293      	cmp	r3, r2
 8007034:	dd04      	ble.n	8007040 <send_hb_packet+0xb8>
			VLvl = 5;
 8007036:	231f      	movs	r3, #31
 8007038:	18fb      	adds	r3, r7, r3
 800703a:	2205      	movs	r2, #5
 800703c:	701a      	strb	r2, [r3, #0]
 800703e:	e028      	b.n	8007092 <send_hb_packet+0x10a>

		} else if (voltage > 4000) {
 8007040:	697a      	ldr	r2, [r7, #20]
 8007042:	23fa      	movs	r3, #250	; 0xfa
 8007044:	011b      	lsls	r3, r3, #4
 8007046:	429a      	cmp	r2, r3
 8007048:	dd04      	ble.n	8007054 <send_hb_packet+0xcc>
			VLvl = 4;
 800704a:	231f      	movs	r3, #31
 800704c:	18fb      	adds	r3, r7, r3
 800704e:	2204      	movs	r2, #4
 8007050:	701a      	strb	r2, [r3, #0]
 8007052:	e01e      	b.n	8007092 <send_hb_packet+0x10a>

		} else if (voltage > 3900) {
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	4a5b      	ldr	r2, [pc, #364]	; (80071c4 <send_hb_packet+0x23c>)
 8007058:	4293      	cmp	r3, r2
 800705a:	dd04      	ble.n	8007066 <send_hb_packet+0xde>
			VLvl = 3;
 800705c:	231f      	movs	r3, #31
 800705e:	18fb      	adds	r3, r7, r3
 8007060:	2203      	movs	r2, #3
 8007062:	701a      	strb	r2, [r3, #0]
 8007064:	e015      	b.n	8007092 <send_hb_packet+0x10a>

		} else if (voltage > 3800) {
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	4a57      	ldr	r2, [pc, #348]	; (80071c8 <send_hb_packet+0x240>)
 800706a:	4293      	cmp	r3, r2
 800706c:	dd04      	ble.n	8007078 <send_hb_packet+0xf0>
			VLvl = 2;
 800706e:	231f      	movs	r3, #31
 8007070:	18fb      	adds	r3, r7, r3
 8007072:	2202      	movs	r2, #2
 8007074:	701a      	strb	r2, [r3, #0]
 8007076:	e00c      	b.n	8007092 <send_hb_packet+0x10a>

		} else if (voltage > 3700) {
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	4a54      	ldr	r2, [pc, #336]	; (80071cc <send_hb_packet+0x244>)
 800707c:	4293      	cmp	r3, r2
 800707e:	dd04      	ble.n	800708a <send_hb_packet+0x102>
			VLvl = 1;
 8007080:	231f      	movs	r3, #31
 8007082:	18fb      	adds	r3, r7, r3
 8007084:	2201      	movs	r2, #1
 8007086:	701a      	strb	r2, [r3, #0]
 8007088:	e003      	b.n	8007092 <send_hb_packet+0x10a>

		} else {
			VLvl = 0;
 800708a:	231f      	movs	r3, #31
 800708c:	18fb      	adds	r3, r7, r3
 800708e:	2200      	movs	r2, #0
 8007090:	701a      	strb	r2, [r3, #0]

		}
		if (SigStre > 19) {
 8007092:	231b      	movs	r3, #27
 8007094:	18fb      	adds	r3, r7, r3
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	2b13      	cmp	r3, #19
 800709a:	d904      	bls.n	80070a6 <send_hb_packet+0x11e>
			GSMSS = 4;
 800709c:	231e      	movs	r3, #30
 800709e:	18fb      	adds	r3, r7, r3
 80070a0:	2204      	movs	r2, #4
 80070a2:	701a      	strb	r2, [r3, #0]
 80070a4:	e021      	b.n	80070ea <send_hb_packet+0x162>
		} else if (SigStre > 14) {
 80070a6:	231b      	movs	r3, #27
 80070a8:	18fb      	adds	r3, r7, r3
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	2b0e      	cmp	r3, #14
 80070ae:	d904      	bls.n	80070ba <send_hb_packet+0x132>
			GSMSS = 3;
 80070b0:	231e      	movs	r3, #30
 80070b2:	18fb      	adds	r3, r7, r3
 80070b4:	2203      	movs	r2, #3
 80070b6:	701a      	strb	r2, [r3, #0]
 80070b8:	e017      	b.n	80070ea <send_hb_packet+0x162>
		} else if (SigStre > 9) {
 80070ba:	231b      	movs	r3, #27
 80070bc:	18fb      	adds	r3, r7, r3
 80070be:	781b      	ldrb	r3, [r3, #0]
 80070c0:	2b09      	cmp	r3, #9
 80070c2:	d904      	bls.n	80070ce <send_hb_packet+0x146>
			GSMSS = 2;
 80070c4:	231e      	movs	r3, #30
 80070c6:	18fb      	adds	r3, r7, r3
 80070c8:	2202      	movs	r2, #2
 80070ca:	701a      	strb	r2, [r3, #0]
 80070cc:	e00d      	b.n	80070ea <send_hb_packet+0x162>
		} else if (SigStre > 1) {
 80070ce:	231b      	movs	r3, #27
 80070d0:	18fb      	adds	r3, r7, r3
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d904      	bls.n	80070e2 <send_hb_packet+0x15a>
			GSMSS = 1;
 80070d8:	231e      	movs	r3, #30
 80070da:	18fb      	adds	r3, r7, r3
 80070dc:	2201      	movs	r2, #1
 80070de:	701a      	strb	r2, [r3, #0]
 80070e0:	e003      	b.n	80070ea <send_hb_packet+0x162>
		} else {
			GSMSS = 0;
 80070e2:	231e      	movs	r3, #30
 80070e4:	18fb      	adds	r3, r7, r3
 80070e6:	2200      	movs	r2, #0
 80070e8:	701a      	strb	r2, [r3, #0]
		}

		heartbeatPacket[4] = TermInfo;
 80070ea:	4b39      	ldr	r3, [pc, #228]	; (80071d0 <send_hb_packet+0x248>)
 80070ec:	221c      	movs	r2, #28
 80070ee:	18ba      	adds	r2, r7, r2
 80070f0:	7812      	ldrb	r2, [r2, #0]
 80070f2:	711a      	strb	r2, [r3, #4]
		heartbeatPacket[5] = VLvl;
 80070f4:	4b36      	ldr	r3, [pc, #216]	; (80071d0 <send_hb_packet+0x248>)
 80070f6:	221f      	movs	r2, #31
 80070f8:	18ba      	adds	r2, r7, r2
 80070fa:	7812      	ldrb	r2, [r2, #0]
 80070fc:	715a      	strb	r2, [r3, #5]
		heartbeatPacket[6] = GSMSS;
 80070fe:	4b34      	ldr	r3, [pc, #208]	; (80071d0 <send_hb_packet+0x248>)
 8007100:	221e      	movs	r2, #30
 8007102:	18ba      	adds	r2, r7, r2
 8007104:	7812      	ldrb	r2, [r2, #0]
 8007106:	719a      	strb	r2, [r3, #6]
		heartbeatPacket[7] = 0;
 8007108:	4b31      	ldr	r3, [pc, #196]	; (80071d0 <send_hb_packet+0x248>)
 800710a:	2200      	movs	r2, #0
 800710c:	71da      	strb	r2, [r3, #7]
		heartbeatPacket[8] = 2;
 800710e:	4b30      	ldr	r3, [pc, #192]	; (80071d0 <send_hb_packet+0x248>)
 8007110:	2202      	movs	r2, #2
 8007112:	721a      	strb	r2, [r3, #8]
		heartbeatPacket[9] = infoSNo >> 8;
 8007114:	4b2f      	ldr	r3, [pc, #188]	; (80071d4 <send_hb_packet+0x24c>)
 8007116:	881b      	ldrh	r3, [r3, #0]
 8007118:	0a1b      	lsrs	r3, r3, #8
 800711a:	b29b      	uxth	r3, r3
 800711c:	b2da      	uxtb	r2, r3
 800711e:	4b2c      	ldr	r3, [pc, #176]	; (80071d0 <send_hb_packet+0x248>)
 8007120:	725a      	strb	r2, [r3, #9]
		heartbeatPacket[10] = infoSNo;
 8007122:	4b2c      	ldr	r3, [pc, #176]	; (80071d4 <send_hb_packet+0x24c>)
 8007124:	881b      	ldrh	r3, [r3, #0]
 8007126:	b2da      	uxtb	r2, r3
 8007128:	4b29      	ldr	r3, [pc, #164]	; (80071d0 <send_hb_packet+0x248>)
 800712a:	729a      	strb	r2, [r3, #10]

		uint8_t tempCrcData[9];
		for (uint8_t i = 0; i < 10; i++) {
 800712c:	231d      	movs	r3, #29
 800712e:	18fb      	adds	r3, r7, r3
 8007130:	2200      	movs	r2, #0
 8007132:	701a      	strb	r2, [r3, #0]
 8007134:	e00e      	b.n	8007154 <send_hb_packet+0x1cc>
			tempCrcData[i] = heartbeatPacket[i + 2];
 8007136:	201d      	movs	r0, #29
 8007138:	183b      	adds	r3, r7, r0
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	1c9a      	adds	r2, r3, #2
 800713e:	183b      	adds	r3, r7, r0
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	4923      	ldr	r1, [pc, #140]	; (80071d0 <send_hb_packet+0x248>)
 8007144:	5c89      	ldrb	r1, [r1, r2]
 8007146:	1d3a      	adds	r2, r7, #4
 8007148:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 10; i++) {
 800714a:	183b      	adds	r3, r7, r0
 800714c:	781a      	ldrb	r2, [r3, #0]
 800714e:	183b      	adds	r3, r7, r0
 8007150:	3201      	adds	r2, #1
 8007152:	701a      	strb	r2, [r3, #0]
 8007154:	231d      	movs	r3, #29
 8007156:	18fb      	adds	r3, r7, r3
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	2b09      	cmp	r3, #9
 800715c:	d9eb      	bls.n	8007136 <send_hb_packet+0x1ae>
		}
		uint8_t *tempPtr = tempCrcData;
 800715e:	1d3b      	adds	r3, r7, #4
 8007160:	613b      	str	r3, [r7, #16]
		uint16_t crcResult = 0;
 8007162:	250e      	movs	r5, #14
 8007164:	197b      	adds	r3, r7, r5
 8007166:	2200      	movs	r2, #0
 8007168:	801a      	strh	r2, [r3, #0]
		crcResult = GetCrc16(tempPtr,
 800716a:	197c      	adds	r4, r7, r5
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	2109      	movs	r1, #9
 8007170:	0018      	movs	r0, r3
 8007172:	f7ff fb4d 	bl	8006810 <GetCrc16>
 8007176:	0003      	movs	r3, r0
 8007178:	8023      	strh	r3, [r4, #0]
				sizeof(tempCrcData) / sizeof(tempCrcData[0]));
		heartbeatPacket[11] = crcResult >> 8;
 800717a:	0029      	movs	r1, r5
 800717c:	187b      	adds	r3, r7, r1
 800717e:	881b      	ldrh	r3, [r3, #0]
 8007180:	0a1b      	lsrs	r3, r3, #8
 8007182:	b29b      	uxth	r3, r3
 8007184:	b2da      	uxtb	r2, r3
 8007186:	4b12      	ldr	r3, [pc, #72]	; (80071d0 <send_hb_packet+0x248>)
 8007188:	72da      	strb	r2, [r3, #11]
		heartbeatPacket[12] = crcResult;
 800718a:	187b      	adds	r3, r7, r1
 800718c:	881b      	ldrh	r3, [r3, #0]
 800718e:	b2da      	uxtb	r2, r3
 8007190:	4b0f      	ldr	r3, [pc, #60]	; (80071d0 <send_hb_packet+0x248>)
 8007192:	731a      	strb	r2, [r3, #12]
		HAL_UART_Transmit(&AT_PORT, heartbeatPacket, 15, 100);
 8007194:	490e      	ldr	r1, [pc, #56]	; (80071d0 <send_hb_packet+0x248>)
 8007196:	4810      	ldr	r0, [pc, #64]	; (80071d8 <send_hb_packet+0x250>)
 8007198:	2364      	movs	r3, #100	; 0x64
 800719a:	220f      	movs	r2, #15
 800719c:	f005 fa9c 	bl	800c6d8 <HAL_UART_Transmit>
		infoSNo++;
 80071a0:	4b0c      	ldr	r3, [pc, #48]	; (80071d4 <send_hb_packet+0x24c>)
 80071a2:	881b      	ldrh	r3, [r3, #0]
 80071a4:	3301      	adds	r3, #1
 80071a6:	b29a      	uxth	r2, r3
 80071a8:	4b0a      	ldr	r3, [pc, #40]	; (80071d4 <send_hb_packet+0x24c>)
 80071aa:	801a      	strh	r2, [r3, #0]

	}
}
 80071ac:	46c0      	nop			; (mov r8, r8)
 80071ae:	46bd      	mov	sp, r7
 80071b0:	b008      	add	sp, #32
 80071b2:	bdb0      	pop	{r4, r5, r7, pc}
 80071b4:	20000d3e 	.word	0x20000d3e
 80071b8:	2000084e 	.word	0x2000084e
 80071bc:	00001130 	.word	0x00001130
 80071c0:	00001004 	.word	0x00001004
 80071c4:	00000f3c 	.word	0x00000f3c
 80071c8:	00000ed8 	.word	0x00000ed8
 80071cc:	00000e74 	.word	0x00000e74
 80071d0:	20000098 	.word	0x20000098
 80071d4:	2000005e 	.word	0x2000005e
 80071d8:	200004a8 	.word	0x200004a8

080071dc <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80071dc:	b580      	push	{r7, lr}
 80071de:	b086      	sub	sp, #24
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
	if (isDataMode == 1) {
 80071e4:	4b2e      	ldr	r3, [pc, #184]	; (80072a0 <HAL_TIM_IC_CaptureCallback+0xc4>)
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	b2db      	uxtb	r3, r3
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	d153      	bne.n	8007296 <HAL_TIM_IC_CaptureCallback+0xba>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) { // if the interrupt source is channel1
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	7f1b      	ldrb	r3, [r3, #28]
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d14f      	bne.n	8007296 <HAL_TIM_IC_CaptureCallback+0xba>
			uint16_t IC_Val1, IC_Val2;
			IC_Val1 = vals[0];
 80071f6:	2116      	movs	r1, #22
 80071f8:	187b      	adds	r3, r7, r1
 80071fa:	4a2a      	ldr	r2, [pc, #168]	; (80072a4 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80071fc:	8812      	ldrh	r2, [r2, #0]
 80071fe:	801a      	strh	r2, [r3, #0]
			IC_Val2 = vals[1];
 8007200:	2014      	movs	r0, #20
 8007202:	183b      	adds	r3, r7, r0
 8007204:	4a27      	ldr	r2, [pc, #156]	; (80072a4 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8007206:	8852      	ldrh	r2, [r2, #2]
 8007208:	801a      	strh	r2, [r3, #0]
			if (IC_Val2 > IC_Val1) {
 800720a:	183a      	adds	r2, r7, r0
 800720c:	187b      	adds	r3, r7, r1
 800720e:	8812      	ldrh	r2, [r2, #0]
 8007210:	881b      	ldrh	r3, [r3, #0]
 8007212:	429a      	cmp	r2, r3
 8007214:	d908      	bls.n	8007228 <HAL_TIM_IC_CaptureCallback+0x4c>
				Difference = IC_Val2 - IC_Val1;
 8007216:	183a      	adds	r2, r7, r0
 8007218:	187b      	adds	r3, r7, r1
 800721a:	8812      	ldrh	r2, [r2, #0]
 800721c:	881b      	ldrh	r3, [r3, #0]
 800721e:	1ad3      	subs	r3, r2, r3
 8007220:	b29a      	uxth	r2, r3
 8007222:	4b21      	ldr	r3, [pc, #132]	; (80072a8 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8007224:	801a      	strh	r2, [r3, #0]
 8007226:	e011      	b.n	800724c <HAL_TIM_IC_CaptureCallback+0x70>
			} else if (IC_Val1 > IC_Val2) {
 8007228:	2116      	movs	r1, #22
 800722a:	187a      	adds	r2, r7, r1
 800722c:	2014      	movs	r0, #20
 800722e:	183b      	adds	r3, r7, r0
 8007230:	8812      	ldrh	r2, [r2, #0]
 8007232:	881b      	ldrh	r3, [r3, #0]
 8007234:	429a      	cmp	r2, r3
 8007236:	d909      	bls.n	800724c <HAL_TIM_IC_CaptureCallback+0x70>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8007238:	183a      	adds	r2, r7, r0
 800723a:	187b      	adds	r3, r7, r1
 800723c:	8812      	ldrh	r2, [r2, #0]
 800723e:	881b      	ldrh	r3, [r3, #0]
 8007240:	1ad3      	subs	r3, r2, r3
 8007242:	b29b      	uxth	r3, r3
 8007244:	3b01      	subs	r3, #1
 8007246:	b29a      	uxth	r2, r3
 8007248:	4b17      	ldr	r3, [pc, #92]	; (80072a8 <HAL_TIM_IC_CaptureCallback+0xcc>)
 800724a:	801a      	strh	r2, [r3, #0]
			}
			float refClock = TIMCLOCK / (PRESCALAR);
 800724c:	4b17      	ldr	r3, [pc, #92]	; (80072ac <HAL_TIM_IC_CaptureCallback+0xd0>)
 800724e:	613b      	str	r3, [r7, #16]
			float mFactor = 1000 / refClock;
 8007250:	6939      	ldr	r1, [r7, #16]
 8007252:	4817      	ldr	r0, [pc, #92]	; (80072b0 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8007254:	f7f9 fb8e 	bl	8000974 <__aeabi_fdiv>
 8007258:	1c03      	adds	r3, r0, #0
 800725a:	60fb      	str	r3, [r7, #12]
			usWidth = Difference * mFactor;
 800725c:	4b12      	ldr	r3, [pc, #72]	; (80072a8 <HAL_TIM_IC_CaptureCallback+0xcc>)
 800725e:	881b      	ldrh	r3, [r3, #0]
 8007260:	0018      	movs	r0, r3
 8007262:	f7fa f859 	bl	8001318 <__aeabi_i2f>
 8007266:	1c03      	adds	r3, r0, #0
 8007268:	68f9      	ldr	r1, [r7, #12]
 800726a:	1c18      	adds	r0, r3, #0
 800726c:	f7f9 fd4a 	bl	8000d04 <__aeabi_fmul>
 8007270:	1c03      	adds	r3, r0, #0
 8007272:	1c18      	adds	r0, r3, #0
 8007274:	f7f9 f958 	bl	8000528 <__aeabi_f2uiz>
 8007278:	0003      	movs	r3, r0
 800727a:	b29a      	uxth	r2, r3
 800727c:	4b0d      	ldr	r3, [pc, #52]	; (80072b4 <HAL_TIM_IC_CaptureCallback+0xd8>)
 800727e:	801a      	strh	r2, [r3, #0]
			if (usWidth > 100 && usWidth < 200) {
 8007280:	4b0c      	ldr	r3, [pc, #48]	; (80072b4 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8007282:	881b      	ldrh	r3, [r3, #0]
 8007284:	2b64      	cmp	r3, #100	; 0x64
 8007286:	d906      	bls.n	8007296 <HAL_TIM_IC_CaptureCallback+0xba>
 8007288:	4b0a      	ldr	r3, [pc, #40]	; (80072b4 <HAL_TIM_IC_CaptureCallback+0xd8>)
 800728a:	881b      	ldrh	r3, [r3, #0]
 800728c:	2bc7      	cmp	r3, #199	; 0xc7
 800728e:	d802      	bhi.n	8007296 <HAL_TIM_IC_CaptureCallback+0xba>
				//printf("Got message indication\n");
				isPulse = 1;
 8007290:	4b09      	ldr	r3, [pc, #36]	; (80072b8 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8007292:	2201      	movs	r2, #1
 8007294:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 8007296:	46c0      	nop			; (mov r8, r8)
 8007298:	46bd      	mov	sp, r7
 800729a:	b006      	add	sp, #24
 800729c:	bd80      	pop	{r7, pc}
 800729e:	46c0      	nop			; (mov r8, r8)
 80072a0:	2000084e 	.word	0x2000084e
 80072a4:	200006fc 	.word	0x200006fc
 80072a8:	200006f8 	.word	0x200006f8
 80072ac:	47c35000 	.word	0x47c35000
 80072b0:	447a0000 	.word	0x447a0000
 80072b4:	200006fa 	.word	0x200006fa
 80072b8:	2000070e 	.word	0x2000070e

080072bc <substring>:

char* substring(char *destination, const char *source, uint8_t beg, uint8_t n) {
 80072bc:	b580      	push	{r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	60b9      	str	r1, [r7, #8]
 80072c6:	0019      	movs	r1, r3
 80072c8:	1dfb      	adds	r3, r7, #7
 80072ca:	701a      	strb	r2, [r3, #0]
 80072cc:	1dbb      	adds	r3, r7, #6
 80072ce:	1c0a      	adds	r2, r1, #0
 80072d0:	701a      	strb	r2, [r3, #0]
	// extracts `n` characters from the source string starting from `beg` index
	// and copy them into the destination string
	while (n > 0) {
 80072d2:	e011      	b.n	80072f8 <substring+0x3c>
		*destination = *(source + beg);
 80072d4:	1dfb      	adds	r3, r7, #7
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	68ba      	ldr	r2, [r7, #8]
 80072da:	18d3      	adds	r3, r2, r3
 80072dc:	781a      	ldrb	r2, [r3, #0]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	701a      	strb	r2, [r3, #0]
		destination++;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	3301      	adds	r3, #1
 80072e6:	60fb      	str	r3, [r7, #12]
		source++;
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	3301      	adds	r3, #1
 80072ec:	60bb      	str	r3, [r7, #8]
		n--;
 80072ee:	1dbb      	adds	r3, r7, #6
 80072f0:	781a      	ldrb	r2, [r3, #0]
 80072f2:	1dbb      	adds	r3, r7, #6
 80072f4:	3a01      	subs	r2, #1
 80072f6:	701a      	strb	r2, [r3, #0]
	while (n > 0) {
 80072f8:	1dbb      	adds	r3, r7, #6
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d1e9      	bne.n	80072d4 <substring+0x18>
	}

	// null terminate destination string
	*destination = '\0';
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2200      	movs	r2, #0
 8007304:	701a      	strb	r2, [r3, #0]

	// return the destination string
	return destination;
 8007306:	68fb      	ldr	r3, [r7, #12]
}
 8007308:	0018      	movs	r0, r3
 800730a:	46bd      	mov	sp, r7
 800730c:	b004      	add	sp, #16
 800730e:	bd80      	pop	{r7, pc}

08007310 <send_current_location_via_sms>:

void send_current_location_via_sms() {
 8007310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007312:	b0b9      	sub	sp, #228	; 0xe4
 8007314:	af02      	add	r7, sp, #8
	if (isSMSActive == 1) {
 8007316:	4be2      	ldr	r3, [pc, #904]	; (80076a0 <send_current_location_via_sms+0x390>)
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	2b01      	cmp	r3, #1
 800731c:	d000      	beq.n	8007320 <send_current_location_via_sms+0x10>
 800731e:	e1e9      	b.n	80076f4 <send_current_location_via_sms+0x3e4>
		//printf("sending message(current location)\n");
		// send_command("AT+CMGS=\"3352093997\"\n\r", 10, 6, 0, 0);
		char tempMsg[150];
		uint8_t speed = 0;
 8007320:	21d6      	movs	r1, #214	; 0xd6
 8007322:	187b      	adds	r3, r7, r1
 8007324:	2200      	movs	r2, #0
 8007326:	701a      	strb	r2, [r3, #0]
		uint32_t lat = 0, lon = 0;
 8007328:	2300      	movs	r3, #0
 800732a:	20d0      	movs	r0, #208	; 0xd0
 800732c:	183a      	adds	r2, r7, r0
 800732e:	6013      	str	r3, [r2, #0]
 8007330:	2300      	movs	r3, #0
 8007332:	24cc      	movs	r4, #204	; 0xcc
 8007334:	193a      	adds	r2, r7, r4
 8007336:	6013      	str	r3, [r2, #0]
		double tempFloat;
		double tempMin;
		uint8_t tempDeg;
		char buf[15];
		float latitude, longitude;
		lat = (gps_info[7] << 24) | (gps_info[8] << 16) | (gps_info[9] << 8)
 8007338:	4bda      	ldr	r3, [pc, #872]	; (80076a4 <send_current_location_via_sms+0x394>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	3307      	adds	r3, #7
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	061a      	lsls	r2, r3, #24
 8007342:	4bd8      	ldr	r3, [pc, #864]	; (80076a4 <send_current_location_via_sms+0x394>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	3308      	adds	r3, #8
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	041b      	lsls	r3, r3, #16
 800734c:	431a      	orrs	r2, r3
 800734e:	4bd5      	ldr	r3, [pc, #852]	; (80076a4 <send_current_location_via_sms+0x394>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	3309      	adds	r3, #9
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	021b      	lsls	r3, r3, #8
 8007358:	431a      	orrs	r2, r3
		| gps_info[10];
 800735a:	4bd2      	ldr	r3, [pc, #840]	; (80076a4 <send_current_location_via_sms+0x394>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	330a      	adds	r3, #10
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	4313      	orrs	r3, r2
		lat = (gps_info[7] << 24) | (gps_info[8] << 16) | (gps_info[9] << 8)
 8007364:	183a      	adds	r2, r7, r0
 8007366:	6013      	str	r3, [r2, #0]
		lon = (gps_info[11] << 24) | (gps_info[12] << 16) | (gps_info[13] << 8)
 8007368:	4bce      	ldr	r3, [pc, #824]	; (80076a4 <send_current_location_via_sms+0x394>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	330b      	adds	r3, #11
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	061a      	lsls	r2, r3, #24
 8007372:	4bcc      	ldr	r3, [pc, #816]	; (80076a4 <send_current_location_via_sms+0x394>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	330c      	adds	r3, #12
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	041b      	lsls	r3, r3, #16
 800737c:	431a      	orrs	r2, r3
 800737e:	4bc9      	ldr	r3, [pc, #804]	; (80076a4 <send_current_location_via_sms+0x394>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	330d      	adds	r3, #13
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	021b      	lsls	r3, r3, #8
 8007388:	431a      	orrs	r2, r3
		| gps_info[14];
 800738a:	4bc6      	ldr	r3, [pc, #792]	; (80076a4 <send_current_location_via_sms+0x394>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	330e      	adds	r3, #14
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	4313      	orrs	r3, r2
		lon = (gps_info[11] << 24) | (gps_info[12] << 16) | (gps_info[13] << 8)
 8007394:	193a      	adds	r2, r7, r4
 8007396:	6013      	str	r3, [r2, #0]
		speed = gps_info[15];
 8007398:	4bc2      	ldr	r3, [pc, #776]	; (80076a4 <send_current_location_via_sms+0x394>)
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	187b      	adds	r3, r7, r1
 800739e:	7bd2      	ldrb	r2, [r2, #15]
 80073a0:	701a      	strb	r2, [r3, #0]
		tempFloat = lat / 30000.0;
 80073a2:	183a      	adds	r2, r7, r0
 80073a4:	6810      	ldr	r0, [r2, #0]
 80073a6:	f7fb fdc5 	bl	8002f34 <__aeabi_ui2d>
 80073aa:	2200      	movs	r2, #0
 80073ac:	4bbe      	ldr	r3, [pc, #760]	; (80076a8 <send_current_location_via_sms+0x398>)
 80073ae:	f7fa fb3d 	bl	8001a2c <__aeabi_ddiv>
 80073b2:	0002      	movs	r2, r0
 80073b4:	000b      	movs	r3, r1
 80073b6:	24c0      	movs	r4, #192	; 0xc0
 80073b8:	1938      	adds	r0, r7, r4
 80073ba:	6002      	str	r2, [r0, #0]
 80073bc:	6043      	str	r3, [r0, #4]
		tempDeg = (int) tempFloat / 60;
 80073be:	193a      	adds	r2, r7, r4
 80073c0:	6810      	ldr	r0, [r2, #0]
 80073c2:	6851      	ldr	r1, [r2, #4]
 80073c4:	f7fb fd50 	bl	8002e68 <__aeabi_d2iz>
 80073c8:	0003      	movs	r3, r0
 80073ca:	213c      	movs	r1, #60	; 0x3c
 80073cc:	0018      	movs	r0, r3
 80073ce:	f7f8 ff47 	bl	8000260 <__divsi3>
 80073d2:	0003      	movs	r3, r0
 80073d4:	001a      	movs	r2, r3
 80073d6:	26bf      	movs	r6, #191	; 0xbf
 80073d8:	19bb      	adds	r3, r7, r6
 80073da:	701a      	strb	r2, [r3, #0]
		tempMin = (int) tempFloat % 60;
 80073dc:	193a      	adds	r2, r7, r4
 80073de:	6810      	ldr	r0, [r2, #0]
 80073e0:	6851      	ldr	r1, [r2, #4]
 80073e2:	f7fb fd41 	bl	8002e68 <__aeabi_d2iz>
 80073e6:	0003      	movs	r3, r0
 80073e8:	213c      	movs	r1, #60	; 0x3c
 80073ea:	0018      	movs	r0, r3
 80073ec:	f7f9 f81e 	bl	800042c <__aeabi_idivmod>
 80073f0:	000b      	movs	r3, r1
 80073f2:	0018      	movs	r0, r3
 80073f4:	f7fb fd6e 	bl	8002ed4 <__aeabi_i2d>
 80073f8:	0002      	movs	r2, r0
 80073fa:	000b      	movs	r3, r1
 80073fc:	25b0      	movs	r5, #176	; 0xb0
 80073fe:	1978      	adds	r0, r7, r5
 8007400:	6002      	str	r2, [r0, #0]
 8007402:	6043      	str	r3, [r0, #4]
		tempFloat = tempFloat - (int) tempFloat;
 8007404:	193a      	adds	r2, r7, r4
 8007406:	6810      	ldr	r0, [r2, #0]
 8007408:	6851      	ldr	r1, [r2, #4]
 800740a:	f7fb fd2d 	bl	8002e68 <__aeabi_d2iz>
 800740e:	0003      	movs	r3, r0
 8007410:	0018      	movs	r0, r3
 8007412:	f7fb fd5f 	bl	8002ed4 <__aeabi_i2d>
 8007416:	0002      	movs	r2, r0
 8007418:	000b      	movs	r3, r1
 800741a:	1938      	adds	r0, r7, r4
 800741c:	6841      	ldr	r1, [r0, #4]
 800741e:	6800      	ldr	r0, [r0, #0]
 8007420:	f7fb f972 	bl	8002708 <__aeabi_dsub>
 8007424:	0002      	movs	r2, r0
 8007426:	000b      	movs	r3, r1
 8007428:	1938      	adds	r0, r7, r4
 800742a:	6002      	str	r2, [r0, #0]
 800742c:	6043      	str	r3, [r0, #4]
		tempMin = tempMin + tempFloat;
 800742e:	193a      	adds	r2, r7, r4
 8007430:	6853      	ldr	r3, [r2, #4]
 8007432:	6812      	ldr	r2, [r2, #0]
 8007434:	1978      	adds	r0, r7, r5
 8007436:	6841      	ldr	r1, [r0, #4]
 8007438:	6800      	ldr	r0, [r0, #0]
 800743a:	f7f9 ffbb 	bl	80013b4 <__aeabi_dadd>
 800743e:	0002      	movs	r2, r0
 8007440:	000b      	movs	r3, r1
 8007442:	1978      	adds	r0, r7, r5
 8007444:	6002      	str	r2, [r0, #0]
 8007446:	6043      	str	r3, [r0, #4]
		latitude = tempMin / 60.0;
 8007448:	2200      	movs	r2, #0
 800744a:	4b98      	ldr	r3, [pc, #608]	; (80076ac <send_current_location_via_sms+0x39c>)
 800744c:	1978      	adds	r0, r7, r5
 800744e:	6841      	ldr	r1, [r0, #4]
 8007450:	6800      	ldr	r0, [r0, #0]
 8007452:	f7fa faeb 	bl	8001a2c <__aeabi_ddiv>
 8007456:	0002      	movs	r2, r0
 8007458:	000b      	movs	r3, r1
 800745a:	0010      	movs	r0, r2
 800745c:	0019      	movs	r1, r3
 800745e:	f7fb fdd7 	bl	8003010 <__aeabi_d2f>
 8007462:	1c03      	adds	r3, r0, #0
 8007464:	22ac      	movs	r2, #172	; 0xac
 8007466:	18b8      	adds	r0, r7, r2
 8007468:	6003      	str	r3, [r0, #0]
		latitude += tempDeg;
 800746a:	19bb      	adds	r3, r7, r6
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	0018      	movs	r0, r3
 8007470:	f7f9 ff52 	bl	8001318 <__aeabi_i2f>
 8007474:	1c03      	adds	r3, r0, #0
 8007476:	1c19      	adds	r1, r3, #0
 8007478:	22ac      	movs	r2, #172	; 0xac
 800747a:	18b8      	adds	r0, r7, r2
 800747c:	6800      	ldr	r0, [r0, #0]
 800747e:	f7f9 f8db 	bl	8000638 <__aeabi_fadd>
 8007482:	1c03      	adds	r3, r0, #0
 8007484:	22ac      	movs	r2, #172	; 0xac
 8007486:	18b8      	adds	r0, r7, r2
 8007488:	6003      	str	r3, [r0, #0]
		tempFloat = lon / 30000.0;
 800748a:	23cc      	movs	r3, #204	; 0xcc
 800748c:	18fb      	adds	r3, r7, r3
 800748e:	6818      	ldr	r0, [r3, #0]
 8007490:	f7fb fd50 	bl	8002f34 <__aeabi_ui2d>
 8007494:	2200      	movs	r2, #0
 8007496:	4b84      	ldr	r3, [pc, #528]	; (80076a8 <send_current_location_via_sms+0x398>)
 8007498:	f7fa fac8 	bl	8001a2c <__aeabi_ddiv>
 800749c:	0002      	movs	r2, r0
 800749e:	000b      	movs	r3, r1
 80074a0:	1938      	adds	r0, r7, r4
 80074a2:	6002      	str	r2, [r0, #0]
 80074a4:	6043      	str	r3, [r0, #4]
		tempDeg = (int) tempFloat / 60;
 80074a6:	193b      	adds	r3, r7, r4
 80074a8:	6818      	ldr	r0, [r3, #0]
 80074aa:	6859      	ldr	r1, [r3, #4]
 80074ac:	f7fb fcdc 	bl	8002e68 <__aeabi_d2iz>
 80074b0:	0003      	movs	r3, r0
 80074b2:	213c      	movs	r1, #60	; 0x3c
 80074b4:	0018      	movs	r0, r3
 80074b6:	f7f8 fed3 	bl	8000260 <__divsi3>
 80074ba:	0003      	movs	r3, r0
 80074bc:	001a      	movs	r2, r3
 80074be:	19bb      	adds	r3, r7, r6
 80074c0:	701a      	strb	r2, [r3, #0]
		tempMin = (int) tempFloat % 60;
 80074c2:	193b      	adds	r3, r7, r4
 80074c4:	6818      	ldr	r0, [r3, #0]
 80074c6:	6859      	ldr	r1, [r3, #4]
 80074c8:	f7fb fcce 	bl	8002e68 <__aeabi_d2iz>
 80074cc:	0003      	movs	r3, r0
 80074ce:	213c      	movs	r1, #60	; 0x3c
 80074d0:	0018      	movs	r0, r3
 80074d2:	f7f8 ffab 	bl	800042c <__aeabi_idivmod>
 80074d6:	000b      	movs	r3, r1
 80074d8:	0018      	movs	r0, r3
 80074da:	f7fb fcfb 	bl	8002ed4 <__aeabi_i2d>
 80074de:	0002      	movs	r2, r0
 80074e0:	000b      	movs	r3, r1
 80074e2:	1978      	adds	r0, r7, r5
 80074e4:	6002      	str	r2, [r0, #0]
 80074e6:	6043      	str	r3, [r0, #4]
		tempFloat = tempFloat - (int) tempFloat;
 80074e8:	193b      	adds	r3, r7, r4
 80074ea:	6818      	ldr	r0, [r3, #0]
 80074ec:	6859      	ldr	r1, [r3, #4]
 80074ee:	f7fb fcbb 	bl	8002e68 <__aeabi_d2iz>
 80074f2:	0003      	movs	r3, r0
 80074f4:	0018      	movs	r0, r3
 80074f6:	f7fb fced 	bl	8002ed4 <__aeabi_i2d>
 80074fa:	0002      	movs	r2, r0
 80074fc:	000b      	movs	r3, r1
 80074fe:	1938      	adds	r0, r7, r4
 8007500:	6841      	ldr	r1, [r0, #4]
 8007502:	6800      	ldr	r0, [r0, #0]
 8007504:	f7fb f900 	bl	8002708 <__aeabi_dsub>
 8007508:	0002      	movs	r2, r0
 800750a:	000b      	movs	r3, r1
 800750c:	1938      	adds	r0, r7, r4
 800750e:	6002      	str	r2, [r0, #0]
 8007510:	6043      	str	r3, [r0, #4]
		tempMin = tempMin + tempFloat;
 8007512:	193b      	adds	r3, r7, r4
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	1978      	adds	r0, r7, r5
 800751a:	6841      	ldr	r1, [r0, #4]
 800751c:	6800      	ldr	r0, [r0, #0]
 800751e:	f7f9 ff49 	bl	80013b4 <__aeabi_dadd>
 8007522:	0002      	movs	r2, r0
 8007524:	000b      	movs	r3, r1
 8007526:	1978      	adds	r0, r7, r5
 8007528:	6002      	str	r2, [r0, #0]
 800752a:	6043      	str	r3, [r0, #4]
		longitude = tempMin / 60.0;
 800752c:	2200      	movs	r2, #0
 800752e:	4b5f      	ldr	r3, [pc, #380]	; (80076ac <send_current_location_via_sms+0x39c>)
 8007530:	1978      	adds	r0, r7, r5
 8007532:	6841      	ldr	r1, [r0, #4]
 8007534:	6800      	ldr	r0, [r0, #0]
 8007536:	f7fa fa79 	bl	8001a2c <__aeabi_ddiv>
 800753a:	0002      	movs	r2, r0
 800753c:	000b      	movs	r3, r1
 800753e:	0010      	movs	r0, r2
 8007540:	0019      	movs	r1, r3
 8007542:	f7fb fd65 	bl	8003010 <__aeabi_d2f>
 8007546:	1c03      	adds	r3, r0, #0
 8007548:	25a8      	movs	r5, #168	; 0xa8
 800754a:	1978      	adds	r0, r7, r5
 800754c:	6003      	str	r3, [r0, #0]
		longitude += tempDeg;
 800754e:	19bb      	adds	r3, r7, r6
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	0018      	movs	r0, r3
 8007554:	f7f9 fee0 	bl	8001318 <__aeabi_i2f>
 8007558:	1c03      	adds	r3, r0, #0
 800755a:	1c19      	adds	r1, r3, #0
 800755c:	197b      	adds	r3, r7, r5
 800755e:	6818      	ldr	r0, [r3, #0]
 8007560:	f7f9 f86a 	bl	8000638 <__aeabi_fadd>
 8007564:	1c03      	adds	r3, r0, #0
 8007566:	1978      	adds	r0, r7, r5
 8007568:	6003      	str	r3, [r0, #0]
		memset(tempMsg, 0, sizeof(tempMsg));
 800756a:	003b      	movs	r3, r7
 800756c:	2296      	movs	r2, #150	; 0x96
 800756e:	2100      	movs	r1, #0
 8007570:	0018      	movs	r0, r3
 8007572:	f007 f80c 	bl	800e58e <memset>
		memset(buf, 0, sizeof(buf));
 8007576:	2498      	movs	r4, #152	; 0x98
 8007578:	193b      	adds	r3, r7, r4
 800757a:	220f      	movs	r2, #15
 800757c:	2100      	movs	r1, #0
 800757e:	0018      	movs	r0, r3
 8007580:	f007 f805 	bl	800e58e <memset>
		gcvt(latitude, 8, buf);
 8007584:	22ac      	movs	r2, #172	; 0xac
 8007586:	18bb      	adds	r3, r7, r2
 8007588:	6818      	ldr	r0, [r3, #0]
 800758a:	f7fb fcf9 	bl	8002f80 <__aeabi_f2d>
 800758e:	193b      	adds	r3, r7, r4
 8007590:	2208      	movs	r2, #8
 8007592:	f006 ffa3 	bl	800e4dc <gcvt>
		strcat(tempMsg,"AT+CMGS=\"");
 8007596:	003b      	movs	r3, r7
 8007598:	0018      	movs	r0, r3
 800759a:	f7f8 fdbb 	bl	8000114 <strlen>
 800759e:	0003      	movs	r3, r0
 80075a0:	001a      	movs	r2, r3
 80075a2:	003b      	movs	r3, r7
 80075a4:	189a      	adds	r2, r3, r2
 80075a6:	4b42      	ldr	r3, [pc, #264]	; (80076b0 <send_current_location_via_sms+0x3a0>)
 80075a8:	0010      	movs	r0, r2
 80075aa:	0019      	movs	r1, r3
 80075ac:	230a      	movs	r3, #10
 80075ae:	001a      	movs	r2, r3
 80075b0:	f006 ffe4 	bl	800e57c <memcpy>
		strcat(tempMsg,validSender);
 80075b4:	4a3f      	ldr	r2, [pc, #252]	; (80076b4 <send_current_location_via_sms+0x3a4>)
 80075b6:	003b      	movs	r3, r7
 80075b8:	0011      	movs	r1, r2
 80075ba:	0018      	movs	r0, r3
 80075bc:	f007 f810 	bl	800e5e0 <strcat>
		strcat(tempMsg,"\"\r");
 80075c0:	003b      	movs	r3, r7
 80075c2:	0018      	movs	r0, r3
 80075c4:	f7f8 fda6 	bl	8000114 <strlen>
 80075c8:	0003      	movs	r3, r0
 80075ca:	001a      	movs	r2, r3
 80075cc:	003b      	movs	r3, r7
 80075ce:	189a      	adds	r2, r3, r2
 80075d0:	4b39      	ldr	r3, [pc, #228]	; (80076b8 <send_current_location_via_sms+0x3a8>)
 80075d2:	0010      	movs	r0, r2
 80075d4:	0019      	movs	r1, r3
 80075d6:	2303      	movs	r3, #3
 80075d8:	001a      	movs	r2, r3
 80075da:	f006 ffcf 	bl	800e57c <memcpy>
//		strcat(tempMsg, "AT+CMGS=\"3322336979\"\r");
		strcat(tempMsg, buf);
 80075de:	193a      	adds	r2, r7, r4
 80075e0:	003b      	movs	r3, r7
 80075e2:	0011      	movs	r1, r2
 80075e4:	0018      	movs	r0, r3
 80075e6:	f006 fffb 	bl	800e5e0 <strcat>
		memset(buf, 0, sizeof(buf));
 80075ea:	193b      	adds	r3, r7, r4
 80075ec:	220f      	movs	r2, #15
 80075ee:	2100      	movs	r1, #0
 80075f0:	0018      	movs	r0, r3
 80075f2:	f006 ffcc 	bl	800e58e <memset>
		gcvt(longitude, 8, buf);
 80075f6:	197b      	adds	r3, r7, r5
 80075f8:	6818      	ldr	r0, [r3, #0]
 80075fa:	f7fb fcc1 	bl	8002f80 <__aeabi_f2d>
 80075fe:	193b      	adds	r3, r7, r4
 8007600:	2208      	movs	r2, #8
 8007602:	f006 ff6b 	bl	800e4dc <gcvt>
		strcat(tempMsg, ",");
 8007606:	003b      	movs	r3, r7
 8007608:	0018      	movs	r0, r3
 800760a:	f7f8 fd83 	bl	8000114 <strlen>
 800760e:	0003      	movs	r3, r0
 8007610:	001a      	movs	r2, r3
 8007612:	003b      	movs	r3, r7
 8007614:	189a      	adds	r2, r3, r2
 8007616:	4b29      	ldr	r3, [pc, #164]	; (80076bc <send_current_location_via_sms+0x3ac>)
 8007618:	0010      	movs	r0, r2
 800761a:	0019      	movs	r1, r3
 800761c:	2302      	movs	r3, #2
 800761e:	001a      	movs	r2, r3
 8007620:	f006 ffac 	bl	800e57c <memcpy>
		strcat(tempMsg, buf);
 8007624:	193a      	adds	r2, r7, r4
 8007626:	003b      	movs	r3, r7
 8007628:	0011      	movs	r1, r2
 800762a:	0018      	movs	r0, r3
 800762c:	f006 ffd8 	bl	800e5e0 <strcat>
		strcat(tempMsg, ",");
 8007630:	003b      	movs	r3, r7
 8007632:	0018      	movs	r0, r3
 8007634:	f7f8 fd6e 	bl	8000114 <strlen>
 8007638:	0003      	movs	r3, r0
 800763a:	001a      	movs	r2, r3
 800763c:	003b      	movs	r3, r7
 800763e:	189a      	adds	r2, r3, r2
 8007640:	4b1e      	ldr	r3, [pc, #120]	; (80076bc <send_current_location_via_sms+0x3ac>)
 8007642:	0010      	movs	r0, r2
 8007644:	0019      	movs	r1, r3
 8007646:	2302      	movs	r3, #2
 8007648:	001a      	movs	r2, r3
 800764a:	f006 ff97 	bl	800e57c <memcpy>
		memset(buf, 0, sizeof(buf));
 800764e:	193b      	adds	r3, r7, r4
 8007650:	220f      	movs	r2, #15
 8007652:	2100      	movs	r1, #0
 8007654:	0018      	movs	r0, r3
 8007656:	f006 ff9a 	bl	800e58e <memset>
		int2string(speed, buf);
 800765a:	21d6      	movs	r1, #214	; 0xd6
 800765c:	187b      	adds	r3, r7, r1
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	193a      	adds	r2, r7, r4
 8007662:	0011      	movs	r1, r2
 8007664:	0018      	movs	r0, r3
 8007666:	f000 f9af 	bl	80079c8 <int2string>
		strcat(tempMsg, ",");
 800766a:	003b      	movs	r3, r7
 800766c:	0018      	movs	r0, r3
 800766e:	f7f8 fd51 	bl	8000114 <strlen>
 8007672:	0003      	movs	r3, r0
 8007674:	001a      	movs	r2, r3
 8007676:	003b      	movs	r3, r7
 8007678:	189a      	adds	r2, r3, r2
 800767a:	4b10      	ldr	r3, [pc, #64]	; (80076bc <send_current_location_via_sms+0x3ac>)
 800767c:	0010      	movs	r0, r2
 800767e:	0019      	movs	r1, r3
 8007680:	2302      	movs	r3, #2
 8007682:	001a      	movs	r2, r3
 8007684:	f006 ff7a 	bl	800e57c <memcpy>
		strcat(tempMsg, buf);
 8007688:	193a      	adds	r2, r7, r4
 800768a:	003b      	movs	r3, r7
 800768c:	0011      	movs	r1, r2
 800768e:	0018      	movs	r0, r3
 8007690:	f006 ffa6 	bl	800e5e0 <strcat>
		uint8_t tempCount = 0;
 8007694:	23d7      	movs	r3, #215	; 0xd7
 8007696:	18fb      	adds	r3, r7, r3
 8007698:	2200      	movs	r2, #0
 800769a:	701a      	strb	r2, [r3, #0]

		while (tempMsg[tempCount] != NULL) {
 800769c:	e016      	b.n	80076cc <send_current_location_via_sms+0x3bc>
 800769e:	46c0      	nop			; (mov r8, r8)
 80076a0:	20000700 	.word	0x20000700
 80076a4:	20000020 	.word	0x20000020
 80076a8:	40dd4c00 	.word	0x40dd4c00
 80076ac:	404e0000 	.word	0x404e0000
 80076b0:	08012c2c 	.word	0x08012c2c
 80076b4:	20000000 	.word	0x20000000
 80076b8:	08012c38 	.word	0x08012c38
 80076bc:	08012bb8 	.word	0x08012bb8
			tempCount++;
 80076c0:	21d7      	movs	r1, #215	; 0xd7
 80076c2:	187b      	adds	r3, r7, r1
 80076c4:	781a      	ldrb	r2, [r3, #0]
 80076c6:	187b      	adds	r3, r7, r1
 80076c8:	3201      	adds	r2, #1
 80076ca:	701a      	strb	r2, [r3, #0]
		while (tempMsg[tempCount] != NULL) {
 80076cc:	21d7      	movs	r1, #215	; 0xd7
 80076ce:	187b      	adds	r3, r7, r1
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	003a      	movs	r2, r7
 80076d4:	5cd3      	ldrb	r3, [r2, r3]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d1f2      	bne.n	80076c0 <send_current_location_via_sms+0x3b0>
		}

		tempMsg[tempCount] = 26;
 80076da:	187b      	adds	r3, r7, r1
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	003a      	movs	r2, r7
 80076e0:	211a      	movs	r1, #26
 80076e2:	54d1      	strb	r1, [r2, r3]
		//printf("--Sending message to mobile \n");

		send_command(tempMsg, 12005, 7, 0, 0);
 80076e4:	4905      	ldr	r1, [pc, #20]	; (80076fc <send_current_location_via_sms+0x3ec>)
 80076e6:	0038      	movs	r0, r7
 80076e8:	2300      	movs	r3, #0
 80076ea:	9300      	str	r3, [sp, #0]
 80076ec:	2300      	movs	r3, #0
 80076ee:	2207      	movs	r2, #7
 80076f0:	f7fe fed8 	bl	80064a4 <send_command>

		// char tecMsg[] = {'A','T','+','C','M','G','S','=','\"','3','3','2','2','3','3','6','9','7','9','\"','\r','h','e','l','l','o',26,0};

		//    send_command(tecMsg, 12005, 7, 0, 0);
	}
}
 80076f4:	46c0      	nop			; (mov r8, r8)
 80076f6:	46bd      	mov	sp, r7
 80076f8:	b037      	add	sp, #220	; 0xdc
 80076fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076fc:	00002ee5 	.word	0x00002ee5

08007700 <send_location_packet_via_sms>:
void send_location_packet_via_sms(){
 8007700:	b5b0      	push	{r4, r5, r7, lr}
 8007702:	4c9e      	ldr	r4, [pc, #632]	; (800797c <send_location_packet_via_sms+0x27c>)
 8007704:	44a5      	add	sp, r4
 8007706:	af02      	add	r7, sp, #8
	if(isSMSActive==1){
 8007708:	4b9d      	ldr	r3, [pc, #628]	; (8007980 <send_location_packet_via_sms+0x280>)
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	2b01      	cmp	r3, #1
 800770e:	d000      	beq.n	8007712 <send_location_packet_via_sms+0x12>
 8007710:	e12e      	b.n	8007970 <send_location_packet_via_sms+0x270>
		msgCounter = 0;
 8007712:	4b9c      	ldr	r3, [pc, #624]	; (8007984 <send_location_packet_via_sms+0x284>)
 8007714:	2200      	movs	r2, #0
 8007716:	701a      	strb	r2, [r3, #0]
		uint8_t dataSize = 0;
 8007718:	499b      	ldr	r1, [pc, #620]	; (8007988 <send_location_packet_via_sms+0x288>)
 800771a:	187b      	adds	r3, r7, r1
 800771c:	2200      	movs	r2, #0
 800771e:	701a      	strb	r2, [r3, #0]
		dataSize = checkdatasize();
 8007720:	187c      	adds	r4, r7, r1
 8007722:	f7ff faf3 	bl	8006d0c <checkdatasize>
 8007726:	0003      	movs	r3, r0
 8007728:	7023      	strb	r3, [r4, #0]
		while (dataSize == 1 && msgCounter < msgCount) {
 800772a:	e115      	b.n	8007958 <send_location_packet_via_sms+0x258>
			stats = 6;
 800772c:	4b97      	ldr	r3, [pc, #604]	; (800798c <send_location_packet_via_sms+0x28c>)
 800772e:	2206      	movs	r2, #6
 8007730:	701a      	strb	r2, [r3, #0]
			uint8_t loopCount = 0;
 8007732:	4b97      	ldr	r3, [pc, #604]	; (8007990 <send_location_packet_via_sms+0x290>)
 8007734:	18fb      	adds	r3, r7, r3
 8007736:	2200      	movs	r2, #0
 8007738:	701a      	strb	r2, [r3, #0]
			memset(bunchdata, 0, sizeof(bunchdata));
 800773a:	23a8      	movs	r3, #168	; 0xa8
 800773c:	009a      	lsls	r2, r3, #2
 800773e:	4b95      	ldr	r3, [pc, #596]	; (8007994 <send_location_packet_via_sms+0x294>)
 8007740:	2100      	movs	r1, #0
 8007742:	0018      	movs	r0, r3
 8007744:	f006 ff23 	bl	800e58e <memset>
			//printf("--Sending AT+CREG?-- \n");
			send_command("AT+CREG?\r\n", 3, 3, 3, 1);
 8007748:	4893      	ldr	r0, [pc, #588]	; (8007998 <send_location_packet_via_sms+0x298>)
 800774a:	2301      	movs	r3, #1
 800774c:	9300      	str	r3, [sp, #0]
 800774e:	2303      	movs	r3, #3
 8007750:	2203      	movs	r2, #3
 8007752:	2103      	movs	r1, #3
 8007754:	f7fe fea6 	bl	80064a4 <send_command>
			if (isReg == 1) {
 8007758:	4b90      	ldr	r3, [pc, #576]	; (800799c <send_location_packet_via_sms+0x29c>)
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	2b01      	cmp	r3, #1
 800775e:	d000      	beq.n	8007762 <send_location_packet_via_sms+0x62>
 8007760:	e105      	b.n	800796e <send_location_packet_via_sms+0x26e>
				while (read_data_packet() == 1 && loopCount < smsBunch) {
 8007762:	e023      	b.n	80077ac <send_location_packet_via_sms+0xac>
					//printf("readed the data \n");
					for (uint8_t i = 0; i < 18; i++) {
 8007764:	4b8e      	ldr	r3, [pc, #568]	; (80079a0 <send_location_packet_via_sms+0x2a0>)
 8007766:	18fb      	adds	r3, r7, r3
 8007768:	2200      	movs	r2, #0
 800776a:	701a      	strb	r2, [r3, #0]
 800776c:	e013      	b.n	8007796 <send_location_packet_via_sms+0x96>
						bunchdata[loopCount][i] = readPacket[i];
 800776e:	4c8c      	ldr	r4, [pc, #560]	; (80079a0 <send_location_packet_via_sms+0x2a0>)
 8007770:	193b      	adds	r3, r7, r4
 8007772:	7819      	ldrb	r1, [r3, #0]
 8007774:	4b86      	ldr	r3, [pc, #536]	; (8007990 <send_location_packet_via_sms+0x290>)
 8007776:	18fb      	adds	r3, r7, r3
 8007778:	781a      	ldrb	r2, [r3, #0]
 800777a:	193b      	adds	r3, r7, r4
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	4889      	ldr	r0, [pc, #548]	; (80079a4 <send_location_packet_via_sms+0x2a4>)
 8007780:	5c40      	ldrb	r0, [r0, r1]
 8007782:	4984      	ldr	r1, [pc, #528]	; (8007994 <send_location_packet_via_sms+0x294>)
 8007784:	0152      	lsls	r2, r2, #5
 8007786:	188a      	adds	r2, r1, r2
 8007788:	1c01      	adds	r1, r0, #0
 800778a:	54d1      	strb	r1, [r2, r3]
					for (uint8_t i = 0; i < 18; i++) {
 800778c:	193b      	adds	r3, r7, r4
 800778e:	781a      	ldrb	r2, [r3, #0]
 8007790:	193b      	adds	r3, r7, r4
 8007792:	3201      	adds	r2, #1
 8007794:	701a      	strb	r2, [r3, #0]
 8007796:	4b82      	ldr	r3, [pc, #520]	; (80079a0 <send_location_packet_via_sms+0x2a0>)
 8007798:	18fb      	adds	r3, r7, r3
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	2b11      	cmp	r3, #17
 800779e:	d9e6      	bls.n	800776e <send_location_packet_via_sms+0x6e>
					}
					loopCount++;
 80077a0:	497b      	ldr	r1, [pc, #492]	; (8007990 <send_location_packet_via_sms+0x290>)
 80077a2:	187b      	adds	r3, r7, r1
 80077a4:	781a      	ldrb	r2, [r3, #0]
 80077a6:	187b      	adds	r3, r7, r1
 80077a8:	3201      	adds	r2, #1
 80077aa:	701a      	strb	r2, [r3, #0]
				while (read_data_packet() == 1 && loopCount < smsBunch) {
 80077ac:	f7ff fb76 	bl	8006e9c <read_data_packet>
 80077b0:	0003      	movs	r3, r0
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d104      	bne.n	80077c0 <send_location_packet_via_sms+0xc0>
 80077b6:	4b76      	ldr	r3, [pc, #472]	; (8007990 <send_location_packet_via_sms+0x290>)
 80077b8:	18fb      	adds	r3, r7, r3
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	2b09      	cmp	r3, #9
 80077be:	d9d1      	bls.n	8007764 <send_location_packet_via_sms+0x64>
				}
				char temMsg[1000];
				int n = 21;
 80077c0:	2315      	movs	r3, #21
 80077c2:	22fc      	movs	r2, #252	; 0xfc
 80077c4:	0092      	lsls	r2, r2, #2
 80077c6:	18ba      	adds	r2, r7, r2
 80077c8:	6013      	str	r3, [r2, #0]
				int tempCt = 0;
 80077ca:	2300      	movs	r3, #0
 80077cc:	22fb      	movs	r2, #251	; 0xfb
 80077ce:	0092      	lsls	r2, r2, #2
 80077d0:	18ba      	adds	r2, r7, r2
 80077d2:	6013      	str	r3, [r2, #0]
				memset(temMsg, 0, sizeof(temMsg));
 80077d4:	23fa      	movs	r3, #250	; 0xfa
 80077d6:	009a      	lsls	r2, r3, #2
 80077d8:	003b      	movs	r3, r7
 80077da:	2100      	movs	r1, #0
 80077dc:	0018      	movs	r0, r3
 80077de:	f006 fed6 	bl	800e58e <memset>
				strcat(temMsg,"AT+CMGS=\"");
 80077e2:	003b      	movs	r3, r7
 80077e4:	0018      	movs	r0, r3
 80077e6:	f7f8 fc95 	bl	8000114 <strlen>
 80077ea:	0003      	movs	r3, r0
 80077ec:	001a      	movs	r2, r3
 80077ee:	003b      	movs	r3, r7
 80077f0:	189a      	adds	r2, r3, r2
 80077f2:	4b6d      	ldr	r3, [pc, #436]	; (80079a8 <send_location_packet_via_sms+0x2a8>)
 80077f4:	0010      	movs	r0, r2
 80077f6:	0019      	movs	r1, r3
 80077f8:	230a      	movs	r3, #10
 80077fa:	001a      	movs	r2, r3
 80077fc:	f006 febe 	bl	800e57c <memcpy>
				strcat(temMsg,validSender);
 8007800:	4a6a      	ldr	r2, [pc, #424]	; (80079ac <send_location_packet_via_sms+0x2ac>)
 8007802:	003b      	movs	r3, r7
 8007804:	0011      	movs	r1, r2
 8007806:	0018      	movs	r0, r3
 8007808:	f006 feea 	bl	800e5e0 <strcat>
				strcat(temMsg,"\"\r");
 800780c:	003b      	movs	r3, r7
 800780e:	0018      	movs	r0, r3
 8007810:	f7f8 fc80 	bl	8000114 <strlen>
 8007814:	0003      	movs	r3, r0
 8007816:	001a      	movs	r2, r3
 8007818:	003b      	movs	r3, r7
 800781a:	189a      	adds	r2, r3, r2
 800781c:	4b64      	ldr	r3, [pc, #400]	; (80079b0 <send_location_packet_via_sms+0x2b0>)
 800781e:	0010      	movs	r0, r2
 8007820:	0019      	movs	r1, r3
 8007822:	2303      	movs	r3, #3
 8007824:	001a      	movs	r2, r3
 8007826:	f006 fea9 	bl	800e57c <memcpy>
	//			strcat(temMsg, "AT+CMGS=\"3322336979\"\r");
				// todo send 21 msg packet
				for (uint8_t i = 0; i < loopCount; i++) {
 800782a:	4b62      	ldr	r3, [pc, #392]	; (80079b4 <send_location_packet_via_sms+0x2b4>)
 800782c:	18fb      	adds	r3, r7, r3
 800782e:	2200      	movs	r2, #0
 8007830:	701a      	strb	r2, [r3, #0]
 8007832:	e053      	b.n	80078dc <send_location_packet_via_sms+0x1dc>
					for (uint8_t y = 0; y < 18; y++) {
 8007834:	4b60      	ldr	r3, [pc, #384]	; (80079b8 <send_location_packet_via_sms+0x2b8>)
 8007836:	18fb      	adds	r3, r7, r3
 8007838:	2200      	movs	r2, #0
 800783a:	701a      	strb	r2, [r3, #0]
 800783c:	e01f      	b.n	800787e <send_location_packet_via_sms+0x17e>
						n += sprintf(&temMsg[n], "%d", bunchdata[i][y]);
 800783e:	003a      	movs	r2, r7
 8007840:	24fc      	movs	r4, #252	; 0xfc
 8007842:	00a4      	lsls	r4, r4, #2
 8007844:	193b      	adds	r3, r7, r4
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	18d0      	adds	r0, r2, r3
 800784a:	4b5a      	ldr	r3, [pc, #360]	; (80079b4 <send_location_packet_via_sms+0x2b4>)
 800784c:	18fb      	adds	r3, r7, r3
 800784e:	781a      	ldrb	r2, [r3, #0]
 8007850:	4d59      	ldr	r5, [pc, #356]	; (80079b8 <send_location_packet_via_sms+0x2b8>)
 8007852:	197b      	adds	r3, r7, r5
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	494f      	ldr	r1, [pc, #316]	; (8007994 <send_location_packet_via_sms+0x294>)
 8007858:	0152      	lsls	r2, r2, #5
 800785a:	188a      	adds	r2, r1, r2
 800785c:	5cd3      	ldrb	r3, [r2, r3]
 800785e:	001a      	movs	r2, r3
 8007860:	4b56      	ldr	r3, [pc, #344]	; (80079bc <send_location_packet_via_sms+0x2bc>)
 8007862:	0019      	movs	r1, r3
 8007864:	f006 fe9c 	bl	800e5a0 <siprintf>
 8007868:	0002      	movs	r2, r0
 800786a:	193b      	adds	r3, r7, r4
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	189b      	adds	r3, r3, r2
 8007870:	193a      	adds	r2, r7, r4
 8007872:	6013      	str	r3, [r2, #0]
					for (uint8_t y = 0; y < 18; y++) {
 8007874:	197b      	adds	r3, r7, r5
 8007876:	781a      	ldrb	r2, [r3, #0]
 8007878:	197b      	adds	r3, r7, r5
 800787a:	3201      	adds	r2, #1
 800787c:	701a      	strb	r2, [r3, #0]
 800787e:	4b4e      	ldr	r3, [pc, #312]	; (80079b8 <send_location_packet_via_sms+0x2b8>)
 8007880:	18fb      	adds	r3, r7, r3
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	2b11      	cmp	r3, #17
 8007886:	d9da      	bls.n	800783e <send_location_packet_via_sms+0x13e>
					}
					while (temMsg[tempCt] != NULL) {
 8007888:	e006      	b.n	8007898 <send_location_packet_via_sms+0x198>
						tempCt++;
 800788a:	22fb      	movs	r2, #251	; 0xfb
 800788c:	0092      	lsls	r2, r2, #2
 800788e:	18bb      	adds	r3, r7, r2
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	3301      	adds	r3, #1
 8007894:	18ba      	adds	r2, r7, r2
 8007896:	6013      	str	r3, [r2, #0]
					while (temMsg[tempCt] != NULL) {
 8007898:	4b49      	ldr	r3, [pc, #292]	; (80079c0 <send_location_packet_via_sms+0x2c0>)
 800789a:	21fe      	movs	r1, #254	; 0xfe
 800789c:	0089      	lsls	r1, r1, #2
 800789e:	185b      	adds	r3, r3, r1
 80078a0:	19da      	adds	r2, r3, r7
 80078a2:	20fb      	movs	r0, #251	; 0xfb
 80078a4:	0080      	lsls	r0, r0, #2
 80078a6:	183b      	adds	r3, r7, r0
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	18d3      	adds	r3, r2, r3
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d1eb      	bne.n	800788a <send_location_packet_via_sms+0x18a>
					}
					temMsg[tempCt] = ',';
 80078b2:	4b43      	ldr	r3, [pc, #268]	; (80079c0 <send_location_packet_via_sms+0x2c0>)
 80078b4:	185b      	adds	r3, r3, r1
 80078b6:	19da      	adds	r2, r3, r7
 80078b8:	183b      	adds	r3, r7, r0
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	18d3      	adds	r3, r2, r3
 80078be:	222c      	movs	r2, #44	; 0x2c
 80078c0:	701a      	strb	r2, [r3, #0]
					n++;
 80078c2:	22fc      	movs	r2, #252	; 0xfc
 80078c4:	0092      	lsls	r2, r2, #2
 80078c6:	18bb      	adds	r3, r7, r2
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	3301      	adds	r3, #1
 80078cc:	18ba      	adds	r2, r7, r2
 80078ce:	6013      	str	r3, [r2, #0]
				for (uint8_t i = 0; i < loopCount; i++) {
 80078d0:	4938      	ldr	r1, [pc, #224]	; (80079b4 <send_location_packet_via_sms+0x2b4>)
 80078d2:	187b      	adds	r3, r7, r1
 80078d4:	781a      	ldrb	r2, [r3, #0]
 80078d6:	187b      	adds	r3, r7, r1
 80078d8:	3201      	adds	r2, #1
 80078da:	701a      	strb	r2, [r3, #0]
 80078dc:	4b35      	ldr	r3, [pc, #212]	; (80079b4 <send_location_packet_via_sms+0x2b4>)
 80078de:	18fa      	adds	r2, r7, r3
 80078e0:	4b2b      	ldr	r3, [pc, #172]	; (8007990 <send_location_packet_via_sms+0x290>)
 80078e2:	18fb      	adds	r3, r7, r3
 80078e4:	7812      	ldrb	r2, [r2, #0]
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d3a3      	bcc.n	8007834 <send_location_packet_via_sms+0x134>
				}
				tempCt = 0;
 80078ec:	2300      	movs	r3, #0
 80078ee:	22fb      	movs	r2, #251	; 0xfb
 80078f0:	0092      	lsls	r2, r2, #2
 80078f2:	18ba      	adds	r2, r7, r2
 80078f4:	6013      	str	r3, [r2, #0]
				while (temMsg[tempCt] != NULL) {
 80078f6:	e006      	b.n	8007906 <send_location_packet_via_sms+0x206>
					tempCt++;
 80078f8:	22fb      	movs	r2, #251	; 0xfb
 80078fa:	0092      	lsls	r2, r2, #2
 80078fc:	18bb      	adds	r3, r7, r2
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	3301      	adds	r3, #1
 8007902:	18ba      	adds	r2, r7, r2
 8007904:	6013      	str	r3, [r2, #0]
				while (temMsg[tempCt] != NULL) {
 8007906:	4b2e      	ldr	r3, [pc, #184]	; (80079c0 <send_location_packet_via_sms+0x2c0>)
 8007908:	21fe      	movs	r1, #254	; 0xfe
 800790a:	0089      	lsls	r1, r1, #2
 800790c:	185b      	adds	r3, r3, r1
 800790e:	19da      	adds	r2, r3, r7
 8007910:	20fb      	movs	r0, #251	; 0xfb
 8007912:	0080      	lsls	r0, r0, #2
 8007914:	183b      	adds	r3, r7, r0
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	18d3      	adds	r3, r2, r3
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d1eb      	bne.n	80078f8 <send_location_packet_via_sms+0x1f8>
				}
				temMsg[tempCt] = 26;
 8007920:	4b27      	ldr	r3, [pc, #156]	; (80079c0 <send_location_packet_via_sms+0x2c0>)
 8007922:	185b      	adds	r3, r3, r1
 8007924:	19da      	adds	r2, r3, r7
 8007926:	183b      	adds	r3, r7, r0
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	18d3      	adds	r3, r2, r3
 800792c:	221a      	movs	r2, #26
 800792e:	701a      	strb	r2, [r3, #0]
				send_command(temMsg, 12005, 7, 0, 0);
 8007930:	4924      	ldr	r1, [pc, #144]	; (80079c4 <send_location_packet_via_sms+0x2c4>)
 8007932:	0038      	movs	r0, r7
 8007934:	2300      	movs	r3, #0
 8007936:	9300      	str	r3, [sp, #0]
 8007938:	2300      	movs	r3, #0
 800793a:	2207      	movs	r2, #7
 800793c:	f7fe fdb2 	bl	80064a4 <send_command>
				dataSize = checkdatasize();
 8007940:	4b11      	ldr	r3, [pc, #68]	; (8007988 <send_location_packet_via_sms+0x288>)
 8007942:	18fc      	adds	r4, r7, r3
 8007944:	f7ff f9e2 	bl	8006d0c <checkdatasize>
 8007948:	0003      	movs	r3, r0
 800794a:	7023      	strb	r3, [r4, #0]
				msgCounter++;
 800794c:	4b0d      	ldr	r3, [pc, #52]	; (8007984 <send_location_packet_via_sms+0x284>)
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	3301      	adds	r3, #1
 8007952:	b2da      	uxtb	r2, r3
 8007954:	4b0b      	ldr	r3, [pc, #44]	; (8007984 <send_location_packet_via_sms+0x284>)
 8007956:	701a      	strb	r2, [r3, #0]
		while (dataSize == 1 && msgCounter < msgCount) {
 8007958:	4b0b      	ldr	r3, [pc, #44]	; (8007988 <send_location_packet_via_sms+0x288>)
 800795a:	18fb      	adds	r3, r7, r3
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	2b01      	cmp	r3, #1
 8007960:	d106      	bne.n	8007970 <send_location_packet_via_sms+0x270>
 8007962:	4b08      	ldr	r3, [pc, #32]	; (8007984 <send_location_packet_via_sms+0x284>)
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	2b09      	cmp	r3, #9
 8007968:	d800      	bhi.n	800796c <send_location_packet_via_sms+0x26c>
 800796a:	e6df      	b.n	800772c <send_location_packet_via_sms+0x2c>
			} else {
				break;
			}
		}
	}
}
 800796c:	e000      	b.n	8007970 <send_location_packet_via_sms+0x270>
				break;
 800796e:	46c0      	nop			; (mov r8, r8)
}
 8007970:	46c0      	nop			; (mov r8, r8)
 8007972:	46bd      	mov	sp, r7
 8007974:	23fe      	movs	r3, #254	; 0xfe
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	449d      	add	sp, r3
 800797a:	bdb0      	pop	{r4, r5, r7, pc}
 800797c:	fffffc00 	.word	0xfffffc00
 8007980:	20000700 	.word	0x20000700
 8007984:	2000070d 	.word	0x2000070d
 8007988:	000003f7 	.word	0x000003f7
 800798c:	2000102d 	.word	0x2000102d
 8007990:	000003f6 	.word	0x000003f6
 8007994:	20000d84 	.word	0x20000d84
 8007998:	08012a58 	.word	0x08012a58
 800799c:	20000d3f 	.word	0x20000d3f
 80079a0:	000003f5 	.word	0x000003f5
 80079a4:	20000d64 	.word	0x20000d64
 80079a8:	08012c2c 	.word	0x08012c2c
 80079ac:	20000000 	.word	0x20000000
 80079b0:	08012c38 	.word	0x08012c38
 80079b4:	000003eb 	.word	0x000003eb
 80079b8:	000003ea 	.word	0x000003ea
 80079bc:	08012c3c 	.word	0x08012c3c
 80079c0:	fffffc08 	.word	0xfffffc08
 80079c4:	00002ee5 	.word	0x00002ee5

080079c8 <int2string>:
char* int2string(int num, char *str) {
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
	if (str == NULL) {
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d101      	bne.n	80079dc <int2string+0x14>
		return NULL;
 80079d8:	2300      	movs	r3, #0
 80079da:	e006      	b.n	80079ea <int2string+0x22>
	}
	sprintf(str, "%d", num);
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	4905      	ldr	r1, [pc, #20]	; (80079f4 <int2string+0x2c>)
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	0018      	movs	r0, r3
 80079e4:	f006 fddc 	bl	800e5a0 <siprintf>
	return str;
 80079e8:	683b      	ldr	r3, [r7, #0]
}
 80079ea:	0018      	movs	r0, r3
 80079ec:	46bd      	mov	sp, r7
 80079ee:	b002      	add	sp, #8
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	46c0      	nop			; (mov r8, r8)
 80079f4:	08012c3c 	.word	0x08012c3c

080079f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80079fc:	b672      	cpsid	i
}
 80079fe:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8007a00:	e7fe      	b.n	8007a00 <Error_Handler+0x8>
	...

08007a04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007a0a:	4b0f      	ldr	r3, [pc, #60]	; (8007a48 <HAL_MspInit+0x44>)
 8007a0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a0e:	4b0e      	ldr	r3, [pc, #56]	; (8007a48 <HAL_MspInit+0x44>)
 8007a10:	2101      	movs	r1, #1
 8007a12:	430a      	orrs	r2, r1
 8007a14:	641a      	str	r2, [r3, #64]	; 0x40
 8007a16:	4b0c      	ldr	r3, [pc, #48]	; (8007a48 <HAL_MspInit+0x44>)
 8007a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	4013      	ands	r3, r2
 8007a1e:	607b      	str	r3, [r7, #4]
 8007a20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007a22:	4b09      	ldr	r3, [pc, #36]	; (8007a48 <HAL_MspInit+0x44>)
 8007a24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a26:	4b08      	ldr	r3, [pc, #32]	; (8007a48 <HAL_MspInit+0x44>)
 8007a28:	2180      	movs	r1, #128	; 0x80
 8007a2a:	0549      	lsls	r1, r1, #21
 8007a2c:	430a      	orrs	r2, r1
 8007a2e:	63da      	str	r2, [r3, #60]	; 0x3c
 8007a30:	4b05      	ldr	r3, [pc, #20]	; (8007a48 <HAL_MspInit+0x44>)
 8007a32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a34:	2380      	movs	r3, #128	; 0x80
 8007a36:	055b      	lsls	r3, r3, #21
 8007a38:	4013      	ands	r3, r2
 8007a3a:	603b      	str	r3, [r7, #0]
 8007a3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007a3e:	46c0      	nop			; (mov r8, r8)
 8007a40:	46bd      	mov	sp, r7
 8007a42:	b002      	add	sp, #8
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	46c0      	nop			; (mov r8, r8)
 8007a48:	40021000 	.word	0x40021000

08007a4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007a4c:	b590      	push	{r4, r7, lr}
 8007a4e:	b08b      	sub	sp, #44	; 0x2c
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a54:	2414      	movs	r4, #20
 8007a56:	193b      	adds	r3, r7, r4
 8007a58:	0018      	movs	r0, r3
 8007a5a:	2314      	movs	r3, #20
 8007a5c:	001a      	movs	r2, r3
 8007a5e:	2100      	movs	r1, #0
 8007a60:	f006 fd95 	bl	800e58e <memset>
  if(hspi->Instance==SPI1)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a1f      	ldr	r2, [pc, #124]	; (8007ae8 <HAL_SPI_MspInit+0x9c>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d137      	bne.n	8007ade <HAL_SPI_MspInit+0x92>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007a6e:	4b1f      	ldr	r3, [pc, #124]	; (8007aec <HAL_SPI_MspInit+0xa0>)
 8007a70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a72:	4b1e      	ldr	r3, [pc, #120]	; (8007aec <HAL_SPI_MspInit+0xa0>)
 8007a74:	2180      	movs	r1, #128	; 0x80
 8007a76:	0149      	lsls	r1, r1, #5
 8007a78:	430a      	orrs	r2, r1
 8007a7a:	641a      	str	r2, [r3, #64]	; 0x40
 8007a7c:	4b1b      	ldr	r3, [pc, #108]	; (8007aec <HAL_SPI_MspInit+0xa0>)
 8007a7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a80:	2380      	movs	r3, #128	; 0x80
 8007a82:	015b      	lsls	r3, r3, #5
 8007a84:	4013      	ands	r3, r2
 8007a86:	613b      	str	r3, [r7, #16]
 8007a88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007a8a:	4b18      	ldr	r3, [pc, #96]	; (8007aec <HAL_SPI_MspInit+0xa0>)
 8007a8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a8e:	4b17      	ldr	r3, [pc, #92]	; (8007aec <HAL_SPI_MspInit+0xa0>)
 8007a90:	2102      	movs	r1, #2
 8007a92:	430a      	orrs	r2, r1
 8007a94:	635a      	str	r2, [r3, #52]	; 0x34
 8007a96:	4b15      	ldr	r3, [pc, #84]	; (8007aec <HAL_SPI_MspInit+0xa0>)
 8007a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a9a:	2202      	movs	r2, #2
 8007a9c:	4013      	ands	r3, r2
 8007a9e:	60fb      	str	r3, [r7, #12]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8007aa2:	0021      	movs	r1, r4
 8007aa4:	187b      	adds	r3, r7, r1
 8007aa6:	2238      	movs	r2, #56	; 0x38
 8007aa8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007aaa:	187b      	adds	r3, r7, r1
 8007aac:	2202      	movs	r2, #2
 8007aae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ab0:	187b      	adds	r3, r7, r1
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ab6:	187b      	adds	r3, r7, r1
 8007ab8:	2200      	movs	r2, #0
 8007aba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8007abc:	187b      	adds	r3, r7, r1
 8007abe:	2200      	movs	r2, #0
 8007ac0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007ac2:	187b      	adds	r3, r7, r1
 8007ac4:	4a0a      	ldr	r2, [pc, #40]	; (8007af0 <HAL_SPI_MspInit+0xa4>)
 8007ac6:	0019      	movs	r1, r3
 8007ac8:	0010      	movs	r0, r2
 8007aca:	f001 fdab 	bl	8009624 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 3, 0);
 8007ace:	2200      	movs	r2, #0
 8007ad0:	2103      	movs	r1, #3
 8007ad2:	2019      	movs	r0, #25
 8007ad4:	f001 fa56 	bl	8008f84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8007ad8:	2019      	movs	r0, #25
 8007ada:	f001 fa68 	bl	8008fae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8007ade:	46c0      	nop			; (mov r8, r8)
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	b00b      	add	sp, #44	; 0x2c
 8007ae4:	bd90      	pop	{r4, r7, pc}
 8007ae6:	46c0      	nop			; (mov r8, r8)
 8007ae8:	40013000 	.word	0x40013000
 8007aec:	40021000 	.word	0x40021000
 8007af0:	50000400 	.word	0x50000400

08007af4 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8007af4:	b590      	push	{r4, r7, lr}
 8007af6:	b08b      	sub	sp, #44	; 0x2c
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007afc:	2414      	movs	r4, #20
 8007afe:	193b      	adds	r3, r7, r4
 8007b00:	0018      	movs	r0, r3
 8007b02:	2314      	movs	r3, #20
 8007b04:	001a      	movs	r2, r3
 8007b06:	2100      	movs	r1, #0
 8007b08:	f006 fd41 	bl	800e58e <memset>
  if(htim_ic->Instance==TIM3)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a34      	ldr	r2, [pc, #208]	; (8007be4 <HAL_TIM_IC_MspInit+0xf0>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d161      	bne.n	8007bda <HAL_TIM_IC_MspInit+0xe6>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007b16:	4b34      	ldr	r3, [pc, #208]	; (8007be8 <HAL_TIM_IC_MspInit+0xf4>)
 8007b18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b1a:	4b33      	ldr	r3, [pc, #204]	; (8007be8 <HAL_TIM_IC_MspInit+0xf4>)
 8007b1c:	2102      	movs	r1, #2
 8007b1e:	430a      	orrs	r2, r1
 8007b20:	63da      	str	r2, [r3, #60]	; 0x3c
 8007b22:	4b31      	ldr	r3, [pc, #196]	; (8007be8 <HAL_TIM_IC_MspInit+0xf4>)
 8007b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b26:	2202      	movs	r2, #2
 8007b28:	4013      	ands	r3, r2
 8007b2a:	613b      	str	r3, [r7, #16]
 8007b2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b2e:	4b2e      	ldr	r3, [pc, #184]	; (8007be8 <HAL_TIM_IC_MspInit+0xf4>)
 8007b30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b32:	4b2d      	ldr	r3, [pc, #180]	; (8007be8 <HAL_TIM_IC_MspInit+0xf4>)
 8007b34:	2101      	movs	r1, #1
 8007b36:	430a      	orrs	r2, r1
 8007b38:	635a      	str	r2, [r3, #52]	; 0x34
 8007b3a:	4b2b      	ldr	r3, [pc, #172]	; (8007be8 <HAL_TIM_IC_MspInit+0xf4>)
 8007b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b3e:	2201      	movs	r2, #1
 8007b40:	4013      	ands	r3, r2
 8007b42:	60fb      	str	r3, [r7, #12]
 8007b44:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = RI_Pin;
 8007b46:	0021      	movs	r1, r4
 8007b48:	187b      	adds	r3, r7, r1
 8007b4a:	2240      	movs	r2, #64	; 0x40
 8007b4c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b4e:	187b      	adds	r3, r7, r1
 8007b50:	2202      	movs	r2, #2
 8007b52:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007b54:	187b      	adds	r3, r7, r1
 8007b56:	2202      	movs	r2, #2
 8007b58:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b5a:	187b      	adds	r3, r7, r1
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8007b60:	187b      	adds	r3, r7, r1
 8007b62:	2201      	movs	r2, #1
 8007b64:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(RI_GPIO_Port, &GPIO_InitStruct);
 8007b66:	187a      	adds	r2, r7, r1
 8007b68:	23a0      	movs	r3, #160	; 0xa0
 8007b6a:	05db      	lsls	r3, r3, #23
 8007b6c:	0011      	movs	r1, r2
 8007b6e:	0018      	movs	r0, r3
 8007b70:	f001 fd58 	bl	8009624 <HAL_GPIO_Init>

    /* TIM3 DMA Init */
    /* TIM3_CH1 Init */
    hdma_tim3_ch1.Instance = DMA1_Channel1;
 8007b74:	4b1d      	ldr	r3, [pc, #116]	; (8007bec <HAL_TIM_IC_MspInit+0xf8>)
 8007b76:	4a1e      	ldr	r2, [pc, #120]	; (8007bf0 <HAL_TIM_IC_MspInit+0xfc>)
 8007b78:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8007b7a:	4b1c      	ldr	r3, [pc, #112]	; (8007bec <HAL_TIM_IC_MspInit+0xf8>)
 8007b7c:	2220      	movs	r2, #32
 8007b7e:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007b80:	4b1a      	ldr	r3, [pc, #104]	; (8007bec <HAL_TIM_IC_MspInit+0xf8>)
 8007b82:	2200      	movs	r2, #0
 8007b84:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007b86:	4b19      	ldr	r3, [pc, #100]	; (8007bec <HAL_TIM_IC_MspInit+0xf8>)
 8007b88:	2200      	movs	r2, #0
 8007b8a:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8007b8c:	4b17      	ldr	r3, [pc, #92]	; (8007bec <HAL_TIM_IC_MspInit+0xf8>)
 8007b8e:	2280      	movs	r2, #128	; 0x80
 8007b90:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007b92:	4b16      	ldr	r3, [pc, #88]	; (8007bec <HAL_TIM_IC_MspInit+0xf8>)
 8007b94:	2280      	movs	r2, #128	; 0x80
 8007b96:	0052      	lsls	r2, r2, #1
 8007b98:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007b9a:	4b14      	ldr	r3, [pc, #80]	; (8007bec <HAL_TIM_IC_MspInit+0xf8>)
 8007b9c:	2280      	movs	r2, #128	; 0x80
 8007b9e:	00d2      	lsls	r2, r2, #3
 8007ba0:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_CIRCULAR;
 8007ba2:	4b12      	ldr	r3, [pc, #72]	; (8007bec <HAL_TIM_IC_MspInit+0xf8>)
 8007ba4:	2220      	movs	r2, #32
 8007ba6:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8007ba8:	4b10      	ldr	r3, [pc, #64]	; (8007bec <HAL_TIM_IC_MspInit+0xf8>)
 8007baa:	2200      	movs	r2, #0
 8007bac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 8007bae:	4b0f      	ldr	r3, [pc, #60]	; (8007bec <HAL_TIM_IC_MspInit+0xf8>)
 8007bb0:	0018      	movs	r0, r3
 8007bb2:	f001 fa19 	bl	8008fe8 <HAL_DMA_Init>
 8007bb6:	1e03      	subs	r3, r0, #0
 8007bb8:	d001      	beq.n	8007bbe <HAL_TIM_IC_MspInit+0xca>
    {
      Error_Handler();
 8007bba:	f7ff ff1d 	bl	80079f8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_ic,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	4a0a      	ldr	r2, [pc, #40]	; (8007bec <HAL_TIM_IC_MspInit+0xf8>)
 8007bc2:	625a      	str	r2, [r3, #36]	; 0x24
 8007bc4:	4b09      	ldr	r3, [pc, #36]	; (8007bec <HAL_TIM_IC_MspInit+0xf8>)
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	629a      	str	r2, [r3, #40]	; 0x28

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 8007bca:	2200      	movs	r2, #0
 8007bcc:	2103      	movs	r1, #3
 8007bce:	2010      	movs	r0, #16
 8007bd0:	f001 f9d8 	bl	8008f84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8007bd4:	2010      	movs	r0, #16
 8007bd6:	f001 f9ea 	bl	8008fae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8007bda:	46c0      	nop			; (mov r8, r8)
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	b00b      	add	sp, #44	; 0x2c
 8007be0:	bd90      	pop	{r4, r7, pc}
 8007be2:	46c0      	nop			; (mov r8, r8)
 8007be4:	40000400 	.word	0x40000400
 8007be8:	40021000 	.word	0x40021000
 8007bec:	2000044c 	.word	0x2000044c
 8007bf0:	40020008 	.word	0x40020008

08007bf4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b086      	sub	sp, #24
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a2a      	ldr	r2, [pc, #168]	; (8007cac <HAL_TIM_Base_MspInit+0xb8>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d116      	bne.n	8007c34 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8007c06:	4b2a      	ldr	r3, [pc, #168]	; (8007cb0 <HAL_TIM_Base_MspInit+0xbc>)
 8007c08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c0a:	4b29      	ldr	r3, [pc, #164]	; (8007cb0 <HAL_TIM_Base_MspInit+0xbc>)
 8007c0c:	2180      	movs	r1, #128	; 0x80
 8007c0e:	0209      	lsls	r1, r1, #8
 8007c10:	430a      	orrs	r2, r1
 8007c12:	641a      	str	r2, [r3, #64]	; 0x40
 8007c14:	4b26      	ldr	r3, [pc, #152]	; (8007cb0 <HAL_TIM_Base_MspInit+0xbc>)
 8007c16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c18:	2380      	movs	r3, #128	; 0x80
 8007c1a:	021b      	lsls	r3, r3, #8
 8007c1c:	4013      	ands	r3, r2
 8007c1e:	617b      	str	r3, [r7, #20]
 8007c20:	697b      	ldr	r3, [r7, #20]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 3, 0);
 8007c22:	2200      	movs	r2, #0
 8007c24:	2103      	movs	r1, #3
 8007c26:	2013      	movs	r0, #19
 8007c28:	f001 f9ac 	bl	8008f84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8007c2c:	2013      	movs	r0, #19
 8007c2e:	f001 f9be 	bl	8008fae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8007c32:	e036      	b.n	8007ca2 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM16)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a1e      	ldr	r2, [pc, #120]	; (8007cb4 <HAL_TIM_Base_MspInit+0xc0>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d116      	bne.n	8007c6c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8007c3e:	4b1c      	ldr	r3, [pc, #112]	; (8007cb0 <HAL_TIM_Base_MspInit+0xbc>)
 8007c40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c42:	4b1b      	ldr	r3, [pc, #108]	; (8007cb0 <HAL_TIM_Base_MspInit+0xbc>)
 8007c44:	2180      	movs	r1, #128	; 0x80
 8007c46:	0289      	lsls	r1, r1, #10
 8007c48:	430a      	orrs	r2, r1
 8007c4a:	641a      	str	r2, [r3, #64]	; 0x40
 8007c4c:	4b18      	ldr	r3, [pc, #96]	; (8007cb0 <HAL_TIM_Base_MspInit+0xbc>)
 8007c4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c50:	2380      	movs	r3, #128	; 0x80
 8007c52:	029b      	lsls	r3, r3, #10
 8007c54:	4013      	ands	r3, r2
 8007c56:	613b      	str	r3, [r7, #16]
 8007c58:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 3, 0);
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	2103      	movs	r1, #3
 8007c5e:	2015      	movs	r0, #21
 8007c60:	f001 f990 	bl	8008f84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8007c64:	2015      	movs	r0, #21
 8007c66:	f001 f9a2 	bl	8008fae <HAL_NVIC_EnableIRQ>
}
 8007c6a:	e01a      	b.n	8007ca2 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM17)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a11      	ldr	r2, [pc, #68]	; (8007cb8 <HAL_TIM_Base_MspInit+0xc4>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d115      	bne.n	8007ca2 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8007c76:	4b0e      	ldr	r3, [pc, #56]	; (8007cb0 <HAL_TIM_Base_MspInit+0xbc>)
 8007c78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c7a:	4b0d      	ldr	r3, [pc, #52]	; (8007cb0 <HAL_TIM_Base_MspInit+0xbc>)
 8007c7c:	2180      	movs	r1, #128	; 0x80
 8007c7e:	02c9      	lsls	r1, r1, #11
 8007c80:	430a      	orrs	r2, r1
 8007c82:	641a      	str	r2, [r3, #64]	; 0x40
 8007c84:	4b0a      	ldr	r3, [pc, #40]	; (8007cb0 <HAL_TIM_Base_MspInit+0xbc>)
 8007c86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c88:	2380      	movs	r3, #128	; 0x80
 8007c8a:	02db      	lsls	r3, r3, #11
 8007c8c:	4013      	ands	r3, r2
 8007c8e:	60fb      	str	r3, [r7, #12]
 8007c90:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 3, 0);
 8007c92:	2200      	movs	r2, #0
 8007c94:	2103      	movs	r1, #3
 8007c96:	2016      	movs	r0, #22
 8007c98:	f001 f974 	bl	8008f84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8007c9c:	2016      	movs	r0, #22
 8007c9e:	f001 f986 	bl	8008fae <HAL_NVIC_EnableIRQ>
}
 8007ca2:	46c0      	nop			; (mov r8, r8)
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	b006      	add	sp, #24
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	46c0      	nop			; (mov r8, r8)
 8007cac:	40002000 	.word	0x40002000
 8007cb0:	40021000 	.word	0x40021000
 8007cb4:	40014400 	.word	0x40014400
 8007cb8:	40014800 	.word	0x40014800

08007cbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007cbc:	b590      	push	{r4, r7, lr}
 8007cbe:	b099      	sub	sp, #100	; 0x64
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007cc4:	234c      	movs	r3, #76	; 0x4c
 8007cc6:	18fb      	adds	r3, r7, r3
 8007cc8:	0018      	movs	r0, r3
 8007cca:	2314      	movs	r3, #20
 8007ccc:	001a      	movs	r2, r3
 8007cce:	2100      	movs	r1, #0
 8007cd0:	f006 fc5d 	bl	800e58e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007cd4:	2430      	movs	r4, #48	; 0x30
 8007cd6:	193b      	adds	r3, r7, r4
 8007cd8:	0018      	movs	r0, r3
 8007cda:	231c      	movs	r3, #28
 8007cdc:	001a      	movs	r2, r3
 8007cde:	2100      	movs	r1, #0
 8007ce0:	f006 fc55 	bl	800e58e <memset>
  if(huart->Instance==USART1)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a9e      	ldr	r2, [pc, #632]	; (8007f64 <HAL_UART_MspInit+0x2a8>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d148      	bne.n	8007d80 <HAL_UART_MspInit+0xc4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8007cee:	193b      	adds	r3, r7, r4
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8007cf4:	193b      	adds	r3, r7, r4
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007cfa:	193b      	adds	r3, r7, r4
 8007cfc:	0018      	movs	r0, r3
 8007cfe:	f002 fb33 	bl	800a368 <HAL_RCCEx_PeriphCLKConfig>
 8007d02:	1e03      	subs	r3, r0, #0
 8007d04:	d001      	beq.n	8007d0a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8007d06:	f7ff fe77 	bl	80079f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007d0a:	4b97      	ldr	r3, [pc, #604]	; (8007f68 <HAL_UART_MspInit+0x2ac>)
 8007d0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d0e:	4b96      	ldr	r3, [pc, #600]	; (8007f68 <HAL_UART_MspInit+0x2ac>)
 8007d10:	2180      	movs	r1, #128	; 0x80
 8007d12:	01c9      	lsls	r1, r1, #7
 8007d14:	430a      	orrs	r2, r1
 8007d16:	641a      	str	r2, [r3, #64]	; 0x40
 8007d18:	4b93      	ldr	r3, [pc, #588]	; (8007f68 <HAL_UART_MspInit+0x2ac>)
 8007d1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d1c:	2380      	movs	r3, #128	; 0x80
 8007d1e:	01db      	lsls	r3, r3, #7
 8007d20:	4013      	ands	r3, r2
 8007d22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d26:	4b90      	ldr	r3, [pc, #576]	; (8007f68 <HAL_UART_MspInit+0x2ac>)
 8007d28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d2a:	4b8f      	ldr	r3, [pc, #572]	; (8007f68 <HAL_UART_MspInit+0x2ac>)
 8007d2c:	2101      	movs	r1, #1
 8007d2e:	430a      	orrs	r2, r1
 8007d30:	635a      	str	r2, [r3, #52]	; 0x34
 8007d32:	4b8d      	ldr	r3, [pc, #564]	; (8007f68 <HAL_UART_MspInit+0x2ac>)
 8007d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d36:	2201      	movs	r2, #1
 8007d38:	4013      	ands	r3, r2
 8007d3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8007d3e:	214c      	movs	r1, #76	; 0x4c
 8007d40:	187b      	adds	r3, r7, r1
 8007d42:	22c0      	movs	r2, #192	; 0xc0
 8007d44:	00d2      	lsls	r2, r2, #3
 8007d46:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d48:	187b      	adds	r3, r7, r1
 8007d4a:	2202      	movs	r2, #2
 8007d4c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d4e:	187b      	adds	r3, r7, r1
 8007d50:	2200      	movs	r2, #0
 8007d52:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d54:	187b      	adds	r3, r7, r1
 8007d56:	2200      	movs	r2, #0
 8007d58:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8007d5a:	187b      	adds	r3, r7, r1
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d60:	187a      	adds	r2, r7, r1
 8007d62:	23a0      	movs	r3, #160	; 0xa0
 8007d64:	05db      	lsls	r3, r3, #23
 8007d66:	0011      	movs	r1, r2
 8007d68:	0018      	movs	r0, r3
 8007d6a:	f001 fc5b 	bl	8009624 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8007d6e:	2200      	movs	r2, #0
 8007d70:	2103      	movs	r1, #3
 8007d72:	201b      	movs	r0, #27
 8007d74:	f001 f906 	bl	8008f84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007d78:	201b      	movs	r0, #27
 8007d7a:	f001 f918 	bl	8008fae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }

}
 8007d7e:	e0ec      	b.n	8007f5a <HAL_UART_MspInit+0x29e>
  else if(huart->Instance==USART2)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a79      	ldr	r2, [pc, #484]	; (8007f6c <HAL_UART_MspInit+0x2b0>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d148      	bne.n	8007e1c <HAL_UART_MspInit+0x160>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8007d8a:	2130      	movs	r1, #48	; 0x30
 8007d8c:	187b      	adds	r3, r7, r1
 8007d8e:	2202      	movs	r2, #2
 8007d90:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8007d92:	187b      	adds	r3, r7, r1
 8007d94:	2200      	movs	r2, #0
 8007d96:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007d98:	187b      	adds	r3, r7, r1
 8007d9a:	0018      	movs	r0, r3
 8007d9c:	f002 fae4 	bl	800a368 <HAL_RCCEx_PeriphCLKConfig>
 8007da0:	1e03      	subs	r3, r0, #0
 8007da2:	d001      	beq.n	8007da8 <HAL_UART_MspInit+0xec>
      Error_Handler();
 8007da4:	f7ff fe28 	bl	80079f8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8007da8:	4b6f      	ldr	r3, [pc, #444]	; (8007f68 <HAL_UART_MspInit+0x2ac>)
 8007daa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007dac:	4b6e      	ldr	r3, [pc, #440]	; (8007f68 <HAL_UART_MspInit+0x2ac>)
 8007dae:	2180      	movs	r1, #128	; 0x80
 8007db0:	0289      	lsls	r1, r1, #10
 8007db2:	430a      	orrs	r2, r1
 8007db4:	63da      	str	r2, [r3, #60]	; 0x3c
 8007db6:	4b6c      	ldr	r3, [pc, #432]	; (8007f68 <HAL_UART_MspInit+0x2ac>)
 8007db8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007dba:	2380      	movs	r3, #128	; 0x80
 8007dbc:	029b      	lsls	r3, r3, #10
 8007dbe:	4013      	ands	r3, r2
 8007dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8007dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007dc4:	4b68      	ldr	r3, [pc, #416]	; (8007f68 <HAL_UART_MspInit+0x2ac>)
 8007dc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007dc8:	4b67      	ldr	r3, [pc, #412]	; (8007f68 <HAL_UART_MspInit+0x2ac>)
 8007dca:	2101      	movs	r1, #1
 8007dcc:	430a      	orrs	r2, r1
 8007dce:	635a      	str	r2, [r3, #52]	; 0x34
 8007dd0:	4b65      	ldr	r3, [pc, #404]	; (8007f68 <HAL_UART_MspInit+0x2ac>)
 8007dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dd4:	2201      	movs	r2, #1
 8007dd6:	4013      	ands	r3, r2
 8007dd8:	623b      	str	r3, [r7, #32]
 8007dda:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GNS_TX_Pin|GNS_RX_Pin;
 8007ddc:	214c      	movs	r1, #76	; 0x4c
 8007dde:	187b      	adds	r3, r7, r1
 8007de0:	220c      	movs	r2, #12
 8007de2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007de4:	187b      	adds	r3, r7, r1
 8007de6:	2202      	movs	r2, #2
 8007de8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dea:	187b      	adds	r3, r7, r1
 8007dec:	2200      	movs	r2, #0
 8007dee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007df0:	187b      	adds	r3, r7, r1
 8007df2:	2200      	movs	r2, #0
 8007df4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8007df6:	187b      	adds	r3, r7, r1
 8007df8:	2201      	movs	r2, #1
 8007dfa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007dfc:	187a      	adds	r2, r7, r1
 8007dfe:	23a0      	movs	r3, #160	; 0xa0
 8007e00:	05db      	lsls	r3, r3, #23
 8007e02:	0011      	movs	r1, r2
 8007e04:	0018      	movs	r0, r3
 8007e06:	f001 fc0d 	bl	8009624 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	2103      	movs	r1, #3
 8007e0e:	201c      	movs	r0, #28
 8007e10:	f001 f8b8 	bl	8008f84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8007e14:	201c      	movs	r0, #28
 8007e16:	f001 f8ca 	bl	8008fae <HAL_NVIC_EnableIRQ>
}
 8007e1a:	e09e      	b.n	8007f5a <HAL_UART_MspInit+0x29e>
  else if(huart->Instance==USART3)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a53      	ldr	r2, [pc, #332]	; (8007f70 <HAL_UART_MspInit+0x2b4>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d15b      	bne.n	8007ede <HAL_UART_MspInit+0x222>
    __HAL_RCC_USART3_CLK_ENABLE();
 8007e26:	4b50      	ldr	r3, [pc, #320]	; (8007f68 <HAL_UART_MspInit+0x2ac>)
 8007e28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e2a:	4b4f      	ldr	r3, [pc, #316]	; (8007f68 <HAL_UART_MspInit+0x2ac>)
 8007e2c:	2180      	movs	r1, #128	; 0x80
 8007e2e:	02c9      	lsls	r1, r1, #11
 8007e30:	430a      	orrs	r2, r1
 8007e32:	63da      	str	r2, [r3, #60]	; 0x3c
 8007e34:	4b4c      	ldr	r3, [pc, #304]	; (8007f68 <HAL_UART_MspInit+0x2ac>)
 8007e36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e38:	2380      	movs	r3, #128	; 0x80
 8007e3a:	02db      	lsls	r3, r3, #11
 8007e3c:	4013      	ands	r3, r2
 8007e3e:	61fb      	str	r3, [r7, #28]
 8007e40:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e42:	4b49      	ldr	r3, [pc, #292]	; (8007f68 <HAL_UART_MspInit+0x2ac>)
 8007e44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e46:	4b48      	ldr	r3, [pc, #288]	; (8007f68 <HAL_UART_MspInit+0x2ac>)
 8007e48:	2101      	movs	r1, #1
 8007e4a:	430a      	orrs	r2, r1
 8007e4c:	635a      	str	r2, [r3, #52]	; 0x34
 8007e4e:	4b46      	ldr	r3, [pc, #280]	; (8007f68 <HAL_UART_MspInit+0x2ac>)
 8007e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e52:	2201      	movs	r2, #1
 8007e54:	4013      	ands	r3, r2
 8007e56:	61bb      	str	r3, [r7, #24]
 8007e58:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007e5a:	4b43      	ldr	r3, [pc, #268]	; (8007f68 <HAL_UART_MspInit+0x2ac>)
 8007e5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e5e:	4b42      	ldr	r3, [pc, #264]	; (8007f68 <HAL_UART_MspInit+0x2ac>)
 8007e60:	2102      	movs	r1, #2
 8007e62:	430a      	orrs	r2, r1
 8007e64:	635a      	str	r2, [r3, #52]	; 0x34
 8007e66:	4b40      	ldr	r3, [pc, #256]	; (8007f68 <HAL_UART_MspInit+0x2ac>)
 8007e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e6a:	2202      	movs	r2, #2
 8007e6c:	4013      	ands	r3, r2
 8007e6e:	617b      	str	r3, [r7, #20]
 8007e70:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8007e72:	244c      	movs	r4, #76	; 0x4c
 8007e74:	193b      	adds	r3, r7, r4
 8007e76:	2220      	movs	r2, #32
 8007e78:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e7a:	193b      	adds	r3, r7, r4
 8007e7c:	2202      	movs	r2, #2
 8007e7e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e80:	193b      	adds	r3, r7, r4
 8007e82:	2200      	movs	r2, #0
 8007e84:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e86:	193b      	adds	r3, r7, r4
 8007e88:	2200      	movs	r2, #0
 8007e8a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8007e8c:	193b      	adds	r3, r7, r4
 8007e8e:	2204      	movs	r2, #4
 8007e90:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e92:	193a      	adds	r2, r7, r4
 8007e94:	23a0      	movs	r3, #160	; 0xa0
 8007e96:	05db      	lsls	r3, r3, #23
 8007e98:	0011      	movs	r1, r2
 8007e9a:	0018      	movs	r0, r3
 8007e9c:	f001 fbc2 	bl	8009624 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8007ea0:	0021      	movs	r1, r4
 8007ea2:	187b      	adds	r3, r7, r1
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ea8:	187b      	adds	r3, r7, r1
 8007eaa:	2202      	movs	r2, #2
 8007eac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007eae:	187b      	adds	r3, r7, r1
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007eb4:	187b      	adds	r3, r7, r1
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8007eba:	187b      	adds	r3, r7, r1
 8007ebc:	2204      	movs	r2, #4
 8007ebe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007ec0:	187b      	adds	r3, r7, r1
 8007ec2:	4a2c      	ldr	r2, [pc, #176]	; (8007f74 <HAL_UART_MspInit+0x2b8>)
 8007ec4:	0019      	movs	r1, r3
 8007ec6:	0010      	movs	r0, r2
 8007ec8:	f001 fbac 	bl	8009624 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 3, 0);
 8007ecc:	2200      	movs	r2, #0
 8007ece:	2103      	movs	r1, #3
 8007ed0:	201d      	movs	r0, #29
 8007ed2:	f001 f857 	bl	8008f84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8007ed6:	201d      	movs	r0, #29
 8007ed8:	f001 f869 	bl	8008fae <HAL_NVIC_EnableIRQ>
}
 8007edc:	e03d      	b.n	8007f5a <HAL_UART_MspInit+0x29e>
  else if(huart->Instance==USART4)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a25      	ldr	r2, [pc, #148]	; (8007f78 <HAL_UART_MspInit+0x2bc>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d138      	bne.n	8007f5a <HAL_UART_MspInit+0x29e>
    __HAL_RCC_USART4_CLK_ENABLE();
 8007ee8:	4b1f      	ldr	r3, [pc, #124]	; (8007f68 <HAL_UART_MspInit+0x2ac>)
 8007eea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007eec:	4b1e      	ldr	r3, [pc, #120]	; (8007f68 <HAL_UART_MspInit+0x2ac>)
 8007eee:	2180      	movs	r1, #128	; 0x80
 8007ef0:	0309      	lsls	r1, r1, #12
 8007ef2:	430a      	orrs	r2, r1
 8007ef4:	63da      	str	r2, [r3, #60]	; 0x3c
 8007ef6:	4b1c      	ldr	r3, [pc, #112]	; (8007f68 <HAL_UART_MspInit+0x2ac>)
 8007ef8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007efa:	2380      	movs	r3, #128	; 0x80
 8007efc:	031b      	lsls	r3, r3, #12
 8007efe:	4013      	ands	r3, r2
 8007f00:	613b      	str	r3, [r7, #16]
 8007f02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f04:	4b18      	ldr	r3, [pc, #96]	; (8007f68 <HAL_UART_MspInit+0x2ac>)
 8007f06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f08:	4b17      	ldr	r3, [pc, #92]	; (8007f68 <HAL_UART_MspInit+0x2ac>)
 8007f0a:	2101      	movs	r1, #1
 8007f0c:	430a      	orrs	r2, r1
 8007f0e:	635a      	str	r2, [r3, #52]	; 0x34
 8007f10:	4b15      	ldr	r3, [pc, #84]	; (8007f68 <HAL_UART_MspInit+0x2ac>)
 8007f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f14:	2201      	movs	r2, #1
 8007f16:	4013      	ands	r3, r2
 8007f18:	60fb      	str	r3, [r7, #12]
 8007f1a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DEBUG_TX_Pin|DEBUG_RX_Pin;
 8007f1c:	214c      	movs	r1, #76	; 0x4c
 8007f1e:	187b      	adds	r3, r7, r1
 8007f20:	2203      	movs	r2, #3
 8007f22:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f24:	187b      	adds	r3, r7, r1
 8007f26:	2202      	movs	r2, #2
 8007f28:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f2a:	187b      	adds	r3, r7, r1
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f30:	187b      	adds	r3, r7, r1
 8007f32:	2200      	movs	r2, #0
 8007f34:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 8007f36:	187b      	adds	r3, r7, r1
 8007f38:	2204      	movs	r2, #4
 8007f3a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f3c:	187a      	adds	r2, r7, r1
 8007f3e:	23a0      	movs	r3, #160	; 0xa0
 8007f40:	05db      	lsls	r3, r3, #23
 8007f42:	0011      	movs	r1, r2
 8007f44:	0018      	movs	r0, r3
 8007f46:	f001 fb6d 	bl	8009624 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 3, 0);
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	2103      	movs	r1, #3
 8007f4e:	201d      	movs	r0, #29
 8007f50:	f001 f818 	bl	8008f84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8007f54:	201d      	movs	r0, #29
 8007f56:	f001 f82a 	bl	8008fae <HAL_NVIC_EnableIRQ>
}
 8007f5a:	46c0      	nop			; (mov r8, r8)
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	b019      	add	sp, #100	; 0x64
 8007f60:	bd90      	pop	{r4, r7, pc}
 8007f62:	46c0      	nop			; (mov r8, r8)
 8007f64:	40013800 	.word	0x40013800
 8007f68:	40021000 	.word	0x40021000
 8007f6c:	40004400 	.word	0x40004400
 8007f70:	40004800 	.word	0x40004800
 8007f74:	50000400 	.word	0x50000400
 8007f78:	40004c00 	.word	0x40004c00

08007f7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007f80:	e7fe      	b.n	8007f80 <NMI_Handler+0x4>

08007f82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007f82:	b580      	push	{r7, lr}
 8007f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007f86:	e7fe      	b.n	8007f86 <HardFault_Handler+0x4>

08007f88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8007f8c:	46c0      	nop			; (mov r8, r8)
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}

08007f92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007f92:	b580      	push	{r7, lr}
 8007f94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007f96:	46c0      	nop			; (mov r8, r8)
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007fa0:	f000 ff04 	bl	8008dac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007fa4:	46c0      	nop			; (mov r8, r8)
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
	...

08007fac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8007fb0:	4b03      	ldr	r3, [pc, #12]	; (8007fc0 <DMA1_Channel1_IRQHandler+0x14>)
 8007fb2:	0018      	movs	r0, r3
 8007fb4:	f001 f9f4 	bl	80093a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8007fb8:	46c0      	nop			; (mov r8, r8)
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
 8007fbe:	46c0      	nop			; (mov r8, r8)
 8007fc0:	2000044c 	.word	0x2000044c

08007fc4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8007fc8:	4b03      	ldr	r3, [pc, #12]	; (8007fd8 <TIM3_IRQHandler+0x14>)
 8007fca:	0018      	movs	r0, r3
 8007fcc:	f003 fe12 	bl	800bbf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8007fd0:	46c0      	nop			; (mov r8, r8)
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}
 8007fd6:	46c0      	nop			; (mov r8, r8)
 8007fd8:	2000031c 	.word	0x2000031c

08007fdc <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8007fe0:	4b03      	ldr	r3, [pc, #12]	; (8007ff0 <TIM14_IRQHandler+0x14>)
 8007fe2:	0018      	movs	r0, r3
 8007fe4:	f003 fe06 	bl	800bbf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8007fe8:	46c0      	nop			; (mov r8, r8)
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
 8007fee:	46c0      	nop			; (mov r8, r8)
 8007ff0:	20000368 	.word	0x20000368

08007ff4 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8007ff8:	4b03      	ldr	r3, [pc, #12]	; (8008008 <TIM16_IRQHandler+0x14>)
 8007ffa:	0018      	movs	r0, r3
 8007ffc:	f003 fdfa 	bl	800bbf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8008000:	46c0      	nop			; (mov r8, r8)
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
 8008006:	46c0      	nop			; (mov r8, r8)
 8008008:	200003b4 	.word	0x200003b4

0800800c <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8008010:	4b03      	ldr	r3, [pc, #12]	; (8008020 <TIM17_IRQHandler+0x14>)
 8008012:	0018      	movs	r0, r3
 8008014:	f003 fdee 	bl	800bbf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8008018:	46c0      	nop			; (mov r8, r8)
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
 800801e:	46c0      	nop			; (mov r8, r8)
 8008020:	20000400 	.word	0x20000400

08008024 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8008028:	4b03      	ldr	r3, [pc, #12]	; (8008038 <SPI1_IRQHandler+0x14>)
 800802a:	0018      	movs	r0, r3
 800802c:	f002 fffe 	bl	800b02c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8008030:	46c0      	nop			; (mov r8, r8)
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
 8008036:	46c0      	nop			; (mov r8, r8)
 8008038:	200002b8 	.word	0x200002b8

0800803c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008040:	4b03      	ldr	r3, [pc, #12]	; (8008050 <USART1_IRQHandler+0x14>)
 8008042:	0018      	movs	r0, r3
 8008044:	f004 fc3c 	bl	800c8c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008048:	46c0      	nop			; (mov r8, r8)
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
 800804e:	46c0      	nop			; (mov r8, r8)
 8008050:	200004a8 	.word	0x200004a8

08008054 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8008058:	4b03      	ldr	r3, [pc, #12]	; (8008068 <USART2_IRQHandler+0x14>)
 800805a:	0018      	movs	r0, r3
 800805c:	f004 fc30 	bl	800c8c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8008060:	46c0      	nop			; (mov r8, r8)
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}
 8008066:	46c0      	nop			; (mov r8, r8)
 8008068:	2000053c 	.word	0x2000053c

0800806c <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 interrupts.
  */
void USART3_4_IRQHandler(void)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8008070:	4b05      	ldr	r3, [pc, #20]	; (8008088 <USART3_4_IRQHandler+0x1c>)
 8008072:	0018      	movs	r0, r3
 8008074:	f004 fc24 	bl	800c8c0 <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart4);
 8008078:	4b04      	ldr	r3, [pc, #16]	; (800808c <USART3_4_IRQHandler+0x20>)
 800807a:	0018      	movs	r0, r3
 800807c:	f004 fc20 	bl	800c8c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8008080:	46c0      	nop			; (mov r8, r8)
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	46c0      	nop			; (mov r8, r8)
 8008088:	200005d0 	.word	0x200005d0
 800808c:	20000664 	.word	0x20000664

08008090 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	af00      	add	r7, sp, #0
	return 1;
 8008094:	2301      	movs	r3, #1
}
 8008096:	0018      	movs	r0, r3
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <_kill>:

int _kill(int pid, int sig)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b082      	sub	sp, #8
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80080a6:	f006 fa3f 	bl	800e528 <__errno>
 80080aa:	0003      	movs	r3, r0
 80080ac:	2216      	movs	r2, #22
 80080ae:	601a      	str	r2, [r3, #0]
	return -1;
 80080b0:	2301      	movs	r3, #1
 80080b2:	425b      	negs	r3, r3
}
 80080b4:	0018      	movs	r0, r3
 80080b6:	46bd      	mov	sp, r7
 80080b8:	b002      	add	sp, #8
 80080ba:	bd80      	pop	{r7, pc}

080080bc <_exit>:

void _exit (int status)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b082      	sub	sp, #8
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80080c4:	2301      	movs	r3, #1
 80080c6:	425a      	negs	r2, r3
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	0011      	movs	r1, r2
 80080cc:	0018      	movs	r0, r3
 80080ce:	f7ff ffe5 	bl	800809c <_kill>
	while (1) {}		/* Make sure we hang here */
 80080d2:	e7fe      	b.n	80080d2 <_exit+0x16>

080080d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b086      	sub	sp, #24
 80080d8:	af00      	add	r7, sp, #0
 80080da:	60f8      	str	r0, [r7, #12]
 80080dc:	60b9      	str	r1, [r7, #8]
 80080de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80080e0:	2300      	movs	r3, #0
 80080e2:	617b      	str	r3, [r7, #20]
 80080e4:	e00a      	b.n	80080fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80080e6:	e000      	b.n	80080ea <_read+0x16>
 80080e8:	bf00      	nop
 80080ea:	0001      	movs	r1, r0
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	1c5a      	adds	r2, r3, #1
 80080f0:	60ba      	str	r2, [r7, #8]
 80080f2:	b2ca      	uxtb	r2, r1
 80080f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	3301      	adds	r3, #1
 80080fa:	617b      	str	r3, [r7, #20]
 80080fc:	697a      	ldr	r2, [r7, #20]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	429a      	cmp	r2, r3
 8008102:	dbf0      	blt.n	80080e6 <_read+0x12>
	}

return len;
 8008104:	687b      	ldr	r3, [r7, #4]
}
 8008106:	0018      	movs	r0, r3
 8008108:	46bd      	mov	sp, r7
 800810a:	b006      	add	sp, #24
 800810c:	bd80      	pop	{r7, pc}

0800810e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800810e:	b580      	push	{r7, lr}
 8008110:	b086      	sub	sp, #24
 8008112:	af00      	add	r7, sp, #0
 8008114:	60f8      	str	r0, [r7, #12]
 8008116:	60b9      	str	r1, [r7, #8]
 8008118:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800811a:	2300      	movs	r3, #0
 800811c:	617b      	str	r3, [r7, #20]
 800811e:	e009      	b.n	8008134 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	1c5a      	adds	r2, r3, #1
 8008124:	60ba      	str	r2, [r7, #8]
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	0018      	movs	r0, r3
 800812a:	e000      	b.n	800812e <_write+0x20>
 800812c:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	3301      	adds	r3, #1
 8008132:	617b      	str	r3, [r7, #20]
 8008134:	697a      	ldr	r2, [r7, #20]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	429a      	cmp	r2, r3
 800813a:	dbf1      	blt.n	8008120 <_write+0x12>
	}
	return len;
 800813c:	687b      	ldr	r3, [r7, #4]
}
 800813e:	0018      	movs	r0, r3
 8008140:	46bd      	mov	sp, r7
 8008142:	b006      	add	sp, #24
 8008144:	bd80      	pop	{r7, pc}

08008146 <_close>:

int _close(int file)
{
 8008146:	b580      	push	{r7, lr}
 8008148:	b082      	sub	sp, #8
 800814a:	af00      	add	r7, sp, #0
 800814c:	6078      	str	r0, [r7, #4]
	return -1;
 800814e:	2301      	movs	r3, #1
 8008150:	425b      	negs	r3, r3
}
 8008152:	0018      	movs	r0, r3
 8008154:	46bd      	mov	sp, r7
 8008156:	b002      	add	sp, #8
 8008158:	bd80      	pop	{r7, pc}

0800815a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800815a:	b580      	push	{r7, lr}
 800815c:	b082      	sub	sp, #8
 800815e:	af00      	add	r7, sp, #0
 8008160:	6078      	str	r0, [r7, #4]
 8008162:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	2280      	movs	r2, #128	; 0x80
 8008168:	0192      	lsls	r2, r2, #6
 800816a:	605a      	str	r2, [r3, #4]
	return 0;
 800816c:	2300      	movs	r3, #0
}
 800816e:	0018      	movs	r0, r3
 8008170:	46bd      	mov	sp, r7
 8008172:	b002      	add	sp, #8
 8008174:	bd80      	pop	{r7, pc}

08008176 <_isatty>:

int _isatty(int file)
{
 8008176:	b580      	push	{r7, lr}
 8008178:	b082      	sub	sp, #8
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
	return 1;
 800817e:	2301      	movs	r3, #1
}
 8008180:	0018      	movs	r0, r3
 8008182:	46bd      	mov	sp, r7
 8008184:	b002      	add	sp, #8
 8008186:	bd80      	pop	{r7, pc}

08008188 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b084      	sub	sp, #16
 800818c:	af00      	add	r7, sp, #0
 800818e:	60f8      	str	r0, [r7, #12]
 8008190:	60b9      	str	r1, [r7, #8]
 8008192:	607a      	str	r2, [r7, #4]
	return 0;
 8008194:	2300      	movs	r3, #0
}
 8008196:	0018      	movs	r0, r3
 8008198:	46bd      	mov	sp, r7
 800819a:	b004      	add	sp, #16
 800819c:	bd80      	pop	{r7, pc}
	...

080081a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b086      	sub	sp, #24
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80081a8:	4a14      	ldr	r2, [pc, #80]	; (80081fc <_sbrk+0x5c>)
 80081aa:	4b15      	ldr	r3, [pc, #84]	; (8008200 <_sbrk+0x60>)
 80081ac:	1ad3      	subs	r3, r2, r3
 80081ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80081b4:	4b13      	ldr	r3, [pc, #76]	; (8008204 <_sbrk+0x64>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d102      	bne.n	80081c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80081bc:	4b11      	ldr	r3, [pc, #68]	; (8008204 <_sbrk+0x64>)
 80081be:	4a12      	ldr	r2, [pc, #72]	; (8008208 <_sbrk+0x68>)
 80081c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80081c2:	4b10      	ldr	r3, [pc, #64]	; (8008204 <_sbrk+0x64>)
 80081c4:	681a      	ldr	r2, [r3, #0]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	18d3      	adds	r3, r2, r3
 80081ca:	693a      	ldr	r2, [r7, #16]
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d207      	bcs.n	80081e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80081d0:	f006 f9aa 	bl	800e528 <__errno>
 80081d4:	0003      	movs	r3, r0
 80081d6:	220c      	movs	r2, #12
 80081d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80081da:	2301      	movs	r3, #1
 80081dc:	425b      	negs	r3, r3
 80081de:	e009      	b.n	80081f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80081e0:	4b08      	ldr	r3, [pc, #32]	; (8008204 <_sbrk+0x64>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80081e6:	4b07      	ldr	r3, [pc, #28]	; (8008204 <_sbrk+0x64>)
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	18d2      	adds	r2, r2, r3
 80081ee:	4b05      	ldr	r3, [pc, #20]	; (8008204 <_sbrk+0x64>)
 80081f0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80081f2:	68fb      	ldr	r3, [r7, #12]
}
 80081f4:	0018      	movs	r0, r3
 80081f6:	46bd      	mov	sp, r7
 80081f8:	b006      	add	sp, #24
 80081fa:	bd80      	pop	{r7, pc}
 80081fc:	20009000 	.word	0x20009000
 8008200:	00000400 	.word	0x00000400
 8008204:	20001030 	.word	0x20001030
 8008208:	20001070 	.word	0x20001070

0800820c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008210:	46c0      	nop			; (mov r8, r8)
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}
	...

08008218 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8008218:	b590      	push	{r4, r7, lr}
 800821a:	b087      	sub	sp, #28
 800821c:	af02      	add	r7, sp, #8
 800821e:	0002      	movs	r2, r0
 8008220:	1dfb      	adds	r3, r7, #7
 8008222:	701a      	strb	r2, [r3, #0]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8008224:	240f      	movs	r4, #15
 8008226:	193a      	adds	r2, r7, r4
 8008228:	1df9      	adds	r1, r7, #7
 800822a:	4806      	ldr	r0, [pc, #24]	; (8008244 <W25qxx_Spi+0x2c>)
 800822c:	2364      	movs	r3, #100	; 0x64
 800822e:	9300      	str	r3, [sp, #0]
 8008230:	2301      	movs	r3, #1
 8008232:	f002 fd29 	bl	800ac88 <HAL_SPI_TransmitReceive>
	return ret;
 8008236:	193b      	adds	r3, r7, r4
 8008238:	781b      	ldrb	r3, [r3, #0]
}
 800823a:	0018      	movs	r0, r3
 800823c:	46bd      	mov	sp, r7
 800823e:	b005      	add	sp, #20
 8008240:	bd90      	pop	{r4, r7, pc}
 8008242:	46c0      	nop			; (mov r8, r8)
 8008244:	200002b8 	.word	0x200002b8

08008248 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b084      	sub	sp, #16
 800824c:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 800824e:	2300      	movs	r3, #0
 8008250:	60fb      	str	r3, [r7, #12]
 8008252:	2300      	movs	r3, #0
 8008254:	60bb      	str	r3, [r7, #8]
 8008256:	2300      	movs	r3, #0
 8008258:	607b      	str	r3, [r7, #4]
 800825a:	2300      	movs	r3, #0
 800825c:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800825e:	4b15      	ldr	r3, [pc, #84]	; (80082b4 <W25qxx_ReadID+0x6c>)
 8008260:	2200      	movs	r2, #0
 8008262:	2108      	movs	r1, #8
 8008264:	0018      	movs	r0, r3
 8008266:	f001 fb41 	bl	80098ec <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 800826a:	209f      	movs	r0, #159	; 0x9f
 800826c:	f7ff ffd4 	bl	8008218 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8008270:	20a5      	movs	r0, #165	; 0xa5
 8008272:	f7ff ffd1 	bl	8008218 <W25qxx_Spi>
 8008276:	0003      	movs	r3, r0
 8008278:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800827a:	20a5      	movs	r0, #165	; 0xa5
 800827c:	f7ff ffcc 	bl	8008218 <W25qxx_Spi>
 8008280:	0003      	movs	r3, r0
 8008282:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8008284:	20a5      	movs	r0, #165	; 0xa5
 8008286:	f7ff ffc7 	bl	8008218 <W25qxx_Spi>
 800828a:	0003      	movs	r3, r0
 800828c:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800828e:	4b09      	ldr	r3, [pc, #36]	; (80082b4 <W25qxx_ReadID+0x6c>)
 8008290:	2201      	movs	r2, #1
 8008292:	2108      	movs	r1, #8
 8008294:	0018      	movs	r0, r3
 8008296:	f001 fb29 	bl	80098ec <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	041a      	lsls	r2, r3, #16
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	021b      	lsls	r3, r3, #8
 80082a2:	4313      	orrs	r3, r2
 80082a4:	683a      	ldr	r2, [r7, #0]
 80082a6:	4313      	orrs	r3, r2
 80082a8:	60fb      	str	r3, [r7, #12]
	return Temp;
 80082aa:	68fb      	ldr	r3, [r7, #12]
}
 80082ac:	0018      	movs	r0, r3
 80082ae:	46bd      	mov	sp, r7
 80082b0:	b004      	add	sp, #16
 80082b2:	bd80      	pop	{r7, pc}
 80082b4:	50000c00 	.word	0x50000c00

080082b8 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 80082b8:	b590      	push	{r4, r7, lr}
 80082ba:	b083      	sub	sp, #12
 80082bc:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80082be:	4b1d      	ldr	r3, [pc, #116]	; (8008334 <W25qxx_ReadUniqID+0x7c>)
 80082c0:	2200      	movs	r2, #0
 80082c2:	2108      	movs	r1, #8
 80082c4:	0018      	movs	r0, r3
 80082c6:	f001 fb11 	bl	80098ec <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 80082ca:	204b      	movs	r0, #75	; 0x4b
 80082cc:	f7ff ffa4 	bl	8008218 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 80082d0:	1dfb      	adds	r3, r7, #7
 80082d2:	2200      	movs	r2, #0
 80082d4:	701a      	strb	r2, [r3, #0]
 80082d6:	e007      	b.n	80082e8 <W25qxx_ReadUniqID+0x30>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80082d8:	20a5      	movs	r0, #165	; 0xa5
 80082da:	f7ff ff9d 	bl	8008218 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 80082de:	1dfb      	adds	r3, r7, #7
 80082e0:	781a      	ldrb	r2, [r3, #0]
 80082e2:	1dfb      	adds	r3, r7, #7
 80082e4:	3201      	adds	r2, #1
 80082e6:	701a      	strb	r2, [r3, #0]
 80082e8:	1dfb      	adds	r3, r7, #7
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	2b03      	cmp	r3, #3
 80082ee:	d9f3      	bls.n	80082d8 <W25qxx_ReadUniqID+0x20>
	for (uint8_t i = 0; i < 8; i++)
 80082f0:	1dbb      	adds	r3, r7, #6
 80082f2:	2200      	movs	r2, #0
 80082f4:	701a      	strb	r2, [r3, #0]
 80082f6:	e00e      	b.n	8008316 <W25qxx_ReadUniqID+0x5e>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80082f8:	1dbb      	adds	r3, r7, #6
 80082fa:	781c      	ldrb	r4, [r3, #0]
 80082fc:	20a5      	movs	r0, #165	; 0xa5
 80082fe:	f7ff ff8b 	bl	8008218 <W25qxx_Spi>
 8008302:	0003      	movs	r3, r0
 8008304:	001a      	movs	r2, r3
 8008306:	4b0c      	ldr	r3, [pc, #48]	; (8008338 <W25qxx_ReadUniqID+0x80>)
 8008308:	191b      	adds	r3, r3, r4
 800830a:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 800830c:	1dbb      	adds	r3, r7, #6
 800830e:	781a      	ldrb	r2, [r3, #0]
 8008310:	1dbb      	adds	r3, r7, #6
 8008312:	3201      	adds	r2, #1
 8008314:	701a      	strb	r2, [r3, #0]
 8008316:	1dbb      	adds	r3, r7, #6
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	2b07      	cmp	r3, #7
 800831c:	d9ec      	bls.n	80082f8 <W25qxx_ReadUniqID+0x40>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800831e:	4b05      	ldr	r3, [pc, #20]	; (8008334 <W25qxx_ReadUniqID+0x7c>)
 8008320:	2201      	movs	r2, #1
 8008322:	2108      	movs	r1, #8
 8008324:	0018      	movs	r0, r3
 8008326:	f001 fae1 	bl	80098ec <HAL_GPIO_WritePin>
}
 800832a:	46c0      	nop			; (mov r8, r8)
 800832c:	46bd      	mov	sp, r7
 800832e:	b003      	add	sp, #12
 8008330:	bd90      	pop	{r4, r7, pc}
 8008332:	46c0      	nop			; (mov r8, r8)
 8008334:	50000c00 	.word	0x50000c00
 8008338:	20001034 	.word	0x20001034

0800833c <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8008340:	4b0a      	ldr	r3, [pc, #40]	; (800836c <W25qxx_WriteEnable+0x30>)
 8008342:	2200      	movs	r2, #0
 8008344:	2108      	movs	r1, #8
 8008346:	0018      	movs	r0, r3
 8008348:	f001 fad0 	bl	80098ec <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 800834c:	2006      	movs	r0, #6
 800834e:	f7ff ff63 	bl	8008218 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8008352:	4b06      	ldr	r3, [pc, #24]	; (800836c <W25qxx_WriteEnable+0x30>)
 8008354:	2201      	movs	r2, #1
 8008356:	2108      	movs	r1, #8
 8008358:	0018      	movs	r0, r3
 800835a:	f001 fac7 	bl	80098ec <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 800835e:	2001      	movs	r0, #1
 8008360:	f000 fd40 	bl	8008de4 <HAL_Delay>
}
 8008364:	46c0      	nop			; (mov r8, r8)
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
 800836a:	46c0      	nop			; (mov r8, r8)
 800836c:	50000c00 	.word	0x50000c00

08008370 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8008370:	b5b0      	push	{r4, r5, r7, lr}
 8008372:	b084      	sub	sp, #16
 8008374:	af00      	add	r7, sp, #0
 8008376:	0002      	movs	r2, r0
 8008378:	1dfb      	adds	r3, r7, #7
 800837a:	701a      	strb	r2, [r3, #0]
	uint8_t status = 0;
 800837c:	240f      	movs	r4, #15
 800837e:	193b      	adds	r3, r7, r4
 8008380:	2200      	movs	r2, #0
 8008382:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8008384:	4b24      	ldr	r3, [pc, #144]	; (8008418 <W25qxx_ReadStatusRegister+0xa8>)
 8008386:	2200      	movs	r2, #0
 8008388:	2108      	movs	r1, #8
 800838a:	0018      	movs	r0, r3
 800838c:	f001 faae 	bl	80098ec <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8008390:	1dfb      	adds	r3, r7, #7
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	2b01      	cmp	r3, #1
 8008396:	d10f      	bne.n	80083b8 <W25qxx_ReadStatusRegister+0x48>
	{
		W25qxx_Spi(0x05);
 8008398:	2005      	movs	r0, #5
 800839a:	f7ff ff3d 	bl	8008218 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800839e:	0025      	movs	r5, r4
 80083a0:	193c      	adds	r4, r7, r4
 80083a2:	20a5      	movs	r0, #165	; 0xa5
 80083a4:	f7ff ff38 	bl	8008218 <W25qxx_Spi>
 80083a8:	0003      	movs	r3, r0
 80083aa:	7023      	strb	r3, [r4, #0]
		w25qxx.StatusRegister1 = status;
 80083ac:	4b1b      	ldr	r3, [pc, #108]	; (800841c <W25qxx_ReadStatusRegister+0xac>)
 80083ae:	197a      	adds	r2, r7, r5
 80083b0:	2124      	movs	r1, #36	; 0x24
 80083b2:	7812      	ldrb	r2, [r2, #0]
 80083b4:	545a      	strb	r2, [r3, r1]
 80083b6:	e022      	b.n	80083fe <W25qxx_ReadStatusRegister+0x8e>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 80083b8:	1dfb      	adds	r3, r7, #7
 80083ba:	781b      	ldrb	r3, [r3, #0]
 80083bc:	2b02      	cmp	r3, #2
 80083be:	d10f      	bne.n	80083e0 <W25qxx_ReadStatusRegister+0x70>
	{
		W25qxx_Spi(0x35);
 80083c0:	2035      	movs	r0, #53	; 0x35
 80083c2:	f7ff ff29 	bl	8008218 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80083c6:	250f      	movs	r5, #15
 80083c8:	197c      	adds	r4, r7, r5
 80083ca:	20a5      	movs	r0, #165	; 0xa5
 80083cc:	f7ff ff24 	bl	8008218 <W25qxx_Spi>
 80083d0:	0003      	movs	r3, r0
 80083d2:	7023      	strb	r3, [r4, #0]
		w25qxx.StatusRegister2 = status;
 80083d4:	4b11      	ldr	r3, [pc, #68]	; (800841c <W25qxx_ReadStatusRegister+0xac>)
 80083d6:	197a      	adds	r2, r7, r5
 80083d8:	2125      	movs	r1, #37	; 0x25
 80083da:	7812      	ldrb	r2, [r2, #0]
 80083dc:	545a      	strb	r2, [r3, r1]
 80083de:	e00e      	b.n	80083fe <W25qxx_ReadStatusRegister+0x8e>
	}
	else
	{
		W25qxx_Spi(0x15);
 80083e0:	2015      	movs	r0, #21
 80083e2:	f7ff ff19 	bl	8008218 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80083e6:	250f      	movs	r5, #15
 80083e8:	197c      	adds	r4, r7, r5
 80083ea:	20a5      	movs	r0, #165	; 0xa5
 80083ec:	f7ff ff14 	bl	8008218 <W25qxx_Spi>
 80083f0:	0003      	movs	r3, r0
 80083f2:	7023      	strb	r3, [r4, #0]
		w25qxx.StatusRegister3 = status;
 80083f4:	4b09      	ldr	r3, [pc, #36]	; (800841c <W25qxx_ReadStatusRegister+0xac>)
 80083f6:	197a      	adds	r2, r7, r5
 80083f8:	2126      	movs	r1, #38	; 0x26
 80083fa:	7812      	ldrb	r2, [r2, #0]
 80083fc:	545a      	strb	r2, [r3, r1]
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80083fe:	4b06      	ldr	r3, [pc, #24]	; (8008418 <W25qxx_ReadStatusRegister+0xa8>)
 8008400:	2201      	movs	r2, #1
 8008402:	2108      	movs	r1, #8
 8008404:	0018      	movs	r0, r3
 8008406:	f001 fa71 	bl	80098ec <HAL_GPIO_WritePin>
	return status;
 800840a:	230f      	movs	r3, #15
 800840c:	18fb      	adds	r3, r7, r3
 800840e:	781b      	ldrb	r3, [r3, #0]
}
 8008410:	0018      	movs	r0, r3
 8008412:	46bd      	mov	sp, r7
 8008414:	b004      	add	sp, #16
 8008416:	bdb0      	pop	{r4, r5, r7, pc}
 8008418:	50000c00 	.word	0x50000c00
 800841c:	20001034 	.word	0x20001034

08008420 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8008424:	2001      	movs	r0, #1
 8008426:	f000 fcdd 	bl	8008de4 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800842a:	4b12      	ldr	r3, [pc, #72]	; (8008474 <W25qxx_WaitForWriteEnd+0x54>)
 800842c:	2200      	movs	r2, #0
 800842e:	2108      	movs	r1, #8
 8008430:	0018      	movs	r0, r3
 8008432:	f001 fa5b 	bl	80098ec <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8008436:	2005      	movs	r0, #5
 8008438:	f7ff feee 	bl	8008218 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800843c:	20a5      	movs	r0, #165	; 0xa5
 800843e:	f7ff feeb 	bl	8008218 <W25qxx_Spi>
 8008442:	0003      	movs	r3, r0
 8008444:	0019      	movs	r1, r3
 8008446:	4b0c      	ldr	r3, [pc, #48]	; (8008478 <W25qxx_WaitForWriteEnd+0x58>)
 8008448:	2224      	movs	r2, #36	; 0x24
 800844a:	5499      	strb	r1, [r3, r2]
		W25qxx_Delay(1);
 800844c:	2001      	movs	r0, #1
 800844e:	f000 fcc9 	bl	8008de4 <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8008452:	4b09      	ldr	r3, [pc, #36]	; (8008478 <W25qxx_WaitForWriteEnd+0x58>)
 8008454:	2224      	movs	r2, #36	; 0x24
 8008456:	5c9b      	ldrb	r3, [r3, r2]
 8008458:	001a      	movs	r2, r3
 800845a:	2301      	movs	r3, #1
 800845c:	4013      	ands	r3, r2
 800845e:	d1ed      	bne.n	800843c <W25qxx_WaitForWriteEnd+0x1c>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8008460:	4b04      	ldr	r3, [pc, #16]	; (8008474 <W25qxx_WaitForWriteEnd+0x54>)
 8008462:	2201      	movs	r2, #1
 8008464:	2108      	movs	r1, #8
 8008466:	0018      	movs	r0, r3
 8008468:	f001 fa40 	bl	80098ec <HAL_GPIO_WritePin>
}
 800846c:	46c0      	nop			; (mov r8, r8)
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
 8008472:	46c0      	nop			; (mov r8, r8)
 8008474:	50000c00 	.word	0x50000c00
 8008478:	20001034 	.word	0x20001034

0800847c <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b082      	sub	sp, #8
 8008480:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8008482:	4b58      	ldr	r3, [pc, #352]	; (80085e4 <W25qxx_Init+0x168>)
 8008484:	2227      	movs	r2, #39	; 0x27
 8008486:	2101      	movs	r1, #1
 8008488:	5499      	strb	r1, [r3, r2]
	while (HAL_GetTick() < 100)
 800848a:	e002      	b.n	8008492 <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 800848c:	2001      	movs	r0, #1
 800848e:	f000 fca9 	bl	8008de4 <HAL_Delay>
	while (HAL_GetTick() < 100)
 8008492:	f000 fc9d 	bl	8008dd0 <HAL_GetTick>
 8008496:	0003      	movs	r3, r0
 8008498:	2b63      	cmp	r3, #99	; 0x63
 800849a:	d9f7      	bls.n	800848c <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800849c:	4b52      	ldr	r3, [pc, #328]	; (80085e8 <W25qxx_Init+0x16c>)
 800849e:	2201      	movs	r2, #1
 80084a0:	2108      	movs	r1, #8
 80084a2:	0018      	movs	r0, r3
 80084a4:	f001 fa22 	bl	80098ec <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 80084a8:	2064      	movs	r0, #100	; 0x64
 80084aa:	f000 fc9b 	bl	8008de4 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 80084ae:	f7ff fecb 	bl	8008248 <W25qxx_ReadID>
 80084b2:	0003      	movs	r3, r0
 80084b4:	607b      	str	r3, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	22ff      	movs	r2, #255	; 0xff
 80084ba:	4013      	ands	r3, r2
 80084bc:	3b11      	subs	r3, #17
 80084be:	2b0f      	cmp	r3, #15
 80084c0:	d84d      	bhi.n	800855e <W25qxx_Init+0xe2>
 80084c2:	009a      	lsls	r2, r3, #2
 80084c4:	4b49      	ldr	r3, [pc, #292]	; (80085ec <W25qxx_Init+0x170>)
 80084c6:	18d3      	adds	r3, r2, r3
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	469f      	mov	pc, r3
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 80084cc:	4b45      	ldr	r3, [pc, #276]	; (80085e4 <W25qxx_Init+0x168>)
 80084ce:	220a      	movs	r2, #10
 80084d0:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 80084d2:	4b44      	ldr	r3, [pc, #272]	; (80085e4 <W25qxx_Init+0x168>)
 80084d4:	2280      	movs	r2, #128	; 0x80
 80084d6:	00d2      	lsls	r2, r2, #3
 80084d8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 80084da:	e046      	b.n	800856a <W25qxx_Init+0xee>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 80084dc:	4b41      	ldr	r3, [pc, #260]	; (80085e4 <W25qxx_Init+0x168>)
 80084de:	2209      	movs	r2, #9
 80084e0:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 80084e2:	4b40      	ldr	r3, [pc, #256]	; (80085e4 <W25qxx_Init+0x168>)
 80084e4:	2280      	movs	r2, #128	; 0x80
 80084e6:	0092      	lsls	r2, r2, #2
 80084e8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 80084ea:	e03e      	b.n	800856a <W25qxx_Init+0xee>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 80084ec:	4b3d      	ldr	r3, [pc, #244]	; (80085e4 <W25qxx_Init+0x168>)
 80084ee:	2208      	movs	r2, #8
 80084f0:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 80084f2:	4b3c      	ldr	r3, [pc, #240]	; (80085e4 <W25qxx_Init+0x168>)
 80084f4:	2280      	movs	r2, #128	; 0x80
 80084f6:	0052      	lsls	r2, r2, #1
 80084f8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 80084fa:	e036      	b.n	800856a <W25qxx_Init+0xee>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 80084fc:	4b39      	ldr	r3, [pc, #228]	; (80085e4 <W25qxx_Init+0x168>)
 80084fe:	2207      	movs	r2, #7
 8008500:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 8008502:	4b38      	ldr	r3, [pc, #224]	; (80085e4 <W25qxx_Init+0x168>)
 8008504:	2280      	movs	r2, #128	; 0x80
 8008506:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 8008508:	e02f      	b.n	800856a <W25qxx_Init+0xee>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 800850a:	4b36      	ldr	r3, [pc, #216]	; (80085e4 <W25qxx_Init+0x168>)
 800850c:	2206      	movs	r2, #6
 800850e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8008510:	4b34      	ldr	r3, [pc, #208]	; (80085e4 <W25qxx_Init+0x168>)
 8008512:	2240      	movs	r2, #64	; 0x40
 8008514:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 8008516:	e028      	b.n	800856a <W25qxx_Init+0xee>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8008518:	4b32      	ldr	r3, [pc, #200]	; (80085e4 <W25qxx_Init+0x168>)
 800851a:	2205      	movs	r2, #5
 800851c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 800851e:	4b31      	ldr	r3, [pc, #196]	; (80085e4 <W25qxx_Init+0x168>)
 8008520:	2220      	movs	r2, #32
 8008522:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 8008524:	e021      	b.n	800856a <W25qxx_Init+0xee>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 8008526:	4b2f      	ldr	r3, [pc, #188]	; (80085e4 <W25qxx_Init+0x168>)
 8008528:	2204      	movs	r2, #4
 800852a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 800852c:	4b2d      	ldr	r3, [pc, #180]	; (80085e4 <W25qxx_Init+0x168>)
 800852e:	2210      	movs	r2, #16
 8008530:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 8008532:	e01a      	b.n	800856a <W25qxx_Init+0xee>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8008534:	4b2b      	ldr	r3, [pc, #172]	; (80085e4 <W25qxx_Init+0x168>)
 8008536:	2203      	movs	r2, #3
 8008538:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 800853a:	4b2a      	ldr	r3, [pc, #168]	; (80085e4 <W25qxx_Init+0x168>)
 800853c:	2208      	movs	r2, #8
 800853e:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 8008540:	e013      	b.n	800856a <W25qxx_Init+0xee>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8008542:	4b28      	ldr	r3, [pc, #160]	; (80085e4 <W25qxx_Init+0x168>)
 8008544:	2202      	movs	r2, #2
 8008546:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8008548:	4b26      	ldr	r3, [pc, #152]	; (80085e4 <W25qxx_Init+0x168>)
 800854a:	2204      	movs	r2, #4
 800854c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 800854e:	e00c      	b.n	800856a <W25qxx_Init+0xee>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8008550:	4b24      	ldr	r3, [pc, #144]	; (80085e4 <W25qxx_Init+0x168>)
 8008552:	2201      	movs	r2, #1
 8008554:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8008556:	4b23      	ldr	r3, [pc, #140]	; (80085e4 <W25qxx_Init+0x168>)
 8008558:	2202      	movs	r2, #2
 800855a:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 800855c:	e005      	b.n	800856a <W25qxx_Init+0xee>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 800855e:	4b21      	ldr	r3, [pc, #132]	; (80085e4 <W25qxx_Init+0x168>)
 8008560:	2227      	movs	r2, #39	; 0x27
 8008562:	2100      	movs	r1, #0
 8008564:	5499      	strb	r1, [r3, r2]
		return false;
 8008566:	2300      	movs	r3, #0
 8008568:	e038      	b.n	80085dc <W25qxx_Init+0x160>
	}
	w25qxx.PageSize = 256;
 800856a:	4b1e      	ldr	r3, [pc, #120]	; (80085e4 <W25qxx_Init+0x168>)
 800856c:	2280      	movs	r2, #128	; 0x80
 800856e:	0052      	lsls	r2, r2, #1
 8008570:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8008572:	4b1c      	ldr	r3, [pc, #112]	; (80085e4 <W25qxx_Init+0x168>)
 8008574:	2280      	movs	r2, #128	; 0x80
 8008576:	0152      	lsls	r2, r2, #5
 8008578:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 800857a:	4b1a      	ldr	r3, [pc, #104]	; (80085e4 <W25qxx_Init+0x168>)
 800857c:	69db      	ldr	r3, [r3, #28]
 800857e:	011a      	lsls	r2, r3, #4
 8008580:	4b18      	ldr	r3, [pc, #96]	; (80085e4 <W25qxx_Init+0x168>)
 8008582:	615a      	str	r2, [r3, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8008584:	4b17      	ldr	r3, [pc, #92]	; (80085e4 <W25qxx_Init+0x168>)
 8008586:	695a      	ldr	r2, [r3, #20]
 8008588:	4b16      	ldr	r3, [pc, #88]	; (80085e4 <W25qxx_Init+0x168>)
 800858a:	691b      	ldr	r3, [r3, #16]
 800858c:	435a      	muls	r2, r3
 800858e:	4b15      	ldr	r3, [pc, #84]	; (80085e4 <W25qxx_Init+0x168>)
 8008590:	895b      	ldrh	r3, [r3, #10]
 8008592:	0019      	movs	r1, r3
 8008594:	0010      	movs	r0, r2
 8008596:	f7f7 fdd9 	bl	800014c <__udivsi3>
 800859a:	0003      	movs	r3, r0
 800859c:	001a      	movs	r2, r3
 800859e:	4b11      	ldr	r3, [pc, #68]	; (80085e4 <W25qxx_Init+0x168>)
 80085a0:	60da      	str	r2, [r3, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 80085a2:	4b10      	ldr	r3, [pc, #64]	; (80085e4 <W25qxx_Init+0x168>)
 80085a4:	691b      	ldr	r3, [r3, #16]
 80085a6:	011a      	lsls	r2, r3, #4
 80085a8:	4b0e      	ldr	r3, [pc, #56]	; (80085e4 <W25qxx_Init+0x168>)
 80085aa:	619a      	str	r2, [r3, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 80085ac:	4b0d      	ldr	r3, [pc, #52]	; (80085e4 <W25qxx_Init+0x168>)
 80085ae:	695a      	ldr	r2, [r3, #20]
 80085b0:	4b0c      	ldr	r3, [pc, #48]	; (80085e4 <W25qxx_Init+0x168>)
 80085b2:	691b      	ldr	r3, [r3, #16]
 80085b4:	4353      	muls	r3, r2
 80085b6:	0a9a      	lsrs	r2, r3, #10
 80085b8:	4b0a      	ldr	r3, [pc, #40]	; (80085e4 <W25qxx_Init+0x168>)
 80085ba:	621a      	str	r2, [r3, #32]
	W25qxx_ReadUniqID();
 80085bc:	f7ff fe7c 	bl	80082b8 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 80085c0:	2001      	movs	r0, #1
 80085c2:	f7ff fed5 	bl	8008370 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 80085c6:	2002      	movs	r0, #2
 80085c8:	f7ff fed2 	bl	8008370 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 80085cc:	2003      	movs	r0, #3
 80085ce:	f7ff fecf 	bl	8008370 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 80085d2:	4b04      	ldr	r3, [pc, #16]	; (80085e4 <W25qxx_Init+0x168>)
 80085d4:	2227      	movs	r2, #39	; 0x27
 80085d6:	2100      	movs	r1, #0
 80085d8:	5499      	strb	r1, [r3, r2]
	return true;
 80085da:	2301      	movs	r3, #1
}
 80085dc:	0018      	movs	r0, r3
 80085de:	46bd      	mov	sp, r7
 80085e0:	b002      	add	sp, #8
 80085e2:	bd80      	pop	{r7, pc}
 80085e4:	20001034 	.word	0x20001034
 80085e8:	50000c00 	.word	0x50000c00
 80085ec:	08012fe0 	.word	0x08012fe0

080085f0 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b082      	sub	sp, #8
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 80085f8:	e002      	b.n	8008600 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 80085fa:	2001      	movs	r0, #1
 80085fc:	f000 fbf2 	bl	8008de4 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8008600:	4b26      	ldr	r3, [pc, #152]	; (800869c <W25qxx_EraseSector+0xac>)
 8008602:	2227      	movs	r2, #39	; 0x27
 8008604:	5c9b      	ldrb	r3, [r3, r2]
 8008606:	2b01      	cmp	r3, #1
 8008608:	d0f7      	beq.n	80085fa <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 800860a:	4b24      	ldr	r3, [pc, #144]	; (800869c <W25qxx_EraseSector+0xac>)
 800860c:	2227      	movs	r2, #39	; 0x27
 800860e:	2101      	movs	r1, #1
 8008610:	5499      	strb	r1, [r3, r2]
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
#endif
	W25qxx_WaitForWriteEnd();
 8008612:	f7ff ff05 	bl	8008420 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 8008616:	4b21      	ldr	r3, [pc, #132]	; (800869c <W25qxx_EraseSector+0xac>)
 8008618:	691a      	ldr	r2, [r3, #16]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	4353      	muls	r3, r2
 800861e:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 8008620:	f7ff fe8c 	bl	800833c <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8008624:	4b1e      	ldr	r3, [pc, #120]	; (80086a0 <W25qxx_EraseSector+0xb0>)
 8008626:	2200      	movs	r2, #0
 8008628:	2108      	movs	r1, #8
 800862a:	0018      	movs	r0, r3
 800862c:	f001 f95e 	bl	80098ec <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8008630:	4b1a      	ldr	r3, [pc, #104]	; (800869c <W25qxx_EraseSector+0xac>)
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	2b08      	cmp	r3, #8
 8008636:	d909      	bls.n	800864c <W25qxx_EraseSector+0x5c>
	{
		W25qxx_Spi(0x21);
 8008638:	2021      	movs	r0, #33	; 0x21
 800863a:	f7ff fded 	bl	8008218 <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	0e1b      	lsrs	r3, r3, #24
 8008642:	b2db      	uxtb	r3, r3
 8008644:	0018      	movs	r0, r3
 8008646:	f7ff fde7 	bl	8008218 <W25qxx_Spi>
 800864a:	e002      	b.n	8008652 <W25qxx_EraseSector+0x62>
	}
	else
	{
		W25qxx_Spi(0x20);
 800864c:	2020      	movs	r0, #32
 800864e:	f7ff fde3 	bl	8008218 <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	0c1b      	lsrs	r3, r3, #16
 8008656:	b2db      	uxtb	r3, r3
 8008658:	0018      	movs	r0, r3
 800865a:	f7ff fddd 	bl	8008218 <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	0a1b      	lsrs	r3, r3, #8
 8008662:	b2db      	uxtb	r3, r3
 8008664:	0018      	movs	r0, r3
 8008666:	f7ff fdd7 	bl	8008218 <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	b2db      	uxtb	r3, r3
 800866e:	0018      	movs	r0, r3
 8008670:	f7ff fdd2 	bl	8008218 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8008674:	4b0a      	ldr	r3, [pc, #40]	; (80086a0 <W25qxx_EraseSector+0xb0>)
 8008676:	2201      	movs	r2, #1
 8008678:	2108      	movs	r1, #8
 800867a:	0018      	movs	r0, r3
 800867c:	f001 f936 	bl	80098ec <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8008680:	f7ff fece 	bl	8008420 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
#endif
	W25qxx_Delay(1);
 8008684:	2001      	movs	r0, #1
 8008686:	f000 fbad 	bl	8008de4 <HAL_Delay>
	w25qxx.Lock = 0;
 800868a:	4b04      	ldr	r3, [pc, #16]	; (800869c <W25qxx_EraseSector+0xac>)
 800868c:	2227      	movs	r2, #39	; 0x27
 800868e:	2100      	movs	r1, #0
 8008690:	5499      	strb	r1, [r3, r2]
}
 8008692:	46c0      	nop			; (mov r8, r8)
 8008694:	46bd      	mov	sp, r7
 8008696:	b002      	add	sp, #8
 8008698:	bd80      	pop	{r7, pc}
 800869a:	46c0      	nop			; (mov r8, r8)
 800869c:	20001034 	.word	0x20001034
 80086a0:	50000c00 	.word	0x50000c00

080086a4 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b082      	sub	sp, #8
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 80086ac:	4b07      	ldr	r3, [pc, #28]	; (80086cc <W25qxx_SectorToPage+0x28>)
 80086ae:	691b      	ldr	r3, [r3, #16]
 80086b0:	687a      	ldr	r2, [r7, #4]
 80086b2:	435a      	muls	r2, r3
 80086b4:	4b05      	ldr	r3, [pc, #20]	; (80086cc <W25qxx_SectorToPage+0x28>)
 80086b6:	895b      	ldrh	r3, [r3, #10]
 80086b8:	0019      	movs	r1, r3
 80086ba:	0010      	movs	r0, r2
 80086bc:	f7f7 fd46 	bl	800014c <__udivsi3>
 80086c0:	0003      	movs	r3, r0
}
 80086c2:	0018      	movs	r0, r3
 80086c4:	46bd      	mov	sp, r7
 80086c6:	b002      	add	sp, #8
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	46c0      	nop			; (mov r8, r8)
 80086cc:	20001034 	.word	0x20001034

080086d0 <W25qxx_WriteByte>:
	w25qxx.Lock = 0;
	return false;
}
//###################################################################################################################
void W25qxx_WriteByte(uint8_t pBuffer, uint32_t WriteAddr_inBytes)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b082      	sub	sp, #8
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	0002      	movs	r2, r0
 80086d8:	6039      	str	r1, [r7, #0]
 80086da:	1dfb      	adds	r3, r7, #7
 80086dc:	701a      	strb	r2, [r3, #0]
	while (w25qxx.Lock == 1)
 80086de:	e002      	b.n	80086e6 <W25qxx_WriteByte+0x16>
		W25qxx_Delay(1);
 80086e0:	2001      	movs	r0, #1
 80086e2:	f000 fb7f 	bl	8008de4 <HAL_Delay>
	while (w25qxx.Lock == 1)
 80086e6:	4b25      	ldr	r3, [pc, #148]	; (800877c <W25qxx_WriteByte+0xac>)
 80086e8:	2227      	movs	r2, #39	; 0x27
 80086ea:	5c9b      	ldrb	r3, [r3, r2]
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d0f7      	beq.n	80086e0 <W25qxx_WriteByte+0x10>
	w25qxx.Lock = 1;
 80086f0:	4b22      	ldr	r3, [pc, #136]	; (800877c <W25qxx_WriteByte+0xac>)
 80086f2:	2227      	movs	r2, #39	; 0x27
 80086f4:	2101      	movs	r1, #1
 80086f6:	5499      	strb	r1, [r3, r2]
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx WriteByte 0x%02X at address %d begin...", pBuffer, WriteAddr_inBytes);
#endif
	W25qxx_WaitForWriteEnd();
 80086f8:	f7ff fe92 	bl	8008420 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 80086fc:	f7ff fe1e 	bl	800833c <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8008700:	4b1f      	ldr	r3, [pc, #124]	; (8008780 <W25qxx_WriteByte+0xb0>)
 8008702:	2200      	movs	r2, #0
 8008704:	2108      	movs	r1, #8
 8008706:	0018      	movs	r0, r3
 8008708:	f001 f8f0 	bl	80098ec <HAL_GPIO_WritePin>

	if (w25qxx.ID >= W25Q256)
 800870c:	4b1b      	ldr	r3, [pc, #108]	; (800877c <W25qxx_WriteByte+0xac>)
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	2b08      	cmp	r3, #8
 8008712:	d909      	bls.n	8008728 <W25qxx_WriteByte+0x58>
	{
		W25qxx_Spi(0x12);
 8008714:	2012      	movs	r0, #18
 8008716:	f7ff fd7f 	bl	8008218 <W25qxx_Spi>
		W25qxx_Spi((WriteAddr_inBytes & 0xFF000000) >> 24);
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	0e1b      	lsrs	r3, r3, #24
 800871e:	b2db      	uxtb	r3, r3
 8008720:	0018      	movs	r0, r3
 8008722:	f7ff fd79 	bl	8008218 <W25qxx_Spi>
 8008726:	e002      	b.n	800872e <W25qxx_WriteByte+0x5e>
	}
	else
	{
		W25qxx_Spi(0x02);
 8008728:	2002      	movs	r0, #2
 800872a:	f7ff fd75 	bl	8008218 <W25qxx_Spi>
	}
	W25qxx_Spi((WriteAddr_inBytes & 0xFF0000) >> 16);
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	0c1b      	lsrs	r3, r3, #16
 8008732:	b2db      	uxtb	r3, r3
 8008734:	0018      	movs	r0, r3
 8008736:	f7ff fd6f 	bl	8008218 <W25qxx_Spi>
	W25qxx_Spi((WriteAddr_inBytes & 0xFF00) >> 8);
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	0a1b      	lsrs	r3, r3, #8
 800873e:	b2db      	uxtb	r3, r3
 8008740:	0018      	movs	r0, r3
 8008742:	f7ff fd69 	bl	8008218 <W25qxx_Spi>
	W25qxx_Spi(WriteAddr_inBytes & 0xFF);
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	b2db      	uxtb	r3, r3
 800874a:	0018      	movs	r0, r3
 800874c:	f7ff fd64 	bl	8008218 <W25qxx_Spi>
	W25qxx_Spi(pBuffer);
 8008750:	1dfb      	adds	r3, r7, #7
 8008752:	781b      	ldrb	r3, [r3, #0]
 8008754:	0018      	movs	r0, r3
 8008756:	f7ff fd5f 	bl	8008218 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800875a:	4b09      	ldr	r3, [pc, #36]	; (8008780 <W25qxx_WriteByte+0xb0>)
 800875c:	2201      	movs	r2, #1
 800875e:	2108      	movs	r1, #8
 8008760:	0018      	movs	r0, r3
 8008762:	f001 f8c3 	bl	80098ec <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8008766:	f7ff fe5b 	bl	8008420 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WriteByte done after %d ms\r\n", HAL_GetTick() - StartTime);
#endif
	w25qxx.Lock = 0;
 800876a:	4b04      	ldr	r3, [pc, #16]	; (800877c <W25qxx_WriteByte+0xac>)
 800876c:	2227      	movs	r2, #39	; 0x27
 800876e:	2100      	movs	r1, #0
 8008770:	5499      	strb	r1, [r3, r2]
}
 8008772:	46c0      	nop			; (mov r8, r8)
 8008774:	46bd      	mov	sp, r7
 8008776:	b002      	add	sp, #8
 8008778:	bd80      	pop	{r7, pc}
 800877a:	46c0      	nop			; (mov r8, r8)
 800877c:	20001034 	.word	0x20001034
 8008780:	50000c00 	.word	0x50000c00

08008784 <W25qxx_WritePage>:
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b084      	sub	sp, #16
 8008788:	af00      	add	r7, sp, #0
 800878a:	60f8      	str	r0, [r7, #12]
 800878c:	60b9      	str	r1, [r7, #8]
 800878e:	607a      	str	r2, [r7, #4]
 8008790:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8008792:	e002      	b.n	800879a <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8008794:	2001      	movs	r0, #1
 8008796:	f000 fb25 	bl	8008de4 <HAL_Delay>
	while (w25qxx.Lock == 1)
 800879a:	4b3a      	ldr	r3, [pc, #232]	; (8008884 <W25qxx_WritePage+0x100>)
 800879c:	2227      	movs	r2, #39	; 0x27
 800879e:	5c9b      	ldrb	r3, [r3, r2]
 80087a0:	2b01      	cmp	r3, #1
 80087a2:	d0f7      	beq.n	8008794 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 80087a4:	4b37      	ldr	r3, [pc, #220]	; (8008884 <W25qxx_WritePage+0x100>)
 80087a6:	2227      	movs	r2, #39	; 0x27
 80087a8:	2101      	movs	r1, #1
 80087aa:	5499      	strb	r1, [r3, r2]
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 80087ac:	683a      	ldr	r2, [r7, #0]
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	18d3      	adds	r3, r2, r3
 80087b2:	4a34      	ldr	r2, [pc, #208]	; (8008884 <W25qxx_WritePage+0x100>)
 80087b4:	8952      	ldrh	r2, [r2, #10]
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d802      	bhi.n	80087c0 <W25qxx_WritePage+0x3c>
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d105      	bne.n	80087cc <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80087c0:	4b30      	ldr	r3, [pc, #192]	; (8008884 <W25qxx_WritePage+0x100>)
 80087c2:	895b      	ldrh	r3, [r3, #10]
 80087c4:	001a      	movs	r2, r3
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	1ad3      	subs	r3, r2, r3
 80087ca:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	18d3      	adds	r3, r2, r3
 80087d2:	4a2c      	ldr	r2, [pc, #176]	; (8008884 <W25qxx_WritePage+0x100>)
 80087d4:	8952      	ldrh	r2, [r2, #10]
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d905      	bls.n	80087e6 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80087da:	4b2a      	ldr	r3, [pc, #168]	; (8008884 <W25qxx_WritePage+0x100>)
 80087dc:	895b      	ldrh	r3, [r3, #10]
 80087de:	001a      	movs	r2, r3
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	1ad3      	subs	r3, r2, r3
 80087e4:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	W25qxx_WaitForWriteEnd();
 80087e6:	f7ff fe1b 	bl	8008420 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 80087ea:	f7ff fda7 	bl	800833c <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80087ee:	4b26      	ldr	r3, [pc, #152]	; (8008888 <W25qxx_WritePage+0x104>)
 80087f0:	2200      	movs	r2, #0
 80087f2:	2108      	movs	r1, #8
 80087f4:	0018      	movs	r0, r3
 80087f6:	f001 f879 	bl	80098ec <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 80087fa:	4b22      	ldr	r3, [pc, #136]	; (8008884 <W25qxx_WritePage+0x100>)
 80087fc:	895b      	ldrh	r3, [r3, #10]
 80087fe:	001a      	movs	r2, r3
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	4353      	muls	r3, r2
 8008804:	687a      	ldr	r2, [r7, #4]
 8008806:	18d3      	adds	r3, r2, r3
 8008808:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 800880a:	4b1e      	ldr	r3, [pc, #120]	; (8008884 <W25qxx_WritePage+0x100>)
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	2b08      	cmp	r3, #8
 8008810:	d909      	bls.n	8008826 <W25qxx_WritePage+0xa2>
	{
		W25qxx_Spi(0x12);
 8008812:	2012      	movs	r0, #18
 8008814:	f7ff fd00 	bl	8008218 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	0e1b      	lsrs	r3, r3, #24
 800881c:	b2db      	uxtb	r3, r3
 800881e:	0018      	movs	r0, r3
 8008820:	f7ff fcfa 	bl	8008218 <W25qxx_Spi>
 8008824:	e002      	b.n	800882c <W25qxx_WritePage+0xa8>
	}
	else
	{
		W25qxx_Spi(0x02);
 8008826:	2002      	movs	r0, #2
 8008828:	f7ff fcf6 	bl	8008218 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	0c1b      	lsrs	r3, r3, #16
 8008830:	b2db      	uxtb	r3, r3
 8008832:	0018      	movs	r0, r3
 8008834:	f7ff fcf0 	bl	8008218 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	0a1b      	lsrs	r3, r3, #8
 800883c:	b2db      	uxtb	r3, r3
 800883e:	0018      	movs	r0, r3
 8008840:	f7ff fcea 	bl	8008218 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	b2db      	uxtb	r3, r3
 8008848:	0018      	movs	r0, r3
 800884a:	f7ff fce5 	bl	8008218 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	b29a      	uxth	r2, r3
 8008852:	68f9      	ldr	r1, [r7, #12]
 8008854:	480d      	ldr	r0, [pc, #52]	; (800888c <W25qxx_WritePage+0x108>)
 8008856:	2364      	movs	r3, #100	; 0x64
 8008858:	f001 ff72 	bl	800a740 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800885c:	4b0a      	ldr	r3, [pc, #40]	; (8008888 <W25qxx_WritePage+0x104>)
 800885e:	2201      	movs	r2, #1
 8008860:	2108      	movs	r1, #8
 8008862:	0018      	movs	r0, r3
 8008864:	f001 f842 	bl	80098ec <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8008868:	f7ff fdda 	bl	8008420 <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 800886c:	2001      	movs	r0, #1
 800886e:	f000 fab9 	bl	8008de4 <HAL_Delay>
	w25qxx.Lock = 0;
 8008872:	4b04      	ldr	r3, [pc, #16]	; (8008884 <W25qxx_WritePage+0x100>)
 8008874:	2227      	movs	r2, #39	; 0x27
 8008876:	2100      	movs	r1, #0
 8008878:	5499      	strb	r1, [r3, r2]
}
 800887a:	46c0      	nop			; (mov r8, r8)
 800887c:	46bd      	mov	sp, r7
 800887e:	b004      	add	sp, #16
 8008880:	bd80      	pop	{r7, pc}
 8008882:	46c0      	nop			; (mov r8, r8)
 8008884:	20001034 	.word	0x20001034
 8008888:	50000c00 	.word	0x50000c00
 800888c:	200002b8 	.word	0x200002b8

08008890 <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8008890:	b590      	push	{r4, r7, lr}
 8008892:	b089      	sub	sp, #36	; 0x24
 8008894:	af00      	add	r7, sp, #0
 8008896:	60f8      	str	r0, [r7, #12]
 8008898:	60b9      	str	r1, [r7, #8]
 800889a:	607a      	str	r2, [r7, #4]
 800889c:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 800889e:	4b2d      	ldr	r3, [pc, #180]	; (8008954 <W25qxx_WriteSector+0xc4>)
 80088a0:	691b      	ldr	r3, [r3, #16]
 80088a2:	683a      	ldr	r2, [r7, #0]
 80088a4:	429a      	cmp	r2, r3
 80088a6:	d802      	bhi.n	80088ae <W25qxx_WriteSector+0x1e>
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d102      	bne.n	80088b4 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 80088ae:	4b29      	ldr	r3, [pc, #164]	; (8008954 <W25qxx_WriteSector+0xc4>)
 80088b0:	691b      	ldr	r3, [r3, #16]
 80088b2:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 80088b4:	4b27      	ldr	r3, [pc, #156]	; (8008954 <W25qxx_WriteSector+0xc4>)
 80088b6:	691b      	ldr	r3, [r3, #16]
 80088b8:	687a      	ldr	r2, [r7, #4]
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d245      	bcs.n	800894a <W25qxx_WriteSector+0xba>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 80088be:	687a      	ldr	r2, [r7, #4]
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	18d2      	adds	r2, r2, r3
 80088c4:	4b23      	ldr	r3, [pc, #140]	; (8008954 <W25qxx_WriteSector+0xc4>)
 80088c6:	691b      	ldr	r3, [r3, #16]
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d905      	bls.n	80088d8 <W25qxx_WriteSector+0x48>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 80088cc:	4b21      	ldr	r3, [pc, #132]	; (8008954 <W25qxx_WriteSector+0xc4>)
 80088ce:	691a      	ldr	r2, [r3, #16]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	1ad3      	subs	r3, r2, r3
 80088d4:	61bb      	str	r3, [r7, #24]
 80088d6:	e001      	b.n	80088dc <W25qxx_WriteSector+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	0018      	movs	r0, r3
 80088e0:	f7ff fee0 	bl	80086a4 <W25qxx_SectorToPage>
 80088e4:	0004      	movs	r4, r0
 80088e6:	4b1b      	ldr	r3, [pc, #108]	; (8008954 <W25qxx_WriteSector+0xc4>)
 80088e8:	895b      	ldrh	r3, [r3, #10]
 80088ea:	0019      	movs	r1, r3
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f7f7 fc2d 	bl	800014c <__udivsi3>
 80088f2:	0003      	movs	r3, r0
 80088f4:	18e3      	adds	r3, r4, r3
 80088f6:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 80088f8:	4b16      	ldr	r3, [pc, #88]	; (8008954 <W25qxx_WriteSector+0xc4>)
 80088fa:	895b      	ldrh	r3, [r3, #10]
 80088fc:	001a      	movs	r2, r3
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	0011      	movs	r1, r2
 8008902:	0018      	movs	r0, r3
 8008904:	f7f7 fca8 	bl	8000258 <__aeabi_uidivmod>
 8008908:	000b      	movs	r3, r1
 800890a:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 800890c:	69bb      	ldr	r3, [r7, #24]
 800890e:	697a      	ldr	r2, [r7, #20]
 8008910:	69f9      	ldr	r1, [r7, #28]
 8008912:	68f8      	ldr	r0, [r7, #12]
 8008914:	f7ff ff36 	bl	8008784 <W25qxx_WritePage>
		StartPage++;
 8008918:	69fb      	ldr	r3, [r7, #28]
 800891a:	3301      	adds	r3, #1
 800891c:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 800891e:	4b0d      	ldr	r3, [pc, #52]	; (8008954 <W25qxx_WriteSector+0xc4>)
 8008920:	895b      	ldrh	r3, [r3, #10]
 8008922:	001a      	movs	r2, r3
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	1a9a      	subs	r2, r3, r2
 8008928:	69bb      	ldr	r3, [r7, #24]
 800892a:	18d3      	adds	r3, r2, r3
 800892c:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 800892e:	4b09      	ldr	r3, [pc, #36]	; (8008954 <W25qxx_WriteSector+0xc4>)
 8008930:	895b      	ldrh	r3, [r3, #10]
 8008932:	001a      	movs	r2, r3
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	1ad3      	subs	r3, r2, r3
 8008938:	68fa      	ldr	r2, [r7, #12]
 800893a:	18d3      	adds	r3, r2, r3
 800893c:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 800893e:	2300      	movs	r3, #0
 8008940:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 8008942:	69bb      	ldr	r3, [r7, #24]
 8008944:	2b00      	cmp	r3, #0
 8008946:	dce1      	bgt.n	800890c <W25qxx_WriteSector+0x7c>
 8008948:	e000      	b.n	800894c <W25qxx_WriteSector+0xbc>
		return;
 800894a:	46c0      	nop			; (mov r8, r8)
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 800894c:	46bd      	mov	sp, r7
 800894e:	b009      	add	sp, #36	; 0x24
 8008950:	bd90      	pop	{r4, r7, pc}
 8008952:	46c0      	nop			; (mov r8, r8)
 8008954:	20001034 	.word	0x20001034

08008958 <W25qxx_ReadByte>:
	W25qxx_Delay(100);
#endif
}
//###################################################################################################################
void W25qxx_ReadByte(uint8_t *pBuffer, uint32_t Bytes_Address)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b082      	sub	sp, #8
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	6039      	str	r1, [r7, #0]
	while (w25qxx.Lock == 1)
 8008962:	e002      	b.n	800896a <W25qxx_ReadByte+0x12>
		W25qxx_Delay(1);
 8008964:	2001      	movs	r0, #1
 8008966:	f000 fa3d 	bl	8008de4 <HAL_Delay>
	while (w25qxx.Lock == 1)
 800896a:	4b24      	ldr	r3, [pc, #144]	; (80089fc <W25qxx_ReadByte+0xa4>)
 800896c:	2227      	movs	r2, #39	; 0x27
 800896e:	5c9b      	ldrb	r3, [r3, r2]
 8008970:	2b01      	cmp	r3, #1
 8008972:	d0f7      	beq.n	8008964 <W25qxx_ReadByte+0xc>
	w25qxx.Lock = 1;
 8008974:	4b21      	ldr	r3, [pc, #132]	; (80089fc <W25qxx_ReadByte+0xa4>)
 8008976:	2227      	movs	r2, #39	; 0x27
 8008978:	2101      	movs	r1, #1
 800897a:	5499      	strb	r1, [r3, r2]
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx ReadByte at address %d begin...\r\n", Bytes_Address);
#endif
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800897c:	4b20      	ldr	r3, [pc, #128]	; (8008a00 <W25qxx_ReadByte+0xa8>)
 800897e:	2200      	movs	r2, #0
 8008980:	2108      	movs	r1, #8
 8008982:	0018      	movs	r0, r3
 8008984:	f000 ffb2 	bl	80098ec <HAL_GPIO_WritePin>

	if (w25qxx.ID >= W25Q256)
 8008988:	4b1c      	ldr	r3, [pc, #112]	; (80089fc <W25qxx_ReadByte+0xa4>)
 800898a:	781b      	ldrb	r3, [r3, #0]
 800898c:	2b08      	cmp	r3, #8
 800898e:	d909      	bls.n	80089a4 <W25qxx_ReadByte+0x4c>
	{
		W25qxx_Spi(0x0C);
 8008990:	200c      	movs	r0, #12
 8008992:	f7ff fc41 	bl	8008218 <W25qxx_Spi>
		W25qxx_Spi((Bytes_Address & 0xFF000000) >> 24);
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	0e1b      	lsrs	r3, r3, #24
 800899a:	b2db      	uxtb	r3, r3
 800899c:	0018      	movs	r0, r3
 800899e:	f7ff fc3b 	bl	8008218 <W25qxx_Spi>
 80089a2:	e002      	b.n	80089aa <W25qxx_ReadByte+0x52>
	}
	else
	{
		W25qxx_Spi(0x0B);
 80089a4:	200b      	movs	r0, #11
 80089a6:	f7ff fc37 	bl	8008218 <W25qxx_Spi>
	}
	W25qxx_Spi((Bytes_Address & 0xFF0000) >> 16);
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	0c1b      	lsrs	r3, r3, #16
 80089ae:	b2db      	uxtb	r3, r3
 80089b0:	0018      	movs	r0, r3
 80089b2:	f7ff fc31 	bl	8008218 <W25qxx_Spi>
	W25qxx_Spi((Bytes_Address & 0xFF00) >> 8);
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	0a1b      	lsrs	r3, r3, #8
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	0018      	movs	r0, r3
 80089be:	f7ff fc2b 	bl	8008218 <W25qxx_Spi>
	W25qxx_Spi(Bytes_Address & 0xFF);
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	0018      	movs	r0, r3
 80089c8:	f7ff fc26 	bl	8008218 <W25qxx_Spi>
	W25qxx_Spi(0);
 80089cc:	2000      	movs	r0, #0
 80089ce:	f7ff fc23 	bl	8008218 <W25qxx_Spi>
	*pBuffer = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80089d2:	20a5      	movs	r0, #165	; 0xa5
 80089d4:	f7ff fc20 	bl	8008218 <W25qxx_Spi>
 80089d8:	0003      	movs	r3, r0
 80089da:	001a      	movs	r2, r3
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80089e0:	4b07      	ldr	r3, [pc, #28]	; (8008a00 <W25qxx_ReadByte+0xa8>)
 80089e2:	2201      	movs	r2, #1
 80089e4:	2108      	movs	r1, #8
 80089e6:	0018      	movs	r0, r3
 80089e8:	f000 ff80 	bl	80098ec <HAL_GPIO_WritePin>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadByte 0x%02X done after %d ms\r\n", *pBuffer, HAL_GetTick() - StartTime);
#endif
	w25qxx.Lock = 0;
 80089ec:	4b03      	ldr	r3, [pc, #12]	; (80089fc <W25qxx_ReadByte+0xa4>)
 80089ee:	2227      	movs	r2, #39	; 0x27
 80089f0:	2100      	movs	r1, #0
 80089f2:	5499      	strb	r1, [r3, r2]
}
 80089f4:	46c0      	nop			; (mov r8, r8)
 80089f6:	46bd      	mov	sp, r7
 80089f8:	b002      	add	sp, #8
 80089fa:	bd80      	pop	{r7, pc}
 80089fc:	20001034 	.word	0x20001034
 8008a00:	50000c00 	.word	0x50000c00

08008a04 <W25qxx_ReadBytes>:
//###################################################################################################################
void W25qxx_ReadBytes(uint8_t *pBuffer, uint32_t ReadAddr, uint32_t NumByteToRead)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b084      	sub	sp, #16
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	60f8      	str	r0, [r7, #12]
 8008a0c:	60b9      	str	r1, [r7, #8]
 8008a0e:	607a      	str	r2, [r7, #4]
	while (w25qxx.Lock == 1)
 8008a10:	e002      	b.n	8008a18 <W25qxx_ReadBytes+0x14>
		W25qxx_Delay(1);
 8008a12:	2001      	movs	r0, #1
 8008a14:	f000 f9e6 	bl	8008de4 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8008a18:	4b26      	ldr	r3, [pc, #152]	; (8008ab4 <W25qxx_ReadBytes+0xb0>)
 8008a1a:	2227      	movs	r2, #39	; 0x27
 8008a1c:	5c9b      	ldrb	r3, [r3, r2]
 8008a1e:	2b01      	cmp	r3, #1
 8008a20:	d0f7      	beq.n	8008a12 <W25qxx_ReadBytes+0xe>
	w25qxx.Lock = 1;
 8008a22:	4b24      	ldr	r3, [pc, #144]	; (8008ab4 <W25qxx_ReadBytes+0xb0>)
 8008a24:	2227      	movs	r2, #39	; 0x27
 8008a26:	2101      	movs	r1, #1
 8008a28:	5499      	strb	r1, [r3, r2]
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx ReadBytes at Address:%d, %d Bytes  begin...\r\n", ReadAddr, NumByteToRead);
#endif
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8008a2a:	4b23      	ldr	r3, [pc, #140]	; (8008ab8 <W25qxx_ReadBytes+0xb4>)
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	2108      	movs	r1, #8
 8008a30:	0018      	movs	r0, r3
 8008a32:	f000 ff5b 	bl	80098ec <HAL_GPIO_WritePin>

	if (w25qxx.ID >= W25Q256)
 8008a36:	4b1f      	ldr	r3, [pc, #124]	; (8008ab4 <W25qxx_ReadBytes+0xb0>)
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	2b08      	cmp	r3, #8
 8008a3c:	d909      	bls.n	8008a52 <W25qxx_ReadBytes+0x4e>
	{
		W25qxx_Spi(0x0C);
 8008a3e:	200c      	movs	r0, #12
 8008a40:	f7ff fbea 	bl	8008218 <W25qxx_Spi>
		W25qxx_Spi((ReadAddr & 0xFF000000) >> 24);
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	0e1b      	lsrs	r3, r3, #24
 8008a48:	b2db      	uxtb	r3, r3
 8008a4a:	0018      	movs	r0, r3
 8008a4c:	f7ff fbe4 	bl	8008218 <W25qxx_Spi>
 8008a50:	e002      	b.n	8008a58 <W25qxx_ReadBytes+0x54>
	}
	else
	{
		W25qxx_Spi(0x0B);
 8008a52:	200b      	movs	r0, #11
 8008a54:	f7ff fbe0 	bl	8008218 <W25qxx_Spi>
	}
	W25qxx_Spi((ReadAddr & 0xFF0000) >> 16);
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	0c1b      	lsrs	r3, r3, #16
 8008a5c:	b2db      	uxtb	r3, r3
 8008a5e:	0018      	movs	r0, r3
 8008a60:	f7ff fbda 	bl	8008218 <W25qxx_Spi>
	W25qxx_Spi((ReadAddr & 0xFF00) >> 8);
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	0a1b      	lsrs	r3, r3, #8
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	0018      	movs	r0, r3
 8008a6c:	f7ff fbd4 	bl	8008218 <W25qxx_Spi>
	W25qxx_Spi(ReadAddr & 0xFF);
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	0018      	movs	r0, r3
 8008a76:	f7ff fbcf 	bl	8008218 <W25qxx_Spi>
	W25qxx_Spi(0);
 8008a7a:	2000      	movs	r0, #0
 8008a7c:	f7ff fbcc 	bl	8008218 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead, 2000);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	b29a      	uxth	r2, r3
 8008a84:	23fa      	movs	r3, #250	; 0xfa
 8008a86:	00db      	lsls	r3, r3, #3
 8008a88:	68f9      	ldr	r1, [r7, #12]
 8008a8a:	480c      	ldr	r0, [pc, #48]	; (8008abc <W25qxx_ReadBytes+0xb8>)
 8008a8c:	f001 ffb0 	bl	800a9f0 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8008a90:	4b09      	ldr	r3, [pc, #36]	; (8008ab8 <W25qxx_ReadBytes+0xb4>)
 8008a92:	2201      	movs	r2, #1
 8008a94:	2108      	movs	r1, #8
 8008a96:	0018      	movs	r0, r3
 8008a98:	f000 ff28 	bl	80098ec <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadBytes done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8008a9c:	2001      	movs	r0, #1
 8008a9e:	f000 f9a1 	bl	8008de4 <HAL_Delay>
	w25qxx.Lock = 0;
 8008aa2:	4b04      	ldr	r3, [pc, #16]	; (8008ab4 <W25qxx_ReadBytes+0xb0>)
 8008aa4:	2227      	movs	r2, #39	; 0x27
 8008aa6:	2100      	movs	r1, #0
 8008aa8:	5499      	strb	r1, [r3, r2]
}
 8008aaa:	46c0      	nop			; (mov r8, r8)
 8008aac:	46bd      	mov	sp, r7
 8008aae:	b004      	add	sp, #16
 8008ab0:	bd80      	pop	{r7, pc}
 8008ab2:	46c0      	nop			; (mov r8, r8)
 8008ab4:	20001034 	.word	0x20001034
 8008ab8:	50000c00 	.word	0x50000c00
 8008abc:	200002b8 	.word	0x200002b8

08008ac0 <W25qxx_ReadPage>:
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b084      	sub	sp, #16
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	60f8      	str	r0, [r7, #12]
 8008ac8:	60b9      	str	r1, [r7, #8]
 8008aca:	607a      	str	r2, [r7, #4]
 8008acc:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8008ace:	e002      	b.n	8008ad6 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8008ad0:	2001      	movs	r0, #1
 8008ad2:	f000 f987 	bl	8008de4 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8008ad6:	4b36      	ldr	r3, [pc, #216]	; (8008bb0 <W25qxx_ReadPage+0xf0>)
 8008ad8:	2227      	movs	r2, #39	; 0x27
 8008ada:	5c9b      	ldrb	r3, [r3, r2]
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d0f7      	beq.n	8008ad0 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 8008ae0:	4b33      	ldr	r3, [pc, #204]	; (8008bb0 <W25qxx_ReadPage+0xf0>)
 8008ae2:	2227      	movs	r2, #39	; 0x27
 8008ae4:	2101      	movs	r1, #1
 8008ae6:	5499      	strb	r1, [r3, r2]
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 8008ae8:	4b31      	ldr	r3, [pc, #196]	; (8008bb0 <W25qxx_ReadPage+0xf0>)
 8008aea:	895b      	ldrh	r3, [r3, #10]
 8008aec:	001a      	movs	r2, r3
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d802      	bhi.n	8008afa <W25qxx_ReadPage+0x3a>
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d102      	bne.n	8008b00 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 8008afa:	4b2d      	ldr	r3, [pc, #180]	; (8008bb0 <W25qxx_ReadPage+0xf0>)
 8008afc:	895b      	ldrh	r3, [r3, #10]
 8008afe:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8008b00:	687a      	ldr	r2, [r7, #4]
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	18d3      	adds	r3, r2, r3
 8008b06:	4a2a      	ldr	r2, [pc, #168]	; (8008bb0 <W25qxx_ReadPage+0xf0>)
 8008b08:	8952      	ldrh	r2, [r2, #10]
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d905      	bls.n	8008b1a <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8008b0e:	4b28      	ldr	r3, [pc, #160]	; (8008bb0 <W25qxx_ReadPage+0xf0>)
 8008b10:	895b      	ldrh	r3, [r3, #10]
 8008b12:	001a      	movs	r2, r3
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	1ad3      	subs	r3, r2, r3
 8008b18:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 8008b1a:	4b25      	ldr	r3, [pc, #148]	; (8008bb0 <W25qxx_ReadPage+0xf0>)
 8008b1c:	895b      	ldrh	r3, [r3, #10]
 8008b1e:	001a      	movs	r2, r3
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	4353      	muls	r3, r2
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	18d3      	adds	r3, r2, r3
 8008b28:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8008b2a:	4b22      	ldr	r3, [pc, #136]	; (8008bb4 <W25qxx_ReadPage+0xf4>)
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	2108      	movs	r1, #8
 8008b30:	0018      	movs	r0, r3
 8008b32:	f000 fedb 	bl	80098ec <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8008b36:	4b1e      	ldr	r3, [pc, #120]	; (8008bb0 <W25qxx_ReadPage+0xf0>)
 8008b38:	781b      	ldrb	r3, [r3, #0]
 8008b3a:	2b08      	cmp	r3, #8
 8008b3c:	d909      	bls.n	8008b52 <W25qxx_ReadPage+0x92>
	{
		W25qxx_Spi(0x0C);
 8008b3e:	200c      	movs	r0, #12
 8008b40:	f7ff fb6a 	bl	8008218 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	0e1b      	lsrs	r3, r3, #24
 8008b48:	b2db      	uxtb	r3, r3
 8008b4a:	0018      	movs	r0, r3
 8008b4c:	f7ff fb64 	bl	8008218 <W25qxx_Spi>
 8008b50:	e002      	b.n	8008b58 <W25qxx_ReadPage+0x98>
	}
	else
	{
		W25qxx_Spi(0x0B);
 8008b52:	200b      	movs	r0, #11
 8008b54:	f7ff fb60 	bl	8008218 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	0c1b      	lsrs	r3, r3, #16
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	0018      	movs	r0, r3
 8008b60:	f7ff fb5a 	bl	8008218 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	0a1b      	lsrs	r3, r3, #8
 8008b68:	b2db      	uxtb	r3, r3
 8008b6a:	0018      	movs	r0, r3
 8008b6c:	f7ff fb54 	bl	8008218 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	b2db      	uxtb	r3, r3
 8008b74:	0018      	movs	r0, r3
 8008b76:	f7ff fb4f 	bl	8008218 <W25qxx_Spi>
	W25qxx_Spi(0);
 8008b7a:	2000      	movs	r0, #0
 8008b7c:	f7ff fb4c 	bl	8008218 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	b29a      	uxth	r2, r3
 8008b84:	68f9      	ldr	r1, [r7, #12]
 8008b86:	480c      	ldr	r0, [pc, #48]	; (8008bb8 <W25qxx_ReadPage+0xf8>)
 8008b88:	2364      	movs	r3, #100	; 0x64
 8008b8a:	f001 ff31 	bl	800a9f0 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8008b8e:	4b09      	ldr	r3, [pc, #36]	; (8008bb4 <W25qxx_ReadPage+0xf4>)
 8008b90:	2201      	movs	r2, #1
 8008b92:	2108      	movs	r1, #8
 8008b94:	0018      	movs	r0, r3
 8008b96:	f000 fea9 	bl	80098ec <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8008b9a:	2001      	movs	r0, #1
 8008b9c:	f000 f922 	bl	8008de4 <HAL_Delay>
	w25qxx.Lock = 0;
 8008ba0:	4b03      	ldr	r3, [pc, #12]	; (8008bb0 <W25qxx_ReadPage+0xf0>)
 8008ba2:	2227      	movs	r2, #39	; 0x27
 8008ba4:	2100      	movs	r1, #0
 8008ba6:	5499      	strb	r1, [r3, r2]
}
 8008ba8:	46c0      	nop			; (mov r8, r8)
 8008baa:	46bd      	mov	sp, r7
 8008bac:	b004      	add	sp, #16
 8008bae:	bd80      	pop	{r7, pc}
 8008bb0:	20001034 	.word	0x20001034
 8008bb4:	50000c00 	.word	0x50000c00
 8008bb8:	200002b8 	.word	0x200002b8

08008bbc <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 8008bbc:	b590      	push	{r4, r7, lr}
 8008bbe:	b089      	sub	sp, #36	; 0x24
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	60f8      	str	r0, [r7, #12]
 8008bc4:	60b9      	str	r1, [r7, #8]
 8008bc6:	607a      	str	r2, [r7, #4]
 8008bc8:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 8008bca:	4b2d      	ldr	r3, [pc, #180]	; (8008c80 <W25qxx_ReadSector+0xc4>)
 8008bcc:	691b      	ldr	r3, [r3, #16]
 8008bce:	683a      	ldr	r2, [r7, #0]
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d802      	bhi.n	8008bda <W25qxx_ReadSector+0x1e>
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d102      	bne.n	8008be0 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 8008bda:	4b29      	ldr	r3, [pc, #164]	; (8008c80 <W25qxx_ReadSector+0xc4>)
 8008bdc:	691b      	ldr	r3, [r3, #16]
 8008bde:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8008be0:	4b27      	ldr	r3, [pc, #156]	; (8008c80 <W25qxx_ReadSector+0xc4>)
 8008be2:	691b      	ldr	r3, [r3, #16]
 8008be4:	687a      	ldr	r2, [r7, #4]
 8008be6:	429a      	cmp	r2, r3
 8008be8:	d245      	bcs.n	8008c76 <W25qxx_ReadSector+0xba>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 8008bea:	687a      	ldr	r2, [r7, #4]
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	18d2      	adds	r2, r2, r3
 8008bf0:	4b23      	ldr	r3, [pc, #140]	; (8008c80 <W25qxx_ReadSector+0xc4>)
 8008bf2:	691b      	ldr	r3, [r3, #16]
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d905      	bls.n	8008c04 <W25qxx_ReadSector+0x48>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 8008bf8:	4b21      	ldr	r3, [pc, #132]	; (8008c80 <W25qxx_ReadSector+0xc4>)
 8008bfa:	691a      	ldr	r2, [r3, #16]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	1ad3      	subs	r3, r2, r3
 8008c00:	61bb      	str	r3, [r7, #24]
 8008c02:	e001      	b.n	8008c08 <W25qxx_ReadSector+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	0018      	movs	r0, r3
 8008c0c:	f7ff fd4a 	bl	80086a4 <W25qxx_SectorToPage>
 8008c10:	0004      	movs	r4, r0
 8008c12:	4b1b      	ldr	r3, [pc, #108]	; (8008c80 <W25qxx_ReadSector+0xc4>)
 8008c14:	895b      	ldrh	r3, [r3, #10]
 8008c16:	0019      	movs	r1, r3
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f7f7 fa97 	bl	800014c <__udivsi3>
 8008c1e:	0003      	movs	r3, r0
 8008c20:	18e3      	adds	r3, r4, r3
 8008c22:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8008c24:	4b16      	ldr	r3, [pc, #88]	; (8008c80 <W25qxx_ReadSector+0xc4>)
 8008c26:	895b      	ldrh	r3, [r3, #10]
 8008c28:	001a      	movs	r2, r3
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	0011      	movs	r1, r2
 8008c2e:	0018      	movs	r0, r3
 8008c30:	f7f7 fb12 	bl	8000258 <__aeabi_uidivmod>
 8008c34:	000b      	movs	r3, r1
 8008c36:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8008c38:	69bb      	ldr	r3, [r7, #24]
 8008c3a:	697a      	ldr	r2, [r7, #20]
 8008c3c:	69f9      	ldr	r1, [r7, #28]
 8008c3e:	68f8      	ldr	r0, [r7, #12]
 8008c40:	f7ff ff3e 	bl	8008ac0 <W25qxx_ReadPage>
		StartPage++;
 8008c44:	69fb      	ldr	r3, [r7, #28]
 8008c46:	3301      	adds	r3, #1
 8008c48:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 8008c4a:	4b0d      	ldr	r3, [pc, #52]	; (8008c80 <W25qxx_ReadSector+0xc4>)
 8008c4c:	895b      	ldrh	r3, [r3, #10]
 8008c4e:	001a      	movs	r2, r3
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	1a9a      	subs	r2, r3, r2
 8008c54:	69bb      	ldr	r3, [r7, #24]
 8008c56:	18d3      	adds	r3, r2, r3
 8008c58:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8008c5a:	4b09      	ldr	r3, [pc, #36]	; (8008c80 <W25qxx_ReadSector+0xc4>)
 8008c5c:	895b      	ldrh	r3, [r3, #10]
 8008c5e:	001a      	movs	r2, r3
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	1ad3      	subs	r3, r2, r3
 8008c64:	68fa      	ldr	r2, [r7, #12]
 8008c66:	18d3      	adds	r3, r2, r3
 8008c68:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 8008c6e:	69bb      	ldr	r3, [r7, #24]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	dce1      	bgt.n	8008c38 <W25qxx_ReadSector+0x7c>
 8008c74:	e000      	b.n	8008c78 <W25qxx_ReadSector+0xbc>
		return;
 8008c76:	46c0      	nop			; (mov r8, r8)
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
#endif

}
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	b009      	add	sp, #36	; 0x24
 8008c7c:	bd90      	pop	{r4, r7, pc}
 8008c7e:	46c0      	nop			; (mov r8, r8)
 8008c80:	20001034 	.word	0x20001034

08008c84 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008c84:	480d      	ldr	r0, [pc, #52]	; (8008cbc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8008c86:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8008c88:	f7ff fac0 	bl	800820c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008c8c:	480c      	ldr	r0, [pc, #48]	; (8008cc0 <LoopForever+0x6>)
  ldr r1, =_edata
 8008c8e:	490d      	ldr	r1, [pc, #52]	; (8008cc4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008c90:	4a0d      	ldr	r2, [pc, #52]	; (8008cc8 <LoopForever+0xe>)
  movs r3, #0
 8008c92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008c94:	e002      	b.n	8008c9c <LoopCopyDataInit>

08008c96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008c96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008c98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008c9a:	3304      	adds	r3, #4

08008c9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008c9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008c9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008ca0:	d3f9      	bcc.n	8008c96 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008ca2:	4a0a      	ldr	r2, [pc, #40]	; (8008ccc <LoopForever+0x12>)
  ldr r4, =_ebss
 8008ca4:	4c0a      	ldr	r4, [pc, #40]	; (8008cd0 <LoopForever+0x16>)
  movs r3, #0
 8008ca6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008ca8:	e001      	b.n	8008cae <LoopFillZerobss>

08008caa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008caa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008cac:	3204      	adds	r2, #4

08008cae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008cae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008cb0:	d3fb      	bcc.n	8008caa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8008cb2:	f005 fc3f 	bl	800e534 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8008cb6:	f7fb f993 	bl	8003fe0 <main>

08008cba <LoopForever>:

LoopForever:
  b LoopForever
 8008cba:	e7fe      	b.n	8008cba <LoopForever>
  ldr   r0, =_estack
 8008cbc:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8008cc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008cc4:	20000288 	.word	0x20000288
  ldr r2, =_sidata
 8008cc8:	080134e8 	.word	0x080134e8
  ldr r2, =_sbss
 8008ccc:	20000288 	.word	0x20000288
  ldr r4, =_ebss
 8008cd0:	20001070 	.word	0x20001070

08008cd4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008cd4:	e7fe      	b.n	8008cd4 <ADC1_IRQHandler>
	...

08008cd8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b082      	sub	sp, #8
 8008cdc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008cde:	1dfb      	adds	r3, r7, #7
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008ce4:	4b0b      	ldr	r3, [pc, #44]	; (8008d14 <HAL_Init+0x3c>)
 8008ce6:	681a      	ldr	r2, [r3, #0]
 8008ce8:	4b0a      	ldr	r3, [pc, #40]	; (8008d14 <HAL_Init+0x3c>)
 8008cea:	2180      	movs	r1, #128	; 0x80
 8008cec:	0049      	lsls	r1, r1, #1
 8008cee:	430a      	orrs	r2, r1
 8008cf0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008cf2:	2000      	movs	r0, #0
 8008cf4:	f000 f810 	bl	8008d18 <HAL_InitTick>
 8008cf8:	1e03      	subs	r3, r0, #0
 8008cfa:	d003      	beq.n	8008d04 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8008cfc:	1dfb      	adds	r3, r7, #7
 8008cfe:	2201      	movs	r2, #1
 8008d00:	701a      	strb	r2, [r3, #0]
 8008d02:	e001      	b.n	8008d08 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8008d04:	f7fe fe7e 	bl	8007a04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008d08:	1dfb      	adds	r3, r7, #7
 8008d0a:	781b      	ldrb	r3, [r3, #0]
}
 8008d0c:	0018      	movs	r0, r3
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	b002      	add	sp, #8
 8008d12:	bd80      	pop	{r7, pc}
 8008d14:	40022000 	.word	0x40022000

08008d18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008d18:	b590      	push	{r4, r7, lr}
 8008d1a:	b085      	sub	sp, #20
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8008d20:	230f      	movs	r3, #15
 8008d22:	18fb      	adds	r3, r7, r3
 8008d24:	2200      	movs	r2, #0
 8008d26:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8008d28:	4b1d      	ldr	r3, [pc, #116]	; (8008da0 <HAL_InitTick+0x88>)
 8008d2a:	781b      	ldrb	r3, [r3, #0]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d02b      	beq.n	8008d88 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8008d30:	4b1c      	ldr	r3, [pc, #112]	; (8008da4 <HAL_InitTick+0x8c>)
 8008d32:	681c      	ldr	r4, [r3, #0]
 8008d34:	4b1a      	ldr	r3, [pc, #104]	; (8008da0 <HAL_InitTick+0x88>)
 8008d36:	781b      	ldrb	r3, [r3, #0]
 8008d38:	0019      	movs	r1, r3
 8008d3a:	23fa      	movs	r3, #250	; 0xfa
 8008d3c:	0098      	lsls	r0, r3, #2
 8008d3e:	f7f7 fa05 	bl	800014c <__udivsi3>
 8008d42:	0003      	movs	r3, r0
 8008d44:	0019      	movs	r1, r3
 8008d46:	0020      	movs	r0, r4
 8008d48:	f7f7 fa00 	bl	800014c <__udivsi3>
 8008d4c:	0003      	movs	r3, r0
 8008d4e:	0018      	movs	r0, r3
 8008d50:	f000 f93d 	bl	8008fce <HAL_SYSTICK_Config>
 8008d54:	1e03      	subs	r3, r0, #0
 8008d56:	d112      	bne.n	8008d7e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2b03      	cmp	r3, #3
 8008d5c:	d80a      	bhi.n	8008d74 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008d5e:	6879      	ldr	r1, [r7, #4]
 8008d60:	2301      	movs	r3, #1
 8008d62:	425b      	negs	r3, r3
 8008d64:	2200      	movs	r2, #0
 8008d66:	0018      	movs	r0, r3
 8008d68:	f000 f90c 	bl	8008f84 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008d6c:	4b0e      	ldr	r3, [pc, #56]	; (8008da8 <HAL_InitTick+0x90>)
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	601a      	str	r2, [r3, #0]
 8008d72:	e00d      	b.n	8008d90 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8008d74:	230f      	movs	r3, #15
 8008d76:	18fb      	adds	r3, r7, r3
 8008d78:	2201      	movs	r2, #1
 8008d7a:	701a      	strb	r2, [r3, #0]
 8008d7c:	e008      	b.n	8008d90 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008d7e:	230f      	movs	r3, #15
 8008d80:	18fb      	adds	r3, r7, r3
 8008d82:	2201      	movs	r2, #1
 8008d84:	701a      	strb	r2, [r3, #0]
 8008d86:	e003      	b.n	8008d90 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008d88:	230f      	movs	r3, #15
 8008d8a:	18fb      	adds	r3, r7, r3
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8008d90:	230f      	movs	r3, #15
 8008d92:	18fb      	adds	r3, r7, r3
 8008d94:	781b      	ldrb	r3, [r3, #0]
}
 8008d96:	0018      	movs	r0, r3
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	b005      	add	sp, #20
 8008d9c:	bd90      	pop	{r4, r7, pc}
 8008d9e:	46c0      	nop			; (mov r8, r8)
 8008da0:	200000b0 	.word	0x200000b0
 8008da4:	200000a8 	.word	0x200000a8
 8008da8:	200000ac 	.word	0x200000ac

08008dac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008db0:	4b05      	ldr	r3, [pc, #20]	; (8008dc8 <HAL_IncTick+0x1c>)
 8008db2:	781b      	ldrb	r3, [r3, #0]
 8008db4:	001a      	movs	r2, r3
 8008db6:	4b05      	ldr	r3, [pc, #20]	; (8008dcc <HAL_IncTick+0x20>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	18d2      	adds	r2, r2, r3
 8008dbc:	4b03      	ldr	r3, [pc, #12]	; (8008dcc <HAL_IncTick+0x20>)
 8008dbe:	601a      	str	r2, [r3, #0]
}
 8008dc0:	46c0      	nop			; (mov r8, r8)
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}
 8008dc6:	46c0      	nop			; (mov r8, r8)
 8008dc8:	200000b0 	.word	0x200000b0
 8008dcc:	2000105c 	.word	0x2000105c

08008dd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	af00      	add	r7, sp, #0
  return uwTick;
 8008dd4:	4b02      	ldr	r3, [pc, #8]	; (8008de0 <HAL_GetTick+0x10>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
}
 8008dd8:	0018      	movs	r0, r3
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	46c0      	nop			; (mov r8, r8)
 8008de0:	2000105c 	.word	0x2000105c

08008de4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b084      	sub	sp, #16
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008dec:	f7ff fff0 	bl	8008dd0 <HAL_GetTick>
 8008df0:	0003      	movs	r3, r0
 8008df2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	d005      	beq.n	8008e0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008dfe:	4b0a      	ldr	r3, [pc, #40]	; (8008e28 <HAL_Delay+0x44>)
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	001a      	movs	r2, r3
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	189b      	adds	r3, r3, r2
 8008e08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008e0a:	46c0      	nop			; (mov r8, r8)
 8008e0c:	f7ff ffe0 	bl	8008dd0 <HAL_GetTick>
 8008e10:	0002      	movs	r2, r0
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	1ad3      	subs	r3, r2, r3
 8008e16:	68fa      	ldr	r2, [r7, #12]
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	d8f7      	bhi.n	8008e0c <HAL_Delay+0x28>
  {
  }
}
 8008e1c:	46c0      	nop			; (mov r8, r8)
 8008e1e:	46c0      	nop			; (mov r8, r8)
 8008e20:	46bd      	mov	sp, r7
 8008e22:	b004      	add	sp, #16
 8008e24:	bd80      	pop	{r7, pc}
 8008e26:	46c0      	nop			; (mov r8, r8)
 8008e28:	200000b0 	.word	0x200000b0

08008e2c <__NVIC_EnableIRQ>:
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b082      	sub	sp, #8
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	0002      	movs	r2, r0
 8008e34:	1dfb      	adds	r3, r7, #7
 8008e36:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8008e38:	1dfb      	adds	r3, r7, #7
 8008e3a:	781b      	ldrb	r3, [r3, #0]
 8008e3c:	2b7f      	cmp	r3, #127	; 0x7f
 8008e3e:	d809      	bhi.n	8008e54 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008e40:	1dfb      	adds	r3, r7, #7
 8008e42:	781b      	ldrb	r3, [r3, #0]
 8008e44:	001a      	movs	r2, r3
 8008e46:	231f      	movs	r3, #31
 8008e48:	401a      	ands	r2, r3
 8008e4a:	4b04      	ldr	r3, [pc, #16]	; (8008e5c <__NVIC_EnableIRQ+0x30>)
 8008e4c:	2101      	movs	r1, #1
 8008e4e:	4091      	lsls	r1, r2
 8008e50:	000a      	movs	r2, r1
 8008e52:	601a      	str	r2, [r3, #0]
}
 8008e54:	46c0      	nop			; (mov r8, r8)
 8008e56:	46bd      	mov	sp, r7
 8008e58:	b002      	add	sp, #8
 8008e5a:	bd80      	pop	{r7, pc}
 8008e5c:	e000e100 	.word	0xe000e100

08008e60 <__NVIC_SetPriority>:
{
 8008e60:	b590      	push	{r4, r7, lr}
 8008e62:	b083      	sub	sp, #12
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	0002      	movs	r2, r0
 8008e68:	6039      	str	r1, [r7, #0]
 8008e6a:	1dfb      	adds	r3, r7, #7
 8008e6c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8008e6e:	1dfb      	adds	r3, r7, #7
 8008e70:	781b      	ldrb	r3, [r3, #0]
 8008e72:	2b7f      	cmp	r3, #127	; 0x7f
 8008e74:	d828      	bhi.n	8008ec8 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008e76:	4a2f      	ldr	r2, [pc, #188]	; (8008f34 <__NVIC_SetPriority+0xd4>)
 8008e78:	1dfb      	adds	r3, r7, #7
 8008e7a:	781b      	ldrb	r3, [r3, #0]
 8008e7c:	b25b      	sxtb	r3, r3
 8008e7e:	089b      	lsrs	r3, r3, #2
 8008e80:	33c0      	adds	r3, #192	; 0xc0
 8008e82:	009b      	lsls	r3, r3, #2
 8008e84:	589b      	ldr	r3, [r3, r2]
 8008e86:	1dfa      	adds	r2, r7, #7
 8008e88:	7812      	ldrb	r2, [r2, #0]
 8008e8a:	0011      	movs	r1, r2
 8008e8c:	2203      	movs	r2, #3
 8008e8e:	400a      	ands	r2, r1
 8008e90:	00d2      	lsls	r2, r2, #3
 8008e92:	21ff      	movs	r1, #255	; 0xff
 8008e94:	4091      	lsls	r1, r2
 8008e96:	000a      	movs	r2, r1
 8008e98:	43d2      	mvns	r2, r2
 8008e9a:	401a      	ands	r2, r3
 8008e9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	019b      	lsls	r3, r3, #6
 8008ea2:	22ff      	movs	r2, #255	; 0xff
 8008ea4:	401a      	ands	r2, r3
 8008ea6:	1dfb      	adds	r3, r7, #7
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	0018      	movs	r0, r3
 8008eac:	2303      	movs	r3, #3
 8008eae:	4003      	ands	r3, r0
 8008eb0:	00db      	lsls	r3, r3, #3
 8008eb2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008eb4:	481f      	ldr	r0, [pc, #124]	; (8008f34 <__NVIC_SetPriority+0xd4>)
 8008eb6:	1dfb      	adds	r3, r7, #7
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	b25b      	sxtb	r3, r3
 8008ebc:	089b      	lsrs	r3, r3, #2
 8008ebe:	430a      	orrs	r2, r1
 8008ec0:	33c0      	adds	r3, #192	; 0xc0
 8008ec2:	009b      	lsls	r3, r3, #2
 8008ec4:	501a      	str	r2, [r3, r0]
}
 8008ec6:	e031      	b.n	8008f2c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008ec8:	4a1b      	ldr	r2, [pc, #108]	; (8008f38 <__NVIC_SetPriority+0xd8>)
 8008eca:	1dfb      	adds	r3, r7, #7
 8008ecc:	781b      	ldrb	r3, [r3, #0]
 8008ece:	0019      	movs	r1, r3
 8008ed0:	230f      	movs	r3, #15
 8008ed2:	400b      	ands	r3, r1
 8008ed4:	3b08      	subs	r3, #8
 8008ed6:	089b      	lsrs	r3, r3, #2
 8008ed8:	3306      	adds	r3, #6
 8008eda:	009b      	lsls	r3, r3, #2
 8008edc:	18d3      	adds	r3, r2, r3
 8008ede:	3304      	adds	r3, #4
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	1dfa      	adds	r2, r7, #7
 8008ee4:	7812      	ldrb	r2, [r2, #0]
 8008ee6:	0011      	movs	r1, r2
 8008ee8:	2203      	movs	r2, #3
 8008eea:	400a      	ands	r2, r1
 8008eec:	00d2      	lsls	r2, r2, #3
 8008eee:	21ff      	movs	r1, #255	; 0xff
 8008ef0:	4091      	lsls	r1, r2
 8008ef2:	000a      	movs	r2, r1
 8008ef4:	43d2      	mvns	r2, r2
 8008ef6:	401a      	ands	r2, r3
 8008ef8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	019b      	lsls	r3, r3, #6
 8008efe:	22ff      	movs	r2, #255	; 0xff
 8008f00:	401a      	ands	r2, r3
 8008f02:	1dfb      	adds	r3, r7, #7
 8008f04:	781b      	ldrb	r3, [r3, #0]
 8008f06:	0018      	movs	r0, r3
 8008f08:	2303      	movs	r3, #3
 8008f0a:	4003      	ands	r3, r0
 8008f0c:	00db      	lsls	r3, r3, #3
 8008f0e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008f10:	4809      	ldr	r0, [pc, #36]	; (8008f38 <__NVIC_SetPriority+0xd8>)
 8008f12:	1dfb      	adds	r3, r7, #7
 8008f14:	781b      	ldrb	r3, [r3, #0]
 8008f16:	001c      	movs	r4, r3
 8008f18:	230f      	movs	r3, #15
 8008f1a:	4023      	ands	r3, r4
 8008f1c:	3b08      	subs	r3, #8
 8008f1e:	089b      	lsrs	r3, r3, #2
 8008f20:	430a      	orrs	r2, r1
 8008f22:	3306      	adds	r3, #6
 8008f24:	009b      	lsls	r3, r3, #2
 8008f26:	18c3      	adds	r3, r0, r3
 8008f28:	3304      	adds	r3, #4
 8008f2a:	601a      	str	r2, [r3, #0]
}
 8008f2c:	46c0      	nop			; (mov r8, r8)
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	b003      	add	sp, #12
 8008f32:	bd90      	pop	{r4, r7, pc}
 8008f34:	e000e100 	.word	0xe000e100
 8008f38:	e000ed00 	.word	0xe000ed00

08008f3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b082      	sub	sp, #8
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	1e5a      	subs	r2, r3, #1
 8008f48:	2380      	movs	r3, #128	; 0x80
 8008f4a:	045b      	lsls	r3, r3, #17
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d301      	bcc.n	8008f54 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008f50:	2301      	movs	r3, #1
 8008f52:	e010      	b.n	8008f76 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008f54:	4b0a      	ldr	r3, [pc, #40]	; (8008f80 <SysTick_Config+0x44>)
 8008f56:	687a      	ldr	r2, [r7, #4]
 8008f58:	3a01      	subs	r2, #1
 8008f5a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	425b      	negs	r3, r3
 8008f60:	2103      	movs	r1, #3
 8008f62:	0018      	movs	r0, r3
 8008f64:	f7ff ff7c 	bl	8008e60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008f68:	4b05      	ldr	r3, [pc, #20]	; (8008f80 <SysTick_Config+0x44>)
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008f6e:	4b04      	ldr	r3, [pc, #16]	; (8008f80 <SysTick_Config+0x44>)
 8008f70:	2207      	movs	r2, #7
 8008f72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008f74:	2300      	movs	r3, #0
}
 8008f76:	0018      	movs	r0, r3
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	b002      	add	sp, #8
 8008f7c:	bd80      	pop	{r7, pc}
 8008f7e:	46c0      	nop			; (mov r8, r8)
 8008f80:	e000e010 	.word	0xe000e010

08008f84 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b084      	sub	sp, #16
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	60b9      	str	r1, [r7, #8]
 8008f8c:	607a      	str	r2, [r7, #4]
 8008f8e:	210f      	movs	r1, #15
 8008f90:	187b      	adds	r3, r7, r1
 8008f92:	1c02      	adds	r2, r0, #0
 8008f94:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8008f96:	68ba      	ldr	r2, [r7, #8]
 8008f98:	187b      	adds	r3, r7, r1
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	b25b      	sxtb	r3, r3
 8008f9e:	0011      	movs	r1, r2
 8008fa0:	0018      	movs	r0, r3
 8008fa2:	f7ff ff5d 	bl	8008e60 <__NVIC_SetPriority>
}
 8008fa6:	46c0      	nop			; (mov r8, r8)
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	b004      	add	sp, #16
 8008fac:	bd80      	pop	{r7, pc}

08008fae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008fae:	b580      	push	{r7, lr}
 8008fb0:	b082      	sub	sp, #8
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	0002      	movs	r2, r0
 8008fb6:	1dfb      	adds	r3, r7, #7
 8008fb8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008fba:	1dfb      	adds	r3, r7, #7
 8008fbc:	781b      	ldrb	r3, [r3, #0]
 8008fbe:	b25b      	sxtb	r3, r3
 8008fc0:	0018      	movs	r0, r3
 8008fc2:	f7ff ff33 	bl	8008e2c <__NVIC_EnableIRQ>
}
 8008fc6:	46c0      	nop			; (mov r8, r8)
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	b002      	add	sp, #8
 8008fcc:	bd80      	pop	{r7, pc}

08008fce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008fce:	b580      	push	{r7, lr}
 8008fd0:	b082      	sub	sp, #8
 8008fd2:	af00      	add	r7, sp, #0
 8008fd4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	0018      	movs	r0, r3
 8008fda:	f7ff ffaf 	bl	8008f3c <SysTick_Config>
 8008fde:	0003      	movs	r3, r0
}
 8008fe0:	0018      	movs	r0, r3
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	b002      	add	sp, #8
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b082      	sub	sp, #8
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d101      	bne.n	8008ffa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	e077      	b.n	80090ea <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4a3d      	ldr	r2, [pc, #244]	; (80090f4 <HAL_DMA_Init+0x10c>)
 8009000:	4694      	mov	ip, r2
 8009002:	4463      	add	r3, ip
 8009004:	2114      	movs	r1, #20
 8009006:	0018      	movs	r0, r3
 8009008:	f7f7 f8a0 	bl	800014c <__udivsi3>
 800900c:	0003      	movs	r3, r0
 800900e:	009a      	lsls	r2, r3, #2
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2225      	movs	r2, #37	; 0x25
 8009018:	2102      	movs	r1, #2
 800901a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	681a      	ldr	r2, [r3, #0]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	4934      	ldr	r1, [pc, #208]	; (80090f8 <HAL_DMA_Init+0x110>)
 8009028:	400a      	ands	r2, r1
 800902a:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	6819      	ldr	r1, [r3, #0]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	689a      	ldr	r2, [r3, #8]
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	68db      	ldr	r3, [r3, #12]
 800903a:	431a      	orrs	r2, r3
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	691b      	ldr	r3, [r3, #16]
 8009040:	431a      	orrs	r2, r3
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	695b      	ldr	r3, [r3, #20]
 8009046:	431a      	orrs	r2, r3
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	699b      	ldr	r3, [r3, #24]
 800904c:	431a      	orrs	r2, r3
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	69db      	ldr	r3, [r3, #28]
 8009052:	431a      	orrs	r2, r3
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6a1b      	ldr	r3, [r3, #32]
 8009058:	431a      	orrs	r2, r3
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	430a      	orrs	r2, r1
 8009060:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	0018      	movs	r0, r3
 8009066:	f000 fa8d 	bl	8009584 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	689a      	ldr	r2, [r3, #8]
 800906e:	2380      	movs	r3, #128	; 0x80
 8009070:	01db      	lsls	r3, r3, #7
 8009072:	429a      	cmp	r2, r3
 8009074:	d102      	bne.n	800907c <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2200      	movs	r2, #0
 800907a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	685a      	ldr	r2, [r3, #4]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009084:	213f      	movs	r1, #63	; 0x3f
 8009086:	400a      	ands	r2, r1
 8009088:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800908e:	687a      	ldr	r2, [r7, #4]
 8009090:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8009092:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d011      	beq.n	80090c0 <HAL_DMA_Init+0xd8>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	2b04      	cmp	r3, #4
 80090a2:	d80d      	bhi.n	80090c0 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	0018      	movs	r0, r3
 80090a8:	f000 fa98 	bl	80095dc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090b0:	2200      	movs	r2, #0
 80090b2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090b8:	687a      	ldr	r2, [r7, #4]
 80090ba:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80090bc:	605a      	str	r2, [r3, #4]
 80090be:	e008      	b.n	80090d2 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2200      	movs	r2, #0
 80090c4:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2200      	movs	r2, #0
 80090ca:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2200      	movs	r2, #0
 80090d0:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2200      	movs	r2, #0
 80090d6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2225      	movs	r2, #37	; 0x25
 80090dc:	2101      	movs	r1, #1
 80090de:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2224      	movs	r2, #36	; 0x24
 80090e4:	2100      	movs	r1, #0
 80090e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80090e8:	2300      	movs	r3, #0
}
 80090ea:	0018      	movs	r0, r3
 80090ec:	46bd      	mov	sp, r7
 80090ee:	b002      	add	sp, #8
 80090f0:	bd80      	pop	{r7, pc}
 80090f2:	46c0      	nop			; (mov r8, r8)
 80090f4:	bffdfff8 	.word	0xbffdfff8
 80090f8:	ffff800f 	.word	0xffff800f

080090fc <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b086      	sub	sp, #24
 8009100:	af00      	add	r7, sp, #0
 8009102:	60f8      	str	r0, [r7, #12]
 8009104:	60b9      	str	r1, [r7, #8]
 8009106:	607a      	str	r2, [r7, #4]
 8009108:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800910a:	2317      	movs	r3, #23
 800910c:	18fb      	adds	r3, r7, r3
 800910e:	2200      	movs	r2, #0
 8009110:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2224      	movs	r2, #36	; 0x24
 8009116:	5c9b      	ldrb	r3, [r3, r2]
 8009118:	2b01      	cmp	r3, #1
 800911a:	d101      	bne.n	8009120 <HAL_DMA_Start_IT+0x24>
 800911c:	2302      	movs	r3, #2
 800911e:	e06f      	b.n	8009200 <HAL_DMA_Start_IT+0x104>
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2224      	movs	r2, #36	; 0x24
 8009124:	2101      	movs	r1, #1
 8009126:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	2225      	movs	r2, #37	; 0x25
 800912c:	5c9b      	ldrb	r3, [r3, r2]
 800912e:	b2db      	uxtb	r3, r3
 8009130:	2b01      	cmp	r3, #1
 8009132:	d157      	bne.n	80091e4 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	2225      	movs	r2, #37	; 0x25
 8009138:	2102      	movs	r1, #2
 800913a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	2200      	movs	r2, #0
 8009140:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	681a      	ldr	r2, [r3, #0]
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	2101      	movs	r1, #1
 800914e:	438a      	bics	r2, r1
 8009150:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	687a      	ldr	r2, [r7, #4]
 8009156:	68b9      	ldr	r1, [r7, #8]
 8009158:	68f8      	ldr	r0, [r7, #12]
 800915a:	f000 f9d3 	bl	8009504 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009162:	2b00      	cmp	r3, #0
 8009164:	d008      	beq.n	8009178 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	681a      	ldr	r2, [r3, #0]
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	210e      	movs	r1, #14
 8009172:	430a      	orrs	r2, r1
 8009174:	601a      	str	r2, [r3, #0]
 8009176:	e00f      	b.n	8009198 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	681a      	ldr	r2, [r3, #0]
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	2104      	movs	r1, #4
 8009184:	438a      	bics	r2, r1
 8009186:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	681a      	ldr	r2, [r3, #0]
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	210a      	movs	r1, #10
 8009194:	430a      	orrs	r2, r1
 8009196:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800919c:	681a      	ldr	r2, [r3, #0]
 800919e:	2380      	movs	r3, #128	; 0x80
 80091a0:	025b      	lsls	r3, r3, #9
 80091a2:	4013      	ands	r3, r2
 80091a4:	d008      	beq.n	80091b8 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091aa:	681a      	ldr	r2, [r3, #0]
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091b0:	2180      	movs	r1, #128	; 0x80
 80091b2:	0049      	lsls	r1, r1, #1
 80091b4:	430a      	orrs	r2, r1
 80091b6:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d008      	beq.n	80091d2 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091c4:	681a      	ldr	r2, [r3, #0]
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091ca:	2180      	movs	r1, #128	; 0x80
 80091cc:	0049      	lsls	r1, r1, #1
 80091ce:	430a      	orrs	r2, r1
 80091d0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	681a      	ldr	r2, [r3, #0]
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	2101      	movs	r1, #1
 80091de:	430a      	orrs	r2, r1
 80091e0:	601a      	str	r2, [r3, #0]
 80091e2:	e00a      	b.n	80091fa <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2280      	movs	r2, #128	; 0x80
 80091e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2224      	movs	r2, #36	; 0x24
 80091ee:	2100      	movs	r1, #0
 80091f0:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80091f2:	2317      	movs	r3, #23
 80091f4:	18fb      	adds	r3, r7, r3
 80091f6:	2201      	movs	r2, #1
 80091f8:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80091fa:	2317      	movs	r3, #23
 80091fc:	18fb      	adds	r3, r7, r3
 80091fe:	781b      	ldrb	r3, [r3, #0]
}
 8009200:	0018      	movs	r0, r3
 8009202:	46bd      	mov	sp, r7
 8009204:	b006      	add	sp, #24
 8009206:	bd80      	pop	{r7, pc}

08009208 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b082      	sub	sp, #8
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d101      	bne.n	800921a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8009216:	2301      	movs	r3, #1
 8009218:	e050      	b.n	80092bc <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2225      	movs	r2, #37	; 0x25
 800921e:	5c9b      	ldrb	r3, [r3, r2]
 8009220:	b2db      	uxtb	r3, r3
 8009222:	2b02      	cmp	r3, #2
 8009224:	d008      	beq.n	8009238 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2204      	movs	r2, #4
 800922a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2224      	movs	r2, #36	; 0x24
 8009230:	2100      	movs	r1, #0
 8009232:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8009234:	2301      	movs	r3, #1
 8009236:	e041      	b.n	80092bc <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	681a      	ldr	r2, [r3, #0]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	210e      	movs	r1, #14
 8009244:	438a      	bics	r2, r1
 8009246:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800924c:	681a      	ldr	r2, [r3, #0]
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009252:	491c      	ldr	r1, [pc, #112]	; (80092c4 <HAL_DMA_Abort+0xbc>)
 8009254:	400a      	ands	r2, r1
 8009256:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	681a      	ldr	r2, [r3, #0]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	2101      	movs	r1, #1
 8009264:	438a      	bics	r2, r1
 8009266:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8009268:	4b17      	ldr	r3, [pc, #92]	; (80092c8 <HAL_DMA_Abort+0xc0>)
 800926a:	6859      	ldr	r1, [r3, #4]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009270:	221c      	movs	r2, #28
 8009272:	4013      	ands	r3, r2
 8009274:	2201      	movs	r2, #1
 8009276:	409a      	lsls	r2, r3
 8009278:	4b13      	ldr	r3, [pc, #76]	; (80092c8 <HAL_DMA_Abort+0xc0>)
 800927a:	430a      	orrs	r2, r1
 800927c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009282:	687a      	ldr	r2, [r7, #4]
 8009284:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8009286:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800928c:	2b00      	cmp	r3, #0
 800928e:	d00c      	beq.n	80092aa <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009294:	681a      	ldr	r2, [r3, #0]
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800929a:	490a      	ldr	r1, [pc, #40]	; (80092c4 <HAL_DMA_Abort+0xbc>)
 800929c:	400a      	ands	r2, r1
 800929e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092a4:	687a      	ldr	r2, [r7, #4]
 80092a6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80092a8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2225      	movs	r2, #37	; 0x25
 80092ae:	2101      	movs	r1, #1
 80092b0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2224      	movs	r2, #36	; 0x24
 80092b6:	2100      	movs	r1, #0
 80092b8:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80092ba:	2300      	movs	r3, #0
}
 80092bc:	0018      	movs	r0, r3
 80092be:	46bd      	mov	sp, r7
 80092c0:	b002      	add	sp, #8
 80092c2:	bd80      	pop	{r7, pc}
 80092c4:	fffffeff 	.word	0xfffffeff
 80092c8:	40020000 	.word	0x40020000

080092cc <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b084      	sub	sp, #16
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80092d4:	210f      	movs	r1, #15
 80092d6:	187b      	adds	r3, r7, r1
 80092d8:	2200      	movs	r2, #0
 80092da:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2225      	movs	r2, #37	; 0x25
 80092e0:	5c9b      	ldrb	r3, [r3, r2]
 80092e2:	b2db      	uxtb	r3, r3
 80092e4:	2b02      	cmp	r3, #2
 80092e6:	d006      	beq.n	80092f6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2204      	movs	r2, #4
 80092ec:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80092ee:	187b      	adds	r3, r7, r1
 80092f0:	2201      	movs	r2, #1
 80092f2:	701a      	strb	r2, [r3, #0]
 80092f4:	e049      	b.n	800938a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	681a      	ldr	r2, [r3, #0]
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	210e      	movs	r1, #14
 8009302:	438a      	bics	r2, r1
 8009304:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	681a      	ldr	r2, [r3, #0]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	2101      	movs	r1, #1
 8009312:	438a      	bics	r2, r1
 8009314:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800931a:	681a      	ldr	r2, [r3, #0]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009320:	491d      	ldr	r1, [pc, #116]	; (8009398 <HAL_DMA_Abort_IT+0xcc>)
 8009322:	400a      	ands	r2, r1
 8009324:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8009326:	4b1d      	ldr	r3, [pc, #116]	; (800939c <HAL_DMA_Abort_IT+0xd0>)
 8009328:	6859      	ldr	r1, [r3, #4]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800932e:	221c      	movs	r2, #28
 8009330:	4013      	ands	r3, r2
 8009332:	2201      	movs	r2, #1
 8009334:	409a      	lsls	r2, r3
 8009336:	4b19      	ldr	r3, [pc, #100]	; (800939c <HAL_DMA_Abort_IT+0xd0>)
 8009338:	430a      	orrs	r2, r1
 800933a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009340:	687a      	ldr	r2, [r7, #4]
 8009342:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8009344:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800934a:	2b00      	cmp	r3, #0
 800934c:	d00c      	beq.n	8009368 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009352:	681a      	ldr	r2, [r3, #0]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009358:	490f      	ldr	r1, [pc, #60]	; (8009398 <HAL_DMA_Abort_IT+0xcc>)
 800935a:	400a      	ands	r2, r1
 800935c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009362:	687a      	ldr	r2, [r7, #4]
 8009364:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009366:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2225      	movs	r2, #37	; 0x25
 800936c:	2101      	movs	r1, #1
 800936e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2224      	movs	r2, #36	; 0x24
 8009374:	2100      	movs	r1, #0
 8009376:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800937c:	2b00      	cmp	r3, #0
 800937e:	d004      	beq.n	800938a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009384:	687a      	ldr	r2, [r7, #4]
 8009386:	0010      	movs	r0, r2
 8009388:	4798      	blx	r3
    }
  }
  return status;
 800938a:	230f      	movs	r3, #15
 800938c:	18fb      	adds	r3, r7, r3
 800938e:	781b      	ldrb	r3, [r3, #0]
}
 8009390:	0018      	movs	r0, r3
 8009392:	46bd      	mov	sp, r7
 8009394:	b004      	add	sp, #16
 8009396:	bd80      	pop	{r7, pc}
 8009398:	fffffeff 	.word	0xfffffeff
 800939c:	40020000 	.word	0x40020000

080093a0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b084      	sub	sp, #16
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80093a8:	4b55      	ldr	r3, [pc, #340]	; (8009500 <HAL_DMA_IRQHandler+0x160>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ba:	221c      	movs	r2, #28
 80093bc:	4013      	ands	r3, r2
 80093be:	2204      	movs	r2, #4
 80093c0:	409a      	lsls	r2, r3
 80093c2:	0013      	movs	r3, r2
 80093c4:	68fa      	ldr	r2, [r7, #12]
 80093c6:	4013      	ands	r3, r2
 80093c8:	d027      	beq.n	800941a <HAL_DMA_IRQHandler+0x7a>
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	2204      	movs	r2, #4
 80093ce:	4013      	ands	r3, r2
 80093d0:	d023      	beq.n	800941a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	2220      	movs	r2, #32
 80093da:	4013      	ands	r3, r2
 80093dc:	d107      	bne.n	80093ee <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	681a      	ldr	r2, [r3, #0]
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	2104      	movs	r1, #4
 80093ea:	438a      	bics	r2, r1
 80093ec:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80093ee:	4b44      	ldr	r3, [pc, #272]	; (8009500 <HAL_DMA_IRQHandler+0x160>)
 80093f0:	6859      	ldr	r1, [r3, #4]
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093f6:	221c      	movs	r2, #28
 80093f8:	4013      	ands	r3, r2
 80093fa:	2204      	movs	r2, #4
 80093fc:	409a      	lsls	r2, r3
 80093fe:	4b40      	ldr	r3, [pc, #256]	; (8009500 <HAL_DMA_IRQHandler+0x160>)
 8009400:	430a      	orrs	r2, r1
 8009402:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009408:	2b00      	cmp	r3, #0
 800940a:	d100      	bne.n	800940e <HAL_DMA_IRQHandler+0x6e>
 800940c:	e073      	b.n	80094f6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009412:	687a      	ldr	r2, [r7, #4]
 8009414:	0010      	movs	r0, r2
 8009416:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8009418:	e06d      	b.n	80094f6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800941e:	221c      	movs	r2, #28
 8009420:	4013      	ands	r3, r2
 8009422:	2202      	movs	r2, #2
 8009424:	409a      	lsls	r2, r3
 8009426:	0013      	movs	r3, r2
 8009428:	68fa      	ldr	r2, [r7, #12]
 800942a:	4013      	ands	r3, r2
 800942c:	d02e      	beq.n	800948c <HAL_DMA_IRQHandler+0xec>
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	2202      	movs	r2, #2
 8009432:	4013      	ands	r3, r2
 8009434:	d02a      	beq.n	800948c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	2220      	movs	r2, #32
 800943e:	4013      	ands	r3, r2
 8009440:	d10b      	bne.n	800945a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	681a      	ldr	r2, [r3, #0]
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	210a      	movs	r1, #10
 800944e:	438a      	bics	r2, r1
 8009450:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2225      	movs	r2, #37	; 0x25
 8009456:	2101      	movs	r1, #1
 8009458:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800945a:	4b29      	ldr	r3, [pc, #164]	; (8009500 <HAL_DMA_IRQHandler+0x160>)
 800945c:	6859      	ldr	r1, [r3, #4]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009462:	221c      	movs	r2, #28
 8009464:	4013      	ands	r3, r2
 8009466:	2202      	movs	r2, #2
 8009468:	409a      	lsls	r2, r3
 800946a:	4b25      	ldr	r3, [pc, #148]	; (8009500 <HAL_DMA_IRQHandler+0x160>)
 800946c:	430a      	orrs	r2, r1
 800946e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2224      	movs	r2, #36	; 0x24
 8009474:	2100      	movs	r1, #0
 8009476:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800947c:	2b00      	cmp	r3, #0
 800947e:	d03a      	beq.n	80094f6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009484:	687a      	ldr	r2, [r7, #4]
 8009486:	0010      	movs	r0, r2
 8009488:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800948a:	e034      	b.n	80094f6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009490:	221c      	movs	r2, #28
 8009492:	4013      	ands	r3, r2
 8009494:	2208      	movs	r2, #8
 8009496:	409a      	lsls	r2, r3
 8009498:	0013      	movs	r3, r2
 800949a:	68fa      	ldr	r2, [r7, #12]
 800949c:	4013      	ands	r3, r2
 800949e:	d02b      	beq.n	80094f8 <HAL_DMA_IRQHandler+0x158>
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	2208      	movs	r2, #8
 80094a4:	4013      	ands	r3, r2
 80094a6:	d027      	beq.n	80094f8 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	681a      	ldr	r2, [r3, #0]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	210e      	movs	r1, #14
 80094b4:	438a      	bics	r2, r1
 80094b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80094b8:	4b11      	ldr	r3, [pc, #68]	; (8009500 <HAL_DMA_IRQHandler+0x160>)
 80094ba:	6859      	ldr	r1, [r3, #4]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094c0:	221c      	movs	r2, #28
 80094c2:	4013      	ands	r3, r2
 80094c4:	2201      	movs	r2, #1
 80094c6:	409a      	lsls	r2, r3
 80094c8:	4b0d      	ldr	r3, [pc, #52]	; (8009500 <HAL_DMA_IRQHandler+0x160>)
 80094ca:	430a      	orrs	r2, r1
 80094cc:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2201      	movs	r2, #1
 80094d2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2225      	movs	r2, #37	; 0x25
 80094d8:	2101      	movs	r1, #1
 80094da:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2224      	movs	r2, #36	; 0x24
 80094e0:	2100      	movs	r1, #0
 80094e2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d005      	beq.n	80094f8 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094f0:	687a      	ldr	r2, [r7, #4]
 80094f2:	0010      	movs	r0, r2
 80094f4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80094f6:	46c0      	nop			; (mov r8, r8)
 80094f8:	46c0      	nop			; (mov r8, r8)
}
 80094fa:	46bd      	mov	sp, r7
 80094fc:	b004      	add	sp, #16
 80094fe:	bd80      	pop	{r7, pc}
 8009500:	40020000 	.word	0x40020000

08009504 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b084      	sub	sp, #16
 8009508:	af00      	add	r7, sp, #0
 800950a:	60f8      	str	r0, [r7, #12]
 800950c:	60b9      	str	r1, [r7, #8]
 800950e:	607a      	str	r2, [r7, #4]
 8009510:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009516:	68fa      	ldr	r2, [r7, #12]
 8009518:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800951a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009520:	2b00      	cmp	r3, #0
 8009522:	d004      	beq.n	800952e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009528:	68fa      	ldr	r2, [r7, #12]
 800952a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800952c:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800952e:	4b14      	ldr	r3, [pc, #80]	; (8009580 <DMA_SetConfig+0x7c>)
 8009530:	6859      	ldr	r1, [r3, #4]
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009536:	221c      	movs	r2, #28
 8009538:	4013      	ands	r3, r2
 800953a:	2201      	movs	r2, #1
 800953c:	409a      	lsls	r2, r3
 800953e:	4b10      	ldr	r3, [pc, #64]	; (8009580 <DMA_SetConfig+0x7c>)
 8009540:	430a      	orrs	r2, r1
 8009542:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	683a      	ldr	r2, [r7, #0]
 800954a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	689b      	ldr	r3, [r3, #8]
 8009550:	2b10      	cmp	r3, #16
 8009552:	d108      	bne.n	8009566 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	687a      	ldr	r2, [r7, #4]
 800955a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	68ba      	ldr	r2, [r7, #8]
 8009562:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8009564:	e007      	b.n	8009576 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	68ba      	ldr	r2, [r7, #8]
 800956c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	687a      	ldr	r2, [r7, #4]
 8009574:	60da      	str	r2, [r3, #12]
}
 8009576:	46c0      	nop			; (mov r8, r8)
 8009578:	46bd      	mov	sp, r7
 800957a:	b004      	add	sp, #16
 800957c:	bd80      	pop	{r7, pc}
 800957e:	46c0      	nop			; (mov r8, r8)
 8009580:	40020000 	.word	0x40020000

08009584 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b084      	sub	sp, #16
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009590:	089b      	lsrs	r3, r3, #2
 8009592:	4a10      	ldr	r2, [pc, #64]	; (80095d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8009594:	4694      	mov	ip, r2
 8009596:	4463      	add	r3, ip
 8009598:	009b      	lsls	r3, r3, #2
 800959a:	001a      	movs	r2, r3
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	001a      	movs	r2, r3
 80095a6:	23ff      	movs	r3, #255	; 0xff
 80095a8:	4013      	ands	r3, r2
 80095aa:	3b08      	subs	r3, #8
 80095ac:	2114      	movs	r1, #20
 80095ae:	0018      	movs	r0, r3
 80095b0:	f7f6 fdcc 	bl	800014c <__udivsi3>
 80095b4:	0003      	movs	r3, r0
 80095b6:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	4a07      	ldr	r2, [pc, #28]	; (80095d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80095bc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	221f      	movs	r2, #31
 80095c2:	4013      	ands	r3, r2
 80095c4:	2201      	movs	r2, #1
 80095c6:	409a      	lsls	r2, r3
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80095cc:	46c0      	nop			; (mov r8, r8)
 80095ce:	46bd      	mov	sp, r7
 80095d0:	b004      	add	sp, #16
 80095d2:	bd80      	pop	{r7, pc}
 80095d4:	10008200 	.word	0x10008200
 80095d8:	40020880 	.word	0x40020880

080095dc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b084      	sub	sp, #16
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	685b      	ldr	r3, [r3, #4]
 80095e8:	223f      	movs	r2, #63	; 0x3f
 80095ea:	4013      	ands	r3, r2
 80095ec:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	4a0a      	ldr	r2, [pc, #40]	; (800961c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80095f2:	4694      	mov	ip, r2
 80095f4:	4463      	add	r3, ip
 80095f6:	009b      	lsls	r3, r3, #2
 80095f8:	001a      	movs	r2, r3
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	4a07      	ldr	r2, [pc, #28]	; (8009620 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8009602:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	3b01      	subs	r3, #1
 8009608:	2203      	movs	r2, #3
 800960a:	4013      	ands	r3, r2
 800960c:	2201      	movs	r2, #1
 800960e:	409a      	lsls	r2, r3
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	659a      	str	r2, [r3, #88]	; 0x58
}
 8009614:	46c0      	nop			; (mov r8, r8)
 8009616:	46bd      	mov	sp, r7
 8009618:	b004      	add	sp, #16
 800961a:	bd80      	pop	{r7, pc}
 800961c:	1000823f 	.word	0x1000823f
 8009620:	40020940 	.word	0x40020940

08009624 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b086      	sub	sp, #24
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
 800962c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800962e:	2300      	movs	r3, #0
 8009630:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009632:	e147      	b.n	80098c4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	2101      	movs	r1, #1
 800963a:	697a      	ldr	r2, [r7, #20]
 800963c:	4091      	lsls	r1, r2
 800963e:	000a      	movs	r2, r1
 8009640:	4013      	ands	r3, r2
 8009642:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d100      	bne.n	800964c <HAL_GPIO_Init+0x28>
 800964a:	e138      	b.n	80098be <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	2203      	movs	r2, #3
 8009652:	4013      	ands	r3, r2
 8009654:	2b01      	cmp	r3, #1
 8009656:	d005      	beq.n	8009664 <HAL_GPIO_Init+0x40>
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	685b      	ldr	r3, [r3, #4]
 800965c:	2203      	movs	r2, #3
 800965e:	4013      	ands	r3, r2
 8009660:	2b02      	cmp	r3, #2
 8009662:	d130      	bne.n	80096c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	689b      	ldr	r3, [r3, #8]
 8009668:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	005b      	lsls	r3, r3, #1
 800966e:	2203      	movs	r2, #3
 8009670:	409a      	lsls	r2, r3
 8009672:	0013      	movs	r3, r2
 8009674:	43da      	mvns	r2, r3
 8009676:	693b      	ldr	r3, [r7, #16]
 8009678:	4013      	ands	r3, r2
 800967a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	68da      	ldr	r2, [r3, #12]
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	005b      	lsls	r3, r3, #1
 8009684:	409a      	lsls	r2, r3
 8009686:	0013      	movs	r3, r2
 8009688:	693a      	ldr	r2, [r7, #16]
 800968a:	4313      	orrs	r3, r2
 800968c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	693a      	ldr	r2, [r7, #16]
 8009692:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	685b      	ldr	r3, [r3, #4]
 8009698:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800969a:	2201      	movs	r2, #1
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	409a      	lsls	r2, r3
 80096a0:	0013      	movs	r3, r2
 80096a2:	43da      	mvns	r2, r3
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	4013      	ands	r3, r2
 80096a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	685b      	ldr	r3, [r3, #4]
 80096ae:	091b      	lsrs	r3, r3, #4
 80096b0:	2201      	movs	r2, #1
 80096b2:	401a      	ands	r2, r3
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	409a      	lsls	r2, r3
 80096b8:	0013      	movs	r3, r2
 80096ba:	693a      	ldr	r2, [r7, #16]
 80096bc:	4313      	orrs	r3, r2
 80096be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	693a      	ldr	r2, [r7, #16]
 80096c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	685b      	ldr	r3, [r3, #4]
 80096ca:	2203      	movs	r2, #3
 80096cc:	4013      	ands	r3, r2
 80096ce:	2b03      	cmp	r3, #3
 80096d0:	d017      	beq.n	8009702 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	68db      	ldr	r3, [r3, #12]
 80096d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	005b      	lsls	r3, r3, #1
 80096dc:	2203      	movs	r2, #3
 80096de:	409a      	lsls	r2, r3
 80096e0:	0013      	movs	r3, r2
 80096e2:	43da      	mvns	r2, r3
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	4013      	ands	r3, r2
 80096e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	689a      	ldr	r2, [r3, #8]
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	005b      	lsls	r3, r3, #1
 80096f2:	409a      	lsls	r2, r3
 80096f4:	0013      	movs	r3, r2
 80096f6:	693a      	ldr	r2, [r7, #16]
 80096f8:	4313      	orrs	r3, r2
 80096fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	693a      	ldr	r2, [r7, #16]
 8009700:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	685b      	ldr	r3, [r3, #4]
 8009706:	2203      	movs	r2, #3
 8009708:	4013      	ands	r3, r2
 800970a:	2b02      	cmp	r3, #2
 800970c:	d123      	bne.n	8009756 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	08da      	lsrs	r2, r3, #3
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	3208      	adds	r2, #8
 8009716:	0092      	lsls	r2, r2, #2
 8009718:	58d3      	ldr	r3, [r2, r3]
 800971a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	2207      	movs	r2, #7
 8009720:	4013      	ands	r3, r2
 8009722:	009b      	lsls	r3, r3, #2
 8009724:	220f      	movs	r2, #15
 8009726:	409a      	lsls	r2, r3
 8009728:	0013      	movs	r3, r2
 800972a:	43da      	mvns	r2, r3
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	4013      	ands	r3, r2
 8009730:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	691a      	ldr	r2, [r3, #16]
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	2107      	movs	r1, #7
 800973a:	400b      	ands	r3, r1
 800973c:	009b      	lsls	r3, r3, #2
 800973e:	409a      	lsls	r2, r3
 8009740:	0013      	movs	r3, r2
 8009742:	693a      	ldr	r2, [r7, #16]
 8009744:	4313      	orrs	r3, r2
 8009746:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8009748:	697b      	ldr	r3, [r7, #20]
 800974a:	08da      	lsrs	r2, r3, #3
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	3208      	adds	r2, #8
 8009750:	0092      	lsls	r2, r2, #2
 8009752:	6939      	ldr	r1, [r7, #16]
 8009754:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	005b      	lsls	r3, r3, #1
 8009760:	2203      	movs	r2, #3
 8009762:	409a      	lsls	r2, r3
 8009764:	0013      	movs	r3, r2
 8009766:	43da      	mvns	r2, r3
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	4013      	ands	r3, r2
 800976c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	2203      	movs	r2, #3
 8009774:	401a      	ands	r2, r3
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	005b      	lsls	r3, r3, #1
 800977a:	409a      	lsls	r2, r3
 800977c:	0013      	movs	r3, r2
 800977e:	693a      	ldr	r2, [r7, #16]
 8009780:	4313      	orrs	r3, r2
 8009782:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	693a      	ldr	r2, [r7, #16]
 8009788:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	685a      	ldr	r2, [r3, #4]
 800978e:	23c0      	movs	r3, #192	; 0xc0
 8009790:	029b      	lsls	r3, r3, #10
 8009792:	4013      	ands	r3, r2
 8009794:	d100      	bne.n	8009798 <HAL_GPIO_Init+0x174>
 8009796:	e092      	b.n	80098be <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8009798:	4a50      	ldr	r2, [pc, #320]	; (80098dc <HAL_GPIO_Init+0x2b8>)
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	089b      	lsrs	r3, r3, #2
 800979e:	3318      	adds	r3, #24
 80097a0:	009b      	lsls	r3, r3, #2
 80097a2:	589b      	ldr	r3, [r3, r2]
 80097a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	2203      	movs	r2, #3
 80097aa:	4013      	ands	r3, r2
 80097ac:	00db      	lsls	r3, r3, #3
 80097ae:	220f      	movs	r2, #15
 80097b0:	409a      	lsls	r2, r3
 80097b2:	0013      	movs	r3, r2
 80097b4:	43da      	mvns	r2, r3
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	4013      	ands	r3, r2
 80097ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80097bc:	687a      	ldr	r2, [r7, #4]
 80097be:	23a0      	movs	r3, #160	; 0xa0
 80097c0:	05db      	lsls	r3, r3, #23
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d013      	beq.n	80097ee <HAL_GPIO_Init+0x1ca>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	4a45      	ldr	r2, [pc, #276]	; (80098e0 <HAL_GPIO_Init+0x2bc>)
 80097ca:	4293      	cmp	r3, r2
 80097cc:	d00d      	beq.n	80097ea <HAL_GPIO_Init+0x1c6>
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	4a44      	ldr	r2, [pc, #272]	; (80098e4 <HAL_GPIO_Init+0x2c0>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d007      	beq.n	80097e6 <HAL_GPIO_Init+0x1c2>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	4a43      	ldr	r2, [pc, #268]	; (80098e8 <HAL_GPIO_Init+0x2c4>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d101      	bne.n	80097e2 <HAL_GPIO_Init+0x1be>
 80097de:	2303      	movs	r3, #3
 80097e0:	e006      	b.n	80097f0 <HAL_GPIO_Init+0x1cc>
 80097e2:	2305      	movs	r3, #5
 80097e4:	e004      	b.n	80097f0 <HAL_GPIO_Init+0x1cc>
 80097e6:	2302      	movs	r3, #2
 80097e8:	e002      	b.n	80097f0 <HAL_GPIO_Init+0x1cc>
 80097ea:	2301      	movs	r3, #1
 80097ec:	e000      	b.n	80097f0 <HAL_GPIO_Init+0x1cc>
 80097ee:	2300      	movs	r3, #0
 80097f0:	697a      	ldr	r2, [r7, #20]
 80097f2:	2103      	movs	r1, #3
 80097f4:	400a      	ands	r2, r1
 80097f6:	00d2      	lsls	r2, r2, #3
 80097f8:	4093      	lsls	r3, r2
 80097fa:	693a      	ldr	r2, [r7, #16]
 80097fc:	4313      	orrs	r3, r2
 80097fe:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8009800:	4936      	ldr	r1, [pc, #216]	; (80098dc <HAL_GPIO_Init+0x2b8>)
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	089b      	lsrs	r3, r3, #2
 8009806:	3318      	adds	r3, #24
 8009808:	009b      	lsls	r3, r3, #2
 800980a:	693a      	ldr	r2, [r7, #16]
 800980c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800980e:	4b33      	ldr	r3, [pc, #204]	; (80098dc <HAL_GPIO_Init+0x2b8>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	43da      	mvns	r2, r3
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	4013      	ands	r3, r2
 800981c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	685a      	ldr	r2, [r3, #4]
 8009822:	2380      	movs	r3, #128	; 0x80
 8009824:	035b      	lsls	r3, r3, #13
 8009826:	4013      	ands	r3, r2
 8009828:	d003      	beq.n	8009832 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800982a:	693a      	ldr	r2, [r7, #16]
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	4313      	orrs	r3, r2
 8009830:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009832:	4b2a      	ldr	r3, [pc, #168]	; (80098dc <HAL_GPIO_Init+0x2b8>)
 8009834:	693a      	ldr	r2, [r7, #16]
 8009836:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8009838:	4b28      	ldr	r3, [pc, #160]	; (80098dc <HAL_GPIO_Init+0x2b8>)
 800983a:	685b      	ldr	r3, [r3, #4]
 800983c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	43da      	mvns	r2, r3
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	4013      	ands	r3, r2
 8009846:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	685a      	ldr	r2, [r3, #4]
 800984c:	2380      	movs	r3, #128	; 0x80
 800984e:	039b      	lsls	r3, r3, #14
 8009850:	4013      	ands	r3, r2
 8009852:	d003      	beq.n	800985c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8009854:	693a      	ldr	r2, [r7, #16]
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	4313      	orrs	r3, r2
 800985a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800985c:	4b1f      	ldr	r3, [pc, #124]	; (80098dc <HAL_GPIO_Init+0x2b8>)
 800985e:	693a      	ldr	r2, [r7, #16]
 8009860:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8009862:	4a1e      	ldr	r2, [pc, #120]	; (80098dc <HAL_GPIO_Init+0x2b8>)
 8009864:	2384      	movs	r3, #132	; 0x84
 8009866:	58d3      	ldr	r3, [r2, r3]
 8009868:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	43da      	mvns	r2, r3
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	4013      	ands	r3, r2
 8009872:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	685a      	ldr	r2, [r3, #4]
 8009878:	2380      	movs	r3, #128	; 0x80
 800987a:	029b      	lsls	r3, r3, #10
 800987c:	4013      	ands	r3, r2
 800987e:	d003      	beq.n	8009888 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8009880:	693a      	ldr	r2, [r7, #16]
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	4313      	orrs	r3, r2
 8009886:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8009888:	4914      	ldr	r1, [pc, #80]	; (80098dc <HAL_GPIO_Init+0x2b8>)
 800988a:	2284      	movs	r2, #132	; 0x84
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8009890:	4a12      	ldr	r2, [pc, #72]	; (80098dc <HAL_GPIO_Init+0x2b8>)
 8009892:	2380      	movs	r3, #128	; 0x80
 8009894:	58d3      	ldr	r3, [r2, r3]
 8009896:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	43da      	mvns	r2, r3
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	4013      	ands	r3, r2
 80098a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	685a      	ldr	r2, [r3, #4]
 80098a6:	2380      	movs	r3, #128	; 0x80
 80098a8:	025b      	lsls	r3, r3, #9
 80098aa:	4013      	ands	r3, r2
 80098ac:	d003      	beq.n	80098b6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80098ae:	693a      	ldr	r2, [r7, #16]
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	4313      	orrs	r3, r2
 80098b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80098b6:	4909      	ldr	r1, [pc, #36]	; (80098dc <HAL_GPIO_Init+0x2b8>)
 80098b8:	2280      	movs	r2, #128	; 0x80
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	3301      	adds	r3, #1
 80098c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	681a      	ldr	r2, [r3, #0]
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	40da      	lsrs	r2, r3
 80098cc:	1e13      	subs	r3, r2, #0
 80098ce:	d000      	beq.n	80098d2 <HAL_GPIO_Init+0x2ae>
 80098d0:	e6b0      	b.n	8009634 <HAL_GPIO_Init+0x10>
  }
}
 80098d2:	46c0      	nop			; (mov r8, r8)
 80098d4:	46c0      	nop			; (mov r8, r8)
 80098d6:	46bd      	mov	sp, r7
 80098d8:	b006      	add	sp, #24
 80098da:	bd80      	pop	{r7, pc}
 80098dc:	40021800 	.word	0x40021800
 80098e0:	50000400 	.word	0x50000400
 80098e4:	50000800 	.word	0x50000800
 80098e8:	50000c00 	.word	0x50000c00

080098ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b082      	sub	sp, #8
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	0008      	movs	r0, r1
 80098f6:	0011      	movs	r1, r2
 80098f8:	1cbb      	adds	r3, r7, #2
 80098fa:	1c02      	adds	r2, r0, #0
 80098fc:	801a      	strh	r2, [r3, #0]
 80098fe:	1c7b      	adds	r3, r7, #1
 8009900:	1c0a      	adds	r2, r1, #0
 8009902:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009904:	1c7b      	adds	r3, r7, #1
 8009906:	781b      	ldrb	r3, [r3, #0]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d004      	beq.n	8009916 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800990c:	1cbb      	adds	r3, r7, #2
 800990e:	881a      	ldrh	r2, [r3, #0]
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009914:	e003      	b.n	800991e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009916:	1cbb      	adds	r3, r7, #2
 8009918:	881a      	ldrh	r2, [r3, #0]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800991e:	46c0      	nop			; (mov r8, r8)
 8009920:	46bd      	mov	sp, r7
 8009922:	b002      	add	sp, #8
 8009924:	bd80      	pop	{r7, pc}

08009926 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009926:	b580      	push	{r7, lr}
 8009928:	b084      	sub	sp, #16
 800992a:	af00      	add	r7, sp, #0
 800992c:	6078      	str	r0, [r7, #4]
 800992e:	000a      	movs	r2, r1
 8009930:	1cbb      	adds	r3, r7, #2
 8009932:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	695b      	ldr	r3, [r3, #20]
 8009938:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800993a:	1cbb      	adds	r3, r7, #2
 800993c:	881b      	ldrh	r3, [r3, #0]
 800993e:	68fa      	ldr	r2, [r7, #12]
 8009940:	4013      	ands	r3, r2
 8009942:	041a      	lsls	r2, r3, #16
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	43db      	mvns	r3, r3
 8009948:	1cb9      	adds	r1, r7, #2
 800994a:	8809      	ldrh	r1, [r1, #0]
 800994c:	400b      	ands	r3, r1
 800994e:	431a      	orrs	r2, r3
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	619a      	str	r2, [r3, #24]
}
 8009954:	46c0      	nop			; (mov r8, r8)
 8009956:	46bd      	mov	sp, r7
 8009958:	b004      	add	sp, #16
 800995a:	bd80      	pop	{r7, pc}

0800995c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b084      	sub	sp, #16
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8009964:	4b19      	ldr	r3, [pc, #100]	; (80099cc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	4a19      	ldr	r2, [pc, #100]	; (80099d0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800996a:	4013      	ands	r3, r2
 800996c:	0019      	movs	r1, r3
 800996e:	4b17      	ldr	r3, [pc, #92]	; (80099cc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8009970:	687a      	ldr	r2, [r7, #4]
 8009972:	430a      	orrs	r2, r1
 8009974:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009976:	687a      	ldr	r2, [r7, #4]
 8009978:	2380      	movs	r3, #128	; 0x80
 800997a:	009b      	lsls	r3, r3, #2
 800997c:	429a      	cmp	r2, r3
 800997e:	d11f      	bne.n	80099c0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8009980:	4b14      	ldr	r3, [pc, #80]	; (80099d4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8009982:	681a      	ldr	r2, [r3, #0]
 8009984:	0013      	movs	r3, r2
 8009986:	005b      	lsls	r3, r3, #1
 8009988:	189b      	adds	r3, r3, r2
 800998a:	005b      	lsls	r3, r3, #1
 800998c:	4912      	ldr	r1, [pc, #72]	; (80099d8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800998e:	0018      	movs	r0, r3
 8009990:	f7f6 fbdc 	bl	800014c <__udivsi3>
 8009994:	0003      	movs	r3, r0
 8009996:	3301      	adds	r3, #1
 8009998:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800999a:	e008      	b.n	80099ae <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d003      	beq.n	80099aa <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	3b01      	subs	r3, #1
 80099a6:	60fb      	str	r3, [r7, #12]
 80099a8:	e001      	b.n	80099ae <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80099aa:	2303      	movs	r3, #3
 80099ac:	e009      	b.n	80099c2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80099ae:	4b07      	ldr	r3, [pc, #28]	; (80099cc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80099b0:	695a      	ldr	r2, [r3, #20]
 80099b2:	2380      	movs	r3, #128	; 0x80
 80099b4:	00db      	lsls	r3, r3, #3
 80099b6:	401a      	ands	r2, r3
 80099b8:	2380      	movs	r3, #128	; 0x80
 80099ba:	00db      	lsls	r3, r3, #3
 80099bc:	429a      	cmp	r2, r3
 80099be:	d0ed      	beq.n	800999c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80099c0:	2300      	movs	r3, #0
}
 80099c2:	0018      	movs	r0, r3
 80099c4:	46bd      	mov	sp, r7
 80099c6:	b004      	add	sp, #16
 80099c8:	bd80      	pop	{r7, pc}
 80099ca:	46c0      	nop			; (mov r8, r8)
 80099cc:	40007000 	.word	0x40007000
 80099d0:	fffff9ff 	.word	0xfffff9ff
 80099d4:	200000a8 	.word	0x200000a8
 80099d8:	000f4240 	.word	0x000f4240

080099dc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80099e0:	4b03      	ldr	r3, [pc, #12]	; (80099f0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80099e2:	689a      	ldr	r2, [r3, #8]
 80099e4:	23e0      	movs	r3, #224	; 0xe0
 80099e6:	01db      	lsls	r3, r3, #7
 80099e8:	4013      	ands	r3, r2
}
 80099ea:	0018      	movs	r0, r3
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}
 80099f0:	40021000 	.word	0x40021000

080099f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b088      	sub	sp, #32
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d101      	bne.n	8009a06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009a02:	2301      	movs	r3, #1
 8009a04:	e2f3      	b.n	8009fee <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	4013      	ands	r3, r2
 8009a0e:	d100      	bne.n	8009a12 <HAL_RCC_OscConfig+0x1e>
 8009a10:	e07c      	b.n	8009b0c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009a12:	4bc3      	ldr	r3, [pc, #780]	; (8009d20 <HAL_RCC_OscConfig+0x32c>)
 8009a14:	689b      	ldr	r3, [r3, #8]
 8009a16:	2238      	movs	r2, #56	; 0x38
 8009a18:	4013      	ands	r3, r2
 8009a1a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009a1c:	4bc0      	ldr	r3, [pc, #768]	; (8009d20 <HAL_RCC_OscConfig+0x32c>)
 8009a1e:	68db      	ldr	r3, [r3, #12]
 8009a20:	2203      	movs	r2, #3
 8009a22:	4013      	ands	r3, r2
 8009a24:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8009a26:	69bb      	ldr	r3, [r7, #24]
 8009a28:	2b10      	cmp	r3, #16
 8009a2a:	d102      	bne.n	8009a32 <HAL_RCC_OscConfig+0x3e>
 8009a2c:	697b      	ldr	r3, [r7, #20]
 8009a2e:	2b03      	cmp	r3, #3
 8009a30:	d002      	beq.n	8009a38 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8009a32:	69bb      	ldr	r3, [r7, #24]
 8009a34:	2b08      	cmp	r3, #8
 8009a36:	d10b      	bne.n	8009a50 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a38:	4bb9      	ldr	r3, [pc, #740]	; (8009d20 <HAL_RCC_OscConfig+0x32c>)
 8009a3a:	681a      	ldr	r2, [r3, #0]
 8009a3c:	2380      	movs	r3, #128	; 0x80
 8009a3e:	029b      	lsls	r3, r3, #10
 8009a40:	4013      	ands	r3, r2
 8009a42:	d062      	beq.n	8009b0a <HAL_RCC_OscConfig+0x116>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	685b      	ldr	r3, [r3, #4]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d15e      	bne.n	8009b0a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	e2ce      	b.n	8009fee <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	685a      	ldr	r2, [r3, #4]
 8009a54:	2380      	movs	r3, #128	; 0x80
 8009a56:	025b      	lsls	r3, r3, #9
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	d107      	bne.n	8009a6c <HAL_RCC_OscConfig+0x78>
 8009a5c:	4bb0      	ldr	r3, [pc, #704]	; (8009d20 <HAL_RCC_OscConfig+0x32c>)
 8009a5e:	681a      	ldr	r2, [r3, #0]
 8009a60:	4baf      	ldr	r3, [pc, #700]	; (8009d20 <HAL_RCC_OscConfig+0x32c>)
 8009a62:	2180      	movs	r1, #128	; 0x80
 8009a64:	0249      	lsls	r1, r1, #9
 8009a66:	430a      	orrs	r2, r1
 8009a68:	601a      	str	r2, [r3, #0]
 8009a6a:	e020      	b.n	8009aae <HAL_RCC_OscConfig+0xba>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	685a      	ldr	r2, [r3, #4]
 8009a70:	23a0      	movs	r3, #160	; 0xa0
 8009a72:	02db      	lsls	r3, r3, #11
 8009a74:	429a      	cmp	r2, r3
 8009a76:	d10e      	bne.n	8009a96 <HAL_RCC_OscConfig+0xa2>
 8009a78:	4ba9      	ldr	r3, [pc, #676]	; (8009d20 <HAL_RCC_OscConfig+0x32c>)
 8009a7a:	681a      	ldr	r2, [r3, #0]
 8009a7c:	4ba8      	ldr	r3, [pc, #672]	; (8009d20 <HAL_RCC_OscConfig+0x32c>)
 8009a7e:	2180      	movs	r1, #128	; 0x80
 8009a80:	02c9      	lsls	r1, r1, #11
 8009a82:	430a      	orrs	r2, r1
 8009a84:	601a      	str	r2, [r3, #0]
 8009a86:	4ba6      	ldr	r3, [pc, #664]	; (8009d20 <HAL_RCC_OscConfig+0x32c>)
 8009a88:	681a      	ldr	r2, [r3, #0]
 8009a8a:	4ba5      	ldr	r3, [pc, #660]	; (8009d20 <HAL_RCC_OscConfig+0x32c>)
 8009a8c:	2180      	movs	r1, #128	; 0x80
 8009a8e:	0249      	lsls	r1, r1, #9
 8009a90:	430a      	orrs	r2, r1
 8009a92:	601a      	str	r2, [r3, #0]
 8009a94:	e00b      	b.n	8009aae <HAL_RCC_OscConfig+0xba>
 8009a96:	4ba2      	ldr	r3, [pc, #648]	; (8009d20 <HAL_RCC_OscConfig+0x32c>)
 8009a98:	681a      	ldr	r2, [r3, #0]
 8009a9a:	4ba1      	ldr	r3, [pc, #644]	; (8009d20 <HAL_RCC_OscConfig+0x32c>)
 8009a9c:	49a1      	ldr	r1, [pc, #644]	; (8009d24 <HAL_RCC_OscConfig+0x330>)
 8009a9e:	400a      	ands	r2, r1
 8009aa0:	601a      	str	r2, [r3, #0]
 8009aa2:	4b9f      	ldr	r3, [pc, #636]	; (8009d20 <HAL_RCC_OscConfig+0x32c>)
 8009aa4:	681a      	ldr	r2, [r3, #0]
 8009aa6:	4b9e      	ldr	r3, [pc, #632]	; (8009d20 <HAL_RCC_OscConfig+0x32c>)
 8009aa8:	499f      	ldr	r1, [pc, #636]	; (8009d28 <HAL_RCC_OscConfig+0x334>)
 8009aaa:	400a      	ands	r2, r1
 8009aac:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	685b      	ldr	r3, [r3, #4]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d014      	beq.n	8009ae0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ab6:	f7ff f98b 	bl	8008dd0 <HAL_GetTick>
 8009aba:	0003      	movs	r3, r0
 8009abc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009abe:	e008      	b.n	8009ad2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009ac0:	f7ff f986 	bl	8008dd0 <HAL_GetTick>
 8009ac4:	0002      	movs	r2, r0
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	1ad3      	subs	r3, r2, r3
 8009aca:	2b64      	cmp	r3, #100	; 0x64
 8009acc:	d901      	bls.n	8009ad2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8009ace:	2303      	movs	r3, #3
 8009ad0:	e28d      	b.n	8009fee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009ad2:	4b93      	ldr	r3, [pc, #588]	; (8009d20 <HAL_RCC_OscConfig+0x32c>)
 8009ad4:	681a      	ldr	r2, [r3, #0]
 8009ad6:	2380      	movs	r3, #128	; 0x80
 8009ad8:	029b      	lsls	r3, r3, #10
 8009ada:	4013      	ands	r3, r2
 8009adc:	d0f0      	beq.n	8009ac0 <HAL_RCC_OscConfig+0xcc>
 8009ade:	e015      	b.n	8009b0c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ae0:	f7ff f976 	bl	8008dd0 <HAL_GetTick>
 8009ae4:	0003      	movs	r3, r0
 8009ae6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009ae8:	e008      	b.n	8009afc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009aea:	f7ff f971 	bl	8008dd0 <HAL_GetTick>
 8009aee:	0002      	movs	r2, r0
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	1ad3      	subs	r3, r2, r3
 8009af4:	2b64      	cmp	r3, #100	; 0x64
 8009af6:	d901      	bls.n	8009afc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8009af8:	2303      	movs	r3, #3
 8009afa:	e278      	b.n	8009fee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009afc:	4b88      	ldr	r3, [pc, #544]	; (8009d20 <HAL_RCC_OscConfig+0x32c>)
 8009afe:	681a      	ldr	r2, [r3, #0]
 8009b00:	2380      	movs	r3, #128	; 0x80
 8009b02:	029b      	lsls	r3, r3, #10
 8009b04:	4013      	ands	r3, r2
 8009b06:	d1f0      	bne.n	8009aea <HAL_RCC_OscConfig+0xf6>
 8009b08:	e000      	b.n	8009b0c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009b0a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	2202      	movs	r2, #2
 8009b12:	4013      	ands	r3, r2
 8009b14:	d100      	bne.n	8009b18 <HAL_RCC_OscConfig+0x124>
 8009b16:	e099      	b.n	8009c4c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009b18:	4b81      	ldr	r3, [pc, #516]	; (8009d20 <HAL_RCC_OscConfig+0x32c>)
 8009b1a:	689b      	ldr	r3, [r3, #8]
 8009b1c:	2238      	movs	r2, #56	; 0x38
 8009b1e:	4013      	ands	r3, r2
 8009b20:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009b22:	4b7f      	ldr	r3, [pc, #508]	; (8009d20 <HAL_RCC_OscConfig+0x32c>)
 8009b24:	68db      	ldr	r3, [r3, #12]
 8009b26:	2203      	movs	r2, #3
 8009b28:	4013      	ands	r3, r2
 8009b2a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8009b2c:	69bb      	ldr	r3, [r7, #24]
 8009b2e:	2b10      	cmp	r3, #16
 8009b30:	d102      	bne.n	8009b38 <HAL_RCC_OscConfig+0x144>
 8009b32:	697b      	ldr	r3, [r7, #20]
 8009b34:	2b02      	cmp	r3, #2
 8009b36:	d002      	beq.n	8009b3e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8009b38:	69bb      	ldr	r3, [r7, #24]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d135      	bne.n	8009baa <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009b3e:	4b78      	ldr	r3, [pc, #480]	; (8009d20 <HAL_RCC_OscConfig+0x32c>)
 8009b40:	681a      	ldr	r2, [r3, #0]
 8009b42:	2380      	movs	r3, #128	; 0x80
 8009b44:	00db      	lsls	r3, r3, #3
 8009b46:	4013      	ands	r3, r2
 8009b48:	d005      	beq.n	8009b56 <HAL_RCC_OscConfig+0x162>
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	68db      	ldr	r3, [r3, #12]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d101      	bne.n	8009b56 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8009b52:	2301      	movs	r3, #1
 8009b54:	e24b      	b.n	8009fee <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b56:	4b72      	ldr	r3, [pc, #456]	; (8009d20 <HAL_RCC_OscConfig+0x32c>)
 8009b58:	685b      	ldr	r3, [r3, #4]
 8009b5a:	4a74      	ldr	r2, [pc, #464]	; (8009d2c <HAL_RCC_OscConfig+0x338>)
 8009b5c:	4013      	ands	r3, r2
 8009b5e:	0019      	movs	r1, r3
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	695b      	ldr	r3, [r3, #20]
 8009b64:	021a      	lsls	r2, r3, #8
 8009b66:	4b6e      	ldr	r3, [pc, #440]	; (8009d20 <HAL_RCC_OscConfig+0x32c>)
 8009b68:	430a      	orrs	r2, r1
 8009b6a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009b6c:	69bb      	ldr	r3, [r7, #24]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d112      	bne.n	8009b98 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8009b72:	4b6b      	ldr	r3, [pc, #428]	; (8009d20 <HAL_RCC_OscConfig+0x32c>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	4a6e      	ldr	r2, [pc, #440]	; (8009d30 <HAL_RCC_OscConfig+0x33c>)
 8009b78:	4013      	ands	r3, r2
 8009b7a:	0019      	movs	r1, r3
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	691a      	ldr	r2, [r3, #16]
 8009b80:	4b67      	ldr	r3, [pc, #412]	; (8009d20 <HAL_RCC_OscConfig+0x32c>)
 8009b82:	430a      	orrs	r2, r1
 8009b84:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8009b86:	4b66      	ldr	r3, [pc, #408]	; (8009d20 <HAL_RCC_OscConfig+0x32c>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	0adb      	lsrs	r3, r3, #11
 8009b8c:	2207      	movs	r2, #7
 8009b8e:	4013      	ands	r3, r2
 8009b90:	4a68      	ldr	r2, [pc, #416]	; (8009d34 <HAL_RCC_OscConfig+0x340>)
 8009b92:	40da      	lsrs	r2, r3
 8009b94:	4b68      	ldr	r3, [pc, #416]	; (8009d38 <HAL_RCC_OscConfig+0x344>)
 8009b96:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009b98:	4b68      	ldr	r3, [pc, #416]	; (8009d3c <HAL_RCC_OscConfig+0x348>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	0018      	movs	r0, r3
 8009b9e:	f7ff f8bb 	bl	8008d18 <HAL_InitTick>
 8009ba2:	1e03      	subs	r3, r0, #0
 8009ba4:	d051      	beq.n	8009c4a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	e221      	b.n	8009fee <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	68db      	ldr	r3, [r3, #12]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d030      	beq.n	8009c14 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8009bb2:	4b5b      	ldr	r3, [pc, #364]	; (8009d20 <HAL_RCC_OscConfig+0x32c>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4a5e      	ldr	r2, [pc, #376]	; (8009d30 <HAL_RCC_OscConfig+0x33c>)
 8009bb8:	4013      	ands	r3, r2
 8009bba:	0019      	movs	r1, r3
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	691a      	ldr	r2, [r3, #16]
 8009bc0:	4b57      	ldr	r3, [pc, #348]	; (8009d20 <HAL_RCC_OscConfig+0x32c>)
 8009bc2:	430a      	orrs	r2, r1
 8009bc4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8009bc6:	4b56      	ldr	r3, [pc, #344]	; (8009d20 <HAL_RCC_OscConfig+0x32c>)
 8009bc8:	681a      	ldr	r2, [r3, #0]
 8009bca:	4b55      	ldr	r3, [pc, #340]	; (8009d20 <HAL_RCC_OscConfig+0x32c>)
 8009bcc:	2180      	movs	r1, #128	; 0x80
 8009bce:	0049      	lsls	r1, r1, #1
 8009bd0:	430a      	orrs	r2, r1
 8009bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bd4:	f7ff f8fc 	bl	8008dd0 <HAL_GetTick>
 8009bd8:	0003      	movs	r3, r0
 8009bda:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009bdc:	e008      	b.n	8009bf0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009bde:	f7ff f8f7 	bl	8008dd0 <HAL_GetTick>
 8009be2:	0002      	movs	r2, r0
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	1ad3      	subs	r3, r2, r3
 8009be8:	2b02      	cmp	r3, #2
 8009bea:	d901      	bls.n	8009bf0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009bec:	2303      	movs	r3, #3
 8009bee:	e1fe      	b.n	8009fee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009bf0:	4b4b      	ldr	r3, [pc, #300]	; (8009d20 <HAL_RCC_OscConfig+0x32c>)
 8009bf2:	681a      	ldr	r2, [r3, #0]
 8009bf4:	2380      	movs	r3, #128	; 0x80
 8009bf6:	00db      	lsls	r3, r3, #3
 8009bf8:	4013      	ands	r3, r2
 8009bfa:	d0f0      	beq.n	8009bde <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009bfc:	4b48      	ldr	r3, [pc, #288]	; (8009d20 <HAL_RCC_OscConfig+0x32c>)
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	4a4a      	ldr	r2, [pc, #296]	; (8009d2c <HAL_RCC_OscConfig+0x338>)
 8009c02:	4013      	ands	r3, r2
 8009c04:	0019      	movs	r1, r3
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	695b      	ldr	r3, [r3, #20]
 8009c0a:	021a      	lsls	r2, r3, #8
 8009c0c:	4b44      	ldr	r3, [pc, #272]	; (8009d20 <HAL_RCC_OscConfig+0x32c>)
 8009c0e:	430a      	orrs	r2, r1
 8009c10:	605a      	str	r2, [r3, #4]
 8009c12:	e01b      	b.n	8009c4c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8009c14:	4b42      	ldr	r3, [pc, #264]	; (8009d20 <HAL_RCC_OscConfig+0x32c>)
 8009c16:	681a      	ldr	r2, [r3, #0]
 8009c18:	4b41      	ldr	r3, [pc, #260]	; (8009d20 <HAL_RCC_OscConfig+0x32c>)
 8009c1a:	4949      	ldr	r1, [pc, #292]	; (8009d40 <HAL_RCC_OscConfig+0x34c>)
 8009c1c:	400a      	ands	r2, r1
 8009c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c20:	f7ff f8d6 	bl	8008dd0 <HAL_GetTick>
 8009c24:	0003      	movs	r3, r0
 8009c26:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009c28:	e008      	b.n	8009c3c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009c2a:	f7ff f8d1 	bl	8008dd0 <HAL_GetTick>
 8009c2e:	0002      	movs	r2, r0
 8009c30:	693b      	ldr	r3, [r7, #16]
 8009c32:	1ad3      	subs	r3, r2, r3
 8009c34:	2b02      	cmp	r3, #2
 8009c36:	d901      	bls.n	8009c3c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009c38:	2303      	movs	r3, #3
 8009c3a:	e1d8      	b.n	8009fee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009c3c:	4b38      	ldr	r3, [pc, #224]	; (8009d20 <HAL_RCC_OscConfig+0x32c>)
 8009c3e:	681a      	ldr	r2, [r3, #0]
 8009c40:	2380      	movs	r3, #128	; 0x80
 8009c42:	00db      	lsls	r3, r3, #3
 8009c44:	4013      	ands	r3, r2
 8009c46:	d1f0      	bne.n	8009c2a <HAL_RCC_OscConfig+0x236>
 8009c48:	e000      	b.n	8009c4c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009c4a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	2208      	movs	r2, #8
 8009c52:	4013      	ands	r3, r2
 8009c54:	d047      	beq.n	8009ce6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8009c56:	4b32      	ldr	r3, [pc, #200]	; (8009d20 <HAL_RCC_OscConfig+0x32c>)
 8009c58:	689b      	ldr	r3, [r3, #8]
 8009c5a:	2238      	movs	r2, #56	; 0x38
 8009c5c:	4013      	ands	r3, r2
 8009c5e:	2b18      	cmp	r3, #24
 8009c60:	d10a      	bne.n	8009c78 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8009c62:	4b2f      	ldr	r3, [pc, #188]	; (8009d20 <HAL_RCC_OscConfig+0x32c>)
 8009c64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c66:	2202      	movs	r2, #2
 8009c68:	4013      	ands	r3, r2
 8009c6a:	d03c      	beq.n	8009ce6 <HAL_RCC_OscConfig+0x2f2>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	699b      	ldr	r3, [r3, #24]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d138      	bne.n	8009ce6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8009c74:	2301      	movs	r3, #1
 8009c76:	e1ba      	b.n	8009fee <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	699b      	ldr	r3, [r3, #24]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d019      	beq.n	8009cb4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8009c80:	4b27      	ldr	r3, [pc, #156]	; (8009d20 <HAL_RCC_OscConfig+0x32c>)
 8009c82:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009c84:	4b26      	ldr	r3, [pc, #152]	; (8009d20 <HAL_RCC_OscConfig+0x32c>)
 8009c86:	2101      	movs	r1, #1
 8009c88:	430a      	orrs	r2, r1
 8009c8a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c8c:	f7ff f8a0 	bl	8008dd0 <HAL_GetTick>
 8009c90:	0003      	movs	r3, r0
 8009c92:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009c94:	e008      	b.n	8009ca8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009c96:	f7ff f89b 	bl	8008dd0 <HAL_GetTick>
 8009c9a:	0002      	movs	r2, r0
 8009c9c:	693b      	ldr	r3, [r7, #16]
 8009c9e:	1ad3      	subs	r3, r2, r3
 8009ca0:	2b02      	cmp	r3, #2
 8009ca2:	d901      	bls.n	8009ca8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8009ca4:	2303      	movs	r3, #3
 8009ca6:	e1a2      	b.n	8009fee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009ca8:	4b1d      	ldr	r3, [pc, #116]	; (8009d20 <HAL_RCC_OscConfig+0x32c>)
 8009caa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009cac:	2202      	movs	r2, #2
 8009cae:	4013      	ands	r3, r2
 8009cb0:	d0f1      	beq.n	8009c96 <HAL_RCC_OscConfig+0x2a2>
 8009cb2:	e018      	b.n	8009ce6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8009cb4:	4b1a      	ldr	r3, [pc, #104]	; (8009d20 <HAL_RCC_OscConfig+0x32c>)
 8009cb6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009cb8:	4b19      	ldr	r3, [pc, #100]	; (8009d20 <HAL_RCC_OscConfig+0x32c>)
 8009cba:	2101      	movs	r1, #1
 8009cbc:	438a      	bics	r2, r1
 8009cbe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cc0:	f7ff f886 	bl	8008dd0 <HAL_GetTick>
 8009cc4:	0003      	movs	r3, r0
 8009cc6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009cc8:	e008      	b.n	8009cdc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009cca:	f7ff f881 	bl	8008dd0 <HAL_GetTick>
 8009cce:	0002      	movs	r2, r0
 8009cd0:	693b      	ldr	r3, [r7, #16]
 8009cd2:	1ad3      	subs	r3, r2, r3
 8009cd4:	2b02      	cmp	r3, #2
 8009cd6:	d901      	bls.n	8009cdc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8009cd8:	2303      	movs	r3, #3
 8009cda:	e188      	b.n	8009fee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009cdc:	4b10      	ldr	r3, [pc, #64]	; (8009d20 <HAL_RCC_OscConfig+0x32c>)
 8009cde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ce0:	2202      	movs	r2, #2
 8009ce2:	4013      	ands	r3, r2
 8009ce4:	d1f1      	bne.n	8009cca <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	2204      	movs	r2, #4
 8009cec:	4013      	ands	r3, r2
 8009cee:	d100      	bne.n	8009cf2 <HAL_RCC_OscConfig+0x2fe>
 8009cf0:	e0c6      	b.n	8009e80 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009cf2:	231f      	movs	r3, #31
 8009cf4:	18fb      	adds	r3, r7, r3
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8009cfa:	4b09      	ldr	r3, [pc, #36]	; (8009d20 <HAL_RCC_OscConfig+0x32c>)
 8009cfc:	689b      	ldr	r3, [r3, #8]
 8009cfe:	2238      	movs	r2, #56	; 0x38
 8009d00:	4013      	ands	r3, r2
 8009d02:	2b20      	cmp	r3, #32
 8009d04:	d11e      	bne.n	8009d44 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8009d06:	4b06      	ldr	r3, [pc, #24]	; (8009d20 <HAL_RCC_OscConfig+0x32c>)
 8009d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d0a:	2202      	movs	r2, #2
 8009d0c:	4013      	ands	r3, r2
 8009d0e:	d100      	bne.n	8009d12 <HAL_RCC_OscConfig+0x31e>
 8009d10:	e0b6      	b.n	8009e80 <HAL_RCC_OscConfig+0x48c>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	689b      	ldr	r3, [r3, #8]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d000      	beq.n	8009d1c <HAL_RCC_OscConfig+0x328>
 8009d1a:	e0b1      	b.n	8009e80 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	e166      	b.n	8009fee <HAL_RCC_OscConfig+0x5fa>
 8009d20:	40021000 	.word	0x40021000
 8009d24:	fffeffff 	.word	0xfffeffff
 8009d28:	fffbffff 	.word	0xfffbffff
 8009d2c:	ffff80ff 	.word	0xffff80ff
 8009d30:	ffffc7ff 	.word	0xffffc7ff
 8009d34:	00f42400 	.word	0x00f42400
 8009d38:	200000a8 	.word	0x200000a8
 8009d3c:	200000ac 	.word	0x200000ac
 8009d40:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009d44:	4bac      	ldr	r3, [pc, #688]	; (8009ff8 <HAL_RCC_OscConfig+0x604>)
 8009d46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009d48:	2380      	movs	r3, #128	; 0x80
 8009d4a:	055b      	lsls	r3, r3, #21
 8009d4c:	4013      	ands	r3, r2
 8009d4e:	d101      	bne.n	8009d54 <HAL_RCC_OscConfig+0x360>
 8009d50:	2301      	movs	r3, #1
 8009d52:	e000      	b.n	8009d56 <HAL_RCC_OscConfig+0x362>
 8009d54:	2300      	movs	r3, #0
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d011      	beq.n	8009d7e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8009d5a:	4ba7      	ldr	r3, [pc, #668]	; (8009ff8 <HAL_RCC_OscConfig+0x604>)
 8009d5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009d5e:	4ba6      	ldr	r3, [pc, #664]	; (8009ff8 <HAL_RCC_OscConfig+0x604>)
 8009d60:	2180      	movs	r1, #128	; 0x80
 8009d62:	0549      	lsls	r1, r1, #21
 8009d64:	430a      	orrs	r2, r1
 8009d66:	63da      	str	r2, [r3, #60]	; 0x3c
 8009d68:	4ba3      	ldr	r3, [pc, #652]	; (8009ff8 <HAL_RCC_OscConfig+0x604>)
 8009d6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009d6c:	2380      	movs	r3, #128	; 0x80
 8009d6e:	055b      	lsls	r3, r3, #21
 8009d70:	4013      	ands	r3, r2
 8009d72:	60fb      	str	r3, [r7, #12]
 8009d74:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8009d76:	231f      	movs	r3, #31
 8009d78:	18fb      	adds	r3, r7, r3
 8009d7a:	2201      	movs	r2, #1
 8009d7c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009d7e:	4b9f      	ldr	r3, [pc, #636]	; (8009ffc <HAL_RCC_OscConfig+0x608>)
 8009d80:	681a      	ldr	r2, [r3, #0]
 8009d82:	2380      	movs	r3, #128	; 0x80
 8009d84:	005b      	lsls	r3, r3, #1
 8009d86:	4013      	ands	r3, r2
 8009d88:	d11a      	bne.n	8009dc0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009d8a:	4b9c      	ldr	r3, [pc, #624]	; (8009ffc <HAL_RCC_OscConfig+0x608>)
 8009d8c:	681a      	ldr	r2, [r3, #0]
 8009d8e:	4b9b      	ldr	r3, [pc, #620]	; (8009ffc <HAL_RCC_OscConfig+0x608>)
 8009d90:	2180      	movs	r1, #128	; 0x80
 8009d92:	0049      	lsls	r1, r1, #1
 8009d94:	430a      	orrs	r2, r1
 8009d96:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8009d98:	f7ff f81a 	bl	8008dd0 <HAL_GetTick>
 8009d9c:	0003      	movs	r3, r0
 8009d9e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009da0:	e008      	b.n	8009db4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009da2:	f7ff f815 	bl	8008dd0 <HAL_GetTick>
 8009da6:	0002      	movs	r2, r0
 8009da8:	693b      	ldr	r3, [r7, #16]
 8009daa:	1ad3      	subs	r3, r2, r3
 8009dac:	2b02      	cmp	r3, #2
 8009dae:	d901      	bls.n	8009db4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8009db0:	2303      	movs	r3, #3
 8009db2:	e11c      	b.n	8009fee <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009db4:	4b91      	ldr	r3, [pc, #580]	; (8009ffc <HAL_RCC_OscConfig+0x608>)
 8009db6:	681a      	ldr	r2, [r3, #0]
 8009db8:	2380      	movs	r3, #128	; 0x80
 8009dba:	005b      	lsls	r3, r3, #1
 8009dbc:	4013      	ands	r3, r2
 8009dbe:	d0f0      	beq.n	8009da2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	689b      	ldr	r3, [r3, #8]
 8009dc4:	2b01      	cmp	r3, #1
 8009dc6:	d106      	bne.n	8009dd6 <HAL_RCC_OscConfig+0x3e2>
 8009dc8:	4b8b      	ldr	r3, [pc, #556]	; (8009ff8 <HAL_RCC_OscConfig+0x604>)
 8009dca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009dcc:	4b8a      	ldr	r3, [pc, #552]	; (8009ff8 <HAL_RCC_OscConfig+0x604>)
 8009dce:	2101      	movs	r1, #1
 8009dd0:	430a      	orrs	r2, r1
 8009dd2:	65da      	str	r2, [r3, #92]	; 0x5c
 8009dd4:	e01c      	b.n	8009e10 <HAL_RCC_OscConfig+0x41c>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	689b      	ldr	r3, [r3, #8]
 8009dda:	2b05      	cmp	r3, #5
 8009ddc:	d10c      	bne.n	8009df8 <HAL_RCC_OscConfig+0x404>
 8009dde:	4b86      	ldr	r3, [pc, #536]	; (8009ff8 <HAL_RCC_OscConfig+0x604>)
 8009de0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009de2:	4b85      	ldr	r3, [pc, #532]	; (8009ff8 <HAL_RCC_OscConfig+0x604>)
 8009de4:	2104      	movs	r1, #4
 8009de6:	430a      	orrs	r2, r1
 8009de8:	65da      	str	r2, [r3, #92]	; 0x5c
 8009dea:	4b83      	ldr	r3, [pc, #524]	; (8009ff8 <HAL_RCC_OscConfig+0x604>)
 8009dec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009dee:	4b82      	ldr	r3, [pc, #520]	; (8009ff8 <HAL_RCC_OscConfig+0x604>)
 8009df0:	2101      	movs	r1, #1
 8009df2:	430a      	orrs	r2, r1
 8009df4:	65da      	str	r2, [r3, #92]	; 0x5c
 8009df6:	e00b      	b.n	8009e10 <HAL_RCC_OscConfig+0x41c>
 8009df8:	4b7f      	ldr	r3, [pc, #508]	; (8009ff8 <HAL_RCC_OscConfig+0x604>)
 8009dfa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009dfc:	4b7e      	ldr	r3, [pc, #504]	; (8009ff8 <HAL_RCC_OscConfig+0x604>)
 8009dfe:	2101      	movs	r1, #1
 8009e00:	438a      	bics	r2, r1
 8009e02:	65da      	str	r2, [r3, #92]	; 0x5c
 8009e04:	4b7c      	ldr	r3, [pc, #496]	; (8009ff8 <HAL_RCC_OscConfig+0x604>)
 8009e06:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009e08:	4b7b      	ldr	r3, [pc, #492]	; (8009ff8 <HAL_RCC_OscConfig+0x604>)
 8009e0a:	2104      	movs	r1, #4
 8009e0c:	438a      	bics	r2, r1
 8009e0e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	689b      	ldr	r3, [r3, #8]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d014      	beq.n	8009e42 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e18:	f7fe ffda 	bl	8008dd0 <HAL_GetTick>
 8009e1c:	0003      	movs	r3, r0
 8009e1e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009e20:	e009      	b.n	8009e36 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009e22:	f7fe ffd5 	bl	8008dd0 <HAL_GetTick>
 8009e26:	0002      	movs	r2, r0
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	1ad3      	subs	r3, r2, r3
 8009e2c:	4a74      	ldr	r2, [pc, #464]	; (800a000 <HAL_RCC_OscConfig+0x60c>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d901      	bls.n	8009e36 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8009e32:	2303      	movs	r3, #3
 8009e34:	e0db      	b.n	8009fee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009e36:	4b70      	ldr	r3, [pc, #448]	; (8009ff8 <HAL_RCC_OscConfig+0x604>)
 8009e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e3a:	2202      	movs	r2, #2
 8009e3c:	4013      	ands	r3, r2
 8009e3e:	d0f0      	beq.n	8009e22 <HAL_RCC_OscConfig+0x42e>
 8009e40:	e013      	b.n	8009e6a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e42:	f7fe ffc5 	bl	8008dd0 <HAL_GetTick>
 8009e46:	0003      	movs	r3, r0
 8009e48:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009e4a:	e009      	b.n	8009e60 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009e4c:	f7fe ffc0 	bl	8008dd0 <HAL_GetTick>
 8009e50:	0002      	movs	r2, r0
 8009e52:	693b      	ldr	r3, [r7, #16]
 8009e54:	1ad3      	subs	r3, r2, r3
 8009e56:	4a6a      	ldr	r2, [pc, #424]	; (800a000 <HAL_RCC_OscConfig+0x60c>)
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	d901      	bls.n	8009e60 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8009e5c:	2303      	movs	r3, #3
 8009e5e:	e0c6      	b.n	8009fee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009e60:	4b65      	ldr	r3, [pc, #404]	; (8009ff8 <HAL_RCC_OscConfig+0x604>)
 8009e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e64:	2202      	movs	r2, #2
 8009e66:	4013      	ands	r3, r2
 8009e68:	d1f0      	bne.n	8009e4c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8009e6a:	231f      	movs	r3, #31
 8009e6c:	18fb      	adds	r3, r7, r3
 8009e6e:	781b      	ldrb	r3, [r3, #0]
 8009e70:	2b01      	cmp	r3, #1
 8009e72:	d105      	bne.n	8009e80 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8009e74:	4b60      	ldr	r3, [pc, #384]	; (8009ff8 <HAL_RCC_OscConfig+0x604>)
 8009e76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e78:	4b5f      	ldr	r3, [pc, #380]	; (8009ff8 <HAL_RCC_OscConfig+0x604>)
 8009e7a:	4962      	ldr	r1, [pc, #392]	; (800a004 <HAL_RCC_OscConfig+0x610>)
 8009e7c:	400a      	ands	r2, r1
 8009e7e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	69db      	ldr	r3, [r3, #28]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d100      	bne.n	8009e8a <HAL_RCC_OscConfig+0x496>
 8009e88:	e0b0      	b.n	8009fec <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009e8a:	4b5b      	ldr	r3, [pc, #364]	; (8009ff8 <HAL_RCC_OscConfig+0x604>)
 8009e8c:	689b      	ldr	r3, [r3, #8]
 8009e8e:	2238      	movs	r2, #56	; 0x38
 8009e90:	4013      	ands	r3, r2
 8009e92:	2b10      	cmp	r3, #16
 8009e94:	d100      	bne.n	8009e98 <HAL_RCC_OscConfig+0x4a4>
 8009e96:	e078      	b.n	8009f8a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	69db      	ldr	r3, [r3, #28]
 8009e9c:	2b02      	cmp	r3, #2
 8009e9e:	d153      	bne.n	8009f48 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009ea0:	4b55      	ldr	r3, [pc, #340]	; (8009ff8 <HAL_RCC_OscConfig+0x604>)
 8009ea2:	681a      	ldr	r2, [r3, #0]
 8009ea4:	4b54      	ldr	r3, [pc, #336]	; (8009ff8 <HAL_RCC_OscConfig+0x604>)
 8009ea6:	4958      	ldr	r1, [pc, #352]	; (800a008 <HAL_RCC_OscConfig+0x614>)
 8009ea8:	400a      	ands	r2, r1
 8009eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009eac:	f7fe ff90 	bl	8008dd0 <HAL_GetTick>
 8009eb0:	0003      	movs	r3, r0
 8009eb2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009eb4:	e008      	b.n	8009ec8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009eb6:	f7fe ff8b 	bl	8008dd0 <HAL_GetTick>
 8009eba:	0002      	movs	r2, r0
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	1ad3      	subs	r3, r2, r3
 8009ec0:	2b02      	cmp	r3, #2
 8009ec2:	d901      	bls.n	8009ec8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8009ec4:	2303      	movs	r3, #3
 8009ec6:	e092      	b.n	8009fee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009ec8:	4b4b      	ldr	r3, [pc, #300]	; (8009ff8 <HAL_RCC_OscConfig+0x604>)
 8009eca:	681a      	ldr	r2, [r3, #0]
 8009ecc:	2380      	movs	r3, #128	; 0x80
 8009ece:	049b      	lsls	r3, r3, #18
 8009ed0:	4013      	ands	r3, r2
 8009ed2:	d1f0      	bne.n	8009eb6 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009ed4:	4b48      	ldr	r3, [pc, #288]	; (8009ff8 <HAL_RCC_OscConfig+0x604>)
 8009ed6:	68db      	ldr	r3, [r3, #12]
 8009ed8:	4a4c      	ldr	r2, [pc, #304]	; (800a00c <HAL_RCC_OscConfig+0x618>)
 8009eda:	4013      	ands	r3, r2
 8009edc:	0019      	movs	r1, r3
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6a1a      	ldr	r2, [r3, #32]
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ee6:	431a      	orrs	r2, r3
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eec:	021b      	lsls	r3, r3, #8
 8009eee:	431a      	orrs	r2, r3
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ef4:	431a      	orrs	r2, r3
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009efa:	431a      	orrs	r2, r3
 8009efc:	4b3e      	ldr	r3, [pc, #248]	; (8009ff8 <HAL_RCC_OscConfig+0x604>)
 8009efe:	430a      	orrs	r2, r1
 8009f00:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009f02:	4b3d      	ldr	r3, [pc, #244]	; (8009ff8 <HAL_RCC_OscConfig+0x604>)
 8009f04:	681a      	ldr	r2, [r3, #0]
 8009f06:	4b3c      	ldr	r3, [pc, #240]	; (8009ff8 <HAL_RCC_OscConfig+0x604>)
 8009f08:	2180      	movs	r1, #128	; 0x80
 8009f0a:	0449      	lsls	r1, r1, #17
 8009f0c:	430a      	orrs	r2, r1
 8009f0e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8009f10:	4b39      	ldr	r3, [pc, #228]	; (8009ff8 <HAL_RCC_OscConfig+0x604>)
 8009f12:	68da      	ldr	r2, [r3, #12]
 8009f14:	4b38      	ldr	r3, [pc, #224]	; (8009ff8 <HAL_RCC_OscConfig+0x604>)
 8009f16:	2180      	movs	r1, #128	; 0x80
 8009f18:	0549      	lsls	r1, r1, #21
 8009f1a:	430a      	orrs	r2, r1
 8009f1c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f1e:	f7fe ff57 	bl	8008dd0 <HAL_GetTick>
 8009f22:	0003      	movs	r3, r0
 8009f24:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009f26:	e008      	b.n	8009f3a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f28:	f7fe ff52 	bl	8008dd0 <HAL_GetTick>
 8009f2c:	0002      	movs	r2, r0
 8009f2e:	693b      	ldr	r3, [r7, #16]
 8009f30:	1ad3      	subs	r3, r2, r3
 8009f32:	2b02      	cmp	r3, #2
 8009f34:	d901      	bls.n	8009f3a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8009f36:	2303      	movs	r3, #3
 8009f38:	e059      	b.n	8009fee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009f3a:	4b2f      	ldr	r3, [pc, #188]	; (8009ff8 <HAL_RCC_OscConfig+0x604>)
 8009f3c:	681a      	ldr	r2, [r3, #0]
 8009f3e:	2380      	movs	r3, #128	; 0x80
 8009f40:	049b      	lsls	r3, r3, #18
 8009f42:	4013      	ands	r3, r2
 8009f44:	d0f0      	beq.n	8009f28 <HAL_RCC_OscConfig+0x534>
 8009f46:	e051      	b.n	8009fec <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009f48:	4b2b      	ldr	r3, [pc, #172]	; (8009ff8 <HAL_RCC_OscConfig+0x604>)
 8009f4a:	681a      	ldr	r2, [r3, #0]
 8009f4c:	4b2a      	ldr	r3, [pc, #168]	; (8009ff8 <HAL_RCC_OscConfig+0x604>)
 8009f4e:	492e      	ldr	r1, [pc, #184]	; (800a008 <HAL_RCC_OscConfig+0x614>)
 8009f50:	400a      	ands	r2, r1
 8009f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f54:	f7fe ff3c 	bl	8008dd0 <HAL_GetTick>
 8009f58:	0003      	movs	r3, r0
 8009f5a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009f5c:	e008      	b.n	8009f70 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f5e:	f7fe ff37 	bl	8008dd0 <HAL_GetTick>
 8009f62:	0002      	movs	r2, r0
 8009f64:	693b      	ldr	r3, [r7, #16]
 8009f66:	1ad3      	subs	r3, r2, r3
 8009f68:	2b02      	cmp	r3, #2
 8009f6a:	d901      	bls.n	8009f70 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8009f6c:	2303      	movs	r3, #3
 8009f6e:	e03e      	b.n	8009fee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009f70:	4b21      	ldr	r3, [pc, #132]	; (8009ff8 <HAL_RCC_OscConfig+0x604>)
 8009f72:	681a      	ldr	r2, [r3, #0]
 8009f74:	2380      	movs	r3, #128	; 0x80
 8009f76:	049b      	lsls	r3, r3, #18
 8009f78:	4013      	ands	r3, r2
 8009f7a:	d1f0      	bne.n	8009f5e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8009f7c:	4b1e      	ldr	r3, [pc, #120]	; (8009ff8 <HAL_RCC_OscConfig+0x604>)
 8009f7e:	68da      	ldr	r2, [r3, #12]
 8009f80:	4b1d      	ldr	r3, [pc, #116]	; (8009ff8 <HAL_RCC_OscConfig+0x604>)
 8009f82:	4923      	ldr	r1, [pc, #140]	; (800a010 <HAL_RCC_OscConfig+0x61c>)
 8009f84:	400a      	ands	r2, r1
 8009f86:	60da      	str	r2, [r3, #12]
 8009f88:	e030      	b.n	8009fec <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	69db      	ldr	r3, [r3, #28]
 8009f8e:	2b01      	cmp	r3, #1
 8009f90:	d101      	bne.n	8009f96 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8009f92:	2301      	movs	r3, #1
 8009f94:	e02b      	b.n	8009fee <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8009f96:	4b18      	ldr	r3, [pc, #96]	; (8009ff8 <HAL_RCC_OscConfig+0x604>)
 8009f98:	68db      	ldr	r3, [r3, #12]
 8009f9a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	2203      	movs	r2, #3
 8009fa0:	401a      	ands	r2, r3
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6a1b      	ldr	r3, [r3, #32]
 8009fa6:	429a      	cmp	r2, r3
 8009fa8:	d11e      	bne.n	8009fe8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	2270      	movs	r2, #112	; 0x70
 8009fae:	401a      	ands	r2, r3
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009fb4:	429a      	cmp	r2, r3
 8009fb6:	d117      	bne.n	8009fe8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009fb8:	697a      	ldr	r2, [r7, #20]
 8009fba:	23fe      	movs	r3, #254	; 0xfe
 8009fbc:	01db      	lsls	r3, r3, #7
 8009fbe:	401a      	ands	r2, r3
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fc4:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d10e      	bne.n	8009fe8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009fca:	697a      	ldr	r2, [r7, #20]
 8009fcc:	23f8      	movs	r3, #248	; 0xf8
 8009fce:	039b      	lsls	r3, r3, #14
 8009fd0:	401a      	ands	r2, r3
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009fd6:	429a      	cmp	r2, r3
 8009fd8:	d106      	bne.n	8009fe8 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	0f5b      	lsrs	r3, r3, #29
 8009fde:	075a      	lsls	r2, r3, #29
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	d001      	beq.n	8009fec <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8009fe8:	2301      	movs	r3, #1
 8009fea:	e000      	b.n	8009fee <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8009fec:	2300      	movs	r3, #0
}
 8009fee:	0018      	movs	r0, r3
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	b008      	add	sp, #32
 8009ff4:	bd80      	pop	{r7, pc}
 8009ff6:	46c0      	nop			; (mov r8, r8)
 8009ff8:	40021000 	.word	0x40021000
 8009ffc:	40007000 	.word	0x40007000
 800a000:	00001388 	.word	0x00001388
 800a004:	efffffff 	.word	0xefffffff
 800a008:	feffffff 	.word	0xfeffffff
 800a00c:	1fc1808c 	.word	0x1fc1808c
 800a010:	effefffc 	.word	0xeffefffc

0800a014 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b084      	sub	sp, #16
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
 800a01c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d101      	bne.n	800a028 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a024:	2301      	movs	r3, #1
 800a026:	e0e9      	b.n	800a1fc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a028:	4b76      	ldr	r3, [pc, #472]	; (800a204 <HAL_RCC_ClockConfig+0x1f0>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	2207      	movs	r2, #7
 800a02e:	4013      	ands	r3, r2
 800a030:	683a      	ldr	r2, [r7, #0]
 800a032:	429a      	cmp	r2, r3
 800a034:	d91e      	bls.n	800a074 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a036:	4b73      	ldr	r3, [pc, #460]	; (800a204 <HAL_RCC_ClockConfig+0x1f0>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	2207      	movs	r2, #7
 800a03c:	4393      	bics	r3, r2
 800a03e:	0019      	movs	r1, r3
 800a040:	4b70      	ldr	r3, [pc, #448]	; (800a204 <HAL_RCC_ClockConfig+0x1f0>)
 800a042:	683a      	ldr	r2, [r7, #0]
 800a044:	430a      	orrs	r2, r1
 800a046:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a048:	f7fe fec2 	bl	8008dd0 <HAL_GetTick>
 800a04c:	0003      	movs	r3, r0
 800a04e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a050:	e009      	b.n	800a066 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a052:	f7fe febd 	bl	8008dd0 <HAL_GetTick>
 800a056:	0002      	movs	r2, r0
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	1ad3      	subs	r3, r2, r3
 800a05c:	4a6a      	ldr	r2, [pc, #424]	; (800a208 <HAL_RCC_ClockConfig+0x1f4>)
 800a05e:	4293      	cmp	r3, r2
 800a060:	d901      	bls.n	800a066 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800a062:	2303      	movs	r3, #3
 800a064:	e0ca      	b.n	800a1fc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a066:	4b67      	ldr	r3, [pc, #412]	; (800a204 <HAL_RCC_ClockConfig+0x1f0>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	2207      	movs	r2, #7
 800a06c:	4013      	ands	r3, r2
 800a06e:	683a      	ldr	r2, [r7, #0]
 800a070:	429a      	cmp	r2, r3
 800a072:	d1ee      	bne.n	800a052 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	2202      	movs	r2, #2
 800a07a:	4013      	ands	r3, r2
 800a07c:	d015      	beq.n	800a0aa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	2204      	movs	r2, #4
 800a084:	4013      	ands	r3, r2
 800a086:	d006      	beq.n	800a096 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800a088:	4b60      	ldr	r3, [pc, #384]	; (800a20c <HAL_RCC_ClockConfig+0x1f8>)
 800a08a:	689a      	ldr	r2, [r3, #8]
 800a08c:	4b5f      	ldr	r3, [pc, #380]	; (800a20c <HAL_RCC_ClockConfig+0x1f8>)
 800a08e:	21e0      	movs	r1, #224	; 0xe0
 800a090:	01c9      	lsls	r1, r1, #7
 800a092:	430a      	orrs	r2, r1
 800a094:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a096:	4b5d      	ldr	r3, [pc, #372]	; (800a20c <HAL_RCC_ClockConfig+0x1f8>)
 800a098:	689b      	ldr	r3, [r3, #8]
 800a09a:	4a5d      	ldr	r2, [pc, #372]	; (800a210 <HAL_RCC_ClockConfig+0x1fc>)
 800a09c:	4013      	ands	r3, r2
 800a09e:	0019      	movs	r1, r3
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	689a      	ldr	r2, [r3, #8]
 800a0a4:	4b59      	ldr	r3, [pc, #356]	; (800a20c <HAL_RCC_ClockConfig+0x1f8>)
 800a0a6:	430a      	orrs	r2, r1
 800a0a8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	2201      	movs	r2, #1
 800a0b0:	4013      	ands	r3, r2
 800a0b2:	d057      	beq.n	800a164 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	685b      	ldr	r3, [r3, #4]
 800a0b8:	2b01      	cmp	r3, #1
 800a0ba:	d107      	bne.n	800a0cc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a0bc:	4b53      	ldr	r3, [pc, #332]	; (800a20c <HAL_RCC_ClockConfig+0x1f8>)
 800a0be:	681a      	ldr	r2, [r3, #0]
 800a0c0:	2380      	movs	r3, #128	; 0x80
 800a0c2:	029b      	lsls	r3, r3, #10
 800a0c4:	4013      	ands	r3, r2
 800a0c6:	d12b      	bne.n	800a120 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	e097      	b.n	800a1fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	685b      	ldr	r3, [r3, #4]
 800a0d0:	2b02      	cmp	r3, #2
 800a0d2:	d107      	bne.n	800a0e4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a0d4:	4b4d      	ldr	r3, [pc, #308]	; (800a20c <HAL_RCC_ClockConfig+0x1f8>)
 800a0d6:	681a      	ldr	r2, [r3, #0]
 800a0d8:	2380      	movs	r3, #128	; 0x80
 800a0da:	049b      	lsls	r3, r3, #18
 800a0dc:	4013      	ands	r3, r2
 800a0de:	d11f      	bne.n	800a120 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	e08b      	b.n	800a1fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	685b      	ldr	r3, [r3, #4]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d107      	bne.n	800a0fc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a0ec:	4b47      	ldr	r3, [pc, #284]	; (800a20c <HAL_RCC_ClockConfig+0x1f8>)
 800a0ee:	681a      	ldr	r2, [r3, #0]
 800a0f0:	2380      	movs	r3, #128	; 0x80
 800a0f2:	00db      	lsls	r3, r3, #3
 800a0f4:	4013      	ands	r3, r2
 800a0f6:	d113      	bne.n	800a120 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	e07f      	b.n	800a1fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	2b03      	cmp	r3, #3
 800a102:	d106      	bne.n	800a112 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a104:	4b41      	ldr	r3, [pc, #260]	; (800a20c <HAL_RCC_ClockConfig+0x1f8>)
 800a106:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a108:	2202      	movs	r2, #2
 800a10a:	4013      	ands	r3, r2
 800a10c:	d108      	bne.n	800a120 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a10e:	2301      	movs	r3, #1
 800a110:	e074      	b.n	800a1fc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a112:	4b3e      	ldr	r3, [pc, #248]	; (800a20c <HAL_RCC_ClockConfig+0x1f8>)
 800a114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a116:	2202      	movs	r2, #2
 800a118:	4013      	ands	r3, r2
 800a11a:	d101      	bne.n	800a120 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a11c:	2301      	movs	r3, #1
 800a11e:	e06d      	b.n	800a1fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a120:	4b3a      	ldr	r3, [pc, #232]	; (800a20c <HAL_RCC_ClockConfig+0x1f8>)
 800a122:	689b      	ldr	r3, [r3, #8]
 800a124:	2207      	movs	r2, #7
 800a126:	4393      	bics	r3, r2
 800a128:	0019      	movs	r1, r3
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	685a      	ldr	r2, [r3, #4]
 800a12e:	4b37      	ldr	r3, [pc, #220]	; (800a20c <HAL_RCC_ClockConfig+0x1f8>)
 800a130:	430a      	orrs	r2, r1
 800a132:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a134:	f7fe fe4c 	bl	8008dd0 <HAL_GetTick>
 800a138:	0003      	movs	r3, r0
 800a13a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a13c:	e009      	b.n	800a152 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a13e:	f7fe fe47 	bl	8008dd0 <HAL_GetTick>
 800a142:	0002      	movs	r2, r0
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	1ad3      	subs	r3, r2, r3
 800a148:	4a2f      	ldr	r2, [pc, #188]	; (800a208 <HAL_RCC_ClockConfig+0x1f4>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d901      	bls.n	800a152 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800a14e:	2303      	movs	r3, #3
 800a150:	e054      	b.n	800a1fc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a152:	4b2e      	ldr	r3, [pc, #184]	; (800a20c <HAL_RCC_ClockConfig+0x1f8>)
 800a154:	689b      	ldr	r3, [r3, #8]
 800a156:	2238      	movs	r2, #56	; 0x38
 800a158:	401a      	ands	r2, r3
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	685b      	ldr	r3, [r3, #4]
 800a15e:	00db      	lsls	r3, r3, #3
 800a160:	429a      	cmp	r2, r3
 800a162:	d1ec      	bne.n	800a13e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a164:	4b27      	ldr	r3, [pc, #156]	; (800a204 <HAL_RCC_ClockConfig+0x1f0>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	2207      	movs	r2, #7
 800a16a:	4013      	ands	r3, r2
 800a16c:	683a      	ldr	r2, [r7, #0]
 800a16e:	429a      	cmp	r2, r3
 800a170:	d21e      	bcs.n	800a1b0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a172:	4b24      	ldr	r3, [pc, #144]	; (800a204 <HAL_RCC_ClockConfig+0x1f0>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	2207      	movs	r2, #7
 800a178:	4393      	bics	r3, r2
 800a17a:	0019      	movs	r1, r3
 800a17c:	4b21      	ldr	r3, [pc, #132]	; (800a204 <HAL_RCC_ClockConfig+0x1f0>)
 800a17e:	683a      	ldr	r2, [r7, #0]
 800a180:	430a      	orrs	r2, r1
 800a182:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a184:	f7fe fe24 	bl	8008dd0 <HAL_GetTick>
 800a188:	0003      	movs	r3, r0
 800a18a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a18c:	e009      	b.n	800a1a2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a18e:	f7fe fe1f 	bl	8008dd0 <HAL_GetTick>
 800a192:	0002      	movs	r2, r0
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	1ad3      	subs	r3, r2, r3
 800a198:	4a1b      	ldr	r2, [pc, #108]	; (800a208 <HAL_RCC_ClockConfig+0x1f4>)
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d901      	bls.n	800a1a2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800a19e:	2303      	movs	r3, #3
 800a1a0:	e02c      	b.n	800a1fc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a1a2:	4b18      	ldr	r3, [pc, #96]	; (800a204 <HAL_RCC_ClockConfig+0x1f0>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	2207      	movs	r2, #7
 800a1a8:	4013      	ands	r3, r2
 800a1aa:	683a      	ldr	r2, [r7, #0]
 800a1ac:	429a      	cmp	r2, r3
 800a1ae:	d1ee      	bne.n	800a18e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	2204      	movs	r2, #4
 800a1b6:	4013      	ands	r3, r2
 800a1b8:	d009      	beq.n	800a1ce <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800a1ba:	4b14      	ldr	r3, [pc, #80]	; (800a20c <HAL_RCC_ClockConfig+0x1f8>)
 800a1bc:	689b      	ldr	r3, [r3, #8]
 800a1be:	4a15      	ldr	r2, [pc, #84]	; (800a214 <HAL_RCC_ClockConfig+0x200>)
 800a1c0:	4013      	ands	r3, r2
 800a1c2:	0019      	movs	r1, r3
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	68da      	ldr	r2, [r3, #12]
 800a1c8:	4b10      	ldr	r3, [pc, #64]	; (800a20c <HAL_RCC_ClockConfig+0x1f8>)
 800a1ca:	430a      	orrs	r2, r1
 800a1cc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800a1ce:	f000 f829 	bl	800a224 <HAL_RCC_GetSysClockFreq>
 800a1d2:	0001      	movs	r1, r0
 800a1d4:	4b0d      	ldr	r3, [pc, #52]	; (800a20c <HAL_RCC_ClockConfig+0x1f8>)
 800a1d6:	689b      	ldr	r3, [r3, #8]
 800a1d8:	0a1b      	lsrs	r3, r3, #8
 800a1da:	220f      	movs	r2, #15
 800a1dc:	401a      	ands	r2, r3
 800a1de:	4b0e      	ldr	r3, [pc, #56]	; (800a218 <HAL_RCC_ClockConfig+0x204>)
 800a1e0:	0092      	lsls	r2, r2, #2
 800a1e2:	58d3      	ldr	r3, [r2, r3]
 800a1e4:	221f      	movs	r2, #31
 800a1e6:	4013      	ands	r3, r2
 800a1e8:	000a      	movs	r2, r1
 800a1ea:	40da      	lsrs	r2, r3
 800a1ec:	4b0b      	ldr	r3, [pc, #44]	; (800a21c <HAL_RCC_ClockConfig+0x208>)
 800a1ee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800a1f0:	4b0b      	ldr	r3, [pc, #44]	; (800a220 <HAL_RCC_ClockConfig+0x20c>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	0018      	movs	r0, r3
 800a1f6:	f7fe fd8f 	bl	8008d18 <HAL_InitTick>
 800a1fa:	0003      	movs	r3, r0
}
 800a1fc:	0018      	movs	r0, r3
 800a1fe:	46bd      	mov	sp, r7
 800a200:	b004      	add	sp, #16
 800a202:	bd80      	pop	{r7, pc}
 800a204:	40022000 	.word	0x40022000
 800a208:	00001388 	.word	0x00001388
 800a20c:	40021000 	.word	0x40021000
 800a210:	fffff0ff 	.word	0xfffff0ff
 800a214:	ffff8fff 	.word	0xffff8fff
 800a218:	08012f80 	.word	0x08012f80
 800a21c:	200000a8 	.word	0x200000a8
 800a220:	200000ac 	.word	0x200000ac

0800a224 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b086      	sub	sp, #24
 800a228:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a22a:	4b3c      	ldr	r3, [pc, #240]	; (800a31c <HAL_RCC_GetSysClockFreq+0xf8>)
 800a22c:	689b      	ldr	r3, [r3, #8]
 800a22e:	2238      	movs	r2, #56	; 0x38
 800a230:	4013      	ands	r3, r2
 800a232:	d10f      	bne.n	800a254 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800a234:	4b39      	ldr	r3, [pc, #228]	; (800a31c <HAL_RCC_GetSysClockFreq+0xf8>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	0adb      	lsrs	r3, r3, #11
 800a23a:	2207      	movs	r2, #7
 800a23c:	4013      	ands	r3, r2
 800a23e:	2201      	movs	r2, #1
 800a240:	409a      	lsls	r2, r3
 800a242:	0013      	movs	r3, r2
 800a244:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800a246:	6839      	ldr	r1, [r7, #0]
 800a248:	4835      	ldr	r0, [pc, #212]	; (800a320 <HAL_RCC_GetSysClockFreq+0xfc>)
 800a24a:	f7f5 ff7f 	bl	800014c <__udivsi3>
 800a24e:	0003      	movs	r3, r0
 800a250:	613b      	str	r3, [r7, #16]
 800a252:	e05d      	b.n	800a310 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a254:	4b31      	ldr	r3, [pc, #196]	; (800a31c <HAL_RCC_GetSysClockFreq+0xf8>)
 800a256:	689b      	ldr	r3, [r3, #8]
 800a258:	2238      	movs	r2, #56	; 0x38
 800a25a:	4013      	ands	r3, r2
 800a25c:	2b08      	cmp	r3, #8
 800a25e:	d102      	bne.n	800a266 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a260:	4b30      	ldr	r3, [pc, #192]	; (800a324 <HAL_RCC_GetSysClockFreq+0x100>)
 800a262:	613b      	str	r3, [r7, #16]
 800a264:	e054      	b.n	800a310 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a266:	4b2d      	ldr	r3, [pc, #180]	; (800a31c <HAL_RCC_GetSysClockFreq+0xf8>)
 800a268:	689b      	ldr	r3, [r3, #8]
 800a26a:	2238      	movs	r2, #56	; 0x38
 800a26c:	4013      	ands	r3, r2
 800a26e:	2b10      	cmp	r3, #16
 800a270:	d138      	bne.n	800a2e4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800a272:	4b2a      	ldr	r3, [pc, #168]	; (800a31c <HAL_RCC_GetSysClockFreq+0xf8>)
 800a274:	68db      	ldr	r3, [r3, #12]
 800a276:	2203      	movs	r2, #3
 800a278:	4013      	ands	r3, r2
 800a27a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a27c:	4b27      	ldr	r3, [pc, #156]	; (800a31c <HAL_RCC_GetSysClockFreq+0xf8>)
 800a27e:	68db      	ldr	r3, [r3, #12]
 800a280:	091b      	lsrs	r3, r3, #4
 800a282:	2207      	movs	r2, #7
 800a284:	4013      	ands	r3, r2
 800a286:	3301      	adds	r3, #1
 800a288:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	2b03      	cmp	r3, #3
 800a28e:	d10d      	bne.n	800a2ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a290:	68b9      	ldr	r1, [r7, #8]
 800a292:	4824      	ldr	r0, [pc, #144]	; (800a324 <HAL_RCC_GetSysClockFreq+0x100>)
 800a294:	f7f5 ff5a 	bl	800014c <__udivsi3>
 800a298:	0003      	movs	r3, r0
 800a29a:	0019      	movs	r1, r3
 800a29c:	4b1f      	ldr	r3, [pc, #124]	; (800a31c <HAL_RCC_GetSysClockFreq+0xf8>)
 800a29e:	68db      	ldr	r3, [r3, #12]
 800a2a0:	0a1b      	lsrs	r3, r3, #8
 800a2a2:	227f      	movs	r2, #127	; 0x7f
 800a2a4:	4013      	ands	r3, r2
 800a2a6:	434b      	muls	r3, r1
 800a2a8:	617b      	str	r3, [r7, #20]
        break;
 800a2aa:	e00d      	b.n	800a2c8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800a2ac:	68b9      	ldr	r1, [r7, #8]
 800a2ae:	481c      	ldr	r0, [pc, #112]	; (800a320 <HAL_RCC_GetSysClockFreq+0xfc>)
 800a2b0:	f7f5 ff4c 	bl	800014c <__udivsi3>
 800a2b4:	0003      	movs	r3, r0
 800a2b6:	0019      	movs	r1, r3
 800a2b8:	4b18      	ldr	r3, [pc, #96]	; (800a31c <HAL_RCC_GetSysClockFreq+0xf8>)
 800a2ba:	68db      	ldr	r3, [r3, #12]
 800a2bc:	0a1b      	lsrs	r3, r3, #8
 800a2be:	227f      	movs	r2, #127	; 0x7f
 800a2c0:	4013      	ands	r3, r2
 800a2c2:	434b      	muls	r3, r1
 800a2c4:	617b      	str	r3, [r7, #20]
        break;
 800a2c6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800a2c8:	4b14      	ldr	r3, [pc, #80]	; (800a31c <HAL_RCC_GetSysClockFreq+0xf8>)
 800a2ca:	68db      	ldr	r3, [r3, #12]
 800a2cc:	0f5b      	lsrs	r3, r3, #29
 800a2ce:	2207      	movs	r2, #7
 800a2d0:	4013      	ands	r3, r2
 800a2d2:	3301      	adds	r3, #1
 800a2d4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800a2d6:	6879      	ldr	r1, [r7, #4]
 800a2d8:	6978      	ldr	r0, [r7, #20]
 800a2da:	f7f5 ff37 	bl	800014c <__udivsi3>
 800a2de:	0003      	movs	r3, r0
 800a2e0:	613b      	str	r3, [r7, #16]
 800a2e2:	e015      	b.n	800a310 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800a2e4:	4b0d      	ldr	r3, [pc, #52]	; (800a31c <HAL_RCC_GetSysClockFreq+0xf8>)
 800a2e6:	689b      	ldr	r3, [r3, #8]
 800a2e8:	2238      	movs	r2, #56	; 0x38
 800a2ea:	4013      	ands	r3, r2
 800a2ec:	2b20      	cmp	r3, #32
 800a2ee:	d103      	bne.n	800a2f8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800a2f0:	2380      	movs	r3, #128	; 0x80
 800a2f2:	021b      	lsls	r3, r3, #8
 800a2f4:	613b      	str	r3, [r7, #16]
 800a2f6:	e00b      	b.n	800a310 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800a2f8:	4b08      	ldr	r3, [pc, #32]	; (800a31c <HAL_RCC_GetSysClockFreq+0xf8>)
 800a2fa:	689b      	ldr	r3, [r3, #8]
 800a2fc:	2238      	movs	r2, #56	; 0x38
 800a2fe:	4013      	ands	r3, r2
 800a300:	2b18      	cmp	r3, #24
 800a302:	d103      	bne.n	800a30c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800a304:	23fa      	movs	r3, #250	; 0xfa
 800a306:	01db      	lsls	r3, r3, #7
 800a308:	613b      	str	r3, [r7, #16]
 800a30a:	e001      	b.n	800a310 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800a30c:	2300      	movs	r3, #0
 800a30e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800a310:	693b      	ldr	r3, [r7, #16]
}
 800a312:	0018      	movs	r0, r3
 800a314:	46bd      	mov	sp, r7
 800a316:	b006      	add	sp, #24
 800a318:	bd80      	pop	{r7, pc}
 800a31a:	46c0      	nop			; (mov r8, r8)
 800a31c:	40021000 	.word	0x40021000
 800a320:	00f42400 	.word	0x00f42400
 800a324:	007a1200 	.word	0x007a1200

0800a328 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a32c:	4b02      	ldr	r3, [pc, #8]	; (800a338 <HAL_RCC_GetHCLKFreq+0x10>)
 800a32e:	681b      	ldr	r3, [r3, #0]
}
 800a330:	0018      	movs	r0, r3
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}
 800a336:	46c0      	nop			; (mov r8, r8)
 800a338:	200000a8 	.word	0x200000a8

0800a33c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a33c:	b5b0      	push	{r4, r5, r7, lr}
 800a33e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800a340:	f7ff fff2 	bl	800a328 <HAL_RCC_GetHCLKFreq>
 800a344:	0004      	movs	r4, r0
 800a346:	f7ff fb49 	bl	80099dc <LL_RCC_GetAPB1Prescaler>
 800a34a:	0003      	movs	r3, r0
 800a34c:	0b1a      	lsrs	r2, r3, #12
 800a34e:	4b05      	ldr	r3, [pc, #20]	; (800a364 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a350:	0092      	lsls	r2, r2, #2
 800a352:	58d3      	ldr	r3, [r2, r3]
 800a354:	221f      	movs	r2, #31
 800a356:	4013      	ands	r3, r2
 800a358:	40dc      	lsrs	r4, r3
 800a35a:	0023      	movs	r3, r4
}
 800a35c:	0018      	movs	r0, r3
 800a35e:	46bd      	mov	sp, r7
 800a360:	bdb0      	pop	{r4, r5, r7, pc}
 800a362:	46c0      	nop			; (mov r8, r8)
 800a364:	08012fc0 	.word	0x08012fc0

0800a368 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b086      	sub	sp, #24
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800a370:	2313      	movs	r3, #19
 800a372:	18fb      	adds	r3, r7, r3
 800a374:	2200      	movs	r2, #0
 800a376:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a378:	2312      	movs	r3, #18
 800a37a:	18fb      	adds	r3, r7, r3
 800a37c:	2200      	movs	r2, #0
 800a37e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681a      	ldr	r2, [r3, #0]
 800a384:	2380      	movs	r3, #128	; 0x80
 800a386:	029b      	lsls	r3, r3, #10
 800a388:	4013      	ands	r3, r2
 800a38a:	d100      	bne.n	800a38e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800a38c:	e0a3      	b.n	800a4d6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a38e:	2011      	movs	r0, #17
 800a390:	183b      	adds	r3, r7, r0
 800a392:	2200      	movs	r2, #0
 800a394:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a396:	4b86      	ldr	r3, [pc, #536]	; (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a398:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a39a:	2380      	movs	r3, #128	; 0x80
 800a39c:	055b      	lsls	r3, r3, #21
 800a39e:	4013      	ands	r3, r2
 800a3a0:	d110      	bne.n	800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a3a2:	4b83      	ldr	r3, [pc, #524]	; (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a3a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a3a6:	4b82      	ldr	r3, [pc, #520]	; (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a3a8:	2180      	movs	r1, #128	; 0x80
 800a3aa:	0549      	lsls	r1, r1, #21
 800a3ac:	430a      	orrs	r2, r1
 800a3ae:	63da      	str	r2, [r3, #60]	; 0x3c
 800a3b0:	4b7f      	ldr	r3, [pc, #508]	; (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a3b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a3b4:	2380      	movs	r3, #128	; 0x80
 800a3b6:	055b      	lsls	r3, r3, #21
 800a3b8:	4013      	ands	r3, r2
 800a3ba:	60bb      	str	r3, [r7, #8]
 800a3bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a3be:	183b      	adds	r3, r7, r0
 800a3c0:	2201      	movs	r2, #1
 800a3c2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a3c4:	4b7b      	ldr	r3, [pc, #492]	; (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800a3c6:	681a      	ldr	r2, [r3, #0]
 800a3c8:	4b7a      	ldr	r3, [pc, #488]	; (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800a3ca:	2180      	movs	r1, #128	; 0x80
 800a3cc:	0049      	lsls	r1, r1, #1
 800a3ce:	430a      	orrs	r2, r1
 800a3d0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a3d2:	f7fe fcfd 	bl	8008dd0 <HAL_GetTick>
 800a3d6:	0003      	movs	r3, r0
 800a3d8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a3da:	e00b      	b.n	800a3f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a3dc:	f7fe fcf8 	bl	8008dd0 <HAL_GetTick>
 800a3e0:	0002      	movs	r2, r0
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	1ad3      	subs	r3, r2, r3
 800a3e6:	2b02      	cmp	r3, #2
 800a3e8:	d904      	bls.n	800a3f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800a3ea:	2313      	movs	r3, #19
 800a3ec:	18fb      	adds	r3, r7, r3
 800a3ee:	2203      	movs	r2, #3
 800a3f0:	701a      	strb	r2, [r3, #0]
        break;
 800a3f2:	e005      	b.n	800a400 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a3f4:	4b6f      	ldr	r3, [pc, #444]	; (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800a3f6:	681a      	ldr	r2, [r3, #0]
 800a3f8:	2380      	movs	r3, #128	; 0x80
 800a3fa:	005b      	lsls	r3, r3, #1
 800a3fc:	4013      	ands	r3, r2
 800a3fe:	d0ed      	beq.n	800a3dc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800a400:	2313      	movs	r3, #19
 800a402:	18fb      	adds	r3, r7, r3
 800a404:	781b      	ldrb	r3, [r3, #0]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d154      	bne.n	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a40a:	4b69      	ldr	r3, [pc, #420]	; (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a40c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a40e:	23c0      	movs	r3, #192	; 0xc0
 800a410:	009b      	lsls	r3, r3, #2
 800a412:	4013      	ands	r3, r2
 800a414:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d019      	beq.n	800a450 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	699b      	ldr	r3, [r3, #24]
 800a420:	697a      	ldr	r2, [r7, #20]
 800a422:	429a      	cmp	r2, r3
 800a424:	d014      	beq.n	800a450 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a426:	4b62      	ldr	r3, [pc, #392]	; (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a42a:	4a63      	ldr	r2, [pc, #396]	; (800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800a42c:	4013      	ands	r3, r2
 800a42e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a430:	4b5f      	ldr	r3, [pc, #380]	; (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a432:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a434:	4b5e      	ldr	r3, [pc, #376]	; (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a436:	2180      	movs	r1, #128	; 0x80
 800a438:	0249      	lsls	r1, r1, #9
 800a43a:	430a      	orrs	r2, r1
 800a43c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a43e:	4b5c      	ldr	r3, [pc, #368]	; (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a440:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a442:	4b5b      	ldr	r3, [pc, #364]	; (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a444:	495d      	ldr	r1, [pc, #372]	; (800a5bc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800a446:	400a      	ands	r2, r1
 800a448:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a44a:	4b59      	ldr	r3, [pc, #356]	; (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a44c:	697a      	ldr	r2, [r7, #20]
 800a44e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a450:	697b      	ldr	r3, [r7, #20]
 800a452:	2201      	movs	r2, #1
 800a454:	4013      	ands	r3, r2
 800a456:	d016      	beq.n	800a486 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a458:	f7fe fcba 	bl	8008dd0 <HAL_GetTick>
 800a45c:	0003      	movs	r3, r0
 800a45e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a460:	e00c      	b.n	800a47c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a462:	f7fe fcb5 	bl	8008dd0 <HAL_GetTick>
 800a466:	0002      	movs	r2, r0
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	1ad3      	subs	r3, r2, r3
 800a46c:	4a54      	ldr	r2, [pc, #336]	; (800a5c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a46e:	4293      	cmp	r3, r2
 800a470:	d904      	bls.n	800a47c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800a472:	2313      	movs	r3, #19
 800a474:	18fb      	adds	r3, r7, r3
 800a476:	2203      	movs	r2, #3
 800a478:	701a      	strb	r2, [r3, #0]
            break;
 800a47a:	e004      	b.n	800a486 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a47c:	4b4c      	ldr	r3, [pc, #304]	; (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a47e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a480:	2202      	movs	r2, #2
 800a482:	4013      	ands	r3, r2
 800a484:	d0ed      	beq.n	800a462 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800a486:	2313      	movs	r3, #19
 800a488:	18fb      	adds	r3, r7, r3
 800a48a:	781b      	ldrb	r3, [r3, #0]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d10a      	bne.n	800a4a6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a490:	4b47      	ldr	r3, [pc, #284]	; (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a494:	4a48      	ldr	r2, [pc, #288]	; (800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800a496:	4013      	ands	r3, r2
 800a498:	0019      	movs	r1, r3
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	699a      	ldr	r2, [r3, #24]
 800a49e:	4b44      	ldr	r3, [pc, #272]	; (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a4a0:	430a      	orrs	r2, r1
 800a4a2:	65da      	str	r2, [r3, #92]	; 0x5c
 800a4a4:	e00c      	b.n	800a4c0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a4a6:	2312      	movs	r3, #18
 800a4a8:	18fb      	adds	r3, r7, r3
 800a4aa:	2213      	movs	r2, #19
 800a4ac:	18ba      	adds	r2, r7, r2
 800a4ae:	7812      	ldrb	r2, [r2, #0]
 800a4b0:	701a      	strb	r2, [r3, #0]
 800a4b2:	e005      	b.n	800a4c0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4b4:	2312      	movs	r3, #18
 800a4b6:	18fb      	adds	r3, r7, r3
 800a4b8:	2213      	movs	r2, #19
 800a4ba:	18ba      	adds	r2, r7, r2
 800a4bc:	7812      	ldrb	r2, [r2, #0]
 800a4be:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a4c0:	2311      	movs	r3, #17
 800a4c2:	18fb      	adds	r3, r7, r3
 800a4c4:	781b      	ldrb	r3, [r3, #0]
 800a4c6:	2b01      	cmp	r3, #1
 800a4c8:	d105      	bne.n	800a4d6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a4ca:	4b39      	ldr	r3, [pc, #228]	; (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a4cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a4ce:	4b38      	ldr	r3, [pc, #224]	; (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a4d0:	493c      	ldr	r1, [pc, #240]	; (800a5c4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800a4d2:	400a      	ands	r2, r1
 800a4d4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	2201      	movs	r2, #1
 800a4dc:	4013      	ands	r3, r2
 800a4de:	d009      	beq.n	800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a4e0:	4b33      	ldr	r3, [pc, #204]	; (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a4e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4e4:	2203      	movs	r2, #3
 800a4e6:	4393      	bics	r3, r2
 800a4e8:	0019      	movs	r1, r3
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	685a      	ldr	r2, [r3, #4]
 800a4ee:	4b30      	ldr	r3, [pc, #192]	; (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a4f0:	430a      	orrs	r2, r1
 800a4f2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	2202      	movs	r2, #2
 800a4fa:	4013      	ands	r3, r2
 800a4fc:	d009      	beq.n	800a512 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a4fe:	4b2c      	ldr	r3, [pc, #176]	; (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a502:	220c      	movs	r2, #12
 800a504:	4393      	bics	r3, r2
 800a506:	0019      	movs	r1, r3
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	689a      	ldr	r2, [r3, #8]
 800a50c:	4b28      	ldr	r3, [pc, #160]	; (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a50e:	430a      	orrs	r2, r1
 800a510:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	2220      	movs	r2, #32
 800a518:	4013      	ands	r3, r2
 800a51a:	d009      	beq.n	800a530 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a51c:	4b24      	ldr	r3, [pc, #144]	; (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a51e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a520:	4a29      	ldr	r2, [pc, #164]	; (800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a522:	4013      	ands	r3, r2
 800a524:	0019      	movs	r1, r3
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	68da      	ldr	r2, [r3, #12]
 800a52a:	4b21      	ldr	r3, [pc, #132]	; (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a52c:	430a      	orrs	r2, r1
 800a52e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681a      	ldr	r2, [r3, #0]
 800a534:	2380      	movs	r3, #128	; 0x80
 800a536:	01db      	lsls	r3, r3, #7
 800a538:	4013      	ands	r3, r2
 800a53a:	d015      	beq.n	800a568 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a53c:	4b1c      	ldr	r3, [pc, #112]	; (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a53e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a540:	009b      	lsls	r3, r3, #2
 800a542:	0899      	lsrs	r1, r3, #2
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	695a      	ldr	r2, [r3, #20]
 800a548:	4b19      	ldr	r3, [pc, #100]	; (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a54a:	430a      	orrs	r2, r1
 800a54c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	695a      	ldr	r2, [r3, #20]
 800a552:	2380      	movs	r3, #128	; 0x80
 800a554:	05db      	lsls	r3, r3, #23
 800a556:	429a      	cmp	r2, r3
 800a558:	d106      	bne.n	800a568 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800a55a:	4b15      	ldr	r3, [pc, #84]	; (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a55c:	68da      	ldr	r2, [r3, #12]
 800a55e:	4b14      	ldr	r3, [pc, #80]	; (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a560:	2180      	movs	r1, #128	; 0x80
 800a562:	0249      	lsls	r1, r1, #9
 800a564:	430a      	orrs	r2, r1
 800a566:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681a      	ldr	r2, [r3, #0]
 800a56c:	2380      	movs	r3, #128	; 0x80
 800a56e:	011b      	lsls	r3, r3, #4
 800a570:	4013      	ands	r3, r2
 800a572:	d016      	beq.n	800a5a2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800a574:	4b0e      	ldr	r3, [pc, #56]	; (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a578:	4a14      	ldr	r2, [pc, #80]	; (800a5cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800a57a:	4013      	ands	r3, r2
 800a57c:	0019      	movs	r1, r3
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	691a      	ldr	r2, [r3, #16]
 800a582:	4b0b      	ldr	r3, [pc, #44]	; (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a584:	430a      	orrs	r2, r1
 800a586:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	691a      	ldr	r2, [r3, #16]
 800a58c:	2380      	movs	r3, #128	; 0x80
 800a58e:	01db      	lsls	r3, r3, #7
 800a590:	429a      	cmp	r2, r3
 800a592:	d106      	bne.n	800a5a2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800a594:	4b06      	ldr	r3, [pc, #24]	; (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a596:	68da      	ldr	r2, [r3, #12]
 800a598:	4b05      	ldr	r3, [pc, #20]	; (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a59a:	2180      	movs	r1, #128	; 0x80
 800a59c:	0249      	lsls	r1, r1, #9
 800a59e:	430a      	orrs	r2, r1
 800a5a0:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800a5a2:	2312      	movs	r3, #18
 800a5a4:	18fb      	adds	r3, r7, r3
 800a5a6:	781b      	ldrb	r3, [r3, #0]
}
 800a5a8:	0018      	movs	r0, r3
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	b006      	add	sp, #24
 800a5ae:	bd80      	pop	{r7, pc}
 800a5b0:	40021000 	.word	0x40021000
 800a5b4:	40007000 	.word	0x40007000
 800a5b8:	fffffcff 	.word	0xfffffcff
 800a5bc:	fffeffff 	.word	0xfffeffff
 800a5c0:	00001388 	.word	0x00001388
 800a5c4:	efffffff 	.word	0xefffffff
 800a5c8:	ffffcfff 	.word	0xffffcfff
 800a5cc:	ffff3fff 	.word	0xffff3fff

0800a5d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b084      	sub	sp, #16
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d101      	bne.n	800a5e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a5de:	2301      	movs	r3, #1
 800a5e0:	e0a8      	b.n	800a734 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d109      	bne.n	800a5fe <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	685a      	ldr	r2, [r3, #4]
 800a5ee:	2382      	movs	r3, #130	; 0x82
 800a5f0:	005b      	lsls	r3, r3, #1
 800a5f2:	429a      	cmp	r2, r3
 800a5f4:	d009      	beq.n	800a60a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	61da      	str	r2, [r3, #28]
 800a5fc:	e005      	b.n	800a60a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2200      	movs	r2, #0
 800a602:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2200      	movs	r2, #0
 800a608:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2200      	movs	r2, #0
 800a60e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	225d      	movs	r2, #93	; 0x5d
 800a614:	5c9b      	ldrb	r3, [r3, r2]
 800a616:	b2db      	uxtb	r3, r3
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d107      	bne.n	800a62c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	225c      	movs	r2, #92	; 0x5c
 800a620:	2100      	movs	r1, #0
 800a622:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	0018      	movs	r0, r3
 800a628:	f7fd fa10 	bl	8007a4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	225d      	movs	r2, #93	; 0x5d
 800a630:	2102      	movs	r1, #2
 800a632:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	681a      	ldr	r2, [r3, #0]
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	2140      	movs	r1, #64	; 0x40
 800a640:	438a      	bics	r2, r1
 800a642:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	68da      	ldr	r2, [r3, #12]
 800a648:	23e0      	movs	r3, #224	; 0xe0
 800a64a:	00db      	lsls	r3, r3, #3
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d902      	bls.n	800a656 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a650:	2300      	movs	r3, #0
 800a652:	60fb      	str	r3, [r7, #12]
 800a654:	e002      	b.n	800a65c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a656:	2380      	movs	r3, #128	; 0x80
 800a658:	015b      	lsls	r3, r3, #5
 800a65a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	68da      	ldr	r2, [r3, #12]
 800a660:	23f0      	movs	r3, #240	; 0xf0
 800a662:	011b      	lsls	r3, r3, #4
 800a664:	429a      	cmp	r2, r3
 800a666:	d008      	beq.n	800a67a <HAL_SPI_Init+0xaa>
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	68da      	ldr	r2, [r3, #12]
 800a66c:	23e0      	movs	r3, #224	; 0xe0
 800a66e:	00db      	lsls	r3, r3, #3
 800a670:	429a      	cmp	r2, r3
 800a672:	d002      	beq.n	800a67a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2200      	movs	r2, #0
 800a678:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	685a      	ldr	r2, [r3, #4]
 800a67e:	2382      	movs	r3, #130	; 0x82
 800a680:	005b      	lsls	r3, r3, #1
 800a682:	401a      	ands	r2, r3
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6899      	ldr	r1, [r3, #8]
 800a688:	2384      	movs	r3, #132	; 0x84
 800a68a:	021b      	lsls	r3, r3, #8
 800a68c:	400b      	ands	r3, r1
 800a68e:	431a      	orrs	r2, r3
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	691b      	ldr	r3, [r3, #16]
 800a694:	2102      	movs	r1, #2
 800a696:	400b      	ands	r3, r1
 800a698:	431a      	orrs	r2, r3
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	695b      	ldr	r3, [r3, #20]
 800a69e:	2101      	movs	r1, #1
 800a6a0:	400b      	ands	r3, r1
 800a6a2:	431a      	orrs	r2, r3
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6999      	ldr	r1, [r3, #24]
 800a6a8:	2380      	movs	r3, #128	; 0x80
 800a6aa:	009b      	lsls	r3, r3, #2
 800a6ac:	400b      	ands	r3, r1
 800a6ae:	431a      	orrs	r2, r3
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	69db      	ldr	r3, [r3, #28]
 800a6b4:	2138      	movs	r1, #56	; 0x38
 800a6b6:	400b      	ands	r3, r1
 800a6b8:	431a      	orrs	r2, r3
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6a1b      	ldr	r3, [r3, #32]
 800a6be:	2180      	movs	r1, #128	; 0x80
 800a6c0:	400b      	ands	r3, r1
 800a6c2:	431a      	orrs	r2, r3
 800a6c4:	0011      	movs	r1, r2
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a6ca:	2380      	movs	r3, #128	; 0x80
 800a6cc:	019b      	lsls	r3, r3, #6
 800a6ce:	401a      	ands	r2, r3
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	430a      	orrs	r2, r1
 800a6d6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	699b      	ldr	r3, [r3, #24]
 800a6dc:	0c1b      	lsrs	r3, r3, #16
 800a6de:	2204      	movs	r2, #4
 800a6e0:	401a      	ands	r2, r3
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6e6:	2110      	movs	r1, #16
 800a6e8:	400b      	ands	r3, r1
 800a6ea:	431a      	orrs	r2, r3
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6f0:	2108      	movs	r1, #8
 800a6f2:	400b      	ands	r3, r1
 800a6f4:	431a      	orrs	r2, r3
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	68d9      	ldr	r1, [r3, #12]
 800a6fa:	23f0      	movs	r3, #240	; 0xf0
 800a6fc:	011b      	lsls	r3, r3, #4
 800a6fe:	400b      	ands	r3, r1
 800a700:	431a      	orrs	r2, r3
 800a702:	0011      	movs	r1, r2
 800a704:	68fa      	ldr	r2, [r7, #12]
 800a706:	2380      	movs	r3, #128	; 0x80
 800a708:	015b      	lsls	r3, r3, #5
 800a70a:	401a      	ands	r2, r3
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	430a      	orrs	r2, r1
 800a712:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	69da      	ldr	r2, [r3, #28]
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	4907      	ldr	r1, [pc, #28]	; (800a73c <HAL_SPI_Init+0x16c>)
 800a720:	400a      	ands	r2, r1
 800a722:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2200      	movs	r2, #0
 800a728:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	225d      	movs	r2, #93	; 0x5d
 800a72e:	2101      	movs	r1, #1
 800a730:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a732:	2300      	movs	r3, #0
}
 800a734:	0018      	movs	r0, r3
 800a736:	46bd      	mov	sp, r7
 800a738:	b004      	add	sp, #16
 800a73a:	bd80      	pop	{r7, pc}
 800a73c:	fffff7ff 	.word	0xfffff7ff

0800a740 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b088      	sub	sp, #32
 800a744:	af00      	add	r7, sp, #0
 800a746:	60f8      	str	r0, [r7, #12]
 800a748:	60b9      	str	r1, [r7, #8]
 800a74a:	603b      	str	r3, [r7, #0]
 800a74c:	1dbb      	adds	r3, r7, #6
 800a74e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a750:	231f      	movs	r3, #31
 800a752:	18fb      	adds	r3, r7, r3
 800a754:	2200      	movs	r2, #0
 800a756:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	225c      	movs	r2, #92	; 0x5c
 800a75c:	5c9b      	ldrb	r3, [r3, r2]
 800a75e:	2b01      	cmp	r3, #1
 800a760:	d101      	bne.n	800a766 <HAL_SPI_Transmit+0x26>
 800a762:	2302      	movs	r3, #2
 800a764:	e140      	b.n	800a9e8 <HAL_SPI_Transmit+0x2a8>
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	225c      	movs	r2, #92	; 0x5c
 800a76a:	2101      	movs	r1, #1
 800a76c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a76e:	f7fe fb2f 	bl	8008dd0 <HAL_GetTick>
 800a772:	0003      	movs	r3, r0
 800a774:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800a776:	2316      	movs	r3, #22
 800a778:	18fb      	adds	r3, r7, r3
 800a77a:	1dba      	adds	r2, r7, #6
 800a77c:	8812      	ldrh	r2, [r2, #0]
 800a77e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	225d      	movs	r2, #93	; 0x5d
 800a784:	5c9b      	ldrb	r3, [r3, r2]
 800a786:	b2db      	uxtb	r3, r3
 800a788:	2b01      	cmp	r3, #1
 800a78a:	d004      	beq.n	800a796 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800a78c:	231f      	movs	r3, #31
 800a78e:	18fb      	adds	r3, r7, r3
 800a790:	2202      	movs	r2, #2
 800a792:	701a      	strb	r2, [r3, #0]
    goto error;
 800a794:	e11d      	b.n	800a9d2 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d003      	beq.n	800a7a4 <HAL_SPI_Transmit+0x64>
 800a79c:	1dbb      	adds	r3, r7, #6
 800a79e:	881b      	ldrh	r3, [r3, #0]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d104      	bne.n	800a7ae <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800a7a4:	231f      	movs	r3, #31
 800a7a6:	18fb      	adds	r3, r7, r3
 800a7a8:	2201      	movs	r2, #1
 800a7aa:	701a      	strb	r2, [r3, #0]
    goto error;
 800a7ac:	e111      	b.n	800a9d2 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	225d      	movs	r2, #93	; 0x5d
 800a7b2:	2103      	movs	r1, #3
 800a7b4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	68ba      	ldr	r2, [r7, #8]
 800a7c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	1dba      	adds	r2, r7, #6
 800a7c6:	8812      	ldrh	r2, [r2, #0]
 800a7c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	1dba      	adds	r2, r7, #6
 800a7ce:	8812      	ldrh	r2, [r2, #0]
 800a7d0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	2244      	movs	r2, #68	; 0x44
 800a7dc:	2100      	movs	r1, #0
 800a7de:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	2246      	movs	r2, #70	; 0x46
 800a7e4:	2100      	movs	r1, #0
 800a7e6:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	689a      	ldr	r2, [r3, #8]
 800a7f8:	2380      	movs	r3, #128	; 0x80
 800a7fa:	021b      	lsls	r3, r3, #8
 800a7fc:	429a      	cmp	r2, r3
 800a7fe:	d110      	bne.n	800a822 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	681a      	ldr	r2, [r3, #0]
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	2140      	movs	r1, #64	; 0x40
 800a80c:	438a      	bics	r2, r1
 800a80e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	681a      	ldr	r2, [r3, #0]
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	2180      	movs	r1, #128	; 0x80
 800a81c:	01c9      	lsls	r1, r1, #7
 800a81e:	430a      	orrs	r2, r1
 800a820:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	2240      	movs	r2, #64	; 0x40
 800a82a:	4013      	ands	r3, r2
 800a82c:	2b40      	cmp	r3, #64	; 0x40
 800a82e:	d007      	beq.n	800a840 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	681a      	ldr	r2, [r3, #0]
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	2140      	movs	r1, #64	; 0x40
 800a83c:	430a      	orrs	r2, r1
 800a83e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	68da      	ldr	r2, [r3, #12]
 800a844:	23e0      	movs	r3, #224	; 0xe0
 800a846:	00db      	lsls	r3, r3, #3
 800a848:	429a      	cmp	r2, r3
 800a84a:	d94e      	bls.n	800a8ea <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	685b      	ldr	r3, [r3, #4]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d004      	beq.n	800a85e <HAL_SPI_Transmit+0x11e>
 800a854:	2316      	movs	r3, #22
 800a856:	18fb      	adds	r3, r7, r3
 800a858:	881b      	ldrh	r3, [r3, #0]
 800a85a:	2b01      	cmp	r3, #1
 800a85c:	d13f      	bne.n	800a8de <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a862:	881a      	ldrh	r2, [r3, #0]
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a86e:	1c9a      	adds	r2, r3, #2
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a878:	b29b      	uxth	r3, r3
 800a87a:	3b01      	subs	r3, #1
 800a87c:	b29a      	uxth	r2, r3
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a882:	e02c      	b.n	800a8de <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	689b      	ldr	r3, [r3, #8]
 800a88a:	2202      	movs	r2, #2
 800a88c:	4013      	ands	r3, r2
 800a88e:	2b02      	cmp	r3, #2
 800a890:	d112      	bne.n	800a8b8 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a896:	881a      	ldrh	r2, [r3, #0]
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8a2:	1c9a      	adds	r2, r3, #2
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a8ac:	b29b      	uxth	r3, r3
 800a8ae:	3b01      	subs	r3, #1
 800a8b0:	b29a      	uxth	r2, r3
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a8b6:	e012      	b.n	800a8de <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a8b8:	f7fe fa8a 	bl	8008dd0 <HAL_GetTick>
 800a8bc:	0002      	movs	r2, r0
 800a8be:	69bb      	ldr	r3, [r7, #24]
 800a8c0:	1ad3      	subs	r3, r2, r3
 800a8c2:	683a      	ldr	r2, [r7, #0]
 800a8c4:	429a      	cmp	r2, r3
 800a8c6:	d802      	bhi.n	800a8ce <HAL_SPI_Transmit+0x18e>
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	3301      	adds	r3, #1
 800a8cc:	d102      	bne.n	800a8d4 <HAL_SPI_Transmit+0x194>
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d104      	bne.n	800a8de <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 800a8d4:	231f      	movs	r3, #31
 800a8d6:	18fb      	adds	r3, r7, r3
 800a8d8:	2203      	movs	r2, #3
 800a8da:	701a      	strb	r2, [r3, #0]
          goto error;
 800a8dc:	e079      	b.n	800a9d2 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a8e2:	b29b      	uxth	r3, r3
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d1cd      	bne.n	800a884 <HAL_SPI_Transmit+0x144>
 800a8e8:	e04f      	b.n	800a98a <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	685b      	ldr	r3, [r3, #4]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d004      	beq.n	800a8fc <HAL_SPI_Transmit+0x1bc>
 800a8f2:	2316      	movs	r3, #22
 800a8f4:	18fb      	adds	r3, r7, r3
 800a8f6:	881b      	ldrh	r3, [r3, #0]
 800a8f8:	2b01      	cmp	r3, #1
 800a8fa:	d141      	bne.n	800a980 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	330c      	adds	r3, #12
 800a906:	7812      	ldrb	r2, [r2, #0]
 800a908:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a90e:	1c5a      	adds	r2, r3, #1
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a918:	b29b      	uxth	r3, r3
 800a91a:	3b01      	subs	r3, #1
 800a91c:	b29a      	uxth	r2, r3
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800a922:	e02d      	b.n	800a980 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	689b      	ldr	r3, [r3, #8]
 800a92a:	2202      	movs	r2, #2
 800a92c:	4013      	ands	r3, r2
 800a92e:	2b02      	cmp	r3, #2
 800a930:	d113      	bne.n	800a95a <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	330c      	adds	r3, #12
 800a93c:	7812      	ldrb	r2, [r2, #0]
 800a93e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a944:	1c5a      	adds	r2, r3, #1
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a94e:	b29b      	uxth	r3, r3
 800a950:	3b01      	subs	r3, #1
 800a952:	b29a      	uxth	r2, r3
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a958:	e012      	b.n	800a980 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a95a:	f7fe fa39 	bl	8008dd0 <HAL_GetTick>
 800a95e:	0002      	movs	r2, r0
 800a960:	69bb      	ldr	r3, [r7, #24]
 800a962:	1ad3      	subs	r3, r2, r3
 800a964:	683a      	ldr	r2, [r7, #0]
 800a966:	429a      	cmp	r2, r3
 800a968:	d802      	bhi.n	800a970 <HAL_SPI_Transmit+0x230>
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	3301      	adds	r3, #1
 800a96e:	d102      	bne.n	800a976 <HAL_SPI_Transmit+0x236>
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d104      	bne.n	800a980 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800a976:	231f      	movs	r3, #31
 800a978:	18fb      	adds	r3, r7, r3
 800a97a:	2203      	movs	r2, #3
 800a97c:	701a      	strb	r2, [r3, #0]
          goto error;
 800a97e:	e028      	b.n	800a9d2 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a984:	b29b      	uxth	r3, r3
 800a986:	2b00      	cmp	r3, #0
 800a988:	d1cc      	bne.n	800a924 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a98a:	69ba      	ldr	r2, [r7, #24]
 800a98c:	6839      	ldr	r1, [r7, #0]
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	0018      	movs	r0, r3
 800a992:	f000 fdf5 	bl	800b580 <SPI_EndRxTxTransaction>
 800a996:	1e03      	subs	r3, r0, #0
 800a998:	d002      	beq.n	800a9a0 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	2220      	movs	r2, #32
 800a99e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	689b      	ldr	r3, [r3, #8]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d10a      	bne.n	800a9be <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	613b      	str	r3, [r7, #16]
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	68db      	ldr	r3, [r3, #12]
 800a9b2:	613b      	str	r3, [r7, #16]
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	689b      	ldr	r3, [r3, #8]
 800a9ba:	613b      	str	r3, [r7, #16]
 800a9bc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d004      	beq.n	800a9d0 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800a9c6:	231f      	movs	r3, #31
 800a9c8:	18fb      	adds	r3, r7, r3
 800a9ca:	2201      	movs	r2, #1
 800a9cc:	701a      	strb	r2, [r3, #0]
 800a9ce:	e000      	b.n	800a9d2 <HAL_SPI_Transmit+0x292>
  }

error:
 800a9d0:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	225d      	movs	r2, #93	; 0x5d
 800a9d6:	2101      	movs	r1, #1
 800a9d8:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	225c      	movs	r2, #92	; 0x5c
 800a9de:	2100      	movs	r1, #0
 800a9e0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800a9e2:	231f      	movs	r3, #31
 800a9e4:	18fb      	adds	r3, r7, r3
 800a9e6:	781b      	ldrb	r3, [r3, #0]
}
 800a9e8:	0018      	movs	r0, r3
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	b008      	add	sp, #32
 800a9ee:	bd80      	pop	{r7, pc}

0800a9f0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a9f0:	b590      	push	{r4, r7, lr}
 800a9f2:	b089      	sub	sp, #36	; 0x24
 800a9f4:	af02      	add	r7, sp, #8
 800a9f6:	60f8      	str	r0, [r7, #12]
 800a9f8:	60b9      	str	r1, [r7, #8]
 800a9fa:	603b      	str	r3, [r7, #0]
 800a9fc:	1dbb      	adds	r3, r7, #6
 800a9fe:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800aa00:	2317      	movs	r3, #23
 800aa02:	18fb      	adds	r3, r7, r3
 800aa04:	2200      	movs	r2, #0
 800aa06:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	685a      	ldr	r2, [r3, #4]
 800aa0c:	2382      	movs	r3, #130	; 0x82
 800aa0e:	005b      	lsls	r3, r3, #1
 800aa10:	429a      	cmp	r2, r3
 800aa12:	d113      	bne.n	800aa3c <HAL_SPI_Receive+0x4c>
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	689b      	ldr	r3, [r3, #8]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d10f      	bne.n	800aa3c <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	225d      	movs	r2, #93	; 0x5d
 800aa20:	2104      	movs	r1, #4
 800aa22:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800aa24:	1dbb      	adds	r3, r7, #6
 800aa26:	881c      	ldrh	r4, [r3, #0]
 800aa28:	68ba      	ldr	r2, [r7, #8]
 800aa2a:	68b9      	ldr	r1, [r7, #8]
 800aa2c:	68f8      	ldr	r0, [r7, #12]
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	9300      	str	r3, [sp, #0]
 800aa32:	0023      	movs	r3, r4
 800aa34:	f000 f928 	bl	800ac88 <HAL_SPI_TransmitReceive>
 800aa38:	0003      	movs	r3, r0
 800aa3a:	e11c      	b.n	800ac76 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	225c      	movs	r2, #92	; 0x5c
 800aa40:	5c9b      	ldrb	r3, [r3, r2]
 800aa42:	2b01      	cmp	r3, #1
 800aa44:	d101      	bne.n	800aa4a <HAL_SPI_Receive+0x5a>
 800aa46:	2302      	movs	r3, #2
 800aa48:	e115      	b.n	800ac76 <HAL_SPI_Receive+0x286>
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	225c      	movs	r2, #92	; 0x5c
 800aa4e:	2101      	movs	r1, #1
 800aa50:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800aa52:	f7fe f9bd 	bl	8008dd0 <HAL_GetTick>
 800aa56:	0003      	movs	r3, r0
 800aa58:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	225d      	movs	r2, #93	; 0x5d
 800aa5e:	5c9b      	ldrb	r3, [r3, r2]
 800aa60:	b2db      	uxtb	r3, r3
 800aa62:	2b01      	cmp	r3, #1
 800aa64:	d004      	beq.n	800aa70 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 800aa66:	2317      	movs	r3, #23
 800aa68:	18fb      	adds	r3, r7, r3
 800aa6a:	2202      	movs	r2, #2
 800aa6c:	701a      	strb	r2, [r3, #0]
    goto error;
 800aa6e:	e0f7      	b.n	800ac60 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d003      	beq.n	800aa7e <HAL_SPI_Receive+0x8e>
 800aa76:	1dbb      	adds	r3, r7, #6
 800aa78:	881b      	ldrh	r3, [r3, #0]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d104      	bne.n	800aa88 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 800aa7e:	2317      	movs	r3, #23
 800aa80:	18fb      	adds	r3, r7, r3
 800aa82:	2201      	movs	r2, #1
 800aa84:	701a      	strb	r2, [r3, #0]
    goto error;
 800aa86:	e0eb      	b.n	800ac60 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	225d      	movs	r2, #93	; 0x5d
 800aa8c:	2104      	movs	r1, #4
 800aa8e:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	2200      	movs	r2, #0
 800aa94:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	68ba      	ldr	r2, [r7, #8]
 800aa9a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	1dba      	adds	r2, r7, #6
 800aaa0:	2144      	movs	r1, #68	; 0x44
 800aaa2:	8812      	ldrh	r2, [r2, #0]
 800aaa4:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	1dba      	adds	r2, r7, #6
 800aaaa:	2146      	movs	r1, #70	; 0x46
 800aaac:	8812      	ldrh	r2, [r2, #0]
 800aaae:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	2200      	movs	r2, #0
 800aab4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	2200      	movs	r2, #0
 800aaba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	2200      	movs	r2, #0
 800aac0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	2200      	movs	r2, #0
 800aac6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	2200      	movs	r2, #0
 800aacc:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	68da      	ldr	r2, [r3, #12]
 800aad2:	23e0      	movs	r3, #224	; 0xe0
 800aad4:	00db      	lsls	r3, r3, #3
 800aad6:	429a      	cmp	r2, r3
 800aad8:	d908      	bls.n	800aaec <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	685a      	ldr	r2, [r3, #4]
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	4966      	ldr	r1, [pc, #408]	; (800ac80 <HAL_SPI_Receive+0x290>)
 800aae6:	400a      	ands	r2, r1
 800aae8:	605a      	str	r2, [r3, #4]
 800aaea:	e008      	b.n	800aafe <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	685a      	ldr	r2, [r3, #4]
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	2180      	movs	r1, #128	; 0x80
 800aaf8:	0149      	lsls	r1, r1, #5
 800aafa:	430a      	orrs	r2, r1
 800aafc:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	689a      	ldr	r2, [r3, #8]
 800ab02:	2380      	movs	r3, #128	; 0x80
 800ab04:	021b      	lsls	r3, r3, #8
 800ab06:	429a      	cmp	r2, r3
 800ab08:	d10f      	bne.n	800ab2a <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	681a      	ldr	r2, [r3, #0]
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	2140      	movs	r1, #64	; 0x40
 800ab16:	438a      	bics	r2, r1
 800ab18:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	681a      	ldr	r2, [r3, #0]
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	4957      	ldr	r1, [pc, #348]	; (800ac84 <HAL_SPI_Receive+0x294>)
 800ab26:	400a      	ands	r2, r1
 800ab28:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	2240      	movs	r2, #64	; 0x40
 800ab32:	4013      	ands	r3, r2
 800ab34:	2b40      	cmp	r3, #64	; 0x40
 800ab36:	d007      	beq.n	800ab48 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	681a      	ldr	r2, [r3, #0]
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	2140      	movs	r1, #64	; 0x40
 800ab44:	430a      	orrs	r2, r1
 800ab46:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	68da      	ldr	r2, [r3, #12]
 800ab4c:	23e0      	movs	r3, #224	; 0xe0
 800ab4e:	00db      	lsls	r3, r3, #3
 800ab50:	429a      	cmp	r2, r3
 800ab52:	d900      	bls.n	800ab56 <HAL_SPI_Receive+0x166>
 800ab54:	e069      	b.n	800ac2a <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800ab56:	e031      	b.n	800abbc <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	689b      	ldr	r3, [r3, #8]
 800ab5e:	2201      	movs	r2, #1
 800ab60:	4013      	ands	r3, r2
 800ab62:	2b01      	cmp	r3, #1
 800ab64:	d117      	bne.n	800ab96 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	330c      	adds	r3, #12
 800ab6c:	001a      	movs	r2, r3
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab72:	7812      	ldrb	r2, [r2, #0]
 800ab74:	b2d2      	uxtb	r2, r2
 800ab76:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab7c:	1c5a      	adds	r2, r3, #1
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	2246      	movs	r2, #70	; 0x46
 800ab86:	5a9b      	ldrh	r3, [r3, r2]
 800ab88:	b29b      	uxth	r3, r3
 800ab8a:	3b01      	subs	r3, #1
 800ab8c:	b299      	uxth	r1, r3
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	2246      	movs	r2, #70	; 0x46
 800ab92:	5299      	strh	r1, [r3, r2]
 800ab94:	e012      	b.n	800abbc <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ab96:	f7fe f91b 	bl	8008dd0 <HAL_GetTick>
 800ab9a:	0002      	movs	r2, r0
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	1ad3      	subs	r3, r2, r3
 800aba0:	683a      	ldr	r2, [r7, #0]
 800aba2:	429a      	cmp	r2, r3
 800aba4:	d802      	bhi.n	800abac <HAL_SPI_Receive+0x1bc>
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	3301      	adds	r3, #1
 800abaa:	d102      	bne.n	800abb2 <HAL_SPI_Receive+0x1c2>
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d104      	bne.n	800abbc <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 800abb2:	2317      	movs	r3, #23
 800abb4:	18fb      	adds	r3, r7, r3
 800abb6:	2203      	movs	r2, #3
 800abb8:	701a      	strb	r2, [r3, #0]
          goto error;
 800abba:	e051      	b.n	800ac60 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	2246      	movs	r2, #70	; 0x46
 800abc0:	5a9b      	ldrh	r3, [r3, r2]
 800abc2:	b29b      	uxth	r3, r3
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d1c7      	bne.n	800ab58 <HAL_SPI_Receive+0x168>
 800abc8:	e035      	b.n	800ac36 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	689b      	ldr	r3, [r3, #8]
 800abd0:	2201      	movs	r2, #1
 800abd2:	4013      	ands	r3, r2
 800abd4:	2b01      	cmp	r3, #1
 800abd6:	d115      	bne.n	800ac04 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	68da      	ldr	r2, [r3, #12]
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abe2:	b292      	uxth	r2, r2
 800abe4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abea:	1c9a      	adds	r2, r3, #2
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	2246      	movs	r2, #70	; 0x46
 800abf4:	5a9b      	ldrh	r3, [r3, r2]
 800abf6:	b29b      	uxth	r3, r3
 800abf8:	3b01      	subs	r3, #1
 800abfa:	b299      	uxth	r1, r3
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	2246      	movs	r2, #70	; 0x46
 800ac00:	5299      	strh	r1, [r3, r2]
 800ac02:	e012      	b.n	800ac2a <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ac04:	f7fe f8e4 	bl	8008dd0 <HAL_GetTick>
 800ac08:	0002      	movs	r2, r0
 800ac0a:	693b      	ldr	r3, [r7, #16]
 800ac0c:	1ad3      	subs	r3, r2, r3
 800ac0e:	683a      	ldr	r2, [r7, #0]
 800ac10:	429a      	cmp	r2, r3
 800ac12:	d802      	bhi.n	800ac1a <HAL_SPI_Receive+0x22a>
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	3301      	adds	r3, #1
 800ac18:	d102      	bne.n	800ac20 <HAL_SPI_Receive+0x230>
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d104      	bne.n	800ac2a <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 800ac20:	2317      	movs	r3, #23
 800ac22:	18fb      	adds	r3, r7, r3
 800ac24:	2203      	movs	r2, #3
 800ac26:	701a      	strb	r2, [r3, #0]
          goto error;
 800ac28:	e01a      	b.n	800ac60 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	2246      	movs	r2, #70	; 0x46
 800ac2e:	5a9b      	ldrh	r3, [r3, r2]
 800ac30:	b29b      	uxth	r3, r3
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d1c9      	bne.n	800abca <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ac36:	693a      	ldr	r2, [r7, #16]
 800ac38:	6839      	ldr	r1, [r7, #0]
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	0018      	movs	r0, r3
 800ac3e:	f000 fc41 	bl	800b4c4 <SPI_EndRxTransaction>
 800ac42:	1e03      	subs	r3, r0, #0
 800ac44:	d002      	beq.n	800ac4c <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	2220      	movs	r2, #32
 800ac4a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d004      	beq.n	800ac5e <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 800ac54:	2317      	movs	r3, #23
 800ac56:	18fb      	adds	r3, r7, r3
 800ac58:	2201      	movs	r2, #1
 800ac5a:	701a      	strb	r2, [r3, #0]
 800ac5c:	e000      	b.n	800ac60 <HAL_SPI_Receive+0x270>
  }

error :
 800ac5e:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	225d      	movs	r2, #93	; 0x5d
 800ac64:	2101      	movs	r1, #1
 800ac66:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	225c      	movs	r2, #92	; 0x5c
 800ac6c:	2100      	movs	r1, #0
 800ac6e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800ac70:	2317      	movs	r3, #23
 800ac72:	18fb      	adds	r3, r7, r3
 800ac74:	781b      	ldrb	r3, [r3, #0]
}
 800ac76:	0018      	movs	r0, r3
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	b007      	add	sp, #28
 800ac7c:	bd90      	pop	{r4, r7, pc}
 800ac7e:	46c0      	nop			; (mov r8, r8)
 800ac80:	ffffefff 	.word	0xffffefff
 800ac84:	ffffbfff 	.word	0xffffbfff

0800ac88 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b08a      	sub	sp, #40	; 0x28
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	60f8      	str	r0, [r7, #12]
 800ac90:	60b9      	str	r1, [r7, #8]
 800ac92:	607a      	str	r2, [r7, #4]
 800ac94:	001a      	movs	r2, r3
 800ac96:	1cbb      	adds	r3, r7, #2
 800ac98:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ac9e:	2323      	movs	r3, #35	; 0x23
 800aca0:	18fb      	adds	r3, r7, r3
 800aca2:	2200      	movs	r2, #0
 800aca4:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	225c      	movs	r2, #92	; 0x5c
 800acaa:	5c9b      	ldrb	r3, [r3, r2]
 800acac:	2b01      	cmp	r3, #1
 800acae:	d101      	bne.n	800acb4 <HAL_SPI_TransmitReceive+0x2c>
 800acb0:	2302      	movs	r3, #2
 800acb2:	e1b5      	b.n	800b020 <HAL_SPI_TransmitReceive+0x398>
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	225c      	movs	r2, #92	; 0x5c
 800acb8:	2101      	movs	r1, #1
 800acba:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800acbc:	f7fe f888 	bl	8008dd0 <HAL_GetTick>
 800acc0:	0003      	movs	r3, r0
 800acc2:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800acc4:	201b      	movs	r0, #27
 800acc6:	183b      	adds	r3, r7, r0
 800acc8:	68fa      	ldr	r2, [r7, #12]
 800acca:	215d      	movs	r1, #93	; 0x5d
 800accc:	5c52      	ldrb	r2, [r2, r1]
 800acce:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	685b      	ldr	r3, [r3, #4]
 800acd4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800acd6:	2312      	movs	r3, #18
 800acd8:	18fb      	adds	r3, r7, r3
 800acda:	1cba      	adds	r2, r7, #2
 800acdc:	8812      	ldrh	r2, [r2, #0]
 800acde:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ace0:	183b      	adds	r3, r7, r0
 800ace2:	781b      	ldrb	r3, [r3, #0]
 800ace4:	2b01      	cmp	r3, #1
 800ace6:	d011      	beq.n	800ad0c <HAL_SPI_TransmitReceive+0x84>
 800ace8:	697a      	ldr	r2, [r7, #20]
 800acea:	2382      	movs	r3, #130	; 0x82
 800acec:	005b      	lsls	r3, r3, #1
 800acee:	429a      	cmp	r2, r3
 800acf0:	d107      	bne.n	800ad02 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	689b      	ldr	r3, [r3, #8]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d103      	bne.n	800ad02 <HAL_SPI_TransmitReceive+0x7a>
 800acfa:	183b      	adds	r3, r7, r0
 800acfc:	781b      	ldrb	r3, [r3, #0]
 800acfe:	2b04      	cmp	r3, #4
 800ad00:	d004      	beq.n	800ad0c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800ad02:	2323      	movs	r3, #35	; 0x23
 800ad04:	18fb      	adds	r3, r7, r3
 800ad06:	2202      	movs	r2, #2
 800ad08:	701a      	strb	r2, [r3, #0]
    goto error;
 800ad0a:	e17e      	b.n	800b00a <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d006      	beq.n	800ad20 <HAL_SPI_TransmitReceive+0x98>
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d003      	beq.n	800ad20 <HAL_SPI_TransmitReceive+0x98>
 800ad18:	1cbb      	adds	r3, r7, #2
 800ad1a:	881b      	ldrh	r3, [r3, #0]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d104      	bne.n	800ad2a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800ad20:	2323      	movs	r3, #35	; 0x23
 800ad22:	18fb      	adds	r3, r7, r3
 800ad24:	2201      	movs	r2, #1
 800ad26:	701a      	strb	r2, [r3, #0]
    goto error;
 800ad28:	e16f      	b.n	800b00a <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	225d      	movs	r2, #93	; 0x5d
 800ad2e:	5c9b      	ldrb	r3, [r3, r2]
 800ad30:	b2db      	uxtb	r3, r3
 800ad32:	2b04      	cmp	r3, #4
 800ad34:	d003      	beq.n	800ad3e <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	225d      	movs	r2, #93	; 0x5d
 800ad3a:	2105      	movs	r1, #5
 800ad3c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	2200      	movs	r2, #0
 800ad42:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	687a      	ldr	r2, [r7, #4]
 800ad48:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	1cba      	adds	r2, r7, #2
 800ad4e:	2146      	movs	r1, #70	; 0x46
 800ad50:	8812      	ldrh	r2, [r2, #0]
 800ad52:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	1cba      	adds	r2, r7, #2
 800ad58:	2144      	movs	r1, #68	; 0x44
 800ad5a:	8812      	ldrh	r2, [r2, #0]
 800ad5c:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	68ba      	ldr	r2, [r7, #8]
 800ad62:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	1cba      	adds	r2, r7, #2
 800ad68:	8812      	ldrh	r2, [r2, #0]
 800ad6a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	1cba      	adds	r2, r7, #2
 800ad70:	8812      	ldrh	r2, [r2, #0]
 800ad72:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	2200      	movs	r2, #0
 800ad78:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	68da      	ldr	r2, [r3, #12]
 800ad84:	23e0      	movs	r3, #224	; 0xe0
 800ad86:	00db      	lsls	r3, r3, #3
 800ad88:	429a      	cmp	r2, r3
 800ad8a:	d908      	bls.n	800ad9e <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	685a      	ldr	r2, [r3, #4]
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	49a4      	ldr	r1, [pc, #656]	; (800b028 <HAL_SPI_TransmitReceive+0x3a0>)
 800ad98:	400a      	ands	r2, r1
 800ad9a:	605a      	str	r2, [r3, #4]
 800ad9c:	e008      	b.n	800adb0 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	685a      	ldr	r2, [r3, #4]
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	2180      	movs	r1, #128	; 0x80
 800adaa:	0149      	lsls	r1, r1, #5
 800adac:	430a      	orrs	r2, r1
 800adae:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	2240      	movs	r2, #64	; 0x40
 800adb8:	4013      	ands	r3, r2
 800adba:	2b40      	cmp	r3, #64	; 0x40
 800adbc:	d007      	beq.n	800adce <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	681a      	ldr	r2, [r3, #0]
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	2140      	movs	r1, #64	; 0x40
 800adca:	430a      	orrs	r2, r1
 800adcc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	68da      	ldr	r2, [r3, #12]
 800add2:	23e0      	movs	r3, #224	; 0xe0
 800add4:	00db      	lsls	r3, r3, #3
 800add6:	429a      	cmp	r2, r3
 800add8:	d800      	bhi.n	800addc <HAL_SPI_TransmitReceive+0x154>
 800adda:	e07f      	b.n	800aedc <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	685b      	ldr	r3, [r3, #4]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d005      	beq.n	800adf0 <HAL_SPI_TransmitReceive+0x168>
 800ade4:	2312      	movs	r3, #18
 800ade6:	18fb      	adds	r3, r7, r3
 800ade8:	881b      	ldrh	r3, [r3, #0]
 800adea:	2b01      	cmp	r3, #1
 800adec:	d000      	beq.n	800adf0 <HAL_SPI_TransmitReceive+0x168>
 800adee:	e069      	b.n	800aec4 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adf4:	881a      	ldrh	r2, [r3, #0]
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae00:	1c9a      	adds	r2, r3, #2
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ae0a:	b29b      	uxth	r3, r3
 800ae0c:	3b01      	subs	r3, #1
 800ae0e:	b29a      	uxth	r2, r3
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ae14:	e056      	b.n	800aec4 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	689b      	ldr	r3, [r3, #8]
 800ae1c:	2202      	movs	r2, #2
 800ae1e:	4013      	ands	r3, r2
 800ae20:	2b02      	cmp	r3, #2
 800ae22:	d11b      	bne.n	800ae5c <HAL_SPI_TransmitReceive+0x1d4>
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ae28:	b29b      	uxth	r3, r3
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d016      	beq.n	800ae5c <HAL_SPI_TransmitReceive+0x1d4>
 800ae2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae30:	2b01      	cmp	r3, #1
 800ae32:	d113      	bne.n	800ae5c <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae38:	881a      	ldrh	r2, [r3, #0]
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae44:	1c9a      	adds	r2, r3, #2
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ae4e:	b29b      	uxth	r3, r3
 800ae50:	3b01      	subs	r3, #1
 800ae52:	b29a      	uxth	r2, r3
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ae58:	2300      	movs	r3, #0
 800ae5a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	689b      	ldr	r3, [r3, #8]
 800ae62:	2201      	movs	r2, #1
 800ae64:	4013      	ands	r3, r2
 800ae66:	2b01      	cmp	r3, #1
 800ae68:	d11c      	bne.n	800aea4 <HAL_SPI_TransmitReceive+0x21c>
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	2246      	movs	r2, #70	; 0x46
 800ae6e:	5a9b      	ldrh	r3, [r3, r2]
 800ae70:	b29b      	uxth	r3, r3
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d016      	beq.n	800aea4 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	68da      	ldr	r2, [r3, #12]
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae80:	b292      	uxth	r2, r2
 800ae82:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae88:	1c9a      	adds	r2, r3, #2
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	2246      	movs	r2, #70	; 0x46
 800ae92:	5a9b      	ldrh	r3, [r3, r2]
 800ae94:	b29b      	uxth	r3, r3
 800ae96:	3b01      	subs	r3, #1
 800ae98:	b299      	uxth	r1, r3
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	2246      	movs	r2, #70	; 0x46
 800ae9e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800aea0:	2301      	movs	r3, #1
 800aea2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800aea4:	f7fd ff94 	bl	8008dd0 <HAL_GetTick>
 800aea8:	0002      	movs	r2, r0
 800aeaa:	69fb      	ldr	r3, [r7, #28]
 800aeac:	1ad3      	subs	r3, r2, r3
 800aeae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aeb0:	429a      	cmp	r2, r3
 800aeb2:	d807      	bhi.n	800aec4 <HAL_SPI_TransmitReceive+0x23c>
 800aeb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb6:	3301      	adds	r3, #1
 800aeb8:	d004      	beq.n	800aec4 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 800aeba:	2323      	movs	r3, #35	; 0x23
 800aebc:	18fb      	adds	r3, r7, r3
 800aebe:	2203      	movs	r2, #3
 800aec0:	701a      	strb	r2, [r3, #0]
        goto error;
 800aec2:	e0a2      	b.n	800b00a <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aec8:	b29b      	uxth	r3, r3
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d1a3      	bne.n	800ae16 <HAL_SPI_TransmitReceive+0x18e>
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	2246      	movs	r2, #70	; 0x46
 800aed2:	5a9b      	ldrh	r3, [r3, r2]
 800aed4:	b29b      	uxth	r3, r3
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d19d      	bne.n	800ae16 <HAL_SPI_TransmitReceive+0x18e>
 800aeda:	e085      	b.n	800afe8 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	685b      	ldr	r3, [r3, #4]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d005      	beq.n	800aef0 <HAL_SPI_TransmitReceive+0x268>
 800aee4:	2312      	movs	r3, #18
 800aee6:	18fb      	adds	r3, r7, r3
 800aee8:	881b      	ldrh	r3, [r3, #0]
 800aeea:	2b01      	cmp	r3, #1
 800aeec:	d000      	beq.n	800aef0 <HAL_SPI_TransmitReceive+0x268>
 800aeee:	e070      	b.n	800afd2 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	330c      	adds	r3, #12
 800aefa:	7812      	ldrb	r2, [r2, #0]
 800aefc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af02:	1c5a      	adds	r2, r3, #1
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800af0c:	b29b      	uxth	r3, r3
 800af0e:	3b01      	subs	r3, #1
 800af10:	b29a      	uxth	r2, r3
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800af16:	e05c      	b.n	800afd2 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	689b      	ldr	r3, [r3, #8]
 800af1e:	2202      	movs	r2, #2
 800af20:	4013      	ands	r3, r2
 800af22:	2b02      	cmp	r3, #2
 800af24:	d11c      	bne.n	800af60 <HAL_SPI_TransmitReceive+0x2d8>
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800af2a:	b29b      	uxth	r3, r3
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d017      	beq.n	800af60 <HAL_SPI_TransmitReceive+0x2d8>
 800af30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af32:	2b01      	cmp	r3, #1
 800af34:	d114      	bne.n	800af60 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	330c      	adds	r3, #12
 800af40:	7812      	ldrb	r2, [r2, #0]
 800af42:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af48:	1c5a      	adds	r2, r3, #1
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800af52:	b29b      	uxth	r3, r3
 800af54:	3b01      	subs	r3, #1
 800af56:	b29a      	uxth	r2, r3
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800af5c:	2300      	movs	r3, #0
 800af5e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	689b      	ldr	r3, [r3, #8]
 800af66:	2201      	movs	r2, #1
 800af68:	4013      	ands	r3, r2
 800af6a:	2b01      	cmp	r3, #1
 800af6c:	d11e      	bne.n	800afac <HAL_SPI_TransmitReceive+0x324>
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	2246      	movs	r2, #70	; 0x46
 800af72:	5a9b      	ldrh	r3, [r3, r2]
 800af74:	b29b      	uxth	r3, r3
 800af76:	2b00      	cmp	r3, #0
 800af78:	d018      	beq.n	800afac <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	330c      	adds	r3, #12
 800af80:	001a      	movs	r2, r3
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af86:	7812      	ldrb	r2, [r2, #0]
 800af88:	b2d2      	uxtb	r2, r2
 800af8a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af90:	1c5a      	adds	r2, r3, #1
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	2246      	movs	r2, #70	; 0x46
 800af9a:	5a9b      	ldrh	r3, [r3, r2]
 800af9c:	b29b      	uxth	r3, r3
 800af9e:	3b01      	subs	r3, #1
 800afa0:	b299      	uxth	r1, r3
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	2246      	movs	r2, #70	; 0x46
 800afa6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800afa8:	2301      	movs	r3, #1
 800afaa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800afac:	f7fd ff10 	bl	8008dd0 <HAL_GetTick>
 800afb0:	0002      	movs	r2, r0
 800afb2:	69fb      	ldr	r3, [r7, #28]
 800afb4:	1ad3      	subs	r3, r2, r3
 800afb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afb8:	429a      	cmp	r2, r3
 800afba:	d802      	bhi.n	800afc2 <HAL_SPI_TransmitReceive+0x33a>
 800afbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afbe:	3301      	adds	r3, #1
 800afc0:	d102      	bne.n	800afc8 <HAL_SPI_TransmitReceive+0x340>
 800afc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d104      	bne.n	800afd2 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 800afc8:	2323      	movs	r3, #35	; 0x23
 800afca:	18fb      	adds	r3, r7, r3
 800afcc:	2203      	movs	r2, #3
 800afce:	701a      	strb	r2, [r3, #0]
        goto error;
 800afd0:	e01b      	b.n	800b00a <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800afd6:	b29b      	uxth	r3, r3
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d19d      	bne.n	800af18 <HAL_SPI_TransmitReceive+0x290>
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	2246      	movs	r2, #70	; 0x46
 800afe0:	5a9b      	ldrh	r3, [r3, r2]
 800afe2:	b29b      	uxth	r3, r3
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d197      	bne.n	800af18 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800afe8:	69fa      	ldr	r2, [r7, #28]
 800afea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	0018      	movs	r0, r3
 800aff0:	f000 fac6 	bl	800b580 <SPI_EndRxTxTransaction>
 800aff4:	1e03      	subs	r3, r0, #0
 800aff6:	d007      	beq.n	800b008 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 800aff8:	2323      	movs	r3, #35	; 0x23
 800affa:	18fb      	adds	r3, r7, r3
 800affc:	2201      	movs	r2, #1
 800affe:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	2220      	movs	r2, #32
 800b004:	661a      	str	r2, [r3, #96]	; 0x60
 800b006:	e000      	b.n	800b00a <HAL_SPI_TransmitReceive+0x382>
  }

error :
 800b008:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	225d      	movs	r2, #93	; 0x5d
 800b00e:	2101      	movs	r1, #1
 800b010:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	225c      	movs	r2, #92	; 0x5c
 800b016:	2100      	movs	r1, #0
 800b018:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800b01a:	2323      	movs	r3, #35	; 0x23
 800b01c:	18fb      	adds	r3, r7, r3
 800b01e:	781b      	ldrb	r3, [r3, #0]
}
 800b020:	0018      	movs	r0, r3
 800b022:	46bd      	mov	sp, r7
 800b024:	b00a      	add	sp, #40	; 0x28
 800b026:	bd80      	pop	{r7, pc}
 800b028:	ffffefff 	.word	0xffffefff

0800b02c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b088      	sub	sp, #32
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	685b      	ldr	r3, [r3, #4]
 800b03a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	689b      	ldr	r3, [r3, #8]
 800b042:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800b044:	69bb      	ldr	r3, [r7, #24]
 800b046:	099b      	lsrs	r3, r3, #6
 800b048:	001a      	movs	r2, r3
 800b04a:	2301      	movs	r3, #1
 800b04c:	4013      	ands	r3, r2
 800b04e:	d10f      	bne.n	800b070 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800b050:	69bb      	ldr	r3, [r7, #24]
 800b052:	2201      	movs	r2, #1
 800b054:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800b056:	d00b      	beq.n	800b070 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800b058:	69fb      	ldr	r3, [r7, #28]
 800b05a:	099b      	lsrs	r3, r3, #6
 800b05c:	001a      	movs	r2, r3
 800b05e:	2301      	movs	r3, #1
 800b060:	4013      	ands	r3, r2
 800b062:	d005      	beq.n	800b070 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b068:	687a      	ldr	r2, [r7, #4]
 800b06a:	0010      	movs	r0, r2
 800b06c:	4798      	blx	r3
    return;
 800b06e:	e0d5      	b.n	800b21c <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800b070:	69bb      	ldr	r3, [r7, #24]
 800b072:	085b      	lsrs	r3, r3, #1
 800b074:	001a      	movs	r2, r3
 800b076:	2301      	movs	r3, #1
 800b078:	4013      	ands	r3, r2
 800b07a:	d00b      	beq.n	800b094 <HAL_SPI_IRQHandler+0x68>
 800b07c:	69fb      	ldr	r3, [r7, #28]
 800b07e:	09db      	lsrs	r3, r3, #7
 800b080:	001a      	movs	r2, r3
 800b082:	2301      	movs	r3, #1
 800b084:	4013      	ands	r3, r2
 800b086:	d005      	beq.n	800b094 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b08c:	687a      	ldr	r2, [r7, #4]
 800b08e:	0010      	movs	r0, r2
 800b090:	4798      	blx	r3
    return;
 800b092:	e0c3      	b.n	800b21c <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800b094:	69bb      	ldr	r3, [r7, #24]
 800b096:	095b      	lsrs	r3, r3, #5
 800b098:	001a      	movs	r2, r3
 800b09a:	2301      	movs	r3, #1
 800b09c:	4013      	ands	r3, r2
 800b09e:	d10c      	bne.n	800b0ba <HAL_SPI_IRQHandler+0x8e>
 800b0a0:	69bb      	ldr	r3, [r7, #24]
 800b0a2:	099b      	lsrs	r3, r3, #6
 800b0a4:	001a      	movs	r2, r3
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	4013      	ands	r3, r2
 800b0aa:	d106      	bne.n	800b0ba <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800b0ac:	69bb      	ldr	r3, [r7, #24]
 800b0ae:	0a1b      	lsrs	r3, r3, #8
 800b0b0:	001a      	movs	r2, r3
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	4013      	ands	r3, r2
 800b0b6:	d100      	bne.n	800b0ba <HAL_SPI_IRQHandler+0x8e>
 800b0b8:	e0b0      	b.n	800b21c <HAL_SPI_IRQHandler+0x1f0>
 800b0ba:	69fb      	ldr	r3, [r7, #28]
 800b0bc:	095b      	lsrs	r3, r3, #5
 800b0be:	001a      	movs	r2, r3
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	4013      	ands	r3, r2
 800b0c4:	d100      	bne.n	800b0c8 <HAL_SPI_IRQHandler+0x9c>
 800b0c6:	e0a9      	b.n	800b21c <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800b0c8:	69bb      	ldr	r3, [r7, #24]
 800b0ca:	099b      	lsrs	r3, r3, #6
 800b0cc:	001a      	movs	r2, r3
 800b0ce:	2301      	movs	r3, #1
 800b0d0:	4013      	ands	r3, r2
 800b0d2:	d023      	beq.n	800b11c <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	225d      	movs	r2, #93	; 0x5d
 800b0d8:	5c9b      	ldrb	r3, [r3, r2]
 800b0da:	b2db      	uxtb	r3, r3
 800b0dc:	2b03      	cmp	r3, #3
 800b0de:	d011      	beq.n	800b104 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b0e4:	2204      	movs	r2, #4
 800b0e6:	431a      	orrs	r2, r3
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	617b      	str	r3, [r7, #20]
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	68db      	ldr	r3, [r3, #12]
 800b0f6:	617b      	str	r3, [r7, #20]
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	689b      	ldr	r3, [r3, #8]
 800b0fe:	617b      	str	r3, [r7, #20]
 800b100:	697b      	ldr	r3, [r7, #20]
 800b102:	e00b      	b.n	800b11c <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b104:	2300      	movs	r3, #0
 800b106:	613b      	str	r3, [r7, #16]
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	68db      	ldr	r3, [r3, #12]
 800b10e:	613b      	str	r3, [r7, #16]
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	689b      	ldr	r3, [r3, #8]
 800b116:	613b      	str	r3, [r7, #16]
 800b118:	693b      	ldr	r3, [r7, #16]
        return;
 800b11a:	e07f      	b.n	800b21c <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800b11c:	69bb      	ldr	r3, [r7, #24]
 800b11e:	095b      	lsrs	r3, r3, #5
 800b120:	001a      	movs	r2, r3
 800b122:	2301      	movs	r3, #1
 800b124:	4013      	ands	r3, r2
 800b126:	d014      	beq.n	800b152 <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b12c:	2201      	movs	r2, #1
 800b12e:	431a      	orrs	r2, r3
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b134:	2300      	movs	r3, #0
 800b136:	60fb      	str	r3, [r7, #12]
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	689b      	ldr	r3, [r3, #8]
 800b13e:	60fb      	str	r3, [r7, #12]
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	681a      	ldr	r2, [r3, #0]
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	2140      	movs	r1, #64	; 0x40
 800b14c:	438a      	bics	r2, r1
 800b14e:	601a      	str	r2, [r3, #0]
 800b150:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800b152:	69bb      	ldr	r3, [r7, #24]
 800b154:	0a1b      	lsrs	r3, r3, #8
 800b156:	001a      	movs	r2, r3
 800b158:	2301      	movs	r3, #1
 800b15a:	4013      	ands	r3, r2
 800b15c:	d00c      	beq.n	800b178 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b162:	2208      	movs	r2, #8
 800b164:	431a      	orrs	r2, r3
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b16a:	2300      	movs	r3, #0
 800b16c:	60bb      	str	r3, [r7, #8]
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	689b      	ldr	r3, [r3, #8]
 800b174:	60bb      	str	r3, [r7, #8]
 800b176:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d04c      	beq.n	800b21a <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	685a      	ldr	r2, [r3, #4]
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	21e0      	movs	r1, #224	; 0xe0
 800b18c:	438a      	bics	r2, r1
 800b18e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	225d      	movs	r2, #93	; 0x5d
 800b194:	2101      	movs	r1, #1
 800b196:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800b198:	69fb      	ldr	r3, [r7, #28]
 800b19a:	2202      	movs	r2, #2
 800b19c:	4013      	ands	r3, r2
 800b19e:	d103      	bne.n	800b1a8 <HAL_SPI_IRQHandler+0x17c>
 800b1a0:	69fb      	ldr	r3, [r7, #28]
 800b1a2:	2201      	movs	r2, #1
 800b1a4:	4013      	ands	r3, r2
 800b1a6:	d032      	beq.n	800b20e <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	685a      	ldr	r2, [r3, #4]
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	2103      	movs	r1, #3
 800b1b4:	438a      	bics	r2, r1
 800b1b6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d010      	beq.n	800b1e2 <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1c4:	4a17      	ldr	r2, [pc, #92]	; (800b224 <HAL_SPI_IRQHandler+0x1f8>)
 800b1c6:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1cc:	0018      	movs	r0, r3
 800b1ce:	f7fe f87d 	bl	80092cc <HAL_DMA_Abort_IT>
 800b1d2:	1e03      	subs	r3, r0, #0
 800b1d4:	d005      	beq.n	800b1e2 <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b1da:	2240      	movs	r2, #64	; 0x40
 800b1dc:	431a      	orrs	r2, r3
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d016      	beq.n	800b218 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1ee:	4a0d      	ldr	r2, [pc, #52]	; (800b224 <HAL_SPI_IRQHandler+0x1f8>)
 800b1f0:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1f6:	0018      	movs	r0, r3
 800b1f8:	f7fe f868 	bl	80092cc <HAL_DMA_Abort_IT>
 800b1fc:	1e03      	subs	r3, r0, #0
 800b1fe:	d00b      	beq.n	800b218 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b204:	2240      	movs	r2, #64	; 0x40
 800b206:	431a      	orrs	r2, r3
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800b20c:	e004      	b.n	800b218 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	0018      	movs	r0, r3
 800b212:	f000 f809 	bl	800b228 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800b216:	e000      	b.n	800b21a <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 800b218:	46c0      	nop			; (mov r8, r8)
    return;
 800b21a:	46c0      	nop			; (mov r8, r8)
  }
}
 800b21c:	46bd      	mov	sp, r7
 800b21e:	b008      	add	sp, #32
 800b220:	bd80      	pop	{r7, pc}
 800b222:	46c0      	nop			; (mov r8, r8)
 800b224:	0800b239 	.word	0x0800b239

0800b228 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b082      	sub	sp, #8
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800b230:	46c0      	nop			; (mov r8, r8)
 800b232:	46bd      	mov	sp, r7
 800b234:	b002      	add	sp, #8
 800b236:	bd80      	pop	{r7, pc}

0800b238 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b084      	sub	sp, #16
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b244:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	2246      	movs	r2, #70	; 0x46
 800b24a:	2100      	movs	r1, #0
 800b24c:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	2200      	movs	r2, #0
 800b252:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	0018      	movs	r0, r3
 800b258:	f7ff ffe6 	bl	800b228 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b25c:	46c0      	nop			; (mov r8, r8)
 800b25e:	46bd      	mov	sp, r7
 800b260:	b004      	add	sp, #16
 800b262:	bd80      	pop	{r7, pc}

0800b264 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b088      	sub	sp, #32
 800b268:	af00      	add	r7, sp, #0
 800b26a:	60f8      	str	r0, [r7, #12]
 800b26c:	60b9      	str	r1, [r7, #8]
 800b26e:	603b      	str	r3, [r7, #0]
 800b270:	1dfb      	adds	r3, r7, #7
 800b272:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b274:	f7fd fdac 	bl	8008dd0 <HAL_GetTick>
 800b278:	0002      	movs	r2, r0
 800b27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b27c:	1a9b      	subs	r3, r3, r2
 800b27e:	683a      	ldr	r2, [r7, #0]
 800b280:	18d3      	adds	r3, r2, r3
 800b282:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b284:	f7fd fda4 	bl	8008dd0 <HAL_GetTick>
 800b288:	0003      	movs	r3, r0
 800b28a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b28c:	4b3a      	ldr	r3, [pc, #232]	; (800b378 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	015b      	lsls	r3, r3, #5
 800b292:	0d1b      	lsrs	r3, r3, #20
 800b294:	69fa      	ldr	r2, [r7, #28]
 800b296:	4353      	muls	r3, r2
 800b298:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b29a:	e058      	b.n	800b34e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	3301      	adds	r3, #1
 800b2a0:	d055      	beq.n	800b34e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b2a2:	f7fd fd95 	bl	8008dd0 <HAL_GetTick>
 800b2a6:	0002      	movs	r2, r0
 800b2a8:	69bb      	ldr	r3, [r7, #24]
 800b2aa:	1ad3      	subs	r3, r2, r3
 800b2ac:	69fa      	ldr	r2, [r7, #28]
 800b2ae:	429a      	cmp	r2, r3
 800b2b0:	d902      	bls.n	800b2b8 <SPI_WaitFlagStateUntilTimeout+0x54>
 800b2b2:	69fb      	ldr	r3, [r7, #28]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d142      	bne.n	800b33e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	685a      	ldr	r2, [r3, #4]
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	21e0      	movs	r1, #224	; 0xe0
 800b2c4:	438a      	bics	r2, r1
 800b2c6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	685a      	ldr	r2, [r3, #4]
 800b2cc:	2382      	movs	r3, #130	; 0x82
 800b2ce:	005b      	lsls	r3, r3, #1
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	d113      	bne.n	800b2fc <SPI_WaitFlagStateUntilTimeout+0x98>
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	689a      	ldr	r2, [r3, #8]
 800b2d8:	2380      	movs	r3, #128	; 0x80
 800b2da:	021b      	lsls	r3, r3, #8
 800b2dc:	429a      	cmp	r2, r3
 800b2de:	d005      	beq.n	800b2ec <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	689a      	ldr	r2, [r3, #8]
 800b2e4:	2380      	movs	r3, #128	; 0x80
 800b2e6:	00db      	lsls	r3, r3, #3
 800b2e8:	429a      	cmp	r2, r3
 800b2ea:	d107      	bne.n	800b2fc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	681a      	ldr	r2, [r3, #0]
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	2140      	movs	r1, #64	; 0x40
 800b2f8:	438a      	bics	r2, r1
 800b2fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b300:	2380      	movs	r3, #128	; 0x80
 800b302:	019b      	lsls	r3, r3, #6
 800b304:	429a      	cmp	r2, r3
 800b306:	d110      	bne.n	800b32a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	681a      	ldr	r2, [r3, #0]
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	491a      	ldr	r1, [pc, #104]	; (800b37c <SPI_WaitFlagStateUntilTimeout+0x118>)
 800b314:	400a      	ands	r2, r1
 800b316:	601a      	str	r2, [r3, #0]
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	681a      	ldr	r2, [r3, #0]
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	2180      	movs	r1, #128	; 0x80
 800b324:	0189      	lsls	r1, r1, #6
 800b326:	430a      	orrs	r2, r1
 800b328:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	225d      	movs	r2, #93	; 0x5d
 800b32e:	2101      	movs	r1, #1
 800b330:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	225c      	movs	r2, #92	; 0x5c
 800b336:	2100      	movs	r1, #0
 800b338:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800b33a:	2303      	movs	r3, #3
 800b33c:	e017      	b.n	800b36e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d101      	bne.n	800b348 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800b344:	2300      	movs	r3, #0
 800b346:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b348:	697b      	ldr	r3, [r7, #20]
 800b34a:	3b01      	subs	r3, #1
 800b34c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	689b      	ldr	r3, [r3, #8]
 800b354:	68ba      	ldr	r2, [r7, #8]
 800b356:	4013      	ands	r3, r2
 800b358:	68ba      	ldr	r2, [r7, #8]
 800b35a:	1ad3      	subs	r3, r2, r3
 800b35c:	425a      	negs	r2, r3
 800b35e:	4153      	adcs	r3, r2
 800b360:	b2db      	uxtb	r3, r3
 800b362:	001a      	movs	r2, r3
 800b364:	1dfb      	adds	r3, r7, #7
 800b366:	781b      	ldrb	r3, [r3, #0]
 800b368:	429a      	cmp	r2, r3
 800b36a:	d197      	bne.n	800b29c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b36c:	2300      	movs	r3, #0
}
 800b36e:	0018      	movs	r0, r3
 800b370:	46bd      	mov	sp, r7
 800b372:	b008      	add	sp, #32
 800b374:	bd80      	pop	{r7, pc}
 800b376:	46c0      	nop			; (mov r8, r8)
 800b378:	200000a8 	.word	0x200000a8
 800b37c:	ffffdfff 	.word	0xffffdfff

0800b380 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b08a      	sub	sp, #40	; 0x28
 800b384:	af00      	add	r7, sp, #0
 800b386:	60f8      	str	r0, [r7, #12]
 800b388:	60b9      	str	r1, [r7, #8]
 800b38a:	607a      	str	r2, [r7, #4]
 800b38c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800b38e:	2317      	movs	r3, #23
 800b390:	18fb      	adds	r3, r7, r3
 800b392:	2200      	movs	r2, #0
 800b394:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800b396:	f7fd fd1b 	bl	8008dd0 <HAL_GetTick>
 800b39a:	0002      	movs	r2, r0
 800b39c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b39e:	1a9b      	subs	r3, r3, r2
 800b3a0:	683a      	ldr	r2, [r7, #0]
 800b3a2:	18d3      	adds	r3, r2, r3
 800b3a4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800b3a6:	f7fd fd13 	bl	8008dd0 <HAL_GetTick>
 800b3aa:	0003      	movs	r3, r0
 800b3ac:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	330c      	adds	r3, #12
 800b3b4:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800b3b6:	4b41      	ldr	r3, [pc, #260]	; (800b4bc <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800b3b8:	681a      	ldr	r2, [r3, #0]
 800b3ba:	0013      	movs	r3, r2
 800b3bc:	009b      	lsls	r3, r3, #2
 800b3be:	189b      	adds	r3, r3, r2
 800b3c0:	00da      	lsls	r2, r3, #3
 800b3c2:	1ad3      	subs	r3, r2, r3
 800b3c4:	0d1b      	lsrs	r3, r3, #20
 800b3c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3c8:	4353      	muls	r3, r2
 800b3ca:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800b3cc:	e068      	b.n	800b4a0 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800b3ce:	68ba      	ldr	r2, [r7, #8]
 800b3d0:	23c0      	movs	r3, #192	; 0xc0
 800b3d2:	00db      	lsls	r3, r3, #3
 800b3d4:	429a      	cmp	r2, r3
 800b3d6:	d10a      	bne.n	800b3ee <SPI_WaitFifoStateUntilTimeout+0x6e>
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d107      	bne.n	800b3ee <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800b3de:	69fb      	ldr	r3, [r7, #28]
 800b3e0:	781b      	ldrb	r3, [r3, #0]
 800b3e2:	b2da      	uxtb	r2, r3
 800b3e4:	2117      	movs	r1, #23
 800b3e6:	187b      	adds	r3, r7, r1
 800b3e8:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800b3ea:	187b      	adds	r3, r7, r1
 800b3ec:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	3301      	adds	r3, #1
 800b3f2:	d055      	beq.n	800b4a0 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b3f4:	f7fd fcec 	bl	8008dd0 <HAL_GetTick>
 800b3f8:	0002      	movs	r2, r0
 800b3fa:	6a3b      	ldr	r3, [r7, #32]
 800b3fc:	1ad3      	subs	r3, r2, r3
 800b3fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b400:	429a      	cmp	r2, r3
 800b402:	d902      	bls.n	800b40a <SPI_WaitFifoStateUntilTimeout+0x8a>
 800b404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b406:	2b00      	cmp	r3, #0
 800b408:	d142      	bne.n	800b490 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	685a      	ldr	r2, [r3, #4]
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	21e0      	movs	r1, #224	; 0xe0
 800b416:	438a      	bics	r2, r1
 800b418:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	685a      	ldr	r2, [r3, #4]
 800b41e:	2382      	movs	r3, #130	; 0x82
 800b420:	005b      	lsls	r3, r3, #1
 800b422:	429a      	cmp	r2, r3
 800b424:	d113      	bne.n	800b44e <SPI_WaitFifoStateUntilTimeout+0xce>
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	689a      	ldr	r2, [r3, #8]
 800b42a:	2380      	movs	r3, #128	; 0x80
 800b42c:	021b      	lsls	r3, r3, #8
 800b42e:	429a      	cmp	r2, r3
 800b430:	d005      	beq.n	800b43e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	689a      	ldr	r2, [r3, #8]
 800b436:	2380      	movs	r3, #128	; 0x80
 800b438:	00db      	lsls	r3, r3, #3
 800b43a:	429a      	cmp	r2, r3
 800b43c:	d107      	bne.n	800b44e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	681a      	ldr	r2, [r3, #0]
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	2140      	movs	r1, #64	; 0x40
 800b44a:	438a      	bics	r2, r1
 800b44c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b452:	2380      	movs	r3, #128	; 0x80
 800b454:	019b      	lsls	r3, r3, #6
 800b456:	429a      	cmp	r2, r3
 800b458:	d110      	bne.n	800b47c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	681a      	ldr	r2, [r3, #0]
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	4916      	ldr	r1, [pc, #88]	; (800b4c0 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800b466:	400a      	ands	r2, r1
 800b468:	601a      	str	r2, [r3, #0]
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	681a      	ldr	r2, [r3, #0]
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	2180      	movs	r1, #128	; 0x80
 800b476:	0189      	lsls	r1, r1, #6
 800b478:	430a      	orrs	r2, r1
 800b47a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	225d      	movs	r2, #93	; 0x5d
 800b480:	2101      	movs	r1, #1
 800b482:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	225c      	movs	r2, #92	; 0x5c
 800b488:	2100      	movs	r1, #0
 800b48a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800b48c:	2303      	movs	r3, #3
 800b48e:	e010      	b.n	800b4b2 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b490:	69bb      	ldr	r3, [r7, #24]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d101      	bne.n	800b49a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800b496:	2300      	movs	r3, #0
 800b498:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800b49a:	69bb      	ldr	r3, [r7, #24]
 800b49c:	3b01      	subs	r3, #1
 800b49e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	689b      	ldr	r3, [r3, #8]
 800b4a6:	68ba      	ldr	r2, [r7, #8]
 800b4a8:	4013      	ands	r3, r2
 800b4aa:	687a      	ldr	r2, [r7, #4]
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	d18e      	bne.n	800b3ce <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800b4b0:	2300      	movs	r3, #0
}
 800b4b2:	0018      	movs	r0, r3
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	b00a      	add	sp, #40	; 0x28
 800b4b8:	bd80      	pop	{r7, pc}
 800b4ba:	46c0      	nop			; (mov r8, r8)
 800b4bc:	200000a8 	.word	0x200000a8
 800b4c0:	ffffdfff 	.word	0xffffdfff

0800b4c4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b086      	sub	sp, #24
 800b4c8:	af02      	add	r7, sp, #8
 800b4ca:	60f8      	str	r0, [r7, #12]
 800b4cc:	60b9      	str	r1, [r7, #8]
 800b4ce:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	685a      	ldr	r2, [r3, #4]
 800b4d4:	2382      	movs	r3, #130	; 0x82
 800b4d6:	005b      	lsls	r3, r3, #1
 800b4d8:	429a      	cmp	r2, r3
 800b4da:	d113      	bne.n	800b504 <SPI_EndRxTransaction+0x40>
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	689a      	ldr	r2, [r3, #8]
 800b4e0:	2380      	movs	r3, #128	; 0x80
 800b4e2:	021b      	lsls	r3, r3, #8
 800b4e4:	429a      	cmp	r2, r3
 800b4e6:	d005      	beq.n	800b4f4 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	689a      	ldr	r2, [r3, #8]
 800b4ec:	2380      	movs	r3, #128	; 0x80
 800b4ee:	00db      	lsls	r3, r3, #3
 800b4f0:	429a      	cmp	r2, r3
 800b4f2:	d107      	bne.n	800b504 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	681a      	ldr	r2, [r3, #0]
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	2140      	movs	r1, #64	; 0x40
 800b500:	438a      	bics	r2, r1
 800b502:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b504:	68ba      	ldr	r2, [r7, #8]
 800b506:	68f8      	ldr	r0, [r7, #12]
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	9300      	str	r3, [sp, #0]
 800b50c:	0013      	movs	r3, r2
 800b50e:	2200      	movs	r2, #0
 800b510:	2180      	movs	r1, #128	; 0x80
 800b512:	f7ff fea7 	bl	800b264 <SPI_WaitFlagStateUntilTimeout>
 800b516:	1e03      	subs	r3, r0, #0
 800b518:	d007      	beq.n	800b52a <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b51e:	2220      	movs	r2, #32
 800b520:	431a      	orrs	r2, r3
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b526:	2303      	movs	r3, #3
 800b528:	e026      	b.n	800b578 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	685a      	ldr	r2, [r3, #4]
 800b52e:	2382      	movs	r3, #130	; 0x82
 800b530:	005b      	lsls	r3, r3, #1
 800b532:	429a      	cmp	r2, r3
 800b534:	d11f      	bne.n	800b576 <SPI_EndRxTransaction+0xb2>
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	689a      	ldr	r2, [r3, #8]
 800b53a:	2380      	movs	r3, #128	; 0x80
 800b53c:	021b      	lsls	r3, r3, #8
 800b53e:	429a      	cmp	r2, r3
 800b540:	d005      	beq.n	800b54e <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	689a      	ldr	r2, [r3, #8]
 800b546:	2380      	movs	r3, #128	; 0x80
 800b548:	00db      	lsls	r3, r3, #3
 800b54a:	429a      	cmp	r2, r3
 800b54c:	d113      	bne.n	800b576 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b54e:	68ba      	ldr	r2, [r7, #8]
 800b550:	23c0      	movs	r3, #192	; 0xc0
 800b552:	00d9      	lsls	r1, r3, #3
 800b554:	68f8      	ldr	r0, [r7, #12]
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	9300      	str	r3, [sp, #0]
 800b55a:	0013      	movs	r3, r2
 800b55c:	2200      	movs	r2, #0
 800b55e:	f7ff ff0f 	bl	800b380 <SPI_WaitFifoStateUntilTimeout>
 800b562:	1e03      	subs	r3, r0, #0
 800b564:	d007      	beq.n	800b576 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b56a:	2220      	movs	r2, #32
 800b56c:	431a      	orrs	r2, r3
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800b572:	2303      	movs	r3, #3
 800b574:	e000      	b.n	800b578 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800b576:	2300      	movs	r3, #0
}
 800b578:	0018      	movs	r0, r3
 800b57a:	46bd      	mov	sp, r7
 800b57c:	b004      	add	sp, #16
 800b57e:	bd80      	pop	{r7, pc}

0800b580 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b086      	sub	sp, #24
 800b584:	af02      	add	r7, sp, #8
 800b586:	60f8      	str	r0, [r7, #12]
 800b588:	60b9      	str	r1, [r7, #8]
 800b58a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b58c:	68ba      	ldr	r2, [r7, #8]
 800b58e:	23c0      	movs	r3, #192	; 0xc0
 800b590:	0159      	lsls	r1, r3, #5
 800b592:	68f8      	ldr	r0, [r7, #12]
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	9300      	str	r3, [sp, #0]
 800b598:	0013      	movs	r3, r2
 800b59a:	2200      	movs	r2, #0
 800b59c:	f7ff fef0 	bl	800b380 <SPI_WaitFifoStateUntilTimeout>
 800b5a0:	1e03      	subs	r3, r0, #0
 800b5a2:	d007      	beq.n	800b5b4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b5a8:	2220      	movs	r2, #32
 800b5aa:	431a      	orrs	r2, r3
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b5b0:	2303      	movs	r3, #3
 800b5b2:	e027      	b.n	800b604 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b5b4:	68ba      	ldr	r2, [r7, #8]
 800b5b6:	68f8      	ldr	r0, [r7, #12]
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	9300      	str	r3, [sp, #0]
 800b5bc:	0013      	movs	r3, r2
 800b5be:	2200      	movs	r2, #0
 800b5c0:	2180      	movs	r1, #128	; 0x80
 800b5c2:	f7ff fe4f 	bl	800b264 <SPI_WaitFlagStateUntilTimeout>
 800b5c6:	1e03      	subs	r3, r0, #0
 800b5c8:	d007      	beq.n	800b5da <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b5ce:	2220      	movs	r2, #32
 800b5d0:	431a      	orrs	r2, r3
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b5d6:	2303      	movs	r3, #3
 800b5d8:	e014      	b.n	800b604 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b5da:	68ba      	ldr	r2, [r7, #8]
 800b5dc:	23c0      	movs	r3, #192	; 0xc0
 800b5de:	00d9      	lsls	r1, r3, #3
 800b5e0:	68f8      	ldr	r0, [r7, #12]
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	9300      	str	r3, [sp, #0]
 800b5e6:	0013      	movs	r3, r2
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	f7ff fec9 	bl	800b380 <SPI_WaitFifoStateUntilTimeout>
 800b5ee:	1e03      	subs	r3, r0, #0
 800b5f0:	d007      	beq.n	800b602 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b5f6:	2220      	movs	r2, #32
 800b5f8:	431a      	orrs	r2, r3
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b5fe:	2303      	movs	r3, #3
 800b600:	e000      	b.n	800b604 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800b602:	2300      	movs	r3, #0
}
 800b604:	0018      	movs	r0, r3
 800b606:	46bd      	mov	sp, r7
 800b608:	b004      	add	sp, #16
 800b60a:	bd80      	pop	{r7, pc}

0800b60c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b082      	sub	sp, #8
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d101      	bne.n	800b61e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b61a:	2301      	movs	r3, #1
 800b61c:	e04a      	b.n	800b6b4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	223d      	movs	r2, #61	; 0x3d
 800b622:	5c9b      	ldrb	r3, [r3, r2]
 800b624:	b2db      	uxtb	r3, r3
 800b626:	2b00      	cmp	r3, #0
 800b628:	d107      	bne.n	800b63a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	223c      	movs	r2, #60	; 0x3c
 800b62e:	2100      	movs	r1, #0
 800b630:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	0018      	movs	r0, r3
 800b636:	f7fc fadd 	bl	8007bf4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	223d      	movs	r2, #61	; 0x3d
 800b63e:	2102      	movs	r1, #2
 800b640:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681a      	ldr	r2, [r3, #0]
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	3304      	adds	r3, #4
 800b64a:	0019      	movs	r1, r3
 800b64c:	0010      	movs	r0, r2
 800b64e:	f000 fdb3 	bl	800c1b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2248      	movs	r2, #72	; 0x48
 800b656:	2101      	movs	r1, #1
 800b658:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	223e      	movs	r2, #62	; 0x3e
 800b65e:	2101      	movs	r1, #1
 800b660:	5499      	strb	r1, [r3, r2]
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	223f      	movs	r2, #63	; 0x3f
 800b666:	2101      	movs	r1, #1
 800b668:	5499      	strb	r1, [r3, r2]
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2240      	movs	r2, #64	; 0x40
 800b66e:	2101      	movs	r1, #1
 800b670:	5499      	strb	r1, [r3, r2]
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2241      	movs	r2, #65	; 0x41
 800b676:	2101      	movs	r1, #1
 800b678:	5499      	strb	r1, [r3, r2]
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2242      	movs	r2, #66	; 0x42
 800b67e:	2101      	movs	r1, #1
 800b680:	5499      	strb	r1, [r3, r2]
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2243      	movs	r2, #67	; 0x43
 800b686:	2101      	movs	r1, #1
 800b688:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2244      	movs	r2, #68	; 0x44
 800b68e:	2101      	movs	r1, #1
 800b690:	5499      	strb	r1, [r3, r2]
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2245      	movs	r2, #69	; 0x45
 800b696:	2101      	movs	r1, #1
 800b698:	5499      	strb	r1, [r3, r2]
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2246      	movs	r2, #70	; 0x46
 800b69e:	2101      	movs	r1, #1
 800b6a0:	5499      	strb	r1, [r3, r2]
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2247      	movs	r2, #71	; 0x47
 800b6a6:	2101      	movs	r1, #1
 800b6a8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	223d      	movs	r2, #61	; 0x3d
 800b6ae:	2101      	movs	r1, #1
 800b6b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b6b2:	2300      	movs	r3, #0
}
 800b6b4:	0018      	movs	r0, r3
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	b002      	add	sp, #8
 800b6ba:	bd80      	pop	{r7, pc}

0800b6bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b084      	sub	sp, #16
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	223d      	movs	r2, #61	; 0x3d
 800b6c8:	5c9b      	ldrb	r3, [r3, r2]
 800b6ca:	b2db      	uxtb	r3, r3
 800b6cc:	2b01      	cmp	r3, #1
 800b6ce:	d001      	beq.n	800b6d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b6d0:	2301      	movs	r3, #1
 800b6d2:	e03c      	b.n	800b74e <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	223d      	movs	r2, #61	; 0x3d
 800b6d8:	2102      	movs	r1, #2
 800b6da:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	68da      	ldr	r2, [r3, #12]
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	2101      	movs	r1, #1
 800b6e8:	430a      	orrs	r2, r1
 800b6ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	4a19      	ldr	r2, [pc, #100]	; (800b758 <HAL_TIM_Base_Start_IT+0x9c>)
 800b6f2:	4293      	cmp	r3, r2
 800b6f4:	d009      	beq.n	800b70a <HAL_TIM_Base_Start_IT+0x4e>
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	4a18      	ldr	r2, [pc, #96]	; (800b75c <HAL_TIM_Base_Start_IT+0xa0>)
 800b6fc:	4293      	cmp	r3, r2
 800b6fe:	d004      	beq.n	800b70a <HAL_TIM_Base_Start_IT+0x4e>
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	4a16      	ldr	r2, [pc, #88]	; (800b760 <HAL_TIM_Base_Start_IT+0xa4>)
 800b706:	4293      	cmp	r3, r2
 800b708:	d116      	bne.n	800b738 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	689b      	ldr	r3, [r3, #8]
 800b710:	4a14      	ldr	r2, [pc, #80]	; (800b764 <HAL_TIM_Base_Start_IT+0xa8>)
 800b712:	4013      	ands	r3, r2
 800b714:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	2b06      	cmp	r3, #6
 800b71a:	d016      	beq.n	800b74a <HAL_TIM_Base_Start_IT+0x8e>
 800b71c:	68fa      	ldr	r2, [r7, #12]
 800b71e:	2380      	movs	r3, #128	; 0x80
 800b720:	025b      	lsls	r3, r3, #9
 800b722:	429a      	cmp	r2, r3
 800b724:	d011      	beq.n	800b74a <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	681a      	ldr	r2, [r3, #0]
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	2101      	movs	r1, #1
 800b732:	430a      	orrs	r2, r1
 800b734:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b736:	e008      	b.n	800b74a <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	681a      	ldr	r2, [r3, #0]
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	2101      	movs	r1, #1
 800b744:	430a      	orrs	r2, r1
 800b746:	601a      	str	r2, [r3, #0]
 800b748:	e000      	b.n	800b74c <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b74a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800b74c:	2300      	movs	r3, #0
}
 800b74e:	0018      	movs	r0, r3
 800b750:	46bd      	mov	sp, r7
 800b752:	b004      	add	sp, #16
 800b754:	bd80      	pop	{r7, pc}
 800b756:	46c0      	nop			; (mov r8, r8)
 800b758:	40012c00 	.word	0x40012c00
 800b75c:	40000400 	.word	0x40000400
 800b760:	40014000 	.word	0x40014000
 800b764:	00010007 	.word	0x00010007

0800b768 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b082      	sub	sp, #8
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	68da      	ldr	r2, [r3, #12]
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	2101      	movs	r1, #1
 800b77c:	438a      	bics	r2, r1
 800b77e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	6a1b      	ldr	r3, [r3, #32]
 800b786:	4a0d      	ldr	r2, [pc, #52]	; (800b7bc <HAL_TIM_Base_Stop_IT+0x54>)
 800b788:	4013      	ands	r3, r2
 800b78a:	d10d      	bne.n	800b7a8 <HAL_TIM_Base_Stop_IT+0x40>
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	6a1b      	ldr	r3, [r3, #32]
 800b792:	4a0b      	ldr	r2, [pc, #44]	; (800b7c0 <HAL_TIM_Base_Stop_IT+0x58>)
 800b794:	4013      	ands	r3, r2
 800b796:	d107      	bne.n	800b7a8 <HAL_TIM_Base_Stop_IT+0x40>
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	681a      	ldr	r2, [r3, #0]
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	2101      	movs	r1, #1
 800b7a4:	438a      	bics	r2, r1
 800b7a6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	223d      	movs	r2, #61	; 0x3d
 800b7ac:	2101      	movs	r1, #1
 800b7ae:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800b7b0:	2300      	movs	r3, #0
}
 800b7b2:	0018      	movs	r0, r3
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	b002      	add	sp, #8
 800b7b8:	bd80      	pop	{r7, pc}
 800b7ba:	46c0      	nop			; (mov r8, r8)
 800b7bc:	00001111 	.word	0x00001111
 800b7c0:	00000444 	.word	0x00000444

0800b7c4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b082      	sub	sp, #8
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d101      	bne.n	800b7d6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800b7d2:	2301      	movs	r3, #1
 800b7d4:	e04a      	b.n	800b86c <HAL_TIM_IC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	223d      	movs	r2, #61	; 0x3d
 800b7da:	5c9b      	ldrb	r3, [r3, r2]
 800b7dc:	b2db      	uxtb	r3, r3
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d107      	bne.n	800b7f2 <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	223c      	movs	r2, #60	; 0x3c
 800b7e6:	2100      	movs	r1, #0
 800b7e8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	0018      	movs	r0, r3
 800b7ee:	f7fc f981 	bl	8007af4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	223d      	movs	r2, #61	; 0x3d
 800b7f6:	2102      	movs	r1, #2
 800b7f8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681a      	ldr	r2, [r3, #0]
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	3304      	adds	r3, #4
 800b802:	0019      	movs	r1, r3
 800b804:	0010      	movs	r0, r2
 800b806:	f000 fcd7 	bl	800c1b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2248      	movs	r2, #72	; 0x48
 800b80e:	2101      	movs	r1, #1
 800b810:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	223e      	movs	r2, #62	; 0x3e
 800b816:	2101      	movs	r1, #1
 800b818:	5499      	strb	r1, [r3, r2]
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	223f      	movs	r2, #63	; 0x3f
 800b81e:	2101      	movs	r1, #1
 800b820:	5499      	strb	r1, [r3, r2]
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	2240      	movs	r2, #64	; 0x40
 800b826:	2101      	movs	r1, #1
 800b828:	5499      	strb	r1, [r3, r2]
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2241      	movs	r2, #65	; 0x41
 800b82e:	2101      	movs	r1, #1
 800b830:	5499      	strb	r1, [r3, r2]
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2242      	movs	r2, #66	; 0x42
 800b836:	2101      	movs	r1, #1
 800b838:	5499      	strb	r1, [r3, r2]
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2243      	movs	r2, #67	; 0x43
 800b83e:	2101      	movs	r1, #1
 800b840:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	2244      	movs	r2, #68	; 0x44
 800b846:	2101      	movs	r1, #1
 800b848:	5499      	strb	r1, [r3, r2]
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2245      	movs	r2, #69	; 0x45
 800b84e:	2101      	movs	r1, #1
 800b850:	5499      	strb	r1, [r3, r2]
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	2246      	movs	r2, #70	; 0x46
 800b856:	2101      	movs	r1, #1
 800b858:	5499      	strb	r1, [r3, r2]
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	2247      	movs	r2, #71	; 0x47
 800b85e:	2101      	movs	r1, #1
 800b860:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	223d      	movs	r2, #61	; 0x3d
 800b866:	2101      	movs	r1, #1
 800b868:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b86a:	2300      	movs	r3, #0
}
 800b86c:	0018      	movs	r0, r3
 800b86e:	46bd      	mov	sp, r7
 800b870:	b002      	add	sp, #8
 800b872:	bd80      	pop	{r7, pc}

0800b874 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b086      	sub	sp, #24
 800b878:	af00      	add	r7, sp, #0
 800b87a:	60f8      	str	r0, [r7, #12]
 800b87c:	60b9      	str	r1, [r7, #8]
 800b87e:	607a      	str	r2, [r7, #4]
 800b880:	001a      	movs	r2, r3
 800b882:	1cbb      	adds	r3, r7, #2
 800b884:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b886:	2317      	movs	r3, #23
 800b888:	18fb      	adds	r3, r7, r3
 800b88a:	2200      	movs	r2, #0
 800b88c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800b88e:	68bb      	ldr	r3, [r7, #8]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d104      	bne.n	800b89e <HAL_TIM_IC_Start_DMA+0x2a>
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	223e      	movs	r2, #62	; 0x3e
 800b898:	5c9b      	ldrb	r3, [r3, r2]
 800b89a:	b2db      	uxtb	r3, r3
 800b89c:	e023      	b.n	800b8e6 <HAL_TIM_IC_Start_DMA+0x72>
 800b89e:	68bb      	ldr	r3, [r7, #8]
 800b8a0:	2b04      	cmp	r3, #4
 800b8a2:	d104      	bne.n	800b8ae <HAL_TIM_IC_Start_DMA+0x3a>
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	223f      	movs	r2, #63	; 0x3f
 800b8a8:	5c9b      	ldrb	r3, [r3, r2]
 800b8aa:	b2db      	uxtb	r3, r3
 800b8ac:	e01b      	b.n	800b8e6 <HAL_TIM_IC_Start_DMA+0x72>
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	2b08      	cmp	r3, #8
 800b8b2:	d104      	bne.n	800b8be <HAL_TIM_IC_Start_DMA+0x4a>
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	2240      	movs	r2, #64	; 0x40
 800b8b8:	5c9b      	ldrb	r3, [r3, r2]
 800b8ba:	b2db      	uxtb	r3, r3
 800b8bc:	e013      	b.n	800b8e6 <HAL_TIM_IC_Start_DMA+0x72>
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	2b0c      	cmp	r3, #12
 800b8c2:	d104      	bne.n	800b8ce <HAL_TIM_IC_Start_DMA+0x5a>
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	2241      	movs	r2, #65	; 0x41
 800b8c8:	5c9b      	ldrb	r3, [r3, r2]
 800b8ca:	b2db      	uxtb	r3, r3
 800b8cc:	e00b      	b.n	800b8e6 <HAL_TIM_IC_Start_DMA+0x72>
 800b8ce:	68bb      	ldr	r3, [r7, #8]
 800b8d0:	2b10      	cmp	r3, #16
 800b8d2:	d104      	bne.n	800b8de <HAL_TIM_IC_Start_DMA+0x6a>
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	2242      	movs	r2, #66	; 0x42
 800b8d8:	5c9b      	ldrb	r3, [r3, r2]
 800b8da:	b2db      	uxtb	r3, r3
 800b8dc:	e003      	b.n	800b8e6 <HAL_TIM_IC_Start_DMA+0x72>
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	2243      	movs	r2, #67	; 0x43
 800b8e2:	5c9b      	ldrb	r3, [r3, r2]
 800b8e4:	b2db      	uxtb	r3, r3
 800b8e6:	2216      	movs	r2, #22
 800b8e8:	18ba      	adds	r2, r7, r2
 800b8ea:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d104      	bne.n	800b8fc <HAL_TIM_IC_Start_DMA+0x88>
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	2244      	movs	r2, #68	; 0x44
 800b8f6:	5c9b      	ldrb	r3, [r3, r2]
 800b8f8:	b2db      	uxtb	r3, r3
 800b8fa:	e013      	b.n	800b924 <HAL_TIM_IC_Start_DMA+0xb0>
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	2b04      	cmp	r3, #4
 800b900:	d104      	bne.n	800b90c <HAL_TIM_IC_Start_DMA+0x98>
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	2245      	movs	r2, #69	; 0x45
 800b906:	5c9b      	ldrb	r3, [r3, r2]
 800b908:	b2db      	uxtb	r3, r3
 800b90a:	e00b      	b.n	800b924 <HAL_TIM_IC_Start_DMA+0xb0>
 800b90c:	68bb      	ldr	r3, [r7, #8]
 800b90e:	2b08      	cmp	r3, #8
 800b910:	d104      	bne.n	800b91c <HAL_TIM_IC_Start_DMA+0xa8>
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	2246      	movs	r2, #70	; 0x46
 800b916:	5c9b      	ldrb	r3, [r3, r2]
 800b918:	b2db      	uxtb	r3, r3
 800b91a:	e003      	b.n	800b924 <HAL_TIM_IC_Start_DMA+0xb0>
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	2247      	movs	r2, #71	; 0x47
 800b920:	5c9b      	ldrb	r3, [r3, r2]
 800b922:	b2db      	uxtb	r3, r3
 800b924:	2115      	movs	r1, #21
 800b926:	187a      	adds	r2, r7, r1
 800b928:	7013      	strb	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 800b92a:	2316      	movs	r3, #22
 800b92c:	18fb      	adds	r3, r7, r3
 800b92e:	781b      	ldrb	r3, [r3, #0]
 800b930:	2b02      	cmp	r3, #2
 800b932:	d003      	beq.n	800b93c <HAL_TIM_IC_Start_DMA+0xc8>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 800b934:	187b      	adds	r3, r7, r1
 800b936:	781b      	ldrb	r3, [r3, #0]
 800b938:	2b02      	cmp	r3, #2
 800b93a:	d101      	bne.n	800b940 <HAL_TIM_IC_Start_DMA+0xcc>
  {
    return HAL_BUSY;
 800b93c:	2302      	movs	r3, #2
 800b93e:	e146      	b.n	800bbce <HAL_TIM_IC_Start_DMA+0x35a>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 800b940:	2316      	movs	r3, #22
 800b942:	18fb      	adds	r3, r7, r3
 800b944:	781b      	ldrb	r3, [r3, #0]
 800b946:	2b01      	cmp	r3, #1
 800b948:	d156      	bne.n	800b9f8 <HAL_TIM_IC_Start_DMA+0x184>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 800b94a:	2315      	movs	r3, #21
 800b94c:	18fb      	adds	r3, r7, r3
 800b94e:	781b      	ldrb	r3, [r3, #0]
 800b950:	2b01      	cmp	r3, #1
 800b952:	d151      	bne.n	800b9f8 <HAL_TIM_IC_Start_DMA+0x184>
  {
    if ((pData == NULL) || (Length == 0U))
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d003      	beq.n	800b962 <HAL_TIM_IC_Start_DMA+0xee>
 800b95a:	1cbb      	adds	r3, r7, #2
 800b95c:	881b      	ldrh	r3, [r3, #0]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d101      	bne.n	800b966 <HAL_TIM_IC_Start_DMA+0xf2>
    {
      return HAL_ERROR;
 800b962:	2301      	movs	r3, #1
 800b964:	e133      	b.n	800bbce <HAL_TIM_IC_Start_DMA+0x35a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b966:	68bb      	ldr	r3, [r7, #8]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d104      	bne.n	800b976 <HAL_TIM_IC_Start_DMA+0x102>
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	223e      	movs	r2, #62	; 0x3e
 800b970:	2102      	movs	r1, #2
 800b972:	5499      	strb	r1, [r3, r2]
 800b974:	e023      	b.n	800b9be <HAL_TIM_IC_Start_DMA+0x14a>
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	2b04      	cmp	r3, #4
 800b97a:	d104      	bne.n	800b986 <HAL_TIM_IC_Start_DMA+0x112>
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	223f      	movs	r2, #63	; 0x3f
 800b980:	2102      	movs	r1, #2
 800b982:	5499      	strb	r1, [r3, r2]
 800b984:	e01b      	b.n	800b9be <HAL_TIM_IC_Start_DMA+0x14a>
 800b986:	68bb      	ldr	r3, [r7, #8]
 800b988:	2b08      	cmp	r3, #8
 800b98a:	d104      	bne.n	800b996 <HAL_TIM_IC_Start_DMA+0x122>
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	2240      	movs	r2, #64	; 0x40
 800b990:	2102      	movs	r1, #2
 800b992:	5499      	strb	r1, [r3, r2]
 800b994:	e013      	b.n	800b9be <HAL_TIM_IC_Start_DMA+0x14a>
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	2b0c      	cmp	r3, #12
 800b99a:	d104      	bne.n	800b9a6 <HAL_TIM_IC_Start_DMA+0x132>
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	2241      	movs	r2, #65	; 0x41
 800b9a0:	2102      	movs	r1, #2
 800b9a2:	5499      	strb	r1, [r3, r2]
 800b9a4:	e00b      	b.n	800b9be <HAL_TIM_IC_Start_DMA+0x14a>
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	2b10      	cmp	r3, #16
 800b9aa:	d104      	bne.n	800b9b6 <HAL_TIM_IC_Start_DMA+0x142>
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	2242      	movs	r2, #66	; 0x42
 800b9b0:	2102      	movs	r1, #2
 800b9b2:	5499      	strb	r1, [r3, r2]
 800b9b4:	e003      	b.n	800b9be <HAL_TIM_IC_Start_DMA+0x14a>
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	2243      	movs	r2, #67	; 0x43
 800b9ba:	2102      	movs	r1, #2
 800b9bc:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d104      	bne.n	800b9ce <HAL_TIM_IC_Start_DMA+0x15a>
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	2244      	movs	r2, #68	; 0x44
 800b9c8:	2102      	movs	r1, #2
 800b9ca:	5499      	strb	r1, [r3, r2]
    if ((pData == NULL) || (Length == 0U))
 800b9cc:	e016      	b.n	800b9fc <HAL_TIM_IC_Start_DMA+0x188>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b9ce:	68bb      	ldr	r3, [r7, #8]
 800b9d0:	2b04      	cmp	r3, #4
 800b9d2:	d104      	bne.n	800b9de <HAL_TIM_IC_Start_DMA+0x16a>
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	2245      	movs	r2, #69	; 0x45
 800b9d8:	2102      	movs	r1, #2
 800b9da:	5499      	strb	r1, [r3, r2]
    if ((pData == NULL) || (Length == 0U))
 800b9dc:	e00e      	b.n	800b9fc <HAL_TIM_IC_Start_DMA+0x188>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b9de:	68bb      	ldr	r3, [r7, #8]
 800b9e0:	2b08      	cmp	r3, #8
 800b9e2:	d104      	bne.n	800b9ee <HAL_TIM_IC_Start_DMA+0x17a>
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	2246      	movs	r2, #70	; 0x46
 800b9e8:	2102      	movs	r1, #2
 800b9ea:	5499      	strb	r1, [r3, r2]
    if ((pData == NULL) || (Length == 0U))
 800b9ec:	e006      	b.n	800b9fc <HAL_TIM_IC_Start_DMA+0x188>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	2247      	movs	r2, #71	; 0x47
 800b9f2:	2102      	movs	r1, #2
 800b9f4:	5499      	strb	r1, [r3, r2]
    if ((pData == NULL) || (Length == 0U))
 800b9f6:	e001      	b.n	800b9fc <HAL_TIM_IC_Start_DMA+0x188>
    }
  }
  else
  {
    return HAL_ERROR;
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	e0e8      	b.n	800bbce <HAL_TIM_IC_Start_DMA+0x35a>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	68b9      	ldr	r1, [r7, #8]
 800ba02:	2201      	movs	r2, #1
 800ba04:	0018      	movs	r0, r3
 800ba06:	f000 fd6d 	bl	800c4e4 <TIM_CCxChannelCmd>

  switch (Channel)
 800ba0a:	68bb      	ldr	r3, [r7, #8]
 800ba0c:	2b0c      	cmp	r3, #12
 800ba0e:	d100      	bne.n	800ba12 <HAL_TIM_IC_Start_DMA+0x19e>
 800ba10:	e080      	b.n	800bb14 <HAL_TIM_IC_Start_DMA+0x2a0>
 800ba12:	68bb      	ldr	r3, [r7, #8]
 800ba14:	2b0c      	cmp	r3, #12
 800ba16:	d900      	bls.n	800ba1a <HAL_TIM_IC_Start_DMA+0x1a6>
 800ba18:	e0a1      	b.n	800bb5e <HAL_TIM_IC_Start_DMA+0x2ea>
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	2b08      	cmp	r3, #8
 800ba1e:	d054      	beq.n	800baca <HAL_TIM_IC_Start_DMA+0x256>
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	2b08      	cmp	r3, #8
 800ba24:	d900      	bls.n	800ba28 <HAL_TIM_IC_Start_DMA+0x1b4>
 800ba26:	e09a      	b.n	800bb5e <HAL_TIM_IC_Start_DMA+0x2ea>
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d003      	beq.n	800ba36 <HAL_TIM_IC_Start_DMA+0x1c2>
 800ba2e:	68bb      	ldr	r3, [r7, #8]
 800ba30:	2b04      	cmp	r3, #4
 800ba32:	d025      	beq.n	800ba80 <HAL_TIM_IC_Start_DMA+0x20c>
 800ba34:	e093      	b.n	800bb5e <HAL_TIM_IC_Start_DMA+0x2ea>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba3a:	4a67      	ldr	r2, [pc, #412]	; (800bbd8 <HAL_TIM_IC_Start_DMA+0x364>)
 800ba3c:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba42:	4a66      	ldr	r2, [pc, #408]	; (800bbdc <HAL_TIM_IC_Start_DMA+0x368>)
 800ba44:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba4a:	4a65      	ldr	r2, [pc, #404]	; (800bbe0 <HAL_TIM_IC_Start_DMA+0x36c>)
 800ba4c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	3334      	adds	r3, #52	; 0x34
 800ba58:	0019      	movs	r1, r3
 800ba5a:	687a      	ldr	r2, [r7, #4]
 800ba5c:	1cbb      	adds	r3, r7, #2
 800ba5e:	881b      	ldrh	r3, [r3, #0]
 800ba60:	f7fd fb4c 	bl	80090fc <HAL_DMA_Start_IT>
 800ba64:	1e03      	subs	r3, r0, #0
 800ba66:	d001      	beq.n	800ba6c <HAL_TIM_IC_Start_DMA+0x1f8>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800ba68:	2301      	movs	r3, #1
 800ba6a:	e0b0      	b.n	800bbce <HAL_TIM_IC_Start_DMA+0x35a>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	68da      	ldr	r2, [r3, #12]
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	2180      	movs	r1, #128	; 0x80
 800ba78:	0089      	lsls	r1, r1, #2
 800ba7a:	430a      	orrs	r2, r1
 800ba7c:	60da      	str	r2, [r3, #12]
      break;
 800ba7e:	e073      	b.n	800bb68 <HAL_TIM_IC_Start_DMA+0x2f4>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba84:	4a54      	ldr	r2, [pc, #336]	; (800bbd8 <HAL_TIM_IC_Start_DMA+0x364>)
 800ba86:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba8c:	4a53      	ldr	r2, [pc, #332]	; (800bbdc <HAL_TIM_IC_Start_DMA+0x368>)
 800ba8e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba94:	4a52      	ldr	r2, [pc, #328]	; (800bbe0 <HAL_TIM_IC_Start_DMA+0x36c>)
 800ba96:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	3338      	adds	r3, #56	; 0x38
 800baa2:	0019      	movs	r1, r3
 800baa4:	687a      	ldr	r2, [r7, #4]
 800baa6:	1cbb      	adds	r3, r7, #2
 800baa8:	881b      	ldrh	r3, [r3, #0]
 800baaa:	f7fd fb27 	bl	80090fc <HAL_DMA_Start_IT>
 800baae:	1e03      	subs	r3, r0, #0
 800bab0:	d001      	beq.n	800bab6 <HAL_TIM_IC_Start_DMA+0x242>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800bab2:	2301      	movs	r3, #1
 800bab4:	e08b      	b.n	800bbce <HAL_TIM_IC_Start_DMA+0x35a>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	68da      	ldr	r2, [r3, #12]
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	2180      	movs	r1, #128	; 0x80
 800bac2:	00c9      	lsls	r1, r1, #3
 800bac4:	430a      	orrs	r2, r1
 800bac6:	60da      	str	r2, [r3, #12]
      break;
 800bac8:	e04e      	b.n	800bb68 <HAL_TIM_IC_Start_DMA+0x2f4>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bace:	4a42      	ldr	r2, [pc, #264]	; (800bbd8 <HAL_TIM_IC_Start_DMA+0x364>)
 800bad0:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bad6:	4a41      	ldr	r2, [pc, #260]	; (800bbdc <HAL_TIM_IC_Start_DMA+0x368>)
 800bad8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bade:	4a40      	ldr	r2, [pc, #256]	; (800bbe0 <HAL_TIM_IC_Start_DMA+0x36c>)
 800bae0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	333c      	adds	r3, #60	; 0x3c
 800baec:	0019      	movs	r1, r3
 800baee:	687a      	ldr	r2, [r7, #4]
 800baf0:	1cbb      	adds	r3, r7, #2
 800baf2:	881b      	ldrh	r3, [r3, #0]
 800baf4:	f7fd fb02 	bl	80090fc <HAL_DMA_Start_IT>
 800baf8:	1e03      	subs	r3, r0, #0
 800bafa:	d001      	beq.n	800bb00 <HAL_TIM_IC_Start_DMA+0x28c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800bafc:	2301      	movs	r3, #1
 800bafe:	e066      	b.n	800bbce <HAL_TIM_IC_Start_DMA+0x35a>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	68da      	ldr	r2, [r3, #12]
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	2180      	movs	r1, #128	; 0x80
 800bb0c:	0109      	lsls	r1, r1, #4
 800bb0e:	430a      	orrs	r2, r1
 800bb10:	60da      	str	r2, [r3, #12]
      break;
 800bb12:	e029      	b.n	800bb68 <HAL_TIM_IC_Start_DMA+0x2f4>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb18:	4a2f      	ldr	r2, [pc, #188]	; (800bbd8 <HAL_TIM_IC_Start_DMA+0x364>)
 800bb1a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb20:	4a2e      	ldr	r2, [pc, #184]	; (800bbdc <HAL_TIM_IC_Start_DMA+0x368>)
 800bb22:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb28:	4a2d      	ldr	r2, [pc, #180]	; (800bbe0 <HAL_TIM_IC_Start_DMA+0x36c>)
 800bb2a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	3340      	adds	r3, #64	; 0x40
 800bb36:	0019      	movs	r1, r3
 800bb38:	687a      	ldr	r2, [r7, #4]
 800bb3a:	1cbb      	adds	r3, r7, #2
 800bb3c:	881b      	ldrh	r3, [r3, #0]
 800bb3e:	f7fd fadd 	bl	80090fc <HAL_DMA_Start_IT>
 800bb42:	1e03      	subs	r3, r0, #0
 800bb44:	d001      	beq.n	800bb4a <HAL_TIM_IC_Start_DMA+0x2d6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800bb46:	2301      	movs	r3, #1
 800bb48:	e041      	b.n	800bbce <HAL_TIM_IC_Start_DMA+0x35a>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	68da      	ldr	r2, [r3, #12]
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	2180      	movs	r1, #128	; 0x80
 800bb56:	0149      	lsls	r1, r1, #5
 800bb58:	430a      	orrs	r2, r1
 800bb5a:	60da      	str	r2, [r3, #12]
      break;
 800bb5c:	e004      	b.n	800bb68 <HAL_TIM_IC_Start_DMA+0x2f4>
    }

    default:
      status = HAL_ERROR;
 800bb5e:	2317      	movs	r3, #23
 800bb60:	18fb      	adds	r3, r7, r3
 800bb62:	2201      	movs	r2, #1
 800bb64:	701a      	strb	r2, [r3, #0]
      break;
 800bb66:	46c0      	nop			; (mov r8, r8)
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	4a1d      	ldr	r2, [pc, #116]	; (800bbe4 <HAL_TIM_IC_Start_DMA+0x370>)
 800bb6e:	4293      	cmp	r3, r2
 800bb70:	d009      	beq.n	800bb86 <HAL_TIM_IC_Start_DMA+0x312>
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	4a1c      	ldr	r2, [pc, #112]	; (800bbe8 <HAL_TIM_IC_Start_DMA+0x374>)
 800bb78:	4293      	cmp	r3, r2
 800bb7a:	d004      	beq.n	800bb86 <HAL_TIM_IC_Start_DMA+0x312>
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	4a1a      	ldr	r2, [pc, #104]	; (800bbec <HAL_TIM_IC_Start_DMA+0x378>)
 800bb82:	4293      	cmp	r3, r2
 800bb84:	d116      	bne.n	800bbb4 <HAL_TIM_IC_Start_DMA+0x340>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	689b      	ldr	r3, [r3, #8]
 800bb8c:	4a18      	ldr	r2, [pc, #96]	; (800bbf0 <HAL_TIM_IC_Start_DMA+0x37c>)
 800bb8e:	4013      	ands	r3, r2
 800bb90:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	2b06      	cmp	r3, #6
 800bb96:	d016      	beq.n	800bbc6 <HAL_TIM_IC_Start_DMA+0x352>
 800bb98:	693a      	ldr	r2, [r7, #16]
 800bb9a:	2380      	movs	r3, #128	; 0x80
 800bb9c:	025b      	lsls	r3, r3, #9
 800bb9e:	429a      	cmp	r2, r3
 800bba0:	d011      	beq.n	800bbc6 <HAL_TIM_IC_Start_DMA+0x352>
    {
      __HAL_TIM_ENABLE(htim);
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	681a      	ldr	r2, [r3, #0]
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	2101      	movs	r1, #1
 800bbae:	430a      	orrs	r2, r1
 800bbb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bbb2:	e008      	b.n	800bbc6 <HAL_TIM_IC_Start_DMA+0x352>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	681a      	ldr	r2, [r3, #0]
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	2101      	movs	r1, #1
 800bbc0:	430a      	orrs	r2, r1
 800bbc2:	601a      	str	r2, [r3, #0]
 800bbc4:	e000      	b.n	800bbc8 <HAL_TIM_IC_Start_DMA+0x354>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bbc6:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return status;
 800bbc8:	2317      	movs	r3, #23
 800bbca:	18fb      	adds	r3, r7, r3
 800bbcc:	781b      	ldrb	r3, [r3, #0]
}
 800bbce:	0018      	movs	r0, r3
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	b006      	add	sp, #24
 800bbd4:	bd80      	pop	{r7, pc}
 800bbd6:	46c0      	nop			; (mov r8, r8)
 800bbd8:	0800c085 	.word	0x0800c085
 800bbdc:	0800c14f 	.word	0x0800c14f
 800bbe0:	0800bff1 	.word	0x0800bff1
 800bbe4:	40012c00 	.word	0x40012c00
 800bbe8:	40000400 	.word	0x40000400
 800bbec:	40014000 	.word	0x40014000
 800bbf0:	00010007 	.word	0x00010007

0800bbf4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b082      	sub	sp, #8
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	691b      	ldr	r3, [r3, #16]
 800bc02:	2202      	movs	r2, #2
 800bc04:	4013      	ands	r3, r2
 800bc06:	2b02      	cmp	r3, #2
 800bc08:	d124      	bne.n	800bc54 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	68db      	ldr	r3, [r3, #12]
 800bc10:	2202      	movs	r2, #2
 800bc12:	4013      	ands	r3, r2
 800bc14:	2b02      	cmp	r3, #2
 800bc16:	d11d      	bne.n	800bc54 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	2203      	movs	r2, #3
 800bc1e:	4252      	negs	r2, r2
 800bc20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	2201      	movs	r2, #1
 800bc26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	699b      	ldr	r3, [r3, #24]
 800bc2e:	2203      	movs	r2, #3
 800bc30:	4013      	ands	r3, r2
 800bc32:	d004      	beq.n	800bc3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	0018      	movs	r0, r3
 800bc38:	f7fb fad0 	bl	80071dc <HAL_TIM_IC_CaptureCallback>
 800bc3c:	e007      	b.n	800bc4e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	0018      	movs	r0, r3
 800bc42:	f000 f9ad 	bl	800bfa0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	0018      	movs	r0, r3
 800bc4a:	f000 f9b9 	bl	800bfc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	2200      	movs	r2, #0
 800bc52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	691b      	ldr	r3, [r3, #16]
 800bc5a:	2204      	movs	r2, #4
 800bc5c:	4013      	ands	r3, r2
 800bc5e:	2b04      	cmp	r3, #4
 800bc60:	d125      	bne.n	800bcae <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	68db      	ldr	r3, [r3, #12]
 800bc68:	2204      	movs	r2, #4
 800bc6a:	4013      	ands	r3, r2
 800bc6c:	2b04      	cmp	r3, #4
 800bc6e:	d11e      	bne.n	800bcae <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	2205      	movs	r2, #5
 800bc76:	4252      	negs	r2, r2
 800bc78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2202      	movs	r2, #2
 800bc7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	699a      	ldr	r2, [r3, #24]
 800bc86:	23c0      	movs	r3, #192	; 0xc0
 800bc88:	009b      	lsls	r3, r3, #2
 800bc8a:	4013      	ands	r3, r2
 800bc8c:	d004      	beq.n	800bc98 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	0018      	movs	r0, r3
 800bc92:	f7fb faa3 	bl	80071dc <HAL_TIM_IC_CaptureCallback>
 800bc96:	e007      	b.n	800bca8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	0018      	movs	r0, r3
 800bc9c:	f000 f980 	bl	800bfa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	0018      	movs	r0, r3
 800bca4:	f000 f98c 	bl	800bfc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2200      	movs	r2, #0
 800bcac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	691b      	ldr	r3, [r3, #16]
 800bcb4:	2208      	movs	r2, #8
 800bcb6:	4013      	ands	r3, r2
 800bcb8:	2b08      	cmp	r3, #8
 800bcba:	d124      	bne.n	800bd06 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	68db      	ldr	r3, [r3, #12]
 800bcc2:	2208      	movs	r2, #8
 800bcc4:	4013      	ands	r3, r2
 800bcc6:	2b08      	cmp	r3, #8
 800bcc8:	d11d      	bne.n	800bd06 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	2209      	movs	r2, #9
 800bcd0:	4252      	negs	r2, r2
 800bcd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2204      	movs	r2, #4
 800bcd8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	69db      	ldr	r3, [r3, #28]
 800bce0:	2203      	movs	r2, #3
 800bce2:	4013      	ands	r3, r2
 800bce4:	d004      	beq.n	800bcf0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	0018      	movs	r0, r3
 800bcea:	f7fb fa77 	bl	80071dc <HAL_TIM_IC_CaptureCallback>
 800bcee:	e007      	b.n	800bd00 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	0018      	movs	r0, r3
 800bcf4:	f000 f954 	bl	800bfa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	0018      	movs	r0, r3
 800bcfc:	f000 f960 	bl	800bfc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2200      	movs	r2, #0
 800bd04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	691b      	ldr	r3, [r3, #16]
 800bd0c:	2210      	movs	r2, #16
 800bd0e:	4013      	ands	r3, r2
 800bd10:	2b10      	cmp	r3, #16
 800bd12:	d125      	bne.n	800bd60 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	68db      	ldr	r3, [r3, #12]
 800bd1a:	2210      	movs	r2, #16
 800bd1c:	4013      	ands	r3, r2
 800bd1e:	2b10      	cmp	r3, #16
 800bd20:	d11e      	bne.n	800bd60 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	2211      	movs	r2, #17
 800bd28:	4252      	negs	r2, r2
 800bd2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2208      	movs	r2, #8
 800bd30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	69da      	ldr	r2, [r3, #28]
 800bd38:	23c0      	movs	r3, #192	; 0xc0
 800bd3a:	009b      	lsls	r3, r3, #2
 800bd3c:	4013      	ands	r3, r2
 800bd3e:	d004      	beq.n	800bd4a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	0018      	movs	r0, r3
 800bd44:	f7fb fa4a 	bl	80071dc <HAL_TIM_IC_CaptureCallback>
 800bd48:	e007      	b.n	800bd5a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	0018      	movs	r0, r3
 800bd4e:	f000 f927 	bl	800bfa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	0018      	movs	r0, r3
 800bd56:	f000 f933 	bl	800bfc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	691b      	ldr	r3, [r3, #16]
 800bd66:	2201      	movs	r2, #1
 800bd68:	4013      	ands	r3, r2
 800bd6a:	2b01      	cmp	r3, #1
 800bd6c:	d10f      	bne.n	800bd8e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	68db      	ldr	r3, [r3, #12]
 800bd74:	2201      	movs	r2, #1
 800bd76:	4013      	ands	r3, r2
 800bd78:	2b01      	cmp	r3, #1
 800bd7a:	d108      	bne.n	800bd8e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	2202      	movs	r2, #2
 800bd82:	4252      	negs	r2, r2
 800bd84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	0018      	movs	r0, r3
 800bd8a:	f7f9 f89f 	bl	8004ecc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	691b      	ldr	r3, [r3, #16]
 800bd94:	2280      	movs	r2, #128	; 0x80
 800bd96:	4013      	ands	r3, r2
 800bd98:	2b80      	cmp	r3, #128	; 0x80
 800bd9a:	d10f      	bne.n	800bdbc <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	68db      	ldr	r3, [r3, #12]
 800bda2:	2280      	movs	r2, #128	; 0x80
 800bda4:	4013      	ands	r3, r2
 800bda6:	2b80      	cmp	r3, #128	; 0x80
 800bda8:	d108      	bne.n	800bdbc <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	2281      	movs	r2, #129	; 0x81
 800bdb0:	4252      	negs	r2, r2
 800bdb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	0018      	movs	r0, r3
 800bdb8:	f000 fc28 	bl	800c60c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	691a      	ldr	r2, [r3, #16]
 800bdc2:	2380      	movs	r3, #128	; 0x80
 800bdc4:	005b      	lsls	r3, r3, #1
 800bdc6:	401a      	ands	r2, r3
 800bdc8:	2380      	movs	r3, #128	; 0x80
 800bdca:	005b      	lsls	r3, r3, #1
 800bdcc:	429a      	cmp	r2, r3
 800bdce:	d10e      	bne.n	800bdee <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	68db      	ldr	r3, [r3, #12]
 800bdd6:	2280      	movs	r2, #128	; 0x80
 800bdd8:	4013      	ands	r3, r2
 800bdda:	2b80      	cmp	r3, #128	; 0x80
 800bddc:	d107      	bne.n	800bdee <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	4a1c      	ldr	r2, [pc, #112]	; (800be54 <HAL_TIM_IRQHandler+0x260>)
 800bde4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	0018      	movs	r0, r3
 800bdea:	f000 fc17 	bl	800c61c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	691b      	ldr	r3, [r3, #16]
 800bdf4:	2240      	movs	r2, #64	; 0x40
 800bdf6:	4013      	ands	r3, r2
 800bdf8:	2b40      	cmp	r3, #64	; 0x40
 800bdfa:	d10f      	bne.n	800be1c <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	68db      	ldr	r3, [r3, #12]
 800be02:	2240      	movs	r2, #64	; 0x40
 800be04:	4013      	ands	r3, r2
 800be06:	2b40      	cmp	r3, #64	; 0x40
 800be08:	d108      	bne.n	800be1c <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	2241      	movs	r2, #65	; 0x41
 800be10:	4252      	negs	r2, r2
 800be12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	0018      	movs	r0, r3
 800be18:	f000 f8da 	bl	800bfd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	691b      	ldr	r3, [r3, #16]
 800be22:	2220      	movs	r2, #32
 800be24:	4013      	ands	r3, r2
 800be26:	2b20      	cmp	r3, #32
 800be28:	d10f      	bne.n	800be4a <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	68db      	ldr	r3, [r3, #12]
 800be30:	2220      	movs	r2, #32
 800be32:	4013      	ands	r3, r2
 800be34:	2b20      	cmp	r3, #32
 800be36:	d108      	bne.n	800be4a <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	2221      	movs	r2, #33	; 0x21
 800be3e:	4252      	negs	r2, r2
 800be40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	0018      	movs	r0, r3
 800be46:	f000 fbd9 	bl	800c5fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800be4a:	46c0      	nop			; (mov r8, r8)
 800be4c:	46bd      	mov	sp, r7
 800be4e:	b002      	add	sp, #8
 800be50:	bd80      	pop	{r7, pc}
 800be52:	46c0      	nop			; (mov r8, r8)
 800be54:	fffffeff 	.word	0xfffffeff

0800be58 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b086      	sub	sp, #24
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	60f8      	str	r0, [r7, #12]
 800be60:	60b9      	str	r1, [r7, #8]
 800be62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800be64:	2317      	movs	r3, #23
 800be66:	18fb      	adds	r3, r7, r3
 800be68:	2200      	movs	r2, #0
 800be6a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	223c      	movs	r2, #60	; 0x3c
 800be70:	5c9b      	ldrb	r3, [r3, r2]
 800be72:	2b01      	cmp	r3, #1
 800be74:	d101      	bne.n	800be7a <HAL_TIM_IC_ConfigChannel+0x22>
 800be76:	2302      	movs	r3, #2
 800be78:	e08c      	b.n	800bf94 <HAL_TIM_IC_ConfigChannel+0x13c>
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	223c      	movs	r2, #60	; 0x3c
 800be7e:	2101      	movs	r1, #1
 800be80:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d11b      	bne.n	800bec0 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	6818      	ldr	r0, [r3, #0]
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	6819      	ldr	r1, [r3, #0]
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	685a      	ldr	r2, [r3, #4]
 800be94:	68bb      	ldr	r3, [r7, #8]
 800be96:	68db      	ldr	r3, [r3, #12]
 800be98:	f000 fa04 	bl	800c2a4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	699a      	ldr	r2, [r3, #24]
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	210c      	movs	r1, #12
 800bea8:	438a      	bics	r2, r1
 800beaa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	6999      	ldr	r1, [r3, #24]
 800beb2:	68bb      	ldr	r3, [r7, #8]
 800beb4:	689a      	ldr	r2, [r3, #8]
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	430a      	orrs	r2, r1
 800bebc:	619a      	str	r2, [r3, #24]
 800bebe:	e062      	b.n	800bf86 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2b04      	cmp	r3, #4
 800bec4:	d11c      	bne.n	800bf00 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	6818      	ldr	r0, [r3, #0]
 800beca:	68bb      	ldr	r3, [r7, #8]
 800becc:	6819      	ldr	r1, [r3, #0]
 800bece:	68bb      	ldr	r3, [r7, #8]
 800bed0:	685a      	ldr	r2, [r3, #4]
 800bed2:	68bb      	ldr	r3, [r7, #8]
 800bed4:	68db      	ldr	r3, [r3, #12]
 800bed6:	f000 fa3d 	bl	800c354 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	699a      	ldr	r2, [r3, #24]
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	492d      	ldr	r1, [pc, #180]	; (800bf9c <HAL_TIM_IC_ConfigChannel+0x144>)
 800bee6:	400a      	ands	r2, r1
 800bee8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	6999      	ldr	r1, [r3, #24]
 800bef0:	68bb      	ldr	r3, [r7, #8]
 800bef2:	689b      	ldr	r3, [r3, #8]
 800bef4:	021a      	lsls	r2, r3, #8
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	430a      	orrs	r2, r1
 800befc:	619a      	str	r2, [r3, #24]
 800befe:	e042      	b.n	800bf86 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2b08      	cmp	r3, #8
 800bf04:	d11b      	bne.n	800bf3e <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	6818      	ldr	r0, [r3, #0]
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	6819      	ldr	r1, [r3, #0]
 800bf0e:	68bb      	ldr	r3, [r7, #8]
 800bf10:	685a      	ldr	r2, [r3, #4]
 800bf12:	68bb      	ldr	r3, [r7, #8]
 800bf14:	68db      	ldr	r3, [r3, #12]
 800bf16:	f000 fa5f 	bl	800c3d8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	69da      	ldr	r2, [r3, #28]
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	210c      	movs	r1, #12
 800bf26:	438a      	bics	r2, r1
 800bf28:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	69d9      	ldr	r1, [r3, #28]
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	689a      	ldr	r2, [r3, #8]
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	430a      	orrs	r2, r1
 800bf3a:	61da      	str	r2, [r3, #28]
 800bf3c:	e023      	b.n	800bf86 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2b0c      	cmp	r3, #12
 800bf42:	d11c      	bne.n	800bf7e <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	6818      	ldr	r0, [r3, #0]
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	6819      	ldr	r1, [r3, #0]
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	685a      	ldr	r2, [r3, #4]
 800bf50:	68bb      	ldr	r3, [r7, #8]
 800bf52:	68db      	ldr	r3, [r3, #12]
 800bf54:	f000 fa80 	bl	800c458 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	69da      	ldr	r2, [r3, #28]
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	490e      	ldr	r1, [pc, #56]	; (800bf9c <HAL_TIM_IC_ConfigChannel+0x144>)
 800bf64:	400a      	ands	r2, r1
 800bf66:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	69d9      	ldr	r1, [r3, #28]
 800bf6e:	68bb      	ldr	r3, [r7, #8]
 800bf70:	689b      	ldr	r3, [r3, #8]
 800bf72:	021a      	lsls	r2, r3, #8
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	430a      	orrs	r2, r1
 800bf7a:	61da      	str	r2, [r3, #28]
 800bf7c:	e003      	b.n	800bf86 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 800bf7e:	2317      	movs	r3, #23
 800bf80:	18fb      	adds	r3, r7, r3
 800bf82:	2201      	movs	r2, #1
 800bf84:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	223c      	movs	r2, #60	; 0x3c
 800bf8a:	2100      	movs	r1, #0
 800bf8c:	5499      	strb	r1, [r3, r2]

  return status;
 800bf8e:	2317      	movs	r3, #23
 800bf90:	18fb      	adds	r3, r7, r3
 800bf92:	781b      	ldrb	r3, [r3, #0]
}
 800bf94:	0018      	movs	r0, r3
 800bf96:	46bd      	mov	sp, r7
 800bf98:	b006      	add	sp, #24
 800bf9a:	bd80      	pop	{r7, pc}
 800bf9c:	fffff3ff 	.word	0xfffff3ff

0800bfa0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b082      	sub	sp, #8
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bfa8:	46c0      	nop			; (mov r8, r8)
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	b002      	add	sp, #8
 800bfae:	bd80      	pop	{r7, pc}

0800bfb0 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b082      	sub	sp, #8
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800bfb8:	46c0      	nop			; (mov r8, r8)
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	b002      	add	sp, #8
 800bfbe:	bd80      	pop	{r7, pc}

0800bfc0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b082      	sub	sp, #8
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bfc8:	46c0      	nop			; (mov r8, r8)
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	b002      	add	sp, #8
 800bfce:	bd80      	pop	{r7, pc}

0800bfd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b082      	sub	sp, #8
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bfd8:	46c0      	nop			; (mov r8, r8)
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	b002      	add	sp, #8
 800bfde:	bd80      	pop	{r7, pc}

0800bfe0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b082      	sub	sp, #8
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800bfe8:	46c0      	nop			; (mov r8, r8)
 800bfea:	46bd      	mov	sp, r7
 800bfec:	b002      	add	sp, #8
 800bfee:	bd80      	pop	{r7, pc}

0800bff0 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b084      	sub	sp, #16
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bffc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c002:	687a      	ldr	r2, [r7, #4]
 800c004:	429a      	cmp	r2, r3
 800c006:	d107      	bne.n	800c018 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	2201      	movs	r2, #1
 800c00c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	223e      	movs	r2, #62	; 0x3e
 800c012:	2101      	movs	r1, #1
 800c014:	5499      	strb	r1, [r3, r2]
 800c016:	e02a      	b.n	800c06e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c01c:	687a      	ldr	r2, [r7, #4]
 800c01e:	429a      	cmp	r2, r3
 800c020:	d107      	bne.n	800c032 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	2202      	movs	r2, #2
 800c026:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	223f      	movs	r2, #63	; 0x3f
 800c02c:	2101      	movs	r1, #1
 800c02e:	5499      	strb	r1, [r3, r2]
 800c030:	e01d      	b.n	800c06e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c036:	687a      	ldr	r2, [r7, #4]
 800c038:	429a      	cmp	r2, r3
 800c03a:	d107      	bne.n	800c04c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	2204      	movs	r2, #4
 800c040:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	2240      	movs	r2, #64	; 0x40
 800c046:	2101      	movs	r1, #1
 800c048:	5499      	strb	r1, [r3, r2]
 800c04a:	e010      	b.n	800c06e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c050:	687a      	ldr	r2, [r7, #4]
 800c052:	429a      	cmp	r2, r3
 800c054:	d107      	bne.n	800c066 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	2208      	movs	r2, #8
 800c05a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	2241      	movs	r2, #65	; 0x41
 800c060:	2101      	movs	r1, #1
 800c062:	5499      	strb	r1, [r3, r2]
 800c064:	e003      	b.n	800c06e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	223d      	movs	r2, #61	; 0x3d
 800c06a:	2101      	movs	r1, #1
 800c06c:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	0018      	movs	r0, r3
 800c072:	f7ff ffb5 	bl	800bfe0 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	2200      	movs	r2, #0
 800c07a:	771a      	strb	r2, [r3, #28]
}
 800c07c:	46c0      	nop			; (mov r8, r8)
 800c07e:	46bd      	mov	sp, r7
 800c080:	b004      	add	sp, #16
 800c082:	bd80      	pop	{r7, pc}

0800c084 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b084      	sub	sp, #16
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c090:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c096:	687a      	ldr	r2, [r7, #4]
 800c098:	429a      	cmp	r2, r3
 800c09a:	d10f      	bne.n	800c0bc <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	2201      	movs	r2, #1
 800c0a0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	69db      	ldr	r3, [r3, #28]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d146      	bne.n	800c138 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	223e      	movs	r2, #62	; 0x3e
 800c0ae:	2101      	movs	r1, #1
 800c0b0:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	2244      	movs	r2, #68	; 0x44
 800c0b6:	2101      	movs	r1, #1
 800c0b8:	5499      	strb	r1, [r3, r2]
 800c0ba:	e03d      	b.n	800c138 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0c0:	687a      	ldr	r2, [r7, #4]
 800c0c2:	429a      	cmp	r2, r3
 800c0c4:	d10f      	bne.n	800c0e6 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	2202      	movs	r2, #2
 800c0ca:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	69db      	ldr	r3, [r3, #28]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d131      	bne.n	800c138 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	223f      	movs	r2, #63	; 0x3f
 800c0d8:	2101      	movs	r1, #1
 800c0da:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	2245      	movs	r2, #69	; 0x45
 800c0e0:	2101      	movs	r1, #1
 800c0e2:	5499      	strb	r1, [r3, r2]
 800c0e4:	e028      	b.n	800c138 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0ea:	687a      	ldr	r2, [r7, #4]
 800c0ec:	429a      	cmp	r2, r3
 800c0ee:	d10f      	bne.n	800c110 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	2204      	movs	r2, #4
 800c0f4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	69db      	ldr	r3, [r3, #28]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d11c      	bne.n	800c138 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	2240      	movs	r2, #64	; 0x40
 800c102:	2101      	movs	r1, #1
 800c104:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	2246      	movs	r2, #70	; 0x46
 800c10a:	2101      	movs	r1, #1
 800c10c:	5499      	strb	r1, [r3, r2]
 800c10e:	e013      	b.n	800c138 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c114:	687a      	ldr	r2, [r7, #4]
 800c116:	429a      	cmp	r2, r3
 800c118:	d10e      	bne.n	800c138 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	2208      	movs	r2, #8
 800c11e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	69db      	ldr	r3, [r3, #28]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d107      	bne.n	800c138 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	2241      	movs	r2, #65	; 0x41
 800c12c:	2101      	movs	r1, #1
 800c12e:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	2247      	movs	r2, #71	; 0x47
 800c134:	2101      	movs	r1, #1
 800c136:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	0018      	movs	r0, r3
 800c13c:	f7fb f84e 	bl	80071dc <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	2200      	movs	r2, #0
 800c144:	771a      	strb	r2, [r3, #28]
}
 800c146:	46c0      	nop			; (mov r8, r8)
 800c148:	46bd      	mov	sp, r7
 800c14a:	b004      	add	sp, #16
 800c14c:	bd80      	pop	{r7, pc}

0800c14e <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c14e:	b580      	push	{r7, lr}
 800c150:	b084      	sub	sp, #16
 800c152:	af00      	add	r7, sp, #0
 800c154:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c15a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c160:	687a      	ldr	r2, [r7, #4]
 800c162:	429a      	cmp	r2, r3
 800c164:	d103      	bne.n	800c16e <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	2201      	movs	r2, #1
 800c16a:	771a      	strb	r2, [r3, #28]
 800c16c:	e019      	b.n	800c1a2 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c172:	687a      	ldr	r2, [r7, #4]
 800c174:	429a      	cmp	r2, r3
 800c176:	d103      	bne.n	800c180 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	2202      	movs	r2, #2
 800c17c:	771a      	strb	r2, [r3, #28]
 800c17e:	e010      	b.n	800c1a2 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c184:	687a      	ldr	r2, [r7, #4]
 800c186:	429a      	cmp	r2, r3
 800c188:	d103      	bne.n	800c192 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	2204      	movs	r2, #4
 800c18e:	771a      	strb	r2, [r3, #28]
 800c190:	e007      	b.n	800c1a2 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c196:	687a      	ldr	r2, [r7, #4]
 800c198:	429a      	cmp	r2, r3
 800c19a:	d102      	bne.n	800c1a2 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	2208      	movs	r2, #8
 800c1a0:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	0018      	movs	r0, r3
 800c1a6:	f7ff ff03 	bl	800bfb0 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	771a      	strb	r2, [r3, #28]
}
 800c1b0:	46c0      	nop			; (mov r8, r8)
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	b004      	add	sp, #16
 800c1b6:	bd80      	pop	{r7, pc}

0800c1b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b084      	sub	sp, #16
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
 800c1c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	4a2f      	ldr	r2, [pc, #188]	; (800c288 <TIM_Base_SetConfig+0xd0>)
 800c1cc:	4293      	cmp	r3, r2
 800c1ce:	d003      	beq.n	800c1d8 <TIM_Base_SetConfig+0x20>
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	4a2e      	ldr	r2, [pc, #184]	; (800c28c <TIM_Base_SetConfig+0xd4>)
 800c1d4:	4293      	cmp	r3, r2
 800c1d6:	d108      	bne.n	800c1ea <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	2270      	movs	r2, #112	; 0x70
 800c1dc:	4393      	bics	r3, r2
 800c1de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	685b      	ldr	r3, [r3, #4]
 800c1e4:	68fa      	ldr	r2, [r7, #12]
 800c1e6:	4313      	orrs	r3, r2
 800c1e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	4a26      	ldr	r2, [pc, #152]	; (800c288 <TIM_Base_SetConfig+0xd0>)
 800c1ee:	4293      	cmp	r3, r2
 800c1f0:	d013      	beq.n	800c21a <TIM_Base_SetConfig+0x62>
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	4a25      	ldr	r2, [pc, #148]	; (800c28c <TIM_Base_SetConfig+0xd4>)
 800c1f6:	4293      	cmp	r3, r2
 800c1f8:	d00f      	beq.n	800c21a <TIM_Base_SetConfig+0x62>
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	4a24      	ldr	r2, [pc, #144]	; (800c290 <TIM_Base_SetConfig+0xd8>)
 800c1fe:	4293      	cmp	r3, r2
 800c200:	d00b      	beq.n	800c21a <TIM_Base_SetConfig+0x62>
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	4a23      	ldr	r2, [pc, #140]	; (800c294 <TIM_Base_SetConfig+0xdc>)
 800c206:	4293      	cmp	r3, r2
 800c208:	d007      	beq.n	800c21a <TIM_Base_SetConfig+0x62>
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	4a22      	ldr	r2, [pc, #136]	; (800c298 <TIM_Base_SetConfig+0xe0>)
 800c20e:	4293      	cmp	r3, r2
 800c210:	d003      	beq.n	800c21a <TIM_Base_SetConfig+0x62>
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	4a21      	ldr	r2, [pc, #132]	; (800c29c <TIM_Base_SetConfig+0xe4>)
 800c216:	4293      	cmp	r3, r2
 800c218:	d108      	bne.n	800c22c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	4a20      	ldr	r2, [pc, #128]	; (800c2a0 <TIM_Base_SetConfig+0xe8>)
 800c21e:	4013      	ands	r3, r2
 800c220:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	68db      	ldr	r3, [r3, #12]
 800c226:	68fa      	ldr	r2, [r7, #12]
 800c228:	4313      	orrs	r3, r2
 800c22a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	2280      	movs	r2, #128	; 0x80
 800c230:	4393      	bics	r3, r2
 800c232:	001a      	movs	r2, r3
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	695b      	ldr	r3, [r3, #20]
 800c238:	4313      	orrs	r3, r2
 800c23a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	68fa      	ldr	r2, [r7, #12]
 800c240:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	689a      	ldr	r2, [r3, #8]
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	681a      	ldr	r2, [r3, #0]
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	4a0c      	ldr	r2, [pc, #48]	; (800c288 <TIM_Base_SetConfig+0xd0>)
 800c256:	4293      	cmp	r3, r2
 800c258:	d00b      	beq.n	800c272 <TIM_Base_SetConfig+0xba>
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	4a0d      	ldr	r2, [pc, #52]	; (800c294 <TIM_Base_SetConfig+0xdc>)
 800c25e:	4293      	cmp	r3, r2
 800c260:	d007      	beq.n	800c272 <TIM_Base_SetConfig+0xba>
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	4a0c      	ldr	r2, [pc, #48]	; (800c298 <TIM_Base_SetConfig+0xe0>)
 800c266:	4293      	cmp	r3, r2
 800c268:	d003      	beq.n	800c272 <TIM_Base_SetConfig+0xba>
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	4a0b      	ldr	r2, [pc, #44]	; (800c29c <TIM_Base_SetConfig+0xe4>)
 800c26e:	4293      	cmp	r3, r2
 800c270:	d103      	bne.n	800c27a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	691a      	ldr	r2, [r3, #16]
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2201      	movs	r2, #1
 800c27e:	615a      	str	r2, [r3, #20]
}
 800c280:	46c0      	nop			; (mov r8, r8)
 800c282:	46bd      	mov	sp, r7
 800c284:	b004      	add	sp, #16
 800c286:	bd80      	pop	{r7, pc}
 800c288:	40012c00 	.word	0x40012c00
 800c28c:	40000400 	.word	0x40000400
 800c290:	40002000 	.word	0x40002000
 800c294:	40014000 	.word	0x40014000
 800c298:	40014400 	.word	0x40014400
 800c29c:	40014800 	.word	0x40014800
 800c2a0:	fffffcff 	.word	0xfffffcff

0800c2a4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b086      	sub	sp, #24
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	60f8      	str	r0, [r7, #12]
 800c2ac:	60b9      	str	r1, [r7, #8]
 800c2ae:	607a      	str	r2, [r7, #4]
 800c2b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	6a1b      	ldr	r3, [r3, #32]
 800c2b6:	2201      	movs	r2, #1
 800c2b8:	4393      	bics	r3, r2
 800c2ba:	001a      	movs	r2, r3
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	699b      	ldr	r3, [r3, #24]
 800c2c4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	6a1b      	ldr	r3, [r3, #32]
 800c2ca:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	4a1e      	ldr	r2, [pc, #120]	; (800c348 <TIM_TI1_SetConfig+0xa4>)
 800c2d0:	4293      	cmp	r3, r2
 800c2d2:	d007      	beq.n	800c2e4 <TIM_TI1_SetConfig+0x40>
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	4a1d      	ldr	r2, [pc, #116]	; (800c34c <TIM_TI1_SetConfig+0xa8>)
 800c2d8:	4293      	cmp	r3, r2
 800c2da:	d003      	beq.n	800c2e4 <TIM_TI1_SetConfig+0x40>
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	4a1c      	ldr	r2, [pc, #112]	; (800c350 <TIM_TI1_SetConfig+0xac>)
 800c2e0:	4293      	cmp	r3, r2
 800c2e2:	d101      	bne.n	800c2e8 <TIM_TI1_SetConfig+0x44>
 800c2e4:	2301      	movs	r3, #1
 800c2e6:	e000      	b.n	800c2ea <TIM_TI1_SetConfig+0x46>
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d008      	beq.n	800c300 <TIM_TI1_SetConfig+0x5c>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800c2ee:	697b      	ldr	r3, [r7, #20]
 800c2f0:	2203      	movs	r2, #3
 800c2f2:	4393      	bics	r3, r2
 800c2f4:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800c2f6:	697a      	ldr	r2, [r7, #20]
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	4313      	orrs	r3, r2
 800c2fc:	617b      	str	r3, [r7, #20]
 800c2fe:	e003      	b.n	800c308 <TIM_TI1_SetConfig+0x64>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800c300:	697b      	ldr	r3, [r7, #20]
 800c302:	2201      	movs	r2, #1
 800c304:	4313      	orrs	r3, r2
 800c306:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c308:	697b      	ldr	r3, [r7, #20]
 800c30a:	22f0      	movs	r2, #240	; 0xf0
 800c30c:	4393      	bics	r3, r2
 800c30e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800c310:	683b      	ldr	r3, [r7, #0]
 800c312:	011b      	lsls	r3, r3, #4
 800c314:	22ff      	movs	r2, #255	; 0xff
 800c316:	4013      	ands	r3, r2
 800c318:	697a      	ldr	r2, [r7, #20]
 800c31a:	4313      	orrs	r3, r2
 800c31c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c31e:	693b      	ldr	r3, [r7, #16]
 800c320:	220a      	movs	r2, #10
 800c322:	4393      	bics	r3, r2
 800c324:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800c326:	68bb      	ldr	r3, [r7, #8]
 800c328:	220a      	movs	r2, #10
 800c32a:	4013      	ands	r3, r2
 800c32c:	693a      	ldr	r2, [r7, #16]
 800c32e:	4313      	orrs	r3, r2
 800c330:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	697a      	ldr	r2, [r7, #20]
 800c336:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	693a      	ldr	r2, [r7, #16]
 800c33c:	621a      	str	r2, [r3, #32]
}
 800c33e:	46c0      	nop			; (mov r8, r8)
 800c340:	46bd      	mov	sp, r7
 800c342:	b006      	add	sp, #24
 800c344:	bd80      	pop	{r7, pc}
 800c346:	46c0      	nop			; (mov r8, r8)
 800c348:	40012c00 	.word	0x40012c00
 800c34c:	40000400 	.word	0x40000400
 800c350:	40014000 	.word	0x40014000

0800c354 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b086      	sub	sp, #24
 800c358:	af00      	add	r7, sp, #0
 800c35a:	60f8      	str	r0, [r7, #12]
 800c35c:	60b9      	str	r1, [r7, #8]
 800c35e:	607a      	str	r2, [r7, #4]
 800c360:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	6a1b      	ldr	r3, [r3, #32]
 800c366:	2210      	movs	r2, #16
 800c368:	4393      	bics	r3, r2
 800c36a:	001a      	movs	r2, r3
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	699b      	ldr	r3, [r3, #24]
 800c374:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	6a1b      	ldr	r3, [r3, #32]
 800c37a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800c37c:	697b      	ldr	r3, [r7, #20]
 800c37e:	4a14      	ldr	r2, [pc, #80]	; (800c3d0 <TIM_TI2_SetConfig+0x7c>)
 800c380:	4013      	ands	r3, r2
 800c382:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	021b      	lsls	r3, r3, #8
 800c388:	697a      	ldr	r2, [r7, #20]
 800c38a:	4313      	orrs	r3, r2
 800c38c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c38e:	697b      	ldr	r3, [r7, #20]
 800c390:	4a10      	ldr	r2, [pc, #64]	; (800c3d4 <TIM_TI2_SetConfig+0x80>)
 800c392:	4013      	ands	r3, r2
 800c394:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	031b      	lsls	r3, r3, #12
 800c39a:	041b      	lsls	r3, r3, #16
 800c39c:	0c1b      	lsrs	r3, r3, #16
 800c39e:	697a      	ldr	r2, [r7, #20]
 800c3a0:	4313      	orrs	r3, r2
 800c3a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c3a4:	693b      	ldr	r3, [r7, #16]
 800c3a6:	22a0      	movs	r2, #160	; 0xa0
 800c3a8:	4393      	bics	r3, r2
 800c3aa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800c3ac:	68bb      	ldr	r3, [r7, #8]
 800c3ae:	011b      	lsls	r3, r3, #4
 800c3b0:	22a0      	movs	r2, #160	; 0xa0
 800c3b2:	4013      	ands	r3, r2
 800c3b4:	693a      	ldr	r2, [r7, #16]
 800c3b6:	4313      	orrs	r3, r2
 800c3b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	697a      	ldr	r2, [r7, #20]
 800c3be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	693a      	ldr	r2, [r7, #16]
 800c3c4:	621a      	str	r2, [r3, #32]
}
 800c3c6:	46c0      	nop			; (mov r8, r8)
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	b006      	add	sp, #24
 800c3cc:	bd80      	pop	{r7, pc}
 800c3ce:	46c0      	nop			; (mov r8, r8)
 800c3d0:	fffffcff 	.word	0xfffffcff
 800c3d4:	ffff0fff 	.word	0xffff0fff

0800c3d8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b086      	sub	sp, #24
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	60f8      	str	r0, [r7, #12]
 800c3e0:	60b9      	str	r1, [r7, #8]
 800c3e2:	607a      	str	r2, [r7, #4]
 800c3e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	6a1b      	ldr	r3, [r3, #32]
 800c3ea:	4a19      	ldr	r2, [pc, #100]	; (800c450 <TIM_TI3_SetConfig+0x78>)
 800c3ec:	401a      	ands	r2, r3
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	69db      	ldr	r3, [r3, #28]
 800c3f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	6a1b      	ldr	r3, [r3, #32]
 800c3fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800c3fe:	697b      	ldr	r3, [r7, #20]
 800c400:	2203      	movs	r2, #3
 800c402:	4393      	bics	r3, r2
 800c404:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800c406:	697a      	ldr	r2, [r7, #20]
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	4313      	orrs	r3, r2
 800c40c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800c40e:	697b      	ldr	r3, [r7, #20]
 800c410:	22f0      	movs	r2, #240	; 0xf0
 800c412:	4393      	bics	r3, r2
 800c414:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	011b      	lsls	r3, r3, #4
 800c41a:	22ff      	movs	r2, #255	; 0xff
 800c41c:	4013      	ands	r3, r2
 800c41e:	697a      	ldr	r2, [r7, #20]
 800c420:	4313      	orrs	r3, r2
 800c422:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800c424:	693b      	ldr	r3, [r7, #16]
 800c426:	4a0b      	ldr	r2, [pc, #44]	; (800c454 <TIM_TI3_SetConfig+0x7c>)
 800c428:	4013      	ands	r3, r2
 800c42a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800c42c:	68bb      	ldr	r3, [r7, #8]
 800c42e:	021a      	lsls	r2, r3, #8
 800c430:	23a0      	movs	r3, #160	; 0xa0
 800c432:	011b      	lsls	r3, r3, #4
 800c434:	4013      	ands	r3, r2
 800c436:	693a      	ldr	r2, [r7, #16]
 800c438:	4313      	orrs	r3, r2
 800c43a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	697a      	ldr	r2, [r7, #20]
 800c440:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	693a      	ldr	r2, [r7, #16]
 800c446:	621a      	str	r2, [r3, #32]
}
 800c448:	46c0      	nop			; (mov r8, r8)
 800c44a:	46bd      	mov	sp, r7
 800c44c:	b006      	add	sp, #24
 800c44e:	bd80      	pop	{r7, pc}
 800c450:	fffffeff 	.word	0xfffffeff
 800c454:	fffff5ff 	.word	0xfffff5ff

0800c458 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b086      	sub	sp, #24
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	60f8      	str	r0, [r7, #12]
 800c460:	60b9      	str	r1, [r7, #8]
 800c462:	607a      	str	r2, [r7, #4]
 800c464:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	6a1b      	ldr	r3, [r3, #32]
 800c46a:	4a1a      	ldr	r2, [pc, #104]	; (800c4d4 <TIM_TI4_SetConfig+0x7c>)
 800c46c:	401a      	ands	r2, r3
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	69db      	ldr	r3, [r3, #28]
 800c476:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	6a1b      	ldr	r3, [r3, #32]
 800c47c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800c47e:	697b      	ldr	r3, [r7, #20]
 800c480:	4a15      	ldr	r2, [pc, #84]	; (800c4d8 <TIM_TI4_SetConfig+0x80>)
 800c482:	4013      	ands	r3, r2
 800c484:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	021b      	lsls	r3, r3, #8
 800c48a:	697a      	ldr	r2, [r7, #20]
 800c48c:	4313      	orrs	r3, r2
 800c48e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800c490:	697b      	ldr	r3, [r7, #20]
 800c492:	4a12      	ldr	r2, [pc, #72]	; (800c4dc <TIM_TI4_SetConfig+0x84>)
 800c494:	4013      	ands	r3, r2
 800c496:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	031b      	lsls	r3, r3, #12
 800c49c:	041b      	lsls	r3, r3, #16
 800c49e:	0c1b      	lsrs	r3, r3, #16
 800c4a0:	697a      	ldr	r2, [r7, #20]
 800c4a2:	4313      	orrs	r3, r2
 800c4a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800c4a6:	693b      	ldr	r3, [r7, #16]
 800c4a8:	4a0d      	ldr	r2, [pc, #52]	; (800c4e0 <TIM_TI4_SetConfig+0x88>)
 800c4aa:	4013      	ands	r3, r2
 800c4ac:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800c4ae:	68bb      	ldr	r3, [r7, #8]
 800c4b0:	031a      	lsls	r2, r3, #12
 800c4b2:	23a0      	movs	r3, #160	; 0xa0
 800c4b4:	021b      	lsls	r3, r3, #8
 800c4b6:	4013      	ands	r3, r2
 800c4b8:	693a      	ldr	r2, [r7, #16]
 800c4ba:	4313      	orrs	r3, r2
 800c4bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	697a      	ldr	r2, [r7, #20]
 800c4c2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	693a      	ldr	r2, [r7, #16]
 800c4c8:	621a      	str	r2, [r3, #32]
}
 800c4ca:	46c0      	nop			; (mov r8, r8)
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	b006      	add	sp, #24
 800c4d0:	bd80      	pop	{r7, pc}
 800c4d2:	46c0      	nop			; (mov r8, r8)
 800c4d4:	ffffefff 	.word	0xffffefff
 800c4d8:	fffffcff 	.word	0xfffffcff
 800c4dc:	ffff0fff 	.word	0xffff0fff
 800c4e0:	ffff5fff 	.word	0xffff5fff

0800c4e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b086      	sub	sp, #24
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	60f8      	str	r0, [r7, #12]
 800c4ec:	60b9      	str	r1, [r7, #8]
 800c4ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c4f0:	68bb      	ldr	r3, [r7, #8]
 800c4f2:	221f      	movs	r2, #31
 800c4f4:	4013      	ands	r3, r2
 800c4f6:	2201      	movs	r2, #1
 800c4f8:	409a      	lsls	r2, r3
 800c4fa:	0013      	movs	r3, r2
 800c4fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	6a1b      	ldr	r3, [r3, #32]
 800c502:	697a      	ldr	r2, [r7, #20]
 800c504:	43d2      	mvns	r2, r2
 800c506:	401a      	ands	r2, r3
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	6a1a      	ldr	r2, [r3, #32]
 800c510:	68bb      	ldr	r3, [r7, #8]
 800c512:	211f      	movs	r1, #31
 800c514:	400b      	ands	r3, r1
 800c516:	6879      	ldr	r1, [r7, #4]
 800c518:	4099      	lsls	r1, r3
 800c51a:	000b      	movs	r3, r1
 800c51c:	431a      	orrs	r2, r3
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	621a      	str	r2, [r3, #32]
}
 800c522:	46c0      	nop			; (mov r8, r8)
 800c524:	46bd      	mov	sp, r7
 800c526:	b006      	add	sp, #24
 800c528:	bd80      	pop	{r7, pc}
	...

0800c52c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b084      	sub	sp, #16
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
 800c534:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	223c      	movs	r2, #60	; 0x3c
 800c53a:	5c9b      	ldrb	r3, [r3, r2]
 800c53c:	2b01      	cmp	r3, #1
 800c53e:	d101      	bne.n	800c544 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c540:	2302      	movs	r3, #2
 800c542:	e04f      	b.n	800c5e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	223c      	movs	r2, #60	; 0x3c
 800c548:	2101      	movs	r1, #1
 800c54a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	223d      	movs	r2, #61	; 0x3d
 800c550:	2102      	movs	r1, #2
 800c552:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	685b      	ldr	r3, [r3, #4]
 800c55a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	689b      	ldr	r3, [r3, #8]
 800c562:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	4a20      	ldr	r2, [pc, #128]	; (800c5ec <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800c56a:	4293      	cmp	r3, r2
 800c56c:	d108      	bne.n	800c580 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	4a1f      	ldr	r2, [pc, #124]	; (800c5f0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800c572:	4013      	ands	r3, r2
 800c574:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	685b      	ldr	r3, [r3, #4]
 800c57a:	68fa      	ldr	r2, [r7, #12]
 800c57c:	4313      	orrs	r3, r2
 800c57e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	2270      	movs	r2, #112	; 0x70
 800c584:	4393      	bics	r3, r2
 800c586:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	68fa      	ldr	r2, [r7, #12]
 800c58e:	4313      	orrs	r3, r2
 800c590:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	68fa      	ldr	r2, [r7, #12]
 800c598:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	4a13      	ldr	r2, [pc, #76]	; (800c5ec <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800c5a0:	4293      	cmp	r3, r2
 800c5a2:	d009      	beq.n	800c5b8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	4a12      	ldr	r2, [pc, #72]	; (800c5f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c5aa:	4293      	cmp	r3, r2
 800c5ac:	d004      	beq.n	800c5b8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	4a11      	ldr	r2, [pc, #68]	; (800c5f8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c5b4:	4293      	cmp	r3, r2
 800c5b6:	d10c      	bne.n	800c5d2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c5b8:	68bb      	ldr	r3, [r7, #8]
 800c5ba:	2280      	movs	r2, #128	; 0x80
 800c5bc:	4393      	bics	r3, r2
 800c5be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	689b      	ldr	r3, [r3, #8]
 800c5c4:	68ba      	ldr	r2, [r7, #8]
 800c5c6:	4313      	orrs	r3, r2
 800c5c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	68ba      	ldr	r2, [r7, #8]
 800c5d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	223d      	movs	r2, #61	; 0x3d
 800c5d6:	2101      	movs	r1, #1
 800c5d8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	223c      	movs	r2, #60	; 0x3c
 800c5de:	2100      	movs	r1, #0
 800c5e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c5e2:	2300      	movs	r3, #0
}
 800c5e4:	0018      	movs	r0, r3
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	b004      	add	sp, #16
 800c5ea:	bd80      	pop	{r7, pc}
 800c5ec:	40012c00 	.word	0x40012c00
 800c5f0:	ff0fffff 	.word	0xff0fffff
 800c5f4:	40000400 	.word	0x40000400
 800c5f8:	40014000 	.word	0x40014000

0800c5fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b082      	sub	sp, #8
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c604:	46c0      	nop			; (mov r8, r8)
 800c606:	46bd      	mov	sp, r7
 800c608:	b002      	add	sp, #8
 800c60a:	bd80      	pop	{r7, pc}

0800c60c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b082      	sub	sp, #8
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c614:	46c0      	nop			; (mov r8, r8)
 800c616:	46bd      	mov	sp, r7
 800c618:	b002      	add	sp, #8
 800c61a:	bd80      	pop	{r7, pc}

0800c61c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b082      	sub	sp, #8
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c624:	46c0      	nop			; (mov r8, r8)
 800c626:	46bd      	mov	sp, r7
 800c628:	b002      	add	sp, #8
 800c62a:	bd80      	pop	{r7, pc}

0800c62c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b082      	sub	sp, #8
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d101      	bne.n	800c63e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c63a:	2301      	movs	r3, #1
 800c63c:	e046      	b.n	800c6cc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	2288      	movs	r2, #136	; 0x88
 800c642:	589b      	ldr	r3, [r3, r2]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d107      	bne.n	800c658 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2284      	movs	r2, #132	; 0x84
 800c64c:	2100      	movs	r1, #0
 800c64e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	0018      	movs	r0, r3
 800c654:	f7fb fb32 	bl	8007cbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2288      	movs	r2, #136	; 0x88
 800c65c:	2124      	movs	r1, #36	; 0x24
 800c65e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	681a      	ldr	r2, [r3, #0]
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	2101      	movs	r1, #1
 800c66c:	438a      	bics	r2, r1
 800c66e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	0018      	movs	r0, r3
 800c674:	f000 fc5e 	bl	800cf34 <UART_SetConfig>
 800c678:	0003      	movs	r3, r0
 800c67a:	2b01      	cmp	r3, #1
 800c67c:	d101      	bne.n	800c682 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800c67e:	2301      	movs	r3, #1
 800c680:	e024      	b.n	800c6cc <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c686:	2b00      	cmp	r3, #0
 800c688:	d003      	beq.n	800c692 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	0018      	movs	r0, r3
 800c68e:	f000 fdf5 	bl	800d27c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	685a      	ldr	r2, [r3, #4]
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	490d      	ldr	r1, [pc, #52]	; (800c6d4 <HAL_UART_Init+0xa8>)
 800c69e:	400a      	ands	r2, r1
 800c6a0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	689a      	ldr	r2, [r3, #8]
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	212a      	movs	r1, #42	; 0x2a
 800c6ae:	438a      	bics	r2, r1
 800c6b0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	681a      	ldr	r2, [r3, #0]
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	2101      	movs	r1, #1
 800c6be:	430a      	orrs	r2, r1
 800c6c0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	0018      	movs	r0, r3
 800c6c6:	f000 fe8d 	bl	800d3e4 <UART_CheckIdleState>
 800c6ca:	0003      	movs	r3, r0
}
 800c6cc:	0018      	movs	r0, r3
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	b002      	add	sp, #8
 800c6d2:	bd80      	pop	{r7, pc}
 800c6d4:	ffffb7ff 	.word	0xffffb7ff

0800c6d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b08a      	sub	sp, #40	; 0x28
 800c6dc:	af02      	add	r7, sp, #8
 800c6de:	60f8      	str	r0, [r7, #12]
 800c6e0:	60b9      	str	r1, [r7, #8]
 800c6e2:	603b      	str	r3, [r7, #0]
 800c6e4:	1dbb      	adds	r3, r7, #6
 800c6e6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	2288      	movs	r2, #136	; 0x88
 800c6ec:	589b      	ldr	r3, [r3, r2]
 800c6ee:	2b20      	cmp	r3, #32
 800c6f0:	d000      	beq.n	800c6f4 <HAL_UART_Transmit+0x1c>
 800c6f2:	e088      	b.n	800c806 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c6f4:	68bb      	ldr	r3, [r7, #8]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d003      	beq.n	800c702 <HAL_UART_Transmit+0x2a>
 800c6fa:	1dbb      	adds	r3, r7, #6
 800c6fc:	881b      	ldrh	r3, [r3, #0]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d101      	bne.n	800c706 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800c702:	2301      	movs	r3, #1
 800c704:	e080      	b.n	800c808 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	689a      	ldr	r2, [r3, #8]
 800c70a:	2380      	movs	r3, #128	; 0x80
 800c70c:	015b      	lsls	r3, r3, #5
 800c70e:	429a      	cmp	r2, r3
 800c710:	d109      	bne.n	800c726 <HAL_UART_Transmit+0x4e>
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	691b      	ldr	r3, [r3, #16]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d105      	bne.n	800c726 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800c71a:	68bb      	ldr	r3, [r7, #8]
 800c71c:	2201      	movs	r2, #1
 800c71e:	4013      	ands	r3, r2
 800c720:	d001      	beq.n	800c726 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800c722:	2301      	movs	r3, #1
 800c724:	e070      	b.n	800c808 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	2290      	movs	r2, #144	; 0x90
 800c72a:	2100      	movs	r1, #0
 800c72c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	2288      	movs	r2, #136	; 0x88
 800c732:	2121      	movs	r1, #33	; 0x21
 800c734:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c736:	f7fc fb4b 	bl	8008dd0 <HAL_GetTick>
 800c73a:	0003      	movs	r3, r0
 800c73c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	1dba      	adds	r2, r7, #6
 800c742:	2154      	movs	r1, #84	; 0x54
 800c744:	8812      	ldrh	r2, [r2, #0]
 800c746:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	1dba      	adds	r2, r7, #6
 800c74c:	2156      	movs	r1, #86	; 0x56
 800c74e:	8812      	ldrh	r2, [r2, #0]
 800c750:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	689a      	ldr	r2, [r3, #8]
 800c756:	2380      	movs	r3, #128	; 0x80
 800c758:	015b      	lsls	r3, r3, #5
 800c75a:	429a      	cmp	r2, r3
 800c75c:	d108      	bne.n	800c770 <HAL_UART_Transmit+0x98>
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	691b      	ldr	r3, [r3, #16]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d104      	bne.n	800c770 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800c766:	2300      	movs	r3, #0
 800c768:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c76a:	68bb      	ldr	r3, [r7, #8]
 800c76c:	61bb      	str	r3, [r7, #24]
 800c76e:	e003      	b.n	800c778 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800c770:	68bb      	ldr	r3, [r7, #8]
 800c772:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c774:	2300      	movs	r3, #0
 800c776:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c778:	e02c      	b.n	800c7d4 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c77a:	697a      	ldr	r2, [r7, #20]
 800c77c:	68f8      	ldr	r0, [r7, #12]
 800c77e:	683b      	ldr	r3, [r7, #0]
 800c780:	9300      	str	r3, [sp, #0]
 800c782:	0013      	movs	r3, r2
 800c784:	2200      	movs	r2, #0
 800c786:	2180      	movs	r1, #128	; 0x80
 800c788:	f000 fe7a 	bl	800d480 <UART_WaitOnFlagUntilTimeout>
 800c78c:	1e03      	subs	r3, r0, #0
 800c78e:	d001      	beq.n	800c794 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 800c790:	2303      	movs	r3, #3
 800c792:	e039      	b.n	800c808 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 800c794:	69fb      	ldr	r3, [r7, #28]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d10b      	bne.n	800c7b2 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c79a:	69bb      	ldr	r3, [r7, #24]
 800c79c:	881b      	ldrh	r3, [r3, #0]
 800c79e:	001a      	movs	r2, r3
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	05d2      	lsls	r2, r2, #23
 800c7a6:	0dd2      	lsrs	r2, r2, #23
 800c7a8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c7aa:	69bb      	ldr	r3, [r7, #24]
 800c7ac:	3302      	adds	r3, #2
 800c7ae:	61bb      	str	r3, [r7, #24]
 800c7b0:	e007      	b.n	800c7c2 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c7b2:	69fb      	ldr	r3, [r7, #28]
 800c7b4:	781a      	ldrb	r2, [r3, #0]
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c7bc:	69fb      	ldr	r3, [r7, #28]
 800c7be:	3301      	adds	r3, #1
 800c7c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	2256      	movs	r2, #86	; 0x56
 800c7c6:	5a9b      	ldrh	r3, [r3, r2]
 800c7c8:	b29b      	uxth	r3, r3
 800c7ca:	3b01      	subs	r3, #1
 800c7cc:	b299      	uxth	r1, r3
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	2256      	movs	r2, #86	; 0x56
 800c7d2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	2256      	movs	r2, #86	; 0x56
 800c7d8:	5a9b      	ldrh	r3, [r3, r2]
 800c7da:	b29b      	uxth	r3, r3
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d1cc      	bne.n	800c77a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c7e0:	697a      	ldr	r2, [r7, #20]
 800c7e2:	68f8      	ldr	r0, [r7, #12]
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	9300      	str	r3, [sp, #0]
 800c7e8:	0013      	movs	r3, r2
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	2140      	movs	r1, #64	; 0x40
 800c7ee:	f000 fe47 	bl	800d480 <UART_WaitOnFlagUntilTimeout>
 800c7f2:	1e03      	subs	r3, r0, #0
 800c7f4:	d001      	beq.n	800c7fa <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 800c7f6:	2303      	movs	r3, #3
 800c7f8:	e006      	b.n	800c808 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	2288      	movs	r2, #136	; 0x88
 800c7fe:	2120      	movs	r1, #32
 800c800:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800c802:	2300      	movs	r3, #0
 800c804:	e000      	b.n	800c808 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 800c806:	2302      	movs	r3, #2
  }
}
 800c808:	0018      	movs	r0, r3
 800c80a:	46bd      	mov	sp, r7
 800c80c:	b008      	add	sp, #32
 800c80e:	bd80      	pop	{r7, pc}

0800c810 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b088      	sub	sp, #32
 800c814:	af00      	add	r7, sp, #0
 800c816:	60f8      	str	r0, [r7, #12]
 800c818:	60b9      	str	r1, [r7, #8]
 800c81a:	1dbb      	adds	r3, r7, #6
 800c81c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	228c      	movs	r2, #140	; 0x8c
 800c822:	589b      	ldr	r3, [r3, r2]
 800c824:	2b20      	cmp	r3, #32
 800c826:	d145      	bne.n	800c8b4 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 800c828:	68bb      	ldr	r3, [r7, #8]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d003      	beq.n	800c836 <HAL_UART_Receive_IT+0x26>
 800c82e:	1dbb      	adds	r3, r7, #6
 800c830:	881b      	ldrh	r3, [r3, #0]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d101      	bne.n	800c83a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800c836:	2301      	movs	r3, #1
 800c838:	e03d      	b.n	800c8b6 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	689a      	ldr	r2, [r3, #8]
 800c83e:	2380      	movs	r3, #128	; 0x80
 800c840:	015b      	lsls	r3, r3, #5
 800c842:	429a      	cmp	r2, r3
 800c844:	d109      	bne.n	800c85a <HAL_UART_Receive_IT+0x4a>
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	691b      	ldr	r3, [r3, #16]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d105      	bne.n	800c85a <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	2201      	movs	r2, #1
 800c852:	4013      	ands	r3, r2
 800c854:	d001      	beq.n	800c85a <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800c856:	2301      	movs	r3, #1
 800c858:	e02d      	b.n	800c8b6 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	2200      	movs	r2, #0
 800c85e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	685a      	ldr	r2, [r3, #4]
 800c866:	2380      	movs	r3, #128	; 0x80
 800c868:	041b      	lsls	r3, r3, #16
 800c86a:	4013      	ands	r3, r2
 800c86c:	d019      	beq.n	800c8a2 <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c86e:	f3ef 8310 	mrs	r3, PRIMASK
 800c872:	613b      	str	r3, [r7, #16]
  return(result);
 800c874:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c876:	61fb      	str	r3, [r7, #28]
 800c878:	2301      	movs	r3, #1
 800c87a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c87c:	697b      	ldr	r3, [r7, #20]
 800c87e:	f383 8810 	msr	PRIMASK, r3
}
 800c882:	46c0      	nop			; (mov r8, r8)
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	681a      	ldr	r2, [r3, #0]
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	2180      	movs	r1, #128	; 0x80
 800c890:	04c9      	lsls	r1, r1, #19
 800c892:	430a      	orrs	r2, r1
 800c894:	601a      	str	r2, [r3, #0]
 800c896:	69fb      	ldr	r3, [r7, #28]
 800c898:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c89a:	69bb      	ldr	r3, [r7, #24]
 800c89c:	f383 8810 	msr	PRIMASK, r3
}
 800c8a0:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c8a2:	1dbb      	adds	r3, r7, #6
 800c8a4:	881a      	ldrh	r2, [r3, #0]
 800c8a6:	68b9      	ldr	r1, [r7, #8]
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	0018      	movs	r0, r3
 800c8ac:	f000 feb0 	bl	800d610 <UART_Start_Receive_IT>
 800c8b0:	0003      	movs	r3, r0
 800c8b2:	e000      	b.n	800c8b6 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 800c8b4:	2302      	movs	r3, #2
  }
}
 800c8b6:	0018      	movs	r0, r3
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	b008      	add	sp, #32
 800c8bc:	bd80      	pop	{r7, pc}
	...

0800c8c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c8c0:	b5b0      	push	{r4, r5, r7, lr}
 800c8c2:	b0aa      	sub	sp, #168	; 0xa8
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	69db      	ldr	r3, [r3, #28]
 800c8ce:	22a4      	movs	r2, #164	; 0xa4
 800c8d0:	18b9      	adds	r1, r7, r2
 800c8d2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	20a0      	movs	r0, #160	; 0xa0
 800c8dc:	1839      	adds	r1, r7, r0
 800c8de:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	689b      	ldr	r3, [r3, #8]
 800c8e6:	249c      	movs	r4, #156	; 0x9c
 800c8e8:	1939      	adds	r1, r7, r4
 800c8ea:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c8ec:	0011      	movs	r1, r2
 800c8ee:	18bb      	adds	r3, r7, r2
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	4aa2      	ldr	r2, [pc, #648]	; (800cb7c <HAL_UART_IRQHandler+0x2bc>)
 800c8f4:	4013      	ands	r3, r2
 800c8f6:	2298      	movs	r2, #152	; 0x98
 800c8f8:	18bd      	adds	r5, r7, r2
 800c8fa:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800c8fc:	18bb      	adds	r3, r7, r2
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d11a      	bne.n	800c93a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c904:	187b      	adds	r3, r7, r1
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	2220      	movs	r2, #32
 800c90a:	4013      	ands	r3, r2
 800c90c:	d015      	beq.n	800c93a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c90e:	183b      	adds	r3, r7, r0
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	2220      	movs	r2, #32
 800c914:	4013      	ands	r3, r2
 800c916:	d105      	bne.n	800c924 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c918:	193b      	adds	r3, r7, r4
 800c91a:	681a      	ldr	r2, [r3, #0]
 800c91c:	2380      	movs	r3, #128	; 0x80
 800c91e:	055b      	lsls	r3, r3, #21
 800c920:	4013      	ands	r3, r2
 800c922:	d00a      	beq.n	800c93a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d100      	bne.n	800c92e <HAL_UART_IRQHandler+0x6e>
 800c92c:	e2dc      	b.n	800cee8 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c932:	687a      	ldr	r2, [r7, #4]
 800c934:	0010      	movs	r0, r2
 800c936:	4798      	blx	r3
      }
      return;
 800c938:	e2d6      	b.n	800cee8 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c93a:	2398      	movs	r3, #152	; 0x98
 800c93c:	18fb      	adds	r3, r7, r3
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d100      	bne.n	800c946 <HAL_UART_IRQHandler+0x86>
 800c944:	e122      	b.n	800cb8c <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c946:	239c      	movs	r3, #156	; 0x9c
 800c948:	18fb      	adds	r3, r7, r3
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	4a8c      	ldr	r2, [pc, #560]	; (800cb80 <HAL_UART_IRQHandler+0x2c0>)
 800c94e:	4013      	ands	r3, r2
 800c950:	d106      	bne.n	800c960 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c952:	23a0      	movs	r3, #160	; 0xa0
 800c954:	18fb      	adds	r3, r7, r3
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	4a8a      	ldr	r2, [pc, #552]	; (800cb84 <HAL_UART_IRQHandler+0x2c4>)
 800c95a:	4013      	ands	r3, r2
 800c95c:	d100      	bne.n	800c960 <HAL_UART_IRQHandler+0xa0>
 800c95e:	e115      	b.n	800cb8c <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c960:	23a4      	movs	r3, #164	; 0xa4
 800c962:	18fb      	adds	r3, r7, r3
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	2201      	movs	r2, #1
 800c968:	4013      	ands	r3, r2
 800c96a:	d012      	beq.n	800c992 <HAL_UART_IRQHandler+0xd2>
 800c96c:	23a0      	movs	r3, #160	; 0xa0
 800c96e:	18fb      	adds	r3, r7, r3
 800c970:	681a      	ldr	r2, [r3, #0]
 800c972:	2380      	movs	r3, #128	; 0x80
 800c974:	005b      	lsls	r3, r3, #1
 800c976:	4013      	ands	r3, r2
 800c978:	d00b      	beq.n	800c992 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	2201      	movs	r2, #1
 800c980:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	2290      	movs	r2, #144	; 0x90
 800c986:	589b      	ldr	r3, [r3, r2]
 800c988:	2201      	movs	r2, #1
 800c98a:	431a      	orrs	r2, r3
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2190      	movs	r1, #144	; 0x90
 800c990:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c992:	23a4      	movs	r3, #164	; 0xa4
 800c994:	18fb      	adds	r3, r7, r3
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	2202      	movs	r2, #2
 800c99a:	4013      	ands	r3, r2
 800c99c:	d011      	beq.n	800c9c2 <HAL_UART_IRQHandler+0x102>
 800c99e:	239c      	movs	r3, #156	; 0x9c
 800c9a0:	18fb      	adds	r3, r7, r3
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	2201      	movs	r2, #1
 800c9a6:	4013      	ands	r3, r2
 800c9a8:	d00b      	beq.n	800c9c2 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	2202      	movs	r2, #2
 800c9b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	2290      	movs	r2, #144	; 0x90
 800c9b6:	589b      	ldr	r3, [r3, r2]
 800c9b8:	2204      	movs	r2, #4
 800c9ba:	431a      	orrs	r2, r3
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	2190      	movs	r1, #144	; 0x90
 800c9c0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c9c2:	23a4      	movs	r3, #164	; 0xa4
 800c9c4:	18fb      	adds	r3, r7, r3
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	2204      	movs	r2, #4
 800c9ca:	4013      	ands	r3, r2
 800c9cc:	d011      	beq.n	800c9f2 <HAL_UART_IRQHandler+0x132>
 800c9ce:	239c      	movs	r3, #156	; 0x9c
 800c9d0:	18fb      	adds	r3, r7, r3
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	2201      	movs	r2, #1
 800c9d6:	4013      	ands	r3, r2
 800c9d8:	d00b      	beq.n	800c9f2 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	2204      	movs	r2, #4
 800c9e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	2290      	movs	r2, #144	; 0x90
 800c9e6:	589b      	ldr	r3, [r3, r2]
 800c9e8:	2202      	movs	r2, #2
 800c9ea:	431a      	orrs	r2, r3
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	2190      	movs	r1, #144	; 0x90
 800c9f0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c9f2:	23a4      	movs	r3, #164	; 0xa4
 800c9f4:	18fb      	adds	r3, r7, r3
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	2208      	movs	r2, #8
 800c9fa:	4013      	ands	r3, r2
 800c9fc:	d017      	beq.n	800ca2e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c9fe:	23a0      	movs	r3, #160	; 0xa0
 800ca00:	18fb      	adds	r3, r7, r3
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	2220      	movs	r2, #32
 800ca06:	4013      	ands	r3, r2
 800ca08:	d105      	bne.n	800ca16 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ca0a:	239c      	movs	r3, #156	; 0x9c
 800ca0c:	18fb      	adds	r3, r7, r3
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	4a5b      	ldr	r2, [pc, #364]	; (800cb80 <HAL_UART_IRQHandler+0x2c0>)
 800ca12:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ca14:	d00b      	beq.n	800ca2e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	2208      	movs	r2, #8
 800ca1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	2290      	movs	r2, #144	; 0x90
 800ca22:	589b      	ldr	r3, [r3, r2]
 800ca24:	2208      	movs	r2, #8
 800ca26:	431a      	orrs	r2, r3
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2190      	movs	r1, #144	; 0x90
 800ca2c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ca2e:	23a4      	movs	r3, #164	; 0xa4
 800ca30:	18fb      	adds	r3, r7, r3
 800ca32:	681a      	ldr	r2, [r3, #0]
 800ca34:	2380      	movs	r3, #128	; 0x80
 800ca36:	011b      	lsls	r3, r3, #4
 800ca38:	4013      	ands	r3, r2
 800ca3a:	d013      	beq.n	800ca64 <HAL_UART_IRQHandler+0x1a4>
 800ca3c:	23a0      	movs	r3, #160	; 0xa0
 800ca3e:	18fb      	adds	r3, r7, r3
 800ca40:	681a      	ldr	r2, [r3, #0]
 800ca42:	2380      	movs	r3, #128	; 0x80
 800ca44:	04db      	lsls	r3, r3, #19
 800ca46:	4013      	ands	r3, r2
 800ca48:	d00c      	beq.n	800ca64 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	2280      	movs	r2, #128	; 0x80
 800ca50:	0112      	lsls	r2, r2, #4
 800ca52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2290      	movs	r2, #144	; 0x90
 800ca58:	589b      	ldr	r3, [r3, r2]
 800ca5a:	2220      	movs	r2, #32
 800ca5c:	431a      	orrs	r2, r3
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	2190      	movs	r1, #144	; 0x90
 800ca62:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	2290      	movs	r2, #144	; 0x90
 800ca68:	589b      	ldr	r3, [r3, r2]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d100      	bne.n	800ca70 <HAL_UART_IRQHandler+0x1b0>
 800ca6e:	e23d      	b.n	800ceec <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ca70:	23a4      	movs	r3, #164	; 0xa4
 800ca72:	18fb      	adds	r3, r7, r3
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	2220      	movs	r2, #32
 800ca78:	4013      	ands	r3, r2
 800ca7a:	d015      	beq.n	800caa8 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ca7c:	23a0      	movs	r3, #160	; 0xa0
 800ca7e:	18fb      	adds	r3, r7, r3
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	2220      	movs	r2, #32
 800ca84:	4013      	ands	r3, r2
 800ca86:	d106      	bne.n	800ca96 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ca88:	239c      	movs	r3, #156	; 0x9c
 800ca8a:	18fb      	adds	r3, r7, r3
 800ca8c:	681a      	ldr	r2, [r3, #0]
 800ca8e:	2380      	movs	r3, #128	; 0x80
 800ca90:	055b      	lsls	r3, r3, #21
 800ca92:	4013      	ands	r3, r2
 800ca94:	d008      	beq.n	800caa8 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d004      	beq.n	800caa8 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800caa2:	687a      	ldr	r2, [r7, #4]
 800caa4:	0010      	movs	r0, r2
 800caa6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	2290      	movs	r2, #144	; 0x90
 800caac:	589b      	ldr	r3, [r3, r2]
 800caae:	2194      	movs	r1, #148	; 0x94
 800cab0:	187a      	adds	r2, r7, r1
 800cab2:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	689b      	ldr	r3, [r3, #8]
 800caba:	2240      	movs	r2, #64	; 0x40
 800cabc:	4013      	ands	r3, r2
 800cabe:	2b40      	cmp	r3, #64	; 0x40
 800cac0:	d004      	beq.n	800cacc <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800cac2:	187b      	adds	r3, r7, r1
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	2228      	movs	r2, #40	; 0x28
 800cac8:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800caca:	d04c      	beq.n	800cb66 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	0018      	movs	r0, r3
 800cad0:	f000 fec2 	bl	800d858 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	689b      	ldr	r3, [r3, #8]
 800cada:	2240      	movs	r2, #64	; 0x40
 800cadc:	4013      	ands	r3, r2
 800cade:	2b40      	cmp	r3, #64	; 0x40
 800cae0:	d13c      	bne.n	800cb5c <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cae2:	f3ef 8310 	mrs	r3, PRIMASK
 800cae6:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800cae8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800caea:	2090      	movs	r0, #144	; 0x90
 800caec:	183a      	adds	r2, r7, r0
 800caee:	6013      	str	r3, [r2, #0]
 800caf0:	2301      	movs	r3, #1
 800caf2:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800caf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800caf6:	f383 8810 	msr	PRIMASK, r3
}
 800cafa:	46c0      	nop			; (mov r8, r8)
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	689a      	ldr	r2, [r3, #8]
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	2140      	movs	r1, #64	; 0x40
 800cb08:	438a      	bics	r2, r1
 800cb0a:	609a      	str	r2, [r3, #8]
 800cb0c:	183b      	adds	r3, r7, r0
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cb14:	f383 8810 	msr	PRIMASK, r3
}
 800cb18:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	2280      	movs	r2, #128	; 0x80
 800cb1e:	589b      	ldr	r3, [r3, r2]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d016      	beq.n	800cb52 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	2280      	movs	r2, #128	; 0x80
 800cb28:	589b      	ldr	r3, [r3, r2]
 800cb2a:	4a17      	ldr	r2, [pc, #92]	; (800cb88 <HAL_UART_IRQHandler+0x2c8>)
 800cb2c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	2280      	movs	r2, #128	; 0x80
 800cb32:	589b      	ldr	r3, [r3, r2]
 800cb34:	0018      	movs	r0, r3
 800cb36:	f7fc fbc9 	bl	80092cc <HAL_DMA_Abort_IT>
 800cb3a:	1e03      	subs	r3, r0, #0
 800cb3c:	d01c      	beq.n	800cb78 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	2280      	movs	r2, #128	; 0x80
 800cb42:	589b      	ldr	r3, [r3, r2]
 800cb44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb46:	687a      	ldr	r2, [r7, #4]
 800cb48:	2180      	movs	r1, #128	; 0x80
 800cb4a:	5852      	ldr	r2, [r2, r1]
 800cb4c:	0010      	movs	r0, r2
 800cb4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb50:	e012      	b.n	800cb78 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	0018      	movs	r0, r3
 800cb56:	f7f8 f8af 	bl	8004cb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb5a:	e00d      	b.n	800cb78 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	0018      	movs	r0, r3
 800cb60:	f7f8 f8aa 	bl	8004cb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb64:	e008      	b.n	800cb78 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	0018      	movs	r0, r3
 800cb6a:	f7f8 f8a5 	bl	8004cb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	2290      	movs	r2, #144	; 0x90
 800cb72:	2100      	movs	r1, #0
 800cb74:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800cb76:	e1b9      	b.n	800ceec <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb78:	46c0      	nop			; (mov r8, r8)
    return;
 800cb7a:	e1b7      	b.n	800ceec <HAL_UART_IRQHandler+0x62c>
 800cb7c:	0000080f 	.word	0x0000080f
 800cb80:	10000001 	.word	0x10000001
 800cb84:	04000120 	.word	0x04000120
 800cb88:	0800d925 	.word	0x0800d925

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb90:	2b01      	cmp	r3, #1
 800cb92:	d000      	beq.n	800cb96 <HAL_UART_IRQHandler+0x2d6>
 800cb94:	e13e      	b.n	800ce14 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800cb96:	23a4      	movs	r3, #164	; 0xa4
 800cb98:	18fb      	adds	r3, r7, r3
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	2210      	movs	r2, #16
 800cb9e:	4013      	ands	r3, r2
 800cba0:	d100      	bne.n	800cba4 <HAL_UART_IRQHandler+0x2e4>
 800cba2:	e137      	b.n	800ce14 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800cba4:	23a0      	movs	r3, #160	; 0xa0
 800cba6:	18fb      	adds	r3, r7, r3
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	2210      	movs	r2, #16
 800cbac:	4013      	ands	r3, r2
 800cbae:	d100      	bne.n	800cbb2 <HAL_UART_IRQHandler+0x2f2>
 800cbb0:	e130      	b.n	800ce14 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	2210      	movs	r2, #16
 800cbb8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	689b      	ldr	r3, [r3, #8]
 800cbc0:	2240      	movs	r2, #64	; 0x40
 800cbc2:	4013      	ands	r3, r2
 800cbc4:	2b40      	cmp	r3, #64	; 0x40
 800cbc6:	d000      	beq.n	800cbca <HAL_UART_IRQHandler+0x30a>
 800cbc8:	e0a4      	b.n	800cd14 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	2280      	movs	r2, #128	; 0x80
 800cbce:	589b      	ldr	r3, [r3, r2]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	685a      	ldr	r2, [r3, #4]
 800cbd4:	217e      	movs	r1, #126	; 0x7e
 800cbd6:	187b      	adds	r3, r7, r1
 800cbd8:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800cbda:	187b      	adds	r3, r7, r1
 800cbdc:	881b      	ldrh	r3, [r3, #0]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d100      	bne.n	800cbe4 <HAL_UART_IRQHandler+0x324>
 800cbe2:	e185      	b.n	800cef0 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	225c      	movs	r2, #92	; 0x5c
 800cbe8:	5a9b      	ldrh	r3, [r3, r2]
 800cbea:	187a      	adds	r2, r7, r1
 800cbec:	8812      	ldrh	r2, [r2, #0]
 800cbee:	429a      	cmp	r2, r3
 800cbf0:	d300      	bcc.n	800cbf4 <HAL_UART_IRQHandler+0x334>
 800cbf2:	e17d      	b.n	800cef0 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	187a      	adds	r2, r7, r1
 800cbf8:	215e      	movs	r1, #94	; 0x5e
 800cbfa:	8812      	ldrh	r2, [r2, #0]
 800cbfc:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	2280      	movs	r2, #128	; 0x80
 800cc02:	589b      	ldr	r3, [r3, r2]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	2220      	movs	r2, #32
 800cc0a:	4013      	ands	r3, r2
 800cc0c:	d170      	bne.n	800ccf0 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc0e:	f3ef 8310 	mrs	r3, PRIMASK
 800cc12:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800cc14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cc16:	67bb      	str	r3, [r7, #120]	; 0x78
 800cc18:	2301      	movs	r3, #1
 800cc1a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc1e:	f383 8810 	msr	PRIMASK, r3
}
 800cc22:	46c0      	nop			; (mov r8, r8)
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	681a      	ldr	r2, [r3, #0]
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	49b4      	ldr	r1, [pc, #720]	; (800cf00 <HAL_UART_IRQHandler+0x640>)
 800cc30:	400a      	ands	r2, r1
 800cc32:	601a      	str	r2, [r3, #0]
 800cc34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cc36:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc3a:	f383 8810 	msr	PRIMASK, r3
}
 800cc3e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc40:	f3ef 8310 	mrs	r3, PRIMASK
 800cc44:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800cc46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc48:	677b      	str	r3, [r7, #116]	; 0x74
 800cc4a:	2301      	movs	r3, #1
 800cc4c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc50:	f383 8810 	msr	PRIMASK, r3
}
 800cc54:	46c0      	nop			; (mov r8, r8)
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	689a      	ldr	r2, [r3, #8]
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	2101      	movs	r1, #1
 800cc62:	438a      	bics	r2, r1
 800cc64:	609a      	str	r2, [r3, #8]
 800cc66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cc68:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc6c:	f383 8810 	msr	PRIMASK, r3
}
 800cc70:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc72:	f3ef 8310 	mrs	r3, PRIMASK
 800cc76:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800cc78:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cc7a:	673b      	str	r3, [r7, #112]	; 0x70
 800cc7c:	2301      	movs	r3, #1
 800cc7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc82:	f383 8810 	msr	PRIMASK, r3
}
 800cc86:	46c0      	nop			; (mov r8, r8)
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	689a      	ldr	r2, [r3, #8]
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	2140      	movs	r1, #64	; 0x40
 800cc94:	438a      	bics	r2, r1
 800cc96:	609a      	str	r2, [r3, #8]
 800cc98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cc9a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc9e:	f383 8810 	msr	PRIMASK, r3
}
 800cca2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	228c      	movs	r2, #140	; 0x8c
 800cca8:	2120      	movs	r1, #32
 800ccaa:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2200      	movs	r2, #0
 800ccb0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ccb2:	f3ef 8310 	mrs	r3, PRIMASK
 800ccb6:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800ccb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ccba:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ccbc:	2301      	movs	r3, #1
 800ccbe:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ccc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ccc2:	f383 8810 	msr	PRIMASK, r3
}
 800ccc6:	46c0      	nop			; (mov r8, r8)
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	681a      	ldr	r2, [r3, #0]
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	2110      	movs	r1, #16
 800ccd4:	438a      	bics	r2, r1
 800ccd6:	601a      	str	r2, [r3, #0]
 800ccd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ccda:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ccdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ccde:	f383 8810 	msr	PRIMASK, r3
}
 800cce2:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2280      	movs	r2, #128	; 0x80
 800cce8:	589b      	ldr	r3, [r3, r2]
 800ccea:	0018      	movs	r0, r3
 800ccec:	f7fc fa8c 	bl	8009208 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2202      	movs	r2, #2
 800ccf4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	225c      	movs	r2, #92	; 0x5c
 800ccfa:	5a9a      	ldrh	r2, [r3, r2]
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	215e      	movs	r1, #94	; 0x5e
 800cd00:	5a5b      	ldrh	r3, [r3, r1]
 800cd02:	b29b      	uxth	r3, r3
 800cd04:	1ad3      	subs	r3, r2, r3
 800cd06:	b29a      	uxth	r2, r3
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	0011      	movs	r1, r2
 800cd0c:	0018      	movs	r0, r3
 800cd0e:	f000 f905 	bl	800cf1c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cd12:	e0ed      	b.n	800cef0 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	225c      	movs	r2, #92	; 0x5c
 800cd18:	5a99      	ldrh	r1, [r3, r2]
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	225e      	movs	r2, #94	; 0x5e
 800cd1e:	5a9b      	ldrh	r3, [r3, r2]
 800cd20:	b29a      	uxth	r2, r3
 800cd22:	208e      	movs	r0, #142	; 0x8e
 800cd24:	183b      	adds	r3, r7, r0
 800cd26:	1a8a      	subs	r2, r1, r2
 800cd28:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	225e      	movs	r2, #94	; 0x5e
 800cd2e:	5a9b      	ldrh	r3, [r3, r2]
 800cd30:	b29b      	uxth	r3, r3
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d100      	bne.n	800cd38 <HAL_UART_IRQHandler+0x478>
 800cd36:	e0dd      	b.n	800cef4 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 800cd38:	183b      	adds	r3, r7, r0
 800cd3a:	881b      	ldrh	r3, [r3, #0]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d100      	bne.n	800cd42 <HAL_UART_IRQHandler+0x482>
 800cd40:	e0d8      	b.n	800cef4 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cd42:	f3ef 8310 	mrs	r3, PRIMASK
 800cd46:	60fb      	str	r3, [r7, #12]
  return(result);
 800cd48:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cd4a:	2488      	movs	r4, #136	; 0x88
 800cd4c:	193a      	adds	r2, r7, r4
 800cd4e:	6013      	str	r3, [r2, #0]
 800cd50:	2301      	movs	r3, #1
 800cd52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cd54:	693b      	ldr	r3, [r7, #16]
 800cd56:	f383 8810 	msr	PRIMASK, r3
}
 800cd5a:	46c0      	nop			; (mov r8, r8)
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	681a      	ldr	r2, [r3, #0]
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	4967      	ldr	r1, [pc, #412]	; (800cf04 <HAL_UART_IRQHandler+0x644>)
 800cd68:	400a      	ands	r2, r1
 800cd6a:	601a      	str	r2, [r3, #0]
 800cd6c:	193b      	adds	r3, r7, r4
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cd72:	697b      	ldr	r3, [r7, #20]
 800cd74:	f383 8810 	msr	PRIMASK, r3
}
 800cd78:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cd7a:	f3ef 8310 	mrs	r3, PRIMASK
 800cd7e:	61bb      	str	r3, [r7, #24]
  return(result);
 800cd80:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cd82:	2484      	movs	r4, #132	; 0x84
 800cd84:	193a      	adds	r2, r7, r4
 800cd86:	6013      	str	r3, [r2, #0]
 800cd88:	2301      	movs	r3, #1
 800cd8a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cd8c:	69fb      	ldr	r3, [r7, #28]
 800cd8e:	f383 8810 	msr	PRIMASK, r3
}
 800cd92:	46c0      	nop			; (mov r8, r8)
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	689a      	ldr	r2, [r3, #8]
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	495a      	ldr	r1, [pc, #360]	; (800cf08 <HAL_UART_IRQHandler+0x648>)
 800cda0:	400a      	ands	r2, r1
 800cda2:	609a      	str	r2, [r3, #8]
 800cda4:	193b      	adds	r3, r7, r4
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cdaa:	6a3b      	ldr	r3, [r7, #32]
 800cdac:	f383 8810 	msr	PRIMASK, r3
}
 800cdb0:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	228c      	movs	r2, #140	; 0x8c
 800cdb6:	2120      	movs	r1, #32
 800cdb8:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cdc6:	f3ef 8310 	mrs	r3, PRIMASK
 800cdca:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800cdcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cdce:	2480      	movs	r4, #128	; 0x80
 800cdd0:	193a      	adds	r2, r7, r4
 800cdd2:	6013      	str	r3, [r2, #0]
 800cdd4:	2301      	movs	r3, #1
 800cdd6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cdd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdda:	f383 8810 	msr	PRIMASK, r3
}
 800cdde:	46c0      	nop			; (mov r8, r8)
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	681a      	ldr	r2, [r3, #0]
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	2110      	movs	r1, #16
 800cdec:	438a      	bics	r2, r1
 800cdee:	601a      	str	r2, [r3, #0]
 800cdf0:	193b      	adds	r3, r7, r4
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cdf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdf8:	f383 8810 	msr	PRIMASK, r3
}
 800cdfc:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	2202      	movs	r2, #2
 800ce02:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ce04:	183b      	adds	r3, r7, r0
 800ce06:	881a      	ldrh	r2, [r3, #0]
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	0011      	movs	r1, r2
 800ce0c:	0018      	movs	r0, r3
 800ce0e:	f000 f885 	bl	800cf1c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ce12:	e06f      	b.n	800cef4 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ce14:	23a4      	movs	r3, #164	; 0xa4
 800ce16:	18fb      	adds	r3, r7, r3
 800ce18:	681a      	ldr	r2, [r3, #0]
 800ce1a:	2380      	movs	r3, #128	; 0x80
 800ce1c:	035b      	lsls	r3, r3, #13
 800ce1e:	4013      	ands	r3, r2
 800ce20:	d010      	beq.n	800ce44 <HAL_UART_IRQHandler+0x584>
 800ce22:	239c      	movs	r3, #156	; 0x9c
 800ce24:	18fb      	adds	r3, r7, r3
 800ce26:	681a      	ldr	r2, [r3, #0]
 800ce28:	2380      	movs	r3, #128	; 0x80
 800ce2a:	03db      	lsls	r3, r3, #15
 800ce2c:	4013      	ands	r3, r2
 800ce2e:	d009      	beq.n	800ce44 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	2280      	movs	r2, #128	; 0x80
 800ce36:	0352      	lsls	r2, r2, #13
 800ce38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	0018      	movs	r0, r3
 800ce3e:	f001 fa15 	bl	800e26c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ce42:	e05a      	b.n	800cefa <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ce44:	23a4      	movs	r3, #164	; 0xa4
 800ce46:	18fb      	adds	r3, r7, r3
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	2280      	movs	r2, #128	; 0x80
 800ce4c:	4013      	ands	r3, r2
 800ce4e:	d016      	beq.n	800ce7e <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ce50:	23a0      	movs	r3, #160	; 0xa0
 800ce52:	18fb      	adds	r3, r7, r3
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	2280      	movs	r2, #128	; 0x80
 800ce58:	4013      	ands	r3, r2
 800ce5a:	d106      	bne.n	800ce6a <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ce5c:	239c      	movs	r3, #156	; 0x9c
 800ce5e:	18fb      	adds	r3, r7, r3
 800ce60:	681a      	ldr	r2, [r3, #0]
 800ce62:	2380      	movs	r3, #128	; 0x80
 800ce64:	041b      	lsls	r3, r3, #16
 800ce66:	4013      	ands	r3, r2
 800ce68:	d009      	beq.n	800ce7e <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d042      	beq.n	800cef8 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ce76:	687a      	ldr	r2, [r7, #4]
 800ce78:	0010      	movs	r0, r2
 800ce7a:	4798      	blx	r3
    }
    return;
 800ce7c:	e03c      	b.n	800cef8 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ce7e:	23a4      	movs	r3, #164	; 0xa4
 800ce80:	18fb      	adds	r3, r7, r3
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	2240      	movs	r2, #64	; 0x40
 800ce86:	4013      	ands	r3, r2
 800ce88:	d00a      	beq.n	800cea0 <HAL_UART_IRQHandler+0x5e0>
 800ce8a:	23a0      	movs	r3, #160	; 0xa0
 800ce8c:	18fb      	adds	r3, r7, r3
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	2240      	movs	r2, #64	; 0x40
 800ce92:	4013      	ands	r3, r2
 800ce94:	d004      	beq.n	800cea0 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	0018      	movs	r0, r3
 800ce9a:	f000 fd5a 	bl	800d952 <UART_EndTransmit_IT>
    return;
 800ce9e:	e02c      	b.n	800cefa <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800cea0:	23a4      	movs	r3, #164	; 0xa4
 800cea2:	18fb      	adds	r3, r7, r3
 800cea4:	681a      	ldr	r2, [r3, #0]
 800cea6:	2380      	movs	r3, #128	; 0x80
 800cea8:	041b      	lsls	r3, r3, #16
 800ceaa:	4013      	ands	r3, r2
 800ceac:	d00b      	beq.n	800cec6 <HAL_UART_IRQHandler+0x606>
 800ceae:	23a0      	movs	r3, #160	; 0xa0
 800ceb0:	18fb      	adds	r3, r7, r3
 800ceb2:	681a      	ldr	r2, [r3, #0]
 800ceb4:	2380      	movs	r3, #128	; 0x80
 800ceb6:	05db      	lsls	r3, r3, #23
 800ceb8:	4013      	ands	r3, r2
 800ceba:	d004      	beq.n	800cec6 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	0018      	movs	r0, r3
 800cec0:	f001 f9e4 	bl	800e28c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cec4:	e019      	b.n	800cefa <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800cec6:	23a4      	movs	r3, #164	; 0xa4
 800cec8:	18fb      	adds	r3, r7, r3
 800ceca:	681a      	ldr	r2, [r3, #0]
 800cecc:	2380      	movs	r3, #128	; 0x80
 800cece:	045b      	lsls	r3, r3, #17
 800ced0:	4013      	ands	r3, r2
 800ced2:	d012      	beq.n	800cefa <HAL_UART_IRQHandler+0x63a>
 800ced4:	23a0      	movs	r3, #160	; 0xa0
 800ced6:	18fb      	adds	r3, r7, r3
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	da0d      	bge.n	800cefa <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	0018      	movs	r0, r3
 800cee2:	f001 f9cb 	bl	800e27c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cee6:	e008      	b.n	800cefa <HAL_UART_IRQHandler+0x63a>
      return;
 800cee8:	46c0      	nop			; (mov r8, r8)
 800ceea:	e006      	b.n	800cefa <HAL_UART_IRQHandler+0x63a>
    return;
 800ceec:	46c0      	nop			; (mov r8, r8)
 800ceee:	e004      	b.n	800cefa <HAL_UART_IRQHandler+0x63a>
      return;
 800cef0:	46c0      	nop			; (mov r8, r8)
 800cef2:	e002      	b.n	800cefa <HAL_UART_IRQHandler+0x63a>
      return;
 800cef4:	46c0      	nop			; (mov r8, r8)
 800cef6:	e000      	b.n	800cefa <HAL_UART_IRQHandler+0x63a>
    return;
 800cef8:	46c0      	nop			; (mov r8, r8)
  }
}
 800cefa:	46bd      	mov	sp, r7
 800cefc:	b02a      	add	sp, #168	; 0xa8
 800cefe:	bdb0      	pop	{r4, r5, r7, pc}
 800cf00:	fffffeff 	.word	0xfffffeff
 800cf04:	fffffedf 	.word	0xfffffedf
 800cf08:	effffffe 	.word	0xeffffffe

0800cf0c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b082      	sub	sp, #8
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800cf14:	46c0      	nop			; (mov r8, r8)
 800cf16:	46bd      	mov	sp, r7
 800cf18:	b002      	add	sp, #8
 800cf1a:	bd80      	pop	{r7, pc}

0800cf1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b082      	sub	sp, #8
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
 800cf24:	000a      	movs	r2, r1
 800cf26:	1cbb      	adds	r3, r7, #2
 800cf28:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cf2a:	46c0      	nop			; (mov r8, r8)
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	b002      	add	sp, #8
 800cf30:	bd80      	pop	{r7, pc}
	...

0800cf34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b088      	sub	sp, #32
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cf3c:	231a      	movs	r3, #26
 800cf3e:	18fb      	adds	r3, r7, r3
 800cf40:	2200      	movs	r2, #0
 800cf42:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	689a      	ldr	r2, [r3, #8]
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	691b      	ldr	r3, [r3, #16]
 800cf4c:	431a      	orrs	r2, r3
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	695b      	ldr	r3, [r3, #20]
 800cf52:	431a      	orrs	r2, r3
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	69db      	ldr	r3, [r3, #28]
 800cf58:	4313      	orrs	r3, r2
 800cf5a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	4abc      	ldr	r2, [pc, #752]	; (800d254 <UART_SetConfig+0x320>)
 800cf64:	4013      	ands	r3, r2
 800cf66:	0019      	movs	r1, r3
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	69fa      	ldr	r2, [r7, #28]
 800cf6e:	430a      	orrs	r2, r1
 800cf70:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	685b      	ldr	r3, [r3, #4]
 800cf78:	4ab7      	ldr	r2, [pc, #732]	; (800d258 <UART_SetConfig+0x324>)
 800cf7a:	4013      	ands	r3, r2
 800cf7c:	0019      	movs	r1, r3
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	68da      	ldr	r2, [r3, #12]
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	430a      	orrs	r2, r1
 800cf88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	699b      	ldr	r3, [r3, #24]
 800cf8e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	6a1b      	ldr	r3, [r3, #32]
 800cf94:	69fa      	ldr	r2, [r7, #28]
 800cf96:	4313      	orrs	r3, r2
 800cf98:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	689b      	ldr	r3, [r3, #8]
 800cfa0:	4aae      	ldr	r2, [pc, #696]	; (800d25c <UART_SetConfig+0x328>)
 800cfa2:	4013      	ands	r3, r2
 800cfa4:	0019      	movs	r1, r3
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	69fa      	ldr	r2, [r7, #28]
 800cfac:	430a      	orrs	r2, r1
 800cfae:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfb6:	220f      	movs	r2, #15
 800cfb8:	4393      	bics	r3, r2
 800cfba:	0019      	movs	r1, r3
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	430a      	orrs	r2, r1
 800cfc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	4aa4      	ldr	r2, [pc, #656]	; (800d260 <UART_SetConfig+0x32c>)
 800cfce:	4293      	cmp	r3, r2
 800cfd0:	d127      	bne.n	800d022 <UART_SetConfig+0xee>
 800cfd2:	4ba4      	ldr	r3, [pc, #656]	; (800d264 <UART_SetConfig+0x330>)
 800cfd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cfd6:	2203      	movs	r2, #3
 800cfd8:	4013      	ands	r3, r2
 800cfda:	2b03      	cmp	r3, #3
 800cfdc:	d017      	beq.n	800d00e <UART_SetConfig+0xda>
 800cfde:	d81b      	bhi.n	800d018 <UART_SetConfig+0xe4>
 800cfe0:	2b02      	cmp	r3, #2
 800cfe2:	d00a      	beq.n	800cffa <UART_SetConfig+0xc6>
 800cfe4:	d818      	bhi.n	800d018 <UART_SetConfig+0xe4>
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d002      	beq.n	800cff0 <UART_SetConfig+0xbc>
 800cfea:	2b01      	cmp	r3, #1
 800cfec:	d00a      	beq.n	800d004 <UART_SetConfig+0xd0>
 800cfee:	e013      	b.n	800d018 <UART_SetConfig+0xe4>
 800cff0:	231b      	movs	r3, #27
 800cff2:	18fb      	adds	r3, r7, r3
 800cff4:	2200      	movs	r2, #0
 800cff6:	701a      	strb	r2, [r3, #0]
 800cff8:	e058      	b.n	800d0ac <UART_SetConfig+0x178>
 800cffa:	231b      	movs	r3, #27
 800cffc:	18fb      	adds	r3, r7, r3
 800cffe:	2202      	movs	r2, #2
 800d000:	701a      	strb	r2, [r3, #0]
 800d002:	e053      	b.n	800d0ac <UART_SetConfig+0x178>
 800d004:	231b      	movs	r3, #27
 800d006:	18fb      	adds	r3, r7, r3
 800d008:	2204      	movs	r2, #4
 800d00a:	701a      	strb	r2, [r3, #0]
 800d00c:	e04e      	b.n	800d0ac <UART_SetConfig+0x178>
 800d00e:	231b      	movs	r3, #27
 800d010:	18fb      	adds	r3, r7, r3
 800d012:	2208      	movs	r2, #8
 800d014:	701a      	strb	r2, [r3, #0]
 800d016:	e049      	b.n	800d0ac <UART_SetConfig+0x178>
 800d018:	231b      	movs	r3, #27
 800d01a:	18fb      	adds	r3, r7, r3
 800d01c:	2210      	movs	r2, #16
 800d01e:	701a      	strb	r2, [r3, #0]
 800d020:	e044      	b.n	800d0ac <UART_SetConfig+0x178>
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	4a90      	ldr	r2, [pc, #576]	; (800d268 <UART_SetConfig+0x334>)
 800d028:	4293      	cmp	r3, r2
 800d02a:	d127      	bne.n	800d07c <UART_SetConfig+0x148>
 800d02c:	4b8d      	ldr	r3, [pc, #564]	; (800d264 <UART_SetConfig+0x330>)
 800d02e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d030:	220c      	movs	r2, #12
 800d032:	4013      	ands	r3, r2
 800d034:	2b0c      	cmp	r3, #12
 800d036:	d017      	beq.n	800d068 <UART_SetConfig+0x134>
 800d038:	d81b      	bhi.n	800d072 <UART_SetConfig+0x13e>
 800d03a:	2b08      	cmp	r3, #8
 800d03c:	d00a      	beq.n	800d054 <UART_SetConfig+0x120>
 800d03e:	d818      	bhi.n	800d072 <UART_SetConfig+0x13e>
 800d040:	2b00      	cmp	r3, #0
 800d042:	d002      	beq.n	800d04a <UART_SetConfig+0x116>
 800d044:	2b04      	cmp	r3, #4
 800d046:	d00a      	beq.n	800d05e <UART_SetConfig+0x12a>
 800d048:	e013      	b.n	800d072 <UART_SetConfig+0x13e>
 800d04a:	231b      	movs	r3, #27
 800d04c:	18fb      	adds	r3, r7, r3
 800d04e:	2200      	movs	r2, #0
 800d050:	701a      	strb	r2, [r3, #0]
 800d052:	e02b      	b.n	800d0ac <UART_SetConfig+0x178>
 800d054:	231b      	movs	r3, #27
 800d056:	18fb      	adds	r3, r7, r3
 800d058:	2202      	movs	r2, #2
 800d05a:	701a      	strb	r2, [r3, #0]
 800d05c:	e026      	b.n	800d0ac <UART_SetConfig+0x178>
 800d05e:	231b      	movs	r3, #27
 800d060:	18fb      	adds	r3, r7, r3
 800d062:	2204      	movs	r2, #4
 800d064:	701a      	strb	r2, [r3, #0]
 800d066:	e021      	b.n	800d0ac <UART_SetConfig+0x178>
 800d068:	231b      	movs	r3, #27
 800d06a:	18fb      	adds	r3, r7, r3
 800d06c:	2208      	movs	r2, #8
 800d06e:	701a      	strb	r2, [r3, #0]
 800d070:	e01c      	b.n	800d0ac <UART_SetConfig+0x178>
 800d072:	231b      	movs	r3, #27
 800d074:	18fb      	adds	r3, r7, r3
 800d076:	2210      	movs	r2, #16
 800d078:	701a      	strb	r2, [r3, #0]
 800d07a:	e017      	b.n	800d0ac <UART_SetConfig+0x178>
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	4a7a      	ldr	r2, [pc, #488]	; (800d26c <UART_SetConfig+0x338>)
 800d082:	4293      	cmp	r3, r2
 800d084:	d104      	bne.n	800d090 <UART_SetConfig+0x15c>
 800d086:	231b      	movs	r3, #27
 800d088:	18fb      	adds	r3, r7, r3
 800d08a:	2200      	movs	r2, #0
 800d08c:	701a      	strb	r2, [r3, #0]
 800d08e:	e00d      	b.n	800d0ac <UART_SetConfig+0x178>
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	4a76      	ldr	r2, [pc, #472]	; (800d270 <UART_SetConfig+0x33c>)
 800d096:	4293      	cmp	r3, r2
 800d098:	d104      	bne.n	800d0a4 <UART_SetConfig+0x170>
 800d09a:	231b      	movs	r3, #27
 800d09c:	18fb      	adds	r3, r7, r3
 800d09e:	2200      	movs	r2, #0
 800d0a0:	701a      	strb	r2, [r3, #0]
 800d0a2:	e003      	b.n	800d0ac <UART_SetConfig+0x178>
 800d0a4:	231b      	movs	r3, #27
 800d0a6:	18fb      	adds	r3, r7, r3
 800d0a8:	2210      	movs	r2, #16
 800d0aa:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	69da      	ldr	r2, [r3, #28]
 800d0b0:	2380      	movs	r3, #128	; 0x80
 800d0b2:	021b      	lsls	r3, r3, #8
 800d0b4:	429a      	cmp	r2, r3
 800d0b6:	d000      	beq.n	800d0ba <UART_SetConfig+0x186>
 800d0b8:	e065      	b.n	800d186 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 800d0ba:	231b      	movs	r3, #27
 800d0bc:	18fb      	adds	r3, r7, r3
 800d0be:	781b      	ldrb	r3, [r3, #0]
 800d0c0:	2b08      	cmp	r3, #8
 800d0c2:	d015      	beq.n	800d0f0 <UART_SetConfig+0x1bc>
 800d0c4:	dc18      	bgt.n	800d0f8 <UART_SetConfig+0x1c4>
 800d0c6:	2b04      	cmp	r3, #4
 800d0c8:	d00d      	beq.n	800d0e6 <UART_SetConfig+0x1b2>
 800d0ca:	dc15      	bgt.n	800d0f8 <UART_SetConfig+0x1c4>
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d002      	beq.n	800d0d6 <UART_SetConfig+0x1a2>
 800d0d0:	2b02      	cmp	r3, #2
 800d0d2:	d005      	beq.n	800d0e0 <UART_SetConfig+0x1ac>
 800d0d4:	e010      	b.n	800d0f8 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d0d6:	f7fd f931 	bl	800a33c <HAL_RCC_GetPCLK1Freq>
 800d0da:	0003      	movs	r3, r0
 800d0dc:	617b      	str	r3, [r7, #20]
        break;
 800d0de:	e012      	b.n	800d106 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d0e0:	4b64      	ldr	r3, [pc, #400]	; (800d274 <UART_SetConfig+0x340>)
 800d0e2:	617b      	str	r3, [r7, #20]
        break;
 800d0e4:	e00f      	b.n	800d106 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d0e6:	f7fd f89d 	bl	800a224 <HAL_RCC_GetSysClockFreq>
 800d0ea:	0003      	movs	r3, r0
 800d0ec:	617b      	str	r3, [r7, #20]
        break;
 800d0ee:	e00a      	b.n	800d106 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d0f0:	2380      	movs	r3, #128	; 0x80
 800d0f2:	021b      	lsls	r3, r3, #8
 800d0f4:	617b      	str	r3, [r7, #20]
        break;
 800d0f6:	e006      	b.n	800d106 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800d0fc:	231a      	movs	r3, #26
 800d0fe:	18fb      	adds	r3, r7, r3
 800d100:	2201      	movs	r2, #1
 800d102:	701a      	strb	r2, [r3, #0]
        break;
 800d104:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d106:	697b      	ldr	r3, [r7, #20]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d100      	bne.n	800d10e <UART_SetConfig+0x1da>
 800d10c:	e08d      	b.n	800d22a <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d112:	4b59      	ldr	r3, [pc, #356]	; (800d278 <UART_SetConfig+0x344>)
 800d114:	0052      	lsls	r2, r2, #1
 800d116:	5ad3      	ldrh	r3, [r2, r3]
 800d118:	0019      	movs	r1, r3
 800d11a:	6978      	ldr	r0, [r7, #20]
 800d11c:	f7f3 f816 	bl	800014c <__udivsi3>
 800d120:	0003      	movs	r3, r0
 800d122:	005a      	lsls	r2, r3, #1
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	685b      	ldr	r3, [r3, #4]
 800d128:	085b      	lsrs	r3, r3, #1
 800d12a:	18d2      	adds	r2, r2, r3
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	685b      	ldr	r3, [r3, #4]
 800d130:	0019      	movs	r1, r3
 800d132:	0010      	movs	r0, r2
 800d134:	f7f3 f80a 	bl	800014c <__udivsi3>
 800d138:	0003      	movs	r3, r0
 800d13a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d13c:	693b      	ldr	r3, [r7, #16]
 800d13e:	2b0f      	cmp	r3, #15
 800d140:	d91c      	bls.n	800d17c <UART_SetConfig+0x248>
 800d142:	693a      	ldr	r2, [r7, #16]
 800d144:	2380      	movs	r3, #128	; 0x80
 800d146:	025b      	lsls	r3, r3, #9
 800d148:	429a      	cmp	r2, r3
 800d14a:	d217      	bcs.n	800d17c <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d14c:	693b      	ldr	r3, [r7, #16]
 800d14e:	b29a      	uxth	r2, r3
 800d150:	200e      	movs	r0, #14
 800d152:	183b      	adds	r3, r7, r0
 800d154:	210f      	movs	r1, #15
 800d156:	438a      	bics	r2, r1
 800d158:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d15a:	693b      	ldr	r3, [r7, #16]
 800d15c:	085b      	lsrs	r3, r3, #1
 800d15e:	b29b      	uxth	r3, r3
 800d160:	2207      	movs	r2, #7
 800d162:	4013      	ands	r3, r2
 800d164:	b299      	uxth	r1, r3
 800d166:	183b      	adds	r3, r7, r0
 800d168:	183a      	adds	r2, r7, r0
 800d16a:	8812      	ldrh	r2, [r2, #0]
 800d16c:	430a      	orrs	r2, r1
 800d16e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	183a      	adds	r2, r7, r0
 800d176:	8812      	ldrh	r2, [r2, #0]
 800d178:	60da      	str	r2, [r3, #12]
 800d17a:	e056      	b.n	800d22a <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800d17c:	231a      	movs	r3, #26
 800d17e:	18fb      	adds	r3, r7, r3
 800d180:	2201      	movs	r2, #1
 800d182:	701a      	strb	r2, [r3, #0]
 800d184:	e051      	b.n	800d22a <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d186:	231b      	movs	r3, #27
 800d188:	18fb      	adds	r3, r7, r3
 800d18a:	781b      	ldrb	r3, [r3, #0]
 800d18c:	2b08      	cmp	r3, #8
 800d18e:	d015      	beq.n	800d1bc <UART_SetConfig+0x288>
 800d190:	dc18      	bgt.n	800d1c4 <UART_SetConfig+0x290>
 800d192:	2b04      	cmp	r3, #4
 800d194:	d00d      	beq.n	800d1b2 <UART_SetConfig+0x27e>
 800d196:	dc15      	bgt.n	800d1c4 <UART_SetConfig+0x290>
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d002      	beq.n	800d1a2 <UART_SetConfig+0x26e>
 800d19c:	2b02      	cmp	r3, #2
 800d19e:	d005      	beq.n	800d1ac <UART_SetConfig+0x278>
 800d1a0:	e010      	b.n	800d1c4 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d1a2:	f7fd f8cb 	bl	800a33c <HAL_RCC_GetPCLK1Freq>
 800d1a6:	0003      	movs	r3, r0
 800d1a8:	617b      	str	r3, [r7, #20]
        break;
 800d1aa:	e012      	b.n	800d1d2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d1ac:	4b31      	ldr	r3, [pc, #196]	; (800d274 <UART_SetConfig+0x340>)
 800d1ae:	617b      	str	r3, [r7, #20]
        break;
 800d1b0:	e00f      	b.n	800d1d2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d1b2:	f7fd f837 	bl	800a224 <HAL_RCC_GetSysClockFreq>
 800d1b6:	0003      	movs	r3, r0
 800d1b8:	617b      	str	r3, [r7, #20]
        break;
 800d1ba:	e00a      	b.n	800d1d2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d1bc:	2380      	movs	r3, #128	; 0x80
 800d1be:	021b      	lsls	r3, r3, #8
 800d1c0:	617b      	str	r3, [r7, #20]
        break;
 800d1c2:	e006      	b.n	800d1d2 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800d1c8:	231a      	movs	r3, #26
 800d1ca:	18fb      	adds	r3, r7, r3
 800d1cc:	2201      	movs	r2, #1
 800d1ce:	701a      	strb	r2, [r3, #0]
        break;
 800d1d0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800d1d2:	697b      	ldr	r3, [r7, #20]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d028      	beq.n	800d22a <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d1dc:	4b26      	ldr	r3, [pc, #152]	; (800d278 <UART_SetConfig+0x344>)
 800d1de:	0052      	lsls	r2, r2, #1
 800d1e0:	5ad3      	ldrh	r3, [r2, r3]
 800d1e2:	0019      	movs	r1, r3
 800d1e4:	6978      	ldr	r0, [r7, #20]
 800d1e6:	f7f2 ffb1 	bl	800014c <__udivsi3>
 800d1ea:	0003      	movs	r3, r0
 800d1ec:	001a      	movs	r2, r3
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	685b      	ldr	r3, [r3, #4]
 800d1f2:	085b      	lsrs	r3, r3, #1
 800d1f4:	18d2      	adds	r2, r2, r3
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	685b      	ldr	r3, [r3, #4]
 800d1fa:	0019      	movs	r1, r3
 800d1fc:	0010      	movs	r0, r2
 800d1fe:	f7f2 ffa5 	bl	800014c <__udivsi3>
 800d202:	0003      	movs	r3, r0
 800d204:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d206:	693b      	ldr	r3, [r7, #16]
 800d208:	2b0f      	cmp	r3, #15
 800d20a:	d90a      	bls.n	800d222 <UART_SetConfig+0x2ee>
 800d20c:	693a      	ldr	r2, [r7, #16]
 800d20e:	2380      	movs	r3, #128	; 0x80
 800d210:	025b      	lsls	r3, r3, #9
 800d212:	429a      	cmp	r2, r3
 800d214:	d205      	bcs.n	800d222 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d216:	693b      	ldr	r3, [r7, #16]
 800d218:	b29a      	uxth	r2, r3
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	60da      	str	r2, [r3, #12]
 800d220:	e003      	b.n	800d22a <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800d222:	231a      	movs	r3, #26
 800d224:	18fb      	adds	r3, r7, r3
 800d226:	2201      	movs	r2, #1
 800d228:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	226a      	movs	r2, #106	; 0x6a
 800d22e:	2101      	movs	r1, #1
 800d230:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	2268      	movs	r2, #104	; 0x68
 800d236:	2101      	movs	r1, #1
 800d238:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	2200      	movs	r2, #0
 800d23e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	2200      	movs	r2, #0
 800d244:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800d246:	231a      	movs	r3, #26
 800d248:	18fb      	adds	r3, r7, r3
 800d24a:	781b      	ldrb	r3, [r3, #0]
}
 800d24c:	0018      	movs	r0, r3
 800d24e:	46bd      	mov	sp, r7
 800d250:	b008      	add	sp, #32
 800d252:	bd80      	pop	{r7, pc}
 800d254:	cfff69f3 	.word	0xcfff69f3
 800d258:	ffffcfff 	.word	0xffffcfff
 800d25c:	11fff4ff 	.word	0x11fff4ff
 800d260:	40013800 	.word	0x40013800
 800d264:	40021000 	.word	0x40021000
 800d268:	40004400 	.word	0x40004400
 800d26c:	40004800 	.word	0x40004800
 800d270:	40004c00 	.word	0x40004c00
 800d274:	00f42400 	.word	0x00f42400
 800d278:	08013020 	.word	0x08013020

0800d27c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b082      	sub	sp, #8
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d288:	2201      	movs	r2, #1
 800d28a:	4013      	ands	r3, r2
 800d28c:	d00b      	beq.n	800d2a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	685b      	ldr	r3, [r3, #4]
 800d294:	4a4a      	ldr	r2, [pc, #296]	; (800d3c0 <UART_AdvFeatureConfig+0x144>)
 800d296:	4013      	ands	r3, r2
 800d298:	0019      	movs	r1, r3
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	430a      	orrs	r2, r1
 800d2a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2aa:	2202      	movs	r2, #2
 800d2ac:	4013      	ands	r3, r2
 800d2ae:	d00b      	beq.n	800d2c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	685b      	ldr	r3, [r3, #4]
 800d2b6:	4a43      	ldr	r2, [pc, #268]	; (800d3c4 <UART_AdvFeatureConfig+0x148>)
 800d2b8:	4013      	ands	r3, r2
 800d2ba:	0019      	movs	r1, r3
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	430a      	orrs	r2, r1
 800d2c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2cc:	2204      	movs	r2, #4
 800d2ce:	4013      	ands	r3, r2
 800d2d0:	d00b      	beq.n	800d2ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	685b      	ldr	r3, [r3, #4]
 800d2d8:	4a3b      	ldr	r2, [pc, #236]	; (800d3c8 <UART_AdvFeatureConfig+0x14c>)
 800d2da:	4013      	ands	r3, r2
 800d2dc:	0019      	movs	r1, r3
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	430a      	orrs	r2, r1
 800d2e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2ee:	2208      	movs	r2, #8
 800d2f0:	4013      	ands	r3, r2
 800d2f2:	d00b      	beq.n	800d30c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	685b      	ldr	r3, [r3, #4]
 800d2fa:	4a34      	ldr	r2, [pc, #208]	; (800d3cc <UART_AdvFeatureConfig+0x150>)
 800d2fc:	4013      	ands	r3, r2
 800d2fe:	0019      	movs	r1, r3
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	430a      	orrs	r2, r1
 800d30a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d310:	2210      	movs	r2, #16
 800d312:	4013      	ands	r3, r2
 800d314:	d00b      	beq.n	800d32e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	689b      	ldr	r3, [r3, #8]
 800d31c:	4a2c      	ldr	r2, [pc, #176]	; (800d3d0 <UART_AdvFeatureConfig+0x154>)
 800d31e:	4013      	ands	r3, r2
 800d320:	0019      	movs	r1, r3
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	430a      	orrs	r2, r1
 800d32c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d332:	2220      	movs	r2, #32
 800d334:	4013      	ands	r3, r2
 800d336:	d00b      	beq.n	800d350 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	689b      	ldr	r3, [r3, #8]
 800d33e:	4a25      	ldr	r2, [pc, #148]	; (800d3d4 <UART_AdvFeatureConfig+0x158>)
 800d340:	4013      	ands	r3, r2
 800d342:	0019      	movs	r1, r3
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	430a      	orrs	r2, r1
 800d34e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d354:	2240      	movs	r2, #64	; 0x40
 800d356:	4013      	ands	r3, r2
 800d358:	d01d      	beq.n	800d396 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	685b      	ldr	r3, [r3, #4]
 800d360:	4a1d      	ldr	r2, [pc, #116]	; (800d3d8 <UART_AdvFeatureConfig+0x15c>)
 800d362:	4013      	ands	r3, r2
 800d364:	0019      	movs	r1, r3
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	430a      	orrs	r2, r1
 800d370:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d376:	2380      	movs	r3, #128	; 0x80
 800d378:	035b      	lsls	r3, r3, #13
 800d37a:	429a      	cmp	r2, r3
 800d37c:	d10b      	bne.n	800d396 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	685b      	ldr	r3, [r3, #4]
 800d384:	4a15      	ldr	r2, [pc, #84]	; (800d3dc <UART_AdvFeatureConfig+0x160>)
 800d386:	4013      	ands	r3, r2
 800d388:	0019      	movs	r1, r3
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	430a      	orrs	r2, r1
 800d394:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d39a:	2280      	movs	r2, #128	; 0x80
 800d39c:	4013      	ands	r3, r2
 800d39e:	d00b      	beq.n	800d3b8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	685b      	ldr	r3, [r3, #4]
 800d3a6:	4a0e      	ldr	r2, [pc, #56]	; (800d3e0 <UART_AdvFeatureConfig+0x164>)
 800d3a8:	4013      	ands	r3, r2
 800d3aa:	0019      	movs	r1, r3
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	430a      	orrs	r2, r1
 800d3b6:	605a      	str	r2, [r3, #4]
  }
}
 800d3b8:	46c0      	nop			; (mov r8, r8)
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	b002      	add	sp, #8
 800d3be:	bd80      	pop	{r7, pc}
 800d3c0:	fffdffff 	.word	0xfffdffff
 800d3c4:	fffeffff 	.word	0xfffeffff
 800d3c8:	fffbffff 	.word	0xfffbffff
 800d3cc:	ffff7fff 	.word	0xffff7fff
 800d3d0:	ffffefff 	.word	0xffffefff
 800d3d4:	ffffdfff 	.word	0xffffdfff
 800d3d8:	ffefffff 	.word	0xffefffff
 800d3dc:	ff9fffff 	.word	0xff9fffff
 800d3e0:	fff7ffff 	.word	0xfff7ffff

0800d3e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b086      	sub	sp, #24
 800d3e8:	af02      	add	r7, sp, #8
 800d3ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	2290      	movs	r2, #144	; 0x90
 800d3f0:	2100      	movs	r1, #0
 800d3f2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d3f4:	f7fb fcec 	bl	8008dd0 <HAL_GetTick>
 800d3f8:	0003      	movs	r3, r0
 800d3fa:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	2208      	movs	r2, #8
 800d404:	4013      	ands	r3, r2
 800d406:	2b08      	cmp	r3, #8
 800d408:	d10c      	bne.n	800d424 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	2280      	movs	r2, #128	; 0x80
 800d40e:	0391      	lsls	r1, r2, #14
 800d410:	6878      	ldr	r0, [r7, #4]
 800d412:	4a1a      	ldr	r2, [pc, #104]	; (800d47c <UART_CheckIdleState+0x98>)
 800d414:	9200      	str	r2, [sp, #0]
 800d416:	2200      	movs	r2, #0
 800d418:	f000 f832 	bl	800d480 <UART_WaitOnFlagUntilTimeout>
 800d41c:	1e03      	subs	r3, r0, #0
 800d41e:	d001      	beq.n	800d424 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d420:	2303      	movs	r3, #3
 800d422:	e026      	b.n	800d472 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	2204      	movs	r2, #4
 800d42c:	4013      	ands	r3, r2
 800d42e:	2b04      	cmp	r3, #4
 800d430:	d10c      	bne.n	800d44c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	2280      	movs	r2, #128	; 0x80
 800d436:	03d1      	lsls	r1, r2, #15
 800d438:	6878      	ldr	r0, [r7, #4]
 800d43a:	4a10      	ldr	r2, [pc, #64]	; (800d47c <UART_CheckIdleState+0x98>)
 800d43c:	9200      	str	r2, [sp, #0]
 800d43e:	2200      	movs	r2, #0
 800d440:	f000 f81e 	bl	800d480 <UART_WaitOnFlagUntilTimeout>
 800d444:	1e03      	subs	r3, r0, #0
 800d446:	d001      	beq.n	800d44c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d448:	2303      	movs	r3, #3
 800d44a:	e012      	b.n	800d472 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2288      	movs	r2, #136	; 0x88
 800d450:	2120      	movs	r1, #32
 800d452:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	228c      	movs	r2, #140	; 0x8c
 800d458:	2120      	movs	r1, #32
 800d45a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	2200      	movs	r2, #0
 800d460:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	2200      	movs	r2, #0
 800d466:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	2284      	movs	r2, #132	; 0x84
 800d46c:	2100      	movs	r1, #0
 800d46e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d470:	2300      	movs	r3, #0
}
 800d472:	0018      	movs	r0, r3
 800d474:	46bd      	mov	sp, r7
 800d476:	b004      	add	sp, #16
 800d478:	bd80      	pop	{r7, pc}
 800d47a:	46c0      	nop			; (mov r8, r8)
 800d47c:	01ffffff 	.word	0x01ffffff

0800d480 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b094      	sub	sp, #80	; 0x50
 800d484:	af00      	add	r7, sp, #0
 800d486:	60f8      	str	r0, [r7, #12]
 800d488:	60b9      	str	r1, [r7, #8]
 800d48a:	603b      	str	r3, [r7, #0]
 800d48c:	1dfb      	adds	r3, r7, #7
 800d48e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d490:	e0a7      	b.n	800d5e2 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d492:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d494:	3301      	adds	r3, #1
 800d496:	d100      	bne.n	800d49a <UART_WaitOnFlagUntilTimeout+0x1a>
 800d498:	e0a3      	b.n	800d5e2 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d49a:	f7fb fc99 	bl	8008dd0 <HAL_GetTick>
 800d49e:	0002      	movs	r2, r0
 800d4a0:	683b      	ldr	r3, [r7, #0]
 800d4a2:	1ad3      	subs	r3, r2, r3
 800d4a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d4a6:	429a      	cmp	r2, r3
 800d4a8:	d302      	bcc.n	800d4b0 <UART_WaitOnFlagUntilTimeout+0x30>
 800d4aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d13f      	bne.n	800d530 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d4b0:	f3ef 8310 	mrs	r3, PRIMASK
 800d4b4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800d4b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d4b8:	647b      	str	r3, [r7, #68]	; 0x44
 800d4ba:	2301      	movs	r3, #1
 800d4bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d4be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4c0:	f383 8810 	msr	PRIMASK, r3
}
 800d4c4:	46c0      	nop			; (mov r8, r8)
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	681a      	ldr	r2, [r3, #0]
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	494e      	ldr	r1, [pc, #312]	; (800d60c <UART_WaitOnFlagUntilTimeout+0x18c>)
 800d4d2:	400a      	ands	r2, r1
 800d4d4:	601a      	str	r2, [r3, #0]
 800d4d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d4d8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4dc:	f383 8810 	msr	PRIMASK, r3
}
 800d4e0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d4e2:	f3ef 8310 	mrs	r3, PRIMASK
 800d4e6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800d4e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d4ea:	643b      	str	r3, [r7, #64]	; 0x40
 800d4ec:	2301      	movs	r3, #1
 800d4ee:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d4f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4f2:	f383 8810 	msr	PRIMASK, r3
}
 800d4f6:	46c0      	nop			; (mov r8, r8)
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	689a      	ldr	r2, [r3, #8]
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	2101      	movs	r1, #1
 800d504:	438a      	bics	r2, r1
 800d506:	609a      	str	r2, [r3, #8]
 800d508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d50a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d50c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d50e:	f383 8810 	msr	PRIMASK, r3
}
 800d512:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	2288      	movs	r2, #136	; 0x88
 800d518:	2120      	movs	r1, #32
 800d51a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	228c      	movs	r2, #140	; 0x8c
 800d520:	2120      	movs	r1, #32
 800d522:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	2284      	movs	r2, #132	; 0x84
 800d528:	2100      	movs	r1, #0
 800d52a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800d52c:	2303      	movs	r3, #3
 800d52e:	e069      	b.n	800d604 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	2204      	movs	r2, #4
 800d538:	4013      	ands	r3, r2
 800d53a:	d052      	beq.n	800d5e2 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	69da      	ldr	r2, [r3, #28]
 800d542:	2380      	movs	r3, #128	; 0x80
 800d544:	011b      	lsls	r3, r3, #4
 800d546:	401a      	ands	r2, r3
 800d548:	2380      	movs	r3, #128	; 0x80
 800d54a:	011b      	lsls	r3, r3, #4
 800d54c:	429a      	cmp	r2, r3
 800d54e:	d148      	bne.n	800d5e2 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	2280      	movs	r2, #128	; 0x80
 800d556:	0112      	lsls	r2, r2, #4
 800d558:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d55a:	f3ef 8310 	mrs	r3, PRIMASK
 800d55e:	613b      	str	r3, [r7, #16]
  return(result);
 800d560:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d562:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d564:	2301      	movs	r3, #1
 800d566:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d568:	697b      	ldr	r3, [r7, #20]
 800d56a:	f383 8810 	msr	PRIMASK, r3
}
 800d56e:	46c0      	nop			; (mov r8, r8)
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	681a      	ldr	r2, [r3, #0]
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	4924      	ldr	r1, [pc, #144]	; (800d60c <UART_WaitOnFlagUntilTimeout+0x18c>)
 800d57c:	400a      	ands	r2, r1
 800d57e:	601a      	str	r2, [r3, #0]
 800d580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d582:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d584:	69bb      	ldr	r3, [r7, #24]
 800d586:	f383 8810 	msr	PRIMASK, r3
}
 800d58a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d58c:	f3ef 8310 	mrs	r3, PRIMASK
 800d590:	61fb      	str	r3, [r7, #28]
  return(result);
 800d592:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d594:	64bb      	str	r3, [r7, #72]	; 0x48
 800d596:	2301      	movs	r3, #1
 800d598:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d59a:	6a3b      	ldr	r3, [r7, #32]
 800d59c:	f383 8810 	msr	PRIMASK, r3
}
 800d5a0:	46c0      	nop			; (mov r8, r8)
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	689a      	ldr	r2, [r3, #8]
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	2101      	movs	r1, #1
 800d5ae:	438a      	bics	r2, r1
 800d5b0:	609a      	str	r2, [r3, #8]
 800d5b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d5b4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d5b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5b8:	f383 8810 	msr	PRIMASK, r3
}
 800d5bc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	2288      	movs	r2, #136	; 0x88
 800d5c2:	2120      	movs	r1, #32
 800d5c4:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	228c      	movs	r2, #140	; 0x8c
 800d5ca:	2120      	movs	r1, #32
 800d5cc:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	2290      	movs	r2, #144	; 0x90
 800d5d2:	2120      	movs	r1, #32
 800d5d4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	2284      	movs	r2, #132	; 0x84
 800d5da:	2100      	movs	r1, #0
 800d5dc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800d5de:	2303      	movs	r3, #3
 800d5e0:	e010      	b.n	800d604 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	69db      	ldr	r3, [r3, #28]
 800d5e8:	68ba      	ldr	r2, [r7, #8]
 800d5ea:	4013      	ands	r3, r2
 800d5ec:	68ba      	ldr	r2, [r7, #8]
 800d5ee:	1ad3      	subs	r3, r2, r3
 800d5f0:	425a      	negs	r2, r3
 800d5f2:	4153      	adcs	r3, r2
 800d5f4:	b2db      	uxtb	r3, r3
 800d5f6:	001a      	movs	r2, r3
 800d5f8:	1dfb      	adds	r3, r7, #7
 800d5fa:	781b      	ldrb	r3, [r3, #0]
 800d5fc:	429a      	cmp	r2, r3
 800d5fe:	d100      	bne.n	800d602 <UART_WaitOnFlagUntilTimeout+0x182>
 800d600:	e747      	b.n	800d492 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d602:	2300      	movs	r3, #0
}
 800d604:	0018      	movs	r0, r3
 800d606:	46bd      	mov	sp, r7
 800d608:	b014      	add	sp, #80	; 0x50
 800d60a:	bd80      	pop	{r7, pc}
 800d60c:	fffffe5f 	.word	0xfffffe5f

0800d610 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b098      	sub	sp, #96	; 0x60
 800d614:	af00      	add	r7, sp, #0
 800d616:	60f8      	str	r0, [r7, #12]
 800d618:	60b9      	str	r1, [r7, #8]
 800d61a:	1dbb      	adds	r3, r7, #6
 800d61c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	68ba      	ldr	r2, [r7, #8]
 800d622:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	1dba      	adds	r2, r7, #6
 800d628:	215c      	movs	r1, #92	; 0x5c
 800d62a:	8812      	ldrh	r2, [r2, #0]
 800d62c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	1dba      	adds	r2, r7, #6
 800d632:	215e      	movs	r1, #94	; 0x5e
 800d634:	8812      	ldrh	r2, [r2, #0]
 800d636:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	2200      	movs	r2, #0
 800d63c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	689a      	ldr	r2, [r3, #8]
 800d642:	2380      	movs	r3, #128	; 0x80
 800d644:	015b      	lsls	r3, r3, #5
 800d646:	429a      	cmp	r2, r3
 800d648:	d10d      	bne.n	800d666 <UART_Start_Receive_IT+0x56>
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	691b      	ldr	r3, [r3, #16]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d104      	bne.n	800d65c <UART_Start_Receive_IT+0x4c>
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	2260      	movs	r2, #96	; 0x60
 800d656:	497b      	ldr	r1, [pc, #492]	; (800d844 <UART_Start_Receive_IT+0x234>)
 800d658:	5299      	strh	r1, [r3, r2]
 800d65a:	e02e      	b.n	800d6ba <UART_Start_Receive_IT+0xaa>
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	2260      	movs	r2, #96	; 0x60
 800d660:	21ff      	movs	r1, #255	; 0xff
 800d662:	5299      	strh	r1, [r3, r2]
 800d664:	e029      	b.n	800d6ba <UART_Start_Receive_IT+0xaa>
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	689b      	ldr	r3, [r3, #8]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d10d      	bne.n	800d68a <UART_Start_Receive_IT+0x7a>
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	691b      	ldr	r3, [r3, #16]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d104      	bne.n	800d680 <UART_Start_Receive_IT+0x70>
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	2260      	movs	r2, #96	; 0x60
 800d67a:	21ff      	movs	r1, #255	; 0xff
 800d67c:	5299      	strh	r1, [r3, r2]
 800d67e:	e01c      	b.n	800d6ba <UART_Start_Receive_IT+0xaa>
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	2260      	movs	r2, #96	; 0x60
 800d684:	217f      	movs	r1, #127	; 0x7f
 800d686:	5299      	strh	r1, [r3, r2]
 800d688:	e017      	b.n	800d6ba <UART_Start_Receive_IT+0xaa>
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	689a      	ldr	r2, [r3, #8]
 800d68e:	2380      	movs	r3, #128	; 0x80
 800d690:	055b      	lsls	r3, r3, #21
 800d692:	429a      	cmp	r2, r3
 800d694:	d10d      	bne.n	800d6b2 <UART_Start_Receive_IT+0xa2>
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	691b      	ldr	r3, [r3, #16]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d104      	bne.n	800d6a8 <UART_Start_Receive_IT+0x98>
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	2260      	movs	r2, #96	; 0x60
 800d6a2:	217f      	movs	r1, #127	; 0x7f
 800d6a4:	5299      	strh	r1, [r3, r2]
 800d6a6:	e008      	b.n	800d6ba <UART_Start_Receive_IT+0xaa>
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	2260      	movs	r2, #96	; 0x60
 800d6ac:	213f      	movs	r1, #63	; 0x3f
 800d6ae:	5299      	strh	r1, [r3, r2]
 800d6b0:	e003      	b.n	800d6ba <UART_Start_Receive_IT+0xaa>
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	2260      	movs	r2, #96	; 0x60
 800d6b6:	2100      	movs	r1, #0
 800d6b8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	2290      	movs	r2, #144	; 0x90
 800d6be:	2100      	movs	r1, #0
 800d6c0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	228c      	movs	r2, #140	; 0x8c
 800d6c6:	2122      	movs	r1, #34	; 0x22
 800d6c8:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d6ca:	f3ef 8310 	mrs	r3, PRIMASK
 800d6ce:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 800d6d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d6d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d6d4:	2301      	movs	r3, #1
 800d6d6:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d6d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d6da:	f383 8810 	msr	PRIMASK, r3
}
 800d6de:	46c0      	nop			; (mov r8, r8)
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	689a      	ldr	r2, [r3, #8]
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	2101      	movs	r1, #1
 800d6ec:	430a      	orrs	r2, r1
 800d6ee:	609a      	str	r2, [r3, #8]
 800d6f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d6f2:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d6f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d6f6:	f383 8810 	msr	PRIMASK, r3
}
 800d6fa:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800d700:	2380      	movs	r3, #128	; 0x80
 800d702:	059b      	lsls	r3, r3, #22
 800d704:	429a      	cmp	r2, r3
 800d706:	d150      	bne.n	800d7aa <UART_Start_Receive_IT+0x19a>
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	2268      	movs	r2, #104	; 0x68
 800d70c:	5a9b      	ldrh	r3, [r3, r2]
 800d70e:	1dba      	adds	r2, r7, #6
 800d710:	8812      	ldrh	r2, [r2, #0]
 800d712:	429a      	cmp	r2, r3
 800d714:	d349      	bcc.n	800d7aa <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	689a      	ldr	r2, [r3, #8]
 800d71a:	2380      	movs	r3, #128	; 0x80
 800d71c:	015b      	lsls	r3, r3, #5
 800d71e:	429a      	cmp	r2, r3
 800d720:	d107      	bne.n	800d732 <UART_Start_Receive_IT+0x122>
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	691b      	ldr	r3, [r3, #16]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d103      	bne.n	800d732 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	4a46      	ldr	r2, [pc, #280]	; (800d848 <UART_Start_Receive_IT+0x238>)
 800d72e:	675a      	str	r2, [r3, #116]	; 0x74
 800d730:	e002      	b.n	800d738 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	4a45      	ldr	r2, [pc, #276]	; (800d84c <UART_Start_Receive_IT+0x23c>)
 800d736:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	691b      	ldr	r3, [r3, #16]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d019      	beq.n	800d774 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d740:	f3ef 8310 	mrs	r3, PRIMASK
 800d744:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800d746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d748:	65bb      	str	r3, [r7, #88]	; 0x58
 800d74a:	2301      	movs	r3, #1
 800d74c:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d74e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d750:	f383 8810 	msr	PRIMASK, r3
}
 800d754:	46c0      	nop			; (mov r8, r8)
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	681a      	ldr	r2, [r3, #0]
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	2180      	movs	r1, #128	; 0x80
 800d762:	0049      	lsls	r1, r1, #1
 800d764:	430a      	orrs	r2, r1
 800d766:	601a      	str	r2, [r3, #0]
 800d768:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d76a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d76c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d76e:	f383 8810 	msr	PRIMASK, r3
}
 800d772:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d774:	f3ef 8310 	mrs	r3, PRIMASK
 800d778:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800d77a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d77c:	657b      	str	r3, [r7, #84]	; 0x54
 800d77e:	2301      	movs	r3, #1
 800d780:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d784:	f383 8810 	msr	PRIMASK, r3
}
 800d788:	46c0      	nop			; (mov r8, r8)
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	689a      	ldr	r2, [r3, #8]
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	2180      	movs	r1, #128	; 0x80
 800d796:	0549      	lsls	r1, r1, #21
 800d798:	430a      	orrs	r2, r1
 800d79a:	609a      	str	r2, [r3, #8]
 800d79c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d79e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d7a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7a2:	f383 8810 	msr	PRIMASK, r3
}
 800d7a6:	46c0      	nop			; (mov r8, r8)
 800d7a8:	e047      	b.n	800d83a <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	689a      	ldr	r2, [r3, #8]
 800d7ae:	2380      	movs	r3, #128	; 0x80
 800d7b0:	015b      	lsls	r3, r3, #5
 800d7b2:	429a      	cmp	r2, r3
 800d7b4:	d107      	bne.n	800d7c6 <UART_Start_Receive_IT+0x1b6>
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	691b      	ldr	r3, [r3, #16]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d103      	bne.n	800d7c6 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	4a23      	ldr	r2, [pc, #140]	; (800d850 <UART_Start_Receive_IT+0x240>)
 800d7c2:	675a      	str	r2, [r3, #116]	; 0x74
 800d7c4:	e002      	b.n	800d7cc <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	4a22      	ldr	r2, [pc, #136]	; (800d854 <UART_Start_Receive_IT+0x244>)
 800d7ca:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	691b      	ldr	r3, [r3, #16]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d019      	beq.n	800d808 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d7d4:	f3ef 8310 	mrs	r3, PRIMASK
 800d7d8:	61fb      	str	r3, [r7, #28]
  return(result);
 800d7da:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800d7dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d7de:	2301      	movs	r3, #1
 800d7e0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d7e2:	6a3b      	ldr	r3, [r7, #32]
 800d7e4:	f383 8810 	msr	PRIMASK, r3
}
 800d7e8:	46c0      	nop			; (mov r8, r8)
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	681a      	ldr	r2, [r3, #0]
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	2190      	movs	r1, #144	; 0x90
 800d7f6:	0049      	lsls	r1, r1, #1
 800d7f8:	430a      	orrs	r2, r1
 800d7fa:	601a      	str	r2, [r3, #0]
 800d7fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7fe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d802:	f383 8810 	msr	PRIMASK, r3
}
 800d806:	e018      	b.n	800d83a <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d808:	f3ef 8310 	mrs	r3, PRIMASK
 800d80c:	613b      	str	r3, [r7, #16]
  return(result);
 800d80e:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d810:	653b      	str	r3, [r7, #80]	; 0x50
 800d812:	2301      	movs	r3, #1
 800d814:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d816:	697b      	ldr	r3, [r7, #20]
 800d818:	f383 8810 	msr	PRIMASK, r3
}
 800d81c:	46c0      	nop			; (mov r8, r8)
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	681a      	ldr	r2, [r3, #0]
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	2120      	movs	r1, #32
 800d82a:	430a      	orrs	r2, r1
 800d82c:	601a      	str	r2, [r3, #0]
 800d82e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d830:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d832:	69bb      	ldr	r3, [r7, #24]
 800d834:	f383 8810 	msr	PRIMASK, r3
}
 800d838:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 800d83a:	2300      	movs	r3, #0
}
 800d83c:	0018      	movs	r0, r3
 800d83e:	46bd      	mov	sp, r7
 800d840:	b018      	add	sp, #96	; 0x60
 800d842:	bd80      	pop	{r7, pc}
 800d844:	000001ff 	.word	0x000001ff
 800d848:	0800df81 	.word	0x0800df81
 800d84c:	0800dc95 	.word	0x0800dc95
 800d850:	0800db21 	.word	0x0800db21
 800d854:	0800d9ad 	.word	0x0800d9ad

0800d858 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b08e      	sub	sp, #56	; 0x38
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d860:	f3ef 8310 	mrs	r3, PRIMASK
 800d864:	617b      	str	r3, [r7, #20]
  return(result);
 800d866:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d868:	637b      	str	r3, [r7, #52]	; 0x34
 800d86a:	2301      	movs	r3, #1
 800d86c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d86e:	69bb      	ldr	r3, [r7, #24]
 800d870:	f383 8810 	msr	PRIMASK, r3
}
 800d874:	46c0      	nop			; (mov r8, r8)
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	681a      	ldr	r2, [r3, #0]
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	4926      	ldr	r1, [pc, #152]	; (800d91c <UART_EndRxTransfer+0xc4>)
 800d882:	400a      	ands	r2, r1
 800d884:	601a      	str	r2, [r3, #0]
 800d886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d888:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d88a:	69fb      	ldr	r3, [r7, #28]
 800d88c:	f383 8810 	msr	PRIMASK, r3
}
 800d890:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d892:	f3ef 8310 	mrs	r3, PRIMASK
 800d896:	623b      	str	r3, [r7, #32]
  return(result);
 800d898:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d89a:	633b      	str	r3, [r7, #48]	; 0x30
 800d89c:	2301      	movs	r3, #1
 800d89e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8a2:	f383 8810 	msr	PRIMASK, r3
}
 800d8a6:	46c0      	nop			; (mov r8, r8)
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	689a      	ldr	r2, [r3, #8]
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	491b      	ldr	r1, [pc, #108]	; (800d920 <UART_EndRxTransfer+0xc8>)
 800d8b4:	400a      	ands	r2, r1
 800d8b6:	609a      	str	r2, [r3, #8]
 800d8b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ba:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d8bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8be:	f383 8810 	msr	PRIMASK, r3
}
 800d8c2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8c8:	2b01      	cmp	r3, #1
 800d8ca:	d118      	bne.n	800d8fe <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d8cc:	f3ef 8310 	mrs	r3, PRIMASK
 800d8d0:	60bb      	str	r3, [r7, #8]
  return(result);
 800d8d2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d8d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d8d6:	2301      	movs	r3, #1
 800d8d8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	f383 8810 	msr	PRIMASK, r3
}
 800d8e0:	46c0      	nop			; (mov r8, r8)
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	681a      	ldr	r2, [r3, #0]
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	2110      	movs	r1, #16
 800d8ee:	438a      	bics	r2, r1
 800d8f0:	601a      	str	r2, [r3, #0]
 800d8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d8f6:	693b      	ldr	r3, [r7, #16]
 800d8f8:	f383 8810 	msr	PRIMASK, r3
}
 800d8fc:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	228c      	movs	r2, #140	; 0x8c
 800d902:	2120      	movs	r1, #32
 800d904:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	2200      	movs	r2, #0
 800d90a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	2200      	movs	r2, #0
 800d910:	675a      	str	r2, [r3, #116]	; 0x74
}
 800d912:	46c0      	nop			; (mov r8, r8)
 800d914:	46bd      	mov	sp, r7
 800d916:	b00e      	add	sp, #56	; 0x38
 800d918:	bd80      	pop	{r7, pc}
 800d91a:	46c0      	nop			; (mov r8, r8)
 800d91c:	fffffedf 	.word	0xfffffedf
 800d920:	effffffe 	.word	0xeffffffe

0800d924 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d924:	b580      	push	{r7, lr}
 800d926:	b084      	sub	sp, #16
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d930:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	225e      	movs	r2, #94	; 0x5e
 800d936:	2100      	movs	r1, #0
 800d938:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	2256      	movs	r2, #86	; 0x56
 800d93e:	2100      	movs	r1, #0
 800d940:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	0018      	movs	r0, r3
 800d946:	f7f7 f9b7 	bl	8004cb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d94a:	46c0      	nop			; (mov r8, r8)
 800d94c:	46bd      	mov	sp, r7
 800d94e:	b004      	add	sp, #16
 800d950:	bd80      	pop	{r7, pc}

0800d952 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d952:	b580      	push	{r7, lr}
 800d954:	b086      	sub	sp, #24
 800d956:	af00      	add	r7, sp, #0
 800d958:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d95a:	f3ef 8310 	mrs	r3, PRIMASK
 800d95e:	60bb      	str	r3, [r7, #8]
  return(result);
 800d960:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d962:	617b      	str	r3, [r7, #20]
 800d964:	2301      	movs	r3, #1
 800d966:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	f383 8810 	msr	PRIMASK, r3
}
 800d96e:	46c0      	nop			; (mov r8, r8)
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	681a      	ldr	r2, [r3, #0]
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	2140      	movs	r1, #64	; 0x40
 800d97c:	438a      	bics	r2, r1
 800d97e:	601a      	str	r2, [r3, #0]
 800d980:	697b      	ldr	r3, [r7, #20]
 800d982:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d984:	693b      	ldr	r3, [r7, #16]
 800d986:	f383 8810 	msr	PRIMASK, r3
}
 800d98a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	2288      	movs	r2, #136	; 0x88
 800d990:	2120      	movs	r1, #32
 800d992:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	2200      	movs	r2, #0
 800d998:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	0018      	movs	r0, r3
 800d99e:	f7ff fab5 	bl	800cf0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d9a2:	46c0      	nop			; (mov r8, r8)
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	b006      	add	sp, #24
 800d9a8:	bd80      	pop	{r7, pc}
	...

0800d9ac <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b090      	sub	sp, #64	; 0x40
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d9b4:	203e      	movs	r0, #62	; 0x3e
 800d9b6:	183b      	adds	r3, r7, r0
 800d9b8:	687a      	ldr	r2, [r7, #4]
 800d9ba:	2160      	movs	r1, #96	; 0x60
 800d9bc:	5a52      	ldrh	r2, [r2, r1]
 800d9be:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	228c      	movs	r2, #140	; 0x8c
 800d9c4:	589b      	ldr	r3, [r3, r2]
 800d9c6:	2b22      	cmp	r3, #34	; 0x22
 800d9c8:	d000      	beq.n	800d9cc <UART_RxISR_8BIT+0x20>
 800d9ca:	e09a      	b.n	800db02 <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d9d2:	213c      	movs	r1, #60	; 0x3c
 800d9d4:	187b      	adds	r3, r7, r1
 800d9d6:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d9d8:	187b      	adds	r3, r7, r1
 800d9da:	881b      	ldrh	r3, [r3, #0]
 800d9dc:	b2da      	uxtb	r2, r3
 800d9de:	183b      	adds	r3, r7, r0
 800d9e0:	881b      	ldrh	r3, [r3, #0]
 800d9e2:	b2d9      	uxtb	r1, r3
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d9e8:	400a      	ands	r2, r1
 800d9ea:	b2d2      	uxtb	r2, r2
 800d9ec:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d9f2:	1c5a      	adds	r2, r3, #1
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	225e      	movs	r2, #94	; 0x5e
 800d9fc:	5a9b      	ldrh	r3, [r3, r2]
 800d9fe:	b29b      	uxth	r3, r3
 800da00:	3b01      	subs	r3, #1
 800da02:	b299      	uxth	r1, r3
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	225e      	movs	r2, #94	; 0x5e
 800da08:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	225e      	movs	r2, #94	; 0x5e
 800da0e:	5a9b      	ldrh	r3, [r3, r2]
 800da10:	b29b      	uxth	r3, r3
 800da12:	2b00      	cmp	r3, #0
 800da14:	d000      	beq.n	800da18 <UART_RxISR_8BIT+0x6c>
 800da16:	e07c      	b.n	800db12 <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da18:	f3ef 8310 	mrs	r3, PRIMASK
 800da1c:	61bb      	str	r3, [r7, #24]
  return(result);
 800da1e:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800da20:	63bb      	str	r3, [r7, #56]	; 0x38
 800da22:	2301      	movs	r3, #1
 800da24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da26:	69fb      	ldr	r3, [r7, #28]
 800da28:	f383 8810 	msr	PRIMASK, r3
}
 800da2c:	46c0      	nop			; (mov r8, r8)
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	681a      	ldr	r2, [r3, #0]
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	4938      	ldr	r1, [pc, #224]	; (800db1c <UART_RxISR_8BIT+0x170>)
 800da3a:	400a      	ands	r2, r1
 800da3c:	601a      	str	r2, [r3, #0]
 800da3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da40:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da42:	6a3b      	ldr	r3, [r7, #32]
 800da44:	f383 8810 	msr	PRIMASK, r3
}
 800da48:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da4a:	f3ef 8310 	mrs	r3, PRIMASK
 800da4e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800da50:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da52:	637b      	str	r3, [r7, #52]	; 0x34
 800da54:	2301      	movs	r3, #1
 800da56:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da5a:	f383 8810 	msr	PRIMASK, r3
}
 800da5e:	46c0      	nop			; (mov r8, r8)
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	689a      	ldr	r2, [r3, #8]
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	2101      	movs	r1, #1
 800da6c:	438a      	bics	r2, r1
 800da6e:	609a      	str	r2, [r3, #8]
 800da70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da72:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da76:	f383 8810 	msr	PRIMASK, r3
}
 800da7a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	228c      	movs	r2, #140	; 0x8c
 800da80:	2120      	movs	r1, #32
 800da82:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	2200      	movs	r2, #0
 800da88:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	2200      	movs	r2, #0
 800da8e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da94:	2b01      	cmp	r3, #1
 800da96:	d12f      	bne.n	800daf8 <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	2200      	movs	r2, #0
 800da9c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da9e:	f3ef 8310 	mrs	r3, PRIMASK
 800daa2:	60fb      	str	r3, [r7, #12]
  return(result);
 800daa4:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800daa6:	633b      	str	r3, [r7, #48]	; 0x30
 800daa8:	2301      	movs	r3, #1
 800daaa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800daac:	693b      	ldr	r3, [r7, #16]
 800daae:	f383 8810 	msr	PRIMASK, r3
}
 800dab2:	46c0      	nop			; (mov r8, r8)
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	681a      	ldr	r2, [r3, #0]
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	2110      	movs	r1, #16
 800dac0:	438a      	bics	r2, r1
 800dac2:	601a      	str	r2, [r3, #0]
 800dac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dac6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dac8:	697b      	ldr	r3, [r7, #20]
 800daca:	f383 8810 	msr	PRIMASK, r3
}
 800dace:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	69db      	ldr	r3, [r3, #28]
 800dad6:	2210      	movs	r2, #16
 800dad8:	4013      	ands	r3, r2
 800dada:	2b10      	cmp	r3, #16
 800dadc:	d103      	bne.n	800dae6 <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	2210      	movs	r2, #16
 800dae4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	225c      	movs	r2, #92	; 0x5c
 800daea:	5a9a      	ldrh	r2, [r3, r2]
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	0011      	movs	r1, r2
 800daf0:	0018      	movs	r0, r3
 800daf2:	f7ff fa13 	bl	800cf1c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800daf6:	e00c      	b.n	800db12 <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	0018      	movs	r0, r3
 800dafc:	f7f7 f90a 	bl	8004d14 <HAL_UART_RxCpltCallback>
}
 800db00:	e007      	b.n	800db12 <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	699a      	ldr	r2, [r3, #24]
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	2108      	movs	r1, #8
 800db0e:	430a      	orrs	r2, r1
 800db10:	619a      	str	r2, [r3, #24]
}
 800db12:	46c0      	nop			; (mov r8, r8)
 800db14:	46bd      	mov	sp, r7
 800db16:	b010      	add	sp, #64	; 0x40
 800db18:	bd80      	pop	{r7, pc}
 800db1a:	46c0      	nop			; (mov r8, r8)
 800db1c:	fffffedf 	.word	0xfffffedf

0800db20 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800db20:	b580      	push	{r7, lr}
 800db22:	b090      	sub	sp, #64	; 0x40
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800db28:	203e      	movs	r0, #62	; 0x3e
 800db2a:	183b      	adds	r3, r7, r0
 800db2c:	687a      	ldr	r2, [r7, #4]
 800db2e:	2160      	movs	r1, #96	; 0x60
 800db30:	5a52      	ldrh	r2, [r2, r1]
 800db32:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	228c      	movs	r2, #140	; 0x8c
 800db38:	589b      	ldr	r3, [r3, r2]
 800db3a:	2b22      	cmp	r3, #34	; 0x22
 800db3c:	d000      	beq.n	800db40 <UART_RxISR_16BIT+0x20>
 800db3e:	e09a      	b.n	800dc76 <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800db46:	213c      	movs	r1, #60	; 0x3c
 800db48:	187b      	adds	r3, r7, r1
 800db4a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db50:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 800db52:	187b      	adds	r3, r7, r1
 800db54:	183a      	adds	r2, r7, r0
 800db56:	881b      	ldrh	r3, [r3, #0]
 800db58:	8812      	ldrh	r2, [r2, #0]
 800db5a:	4013      	ands	r3, r2
 800db5c:	b29a      	uxth	r2, r3
 800db5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db60:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db66:	1c9a      	adds	r2, r3, #2
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	225e      	movs	r2, #94	; 0x5e
 800db70:	5a9b      	ldrh	r3, [r3, r2]
 800db72:	b29b      	uxth	r3, r3
 800db74:	3b01      	subs	r3, #1
 800db76:	b299      	uxth	r1, r3
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	225e      	movs	r2, #94	; 0x5e
 800db7c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	225e      	movs	r2, #94	; 0x5e
 800db82:	5a9b      	ldrh	r3, [r3, r2]
 800db84:	b29b      	uxth	r3, r3
 800db86:	2b00      	cmp	r3, #0
 800db88:	d000      	beq.n	800db8c <UART_RxISR_16BIT+0x6c>
 800db8a:	e07c      	b.n	800dc86 <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db8c:	f3ef 8310 	mrs	r3, PRIMASK
 800db90:	617b      	str	r3, [r7, #20]
  return(result);
 800db92:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800db94:	637b      	str	r3, [r7, #52]	; 0x34
 800db96:	2301      	movs	r3, #1
 800db98:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db9a:	69bb      	ldr	r3, [r7, #24]
 800db9c:	f383 8810 	msr	PRIMASK, r3
}
 800dba0:	46c0      	nop			; (mov r8, r8)
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	681a      	ldr	r2, [r3, #0]
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	4938      	ldr	r1, [pc, #224]	; (800dc90 <UART_RxISR_16BIT+0x170>)
 800dbae:	400a      	ands	r2, r1
 800dbb0:	601a      	str	r2, [r3, #0]
 800dbb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbb4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dbb6:	69fb      	ldr	r3, [r7, #28]
 800dbb8:	f383 8810 	msr	PRIMASK, r3
}
 800dbbc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dbbe:	f3ef 8310 	mrs	r3, PRIMASK
 800dbc2:	623b      	str	r3, [r7, #32]
  return(result);
 800dbc4:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dbc6:	633b      	str	r3, [r7, #48]	; 0x30
 800dbc8:	2301      	movs	r3, #1
 800dbca:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dbcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbce:	f383 8810 	msr	PRIMASK, r3
}
 800dbd2:	46c0      	nop			; (mov r8, r8)
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	689a      	ldr	r2, [r3, #8]
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	2101      	movs	r1, #1
 800dbe0:	438a      	bics	r2, r1
 800dbe2:	609a      	str	r2, [r3, #8]
 800dbe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbe6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dbe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbea:	f383 8810 	msr	PRIMASK, r3
}
 800dbee:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	228c      	movs	r2, #140	; 0x8c
 800dbf4:	2120      	movs	r1, #32
 800dbf6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	2200      	movs	r2, #0
 800dc02:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc08:	2b01      	cmp	r3, #1
 800dc0a:	d12f      	bne.n	800dc6c <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	2200      	movs	r2, #0
 800dc10:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc12:	f3ef 8310 	mrs	r3, PRIMASK
 800dc16:	60bb      	str	r3, [r7, #8]
  return(result);
 800dc18:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dc1c:	2301      	movs	r3, #1
 800dc1e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	f383 8810 	msr	PRIMASK, r3
}
 800dc26:	46c0      	nop			; (mov r8, r8)
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	681a      	ldr	r2, [r3, #0]
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	2110      	movs	r1, #16
 800dc34:	438a      	bics	r2, r1
 800dc36:	601a      	str	r2, [r3, #0]
 800dc38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc3c:	693b      	ldr	r3, [r7, #16]
 800dc3e:	f383 8810 	msr	PRIMASK, r3
}
 800dc42:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	69db      	ldr	r3, [r3, #28]
 800dc4a:	2210      	movs	r2, #16
 800dc4c:	4013      	ands	r3, r2
 800dc4e:	2b10      	cmp	r3, #16
 800dc50:	d103      	bne.n	800dc5a <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	2210      	movs	r2, #16
 800dc58:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	225c      	movs	r2, #92	; 0x5c
 800dc5e:	5a9a      	ldrh	r2, [r3, r2]
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	0011      	movs	r1, r2
 800dc64:	0018      	movs	r0, r3
 800dc66:	f7ff f959 	bl	800cf1c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800dc6a:	e00c      	b.n	800dc86 <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	0018      	movs	r0, r3
 800dc70:	f7f7 f850 	bl	8004d14 <HAL_UART_RxCpltCallback>
}
 800dc74:	e007      	b.n	800dc86 <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	699a      	ldr	r2, [r3, #24]
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	2108      	movs	r1, #8
 800dc82:	430a      	orrs	r2, r1
 800dc84:	619a      	str	r2, [r3, #24]
}
 800dc86:	46c0      	nop			; (mov r8, r8)
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	b010      	add	sp, #64	; 0x40
 800dc8c:	bd80      	pop	{r7, pc}
 800dc8e:	46c0      	nop			; (mov r8, r8)
 800dc90:	fffffedf 	.word	0xfffffedf

0800dc94 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b09c      	sub	sp, #112	; 0x70
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800dc9c:	236a      	movs	r3, #106	; 0x6a
 800dc9e:	18fb      	adds	r3, r7, r3
 800dca0:	687a      	ldr	r2, [r7, #4]
 800dca2:	2160      	movs	r1, #96	; 0x60
 800dca4:	5a52      	ldrh	r2, [r2, r1]
 800dca6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	69db      	ldr	r3, [r3, #28]
 800dcae:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	689b      	ldr	r3, [r3, #8]
 800dcbe:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	228c      	movs	r2, #140	; 0x8c
 800dcc4:	589b      	ldr	r3, [r3, r2]
 800dcc6:	2b22      	cmp	r3, #34	; 0x22
 800dcc8:	d000      	beq.n	800dccc <UART_RxISR_8BIT_FIFOEN+0x38>
 800dcca:	e144      	b.n	800df56 <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800dccc:	235e      	movs	r3, #94	; 0x5e
 800dcce:	18fb      	adds	r3, r7, r3
 800dcd0:	687a      	ldr	r2, [r7, #4]
 800dcd2:	2168      	movs	r1, #104	; 0x68
 800dcd4:	5a52      	ldrh	r2, [r2, r1]
 800dcd6:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800dcd8:	e0eb      	b.n	800deb2 <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dce0:	215c      	movs	r1, #92	; 0x5c
 800dce2:	187b      	adds	r3, r7, r1
 800dce4:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800dce6:	187b      	adds	r3, r7, r1
 800dce8:	881b      	ldrh	r3, [r3, #0]
 800dcea:	b2da      	uxtb	r2, r3
 800dcec:	236a      	movs	r3, #106	; 0x6a
 800dcee:	18fb      	adds	r3, r7, r3
 800dcf0:	881b      	ldrh	r3, [r3, #0]
 800dcf2:	b2d9      	uxtb	r1, r3
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dcf8:	400a      	ands	r2, r1
 800dcfa:	b2d2      	uxtb	r2, r2
 800dcfc:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd02:	1c5a      	adds	r2, r3, #1
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	225e      	movs	r2, #94	; 0x5e
 800dd0c:	5a9b      	ldrh	r3, [r3, r2]
 800dd0e:	b29b      	uxth	r3, r3
 800dd10:	3b01      	subs	r3, #1
 800dd12:	b299      	uxth	r1, r3
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	225e      	movs	r2, #94	; 0x5e
 800dd18:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	69db      	ldr	r3, [r3, #28]
 800dd20:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800dd22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dd24:	2207      	movs	r2, #7
 800dd26:	4013      	ands	r3, r2
 800dd28:	d049      	beq.n	800ddbe <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800dd2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dd2c:	2201      	movs	r2, #1
 800dd2e:	4013      	ands	r3, r2
 800dd30:	d010      	beq.n	800dd54 <UART_RxISR_8BIT_FIFOEN+0xc0>
 800dd32:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800dd34:	2380      	movs	r3, #128	; 0x80
 800dd36:	005b      	lsls	r3, r3, #1
 800dd38:	4013      	ands	r3, r2
 800dd3a:	d00b      	beq.n	800dd54 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	2201      	movs	r2, #1
 800dd42:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	2290      	movs	r2, #144	; 0x90
 800dd48:	589b      	ldr	r3, [r3, r2]
 800dd4a:	2201      	movs	r2, #1
 800dd4c:	431a      	orrs	r2, r3
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	2190      	movs	r1, #144	; 0x90
 800dd52:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dd54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dd56:	2202      	movs	r2, #2
 800dd58:	4013      	ands	r3, r2
 800dd5a:	d00f      	beq.n	800dd7c <UART_RxISR_8BIT_FIFOEN+0xe8>
 800dd5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dd5e:	2201      	movs	r2, #1
 800dd60:	4013      	ands	r3, r2
 800dd62:	d00b      	beq.n	800dd7c <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	2202      	movs	r2, #2
 800dd6a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	2290      	movs	r2, #144	; 0x90
 800dd70:	589b      	ldr	r3, [r3, r2]
 800dd72:	2204      	movs	r2, #4
 800dd74:	431a      	orrs	r2, r3
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	2190      	movs	r1, #144	; 0x90
 800dd7a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dd7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dd7e:	2204      	movs	r2, #4
 800dd80:	4013      	ands	r3, r2
 800dd82:	d00f      	beq.n	800dda4 <UART_RxISR_8BIT_FIFOEN+0x110>
 800dd84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dd86:	2201      	movs	r2, #1
 800dd88:	4013      	ands	r3, r2
 800dd8a:	d00b      	beq.n	800dda4 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	2204      	movs	r2, #4
 800dd92:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	2290      	movs	r2, #144	; 0x90
 800dd98:	589b      	ldr	r3, [r3, r2]
 800dd9a:	2202      	movs	r2, #2
 800dd9c:	431a      	orrs	r2, r3
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	2190      	movs	r1, #144	; 0x90
 800dda2:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	2290      	movs	r2, #144	; 0x90
 800dda8:	589b      	ldr	r3, [r3, r2]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d007      	beq.n	800ddbe <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	0018      	movs	r0, r3
 800ddb2:	f7f6 ff81 	bl	8004cb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	2290      	movs	r2, #144	; 0x90
 800ddba:	2100      	movs	r1, #0
 800ddbc:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	225e      	movs	r2, #94	; 0x5e
 800ddc2:	5a9b      	ldrh	r3, [r3, r2]
 800ddc4:	b29b      	uxth	r3, r3
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d173      	bne.n	800deb2 <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ddca:	f3ef 8310 	mrs	r3, PRIMASK
 800ddce:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800ddd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ddd2:	65bb      	str	r3, [r7, #88]	; 0x58
 800ddd4:	2301      	movs	r3, #1
 800ddd6:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ddd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddda:	f383 8810 	msr	PRIMASK, r3
}
 800ddde:	46c0      	nop			; (mov r8, r8)
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	681a      	ldr	r2, [r3, #0]
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	4961      	ldr	r1, [pc, #388]	; (800df70 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 800ddec:	400a      	ands	r2, r1
 800ddee:	601a      	str	r2, [r3, #0]
 800ddf0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ddf2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ddf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddf6:	f383 8810 	msr	PRIMASK, r3
}
 800ddfa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ddfc:	f3ef 8310 	mrs	r3, PRIMASK
 800de00:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 800de02:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800de04:	657b      	str	r3, [r7, #84]	; 0x54
 800de06:	2301      	movs	r3, #1
 800de08:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de0c:	f383 8810 	msr	PRIMASK, r3
}
 800de10:	46c0      	nop			; (mov r8, r8)
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	689a      	ldr	r2, [r3, #8]
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	4955      	ldr	r1, [pc, #340]	; (800df74 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 800de1e:	400a      	ands	r2, r1
 800de20:	609a      	str	r2, [r3, #8]
 800de22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de24:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de28:	f383 8810 	msr	PRIMASK, r3
}
 800de2c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	228c      	movs	r2, #140	; 0x8c
 800de32:	2120      	movs	r1, #32
 800de34:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	2200      	movs	r2, #0
 800de3a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	2200      	movs	r2, #0
 800de40:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de46:	2b01      	cmp	r3, #1
 800de48:	d12f      	bne.n	800deaa <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	2200      	movs	r2, #0
 800de4e:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de50:	f3ef 8310 	mrs	r3, PRIMASK
 800de54:	623b      	str	r3, [r7, #32]
  return(result);
 800de56:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800de58:	653b      	str	r3, [r7, #80]	; 0x50
 800de5a:	2301      	movs	r3, #1
 800de5c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de60:	f383 8810 	msr	PRIMASK, r3
}
 800de64:	46c0      	nop			; (mov r8, r8)
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	681a      	ldr	r2, [r3, #0]
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	2110      	movs	r1, #16
 800de72:	438a      	bics	r2, r1
 800de74:	601a      	str	r2, [r3, #0]
 800de76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de78:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de7c:	f383 8810 	msr	PRIMASK, r3
}
 800de80:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	69db      	ldr	r3, [r3, #28]
 800de88:	2210      	movs	r2, #16
 800de8a:	4013      	ands	r3, r2
 800de8c:	2b10      	cmp	r3, #16
 800de8e:	d103      	bne.n	800de98 <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	2210      	movs	r2, #16
 800de96:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	225c      	movs	r2, #92	; 0x5c
 800de9c:	5a9a      	ldrh	r2, [r3, r2]
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	0011      	movs	r1, r2
 800dea2:	0018      	movs	r0, r3
 800dea4:	f7ff f83a 	bl	800cf1c <HAL_UARTEx_RxEventCallback>
 800dea8:	e003      	b.n	800deb2 <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	0018      	movs	r0, r3
 800deae:	f7f6 ff31 	bl	8004d14 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800deb2:	235e      	movs	r3, #94	; 0x5e
 800deb4:	18fb      	adds	r3, r7, r3
 800deb6:	881b      	ldrh	r3, [r3, #0]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d004      	beq.n	800dec6 <UART_RxISR_8BIT_FIFOEN+0x232>
 800debc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800debe:	2220      	movs	r2, #32
 800dec0:	4013      	ands	r3, r2
 800dec2:	d000      	beq.n	800dec6 <UART_RxISR_8BIT_FIFOEN+0x232>
 800dec4:	e709      	b.n	800dcda <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800dec6:	204e      	movs	r0, #78	; 0x4e
 800dec8:	183b      	adds	r3, r7, r0
 800deca:	687a      	ldr	r2, [r7, #4]
 800decc:	215e      	movs	r1, #94	; 0x5e
 800dece:	5a52      	ldrh	r2, [r2, r1]
 800ded0:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ded2:	0001      	movs	r1, r0
 800ded4:	187b      	adds	r3, r7, r1
 800ded6:	881b      	ldrh	r3, [r3, #0]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d044      	beq.n	800df66 <UART_RxISR_8BIT_FIFOEN+0x2d2>
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	2268      	movs	r2, #104	; 0x68
 800dee0:	5a9b      	ldrh	r3, [r3, r2]
 800dee2:	187a      	adds	r2, r7, r1
 800dee4:	8812      	ldrh	r2, [r2, #0]
 800dee6:	429a      	cmp	r2, r3
 800dee8:	d23d      	bcs.n	800df66 <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800deea:	f3ef 8310 	mrs	r3, PRIMASK
 800deee:	60bb      	str	r3, [r7, #8]
  return(result);
 800def0:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800def2:	64bb      	str	r3, [r7, #72]	; 0x48
 800def4:	2301      	movs	r3, #1
 800def6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	f383 8810 	msr	PRIMASK, r3
}
 800defe:	46c0      	nop			; (mov r8, r8)
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	689a      	ldr	r2, [r3, #8]
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	491b      	ldr	r1, [pc, #108]	; (800df78 <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 800df0c:	400a      	ands	r2, r1
 800df0e:	609a      	str	r2, [r3, #8]
 800df10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df14:	693b      	ldr	r3, [r7, #16]
 800df16:	f383 8810 	msr	PRIMASK, r3
}
 800df1a:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	4a17      	ldr	r2, [pc, #92]	; (800df7c <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 800df20:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800df22:	f3ef 8310 	mrs	r3, PRIMASK
 800df26:	617b      	str	r3, [r7, #20]
  return(result);
 800df28:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800df2a:	647b      	str	r3, [r7, #68]	; 0x44
 800df2c:	2301      	movs	r3, #1
 800df2e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df30:	69bb      	ldr	r3, [r7, #24]
 800df32:	f383 8810 	msr	PRIMASK, r3
}
 800df36:	46c0      	nop			; (mov r8, r8)
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	681a      	ldr	r2, [r3, #0]
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	2120      	movs	r1, #32
 800df44:	430a      	orrs	r2, r1
 800df46:	601a      	str	r2, [r3, #0]
 800df48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df4a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df4c:	69fb      	ldr	r3, [r7, #28]
 800df4e:	f383 8810 	msr	PRIMASK, r3
}
 800df52:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800df54:	e007      	b.n	800df66 <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	699a      	ldr	r2, [r3, #24]
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	2108      	movs	r1, #8
 800df62:	430a      	orrs	r2, r1
 800df64:	619a      	str	r2, [r3, #24]
}
 800df66:	46c0      	nop			; (mov r8, r8)
 800df68:	46bd      	mov	sp, r7
 800df6a:	b01c      	add	sp, #112	; 0x70
 800df6c:	bd80      	pop	{r7, pc}
 800df6e:	46c0      	nop			; (mov r8, r8)
 800df70:	fffffeff 	.word	0xfffffeff
 800df74:	effffffe 	.word	0xeffffffe
 800df78:	efffffff 	.word	0xefffffff
 800df7c:	0800d9ad 	.word	0x0800d9ad

0800df80 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800df80:	b580      	push	{r7, lr}
 800df82:	b09e      	sub	sp, #120	; 0x78
 800df84:	af00      	add	r7, sp, #0
 800df86:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800df88:	2372      	movs	r3, #114	; 0x72
 800df8a:	18fb      	adds	r3, r7, r3
 800df8c:	687a      	ldr	r2, [r7, #4]
 800df8e:	2160      	movs	r1, #96	; 0x60
 800df90:	5a52      	ldrh	r2, [r2, r1]
 800df92:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	69db      	ldr	r3, [r3, #28]
 800df9a:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	689b      	ldr	r3, [r3, #8]
 800dfaa:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	228c      	movs	r2, #140	; 0x8c
 800dfb0:	589b      	ldr	r3, [r3, r2]
 800dfb2:	2b22      	cmp	r3, #34	; 0x22
 800dfb4:	d000      	beq.n	800dfb8 <UART_RxISR_16BIT_FIFOEN+0x38>
 800dfb6:	e144      	b.n	800e242 <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800dfb8:	2366      	movs	r3, #102	; 0x66
 800dfba:	18fb      	adds	r3, r7, r3
 800dfbc:	687a      	ldr	r2, [r7, #4]
 800dfbe:	2168      	movs	r1, #104	; 0x68
 800dfc0:	5a52      	ldrh	r2, [r2, r1]
 800dfc2:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800dfc4:	e0eb      	b.n	800e19e <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dfcc:	2164      	movs	r1, #100	; 0x64
 800dfce:	187b      	adds	r3, r7, r1
 800dfd0:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dfd6:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 800dfd8:	187b      	adds	r3, r7, r1
 800dfda:	2272      	movs	r2, #114	; 0x72
 800dfdc:	18ba      	adds	r2, r7, r2
 800dfde:	881b      	ldrh	r3, [r3, #0]
 800dfe0:	8812      	ldrh	r2, [r2, #0]
 800dfe2:	4013      	ands	r3, r2
 800dfe4:	b29a      	uxth	r2, r3
 800dfe6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dfe8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dfee:	1c9a      	adds	r2, r3, #2
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	225e      	movs	r2, #94	; 0x5e
 800dff8:	5a9b      	ldrh	r3, [r3, r2]
 800dffa:	b29b      	uxth	r3, r3
 800dffc:	3b01      	subs	r3, #1
 800dffe:	b299      	uxth	r1, r3
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	225e      	movs	r2, #94	; 0x5e
 800e004:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	69db      	ldr	r3, [r3, #28]
 800e00c:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e00e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e010:	2207      	movs	r2, #7
 800e012:	4013      	ands	r3, r2
 800e014:	d049      	beq.n	800e0aa <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e016:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e018:	2201      	movs	r2, #1
 800e01a:	4013      	ands	r3, r2
 800e01c:	d010      	beq.n	800e040 <UART_RxISR_16BIT_FIFOEN+0xc0>
 800e01e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e020:	2380      	movs	r3, #128	; 0x80
 800e022:	005b      	lsls	r3, r3, #1
 800e024:	4013      	ands	r3, r2
 800e026:	d00b      	beq.n	800e040 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	2201      	movs	r2, #1
 800e02e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	2290      	movs	r2, #144	; 0x90
 800e034:	589b      	ldr	r3, [r3, r2]
 800e036:	2201      	movs	r2, #1
 800e038:	431a      	orrs	r2, r3
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	2190      	movs	r1, #144	; 0x90
 800e03e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e040:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e042:	2202      	movs	r2, #2
 800e044:	4013      	ands	r3, r2
 800e046:	d00f      	beq.n	800e068 <UART_RxISR_16BIT_FIFOEN+0xe8>
 800e048:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e04a:	2201      	movs	r2, #1
 800e04c:	4013      	ands	r3, r2
 800e04e:	d00b      	beq.n	800e068 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	2202      	movs	r2, #2
 800e056:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	2290      	movs	r2, #144	; 0x90
 800e05c:	589b      	ldr	r3, [r3, r2]
 800e05e:	2204      	movs	r2, #4
 800e060:	431a      	orrs	r2, r3
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	2190      	movs	r1, #144	; 0x90
 800e066:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e068:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e06a:	2204      	movs	r2, #4
 800e06c:	4013      	ands	r3, r2
 800e06e:	d00f      	beq.n	800e090 <UART_RxISR_16BIT_FIFOEN+0x110>
 800e070:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e072:	2201      	movs	r2, #1
 800e074:	4013      	ands	r3, r2
 800e076:	d00b      	beq.n	800e090 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	2204      	movs	r2, #4
 800e07e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	2290      	movs	r2, #144	; 0x90
 800e084:	589b      	ldr	r3, [r3, r2]
 800e086:	2202      	movs	r2, #2
 800e088:	431a      	orrs	r2, r3
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	2190      	movs	r1, #144	; 0x90
 800e08e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	2290      	movs	r2, #144	; 0x90
 800e094:	589b      	ldr	r3, [r3, r2]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d007      	beq.n	800e0aa <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	0018      	movs	r0, r3
 800e09e:	f7f6 fe0b 	bl	8004cb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	2290      	movs	r2, #144	; 0x90
 800e0a6:	2100      	movs	r1, #0
 800e0a8:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	225e      	movs	r2, #94	; 0x5e
 800e0ae:	5a9b      	ldrh	r3, [r3, r2]
 800e0b0:	b29b      	uxth	r3, r3
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d173      	bne.n	800e19e <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e0b6:	f3ef 8310 	mrs	r3, PRIMASK
 800e0ba:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800e0bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e0be:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e0c0:	2301      	movs	r3, #1
 800e0c2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e0c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0c6:	f383 8810 	msr	PRIMASK, r3
}
 800e0ca:	46c0      	nop			; (mov r8, r8)
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	681a      	ldr	r2, [r3, #0]
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	4961      	ldr	r1, [pc, #388]	; (800e25c <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 800e0d8:	400a      	ands	r2, r1
 800e0da:	601a      	str	r2, [r3, #0]
 800e0dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e0de:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e0e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0e2:	f383 8810 	msr	PRIMASK, r3
}
 800e0e6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e0e8:	f3ef 8310 	mrs	r3, PRIMASK
 800e0ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800e0ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e0f0:	65bb      	str	r3, [r7, #88]	; 0x58
 800e0f2:	2301      	movs	r3, #1
 800e0f4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e0f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e0f8:	f383 8810 	msr	PRIMASK, r3
}
 800e0fc:	46c0      	nop			; (mov r8, r8)
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	689a      	ldr	r2, [r3, #8]
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	4955      	ldr	r1, [pc, #340]	; (800e260 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 800e10a:	400a      	ands	r2, r1
 800e10c:	609a      	str	r2, [r3, #8]
 800e10e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e110:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e112:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e114:	f383 8810 	msr	PRIMASK, r3
}
 800e118:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	228c      	movs	r2, #140	; 0x8c
 800e11e:	2120      	movs	r1, #32
 800e120:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	2200      	movs	r2, #0
 800e126:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	2200      	movs	r2, #0
 800e12c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e132:	2b01      	cmp	r3, #1
 800e134:	d12f      	bne.n	800e196 <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	2200      	movs	r2, #0
 800e13a:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e13c:	f3ef 8310 	mrs	r3, PRIMASK
 800e140:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800e142:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e144:	657b      	str	r3, [r7, #84]	; 0x54
 800e146:	2301      	movs	r3, #1
 800e148:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e14a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e14c:	f383 8810 	msr	PRIMASK, r3
}
 800e150:	46c0      	nop			; (mov r8, r8)
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	681a      	ldr	r2, [r3, #0]
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	2110      	movs	r1, #16
 800e15e:	438a      	bics	r2, r1
 800e160:	601a      	str	r2, [r3, #0]
 800e162:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e164:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e168:	f383 8810 	msr	PRIMASK, r3
}
 800e16c:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	69db      	ldr	r3, [r3, #28]
 800e174:	2210      	movs	r2, #16
 800e176:	4013      	ands	r3, r2
 800e178:	2b10      	cmp	r3, #16
 800e17a:	d103      	bne.n	800e184 <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	2210      	movs	r2, #16
 800e182:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	225c      	movs	r2, #92	; 0x5c
 800e188:	5a9a      	ldrh	r2, [r3, r2]
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	0011      	movs	r1, r2
 800e18e:	0018      	movs	r0, r3
 800e190:	f7fe fec4 	bl	800cf1c <HAL_UARTEx_RxEventCallback>
 800e194:	e003      	b.n	800e19e <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	0018      	movs	r0, r3
 800e19a:	f7f6 fdbb 	bl	8004d14 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e19e:	2366      	movs	r3, #102	; 0x66
 800e1a0:	18fb      	adds	r3, r7, r3
 800e1a2:	881b      	ldrh	r3, [r3, #0]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d004      	beq.n	800e1b2 <UART_RxISR_16BIT_FIFOEN+0x232>
 800e1a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e1aa:	2220      	movs	r2, #32
 800e1ac:	4013      	ands	r3, r2
 800e1ae:	d000      	beq.n	800e1b2 <UART_RxISR_16BIT_FIFOEN+0x232>
 800e1b0:	e709      	b.n	800dfc6 <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e1b2:	2052      	movs	r0, #82	; 0x52
 800e1b4:	183b      	adds	r3, r7, r0
 800e1b6:	687a      	ldr	r2, [r7, #4]
 800e1b8:	215e      	movs	r1, #94	; 0x5e
 800e1ba:	5a52      	ldrh	r2, [r2, r1]
 800e1bc:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e1be:	0001      	movs	r1, r0
 800e1c0:	187b      	adds	r3, r7, r1
 800e1c2:	881b      	ldrh	r3, [r3, #0]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d044      	beq.n	800e252 <UART_RxISR_16BIT_FIFOEN+0x2d2>
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	2268      	movs	r2, #104	; 0x68
 800e1cc:	5a9b      	ldrh	r3, [r3, r2]
 800e1ce:	187a      	adds	r2, r7, r1
 800e1d0:	8812      	ldrh	r2, [r2, #0]
 800e1d2:	429a      	cmp	r2, r3
 800e1d4:	d23d      	bcs.n	800e252 <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e1d6:	f3ef 8310 	mrs	r3, PRIMASK
 800e1da:	60fb      	str	r3, [r7, #12]
  return(result);
 800e1dc:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e1de:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e1e0:	2301      	movs	r3, #1
 800e1e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e1e4:	693b      	ldr	r3, [r7, #16]
 800e1e6:	f383 8810 	msr	PRIMASK, r3
}
 800e1ea:	46c0      	nop			; (mov r8, r8)
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	689a      	ldr	r2, [r3, #8]
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	491b      	ldr	r1, [pc, #108]	; (800e264 <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 800e1f8:	400a      	ands	r2, r1
 800e1fa:	609a      	str	r2, [r3, #8]
 800e1fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e1fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e200:	697b      	ldr	r3, [r7, #20]
 800e202:	f383 8810 	msr	PRIMASK, r3
}
 800e206:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	4a17      	ldr	r2, [pc, #92]	; (800e268 <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 800e20c:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e20e:	f3ef 8310 	mrs	r3, PRIMASK
 800e212:	61bb      	str	r3, [r7, #24]
  return(result);
 800e214:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e216:	64bb      	str	r3, [r7, #72]	; 0x48
 800e218:	2301      	movs	r3, #1
 800e21a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e21c:	69fb      	ldr	r3, [r7, #28]
 800e21e:	f383 8810 	msr	PRIMASK, r3
}
 800e222:	46c0      	nop			; (mov r8, r8)
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	681a      	ldr	r2, [r3, #0]
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	2120      	movs	r1, #32
 800e230:	430a      	orrs	r2, r1
 800e232:	601a      	str	r2, [r3, #0]
 800e234:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e236:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e238:	6a3b      	ldr	r3, [r7, #32]
 800e23a:	f383 8810 	msr	PRIMASK, r3
}
 800e23e:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e240:	e007      	b.n	800e252 <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	699a      	ldr	r2, [r3, #24]
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	2108      	movs	r1, #8
 800e24e:	430a      	orrs	r2, r1
 800e250:	619a      	str	r2, [r3, #24]
}
 800e252:	46c0      	nop			; (mov r8, r8)
 800e254:	46bd      	mov	sp, r7
 800e256:	b01e      	add	sp, #120	; 0x78
 800e258:	bd80      	pop	{r7, pc}
 800e25a:	46c0      	nop			; (mov r8, r8)
 800e25c:	fffffeff 	.word	0xfffffeff
 800e260:	effffffe 	.word	0xeffffffe
 800e264:	efffffff 	.word	0xefffffff
 800e268:	0800db21 	.word	0x0800db21

0800e26c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b082      	sub	sp, #8
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e274:	46c0      	nop			; (mov r8, r8)
 800e276:	46bd      	mov	sp, r7
 800e278:	b002      	add	sp, #8
 800e27a:	bd80      	pop	{r7, pc}

0800e27c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b082      	sub	sp, #8
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e284:	46c0      	nop			; (mov r8, r8)
 800e286:	46bd      	mov	sp, r7
 800e288:	b002      	add	sp, #8
 800e28a:	bd80      	pop	{r7, pc}

0800e28c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e28c:	b580      	push	{r7, lr}
 800e28e:	b082      	sub	sp, #8
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e294:	46c0      	nop			; (mov r8, r8)
 800e296:	46bd      	mov	sp, r7
 800e298:	b002      	add	sp, #8
 800e29a:	bd80      	pop	{r7, pc}

0800e29c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b084      	sub	sp, #16
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	2284      	movs	r2, #132	; 0x84
 800e2a8:	5c9b      	ldrb	r3, [r3, r2]
 800e2aa:	2b01      	cmp	r3, #1
 800e2ac:	d101      	bne.n	800e2b2 <HAL_UARTEx_DisableFifoMode+0x16>
 800e2ae:	2302      	movs	r3, #2
 800e2b0:	e027      	b.n	800e302 <HAL_UARTEx_DisableFifoMode+0x66>
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	2284      	movs	r2, #132	; 0x84
 800e2b6:	2101      	movs	r1, #1
 800e2b8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	2288      	movs	r2, #136	; 0x88
 800e2be:	2124      	movs	r1, #36	; 0x24
 800e2c0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	681a      	ldr	r2, [r3, #0]
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	2101      	movs	r1, #1
 800e2d6:	438a      	bics	r2, r1
 800e2d8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	4a0b      	ldr	r2, [pc, #44]	; (800e30c <HAL_UARTEx_DisableFifoMode+0x70>)
 800e2de:	4013      	ands	r3, r2
 800e2e0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	68fa      	ldr	r2, [r7, #12]
 800e2ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	2288      	movs	r2, #136	; 0x88
 800e2f4:	2120      	movs	r1, #32
 800e2f6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	2284      	movs	r2, #132	; 0x84
 800e2fc:	2100      	movs	r1, #0
 800e2fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800e300:	2300      	movs	r3, #0
}
 800e302:	0018      	movs	r0, r3
 800e304:	46bd      	mov	sp, r7
 800e306:	b004      	add	sp, #16
 800e308:	bd80      	pop	{r7, pc}
 800e30a:	46c0      	nop			; (mov r8, r8)
 800e30c:	dfffffff 	.word	0xdfffffff

0800e310 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e310:	b580      	push	{r7, lr}
 800e312:	b084      	sub	sp, #16
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
 800e318:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	2284      	movs	r2, #132	; 0x84
 800e31e:	5c9b      	ldrb	r3, [r3, r2]
 800e320:	2b01      	cmp	r3, #1
 800e322:	d101      	bne.n	800e328 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e324:	2302      	movs	r3, #2
 800e326:	e02e      	b.n	800e386 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	2284      	movs	r2, #132	; 0x84
 800e32c:	2101      	movs	r1, #1
 800e32e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	2288      	movs	r2, #136	; 0x88
 800e334:	2124      	movs	r1, #36	; 0x24
 800e336:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	681a      	ldr	r2, [r3, #0]
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	2101      	movs	r1, #1
 800e34c:	438a      	bics	r2, r1
 800e34e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	689b      	ldr	r3, [r3, #8]
 800e356:	00db      	lsls	r3, r3, #3
 800e358:	08d9      	lsrs	r1, r3, #3
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	683a      	ldr	r2, [r7, #0]
 800e360:	430a      	orrs	r2, r1
 800e362:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	0018      	movs	r0, r3
 800e368:	f000 f854 	bl	800e414 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	68fa      	ldr	r2, [r7, #12]
 800e372:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	2288      	movs	r2, #136	; 0x88
 800e378:	2120      	movs	r1, #32
 800e37a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	2284      	movs	r2, #132	; 0x84
 800e380:	2100      	movs	r1, #0
 800e382:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800e384:	2300      	movs	r3, #0
}
 800e386:	0018      	movs	r0, r3
 800e388:	46bd      	mov	sp, r7
 800e38a:	b004      	add	sp, #16
 800e38c:	bd80      	pop	{r7, pc}
	...

0800e390 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e390:	b580      	push	{r7, lr}
 800e392:	b084      	sub	sp, #16
 800e394:	af00      	add	r7, sp, #0
 800e396:	6078      	str	r0, [r7, #4]
 800e398:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	2284      	movs	r2, #132	; 0x84
 800e39e:	5c9b      	ldrb	r3, [r3, r2]
 800e3a0:	2b01      	cmp	r3, #1
 800e3a2:	d101      	bne.n	800e3a8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e3a4:	2302      	movs	r3, #2
 800e3a6:	e02f      	b.n	800e408 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	2284      	movs	r2, #132	; 0x84
 800e3ac:	2101      	movs	r1, #1
 800e3ae:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	2288      	movs	r2, #136	; 0x88
 800e3b4:	2124      	movs	r1, #36	; 0x24
 800e3b6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	681a      	ldr	r2, [r3, #0]
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	2101      	movs	r1, #1
 800e3cc:	438a      	bics	r2, r1
 800e3ce:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	689b      	ldr	r3, [r3, #8]
 800e3d6:	4a0e      	ldr	r2, [pc, #56]	; (800e410 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800e3d8:	4013      	ands	r3, r2
 800e3da:	0019      	movs	r1, r3
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	683a      	ldr	r2, [r7, #0]
 800e3e2:	430a      	orrs	r2, r1
 800e3e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	0018      	movs	r0, r3
 800e3ea:	f000 f813 	bl	800e414 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	68fa      	ldr	r2, [r7, #12]
 800e3f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	2288      	movs	r2, #136	; 0x88
 800e3fa:	2120      	movs	r1, #32
 800e3fc:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	2284      	movs	r2, #132	; 0x84
 800e402:	2100      	movs	r1, #0
 800e404:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800e406:	2300      	movs	r3, #0
}
 800e408:	0018      	movs	r0, r3
 800e40a:	46bd      	mov	sp, r7
 800e40c:	b004      	add	sp, #16
 800e40e:	bd80      	pop	{r7, pc}
 800e410:	f1ffffff 	.word	0xf1ffffff

0800e414 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e414:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e416:	b085      	sub	sp, #20
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e420:	2b00      	cmp	r3, #0
 800e422:	d108      	bne.n	800e436 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	226a      	movs	r2, #106	; 0x6a
 800e428:	2101      	movs	r1, #1
 800e42a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	2268      	movs	r2, #104	; 0x68
 800e430:	2101      	movs	r1, #1
 800e432:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e434:	e043      	b.n	800e4be <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e436:	260f      	movs	r6, #15
 800e438:	19bb      	adds	r3, r7, r6
 800e43a:	2208      	movs	r2, #8
 800e43c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e43e:	200e      	movs	r0, #14
 800e440:	183b      	adds	r3, r7, r0
 800e442:	2208      	movs	r2, #8
 800e444:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	689b      	ldr	r3, [r3, #8]
 800e44c:	0e5b      	lsrs	r3, r3, #25
 800e44e:	b2da      	uxtb	r2, r3
 800e450:	240d      	movs	r4, #13
 800e452:	193b      	adds	r3, r7, r4
 800e454:	2107      	movs	r1, #7
 800e456:	400a      	ands	r2, r1
 800e458:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	689b      	ldr	r3, [r3, #8]
 800e460:	0f5b      	lsrs	r3, r3, #29
 800e462:	b2da      	uxtb	r2, r3
 800e464:	250c      	movs	r5, #12
 800e466:	197b      	adds	r3, r7, r5
 800e468:	2107      	movs	r1, #7
 800e46a:	400a      	ands	r2, r1
 800e46c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e46e:	183b      	adds	r3, r7, r0
 800e470:	781b      	ldrb	r3, [r3, #0]
 800e472:	197a      	adds	r2, r7, r5
 800e474:	7812      	ldrb	r2, [r2, #0]
 800e476:	4914      	ldr	r1, [pc, #80]	; (800e4c8 <UARTEx_SetNbDataToProcess+0xb4>)
 800e478:	5c8a      	ldrb	r2, [r1, r2]
 800e47a:	435a      	muls	r2, r3
 800e47c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800e47e:	197b      	adds	r3, r7, r5
 800e480:	781b      	ldrb	r3, [r3, #0]
 800e482:	4a12      	ldr	r2, [pc, #72]	; (800e4cc <UARTEx_SetNbDataToProcess+0xb8>)
 800e484:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e486:	0019      	movs	r1, r3
 800e488:	f7f1 feea 	bl	8000260 <__divsi3>
 800e48c:	0003      	movs	r3, r0
 800e48e:	b299      	uxth	r1, r3
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	226a      	movs	r2, #106	; 0x6a
 800e494:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e496:	19bb      	adds	r3, r7, r6
 800e498:	781b      	ldrb	r3, [r3, #0]
 800e49a:	193a      	adds	r2, r7, r4
 800e49c:	7812      	ldrb	r2, [r2, #0]
 800e49e:	490a      	ldr	r1, [pc, #40]	; (800e4c8 <UARTEx_SetNbDataToProcess+0xb4>)
 800e4a0:	5c8a      	ldrb	r2, [r1, r2]
 800e4a2:	435a      	muls	r2, r3
 800e4a4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800e4a6:	193b      	adds	r3, r7, r4
 800e4a8:	781b      	ldrb	r3, [r3, #0]
 800e4aa:	4a08      	ldr	r2, [pc, #32]	; (800e4cc <UARTEx_SetNbDataToProcess+0xb8>)
 800e4ac:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e4ae:	0019      	movs	r1, r3
 800e4b0:	f7f1 fed6 	bl	8000260 <__divsi3>
 800e4b4:	0003      	movs	r3, r0
 800e4b6:	b299      	uxth	r1, r3
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	2268      	movs	r2, #104	; 0x68
 800e4bc:	5299      	strh	r1, [r3, r2]
}
 800e4be:	46c0      	nop			; (mov r8, r8)
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	b005      	add	sp, #20
 800e4c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e4c6:	46c0      	nop			; (mov r8, r8)
 800e4c8:	08013038 	.word	0x08013038
 800e4cc:	08013040 	.word	0x08013040

0800e4d0 <atoi>:
 800e4d0:	b510      	push	{r4, lr}
 800e4d2:	220a      	movs	r2, #10
 800e4d4:	2100      	movs	r1, #0
 800e4d6:	f000 ffd9 	bl	800f48c <strtol>
 800e4da:	bd10      	pop	{r4, pc}

0800e4dc <gcvt>:
 800e4dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e4de:	001c      	movs	r4, r3
 800e4e0:	0015      	movs	r5, r2
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	b085      	sub	sp, #20
 800e4e8:	0006      	movs	r6, r0
 800e4ea:	000f      	movs	r7, r1
 800e4ec:	f7f1 ffba 	bl	8000464 <__aeabi_dcmplt>
 800e4f0:	0023      	movs	r3, r4
 800e4f2:	2800      	cmp	r0, #0
 800e4f4:	d003      	beq.n	800e4fe <gcvt+0x22>
 800e4f6:	232d      	movs	r3, #45	; 0x2d
 800e4f8:	3d01      	subs	r5, #1
 800e4fa:	7023      	strb	r3, [r4, #0]
 800e4fc:	1c63      	adds	r3, r4, #1
 800e4fe:	2200      	movs	r2, #0
 800e500:	4908      	ldr	r1, [pc, #32]	; (800e524 <gcvt+0x48>)
 800e502:	9203      	str	r2, [sp, #12]
 800e504:	3267      	adds	r2, #103	; 0x67
 800e506:	9202      	str	r2, [sp, #8]
 800e508:	9301      	str	r3, [sp, #4]
 800e50a:	9500      	str	r5, [sp, #0]
 800e50c:	003b      	movs	r3, r7
 800e50e:	0032      	movs	r2, r6
 800e510:	6808      	ldr	r0, [r1, #0]
 800e512:	f001 f849 	bl	800f5a8 <_gcvt>
 800e516:	1e43      	subs	r3, r0, #1
 800e518:	4198      	sbcs	r0, r3
 800e51a:	4240      	negs	r0, r0
 800e51c:	4004      	ands	r4, r0
 800e51e:	0020      	movs	r0, r4
 800e520:	b005      	add	sp, #20
 800e522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e524:	200000b4 	.word	0x200000b4

0800e528 <__errno>:
 800e528:	4b01      	ldr	r3, [pc, #4]	; (800e530 <__errno+0x8>)
 800e52a:	6818      	ldr	r0, [r3, #0]
 800e52c:	4770      	bx	lr
 800e52e:	46c0      	nop			; (mov r8, r8)
 800e530:	200000b4 	.word	0x200000b4

0800e534 <__libc_init_array>:
 800e534:	b570      	push	{r4, r5, r6, lr}
 800e536:	2600      	movs	r6, #0
 800e538:	4d0c      	ldr	r5, [pc, #48]	; (800e56c <__libc_init_array+0x38>)
 800e53a:	4c0d      	ldr	r4, [pc, #52]	; (800e570 <__libc_init_array+0x3c>)
 800e53c:	1b64      	subs	r4, r4, r5
 800e53e:	10a4      	asrs	r4, r4, #2
 800e540:	42a6      	cmp	r6, r4
 800e542:	d109      	bne.n	800e558 <__libc_init_array+0x24>
 800e544:	2600      	movs	r6, #0
 800e546:	f004 fa61 	bl	8012a0c <_init>
 800e54a:	4d0a      	ldr	r5, [pc, #40]	; (800e574 <__libc_init_array+0x40>)
 800e54c:	4c0a      	ldr	r4, [pc, #40]	; (800e578 <__libc_init_array+0x44>)
 800e54e:	1b64      	subs	r4, r4, r5
 800e550:	10a4      	asrs	r4, r4, #2
 800e552:	42a6      	cmp	r6, r4
 800e554:	d105      	bne.n	800e562 <__libc_init_array+0x2e>
 800e556:	bd70      	pop	{r4, r5, r6, pc}
 800e558:	00b3      	lsls	r3, r6, #2
 800e55a:	58eb      	ldr	r3, [r5, r3]
 800e55c:	4798      	blx	r3
 800e55e:	3601      	adds	r6, #1
 800e560:	e7ee      	b.n	800e540 <__libc_init_array+0xc>
 800e562:	00b3      	lsls	r3, r6, #2
 800e564:	58eb      	ldr	r3, [r5, r3]
 800e566:	4798      	blx	r3
 800e568:	3601      	adds	r6, #1
 800e56a:	e7f2      	b.n	800e552 <__libc_init_array+0x1e>
 800e56c:	080134e0 	.word	0x080134e0
 800e570:	080134e0 	.word	0x080134e0
 800e574:	080134e0 	.word	0x080134e0
 800e578:	080134e4 	.word	0x080134e4

0800e57c <memcpy>:
 800e57c:	2300      	movs	r3, #0
 800e57e:	b510      	push	{r4, lr}
 800e580:	429a      	cmp	r2, r3
 800e582:	d100      	bne.n	800e586 <memcpy+0xa>
 800e584:	bd10      	pop	{r4, pc}
 800e586:	5ccc      	ldrb	r4, [r1, r3]
 800e588:	54c4      	strb	r4, [r0, r3]
 800e58a:	3301      	adds	r3, #1
 800e58c:	e7f8      	b.n	800e580 <memcpy+0x4>

0800e58e <memset>:
 800e58e:	0003      	movs	r3, r0
 800e590:	1882      	adds	r2, r0, r2
 800e592:	4293      	cmp	r3, r2
 800e594:	d100      	bne.n	800e598 <memset+0xa>
 800e596:	4770      	bx	lr
 800e598:	7019      	strb	r1, [r3, #0]
 800e59a:	3301      	adds	r3, #1
 800e59c:	e7f9      	b.n	800e592 <memset+0x4>
	...

0800e5a0 <siprintf>:
 800e5a0:	b40e      	push	{r1, r2, r3}
 800e5a2:	b500      	push	{lr}
 800e5a4:	490b      	ldr	r1, [pc, #44]	; (800e5d4 <siprintf+0x34>)
 800e5a6:	b09c      	sub	sp, #112	; 0x70
 800e5a8:	ab1d      	add	r3, sp, #116	; 0x74
 800e5aa:	9002      	str	r0, [sp, #8]
 800e5ac:	9006      	str	r0, [sp, #24]
 800e5ae:	9107      	str	r1, [sp, #28]
 800e5b0:	9104      	str	r1, [sp, #16]
 800e5b2:	4809      	ldr	r0, [pc, #36]	; (800e5d8 <siprintf+0x38>)
 800e5b4:	4909      	ldr	r1, [pc, #36]	; (800e5dc <siprintf+0x3c>)
 800e5b6:	cb04      	ldmia	r3!, {r2}
 800e5b8:	9105      	str	r1, [sp, #20]
 800e5ba:	6800      	ldr	r0, [r0, #0]
 800e5bc:	a902      	add	r1, sp, #8
 800e5be:	9301      	str	r3, [sp, #4]
 800e5c0:	f002 fa82 	bl	8010ac8 <_svfiprintf_r>
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	9a02      	ldr	r2, [sp, #8]
 800e5c8:	7013      	strb	r3, [r2, #0]
 800e5ca:	b01c      	add	sp, #112	; 0x70
 800e5cc:	bc08      	pop	{r3}
 800e5ce:	b003      	add	sp, #12
 800e5d0:	4718      	bx	r3
 800e5d2:	46c0      	nop			; (mov r8, r8)
 800e5d4:	7fffffff 	.word	0x7fffffff
 800e5d8:	200000b4 	.word	0x200000b4
 800e5dc:	ffff0208 	.word	0xffff0208

0800e5e0 <strcat>:
 800e5e0:	0002      	movs	r2, r0
 800e5e2:	b510      	push	{r4, lr}
 800e5e4:	7813      	ldrb	r3, [r2, #0]
 800e5e6:	0014      	movs	r4, r2
 800e5e8:	3201      	adds	r2, #1
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d1fa      	bne.n	800e5e4 <strcat+0x4>
 800e5ee:	5cca      	ldrb	r2, [r1, r3]
 800e5f0:	54e2      	strb	r2, [r4, r3]
 800e5f2:	3301      	adds	r3, #1
 800e5f4:	2a00      	cmp	r2, #0
 800e5f6:	d1fa      	bne.n	800e5ee <strcat+0xe>
 800e5f8:	bd10      	pop	{r4, pc}

0800e5fa <strchr>:
 800e5fa:	b2c9      	uxtb	r1, r1
 800e5fc:	7803      	ldrb	r3, [r0, #0]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d004      	beq.n	800e60c <strchr+0x12>
 800e602:	428b      	cmp	r3, r1
 800e604:	d100      	bne.n	800e608 <strchr+0xe>
 800e606:	4770      	bx	lr
 800e608:	3001      	adds	r0, #1
 800e60a:	e7f7      	b.n	800e5fc <strchr+0x2>
 800e60c:	424b      	negs	r3, r1
 800e60e:	4159      	adcs	r1, r3
 800e610:	4249      	negs	r1, r1
 800e612:	4008      	ands	r0, r1
 800e614:	e7f7      	b.n	800e606 <strchr+0xc>

0800e616 <strncpy>:
 800e616:	0003      	movs	r3, r0
 800e618:	b530      	push	{r4, r5, lr}
 800e61a:	001d      	movs	r5, r3
 800e61c:	2a00      	cmp	r2, #0
 800e61e:	d006      	beq.n	800e62e <strncpy+0x18>
 800e620:	780c      	ldrb	r4, [r1, #0]
 800e622:	3a01      	subs	r2, #1
 800e624:	3301      	adds	r3, #1
 800e626:	702c      	strb	r4, [r5, #0]
 800e628:	3101      	adds	r1, #1
 800e62a:	2c00      	cmp	r4, #0
 800e62c:	d1f5      	bne.n	800e61a <strncpy+0x4>
 800e62e:	2100      	movs	r1, #0
 800e630:	189a      	adds	r2, r3, r2
 800e632:	4293      	cmp	r3, r2
 800e634:	d100      	bne.n	800e638 <strncpy+0x22>
 800e636:	bd30      	pop	{r4, r5, pc}
 800e638:	7019      	strb	r1, [r3, #0]
 800e63a:	3301      	adds	r3, #1
 800e63c:	e7f9      	b.n	800e632 <strncpy+0x1c>

0800e63e <strstr>:
 800e63e:	780a      	ldrb	r2, [r1, #0]
 800e640:	b530      	push	{r4, r5, lr}
 800e642:	2a00      	cmp	r2, #0
 800e644:	d10c      	bne.n	800e660 <strstr+0x22>
 800e646:	bd30      	pop	{r4, r5, pc}
 800e648:	429a      	cmp	r2, r3
 800e64a:	d108      	bne.n	800e65e <strstr+0x20>
 800e64c:	2301      	movs	r3, #1
 800e64e:	5ccc      	ldrb	r4, [r1, r3]
 800e650:	2c00      	cmp	r4, #0
 800e652:	d0f8      	beq.n	800e646 <strstr+0x8>
 800e654:	5cc5      	ldrb	r5, [r0, r3]
 800e656:	42a5      	cmp	r5, r4
 800e658:	d101      	bne.n	800e65e <strstr+0x20>
 800e65a:	3301      	adds	r3, #1
 800e65c:	e7f7      	b.n	800e64e <strstr+0x10>
 800e65e:	3001      	adds	r0, #1
 800e660:	7803      	ldrb	r3, [r0, #0]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d1f0      	bne.n	800e648 <strstr+0xa>
 800e666:	0018      	movs	r0, r3
 800e668:	e7ed      	b.n	800e646 <strstr+0x8>
	...

0800e66c <sulp>:
 800e66c:	b570      	push	{r4, r5, r6, lr}
 800e66e:	0016      	movs	r6, r2
 800e670:	000d      	movs	r5, r1
 800e672:	f001 ff73 	bl	801055c <__ulp>
 800e676:	2e00      	cmp	r6, #0
 800e678:	d00d      	beq.n	800e696 <sulp+0x2a>
 800e67a:	236b      	movs	r3, #107	; 0x6b
 800e67c:	006a      	lsls	r2, r5, #1
 800e67e:	0d52      	lsrs	r2, r2, #21
 800e680:	1a9b      	subs	r3, r3, r2
 800e682:	2b00      	cmp	r3, #0
 800e684:	dd07      	ble.n	800e696 <sulp+0x2a>
 800e686:	2400      	movs	r4, #0
 800e688:	4a03      	ldr	r2, [pc, #12]	; (800e698 <sulp+0x2c>)
 800e68a:	051b      	lsls	r3, r3, #20
 800e68c:	189d      	adds	r5, r3, r2
 800e68e:	002b      	movs	r3, r5
 800e690:	0022      	movs	r2, r4
 800e692:	f7f3 fdcd 	bl	8002230 <__aeabi_dmul>
 800e696:	bd70      	pop	{r4, r5, r6, pc}
 800e698:	3ff00000 	.word	0x3ff00000

0800e69c <_strtod_l>:
 800e69c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e69e:	001d      	movs	r5, r3
 800e6a0:	2300      	movs	r3, #0
 800e6a2:	b0a5      	sub	sp, #148	; 0x94
 800e6a4:	9320      	str	r3, [sp, #128]	; 0x80
 800e6a6:	4bac      	ldr	r3, [pc, #688]	; (800e958 <_strtod_l+0x2bc>)
 800e6a8:	9005      	str	r0, [sp, #20]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	9108      	str	r1, [sp, #32]
 800e6ae:	0018      	movs	r0, r3
 800e6b0:	9307      	str	r3, [sp, #28]
 800e6b2:	921b      	str	r2, [sp, #108]	; 0x6c
 800e6b4:	f7f1 fd2e 	bl	8000114 <strlen>
 800e6b8:	2600      	movs	r6, #0
 800e6ba:	0004      	movs	r4, r0
 800e6bc:	2700      	movs	r7, #0
 800e6be:	9b08      	ldr	r3, [sp, #32]
 800e6c0:	931f      	str	r3, [sp, #124]	; 0x7c
 800e6c2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800e6c4:	7813      	ldrb	r3, [r2, #0]
 800e6c6:	2b2b      	cmp	r3, #43	; 0x2b
 800e6c8:	d058      	beq.n	800e77c <_strtod_l+0xe0>
 800e6ca:	d844      	bhi.n	800e756 <_strtod_l+0xba>
 800e6cc:	2b0d      	cmp	r3, #13
 800e6ce:	d83d      	bhi.n	800e74c <_strtod_l+0xb0>
 800e6d0:	2b08      	cmp	r3, #8
 800e6d2:	d83d      	bhi.n	800e750 <_strtod_l+0xb4>
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d047      	beq.n	800e768 <_strtod_l+0xcc>
 800e6d8:	2300      	movs	r3, #0
 800e6da:	930e      	str	r3, [sp, #56]	; 0x38
 800e6dc:	2200      	movs	r2, #0
 800e6de:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e6e0:	920a      	str	r2, [sp, #40]	; 0x28
 800e6e2:	9306      	str	r3, [sp, #24]
 800e6e4:	781b      	ldrb	r3, [r3, #0]
 800e6e6:	2b30      	cmp	r3, #48	; 0x30
 800e6e8:	d000      	beq.n	800e6ec <_strtod_l+0x50>
 800e6ea:	e07f      	b.n	800e7ec <_strtod_l+0x150>
 800e6ec:	9b06      	ldr	r3, [sp, #24]
 800e6ee:	3220      	adds	r2, #32
 800e6f0:	785b      	ldrb	r3, [r3, #1]
 800e6f2:	4393      	bics	r3, r2
 800e6f4:	2b58      	cmp	r3, #88	; 0x58
 800e6f6:	d000      	beq.n	800e6fa <_strtod_l+0x5e>
 800e6f8:	e06e      	b.n	800e7d8 <_strtod_l+0x13c>
 800e6fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e6fc:	9502      	str	r5, [sp, #8]
 800e6fe:	9301      	str	r3, [sp, #4]
 800e700:	ab20      	add	r3, sp, #128	; 0x80
 800e702:	9300      	str	r3, [sp, #0]
 800e704:	4a95      	ldr	r2, [pc, #596]	; (800e95c <_strtod_l+0x2c0>)
 800e706:	ab21      	add	r3, sp, #132	; 0x84
 800e708:	9805      	ldr	r0, [sp, #20]
 800e70a:	a91f      	add	r1, sp, #124	; 0x7c
 800e70c:	f001 f886 	bl	800f81c <__gethex>
 800e710:	2307      	movs	r3, #7
 800e712:	0005      	movs	r5, r0
 800e714:	0004      	movs	r4, r0
 800e716:	401d      	ands	r5, r3
 800e718:	4218      	tst	r0, r3
 800e71a:	d006      	beq.n	800e72a <_strtod_l+0x8e>
 800e71c:	2d06      	cmp	r5, #6
 800e71e:	d12f      	bne.n	800e780 <_strtod_l+0xe4>
 800e720:	9b06      	ldr	r3, [sp, #24]
 800e722:	3301      	adds	r3, #1
 800e724:	931f      	str	r3, [sp, #124]	; 0x7c
 800e726:	2300      	movs	r3, #0
 800e728:	930e      	str	r3, [sp, #56]	; 0x38
 800e72a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d002      	beq.n	800e736 <_strtod_l+0x9a>
 800e730:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e732:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800e734:	601a      	str	r2, [r3, #0]
 800e736:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d01c      	beq.n	800e776 <_strtod_l+0xda>
 800e73c:	2380      	movs	r3, #128	; 0x80
 800e73e:	0032      	movs	r2, r6
 800e740:	061b      	lsls	r3, r3, #24
 800e742:	18fb      	adds	r3, r7, r3
 800e744:	0010      	movs	r0, r2
 800e746:	0019      	movs	r1, r3
 800e748:	b025      	add	sp, #148	; 0x94
 800e74a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e74c:	2b20      	cmp	r3, #32
 800e74e:	d1c3      	bne.n	800e6d8 <_strtod_l+0x3c>
 800e750:	3201      	adds	r2, #1
 800e752:	921f      	str	r2, [sp, #124]	; 0x7c
 800e754:	e7b5      	b.n	800e6c2 <_strtod_l+0x26>
 800e756:	2b2d      	cmp	r3, #45	; 0x2d
 800e758:	d1be      	bne.n	800e6d8 <_strtod_l+0x3c>
 800e75a:	3b2c      	subs	r3, #44	; 0x2c
 800e75c:	930e      	str	r3, [sp, #56]	; 0x38
 800e75e:	1c53      	adds	r3, r2, #1
 800e760:	931f      	str	r3, [sp, #124]	; 0x7c
 800e762:	7853      	ldrb	r3, [r2, #1]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d1b9      	bne.n	800e6dc <_strtod_l+0x40>
 800e768:	9b08      	ldr	r3, [sp, #32]
 800e76a:	931f      	str	r3, [sp, #124]	; 0x7c
 800e76c:	2300      	movs	r3, #0
 800e76e:	930e      	str	r3, [sp, #56]	; 0x38
 800e770:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e772:	2b00      	cmp	r3, #0
 800e774:	d1dc      	bne.n	800e730 <_strtod_l+0x94>
 800e776:	0032      	movs	r2, r6
 800e778:	003b      	movs	r3, r7
 800e77a:	e7e3      	b.n	800e744 <_strtod_l+0xa8>
 800e77c:	2300      	movs	r3, #0
 800e77e:	e7ed      	b.n	800e75c <_strtod_l+0xc0>
 800e780:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e782:	2a00      	cmp	r2, #0
 800e784:	d007      	beq.n	800e796 <_strtod_l+0xfa>
 800e786:	2135      	movs	r1, #53	; 0x35
 800e788:	a822      	add	r0, sp, #136	; 0x88
 800e78a:	f002 f803 	bl	8010794 <__copybits>
 800e78e:	9920      	ldr	r1, [sp, #128]	; 0x80
 800e790:	9805      	ldr	r0, [sp, #20]
 800e792:	f001 fba3 	bl	800fedc <_Bfree>
 800e796:	1e68      	subs	r0, r5, #1
 800e798:	2804      	cmp	r0, #4
 800e79a:	d806      	bhi.n	800e7aa <_strtod_l+0x10e>
 800e79c:	f7f1 fcc2 	bl	8000124 <__gnu_thumb1_case_uqi>
 800e7a0:	1816030b 	.word	0x1816030b
 800e7a4:	0b          	.byte	0x0b
 800e7a5:	00          	.byte	0x00
 800e7a6:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800e7a8:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 800e7aa:	0723      	lsls	r3, r4, #28
 800e7ac:	d5bd      	bpl.n	800e72a <_strtod_l+0x8e>
 800e7ae:	2380      	movs	r3, #128	; 0x80
 800e7b0:	061b      	lsls	r3, r3, #24
 800e7b2:	431f      	orrs	r7, r3
 800e7b4:	e7b9      	b.n	800e72a <_strtod_l+0x8e>
 800e7b6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e7b8:	4a69      	ldr	r2, [pc, #420]	; (800e960 <_strtod_l+0x2c4>)
 800e7ba:	496a      	ldr	r1, [pc, #424]	; (800e964 <_strtod_l+0x2c8>)
 800e7bc:	401a      	ands	r2, r3
 800e7be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e7c0:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800e7c2:	185b      	adds	r3, r3, r1
 800e7c4:	051b      	lsls	r3, r3, #20
 800e7c6:	431a      	orrs	r2, r3
 800e7c8:	0017      	movs	r7, r2
 800e7ca:	e7ee      	b.n	800e7aa <_strtod_l+0x10e>
 800e7cc:	4f66      	ldr	r7, [pc, #408]	; (800e968 <_strtod_l+0x2cc>)
 800e7ce:	e7ec      	b.n	800e7aa <_strtod_l+0x10e>
 800e7d0:	2601      	movs	r6, #1
 800e7d2:	4f66      	ldr	r7, [pc, #408]	; (800e96c <_strtod_l+0x2d0>)
 800e7d4:	4276      	negs	r6, r6
 800e7d6:	e7e8      	b.n	800e7aa <_strtod_l+0x10e>
 800e7d8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e7da:	1c5a      	adds	r2, r3, #1
 800e7dc:	921f      	str	r2, [sp, #124]	; 0x7c
 800e7de:	785b      	ldrb	r3, [r3, #1]
 800e7e0:	2b30      	cmp	r3, #48	; 0x30
 800e7e2:	d0f9      	beq.n	800e7d8 <_strtod_l+0x13c>
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d0a0      	beq.n	800e72a <_strtod_l+0x8e>
 800e7e8:	2301      	movs	r3, #1
 800e7ea:	930a      	str	r3, [sp, #40]	; 0x28
 800e7ec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e7ee:	220a      	movs	r2, #10
 800e7f0:	9310      	str	r3, [sp, #64]	; 0x40
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	930f      	str	r3, [sp, #60]	; 0x3c
 800e7f6:	930b      	str	r3, [sp, #44]	; 0x2c
 800e7f8:	9309      	str	r3, [sp, #36]	; 0x24
 800e7fa:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800e7fc:	7805      	ldrb	r5, [r0, #0]
 800e7fe:	002b      	movs	r3, r5
 800e800:	3b30      	subs	r3, #48	; 0x30
 800e802:	b2d9      	uxtb	r1, r3
 800e804:	2909      	cmp	r1, #9
 800e806:	d927      	bls.n	800e858 <_strtod_l+0x1bc>
 800e808:	0022      	movs	r2, r4
 800e80a:	9907      	ldr	r1, [sp, #28]
 800e80c:	f002 fc02 	bl	8011014 <strncmp>
 800e810:	2800      	cmp	r0, #0
 800e812:	d033      	beq.n	800e87c <_strtod_l+0x1e0>
 800e814:	2000      	movs	r0, #0
 800e816:	002b      	movs	r3, r5
 800e818:	4684      	mov	ip, r0
 800e81a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e81c:	900c      	str	r0, [sp, #48]	; 0x30
 800e81e:	9206      	str	r2, [sp, #24]
 800e820:	2220      	movs	r2, #32
 800e822:	0019      	movs	r1, r3
 800e824:	4391      	bics	r1, r2
 800e826:	000a      	movs	r2, r1
 800e828:	2100      	movs	r1, #0
 800e82a:	9107      	str	r1, [sp, #28]
 800e82c:	2a45      	cmp	r2, #69	; 0x45
 800e82e:	d000      	beq.n	800e832 <_strtod_l+0x196>
 800e830:	e0c5      	b.n	800e9be <_strtod_l+0x322>
 800e832:	9b06      	ldr	r3, [sp, #24]
 800e834:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e836:	4303      	orrs	r3, r0
 800e838:	4313      	orrs	r3, r2
 800e83a:	428b      	cmp	r3, r1
 800e83c:	d094      	beq.n	800e768 <_strtod_l+0xcc>
 800e83e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e840:	9308      	str	r3, [sp, #32]
 800e842:	3301      	adds	r3, #1
 800e844:	931f      	str	r3, [sp, #124]	; 0x7c
 800e846:	9b08      	ldr	r3, [sp, #32]
 800e848:	785b      	ldrb	r3, [r3, #1]
 800e84a:	2b2b      	cmp	r3, #43	; 0x2b
 800e84c:	d076      	beq.n	800e93c <_strtod_l+0x2a0>
 800e84e:	000c      	movs	r4, r1
 800e850:	2b2d      	cmp	r3, #45	; 0x2d
 800e852:	d179      	bne.n	800e948 <_strtod_l+0x2ac>
 800e854:	2401      	movs	r4, #1
 800e856:	e072      	b.n	800e93e <_strtod_l+0x2a2>
 800e858:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e85a:	2908      	cmp	r1, #8
 800e85c:	dc09      	bgt.n	800e872 <_strtod_l+0x1d6>
 800e85e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e860:	4351      	muls	r1, r2
 800e862:	185b      	adds	r3, r3, r1
 800e864:	930b      	str	r3, [sp, #44]	; 0x2c
 800e866:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e868:	3001      	adds	r0, #1
 800e86a:	3301      	adds	r3, #1
 800e86c:	9309      	str	r3, [sp, #36]	; 0x24
 800e86e:	901f      	str	r0, [sp, #124]	; 0x7c
 800e870:	e7c3      	b.n	800e7fa <_strtod_l+0x15e>
 800e872:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e874:	4351      	muls	r1, r2
 800e876:	185b      	adds	r3, r3, r1
 800e878:	930f      	str	r3, [sp, #60]	; 0x3c
 800e87a:	e7f4      	b.n	800e866 <_strtod_l+0x1ca>
 800e87c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e87e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e880:	191c      	adds	r4, r3, r4
 800e882:	941f      	str	r4, [sp, #124]	; 0x7c
 800e884:	7823      	ldrb	r3, [r4, #0]
 800e886:	2a00      	cmp	r2, #0
 800e888:	d039      	beq.n	800e8fe <_strtod_l+0x262>
 800e88a:	900c      	str	r0, [sp, #48]	; 0x30
 800e88c:	9206      	str	r2, [sp, #24]
 800e88e:	001a      	movs	r2, r3
 800e890:	3a30      	subs	r2, #48	; 0x30
 800e892:	2a09      	cmp	r2, #9
 800e894:	d912      	bls.n	800e8bc <_strtod_l+0x220>
 800e896:	2201      	movs	r2, #1
 800e898:	4694      	mov	ip, r2
 800e89a:	e7c1      	b.n	800e820 <_strtod_l+0x184>
 800e89c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e89e:	3001      	adds	r0, #1
 800e8a0:	1c5a      	adds	r2, r3, #1
 800e8a2:	921f      	str	r2, [sp, #124]	; 0x7c
 800e8a4:	785b      	ldrb	r3, [r3, #1]
 800e8a6:	2b30      	cmp	r3, #48	; 0x30
 800e8a8:	d0f8      	beq.n	800e89c <_strtod_l+0x200>
 800e8aa:	001a      	movs	r2, r3
 800e8ac:	3a31      	subs	r2, #49	; 0x31
 800e8ae:	2a08      	cmp	r2, #8
 800e8b0:	d83f      	bhi.n	800e932 <_strtod_l+0x296>
 800e8b2:	900c      	str	r0, [sp, #48]	; 0x30
 800e8b4:	2000      	movs	r0, #0
 800e8b6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800e8b8:	9006      	str	r0, [sp, #24]
 800e8ba:	9210      	str	r2, [sp, #64]	; 0x40
 800e8bc:	001a      	movs	r2, r3
 800e8be:	1c41      	adds	r1, r0, #1
 800e8c0:	3a30      	subs	r2, #48	; 0x30
 800e8c2:	2b30      	cmp	r3, #48	; 0x30
 800e8c4:	d015      	beq.n	800e8f2 <_strtod_l+0x256>
 800e8c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e8c8:	185b      	adds	r3, r3, r1
 800e8ca:	210a      	movs	r1, #10
 800e8cc:	930c      	str	r3, [sp, #48]	; 0x30
 800e8ce:	9b06      	ldr	r3, [sp, #24]
 800e8d0:	18c4      	adds	r4, r0, r3
 800e8d2:	42a3      	cmp	r3, r4
 800e8d4:	d115      	bne.n	800e902 <_strtod_l+0x266>
 800e8d6:	9906      	ldr	r1, [sp, #24]
 800e8d8:	9b06      	ldr	r3, [sp, #24]
 800e8da:	3101      	adds	r1, #1
 800e8dc:	1809      	adds	r1, r1, r0
 800e8de:	181b      	adds	r3, r3, r0
 800e8e0:	9106      	str	r1, [sp, #24]
 800e8e2:	2b08      	cmp	r3, #8
 800e8e4:	dc1b      	bgt.n	800e91e <_strtod_l+0x282>
 800e8e6:	230a      	movs	r3, #10
 800e8e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e8ea:	434b      	muls	r3, r1
 800e8ec:	2100      	movs	r1, #0
 800e8ee:	18d3      	adds	r3, r2, r3
 800e8f0:	930b      	str	r3, [sp, #44]	; 0x2c
 800e8f2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e8f4:	0008      	movs	r0, r1
 800e8f6:	1c5a      	adds	r2, r3, #1
 800e8f8:	921f      	str	r2, [sp, #124]	; 0x7c
 800e8fa:	785b      	ldrb	r3, [r3, #1]
 800e8fc:	e7c7      	b.n	800e88e <_strtod_l+0x1f2>
 800e8fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e900:	e7d1      	b.n	800e8a6 <_strtod_l+0x20a>
 800e902:	2b08      	cmp	r3, #8
 800e904:	dc04      	bgt.n	800e910 <_strtod_l+0x274>
 800e906:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800e908:	434d      	muls	r5, r1
 800e90a:	950b      	str	r5, [sp, #44]	; 0x2c
 800e90c:	3301      	adds	r3, #1
 800e90e:	e7e0      	b.n	800e8d2 <_strtod_l+0x236>
 800e910:	1c5d      	adds	r5, r3, #1
 800e912:	2d10      	cmp	r5, #16
 800e914:	dcfa      	bgt.n	800e90c <_strtod_l+0x270>
 800e916:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e918:	434d      	muls	r5, r1
 800e91a:	950f      	str	r5, [sp, #60]	; 0x3c
 800e91c:	e7f6      	b.n	800e90c <_strtod_l+0x270>
 800e91e:	9b06      	ldr	r3, [sp, #24]
 800e920:	2100      	movs	r1, #0
 800e922:	2b10      	cmp	r3, #16
 800e924:	dce5      	bgt.n	800e8f2 <_strtod_l+0x256>
 800e926:	230a      	movs	r3, #10
 800e928:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800e92a:	4343      	muls	r3, r0
 800e92c:	18d3      	adds	r3, r2, r3
 800e92e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e930:	e7df      	b.n	800e8f2 <_strtod_l+0x256>
 800e932:	2200      	movs	r2, #0
 800e934:	920c      	str	r2, [sp, #48]	; 0x30
 800e936:	9206      	str	r2, [sp, #24]
 800e938:	3201      	adds	r2, #1
 800e93a:	e7ad      	b.n	800e898 <_strtod_l+0x1fc>
 800e93c:	2400      	movs	r4, #0
 800e93e:	9b08      	ldr	r3, [sp, #32]
 800e940:	3302      	adds	r3, #2
 800e942:	931f      	str	r3, [sp, #124]	; 0x7c
 800e944:	9b08      	ldr	r3, [sp, #32]
 800e946:	789b      	ldrb	r3, [r3, #2]
 800e948:	001a      	movs	r2, r3
 800e94a:	3a30      	subs	r2, #48	; 0x30
 800e94c:	2a09      	cmp	r2, #9
 800e94e:	d913      	bls.n	800e978 <_strtod_l+0x2dc>
 800e950:	9a08      	ldr	r2, [sp, #32]
 800e952:	921f      	str	r2, [sp, #124]	; 0x7c
 800e954:	2200      	movs	r2, #0
 800e956:	e031      	b.n	800e9bc <_strtod_l+0x320>
 800e958:	08013220 	.word	0x08013220
 800e95c:	08013054 	.word	0x08013054
 800e960:	ffefffff 	.word	0xffefffff
 800e964:	00000433 	.word	0x00000433
 800e968:	7ff00000 	.word	0x7ff00000
 800e96c:	7fffffff 	.word	0x7fffffff
 800e970:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e972:	1c5a      	adds	r2, r3, #1
 800e974:	921f      	str	r2, [sp, #124]	; 0x7c
 800e976:	785b      	ldrb	r3, [r3, #1]
 800e978:	2b30      	cmp	r3, #48	; 0x30
 800e97a:	d0f9      	beq.n	800e970 <_strtod_l+0x2d4>
 800e97c:	2200      	movs	r2, #0
 800e97e:	9207      	str	r2, [sp, #28]
 800e980:	001a      	movs	r2, r3
 800e982:	3a31      	subs	r2, #49	; 0x31
 800e984:	2a08      	cmp	r2, #8
 800e986:	d81a      	bhi.n	800e9be <_strtod_l+0x322>
 800e988:	3b30      	subs	r3, #48	; 0x30
 800e98a:	001a      	movs	r2, r3
 800e98c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e98e:	9307      	str	r3, [sp, #28]
 800e990:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e992:	1c59      	adds	r1, r3, #1
 800e994:	911f      	str	r1, [sp, #124]	; 0x7c
 800e996:	785b      	ldrb	r3, [r3, #1]
 800e998:	001d      	movs	r5, r3
 800e99a:	3d30      	subs	r5, #48	; 0x30
 800e99c:	2d09      	cmp	r5, #9
 800e99e:	d939      	bls.n	800ea14 <_strtod_l+0x378>
 800e9a0:	9d07      	ldr	r5, [sp, #28]
 800e9a2:	1b49      	subs	r1, r1, r5
 800e9a4:	4db0      	ldr	r5, [pc, #704]	; (800ec68 <_strtod_l+0x5cc>)
 800e9a6:	9507      	str	r5, [sp, #28]
 800e9a8:	2908      	cmp	r1, #8
 800e9aa:	dc03      	bgt.n	800e9b4 <_strtod_l+0x318>
 800e9ac:	9207      	str	r2, [sp, #28]
 800e9ae:	42aa      	cmp	r2, r5
 800e9b0:	dd00      	ble.n	800e9b4 <_strtod_l+0x318>
 800e9b2:	9507      	str	r5, [sp, #28]
 800e9b4:	2c00      	cmp	r4, #0
 800e9b6:	d002      	beq.n	800e9be <_strtod_l+0x322>
 800e9b8:	9a07      	ldr	r2, [sp, #28]
 800e9ba:	4252      	negs	r2, r2
 800e9bc:	9207      	str	r2, [sp, #28]
 800e9be:	9a06      	ldr	r2, [sp, #24]
 800e9c0:	2a00      	cmp	r2, #0
 800e9c2:	d14b      	bne.n	800ea5c <_strtod_l+0x3c0>
 800e9c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e9c6:	4310      	orrs	r0, r2
 800e9c8:	d000      	beq.n	800e9cc <_strtod_l+0x330>
 800e9ca:	e6ae      	b.n	800e72a <_strtod_l+0x8e>
 800e9cc:	4662      	mov	r2, ip
 800e9ce:	2a00      	cmp	r2, #0
 800e9d0:	d000      	beq.n	800e9d4 <_strtod_l+0x338>
 800e9d2:	e6c9      	b.n	800e768 <_strtod_l+0xcc>
 800e9d4:	2b69      	cmp	r3, #105	; 0x69
 800e9d6:	d025      	beq.n	800ea24 <_strtod_l+0x388>
 800e9d8:	dc21      	bgt.n	800ea1e <_strtod_l+0x382>
 800e9da:	2b49      	cmp	r3, #73	; 0x49
 800e9dc:	d022      	beq.n	800ea24 <_strtod_l+0x388>
 800e9de:	2b4e      	cmp	r3, #78	; 0x4e
 800e9e0:	d000      	beq.n	800e9e4 <_strtod_l+0x348>
 800e9e2:	e6c1      	b.n	800e768 <_strtod_l+0xcc>
 800e9e4:	49a1      	ldr	r1, [pc, #644]	; (800ec6c <_strtod_l+0x5d0>)
 800e9e6:	a81f      	add	r0, sp, #124	; 0x7c
 800e9e8:	f001 f966 	bl	800fcb8 <__match>
 800e9ec:	2800      	cmp	r0, #0
 800e9ee:	d100      	bne.n	800e9f2 <_strtod_l+0x356>
 800e9f0:	e6ba      	b.n	800e768 <_strtod_l+0xcc>
 800e9f2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e9f4:	781b      	ldrb	r3, [r3, #0]
 800e9f6:	2b28      	cmp	r3, #40	; 0x28
 800e9f8:	d12a      	bne.n	800ea50 <_strtod_l+0x3b4>
 800e9fa:	499d      	ldr	r1, [pc, #628]	; (800ec70 <_strtod_l+0x5d4>)
 800e9fc:	aa22      	add	r2, sp, #136	; 0x88
 800e9fe:	a81f      	add	r0, sp, #124	; 0x7c
 800ea00:	f001 f96e 	bl	800fce0 <__hexnan>
 800ea04:	2805      	cmp	r0, #5
 800ea06:	d123      	bne.n	800ea50 <_strtod_l+0x3b4>
 800ea08:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ea0a:	4a9a      	ldr	r2, [pc, #616]	; (800ec74 <_strtod_l+0x5d8>)
 800ea0c:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800ea0e:	431a      	orrs	r2, r3
 800ea10:	0017      	movs	r7, r2
 800ea12:	e68a      	b.n	800e72a <_strtod_l+0x8e>
 800ea14:	210a      	movs	r1, #10
 800ea16:	434a      	muls	r2, r1
 800ea18:	18d2      	adds	r2, r2, r3
 800ea1a:	3a30      	subs	r2, #48	; 0x30
 800ea1c:	e7b8      	b.n	800e990 <_strtod_l+0x2f4>
 800ea1e:	2b6e      	cmp	r3, #110	; 0x6e
 800ea20:	d0e0      	beq.n	800e9e4 <_strtod_l+0x348>
 800ea22:	e6a1      	b.n	800e768 <_strtod_l+0xcc>
 800ea24:	4994      	ldr	r1, [pc, #592]	; (800ec78 <_strtod_l+0x5dc>)
 800ea26:	a81f      	add	r0, sp, #124	; 0x7c
 800ea28:	f001 f946 	bl	800fcb8 <__match>
 800ea2c:	2800      	cmp	r0, #0
 800ea2e:	d100      	bne.n	800ea32 <_strtod_l+0x396>
 800ea30:	e69a      	b.n	800e768 <_strtod_l+0xcc>
 800ea32:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ea34:	4991      	ldr	r1, [pc, #580]	; (800ec7c <_strtod_l+0x5e0>)
 800ea36:	3b01      	subs	r3, #1
 800ea38:	a81f      	add	r0, sp, #124	; 0x7c
 800ea3a:	931f      	str	r3, [sp, #124]	; 0x7c
 800ea3c:	f001 f93c 	bl	800fcb8 <__match>
 800ea40:	2800      	cmp	r0, #0
 800ea42:	d102      	bne.n	800ea4a <_strtod_l+0x3ae>
 800ea44:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ea46:	3301      	adds	r3, #1
 800ea48:	931f      	str	r3, [sp, #124]	; 0x7c
 800ea4a:	2600      	movs	r6, #0
 800ea4c:	4f89      	ldr	r7, [pc, #548]	; (800ec74 <_strtod_l+0x5d8>)
 800ea4e:	e66c      	b.n	800e72a <_strtod_l+0x8e>
 800ea50:	488b      	ldr	r0, [pc, #556]	; (800ec80 <_strtod_l+0x5e4>)
 800ea52:	f002 fabb 	bl	8010fcc <nan>
 800ea56:	0006      	movs	r6, r0
 800ea58:	000f      	movs	r7, r1
 800ea5a:	e666      	b.n	800e72a <_strtod_l+0x8e>
 800ea5c:	9b07      	ldr	r3, [sp, #28]
 800ea5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ea60:	1a9b      	subs	r3, r3, r2
 800ea62:	930a      	str	r3, [sp, #40]	; 0x28
 800ea64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d101      	bne.n	800ea6e <_strtod_l+0x3d2>
 800ea6a:	9b06      	ldr	r3, [sp, #24]
 800ea6c:	9309      	str	r3, [sp, #36]	; 0x24
 800ea6e:	9c06      	ldr	r4, [sp, #24]
 800ea70:	2c10      	cmp	r4, #16
 800ea72:	dd00      	ble.n	800ea76 <_strtod_l+0x3da>
 800ea74:	2410      	movs	r4, #16
 800ea76:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ea78:	f7f4 fa5c 	bl	8002f34 <__aeabi_ui2d>
 800ea7c:	9b06      	ldr	r3, [sp, #24]
 800ea7e:	0006      	movs	r6, r0
 800ea80:	000f      	movs	r7, r1
 800ea82:	2b09      	cmp	r3, #9
 800ea84:	dd15      	ble.n	800eab2 <_strtod_l+0x416>
 800ea86:	0022      	movs	r2, r4
 800ea88:	4b7e      	ldr	r3, [pc, #504]	; (800ec84 <_strtod_l+0x5e8>)
 800ea8a:	3a09      	subs	r2, #9
 800ea8c:	00d2      	lsls	r2, r2, #3
 800ea8e:	189b      	adds	r3, r3, r2
 800ea90:	681a      	ldr	r2, [r3, #0]
 800ea92:	685b      	ldr	r3, [r3, #4]
 800ea94:	f7f3 fbcc 	bl	8002230 <__aeabi_dmul>
 800ea98:	0006      	movs	r6, r0
 800ea9a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800ea9c:	000f      	movs	r7, r1
 800ea9e:	f7f4 fa49 	bl	8002f34 <__aeabi_ui2d>
 800eaa2:	0002      	movs	r2, r0
 800eaa4:	000b      	movs	r3, r1
 800eaa6:	0030      	movs	r0, r6
 800eaa8:	0039      	movs	r1, r7
 800eaaa:	f7f2 fc83 	bl	80013b4 <__aeabi_dadd>
 800eaae:	0006      	movs	r6, r0
 800eab0:	000f      	movs	r7, r1
 800eab2:	9b06      	ldr	r3, [sp, #24]
 800eab4:	2b0f      	cmp	r3, #15
 800eab6:	dc39      	bgt.n	800eb2c <_strtod_l+0x490>
 800eab8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d100      	bne.n	800eac0 <_strtod_l+0x424>
 800eabe:	e634      	b.n	800e72a <_strtod_l+0x8e>
 800eac0:	dd24      	ble.n	800eb0c <_strtod_l+0x470>
 800eac2:	2b16      	cmp	r3, #22
 800eac4:	dc09      	bgt.n	800eada <_strtod_l+0x43e>
 800eac6:	496f      	ldr	r1, [pc, #444]	; (800ec84 <_strtod_l+0x5e8>)
 800eac8:	00db      	lsls	r3, r3, #3
 800eaca:	18c9      	adds	r1, r1, r3
 800eacc:	0032      	movs	r2, r6
 800eace:	6808      	ldr	r0, [r1, #0]
 800ead0:	6849      	ldr	r1, [r1, #4]
 800ead2:	003b      	movs	r3, r7
 800ead4:	f7f3 fbac 	bl	8002230 <__aeabi_dmul>
 800ead8:	e7bd      	b.n	800ea56 <_strtod_l+0x3ba>
 800eada:	2325      	movs	r3, #37	; 0x25
 800eadc:	9a06      	ldr	r2, [sp, #24]
 800eade:	1a9b      	subs	r3, r3, r2
 800eae0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eae2:	4293      	cmp	r3, r2
 800eae4:	db22      	blt.n	800eb2c <_strtod_l+0x490>
 800eae6:	240f      	movs	r4, #15
 800eae8:	9b06      	ldr	r3, [sp, #24]
 800eaea:	4d66      	ldr	r5, [pc, #408]	; (800ec84 <_strtod_l+0x5e8>)
 800eaec:	1ae4      	subs	r4, r4, r3
 800eaee:	00e1      	lsls	r1, r4, #3
 800eaf0:	1869      	adds	r1, r5, r1
 800eaf2:	0032      	movs	r2, r6
 800eaf4:	6808      	ldr	r0, [r1, #0]
 800eaf6:	6849      	ldr	r1, [r1, #4]
 800eaf8:	003b      	movs	r3, r7
 800eafa:	f7f3 fb99 	bl	8002230 <__aeabi_dmul>
 800eafe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb00:	1b1c      	subs	r4, r3, r4
 800eb02:	00e4      	lsls	r4, r4, #3
 800eb04:	192c      	adds	r4, r5, r4
 800eb06:	6822      	ldr	r2, [r4, #0]
 800eb08:	6863      	ldr	r3, [r4, #4]
 800eb0a:	e7e3      	b.n	800ead4 <_strtod_l+0x438>
 800eb0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb0e:	3316      	adds	r3, #22
 800eb10:	db0c      	blt.n	800eb2c <_strtod_l+0x490>
 800eb12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eb14:	9a07      	ldr	r2, [sp, #28]
 800eb16:	0030      	movs	r0, r6
 800eb18:	1a9a      	subs	r2, r3, r2
 800eb1a:	4b5a      	ldr	r3, [pc, #360]	; (800ec84 <_strtod_l+0x5e8>)
 800eb1c:	00d2      	lsls	r2, r2, #3
 800eb1e:	189b      	adds	r3, r3, r2
 800eb20:	0039      	movs	r1, r7
 800eb22:	681a      	ldr	r2, [r3, #0]
 800eb24:	685b      	ldr	r3, [r3, #4]
 800eb26:	f7f2 ff81 	bl	8001a2c <__aeabi_ddiv>
 800eb2a:	e794      	b.n	800ea56 <_strtod_l+0x3ba>
 800eb2c:	9b06      	ldr	r3, [sp, #24]
 800eb2e:	1b1c      	subs	r4, r3, r4
 800eb30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb32:	18e4      	adds	r4, r4, r3
 800eb34:	2c00      	cmp	r4, #0
 800eb36:	dd72      	ble.n	800ec1e <_strtod_l+0x582>
 800eb38:	230f      	movs	r3, #15
 800eb3a:	0021      	movs	r1, r4
 800eb3c:	4019      	ands	r1, r3
 800eb3e:	421c      	tst	r4, r3
 800eb40:	d00a      	beq.n	800eb58 <_strtod_l+0x4bc>
 800eb42:	00cb      	lsls	r3, r1, #3
 800eb44:	494f      	ldr	r1, [pc, #316]	; (800ec84 <_strtod_l+0x5e8>)
 800eb46:	0032      	movs	r2, r6
 800eb48:	18c9      	adds	r1, r1, r3
 800eb4a:	6808      	ldr	r0, [r1, #0]
 800eb4c:	6849      	ldr	r1, [r1, #4]
 800eb4e:	003b      	movs	r3, r7
 800eb50:	f7f3 fb6e 	bl	8002230 <__aeabi_dmul>
 800eb54:	0006      	movs	r6, r0
 800eb56:	000f      	movs	r7, r1
 800eb58:	230f      	movs	r3, #15
 800eb5a:	439c      	bics	r4, r3
 800eb5c:	d04a      	beq.n	800ebf4 <_strtod_l+0x558>
 800eb5e:	3326      	adds	r3, #38	; 0x26
 800eb60:	33ff      	adds	r3, #255	; 0xff
 800eb62:	429c      	cmp	r4, r3
 800eb64:	dd22      	ble.n	800ebac <_strtod_l+0x510>
 800eb66:	2300      	movs	r3, #0
 800eb68:	9306      	str	r3, [sp, #24]
 800eb6a:	9307      	str	r3, [sp, #28]
 800eb6c:	930b      	str	r3, [sp, #44]	; 0x2c
 800eb6e:	9309      	str	r3, [sp, #36]	; 0x24
 800eb70:	2322      	movs	r3, #34	; 0x22
 800eb72:	2600      	movs	r6, #0
 800eb74:	9a05      	ldr	r2, [sp, #20]
 800eb76:	4f3f      	ldr	r7, [pc, #252]	; (800ec74 <_strtod_l+0x5d8>)
 800eb78:	6013      	str	r3, [r2, #0]
 800eb7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eb7c:	42b3      	cmp	r3, r6
 800eb7e:	d100      	bne.n	800eb82 <_strtod_l+0x4e6>
 800eb80:	e5d3      	b.n	800e72a <_strtod_l+0x8e>
 800eb82:	9920      	ldr	r1, [sp, #128]	; 0x80
 800eb84:	9805      	ldr	r0, [sp, #20]
 800eb86:	f001 f9a9 	bl	800fedc <_Bfree>
 800eb8a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eb8c:	9805      	ldr	r0, [sp, #20]
 800eb8e:	f001 f9a5 	bl	800fedc <_Bfree>
 800eb92:	9907      	ldr	r1, [sp, #28]
 800eb94:	9805      	ldr	r0, [sp, #20]
 800eb96:	f001 f9a1 	bl	800fedc <_Bfree>
 800eb9a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800eb9c:	9805      	ldr	r0, [sp, #20]
 800eb9e:	f001 f99d 	bl	800fedc <_Bfree>
 800eba2:	9906      	ldr	r1, [sp, #24]
 800eba4:	9805      	ldr	r0, [sp, #20]
 800eba6:	f001 f999 	bl	800fedc <_Bfree>
 800ebaa:	e5be      	b.n	800e72a <_strtod_l+0x8e>
 800ebac:	2300      	movs	r3, #0
 800ebae:	0030      	movs	r0, r6
 800ebb0:	0039      	movs	r1, r7
 800ebb2:	4d35      	ldr	r5, [pc, #212]	; (800ec88 <_strtod_l+0x5ec>)
 800ebb4:	1124      	asrs	r4, r4, #4
 800ebb6:	9308      	str	r3, [sp, #32]
 800ebb8:	2c01      	cmp	r4, #1
 800ebba:	dc1e      	bgt.n	800ebfa <_strtod_l+0x55e>
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d001      	beq.n	800ebc4 <_strtod_l+0x528>
 800ebc0:	0006      	movs	r6, r0
 800ebc2:	000f      	movs	r7, r1
 800ebc4:	4b31      	ldr	r3, [pc, #196]	; (800ec8c <_strtod_l+0x5f0>)
 800ebc6:	0032      	movs	r2, r6
 800ebc8:	18ff      	adds	r7, r7, r3
 800ebca:	9b08      	ldr	r3, [sp, #32]
 800ebcc:	00dd      	lsls	r5, r3, #3
 800ebce:	4b2e      	ldr	r3, [pc, #184]	; (800ec88 <_strtod_l+0x5ec>)
 800ebd0:	195d      	adds	r5, r3, r5
 800ebd2:	6828      	ldr	r0, [r5, #0]
 800ebd4:	6869      	ldr	r1, [r5, #4]
 800ebd6:	003b      	movs	r3, r7
 800ebd8:	f7f3 fb2a 	bl	8002230 <__aeabi_dmul>
 800ebdc:	4b25      	ldr	r3, [pc, #148]	; (800ec74 <_strtod_l+0x5d8>)
 800ebde:	4a2c      	ldr	r2, [pc, #176]	; (800ec90 <_strtod_l+0x5f4>)
 800ebe0:	0006      	movs	r6, r0
 800ebe2:	400b      	ands	r3, r1
 800ebe4:	4293      	cmp	r3, r2
 800ebe6:	d8be      	bhi.n	800eb66 <_strtod_l+0x4ca>
 800ebe8:	4a2a      	ldr	r2, [pc, #168]	; (800ec94 <_strtod_l+0x5f8>)
 800ebea:	4293      	cmp	r3, r2
 800ebec:	d913      	bls.n	800ec16 <_strtod_l+0x57a>
 800ebee:	2601      	movs	r6, #1
 800ebf0:	4f29      	ldr	r7, [pc, #164]	; (800ec98 <_strtod_l+0x5fc>)
 800ebf2:	4276      	negs	r6, r6
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	9308      	str	r3, [sp, #32]
 800ebf8:	e087      	b.n	800ed0a <_strtod_l+0x66e>
 800ebfa:	2201      	movs	r2, #1
 800ebfc:	4214      	tst	r4, r2
 800ebfe:	d004      	beq.n	800ec0a <_strtod_l+0x56e>
 800ec00:	682a      	ldr	r2, [r5, #0]
 800ec02:	686b      	ldr	r3, [r5, #4]
 800ec04:	f7f3 fb14 	bl	8002230 <__aeabi_dmul>
 800ec08:	2301      	movs	r3, #1
 800ec0a:	9a08      	ldr	r2, [sp, #32]
 800ec0c:	1064      	asrs	r4, r4, #1
 800ec0e:	3201      	adds	r2, #1
 800ec10:	9208      	str	r2, [sp, #32]
 800ec12:	3508      	adds	r5, #8
 800ec14:	e7d0      	b.n	800ebb8 <_strtod_l+0x51c>
 800ec16:	23d4      	movs	r3, #212	; 0xd4
 800ec18:	049b      	lsls	r3, r3, #18
 800ec1a:	18cf      	adds	r7, r1, r3
 800ec1c:	e7ea      	b.n	800ebf4 <_strtod_l+0x558>
 800ec1e:	2c00      	cmp	r4, #0
 800ec20:	d0e8      	beq.n	800ebf4 <_strtod_l+0x558>
 800ec22:	4264      	negs	r4, r4
 800ec24:	220f      	movs	r2, #15
 800ec26:	0023      	movs	r3, r4
 800ec28:	4013      	ands	r3, r2
 800ec2a:	4214      	tst	r4, r2
 800ec2c:	d00a      	beq.n	800ec44 <_strtod_l+0x5a8>
 800ec2e:	00da      	lsls	r2, r3, #3
 800ec30:	4b14      	ldr	r3, [pc, #80]	; (800ec84 <_strtod_l+0x5e8>)
 800ec32:	0030      	movs	r0, r6
 800ec34:	189b      	adds	r3, r3, r2
 800ec36:	0039      	movs	r1, r7
 800ec38:	681a      	ldr	r2, [r3, #0]
 800ec3a:	685b      	ldr	r3, [r3, #4]
 800ec3c:	f7f2 fef6 	bl	8001a2c <__aeabi_ddiv>
 800ec40:	0006      	movs	r6, r0
 800ec42:	000f      	movs	r7, r1
 800ec44:	1124      	asrs	r4, r4, #4
 800ec46:	d0d5      	beq.n	800ebf4 <_strtod_l+0x558>
 800ec48:	2c1f      	cmp	r4, #31
 800ec4a:	dd27      	ble.n	800ec9c <_strtod_l+0x600>
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	9306      	str	r3, [sp, #24]
 800ec50:	9307      	str	r3, [sp, #28]
 800ec52:	930b      	str	r3, [sp, #44]	; 0x2c
 800ec54:	9309      	str	r3, [sp, #36]	; 0x24
 800ec56:	2322      	movs	r3, #34	; 0x22
 800ec58:	9a05      	ldr	r2, [sp, #20]
 800ec5a:	2600      	movs	r6, #0
 800ec5c:	6013      	str	r3, [r2, #0]
 800ec5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ec60:	2700      	movs	r7, #0
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d18d      	bne.n	800eb82 <_strtod_l+0x4e6>
 800ec66:	e560      	b.n	800e72a <_strtod_l+0x8e>
 800ec68:	00004e1f 	.word	0x00004e1f
 800ec6c:	0801304f 	.word	0x0801304f
 800ec70:	08013068 	.word	0x08013068
 800ec74:	7ff00000 	.word	0x7ff00000
 800ec78:	0801304c 	.word	0x0801304c
 800ec7c:	08013416 	.word	0x08013416
 800ec80:	08013412 	.word	0x08013412
 800ec84:	080132d0 	.word	0x080132d0
 800ec88:	080132a8 	.word	0x080132a8
 800ec8c:	fcb00000 	.word	0xfcb00000
 800ec90:	7ca00000 	.word	0x7ca00000
 800ec94:	7c900000 	.word	0x7c900000
 800ec98:	7fefffff 	.word	0x7fefffff
 800ec9c:	2310      	movs	r3, #16
 800ec9e:	0022      	movs	r2, r4
 800eca0:	401a      	ands	r2, r3
 800eca2:	9208      	str	r2, [sp, #32]
 800eca4:	421c      	tst	r4, r3
 800eca6:	d001      	beq.n	800ecac <_strtod_l+0x610>
 800eca8:	335a      	adds	r3, #90	; 0x5a
 800ecaa:	9308      	str	r3, [sp, #32]
 800ecac:	0030      	movs	r0, r6
 800ecae:	0039      	movs	r1, r7
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	4dc5      	ldr	r5, [pc, #788]	; (800efc8 <_strtod_l+0x92c>)
 800ecb4:	2201      	movs	r2, #1
 800ecb6:	4214      	tst	r4, r2
 800ecb8:	d004      	beq.n	800ecc4 <_strtod_l+0x628>
 800ecba:	682a      	ldr	r2, [r5, #0]
 800ecbc:	686b      	ldr	r3, [r5, #4]
 800ecbe:	f7f3 fab7 	bl	8002230 <__aeabi_dmul>
 800ecc2:	2301      	movs	r3, #1
 800ecc4:	1064      	asrs	r4, r4, #1
 800ecc6:	3508      	adds	r5, #8
 800ecc8:	2c00      	cmp	r4, #0
 800ecca:	d1f3      	bne.n	800ecb4 <_strtod_l+0x618>
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d001      	beq.n	800ecd4 <_strtod_l+0x638>
 800ecd0:	0006      	movs	r6, r0
 800ecd2:	000f      	movs	r7, r1
 800ecd4:	9b08      	ldr	r3, [sp, #32]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d00f      	beq.n	800ecfa <_strtod_l+0x65e>
 800ecda:	236b      	movs	r3, #107	; 0x6b
 800ecdc:	007a      	lsls	r2, r7, #1
 800ecde:	0d52      	lsrs	r2, r2, #21
 800ece0:	0039      	movs	r1, r7
 800ece2:	1a9b      	subs	r3, r3, r2
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	dd08      	ble.n	800ecfa <_strtod_l+0x65e>
 800ece8:	2b1f      	cmp	r3, #31
 800ecea:	dc00      	bgt.n	800ecee <_strtod_l+0x652>
 800ecec:	e124      	b.n	800ef38 <_strtod_l+0x89c>
 800ecee:	2600      	movs	r6, #0
 800ecf0:	2b34      	cmp	r3, #52	; 0x34
 800ecf2:	dc00      	bgt.n	800ecf6 <_strtod_l+0x65a>
 800ecf4:	e119      	b.n	800ef2a <_strtod_l+0x88e>
 800ecf6:	27dc      	movs	r7, #220	; 0xdc
 800ecf8:	04bf      	lsls	r7, r7, #18
 800ecfa:	2200      	movs	r2, #0
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	0030      	movs	r0, r6
 800ed00:	0039      	movs	r1, r7
 800ed02:	f7f1 fba9 	bl	8000458 <__aeabi_dcmpeq>
 800ed06:	2800      	cmp	r0, #0
 800ed08:	d1a0      	bne.n	800ec4c <_strtod_l+0x5b0>
 800ed0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ed0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ed0e:	9300      	str	r3, [sp, #0]
 800ed10:	9910      	ldr	r1, [sp, #64]	; 0x40
 800ed12:	9b06      	ldr	r3, [sp, #24]
 800ed14:	9805      	ldr	r0, [sp, #20]
 800ed16:	f001 f949 	bl	800ffac <__s2b>
 800ed1a:	900b      	str	r0, [sp, #44]	; 0x2c
 800ed1c:	2800      	cmp	r0, #0
 800ed1e:	d100      	bne.n	800ed22 <_strtod_l+0x686>
 800ed20:	e721      	b.n	800eb66 <_strtod_l+0x4ca>
 800ed22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed24:	9907      	ldr	r1, [sp, #28]
 800ed26:	17da      	asrs	r2, r3, #31
 800ed28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ed2a:	1a5b      	subs	r3, r3, r1
 800ed2c:	401a      	ands	r2, r3
 800ed2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed30:	9215      	str	r2, [sp, #84]	; 0x54
 800ed32:	43db      	mvns	r3, r3
 800ed34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ed36:	17db      	asrs	r3, r3, #31
 800ed38:	401a      	ands	r2, r3
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	921a      	str	r2, [sp, #104]	; 0x68
 800ed3e:	9306      	str	r3, [sp, #24]
 800ed40:	9307      	str	r3, [sp, #28]
 800ed42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ed44:	9805      	ldr	r0, [sp, #20]
 800ed46:	6859      	ldr	r1, [r3, #4]
 800ed48:	f001 f884 	bl	800fe54 <_Balloc>
 800ed4c:	9009      	str	r0, [sp, #36]	; 0x24
 800ed4e:	2800      	cmp	r0, #0
 800ed50:	d100      	bne.n	800ed54 <_strtod_l+0x6b8>
 800ed52:	e70d      	b.n	800eb70 <_strtod_l+0x4d4>
 800ed54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ed56:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ed58:	691b      	ldr	r3, [r3, #16]
 800ed5a:	310c      	adds	r1, #12
 800ed5c:	1c9a      	adds	r2, r3, #2
 800ed5e:	0092      	lsls	r2, r2, #2
 800ed60:	300c      	adds	r0, #12
 800ed62:	930c      	str	r3, [sp, #48]	; 0x30
 800ed64:	f7ff fc0a 	bl	800e57c <memcpy>
 800ed68:	ab22      	add	r3, sp, #136	; 0x88
 800ed6a:	9301      	str	r3, [sp, #4]
 800ed6c:	ab21      	add	r3, sp, #132	; 0x84
 800ed6e:	9300      	str	r3, [sp, #0]
 800ed70:	0032      	movs	r2, r6
 800ed72:	003b      	movs	r3, r7
 800ed74:	9805      	ldr	r0, [sp, #20]
 800ed76:	9612      	str	r6, [sp, #72]	; 0x48
 800ed78:	9713      	str	r7, [sp, #76]	; 0x4c
 800ed7a:	f001 fc63 	bl	8010644 <__d2b>
 800ed7e:	9020      	str	r0, [sp, #128]	; 0x80
 800ed80:	2800      	cmp	r0, #0
 800ed82:	d100      	bne.n	800ed86 <_strtod_l+0x6ea>
 800ed84:	e6f4      	b.n	800eb70 <_strtod_l+0x4d4>
 800ed86:	2101      	movs	r1, #1
 800ed88:	9805      	ldr	r0, [sp, #20]
 800ed8a:	f001 f9a3 	bl	80100d4 <__i2b>
 800ed8e:	9007      	str	r0, [sp, #28]
 800ed90:	2800      	cmp	r0, #0
 800ed92:	d100      	bne.n	800ed96 <_strtod_l+0x6fa>
 800ed94:	e6ec      	b.n	800eb70 <_strtod_l+0x4d4>
 800ed96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ed98:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ed9a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800ed9c:	1ad4      	subs	r4, r2, r3
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	db01      	blt.n	800eda6 <_strtod_l+0x70a>
 800eda2:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800eda4:	195d      	adds	r5, r3, r5
 800eda6:	9908      	ldr	r1, [sp, #32]
 800eda8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800edaa:	1a5b      	subs	r3, r3, r1
 800edac:	2136      	movs	r1, #54	; 0x36
 800edae:	189b      	adds	r3, r3, r2
 800edb0:	1a8a      	subs	r2, r1, r2
 800edb2:	4986      	ldr	r1, [pc, #536]	; (800efcc <_strtod_l+0x930>)
 800edb4:	2001      	movs	r0, #1
 800edb6:	468c      	mov	ip, r1
 800edb8:	2100      	movs	r1, #0
 800edba:	3b01      	subs	r3, #1
 800edbc:	9110      	str	r1, [sp, #64]	; 0x40
 800edbe:	9014      	str	r0, [sp, #80]	; 0x50
 800edc0:	4563      	cmp	r3, ip
 800edc2:	da07      	bge.n	800edd4 <_strtod_l+0x738>
 800edc4:	4661      	mov	r1, ip
 800edc6:	1ac9      	subs	r1, r1, r3
 800edc8:	1a52      	subs	r2, r2, r1
 800edca:	291f      	cmp	r1, #31
 800edcc:	dd00      	ble.n	800edd0 <_strtod_l+0x734>
 800edce:	e0b8      	b.n	800ef42 <_strtod_l+0x8a6>
 800edd0:	4088      	lsls	r0, r1
 800edd2:	9014      	str	r0, [sp, #80]	; 0x50
 800edd4:	18ab      	adds	r3, r5, r2
 800edd6:	930c      	str	r3, [sp, #48]	; 0x30
 800edd8:	18a4      	adds	r4, r4, r2
 800edda:	9b08      	ldr	r3, [sp, #32]
 800eddc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800edde:	191c      	adds	r4, r3, r4
 800ede0:	002b      	movs	r3, r5
 800ede2:	4295      	cmp	r5, r2
 800ede4:	dd00      	ble.n	800ede8 <_strtod_l+0x74c>
 800ede6:	0013      	movs	r3, r2
 800ede8:	42a3      	cmp	r3, r4
 800edea:	dd00      	ble.n	800edee <_strtod_l+0x752>
 800edec:	0023      	movs	r3, r4
 800edee:	2b00      	cmp	r3, #0
 800edf0:	dd04      	ble.n	800edfc <_strtod_l+0x760>
 800edf2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800edf4:	1ae4      	subs	r4, r4, r3
 800edf6:	1ad2      	subs	r2, r2, r3
 800edf8:	920c      	str	r2, [sp, #48]	; 0x30
 800edfa:	1aed      	subs	r5, r5, r3
 800edfc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	dd17      	ble.n	800ee32 <_strtod_l+0x796>
 800ee02:	001a      	movs	r2, r3
 800ee04:	9907      	ldr	r1, [sp, #28]
 800ee06:	9805      	ldr	r0, [sp, #20]
 800ee08:	f001 fa2a 	bl	8010260 <__pow5mult>
 800ee0c:	9007      	str	r0, [sp, #28]
 800ee0e:	2800      	cmp	r0, #0
 800ee10:	d100      	bne.n	800ee14 <_strtod_l+0x778>
 800ee12:	e6ad      	b.n	800eb70 <_strtod_l+0x4d4>
 800ee14:	0001      	movs	r1, r0
 800ee16:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ee18:	9805      	ldr	r0, [sp, #20]
 800ee1a:	f001 f971 	bl	8010100 <__multiply>
 800ee1e:	900f      	str	r0, [sp, #60]	; 0x3c
 800ee20:	2800      	cmp	r0, #0
 800ee22:	d100      	bne.n	800ee26 <_strtod_l+0x78a>
 800ee24:	e6a4      	b.n	800eb70 <_strtod_l+0x4d4>
 800ee26:	9920      	ldr	r1, [sp, #128]	; 0x80
 800ee28:	9805      	ldr	r0, [sp, #20]
 800ee2a:	f001 f857 	bl	800fedc <_Bfree>
 800ee2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ee30:	9320      	str	r3, [sp, #128]	; 0x80
 800ee32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	dd00      	ble.n	800ee3a <_strtod_l+0x79e>
 800ee38:	e089      	b.n	800ef4e <_strtod_l+0x8b2>
 800ee3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	dd08      	ble.n	800ee52 <_strtod_l+0x7b6>
 800ee40:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ee42:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ee44:	9805      	ldr	r0, [sp, #20]
 800ee46:	f001 fa0b 	bl	8010260 <__pow5mult>
 800ee4a:	9009      	str	r0, [sp, #36]	; 0x24
 800ee4c:	2800      	cmp	r0, #0
 800ee4e:	d100      	bne.n	800ee52 <_strtod_l+0x7b6>
 800ee50:	e68e      	b.n	800eb70 <_strtod_l+0x4d4>
 800ee52:	2c00      	cmp	r4, #0
 800ee54:	dd08      	ble.n	800ee68 <_strtod_l+0x7cc>
 800ee56:	0022      	movs	r2, r4
 800ee58:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ee5a:	9805      	ldr	r0, [sp, #20]
 800ee5c:	f001 fa5c 	bl	8010318 <__lshift>
 800ee60:	9009      	str	r0, [sp, #36]	; 0x24
 800ee62:	2800      	cmp	r0, #0
 800ee64:	d100      	bne.n	800ee68 <_strtod_l+0x7cc>
 800ee66:	e683      	b.n	800eb70 <_strtod_l+0x4d4>
 800ee68:	2d00      	cmp	r5, #0
 800ee6a:	dd08      	ble.n	800ee7e <_strtod_l+0x7e2>
 800ee6c:	002a      	movs	r2, r5
 800ee6e:	9907      	ldr	r1, [sp, #28]
 800ee70:	9805      	ldr	r0, [sp, #20]
 800ee72:	f001 fa51 	bl	8010318 <__lshift>
 800ee76:	9007      	str	r0, [sp, #28]
 800ee78:	2800      	cmp	r0, #0
 800ee7a:	d100      	bne.n	800ee7e <_strtod_l+0x7e2>
 800ee7c:	e678      	b.n	800eb70 <_strtod_l+0x4d4>
 800ee7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ee80:	9920      	ldr	r1, [sp, #128]	; 0x80
 800ee82:	9805      	ldr	r0, [sp, #20]
 800ee84:	f001 fad2 	bl	801042c <__mdiff>
 800ee88:	9006      	str	r0, [sp, #24]
 800ee8a:	2800      	cmp	r0, #0
 800ee8c:	d100      	bne.n	800ee90 <_strtod_l+0x7f4>
 800ee8e:	e66f      	b.n	800eb70 <_strtod_l+0x4d4>
 800ee90:	2200      	movs	r2, #0
 800ee92:	68c3      	ldr	r3, [r0, #12]
 800ee94:	9907      	ldr	r1, [sp, #28]
 800ee96:	60c2      	str	r2, [r0, #12]
 800ee98:	930f      	str	r3, [sp, #60]	; 0x3c
 800ee9a:	f001 faab 	bl	80103f4 <__mcmp>
 800ee9e:	2800      	cmp	r0, #0
 800eea0:	da5f      	bge.n	800ef62 <_strtod_l+0x8c6>
 800eea2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800eea4:	4333      	orrs	r3, r6
 800eea6:	d000      	beq.n	800eeaa <_strtod_l+0x80e>
 800eea8:	e08a      	b.n	800efc0 <_strtod_l+0x924>
 800eeaa:	033b      	lsls	r3, r7, #12
 800eeac:	d000      	beq.n	800eeb0 <_strtod_l+0x814>
 800eeae:	e087      	b.n	800efc0 <_strtod_l+0x924>
 800eeb0:	22d6      	movs	r2, #214	; 0xd6
 800eeb2:	4b47      	ldr	r3, [pc, #284]	; (800efd0 <_strtod_l+0x934>)
 800eeb4:	04d2      	lsls	r2, r2, #19
 800eeb6:	403b      	ands	r3, r7
 800eeb8:	4293      	cmp	r3, r2
 800eeba:	d800      	bhi.n	800eebe <_strtod_l+0x822>
 800eebc:	e080      	b.n	800efc0 <_strtod_l+0x924>
 800eebe:	9b06      	ldr	r3, [sp, #24]
 800eec0:	695b      	ldr	r3, [r3, #20]
 800eec2:	930a      	str	r3, [sp, #40]	; 0x28
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d104      	bne.n	800eed2 <_strtod_l+0x836>
 800eec8:	9b06      	ldr	r3, [sp, #24]
 800eeca:	691b      	ldr	r3, [r3, #16]
 800eecc:	930a      	str	r3, [sp, #40]	; 0x28
 800eece:	2b01      	cmp	r3, #1
 800eed0:	dd76      	ble.n	800efc0 <_strtod_l+0x924>
 800eed2:	9906      	ldr	r1, [sp, #24]
 800eed4:	2201      	movs	r2, #1
 800eed6:	9805      	ldr	r0, [sp, #20]
 800eed8:	f001 fa1e 	bl	8010318 <__lshift>
 800eedc:	9907      	ldr	r1, [sp, #28]
 800eede:	9006      	str	r0, [sp, #24]
 800eee0:	f001 fa88 	bl	80103f4 <__mcmp>
 800eee4:	2800      	cmp	r0, #0
 800eee6:	dd6b      	ble.n	800efc0 <_strtod_l+0x924>
 800eee8:	9908      	ldr	r1, [sp, #32]
 800eeea:	003b      	movs	r3, r7
 800eeec:	4a38      	ldr	r2, [pc, #224]	; (800efd0 <_strtod_l+0x934>)
 800eeee:	2900      	cmp	r1, #0
 800eef0:	d100      	bne.n	800eef4 <_strtod_l+0x858>
 800eef2:	e092      	b.n	800f01a <_strtod_l+0x97e>
 800eef4:	0011      	movs	r1, r2
 800eef6:	20d6      	movs	r0, #214	; 0xd6
 800eef8:	4039      	ands	r1, r7
 800eefa:	04c0      	lsls	r0, r0, #19
 800eefc:	4281      	cmp	r1, r0
 800eefe:	dd00      	ble.n	800ef02 <_strtod_l+0x866>
 800ef00:	e08b      	b.n	800f01a <_strtod_l+0x97e>
 800ef02:	23dc      	movs	r3, #220	; 0xdc
 800ef04:	049b      	lsls	r3, r3, #18
 800ef06:	4299      	cmp	r1, r3
 800ef08:	dc00      	bgt.n	800ef0c <_strtod_l+0x870>
 800ef0a:	e6a4      	b.n	800ec56 <_strtod_l+0x5ba>
 800ef0c:	0030      	movs	r0, r6
 800ef0e:	0039      	movs	r1, r7
 800ef10:	2200      	movs	r2, #0
 800ef12:	4b30      	ldr	r3, [pc, #192]	; (800efd4 <_strtod_l+0x938>)
 800ef14:	f7f3 f98c 	bl	8002230 <__aeabi_dmul>
 800ef18:	0006      	movs	r6, r0
 800ef1a:	000f      	movs	r7, r1
 800ef1c:	4308      	orrs	r0, r1
 800ef1e:	d000      	beq.n	800ef22 <_strtod_l+0x886>
 800ef20:	e62f      	b.n	800eb82 <_strtod_l+0x4e6>
 800ef22:	2322      	movs	r3, #34	; 0x22
 800ef24:	9a05      	ldr	r2, [sp, #20]
 800ef26:	6013      	str	r3, [r2, #0]
 800ef28:	e62b      	b.n	800eb82 <_strtod_l+0x4e6>
 800ef2a:	234b      	movs	r3, #75	; 0x4b
 800ef2c:	1a9a      	subs	r2, r3, r2
 800ef2e:	3b4c      	subs	r3, #76	; 0x4c
 800ef30:	4093      	lsls	r3, r2
 800ef32:	4019      	ands	r1, r3
 800ef34:	000f      	movs	r7, r1
 800ef36:	e6e0      	b.n	800ecfa <_strtod_l+0x65e>
 800ef38:	2201      	movs	r2, #1
 800ef3a:	4252      	negs	r2, r2
 800ef3c:	409a      	lsls	r2, r3
 800ef3e:	4016      	ands	r6, r2
 800ef40:	e6db      	b.n	800ecfa <_strtod_l+0x65e>
 800ef42:	4925      	ldr	r1, [pc, #148]	; (800efd8 <_strtod_l+0x93c>)
 800ef44:	1acb      	subs	r3, r1, r3
 800ef46:	0001      	movs	r1, r0
 800ef48:	4099      	lsls	r1, r3
 800ef4a:	9110      	str	r1, [sp, #64]	; 0x40
 800ef4c:	e741      	b.n	800edd2 <_strtod_l+0x736>
 800ef4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ef50:	9920      	ldr	r1, [sp, #128]	; 0x80
 800ef52:	9805      	ldr	r0, [sp, #20]
 800ef54:	f001 f9e0 	bl	8010318 <__lshift>
 800ef58:	9020      	str	r0, [sp, #128]	; 0x80
 800ef5a:	2800      	cmp	r0, #0
 800ef5c:	d000      	beq.n	800ef60 <_strtod_l+0x8c4>
 800ef5e:	e76c      	b.n	800ee3a <_strtod_l+0x79e>
 800ef60:	e606      	b.n	800eb70 <_strtod_l+0x4d4>
 800ef62:	970c      	str	r7, [sp, #48]	; 0x30
 800ef64:	2800      	cmp	r0, #0
 800ef66:	d176      	bne.n	800f056 <_strtod_l+0x9ba>
 800ef68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ef6a:	033b      	lsls	r3, r7, #12
 800ef6c:	0b1b      	lsrs	r3, r3, #12
 800ef6e:	2a00      	cmp	r2, #0
 800ef70:	d038      	beq.n	800efe4 <_strtod_l+0x948>
 800ef72:	4a1a      	ldr	r2, [pc, #104]	; (800efdc <_strtod_l+0x940>)
 800ef74:	4293      	cmp	r3, r2
 800ef76:	d138      	bne.n	800efea <_strtod_l+0x94e>
 800ef78:	2201      	movs	r2, #1
 800ef7a:	9b08      	ldr	r3, [sp, #32]
 800ef7c:	4252      	negs	r2, r2
 800ef7e:	0031      	movs	r1, r6
 800ef80:	0010      	movs	r0, r2
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d00b      	beq.n	800ef9e <_strtod_l+0x902>
 800ef86:	24d4      	movs	r4, #212	; 0xd4
 800ef88:	4b11      	ldr	r3, [pc, #68]	; (800efd0 <_strtod_l+0x934>)
 800ef8a:	0010      	movs	r0, r2
 800ef8c:	403b      	ands	r3, r7
 800ef8e:	04e4      	lsls	r4, r4, #19
 800ef90:	42a3      	cmp	r3, r4
 800ef92:	d804      	bhi.n	800ef9e <_strtod_l+0x902>
 800ef94:	306c      	adds	r0, #108	; 0x6c
 800ef96:	0d1b      	lsrs	r3, r3, #20
 800ef98:	1ac3      	subs	r3, r0, r3
 800ef9a:	409a      	lsls	r2, r3
 800ef9c:	0010      	movs	r0, r2
 800ef9e:	4281      	cmp	r1, r0
 800efa0:	d123      	bne.n	800efea <_strtod_l+0x94e>
 800efa2:	4b0f      	ldr	r3, [pc, #60]	; (800efe0 <_strtod_l+0x944>)
 800efa4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800efa6:	429a      	cmp	r2, r3
 800efa8:	d102      	bne.n	800efb0 <_strtod_l+0x914>
 800efaa:	1c4b      	adds	r3, r1, #1
 800efac:	d100      	bne.n	800efb0 <_strtod_l+0x914>
 800efae:	e5df      	b.n	800eb70 <_strtod_l+0x4d4>
 800efb0:	4b07      	ldr	r3, [pc, #28]	; (800efd0 <_strtod_l+0x934>)
 800efb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800efb4:	2600      	movs	r6, #0
 800efb6:	401a      	ands	r2, r3
 800efb8:	0013      	movs	r3, r2
 800efba:	2280      	movs	r2, #128	; 0x80
 800efbc:	0352      	lsls	r2, r2, #13
 800efbe:	189f      	adds	r7, r3, r2
 800efc0:	9b08      	ldr	r3, [sp, #32]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d1a2      	bne.n	800ef0c <_strtod_l+0x870>
 800efc6:	e5dc      	b.n	800eb82 <_strtod_l+0x4e6>
 800efc8:	08013080 	.word	0x08013080
 800efcc:	fffffc02 	.word	0xfffffc02
 800efd0:	7ff00000 	.word	0x7ff00000
 800efd4:	39500000 	.word	0x39500000
 800efd8:	fffffbe2 	.word	0xfffffbe2
 800efdc:	000fffff 	.word	0x000fffff
 800efe0:	7fefffff 	.word	0x7fefffff
 800efe4:	4333      	orrs	r3, r6
 800efe6:	d100      	bne.n	800efea <_strtod_l+0x94e>
 800efe8:	e77e      	b.n	800eee8 <_strtod_l+0x84c>
 800efea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800efec:	2b00      	cmp	r3, #0
 800efee:	d01d      	beq.n	800f02c <_strtod_l+0x990>
 800eff0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eff2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800eff4:	4213      	tst	r3, r2
 800eff6:	d0e3      	beq.n	800efc0 <_strtod_l+0x924>
 800eff8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800effa:	0030      	movs	r0, r6
 800effc:	0039      	movs	r1, r7
 800effe:	9a08      	ldr	r2, [sp, #32]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d017      	beq.n	800f034 <_strtod_l+0x998>
 800f004:	f7ff fb32 	bl	800e66c <sulp>
 800f008:	0002      	movs	r2, r0
 800f00a:	000b      	movs	r3, r1
 800f00c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800f00e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800f010:	f7f2 f9d0 	bl	80013b4 <__aeabi_dadd>
 800f014:	0006      	movs	r6, r0
 800f016:	000f      	movs	r7, r1
 800f018:	e7d2      	b.n	800efc0 <_strtod_l+0x924>
 800f01a:	2601      	movs	r6, #1
 800f01c:	4013      	ands	r3, r2
 800f01e:	4a99      	ldr	r2, [pc, #612]	; (800f284 <_strtod_l+0xbe8>)
 800f020:	4276      	negs	r6, r6
 800f022:	189b      	adds	r3, r3, r2
 800f024:	4a98      	ldr	r2, [pc, #608]	; (800f288 <_strtod_l+0xbec>)
 800f026:	431a      	orrs	r2, r3
 800f028:	0017      	movs	r7, r2
 800f02a:	e7c9      	b.n	800efc0 <_strtod_l+0x924>
 800f02c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f02e:	4233      	tst	r3, r6
 800f030:	d0c6      	beq.n	800efc0 <_strtod_l+0x924>
 800f032:	e7e1      	b.n	800eff8 <_strtod_l+0x95c>
 800f034:	f7ff fb1a 	bl	800e66c <sulp>
 800f038:	0002      	movs	r2, r0
 800f03a:	000b      	movs	r3, r1
 800f03c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800f03e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800f040:	f7f3 fb62 	bl	8002708 <__aeabi_dsub>
 800f044:	2200      	movs	r2, #0
 800f046:	2300      	movs	r3, #0
 800f048:	0006      	movs	r6, r0
 800f04a:	000f      	movs	r7, r1
 800f04c:	f7f1 fa04 	bl	8000458 <__aeabi_dcmpeq>
 800f050:	2800      	cmp	r0, #0
 800f052:	d0b5      	beq.n	800efc0 <_strtod_l+0x924>
 800f054:	e5ff      	b.n	800ec56 <_strtod_l+0x5ba>
 800f056:	9907      	ldr	r1, [sp, #28]
 800f058:	9806      	ldr	r0, [sp, #24]
 800f05a:	f001 fb57 	bl	801070c <__ratio>
 800f05e:	2380      	movs	r3, #128	; 0x80
 800f060:	2200      	movs	r2, #0
 800f062:	05db      	lsls	r3, r3, #23
 800f064:	0004      	movs	r4, r0
 800f066:	000d      	movs	r5, r1
 800f068:	f7f1 fa06 	bl	8000478 <__aeabi_dcmple>
 800f06c:	2800      	cmp	r0, #0
 800f06e:	d075      	beq.n	800f15c <_strtod_l+0xac0>
 800f070:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f072:	2b00      	cmp	r3, #0
 800f074:	d047      	beq.n	800f106 <_strtod_l+0xa6a>
 800f076:	2300      	movs	r3, #0
 800f078:	4c84      	ldr	r4, [pc, #528]	; (800f28c <_strtod_l+0xbf0>)
 800f07a:	2500      	movs	r5, #0
 800f07c:	9310      	str	r3, [sp, #64]	; 0x40
 800f07e:	9411      	str	r4, [sp, #68]	; 0x44
 800f080:	4c82      	ldr	r4, [pc, #520]	; (800f28c <_strtod_l+0xbf0>)
 800f082:	4a83      	ldr	r2, [pc, #524]	; (800f290 <_strtod_l+0xbf4>)
 800f084:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f086:	4013      	ands	r3, r2
 800f088:	9314      	str	r3, [sp, #80]	; 0x50
 800f08a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f08c:	4b81      	ldr	r3, [pc, #516]	; (800f294 <_strtod_l+0xbf8>)
 800f08e:	429a      	cmp	r2, r3
 800f090:	d000      	beq.n	800f094 <_strtod_l+0x9f8>
 800f092:	e0ac      	b.n	800f1ee <_strtod_l+0xb52>
 800f094:	4a80      	ldr	r2, [pc, #512]	; (800f298 <_strtod_l+0xbfc>)
 800f096:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f098:	4694      	mov	ip, r2
 800f09a:	4463      	add	r3, ip
 800f09c:	001f      	movs	r7, r3
 800f09e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f0a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f0a2:	0030      	movs	r0, r6
 800f0a4:	0039      	movs	r1, r7
 800f0a6:	920c      	str	r2, [sp, #48]	; 0x30
 800f0a8:	930d      	str	r3, [sp, #52]	; 0x34
 800f0aa:	f001 fa57 	bl	801055c <__ulp>
 800f0ae:	0002      	movs	r2, r0
 800f0b0:	000b      	movs	r3, r1
 800f0b2:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f0b4:	990d      	ldr	r1, [sp, #52]	; 0x34
 800f0b6:	f7f3 f8bb 	bl	8002230 <__aeabi_dmul>
 800f0ba:	0032      	movs	r2, r6
 800f0bc:	003b      	movs	r3, r7
 800f0be:	f7f2 f979 	bl	80013b4 <__aeabi_dadd>
 800f0c2:	4a73      	ldr	r2, [pc, #460]	; (800f290 <_strtod_l+0xbf4>)
 800f0c4:	4b75      	ldr	r3, [pc, #468]	; (800f29c <_strtod_l+0xc00>)
 800f0c6:	0006      	movs	r6, r0
 800f0c8:	400a      	ands	r2, r1
 800f0ca:	429a      	cmp	r2, r3
 800f0cc:	d95e      	bls.n	800f18c <_strtod_l+0xaf0>
 800f0ce:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f0d0:	4b73      	ldr	r3, [pc, #460]	; (800f2a0 <_strtod_l+0xc04>)
 800f0d2:	429a      	cmp	r2, r3
 800f0d4:	d103      	bne.n	800f0de <_strtod_l+0xa42>
 800f0d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f0d8:	3301      	adds	r3, #1
 800f0da:	d100      	bne.n	800f0de <_strtod_l+0xa42>
 800f0dc:	e548      	b.n	800eb70 <_strtod_l+0x4d4>
 800f0de:	2601      	movs	r6, #1
 800f0e0:	4f6f      	ldr	r7, [pc, #444]	; (800f2a0 <_strtod_l+0xc04>)
 800f0e2:	4276      	negs	r6, r6
 800f0e4:	9920      	ldr	r1, [sp, #128]	; 0x80
 800f0e6:	9805      	ldr	r0, [sp, #20]
 800f0e8:	f000 fef8 	bl	800fedc <_Bfree>
 800f0ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f0ee:	9805      	ldr	r0, [sp, #20]
 800f0f0:	f000 fef4 	bl	800fedc <_Bfree>
 800f0f4:	9907      	ldr	r1, [sp, #28]
 800f0f6:	9805      	ldr	r0, [sp, #20]
 800f0f8:	f000 fef0 	bl	800fedc <_Bfree>
 800f0fc:	9906      	ldr	r1, [sp, #24]
 800f0fe:	9805      	ldr	r0, [sp, #20]
 800f100:	f000 feec 	bl	800fedc <_Bfree>
 800f104:	e61d      	b.n	800ed42 <_strtod_l+0x6a6>
 800f106:	2e00      	cmp	r6, #0
 800f108:	d11c      	bne.n	800f144 <_strtod_l+0xaa8>
 800f10a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f10c:	031b      	lsls	r3, r3, #12
 800f10e:	d11f      	bne.n	800f150 <_strtod_l+0xab4>
 800f110:	2200      	movs	r2, #0
 800f112:	0020      	movs	r0, r4
 800f114:	0029      	movs	r1, r5
 800f116:	4b5d      	ldr	r3, [pc, #372]	; (800f28c <_strtod_l+0xbf0>)
 800f118:	f7f1 f9a4 	bl	8000464 <__aeabi_dcmplt>
 800f11c:	2800      	cmp	r0, #0
 800f11e:	d11a      	bne.n	800f156 <_strtod_l+0xaba>
 800f120:	0020      	movs	r0, r4
 800f122:	0029      	movs	r1, r5
 800f124:	2200      	movs	r2, #0
 800f126:	4b5f      	ldr	r3, [pc, #380]	; (800f2a4 <_strtod_l+0xc08>)
 800f128:	f7f3 f882 	bl	8002230 <__aeabi_dmul>
 800f12c:	0005      	movs	r5, r0
 800f12e:	000c      	movs	r4, r1
 800f130:	2380      	movs	r3, #128	; 0x80
 800f132:	061b      	lsls	r3, r3, #24
 800f134:	18e3      	adds	r3, r4, r3
 800f136:	951c      	str	r5, [sp, #112]	; 0x70
 800f138:	931d      	str	r3, [sp, #116]	; 0x74
 800f13a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800f13c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f13e:	9210      	str	r2, [sp, #64]	; 0x40
 800f140:	9311      	str	r3, [sp, #68]	; 0x44
 800f142:	e79e      	b.n	800f082 <_strtod_l+0x9e6>
 800f144:	2e01      	cmp	r6, #1
 800f146:	d103      	bne.n	800f150 <_strtod_l+0xab4>
 800f148:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d100      	bne.n	800f150 <_strtod_l+0xab4>
 800f14e:	e582      	b.n	800ec56 <_strtod_l+0x5ba>
 800f150:	2300      	movs	r3, #0
 800f152:	4c55      	ldr	r4, [pc, #340]	; (800f2a8 <_strtod_l+0xc0c>)
 800f154:	e791      	b.n	800f07a <_strtod_l+0x9de>
 800f156:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f158:	4c52      	ldr	r4, [pc, #328]	; (800f2a4 <_strtod_l+0xc08>)
 800f15a:	e7e9      	b.n	800f130 <_strtod_l+0xa94>
 800f15c:	2200      	movs	r2, #0
 800f15e:	0020      	movs	r0, r4
 800f160:	0029      	movs	r1, r5
 800f162:	4b50      	ldr	r3, [pc, #320]	; (800f2a4 <_strtod_l+0xc08>)
 800f164:	f7f3 f864 	bl	8002230 <__aeabi_dmul>
 800f168:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f16a:	0005      	movs	r5, r0
 800f16c:	000b      	movs	r3, r1
 800f16e:	000c      	movs	r4, r1
 800f170:	2a00      	cmp	r2, #0
 800f172:	d107      	bne.n	800f184 <_strtod_l+0xae8>
 800f174:	2280      	movs	r2, #128	; 0x80
 800f176:	0612      	lsls	r2, r2, #24
 800f178:	188b      	adds	r3, r1, r2
 800f17a:	9016      	str	r0, [sp, #88]	; 0x58
 800f17c:	9317      	str	r3, [sp, #92]	; 0x5c
 800f17e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800f180:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f182:	e7dc      	b.n	800f13e <_strtod_l+0xaa2>
 800f184:	0002      	movs	r2, r0
 800f186:	9216      	str	r2, [sp, #88]	; 0x58
 800f188:	9317      	str	r3, [sp, #92]	; 0x5c
 800f18a:	e7f8      	b.n	800f17e <_strtod_l+0xae2>
 800f18c:	23d4      	movs	r3, #212	; 0xd4
 800f18e:	049b      	lsls	r3, r3, #18
 800f190:	18cf      	adds	r7, r1, r3
 800f192:	9b08      	ldr	r3, [sp, #32]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d1a5      	bne.n	800f0e4 <_strtod_l+0xa48>
 800f198:	4b3d      	ldr	r3, [pc, #244]	; (800f290 <_strtod_l+0xbf4>)
 800f19a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f19c:	403b      	ands	r3, r7
 800f19e:	429a      	cmp	r2, r3
 800f1a0:	d1a0      	bne.n	800f0e4 <_strtod_l+0xa48>
 800f1a2:	0028      	movs	r0, r5
 800f1a4:	0021      	movs	r1, r4
 800f1a6:	f7f1 f9f5 	bl	8000594 <__aeabi_d2lz>
 800f1aa:	f7f1 fa2f 	bl	800060c <__aeabi_l2d>
 800f1ae:	0002      	movs	r2, r0
 800f1b0:	000b      	movs	r3, r1
 800f1b2:	0028      	movs	r0, r5
 800f1b4:	0021      	movs	r1, r4
 800f1b6:	f7f3 faa7 	bl	8002708 <__aeabi_dsub>
 800f1ba:	033b      	lsls	r3, r7, #12
 800f1bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f1be:	0b1b      	lsrs	r3, r3, #12
 800f1c0:	4333      	orrs	r3, r6
 800f1c2:	4313      	orrs	r3, r2
 800f1c4:	0004      	movs	r4, r0
 800f1c6:	000d      	movs	r5, r1
 800f1c8:	4a38      	ldr	r2, [pc, #224]	; (800f2ac <_strtod_l+0xc10>)
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d055      	beq.n	800f27a <_strtod_l+0xbde>
 800f1ce:	4b38      	ldr	r3, [pc, #224]	; (800f2b0 <_strtod_l+0xc14>)
 800f1d0:	f7f1 f948 	bl	8000464 <__aeabi_dcmplt>
 800f1d4:	2800      	cmp	r0, #0
 800f1d6:	d000      	beq.n	800f1da <_strtod_l+0xb3e>
 800f1d8:	e4d3      	b.n	800eb82 <_strtod_l+0x4e6>
 800f1da:	0020      	movs	r0, r4
 800f1dc:	0029      	movs	r1, r5
 800f1de:	4a35      	ldr	r2, [pc, #212]	; (800f2b4 <_strtod_l+0xc18>)
 800f1e0:	4b30      	ldr	r3, [pc, #192]	; (800f2a4 <_strtod_l+0xc08>)
 800f1e2:	f7f1 f953 	bl	800048c <__aeabi_dcmpgt>
 800f1e6:	2800      	cmp	r0, #0
 800f1e8:	d100      	bne.n	800f1ec <_strtod_l+0xb50>
 800f1ea:	e77b      	b.n	800f0e4 <_strtod_l+0xa48>
 800f1ec:	e4c9      	b.n	800eb82 <_strtod_l+0x4e6>
 800f1ee:	9b08      	ldr	r3, [sp, #32]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d02b      	beq.n	800f24c <_strtod_l+0xbb0>
 800f1f4:	23d4      	movs	r3, #212	; 0xd4
 800f1f6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f1f8:	04db      	lsls	r3, r3, #19
 800f1fa:	429a      	cmp	r2, r3
 800f1fc:	d826      	bhi.n	800f24c <_strtod_l+0xbb0>
 800f1fe:	0028      	movs	r0, r5
 800f200:	0021      	movs	r1, r4
 800f202:	4a2d      	ldr	r2, [pc, #180]	; (800f2b8 <_strtod_l+0xc1c>)
 800f204:	4b2d      	ldr	r3, [pc, #180]	; (800f2bc <_strtod_l+0xc20>)
 800f206:	f7f1 f937 	bl	8000478 <__aeabi_dcmple>
 800f20a:	2800      	cmp	r0, #0
 800f20c:	d017      	beq.n	800f23e <_strtod_l+0xba2>
 800f20e:	0028      	movs	r0, r5
 800f210:	0021      	movs	r1, r4
 800f212:	f7f1 f9a1 	bl	8000558 <__aeabi_d2uiz>
 800f216:	2800      	cmp	r0, #0
 800f218:	d100      	bne.n	800f21c <_strtod_l+0xb80>
 800f21a:	3001      	adds	r0, #1
 800f21c:	f7f3 fe8a 	bl	8002f34 <__aeabi_ui2d>
 800f220:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f222:	0005      	movs	r5, r0
 800f224:	000b      	movs	r3, r1
 800f226:	000c      	movs	r4, r1
 800f228:	2a00      	cmp	r2, #0
 800f22a:	d122      	bne.n	800f272 <_strtod_l+0xbd6>
 800f22c:	2280      	movs	r2, #128	; 0x80
 800f22e:	0612      	lsls	r2, r2, #24
 800f230:	188b      	adds	r3, r1, r2
 800f232:	9018      	str	r0, [sp, #96]	; 0x60
 800f234:	9319      	str	r3, [sp, #100]	; 0x64
 800f236:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f238:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f23a:	9210      	str	r2, [sp, #64]	; 0x40
 800f23c:	9311      	str	r3, [sp, #68]	; 0x44
 800f23e:	22d6      	movs	r2, #214	; 0xd6
 800f240:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f242:	04d2      	lsls	r2, r2, #19
 800f244:	189b      	adds	r3, r3, r2
 800f246:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f248:	1a9b      	subs	r3, r3, r2
 800f24a:	9311      	str	r3, [sp, #68]	; 0x44
 800f24c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800f24e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800f250:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800f252:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800f254:	f001 f982 	bl	801055c <__ulp>
 800f258:	0002      	movs	r2, r0
 800f25a:	000b      	movs	r3, r1
 800f25c:	0030      	movs	r0, r6
 800f25e:	0039      	movs	r1, r7
 800f260:	f7f2 ffe6 	bl	8002230 <__aeabi_dmul>
 800f264:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f266:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f268:	f7f2 f8a4 	bl	80013b4 <__aeabi_dadd>
 800f26c:	0006      	movs	r6, r0
 800f26e:	000f      	movs	r7, r1
 800f270:	e78f      	b.n	800f192 <_strtod_l+0xaf6>
 800f272:	0002      	movs	r2, r0
 800f274:	9218      	str	r2, [sp, #96]	; 0x60
 800f276:	9319      	str	r3, [sp, #100]	; 0x64
 800f278:	e7dd      	b.n	800f236 <_strtod_l+0xb9a>
 800f27a:	4b11      	ldr	r3, [pc, #68]	; (800f2c0 <_strtod_l+0xc24>)
 800f27c:	f7f1 f8f2 	bl	8000464 <__aeabi_dcmplt>
 800f280:	e7b1      	b.n	800f1e6 <_strtod_l+0xb4a>
 800f282:	46c0      	nop			; (mov r8, r8)
 800f284:	fff00000 	.word	0xfff00000
 800f288:	000fffff 	.word	0x000fffff
 800f28c:	3ff00000 	.word	0x3ff00000
 800f290:	7ff00000 	.word	0x7ff00000
 800f294:	7fe00000 	.word	0x7fe00000
 800f298:	fcb00000 	.word	0xfcb00000
 800f29c:	7c9fffff 	.word	0x7c9fffff
 800f2a0:	7fefffff 	.word	0x7fefffff
 800f2a4:	3fe00000 	.word	0x3fe00000
 800f2a8:	bff00000 	.word	0xbff00000
 800f2ac:	94a03595 	.word	0x94a03595
 800f2b0:	3fdfffff 	.word	0x3fdfffff
 800f2b4:	35afe535 	.word	0x35afe535
 800f2b8:	ffc00000 	.word	0xffc00000
 800f2bc:	41dfffff 	.word	0x41dfffff
 800f2c0:	3fcfffff 	.word	0x3fcfffff

0800f2c4 <strtof>:
 800f2c4:	000a      	movs	r2, r1
 800f2c6:	0001      	movs	r1, r0
 800f2c8:	4824      	ldr	r0, [pc, #144]	; (800f35c <strtof+0x98>)
 800f2ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2cc:	6800      	ldr	r0, [r0, #0]
 800f2ce:	4b24      	ldr	r3, [pc, #144]	; (800f360 <strtof+0x9c>)
 800f2d0:	f7ff f9e4 	bl	800e69c <_strtod_l>
 800f2d4:	0006      	movs	r6, r0
 800f2d6:	000c      	movs	r4, r1
 800f2d8:	0002      	movs	r2, r0
 800f2da:	000b      	movs	r3, r1
 800f2dc:	0030      	movs	r0, r6
 800f2de:	0021      	movs	r1, r4
 800f2e0:	f7f3 fda4 	bl	8002e2c <__aeabi_dcmpun>
 800f2e4:	2800      	cmp	r0, #0
 800f2e6:	d00d      	beq.n	800f304 <strtof+0x40>
 800f2e8:	481e      	ldr	r0, [pc, #120]	; (800f364 <strtof+0xa0>)
 800f2ea:	2c00      	cmp	r4, #0
 800f2ec:	da06      	bge.n	800f2fc <strtof+0x38>
 800f2ee:	f001 fe85 	bl	8010ffc <nanf>
 800f2f2:	2380      	movs	r3, #128	; 0x80
 800f2f4:	061b      	lsls	r3, r3, #24
 800f2f6:	18c5      	adds	r5, r0, r3
 800f2f8:	1c28      	adds	r0, r5, #0
 800f2fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f2fc:	f001 fe7e 	bl	8010ffc <nanf>
 800f300:	1c05      	adds	r5, r0, #0
 800f302:	e7f9      	b.n	800f2f8 <strtof+0x34>
 800f304:	0021      	movs	r1, r4
 800f306:	0030      	movs	r0, r6
 800f308:	f7f3 fe82 	bl	8003010 <__aeabi_d2f>
 800f30c:	0047      	lsls	r7, r0, #1
 800f30e:	087f      	lsrs	r7, r7, #1
 800f310:	1c05      	adds	r5, r0, #0
 800f312:	4915      	ldr	r1, [pc, #84]	; (800f368 <strtof+0xa4>)
 800f314:	1c38      	adds	r0, r7, #0
 800f316:	f7f1 ffc9 	bl	80012ac <__aeabi_fcmpun>
 800f31a:	2800      	cmp	r0, #0
 800f31c:	d1ec      	bne.n	800f2f8 <strtof+0x34>
 800f31e:	4912      	ldr	r1, [pc, #72]	; (800f368 <strtof+0xa4>)
 800f320:	1c38      	adds	r0, r7, #0
 800f322:	f7f1 f8e3 	bl	80004ec <__aeabi_fcmple>
 800f326:	2800      	cmp	r0, #0
 800f328:	d1e6      	bne.n	800f2f8 <strtof+0x34>
 800f32a:	2201      	movs	r2, #1
 800f32c:	0064      	lsls	r4, r4, #1
 800f32e:	0864      	lsrs	r4, r4, #1
 800f330:	0030      	movs	r0, r6
 800f332:	0021      	movs	r1, r4
 800f334:	4b0d      	ldr	r3, [pc, #52]	; (800f36c <strtof+0xa8>)
 800f336:	4252      	negs	r2, r2
 800f338:	f7f3 fd78 	bl	8002e2c <__aeabi_dcmpun>
 800f33c:	2800      	cmp	r0, #0
 800f33e:	d108      	bne.n	800f352 <strtof+0x8e>
 800f340:	2201      	movs	r2, #1
 800f342:	0030      	movs	r0, r6
 800f344:	0021      	movs	r1, r4
 800f346:	4b09      	ldr	r3, [pc, #36]	; (800f36c <strtof+0xa8>)
 800f348:	4252      	negs	r2, r2
 800f34a:	f7f1 f895 	bl	8000478 <__aeabi_dcmple>
 800f34e:	2800      	cmp	r0, #0
 800f350:	d0d2      	beq.n	800f2f8 <strtof+0x34>
 800f352:	2222      	movs	r2, #34	; 0x22
 800f354:	4b01      	ldr	r3, [pc, #4]	; (800f35c <strtof+0x98>)
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	601a      	str	r2, [r3, #0]
 800f35a:	e7cd      	b.n	800f2f8 <strtof+0x34>
 800f35c:	200000b4 	.word	0x200000b4
 800f360:	2000011c 	.word	0x2000011c
 800f364:	08013412 	.word	0x08013412
 800f368:	7f7fffff 	.word	0x7f7fffff
 800f36c:	7fefffff 	.word	0x7fefffff

0800f370 <_strtol_l.constprop.0>:
 800f370:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f372:	b087      	sub	sp, #28
 800f374:	001e      	movs	r6, r3
 800f376:	9005      	str	r0, [sp, #20]
 800f378:	9101      	str	r1, [sp, #4]
 800f37a:	9202      	str	r2, [sp, #8]
 800f37c:	2b01      	cmp	r3, #1
 800f37e:	d045      	beq.n	800f40c <_strtol_l.constprop.0+0x9c>
 800f380:	000b      	movs	r3, r1
 800f382:	2e24      	cmp	r6, #36	; 0x24
 800f384:	d842      	bhi.n	800f40c <_strtol_l.constprop.0+0x9c>
 800f386:	4a3f      	ldr	r2, [pc, #252]	; (800f484 <_strtol_l.constprop.0+0x114>)
 800f388:	2108      	movs	r1, #8
 800f38a:	4694      	mov	ip, r2
 800f38c:	001a      	movs	r2, r3
 800f38e:	4660      	mov	r0, ip
 800f390:	7814      	ldrb	r4, [r2, #0]
 800f392:	3301      	adds	r3, #1
 800f394:	5d00      	ldrb	r0, [r0, r4]
 800f396:	001d      	movs	r5, r3
 800f398:	0007      	movs	r7, r0
 800f39a:	400f      	ands	r7, r1
 800f39c:	4208      	tst	r0, r1
 800f39e:	d1f5      	bne.n	800f38c <_strtol_l.constprop.0+0x1c>
 800f3a0:	2c2d      	cmp	r4, #45	; 0x2d
 800f3a2:	d13a      	bne.n	800f41a <_strtol_l.constprop.0+0xaa>
 800f3a4:	2701      	movs	r7, #1
 800f3a6:	781c      	ldrb	r4, [r3, #0]
 800f3a8:	1c95      	adds	r5, r2, #2
 800f3aa:	2e00      	cmp	r6, #0
 800f3ac:	d065      	beq.n	800f47a <_strtol_l.constprop.0+0x10a>
 800f3ae:	2e10      	cmp	r6, #16
 800f3b0:	d109      	bne.n	800f3c6 <_strtol_l.constprop.0+0x56>
 800f3b2:	2c30      	cmp	r4, #48	; 0x30
 800f3b4:	d107      	bne.n	800f3c6 <_strtol_l.constprop.0+0x56>
 800f3b6:	2220      	movs	r2, #32
 800f3b8:	782b      	ldrb	r3, [r5, #0]
 800f3ba:	4393      	bics	r3, r2
 800f3bc:	2b58      	cmp	r3, #88	; 0x58
 800f3be:	d157      	bne.n	800f470 <_strtol_l.constprop.0+0x100>
 800f3c0:	2610      	movs	r6, #16
 800f3c2:	786c      	ldrb	r4, [r5, #1]
 800f3c4:	3502      	adds	r5, #2
 800f3c6:	4b30      	ldr	r3, [pc, #192]	; (800f488 <_strtol_l.constprop.0+0x118>)
 800f3c8:	0031      	movs	r1, r6
 800f3ca:	18fb      	adds	r3, r7, r3
 800f3cc:	0018      	movs	r0, r3
 800f3ce:	9303      	str	r3, [sp, #12]
 800f3d0:	f7f0 ff42 	bl	8000258 <__aeabi_uidivmod>
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	2201      	movs	r2, #1
 800f3d8:	4684      	mov	ip, r0
 800f3da:	0018      	movs	r0, r3
 800f3dc:	9104      	str	r1, [sp, #16]
 800f3de:	4252      	negs	r2, r2
 800f3e0:	0021      	movs	r1, r4
 800f3e2:	3930      	subs	r1, #48	; 0x30
 800f3e4:	2909      	cmp	r1, #9
 800f3e6:	d81d      	bhi.n	800f424 <_strtol_l.constprop.0+0xb4>
 800f3e8:	000c      	movs	r4, r1
 800f3ea:	42a6      	cmp	r6, r4
 800f3ec:	dd28      	ble.n	800f440 <_strtol_l.constprop.0+0xd0>
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	db24      	blt.n	800f43c <_strtol_l.constprop.0+0xcc>
 800f3f2:	0013      	movs	r3, r2
 800f3f4:	4584      	cmp	ip, r0
 800f3f6:	d306      	bcc.n	800f406 <_strtol_l.constprop.0+0x96>
 800f3f8:	d102      	bne.n	800f400 <_strtol_l.constprop.0+0x90>
 800f3fa:	9904      	ldr	r1, [sp, #16]
 800f3fc:	42a1      	cmp	r1, r4
 800f3fe:	db02      	blt.n	800f406 <_strtol_l.constprop.0+0x96>
 800f400:	2301      	movs	r3, #1
 800f402:	4370      	muls	r0, r6
 800f404:	1820      	adds	r0, r4, r0
 800f406:	782c      	ldrb	r4, [r5, #0]
 800f408:	3501      	adds	r5, #1
 800f40a:	e7e9      	b.n	800f3e0 <_strtol_l.constprop.0+0x70>
 800f40c:	f7ff f88c 	bl	800e528 <__errno>
 800f410:	2316      	movs	r3, #22
 800f412:	6003      	str	r3, [r0, #0]
 800f414:	2000      	movs	r0, #0
 800f416:	b007      	add	sp, #28
 800f418:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f41a:	2c2b      	cmp	r4, #43	; 0x2b
 800f41c:	d1c5      	bne.n	800f3aa <_strtol_l.constprop.0+0x3a>
 800f41e:	781c      	ldrb	r4, [r3, #0]
 800f420:	1c95      	adds	r5, r2, #2
 800f422:	e7c2      	b.n	800f3aa <_strtol_l.constprop.0+0x3a>
 800f424:	0021      	movs	r1, r4
 800f426:	3941      	subs	r1, #65	; 0x41
 800f428:	2919      	cmp	r1, #25
 800f42a:	d801      	bhi.n	800f430 <_strtol_l.constprop.0+0xc0>
 800f42c:	3c37      	subs	r4, #55	; 0x37
 800f42e:	e7dc      	b.n	800f3ea <_strtol_l.constprop.0+0x7a>
 800f430:	0021      	movs	r1, r4
 800f432:	3961      	subs	r1, #97	; 0x61
 800f434:	2919      	cmp	r1, #25
 800f436:	d803      	bhi.n	800f440 <_strtol_l.constprop.0+0xd0>
 800f438:	3c57      	subs	r4, #87	; 0x57
 800f43a:	e7d6      	b.n	800f3ea <_strtol_l.constprop.0+0x7a>
 800f43c:	0013      	movs	r3, r2
 800f43e:	e7e2      	b.n	800f406 <_strtol_l.constprop.0+0x96>
 800f440:	2b00      	cmp	r3, #0
 800f442:	da09      	bge.n	800f458 <_strtol_l.constprop.0+0xe8>
 800f444:	2322      	movs	r3, #34	; 0x22
 800f446:	9a05      	ldr	r2, [sp, #20]
 800f448:	9803      	ldr	r0, [sp, #12]
 800f44a:	6013      	str	r3, [r2, #0]
 800f44c:	9b02      	ldr	r3, [sp, #8]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d0e1      	beq.n	800f416 <_strtol_l.constprop.0+0xa6>
 800f452:	1e6b      	subs	r3, r5, #1
 800f454:	9301      	str	r3, [sp, #4]
 800f456:	e007      	b.n	800f468 <_strtol_l.constprop.0+0xf8>
 800f458:	2f00      	cmp	r7, #0
 800f45a:	d000      	beq.n	800f45e <_strtol_l.constprop.0+0xee>
 800f45c:	4240      	negs	r0, r0
 800f45e:	9a02      	ldr	r2, [sp, #8]
 800f460:	2a00      	cmp	r2, #0
 800f462:	d0d8      	beq.n	800f416 <_strtol_l.constprop.0+0xa6>
 800f464:	2b00      	cmp	r3, #0
 800f466:	d1f4      	bne.n	800f452 <_strtol_l.constprop.0+0xe2>
 800f468:	9b02      	ldr	r3, [sp, #8]
 800f46a:	9a01      	ldr	r2, [sp, #4]
 800f46c:	601a      	str	r2, [r3, #0]
 800f46e:	e7d2      	b.n	800f416 <_strtol_l.constprop.0+0xa6>
 800f470:	2430      	movs	r4, #48	; 0x30
 800f472:	2e00      	cmp	r6, #0
 800f474:	d1a7      	bne.n	800f3c6 <_strtol_l.constprop.0+0x56>
 800f476:	3608      	adds	r6, #8
 800f478:	e7a5      	b.n	800f3c6 <_strtol_l.constprop.0+0x56>
 800f47a:	2c30      	cmp	r4, #48	; 0x30
 800f47c:	d09b      	beq.n	800f3b6 <_strtol_l.constprop.0+0x46>
 800f47e:	260a      	movs	r6, #10
 800f480:	e7a1      	b.n	800f3c6 <_strtol_l.constprop.0+0x56>
 800f482:	46c0      	nop			; (mov r8, r8)
 800f484:	080130a9 	.word	0x080130a9
 800f488:	7fffffff 	.word	0x7fffffff

0800f48c <strtol>:
 800f48c:	b510      	push	{r4, lr}
 800f48e:	0013      	movs	r3, r2
 800f490:	000a      	movs	r2, r1
 800f492:	0001      	movs	r1, r0
 800f494:	4802      	ldr	r0, [pc, #8]	; (800f4a0 <strtol+0x14>)
 800f496:	6800      	ldr	r0, [r0, #0]
 800f498:	f7ff ff6a 	bl	800f370 <_strtol_l.constprop.0>
 800f49c:	bd10      	pop	{r4, pc}
 800f49e:	46c0      	nop			; (mov r8, r8)
 800f4a0:	200000b4 	.word	0x200000b4

0800f4a4 <print_e>:
 800f4a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f4a6:	b08b      	sub	sp, #44	; 0x2c
 800f4a8:	000f      	movs	r7, r1
 800f4aa:	a910      	add	r1, sp, #64	; 0x40
 800f4ac:	c920      	ldmia	r1!, {r5}
 800f4ae:	780e      	ldrb	r6, [r1, #0]
 800f4b0:	a908      	add	r1, sp, #32
 800f4b2:	9104      	str	r1, [sp, #16]
 800f4b4:	a907      	add	r1, sp, #28
 800f4b6:	9103      	str	r1, [sp, #12]
 800f4b8:	a909      	add	r1, sp, #36	; 0x24
 800f4ba:	9102      	str	r1, [sp, #8]
 800f4bc:	1c69      	adds	r1, r5, #1
 800f4be:	9101      	str	r1, [sp, #4]
 800f4c0:	2102      	movs	r1, #2
 800f4c2:	9100      	str	r1, [sp, #0]
 800f4c4:	f001 fe70 	bl	80111a8 <_dtoa_r>
 800f4c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f4ca:	4b36      	ldr	r3, [pc, #216]	; (800f5a4 <print_e+0x100>)
 800f4cc:	0001      	movs	r1, r0
 800f4ce:	429a      	cmp	r2, r3
 800f4d0:	d104      	bne.n	800f4dc <print_e+0x38>
 800f4d2:	0038      	movs	r0, r7
 800f4d4:	f001 fd96 	bl	8011004 <strcpy>
 800f4d8:	b00b      	add	sp, #44	; 0x2c
 800f4da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f4dc:	7801      	ldrb	r1, [r0, #0]
 800f4de:	1c43      	adds	r3, r0, #1
 800f4e0:	1c7c      	adds	r4, r7, #1
 800f4e2:	7039      	strb	r1, [r7, #0]
 800f4e4:	2d00      	cmp	r5, #0
 800f4e6:	dd01      	ble.n	800f4ec <print_e+0x48>
 800f4e8:	2101      	movs	r1, #1
 800f4ea:	9112      	str	r1, [sp, #72]	; 0x48
 800f4ec:	212e      	movs	r1, #46	; 0x2e
 800f4ee:	7818      	ldrb	r0, [r3, #0]
 800f4f0:	2800      	cmp	r0, #0
 800f4f2:	d001      	beq.n	800f4f8 <print_e+0x54>
 800f4f4:	2d00      	cmp	r5, #0
 800f4f6:	dc35      	bgt.n	800f564 <print_e+0xc0>
 800f4f8:	2e67      	cmp	r6, #103	; 0x67
 800f4fa:	d04b      	beq.n	800f594 <print_e+0xf0>
 800f4fc:	2e47      	cmp	r6, #71	; 0x47
 800f4fe:	d04b      	beq.n	800f598 <print_e+0xf4>
 800f500:	232e      	movs	r3, #46	; 0x2e
 800f502:	2130      	movs	r1, #48	; 0x30
 800f504:	2d00      	cmp	r5, #0
 800f506:	dc3a      	bgt.n	800f57e <print_e+0xda>
 800f508:	1e53      	subs	r3, r2, #1
 800f50a:	7026      	strb	r6, [r4, #0]
 800f50c:	9309      	str	r3, [sp, #36]	; 0x24
 800f50e:	1ca5      	adds	r5, r4, #2
 800f510:	2b00      	cmp	r3, #0
 800f512:	da43      	bge.n	800f59c <print_e+0xf8>
 800f514:	232d      	movs	r3, #45	; 0x2d
 800f516:	7063      	strb	r3, [r4, #1]
 800f518:	3b2c      	subs	r3, #44	; 0x2c
 800f51a:	1a9b      	subs	r3, r3, r2
 800f51c:	9309      	str	r3, [sp, #36]	; 0x24
 800f51e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800f520:	2e63      	cmp	r6, #99	; 0x63
 800f522:	dd0d      	ble.n	800f540 <print_e+0x9c>
 800f524:	2164      	movs	r1, #100	; 0x64
 800f526:	0030      	movs	r0, r6
 800f528:	f7f0 fe9a 	bl	8000260 <__divsi3>
 800f52c:	0003      	movs	r3, r0
 800f52e:	0002      	movs	r2, r0
 800f530:	2064      	movs	r0, #100	; 0x64
 800f532:	4240      	negs	r0, r0
 800f534:	4358      	muls	r0, r3
 800f536:	3230      	adds	r2, #48	; 0x30
 800f538:	1980      	adds	r0, r0, r6
 800f53a:	1ce5      	adds	r5, r4, #3
 800f53c:	70a2      	strb	r2, [r4, #2]
 800f53e:	9009      	str	r0, [sp, #36]	; 0x24
 800f540:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800f542:	210a      	movs	r1, #10
 800f544:	0020      	movs	r0, r4
 800f546:	f7f0 fe8b 	bl	8000260 <__divsi3>
 800f54a:	0003      	movs	r3, r0
 800f54c:	0002      	movs	r2, r0
 800f54e:	200a      	movs	r0, #10
 800f550:	4240      	negs	r0, r0
 800f552:	4358      	muls	r0, r3
 800f554:	2300      	movs	r3, #0
 800f556:	1900      	adds	r0, r0, r4
 800f558:	3230      	adds	r2, #48	; 0x30
 800f55a:	3030      	adds	r0, #48	; 0x30
 800f55c:	702a      	strb	r2, [r5, #0]
 800f55e:	7068      	strb	r0, [r5, #1]
 800f560:	70ab      	strb	r3, [r5, #2]
 800f562:	e7b9      	b.n	800f4d8 <print_e+0x34>
 800f564:	9812      	ldr	r0, [sp, #72]	; 0x48
 800f566:	2800      	cmp	r0, #0
 800f568:	d001      	beq.n	800f56e <print_e+0xca>
 800f56a:	7021      	strb	r1, [r4, #0]
 800f56c:	3401      	adds	r4, #1
 800f56e:	7818      	ldrb	r0, [r3, #0]
 800f570:	3d01      	subs	r5, #1
 800f572:	7020      	strb	r0, [r4, #0]
 800f574:	2000      	movs	r0, #0
 800f576:	3301      	adds	r3, #1
 800f578:	3401      	adds	r4, #1
 800f57a:	9012      	str	r0, [sp, #72]	; 0x48
 800f57c:	e7b7      	b.n	800f4ee <print_e+0x4a>
 800f57e:	9812      	ldr	r0, [sp, #72]	; 0x48
 800f580:	2800      	cmp	r0, #0
 800f582:	d001      	beq.n	800f588 <print_e+0xe4>
 800f584:	7023      	strb	r3, [r4, #0]
 800f586:	3401      	adds	r4, #1
 800f588:	2000      	movs	r0, #0
 800f58a:	7021      	strb	r1, [r4, #0]
 800f58c:	3d01      	subs	r5, #1
 800f58e:	3401      	adds	r4, #1
 800f590:	9012      	str	r0, [sp, #72]	; 0x48
 800f592:	e7b7      	b.n	800f504 <print_e+0x60>
 800f594:	2665      	movs	r6, #101	; 0x65
 800f596:	e7b7      	b.n	800f508 <print_e+0x64>
 800f598:	2645      	movs	r6, #69	; 0x45
 800f59a:	e7b5      	b.n	800f508 <print_e+0x64>
 800f59c:	232b      	movs	r3, #43	; 0x2b
 800f59e:	7063      	strb	r3, [r4, #1]
 800f5a0:	e7bd      	b.n	800f51e <print_e+0x7a>
 800f5a2:	46c0      	nop			; (mov r8, r8)
 800f5a4:	0000270f 	.word	0x0000270f

0800f5a8 <_gcvt>:
 800f5a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f5aa:	0016      	movs	r6, r2
 800f5ac:	001d      	movs	r5, r3
 800f5ae:	b08d      	sub	sp, #52	; 0x34
 800f5b0:	ab14      	add	r3, sp, #80	; 0x50
 800f5b2:	781b      	ldrb	r3, [r3, #0]
 800f5b4:	0007      	movs	r7, r0
 800f5b6:	9307      	str	r3, [sp, #28]
 800f5b8:	2200      	movs	r2, #0
 800f5ba:	2300      	movs	r3, #0
 800f5bc:	0030      	movs	r0, r6
 800f5be:	0029      	movs	r1, r5
 800f5c0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800f5c2:	f7f0 ff4f 	bl	8000464 <__aeabi_dcmplt>
 800f5c6:	2800      	cmp	r0, #0
 800f5c8:	d002      	beq.n	800f5d0 <_gcvt+0x28>
 800f5ca:	2380      	movs	r3, #128	; 0x80
 800f5cc:	061b      	lsls	r3, r3, #24
 800f5ce:	18ed      	adds	r5, r5, r3
 800f5d0:	2200      	movs	r2, #0
 800f5d2:	2300      	movs	r3, #0
 800f5d4:	0030      	movs	r0, r6
 800f5d6:	0029      	movs	r1, r5
 800f5d8:	f7f0 ff3e 	bl	8000458 <__aeabi_dcmpeq>
 800f5dc:	2800      	cmp	r0, #0
 800f5de:	d006      	beq.n	800f5ee <_gcvt+0x46>
 800f5e0:	2330      	movs	r3, #48	; 0x30
 800f5e2:	7023      	strb	r3, [r4, #0]
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	7063      	strb	r3, [r4, #1]
 800f5e8:	0020      	movs	r0, r4
 800f5ea:	b00d      	add	sp, #52	; 0x34
 800f5ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f5ee:	0030      	movs	r0, r6
 800f5f0:	0029      	movs	r1, r5
 800f5f2:	4a52      	ldr	r2, [pc, #328]	; (800f73c <_gcvt+0x194>)
 800f5f4:	4b52      	ldr	r3, [pc, #328]	; (800f740 <_gcvt+0x198>)
 800f5f6:	f7f0 ff3f 	bl	8000478 <__aeabi_dcmple>
 800f5fa:	2800      	cmp	r0, #0
 800f5fc:	d00d      	beq.n	800f61a <_gcvt+0x72>
 800f5fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f600:	0032      	movs	r2, r6
 800f602:	9302      	str	r3, [sp, #8]
 800f604:	9b07      	ldr	r3, [sp, #28]
 800f606:	0021      	movs	r1, r4
 800f608:	9301      	str	r3, [sp, #4]
 800f60a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f60c:	0038      	movs	r0, r7
 800f60e:	3b01      	subs	r3, #1
 800f610:	9300      	str	r3, [sp, #0]
 800f612:	002b      	movs	r3, r5
 800f614:	f7ff ff46 	bl	800f4a4 <print_e>
 800f618:	e7e6      	b.n	800f5e8 <_gcvt+0x40>
 800f61a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800f61c:	f001 f8a0 	bl	8010760 <_mprec_log10>
 800f620:	0032      	movs	r2, r6
 800f622:	002b      	movs	r3, r5
 800f624:	f7f0 ff28 	bl	8000478 <__aeabi_dcmple>
 800f628:	2800      	cmp	r0, #0
 800f62a:	d1e8      	bne.n	800f5fe <_gcvt+0x56>
 800f62c:	ab0b      	add	r3, sp, #44	; 0x2c
 800f62e:	9304      	str	r3, [sp, #16]
 800f630:	ab0a      	add	r3, sp, #40	; 0x28
 800f632:	9303      	str	r3, [sp, #12]
 800f634:	ab09      	add	r3, sp, #36	; 0x24
 800f636:	9302      	str	r3, [sp, #8]
 800f638:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f63a:	0032      	movs	r2, r6
 800f63c:	9301      	str	r3, [sp, #4]
 800f63e:	2302      	movs	r3, #2
 800f640:	0038      	movs	r0, r7
 800f642:	9300      	str	r3, [sp, #0]
 800f644:	002b      	movs	r3, r5
 800f646:	f001 fdaf 	bl	80111a8 <_dtoa_r>
 800f64a:	4b3e      	ldr	r3, [pc, #248]	; (800f744 <_gcvt+0x19c>)
 800f64c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f64e:	0001      	movs	r1, r0
 800f650:	0020      	movs	r0, r4
 800f652:	429a      	cmp	r2, r3
 800f654:	d00c      	beq.n	800f670 <_gcvt+0xc8>
 800f656:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f658:	18e5      	adds	r5, r4, r3
 800f65a:	780e      	ldrb	r6, [r1, #0]
 800f65c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f65e:	1a2b      	subs	r3, r5, r0
 800f660:	2e00      	cmp	r6, #0
 800f662:	d001      	beq.n	800f668 <_gcvt+0xc0>
 800f664:	2a00      	cmp	r2, #0
 800f666:	dc06      	bgt.n	800f676 <_gcvt+0xce>
 800f668:	2501      	movs	r5, #1
 800f66a:	2600      	movs	r6, #0
 800f66c:	46ac      	mov	ip, r5
 800f66e:	e00d      	b.n	800f68c <_gcvt+0xe4>
 800f670:	f001 fcc8 	bl	8011004 <strcpy>
 800f674:	e7b8      	b.n	800f5e8 <_gcvt+0x40>
 800f676:	3a01      	subs	r2, #1
 800f678:	7006      	strb	r6, [r0, #0]
 800f67a:	3101      	adds	r1, #1
 800f67c:	9209      	str	r2, [sp, #36]	; 0x24
 800f67e:	3001      	adds	r0, #1
 800f680:	e7eb      	b.n	800f65a <_gcvt+0xb2>
 800f682:	2530      	movs	r5, #48	; 0x30
 800f684:	4666      	mov	r6, ip
 800f686:	7005      	strb	r5, [r0, #0]
 800f688:	3b01      	subs	r3, #1
 800f68a:	3001      	adds	r0, #1
 800f68c:	0005      	movs	r5, r0
 800f68e:	1e17      	subs	r7, r2, #0
 800f690:	dc35      	bgt.n	800f6fe <_gcvt+0x156>
 800f692:	2e00      	cmp	r6, #0
 800f694:	d000      	beq.n	800f698 <_gcvt+0xf0>
 800f696:	9209      	str	r2, [sp, #36]	; 0x24
 800f698:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f69a:	2a00      	cmp	r2, #0
 800f69c:	d102      	bne.n	800f6a4 <_gcvt+0xfc>
 800f69e:	780a      	ldrb	r2, [r1, #0]
 800f6a0:	2a00      	cmp	r2, #0
 800f6a2:	d029      	beq.n	800f6f8 <_gcvt+0x150>
 800f6a4:	4284      	cmp	r4, r0
 800f6a6:	d102      	bne.n	800f6ae <_gcvt+0x106>
 800f6a8:	2230      	movs	r2, #48	; 0x30
 800f6aa:	1c65      	adds	r5, r4, #1
 800f6ac:	7022      	strb	r2, [r4, #0]
 800f6ae:	222e      	movs	r2, #46	; 0x2e
 800f6b0:	702a      	strb	r2, [r5, #0]
 800f6b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f6b4:	0028      	movs	r0, r5
 800f6b6:	1b57      	subs	r7, r2, r5
 800f6b8:	9707      	str	r7, [sp, #28]
 800f6ba:	2701      	movs	r7, #1
 800f6bc:	2600      	movs	r6, #0
 800f6be:	46bc      	mov	ip, r7
 800f6c0:	9f07      	ldr	r7, [sp, #28]
 800f6c2:	42c7      	cmn	r7, r0
 800f6c4:	d422      	bmi.n	800f70c <_gcvt+0x164>
 800f6c6:	2000      	movs	r0, #0
 800f6c8:	4257      	negs	r7, r2
 800f6ca:	4282      	cmp	r2, r0
 800f6cc:	dc00      	bgt.n	800f6d0 <_gcvt+0x128>
 800f6ce:	0038      	movs	r0, r7
 800f6d0:	3001      	adds	r0, #1
 800f6d2:	182d      	adds	r5, r5, r0
 800f6d4:	2000      	movs	r0, #0
 800f6d6:	4282      	cmp	r2, r0
 800f6d8:	dc00      	bgt.n	800f6dc <_gcvt+0x134>
 800f6da:	0038      	movs	r0, r7
 800f6dc:	1810      	adds	r0, r2, r0
 800f6de:	2e00      	cmp	r6, #0
 800f6e0:	d000      	beq.n	800f6e4 <_gcvt+0x13c>
 800f6e2:	9009      	str	r0, [sp, #36]	; 0x24
 800f6e4:	002a      	movs	r2, r5
 800f6e6:	7808      	ldrb	r0, [r1, #0]
 800f6e8:	0015      	movs	r5, r2
 800f6ea:	2800      	cmp	r0, #0
 800f6ec:	d001      	beq.n	800f6f2 <_gcvt+0x14a>
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	dc11      	bgt.n	800f716 <_gcvt+0x16e>
 800f6f2:	9915      	ldr	r1, [sp, #84]	; 0x54
 800f6f4:	2900      	cmp	r1, #0
 800f6f6:	d11d      	bne.n	800f734 <_gcvt+0x18c>
 800f6f8:	2300      	movs	r3, #0
 800f6fa:	702b      	strb	r3, [r5, #0]
 800f6fc:	e774      	b.n	800f5e8 <_gcvt+0x40>
 800f6fe:	3a01      	subs	r2, #1
 800f700:	2b00      	cmp	r3, #0
 800f702:	dcbe      	bgt.n	800f682 <_gcvt+0xda>
 800f704:	2e00      	cmp	r6, #0
 800f706:	d0c7      	beq.n	800f698 <_gcvt+0xf0>
 800f708:	9709      	str	r7, [sp, #36]	; 0x24
 800f70a:	e7c5      	b.n	800f698 <_gcvt+0xf0>
 800f70c:	2630      	movs	r6, #48	; 0x30
 800f70e:	3001      	adds	r0, #1
 800f710:	7006      	strb	r6, [r0, #0]
 800f712:	4666      	mov	r6, ip
 800f714:	e7d4      	b.n	800f6c0 <_gcvt+0x118>
 800f716:	7010      	strb	r0, [r2, #0]
 800f718:	3101      	adds	r1, #1
 800f71a:	3b01      	subs	r3, #1
 800f71c:	3201      	adds	r2, #1
 800f71e:	e7e2      	b.n	800f6e6 <_gcvt+0x13e>
 800f720:	700e      	strb	r6, [r1, #0]
 800f722:	3101      	adds	r1, #1
 800f724:	1a68      	subs	r0, r5, r1
 800f726:	2800      	cmp	r0, #0
 800f728:	dcfa      	bgt.n	800f720 <_gcvt+0x178>
 800f72a:	43dd      	mvns	r5, r3
 800f72c:	17ed      	asrs	r5, r5, #31
 800f72e:	401d      	ands	r5, r3
 800f730:	1955      	adds	r5, r2, r5
 800f732:	e7e1      	b.n	800f6f8 <_gcvt+0x150>
 800f734:	0011      	movs	r1, r2
 800f736:	2630      	movs	r6, #48	; 0x30
 800f738:	189d      	adds	r5, r3, r2
 800f73a:	e7f3      	b.n	800f724 <_gcvt+0x17c>
 800f73c:	eb1c432d 	.word	0xeb1c432d
 800f740:	3f1a36e2 	.word	0x3f1a36e2
 800f744:	0000270f 	.word	0x0000270f

0800f748 <rshift>:
 800f748:	0002      	movs	r2, r0
 800f74a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f74c:	6904      	ldr	r4, [r0, #16]
 800f74e:	3214      	adds	r2, #20
 800f750:	0013      	movs	r3, r2
 800f752:	b085      	sub	sp, #20
 800f754:	114f      	asrs	r7, r1, #5
 800f756:	42bc      	cmp	r4, r7
 800f758:	dd31      	ble.n	800f7be <rshift+0x76>
 800f75a:	00bb      	lsls	r3, r7, #2
 800f75c:	18d3      	adds	r3, r2, r3
 800f75e:	261f      	movs	r6, #31
 800f760:	9301      	str	r3, [sp, #4]
 800f762:	000b      	movs	r3, r1
 800f764:	00a5      	lsls	r5, r4, #2
 800f766:	4033      	ands	r3, r6
 800f768:	1955      	adds	r5, r2, r5
 800f76a:	9302      	str	r3, [sp, #8]
 800f76c:	4231      	tst	r1, r6
 800f76e:	d10c      	bne.n	800f78a <rshift+0x42>
 800f770:	0016      	movs	r6, r2
 800f772:	9901      	ldr	r1, [sp, #4]
 800f774:	428d      	cmp	r5, r1
 800f776:	d838      	bhi.n	800f7ea <rshift+0xa2>
 800f778:	9901      	ldr	r1, [sp, #4]
 800f77a:	2300      	movs	r3, #0
 800f77c:	3903      	subs	r1, #3
 800f77e:	428d      	cmp	r5, r1
 800f780:	d301      	bcc.n	800f786 <rshift+0x3e>
 800f782:	1be3      	subs	r3, r4, r7
 800f784:	009b      	lsls	r3, r3, #2
 800f786:	18d3      	adds	r3, r2, r3
 800f788:	e019      	b.n	800f7be <rshift+0x76>
 800f78a:	2120      	movs	r1, #32
 800f78c:	9b02      	ldr	r3, [sp, #8]
 800f78e:	9e01      	ldr	r6, [sp, #4]
 800f790:	1acb      	subs	r3, r1, r3
 800f792:	9303      	str	r3, [sp, #12]
 800f794:	ce02      	ldmia	r6!, {r1}
 800f796:	9b02      	ldr	r3, [sp, #8]
 800f798:	4694      	mov	ip, r2
 800f79a:	40d9      	lsrs	r1, r3
 800f79c:	9100      	str	r1, [sp, #0]
 800f79e:	42b5      	cmp	r5, r6
 800f7a0:	d816      	bhi.n	800f7d0 <rshift+0x88>
 800f7a2:	9e01      	ldr	r6, [sp, #4]
 800f7a4:	2300      	movs	r3, #0
 800f7a6:	3601      	adds	r6, #1
 800f7a8:	42b5      	cmp	r5, r6
 800f7aa:	d302      	bcc.n	800f7b2 <rshift+0x6a>
 800f7ac:	1be3      	subs	r3, r4, r7
 800f7ae:	009b      	lsls	r3, r3, #2
 800f7b0:	3b04      	subs	r3, #4
 800f7b2:	9900      	ldr	r1, [sp, #0]
 800f7b4:	18d3      	adds	r3, r2, r3
 800f7b6:	6019      	str	r1, [r3, #0]
 800f7b8:	2900      	cmp	r1, #0
 800f7ba:	d000      	beq.n	800f7be <rshift+0x76>
 800f7bc:	3304      	adds	r3, #4
 800f7be:	1a99      	subs	r1, r3, r2
 800f7c0:	1089      	asrs	r1, r1, #2
 800f7c2:	6101      	str	r1, [r0, #16]
 800f7c4:	4293      	cmp	r3, r2
 800f7c6:	d101      	bne.n	800f7cc <rshift+0x84>
 800f7c8:	2300      	movs	r3, #0
 800f7ca:	6143      	str	r3, [r0, #20]
 800f7cc:	b005      	add	sp, #20
 800f7ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f7d0:	6833      	ldr	r3, [r6, #0]
 800f7d2:	9903      	ldr	r1, [sp, #12]
 800f7d4:	408b      	lsls	r3, r1
 800f7d6:	9900      	ldr	r1, [sp, #0]
 800f7d8:	4319      	orrs	r1, r3
 800f7da:	4663      	mov	r3, ip
 800f7dc:	c302      	stmia	r3!, {r1}
 800f7de:	469c      	mov	ip, r3
 800f7e0:	ce02      	ldmia	r6!, {r1}
 800f7e2:	9b02      	ldr	r3, [sp, #8]
 800f7e4:	40d9      	lsrs	r1, r3
 800f7e6:	9100      	str	r1, [sp, #0]
 800f7e8:	e7d9      	b.n	800f79e <rshift+0x56>
 800f7ea:	c908      	ldmia	r1!, {r3}
 800f7ec:	c608      	stmia	r6!, {r3}
 800f7ee:	e7c1      	b.n	800f774 <rshift+0x2c>

0800f7f0 <__hexdig_fun>:
 800f7f0:	0002      	movs	r2, r0
 800f7f2:	3a30      	subs	r2, #48	; 0x30
 800f7f4:	0003      	movs	r3, r0
 800f7f6:	2a09      	cmp	r2, #9
 800f7f8:	d802      	bhi.n	800f800 <__hexdig_fun+0x10>
 800f7fa:	3b20      	subs	r3, #32
 800f7fc:	b2d8      	uxtb	r0, r3
 800f7fe:	4770      	bx	lr
 800f800:	0002      	movs	r2, r0
 800f802:	3a61      	subs	r2, #97	; 0x61
 800f804:	2a05      	cmp	r2, #5
 800f806:	d801      	bhi.n	800f80c <__hexdig_fun+0x1c>
 800f808:	3b47      	subs	r3, #71	; 0x47
 800f80a:	e7f7      	b.n	800f7fc <__hexdig_fun+0xc>
 800f80c:	001a      	movs	r2, r3
 800f80e:	3a41      	subs	r2, #65	; 0x41
 800f810:	2000      	movs	r0, #0
 800f812:	2a05      	cmp	r2, #5
 800f814:	d8f3      	bhi.n	800f7fe <__hexdig_fun+0xe>
 800f816:	3b27      	subs	r3, #39	; 0x27
 800f818:	e7f0      	b.n	800f7fc <__hexdig_fun+0xc>
	...

0800f81c <__gethex>:
 800f81c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f81e:	b08d      	sub	sp, #52	; 0x34
 800f820:	930a      	str	r3, [sp, #40]	; 0x28
 800f822:	4bbf      	ldr	r3, [pc, #764]	; (800fb20 <__gethex+0x304>)
 800f824:	9005      	str	r0, [sp, #20]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	9109      	str	r1, [sp, #36]	; 0x24
 800f82a:	0018      	movs	r0, r3
 800f82c:	9202      	str	r2, [sp, #8]
 800f82e:	9307      	str	r3, [sp, #28]
 800f830:	f7f0 fc70 	bl	8000114 <strlen>
 800f834:	2202      	movs	r2, #2
 800f836:	9b07      	ldr	r3, [sp, #28]
 800f838:	4252      	negs	r2, r2
 800f83a:	181b      	adds	r3, r3, r0
 800f83c:	3b01      	subs	r3, #1
 800f83e:	781b      	ldrb	r3, [r3, #0]
 800f840:	9003      	str	r0, [sp, #12]
 800f842:	930b      	str	r3, [sp, #44]	; 0x2c
 800f844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f846:	6819      	ldr	r1, [r3, #0]
 800f848:	1c8b      	adds	r3, r1, #2
 800f84a:	1a52      	subs	r2, r2, r1
 800f84c:	18d1      	adds	r1, r2, r3
 800f84e:	9301      	str	r3, [sp, #4]
 800f850:	9108      	str	r1, [sp, #32]
 800f852:	9901      	ldr	r1, [sp, #4]
 800f854:	3301      	adds	r3, #1
 800f856:	7808      	ldrb	r0, [r1, #0]
 800f858:	2830      	cmp	r0, #48	; 0x30
 800f85a:	d0f7      	beq.n	800f84c <__gethex+0x30>
 800f85c:	f7ff ffc8 	bl	800f7f0 <__hexdig_fun>
 800f860:	2300      	movs	r3, #0
 800f862:	001c      	movs	r4, r3
 800f864:	9304      	str	r3, [sp, #16]
 800f866:	4298      	cmp	r0, r3
 800f868:	d11f      	bne.n	800f8aa <__gethex+0x8e>
 800f86a:	9a03      	ldr	r2, [sp, #12]
 800f86c:	9907      	ldr	r1, [sp, #28]
 800f86e:	9801      	ldr	r0, [sp, #4]
 800f870:	f001 fbd0 	bl	8011014 <strncmp>
 800f874:	0007      	movs	r7, r0
 800f876:	42a0      	cmp	r0, r4
 800f878:	d000      	beq.n	800f87c <__gethex+0x60>
 800f87a:	e06b      	b.n	800f954 <__gethex+0x138>
 800f87c:	9b01      	ldr	r3, [sp, #4]
 800f87e:	9a03      	ldr	r2, [sp, #12]
 800f880:	5c98      	ldrb	r0, [r3, r2]
 800f882:	189d      	adds	r5, r3, r2
 800f884:	f7ff ffb4 	bl	800f7f0 <__hexdig_fun>
 800f888:	2301      	movs	r3, #1
 800f88a:	9304      	str	r3, [sp, #16]
 800f88c:	42a0      	cmp	r0, r4
 800f88e:	d030      	beq.n	800f8f2 <__gethex+0xd6>
 800f890:	9501      	str	r5, [sp, #4]
 800f892:	9b01      	ldr	r3, [sp, #4]
 800f894:	7818      	ldrb	r0, [r3, #0]
 800f896:	2830      	cmp	r0, #48	; 0x30
 800f898:	d009      	beq.n	800f8ae <__gethex+0x92>
 800f89a:	f7ff ffa9 	bl	800f7f0 <__hexdig_fun>
 800f89e:	4242      	negs	r2, r0
 800f8a0:	4142      	adcs	r2, r0
 800f8a2:	2301      	movs	r3, #1
 800f8a4:	002c      	movs	r4, r5
 800f8a6:	9204      	str	r2, [sp, #16]
 800f8a8:	9308      	str	r3, [sp, #32]
 800f8aa:	9d01      	ldr	r5, [sp, #4]
 800f8ac:	e004      	b.n	800f8b8 <__gethex+0x9c>
 800f8ae:	9b01      	ldr	r3, [sp, #4]
 800f8b0:	3301      	adds	r3, #1
 800f8b2:	9301      	str	r3, [sp, #4]
 800f8b4:	e7ed      	b.n	800f892 <__gethex+0x76>
 800f8b6:	3501      	adds	r5, #1
 800f8b8:	7828      	ldrb	r0, [r5, #0]
 800f8ba:	f7ff ff99 	bl	800f7f0 <__hexdig_fun>
 800f8be:	1e07      	subs	r7, r0, #0
 800f8c0:	d1f9      	bne.n	800f8b6 <__gethex+0x9a>
 800f8c2:	0028      	movs	r0, r5
 800f8c4:	9a03      	ldr	r2, [sp, #12]
 800f8c6:	9907      	ldr	r1, [sp, #28]
 800f8c8:	f001 fba4 	bl	8011014 <strncmp>
 800f8cc:	2800      	cmp	r0, #0
 800f8ce:	d10e      	bne.n	800f8ee <__gethex+0xd2>
 800f8d0:	2c00      	cmp	r4, #0
 800f8d2:	d107      	bne.n	800f8e4 <__gethex+0xc8>
 800f8d4:	9b03      	ldr	r3, [sp, #12]
 800f8d6:	18ed      	adds	r5, r5, r3
 800f8d8:	002c      	movs	r4, r5
 800f8da:	7828      	ldrb	r0, [r5, #0]
 800f8dc:	f7ff ff88 	bl	800f7f0 <__hexdig_fun>
 800f8e0:	2800      	cmp	r0, #0
 800f8e2:	d102      	bne.n	800f8ea <__gethex+0xce>
 800f8e4:	1b64      	subs	r4, r4, r5
 800f8e6:	00a7      	lsls	r7, r4, #2
 800f8e8:	e003      	b.n	800f8f2 <__gethex+0xd6>
 800f8ea:	3501      	adds	r5, #1
 800f8ec:	e7f5      	b.n	800f8da <__gethex+0xbe>
 800f8ee:	2c00      	cmp	r4, #0
 800f8f0:	d1f8      	bne.n	800f8e4 <__gethex+0xc8>
 800f8f2:	2220      	movs	r2, #32
 800f8f4:	782b      	ldrb	r3, [r5, #0]
 800f8f6:	002e      	movs	r6, r5
 800f8f8:	4393      	bics	r3, r2
 800f8fa:	2b50      	cmp	r3, #80	; 0x50
 800f8fc:	d11d      	bne.n	800f93a <__gethex+0x11e>
 800f8fe:	786b      	ldrb	r3, [r5, #1]
 800f900:	2b2b      	cmp	r3, #43	; 0x2b
 800f902:	d02c      	beq.n	800f95e <__gethex+0x142>
 800f904:	2b2d      	cmp	r3, #45	; 0x2d
 800f906:	d02e      	beq.n	800f966 <__gethex+0x14a>
 800f908:	2300      	movs	r3, #0
 800f90a:	1c6e      	adds	r6, r5, #1
 800f90c:	9306      	str	r3, [sp, #24]
 800f90e:	7830      	ldrb	r0, [r6, #0]
 800f910:	f7ff ff6e 	bl	800f7f0 <__hexdig_fun>
 800f914:	1e43      	subs	r3, r0, #1
 800f916:	b2db      	uxtb	r3, r3
 800f918:	2b18      	cmp	r3, #24
 800f91a:	d82b      	bhi.n	800f974 <__gethex+0x158>
 800f91c:	3810      	subs	r0, #16
 800f91e:	0004      	movs	r4, r0
 800f920:	7870      	ldrb	r0, [r6, #1]
 800f922:	f7ff ff65 	bl	800f7f0 <__hexdig_fun>
 800f926:	1e43      	subs	r3, r0, #1
 800f928:	b2db      	uxtb	r3, r3
 800f92a:	3601      	adds	r6, #1
 800f92c:	2b18      	cmp	r3, #24
 800f92e:	d91c      	bls.n	800f96a <__gethex+0x14e>
 800f930:	9b06      	ldr	r3, [sp, #24]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d000      	beq.n	800f938 <__gethex+0x11c>
 800f936:	4264      	negs	r4, r4
 800f938:	193f      	adds	r7, r7, r4
 800f93a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f93c:	601e      	str	r6, [r3, #0]
 800f93e:	9b04      	ldr	r3, [sp, #16]
 800f940:	2b00      	cmp	r3, #0
 800f942:	d019      	beq.n	800f978 <__gethex+0x15c>
 800f944:	2600      	movs	r6, #0
 800f946:	9b08      	ldr	r3, [sp, #32]
 800f948:	42b3      	cmp	r3, r6
 800f94a:	d100      	bne.n	800f94e <__gethex+0x132>
 800f94c:	3606      	adds	r6, #6
 800f94e:	0030      	movs	r0, r6
 800f950:	b00d      	add	sp, #52	; 0x34
 800f952:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f954:	2301      	movs	r3, #1
 800f956:	2700      	movs	r7, #0
 800f958:	9d01      	ldr	r5, [sp, #4]
 800f95a:	9304      	str	r3, [sp, #16]
 800f95c:	e7c9      	b.n	800f8f2 <__gethex+0xd6>
 800f95e:	2300      	movs	r3, #0
 800f960:	9306      	str	r3, [sp, #24]
 800f962:	1cae      	adds	r6, r5, #2
 800f964:	e7d3      	b.n	800f90e <__gethex+0xf2>
 800f966:	2301      	movs	r3, #1
 800f968:	e7fa      	b.n	800f960 <__gethex+0x144>
 800f96a:	230a      	movs	r3, #10
 800f96c:	435c      	muls	r4, r3
 800f96e:	1824      	adds	r4, r4, r0
 800f970:	3c10      	subs	r4, #16
 800f972:	e7d5      	b.n	800f920 <__gethex+0x104>
 800f974:	002e      	movs	r6, r5
 800f976:	e7e0      	b.n	800f93a <__gethex+0x11e>
 800f978:	9b01      	ldr	r3, [sp, #4]
 800f97a:	9904      	ldr	r1, [sp, #16]
 800f97c:	1aeb      	subs	r3, r5, r3
 800f97e:	3b01      	subs	r3, #1
 800f980:	2b07      	cmp	r3, #7
 800f982:	dc0a      	bgt.n	800f99a <__gethex+0x17e>
 800f984:	9805      	ldr	r0, [sp, #20]
 800f986:	f000 fa65 	bl	800fe54 <_Balloc>
 800f98a:	1e04      	subs	r4, r0, #0
 800f98c:	d108      	bne.n	800f9a0 <__gethex+0x184>
 800f98e:	0002      	movs	r2, r0
 800f990:	21de      	movs	r1, #222	; 0xde
 800f992:	4b64      	ldr	r3, [pc, #400]	; (800fb24 <__gethex+0x308>)
 800f994:	4864      	ldr	r0, [pc, #400]	; (800fb28 <__gethex+0x30c>)
 800f996:	f001 fb5d 	bl	8011054 <__assert_func>
 800f99a:	3101      	adds	r1, #1
 800f99c:	105b      	asrs	r3, r3, #1
 800f99e:	e7ef      	b.n	800f980 <__gethex+0x164>
 800f9a0:	0003      	movs	r3, r0
 800f9a2:	3314      	adds	r3, #20
 800f9a4:	9304      	str	r3, [sp, #16]
 800f9a6:	9309      	str	r3, [sp, #36]	; 0x24
 800f9a8:	2300      	movs	r3, #0
 800f9aa:	001e      	movs	r6, r3
 800f9ac:	9306      	str	r3, [sp, #24]
 800f9ae:	9b01      	ldr	r3, [sp, #4]
 800f9b0:	42ab      	cmp	r3, r5
 800f9b2:	d340      	bcc.n	800fa36 <__gethex+0x21a>
 800f9b4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800f9b6:	9b04      	ldr	r3, [sp, #16]
 800f9b8:	c540      	stmia	r5!, {r6}
 800f9ba:	1aed      	subs	r5, r5, r3
 800f9bc:	10ad      	asrs	r5, r5, #2
 800f9be:	0030      	movs	r0, r6
 800f9c0:	6125      	str	r5, [r4, #16]
 800f9c2:	f000 fb3f 	bl	8010044 <__hi0bits>
 800f9c6:	9b02      	ldr	r3, [sp, #8]
 800f9c8:	016d      	lsls	r5, r5, #5
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	1a2e      	subs	r6, r5, r0
 800f9ce:	9301      	str	r3, [sp, #4]
 800f9d0:	429e      	cmp	r6, r3
 800f9d2:	dd5a      	ble.n	800fa8a <__gethex+0x26e>
 800f9d4:	1af6      	subs	r6, r6, r3
 800f9d6:	0031      	movs	r1, r6
 800f9d8:	0020      	movs	r0, r4
 800f9da:	f000 fefc 	bl	80107d6 <__any_on>
 800f9de:	1e05      	subs	r5, r0, #0
 800f9e0:	d016      	beq.n	800fa10 <__gethex+0x1f4>
 800f9e2:	2501      	movs	r5, #1
 800f9e4:	211f      	movs	r1, #31
 800f9e6:	0028      	movs	r0, r5
 800f9e8:	1e73      	subs	r3, r6, #1
 800f9ea:	4019      	ands	r1, r3
 800f9ec:	4088      	lsls	r0, r1
 800f9ee:	0001      	movs	r1, r0
 800f9f0:	115a      	asrs	r2, r3, #5
 800f9f2:	9804      	ldr	r0, [sp, #16]
 800f9f4:	0092      	lsls	r2, r2, #2
 800f9f6:	5812      	ldr	r2, [r2, r0]
 800f9f8:	420a      	tst	r2, r1
 800f9fa:	d009      	beq.n	800fa10 <__gethex+0x1f4>
 800f9fc:	42ab      	cmp	r3, r5
 800f9fe:	dd06      	ble.n	800fa0e <__gethex+0x1f2>
 800fa00:	0020      	movs	r0, r4
 800fa02:	1eb1      	subs	r1, r6, #2
 800fa04:	f000 fee7 	bl	80107d6 <__any_on>
 800fa08:	3502      	adds	r5, #2
 800fa0a:	2800      	cmp	r0, #0
 800fa0c:	d100      	bne.n	800fa10 <__gethex+0x1f4>
 800fa0e:	2502      	movs	r5, #2
 800fa10:	0031      	movs	r1, r6
 800fa12:	0020      	movs	r0, r4
 800fa14:	f7ff fe98 	bl	800f748 <rshift>
 800fa18:	19bf      	adds	r7, r7, r6
 800fa1a:	9b02      	ldr	r3, [sp, #8]
 800fa1c:	689b      	ldr	r3, [r3, #8]
 800fa1e:	9303      	str	r3, [sp, #12]
 800fa20:	42bb      	cmp	r3, r7
 800fa22:	da42      	bge.n	800faaa <__gethex+0x28e>
 800fa24:	0021      	movs	r1, r4
 800fa26:	9805      	ldr	r0, [sp, #20]
 800fa28:	f000 fa58 	bl	800fedc <_Bfree>
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fa30:	26a3      	movs	r6, #163	; 0xa3
 800fa32:	6013      	str	r3, [r2, #0]
 800fa34:	e78b      	b.n	800f94e <__gethex+0x132>
 800fa36:	1e6b      	subs	r3, r5, #1
 800fa38:	9308      	str	r3, [sp, #32]
 800fa3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fa3c:	781b      	ldrb	r3, [r3, #0]
 800fa3e:	4293      	cmp	r3, r2
 800fa40:	d014      	beq.n	800fa6c <__gethex+0x250>
 800fa42:	9b06      	ldr	r3, [sp, #24]
 800fa44:	2b20      	cmp	r3, #32
 800fa46:	d104      	bne.n	800fa52 <__gethex+0x236>
 800fa48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa4a:	c340      	stmia	r3!, {r6}
 800fa4c:	2600      	movs	r6, #0
 800fa4e:	9309      	str	r3, [sp, #36]	; 0x24
 800fa50:	9606      	str	r6, [sp, #24]
 800fa52:	9b08      	ldr	r3, [sp, #32]
 800fa54:	7818      	ldrb	r0, [r3, #0]
 800fa56:	f7ff fecb 	bl	800f7f0 <__hexdig_fun>
 800fa5a:	230f      	movs	r3, #15
 800fa5c:	4018      	ands	r0, r3
 800fa5e:	9b06      	ldr	r3, [sp, #24]
 800fa60:	9d08      	ldr	r5, [sp, #32]
 800fa62:	4098      	lsls	r0, r3
 800fa64:	3304      	adds	r3, #4
 800fa66:	4306      	orrs	r6, r0
 800fa68:	9306      	str	r3, [sp, #24]
 800fa6a:	e7a0      	b.n	800f9ae <__gethex+0x192>
 800fa6c:	2301      	movs	r3, #1
 800fa6e:	9a03      	ldr	r2, [sp, #12]
 800fa70:	1a9d      	subs	r5, r3, r2
 800fa72:	9b08      	ldr	r3, [sp, #32]
 800fa74:	195d      	adds	r5, r3, r5
 800fa76:	9b01      	ldr	r3, [sp, #4]
 800fa78:	429d      	cmp	r5, r3
 800fa7a:	d3e2      	bcc.n	800fa42 <__gethex+0x226>
 800fa7c:	0028      	movs	r0, r5
 800fa7e:	9907      	ldr	r1, [sp, #28]
 800fa80:	f001 fac8 	bl	8011014 <strncmp>
 800fa84:	2800      	cmp	r0, #0
 800fa86:	d1dc      	bne.n	800fa42 <__gethex+0x226>
 800fa88:	e791      	b.n	800f9ae <__gethex+0x192>
 800fa8a:	9b01      	ldr	r3, [sp, #4]
 800fa8c:	2500      	movs	r5, #0
 800fa8e:	429e      	cmp	r6, r3
 800fa90:	dac3      	bge.n	800fa1a <__gethex+0x1fe>
 800fa92:	1b9e      	subs	r6, r3, r6
 800fa94:	0021      	movs	r1, r4
 800fa96:	0032      	movs	r2, r6
 800fa98:	9805      	ldr	r0, [sp, #20]
 800fa9a:	f000 fc3d 	bl	8010318 <__lshift>
 800fa9e:	0003      	movs	r3, r0
 800faa0:	3314      	adds	r3, #20
 800faa2:	0004      	movs	r4, r0
 800faa4:	1bbf      	subs	r7, r7, r6
 800faa6:	9304      	str	r3, [sp, #16]
 800faa8:	e7b7      	b.n	800fa1a <__gethex+0x1fe>
 800faaa:	9b02      	ldr	r3, [sp, #8]
 800faac:	685e      	ldr	r6, [r3, #4]
 800faae:	42be      	cmp	r6, r7
 800fab0:	dd71      	ble.n	800fb96 <__gethex+0x37a>
 800fab2:	9b01      	ldr	r3, [sp, #4]
 800fab4:	1bf6      	subs	r6, r6, r7
 800fab6:	42b3      	cmp	r3, r6
 800fab8:	dc38      	bgt.n	800fb2c <__gethex+0x310>
 800faba:	9b02      	ldr	r3, [sp, #8]
 800fabc:	68db      	ldr	r3, [r3, #12]
 800fabe:	2b02      	cmp	r3, #2
 800fac0:	d026      	beq.n	800fb10 <__gethex+0x2f4>
 800fac2:	2b03      	cmp	r3, #3
 800fac4:	d028      	beq.n	800fb18 <__gethex+0x2fc>
 800fac6:	2b01      	cmp	r3, #1
 800fac8:	d119      	bne.n	800fafe <__gethex+0x2e2>
 800faca:	9b01      	ldr	r3, [sp, #4]
 800facc:	42b3      	cmp	r3, r6
 800face:	d116      	bne.n	800fafe <__gethex+0x2e2>
 800fad0:	2b01      	cmp	r3, #1
 800fad2:	d10d      	bne.n	800faf0 <__gethex+0x2d4>
 800fad4:	9b02      	ldr	r3, [sp, #8]
 800fad6:	2662      	movs	r6, #98	; 0x62
 800fad8:	685b      	ldr	r3, [r3, #4]
 800fada:	9301      	str	r3, [sp, #4]
 800fadc:	9a01      	ldr	r2, [sp, #4]
 800fade:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fae0:	601a      	str	r2, [r3, #0]
 800fae2:	2301      	movs	r3, #1
 800fae4:	9a04      	ldr	r2, [sp, #16]
 800fae6:	6123      	str	r3, [r4, #16]
 800fae8:	6013      	str	r3, [r2, #0]
 800faea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800faec:	601c      	str	r4, [r3, #0]
 800faee:	e72e      	b.n	800f94e <__gethex+0x132>
 800faf0:	9901      	ldr	r1, [sp, #4]
 800faf2:	0020      	movs	r0, r4
 800faf4:	3901      	subs	r1, #1
 800faf6:	f000 fe6e 	bl	80107d6 <__any_on>
 800fafa:	2800      	cmp	r0, #0
 800fafc:	d1ea      	bne.n	800fad4 <__gethex+0x2b8>
 800fafe:	0021      	movs	r1, r4
 800fb00:	9805      	ldr	r0, [sp, #20]
 800fb02:	f000 f9eb 	bl	800fedc <_Bfree>
 800fb06:	2300      	movs	r3, #0
 800fb08:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fb0a:	2650      	movs	r6, #80	; 0x50
 800fb0c:	6013      	str	r3, [r2, #0]
 800fb0e:	e71e      	b.n	800f94e <__gethex+0x132>
 800fb10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d1f3      	bne.n	800fafe <__gethex+0x2e2>
 800fb16:	e7dd      	b.n	800fad4 <__gethex+0x2b8>
 800fb18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d1da      	bne.n	800fad4 <__gethex+0x2b8>
 800fb1e:	e7ee      	b.n	800fafe <__gethex+0x2e2>
 800fb20:	08013220 	.word	0x08013220
 800fb24:	080131a9 	.word	0x080131a9
 800fb28:	080131ba 	.word	0x080131ba
 800fb2c:	1e77      	subs	r7, r6, #1
 800fb2e:	2d00      	cmp	r5, #0
 800fb30:	d12f      	bne.n	800fb92 <__gethex+0x376>
 800fb32:	2f00      	cmp	r7, #0
 800fb34:	d004      	beq.n	800fb40 <__gethex+0x324>
 800fb36:	0039      	movs	r1, r7
 800fb38:	0020      	movs	r0, r4
 800fb3a:	f000 fe4c 	bl	80107d6 <__any_on>
 800fb3e:	0005      	movs	r5, r0
 800fb40:	231f      	movs	r3, #31
 800fb42:	117a      	asrs	r2, r7, #5
 800fb44:	401f      	ands	r7, r3
 800fb46:	3b1e      	subs	r3, #30
 800fb48:	40bb      	lsls	r3, r7
 800fb4a:	9904      	ldr	r1, [sp, #16]
 800fb4c:	0092      	lsls	r2, r2, #2
 800fb4e:	5852      	ldr	r2, [r2, r1]
 800fb50:	421a      	tst	r2, r3
 800fb52:	d001      	beq.n	800fb58 <__gethex+0x33c>
 800fb54:	2302      	movs	r3, #2
 800fb56:	431d      	orrs	r5, r3
 800fb58:	9b01      	ldr	r3, [sp, #4]
 800fb5a:	0031      	movs	r1, r6
 800fb5c:	1b9b      	subs	r3, r3, r6
 800fb5e:	2602      	movs	r6, #2
 800fb60:	0020      	movs	r0, r4
 800fb62:	9301      	str	r3, [sp, #4]
 800fb64:	f7ff fdf0 	bl	800f748 <rshift>
 800fb68:	9b02      	ldr	r3, [sp, #8]
 800fb6a:	685f      	ldr	r7, [r3, #4]
 800fb6c:	2d00      	cmp	r5, #0
 800fb6e:	d041      	beq.n	800fbf4 <__gethex+0x3d8>
 800fb70:	9b02      	ldr	r3, [sp, #8]
 800fb72:	68db      	ldr	r3, [r3, #12]
 800fb74:	2b02      	cmp	r3, #2
 800fb76:	d010      	beq.n	800fb9a <__gethex+0x37e>
 800fb78:	2b03      	cmp	r3, #3
 800fb7a:	d012      	beq.n	800fba2 <__gethex+0x386>
 800fb7c:	2b01      	cmp	r3, #1
 800fb7e:	d106      	bne.n	800fb8e <__gethex+0x372>
 800fb80:	07aa      	lsls	r2, r5, #30
 800fb82:	d504      	bpl.n	800fb8e <__gethex+0x372>
 800fb84:	9a04      	ldr	r2, [sp, #16]
 800fb86:	6810      	ldr	r0, [r2, #0]
 800fb88:	4305      	orrs	r5, r0
 800fb8a:	421d      	tst	r5, r3
 800fb8c:	d10c      	bne.n	800fba8 <__gethex+0x38c>
 800fb8e:	2310      	movs	r3, #16
 800fb90:	e02f      	b.n	800fbf2 <__gethex+0x3d6>
 800fb92:	2501      	movs	r5, #1
 800fb94:	e7d4      	b.n	800fb40 <__gethex+0x324>
 800fb96:	2601      	movs	r6, #1
 800fb98:	e7e8      	b.n	800fb6c <__gethex+0x350>
 800fb9a:	2301      	movs	r3, #1
 800fb9c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800fb9e:	1a9b      	subs	r3, r3, r2
 800fba0:	9313      	str	r3, [sp, #76]	; 0x4c
 800fba2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d0f2      	beq.n	800fb8e <__gethex+0x372>
 800fba8:	6923      	ldr	r3, [r4, #16]
 800fbaa:	2000      	movs	r0, #0
 800fbac:	9303      	str	r3, [sp, #12]
 800fbae:	009b      	lsls	r3, r3, #2
 800fbb0:	9304      	str	r3, [sp, #16]
 800fbb2:	0023      	movs	r3, r4
 800fbb4:	9a04      	ldr	r2, [sp, #16]
 800fbb6:	3314      	adds	r3, #20
 800fbb8:	1899      	adds	r1, r3, r2
 800fbba:	681a      	ldr	r2, [r3, #0]
 800fbbc:	1c55      	adds	r5, r2, #1
 800fbbe:	d01e      	beq.n	800fbfe <__gethex+0x3e2>
 800fbc0:	3201      	adds	r2, #1
 800fbc2:	601a      	str	r2, [r3, #0]
 800fbc4:	0023      	movs	r3, r4
 800fbc6:	3314      	adds	r3, #20
 800fbc8:	2e02      	cmp	r6, #2
 800fbca:	d140      	bne.n	800fc4e <__gethex+0x432>
 800fbcc:	9a02      	ldr	r2, [sp, #8]
 800fbce:	9901      	ldr	r1, [sp, #4]
 800fbd0:	6812      	ldr	r2, [r2, #0]
 800fbd2:	3a01      	subs	r2, #1
 800fbd4:	428a      	cmp	r2, r1
 800fbd6:	d10b      	bne.n	800fbf0 <__gethex+0x3d4>
 800fbd8:	114a      	asrs	r2, r1, #5
 800fbda:	211f      	movs	r1, #31
 800fbdc:	9801      	ldr	r0, [sp, #4]
 800fbde:	0092      	lsls	r2, r2, #2
 800fbe0:	4001      	ands	r1, r0
 800fbe2:	2001      	movs	r0, #1
 800fbe4:	0005      	movs	r5, r0
 800fbe6:	408d      	lsls	r5, r1
 800fbe8:	58d3      	ldr	r3, [r2, r3]
 800fbea:	422b      	tst	r3, r5
 800fbec:	d000      	beq.n	800fbf0 <__gethex+0x3d4>
 800fbee:	2601      	movs	r6, #1
 800fbf0:	2320      	movs	r3, #32
 800fbf2:	431e      	orrs	r6, r3
 800fbf4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fbf6:	601c      	str	r4, [r3, #0]
 800fbf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fbfa:	601f      	str	r7, [r3, #0]
 800fbfc:	e6a7      	b.n	800f94e <__gethex+0x132>
 800fbfe:	c301      	stmia	r3!, {r0}
 800fc00:	4299      	cmp	r1, r3
 800fc02:	d8da      	bhi.n	800fbba <__gethex+0x39e>
 800fc04:	9b03      	ldr	r3, [sp, #12]
 800fc06:	68a2      	ldr	r2, [r4, #8]
 800fc08:	4293      	cmp	r3, r2
 800fc0a:	db17      	blt.n	800fc3c <__gethex+0x420>
 800fc0c:	6863      	ldr	r3, [r4, #4]
 800fc0e:	9805      	ldr	r0, [sp, #20]
 800fc10:	1c59      	adds	r1, r3, #1
 800fc12:	f000 f91f 	bl	800fe54 <_Balloc>
 800fc16:	1e05      	subs	r5, r0, #0
 800fc18:	d103      	bne.n	800fc22 <__gethex+0x406>
 800fc1a:	0002      	movs	r2, r0
 800fc1c:	2184      	movs	r1, #132	; 0x84
 800fc1e:	4b1c      	ldr	r3, [pc, #112]	; (800fc90 <__gethex+0x474>)
 800fc20:	e6b8      	b.n	800f994 <__gethex+0x178>
 800fc22:	0021      	movs	r1, r4
 800fc24:	6923      	ldr	r3, [r4, #16]
 800fc26:	310c      	adds	r1, #12
 800fc28:	1c9a      	adds	r2, r3, #2
 800fc2a:	0092      	lsls	r2, r2, #2
 800fc2c:	300c      	adds	r0, #12
 800fc2e:	f7fe fca5 	bl	800e57c <memcpy>
 800fc32:	0021      	movs	r1, r4
 800fc34:	9805      	ldr	r0, [sp, #20]
 800fc36:	f000 f951 	bl	800fedc <_Bfree>
 800fc3a:	002c      	movs	r4, r5
 800fc3c:	6923      	ldr	r3, [r4, #16]
 800fc3e:	1c5a      	adds	r2, r3, #1
 800fc40:	6122      	str	r2, [r4, #16]
 800fc42:	2201      	movs	r2, #1
 800fc44:	3304      	adds	r3, #4
 800fc46:	009b      	lsls	r3, r3, #2
 800fc48:	18e3      	adds	r3, r4, r3
 800fc4a:	605a      	str	r2, [r3, #4]
 800fc4c:	e7ba      	b.n	800fbc4 <__gethex+0x3a8>
 800fc4e:	6922      	ldr	r2, [r4, #16]
 800fc50:	9903      	ldr	r1, [sp, #12]
 800fc52:	428a      	cmp	r2, r1
 800fc54:	dd09      	ble.n	800fc6a <__gethex+0x44e>
 800fc56:	2101      	movs	r1, #1
 800fc58:	0020      	movs	r0, r4
 800fc5a:	f7ff fd75 	bl	800f748 <rshift>
 800fc5e:	9b02      	ldr	r3, [sp, #8]
 800fc60:	3701      	adds	r7, #1
 800fc62:	689b      	ldr	r3, [r3, #8]
 800fc64:	42bb      	cmp	r3, r7
 800fc66:	dac2      	bge.n	800fbee <__gethex+0x3d2>
 800fc68:	e6dc      	b.n	800fa24 <__gethex+0x208>
 800fc6a:	221f      	movs	r2, #31
 800fc6c:	9d01      	ldr	r5, [sp, #4]
 800fc6e:	9901      	ldr	r1, [sp, #4]
 800fc70:	2601      	movs	r6, #1
 800fc72:	4015      	ands	r5, r2
 800fc74:	4211      	tst	r1, r2
 800fc76:	d0bb      	beq.n	800fbf0 <__gethex+0x3d4>
 800fc78:	9a04      	ldr	r2, [sp, #16]
 800fc7a:	189b      	adds	r3, r3, r2
 800fc7c:	3b04      	subs	r3, #4
 800fc7e:	6818      	ldr	r0, [r3, #0]
 800fc80:	f000 f9e0 	bl	8010044 <__hi0bits>
 800fc84:	2320      	movs	r3, #32
 800fc86:	1b5d      	subs	r5, r3, r5
 800fc88:	42a8      	cmp	r0, r5
 800fc8a:	dbe4      	blt.n	800fc56 <__gethex+0x43a>
 800fc8c:	e7b0      	b.n	800fbf0 <__gethex+0x3d4>
 800fc8e:	46c0      	nop			; (mov r8, r8)
 800fc90:	080131a9 	.word	0x080131a9

0800fc94 <L_shift>:
 800fc94:	2308      	movs	r3, #8
 800fc96:	b570      	push	{r4, r5, r6, lr}
 800fc98:	2520      	movs	r5, #32
 800fc9a:	1a9a      	subs	r2, r3, r2
 800fc9c:	0092      	lsls	r2, r2, #2
 800fc9e:	1aad      	subs	r5, r5, r2
 800fca0:	6843      	ldr	r3, [r0, #4]
 800fca2:	6806      	ldr	r6, [r0, #0]
 800fca4:	001c      	movs	r4, r3
 800fca6:	40ac      	lsls	r4, r5
 800fca8:	40d3      	lsrs	r3, r2
 800fcaa:	4334      	orrs	r4, r6
 800fcac:	6004      	str	r4, [r0, #0]
 800fcae:	6043      	str	r3, [r0, #4]
 800fcb0:	3004      	adds	r0, #4
 800fcb2:	4288      	cmp	r0, r1
 800fcb4:	d3f4      	bcc.n	800fca0 <L_shift+0xc>
 800fcb6:	bd70      	pop	{r4, r5, r6, pc}

0800fcb8 <__match>:
 800fcb8:	b530      	push	{r4, r5, lr}
 800fcba:	6803      	ldr	r3, [r0, #0]
 800fcbc:	780c      	ldrb	r4, [r1, #0]
 800fcbe:	3301      	adds	r3, #1
 800fcc0:	2c00      	cmp	r4, #0
 800fcc2:	d102      	bne.n	800fcca <__match+0x12>
 800fcc4:	6003      	str	r3, [r0, #0]
 800fcc6:	2001      	movs	r0, #1
 800fcc8:	bd30      	pop	{r4, r5, pc}
 800fcca:	781a      	ldrb	r2, [r3, #0]
 800fccc:	0015      	movs	r5, r2
 800fcce:	3d41      	subs	r5, #65	; 0x41
 800fcd0:	2d19      	cmp	r5, #25
 800fcd2:	d800      	bhi.n	800fcd6 <__match+0x1e>
 800fcd4:	3220      	adds	r2, #32
 800fcd6:	3101      	adds	r1, #1
 800fcd8:	42a2      	cmp	r2, r4
 800fcda:	d0ef      	beq.n	800fcbc <__match+0x4>
 800fcdc:	2000      	movs	r0, #0
 800fcde:	e7f3      	b.n	800fcc8 <__match+0x10>

0800fce0 <__hexnan>:
 800fce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fce2:	680b      	ldr	r3, [r1, #0]
 800fce4:	b08b      	sub	sp, #44	; 0x2c
 800fce6:	9201      	str	r2, [sp, #4]
 800fce8:	9901      	ldr	r1, [sp, #4]
 800fcea:	115a      	asrs	r2, r3, #5
 800fcec:	0092      	lsls	r2, r2, #2
 800fcee:	188a      	adds	r2, r1, r2
 800fcf0:	9202      	str	r2, [sp, #8]
 800fcf2:	0019      	movs	r1, r3
 800fcf4:	221f      	movs	r2, #31
 800fcf6:	4011      	ands	r1, r2
 800fcf8:	9008      	str	r0, [sp, #32]
 800fcfa:	9106      	str	r1, [sp, #24]
 800fcfc:	4213      	tst	r3, r2
 800fcfe:	d002      	beq.n	800fd06 <__hexnan+0x26>
 800fd00:	9b02      	ldr	r3, [sp, #8]
 800fd02:	3304      	adds	r3, #4
 800fd04:	9302      	str	r3, [sp, #8]
 800fd06:	9b02      	ldr	r3, [sp, #8]
 800fd08:	2500      	movs	r5, #0
 800fd0a:	1f1e      	subs	r6, r3, #4
 800fd0c:	0037      	movs	r7, r6
 800fd0e:	0034      	movs	r4, r6
 800fd10:	9b08      	ldr	r3, [sp, #32]
 800fd12:	6035      	str	r5, [r6, #0]
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	9507      	str	r5, [sp, #28]
 800fd18:	9305      	str	r3, [sp, #20]
 800fd1a:	9503      	str	r5, [sp, #12]
 800fd1c:	9b05      	ldr	r3, [sp, #20]
 800fd1e:	3301      	adds	r3, #1
 800fd20:	9309      	str	r3, [sp, #36]	; 0x24
 800fd22:	9b05      	ldr	r3, [sp, #20]
 800fd24:	785b      	ldrb	r3, [r3, #1]
 800fd26:	9304      	str	r3, [sp, #16]
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d028      	beq.n	800fd7e <__hexnan+0x9e>
 800fd2c:	9804      	ldr	r0, [sp, #16]
 800fd2e:	f7ff fd5f 	bl	800f7f0 <__hexdig_fun>
 800fd32:	2800      	cmp	r0, #0
 800fd34:	d154      	bne.n	800fde0 <__hexnan+0x100>
 800fd36:	9b04      	ldr	r3, [sp, #16]
 800fd38:	2b20      	cmp	r3, #32
 800fd3a:	d819      	bhi.n	800fd70 <__hexnan+0x90>
 800fd3c:	9b03      	ldr	r3, [sp, #12]
 800fd3e:	9a07      	ldr	r2, [sp, #28]
 800fd40:	4293      	cmp	r3, r2
 800fd42:	dd12      	ble.n	800fd6a <__hexnan+0x8a>
 800fd44:	42bc      	cmp	r4, r7
 800fd46:	d206      	bcs.n	800fd56 <__hexnan+0x76>
 800fd48:	2d07      	cmp	r5, #7
 800fd4a:	dc04      	bgt.n	800fd56 <__hexnan+0x76>
 800fd4c:	002a      	movs	r2, r5
 800fd4e:	0039      	movs	r1, r7
 800fd50:	0020      	movs	r0, r4
 800fd52:	f7ff ff9f 	bl	800fc94 <L_shift>
 800fd56:	9b01      	ldr	r3, [sp, #4]
 800fd58:	2508      	movs	r5, #8
 800fd5a:	429c      	cmp	r4, r3
 800fd5c:	d905      	bls.n	800fd6a <__hexnan+0x8a>
 800fd5e:	1f27      	subs	r7, r4, #4
 800fd60:	2500      	movs	r5, #0
 800fd62:	003c      	movs	r4, r7
 800fd64:	9b03      	ldr	r3, [sp, #12]
 800fd66:	603d      	str	r5, [r7, #0]
 800fd68:	9307      	str	r3, [sp, #28]
 800fd6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd6c:	9305      	str	r3, [sp, #20]
 800fd6e:	e7d5      	b.n	800fd1c <__hexnan+0x3c>
 800fd70:	9b04      	ldr	r3, [sp, #16]
 800fd72:	2b29      	cmp	r3, #41	; 0x29
 800fd74:	d159      	bne.n	800fe2a <__hexnan+0x14a>
 800fd76:	9b05      	ldr	r3, [sp, #20]
 800fd78:	9a08      	ldr	r2, [sp, #32]
 800fd7a:	3302      	adds	r3, #2
 800fd7c:	6013      	str	r3, [r2, #0]
 800fd7e:	9b03      	ldr	r3, [sp, #12]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d052      	beq.n	800fe2a <__hexnan+0x14a>
 800fd84:	42bc      	cmp	r4, r7
 800fd86:	d206      	bcs.n	800fd96 <__hexnan+0xb6>
 800fd88:	2d07      	cmp	r5, #7
 800fd8a:	dc04      	bgt.n	800fd96 <__hexnan+0xb6>
 800fd8c:	002a      	movs	r2, r5
 800fd8e:	0039      	movs	r1, r7
 800fd90:	0020      	movs	r0, r4
 800fd92:	f7ff ff7f 	bl	800fc94 <L_shift>
 800fd96:	9b01      	ldr	r3, [sp, #4]
 800fd98:	429c      	cmp	r4, r3
 800fd9a:	d935      	bls.n	800fe08 <__hexnan+0x128>
 800fd9c:	001a      	movs	r2, r3
 800fd9e:	0023      	movs	r3, r4
 800fda0:	cb02      	ldmia	r3!, {r1}
 800fda2:	c202      	stmia	r2!, {r1}
 800fda4:	429e      	cmp	r6, r3
 800fda6:	d2fb      	bcs.n	800fda0 <__hexnan+0xc0>
 800fda8:	9b02      	ldr	r3, [sp, #8]
 800fdaa:	1c61      	adds	r1, r4, #1
 800fdac:	1eda      	subs	r2, r3, #3
 800fdae:	2304      	movs	r3, #4
 800fdb0:	4291      	cmp	r1, r2
 800fdb2:	d805      	bhi.n	800fdc0 <__hexnan+0xe0>
 800fdb4:	9b02      	ldr	r3, [sp, #8]
 800fdb6:	3b04      	subs	r3, #4
 800fdb8:	1b1b      	subs	r3, r3, r4
 800fdba:	089b      	lsrs	r3, r3, #2
 800fdbc:	3301      	adds	r3, #1
 800fdbe:	009b      	lsls	r3, r3, #2
 800fdc0:	9a01      	ldr	r2, [sp, #4]
 800fdc2:	18d3      	adds	r3, r2, r3
 800fdc4:	2200      	movs	r2, #0
 800fdc6:	c304      	stmia	r3!, {r2}
 800fdc8:	429e      	cmp	r6, r3
 800fdca:	d2fc      	bcs.n	800fdc6 <__hexnan+0xe6>
 800fdcc:	6833      	ldr	r3, [r6, #0]
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d104      	bne.n	800fddc <__hexnan+0xfc>
 800fdd2:	9b01      	ldr	r3, [sp, #4]
 800fdd4:	429e      	cmp	r6, r3
 800fdd6:	d126      	bne.n	800fe26 <__hexnan+0x146>
 800fdd8:	2301      	movs	r3, #1
 800fdda:	6033      	str	r3, [r6, #0]
 800fddc:	2005      	movs	r0, #5
 800fdde:	e025      	b.n	800fe2c <__hexnan+0x14c>
 800fde0:	9b03      	ldr	r3, [sp, #12]
 800fde2:	3501      	adds	r5, #1
 800fde4:	3301      	adds	r3, #1
 800fde6:	9303      	str	r3, [sp, #12]
 800fde8:	2d08      	cmp	r5, #8
 800fdea:	dd06      	ble.n	800fdfa <__hexnan+0x11a>
 800fdec:	9b01      	ldr	r3, [sp, #4]
 800fdee:	429c      	cmp	r4, r3
 800fdf0:	d9bb      	bls.n	800fd6a <__hexnan+0x8a>
 800fdf2:	2300      	movs	r3, #0
 800fdf4:	2501      	movs	r5, #1
 800fdf6:	3c04      	subs	r4, #4
 800fdf8:	6023      	str	r3, [r4, #0]
 800fdfa:	220f      	movs	r2, #15
 800fdfc:	6823      	ldr	r3, [r4, #0]
 800fdfe:	4010      	ands	r0, r2
 800fe00:	011b      	lsls	r3, r3, #4
 800fe02:	4318      	orrs	r0, r3
 800fe04:	6020      	str	r0, [r4, #0]
 800fe06:	e7b0      	b.n	800fd6a <__hexnan+0x8a>
 800fe08:	9b06      	ldr	r3, [sp, #24]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d0de      	beq.n	800fdcc <__hexnan+0xec>
 800fe0e:	2120      	movs	r1, #32
 800fe10:	9a06      	ldr	r2, [sp, #24]
 800fe12:	9b02      	ldr	r3, [sp, #8]
 800fe14:	1a89      	subs	r1, r1, r2
 800fe16:	2201      	movs	r2, #1
 800fe18:	4252      	negs	r2, r2
 800fe1a:	40ca      	lsrs	r2, r1
 800fe1c:	3b04      	subs	r3, #4
 800fe1e:	6819      	ldr	r1, [r3, #0]
 800fe20:	400a      	ands	r2, r1
 800fe22:	601a      	str	r2, [r3, #0]
 800fe24:	e7d2      	b.n	800fdcc <__hexnan+0xec>
 800fe26:	3e04      	subs	r6, #4
 800fe28:	e7d0      	b.n	800fdcc <__hexnan+0xec>
 800fe2a:	2004      	movs	r0, #4
 800fe2c:	b00b      	add	sp, #44	; 0x2c
 800fe2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fe30 <__ascii_mbtowc>:
 800fe30:	b082      	sub	sp, #8
 800fe32:	2900      	cmp	r1, #0
 800fe34:	d100      	bne.n	800fe38 <__ascii_mbtowc+0x8>
 800fe36:	a901      	add	r1, sp, #4
 800fe38:	1e10      	subs	r0, r2, #0
 800fe3a:	d006      	beq.n	800fe4a <__ascii_mbtowc+0x1a>
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d006      	beq.n	800fe4e <__ascii_mbtowc+0x1e>
 800fe40:	7813      	ldrb	r3, [r2, #0]
 800fe42:	600b      	str	r3, [r1, #0]
 800fe44:	7810      	ldrb	r0, [r2, #0]
 800fe46:	1e43      	subs	r3, r0, #1
 800fe48:	4198      	sbcs	r0, r3
 800fe4a:	b002      	add	sp, #8
 800fe4c:	4770      	bx	lr
 800fe4e:	2002      	movs	r0, #2
 800fe50:	4240      	negs	r0, r0
 800fe52:	e7fa      	b.n	800fe4a <__ascii_mbtowc+0x1a>

0800fe54 <_Balloc>:
 800fe54:	b570      	push	{r4, r5, r6, lr}
 800fe56:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fe58:	0006      	movs	r6, r0
 800fe5a:	000c      	movs	r4, r1
 800fe5c:	2d00      	cmp	r5, #0
 800fe5e:	d10e      	bne.n	800fe7e <_Balloc+0x2a>
 800fe60:	2010      	movs	r0, #16
 800fe62:	f001 ffcb 	bl	8011dfc <malloc>
 800fe66:	1e02      	subs	r2, r0, #0
 800fe68:	6270      	str	r0, [r6, #36]	; 0x24
 800fe6a:	d104      	bne.n	800fe76 <_Balloc+0x22>
 800fe6c:	2166      	movs	r1, #102	; 0x66
 800fe6e:	4b19      	ldr	r3, [pc, #100]	; (800fed4 <_Balloc+0x80>)
 800fe70:	4819      	ldr	r0, [pc, #100]	; (800fed8 <_Balloc+0x84>)
 800fe72:	f001 f8ef 	bl	8011054 <__assert_func>
 800fe76:	6045      	str	r5, [r0, #4]
 800fe78:	6085      	str	r5, [r0, #8]
 800fe7a:	6005      	str	r5, [r0, #0]
 800fe7c:	60c5      	str	r5, [r0, #12]
 800fe7e:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800fe80:	68eb      	ldr	r3, [r5, #12]
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d013      	beq.n	800feae <_Balloc+0x5a>
 800fe86:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800fe88:	00a2      	lsls	r2, r4, #2
 800fe8a:	68db      	ldr	r3, [r3, #12]
 800fe8c:	189b      	adds	r3, r3, r2
 800fe8e:	6818      	ldr	r0, [r3, #0]
 800fe90:	2800      	cmp	r0, #0
 800fe92:	d118      	bne.n	800fec6 <_Balloc+0x72>
 800fe94:	2101      	movs	r1, #1
 800fe96:	000d      	movs	r5, r1
 800fe98:	40a5      	lsls	r5, r4
 800fe9a:	1d6a      	adds	r2, r5, #5
 800fe9c:	0030      	movs	r0, r6
 800fe9e:	0092      	lsls	r2, r2, #2
 800fea0:	f000 fcbc 	bl	801081c <_calloc_r>
 800fea4:	2800      	cmp	r0, #0
 800fea6:	d00c      	beq.n	800fec2 <_Balloc+0x6e>
 800fea8:	6044      	str	r4, [r0, #4]
 800feaa:	6085      	str	r5, [r0, #8]
 800feac:	e00d      	b.n	800feca <_Balloc+0x76>
 800feae:	2221      	movs	r2, #33	; 0x21
 800feb0:	2104      	movs	r1, #4
 800feb2:	0030      	movs	r0, r6
 800feb4:	f000 fcb2 	bl	801081c <_calloc_r>
 800feb8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800feba:	60e8      	str	r0, [r5, #12]
 800febc:	68db      	ldr	r3, [r3, #12]
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d1e1      	bne.n	800fe86 <_Balloc+0x32>
 800fec2:	2000      	movs	r0, #0
 800fec4:	bd70      	pop	{r4, r5, r6, pc}
 800fec6:	6802      	ldr	r2, [r0, #0]
 800fec8:	601a      	str	r2, [r3, #0]
 800feca:	2300      	movs	r3, #0
 800fecc:	6103      	str	r3, [r0, #16]
 800fece:	60c3      	str	r3, [r0, #12]
 800fed0:	e7f8      	b.n	800fec4 <_Balloc+0x70>
 800fed2:	46c0      	nop			; (mov r8, r8)
 800fed4:	08013234 	.word	0x08013234
 800fed8:	0801324b 	.word	0x0801324b

0800fedc <_Bfree>:
 800fedc:	b570      	push	{r4, r5, r6, lr}
 800fede:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fee0:	0005      	movs	r5, r0
 800fee2:	000c      	movs	r4, r1
 800fee4:	2e00      	cmp	r6, #0
 800fee6:	d10e      	bne.n	800ff06 <_Bfree+0x2a>
 800fee8:	2010      	movs	r0, #16
 800feea:	f001 ff87 	bl	8011dfc <malloc>
 800feee:	1e02      	subs	r2, r0, #0
 800fef0:	6268      	str	r0, [r5, #36]	; 0x24
 800fef2:	d104      	bne.n	800fefe <_Bfree+0x22>
 800fef4:	218a      	movs	r1, #138	; 0x8a
 800fef6:	4b09      	ldr	r3, [pc, #36]	; (800ff1c <_Bfree+0x40>)
 800fef8:	4809      	ldr	r0, [pc, #36]	; (800ff20 <_Bfree+0x44>)
 800fefa:	f001 f8ab 	bl	8011054 <__assert_func>
 800fefe:	6046      	str	r6, [r0, #4]
 800ff00:	6086      	str	r6, [r0, #8]
 800ff02:	6006      	str	r6, [r0, #0]
 800ff04:	60c6      	str	r6, [r0, #12]
 800ff06:	2c00      	cmp	r4, #0
 800ff08:	d007      	beq.n	800ff1a <_Bfree+0x3e>
 800ff0a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ff0c:	6862      	ldr	r2, [r4, #4]
 800ff0e:	68db      	ldr	r3, [r3, #12]
 800ff10:	0092      	lsls	r2, r2, #2
 800ff12:	189b      	adds	r3, r3, r2
 800ff14:	681a      	ldr	r2, [r3, #0]
 800ff16:	6022      	str	r2, [r4, #0]
 800ff18:	601c      	str	r4, [r3, #0]
 800ff1a:	bd70      	pop	{r4, r5, r6, pc}
 800ff1c:	08013234 	.word	0x08013234
 800ff20:	0801324b 	.word	0x0801324b

0800ff24 <__multadd>:
 800ff24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ff26:	000e      	movs	r6, r1
 800ff28:	9001      	str	r0, [sp, #4]
 800ff2a:	000c      	movs	r4, r1
 800ff2c:	001d      	movs	r5, r3
 800ff2e:	2000      	movs	r0, #0
 800ff30:	690f      	ldr	r7, [r1, #16]
 800ff32:	3614      	adds	r6, #20
 800ff34:	6833      	ldr	r3, [r6, #0]
 800ff36:	3001      	adds	r0, #1
 800ff38:	b299      	uxth	r1, r3
 800ff3a:	4351      	muls	r1, r2
 800ff3c:	0c1b      	lsrs	r3, r3, #16
 800ff3e:	4353      	muls	r3, r2
 800ff40:	1949      	adds	r1, r1, r5
 800ff42:	0c0d      	lsrs	r5, r1, #16
 800ff44:	195b      	adds	r3, r3, r5
 800ff46:	0c1d      	lsrs	r5, r3, #16
 800ff48:	b289      	uxth	r1, r1
 800ff4a:	041b      	lsls	r3, r3, #16
 800ff4c:	185b      	adds	r3, r3, r1
 800ff4e:	c608      	stmia	r6!, {r3}
 800ff50:	4287      	cmp	r7, r0
 800ff52:	dcef      	bgt.n	800ff34 <__multadd+0x10>
 800ff54:	2d00      	cmp	r5, #0
 800ff56:	d022      	beq.n	800ff9e <__multadd+0x7a>
 800ff58:	68a3      	ldr	r3, [r4, #8]
 800ff5a:	42bb      	cmp	r3, r7
 800ff5c:	dc19      	bgt.n	800ff92 <__multadd+0x6e>
 800ff5e:	6863      	ldr	r3, [r4, #4]
 800ff60:	9801      	ldr	r0, [sp, #4]
 800ff62:	1c59      	adds	r1, r3, #1
 800ff64:	f7ff ff76 	bl	800fe54 <_Balloc>
 800ff68:	1e06      	subs	r6, r0, #0
 800ff6a:	d105      	bne.n	800ff78 <__multadd+0x54>
 800ff6c:	0002      	movs	r2, r0
 800ff6e:	21b5      	movs	r1, #181	; 0xb5
 800ff70:	4b0c      	ldr	r3, [pc, #48]	; (800ffa4 <__multadd+0x80>)
 800ff72:	480d      	ldr	r0, [pc, #52]	; (800ffa8 <__multadd+0x84>)
 800ff74:	f001 f86e 	bl	8011054 <__assert_func>
 800ff78:	0021      	movs	r1, r4
 800ff7a:	6923      	ldr	r3, [r4, #16]
 800ff7c:	310c      	adds	r1, #12
 800ff7e:	1c9a      	adds	r2, r3, #2
 800ff80:	0092      	lsls	r2, r2, #2
 800ff82:	300c      	adds	r0, #12
 800ff84:	f7fe fafa 	bl	800e57c <memcpy>
 800ff88:	0021      	movs	r1, r4
 800ff8a:	9801      	ldr	r0, [sp, #4]
 800ff8c:	f7ff ffa6 	bl	800fedc <_Bfree>
 800ff90:	0034      	movs	r4, r6
 800ff92:	1d3b      	adds	r3, r7, #4
 800ff94:	009b      	lsls	r3, r3, #2
 800ff96:	18e3      	adds	r3, r4, r3
 800ff98:	605d      	str	r5, [r3, #4]
 800ff9a:	1c7b      	adds	r3, r7, #1
 800ff9c:	6123      	str	r3, [r4, #16]
 800ff9e:	0020      	movs	r0, r4
 800ffa0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ffa2:	46c0      	nop			; (mov r8, r8)
 800ffa4:	080131a9 	.word	0x080131a9
 800ffa8:	0801324b 	.word	0x0801324b

0800ffac <__s2b>:
 800ffac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ffae:	0006      	movs	r6, r0
 800ffb0:	0018      	movs	r0, r3
 800ffb2:	000c      	movs	r4, r1
 800ffb4:	3008      	adds	r0, #8
 800ffb6:	2109      	movs	r1, #9
 800ffb8:	9301      	str	r3, [sp, #4]
 800ffba:	0015      	movs	r5, r2
 800ffbc:	f7f0 f950 	bl	8000260 <__divsi3>
 800ffc0:	2301      	movs	r3, #1
 800ffc2:	2100      	movs	r1, #0
 800ffc4:	4283      	cmp	r3, r0
 800ffc6:	db0a      	blt.n	800ffde <__s2b+0x32>
 800ffc8:	0030      	movs	r0, r6
 800ffca:	f7ff ff43 	bl	800fe54 <_Balloc>
 800ffce:	1e01      	subs	r1, r0, #0
 800ffd0:	d108      	bne.n	800ffe4 <__s2b+0x38>
 800ffd2:	0002      	movs	r2, r0
 800ffd4:	4b19      	ldr	r3, [pc, #100]	; (801003c <__s2b+0x90>)
 800ffd6:	481a      	ldr	r0, [pc, #104]	; (8010040 <__s2b+0x94>)
 800ffd8:	31ce      	adds	r1, #206	; 0xce
 800ffda:	f001 f83b 	bl	8011054 <__assert_func>
 800ffde:	005b      	lsls	r3, r3, #1
 800ffe0:	3101      	adds	r1, #1
 800ffe2:	e7ef      	b.n	800ffc4 <__s2b+0x18>
 800ffe4:	9b08      	ldr	r3, [sp, #32]
 800ffe6:	6143      	str	r3, [r0, #20]
 800ffe8:	2301      	movs	r3, #1
 800ffea:	6103      	str	r3, [r0, #16]
 800ffec:	2d09      	cmp	r5, #9
 800ffee:	dd18      	ble.n	8010022 <__s2b+0x76>
 800fff0:	0023      	movs	r3, r4
 800fff2:	3309      	adds	r3, #9
 800fff4:	001f      	movs	r7, r3
 800fff6:	9300      	str	r3, [sp, #0]
 800fff8:	1964      	adds	r4, r4, r5
 800fffa:	783b      	ldrb	r3, [r7, #0]
 800fffc:	220a      	movs	r2, #10
 800fffe:	0030      	movs	r0, r6
 8010000:	3b30      	subs	r3, #48	; 0x30
 8010002:	f7ff ff8f 	bl	800ff24 <__multadd>
 8010006:	3701      	adds	r7, #1
 8010008:	0001      	movs	r1, r0
 801000a:	42a7      	cmp	r7, r4
 801000c:	d1f5      	bne.n	800fffa <__s2b+0x4e>
 801000e:	002c      	movs	r4, r5
 8010010:	9b00      	ldr	r3, [sp, #0]
 8010012:	3c08      	subs	r4, #8
 8010014:	191c      	adds	r4, r3, r4
 8010016:	002f      	movs	r7, r5
 8010018:	9b01      	ldr	r3, [sp, #4]
 801001a:	429f      	cmp	r7, r3
 801001c:	db04      	blt.n	8010028 <__s2b+0x7c>
 801001e:	0008      	movs	r0, r1
 8010020:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010022:	2509      	movs	r5, #9
 8010024:	340a      	adds	r4, #10
 8010026:	e7f6      	b.n	8010016 <__s2b+0x6a>
 8010028:	1b63      	subs	r3, r4, r5
 801002a:	5ddb      	ldrb	r3, [r3, r7]
 801002c:	220a      	movs	r2, #10
 801002e:	0030      	movs	r0, r6
 8010030:	3b30      	subs	r3, #48	; 0x30
 8010032:	f7ff ff77 	bl	800ff24 <__multadd>
 8010036:	3701      	adds	r7, #1
 8010038:	0001      	movs	r1, r0
 801003a:	e7ed      	b.n	8010018 <__s2b+0x6c>
 801003c:	080131a9 	.word	0x080131a9
 8010040:	0801324b 	.word	0x0801324b

08010044 <__hi0bits>:
 8010044:	0003      	movs	r3, r0
 8010046:	0c02      	lsrs	r2, r0, #16
 8010048:	2000      	movs	r0, #0
 801004a:	4282      	cmp	r2, r0
 801004c:	d101      	bne.n	8010052 <__hi0bits+0xe>
 801004e:	041b      	lsls	r3, r3, #16
 8010050:	3010      	adds	r0, #16
 8010052:	0e1a      	lsrs	r2, r3, #24
 8010054:	d101      	bne.n	801005a <__hi0bits+0x16>
 8010056:	3008      	adds	r0, #8
 8010058:	021b      	lsls	r3, r3, #8
 801005a:	0f1a      	lsrs	r2, r3, #28
 801005c:	d101      	bne.n	8010062 <__hi0bits+0x1e>
 801005e:	3004      	adds	r0, #4
 8010060:	011b      	lsls	r3, r3, #4
 8010062:	0f9a      	lsrs	r2, r3, #30
 8010064:	d101      	bne.n	801006a <__hi0bits+0x26>
 8010066:	3002      	adds	r0, #2
 8010068:	009b      	lsls	r3, r3, #2
 801006a:	2b00      	cmp	r3, #0
 801006c:	db03      	blt.n	8010076 <__hi0bits+0x32>
 801006e:	3001      	adds	r0, #1
 8010070:	005b      	lsls	r3, r3, #1
 8010072:	d400      	bmi.n	8010076 <__hi0bits+0x32>
 8010074:	2020      	movs	r0, #32
 8010076:	4770      	bx	lr

08010078 <__lo0bits>:
 8010078:	6803      	ldr	r3, [r0, #0]
 801007a:	0002      	movs	r2, r0
 801007c:	2107      	movs	r1, #7
 801007e:	0018      	movs	r0, r3
 8010080:	4008      	ands	r0, r1
 8010082:	420b      	tst	r3, r1
 8010084:	d00d      	beq.n	80100a2 <__lo0bits+0x2a>
 8010086:	3906      	subs	r1, #6
 8010088:	2000      	movs	r0, #0
 801008a:	420b      	tst	r3, r1
 801008c:	d105      	bne.n	801009a <__lo0bits+0x22>
 801008e:	3002      	adds	r0, #2
 8010090:	4203      	tst	r3, r0
 8010092:	d003      	beq.n	801009c <__lo0bits+0x24>
 8010094:	40cb      	lsrs	r3, r1
 8010096:	0008      	movs	r0, r1
 8010098:	6013      	str	r3, [r2, #0]
 801009a:	4770      	bx	lr
 801009c:	089b      	lsrs	r3, r3, #2
 801009e:	6013      	str	r3, [r2, #0]
 80100a0:	e7fb      	b.n	801009a <__lo0bits+0x22>
 80100a2:	b299      	uxth	r1, r3
 80100a4:	2900      	cmp	r1, #0
 80100a6:	d101      	bne.n	80100ac <__lo0bits+0x34>
 80100a8:	2010      	movs	r0, #16
 80100aa:	0c1b      	lsrs	r3, r3, #16
 80100ac:	b2d9      	uxtb	r1, r3
 80100ae:	2900      	cmp	r1, #0
 80100b0:	d101      	bne.n	80100b6 <__lo0bits+0x3e>
 80100b2:	3008      	adds	r0, #8
 80100b4:	0a1b      	lsrs	r3, r3, #8
 80100b6:	0719      	lsls	r1, r3, #28
 80100b8:	d101      	bne.n	80100be <__lo0bits+0x46>
 80100ba:	3004      	adds	r0, #4
 80100bc:	091b      	lsrs	r3, r3, #4
 80100be:	0799      	lsls	r1, r3, #30
 80100c0:	d101      	bne.n	80100c6 <__lo0bits+0x4e>
 80100c2:	3002      	adds	r0, #2
 80100c4:	089b      	lsrs	r3, r3, #2
 80100c6:	07d9      	lsls	r1, r3, #31
 80100c8:	d4e9      	bmi.n	801009e <__lo0bits+0x26>
 80100ca:	3001      	adds	r0, #1
 80100cc:	085b      	lsrs	r3, r3, #1
 80100ce:	d1e6      	bne.n	801009e <__lo0bits+0x26>
 80100d0:	2020      	movs	r0, #32
 80100d2:	e7e2      	b.n	801009a <__lo0bits+0x22>

080100d4 <__i2b>:
 80100d4:	b510      	push	{r4, lr}
 80100d6:	000c      	movs	r4, r1
 80100d8:	2101      	movs	r1, #1
 80100da:	f7ff febb 	bl	800fe54 <_Balloc>
 80100de:	2800      	cmp	r0, #0
 80100e0:	d106      	bne.n	80100f0 <__i2b+0x1c>
 80100e2:	21a0      	movs	r1, #160	; 0xa0
 80100e4:	0002      	movs	r2, r0
 80100e6:	4b04      	ldr	r3, [pc, #16]	; (80100f8 <__i2b+0x24>)
 80100e8:	4804      	ldr	r0, [pc, #16]	; (80100fc <__i2b+0x28>)
 80100ea:	0049      	lsls	r1, r1, #1
 80100ec:	f000 ffb2 	bl	8011054 <__assert_func>
 80100f0:	2301      	movs	r3, #1
 80100f2:	6144      	str	r4, [r0, #20]
 80100f4:	6103      	str	r3, [r0, #16]
 80100f6:	bd10      	pop	{r4, pc}
 80100f8:	080131a9 	.word	0x080131a9
 80100fc:	0801324b 	.word	0x0801324b

08010100 <__multiply>:
 8010100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010102:	690b      	ldr	r3, [r1, #16]
 8010104:	0014      	movs	r4, r2
 8010106:	6912      	ldr	r2, [r2, #16]
 8010108:	000d      	movs	r5, r1
 801010a:	b089      	sub	sp, #36	; 0x24
 801010c:	4293      	cmp	r3, r2
 801010e:	da01      	bge.n	8010114 <__multiply+0x14>
 8010110:	0025      	movs	r5, r4
 8010112:	000c      	movs	r4, r1
 8010114:	692f      	ldr	r7, [r5, #16]
 8010116:	6926      	ldr	r6, [r4, #16]
 8010118:	6869      	ldr	r1, [r5, #4]
 801011a:	19bb      	adds	r3, r7, r6
 801011c:	9302      	str	r3, [sp, #8]
 801011e:	68ab      	ldr	r3, [r5, #8]
 8010120:	19ba      	adds	r2, r7, r6
 8010122:	4293      	cmp	r3, r2
 8010124:	da00      	bge.n	8010128 <__multiply+0x28>
 8010126:	3101      	adds	r1, #1
 8010128:	f7ff fe94 	bl	800fe54 <_Balloc>
 801012c:	9001      	str	r0, [sp, #4]
 801012e:	2800      	cmp	r0, #0
 8010130:	d106      	bne.n	8010140 <__multiply+0x40>
 8010132:	215e      	movs	r1, #94	; 0x5e
 8010134:	0002      	movs	r2, r0
 8010136:	4b48      	ldr	r3, [pc, #288]	; (8010258 <__multiply+0x158>)
 8010138:	4848      	ldr	r0, [pc, #288]	; (801025c <__multiply+0x15c>)
 801013a:	31ff      	adds	r1, #255	; 0xff
 801013c:	f000 ff8a 	bl	8011054 <__assert_func>
 8010140:	9b01      	ldr	r3, [sp, #4]
 8010142:	2200      	movs	r2, #0
 8010144:	3314      	adds	r3, #20
 8010146:	469c      	mov	ip, r3
 8010148:	19bb      	adds	r3, r7, r6
 801014a:	009b      	lsls	r3, r3, #2
 801014c:	4463      	add	r3, ip
 801014e:	9303      	str	r3, [sp, #12]
 8010150:	4663      	mov	r3, ip
 8010152:	9903      	ldr	r1, [sp, #12]
 8010154:	428b      	cmp	r3, r1
 8010156:	d32c      	bcc.n	80101b2 <__multiply+0xb2>
 8010158:	002b      	movs	r3, r5
 801015a:	0022      	movs	r2, r4
 801015c:	3314      	adds	r3, #20
 801015e:	00bf      	lsls	r7, r7, #2
 8010160:	3214      	adds	r2, #20
 8010162:	9306      	str	r3, [sp, #24]
 8010164:	00b6      	lsls	r6, r6, #2
 8010166:	19db      	adds	r3, r3, r7
 8010168:	9304      	str	r3, [sp, #16]
 801016a:	1993      	adds	r3, r2, r6
 801016c:	9307      	str	r3, [sp, #28]
 801016e:	2304      	movs	r3, #4
 8010170:	9305      	str	r3, [sp, #20]
 8010172:	002b      	movs	r3, r5
 8010174:	9904      	ldr	r1, [sp, #16]
 8010176:	3315      	adds	r3, #21
 8010178:	9200      	str	r2, [sp, #0]
 801017a:	4299      	cmp	r1, r3
 801017c:	d305      	bcc.n	801018a <__multiply+0x8a>
 801017e:	1b4b      	subs	r3, r1, r5
 8010180:	3b15      	subs	r3, #21
 8010182:	089b      	lsrs	r3, r3, #2
 8010184:	3301      	adds	r3, #1
 8010186:	009b      	lsls	r3, r3, #2
 8010188:	9305      	str	r3, [sp, #20]
 801018a:	9b07      	ldr	r3, [sp, #28]
 801018c:	9a00      	ldr	r2, [sp, #0]
 801018e:	429a      	cmp	r2, r3
 8010190:	d311      	bcc.n	80101b6 <__multiply+0xb6>
 8010192:	9b02      	ldr	r3, [sp, #8]
 8010194:	2b00      	cmp	r3, #0
 8010196:	dd06      	ble.n	80101a6 <__multiply+0xa6>
 8010198:	9b03      	ldr	r3, [sp, #12]
 801019a:	3b04      	subs	r3, #4
 801019c:	9303      	str	r3, [sp, #12]
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	9300      	str	r3, [sp, #0]
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d053      	beq.n	801024e <__multiply+0x14e>
 80101a6:	9b01      	ldr	r3, [sp, #4]
 80101a8:	9a02      	ldr	r2, [sp, #8]
 80101aa:	0018      	movs	r0, r3
 80101ac:	611a      	str	r2, [r3, #16]
 80101ae:	b009      	add	sp, #36	; 0x24
 80101b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80101b2:	c304      	stmia	r3!, {r2}
 80101b4:	e7cd      	b.n	8010152 <__multiply+0x52>
 80101b6:	9b00      	ldr	r3, [sp, #0]
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	b298      	uxth	r0, r3
 80101bc:	2800      	cmp	r0, #0
 80101be:	d01b      	beq.n	80101f8 <__multiply+0xf8>
 80101c0:	4667      	mov	r7, ip
 80101c2:	2400      	movs	r4, #0
 80101c4:	9e06      	ldr	r6, [sp, #24]
 80101c6:	ce02      	ldmia	r6!, {r1}
 80101c8:	683a      	ldr	r2, [r7, #0]
 80101ca:	b28b      	uxth	r3, r1
 80101cc:	4343      	muls	r3, r0
 80101ce:	b292      	uxth	r2, r2
 80101d0:	189b      	adds	r3, r3, r2
 80101d2:	191b      	adds	r3, r3, r4
 80101d4:	0c0c      	lsrs	r4, r1, #16
 80101d6:	4344      	muls	r4, r0
 80101d8:	683a      	ldr	r2, [r7, #0]
 80101da:	0c11      	lsrs	r1, r2, #16
 80101dc:	1861      	adds	r1, r4, r1
 80101de:	0c1c      	lsrs	r4, r3, #16
 80101e0:	1909      	adds	r1, r1, r4
 80101e2:	0c0c      	lsrs	r4, r1, #16
 80101e4:	b29b      	uxth	r3, r3
 80101e6:	0409      	lsls	r1, r1, #16
 80101e8:	430b      	orrs	r3, r1
 80101ea:	c708      	stmia	r7!, {r3}
 80101ec:	9b04      	ldr	r3, [sp, #16]
 80101ee:	42b3      	cmp	r3, r6
 80101f0:	d8e9      	bhi.n	80101c6 <__multiply+0xc6>
 80101f2:	4663      	mov	r3, ip
 80101f4:	9a05      	ldr	r2, [sp, #20]
 80101f6:	509c      	str	r4, [r3, r2]
 80101f8:	9b00      	ldr	r3, [sp, #0]
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	0c1e      	lsrs	r6, r3, #16
 80101fe:	d020      	beq.n	8010242 <__multiply+0x142>
 8010200:	4663      	mov	r3, ip
 8010202:	002c      	movs	r4, r5
 8010204:	4660      	mov	r0, ip
 8010206:	2700      	movs	r7, #0
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	3414      	adds	r4, #20
 801020c:	6822      	ldr	r2, [r4, #0]
 801020e:	b29b      	uxth	r3, r3
 8010210:	b291      	uxth	r1, r2
 8010212:	4371      	muls	r1, r6
 8010214:	6802      	ldr	r2, [r0, #0]
 8010216:	0c12      	lsrs	r2, r2, #16
 8010218:	1889      	adds	r1, r1, r2
 801021a:	19cf      	adds	r7, r1, r7
 801021c:	0439      	lsls	r1, r7, #16
 801021e:	430b      	orrs	r3, r1
 8010220:	6003      	str	r3, [r0, #0]
 8010222:	cc02      	ldmia	r4!, {r1}
 8010224:	6843      	ldr	r3, [r0, #4]
 8010226:	0c09      	lsrs	r1, r1, #16
 8010228:	4371      	muls	r1, r6
 801022a:	b29b      	uxth	r3, r3
 801022c:	0c3f      	lsrs	r7, r7, #16
 801022e:	18cb      	adds	r3, r1, r3
 8010230:	9a04      	ldr	r2, [sp, #16]
 8010232:	19db      	adds	r3, r3, r7
 8010234:	0c1f      	lsrs	r7, r3, #16
 8010236:	3004      	adds	r0, #4
 8010238:	42a2      	cmp	r2, r4
 801023a:	d8e7      	bhi.n	801020c <__multiply+0x10c>
 801023c:	4662      	mov	r2, ip
 801023e:	9905      	ldr	r1, [sp, #20]
 8010240:	5053      	str	r3, [r2, r1]
 8010242:	9b00      	ldr	r3, [sp, #0]
 8010244:	3304      	adds	r3, #4
 8010246:	9300      	str	r3, [sp, #0]
 8010248:	2304      	movs	r3, #4
 801024a:	449c      	add	ip, r3
 801024c:	e79d      	b.n	801018a <__multiply+0x8a>
 801024e:	9b02      	ldr	r3, [sp, #8]
 8010250:	3b01      	subs	r3, #1
 8010252:	9302      	str	r3, [sp, #8]
 8010254:	e79d      	b.n	8010192 <__multiply+0x92>
 8010256:	46c0      	nop			; (mov r8, r8)
 8010258:	080131a9 	.word	0x080131a9
 801025c:	0801324b 	.word	0x0801324b

08010260 <__pow5mult>:
 8010260:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010262:	2303      	movs	r3, #3
 8010264:	0015      	movs	r5, r2
 8010266:	0007      	movs	r7, r0
 8010268:	000e      	movs	r6, r1
 801026a:	401a      	ands	r2, r3
 801026c:	421d      	tst	r5, r3
 801026e:	d008      	beq.n	8010282 <__pow5mult+0x22>
 8010270:	4925      	ldr	r1, [pc, #148]	; (8010308 <__pow5mult+0xa8>)
 8010272:	3a01      	subs	r2, #1
 8010274:	0092      	lsls	r2, r2, #2
 8010276:	5852      	ldr	r2, [r2, r1]
 8010278:	2300      	movs	r3, #0
 801027a:	0031      	movs	r1, r6
 801027c:	f7ff fe52 	bl	800ff24 <__multadd>
 8010280:	0006      	movs	r6, r0
 8010282:	10ad      	asrs	r5, r5, #2
 8010284:	d03d      	beq.n	8010302 <__pow5mult+0xa2>
 8010286:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8010288:	2c00      	cmp	r4, #0
 801028a:	d10f      	bne.n	80102ac <__pow5mult+0x4c>
 801028c:	2010      	movs	r0, #16
 801028e:	f001 fdb5 	bl	8011dfc <malloc>
 8010292:	1e02      	subs	r2, r0, #0
 8010294:	6278      	str	r0, [r7, #36]	; 0x24
 8010296:	d105      	bne.n	80102a4 <__pow5mult+0x44>
 8010298:	21d7      	movs	r1, #215	; 0xd7
 801029a:	4b1c      	ldr	r3, [pc, #112]	; (801030c <__pow5mult+0xac>)
 801029c:	481c      	ldr	r0, [pc, #112]	; (8010310 <__pow5mult+0xb0>)
 801029e:	0049      	lsls	r1, r1, #1
 80102a0:	f000 fed8 	bl	8011054 <__assert_func>
 80102a4:	6044      	str	r4, [r0, #4]
 80102a6:	6084      	str	r4, [r0, #8]
 80102a8:	6004      	str	r4, [r0, #0]
 80102aa:	60c4      	str	r4, [r0, #12]
 80102ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102ae:	689c      	ldr	r4, [r3, #8]
 80102b0:	9301      	str	r3, [sp, #4]
 80102b2:	2c00      	cmp	r4, #0
 80102b4:	d108      	bne.n	80102c8 <__pow5mult+0x68>
 80102b6:	0038      	movs	r0, r7
 80102b8:	4916      	ldr	r1, [pc, #88]	; (8010314 <__pow5mult+0xb4>)
 80102ba:	f7ff ff0b 	bl	80100d4 <__i2b>
 80102be:	9b01      	ldr	r3, [sp, #4]
 80102c0:	0004      	movs	r4, r0
 80102c2:	6098      	str	r0, [r3, #8]
 80102c4:	2300      	movs	r3, #0
 80102c6:	6003      	str	r3, [r0, #0]
 80102c8:	2301      	movs	r3, #1
 80102ca:	421d      	tst	r5, r3
 80102cc:	d00a      	beq.n	80102e4 <__pow5mult+0x84>
 80102ce:	0031      	movs	r1, r6
 80102d0:	0022      	movs	r2, r4
 80102d2:	0038      	movs	r0, r7
 80102d4:	f7ff ff14 	bl	8010100 <__multiply>
 80102d8:	0031      	movs	r1, r6
 80102da:	9001      	str	r0, [sp, #4]
 80102dc:	0038      	movs	r0, r7
 80102de:	f7ff fdfd 	bl	800fedc <_Bfree>
 80102e2:	9e01      	ldr	r6, [sp, #4]
 80102e4:	106d      	asrs	r5, r5, #1
 80102e6:	d00c      	beq.n	8010302 <__pow5mult+0xa2>
 80102e8:	6820      	ldr	r0, [r4, #0]
 80102ea:	2800      	cmp	r0, #0
 80102ec:	d107      	bne.n	80102fe <__pow5mult+0x9e>
 80102ee:	0022      	movs	r2, r4
 80102f0:	0021      	movs	r1, r4
 80102f2:	0038      	movs	r0, r7
 80102f4:	f7ff ff04 	bl	8010100 <__multiply>
 80102f8:	2300      	movs	r3, #0
 80102fa:	6020      	str	r0, [r4, #0]
 80102fc:	6003      	str	r3, [r0, #0]
 80102fe:	0004      	movs	r4, r0
 8010300:	e7e2      	b.n	80102c8 <__pow5mult+0x68>
 8010302:	0030      	movs	r0, r6
 8010304:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010306:	46c0      	nop			; (mov r8, r8)
 8010308:	08013398 	.word	0x08013398
 801030c:	08013234 	.word	0x08013234
 8010310:	0801324b 	.word	0x0801324b
 8010314:	00000271 	.word	0x00000271

08010318 <__lshift>:
 8010318:	b5f0      	push	{r4, r5, r6, r7, lr}
 801031a:	000c      	movs	r4, r1
 801031c:	0017      	movs	r7, r2
 801031e:	6923      	ldr	r3, [r4, #16]
 8010320:	1155      	asrs	r5, r2, #5
 8010322:	b087      	sub	sp, #28
 8010324:	18eb      	adds	r3, r5, r3
 8010326:	9302      	str	r3, [sp, #8]
 8010328:	3301      	adds	r3, #1
 801032a:	9301      	str	r3, [sp, #4]
 801032c:	6849      	ldr	r1, [r1, #4]
 801032e:	68a3      	ldr	r3, [r4, #8]
 8010330:	9004      	str	r0, [sp, #16]
 8010332:	9a01      	ldr	r2, [sp, #4]
 8010334:	4293      	cmp	r3, r2
 8010336:	db10      	blt.n	801035a <__lshift+0x42>
 8010338:	9804      	ldr	r0, [sp, #16]
 801033a:	f7ff fd8b 	bl	800fe54 <_Balloc>
 801033e:	2300      	movs	r3, #0
 8010340:	0002      	movs	r2, r0
 8010342:	0006      	movs	r6, r0
 8010344:	0019      	movs	r1, r3
 8010346:	3214      	adds	r2, #20
 8010348:	4298      	cmp	r0, r3
 801034a:	d10c      	bne.n	8010366 <__lshift+0x4e>
 801034c:	21da      	movs	r1, #218	; 0xda
 801034e:	0002      	movs	r2, r0
 8010350:	4b26      	ldr	r3, [pc, #152]	; (80103ec <__lshift+0xd4>)
 8010352:	4827      	ldr	r0, [pc, #156]	; (80103f0 <__lshift+0xd8>)
 8010354:	31ff      	adds	r1, #255	; 0xff
 8010356:	f000 fe7d 	bl	8011054 <__assert_func>
 801035a:	3101      	adds	r1, #1
 801035c:	005b      	lsls	r3, r3, #1
 801035e:	e7e8      	b.n	8010332 <__lshift+0x1a>
 8010360:	0098      	lsls	r0, r3, #2
 8010362:	5011      	str	r1, [r2, r0]
 8010364:	3301      	adds	r3, #1
 8010366:	42ab      	cmp	r3, r5
 8010368:	dbfa      	blt.n	8010360 <__lshift+0x48>
 801036a:	43eb      	mvns	r3, r5
 801036c:	17db      	asrs	r3, r3, #31
 801036e:	401d      	ands	r5, r3
 8010370:	211f      	movs	r1, #31
 8010372:	0023      	movs	r3, r4
 8010374:	0038      	movs	r0, r7
 8010376:	00ad      	lsls	r5, r5, #2
 8010378:	1955      	adds	r5, r2, r5
 801037a:	6922      	ldr	r2, [r4, #16]
 801037c:	3314      	adds	r3, #20
 801037e:	0092      	lsls	r2, r2, #2
 8010380:	4008      	ands	r0, r1
 8010382:	4684      	mov	ip, r0
 8010384:	189a      	adds	r2, r3, r2
 8010386:	420f      	tst	r7, r1
 8010388:	d02a      	beq.n	80103e0 <__lshift+0xc8>
 801038a:	3101      	adds	r1, #1
 801038c:	1a09      	subs	r1, r1, r0
 801038e:	9105      	str	r1, [sp, #20]
 8010390:	2100      	movs	r1, #0
 8010392:	9503      	str	r5, [sp, #12]
 8010394:	4667      	mov	r7, ip
 8010396:	6818      	ldr	r0, [r3, #0]
 8010398:	40b8      	lsls	r0, r7
 801039a:	4301      	orrs	r1, r0
 801039c:	9803      	ldr	r0, [sp, #12]
 801039e:	c002      	stmia	r0!, {r1}
 80103a0:	cb02      	ldmia	r3!, {r1}
 80103a2:	9003      	str	r0, [sp, #12]
 80103a4:	9805      	ldr	r0, [sp, #20]
 80103a6:	40c1      	lsrs	r1, r0
 80103a8:	429a      	cmp	r2, r3
 80103aa:	d8f3      	bhi.n	8010394 <__lshift+0x7c>
 80103ac:	0020      	movs	r0, r4
 80103ae:	3015      	adds	r0, #21
 80103b0:	2304      	movs	r3, #4
 80103b2:	4282      	cmp	r2, r0
 80103b4:	d304      	bcc.n	80103c0 <__lshift+0xa8>
 80103b6:	1b13      	subs	r3, r2, r4
 80103b8:	3b15      	subs	r3, #21
 80103ba:	089b      	lsrs	r3, r3, #2
 80103bc:	3301      	adds	r3, #1
 80103be:	009b      	lsls	r3, r3, #2
 80103c0:	50e9      	str	r1, [r5, r3]
 80103c2:	2900      	cmp	r1, #0
 80103c4:	d002      	beq.n	80103cc <__lshift+0xb4>
 80103c6:	9b02      	ldr	r3, [sp, #8]
 80103c8:	3302      	adds	r3, #2
 80103ca:	9301      	str	r3, [sp, #4]
 80103cc:	9b01      	ldr	r3, [sp, #4]
 80103ce:	9804      	ldr	r0, [sp, #16]
 80103d0:	3b01      	subs	r3, #1
 80103d2:	0021      	movs	r1, r4
 80103d4:	6133      	str	r3, [r6, #16]
 80103d6:	f7ff fd81 	bl	800fedc <_Bfree>
 80103da:	0030      	movs	r0, r6
 80103dc:	b007      	add	sp, #28
 80103de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80103e0:	cb02      	ldmia	r3!, {r1}
 80103e2:	c502      	stmia	r5!, {r1}
 80103e4:	429a      	cmp	r2, r3
 80103e6:	d8fb      	bhi.n	80103e0 <__lshift+0xc8>
 80103e8:	e7f0      	b.n	80103cc <__lshift+0xb4>
 80103ea:	46c0      	nop			; (mov r8, r8)
 80103ec:	080131a9 	.word	0x080131a9
 80103f0:	0801324b 	.word	0x0801324b

080103f4 <__mcmp>:
 80103f4:	6902      	ldr	r2, [r0, #16]
 80103f6:	690b      	ldr	r3, [r1, #16]
 80103f8:	b530      	push	{r4, r5, lr}
 80103fa:	0004      	movs	r4, r0
 80103fc:	1ad0      	subs	r0, r2, r3
 80103fe:	429a      	cmp	r2, r3
 8010400:	d10d      	bne.n	801041e <__mcmp+0x2a>
 8010402:	009b      	lsls	r3, r3, #2
 8010404:	3414      	adds	r4, #20
 8010406:	3114      	adds	r1, #20
 8010408:	18e2      	adds	r2, r4, r3
 801040a:	18c9      	adds	r1, r1, r3
 801040c:	3a04      	subs	r2, #4
 801040e:	3904      	subs	r1, #4
 8010410:	6815      	ldr	r5, [r2, #0]
 8010412:	680b      	ldr	r3, [r1, #0]
 8010414:	429d      	cmp	r5, r3
 8010416:	d003      	beq.n	8010420 <__mcmp+0x2c>
 8010418:	2001      	movs	r0, #1
 801041a:	429d      	cmp	r5, r3
 801041c:	d303      	bcc.n	8010426 <__mcmp+0x32>
 801041e:	bd30      	pop	{r4, r5, pc}
 8010420:	4294      	cmp	r4, r2
 8010422:	d3f3      	bcc.n	801040c <__mcmp+0x18>
 8010424:	e7fb      	b.n	801041e <__mcmp+0x2a>
 8010426:	4240      	negs	r0, r0
 8010428:	e7f9      	b.n	801041e <__mcmp+0x2a>
	...

0801042c <__mdiff>:
 801042c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801042e:	000e      	movs	r6, r1
 8010430:	0007      	movs	r7, r0
 8010432:	0011      	movs	r1, r2
 8010434:	0030      	movs	r0, r6
 8010436:	b087      	sub	sp, #28
 8010438:	0014      	movs	r4, r2
 801043a:	f7ff ffdb 	bl	80103f4 <__mcmp>
 801043e:	1e05      	subs	r5, r0, #0
 8010440:	d110      	bne.n	8010464 <__mdiff+0x38>
 8010442:	0001      	movs	r1, r0
 8010444:	0038      	movs	r0, r7
 8010446:	f7ff fd05 	bl	800fe54 <_Balloc>
 801044a:	1e02      	subs	r2, r0, #0
 801044c:	d104      	bne.n	8010458 <__mdiff+0x2c>
 801044e:	4b40      	ldr	r3, [pc, #256]	; (8010550 <__mdiff+0x124>)
 8010450:	4940      	ldr	r1, [pc, #256]	; (8010554 <__mdiff+0x128>)
 8010452:	4841      	ldr	r0, [pc, #260]	; (8010558 <__mdiff+0x12c>)
 8010454:	f000 fdfe 	bl	8011054 <__assert_func>
 8010458:	2301      	movs	r3, #1
 801045a:	6145      	str	r5, [r0, #20]
 801045c:	6103      	str	r3, [r0, #16]
 801045e:	0010      	movs	r0, r2
 8010460:	b007      	add	sp, #28
 8010462:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010464:	2301      	movs	r3, #1
 8010466:	9301      	str	r3, [sp, #4]
 8010468:	2800      	cmp	r0, #0
 801046a:	db04      	blt.n	8010476 <__mdiff+0x4a>
 801046c:	0023      	movs	r3, r4
 801046e:	0034      	movs	r4, r6
 8010470:	001e      	movs	r6, r3
 8010472:	2300      	movs	r3, #0
 8010474:	9301      	str	r3, [sp, #4]
 8010476:	0038      	movs	r0, r7
 8010478:	6861      	ldr	r1, [r4, #4]
 801047a:	f7ff fceb 	bl	800fe54 <_Balloc>
 801047e:	1e02      	subs	r2, r0, #0
 8010480:	d103      	bne.n	801048a <__mdiff+0x5e>
 8010482:	2190      	movs	r1, #144	; 0x90
 8010484:	4b32      	ldr	r3, [pc, #200]	; (8010550 <__mdiff+0x124>)
 8010486:	0089      	lsls	r1, r1, #2
 8010488:	e7e3      	b.n	8010452 <__mdiff+0x26>
 801048a:	9b01      	ldr	r3, [sp, #4]
 801048c:	2700      	movs	r7, #0
 801048e:	60c3      	str	r3, [r0, #12]
 8010490:	6920      	ldr	r0, [r4, #16]
 8010492:	3414      	adds	r4, #20
 8010494:	9401      	str	r4, [sp, #4]
 8010496:	9b01      	ldr	r3, [sp, #4]
 8010498:	0084      	lsls	r4, r0, #2
 801049a:	191b      	adds	r3, r3, r4
 801049c:	0034      	movs	r4, r6
 801049e:	9302      	str	r3, [sp, #8]
 80104a0:	6933      	ldr	r3, [r6, #16]
 80104a2:	3414      	adds	r4, #20
 80104a4:	0099      	lsls	r1, r3, #2
 80104a6:	1863      	adds	r3, r4, r1
 80104a8:	9303      	str	r3, [sp, #12]
 80104aa:	0013      	movs	r3, r2
 80104ac:	3314      	adds	r3, #20
 80104ae:	469c      	mov	ip, r3
 80104b0:	9305      	str	r3, [sp, #20]
 80104b2:	9b01      	ldr	r3, [sp, #4]
 80104b4:	9304      	str	r3, [sp, #16]
 80104b6:	9b04      	ldr	r3, [sp, #16]
 80104b8:	cc02      	ldmia	r4!, {r1}
 80104ba:	cb20      	ldmia	r3!, {r5}
 80104bc:	9304      	str	r3, [sp, #16]
 80104be:	b2ab      	uxth	r3, r5
 80104c0:	19df      	adds	r7, r3, r7
 80104c2:	b28b      	uxth	r3, r1
 80104c4:	1afb      	subs	r3, r7, r3
 80104c6:	0c09      	lsrs	r1, r1, #16
 80104c8:	0c2d      	lsrs	r5, r5, #16
 80104ca:	1a6d      	subs	r5, r5, r1
 80104cc:	1419      	asrs	r1, r3, #16
 80104ce:	186d      	adds	r5, r5, r1
 80104d0:	4661      	mov	r1, ip
 80104d2:	142f      	asrs	r7, r5, #16
 80104d4:	b29b      	uxth	r3, r3
 80104d6:	042d      	lsls	r5, r5, #16
 80104d8:	432b      	orrs	r3, r5
 80104da:	c108      	stmia	r1!, {r3}
 80104dc:	9b03      	ldr	r3, [sp, #12]
 80104de:	468c      	mov	ip, r1
 80104e0:	42a3      	cmp	r3, r4
 80104e2:	d8e8      	bhi.n	80104b6 <__mdiff+0x8a>
 80104e4:	0031      	movs	r1, r6
 80104e6:	9c03      	ldr	r4, [sp, #12]
 80104e8:	3115      	adds	r1, #21
 80104ea:	2304      	movs	r3, #4
 80104ec:	428c      	cmp	r4, r1
 80104ee:	d304      	bcc.n	80104fa <__mdiff+0xce>
 80104f0:	1ba3      	subs	r3, r4, r6
 80104f2:	3b15      	subs	r3, #21
 80104f4:	089b      	lsrs	r3, r3, #2
 80104f6:	3301      	adds	r3, #1
 80104f8:	009b      	lsls	r3, r3, #2
 80104fa:	9901      	ldr	r1, [sp, #4]
 80104fc:	18cc      	adds	r4, r1, r3
 80104fe:	9905      	ldr	r1, [sp, #20]
 8010500:	0026      	movs	r6, r4
 8010502:	18cb      	adds	r3, r1, r3
 8010504:	469c      	mov	ip, r3
 8010506:	9902      	ldr	r1, [sp, #8]
 8010508:	428e      	cmp	r6, r1
 801050a:	d310      	bcc.n	801052e <__mdiff+0x102>
 801050c:	9e02      	ldr	r6, [sp, #8]
 801050e:	1ee1      	subs	r1, r4, #3
 8010510:	2500      	movs	r5, #0
 8010512:	428e      	cmp	r6, r1
 8010514:	d304      	bcc.n	8010520 <__mdiff+0xf4>
 8010516:	0031      	movs	r1, r6
 8010518:	3103      	adds	r1, #3
 801051a:	1b0c      	subs	r4, r1, r4
 801051c:	08a4      	lsrs	r4, r4, #2
 801051e:	00a5      	lsls	r5, r4, #2
 8010520:	195b      	adds	r3, r3, r5
 8010522:	3b04      	subs	r3, #4
 8010524:	6819      	ldr	r1, [r3, #0]
 8010526:	2900      	cmp	r1, #0
 8010528:	d00f      	beq.n	801054a <__mdiff+0x11e>
 801052a:	6110      	str	r0, [r2, #16]
 801052c:	e797      	b.n	801045e <__mdiff+0x32>
 801052e:	ce02      	ldmia	r6!, {r1}
 8010530:	b28d      	uxth	r5, r1
 8010532:	19ed      	adds	r5, r5, r7
 8010534:	0c0f      	lsrs	r7, r1, #16
 8010536:	1429      	asrs	r1, r5, #16
 8010538:	1879      	adds	r1, r7, r1
 801053a:	140f      	asrs	r7, r1, #16
 801053c:	b2ad      	uxth	r5, r5
 801053e:	0409      	lsls	r1, r1, #16
 8010540:	430d      	orrs	r5, r1
 8010542:	4661      	mov	r1, ip
 8010544:	c120      	stmia	r1!, {r5}
 8010546:	468c      	mov	ip, r1
 8010548:	e7dd      	b.n	8010506 <__mdiff+0xda>
 801054a:	3801      	subs	r0, #1
 801054c:	e7e9      	b.n	8010522 <__mdiff+0xf6>
 801054e:	46c0      	nop			; (mov r8, r8)
 8010550:	080131a9 	.word	0x080131a9
 8010554:	00000232 	.word	0x00000232
 8010558:	0801324b 	.word	0x0801324b

0801055c <__ulp>:
 801055c:	4b0f      	ldr	r3, [pc, #60]	; (801059c <__ulp+0x40>)
 801055e:	4019      	ands	r1, r3
 8010560:	4b0f      	ldr	r3, [pc, #60]	; (80105a0 <__ulp+0x44>)
 8010562:	18c9      	adds	r1, r1, r3
 8010564:	2900      	cmp	r1, #0
 8010566:	dd04      	ble.n	8010572 <__ulp+0x16>
 8010568:	2200      	movs	r2, #0
 801056a:	000b      	movs	r3, r1
 801056c:	0010      	movs	r0, r2
 801056e:	0019      	movs	r1, r3
 8010570:	4770      	bx	lr
 8010572:	4249      	negs	r1, r1
 8010574:	2200      	movs	r2, #0
 8010576:	2300      	movs	r3, #0
 8010578:	1509      	asrs	r1, r1, #20
 801057a:	2913      	cmp	r1, #19
 801057c:	dc04      	bgt.n	8010588 <__ulp+0x2c>
 801057e:	2080      	movs	r0, #128	; 0x80
 8010580:	0300      	lsls	r0, r0, #12
 8010582:	4108      	asrs	r0, r1
 8010584:	0003      	movs	r3, r0
 8010586:	e7f1      	b.n	801056c <__ulp+0x10>
 8010588:	3914      	subs	r1, #20
 801058a:	2001      	movs	r0, #1
 801058c:	291e      	cmp	r1, #30
 801058e:	dc02      	bgt.n	8010596 <__ulp+0x3a>
 8010590:	2080      	movs	r0, #128	; 0x80
 8010592:	0600      	lsls	r0, r0, #24
 8010594:	40c8      	lsrs	r0, r1
 8010596:	0002      	movs	r2, r0
 8010598:	e7e8      	b.n	801056c <__ulp+0x10>
 801059a:	46c0      	nop			; (mov r8, r8)
 801059c:	7ff00000 	.word	0x7ff00000
 80105a0:	fcc00000 	.word	0xfcc00000

080105a4 <__b2d>:
 80105a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80105a6:	0006      	movs	r6, r0
 80105a8:	6903      	ldr	r3, [r0, #16]
 80105aa:	3614      	adds	r6, #20
 80105ac:	009b      	lsls	r3, r3, #2
 80105ae:	18f3      	adds	r3, r6, r3
 80105b0:	1f1d      	subs	r5, r3, #4
 80105b2:	682c      	ldr	r4, [r5, #0]
 80105b4:	000f      	movs	r7, r1
 80105b6:	0020      	movs	r0, r4
 80105b8:	9301      	str	r3, [sp, #4]
 80105ba:	f7ff fd43 	bl	8010044 <__hi0bits>
 80105be:	2320      	movs	r3, #32
 80105c0:	1a1b      	subs	r3, r3, r0
 80105c2:	491f      	ldr	r1, [pc, #124]	; (8010640 <__b2d+0x9c>)
 80105c4:	603b      	str	r3, [r7, #0]
 80105c6:	280a      	cmp	r0, #10
 80105c8:	dc16      	bgt.n	80105f8 <__b2d+0x54>
 80105ca:	230b      	movs	r3, #11
 80105cc:	0027      	movs	r7, r4
 80105ce:	1a1b      	subs	r3, r3, r0
 80105d0:	40df      	lsrs	r7, r3
 80105d2:	4339      	orrs	r1, r7
 80105d4:	469c      	mov	ip, r3
 80105d6:	000b      	movs	r3, r1
 80105d8:	2100      	movs	r1, #0
 80105da:	42ae      	cmp	r6, r5
 80105dc:	d202      	bcs.n	80105e4 <__b2d+0x40>
 80105de:	9901      	ldr	r1, [sp, #4]
 80105e0:	3908      	subs	r1, #8
 80105e2:	6809      	ldr	r1, [r1, #0]
 80105e4:	3015      	adds	r0, #21
 80105e6:	4084      	lsls	r4, r0
 80105e8:	4660      	mov	r0, ip
 80105ea:	40c1      	lsrs	r1, r0
 80105ec:	430c      	orrs	r4, r1
 80105ee:	0022      	movs	r2, r4
 80105f0:	0010      	movs	r0, r2
 80105f2:	0019      	movs	r1, r3
 80105f4:	b003      	add	sp, #12
 80105f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80105f8:	2700      	movs	r7, #0
 80105fa:	42ae      	cmp	r6, r5
 80105fc:	d202      	bcs.n	8010604 <__b2d+0x60>
 80105fe:	9d01      	ldr	r5, [sp, #4]
 8010600:	3d08      	subs	r5, #8
 8010602:	682f      	ldr	r7, [r5, #0]
 8010604:	230b      	movs	r3, #11
 8010606:	425b      	negs	r3, r3
 8010608:	469c      	mov	ip, r3
 801060a:	4484      	add	ip, r0
 801060c:	280b      	cmp	r0, #11
 801060e:	d013      	beq.n	8010638 <__b2d+0x94>
 8010610:	4663      	mov	r3, ip
 8010612:	2020      	movs	r0, #32
 8010614:	409c      	lsls	r4, r3
 8010616:	1ac0      	subs	r0, r0, r3
 8010618:	003b      	movs	r3, r7
 801061a:	40c3      	lsrs	r3, r0
 801061c:	431c      	orrs	r4, r3
 801061e:	4321      	orrs	r1, r4
 8010620:	000b      	movs	r3, r1
 8010622:	2100      	movs	r1, #0
 8010624:	42b5      	cmp	r5, r6
 8010626:	d901      	bls.n	801062c <__b2d+0x88>
 8010628:	3d04      	subs	r5, #4
 801062a:	6829      	ldr	r1, [r5, #0]
 801062c:	4664      	mov	r4, ip
 801062e:	40c1      	lsrs	r1, r0
 8010630:	40a7      	lsls	r7, r4
 8010632:	430f      	orrs	r7, r1
 8010634:	003a      	movs	r2, r7
 8010636:	e7db      	b.n	80105f0 <__b2d+0x4c>
 8010638:	4321      	orrs	r1, r4
 801063a:	000b      	movs	r3, r1
 801063c:	e7fa      	b.n	8010634 <__b2d+0x90>
 801063e:	46c0      	nop			; (mov r8, r8)
 8010640:	3ff00000 	.word	0x3ff00000

08010644 <__d2b>:
 8010644:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010646:	2101      	movs	r1, #1
 8010648:	0014      	movs	r4, r2
 801064a:	001e      	movs	r6, r3
 801064c:	9f08      	ldr	r7, [sp, #32]
 801064e:	f7ff fc01 	bl	800fe54 <_Balloc>
 8010652:	1e05      	subs	r5, r0, #0
 8010654:	d105      	bne.n	8010662 <__d2b+0x1e>
 8010656:	0002      	movs	r2, r0
 8010658:	4b26      	ldr	r3, [pc, #152]	; (80106f4 <__d2b+0xb0>)
 801065a:	4927      	ldr	r1, [pc, #156]	; (80106f8 <__d2b+0xb4>)
 801065c:	4827      	ldr	r0, [pc, #156]	; (80106fc <__d2b+0xb8>)
 801065e:	f000 fcf9 	bl	8011054 <__assert_func>
 8010662:	0333      	lsls	r3, r6, #12
 8010664:	0076      	lsls	r6, r6, #1
 8010666:	0b1b      	lsrs	r3, r3, #12
 8010668:	0d76      	lsrs	r6, r6, #21
 801066a:	d124      	bne.n	80106b6 <__d2b+0x72>
 801066c:	9301      	str	r3, [sp, #4]
 801066e:	2c00      	cmp	r4, #0
 8010670:	d027      	beq.n	80106c2 <__d2b+0x7e>
 8010672:	4668      	mov	r0, sp
 8010674:	9400      	str	r4, [sp, #0]
 8010676:	f7ff fcff 	bl	8010078 <__lo0bits>
 801067a:	9c00      	ldr	r4, [sp, #0]
 801067c:	2800      	cmp	r0, #0
 801067e:	d01e      	beq.n	80106be <__d2b+0x7a>
 8010680:	9b01      	ldr	r3, [sp, #4]
 8010682:	2120      	movs	r1, #32
 8010684:	001a      	movs	r2, r3
 8010686:	1a09      	subs	r1, r1, r0
 8010688:	408a      	lsls	r2, r1
 801068a:	40c3      	lsrs	r3, r0
 801068c:	4322      	orrs	r2, r4
 801068e:	616a      	str	r2, [r5, #20]
 8010690:	9301      	str	r3, [sp, #4]
 8010692:	9c01      	ldr	r4, [sp, #4]
 8010694:	61ac      	str	r4, [r5, #24]
 8010696:	1e63      	subs	r3, r4, #1
 8010698:	419c      	sbcs	r4, r3
 801069a:	3401      	adds	r4, #1
 801069c:	612c      	str	r4, [r5, #16]
 801069e:	2e00      	cmp	r6, #0
 80106a0:	d018      	beq.n	80106d4 <__d2b+0x90>
 80106a2:	4b17      	ldr	r3, [pc, #92]	; (8010700 <__d2b+0xbc>)
 80106a4:	18f6      	adds	r6, r6, r3
 80106a6:	2335      	movs	r3, #53	; 0x35
 80106a8:	1836      	adds	r6, r6, r0
 80106aa:	1a18      	subs	r0, r3, r0
 80106ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106ae:	603e      	str	r6, [r7, #0]
 80106b0:	6018      	str	r0, [r3, #0]
 80106b2:	0028      	movs	r0, r5
 80106b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80106b6:	2280      	movs	r2, #128	; 0x80
 80106b8:	0352      	lsls	r2, r2, #13
 80106ba:	4313      	orrs	r3, r2
 80106bc:	e7d6      	b.n	801066c <__d2b+0x28>
 80106be:	616c      	str	r4, [r5, #20]
 80106c0:	e7e7      	b.n	8010692 <__d2b+0x4e>
 80106c2:	a801      	add	r0, sp, #4
 80106c4:	f7ff fcd8 	bl	8010078 <__lo0bits>
 80106c8:	2401      	movs	r4, #1
 80106ca:	9b01      	ldr	r3, [sp, #4]
 80106cc:	612c      	str	r4, [r5, #16]
 80106ce:	616b      	str	r3, [r5, #20]
 80106d0:	3020      	adds	r0, #32
 80106d2:	e7e4      	b.n	801069e <__d2b+0x5a>
 80106d4:	4b0b      	ldr	r3, [pc, #44]	; (8010704 <__d2b+0xc0>)
 80106d6:	18c0      	adds	r0, r0, r3
 80106d8:	4b0b      	ldr	r3, [pc, #44]	; (8010708 <__d2b+0xc4>)
 80106da:	6038      	str	r0, [r7, #0]
 80106dc:	18e3      	adds	r3, r4, r3
 80106de:	009b      	lsls	r3, r3, #2
 80106e0:	18eb      	adds	r3, r5, r3
 80106e2:	6958      	ldr	r0, [r3, #20]
 80106e4:	f7ff fcae 	bl	8010044 <__hi0bits>
 80106e8:	0164      	lsls	r4, r4, #5
 80106ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106ec:	1a24      	subs	r4, r4, r0
 80106ee:	601c      	str	r4, [r3, #0]
 80106f0:	e7df      	b.n	80106b2 <__d2b+0x6e>
 80106f2:	46c0      	nop			; (mov r8, r8)
 80106f4:	080131a9 	.word	0x080131a9
 80106f8:	0000030a 	.word	0x0000030a
 80106fc:	0801324b 	.word	0x0801324b
 8010700:	fffffbcd 	.word	0xfffffbcd
 8010704:	fffffbce 	.word	0xfffffbce
 8010708:	3fffffff 	.word	0x3fffffff

0801070c <__ratio>:
 801070c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801070e:	b087      	sub	sp, #28
 8010710:	000f      	movs	r7, r1
 8010712:	a904      	add	r1, sp, #16
 8010714:	0006      	movs	r6, r0
 8010716:	f7ff ff45 	bl	80105a4 <__b2d>
 801071a:	9000      	str	r0, [sp, #0]
 801071c:	9101      	str	r1, [sp, #4]
 801071e:	9c00      	ldr	r4, [sp, #0]
 8010720:	9d01      	ldr	r5, [sp, #4]
 8010722:	0038      	movs	r0, r7
 8010724:	a905      	add	r1, sp, #20
 8010726:	f7ff ff3d 	bl	80105a4 <__b2d>
 801072a:	9002      	str	r0, [sp, #8]
 801072c:	9103      	str	r1, [sp, #12]
 801072e:	9a02      	ldr	r2, [sp, #8]
 8010730:	9b03      	ldr	r3, [sp, #12]
 8010732:	6931      	ldr	r1, [r6, #16]
 8010734:	6938      	ldr	r0, [r7, #16]
 8010736:	9e05      	ldr	r6, [sp, #20]
 8010738:	1a08      	subs	r0, r1, r0
 801073a:	9904      	ldr	r1, [sp, #16]
 801073c:	0140      	lsls	r0, r0, #5
 801073e:	1b89      	subs	r1, r1, r6
 8010740:	1841      	adds	r1, r0, r1
 8010742:	0508      	lsls	r0, r1, #20
 8010744:	2900      	cmp	r1, #0
 8010746:	dd07      	ble.n	8010758 <__ratio+0x4c>
 8010748:	9901      	ldr	r1, [sp, #4]
 801074a:	1845      	adds	r5, r0, r1
 801074c:	0020      	movs	r0, r4
 801074e:	0029      	movs	r1, r5
 8010750:	f7f1 f96c 	bl	8001a2c <__aeabi_ddiv>
 8010754:	b007      	add	sp, #28
 8010756:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010758:	9903      	ldr	r1, [sp, #12]
 801075a:	1a0b      	subs	r3, r1, r0
 801075c:	e7f6      	b.n	801074c <__ratio+0x40>
	...

08010760 <_mprec_log10>:
 8010760:	b510      	push	{r4, lr}
 8010762:	0004      	movs	r4, r0
 8010764:	2817      	cmp	r0, #23
 8010766:	dc05      	bgt.n	8010774 <_mprec_log10+0x14>
 8010768:	4c07      	ldr	r4, [pc, #28]	; (8010788 <_mprec_log10+0x28>)
 801076a:	00c0      	lsls	r0, r0, #3
 801076c:	1824      	adds	r4, r4, r0
 801076e:	6820      	ldr	r0, [r4, #0]
 8010770:	6861      	ldr	r1, [r4, #4]
 8010772:	bd10      	pop	{r4, pc}
 8010774:	2000      	movs	r0, #0
 8010776:	4905      	ldr	r1, [pc, #20]	; (801078c <_mprec_log10+0x2c>)
 8010778:	2200      	movs	r2, #0
 801077a:	4b05      	ldr	r3, [pc, #20]	; (8010790 <_mprec_log10+0x30>)
 801077c:	3c01      	subs	r4, #1
 801077e:	f7f1 fd57 	bl	8002230 <__aeabi_dmul>
 8010782:	2c00      	cmp	r4, #0
 8010784:	d1f8      	bne.n	8010778 <_mprec_log10+0x18>
 8010786:	e7f4      	b.n	8010772 <_mprec_log10+0x12>
 8010788:	080132d0 	.word	0x080132d0
 801078c:	3ff00000 	.word	0x3ff00000
 8010790:	40240000 	.word	0x40240000

08010794 <__copybits>:
 8010794:	b570      	push	{r4, r5, r6, lr}
 8010796:	0014      	movs	r4, r2
 8010798:	0005      	movs	r5, r0
 801079a:	3901      	subs	r1, #1
 801079c:	6913      	ldr	r3, [r2, #16]
 801079e:	1149      	asrs	r1, r1, #5
 80107a0:	3101      	adds	r1, #1
 80107a2:	0089      	lsls	r1, r1, #2
 80107a4:	3414      	adds	r4, #20
 80107a6:	009b      	lsls	r3, r3, #2
 80107a8:	1841      	adds	r1, r0, r1
 80107aa:	18e3      	adds	r3, r4, r3
 80107ac:	42a3      	cmp	r3, r4
 80107ae:	d80d      	bhi.n	80107cc <__copybits+0x38>
 80107b0:	0014      	movs	r4, r2
 80107b2:	3411      	adds	r4, #17
 80107b4:	2500      	movs	r5, #0
 80107b6:	429c      	cmp	r4, r3
 80107b8:	d803      	bhi.n	80107c2 <__copybits+0x2e>
 80107ba:	1a9b      	subs	r3, r3, r2
 80107bc:	3b11      	subs	r3, #17
 80107be:	089b      	lsrs	r3, r3, #2
 80107c0:	009d      	lsls	r5, r3, #2
 80107c2:	2300      	movs	r3, #0
 80107c4:	1940      	adds	r0, r0, r5
 80107c6:	4281      	cmp	r1, r0
 80107c8:	d803      	bhi.n	80107d2 <__copybits+0x3e>
 80107ca:	bd70      	pop	{r4, r5, r6, pc}
 80107cc:	cc40      	ldmia	r4!, {r6}
 80107ce:	c540      	stmia	r5!, {r6}
 80107d0:	e7ec      	b.n	80107ac <__copybits+0x18>
 80107d2:	c008      	stmia	r0!, {r3}
 80107d4:	e7f7      	b.n	80107c6 <__copybits+0x32>

080107d6 <__any_on>:
 80107d6:	0002      	movs	r2, r0
 80107d8:	6900      	ldr	r0, [r0, #16]
 80107da:	b510      	push	{r4, lr}
 80107dc:	3214      	adds	r2, #20
 80107de:	114b      	asrs	r3, r1, #5
 80107e0:	4298      	cmp	r0, r3
 80107e2:	db13      	blt.n	801080c <__any_on+0x36>
 80107e4:	dd0c      	ble.n	8010800 <__any_on+0x2a>
 80107e6:	241f      	movs	r4, #31
 80107e8:	0008      	movs	r0, r1
 80107ea:	4020      	ands	r0, r4
 80107ec:	4221      	tst	r1, r4
 80107ee:	d007      	beq.n	8010800 <__any_on+0x2a>
 80107f0:	0099      	lsls	r1, r3, #2
 80107f2:	588c      	ldr	r4, [r1, r2]
 80107f4:	0021      	movs	r1, r4
 80107f6:	40c1      	lsrs	r1, r0
 80107f8:	4081      	lsls	r1, r0
 80107fa:	2001      	movs	r0, #1
 80107fc:	428c      	cmp	r4, r1
 80107fe:	d104      	bne.n	801080a <__any_on+0x34>
 8010800:	009b      	lsls	r3, r3, #2
 8010802:	18d3      	adds	r3, r2, r3
 8010804:	4293      	cmp	r3, r2
 8010806:	d803      	bhi.n	8010810 <__any_on+0x3a>
 8010808:	2000      	movs	r0, #0
 801080a:	bd10      	pop	{r4, pc}
 801080c:	0003      	movs	r3, r0
 801080e:	e7f7      	b.n	8010800 <__any_on+0x2a>
 8010810:	3b04      	subs	r3, #4
 8010812:	6819      	ldr	r1, [r3, #0]
 8010814:	2900      	cmp	r1, #0
 8010816:	d0f5      	beq.n	8010804 <__any_on+0x2e>
 8010818:	2001      	movs	r0, #1
 801081a:	e7f6      	b.n	801080a <__any_on+0x34>

0801081c <_calloc_r>:
 801081c:	b570      	push	{r4, r5, r6, lr}
 801081e:	0c13      	lsrs	r3, r2, #16
 8010820:	0c0d      	lsrs	r5, r1, #16
 8010822:	d11e      	bne.n	8010862 <_calloc_r+0x46>
 8010824:	2b00      	cmp	r3, #0
 8010826:	d10c      	bne.n	8010842 <_calloc_r+0x26>
 8010828:	b289      	uxth	r1, r1
 801082a:	b294      	uxth	r4, r2
 801082c:	434c      	muls	r4, r1
 801082e:	0021      	movs	r1, r4
 8010830:	f000 f842 	bl	80108b8 <_malloc_r>
 8010834:	1e05      	subs	r5, r0, #0
 8010836:	d01b      	beq.n	8010870 <_calloc_r+0x54>
 8010838:	0022      	movs	r2, r4
 801083a:	2100      	movs	r1, #0
 801083c:	f7fd fea7 	bl	800e58e <memset>
 8010840:	e016      	b.n	8010870 <_calloc_r+0x54>
 8010842:	1c1d      	adds	r5, r3, #0
 8010844:	1c0b      	adds	r3, r1, #0
 8010846:	b292      	uxth	r2, r2
 8010848:	b289      	uxth	r1, r1
 801084a:	b29c      	uxth	r4, r3
 801084c:	4351      	muls	r1, r2
 801084e:	b2ab      	uxth	r3, r5
 8010850:	4363      	muls	r3, r4
 8010852:	0c0c      	lsrs	r4, r1, #16
 8010854:	191c      	adds	r4, r3, r4
 8010856:	0c22      	lsrs	r2, r4, #16
 8010858:	d107      	bne.n	801086a <_calloc_r+0x4e>
 801085a:	0424      	lsls	r4, r4, #16
 801085c:	b289      	uxth	r1, r1
 801085e:	430c      	orrs	r4, r1
 8010860:	e7e5      	b.n	801082e <_calloc_r+0x12>
 8010862:	2b00      	cmp	r3, #0
 8010864:	d101      	bne.n	801086a <_calloc_r+0x4e>
 8010866:	1c13      	adds	r3, r2, #0
 8010868:	e7ed      	b.n	8010846 <_calloc_r+0x2a>
 801086a:	230c      	movs	r3, #12
 801086c:	2500      	movs	r5, #0
 801086e:	6003      	str	r3, [r0, #0]
 8010870:	0028      	movs	r0, r5
 8010872:	bd70      	pop	{r4, r5, r6, pc}

08010874 <sbrk_aligned>:
 8010874:	b570      	push	{r4, r5, r6, lr}
 8010876:	4e0f      	ldr	r6, [pc, #60]	; (80108b4 <sbrk_aligned+0x40>)
 8010878:	000d      	movs	r5, r1
 801087a:	6831      	ldr	r1, [r6, #0]
 801087c:	0004      	movs	r4, r0
 801087e:	2900      	cmp	r1, #0
 8010880:	d102      	bne.n	8010888 <sbrk_aligned+0x14>
 8010882:	f000 fba9 	bl	8010fd8 <_sbrk_r>
 8010886:	6030      	str	r0, [r6, #0]
 8010888:	0029      	movs	r1, r5
 801088a:	0020      	movs	r0, r4
 801088c:	f000 fba4 	bl	8010fd8 <_sbrk_r>
 8010890:	1c43      	adds	r3, r0, #1
 8010892:	d00a      	beq.n	80108aa <sbrk_aligned+0x36>
 8010894:	2303      	movs	r3, #3
 8010896:	1cc5      	adds	r5, r0, #3
 8010898:	439d      	bics	r5, r3
 801089a:	42a8      	cmp	r0, r5
 801089c:	d007      	beq.n	80108ae <sbrk_aligned+0x3a>
 801089e:	1a29      	subs	r1, r5, r0
 80108a0:	0020      	movs	r0, r4
 80108a2:	f000 fb99 	bl	8010fd8 <_sbrk_r>
 80108a6:	1c43      	adds	r3, r0, #1
 80108a8:	d101      	bne.n	80108ae <sbrk_aligned+0x3a>
 80108aa:	2501      	movs	r5, #1
 80108ac:	426d      	negs	r5, r5
 80108ae:	0028      	movs	r0, r5
 80108b0:	bd70      	pop	{r4, r5, r6, pc}
 80108b2:	46c0      	nop			; (mov r8, r8)
 80108b4:	20001064 	.word	0x20001064

080108b8 <_malloc_r>:
 80108b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80108ba:	2203      	movs	r2, #3
 80108bc:	1ccb      	adds	r3, r1, #3
 80108be:	4393      	bics	r3, r2
 80108c0:	3308      	adds	r3, #8
 80108c2:	0006      	movs	r6, r0
 80108c4:	001f      	movs	r7, r3
 80108c6:	2b0c      	cmp	r3, #12
 80108c8:	d232      	bcs.n	8010930 <_malloc_r+0x78>
 80108ca:	270c      	movs	r7, #12
 80108cc:	42b9      	cmp	r1, r7
 80108ce:	d831      	bhi.n	8010934 <_malloc_r+0x7c>
 80108d0:	0030      	movs	r0, r6
 80108d2:	f001 fabb 	bl	8011e4c <__malloc_lock>
 80108d6:	4d32      	ldr	r5, [pc, #200]	; (80109a0 <_malloc_r+0xe8>)
 80108d8:	682b      	ldr	r3, [r5, #0]
 80108da:	001c      	movs	r4, r3
 80108dc:	2c00      	cmp	r4, #0
 80108de:	d12e      	bne.n	801093e <_malloc_r+0x86>
 80108e0:	0039      	movs	r1, r7
 80108e2:	0030      	movs	r0, r6
 80108e4:	f7ff ffc6 	bl	8010874 <sbrk_aligned>
 80108e8:	0004      	movs	r4, r0
 80108ea:	1c43      	adds	r3, r0, #1
 80108ec:	d11e      	bne.n	801092c <_malloc_r+0x74>
 80108ee:	682c      	ldr	r4, [r5, #0]
 80108f0:	0025      	movs	r5, r4
 80108f2:	2d00      	cmp	r5, #0
 80108f4:	d14a      	bne.n	801098c <_malloc_r+0xd4>
 80108f6:	6823      	ldr	r3, [r4, #0]
 80108f8:	0029      	movs	r1, r5
 80108fa:	18e3      	adds	r3, r4, r3
 80108fc:	0030      	movs	r0, r6
 80108fe:	9301      	str	r3, [sp, #4]
 8010900:	f000 fb6a 	bl	8010fd8 <_sbrk_r>
 8010904:	9b01      	ldr	r3, [sp, #4]
 8010906:	4283      	cmp	r3, r0
 8010908:	d143      	bne.n	8010992 <_malloc_r+0xda>
 801090a:	6823      	ldr	r3, [r4, #0]
 801090c:	3703      	adds	r7, #3
 801090e:	1aff      	subs	r7, r7, r3
 8010910:	2303      	movs	r3, #3
 8010912:	439f      	bics	r7, r3
 8010914:	3708      	adds	r7, #8
 8010916:	2f0c      	cmp	r7, #12
 8010918:	d200      	bcs.n	801091c <_malloc_r+0x64>
 801091a:	270c      	movs	r7, #12
 801091c:	0039      	movs	r1, r7
 801091e:	0030      	movs	r0, r6
 8010920:	f7ff ffa8 	bl	8010874 <sbrk_aligned>
 8010924:	1c43      	adds	r3, r0, #1
 8010926:	d034      	beq.n	8010992 <_malloc_r+0xda>
 8010928:	6823      	ldr	r3, [r4, #0]
 801092a:	19df      	adds	r7, r3, r7
 801092c:	6027      	str	r7, [r4, #0]
 801092e:	e013      	b.n	8010958 <_malloc_r+0xa0>
 8010930:	2b00      	cmp	r3, #0
 8010932:	dacb      	bge.n	80108cc <_malloc_r+0x14>
 8010934:	230c      	movs	r3, #12
 8010936:	2500      	movs	r5, #0
 8010938:	6033      	str	r3, [r6, #0]
 801093a:	0028      	movs	r0, r5
 801093c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801093e:	6822      	ldr	r2, [r4, #0]
 8010940:	1bd1      	subs	r1, r2, r7
 8010942:	d420      	bmi.n	8010986 <_malloc_r+0xce>
 8010944:	290b      	cmp	r1, #11
 8010946:	d917      	bls.n	8010978 <_malloc_r+0xc0>
 8010948:	19e2      	adds	r2, r4, r7
 801094a:	6027      	str	r7, [r4, #0]
 801094c:	42a3      	cmp	r3, r4
 801094e:	d111      	bne.n	8010974 <_malloc_r+0xbc>
 8010950:	602a      	str	r2, [r5, #0]
 8010952:	6863      	ldr	r3, [r4, #4]
 8010954:	6011      	str	r1, [r2, #0]
 8010956:	6053      	str	r3, [r2, #4]
 8010958:	0030      	movs	r0, r6
 801095a:	0025      	movs	r5, r4
 801095c:	f001 fa7e 	bl	8011e5c <__malloc_unlock>
 8010960:	2207      	movs	r2, #7
 8010962:	350b      	adds	r5, #11
 8010964:	1d23      	adds	r3, r4, #4
 8010966:	4395      	bics	r5, r2
 8010968:	1aea      	subs	r2, r5, r3
 801096a:	429d      	cmp	r5, r3
 801096c:	d0e5      	beq.n	801093a <_malloc_r+0x82>
 801096e:	1b5b      	subs	r3, r3, r5
 8010970:	50a3      	str	r3, [r4, r2]
 8010972:	e7e2      	b.n	801093a <_malloc_r+0x82>
 8010974:	605a      	str	r2, [r3, #4]
 8010976:	e7ec      	b.n	8010952 <_malloc_r+0x9a>
 8010978:	6862      	ldr	r2, [r4, #4]
 801097a:	42a3      	cmp	r3, r4
 801097c:	d101      	bne.n	8010982 <_malloc_r+0xca>
 801097e:	602a      	str	r2, [r5, #0]
 8010980:	e7ea      	b.n	8010958 <_malloc_r+0xa0>
 8010982:	605a      	str	r2, [r3, #4]
 8010984:	e7e8      	b.n	8010958 <_malloc_r+0xa0>
 8010986:	0023      	movs	r3, r4
 8010988:	6864      	ldr	r4, [r4, #4]
 801098a:	e7a7      	b.n	80108dc <_malloc_r+0x24>
 801098c:	002c      	movs	r4, r5
 801098e:	686d      	ldr	r5, [r5, #4]
 8010990:	e7af      	b.n	80108f2 <_malloc_r+0x3a>
 8010992:	230c      	movs	r3, #12
 8010994:	0030      	movs	r0, r6
 8010996:	6033      	str	r3, [r6, #0]
 8010998:	f001 fa60 	bl	8011e5c <__malloc_unlock>
 801099c:	e7cd      	b.n	801093a <_malloc_r+0x82>
 801099e:	46c0      	nop			; (mov r8, r8)
 80109a0:	20001060 	.word	0x20001060

080109a4 <_realloc_r>:
 80109a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80109a6:	0007      	movs	r7, r0
 80109a8:	000e      	movs	r6, r1
 80109aa:	0014      	movs	r4, r2
 80109ac:	2900      	cmp	r1, #0
 80109ae:	d105      	bne.n	80109bc <_realloc_r+0x18>
 80109b0:	0011      	movs	r1, r2
 80109b2:	f7ff ff81 	bl	80108b8 <_malloc_r>
 80109b6:	0005      	movs	r5, r0
 80109b8:	0028      	movs	r0, r5
 80109ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80109bc:	2a00      	cmp	r2, #0
 80109be:	d103      	bne.n	80109c8 <_realloc_r+0x24>
 80109c0:	f001 fa54 	bl	8011e6c <_free_r>
 80109c4:	0025      	movs	r5, r4
 80109c6:	e7f7      	b.n	80109b8 <_realloc_r+0x14>
 80109c8:	f001 fa9a 	bl	8011f00 <_malloc_usable_size_r>
 80109cc:	9001      	str	r0, [sp, #4]
 80109ce:	4284      	cmp	r4, r0
 80109d0:	d803      	bhi.n	80109da <_realloc_r+0x36>
 80109d2:	0035      	movs	r5, r6
 80109d4:	0843      	lsrs	r3, r0, #1
 80109d6:	42a3      	cmp	r3, r4
 80109d8:	d3ee      	bcc.n	80109b8 <_realloc_r+0x14>
 80109da:	0021      	movs	r1, r4
 80109dc:	0038      	movs	r0, r7
 80109de:	f7ff ff6b 	bl	80108b8 <_malloc_r>
 80109e2:	1e05      	subs	r5, r0, #0
 80109e4:	d0e8      	beq.n	80109b8 <_realloc_r+0x14>
 80109e6:	9b01      	ldr	r3, [sp, #4]
 80109e8:	0022      	movs	r2, r4
 80109ea:	429c      	cmp	r4, r3
 80109ec:	d900      	bls.n	80109f0 <_realloc_r+0x4c>
 80109ee:	001a      	movs	r2, r3
 80109f0:	0031      	movs	r1, r6
 80109f2:	0028      	movs	r0, r5
 80109f4:	f7fd fdc2 	bl	800e57c <memcpy>
 80109f8:	0031      	movs	r1, r6
 80109fa:	0038      	movs	r0, r7
 80109fc:	f001 fa36 	bl	8011e6c <_free_r>
 8010a00:	e7da      	b.n	80109b8 <_realloc_r+0x14>
	...

08010a04 <__ssputs_r>:
 8010a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010a06:	688e      	ldr	r6, [r1, #8]
 8010a08:	b085      	sub	sp, #20
 8010a0a:	0007      	movs	r7, r0
 8010a0c:	000c      	movs	r4, r1
 8010a0e:	9203      	str	r2, [sp, #12]
 8010a10:	9301      	str	r3, [sp, #4]
 8010a12:	429e      	cmp	r6, r3
 8010a14:	d83c      	bhi.n	8010a90 <__ssputs_r+0x8c>
 8010a16:	2390      	movs	r3, #144	; 0x90
 8010a18:	898a      	ldrh	r2, [r1, #12]
 8010a1a:	00db      	lsls	r3, r3, #3
 8010a1c:	421a      	tst	r2, r3
 8010a1e:	d034      	beq.n	8010a8a <__ssputs_r+0x86>
 8010a20:	6909      	ldr	r1, [r1, #16]
 8010a22:	6823      	ldr	r3, [r4, #0]
 8010a24:	6960      	ldr	r0, [r4, #20]
 8010a26:	1a5b      	subs	r3, r3, r1
 8010a28:	9302      	str	r3, [sp, #8]
 8010a2a:	2303      	movs	r3, #3
 8010a2c:	4343      	muls	r3, r0
 8010a2e:	0fdd      	lsrs	r5, r3, #31
 8010a30:	18ed      	adds	r5, r5, r3
 8010a32:	9b01      	ldr	r3, [sp, #4]
 8010a34:	9802      	ldr	r0, [sp, #8]
 8010a36:	3301      	adds	r3, #1
 8010a38:	181b      	adds	r3, r3, r0
 8010a3a:	106d      	asrs	r5, r5, #1
 8010a3c:	42ab      	cmp	r3, r5
 8010a3e:	d900      	bls.n	8010a42 <__ssputs_r+0x3e>
 8010a40:	001d      	movs	r5, r3
 8010a42:	0553      	lsls	r3, r2, #21
 8010a44:	d532      	bpl.n	8010aac <__ssputs_r+0xa8>
 8010a46:	0029      	movs	r1, r5
 8010a48:	0038      	movs	r0, r7
 8010a4a:	f7ff ff35 	bl	80108b8 <_malloc_r>
 8010a4e:	1e06      	subs	r6, r0, #0
 8010a50:	d109      	bne.n	8010a66 <__ssputs_r+0x62>
 8010a52:	230c      	movs	r3, #12
 8010a54:	603b      	str	r3, [r7, #0]
 8010a56:	2340      	movs	r3, #64	; 0x40
 8010a58:	2001      	movs	r0, #1
 8010a5a:	89a2      	ldrh	r2, [r4, #12]
 8010a5c:	4240      	negs	r0, r0
 8010a5e:	4313      	orrs	r3, r2
 8010a60:	81a3      	strh	r3, [r4, #12]
 8010a62:	b005      	add	sp, #20
 8010a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a66:	9a02      	ldr	r2, [sp, #8]
 8010a68:	6921      	ldr	r1, [r4, #16]
 8010a6a:	f7fd fd87 	bl	800e57c <memcpy>
 8010a6e:	89a3      	ldrh	r3, [r4, #12]
 8010a70:	4a14      	ldr	r2, [pc, #80]	; (8010ac4 <__ssputs_r+0xc0>)
 8010a72:	401a      	ands	r2, r3
 8010a74:	2380      	movs	r3, #128	; 0x80
 8010a76:	4313      	orrs	r3, r2
 8010a78:	81a3      	strh	r3, [r4, #12]
 8010a7a:	9b02      	ldr	r3, [sp, #8]
 8010a7c:	6126      	str	r6, [r4, #16]
 8010a7e:	18f6      	adds	r6, r6, r3
 8010a80:	6026      	str	r6, [r4, #0]
 8010a82:	6165      	str	r5, [r4, #20]
 8010a84:	9e01      	ldr	r6, [sp, #4]
 8010a86:	1aed      	subs	r5, r5, r3
 8010a88:	60a5      	str	r5, [r4, #8]
 8010a8a:	9b01      	ldr	r3, [sp, #4]
 8010a8c:	429e      	cmp	r6, r3
 8010a8e:	d900      	bls.n	8010a92 <__ssputs_r+0x8e>
 8010a90:	9e01      	ldr	r6, [sp, #4]
 8010a92:	0032      	movs	r2, r6
 8010a94:	9903      	ldr	r1, [sp, #12]
 8010a96:	6820      	ldr	r0, [r4, #0]
 8010a98:	f001 f9c5 	bl	8011e26 <memmove>
 8010a9c:	68a3      	ldr	r3, [r4, #8]
 8010a9e:	2000      	movs	r0, #0
 8010aa0:	1b9b      	subs	r3, r3, r6
 8010aa2:	60a3      	str	r3, [r4, #8]
 8010aa4:	6823      	ldr	r3, [r4, #0]
 8010aa6:	199e      	adds	r6, r3, r6
 8010aa8:	6026      	str	r6, [r4, #0]
 8010aaa:	e7da      	b.n	8010a62 <__ssputs_r+0x5e>
 8010aac:	002a      	movs	r2, r5
 8010aae:	0038      	movs	r0, r7
 8010ab0:	f7ff ff78 	bl	80109a4 <_realloc_r>
 8010ab4:	1e06      	subs	r6, r0, #0
 8010ab6:	d1e0      	bne.n	8010a7a <__ssputs_r+0x76>
 8010ab8:	0038      	movs	r0, r7
 8010aba:	6921      	ldr	r1, [r4, #16]
 8010abc:	f001 f9d6 	bl	8011e6c <_free_r>
 8010ac0:	e7c7      	b.n	8010a52 <__ssputs_r+0x4e>
 8010ac2:	46c0      	nop			; (mov r8, r8)
 8010ac4:	fffffb7f 	.word	0xfffffb7f

08010ac8 <_svfiprintf_r>:
 8010ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010aca:	b0a1      	sub	sp, #132	; 0x84
 8010acc:	9003      	str	r0, [sp, #12]
 8010ace:	001d      	movs	r5, r3
 8010ad0:	898b      	ldrh	r3, [r1, #12]
 8010ad2:	000f      	movs	r7, r1
 8010ad4:	0016      	movs	r6, r2
 8010ad6:	061b      	lsls	r3, r3, #24
 8010ad8:	d511      	bpl.n	8010afe <_svfiprintf_r+0x36>
 8010ada:	690b      	ldr	r3, [r1, #16]
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d10e      	bne.n	8010afe <_svfiprintf_r+0x36>
 8010ae0:	2140      	movs	r1, #64	; 0x40
 8010ae2:	f7ff fee9 	bl	80108b8 <_malloc_r>
 8010ae6:	6038      	str	r0, [r7, #0]
 8010ae8:	6138      	str	r0, [r7, #16]
 8010aea:	2800      	cmp	r0, #0
 8010aec:	d105      	bne.n	8010afa <_svfiprintf_r+0x32>
 8010aee:	230c      	movs	r3, #12
 8010af0:	9a03      	ldr	r2, [sp, #12]
 8010af2:	3801      	subs	r0, #1
 8010af4:	6013      	str	r3, [r2, #0]
 8010af6:	b021      	add	sp, #132	; 0x84
 8010af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010afa:	2340      	movs	r3, #64	; 0x40
 8010afc:	617b      	str	r3, [r7, #20]
 8010afe:	2300      	movs	r3, #0
 8010b00:	ac08      	add	r4, sp, #32
 8010b02:	6163      	str	r3, [r4, #20]
 8010b04:	3320      	adds	r3, #32
 8010b06:	7663      	strb	r3, [r4, #25]
 8010b08:	3310      	adds	r3, #16
 8010b0a:	76a3      	strb	r3, [r4, #26]
 8010b0c:	9507      	str	r5, [sp, #28]
 8010b0e:	0035      	movs	r5, r6
 8010b10:	782b      	ldrb	r3, [r5, #0]
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d001      	beq.n	8010b1a <_svfiprintf_r+0x52>
 8010b16:	2b25      	cmp	r3, #37	; 0x25
 8010b18:	d147      	bne.n	8010baa <_svfiprintf_r+0xe2>
 8010b1a:	1bab      	subs	r3, r5, r6
 8010b1c:	9305      	str	r3, [sp, #20]
 8010b1e:	42b5      	cmp	r5, r6
 8010b20:	d00c      	beq.n	8010b3c <_svfiprintf_r+0x74>
 8010b22:	0032      	movs	r2, r6
 8010b24:	0039      	movs	r1, r7
 8010b26:	9803      	ldr	r0, [sp, #12]
 8010b28:	f7ff ff6c 	bl	8010a04 <__ssputs_r>
 8010b2c:	1c43      	adds	r3, r0, #1
 8010b2e:	d100      	bne.n	8010b32 <_svfiprintf_r+0x6a>
 8010b30:	e0ae      	b.n	8010c90 <_svfiprintf_r+0x1c8>
 8010b32:	6962      	ldr	r2, [r4, #20]
 8010b34:	9b05      	ldr	r3, [sp, #20]
 8010b36:	4694      	mov	ip, r2
 8010b38:	4463      	add	r3, ip
 8010b3a:	6163      	str	r3, [r4, #20]
 8010b3c:	782b      	ldrb	r3, [r5, #0]
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d100      	bne.n	8010b44 <_svfiprintf_r+0x7c>
 8010b42:	e0a5      	b.n	8010c90 <_svfiprintf_r+0x1c8>
 8010b44:	2201      	movs	r2, #1
 8010b46:	2300      	movs	r3, #0
 8010b48:	4252      	negs	r2, r2
 8010b4a:	6062      	str	r2, [r4, #4]
 8010b4c:	a904      	add	r1, sp, #16
 8010b4e:	3254      	adds	r2, #84	; 0x54
 8010b50:	1852      	adds	r2, r2, r1
 8010b52:	1c6e      	adds	r6, r5, #1
 8010b54:	6023      	str	r3, [r4, #0]
 8010b56:	60e3      	str	r3, [r4, #12]
 8010b58:	60a3      	str	r3, [r4, #8]
 8010b5a:	7013      	strb	r3, [r2, #0]
 8010b5c:	65a3      	str	r3, [r4, #88]	; 0x58
 8010b5e:	2205      	movs	r2, #5
 8010b60:	7831      	ldrb	r1, [r6, #0]
 8010b62:	4854      	ldr	r0, [pc, #336]	; (8010cb4 <_svfiprintf_r+0x1ec>)
 8010b64:	f001 f954 	bl	8011e10 <memchr>
 8010b68:	1c75      	adds	r5, r6, #1
 8010b6a:	2800      	cmp	r0, #0
 8010b6c:	d11f      	bne.n	8010bae <_svfiprintf_r+0xe6>
 8010b6e:	6822      	ldr	r2, [r4, #0]
 8010b70:	06d3      	lsls	r3, r2, #27
 8010b72:	d504      	bpl.n	8010b7e <_svfiprintf_r+0xb6>
 8010b74:	2353      	movs	r3, #83	; 0x53
 8010b76:	a904      	add	r1, sp, #16
 8010b78:	185b      	adds	r3, r3, r1
 8010b7a:	2120      	movs	r1, #32
 8010b7c:	7019      	strb	r1, [r3, #0]
 8010b7e:	0713      	lsls	r3, r2, #28
 8010b80:	d504      	bpl.n	8010b8c <_svfiprintf_r+0xc4>
 8010b82:	2353      	movs	r3, #83	; 0x53
 8010b84:	a904      	add	r1, sp, #16
 8010b86:	185b      	adds	r3, r3, r1
 8010b88:	212b      	movs	r1, #43	; 0x2b
 8010b8a:	7019      	strb	r1, [r3, #0]
 8010b8c:	7833      	ldrb	r3, [r6, #0]
 8010b8e:	2b2a      	cmp	r3, #42	; 0x2a
 8010b90:	d016      	beq.n	8010bc0 <_svfiprintf_r+0xf8>
 8010b92:	0035      	movs	r5, r6
 8010b94:	2100      	movs	r1, #0
 8010b96:	200a      	movs	r0, #10
 8010b98:	68e3      	ldr	r3, [r4, #12]
 8010b9a:	782a      	ldrb	r2, [r5, #0]
 8010b9c:	1c6e      	adds	r6, r5, #1
 8010b9e:	3a30      	subs	r2, #48	; 0x30
 8010ba0:	2a09      	cmp	r2, #9
 8010ba2:	d94e      	bls.n	8010c42 <_svfiprintf_r+0x17a>
 8010ba4:	2900      	cmp	r1, #0
 8010ba6:	d111      	bne.n	8010bcc <_svfiprintf_r+0x104>
 8010ba8:	e017      	b.n	8010bda <_svfiprintf_r+0x112>
 8010baa:	3501      	adds	r5, #1
 8010bac:	e7b0      	b.n	8010b10 <_svfiprintf_r+0x48>
 8010bae:	4b41      	ldr	r3, [pc, #260]	; (8010cb4 <_svfiprintf_r+0x1ec>)
 8010bb0:	6822      	ldr	r2, [r4, #0]
 8010bb2:	1ac0      	subs	r0, r0, r3
 8010bb4:	2301      	movs	r3, #1
 8010bb6:	4083      	lsls	r3, r0
 8010bb8:	4313      	orrs	r3, r2
 8010bba:	002e      	movs	r6, r5
 8010bbc:	6023      	str	r3, [r4, #0]
 8010bbe:	e7ce      	b.n	8010b5e <_svfiprintf_r+0x96>
 8010bc0:	9b07      	ldr	r3, [sp, #28]
 8010bc2:	1d19      	adds	r1, r3, #4
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	9107      	str	r1, [sp, #28]
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	db01      	blt.n	8010bd0 <_svfiprintf_r+0x108>
 8010bcc:	930b      	str	r3, [sp, #44]	; 0x2c
 8010bce:	e004      	b.n	8010bda <_svfiprintf_r+0x112>
 8010bd0:	425b      	negs	r3, r3
 8010bd2:	60e3      	str	r3, [r4, #12]
 8010bd4:	2302      	movs	r3, #2
 8010bd6:	4313      	orrs	r3, r2
 8010bd8:	6023      	str	r3, [r4, #0]
 8010bda:	782b      	ldrb	r3, [r5, #0]
 8010bdc:	2b2e      	cmp	r3, #46	; 0x2e
 8010bde:	d10a      	bne.n	8010bf6 <_svfiprintf_r+0x12e>
 8010be0:	786b      	ldrb	r3, [r5, #1]
 8010be2:	2b2a      	cmp	r3, #42	; 0x2a
 8010be4:	d135      	bne.n	8010c52 <_svfiprintf_r+0x18a>
 8010be6:	9b07      	ldr	r3, [sp, #28]
 8010be8:	3502      	adds	r5, #2
 8010bea:	1d1a      	adds	r2, r3, #4
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	9207      	str	r2, [sp, #28]
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	db2b      	blt.n	8010c4c <_svfiprintf_r+0x184>
 8010bf4:	9309      	str	r3, [sp, #36]	; 0x24
 8010bf6:	4e30      	ldr	r6, [pc, #192]	; (8010cb8 <_svfiprintf_r+0x1f0>)
 8010bf8:	2203      	movs	r2, #3
 8010bfa:	0030      	movs	r0, r6
 8010bfc:	7829      	ldrb	r1, [r5, #0]
 8010bfe:	f001 f907 	bl	8011e10 <memchr>
 8010c02:	2800      	cmp	r0, #0
 8010c04:	d006      	beq.n	8010c14 <_svfiprintf_r+0x14c>
 8010c06:	2340      	movs	r3, #64	; 0x40
 8010c08:	1b80      	subs	r0, r0, r6
 8010c0a:	4083      	lsls	r3, r0
 8010c0c:	6822      	ldr	r2, [r4, #0]
 8010c0e:	3501      	adds	r5, #1
 8010c10:	4313      	orrs	r3, r2
 8010c12:	6023      	str	r3, [r4, #0]
 8010c14:	7829      	ldrb	r1, [r5, #0]
 8010c16:	2206      	movs	r2, #6
 8010c18:	4828      	ldr	r0, [pc, #160]	; (8010cbc <_svfiprintf_r+0x1f4>)
 8010c1a:	1c6e      	adds	r6, r5, #1
 8010c1c:	7621      	strb	r1, [r4, #24]
 8010c1e:	f001 f8f7 	bl	8011e10 <memchr>
 8010c22:	2800      	cmp	r0, #0
 8010c24:	d03c      	beq.n	8010ca0 <_svfiprintf_r+0x1d8>
 8010c26:	4b26      	ldr	r3, [pc, #152]	; (8010cc0 <_svfiprintf_r+0x1f8>)
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d125      	bne.n	8010c78 <_svfiprintf_r+0x1b0>
 8010c2c:	2207      	movs	r2, #7
 8010c2e:	9b07      	ldr	r3, [sp, #28]
 8010c30:	3307      	adds	r3, #7
 8010c32:	4393      	bics	r3, r2
 8010c34:	3308      	adds	r3, #8
 8010c36:	9307      	str	r3, [sp, #28]
 8010c38:	6963      	ldr	r3, [r4, #20]
 8010c3a:	9a04      	ldr	r2, [sp, #16]
 8010c3c:	189b      	adds	r3, r3, r2
 8010c3e:	6163      	str	r3, [r4, #20]
 8010c40:	e765      	b.n	8010b0e <_svfiprintf_r+0x46>
 8010c42:	4343      	muls	r3, r0
 8010c44:	0035      	movs	r5, r6
 8010c46:	2101      	movs	r1, #1
 8010c48:	189b      	adds	r3, r3, r2
 8010c4a:	e7a6      	b.n	8010b9a <_svfiprintf_r+0xd2>
 8010c4c:	2301      	movs	r3, #1
 8010c4e:	425b      	negs	r3, r3
 8010c50:	e7d0      	b.n	8010bf4 <_svfiprintf_r+0x12c>
 8010c52:	2300      	movs	r3, #0
 8010c54:	200a      	movs	r0, #10
 8010c56:	001a      	movs	r2, r3
 8010c58:	3501      	adds	r5, #1
 8010c5a:	6063      	str	r3, [r4, #4]
 8010c5c:	7829      	ldrb	r1, [r5, #0]
 8010c5e:	1c6e      	adds	r6, r5, #1
 8010c60:	3930      	subs	r1, #48	; 0x30
 8010c62:	2909      	cmp	r1, #9
 8010c64:	d903      	bls.n	8010c6e <_svfiprintf_r+0x1a6>
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d0c5      	beq.n	8010bf6 <_svfiprintf_r+0x12e>
 8010c6a:	9209      	str	r2, [sp, #36]	; 0x24
 8010c6c:	e7c3      	b.n	8010bf6 <_svfiprintf_r+0x12e>
 8010c6e:	4342      	muls	r2, r0
 8010c70:	0035      	movs	r5, r6
 8010c72:	2301      	movs	r3, #1
 8010c74:	1852      	adds	r2, r2, r1
 8010c76:	e7f1      	b.n	8010c5c <_svfiprintf_r+0x194>
 8010c78:	ab07      	add	r3, sp, #28
 8010c7a:	9300      	str	r3, [sp, #0]
 8010c7c:	003a      	movs	r2, r7
 8010c7e:	0021      	movs	r1, r4
 8010c80:	4b10      	ldr	r3, [pc, #64]	; (8010cc4 <_svfiprintf_r+0x1fc>)
 8010c82:	9803      	ldr	r0, [sp, #12]
 8010c84:	e000      	b.n	8010c88 <_svfiprintf_r+0x1c0>
 8010c86:	bf00      	nop
 8010c88:	9004      	str	r0, [sp, #16]
 8010c8a:	9b04      	ldr	r3, [sp, #16]
 8010c8c:	3301      	adds	r3, #1
 8010c8e:	d1d3      	bne.n	8010c38 <_svfiprintf_r+0x170>
 8010c90:	89bb      	ldrh	r3, [r7, #12]
 8010c92:	980d      	ldr	r0, [sp, #52]	; 0x34
 8010c94:	065b      	lsls	r3, r3, #25
 8010c96:	d400      	bmi.n	8010c9a <_svfiprintf_r+0x1d2>
 8010c98:	e72d      	b.n	8010af6 <_svfiprintf_r+0x2e>
 8010c9a:	2001      	movs	r0, #1
 8010c9c:	4240      	negs	r0, r0
 8010c9e:	e72a      	b.n	8010af6 <_svfiprintf_r+0x2e>
 8010ca0:	ab07      	add	r3, sp, #28
 8010ca2:	9300      	str	r3, [sp, #0]
 8010ca4:	003a      	movs	r2, r7
 8010ca6:	0021      	movs	r1, r4
 8010ca8:	4b06      	ldr	r3, [pc, #24]	; (8010cc4 <_svfiprintf_r+0x1fc>)
 8010caa:	9803      	ldr	r0, [sp, #12]
 8010cac:	f000 f87c 	bl	8010da8 <_printf_i>
 8010cb0:	e7ea      	b.n	8010c88 <_svfiprintf_r+0x1c0>
 8010cb2:	46c0      	nop			; (mov r8, r8)
 8010cb4:	080133a4 	.word	0x080133a4
 8010cb8:	080133aa 	.word	0x080133aa
 8010cbc:	080133ae 	.word	0x080133ae
 8010cc0:	00000000 	.word	0x00000000
 8010cc4:	08010a05 	.word	0x08010a05

08010cc8 <_printf_common>:
 8010cc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010cca:	0015      	movs	r5, r2
 8010ccc:	9301      	str	r3, [sp, #4]
 8010cce:	688a      	ldr	r2, [r1, #8]
 8010cd0:	690b      	ldr	r3, [r1, #16]
 8010cd2:	000c      	movs	r4, r1
 8010cd4:	9000      	str	r0, [sp, #0]
 8010cd6:	4293      	cmp	r3, r2
 8010cd8:	da00      	bge.n	8010cdc <_printf_common+0x14>
 8010cda:	0013      	movs	r3, r2
 8010cdc:	0022      	movs	r2, r4
 8010cde:	602b      	str	r3, [r5, #0]
 8010ce0:	3243      	adds	r2, #67	; 0x43
 8010ce2:	7812      	ldrb	r2, [r2, #0]
 8010ce4:	2a00      	cmp	r2, #0
 8010ce6:	d001      	beq.n	8010cec <_printf_common+0x24>
 8010ce8:	3301      	adds	r3, #1
 8010cea:	602b      	str	r3, [r5, #0]
 8010cec:	6823      	ldr	r3, [r4, #0]
 8010cee:	069b      	lsls	r3, r3, #26
 8010cf0:	d502      	bpl.n	8010cf8 <_printf_common+0x30>
 8010cf2:	682b      	ldr	r3, [r5, #0]
 8010cf4:	3302      	adds	r3, #2
 8010cf6:	602b      	str	r3, [r5, #0]
 8010cf8:	6822      	ldr	r2, [r4, #0]
 8010cfa:	2306      	movs	r3, #6
 8010cfc:	0017      	movs	r7, r2
 8010cfe:	401f      	ands	r7, r3
 8010d00:	421a      	tst	r2, r3
 8010d02:	d027      	beq.n	8010d54 <_printf_common+0x8c>
 8010d04:	0023      	movs	r3, r4
 8010d06:	3343      	adds	r3, #67	; 0x43
 8010d08:	781b      	ldrb	r3, [r3, #0]
 8010d0a:	1e5a      	subs	r2, r3, #1
 8010d0c:	4193      	sbcs	r3, r2
 8010d0e:	6822      	ldr	r2, [r4, #0]
 8010d10:	0692      	lsls	r2, r2, #26
 8010d12:	d430      	bmi.n	8010d76 <_printf_common+0xae>
 8010d14:	0022      	movs	r2, r4
 8010d16:	9901      	ldr	r1, [sp, #4]
 8010d18:	9800      	ldr	r0, [sp, #0]
 8010d1a:	9e08      	ldr	r6, [sp, #32]
 8010d1c:	3243      	adds	r2, #67	; 0x43
 8010d1e:	47b0      	blx	r6
 8010d20:	1c43      	adds	r3, r0, #1
 8010d22:	d025      	beq.n	8010d70 <_printf_common+0xa8>
 8010d24:	2306      	movs	r3, #6
 8010d26:	6820      	ldr	r0, [r4, #0]
 8010d28:	682a      	ldr	r2, [r5, #0]
 8010d2a:	68e1      	ldr	r1, [r4, #12]
 8010d2c:	2500      	movs	r5, #0
 8010d2e:	4003      	ands	r3, r0
 8010d30:	2b04      	cmp	r3, #4
 8010d32:	d103      	bne.n	8010d3c <_printf_common+0x74>
 8010d34:	1a8d      	subs	r5, r1, r2
 8010d36:	43eb      	mvns	r3, r5
 8010d38:	17db      	asrs	r3, r3, #31
 8010d3a:	401d      	ands	r5, r3
 8010d3c:	68a3      	ldr	r3, [r4, #8]
 8010d3e:	6922      	ldr	r2, [r4, #16]
 8010d40:	4293      	cmp	r3, r2
 8010d42:	dd01      	ble.n	8010d48 <_printf_common+0x80>
 8010d44:	1a9b      	subs	r3, r3, r2
 8010d46:	18ed      	adds	r5, r5, r3
 8010d48:	2700      	movs	r7, #0
 8010d4a:	42bd      	cmp	r5, r7
 8010d4c:	d120      	bne.n	8010d90 <_printf_common+0xc8>
 8010d4e:	2000      	movs	r0, #0
 8010d50:	e010      	b.n	8010d74 <_printf_common+0xac>
 8010d52:	3701      	adds	r7, #1
 8010d54:	68e3      	ldr	r3, [r4, #12]
 8010d56:	682a      	ldr	r2, [r5, #0]
 8010d58:	1a9b      	subs	r3, r3, r2
 8010d5a:	42bb      	cmp	r3, r7
 8010d5c:	ddd2      	ble.n	8010d04 <_printf_common+0x3c>
 8010d5e:	0022      	movs	r2, r4
 8010d60:	2301      	movs	r3, #1
 8010d62:	9901      	ldr	r1, [sp, #4]
 8010d64:	9800      	ldr	r0, [sp, #0]
 8010d66:	9e08      	ldr	r6, [sp, #32]
 8010d68:	3219      	adds	r2, #25
 8010d6a:	47b0      	blx	r6
 8010d6c:	1c43      	adds	r3, r0, #1
 8010d6e:	d1f0      	bne.n	8010d52 <_printf_common+0x8a>
 8010d70:	2001      	movs	r0, #1
 8010d72:	4240      	negs	r0, r0
 8010d74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010d76:	2030      	movs	r0, #48	; 0x30
 8010d78:	18e1      	adds	r1, r4, r3
 8010d7a:	3143      	adds	r1, #67	; 0x43
 8010d7c:	7008      	strb	r0, [r1, #0]
 8010d7e:	0021      	movs	r1, r4
 8010d80:	1c5a      	adds	r2, r3, #1
 8010d82:	3145      	adds	r1, #69	; 0x45
 8010d84:	7809      	ldrb	r1, [r1, #0]
 8010d86:	18a2      	adds	r2, r4, r2
 8010d88:	3243      	adds	r2, #67	; 0x43
 8010d8a:	3302      	adds	r3, #2
 8010d8c:	7011      	strb	r1, [r2, #0]
 8010d8e:	e7c1      	b.n	8010d14 <_printf_common+0x4c>
 8010d90:	0022      	movs	r2, r4
 8010d92:	2301      	movs	r3, #1
 8010d94:	9901      	ldr	r1, [sp, #4]
 8010d96:	9800      	ldr	r0, [sp, #0]
 8010d98:	9e08      	ldr	r6, [sp, #32]
 8010d9a:	321a      	adds	r2, #26
 8010d9c:	47b0      	blx	r6
 8010d9e:	1c43      	adds	r3, r0, #1
 8010da0:	d0e6      	beq.n	8010d70 <_printf_common+0xa8>
 8010da2:	3701      	adds	r7, #1
 8010da4:	e7d1      	b.n	8010d4a <_printf_common+0x82>
	...

08010da8 <_printf_i>:
 8010da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010daa:	b08b      	sub	sp, #44	; 0x2c
 8010dac:	9206      	str	r2, [sp, #24]
 8010dae:	000a      	movs	r2, r1
 8010db0:	3243      	adds	r2, #67	; 0x43
 8010db2:	9307      	str	r3, [sp, #28]
 8010db4:	9005      	str	r0, [sp, #20]
 8010db6:	9204      	str	r2, [sp, #16]
 8010db8:	7e0a      	ldrb	r2, [r1, #24]
 8010dba:	000c      	movs	r4, r1
 8010dbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010dbe:	2a78      	cmp	r2, #120	; 0x78
 8010dc0:	d807      	bhi.n	8010dd2 <_printf_i+0x2a>
 8010dc2:	2a62      	cmp	r2, #98	; 0x62
 8010dc4:	d809      	bhi.n	8010dda <_printf_i+0x32>
 8010dc6:	2a00      	cmp	r2, #0
 8010dc8:	d100      	bne.n	8010dcc <_printf_i+0x24>
 8010dca:	e0c1      	b.n	8010f50 <_printf_i+0x1a8>
 8010dcc:	2a58      	cmp	r2, #88	; 0x58
 8010dce:	d100      	bne.n	8010dd2 <_printf_i+0x2a>
 8010dd0:	e08c      	b.n	8010eec <_printf_i+0x144>
 8010dd2:	0026      	movs	r6, r4
 8010dd4:	3642      	adds	r6, #66	; 0x42
 8010dd6:	7032      	strb	r2, [r6, #0]
 8010dd8:	e022      	b.n	8010e20 <_printf_i+0x78>
 8010dda:	0010      	movs	r0, r2
 8010ddc:	3863      	subs	r0, #99	; 0x63
 8010dde:	2815      	cmp	r0, #21
 8010de0:	d8f7      	bhi.n	8010dd2 <_printf_i+0x2a>
 8010de2:	f7ef f9a9 	bl	8000138 <__gnu_thumb1_case_shi>
 8010de6:	0016      	.short	0x0016
 8010de8:	fff6001f 	.word	0xfff6001f
 8010dec:	fff6fff6 	.word	0xfff6fff6
 8010df0:	001ffff6 	.word	0x001ffff6
 8010df4:	fff6fff6 	.word	0xfff6fff6
 8010df8:	fff6fff6 	.word	0xfff6fff6
 8010dfc:	003600a8 	.word	0x003600a8
 8010e00:	fff6009a 	.word	0xfff6009a
 8010e04:	00b9fff6 	.word	0x00b9fff6
 8010e08:	0036fff6 	.word	0x0036fff6
 8010e0c:	fff6fff6 	.word	0xfff6fff6
 8010e10:	009e      	.short	0x009e
 8010e12:	0026      	movs	r6, r4
 8010e14:	681a      	ldr	r2, [r3, #0]
 8010e16:	3642      	adds	r6, #66	; 0x42
 8010e18:	1d11      	adds	r1, r2, #4
 8010e1a:	6019      	str	r1, [r3, #0]
 8010e1c:	6813      	ldr	r3, [r2, #0]
 8010e1e:	7033      	strb	r3, [r6, #0]
 8010e20:	2301      	movs	r3, #1
 8010e22:	e0a7      	b.n	8010f74 <_printf_i+0x1cc>
 8010e24:	6808      	ldr	r0, [r1, #0]
 8010e26:	6819      	ldr	r1, [r3, #0]
 8010e28:	1d0a      	adds	r2, r1, #4
 8010e2a:	0605      	lsls	r5, r0, #24
 8010e2c:	d50b      	bpl.n	8010e46 <_printf_i+0x9e>
 8010e2e:	680d      	ldr	r5, [r1, #0]
 8010e30:	601a      	str	r2, [r3, #0]
 8010e32:	2d00      	cmp	r5, #0
 8010e34:	da03      	bge.n	8010e3e <_printf_i+0x96>
 8010e36:	232d      	movs	r3, #45	; 0x2d
 8010e38:	9a04      	ldr	r2, [sp, #16]
 8010e3a:	426d      	negs	r5, r5
 8010e3c:	7013      	strb	r3, [r2, #0]
 8010e3e:	4b61      	ldr	r3, [pc, #388]	; (8010fc4 <_printf_i+0x21c>)
 8010e40:	270a      	movs	r7, #10
 8010e42:	9303      	str	r3, [sp, #12]
 8010e44:	e01b      	b.n	8010e7e <_printf_i+0xd6>
 8010e46:	680d      	ldr	r5, [r1, #0]
 8010e48:	601a      	str	r2, [r3, #0]
 8010e4a:	0641      	lsls	r1, r0, #25
 8010e4c:	d5f1      	bpl.n	8010e32 <_printf_i+0x8a>
 8010e4e:	b22d      	sxth	r5, r5
 8010e50:	e7ef      	b.n	8010e32 <_printf_i+0x8a>
 8010e52:	680d      	ldr	r5, [r1, #0]
 8010e54:	6819      	ldr	r1, [r3, #0]
 8010e56:	1d08      	adds	r0, r1, #4
 8010e58:	6018      	str	r0, [r3, #0]
 8010e5a:	062e      	lsls	r6, r5, #24
 8010e5c:	d501      	bpl.n	8010e62 <_printf_i+0xba>
 8010e5e:	680d      	ldr	r5, [r1, #0]
 8010e60:	e003      	b.n	8010e6a <_printf_i+0xc2>
 8010e62:	066d      	lsls	r5, r5, #25
 8010e64:	d5fb      	bpl.n	8010e5e <_printf_i+0xb6>
 8010e66:	680d      	ldr	r5, [r1, #0]
 8010e68:	b2ad      	uxth	r5, r5
 8010e6a:	4b56      	ldr	r3, [pc, #344]	; (8010fc4 <_printf_i+0x21c>)
 8010e6c:	2708      	movs	r7, #8
 8010e6e:	9303      	str	r3, [sp, #12]
 8010e70:	2a6f      	cmp	r2, #111	; 0x6f
 8010e72:	d000      	beq.n	8010e76 <_printf_i+0xce>
 8010e74:	3702      	adds	r7, #2
 8010e76:	0023      	movs	r3, r4
 8010e78:	2200      	movs	r2, #0
 8010e7a:	3343      	adds	r3, #67	; 0x43
 8010e7c:	701a      	strb	r2, [r3, #0]
 8010e7e:	6863      	ldr	r3, [r4, #4]
 8010e80:	60a3      	str	r3, [r4, #8]
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	db03      	blt.n	8010e8e <_printf_i+0xe6>
 8010e86:	2204      	movs	r2, #4
 8010e88:	6821      	ldr	r1, [r4, #0]
 8010e8a:	4391      	bics	r1, r2
 8010e8c:	6021      	str	r1, [r4, #0]
 8010e8e:	2d00      	cmp	r5, #0
 8010e90:	d102      	bne.n	8010e98 <_printf_i+0xf0>
 8010e92:	9e04      	ldr	r6, [sp, #16]
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d00c      	beq.n	8010eb2 <_printf_i+0x10a>
 8010e98:	9e04      	ldr	r6, [sp, #16]
 8010e9a:	0028      	movs	r0, r5
 8010e9c:	0039      	movs	r1, r7
 8010e9e:	f7ef f9db 	bl	8000258 <__aeabi_uidivmod>
 8010ea2:	9b03      	ldr	r3, [sp, #12]
 8010ea4:	3e01      	subs	r6, #1
 8010ea6:	5c5b      	ldrb	r3, [r3, r1]
 8010ea8:	7033      	strb	r3, [r6, #0]
 8010eaa:	002b      	movs	r3, r5
 8010eac:	0005      	movs	r5, r0
 8010eae:	429f      	cmp	r7, r3
 8010eb0:	d9f3      	bls.n	8010e9a <_printf_i+0xf2>
 8010eb2:	2f08      	cmp	r7, #8
 8010eb4:	d109      	bne.n	8010eca <_printf_i+0x122>
 8010eb6:	6823      	ldr	r3, [r4, #0]
 8010eb8:	07db      	lsls	r3, r3, #31
 8010eba:	d506      	bpl.n	8010eca <_printf_i+0x122>
 8010ebc:	6863      	ldr	r3, [r4, #4]
 8010ebe:	6922      	ldr	r2, [r4, #16]
 8010ec0:	4293      	cmp	r3, r2
 8010ec2:	dc02      	bgt.n	8010eca <_printf_i+0x122>
 8010ec4:	2330      	movs	r3, #48	; 0x30
 8010ec6:	3e01      	subs	r6, #1
 8010ec8:	7033      	strb	r3, [r6, #0]
 8010eca:	9b04      	ldr	r3, [sp, #16]
 8010ecc:	1b9b      	subs	r3, r3, r6
 8010ece:	6123      	str	r3, [r4, #16]
 8010ed0:	9b07      	ldr	r3, [sp, #28]
 8010ed2:	0021      	movs	r1, r4
 8010ed4:	9300      	str	r3, [sp, #0]
 8010ed6:	9805      	ldr	r0, [sp, #20]
 8010ed8:	9b06      	ldr	r3, [sp, #24]
 8010eda:	aa09      	add	r2, sp, #36	; 0x24
 8010edc:	f7ff fef4 	bl	8010cc8 <_printf_common>
 8010ee0:	1c43      	adds	r3, r0, #1
 8010ee2:	d14c      	bne.n	8010f7e <_printf_i+0x1d6>
 8010ee4:	2001      	movs	r0, #1
 8010ee6:	4240      	negs	r0, r0
 8010ee8:	b00b      	add	sp, #44	; 0x2c
 8010eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010eec:	3145      	adds	r1, #69	; 0x45
 8010eee:	700a      	strb	r2, [r1, #0]
 8010ef0:	4a34      	ldr	r2, [pc, #208]	; (8010fc4 <_printf_i+0x21c>)
 8010ef2:	9203      	str	r2, [sp, #12]
 8010ef4:	681a      	ldr	r2, [r3, #0]
 8010ef6:	6821      	ldr	r1, [r4, #0]
 8010ef8:	ca20      	ldmia	r2!, {r5}
 8010efa:	601a      	str	r2, [r3, #0]
 8010efc:	0608      	lsls	r0, r1, #24
 8010efe:	d516      	bpl.n	8010f2e <_printf_i+0x186>
 8010f00:	07cb      	lsls	r3, r1, #31
 8010f02:	d502      	bpl.n	8010f0a <_printf_i+0x162>
 8010f04:	2320      	movs	r3, #32
 8010f06:	4319      	orrs	r1, r3
 8010f08:	6021      	str	r1, [r4, #0]
 8010f0a:	2710      	movs	r7, #16
 8010f0c:	2d00      	cmp	r5, #0
 8010f0e:	d1b2      	bne.n	8010e76 <_printf_i+0xce>
 8010f10:	2320      	movs	r3, #32
 8010f12:	6822      	ldr	r2, [r4, #0]
 8010f14:	439a      	bics	r2, r3
 8010f16:	6022      	str	r2, [r4, #0]
 8010f18:	e7ad      	b.n	8010e76 <_printf_i+0xce>
 8010f1a:	2220      	movs	r2, #32
 8010f1c:	6809      	ldr	r1, [r1, #0]
 8010f1e:	430a      	orrs	r2, r1
 8010f20:	6022      	str	r2, [r4, #0]
 8010f22:	0022      	movs	r2, r4
 8010f24:	2178      	movs	r1, #120	; 0x78
 8010f26:	3245      	adds	r2, #69	; 0x45
 8010f28:	7011      	strb	r1, [r2, #0]
 8010f2a:	4a27      	ldr	r2, [pc, #156]	; (8010fc8 <_printf_i+0x220>)
 8010f2c:	e7e1      	b.n	8010ef2 <_printf_i+0x14a>
 8010f2e:	0648      	lsls	r0, r1, #25
 8010f30:	d5e6      	bpl.n	8010f00 <_printf_i+0x158>
 8010f32:	b2ad      	uxth	r5, r5
 8010f34:	e7e4      	b.n	8010f00 <_printf_i+0x158>
 8010f36:	681a      	ldr	r2, [r3, #0]
 8010f38:	680d      	ldr	r5, [r1, #0]
 8010f3a:	1d10      	adds	r0, r2, #4
 8010f3c:	6949      	ldr	r1, [r1, #20]
 8010f3e:	6018      	str	r0, [r3, #0]
 8010f40:	6813      	ldr	r3, [r2, #0]
 8010f42:	062e      	lsls	r6, r5, #24
 8010f44:	d501      	bpl.n	8010f4a <_printf_i+0x1a2>
 8010f46:	6019      	str	r1, [r3, #0]
 8010f48:	e002      	b.n	8010f50 <_printf_i+0x1a8>
 8010f4a:	066d      	lsls	r5, r5, #25
 8010f4c:	d5fb      	bpl.n	8010f46 <_printf_i+0x19e>
 8010f4e:	8019      	strh	r1, [r3, #0]
 8010f50:	2300      	movs	r3, #0
 8010f52:	9e04      	ldr	r6, [sp, #16]
 8010f54:	6123      	str	r3, [r4, #16]
 8010f56:	e7bb      	b.n	8010ed0 <_printf_i+0x128>
 8010f58:	681a      	ldr	r2, [r3, #0]
 8010f5a:	1d11      	adds	r1, r2, #4
 8010f5c:	6019      	str	r1, [r3, #0]
 8010f5e:	6816      	ldr	r6, [r2, #0]
 8010f60:	2100      	movs	r1, #0
 8010f62:	0030      	movs	r0, r6
 8010f64:	6862      	ldr	r2, [r4, #4]
 8010f66:	f000 ff53 	bl	8011e10 <memchr>
 8010f6a:	2800      	cmp	r0, #0
 8010f6c:	d001      	beq.n	8010f72 <_printf_i+0x1ca>
 8010f6e:	1b80      	subs	r0, r0, r6
 8010f70:	6060      	str	r0, [r4, #4]
 8010f72:	6863      	ldr	r3, [r4, #4]
 8010f74:	6123      	str	r3, [r4, #16]
 8010f76:	2300      	movs	r3, #0
 8010f78:	9a04      	ldr	r2, [sp, #16]
 8010f7a:	7013      	strb	r3, [r2, #0]
 8010f7c:	e7a8      	b.n	8010ed0 <_printf_i+0x128>
 8010f7e:	6923      	ldr	r3, [r4, #16]
 8010f80:	0032      	movs	r2, r6
 8010f82:	9906      	ldr	r1, [sp, #24]
 8010f84:	9805      	ldr	r0, [sp, #20]
 8010f86:	9d07      	ldr	r5, [sp, #28]
 8010f88:	47a8      	blx	r5
 8010f8a:	1c43      	adds	r3, r0, #1
 8010f8c:	d0aa      	beq.n	8010ee4 <_printf_i+0x13c>
 8010f8e:	6823      	ldr	r3, [r4, #0]
 8010f90:	079b      	lsls	r3, r3, #30
 8010f92:	d415      	bmi.n	8010fc0 <_printf_i+0x218>
 8010f94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f96:	68e0      	ldr	r0, [r4, #12]
 8010f98:	4298      	cmp	r0, r3
 8010f9a:	daa5      	bge.n	8010ee8 <_printf_i+0x140>
 8010f9c:	0018      	movs	r0, r3
 8010f9e:	e7a3      	b.n	8010ee8 <_printf_i+0x140>
 8010fa0:	0022      	movs	r2, r4
 8010fa2:	2301      	movs	r3, #1
 8010fa4:	9906      	ldr	r1, [sp, #24]
 8010fa6:	9805      	ldr	r0, [sp, #20]
 8010fa8:	9e07      	ldr	r6, [sp, #28]
 8010faa:	3219      	adds	r2, #25
 8010fac:	47b0      	blx	r6
 8010fae:	1c43      	adds	r3, r0, #1
 8010fb0:	d098      	beq.n	8010ee4 <_printf_i+0x13c>
 8010fb2:	3501      	adds	r5, #1
 8010fb4:	68e3      	ldr	r3, [r4, #12]
 8010fb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010fb8:	1a9b      	subs	r3, r3, r2
 8010fba:	42ab      	cmp	r3, r5
 8010fbc:	dcf0      	bgt.n	8010fa0 <_printf_i+0x1f8>
 8010fbe:	e7e9      	b.n	8010f94 <_printf_i+0x1ec>
 8010fc0:	2500      	movs	r5, #0
 8010fc2:	e7f7      	b.n	8010fb4 <_printf_i+0x20c>
 8010fc4:	080133b5 	.word	0x080133b5
 8010fc8:	080133c6 	.word	0x080133c6

08010fcc <nan>:
 8010fcc:	2000      	movs	r0, #0
 8010fce:	4901      	ldr	r1, [pc, #4]	; (8010fd4 <nan+0x8>)
 8010fd0:	4770      	bx	lr
 8010fd2:	46c0      	nop			; (mov r8, r8)
 8010fd4:	7ff80000 	.word	0x7ff80000

08010fd8 <_sbrk_r>:
 8010fd8:	2300      	movs	r3, #0
 8010fda:	b570      	push	{r4, r5, r6, lr}
 8010fdc:	4d06      	ldr	r5, [pc, #24]	; (8010ff8 <_sbrk_r+0x20>)
 8010fde:	0004      	movs	r4, r0
 8010fe0:	0008      	movs	r0, r1
 8010fe2:	602b      	str	r3, [r5, #0]
 8010fe4:	f7f7 f8dc 	bl	80081a0 <_sbrk>
 8010fe8:	1c43      	adds	r3, r0, #1
 8010fea:	d103      	bne.n	8010ff4 <_sbrk_r+0x1c>
 8010fec:	682b      	ldr	r3, [r5, #0]
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d000      	beq.n	8010ff4 <_sbrk_r+0x1c>
 8010ff2:	6023      	str	r3, [r4, #0]
 8010ff4:	bd70      	pop	{r4, r5, r6, pc}
 8010ff6:	46c0      	nop			; (mov r8, r8)
 8010ff8:	20001068 	.word	0x20001068

08010ffc <nanf>:
 8010ffc:	4800      	ldr	r0, [pc, #0]	; (8011000 <nanf+0x4>)
 8010ffe:	4770      	bx	lr
 8011000:	7fc00000 	.word	0x7fc00000

08011004 <strcpy>:
 8011004:	0003      	movs	r3, r0
 8011006:	780a      	ldrb	r2, [r1, #0]
 8011008:	3101      	adds	r1, #1
 801100a:	701a      	strb	r2, [r3, #0]
 801100c:	3301      	adds	r3, #1
 801100e:	2a00      	cmp	r2, #0
 8011010:	d1f9      	bne.n	8011006 <strcpy+0x2>
 8011012:	4770      	bx	lr

08011014 <strncmp>:
 8011014:	b530      	push	{r4, r5, lr}
 8011016:	0005      	movs	r5, r0
 8011018:	1e10      	subs	r0, r2, #0
 801101a:	d008      	beq.n	801102e <strncmp+0x1a>
 801101c:	2400      	movs	r4, #0
 801101e:	3a01      	subs	r2, #1
 8011020:	5d2b      	ldrb	r3, [r5, r4]
 8011022:	5d08      	ldrb	r0, [r1, r4]
 8011024:	4283      	cmp	r3, r0
 8011026:	d101      	bne.n	801102c <strncmp+0x18>
 8011028:	4294      	cmp	r4, r2
 801102a:	d101      	bne.n	8011030 <strncmp+0x1c>
 801102c:	1a18      	subs	r0, r3, r0
 801102e:	bd30      	pop	{r4, r5, pc}
 8011030:	3401      	adds	r4, #1
 8011032:	2b00      	cmp	r3, #0
 8011034:	d1f4      	bne.n	8011020 <strncmp+0xc>
 8011036:	e7f9      	b.n	801102c <strncmp+0x18>

08011038 <__ascii_wctomb>:
 8011038:	0003      	movs	r3, r0
 801103a:	1e08      	subs	r0, r1, #0
 801103c:	d005      	beq.n	801104a <__ascii_wctomb+0x12>
 801103e:	2aff      	cmp	r2, #255	; 0xff
 8011040:	d904      	bls.n	801104c <__ascii_wctomb+0x14>
 8011042:	228a      	movs	r2, #138	; 0x8a
 8011044:	2001      	movs	r0, #1
 8011046:	601a      	str	r2, [r3, #0]
 8011048:	4240      	negs	r0, r0
 801104a:	4770      	bx	lr
 801104c:	2001      	movs	r0, #1
 801104e:	700a      	strb	r2, [r1, #0]
 8011050:	e7fb      	b.n	801104a <__ascii_wctomb+0x12>
	...

08011054 <__assert_func>:
 8011054:	b530      	push	{r4, r5, lr}
 8011056:	0014      	movs	r4, r2
 8011058:	001a      	movs	r2, r3
 801105a:	4b09      	ldr	r3, [pc, #36]	; (8011080 <__assert_func+0x2c>)
 801105c:	0005      	movs	r5, r0
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	b085      	sub	sp, #20
 8011062:	68d8      	ldr	r0, [r3, #12]
 8011064:	4b07      	ldr	r3, [pc, #28]	; (8011084 <__assert_func+0x30>)
 8011066:	2c00      	cmp	r4, #0
 8011068:	d101      	bne.n	801106e <__assert_func+0x1a>
 801106a:	4b07      	ldr	r3, [pc, #28]	; (8011088 <__assert_func+0x34>)
 801106c:	001c      	movs	r4, r3
 801106e:	9301      	str	r3, [sp, #4]
 8011070:	9100      	str	r1, [sp, #0]
 8011072:	002b      	movs	r3, r5
 8011074:	4905      	ldr	r1, [pc, #20]	; (801108c <__assert_func+0x38>)
 8011076:	9402      	str	r4, [sp, #8]
 8011078:	f000 feb0 	bl	8011ddc <fiprintf>
 801107c:	f001 f978 	bl	8012370 <abort>
 8011080:	200000b4 	.word	0x200000b4
 8011084:	080133d7 	.word	0x080133d7
 8011088:	08013412 	.word	0x08013412
 801108c:	080133e4 	.word	0x080133e4

08011090 <quorem>:
 8011090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011092:	0006      	movs	r6, r0
 8011094:	690b      	ldr	r3, [r1, #16]
 8011096:	6932      	ldr	r2, [r6, #16]
 8011098:	b087      	sub	sp, #28
 801109a:	2000      	movs	r0, #0
 801109c:	9103      	str	r1, [sp, #12]
 801109e:	429a      	cmp	r2, r3
 80110a0:	db65      	blt.n	801116e <quorem+0xde>
 80110a2:	3b01      	subs	r3, #1
 80110a4:	009c      	lsls	r4, r3, #2
 80110a6:	9300      	str	r3, [sp, #0]
 80110a8:	000b      	movs	r3, r1
 80110aa:	3314      	adds	r3, #20
 80110ac:	9305      	str	r3, [sp, #20]
 80110ae:	191b      	adds	r3, r3, r4
 80110b0:	9304      	str	r3, [sp, #16]
 80110b2:	0033      	movs	r3, r6
 80110b4:	3314      	adds	r3, #20
 80110b6:	9302      	str	r3, [sp, #8]
 80110b8:	191c      	adds	r4, r3, r4
 80110ba:	9b04      	ldr	r3, [sp, #16]
 80110bc:	6827      	ldr	r7, [r4, #0]
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	0038      	movs	r0, r7
 80110c2:	1c5d      	adds	r5, r3, #1
 80110c4:	0029      	movs	r1, r5
 80110c6:	9301      	str	r3, [sp, #4]
 80110c8:	f7ef f840 	bl	800014c <__udivsi3>
 80110cc:	9001      	str	r0, [sp, #4]
 80110ce:	42af      	cmp	r7, r5
 80110d0:	d324      	bcc.n	801111c <quorem+0x8c>
 80110d2:	2500      	movs	r5, #0
 80110d4:	46ac      	mov	ip, r5
 80110d6:	9802      	ldr	r0, [sp, #8]
 80110d8:	9f05      	ldr	r7, [sp, #20]
 80110da:	cf08      	ldmia	r7!, {r3}
 80110dc:	9a01      	ldr	r2, [sp, #4]
 80110de:	b299      	uxth	r1, r3
 80110e0:	4351      	muls	r1, r2
 80110e2:	0c1b      	lsrs	r3, r3, #16
 80110e4:	4353      	muls	r3, r2
 80110e6:	1949      	adds	r1, r1, r5
 80110e8:	0c0a      	lsrs	r2, r1, #16
 80110ea:	189b      	adds	r3, r3, r2
 80110ec:	6802      	ldr	r2, [r0, #0]
 80110ee:	b289      	uxth	r1, r1
 80110f0:	b292      	uxth	r2, r2
 80110f2:	4462      	add	r2, ip
 80110f4:	1a52      	subs	r2, r2, r1
 80110f6:	6801      	ldr	r1, [r0, #0]
 80110f8:	0c1d      	lsrs	r5, r3, #16
 80110fa:	0c09      	lsrs	r1, r1, #16
 80110fc:	b29b      	uxth	r3, r3
 80110fe:	1acb      	subs	r3, r1, r3
 8011100:	1411      	asrs	r1, r2, #16
 8011102:	185b      	adds	r3, r3, r1
 8011104:	1419      	asrs	r1, r3, #16
 8011106:	b292      	uxth	r2, r2
 8011108:	041b      	lsls	r3, r3, #16
 801110a:	431a      	orrs	r2, r3
 801110c:	9b04      	ldr	r3, [sp, #16]
 801110e:	468c      	mov	ip, r1
 8011110:	c004      	stmia	r0!, {r2}
 8011112:	42bb      	cmp	r3, r7
 8011114:	d2e1      	bcs.n	80110da <quorem+0x4a>
 8011116:	6823      	ldr	r3, [r4, #0]
 8011118:	2b00      	cmp	r3, #0
 801111a:	d030      	beq.n	801117e <quorem+0xee>
 801111c:	0030      	movs	r0, r6
 801111e:	9903      	ldr	r1, [sp, #12]
 8011120:	f7ff f968 	bl	80103f4 <__mcmp>
 8011124:	2800      	cmp	r0, #0
 8011126:	db21      	blt.n	801116c <quorem+0xdc>
 8011128:	0030      	movs	r0, r6
 801112a:	2400      	movs	r4, #0
 801112c:	9b01      	ldr	r3, [sp, #4]
 801112e:	9903      	ldr	r1, [sp, #12]
 8011130:	3301      	adds	r3, #1
 8011132:	9301      	str	r3, [sp, #4]
 8011134:	3014      	adds	r0, #20
 8011136:	3114      	adds	r1, #20
 8011138:	6803      	ldr	r3, [r0, #0]
 801113a:	c920      	ldmia	r1!, {r5}
 801113c:	b29a      	uxth	r2, r3
 801113e:	1914      	adds	r4, r2, r4
 8011140:	b2aa      	uxth	r2, r5
 8011142:	1aa2      	subs	r2, r4, r2
 8011144:	0c1b      	lsrs	r3, r3, #16
 8011146:	0c2d      	lsrs	r5, r5, #16
 8011148:	1414      	asrs	r4, r2, #16
 801114a:	1b5b      	subs	r3, r3, r5
 801114c:	191b      	adds	r3, r3, r4
 801114e:	141c      	asrs	r4, r3, #16
 8011150:	b292      	uxth	r2, r2
 8011152:	041b      	lsls	r3, r3, #16
 8011154:	4313      	orrs	r3, r2
 8011156:	c008      	stmia	r0!, {r3}
 8011158:	9b04      	ldr	r3, [sp, #16]
 801115a:	428b      	cmp	r3, r1
 801115c:	d2ec      	bcs.n	8011138 <quorem+0xa8>
 801115e:	9b00      	ldr	r3, [sp, #0]
 8011160:	9a02      	ldr	r2, [sp, #8]
 8011162:	009b      	lsls	r3, r3, #2
 8011164:	18d3      	adds	r3, r2, r3
 8011166:	681a      	ldr	r2, [r3, #0]
 8011168:	2a00      	cmp	r2, #0
 801116a:	d015      	beq.n	8011198 <quorem+0x108>
 801116c:	9801      	ldr	r0, [sp, #4]
 801116e:	b007      	add	sp, #28
 8011170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011172:	6823      	ldr	r3, [r4, #0]
 8011174:	2b00      	cmp	r3, #0
 8011176:	d106      	bne.n	8011186 <quorem+0xf6>
 8011178:	9b00      	ldr	r3, [sp, #0]
 801117a:	3b01      	subs	r3, #1
 801117c:	9300      	str	r3, [sp, #0]
 801117e:	9b02      	ldr	r3, [sp, #8]
 8011180:	3c04      	subs	r4, #4
 8011182:	42a3      	cmp	r3, r4
 8011184:	d3f5      	bcc.n	8011172 <quorem+0xe2>
 8011186:	9b00      	ldr	r3, [sp, #0]
 8011188:	6133      	str	r3, [r6, #16]
 801118a:	e7c7      	b.n	801111c <quorem+0x8c>
 801118c:	681a      	ldr	r2, [r3, #0]
 801118e:	2a00      	cmp	r2, #0
 8011190:	d106      	bne.n	80111a0 <quorem+0x110>
 8011192:	9a00      	ldr	r2, [sp, #0]
 8011194:	3a01      	subs	r2, #1
 8011196:	9200      	str	r2, [sp, #0]
 8011198:	9a02      	ldr	r2, [sp, #8]
 801119a:	3b04      	subs	r3, #4
 801119c:	429a      	cmp	r2, r3
 801119e:	d3f5      	bcc.n	801118c <quorem+0xfc>
 80111a0:	9b00      	ldr	r3, [sp, #0]
 80111a2:	6133      	str	r3, [r6, #16]
 80111a4:	e7e2      	b.n	801116c <quorem+0xdc>
	...

080111a8 <_dtoa_r>:
 80111a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80111aa:	b09d      	sub	sp, #116	; 0x74
 80111ac:	9202      	str	r2, [sp, #8]
 80111ae:	9303      	str	r3, [sp, #12]
 80111b0:	9b02      	ldr	r3, [sp, #8]
 80111b2:	9c03      	ldr	r4, [sp, #12]
 80111b4:	9308      	str	r3, [sp, #32]
 80111b6:	9409      	str	r4, [sp, #36]	; 0x24
 80111b8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80111ba:	0007      	movs	r7, r0
 80111bc:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80111be:	2c00      	cmp	r4, #0
 80111c0:	d10e      	bne.n	80111e0 <_dtoa_r+0x38>
 80111c2:	2010      	movs	r0, #16
 80111c4:	f000 fe1a 	bl	8011dfc <malloc>
 80111c8:	1e02      	subs	r2, r0, #0
 80111ca:	6278      	str	r0, [r7, #36]	; 0x24
 80111cc:	d104      	bne.n	80111d8 <_dtoa_r+0x30>
 80111ce:	21ea      	movs	r1, #234	; 0xea
 80111d0:	4bc7      	ldr	r3, [pc, #796]	; (80114f0 <_dtoa_r+0x348>)
 80111d2:	48c8      	ldr	r0, [pc, #800]	; (80114f4 <_dtoa_r+0x34c>)
 80111d4:	f7ff ff3e 	bl	8011054 <__assert_func>
 80111d8:	6044      	str	r4, [r0, #4]
 80111da:	6084      	str	r4, [r0, #8]
 80111dc:	6004      	str	r4, [r0, #0]
 80111de:	60c4      	str	r4, [r0, #12]
 80111e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111e2:	6819      	ldr	r1, [r3, #0]
 80111e4:	2900      	cmp	r1, #0
 80111e6:	d00a      	beq.n	80111fe <_dtoa_r+0x56>
 80111e8:	685a      	ldr	r2, [r3, #4]
 80111ea:	2301      	movs	r3, #1
 80111ec:	4093      	lsls	r3, r2
 80111ee:	604a      	str	r2, [r1, #4]
 80111f0:	608b      	str	r3, [r1, #8]
 80111f2:	0038      	movs	r0, r7
 80111f4:	f7fe fe72 	bl	800fedc <_Bfree>
 80111f8:	2200      	movs	r2, #0
 80111fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111fc:	601a      	str	r2, [r3, #0]
 80111fe:	9b03      	ldr	r3, [sp, #12]
 8011200:	2b00      	cmp	r3, #0
 8011202:	da20      	bge.n	8011246 <_dtoa_r+0x9e>
 8011204:	2301      	movs	r3, #1
 8011206:	602b      	str	r3, [r5, #0]
 8011208:	9b03      	ldr	r3, [sp, #12]
 801120a:	005b      	lsls	r3, r3, #1
 801120c:	085b      	lsrs	r3, r3, #1
 801120e:	9309      	str	r3, [sp, #36]	; 0x24
 8011210:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8011212:	4bb9      	ldr	r3, [pc, #740]	; (80114f8 <_dtoa_r+0x350>)
 8011214:	4ab8      	ldr	r2, [pc, #736]	; (80114f8 <_dtoa_r+0x350>)
 8011216:	402b      	ands	r3, r5
 8011218:	4293      	cmp	r3, r2
 801121a:	d117      	bne.n	801124c <_dtoa_r+0xa4>
 801121c:	4bb7      	ldr	r3, [pc, #732]	; (80114fc <_dtoa_r+0x354>)
 801121e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8011220:	0328      	lsls	r0, r5, #12
 8011222:	6013      	str	r3, [r2, #0]
 8011224:	9b02      	ldr	r3, [sp, #8]
 8011226:	0b00      	lsrs	r0, r0, #12
 8011228:	4318      	orrs	r0, r3
 801122a:	d101      	bne.n	8011230 <_dtoa_r+0x88>
 801122c:	f000 fdbf 	bl	8011dae <_dtoa_r+0xc06>
 8011230:	48b3      	ldr	r0, [pc, #716]	; (8011500 <_dtoa_r+0x358>)
 8011232:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011234:	9006      	str	r0, [sp, #24]
 8011236:	2b00      	cmp	r3, #0
 8011238:	d002      	beq.n	8011240 <_dtoa_r+0x98>
 801123a:	4bb2      	ldr	r3, [pc, #712]	; (8011504 <_dtoa_r+0x35c>)
 801123c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801123e:	6013      	str	r3, [r2, #0]
 8011240:	9806      	ldr	r0, [sp, #24]
 8011242:	b01d      	add	sp, #116	; 0x74
 8011244:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011246:	2300      	movs	r3, #0
 8011248:	602b      	str	r3, [r5, #0]
 801124a:	e7e1      	b.n	8011210 <_dtoa_r+0x68>
 801124c:	9b08      	ldr	r3, [sp, #32]
 801124e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8011250:	9312      	str	r3, [sp, #72]	; 0x48
 8011252:	9413      	str	r4, [sp, #76]	; 0x4c
 8011254:	9812      	ldr	r0, [sp, #72]	; 0x48
 8011256:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8011258:	2200      	movs	r2, #0
 801125a:	2300      	movs	r3, #0
 801125c:	f7ef f8fc 	bl	8000458 <__aeabi_dcmpeq>
 8011260:	1e04      	subs	r4, r0, #0
 8011262:	d009      	beq.n	8011278 <_dtoa_r+0xd0>
 8011264:	2301      	movs	r3, #1
 8011266:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8011268:	6013      	str	r3, [r2, #0]
 801126a:	4ba7      	ldr	r3, [pc, #668]	; (8011508 <_dtoa_r+0x360>)
 801126c:	9306      	str	r3, [sp, #24]
 801126e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011270:	2b00      	cmp	r3, #0
 8011272:	d0e5      	beq.n	8011240 <_dtoa_r+0x98>
 8011274:	4ba5      	ldr	r3, [pc, #660]	; (801150c <_dtoa_r+0x364>)
 8011276:	e7e1      	b.n	801123c <_dtoa_r+0x94>
 8011278:	ab1a      	add	r3, sp, #104	; 0x68
 801127a:	9301      	str	r3, [sp, #4]
 801127c:	ab1b      	add	r3, sp, #108	; 0x6c
 801127e:	9300      	str	r3, [sp, #0]
 8011280:	0038      	movs	r0, r7
 8011282:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011284:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011286:	f7ff f9dd 	bl	8010644 <__d2b>
 801128a:	006e      	lsls	r6, r5, #1
 801128c:	9005      	str	r0, [sp, #20]
 801128e:	0d76      	lsrs	r6, r6, #21
 8011290:	d100      	bne.n	8011294 <_dtoa_r+0xec>
 8011292:	e07c      	b.n	801138e <_dtoa_r+0x1e6>
 8011294:	9812      	ldr	r0, [sp, #72]	; 0x48
 8011296:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8011298:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801129a:	4a9d      	ldr	r2, [pc, #628]	; (8011510 <_dtoa_r+0x368>)
 801129c:	031b      	lsls	r3, r3, #12
 801129e:	0b1b      	lsrs	r3, r3, #12
 80112a0:	431a      	orrs	r2, r3
 80112a2:	0011      	movs	r1, r2
 80112a4:	4b9b      	ldr	r3, [pc, #620]	; (8011514 <_dtoa_r+0x36c>)
 80112a6:	9418      	str	r4, [sp, #96]	; 0x60
 80112a8:	18f6      	adds	r6, r6, r3
 80112aa:	2200      	movs	r2, #0
 80112ac:	4b9a      	ldr	r3, [pc, #616]	; (8011518 <_dtoa_r+0x370>)
 80112ae:	f7f1 fa2b 	bl	8002708 <__aeabi_dsub>
 80112b2:	4a9a      	ldr	r2, [pc, #616]	; (801151c <_dtoa_r+0x374>)
 80112b4:	4b9a      	ldr	r3, [pc, #616]	; (8011520 <_dtoa_r+0x378>)
 80112b6:	f7f0 ffbb 	bl	8002230 <__aeabi_dmul>
 80112ba:	4a9a      	ldr	r2, [pc, #616]	; (8011524 <_dtoa_r+0x37c>)
 80112bc:	4b9a      	ldr	r3, [pc, #616]	; (8011528 <_dtoa_r+0x380>)
 80112be:	f7f0 f879 	bl	80013b4 <__aeabi_dadd>
 80112c2:	0004      	movs	r4, r0
 80112c4:	0030      	movs	r0, r6
 80112c6:	000d      	movs	r5, r1
 80112c8:	f7f1 fe04 	bl	8002ed4 <__aeabi_i2d>
 80112cc:	4a97      	ldr	r2, [pc, #604]	; (801152c <_dtoa_r+0x384>)
 80112ce:	4b98      	ldr	r3, [pc, #608]	; (8011530 <_dtoa_r+0x388>)
 80112d0:	f7f0 ffae 	bl	8002230 <__aeabi_dmul>
 80112d4:	0002      	movs	r2, r0
 80112d6:	000b      	movs	r3, r1
 80112d8:	0020      	movs	r0, r4
 80112da:	0029      	movs	r1, r5
 80112dc:	f7f0 f86a 	bl	80013b4 <__aeabi_dadd>
 80112e0:	0004      	movs	r4, r0
 80112e2:	000d      	movs	r5, r1
 80112e4:	f7f1 fdc0 	bl	8002e68 <__aeabi_d2iz>
 80112e8:	2200      	movs	r2, #0
 80112ea:	9002      	str	r0, [sp, #8]
 80112ec:	2300      	movs	r3, #0
 80112ee:	0020      	movs	r0, r4
 80112f0:	0029      	movs	r1, r5
 80112f2:	f7ef f8b7 	bl	8000464 <__aeabi_dcmplt>
 80112f6:	2800      	cmp	r0, #0
 80112f8:	d00b      	beq.n	8011312 <_dtoa_r+0x16a>
 80112fa:	9802      	ldr	r0, [sp, #8]
 80112fc:	f7f1 fdea 	bl	8002ed4 <__aeabi_i2d>
 8011300:	002b      	movs	r3, r5
 8011302:	0022      	movs	r2, r4
 8011304:	f7ef f8a8 	bl	8000458 <__aeabi_dcmpeq>
 8011308:	4243      	negs	r3, r0
 801130a:	4158      	adcs	r0, r3
 801130c:	9b02      	ldr	r3, [sp, #8]
 801130e:	1a1b      	subs	r3, r3, r0
 8011310:	9302      	str	r3, [sp, #8]
 8011312:	2301      	movs	r3, #1
 8011314:	9316      	str	r3, [sp, #88]	; 0x58
 8011316:	9b02      	ldr	r3, [sp, #8]
 8011318:	2b16      	cmp	r3, #22
 801131a:	d80f      	bhi.n	801133c <_dtoa_r+0x194>
 801131c:	9812      	ldr	r0, [sp, #72]	; 0x48
 801131e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8011320:	00da      	lsls	r2, r3, #3
 8011322:	4b84      	ldr	r3, [pc, #528]	; (8011534 <_dtoa_r+0x38c>)
 8011324:	189b      	adds	r3, r3, r2
 8011326:	681a      	ldr	r2, [r3, #0]
 8011328:	685b      	ldr	r3, [r3, #4]
 801132a:	f7ef f89b 	bl	8000464 <__aeabi_dcmplt>
 801132e:	2800      	cmp	r0, #0
 8011330:	d049      	beq.n	80113c6 <_dtoa_r+0x21e>
 8011332:	9b02      	ldr	r3, [sp, #8]
 8011334:	3b01      	subs	r3, #1
 8011336:	9302      	str	r3, [sp, #8]
 8011338:	2300      	movs	r3, #0
 801133a:	9316      	str	r3, [sp, #88]	; 0x58
 801133c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801133e:	1b9e      	subs	r6, r3, r6
 8011340:	2300      	movs	r3, #0
 8011342:	930a      	str	r3, [sp, #40]	; 0x28
 8011344:	0033      	movs	r3, r6
 8011346:	3b01      	subs	r3, #1
 8011348:	930d      	str	r3, [sp, #52]	; 0x34
 801134a:	d504      	bpl.n	8011356 <_dtoa_r+0x1ae>
 801134c:	2301      	movs	r3, #1
 801134e:	1b9b      	subs	r3, r3, r6
 8011350:	930a      	str	r3, [sp, #40]	; 0x28
 8011352:	2300      	movs	r3, #0
 8011354:	930d      	str	r3, [sp, #52]	; 0x34
 8011356:	9b02      	ldr	r3, [sp, #8]
 8011358:	2b00      	cmp	r3, #0
 801135a:	db36      	blt.n	80113ca <_dtoa_r+0x222>
 801135c:	9a02      	ldr	r2, [sp, #8]
 801135e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011360:	4694      	mov	ip, r2
 8011362:	4463      	add	r3, ip
 8011364:	930d      	str	r3, [sp, #52]	; 0x34
 8011366:	2300      	movs	r3, #0
 8011368:	9215      	str	r2, [sp, #84]	; 0x54
 801136a:	930e      	str	r3, [sp, #56]	; 0x38
 801136c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801136e:	2401      	movs	r4, #1
 8011370:	2b09      	cmp	r3, #9
 8011372:	d864      	bhi.n	801143e <_dtoa_r+0x296>
 8011374:	2b05      	cmp	r3, #5
 8011376:	dd02      	ble.n	801137e <_dtoa_r+0x1d6>
 8011378:	2400      	movs	r4, #0
 801137a:	3b04      	subs	r3, #4
 801137c:	9322      	str	r3, [sp, #136]	; 0x88
 801137e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011380:	1e98      	subs	r0, r3, #2
 8011382:	2803      	cmp	r0, #3
 8011384:	d864      	bhi.n	8011450 <_dtoa_r+0x2a8>
 8011386:	f7ee fecd 	bl	8000124 <__gnu_thumb1_case_uqi>
 801138a:	3829      	.short	0x3829
 801138c:	5836      	.short	0x5836
 801138e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8011390:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8011392:	189e      	adds	r6, r3, r2
 8011394:	4b68      	ldr	r3, [pc, #416]	; (8011538 <_dtoa_r+0x390>)
 8011396:	18f2      	adds	r2, r6, r3
 8011398:	2a20      	cmp	r2, #32
 801139a:	dd0f      	ble.n	80113bc <_dtoa_r+0x214>
 801139c:	2340      	movs	r3, #64	; 0x40
 801139e:	1a9b      	subs	r3, r3, r2
 80113a0:	409d      	lsls	r5, r3
 80113a2:	4b66      	ldr	r3, [pc, #408]	; (801153c <_dtoa_r+0x394>)
 80113a4:	9802      	ldr	r0, [sp, #8]
 80113a6:	18f3      	adds	r3, r6, r3
 80113a8:	40d8      	lsrs	r0, r3
 80113aa:	4328      	orrs	r0, r5
 80113ac:	f7f1 fdc2 	bl	8002f34 <__aeabi_ui2d>
 80113b0:	2301      	movs	r3, #1
 80113b2:	4c63      	ldr	r4, [pc, #396]	; (8011540 <_dtoa_r+0x398>)
 80113b4:	3e01      	subs	r6, #1
 80113b6:	1909      	adds	r1, r1, r4
 80113b8:	9318      	str	r3, [sp, #96]	; 0x60
 80113ba:	e776      	b.n	80112aa <_dtoa_r+0x102>
 80113bc:	2320      	movs	r3, #32
 80113be:	9802      	ldr	r0, [sp, #8]
 80113c0:	1a9b      	subs	r3, r3, r2
 80113c2:	4098      	lsls	r0, r3
 80113c4:	e7f2      	b.n	80113ac <_dtoa_r+0x204>
 80113c6:	9016      	str	r0, [sp, #88]	; 0x58
 80113c8:	e7b8      	b.n	801133c <_dtoa_r+0x194>
 80113ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80113cc:	9a02      	ldr	r2, [sp, #8]
 80113ce:	1a9b      	subs	r3, r3, r2
 80113d0:	930a      	str	r3, [sp, #40]	; 0x28
 80113d2:	4253      	negs	r3, r2
 80113d4:	930e      	str	r3, [sp, #56]	; 0x38
 80113d6:	2300      	movs	r3, #0
 80113d8:	9315      	str	r3, [sp, #84]	; 0x54
 80113da:	e7c7      	b.n	801136c <_dtoa_r+0x1c4>
 80113dc:	2300      	movs	r3, #0
 80113de:	930f      	str	r3, [sp, #60]	; 0x3c
 80113e0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80113e2:	930c      	str	r3, [sp, #48]	; 0x30
 80113e4:	9307      	str	r3, [sp, #28]
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	dc13      	bgt.n	8011412 <_dtoa_r+0x26a>
 80113ea:	2301      	movs	r3, #1
 80113ec:	001a      	movs	r2, r3
 80113ee:	930c      	str	r3, [sp, #48]	; 0x30
 80113f0:	9307      	str	r3, [sp, #28]
 80113f2:	9223      	str	r2, [sp, #140]	; 0x8c
 80113f4:	e00d      	b.n	8011412 <_dtoa_r+0x26a>
 80113f6:	2301      	movs	r3, #1
 80113f8:	e7f1      	b.n	80113de <_dtoa_r+0x236>
 80113fa:	2300      	movs	r3, #0
 80113fc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80113fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8011400:	4694      	mov	ip, r2
 8011402:	9b02      	ldr	r3, [sp, #8]
 8011404:	4463      	add	r3, ip
 8011406:	930c      	str	r3, [sp, #48]	; 0x30
 8011408:	3301      	adds	r3, #1
 801140a:	9307      	str	r3, [sp, #28]
 801140c:	2b00      	cmp	r3, #0
 801140e:	dc00      	bgt.n	8011412 <_dtoa_r+0x26a>
 8011410:	2301      	movs	r3, #1
 8011412:	2200      	movs	r2, #0
 8011414:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011416:	6042      	str	r2, [r0, #4]
 8011418:	3204      	adds	r2, #4
 801141a:	0015      	movs	r5, r2
 801141c:	3514      	adds	r5, #20
 801141e:	6841      	ldr	r1, [r0, #4]
 8011420:	429d      	cmp	r5, r3
 8011422:	d919      	bls.n	8011458 <_dtoa_r+0x2b0>
 8011424:	0038      	movs	r0, r7
 8011426:	f7fe fd15 	bl	800fe54 <_Balloc>
 801142a:	9006      	str	r0, [sp, #24]
 801142c:	2800      	cmp	r0, #0
 801142e:	d117      	bne.n	8011460 <_dtoa_r+0x2b8>
 8011430:	21d5      	movs	r1, #213	; 0xd5
 8011432:	0002      	movs	r2, r0
 8011434:	4b43      	ldr	r3, [pc, #268]	; (8011544 <_dtoa_r+0x39c>)
 8011436:	0049      	lsls	r1, r1, #1
 8011438:	e6cb      	b.n	80111d2 <_dtoa_r+0x2a>
 801143a:	2301      	movs	r3, #1
 801143c:	e7de      	b.n	80113fc <_dtoa_r+0x254>
 801143e:	2300      	movs	r3, #0
 8011440:	940f      	str	r4, [sp, #60]	; 0x3c
 8011442:	9322      	str	r3, [sp, #136]	; 0x88
 8011444:	3b01      	subs	r3, #1
 8011446:	930c      	str	r3, [sp, #48]	; 0x30
 8011448:	9307      	str	r3, [sp, #28]
 801144a:	2200      	movs	r2, #0
 801144c:	3313      	adds	r3, #19
 801144e:	e7d0      	b.n	80113f2 <_dtoa_r+0x24a>
 8011450:	2301      	movs	r3, #1
 8011452:	930f      	str	r3, [sp, #60]	; 0x3c
 8011454:	3b02      	subs	r3, #2
 8011456:	e7f6      	b.n	8011446 <_dtoa_r+0x29e>
 8011458:	3101      	adds	r1, #1
 801145a:	6041      	str	r1, [r0, #4]
 801145c:	0052      	lsls	r2, r2, #1
 801145e:	e7dc      	b.n	801141a <_dtoa_r+0x272>
 8011460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011462:	9a06      	ldr	r2, [sp, #24]
 8011464:	601a      	str	r2, [r3, #0]
 8011466:	9b07      	ldr	r3, [sp, #28]
 8011468:	2b0e      	cmp	r3, #14
 801146a:	d900      	bls.n	801146e <_dtoa_r+0x2c6>
 801146c:	e0eb      	b.n	8011646 <_dtoa_r+0x49e>
 801146e:	2c00      	cmp	r4, #0
 8011470:	d100      	bne.n	8011474 <_dtoa_r+0x2cc>
 8011472:	e0e8      	b.n	8011646 <_dtoa_r+0x49e>
 8011474:	9b02      	ldr	r3, [sp, #8]
 8011476:	2b00      	cmp	r3, #0
 8011478:	dd68      	ble.n	801154c <_dtoa_r+0x3a4>
 801147a:	001a      	movs	r2, r3
 801147c:	210f      	movs	r1, #15
 801147e:	4b2d      	ldr	r3, [pc, #180]	; (8011534 <_dtoa_r+0x38c>)
 8011480:	400a      	ands	r2, r1
 8011482:	00d2      	lsls	r2, r2, #3
 8011484:	189b      	adds	r3, r3, r2
 8011486:	681d      	ldr	r5, [r3, #0]
 8011488:	685e      	ldr	r6, [r3, #4]
 801148a:	9b02      	ldr	r3, [sp, #8]
 801148c:	111c      	asrs	r4, r3, #4
 801148e:	2302      	movs	r3, #2
 8011490:	9310      	str	r3, [sp, #64]	; 0x40
 8011492:	9b02      	ldr	r3, [sp, #8]
 8011494:	05db      	lsls	r3, r3, #23
 8011496:	d50b      	bpl.n	80114b0 <_dtoa_r+0x308>
 8011498:	4b2b      	ldr	r3, [pc, #172]	; (8011548 <_dtoa_r+0x3a0>)
 801149a:	400c      	ands	r4, r1
 801149c:	6a1a      	ldr	r2, [r3, #32]
 801149e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114a0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80114a2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80114a4:	f7f0 fac2 	bl	8001a2c <__aeabi_ddiv>
 80114a8:	2303      	movs	r3, #3
 80114aa:	9008      	str	r0, [sp, #32]
 80114ac:	9109      	str	r1, [sp, #36]	; 0x24
 80114ae:	9310      	str	r3, [sp, #64]	; 0x40
 80114b0:	4b25      	ldr	r3, [pc, #148]	; (8011548 <_dtoa_r+0x3a0>)
 80114b2:	9314      	str	r3, [sp, #80]	; 0x50
 80114b4:	2c00      	cmp	r4, #0
 80114b6:	d108      	bne.n	80114ca <_dtoa_r+0x322>
 80114b8:	9808      	ldr	r0, [sp, #32]
 80114ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80114bc:	002a      	movs	r2, r5
 80114be:	0033      	movs	r3, r6
 80114c0:	f7f0 fab4 	bl	8001a2c <__aeabi_ddiv>
 80114c4:	9008      	str	r0, [sp, #32]
 80114c6:	9109      	str	r1, [sp, #36]	; 0x24
 80114c8:	e05c      	b.n	8011584 <_dtoa_r+0x3dc>
 80114ca:	2301      	movs	r3, #1
 80114cc:	421c      	tst	r4, r3
 80114ce:	d00b      	beq.n	80114e8 <_dtoa_r+0x340>
 80114d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80114d2:	0028      	movs	r0, r5
 80114d4:	3301      	adds	r3, #1
 80114d6:	9310      	str	r3, [sp, #64]	; 0x40
 80114d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80114da:	0031      	movs	r1, r6
 80114dc:	681a      	ldr	r2, [r3, #0]
 80114de:	685b      	ldr	r3, [r3, #4]
 80114e0:	f7f0 fea6 	bl	8002230 <__aeabi_dmul>
 80114e4:	0005      	movs	r5, r0
 80114e6:	000e      	movs	r6, r1
 80114e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80114ea:	1064      	asrs	r4, r4, #1
 80114ec:	3308      	adds	r3, #8
 80114ee:	e7e0      	b.n	80114b2 <_dtoa_r+0x30a>
 80114f0:	08013234 	.word	0x08013234
 80114f4:	08013422 	.word	0x08013422
 80114f8:	7ff00000 	.word	0x7ff00000
 80114fc:	0000270f 	.word	0x0000270f
 8011500:	0801341c 	.word	0x0801341c
 8011504:	0801341f 	.word	0x0801341f
 8011508:	08013420 	.word	0x08013420
 801150c:	08013421 	.word	0x08013421
 8011510:	3ff00000 	.word	0x3ff00000
 8011514:	fffffc01 	.word	0xfffffc01
 8011518:	3ff80000 	.word	0x3ff80000
 801151c:	636f4361 	.word	0x636f4361
 8011520:	3fd287a7 	.word	0x3fd287a7
 8011524:	8b60c8b3 	.word	0x8b60c8b3
 8011528:	3fc68a28 	.word	0x3fc68a28
 801152c:	509f79fb 	.word	0x509f79fb
 8011530:	3fd34413 	.word	0x3fd34413
 8011534:	080132d0 	.word	0x080132d0
 8011538:	00000432 	.word	0x00000432
 801153c:	00000412 	.word	0x00000412
 8011540:	fe100000 	.word	0xfe100000
 8011544:	080131a9 	.word	0x080131a9
 8011548:	080132a8 	.word	0x080132a8
 801154c:	2302      	movs	r3, #2
 801154e:	9310      	str	r3, [sp, #64]	; 0x40
 8011550:	9b02      	ldr	r3, [sp, #8]
 8011552:	2b00      	cmp	r3, #0
 8011554:	d016      	beq.n	8011584 <_dtoa_r+0x3dc>
 8011556:	9812      	ldr	r0, [sp, #72]	; 0x48
 8011558:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801155a:	425c      	negs	r4, r3
 801155c:	230f      	movs	r3, #15
 801155e:	4ab6      	ldr	r2, [pc, #728]	; (8011838 <_dtoa_r+0x690>)
 8011560:	4023      	ands	r3, r4
 8011562:	00db      	lsls	r3, r3, #3
 8011564:	18d3      	adds	r3, r2, r3
 8011566:	681a      	ldr	r2, [r3, #0]
 8011568:	685b      	ldr	r3, [r3, #4]
 801156a:	f7f0 fe61 	bl	8002230 <__aeabi_dmul>
 801156e:	2601      	movs	r6, #1
 8011570:	2300      	movs	r3, #0
 8011572:	9008      	str	r0, [sp, #32]
 8011574:	9109      	str	r1, [sp, #36]	; 0x24
 8011576:	4db1      	ldr	r5, [pc, #708]	; (801183c <_dtoa_r+0x694>)
 8011578:	1124      	asrs	r4, r4, #4
 801157a:	2c00      	cmp	r4, #0
 801157c:	d000      	beq.n	8011580 <_dtoa_r+0x3d8>
 801157e:	e094      	b.n	80116aa <_dtoa_r+0x502>
 8011580:	2b00      	cmp	r3, #0
 8011582:	d19f      	bne.n	80114c4 <_dtoa_r+0x31c>
 8011584:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011586:	2b00      	cmp	r3, #0
 8011588:	d100      	bne.n	801158c <_dtoa_r+0x3e4>
 801158a:	e09b      	b.n	80116c4 <_dtoa_r+0x51c>
 801158c:	9c08      	ldr	r4, [sp, #32]
 801158e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8011590:	2200      	movs	r2, #0
 8011592:	0020      	movs	r0, r4
 8011594:	0029      	movs	r1, r5
 8011596:	4baa      	ldr	r3, [pc, #680]	; (8011840 <_dtoa_r+0x698>)
 8011598:	f7ee ff64 	bl	8000464 <__aeabi_dcmplt>
 801159c:	2800      	cmp	r0, #0
 801159e:	d100      	bne.n	80115a2 <_dtoa_r+0x3fa>
 80115a0:	e090      	b.n	80116c4 <_dtoa_r+0x51c>
 80115a2:	9b07      	ldr	r3, [sp, #28]
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d100      	bne.n	80115aa <_dtoa_r+0x402>
 80115a8:	e08c      	b.n	80116c4 <_dtoa_r+0x51c>
 80115aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	dd46      	ble.n	801163e <_dtoa_r+0x496>
 80115b0:	9b02      	ldr	r3, [sp, #8]
 80115b2:	2200      	movs	r2, #0
 80115b4:	0020      	movs	r0, r4
 80115b6:	0029      	movs	r1, r5
 80115b8:	1e5e      	subs	r6, r3, #1
 80115ba:	4ba2      	ldr	r3, [pc, #648]	; (8011844 <_dtoa_r+0x69c>)
 80115bc:	f7f0 fe38 	bl	8002230 <__aeabi_dmul>
 80115c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80115c2:	9008      	str	r0, [sp, #32]
 80115c4:	9109      	str	r1, [sp, #36]	; 0x24
 80115c6:	3301      	adds	r3, #1
 80115c8:	9310      	str	r3, [sp, #64]	; 0x40
 80115ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80115cc:	9810      	ldr	r0, [sp, #64]	; 0x40
 80115ce:	9c08      	ldr	r4, [sp, #32]
 80115d0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80115d2:	9314      	str	r3, [sp, #80]	; 0x50
 80115d4:	f7f1 fc7e 	bl	8002ed4 <__aeabi_i2d>
 80115d8:	0022      	movs	r2, r4
 80115da:	002b      	movs	r3, r5
 80115dc:	f7f0 fe28 	bl	8002230 <__aeabi_dmul>
 80115e0:	2200      	movs	r2, #0
 80115e2:	4b99      	ldr	r3, [pc, #612]	; (8011848 <_dtoa_r+0x6a0>)
 80115e4:	f7ef fee6 	bl	80013b4 <__aeabi_dadd>
 80115e8:	9010      	str	r0, [sp, #64]	; 0x40
 80115ea:	9111      	str	r1, [sp, #68]	; 0x44
 80115ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80115ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80115f0:	9208      	str	r2, [sp, #32]
 80115f2:	9309      	str	r3, [sp, #36]	; 0x24
 80115f4:	4a95      	ldr	r2, [pc, #596]	; (801184c <_dtoa_r+0x6a4>)
 80115f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80115f8:	4694      	mov	ip, r2
 80115fa:	4463      	add	r3, ip
 80115fc:	9317      	str	r3, [sp, #92]	; 0x5c
 80115fe:	9309      	str	r3, [sp, #36]	; 0x24
 8011600:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011602:	2b00      	cmp	r3, #0
 8011604:	d161      	bne.n	80116ca <_dtoa_r+0x522>
 8011606:	2200      	movs	r2, #0
 8011608:	0020      	movs	r0, r4
 801160a:	0029      	movs	r1, r5
 801160c:	4b90      	ldr	r3, [pc, #576]	; (8011850 <_dtoa_r+0x6a8>)
 801160e:	f7f1 f87b 	bl	8002708 <__aeabi_dsub>
 8011612:	9a08      	ldr	r2, [sp, #32]
 8011614:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011616:	0004      	movs	r4, r0
 8011618:	000d      	movs	r5, r1
 801161a:	f7ee ff37 	bl	800048c <__aeabi_dcmpgt>
 801161e:	2800      	cmp	r0, #0
 8011620:	d000      	beq.n	8011624 <_dtoa_r+0x47c>
 8011622:	e2af      	b.n	8011b84 <_dtoa_r+0x9dc>
 8011624:	488b      	ldr	r0, [pc, #556]	; (8011854 <_dtoa_r+0x6ac>)
 8011626:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011628:	4684      	mov	ip, r0
 801162a:	4461      	add	r1, ip
 801162c:	000b      	movs	r3, r1
 801162e:	0020      	movs	r0, r4
 8011630:	0029      	movs	r1, r5
 8011632:	9a08      	ldr	r2, [sp, #32]
 8011634:	f7ee ff16 	bl	8000464 <__aeabi_dcmplt>
 8011638:	2800      	cmp	r0, #0
 801163a:	d000      	beq.n	801163e <_dtoa_r+0x496>
 801163c:	e29f      	b.n	8011b7e <_dtoa_r+0x9d6>
 801163e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011640:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8011642:	9308      	str	r3, [sp, #32]
 8011644:	9409      	str	r4, [sp, #36]	; 0x24
 8011646:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011648:	2b00      	cmp	r3, #0
 801164a:	da00      	bge.n	801164e <_dtoa_r+0x4a6>
 801164c:	e172      	b.n	8011934 <_dtoa_r+0x78c>
 801164e:	9a02      	ldr	r2, [sp, #8]
 8011650:	2a0e      	cmp	r2, #14
 8011652:	dd00      	ble.n	8011656 <_dtoa_r+0x4ae>
 8011654:	e16e      	b.n	8011934 <_dtoa_r+0x78c>
 8011656:	4b78      	ldr	r3, [pc, #480]	; (8011838 <_dtoa_r+0x690>)
 8011658:	00d2      	lsls	r2, r2, #3
 801165a:	189b      	adds	r3, r3, r2
 801165c:	685c      	ldr	r4, [r3, #4]
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	930a      	str	r3, [sp, #40]	; 0x28
 8011662:	940b      	str	r4, [sp, #44]	; 0x2c
 8011664:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011666:	2b00      	cmp	r3, #0
 8011668:	db00      	blt.n	801166c <_dtoa_r+0x4c4>
 801166a:	e0f7      	b.n	801185c <_dtoa_r+0x6b4>
 801166c:	9b07      	ldr	r3, [sp, #28]
 801166e:	2b00      	cmp	r3, #0
 8011670:	dd00      	ble.n	8011674 <_dtoa_r+0x4cc>
 8011672:	e0f3      	b.n	801185c <_dtoa_r+0x6b4>
 8011674:	d000      	beq.n	8011678 <_dtoa_r+0x4d0>
 8011676:	e282      	b.n	8011b7e <_dtoa_r+0x9d6>
 8011678:	980a      	ldr	r0, [sp, #40]	; 0x28
 801167a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801167c:	2200      	movs	r2, #0
 801167e:	4b74      	ldr	r3, [pc, #464]	; (8011850 <_dtoa_r+0x6a8>)
 8011680:	f7f0 fdd6 	bl	8002230 <__aeabi_dmul>
 8011684:	9a08      	ldr	r2, [sp, #32]
 8011686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011688:	f7ee ff0a 	bl	80004a0 <__aeabi_dcmpge>
 801168c:	9e07      	ldr	r6, [sp, #28]
 801168e:	0035      	movs	r5, r6
 8011690:	2800      	cmp	r0, #0
 8011692:	d000      	beq.n	8011696 <_dtoa_r+0x4ee>
 8011694:	e259      	b.n	8011b4a <_dtoa_r+0x9a2>
 8011696:	9b06      	ldr	r3, [sp, #24]
 8011698:	9a06      	ldr	r2, [sp, #24]
 801169a:	3301      	adds	r3, #1
 801169c:	9308      	str	r3, [sp, #32]
 801169e:	2331      	movs	r3, #49	; 0x31
 80116a0:	7013      	strb	r3, [r2, #0]
 80116a2:	9b02      	ldr	r3, [sp, #8]
 80116a4:	3301      	adds	r3, #1
 80116a6:	9302      	str	r3, [sp, #8]
 80116a8:	e254      	b.n	8011b54 <_dtoa_r+0x9ac>
 80116aa:	4234      	tst	r4, r6
 80116ac:	d007      	beq.n	80116be <_dtoa_r+0x516>
 80116ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80116b0:	3301      	adds	r3, #1
 80116b2:	9310      	str	r3, [sp, #64]	; 0x40
 80116b4:	682a      	ldr	r2, [r5, #0]
 80116b6:	686b      	ldr	r3, [r5, #4]
 80116b8:	f7f0 fdba 	bl	8002230 <__aeabi_dmul>
 80116bc:	0033      	movs	r3, r6
 80116be:	1064      	asrs	r4, r4, #1
 80116c0:	3508      	adds	r5, #8
 80116c2:	e75a      	b.n	801157a <_dtoa_r+0x3d2>
 80116c4:	9e02      	ldr	r6, [sp, #8]
 80116c6:	9b07      	ldr	r3, [sp, #28]
 80116c8:	e780      	b.n	80115cc <_dtoa_r+0x424>
 80116ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80116cc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80116ce:	1e5a      	subs	r2, r3, #1
 80116d0:	4b59      	ldr	r3, [pc, #356]	; (8011838 <_dtoa_r+0x690>)
 80116d2:	00d2      	lsls	r2, r2, #3
 80116d4:	189b      	adds	r3, r3, r2
 80116d6:	681a      	ldr	r2, [r3, #0]
 80116d8:	685b      	ldr	r3, [r3, #4]
 80116da:	2900      	cmp	r1, #0
 80116dc:	d051      	beq.n	8011782 <_dtoa_r+0x5da>
 80116de:	2000      	movs	r0, #0
 80116e0:	495d      	ldr	r1, [pc, #372]	; (8011858 <_dtoa_r+0x6b0>)
 80116e2:	f7f0 f9a3 	bl	8001a2c <__aeabi_ddiv>
 80116e6:	9a08      	ldr	r2, [sp, #32]
 80116e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80116ea:	f7f1 f80d 	bl	8002708 <__aeabi_dsub>
 80116ee:	9a06      	ldr	r2, [sp, #24]
 80116f0:	9b06      	ldr	r3, [sp, #24]
 80116f2:	4694      	mov	ip, r2
 80116f4:	9317      	str	r3, [sp, #92]	; 0x5c
 80116f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80116f8:	9010      	str	r0, [sp, #64]	; 0x40
 80116fa:	9111      	str	r1, [sp, #68]	; 0x44
 80116fc:	4463      	add	r3, ip
 80116fe:	9319      	str	r3, [sp, #100]	; 0x64
 8011700:	0029      	movs	r1, r5
 8011702:	0020      	movs	r0, r4
 8011704:	f7f1 fbb0 	bl	8002e68 <__aeabi_d2iz>
 8011708:	9014      	str	r0, [sp, #80]	; 0x50
 801170a:	f7f1 fbe3 	bl	8002ed4 <__aeabi_i2d>
 801170e:	0002      	movs	r2, r0
 8011710:	000b      	movs	r3, r1
 8011712:	0020      	movs	r0, r4
 8011714:	0029      	movs	r1, r5
 8011716:	f7f0 fff7 	bl	8002708 <__aeabi_dsub>
 801171a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801171c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801171e:	3301      	adds	r3, #1
 8011720:	9308      	str	r3, [sp, #32]
 8011722:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011724:	0004      	movs	r4, r0
 8011726:	3330      	adds	r3, #48	; 0x30
 8011728:	7013      	strb	r3, [r2, #0]
 801172a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801172c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801172e:	000d      	movs	r5, r1
 8011730:	f7ee fe98 	bl	8000464 <__aeabi_dcmplt>
 8011734:	2800      	cmp	r0, #0
 8011736:	d175      	bne.n	8011824 <_dtoa_r+0x67c>
 8011738:	0022      	movs	r2, r4
 801173a:	002b      	movs	r3, r5
 801173c:	2000      	movs	r0, #0
 801173e:	4940      	ldr	r1, [pc, #256]	; (8011840 <_dtoa_r+0x698>)
 8011740:	f7f0 ffe2 	bl	8002708 <__aeabi_dsub>
 8011744:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011746:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011748:	f7ee fe8c 	bl	8000464 <__aeabi_dcmplt>
 801174c:	2800      	cmp	r0, #0
 801174e:	d000      	beq.n	8011752 <_dtoa_r+0x5aa>
 8011750:	e0d2      	b.n	80118f8 <_dtoa_r+0x750>
 8011752:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011754:	9a08      	ldr	r2, [sp, #32]
 8011756:	4293      	cmp	r3, r2
 8011758:	d100      	bne.n	801175c <_dtoa_r+0x5b4>
 801175a:	e770      	b.n	801163e <_dtoa_r+0x496>
 801175c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801175e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011760:	2200      	movs	r2, #0
 8011762:	4b38      	ldr	r3, [pc, #224]	; (8011844 <_dtoa_r+0x69c>)
 8011764:	f7f0 fd64 	bl	8002230 <__aeabi_dmul>
 8011768:	4b36      	ldr	r3, [pc, #216]	; (8011844 <_dtoa_r+0x69c>)
 801176a:	9010      	str	r0, [sp, #64]	; 0x40
 801176c:	9111      	str	r1, [sp, #68]	; 0x44
 801176e:	2200      	movs	r2, #0
 8011770:	0020      	movs	r0, r4
 8011772:	0029      	movs	r1, r5
 8011774:	f7f0 fd5c 	bl	8002230 <__aeabi_dmul>
 8011778:	9b08      	ldr	r3, [sp, #32]
 801177a:	0004      	movs	r4, r0
 801177c:	000d      	movs	r5, r1
 801177e:	9317      	str	r3, [sp, #92]	; 0x5c
 8011780:	e7be      	b.n	8011700 <_dtoa_r+0x558>
 8011782:	9808      	ldr	r0, [sp, #32]
 8011784:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011786:	f7f0 fd53 	bl	8002230 <__aeabi_dmul>
 801178a:	9a06      	ldr	r2, [sp, #24]
 801178c:	9b06      	ldr	r3, [sp, #24]
 801178e:	4694      	mov	ip, r2
 8011790:	9308      	str	r3, [sp, #32]
 8011792:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011794:	9010      	str	r0, [sp, #64]	; 0x40
 8011796:	9111      	str	r1, [sp, #68]	; 0x44
 8011798:	4463      	add	r3, ip
 801179a:	9319      	str	r3, [sp, #100]	; 0x64
 801179c:	0029      	movs	r1, r5
 801179e:	0020      	movs	r0, r4
 80117a0:	f7f1 fb62 	bl	8002e68 <__aeabi_d2iz>
 80117a4:	9017      	str	r0, [sp, #92]	; 0x5c
 80117a6:	f7f1 fb95 	bl	8002ed4 <__aeabi_i2d>
 80117aa:	0002      	movs	r2, r0
 80117ac:	000b      	movs	r3, r1
 80117ae:	0020      	movs	r0, r4
 80117b0:	0029      	movs	r1, r5
 80117b2:	f7f0 ffa9 	bl	8002708 <__aeabi_dsub>
 80117b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80117b8:	9a08      	ldr	r2, [sp, #32]
 80117ba:	3330      	adds	r3, #48	; 0x30
 80117bc:	7013      	strb	r3, [r2, #0]
 80117be:	0013      	movs	r3, r2
 80117c0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80117c2:	3301      	adds	r3, #1
 80117c4:	0004      	movs	r4, r0
 80117c6:	000d      	movs	r5, r1
 80117c8:	9308      	str	r3, [sp, #32]
 80117ca:	4293      	cmp	r3, r2
 80117cc:	d12c      	bne.n	8011828 <_dtoa_r+0x680>
 80117ce:	9810      	ldr	r0, [sp, #64]	; 0x40
 80117d0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80117d2:	9a06      	ldr	r2, [sp, #24]
 80117d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80117d6:	4694      	mov	ip, r2
 80117d8:	4463      	add	r3, ip
 80117da:	2200      	movs	r2, #0
 80117dc:	9308      	str	r3, [sp, #32]
 80117de:	4b1e      	ldr	r3, [pc, #120]	; (8011858 <_dtoa_r+0x6b0>)
 80117e0:	f7ef fde8 	bl	80013b4 <__aeabi_dadd>
 80117e4:	0002      	movs	r2, r0
 80117e6:	000b      	movs	r3, r1
 80117e8:	0020      	movs	r0, r4
 80117ea:	0029      	movs	r1, r5
 80117ec:	f7ee fe4e 	bl	800048c <__aeabi_dcmpgt>
 80117f0:	2800      	cmp	r0, #0
 80117f2:	d000      	beq.n	80117f6 <_dtoa_r+0x64e>
 80117f4:	e080      	b.n	80118f8 <_dtoa_r+0x750>
 80117f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80117f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80117fa:	2000      	movs	r0, #0
 80117fc:	4916      	ldr	r1, [pc, #88]	; (8011858 <_dtoa_r+0x6b0>)
 80117fe:	f7f0 ff83 	bl	8002708 <__aeabi_dsub>
 8011802:	0002      	movs	r2, r0
 8011804:	000b      	movs	r3, r1
 8011806:	0020      	movs	r0, r4
 8011808:	0029      	movs	r1, r5
 801180a:	f7ee fe2b 	bl	8000464 <__aeabi_dcmplt>
 801180e:	2800      	cmp	r0, #0
 8011810:	d100      	bne.n	8011814 <_dtoa_r+0x66c>
 8011812:	e714      	b.n	801163e <_dtoa_r+0x496>
 8011814:	9b08      	ldr	r3, [sp, #32]
 8011816:	001a      	movs	r2, r3
 8011818:	3a01      	subs	r2, #1
 801181a:	9208      	str	r2, [sp, #32]
 801181c:	7812      	ldrb	r2, [r2, #0]
 801181e:	2a30      	cmp	r2, #48	; 0x30
 8011820:	d0f8      	beq.n	8011814 <_dtoa_r+0x66c>
 8011822:	9308      	str	r3, [sp, #32]
 8011824:	9602      	str	r6, [sp, #8]
 8011826:	e055      	b.n	80118d4 <_dtoa_r+0x72c>
 8011828:	2200      	movs	r2, #0
 801182a:	4b06      	ldr	r3, [pc, #24]	; (8011844 <_dtoa_r+0x69c>)
 801182c:	f7f0 fd00 	bl	8002230 <__aeabi_dmul>
 8011830:	0004      	movs	r4, r0
 8011832:	000d      	movs	r5, r1
 8011834:	e7b2      	b.n	801179c <_dtoa_r+0x5f4>
 8011836:	46c0      	nop			; (mov r8, r8)
 8011838:	080132d0 	.word	0x080132d0
 801183c:	080132a8 	.word	0x080132a8
 8011840:	3ff00000 	.word	0x3ff00000
 8011844:	40240000 	.word	0x40240000
 8011848:	401c0000 	.word	0x401c0000
 801184c:	fcc00000 	.word	0xfcc00000
 8011850:	40140000 	.word	0x40140000
 8011854:	7cc00000 	.word	0x7cc00000
 8011858:	3fe00000 	.word	0x3fe00000
 801185c:	9b07      	ldr	r3, [sp, #28]
 801185e:	9e06      	ldr	r6, [sp, #24]
 8011860:	3b01      	subs	r3, #1
 8011862:	199b      	adds	r3, r3, r6
 8011864:	930c      	str	r3, [sp, #48]	; 0x30
 8011866:	9c08      	ldr	r4, [sp, #32]
 8011868:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801186a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801186c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801186e:	0020      	movs	r0, r4
 8011870:	0029      	movs	r1, r5
 8011872:	f7f0 f8db 	bl	8001a2c <__aeabi_ddiv>
 8011876:	f7f1 faf7 	bl	8002e68 <__aeabi_d2iz>
 801187a:	9007      	str	r0, [sp, #28]
 801187c:	f7f1 fb2a 	bl	8002ed4 <__aeabi_i2d>
 8011880:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011882:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011884:	f7f0 fcd4 	bl	8002230 <__aeabi_dmul>
 8011888:	0002      	movs	r2, r0
 801188a:	000b      	movs	r3, r1
 801188c:	0020      	movs	r0, r4
 801188e:	0029      	movs	r1, r5
 8011890:	f7f0 ff3a 	bl	8002708 <__aeabi_dsub>
 8011894:	0033      	movs	r3, r6
 8011896:	9a07      	ldr	r2, [sp, #28]
 8011898:	3601      	adds	r6, #1
 801189a:	3230      	adds	r2, #48	; 0x30
 801189c:	701a      	strb	r2, [r3, #0]
 801189e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80118a0:	9608      	str	r6, [sp, #32]
 80118a2:	429a      	cmp	r2, r3
 80118a4:	d139      	bne.n	801191a <_dtoa_r+0x772>
 80118a6:	0002      	movs	r2, r0
 80118a8:	000b      	movs	r3, r1
 80118aa:	f7ef fd83 	bl	80013b4 <__aeabi_dadd>
 80118ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80118b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80118b2:	0004      	movs	r4, r0
 80118b4:	000d      	movs	r5, r1
 80118b6:	f7ee fde9 	bl	800048c <__aeabi_dcmpgt>
 80118ba:	2800      	cmp	r0, #0
 80118bc:	d11b      	bne.n	80118f6 <_dtoa_r+0x74e>
 80118be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80118c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80118c2:	0020      	movs	r0, r4
 80118c4:	0029      	movs	r1, r5
 80118c6:	f7ee fdc7 	bl	8000458 <__aeabi_dcmpeq>
 80118ca:	2800      	cmp	r0, #0
 80118cc:	d002      	beq.n	80118d4 <_dtoa_r+0x72c>
 80118ce:	9b07      	ldr	r3, [sp, #28]
 80118d0:	07db      	lsls	r3, r3, #31
 80118d2:	d410      	bmi.n	80118f6 <_dtoa_r+0x74e>
 80118d4:	0038      	movs	r0, r7
 80118d6:	9905      	ldr	r1, [sp, #20]
 80118d8:	f7fe fb00 	bl	800fedc <_Bfree>
 80118dc:	2300      	movs	r3, #0
 80118de:	9a08      	ldr	r2, [sp, #32]
 80118e0:	9802      	ldr	r0, [sp, #8]
 80118e2:	7013      	strb	r3, [r2, #0]
 80118e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80118e6:	3001      	adds	r0, #1
 80118e8:	6018      	str	r0, [r3, #0]
 80118ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d100      	bne.n	80118f2 <_dtoa_r+0x74a>
 80118f0:	e4a6      	b.n	8011240 <_dtoa_r+0x98>
 80118f2:	601a      	str	r2, [r3, #0]
 80118f4:	e4a4      	b.n	8011240 <_dtoa_r+0x98>
 80118f6:	9e02      	ldr	r6, [sp, #8]
 80118f8:	9b08      	ldr	r3, [sp, #32]
 80118fa:	9308      	str	r3, [sp, #32]
 80118fc:	3b01      	subs	r3, #1
 80118fe:	781a      	ldrb	r2, [r3, #0]
 8011900:	2a39      	cmp	r2, #57	; 0x39
 8011902:	d106      	bne.n	8011912 <_dtoa_r+0x76a>
 8011904:	9a06      	ldr	r2, [sp, #24]
 8011906:	429a      	cmp	r2, r3
 8011908:	d1f7      	bne.n	80118fa <_dtoa_r+0x752>
 801190a:	2230      	movs	r2, #48	; 0x30
 801190c:	9906      	ldr	r1, [sp, #24]
 801190e:	3601      	adds	r6, #1
 8011910:	700a      	strb	r2, [r1, #0]
 8011912:	781a      	ldrb	r2, [r3, #0]
 8011914:	3201      	adds	r2, #1
 8011916:	701a      	strb	r2, [r3, #0]
 8011918:	e784      	b.n	8011824 <_dtoa_r+0x67c>
 801191a:	2200      	movs	r2, #0
 801191c:	4baa      	ldr	r3, [pc, #680]	; (8011bc8 <_dtoa_r+0xa20>)
 801191e:	f7f0 fc87 	bl	8002230 <__aeabi_dmul>
 8011922:	2200      	movs	r2, #0
 8011924:	2300      	movs	r3, #0
 8011926:	0004      	movs	r4, r0
 8011928:	000d      	movs	r5, r1
 801192a:	f7ee fd95 	bl	8000458 <__aeabi_dcmpeq>
 801192e:	2800      	cmp	r0, #0
 8011930:	d09b      	beq.n	801186a <_dtoa_r+0x6c2>
 8011932:	e7cf      	b.n	80118d4 <_dtoa_r+0x72c>
 8011934:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8011936:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8011938:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801193a:	2d00      	cmp	r5, #0
 801193c:	d012      	beq.n	8011964 <_dtoa_r+0x7bc>
 801193e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8011940:	2a01      	cmp	r2, #1
 8011942:	dc66      	bgt.n	8011a12 <_dtoa_r+0x86a>
 8011944:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011946:	2a00      	cmp	r2, #0
 8011948:	d05d      	beq.n	8011a06 <_dtoa_r+0x85e>
 801194a:	4aa0      	ldr	r2, [pc, #640]	; (8011bcc <_dtoa_r+0xa24>)
 801194c:	189b      	adds	r3, r3, r2
 801194e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011950:	2101      	movs	r1, #1
 8011952:	18d2      	adds	r2, r2, r3
 8011954:	920a      	str	r2, [sp, #40]	; 0x28
 8011956:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011958:	0038      	movs	r0, r7
 801195a:	18d3      	adds	r3, r2, r3
 801195c:	930d      	str	r3, [sp, #52]	; 0x34
 801195e:	f7fe fbb9 	bl	80100d4 <__i2b>
 8011962:	0005      	movs	r5, r0
 8011964:	2c00      	cmp	r4, #0
 8011966:	dd0e      	ble.n	8011986 <_dtoa_r+0x7de>
 8011968:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801196a:	2b00      	cmp	r3, #0
 801196c:	dd0b      	ble.n	8011986 <_dtoa_r+0x7de>
 801196e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011970:	0023      	movs	r3, r4
 8011972:	4294      	cmp	r4, r2
 8011974:	dd00      	ble.n	8011978 <_dtoa_r+0x7d0>
 8011976:	0013      	movs	r3, r2
 8011978:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801197a:	1ae4      	subs	r4, r4, r3
 801197c:	1ad2      	subs	r2, r2, r3
 801197e:	920a      	str	r2, [sp, #40]	; 0x28
 8011980:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011982:	1ad3      	subs	r3, r2, r3
 8011984:	930d      	str	r3, [sp, #52]	; 0x34
 8011986:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011988:	2b00      	cmp	r3, #0
 801198a:	d01f      	beq.n	80119cc <_dtoa_r+0x824>
 801198c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801198e:	2b00      	cmp	r3, #0
 8011990:	d054      	beq.n	8011a3c <_dtoa_r+0x894>
 8011992:	2e00      	cmp	r6, #0
 8011994:	dd11      	ble.n	80119ba <_dtoa_r+0x812>
 8011996:	0029      	movs	r1, r5
 8011998:	0032      	movs	r2, r6
 801199a:	0038      	movs	r0, r7
 801199c:	f7fe fc60 	bl	8010260 <__pow5mult>
 80119a0:	9a05      	ldr	r2, [sp, #20]
 80119a2:	0001      	movs	r1, r0
 80119a4:	0005      	movs	r5, r0
 80119a6:	0038      	movs	r0, r7
 80119a8:	f7fe fbaa 	bl	8010100 <__multiply>
 80119ac:	9905      	ldr	r1, [sp, #20]
 80119ae:	9014      	str	r0, [sp, #80]	; 0x50
 80119b0:	0038      	movs	r0, r7
 80119b2:	f7fe fa93 	bl	800fedc <_Bfree>
 80119b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80119b8:	9305      	str	r3, [sp, #20]
 80119ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80119bc:	1b9a      	subs	r2, r3, r6
 80119be:	42b3      	cmp	r3, r6
 80119c0:	d004      	beq.n	80119cc <_dtoa_r+0x824>
 80119c2:	0038      	movs	r0, r7
 80119c4:	9905      	ldr	r1, [sp, #20]
 80119c6:	f7fe fc4b 	bl	8010260 <__pow5mult>
 80119ca:	9005      	str	r0, [sp, #20]
 80119cc:	2101      	movs	r1, #1
 80119ce:	0038      	movs	r0, r7
 80119d0:	f7fe fb80 	bl	80100d4 <__i2b>
 80119d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80119d6:	0006      	movs	r6, r0
 80119d8:	2b00      	cmp	r3, #0
 80119da:	dd31      	ble.n	8011a40 <_dtoa_r+0x898>
 80119dc:	001a      	movs	r2, r3
 80119de:	0001      	movs	r1, r0
 80119e0:	0038      	movs	r0, r7
 80119e2:	f7fe fc3d 	bl	8010260 <__pow5mult>
 80119e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80119e8:	0006      	movs	r6, r0
 80119ea:	2b01      	cmp	r3, #1
 80119ec:	dd2d      	ble.n	8011a4a <_dtoa_r+0x8a2>
 80119ee:	2300      	movs	r3, #0
 80119f0:	930e      	str	r3, [sp, #56]	; 0x38
 80119f2:	6933      	ldr	r3, [r6, #16]
 80119f4:	3303      	adds	r3, #3
 80119f6:	009b      	lsls	r3, r3, #2
 80119f8:	18f3      	adds	r3, r6, r3
 80119fa:	6858      	ldr	r0, [r3, #4]
 80119fc:	f7fe fb22 	bl	8010044 <__hi0bits>
 8011a00:	2320      	movs	r3, #32
 8011a02:	1a18      	subs	r0, r3, r0
 8011a04:	e039      	b.n	8011a7a <_dtoa_r+0x8d2>
 8011a06:	2336      	movs	r3, #54	; 0x36
 8011a08:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8011a0a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8011a0c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8011a0e:	1a9b      	subs	r3, r3, r2
 8011a10:	e79d      	b.n	801194e <_dtoa_r+0x7a6>
 8011a12:	9b07      	ldr	r3, [sp, #28]
 8011a14:	1e5e      	subs	r6, r3, #1
 8011a16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011a18:	42b3      	cmp	r3, r6
 8011a1a:	db07      	blt.n	8011a2c <_dtoa_r+0x884>
 8011a1c:	1b9e      	subs	r6, r3, r6
 8011a1e:	9b07      	ldr	r3, [sp, #28]
 8011a20:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	da93      	bge.n	801194e <_dtoa_r+0x7a6>
 8011a26:	1ae4      	subs	r4, r4, r3
 8011a28:	2300      	movs	r3, #0
 8011a2a:	e790      	b.n	801194e <_dtoa_r+0x7a6>
 8011a2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011a2e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011a30:	1af3      	subs	r3, r6, r3
 8011a32:	18d3      	adds	r3, r2, r3
 8011a34:	960e      	str	r6, [sp, #56]	; 0x38
 8011a36:	9315      	str	r3, [sp, #84]	; 0x54
 8011a38:	2600      	movs	r6, #0
 8011a3a:	e7f0      	b.n	8011a1e <_dtoa_r+0x876>
 8011a3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011a3e:	e7c0      	b.n	80119c2 <_dtoa_r+0x81a>
 8011a40:	2300      	movs	r3, #0
 8011a42:	930e      	str	r3, [sp, #56]	; 0x38
 8011a44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011a46:	2b01      	cmp	r3, #1
 8011a48:	dc13      	bgt.n	8011a72 <_dtoa_r+0x8ca>
 8011a4a:	2300      	movs	r3, #0
 8011a4c:	930e      	str	r3, [sp, #56]	; 0x38
 8011a4e:	9b08      	ldr	r3, [sp, #32]
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d10e      	bne.n	8011a72 <_dtoa_r+0x8ca>
 8011a54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a56:	031b      	lsls	r3, r3, #12
 8011a58:	d10b      	bne.n	8011a72 <_dtoa_r+0x8ca>
 8011a5a:	4b5d      	ldr	r3, [pc, #372]	; (8011bd0 <_dtoa_r+0xa28>)
 8011a5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011a5e:	4213      	tst	r3, r2
 8011a60:	d007      	beq.n	8011a72 <_dtoa_r+0x8ca>
 8011a62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a64:	3301      	adds	r3, #1
 8011a66:	930a      	str	r3, [sp, #40]	; 0x28
 8011a68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011a6a:	3301      	adds	r3, #1
 8011a6c:	930d      	str	r3, [sp, #52]	; 0x34
 8011a6e:	2301      	movs	r3, #1
 8011a70:	930e      	str	r3, [sp, #56]	; 0x38
 8011a72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011a74:	2001      	movs	r0, #1
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d1bb      	bne.n	80119f2 <_dtoa_r+0x84a>
 8011a7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011a7c:	221f      	movs	r2, #31
 8011a7e:	1818      	adds	r0, r3, r0
 8011a80:	0003      	movs	r3, r0
 8011a82:	4013      	ands	r3, r2
 8011a84:	4210      	tst	r0, r2
 8011a86:	d046      	beq.n	8011b16 <_dtoa_r+0x96e>
 8011a88:	3201      	adds	r2, #1
 8011a8a:	1ad2      	subs	r2, r2, r3
 8011a8c:	2a04      	cmp	r2, #4
 8011a8e:	dd3f      	ble.n	8011b10 <_dtoa_r+0x968>
 8011a90:	221c      	movs	r2, #28
 8011a92:	1ad3      	subs	r3, r2, r3
 8011a94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011a96:	18e4      	adds	r4, r4, r3
 8011a98:	18d2      	adds	r2, r2, r3
 8011a9a:	920a      	str	r2, [sp, #40]	; 0x28
 8011a9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011a9e:	18d3      	adds	r3, r2, r3
 8011aa0:	930d      	str	r3, [sp, #52]	; 0x34
 8011aa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	dd05      	ble.n	8011ab4 <_dtoa_r+0x90c>
 8011aa8:	001a      	movs	r2, r3
 8011aaa:	0038      	movs	r0, r7
 8011aac:	9905      	ldr	r1, [sp, #20]
 8011aae:	f7fe fc33 	bl	8010318 <__lshift>
 8011ab2:	9005      	str	r0, [sp, #20]
 8011ab4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	dd05      	ble.n	8011ac6 <_dtoa_r+0x91e>
 8011aba:	0031      	movs	r1, r6
 8011abc:	001a      	movs	r2, r3
 8011abe:	0038      	movs	r0, r7
 8011ac0:	f7fe fc2a 	bl	8010318 <__lshift>
 8011ac4:	0006      	movs	r6, r0
 8011ac6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d026      	beq.n	8011b1a <_dtoa_r+0x972>
 8011acc:	0031      	movs	r1, r6
 8011ace:	9805      	ldr	r0, [sp, #20]
 8011ad0:	f7fe fc90 	bl	80103f4 <__mcmp>
 8011ad4:	2800      	cmp	r0, #0
 8011ad6:	da20      	bge.n	8011b1a <_dtoa_r+0x972>
 8011ad8:	9b02      	ldr	r3, [sp, #8]
 8011ada:	220a      	movs	r2, #10
 8011adc:	3b01      	subs	r3, #1
 8011ade:	9302      	str	r3, [sp, #8]
 8011ae0:	0038      	movs	r0, r7
 8011ae2:	2300      	movs	r3, #0
 8011ae4:	9905      	ldr	r1, [sp, #20]
 8011ae6:	f7fe fa1d 	bl	800ff24 <__multadd>
 8011aea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011aec:	9005      	str	r0, [sp, #20]
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d100      	bne.n	8011af4 <_dtoa_r+0x94c>
 8011af2:	e166      	b.n	8011dc2 <_dtoa_r+0xc1a>
 8011af4:	2300      	movs	r3, #0
 8011af6:	0029      	movs	r1, r5
 8011af8:	220a      	movs	r2, #10
 8011afa:	0038      	movs	r0, r7
 8011afc:	f7fe fa12 	bl	800ff24 <__multadd>
 8011b00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011b02:	0005      	movs	r5, r0
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	dc47      	bgt.n	8011b98 <_dtoa_r+0x9f0>
 8011b08:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011b0a:	2b02      	cmp	r3, #2
 8011b0c:	dc0d      	bgt.n	8011b2a <_dtoa_r+0x982>
 8011b0e:	e043      	b.n	8011b98 <_dtoa_r+0x9f0>
 8011b10:	2a04      	cmp	r2, #4
 8011b12:	d0c6      	beq.n	8011aa2 <_dtoa_r+0x8fa>
 8011b14:	0013      	movs	r3, r2
 8011b16:	331c      	adds	r3, #28
 8011b18:	e7bc      	b.n	8011a94 <_dtoa_r+0x8ec>
 8011b1a:	9b07      	ldr	r3, [sp, #28]
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	dc35      	bgt.n	8011b8c <_dtoa_r+0x9e4>
 8011b20:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011b22:	2b02      	cmp	r3, #2
 8011b24:	dd32      	ble.n	8011b8c <_dtoa_r+0x9e4>
 8011b26:	9b07      	ldr	r3, [sp, #28]
 8011b28:	930c      	str	r3, [sp, #48]	; 0x30
 8011b2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d10c      	bne.n	8011b4a <_dtoa_r+0x9a2>
 8011b30:	0031      	movs	r1, r6
 8011b32:	2205      	movs	r2, #5
 8011b34:	0038      	movs	r0, r7
 8011b36:	f7fe f9f5 	bl	800ff24 <__multadd>
 8011b3a:	0006      	movs	r6, r0
 8011b3c:	0001      	movs	r1, r0
 8011b3e:	9805      	ldr	r0, [sp, #20]
 8011b40:	f7fe fc58 	bl	80103f4 <__mcmp>
 8011b44:	2800      	cmp	r0, #0
 8011b46:	dd00      	ble.n	8011b4a <_dtoa_r+0x9a2>
 8011b48:	e5a5      	b.n	8011696 <_dtoa_r+0x4ee>
 8011b4a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011b4c:	43db      	mvns	r3, r3
 8011b4e:	9302      	str	r3, [sp, #8]
 8011b50:	9b06      	ldr	r3, [sp, #24]
 8011b52:	9308      	str	r3, [sp, #32]
 8011b54:	2400      	movs	r4, #0
 8011b56:	0031      	movs	r1, r6
 8011b58:	0038      	movs	r0, r7
 8011b5a:	f7fe f9bf 	bl	800fedc <_Bfree>
 8011b5e:	2d00      	cmp	r5, #0
 8011b60:	d100      	bne.n	8011b64 <_dtoa_r+0x9bc>
 8011b62:	e6b7      	b.n	80118d4 <_dtoa_r+0x72c>
 8011b64:	2c00      	cmp	r4, #0
 8011b66:	d005      	beq.n	8011b74 <_dtoa_r+0x9cc>
 8011b68:	42ac      	cmp	r4, r5
 8011b6a:	d003      	beq.n	8011b74 <_dtoa_r+0x9cc>
 8011b6c:	0021      	movs	r1, r4
 8011b6e:	0038      	movs	r0, r7
 8011b70:	f7fe f9b4 	bl	800fedc <_Bfree>
 8011b74:	0029      	movs	r1, r5
 8011b76:	0038      	movs	r0, r7
 8011b78:	f7fe f9b0 	bl	800fedc <_Bfree>
 8011b7c:	e6aa      	b.n	80118d4 <_dtoa_r+0x72c>
 8011b7e:	2600      	movs	r6, #0
 8011b80:	0035      	movs	r5, r6
 8011b82:	e7e2      	b.n	8011b4a <_dtoa_r+0x9a2>
 8011b84:	9602      	str	r6, [sp, #8]
 8011b86:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8011b88:	0035      	movs	r5, r6
 8011b8a:	e584      	b.n	8011696 <_dtoa_r+0x4ee>
 8011b8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d100      	bne.n	8011b94 <_dtoa_r+0x9ec>
 8011b92:	e0ce      	b.n	8011d32 <_dtoa_r+0xb8a>
 8011b94:	9b07      	ldr	r3, [sp, #28]
 8011b96:	930c      	str	r3, [sp, #48]	; 0x30
 8011b98:	2c00      	cmp	r4, #0
 8011b9a:	dd05      	ble.n	8011ba8 <_dtoa_r+0xa00>
 8011b9c:	0029      	movs	r1, r5
 8011b9e:	0022      	movs	r2, r4
 8011ba0:	0038      	movs	r0, r7
 8011ba2:	f7fe fbb9 	bl	8010318 <__lshift>
 8011ba6:	0005      	movs	r5, r0
 8011ba8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011baa:	0028      	movs	r0, r5
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d022      	beq.n	8011bf6 <_dtoa_r+0xa4e>
 8011bb0:	0038      	movs	r0, r7
 8011bb2:	6869      	ldr	r1, [r5, #4]
 8011bb4:	f7fe f94e 	bl	800fe54 <_Balloc>
 8011bb8:	1e04      	subs	r4, r0, #0
 8011bba:	d10f      	bne.n	8011bdc <_dtoa_r+0xa34>
 8011bbc:	0002      	movs	r2, r0
 8011bbe:	4b05      	ldr	r3, [pc, #20]	; (8011bd4 <_dtoa_r+0xa2c>)
 8011bc0:	4905      	ldr	r1, [pc, #20]	; (8011bd8 <_dtoa_r+0xa30>)
 8011bc2:	f7ff fb06 	bl	80111d2 <_dtoa_r+0x2a>
 8011bc6:	46c0      	nop			; (mov r8, r8)
 8011bc8:	40240000 	.word	0x40240000
 8011bcc:	00000433 	.word	0x00000433
 8011bd0:	7ff00000 	.word	0x7ff00000
 8011bd4:	080131a9 	.word	0x080131a9
 8011bd8:	000002ea 	.word	0x000002ea
 8011bdc:	0029      	movs	r1, r5
 8011bde:	692b      	ldr	r3, [r5, #16]
 8011be0:	310c      	adds	r1, #12
 8011be2:	1c9a      	adds	r2, r3, #2
 8011be4:	0092      	lsls	r2, r2, #2
 8011be6:	300c      	adds	r0, #12
 8011be8:	f7fc fcc8 	bl	800e57c <memcpy>
 8011bec:	2201      	movs	r2, #1
 8011bee:	0021      	movs	r1, r4
 8011bf0:	0038      	movs	r0, r7
 8011bf2:	f7fe fb91 	bl	8010318 <__lshift>
 8011bf6:	9b06      	ldr	r3, [sp, #24]
 8011bf8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011bfa:	930a      	str	r3, [sp, #40]	; 0x28
 8011bfc:	3b01      	subs	r3, #1
 8011bfe:	189b      	adds	r3, r3, r2
 8011c00:	2201      	movs	r2, #1
 8011c02:	002c      	movs	r4, r5
 8011c04:	0005      	movs	r5, r0
 8011c06:	9314      	str	r3, [sp, #80]	; 0x50
 8011c08:	9b08      	ldr	r3, [sp, #32]
 8011c0a:	4013      	ands	r3, r2
 8011c0c:	930f      	str	r3, [sp, #60]	; 0x3c
 8011c0e:	0031      	movs	r1, r6
 8011c10:	9805      	ldr	r0, [sp, #20]
 8011c12:	f7ff fa3d 	bl	8011090 <quorem>
 8011c16:	0003      	movs	r3, r0
 8011c18:	0021      	movs	r1, r4
 8011c1a:	3330      	adds	r3, #48	; 0x30
 8011c1c:	900d      	str	r0, [sp, #52]	; 0x34
 8011c1e:	9805      	ldr	r0, [sp, #20]
 8011c20:	9307      	str	r3, [sp, #28]
 8011c22:	f7fe fbe7 	bl	80103f4 <__mcmp>
 8011c26:	002a      	movs	r2, r5
 8011c28:	900e      	str	r0, [sp, #56]	; 0x38
 8011c2a:	0031      	movs	r1, r6
 8011c2c:	0038      	movs	r0, r7
 8011c2e:	f7fe fbfd 	bl	801042c <__mdiff>
 8011c32:	68c3      	ldr	r3, [r0, #12]
 8011c34:	9008      	str	r0, [sp, #32]
 8011c36:	9310      	str	r3, [sp, #64]	; 0x40
 8011c38:	2301      	movs	r3, #1
 8011c3a:	930c      	str	r3, [sp, #48]	; 0x30
 8011c3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d104      	bne.n	8011c4c <_dtoa_r+0xaa4>
 8011c42:	0001      	movs	r1, r0
 8011c44:	9805      	ldr	r0, [sp, #20]
 8011c46:	f7fe fbd5 	bl	80103f4 <__mcmp>
 8011c4a:	900c      	str	r0, [sp, #48]	; 0x30
 8011c4c:	0038      	movs	r0, r7
 8011c4e:	9908      	ldr	r1, [sp, #32]
 8011c50:	f7fe f944 	bl	800fedc <_Bfree>
 8011c54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011c58:	3301      	adds	r3, #1
 8011c5a:	9308      	str	r3, [sp, #32]
 8011c5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011c5e:	4313      	orrs	r3, r2
 8011c60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011c62:	4313      	orrs	r3, r2
 8011c64:	d10c      	bne.n	8011c80 <_dtoa_r+0xad8>
 8011c66:	9b07      	ldr	r3, [sp, #28]
 8011c68:	2b39      	cmp	r3, #57	; 0x39
 8011c6a:	d026      	beq.n	8011cba <_dtoa_r+0xb12>
 8011c6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	dd02      	ble.n	8011c78 <_dtoa_r+0xad0>
 8011c72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011c74:	3331      	adds	r3, #49	; 0x31
 8011c76:	9307      	str	r3, [sp, #28]
 8011c78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c7a:	9a07      	ldr	r2, [sp, #28]
 8011c7c:	701a      	strb	r2, [r3, #0]
 8011c7e:	e76a      	b.n	8011b56 <_dtoa_r+0x9ae>
 8011c80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	db04      	blt.n	8011c90 <_dtoa_r+0xae8>
 8011c86:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8011c88:	4313      	orrs	r3, r2
 8011c8a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011c8c:	4313      	orrs	r3, r2
 8011c8e:	d11f      	bne.n	8011cd0 <_dtoa_r+0xb28>
 8011c90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	ddf0      	ble.n	8011c78 <_dtoa_r+0xad0>
 8011c96:	9905      	ldr	r1, [sp, #20]
 8011c98:	2201      	movs	r2, #1
 8011c9a:	0038      	movs	r0, r7
 8011c9c:	f7fe fb3c 	bl	8010318 <__lshift>
 8011ca0:	0031      	movs	r1, r6
 8011ca2:	9005      	str	r0, [sp, #20]
 8011ca4:	f7fe fba6 	bl	80103f4 <__mcmp>
 8011ca8:	2800      	cmp	r0, #0
 8011caa:	dc03      	bgt.n	8011cb4 <_dtoa_r+0xb0c>
 8011cac:	d1e4      	bne.n	8011c78 <_dtoa_r+0xad0>
 8011cae:	9b07      	ldr	r3, [sp, #28]
 8011cb0:	07db      	lsls	r3, r3, #31
 8011cb2:	d5e1      	bpl.n	8011c78 <_dtoa_r+0xad0>
 8011cb4:	9b07      	ldr	r3, [sp, #28]
 8011cb6:	2b39      	cmp	r3, #57	; 0x39
 8011cb8:	d1db      	bne.n	8011c72 <_dtoa_r+0xaca>
 8011cba:	2339      	movs	r3, #57	; 0x39
 8011cbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011cbe:	7013      	strb	r3, [r2, #0]
 8011cc0:	9b08      	ldr	r3, [sp, #32]
 8011cc2:	9308      	str	r3, [sp, #32]
 8011cc4:	3b01      	subs	r3, #1
 8011cc6:	781a      	ldrb	r2, [r3, #0]
 8011cc8:	2a39      	cmp	r2, #57	; 0x39
 8011cca:	d068      	beq.n	8011d9e <_dtoa_r+0xbf6>
 8011ccc:	3201      	adds	r2, #1
 8011cce:	e7d5      	b.n	8011c7c <_dtoa_r+0xad4>
 8011cd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	dd07      	ble.n	8011ce6 <_dtoa_r+0xb3e>
 8011cd6:	9b07      	ldr	r3, [sp, #28]
 8011cd8:	2b39      	cmp	r3, #57	; 0x39
 8011cda:	d0ee      	beq.n	8011cba <_dtoa_r+0xb12>
 8011cdc:	9b07      	ldr	r3, [sp, #28]
 8011cde:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011ce0:	3301      	adds	r3, #1
 8011ce2:	7013      	strb	r3, [r2, #0]
 8011ce4:	e737      	b.n	8011b56 <_dtoa_r+0x9ae>
 8011ce6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011ce8:	9a07      	ldr	r2, [sp, #28]
 8011cea:	701a      	strb	r2, [r3, #0]
 8011cec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011cee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011cf0:	4293      	cmp	r3, r2
 8011cf2:	d03e      	beq.n	8011d72 <_dtoa_r+0xbca>
 8011cf4:	2300      	movs	r3, #0
 8011cf6:	220a      	movs	r2, #10
 8011cf8:	9905      	ldr	r1, [sp, #20]
 8011cfa:	0038      	movs	r0, r7
 8011cfc:	f7fe f912 	bl	800ff24 <__multadd>
 8011d00:	2300      	movs	r3, #0
 8011d02:	9005      	str	r0, [sp, #20]
 8011d04:	220a      	movs	r2, #10
 8011d06:	0021      	movs	r1, r4
 8011d08:	0038      	movs	r0, r7
 8011d0a:	42ac      	cmp	r4, r5
 8011d0c:	d106      	bne.n	8011d1c <_dtoa_r+0xb74>
 8011d0e:	f7fe f909 	bl	800ff24 <__multadd>
 8011d12:	0004      	movs	r4, r0
 8011d14:	0005      	movs	r5, r0
 8011d16:	9b08      	ldr	r3, [sp, #32]
 8011d18:	930a      	str	r3, [sp, #40]	; 0x28
 8011d1a:	e778      	b.n	8011c0e <_dtoa_r+0xa66>
 8011d1c:	f7fe f902 	bl	800ff24 <__multadd>
 8011d20:	0029      	movs	r1, r5
 8011d22:	0004      	movs	r4, r0
 8011d24:	2300      	movs	r3, #0
 8011d26:	220a      	movs	r2, #10
 8011d28:	0038      	movs	r0, r7
 8011d2a:	f7fe f8fb 	bl	800ff24 <__multadd>
 8011d2e:	0005      	movs	r5, r0
 8011d30:	e7f1      	b.n	8011d16 <_dtoa_r+0xb6e>
 8011d32:	9b07      	ldr	r3, [sp, #28]
 8011d34:	930c      	str	r3, [sp, #48]	; 0x30
 8011d36:	2400      	movs	r4, #0
 8011d38:	0031      	movs	r1, r6
 8011d3a:	9805      	ldr	r0, [sp, #20]
 8011d3c:	f7ff f9a8 	bl	8011090 <quorem>
 8011d40:	9b06      	ldr	r3, [sp, #24]
 8011d42:	3030      	adds	r0, #48	; 0x30
 8011d44:	5518      	strb	r0, [r3, r4]
 8011d46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011d48:	3401      	adds	r4, #1
 8011d4a:	9007      	str	r0, [sp, #28]
 8011d4c:	42a3      	cmp	r3, r4
 8011d4e:	dd07      	ble.n	8011d60 <_dtoa_r+0xbb8>
 8011d50:	2300      	movs	r3, #0
 8011d52:	220a      	movs	r2, #10
 8011d54:	0038      	movs	r0, r7
 8011d56:	9905      	ldr	r1, [sp, #20]
 8011d58:	f7fe f8e4 	bl	800ff24 <__multadd>
 8011d5c:	9005      	str	r0, [sp, #20]
 8011d5e:	e7eb      	b.n	8011d38 <_dtoa_r+0xb90>
 8011d60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011d62:	2001      	movs	r0, #1
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	dd00      	ble.n	8011d6a <_dtoa_r+0xbc2>
 8011d68:	0018      	movs	r0, r3
 8011d6a:	2400      	movs	r4, #0
 8011d6c:	9b06      	ldr	r3, [sp, #24]
 8011d6e:	181b      	adds	r3, r3, r0
 8011d70:	9308      	str	r3, [sp, #32]
 8011d72:	9905      	ldr	r1, [sp, #20]
 8011d74:	2201      	movs	r2, #1
 8011d76:	0038      	movs	r0, r7
 8011d78:	f7fe face 	bl	8010318 <__lshift>
 8011d7c:	0031      	movs	r1, r6
 8011d7e:	9005      	str	r0, [sp, #20]
 8011d80:	f7fe fb38 	bl	80103f4 <__mcmp>
 8011d84:	2800      	cmp	r0, #0
 8011d86:	dc9b      	bgt.n	8011cc0 <_dtoa_r+0xb18>
 8011d88:	d102      	bne.n	8011d90 <_dtoa_r+0xbe8>
 8011d8a:	9b07      	ldr	r3, [sp, #28]
 8011d8c:	07db      	lsls	r3, r3, #31
 8011d8e:	d497      	bmi.n	8011cc0 <_dtoa_r+0xb18>
 8011d90:	9b08      	ldr	r3, [sp, #32]
 8011d92:	9308      	str	r3, [sp, #32]
 8011d94:	3b01      	subs	r3, #1
 8011d96:	781a      	ldrb	r2, [r3, #0]
 8011d98:	2a30      	cmp	r2, #48	; 0x30
 8011d9a:	d0fa      	beq.n	8011d92 <_dtoa_r+0xbea>
 8011d9c:	e6db      	b.n	8011b56 <_dtoa_r+0x9ae>
 8011d9e:	9a06      	ldr	r2, [sp, #24]
 8011da0:	429a      	cmp	r2, r3
 8011da2:	d18e      	bne.n	8011cc2 <_dtoa_r+0xb1a>
 8011da4:	9b02      	ldr	r3, [sp, #8]
 8011da6:	3301      	adds	r3, #1
 8011da8:	9302      	str	r3, [sp, #8]
 8011daa:	2331      	movs	r3, #49	; 0x31
 8011dac:	e799      	b.n	8011ce2 <_dtoa_r+0xb3a>
 8011dae:	4b09      	ldr	r3, [pc, #36]	; (8011dd4 <_dtoa_r+0xc2c>)
 8011db0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8011db2:	9306      	str	r3, [sp, #24]
 8011db4:	4b08      	ldr	r3, [pc, #32]	; (8011dd8 <_dtoa_r+0xc30>)
 8011db6:	2a00      	cmp	r2, #0
 8011db8:	d001      	beq.n	8011dbe <_dtoa_r+0xc16>
 8011dba:	f7ff fa3f 	bl	801123c <_dtoa_r+0x94>
 8011dbe:	f7ff fa3f 	bl	8011240 <_dtoa_r+0x98>
 8011dc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	dcb6      	bgt.n	8011d36 <_dtoa_r+0xb8e>
 8011dc8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011dca:	2b02      	cmp	r3, #2
 8011dcc:	dd00      	ble.n	8011dd0 <_dtoa_r+0xc28>
 8011dce:	e6ac      	b.n	8011b2a <_dtoa_r+0x982>
 8011dd0:	e7b1      	b.n	8011d36 <_dtoa_r+0xb8e>
 8011dd2:	46c0      	nop			; (mov r8, r8)
 8011dd4:	08013413 	.word	0x08013413
 8011dd8:	0801341b 	.word	0x0801341b

08011ddc <fiprintf>:
 8011ddc:	b40e      	push	{r1, r2, r3}
 8011dde:	b503      	push	{r0, r1, lr}
 8011de0:	0001      	movs	r1, r0
 8011de2:	ab03      	add	r3, sp, #12
 8011de4:	4804      	ldr	r0, [pc, #16]	; (8011df8 <fiprintf+0x1c>)
 8011de6:	cb04      	ldmia	r3!, {r2}
 8011de8:	6800      	ldr	r0, [r0, #0]
 8011dea:	9301      	str	r3, [sp, #4]
 8011dec:	f000 f8b8 	bl	8011f60 <_vfiprintf_r>
 8011df0:	b002      	add	sp, #8
 8011df2:	bc08      	pop	{r3}
 8011df4:	b003      	add	sp, #12
 8011df6:	4718      	bx	r3
 8011df8:	200000b4 	.word	0x200000b4

08011dfc <malloc>:
 8011dfc:	b510      	push	{r4, lr}
 8011dfe:	4b03      	ldr	r3, [pc, #12]	; (8011e0c <malloc+0x10>)
 8011e00:	0001      	movs	r1, r0
 8011e02:	6818      	ldr	r0, [r3, #0]
 8011e04:	f7fe fd58 	bl	80108b8 <_malloc_r>
 8011e08:	bd10      	pop	{r4, pc}
 8011e0a:	46c0      	nop			; (mov r8, r8)
 8011e0c:	200000b4 	.word	0x200000b4

08011e10 <memchr>:
 8011e10:	b2c9      	uxtb	r1, r1
 8011e12:	1882      	adds	r2, r0, r2
 8011e14:	4290      	cmp	r0, r2
 8011e16:	d101      	bne.n	8011e1c <memchr+0xc>
 8011e18:	2000      	movs	r0, #0
 8011e1a:	4770      	bx	lr
 8011e1c:	7803      	ldrb	r3, [r0, #0]
 8011e1e:	428b      	cmp	r3, r1
 8011e20:	d0fb      	beq.n	8011e1a <memchr+0xa>
 8011e22:	3001      	adds	r0, #1
 8011e24:	e7f6      	b.n	8011e14 <memchr+0x4>

08011e26 <memmove>:
 8011e26:	b510      	push	{r4, lr}
 8011e28:	4288      	cmp	r0, r1
 8011e2a:	d902      	bls.n	8011e32 <memmove+0xc>
 8011e2c:	188b      	adds	r3, r1, r2
 8011e2e:	4298      	cmp	r0, r3
 8011e30:	d303      	bcc.n	8011e3a <memmove+0x14>
 8011e32:	2300      	movs	r3, #0
 8011e34:	e007      	b.n	8011e46 <memmove+0x20>
 8011e36:	5c8b      	ldrb	r3, [r1, r2]
 8011e38:	5483      	strb	r3, [r0, r2]
 8011e3a:	3a01      	subs	r2, #1
 8011e3c:	d2fb      	bcs.n	8011e36 <memmove+0x10>
 8011e3e:	bd10      	pop	{r4, pc}
 8011e40:	5ccc      	ldrb	r4, [r1, r3]
 8011e42:	54c4      	strb	r4, [r0, r3]
 8011e44:	3301      	adds	r3, #1
 8011e46:	429a      	cmp	r2, r3
 8011e48:	d1fa      	bne.n	8011e40 <memmove+0x1a>
 8011e4a:	e7f8      	b.n	8011e3e <memmove+0x18>

08011e4c <__malloc_lock>:
 8011e4c:	b510      	push	{r4, lr}
 8011e4e:	4802      	ldr	r0, [pc, #8]	; (8011e58 <__malloc_lock+0xc>)
 8011e50:	f000 fc65 	bl	801271e <__retarget_lock_acquire_recursive>
 8011e54:	bd10      	pop	{r4, pc}
 8011e56:	46c0      	nop			; (mov r8, r8)
 8011e58:	2000106c 	.word	0x2000106c

08011e5c <__malloc_unlock>:
 8011e5c:	b510      	push	{r4, lr}
 8011e5e:	4802      	ldr	r0, [pc, #8]	; (8011e68 <__malloc_unlock+0xc>)
 8011e60:	f000 fc5e 	bl	8012720 <__retarget_lock_release_recursive>
 8011e64:	bd10      	pop	{r4, pc}
 8011e66:	46c0      	nop			; (mov r8, r8)
 8011e68:	2000106c 	.word	0x2000106c

08011e6c <_free_r>:
 8011e6c:	b570      	push	{r4, r5, r6, lr}
 8011e6e:	0005      	movs	r5, r0
 8011e70:	2900      	cmp	r1, #0
 8011e72:	d010      	beq.n	8011e96 <_free_r+0x2a>
 8011e74:	1f0c      	subs	r4, r1, #4
 8011e76:	6823      	ldr	r3, [r4, #0]
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	da00      	bge.n	8011e7e <_free_r+0x12>
 8011e7c:	18e4      	adds	r4, r4, r3
 8011e7e:	0028      	movs	r0, r5
 8011e80:	f7ff ffe4 	bl	8011e4c <__malloc_lock>
 8011e84:	4a1d      	ldr	r2, [pc, #116]	; (8011efc <_free_r+0x90>)
 8011e86:	6813      	ldr	r3, [r2, #0]
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d105      	bne.n	8011e98 <_free_r+0x2c>
 8011e8c:	6063      	str	r3, [r4, #4]
 8011e8e:	6014      	str	r4, [r2, #0]
 8011e90:	0028      	movs	r0, r5
 8011e92:	f7ff ffe3 	bl	8011e5c <__malloc_unlock>
 8011e96:	bd70      	pop	{r4, r5, r6, pc}
 8011e98:	42a3      	cmp	r3, r4
 8011e9a:	d908      	bls.n	8011eae <_free_r+0x42>
 8011e9c:	6821      	ldr	r1, [r4, #0]
 8011e9e:	1860      	adds	r0, r4, r1
 8011ea0:	4283      	cmp	r3, r0
 8011ea2:	d1f3      	bne.n	8011e8c <_free_r+0x20>
 8011ea4:	6818      	ldr	r0, [r3, #0]
 8011ea6:	685b      	ldr	r3, [r3, #4]
 8011ea8:	1841      	adds	r1, r0, r1
 8011eaa:	6021      	str	r1, [r4, #0]
 8011eac:	e7ee      	b.n	8011e8c <_free_r+0x20>
 8011eae:	001a      	movs	r2, r3
 8011eb0:	685b      	ldr	r3, [r3, #4]
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d001      	beq.n	8011eba <_free_r+0x4e>
 8011eb6:	42a3      	cmp	r3, r4
 8011eb8:	d9f9      	bls.n	8011eae <_free_r+0x42>
 8011eba:	6811      	ldr	r1, [r2, #0]
 8011ebc:	1850      	adds	r0, r2, r1
 8011ebe:	42a0      	cmp	r0, r4
 8011ec0:	d10b      	bne.n	8011eda <_free_r+0x6e>
 8011ec2:	6820      	ldr	r0, [r4, #0]
 8011ec4:	1809      	adds	r1, r1, r0
 8011ec6:	1850      	adds	r0, r2, r1
 8011ec8:	6011      	str	r1, [r2, #0]
 8011eca:	4283      	cmp	r3, r0
 8011ecc:	d1e0      	bne.n	8011e90 <_free_r+0x24>
 8011ece:	6818      	ldr	r0, [r3, #0]
 8011ed0:	685b      	ldr	r3, [r3, #4]
 8011ed2:	1841      	adds	r1, r0, r1
 8011ed4:	6011      	str	r1, [r2, #0]
 8011ed6:	6053      	str	r3, [r2, #4]
 8011ed8:	e7da      	b.n	8011e90 <_free_r+0x24>
 8011eda:	42a0      	cmp	r0, r4
 8011edc:	d902      	bls.n	8011ee4 <_free_r+0x78>
 8011ede:	230c      	movs	r3, #12
 8011ee0:	602b      	str	r3, [r5, #0]
 8011ee2:	e7d5      	b.n	8011e90 <_free_r+0x24>
 8011ee4:	6821      	ldr	r1, [r4, #0]
 8011ee6:	1860      	adds	r0, r4, r1
 8011ee8:	4283      	cmp	r3, r0
 8011eea:	d103      	bne.n	8011ef4 <_free_r+0x88>
 8011eec:	6818      	ldr	r0, [r3, #0]
 8011eee:	685b      	ldr	r3, [r3, #4]
 8011ef0:	1841      	adds	r1, r0, r1
 8011ef2:	6021      	str	r1, [r4, #0]
 8011ef4:	6063      	str	r3, [r4, #4]
 8011ef6:	6054      	str	r4, [r2, #4]
 8011ef8:	e7ca      	b.n	8011e90 <_free_r+0x24>
 8011efa:	46c0      	nop			; (mov r8, r8)
 8011efc:	20001060 	.word	0x20001060

08011f00 <_malloc_usable_size_r>:
 8011f00:	1f0b      	subs	r3, r1, #4
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	1f18      	subs	r0, r3, #4
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	da01      	bge.n	8011f0e <_malloc_usable_size_r+0xe>
 8011f0a:	580b      	ldr	r3, [r1, r0]
 8011f0c:	18c0      	adds	r0, r0, r3
 8011f0e:	4770      	bx	lr

08011f10 <__sfputc_r>:
 8011f10:	6893      	ldr	r3, [r2, #8]
 8011f12:	b510      	push	{r4, lr}
 8011f14:	3b01      	subs	r3, #1
 8011f16:	6093      	str	r3, [r2, #8]
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	da04      	bge.n	8011f26 <__sfputc_r+0x16>
 8011f1c:	6994      	ldr	r4, [r2, #24]
 8011f1e:	42a3      	cmp	r3, r4
 8011f20:	db07      	blt.n	8011f32 <__sfputc_r+0x22>
 8011f22:	290a      	cmp	r1, #10
 8011f24:	d005      	beq.n	8011f32 <__sfputc_r+0x22>
 8011f26:	6813      	ldr	r3, [r2, #0]
 8011f28:	1c58      	adds	r0, r3, #1
 8011f2a:	6010      	str	r0, [r2, #0]
 8011f2c:	7019      	strb	r1, [r3, #0]
 8011f2e:	0008      	movs	r0, r1
 8011f30:	bd10      	pop	{r4, pc}
 8011f32:	f000 f94f 	bl	80121d4 <__swbuf_r>
 8011f36:	0001      	movs	r1, r0
 8011f38:	e7f9      	b.n	8011f2e <__sfputc_r+0x1e>

08011f3a <__sfputs_r>:
 8011f3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f3c:	0006      	movs	r6, r0
 8011f3e:	000f      	movs	r7, r1
 8011f40:	0014      	movs	r4, r2
 8011f42:	18d5      	adds	r5, r2, r3
 8011f44:	42ac      	cmp	r4, r5
 8011f46:	d101      	bne.n	8011f4c <__sfputs_r+0x12>
 8011f48:	2000      	movs	r0, #0
 8011f4a:	e007      	b.n	8011f5c <__sfputs_r+0x22>
 8011f4c:	7821      	ldrb	r1, [r4, #0]
 8011f4e:	003a      	movs	r2, r7
 8011f50:	0030      	movs	r0, r6
 8011f52:	f7ff ffdd 	bl	8011f10 <__sfputc_r>
 8011f56:	3401      	adds	r4, #1
 8011f58:	1c43      	adds	r3, r0, #1
 8011f5a:	d1f3      	bne.n	8011f44 <__sfputs_r+0xa>
 8011f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011f60 <_vfiprintf_r>:
 8011f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f62:	b0a1      	sub	sp, #132	; 0x84
 8011f64:	0006      	movs	r6, r0
 8011f66:	000c      	movs	r4, r1
 8011f68:	001f      	movs	r7, r3
 8011f6a:	9203      	str	r2, [sp, #12]
 8011f6c:	2800      	cmp	r0, #0
 8011f6e:	d004      	beq.n	8011f7a <_vfiprintf_r+0x1a>
 8011f70:	6983      	ldr	r3, [r0, #24]
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d101      	bne.n	8011f7a <_vfiprintf_r+0x1a>
 8011f76:	f000 fb31 	bl	80125dc <__sinit>
 8011f7a:	4b8e      	ldr	r3, [pc, #568]	; (80121b4 <_vfiprintf_r+0x254>)
 8011f7c:	429c      	cmp	r4, r3
 8011f7e:	d11c      	bne.n	8011fba <_vfiprintf_r+0x5a>
 8011f80:	6874      	ldr	r4, [r6, #4]
 8011f82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011f84:	07db      	lsls	r3, r3, #31
 8011f86:	d405      	bmi.n	8011f94 <_vfiprintf_r+0x34>
 8011f88:	89a3      	ldrh	r3, [r4, #12]
 8011f8a:	059b      	lsls	r3, r3, #22
 8011f8c:	d402      	bmi.n	8011f94 <_vfiprintf_r+0x34>
 8011f8e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011f90:	f000 fbc5 	bl	801271e <__retarget_lock_acquire_recursive>
 8011f94:	89a3      	ldrh	r3, [r4, #12]
 8011f96:	071b      	lsls	r3, r3, #28
 8011f98:	d502      	bpl.n	8011fa0 <_vfiprintf_r+0x40>
 8011f9a:	6923      	ldr	r3, [r4, #16]
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d11d      	bne.n	8011fdc <_vfiprintf_r+0x7c>
 8011fa0:	0021      	movs	r1, r4
 8011fa2:	0030      	movs	r0, r6
 8011fa4:	f000 f96c 	bl	8012280 <__swsetup_r>
 8011fa8:	2800      	cmp	r0, #0
 8011faa:	d017      	beq.n	8011fdc <_vfiprintf_r+0x7c>
 8011fac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011fae:	07db      	lsls	r3, r3, #31
 8011fb0:	d50d      	bpl.n	8011fce <_vfiprintf_r+0x6e>
 8011fb2:	2001      	movs	r0, #1
 8011fb4:	4240      	negs	r0, r0
 8011fb6:	b021      	add	sp, #132	; 0x84
 8011fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011fba:	4b7f      	ldr	r3, [pc, #508]	; (80121b8 <_vfiprintf_r+0x258>)
 8011fbc:	429c      	cmp	r4, r3
 8011fbe:	d101      	bne.n	8011fc4 <_vfiprintf_r+0x64>
 8011fc0:	68b4      	ldr	r4, [r6, #8]
 8011fc2:	e7de      	b.n	8011f82 <_vfiprintf_r+0x22>
 8011fc4:	4b7d      	ldr	r3, [pc, #500]	; (80121bc <_vfiprintf_r+0x25c>)
 8011fc6:	429c      	cmp	r4, r3
 8011fc8:	d1db      	bne.n	8011f82 <_vfiprintf_r+0x22>
 8011fca:	68f4      	ldr	r4, [r6, #12]
 8011fcc:	e7d9      	b.n	8011f82 <_vfiprintf_r+0x22>
 8011fce:	89a3      	ldrh	r3, [r4, #12]
 8011fd0:	059b      	lsls	r3, r3, #22
 8011fd2:	d4ee      	bmi.n	8011fb2 <_vfiprintf_r+0x52>
 8011fd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011fd6:	f000 fba3 	bl	8012720 <__retarget_lock_release_recursive>
 8011fda:	e7ea      	b.n	8011fb2 <_vfiprintf_r+0x52>
 8011fdc:	2300      	movs	r3, #0
 8011fde:	ad08      	add	r5, sp, #32
 8011fe0:	616b      	str	r3, [r5, #20]
 8011fe2:	3320      	adds	r3, #32
 8011fe4:	766b      	strb	r3, [r5, #25]
 8011fe6:	3310      	adds	r3, #16
 8011fe8:	76ab      	strb	r3, [r5, #26]
 8011fea:	9707      	str	r7, [sp, #28]
 8011fec:	9f03      	ldr	r7, [sp, #12]
 8011fee:	783b      	ldrb	r3, [r7, #0]
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d001      	beq.n	8011ff8 <_vfiprintf_r+0x98>
 8011ff4:	2b25      	cmp	r3, #37	; 0x25
 8011ff6:	d14e      	bne.n	8012096 <_vfiprintf_r+0x136>
 8011ff8:	9b03      	ldr	r3, [sp, #12]
 8011ffa:	1afb      	subs	r3, r7, r3
 8011ffc:	9305      	str	r3, [sp, #20]
 8011ffe:	9b03      	ldr	r3, [sp, #12]
 8012000:	429f      	cmp	r7, r3
 8012002:	d00d      	beq.n	8012020 <_vfiprintf_r+0xc0>
 8012004:	9b05      	ldr	r3, [sp, #20]
 8012006:	0021      	movs	r1, r4
 8012008:	0030      	movs	r0, r6
 801200a:	9a03      	ldr	r2, [sp, #12]
 801200c:	f7ff ff95 	bl	8011f3a <__sfputs_r>
 8012010:	1c43      	adds	r3, r0, #1
 8012012:	d100      	bne.n	8012016 <_vfiprintf_r+0xb6>
 8012014:	e0b5      	b.n	8012182 <_vfiprintf_r+0x222>
 8012016:	696a      	ldr	r2, [r5, #20]
 8012018:	9b05      	ldr	r3, [sp, #20]
 801201a:	4694      	mov	ip, r2
 801201c:	4463      	add	r3, ip
 801201e:	616b      	str	r3, [r5, #20]
 8012020:	783b      	ldrb	r3, [r7, #0]
 8012022:	2b00      	cmp	r3, #0
 8012024:	d100      	bne.n	8012028 <_vfiprintf_r+0xc8>
 8012026:	e0ac      	b.n	8012182 <_vfiprintf_r+0x222>
 8012028:	2201      	movs	r2, #1
 801202a:	1c7b      	adds	r3, r7, #1
 801202c:	9303      	str	r3, [sp, #12]
 801202e:	2300      	movs	r3, #0
 8012030:	4252      	negs	r2, r2
 8012032:	606a      	str	r2, [r5, #4]
 8012034:	a904      	add	r1, sp, #16
 8012036:	3254      	adds	r2, #84	; 0x54
 8012038:	1852      	adds	r2, r2, r1
 801203a:	602b      	str	r3, [r5, #0]
 801203c:	60eb      	str	r3, [r5, #12]
 801203e:	60ab      	str	r3, [r5, #8]
 8012040:	7013      	strb	r3, [r2, #0]
 8012042:	65ab      	str	r3, [r5, #88]	; 0x58
 8012044:	9b03      	ldr	r3, [sp, #12]
 8012046:	2205      	movs	r2, #5
 8012048:	7819      	ldrb	r1, [r3, #0]
 801204a:	485d      	ldr	r0, [pc, #372]	; (80121c0 <_vfiprintf_r+0x260>)
 801204c:	f7ff fee0 	bl	8011e10 <memchr>
 8012050:	9b03      	ldr	r3, [sp, #12]
 8012052:	1c5f      	adds	r7, r3, #1
 8012054:	2800      	cmp	r0, #0
 8012056:	d120      	bne.n	801209a <_vfiprintf_r+0x13a>
 8012058:	682a      	ldr	r2, [r5, #0]
 801205a:	06d3      	lsls	r3, r2, #27
 801205c:	d504      	bpl.n	8012068 <_vfiprintf_r+0x108>
 801205e:	2353      	movs	r3, #83	; 0x53
 8012060:	a904      	add	r1, sp, #16
 8012062:	185b      	adds	r3, r3, r1
 8012064:	2120      	movs	r1, #32
 8012066:	7019      	strb	r1, [r3, #0]
 8012068:	0713      	lsls	r3, r2, #28
 801206a:	d504      	bpl.n	8012076 <_vfiprintf_r+0x116>
 801206c:	2353      	movs	r3, #83	; 0x53
 801206e:	a904      	add	r1, sp, #16
 8012070:	185b      	adds	r3, r3, r1
 8012072:	212b      	movs	r1, #43	; 0x2b
 8012074:	7019      	strb	r1, [r3, #0]
 8012076:	9b03      	ldr	r3, [sp, #12]
 8012078:	781b      	ldrb	r3, [r3, #0]
 801207a:	2b2a      	cmp	r3, #42	; 0x2a
 801207c:	d016      	beq.n	80120ac <_vfiprintf_r+0x14c>
 801207e:	2100      	movs	r1, #0
 8012080:	68eb      	ldr	r3, [r5, #12]
 8012082:	9f03      	ldr	r7, [sp, #12]
 8012084:	783a      	ldrb	r2, [r7, #0]
 8012086:	1c78      	adds	r0, r7, #1
 8012088:	3a30      	subs	r2, #48	; 0x30
 801208a:	4684      	mov	ip, r0
 801208c:	2a09      	cmp	r2, #9
 801208e:	d94f      	bls.n	8012130 <_vfiprintf_r+0x1d0>
 8012090:	2900      	cmp	r1, #0
 8012092:	d111      	bne.n	80120b8 <_vfiprintf_r+0x158>
 8012094:	e017      	b.n	80120c6 <_vfiprintf_r+0x166>
 8012096:	3701      	adds	r7, #1
 8012098:	e7a9      	b.n	8011fee <_vfiprintf_r+0x8e>
 801209a:	4b49      	ldr	r3, [pc, #292]	; (80121c0 <_vfiprintf_r+0x260>)
 801209c:	682a      	ldr	r2, [r5, #0]
 801209e:	1ac0      	subs	r0, r0, r3
 80120a0:	2301      	movs	r3, #1
 80120a2:	4083      	lsls	r3, r0
 80120a4:	4313      	orrs	r3, r2
 80120a6:	602b      	str	r3, [r5, #0]
 80120a8:	9703      	str	r7, [sp, #12]
 80120aa:	e7cb      	b.n	8012044 <_vfiprintf_r+0xe4>
 80120ac:	9b07      	ldr	r3, [sp, #28]
 80120ae:	1d19      	adds	r1, r3, #4
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	9107      	str	r1, [sp, #28]
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	db01      	blt.n	80120bc <_vfiprintf_r+0x15c>
 80120b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80120ba:	e004      	b.n	80120c6 <_vfiprintf_r+0x166>
 80120bc:	425b      	negs	r3, r3
 80120be:	60eb      	str	r3, [r5, #12]
 80120c0:	2302      	movs	r3, #2
 80120c2:	4313      	orrs	r3, r2
 80120c4:	602b      	str	r3, [r5, #0]
 80120c6:	783b      	ldrb	r3, [r7, #0]
 80120c8:	2b2e      	cmp	r3, #46	; 0x2e
 80120ca:	d10a      	bne.n	80120e2 <_vfiprintf_r+0x182>
 80120cc:	787b      	ldrb	r3, [r7, #1]
 80120ce:	2b2a      	cmp	r3, #42	; 0x2a
 80120d0:	d137      	bne.n	8012142 <_vfiprintf_r+0x1e2>
 80120d2:	9b07      	ldr	r3, [sp, #28]
 80120d4:	3702      	adds	r7, #2
 80120d6:	1d1a      	adds	r2, r3, #4
 80120d8:	681b      	ldr	r3, [r3, #0]
 80120da:	9207      	str	r2, [sp, #28]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	db2d      	blt.n	801213c <_vfiprintf_r+0x1dc>
 80120e0:	9309      	str	r3, [sp, #36]	; 0x24
 80120e2:	2203      	movs	r2, #3
 80120e4:	7839      	ldrb	r1, [r7, #0]
 80120e6:	4837      	ldr	r0, [pc, #220]	; (80121c4 <_vfiprintf_r+0x264>)
 80120e8:	f7ff fe92 	bl	8011e10 <memchr>
 80120ec:	2800      	cmp	r0, #0
 80120ee:	d007      	beq.n	8012100 <_vfiprintf_r+0x1a0>
 80120f0:	4b34      	ldr	r3, [pc, #208]	; (80121c4 <_vfiprintf_r+0x264>)
 80120f2:	682a      	ldr	r2, [r5, #0]
 80120f4:	1ac0      	subs	r0, r0, r3
 80120f6:	2340      	movs	r3, #64	; 0x40
 80120f8:	4083      	lsls	r3, r0
 80120fa:	4313      	orrs	r3, r2
 80120fc:	3701      	adds	r7, #1
 80120fe:	602b      	str	r3, [r5, #0]
 8012100:	7839      	ldrb	r1, [r7, #0]
 8012102:	1c7b      	adds	r3, r7, #1
 8012104:	2206      	movs	r2, #6
 8012106:	4830      	ldr	r0, [pc, #192]	; (80121c8 <_vfiprintf_r+0x268>)
 8012108:	9303      	str	r3, [sp, #12]
 801210a:	7629      	strb	r1, [r5, #24]
 801210c:	f7ff fe80 	bl	8011e10 <memchr>
 8012110:	2800      	cmp	r0, #0
 8012112:	d045      	beq.n	80121a0 <_vfiprintf_r+0x240>
 8012114:	4b2d      	ldr	r3, [pc, #180]	; (80121cc <_vfiprintf_r+0x26c>)
 8012116:	2b00      	cmp	r3, #0
 8012118:	d127      	bne.n	801216a <_vfiprintf_r+0x20a>
 801211a:	2207      	movs	r2, #7
 801211c:	9b07      	ldr	r3, [sp, #28]
 801211e:	3307      	adds	r3, #7
 8012120:	4393      	bics	r3, r2
 8012122:	3308      	adds	r3, #8
 8012124:	9307      	str	r3, [sp, #28]
 8012126:	696b      	ldr	r3, [r5, #20]
 8012128:	9a04      	ldr	r2, [sp, #16]
 801212a:	189b      	adds	r3, r3, r2
 801212c:	616b      	str	r3, [r5, #20]
 801212e:	e75d      	b.n	8011fec <_vfiprintf_r+0x8c>
 8012130:	210a      	movs	r1, #10
 8012132:	434b      	muls	r3, r1
 8012134:	4667      	mov	r7, ip
 8012136:	189b      	adds	r3, r3, r2
 8012138:	3909      	subs	r1, #9
 801213a:	e7a3      	b.n	8012084 <_vfiprintf_r+0x124>
 801213c:	2301      	movs	r3, #1
 801213e:	425b      	negs	r3, r3
 8012140:	e7ce      	b.n	80120e0 <_vfiprintf_r+0x180>
 8012142:	2300      	movs	r3, #0
 8012144:	001a      	movs	r2, r3
 8012146:	3701      	adds	r7, #1
 8012148:	606b      	str	r3, [r5, #4]
 801214a:	7839      	ldrb	r1, [r7, #0]
 801214c:	1c78      	adds	r0, r7, #1
 801214e:	3930      	subs	r1, #48	; 0x30
 8012150:	4684      	mov	ip, r0
 8012152:	2909      	cmp	r1, #9
 8012154:	d903      	bls.n	801215e <_vfiprintf_r+0x1fe>
 8012156:	2b00      	cmp	r3, #0
 8012158:	d0c3      	beq.n	80120e2 <_vfiprintf_r+0x182>
 801215a:	9209      	str	r2, [sp, #36]	; 0x24
 801215c:	e7c1      	b.n	80120e2 <_vfiprintf_r+0x182>
 801215e:	230a      	movs	r3, #10
 8012160:	435a      	muls	r2, r3
 8012162:	4667      	mov	r7, ip
 8012164:	1852      	adds	r2, r2, r1
 8012166:	3b09      	subs	r3, #9
 8012168:	e7ef      	b.n	801214a <_vfiprintf_r+0x1ea>
 801216a:	ab07      	add	r3, sp, #28
 801216c:	9300      	str	r3, [sp, #0]
 801216e:	0022      	movs	r2, r4
 8012170:	0029      	movs	r1, r5
 8012172:	0030      	movs	r0, r6
 8012174:	4b16      	ldr	r3, [pc, #88]	; (80121d0 <_vfiprintf_r+0x270>)
 8012176:	e000      	b.n	801217a <_vfiprintf_r+0x21a>
 8012178:	bf00      	nop
 801217a:	9004      	str	r0, [sp, #16]
 801217c:	9b04      	ldr	r3, [sp, #16]
 801217e:	3301      	adds	r3, #1
 8012180:	d1d1      	bne.n	8012126 <_vfiprintf_r+0x1c6>
 8012182:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012184:	07db      	lsls	r3, r3, #31
 8012186:	d405      	bmi.n	8012194 <_vfiprintf_r+0x234>
 8012188:	89a3      	ldrh	r3, [r4, #12]
 801218a:	059b      	lsls	r3, r3, #22
 801218c:	d402      	bmi.n	8012194 <_vfiprintf_r+0x234>
 801218e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012190:	f000 fac6 	bl	8012720 <__retarget_lock_release_recursive>
 8012194:	89a3      	ldrh	r3, [r4, #12]
 8012196:	065b      	lsls	r3, r3, #25
 8012198:	d500      	bpl.n	801219c <_vfiprintf_r+0x23c>
 801219a:	e70a      	b.n	8011fb2 <_vfiprintf_r+0x52>
 801219c:	980d      	ldr	r0, [sp, #52]	; 0x34
 801219e:	e70a      	b.n	8011fb6 <_vfiprintf_r+0x56>
 80121a0:	ab07      	add	r3, sp, #28
 80121a2:	9300      	str	r3, [sp, #0]
 80121a4:	0022      	movs	r2, r4
 80121a6:	0029      	movs	r1, r5
 80121a8:	0030      	movs	r0, r6
 80121aa:	4b09      	ldr	r3, [pc, #36]	; (80121d0 <_vfiprintf_r+0x270>)
 80121ac:	f7fe fdfc 	bl	8010da8 <_printf_i>
 80121b0:	e7e3      	b.n	801217a <_vfiprintf_r+0x21a>
 80121b2:	46c0      	nop			; (mov r8, r8)
 80121b4:	080134a0 	.word	0x080134a0
 80121b8:	080134c0 	.word	0x080134c0
 80121bc:	08013480 	.word	0x08013480
 80121c0:	080133a4 	.word	0x080133a4
 80121c4:	080133aa 	.word	0x080133aa
 80121c8:	080133ae 	.word	0x080133ae
 80121cc:	00000000 	.word	0x00000000
 80121d0:	08011f3b 	.word	0x08011f3b

080121d4 <__swbuf_r>:
 80121d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121d6:	0005      	movs	r5, r0
 80121d8:	000e      	movs	r6, r1
 80121da:	0014      	movs	r4, r2
 80121dc:	2800      	cmp	r0, #0
 80121de:	d004      	beq.n	80121ea <__swbuf_r+0x16>
 80121e0:	6983      	ldr	r3, [r0, #24]
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d101      	bne.n	80121ea <__swbuf_r+0x16>
 80121e6:	f000 f9f9 	bl	80125dc <__sinit>
 80121ea:	4b22      	ldr	r3, [pc, #136]	; (8012274 <__swbuf_r+0xa0>)
 80121ec:	429c      	cmp	r4, r3
 80121ee:	d12e      	bne.n	801224e <__swbuf_r+0x7a>
 80121f0:	686c      	ldr	r4, [r5, #4]
 80121f2:	69a3      	ldr	r3, [r4, #24]
 80121f4:	60a3      	str	r3, [r4, #8]
 80121f6:	89a3      	ldrh	r3, [r4, #12]
 80121f8:	071b      	lsls	r3, r3, #28
 80121fa:	d532      	bpl.n	8012262 <__swbuf_r+0x8e>
 80121fc:	6923      	ldr	r3, [r4, #16]
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d02f      	beq.n	8012262 <__swbuf_r+0x8e>
 8012202:	6823      	ldr	r3, [r4, #0]
 8012204:	6922      	ldr	r2, [r4, #16]
 8012206:	b2f7      	uxtb	r7, r6
 8012208:	1a98      	subs	r0, r3, r2
 801220a:	6963      	ldr	r3, [r4, #20]
 801220c:	b2f6      	uxtb	r6, r6
 801220e:	4283      	cmp	r3, r0
 8012210:	dc05      	bgt.n	801221e <__swbuf_r+0x4a>
 8012212:	0021      	movs	r1, r4
 8012214:	0028      	movs	r0, r5
 8012216:	f000 f93f 	bl	8012498 <_fflush_r>
 801221a:	2800      	cmp	r0, #0
 801221c:	d127      	bne.n	801226e <__swbuf_r+0x9a>
 801221e:	68a3      	ldr	r3, [r4, #8]
 8012220:	3001      	adds	r0, #1
 8012222:	3b01      	subs	r3, #1
 8012224:	60a3      	str	r3, [r4, #8]
 8012226:	6823      	ldr	r3, [r4, #0]
 8012228:	1c5a      	adds	r2, r3, #1
 801222a:	6022      	str	r2, [r4, #0]
 801222c:	701f      	strb	r7, [r3, #0]
 801222e:	6963      	ldr	r3, [r4, #20]
 8012230:	4283      	cmp	r3, r0
 8012232:	d004      	beq.n	801223e <__swbuf_r+0x6a>
 8012234:	89a3      	ldrh	r3, [r4, #12]
 8012236:	07db      	lsls	r3, r3, #31
 8012238:	d507      	bpl.n	801224a <__swbuf_r+0x76>
 801223a:	2e0a      	cmp	r6, #10
 801223c:	d105      	bne.n	801224a <__swbuf_r+0x76>
 801223e:	0021      	movs	r1, r4
 8012240:	0028      	movs	r0, r5
 8012242:	f000 f929 	bl	8012498 <_fflush_r>
 8012246:	2800      	cmp	r0, #0
 8012248:	d111      	bne.n	801226e <__swbuf_r+0x9a>
 801224a:	0030      	movs	r0, r6
 801224c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801224e:	4b0a      	ldr	r3, [pc, #40]	; (8012278 <__swbuf_r+0xa4>)
 8012250:	429c      	cmp	r4, r3
 8012252:	d101      	bne.n	8012258 <__swbuf_r+0x84>
 8012254:	68ac      	ldr	r4, [r5, #8]
 8012256:	e7cc      	b.n	80121f2 <__swbuf_r+0x1e>
 8012258:	4b08      	ldr	r3, [pc, #32]	; (801227c <__swbuf_r+0xa8>)
 801225a:	429c      	cmp	r4, r3
 801225c:	d1c9      	bne.n	80121f2 <__swbuf_r+0x1e>
 801225e:	68ec      	ldr	r4, [r5, #12]
 8012260:	e7c7      	b.n	80121f2 <__swbuf_r+0x1e>
 8012262:	0021      	movs	r1, r4
 8012264:	0028      	movs	r0, r5
 8012266:	f000 f80b 	bl	8012280 <__swsetup_r>
 801226a:	2800      	cmp	r0, #0
 801226c:	d0c9      	beq.n	8012202 <__swbuf_r+0x2e>
 801226e:	2601      	movs	r6, #1
 8012270:	4276      	negs	r6, r6
 8012272:	e7ea      	b.n	801224a <__swbuf_r+0x76>
 8012274:	080134a0 	.word	0x080134a0
 8012278:	080134c0 	.word	0x080134c0
 801227c:	08013480 	.word	0x08013480

08012280 <__swsetup_r>:
 8012280:	4b37      	ldr	r3, [pc, #220]	; (8012360 <__swsetup_r+0xe0>)
 8012282:	b570      	push	{r4, r5, r6, lr}
 8012284:	681d      	ldr	r5, [r3, #0]
 8012286:	0006      	movs	r6, r0
 8012288:	000c      	movs	r4, r1
 801228a:	2d00      	cmp	r5, #0
 801228c:	d005      	beq.n	801229a <__swsetup_r+0x1a>
 801228e:	69ab      	ldr	r3, [r5, #24]
 8012290:	2b00      	cmp	r3, #0
 8012292:	d102      	bne.n	801229a <__swsetup_r+0x1a>
 8012294:	0028      	movs	r0, r5
 8012296:	f000 f9a1 	bl	80125dc <__sinit>
 801229a:	4b32      	ldr	r3, [pc, #200]	; (8012364 <__swsetup_r+0xe4>)
 801229c:	429c      	cmp	r4, r3
 801229e:	d10f      	bne.n	80122c0 <__swsetup_r+0x40>
 80122a0:	686c      	ldr	r4, [r5, #4]
 80122a2:	230c      	movs	r3, #12
 80122a4:	5ee2      	ldrsh	r2, [r4, r3]
 80122a6:	b293      	uxth	r3, r2
 80122a8:	0711      	lsls	r1, r2, #28
 80122aa:	d42d      	bmi.n	8012308 <__swsetup_r+0x88>
 80122ac:	06d9      	lsls	r1, r3, #27
 80122ae:	d411      	bmi.n	80122d4 <__swsetup_r+0x54>
 80122b0:	2309      	movs	r3, #9
 80122b2:	2001      	movs	r0, #1
 80122b4:	6033      	str	r3, [r6, #0]
 80122b6:	3337      	adds	r3, #55	; 0x37
 80122b8:	4313      	orrs	r3, r2
 80122ba:	81a3      	strh	r3, [r4, #12]
 80122bc:	4240      	negs	r0, r0
 80122be:	bd70      	pop	{r4, r5, r6, pc}
 80122c0:	4b29      	ldr	r3, [pc, #164]	; (8012368 <__swsetup_r+0xe8>)
 80122c2:	429c      	cmp	r4, r3
 80122c4:	d101      	bne.n	80122ca <__swsetup_r+0x4a>
 80122c6:	68ac      	ldr	r4, [r5, #8]
 80122c8:	e7eb      	b.n	80122a2 <__swsetup_r+0x22>
 80122ca:	4b28      	ldr	r3, [pc, #160]	; (801236c <__swsetup_r+0xec>)
 80122cc:	429c      	cmp	r4, r3
 80122ce:	d1e8      	bne.n	80122a2 <__swsetup_r+0x22>
 80122d0:	68ec      	ldr	r4, [r5, #12]
 80122d2:	e7e6      	b.n	80122a2 <__swsetup_r+0x22>
 80122d4:	075b      	lsls	r3, r3, #29
 80122d6:	d513      	bpl.n	8012300 <__swsetup_r+0x80>
 80122d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80122da:	2900      	cmp	r1, #0
 80122dc:	d008      	beq.n	80122f0 <__swsetup_r+0x70>
 80122de:	0023      	movs	r3, r4
 80122e0:	3344      	adds	r3, #68	; 0x44
 80122e2:	4299      	cmp	r1, r3
 80122e4:	d002      	beq.n	80122ec <__swsetup_r+0x6c>
 80122e6:	0030      	movs	r0, r6
 80122e8:	f7ff fdc0 	bl	8011e6c <_free_r>
 80122ec:	2300      	movs	r3, #0
 80122ee:	6363      	str	r3, [r4, #52]	; 0x34
 80122f0:	2224      	movs	r2, #36	; 0x24
 80122f2:	89a3      	ldrh	r3, [r4, #12]
 80122f4:	4393      	bics	r3, r2
 80122f6:	81a3      	strh	r3, [r4, #12]
 80122f8:	2300      	movs	r3, #0
 80122fa:	6063      	str	r3, [r4, #4]
 80122fc:	6923      	ldr	r3, [r4, #16]
 80122fe:	6023      	str	r3, [r4, #0]
 8012300:	2308      	movs	r3, #8
 8012302:	89a2      	ldrh	r2, [r4, #12]
 8012304:	4313      	orrs	r3, r2
 8012306:	81a3      	strh	r3, [r4, #12]
 8012308:	6923      	ldr	r3, [r4, #16]
 801230a:	2b00      	cmp	r3, #0
 801230c:	d10b      	bne.n	8012326 <__swsetup_r+0xa6>
 801230e:	21a0      	movs	r1, #160	; 0xa0
 8012310:	2280      	movs	r2, #128	; 0x80
 8012312:	89a3      	ldrh	r3, [r4, #12]
 8012314:	0089      	lsls	r1, r1, #2
 8012316:	0092      	lsls	r2, r2, #2
 8012318:	400b      	ands	r3, r1
 801231a:	4293      	cmp	r3, r2
 801231c:	d003      	beq.n	8012326 <__swsetup_r+0xa6>
 801231e:	0021      	movs	r1, r4
 8012320:	0030      	movs	r0, r6
 8012322:	f000 fa27 	bl	8012774 <__smakebuf_r>
 8012326:	220c      	movs	r2, #12
 8012328:	5ea3      	ldrsh	r3, [r4, r2]
 801232a:	2001      	movs	r0, #1
 801232c:	001a      	movs	r2, r3
 801232e:	b299      	uxth	r1, r3
 8012330:	4002      	ands	r2, r0
 8012332:	4203      	tst	r3, r0
 8012334:	d00f      	beq.n	8012356 <__swsetup_r+0xd6>
 8012336:	2200      	movs	r2, #0
 8012338:	60a2      	str	r2, [r4, #8]
 801233a:	6962      	ldr	r2, [r4, #20]
 801233c:	4252      	negs	r2, r2
 801233e:	61a2      	str	r2, [r4, #24]
 8012340:	2000      	movs	r0, #0
 8012342:	6922      	ldr	r2, [r4, #16]
 8012344:	4282      	cmp	r2, r0
 8012346:	d1ba      	bne.n	80122be <__swsetup_r+0x3e>
 8012348:	060a      	lsls	r2, r1, #24
 801234a:	d5b8      	bpl.n	80122be <__swsetup_r+0x3e>
 801234c:	2240      	movs	r2, #64	; 0x40
 801234e:	4313      	orrs	r3, r2
 8012350:	81a3      	strh	r3, [r4, #12]
 8012352:	3801      	subs	r0, #1
 8012354:	e7b3      	b.n	80122be <__swsetup_r+0x3e>
 8012356:	0788      	lsls	r0, r1, #30
 8012358:	d400      	bmi.n	801235c <__swsetup_r+0xdc>
 801235a:	6962      	ldr	r2, [r4, #20]
 801235c:	60a2      	str	r2, [r4, #8]
 801235e:	e7ef      	b.n	8012340 <__swsetup_r+0xc0>
 8012360:	200000b4 	.word	0x200000b4
 8012364:	080134a0 	.word	0x080134a0
 8012368:	080134c0 	.word	0x080134c0
 801236c:	08013480 	.word	0x08013480

08012370 <abort>:
 8012370:	2006      	movs	r0, #6
 8012372:	b510      	push	{r4, lr}
 8012374:	f000 fa6c 	bl	8012850 <raise>
 8012378:	2001      	movs	r0, #1
 801237a:	f7f5 fe9f 	bl	80080bc <_exit>
	...

08012380 <__sflush_r>:
 8012380:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012382:	898b      	ldrh	r3, [r1, #12]
 8012384:	0005      	movs	r5, r0
 8012386:	000c      	movs	r4, r1
 8012388:	071a      	lsls	r2, r3, #28
 801238a:	d45f      	bmi.n	801244c <__sflush_r+0xcc>
 801238c:	684a      	ldr	r2, [r1, #4]
 801238e:	2a00      	cmp	r2, #0
 8012390:	dc04      	bgt.n	801239c <__sflush_r+0x1c>
 8012392:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8012394:	2a00      	cmp	r2, #0
 8012396:	dc01      	bgt.n	801239c <__sflush_r+0x1c>
 8012398:	2000      	movs	r0, #0
 801239a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801239c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 801239e:	2f00      	cmp	r7, #0
 80123a0:	d0fa      	beq.n	8012398 <__sflush_r+0x18>
 80123a2:	2200      	movs	r2, #0
 80123a4:	2180      	movs	r1, #128	; 0x80
 80123a6:	682e      	ldr	r6, [r5, #0]
 80123a8:	602a      	str	r2, [r5, #0]
 80123aa:	001a      	movs	r2, r3
 80123ac:	0149      	lsls	r1, r1, #5
 80123ae:	400a      	ands	r2, r1
 80123b0:	420b      	tst	r3, r1
 80123b2:	d034      	beq.n	801241e <__sflush_r+0x9e>
 80123b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80123b6:	89a3      	ldrh	r3, [r4, #12]
 80123b8:	075b      	lsls	r3, r3, #29
 80123ba:	d506      	bpl.n	80123ca <__sflush_r+0x4a>
 80123bc:	6863      	ldr	r3, [r4, #4]
 80123be:	1ac0      	subs	r0, r0, r3
 80123c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d001      	beq.n	80123ca <__sflush_r+0x4a>
 80123c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80123c8:	1ac0      	subs	r0, r0, r3
 80123ca:	0002      	movs	r2, r0
 80123cc:	6a21      	ldr	r1, [r4, #32]
 80123ce:	2300      	movs	r3, #0
 80123d0:	0028      	movs	r0, r5
 80123d2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80123d4:	47b8      	blx	r7
 80123d6:	89a1      	ldrh	r1, [r4, #12]
 80123d8:	1c43      	adds	r3, r0, #1
 80123da:	d106      	bne.n	80123ea <__sflush_r+0x6a>
 80123dc:	682b      	ldr	r3, [r5, #0]
 80123de:	2b1d      	cmp	r3, #29
 80123e0:	d831      	bhi.n	8012446 <__sflush_r+0xc6>
 80123e2:	4a2c      	ldr	r2, [pc, #176]	; (8012494 <__sflush_r+0x114>)
 80123e4:	40da      	lsrs	r2, r3
 80123e6:	07d3      	lsls	r3, r2, #31
 80123e8:	d52d      	bpl.n	8012446 <__sflush_r+0xc6>
 80123ea:	2300      	movs	r3, #0
 80123ec:	6063      	str	r3, [r4, #4]
 80123ee:	6923      	ldr	r3, [r4, #16]
 80123f0:	6023      	str	r3, [r4, #0]
 80123f2:	04cb      	lsls	r3, r1, #19
 80123f4:	d505      	bpl.n	8012402 <__sflush_r+0x82>
 80123f6:	1c43      	adds	r3, r0, #1
 80123f8:	d102      	bne.n	8012400 <__sflush_r+0x80>
 80123fa:	682b      	ldr	r3, [r5, #0]
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d100      	bne.n	8012402 <__sflush_r+0x82>
 8012400:	6560      	str	r0, [r4, #84]	; 0x54
 8012402:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012404:	602e      	str	r6, [r5, #0]
 8012406:	2900      	cmp	r1, #0
 8012408:	d0c6      	beq.n	8012398 <__sflush_r+0x18>
 801240a:	0023      	movs	r3, r4
 801240c:	3344      	adds	r3, #68	; 0x44
 801240e:	4299      	cmp	r1, r3
 8012410:	d002      	beq.n	8012418 <__sflush_r+0x98>
 8012412:	0028      	movs	r0, r5
 8012414:	f7ff fd2a 	bl	8011e6c <_free_r>
 8012418:	2000      	movs	r0, #0
 801241a:	6360      	str	r0, [r4, #52]	; 0x34
 801241c:	e7bd      	b.n	801239a <__sflush_r+0x1a>
 801241e:	2301      	movs	r3, #1
 8012420:	0028      	movs	r0, r5
 8012422:	6a21      	ldr	r1, [r4, #32]
 8012424:	47b8      	blx	r7
 8012426:	1c43      	adds	r3, r0, #1
 8012428:	d1c5      	bne.n	80123b6 <__sflush_r+0x36>
 801242a:	682b      	ldr	r3, [r5, #0]
 801242c:	2b00      	cmp	r3, #0
 801242e:	d0c2      	beq.n	80123b6 <__sflush_r+0x36>
 8012430:	2b1d      	cmp	r3, #29
 8012432:	d001      	beq.n	8012438 <__sflush_r+0xb8>
 8012434:	2b16      	cmp	r3, #22
 8012436:	d101      	bne.n	801243c <__sflush_r+0xbc>
 8012438:	602e      	str	r6, [r5, #0]
 801243a:	e7ad      	b.n	8012398 <__sflush_r+0x18>
 801243c:	2340      	movs	r3, #64	; 0x40
 801243e:	89a2      	ldrh	r2, [r4, #12]
 8012440:	4313      	orrs	r3, r2
 8012442:	81a3      	strh	r3, [r4, #12]
 8012444:	e7a9      	b.n	801239a <__sflush_r+0x1a>
 8012446:	2340      	movs	r3, #64	; 0x40
 8012448:	430b      	orrs	r3, r1
 801244a:	e7fa      	b.n	8012442 <__sflush_r+0xc2>
 801244c:	690f      	ldr	r7, [r1, #16]
 801244e:	2f00      	cmp	r7, #0
 8012450:	d0a2      	beq.n	8012398 <__sflush_r+0x18>
 8012452:	680a      	ldr	r2, [r1, #0]
 8012454:	600f      	str	r7, [r1, #0]
 8012456:	1bd2      	subs	r2, r2, r7
 8012458:	9201      	str	r2, [sp, #4]
 801245a:	2200      	movs	r2, #0
 801245c:	079b      	lsls	r3, r3, #30
 801245e:	d100      	bne.n	8012462 <__sflush_r+0xe2>
 8012460:	694a      	ldr	r2, [r1, #20]
 8012462:	60a2      	str	r2, [r4, #8]
 8012464:	9b01      	ldr	r3, [sp, #4]
 8012466:	2b00      	cmp	r3, #0
 8012468:	dc00      	bgt.n	801246c <__sflush_r+0xec>
 801246a:	e795      	b.n	8012398 <__sflush_r+0x18>
 801246c:	003a      	movs	r2, r7
 801246e:	0028      	movs	r0, r5
 8012470:	9b01      	ldr	r3, [sp, #4]
 8012472:	6a21      	ldr	r1, [r4, #32]
 8012474:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012476:	47b0      	blx	r6
 8012478:	2800      	cmp	r0, #0
 801247a:	dc06      	bgt.n	801248a <__sflush_r+0x10a>
 801247c:	2340      	movs	r3, #64	; 0x40
 801247e:	2001      	movs	r0, #1
 8012480:	89a2      	ldrh	r2, [r4, #12]
 8012482:	4240      	negs	r0, r0
 8012484:	4313      	orrs	r3, r2
 8012486:	81a3      	strh	r3, [r4, #12]
 8012488:	e787      	b.n	801239a <__sflush_r+0x1a>
 801248a:	9b01      	ldr	r3, [sp, #4]
 801248c:	183f      	adds	r7, r7, r0
 801248e:	1a1b      	subs	r3, r3, r0
 8012490:	9301      	str	r3, [sp, #4]
 8012492:	e7e7      	b.n	8012464 <__sflush_r+0xe4>
 8012494:	20400001 	.word	0x20400001

08012498 <_fflush_r>:
 8012498:	690b      	ldr	r3, [r1, #16]
 801249a:	b570      	push	{r4, r5, r6, lr}
 801249c:	0005      	movs	r5, r0
 801249e:	000c      	movs	r4, r1
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d102      	bne.n	80124aa <_fflush_r+0x12>
 80124a4:	2500      	movs	r5, #0
 80124a6:	0028      	movs	r0, r5
 80124a8:	bd70      	pop	{r4, r5, r6, pc}
 80124aa:	2800      	cmp	r0, #0
 80124ac:	d004      	beq.n	80124b8 <_fflush_r+0x20>
 80124ae:	6983      	ldr	r3, [r0, #24]
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d101      	bne.n	80124b8 <_fflush_r+0x20>
 80124b4:	f000 f892 	bl	80125dc <__sinit>
 80124b8:	4b14      	ldr	r3, [pc, #80]	; (801250c <_fflush_r+0x74>)
 80124ba:	429c      	cmp	r4, r3
 80124bc:	d11b      	bne.n	80124f6 <_fflush_r+0x5e>
 80124be:	686c      	ldr	r4, [r5, #4]
 80124c0:	220c      	movs	r2, #12
 80124c2:	5ea3      	ldrsh	r3, [r4, r2]
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d0ed      	beq.n	80124a4 <_fflush_r+0xc>
 80124c8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80124ca:	07d2      	lsls	r2, r2, #31
 80124cc:	d404      	bmi.n	80124d8 <_fflush_r+0x40>
 80124ce:	059b      	lsls	r3, r3, #22
 80124d0:	d402      	bmi.n	80124d8 <_fflush_r+0x40>
 80124d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80124d4:	f000 f923 	bl	801271e <__retarget_lock_acquire_recursive>
 80124d8:	0028      	movs	r0, r5
 80124da:	0021      	movs	r1, r4
 80124dc:	f7ff ff50 	bl	8012380 <__sflush_r>
 80124e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80124e2:	0005      	movs	r5, r0
 80124e4:	07db      	lsls	r3, r3, #31
 80124e6:	d4de      	bmi.n	80124a6 <_fflush_r+0xe>
 80124e8:	89a3      	ldrh	r3, [r4, #12]
 80124ea:	059b      	lsls	r3, r3, #22
 80124ec:	d4db      	bmi.n	80124a6 <_fflush_r+0xe>
 80124ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80124f0:	f000 f916 	bl	8012720 <__retarget_lock_release_recursive>
 80124f4:	e7d7      	b.n	80124a6 <_fflush_r+0xe>
 80124f6:	4b06      	ldr	r3, [pc, #24]	; (8012510 <_fflush_r+0x78>)
 80124f8:	429c      	cmp	r4, r3
 80124fa:	d101      	bne.n	8012500 <_fflush_r+0x68>
 80124fc:	68ac      	ldr	r4, [r5, #8]
 80124fe:	e7df      	b.n	80124c0 <_fflush_r+0x28>
 8012500:	4b04      	ldr	r3, [pc, #16]	; (8012514 <_fflush_r+0x7c>)
 8012502:	429c      	cmp	r4, r3
 8012504:	d1dc      	bne.n	80124c0 <_fflush_r+0x28>
 8012506:	68ec      	ldr	r4, [r5, #12]
 8012508:	e7da      	b.n	80124c0 <_fflush_r+0x28>
 801250a:	46c0      	nop			; (mov r8, r8)
 801250c:	080134a0 	.word	0x080134a0
 8012510:	080134c0 	.word	0x080134c0
 8012514:	08013480 	.word	0x08013480

08012518 <std>:
 8012518:	2300      	movs	r3, #0
 801251a:	b510      	push	{r4, lr}
 801251c:	0004      	movs	r4, r0
 801251e:	6003      	str	r3, [r0, #0]
 8012520:	6043      	str	r3, [r0, #4]
 8012522:	6083      	str	r3, [r0, #8]
 8012524:	8181      	strh	r1, [r0, #12]
 8012526:	6643      	str	r3, [r0, #100]	; 0x64
 8012528:	0019      	movs	r1, r3
 801252a:	81c2      	strh	r2, [r0, #14]
 801252c:	6103      	str	r3, [r0, #16]
 801252e:	6143      	str	r3, [r0, #20]
 8012530:	6183      	str	r3, [r0, #24]
 8012532:	2208      	movs	r2, #8
 8012534:	305c      	adds	r0, #92	; 0x5c
 8012536:	f7fc f82a 	bl	800e58e <memset>
 801253a:	4b05      	ldr	r3, [pc, #20]	; (8012550 <std+0x38>)
 801253c:	6224      	str	r4, [r4, #32]
 801253e:	6263      	str	r3, [r4, #36]	; 0x24
 8012540:	4b04      	ldr	r3, [pc, #16]	; (8012554 <std+0x3c>)
 8012542:	62a3      	str	r3, [r4, #40]	; 0x28
 8012544:	4b04      	ldr	r3, [pc, #16]	; (8012558 <std+0x40>)
 8012546:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012548:	4b04      	ldr	r3, [pc, #16]	; (801255c <std+0x44>)
 801254a:	6323      	str	r3, [r4, #48]	; 0x30
 801254c:	bd10      	pop	{r4, pc}
 801254e:	46c0      	nop			; (mov r8, r8)
 8012550:	08012891 	.word	0x08012891
 8012554:	080128b9 	.word	0x080128b9
 8012558:	080128f1 	.word	0x080128f1
 801255c:	0801291d 	.word	0x0801291d

08012560 <_cleanup_r>:
 8012560:	b510      	push	{r4, lr}
 8012562:	4902      	ldr	r1, [pc, #8]	; (801256c <_cleanup_r+0xc>)
 8012564:	f000 f8ba 	bl	80126dc <_fwalk_reent>
 8012568:	bd10      	pop	{r4, pc}
 801256a:	46c0      	nop			; (mov r8, r8)
 801256c:	08012499 	.word	0x08012499

08012570 <__sfmoreglue>:
 8012570:	b570      	push	{r4, r5, r6, lr}
 8012572:	2568      	movs	r5, #104	; 0x68
 8012574:	1e4a      	subs	r2, r1, #1
 8012576:	4355      	muls	r5, r2
 8012578:	000e      	movs	r6, r1
 801257a:	0029      	movs	r1, r5
 801257c:	3174      	adds	r1, #116	; 0x74
 801257e:	f7fe f99b 	bl	80108b8 <_malloc_r>
 8012582:	1e04      	subs	r4, r0, #0
 8012584:	d008      	beq.n	8012598 <__sfmoreglue+0x28>
 8012586:	2100      	movs	r1, #0
 8012588:	002a      	movs	r2, r5
 801258a:	6001      	str	r1, [r0, #0]
 801258c:	6046      	str	r6, [r0, #4]
 801258e:	300c      	adds	r0, #12
 8012590:	60a0      	str	r0, [r4, #8]
 8012592:	3268      	adds	r2, #104	; 0x68
 8012594:	f7fb fffb 	bl	800e58e <memset>
 8012598:	0020      	movs	r0, r4
 801259a:	bd70      	pop	{r4, r5, r6, pc}

0801259c <__sfp_lock_acquire>:
 801259c:	b510      	push	{r4, lr}
 801259e:	4802      	ldr	r0, [pc, #8]	; (80125a8 <__sfp_lock_acquire+0xc>)
 80125a0:	f000 f8bd 	bl	801271e <__retarget_lock_acquire_recursive>
 80125a4:	bd10      	pop	{r4, pc}
 80125a6:	46c0      	nop			; (mov r8, r8)
 80125a8:	2000106d 	.word	0x2000106d

080125ac <__sfp_lock_release>:
 80125ac:	b510      	push	{r4, lr}
 80125ae:	4802      	ldr	r0, [pc, #8]	; (80125b8 <__sfp_lock_release+0xc>)
 80125b0:	f000 f8b6 	bl	8012720 <__retarget_lock_release_recursive>
 80125b4:	bd10      	pop	{r4, pc}
 80125b6:	46c0      	nop			; (mov r8, r8)
 80125b8:	2000106d 	.word	0x2000106d

080125bc <__sinit_lock_acquire>:
 80125bc:	b510      	push	{r4, lr}
 80125be:	4802      	ldr	r0, [pc, #8]	; (80125c8 <__sinit_lock_acquire+0xc>)
 80125c0:	f000 f8ad 	bl	801271e <__retarget_lock_acquire_recursive>
 80125c4:	bd10      	pop	{r4, pc}
 80125c6:	46c0      	nop			; (mov r8, r8)
 80125c8:	2000106e 	.word	0x2000106e

080125cc <__sinit_lock_release>:
 80125cc:	b510      	push	{r4, lr}
 80125ce:	4802      	ldr	r0, [pc, #8]	; (80125d8 <__sinit_lock_release+0xc>)
 80125d0:	f000 f8a6 	bl	8012720 <__retarget_lock_release_recursive>
 80125d4:	bd10      	pop	{r4, pc}
 80125d6:	46c0      	nop			; (mov r8, r8)
 80125d8:	2000106e 	.word	0x2000106e

080125dc <__sinit>:
 80125dc:	b513      	push	{r0, r1, r4, lr}
 80125de:	0004      	movs	r4, r0
 80125e0:	f7ff ffec 	bl	80125bc <__sinit_lock_acquire>
 80125e4:	69a3      	ldr	r3, [r4, #24]
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d002      	beq.n	80125f0 <__sinit+0x14>
 80125ea:	f7ff ffef 	bl	80125cc <__sinit_lock_release>
 80125ee:	bd13      	pop	{r0, r1, r4, pc}
 80125f0:	64a3      	str	r3, [r4, #72]	; 0x48
 80125f2:	64e3      	str	r3, [r4, #76]	; 0x4c
 80125f4:	6523      	str	r3, [r4, #80]	; 0x50
 80125f6:	4b13      	ldr	r3, [pc, #76]	; (8012644 <__sinit+0x68>)
 80125f8:	4a13      	ldr	r2, [pc, #76]	; (8012648 <__sinit+0x6c>)
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80125fe:	9301      	str	r3, [sp, #4]
 8012600:	42a3      	cmp	r3, r4
 8012602:	d101      	bne.n	8012608 <__sinit+0x2c>
 8012604:	2301      	movs	r3, #1
 8012606:	61a3      	str	r3, [r4, #24]
 8012608:	0020      	movs	r0, r4
 801260a:	f000 f81f 	bl	801264c <__sfp>
 801260e:	6060      	str	r0, [r4, #4]
 8012610:	0020      	movs	r0, r4
 8012612:	f000 f81b 	bl	801264c <__sfp>
 8012616:	60a0      	str	r0, [r4, #8]
 8012618:	0020      	movs	r0, r4
 801261a:	f000 f817 	bl	801264c <__sfp>
 801261e:	2200      	movs	r2, #0
 8012620:	2104      	movs	r1, #4
 8012622:	60e0      	str	r0, [r4, #12]
 8012624:	6860      	ldr	r0, [r4, #4]
 8012626:	f7ff ff77 	bl	8012518 <std>
 801262a:	2201      	movs	r2, #1
 801262c:	2109      	movs	r1, #9
 801262e:	68a0      	ldr	r0, [r4, #8]
 8012630:	f7ff ff72 	bl	8012518 <std>
 8012634:	2202      	movs	r2, #2
 8012636:	2112      	movs	r1, #18
 8012638:	68e0      	ldr	r0, [r4, #12]
 801263a:	f7ff ff6d 	bl	8012518 <std>
 801263e:	2301      	movs	r3, #1
 8012640:	61a3      	str	r3, [r4, #24]
 8012642:	e7d2      	b.n	80125ea <__sinit+0xe>
 8012644:	08013048 	.word	0x08013048
 8012648:	08012561 	.word	0x08012561

0801264c <__sfp>:
 801264c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801264e:	0007      	movs	r7, r0
 8012650:	f7ff ffa4 	bl	801259c <__sfp_lock_acquire>
 8012654:	4b1f      	ldr	r3, [pc, #124]	; (80126d4 <__sfp+0x88>)
 8012656:	681e      	ldr	r6, [r3, #0]
 8012658:	69b3      	ldr	r3, [r6, #24]
 801265a:	2b00      	cmp	r3, #0
 801265c:	d102      	bne.n	8012664 <__sfp+0x18>
 801265e:	0030      	movs	r0, r6
 8012660:	f7ff ffbc 	bl	80125dc <__sinit>
 8012664:	3648      	adds	r6, #72	; 0x48
 8012666:	68b4      	ldr	r4, [r6, #8]
 8012668:	6873      	ldr	r3, [r6, #4]
 801266a:	3b01      	subs	r3, #1
 801266c:	d504      	bpl.n	8012678 <__sfp+0x2c>
 801266e:	6833      	ldr	r3, [r6, #0]
 8012670:	2b00      	cmp	r3, #0
 8012672:	d022      	beq.n	80126ba <__sfp+0x6e>
 8012674:	6836      	ldr	r6, [r6, #0]
 8012676:	e7f6      	b.n	8012666 <__sfp+0x1a>
 8012678:	220c      	movs	r2, #12
 801267a:	5ea5      	ldrsh	r5, [r4, r2]
 801267c:	2d00      	cmp	r5, #0
 801267e:	d11a      	bne.n	80126b6 <__sfp+0x6a>
 8012680:	0020      	movs	r0, r4
 8012682:	4b15      	ldr	r3, [pc, #84]	; (80126d8 <__sfp+0x8c>)
 8012684:	3058      	adds	r0, #88	; 0x58
 8012686:	60e3      	str	r3, [r4, #12]
 8012688:	6665      	str	r5, [r4, #100]	; 0x64
 801268a:	f000 f847 	bl	801271c <__retarget_lock_init_recursive>
 801268e:	f7ff ff8d 	bl	80125ac <__sfp_lock_release>
 8012692:	0020      	movs	r0, r4
 8012694:	2208      	movs	r2, #8
 8012696:	0029      	movs	r1, r5
 8012698:	6025      	str	r5, [r4, #0]
 801269a:	60a5      	str	r5, [r4, #8]
 801269c:	6065      	str	r5, [r4, #4]
 801269e:	6125      	str	r5, [r4, #16]
 80126a0:	6165      	str	r5, [r4, #20]
 80126a2:	61a5      	str	r5, [r4, #24]
 80126a4:	305c      	adds	r0, #92	; 0x5c
 80126a6:	f7fb ff72 	bl	800e58e <memset>
 80126aa:	6365      	str	r5, [r4, #52]	; 0x34
 80126ac:	63a5      	str	r5, [r4, #56]	; 0x38
 80126ae:	64a5      	str	r5, [r4, #72]	; 0x48
 80126b0:	64e5      	str	r5, [r4, #76]	; 0x4c
 80126b2:	0020      	movs	r0, r4
 80126b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80126b6:	3468      	adds	r4, #104	; 0x68
 80126b8:	e7d7      	b.n	801266a <__sfp+0x1e>
 80126ba:	2104      	movs	r1, #4
 80126bc:	0038      	movs	r0, r7
 80126be:	f7ff ff57 	bl	8012570 <__sfmoreglue>
 80126c2:	1e04      	subs	r4, r0, #0
 80126c4:	6030      	str	r0, [r6, #0]
 80126c6:	d1d5      	bne.n	8012674 <__sfp+0x28>
 80126c8:	f7ff ff70 	bl	80125ac <__sfp_lock_release>
 80126cc:	230c      	movs	r3, #12
 80126ce:	603b      	str	r3, [r7, #0]
 80126d0:	e7ef      	b.n	80126b2 <__sfp+0x66>
 80126d2:	46c0      	nop			; (mov r8, r8)
 80126d4:	08013048 	.word	0x08013048
 80126d8:	ffff0001 	.word	0xffff0001

080126dc <_fwalk_reent>:
 80126dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80126de:	0004      	movs	r4, r0
 80126e0:	0006      	movs	r6, r0
 80126e2:	2700      	movs	r7, #0
 80126e4:	9101      	str	r1, [sp, #4]
 80126e6:	3448      	adds	r4, #72	; 0x48
 80126e8:	6863      	ldr	r3, [r4, #4]
 80126ea:	68a5      	ldr	r5, [r4, #8]
 80126ec:	9300      	str	r3, [sp, #0]
 80126ee:	9b00      	ldr	r3, [sp, #0]
 80126f0:	3b01      	subs	r3, #1
 80126f2:	9300      	str	r3, [sp, #0]
 80126f4:	d504      	bpl.n	8012700 <_fwalk_reent+0x24>
 80126f6:	6824      	ldr	r4, [r4, #0]
 80126f8:	2c00      	cmp	r4, #0
 80126fa:	d1f5      	bne.n	80126e8 <_fwalk_reent+0xc>
 80126fc:	0038      	movs	r0, r7
 80126fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012700:	89ab      	ldrh	r3, [r5, #12]
 8012702:	2b01      	cmp	r3, #1
 8012704:	d908      	bls.n	8012718 <_fwalk_reent+0x3c>
 8012706:	220e      	movs	r2, #14
 8012708:	5eab      	ldrsh	r3, [r5, r2]
 801270a:	3301      	adds	r3, #1
 801270c:	d004      	beq.n	8012718 <_fwalk_reent+0x3c>
 801270e:	0029      	movs	r1, r5
 8012710:	0030      	movs	r0, r6
 8012712:	9b01      	ldr	r3, [sp, #4]
 8012714:	4798      	blx	r3
 8012716:	4307      	orrs	r7, r0
 8012718:	3568      	adds	r5, #104	; 0x68
 801271a:	e7e8      	b.n	80126ee <_fwalk_reent+0x12>

0801271c <__retarget_lock_init_recursive>:
 801271c:	4770      	bx	lr

0801271e <__retarget_lock_acquire_recursive>:
 801271e:	4770      	bx	lr

08012720 <__retarget_lock_release_recursive>:
 8012720:	4770      	bx	lr
	...

08012724 <__swhatbuf_r>:
 8012724:	b570      	push	{r4, r5, r6, lr}
 8012726:	000e      	movs	r6, r1
 8012728:	001d      	movs	r5, r3
 801272a:	230e      	movs	r3, #14
 801272c:	5ec9      	ldrsh	r1, [r1, r3]
 801272e:	0014      	movs	r4, r2
 8012730:	b096      	sub	sp, #88	; 0x58
 8012732:	2900      	cmp	r1, #0
 8012734:	da08      	bge.n	8012748 <__swhatbuf_r+0x24>
 8012736:	220c      	movs	r2, #12
 8012738:	5eb3      	ldrsh	r3, [r6, r2]
 801273a:	2200      	movs	r2, #0
 801273c:	602a      	str	r2, [r5, #0]
 801273e:	061b      	lsls	r3, r3, #24
 8012740:	d411      	bmi.n	8012766 <__swhatbuf_r+0x42>
 8012742:	2380      	movs	r3, #128	; 0x80
 8012744:	00db      	lsls	r3, r3, #3
 8012746:	e00f      	b.n	8012768 <__swhatbuf_r+0x44>
 8012748:	466a      	mov	r2, sp
 801274a:	f000 f913 	bl	8012974 <_fstat_r>
 801274e:	2800      	cmp	r0, #0
 8012750:	dbf1      	blt.n	8012736 <__swhatbuf_r+0x12>
 8012752:	23f0      	movs	r3, #240	; 0xf0
 8012754:	9901      	ldr	r1, [sp, #4]
 8012756:	021b      	lsls	r3, r3, #8
 8012758:	4019      	ands	r1, r3
 801275a:	4b05      	ldr	r3, [pc, #20]	; (8012770 <__swhatbuf_r+0x4c>)
 801275c:	18c9      	adds	r1, r1, r3
 801275e:	424b      	negs	r3, r1
 8012760:	4159      	adcs	r1, r3
 8012762:	6029      	str	r1, [r5, #0]
 8012764:	e7ed      	b.n	8012742 <__swhatbuf_r+0x1e>
 8012766:	2340      	movs	r3, #64	; 0x40
 8012768:	2000      	movs	r0, #0
 801276a:	6023      	str	r3, [r4, #0]
 801276c:	b016      	add	sp, #88	; 0x58
 801276e:	bd70      	pop	{r4, r5, r6, pc}
 8012770:	ffffe000 	.word	0xffffe000

08012774 <__smakebuf_r>:
 8012774:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012776:	2602      	movs	r6, #2
 8012778:	898b      	ldrh	r3, [r1, #12]
 801277a:	0005      	movs	r5, r0
 801277c:	000c      	movs	r4, r1
 801277e:	4233      	tst	r3, r6
 8012780:	d006      	beq.n	8012790 <__smakebuf_r+0x1c>
 8012782:	0023      	movs	r3, r4
 8012784:	3347      	adds	r3, #71	; 0x47
 8012786:	6023      	str	r3, [r4, #0]
 8012788:	6123      	str	r3, [r4, #16]
 801278a:	2301      	movs	r3, #1
 801278c:	6163      	str	r3, [r4, #20]
 801278e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8012790:	466a      	mov	r2, sp
 8012792:	ab01      	add	r3, sp, #4
 8012794:	f7ff ffc6 	bl	8012724 <__swhatbuf_r>
 8012798:	9900      	ldr	r1, [sp, #0]
 801279a:	0007      	movs	r7, r0
 801279c:	0028      	movs	r0, r5
 801279e:	f7fe f88b 	bl	80108b8 <_malloc_r>
 80127a2:	2800      	cmp	r0, #0
 80127a4:	d108      	bne.n	80127b8 <__smakebuf_r+0x44>
 80127a6:	220c      	movs	r2, #12
 80127a8:	5ea3      	ldrsh	r3, [r4, r2]
 80127aa:	059a      	lsls	r2, r3, #22
 80127ac:	d4ef      	bmi.n	801278e <__smakebuf_r+0x1a>
 80127ae:	2203      	movs	r2, #3
 80127b0:	4393      	bics	r3, r2
 80127b2:	431e      	orrs	r6, r3
 80127b4:	81a6      	strh	r6, [r4, #12]
 80127b6:	e7e4      	b.n	8012782 <__smakebuf_r+0xe>
 80127b8:	4b0f      	ldr	r3, [pc, #60]	; (80127f8 <__smakebuf_r+0x84>)
 80127ba:	62ab      	str	r3, [r5, #40]	; 0x28
 80127bc:	2380      	movs	r3, #128	; 0x80
 80127be:	89a2      	ldrh	r2, [r4, #12]
 80127c0:	6020      	str	r0, [r4, #0]
 80127c2:	4313      	orrs	r3, r2
 80127c4:	81a3      	strh	r3, [r4, #12]
 80127c6:	9b00      	ldr	r3, [sp, #0]
 80127c8:	6120      	str	r0, [r4, #16]
 80127ca:	6163      	str	r3, [r4, #20]
 80127cc:	9b01      	ldr	r3, [sp, #4]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d00d      	beq.n	80127ee <__smakebuf_r+0x7a>
 80127d2:	0028      	movs	r0, r5
 80127d4:	230e      	movs	r3, #14
 80127d6:	5ee1      	ldrsh	r1, [r4, r3]
 80127d8:	f000 f8de 	bl	8012998 <_isatty_r>
 80127dc:	2800      	cmp	r0, #0
 80127de:	d006      	beq.n	80127ee <__smakebuf_r+0x7a>
 80127e0:	2203      	movs	r2, #3
 80127e2:	89a3      	ldrh	r3, [r4, #12]
 80127e4:	4393      	bics	r3, r2
 80127e6:	001a      	movs	r2, r3
 80127e8:	2301      	movs	r3, #1
 80127ea:	4313      	orrs	r3, r2
 80127ec:	81a3      	strh	r3, [r4, #12]
 80127ee:	89a0      	ldrh	r0, [r4, #12]
 80127f0:	4307      	orrs	r7, r0
 80127f2:	81a7      	strh	r7, [r4, #12]
 80127f4:	e7cb      	b.n	801278e <__smakebuf_r+0x1a>
 80127f6:	46c0      	nop			; (mov r8, r8)
 80127f8:	08012561 	.word	0x08012561

080127fc <_raise_r>:
 80127fc:	b570      	push	{r4, r5, r6, lr}
 80127fe:	0004      	movs	r4, r0
 8012800:	000d      	movs	r5, r1
 8012802:	291f      	cmp	r1, #31
 8012804:	d904      	bls.n	8012810 <_raise_r+0x14>
 8012806:	2316      	movs	r3, #22
 8012808:	6003      	str	r3, [r0, #0]
 801280a:	2001      	movs	r0, #1
 801280c:	4240      	negs	r0, r0
 801280e:	bd70      	pop	{r4, r5, r6, pc}
 8012810:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8012812:	2b00      	cmp	r3, #0
 8012814:	d004      	beq.n	8012820 <_raise_r+0x24>
 8012816:	008a      	lsls	r2, r1, #2
 8012818:	189b      	adds	r3, r3, r2
 801281a:	681a      	ldr	r2, [r3, #0]
 801281c:	2a00      	cmp	r2, #0
 801281e:	d108      	bne.n	8012832 <_raise_r+0x36>
 8012820:	0020      	movs	r0, r4
 8012822:	f000 f831 	bl	8012888 <_getpid_r>
 8012826:	002a      	movs	r2, r5
 8012828:	0001      	movs	r1, r0
 801282a:	0020      	movs	r0, r4
 801282c:	f000 f81a 	bl	8012864 <_kill_r>
 8012830:	e7ed      	b.n	801280e <_raise_r+0x12>
 8012832:	2000      	movs	r0, #0
 8012834:	2a01      	cmp	r2, #1
 8012836:	d0ea      	beq.n	801280e <_raise_r+0x12>
 8012838:	1c51      	adds	r1, r2, #1
 801283a:	d103      	bne.n	8012844 <_raise_r+0x48>
 801283c:	2316      	movs	r3, #22
 801283e:	3001      	adds	r0, #1
 8012840:	6023      	str	r3, [r4, #0]
 8012842:	e7e4      	b.n	801280e <_raise_r+0x12>
 8012844:	2400      	movs	r4, #0
 8012846:	0028      	movs	r0, r5
 8012848:	601c      	str	r4, [r3, #0]
 801284a:	4790      	blx	r2
 801284c:	0020      	movs	r0, r4
 801284e:	e7de      	b.n	801280e <_raise_r+0x12>

08012850 <raise>:
 8012850:	b510      	push	{r4, lr}
 8012852:	4b03      	ldr	r3, [pc, #12]	; (8012860 <raise+0x10>)
 8012854:	0001      	movs	r1, r0
 8012856:	6818      	ldr	r0, [r3, #0]
 8012858:	f7ff ffd0 	bl	80127fc <_raise_r>
 801285c:	bd10      	pop	{r4, pc}
 801285e:	46c0      	nop			; (mov r8, r8)
 8012860:	200000b4 	.word	0x200000b4

08012864 <_kill_r>:
 8012864:	2300      	movs	r3, #0
 8012866:	b570      	push	{r4, r5, r6, lr}
 8012868:	4d06      	ldr	r5, [pc, #24]	; (8012884 <_kill_r+0x20>)
 801286a:	0004      	movs	r4, r0
 801286c:	0008      	movs	r0, r1
 801286e:	0011      	movs	r1, r2
 8012870:	602b      	str	r3, [r5, #0]
 8012872:	f7f5 fc13 	bl	800809c <_kill>
 8012876:	1c43      	adds	r3, r0, #1
 8012878:	d103      	bne.n	8012882 <_kill_r+0x1e>
 801287a:	682b      	ldr	r3, [r5, #0]
 801287c:	2b00      	cmp	r3, #0
 801287e:	d000      	beq.n	8012882 <_kill_r+0x1e>
 8012880:	6023      	str	r3, [r4, #0]
 8012882:	bd70      	pop	{r4, r5, r6, pc}
 8012884:	20001068 	.word	0x20001068

08012888 <_getpid_r>:
 8012888:	b510      	push	{r4, lr}
 801288a:	f7f5 fc01 	bl	8008090 <_getpid>
 801288e:	bd10      	pop	{r4, pc}

08012890 <__sread>:
 8012890:	b570      	push	{r4, r5, r6, lr}
 8012892:	000c      	movs	r4, r1
 8012894:	250e      	movs	r5, #14
 8012896:	5f49      	ldrsh	r1, [r1, r5]
 8012898:	f000 f8a4 	bl	80129e4 <_read_r>
 801289c:	2800      	cmp	r0, #0
 801289e:	db03      	blt.n	80128a8 <__sread+0x18>
 80128a0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80128a2:	181b      	adds	r3, r3, r0
 80128a4:	6563      	str	r3, [r4, #84]	; 0x54
 80128a6:	bd70      	pop	{r4, r5, r6, pc}
 80128a8:	89a3      	ldrh	r3, [r4, #12]
 80128aa:	4a02      	ldr	r2, [pc, #8]	; (80128b4 <__sread+0x24>)
 80128ac:	4013      	ands	r3, r2
 80128ae:	81a3      	strh	r3, [r4, #12]
 80128b0:	e7f9      	b.n	80128a6 <__sread+0x16>
 80128b2:	46c0      	nop			; (mov r8, r8)
 80128b4:	ffffefff 	.word	0xffffefff

080128b8 <__swrite>:
 80128b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128ba:	001f      	movs	r7, r3
 80128bc:	898b      	ldrh	r3, [r1, #12]
 80128be:	0005      	movs	r5, r0
 80128c0:	000c      	movs	r4, r1
 80128c2:	0016      	movs	r6, r2
 80128c4:	05db      	lsls	r3, r3, #23
 80128c6:	d505      	bpl.n	80128d4 <__swrite+0x1c>
 80128c8:	230e      	movs	r3, #14
 80128ca:	5ec9      	ldrsh	r1, [r1, r3]
 80128cc:	2200      	movs	r2, #0
 80128ce:	2302      	movs	r3, #2
 80128d0:	f000 f874 	bl	80129bc <_lseek_r>
 80128d4:	89a3      	ldrh	r3, [r4, #12]
 80128d6:	4a05      	ldr	r2, [pc, #20]	; (80128ec <__swrite+0x34>)
 80128d8:	0028      	movs	r0, r5
 80128da:	4013      	ands	r3, r2
 80128dc:	81a3      	strh	r3, [r4, #12]
 80128de:	0032      	movs	r2, r6
 80128e0:	230e      	movs	r3, #14
 80128e2:	5ee1      	ldrsh	r1, [r4, r3]
 80128e4:	003b      	movs	r3, r7
 80128e6:	f000 f81f 	bl	8012928 <_write_r>
 80128ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80128ec:	ffffefff 	.word	0xffffefff

080128f0 <__sseek>:
 80128f0:	b570      	push	{r4, r5, r6, lr}
 80128f2:	000c      	movs	r4, r1
 80128f4:	250e      	movs	r5, #14
 80128f6:	5f49      	ldrsh	r1, [r1, r5]
 80128f8:	f000 f860 	bl	80129bc <_lseek_r>
 80128fc:	89a3      	ldrh	r3, [r4, #12]
 80128fe:	1c42      	adds	r2, r0, #1
 8012900:	d103      	bne.n	801290a <__sseek+0x1a>
 8012902:	4a05      	ldr	r2, [pc, #20]	; (8012918 <__sseek+0x28>)
 8012904:	4013      	ands	r3, r2
 8012906:	81a3      	strh	r3, [r4, #12]
 8012908:	bd70      	pop	{r4, r5, r6, pc}
 801290a:	2280      	movs	r2, #128	; 0x80
 801290c:	0152      	lsls	r2, r2, #5
 801290e:	4313      	orrs	r3, r2
 8012910:	81a3      	strh	r3, [r4, #12]
 8012912:	6560      	str	r0, [r4, #84]	; 0x54
 8012914:	e7f8      	b.n	8012908 <__sseek+0x18>
 8012916:	46c0      	nop			; (mov r8, r8)
 8012918:	ffffefff 	.word	0xffffefff

0801291c <__sclose>:
 801291c:	b510      	push	{r4, lr}
 801291e:	230e      	movs	r3, #14
 8012920:	5ec9      	ldrsh	r1, [r1, r3]
 8012922:	f000 f815 	bl	8012950 <_close_r>
 8012926:	bd10      	pop	{r4, pc}

08012928 <_write_r>:
 8012928:	b570      	push	{r4, r5, r6, lr}
 801292a:	0004      	movs	r4, r0
 801292c:	0008      	movs	r0, r1
 801292e:	0011      	movs	r1, r2
 8012930:	001a      	movs	r2, r3
 8012932:	2300      	movs	r3, #0
 8012934:	4d05      	ldr	r5, [pc, #20]	; (801294c <_write_r+0x24>)
 8012936:	602b      	str	r3, [r5, #0]
 8012938:	f7f5 fbe9 	bl	800810e <_write>
 801293c:	1c43      	adds	r3, r0, #1
 801293e:	d103      	bne.n	8012948 <_write_r+0x20>
 8012940:	682b      	ldr	r3, [r5, #0]
 8012942:	2b00      	cmp	r3, #0
 8012944:	d000      	beq.n	8012948 <_write_r+0x20>
 8012946:	6023      	str	r3, [r4, #0]
 8012948:	bd70      	pop	{r4, r5, r6, pc}
 801294a:	46c0      	nop			; (mov r8, r8)
 801294c:	20001068 	.word	0x20001068

08012950 <_close_r>:
 8012950:	2300      	movs	r3, #0
 8012952:	b570      	push	{r4, r5, r6, lr}
 8012954:	4d06      	ldr	r5, [pc, #24]	; (8012970 <_close_r+0x20>)
 8012956:	0004      	movs	r4, r0
 8012958:	0008      	movs	r0, r1
 801295a:	602b      	str	r3, [r5, #0]
 801295c:	f7f5 fbf3 	bl	8008146 <_close>
 8012960:	1c43      	adds	r3, r0, #1
 8012962:	d103      	bne.n	801296c <_close_r+0x1c>
 8012964:	682b      	ldr	r3, [r5, #0]
 8012966:	2b00      	cmp	r3, #0
 8012968:	d000      	beq.n	801296c <_close_r+0x1c>
 801296a:	6023      	str	r3, [r4, #0]
 801296c:	bd70      	pop	{r4, r5, r6, pc}
 801296e:	46c0      	nop			; (mov r8, r8)
 8012970:	20001068 	.word	0x20001068

08012974 <_fstat_r>:
 8012974:	2300      	movs	r3, #0
 8012976:	b570      	push	{r4, r5, r6, lr}
 8012978:	4d06      	ldr	r5, [pc, #24]	; (8012994 <_fstat_r+0x20>)
 801297a:	0004      	movs	r4, r0
 801297c:	0008      	movs	r0, r1
 801297e:	0011      	movs	r1, r2
 8012980:	602b      	str	r3, [r5, #0]
 8012982:	f7f5 fbea 	bl	800815a <_fstat>
 8012986:	1c43      	adds	r3, r0, #1
 8012988:	d103      	bne.n	8012992 <_fstat_r+0x1e>
 801298a:	682b      	ldr	r3, [r5, #0]
 801298c:	2b00      	cmp	r3, #0
 801298e:	d000      	beq.n	8012992 <_fstat_r+0x1e>
 8012990:	6023      	str	r3, [r4, #0]
 8012992:	bd70      	pop	{r4, r5, r6, pc}
 8012994:	20001068 	.word	0x20001068

08012998 <_isatty_r>:
 8012998:	2300      	movs	r3, #0
 801299a:	b570      	push	{r4, r5, r6, lr}
 801299c:	4d06      	ldr	r5, [pc, #24]	; (80129b8 <_isatty_r+0x20>)
 801299e:	0004      	movs	r4, r0
 80129a0:	0008      	movs	r0, r1
 80129a2:	602b      	str	r3, [r5, #0]
 80129a4:	f7f5 fbe7 	bl	8008176 <_isatty>
 80129a8:	1c43      	adds	r3, r0, #1
 80129aa:	d103      	bne.n	80129b4 <_isatty_r+0x1c>
 80129ac:	682b      	ldr	r3, [r5, #0]
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d000      	beq.n	80129b4 <_isatty_r+0x1c>
 80129b2:	6023      	str	r3, [r4, #0]
 80129b4:	bd70      	pop	{r4, r5, r6, pc}
 80129b6:	46c0      	nop			; (mov r8, r8)
 80129b8:	20001068 	.word	0x20001068

080129bc <_lseek_r>:
 80129bc:	b570      	push	{r4, r5, r6, lr}
 80129be:	0004      	movs	r4, r0
 80129c0:	0008      	movs	r0, r1
 80129c2:	0011      	movs	r1, r2
 80129c4:	001a      	movs	r2, r3
 80129c6:	2300      	movs	r3, #0
 80129c8:	4d05      	ldr	r5, [pc, #20]	; (80129e0 <_lseek_r+0x24>)
 80129ca:	602b      	str	r3, [r5, #0]
 80129cc:	f7f5 fbdc 	bl	8008188 <_lseek>
 80129d0:	1c43      	adds	r3, r0, #1
 80129d2:	d103      	bne.n	80129dc <_lseek_r+0x20>
 80129d4:	682b      	ldr	r3, [r5, #0]
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d000      	beq.n	80129dc <_lseek_r+0x20>
 80129da:	6023      	str	r3, [r4, #0]
 80129dc:	bd70      	pop	{r4, r5, r6, pc}
 80129de:	46c0      	nop			; (mov r8, r8)
 80129e0:	20001068 	.word	0x20001068

080129e4 <_read_r>:
 80129e4:	b570      	push	{r4, r5, r6, lr}
 80129e6:	0004      	movs	r4, r0
 80129e8:	0008      	movs	r0, r1
 80129ea:	0011      	movs	r1, r2
 80129ec:	001a      	movs	r2, r3
 80129ee:	2300      	movs	r3, #0
 80129f0:	4d05      	ldr	r5, [pc, #20]	; (8012a08 <_read_r+0x24>)
 80129f2:	602b      	str	r3, [r5, #0]
 80129f4:	f7f5 fb6e 	bl	80080d4 <_read>
 80129f8:	1c43      	adds	r3, r0, #1
 80129fa:	d103      	bne.n	8012a04 <_read_r+0x20>
 80129fc:	682b      	ldr	r3, [r5, #0]
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d000      	beq.n	8012a04 <_read_r+0x20>
 8012a02:	6023      	str	r3, [r4, #0]
 8012a04:	bd70      	pop	{r4, r5, r6, pc}
 8012a06:	46c0      	nop			; (mov r8, r8)
 8012a08:	20001068 	.word	0x20001068

08012a0c <_init>:
 8012a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a0e:	46c0      	nop			; (mov r8, r8)
 8012a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012a12:	bc08      	pop	{r3}
 8012a14:	469e      	mov	lr, r3
 8012a16:	4770      	bx	lr

08012a18 <_fini>:
 8012a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a1a:	46c0      	nop			; (mov r8, r8)
 8012a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012a1e:	bc08      	pop	{r3}
 8012a20:	469e      	mov	lr, r3
 8012a22:	4770      	bx	lr
