
stm32g070cbt6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000130a8  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009f0  08013160  08013160  00023160  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013b50  08013b50  000302b8  2**0
                  CONTENTS
  4 .ARM          00000000  08013b50  08013b50  000302b8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08013b50  08013b50  000302b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013b50  08013b50  00023b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013b54  08013b54  00023b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b8  20000000  08013b58  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000aa8  200002b8  08013e10  000302b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d60  08013e10  00030d60  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000302b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000172d0  00000000  00000000  000302e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c82  00000000  00000000  000475b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001320  00000000  00000000  0004a238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001330  00000000  00000000  0004b558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e10  00000000  00000000  0004c888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017cd3  00000000  00000000  00064698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093290  00000000  00000000  0007c36b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010f5fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d9c  00000000  00000000  0010f64c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200002b8 	.word	0x200002b8
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08013148 	.word	0x08013148

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200002bc 	.word	0x200002bc
 80000fc:	08013148 	.word	0x08013148

08000100 <strcmp>:
 8000100:	7802      	ldrb	r2, [r0, #0]
 8000102:	780b      	ldrb	r3, [r1, #0]
 8000104:	2a00      	cmp	r2, #0
 8000106:	d003      	beq.n	8000110 <strcmp+0x10>
 8000108:	3001      	adds	r0, #1
 800010a:	3101      	adds	r1, #1
 800010c:	429a      	cmp	r2, r3
 800010e:	d0f7      	beq.n	8000100 <strcmp>
 8000110:	1ad0      	subs	r0, r2, r3
 8000112:	4770      	bx	lr

08000114 <strlen>:
 8000114:	2300      	movs	r3, #0
 8000116:	5cc2      	ldrb	r2, [r0, r3]
 8000118:	3301      	adds	r3, #1
 800011a:	2a00      	cmp	r2, #0
 800011c:	d1fb      	bne.n	8000116 <strlen+0x2>
 800011e:	1e58      	subs	r0, r3, #1
 8000120:	4770      	bx	lr
	...

08000124 <__gnu_thumb1_case_uqi>:
 8000124:	b402      	push	{r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0049      	lsls	r1, r1, #1
 800012c:	5c09      	ldrb	r1, [r1, r0]
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	448e      	add	lr, r1
 8000132:	bc02      	pop	{r1}
 8000134:	4770      	bx	lr
 8000136:	46c0      	nop			; (mov r8, r8)

08000138 <__gnu_thumb1_case_shi>:
 8000138:	b403      	push	{r0, r1}
 800013a:	4671      	mov	r1, lr
 800013c:	0849      	lsrs	r1, r1, #1
 800013e:	0040      	lsls	r0, r0, #1
 8000140:	0049      	lsls	r1, r1, #1
 8000142:	5e09      	ldrsh	r1, [r1, r0]
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	448e      	add	lr, r1
 8000148:	bc03      	pop	{r0, r1}
 800014a:	4770      	bx	lr

0800014c <__udivsi3>:
 800014c:	2200      	movs	r2, #0
 800014e:	0843      	lsrs	r3, r0, #1
 8000150:	428b      	cmp	r3, r1
 8000152:	d374      	bcc.n	800023e <__udivsi3+0xf2>
 8000154:	0903      	lsrs	r3, r0, #4
 8000156:	428b      	cmp	r3, r1
 8000158:	d35f      	bcc.n	800021a <__udivsi3+0xce>
 800015a:	0a03      	lsrs	r3, r0, #8
 800015c:	428b      	cmp	r3, r1
 800015e:	d344      	bcc.n	80001ea <__udivsi3+0x9e>
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d328      	bcc.n	80001b8 <__udivsi3+0x6c>
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d30d      	bcc.n	8000188 <__udivsi3+0x3c>
 800016c:	22ff      	movs	r2, #255	; 0xff
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	ba12      	rev	r2, r2
 8000172:	0c03      	lsrs	r3, r0, #16
 8000174:	428b      	cmp	r3, r1
 8000176:	d302      	bcc.n	800017e <__udivsi3+0x32>
 8000178:	1212      	asrs	r2, r2, #8
 800017a:	0209      	lsls	r1, r1, #8
 800017c:	d065      	beq.n	800024a <__udivsi3+0xfe>
 800017e:	0b03      	lsrs	r3, r0, #12
 8000180:	428b      	cmp	r3, r1
 8000182:	d319      	bcc.n	80001b8 <__udivsi3+0x6c>
 8000184:	e000      	b.n	8000188 <__udivsi3+0x3c>
 8000186:	0a09      	lsrs	r1, r1, #8
 8000188:	0bc3      	lsrs	r3, r0, #15
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x46>
 800018e:	03cb      	lsls	r3, r1, #15
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b83      	lsrs	r3, r0, #14
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x52>
 800019a:	038b      	lsls	r3, r1, #14
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b43      	lsrs	r3, r0, #13
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x5e>
 80001a6:	034b      	lsls	r3, r1, #13
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0b03      	lsrs	r3, r0, #12
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x6a>
 80001b2:	030b      	lsls	r3, r1, #12
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0ac3      	lsrs	r3, r0, #11
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x76>
 80001be:	02cb      	lsls	r3, r1, #11
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a83      	lsrs	r3, r0, #10
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x82>
 80001ca:	028b      	lsls	r3, r1, #10
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a43      	lsrs	r3, r0, #9
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x8e>
 80001d6:	024b      	lsls	r3, r1, #9
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	0a03      	lsrs	r3, r0, #8
 80001de:	428b      	cmp	r3, r1
 80001e0:	d301      	bcc.n	80001e6 <__udivsi3+0x9a>
 80001e2:	020b      	lsls	r3, r1, #8
 80001e4:	1ac0      	subs	r0, r0, r3
 80001e6:	4152      	adcs	r2, r2
 80001e8:	d2cd      	bcs.n	8000186 <__udivsi3+0x3a>
 80001ea:	09c3      	lsrs	r3, r0, #7
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xa8>
 80001f0:	01cb      	lsls	r3, r1, #7
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0983      	lsrs	r3, r0, #6
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xb4>
 80001fc:	018b      	lsls	r3, r1, #6
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0943      	lsrs	r3, r0, #5
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xc0>
 8000208:	014b      	lsls	r3, r1, #5
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0903      	lsrs	r3, r0, #4
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xcc>
 8000214:	010b      	lsls	r3, r1, #4
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	08c3      	lsrs	r3, r0, #3
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xd8>
 8000220:	00cb      	lsls	r3, r1, #3
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0883      	lsrs	r3, r0, #2
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xe4>
 800022c:	008b      	lsls	r3, r1, #2
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	0843      	lsrs	r3, r0, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d301      	bcc.n	800023c <__udivsi3+0xf0>
 8000238:	004b      	lsls	r3, r1, #1
 800023a:	1ac0      	subs	r0, r0, r3
 800023c:	4152      	adcs	r2, r2
 800023e:	1a41      	subs	r1, r0, r1
 8000240:	d200      	bcs.n	8000244 <__udivsi3+0xf8>
 8000242:	4601      	mov	r1, r0
 8000244:	4152      	adcs	r2, r2
 8000246:	4610      	mov	r0, r2
 8000248:	4770      	bx	lr
 800024a:	e7ff      	b.n	800024c <__udivsi3+0x100>
 800024c:	b501      	push	{r0, lr}
 800024e:	2000      	movs	r0, #0
 8000250:	f000 f8f0 	bl	8000434 <__aeabi_idiv0>
 8000254:	bd02      	pop	{r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_uidivmod>:
 8000258:	2900      	cmp	r1, #0
 800025a:	d0f7      	beq.n	800024c <__udivsi3+0x100>
 800025c:	e776      	b.n	800014c <__udivsi3>
 800025e:	4770      	bx	lr

08000260 <__divsi3>:
 8000260:	4603      	mov	r3, r0
 8000262:	430b      	orrs	r3, r1
 8000264:	d47f      	bmi.n	8000366 <__divsi3+0x106>
 8000266:	2200      	movs	r2, #0
 8000268:	0843      	lsrs	r3, r0, #1
 800026a:	428b      	cmp	r3, r1
 800026c:	d374      	bcc.n	8000358 <__divsi3+0xf8>
 800026e:	0903      	lsrs	r3, r0, #4
 8000270:	428b      	cmp	r3, r1
 8000272:	d35f      	bcc.n	8000334 <__divsi3+0xd4>
 8000274:	0a03      	lsrs	r3, r0, #8
 8000276:	428b      	cmp	r3, r1
 8000278:	d344      	bcc.n	8000304 <__divsi3+0xa4>
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d328      	bcc.n	80002d2 <__divsi3+0x72>
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d30d      	bcc.n	80002a2 <__divsi3+0x42>
 8000286:	22ff      	movs	r2, #255	; 0xff
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	ba12      	rev	r2, r2
 800028c:	0c03      	lsrs	r3, r0, #16
 800028e:	428b      	cmp	r3, r1
 8000290:	d302      	bcc.n	8000298 <__divsi3+0x38>
 8000292:	1212      	asrs	r2, r2, #8
 8000294:	0209      	lsls	r1, r1, #8
 8000296:	d065      	beq.n	8000364 <__divsi3+0x104>
 8000298:	0b03      	lsrs	r3, r0, #12
 800029a:	428b      	cmp	r3, r1
 800029c:	d319      	bcc.n	80002d2 <__divsi3+0x72>
 800029e:	e000      	b.n	80002a2 <__divsi3+0x42>
 80002a0:	0a09      	lsrs	r1, r1, #8
 80002a2:	0bc3      	lsrs	r3, r0, #15
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x4c>
 80002a8:	03cb      	lsls	r3, r1, #15
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b83      	lsrs	r3, r0, #14
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x58>
 80002b4:	038b      	lsls	r3, r1, #14
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b43      	lsrs	r3, r0, #13
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x64>
 80002c0:	034b      	lsls	r3, r1, #13
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0b03      	lsrs	r3, r0, #12
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x70>
 80002cc:	030b      	lsls	r3, r1, #12
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0ac3      	lsrs	r3, r0, #11
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x7c>
 80002d8:	02cb      	lsls	r3, r1, #11
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a83      	lsrs	r3, r0, #10
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x88>
 80002e4:	028b      	lsls	r3, r1, #10
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a43      	lsrs	r3, r0, #9
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0x94>
 80002f0:	024b      	lsls	r3, r1, #9
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	0a03      	lsrs	r3, r0, #8
 80002f8:	428b      	cmp	r3, r1
 80002fa:	d301      	bcc.n	8000300 <__divsi3+0xa0>
 80002fc:	020b      	lsls	r3, r1, #8
 80002fe:	1ac0      	subs	r0, r0, r3
 8000300:	4152      	adcs	r2, r2
 8000302:	d2cd      	bcs.n	80002a0 <__divsi3+0x40>
 8000304:	09c3      	lsrs	r3, r0, #7
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xae>
 800030a:	01cb      	lsls	r3, r1, #7
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0983      	lsrs	r3, r0, #6
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xba>
 8000316:	018b      	lsls	r3, r1, #6
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0943      	lsrs	r3, r0, #5
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xc6>
 8000322:	014b      	lsls	r3, r1, #5
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0903      	lsrs	r3, r0, #4
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xd2>
 800032e:	010b      	lsls	r3, r1, #4
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	08c3      	lsrs	r3, r0, #3
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xde>
 800033a:	00cb      	lsls	r3, r1, #3
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0883      	lsrs	r3, r0, #2
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xea>
 8000346:	008b      	lsls	r3, r1, #2
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	0843      	lsrs	r3, r0, #1
 800034e:	428b      	cmp	r3, r1
 8000350:	d301      	bcc.n	8000356 <__divsi3+0xf6>
 8000352:	004b      	lsls	r3, r1, #1
 8000354:	1ac0      	subs	r0, r0, r3
 8000356:	4152      	adcs	r2, r2
 8000358:	1a41      	subs	r1, r0, r1
 800035a:	d200      	bcs.n	800035e <__divsi3+0xfe>
 800035c:	4601      	mov	r1, r0
 800035e:	4152      	adcs	r2, r2
 8000360:	4610      	mov	r0, r2
 8000362:	4770      	bx	lr
 8000364:	e05d      	b.n	8000422 <__divsi3+0x1c2>
 8000366:	0fca      	lsrs	r2, r1, #31
 8000368:	d000      	beq.n	800036c <__divsi3+0x10c>
 800036a:	4249      	negs	r1, r1
 800036c:	1003      	asrs	r3, r0, #32
 800036e:	d300      	bcc.n	8000372 <__divsi3+0x112>
 8000370:	4240      	negs	r0, r0
 8000372:	4053      	eors	r3, r2
 8000374:	2200      	movs	r2, #0
 8000376:	469c      	mov	ip, r3
 8000378:	0903      	lsrs	r3, r0, #4
 800037a:	428b      	cmp	r3, r1
 800037c:	d32d      	bcc.n	80003da <__divsi3+0x17a>
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d312      	bcc.n	80003aa <__divsi3+0x14a>
 8000384:	22fc      	movs	r2, #252	; 0xfc
 8000386:	0189      	lsls	r1, r1, #6
 8000388:	ba12      	rev	r2, r2
 800038a:	0a03      	lsrs	r3, r0, #8
 800038c:	428b      	cmp	r3, r1
 800038e:	d30c      	bcc.n	80003aa <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	1192      	asrs	r2, r2, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d308      	bcc.n	80003aa <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d304      	bcc.n	80003aa <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	d03a      	beq.n	800041a <__divsi3+0x1ba>
 80003a4:	1192      	asrs	r2, r2, #6
 80003a6:	e000      	b.n	80003aa <__divsi3+0x14a>
 80003a8:	0989      	lsrs	r1, r1, #6
 80003aa:	09c3      	lsrs	r3, r0, #7
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x154>
 80003b0:	01cb      	lsls	r3, r1, #7
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0983      	lsrs	r3, r0, #6
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x160>
 80003bc:	018b      	lsls	r3, r1, #6
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0943      	lsrs	r3, r0, #5
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x16c>
 80003c8:	014b      	lsls	r3, r1, #5
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	0903      	lsrs	r3, r0, #4
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x178>
 80003d4:	010b      	lsls	r3, r1, #4
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	08c3      	lsrs	r3, r0, #3
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x184>
 80003e0:	00cb      	lsls	r3, r1, #3
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	0883      	lsrs	r3, r0, #2
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x190>
 80003ec:	008b      	lsls	r3, r1, #2
 80003ee:	1ac0      	subs	r0, r0, r3
 80003f0:	4152      	adcs	r2, r2
 80003f2:	d2d9      	bcs.n	80003a8 <__divsi3+0x148>
 80003f4:	0843      	lsrs	r3, r0, #1
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d301      	bcc.n	80003fe <__divsi3+0x19e>
 80003fa:	004b      	lsls	r3, r1, #1
 80003fc:	1ac0      	subs	r0, r0, r3
 80003fe:	4152      	adcs	r2, r2
 8000400:	1a41      	subs	r1, r0, r1
 8000402:	d200      	bcs.n	8000406 <__divsi3+0x1a6>
 8000404:	4601      	mov	r1, r0
 8000406:	4663      	mov	r3, ip
 8000408:	4152      	adcs	r2, r2
 800040a:	105b      	asrs	r3, r3, #1
 800040c:	4610      	mov	r0, r2
 800040e:	d301      	bcc.n	8000414 <__divsi3+0x1b4>
 8000410:	4240      	negs	r0, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d500      	bpl.n	8000418 <__divsi3+0x1b8>
 8000416:	4249      	negs	r1, r1
 8000418:	4770      	bx	lr
 800041a:	4663      	mov	r3, ip
 800041c:	105b      	asrs	r3, r3, #1
 800041e:	d300      	bcc.n	8000422 <__divsi3+0x1c2>
 8000420:	4240      	negs	r0, r0
 8000422:	b501      	push	{r0, lr}
 8000424:	2000      	movs	r0, #0
 8000426:	f000 f805 	bl	8000434 <__aeabi_idiv0>
 800042a:	bd02      	pop	{r1, pc}

0800042c <__aeabi_idivmod>:
 800042c:	2900      	cmp	r1, #0
 800042e:	d0f8      	beq.n	8000422 <__divsi3+0x1c2>
 8000430:	e716      	b.n	8000260 <__divsi3>
 8000432:	4770      	bx	lr

08000434 <__aeabi_idiv0>:
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdrcmple>:
 8000438:	4684      	mov	ip, r0
 800043a:	0010      	movs	r0, r2
 800043c:	4662      	mov	r2, ip
 800043e:	468c      	mov	ip, r1
 8000440:	0019      	movs	r1, r3
 8000442:	4663      	mov	r3, ip
 8000444:	e000      	b.n	8000448 <__aeabi_cdcmpeq>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_cdcmpeq>:
 8000448:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044a:	f001 fa89 	bl	8001960 <__ledf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	d401      	bmi.n	8000456 <__aeabi_cdcmpeq+0xe>
 8000452:	2100      	movs	r1, #0
 8000454:	42c8      	cmn	r0, r1
 8000456:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000458 <__aeabi_dcmpeq>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f9d9 	bl	8001810 <__eqdf2>
 800045e:	4240      	negs	r0, r0
 8000460:	3001      	adds	r0, #1
 8000462:	bd10      	pop	{r4, pc}

08000464 <__aeabi_dcmplt>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f001 fa7b 	bl	8001960 <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	db01      	blt.n	8000472 <__aeabi_dcmplt+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__aeabi_dcmple>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f001 fa71 	bl	8001960 <__ledf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dd01      	ble.n	8000486 <__aeabi_dcmple+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			; (mov r8, r8)

0800048c <__aeabi_dcmpgt>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f001 fa01 	bl	8001894 <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	dc01      	bgt.n	800049a <__aeabi_dcmpgt+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			; (mov r8, r8)

080004a0 <__aeabi_dcmpge>:
 80004a0:	b510      	push	{r4, lr}
 80004a2:	f001 f9f7 	bl	8001894 <__gedf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	da01      	bge.n	80004ae <__aeabi_dcmpge+0xe>
 80004aa:	2000      	movs	r0, #0
 80004ac:	bd10      	pop	{r4, pc}
 80004ae:	2001      	movs	r0, #1
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	46c0      	nop			; (mov r8, r8)

080004b4 <__aeabi_cfrcmple>:
 80004b4:	4684      	mov	ip, r0
 80004b6:	0008      	movs	r0, r1
 80004b8:	4661      	mov	r1, ip
 80004ba:	e7ff      	b.n	80004bc <__aeabi_cfcmpeq>

080004bc <__aeabi_cfcmpeq>:
 80004bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004be:	f000 faad 	bl	8000a1c <__lesf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	d401      	bmi.n	80004ca <__aeabi_cfcmpeq+0xe>
 80004c6:	2100      	movs	r1, #0
 80004c8:	42c8      	cmn	r0, r1
 80004ca:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004cc <__aeabi_fcmpeq>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fa39 	bl	8000944 <__eqsf2>
 80004d2:	4240      	negs	r0, r0
 80004d4:	3001      	adds	r0, #1
 80004d6:	bd10      	pop	{r4, pc}

080004d8 <__aeabi_fcmplt>:
 80004d8:	b510      	push	{r4, lr}
 80004da:	f000 fa9f 	bl	8000a1c <__lesf2>
 80004de:	2800      	cmp	r0, #0
 80004e0:	db01      	blt.n	80004e6 <__aeabi_fcmplt+0xe>
 80004e2:	2000      	movs	r0, #0
 80004e4:	bd10      	pop	{r4, pc}
 80004e6:	2001      	movs	r0, #1
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	46c0      	nop			; (mov r8, r8)

080004ec <__aeabi_fcmple>:
 80004ec:	b510      	push	{r4, lr}
 80004ee:	f000 fa95 	bl	8000a1c <__lesf2>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	dd01      	ble.n	80004fa <__aeabi_fcmple+0xe>
 80004f6:	2000      	movs	r0, #0
 80004f8:	bd10      	pop	{r4, pc}
 80004fa:	2001      	movs	r0, #1
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	46c0      	nop			; (mov r8, r8)

08000500 <__aeabi_fcmpgt>:
 8000500:	b510      	push	{r4, lr}
 8000502:	f000 fa45 	bl	8000990 <__gesf2>
 8000506:	2800      	cmp	r0, #0
 8000508:	dc01      	bgt.n	800050e <__aeabi_fcmpgt+0xe>
 800050a:	2000      	movs	r0, #0
 800050c:	bd10      	pop	{r4, pc}
 800050e:	2001      	movs	r0, #1
 8000510:	bd10      	pop	{r4, pc}
 8000512:	46c0      	nop			; (mov r8, r8)

08000514 <__aeabi_fcmpge>:
 8000514:	b510      	push	{r4, lr}
 8000516:	f000 fa3b 	bl	8000990 <__gesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	da01      	bge.n	8000522 <__aeabi_fcmpge+0xe>
 800051e:	2000      	movs	r0, #0
 8000520:	bd10      	pop	{r4, pc}
 8000522:	2001      	movs	r0, #1
 8000524:	bd10      	pop	{r4, pc}
 8000526:	46c0      	nop			; (mov r8, r8)

08000528 <__aeabi_d2uiz>:
 8000528:	b570      	push	{r4, r5, r6, lr}
 800052a:	2200      	movs	r2, #0
 800052c:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <__aeabi_d2uiz+0x38>)
 800052e:	0004      	movs	r4, r0
 8000530:	000d      	movs	r5, r1
 8000532:	f7ff ffb5 	bl	80004a0 <__aeabi_dcmpge>
 8000536:	2800      	cmp	r0, #0
 8000538:	d104      	bne.n	8000544 <__aeabi_d2uiz+0x1c>
 800053a:	0020      	movs	r0, r4
 800053c:	0029      	movs	r1, r5
 800053e:	f002 f88f 	bl	8002660 <__aeabi_d2iz>
 8000542:	bd70      	pop	{r4, r5, r6, pc}
 8000544:	4b06      	ldr	r3, [pc, #24]	; (8000560 <__aeabi_d2uiz+0x38>)
 8000546:	2200      	movs	r2, #0
 8000548:	0020      	movs	r0, r4
 800054a:	0029      	movs	r1, r5
 800054c:	f001 fcd8 	bl	8001f00 <__aeabi_dsub>
 8000550:	f002 f886 	bl	8002660 <__aeabi_d2iz>
 8000554:	2380      	movs	r3, #128	; 0x80
 8000556:	061b      	lsls	r3, r3, #24
 8000558:	469c      	mov	ip, r3
 800055a:	4460      	add	r0, ip
 800055c:	e7f1      	b.n	8000542 <__aeabi_d2uiz+0x1a>
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	41e00000 	.word	0x41e00000

08000564 <__aeabi_d2lz>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	0005      	movs	r5, r0
 8000568:	000c      	movs	r4, r1
 800056a:	2200      	movs	r2, #0
 800056c:	2300      	movs	r3, #0
 800056e:	0028      	movs	r0, r5
 8000570:	0021      	movs	r1, r4
 8000572:	f7ff ff77 	bl	8000464 <__aeabi_dcmplt>
 8000576:	2800      	cmp	r0, #0
 8000578:	d108      	bne.n	800058c <__aeabi_d2lz+0x28>
 800057a:	0028      	movs	r0, r5
 800057c:	0021      	movs	r1, r4
 800057e:	f000 f80f 	bl	80005a0 <__aeabi_d2ulz>
 8000582:	0002      	movs	r2, r0
 8000584:	000b      	movs	r3, r1
 8000586:	0010      	movs	r0, r2
 8000588:	0019      	movs	r1, r3
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	2380      	movs	r3, #128	; 0x80
 800058e:	061b      	lsls	r3, r3, #24
 8000590:	18e1      	adds	r1, r4, r3
 8000592:	0028      	movs	r0, r5
 8000594:	f000 f804 	bl	80005a0 <__aeabi_d2ulz>
 8000598:	2300      	movs	r3, #0
 800059a:	4242      	negs	r2, r0
 800059c:	418b      	sbcs	r3, r1
 800059e:	e7f2      	b.n	8000586 <__aeabi_d2lz+0x22>

080005a0 <__aeabi_d2ulz>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	2200      	movs	r2, #0
 80005a4:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <__aeabi_d2ulz+0x34>)
 80005a6:	000d      	movs	r5, r1
 80005a8:	0004      	movs	r4, r0
 80005aa:	f001 fa3d 	bl	8001a28 <__aeabi_dmul>
 80005ae:	f7ff ffbb 	bl	8000528 <__aeabi_d2uiz>
 80005b2:	0006      	movs	r6, r0
 80005b4:	f002 f8ba 	bl	800272c <__aeabi_ui2d>
 80005b8:	2200      	movs	r2, #0
 80005ba:	4b07      	ldr	r3, [pc, #28]	; (80005d8 <__aeabi_d2ulz+0x38>)
 80005bc:	f001 fa34 	bl	8001a28 <__aeabi_dmul>
 80005c0:	0002      	movs	r2, r0
 80005c2:	000b      	movs	r3, r1
 80005c4:	0020      	movs	r0, r4
 80005c6:	0029      	movs	r1, r5
 80005c8:	f001 fc9a 	bl	8001f00 <__aeabi_dsub>
 80005cc:	f7ff ffac 	bl	8000528 <__aeabi_d2uiz>
 80005d0:	0031      	movs	r1, r6
 80005d2:	bd70      	pop	{r4, r5, r6, pc}
 80005d4:	3df00000 	.word	0x3df00000
 80005d8:	41f00000 	.word	0x41f00000

080005dc <__aeabi_l2d>:
 80005dc:	b570      	push	{r4, r5, r6, lr}
 80005de:	0006      	movs	r6, r0
 80005e0:	0008      	movs	r0, r1
 80005e2:	f002 f873 	bl	80026cc <__aeabi_i2d>
 80005e6:	2200      	movs	r2, #0
 80005e8:	4b06      	ldr	r3, [pc, #24]	; (8000604 <__aeabi_l2d+0x28>)
 80005ea:	f001 fa1d 	bl	8001a28 <__aeabi_dmul>
 80005ee:	000d      	movs	r5, r1
 80005f0:	0004      	movs	r4, r0
 80005f2:	0030      	movs	r0, r6
 80005f4:	f002 f89a 	bl	800272c <__aeabi_ui2d>
 80005f8:	002b      	movs	r3, r5
 80005fa:	0022      	movs	r2, r4
 80005fc:	f000 fad6 	bl	8000bac <__aeabi_dadd>
 8000600:	bd70      	pop	{r4, r5, r6, pc}
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	41f00000 	.word	0x41f00000

08000608 <__aeabi_fadd>:
 8000608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800060a:	46c6      	mov	lr, r8
 800060c:	0243      	lsls	r3, r0, #9
 800060e:	0a5b      	lsrs	r3, r3, #9
 8000610:	024e      	lsls	r6, r1, #9
 8000612:	0045      	lsls	r5, r0, #1
 8000614:	004f      	lsls	r7, r1, #1
 8000616:	00da      	lsls	r2, r3, #3
 8000618:	0fc4      	lsrs	r4, r0, #31
 800061a:	469c      	mov	ip, r3
 800061c:	0a70      	lsrs	r0, r6, #9
 800061e:	4690      	mov	r8, r2
 8000620:	b500      	push	{lr}
 8000622:	0e2d      	lsrs	r5, r5, #24
 8000624:	0e3f      	lsrs	r7, r7, #24
 8000626:	0fc9      	lsrs	r1, r1, #31
 8000628:	09b6      	lsrs	r6, r6, #6
 800062a:	428c      	cmp	r4, r1
 800062c:	d04b      	beq.n	80006c6 <__aeabi_fadd+0xbe>
 800062e:	1bea      	subs	r2, r5, r7
 8000630:	2a00      	cmp	r2, #0
 8000632:	dd36      	ble.n	80006a2 <__aeabi_fadd+0x9a>
 8000634:	2f00      	cmp	r7, #0
 8000636:	d061      	beq.n	80006fc <__aeabi_fadd+0xf4>
 8000638:	2dff      	cmp	r5, #255	; 0xff
 800063a:	d100      	bne.n	800063e <__aeabi_fadd+0x36>
 800063c:	e0ad      	b.n	800079a <__aeabi_fadd+0x192>
 800063e:	2380      	movs	r3, #128	; 0x80
 8000640:	04db      	lsls	r3, r3, #19
 8000642:	431e      	orrs	r6, r3
 8000644:	2a1b      	cmp	r2, #27
 8000646:	dc00      	bgt.n	800064a <__aeabi_fadd+0x42>
 8000648:	e0d3      	b.n	80007f2 <__aeabi_fadd+0x1ea>
 800064a:	2001      	movs	r0, #1
 800064c:	4643      	mov	r3, r8
 800064e:	1a18      	subs	r0, r3, r0
 8000650:	0143      	lsls	r3, r0, #5
 8000652:	d400      	bmi.n	8000656 <__aeabi_fadd+0x4e>
 8000654:	e08c      	b.n	8000770 <__aeabi_fadd+0x168>
 8000656:	0180      	lsls	r0, r0, #6
 8000658:	0987      	lsrs	r7, r0, #6
 800065a:	0038      	movs	r0, r7
 800065c:	f002 f95c 	bl	8002918 <__clzsi2>
 8000660:	3805      	subs	r0, #5
 8000662:	4087      	lsls	r7, r0
 8000664:	4285      	cmp	r5, r0
 8000666:	dc00      	bgt.n	800066a <__aeabi_fadd+0x62>
 8000668:	e0b6      	b.n	80007d8 <__aeabi_fadd+0x1d0>
 800066a:	1a2d      	subs	r5, r5, r0
 800066c:	48b3      	ldr	r0, [pc, #716]	; (800093c <__aeabi_fadd+0x334>)
 800066e:	4038      	ands	r0, r7
 8000670:	0743      	lsls	r3, r0, #29
 8000672:	d004      	beq.n	800067e <__aeabi_fadd+0x76>
 8000674:	230f      	movs	r3, #15
 8000676:	4003      	ands	r3, r0
 8000678:	2b04      	cmp	r3, #4
 800067a:	d000      	beq.n	800067e <__aeabi_fadd+0x76>
 800067c:	3004      	adds	r0, #4
 800067e:	0143      	lsls	r3, r0, #5
 8000680:	d400      	bmi.n	8000684 <__aeabi_fadd+0x7c>
 8000682:	e078      	b.n	8000776 <__aeabi_fadd+0x16e>
 8000684:	1c6a      	adds	r2, r5, #1
 8000686:	2dfe      	cmp	r5, #254	; 0xfe
 8000688:	d065      	beq.n	8000756 <__aeabi_fadd+0x14e>
 800068a:	0180      	lsls	r0, r0, #6
 800068c:	0a43      	lsrs	r3, r0, #9
 800068e:	469c      	mov	ip, r3
 8000690:	b2d2      	uxtb	r2, r2
 8000692:	4663      	mov	r3, ip
 8000694:	05d0      	lsls	r0, r2, #23
 8000696:	4318      	orrs	r0, r3
 8000698:	07e4      	lsls	r4, r4, #31
 800069a:	4320      	orrs	r0, r4
 800069c:	bc80      	pop	{r7}
 800069e:	46b8      	mov	r8, r7
 80006a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006a2:	2a00      	cmp	r2, #0
 80006a4:	d035      	beq.n	8000712 <__aeabi_fadd+0x10a>
 80006a6:	1b7a      	subs	r2, r7, r5
 80006a8:	2d00      	cmp	r5, #0
 80006aa:	d000      	beq.n	80006ae <__aeabi_fadd+0xa6>
 80006ac:	e0af      	b.n	800080e <__aeabi_fadd+0x206>
 80006ae:	4643      	mov	r3, r8
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d100      	bne.n	80006b6 <__aeabi_fadd+0xae>
 80006b4:	e0a7      	b.n	8000806 <__aeabi_fadd+0x1fe>
 80006b6:	1e53      	subs	r3, r2, #1
 80006b8:	2a01      	cmp	r2, #1
 80006ba:	d100      	bne.n	80006be <__aeabi_fadd+0xb6>
 80006bc:	e12f      	b.n	800091e <__aeabi_fadd+0x316>
 80006be:	2aff      	cmp	r2, #255	; 0xff
 80006c0:	d069      	beq.n	8000796 <__aeabi_fadd+0x18e>
 80006c2:	001a      	movs	r2, r3
 80006c4:	e0aa      	b.n	800081c <__aeabi_fadd+0x214>
 80006c6:	1be9      	subs	r1, r5, r7
 80006c8:	2900      	cmp	r1, #0
 80006ca:	dd70      	ble.n	80007ae <__aeabi_fadd+0x1a6>
 80006cc:	2f00      	cmp	r7, #0
 80006ce:	d037      	beq.n	8000740 <__aeabi_fadd+0x138>
 80006d0:	2dff      	cmp	r5, #255	; 0xff
 80006d2:	d062      	beq.n	800079a <__aeabi_fadd+0x192>
 80006d4:	2380      	movs	r3, #128	; 0x80
 80006d6:	04db      	lsls	r3, r3, #19
 80006d8:	431e      	orrs	r6, r3
 80006da:	291b      	cmp	r1, #27
 80006dc:	dc00      	bgt.n	80006e0 <__aeabi_fadd+0xd8>
 80006de:	e0b0      	b.n	8000842 <__aeabi_fadd+0x23a>
 80006e0:	2001      	movs	r0, #1
 80006e2:	4440      	add	r0, r8
 80006e4:	0143      	lsls	r3, r0, #5
 80006e6:	d543      	bpl.n	8000770 <__aeabi_fadd+0x168>
 80006e8:	3501      	adds	r5, #1
 80006ea:	2dff      	cmp	r5, #255	; 0xff
 80006ec:	d033      	beq.n	8000756 <__aeabi_fadd+0x14e>
 80006ee:	2301      	movs	r3, #1
 80006f0:	4a93      	ldr	r2, [pc, #588]	; (8000940 <__aeabi_fadd+0x338>)
 80006f2:	4003      	ands	r3, r0
 80006f4:	0840      	lsrs	r0, r0, #1
 80006f6:	4010      	ands	r0, r2
 80006f8:	4318      	orrs	r0, r3
 80006fa:	e7b9      	b.n	8000670 <__aeabi_fadd+0x68>
 80006fc:	2e00      	cmp	r6, #0
 80006fe:	d100      	bne.n	8000702 <__aeabi_fadd+0xfa>
 8000700:	e083      	b.n	800080a <__aeabi_fadd+0x202>
 8000702:	1e51      	subs	r1, r2, #1
 8000704:	2a01      	cmp	r2, #1
 8000706:	d100      	bne.n	800070a <__aeabi_fadd+0x102>
 8000708:	e0d8      	b.n	80008bc <__aeabi_fadd+0x2b4>
 800070a:	2aff      	cmp	r2, #255	; 0xff
 800070c:	d045      	beq.n	800079a <__aeabi_fadd+0x192>
 800070e:	000a      	movs	r2, r1
 8000710:	e798      	b.n	8000644 <__aeabi_fadd+0x3c>
 8000712:	27fe      	movs	r7, #254	; 0xfe
 8000714:	1c6a      	adds	r2, r5, #1
 8000716:	4217      	tst	r7, r2
 8000718:	d000      	beq.n	800071c <__aeabi_fadd+0x114>
 800071a:	e086      	b.n	800082a <__aeabi_fadd+0x222>
 800071c:	2d00      	cmp	r5, #0
 800071e:	d000      	beq.n	8000722 <__aeabi_fadd+0x11a>
 8000720:	e0b7      	b.n	8000892 <__aeabi_fadd+0x28a>
 8000722:	4643      	mov	r3, r8
 8000724:	2b00      	cmp	r3, #0
 8000726:	d100      	bne.n	800072a <__aeabi_fadd+0x122>
 8000728:	e0f3      	b.n	8000912 <__aeabi_fadd+0x30a>
 800072a:	2200      	movs	r2, #0
 800072c:	2e00      	cmp	r6, #0
 800072e:	d0b0      	beq.n	8000692 <__aeabi_fadd+0x8a>
 8000730:	1b98      	subs	r0, r3, r6
 8000732:	0143      	lsls	r3, r0, #5
 8000734:	d400      	bmi.n	8000738 <__aeabi_fadd+0x130>
 8000736:	e0fa      	b.n	800092e <__aeabi_fadd+0x326>
 8000738:	4643      	mov	r3, r8
 800073a:	000c      	movs	r4, r1
 800073c:	1af0      	subs	r0, r6, r3
 800073e:	e797      	b.n	8000670 <__aeabi_fadd+0x68>
 8000740:	2e00      	cmp	r6, #0
 8000742:	d100      	bne.n	8000746 <__aeabi_fadd+0x13e>
 8000744:	e0c8      	b.n	80008d8 <__aeabi_fadd+0x2d0>
 8000746:	1e4a      	subs	r2, r1, #1
 8000748:	2901      	cmp	r1, #1
 800074a:	d100      	bne.n	800074e <__aeabi_fadd+0x146>
 800074c:	e0ae      	b.n	80008ac <__aeabi_fadd+0x2a4>
 800074e:	29ff      	cmp	r1, #255	; 0xff
 8000750:	d023      	beq.n	800079a <__aeabi_fadd+0x192>
 8000752:	0011      	movs	r1, r2
 8000754:	e7c1      	b.n	80006da <__aeabi_fadd+0xd2>
 8000756:	2300      	movs	r3, #0
 8000758:	22ff      	movs	r2, #255	; 0xff
 800075a:	469c      	mov	ip, r3
 800075c:	e799      	b.n	8000692 <__aeabi_fadd+0x8a>
 800075e:	21fe      	movs	r1, #254	; 0xfe
 8000760:	1c6a      	adds	r2, r5, #1
 8000762:	4211      	tst	r1, r2
 8000764:	d077      	beq.n	8000856 <__aeabi_fadd+0x24e>
 8000766:	2aff      	cmp	r2, #255	; 0xff
 8000768:	d0f5      	beq.n	8000756 <__aeabi_fadd+0x14e>
 800076a:	0015      	movs	r5, r2
 800076c:	4446      	add	r6, r8
 800076e:	0870      	lsrs	r0, r6, #1
 8000770:	0743      	lsls	r3, r0, #29
 8000772:	d000      	beq.n	8000776 <__aeabi_fadd+0x16e>
 8000774:	e77e      	b.n	8000674 <__aeabi_fadd+0x6c>
 8000776:	08c3      	lsrs	r3, r0, #3
 8000778:	2dff      	cmp	r5, #255	; 0xff
 800077a:	d00e      	beq.n	800079a <__aeabi_fadd+0x192>
 800077c:	025b      	lsls	r3, r3, #9
 800077e:	0a5b      	lsrs	r3, r3, #9
 8000780:	469c      	mov	ip, r3
 8000782:	b2ea      	uxtb	r2, r5
 8000784:	e785      	b.n	8000692 <__aeabi_fadd+0x8a>
 8000786:	2e00      	cmp	r6, #0
 8000788:	d007      	beq.n	800079a <__aeabi_fadd+0x192>
 800078a:	2280      	movs	r2, #128	; 0x80
 800078c:	03d2      	lsls	r2, r2, #15
 800078e:	4213      	tst	r3, r2
 8000790:	d003      	beq.n	800079a <__aeabi_fadd+0x192>
 8000792:	4210      	tst	r0, r2
 8000794:	d101      	bne.n	800079a <__aeabi_fadd+0x192>
 8000796:	000c      	movs	r4, r1
 8000798:	0003      	movs	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d0db      	beq.n	8000756 <__aeabi_fadd+0x14e>
 800079e:	2080      	movs	r0, #128	; 0x80
 80007a0:	03c0      	lsls	r0, r0, #15
 80007a2:	4318      	orrs	r0, r3
 80007a4:	0240      	lsls	r0, r0, #9
 80007a6:	0a43      	lsrs	r3, r0, #9
 80007a8:	469c      	mov	ip, r3
 80007aa:	22ff      	movs	r2, #255	; 0xff
 80007ac:	e771      	b.n	8000692 <__aeabi_fadd+0x8a>
 80007ae:	2900      	cmp	r1, #0
 80007b0:	d0d5      	beq.n	800075e <__aeabi_fadd+0x156>
 80007b2:	1b7a      	subs	r2, r7, r5
 80007b4:	2d00      	cmp	r5, #0
 80007b6:	d160      	bne.n	800087a <__aeabi_fadd+0x272>
 80007b8:	4643      	mov	r3, r8
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d024      	beq.n	8000808 <__aeabi_fadd+0x200>
 80007be:	1e53      	subs	r3, r2, #1
 80007c0:	2a01      	cmp	r2, #1
 80007c2:	d073      	beq.n	80008ac <__aeabi_fadd+0x2a4>
 80007c4:	2aff      	cmp	r2, #255	; 0xff
 80007c6:	d0e7      	beq.n	8000798 <__aeabi_fadd+0x190>
 80007c8:	001a      	movs	r2, r3
 80007ca:	2a1b      	cmp	r2, #27
 80007cc:	dc00      	bgt.n	80007d0 <__aeabi_fadd+0x1c8>
 80007ce:	e085      	b.n	80008dc <__aeabi_fadd+0x2d4>
 80007d0:	2001      	movs	r0, #1
 80007d2:	003d      	movs	r5, r7
 80007d4:	1980      	adds	r0, r0, r6
 80007d6:	e785      	b.n	80006e4 <__aeabi_fadd+0xdc>
 80007d8:	2320      	movs	r3, #32
 80007da:	003a      	movs	r2, r7
 80007dc:	1b45      	subs	r5, r0, r5
 80007de:	0038      	movs	r0, r7
 80007e0:	3501      	adds	r5, #1
 80007e2:	40ea      	lsrs	r2, r5
 80007e4:	1b5d      	subs	r5, r3, r5
 80007e6:	40a8      	lsls	r0, r5
 80007e8:	1e43      	subs	r3, r0, #1
 80007ea:	4198      	sbcs	r0, r3
 80007ec:	2500      	movs	r5, #0
 80007ee:	4310      	orrs	r0, r2
 80007f0:	e73e      	b.n	8000670 <__aeabi_fadd+0x68>
 80007f2:	2320      	movs	r3, #32
 80007f4:	0030      	movs	r0, r6
 80007f6:	1a9b      	subs	r3, r3, r2
 80007f8:	0031      	movs	r1, r6
 80007fa:	4098      	lsls	r0, r3
 80007fc:	40d1      	lsrs	r1, r2
 80007fe:	1e43      	subs	r3, r0, #1
 8000800:	4198      	sbcs	r0, r3
 8000802:	4308      	orrs	r0, r1
 8000804:	e722      	b.n	800064c <__aeabi_fadd+0x44>
 8000806:	000c      	movs	r4, r1
 8000808:	0003      	movs	r3, r0
 800080a:	0015      	movs	r5, r2
 800080c:	e7b4      	b.n	8000778 <__aeabi_fadd+0x170>
 800080e:	2fff      	cmp	r7, #255	; 0xff
 8000810:	d0c1      	beq.n	8000796 <__aeabi_fadd+0x18e>
 8000812:	2380      	movs	r3, #128	; 0x80
 8000814:	4640      	mov	r0, r8
 8000816:	04db      	lsls	r3, r3, #19
 8000818:	4318      	orrs	r0, r3
 800081a:	4680      	mov	r8, r0
 800081c:	2a1b      	cmp	r2, #27
 800081e:	dd51      	ble.n	80008c4 <__aeabi_fadd+0x2bc>
 8000820:	2001      	movs	r0, #1
 8000822:	000c      	movs	r4, r1
 8000824:	003d      	movs	r5, r7
 8000826:	1a30      	subs	r0, r6, r0
 8000828:	e712      	b.n	8000650 <__aeabi_fadd+0x48>
 800082a:	4643      	mov	r3, r8
 800082c:	1b9f      	subs	r7, r3, r6
 800082e:	017b      	lsls	r3, r7, #5
 8000830:	d42b      	bmi.n	800088a <__aeabi_fadd+0x282>
 8000832:	2f00      	cmp	r7, #0
 8000834:	d000      	beq.n	8000838 <__aeabi_fadd+0x230>
 8000836:	e710      	b.n	800065a <__aeabi_fadd+0x52>
 8000838:	2300      	movs	r3, #0
 800083a:	2400      	movs	r4, #0
 800083c:	2200      	movs	r2, #0
 800083e:	469c      	mov	ip, r3
 8000840:	e727      	b.n	8000692 <__aeabi_fadd+0x8a>
 8000842:	2320      	movs	r3, #32
 8000844:	0032      	movs	r2, r6
 8000846:	0030      	movs	r0, r6
 8000848:	40ca      	lsrs	r2, r1
 800084a:	1a59      	subs	r1, r3, r1
 800084c:	4088      	lsls	r0, r1
 800084e:	1e43      	subs	r3, r0, #1
 8000850:	4198      	sbcs	r0, r3
 8000852:	4310      	orrs	r0, r2
 8000854:	e745      	b.n	80006e2 <__aeabi_fadd+0xda>
 8000856:	2d00      	cmp	r5, #0
 8000858:	d14a      	bne.n	80008f0 <__aeabi_fadd+0x2e8>
 800085a:	4643      	mov	r3, r8
 800085c:	2b00      	cmp	r3, #0
 800085e:	d063      	beq.n	8000928 <__aeabi_fadd+0x320>
 8000860:	2200      	movs	r2, #0
 8000862:	2e00      	cmp	r6, #0
 8000864:	d100      	bne.n	8000868 <__aeabi_fadd+0x260>
 8000866:	e714      	b.n	8000692 <__aeabi_fadd+0x8a>
 8000868:	0030      	movs	r0, r6
 800086a:	4440      	add	r0, r8
 800086c:	0143      	lsls	r3, r0, #5
 800086e:	d400      	bmi.n	8000872 <__aeabi_fadd+0x26a>
 8000870:	e77e      	b.n	8000770 <__aeabi_fadd+0x168>
 8000872:	4b32      	ldr	r3, [pc, #200]	; (800093c <__aeabi_fadd+0x334>)
 8000874:	3501      	adds	r5, #1
 8000876:	4018      	ands	r0, r3
 8000878:	e77a      	b.n	8000770 <__aeabi_fadd+0x168>
 800087a:	2fff      	cmp	r7, #255	; 0xff
 800087c:	d08c      	beq.n	8000798 <__aeabi_fadd+0x190>
 800087e:	2380      	movs	r3, #128	; 0x80
 8000880:	4641      	mov	r1, r8
 8000882:	04db      	lsls	r3, r3, #19
 8000884:	4319      	orrs	r1, r3
 8000886:	4688      	mov	r8, r1
 8000888:	e79f      	b.n	80007ca <__aeabi_fadd+0x1c2>
 800088a:	4643      	mov	r3, r8
 800088c:	000c      	movs	r4, r1
 800088e:	1af7      	subs	r7, r6, r3
 8000890:	e6e3      	b.n	800065a <__aeabi_fadd+0x52>
 8000892:	4642      	mov	r2, r8
 8000894:	2a00      	cmp	r2, #0
 8000896:	d000      	beq.n	800089a <__aeabi_fadd+0x292>
 8000898:	e775      	b.n	8000786 <__aeabi_fadd+0x17e>
 800089a:	2e00      	cmp	r6, #0
 800089c:	d000      	beq.n	80008a0 <__aeabi_fadd+0x298>
 800089e:	e77a      	b.n	8000796 <__aeabi_fadd+0x18e>
 80008a0:	2380      	movs	r3, #128	; 0x80
 80008a2:	03db      	lsls	r3, r3, #15
 80008a4:	2400      	movs	r4, #0
 80008a6:	469c      	mov	ip, r3
 80008a8:	22ff      	movs	r2, #255	; 0xff
 80008aa:	e6f2      	b.n	8000692 <__aeabi_fadd+0x8a>
 80008ac:	0030      	movs	r0, r6
 80008ae:	4440      	add	r0, r8
 80008b0:	2501      	movs	r5, #1
 80008b2:	0143      	lsls	r3, r0, #5
 80008b4:	d400      	bmi.n	80008b8 <__aeabi_fadd+0x2b0>
 80008b6:	e75b      	b.n	8000770 <__aeabi_fadd+0x168>
 80008b8:	2502      	movs	r5, #2
 80008ba:	e718      	b.n	80006ee <__aeabi_fadd+0xe6>
 80008bc:	4643      	mov	r3, r8
 80008be:	2501      	movs	r5, #1
 80008c0:	1b98      	subs	r0, r3, r6
 80008c2:	e6c5      	b.n	8000650 <__aeabi_fadd+0x48>
 80008c4:	2320      	movs	r3, #32
 80008c6:	4644      	mov	r4, r8
 80008c8:	4640      	mov	r0, r8
 80008ca:	40d4      	lsrs	r4, r2
 80008cc:	1a9a      	subs	r2, r3, r2
 80008ce:	4090      	lsls	r0, r2
 80008d0:	1e43      	subs	r3, r0, #1
 80008d2:	4198      	sbcs	r0, r3
 80008d4:	4320      	orrs	r0, r4
 80008d6:	e7a4      	b.n	8000822 <__aeabi_fadd+0x21a>
 80008d8:	000d      	movs	r5, r1
 80008da:	e74d      	b.n	8000778 <__aeabi_fadd+0x170>
 80008dc:	2320      	movs	r3, #32
 80008de:	4641      	mov	r1, r8
 80008e0:	4640      	mov	r0, r8
 80008e2:	40d1      	lsrs	r1, r2
 80008e4:	1a9a      	subs	r2, r3, r2
 80008e6:	4090      	lsls	r0, r2
 80008e8:	1e43      	subs	r3, r0, #1
 80008ea:	4198      	sbcs	r0, r3
 80008ec:	4308      	orrs	r0, r1
 80008ee:	e770      	b.n	80007d2 <__aeabi_fadd+0x1ca>
 80008f0:	4642      	mov	r2, r8
 80008f2:	2a00      	cmp	r2, #0
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fadd+0x2f0>
 80008f6:	e74f      	b.n	8000798 <__aeabi_fadd+0x190>
 80008f8:	2e00      	cmp	r6, #0
 80008fa:	d100      	bne.n	80008fe <__aeabi_fadd+0x2f6>
 80008fc:	e74d      	b.n	800079a <__aeabi_fadd+0x192>
 80008fe:	2280      	movs	r2, #128	; 0x80
 8000900:	03d2      	lsls	r2, r2, #15
 8000902:	4213      	tst	r3, r2
 8000904:	d100      	bne.n	8000908 <__aeabi_fadd+0x300>
 8000906:	e748      	b.n	800079a <__aeabi_fadd+0x192>
 8000908:	4210      	tst	r0, r2
 800090a:	d000      	beq.n	800090e <__aeabi_fadd+0x306>
 800090c:	e745      	b.n	800079a <__aeabi_fadd+0x192>
 800090e:	0003      	movs	r3, r0
 8000910:	e743      	b.n	800079a <__aeabi_fadd+0x192>
 8000912:	2e00      	cmp	r6, #0
 8000914:	d090      	beq.n	8000838 <__aeabi_fadd+0x230>
 8000916:	000c      	movs	r4, r1
 8000918:	4684      	mov	ip, r0
 800091a:	2200      	movs	r2, #0
 800091c:	e6b9      	b.n	8000692 <__aeabi_fadd+0x8a>
 800091e:	4643      	mov	r3, r8
 8000920:	000c      	movs	r4, r1
 8000922:	1af0      	subs	r0, r6, r3
 8000924:	3501      	adds	r5, #1
 8000926:	e693      	b.n	8000650 <__aeabi_fadd+0x48>
 8000928:	4684      	mov	ip, r0
 800092a:	2200      	movs	r2, #0
 800092c:	e6b1      	b.n	8000692 <__aeabi_fadd+0x8a>
 800092e:	2800      	cmp	r0, #0
 8000930:	d000      	beq.n	8000934 <__aeabi_fadd+0x32c>
 8000932:	e71d      	b.n	8000770 <__aeabi_fadd+0x168>
 8000934:	2300      	movs	r3, #0
 8000936:	2400      	movs	r4, #0
 8000938:	469c      	mov	ip, r3
 800093a:	e6aa      	b.n	8000692 <__aeabi_fadd+0x8a>
 800093c:	fbffffff 	.word	0xfbffffff
 8000940:	7dffffff 	.word	0x7dffffff

08000944 <__eqsf2>:
 8000944:	b570      	push	{r4, r5, r6, lr}
 8000946:	0042      	lsls	r2, r0, #1
 8000948:	0245      	lsls	r5, r0, #9
 800094a:	024e      	lsls	r6, r1, #9
 800094c:	004c      	lsls	r4, r1, #1
 800094e:	0fc3      	lsrs	r3, r0, #31
 8000950:	0a6d      	lsrs	r5, r5, #9
 8000952:	2001      	movs	r0, #1
 8000954:	0e12      	lsrs	r2, r2, #24
 8000956:	0a76      	lsrs	r6, r6, #9
 8000958:	0e24      	lsrs	r4, r4, #24
 800095a:	0fc9      	lsrs	r1, r1, #31
 800095c:	2aff      	cmp	r2, #255	; 0xff
 800095e:	d006      	beq.n	800096e <__eqsf2+0x2a>
 8000960:	2cff      	cmp	r4, #255	; 0xff
 8000962:	d003      	beq.n	800096c <__eqsf2+0x28>
 8000964:	42a2      	cmp	r2, r4
 8000966:	d101      	bne.n	800096c <__eqsf2+0x28>
 8000968:	42b5      	cmp	r5, r6
 800096a:	d006      	beq.n	800097a <__eqsf2+0x36>
 800096c:	bd70      	pop	{r4, r5, r6, pc}
 800096e:	2d00      	cmp	r5, #0
 8000970:	d1fc      	bne.n	800096c <__eqsf2+0x28>
 8000972:	2cff      	cmp	r4, #255	; 0xff
 8000974:	d1fa      	bne.n	800096c <__eqsf2+0x28>
 8000976:	2e00      	cmp	r6, #0
 8000978:	d1f8      	bne.n	800096c <__eqsf2+0x28>
 800097a:	428b      	cmp	r3, r1
 800097c:	d006      	beq.n	800098c <__eqsf2+0x48>
 800097e:	2001      	movs	r0, #1
 8000980:	2a00      	cmp	r2, #0
 8000982:	d1f3      	bne.n	800096c <__eqsf2+0x28>
 8000984:	0028      	movs	r0, r5
 8000986:	1e43      	subs	r3, r0, #1
 8000988:	4198      	sbcs	r0, r3
 800098a:	e7ef      	b.n	800096c <__eqsf2+0x28>
 800098c:	2000      	movs	r0, #0
 800098e:	e7ed      	b.n	800096c <__eqsf2+0x28>

08000990 <__gesf2>:
 8000990:	b570      	push	{r4, r5, r6, lr}
 8000992:	0042      	lsls	r2, r0, #1
 8000994:	0245      	lsls	r5, r0, #9
 8000996:	024e      	lsls	r6, r1, #9
 8000998:	004c      	lsls	r4, r1, #1
 800099a:	0fc3      	lsrs	r3, r0, #31
 800099c:	0a6d      	lsrs	r5, r5, #9
 800099e:	0e12      	lsrs	r2, r2, #24
 80009a0:	0a76      	lsrs	r6, r6, #9
 80009a2:	0e24      	lsrs	r4, r4, #24
 80009a4:	0fc8      	lsrs	r0, r1, #31
 80009a6:	2aff      	cmp	r2, #255	; 0xff
 80009a8:	d01b      	beq.n	80009e2 <__gesf2+0x52>
 80009aa:	2cff      	cmp	r4, #255	; 0xff
 80009ac:	d00e      	beq.n	80009cc <__gesf2+0x3c>
 80009ae:	2a00      	cmp	r2, #0
 80009b0:	d11b      	bne.n	80009ea <__gesf2+0x5a>
 80009b2:	2c00      	cmp	r4, #0
 80009b4:	d101      	bne.n	80009ba <__gesf2+0x2a>
 80009b6:	2e00      	cmp	r6, #0
 80009b8:	d01c      	beq.n	80009f4 <__gesf2+0x64>
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d00c      	beq.n	80009d8 <__gesf2+0x48>
 80009be:	4283      	cmp	r3, r0
 80009c0:	d01c      	beq.n	80009fc <__gesf2+0x6c>
 80009c2:	2102      	movs	r1, #2
 80009c4:	1e58      	subs	r0, r3, #1
 80009c6:	4008      	ands	r0, r1
 80009c8:	3801      	subs	r0, #1
 80009ca:	bd70      	pop	{r4, r5, r6, pc}
 80009cc:	2e00      	cmp	r6, #0
 80009ce:	d122      	bne.n	8000a16 <__gesf2+0x86>
 80009d0:	2a00      	cmp	r2, #0
 80009d2:	d1f4      	bne.n	80009be <__gesf2+0x2e>
 80009d4:	2d00      	cmp	r5, #0
 80009d6:	d1f2      	bne.n	80009be <__gesf2+0x2e>
 80009d8:	2800      	cmp	r0, #0
 80009da:	d1f6      	bne.n	80009ca <__gesf2+0x3a>
 80009dc:	2001      	movs	r0, #1
 80009de:	4240      	negs	r0, r0
 80009e0:	e7f3      	b.n	80009ca <__gesf2+0x3a>
 80009e2:	2d00      	cmp	r5, #0
 80009e4:	d117      	bne.n	8000a16 <__gesf2+0x86>
 80009e6:	2cff      	cmp	r4, #255	; 0xff
 80009e8:	d0f0      	beq.n	80009cc <__gesf2+0x3c>
 80009ea:	2c00      	cmp	r4, #0
 80009ec:	d1e7      	bne.n	80009be <__gesf2+0x2e>
 80009ee:	2e00      	cmp	r6, #0
 80009f0:	d1e5      	bne.n	80009be <__gesf2+0x2e>
 80009f2:	e7e6      	b.n	80009c2 <__gesf2+0x32>
 80009f4:	2000      	movs	r0, #0
 80009f6:	2d00      	cmp	r5, #0
 80009f8:	d0e7      	beq.n	80009ca <__gesf2+0x3a>
 80009fa:	e7e2      	b.n	80009c2 <__gesf2+0x32>
 80009fc:	42a2      	cmp	r2, r4
 80009fe:	dc05      	bgt.n	8000a0c <__gesf2+0x7c>
 8000a00:	dbea      	blt.n	80009d8 <__gesf2+0x48>
 8000a02:	42b5      	cmp	r5, r6
 8000a04:	d802      	bhi.n	8000a0c <__gesf2+0x7c>
 8000a06:	d3e7      	bcc.n	80009d8 <__gesf2+0x48>
 8000a08:	2000      	movs	r0, #0
 8000a0a:	e7de      	b.n	80009ca <__gesf2+0x3a>
 8000a0c:	4243      	negs	r3, r0
 8000a0e:	4158      	adcs	r0, r3
 8000a10:	0040      	lsls	r0, r0, #1
 8000a12:	3801      	subs	r0, #1
 8000a14:	e7d9      	b.n	80009ca <__gesf2+0x3a>
 8000a16:	2002      	movs	r0, #2
 8000a18:	4240      	negs	r0, r0
 8000a1a:	e7d6      	b.n	80009ca <__gesf2+0x3a>

08000a1c <__lesf2>:
 8000a1c:	b570      	push	{r4, r5, r6, lr}
 8000a1e:	0042      	lsls	r2, r0, #1
 8000a20:	0245      	lsls	r5, r0, #9
 8000a22:	024e      	lsls	r6, r1, #9
 8000a24:	004c      	lsls	r4, r1, #1
 8000a26:	0fc3      	lsrs	r3, r0, #31
 8000a28:	0a6d      	lsrs	r5, r5, #9
 8000a2a:	0e12      	lsrs	r2, r2, #24
 8000a2c:	0a76      	lsrs	r6, r6, #9
 8000a2e:	0e24      	lsrs	r4, r4, #24
 8000a30:	0fc8      	lsrs	r0, r1, #31
 8000a32:	2aff      	cmp	r2, #255	; 0xff
 8000a34:	d00b      	beq.n	8000a4e <__lesf2+0x32>
 8000a36:	2cff      	cmp	r4, #255	; 0xff
 8000a38:	d00d      	beq.n	8000a56 <__lesf2+0x3a>
 8000a3a:	2a00      	cmp	r2, #0
 8000a3c:	d11f      	bne.n	8000a7e <__lesf2+0x62>
 8000a3e:	2c00      	cmp	r4, #0
 8000a40:	d116      	bne.n	8000a70 <__lesf2+0x54>
 8000a42:	2e00      	cmp	r6, #0
 8000a44:	d114      	bne.n	8000a70 <__lesf2+0x54>
 8000a46:	2000      	movs	r0, #0
 8000a48:	2d00      	cmp	r5, #0
 8000a4a:	d010      	beq.n	8000a6e <__lesf2+0x52>
 8000a4c:	e009      	b.n	8000a62 <__lesf2+0x46>
 8000a4e:	2d00      	cmp	r5, #0
 8000a50:	d10c      	bne.n	8000a6c <__lesf2+0x50>
 8000a52:	2cff      	cmp	r4, #255	; 0xff
 8000a54:	d113      	bne.n	8000a7e <__lesf2+0x62>
 8000a56:	2e00      	cmp	r6, #0
 8000a58:	d108      	bne.n	8000a6c <__lesf2+0x50>
 8000a5a:	2a00      	cmp	r2, #0
 8000a5c:	d008      	beq.n	8000a70 <__lesf2+0x54>
 8000a5e:	4283      	cmp	r3, r0
 8000a60:	d012      	beq.n	8000a88 <__lesf2+0x6c>
 8000a62:	2102      	movs	r1, #2
 8000a64:	1e58      	subs	r0, r3, #1
 8000a66:	4008      	ands	r0, r1
 8000a68:	3801      	subs	r0, #1
 8000a6a:	e000      	b.n	8000a6e <__lesf2+0x52>
 8000a6c:	2002      	movs	r0, #2
 8000a6e:	bd70      	pop	{r4, r5, r6, pc}
 8000a70:	2d00      	cmp	r5, #0
 8000a72:	d1f4      	bne.n	8000a5e <__lesf2+0x42>
 8000a74:	2800      	cmp	r0, #0
 8000a76:	d1fa      	bne.n	8000a6e <__lesf2+0x52>
 8000a78:	2001      	movs	r0, #1
 8000a7a:	4240      	negs	r0, r0
 8000a7c:	e7f7      	b.n	8000a6e <__lesf2+0x52>
 8000a7e:	2c00      	cmp	r4, #0
 8000a80:	d1ed      	bne.n	8000a5e <__lesf2+0x42>
 8000a82:	2e00      	cmp	r6, #0
 8000a84:	d1eb      	bne.n	8000a5e <__lesf2+0x42>
 8000a86:	e7ec      	b.n	8000a62 <__lesf2+0x46>
 8000a88:	42a2      	cmp	r2, r4
 8000a8a:	dc05      	bgt.n	8000a98 <__lesf2+0x7c>
 8000a8c:	dbf2      	blt.n	8000a74 <__lesf2+0x58>
 8000a8e:	42b5      	cmp	r5, r6
 8000a90:	d802      	bhi.n	8000a98 <__lesf2+0x7c>
 8000a92:	d3ef      	bcc.n	8000a74 <__lesf2+0x58>
 8000a94:	2000      	movs	r0, #0
 8000a96:	e7ea      	b.n	8000a6e <__lesf2+0x52>
 8000a98:	4243      	negs	r3, r0
 8000a9a:	4158      	adcs	r0, r3
 8000a9c:	0040      	lsls	r0, r0, #1
 8000a9e:	3801      	subs	r0, #1
 8000aa0:	e7e5      	b.n	8000a6e <__lesf2+0x52>
 8000aa2:	46c0      	nop			; (mov r8, r8)

08000aa4 <__aeabi_fcmpun>:
 8000aa4:	0243      	lsls	r3, r0, #9
 8000aa6:	024a      	lsls	r2, r1, #9
 8000aa8:	0040      	lsls	r0, r0, #1
 8000aaa:	0049      	lsls	r1, r1, #1
 8000aac:	0a5b      	lsrs	r3, r3, #9
 8000aae:	0a52      	lsrs	r2, r2, #9
 8000ab0:	0e09      	lsrs	r1, r1, #24
 8000ab2:	0e00      	lsrs	r0, r0, #24
 8000ab4:	28ff      	cmp	r0, #255	; 0xff
 8000ab6:	d006      	beq.n	8000ac6 <__aeabi_fcmpun+0x22>
 8000ab8:	2000      	movs	r0, #0
 8000aba:	29ff      	cmp	r1, #255	; 0xff
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_fcmpun+0x20>
 8000abe:	1e53      	subs	r3, r2, #1
 8000ac0:	419a      	sbcs	r2, r3
 8000ac2:	0010      	movs	r0, r2
 8000ac4:	4770      	bx	lr
 8000ac6:	38fe      	subs	r0, #254	; 0xfe
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d1fb      	bne.n	8000ac4 <__aeabi_fcmpun+0x20>
 8000acc:	e7f4      	b.n	8000ab8 <__aeabi_fcmpun+0x14>
 8000ace:	46c0      	nop			; (mov r8, r8)

08000ad0 <__aeabi_f2iz>:
 8000ad0:	0241      	lsls	r1, r0, #9
 8000ad2:	0042      	lsls	r2, r0, #1
 8000ad4:	0fc3      	lsrs	r3, r0, #31
 8000ad6:	0a49      	lsrs	r1, r1, #9
 8000ad8:	2000      	movs	r0, #0
 8000ada:	0e12      	lsrs	r2, r2, #24
 8000adc:	2a7e      	cmp	r2, #126	; 0x7e
 8000ade:	dd03      	ble.n	8000ae8 <__aeabi_f2iz+0x18>
 8000ae0:	2a9d      	cmp	r2, #157	; 0x9d
 8000ae2:	dd02      	ble.n	8000aea <__aeabi_f2iz+0x1a>
 8000ae4:	4a09      	ldr	r2, [pc, #36]	; (8000b0c <__aeabi_f2iz+0x3c>)
 8000ae6:	1898      	adds	r0, r3, r2
 8000ae8:	4770      	bx	lr
 8000aea:	2080      	movs	r0, #128	; 0x80
 8000aec:	0400      	lsls	r0, r0, #16
 8000aee:	4301      	orrs	r1, r0
 8000af0:	2a95      	cmp	r2, #149	; 0x95
 8000af2:	dc07      	bgt.n	8000b04 <__aeabi_f2iz+0x34>
 8000af4:	2096      	movs	r0, #150	; 0x96
 8000af6:	1a82      	subs	r2, r0, r2
 8000af8:	40d1      	lsrs	r1, r2
 8000afa:	4248      	negs	r0, r1
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d1f3      	bne.n	8000ae8 <__aeabi_f2iz+0x18>
 8000b00:	0008      	movs	r0, r1
 8000b02:	e7f1      	b.n	8000ae8 <__aeabi_f2iz+0x18>
 8000b04:	3a96      	subs	r2, #150	; 0x96
 8000b06:	4091      	lsls	r1, r2
 8000b08:	e7f7      	b.n	8000afa <__aeabi_f2iz+0x2a>
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	7fffffff 	.word	0x7fffffff

08000b10 <__aeabi_i2f>:
 8000b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b12:	2800      	cmp	r0, #0
 8000b14:	d013      	beq.n	8000b3e <__aeabi_i2f+0x2e>
 8000b16:	17c3      	asrs	r3, r0, #31
 8000b18:	18c6      	adds	r6, r0, r3
 8000b1a:	405e      	eors	r6, r3
 8000b1c:	0fc4      	lsrs	r4, r0, #31
 8000b1e:	0030      	movs	r0, r6
 8000b20:	f001 fefa 	bl	8002918 <__clzsi2>
 8000b24:	239e      	movs	r3, #158	; 0x9e
 8000b26:	0005      	movs	r5, r0
 8000b28:	1a1b      	subs	r3, r3, r0
 8000b2a:	2b96      	cmp	r3, #150	; 0x96
 8000b2c:	dc0f      	bgt.n	8000b4e <__aeabi_i2f+0x3e>
 8000b2e:	2808      	cmp	r0, #8
 8000b30:	dd01      	ble.n	8000b36 <__aeabi_i2f+0x26>
 8000b32:	3d08      	subs	r5, #8
 8000b34:	40ae      	lsls	r6, r5
 8000b36:	0276      	lsls	r6, r6, #9
 8000b38:	0a76      	lsrs	r6, r6, #9
 8000b3a:	b2d8      	uxtb	r0, r3
 8000b3c:	e002      	b.n	8000b44 <__aeabi_i2f+0x34>
 8000b3e:	2400      	movs	r4, #0
 8000b40:	2000      	movs	r0, #0
 8000b42:	2600      	movs	r6, #0
 8000b44:	05c0      	lsls	r0, r0, #23
 8000b46:	4330      	orrs	r0, r6
 8000b48:	07e4      	lsls	r4, r4, #31
 8000b4a:	4320      	orrs	r0, r4
 8000b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b4e:	2b99      	cmp	r3, #153	; 0x99
 8000b50:	dd0c      	ble.n	8000b6c <__aeabi_i2f+0x5c>
 8000b52:	2205      	movs	r2, #5
 8000b54:	0031      	movs	r1, r6
 8000b56:	1a12      	subs	r2, r2, r0
 8000b58:	40d1      	lsrs	r1, r2
 8000b5a:	000a      	movs	r2, r1
 8000b5c:	0001      	movs	r1, r0
 8000b5e:	0030      	movs	r0, r6
 8000b60:	311b      	adds	r1, #27
 8000b62:	4088      	lsls	r0, r1
 8000b64:	1e41      	subs	r1, r0, #1
 8000b66:	4188      	sbcs	r0, r1
 8000b68:	4302      	orrs	r2, r0
 8000b6a:	0016      	movs	r6, r2
 8000b6c:	2d05      	cmp	r5, #5
 8000b6e:	dc12      	bgt.n	8000b96 <__aeabi_i2f+0x86>
 8000b70:	0031      	movs	r1, r6
 8000b72:	4f0d      	ldr	r7, [pc, #52]	; (8000ba8 <__aeabi_i2f+0x98>)
 8000b74:	4039      	ands	r1, r7
 8000b76:	0772      	lsls	r2, r6, #29
 8000b78:	d009      	beq.n	8000b8e <__aeabi_i2f+0x7e>
 8000b7a:	200f      	movs	r0, #15
 8000b7c:	4030      	ands	r0, r6
 8000b7e:	2804      	cmp	r0, #4
 8000b80:	d005      	beq.n	8000b8e <__aeabi_i2f+0x7e>
 8000b82:	3104      	adds	r1, #4
 8000b84:	014a      	lsls	r2, r1, #5
 8000b86:	d502      	bpl.n	8000b8e <__aeabi_i2f+0x7e>
 8000b88:	239f      	movs	r3, #159	; 0x9f
 8000b8a:	4039      	ands	r1, r7
 8000b8c:	1b5b      	subs	r3, r3, r5
 8000b8e:	0189      	lsls	r1, r1, #6
 8000b90:	0a4e      	lsrs	r6, r1, #9
 8000b92:	b2d8      	uxtb	r0, r3
 8000b94:	e7d6      	b.n	8000b44 <__aeabi_i2f+0x34>
 8000b96:	1f6a      	subs	r2, r5, #5
 8000b98:	4096      	lsls	r6, r2
 8000b9a:	0031      	movs	r1, r6
 8000b9c:	4f02      	ldr	r7, [pc, #8]	; (8000ba8 <__aeabi_i2f+0x98>)
 8000b9e:	4039      	ands	r1, r7
 8000ba0:	0772      	lsls	r2, r6, #29
 8000ba2:	d0f4      	beq.n	8000b8e <__aeabi_i2f+0x7e>
 8000ba4:	e7e9      	b.n	8000b7a <__aeabi_i2f+0x6a>
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	fbffffff 	.word	0xfbffffff

08000bac <__aeabi_dadd>:
 8000bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bae:	464f      	mov	r7, r9
 8000bb0:	4646      	mov	r6, r8
 8000bb2:	46d6      	mov	lr, sl
 8000bb4:	000d      	movs	r5, r1
 8000bb6:	0004      	movs	r4, r0
 8000bb8:	b5c0      	push	{r6, r7, lr}
 8000bba:	001f      	movs	r7, r3
 8000bbc:	0011      	movs	r1, r2
 8000bbe:	0328      	lsls	r0, r5, #12
 8000bc0:	0f62      	lsrs	r2, r4, #29
 8000bc2:	0a40      	lsrs	r0, r0, #9
 8000bc4:	4310      	orrs	r0, r2
 8000bc6:	007a      	lsls	r2, r7, #1
 8000bc8:	0d52      	lsrs	r2, r2, #21
 8000bca:	00e3      	lsls	r3, r4, #3
 8000bcc:	033c      	lsls	r4, r7, #12
 8000bce:	4691      	mov	r9, r2
 8000bd0:	0a64      	lsrs	r4, r4, #9
 8000bd2:	0ffa      	lsrs	r2, r7, #31
 8000bd4:	0f4f      	lsrs	r7, r1, #29
 8000bd6:	006e      	lsls	r6, r5, #1
 8000bd8:	4327      	orrs	r7, r4
 8000bda:	4692      	mov	sl, r2
 8000bdc:	46b8      	mov	r8, r7
 8000bde:	0d76      	lsrs	r6, r6, #21
 8000be0:	0fed      	lsrs	r5, r5, #31
 8000be2:	00c9      	lsls	r1, r1, #3
 8000be4:	4295      	cmp	r5, r2
 8000be6:	d100      	bne.n	8000bea <__aeabi_dadd+0x3e>
 8000be8:	e099      	b.n	8000d1e <__aeabi_dadd+0x172>
 8000bea:	464c      	mov	r4, r9
 8000bec:	1b34      	subs	r4, r6, r4
 8000bee:	46a4      	mov	ip, r4
 8000bf0:	2c00      	cmp	r4, #0
 8000bf2:	dc00      	bgt.n	8000bf6 <__aeabi_dadd+0x4a>
 8000bf4:	e07c      	b.n	8000cf0 <__aeabi_dadd+0x144>
 8000bf6:	464a      	mov	r2, r9
 8000bf8:	2a00      	cmp	r2, #0
 8000bfa:	d100      	bne.n	8000bfe <__aeabi_dadd+0x52>
 8000bfc:	e0b8      	b.n	8000d70 <__aeabi_dadd+0x1c4>
 8000bfe:	4ac5      	ldr	r2, [pc, #788]	; (8000f14 <__aeabi_dadd+0x368>)
 8000c00:	4296      	cmp	r6, r2
 8000c02:	d100      	bne.n	8000c06 <__aeabi_dadd+0x5a>
 8000c04:	e11c      	b.n	8000e40 <__aeabi_dadd+0x294>
 8000c06:	2280      	movs	r2, #128	; 0x80
 8000c08:	003c      	movs	r4, r7
 8000c0a:	0412      	lsls	r2, r2, #16
 8000c0c:	4314      	orrs	r4, r2
 8000c0e:	46a0      	mov	r8, r4
 8000c10:	4662      	mov	r2, ip
 8000c12:	2a38      	cmp	r2, #56	; 0x38
 8000c14:	dd00      	ble.n	8000c18 <__aeabi_dadd+0x6c>
 8000c16:	e161      	b.n	8000edc <__aeabi_dadd+0x330>
 8000c18:	2a1f      	cmp	r2, #31
 8000c1a:	dd00      	ble.n	8000c1e <__aeabi_dadd+0x72>
 8000c1c:	e1cc      	b.n	8000fb8 <__aeabi_dadd+0x40c>
 8000c1e:	4664      	mov	r4, ip
 8000c20:	2220      	movs	r2, #32
 8000c22:	1b12      	subs	r2, r2, r4
 8000c24:	4644      	mov	r4, r8
 8000c26:	4094      	lsls	r4, r2
 8000c28:	000f      	movs	r7, r1
 8000c2a:	46a1      	mov	r9, r4
 8000c2c:	4664      	mov	r4, ip
 8000c2e:	4091      	lsls	r1, r2
 8000c30:	40e7      	lsrs	r7, r4
 8000c32:	464c      	mov	r4, r9
 8000c34:	1e4a      	subs	r2, r1, #1
 8000c36:	4191      	sbcs	r1, r2
 8000c38:	433c      	orrs	r4, r7
 8000c3a:	4642      	mov	r2, r8
 8000c3c:	4321      	orrs	r1, r4
 8000c3e:	4664      	mov	r4, ip
 8000c40:	40e2      	lsrs	r2, r4
 8000c42:	1a80      	subs	r0, r0, r2
 8000c44:	1a5c      	subs	r4, r3, r1
 8000c46:	42a3      	cmp	r3, r4
 8000c48:	419b      	sbcs	r3, r3
 8000c4a:	425f      	negs	r7, r3
 8000c4c:	1bc7      	subs	r7, r0, r7
 8000c4e:	023b      	lsls	r3, r7, #8
 8000c50:	d400      	bmi.n	8000c54 <__aeabi_dadd+0xa8>
 8000c52:	e0d0      	b.n	8000df6 <__aeabi_dadd+0x24a>
 8000c54:	027f      	lsls	r7, r7, #9
 8000c56:	0a7f      	lsrs	r7, r7, #9
 8000c58:	2f00      	cmp	r7, #0
 8000c5a:	d100      	bne.n	8000c5e <__aeabi_dadd+0xb2>
 8000c5c:	e0ff      	b.n	8000e5e <__aeabi_dadd+0x2b2>
 8000c5e:	0038      	movs	r0, r7
 8000c60:	f001 fe5a 	bl	8002918 <__clzsi2>
 8000c64:	0001      	movs	r1, r0
 8000c66:	3908      	subs	r1, #8
 8000c68:	2320      	movs	r3, #32
 8000c6a:	0022      	movs	r2, r4
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	408f      	lsls	r7, r1
 8000c70:	40da      	lsrs	r2, r3
 8000c72:	408c      	lsls	r4, r1
 8000c74:	4317      	orrs	r7, r2
 8000c76:	42b1      	cmp	r1, r6
 8000c78:	da00      	bge.n	8000c7c <__aeabi_dadd+0xd0>
 8000c7a:	e0ff      	b.n	8000e7c <__aeabi_dadd+0x2d0>
 8000c7c:	1b89      	subs	r1, r1, r6
 8000c7e:	1c4b      	adds	r3, r1, #1
 8000c80:	2b1f      	cmp	r3, #31
 8000c82:	dd00      	ble.n	8000c86 <__aeabi_dadd+0xda>
 8000c84:	e0a8      	b.n	8000dd8 <__aeabi_dadd+0x22c>
 8000c86:	2220      	movs	r2, #32
 8000c88:	0039      	movs	r1, r7
 8000c8a:	1ad2      	subs	r2, r2, r3
 8000c8c:	0020      	movs	r0, r4
 8000c8e:	4094      	lsls	r4, r2
 8000c90:	4091      	lsls	r1, r2
 8000c92:	40d8      	lsrs	r0, r3
 8000c94:	1e62      	subs	r2, r4, #1
 8000c96:	4194      	sbcs	r4, r2
 8000c98:	40df      	lsrs	r7, r3
 8000c9a:	2600      	movs	r6, #0
 8000c9c:	4301      	orrs	r1, r0
 8000c9e:	430c      	orrs	r4, r1
 8000ca0:	0763      	lsls	r3, r4, #29
 8000ca2:	d009      	beq.n	8000cb8 <__aeabi_dadd+0x10c>
 8000ca4:	230f      	movs	r3, #15
 8000ca6:	4023      	ands	r3, r4
 8000ca8:	2b04      	cmp	r3, #4
 8000caa:	d005      	beq.n	8000cb8 <__aeabi_dadd+0x10c>
 8000cac:	1d23      	adds	r3, r4, #4
 8000cae:	42a3      	cmp	r3, r4
 8000cb0:	41a4      	sbcs	r4, r4
 8000cb2:	4264      	negs	r4, r4
 8000cb4:	193f      	adds	r7, r7, r4
 8000cb6:	001c      	movs	r4, r3
 8000cb8:	023b      	lsls	r3, r7, #8
 8000cba:	d400      	bmi.n	8000cbe <__aeabi_dadd+0x112>
 8000cbc:	e09e      	b.n	8000dfc <__aeabi_dadd+0x250>
 8000cbe:	4b95      	ldr	r3, [pc, #596]	; (8000f14 <__aeabi_dadd+0x368>)
 8000cc0:	3601      	adds	r6, #1
 8000cc2:	429e      	cmp	r6, r3
 8000cc4:	d100      	bne.n	8000cc8 <__aeabi_dadd+0x11c>
 8000cc6:	e0b7      	b.n	8000e38 <__aeabi_dadd+0x28c>
 8000cc8:	4a93      	ldr	r2, [pc, #588]	; (8000f18 <__aeabi_dadd+0x36c>)
 8000cca:	08e4      	lsrs	r4, r4, #3
 8000ccc:	4017      	ands	r7, r2
 8000cce:	077b      	lsls	r3, r7, #29
 8000cd0:	0571      	lsls	r1, r6, #21
 8000cd2:	027f      	lsls	r7, r7, #9
 8000cd4:	4323      	orrs	r3, r4
 8000cd6:	0b3f      	lsrs	r7, r7, #12
 8000cd8:	0d4a      	lsrs	r2, r1, #21
 8000cda:	0512      	lsls	r2, r2, #20
 8000cdc:	433a      	orrs	r2, r7
 8000cde:	07ed      	lsls	r5, r5, #31
 8000ce0:	432a      	orrs	r2, r5
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	0011      	movs	r1, r2
 8000ce6:	bce0      	pop	{r5, r6, r7}
 8000ce8:	46ba      	mov	sl, r7
 8000cea:	46b1      	mov	r9, r6
 8000cec:	46a8      	mov	r8, r5
 8000cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cf0:	2c00      	cmp	r4, #0
 8000cf2:	d04b      	beq.n	8000d8c <__aeabi_dadd+0x1e0>
 8000cf4:	464c      	mov	r4, r9
 8000cf6:	1ba4      	subs	r4, r4, r6
 8000cf8:	46a4      	mov	ip, r4
 8000cfa:	2e00      	cmp	r6, #0
 8000cfc:	d000      	beq.n	8000d00 <__aeabi_dadd+0x154>
 8000cfe:	e123      	b.n	8000f48 <__aeabi_dadd+0x39c>
 8000d00:	0004      	movs	r4, r0
 8000d02:	431c      	orrs	r4, r3
 8000d04:	d100      	bne.n	8000d08 <__aeabi_dadd+0x15c>
 8000d06:	e1af      	b.n	8001068 <__aeabi_dadd+0x4bc>
 8000d08:	4662      	mov	r2, ip
 8000d0a:	1e54      	subs	r4, r2, #1
 8000d0c:	2a01      	cmp	r2, #1
 8000d0e:	d100      	bne.n	8000d12 <__aeabi_dadd+0x166>
 8000d10:	e215      	b.n	800113e <__aeabi_dadd+0x592>
 8000d12:	4d80      	ldr	r5, [pc, #512]	; (8000f14 <__aeabi_dadd+0x368>)
 8000d14:	45ac      	cmp	ip, r5
 8000d16:	d100      	bne.n	8000d1a <__aeabi_dadd+0x16e>
 8000d18:	e1c8      	b.n	80010ac <__aeabi_dadd+0x500>
 8000d1a:	46a4      	mov	ip, r4
 8000d1c:	e11b      	b.n	8000f56 <__aeabi_dadd+0x3aa>
 8000d1e:	464a      	mov	r2, r9
 8000d20:	1ab2      	subs	r2, r6, r2
 8000d22:	4694      	mov	ip, r2
 8000d24:	2a00      	cmp	r2, #0
 8000d26:	dc00      	bgt.n	8000d2a <__aeabi_dadd+0x17e>
 8000d28:	e0ac      	b.n	8000e84 <__aeabi_dadd+0x2d8>
 8000d2a:	464a      	mov	r2, r9
 8000d2c:	2a00      	cmp	r2, #0
 8000d2e:	d043      	beq.n	8000db8 <__aeabi_dadd+0x20c>
 8000d30:	4a78      	ldr	r2, [pc, #480]	; (8000f14 <__aeabi_dadd+0x368>)
 8000d32:	4296      	cmp	r6, r2
 8000d34:	d100      	bne.n	8000d38 <__aeabi_dadd+0x18c>
 8000d36:	e1af      	b.n	8001098 <__aeabi_dadd+0x4ec>
 8000d38:	2280      	movs	r2, #128	; 0x80
 8000d3a:	003c      	movs	r4, r7
 8000d3c:	0412      	lsls	r2, r2, #16
 8000d3e:	4314      	orrs	r4, r2
 8000d40:	46a0      	mov	r8, r4
 8000d42:	4662      	mov	r2, ip
 8000d44:	2a38      	cmp	r2, #56	; 0x38
 8000d46:	dc67      	bgt.n	8000e18 <__aeabi_dadd+0x26c>
 8000d48:	2a1f      	cmp	r2, #31
 8000d4a:	dc00      	bgt.n	8000d4e <__aeabi_dadd+0x1a2>
 8000d4c:	e15f      	b.n	800100e <__aeabi_dadd+0x462>
 8000d4e:	4647      	mov	r7, r8
 8000d50:	3a20      	subs	r2, #32
 8000d52:	40d7      	lsrs	r7, r2
 8000d54:	4662      	mov	r2, ip
 8000d56:	2a20      	cmp	r2, #32
 8000d58:	d005      	beq.n	8000d66 <__aeabi_dadd+0x1ba>
 8000d5a:	4664      	mov	r4, ip
 8000d5c:	2240      	movs	r2, #64	; 0x40
 8000d5e:	1b12      	subs	r2, r2, r4
 8000d60:	4644      	mov	r4, r8
 8000d62:	4094      	lsls	r4, r2
 8000d64:	4321      	orrs	r1, r4
 8000d66:	1e4a      	subs	r2, r1, #1
 8000d68:	4191      	sbcs	r1, r2
 8000d6a:	000c      	movs	r4, r1
 8000d6c:	433c      	orrs	r4, r7
 8000d6e:	e057      	b.n	8000e20 <__aeabi_dadd+0x274>
 8000d70:	003a      	movs	r2, r7
 8000d72:	430a      	orrs	r2, r1
 8000d74:	d100      	bne.n	8000d78 <__aeabi_dadd+0x1cc>
 8000d76:	e105      	b.n	8000f84 <__aeabi_dadd+0x3d8>
 8000d78:	0022      	movs	r2, r4
 8000d7a:	3a01      	subs	r2, #1
 8000d7c:	2c01      	cmp	r4, #1
 8000d7e:	d100      	bne.n	8000d82 <__aeabi_dadd+0x1d6>
 8000d80:	e182      	b.n	8001088 <__aeabi_dadd+0x4dc>
 8000d82:	4c64      	ldr	r4, [pc, #400]	; (8000f14 <__aeabi_dadd+0x368>)
 8000d84:	45a4      	cmp	ip, r4
 8000d86:	d05b      	beq.n	8000e40 <__aeabi_dadd+0x294>
 8000d88:	4694      	mov	ip, r2
 8000d8a:	e741      	b.n	8000c10 <__aeabi_dadd+0x64>
 8000d8c:	4c63      	ldr	r4, [pc, #396]	; (8000f1c <__aeabi_dadd+0x370>)
 8000d8e:	1c77      	adds	r7, r6, #1
 8000d90:	4227      	tst	r7, r4
 8000d92:	d000      	beq.n	8000d96 <__aeabi_dadd+0x1ea>
 8000d94:	e0c4      	b.n	8000f20 <__aeabi_dadd+0x374>
 8000d96:	0004      	movs	r4, r0
 8000d98:	431c      	orrs	r4, r3
 8000d9a:	2e00      	cmp	r6, #0
 8000d9c:	d000      	beq.n	8000da0 <__aeabi_dadd+0x1f4>
 8000d9e:	e169      	b.n	8001074 <__aeabi_dadd+0x4c8>
 8000da0:	2c00      	cmp	r4, #0
 8000da2:	d100      	bne.n	8000da6 <__aeabi_dadd+0x1fa>
 8000da4:	e1bf      	b.n	8001126 <__aeabi_dadd+0x57a>
 8000da6:	4644      	mov	r4, r8
 8000da8:	430c      	orrs	r4, r1
 8000daa:	d000      	beq.n	8000dae <__aeabi_dadd+0x202>
 8000dac:	e1d0      	b.n	8001150 <__aeabi_dadd+0x5a4>
 8000dae:	0742      	lsls	r2, r0, #29
 8000db0:	08db      	lsrs	r3, r3, #3
 8000db2:	4313      	orrs	r3, r2
 8000db4:	08c0      	lsrs	r0, r0, #3
 8000db6:	e029      	b.n	8000e0c <__aeabi_dadd+0x260>
 8000db8:	003a      	movs	r2, r7
 8000dba:	430a      	orrs	r2, r1
 8000dbc:	d100      	bne.n	8000dc0 <__aeabi_dadd+0x214>
 8000dbe:	e170      	b.n	80010a2 <__aeabi_dadd+0x4f6>
 8000dc0:	4662      	mov	r2, ip
 8000dc2:	4664      	mov	r4, ip
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	2c01      	cmp	r4, #1
 8000dc8:	d100      	bne.n	8000dcc <__aeabi_dadd+0x220>
 8000dca:	e0e0      	b.n	8000f8e <__aeabi_dadd+0x3e2>
 8000dcc:	4c51      	ldr	r4, [pc, #324]	; (8000f14 <__aeabi_dadd+0x368>)
 8000dce:	45a4      	cmp	ip, r4
 8000dd0:	d100      	bne.n	8000dd4 <__aeabi_dadd+0x228>
 8000dd2:	e161      	b.n	8001098 <__aeabi_dadd+0x4ec>
 8000dd4:	4694      	mov	ip, r2
 8000dd6:	e7b4      	b.n	8000d42 <__aeabi_dadd+0x196>
 8000dd8:	003a      	movs	r2, r7
 8000dda:	391f      	subs	r1, #31
 8000ddc:	40ca      	lsrs	r2, r1
 8000dde:	0011      	movs	r1, r2
 8000de0:	2b20      	cmp	r3, #32
 8000de2:	d003      	beq.n	8000dec <__aeabi_dadd+0x240>
 8000de4:	2240      	movs	r2, #64	; 0x40
 8000de6:	1ad3      	subs	r3, r2, r3
 8000de8:	409f      	lsls	r7, r3
 8000dea:	433c      	orrs	r4, r7
 8000dec:	1e63      	subs	r3, r4, #1
 8000dee:	419c      	sbcs	r4, r3
 8000df0:	2700      	movs	r7, #0
 8000df2:	2600      	movs	r6, #0
 8000df4:	430c      	orrs	r4, r1
 8000df6:	0763      	lsls	r3, r4, #29
 8000df8:	d000      	beq.n	8000dfc <__aeabi_dadd+0x250>
 8000dfa:	e753      	b.n	8000ca4 <__aeabi_dadd+0xf8>
 8000dfc:	46b4      	mov	ip, r6
 8000dfe:	08e4      	lsrs	r4, r4, #3
 8000e00:	077b      	lsls	r3, r7, #29
 8000e02:	4323      	orrs	r3, r4
 8000e04:	08f8      	lsrs	r0, r7, #3
 8000e06:	4a43      	ldr	r2, [pc, #268]	; (8000f14 <__aeabi_dadd+0x368>)
 8000e08:	4594      	cmp	ip, r2
 8000e0a:	d01d      	beq.n	8000e48 <__aeabi_dadd+0x29c>
 8000e0c:	4662      	mov	r2, ip
 8000e0e:	0307      	lsls	r7, r0, #12
 8000e10:	0552      	lsls	r2, r2, #21
 8000e12:	0b3f      	lsrs	r7, r7, #12
 8000e14:	0d52      	lsrs	r2, r2, #21
 8000e16:	e760      	b.n	8000cda <__aeabi_dadd+0x12e>
 8000e18:	4644      	mov	r4, r8
 8000e1a:	430c      	orrs	r4, r1
 8000e1c:	1e62      	subs	r2, r4, #1
 8000e1e:	4194      	sbcs	r4, r2
 8000e20:	18e4      	adds	r4, r4, r3
 8000e22:	429c      	cmp	r4, r3
 8000e24:	419b      	sbcs	r3, r3
 8000e26:	425f      	negs	r7, r3
 8000e28:	183f      	adds	r7, r7, r0
 8000e2a:	023b      	lsls	r3, r7, #8
 8000e2c:	d5e3      	bpl.n	8000df6 <__aeabi_dadd+0x24a>
 8000e2e:	4b39      	ldr	r3, [pc, #228]	; (8000f14 <__aeabi_dadd+0x368>)
 8000e30:	3601      	adds	r6, #1
 8000e32:	429e      	cmp	r6, r3
 8000e34:	d000      	beq.n	8000e38 <__aeabi_dadd+0x28c>
 8000e36:	e0b5      	b.n	8000fa4 <__aeabi_dadd+0x3f8>
 8000e38:	0032      	movs	r2, r6
 8000e3a:	2700      	movs	r7, #0
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	e74c      	b.n	8000cda <__aeabi_dadd+0x12e>
 8000e40:	0742      	lsls	r2, r0, #29
 8000e42:	08db      	lsrs	r3, r3, #3
 8000e44:	4313      	orrs	r3, r2
 8000e46:	08c0      	lsrs	r0, r0, #3
 8000e48:	001a      	movs	r2, r3
 8000e4a:	4302      	orrs	r2, r0
 8000e4c:	d100      	bne.n	8000e50 <__aeabi_dadd+0x2a4>
 8000e4e:	e1e1      	b.n	8001214 <__aeabi_dadd+0x668>
 8000e50:	2780      	movs	r7, #128	; 0x80
 8000e52:	033f      	lsls	r7, r7, #12
 8000e54:	4307      	orrs	r7, r0
 8000e56:	033f      	lsls	r7, r7, #12
 8000e58:	4a2e      	ldr	r2, [pc, #184]	; (8000f14 <__aeabi_dadd+0x368>)
 8000e5a:	0b3f      	lsrs	r7, r7, #12
 8000e5c:	e73d      	b.n	8000cda <__aeabi_dadd+0x12e>
 8000e5e:	0020      	movs	r0, r4
 8000e60:	f001 fd5a 	bl	8002918 <__clzsi2>
 8000e64:	0001      	movs	r1, r0
 8000e66:	3118      	adds	r1, #24
 8000e68:	291f      	cmp	r1, #31
 8000e6a:	dc00      	bgt.n	8000e6e <__aeabi_dadd+0x2c2>
 8000e6c:	e6fc      	b.n	8000c68 <__aeabi_dadd+0xbc>
 8000e6e:	3808      	subs	r0, #8
 8000e70:	4084      	lsls	r4, r0
 8000e72:	0027      	movs	r7, r4
 8000e74:	2400      	movs	r4, #0
 8000e76:	42b1      	cmp	r1, r6
 8000e78:	db00      	blt.n	8000e7c <__aeabi_dadd+0x2d0>
 8000e7a:	e6ff      	b.n	8000c7c <__aeabi_dadd+0xd0>
 8000e7c:	4a26      	ldr	r2, [pc, #152]	; (8000f18 <__aeabi_dadd+0x36c>)
 8000e7e:	1a76      	subs	r6, r6, r1
 8000e80:	4017      	ands	r7, r2
 8000e82:	e70d      	b.n	8000ca0 <__aeabi_dadd+0xf4>
 8000e84:	2a00      	cmp	r2, #0
 8000e86:	d02f      	beq.n	8000ee8 <__aeabi_dadd+0x33c>
 8000e88:	464a      	mov	r2, r9
 8000e8a:	1b92      	subs	r2, r2, r6
 8000e8c:	4694      	mov	ip, r2
 8000e8e:	2e00      	cmp	r6, #0
 8000e90:	d100      	bne.n	8000e94 <__aeabi_dadd+0x2e8>
 8000e92:	e0ad      	b.n	8000ff0 <__aeabi_dadd+0x444>
 8000e94:	4a1f      	ldr	r2, [pc, #124]	; (8000f14 <__aeabi_dadd+0x368>)
 8000e96:	4591      	cmp	r9, r2
 8000e98:	d100      	bne.n	8000e9c <__aeabi_dadd+0x2f0>
 8000e9a:	e10f      	b.n	80010bc <__aeabi_dadd+0x510>
 8000e9c:	2280      	movs	r2, #128	; 0x80
 8000e9e:	0412      	lsls	r2, r2, #16
 8000ea0:	4310      	orrs	r0, r2
 8000ea2:	4662      	mov	r2, ip
 8000ea4:	2a38      	cmp	r2, #56	; 0x38
 8000ea6:	dd00      	ble.n	8000eaa <__aeabi_dadd+0x2fe>
 8000ea8:	e10f      	b.n	80010ca <__aeabi_dadd+0x51e>
 8000eaa:	2a1f      	cmp	r2, #31
 8000eac:	dd00      	ble.n	8000eb0 <__aeabi_dadd+0x304>
 8000eae:	e180      	b.n	80011b2 <__aeabi_dadd+0x606>
 8000eb0:	4664      	mov	r4, ip
 8000eb2:	2220      	movs	r2, #32
 8000eb4:	001e      	movs	r6, r3
 8000eb6:	1b12      	subs	r2, r2, r4
 8000eb8:	4667      	mov	r7, ip
 8000eba:	0004      	movs	r4, r0
 8000ebc:	4093      	lsls	r3, r2
 8000ebe:	4094      	lsls	r4, r2
 8000ec0:	40fe      	lsrs	r6, r7
 8000ec2:	1e5a      	subs	r2, r3, #1
 8000ec4:	4193      	sbcs	r3, r2
 8000ec6:	40f8      	lsrs	r0, r7
 8000ec8:	4334      	orrs	r4, r6
 8000eca:	431c      	orrs	r4, r3
 8000ecc:	4480      	add	r8, r0
 8000ece:	1864      	adds	r4, r4, r1
 8000ed0:	428c      	cmp	r4, r1
 8000ed2:	41bf      	sbcs	r7, r7
 8000ed4:	427f      	negs	r7, r7
 8000ed6:	464e      	mov	r6, r9
 8000ed8:	4447      	add	r7, r8
 8000eda:	e7a6      	b.n	8000e2a <__aeabi_dadd+0x27e>
 8000edc:	4642      	mov	r2, r8
 8000ede:	430a      	orrs	r2, r1
 8000ee0:	0011      	movs	r1, r2
 8000ee2:	1e4a      	subs	r2, r1, #1
 8000ee4:	4191      	sbcs	r1, r2
 8000ee6:	e6ad      	b.n	8000c44 <__aeabi_dadd+0x98>
 8000ee8:	4c0c      	ldr	r4, [pc, #48]	; (8000f1c <__aeabi_dadd+0x370>)
 8000eea:	1c72      	adds	r2, r6, #1
 8000eec:	4222      	tst	r2, r4
 8000eee:	d000      	beq.n	8000ef2 <__aeabi_dadd+0x346>
 8000ef0:	e0a1      	b.n	8001036 <__aeabi_dadd+0x48a>
 8000ef2:	0002      	movs	r2, r0
 8000ef4:	431a      	orrs	r2, r3
 8000ef6:	2e00      	cmp	r6, #0
 8000ef8:	d000      	beq.n	8000efc <__aeabi_dadd+0x350>
 8000efa:	e0fa      	b.n	80010f2 <__aeabi_dadd+0x546>
 8000efc:	2a00      	cmp	r2, #0
 8000efe:	d100      	bne.n	8000f02 <__aeabi_dadd+0x356>
 8000f00:	e145      	b.n	800118e <__aeabi_dadd+0x5e2>
 8000f02:	003a      	movs	r2, r7
 8000f04:	430a      	orrs	r2, r1
 8000f06:	d000      	beq.n	8000f0a <__aeabi_dadd+0x35e>
 8000f08:	e146      	b.n	8001198 <__aeabi_dadd+0x5ec>
 8000f0a:	0742      	lsls	r2, r0, #29
 8000f0c:	08db      	lsrs	r3, r3, #3
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	08c0      	lsrs	r0, r0, #3
 8000f12:	e77b      	b.n	8000e0c <__aeabi_dadd+0x260>
 8000f14:	000007ff 	.word	0x000007ff
 8000f18:	ff7fffff 	.word	0xff7fffff
 8000f1c:	000007fe 	.word	0x000007fe
 8000f20:	4647      	mov	r7, r8
 8000f22:	1a5c      	subs	r4, r3, r1
 8000f24:	1bc2      	subs	r2, r0, r7
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	41bf      	sbcs	r7, r7
 8000f2a:	427f      	negs	r7, r7
 8000f2c:	46b9      	mov	r9, r7
 8000f2e:	0017      	movs	r7, r2
 8000f30:	464a      	mov	r2, r9
 8000f32:	1abf      	subs	r7, r7, r2
 8000f34:	023a      	lsls	r2, r7, #8
 8000f36:	d500      	bpl.n	8000f3a <__aeabi_dadd+0x38e>
 8000f38:	e08d      	b.n	8001056 <__aeabi_dadd+0x4aa>
 8000f3a:	0023      	movs	r3, r4
 8000f3c:	433b      	orrs	r3, r7
 8000f3e:	d000      	beq.n	8000f42 <__aeabi_dadd+0x396>
 8000f40:	e68a      	b.n	8000c58 <__aeabi_dadd+0xac>
 8000f42:	2000      	movs	r0, #0
 8000f44:	2500      	movs	r5, #0
 8000f46:	e761      	b.n	8000e0c <__aeabi_dadd+0x260>
 8000f48:	4cb4      	ldr	r4, [pc, #720]	; (800121c <__aeabi_dadd+0x670>)
 8000f4a:	45a1      	cmp	r9, r4
 8000f4c:	d100      	bne.n	8000f50 <__aeabi_dadd+0x3a4>
 8000f4e:	e0ad      	b.n	80010ac <__aeabi_dadd+0x500>
 8000f50:	2480      	movs	r4, #128	; 0x80
 8000f52:	0424      	lsls	r4, r4, #16
 8000f54:	4320      	orrs	r0, r4
 8000f56:	4664      	mov	r4, ip
 8000f58:	2c38      	cmp	r4, #56	; 0x38
 8000f5a:	dc3d      	bgt.n	8000fd8 <__aeabi_dadd+0x42c>
 8000f5c:	4662      	mov	r2, ip
 8000f5e:	2c1f      	cmp	r4, #31
 8000f60:	dd00      	ble.n	8000f64 <__aeabi_dadd+0x3b8>
 8000f62:	e0b7      	b.n	80010d4 <__aeabi_dadd+0x528>
 8000f64:	2520      	movs	r5, #32
 8000f66:	001e      	movs	r6, r3
 8000f68:	1b2d      	subs	r5, r5, r4
 8000f6a:	0004      	movs	r4, r0
 8000f6c:	40ab      	lsls	r3, r5
 8000f6e:	40ac      	lsls	r4, r5
 8000f70:	40d6      	lsrs	r6, r2
 8000f72:	40d0      	lsrs	r0, r2
 8000f74:	4642      	mov	r2, r8
 8000f76:	1e5d      	subs	r5, r3, #1
 8000f78:	41ab      	sbcs	r3, r5
 8000f7a:	4334      	orrs	r4, r6
 8000f7c:	1a12      	subs	r2, r2, r0
 8000f7e:	4690      	mov	r8, r2
 8000f80:	4323      	orrs	r3, r4
 8000f82:	e02c      	b.n	8000fde <__aeabi_dadd+0x432>
 8000f84:	0742      	lsls	r2, r0, #29
 8000f86:	08db      	lsrs	r3, r3, #3
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	08c0      	lsrs	r0, r0, #3
 8000f8c:	e73b      	b.n	8000e06 <__aeabi_dadd+0x25a>
 8000f8e:	185c      	adds	r4, r3, r1
 8000f90:	429c      	cmp	r4, r3
 8000f92:	419b      	sbcs	r3, r3
 8000f94:	4440      	add	r0, r8
 8000f96:	425b      	negs	r3, r3
 8000f98:	18c7      	adds	r7, r0, r3
 8000f9a:	2601      	movs	r6, #1
 8000f9c:	023b      	lsls	r3, r7, #8
 8000f9e:	d400      	bmi.n	8000fa2 <__aeabi_dadd+0x3f6>
 8000fa0:	e729      	b.n	8000df6 <__aeabi_dadd+0x24a>
 8000fa2:	2602      	movs	r6, #2
 8000fa4:	4a9e      	ldr	r2, [pc, #632]	; (8001220 <__aeabi_dadd+0x674>)
 8000fa6:	0863      	lsrs	r3, r4, #1
 8000fa8:	4017      	ands	r7, r2
 8000faa:	2201      	movs	r2, #1
 8000fac:	4014      	ands	r4, r2
 8000fae:	431c      	orrs	r4, r3
 8000fb0:	07fb      	lsls	r3, r7, #31
 8000fb2:	431c      	orrs	r4, r3
 8000fb4:	087f      	lsrs	r7, r7, #1
 8000fb6:	e673      	b.n	8000ca0 <__aeabi_dadd+0xf4>
 8000fb8:	4644      	mov	r4, r8
 8000fba:	3a20      	subs	r2, #32
 8000fbc:	40d4      	lsrs	r4, r2
 8000fbe:	4662      	mov	r2, ip
 8000fc0:	2a20      	cmp	r2, #32
 8000fc2:	d005      	beq.n	8000fd0 <__aeabi_dadd+0x424>
 8000fc4:	4667      	mov	r7, ip
 8000fc6:	2240      	movs	r2, #64	; 0x40
 8000fc8:	1bd2      	subs	r2, r2, r7
 8000fca:	4647      	mov	r7, r8
 8000fcc:	4097      	lsls	r7, r2
 8000fce:	4339      	orrs	r1, r7
 8000fd0:	1e4a      	subs	r2, r1, #1
 8000fd2:	4191      	sbcs	r1, r2
 8000fd4:	4321      	orrs	r1, r4
 8000fd6:	e635      	b.n	8000c44 <__aeabi_dadd+0x98>
 8000fd8:	4303      	orrs	r3, r0
 8000fda:	1e58      	subs	r0, r3, #1
 8000fdc:	4183      	sbcs	r3, r0
 8000fde:	1acc      	subs	r4, r1, r3
 8000fe0:	42a1      	cmp	r1, r4
 8000fe2:	41bf      	sbcs	r7, r7
 8000fe4:	4643      	mov	r3, r8
 8000fe6:	427f      	negs	r7, r7
 8000fe8:	4655      	mov	r5, sl
 8000fea:	464e      	mov	r6, r9
 8000fec:	1bdf      	subs	r7, r3, r7
 8000fee:	e62e      	b.n	8000c4e <__aeabi_dadd+0xa2>
 8000ff0:	0002      	movs	r2, r0
 8000ff2:	431a      	orrs	r2, r3
 8000ff4:	d100      	bne.n	8000ff8 <__aeabi_dadd+0x44c>
 8000ff6:	e0bd      	b.n	8001174 <__aeabi_dadd+0x5c8>
 8000ff8:	4662      	mov	r2, ip
 8000ffa:	4664      	mov	r4, ip
 8000ffc:	3a01      	subs	r2, #1
 8000ffe:	2c01      	cmp	r4, #1
 8001000:	d100      	bne.n	8001004 <__aeabi_dadd+0x458>
 8001002:	e0e5      	b.n	80011d0 <__aeabi_dadd+0x624>
 8001004:	4c85      	ldr	r4, [pc, #532]	; (800121c <__aeabi_dadd+0x670>)
 8001006:	45a4      	cmp	ip, r4
 8001008:	d058      	beq.n	80010bc <__aeabi_dadd+0x510>
 800100a:	4694      	mov	ip, r2
 800100c:	e749      	b.n	8000ea2 <__aeabi_dadd+0x2f6>
 800100e:	4664      	mov	r4, ip
 8001010:	2220      	movs	r2, #32
 8001012:	1b12      	subs	r2, r2, r4
 8001014:	4644      	mov	r4, r8
 8001016:	4094      	lsls	r4, r2
 8001018:	000f      	movs	r7, r1
 800101a:	46a1      	mov	r9, r4
 800101c:	4664      	mov	r4, ip
 800101e:	4091      	lsls	r1, r2
 8001020:	40e7      	lsrs	r7, r4
 8001022:	464c      	mov	r4, r9
 8001024:	1e4a      	subs	r2, r1, #1
 8001026:	4191      	sbcs	r1, r2
 8001028:	433c      	orrs	r4, r7
 800102a:	4642      	mov	r2, r8
 800102c:	430c      	orrs	r4, r1
 800102e:	4661      	mov	r1, ip
 8001030:	40ca      	lsrs	r2, r1
 8001032:	1880      	adds	r0, r0, r2
 8001034:	e6f4      	b.n	8000e20 <__aeabi_dadd+0x274>
 8001036:	4c79      	ldr	r4, [pc, #484]	; (800121c <__aeabi_dadd+0x670>)
 8001038:	42a2      	cmp	r2, r4
 800103a:	d100      	bne.n	800103e <__aeabi_dadd+0x492>
 800103c:	e6fd      	b.n	8000e3a <__aeabi_dadd+0x28e>
 800103e:	1859      	adds	r1, r3, r1
 8001040:	4299      	cmp	r1, r3
 8001042:	419b      	sbcs	r3, r3
 8001044:	4440      	add	r0, r8
 8001046:	425f      	negs	r7, r3
 8001048:	19c7      	adds	r7, r0, r7
 800104a:	07fc      	lsls	r4, r7, #31
 800104c:	0849      	lsrs	r1, r1, #1
 800104e:	0016      	movs	r6, r2
 8001050:	430c      	orrs	r4, r1
 8001052:	087f      	lsrs	r7, r7, #1
 8001054:	e6cf      	b.n	8000df6 <__aeabi_dadd+0x24a>
 8001056:	1acc      	subs	r4, r1, r3
 8001058:	42a1      	cmp	r1, r4
 800105a:	41bf      	sbcs	r7, r7
 800105c:	4643      	mov	r3, r8
 800105e:	427f      	negs	r7, r7
 8001060:	1a18      	subs	r0, r3, r0
 8001062:	4655      	mov	r5, sl
 8001064:	1bc7      	subs	r7, r0, r7
 8001066:	e5f7      	b.n	8000c58 <__aeabi_dadd+0xac>
 8001068:	08c9      	lsrs	r1, r1, #3
 800106a:	077b      	lsls	r3, r7, #29
 800106c:	4655      	mov	r5, sl
 800106e:	430b      	orrs	r3, r1
 8001070:	08f8      	lsrs	r0, r7, #3
 8001072:	e6c8      	b.n	8000e06 <__aeabi_dadd+0x25a>
 8001074:	2c00      	cmp	r4, #0
 8001076:	d000      	beq.n	800107a <__aeabi_dadd+0x4ce>
 8001078:	e081      	b.n	800117e <__aeabi_dadd+0x5d2>
 800107a:	4643      	mov	r3, r8
 800107c:	430b      	orrs	r3, r1
 800107e:	d115      	bne.n	80010ac <__aeabi_dadd+0x500>
 8001080:	2080      	movs	r0, #128	; 0x80
 8001082:	2500      	movs	r5, #0
 8001084:	0300      	lsls	r0, r0, #12
 8001086:	e6e3      	b.n	8000e50 <__aeabi_dadd+0x2a4>
 8001088:	1a5c      	subs	r4, r3, r1
 800108a:	42a3      	cmp	r3, r4
 800108c:	419b      	sbcs	r3, r3
 800108e:	1bc7      	subs	r7, r0, r7
 8001090:	425b      	negs	r3, r3
 8001092:	2601      	movs	r6, #1
 8001094:	1aff      	subs	r7, r7, r3
 8001096:	e5da      	b.n	8000c4e <__aeabi_dadd+0xa2>
 8001098:	0742      	lsls	r2, r0, #29
 800109a:	08db      	lsrs	r3, r3, #3
 800109c:	4313      	orrs	r3, r2
 800109e:	08c0      	lsrs	r0, r0, #3
 80010a0:	e6d2      	b.n	8000e48 <__aeabi_dadd+0x29c>
 80010a2:	0742      	lsls	r2, r0, #29
 80010a4:	08db      	lsrs	r3, r3, #3
 80010a6:	4313      	orrs	r3, r2
 80010a8:	08c0      	lsrs	r0, r0, #3
 80010aa:	e6ac      	b.n	8000e06 <__aeabi_dadd+0x25a>
 80010ac:	4643      	mov	r3, r8
 80010ae:	4642      	mov	r2, r8
 80010b0:	08c9      	lsrs	r1, r1, #3
 80010b2:	075b      	lsls	r3, r3, #29
 80010b4:	4655      	mov	r5, sl
 80010b6:	430b      	orrs	r3, r1
 80010b8:	08d0      	lsrs	r0, r2, #3
 80010ba:	e6c5      	b.n	8000e48 <__aeabi_dadd+0x29c>
 80010bc:	4643      	mov	r3, r8
 80010be:	4642      	mov	r2, r8
 80010c0:	075b      	lsls	r3, r3, #29
 80010c2:	08c9      	lsrs	r1, r1, #3
 80010c4:	430b      	orrs	r3, r1
 80010c6:	08d0      	lsrs	r0, r2, #3
 80010c8:	e6be      	b.n	8000e48 <__aeabi_dadd+0x29c>
 80010ca:	4303      	orrs	r3, r0
 80010cc:	001c      	movs	r4, r3
 80010ce:	1e63      	subs	r3, r4, #1
 80010d0:	419c      	sbcs	r4, r3
 80010d2:	e6fc      	b.n	8000ece <__aeabi_dadd+0x322>
 80010d4:	0002      	movs	r2, r0
 80010d6:	3c20      	subs	r4, #32
 80010d8:	40e2      	lsrs	r2, r4
 80010da:	0014      	movs	r4, r2
 80010dc:	4662      	mov	r2, ip
 80010de:	2a20      	cmp	r2, #32
 80010e0:	d003      	beq.n	80010ea <__aeabi_dadd+0x53e>
 80010e2:	2540      	movs	r5, #64	; 0x40
 80010e4:	1aad      	subs	r5, r5, r2
 80010e6:	40a8      	lsls	r0, r5
 80010e8:	4303      	orrs	r3, r0
 80010ea:	1e58      	subs	r0, r3, #1
 80010ec:	4183      	sbcs	r3, r0
 80010ee:	4323      	orrs	r3, r4
 80010f0:	e775      	b.n	8000fde <__aeabi_dadd+0x432>
 80010f2:	2a00      	cmp	r2, #0
 80010f4:	d0e2      	beq.n	80010bc <__aeabi_dadd+0x510>
 80010f6:	003a      	movs	r2, r7
 80010f8:	430a      	orrs	r2, r1
 80010fa:	d0cd      	beq.n	8001098 <__aeabi_dadd+0x4ec>
 80010fc:	0742      	lsls	r2, r0, #29
 80010fe:	08db      	lsrs	r3, r3, #3
 8001100:	4313      	orrs	r3, r2
 8001102:	2280      	movs	r2, #128	; 0x80
 8001104:	08c0      	lsrs	r0, r0, #3
 8001106:	0312      	lsls	r2, r2, #12
 8001108:	4210      	tst	r0, r2
 800110a:	d006      	beq.n	800111a <__aeabi_dadd+0x56e>
 800110c:	08fc      	lsrs	r4, r7, #3
 800110e:	4214      	tst	r4, r2
 8001110:	d103      	bne.n	800111a <__aeabi_dadd+0x56e>
 8001112:	0020      	movs	r0, r4
 8001114:	08cb      	lsrs	r3, r1, #3
 8001116:	077a      	lsls	r2, r7, #29
 8001118:	4313      	orrs	r3, r2
 800111a:	0f5a      	lsrs	r2, r3, #29
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	0752      	lsls	r2, r2, #29
 8001120:	08db      	lsrs	r3, r3, #3
 8001122:	4313      	orrs	r3, r2
 8001124:	e690      	b.n	8000e48 <__aeabi_dadd+0x29c>
 8001126:	4643      	mov	r3, r8
 8001128:	430b      	orrs	r3, r1
 800112a:	d100      	bne.n	800112e <__aeabi_dadd+0x582>
 800112c:	e709      	b.n	8000f42 <__aeabi_dadd+0x396>
 800112e:	4643      	mov	r3, r8
 8001130:	4642      	mov	r2, r8
 8001132:	08c9      	lsrs	r1, r1, #3
 8001134:	075b      	lsls	r3, r3, #29
 8001136:	4655      	mov	r5, sl
 8001138:	430b      	orrs	r3, r1
 800113a:	08d0      	lsrs	r0, r2, #3
 800113c:	e666      	b.n	8000e0c <__aeabi_dadd+0x260>
 800113e:	1acc      	subs	r4, r1, r3
 8001140:	42a1      	cmp	r1, r4
 8001142:	4189      	sbcs	r1, r1
 8001144:	1a3f      	subs	r7, r7, r0
 8001146:	4249      	negs	r1, r1
 8001148:	4655      	mov	r5, sl
 800114a:	2601      	movs	r6, #1
 800114c:	1a7f      	subs	r7, r7, r1
 800114e:	e57e      	b.n	8000c4e <__aeabi_dadd+0xa2>
 8001150:	4642      	mov	r2, r8
 8001152:	1a5c      	subs	r4, r3, r1
 8001154:	1a87      	subs	r7, r0, r2
 8001156:	42a3      	cmp	r3, r4
 8001158:	4192      	sbcs	r2, r2
 800115a:	4252      	negs	r2, r2
 800115c:	1abf      	subs	r7, r7, r2
 800115e:	023a      	lsls	r2, r7, #8
 8001160:	d53d      	bpl.n	80011de <__aeabi_dadd+0x632>
 8001162:	1acc      	subs	r4, r1, r3
 8001164:	42a1      	cmp	r1, r4
 8001166:	4189      	sbcs	r1, r1
 8001168:	4643      	mov	r3, r8
 800116a:	4249      	negs	r1, r1
 800116c:	1a1f      	subs	r7, r3, r0
 800116e:	4655      	mov	r5, sl
 8001170:	1a7f      	subs	r7, r7, r1
 8001172:	e595      	b.n	8000ca0 <__aeabi_dadd+0xf4>
 8001174:	077b      	lsls	r3, r7, #29
 8001176:	08c9      	lsrs	r1, r1, #3
 8001178:	430b      	orrs	r3, r1
 800117a:	08f8      	lsrs	r0, r7, #3
 800117c:	e643      	b.n	8000e06 <__aeabi_dadd+0x25a>
 800117e:	4644      	mov	r4, r8
 8001180:	08db      	lsrs	r3, r3, #3
 8001182:	430c      	orrs	r4, r1
 8001184:	d130      	bne.n	80011e8 <__aeabi_dadd+0x63c>
 8001186:	0742      	lsls	r2, r0, #29
 8001188:	4313      	orrs	r3, r2
 800118a:	08c0      	lsrs	r0, r0, #3
 800118c:	e65c      	b.n	8000e48 <__aeabi_dadd+0x29c>
 800118e:	077b      	lsls	r3, r7, #29
 8001190:	08c9      	lsrs	r1, r1, #3
 8001192:	430b      	orrs	r3, r1
 8001194:	08f8      	lsrs	r0, r7, #3
 8001196:	e639      	b.n	8000e0c <__aeabi_dadd+0x260>
 8001198:	185c      	adds	r4, r3, r1
 800119a:	429c      	cmp	r4, r3
 800119c:	419b      	sbcs	r3, r3
 800119e:	4440      	add	r0, r8
 80011a0:	425b      	negs	r3, r3
 80011a2:	18c7      	adds	r7, r0, r3
 80011a4:	023b      	lsls	r3, r7, #8
 80011a6:	d400      	bmi.n	80011aa <__aeabi_dadd+0x5fe>
 80011a8:	e625      	b.n	8000df6 <__aeabi_dadd+0x24a>
 80011aa:	4b1d      	ldr	r3, [pc, #116]	; (8001220 <__aeabi_dadd+0x674>)
 80011ac:	2601      	movs	r6, #1
 80011ae:	401f      	ands	r7, r3
 80011b0:	e621      	b.n	8000df6 <__aeabi_dadd+0x24a>
 80011b2:	0004      	movs	r4, r0
 80011b4:	3a20      	subs	r2, #32
 80011b6:	40d4      	lsrs	r4, r2
 80011b8:	4662      	mov	r2, ip
 80011ba:	2a20      	cmp	r2, #32
 80011bc:	d004      	beq.n	80011c8 <__aeabi_dadd+0x61c>
 80011be:	2240      	movs	r2, #64	; 0x40
 80011c0:	4666      	mov	r6, ip
 80011c2:	1b92      	subs	r2, r2, r6
 80011c4:	4090      	lsls	r0, r2
 80011c6:	4303      	orrs	r3, r0
 80011c8:	1e5a      	subs	r2, r3, #1
 80011ca:	4193      	sbcs	r3, r2
 80011cc:	431c      	orrs	r4, r3
 80011ce:	e67e      	b.n	8000ece <__aeabi_dadd+0x322>
 80011d0:	185c      	adds	r4, r3, r1
 80011d2:	428c      	cmp	r4, r1
 80011d4:	4189      	sbcs	r1, r1
 80011d6:	4440      	add	r0, r8
 80011d8:	4249      	negs	r1, r1
 80011da:	1847      	adds	r7, r0, r1
 80011dc:	e6dd      	b.n	8000f9a <__aeabi_dadd+0x3ee>
 80011de:	0023      	movs	r3, r4
 80011e0:	433b      	orrs	r3, r7
 80011e2:	d100      	bne.n	80011e6 <__aeabi_dadd+0x63a>
 80011e4:	e6ad      	b.n	8000f42 <__aeabi_dadd+0x396>
 80011e6:	e606      	b.n	8000df6 <__aeabi_dadd+0x24a>
 80011e8:	0744      	lsls	r4, r0, #29
 80011ea:	4323      	orrs	r3, r4
 80011ec:	2480      	movs	r4, #128	; 0x80
 80011ee:	08c0      	lsrs	r0, r0, #3
 80011f0:	0324      	lsls	r4, r4, #12
 80011f2:	4220      	tst	r0, r4
 80011f4:	d008      	beq.n	8001208 <__aeabi_dadd+0x65c>
 80011f6:	4642      	mov	r2, r8
 80011f8:	08d6      	lsrs	r6, r2, #3
 80011fa:	4226      	tst	r6, r4
 80011fc:	d104      	bne.n	8001208 <__aeabi_dadd+0x65c>
 80011fe:	4655      	mov	r5, sl
 8001200:	0030      	movs	r0, r6
 8001202:	08cb      	lsrs	r3, r1, #3
 8001204:	0751      	lsls	r1, r2, #29
 8001206:	430b      	orrs	r3, r1
 8001208:	0f5a      	lsrs	r2, r3, #29
 800120a:	00db      	lsls	r3, r3, #3
 800120c:	08db      	lsrs	r3, r3, #3
 800120e:	0752      	lsls	r2, r2, #29
 8001210:	4313      	orrs	r3, r2
 8001212:	e619      	b.n	8000e48 <__aeabi_dadd+0x29c>
 8001214:	2300      	movs	r3, #0
 8001216:	4a01      	ldr	r2, [pc, #4]	; (800121c <__aeabi_dadd+0x670>)
 8001218:	001f      	movs	r7, r3
 800121a:	e55e      	b.n	8000cda <__aeabi_dadd+0x12e>
 800121c:	000007ff 	.word	0x000007ff
 8001220:	ff7fffff 	.word	0xff7fffff

08001224 <__aeabi_ddiv>:
 8001224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001226:	4657      	mov	r7, sl
 8001228:	464e      	mov	r6, r9
 800122a:	4645      	mov	r5, r8
 800122c:	46de      	mov	lr, fp
 800122e:	b5e0      	push	{r5, r6, r7, lr}
 8001230:	4681      	mov	r9, r0
 8001232:	0005      	movs	r5, r0
 8001234:	030c      	lsls	r4, r1, #12
 8001236:	0048      	lsls	r0, r1, #1
 8001238:	4692      	mov	sl, r2
 800123a:	001f      	movs	r7, r3
 800123c:	b085      	sub	sp, #20
 800123e:	0b24      	lsrs	r4, r4, #12
 8001240:	0d40      	lsrs	r0, r0, #21
 8001242:	0fce      	lsrs	r6, r1, #31
 8001244:	2800      	cmp	r0, #0
 8001246:	d100      	bne.n	800124a <__aeabi_ddiv+0x26>
 8001248:	e156      	b.n	80014f8 <__aeabi_ddiv+0x2d4>
 800124a:	4bd4      	ldr	r3, [pc, #848]	; (800159c <__aeabi_ddiv+0x378>)
 800124c:	4298      	cmp	r0, r3
 800124e:	d100      	bne.n	8001252 <__aeabi_ddiv+0x2e>
 8001250:	e172      	b.n	8001538 <__aeabi_ddiv+0x314>
 8001252:	0f6b      	lsrs	r3, r5, #29
 8001254:	00e4      	lsls	r4, r4, #3
 8001256:	431c      	orrs	r4, r3
 8001258:	2380      	movs	r3, #128	; 0x80
 800125a:	041b      	lsls	r3, r3, #16
 800125c:	4323      	orrs	r3, r4
 800125e:	4698      	mov	r8, r3
 8001260:	4bcf      	ldr	r3, [pc, #828]	; (80015a0 <__aeabi_ddiv+0x37c>)
 8001262:	00ed      	lsls	r5, r5, #3
 8001264:	469b      	mov	fp, r3
 8001266:	2300      	movs	r3, #0
 8001268:	4699      	mov	r9, r3
 800126a:	4483      	add	fp, r0
 800126c:	9300      	str	r3, [sp, #0]
 800126e:	033c      	lsls	r4, r7, #12
 8001270:	007b      	lsls	r3, r7, #1
 8001272:	4650      	mov	r0, sl
 8001274:	0b24      	lsrs	r4, r4, #12
 8001276:	0d5b      	lsrs	r3, r3, #21
 8001278:	0fff      	lsrs	r7, r7, #31
 800127a:	2b00      	cmp	r3, #0
 800127c:	d100      	bne.n	8001280 <__aeabi_ddiv+0x5c>
 800127e:	e11f      	b.n	80014c0 <__aeabi_ddiv+0x29c>
 8001280:	4ac6      	ldr	r2, [pc, #792]	; (800159c <__aeabi_ddiv+0x378>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d100      	bne.n	8001288 <__aeabi_ddiv+0x64>
 8001286:	e162      	b.n	800154e <__aeabi_ddiv+0x32a>
 8001288:	49c5      	ldr	r1, [pc, #788]	; (80015a0 <__aeabi_ddiv+0x37c>)
 800128a:	0f42      	lsrs	r2, r0, #29
 800128c:	468c      	mov	ip, r1
 800128e:	00e4      	lsls	r4, r4, #3
 8001290:	4659      	mov	r1, fp
 8001292:	4314      	orrs	r4, r2
 8001294:	2280      	movs	r2, #128	; 0x80
 8001296:	4463      	add	r3, ip
 8001298:	0412      	lsls	r2, r2, #16
 800129a:	1acb      	subs	r3, r1, r3
 800129c:	4314      	orrs	r4, r2
 800129e:	469b      	mov	fp, r3
 80012a0:	00c2      	lsls	r2, r0, #3
 80012a2:	2000      	movs	r0, #0
 80012a4:	0033      	movs	r3, r6
 80012a6:	407b      	eors	r3, r7
 80012a8:	469a      	mov	sl, r3
 80012aa:	464b      	mov	r3, r9
 80012ac:	2b0f      	cmp	r3, #15
 80012ae:	d827      	bhi.n	8001300 <__aeabi_ddiv+0xdc>
 80012b0:	49bc      	ldr	r1, [pc, #752]	; (80015a4 <__aeabi_ddiv+0x380>)
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	58cb      	ldr	r3, [r1, r3]
 80012b6:	469f      	mov	pc, r3
 80012b8:	46b2      	mov	sl, r6
 80012ba:	9b00      	ldr	r3, [sp, #0]
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d016      	beq.n	80012ee <__aeabi_ddiv+0xca>
 80012c0:	2b03      	cmp	r3, #3
 80012c2:	d100      	bne.n	80012c6 <__aeabi_ddiv+0xa2>
 80012c4:	e28e      	b.n	80017e4 <__aeabi_ddiv+0x5c0>
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d000      	beq.n	80012cc <__aeabi_ddiv+0xa8>
 80012ca:	e0d9      	b.n	8001480 <__aeabi_ddiv+0x25c>
 80012cc:	2300      	movs	r3, #0
 80012ce:	2400      	movs	r4, #0
 80012d0:	2500      	movs	r5, #0
 80012d2:	4652      	mov	r2, sl
 80012d4:	051b      	lsls	r3, r3, #20
 80012d6:	4323      	orrs	r3, r4
 80012d8:	07d2      	lsls	r2, r2, #31
 80012da:	4313      	orrs	r3, r2
 80012dc:	0028      	movs	r0, r5
 80012de:	0019      	movs	r1, r3
 80012e0:	b005      	add	sp, #20
 80012e2:	bcf0      	pop	{r4, r5, r6, r7}
 80012e4:	46bb      	mov	fp, r7
 80012e6:	46b2      	mov	sl, r6
 80012e8:	46a9      	mov	r9, r5
 80012ea:	46a0      	mov	r8, r4
 80012ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012ee:	2400      	movs	r4, #0
 80012f0:	2500      	movs	r5, #0
 80012f2:	4baa      	ldr	r3, [pc, #680]	; (800159c <__aeabi_ddiv+0x378>)
 80012f4:	e7ed      	b.n	80012d2 <__aeabi_ddiv+0xae>
 80012f6:	46ba      	mov	sl, r7
 80012f8:	46a0      	mov	r8, r4
 80012fa:	0015      	movs	r5, r2
 80012fc:	9000      	str	r0, [sp, #0]
 80012fe:	e7dc      	b.n	80012ba <__aeabi_ddiv+0x96>
 8001300:	4544      	cmp	r4, r8
 8001302:	d200      	bcs.n	8001306 <__aeabi_ddiv+0xe2>
 8001304:	e1c7      	b.n	8001696 <__aeabi_ddiv+0x472>
 8001306:	d100      	bne.n	800130a <__aeabi_ddiv+0xe6>
 8001308:	e1c2      	b.n	8001690 <__aeabi_ddiv+0x46c>
 800130a:	2301      	movs	r3, #1
 800130c:	425b      	negs	r3, r3
 800130e:	469c      	mov	ip, r3
 8001310:	002e      	movs	r6, r5
 8001312:	4640      	mov	r0, r8
 8001314:	2500      	movs	r5, #0
 8001316:	44e3      	add	fp, ip
 8001318:	0223      	lsls	r3, r4, #8
 800131a:	0e14      	lsrs	r4, r2, #24
 800131c:	431c      	orrs	r4, r3
 800131e:	0c1b      	lsrs	r3, r3, #16
 8001320:	4699      	mov	r9, r3
 8001322:	0423      	lsls	r3, r4, #16
 8001324:	0c1f      	lsrs	r7, r3, #16
 8001326:	0212      	lsls	r2, r2, #8
 8001328:	4649      	mov	r1, r9
 800132a:	9200      	str	r2, [sp, #0]
 800132c:	9701      	str	r7, [sp, #4]
 800132e:	f7fe ff93 	bl	8000258 <__aeabi_uidivmod>
 8001332:	0002      	movs	r2, r0
 8001334:	437a      	muls	r2, r7
 8001336:	040b      	lsls	r3, r1, #16
 8001338:	0c31      	lsrs	r1, r6, #16
 800133a:	4680      	mov	r8, r0
 800133c:	4319      	orrs	r1, r3
 800133e:	428a      	cmp	r2, r1
 8001340:	d907      	bls.n	8001352 <__aeabi_ddiv+0x12e>
 8001342:	2301      	movs	r3, #1
 8001344:	425b      	negs	r3, r3
 8001346:	469c      	mov	ip, r3
 8001348:	1909      	adds	r1, r1, r4
 800134a:	44e0      	add	r8, ip
 800134c:	428c      	cmp	r4, r1
 800134e:	d800      	bhi.n	8001352 <__aeabi_ddiv+0x12e>
 8001350:	e207      	b.n	8001762 <__aeabi_ddiv+0x53e>
 8001352:	1a88      	subs	r0, r1, r2
 8001354:	4649      	mov	r1, r9
 8001356:	f7fe ff7f 	bl	8000258 <__aeabi_uidivmod>
 800135a:	0409      	lsls	r1, r1, #16
 800135c:	468c      	mov	ip, r1
 800135e:	0431      	lsls	r1, r6, #16
 8001360:	4666      	mov	r6, ip
 8001362:	9a01      	ldr	r2, [sp, #4]
 8001364:	0c09      	lsrs	r1, r1, #16
 8001366:	4342      	muls	r2, r0
 8001368:	0003      	movs	r3, r0
 800136a:	4331      	orrs	r1, r6
 800136c:	428a      	cmp	r2, r1
 800136e:	d904      	bls.n	800137a <__aeabi_ddiv+0x156>
 8001370:	1909      	adds	r1, r1, r4
 8001372:	3b01      	subs	r3, #1
 8001374:	428c      	cmp	r4, r1
 8001376:	d800      	bhi.n	800137a <__aeabi_ddiv+0x156>
 8001378:	e1ed      	b.n	8001756 <__aeabi_ddiv+0x532>
 800137a:	1a88      	subs	r0, r1, r2
 800137c:	4642      	mov	r2, r8
 800137e:	0412      	lsls	r2, r2, #16
 8001380:	431a      	orrs	r2, r3
 8001382:	4690      	mov	r8, r2
 8001384:	4641      	mov	r1, r8
 8001386:	9b00      	ldr	r3, [sp, #0]
 8001388:	040e      	lsls	r6, r1, #16
 800138a:	0c1b      	lsrs	r3, r3, #16
 800138c:	001f      	movs	r7, r3
 800138e:	9302      	str	r3, [sp, #8]
 8001390:	9b00      	ldr	r3, [sp, #0]
 8001392:	0c36      	lsrs	r6, r6, #16
 8001394:	041b      	lsls	r3, r3, #16
 8001396:	0c19      	lsrs	r1, r3, #16
 8001398:	000b      	movs	r3, r1
 800139a:	4373      	muls	r3, r6
 800139c:	0c12      	lsrs	r2, r2, #16
 800139e:	437e      	muls	r6, r7
 80013a0:	9103      	str	r1, [sp, #12]
 80013a2:	4351      	muls	r1, r2
 80013a4:	437a      	muls	r2, r7
 80013a6:	0c1f      	lsrs	r7, r3, #16
 80013a8:	46bc      	mov	ip, r7
 80013aa:	1876      	adds	r6, r6, r1
 80013ac:	4466      	add	r6, ip
 80013ae:	42b1      	cmp	r1, r6
 80013b0:	d903      	bls.n	80013ba <__aeabi_ddiv+0x196>
 80013b2:	2180      	movs	r1, #128	; 0x80
 80013b4:	0249      	lsls	r1, r1, #9
 80013b6:	468c      	mov	ip, r1
 80013b8:	4462      	add	r2, ip
 80013ba:	0c31      	lsrs	r1, r6, #16
 80013bc:	188a      	adds	r2, r1, r2
 80013be:	0431      	lsls	r1, r6, #16
 80013c0:	041e      	lsls	r6, r3, #16
 80013c2:	0c36      	lsrs	r6, r6, #16
 80013c4:	198e      	adds	r6, r1, r6
 80013c6:	4290      	cmp	r0, r2
 80013c8:	d302      	bcc.n	80013d0 <__aeabi_ddiv+0x1ac>
 80013ca:	d112      	bne.n	80013f2 <__aeabi_ddiv+0x1ce>
 80013cc:	42b5      	cmp	r5, r6
 80013ce:	d210      	bcs.n	80013f2 <__aeabi_ddiv+0x1ce>
 80013d0:	4643      	mov	r3, r8
 80013d2:	1e59      	subs	r1, r3, #1
 80013d4:	9b00      	ldr	r3, [sp, #0]
 80013d6:	469c      	mov	ip, r3
 80013d8:	4465      	add	r5, ip
 80013da:	001f      	movs	r7, r3
 80013dc:	429d      	cmp	r5, r3
 80013de:	419b      	sbcs	r3, r3
 80013e0:	425b      	negs	r3, r3
 80013e2:	191b      	adds	r3, r3, r4
 80013e4:	18c0      	adds	r0, r0, r3
 80013e6:	4284      	cmp	r4, r0
 80013e8:	d200      	bcs.n	80013ec <__aeabi_ddiv+0x1c8>
 80013ea:	e1a0      	b.n	800172e <__aeabi_ddiv+0x50a>
 80013ec:	d100      	bne.n	80013f0 <__aeabi_ddiv+0x1cc>
 80013ee:	e19b      	b.n	8001728 <__aeabi_ddiv+0x504>
 80013f0:	4688      	mov	r8, r1
 80013f2:	1bae      	subs	r6, r5, r6
 80013f4:	42b5      	cmp	r5, r6
 80013f6:	41ad      	sbcs	r5, r5
 80013f8:	1a80      	subs	r0, r0, r2
 80013fa:	426d      	negs	r5, r5
 80013fc:	1b40      	subs	r0, r0, r5
 80013fe:	4284      	cmp	r4, r0
 8001400:	d100      	bne.n	8001404 <__aeabi_ddiv+0x1e0>
 8001402:	e1d5      	b.n	80017b0 <__aeabi_ddiv+0x58c>
 8001404:	4649      	mov	r1, r9
 8001406:	f7fe ff27 	bl	8000258 <__aeabi_uidivmod>
 800140a:	9a01      	ldr	r2, [sp, #4]
 800140c:	040b      	lsls	r3, r1, #16
 800140e:	4342      	muls	r2, r0
 8001410:	0c31      	lsrs	r1, r6, #16
 8001412:	0005      	movs	r5, r0
 8001414:	4319      	orrs	r1, r3
 8001416:	428a      	cmp	r2, r1
 8001418:	d900      	bls.n	800141c <__aeabi_ddiv+0x1f8>
 800141a:	e16c      	b.n	80016f6 <__aeabi_ddiv+0x4d2>
 800141c:	1a88      	subs	r0, r1, r2
 800141e:	4649      	mov	r1, r9
 8001420:	f7fe ff1a 	bl	8000258 <__aeabi_uidivmod>
 8001424:	9a01      	ldr	r2, [sp, #4]
 8001426:	0436      	lsls	r6, r6, #16
 8001428:	4342      	muls	r2, r0
 800142a:	0409      	lsls	r1, r1, #16
 800142c:	0c36      	lsrs	r6, r6, #16
 800142e:	0003      	movs	r3, r0
 8001430:	430e      	orrs	r6, r1
 8001432:	42b2      	cmp	r2, r6
 8001434:	d900      	bls.n	8001438 <__aeabi_ddiv+0x214>
 8001436:	e153      	b.n	80016e0 <__aeabi_ddiv+0x4bc>
 8001438:	9803      	ldr	r0, [sp, #12]
 800143a:	1ab6      	subs	r6, r6, r2
 800143c:	0002      	movs	r2, r0
 800143e:	042d      	lsls	r5, r5, #16
 8001440:	431d      	orrs	r5, r3
 8001442:	9f02      	ldr	r7, [sp, #8]
 8001444:	042b      	lsls	r3, r5, #16
 8001446:	0c1b      	lsrs	r3, r3, #16
 8001448:	435a      	muls	r2, r3
 800144a:	437b      	muls	r3, r7
 800144c:	469c      	mov	ip, r3
 800144e:	0c29      	lsrs	r1, r5, #16
 8001450:	4348      	muls	r0, r1
 8001452:	0c13      	lsrs	r3, r2, #16
 8001454:	4484      	add	ip, r0
 8001456:	4463      	add	r3, ip
 8001458:	4379      	muls	r1, r7
 800145a:	4298      	cmp	r0, r3
 800145c:	d903      	bls.n	8001466 <__aeabi_ddiv+0x242>
 800145e:	2080      	movs	r0, #128	; 0x80
 8001460:	0240      	lsls	r0, r0, #9
 8001462:	4684      	mov	ip, r0
 8001464:	4461      	add	r1, ip
 8001466:	0c18      	lsrs	r0, r3, #16
 8001468:	0412      	lsls	r2, r2, #16
 800146a:	041b      	lsls	r3, r3, #16
 800146c:	0c12      	lsrs	r2, r2, #16
 800146e:	1841      	adds	r1, r0, r1
 8001470:	189b      	adds	r3, r3, r2
 8001472:	428e      	cmp	r6, r1
 8001474:	d200      	bcs.n	8001478 <__aeabi_ddiv+0x254>
 8001476:	e0ff      	b.n	8001678 <__aeabi_ddiv+0x454>
 8001478:	d100      	bne.n	800147c <__aeabi_ddiv+0x258>
 800147a:	e0fa      	b.n	8001672 <__aeabi_ddiv+0x44e>
 800147c:	2301      	movs	r3, #1
 800147e:	431d      	orrs	r5, r3
 8001480:	4a49      	ldr	r2, [pc, #292]	; (80015a8 <__aeabi_ddiv+0x384>)
 8001482:	445a      	add	r2, fp
 8001484:	2a00      	cmp	r2, #0
 8001486:	dc00      	bgt.n	800148a <__aeabi_ddiv+0x266>
 8001488:	e0aa      	b.n	80015e0 <__aeabi_ddiv+0x3bc>
 800148a:	076b      	lsls	r3, r5, #29
 800148c:	d000      	beq.n	8001490 <__aeabi_ddiv+0x26c>
 800148e:	e13d      	b.n	800170c <__aeabi_ddiv+0x4e8>
 8001490:	08ed      	lsrs	r5, r5, #3
 8001492:	4643      	mov	r3, r8
 8001494:	01db      	lsls	r3, r3, #7
 8001496:	d506      	bpl.n	80014a6 <__aeabi_ddiv+0x282>
 8001498:	4642      	mov	r2, r8
 800149a:	4b44      	ldr	r3, [pc, #272]	; (80015ac <__aeabi_ddiv+0x388>)
 800149c:	401a      	ands	r2, r3
 800149e:	4690      	mov	r8, r2
 80014a0:	2280      	movs	r2, #128	; 0x80
 80014a2:	00d2      	lsls	r2, r2, #3
 80014a4:	445a      	add	r2, fp
 80014a6:	4b42      	ldr	r3, [pc, #264]	; (80015b0 <__aeabi_ddiv+0x38c>)
 80014a8:	429a      	cmp	r2, r3
 80014aa:	dd00      	ble.n	80014ae <__aeabi_ddiv+0x28a>
 80014ac:	e71f      	b.n	80012ee <__aeabi_ddiv+0xca>
 80014ae:	4643      	mov	r3, r8
 80014b0:	075b      	lsls	r3, r3, #29
 80014b2:	431d      	orrs	r5, r3
 80014b4:	4643      	mov	r3, r8
 80014b6:	0552      	lsls	r2, r2, #21
 80014b8:	025c      	lsls	r4, r3, #9
 80014ba:	0b24      	lsrs	r4, r4, #12
 80014bc:	0d53      	lsrs	r3, r2, #21
 80014be:	e708      	b.n	80012d2 <__aeabi_ddiv+0xae>
 80014c0:	4652      	mov	r2, sl
 80014c2:	4322      	orrs	r2, r4
 80014c4:	d100      	bne.n	80014c8 <__aeabi_ddiv+0x2a4>
 80014c6:	e07b      	b.n	80015c0 <__aeabi_ddiv+0x39c>
 80014c8:	2c00      	cmp	r4, #0
 80014ca:	d100      	bne.n	80014ce <__aeabi_ddiv+0x2aa>
 80014cc:	e0fa      	b.n	80016c4 <__aeabi_ddiv+0x4a0>
 80014ce:	0020      	movs	r0, r4
 80014d0:	f001 fa22 	bl	8002918 <__clzsi2>
 80014d4:	0002      	movs	r2, r0
 80014d6:	3a0b      	subs	r2, #11
 80014d8:	231d      	movs	r3, #29
 80014da:	0001      	movs	r1, r0
 80014dc:	1a9b      	subs	r3, r3, r2
 80014de:	4652      	mov	r2, sl
 80014e0:	3908      	subs	r1, #8
 80014e2:	40da      	lsrs	r2, r3
 80014e4:	408c      	lsls	r4, r1
 80014e6:	4314      	orrs	r4, r2
 80014e8:	4652      	mov	r2, sl
 80014ea:	408a      	lsls	r2, r1
 80014ec:	4b31      	ldr	r3, [pc, #196]	; (80015b4 <__aeabi_ddiv+0x390>)
 80014ee:	4458      	add	r0, fp
 80014f0:	469b      	mov	fp, r3
 80014f2:	4483      	add	fp, r0
 80014f4:	2000      	movs	r0, #0
 80014f6:	e6d5      	b.n	80012a4 <__aeabi_ddiv+0x80>
 80014f8:	464b      	mov	r3, r9
 80014fa:	4323      	orrs	r3, r4
 80014fc:	4698      	mov	r8, r3
 80014fe:	d044      	beq.n	800158a <__aeabi_ddiv+0x366>
 8001500:	2c00      	cmp	r4, #0
 8001502:	d100      	bne.n	8001506 <__aeabi_ddiv+0x2e2>
 8001504:	e0ce      	b.n	80016a4 <__aeabi_ddiv+0x480>
 8001506:	0020      	movs	r0, r4
 8001508:	f001 fa06 	bl	8002918 <__clzsi2>
 800150c:	0001      	movs	r1, r0
 800150e:	0002      	movs	r2, r0
 8001510:	390b      	subs	r1, #11
 8001512:	231d      	movs	r3, #29
 8001514:	1a5b      	subs	r3, r3, r1
 8001516:	4649      	mov	r1, r9
 8001518:	0010      	movs	r0, r2
 800151a:	40d9      	lsrs	r1, r3
 800151c:	3808      	subs	r0, #8
 800151e:	4084      	lsls	r4, r0
 8001520:	000b      	movs	r3, r1
 8001522:	464d      	mov	r5, r9
 8001524:	4323      	orrs	r3, r4
 8001526:	4698      	mov	r8, r3
 8001528:	4085      	lsls	r5, r0
 800152a:	4823      	ldr	r0, [pc, #140]	; (80015b8 <__aeabi_ddiv+0x394>)
 800152c:	1a83      	subs	r3, r0, r2
 800152e:	469b      	mov	fp, r3
 8001530:	2300      	movs	r3, #0
 8001532:	4699      	mov	r9, r3
 8001534:	9300      	str	r3, [sp, #0]
 8001536:	e69a      	b.n	800126e <__aeabi_ddiv+0x4a>
 8001538:	464b      	mov	r3, r9
 800153a:	4323      	orrs	r3, r4
 800153c:	4698      	mov	r8, r3
 800153e:	d11d      	bne.n	800157c <__aeabi_ddiv+0x358>
 8001540:	2308      	movs	r3, #8
 8001542:	4699      	mov	r9, r3
 8001544:	3b06      	subs	r3, #6
 8001546:	2500      	movs	r5, #0
 8001548:	4683      	mov	fp, r0
 800154a:	9300      	str	r3, [sp, #0]
 800154c:	e68f      	b.n	800126e <__aeabi_ddiv+0x4a>
 800154e:	4652      	mov	r2, sl
 8001550:	4322      	orrs	r2, r4
 8001552:	d109      	bne.n	8001568 <__aeabi_ddiv+0x344>
 8001554:	2302      	movs	r3, #2
 8001556:	4649      	mov	r1, r9
 8001558:	4319      	orrs	r1, r3
 800155a:	4b18      	ldr	r3, [pc, #96]	; (80015bc <__aeabi_ddiv+0x398>)
 800155c:	4689      	mov	r9, r1
 800155e:	469c      	mov	ip, r3
 8001560:	2400      	movs	r4, #0
 8001562:	2002      	movs	r0, #2
 8001564:	44e3      	add	fp, ip
 8001566:	e69d      	b.n	80012a4 <__aeabi_ddiv+0x80>
 8001568:	2303      	movs	r3, #3
 800156a:	464a      	mov	r2, r9
 800156c:	431a      	orrs	r2, r3
 800156e:	4b13      	ldr	r3, [pc, #76]	; (80015bc <__aeabi_ddiv+0x398>)
 8001570:	4691      	mov	r9, r2
 8001572:	469c      	mov	ip, r3
 8001574:	4652      	mov	r2, sl
 8001576:	2003      	movs	r0, #3
 8001578:	44e3      	add	fp, ip
 800157a:	e693      	b.n	80012a4 <__aeabi_ddiv+0x80>
 800157c:	230c      	movs	r3, #12
 800157e:	4699      	mov	r9, r3
 8001580:	3b09      	subs	r3, #9
 8001582:	46a0      	mov	r8, r4
 8001584:	4683      	mov	fp, r0
 8001586:	9300      	str	r3, [sp, #0]
 8001588:	e671      	b.n	800126e <__aeabi_ddiv+0x4a>
 800158a:	2304      	movs	r3, #4
 800158c:	4699      	mov	r9, r3
 800158e:	2300      	movs	r3, #0
 8001590:	469b      	mov	fp, r3
 8001592:	3301      	adds	r3, #1
 8001594:	2500      	movs	r5, #0
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	e669      	b.n	800126e <__aeabi_ddiv+0x4a>
 800159a:	46c0      	nop			; (mov r8, r8)
 800159c:	000007ff 	.word	0x000007ff
 80015a0:	fffffc01 	.word	0xfffffc01
 80015a4:	08013370 	.word	0x08013370
 80015a8:	000003ff 	.word	0x000003ff
 80015ac:	feffffff 	.word	0xfeffffff
 80015b0:	000007fe 	.word	0x000007fe
 80015b4:	000003f3 	.word	0x000003f3
 80015b8:	fffffc0d 	.word	0xfffffc0d
 80015bc:	fffff801 	.word	0xfffff801
 80015c0:	4649      	mov	r1, r9
 80015c2:	2301      	movs	r3, #1
 80015c4:	4319      	orrs	r1, r3
 80015c6:	4689      	mov	r9, r1
 80015c8:	2400      	movs	r4, #0
 80015ca:	2001      	movs	r0, #1
 80015cc:	e66a      	b.n	80012a4 <__aeabi_ddiv+0x80>
 80015ce:	2300      	movs	r3, #0
 80015d0:	2480      	movs	r4, #128	; 0x80
 80015d2:	469a      	mov	sl, r3
 80015d4:	2500      	movs	r5, #0
 80015d6:	4b8a      	ldr	r3, [pc, #552]	; (8001800 <__aeabi_ddiv+0x5dc>)
 80015d8:	0324      	lsls	r4, r4, #12
 80015da:	e67a      	b.n	80012d2 <__aeabi_ddiv+0xae>
 80015dc:	2501      	movs	r5, #1
 80015de:	426d      	negs	r5, r5
 80015e0:	2301      	movs	r3, #1
 80015e2:	1a9b      	subs	r3, r3, r2
 80015e4:	2b38      	cmp	r3, #56	; 0x38
 80015e6:	dd00      	ble.n	80015ea <__aeabi_ddiv+0x3c6>
 80015e8:	e670      	b.n	80012cc <__aeabi_ddiv+0xa8>
 80015ea:	2b1f      	cmp	r3, #31
 80015ec:	dc00      	bgt.n	80015f0 <__aeabi_ddiv+0x3cc>
 80015ee:	e0bf      	b.n	8001770 <__aeabi_ddiv+0x54c>
 80015f0:	211f      	movs	r1, #31
 80015f2:	4249      	negs	r1, r1
 80015f4:	1a8a      	subs	r2, r1, r2
 80015f6:	4641      	mov	r1, r8
 80015f8:	40d1      	lsrs	r1, r2
 80015fa:	000a      	movs	r2, r1
 80015fc:	2b20      	cmp	r3, #32
 80015fe:	d004      	beq.n	800160a <__aeabi_ddiv+0x3e6>
 8001600:	4641      	mov	r1, r8
 8001602:	4b80      	ldr	r3, [pc, #512]	; (8001804 <__aeabi_ddiv+0x5e0>)
 8001604:	445b      	add	r3, fp
 8001606:	4099      	lsls	r1, r3
 8001608:	430d      	orrs	r5, r1
 800160a:	1e6b      	subs	r3, r5, #1
 800160c:	419d      	sbcs	r5, r3
 800160e:	2307      	movs	r3, #7
 8001610:	432a      	orrs	r2, r5
 8001612:	001d      	movs	r5, r3
 8001614:	2400      	movs	r4, #0
 8001616:	4015      	ands	r5, r2
 8001618:	4213      	tst	r3, r2
 800161a:	d100      	bne.n	800161e <__aeabi_ddiv+0x3fa>
 800161c:	e0d4      	b.n	80017c8 <__aeabi_ddiv+0x5a4>
 800161e:	210f      	movs	r1, #15
 8001620:	2300      	movs	r3, #0
 8001622:	4011      	ands	r1, r2
 8001624:	2904      	cmp	r1, #4
 8001626:	d100      	bne.n	800162a <__aeabi_ddiv+0x406>
 8001628:	e0cb      	b.n	80017c2 <__aeabi_ddiv+0x59e>
 800162a:	1d11      	adds	r1, r2, #4
 800162c:	4291      	cmp	r1, r2
 800162e:	4192      	sbcs	r2, r2
 8001630:	4252      	negs	r2, r2
 8001632:	189b      	adds	r3, r3, r2
 8001634:	000a      	movs	r2, r1
 8001636:	0219      	lsls	r1, r3, #8
 8001638:	d400      	bmi.n	800163c <__aeabi_ddiv+0x418>
 800163a:	e0c2      	b.n	80017c2 <__aeabi_ddiv+0x59e>
 800163c:	2301      	movs	r3, #1
 800163e:	2400      	movs	r4, #0
 8001640:	2500      	movs	r5, #0
 8001642:	e646      	b.n	80012d2 <__aeabi_ddiv+0xae>
 8001644:	2380      	movs	r3, #128	; 0x80
 8001646:	4641      	mov	r1, r8
 8001648:	031b      	lsls	r3, r3, #12
 800164a:	4219      	tst	r1, r3
 800164c:	d008      	beq.n	8001660 <__aeabi_ddiv+0x43c>
 800164e:	421c      	tst	r4, r3
 8001650:	d106      	bne.n	8001660 <__aeabi_ddiv+0x43c>
 8001652:	431c      	orrs	r4, r3
 8001654:	0324      	lsls	r4, r4, #12
 8001656:	46ba      	mov	sl, r7
 8001658:	0015      	movs	r5, r2
 800165a:	4b69      	ldr	r3, [pc, #420]	; (8001800 <__aeabi_ddiv+0x5dc>)
 800165c:	0b24      	lsrs	r4, r4, #12
 800165e:	e638      	b.n	80012d2 <__aeabi_ddiv+0xae>
 8001660:	2480      	movs	r4, #128	; 0x80
 8001662:	4643      	mov	r3, r8
 8001664:	0324      	lsls	r4, r4, #12
 8001666:	431c      	orrs	r4, r3
 8001668:	0324      	lsls	r4, r4, #12
 800166a:	46b2      	mov	sl, r6
 800166c:	4b64      	ldr	r3, [pc, #400]	; (8001800 <__aeabi_ddiv+0x5dc>)
 800166e:	0b24      	lsrs	r4, r4, #12
 8001670:	e62f      	b.n	80012d2 <__aeabi_ddiv+0xae>
 8001672:	2b00      	cmp	r3, #0
 8001674:	d100      	bne.n	8001678 <__aeabi_ddiv+0x454>
 8001676:	e703      	b.n	8001480 <__aeabi_ddiv+0x25c>
 8001678:	19a6      	adds	r6, r4, r6
 800167a:	1e68      	subs	r0, r5, #1
 800167c:	42a6      	cmp	r6, r4
 800167e:	d200      	bcs.n	8001682 <__aeabi_ddiv+0x45e>
 8001680:	e08d      	b.n	800179e <__aeabi_ddiv+0x57a>
 8001682:	428e      	cmp	r6, r1
 8001684:	d200      	bcs.n	8001688 <__aeabi_ddiv+0x464>
 8001686:	e0a3      	b.n	80017d0 <__aeabi_ddiv+0x5ac>
 8001688:	d100      	bne.n	800168c <__aeabi_ddiv+0x468>
 800168a:	e0b3      	b.n	80017f4 <__aeabi_ddiv+0x5d0>
 800168c:	0005      	movs	r5, r0
 800168e:	e6f5      	b.n	800147c <__aeabi_ddiv+0x258>
 8001690:	42aa      	cmp	r2, r5
 8001692:	d900      	bls.n	8001696 <__aeabi_ddiv+0x472>
 8001694:	e639      	b.n	800130a <__aeabi_ddiv+0xe6>
 8001696:	4643      	mov	r3, r8
 8001698:	07de      	lsls	r6, r3, #31
 800169a:	0858      	lsrs	r0, r3, #1
 800169c:	086b      	lsrs	r3, r5, #1
 800169e:	431e      	orrs	r6, r3
 80016a0:	07ed      	lsls	r5, r5, #31
 80016a2:	e639      	b.n	8001318 <__aeabi_ddiv+0xf4>
 80016a4:	4648      	mov	r0, r9
 80016a6:	f001 f937 	bl	8002918 <__clzsi2>
 80016aa:	0001      	movs	r1, r0
 80016ac:	0002      	movs	r2, r0
 80016ae:	3115      	adds	r1, #21
 80016b0:	3220      	adds	r2, #32
 80016b2:	291c      	cmp	r1, #28
 80016b4:	dc00      	bgt.n	80016b8 <__aeabi_ddiv+0x494>
 80016b6:	e72c      	b.n	8001512 <__aeabi_ddiv+0x2ee>
 80016b8:	464b      	mov	r3, r9
 80016ba:	3808      	subs	r0, #8
 80016bc:	4083      	lsls	r3, r0
 80016be:	2500      	movs	r5, #0
 80016c0:	4698      	mov	r8, r3
 80016c2:	e732      	b.n	800152a <__aeabi_ddiv+0x306>
 80016c4:	f001 f928 	bl	8002918 <__clzsi2>
 80016c8:	0003      	movs	r3, r0
 80016ca:	001a      	movs	r2, r3
 80016cc:	3215      	adds	r2, #21
 80016ce:	3020      	adds	r0, #32
 80016d0:	2a1c      	cmp	r2, #28
 80016d2:	dc00      	bgt.n	80016d6 <__aeabi_ddiv+0x4b2>
 80016d4:	e700      	b.n	80014d8 <__aeabi_ddiv+0x2b4>
 80016d6:	4654      	mov	r4, sl
 80016d8:	3b08      	subs	r3, #8
 80016da:	2200      	movs	r2, #0
 80016dc:	409c      	lsls	r4, r3
 80016de:	e705      	b.n	80014ec <__aeabi_ddiv+0x2c8>
 80016e0:	1936      	adds	r6, r6, r4
 80016e2:	3b01      	subs	r3, #1
 80016e4:	42b4      	cmp	r4, r6
 80016e6:	d900      	bls.n	80016ea <__aeabi_ddiv+0x4c6>
 80016e8:	e6a6      	b.n	8001438 <__aeabi_ddiv+0x214>
 80016ea:	42b2      	cmp	r2, r6
 80016ec:	d800      	bhi.n	80016f0 <__aeabi_ddiv+0x4cc>
 80016ee:	e6a3      	b.n	8001438 <__aeabi_ddiv+0x214>
 80016f0:	1e83      	subs	r3, r0, #2
 80016f2:	1936      	adds	r6, r6, r4
 80016f4:	e6a0      	b.n	8001438 <__aeabi_ddiv+0x214>
 80016f6:	1909      	adds	r1, r1, r4
 80016f8:	3d01      	subs	r5, #1
 80016fa:	428c      	cmp	r4, r1
 80016fc:	d900      	bls.n	8001700 <__aeabi_ddiv+0x4dc>
 80016fe:	e68d      	b.n	800141c <__aeabi_ddiv+0x1f8>
 8001700:	428a      	cmp	r2, r1
 8001702:	d800      	bhi.n	8001706 <__aeabi_ddiv+0x4e2>
 8001704:	e68a      	b.n	800141c <__aeabi_ddiv+0x1f8>
 8001706:	1e85      	subs	r5, r0, #2
 8001708:	1909      	adds	r1, r1, r4
 800170a:	e687      	b.n	800141c <__aeabi_ddiv+0x1f8>
 800170c:	230f      	movs	r3, #15
 800170e:	402b      	ands	r3, r5
 8001710:	2b04      	cmp	r3, #4
 8001712:	d100      	bne.n	8001716 <__aeabi_ddiv+0x4f2>
 8001714:	e6bc      	b.n	8001490 <__aeabi_ddiv+0x26c>
 8001716:	2305      	movs	r3, #5
 8001718:	425b      	negs	r3, r3
 800171a:	42ab      	cmp	r3, r5
 800171c:	419b      	sbcs	r3, r3
 800171e:	3504      	adds	r5, #4
 8001720:	425b      	negs	r3, r3
 8001722:	08ed      	lsrs	r5, r5, #3
 8001724:	4498      	add	r8, r3
 8001726:	e6b4      	b.n	8001492 <__aeabi_ddiv+0x26e>
 8001728:	42af      	cmp	r7, r5
 800172a:	d900      	bls.n	800172e <__aeabi_ddiv+0x50a>
 800172c:	e660      	b.n	80013f0 <__aeabi_ddiv+0x1cc>
 800172e:	4282      	cmp	r2, r0
 8001730:	d804      	bhi.n	800173c <__aeabi_ddiv+0x518>
 8001732:	d000      	beq.n	8001736 <__aeabi_ddiv+0x512>
 8001734:	e65c      	b.n	80013f0 <__aeabi_ddiv+0x1cc>
 8001736:	42ae      	cmp	r6, r5
 8001738:	d800      	bhi.n	800173c <__aeabi_ddiv+0x518>
 800173a:	e659      	b.n	80013f0 <__aeabi_ddiv+0x1cc>
 800173c:	2302      	movs	r3, #2
 800173e:	425b      	negs	r3, r3
 8001740:	469c      	mov	ip, r3
 8001742:	9b00      	ldr	r3, [sp, #0]
 8001744:	44e0      	add	r8, ip
 8001746:	469c      	mov	ip, r3
 8001748:	4465      	add	r5, ip
 800174a:	429d      	cmp	r5, r3
 800174c:	419b      	sbcs	r3, r3
 800174e:	425b      	negs	r3, r3
 8001750:	191b      	adds	r3, r3, r4
 8001752:	18c0      	adds	r0, r0, r3
 8001754:	e64d      	b.n	80013f2 <__aeabi_ddiv+0x1ce>
 8001756:	428a      	cmp	r2, r1
 8001758:	d800      	bhi.n	800175c <__aeabi_ddiv+0x538>
 800175a:	e60e      	b.n	800137a <__aeabi_ddiv+0x156>
 800175c:	1e83      	subs	r3, r0, #2
 800175e:	1909      	adds	r1, r1, r4
 8001760:	e60b      	b.n	800137a <__aeabi_ddiv+0x156>
 8001762:	428a      	cmp	r2, r1
 8001764:	d800      	bhi.n	8001768 <__aeabi_ddiv+0x544>
 8001766:	e5f4      	b.n	8001352 <__aeabi_ddiv+0x12e>
 8001768:	1e83      	subs	r3, r0, #2
 800176a:	4698      	mov	r8, r3
 800176c:	1909      	adds	r1, r1, r4
 800176e:	e5f0      	b.n	8001352 <__aeabi_ddiv+0x12e>
 8001770:	4925      	ldr	r1, [pc, #148]	; (8001808 <__aeabi_ddiv+0x5e4>)
 8001772:	0028      	movs	r0, r5
 8001774:	4459      	add	r1, fp
 8001776:	408d      	lsls	r5, r1
 8001778:	4642      	mov	r2, r8
 800177a:	408a      	lsls	r2, r1
 800177c:	1e69      	subs	r1, r5, #1
 800177e:	418d      	sbcs	r5, r1
 8001780:	4641      	mov	r1, r8
 8001782:	40d8      	lsrs	r0, r3
 8001784:	40d9      	lsrs	r1, r3
 8001786:	4302      	orrs	r2, r0
 8001788:	432a      	orrs	r2, r5
 800178a:	000b      	movs	r3, r1
 800178c:	0751      	lsls	r1, r2, #29
 800178e:	d100      	bne.n	8001792 <__aeabi_ddiv+0x56e>
 8001790:	e751      	b.n	8001636 <__aeabi_ddiv+0x412>
 8001792:	210f      	movs	r1, #15
 8001794:	4011      	ands	r1, r2
 8001796:	2904      	cmp	r1, #4
 8001798:	d000      	beq.n	800179c <__aeabi_ddiv+0x578>
 800179a:	e746      	b.n	800162a <__aeabi_ddiv+0x406>
 800179c:	e74b      	b.n	8001636 <__aeabi_ddiv+0x412>
 800179e:	0005      	movs	r5, r0
 80017a0:	428e      	cmp	r6, r1
 80017a2:	d000      	beq.n	80017a6 <__aeabi_ddiv+0x582>
 80017a4:	e66a      	b.n	800147c <__aeabi_ddiv+0x258>
 80017a6:	9a00      	ldr	r2, [sp, #0]
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d000      	beq.n	80017ae <__aeabi_ddiv+0x58a>
 80017ac:	e666      	b.n	800147c <__aeabi_ddiv+0x258>
 80017ae:	e667      	b.n	8001480 <__aeabi_ddiv+0x25c>
 80017b0:	4a16      	ldr	r2, [pc, #88]	; (800180c <__aeabi_ddiv+0x5e8>)
 80017b2:	445a      	add	r2, fp
 80017b4:	2a00      	cmp	r2, #0
 80017b6:	dc00      	bgt.n	80017ba <__aeabi_ddiv+0x596>
 80017b8:	e710      	b.n	80015dc <__aeabi_ddiv+0x3b8>
 80017ba:	2301      	movs	r3, #1
 80017bc:	2500      	movs	r5, #0
 80017be:	4498      	add	r8, r3
 80017c0:	e667      	b.n	8001492 <__aeabi_ddiv+0x26e>
 80017c2:	075d      	lsls	r5, r3, #29
 80017c4:	025b      	lsls	r3, r3, #9
 80017c6:	0b1c      	lsrs	r4, r3, #12
 80017c8:	08d2      	lsrs	r2, r2, #3
 80017ca:	2300      	movs	r3, #0
 80017cc:	4315      	orrs	r5, r2
 80017ce:	e580      	b.n	80012d2 <__aeabi_ddiv+0xae>
 80017d0:	9800      	ldr	r0, [sp, #0]
 80017d2:	3d02      	subs	r5, #2
 80017d4:	0042      	lsls	r2, r0, #1
 80017d6:	4282      	cmp	r2, r0
 80017d8:	41bf      	sbcs	r7, r7
 80017da:	427f      	negs	r7, r7
 80017dc:	193c      	adds	r4, r7, r4
 80017de:	1936      	adds	r6, r6, r4
 80017e0:	9200      	str	r2, [sp, #0]
 80017e2:	e7dd      	b.n	80017a0 <__aeabi_ddiv+0x57c>
 80017e4:	2480      	movs	r4, #128	; 0x80
 80017e6:	4643      	mov	r3, r8
 80017e8:	0324      	lsls	r4, r4, #12
 80017ea:	431c      	orrs	r4, r3
 80017ec:	0324      	lsls	r4, r4, #12
 80017ee:	4b04      	ldr	r3, [pc, #16]	; (8001800 <__aeabi_ddiv+0x5dc>)
 80017f0:	0b24      	lsrs	r4, r4, #12
 80017f2:	e56e      	b.n	80012d2 <__aeabi_ddiv+0xae>
 80017f4:	9a00      	ldr	r2, [sp, #0]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d3ea      	bcc.n	80017d0 <__aeabi_ddiv+0x5ac>
 80017fa:	0005      	movs	r5, r0
 80017fc:	e7d3      	b.n	80017a6 <__aeabi_ddiv+0x582>
 80017fe:	46c0      	nop			; (mov r8, r8)
 8001800:	000007ff 	.word	0x000007ff
 8001804:	0000043e 	.word	0x0000043e
 8001808:	0000041e 	.word	0x0000041e
 800180c:	000003ff 	.word	0x000003ff

08001810 <__eqdf2>:
 8001810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001812:	464e      	mov	r6, r9
 8001814:	4645      	mov	r5, r8
 8001816:	46de      	mov	lr, fp
 8001818:	4657      	mov	r7, sl
 800181a:	4690      	mov	r8, r2
 800181c:	b5e0      	push	{r5, r6, r7, lr}
 800181e:	0017      	movs	r7, r2
 8001820:	031a      	lsls	r2, r3, #12
 8001822:	0b12      	lsrs	r2, r2, #12
 8001824:	0005      	movs	r5, r0
 8001826:	4684      	mov	ip, r0
 8001828:	4819      	ldr	r0, [pc, #100]	; (8001890 <__eqdf2+0x80>)
 800182a:	030e      	lsls	r6, r1, #12
 800182c:	004c      	lsls	r4, r1, #1
 800182e:	4691      	mov	r9, r2
 8001830:	005a      	lsls	r2, r3, #1
 8001832:	0fdb      	lsrs	r3, r3, #31
 8001834:	469b      	mov	fp, r3
 8001836:	0b36      	lsrs	r6, r6, #12
 8001838:	0d64      	lsrs	r4, r4, #21
 800183a:	0fc9      	lsrs	r1, r1, #31
 800183c:	0d52      	lsrs	r2, r2, #21
 800183e:	4284      	cmp	r4, r0
 8001840:	d019      	beq.n	8001876 <__eqdf2+0x66>
 8001842:	4282      	cmp	r2, r0
 8001844:	d010      	beq.n	8001868 <__eqdf2+0x58>
 8001846:	2001      	movs	r0, #1
 8001848:	4294      	cmp	r4, r2
 800184a:	d10e      	bne.n	800186a <__eqdf2+0x5a>
 800184c:	454e      	cmp	r6, r9
 800184e:	d10c      	bne.n	800186a <__eqdf2+0x5a>
 8001850:	2001      	movs	r0, #1
 8001852:	45c4      	cmp	ip, r8
 8001854:	d109      	bne.n	800186a <__eqdf2+0x5a>
 8001856:	4559      	cmp	r1, fp
 8001858:	d017      	beq.n	800188a <__eqdf2+0x7a>
 800185a:	2c00      	cmp	r4, #0
 800185c:	d105      	bne.n	800186a <__eqdf2+0x5a>
 800185e:	0030      	movs	r0, r6
 8001860:	4328      	orrs	r0, r5
 8001862:	1e43      	subs	r3, r0, #1
 8001864:	4198      	sbcs	r0, r3
 8001866:	e000      	b.n	800186a <__eqdf2+0x5a>
 8001868:	2001      	movs	r0, #1
 800186a:	bcf0      	pop	{r4, r5, r6, r7}
 800186c:	46bb      	mov	fp, r7
 800186e:	46b2      	mov	sl, r6
 8001870:	46a9      	mov	r9, r5
 8001872:	46a0      	mov	r8, r4
 8001874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001876:	0033      	movs	r3, r6
 8001878:	2001      	movs	r0, #1
 800187a:	432b      	orrs	r3, r5
 800187c:	d1f5      	bne.n	800186a <__eqdf2+0x5a>
 800187e:	42a2      	cmp	r2, r4
 8001880:	d1f3      	bne.n	800186a <__eqdf2+0x5a>
 8001882:	464b      	mov	r3, r9
 8001884:	433b      	orrs	r3, r7
 8001886:	d1f0      	bne.n	800186a <__eqdf2+0x5a>
 8001888:	e7e2      	b.n	8001850 <__eqdf2+0x40>
 800188a:	2000      	movs	r0, #0
 800188c:	e7ed      	b.n	800186a <__eqdf2+0x5a>
 800188e:	46c0      	nop			; (mov r8, r8)
 8001890:	000007ff 	.word	0x000007ff

08001894 <__gedf2>:
 8001894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001896:	4647      	mov	r7, r8
 8001898:	46ce      	mov	lr, r9
 800189a:	0004      	movs	r4, r0
 800189c:	0018      	movs	r0, r3
 800189e:	0016      	movs	r6, r2
 80018a0:	031b      	lsls	r3, r3, #12
 80018a2:	0b1b      	lsrs	r3, r3, #12
 80018a4:	4d2d      	ldr	r5, [pc, #180]	; (800195c <__gedf2+0xc8>)
 80018a6:	004a      	lsls	r2, r1, #1
 80018a8:	4699      	mov	r9, r3
 80018aa:	b580      	push	{r7, lr}
 80018ac:	0043      	lsls	r3, r0, #1
 80018ae:	030f      	lsls	r7, r1, #12
 80018b0:	46a4      	mov	ip, r4
 80018b2:	46b0      	mov	r8, r6
 80018b4:	0b3f      	lsrs	r7, r7, #12
 80018b6:	0d52      	lsrs	r2, r2, #21
 80018b8:	0fc9      	lsrs	r1, r1, #31
 80018ba:	0d5b      	lsrs	r3, r3, #21
 80018bc:	0fc0      	lsrs	r0, r0, #31
 80018be:	42aa      	cmp	r2, r5
 80018c0:	d021      	beq.n	8001906 <__gedf2+0x72>
 80018c2:	42ab      	cmp	r3, r5
 80018c4:	d013      	beq.n	80018ee <__gedf2+0x5a>
 80018c6:	2a00      	cmp	r2, #0
 80018c8:	d122      	bne.n	8001910 <__gedf2+0x7c>
 80018ca:	433c      	orrs	r4, r7
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d102      	bne.n	80018d6 <__gedf2+0x42>
 80018d0:	464d      	mov	r5, r9
 80018d2:	432e      	orrs	r6, r5
 80018d4:	d022      	beq.n	800191c <__gedf2+0x88>
 80018d6:	2c00      	cmp	r4, #0
 80018d8:	d010      	beq.n	80018fc <__gedf2+0x68>
 80018da:	4281      	cmp	r1, r0
 80018dc:	d022      	beq.n	8001924 <__gedf2+0x90>
 80018de:	2002      	movs	r0, #2
 80018e0:	3901      	subs	r1, #1
 80018e2:	4008      	ands	r0, r1
 80018e4:	3801      	subs	r0, #1
 80018e6:	bcc0      	pop	{r6, r7}
 80018e8:	46b9      	mov	r9, r7
 80018ea:	46b0      	mov	r8, r6
 80018ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018ee:	464d      	mov	r5, r9
 80018f0:	432e      	orrs	r6, r5
 80018f2:	d129      	bne.n	8001948 <__gedf2+0xb4>
 80018f4:	2a00      	cmp	r2, #0
 80018f6:	d1f0      	bne.n	80018da <__gedf2+0x46>
 80018f8:	433c      	orrs	r4, r7
 80018fa:	d1ee      	bne.n	80018da <__gedf2+0x46>
 80018fc:	2800      	cmp	r0, #0
 80018fe:	d1f2      	bne.n	80018e6 <__gedf2+0x52>
 8001900:	2001      	movs	r0, #1
 8001902:	4240      	negs	r0, r0
 8001904:	e7ef      	b.n	80018e6 <__gedf2+0x52>
 8001906:	003d      	movs	r5, r7
 8001908:	4325      	orrs	r5, r4
 800190a:	d11d      	bne.n	8001948 <__gedf2+0xb4>
 800190c:	4293      	cmp	r3, r2
 800190e:	d0ee      	beq.n	80018ee <__gedf2+0x5a>
 8001910:	2b00      	cmp	r3, #0
 8001912:	d1e2      	bne.n	80018da <__gedf2+0x46>
 8001914:	464c      	mov	r4, r9
 8001916:	4326      	orrs	r6, r4
 8001918:	d1df      	bne.n	80018da <__gedf2+0x46>
 800191a:	e7e0      	b.n	80018de <__gedf2+0x4a>
 800191c:	2000      	movs	r0, #0
 800191e:	2c00      	cmp	r4, #0
 8001920:	d0e1      	beq.n	80018e6 <__gedf2+0x52>
 8001922:	e7dc      	b.n	80018de <__gedf2+0x4a>
 8001924:	429a      	cmp	r2, r3
 8001926:	dc0a      	bgt.n	800193e <__gedf2+0xaa>
 8001928:	dbe8      	blt.n	80018fc <__gedf2+0x68>
 800192a:	454f      	cmp	r7, r9
 800192c:	d8d7      	bhi.n	80018de <__gedf2+0x4a>
 800192e:	d00e      	beq.n	800194e <__gedf2+0xba>
 8001930:	2000      	movs	r0, #0
 8001932:	454f      	cmp	r7, r9
 8001934:	d2d7      	bcs.n	80018e6 <__gedf2+0x52>
 8001936:	2900      	cmp	r1, #0
 8001938:	d0e2      	beq.n	8001900 <__gedf2+0x6c>
 800193a:	0008      	movs	r0, r1
 800193c:	e7d3      	b.n	80018e6 <__gedf2+0x52>
 800193e:	4243      	negs	r3, r0
 8001940:	4158      	adcs	r0, r3
 8001942:	0040      	lsls	r0, r0, #1
 8001944:	3801      	subs	r0, #1
 8001946:	e7ce      	b.n	80018e6 <__gedf2+0x52>
 8001948:	2002      	movs	r0, #2
 800194a:	4240      	negs	r0, r0
 800194c:	e7cb      	b.n	80018e6 <__gedf2+0x52>
 800194e:	45c4      	cmp	ip, r8
 8001950:	d8c5      	bhi.n	80018de <__gedf2+0x4a>
 8001952:	2000      	movs	r0, #0
 8001954:	45c4      	cmp	ip, r8
 8001956:	d2c6      	bcs.n	80018e6 <__gedf2+0x52>
 8001958:	e7ed      	b.n	8001936 <__gedf2+0xa2>
 800195a:	46c0      	nop			; (mov r8, r8)
 800195c:	000007ff 	.word	0x000007ff

08001960 <__ledf2>:
 8001960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001962:	4647      	mov	r7, r8
 8001964:	46ce      	mov	lr, r9
 8001966:	0004      	movs	r4, r0
 8001968:	0018      	movs	r0, r3
 800196a:	0016      	movs	r6, r2
 800196c:	031b      	lsls	r3, r3, #12
 800196e:	0b1b      	lsrs	r3, r3, #12
 8001970:	4d2c      	ldr	r5, [pc, #176]	; (8001a24 <__ledf2+0xc4>)
 8001972:	004a      	lsls	r2, r1, #1
 8001974:	4699      	mov	r9, r3
 8001976:	b580      	push	{r7, lr}
 8001978:	0043      	lsls	r3, r0, #1
 800197a:	030f      	lsls	r7, r1, #12
 800197c:	46a4      	mov	ip, r4
 800197e:	46b0      	mov	r8, r6
 8001980:	0b3f      	lsrs	r7, r7, #12
 8001982:	0d52      	lsrs	r2, r2, #21
 8001984:	0fc9      	lsrs	r1, r1, #31
 8001986:	0d5b      	lsrs	r3, r3, #21
 8001988:	0fc0      	lsrs	r0, r0, #31
 800198a:	42aa      	cmp	r2, r5
 800198c:	d00d      	beq.n	80019aa <__ledf2+0x4a>
 800198e:	42ab      	cmp	r3, r5
 8001990:	d010      	beq.n	80019b4 <__ledf2+0x54>
 8001992:	2a00      	cmp	r2, #0
 8001994:	d127      	bne.n	80019e6 <__ledf2+0x86>
 8001996:	433c      	orrs	r4, r7
 8001998:	2b00      	cmp	r3, #0
 800199a:	d111      	bne.n	80019c0 <__ledf2+0x60>
 800199c:	464d      	mov	r5, r9
 800199e:	432e      	orrs	r6, r5
 80019a0:	d10e      	bne.n	80019c0 <__ledf2+0x60>
 80019a2:	2000      	movs	r0, #0
 80019a4:	2c00      	cmp	r4, #0
 80019a6:	d015      	beq.n	80019d4 <__ledf2+0x74>
 80019a8:	e00e      	b.n	80019c8 <__ledf2+0x68>
 80019aa:	003d      	movs	r5, r7
 80019ac:	4325      	orrs	r5, r4
 80019ae:	d110      	bne.n	80019d2 <__ledf2+0x72>
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d118      	bne.n	80019e6 <__ledf2+0x86>
 80019b4:	464d      	mov	r5, r9
 80019b6:	432e      	orrs	r6, r5
 80019b8:	d10b      	bne.n	80019d2 <__ledf2+0x72>
 80019ba:	2a00      	cmp	r2, #0
 80019bc:	d102      	bne.n	80019c4 <__ledf2+0x64>
 80019be:	433c      	orrs	r4, r7
 80019c0:	2c00      	cmp	r4, #0
 80019c2:	d00b      	beq.n	80019dc <__ledf2+0x7c>
 80019c4:	4281      	cmp	r1, r0
 80019c6:	d014      	beq.n	80019f2 <__ledf2+0x92>
 80019c8:	2002      	movs	r0, #2
 80019ca:	3901      	subs	r1, #1
 80019cc:	4008      	ands	r0, r1
 80019ce:	3801      	subs	r0, #1
 80019d0:	e000      	b.n	80019d4 <__ledf2+0x74>
 80019d2:	2002      	movs	r0, #2
 80019d4:	bcc0      	pop	{r6, r7}
 80019d6:	46b9      	mov	r9, r7
 80019d8:	46b0      	mov	r8, r6
 80019da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019dc:	2800      	cmp	r0, #0
 80019de:	d1f9      	bne.n	80019d4 <__ledf2+0x74>
 80019e0:	2001      	movs	r0, #1
 80019e2:	4240      	negs	r0, r0
 80019e4:	e7f6      	b.n	80019d4 <__ledf2+0x74>
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1ec      	bne.n	80019c4 <__ledf2+0x64>
 80019ea:	464c      	mov	r4, r9
 80019ec:	4326      	orrs	r6, r4
 80019ee:	d1e9      	bne.n	80019c4 <__ledf2+0x64>
 80019f0:	e7ea      	b.n	80019c8 <__ledf2+0x68>
 80019f2:	429a      	cmp	r2, r3
 80019f4:	dd04      	ble.n	8001a00 <__ledf2+0xa0>
 80019f6:	4243      	negs	r3, r0
 80019f8:	4158      	adcs	r0, r3
 80019fa:	0040      	lsls	r0, r0, #1
 80019fc:	3801      	subs	r0, #1
 80019fe:	e7e9      	b.n	80019d4 <__ledf2+0x74>
 8001a00:	429a      	cmp	r2, r3
 8001a02:	dbeb      	blt.n	80019dc <__ledf2+0x7c>
 8001a04:	454f      	cmp	r7, r9
 8001a06:	d8df      	bhi.n	80019c8 <__ledf2+0x68>
 8001a08:	d006      	beq.n	8001a18 <__ledf2+0xb8>
 8001a0a:	2000      	movs	r0, #0
 8001a0c:	454f      	cmp	r7, r9
 8001a0e:	d2e1      	bcs.n	80019d4 <__ledf2+0x74>
 8001a10:	2900      	cmp	r1, #0
 8001a12:	d0e5      	beq.n	80019e0 <__ledf2+0x80>
 8001a14:	0008      	movs	r0, r1
 8001a16:	e7dd      	b.n	80019d4 <__ledf2+0x74>
 8001a18:	45c4      	cmp	ip, r8
 8001a1a:	d8d5      	bhi.n	80019c8 <__ledf2+0x68>
 8001a1c:	2000      	movs	r0, #0
 8001a1e:	45c4      	cmp	ip, r8
 8001a20:	d2d8      	bcs.n	80019d4 <__ledf2+0x74>
 8001a22:	e7f5      	b.n	8001a10 <__ledf2+0xb0>
 8001a24:	000007ff 	.word	0x000007ff

08001a28 <__aeabi_dmul>:
 8001a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a2a:	4657      	mov	r7, sl
 8001a2c:	464e      	mov	r6, r9
 8001a2e:	4645      	mov	r5, r8
 8001a30:	46de      	mov	lr, fp
 8001a32:	b5e0      	push	{r5, r6, r7, lr}
 8001a34:	4698      	mov	r8, r3
 8001a36:	030c      	lsls	r4, r1, #12
 8001a38:	004b      	lsls	r3, r1, #1
 8001a3a:	0006      	movs	r6, r0
 8001a3c:	4692      	mov	sl, r2
 8001a3e:	b087      	sub	sp, #28
 8001a40:	0b24      	lsrs	r4, r4, #12
 8001a42:	0d5b      	lsrs	r3, r3, #21
 8001a44:	0fcf      	lsrs	r7, r1, #31
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d100      	bne.n	8001a4c <__aeabi_dmul+0x24>
 8001a4a:	e15c      	b.n	8001d06 <__aeabi_dmul+0x2de>
 8001a4c:	4ad9      	ldr	r2, [pc, #868]	; (8001db4 <__aeabi_dmul+0x38c>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d100      	bne.n	8001a54 <__aeabi_dmul+0x2c>
 8001a52:	e175      	b.n	8001d40 <__aeabi_dmul+0x318>
 8001a54:	0f42      	lsrs	r2, r0, #29
 8001a56:	00e4      	lsls	r4, r4, #3
 8001a58:	4314      	orrs	r4, r2
 8001a5a:	2280      	movs	r2, #128	; 0x80
 8001a5c:	0412      	lsls	r2, r2, #16
 8001a5e:	4314      	orrs	r4, r2
 8001a60:	4ad5      	ldr	r2, [pc, #852]	; (8001db8 <__aeabi_dmul+0x390>)
 8001a62:	00c5      	lsls	r5, r0, #3
 8001a64:	4694      	mov	ip, r2
 8001a66:	4463      	add	r3, ip
 8001a68:	9300      	str	r3, [sp, #0]
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	4699      	mov	r9, r3
 8001a6e:	469b      	mov	fp, r3
 8001a70:	4643      	mov	r3, r8
 8001a72:	4642      	mov	r2, r8
 8001a74:	031e      	lsls	r6, r3, #12
 8001a76:	0fd2      	lsrs	r2, r2, #31
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	4650      	mov	r0, sl
 8001a7c:	4690      	mov	r8, r2
 8001a7e:	0b36      	lsrs	r6, r6, #12
 8001a80:	0d5b      	lsrs	r3, r3, #21
 8001a82:	d100      	bne.n	8001a86 <__aeabi_dmul+0x5e>
 8001a84:	e120      	b.n	8001cc8 <__aeabi_dmul+0x2a0>
 8001a86:	4acb      	ldr	r2, [pc, #812]	; (8001db4 <__aeabi_dmul+0x38c>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d100      	bne.n	8001a8e <__aeabi_dmul+0x66>
 8001a8c:	e162      	b.n	8001d54 <__aeabi_dmul+0x32c>
 8001a8e:	49ca      	ldr	r1, [pc, #808]	; (8001db8 <__aeabi_dmul+0x390>)
 8001a90:	0f42      	lsrs	r2, r0, #29
 8001a92:	468c      	mov	ip, r1
 8001a94:	9900      	ldr	r1, [sp, #0]
 8001a96:	4463      	add	r3, ip
 8001a98:	00f6      	lsls	r6, r6, #3
 8001a9a:	468c      	mov	ip, r1
 8001a9c:	4316      	orrs	r6, r2
 8001a9e:	2280      	movs	r2, #128	; 0x80
 8001aa0:	449c      	add	ip, r3
 8001aa2:	0412      	lsls	r2, r2, #16
 8001aa4:	4663      	mov	r3, ip
 8001aa6:	4316      	orrs	r6, r2
 8001aa8:	00c2      	lsls	r2, r0, #3
 8001aaa:	2000      	movs	r0, #0
 8001aac:	9300      	str	r3, [sp, #0]
 8001aae:	9900      	ldr	r1, [sp, #0]
 8001ab0:	4643      	mov	r3, r8
 8001ab2:	3101      	adds	r1, #1
 8001ab4:	468c      	mov	ip, r1
 8001ab6:	4649      	mov	r1, r9
 8001ab8:	407b      	eors	r3, r7
 8001aba:	9301      	str	r3, [sp, #4]
 8001abc:	290f      	cmp	r1, #15
 8001abe:	d826      	bhi.n	8001b0e <__aeabi_dmul+0xe6>
 8001ac0:	4bbe      	ldr	r3, [pc, #760]	; (8001dbc <__aeabi_dmul+0x394>)
 8001ac2:	0089      	lsls	r1, r1, #2
 8001ac4:	5859      	ldr	r1, [r3, r1]
 8001ac6:	468f      	mov	pc, r1
 8001ac8:	4643      	mov	r3, r8
 8001aca:	9301      	str	r3, [sp, #4]
 8001acc:	0034      	movs	r4, r6
 8001ace:	0015      	movs	r5, r2
 8001ad0:	4683      	mov	fp, r0
 8001ad2:	465b      	mov	r3, fp
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d016      	beq.n	8001b06 <__aeabi_dmul+0xde>
 8001ad8:	2b03      	cmp	r3, #3
 8001ada:	d100      	bne.n	8001ade <__aeabi_dmul+0xb6>
 8001adc:	e203      	b.n	8001ee6 <__aeabi_dmul+0x4be>
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d000      	beq.n	8001ae4 <__aeabi_dmul+0xbc>
 8001ae2:	e0cd      	b.n	8001c80 <__aeabi_dmul+0x258>
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	2400      	movs	r4, #0
 8001ae8:	2500      	movs	r5, #0
 8001aea:	9b01      	ldr	r3, [sp, #4]
 8001aec:	0512      	lsls	r2, r2, #20
 8001aee:	4322      	orrs	r2, r4
 8001af0:	07db      	lsls	r3, r3, #31
 8001af2:	431a      	orrs	r2, r3
 8001af4:	0028      	movs	r0, r5
 8001af6:	0011      	movs	r1, r2
 8001af8:	b007      	add	sp, #28
 8001afa:	bcf0      	pop	{r4, r5, r6, r7}
 8001afc:	46bb      	mov	fp, r7
 8001afe:	46b2      	mov	sl, r6
 8001b00:	46a9      	mov	r9, r5
 8001b02:	46a0      	mov	r8, r4
 8001b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b06:	2400      	movs	r4, #0
 8001b08:	2500      	movs	r5, #0
 8001b0a:	4aaa      	ldr	r2, [pc, #680]	; (8001db4 <__aeabi_dmul+0x38c>)
 8001b0c:	e7ed      	b.n	8001aea <__aeabi_dmul+0xc2>
 8001b0e:	0c28      	lsrs	r0, r5, #16
 8001b10:	042d      	lsls	r5, r5, #16
 8001b12:	0c2d      	lsrs	r5, r5, #16
 8001b14:	002b      	movs	r3, r5
 8001b16:	0c11      	lsrs	r1, r2, #16
 8001b18:	0412      	lsls	r2, r2, #16
 8001b1a:	0c12      	lsrs	r2, r2, #16
 8001b1c:	4353      	muls	r3, r2
 8001b1e:	4698      	mov	r8, r3
 8001b20:	0013      	movs	r3, r2
 8001b22:	002f      	movs	r7, r5
 8001b24:	4343      	muls	r3, r0
 8001b26:	4699      	mov	r9, r3
 8001b28:	434f      	muls	r7, r1
 8001b2a:	444f      	add	r7, r9
 8001b2c:	46bb      	mov	fp, r7
 8001b2e:	4647      	mov	r7, r8
 8001b30:	000b      	movs	r3, r1
 8001b32:	0c3f      	lsrs	r7, r7, #16
 8001b34:	46ba      	mov	sl, r7
 8001b36:	4343      	muls	r3, r0
 8001b38:	44da      	add	sl, fp
 8001b3a:	9302      	str	r3, [sp, #8]
 8001b3c:	45d1      	cmp	r9, sl
 8001b3e:	d904      	bls.n	8001b4a <__aeabi_dmul+0x122>
 8001b40:	2780      	movs	r7, #128	; 0x80
 8001b42:	027f      	lsls	r7, r7, #9
 8001b44:	46b9      	mov	r9, r7
 8001b46:	444b      	add	r3, r9
 8001b48:	9302      	str	r3, [sp, #8]
 8001b4a:	4653      	mov	r3, sl
 8001b4c:	0c1b      	lsrs	r3, r3, #16
 8001b4e:	469b      	mov	fp, r3
 8001b50:	4653      	mov	r3, sl
 8001b52:	041f      	lsls	r7, r3, #16
 8001b54:	4643      	mov	r3, r8
 8001b56:	041b      	lsls	r3, r3, #16
 8001b58:	0c1b      	lsrs	r3, r3, #16
 8001b5a:	4698      	mov	r8, r3
 8001b5c:	003b      	movs	r3, r7
 8001b5e:	4443      	add	r3, r8
 8001b60:	9304      	str	r3, [sp, #16]
 8001b62:	0c33      	lsrs	r3, r6, #16
 8001b64:	0436      	lsls	r6, r6, #16
 8001b66:	0c36      	lsrs	r6, r6, #16
 8001b68:	4698      	mov	r8, r3
 8001b6a:	0033      	movs	r3, r6
 8001b6c:	4343      	muls	r3, r0
 8001b6e:	4699      	mov	r9, r3
 8001b70:	4643      	mov	r3, r8
 8001b72:	4343      	muls	r3, r0
 8001b74:	002f      	movs	r7, r5
 8001b76:	469a      	mov	sl, r3
 8001b78:	4643      	mov	r3, r8
 8001b7a:	4377      	muls	r7, r6
 8001b7c:	435d      	muls	r5, r3
 8001b7e:	0c38      	lsrs	r0, r7, #16
 8001b80:	444d      	add	r5, r9
 8001b82:	1945      	adds	r5, r0, r5
 8001b84:	45a9      	cmp	r9, r5
 8001b86:	d903      	bls.n	8001b90 <__aeabi_dmul+0x168>
 8001b88:	2380      	movs	r3, #128	; 0x80
 8001b8a:	025b      	lsls	r3, r3, #9
 8001b8c:	4699      	mov	r9, r3
 8001b8e:	44ca      	add	sl, r9
 8001b90:	043f      	lsls	r7, r7, #16
 8001b92:	0c28      	lsrs	r0, r5, #16
 8001b94:	0c3f      	lsrs	r7, r7, #16
 8001b96:	042d      	lsls	r5, r5, #16
 8001b98:	19ed      	adds	r5, r5, r7
 8001b9a:	0c27      	lsrs	r7, r4, #16
 8001b9c:	0424      	lsls	r4, r4, #16
 8001b9e:	0c24      	lsrs	r4, r4, #16
 8001ba0:	0003      	movs	r3, r0
 8001ba2:	0020      	movs	r0, r4
 8001ba4:	4350      	muls	r0, r2
 8001ba6:	437a      	muls	r2, r7
 8001ba8:	4691      	mov	r9, r2
 8001baa:	003a      	movs	r2, r7
 8001bac:	4453      	add	r3, sl
 8001bae:	9305      	str	r3, [sp, #20]
 8001bb0:	0c03      	lsrs	r3, r0, #16
 8001bb2:	469a      	mov	sl, r3
 8001bb4:	434a      	muls	r2, r1
 8001bb6:	4361      	muls	r1, r4
 8001bb8:	4449      	add	r1, r9
 8001bba:	4451      	add	r1, sl
 8001bbc:	44ab      	add	fp, r5
 8001bbe:	4589      	cmp	r9, r1
 8001bc0:	d903      	bls.n	8001bca <__aeabi_dmul+0x1a2>
 8001bc2:	2380      	movs	r3, #128	; 0x80
 8001bc4:	025b      	lsls	r3, r3, #9
 8001bc6:	4699      	mov	r9, r3
 8001bc8:	444a      	add	r2, r9
 8001bca:	0400      	lsls	r0, r0, #16
 8001bcc:	0c0b      	lsrs	r3, r1, #16
 8001bce:	0c00      	lsrs	r0, r0, #16
 8001bd0:	0409      	lsls	r1, r1, #16
 8001bd2:	1809      	adds	r1, r1, r0
 8001bd4:	0020      	movs	r0, r4
 8001bd6:	4699      	mov	r9, r3
 8001bd8:	4643      	mov	r3, r8
 8001bda:	4370      	muls	r0, r6
 8001bdc:	435c      	muls	r4, r3
 8001bde:	437e      	muls	r6, r7
 8001be0:	435f      	muls	r7, r3
 8001be2:	0c03      	lsrs	r3, r0, #16
 8001be4:	4698      	mov	r8, r3
 8001be6:	19a4      	adds	r4, r4, r6
 8001be8:	4444      	add	r4, r8
 8001bea:	444a      	add	r2, r9
 8001bec:	9703      	str	r7, [sp, #12]
 8001bee:	42a6      	cmp	r6, r4
 8001bf0:	d904      	bls.n	8001bfc <__aeabi_dmul+0x1d4>
 8001bf2:	2380      	movs	r3, #128	; 0x80
 8001bf4:	025b      	lsls	r3, r3, #9
 8001bf6:	4698      	mov	r8, r3
 8001bf8:	4447      	add	r7, r8
 8001bfa:	9703      	str	r7, [sp, #12]
 8001bfc:	0423      	lsls	r3, r4, #16
 8001bfe:	9e02      	ldr	r6, [sp, #8]
 8001c00:	469a      	mov	sl, r3
 8001c02:	9b05      	ldr	r3, [sp, #20]
 8001c04:	445e      	add	r6, fp
 8001c06:	4698      	mov	r8, r3
 8001c08:	42ae      	cmp	r6, r5
 8001c0a:	41ad      	sbcs	r5, r5
 8001c0c:	1876      	adds	r6, r6, r1
 8001c0e:	428e      	cmp	r6, r1
 8001c10:	4189      	sbcs	r1, r1
 8001c12:	0400      	lsls	r0, r0, #16
 8001c14:	0c00      	lsrs	r0, r0, #16
 8001c16:	4450      	add	r0, sl
 8001c18:	4440      	add	r0, r8
 8001c1a:	426d      	negs	r5, r5
 8001c1c:	1947      	adds	r7, r0, r5
 8001c1e:	46b8      	mov	r8, r7
 8001c20:	4693      	mov	fp, r2
 8001c22:	4249      	negs	r1, r1
 8001c24:	4689      	mov	r9, r1
 8001c26:	44c3      	add	fp, r8
 8001c28:	44d9      	add	r9, fp
 8001c2a:	4298      	cmp	r0, r3
 8001c2c:	4180      	sbcs	r0, r0
 8001c2e:	45a8      	cmp	r8, r5
 8001c30:	41ad      	sbcs	r5, r5
 8001c32:	4593      	cmp	fp, r2
 8001c34:	4192      	sbcs	r2, r2
 8001c36:	4589      	cmp	r9, r1
 8001c38:	4189      	sbcs	r1, r1
 8001c3a:	426d      	negs	r5, r5
 8001c3c:	4240      	negs	r0, r0
 8001c3e:	4328      	orrs	r0, r5
 8001c40:	0c24      	lsrs	r4, r4, #16
 8001c42:	4252      	negs	r2, r2
 8001c44:	4249      	negs	r1, r1
 8001c46:	430a      	orrs	r2, r1
 8001c48:	9b03      	ldr	r3, [sp, #12]
 8001c4a:	1900      	adds	r0, r0, r4
 8001c4c:	1880      	adds	r0, r0, r2
 8001c4e:	18c7      	adds	r7, r0, r3
 8001c50:	464b      	mov	r3, r9
 8001c52:	0ddc      	lsrs	r4, r3, #23
 8001c54:	9b04      	ldr	r3, [sp, #16]
 8001c56:	0275      	lsls	r5, r6, #9
 8001c58:	431d      	orrs	r5, r3
 8001c5a:	1e6a      	subs	r2, r5, #1
 8001c5c:	4195      	sbcs	r5, r2
 8001c5e:	464b      	mov	r3, r9
 8001c60:	0df6      	lsrs	r6, r6, #23
 8001c62:	027f      	lsls	r7, r7, #9
 8001c64:	4335      	orrs	r5, r6
 8001c66:	025a      	lsls	r2, r3, #9
 8001c68:	433c      	orrs	r4, r7
 8001c6a:	4315      	orrs	r5, r2
 8001c6c:	01fb      	lsls	r3, r7, #7
 8001c6e:	d400      	bmi.n	8001c72 <__aeabi_dmul+0x24a>
 8001c70:	e11c      	b.n	8001eac <__aeabi_dmul+0x484>
 8001c72:	2101      	movs	r1, #1
 8001c74:	086a      	lsrs	r2, r5, #1
 8001c76:	400d      	ands	r5, r1
 8001c78:	4315      	orrs	r5, r2
 8001c7a:	07e2      	lsls	r2, r4, #31
 8001c7c:	4315      	orrs	r5, r2
 8001c7e:	0864      	lsrs	r4, r4, #1
 8001c80:	494f      	ldr	r1, [pc, #316]	; (8001dc0 <__aeabi_dmul+0x398>)
 8001c82:	4461      	add	r1, ip
 8001c84:	2900      	cmp	r1, #0
 8001c86:	dc00      	bgt.n	8001c8a <__aeabi_dmul+0x262>
 8001c88:	e0b0      	b.n	8001dec <__aeabi_dmul+0x3c4>
 8001c8a:	076b      	lsls	r3, r5, #29
 8001c8c:	d009      	beq.n	8001ca2 <__aeabi_dmul+0x27a>
 8001c8e:	220f      	movs	r2, #15
 8001c90:	402a      	ands	r2, r5
 8001c92:	2a04      	cmp	r2, #4
 8001c94:	d005      	beq.n	8001ca2 <__aeabi_dmul+0x27a>
 8001c96:	1d2a      	adds	r2, r5, #4
 8001c98:	42aa      	cmp	r2, r5
 8001c9a:	41ad      	sbcs	r5, r5
 8001c9c:	426d      	negs	r5, r5
 8001c9e:	1964      	adds	r4, r4, r5
 8001ca0:	0015      	movs	r5, r2
 8001ca2:	01e3      	lsls	r3, r4, #7
 8001ca4:	d504      	bpl.n	8001cb0 <__aeabi_dmul+0x288>
 8001ca6:	2180      	movs	r1, #128	; 0x80
 8001ca8:	4a46      	ldr	r2, [pc, #280]	; (8001dc4 <__aeabi_dmul+0x39c>)
 8001caa:	00c9      	lsls	r1, r1, #3
 8001cac:	4014      	ands	r4, r2
 8001cae:	4461      	add	r1, ip
 8001cb0:	4a45      	ldr	r2, [pc, #276]	; (8001dc8 <__aeabi_dmul+0x3a0>)
 8001cb2:	4291      	cmp	r1, r2
 8001cb4:	dd00      	ble.n	8001cb8 <__aeabi_dmul+0x290>
 8001cb6:	e726      	b.n	8001b06 <__aeabi_dmul+0xde>
 8001cb8:	0762      	lsls	r2, r4, #29
 8001cba:	08ed      	lsrs	r5, r5, #3
 8001cbc:	0264      	lsls	r4, r4, #9
 8001cbe:	0549      	lsls	r1, r1, #21
 8001cc0:	4315      	orrs	r5, r2
 8001cc2:	0b24      	lsrs	r4, r4, #12
 8001cc4:	0d4a      	lsrs	r2, r1, #21
 8001cc6:	e710      	b.n	8001aea <__aeabi_dmul+0xc2>
 8001cc8:	4652      	mov	r2, sl
 8001cca:	4332      	orrs	r2, r6
 8001ccc:	d100      	bne.n	8001cd0 <__aeabi_dmul+0x2a8>
 8001cce:	e07f      	b.n	8001dd0 <__aeabi_dmul+0x3a8>
 8001cd0:	2e00      	cmp	r6, #0
 8001cd2:	d100      	bne.n	8001cd6 <__aeabi_dmul+0x2ae>
 8001cd4:	e0dc      	b.n	8001e90 <__aeabi_dmul+0x468>
 8001cd6:	0030      	movs	r0, r6
 8001cd8:	f000 fe1e 	bl	8002918 <__clzsi2>
 8001cdc:	0002      	movs	r2, r0
 8001cde:	3a0b      	subs	r2, #11
 8001ce0:	231d      	movs	r3, #29
 8001ce2:	0001      	movs	r1, r0
 8001ce4:	1a9b      	subs	r3, r3, r2
 8001ce6:	4652      	mov	r2, sl
 8001ce8:	3908      	subs	r1, #8
 8001cea:	40da      	lsrs	r2, r3
 8001cec:	408e      	lsls	r6, r1
 8001cee:	4316      	orrs	r6, r2
 8001cf0:	4652      	mov	r2, sl
 8001cf2:	408a      	lsls	r2, r1
 8001cf4:	9b00      	ldr	r3, [sp, #0]
 8001cf6:	4935      	ldr	r1, [pc, #212]	; (8001dcc <__aeabi_dmul+0x3a4>)
 8001cf8:	1a18      	subs	r0, r3, r0
 8001cfa:	0003      	movs	r3, r0
 8001cfc:	468c      	mov	ip, r1
 8001cfe:	4463      	add	r3, ip
 8001d00:	2000      	movs	r0, #0
 8001d02:	9300      	str	r3, [sp, #0]
 8001d04:	e6d3      	b.n	8001aae <__aeabi_dmul+0x86>
 8001d06:	0025      	movs	r5, r4
 8001d08:	4305      	orrs	r5, r0
 8001d0a:	d04a      	beq.n	8001da2 <__aeabi_dmul+0x37a>
 8001d0c:	2c00      	cmp	r4, #0
 8001d0e:	d100      	bne.n	8001d12 <__aeabi_dmul+0x2ea>
 8001d10:	e0b0      	b.n	8001e74 <__aeabi_dmul+0x44c>
 8001d12:	0020      	movs	r0, r4
 8001d14:	f000 fe00 	bl	8002918 <__clzsi2>
 8001d18:	0001      	movs	r1, r0
 8001d1a:	0002      	movs	r2, r0
 8001d1c:	390b      	subs	r1, #11
 8001d1e:	231d      	movs	r3, #29
 8001d20:	0010      	movs	r0, r2
 8001d22:	1a5b      	subs	r3, r3, r1
 8001d24:	0031      	movs	r1, r6
 8001d26:	0035      	movs	r5, r6
 8001d28:	3808      	subs	r0, #8
 8001d2a:	4084      	lsls	r4, r0
 8001d2c:	40d9      	lsrs	r1, r3
 8001d2e:	4085      	lsls	r5, r0
 8001d30:	430c      	orrs	r4, r1
 8001d32:	4826      	ldr	r0, [pc, #152]	; (8001dcc <__aeabi_dmul+0x3a4>)
 8001d34:	1a83      	subs	r3, r0, r2
 8001d36:	9300      	str	r3, [sp, #0]
 8001d38:	2300      	movs	r3, #0
 8001d3a:	4699      	mov	r9, r3
 8001d3c:	469b      	mov	fp, r3
 8001d3e:	e697      	b.n	8001a70 <__aeabi_dmul+0x48>
 8001d40:	0005      	movs	r5, r0
 8001d42:	4325      	orrs	r5, r4
 8001d44:	d126      	bne.n	8001d94 <__aeabi_dmul+0x36c>
 8001d46:	2208      	movs	r2, #8
 8001d48:	9300      	str	r3, [sp, #0]
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	2400      	movs	r4, #0
 8001d4e:	4691      	mov	r9, r2
 8001d50:	469b      	mov	fp, r3
 8001d52:	e68d      	b.n	8001a70 <__aeabi_dmul+0x48>
 8001d54:	4652      	mov	r2, sl
 8001d56:	9b00      	ldr	r3, [sp, #0]
 8001d58:	4332      	orrs	r2, r6
 8001d5a:	d110      	bne.n	8001d7e <__aeabi_dmul+0x356>
 8001d5c:	4915      	ldr	r1, [pc, #84]	; (8001db4 <__aeabi_dmul+0x38c>)
 8001d5e:	2600      	movs	r6, #0
 8001d60:	468c      	mov	ip, r1
 8001d62:	4463      	add	r3, ip
 8001d64:	4649      	mov	r1, r9
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	2302      	movs	r3, #2
 8001d6a:	4319      	orrs	r1, r3
 8001d6c:	4689      	mov	r9, r1
 8001d6e:	2002      	movs	r0, #2
 8001d70:	e69d      	b.n	8001aae <__aeabi_dmul+0x86>
 8001d72:	465b      	mov	r3, fp
 8001d74:	9701      	str	r7, [sp, #4]
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d000      	beq.n	8001d7c <__aeabi_dmul+0x354>
 8001d7a:	e6ad      	b.n	8001ad8 <__aeabi_dmul+0xb0>
 8001d7c:	e6c3      	b.n	8001b06 <__aeabi_dmul+0xde>
 8001d7e:	4a0d      	ldr	r2, [pc, #52]	; (8001db4 <__aeabi_dmul+0x38c>)
 8001d80:	2003      	movs	r0, #3
 8001d82:	4694      	mov	ip, r2
 8001d84:	4463      	add	r3, ip
 8001d86:	464a      	mov	r2, r9
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	431a      	orrs	r2, r3
 8001d8e:	4691      	mov	r9, r2
 8001d90:	4652      	mov	r2, sl
 8001d92:	e68c      	b.n	8001aae <__aeabi_dmul+0x86>
 8001d94:	220c      	movs	r2, #12
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	2303      	movs	r3, #3
 8001d9a:	0005      	movs	r5, r0
 8001d9c:	4691      	mov	r9, r2
 8001d9e:	469b      	mov	fp, r3
 8001da0:	e666      	b.n	8001a70 <__aeabi_dmul+0x48>
 8001da2:	2304      	movs	r3, #4
 8001da4:	4699      	mov	r9, r3
 8001da6:	2300      	movs	r3, #0
 8001da8:	9300      	str	r3, [sp, #0]
 8001daa:	3301      	adds	r3, #1
 8001dac:	2400      	movs	r4, #0
 8001dae:	469b      	mov	fp, r3
 8001db0:	e65e      	b.n	8001a70 <__aeabi_dmul+0x48>
 8001db2:	46c0      	nop			; (mov r8, r8)
 8001db4:	000007ff 	.word	0x000007ff
 8001db8:	fffffc01 	.word	0xfffffc01
 8001dbc:	080133b0 	.word	0x080133b0
 8001dc0:	000003ff 	.word	0x000003ff
 8001dc4:	feffffff 	.word	0xfeffffff
 8001dc8:	000007fe 	.word	0x000007fe
 8001dcc:	fffffc0d 	.word	0xfffffc0d
 8001dd0:	4649      	mov	r1, r9
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	4319      	orrs	r1, r3
 8001dd6:	4689      	mov	r9, r1
 8001dd8:	2600      	movs	r6, #0
 8001dda:	2001      	movs	r0, #1
 8001ddc:	e667      	b.n	8001aae <__aeabi_dmul+0x86>
 8001dde:	2300      	movs	r3, #0
 8001de0:	2480      	movs	r4, #128	; 0x80
 8001de2:	2500      	movs	r5, #0
 8001de4:	4a43      	ldr	r2, [pc, #268]	; (8001ef4 <__aeabi_dmul+0x4cc>)
 8001de6:	9301      	str	r3, [sp, #4]
 8001de8:	0324      	lsls	r4, r4, #12
 8001dea:	e67e      	b.n	8001aea <__aeabi_dmul+0xc2>
 8001dec:	2001      	movs	r0, #1
 8001dee:	1a40      	subs	r0, r0, r1
 8001df0:	2838      	cmp	r0, #56	; 0x38
 8001df2:	dd00      	ble.n	8001df6 <__aeabi_dmul+0x3ce>
 8001df4:	e676      	b.n	8001ae4 <__aeabi_dmul+0xbc>
 8001df6:	281f      	cmp	r0, #31
 8001df8:	dd5b      	ble.n	8001eb2 <__aeabi_dmul+0x48a>
 8001dfa:	221f      	movs	r2, #31
 8001dfc:	0023      	movs	r3, r4
 8001dfe:	4252      	negs	r2, r2
 8001e00:	1a51      	subs	r1, r2, r1
 8001e02:	40cb      	lsrs	r3, r1
 8001e04:	0019      	movs	r1, r3
 8001e06:	2820      	cmp	r0, #32
 8001e08:	d003      	beq.n	8001e12 <__aeabi_dmul+0x3ea>
 8001e0a:	4a3b      	ldr	r2, [pc, #236]	; (8001ef8 <__aeabi_dmul+0x4d0>)
 8001e0c:	4462      	add	r2, ip
 8001e0e:	4094      	lsls	r4, r2
 8001e10:	4325      	orrs	r5, r4
 8001e12:	1e6a      	subs	r2, r5, #1
 8001e14:	4195      	sbcs	r5, r2
 8001e16:	002a      	movs	r2, r5
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	2107      	movs	r1, #7
 8001e1c:	000d      	movs	r5, r1
 8001e1e:	2400      	movs	r4, #0
 8001e20:	4015      	ands	r5, r2
 8001e22:	4211      	tst	r1, r2
 8001e24:	d05b      	beq.n	8001ede <__aeabi_dmul+0x4b6>
 8001e26:	210f      	movs	r1, #15
 8001e28:	2400      	movs	r4, #0
 8001e2a:	4011      	ands	r1, r2
 8001e2c:	2904      	cmp	r1, #4
 8001e2e:	d053      	beq.n	8001ed8 <__aeabi_dmul+0x4b0>
 8001e30:	1d11      	adds	r1, r2, #4
 8001e32:	4291      	cmp	r1, r2
 8001e34:	4192      	sbcs	r2, r2
 8001e36:	4252      	negs	r2, r2
 8001e38:	18a4      	adds	r4, r4, r2
 8001e3a:	000a      	movs	r2, r1
 8001e3c:	0223      	lsls	r3, r4, #8
 8001e3e:	d54b      	bpl.n	8001ed8 <__aeabi_dmul+0x4b0>
 8001e40:	2201      	movs	r2, #1
 8001e42:	2400      	movs	r4, #0
 8001e44:	2500      	movs	r5, #0
 8001e46:	e650      	b.n	8001aea <__aeabi_dmul+0xc2>
 8001e48:	2380      	movs	r3, #128	; 0x80
 8001e4a:	031b      	lsls	r3, r3, #12
 8001e4c:	421c      	tst	r4, r3
 8001e4e:	d009      	beq.n	8001e64 <__aeabi_dmul+0x43c>
 8001e50:	421e      	tst	r6, r3
 8001e52:	d107      	bne.n	8001e64 <__aeabi_dmul+0x43c>
 8001e54:	4333      	orrs	r3, r6
 8001e56:	031c      	lsls	r4, r3, #12
 8001e58:	4643      	mov	r3, r8
 8001e5a:	0015      	movs	r5, r2
 8001e5c:	0b24      	lsrs	r4, r4, #12
 8001e5e:	4a25      	ldr	r2, [pc, #148]	; (8001ef4 <__aeabi_dmul+0x4cc>)
 8001e60:	9301      	str	r3, [sp, #4]
 8001e62:	e642      	b.n	8001aea <__aeabi_dmul+0xc2>
 8001e64:	2280      	movs	r2, #128	; 0x80
 8001e66:	0312      	lsls	r2, r2, #12
 8001e68:	4314      	orrs	r4, r2
 8001e6a:	0324      	lsls	r4, r4, #12
 8001e6c:	4a21      	ldr	r2, [pc, #132]	; (8001ef4 <__aeabi_dmul+0x4cc>)
 8001e6e:	0b24      	lsrs	r4, r4, #12
 8001e70:	9701      	str	r7, [sp, #4]
 8001e72:	e63a      	b.n	8001aea <__aeabi_dmul+0xc2>
 8001e74:	f000 fd50 	bl	8002918 <__clzsi2>
 8001e78:	0001      	movs	r1, r0
 8001e7a:	0002      	movs	r2, r0
 8001e7c:	3115      	adds	r1, #21
 8001e7e:	3220      	adds	r2, #32
 8001e80:	291c      	cmp	r1, #28
 8001e82:	dc00      	bgt.n	8001e86 <__aeabi_dmul+0x45e>
 8001e84:	e74b      	b.n	8001d1e <__aeabi_dmul+0x2f6>
 8001e86:	0034      	movs	r4, r6
 8001e88:	3808      	subs	r0, #8
 8001e8a:	2500      	movs	r5, #0
 8001e8c:	4084      	lsls	r4, r0
 8001e8e:	e750      	b.n	8001d32 <__aeabi_dmul+0x30a>
 8001e90:	f000 fd42 	bl	8002918 <__clzsi2>
 8001e94:	0003      	movs	r3, r0
 8001e96:	001a      	movs	r2, r3
 8001e98:	3215      	adds	r2, #21
 8001e9a:	3020      	adds	r0, #32
 8001e9c:	2a1c      	cmp	r2, #28
 8001e9e:	dc00      	bgt.n	8001ea2 <__aeabi_dmul+0x47a>
 8001ea0:	e71e      	b.n	8001ce0 <__aeabi_dmul+0x2b8>
 8001ea2:	4656      	mov	r6, sl
 8001ea4:	3b08      	subs	r3, #8
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	409e      	lsls	r6, r3
 8001eaa:	e723      	b.n	8001cf4 <__aeabi_dmul+0x2cc>
 8001eac:	9b00      	ldr	r3, [sp, #0]
 8001eae:	469c      	mov	ip, r3
 8001eb0:	e6e6      	b.n	8001c80 <__aeabi_dmul+0x258>
 8001eb2:	4912      	ldr	r1, [pc, #72]	; (8001efc <__aeabi_dmul+0x4d4>)
 8001eb4:	0022      	movs	r2, r4
 8001eb6:	4461      	add	r1, ip
 8001eb8:	002e      	movs	r6, r5
 8001eba:	408d      	lsls	r5, r1
 8001ebc:	408a      	lsls	r2, r1
 8001ebe:	40c6      	lsrs	r6, r0
 8001ec0:	1e69      	subs	r1, r5, #1
 8001ec2:	418d      	sbcs	r5, r1
 8001ec4:	4332      	orrs	r2, r6
 8001ec6:	432a      	orrs	r2, r5
 8001ec8:	40c4      	lsrs	r4, r0
 8001eca:	0753      	lsls	r3, r2, #29
 8001ecc:	d0b6      	beq.n	8001e3c <__aeabi_dmul+0x414>
 8001ece:	210f      	movs	r1, #15
 8001ed0:	4011      	ands	r1, r2
 8001ed2:	2904      	cmp	r1, #4
 8001ed4:	d1ac      	bne.n	8001e30 <__aeabi_dmul+0x408>
 8001ed6:	e7b1      	b.n	8001e3c <__aeabi_dmul+0x414>
 8001ed8:	0765      	lsls	r5, r4, #29
 8001eda:	0264      	lsls	r4, r4, #9
 8001edc:	0b24      	lsrs	r4, r4, #12
 8001ede:	08d2      	lsrs	r2, r2, #3
 8001ee0:	4315      	orrs	r5, r2
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	e601      	b.n	8001aea <__aeabi_dmul+0xc2>
 8001ee6:	2280      	movs	r2, #128	; 0x80
 8001ee8:	0312      	lsls	r2, r2, #12
 8001eea:	4314      	orrs	r4, r2
 8001eec:	0324      	lsls	r4, r4, #12
 8001eee:	4a01      	ldr	r2, [pc, #4]	; (8001ef4 <__aeabi_dmul+0x4cc>)
 8001ef0:	0b24      	lsrs	r4, r4, #12
 8001ef2:	e5fa      	b.n	8001aea <__aeabi_dmul+0xc2>
 8001ef4:	000007ff 	.word	0x000007ff
 8001ef8:	0000043e 	.word	0x0000043e
 8001efc:	0000041e 	.word	0x0000041e

08001f00 <__aeabi_dsub>:
 8001f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f02:	4657      	mov	r7, sl
 8001f04:	464e      	mov	r6, r9
 8001f06:	4645      	mov	r5, r8
 8001f08:	46de      	mov	lr, fp
 8001f0a:	b5e0      	push	{r5, r6, r7, lr}
 8001f0c:	001e      	movs	r6, r3
 8001f0e:	0017      	movs	r7, r2
 8001f10:	004a      	lsls	r2, r1, #1
 8001f12:	030b      	lsls	r3, r1, #12
 8001f14:	0d52      	lsrs	r2, r2, #21
 8001f16:	0a5b      	lsrs	r3, r3, #9
 8001f18:	4690      	mov	r8, r2
 8001f1a:	0f42      	lsrs	r2, r0, #29
 8001f1c:	431a      	orrs	r2, r3
 8001f1e:	0fcd      	lsrs	r5, r1, #31
 8001f20:	4ccd      	ldr	r4, [pc, #820]	; (8002258 <__aeabi_dsub+0x358>)
 8001f22:	0331      	lsls	r1, r6, #12
 8001f24:	00c3      	lsls	r3, r0, #3
 8001f26:	4694      	mov	ip, r2
 8001f28:	0070      	lsls	r0, r6, #1
 8001f2a:	0f7a      	lsrs	r2, r7, #29
 8001f2c:	0a49      	lsrs	r1, r1, #9
 8001f2e:	00ff      	lsls	r7, r7, #3
 8001f30:	469a      	mov	sl, r3
 8001f32:	46b9      	mov	r9, r7
 8001f34:	0d40      	lsrs	r0, r0, #21
 8001f36:	0ff6      	lsrs	r6, r6, #31
 8001f38:	4311      	orrs	r1, r2
 8001f3a:	42a0      	cmp	r0, r4
 8001f3c:	d100      	bne.n	8001f40 <__aeabi_dsub+0x40>
 8001f3e:	e0b1      	b.n	80020a4 <__aeabi_dsub+0x1a4>
 8001f40:	2201      	movs	r2, #1
 8001f42:	4056      	eors	r6, r2
 8001f44:	46b3      	mov	fp, r6
 8001f46:	42b5      	cmp	r5, r6
 8001f48:	d100      	bne.n	8001f4c <__aeabi_dsub+0x4c>
 8001f4a:	e088      	b.n	800205e <__aeabi_dsub+0x15e>
 8001f4c:	4642      	mov	r2, r8
 8001f4e:	1a12      	subs	r2, r2, r0
 8001f50:	2a00      	cmp	r2, #0
 8001f52:	dc00      	bgt.n	8001f56 <__aeabi_dsub+0x56>
 8001f54:	e0ae      	b.n	80020b4 <__aeabi_dsub+0x1b4>
 8001f56:	2800      	cmp	r0, #0
 8001f58:	d100      	bne.n	8001f5c <__aeabi_dsub+0x5c>
 8001f5a:	e0c1      	b.n	80020e0 <__aeabi_dsub+0x1e0>
 8001f5c:	48be      	ldr	r0, [pc, #760]	; (8002258 <__aeabi_dsub+0x358>)
 8001f5e:	4580      	cmp	r8, r0
 8001f60:	d100      	bne.n	8001f64 <__aeabi_dsub+0x64>
 8001f62:	e151      	b.n	8002208 <__aeabi_dsub+0x308>
 8001f64:	2080      	movs	r0, #128	; 0x80
 8001f66:	0400      	lsls	r0, r0, #16
 8001f68:	4301      	orrs	r1, r0
 8001f6a:	2a38      	cmp	r2, #56	; 0x38
 8001f6c:	dd00      	ble.n	8001f70 <__aeabi_dsub+0x70>
 8001f6e:	e17b      	b.n	8002268 <__aeabi_dsub+0x368>
 8001f70:	2a1f      	cmp	r2, #31
 8001f72:	dd00      	ble.n	8001f76 <__aeabi_dsub+0x76>
 8001f74:	e1ee      	b.n	8002354 <__aeabi_dsub+0x454>
 8001f76:	2020      	movs	r0, #32
 8001f78:	003e      	movs	r6, r7
 8001f7a:	1a80      	subs	r0, r0, r2
 8001f7c:	000c      	movs	r4, r1
 8001f7e:	40d6      	lsrs	r6, r2
 8001f80:	40d1      	lsrs	r1, r2
 8001f82:	4087      	lsls	r7, r0
 8001f84:	4662      	mov	r2, ip
 8001f86:	4084      	lsls	r4, r0
 8001f88:	1a52      	subs	r2, r2, r1
 8001f8a:	1e78      	subs	r0, r7, #1
 8001f8c:	4187      	sbcs	r7, r0
 8001f8e:	4694      	mov	ip, r2
 8001f90:	4334      	orrs	r4, r6
 8001f92:	4327      	orrs	r7, r4
 8001f94:	1bdc      	subs	r4, r3, r7
 8001f96:	42a3      	cmp	r3, r4
 8001f98:	419b      	sbcs	r3, r3
 8001f9a:	4662      	mov	r2, ip
 8001f9c:	425b      	negs	r3, r3
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	4699      	mov	r9, r3
 8001fa2:	464b      	mov	r3, r9
 8001fa4:	021b      	lsls	r3, r3, #8
 8001fa6:	d400      	bmi.n	8001faa <__aeabi_dsub+0xaa>
 8001fa8:	e118      	b.n	80021dc <__aeabi_dsub+0x2dc>
 8001faa:	464b      	mov	r3, r9
 8001fac:	0258      	lsls	r0, r3, #9
 8001fae:	0a43      	lsrs	r3, r0, #9
 8001fb0:	4699      	mov	r9, r3
 8001fb2:	464b      	mov	r3, r9
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d100      	bne.n	8001fba <__aeabi_dsub+0xba>
 8001fb8:	e137      	b.n	800222a <__aeabi_dsub+0x32a>
 8001fba:	4648      	mov	r0, r9
 8001fbc:	f000 fcac 	bl	8002918 <__clzsi2>
 8001fc0:	0001      	movs	r1, r0
 8001fc2:	3908      	subs	r1, #8
 8001fc4:	2320      	movs	r3, #32
 8001fc6:	0022      	movs	r2, r4
 8001fc8:	4648      	mov	r0, r9
 8001fca:	1a5b      	subs	r3, r3, r1
 8001fcc:	40da      	lsrs	r2, r3
 8001fce:	4088      	lsls	r0, r1
 8001fd0:	408c      	lsls	r4, r1
 8001fd2:	4643      	mov	r3, r8
 8001fd4:	4310      	orrs	r0, r2
 8001fd6:	4588      	cmp	r8, r1
 8001fd8:	dd00      	ble.n	8001fdc <__aeabi_dsub+0xdc>
 8001fda:	e136      	b.n	800224a <__aeabi_dsub+0x34a>
 8001fdc:	1ac9      	subs	r1, r1, r3
 8001fde:	1c4b      	adds	r3, r1, #1
 8001fe0:	2b1f      	cmp	r3, #31
 8001fe2:	dd00      	ble.n	8001fe6 <__aeabi_dsub+0xe6>
 8001fe4:	e0ea      	b.n	80021bc <__aeabi_dsub+0x2bc>
 8001fe6:	2220      	movs	r2, #32
 8001fe8:	0026      	movs	r6, r4
 8001fea:	1ad2      	subs	r2, r2, r3
 8001fec:	0001      	movs	r1, r0
 8001fee:	4094      	lsls	r4, r2
 8001ff0:	40de      	lsrs	r6, r3
 8001ff2:	40d8      	lsrs	r0, r3
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	4091      	lsls	r1, r2
 8001ff8:	1e62      	subs	r2, r4, #1
 8001ffa:	4194      	sbcs	r4, r2
 8001ffc:	4681      	mov	r9, r0
 8001ffe:	4698      	mov	r8, r3
 8002000:	4331      	orrs	r1, r6
 8002002:	430c      	orrs	r4, r1
 8002004:	0763      	lsls	r3, r4, #29
 8002006:	d009      	beq.n	800201c <__aeabi_dsub+0x11c>
 8002008:	230f      	movs	r3, #15
 800200a:	4023      	ands	r3, r4
 800200c:	2b04      	cmp	r3, #4
 800200e:	d005      	beq.n	800201c <__aeabi_dsub+0x11c>
 8002010:	1d23      	adds	r3, r4, #4
 8002012:	42a3      	cmp	r3, r4
 8002014:	41a4      	sbcs	r4, r4
 8002016:	4264      	negs	r4, r4
 8002018:	44a1      	add	r9, r4
 800201a:	001c      	movs	r4, r3
 800201c:	464b      	mov	r3, r9
 800201e:	021b      	lsls	r3, r3, #8
 8002020:	d400      	bmi.n	8002024 <__aeabi_dsub+0x124>
 8002022:	e0de      	b.n	80021e2 <__aeabi_dsub+0x2e2>
 8002024:	4641      	mov	r1, r8
 8002026:	4b8c      	ldr	r3, [pc, #560]	; (8002258 <__aeabi_dsub+0x358>)
 8002028:	3101      	adds	r1, #1
 800202a:	4299      	cmp	r1, r3
 800202c:	d100      	bne.n	8002030 <__aeabi_dsub+0x130>
 800202e:	e0e7      	b.n	8002200 <__aeabi_dsub+0x300>
 8002030:	464b      	mov	r3, r9
 8002032:	488a      	ldr	r0, [pc, #552]	; (800225c <__aeabi_dsub+0x35c>)
 8002034:	08e4      	lsrs	r4, r4, #3
 8002036:	4003      	ands	r3, r0
 8002038:	0018      	movs	r0, r3
 800203a:	0549      	lsls	r1, r1, #21
 800203c:	075b      	lsls	r3, r3, #29
 800203e:	0240      	lsls	r0, r0, #9
 8002040:	4323      	orrs	r3, r4
 8002042:	0d4a      	lsrs	r2, r1, #21
 8002044:	0b04      	lsrs	r4, r0, #12
 8002046:	0512      	lsls	r2, r2, #20
 8002048:	07ed      	lsls	r5, r5, #31
 800204a:	4322      	orrs	r2, r4
 800204c:	432a      	orrs	r2, r5
 800204e:	0018      	movs	r0, r3
 8002050:	0011      	movs	r1, r2
 8002052:	bcf0      	pop	{r4, r5, r6, r7}
 8002054:	46bb      	mov	fp, r7
 8002056:	46b2      	mov	sl, r6
 8002058:	46a9      	mov	r9, r5
 800205a:	46a0      	mov	r8, r4
 800205c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800205e:	4642      	mov	r2, r8
 8002060:	1a12      	subs	r2, r2, r0
 8002062:	2a00      	cmp	r2, #0
 8002064:	dd52      	ble.n	800210c <__aeabi_dsub+0x20c>
 8002066:	2800      	cmp	r0, #0
 8002068:	d100      	bne.n	800206c <__aeabi_dsub+0x16c>
 800206a:	e09c      	b.n	80021a6 <__aeabi_dsub+0x2a6>
 800206c:	45a0      	cmp	r8, r4
 800206e:	d100      	bne.n	8002072 <__aeabi_dsub+0x172>
 8002070:	e0ca      	b.n	8002208 <__aeabi_dsub+0x308>
 8002072:	2080      	movs	r0, #128	; 0x80
 8002074:	0400      	lsls	r0, r0, #16
 8002076:	4301      	orrs	r1, r0
 8002078:	2a38      	cmp	r2, #56	; 0x38
 800207a:	dd00      	ble.n	800207e <__aeabi_dsub+0x17e>
 800207c:	e149      	b.n	8002312 <__aeabi_dsub+0x412>
 800207e:	2a1f      	cmp	r2, #31
 8002080:	dc00      	bgt.n	8002084 <__aeabi_dsub+0x184>
 8002082:	e197      	b.n	80023b4 <__aeabi_dsub+0x4b4>
 8002084:	0010      	movs	r0, r2
 8002086:	000e      	movs	r6, r1
 8002088:	3820      	subs	r0, #32
 800208a:	40c6      	lsrs	r6, r0
 800208c:	2a20      	cmp	r2, #32
 800208e:	d004      	beq.n	800209a <__aeabi_dsub+0x19a>
 8002090:	2040      	movs	r0, #64	; 0x40
 8002092:	1a82      	subs	r2, r0, r2
 8002094:	4091      	lsls	r1, r2
 8002096:	430f      	orrs	r7, r1
 8002098:	46b9      	mov	r9, r7
 800209a:	464c      	mov	r4, r9
 800209c:	1e62      	subs	r2, r4, #1
 800209e:	4194      	sbcs	r4, r2
 80020a0:	4334      	orrs	r4, r6
 80020a2:	e13a      	b.n	800231a <__aeabi_dsub+0x41a>
 80020a4:	000a      	movs	r2, r1
 80020a6:	433a      	orrs	r2, r7
 80020a8:	d028      	beq.n	80020fc <__aeabi_dsub+0x1fc>
 80020aa:	46b3      	mov	fp, r6
 80020ac:	42b5      	cmp	r5, r6
 80020ae:	d02b      	beq.n	8002108 <__aeabi_dsub+0x208>
 80020b0:	4a6b      	ldr	r2, [pc, #428]	; (8002260 <__aeabi_dsub+0x360>)
 80020b2:	4442      	add	r2, r8
 80020b4:	2a00      	cmp	r2, #0
 80020b6:	d05d      	beq.n	8002174 <__aeabi_dsub+0x274>
 80020b8:	4642      	mov	r2, r8
 80020ba:	4644      	mov	r4, r8
 80020bc:	1a82      	subs	r2, r0, r2
 80020be:	2c00      	cmp	r4, #0
 80020c0:	d000      	beq.n	80020c4 <__aeabi_dsub+0x1c4>
 80020c2:	e0f5      	b.n	80022b0 <__aeabi_dsub+0x3b0>
 80020c4:	4665      	mov	r5, ip
 80020c6:	431d      	orrs	r5, r3
 80020c8:	d100      	bne.n	80020cc <__aeabi_dsub+0x1cc>
 80020ca:	e19c      	b.n	8002406 <__aeabi_dsub+0x506>
 80020cc:	1e55      	subs	r5, r2, #1
 80020ce:	2a01      	cmp	r2, #1
 80020d0:	d100      	bne.n	80020d4 <__aeabi_dsub+0x1d4>
 80020d2:	e1fb      	b.n	80024cc <__aeabi_dsub+0x5cc>
 80020d4:	4c60      	ldr	r4, [pc, #384]	; (8002258 <__aeabi_dsub+0x358>)
 80020d6:	42a2      	cmp	r2, r4
 80020d8:	d100      	bne.n	80020dc <__aeabi_dsub+0x1dc>
 80020da:	e1bd      	b.n	8002458 <__aeabi_dsub+0x558>
 80020dc:	002a      	movs	r2, r5
 80020de:	e0f0      	b.n	80022c2 <__aeabi_dsub+0x3c2>
 80020e0:	0008      	movs	r0, r1
 80020e2:	4338      	orrs	r0, r7
 80020e4:	d100      	bne.n	80020e8 <__aeabi_dsub+0x1e8>
 80020e6:	e0c3      	b.n	8002270 <__aeabi_dsub+0x370>
 80020e8:	1e50      	subs	r0, r2, #1
 80020ea:	2a01      	cmp	r2, #1
 80020ec:	d100      	bne.n	80020f0 <__aeabi_dsub+0x1f0>
 80020ee:	e1a8      	b.n	8002442 <__aeabi_dsub+0x542>
 80020f0:	4c59      	ldr	r4, [pc, #356]	; (8002258 <__aeabi_dsub+0x358>)
 80020f2:	42a2      	cmp	r2, r4
 80020f4:	d100      	bne.n	80020f8 <__aeabi_dsub+0x1f8>
 80020f6:	e087      	b.n	8002208 <__aeabi_dsub+0x308>
 80020f8:	0002      	movs	r2, r0
 80020fa:	e736      	b.n	8001f6a <__aeabi_dsub+0x6a>
 80020fc:	2201      	movs	r2, #1
 80020fe:	4056      	eors	r6, r2
 8002100:	46b3      	mov	fp, r6
 8002102:	42b5      	cmp	r5, r6
 8002104:	d000      	beq.n	8002108 <__aeabi_dsub+0x208>
 8002106:	e721      	b.n	8001f4c <__aeabi_dsub+0x4c>
 8002108:	4a55      	ldr	r2, [pc, #340]	; (8002260 <__aeabi_dsub+0x360>)
 800210a:	4442      	add	r2, r8
 800210c:	2a00      	cmp	r2, #0
 800210e:	d100      	bne.n	8002112 <__aeabi_dsub+0x212>
 8002110:	e0b5      	b.n	800227e <__aeabi_dsub+0x37e>
 8002112:	4642      	mov	r2, r8
 8002114:	4644      	mov	r4, r8
 8002116:	1a82      	subs	r2, r0, r2
 8002118:	2c00      	cmp	r4, #0
 800211a:	d100      	bne.n	800211e <__aeabi_dsub+0x21e>
 800211c:	e138      	b.n	8002390 <__aeabi_dsub+0x490>
 800211e:	4e4e      	ldr	r6, [pc, #312]	; (8002258 <__aeabi_dsub+0x358>)
 8002120:	42b0      	cmp	r0, r6
 8002122:	d100      	bne.n	8002126 <__aeabi_dsub+0x226>
 8002124:	e1de      	b.n	80024e4 <__aeabi_dsub+0x5e4>
 8002126:	2680      	movs	r6, #128	; 0x80
 8002128:	4664      	mov	r4, ip
 800212a:	0436      	lsls	r6, r6, #16
 800212c:	4334      	orrs	r4, r6
 800212e:	46a4      	mov	ip, r4
 8002130:	2a38      	cmp	r2, #56	; 0x38
 8002132:	dd00      	ble.n	8002136 <__aeabi_dsub+0x236>
 8002134:	e196      	b.n	8002464 <__aeabi_dsub+0x564>
 8002136:	2a1f      	cmp	r2, #31
 8002138:	dd00      	ble.n	800213c <__aeabi_dsub+0x23c>
 800213a:	e224      	b.n	8002586 <__aeabi_dsub+0x686>
 800213c:	2620      	movs	r6, #32
 800213e:	1ab4      	subs	r4, r6, r2
 8002140:	46a2      	mov	sl, r4
 8002142:	4664      	mov	r4, ip
 8002144:	4656      	mov	r6, sl
 8002146:	40b4      	lsls	r4, r6
 8002148:	46a1      	mov	r9, r4
 800214a:	001c      	movs	r4, r3
 800214c:	464e      	mov	r6, r9
 800214e:	40d4      	lsrs	r4, r2
 8002150:	4326      	orrs	r6, r4
 8002152:	0034      	movs	r4, r6
 8002154:	4656      	mov	r6, sl
 8002156:	40b3      	lsls	r3, r6
 8002158:	1e5e      	subs	r6, r3, #1
 800215a:	41b3      	sbcs	r3, r6
 800215c:	431c      	orrs	r4, r3
 800215e:	4663      	mov	r3, ip
 8002160:	40d3      	lsrs	r3, r2
 8002162:	18c9      	adds	r1, r1, r3
 8002164:	19e4      	adds	r4, r4, r7
 8002166:	42bc      	cmp	r4, r7
 8002168:	41bf      	sbcs	r7, r7
 800216a:	427f      	negs	r7, r7
 800216c:	46b9      	mov	r9, r7
 800216e:	4680      	mov	r8, r0
 8002170:	4489      	add	r9, r1
 8002172:	e0d8      	b.n	8002326 <__aeabi_dsub+0x426>
 8002174:	4640      	mov	r0, r8
 8002176:	4c3b      	ldr	r4, [pc, #236]	; (8002264 <__aeabi_dsub+0x364>)
 8002178:	3001      	adds	r0, #1
 800217a:	4220      	tst	r0, r4
 800217c:	d000      	beq.n	8002180 <__aeabi_dsub+0x280>
 800217e:	e0b4      	b.n	80022ea <__aeabi_dsub+0x3ea>
 8002180:	4640      	mov	r0, r8
 8002182:	2800      	cmp	r0, #0
 8002184:	d000      	beq.n	8002188 <__aeabi_dsub+0x288>
 8002186:	e144      	b.n	8002412 <__aeabi_dsub+0x512>
 8002188:	4660      	mov	r0, ip
 800218a:	4318      	orrs	r0, r3
 800218c:	d100      	bne.n	8002190 <__aeabi_dsub+0x290>
 800218e:	e190      	b.n	80024b2 <__aeabi_dsub+0x5b2>
 8002190:	0008      	movs	r0, r1
 8002192:	4338      	orrs	r0, r7
 8002194:	d000      	beq.n	8002198 <__aeabi_dsub+0x298>
 8002196:	e1aa      	b.n	80024ee <__aeabi_dsub+0x5ee>
 8002198:	4661      	mov	r1, ip
 800219a:	08db      	lsrs	r3, r3, #3
 800219c:	0749      	lsls	r1, r1, #29
 800219e:	430b      	orrs	r3, r1
 80021a0:	4661      	mov	r1, ip
 80021a2:	08cc      	lsrs	r4, r1, #3
 80021a4:	e027      	b.n	80021f6 <__aeabi_dsub+0x2f6>
 80021a6:	0008      	movs	r0, r1
 80021a8:	4338      	orrs	r0, r7
 80021aa:	d061      	beq.n	8002270 <__aeabi_dsub+0x370>
 80021ac:	1e50      	subs	r0, r2, #1
 80021ae:	2a01      	cmp	r2, #1
 80021b0:	d100      	bne.n	80021b4 <__aeabi_dsub+0x2b4>
 80021b2:	e139      	b.n	8002428 <__aeabi_dsub+0x528>
 80021b4:	42a2      	cmp	r2, r4
 80021b6:	d027      	beq.n	8002208 <__aeabi_dsub+0x308>
 80021b8:	0002      	movs	r2, r0
 80021ba:	e75d      	b.n	8002078 <__aeabi_dsub+0x178>
 80021bc:	0002      	movs	r2, r0
 80021be:	391f      	subs	r1, #31
 80021c0:	40ca      	lsrs	r2, r1
 80021c2:	0011      	movs	r1, r2
 80021c4:	2b20      	cmp	r3, #32
 80021c6:	d003      	beq.n	80021d0 <__aeabi_dsub+0x2d0>
 80021c8:	2240      	movs	r2, #64	; 0x40
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	4098      	lsls	r0, r3
 80021ce:	4304      	orrs	r4, r0
 80021d0:	1e63      	subs	r3, r4, #1
 80021d2:	419c      	sbcs	r4, r3
 80021d4:	2300      	movs	r3, #0
 80021d6:	4699      	mov	r9, r3
 80021d8:	4698      	mov	r8, r3
 80021da:	430c      	orrs	r4, r1
 80021dc:	0763      	lsls	r3, r4, #29
 80021de:	d000      	beq.n	80021e2 <__aeabi_dsub+0x2e2>
 80021e0:	e712      	b.n	8002008 <__aeabi_dsub+0x108>
 80021e2:	464b      	mov	r3, r9
 80021e4:	464a      	mov	r2, r9
 80021e6:	08e4      	lsrs	r4, r4, #3
 80021e8:	075b      	lsls	r3, r3, #29
 80021ea:	4323      	orrs	r3, r4
 80021ec:	08d4      	lsrs	r4, r2, #3
 80021ee:	4642      	mov	r2, r8
 80021f0:	4919      	ldr	r1, [pc, #100]	; (8002258 <__aeabi_dsub+0x358>)
 80021f2:	428a      	cmp	r2, r1
 80021f4:	d00e      	beq.n	8002214 <__aeabi_dsub+0x314>
 80021f6:	0324      	lsls	r4, r4, #12
 80021f8:	0552      	lsls	r2, r2, #21
 80021fa:	0b24      	lsrs	r4, r4, #12
 80021fc:	0d52      	lsrs	r2, r2, #21
 80021fe:	e722      	b.n	8002046 <__aeabi_dsub+0x146>
 8002200:	000a      	movs	r2, r1
 8002202:	2400      	movs	r4, #0
 8002204:	2300      	movs	r3, #0
 8002206:	e71e      	b.n	8002046 <__aeabi_dsub+0x146>
 8002208:	08db      	lsrs	r3, r3, #3
 800220a:	4662      	mov	r2, ip
 800220c:	0752      	lsls	r2, r2, #29
 800220e:	4313      	orrs	r3, r2
 8002210:	4662      	mov	r2, ip
 8002212:	08d4      	lsrs	r4, r2, #3
 8002214:	001a      	movs	r2, r3
 8002216:	4322      	orrs	r2, r4
 8002218:	d100      	bne.n	800221c <__aeabi_dsub+0x31c>
 800221a:	e1fc      	b.n	8002616 <__aeabi_dsub+0x716>
 800221c:	2280      	movs	r2, #128	; 0x80
 800221e:	0312      	lsls	r2, r2, #12
 8002220:	4314      	orrs	r4, r2
 8002222:	0324      	lsls	r4, r4, #12
 8002224:	4a0c      	ldr	r2, [pc, #48]	; (8002258 <__aeabi_dsub+0x358>)
 8002226:	0b24      	lsrs	r4, r4, #12
 8002228:	e70d      	b.n	8002046 <__aeabi_dsub+0x146>
 800222a:	0020      	movs	r0, r4
 800222c:	f000 fb74 	bl	8002918 <__clzsi2>
 8002230:	0001      	movs	r1, r0
 8002232:	3118      	adds	r1, #24
 8002234:	291f      	cmp	r1, #31
 8002236:	dc00      	bgt.n	800223a <__aeabi_dsub+0x33a>
 8002238:	e6c4      	b.n	8001fc4 <__aeabi_dsub+0xc4>
 800223a:	3808      	subs	r0, #8
 800223c:	4084      	lsls	r4, r0
 800223e:	4643      	mov	r3, r8
 8002240:	0020      	movs	r0, r4
 8002242:	2400      	movs	r4, #0
 8002244:	4588      	cmp	r8, r1
 8002246:	dc00      	bgt.n	800224a <__aeabi_dsub+0x34a>
 8002248:	e6c8      	b.n	8001fdc <__aeabi_dsub+0xdc>
 800224a:	4a04      	ldr	r2, [pc, #16]	; (800225c <__aeabi_dsub+0x35c>)
 800224c:	1a5b      	subs	r3, r3, r1
 800224e:	4010      	ands	r0, r2
 8002250:	4698      	mov	r8, r3
 8002252:	4681      	mov	r9, r0
 8002254:	e6d6      	b.n	8002004 <__aeabi_dsub+0x104>
 8002256:	46c0      	nop			; (mov r8, r8)
 8002258:	000007ff 	.word	0x000007ff
 800225c:	ff7fffff 	.word	0xff7fffff
 8002260:	fffff801 	.word	0xfffff801
 8002264:	000007fe 	.word	0x000007fe
 8002268:	430f      	orrs	r7, r1
 800226a:	1e7a      	subs	r2, r7, #1
 800226c:	4197      	sbcs	r7, r2
 800226e:	e691      	b.n	8001f94 <__aeabi_dsub+0x94>
 8002270:	4661      	mov	r1, ip
 8002272:	08db      	lsrs	r3, r3, #3
 8002274:	0749      	lsls	r1, r1, #29
 8002276:	430b      	orrs	r3, r1
 8002278:	4661      	mov	r1, ip
 800227a:	08cc      	lsrs	r4, r1, #3
 800227c:	e7b8      	b.n	80021f0 <__aeabi_dsub+0x2f0>
 800227e:	4640      	mov	r0, r8
 8002280:	4cd3      	ldr	r4, [pc, #844]	; (80025d0 <__aeabi_dsub+0x6d0>)
 8002282:	3001      	adds	r0, #1
 8002284:	4220      	tst	r0, r4
 8002286:	d000      	beq.n	800228a <__aeabi_dsub+0x38a>
 8002288:	e0a2      	b.n	80023d0 <__aeabi_dsub+0x4d0>
 800228a:	4640      	mov	r0, r8
 800228c:	2800      	cmp	r0, #0
 800228e:	d000      	beq.n	8002292 <__aeabi_dsub+0x392>
 8002290:	e101      	b.n	8002496 <__aeabi_dsub+0x596>
 8002292:	4660      	mov	r0, ip
 8002294:	4318      	orrs	r0, r3
 8002296:	d100      	bne.n	800229a <__aeabi_dsub+0x39a>
 8002298:	e15e      	b.n	8002558 <__aeabi_dsub+0x658>
 800229a:	0008      	movs	r0, r1
 800229c:	4338      	orrs	r0, r7
 800229e:	d000      	beq.n	80022a2 <__aeabi_dsub+0x3a2>
 80022a0:	e15f      	b.n	8002562 <__aeabi_dsub+0x662>
 80022a2:	4661      	mov	r1, ip
 80022a4:	08db      	lsrs	r3, r3, #3
 80022a6:	0749      	lsls	r1, r1, #29
 80022a8:	430b      	orrs	r3, r1
 80022aa:	4661      	mov	r1, ip
 80022ac:	08cc      	lsrs	r4, r1, #3
 80022ae:	e7a2      	b.n	80021f6 <__aeabi_dsub+0x2f6>
 80022b0:	4dc8      	ldr	r5, [pc, #800]	; (80025d4 <__aeabi_dsub+0x6d4>)
 80022b2:	42a8      	cmp	r0, r5
 80022b4:	d100      	bne.n	80022b8 <__aeabi_dsub+0x3b8>
 80022b6:	e0cf      	b.n	8002458 <__aeabi_dsub+0x558>
 80022b8:	2580      	movs	r5, #128	; 0x80
 80022ba:	4664      	mov	r4, ip
 80022bc:	042d      	lsls	r5, r5, #16
 80022be:	432c      	orrs	r4, r5
 80022c0:	46a4      	mov	ip, r4
 80022c2:	2a38      	cmp	r2, #56	; 0x38
 80022c4:	dc56      	bgt.n	8002374 <__aeabi_dsub+0x474>
 80022c6:	2a1f      	cmp	r2, #31
 80022c8:	dd00      	ble.n	80022cc <__aeabi_dsub+0x3cc>
 80022ca:	e0d1      	b.n	8002470 <__aeabi_dsub+0x570>
 80022cc:	2520      	movs	r5, #32
 80022ce:	001e      	movs	r6, r3
 80022d0:	1aad      	subs	r5, r5, r2
 80022d2:	4664      	mov	r4, ip
 80022d4:	40ab      	lsls	r3, r5
 80022d6:	40ac      	lsls	r4, r5
 80022d8:	40d6      	lsrs	r6, r2
 80022da:	1e5d      	subs	r5, r3, #1
 80022dc:	41ab      	sbcs	r3, r5
 80022de:	4334      	orrs	r4, r6
 80022e0:	4323      	orrs	r3, r4
 80022e2:	4664      	mov	r4, ip
 80022e4:	40d4      	lsrs	r4, r2
 80022e6:	1b09      	subs	r1, r1, r4
 80022e8:	e049      	b.n	800237e <__aeabi_dsub+0x47e>
 80022ea:	4660      	mov	r0, ip
 80022ec:	1bdc      	subs	r4, r3, r7
 80022ee:	1a46      	subs	r6, r0, r1
 80022f0:	42a3      	cmp	r3, r4
 80022f2:	4180      	sbcs	r0, r0
 80022f4:	4240      	negs	r0, r0
 80022f6:	4681      	mov	r9, r0
 80022f8:	0030      	movs	r0, r6
 80022fa:	464e      	mov	r6, r9
 80022fc:	1b80      	subs	r0, r0, r6
 80022fe:	4681      	mov	r9, r0
 8002300:	0200      	lsls	r0, r0, #8
 8002302:	d476      	bmi.n	80023f2 <__aeabi_dsub+0x4f2>
 8002304:	464b      	mov	r3, r9
 8002306:	4323      	orrs	r3, r4
 8002308:	d000      	beq.n	800230c <__aeabi_dsub+0x40c>
 800230a:	e652      	b.n	8001fb2 <__aeabi_dsub+0xb2>
 800230c:	2400      	movs	r4, #0
 800230e:	2500      	movs	r5, #0
 8002310:	e771      	b.n	80021f6 <__aeabi_dsub+0x2f6>
 8002312:	4339      	orrs	r1, r7
 8002314:	000c      	movs	r4, r1
 8002316:	1e62      	subs	r2, r4, #1
 8002318:	4194      	sbcs	r4, r2
 800231a:	18e4      	adds	r4, r4, r3
 800231c:	429c      	cmp	r4, r3
 800231e:	419b      	sbcs	r3, r3
 8002320:	425b      	negs	r3, r3
 8002322:	4463      	add	r3, ip
 8002324:	4699      	mov	r9, r3
 8002326:	464b      	mov	r3, r9
 8002328:	021b      	lsls	r3, r3, #8
 800232a:	d400      	bmi.n	800232e <__aeabi_dsub+0x42e>
 800232c:	e756      	b.n	80021dc <__aeabi_dsub+0x2dc>
 800232e:	2301      	movs	r3, #1
 8002330:	469c      	mov	ip, r3
 8002332:	4ba8      	ldr	r3, [pc, #672]	; (80025d4 <__aeabi_dsub+0x6d4>)
 8002334:	44e0      	add	r8, ip
 8002336:	4598      	cmp	r8, r3
 8002338:	d038      	beq.n	80023ac <__aeabi_dsub+0x4ac>
 800233a:	464b      	mov	r3, r9
 800233c:	48a6      	ldr	r0, [pc, #664]	; (80025d8 <__aeabi_dsub+0x6d8>)
 800233e:	2201      	movs	r2, #1
 8002340:	4003      	ands	r3, r0
 8002342:	0018      	movs	r0, r3
 8002344:	0863      	lsrs	r3, r4, #1
 8002346:	4014      	ands	r4, r2
 8002348:	431c      	orrs	r4, r3
 800234a:	07c3      	lsls	r3, r0, #31
 800234c:	431c      	orrs	r4, r3
 800234e:	0843      	lsrs	r3, r0, #1
 8002350:	4699      	mov	r9, r3
 8002352:	e657      	b.n	8002004 <__aeabi_dsub+0x104>
 8002354:	0010      	movs	r0, r2
 8002356:	000e      	movs	r6, r1
 8002358:	3820      	subs	r0, #32
 800235a:	40c6      	lsrs	r6, r0
 800235c:	2a20      	cmp	r2, #32
 800235e:	d004      	beq.n	800236a <__aeabi_dsub+0x46a>
 8002360:	2040      	movs	r0, #64	; 0x40
 8002362:	1a82      	subs	r2, r0, r2
 8002364:	4091      	lsls	r1, r2
 8002366:	430f      	orrs	r7, r1
 8002368:	46b9      	mov	r9, r7
 800236a:	464f      	mov	r7, r9
 800236c:	1e7a      	subs	r2, r7, #1
 800236e:	4197      	sbcs	r7, r2
 8002370:	4337      	orrs	r7, r6
 8002372:	e60f      	b.n	8001f94 <__aeabi_dsub+0x94>
 8002374:	4662      	mov	r2, ip
 8002376:	431a      	orrs	r2, r3
 8002378:	0013      	movs	r3, r2
 800237a:	1e5a      	subs	r2, r3, #1
 800237c:	4193      	sbcs	r3, r2
 800237e:	1afc      	subs	r4, r7, r3
 8002380:	42a7      	cmp	r7, r4
 8002382:	41bf      	sbcs	r7, r7
 8002384:	427f      	negs	r7, r7
 8002386:	1bcb      	subs	r3, r1, r7
 8002388:	4699      	mov	r9, r3
 800238a:	465d      	mov	r5, fp
 800238c:	4680      	mov	r8, r0
 800238e:	e608      	b.n	8001fa2 <__aeabi_dsub+0xa2>
 8002390:	4666      	mov	r6, ip
 8002392:	431e      	orrs	r6, r3
 8002394:	d100      	bne.n	8002398 <__aeabi_dsub+0x498>
 8002396:	e0be      	b.n	8002516 <__aeabi_dsub+0x616>
 8002398:	1e56      	subs	r6, r2, #1
 800239a:	2a01      	cmp	r2, #1
 800239c:	d100      	bne.n	80023a0 <__aeabi_dsub+0x4a0>
 800239e:	e109      	b.n	80025b4 <__aeabi_dsub+0x6b4>
 80023a0:	4c8c      	ldr	r4, [pc, #560]	; (80025d4 <__aeabi_dsub+0x6d4>)
 80023a2:	42a2      	cmp	r2, r4
 80023a4:	d100      	bne.n	80023a8 <__aeabi_dsub+0x4a8>
 80023a6:	e119      	b.n	80025dc <__aeabi_dsub+0x6dc>
 80023a8:	0032      	movs	r2, r6
 80023aa:	e6c1      	b.n	8002130 <__aeabi_dsub+0x230>
 80023ac:	4642      	mov	r2, r8
 80023ae:	2400      	movs	r4, #0
 80023b0:	2300      	movs	r3, #0
 80023b2:	e648      	b.n	8002046 <__aeabi_dsub+0x146>
 80023b4:	2020      	movs	r0, #32
 80023b6:	000c      	movs	r4, r1
 80023b8:	1a80      	subs	r0, r0, r2
 80023ba:	003e      	movs	r6, r7
 80023bc:	4087      	lsls	r7, r0
 80023be:	4084      	lsls	r4, r0
 80023c0:	40d6      	lsrs	r6, r2
 80023c2:	1e78      	subs	r0, r7, #1
 80023c4:	4187      	sbcs	r7, r0
 80023c6:	40d1      	lsrs	r1, r2
 80023c8:	4334      	orrs	r4, r6
 80023ca:	433c      	orrs	r4, r7
 80023cc:	448c      	add	ip, r1
 80023ce:	e7a4      	b.n	800231a <__aeabi_dsub+0x41a>
 80023d0:	4a80      	ldr	r2, [pc, #512]	; (80025d4 <__aeabi_dsub+0x6d4>)
 80023d2:	4290      	cmp	r0, r2
 80023d4:	d100      	bne.n	80023d8 <__aeabi_dsub+0x4d8>
 80023d6:	e0e9      	b.n	80025ac <__aeabi_dsub+0x6ac>
 80023d8:	19df      	adds	r7, r3, r7
 80023da:	429f      	cmp	r7, r3
 80023dc:	419b      	sbcs	r3, r3
 80023de:	4461      	add	r1, ip
 80023e0:	425b      	negs	r3, r3
 80023e2:	18c9      	adds	r1, r1, r3
 80023e4:	07cc      	lsls	r4, r1, #31
 80023e6:	087f      	lsrs	r7, r7, #1
 80023e8:	084b      	lsrs	r3, r1, #1
 80023ea:	4699      	mov	r9, r3
 80023ec:	4680      	mov	r8, r0
 80023ee:	433c      	orrs	r4, r7
 80023f0:	e6f4      	b.n	80021dc <__aeabi_dsub+0x2dc>
 80023f2:	1afc      	subs	r4, r7, r3
 80023f4:	42a7      	cmp	r7, r4
 80023f6:	41bf      	sbcs	r7, r7
 80023f8:	4663      	mov	r3, ip
 80023fa:	427f      	negs	r7, r7
 80023fc:	1ac9      	subs	r1, r1, r3
 80023fe:	1bcb      	subs	r3, r1, r7
 8002400:	4699      	mov	r9, r3
 8002402:	465d      	mov	r5, fp
 8002404:	e5d5      	b.n	8001fb2 <__aeabi_dsub+0xb2>
 8002406:	08ff      	lsrs	r7, r7, #3
 8002408:	074b      	lsls	r3, r1, #29
 800240a:	465d      	mov	r5, fp
 800240c:	433b      	orrs	r3, r7
 800240e:	08cc      	lsrs	r4, r1, #3
 8002410:	e6ee      	b.n	80021f0 <__aeabi_dsub+0x2f0>
 8002412:	4662      	mov	r2, ip
 8002414:	431a      	orrs	r2, r3
 8002416:	d000      	beq.n	800241a <__aeabi_dsub+0x51a>
 8002418:	e082      	b.n	8002520 <__aeabi_dsub+0x620>
 800241a:	000b      	movs	r3, r1
 800241c:	433b      	orrs	r3, r7
 800241e:	d11b      	bne.n	8002458 <__aeabi_dsub+0x558>
 8002420:	2480      	movs	r4, #128	; 0x80
 8002422:	2500      	movs	r5, #0
 8002424:	0324      	lsls	r4, r4, #12
 8002426:	e6f9      	b.n	800221c <__aeabi_dsub+0x31c>
 8002428:	19dc      	adds	r4, r3, r7
 800242a:	429c      	cmp	r4, r3
 800242c:	419b      	sbcs	r3, r3
 800242e:	4461      	add	r1, ip
 8002430:	4689      	mov	r9, r1
 8002432:	425b      	negs	r3, r3
 8002434:	4499      	add	r9, r3
 8002436:	464b      	mov	r3, r9
 8002438:	021b      	lsls	r3, r3, #8
 800243a:	d444      	bmi.n	80024c6 <__aeabi_dsub+0x5c6>
 800243c:	2301      	movs	r3, #1
 800243e:	4698      	mov	r8, r3
 8002440:	e6cc      	b.n	80021dc <__aeabi_dsub+0x2dc>
 8002442:	1bdc      	subs	r4, r3, r7
 8002444:	4662      	mov	r2, ip
 8002446:	42a3      	cmp	r3, r4
 8002448:	419b      	sbcs	r3, r3
 800244a:	1a51      	subs	r1, r2, r1
 800244c:	425b      	negs	r3, r3
 800244e:	1acb      	subs	r3, r1, r3
 8002450:	4699      	mov	r9, r3
 8002452:	2301      	movs	r3, #1
 8002454:	4698      	mov	r8, r3
 8002456:	e5a4      	b.n	8001fa2 <__aeabi_dsub+0xa2>
 8002458:	08ff      	lsrs	r7, r7, #3
 800245a:	074b      	lsls	r3, r1, #29
 800245c:	465d      	mov	r5, fp
 800245e:	433b      	orrs	r3, r7
 8002460:	08cc      	lsrs	r4, r1, #3
 8002462:	e6d7      	b.n	8002214 <__aeabi_dsub+0x314>
 8002464:	4662      	mov	r2, ip
 8002466:	431a      	orrs	r2, r3
 8002468:	0014      	movs	r4, r2
 800246a:	1e63      	subs	r3, r4, #1
 800246c:	419c      	sbcs	r4, r3
 800246e:	e679      	b.n	8002164 <__aeabi_dsub+0x264>
 8002470:	0015      	movs	r5, r2
 8002472:	4664      	mov	r4, ip
 8002474:	3d20      	subs	r5, #32
 8002476:	40ec      	lsrs	r4, r5
 8002478:	46a0      	mov	r8, r4
 800247a:	2a20      	cmp	r2, #32
 800247c:	d005      	beq.n	800248a <__aeabi_dsub+0x58a>
 800247e:	2540      	movs	r5, #64	; 0x40
 8002480:	4664      	mov	r4, ip
 8002482:	1aaa      	subs	r2, r5, r2
 8002484:	4094      	lsls	r4, r2
 8002486:	4323      	orrs	r3, r4
 8002488:	469a      	mov	sl, r3
 800248a:	4654      	mov	r4, sl
 800248c:	1e63      	subs	r3, r4, #1
 800248e:	419c      	sbcs	r4, r3
 8002490:	4643      	mov	r3, r8
 8002492:	4323      	orrs	r3, r4
 8002494:	e773      	b.n	800237e <__aeabi_dsub+0x47e>
 8002496:	4662      	mov	r2, ip
 8002498:	431a      	orrs	r2, r3
 800249a:	d023      	beq.n	80024e4 <__aeabi_dsub+0x5e4>
 800249c:	000a      	movs	r2, r1
 800249e:	433a      	orrs	r2, r7
 80024a0:	d000      	beq.n	80024a4 <__aeabi_dsub+0x5a4>
 80024a2:	e0a0      	b.n	80025e6 <__aeabi_dsub+0x6e6>
 80024a4:	4662      	mov	r2, ip
 80024a6:	08db      	lsrs	r3, r3, #3
 80024a8:	0752      	lsls	r2, r2, #29
 80024aa:	4313      	orrs	r3, r2
 80024ac:	4662      	mov	r2, ip
 80024ae:	08d4      	lsrs	r4, r2, #3
 80024b0:	e6b0      	b.n	8002214 <__aeabi_dsub+0x314>
 80024b2:	000b      	movs	r3, r1
 80024b4:	433b      	orrs	r3, r7
 80024b6:	d100      	bne.n	80024ba <__aeabi_dsub+0x5ba>
 80024b8:	e728      	b.n	800230c <__aeabi_dsub+0x40c>
 80024ba:	08ff      	lsrs	r7, r7, #3
 80024bc:	074b      	lsls	r3, r1, #29
 80024be:	465d      	mov	r5, fp
 80024c0:	433b      	orrs	r3, r7
 80024c2:	08cc      	lsrs	r4, r1, #3
 80024c4:	e697      	b.n	80021f6 <__aeabi_dsub+0x2f6>
 80024c6:	2302      	movs	r3, #2
 80024c8:	4698      	mov	r8, r3
 80024ca:	e736      	b.n	800233a <__aeabi_dsub+0x43a>
 80024cc:	1afc      	subs	r4, r7, r3
 80024ce:	42a7      	cmp	r7, r4
 80024d0:	41bf      	sbcs	r7, r7
 80024d2:	4663      	mov	r3, ip
 80024d4:	427f      	negs	r7, r7
 80024d6:	1ac9      	subs	r1, r1, r3
 80024d8:	1bcb      	subs	r3, r1, r7
 80024da:	4699      	mov	r9, r3
 80024dc:	2301      	movs	r3, #1
 80024de:	465d      	mov	r5, fp
 80024e0:	4698      	mov	r8, r3
 80024e2:	e55e      	b.n	8001fa2 <__aeabi_dsub+0xa2>
 80024e4:	074b      	lsls	r3, r1, #29
 80024e6:	08ff      	lsrs	r7, r7, #3
 80024e8:	433b      	orrs	r3, r7
 80024ea:	08cc      	lsrs	r4, r1, #3
 80024ec:	e692      	b.n	8002214 <__aeabi_dsub+0x314>
 80024ee:	1bdc      	subs	r4, r3, r7
 80024f0:	4660      	mov	r0, ip
 80024f2:	42a3      	cmp	r3, r4
 80024f4:	41b6      	sbcs	r6, r6
 80024f6:	1a40      	subs	r0, r0, r1
 80024f8:	4276      	negs	r6, r6
 80024fa:	1b80      	subs	r0, r0, r6
 80024fc:	4681      	mov	r9, r0
 80024fe:	0200      	lsls	r0, r0, #8
 8002500:	d560      	bpl.n	80025c4 <__aeabi_dsub+0x6c4>
 8002502:	1afc      	subs	r4, r7, r3
 8002504:	42a7      	cmp	r7, r4
 8002506:	41bf      	sbcs	r7, r7
 8002508:	4663      	mov	r3, ip
 800250a:	427f      	negs	r7, r7
 800250c:	1ac9      	subs	r1, r1, r3
 800250e:	1bcb      	subs	r3, r1, r7
 8002510:	4699      	mov	r9, r3
 8002512:	465d      	mov	r5, fp
 8002514:	e576      	b.n	8002004 <__aeabi_dsub+0x104>
 8002516:	08ff      	lsrs	r7, r7, #3
 8002518:	074b      	lsls	r3, r1, #29
 800251a:	433b      	orrs	r3, r7
 800251c:	08cc      	lsrs	r4, r1, #3
 800251e:	e667      	b.n	80021f0 <__aeabi_dsub+0x2f0>
 8002520:	000a      	movs	r2, r1
 8002522:	08db      	lsrs	r3, r3, #3
 8002524:	433a      	orrs	r2, r7
 8002526:	d100      	bne.n	800252a <__aeabi_dsub+0x62a>
 8002528:	e66f      	b.n	800220a <__aeabi_dsub+0x30a>
 800252a:	4662      	mov	r2, ip
 800252c:	0752      	lsls	r2, r2, #29
 800252e:	4313      	orrs	r3, r2
 8002530:	4662      	mov	r2, ip
 8002532:	08d4      	lsrs	r4, r2, #3
 8002534:	2280      	movs	r2, #128	; 0x80
 8002536:	0312      	lsls	r2, r2, #12
 8002538:	4214      	tst	r4, r2
 800253a:	d007      	beq.n	800254c <__aeabi_dsub+0x64c>
 800253c:	08c8      	lsrs	r0, r1, #3
 800253e:	4210      	tst	r0, r2
 8002540:	d104      	bne.n	800254c <__aeabi_dsub+0x64c>
 8002542:	465d      	mov	r5, fp
 8002544:	0004      	movs	r4, r0
 8002546:	08fb      	lsrs	r3, r7, #3
 8002548:	0749      	lsls	r1, r1, #29
 800254a:	430b      	orrs	r3, r1
 800254c:	0f5a      	lsrs	r2, r3, #29
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	08db      	lsrs	r3, r3, #3
 8002552:	0752      	lsls	r2, r2, #29
 8002554:	4313      	orrs	r3, r2
 8002556:	e65d      	b.n	8002214 <__aeabi_dsub+0x314>
 8002558:	074b      	lsls	r3, r1, #29
 800255a:	08ff      	lsrs	r7, r7, #3
 800255c:	433b      	orrs	r3, r7
 800255e:	08cc      	lsrs	r4, r1, #3
 8002560:	e649      	b.n	80021f6 <__aeabi_dsub+0x2f6>
 8002562:	19dc      	adds	r4, r3, r7
 8002564:	429c      	cmp	r4, r3
 8002566:	419b      	sbcs	r3, r3
 8002568:	4461      	add	r1, ip
 800256a:	4689      	mov	r9, r1
 800256c:	425b      	negs	r3, r3
 800256e:	4499      	add	r9, r3
 8002570:	464b      	mov	r3, r9
 8002572:	021b      	lsls	r3, r3, #8
 8002574:	d400      	bmi.n	8002578 <__aeabi_dsub+0x678>
 8002576:	e631      	b.n	80021dc <__aeabi_dsub+0x2dc>
 8002578:	464a      	mov	r2, r9
 800257a:	4b17      	ldr	r3, [pc, #92]	; (80025d8 <__aeabi_dsub+0x6d8>)
 800257c:	401a      	ands	r2, r3
 800257e:	2301      	movs	r3, #1
 8002580:	4691      	mov	r9, r2
 8002582:	4698      	mov	r8, r3
 8002584:	e62a      	b.n	80021dc <__aeabi_dsub+0x2dc>
 8002586:	0016      	movs	r6, r2
 8002588:	4664      	mov	r4, ip
 800258a:	3e20      	subs	r6, #32
 800258c:	40f4      	lsrs	r4, r6
 800258e:	46a0      	mov	r8, r4
 8002590:	2a20      	cmp	r2, #32
 8002592:	d005      	beq.n	80025a0 <__aeabi_dsub+0x6a0>
 8002594:	2640      	movs	r6, #64	; 0x40
 8002596:	4664      	mov	r4, ip
 8002598:	1ab2      	subs	r2, r6, r2
 800259a:	4094      	lsls	r4, r2
 800259c:	4323      	orrs	r3, r4
 800259e:	469a      	mov	sl, r3
 80025a0:	4654      	mov	r4, sl
 80025a2:	1e63      	subs	r3, r4, #1
 80025a4:	419c      	sbcs	r4, r3
 80025a6:	4643      	mov	r3, r8
 80025a8:	431c      	orrs	r4, r3
 80025aa:	e5db      	b.n	8002164 <__aeabi_dsub+0x264>
 80025ac:	0002      	movs	r2, r0
 80025ae:	2400      	movs	r4, #0
 80025b0:	2300      	movs	r3, #0
 80025b2:	e548      	b.n	8002046 <__aeabi_dsub+0x146>
 80025b4:	19dc      	adds	r4, r3, r7
 80025b6:	42bc      	cmp	r4, r7
 80025b8:	41bf      	sbcs	r7, r7
 80025ba:	4461      	add	r1, ip
 80025bc:	4689      	mov	r9, r1
 80025be:	427f      	negs	r7, r7
 80025c0:	44b9      	add	r9, r7
 80025c2:	e738      	b.n	8002436 <__aeabi_dsub+0x536>
 80025c4:	464b      	mov	r3, r9
 80025c6:	4323      	orrs	r3, r4
 80025c8:	d100      	bne.n	80025cc <__aeabi_dsub+0x6cc>
 80025ca:	e69f      	b.n	800230c <__aeabi_dsub+0x40c>
 80025cc:	e606      	b.n	80021dc <__aeabi_dsub+0x2dc>
 80025ce:	46c0      	nop			; (mov r8, r8)
 80025d0:	000007fe 	.word	0x000007fe
 80025d4:	000007ff 	.word	0x000007ff
 80025d8:	ff7fffff 	.word	0xff7fffff
 80025dc:	08ff      	lsrs	r7, r7, #3
 80025de:	074b      	lsls	r3, r1, #29
 80025e0:	433b      	orrs	r3, r7
 80025e2:	08cc      	lsrs	r4, r1, #3
 80025e4:	e616      	b.n	8002214 <__aeabi_dsub+0x314>
 80025e6:	4662      	mov	r2, ip
 80025e8:	08db      	lsrs	r3, r3, #3
 80025ea:	0752      	lsls	r2, r2, #29
 80025ec:	4313      	orrs	r3, r2
 80025ee:	4662      	mov	r2, ip
 80025f0:	08d4      	lsrs	r4, r2, #3
 80025f2:	2280      	movs	r2, #128	; 0x80
 80025f4:	0312      	lsls	r2, r2, #12
 80025f6:	4214      	tst	r4, r2
 80025f8:	d007      	beq.n	800260a <__aeabi_dsub+0x70a>
 80025fa:	08c8      	lsrs	r0, r1, #3
 80025fc:	4210      	tst	r0, r2
 80025fe:	d104      	bne.n	800260a <__aeabi_dsub+0x70a>
 8002600:	465d      	mov	r5, fp
 8002602:	0004      	movs	r4, r0
 8002604:	08fb      	lsrs	r3, r7, #3
 8002606:	0749      	lsls	r1, r1, #29
 8002608:	430b      	orrs	r3, r1
 800260a:	0f5a      	lsrs	r2, r3, #29
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	0752      	lsls	r2, r2, #29
 8002610:	08db      	lsrs	r3, r3, #3
 8002612:	4313      	orrs	r3, r2
 8002614:	e5fe      	b.n	8002214 <__aeabi_dsub+0x314>
 8002616:	2300      	movs	r3, #0
 8002618:	4a01      	ldr	r2, [pc, #4]	; (8002620 <__aeabi_dsub+0x720>)
 800261a:	001c      	movs	r4, r3
 800261c:	e513      	b.n	8002046 <__aeabi_dsub+0x146>
 800261e:	46c0      	nop			; (mov r8, r8)
 8002620:	000007ff 	.word	0x000007ff

08002624 <__aeabi_dcmpun>:
 8002624:	b570      	push	{r4, r5, r6, lr}
 8002626:	0005      	movs	r5, r0
 8002628:	480c      	ldr	r0, [pc, #48]	; (800265c <__aeabi_dcmpun+0x38>)
 800262a:	031c      	lsls	r4, r3, #12
 800262c:	0016      	movs	r6, r2
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	030a      	lsls	r2, r1, #12
 8002632:	0049      	lsls	r1, r1, #1
 8002634:	0b12      	lsrs	r2, r2, #12
 8002636:	0d49      	lsrs	r1, r1, #21
 8002638:	0b24      	lsrs	r4, r4, #12
 800263a:	0d5b      	lsrs	r3, r3, #21
 800263c:	4281      	cmp	r1, r0
 800263e:	d008      	beq.n	8002652 <__aeabi_dcmpun+0x2e>
 8002640:	4a06      	ldr	r2, [pc, #24]	; (800265c <__aeabi_dcmpun+0x38>)
 8002642:	2000      	movs	r0, #0
 8002644:	4293      	cmp	r3, r2
 8002646:	d103      	bne.n	8002650 <__aeabi_dcmpun+0x2c>
 8002648:	0020      	movs	r0, r4
 800264a:	4330      	orrs	r0, r6
 800264c:	1e43      	subs	r3, r0, #1
 800264e:	4198      	sbcs	r0, r3
 8002650:	bd70      	pop	{r4, r5, r6, pc}
 8002652:	2001      	movs	r0, #1
 8002654:	432a      	orrs	r2, r5
 8002656:	d1fb      	bne.n	8002650 <__aeabi_dcmpun+0x2c>
 8002658:	e7f2      	b.n	8002640 <__aeabi_dcmpun+0x1c>
 800265a:	46c0      	nop			; (mov r8, r8)
 800265c:	000007ff 	.word	0x000007ff

08002660 <__aeabi_d2iz>:
 8002660:	000a      	movs	r2, r1
 8002662:	b530      	push	{r4, r5, lr}
 8002664:	4c13      	ldr	r4, [pc, #76]	; (80026b4 <__aeabi_d2iz+0x54>)
 8002666:	0053      	lsls	r3, r2, #1
 8002668:	0309      	lsls	r1, r1, #12
 800266a:	0005      	movs	r5, r0
 800266c:	0b09      	lsrs	r1, r1, #12
 800266e:	2000      	movs	r0, #0
 8002670:	0d5b      	lsrs	r3, r3, #21
 8002672:	0fd2      	lsrs	r2, r2, #31
 8002674:	42a3      	cmp	r3, r4
 8002676:	dd04      	ble.n	8002682 <__aeabi_d2iz+0x22>
 8002678:	480f      	ldr	r0, [pc, #60]	; (80026b8 <__aeabi_d2iz+0x58>)
 800267a:	4283      	cmp	r3, r0
 800267c:	dd02      	ble.n	8002684 <__aeabi_d2iz+0x24>
 800267e:	4b0f      	ldr	r3, [pc, #60]	; (80026bc <__aeabi_d2iz+0x5c>)
 8002680:	18d0      	adds	r0, r2, r3
 8002682:	bd30      	pop	{r4, r5, pc}
 8002684:	2080      	movs	r0, #128	; 0x80
 8002686:	0340      	lsls	r0, r0, #13
 8002688:	4301      	orrs	r1, r0
 800268a:	480d      	ldr	r0, [pc, #52]	; (80026c0 <__aeabi_d2iz+0x60>)
 800268c:	1ac0      	subs	r0, r0, r3
 800268e:	281f      	cmp	r0, #31
 8002690:	dd08      	ble.n	80026a4 <__aeabi_d2iz+0x44>
 8002692:	480c      	ldr	r0, [pc, #48]	; (80026c4 <__aeabi_d2iz+0x64>)
 8002694:	1ac3      	subs	r3, r0, r3
 8002696:	40d9      	lsrs	r1, r3
 8002698:	000b      	movs	r3, r1
 800269a:	4258      	negs	r0, r3
 800269c:	2a00      	cmp	r2, #0
 800269e:	d1f0      	bne.n	8002682 <__aeabi_d2iz+0x22>
 80026a0:	0018      	movs	r0, r3
 80026a2:	e7ee      	b.n	8002682 <__aeabi_d2iz+0x22>
 80026a4:	4c08      	ldr	r4, [pc, #32]	; (80026c8 <__aeabi_d2iz+0x68>)
 80026a6:	40c5      	lsrs	r5, r0
 80026a8:	46a4      	mov	ip, r4
 80026aa:	4463      	add	r3, ip
 80026ac:	4099      	lsls	r1, r3
 80026ae:	000b      	movs	r3, r1
 80026b0:	432b      	orrs	r3, r5
 80026b2:	e7f2      	b.n	800269a <__aeabi_d2iz+0x3a>
 80026b4:	000003fe 	.word	0x000003fe
 80026b8:	0000041d 	.word	0x0000041d
 80026bc:	7fffffff 	.word	0x7fffffff
 80026c0:	00000433 	.word	0x00000433
 80026c4:	00000413 	.word	0x00000413
 80026c8:	fffffbed 	.word	0xfffffbed

080026cc <__aeabi_i2d>:
 80026cc:	b570      	push	{r4, r5, r6, lr}
 80026ce:	2800      	cmp	r0, #0
 80026d0:	d016      	beq.n	8002700 <__aeabi_i2d+0x34>
 80026d2:	17c3      	asrs	r3, r0, #31
 80026d4:	18c5      	adds	r5, r0, r3
 80026d6:	405d      	eors	r5, r3
 80026d8:	0fc4      	lsrs	r4, r0, #31
 80026da:	0028      	movs	r0, r5
 80026dc:	f000 f91c 	bl	8002918 <__clzsi2>
 80026e0:	4a11      	ldr	r2, [pc, #68]	; (8002728 <__aeabi_i2d+0x5c>)
 80026e2:	1a12      	subs	r2, r2, r0
 80026e4:	280a      	cmp	r0, #10
 80026e6:	dc16      	bgt.n	8002716 <__aeabi_i2d+0x4a>
 80026e8:	0003      	movs	r3, r0
 80026ea:	002e      	movs	r6, r5
 80026ec:	3315      	adds	r3, #21
 80026ee:	409e      	lsls	r6, r3
 80026f0:	230b      	movs	r3, #11
 80026f2:	1a18      	subs	r0, r3, r0
 80026f4:	40c5      	lsrs	r5, r0
 80026f6:	0552      	lsls	r2, r2, #21
 80026f8:	032d      	lsls	r5, r5, #12
 80026fa:	0b2d      	lsrs	r5, r5, #12
 80026fc:	0d53      	lsrs	r3, r2, #21
 80026fe:	e003      	b.n	8002708 <__aeabi_i2d+0x3c>
 8002700:	2400      	movs	r4, #0
 8002702:	2300      	movs	r3, #0
 8002704:	2500      	movs	r5, #0
 8002706:	2600      	movs	r6, #0
 8002708:	051b      	lsls	r3, r3, #20
 800270a:	432b      	orrs	r3, r5
 800270c:	07e4      	lsls	r4, r4, #31
 800270e:	4323      	orrs	r3, r4
 8002710:	0030      	movs	r0, r6
 8002712:	0019      	movs	r1, r3
 8002714:	bd70      	pop	{r4, r5, r6, pc}
 8002716:	380b      	subs	r0, #11
 8002718:	4085      	lsls	r5, r0
 800271a:	0552      	lsls	r2, r2, #21
 800271c:	032d      	lsls	r5, r5, #12
 800271e:	2600      	movs	r6, #0
 8002720:	0b2d      	lsrs	r5, r5, #12
 8002722:	0d53      	lsrs	r3, r2, #21
 8002724:	e7f0      	b.n	8002708 <__aeabi_i2d+0x3c>
 8002726:	46c0      	nop			; (mov r8, r8)
 8002728:	0000041e 	.word	0x0000041e

0800272c <__aeabi_ui2d>:
 800272c:	b510      	push	{r4, lr}
 800272e:	1e04      	subs	r4, r0, #0
 8002730:	d010      	beq.n	8002754 <__aeabi_ui2d+0x28>
 8002732:	f000 f8f1 	bl	8002918 <__clzsi2>
 8002736:	4b0f      	ldr	r3, [pc, #60]	; (8002774 <__aeabi_ui2d+0x48>)
 8002738:	1a1b      	subs	r3, r3, r0
 800273a:	280a      	cmp	r0, #10
 800273c:	dc11      	bgt.n	8002762 <__aeabi_ui2d+0x36>
 800273e:	220b      	movs	r2, #11
 8002740:	0021      	movs	r1, r4
 8002742:	1a12      	subs	r2, r2, r0
 8002744:	40d1      	lsrs	r1, r2
 8002746:	3015      	adds	r0, #21
 8002748:	030a      	lsls	r2, r1, #12
 800274a:	055b      	lsls	r3, r3, #21
 800274c:	4084      	lsls	r4, r0
 800274e:	0b12      	lsrs	r2, r2, #12
 8002750:	0d5b      	lsrs	r3, r3, #21
 8002752:	e001      	b.n	8002758 <__aeabi_ui2d+0x2c>
 8002754:	2300      	movs	r3, #0
 8002756:	2200      	movs	r2, #0
 8002758:	051b      	lsls	r3, r3, #20
 800275a:	4313      	orrs	r3, r2
 800275c:	0020      	movs	r0, r4
 800275e:	0019      	movs	r1, r3
 8002760:	bd10      	pop	{r4, pc}
 8002762:	0022      	movs	r2, r4
 8002764:	380b      	subs	r0, #11
 8002766:	4082      	lsls	r2, r0
 8002768:	055b      	lsls	r3, r3, #21
 800276a:	0312      	lsls	r2, r2, #12
 800276c:	2400      	movs	r4, #0
 800276e:	0b12      	lsrs	r2, r2, #12
 8002770:	0d5b      	lsrs	r3, r3, #21
 8002772:	e7f1      	b.n	8002758 <__aeabi_ui2d+0x2c>
 8002774:	0000041e 	.word	0x0000041e

08002778 <__aeabi_f2d>:
 8002778:	b570      	push	{r4, r5, r6, lr}
 800277a:	0043      	lsls	r3, r0, #1
 800277c:	0246      	lsls	r6, r0, #9
 800277e:	0fc4      	lsrs	r4, r0, #31
 8002780:	20fe      	movs	r0, #254	; 0xfe
 8002782:	0e1b      	lsrs	r3, r3, #24
 8002784:	1c59      	adds	r1, r3, #1
 8002786:	0a75      	lsrs	r5, r6, #9
 8002788:	4208      	tst	r0, r1
 800278a:	d00c      	beq.n	80027a6 <__aeabi_f2d+0x2e>
 800278c:	22e0      	movs	r2, #224	; 0xe0
 800278e:	0092      	lsls	r2, r2, #2
 8002790:	4694      	mov	ip, r2
 8002792:	076d      	lsls	r5, r5, #29
 8002794:	0b36      	lsrs	r6, r6, #12
 8002796:	4463      	add	r3, ip
 8002798:	051b      	lsls	r3, r3, #20
 800279a:	4333      	orrs	r3, r6
 800279c:	07e4      	lsls	r4, r4, #31
 800279e:	4323      	orrs	r3, r4
 80027a0:	0028      	movs	r0, r5
 80027a2:	0019      	movs	r1, r3
 80027a4:	bd70      	pop	{r4, r5, r6, pc}
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d114      	bne.n	80027d4 <__aeabi_f2d+0x5c>
 80027aa:	2d00      	cmp	r5, #0
 80027ac:	d01b      	beq.n	80027e6 <__aeabi_f2d+0x6e>
 80027ae:	0028      	movs	r0, r5
 80027b0:	f000 f8b2 	bl	8002918 <__clzsi2>
 80027b4:	280a      	cmp	r0, #10
 80027b6:	dc1c      	bgt.n	80027f2 <__aeabi_f2d+0x7a>
 80027b8:	230b      	movs	r3, #11
 80027ba:	002e      	movs	r6, r5
 80027bc:	1a1b      	subs	r3, r3, r0
 80027be:	40de      	lsrs	r6, r3
 80027c0:	0003      	movs	r3, r0
 80027c2:	3315      	adds	r3, #21
 80027c4:	409d      	lsls	r5, r3
 80027c6:	4a0e      	ldr	r2, [pc, #56]	; (8002800 <__aeabi_f2d+0x88>)
 80027c8:	0336      	lsls	r6, r6, #12
 80027ca:	1a12      	subs	r2, r2, r0
 80027cc:	0552      	lsls	r2, r2, #21
 80027ce:	0b36      	lsrs	r6, r6, #12
 80027d0:	0d53      	lsrs	r3, r2, #21
 80027d2:	e7e1      	b.n	8002798 <__aeabi_f2d+0x20>
 80027d4:	2d00      	cmp	r5, #0
 80027d6:	d009      	beq.n	80027ec <__aeabi_f2d+0x74>
 80027d8:	2280      	movs	r2, #128	; 0x80
 80027da:	0b36      	lsrs	r6, r6, #12
 80027dc:	0312      	lsls	r2, r2, #12
 80027de:	4b09      	ldr	r3, [pc, #36]	; (8002804 <__aeabi_f2d+0x8c>)
 80027e0:	076d      	lsls	r5, r5, #29
 80027e2:	4316      	orrs	r6, r2
 80027e4:	e7d8      	b.n	8002798 <__aeabi_f2d+0x20>
 80027e6:	2300      	movs	r3, #0
 80027e8:	2600      	movs	r6, #0
 80027ea:	e7d5      	b.n	8002798 <__aeabi_f2d+0x20>
 80027ec:	2600      	movs	r6, #0
 80027ee:	4b05      	ldr	r3, [pc, #20]	; (8002804 <__aeabi_f2d+0x8c>)
 80027f0:	e7d2      	b.n	8002798 <__aeabi_f2d+0x20>
 80027f2:	0003      	movs	r3, r0
 80027f4:	3b0b      	subs	r3, #11
 80027f6:	409d      	lsls	r5, r3
 80027f8:	002e      	movs	r6, r5
 80027fa:	2500      	movs	r5, #0
 80027fc:	e7e3      	b.n	80027c6 <__aeabi_f2d+0x4e>
 80027fe:	46c0      	nop			; (mov r8, r8)
 8002800:	00000389 	.word	0x00000389
 8002804:	000007ff 	.word	0x000007ff

08002808 <__aeabi_d2f>:
 8002808:	0002      	movs	r2, r0
 800280a:	004b      	lsls	r3, r1, #1
 800280c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800280e:	0d5b      	lsrs	r3, r3, #21
 8002810:	030c      	lsls	r4, r1, #12
 8002812:	4e3d      	ldr	r6, [pc, #244]	; (8002908 <__aeabi_d2f+0x100>)
 8002814:	0a64      	lsrs	r4, r4, #9
 8002816:	0f40      	lsrs	r0, r0, #29
 8002818:	1c5f      	adds	r7, r3, #1
 800281a:	0fc9      	lsrs	r1, r1, #31
 800281c:	4304      	orrs	r4, r0
 800281e:	00d5      	lsls	r5, r2, #3
 8002820:	4237      	tst	r7, r6
 8002822:	d00a      	beq.n	800283a <__aeabi_d2f+0x32>
 8002824:	4839      	ldr	r0, [pc, #228]	; (800290c <__aeabi_d2f+0x104>)
 8002826:	181e      	adds	r6, r3, r0
 8002828:	2efe      	cmp	r6, #254	; 0xfe
 800282a:	dd16      	ble.n	800285a <__aeabi_d2f+0x52>
 800282c:	20ff      	movs	r0, #255	; 0xff
 800282e:	2400      	movs	r4, #0
 8002830:	05c0      	lsls	r0, r0, #23
 8002832:	4320      	orrs	r0, r4
 8002834:	07c9      	lsls	r1, r1, #31
 8002836:	4308      	orrs	r0, r1
 8002838:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800283a:	2b00      	cmp	r3, #0
 800283c:	d106      	bne.n	800284c <__aeabi_d2f+0x44>
 800283e:	432c      	orrs	r4, r5
 8002840:	d026      	beq.n	8002890 <__aeabi_d2f+0x88>
 8002842:	2205      	movs	r2, #5
 8002844:	0192      	lsls	r2, r2, #6
 8002846:	0a54      	lsrs	r4, r2, #9
 8002848:	b2d8      	uxtb	r0, r3
 800284a:	e7f1      	b.n	8002830 <__aeabi_d2f+0x28>
 800284c:	4325      	orrs	r5, r4
 800284e:	d0ed      	beq.n	800282c <__aeabi_d2f+0x24>
 8002850:	2080      	movs	r0, #128	; 0x80
 8002852:	03c0      	lsls	r0, r0, #15
 8002854:	4304      	orrs	r4, r0
 8002856:	20ff      	movs	r0, #255	; 0xff
 8002858:	e7ea      	b.n	8002830 <__aeabi_d2f+0x28>
 800285a:	2e00      	cmp	r6, #0
 800285c:	dd1b      	ble.n	8002896 <__aeabi_d2f+0x8e>
 800285e:	0192      	lsls	r2, r2, #6
 8002860:	1e53      	subs	r3, r2, #1
 8002862:	419a      	sbcs	r2, r3
 8002864:	00e4      	lsls	r4, r4, #3
 8002866:	0f6d      	lsrs	r5, r5, #29
 8002868:	4322      	orrs	r2, r4
 800286a:	432a      	orrs	r2, r5
 800286c:	0753      	lsls	r3, r2, #29
 800286e:	d048      	beq.n	8002902 <__aeabi_d2f+0xfa>
 8002870:	230f      	movs	r3, #15
 8002872:	4013      	ands	r3, r2
 8002874:	2b04      	cmp	r3, #4
 8002876:	d000      	beq.n	800287a <__aeabi_d2f+0x72>
 8002878:	3204      	adds	r2, #4
 800287a:	2380      	movs	r3, #128	; 0x80
 800287c:	04db      	lsls	r3, r3, #19
 800287e:	4013      	ands	r3, r2
 8002880:	d03f      	beq.n	8002902 <__aeabi_d2f+0xfa>
 8002882:	1c70      	adds	r0, r6, #1
 8002884:	2efe      	cmp	r6, #254	; 0xfe
 8002886:	d0d1      	beq.n	800282c <__aeabi_d2f+0x24>
 8002888:	0192      	lsls	r2, r2, #6
 800288a:	0a54      	lsrs	r4, r2, #9
 800288c:	b2c0      	uxtb	r0, r0
 800288e:	e7cf      	b.n	8002830 <__aeabi_d2f+0x28>
 8002890:	2000      	movs	r0, #0
 8002892:	2400      	movs	r4, #0
 8002894:	e7cc      	b.n	8002830 <__aeabi_d2f+0x28>
 8002896:	0032      	movs	r2, r6
 8002898:	3217      	adds	r2, #23
 800289a:	db22      	blt.n	80028e2 <__aeabi_d2f+0xda>
 800289c:	2080      	movs	r0, #128	; 0x80
 800289e:	0400      	lsls	r0, r0, #16
 80028a0:	4320      	orrs	r0, r4
 80028a2:	241e      	movs	r4, #30
 80028a4:	1ba4      	subs	r4, r4, r6
 80028a6:	2c1f      	cmp	r4, #31
 80028a8:	dd1d      	ble.n	80028e6 <__aeabi_d2f+0xde>
 80028aa:	2202      	movs	r2, #2
 80028ac:	4252      	negs	r2, r2
 80028ae:	1b96      	subs	r6, r2, r6
 80028b0:	0002      	movs	r2, r0
 80028b2:	40f2      	lsrs	r2, r6
 80028b4:	0016      	movs	r6, r2
 80028b6:	2c20      	cmp	r4, #32
 80028b8:	d004      	beq.n	80028c4 <__aeabi_d2f+0xbc>
 80028ba:	4a15      	ldr	r2, [pc, #84]	; (8002910 <__aeabi_d2f+0x108>)
 80028bc:	4694      	mov	ip, r2
 80028be:	4463      	add	r3, ip
 80028c0:	4098      	lsls	r0, r3
 80028c2:	4305      	orrs	r5, r0
 80028c4:	002a      	movs	r2, r5
 80028c6:	1e53      	subs	r3, r2, #1
 80028c8:	419a      	sbcs	r2, r3
 80028ca:	4332      	orrs	r2, r6
 80028cc:	2600      	movs	r6, #0
 80028ce:	0753      	lsls	r3, r2, #29
 80028d0:	d1ce      	bne.n	8002870 <__aeabi_d2f+0x68>
 80028d2:	2480      	movs	r4, #128	; 0x80
 80028d4:	0013      	movs	r3, r2
 80028d6:	04e4      	lsls	r4, r4, #19
 80028d8:	2001      	movs	r0, #1
 80028da:	4023      	ands	r3, r4
 80028dc:	4222      	tst	r2, r4
 80028de:	d1d3      	bne.n	8002888 <__aeabi_d2f+0x80>
 80028e0:	e7b0      	b.n	8002844 <__aeabi_d2f+0x3c>
 80028e2:	2300      	movs	r3, #0
 80028e4:	e7ad      	b.n	8002842 <__aeabi_d2f+0x3a>
 80028e6:	4a0b      	ldr	r2, [pc, #44]	; (8002914 <__aeabi_d2f+0x10c>)
 80028e8:	4694      	mov	ip, r2
 80028ea:	002a      	movs	r2, r5
 80028ec:	40e2      	lsrs	r2, r4
 80028ee:	0014      	movs	r4, r2
 80028f0:	002a      	movs	r2, r5
 80028f2:	4463      	add	r3, ip
 80028f4:	409a      	lsls	r2, r3
 80028f6:	4098      	lsls	r0, r3
 80028f8:	1e55      	subs	r5, r2, #1
 80028fa:	41aa      	sbcs	r2, r5
 80028fc:	4302      	orrs	r2, r0
 80028fe:	4322      	orrs	r2, r4
 8002900:	e7e4      	b.n	80028cc <__aeabi_d2f+0xc4>
 8002902:	0033      	movs	r3, r6
 8002904:	e79e      	b.n	8002844 <__aeabi_d2f+0x3c>
 8002906:	46c0      	nop			; (mov r8, r8)
 8002908:	000007fe 	.word	0x000007fe
 800290c:	fffffc80 	.word	0xfffffc80
 8002910:	fffffca2 	.word	0xfffffca2
 8002914:	fffffc82 	.word	0xfffffc82

08002918 <__clzsi2>:
 8002918:	211c      	movs	r1, #28
 800291a:	2301      	movs	r3, #1
 800291c:	041b      	lsls	r3, r3, #16
 800291e:	4298      	cmp	r0, r3
 8002920:	d301      	bcc.n	8002926 <__clzsi2+0xe>
 8002922:	0c00      	lsrs	r0, r0, #16
 8002924:	3910      	subs	r1, #16
 8002926:	0a1b      	lsrs	r3, r3, #8
 8002928:	4298      	cmp	r0, r3
 800292a:	d301      	bcc.n	8002930 <__clzsi2+0x18>
 800292c:	0a00      	lsrs	r0, r0, #8
 800292e:	3908      	subs	r1, #8
 8002930:	091b      	lsrs	r3, r3, #4
 8002932:	4298      	cmp	r0, r3
 8002934:	d301      	bcc.n	800293a <__clzsi2+0x22>
 8002936:	0900      	lsrs	r0, r0, #4
 8002938:	3904      	subs	r1, #4
 800293a:	a202      	add	r2, pc, #8	; (adr r2, 8002944 <__clzsi2+0x2c>)
 800293c:	5c10      	ldrb	r0, [r2, r0]
 800293e:	1840      	adds	r0, r0, r1
 8002940:	4770      	bx	lr
 8002942:	46c0      	nop			; (mov r8, r8)
 8002944:	02020304 	.word	0x02020304
 8002948:	01010101 	.word	0x01010101
	...

08002954 <hex2int>:
//}



uint8_t hex2int(char ch)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	0002      	movs	r2, r0
 800295c:	1dfb      	adds	r3, r7, #7
 800295e:	701a      	strb	r2, [r3, #0]
	if (ch >= '0' && ch <= '9')
 8002960:	1dfb      	adds	r3, r7, #7
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	2b2f      	cmp	r3, #47	; 0x2f
 8002966:	d908      	bls.n	800297a <hex2int+0x26>
 8002968:	1dfb      	adds	r3, r7, #7
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	2b39      	cmp	r3, #57	; 0x39
 800296e:	d804      	bhi.n	800297a <hex2int+0x26>
		return ch - '0';
 8002970:	1dfb      	adds	r3, r7, #7
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	3b30      	subs	r3, #48	; 0x30
 8002976:	b2db      	uxtb	r3, r3
 8002978:	e01a      	b.n	80029b0 <hex2int+0x5c>
	if (ch >= 'A' && ch <= 'F')
 800297a:	1dfb      	adds	r3, r7, #7
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	2b40      	cmp	r3, #64	; 0x40
 8002980:	d908      	bls.n	8002994 <hex2int+0x40>
 8002982:	1dfb      	adds	r3, r7, #7
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	2b46      	cmp	r3, #70	; 0x46
 8002988:	d804      	bhi.n	8002994 <hex2int+0x40>
		return ch - 'A' + 10;
 800298a:	1dfb      	adds	r3, r7, #7
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	3b37      	subs	r3, #55	; 0x37
 8002990:	b2db      	uxtb	r3, r3
 8002992:	e00d      	b.n	80029b0 <hex2int+0x5c>
	if (ch >= 'a' && ch <= 'f')
 8002994:	1dfb      	adds	r3, r7, #7
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	2b60      	cmp	r3, #96	; 0x60
 800299a:	d908      	bls.n	80029ae <hex2int+0x5a>
 800299c:	1dfb      	adds	r3, r7, #7
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	2b66      	cmp	r3, #102	; 0x66
 80029a2:	d804      	bhi.n	80029ae <hex2int+0x5a>
		return ch - 'a' + 10;
 80029a4:	1dfb      	adds	r3, r7, #7
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	3b57      	subs	r3, #87	; 0x57
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	e000      	b.n	80029b0 <hex2int+0x5c>
	return -1;
 80029ae:	23ff      	movs	r3, #255	; 0xff
}
 80029b0:	0018      	movs	r0, r3
 80029b2:	46bd      	mov	sp, r7
 80029b4:	b002      	add	sp, #8
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <nmea_parser>:
		crc ^= nmea_data[i];
	}
	return crc;
}
uint8_t* nmea_parser(char *NR,uint8_t responseLenght,uint8_t *checkSum ,uint8_t *rCheckSum)
{
 80029b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029ba:	b0c1      	sub	sp, #260	; 0x104
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6178      	str	r0, [r7, #20]
 80029c0:	60fa      	str	r2, [r7, #12]
 80029c2:	60bb      	str	r3, [r7, #8]
 80029c4:	200b      	movs	r0, #11
 80029c6:	2608      	movs	r6, #8
 80029c8:	1983      	adds	r3, r0, r6
 80029ca:	19db      	adds	r3, r3, r7
 80029cc:	1c0a      	adds	r2, r1, #0
 80029ce:	701a      	strb	r2, [r3, #0]
	char (*nmeaResponse)[responseLenght];
 80029d0:	0031      	movs	r1, r6
 80029d2:	1843      	adds	r3, r0, r1
 80029d4:	19db      	adds	r3, r3, r7
 80029d6:	781e      	ldrb	r6, [r3, #0]
 80029d8:	0033      	movs	r3, r6
 80029da:	3b01      	subs	r3, #1
 80029dc:	22d0      	movs	r2, #208	; 0xd0
 80029de:	1852      	adds	r2, r2, r1
 80029e0:	19d2      	adds	r2, r2, r7
 80029e2:	6013      	str	r3, [r2, #0]
 80029e4:	603e      	str	r6, [r7, #0]
 80029e6:	2300      	movs	r3, #0
 80029e8:	607b      	str	r3, [r7, #4]
 80029ea:	6839      	ldr	r1, [r7, #0]
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	000b      	movs	r3, r1
 80029f0:	0f5b      	lsrs	r3, r3, #29
 80029f2:	0010      	movs	r0, r2
 80029f4:	00c5      	lsls	r5, r0, #3
 80029f6:	431d      	orrs	r5, r3
 80029f8:	000b      	movs	r3, r1
 80029fa:	00dc      	lsls	r4, r3, #3
	uint8_t gnssCRC = 0;
 80029fc:	23f5      	movs	r3, #245	; 0xf5
 80029fe:	2008      	movs	r0, #8
 8002a00:	181b      	adds	r3, r3, r0
 8002a02:	19db      	adds	r3, r3, r7
 8002a04:	2200      	movs	r2, #0
 8002a06:	701a      	strb	r2, [r3, #0]
	nmeaResponse=NR;
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	21cc      	movs	r1, #204	; 0xcc
 8002a0c:	180a      	adds	r2, r1, r0
 8002a0e:	19d2      	adds	r2, r2, r7
 8002a10:	6013      	str	r3, [r2, #0]
	uint8_t QOG = 0xC0;
 8002a12:	23cb      	movs	r3, #203	; 0xcb
 8002a14:	181b      	adds	r3, r3, r0
 8002a16:	19db      	adds	r3, r3, r7
 8002a18:	22c0      	movs	r2, #192	; 0xc0
 8002a1a:	701a      	strb	r2, [r3, #0]
	uint16_t courseStatus = 0x0;
 8002a1c:	23f6      	movs	r3, #246	; 0xf6
 8002a1e:	181b      	adds	r3, r3, r0
 8002a20:	19db      	adds	r3, r3, r7
 8002a22:	2200      	movs	r2, #0
 8002a24:	801a      	strh	r2, [r3, #0]
	static uint8_t GPSInformation[18] = {0};


	char *p1;
	char *p2;
	p1 = strstr(nmeaResponse[GNGGA],"$GNGGA");
 8002a26:	0032      	movs	r2, r6
 8002a28:	000c      	movs	r4, r1
 8002a2a:	180b      	adds	r3, r1, r0
 8002a2c:	19db      	adds	r3, r3, r7
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	189b      	adds	r3, r3, r2
 8002a32:	4ad2      	ldr	r2, [pc, #840]	; (8002d7c <nmea_parser+0x3c4>)
 8002a34:	0011      	movs	r1, r2
 8002a36:	0018      	movs	r0, r3
 8002a38:	f00c f99f 	bl	800ed7a <strstr>
 8002a3c:	0003      	movs	r3, r0
 8002a3e:	25c4      	movs	r5, #196	; 0xc4
 8002a40:	2008      	movs	r0, #8
 8002a42:	182a      	adds	r2, r5, r0
 8002a44:	19d2      	adds	r2, r2, r7
 8002a46:	6013      	str	r3, [r2, #0]
	p2 = strstr(nmeaResponse[GNRMC],"$GNRMC");
 8002a48:	4acd      	ldr	r2, [pc, #820]	; (8002d80 <nmea_parser+0x3c8>)
 8002a4a:	1823      	adds	r3, r4, r0
 8002a4c:	19db      	adds	r3, r3, r7
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	0011      	movs	r1, r2
 8002a52:	0018      	movs	r0, r3
 8002a54:	f00c f991 	bl	800ed7a <strstr>
 8002a58:	0003      	movs	r3, r0
 8002a5a:	22c0      	movs	r2, #192	; 0xc0
 8002a5c:	2008      	movs	r0, #8
 8002a5e:	1811      	adds	r1, r2, r0
 8002a60:	19c9      	adds	r1, r1, r7
 8002a62:	600b      	str	r3, [r1, #0]

	if(p1 != NULL && p2 != NULL){
 8002a64:	0001      	movs	r1, r0
 8002a66:	186b      	adds	r3, r5, r1
 8002a68:	19db      	adds	r3, r3, r7
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d101      	bne.n	8002a74 <nmea_parser+0xbc>
 8002a70:	f000 fe98 	bl	80037a4 <nmea_parser+0xdec>
 8002a74:	1853      	adds	r3, r2, r1
 8002a76:	19db      	adds	r3, r3, r7
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <nmea_parser+0xca>
 8002a7e:	f000 fe91 	bl	80037a4 <nmea_parser+0xdec>


		for(uint8_t sen=0;sen<2;sen++){
 8002a82:	23f4      	movs	r3, #244	; 0xf4
 8002a84:	185b      	adds	r3, r3, r1
 8002a86:	19db      	adds	r3, r3, r7
 8002a88:	2200      	movs	r2, #0
 8002a8a:	701a      	strb	r2, [r3, #0]
 8002a8c:	e0d9      	b.n	8002c42 <nmea_parser+0x28a>
			uint8_t recvCrc=0;
 8002a8e:	23bf      	movs	r3, #191	; 0xbf
 8002a90:	2108      	movs	r1, #8
 8002a92:	185b      	adds	r3, r3, r1
 8002a94:	19db      	adds	r3, r3, r7
 8002a96:	2200      	movs	r2, #0
 8002a98:	701a      	strb	r2, [r3, #0]
			char rawData[100];
			memset(rawData,0,sizeof(rawData));
 8002a9a:	2210      	movs	r2, #16
 8002a9c:	000c      	movs	r4, r1
 8002a9e:	1853      	adds	r3, r2, r1
 8002aa0:	19db      	adds	r3, r3, r7
 8002aa2:	2264      	movs	r2, #100	; 0x64
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	f00c f90f 	bl	800ecca <memset>

			char *ind1;
			char *ind2;
			ind1=strchr(nmeaResponse[sen],'$');
 8002aac:	25f4      	movs	r5, #244	; 0xf4
 8002aae:	0021      	movs	r1, r4
 8002ab0:	186b      	adds	r3, r5, r1
 8002ab2:	19db      	adds	r3, r3, r7
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	0032      	movs	r2, r6
 8002ab8:	4353      	muls	r3, r2
 8002aba:	22cc      	movs	r2, #204	; 0xcc
 8002abc:	1850      	adds	r0, r2, r1
 8002abe:	19c1      	adds	r1, r0, r7
 8002ac0:	680a      	ldr	r2, [r1, #0]
 8002ac2:	18d3      	adds	r3, r2, r3
 8002ac4:	2124      	movs	r1, #36	; 0x24
 8002ac6:	0018      	movs	r0, r3
 8002ac8:	f00c f935 	bl	800ed36 <strchr>
 8002acc:	0003      	movs	r3, r0
 8002ace:	24b8      	movs	r4, #184	; 0xb8
 8002ad0:	2208      	movs	r2, #8
 8002ad2:	18a1      	adds	r1, r4, r2
 8002ad4:	19c9      	adds	r1, r1, r7
 8002ad6:	600b      	str	r3, [r1, #0]
			ind2=strchr(nmeaResponse[sen],'*');
 8002ad8:	0011      	movs	r1, r2
 8002ada:	186b      	adds	r3, r5, r1
 8002adc:	19db      	adds	r3, r3, r7
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	0032      	movs	r2, r6
 8002ae2:	4353      	muls	r3, r2
 8002ae4:	22cc      	movs	r2, #204	; 0xcc
 8002ae6:	000d      	movs	r5, r1
 8002ae8:	1852      	adds	r2, r2, r1
 8002aea:	19d2      	adds	r2, r2, r7
 8002aec:	6812      	ldr	r2, [r2, #0]
 8002aee:	18d3      	adds	r3, r2, r3
 8002af0:	212a      	movs	r1, #42	; 0x2a
 8002af2:	0018      	movs	r0, r3
 8002af4:	f00c f91f 	bl	800ed36 <strchr>
 8002af8:	0003      	movs	r3, r0
 8002afa:	21b4      	movs	r1, #180	; 0xb4
 8002afc:	194a      	adds	r2, r1, r5
 8002afe:	19d2      	adds	r2, r2, r7
 8002b00:	6013      	str	r3, [r2, #0]

			if(ind1!=NULL && ind2!=NULL){
 8002b02:	1963      	adds	r3, r4, r5
 8002b04:	19da      	adds	r2, r3, r7
 8002b06:	6813      	ldr	r3, [r2, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d100      	bne.n	8002b0e <nmea_parser+0x156>
 8002b0c:	e08a      	b.n	8002c24 <nmea_parser+0x26c>
 8002b0e:	194b      	adds	r3, r1, r5
 8002b10:	19da      	adds	r2, r3, r7
 8002b12:	6813      	ldr	r3, [r2, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d100      	bne.n	8002b1a <nmea_parser+0x162>
 8002b18:	e084      	b.n	8002c24 <nmea_parser+0x26c>
				uint8_t len = ind2-ind1;
 8002b1a:	194b      	adds	r3, r1, r5
 8002b1c:	19da      	adds	r2, r3, r7
 8002b1e:	6812      	ldr	r2, [r2, #0]
 8002b20:	1963      	adds	r3, r4, r5
 8002b22:	19d8      	adds	r0, r3, r7
 8002b24:	6803      	ldr	r3, [r0, #0]
 8002b26:	1ad2      	subs	r2, r2, r3
 8002b28:	20b3      	movs	r0, #179	; 0xb3
 8002b2a:	002c      	movs	r4, r5
 8002b2c:	1903      	adds	r3, r0, r4
 8002b2e:	19db      	adds	r3, r3, r7
 8002b30:	701a      	strb	r2, [r3, #0]
				gnssCRC = 0;
 8002b32:	22f5      	movs	r2, #245	; 0xf5
 8002b34:	0020      	movs	r0, r4
 8002b36:	1813      	adds	r3, r2, r0
 8002b38:	19db      	adds	r3, r3, r7
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	701a      	strb	r2, [r3, #0]
				recvCrc = hex2int(*(ind2+2)) | hex2int(*(ind2+1)) <<4;
 8002b3e:	000d      	movs	r5, r1
 8002b40:	180b      	adds	r3, r1, r0
 8002b42:	19da      	adds	r2, r3, r7
 8002b44:	6813      	ldr	r3, [r2, #0]
 8002b46:	3302      	adds	r3, #2
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	0018      	movs	r0, r3
 8002b4c:	f7ff ff02 	bl	8002954 <hex2int>
 8002b50:	0003      	movs	r3, r0
 8002b52:	b25c      	sxtb	r4, r3
 8002b54:	2108      	movs	r1, #8
 8002b56:	186b      	adds	r3, r5, r1
 8002b58:	19da      	adds	r2, r3, r7
 8002b5a:	6813      	ldr	r3, [r2, #0]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	0018      	movs	r0, r3
 8002b62:	f7ff fef7 	bl	8002954 <hex2int>
 8002b66:	0003      	movs	r3, r0
 8002b68:	011b      	lsls	r3, r3, #4
 8002b6a:	b25b      	sxtb	r3, r3
 8002b6c:	4323      	orrs	r3, r4
 8002b6e:	b25a      	sxtb	r2, r3
 8002b70:	23bf      	movs	r3, #191	; 0xbf
 8002b72:	2108      	movs	r1, #8
 8002b74:	185b      	adds	r3, r3, r1
 8002b76:	19db      	adds	r3, r3, r7
 8002b78:	701a      	strb	r2, [r3, #0]
				for(uint8_t i=0;i<len-1;i++){
 8002b7a:	23f3      	movs	r3, #243	; 0xf3
 8002b7c:	185b      	adds	r3, r3, r1
 8002b7e:	19db      	adds	r3, r3, r7
 8002b80:	2200      	movs	r2, #0
 8002b82:	701a      	strb	r2, [r3, #0]
 8002b84:	e02b      	b.n	8002bde <nmea_parser+0x226>
					rawData[i]=*(ind1+1+i);
 8002b86:	20f3      	movs	r0, #243	; 0xf3
 8002b88:	2108      	movs	r1, #8
 8002b8a:	1843      	adds	r3, r0, r1
 8002b8c:	19db      	adds	r3, r3, r7
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	3301      	adds	r3, #1
 8002b92:	22b8      	movs	r2, #184	; 0xb8
 8002b94:	1852      	adds	r2, r2, r1
 8002b96:	19d2      	adds	r2, r2, r7
 8002b98:	6812      	ldr	r2, [r2, #0]
 8002b9a:	18d2      	adds	r2, r2, r3
 8002b9c:	000d      	movs	r5, r1
 8002b9e:	1943      	adds	r3, r0, r5
 8002ba0:	19db      	adds	r3, r3, r7
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	7811      	ldrb	r1, [r2, #0]
 8002ba6:	2410      	movs	r4, #16
 8002ba8:	1962      	adds	r2, r4, r5
 8002baa:	19d2      	adds	r2, r2, r7
 8002bac:	54d1      	strb	r1, [r2, r3]
					gnssCRC ^= rawData[i];
 8002bae:	0029      	movs	r1, r5
 8002bb0:	1843      	adds	r3, r0, r1
 8002bb2:	19db      	adds	r3, r3, r7
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	000d      	movs	r5, r1
 8002bb8:	1862      	adds	r2, r4, r1
 8002bba:	19d2      	adds	r2, r2, r7
 8002bbc:	5cd1      	ldrb	r1, [r2, r3]
 8002bbe:	22f5      	movs	r2, #245	; 0xf5
 8002bc0:	002c      	movs	r4, r5
 8002bc2:	1913      	adds	r3, r2, r4
 8002bc4:	19db      	adds	r3, r3, r7
 8002bc6:	1912      	adds	r2, r2, r4
 8002bc8:	19d2      	adds	r2, r2, r7
 8002bca:	7812      	ldrb	r2, [r2, #0]
 8002bcc:	404a      	eors	r2, r1
 8002bce:	701a      	strb	r2, [r3, #0]
				for(uint8_t i=0;i<len-1;i++){
 8002bd0:	1903      	adds	r3, r0, r4
 8002bd2:	19db      	adds	r3, r3, r7
 8002bd4:	781a      	ldrb	r2, [r3, #0]
 8002bd6:	1903      	adds	r3, r0, r4
 8002bd8:	19db      	adds	r3, r3, r7
 8002bda:	3201      	adds	r2, #1
 8002bdc:	701a      	strb	r2, [r3, #0]
 8002bde:	23f3      	movs	r3, #243	; 0xf3
 8002be0:	2008      	movs	r0, #8
 8002be2:	181b      	adds	r3, r3, r0
 8002be4:	19db      	adds	r3, r3, r7
 8002be6:	781a      	ldrb	r2, [r3, #0]
 8002be8:	23b3      	movs	r3, #179	; 0xb3
 8002bea:	181b      	adds	r3, r3, r0
 8002bec:	19db      	adds	r3, r3, r7
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	dbc7      	blt.n	8002b86 <nmea_parser+0x1ce>

				}
				*checkSum = gnssCRC;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	21f5      	movs	r1, #245	; 0xf5
 8002bfa:	0004      	movs	r4, r0
 8002bfc:	190a      	adds	r2, r1, r4
 8002bfe:	19d2      	adds	r2, r2, r7
 8002c00:	7812      	ldrb	r2, [r2, #0]
 8002c02:	701a      	strb	r2, [r3, #0]
				*rCheckSum = recvCrc;
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	20bf      	movs	r0, #191	; 0xbf
 8002c08:	1902      	adds	r2, r0, r4
 8002c0a:	19d2      	adds	r2, r2, r7
 8002c0c:	7812      	ldrb	r2, [r2, #0]
 8002c0e:	701a      	strb	r2, [r3, #0]
			if(ind1!=NULL && ind2!=NULL){
 8002c10:	46c0      	nop			; (mov r8, r8)
			}
			else{
				return NULL;
			}
			if(recvCrc != gnssCRC){
 8002c12:	1903      	adds	r3, r0, r4
 8002c14:	19da      	adds	r2, r3, r7
 8002c16:	190b      	adds	r3, r1, r4
 8002c18:	19db      	adds	r3, r3, r7
 8002c1a:	7812      	ldrb	r2, [r2, #0]
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d006      	beq.n	8002c30 <nmea_parser+0x278>
 8002c22:	e002      	b.n	8002c2a <nmea_parser+0x272>
				return NULL;
 8002c24:	2300      	movs	r3, #0
 8002c26:	f000 fdc1 	bl	80037ac <nmea_parser+0xdf4>
				return NULL;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	f000 fdbe 	bl	80037ac <nmea_parser+0xdf4>
		for(uint8_t sen=0;sen<2;sen++){
 8002c30:	21f4      	movs	r1, #244	; 0xf4
 8002c32:	2008      	movs	r0, #8
 8002c34:	180b      	adds	r3, r1, r0
 8002c36:	19db      	adds	r3, r3, r7
 8002c38:	781a      	ldrb	r2, [r3, #0]
 8002c3a:	180b      	adds	r3, r1, r0
 8002c3c:	19db      	adds	r3, r3, r7
 8002c3e:	3201      	adds	r2, #1
 8002c40:	701a      	strb	r2, [r3, #0]
 8002c42:	23f4      	movs	r3, #244	; 0xf4
 8002c44:	2108      	movs	r1, #8
 8002c46:	185b      	adds	r3, r3, r1
 8002c48:	19db      	adds	r3, r3, r7
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d800      	bhi.n	8002c52 <nmea_parser+0x29a>
 8002c50:	e71d      	b.n	8002a8e <nmea_parser+0xd6>
		// }

		//data is valid. go on
		uint8_t GNGGAComma[15];
		uint8_t GNRMCComma[15];
		memset(GNGGAComma, 0, sizeof(GNGGAComma)); // for automatically-allocated arrays
 8002c52:	23a4      	movs	r3, #164	; 0xa4
 8002c54:	000c      	movs	r4, r1
 8002c56:	191b      	adds	r3, r3, r4
 8002c58:	19db      	adds	r3, r3, r7
 8002c5a:	220f      	movs	r2, #15
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	0018      	movs	r0, r3
 8002c60:	f00c f833 	bl	800ecca <memset>
		memset(GNRMCComma, 0, sizeof(GNRMCComma)); // for automatically-allocated arrays
 8002c64:	2394      	movs	r3, #148	; 0x94
 8002c66:	191b      	adds	r3, r3, r4
 8002c68:	19db      	adds	r3, r3, r7
 8002c6a:	220f      	movs	r2, #15
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	0018      	movs	r0, r3
 8002c70:	f00c f82b 	bl	800ecca <memset>


		uint8_t GNGGACInd=0;
 8002c74:	23f2      	movs	r3, #242	; 0xf2
 8002c76:	0021      	movs	r1, r4
 8002c78:	185b      	adds	r3, r3, r1
 8002c7a:	19db      	adds	r3, r3, r7
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	701a      	strb	r2, [r3, #0]
		uint8_t GNRMCCInd=0;
 8002c80:	23f1      	movs	r3, #241	; 0xf1
 8002c82:	185b      	adds	r3, r3, r1
 8002c84:	19db      	adds	r3, r3, r7
 8002c86:	2200      	movs	r2, #0
 8002c88:	701a      	strb	r2, [r3, #0]
		uint32_t latitude;
		uint32_t longitude;
		uint8_t tempDataIndex = 0;
 8002c8a:	23e7      	movs	r3, #231	; 0xe7
 8002c8c:	185b      	adds	r3, r3, r1
 8002c8e:	19db      	adds	r3, r3, r7
 8002c90:	2200      	movs	r2, #0
 8002c92:	701a      	strb	r2, [r3, #0]




		//-------store all parameter's comma
		for(uint8_t i=0;i<responseLenght;i++ ){
 8002c94:	23e6      	movs	r3, #230	; 0xe6
 8002c96:	185b      	adds	r3, r3, r1
 8002c98:	19db      	adds	r3, r3, r7
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	701a      	strb	r2, [r3, #0]
 8002c9e:	e048      	b.n	8002d32 <nmea_parser+0x37a>
			if(nmeaResponse[GNGGA][i]==44){
 8002ca0:	0032      	movs	r2, r6
 8002ca2:	23cc      	movs	r3, #204	; 0xcc
 8002ca4:	2408      	movs	r4, #8
 8002ca6:	191b      	adds	r3, r3, r4
 8002ca8:	19db      	adds	r3, r3, r7
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	189a      	adds	r2, r3, r2
 8002cae:	21e6      	movs	r1, #230	; 0xe6
 8002cb0:	190b      	adds	r3, r1, r4
 8002cb2:	19db      	adds	r3, r3, r7
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	5cd3      	ldrb	r3, [r2, r3]
 8002cb8:	2b2c      	cmp	r3, #44	; 0x2c
 8002cba:	d112      	bne.n	8002ce2 <nmea_parser+0x32a>
				GNGGAComma[GNGGACInd]=i;
 8002cbc:	20f2      	movs	r0, #242	; 0xf2
 8002cbe:	1903      	adds	r3, r0, r4
 8002cc0:	19db      	adds	r3, r3, r7
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	22a4      	movs	r2, #164	; 0xa4
 8002cc6:	1912      	adds	r2, r2, r4
 8002cc8:	19d2      	adds	r2, r2, r7
 8002cca:	1909      	adds	r1, r1, r4
 8002ccc:	19c9      	adds	r1, r1, r7
 8002cce:	7809      	ldrb	r1, [r1, #0]
 8002cd0:	54d1      	strb	r1, [r2, r3]
				GNGGACInd++;
 8002cd2:	0021      	movs	r1, r4
 8002cd4:	1843      	adds	r3, r0, r1
 8002cd6:	19db      	adds	r3, r3, r7
 8002cd8:	781a      	ldrb	r2, [r3, #0]
 8002cda:	1843      	adds	r3, r0, r1
 8002cdc:	19db      	adds	r3, r3, r7
 8002cde:	3201      	adds	r2, #1
 8002ce0:	701a      	strb	r2, [r3, #0]
			}
			if(nmeaResponse[GNRMC][i]==44){
 8002ce2:	21e6      	movs	r1, #230	; 0xe6
 8002ce4:	2408      	movs	r4, #8
 8002ce6:	190b      	adds	r3, r1, r4
 8002ce8:	19db      	adds	r3, r3, r7
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	22cc      	movs	r2, #204	; 0xcc
 8002cee:	1912      	adds	r2, r2, r4
 8002cf0:	19d2      	adds	r2, r2, r7
 8002cf2:	6812      	ldr	r2, [r2, #0]
 8002cf4:	5cd3      	ldrb	r3, [r2, r3]
 8002cf6:	2b2c      	cmp	r3, #44	; 0x2c
 8002cf8:	d112      	bne.n	8002d20 <nmea_parser+0x368>
				GNRMCComma[GNRMCCInd]=i;
 8002cfa:	20f1      	movs	r0, #241	; 0xf1
 8002cfc:	1903      	adds	r3, r0, r4
 8002cfe:	19db      	adds	r3, r3, r7
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	2294      	movs	r2, #148	; 0x94
 8002d04:	1912      	adds	r2, r2, r4
 8002d06:	19d2      	adds	r2, r2, r7
 8002d08:	1909      	adds	r1, r1, r4
 8002d0a:	19c9      	adds	r1, r1, r7
 8002d0c:	7809      	ldrb	r1, [r1, #0]
 8002d0e:	54d1      	strb	r1, [r2, r3]
				GNRMCCInd++;
 8002d10:	0021      	movs	r1, r4
 8002d12:	1843      	adds	r3, r0, r1
 8002d14:	19db      	adds	r3, r3, r7
 8002d16:	781a      	ldrb	r2, [r3, #0]
 8002d18:	1843      	adds	r3, r0, r1
 8002d1a:	19db      	adds	r3, r3, r7
 8002d1c:	3201      	adds	r2, #1
 8002d1e:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0;i<responseLenght;i++ ){
 8002d20:	21e6      	movs	r1, #230	; 0xe6
 8002d22:	2008      	movs	r0, #8
 8002d24:	180b      	adds	r3, r1, r0
 8002d26:	19db      	adds	r3, r3, r7
 8002d28:	781a      	ldrb	r2, [r3, #0]
 8002d2a:	180b      	adds	r3, r1, r0
 8002d2c:	19db      	adds	r3, r3, r7
 8002d2e:	3201      	adds	r2, #1
 8002d30:	701a      	strb	r2, [r3, #0]
 8002d32:	23e6      	movs	r3, #230	; 0xe6
 8002d34:	2108      	movs	r1, #8
 8002d36:	185b      	adds	r3, r3, r1
 8002d38:	19da      	adds	r2, r3, r7
 8002d3a:	230b      	movs	r3, #11
 8002d3c:	185b      	adds	r3, r3, r1
 8002d3e:	19db      	adds	r3, r3, r7
 8002d40:	7812      	ldrb	r2, [r2, #0]
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d3ab      	bcc.n	8002ca0 <nmea_parser+0x2e8>
			}
		}

		//------------------------Time and date Stamp------------------------------------
		memset(tempData,0,sizeof(tempData));
 8002d48:	2384      	movs	r3, #132	; 0x84
 8002d4a:	000c      	movs	r4, r1
 8002d4c:	185b      	adds	r3, r3, r1
 8002d4e:	19db      	adds	r3, r3, r7
 8002d50:	220f      	movs	r2, #15
 8002d52:	2100      	movs	r1, #0
 8002d54:	0018      	movs	r0, r3
 8002d56:	f00b ffb8 	bl	800ecca <memset>
		tempDataIndex = 0;
 8002d5a:	23e7      	movs	r3, #231	; 0xe7
 8002d5c:	0021      	movs	r1, r4
 8002d5e:	185b      	adds	r3, r3, r1
 8002d60:	19db      	adds	r3, r3, r7
 8002d62:	2200      	movs	r2, #0
 8002d64:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[8]+1;x<GNRMCComma[9];x++){
 8002d66:	2394      	movs	r3, #148	; 0x94
 8002d68:	185b      	adds	r3, r3, r1
 8002d6a:	19db      	adds	r3, r3, r7
 8002d6c:	7a1a      	ldrb	r2, [r3, #8]
 8002d6e:	23e5      	movs	r3, #229	; 0xe5
 8002d70:	185b      	adds	r3, r3, r1
 8002d72:	19db      	adds	r3, r3, r7
 8002d74:	3201      	adds	r2, #1
 8002d76:	701a      	strb	r2, [r3, #0]
 8002d78:	e025      	b.n	8002dc6 <nmea_parser+0x40e>
 8002d7a:	46c0      	nop			; (mov r8, r8)
 8002d7c:	08013160 	.word	0x08013160
 8002d80:	08013168 	.word	0x08013168
			tempData[tempDataIndex]= nmeaResponse[GNRMC][x];
 8002d84:	20e5      	movs	r0, #229	; 0xe5
 8002d86:	2508      	movs	r5, #8
 8002d88:	1943      	adds	r3, r0, r5
 8002d8a:	19db      	adds	r3, r3, r7
 8002d8c:	781a      	ldrb	r2, [r3, #0]
 8002d8e:	24e7      	movs	r4, #231	; 0xe7
 8002d90:	1963      	adds	r3, r4, r5
 8002d92:	19db      	adds	r3, r3, r7
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	21cc      	movs	r1, #204	; 0xcc
 8002d98:	1949      	adds	r1, r1, r5
 8002d9a:	19c9      	adds	r1, r1, r7
 8002d9c:	6809      	ldr	r1, [r1, #0]
 8002d9e:	5c89      	ldrb	r1, [r1, r2]
 8002da0:	2284      	movs	r2, #132	; 0x84
 8002da2:	1952      	adds	r2, r2, r5
 8002da4:	19d2      	adds	r2, r2, r7
 8002da6:	54d1      	strb	r1, [r2, r3]
			tempDataIndex++;
 8002da8:	0029      	movs	r1, r5
 8002daa:	1863      	adds	r3, r4, r1
 8002dac:	19db      	adds	r3, r3, r7
 8002dae:	781a      	ldrb	r2, [r3, #0]
 8002db0:	1863      	adds	r3, r4, r1
 8002db2:	19db      	adds	r3, r3, r7
 8002db4:	3201      	adds	r2, #1
 8002db6:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[8]+1;x<GNRMCComma[9];x++){
 8002db8:	1843      	adds	r3, r0, r1
 8002dba:	19db      	adds	r3, r3, r7
 8002dbc:	781a      	ldrb	r2, [r3, #0]
 8002dbe:	1843      	adds	r3, r0, r1
 8002dc0:	19db      	adds	r3, r3, r7
 8002dc2:	3201      	adds	r2, #1
 8002dc4:	701a      	strb	r2, [r3, #0]
 8002dc6:	2394      	movs	r3, #148	; 0x94
 8002dc8:	2008      	movs	r0, #8
 8002dca:	181b      	adds	r3, r3, r0
 8002dcc:	19db      	adds	r3, r3, r7
 8002dce:	7a5b      	ldrb	r3, [r3, #9]
 8002dd0:	22e5      	movs	r2, #229	; 0xe5
 8002dd2:	1812      	adds	r2, r2, r0
 8002dd4:	19d2      	adds	r2, r2, r7
 8002dd6:	7812      	ldrb	r2, [r2, #0]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d3d3      	bcc.n	8002d84 <nmea_parser+0x3cc>
		}
		char tempData2[4];

		//Year (1 byte)
		memset(tempData2,0,sizeof(tempData2));
 8002ddc:	2480      	movs	r4, #128	; 0x80
 8002dde:	1823      	adds	r3, r4, r0
 8002de0:	19db      	adds	r3, r3, r7
 8002de2:	2204      	movs	r2, #4
 8002de4:	2100      	movs	r1, #0
 8002de6:	0018      	movs	r0, r3
 8002de8:	f00b ff6f 	bl	800ecca <memset>
		tempData2[0]=tempData[4];
 8002dec:	2584      	movs	r5, #132	; 0x84
 8002dee:	2008      	movs	r0, #8
 8002df0:	182b      	adds	r3, r5, r0
 8002df2:	19db      	adds	r3, r3, r7
 8002df4:	791a      	ldrb	r2, [r3, #4]
 8002df6:	0021      	movs	r1, r4
 8002df8:	180b      	adds	r3, r1, r0
 8002dfa:	19db      	adds	r3, r3, r7
 8002dfc:	701a      	strb	r2, [r3, #0]
		tempData2[1]=tempData[5];
 8002dfe:	182b      	adds	r3, r5, r0
 8002e00:	19db      	adds	r3, r3, r7
 8002e02:	795a      	ldrb	r2, [r3, #5]
 8002e04:	000c      	movs	r4, r1
 8002e06:	1823      	adds	r3, r4, r0
 8002e08:	19db      	adds	r3, r3, r7
 8002e0a:	705a      	strb	r2, [r3, #1]
		GPSInformation[0] = (uint8_t)atoi(tempData2);
 8002e0c:	1823      	adds	r3, r4, r0
 8002e0e:	19db      	adds	r3, r3, r7
 8002e10:	0018      	movs	r0, r3
 8002e12:	f00b fefb 	bl	800ec0c <atoi>
 8002e16:	0003      	movs	r3, r0
 8002e18:	b2da      	uxtb	r2, r3
 8002e1a:	4bd8      	ldr	r3, [pc, #864]	; (800317c <nmea_parser+0x7c4>)
 8002e1c:	701a      	strb	r2, [r3, #0]

		//month (1 byte)
		memset(tempData2,0,sizeof(tempData2));
 8002e1e:	2008      	movs	r0, #8
 8002e20:	1823      	adds	r3, r4, r0
 8002e22:	19db      	adds	r3, r3, r7
 8002e24:	2204      	movs	r2, #4
 8002e26:	2100      	movs	r1, #0
 8002e28:	0018      	movs	r0, r3
 8002e2a:	f00b ff4e 	bl	800ecca <memset>
		tempData2[0]=tempData[2];
 8002e2e:	2008      	movs	r0, #8
 8002e30:	182b      	adds	r3, r5, r0
 8002e32:	19db      	adds	r3, r3, r7
 8002e34:	789a      	ldrb	r2, [r3, #2]
 8002e36:	0021      	movs	r1, r4
 8002e38:	180b      	adds	r3, r1, r0
 8002e3a:	19db      	adds	r3, r3, r7
 8002e3c:	701a      	strb	r2, [r3, #0]
		tempData2[1]=tempData[3];
 8002e3e:	182b      	adds	r3, r5, r0
 8002e40:	19db      	adds	r3, r3, r7
 8002e42:	78da      	ldrb	r2, [r3, #3]
 8002e44:	000c      	movs	r4, r1
 8002e46:	1823      	adds	r3, r4, r0
 8002e48:	19db      	adds	r3, r3, r7
 8002e4a:	705a      	strb	r2, [r3, #1]
		GPSInformation[1] = atoi(tempData2);
 8002e4c:	1823      	adds	r3, r4, r0
 8002e4e:	19db      	adds	r3, r3, r7
 8002e50:	0018      	movs	r0, r3
 8002e52:	f00b fedb 	bl	800ec0c <atoi>
 8002e56:	0003      	movs	r3, r0
 8002e58:	b2da      	uxtb	r2, r3
 8002e5a:	4bc8      	ldr	r3, [pc, #800]	; (800317c <nmea_parser+0x7c4>)
 8002e5c:	705a      	strb	r2, [r3, #1]
		//day (1 byte)
		memset(tempData2,0,sizeof(tempData2));
 8002e5e:	2008      	movs	r0, #8
 8002e60:	1823      	adds	r3, r4, r0
 8002e62:	19db      	adds	r3, r3, r7
 8002e64:	2204      	movs	r2, #4
 8002e66:	2100      	movs	r1, #0
 8002e68:	0018      	movs	r0, r3
 8002e6a:	f00b ff2e 	bl	800ecca <memset>
		tempData2[0]=tempData[0];
 8002e6e:	2008      	movs	r0, #8
 8002e70:	182b      	adds	r3, r5, r0
 8002e72:	19db      	adds	r3, r3, r7
 8002e74:	781a      	ldrb	r2, [r3, #0]
 8002e76:	0021      	movs	r1, r4
 8002e78:	0004      	movs	r4, r0
 8002e7a:	190b      	adds	r3, r1, r4
 8002e7c:	19db      	adds	r3, r3, r7
 8002e7e:	701a      	strb	r2, [r3, #0]
		tempData2[1]=tempData[1];
 8002e80:	192b      	adds	r3, r5, r4
 8002e82:	19db      	adds	r3, r3, r7
 8002e84:	785a      	ldrb	r2, [r3, #1]
 8002e86:	190b      	adds	r3, r1, r4
 8002e88:	19db      	adds	r3, r3, r7
 8002e8a:	705a      	strb	r2, [r3, #1]
		GPSInformation[2] = atoi(tempData2);
 8002e8c:	190b      	adds	r3, r1, r4
 8002e8e:	19db      	adds	r3, r3, r7
 8002e90:	0018      	movs	r0, r3
 8002e92:	f00b febb 	bl	800ec0c <atoi>
 8002e96:	0003      	movs	r3, r0
 8002e98:	b2da      	uxtb	r2, r3
 8002e9a:	4bb8      	ldr	r3, [pc, #736]	; (800317c <nmea_parser+0x7c4>)
 8002e9c:	709a      	strb	r2, [r3, #2]

		memset(tempData,0,sizeof(tempData));
 8002e9e:	192b      	adds	r3, r5, r4
 8002ea0:	19db      	adds	r3, r3, r7
 8002ea2:	220f      	movs	r2, #15
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	f00b ff0f 	bl	800ecca <memset>
		tempDataIndex = 0;
 8002eac:	22e7      	movs	r2, #231	; 0xe7
 8002eae:	1913      	adds	r3, r2, r4
 8002eb0:	19db      	adds	r3, r3, r7
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[0]+1;x<GNRMCComma[1]-4;x++){
 8002eb6:	2394      	movs	r3, #148	; 0x94
 8002eb8:	191b      	adds	r3, r3, r4
 8002eba:	19db      	adds	r3, r3, r7
 8002ebc:	781a      	ldrb	r2, [r3, #0]
 8002ebe:	23e4      	movs	r3, #228	; 0xe4
 8002ec0:	191b      	adds	r3, r3, r4
 8002ec2:	19db      	adds	r3, r3, r7
 8002ec4:	3201      	adds	r2, #1
 8002ec6:	701a      	strb	r2, [r3, #0]
 8002ec8:	e020      	b.n	8002f0c <nmea_parser+0x554>
			tempData[tempDataIndex]= nmeaResponse[GNRMC][x];
 8002eca:	20e4      	movs	r0, #228	; 0xe4
 8002ecc:	2508      	movs	r5, #8
 8002ece:	1943      	adds	r3, r0, r5
 8002ed0:	19db      	adds	r3, r3, r7
 8002ed2:	781a      	ldrb	r2, [r3, #0]
 8002ed4:	24e7      	movs	r4, #231	; 0xe7
 8002ed6:	1963      	adds	r3, r4, r5
 8002ed8:	19db      	adds	r3, r3, r7
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	21cc      	movs	r1, #204	; 0xcc
 8002ede:	1949      	adds	r1, r1, r5
 8002ee0:	19c9      	adds	r1, r1, r7
 8002ee2:	6809      	ldr	r1, [r1, #0]
 8002ee4:	5c89      	ldrb	r1, [r1, r2]
 8002ee6:	2284      	movs	r2, #132	; 0x84
 8002ee8:	1952      	adds	r2, r2, r5
 8002eea:	19d2      	adds	r2, r2, r7
 8002eec:	54d1      	strb	r1, [r2, r3]
			tempDataIndex++;
 8002eee:	0029      	movs	r1, r5
 8002ef0:	1863      	adds	r3, r4, r1
 8002ef2:	19db      	adds	r3, r3, r7
 8002ef4:	781a      	ldrb	r2, [r3, #0]
 8002ef6:	1863      	adds	r3, r4, r1
 8002ef8:	19db      	adds	r3, r3, r7
 8002efa:	3201      	adds	r2, #1
 8002efc:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[0]+1;x<GNRMCComma[1]-4;x++){
 8002efe:	1843      	adds	r3, r0, r1
 8002f00:	19db      	adds	r3, r3, r7
 8002f02:	781a      	ldrb	r2, [r3, #0]
 8002f04:	1843      	adds	r3, r0, r1
 8002f06:	19db      	adds	r3, r3, r7
 8002f08:	3201      	adds	r2, #1
 8002f0a:	701a      	strb	r2, [r3, #0]
 8002f0c:	23e4      	movs	r3, #228	; 0xe4
 8002f0e:	2108      	movs	r1, #8
 8002f10:	185b      	adds	r3, r3, r1
 8002f12:	19db      	adds	r3, r3, r7
 8002f14:	781a      	ldrb	r2, [r3, #0]
 8002f16:	2394      	movs	r3, #148	; 0x94
 8002f18:	185b      	adds	r3, r3, r1
 8002f1a:	19db      	adds	r3, r3, r7
 8002f1c:	785b      	ldrb	r3, [r3, #1]
 8002f1e:	3b04      	subs	r3, #4
 8002f20:	429a      	cmp	r2, r3
 8002f22:	dbd2      	blt.n	8002eca <nmea_parser+0x512>
		}
		//hour(1 byte)
		memset(tempData2,0,sizeof(tempData2));
 8002f24:	2480      	movs	r4, #128	; 0x80
 8002f26:	1863      	adds	r3, r4, r1
 8002f28:	19db      	adds	r3, r3, r7
 8002f2a:	2204      	movs	r2, #4
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	0018      	movs	r0, r3
 8002f30:	f00b fecb 	bl	800ecca <memset>
		tempData2[0]=tempData[0];
 8002f34:	2584      	movs	r5, #132	; 0x84
 8002f36:	2008      	movs	r0, #8
 8002f38:	182b      	adds	r3, r5, r0
 8002f3a:	19db      	adds	r3, r3, r7
 8002f3c:	781a      	ldrb	r2, [r3, #0]
 8002f3e:	0021      	movs	r1, r4
 8002f40:	180b      	adds	r3, r1, r0
 8002f42:	19db      	adds	r3, r3, r7
 8002f44:	701a      	strb	r2, [r3, #0]
		tempData2[1]=tempData[1];
 8002f46:	182b      	adds	r3, r5, r0
 8002f48:	19db      	adds	r3, r3, r7
 8002f4a:	785a      	ldrb	r2, [r3, #1]
 8002f4c:	000c      	movs	r4, r1
 8002f4e:	1823      	adds	r3, r4, r0
 8002f50:	19db      	adds	r3, r3, r7
 8002f52:	705a      	strb	r2, [r3, #1]
		GPSInformation[3] = (uint8_t)atoi(tempData2);
 8002f54:	1823      	adds	r3, r4, r0
 8002f56:	19db      	adds	r3, r3, r7
 8002f58:	0018      	movs	r0, r3
 8002f5a:	f00b fe57 	bl	800ec0c <atoi>
 8002f5e:	0003      	movs	r3, r0
 8002f60:	b2da      	uxtb	r2, r3
 8002f62:	4b86      	ldr	r3, [pc, #536]	; (800317c <nmea_parser+0x7c4>)
 8002f64:	70da      	strb	r2, [r3, #3]
		//minutes(1 byte)
		memset(tempData2,0,sizeof(tempData2));
 8002f66:	2008      	movs	r0, #8
 8002f68:	1823      	adds	r3, r4, r0
 8002f6a:	19db      	adds	r3, r3, r7
 8002f6c:	2204      	movs	r2, #4
 8002f6e:	2100      	movs	r1, #0
 8002f70:	0018      	movs	r0, r3
 8002f72:	f00b feaa 	bl	800ecca <memset>
		tempData2[0]=tempData[2];
 8002f76:	2008      	movs	r0, #8
 8002f78:	182b      	adds	r3, r5, r0
 8002f7a:	19db      	adds	r3, r3, r7
 8002f7c:	789a      	ldrb	r2, [r3, #2]
 8002f7e:	0021      	movs	r1, r4
 8002f80:	180b      	adds	r3, r1, r0
 8002f82:	19db      	adds	r3, r3, r7
 8002f84:	701a      	strb	r2, [r3, #0]
		tempData2[1]=tempData[3];
 8002f86:	182b      	adds	r3, r5, r0
 8002f88:	19db      	adds	r3, r3, r7
 8002f8a:	78da      	ldrb	r2, [r3, #3]
 8002f8c:	000c      	movs	r4, r1
 8002f8e:	1823      	adds	r3, r4, r0
 8002f90:	19db      	adds	r3, r3, r7
 8002f92:	705a      	strb	r2, [r3, #1]
		GPSInformation[4] = (uint8_t)atoi(tempData2);
 8002f94:	1823      	adds	r3, r4, r0
 8002f96:	19db      	adds	r3, r3, r7
 8002f98:	0018      	movs	r0, r3
 8002f9a:	f00b fe37 	bl	800ec0c <atoi>
 8002f9e:	0003      	movs	r3, r0
 8002fa0:	b2da      	uxtb	r2, r3
 8002fa2:	4b76      	ldr	r3, [pc, #472]	; (800317c <nmea_parser+0x7c4>)
 8002fa4:	711a      	strb	r2, [r3, #4]
		//seconds(1 byte)
		memset(tempData2,0,sizeof(tempData2));
 8002fa6:	2008      	movs	r0, #8
 8002fa8:	1823      	adds	r3, r4, r0
 8002faa:	19db      	adds	r3, r3, r7
 8002fac:	2204      	movs	r2, #4
 8002fae:	2100      	movs	r1, #0
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	f00b fe8a 	bl	800ecca <memset>
		tempData2[0]=tempData[4];
 8002fb6:	2008      	movs	r0, #8
 8002fb8:	182b      	adds	r3, r5, r0
 8002fba:	19db      	adds	r3, r3, r7
 8002fbc:	791a      	ldrb	r2, [r3, #4]
 8002fbe:	0021      	movs	r1, r4
 8002fc0:	0004      	movs	r4, r0
 8002fc2:	190b      	adds	r3, r1, r4
 8002fc4:	19db      	adds	r3, r3, r7
 8002fc6:	701a      	strb	r2, [r3, #0]
		tempData2[1]=tempData[5];
 8002fc8:	192b      	adds	r3, r5, r4
 8002fca:	19db      	adds	r3, r3, r7
 8002fcc:	795a      	ldrb	r2, [r3, #5]
 8002fce:	190b      	adds	r3, r1, r4
 8002fd0:	19db      	adds	r3, r3, r7
 8002fd2:	705a      	strb	r2, [r3, #1]
		GPSInformation[5] = (uint8_t)atoi(tempData2);
 8002fd4:	190b      	adds	r3, r1, r4
 8002fd6:	19db      	adds	r3, r3, r7
 8002fd8:	0018      	movs	r0, r3
 8002fda:	f00b fe17 	bl	800ec0c <atoi>
 8002fde:	0003      	movs	r3, r0
 8002fe0:	b2da      	uxtb	r2, r3
 8002fe2:	4b66      	ldr	r3, [pc, #408]	; (800317c <nmea_parser+0x7c4>)
 8002fe4:	715a      	strb	r2, [r3, #5]
		//--------------------------------time/date stamp end-------------------------------------------------

		//-----Quantity of GPS information satellites(1 byte, left 4 bit for gps info len, right 4 bit for qty of sats)
		memset(tempData,0,sizeof(tempData));
 8002fe6:	192b      	adds	r3, r5, r4
 8002fe8:	19db      	adds	r3, r3, r7
 8002fea:	220f      	movs	r2, #15
 8002fec:	2100      	movs	r1, #0
 8002fee:	0018      	movs	r0, r3
 8002ff0:	f00b fe6b 	bl	800ecca <memset>
		tempDataIndex = 0;
 8002ff4:	23e7      	movs	r3, #231	; 0xe7
 8002ff6:	191b      	adds	r3, r3, r4
 8002ff8:	19db      	adds	r3, r3, r7
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNGGAComma[6]+1;x<GNGGAComma[7];x++){
 8002ffe:	23a4      	movs	r3, #164	; 0xa4
 8003000:	191b      	adds	r3, r3, r4
 8003002:	19db      	adds	r3, r3, r7
 8003004:	799a      	ldrb	r2, [r3, #6]
 8003006:	23e3      	movs	r3, #227	; 0xe3
 8003008:	191b      	adds	r3, r3, r4
 800300a:	19db      	adds	r3, r3, r7
 800300c:	3201      	adds	r2, #1
 800300e:	701a      	strb	r2, [r3, #0]
 8003010:	e022      	b.n	8003058 <nmea_parser+0x6a0>
			tempData[tempDataIndex] = nmeaResponse[GNGGA][x];
 8003012:	0032      	movs	r2, r6
 8003014:	23cc      	movs	r3, #204	; 0xcc
 8003016:	2508      	movs	r5, #8
 8003018:	195b      	adds	r3, r3, r5
 800301a:	19db      	adds	r3, r3, r7
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	1899      	adds	r1, r3, r2
 8003020:	20e3      	movs	r0, #227	; 0xe3
 8003022:	1943      	adds	r3, r0, r5
 8003024:	19db      	adds	r3, r3, r7
 8003026:	781a      	ldrb	r2, [r3, #0]
 8003028:	24e7      	movs	r4, #231	; 0xe7
 800302a:	1963      	adds	r3, r4, r5
 800302c:	19db      	adds	r3, r3, r7
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	5c89      	ldrb	r1, [r1, r2]
 8003032:	2284      	movs	r2, #132	; 0x84
 8003034:	1952      	adds	r2, r2, r5
 8003036:	19d2      	adds	r2, r2, r7
 8003038:	54d1      	strb	r1, [r2, r3]
			tempDataIndex++;
 800303a:	0029      	movs	r1, r5
 800303c:	1863      	adds	r3, r4, r1
 800303e:	19db      	adds	r3, r3, r7
 8003040:	781a      	ldrb	r2, [r3, #0]
 8003042:	1863      	adds	r3, r4, r1
 8003044:	19db      	adds	r3, r3, r7
 8003046:	3201      	adds	r2, #1
 8003048:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNGGAComma[6]+1;x<GNGGAComma[7];x++){
 800304a:	1843      	adds	r3, r0, r1
 800304c:	19db      	adds	r3, r3, r7
 800304e:	781a      	ldrb	r2, [r3, #0]
 8003050:	1843      	adds	r3, r0, r1
 8003052:	19db      	adds	r3, r3, r7
 8003054:	3201      	adds	r2, #1
 8003056:	701a      	strb	r2, [r3, #0]
 8003058:	23a4      	movs	r3, #164	; 0xa4
 800305a:	2508      	movs	r5, #8
 800305c:	195b      	adds	r3, r3, r5
 800305e:	19db      	adds	r3, r3, r7
 8003060:	79db      	ldrb	r3, [r3, #7]
 8003062:	22e3      	movs	r2, #227	; 0xe3
 8003064:	1952      	adds	r2, r2, r5
 8003066:	19d2      	adds	r2, r2, r7
 8003068:	7812      	ldrb	r2, [r2, #0]
 800306a:	429a      	cmp	r2, r3
 800306c:	d3d1      	bcc.n	8003012 <nmea_parser+0x65a>
		}
		QOG |= (atoi(tempData));
 800306e:	2484      	movs	r4, #132	; 0x84
 8003070:	1963      	adds	r3, r4, r5
 8003072:	19db      	adds	r3, r3, r7
 8003074:	0018      	movs	r0, r3
 8003076:	f00b fdc9 	bl	800ec0c <atoi>
 800307a:	0003      	movs	r3, r0
 800307c:	b25a      	sxtb	r2, r3
 800307e:	21cb      	movs	r1, #203	; 0xcb
 8003080:	0028      	movs	r0, r5
 8003082:	180b      	adds	r3, r1, r0
 8003084:	19db      	adds	r3, r3, r7
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	b25b      	sxtb	r3, r3
 800308a:	4313      	orrs	r3, r2
 800308c:	b25a      	sxtb	r2, r3
 800308e:	180b      	adds	r3, r1, r0
 8003090:	19db      	adds	r3, r3, r7
 8003092:	701a      	strb	r2, [r3, #0]
		GPSInformation[6] = QOG;
 8003094:	4b39      	ldr	r3, [pc, #228]	; (800317c <nmea_parser+0x7c4>)
 8003096:	180a      	adds	r2, r1, r0
 8003098:	19d2      	adds	r2, r2, r7
 800309a:	7812      	ldrb	r2, [r2, #0]
 800309c:	719a      	strb	r2, [r3, #6]
		//-------------------------------------QOG END------------------------------------------------------


		//------------------------------------latitude (4 bytes)--------------------------------------
		// char *ptr1;
		memset(tempData,0,sizeof(tempData));
 800309e:	0005      	movs	r5, r0
 80030a0:	1823      	adds	r3, r4, r0
 80030a2:	19db      	adds	r3, r3, r7
 80030a4:	220f      	movs	r2, #15
 80030a6:	2100      	movs	r1, #0
 80030a8:	0018      	movs	r0, r3
 80030aa:	f00b fe0e 	bl	800ecca <memset>
		memset(tempData2,0,sizeof(tempData2));
 80030ae:	2380      	movs	r3, #128	; 0x80
 80030b0:	002c      	movs	r4, r5
 80030b2:	191b      	adds	r3, r3, r4
 80030b4:	19db      	adds	r3, r3, r7
 80030b6:	2204      	movs	r2, #4
 80030b8:	2100      	movs	r1, #0
 80030ba:	0018      	movs	r0, r3
 80030bc:	f00b fe05 	bl	800ecca <memset>
		tempDataIndex = 0;
 80030c0:	23e7      	movs	r3, #231	; 0xe7
 80030c2:	0021      	movs	r1, r4
 80030c4:	185b      	adds	r3, r3, r1
 80030c6:	19db      	adds	r3, r3, r7
 80030c8:	2200      	movs	r2, #0
 80030ca:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[2]+1;x<GNRMCComma[3];x++){
 80030cc:	2394      	movs	r3, #148	; 0x94
 80030ce:	185b      	adds	r3, r3, r1
 80030d0:	19db      	adds	r3, r3, r7
 80030d2:	789a      	ldrb	r2, [r3, #2]
 80030d4:	23e2      	movs	r3, #226	; 0xe2
 80030d6:	185b      	adds	r3, r3, r1
 80030d8:	19db      	adds	r3, r3, r7
 80030da:	3201      	adds	r2, #1
 80030dc:	701a      	strb	r2, [r3, #0]
 80030de:	e020      	b.n	8003122 <nmea_parser+0x76a>
			tempData[tempDataIndex]= nmeaResponse[GNRMC][x];
 80030e0:	20e2      	movs	r0, #226	; 0xe2
 80030e2:	2508      	movs	r5, #8
 80030e4:	1943      	adds	r3, r0, r5
 80030e6:	19db      	adds	r3, r3, r7
 80030e8:	781a      	ldrb	r2, [r3, #0]
 80030ea:	24e7      	movs	r4, #231	; 0xe7
 80030ec:	1963      	adds	r3, r4, r5
 80030ee:	19db      	adds	r3, r3, r7
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	21cc      	movs	r1, #204	; 0xcc
 80030f4:	1949      	adds	r1, r1, r5
 80030f6:	19c9      	adds	r1, r1, r7
 80030f8:	6809      	ldr	r1, [r1, #0]
 80030fa:	5c89      	ldrb	r1, [r1, r2]
 80030fc:	2284      	movs	r2, #132	; 0x84
 80030fe:	1952      	adds	r2, r2, r5
 8003100:	19d2      	adds	r2, r2, r7
 8003102:	54d1      	strb	r1, [r2, r3]
			tempDataIndex++;
 8003104:	0029      	movs	r1, r5
 8003106:	1863      	adds	r3, r4, r1
 8003108:	19db      	adds	r3, r3, r7
 800310a:	781a      	ldrb	r2, [r3, #0]
 800310c:	1863      	adds	r3, r4, r1
 800310e:	19db      	adds	r3, r3, r7
 8003110:	3201      	adds	r2, #1
 8003112:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[2]+1;x<GNRMCComma[3];x++){
 8003114:	1843      	adds	r3, r0, r1
 8003116:	19db      	adds	r3, r3, r7
 8003118:	781a      	ldrb	r2, [r3, #0]
 800311a:	1843      	adds	r3, r0, r1
 800311c:	19db      	adds	r3, r3, r7
 800311e:	3201      	adds	r2, #1
 8003120:	701a      	strb	r2, [r3, #0]
 8003122:	2394      	movs	r3, #148	; 0x94
 8003124:	2408      	movs	r4, #8
 8003126:	191b      	adds	r3, r3, r4
 8003128:	19db      	adds	r3, r3, r7
 800312a:	78db      	ldrb	r3, [r3, #3]
 800312c:	22e2      	movs	r2, #226	; 0xe2
 800312e:	1912      	adds	r2, r2, r4
 8003130:	19d2      	adds	r2, r2, r7
 8003132:	7812      	ldrb	r2, [r2, #0]
 8003134:	429a      	cmp	r2, r3
 8003136:	d3d3      	bcc.n	80030e0 <nmea_parser+0x728>
		}
		tempData2[0]=tempData[0];
 8003138:	2184      	movs	r1, #132	; 0x84
 800313a:	190b      	adds	r3, r1, r4
 800313c:	19db      	adds	r3, r3, r7
 800313e:	781a      	ldrb	r2, [r3, #0]
 8003140:	2080      	movs	r0, #128	; 0x80
 8003142:	1903      	adds	r3, r0, r4
 8003144:	19db      	adds	r3, r3, r7
 8003146:	701a      	strb	r2, [r3, #0]
		tempData2[1]=tempData[1];
 8003148:	190b      	adds	r3, r1, r4
 800314a:	19db      	adds	r3, r3, r7
 800314c:	785a      	ldrb	r2, [r3, #1]
 800314e:	0021      	movs	r1, r4
 8003150:	1843      	adds	r3, r0, r1
 8003152:	19db      	adds	r3, r3, r7
 8003154:	705a      	strb	r2, [r3, #1]
		uint8_t t1=2;
 8003156:	23e1      	movs	r3, #225	; 0xe1
 8003158:	185b      	adds	r3, r3, r1
 800315a:	19db      	adds	r3, r3, r7
 800315c:	2202      	movs	r2, #2
 800315e:	701a      	strb	r2, [r3, #0]
		uint8_t t2=0;
 8003160:	23e0      	movs	r3, #224	; 0xe0
 8003162:	185b      	adds	r3, r3, r1
 8003164:	19db      	adds	r3, r3, r7
 8003166:	2200      	movs	r2, #0
 8003168:	701a      	strb	r2, [r3, #0]
		char tB[9];
		memset(tB,0,sizeof(tB));
 800316a:	2374      	movs	r3, #116	; 0x74
 800316c:	185b      	adds	r3, r3, r1
 800316e:	19db      	adds	r3, r3, r7
 8003170:	2209      	movs	r2, #9
 8003172:	2100      	movs	r1, #0
 8003174:	0018      	movs	r0, r3
 8003176:	f00b fda8 	bl	800ecca <memset>
		while(tempData[t1]!=NULL){
 800317a:	e02f      	b.n	80031dc <nmea_parser+0x824>
 800317c:	200002d4 	.word	0x200002d4
			if(tempData[t1]!='.'){
 8003180:	21e1      	movs	r1, #225	; 0xe1
 8003182:	2008      	movs	r0, #8
 8003184:	180b      	adds	r3, r1, r0
 8003186:	19db      	adds	r3, r3, r7
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	2484      	movs	r4, #132	; 0x84
 800318c:	1822      	adds	r2, r4, r0
 800318e:	19d2      	adds	r2, r2, r7
 8003190:	5cd3      	ldrb	r3, [r2, r3]
 8003192:	2b2e      	cmp	r3, #46	; 0x2e
 8003194:	d019      	beq.n	80031ca <nmea_parser+0x812>
				tB[t2]=tempData[t1];
 8003196:	0005      	movs	r5, r0
 8003198:	180b      	adds	r3, r1, r0
 800319a:	19db      	adds	r3, r3, r7
 800319c:	781a      	ldrb	r2, [r3, #0]
 800319e:	20e0      	movs	r0, #224	; 0xe0
 80031a0:	0029      	movs	r1, r5
 80031a2:	1843      	adds	r3, r0, r1
 80031a4:	19db      	adds	r3, r3, r7
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	000d      	movs	r5, r1
 80031aa:	1861      	adds	r1, r4, r1
 80031ac:	19c9      	adds	r1, r1, r7
 80031ae:	5c89      	ldrb	r1, [r1, r2]
 80031b0:	2274      	movs	r2, #116	; 0x74
 80031b2:	002c      	movs	r4, r5
 80031b4:	1912      	adds	r2, r2, r4
 80031b6:	19d2      	adds	r2, r2, r7
 80031b8:	54d1      	strb	r1, [r2, r3]
				t2++;
 80031ba:	0021      	movs	r1, r4
 80031bc:	1843      	adds	r3, r0, r1
 80031be:	19db      	adds	r3, r3, r7
 80031c0:	781a      	ldrb	r2, [r3, #0]
 80031c2:	1843      	adds	r3, r0, r1
 80031c4:	19db      	adds	r3, r3, r7
 80031c6:	3201      	adds	r2, #1
 80031c8:	701a      	strb	r2, [r3, #0]
			}
			t1++;
 80031ca:	21e1      	movs	r1, #225	; 0xe1
 80031cc:	2008      	movs	r0, #8
 80031ce:	180b      	adds	r3, r1, r0
 80031d0:	19db      	adds	r3, r3, r7
 80031d2:	781a      	ldrb	r2, [r3, #0]
 80031d4:	180b      	adds	r3, r1, r0
 80031d6:	19db      	adds	r3, r3, r7
 80031d8:	3201      	adds	r2, #1
 80031da:	701a      	strb	r2, [r3, #0]
		while(tempData[t1]!=NULL){
 80031dc:	23e1      	movs	r3, #225	; 0xe1
 80031de:	2008      	movs	r0, #8
 80031e0:	181b      	adds	r3, r3, r0
 80031e2:	19db      	adds	r3, r3, r7
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	2284      	movs	r2, #132	; 0x84
 80031e8:	1812      	adds	r2, r2, r0
 80031ea:	19d2      	adds	r2, r2, r7
 80031ec:	5cd3      	ldrb	r3, [r2, r3]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1c6      	bne.n	8003180 <nmea_parser+0x7c8>
		}
		latitude=atoi(tB);
 80031f2:	2374      	movs	r3, #116	; 0x74
 80031f4:	0004      	movs	r4, r0
 80031f6:	181b      	adds	r3, r3, r0
 80031f8:	19db      	adds	r3, r3, r7
 80031fa:	0018      	movs	r0, r3
 80031fc:	f00b fd06 	bl	800ec0c <atoi>
 8003200:	0003      	movs	r3, r0
 8003202:	22ec      	movs	r2, #236	; 0xec
 8003204:	0020      	movs	r0, r4
 8003206:	1811      	adds	r1, r2, r0
 8003208:	19c9      	adds	r1, r1, r7
 800320a:	600b      	str	r3, [r1, #0]
		if(t2==4){
 800320c:	23e0      	movs	r3, #224	; 0xe0
 800320e:	181b      	adds	r3, r3, r0
 8003210:	19db      	adds	r3, r3, r7
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	2b04      	cmp	r3, #4
 8003216:	d109      	bne.n	800322c <nmea_parser+0x874>
			latitude*=100;
 8003218:	0011      	movs	r1, r2
 800321a:	1813      	adds	r3, r2, r0
 800321c:	19db      	adds	r3, r3, r7
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2264      	movs	r2, #100	; 0x64
 8003222:	4353      	muls	r3, r2
 8003224:	180a      	adds	r2, r1, r0
 8003226:	19d2      	adds	r2, r2, r7
 8003228:	6013      	str	r3, [r2, #0]
 800322a:	e011      	b.n	8003250 <nmea_parser+0x898>
		}
		else if(t2==5){
 800322c:	23e0      	movs	r3, #224	; 0xe0
 800322e:	2008      	movs	r0, #8
 8003230:	181b      	adds	r3, r3, r0
 8003232:	19db      	adds	r3, r3, r7
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	2b05      	cmp	r3, #5
 8003238:	d10a      	bne.n	8003250 <nmea_parser+0x898>
			latitude*=10;
 800323a:	21ec      	movs	r1, #236	; 0xec
 800323c:	180b      	adds	r3, r1, r0
 800323e:	19db      	adds	r3, r3, r7
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	0013      	movs	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	189b      	adds	r3, r3, r2
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	180a      	adds	r2, r1, r0
 800324c:	19d2      	adds	r2, r2, r7
 800324e:	6013      	str	r3, [r2, #0]
		}

		latitude=latitude*3;
 8003250:	24ec      	movs	r4, #236	; 0xec
 8003252:	2008      	movs	r0, #8
 8003254:	1823      	adds	r3, r4, r0
 8003256:	19db      	adds	r3, r3, r7
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	0013      	movs	r3, r2
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	189b      	adds	r3, r3, r2
 8003260:	1822      	adds	r2, r4, r0
 8003262:	19d2      	adds	r2, r2, r7
 8003264:	6013      	str	r3, [r2, #0]

		latitude+= (atoi(tempData2)*60*30000);
 8003266:	2580      	movs	r5, #128	; 0x80
 8003268:	182b      	adds	r3, r5, r0
 800326a:	19db      	adds	r3, r3, r7
 800326c:	0018      	movs	r0, r3
 800326e:	f00b fccd 	bl	800ec0c <atoi>
 8003272:	0003      	movs	r3, r0
 8003274:	4aae      	ldr	r2, [pc, #696]	; (8003530 <nmea_parser+0xb78>)
 8003276:	4353      	muls	r3, r2
 8003278:	001a      	movs	r2, r3
 800327a:	2008      	movs	r0, #8
 800327c:	1823      	adds	r3, r4, r0
 800327e:	19db      	adds	r3, r3, r7
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	189b      	adds	r3, r3, r2
 8003284:	0021      	movs	r1, r4
 8003286:	180a      	adds	r2, r1, r0
 8003288:	19d2      	adds	r2, r2, r7
 800328a:	6013      	str	r3, [r2, #0]

		GPSInformation[7] = latitude>>24;
 800328c:	180b      	adds	r3, r1, r0
 800328e:	19db      	adds	r3, r3, r7
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	0e1b      	lsrs	r3, r3, #24
 8003294:	b2da      	uxtb	r2, r3
 8003296:	4ba7      	ldr	r3, [pc, #668]	; (8003534 <nmea_parser+0xb7c>)
 8003298:	71da      	strb	r2, [r3, #7]
		GPSInformation[8] = latitude>>16;
 800329a:	180b      	adds	r3, r1, r0
 800329c:	19db      	adds	r3, r3, r7
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	0c1b      	lsrs	r3, r3, #16
 80032a2:	b2da      	uxtb	r2, r3
 80032a4:	4ba3      	ldr	r3, [pc, #652]	; (8003534 <nmea_parser+0xb7c>)
 80032a6:	721a      	strb	r2, [r3, #8]
		GPSInformation[9] = latitude>>8;
 80032a8:	180b      	adds	r3, r1, r0
 80032aa:	19db      	adds	r3, r3, r7
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	0a1b      	lsrs	r3, r3, #8
 80032b0:	b2da      	uxtb	r2, r3
 80032b2:	4ba0      	ldr	r3, [pc, #640]	; (8003534 <nmea_parser+0xb7c>)
 80032b4:	725a      	strb	r2, [r3, #9]
		GPSInformation[10] = latitude;
 80032b6:	180b      	adds	r3, r1, r0
 80032b8:	19db      	adds	r3, r3, r7
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	b2da      	uxtb	r2, r3
 80032be:	4b9d      	ldr	r3, [pc, #628]	; (8003534 <nmea_parser+0xb7c>)
 80032c0:	729a      	strb	r2, [r3, #10]



		//------------------------------------longitude (4 bytes)--------------------------------------
		// char *ptr2;
		memset(tempData,0,sizeof(tempData));
 80032c2:	2384      	movs	r3, #132	; 0x84
 80032c4:	0004      	movs	r4, r0
 80032c6:	191b      	adds	r3, r3, r4
 80032c8:	19db      	adds	r3, r3, r7
 80032ca:	220f      	movs	r2, #15
 80032cc:	2100      	movs	r1, #0
 80032ce:	0018      	movs	r0, r3
 80032d0:	f00b fcfb 	bl	800ecca <memset>
		memset(tempData2,0,sizeof(tempData2));
 80032d4:	192b      	adds	r3, r5, r4
 80032d6:	19db      	adds	r3, r3, r7
 80032d8:	2204      	movs	r2, #4
 80032da:	2100      	movs	r1, #0
 80032dc:	0018      	movs	r0, r3
 80032de:	f00b fcf4 	bl	800ecca <memset>
		tempDataIndex = 0;
 80032e2:	23e7      	movs	r3, #231	; 0xe7
 80032e4:	0020      	movs	r0, r4
 80032e6:	181b      	adds	r3, r3, r0
 80032e8:	19db      	adds	r3, r3, r7
 80032ea:	2200      	movs	r2, #0
 80032ec:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[4]+1;x<GNRMCComma[5];x++){
 80032ee:	2394      	movs	r3, #148	; 0x94
 80032f0:	181b      	adds	r3, r3, r0
 80032f2:	19db      	adds	r3, r3, r7
 80032f4:	791a      	ldrb	r2, [r3, #4]
 80032f6:	23df      	movs	r3, #223	; 0xdf
 80032f8:	181b      	adds	r3, r3, r0
 80032fa:	19db      	adds	r3, r3, r7
 80032fc:	3201      	adds	r2, #1
 80032fe:	701a      	strb	r2, [r3, #0]
 8003300:	e020      	b.n	8003344 <nmea_parser+0x98c>
			tempData[tempDataIndex]= nmeaResponse[GNRMC][x];
 8003302:	20df      	movs	r0, #223	; 0xdf
 8003304:	2508      	movs	r5, #8
 8003306:	1943      	adds	r3, r0, r5
 8003308:	19db      	adds	r3, r3, r7
 800330a:	781a      	ldrb	r2, [r3, #0]
 800330c:	24e7      	movs	r4, #231	; 0xe7
 800330e:	1963      	adds	r3, r4, r5
 8003310:	19db      	adds	r3, r3, r7
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	21cc      	movs	r1, #204	; 0xcc
 8003316:	1949      	adds	r1, r1, r5
 8003318:	19c9      	adds	r1, r1, r7
 800331a:	6809      	ldr	r1, [r1, #0]
 800331c:	5c89      	ldrb	r1, [r1, r2]
 800331e:	2284      	movs	r2, #132	; 0x84
 8003320:	1952      	adds	r2, r2, r5
 8003322:	19d2      	adds	r2, r2, r7
 8003324:	54d1      	strb	r1, [r2, r3]
			tempDataIndex++;
 8003326:	0029      	movs	r1, r5
 8003328:	1863      	adds	r3, r4, r1
 800332a:	19db      	adds	r3, r3, r7
 800332c:	781a      	ldrb	r2, [r3, #0]
 800332e:	1863      	adds	r3, r4, r1
 8003330:	19db      	adds	r3, r3, r7
 8003332:	3201      	adds	r2, #1
 8003334:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[4]+1;x<GNRMCComma[5];x++){
 8003336:	1843      	adds	r3, r0, r1
 8003338:	19db      	adds	r3, r3, r7
 800333a:	781a      	ldrb	r2, [r3, #0]
 800333c:	1843      	adds	r3, r0, r1
 800333e:	19db      	adds	r3, r3, r7
 8003340:	3201      	adds	r2, #1
 8003342:	701a      	strb	r2, [r3, #0]
 8003344:	2394      	movs	r3, #148	; 0x94
 8003346:	2408      	movs	r4, #8
 8003348:	191b      	adds	r3, r3, r4
 800334a:	19db      	adds	r3, r3, r7
 800334c:	795b      	ldrb	r3, [r3, #5]
 800334e:	22df      	movs	r2, #223	; 0xdf
 8003350:	1912      	adds	r2, r2, r4
 8003352:	19d2      	adds	r2, r2, r7
 8003354:	7812      	ldrb	r2, [r2, #0]
 8003356:	429a      	cmp	r2, r3
 8003358:	d3d3      	bcc.n	8003302 <nmea_parser+0x94a>
		}

		tempData2[0]=tempData[0];
 800335a:	2184      	movs	r1, #132	; 0x84
 800335c:	190b      	adds	r3, r1, r4
 800335e:	19db      	adds	r3, r3, r7
 8003360:	781a      	ldrb	r2, [r3, #0]
 8003362:	2080      	movs	r0, #128	; 0x80
 8003364:	1903      	adds	r3, r0, r4
 8003366:	19db      	adds	r3, r3, r7
 8003368:	701a      	strb	r2, [r3, #0]
		tempData2[1]=tempData[1];
 800336a:	190b      	adds	r3, r1, r4
 800336c:	19db      	adds	r3, r3, r7
 800336e:	785a      	ldrb	r2, [r3, #1]
 8003370:	1903      	adds	r3, r0, r4
 8003372:	19db      	adds	r3, r3, r7
 8003374:	705a      	strb	r2, [r3, #1]
		tempData2[2]=tempData[2];
 8003376:	190b      	adds	r3, r1, r4
 8003378:	19db      	adds	r3, r3, r7
 800337a:	789a      	ldrb	r2, [r3, #2]
 800337c:	0021      	movs	r1, r4
 800337e:	1843      	adds	r3, r0, r1
 8003380:	19db      	adds	r3, r3, r7
 8003382:	709a      	strb	r2, [r3, #2]
		memset(tB,0,sizeof(tB));
 8003384:	2374      	movs	r3, #116	; 0x74
 8003386:	000c      	movs	r4, r1
 8003388:	185b      	adds	r3, r3, r1
 800338a:	19db      	adds	r3, r3, r7
 800338c:	2209      	movs	r2, #9
 800338e:	2100      	movs	r1, #0
 8003390:	0018      	movs	r0, r3
 8003392:	f00b fc9a 	bl	800ecca <memset>
		t1=3;
 8003396:	23e1      	movs	r3, #225	; 0xe1
 8003398:	0021      	movs	r1, r4
 800339a:	185b      	adds	r3, r3, r1
 800339c:	19db      	adds	r3, r3, r7
 800339e:	2203      	movs	r2, #3
 80033a0:	701a      	strb	r2, [r3, #0]
		t2=0;
 80033a2:	23e0      	movs	r3, #224	; 0xe0
 80033a4:	185b      	adds	r3, r3, r1
 80033a6:	19db      	adds	r3, r3, r7
 80033a8:	2200      	movs	r2, #0
 80033aa:	701a      	strb	r2, [r3, #0]
		while(tempData[t1]!=NULL){
 80033ac:	e02d      	b.n	800340a <nmea_parser+0xa52>
			if(tempData[t1]!='.'){
 80033ae:	21e1      	movs	r1, #225	; 0xe1
 80033b0:	2008      	movs	r0, #8
 80033b2:	180b      	adds	r3, r1, r0
 80033b4:	19db      	adds	r3, r3, r7
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	2484      	movs	r4, #132	; 0x84
 80033ba:	1822      	adds	r2, r4, r0
 80033bc:	19d2      	adds	r2, r2, r7
 80033be:	5cd3      	ldrb	r3, [r2, r3]
 80033c0:	2b2e      	cmp	r3, #46	; 0x2e
 80033c2:	d019      	beq.n	80033f8 <nmea_parser+0xa40>
				tB[t2]=tempData[t1];
 80033c4:	0005      	movs	r5, r0
 80033c6:	180b      	adds	r3, r1, r0
 80033c8:	19db      	adds	r3, r3, r7
 80033ca:	781a      	ldrb	r2, [r3, #0]
 80033cc:	20e0      	movs	r0, #224	; 0xe0
 80033ce:	0029      	movs	r1, r5
 80033d0:	1843      	adds	r3, r0, r1
 80033d2:	19db      	adds	r3, r3, r7
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	000d      	movs	r5, r1
 80033d8:	1861      	adds	r1, r4, r1
 80033da:	19c9      	adds	r1, r1, r7
 80033dc:	5c89      	ldrb	r1, [r1, r2]
 80033de:	2274      	movs	r2, #116	; 0x74
 80033e0:	002c      	movs	r4, r5
 80033e2:	1912      	adds	r2, r2, r4
 80033e4:	19d2      	adds	r2, r2, r7
 80033e6:	54d1      	strb	r1, [r2, r3]
				t2++;
 80033e8:	0021      	movs	r1, r4
 80033ea:	1843      	adds	r3, r0, r1
 80033ec:	19db      	adds	r3, r3, r7
 80033ee:	781a      	ldrb	r2, [r3, #0]
 80033f0:	1843      	adds	r3, r0, r1
 80033f2:	19db      	adds	r3, r3, r7
 80033f4:	3201      	adds	r2, #1
 80033f6:	701a      	strb	r2, [r3, #0]
			}
			t1++;
 80033f8:	21e1      	movs	r1, #225	; 0xe1
 80033fa:	2008      	movs	r0, #8
 80033fc:	180b      	adds	r3, r1, r0
 80033fe:	19db      	adds	r3, r3, r7
 8003400:	781a      	ldrb	r2, [r3, #0]
 8003402:	180b      	adds	r3, r1, r0
 8003404:	19db      	adds	r3, r3, r7
 8003406:	3201      	adds	r2, #1
 8003408:	701a      	strb	r2, [r3, #0]
		while(tempData[t1]!=NULL){
 800340a:	23e1      	movs	r3, #225	; 0xe1
 800340c:	2008      	movs	r0, #8
 800340e:	181b      	adds	r3, r3, r0
 8003410:	19db      	adds	r3, r3, r7
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	2284      	movs	r2, #132	; 0x84
 8003416:	1812      	adds	r2, r2, r0
 8003418:	19d2      	adds	r2, r2, r7
 800341a:	5cd3      	ldrb	r3, [r2, r3]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1c6      	bne.n	80033ae <nmea_parser+0x9f6>
		}
		longitude=atoi(tB);
 8003420:	2374      	movs	r3, #116	; 0x74
 8003422:	0004      	movs	r4, r0
 8003424:	181b      	adds	r3, r3, r0
 8003426:	19db      	adds	r3, r3, r7
 8003428:	0018      	movs	r0, r3
 800342a:	f00b fbef 	bl	800ec0c <atoi>
 800342e:	0003      	movs	r3, r0
 8003430:	22e8      	movs	r2, #232	; 0xe8
 8003432:	0020      	movs	r0, r4
 8003434:	1811      	adds	r1, r2, r0
 8003436:	19c9      	adds	r1, r1, r7
 8003438:	600b      	str	r3, [r1, #0]
		if(t2==4){
 800343a:	23e0      	movs	r3, #224	; 0xe0
 800343c:	181b      	adds	r3, r3, r0
 800343e:	19db      	adds	r3, r3, r7
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	2b04      	cmp	r3, #4
 8003444:	d109      	bne.n	800345a <nmea_parser+0xaa2>
			longitude*=100;
 8003446:	0011      	movs	r1, r2
 8003448:	1813      	adds	r3, r2, r0
 800344a:	19db      	adds	r3, r3, r7
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2264      	movs	r2, #100	; 0x64
 8003450:	4353      	muls	r3, r2
 8003452:	180a      	adds	r2, r1, r0
 8003454:	19d2      	adds	r2, r2, r7
 8003456:	6013      	str	r3, [r2, #0]
 8003458:	e011      	b.n	800347e <nmea_parser+0xac6>
		}
		else if(t2==5){
 800345a:	23e0      	movs	r3, #224	; 0xe0
 800345c:	2008      	movs	r0, #8
 800345e:	181b      	adds	r3, r3, r0
 8003460:	19db      	adds	r3, r3, r7
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	2b05      	cmp	r3, #5
 8003466:	d10a      	bne.n	800347e <nmea_parser+0xac6>
			longitude*=10;
 8003468:	21e8      	movs	r1, #232	; 0xe8
 800346a:	180b      	adds	r3, r1, r0
 800346c:	19db      	adds	r3, r3, r7
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	0013      	movs	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	189b      	adds	r3, r3, r2
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	180a      	adds	r2, r1, r0
 800347a:	19d2      	adds	r2, r2, r7
 800347c:	6013      	str	r3, [r2, #0]
		}
		longitude=longitude*3;
 800347e:	24e8      	movs	r4, #232	; 0xe8
 8003480:	2008      	movs	r0, #8
 8003482:	1823      	adds	r3, r4, r0
 8003484:	19db      	adds	r3, r3, r7
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	0013      	movs	r3, r2
 800348a:	005b      	lsls	r3, r3, #1
 800348c:	189b      	adds	r3, r3, r2
 800348e:	1822      	adds	r2, r4, r0
 8003490:	19d2      	adds	r2, r2, r7
 8003492:	6013      	str	r3, [r2, #0]
		longitude+= (atoi(tempData2)*60*30000);
 8003494:	2580      	movs	r5, #128	; 0x80
 8003496:	182b      	adds	r3, r5, r0
 8003498:	19db      	adds	r3, r3, r7
 800349a:	0018      	movs	r0, r3
 800349c:	f00b fbb6 	bl	800ec0c <atoi>
 80034a0:	0003      	movs	r3, r0
 80034a2:	4a23      	ldr	r2, [pc, #140]	; (8003530 <nmea_parser+0xb78>)
 80034a4:	4353      	muls	r3, r2
 80034a6:	001a      	movs	r2, r3
 80034a8:	2008      	movs	r0, #8
 80034aa:	1823      	adds	r3, r4, r0
 80034ac:	19db      	adds	r3, r3, r7
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	189b      	adds	r3, r3, r2
 80034b2:	0021      	movs	r1, r4
 80034b4:	180a      	adds	r2, r1, r0
 80034b6:	19d2      	adds	r2, r2, r7
 80034b8:	6013      	str	r3, [r2, #0]
		GPSInformation[11] = longitude>>24;
 80034ba:	180b      	adds	r3, r1, r0
 80034bc:	19db      	adds	r3, r3, r7
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	0e1b      	lsrs	r3, r3, #24
 80034c2:	b2da      	uxtb	r2, r3
 80034c4:	4b1b      	ldr	r3, [pc, #108]	; (8003534 <nmea_parser+0xb7c>)
 80034c6:	72da      	strb	r2, [r3, #11]
		GPSInformation[12] = longitude>>16;
 80034c8:	180b      	adds	r3, r1, r0
 80034ca:	19db      	adds	r3, r3, r7
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	0c1b      	lsrs	r3, r3, #16
 80034d0:	b2da      	uxtb	r2, r3
 80034d2:	4b18      	ldr	r3, [pc, #96]	; (8003534 <nmea_parser+0xb7c>)
 80034d4:	731a      	strb	r2, [r3, #12]
		GPSInformation[13] = longitude>>8;
 80034d6:	180b      	adds	r3, r1, r0
 80034d8:	19db      	adds	r3, r3, r7
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	0a1b      	lsrs	r3, r3, #8
 80034de:	b2da      	uxtb	r2, r3
 80034e0:	4b14      	ldr	r3, [pc, #80]	; (8003534 <nmea_parser+0xb7c>)
 80034e2:	735a      	strb	r2, [r3, #13]
		GPSInformation[14] = longitude;
 80034e4:	180b      	adds	r3, r1, r0
 80034e6:	19db      	adds	r3, r3, r7
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	b2da      	uxtb	r2, r3
 80034ec:	4b11      	ldr	r3, [pc, #68]	; (8003534 <nmea_parser+0xb7c>)
 80034ee:	739a      	strb	r2, [r3, #14]
		//------------------------------------longitude end--------------------------------------



		//----------------------------------speed----------------------------------------------------
		memset(tempData,0,sizeof(tempData));
 80034f0:	2384      	movs	r3, #132	; 0x84
 80034f2:	0004      	movs	r4, r0
 80034f4:	191b      	adds	r3, r3, r4
 80034f6:	19db      	adds	r3, r3, r7
 80034f8:	220f      	movs	r2, #15
 80034fa:	2100      	movs	r1, #0
 80034fc:	0018      	movs	r0, r3
 80034fe:	f00b fbe4 	bl	800ecca <memset>
		memset(tempData2,0,sizeof(tempData2));
 8003502:	192b      	adds	r3, r5, r4
 8003504:	19db      	adds	r3, r3, r7
 8003506:	2204      	movs	r2, #4
 8003508:	2100      	movs	r1, #0
 800350a:	0018      	movs	r0, r3
 800350c:	f00b fbdd 	bl	800ecca <memset>
		tempDataIndex = 0;
 8003510:	23e7      	movs	r3, #231	; 0xe7
 8003512:	0020      	movs	r0, r4
 8003514:	181b      	adds	r3, r3, r0
 8003516:	19db      	adds	r3, r3, r7
 8003518:	2200      	movs	r2, #0
 800351a:	701a      	strb	r2, [r3, #0]
		float speedinf;
		for(uint8_t x =GNRMCComma[6]+1;x<GNRMCComma[7];x++){
 800351c:	2394      	movs	r3, #148	; 0x94
 800351e:	181b      	adds	r3, r3, r0
 8003520:	19db      	adds	r3, r3, r7
 8003522:	799a      	ldrb	r2, [r3, #6]
 8003524:	23d7      	movs	r3, #215	; 0xd7
 8003526:	181b      	adds	r3, r3, r0
 8003528:	19db      	adds	r3, r3, r7
 800352a:	3201      	adds	r2, #1
 800352c:	701a      	strb	r2, [r3, #0]
 800352e:	e024      	b.n	800357a <nmea_parser+0xbc2>
 8003530:	001b7740 	.word	0x001b7740
 8003534:	200002d4 	.word	0x200002d4
			tempData[tempDataIndex]= nmeaResponse[GNRMC][x];
 8003538:	20d7      	movs	r0, #215	; 0xd7
 800353a:	2508      	movs	r5, #8
 800353c:	1943      	adds	r3, r0, r5
 800353e:	19db      	adds	r3, r3, r7
 8003540:	781a      	ldrb	r2, [r3, #0]
 8003542:	24e7      	movs	r4, #231	; 0xe7
 8003544:	1963      	adds	r3, r4, r5
 8003546:	19db      	adds	r3, r3, r7
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	21cc      	movs	r1, #204	; 0xcc
 800354c:	1949      	adds	r1, r1, r5
 800354e:	19c9      	adds	r1, r1, r7
 8003550:	6809      	ldr	r1, [r1, #0]
 8003552:	5c89      	ldrb	r1, [r1, r2]
 8003554:	2284      	movs	r2, #132	; 0x84
 8003556:	1952      	adds	r2, r2, r5
 8003558:	19d2      	adds	r2, r2, r7
 800355a:	54d1      	strb	r1, [r2, r3]
			tempDataIndex++;
 800355c:	0029      	movs	r1, r5
 800355e:	1863      	adds	r3, r4, r1
 8003560:	19db      	adds	r3, r3, r7
 8003562:	781a      	ldrb	r2, [r3, #0]
 8003564:	1863      	adds	r3, r4, r1
 8003566:	19db      	adds	r3, r3, r7
 8003568:	3201      	adds	r2, #1
 800356a:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[6]+1;x<GNRMCComma[7];x++){
 800356c:	1843      	adds	r3, r0, r1
 800356e:	19db      	adds	r3, r3, r7
 8003570:	781a      	ldrb	r2, [r3, #0]
 8003572:	1843      	adds	r3, r0, r1
 8003574:	19db      	adds	r3, r3, r7
 8003576:	3201      	adds	r2, #1
 8003578:	701a      	strb	r2, [r3, #0]
 800357a:	2394      	movs	r3, #148	; 0x94
 800357c:	2508      	movs	r5, #8
 800357e:	195b      	adds	r3, r3, r5
 8003580:	19db      	adds	r3, r3, r7
 8003582:	79db      	ldrb	r3, [r3, #7]
 8003584:	22d7      	movs	r2, #215	; 0xd7
 8003586:	1952      	adds	r2, r2, r5
 8003588:	19d2      	adds	r2, r2, r7
 800358a:	7812      	ldrb	r2, [r2, #0]
 800358c:	429a      	cmp	r2, r3
 800358e:	d3d3      	bcc.n	8003538 <nmea_parser+0xb80>
		}

		speedinf = strtof(tempData,NULL);
 8003590:	2384      	movs	r3, #132	; 0x84
 8003592:	195b      	adds	r3, r3, r5
 8003594:	19db      	adds	r3, r3, r7
 8003596:	2100      	movs	r1, #0
 8003598:	0018      	movs	r0, r3
 800359a:	f00c fa31 	bl	800fa00 <strtof>
 800359e:	1c03      	adds	r3, r0, #0
 80035a0:	24d8      	movs	r4, #216	; 0xd8
 80035a2:	1962      	adds	r2, r4, r5
 80035a4:	19d2      	adds	r2, r2, r7
 80035a6:	6013      	str	r3, [r2, #0]
		speedinf= speedinf * 1.85;
 80035a8:	1963      	adds	r3, r4, r5
 80035aa:	19db      	adds	r3, r3, r7
 80035ac:	6818      	ldr	r0, [r3, #0]
 80035ae:	f7ff f8e3 	bl	8002778 <__aeabi_f2d>
 80035b2:	4a80      	ldr	r2, [pc, #512]	; (80037b4 <nmea_parser+0xdfc>)
 80035b4:	4b80      	ldr	r3, [pc, #512]	; (80037b8 <nmea_parser+0xe00>)
 80035b6:	f7fe fa37 	bl	8001a28 <__aeabi_dmul>
 80035ba:	0002      	movs	r2, r0
 80035bc:	000b      	movs	r3, r1
 80035be:	0010      	movs	r0, r2
 80035c0:	0019      	movs	r1, r3
 80035c2:	f7ff f921 	bl	8002808 <__aeabi_d2f>
 80035c6:	1c03      	adds	r3, r0, #0
 80035c8:	1962      	adds	r2, r4, r5
 80035ca:	19d2      	adds	r2, r2, r7
 80035cc:	6013      	str	r3, [r2, #0]
		if(speedinf>255){
 80035ce:	497b      	ldr	r1, [pc, #492]	; (80037bc <nmea_parser+0xe04>)
 80035d0:	1963      	adds	r3, r4, r5
 80035d2:	19db      	adds	r3, r3, r7
 80035d4:	6818      	ldr	r0, [r3, #0]
 80035d6:	f7fc ff93 	bl	8000500 <__aeabi_fcmpgt>
 80035da:	1e03      	subs	r3, r0, #0
 80035dc:	d003      	beq.n	80035e6 <nmea_parser+0xc2e>
			speedinf=255;
 80035de:	4b77      	ldr	r3, [pc, #476]	; (80037bc <nmea_parser+0xe04>)
 80035e0:	1962      	adds	r2, r4, r5
 80035e2:	19d2      	adds	r2, r2, r7
 80035e4:	6013      	str	r3, [r2, #0]
		}
		if(speedinf<1){
 80035e6:	21fe      	movs	r1, #254	; 0xfe
 80035e8:	0589      	lsls	r1, r1, #22
 80035ea:	24d8      	movs	r4, #216	; 0xd8
 80035ec:	2508      	movs	r5, #8
 80035ee:	1963      	adds	r3, r4, r5
 80035f0:	19db      	adds	r3, r3, r7
 80035f2:	6818      	ldr	r0, [r3, #0]
 80035f4:	f7fc ff70 	bl	80004d8 <__aeabi_fcmplt>
 80035f8:	1e03      	subs	r3, r0, #0
 80035fa:	d003      	beq.n	8003604 <nmea_parser+0xc4c>
			speedinf=0;
 80035fc:	2300      	movs	r3, #0
 80035fe:	1962      	adds	r2, r4, r5
 8003600:	19d2      	adds	r2, r2, r7
 8003602:	6013      	str	r3, [r2, #0]

		}

		GPSInformation[15] = (int)speedinf;
 8003604:	23d8      	movs	r3, #216	; 0xd8
 8003606:	2408      	movs	r4, #8
 8003608:	191b      	adds	r3, r3, r4
 800360a:	19db      	adds	r3, r3, r7
 800360c:	6818      	ldr	r0, [r3, #0]
 800360e:	f7fd fa5f 	bl	8000ad0 <__aeabi_f2iz>
 8003612:	0003      	movs	r3, r0
 8003614:	b2da      	uxtb	r2, r3
 8003616:	4b6a      	ldr	r3, [pc, #424]	; (80037c0 <nmea_parser+0xe08>)
 8003618:	73da      	strb	r2, [r3, #15]



		//------------------------------Coursestatus block(2 byte)--------------------------------
		//Byte1, bit 4(gps position bit)
		if (nmeaResponse[GNRMC][GNRMCComma[1]+1] == 'A'){
 800361a:	2394      	movs	r3, #148	; 0x94
 800361c:	191b      	adds	r3, r3, r4
 800361e:	19db      	adds	r3, r3, r7
 8003620:	785b      	ldrb	r3, [r3, #1]
 8003622:	3301      	adds	r3, #1
 8003624:	22cc      	movs	r2, #204	; 0xcc
 8003626:	1912      	adds	r2, r2, r4
 8003628:	19d2      	adds	r2, r2, r7
 800362a:	6812      	ldr	r2, [r2, #0]
 800362c:	5cd3      	ldrb	r3, [r2, r3]
 800362e:	2b41      	cmp	r3, #65	; 0x41
 8003630:	d109      	bne.n	8003646 <nmea_parser+0xc8e>
			courseStatus |= 0x1000;
 8003632:	22f6      	movs	r2, #246	; 0xf6
 8003634:	1913      	adds	r3, r2, r4
 8003636:	19db      	adds	r3, r3, r7
 8003638:	1912      	adds	r2, r2, r4
 800363a:	19d2      	adds	r2, r2, r7
 800363c:	8812      	ldrh	r2, [r2, #0]
 800363e:	2180      	movs	r1, #128	; 0x80
 8003640:	0149      	lsls	r1, r1, #5
 8003642:	430a      	orrs	r2, r1
 8003644:	801a      	strh	r2, [r3, #0]
		}
		//Byte1, bit 5(realtime differential)
		if (nmeaResponse[GNGGA][GNGGAComma[5]+1] != '1'){
 8003646:	0032      	movs	r2, r6
 8003648:	23cc      	movs	r3, #204	; 0xcc
 800364a:	2108      	movs	r1, #8
 800364c:	185b      	adds	r3, r3, r1
 800364e:	19db      	adds	r3, r3, r7
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	189a      	adds	r2, r3, r2
 8003654:	23a4      	movs	r3, #164	; 0xa4
 8003656:	185b      	adds	r3, r3, r1
 8003658:	19db      	adds	r3, r3, r7
 800365a:	795b      	ldrb	r3, [r3, #5]
 800365c:	3301      	adds	r3, #1
 800365e:	5cd3      	ldrb	r3, [r2, r3]
 8003660:	2b31      	cmp	r3, #49	; 0x31
 8003662:	d009      	beq.n	8003678 <nmea_parser+0xcc0>
			courseStatus |= 0x2000;
 8003664:	22f6      	movs	r2, #246	; 0xf6
 8003666:	1853      	adds	r3, r2, r1
 8003668:	19db      	adds	r3, r3, r7
 800366a:	1852      	adds	r2, r2, r1
 800366c:	19d2      	adds	r2, r2, r7
 800366e:	8812      	ldrh	r2, [r2, #0]
 8003670:	2180      	movs	r1, #128	; 0x80
 8003672:	0189      	lsls	r1, r1, #6
 8003674:	430a      	orrs	r2, r1
 8003676:	801a      	strh	r2, [r3, #0]
		}
		//Byte1, bit 3(East/West bit)
		if(nmeaResponse[GNRMC][GNRMCComma[5]+1] == 'W' ){
 8003678:	2394      	movs	r3, #148	; 0x94
 800367a:	2108      	movs	r1, #8
 800367c:	185b      	adds	r3, r3, r1
 800367e:	19db      	adds	r3, r3, r7
 8003680:	795b      	ldrb	r3, [r3, #5]
 8003682:	3301      	adds	r3, #1
 8003684:	22cc      	movs	r2, #204	; 0xcc
 8003686:	1852      	adds	r2, r2, r1
 8003688:	19d2      	adds	r2, r2, r7
 800368a:	6812      	ldr	r2, [r2, #0]
 800368c:	5cd3      	ldrb	r3, [r2, r3]
 800368e:	2b57      	cmp	r3, #87	; 0x57
 8003690:	d109      	bne.n	80036a6 <nmea_parser+0xcee>
			courseStatus |= 0x800;
 8003692:	22f6      	movs	r2, #246	; 0xf6
 8003694:	1853      	adds	r3, r2, r1
 8003696:	19db      	adds	r3, r3, r7
 8003698:	1852      	adds	r2, r2, r1
 800369a:	19d2      	adds	r2, r2, r7
 800369c:	8812      	ldrh	r2, [r2, #0]
 800369e:	2180      	movs	r1, #128	; 0x80
 80036a0:	0109      	lsls	r1, r1, #4
 80036a2:	430a      	orrs	r2, r1
 80036a4:	801a      	strh	r2, [r3, #0]
		}
		//Byte1, bit 2(North/South bit)
		if(nmeaResponse[GNRMC][GNRMCComma[3]+1] == 'N' ){
 80036a6:	2394      	movs	r3, #148	; 0x94
 80036a8:	2108      	movs	r1, #8
 80036aa:	185b      	adds	r3, r3, r1
 80036ac:	19db      	adds	r3, r3, r7
 80036ae:	78db      	ldrb	r3, [r3, #3]
 80036b0:	3301      	adds	r3, #1
 80036b2:	22cc      	movs	r2, #204	; 0xcc
 80036b4:	1852      	adds	r2, r2, r1
 80036b6:	19d2      	adds	r2, r2, r7
 80036b8:	6812      	ldr	r2, [r2, #0]
 80036ba:	5cd3      	ldrb	r3, [r2, r3]
 80036bc:	2b4e      	cmp	r3, #78	; 0x4e
 80036be:	d109      	bne.n	80036d4 <nmea_parser+0xd1c>
			courseStatus |= 0x400;
 80036c0:	22f6      	movs	r2, #246	; 0xf6
 80036c2:	1853      	adds	r3, r2, r1
 80036c4:	19db      	adds	r3, r3, r7
 80036c6:	1852      	adds	r2, r2, r1
 80036c8:	19d2      	adds	r2, r2, r7
 80036ca:	8812      	ldrh	r2, [r2, #0]
 80036cc:	2180      	movs	r1, #128	; 0x80
 80036ce:	00c9      	lsls	r1, r1, #3
 80036d0:	430a      	orrs	r2, r1
 80036d2:	801a      	strh	r2, [r3, #0]
		}

		//Course
		memset(tempData,0,sizeof(tempData));
 80036d4:	2384      	movs	r3, #132	; 0x84
 80036d6:	2408      	movs	r4, #8
 80036d8:	191b      	adds	r3, r3, r4
 80036da:	19db      	adds	r3, r3, r7
 80036dc:	220f      	movs	r2, #15
 80036de:	2100      	movs	r1, #0
 80036e0:	0018      	movs	r0, r3
 80036e2:	f00b faf2 	bl	800ecca <memset>
		tempDataIndex = 0;
 80036e6:	23e7      	movs	r3, #231	; 0xe7
 80036e8:	0021      	movs	r1, r4
 80036ea:	185b      	adds	r3, r3, r1
 80036ec:	19db      	adds	r3, r3, r7
 80036ee:	2200      	movs	r2, #0
 80036f0:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[7]+1;x<GNRMCComma[8];x++){
 80036f2:	2394      	movs	r3, #148	; 0x94
 80036f4:	185b      	adds	r3, r3, r1
 80036f6:	19db      	adds	r3, r3, r7
 80036f8:	79da      	ldrb	r2, [r3, #7]
 80036fa:	23d6      	movs	r3, #214	; 0xd6
 80036fc:	185b      	adds	r3, r3, r1
 80036fe:	19db      	adds	r3, r3, r7
 8003700:	3201      	adds	r2, #1
 8003702:	701a      	strb	r2, [r3, #0]
 8003704:	e020      	b.n	8003748 <nmea_parser+0xd90>
			tempData[tempDataIndex]= nmeaResponse[GNRMC][x];
 8003706:	20d6      	movs	r0, #214	; 0xd6
 8003708:	2508      	movs	r5, #8
 800370a:	1943      	adds	r3, r0, r5
 800370c:	19db      	adds	r3, r3, r7
 800370e:	781a      	ldrb	r2, [r3, #0]
 8003710:	24e7      	movs	r4, #231	; 0xe7
 8003712:	1963      	adds	r3, r4, r5
 8003714:	19db      	adds	r3, r3, r7
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	21cc      	movs	r1, #204	; 0xcc
 800371a:	1949      	adds	r1, r1, r5
 800371c:	19c9      	adds	r1, r1, r7
 800371e:	6809      	ldr	r1, [r1, #0]
 8003720:	5c89      	ldrb	r1, [r1, r2]
 8003722:	2284      	movs	r2, #132	; 0x84
 8003724:	1952      	adds	r2, r2, r5
 8003726:	19d2      	adds	r2, r2, r7
 8003728:	54d1      	strb	r1, [r2, r3]
			tempDataIndex++;
 800372a:	0029      	movs	r1, r5
 800372c:	1863      	adds	r3, r4, r1
 800372e:	19db      	adds	r3, r3, r7
 8003730:	781a      	ldrb	r2, [r3, #0]
 8003732:	1863      	adds	r3, r4, r1
 8003734:	19db      	adds	r3, r3, r7
 8003736:	3201      	adds	r2, #1
 8003738:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[7]+1;x<GNRMCComma[8];x++){
 800373a:	1843      	adds	r3, r0, r1
 800373c:	19db      	adds	r3, r3, r7
 800373e:	781a      	ldrb	r2, [r3, #0]
 8003740:	1843      	adds	r3, r0, r1
 8003742:	19db      	adds	r3, r3, r7
 8003744:	3201      	adds	r2, #1
 8003746:	701a      	strb	r2, [r3, #0]
 8003748:	2394      	movs	r3, #148	; 0x94
 800374a:	2408      	movs	r4, #8
 800374c:	191b      	adds	r3, r3, r4
 800374e:	19db      	adds	r3, r3, r7
 8003750:	7a1b      	ldrb	r3, [r3, #8]
 8003752:	22d6      	movs	r2, #214	; 0xd6
 8003754:	1912      	adds	r2, r2, r4
 8003756:	19d2      	adds	r2, r2, r7
 8003758:	7812      	ldrb	r2, [r2, #0]
 800375a:	429a      	cmp	r2, r3
 800375c:	d3d3      	bcc.n	8003706 <nmea_parser+0xd4e>
		}
		courseStatus |= atoi(tempData);
 800375e:	2384      	movs	r3, #132	; 0x84
 8003760:	191b      	adds	r3, r3, r4
 8003762:	19db      	adds	r3, r3, r7
 8003764:	0018      	movs	r0, r3
 8003766:	f00b fa51 	bl	800ec0c <atoi>
 800376a:	0003      	movs	r3, r0
 800376c:	b21a      	sxth	r2, r3
 800376e:	21f6      	movs	r1, #246	; 0xf6
 8003770:	190b      	adds	r3, r1, r4
 8003772:	19db      	adds	r3, r3, r7
 8003774:	2000      	movs	r0, #0
 8003776:	5e1b      	ldrsh	r3, [r3, r0]
 8003778:	4313      	orrs	r3, r2
 800377a:	b21a      	sxth	r2, r3
 800377c:	0020      	movs	r0, r4
 800377e:	180b      	adds	r3, r1, r0
 8003780:	19db      	adds	r3, r3, r7
 8003782:	801a      	strh	r2, [r3, #0]
		GPSInformation[16]= courseStatus>>8;
 8003784:	180b      	adds	r3, r1, r0
 8003786:	19db      	adds	r3, r3, r7
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	0a1b      	lsrs	r3, r3, #8
 800378c:	b29b      	uxth	r3, r3
 800378e:	b2da      	uxtb	r2, r3
 8003790:	4b0b      	ldr	r3, [pc, #44]	; (80037c0 <nmea_parser+0xe08>)
 8003792:	741a      	strb	r2, [r3, #16]
		GPSInformation[17]= courseStatus;
 8003794:	180b      	adds	r3, r1, r0
 8003796:	19db      	adds	r3, r3, r7
 8003798:	881b      	ldrh	r3, [r3, #0]
 800379a:	b2da      	uxtb	r2, r3
 800379c:	4b08      	ldr	r3, [pc, #32]	; (80037c0 <nmea_parser+0xe08>)
 800379e:	745a      	strb	r2, [r3, #17]
		//------------------------------Course Status Block END------------------------------------

		return GPSInformation;
 80037a0:	4b07      	ldr	r3, [pc, #28]	; (80037c0 <nmea_parser+0xe08>)
 80037a2:	e003      	b.n	80037ac <nmea_parser+0xdf4>
	}
	else{
		*checkSum = 55;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2237      	movs	r2, #55	; 0x37
 80037a8:	701a      	strb	r2, [r3, #0]
		return NULL;
 80037aa:	2300      	movs	r3, #0
	}

}
 80037ac:	0018      	movs	r0, r3
 80037ae:	46bd      	mov	sp, r7
 80037b0:	b041      	add	sp, #260	; 0x104
 80037b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037b4:	9999999a 	.word	0x9999999a
 80037b8:	3ffd9999 	.word	0x3ffd9999
 80037bc:	437f0000 	.word	0x437f0000
 80037c0:	200002d4 	.word	0x200002d4

080037c4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80037c8:	f3bf 8f4f 	dsb	sy
}
 80037cc:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037ce:	4b04      	ldr	r3, [pc, #16]	; (80037e0 <__NVIC_SystemReset+0x1c>)
 80037d0:	4a04      	ldr	r2, [pc, #16]	; (80037e4 <__NVIC_SystemReset+0x20>)
 80037d2:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80037d4:	f3bf 8f4f 	dsb	sy
}
 80037d8:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80037da:	46c0      	nop			; (mov r8, r8)
 80037dc:	e7fd      	b.n	80037da <__NVIC_SystemReset+0x16>
 80037de:	46c0      	nop			; (mov r8, r8)
 80037e0:	e000ed00 	.word	0xe000ed00
 80037e4:	05fa0004 	.word	0x05fa0004

080037e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b0c2      	sub	sp, #264	; 0x108
 80037ec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80037ee:	f006 f84d 	bl	800988c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80037f2:	f000 fb09 	bl	8003e08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80037f6:	f000 fdd5 	bl	80043a4 <MX_GPIO_Init>
  MX_SPI1_Init();
 80037fa:	f000 fb5f 	bl	8003ebc <MX_SPI1_Init>
  MX_TIM3_Init();
 80037fe:	f000 fb9b 	bl	8003f38 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8003802:	f000 fccb 	bl	800419c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8003806:	f000 fd17 	bl	8004238 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800380a:	f000 fd63 	bl	80042d4 <MX_USART3_UART_Init>
  MX_USART4_UART_Init();
 800380e:	f000 fd95 	bl	800433c <MX_USART4_UART_Init>
  MX_TIM17_Init();
 8003812:	f000 fc99 	bl	8004148 <MX_TIM17_Init>
  MX_TIM14_Init();
 8003816:	f000 fc47 	bl	80040a8 <MX_TIM14_Init>
  MX_TIM6_Init();
 800381a:	f000 fc09 	bl	8004030 <MX_TIM6_Init>
  MX_TIM16_Init();
 800381e:	f000 fc69 	bl	80040f4 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim14);//watchDog Timer
 8003822:	4bde      	ldr	r3, [pc, #888]	; (8003b9c <main+0x3b4>)
 8003824:	0018      	movs	r0, r3
 8003826:	f008 faef 	bl	800be08 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim16);//tcp open checking timer
 800382a:	4bdd      	ldr	r3, [pc, #884]	; (8003ba0 <main+0x3b8>)
 800382c:	0018      	movs	r0, r3
 800382e:	f008 faeb 	bl	800be08 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);//AT PORT
 8003832:	4bdc      	ldr	r3, [pc, #880]	; (8003ba4 <main+0x3bc>)
 8003834:	0018      	movs	r0, r3
 8003836:	f008 fae7 	bl	800be08 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, GNSS_BUFFER, 1);
 800383a:	49db      	ldr	r1, [pc, #876]	; (8003ba8 <main+0x3c0>)
 800383c:	4bdb      	ldr	r3, [pc, #876]	; (8003bac <main+0x3c4>)
 800383e:	2201      	movs	r2, #1
 8003840:	0018      	movs	r0, r3
 8003842:	f009 fb83 	bl	800cf4c <HAL_UART_Receive_IT>
  W25qxx_Init();
 8003846:	f005 fc4d 	bl	80090e4 <W25qxx_Init>


	//INPUT CAPTURE--------------------------------------
  HAL_TIM_Base_Start_IT(&htim3);//input capture timer starts
 800384a:	4bd9      	ldr	r3, [pc, #868]	; (8003bb0 <main+0x3c8>)
 800384c:	0018      	movs	r0, r3
 800384e:	f008 fadb 	bl	800be08 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim17);///GNS PORT
 8003852:	4bd8      	ldr	r3, [pc, #864]	; (8003bb4 <main+0x3cc>)
 8003854:	0018      	movs	r0, r3
 8003856:	f008 fad7 	bl	800be08 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&AT_PORT, AT_BUFFER, 1);
 800385a:	49d7      	ldr	r1, [pc, #860]	; (8003bb8 <main+0x3d0>)
 800385c:	4bd7      	ldr	r3, [pc, #860]	; (8003bbc <main+0x3d4>)
 800385e:	2201      	movs	r2, #1
 8003860:	0018      	movs	r0, r3
 8003862:	f009 fb73 	bl	800cf4c <HAL_UART_Receive_IT>



  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 1);
 8003866:	4bd6      	ldr	r3, [pc, #856]	; (8003bc0 <main+0x3d8>)
 8003868:	2201      	movs	r2, #1
 800386a:	2104      	movs	r1, #4
 800386c:	0018      	movs	r0, r3
 800386e:	f006 fbe2 	bl	800a036 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8003872:	23fa      	movs	r3, #250	; 0xfa
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	0018      	movs	r0, r3
 8003878:	f006 f88e 	bl	8009998 <HAL_Delay>
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 0);
 800387c:	4bd0      	ldr	r3, [pc, #832]	; (8003bc0 <main+0x3d8>)
 800387e:	2200      	movs	r2, #0
 8003880:	2104      	movs	r1, #4
 8003882:	0018      	movs	r0, r3
 8003884:	f006 fbd7 	bl	800a036 <HAL_GPIO_WritePin>


	//ROM INTEGRITY------------------------------------------------------------------------------------------------------------------------------
//	W25qxx_EraseSector(0);
//	W25qxx_EraseSector(1);
	W25qxx_ReadByte(&isFlash, 0);
 8003888:	4bce      	ldr	r3, [pc, #824]	; (8003bc4 <main+0x3dc>)
 800388a:	2100      	movs	r1, #0
 800388c:	0018      	movs	r0, r3
 800388e:	f005 fe3d 	bl	800950c <W25qxx_ReadByte>
	W25qxx_ReadByte(&isFlash1, LASTPAGE_ADD);
 8003892:	4bcd      	ldr	r3, [pc, #820]	; (8003bc8 <main+0x3e0>)
 8003894:	21fa      	movs	r1, #250	; 0xfa
 8003896:	0018      	movs	r0, r3
 8003898:	f005 fe38 	bl	800950c <W25qxx_ReadByte>
	if (isFlash != 1 || isFlash1 !=1 ) {
 800389c:	4bc9      	ldr	r3, [pc, #804]	; (8003bc4 <main+0x3dc>)
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d103      	bne.n	80038ac <main+0xc4>
 80038a4:	4bc8      	ldr	r3, [pc, #800]	; (8003bc8 <main+0x3e0>)
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d00f      	beq.n	80038cc <main+0xe4>
		StartN = 0;
 80038ac:	4bc7      	ldr	r3, [pc, #796]	; (8003bcc <main+0x3e4>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	801a      	strh	r2, [r3, #0]
		EndN = 0;
 80038b2:	4bc7      	ldr	r3, [pc, #796]	; (8003bd0 <main+0x3e8>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	801a      	strh	r2, [r3, #0]
		StartSec = 1;
 80038b8:	4bc6      	ldr	r3, [pc, #792]	; (8003bd4 <main+0x3ec>)
 80038ba:	2201      	movs	r2, #1
 80038bc:	801a      	strh	r2, [r3, #0]
		EndSec = 1;
 80038be:	4bc6      	ldr	r3, [pc, #792]	; (8003bd8 <main+0x3f0>)
 80038c0:	2201      	movs	r2, #1
 80038c2:	801a      	strh	r2, [r3, #0]
		W25qxx_EraseSector(1);
 80038c4:	2001      	movs	r0, #1
 80038c6:	f005 fcc7 	bl	8009258 <W25qxx_EraseSector>
 80038ca:	e119      	b.n	8003b00 <main+0x318>

	} else {
		//reading from ROM
		uint8_t configPage[LASTPAGE_ADD+2];
		memset(configPage, 0, sizeof(configPage));
 80038cc:	003b      	movs	r3, r7
 80038ce:	22fc      	movs	r2, #252	; 0xfc
 80038d0:	2100      	movs	r1, #0
 80038d2:	0018      	movs	r0, r3
 80038d4:	f00b f9f9 	bl	800ecca <memset>
		W25qxx_ReadBytes(configPage, 0, LASTPAGE_ADD+2);
 80038d8:	003b      	movs	r3, r7
 80038da:	22fc      	movs	r2, #252	; 0xfc
 80038dc:	2100      	movs	r1, #0
 80038de:	0018      	movs	r0, r3
 80038e0:	f005 fe6a 	bl	80095b8 <W25qxx_ReadBytes>

		StartSec = configPage[1];
 80038e4:	4bbd      	ldr	r3, [pc, #756]	; (8003bdc <main+0x3f4>)
 80038e6:	3301      	adds	r3, #1
 80038e8:	33ff      	adds	r3, #255	; 0xff
 80038ea:	19db      	adds	r3, r3, r7
 80038ec:	785b      	ldrb	r3, [r3, #1]
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	4bb8      	ldr	r3, [pc, #736]	; (8003bd4 <main+0x3ec>)
 80038f2:	801a      	strh	r2, [r3, #0]
		StartSec = StartSec << 8 | configPage[2];
 80038f4:	4bb7      	ldr	r3, [pc, #732]	; (8003bd4 <main+0x3ec>)
 80038f6:	881b      	ldrh	r3, [r3, #0]
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	021b      	lsls	r3, r3, #8
 80038fc:	b21a      	sxth	r2, r3
 80038fe:	4bb7      	ldr	r3, [pc, #732]	; (8003bdc <main+0x3f4>)
 8003900:	3301      	adds	r3, #1
 8003902:	33ff      	adds	r3, #255	; 0xff
 8003904:	19db      	adds	r3, r3, r7
 8003906:	789b      	ldrb	r3, [r3, #2]
 8003908:	b21b      	sxth	r3, r3
 800390a:	4313      	orrs	r3, r2
 800390c:	b21b      	sxth	r3, r3
 800390e:	b29a      	uxth	r2, r3
 8003910:	4bb0      	ldr	r3, [pc, #704]	; (8003bd4 <main+0x3ec>)
 8003912:	801a      	strh	r2, [r3, #0]

		StartN = configPage[3];
 8003914:	4bb1      	ldr	r3, [pc, #708]	; (8003bdc <main+0x3f4>)
 8003916:	3301      	adds	r3, #1
 8003918:	33ff      	adds	r3, #255	; 0xff
 800391a:	19db      	adds	r3, r3, r7
 800391c:	78db      	ldrb	r3, [r3, #3]
 800391e:	b29a      	uxth	r2, r3
 8003920:	4baa      	ldr	r3, [pc, #680]	; (8003bcc <main+0x3e4>)
 8003922:	801a      	strh	r2, [r3, #0]
		StartN = StartN << 8 | configPage[4];
 8003924:	4ba9      	ldr	r3, [pc, #676]	; (8003bcc <main+0x3e4>)
 8003926:	881b      	ldrh	r3, [r3, #0]
 8003928:	b29b      	uxth	r3, r3
 800392a:	021b      	lsls	r3, r3, #8
 800392c:	b21a      	sxth	r2, r3
 800392e:	4bab      	ldr	r3, [pc, #684]	; (8003bdc <main+0x3f4>)
 8003930:	3301      	adds	r3, #1
 8003932:	33ff      	adds	r3, #255	; 0xff
 8003934:	19db      	adds	r3, r3, r7
 8003936:	791b      	ldrb	r3, [r3, #4]
 8003938:	b21b      	sxth	r3, r3
 800393a:	4313      	orrs	r3, r2
 800393c:	b21b      	sxth	r3, r3
 800393e:	b29a      	uxth	r2, r3
 8003940:	4ba2      	ldr	r3, [pc, #648]	; (8003bcc <main+0x3e4>)
 8003942:	801a      	strh	r2, [r3, #0]

		EndSec = configPage[5];
 8003944:	4ba5      	ldr	r3, [pc, #660]	; (8003bdc <main+0x3f4>)
 8003946:	3301      	adds	r3, #1
 8003948:	33ff      	adds	r3, #255	; 0xff
 800394a:	19db      	adds	r3, r3, r7
 800394c:	795b      	ldrb	r3, [r3, #5]
 800394e:	b29a      	uxth	r2, r3
 8003950:	4ba1      	ldr	r3, [pc, #644]	; (8003bd8 <main+0x3f0>)
 8003952:	801a      	strh	r2, [r3, #0]
		EndSec = EndSec << 8 | configPage[6];
 8003954:	4ba0      	ldr	r3, [pc, #640]	; (8003bd8 <main+0x3f0>)
 8003956:	881b      	ldrh	r3, [r3, #0]
 8003958:	b29b      	uxth	r3, r3
 800395a:	021b      	lsls	r3, r3, #8
 800395c:	b21a      	sxth	r2, r3
 800395e:	4b9f      	ldr	r3, [pc, #636]	; (8003bdc <main+0x3f4>)
 8003960:	3301      	adds	r3, #1
 8003962:	33ff      	adds	r3, #255	; 0xff
 8003964:	19db      	adds	r3, r3, r7
 8003966:	799b      	ldrb	r3, [r3, #6]
 8003968:	b21b      	sxth	r3, r3
 800396a:	4313      	orrs	r3, r2
 800396c:	b21b      	sxth	r3, r3
 800396e:	b29a      	uxth	r2, r3
 8003970:	4b99      	ldr	r3, [pc, #612]	; (8003bd8 <main+0x3f0>)
 8003972:	801a      	strh	r2, [r3, #0]

		EndN = configPage[7];
 8003974:	4b99      	ldr	r3, [pc, #612]	; (8003bdc <main+0x3f4>)
 8003976:	3301      	adds	r3, #1
 8003978:	33ff      	adds	r3, #255	; 0xff
 800397a:	19db      	adds	r3, r3, r7
 800397c:	79db      	ldrb	r3, [r3, #7]
 800397e:	b29a      	uxth	r2, r3
 8003980:	4b93      	ldr	r3, [pc, #588]	; (8003bd0 <main+0x3e8>)
 8003982:	801a      	strh	r2, [r3, #0]
		EndN = EndN << 8 | configPage[8];
 8003984:	4b92      	ldr	r3, [pc, #584]	; (8003bd0 <main+0x3e8>)
 8003986:	881b      	ldrh	r3, [r3, #0]
 8003988:	b29b      	uxth	r3, r3
 800398a:	021b      	lsls	r3, r3, #8
 800398c:	b21a      	sxth	r2, r3
 800398e:	4b93      	ldr	r3, [pc, #588]	; (8003bdc <main+0x3f4>)
 8003990:	3301      	adds	r3, #1
 8003992:	33ff      	adds	r3, #255	; 0xff
 8003994:	19db      	adds	r3, r3, r7
 8003996:	7a1b      	ldrb	r3, [r3, #8]
 8003998:	b21b      	sxth	r3, r3
 800399a:	4313      	orrs	r3, r2
 800399c:	b21b      	sxth	r3, r3
 800399e:	b29a      	uxth	r2, r3
 80039a0:	4b8b      	ldr	r3, [pc, #556]	; (8003bd0 <main+0x3e8>)
 80039a2:	801a      	strh	r2, [r3, #0]

		cPin[0] = configPage[CP1_ADD];
 80039a4:	4b8d      	ldr	r3, [pc, #564]	; (8003bdc <main+0x3f4>)
 80039a6:	3301      	adds	r3, #1
 80039a8:	33ff      	adds	r3, #255	; 0xff
 80039aa:	19db      	adds	r3, r3, r7
 80039ac:	7a5a      	ldrb	r2, [r3, #9]
 80039ae:	4b8c      	ldr	r3, [pc, #560]	; (8003be0 <main+0x3f8>)
 80039b0:	701a      	strb	r2, [r3, #0]
		cPin[1] = configPage[CP2_ADD];
 80039b2:	4b8a      	ldr	r3, [pc, #552]	; (8003bdc <main+0x3f4>)
 80039b4:	3301      	adds	r3, #1
 80039b6:	33ff      	adds	r3, #255	; 0xff
 80039b8:	19db      	adds	r3, r3, r7
 80039ba:	7a9a      	ldrb	r2, [r3, #10]
 80039bc:	4b88      	ldr	r3, [pc, #544]	; (8003be0 <main+0x3f8>)
 80039be:	705a      	strb	r2, [r3, #1]
		cPin[2] = configPage[CP3_ADD];
 80039c0:	4b86      	ldr	r3, [pc, #536]	; (8003bdc <main+0x3f4>)
 80039c2:	3301      	adds	r3, #1
 80039c4:	33ff      	adds	r3, #255	; 0xff
 80039c6:	19db      	adds	r3, r3, r7
 80039c8:	7ada      	ldrb	r2, [r3, #11]
 80039ca:	4b85      	ldr	r3, [pc, #532]	; (8003be0 <main+0x3f8>)
 80039cc:	709a      	strb	r2, [r3, #2]
		cPin[3] = configPage[CP4_ADD];
 80039ce:	4b83      	ldr	r3, [pc, #524]	; (8003bdc <main+0x3f4>)
 80039d0:	3301      	adds	r3, #1
 80039d2:	33ff      	adds	r3, #255	; 0xff
 80039d4:	19db      	adds	r3, r3, r7
 80039d6:	7b1a      	ldrb	r2, [r3, #12]
 80039d8:	4b81      	ldr	r3, [pc, #516]	; (8003be0 <main+0x3f8>)
 80039da:	70da      	strb	r2, [r3, #3]

		for (uint8_t te = 0; te < 10; te++) {
 80039dc:	23ff      	movs	r3, #255	; 0xff
 80039de:	18fb      	adds	r3, r7, r3
 80039e0:	2200      	movs	r2, #0
 80039e2:	701a      	strb	r2, [r3, #0]
 80039e4:	e012      	b.n	8003a0c <main+0x224>
			validSender[te] = configPage[te + VALIDSENSTART_ADD];
 80039e6:	20ff      	movs	r0, #255	; 0xff
 80039e8:	183b      	adds	r3, r7, r0
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	330d      	adds	r3, #13
 80039ee:	001a      	movs	r2, r3
 80039f0:	183b      	adds	r3, r7, r0
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	4979      	ldr	r1, [pc, #484]	; (8003bdc <main+0x3f4>)
 80039f6:	3101      	adds	r1, #1
 80039f8:	31ff      	adds	r1, #255	; 0xff
 80039fa:	19c9      	adds	r1, r1, r7
 80039fc:	5c89      	ldrb	r1, [r1, r2]
 80039fe:	4a79      	ldr	r2, [pc, #484]	; (8003be4 <main+0x3fc>)
 8003a00:	54d1      	strb	r1, [r2, r3]
		for (uint8_t te = 0; te < 10; te++) {
 8003a02:	183b      	adds	r3, r7, r0
 8003a04:	781a      	ldrb	r2, [r3, #0]
 8003a06:	183b      	adds	r3, r7, r0
 8003a08:	3201      	adds	r2, #1
 8003a0a:	701a      	strb	r2, [r3, #0]
 8003a0c:	23ff      	movs	r3, #255	; 0xff
 8003a0e:	18fb      	adds	r3, r7, r3
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	2b09      	cmp	r3, #9
 8003a14:	d9e7      	bls.n	80039e6 <main+0x1fe>
		}
		for (uint8_t te = 0; te < 50; te++) {
 8003a16:	23fe      	movs	r3, #254	; 0xfe
 8003a18:	18fb      	adds	r3, r7, r3
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	701a      	strb	r2, [r3, #0]
 8003a1e:	e012      	b.n	8003a46 <main+0x25e>
			domainAdd[te] = configPage[te + DOMAINSTART_ADD];
 8003a20:	20fe      	movs	r0, #254	; 0xfe
 8003a22:	183b      	adds	r3, r7, r0
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	3317      	adds	r3, #23
 8003a28:	001a      	movs	r2, r3
 8003a2a:	183b      	adds	r3, r7, r0
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	496b      	ldr	r1, [pc, #428]	; (8003bdc <main+0x3f4>)
 8003a30:	3101      	adds	r1, #1
 8003a32:	31ff      	adds	r1, #255	; 0xff
 8003a34:	19c9      	adds	r1, r1, r7
 8003a36:	5c89      	ldrb	r1, [r1, r2]
 8003a38:	4a6b      	ldr	r2, [pc, #428]	; (8003be8 <main+0x400>)
 8003a3a:	54d1      	strb	r1, [r2, r3]
		for (uint8_t te = 0; te < 50; te++) {
 8003a3c:	183b      	adds	r3, r7, r0
 8003a3e:	781a      	ldrb	r2, [r3, #0]
 8003a40:	183b      	adds	r3, r7, r0
 8003a42:	3201      	adds	r2, #1
 8003a44:	701a      	strb	r2, [r3, #0]
 8003a46:	23fe      	movs	r3, #254	; 0xfe
 8003a48:	18fb      	adds	r3, r7, r3
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	2b31      	cmp	r3, #49	; 0x31
 8003a4e:	d9e7      	bls.n	8003a20 <main+0x238>
		}
		for (uint8_t te = 0; te < 6; te++) {
 8003a50:	23fd      	movs	r3, #253	; 0xfd
 8003a52:	18fb      	adds	r3, r7, r3
 8003a54:	2200      	movs	r2, #0
 8003a56:	701a      	strb	r2, [r3, #0]
 8003a58:	e012      	b.n	8003a80 <main+0x298>
			portAdd[te] = configPage[te + PORTSTART_ADD];
 8003a5a:	20fd      	movs	r0, #253	; 0xfd
 8003a5c:	183b      	adds	r3, r7, r0
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	3349      	adds	r3, #73	; 0x49
 8003a62:	001a      	movs	r2, r3
 8003a64:	183b      	adds	r3, r7, r0
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	495c      	ldr	r1, [pc, #368]	; (8003bdc <main+0x3f4>)
 8003a6a:	3101      	adds	r1, #1
 8003a6c:	31ff      	adds	r1, #255	; 0xff
 8003a6e:	19c9      	adds	r1, r1, r7
 8003a70:	5c89      	ldrb	r1, [r1, r2]
 8003a72:	4a5e      	ldr	r2, [pc, #376]	; (8003bec <main+0x404>)
 8003a74:	54d1      	strb	r1, [r2, r3]
		for (uint8_t te = 0; te < 6; te++) {
 8003a76:	183b      	adds	r3, r7, r0
 8003a78:	781a      	ldrb	r2, [r3, #0]
 8003a7a:	183b      	adds	r3, r7, r0
 8003a7c:	3201      	adds	r2, #1
 8003a7e:	701a      	strb	r2, [r3, #0]
 8003a80:	23fd      	movs	r3, #253	; 0xfd
 8003a82:	18fb      	adds	r3, r7, r3
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	2b05      	cmp	r3, #5
 8003a88:	d9e7      	bls.n	8003a5a <main+0x272>
		}
		locationDataIntervalA = configPage[LDIA_ADD];
 8003a8a:	4b54      	ldr	r3, [pc, #336]	; (8003bdc <main+0x3f4>)
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	33ff      	adds	r3, #255	; 0xff
 8003a90:	19db      	adds	r3, r3, r7
 8003a92:	224f      	movs	r2, #79	; 0x4f
 8003a94:	5c9a      	ldrb	r2, [r3, r2]
 8003a96:	4b56      	ldr	r3, [pc, #344]	; (8003bf0 <main+0x408>)
 8003a98:	701a      	strb	r2, [r3, #0]
		locationDataIntervalB = configPage[LDIB_ADD];
 8003a9a:	4b50      	ldr	r3, [pc, #320]	; (8003bdc <main+0x3f4>)
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	33ff      	adds	r3, #255	; 0xff
 8003aa0:	19db      	adds	r3, r3, r7
 8003aa2:	2250      	movs	r2, #80	; 0x50
 8003aa4:	5c9a      	ldrb	r2, [r3, r2]
 8003aa6:	4b53      	ldr	r3, [pc, #332]	; (8003bf4 <main+0x40c>)
 8003aa8:	701a      	strb	r2, [r3, #0]
		isAutoRst = configPage[AUTORST_ADD];
 8003aaa:	4b4c      	ldr	r3, [pc, #304]	; (8003bdc <main+0x3f4>)
 8003aac:	3301      	adds	r3, #1
 8003aae:	33ff      	adds	r3, #255	; 0xff
 8003ab0:	19db      	adds	r3, r3, r7
 8003ab2:	2251      	movs	r2, #81	; 0x51
 8003ab4:	5c9a      	ldrb	r2, [r3, r2]
 8003ab6:	4b50      	ldr	r3, [pc, #320]	; (8003bf8 <main+0x410>)
 8003ab8:	701a      	strb	r2, [r3, #0]
		isSMSActive = configPage[SMSACTIVE_ADD];
 8003aba:	4b48      	ldr	r3, [pc, #288]	; (8003bdc <main+0x3f4>)
 8003abc:	3301      	adds	r3, #1
 8003abe:	33ff      	adds	r3, #255	; 0xff
 8003ac0:	19db      	adds	r3, r3, r7
 8003ac2:	2252      	movs	r2, #82	; 0x52
 8003ac4:	5c9a      	ldrb	r2, [r3, r2]
 8003ac6:	4b4d      	ldr	r3, [pc, #308]	; (8003bfc <main+0x414>)
 8003ac8:	701a      	strb	r2, [r3, #0]
		relayState = configPage[RELAYSTATE_ADD];
 8003aca:	4b44      	ldr	r3, [pc, #272]	; (8003bdc <main+0x3f4>)
 8003acc:	3301      	adds	r3, #1
 8003ace:	33ff      	adds	r3, #255	; 0xff
 8003ad0:	19db      	adds	r3, r3, r7
 8003ad2:	2253      	movs	r2, #83	; 0x53
 8003ad4:	5c9a      	ldrb	r2, [r3, r2]
 8003ad6:	4b4a      	ldr	r3, [pc, #296]	; (8003c00 <main+0x418>)
 8003ad8:	701a      	strb	r2, [r3, #0]
		if(isAutoRst==0){
 8003ada:	4b47      	ldr	r3, [pc, #284]	; (8003bf8 <main+0x410>)
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d10e      	bne.n	8003b00 <main+0x318>
			StartN = 0;
 8003ae2:	4b3a      	ldr	r3, [pc, #232]	; (8003bcc <main+0x3e4>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	801a      	strh	r2, [r3, #0]
			EndN = 0;
 8003ae8:	4b39      	ldr	r3, [pc, #228]	; (8003bd0 <main+0x3e8>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	801a      	strh	r2, [r3, #0]
			StartSec = 1;
 8003aee:	4b39      	ldr	r3, [pc, #228]	; (8003bd4 <main+0x3ec>)
 8003af0:	2201      	movs	r2, #1
 8003af2:	801a      	strh	r2, [r3, #0]
			EndSec = 1;
 8003af4:	4b38      	ldr	r3, [pc, #224]	; (8003bd8 <main+0x3f0>)
 8003af6:	2201      	movs	r2, #1
 8003af8:	801a      	strh	r2, [r3, #0]
			W25qxx_EraseSector(1);
 8003afa:	2001      	movs	r0, #1
 8003afc:	f005 fbac 	bl	8009258 <W25qxx_EraseSector>
		}
	}
	save_to_flash(0);
 8003b00:	2000      	movs	r0, #0
 8003b02:	f002 fcc9 	bl	8006498 <save_to_flash>




	//-------------------check if tracker has registered any mobile number?-------------
	if(validSender[0] == '0' && validSender[1] == '0' && validSender[2] == '0'){
 8003b06:	4b37      	ldr	r3, [pc, #220]	; (8003be4 <main+0x3fc>)
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	2b30      	cmp	r3, #48	; 0x30
 8003b0c:	d10b      	bne.n	8003b26 <main+0x33e>
 8003b0e:	4b35      	ldr	r3, [pc, #212]	; (8003be4 <main+0x3fc>)
 8003b10:	785b      	ldrb	r3, [r3, #1]
 8003b12:	2b30      	cmp	r3, #48	; 0x30
 8003b14:	d107      	bne.n	8003b26 <main+0x33e>
 8003b16:	4b33      	ldr	r3, [pc, #204]	; (8003be4 <main+0x3fc>)
 8003b18:	789b      	ldrb	r3, [r3, #2]
 8003b1a:	2b30      	cmp	r3, #48	; 0x30
 8003b1c:	d103      	bne.n	8003b26 <main+0x33e>
		isNumValid=0;
 8003b1e:	4b39      	ldr	r3, [pc, #228]	; (8003c04 <main+0x41c>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	701a      	strb	r2, [r3, #0]
 8003b24:	e002      	b.n	8003b2c <main+0x344>
	}
	else{
		isNumValid=1;
 8003b26:	4b37      	ldr	r3, [pc, #220]	; (8003c04 <main+0x41c>)
 8003b28:	2201      	movs	r2, #1
 8003b2a:	701a      	strb	r2, [r3, #0]
	}
	//----------------------------------------------------------------------------------


	//-----------------------set car state--------------------------------
	if(relayState == 1){
 8003b2c:	4b34      	ldr	r3, [pc, #208]	; (8003c00 <main+0x418>)
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d106      	bne.n	8003b42 <main+0x35a>
		//switch off the car
		HAL_GPIO_WritePin(OUTPUT_1_GPIO_Port, OUTPUT_1_Pin, 1);
 8003b34:	4b22      	ldr	r3, [pc, #136]	; (8003bc0 <main+0x3d8>)
 8003b36:	2201      	movs	r2, #1
 8003b38:	2102      	movs	r1, #2
 8003b3a:	0018      	movs	r0, r3
 8003b3c:	f006 fa7b 	bl	800a036 <HAL_GPIO_WritePin>
 8003b40:	e005      	b.n	8003b4e <main+0x366>
	}
	else{
		//switch on the car
		HAL_GPIO_WritePin(OUTPUT_1_GPIO_Port, OUTPUT_1_Pin, 0);
 8003b42:	4b1f      	ldr	r3, [pc, #124]	; (8003bc0 <main+0x3d8>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	2102      	movs	r1, #2
 8003b48:	0018      	movs	r0, r3
 8003b4a:	f006 fa74 	bl	800a036 <HAL_GPIO_WritePin>
	}

	//---------------------------------------------------------------------

	HAL_GPIO_WritePin(PWR_KEY_GPIO_Port, PWR_KEY_Pin, 1);
 8003b4e:	2380      	movs	r3, #128	; 0x80
 8003b50:	019b      	lsls	r3, r3, #6
 8003b52:	481b      	ldr	r0, [pc, #108]	; (8003bc0 <main+0x3d8>)
 8003b54:	2201      	movs	r2, #1
 8003b56:	0019      	movs	r1, r3
 8003b58:	f006 fa6d 	bl	800a036 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8003b5c:	23fa      	movs	r3, #250	; 0xfa
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	0018      	movs	r0, r3
 8003b62:	f005 ff19 	bl	8009998 <HAL_Delay>
	HAL_GPIO_WritePin(PWR_KEY_GPIO_Port, PWR_KEY_Pin, 0);
 8003b66:	2380      	movs	r3, #128	; 0x80
 8003b68:	019b      	lsls	r3, r3, #6
 8003b6a:	4815      	ldr	r0, [pc, #84]	; (8003bc0 <main+0x3d8>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	0019      	movs	r1, r3
 8003b70:	f006 fa61 	bl	800a036 <HAL_GPIO_WritePin>
	HAL_Delay(5000);
 8003b74:	4b24      	ldr	r3, [pc, #144]	; (8003c08 <main+0x420>)
 8003b76:	0018      	movs	r0, r3
 8003b78:	f005 ff0e 	bl	8009998 <HAL_Delay>
	quectel_init();
 8003b7c:	f002 fecc 	bl	8006918 <quectel_init>

//	INPUT CAPTURE------
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8003b80:	4b0b      	ldr	r3, [pc, #44]	; (8003bb0 <main+0x3c8>)
 8003b82:	2100      	movs	r1, #0
 8003b84:	0018      	movs	r0, r3
 8003b86:	f008 fa23 	bl	800bfd0 <HAL_TIM_IC_Start_IT>
//	HAL_TIM_IC_Start_DMA(&htim3, TIM_CHANNEL_1, vals, NUMVAL);
	ab=1;
 8003b8a:	4b20      	ldr	r3, [pc, #128]	; (8003c0c <main+0x424>)
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		while (isTcpOpen == 0 && isLoggedIn == 0) {
 8003b90:	e0a4      	b.n	8003cdc <main+0x4f4>
			stats = 1;
 8003b92:	4b1f      	ldr	r3, [pc, #124]	; (8003c10 <main+0x428>)
 8003b94:	2201      	movs	r2, #1
 8003b96:	701a      	strb	r2, [r3, #0]
			while (isReg == 0) {
 8003b98:	e05e      	b.n	8003c58 <main+0x470>
 8003b9a:	46c0      	nop			; (mov r8, r8)
 8003b9c:	200003e4 	.word	0x200003e4
 8003ba0:	20000430 	.word	0x20000430
 8003ba4:	20000398 	.word	0x20000398
 8003ba8:	20000744 	.word	0x20000744
 8003bac:	2000055c 	.word	0x2000055c
 8003bb0:	2000034c 	.word	0x2000034c
 8003bb4:	2000047c 	.word	0x2000047c
 8003bb8:	20000740 	.word	0x20000740
 8003bbc:	200004c8 	.word	0x200004c8
 8003bc0:	50000400 	.word	0x50000400
 8003bc4:	20000738 	.word	0x20000738
 8003bc8:	20000739 	.word	0x20000739
 8003bcc:	20000d14 	.word	0x20000d14
 8003bd0:	20000d16 	.word	0x20000d16
 8003bd4:	20000d18 	.word	0x20000d18
 8003bd8:	20000d1a 	.word	0x20000d1a
 8003bdc:	ffffff00 	.word	0xffffff00
 8003be0:	20000014 	.word	0x20000014
 8003be4:	20000008 	.word	0x20000008
 8003be8:	20000038 	.word	0x20000038
 8003bec:	20000030 	.word	0x20000030
 8003bf0:	20000004 	.word	0x20000004
 8003bf4:	20000005 	.word	0x20000005
 8003bf8:	2000073a 	.word	0x2000073a
 8003bfc:	20000734 	.word	0x20000734
 8003c00:	20000724 	.word	0x20000724
 8003c04:	2000071e 	.word	0x2000071e
 8003c08:	00001388 	.word	0x00001388
 8003c0c:	20000d1e 	.word	0x20000d1e
 8003c10:	20000d1d 	.word	0x20000d1d
				stats = 2;
 8003c14:	4b6f      	ldr	r3, [pc, #444]	; (8003dd4 <main+0x5ec>)
 8003c16:	2202      	movs	r2, #2
 8003c18:	701a      	strb	r2, [r3, #0]
				// HAL_UART_Transmit(&huart4, "at+creg",
				// sizeof("at+creg"), 100);
				send_command("AT+CREG?\r\n", 3, 3, 5, 1);
 8003c1a:	486f      	ldr	r0, [pc, #444]	; (8003dd8 <main+0x5f0>)
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	2305      	movs	r3, #5
 8003c22:	2203      	movs	r2, #3
 8003c24:	2103      	movs	r1, #3
 8003c26:	f002 fdc7 	bl	80067b8 <send_command>
				if (!isReg) {
 8003c2a:	4b6c      	ldr	r3, [pc, #432]	; (8003ddc <main+0x5f4>)
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d112      	bne.n	8003c58 <main+0x470>
					HAL_Delay(10000);
 8003c32:	4b6b      	ldr	r3, [pc, #428]	; (8003de0 <main+0x5f8>)
 8003c34:	0018      	movs	r0, r3
 8003c36:	f005 feaf 	bl	8009998 <HAL_Delay>
					stats = 3;
 8003c3a:	4b66      	ldr	r3, [pc, #408]	; (8003dd4 <main+0x5ec>)
 8003c3c:	2203      	movs	r2, #3
 8003c3e:	701a      	strb	r2, [r3, #0]
					rebootCounter++;
 8003c40:	4b68      	ldr	r3, [pc, #416]	; (8003de4 <main+0x5fc>)
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	3301      	adds	r3, #1
 8003c46:	b2da      	uxtb	r2, r3
 8003c48:	4b66      	ldr	r3, [pc, #408]	; (8003de4 <main+0x5fc>)
 8003c4a:	701a      	strb	r2, [r3, #0]
					if (rebootCounter > mainCount) {
 8003c4c:	4b65      	ldr	r3, [pc, #404]	; (8003de4 <main+0x5fc>)
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	2b78      	cmp	r3, #120	; 0x78
 8003c52:	d901      	bls.n	8003c58 <main+0x470>
						rebootsystem();
 8003c54:	f002 fc18 	bl	8006488 <rebootsystem>
			while (isReg == 0) {
 8003c58:	4b60      	ldr	r3, [pc, #384]	; (8003ddc <main+0x5f4>)
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d0d9      	beq.n	8003c14 <main+0x42c>
					}
				}
			}
			if (estabilish_tcp() == 1) {
 8003c60:	f002 feb4 	bl	80069cc <estabilish_tcp>
 8003c64:	0003      	movs	r3, r0
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d11c      	bne.n	8003ca4 <main+0x4bc>
				stats = 4;
 8003c6a:	4b5a      	ldr	r3, [pc, #360]	; (8003dd4 <main+0x5ec>)
 8003c6c:	2204      	movs	r2, #4
 8003c6e:	701a      	strb	r2, [r3, #0]
				// HAL_UART_Transmit(&huart4, "Loginpacket sending",
				// sizeof("loginpacket sending"), 100);
				send_login_packet();
 8003c70:	f003 f896 	bl	8006da0 <send_login_packet>
				HAL_Delay(5000);
 8003c74:	4b5c      	ldr	r3, [pc, #368]	; (8003de8 <main+0x600>)
 8003c76:	0018      	movs	r0, r3
 8003c78:	f005 fe8e 	bl	8009998 <HAL_Delay>
				if (isLoggedIn == 0) {
 8003c7c:	4b5b      	ldr	r3, [pc, #364]	; (8003dec <main+0x604>)
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d12a      	bne.n	8003cdc <main+0x4f4>
					// HAL_UART_Transmit(&huart4, "Loginpacket sending",
					// sizeof("loginpacket sending"), 100);
					send_login_packet();
 8003c86:	f003 f88b 	bl	8006da0 <send_login_packet>
					HAL_Delay(5000);
 8003c8a:	4b57      	ldr	r3, [pc, #348]	; (8003de8 <main+0x600>)
 8003c8c:	0018      	movs	r0, r3
 8003c8e:	f005 fe83 	bl	8009998 <HAL_Delay>
					if (isLoggedIn == 0) {
 8003c92:	4b56      	ldr	r3, [pc, #344]	; (8003dec <main+0x604>)
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d11f      	bne.n	8003cdc <main+0x4f4>
						isTcpOpen = 0;
 8003c9c:	4b54      	ldr	r3, [pc, #336]	; (8003df0 <main+0x608>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	701a      	strb	r2, [r3, #0]
 8003ca2:	e01b      	b.n	8003cdc <main+0x4f4>
					}
				}
			}
			else {
				stats = 5;
 8003ca4:	4b4b      	ldr	r3, [pc, #300]	; (8003dd4 <main+0x5ec>)
 8003ca6:	2205      	movs	r2, #5
 8003ca8:	701a      	strb	r2, [r3, #0]
				recTimeA = 0;
 8003caa:	4b52      	ldr	r3, [pc, #328]	; (8003df4 <main+0x60c>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	701a      	strb	r2, [r3, #0]
				while (recTimeA < rTime) { //18 to 180
 8003cb0:	e00e      	b.n	8003cd0 <main+0x4e8>
					HAL_Delay(1000);
 8003cb2:	23fa      	movs	r3, #250	; 0xfa
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	0018      	movs	r0, r3
 8003cb8:	f005 fe6e 	bl	8009998 <HAL_Delay>
					recTimeA++;
 8003cbc:	4b4d      	ldr	r3, [pc, #308]	; (8003df4 <main+0x60c>)
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	b2da      	uxtb	r2, r3
 8003cc4:	4b4b      	ldr	r3, [pc, #300]	; (8003df4 <main+0x60c>)
 8003cc6:	701a      	strb	r2, [r3, #0]
					where_api_handler();
 8003cc8:	f002 ff7e 	bl	8006bc8 <where_api_handler>
					alarm_sender();
 8003ccc:	f002 ffb6 	bl	8006c3c <alarm_sender>
				while (recTimeA < rTime) { //18 to 180
 8003cd0:	4b48      	ldr	r3, [pc, #288]	; (8003df4 <main+0x60c>)
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	2bb3      	cmp	r3, #179	; 0xb3
 8003cd6:	d9ec      	bls.n	8003cb2 <main+0x4ca>
				}
				//SEND LOCATION VIA SMS
				//--------------------------------------------------------------------------
				send_location_packet_via_sms();
 8003cd8:	f004 f8b8 	bl	8007e4c <send_location_packet_via_sms>
		while (isTcpOpen == 0 && isLoggedIn == 0) {
 8003cdc:	4b44      	ldr	r3, [pc, #272]	; (8003df0 <main+0x608>)
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d15c      	bne.n	8003da0 <main+0x5b8>
 8003ce6:	4b41      	ldr	r3, [pc, #260]	; (8003dec <main+0x604>)
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d100      	bne.n	8003cf2 <main+0x50a>
 8003cf0:	e74f      	b.n	8003b92 <main+0x3aa>
				//--------------------------------------------------------
			}
		}
		while (isTcpOpen == 1 && isLoggedIn == 1 && isDataMode == 1) {
 8003cf2:	e055      	b.n	8003da0 <main+0x5b8>
			stats = 7;
 8003cf4:	4b37      	ldr	r3, [pc, #220]	; (8003dd4 <main+0x5ec>)
 8003cf6:	2207      	movs	r2, #7
 8003cf8:	701a      	strb	r2, [r3, #0]
			uint8_t tempDelayCounter=0;
 8003cfa:	23fc      	movs	r3, #252	; 0xfc
 8003cfc:	18fb      	adds	r3, r7, r3
 8003cfe:	2200      	movs	r2, #0
 8003d00:	701a      	strb	r2, [r3, #0]
			while(isAlarm == 0){
 8003d02:	e014      	b.n	8003d2e <main+0x546>
				tempDelayCounter++;
 8003d04:	21fc      	movs	r1, #252	; 0xfc
 8003d06:	187b      	adds	r3, r7, r1
 8003d08:	781a      	ldrb	r2, [r3, #0]
 8003d0a:	187b      	adds	r3, r7, r1
 8003d0c:	3201      	adds	r2, #1
 8003d0e:	701a      	strb	r2, [r3, #0]
				if(tempDelayCounter>locationDataIntervalA){
 8003d10:	4b39      	ldr	r3, [pc, #228]	; (8003df8 <main+0x610>)
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	187a      	adds	r2, r7, r1
 8003d16:	7812      	ldrb	r2, [r2, #0]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d903      	bls.n	8003d24 <main+0x53c>
					tempDelayCounter=0;
 8003d1c:	187b      	adds	r3, r7, r1
 8003d1e:	2200      	movs	r2, #0
 8003d20:	701a      	strb	r2, [r3, #0]
					break;
 8003d22:	e009      	b.n	8003d38 <main+0x550>
				}
				else{
					HAL_Delay(1000);
 8003d24:	23fa      	movs	r3, #250	; 0xfa
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	0018      	movs	r0, r3
 8003d2a:	f005 fe35 	bl	8009998 <HAL_Delay>
			while(isAlarm == 0){
 8003d2e:	4b33      	ldr	r3, [pc, #204]	; (8003dfc <main+0x614>)
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d0e5      	beq.n	8003d04 <main+0x51c>
				}
			}
			HAL_Delay(1000);
 8003d38:	23fa      	movs	r3, #250	; 0xfa
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	0018      	movs	r0, r3
 8003d3e:	f005 fe2b 	bl	8009998 <HAL_Delay>
//			HAL_Delay(locationDataIntervalA*1000);
			heartBeatTimer++;
 8003d42:	4b2f      	ldr	r3, [pc, #188]	; (8003e00 <main+0x618>)
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	3301      	adds	r3, #1
 8003d48:	b2da      	uxtb	r2, r3
 8003d4a:	4b2d      	ldr	r3, [pc, #180]	; (8003e00 <main+0x618>)
 8003d4c:	701a      	strb	r2, [r3, #0]
			if (heartBeatTimer > 36) {
 8003d4e:	4b2c      	ldr	r3, [pc, #176]	; (8003e00 <main+0x618>)
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	2b24      	cmp	r3, #36	; 0x24
 8003d54:	d90e      	bls.n	8003d74 <main+0x58c>
				stats = 8;
 8003d56:	4b1f      	ldr	r3, [pc, #124]	; (8003dd4 <main+0x5ec>)
 8003d58:	2208      	movs	r2, #8
 8003d5a:	701a      	strb	r2, [r3, #0]
				isLoggedIn = 0;
 8003d5c:	4b23      	ldr	r3, [pc, #140]	; (8003dec <main+0x604>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	701a      	strb	r2, [r3, #0]
				send_hb_packet();
 8003d62:	f003 fc41 	bl	80075e8 <send_hb_packet>
				HAL_Delay(10000);
 8003d66:	4b1e      	ldr	r3, [pc, #120]	; (8003de0 <main+0x5f8>)
 8003d68:	0018      	movs	r0, r3
 8003d6a:	f005 fe15 	bl	8009998 <HAL_Delay>
				heartBeatTimer = 0;
 8003d6e:	4b24      	ldr	r3, [pc, #144]	; (8003e00 <main+0x618>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	701a      	strb	r2, [r3, #0]
			}
			if (isDataMode == 1 && isLoggedIn == 1 && isTcpOpen == 1) {
 8003d74:	4b23      	ldr	r3, [pc, #140]	; (8003e04 <main+0x61c>)
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d110      	bne.n	8003da0 <main+0x5b8>
 8003d7e:	4b1b      	ldr	r3, [pc, #108]	; (8003dec <main+0x604>)
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d10b      	bne.n	8003da0 <main+0x5b8>
 8003d88:	4b19      	ldr	r3, [pc, #100]	; (8003df0 <main+0x608>)
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d106      	bne.n	8003da0 <main+0x5b8>
				stats = 8;
 8003d92:	4b10      	ldr	r3, [pc, #64]	; (8003dd4 <main+0x5ec>)
 8003d94:	2208      	movs	r2, #8
 8003d96:	701a      	strb	r2, [r3, #0]
				incoming_msg_handler();
 8003d98:	f002 ff9e 	bl	8006cd8 <incoming_msg_handler>
				send_data_packet();
 8003d9c:	f003 f882 	bl	8006ea4 <send_data_packet>
		while (isTcpOpen == 1 && isLoggedIn == 1 && isDataMode == 1) {
 8003da0:	4b13      	ldr	r3, [pc, #76]	; (8003df0 <main+0x608>)
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d109      	bne.n	8003dbe <main+0x5d6>
 8003daa:	4b10      	ldr	r3, [pc, #64]	; (8003dec <main+0x604>)
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d104      	bne.n	8003dbe <main+0x5d6>
 8003db4:	4b13      	ldr	r3, [pc, #76]	; (8003e04 <main+0x61c>)
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d09a      	beq.n	8003cf4 <main+0x50c>
			}

		}
		isTcpOpen = 0;
 8003dbe:	4b0c      	ldr	r3, [pc, #48]	; (8003df0 <main+0x608>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	701a      	strb	r2, [r3, #0]
		isLoggedIn = 0;
 8003dc4:	4b09      	ldr	r3, [pc, #36]	; (8003dec <main+0x604>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	701a      	strb	r2, [r3, #0]
		isDataMode = 0;
 8003dca:	4b0e      	ldr	r3, [pc, #56]	; (8003e04 <main+0x61c>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	701a      	strb	r2, [r3, #0]
		while (isTcpOpen == 0 && isLoggedIn == 0) {
 8003dd0:	e784      	b.n	8003cdc <main+0x4f4>
 8003dd2:	46c0      	nop			; (mov r8, r8)
 8003dd4:	20000d1d 	.word	0x20000d1d
 8003dd8:	08013170 	.word	0x08013170
 8003ddc:	20000a2d 	.word	0x20000a2d
 8003de0:	00002710 	.word	0x00002710
 8003de4:	2000073f 	.word	0x2000073f
 8003de8:	00001388 	.word	0x00001388
 8003dec:	20000a30 	.word	0x20000a30
 8003df0:	20000a2c 	.word	0x20000a2c
 8003df4:	2000073b 	.word	0x2000073b
 8003df8:	20000004 	.word	0x20000004
 8003dfc:	20000725 	.word	0x20000725
 8003e00:	2000073e 	.word	0x2000073e
 8003e04:	2000087a 	.word	0x2000087a

08003e08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003e08:	b590      	push	{r4, r7, lr}
 8003e0a:	b093      	sub	sp, #76	; 0x4c
 8003e0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003e0e:	2414      	movs	r4, #20
 8003e10:	193b      	adds	r3, r7, r4
 8003e12:	0018      	movs	r0, r3
 8003e14:	2334      	movs	r3, #52	; 0x34
 8003e16:	001a      	movs	r2, r3
 8003e18:	2100      	movs	r1, #0
 8003e1a:	f00a ff56 	bl	800ecca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003e1e:	1d3b      	adds	r3, r7, #4
 8003e20:	0018      	movs	r0, r3
 8003e22:	2310      	movs	r3, #16
 8003e24:	001a      	movs	r2, r3
 8003e26:	2100      	movs	r1, #0
 8003e28:	f00a ff4f 	bl	800ecca <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e2c:	2380      	movs	r3, #128	; 0x80
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	0018      	movs	r0, r3
 8003e32:	f006 f939 	bl	800a0a8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003e36:	193b      	adds	r3, r7, r4
 8003e38:	2202      	movs	r2, #2
 8003e3a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003e3c:	193b      	adds	r3, r7, r4
 8003e3e:	2280      	movs	r2, #128	; 0x80
 8003e40:	0052      	lsls	r2, r2, #1
 8003e42:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8003e44:	0021      	movs	r1, r4
 8003e46:	187b      	adds	r3, r7, r1
 8003e48:	2200      	movs	r2, #0
 8003e4a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003e4c:	187b      	adds	r3, r7, r1
 8003e4e:	2240      	movs	r2, #64	; 0x40
 8003e50:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e52:	187b      	adds	r3, r7, r1
 8003e54:	2202      	movs	r2, #2
 8003e56:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003e58:	187b      	adds	r3, r7, r1
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8003e5e:	187b      	adds	r3, r7, r1
 8003e60:	2200      	movs	r2, #0
 8003e62:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8003e64:	187b      	adds	r3, r7, r1
 8003e66:	2208      	movs	r2, #8
 8003e68:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003e6a:	187b      	adds	r3, r7, r1
 8003e6c:	2280      	movs	r2, #128	; 0x80
 8003e6e:	0292      	lsls	r2, r2, #10
 8003e70:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003e72:	187b      	adds	r3, r7, r1
 8003e74:	2280      	movs	r2, #128	; 0x80
 8003e76:	0592      	lsls	r2, r2, #22
 8003e78:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e7a:	187b      	adds	r3, r7, r1
 8003e7c:	0018      	movs	r0, r3
 8003e7e:	f006 f95f 	bl	800a140 <HAL_RCC_OscConfig>
 8003e82:	1e03      	subs	r3, r0, #0
 8003e84:	d001      	beq.n	8003e8a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8003e86:	f004 fc09 	bl	800869c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e8a:	1d3b      	adds	r3, r7, #4
 8003e8c:	2207      	movs	r2, #7
 8003e8e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e90:	1d3b      	adds	r3, r7, #4
 8003e92:	2202      	movs	r2, #2
 8003e94:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e96:	1d3b      	adds	r3, r7, #4
 8003e98:	2200      	movs	r2, #0
 8003e9a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003e9c:	1d3b      	adds	r3, r7, #4
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003ea2:	1d3b      	adds	r3, r7, #4
 8003ea4:	2102      	movs	r1, #2
 8003ea6:	0018      	movs	r0, r3
 8003ea8:	f006 fc5a 	bl	800a760 <HAL_RCC_ClockConfig>
 8003eac:	1e03      	subs	r3, r0, #0
 8003eae:	d001      	beq.n	8003eb4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8003eb0:	f004 fbf4 	bl	800869c <Error_Handler>
  }
}
 8003eb4:	46c0      	nop			; (mov r8, r8)
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	b013      	add	sp, #76	; 0x4c
 8003eba:	bd90      	pop	{r4, r7, pc}

08003ebc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003ec0:	4b1b      	ldr	r3, [pc, #108]	; (8003f30 <MX_SPI1_Init+0x74>)
 8003ec2:	4a1c      	ldr	r2, [pc, #112]	; (8003f34 <MX_SPI1_Init+0x78>)
 8003ec4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003ec6:	4b1a      	ldr	r3, [pc, #104]	; (8003f30 <MX_SPI1_Init+0x74>)
 8003ec8:	2282      	movs	r2, #130	; 0x82
 8003eca:	0052      	lsls	r2, r2, #1
 8003ecc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003ece:	4b18      	ldr	r3, [pc, #96]	; (8003f30 <MX_SPI1_Init+0x74>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003ed4:	4b16      	ldr	r3, [pc, #88]	; (8003f30 <MX_SPI1_Init+0x74>)
 8003ed6:	22e0      	movs	r2, #224	; 0xe0
 8003ed8:	00d2      	lsls	r2, r2, #3
 8003eda:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003edc:	4b14      	ldr	r3, [pc, #80]	; (8003f30 <MX_SPI1_Init+0x74>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003ee2:	4b13      	ldr	r3, [pc, #76]	; (8003f30 <MX_SPI1_Init+0x74>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003ee8:	4b11      	ldr	r3, [pc, #68]	; (8003f30 <MX_SPI1_Init+0x74>)
 8003eea:	2280      	movs	r2, #128	; 0x80
 8003eec:	0092      	lsls	r2, r2, #2
 8003eee:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003ef0:	4b0f      	ldr	r3, [pc, #60]	; (8003f30 <MX_SPI1_Init+0x74>)
 8003ef2:	2220      	movs	r2, #32
 8003ef4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003ef6:	4b0e      	ldr	r3, [pc, #56]	; (8003f30 <MX_SPI1_Init+0x74>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003efc:	4b0c      	ldr	r3, [pc, #48]	; (8003f30 <MX_SPI1_Init+0x74>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f02:	4b0b      	ldr	r3, [pc, #44]	; (8003f30 <MX_SPI1_Init+0x74>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003f08:	4b09      	ldr	r3, [pc, #36]	; (8003f30 <MX_SPI1_Init+0x74>)
 8003f0a:	2207      	movs	r2, #7
 8003f0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003f0e:	4b08      	ldr	r3, [pc, #32]	; (8003f30 <MX_SPI1_Init+0x74>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003f14:	4b06      	ldr	r3, [pc, #24]	; (8003f30 <MX_SPI1_Init+0x74>)
 8003f16:	2208      	movs	r2, #8
 8003f18:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003f1a:	4b05      	ldr	r3, [pc, #20]	; (8003f30 <MX_SPI1_Init+0x74>)
 8003f1c:	0018      	movs	r0, r3
 8003f1e:	f006 fefd 	bl	800ad1c <HAL_SPI_Init>
 8003f22:	1e03      	subs	r3, r0, #0
 8003f24:	d001      	beq.n	8003f2a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003f26:	f004 fbb9 	bl	800869c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003f2a:	46c0      	nop			; (mov r8, r8)
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	200002e8 	.word	0x200002e8
 8003f34:	40013000 	.word	0x40013000

08003f38 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b08c      	sub	sp, #48	; 0x30
 8003f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f3e:	2320      	movs	r3, #32
 8003f40:	18fb      	adds	r3, r7, r3
 8003f42:	0018      	movs	r0, r3
 8003f44:	2310      	movs	r3, #16
 8003f46:	001a      	movs	r2, r3
 8003f48:	2100      	movs	r1, #0
 8003f4a:	f00a febe 	bl	800ecca <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f4e:	2314      	movs	r3, #20
 8003f50:	18fb      	adds	r3, r7, r3
 8003f52:	0018      	movs	r0, r3
 8003f54:	230c      	movs	r3, #12
 8003f56:	001a      	movs	r2, r3
 8003f58:	2100      	movs	r1, #0
 8003f5a:	f00a feb6 	bl	800ecca <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003f5e:	1d3b      	adds	r3, r7, #4
 8003f60:	0018      	movs	r0, r3
 8003f62:	2310      	movs	r3, #16
 8003f64:	001a      	movs	r2, r3
 8003f66:	2100      	movs	r1, #0
 8003f68:	f00a feaf 	bl	800ecca <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003f6c:	4b2e      	ldr	r3, [pc, #184]	; (8004028 <MX_TIM3_Init+0xf0>)
 8003f6e:	4a2f      	ldr	r2, [pc, #188]	; (800402c <MX_TIM3_Init+0xf4>)
 8003f70:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64000;
 8003f72:	4b2d      	ldr	r3, [pc, #180]	; (8004028 <MX_TIM3_Init+0xf0>)
 8003f74:	22fa      	movs	r2, #250	; 0xfa
 8003f76:	0212      	lsls	r2, r2, #8
 8003f78:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f7a:	4b2b      	ldr	r3, [pc, #172]	; (8004028 <MX_TIM3_Init+0xf0>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8003f80:	4b29      	ldr	r3, [pc, #164]	; (8004028 <MX_TIM3_Init+0xf0>)
 8003f82:	22fa      	movs	r2, #250	; 0xfa
 8003f84:	0092      	lsls	r2, r2, #2
 8003f86:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f88:	4b27      	ldr	r3, [pc, #156]	; (8004028 <MX_TIM3_Init+0xf0>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003f8e:	4b26      	ldr	r3, [pc, #152]	; (8004028 <MX_TIM3_Init+0xf0>)
 8003f90:	2280      	movs	r2, #128	; 0x80
 8003f92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003f94:	4b24      	ldr	r3, [pc, #144]	; (8004028 <MX_TIM3_Init+0xf0>)
 8003f96:	0018      	movs	r0, r3
 8003f98:	f007 fede 	bl	800bd58 <HAL_TIM_Base_Init>
 8003f9c:	1e03      	subs	r3, r0, #0
 8003f9e:	d001      	beq.n	8003fa4 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8003fa0:	f004 fb7c 	bl	800869c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003fa4:	2120      	movs	r1, #32
 8003fa6:	187b      	adds	r3, r7, r1
 8003fa8:	2280      	movs	r2, #128	; 0x80
 8003faa:	0152      	lsls	r2, r2, #5
 8003fac:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003fae:	187a      	adds	r2, r7, r1
 8003fb0:	4b1d      	ldr	r3, [pc, #116]	; (8004028 <MX_TIM3_Init+0xf0>)
 8003fb2:	0011      	movs	r1, r2
 8003fb4:	0018      	movs	r0, r3
 8003fb6:	f008 fb13 	bl	800c5e0 <HAL_TIM_ConfigClockSource>
 8003fba:	1e03      	subs	r3, r0, #0
 8003fbc:	d001      	beq.n	8003fc2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8003fbe:	f004 fb6d 	bl	800869c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8003fc2:	4b19      	ldr	r3, [pc, #100]	; (8004028 <MX_TIM3_Init+0xf0>)
 8003fc4:	0018      	movs	r0, r3
 8003fc6:	f007 ffa3 	bl	800bf10 <HAL_TIM_IC_Init>
 8003fca:	1e03      	subs	r3, r0, #0
 8003fcc:	d001      	beq.n	8003fd2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8003fce:	f004 fb65 	bl	800869c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fd2:	2114      	movs	r1, #20
 8003fd4:	187b      	adds	r3, r7, r1
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fda:	187b      	adds	r3, r7, r1
 8003fdc:	2200      	movs	r2, #0
 8003fde:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003fe0:	187a      	adds	r2, r7, r1
 8003fe2:	4b11      	ldr	r3, [pc, #68]	; (8004028 <MX_TIM3_Init+0xf0>)
 8003fe4:	0011      	movs	r1, r2
 8003fe6:	0018      	movs	r0, r3
 8003fe8:	f008 fe3e 	bl	800cc68 <HAL_TIMEx_MasterConfigSynchronization>
 8003fec:	1e03      	subs	r3, r0, #0
 8003fee:	d001      	beq.n	8003ff4 <MX_TIM3_Init+0xbc>
  {
    Error_Handler();
 8003ff0:	f004 fb54 	bl	800869c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8003ff4:	1d3b      	adds	r3, r7, #4
 8003ff6:	220a      	movs	r2, #10
 8003ff8:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003ffa:	1d3b      	adds	r3, r7, #4
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004000:	1d3b      	adds	r3, r7, #4
 8004002:	2200      	movs	r2, #0
 8004004:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8004006:	1d3b      	adds	r3, r7, #4
 8004008:	2200      	movs	r2, #0
 800400a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800400c:	1d39      	adds	r1, r7, #4
 800400e:	4b06      	ldr	r3, [pc, #24]	; (8004028 <MX_TIM3_Init+0xf0>)
 8004010:	2200      	movs	r2, #0
 8004012:	0018      	movs	r0, r3
 8004014:	f008 fa40 	bl	800c498 <HAL_TIM_IC_ConfigChannel>
 8004018:	1e03      	subs	r3, r0, #0
 800401a:	d001      	beq.n	8004020 <MX_TIM3_Init+0xe8>
  {
    Error_Handler();
 800401c:	f004 fb3e 	bl	800869c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004020:	46c0      	nop			; (mov r8, r8)
 8004022:	46bd      	mov	sp, r7
 8004024:	b00c      	add	sp, #48	; 0x30
 8004026:	bd80      	pop	{r7, pc}
 8004028:	2000034c 	.word	0x2000034c
 800402c:	40000400 	.word	0x40000400

08004030 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004036:	1d3b      	adds	r3, r7, #4
 8004038:	0018      	movs	r0, r3
 800403a:	230c      	movs	r3, #12
 800403c:	001a      	movs	r2, r3
 800403e:	2100      	movs	r1, #0
 8004040:	f00a fe43 	bl	800ecca <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004044:	4b15      	ldr	r3, [pc, #84]	; (800409c <MX_TIM6_Init+0x6c>)
 8004046:	4a16      	ldr	r2, [pc, #88]	; (80040a0 <MX_TIM6_Init+0x70>)
 8004048:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 6400;
 800404a:	4b14      	ldr	r3, [pc, #80]	; (800409c <MX_TIM6_Init+0x6c>)
 800404c:	22c8      	movs	r2, #200	; 0xc8
 800404e:	0152      	lsls	r2, r2, #5
 8004050:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004052:	4b12      	ldr	r3, [pc, #72]	; (800409c <MX_TIM6_Init+0x6c>)
 8004054:	2200      	movs	r2, #0
 8004056:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8004058:	4b10      	ldr	r3, [pc, #64]	; (800409c <MX_TIM6_Init+0x6c>)
 800405a:	4a12      	ldr	r2, [pc, #72]	; (80040a4 <MX_TIM6_Init+0x74>)
 800405c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800405e:	4b0f      	ldr	r3, [pc, #60]	; (800409c <MX_TIM6_Init+0x6c>)
 8004060:	2280      	movs	r2, #128	; 0x80
 8004062:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004064:	4b0d      	ldr	r3, [pc, #52]	; (800409c <MX_TIM6_Init+0x6c>)
 8004066:	0018      	movs	r0, r3
 8004068:	f007 fe76 	bl	800bd58 <HAL_TIM_Base_Init>
 800406c:	1e03      	subs	r3, r0, #0
 800406e:	d001      	beq.n	8004074 <MX_TIM6_Init+0x44>
  {
    Error_Handler();
 8004070:	f004 fb14 	bl	800869c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004074:	1d3b      	adds	r3, r7, #4
 8004076:	2200      	movs	r2, #0
 8004078:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800407a:	1d3b      	adds	r3, r7, #4
 800407c:	2200      	movs	r2, #0
 800407e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004080:	1d3a      	adds	r2, r7, #4
 8004082:	4b06      	ldr	r3, [pc, #24]	; (800409c <MX_TIM6_Init+0x6c>)
 8004084:	0011      	movs	r1, r2
 8004086:	0018      	movs	r0, r3
 8004088:	f008 fdee 	bl	800cc68 <HAL_TIMEx_MasterConfigSynchronization>
 800408c:	1e03      	subs	r3, r0, #0
 800408e:	d001      	beq.n	8004094 <MX_TIM6_Init+0x64>
  {
    Error_Handler();
 8004090:	f004 fb04 	bl	800869c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004094:	46c0      	nop			; (mov r8, r8)
 8004096:	46bd      	mov	sp, r7
 8004098:	b004      	add	sp, #16
 800409a:	bd80      	pop	{r7, pc}
 800409c:	20000398 	.word	0x20000398
 80040a0:	40001000 	.word	0x40001000
 80040a4:	000003e7 	.word	0x000003e7

080040a8 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80040ac:	4b0e      	ldr	r3, [pc, #56]	; (80040e8 <MX_TIM14_Init+0x40>)
 80040ae:	4a0f      	ldr	r2, [pc, #60]	; (80040ec <MX_TIM14_Init+0x44>)
 80040b0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 6400;
 80040b2:	4b0d      	ldr	r3, [pc, #52]	; (80040e8 <MX_TIM14_Init+0x40>)
 80040b4:	22c8      	movs	r2, #200	; 0xc8
 80040b6:	0152      	lsls	r2, r2, #5
 80040b8:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040ba:	4b0b      	ldr	r3, [pc, #44]	; (80040e8 <MX_TIM14_Init+0x40>)
 80040bc:	2200      	movs	r2, #0
 80040be:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000-1;
 80040c0:	4b09      	ldr	r3, [pc, #36]	; (80040e8 <MX_TIM14_Init+0x40>)
 80040c2:	4a0b      	ldr	r2, [pc, #44]	; (80040f0 <MX_TIM14_Init+0x48>)
 80040c4:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040c6:	4b08      	ldr	r3, [pc, #32]	; (80040e8 <MX_TIM14_Init+0x40>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80040cc:	4b06      	ldr	r3, [pc, #24]	; (80040e8 <MX_TIM14_Init+0x40>)
 80040ce:	2280      	movs	r2, #128	; 0x80
 80040d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80040d2:	4b05      	ldr	r3, [pc, #20]	; (80040e8 <MX_TIM14_Init+0x40>)
 80040d4:	0018      	movs	r0, r3
 80040d6:	f007 fe3f 	bl	800bd58 <HAL_TIM_Base_Init>
 80040da:	1e03      	subs	r3, r0, #0
 80040dc:	d001      	beq.n	80040e2 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 80040de:	f004 fadd 	bl	800869c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80040e2:	46c0      	nop			; (mov r8, r8)
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	200003e4 	.word	0x200003e4
 80040ec:	40002000 	.word	0x40002000
 80040f0:	0000270f 	.word	0x0000270f

080040f4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80040f8:	4b10      	ldr	r3, [pc, #64]	; (800413c <MX_TIM16_Init+0x48>)
 80040fa:	4a11      	ldr	r2, [pc, #68]	; (8004140 <MX_TIM16_Init+0x4c>)
 80040fc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 6400;
 80040fe:	4b0f      	ldr	r3, [pc, #60]	; (800413c <MX_TIM16_Init+0x48>)
 8004100:	22c8      	movs	r2, #200	; 0xc8
 8004102:	0152      	lsls	r2, r2, #5
 8004104:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004106:	4b0d      	ldr	r3, [pc, #52]	; (800413c <MX_TIM16_Init+0x48>)
 8004108:	2200      	movs	r2, #0
 800410a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000-1;
 800410c:	4b0b      	ldr	r3, [pc, #44]	; (800413c <MX_TIM16_Init+0x48>)
 800410e:	4a0d      	ldr	r2, [pc, #52]	; (8004144 <MX_TIM16_Init+0x50>)
 8004110:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004112:	4b0a      	ldr	r3, [pc, #40]	; (800413c <MX_TIM16_Init+0x48>)
 8004114:	2200      	movs	r2, #0
 8004116:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8004118:	4b08      	ldr	r3, [pc, #32]	; (800413c <MX_TIM16_Init+0x48>)
 800411a:	2200      	movs	r2, #0
 800411c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800411e:	4b07      	ldr	r3, [pc, #28]	; (800413c <MX_TIM16_Init+0x48>)
 8004120:	2280      	movs	r2, #128	; 0x80
 8004122:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8004124:	4b05      	ldr	r3, [pc, #20]	; (800413c <MX_TIM16_Init+0x48>)
 8004126:	0018      	movs	r0, r3
 8004128:	f007 fe16 	bl	800bd58 <HAL_TIM_Base_Init>
 800412c:	1e03      	subs	r3, r0, #0
 800412e:	d001      	beq.n	8004134 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8004130:	f004 fab4 	bl	800869c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8004134:	46c0      	nop			; (mov r8, r8)
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	46c0      	nop			; (mov r8, r8)
 800413c:	20000430 	.word	0x20000430
 8004140:	40014400 	.word	0x40014400
 8004144:	0000270f 	.word	0x0000270f

08004148 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800414c:	4b10      	ldr	r3, [pc, #64]	; (8004190 <MX_TIM17_Init+0x48>)
 800414e:	4a11      	ldr	r2, [pc, #68]	; (8004194 <MX_TIM17_Init+0x4c>)
 8004150:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 6400;
 8004152:	4b0f      	ldr	r3, [pc, #60]	; (8004190 <MX_TIM17_Init+0x48>)
 8004154:	22c8      	movs	r2, #200	; 0xc8
 8004156:	0152      	lsls	r2, r2, #5
 8004158:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800415a:	4b0d      	ldr	r3, [pc, #52]	; (8004190 <MX_TIM17_Init+0x48>)
 800415c:	2200      	movs	r2, #0
 800415e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 4000-1;
 8004160:	4b0b      	ldr	r3, [pc, #44]	; (8004190 <MX_TIM17_Init+0x48>)
 8004162:	4a0d      	ldr	r2, [pc, #52]	; (8004198 <MX_TIM17_Init+0x50>)
 8004164:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004166:	4b0a      	ldr	r3, [pc, #40]	; (8004190 <MX_TIM17_Init+0x48>)
 8004168:	2200      	movs	r2, #0
 800416a:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800416c:	4b08      	ldr	r3, [pc, #32]	; (8004190 <MX_TIM17_Init+0x48>)
 800416e:	2200      	movs	r2, #0
 8004170:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004172:	4b07      	ldr	r3, [pc, #28]	; (8004190 <MX_TIM17_Init+0x48>)
 8004174:	2280      	movs	r2, #128	; 0x80
 8004176:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8004178:	4b05      	ldr	r3, [pc, #20]	; (8004190 <MX_TIM17_Init+0x48>)
 800417a:	0018      	movs	r0, r3
 800417c:	f007 fdec 	bl	800bd58 <HAL_TIM_Base_Init>
 8004180:	1e03      	subs	r3, r0, #0
 8004182:	d001      	beq.n	8004188 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8004184:	f004 fa8a 	bl	800869c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8004188:	46c0      	nop			; (mov r8, r8)
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	46c0      	nop			; (mov r8, r8)
 8004190:	2000047c 	.word	0x2000047c
 8004194:	40014800 	.word	0x40014800
 8004198:	00000f9f 	.word	0x00000f9f

0800419c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80041a0:	4b23      	ldr	r3, [pc, #140]	; (8004230 <MX_USART1_UART_Init+0x94>)
 80041a2:	4a24      	ldr	r2, [pc, #144]	; (8004234 <MX_USART1_UART_Init+0x98>)
 80041a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80041a6:	4b22      	ldr	r3, [pc, #136]	; (8004230 <MX_USART1_UART_Init+0x94>)
 80041a8:	2296      	movs	r2, #150	; 0x96
 80041aa:	0192      	lsls	r2, r2, #6
 80041ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80041ae:	4b20      	ldr	r3, [pc, #128]	; (8004230 <MX_USART1_UART_Init+0x94>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80041b4:	4b1e      	ldr	r3, [pc, #120]	; (8004230 <MX_USART1_UART_Init+0x94>)
 80041b6:	2200      	movs	r2, #0
 80041b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80041ba:	4b1d      	ldr	r3, [pc, #116]	; (8004230 <MX_USART1_UART_Init+0x94>)
 80041bc:	2200      	movs	r2, #0
 80041be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80041c0:	4b1b      	ldr	r3, [pc, #108]	; (8004230 <MX_USART1_UART_Init+0x94>)
 80041c2:	220c      	movs	r2, #12
 80041c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80041c6:	4b1a      	ldr	r3, [pc, #104]	; (8004230 <MX_USART1_UART_Init+0x94>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80041cc:	4b18      	ldr	r3, [pc, #96]	; (8004230 <MX_USART1_UART_Init+0x94>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80041d2:	4b17      	ldr	r3, [pc, #92]	; (8004230 <MX_USART1_UART_Init+0x94>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80041d8:	4b15      	ldr	r3, [pc, #84]	; (8004230 <MX_USART1_UART_Init+0x94>)
 80041da:	2200      	movs	r2, #0
 80041dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80041de:	4b14      	ldr	r3, [pc, #80]	; (8004230 <MX_USART1_UART_Init+0x94>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80041e4:	4b12      	ldr	r3, [pc, #72]	; (8004230 <MX_USART1_UART_Init+0x94>)
 80041e6:	0018      	movs	r0, r3
 80041e8:	f008 fdbe 	bl	800cd68 <HAL_UART_Init>
 80041ec:	1e03      	subs	r3, r0, #0
 80041ee:	d001      	beq.n	80041f4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80041f0:	f004 fa54 	bl	800869c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80041f4:	4b0e      	ldr	r3, [pc, #56]	; (8004230 <MX_USART1_UART_Init+0x94>)
 80041f6:	2100      	movs	r1, #0
 80041f8:	0018      	movs	r0, r3
 80041fa:	f00a fc27 	bl	800ea4c <HAL_UARTEx_SetTxFifoThreshold>
 80041fe:	1e03      	subs	r3, r0, #0
 8004200:	d001      	beq.n	8004206 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8004202:	f004 fa4b 	bl	800869c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004206:	4b0a      	ldr	r3, [pc, #40]	; (8004230 <MX_USART1_UART_Init+0x94>)
 8004208:	2100      	movs	r1, #0
 800420a:	0018      	movs	r0, r3
 800420c:	f00a fc5e 	bl	800eacc <HAL_UARTEx_SetRxFifoThreshold>
 8004210:	1e03      	subs	r3, r0, #0
 8004212:	d001      	beq.n	8004218 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004214:	f004 fa42 	bl	800869c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004218:	4b05      	ldr	r3, [pc, #20]	; (8004230 <MX_USART1_UART_Init+0x94>)
 800421a:	0018      	movs	r0, r3
 800421c:	f00a fbdc 	bl	800e9d8 <HAL_UARTEx_DisableFifoMode>
 8004220:	1e03      	subs	r3, r0, #0
 8004222:	d001      	beq.n	8004228 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004224:	f004 fa3a 	bl	800869c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004228:	46c0      	nop			; (mov r8, r8)
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	46c0      	nop			; (mov r8, r8)
 8004230:	200004c8 	.word	0x200004c8
 8004234:	40013800 	.word	0x40013800

08004238 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800423c:	4b23      	ldr	r3, [pc, #140]	; (80042cc <MX_USART2_UART_Init+0x94>)
 800423e:	4a24      	ldr	r2, [pc, #144]	; (80042d0 <MX_USART2_UART_Init+0x98>)
 8004240:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004242:	4b22      	ldr	r3, [pc, #136]	; (80042cc <MX_USART2_UART_Init+0x94>)
 8004244:	22e1      	movs	r2, #225	; 0xe1
 8004246:	0252      	lsls	r2, r2, #9
 8004248:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800424a:	4b20      	ldr	r3, [pc, #128]	; (80042cc <MX_USART2_UART_Init+0x94>)
 800424c:	2200      	movs	r2, #0
 800424e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004250:	4b1e      	ldr	r3, [pc, #120]	; (80042cc <MX_USART2_UART_Init+0x94>)
 8004252:	2200      	movs	r2, #0
 8004254:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004256:	4b1d      	ldr	r3, [pc, #116]	; (80042cc <MX_USART2_UART_Init+0x94>)
 8004258:	2200      	movs	r2, #0
 800425a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800425c:	4b1b      	ldr	r3, [pc, #108]	; (80042cc <MX_USART2_UART_Init+0x94>)
 800425e:	220c      	movs	r2, #12
 8004260:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004262:	4b1a      	ldr	r3, [pc, #104]	; (80042cc <MX_USART2_UART_Init+0x94>)
 8004264:	2200      	movs	r2, #0
 8004266:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004268:	4b18      	ldr	r3, [pc, #96]	; (80042cc <MX_USART2_UART_Init+0x94>)
 800426a:	2200      	movs	r2, #0
 800426c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800426e:	4b17      	ldr	r3, [pc, #92]	; (80042cc <MX_USART2_UART_Init+0x94>)
 8004270:	2200      	movs	r2, #0
 8004272:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004274:	4b15      	ldr	r3, [pc, #84]	; (80042cc <MX_USART2_UART_Init+0x94>)
 8004276:	2200      	movs	r2, #0
 8004278:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800427a:	4b14      	ldr	r3, [pc, #80]	; (80042cc <MX_USART2_UART_Init+0x94>)
 800427c:	2200      	movs	r2, #0
 800427e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004280:	4b12      	ldr	r3, [pc, #72]	; (80042cc <MX_USART2_UART_Init+0x94>)
 8004282:	0018      	movs	r0, r3
 8004284:	f008 fd70 	bl	800cd68 <HAL_UART_Init>
 8004288:	1e03      	subs	r3, r0, #0
 800428a:	d001      	beq.n	8004290 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800428c:	f004 fa06 	bl	800869c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004290:	4b0e      	ldr	r3, [pc, #56]	; (80042cc <MX_USART2_UART_Init+0x94>)
 8004292:	2100      	movs	r1, #0
 8004294:	0018      	movs	r0, r3
 8004296:	f00a fbd9 	bl	800ea4c <HAL_UARTEx_SetTxFifoThreshold>
 800429a:	1e03      	subs	r3, r0, #0
 800429c:	d001      	beq.n	80042a2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800429e:	f004 f9fd 	bl	800869c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80042a2:	4b0a      	ldr	r3, [pc, #40]	; (80042cc <MX_USART2_UART_Init+0x94>)
 80042a4:	2100      	movs	r1, #0
 80042a6:	0018      	movs	r0, r3
 80042a8:	f00a fc10 	bl	800eacc <HAL_UARTEx_SetRxFifoThreshold>
 80042ac:	1e03      	subs	r3, r0, #0
 80042ae:	d001      	beq.n	80042b4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80042b0:	f004 f9f4 	bl	800869c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80042b4:	4b05      	ldr	r3, [pc, #20]	; (80042cc <MX_USART2_UART_Init+0x94>)
 80042b6:	0018      	movs	r0, r3
 80042b8:	f00a fb8e 	bl	800e9d8 <HAL_UARTEx_DisableFifoMode>
 80042bc:	1e03      	subs	r3, r0, #0
 80042be:	d001      	beq.n	80042c4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80042c0:	f004 f9ec 	bl	800869c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80042c4:	46c0      	nop			; (mov r8, r8)
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	46c0      	nop			; (mov r8, r8)
 80042cc:	2000055c 	.word	0x2000055c
 80042d0:	40004400 	.word	0x40004400

080042d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80042d8:	4b16      	ldr	r3, [pc, #88]	; (8004334 <MX_USART3_UART_Init+0x60>)
 80042da:	4a17      	ldr	r2, [pc, #92]	; (8004338 <MX_USART3_UART_Init+0x64>)
 80042dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80042de:	4b15      	ldr	r3, [pc, #84]	; (8004334 <MX_USART3_UART_Init+0x60>)
 80042e0:	22e1      	movs	r2, #225	; 0xe1
 80042e2:	0252      	lsls	r2, r2, #9
 80042e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80042e6:	4b13      	ldr	r3, [pc, #76]	; (8004334 <MX_USART3_UART_Init+0x60>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80042ec:	4b11      	ldr	r3, [pc, #68]	; (8004334 <MX_USART3_UART_Init+0x60>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80042f2:	4b10      	ldr	r3, [pc, #64]	; (8004334 <MX_USART3_UART_Init+0x60>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80042f8:	4b0e      	ldr	r3, [pc, #56]	; (8004334 <MX_USART3_UART_Init+0x60>)
 80042fa:	220c      	movs	r2, #12
 80042fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042fe:	4b0d      	ldr	r3, [pc, #52]	; (8004334 <MX_USART3_UART_Init+0x60>)
 8004300:	2200      	movs	r2, #0
 8004302:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004304:	4b0b      	ldr	r3, [pc, #44]	; (8004334 <MX_USART3_UART_Init+0x60>)
 8004306:	2200      	movs	r2, #0
 8004308:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800430a:	4b0a      	ldr	r3, [pc, #40]	; (8004334 <MX_USART3_UART_Init+0x60>)
 800430c:	2200      	movs	r2, #0
 800430e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004310:	4b08      	ldr	r3, [pc, #32]	; (8004334 <MX_USART3_UART_Init+0x60>)
 8004312:	2200      	movs	r2, #0
 8004314:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004316:	4b07      	ldr	r3, [pc, #28]	; (8004334 <MX_USART3_UART_Init+0x60>)
 8004318:	2200      	movs	r2, #0
 800431a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800431c:	4b05      	ldr	r3, [pc, #20]	; (8004334 <MX_USART3_UART_Init+0x60>)
 800431e:	0018      	movs	r0, r3
 8004320:	f008 fd22 	bl	800cd68 <HAL_UART_Init>
 8004324:	1e03      	subs	r3, r0, #0
 8004326:	d001      	beq.n	800432c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8004328:	f004 f9b8 	bl	800869c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800432c:	46c0      	nop			; (mov r8, r8)
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	46c0      	nop			; (mov r8, r8)
 8004334:	200005f0 	.word	0x200005f0
 8004338:	40004800 	.word	0x40004800

0800433c <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8004340:	4b16      	ldr	r3, [pc, #88]	; (800439c <MX_USART4_UART_Init+0x60>)
 8004342:	4a17      	ldr	r2, [pc, #92]	; (80043a0 <MX_USART4_UART_Init+0x64>)
 8004344:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8004346:	4b15      	ldr	r3, [pc, #84]	; (800439c <MX_USART4_UART_Init+0x60>)
 8004348:	22e1      	movs	r2, #225	; 0xe1
 800434a:	0252      	lsls	r2, r2, #9
 800434c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800434e:	4b13      	ldr	r3, [pc, #76]	; (800439c <MX_USART4_UART_Init+0x60>)
 8004350:	2200      	movs	r2, #0
 8004352:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004354:	4b11      	ldr	r3, [pc, #68]	; (800439c <MX_USART4_UART_Init+0x60>)
 8004356:	2200      	movs	r2, #0
 8004358:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800435a:	4b10      	ldr	r3, [pc, #64]	; (800439c <MX_USART4_UART_Init+0x60>)
 800435c:	2200      	movs	r2, #0
 800435e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004360:	4b0e      	ldr	r3, [pc, #56]	; (800439c <MX_USART4_UART_Init+0x60>)
 8004362:	220c      	movs	r2, #12
 8004364:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004366:	4b0d      	ldr	r3, [pc, #52]	; (800439c <MX_USART4_UART_Init+0x60>)
 8004368:	2200      	movs	r2, #0
 800436a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800436c:	4b0b      	ldr	r3, [pc, #44]	; (800439c <MX_USART4_UART_Init+0x60>)
 800436e:	2200      	movs	r2, #0
 8004370:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004372:	4b0a      	ldr	r3, [pc, #40]	; (800439c <MX_USART4_UART_Init+0x60>)
 8004374:	2200      	movs	r2, #0
 8004376:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004378:	4b08      	ldr	r3, [pc, #32]	; (800439c <MX_USART4_UART_Init+0x60>)
 800437a:	2200      	movs	r2, #0
 800437c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800437e:	4b07      	ldr	r3, [pc, #28]	; (800439c <MX_USART4_UART_Init+0x60>)
 8004380:	2200      	movs	r2, #0
 8004382:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004384:	4b05      	ldr	r3, [pc, #20]	; (800439c <MX_USART4_UART_Init+0x60>)
 8004386:	0018      	movs	r0, r3
 8004388:	f008 fcee 	bl	800cd68 <HAL_UART_Init>
 800438c:	1e03      	subs	r3, r0, #0
 800438e:	d001      	beq.n	8004394 <MX_USART4_UART_Init+0x58>
  {
    Error_Handler();
 8004390:	f004 f984 	bl	800869c <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8004394:	46c0      	nop			; (mov r8, r8)
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	46c0      	nop			; (mov r8, r8)
 800439c:	20000684 	.word	0x20000684
 80043a0:	40004c00 	.word	0x40004c00

080043a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80043a4:	b590      	push	{r4, r7, lr}
 80043a6:	b08b      	sub	sp, #44	; 0x2c
 80043a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043aa:	2414      	movs	r4, #20
 80043ac:	193b      	adds	r3, r7, r4
 80043ae:	0018      	movs	r0, r3
 80043b0:	2314      	movs	r3, #20
 80043b2:	001a      	movs	r2, r3
 80043b4:	2100      	movs	r1, #0
 80043b6:	f00a fc88 	bl	800ecca <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80043ba:	4b59      	ldr	r3, [pc, #356]	; (8004520 <MX_GPIO_Init+0x17c>)
 80043bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043be:	4b58      	ldr	r3, [pc, #352]	; (8004520 <MX_GPIO_Init+0x17c>)
 80043c0:	2120      	movs	r1, #32
 80043c2:	430a      	orrs	r2, r1
 80043c4:	635a      	str	r2, [r3, #52]	; 0x34
 80043c6:	4b56      	ldr	r3, [pc, #344]	; (8004520 <MX_GPIO_Init+0x17c>)
 80043c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ca:	2220      	movs	r2, #32
 80043cc:	4013      	ands	r3, r2
 80043ce:	613b      	str	r3, [r7, #16]
 80043d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80043d2:	4b53      	ldr	r3, [pc, #332]	; (8004520 <MX_GPIO_Init+0x17c>)
 80043d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043d6:	4b52      	ldr	r3, [pc, #328]	; (8004520 <MX_GPIO_Init+0x17c>)
 80043d8:	2101      	movs	r1, #1
 80043da:	430a      	orrs	r2, r1
 80043dc:	635a      	str	r2, [r3, #52]	; 0x34
 80043de:	4b50      	ldr	r3, [pc, #320]	; (8004520 <MX_GPIO_Init+0x17c>)
 80043e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043e2:	2201      	movs	r2, #1
 80043e4:	4013      	ands	r3, r2
 80043e6:	60fb      	str	r3, [r7, #12]
 80043e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80043ea:	4b4d      	ldr	r3, [pc, #308]	; (8004520 <MX_GPIO_Init+0x17c>)
 80043ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043ee:	4b4c      	ldr	r3, [pc, #304]	; (8004520 <MX_GPIO_Init+0x17c>)
 80043f0:	2102      	movs	r1, #2
 80043f2:	430a      	orrs	r2, r1
 80043f4:	635a      	str	r2, [r3, #52]	; 0x34
 80043f6:	4b4a      	ldr	r3, [pc, #296]	; (8004520 <MX_GPIO_Init+0x17c>)
 80043f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043fa:	2202      	movs	r2, #2
 80043fc:	4013      	ands	r3, r2
 80043fe:	60bb      	str	r3, [r7, #8]
 8004400:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004402:	4b47      	ldr	r3, [pc, #284]	; (8004520 <MX_GPIO_Init+0x17c>)
 8004404:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004406:	4b46      	ldr	r3, [pc, #280]	; (8004520 <MX_GPIO_Init+0x17c>)
 8004408:	2104      	movs	r1, #4
 800440a:	430a      	orrs	r2, r1
 800440c:	635a      	str	r2, [r3, #52]	; 0x34
 800440e:	4b44      	ldr	r3, [pc, #272]	; (8004520 <MX_GPIO_Init+0x17c>)
 8004410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004412:	2204      	movs	r2, #4
 8004414:	4013      	ands	r3, r2
 8004416:	607b      	str	r3, [r7, #4]
 8004418:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800441a:	4b41      	ldr	r3, [pc, #260]	; (8004520 <MX_GPIO_Init+0x17c>)
 800441c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800441e:	4b40      	ldr	r3, [pc, #256]	; (8004520 <MX_GPIO_Init+0x17c>)
 8004420:	2108      	movs	r1, #8
 8004422:	430a      	orrs	r2, r1
 8004424:	635a      	str	r2, [r3, #52]	; 0x34
 8004426:	4b3e      	ldr	r3, [pc, #248]	; (8004520 <MX_GPIO_Init+0x17c>)
 8004428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800442a:	2208      	movs	r2, #8
 800442c:	4013      	ands	r3, r2
 800442e:	603b      	str	r3, [r7, #0]
 8004430:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WD_GPIO_Port, WD_Pin, GPIO_PIN_RESET);
 8004432:	23a0      	movs	r3, #160	; 0xa0
 8004434:	05db      	lsls	r3, r3, #23
 8004436:	2200      	movs	r2, #0
 8004438:	2110      	movs	r1, #16
 800443a:	0018      	movs	r0, r3
 800443c:	f005 fdfb 	bl	800a036 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUTPUT_1_Pin|LED_2_Pin|DCD_Pin|LED_1_Pin
 8004440:	4938      	ldr	r1, [pc, #224]	; (8004524 <MX_GPIO_Init+0x180>)
 8004442:	4b39      	ldr	r3, [pc, #228]	; (8004528 <MX_GPIO_Init+0x184>)
 8004444:	2200      	movs	r2, #0
 8004446:	0018      	movs	r0, r3
 8004448:	f005 fdf5 	bl	800a036 <HAL_GPIO_WritePin>
                          |PWR_KEY_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(G_CTRL_GPIO_Port, G_CTRL_Pin, GPIO_PIN_SET);
 800444c:	4b37      	ldr	r3, [pc, #220]	; (800452c <MX_GPIO_Init+0x188>)
 800444e:	2201      	movs	r2, #1
 8004450:	2102      	movs	r1, #2
 8004452:	0018      	movs	r0, r3
 8004454:	f005 fdef 	bl	800a036 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Q_CTRL_Pin|FLASH_CS_Pin, GPIO_PIN_RESET);
 8004458:	4b34      	ldr	r3, [pc, #208]	; (800452c <MX_GPIO_Init+0x188>)
 800445a:	2200      	movs	r2, #0
 800445c:	210c      	movs	r1, #12
 800445e:	0018      	movs	r0, r3
 8004460:	f005 fde9 	bl	800a036 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : WD_Pin */
  GPIO_InitStruct.Pin = WD_Pin;
 8004464:	193b      	adds	r3, r7, r4
 8004466:	2210      	movs	r2, #16
 8004468:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800446a:	193b      	adds	r3, r7, r4
 800446c:	2201      	movs	r2, #1
 800446e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004470:	193b      	adds	r3, r7, r4
 8004472:	2200      	movs	r2, #0
 8004474:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004476:	193b      	adds	r3, r7, r4
 8004478:	2200      	movs	r2, #0
 800447a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(WD_GPIO_Port, &GPIO_InitStruct);
 800447c:	193a      	adds	r2, r7, r4
 800447e:	23a0      	movs	r3, #160	; 0xa0
 8004480:	05db      	lsls	r3, r3, #23
 8004482:	0011      	movs	r1, r2
 8004484:	0018      	movs	r0, r3
 8004486:	f005 fc55 	bl	8009d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUTPUT_1_Pin LED_2_Pin DCD_Pin LED_1_Pin
                           PWR_KEY_Pin */
  GPIO_InitStruct.Pin = OUTPUT_1_Pin|LED_2_Pin|DCD_Pin|LED_1_Pin
 800448a:	193b      	adds	r3, r7, r4
 800448c:	4a25      	ldr	r2, [pc, #148]	; (8004524 <MX_GPIO_Init+0x180>)
 800448e:	601a      	str	r2, [r3, #0]
                          |PWR_KEY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004490:	193b      	adds	r3, r7, r4
 8004492:	2201      	movs	r2, #1
 8004494:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004496:	193b      	adds	r3, r7, r4
 8004498:	2200      	movs	r2, #0
 800449a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800449c:	193b      	adds	r3, r7, r4
 800449e:	2200      	movs	r2, #0
 80044a0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044a2:	193b      	adds	r3, r7, r4
 80044a4:	4a20      	ldr	r2, [pc, #128]	; (8004528 <MX_GPIO_Init+0x184>)
 80044a6:	0019      	movs	r1, r3
 80044a8:	0010      	movs	r0, r2
 80044aa:	f005 fc43 	bl	8009d34 <HAL_GPIO_Init>

  /*Configure GPIO pin : DTR_Pin */
  GPIO_InitStruct.Pin = DTR_Pin;
 80044ae:	0021      	movs	r1, r4
 80044b0:	187b      	adds	r3, r7, r1
 80044b2:	2280      	movs	r2, #128	; 0x80
 80044b4:	00d2      	lsls	r2, r2, #3
 80044b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044b8:	000c      	movs	r4, r1
 80044ba:	193b      	adds	r3, r7, r4
 80044bc:	2200      	movs	r2, #0
 80044be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c0:	193b      	adds	r3, r7, r4
 80044c2:	2200      	movs	r2, #0
 80044c4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DTR_GPIO_Port, &GPIO_InitStruct);
 80044c6:	193b      	adds	r3, r7, r4
 80044c8:	4a17      	ldr	r2, [pc, #92]	; (8004528 <MX_GPIO_Init+0x184>)
 80044ca:	0019      	movs	r1, r3
 80044cc:	0010      	movs	r0, r2
 80044ce:	f005 fc31 	bl	8009d34 <HAL_GPIO_Init>

  /*Configure GPIO pin : INPUT_1_Pin */
  GPIO_InitStruct.Pin = INPUT_1_Pin;
 80044d2:	193b      	adds	r3, r7, r4
 80044d4:	2280      	movs	r2, #128	; 0x80
 80044d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044d8:	193b      	adds	r3, r7, r4
 80044da:	2200      	movs	r2, #0
 80044dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80044de:	193b      	adds	r3, r7, r4
 80044e0:	2201      	movs	r2, #1
 80044e2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(INPUT_1_GPIO_Port, &GPIO_InitStruct);
 80044e4:	193b      	adds	r3, r7, r4
 80044e6:	4a12      	ldr	r2, [pc, #72]	; (8004530 <MX_GPIO_Init+0x18c>)
 80044e8:	0019      	movs	r1, r3
 80044ea:	0010      	movs	r0, r2
 80044ec:	f005 fc22 	bl	8009d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : G_CTRL_Pin Q_CTRL_Pin FLASH_CS_Pin */
  GPIO_InitStruct.Pin = G_CTRL_Pin|Q_CTRL_Pin|FLASH_CS_Pin;
 80044f0:	0021      	movs	r1, r4
 80044f2:	187b      	adds	r3, r7, r1
 80044f4:	220e      	movs	r2, #14
 80044f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044f8:	187b      	adds	r3, r7, r1
 80044fa:	2201      	movs	r2, #1
 80044fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044fe:	187b      	adds	r3, r7, r1
 8004500:	2200      	movs	r2, #0
 8004502:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004504:	187b      	adds	r3, r7, r1
 8004506:	2200      	movs	r2, #0
 8004508:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800450a:	187b      	adds	r3, r7, r1
 800450c:	4a07      	ldr	r2, [pc, #28]	; (800452c <MX_GPIO_Init+0x188>)
 800450e:	0019      	movs	r1, r3
 8004510:	0010      	movs	r0, r2
 8004512:	f005 fc0f 	bl	8009d34 <HAL_GPIO_Init>

}
 8004516:	46c0      	nop			; (mov r8, r8)
 8004518:	46bd      	mov	sp, r7
 800451a:	b00b      	add	sp, #44	; 0x2c
 800451c:	bd90      	pop	{r4, r7, pc}
 800451e:	46c0      	nop			; (mov r8, r8)
 8004520:	40021000 	.word	0x40021000
 8004524:	00003806 	.word	0x00003806
 8004528:	50000400 	.word	0x50000400
 800452c:	50000c00 	.word	0x50000c00
 8004530:	50000800 	.word	0x50000800

08004534 <HAL_UART_ErrorCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a12      	ldr	r2, [pc, #72]	; (800458c <HAL_UART_ErrorCallback+0x58>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d10c      	bne.n	8004560 <HAL_UART_ErrorCallback+0x2c>
		if(huart->ErrorCode != HAL_UART_ERROR_NONE){
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2290      	movs	r2, #144	; 0x90
 800454a:	589b      	ldr	r3, [r3, r2]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d007      	beq.n	8004560 <HAL_UART_ErrorCallback+0x2c>
			MX_USART2_UART_Init();
 8004550:	f7ff fe72 	bl	8004238 <MX_USART2_UART_Init>
			HAL_UART_Receive_IT(&GNSS_PORT, GNSS_BUFFER, 1);
 8004554:	490e      	ldr	r1, [pc, #56]	; (8004590 <HAL_UART_ErrorCallback+0x5c>)
 8004556:	4b0f      	ldr	r3, [pc, #60]	; (8004594 <HAL_UART_ErrorCallback+0x60>)
 8004558:	2201      	movs	r2, #1
 800455a:	0018      	movs	r0, r3
 800455c:	f008 fcf6 	bl	800cf4c <HAL_UART_Receive_IT>
		}
	}
	if (huart->Instance == USART1) {
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a0c      	ldr	r2, [pc, #48]	; (8004598 <HAL_UART_ErrorCallback+0x64>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d10c      	bne.n	8004584 <HAL_UART_ErrorCallback+0x50>
		if(huart->ErrorCode != HAL_UART_ERROR_NONE){
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2290      	movs	r2, #144	; 0x90
 800456e:	589b      	ldr	r3, [r3, r2]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d007      	beq.n	8004584 <HAL_UART_ErrorCallback+0x50>
			MX_USART1_UART_Init();
 8004574:	f7ff fe12 	bl	800419c <MX_USART1_UART_Init>
			HAL_UART_Receive_IT(&AT_PORT, AT_BUFFER, 1);
 8004578:	4908      	ldr	r1, [pc, #32]	; (800459c <HAL_UART_ErrorCallback+0x68>)
 800457a:	4b09      	ldr	r3, [pc, #36]	; (80045a0 <HAL_UART_ErrorCallback+0x6c>)
 800457c:	2201      	movs	r2, #1
 800457e:	0018      	movs	r0, r3
 8004580:	f008 fce4 	bl	800cf4c <HAL_UART_Receive_IT>
		}
	}
}
 8004584:	46c0      	nop			; (mov r8, r8)
 8004586:	46bd      	mov	sp, r7
 8004588:	b002      	add	sp, #8
 800458a:	bd80      	pop	{r7, pc}
 800458c:	40004400 	.word	0x40004400
 8004590:	20000744 	.word	0x20000744
 8004594:	2000055c 	.word	0x2000055c
 8004598:	40013800 	.word	0x40013800
 800459c:	20000740 	.word	0x20000740
 80045a0:	200004c8 	.word	0x200004c8

080045a4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80045a4:	b590      	push	{r4, r7, lr}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]

	//------------------------------------------------------------------
	if (huart == &GNSS_PORT) {
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	4b5a      	ldr	r3, [pc, #360]	; (8004718 <HAL_UART_RxCpltCallback+0x174>)
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d152      	bne.n	800465a <HAL_UART_RxCpltCallback+0xb6>
		// Incoming data from GNSS, receiving single byte
		HAL_UART_Receive_IT(&GNSS_PORT, GNSS_BUFFER, 1);
 80045b4:	4959      	ldr	r1, [pc, #356]	; (800471c <HAL_UART_RxCpltCallback+0x178>)
 80045b6:	4b58      	ldr	r3, [pc, #352]	; (8004718 <HAL_UART_RxCpltCallback+0x174>)
 80045b8:	2201      	movs	r2, #1
 80045ba:	0018      	movs	r0, r3
 80045bc:	f008 fcc6 	bl	800cf4c <HAL_UART_Receive_IT>
		if (isGNSSTimStart == 0) {
 80045c0:	4b57      	ldr	r3, [pc, #348]	; (8004720 <HAL_UART_RxCpltCallback+0x17c>)
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d106      	bne.n	80045d6 <HAL_UART_RxCpltCallback+0x32>
			isGNSSTimStart = 1;
 80045c8:	4b55      	ldr	r3, [pc, #340]	; (8004720 <HAL_UART_RxCpltCallback+0x17c>)
 80045ca:	2201      	movs	r2, #1
 80045cc:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim17);
 80045ce:	4b55      	ldr	r3, [pc, #340]	; (8004724 <HAL_UART_RxCpltCallback+0x180>)
 80045d0:	0018      	movs	r0, r3
 80045d2:	f007 fc19 	bl	800be08 <HAL_TIM_Base_Start_IT>
		}
		TIM17->CNT &= 0x0;
 80045d6:	4b54      	ldr	r3, [pc, #336]	; (8004728 <HAL_UART_RxCpltCallback+0x184>)
 80045d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045da:	4b53      	ldr	r3, [pc, #332]	; (8004728 <HAL_UART_RxCpltCallback+0x184>)
 80045dc:	2200      	movs	r2, #0
 80045de:	625a      	str	r2, [r3, #36]	; 0x24
		if(GNSS_BUFFER[0] != NULL){
 80045e0:	4b4e      	ldr	r3, [pc, #312]	; (800471c <HAL_UART_RxCpltCallback+0x178>)
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d038      	beq.n	800465a <HAL_UART_RxCpltCallback+0xb6>
			nmeaResponse[nmeaLC][nmeaCC] = GNSS_BUFFER[0];
 80045e8:	4b50      	ldr	r3, [pc, #320]	; (800472c <HAL_UART_RxCpltCallback+0x188>)
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	0019      	movs	r1, r3
 80045f0:	4b4f      	ldr	r3, [pc, #316]	; (8004730 <HAL_UART_RxCpltCallback+0x18c>)
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	0018      	movs	r0, r3
 80045f8:	4b48      	ldr	r3, [pc, #288]	; (800471c <HAL_UART_RxCpltCallback+0x178>)
 80045fa:	781c      	ldrb	r4, [r3, #0]
 80045fc:	4a4d      	ldr	r2, [pc, #308]	; (8004734 <HAL_UART_RxCpltCallback+0x190>)
 80045fe:	000b      	movs	r3, r1
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	185b      	adds	r3, r3, r1
 8004604:	0119      	lsls	r1, r3, #4
 8004606:	185b      	adds	r3, r3, r1
 8004608:	18d3      	adds	r3, r2, r3
 800460a:	1c22      	adds	r2, r4, #0
 800460c:	541a      	strb	r2, [r3, r0]
			if (GNSS_BUFFER[0] == '\n') {
 800460e:	4b43      	ldr	r3, [pc, #268]	; (800471c <HAL_UART_RxCpltCallback+0x178>)
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	2b0a      	cmp	r3, #10
 8004614:	d112      	bne.n	800463c <HAL_UART_RxCpltCallback+0x98>
				nmeaLC++;
 8004616:	4b45      	ldr	r3, [pc, #276]	; (800472c <HAL_UART_RxCpltCallback+0x188>)
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	b2db      	uxtb	r3, r3
 800461c:	3301      	adds	r3, #1
 800461e:	b2da      	uxtb	r2, r3
 8004620:	4b42      	ldr	r3, [pc, #264]	; (800472c <HAL_UART_RxCpltCallback+0x188>)
 8004622:	701a      	strb	r2, [r3, #0]
				if (nmeaLC > NMEA_MAX_LINES - 1) {
 8004624:	4b41      	ldr	r3, [pc, #260]	; (800472c <HAL_UART_RxCpltCallback+0x188>)
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b03      	cmp	r3, #3
 800462c:	d902      	bls.n	8004634 <HAL_UART_RxCpltCallback+0x90>
					nmeaLC = NMEA_MAX_LINES -1;
 800462e:	4b3f      	ldr	r3, [pc, #252]	; (800472c <HAL_UART_RxCpltCallback+0x188>)
 8004630:	2203      	movs	r2, #3
 8004632:	701a      	strb	r2, [r3, #0]
				}
				nmeaCC = 0;
 8004634:	4b3e      	ldr	r3, [pc, #248]	; (8004730 <HAL_UART_RxCpltCallback+0x18c>)
 8004636:	2200      	movs	r2, #0
 8004638:	701a      	strb	r2, [r3, #0]
 800463a:	e00e      	b.n	800465a <HAL_UART_RxCpltCallback+0xb6>
			} else {
				nmeaCC++;
 800463c:	4b3c      	ldr	r3, [pc, #240]	; (8004730 <HAL_UART_RxCpltCallback+0x18c>)
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	b2db      	uxtb	r3, r3
 8004642:	3301      	adds	r3, #1
 8004644:	b2da      	uxtb	r2, r3
 8004646:	4b3a      	ldr	r3, [pc, #232]	; (8004730 <HAL_UART_RxCpltCallback+0x18c>)
 8004648:	701a      	strb	r2, [r3, #0]
				if (nmeaCC > NMEA_MAX_CHARS - 1) {
 800464a:	4b39      	ldr	r3, [pc, #228]	; (8004730 <HAL_UART_RxCpltCallback+0x18c>)
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	b2db      	uxtb	r3, r3
 8004650:	2b54      	cmp	r3, #84	; 0x54
 8004652:	d902      	bls.n	800465a <HAL_UART_RxCpltCallback+0xb6>
					nmeaCC = 0;
 8004654:	4b36      	ldr	r3, [pc, #216]	; (8004730 <HAL_UART_RxCpltCallback+0x18c>)
 8004656:	2200      	movs	r2, #0
 8004658:	701a      	strb	r2, [r3, #0]

		}
	}
	//------------------------------------------------------------------

	if (huart == &AT_PORT) {
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	4b36      	ldr	r3, [pc, #216]	; (8004738 <HAL_UART_RxCpltCallback+0x194>)
 800465e:	429a      	cmp	r2, r3
 8004660:	d155      	bne.n	800470e <HAL_UART_RxCpltCallback+0x16a>
		recResponse = 1;
 8004662:	4b36      	ldr	r3, [pc, #216]	; (800473c <HAL_UART_RxCpltCallback+0x198>)
 8004664:	2201      	movs	r2, #1
 8004666:	701a      	strb	r2, [r3, #0]
		if (isStart == 0) {
 8004668:	4b35      	ldr	r3, [pc, #212]	; (8004740 <HAL_UART_RxCpltCallback+0x19c>)
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d10b      	bne.n	800468a <HAL_UART_RxCpltCallback+0xe6>
			isStart = 1;
 8004672:	4b33      	ldr	r3, [pc, #204]	; (8004740 <HAL_UART_RxCpltCallback+0x19c>)
 8004674:	2201      	movs	r2, #1
 8004676:	701a      	strb	r2, [r3, #0]
			FIX_TIMER_TRIGGER(&htim6);
 8004678:	4b32      	ldr	r3, [pc, #200]	; (8004744 <HAL_UART_RxCpltCallback+0x1a0>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2202      	movs	r2, #2
 800467e:	4252      	negs	r2, r2
 8004680:	611a      	str	r2, [r3, #16]
			HAL_TIM_Base_Start_IT(&htim6);
 8004682:	4b30      	ldr	r3, [pc, #192]	; (8004744 <HAL_UART_RxCpltCallback+0x1a0>)
 8004684:	0018      	movs	r0, r3
 8004686:	f007 fbbf 	bl	800be08 <HAL_TIM_Base_Start_IT>
		}
		TIM16->CNT &= 0x0;
 800468a:	4b2f      	ldr	r3, [pc, #188]	; (8004748 <HAL_UART_RxCpltCallback+0x1a4>)
 800468c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468e:	4b2e      	ldr	r3, [pc, #184]	; (8004748 <HAL_UART_RxCpltCallback+0x1a4>)
 8004690:	2200      	movs	r2, #0
 8004692:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_UART_Receive_IT(&AT_PORT, AT_BUFFER, 1);
 8004694:	492d      	ldr	r1, [pc, #180]	; (800474c <HAL_UART_RxCpltCallback+0x1a8>)
 8004696:	4b28      	ldr	r3, [pc, #160]	; (8004738 <HAL_UART_RxCpltCallback+0x194>)
 8004698:	2201      	movs	r2, #1
 800469a:	0018      	movs	r0, r3
 800469c:	f008 fc56 	bl	800cf4c <HAL_UART_Receive_IT>
		if (AT_BUFFER[0] == '\n') {
 80046a0:	4b2a      	ldr	r3, [pc, #168]	; (800474c <HAL_UART_RxCpltCallback+0x1a8>)
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	2b0a      	cmp	r3, #10
 80046a6:	d113      	bne.n	80046d0 <HAL_UART_RxCpltCallback+0x12c>
			if (lineCount > RESPONSE_MAX_LINE - 2) {
 80046a8:	4b29      	ldr	r3, [pc, #164]	; (8004750 <HAL_UART_RxCpltCallback+0x1ac>)
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b04      	cmp	r3, #4
 80046b0:	d903      	bls.n	80046ba <HAL_UART_RxCpltCallback+0x116>
				lineCount = 0;
 80046b2:	4b27      	ldr	r3, [pc, #156]	; (8004750 <HAL_UART_RxCpltCallback+0x1ac>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	701a      	strb	r2, [r3, #0]
 80046b8:	e006      	b.n	80046c8 <HAL_UART_RxCpltCallback+0x124>
			} else {
				lineCount++;
 80046ba:	4b25      	ldr	r3, [pc, #148]	; (8004750 <HAL_UART_RxCpltCallback+0x1ac>)
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	3301      	adds	r3, #1
 80046c2:	b2da      	uxtb	r2, r3
 80046c4:	4b22      	ldr	r3, [pc, #136]	; (8004750 <HAL_UART_RxCpltCallback+0x1ac>)
 80046c6:	701a      	strb	r2, [r3, #0]
			}
			charCount = 0;
 80046c8:	4b22      	ldr	r3, [pc, #136]	; (8004754 <HAL_UART_RxCpltCallback+0x1b0>)
 80046ca:	2200      	movs	r2, #0
 80046cc:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	//-----------------------------------------------------------------------------

}
 80046ce:	e01e      	b.n	800470e <HAL_UART_RxCpltCallback+0x16a>
			responseBuffer[lineCount][charCount] = AT_BUFFER[0];
 80046d0:	4b1f      	ldr	r3, [pc, #124]	; (8004750 <HAL_UART_RxCpltCallback+0x1ac>)
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	001c      	movs	r4, r3
 80046d8:	4b1e      	ldr	r3, [pc, #120]	; (8004754 <HAL_UART_RxCpltCallback+0x1b0>)
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	0019      	movs	r1, r3
 80046e0:	4b1a      	ldr	r3, [pc, #104]	; (800474c <HAL_UART_RxCpltCallback+0x1a8>)
 80046e2:	7818      	ldrb	r0, [r3, #0]
 80046e4:	4a1c      	ldr	r2, [pc, #112]	; (8004758 <HAL_UART_RxCpltCallback+0x1b4>)
 80046e6:	2332      	movs	r3, #50	; 0x32
 80046e8:	4363      	muls	r3, r4
 80046ea:	18d3      	adds	r3, r2, r3
 80046ec:	1c02      	adds	r2, r0, #0
 80046ee:	545a      	strb	r2, [r3, r1]
			charCount++;
 80046f0:	4b18      	ldr	r3, [pc, #96]	; (8004754 <HAL_UART_RxCpltCallback+0x1b0>)
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	3301      	adds	r3, #1
 80046f8:	b2da      	uxtb	r2, r3
 80046fa:	4b16      	ldr	r3, [pc, #88]	; (8004754 <HAL_UART_RxCpltCallback+0x1b0>)
 80046fc:	701a      	strb	r2, [r3, #0]
			if (lineCount > RESPONSE_MAX_CHAR - 2) {
 80046fe:	4b14      	ldr	r3, [pc, #80]	; (8004750 <HAL_UART_RxCpltCallback+0x1ac>)
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	b2db      	uxtb	r3, r3
 8004704:	2b30      	cmp	r3, #48	; 0x30
 8004706:	d902      	bls.n	800470e <HAL_UART_RxCpltCallback+0x16a>
				charCount = 0;
 8004708:	4b12      	ldr	r3, [pc, #72]	; (8004754 <HAL_UART_RxCpltCallback+0x1b0>)
 800470a:	2200      	movs	r2, #0
 800470c:	701a      	strb	r2, [r3, #0]
}
 800470e:	46c0      	nop			; (mov r8, r8)
 8004710:	46bd      	mov	sp, r7
 8004712:	b003      	add	sp, #12
 8004714:	bd90      	pop	{r4, r7, pc}
 8004716:	46c0      	nop			; (mov r8, r8)
 8004718:	2000055c 	.word	0x2000055c
 800471c:	20000744 	.word	0x20000744
 8004720:	2000087e 	.word	0x2000087e
 8004724:	2000047c 	.word	0x2000047c
 8004728:	40014800 	.word	0x40014800
 800472c:	20000876 	.word	0x20000876
 8004730:	20000877 	.word	0x20000877
 8004734:	200008d8 	.word	0x200008d8
 8004738:	200004c8 	.word	0x200004c8
 800473c:	20000881 	.word	0x20000881
 8004740:	20000878 	.word	0x20000878
 8004744:	20000398 	.word	0x20000398
 8004748:	40014400 	.word	0x40014400
 800474c:	20000740 	.word	0x20000740
 8004750:	20000874 	.word	0x20000874
 8004754:	20000875 	.word	0x20000875
 8004758:	20000748 	.word	0x20000748

0800475c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800475c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800475e:	46c6      	mov	lr, r8
 8004760:	b500      	push	{lr}
 8004762:	b0d6      	sub	sp, #344	; 0x158
 8004764:	af00      	add	r7, sp, #0
 8004766:	61f8      	str	r0, [r7, #28]
	if (htim == &htim16) {
 8004768:	69fa      	ldr	r2, [r7, #28]
 800476a:	4bbf      	ldr	r3, [pc, #764]	; (8004a68 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800476c:	429a      	cmp	r2, r3
 800476e:	d118      	bne.n	80047a2 <HAL_TIM_PeriodElapsedCallback+0x46>
			//tcp open checking timer
		if(isTcpOpen == 0){
 8004770:	4bbe      	ldr	r3, [pc, #760]	; (8004a6c <HAL_TIM_PeriodElapsedCallback+0x310>)
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d107      	bne.n	800478a <HAL_TIM_PeriodElapsedCallback+0x2e>
			tcpOpenElapsedTime++;
 800477a:	4bbd      	ldr	r3, [pc, #756]	; (8004a70 <HAL_TIM_PeriodElapsedCallback+0x314>)
 800477c:	881b      	ldrh	r3, [r3, #0]
 800477e:	b29b      	uxth	r3, r3
 8004780:	3301      	adds	r3, #1
 8004782:	b29a      	uxth	r2, r3
 8004784:	4bba      	ldr	r3, [pc, #744]	; (8004a70 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8004786:	801a      	strh	r2, [r3, #0]
 8004788:	e002      	b.n	8004790 <HAL_TIM_PeriodElapsedCallback+0x34>
		}
		else{
			tcpOpenElapsedTime=0;
 800478a:	4bb9      	ldr	r3, [pc, #740]	; (8004a70 <HAL_TIM_PeriodElapsedCallback+0x314>)
 800478c:	2200      	movs	r2, #0
 800478e:	801a      	strh	r2, [r3, #0]
		}
		if(tcpOpenElapsedTime > 1200){
 8004790:	4bb7      	ldr	r3, [pc, #732]	; (8004a70 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8004792:	881b      	ldrh	r3, [r3, #0]
 8004794:	b29a      	uxth	r2, r3
 8004796:	2396      	movs	r3, #150	; 0x96
 8004798:	00db      	lsls	r3, r3, #3
 800479a:	429a      	cmp	r2, r3
 800479c:	d901      	bls.n	80047a2 <HAL_TIM_PeriodElapsedCallback+0x46>
			//more than 20 minutes
			rebootsystem();
 800479e:	f001 fe73 	bl	8006488 <rebootsystem>
		}

	}
	if (htim == &htim14) {
 80047a2:	69fa      	ldr	r2, [r7, #28]
 80047a4:	4bb3      	ldr	r3, [pc, #716]	; (8004a74 <HAL_TIM_PeriodElapsedCallback+0x318>)
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d14c      	bne.n	8004844 <HAL_TIM_PeriodElapsedCallback+0xe8>
		//watchdog timer

		//check acc input for 2 seconds, and raise flag if its on otherwise off.
		if(HAL_GPIO_ReadPin(INPUT_1_GPIO_Port, INPUT_1_Pin)){
 80047aa:	4bb3      	ldr	r3, [pc, #716]	; (8004a78 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 80047ac:	2180      	movs	r1, #128	; 0x80
 80047ae:	0018      	movs	r0, r3
 80047b0:	f005 fc24 	bl	8009ffc <HAL_GPIO_ReadPin>
 80047b4:	1e03      	subs	r3, r0, #0
 80047b6:	d015      	beq.n	80047e4 <HAL_TIM_PeriodElapsedCallback+0x88>
			accInputHigh++;
 80047b8:	4bb0      	ldr	r3, [pc, #704]	; (8004a7c <HAL_TIM_PeriodElapsedCallback+0x320>)
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	3301      	adds	r3, #1
 80047c0:	b2da      	uxtb	r2, r3
 80047c2:	4bae      	ldr	r3, [pc, #696]	; (8004a7c <HAL_TIM_PeriodElapsedCallback+0x320>)
 80047c4:	701a      	strb	r2, [r3, #0]
			accInputLow=0;
 80047c6:	4bae      	ldr	r3, [pc, #696]	; (8004a80 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	701a      	strb	r2, [r3, #0]
			if(accInputHigh > MAX_INPUT_COUNTS){
 80047cc:	4bab      	ldr	r3, [pc, #684]	; (8004a7c <HAL_TIM_PeriodElapsedCallback+0x320>)
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d91b      	bls.n	800480e <HAL_TIM_PeriodElapsedCallback+0xb2>
				accInputHigh =0;
 80047d6:	4ba9      	ldr	r3, [pc, #676]	; (8004a7c <HAL_TIM_PeriodElapsedCallback+0x320>)
 80047d8:	2200      	movs	r2, #0
 80047da:	701a      	strb	r2, [r3, #0]
				accInputState = 1;
 80047dc:	4ba9      	ldr	r3, [pc, #676]	; (8004a84 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80047de:	2201      	movs	r2, #1
 80047e0:	701a      	strb	r2, [r3, #0]
 80047e2:	e014      	b.n	800480e <HAL_TIM_PeriodElapsedCallback+0xb2>
				}
			}
		else{
			accInputLow++;
 80047e4:	4ba6      	ldr	r3, [pc, #664]	; (8004a80 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	3301      	adds	r3, #1
 80047ec:	b2da      	uxtb	r2, r3
 80047ee:	4ba4      	ldr	r3, [pc, #656]	; (8004a80 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80047f0:	701a      	strb	r2, [r3, #0]
			accInputHigh=0;
 80047f2:	4ba2      	ldr	r3, [pc, #648]	; (8004a7c <HAL_TIM_PeriodElapsedCallback+0x320>)
 80047f4:	2200      	movs	r2, #0
 80047f6:	701a      	strb	r2, [r3, #0]
			if(accInputLow > MAX_INPUT_COUNTS){
 80047f8:	4ba1      	ldr	r3, [pc, #644]	; (8004a80 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d905      	bls.n	800480e <HAL_TIM_PeriodElapsedCallback+0xb2>
				accInputLow =0;
 8004802:	4b9f      	ldr	r3, [pc, #636]	; (8004a80 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8004804:	2200      	movs	r2, #0
 8004806:	701a      	strb	r2, [r3, #0]
				accInputState = 0;
 8004808:	4b9e      	ldr	r3, [pc, #632]	; (8004a84 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800480a:	2200      	movs	r2, #0
 800480c:	701a      	strb	r2, [r3, #0]
			}
		}
		if(accInputState != accInputStatex){
 800480e:	4b9d      	ldr	r3, [pc, #628]	; (8004a84 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	b2da      	uxtb	r2, r3
 8004814:	4b9c      	ldr	r3, [pc, #624]	; (8004a88 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	b2db      	uxtb	r3, r3
 800481a:	429a      	cmp	r2, r3
 800481c:	d007      	beq.n	800482e <HAL_TIM_PeriodElapsedCallback+0xd2>
			isAlarm = 1;
 800481e:	4b9b      	ldr	r3, [pc, #620]	; (8004a8c <HAL_TIM_PeriodElapsedCallback+0x330>)
 8004820:	2201      	movs	r2, #1
 8004822:	701a      	strb	r2, [r3, #0]
			accInputStatex=accInputState;
 8004824:	4b97      	ldr	r3, [pc, #604]	; (8004a84 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	b2da      	uxtb	r2, r3
 800482a:	4b97      	ldr	r3, [pc, #604]	; (8004a88 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800482c:	701a      	strb	r2, [r3, #0]
		}
		//---------------------------------------------------------------------------

		HAL_GPIO_TogglePin(WD_GPIO_Port, WD_Pin);
 800482e:	23a0      	movs	r3, #160	; 0xa0
 8004830:	05db      	lsls	r3, r3, #23
 8004832:	2110      	movs	r1, #16
 8004834:	0018      	movs	r0, r3
 8004836:	f005 fc1b 	bl	800a070 <HAL_GPIO_TogglePin>
		hangCounter++;
 800483a:	4b95      	ldr	r3, [pc, #596]	; (8004a90 <HAL_TIM_PeriodElapsedCallback+0x334>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	1c5a      	adds	r2, r3, #1
 8004840:	4b93      	ldr	r3, [pc, #588]	; (8004a90 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8004842:	601a      	str	r2, [r3, #0]
		if(hangCounter>25){
			//if system hangs for more than 10 seconds.
//			NVIC_SystemReset();
		}
	}
	if (htim == &htim6) {
 8004844:	69fa      	ldr	r2, [r7, #28]
 8004846:	4b93      	ldr	r3, [pc, #588]	; (8004a94 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8004848:	429a      	cmp	r2, r3
 800484a:	d001      	beq.n	8004850 <HAL_TIM_PeriodElapsedCallback+0xf4>
 800484c:	f001 fcb9 	bl	80061c2 <HAL_TIM_PeriodElapsedCallback+0x1a66>
//		HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
//		HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 1);
		// AT PORT TIMER
		char tResponse = '0';
 8004850:	2340      	movs	r3, #64	; 0x40
 8004852:	33ff      	adds	r3, #255	; 0xff
 8004854:	2018      	movs	r0, #24
 8004856:	181b      	adds	r3, r3, r0
 8004858:	19db      	adds	r3, r3, r7
 800485a:	2230      	movs	r2, #48	; 0x30
 800485c:	701a      	strb	r2, [r3, #0]
		//todo
		//---- server response check
		if (responseBuffer[0][0] == 0x78 && responseBuffer[0][1] == 0x78) {
 800485e:	4b8e      	ldr	r3, [pc, #568]	; (8004a98 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	2b78      	cmp	r3, #120	; 0x78
 8004864:	d000      	beq.n	8004868 <HAL_TIM_PeriodElapsedCallback+0x10c>
 8004866:	e0cf      	b.n	8004a08 <HAL_TIM_PeriodElapsedCallback+0x2ac>
 8004868:	4b8b      	ldr	r3, [pc, #556]	; (8004a98 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800486a:	785b      	ldrb	r3, [r3, #1]
 800486c:	2b78      	cmp	r3, #120	; 0x78
 800486e:	d000      	beq.n	8004872 <HAL_TIM_PeriodElapsedCallback+0x116>
 8004870:	e0ca      	b.n	8004a08 <HAL_TIM_PeriodElapsedCallback+0x2ac>
 8004872:	466b      	mov	r3, sp
 8004874:	4698      	mov	r8, r3
			// HAL_UART_Transmit(&huart4, "Res rec server",
			// sizeof("Res rec server"), 100);
			uint8_t c = responseBuffer[0][2];
 8004876:	210c      	movs	r1, #12
 8004878:	31ff      	adds	r1, #255	; 0xff
 800487a:	180b      	adds	r3, r1, r0
 800487c:	19db      	adds	r3, r3, r7
 800487e:	4a86      	ldr	r2, [pc, #536]	; (8004a98 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8004880:	7892      	ldrb	r2, [r2, #2]
 8004882:	701a      	strb	r2, [r3, #0]
			uint8_t tempCrcData[c - 1];
 8004884:	180b      	adds	r3, r1, r0
 8004886:	19db      	adds	r3, r3, r7
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	3b01      	subs	r3, #1
 800488c:	1e5a      	subs	r2, r3, #1
 800488e:	218e      	movs	r1, #142	; 0x8e
 8004890:	0049      	lsls	r1, r1, #1
 8004892:	1879      	adds	r1, r7, r1
 8004894:	600a      	str	r2, [r1, #0]
 8004896:	001a      	movs	r2, r3
 8004898:	60ba      	str	r2, [r7, #8]
 800489a:	2200      	movs	r2, #0
 800489c:	60fa      	str	r2, [r7, #12]
 800489e:	68b8      	ldr	r0, [r7, #8]
 80048a0:	68f9      	ldr	r1, [r7, #12]
 80048a2:	0002      	movs	r2, r0
 80048a4:	0f52      	lsrs	r2, r2, #29
 80048a6:	000e      	movs	r6, r1
 80048a8:	00f6      	lsls	r6, r6, #3
 80048aa:	617e      	str	r6, [r7, #20]
 80048ac:	697e      	ldr	r6, [r7, #20]
 80048ae:	4316      	orrs	r6, r2
 80048b0:	617e      	str	r6, [r7, #20]
 80048b2:	0002      	movs	r2, r0
 80048b4:	00d2      	lsls	r2, r2, #3
 80048b6:	613a      	str	r2, [r7, #16]
 80048b8:	001a      	movs	r2, r3
 80048ba:	603a      	str	r2, [r7, #0]
 80048bc:	2200      	movs	r2, #0
 80048be:	607a      	str	r2, [r7, #4]
 80048c0:	6838      	ldr	r0, [r7, #0]
 80048c2:	6879      	ldr	r1, [r7, #4]
 80048c4:	0002      	movs	r2, r0
 80048c6:	0f52      	lsrs	r2, r2, #29
 80048c8:	000e      	movs	r6, r1
 80048ca:	00f5      	lsls	r5, r6, #3
 80048cc:	4315      	orrs	r5, r2
 80048ce:	0002      	movs	r2, r0
 80048d0:	00d4      	lsls	r4, r2, #3
 80048d2:	001a      	movs	r2, r3
 80048d4:	3207      	adds	r2, #7
 80048d6:	08d2      	lsrs	r2, r2, #3
 80048d8:	00d2      	lsls	r2, r2, #3
 80048da:	4669      	mov	r1, sp
 80048dc:	1a8a      	subs	r2, r1, r2
 80048de:	4695      	mov	sp, r2
 80048e0:	466a      	mov	r2, sp
 80048e2:	3200      	adds	r2, #0
 80048e4:	218c      	movs	r1, #140	; 0x8c
 80048e6:	0049      	lsls	r1, r1, #1
 80048e8:	1879      	adds	r1, r7, r1
 80048ea:	600a      	str	r2, [r1, #0]
			uint16_t crcResult = 0;
 80048ec:	22fe      	movs	r2, #254	; 0xfe
 80048ee:	2018      	movs	r0, #24
 80048f0:	1812      	adds	r2, r2, r0
 80048f2:	19d2      	adds	r2, r2, r7
 80048f4:	2100      	movs	r1, #0
 80048f6:	8011      	strh	r1, [r2, #0]
			for (uint8_t i = 2; i < c + 1; i++) {
 80048f8:	229f      	movs	r2, #159	; 0x9f
 80048fa:	0052      	lsls	r2, r2, #1
 80048fc:	1812      	adds	r2, r2, r0
 80048fe:	19d2      	adds	r2, r2, r7
 8004900:	2102      	movs	r1, #2
 8004902:	7011      	strb	r1, [r2, #0]
 8004904:	e017      	b.n	8004936 <HAL_TIM_PeriodElapsedCallback+0x1da>
				tempCrcData[i - 2] = responseBuffer[0][i];
 8004906:	249f      	movs	r4, #159	; 0x9f
 8004908:	0064      	lsls	r4, r4, #1
 800490a:	2518      	movs	r5, #24
 800490c:	1962      	adds	r2, r4, r5
 800490e:	19d2      	adds	r2, r2, r7
 8004910:	7811      	ldrb	r1, [r2, #0]
 8004912:	1962      	adds	r2, r4, r5
 8004914:	19d2      	adds	r2, r2, r7
 8004916:	7812      	ldrb	r2, [r2, #0]
 8004918:	3a02      	subs	r2, #2
 800491a:	485f      	ldr	r0, [pc, #380]	; (8004a98 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800491c:	5c40      	ldrb	r0, [r0, r1]
 800491e:	218c      	movs	r1, #140	; 0x8c
 8004920:	0049      	lsls	r1, r1, #1
 8004922:	1879      	adds	r1, r7, r1
 8004924:	6809      	ldr	r1, [r1, #0]
 8004926:	5488      	strb	r0, [r1, r2]
			for (uint8_t i = 2; i < c + 1; i++) {
 8004928:	1962      	adds	r2, r4, r5
 800492a:	19d2      	adds	r2, r2, r7
 800492c:	7811      	ldrb	r1, [r2, #0]
 800492e:	1962      	adds	r2, r4, r5
 8004930:	19d2      	adds	r2, r2, r7
 8004932:	3101      	adds	r1, #1
 8004934:	7011      	strb	r1, [r2, #0]
 8004936:	250c      	movs	r5, #12
 8004938:	35ff      	adds	r5, #255	; 0xff
 800493a:	2018      	movs	r0, #24
 800493c:	182a      	adds	r2, r5, r0
 800493e:	19d1      	adds	r1, r2, r7
 8004940:	229f      	movs	r2, #159	; 0x9f
 8004942:	0052      	lsls	r2, r2, #1
 8004944:	1812      	adds	r2, r2, r0
 8004946:	19d2      	adds	r2, r2, r7
 8004948:	7809      	ldrb	r1, [r1, #0]
 800494a:	7812      	ldrb	r2, [r2, #0]
 800494c:	4291      	cmp	r1, r2
 800494e:	d2da      	bcs.n	8004906 <HAL_TIM_PeriodElapsedCallback+0x1aa>
			}
			uint8_t *tempPtr = tempCrcData;
 8004950:	228c      	movs	r2, #140	; 0x8c
 8004952:	0052      	lsls	r2, r2, #1
 8004954:	18ba      	adds	r2, r7, r2
 8004956:	6812      	ldr	r2, [r2, #0]
 8004958:	21f8      	movs	r1, #248	; 0xf8
 800495a:	0004      	movs	r4, r0
 800495c:	1808      	adds	r0, r1, r0
 800495e:	19c0      	adds	r0, r0, r7
 8004960:	6002      	str	r2, [r0, #0]
			crcResult = GetCrc16(tempPtr,
 8004962:	26fe      	movs	r6, #254	; 0xfe
 8004964:	0020      	movs	r0, r4
 8004966:	1832      	adds	r2, r6, r0
 8004968:	19d4      	adds	r4, r2, r7
 800496a:	180a      	adds	r2, r1, r0
 800496c:	19d2      	adds	r2, r2, r7
 800496e:	6812      	ldr	r2, [r2, #0]
 8004970:	0019      	movs	r1, r3
 8004972:	0010      	movs	r0, r2
 8004974:	f002 f8f2 	bl	8006b5c <GetCrc16>
 8004978:	0003      	movs	r3, r0
 800497a:	8023      	strh	r3, [r4, #0]
					sizeof(tempCrcData) / sizeof(tempCrcData[0]));
			uint16_t checker = responseBuffer[0][c + 1];
 800497c:	2418      	movs	r4, #24
 800497e:	192b      	adds	r3, r5, r4
 8004980:	19db      	adds	r3, r3, r7
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	3301      	adds	r3, #1
 8004986:	4a44      	ldr	r2, [pc, #272]	; (8004a98 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8004988:	5cd2      	ldrb	r2, [r2, r3]
 800498a:	20f6      	movs	r0, #246	; 0xf6
 800498c:	1903      	adds	r3, r0, r4
 800498e:	19db      	adds	r3, r3, r7
 8004990:	801a      	strh	r2, [r3, #0]
			checker = checker << 8 | responseBuffer[0][c + 2];
 8004992:	1903      	adds	r3, r0, r4
 8004994:	19db      	adds	r3, r3, r7
 8004996:	881b      	ldrh	r3, [r3, #0]
 8004998:	021b      	lsls	r3, r3, #8
 800499a:	b21a      	sxth	r2, r3
 800499c:	192b      	adds	r3, r5, r4
 800499e:	19db      	adds	r3, r3, r7
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	3302      	adds	r3, #2
 80049a4:	493c      	ldr	r1, [pc, #240]	; (8004a98 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80049a6:	5ccb      	ldrb	r3, [r1, r3]
 80049a8:	b21b      	sxth	r3, r3
 80049aa:	4313      	orrs	r3, r2
 80049ac:	b21a      	sxth	r2, r3
 80049ae:	1903      	adds	r3, r0, r4
 80049b0:	19db      	adds	r3, r3, r7
 80049b2:	801a      	strh	r2, [r3, #0]
			if (crcResult == checker) {
 80049b4:	1933      	adds	r3, r6, r4
 80049b6:	19da      	adds	r2, r3, r7
 80049b8:	1903      	adds	r3, r0, r4
 80049ba:	19db      	adds	r3, r3, r7
 80049bc:	8812      	ldrh	r2, [r2, #0]
 80049be:	881b      	ldrh	r3, [r3, #0]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d10a      	bne.n	80049da <HAL_TIM_PeriodElapsedCallback+0x27e>
				if (responseBuffer[0][3] == 1 || responseBuffer[0][3] == 0x13) {
 80049c4:	4b34      	ldr	r3, [pc, #208]	; (8004a98 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80049c6:	78db      	ldrb	r3, [r3, #3]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d003      	beq.n	80049d4 <HAL_TIM_PeriodElapsedCallback+0x278>
 80049cc:	4b32      	ldr	r3, [pc, #200]	; (8004a98 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80049ce:	78db      	ldrb	r3, [r3, #3]
 80049d0:	2b13      	cmp	r3, #19
 80049d2:	d102      	bne.n	80049da <HAL_TIM_PeriodElapsedCallback+0x27e>
					isLoggedIn = 1;
 80049d4:	4b31      	ldr	r3, [pc, #196]	; (8004a9c <HAL_TIM_PeriodElapsedCallback+0x340>)
 80049d6:	2201      	movs	r2, #1
 80049d8:	701a      	strb	r2, [r3, #0]
						// HAL_UART_Transmit(&huart4, "HB rec", sizeof("HB rec"),
						// 100);
					}
				}
			}
			HAL_TIM_Base_Stop_IT(&htim6);
 80049da:	4b2e      	ldr	r3, [pc, #184]	; (8004a94 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80049dc:	0018      	movs	r0, r3
 80049de:	f007 fa69 	bl	800beb4 <HAL_TIM_Base_Stop_IT>
			memset(responseBuffer, 0, sizeof(responseBuffer));
 80049e2:	2396      	movs	r3, #150	; 0x96
 80049e4:	005a      	lsls	r2, r3, #1
 80049e6:	4b2c      	ldr	r3, [pc, #176]	; (8004a98 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80049e8:	2100      	movs	r1, #0
 80049ea:	0018      	movs	r0, r3
 80049ec:	f00a f96d 	bl	800ecca <memset>
			lineCount = 0;
 80049f0:	4b2b      	ldr	r3, [pc, #172]	; (8004aa0 <HAL_TIM_PeriodElapsedCallback+0x344>)
 80049f2:	2200      	movs	r2, #0
 80049f4:	701a      	strb	r2, [r3, #0]
			charCount = 0;
 80049f6:	4b2b      	ldr	r3, [pc, #172]	; (8004aa4 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80049f8:	2200      	movs	r2, #0
 80049fa:	701a      	strb	r2, [r3, #0]
			isStart = 0;
 80049fc:	4b2a      	ldr	r3, [pc, #168]	; (8004aa8 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80049fe:	2200      	movs	r2, #0
 8004a00:	701a      	strb	r2, [r3, #0]
 8004a02:	46c5      	mov	sp, r8
		if (responseBuffer[0][0] == 0x78 && responseBuffer[0][1] == 0x78) {
 8004a04:	f000 fc6c 	bl	80052e0 <HAL_TIM_PeriodElapsedCallback+0xb84>
		} else {
			uint8_t tLine = 99;
 8004a08:	233e      	movs	r3, #62	; 0x3e
 8004a0a:	33ff      	adds	r3, #255	; 0xff
 8004a0c:	2118      	movs	r1, #24
 8004a0e:	185b      	adds	r3, r3, r1
 8004a10:	19db      	adds	r3, r3, r7
 8004a12:	2263      	movs	r2, #99	; 0x63
 8004a14:	701a      	strb	r2, [r3, #0]
			char *ptr;
			uint8_t tIndex;
			//message handling here------------------------------------------
			for (uint8_t i = 0; i <= RESPONSE_MAX_LINE; i++) {
 8004a16:	239e      	movs	r3, #158	; 0x9e
 8004a18:	005b      	lsls	r3, r3, #1
 8004a1a:	185b      	adds	r3, r3, r1
 8004a1c:	19db      	adds	r3, r3, r7
 8004a1e:	2200      	movs	r2, #0
 8004a20:	701a      	strb	r2, [r3, #0]
 8004a22:	e04f      	b.n	8004ac4 <HAL_TIM_PeriodElapsedCallback+0x368>
				ptr = strstr(responseBuffer[i], "+CMT:");
 8004a24:	249e      	movs	r4, #158	; 0x9e
 8004a26:	0064      	lsls	r4, r4, #1
 8004a28:	2518      	movs	r5, #24
 8004a2a:	1963      	adds	r3, r4, r5
 8004a2c:	19db      	adds	r3, r3, r7
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	2232      	movs	r2, #50	; 0x32
 8004a32:	435a      	muls	r2, r3
 8004a34:	4b18      	ldr	r3, [pc, #96]	; (8004a98 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8004a36:	18d3      	adds	r3, r2, r3
 8004a38:	4a1c      	ldr	r2, [pc, #112]	; (8004aac <HAL_TIM_PeriodElapsedCallback+0x350>)
 8004a3a:	0011      	movs	r1, r2
 8004a3c:	0018      	movs	r0, r3
 8004a3e:	f00a f99c 	bl	800ed7a <strstr>
 8004a42:	0003      	movs	r3, r0
 8004a44:	22f0      	movs	r2, #240	; 0xf0
 8004a46:	1951      	adds	r1, r2, r5
 8004a48:	19c9      	adds	r1, r1, r7
 8004a4a:	600b      	str	r3, [r1, #0]
				if (ptr != NULL) {
 8004a4c:	1953      	adds	r3, r2, r5
 8004a4e:	19db      	adds	r3, r3, r7
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d02c      	beq.n	8004ab0 <HAL_TIM_PeriodElapsedCallback+0x354>
					tLine = i;
 8004a56:	233e      	movs	r3, #62	; 0x3e
 8004a58:	33ff      	adds	r3, #255	; 0xff
 8004a5a:	195b      	adds	r3, r3, r5
 8004a5c:	19db      	adds	r3, r3, r7
 8004a5e:	1962      	adds	r2, r4, r5
 8004a60:	19d2      	adds	r2, r2, r7
 8004a62:	7812      	ldrb	r2, [r2, #0]
 8004a64:	701a      	strb	r2, [r3, #0]
					break;
 8004a66:	e035      	b.n	8004ad4 <HAL_TIM_PeriodElapsedCallback+0x378>
 8004a68:	20000430 	.word	0x20000430
 8004a6c:	20000a2c 	.word	0x20000a2c
 8004a70:	20000720 	.word	0x20000720
 8004a74:	200003e4 	.word	0x200003e4
 8004a78:	50000800 	.word	0x50000800
 8004a7c:	20000728 	.word	0x20000728
 8004a80:	20000729 	.word	0x20000729
 8004a84:	20000726 	.word	0x20000726
 8004a88:	20000727 	.word	0x20000727
 8004a8c:	20000725 	.word	0x20000725
 8004a90:	20000730 	.word	0x20000730
 8004a94:	20000398 	.word	0x20000398
 8004a98:	20000748 	.word	0x20000748
 8004a9c:	20000a30 	.word	0x20000a30
 8004aa0:	20000874 	.word	0x20000874
 8004aa4:	20000875 	.word	0x20000875
 8004aa8:	20000878 	.word	0x20000878
 8004aac:	0801317c 	.word	0x0801317c
			for (uint8_t i = 0; i <= RESPONSE_MAX_LINE; i++) {
 8004ab0:	219e      	movs	r1, #158	; 0x9e
 8004ab2:	0049      	lsls	r1, r1, #1
 8004ab4:	2018      	movs	r0, #24
 8004ab6:	180b      	adds	r3, r1, r0
 8004ab8:	19db      	adds	r3, r3, r7
 8004aba:	781a      	ldrb	r2, [r3, #0]
 8004abc:	180b      	adds	r3, r1, r0
 8004abe:	19db      	adds	r3, r3, r7
 8004ac0:	3201      	adds	r2, #1
 8004ac2:	701a      	strb	r2, [r3, #0]
 8004ac4:	239e      	movs	r3, #158	; 0x9e
 8004ac6:	005b      	lsls	r3, r3, #1
 8004ac8:	2218      	movs	r2, #24
 8004aca:	189b      	adds	r3, r3, r2
 8004acc:	19db      	adds	r3, r3, r7
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	2b06      	cmp	r3, #6
 8004ad2:	d9a7      	bls.n	8004a24 <HAL_TIM_PeriodElapsedCallback+0x2c8>
				}
			}
			if (tLine != 99) {
 8004ad4:	243e      	movs	r4, #62	; 0x3e
 8004ad6:	34ff      	adds	r4, #255	; 0xff
 8004ad8:	2618      	movs	r6, #24
 8004ada:	19a3      	adds	r3, r4, r6
 8004adc:	19db      	adds	r3, r3, r7
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	2b63      	cmp	r3, #99	; 0x63
 8004ae2:	d101      	bne.n	8004ae8 <HAL_TIM_PeriodElapsedCallback+0x38c>
 8004ae4:	f000 fbfc 	bl	80052e0 <HAL_TIM_PeriodElapsedCallback+0xb84>
				//some message is received!!!.
				//---check the sender's number.
				char sender[50];
				memset(sender, 0, sizeof(sender));
 8004ae8:	2508      	movs	r5, #8
 8004aea:	19ab      	adds	r3, r5, r6
 8004aec:	19db      	adds	r3, r3, r7
 8004aee:	2232      	movs	r2, #50	; 0x32
 8004af0:	2100      	movs	r1, #0
 8004af2:	0018      	movs	r0, r3
 8004af4:	f00a f8e9 	bl	800ecca <memset>
				ptr = strchr(responseBuffer[tLine], '\"');
 8004af8:	19a3      	adds	r3, r4, r6
 8004afa:	19db      	adds	r3, r3, r7
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	2232      	movs	r2, #50	; 0x32
 8004b00:	435a      	muls	r2, r3
 8004b02:	4bda      	ldr	r3, [pc, #872]	; (8004e6c <HAL_TIM_PeriodElapsedCallback+0x710>)
 8004b04:	18d3      	adds	r3, r2, r3
 8004b06:	2122      	movs	r1, #34	; 0x22
 8004b08:	0018      	movs	r0, r3
 8004b0a:	f00a f914 	bl	800ed36 <strchr>
 8004b0e:	0003      	movs	r3, r0
 8004b10:	21f0      	movs	r1, #240	; 0xf0
 8004b12:	0030      	movs	r0, r6
 8004b14:	180a      	adds	r2, r1, r0
 8004b16:	19d2      	adds	r2, r2, r7
 8004b18:	6013      	str	r3, [r2, #0]
				if (ptr != NULL) {
 8004b1a:	180b      	adds	r3, r1, r0
 8004b1c:	19db      	adds	r3, r3, r7
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d101      	bne.n	8004b28 <HAL_TIM_PeriodElapsedCallback+0x3cc>
 8004b24:	f000 fbdc 	bl	80052e0 <HAL_TIM_PeriodElapsedCallback+0xb84>
					tIndex = ptr - (char) responseBuffer[tLine];
 8004b28:	1823      	adds	r3, r4, r0
 8004b2a:	19db      	adds	r3, r3, r7
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	2232      	movs	r2, #50	; 0x32
 8004b30:	435a      	muls	r2, r3
 8004b32:	4bce      	ldr	r3, [pc, #824]	; (8004e6c <HAL_TIM_PeriodElapsedCallback+0x710>)
 8004b34:	18d3      	adds	r3, r2, r3
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	425b      	negs	r3, r3
 8004b3a:	0006      	movs	r6, r0
 8004b3c:	198a      	adds	r2, r1, r6
 8004b3e:	19d2      	adds	r2, r2, r7
 8004b40:	6812      	ldr	r2, [r2, #0]
 8004b42:	18d3      	adds	r3, r2, r3
 8004b44:	001a      	movs	r2, r3
 8004b46:	20ef      	movs	r0, #239	; 0xef
 8004b48:	1983      	adds	r3, r0, r6
 8004b4a:	19db      	adds	r3, r3, r7
 8004b4c:	701a      	strb	r2, [r3, #0]
					substring(sender, responseBuffer[tLine], tIndex + 1, 13);
 8004b4e:	19a3      	adds	r3, r4, r6
 8004b50:	19db      	adds	r3, r3, r7
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	2232      	movs	r2, #50	; 0x32
 8004b56:	435a      	muls	r2, r3
 8004b58:	4bc4      	ldr	r3, [pc, #784]	; (8004e6c <HAL_TIM_PeriodElapsedCallback+0x710>)
 8004b5a:	18d1      	adds	r1, r2, r3
 8004b5c:	1983      	adds	r3, r0, r6
 8004b5e:	19db      	adds	r3, r3, r7
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	3301      	adds	r3, #1
 8004b64:	b2da      	uxtb	r2, r3
 8004b66:	19ab      	adds	r3, r5, r6
 8004b68:	19d8      	adds	r0, r3, r7
 8004b6a:	230d      	movs	r3, #13
 8004b6c:	f002 fe1c 	bl	80077a8 <substring>
					substring(sender, sender, 3, 10);
 8004b70:	19ab      	adds	r3, r5, r6
 8004b72:	19d9      	adds	r1, r3, r7
 8004b74:	19ab      	adds	r3, r5, r6
 8004b76:	19d8      	adds	r0, r3, r7
 8004b78:	230a      	movs	r3, #10
 8004b7a:	2203      	movs	r2, #3
 8004b7c:	f002 fe14 	bl	80077a8 <substring>
					uint8_t isOwner = 0;
 8004b80:	26ee      	movs	r6, #238	; 0xee
 8004b82:	2118      	movs	r1, #24
 8004b84:	1873      	adds	r3, r6, r1
 8004b86:	19db      	adds	r3, r3, r7
 8004b88:	2200      	movs	r2, #0
 8004b8a:	701a      	strb	r2, [r3, #0]
					isOwner = !strcmp(sender, validSender); //check if sender's number is an owner?
 8004b8c:	4ab8      	ldr	r2, [pc, #736]	; (8004e70 <HAL_TIM_PeriodElapsedCallback+0x714>)
 8004b8e:	186b      	adds	r3, r5, r1
 8004b90:	19db      	adds	r3, r3, r7
 8004b92:	0011      	movs	r1, r2
 8004b94:	0018      	movs	r0, r3
 8004b96:	f7fb fab3 	bl	8000100 <strcmp>
 8004b9a:	0003      	movs	r3, r0
 8004b9c:	425a      	negs	r2, r3
 8004b9e:	4153      	adcs	r3, r2
 8004ba0:	b2da      	uxtb	r2, r3
 8004ba2:	2118      	movs	r1, #24
 8004ba4:	1873      	adds	r3, r6, r1
 8004ba6:	19db      	adds	r3, r3, r7
 8004ba8:	701a      	strb	r2, [r3, #0]
					//---check the message content for any command. (*auto# for example)
					uint8_t ind1;
					uint8_t ind2; //command length.
					char *x;
					char sCommand[MAX_COMMAND_LEN];
					memset(sCommand,0,sizeof(sCommand));//new line added
 8004baa:	263c      	movs	r6, #60	; 0x3c
 8004bac:	000d      	movs	r5, r1
 8004bae:	1873      	adds	r3, r6, r1
 8004bb0:	19db      	adds	r3, r3, r7
 8004bb2:	2232      	movs	r2, #50	; 0x32
 8004bb4:	2100      	movs	r1, #0
 8004bb6:	0018      	movs	r0, r3
 8004bb8:	f00a f887 	bl	800ecca <memset>
					x = strchr(responseBuffer[tLine + 1], '*');
 8004bbc:	0029      	movs	r1, r5
 8004bbe:	1863      	adds	r3, r4, r1
 8004bc0:	19db      	adds	r3, r3, r7
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	2232      	movs	r2, #50	; 0x32
 8004bc8:	435a      	muls	r2, r3
 8004bca:	4ba8      	ldr	r3, [pc, #672]	; (8004e6c <HAL_TIM_PeriodElapsedCallback+0x710>)
 8004bcc:	18d3      	adds	r3, r2, r3
 8004bce:	212a      	movs	r1, #42	; 0x2a
 8004bd0:	0018      	movs	r0, r3
 8004bd2:	f00a f8b0 	bl	800ed36 <strchr>
 8004bd6:	0003      	movs	r3, r0
 8004bd8:	25e8      	movs	r5, #232	; 0xe8
 8004bda:	2118      	movs	r1, #24
 8004bdc:	186a      	adds	r2, r5, r1
 8004bde:	19d2      	adds	r2, r2, r7
 8004be0:	6013      	str	r3, [r2, #0]
					if (x != NULL) {
 8004be2:	000a      	movs	r2, r1
 8004be4:	18ab      	adds	r3, r5, r2
 8004be6:	19db      	adds	r3, r3, r7
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d101      	bne.n	8004bf2 <HAL_TIM_PeriodElapsedCallback+0x496>
 8004bee:	f000 fb77 	bl	80052e0 <HAL_TIM_PeriodElapsedCallback+0xb84>
						char *y;
						y = strchr(responseBuffer[tLine + 1], '#');
 8004bf2:	18a3      	adds	r3, r4, r2
 8004bf4:	19db      	adds	r3, r3, r7
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	2232      	movs	r2, #50	; 0x32
 8004bfc:	435a      	muls	r2, r3
 8004bfe:	4b9b      	ldr	r3, [pc, #620]	; (8004e6c <HAL_TIM_PeriodElapsedCallback+0x710>)
 8004c00:	18d3      	adds	r3, r2, r3
 8004c02:	2123      	movs	r1, #35	; 0x23
 8004c04:	0018      	movs	r0, r3
 8004c06:	f00a f896 	bl	800ed36 <strchr>
 8004c0a:	0003      	movs	r3, r0
 8004c0c:	20e4      	movs	r0, #228	; 0xe4
 8004c0e:	2118      	movs	r1, #24
 8004c10:	1842      	adds	r2, r0, r1
 8004c12:	19d2      	adds	r2, r2, r7
 8004c14:	6013      	str	r3, [r2, #0]
						if (y != NULL) {
 8004c16:	000a      	movs	r2, r1
 8004c18:	1883      	adds	r3, r0, r2
 8004c1a:	19db      	adds	r3, r3, r7
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d100      	bne.n	8004c24 <HAL_TIM_PeriodElapsedCallback+0x4c8>
 8004c22:	e35d      	b.n	80052e0 <HAL_TIM_PeriodElapsedCallback+0xb84>
							//command found!!!
							//---extract the command.
							ind1 = x - (char) responseBuffer[tLine + 1] + 1;
 8004c24:	0021      	movs	r1, r4
 8004c26:	0014      	movs	r4, r2
 8004c28:	188b      	adds	r3, r1, r2
 8004c2a:	19db      	adds	r3, r3, r7
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	3301      	adds	r3, #1
 8004c30:	2232      	movs	r2, #50	; 0x32
 8004c32:	435a      	muls	r2, r3
 8004c34:	4b8d      	ldr	r3, [pc, #564]	; (8004e6c <HAL_TIM_PeriodElapsedCallback+0x710>)
 8004c36:	18d3      	adds	r3, r2, r3
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	001a      	movs	r2, r3
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	1a9b      	subs	r3, r3, r2
 8004c40:	192a      	adds	r2, r5, r4
 8004c42:	19d2      	adds	r2, r2, r7
 8004c44:	6812      	ldr	r2, [r2, #0]
 8004c46:	18d3      	adds	r3, r2, r3
 8004c48:	001a      	movs	r2, r3
 8004c4a:	23e3      	movs	r3, #227	; 0xe3
 8004c4c:	191b      	adds	r3, r3, r4
 8004c4e:	19db      	adds	r3, r3, r7
 8004c50:	701a      	strb	r2, [r3, #0]
							ind2 = y - (char) responseBuffer[tLine + 1] - 1;
 8004c52:	190b      	adds	r3, r1, r4
 8004c54:	19db      	adds	r3, r3, r7
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	3301      	adds	r3, #1
 8004c5a:	2232      	movs	r2, #50	; 0x32
 8004c5c:	435a      	muls	r2, r3
 8004c5e:	4b83      	ldr	r3, [pc, #524]	; (8004e6c <HAL_TIM_PeriodElapsedCallback+0x710>)
 8004c60:	18d3      	adds	r3, r2, r3
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	43db      	mvns	r3, r3
 8004c66:	1902      	adds	r2, r0, r4
 8004c68:	19d2      	adds	r2, r2, r7
 8004c6a:	6812      	ldr	r2, [r2, #0]
 8004c6c:	18d3      	adds	r3, r2, r3
 8004c6e:	001a      	movs	r2, r3
 8004c70:	25e2      	movs	r5, #226	; 0xe2
 8004c72:	192b      	adds	r3, r5, r4
 8004c74:	19db      	adds	r3, r3, r7
 8004c76:	701a      	strb	r2, [r3, #0]
							substring(sCommand, responseBuffer[tLine + 1], ind1,ind2);
 8004c78:	190b      	adds	r3, r1, r4
 8004c7a:	19db      	adds	r3, r3, r7
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	3301      	adds	r3, #1
 8004c80:	2232      	movs	r2, #50	; 0x32
 8004c82:	435a      	muls	r2, r3
 8004c84:	4b79      	ldr	r3, [pc, #484]	; (8004e6c <HAL_TIM_PeriodElapsedCallback+0x710>)
 8004c86:	18d1      	adds	r1, r2, r3
 8004c88:	0020      	movs	r0, r4
 8004c8a:	182b      	adds	r3, r5, r0
 8004c8c:	19db      	adds	r3, r3, r7
 8004c8e:	781c      	ldrb	r4, [r3, #0]
 8004c90:	23e3      	movs	r3, #227	; 0xe3
 8004c92:	181b      	adds	r3, r3, r0
 8004c94:	19db      	adds	r3, r3, r7
 8004c96:	781a      	ldrb	r2, [r3, #0]
 8004c98:	1833      	adds	r3, r6, r0
 8004c9a:	19d8      	adds	r0, r3, r7
 8004c9c:	0023      	movs	r3, r4
 8004c9e:	f002 fd83 	bl	80077a8 <substring>
							//--->1)RES0 = reset user PIN and registered NUMBER
							//--->2)RNUM3322336979xxxx = register new owner's number
							//--->3)RPIN = set new pin
							//--->4)WHERE
							//--->5)SERVER,DNS,PORT (DNS<=50,PORT<=5)
							if(sCommand[0] == 'R'
 8004ca2:	4b74      	ldr	r3, [pc, #464]	; (8004e74 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8004ca4:	22a0      	movs	r2, #160	; 0xa0
 8004ca6:	0052      	lsls	r2, r2, #1
 8004ca8:	189b      	adds	r3, r3, r2
 8004caa:	2118      	movs	r1, #24
 8004cac:	468c      	mov	ip, r1
 8004cae:	44bc      	add	ip, r7
 8004cb0:	4463      	add	r3, ip
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	2b52      	cmp	r3, #82	; 0x52
 8004cb6:	d136      	bne.n	8004d26 <HAL_TIM_PeriodElapsedCallback+0x5ca>
							&& sCommand[1] == 'E'
 8004cb8:	4b6e      	ldr	r3, [pc, #440]	; (8004e74 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8004cba:	189b      	adds	r3, r3, r2
 8004cbc:	2118      	movs	r1, #24
 8004cbe:	468c      	mov	ip, r1
 8004cc0:	44bc      	add	ip, r7
 8004cc2:	4463      	add	r3, ip
 8004cc4:	785b      	ldrb	r3, [r3, #1]
 8004cc6:	2b45      	cmp	r3, #69	; 0x45
 8004cc8:	d12d      	bne.n	8004d26 <HAL_TIM_PeriodElapsedCallback+0x5ca>
							&& sCommand[2] == 'S'
 8004cca:	4b6a      	ldr	r3, [pc, #424]	; (8004e74 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8004ccc:	189b      	adds	r3, r3, r2
 8004cce:	2118      	movs	r1, #24
 8004cd0:	468c      	mov	ip, r1
 8004cd2:	44bc      	add	ip, r7
 8004cd4:	4463      	add	r3, ip
 8004cd6:	789b      	ldrb	r3, [r3, #2]
 8004cd8:	2b53      	cmp	r3, #83	; 0x53
 8004cda:	d124      	bne.n	8004d26 <HAL_TIM_PeriodElapsedCallback+0x5ca>
							&& sCommand[3] == '0'
 8004cdc:	4b65      	ldr	r3, [pc, #404]	; (8004e74 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8004cde:	189b      	adds	r3, r3, r2
 8004ce0:	2218      	movs	r2, #24
 8004ce2:	4694      	mov	ip, r2
 8004ce4:	44bc      	add	ip, r7
 8004ce6:	4463      	add	r3, ip
 8004ce8:	78db      	ldrb	r3, [r3, #3]
 8004cea:	2b30      	cmp	r3, #48	; 0x30
 8004cec:	d11b      	bne.n	8004d26 <HAL_TIM_PeriodElapsedCallback+0x5ca>
							&& ind2 == 4) {
 8004cee:	2018      	movs	r0, #24
 8004cf0:	182b      	adds	r3, r5, r0
 8004cf2:	19db      	adds	r3, r3, r7
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	2b04      	cmp	r3, #4
 8004cf8:	d115      	bne.n	8004d26 <HAL_TIM_PeriodElapsedCallback+0x5ca>
								//--- reset command received.
								cPin[0] = '1';
 8004cfa:	4b5f      	ldr	r3, [pc, #380]	; (8004e78 <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8004cfc:	2231      	movs	r2, #49	; 0x31
 8004cfe:	701a      	strb	r2, [r3, #0]
								cPin[1] = '2';
 8004d00:	4b5d      	ldr	r3, [pc, #372]	; (8004e78 <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8004d02:	2232      	movs	r2, #50	; 0x32
 8004d04:	705a      	strb	r2, [r3, #1]
								cPin[2] = '3';
 8004d06:	4b5c      	ldr	r3, [pc, #368]	; (8004e78 <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8004d08:	2233      	movs	r2, #51	; 0x33
 8004d0a:	709a      	strb	r2, [r3, #2]
								cPin[3] = '4';
 8004d0c:	4b5a      	ldr	r3, [pc, #360]	; (8004e78 <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8004d0e:	2234      	movs	r2, #52	; 0x34
 8004d10:	70da      	strb	r2, [r3, #3]
								locationDataIntervalA = 5;
 8004d12:	4b5a      	ldr	r3, [pc, #360]	; (8004e7c <HAL_TIM_PeriodElapsedCallback+0x720>)
 8004d14:	2205      	movs	r2, #5
 8004d16:	701a      	strb	r2, [r3, #0]
								locationDataIntervalB = 5;
 8004d18:	4b59      	ldr	r3, [pc, #356]	; (8004e80 <HAL_TIM_PeriodElapsedCallback+0x724>)
 8004d1a:	2205      	movs	r2, #5
 8004d1c:	701a      	strb	r2, [r3, #0]
								//---saving to flash memory
								save_to_flash(0);
 8004d1e:	2000      	movs	r0, #0
 8004d20:	f001 fbba 	bl	8006498 <save_to_flash>
 8004d24:	e2dc      	b.n	80052e0 <HAL_TIM_PeriodElapsedCallback+0xb84>
								//printf("Reset Completed\n");
							} else if (sCommand[0] == 'R'
 8004d26:	4b53      	ldr	r3, [pc, #332]	; (8004e74 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8004d28:	22a0      	movs	r2, #160	; 0xa0
 8004d2a:	0052      	lsls	r2, r2, #1
 8004d2c:	189b      	adds	r3, r3, r2
 8004d2e:	2118      	movs	r1, #24
 8004d30:	468c      	mov	ip, r1
 8004d32:	44bc      	add	ip, r7
 8004d34:	4463      	add	r3, ip
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	2b52      	cmp	r3, #82	; 0x52
 8004d3a:	d000      	beq.n	8004d3e <HAL_TIM_PeriodElapsedCallback+0x5e2>
 8004d3c:	e0a4      	b.n	8004e88 <HAL_TIM_PeriodElapsedCallback+0x72c>
									&& sCommand[1] == 'N'
 8004d3e:	4b4d      	ldr	r3, [pc, #308]	; (8004e74 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8004d40:	189b      	adds	r3, r3, r2
 8004d42:	2118      	movs	r1, #24
 8004d44:	468c      	mov	ip, r1
 8004d46:	44bc      	add	ip, r7
 8004d48:	4463      	add	r3, ip
 8004d4a:	785b      	ldrb	r3, [r3, #1]
 8004d4c:	2b4e      	cmp	r3, #78	; 0x4e
 8004d4e:	d000      	beq.n	8004d52 <HAL_TIM_PeriodElapsedCallback+0x5f6>
 8004d50:	e09a      	b.n	8004e88 <HAL_TIM_PeriodElapsedCallback+0x72c>
									&& sCommand[2] == 'U'
 8004d52:	4b48      	ldr	r3, [pc, #288]	; (8004e74 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8004d54:	189b      	adds	r3, r3, r2
 8004d56:	2118      	movs	r1, #24
 8004d58:	468c      	mov	ip, r1
 8004d5a:	44bc      	add	ip, r7
 8004d5c:	4463      	add	r3, ip
 8004d5e:	789b      	ldrb	r3, [r3, #2]
 8004d60:	2b55      	cmp	r3, #85	; 0x55
 8004d62:	d000      	beq.n	8004d66 <HAL_TIM_PeriodElapsedCallback+0x60a>
 8004d64:	e090      	b.n	8004e88 <HAL_TIM_PeriodElapsedCallback+0x72c>
									&& sCommand[3] == 'M'
 8004d66:	4b43      	ldr	r3, [pc, #268]	; (8004e74 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8004d68:	189b      	adds	r3, r3, r2
 8004d6a:	2118      	movs	r1, #24
 8004d6c:	468c      	mov	ip, r1
 8004d6e:	44bc      	add	ip, r7
 8004d70:	4463      	add	r3, ip
 8004d72:	78db      	ldrb	r3, [r3, #3]
 8004d74:	2b4d      	cmp	r3, #77	; 0x4d
 8004d76:	d000      	beq.n	8004d7a <HAL_TIM_PeriodElapsedCallback+0x61e>
 8004d78:	e086      	b.n	8004e88 <HAL_TIM_PeriodElapsedCallback+0x72c>
									&& ind2 == 18) {
 8004d7a:	23e2      	movs	r3, #226	; 0xe2
 8004d7c:	2018      	movs	r0, #24
 8004d7e:	181b      	adds	r3, r3, r0
 8004d80:	19db      	adds	r3, r3, r7
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	2b12      	cmp	r3, #18
 8004d86:	d000      	beq.n	8004d8a <HAL_TIM_PeriodElapsedCallback+0x62e>
 8004d88:	e07e      	b.n	8004e88 <HAL_TIM_PeriodElapsedCallback+0x72c>
								//---owner number registration command received
								//printf("number registration command received\n");
								if(sCommand[14] == cPin[0]
 8004d8a:	4b3a      	ldr	r3, [pc, #232]	; (8004e74 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8004d8c:	0011      	movs	r1, r2
 8004d8e:	185b      	adds	r3, r3, r1
 8004d90:	2218      	movs	r2, #24
 8004d92:	4694      	mov	ip, r2
 8004d94:	44bc      	add	ip, r7
 8004d96:	4463      	add	r3, ip
 8004d98:	7b9a      	ldrb	r2, [r3, #14]
 8004d9a:	4b37      	ldr	r3, [pc, #220]	; (8004e78 <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d000      	beq.n	8004da4 <HAL_TIM_PeriodElapsedCallback+0x648>
 8004da2:	e29a      	b.n	80052da <HAL_TIM_PeriodElapsedCallback+0xb7e>
								&& sCommand[15] == cPin[1]
 8004da4:	4b33      	ldr	r3, [pc, #204]	; (8004e74 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8004da6:	185b      	adds	r3, r3, r1
 8004da8:	2218      	movs	r2, #24
 8004daa:	4694      	mov	ip, r2
 8004dac:	44bc      	add	ip, r7
 8004dae:	4463      	add	r3, ip
 8004db0:	7bda      	ldrb	r2, [r3, #15]
 8004db2:	4b31      	ldr	r3, [pc, #196]	; (8004e78 <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8004db4:	785b      	ldrb	r3, [r3, #1]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d000      	beq.n	8004dbc <HAL_TIM_PeriodElapsedCallback+0x660>
 8004dba:	e28e      	b.n	80052da <HAL_TIM_PeriodElapsedCallback+0xb7e>
								&& sCommand[16] == cPin[2]
 8004dbc:	4b2d      	ldr	r3, [pc, #180]	; (8004e74 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8004dbe:	185b      	adds	r3, r3, r1
 8004dc0:	2218      	movs	r2, #24
 8004dc2:	4694      	mov	ip, r2
 8004dc4:	44bc      	add	ip, r7
 8004dc6:	4463      	add	r3, ip
 8004dc8:	7c1a      	ldrb	r2, [r3, #16]
 8004dca:	4b2b      	ldr	r3, [pc, #172]	; (8004e78 <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8004dcc:	789b      	ldrb	r3, [r3, #2]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d000      	beq.n	8004dd4 <HAL_TIM_PeriodElapsedCallback+0x678>
 8004dd2:	e282      	b.n	80052da <HAL_TIM_PeriodElapsedCallback+0xb7e>
								&& sCommand[17] == cPin[3]) {
 8004dd4:	4b27      	ldr	r3, [pc, #156]	; (8004e74 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8004dd6:	185b      	adds	r3, r3, r1
 8004dd8:	2218      	movs	r2, #24
 8004dda:	4694      	mov	ip, r2
 8004ddc:	44bc      	add	ip, r7
 8004dde:	4463      	add	r3, ip
 8004de0:	7c5a      	ldrb	r2, [r3, #17]
 8004de2:	4b25      	ldr	r3, [pc, #148]	; (8004e78 <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8004de4:	78db      	ldrb	r3, [r3, #3]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d000      	beq.n	8004dec <HAL_TIM_PeriodElapsedCallback+0x690>
 8004dea:	e276      	b.n	80052da <HAL_TIM_PeriodElapsedCallback+0xb7e>
									//PIN is valid!!!
									//---register new number
									for (uint8_t m = 0; m < 10; m++) {
 8004dec:	233c      	movs	r3, #60	; 0x3c
 8004dee:	33ff      	adds	r3, #255	; 0xff
 8004df0:	181b      	adds	r3, r3, r0
 8004df2:	19db      	adds	r3, r3, r7
 8004df4:	2200      	movs	r2, #0
 8004df6:	701a      	strb	r2, [r3, #0]
 8004df8:	e01b      	b.n	8004e32 <HAL_TIM_PeriodElapsedCallback+0x6d6>
										validSender[m] = sCommand[m + 4];
 8004dfa:	203c      	movs	r0, #60	; 0x3c
 8004dfc:	30ff      	adds	r0, #255	; 0xff
 8004dfe:	2518      	movs	r5, #24
 8004e00:	1943      	adds	r3, r0, r5
 8004e02:	19db      	adds	r3, r3, r7
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	1d1a      	adds	r2, r3, #4
 8004e08:	1943      	adds	r3, r0, r5
 8004e0a:	19db      	adds	r3, r3, r7
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	4919      	ldr	r1, [pc, #100]	; (8004e74 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8004e10:	24a0      	movs	r4, #160	; 0xa0
 8004e12:	0064      	lsls	r4, r4, #1
 8004e14:	1909      	adds	r1, r1, r4
 8004e16:	2418      	movs	r4, #24
 8004e18:	46a4      	mov	ip, r4
 8004e1a:	44bc      	add	ip, r7
 8004e1c:	4461      	add	r1, ip
 8004e1e:	5c89      	ldrb	r1, [r1, r2]
 8004e20:	4a13      	ldr	r2, [pc, #76]	; (8004e70 <HAL_TIM_PeriodElapsedCallback+0x714>)
 8004e22:	54d1      	strb	r1, [r2, r3]
									for (uint8_t m = 0; m < 10; m++) {
 8004e24:	1943      	adds	r3, r0, r5
 8004e26:	19db      	adds	r3, r3, r7
 8004e28:	781a      	ldrb	r2, [r3, #0]
 8004e2a:	1943      	adds	r3, r0, r5
 8004e2c:	19db      	adds	r3, r3, r7
 8004e2e:	3201      	adds	r2, #1
 8004e30:	701a      	strb	r2, [r3, #0]
 8004e32:	233c      	movs	r3, #60	; 0x3c
 8004e34:	33ff      	adds	r3, #255	; 0xff
 8004e36:	2218      	movs	r2, #24
 8004e38:	189b      	adds	r3, r3, r2
 8004e3a:	19db      	adds	r3, r3, r7
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	2b09      	cmp	r3, #9
 8004e40:	d9db      	bls.n	8004dfa <HAL_TIM_PeriodElapsedCallback+0x69e>
									}
									if(validSender[0] == '0' && validSender[1] == '0' && validSender[2] == '0'){
 8004e42:	4b0b      	ldr	r3, [pc, #44]	; (8004e70 <HAL_TIM_PeriodElapsedCallback+0x714>)
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	2b30      	cmp	r3, #48	; 0x30
 8004e48:	d10b      	bne.n	8004e62 <HAL_TIM_PeriodElapsedCallback+0x706>
 8004e4a:	4b09      	ldr	r3, [pc, #36]	; (8004e70 <HAL_TIM_PeriodElapsedCallback+0x714>)
 8004e4c:	785b      	ldrb	r3, [r3, #1]
 8004e4e:	2b30      	cmp	r3, #48	; 0x30
 8004e50:	d107      	bne.n	8004e62 <HAL_TIM_PeriodElapsedCallback+0x706>
 8004e52:	4b07      	ldr	r3, [pc, #28]	; (8004e70 <HAL_TIM_PeriodElapsedCallback+0x714>)
 8004e54:	789b      	ldrb	r3, [r3, #2]
 8004e56:	2b30      	cmp	r3, #48	; 0x30
 8004e58:	d103      	bne.n	8004e62 <HAL_TIM_PeriodElapsedCallback+0x706>
										isNumValid=0;
 8004e5a:	4b0a      	ldr	r3, [pc, #40]	; (8004e84 <HAL_TIM_PeriodElapsedCallback+0x728>)
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	701a      	strb	r2, [r3, #0]
								if(sCommand[14] == cPin[0]
 8004e60:	e23b      	b.n	80052da <HAL_TIM_PeriodElapsedCallback+0xb7e>
									}else{
										isNumValid=1;
 8004e62:	4b08      	ldr	r3, [pc, #32]	; (8004e84 <HAL_TIM_PeriodElapsedCallback+0x728>)
 8004e64:	2201      	movs	r2, #1
 8004e66:	701a      	strb	r2, [r3, #0]
								if(sCommand[14] == cPin[0]
 8004e68:	e237      	b.n	80052da <HAL_TIM_PeriodElapsedCallback+0xb7e>
 8004e6a:	46c0      	nop			; (mov r8, r8)
 8004e6c:	20000748 	.word	0x20000748
 8004e70:	20000008 	.word	0x20000008
 8004e74:	fffffefc 	.word	0xfffffefc
 8004e78:	20000014 	.word	0x20000014
 8004e7c:	20000004 	.word	0x20000004
 8004e80:	20000005 	.word	0x20000005
 8004e84:	2000071e 	.word	0x2000071e
									//---send success message(todo)
								} else {
									// incorrect pin, send message (incoorect pin),(todo)
									// *future* stop sending message after 3 fails
								}
							} else if (sCommand[0] == 'R'
 8004e88:	4bd5      	ldr	r3, [pc, #852]	; (80051e0 <HAL_TIM_PeriodElapsedCallback+0xa84>)
 8004e8a:	22a0      	movs	r2, #160	; 0xa0
 8004e8c:	0052      	lsls	r2, r2, #1
 8004e8e:	189b      	adds	r3, r3, r2
 8004e90:	2118      	movs	r1, #24
 8004e92:	468c      	mov	ip, r1
 8004e94:	44bc      	add	ip, r7
 8004e96:	4463      	add	r3, ip
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	2b52      	cmp	r3, #82	; 0x52
 8004e9c:	d000      	beq.n	8004ea0 <HAL_TIM_PeriodElapsedCallback+0x744>
 8004e9e:	e081      	b.n	8004fa4 <HAL_TIM_PeriodElapsedCallback+0x848>
									&& sCommand[1] == 'P'
 8004ea0:	4bcf      	ldr	r3, [pc, #828]	; (80051e0 <HAL_TIM_PeriodElapsedCallback+0xa84>)
 8004ea2:	189b      	adds	r3, r3, r2
 8004ea4:	2118      	movs	r1, #24
 8004ea6:	468c      	mov	ip, r1
 8004ea8:	44bc      	add	ip, r7
 8004eaa:	4463      	add	r3, ip
 8004eac:	785b      	ldrb	r3, [r3, #1]
 8004eae:	2b50      	cmp	r3, #80	; 0x50
 8004eb0:	d000      	beq.n	8004eb4 <HAL_TIM_PeriodElapsedCallback+0x758>
 8004eb2:	e077      	b.n	8004fa4 <HAL_TIM_PeriodElapsedCallback+0x848>
									&& sCommand[2] == 'I'
 8004eb4:	4bca      	ldr	r3, [pc, #808]	; (80051e0 <HAL_TIM_PeriodElapsedCallback+0xa84>)
 8004eb6:	189b      	adds	r3, r3, r2
 8004eb8:	2118      	movs	r1, #24
 8004eba:	468c      	mov	ip, r1
 8004ebc:	44bc      	add	ip, r7
 8004ebe:	4463      	add	r3, ip
 8004ec0:	789b      	ldrb	r3, [r3, #2]
 8004ec2:	2b49      	cmp	r3, #73	; 0x49
 8004ec4:	d16e      	bne.n	8004fa4 <HAL_TIM_PeriodElapsedCallback+0x848>
									&& sCommand[3] == 'N'
 8004ec6:	4bc6      	ldr	r3, [pc, #792]	; (80051e0 <HAL_TIM_PeriodElapsedCallback+0xa84>)
 8004ec8:	189b      	adds	r3, r3, r2
 8004eca:	2118      	movs	r1, #24
 8004ecc:	468c      	mov	ip, r1
 8004ece:	44bc      	add	ip, r7
 8004ed0:	4463      	add	r3, ip
 8004ed2:	78db      	ldrb	r3, [r3, #3]
 8004ed4:	2b4e      	cmp	r3, #78	; 0x4e
 8004ed6:	d165      	bne.n	8004fa4 <HAL_TIM_PeriodElapsedCallback+0x848>
									&& ind2 == 12
 8004ed8:	23e2      	movs	r3, #226	; 0xe2
 8004eda:	2118      	movs	r1, #24
 8004edc:	185b      	adds	r3, r3, r1
 8004ede:	19db      	adds	r3, r3, r7
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	2b0c      	cmp	r3, #12
 8004ee4:	d15e      	bne.n	8004fa4 <HAL_TIM_PeriodElapsedCallback+0x848>
									&& isOwner == 1) {
 8004ee6:	23ee      	movs	r3, #238	; 0xee
 8004ee8:	185b      	adds	r3, r3, r1
 8004eea:	19db      	adds	r3, r3, r7
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d158      	bne.n	8004fa4 <HAL_TIM_PeriodElapsedCallback+0x848>
								//---SET PIN command received from owner.
								// RPINxxxxNNNN
								//printf("set PIN command received\n");
								if (sCommand[4] == cPin[0]
 8004ef2:	4bbb      	ldr	r3, [pc, #748]	; (80051e0 <HAL_TIM_PeriodElapsedCallback+0xa84>)
 8004ef4:	0011      	movs	r1, r2
 8004ef6:	185b      	adds	r3, r3, r1
 8004ef8:	2218      	movs	r2, #24
 8004efa:	4694      	mov	ip, r2
 8004efc:	44bc      	add	ip, r7
 8004efe:	4463      	add	r3, ip
 8004f00:	791a      	ldrb	r2, [r3, #4]
 8004f02:	4bb8      	ldr	r3, [pc, #736]	; (80051e4 <HAL_TIM_PeriodElapsedCallback+0xa88>)
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d000      	beq.n	8004f0c <HAL_TIM_PeriodElapsedCallback+0x7b0>
 8004f0a:	e1e8      	b.n	80052de <HAL_TIM_PeriodElapsedCallback+0xb82>
								&& sCommand[5] == cPin[1]
 8004f0c:	4bb4      	ldr	r3, [pc, #720]	; (80051e0 <HAL_TIM_PeriodElapsedCallback+0xa84>)
 8004f0e:	185b      	adds	r3, r3, r1
 8004f10:	2218      	movs	r2, #24
 8004f12:	4694      	mov	ip, r2
 8004f14:	44bc      	add	ip, r7
 8004f16:	4463      	add	r3, ip
 8004f18:	795a      	ldrb	r2, [r3, #5]
 8004f1a:	4bb2      	ldr	r3, [pc, #712]	; (80051e4 <HAL_TIM_PeriodElapsedCallback+0xa88>)
 8004f1c:	785b      	ldrb	r3, [r3, #1]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d000      	beq.n	8004f24 <HAL_TIM_PeriodElapsedCallback+0x7c8>
 8004f22:	e1dc      	b.n	80052de <HAL_TIM_PeriodElapsedCallback+0xb82>
								&& sCommand[6] == cPin[2]
 8004f24:	4bae      	ldr	r3, [pc, #696]	; (80051e0 <HAL_TIM_PeriodElapsedCallback+0xa84>)
 8004f26:	185b      	adds	r3, r3, r1
 8004f28:	2218      	movs	r2, #24
 8004f2a:	4694      	mov	ip, r2
 8004f2c:	44bc      	add	ip, r7
 8004f2e:	4463      	add	r3, ip
 8004f30:	799a      	ldrb	r2, [r3, #6]
 8004f32:	4bac      	ldr	r3, [pc, #688]	; (80051e4 <HAL_TIM_PeriodElapsedCallback+0xa88>)
 8004f34:	789b      	ldrb	r3, [r3, #2]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d000      	beq.n	8004f3c <HAL_TIM_PeriodElapsedCallback+0x7e0>
 8004f3a:	e1d0      	b.n	80052de <HAL_TIM_PeriodElapsedCallback+0xb82>
								&& sCommand[7] == cPin[3]) {
 8004f3c:	4ba8      	ldr	r3, [pc, #672]	; (80051e0 <HAL_TIM_PeriodElapsedCallback+0xa84>)
 8004f3e:	185b      	adds	r3, r3, r1
 8004f40:	2218      	movs	r2, #24
 8004f42:	4694      	mov	ip, r2
 8004f44:	44bc      	add	ip, r7
 8004f46:	4463      	add	r3, ip
 8004f48:	79da      	ldrb	r2, [r3, #7]
 8004f4a:	4ba6      	ldr	r3, [pc, #664]	; (80051e4 <HAL_TIM_PeriodElapsedCallback+0xa88>)
 8004f4c:	78db      	ldrb	r3, [r3, #3]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d000      	beq.n	8004f54 <HAL_TIM_PeriodElapsedCallback+0x7f8>
 8004f52:	e1c4      	b.n	80052de <HAL_TIM_PeriodElapsedCallback+0xb82>
									//old PIN is valid!!!
									//---set new pin
									cPin[0] = sCommand[8];
 8004f54:	4ba2      	ldr	r3, [pc, #648]	; (80051e0 <HAL_TIM_PeriodElapsedCallback+0xa84>)
 8004f56:	185b      	adds	r3, r3, r1
 8004f58:	2218      	movs	r2, #24
 8004f5a:	4694      	mov	ip, r2
 8004f5c:	44bc      	add	ip, r7
 8004f5e:	4463      	add	r3, ip
 8004f60:	7a1a      	ldrb	r2, [r3, #8]
 8004f62:	4ba0      	ldr	r3, [pc, #640]	; (80051e4 <HAL_TIM_PeriodElapsedCallback+0xa88>)
 8004f64:	701a      	strb	r2, [r3, #0]
									cPin[1] = sCommand[9];
 8004f66:	4b9e      	ldr	r3, [pc, #632]	; (80051e0 <HAL_TIM_PeriodElapsedCallback+0xa84>)
 8004f68:	185b      	adds	r3, r3, r1
 8004f6a:	2218      	movs	r2, #24
 8004f6c:	4694      	mov	ip, r2
 8004f6e:	44bc      	add	ip, r7
 8004f70:	4463      	add	r3, ip
 8004f72:	7a5a      	ldrb	r2, [r3, #9]
 8004f74:	4b9b      	ldr	r3, [pc, #620]	; (80051e4 <HAL_TIM_PeriodElapsedCallback+0xa88>)
 8004f76:	705a      	strb	r2, [r3, #1]
									cPin[2] = sCommand[10];
 8004f78:	4b99      	ldr	r3, [pc, #612]	; (80051e0 <HAL_TIM_PeriodElapsedCallback+0xa84>)
 8004f7a:	185b      	adds	r3, r3, r1
 8004f7c:	2218      	movs	r2, #24
 8004f7e:	4694      	mov	ip, r2
 8004f80:	44bc      	add	ip, r7
 8004f82:	4463      	add	r3, ip
 8004f84:	7a9a      	ldrb	r2, [r3, #10]
 8004f86:	4b97      	ldr	r3, [pc, #604]	; (80051e4 <HAL_TIM_PeriodElapsedCallback+0xa88>)
 8004f88:	709a      	strb	r2, [r3, #2]
									cPin[3] = sCommand[11];
 8004f8a:	4b95      	ldr	r3, [pc, #596]	; (80051e0 <HAL_TIM_PeriodElapsedCallback+0xa84>)
 8004f8c:	185b      	adds	r3, r3, r1
 8004f8e:	2218      	movs	r2, #24
 8004f90:	4694      	mov	ip, r2
 8004f92:	44bc      	add	ip, r7
 8004f94:	4463      	add	r3, ip
 8004f96:	7ada      	ldrb	r2, [r3, #11]
 8004f98:	4b92      	ldr	r3, [pc, #584]	; (80051e4 <HAL_TIM_PeriodElapsedCallback+0xa88>)
 8004f9a:	70da      	strb	r2, [r3, #3]
									//---saving to flash memory
									save_to_flash(0);
 8004f9c:	2000      	movs	r0, #0
 8004f9e:	f001 fa7b 	bl	8006498 <save_to_flash>
								if (sCommand[4] == cPin[0]
 8004fa2:	e19c      	b.n	80052de <HAL_TIM_PeriodElapsedCallback+0xb82>
									//printf("NEW PIN set \n");
								}
							} else if (sCommand[0] == 'W'
 8004fa4:	4b8e      	ldr	r3, [pc, #568]	; (80051e0 <HAL_TIM_PeriodElapsedCallback+0xa84>)
 8004fa6:	22a0      	movs	r2, #160	; 0xa0
 8004fa8:	0052      	lsls	r2, r2, #1
 8004faa:	189b      	adds	r3, r3, r2
 8004fac:	2118      	movs	r1, #24
 8004fae:	468c      	mov	ip, r1
 8004fb0:	44bc      	add	ip, r7
 8004fb2:	4463      	add	r3, ip
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	2b57      	cmp	r3, #87	; 0x57
 8004fb8:	d12e      	bne.n	8005018 <HAL_TIM_PeriodElapsedCallback+0x8bc>
									&& sCommand[1] == 'H'
 8004fba:	4b89      	ldr	r3, [pc, #548]	; (80051e0 <HAL_TIM_PeriodElapsedCallback+0xa84>)
 8004fbc:	189b      	adds	r3, r3, r2
 8004fbe:	2118      	movs	r1, #24
 8004fc0:	468c      	mov	ip, r1
 8004fc2:	44bc      	add	ip, r7
 8004fc4:	4463      	add	r3, ip
 8004fc6:	785b      	ldrb	r3, [r3, #1]
 8004fc8:	2b48      	cmp	r3, #72	; 0x48
 8004fca:	d125      	bne.n	8005018 <HAL_TIM_PeriodElapsedCallback+0x8bc>
									&& sCommand[2] == 'E'
 8004fcc:	4b84      	ldr	r3, [pc, #528]	; (80051e0 <HAL_TIM_PeriodElapsedCallback+0xa84>)
 8004fce:	189b      	adds	r3, r3, r2
 8004fd0:	2118      	movs	r1, #24
 8004fd2:	468c      	mov	ip, r1
 8004fd4:	44bc      	add	ip, r7
 8004fd6:	4463      	add	r3, ip
 8004fd8:	789b      	ldrb	r3, [r3, #2]
 8004fda:	2b45      	cmp	r3, #69	; 0x45
 8004fdc:	d11c      	bne.n	8005018 <HAL_TIM_PeriodElapsedCallback+0x8bc>
									&& sCommand[3] == 'R'
 8004fde:	4b80      	ldr	r3, [pc, #512]	; (80051e0 <HAL_TIM_PeriodElapsedCallback+0xa84>)
 8004fe0:	189b      	adds	r3, r3, r2
 8004fe2:	2118      	movs	r1, #24
 8004fe4:	468c      	mov	ip, r1
 8004fe6:	44bc      	add	ip, r7
 8004fe8:	4463      	add	r3, ip
 8004fea:	78db      	ldrb	r3, [r3, #3]
 8004fec:	2b52      	cmp	r3, #82	; 0x52
 8004fee:	d113      	bne.n	8005018 <HAL_TIM_PeriodElapsedCallback+0x8bc>
									&& sCommand[4] == 'E'
 8004ff0:	4b7b      	ldr	r3, [pc, #492]	; (80051e0 <HAL_TIM_PeriodElapsedCallback+0xa84>)
 8004ff2:	189b      	adds	r3, r3, r2
 8004ff4:	2218      	movs	r2, #24
 8004ff6:	4694      	mov	ip, r2
 8004ff8:	44bc      	add	ip, r7
 8004ffa:	4463      	add	r3, ip
 8004ffc:	791b      	ldrb	r3, [r3, #4]
 8004ffe:	2b45      	cmp	r3, #69	; 0x45
 8005000:	d10a      	bne.n	8005018 <HAL_TIM_PeriodElapsedCallback+0x8bc>
									&& isOwner == 1) {
 8005002:	23ee      	movs	r3, #238	; 0xee
 8005004:	2218      	movs	r2, #24
 8005006:	189b      	adds	r3, r3, r2
 8005008:	19db      	adds	r3, r3, r7
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	2b01      	cmp	r3, #1
 800500e:	d103      	bne.n	8005018 <HAL_TIM_PeriodElapsedCallback+0x8bc>
								//WHERE API REQUEST RECEIVED
								isWhereApiCalled = 1;
 8005010:	4b75      	ldr	r3, [pc, #468]	; (80051e8 <HAL_TIM_PeriodElapsedCallback+0xa8c>)
 8005012:	2201      	movs	r2, #1
 8005014:	701a      	strb	r2, [r3, #0]
 8005016:	e163      	b.n	80052e0 <HAL_TIM_PeriodElapsedCallback+0xb84>
							} else if (sCommand[0] == 'S'
 8005018:	4b71      	ldr	r3, [pc, #452]	; (80051e0 <HAL_TIM_PeriodElapsedCallback+0xa84>)
 800501a:	22a0      	movs	r2, #160	; 0xa0
 800501c:	0052      	lsls	r2, r2, #1
 800501e:	189b      	adds	r3, r3, r2
 8005020:	2118      	movs	r1, #24
 8005022:	468c      	mov	ip, r1
 8005024:	44bc      	add	ip, r7
 8005026:	4463      	add	r3, ip
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	2b53      	cmp	r3, #83	; 0x53
 800502c:	d143      	bne.n	80050b6 <HAL_TIM_PeriodElapsedCallback+0x95a>
									&& sCommand[1] == 'E'
 800502e:	4b6c      	ldr	r3, [pc, #432]	; (80051e0 <HAL_TIM_PeriodElapsedCallback+0xa84>)
 8005030:	189b      	adds	r3, r3, r2
 8005032:	2118      	movs	r1, #24
 8005034:	468c      	mov	ip, r1
 8005036:	44bc      	add	ip, r7
 8005038:	4463      	add	r3, ip
 800503a:	785b      	ldrb	r3, [r3, #1]
 800503c:	2b45      	cmp	r3, #69	; 0x45
 800503e:	d13a      	bne.n	80050b6 <HAL_TIM_PeriodElapsedCallback+0x95a>
									&& sCommand[2] == 'R'
 8005040:	4b67      	ldr	r3, [pc, #412]	; (80051e0 <HAL_TIM_PeriodElapsedCallback+0xa84>)
 8005042:	189b      	adds	r3, r3, r2
 8005044:	2118      	movs	r1, #24
 8005046:	468c      	mov	ip, r1
 8005048:	44bc      	add	ip, r7
 800504a:	4463      	add	r3, ip
 800504c:	789b      	ldrb	r3, [r3, #2]
 800504e:	2b52      	cmp	r3, #82	; 0x52
 8005050:	d131      	bne.n	80050b6 <HAL_TIM_PeriodElapsedCallback+0x95a>
									&& sCommand[3] == 'V'
 8005052:	4b63      	ldr	r3, [pc, #396]	; (80051e0 <HAL_TIM_PeriodElapsedCallback+0xa84>)
 8005054:	189b      	adds	r3, r3, r2
 8005056:	2118      	movs	r1, #24
 8005058:	468c      	mov	ip, r1
 800505a:	44bc      	add	ip, r7
 800505c:	4463      	add	r3, ip
 800505e:	78db      	ldrb	r3, [r3, #3]
 8005060:	2b56      	cmp	r3, #86	; 0x56
 8005062:	d128      	bne.n	80050b6 <HAL_TIM_PeriodElapsedCallback+0x95a>
									&& sCommand[4] == 'E'
 8005064:	4b5e      	ldr	r3, [pc, #376]	; (80051e0 <HAL_TIM_PeriodElapsedCallback+0xa84>)
 8005066:	189b      	adds	r3, r3, r2
 8005068:	2118      	movs	r1, #24
 800506a:	468c      	mov	ip, r1
 800506c:	44bc      	add	ip, r7
 800506e:	4463      	add	r3, ip
 8005070:	791b      	ldrb	r3, [r3, #4]
 8005072:	2b45      	cmp	r3, #69	; 0x45
 8005074:	d11f      	bne.n	80050b6 <HAL_TIM_PeriodElapsedCallback+0x95a>
									&& sCommand[5] == 'R'
 8005076:	4b5a      	ldr	r3, [pc, #360]	; (80051e0 <HAL_TIM_PeriodElapsedCallback+0xa84>)
 8005078:	189b      	adds	r3, r3, r2
 800507a:	2118      	movs	r1, #24
 800507c:	468c      	mov	ip, r1
 800507e:	44bc      	add	ip, r7
 8005080:	4463      	add	r3, ip
 8005082:	795b      	ldrb	r3, [r3, #5]
 8005084:	2b52      	cmp	r3, #82	; 0x52
 8005086:	d116      	bne.n	80050b6 <HAL_TIM_PeriodElapsedCallback+0x95a>
									&& sCommand[6] == ','
 8005088:	4b55      	ldr	r3, [pc, #340]	; (80051e0 <HAL_TIM_PeriodElapsedCallback+0xa84>)
 800508a:	189b      	adds	r3, r3, r2
 800508c:	2218      	movs	r2, #24
 800508e:	4694      	mov	ip, r2
 8005090:	44bc      	add	ip, r7
 8005092:	4463      	add	r3, ip
 8005094:	799b      	ldrb	r3, [r3, #6]
 8005096:	2b2c      	cmp	r3, #44	; 0x2c
 8005098:	d10d      	bne.n	80050b6 <HAL_TIM_PeriodElapsedCallback+0x95a>
									&& isOwner == 1) {
 800509a:	23ee      	movs	r3, #238	; 0xee
 800509c:	2218      	movs	r2, #24
 800509e:	189b      	adds	r3, r3, r2
 80050a0:	19db      	adds	r3, r3, r7
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d106      	bne.n	80050b6 <HAL_TIM_PeriodElapsedCallback+0x95a>
								//SERVER CONFIG COMMAND RECEIVED
								check_command_SERVER(sCommand);///handle the SERVER CONFIG COMMAND
 80050a8:	233c      	movs	r3, #60	; 0x3c
 80050aa:	189b      	adds	r3, r3, r2
 80050ac:	19db      	adds	r3, r3, r7
 80050ae:	0018      	movs	r0, r3
 80050b0:	f003 f848 	bl	8008144 <check_command_SERVER>
 80050b4:	e114      	b.n	80052e0 <HAL_TIM_PeriodElapsedCallback+0xb84>

							} else if (sCommand[0] == 'T'
 80050b6:	4b4a      	ldr	r3, [pc, #296]	; (80051e0 <HAL_TIM_PeriodElapsedCallback+0xa84>)
 80050b8:	22a0      	movs	r2, #160	; 0xa0
 80050ba:	0052      	lsls	r2, r2, #1
 80050bc:	189b      	adds	r3, r3, r2
 80050be:	2118      	movs	r1, #24
 80050c0:	468c      	mov	ip, r1
 80050c2:	44bc      	add	ip, r7
 80050c4:	4463      	add	r3, ip
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	2b54      	cmp	r3, #84	; 0x54
 80050ca:	d13a      	bne.n	8005142 <HAL_TIM_PeriodElapsedCallback+0x9e6>
									&& sCommand[1] == 'I'
 80050cc:	4b44      	ldr	r3, [pc, #272]	; (80051e0 <HAL_TIM_PeriodElapsedCallback+0xa84>)
 80050ce:	189b      	adds	r3, r3, r2
 80050d0:	2118      	movs	r1, #24
 80050d2:	468c      	mov	ip, r1
 80050d4:	44bc      	add	ip, r7
 80050d6:	4463      	add	r3, ip
 80050d8:	785b      	ldrb	r3, [r3, #1]
 80050da:	2b49      	cmp	r3, #73	; 0x49
 80050dc:	d131      	bne.n	8005142 <HAL_TIM_PeriodElapsedCallback+0x9e6>
									&& sCommand[2] == 'M'
 80050de:	4b40      	ldr	r3, [pc, #256]	; (80051e0 <HAL_TIM_PeriodElapsedCallback+0xa84>)
 80050e0:	189b      	adds	r3, r3, r2
 80050e2:	2118      	movs	r1, #24
 80050e4:	468c      	mov	ip, r1
 80050e6:	44bc      	add	ip, r7
 80050e8:	4463      	add	r3, ip
 80050ea:	789b      	ldrb	r3, [r3, #2]
 80050ec:	2b4d      	cmp	r3, #77	; 0x4d
 80050ee:	d128      	bne.n	8005142 <HAL_TIM_PeriodElapsedCallback+0x9e6>
									&& sCommand[3] == 'E'
 80050f0:	4b3b      	ldr	r3, [pc, #236]	; (80051e0 <HAL_TIM_PeriodElapsedCallback+0xa84>)
 80050f2:	189b      	adds	r3, r3, r2
 80050f4:	2118      	movs	r1, #24
 80050f6:	468c      	mov	ip, r1
 80050f8:	44bc      	add	ip, r7
 80050fa:	4463      	add	r3, ip
 80050fc:	78db      	ldrb	r3, [r3, #3]
 80050fe:	2b45      	cmp	r3, #69	; 0x45
 8005100:	d11f      	bne.n	8005142 <HAL_TIM_PeriodElapsedCallback+0x9e6>
									&& sCommand[4] == 'R'
 8005102:	4b37      	ldr	r3, [pc, #220]	; (80051e0 <HAL_TIM_PeriodElapsedCallback+0xa84>)
 8005104:	189b      	adds	r3, r3, r2
 8005106:	2118      	movs	r1, #24
 8005108:	468c      	mov	ip, r1
 800510a:	44bc      	add	ip, r7
 800510c:	4463      	add	r3, ip
 800510e:	791b      	ldrb	r3, [r3, #4]
 8005110:	2b52      	cmp	r3, #82	; 0x52
 8005112:	d116      	bne.n	8005142 <HAL_TIM_PeriodElapsedCallback+0x9e6>
									&& sCommand[5] == ','
 8005114:	4b32      	ldr	r3, [pc, #200]	; (80051e0 <HAL_TIM_PeriodElapsedCallback+0xa84>)
 8005116:	189b      	adds	r3, r3, r2
 8005118:	2218      	movs	r2, #24
 800511a:	4694      	mov	ip, r2
 800511c:	44bc      	add	ip, r7
 800511e:	4463      	add	r3, ip
 8005120:	795b      	ldrb	r3, [r3, #5]
 8005122:	2b2c      	cmp	r3, #44	; 0x2c
 8005124:	d10d      	bne.n	8005142 <HAL_TIM_PeriodElapsedCallback+0x9e6>
									&& isOwner == 1) {
 8005126:	23ee      	movs	r3, #238	; 0xee
 8005128:	2218      	movs	r2, #24
 800512a:	189b      	adds	r3, r3, r2
 800512c:	19db      	adds	r3, r3, r7
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d106      	bne.n	8005142 <HAL_TIM_PeriodElapsedCallback+0x9e6>
								//TIMER CONFIG COMMAND RECEIVED
								check_command_TIMER(sCommand);///handle the TIMER CONFIG COMMAND
 8005134:	233c      	movs	r3, #60	; 0x3c
 8005136:	189b      	adds	r3, r3, r2
 8005138:	19db      	adds	r3, r3, r7
 800513a:	0018      	movs	r0, r3
 800513c:	f003 f8e4 	bl	8008308 <check_command_TIMER>
 8005140:	e0ce      	b.n	80052e0 <HAL_TIM_PeriodElapsedCallback+0xb84>

							} else if (sCommand[0] == 'M'
 8005142:	4b27      	ldr	r3, [pc, #156]	; (80051e0 <HAL_TIM_PeriodElapsedCallback+0xa84>)
 8005144:	22a0      	movs	r2, #160	; 0xa0
 8005146:	0052      	lsls	r2, r2, #1
 8005148:	189b      	adds	r3, r3, r2
 800514a:	2118      	movs	r1, #24
 800514c:	468c      	mov	ip, r1
 800514e:	44bc      	add	ip, r7
 8005150:	4463      	add	r3, ip
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	2b4d      	cmp	r3, #77	; 0x4d
 8005156:	d149      	bne.n	80051ec <HAL_TIM_PeriodElapsedCallback+0xa90>
									&& sCommand[1] == 'S'
 8005158:	4b21      	ldr	r3, [pc, #132]	; (80051e0 <HAL_TIM_PeriodElapsedCallback+0xa84>)
 800515a:	189b      	adds	r3, r3, r2
 800515c:	2118      	movs	r1, #24
 800515e:	468c      	mov	ip, r1
 8005160:	44bc      	add	ip, r7
 8005162:	4463      	add	r3, ip
 8005164:	785b      	ldrb	r3, [r3, #1]
 8005166:	2b53      	cmp	r3, #83	; 0x53
 8005168:	d140      	bne.n	80051ec <HAL_TIM_PeriodElapsedCallback+0xa90>
									&& sCommand[2] == 'G'
 800516a:	4b1d      	ldr	r3, [pc, #116]	; (80051e0 <HAL_TIM_PeriodElapsedCallback+0xa84>)
 800516c:	189b      	adds	r3, r3, r2
 800516e:	2118      	movs	r1, #24
 8005170:	468c      	mov	ip, r1
 8005172:	44bc      	add	ip, r7
 8005174:	4463      	add	r3, ip
 8005176:	789b      	ldrb	r3, [r3, #2]
 8005178:	2b47      	cmp	r3, #71	; 0x47
 800517a:	d137      	bne.n	80051ec <HAL_TIM_PeriodElapsedCallback+0xa90>
									&& sCommand[3] == 'C'
 800517c:	4b18      	ldr	r3, [pc, #96]	; (80051e0 <HAL_TIM_PeriodElapsedCallback+0xa84>)
 800517e:	189b      	adds	r3, r3, r2
 8005180:	2118      	movs	r1, #24
 8005182:	468c      	mov	ip, r1
 8005184:	44bc      	add	ip, r7
 8005186:	4463      	add	r3, ip
 8005188:	78db      	ldrb	r3, [r3, #3]
 800518a:	2b43      	cmp	r3, #67	; 0x43
 800518c:	d12e      	bne.n	80051ec <HAL_TIM_PeriodElapsedCallback+0xa90>
									&& sCommand[4] == 'F'
 800518e:	4b14      	ldr	r3, [pc, #80]	; (80051e0 <HAL_TIM_PeriodElapsedCallback+0xa84>)
 8005190:	189b      	adds	r3, r3, r2
 8005192:	2118      	movs	r1, #24
 8005194:	468c      	mov	ip, r1
 8005196:	44bc      	add	ip, r7
 8005198:	4463      	add	r3, ip
 800519a:	791b      	ldrb	r3, [r3, #4]
 800519c:	2b46      	cmp	r3, #70	; 0x46
 800519e:	d125      	bne.n	80051ec <HAL_TIM_PeriodElapsedCallback+0xa90>
									&& sCommand[5] == 'G'
 80051a0:	4b0f      	ldr	r3, [pc, #60]	; (80051e0 <HAL_TIM_PeriodElapsedCallback+0xa84>)
 80051a2:	189b      	adds	r3, r3, r2
 80051a4:	2118      	movs	r1, #24
 80051a6:	468c      	mov	ip, r1
 80051a8:	44bc      	add	ip, r7
 80051aa:	4463      	add	r3, ip
 80051ac:	795b      	ldrb	r3, [r3, #5]
 80051ae:	2b47      	cmp	r3, #71	; 0x47
 80051b0:	d11c      	bne.n	80051ec <HAL_TIM_PeriodElapsedCallback+0xa90>
									&& sCommand[6] == ','
 80051b2:	4b0b      	ldr	r3, [pc, #44]	; (80051e0 <HAL_TIM_PeriodElapsedCallback+0xa84>)
 80051b4:	189b      	adds	r3, r3, r2
 80051b6:	2218      	movs	r2, #24
 80051b8:	4694      	mov	ip, r2
 80051ba:	44bc      	add	ip, r7
 80051bc:	4463      	add	r3, ip
 80051be:	799b      	ldrb	r3, [r3, #6]
 80051c0:	2b2c      	cmp	r3, #44	; 0x2c
 80051c2:	d113      	bne.n	80051ec <HAL_TIM_PeriodElapsedCallback+0xa90>
									&& isOwner == 1) {
 80051c4:	23ee      	movs	r3, #238	; 0xee
 80051c6:	2218      	movs	r2, #24
 80051c8:	189b      	adds	r3, r3, r2
 80051ca:	19db      	adds	r3, r3, r7
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d10c      	bne.n	80051ec <HAL_TIM_PeriodElapsedCallback+0xa90>
								//MSGCFG CONFIG COMMAND RECEIVED
								check_command_MSGCFG(sCommand);///handle the TIMER CONFIG COMMAND
 80051d2:	233c      	movs	r3, #60	; 0x3c
 80051d4:	189b      	adds	r3, r3, r2
 80051d6:	19db      	adds	r3, r3, r7
 80051d8:	0018      	movs	r0, r3
 80051da:	f003 f995 	bl	8008508 <check_command_MSGCFG>
 80051de:	e07f      	b.n	80052e0 <HAL_TIM_PeriodElapsedCallback+0xb84>
 80051e0:	fffffefc 	.word	0xfffffefc
 80051e4:	20000014 	.word	0x20000014
 80051e8:	20000a2e 	.word	0x20000a2e
							} else if (sCommand[0] == 'R'
 80051ec:	4bd6      	ldr	r3, [pc, #856]	; (8005548 <HAL_TIM_PeriodElapsedCallback+0xdec>)
 80051ee:	22a0      	movs	r2, #160	; 0xa0
 80051f0:	0052      	lsls	r2, r2, #1
 80051f2:	189b      	adds	r3, r3, r2
 80051f4:	2118      	movs	r1, #24
 80051f6:	468c      	mov	ip, r1
 80051f8:	44bc      	add	ip, r7
 80051fa:	4463      	add	r3, ip
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	2b52      	cmp	r3, #82	; 0x52
 8005200:	d13a      	bne.n	8005278 <HAL_TIM_PeriodElapsedCallback+0xb1c>
									&& sCommand[1] == 'E'
 8005202:	4bd1      	ldr	r3, [pc, #836]	; (8005548 <HAL_TIM_PeriodElapsedCallback+0xdec>)
 8005204:	189b      	adds	r3, r3, r2
 8005206:	2118      	movs	r1, #24
 8005208:	468c      	mov	ip, r1
 800520a:	44bc      	add	ip, r7
 800520c:	4463      	add	r3, ip
 800520e:	785b      	ldrb	r3, [r3, #1]
 8005210:	2b45      	cmp	r3, #69	; 0x45
 8005212:	d131      	bne.n	8005278 <HAL_TIM_PeriodElapsedCallback+0xb1c>
									&& sCommand[2] == 'L'
 8005214:	4bcc      	ldr	r3, [pc, #816]	; (8005548 <HAL_TIM_PeriodElapsedCallback+0xdec>)
 8005216:	189b      	adds	r3, r3, r2
 8005218:	2118      	movs	r1, #24
 800521a:	468c      	mov	ip, r1
 800521c:	44bc      	add	ip, r7
 800521e:	4463      	add	r3, ip
 8005220:	789b      	ldrb	r3, [r3, #2]
 8005222:	2b4c      	cmp	r3, #76	; 0x4c
 8005224:	d128      	bne.n	8005278 <HAL_TIM_PeriodElapsedCallback+0xb1c>
									&& sCommand[3] == 'A'
 8005226:	4bc8      	ldr	r3, [pc, #800]	; (8005548 <HAL_TIM_PeriodElapsedCallback+0xdec>)
 8005228:	189b      	adds	r3, r3, r2
 800522a:	2118      	movs	r1, #24
 800522c:	468c      	mov	ip, r1
 800522e:	44bc      	add	ip, r7
 8005230:	4463      	add	r3, ip
 8005232:	78db      	ldrb	r3, [r3, #3]
 8005234:	2b41      	cmp	r3, #65	; 0x41
 8005236:	d11f      	bne.n	8005278 <HAL_TIM_PeriodElapsedCallback+0xb1c>
									&& sCommand[4] == 'Y'
 8005238:	4bc3      	ldr	r3, [pc, #780]	; (8005548 <HAL_TIM_PeriodElapsedCallback+0xdec>)
 800523a:	189b      	adds	r3, r3, r2
 800523c:	2118      	movs	r1, #24
 800523e:	468c      	mov	ip, r1
 8005240:	44bc      	add	ip, r7
 8005242:	4463      	add	r3, ip
 8005244:	791b      	ldrb	r3, [r3, #4]
 8005246:	2b59      	cmp	r3, #89	; 0x59
 8005248:	d116      	bne.n	8005278 <HAL_TIM_PeriodElapsedCallback+0xb1c>
									&& sCommand[5] == ','
 800524a:	4bbf      	ldr	r3, [pc, #764]	; (8005548 <HAL_TIM_PeriodElapsedCallback+0xdec>)
 800524c:	189b      	adds	r3, r3, r2
 800524e:	2218      	movs	r2, #24
 8005250:	4694      	mov	ip, r2
 8005252:	44bc      	add	ip, r7
 8005254:	4463      	add	r3, ip
 8005256:	795b      	ldrb	r3, [r3, #5]
 8005258:	2b2c      	cmp	r3, #44	; 0x2c
 800525a:	d10d      	bne.n	8005278 <HAL_TIM_PeriodElapsedCallback+0xb1c>
									&& isOwner == 1) {
 800525c:	23ee      	movs	r3, #238	; 0xee
 800525e:	2218      	movs	r2, #24
 8005260:	189b      	adds	r3, r3, r2
 8005262:	19db      	adds	r3, r3, r7
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	2b01      	cmp	r3, #1
 8005268:	d106      	bne.n	8005278 <HAL_TIM_PeriodElapsedCallback+0xb1c>
								//TIMER CONFIG COMMAND RECEIVED
								check_command_RELAY(sCommand);///handle the TIMER CONFIG COMMAND
 800526a:	233c      	movs	r3, #60	; 0x3c
 800526c:	189b      	adds	r3, r3, r2
 800526e:	19db      	adds	r3, r3, r7
 8005270:	0018      	movs	r0, r3
 8005272:	f003 f80d 	bl	8008290 <check_command_RELAY>
 8005276:	e033      	b.n	80052e0 <HAL_TIM_PeriodElapsedCallback+0xb84>
							} else if (sCommand[0] == 'I'
 8005278:	4bb3      	ldr	r3, [pc, #716]	; (8005548 <HAL_TIM_PeriodElapsedCallback+0xdec>)
 800527a:	22a0      	movs	r2, #160	; 0xa0
 800527c:	0052      	lsls	r2, r2, #1
 800527e:	189b      	adds	r3, r3, r2
 8005280:	2118      	movs	r1, #24
 8005282:	468c      	mov	ip, r1
 8005284:	44bc      	add	ip, r7
 8005286:	4463      	add	r3, ip
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	2b49      	cmp	r3, #73	; 0x49
 800528c:	d128      	bne.n	80052e0 <HAL_TIM_PeriodElapsedCallback+0xb84>
									&& sCommand[1] == 'N'
 800528e:	4bae      	ldr	r3, [pc, #696]	; (8005548 <HAL_TIM_PeriodElapsedCallback+0xdec>)
 8005290:	189b      	adds	r3, r3, r2
 8005292:	2118      	movs	r1, #24
 8005294:	468c      	mov	ip, r1
 8005296:	44bc      	add	ip, r7
 8005298:	4463      	add	r3, ip
 800529a:	785b      	ldrb	r3, [r3, #1]
 800529c:	2b4e      	cmp	r3, #78	; 0x4e
 800529e:	d11f      	bne.n	80052e0 <HAL_TIM_PeriodElapsedCallback+0xb84>
									&& sCommand[2] == 'F'
 80052a0:	4ba9      	ldr	r3, [pc, #676]	; (8005548 <HAL_TIM_PeriodElapsedCallback+0xdec>)
 80052a2:	189b      	adds	r3, r3, r2
 80052a4:	2118      	movs	r1, #24
 80052a6:	468c      	mov	ip, r1
 80052a8:	44bc      	add	ip, r7
 80052aa:	4463      	add	r3, ip
 80052ac:	789b      	ldrb	r3, [r3, #2]
 80052ae:	2b46      	cmp	r3, #70	; 0x46
 80052b0:	d116      	bne.n	80052e0 <HAL_TIM_PeriodElapsedCallback+0xb84>
									&& sCommand[3] == 'O'
 80052b2:	4ba5      	ldr	r3, [pc, #660]	; (8005548 <HAL_TIM_PeriodElapsedCallback+0xdec>)
 80052b4:	189b      	adds	r3, r3, r2
 80052b6:	2218      	movs	r2, #24
 80052b8:	4694      	mov	ip, r2
 80052ba:	44bc      	add	ip, r7
 80052bc:	4463      	add	r3, ip
 80052be:	78db      	ldrb	r3, [r3, #3]
 80052c0:	2b4f      	cmp	r3, #79	; 0x4f
 80052c2:	d10d      	bne.n	80052e0 <HAL_TIM_PeriodElapsedCallback+0xb84>
									&& isOwner == 1) {
 80052c4:	23ee      	movs	r3, #238	; 0xee
 80052c6:	2218      	movs	r2, #24
 80052c8:	189b      	adds	r3, r3, r2
 80052ca:	19db      	adds	r3, r3, r7
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d106      	bne.n	80052e0 <HAL_TIM_PeriodElapsedCallback+0xb84>
								//INFO COMMAND RECEIVED
								isIMEIApiCalled = 1;
 80052d2:	4b9e      	ldr	r3, [pc, #632]	; (800554c <HAL_TIM_PeriodElapsedCallback+0xdf0>)
 80052d4:	2201      	movs	r2, #1
 80052d6:	701a      	strb	r2, [r3, #0]
 80052d8:	e002      	b.n	80052e0 <HAL_TIM_PeriodElapsedCallback+0xb84>
								if(sCommand[14] == cPin[0]
 80052da:	46c0      	nop			; (mov r8, r8)
 80052dc:	e000      	b.n	80052e0 <HAL_TIM_PeriodElapsedCallback+0xb84>
								if (sCommand[4] == cPin[0]
 80052de:	46c0      	nop			; (mov r8, r8)
						}
					}
				}
			}
		}
		if (commandCase == 0) {
 80052e0:	4b9b      	ldr	r3, [pc, #620]	; (8005550 <HAL_TIM_PeriodElapsedCallback+0xdf4>)
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d172      	bne.n	80053d0 <HAL_TIM_PeriodElapsedCallback+0xc74>
			char *ptr;
			char *ptr2;
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 80052ea:	239d      	movs	r3, #157	; 0x9d
 80052ec:	005b      	lsls	r3, r3, #1
 80052ee:	2218      	movs	r2, #24
 80052f0:	189b      	adds	r3, r3, r2
 80052f2:	19db      	adds	r3, r3, r7
 80052f4:	2200      	movs	r2, #0
 80052f6:	701a      	strb	r2, [r3, #0]
 80052f8:	e04e      	b.n	8005398 <HAL_TIM_PeriodElapsedCallback+0xc3c>
				ptr = strstr(responseBuffer[i], "CLOSED");
 80052fa:	249d      	movs	r4, #157	; 0x9d
 80052fc:	0064      	lsls	r4, r4, #1
 80052fe:	2618      	movs	r6, #24
 8005300:	19a3      	adds	r3, r4, r6
 8005302:	19db      	adds	r3, r3, r7
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	2232      	movs	r2, #50	; 0x32
 8005308:	435a      	muls	r2, r3
 800530a:	4b92      	ldr	r3, [pc, #584]	; (8005554 <HAL_TIM_PeriodElapsedCallback+0xdf8>)
 800530c:	18d3      	adds	r3, r2, r3
 800530e:	4a92      	ldr	r2, [pc, #584]	; (8005558 <HAL_TIM_PeriodElapsedCallback+0xdfc>)
 8005310:	0011      	movs	r1, r2
 8005312:	0018      	movs	r0, r3
 8005314:	f009 fd31 	bl	800ed7a <strstr>
 8005318:	0003      	movs	r3, r0
 800531a:	25dc      	movs	r5, #220	; 0xdc
 800531c:	19aa      	adds	r2, r5, r6
 800531e:	19d2      	adds	r2, r2, r7
 8005320:	6013      	str	r3, [r2, #0]
				ptr2 = strstr(responseBuffer[i], "+PDP DEACT");
 8005322:	19a3      	adds	r3, r4, r6
 8005324:	19db      	adds	r3, r3, r7
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	2232      	movs	r2, #50	; 0x32
 800532a:	435a      	muls	r2, r3
 800532c:	4b89      	ldr	r3, [pc, #548]	; (8005554 <HAL_TIM_PeriodElapsedCallback+0xdf8>)
 800532e:	18d3      	adds	r3, r2, r3
 8005330:	4a8a      	ldr	r2, [pc, #552]	; (800555c <HAL_TIM_PeriodElapsedCallback+0xe00>)
 8005332:	0011      	movs	r1, r2
 8005334:	0018      	movs	r0, r3
 8005336:	f009 fd20 	bl	800ed7a <strstr>
 800533a:	0003      	movs	r3, r0
 800533c:	22d8      	movs	r2, #216	; 0xd8
 800533e:	1992      	adds	r2, r2, r6
 8005340:	19d2      	adds	r2, r2, r7
 8005342:	6013      	str	r3, [r2, #0]
				if (ptr != NULL) {
 8005344:	19ab      	adds	r3, r5, r6
 8005346:	19db      	adds	r3, r3, r7
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d009      	beq.n	8005362 <HAL_TIM_PeriodElapsedCallback+0xc06>
					// HAL_UART_Transmit(&huart4, "closed recv",
					// sizeof("closed recv"), 100);

					isLoggedIn = 0;
 800534e:	4b84      	ldr	r3, [pc, #528]	; (8005560 <HAL_TIM_PeriodElapsedCallback+0xe04>)
 8005350:	2200      	movs	r2, #0
 8005352:	701a      	strb	r2, [r3, #0]
					isDataMode = 0; //command mode activated
 8005354:	4b83      	ldr	r3, [pc, #524]	; (8005564 <HAL_TIM_PeriodElapsedCallback+0xe08>)
 8005356:	2200      	movs	r2, #0
 8005358:	701a      	strb	r2, [r3, #0]
					isTcpOpen = 0;
 800535a:	4b83      	ldr	r3, [pc, #524]	; (8005568 <HAL_TIM_PeriodElapsedCallback+0xe0c>)
 800535c:	2200      	movs	r2, #0
 800535e:	701a      	strb	r2, [r3, #0]
					break;
 8005360:	e022      	b.n	80053a8 <HAL_TIM_PeriodElapsedCallback+0xc4c>
				}
				if (ptr2 != NULL) {
 8005362:	23d8      	movs	r3, #216	; 0xd8
 8005364:	2218      	movs	r2, #24
 8005366:	189b      	adds	r3, r3, r2
 8005368:	19db      	adds	r3, r3, r7
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d009      	beq.n	8005384 <HAL_TIM_PeriodElapsedCallback+0xc28>
					// HAL_UART_Transmit(&huart4, "pdp deact recv",
					// sizeof("pdp deact"), 100);
					isLoggedIn = 0;
 8005370:	4b7b      	ldr	r3, [pc, #492]	; (8005560 <HAL_TIM_PeriodElapsedCallback+0xe04>)
 8005372:	2200      	movs	r2, #0
 8005374:	701a      	strb	r2, [r3, #0]
					isDataMode = 0; //command mode activated
 8005376:	4b7b      	ldr	r3, [pc, #492]	; (8005564 <HAL_TIM_PeriodElapsedCallback+0xe08>)
 8005378:	2200      	movs	r2, #0
 800537a:	701a      	strb	r2, [r3, #0]
					isTcpOpen = 0;
 800537c:	4b7a      	ldr	r3, [pc, #488]	; (8005568 <HAL_TIM_PeriodElapsedCallback+0xe0c>)
 800537e:	2200      	movs	r2, #0
 8005380:	701a      	strb	r2, [r3, #0]
					break;
 8005382:	e011      	b.n	80053a8 <HAL_TIM_PeriodElapsedCallback+0xc4c>
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 8005384:	219d      	movs	r1, #157	; 0x9d
 8005386:	0049      	lsls	r1, r1, #1
 8005388:	2018      	movs	r0, #24
 800538a:	180b      	adds	r3, r1, r0
 800538c:	19db      	adds	r3, r3, r7
 800538e:	781a      	ldrb	r2, [r3, #0]
 8005390:	180b      	adds	r3, r1, r0
 8005392:	19db      	adds	r3, r3, r7
 8005394:	3201      	adds	r2, #1
 8005396:	701a      	strb	r2, [r3, #0]
 8005398:	239d      	movs	r3, #157	; 0x9d
 800539a:	005b      	lsls	r3, r3, #1
 800539c:	2218      	movs	r2, #24
 800539e:	189b      	adds	r3, r3, r2
 80053a0:	19db      	adds	r3, r3, r7
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	2b05      	cmp	r3, #5
 80053a6:	d9a8      	bls.n	80052fa <HAL_TIM_PeriodElapsedCallback+0xb9e>
				}
			}
			HAL_TIM_Base_Stop_IT(&htim6);
 80053a8:	4b70      	ldr	r3, [pc, #448]	; (800556c <HAL_TIM_PeriodElapsedCallback+0xe10>)
 80053aa:	0018      	movs	r0, r3
 80053ac:	f006 fd82 	bl	800beb4 <HAL_TIM_Base_Stop_IT>
			memset(responseBuffer, 0, sizeof(responseBuffer));
 80053b0:	2396      	movs	r3, #150	; 0x96
 80053b2:	005a      	lsls	r2, r3, #1
 80053b4:	4b67      	ldr	r3, [pc, #412]	; (8005554 <HAL_TIM_PeriodElapsedCallback+0xdf8>)
 80053b6:	2100      	movs	r1, #0
 80053b8:	0018      	movs	r0, r3
 80053ba:	f009 fc86 	bl	800ecca <memset>
			lineCount = 0;
 80053be:	4b6c      	ldr	r3, [pc, #432]	; (8005570 <HAL_TIM_PeriodElapsedCallback+0xe14>)
 80053c0:	2200      	movs	r2, #0
 80053c2:	701a      	strb	r2, [r3, #0]
			charCount = 0;
 80053c4:	4b6b      	ldr	r3, [pc, #428]	; (8005574 <HAL_TIM_PeriodElapsedCallback+0xe18>)
 80053c6:	2200      	movs	r2, #0
 80053c8:	701a      	strb	r2, [r3, #0]
			isStart = 0;
 80053ca:	4b6b      	ldr	r3, [pc, #428]	; (8005578 <HAL_TIM_PeriodElapsedCallback+0xe1c>)
 80053cc:	2200      	movs	r2, #0
 80053ce:	701a      	strb	r2, [r3, #0]
		}

		// }
		if (commandCase == 1) {
 80053d0:	4b5f      	ldr	r3, [pc, #380]	; (8005550 <HAL_TIM_PeriodElapsedCallback+0xdf4>)
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d000      	beq.n	80053dc <HAL_TIM_PeriodElapsedCallback+0xc80>
 80053da:	e0d9      	b.n	8005590 <HAL_TIM_PeriodElapsedCallback+0xe34>
			uint8_t tLine = 99;
 80053dc:	233a      	movs	r3, #58	; 0x3a
 80053de:	33ff      	adds	r3, #255	; 0xff
 80053e0:	2118      	movs	r1, #24
 80053e2:	185b      	adds	r3, r3, r1
 80053e4:	19db      	adds	r3, r3, r7
 80053e6:	2263      	movs	r2, #99	; 0x63
 80053e8:	701a      	strb	r2, [r3, #0]
			char *ptr;
			char *ptr2;
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 80053ea:	239c      	movs	r3, #156	; 0x9c
 80053ec:	005b      	lsls	r3, r3, #1
 80053ee:	185b      	adds	r3, r3, r1
 80053f0:	19db      	adds	r3, r3, r7
 80053f2:	2200      	movs	r2, #0
 80053f4:	701a      	strb	r2, [r3, #0]
 80053f6:	e05b      	b.n	80054b0 <HAL_TIM_PeriodElapsedCallback+0xd54>
				ptr = strstr(responseBuffer[i], "OK");
 80053f8:	249c      	movs	r4, #156	; 0x9c
 80053fa:	0064      	lsls	r4, r4, #1
 80053fc:	2618      	movs	r6, #24
 80053fe:	19a3      	adds	r3, r4, r6
 8005400:	19db      	adds	r3, r3, r7
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	2232      	movs	r2, #50	; 0x32
 8005406:	435a      	muls	r2, r3
 8005408:	4b52      	ldr	r3, [pc, #328]	; (8005554 <HAL_TIM_PeriodElapsedCallback+0xdf8>)
 800540a:	18d3      	adds	r3, r2, r3
 800540c:	4a5b      	ldr	r2, [pc, #364]	; (800557c <HAL_TIM_PeriodElapsedCallback+0xe20>)
 800540e:	0011      	movs	r1, r2
 8005410:	0018      	movs	r0, r3
 8005412:	f009 fcb2 	bl	800ed7a <strstr>
 8005416:	0003      	movs	r3, r0
 8005418:	25b0      	movs	r5, #176	; 0xb0
 800541a:	19aa      	adds	r2, r5, r6
 800541c:	19d2      	adds	r2, r2, r7
 800541e:	6013      	str	r3, [r2, #0]
				ptr2 = strstr(responseBuffer[i], "ERROR");
 8005420:	19a3      	adds	r3, r4, r6
 8005422:	19db      	adds	r3, r3, r7
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	2232      	movs	r2, #50	; 0x32
 8005428:	435a      	muls	r2, r3
 800542a:	4b4a      	ldr	r3, [pc, #296]	; (8005554 <HAL_TIM_PeriodElapsedCallback+0xdf8>)
 800542c:	18d3      	adds	r3, r2, r3
 800542e:	4a54      	ldr	r2, [pc, #336]	; (8005580 <HAL_TIM_PeriodElapsedCallback+0xe24>)
 8005430:	0011      	movs	r1, r2
 8005432:	0018      	movs	r0, r3
 8005434:	f009 fca1 	bl	800ed7a <strstr>
 8005438:	0003      	movs	r3, r0
 800543a:	22ac      	movs	r2, #172	; 0xac
 800543c:	0031      	movs	r1, r6
 800543e:	1852      	adds	r2, r2, r1
 8005440:	19d2      	adds	r2, r2, r7
 8005442:	6013      	str	r3, [r2, #0]

				if (ptr != NULL) {
 8005444:	186b      	adds	r3, r5, r1
 8005446:	19db      	adds	r3, r3, r7
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00e      	beq.n	800546c <HAL_TIM_PeriodElapsedCallback+0xd10>
					tLine = i;
 800544e:	233a      	movs	r3, #58	; 0x3a
 8005450:	33ff      	adds	r3, #255	; 0xff
 8005452:	185b      	adds	r3, r3, r1
 8005454:	19db      	adds	r3, r3, r7
 8005456:	1862      	adds	r2, r4, r1
 8005458:	19d2      	adds	r2, r2, r7
 800545a:	7812      	ldrb	r2, [r2, #0]
 800545c:	701a      	strb	r2, [r3, #0]
					tResponse = 'G';
 800545e:	2340      	movs	r3, #64	; 0x40
 8005460:	33ff      	adds	r3, #255	; 0xff
 8005462:	185b      	adds	r3, r3, r1
 8005464:	19db      	adds	r3, r3, r7
 8005466:	2247      	movs	r2, #71	; 0x47
 8005468:	701a      	strb	r2, [r3, #0]
					break;
 800546a:	e029      	b.n	80054c0 <HAL_TIM_PeriodElapsedCallback+0xd64>
				}
				if (ptr2 != NULL) {
 800546c:	23ac      	movs	r3, #172	; 0xac
 800546e:	2118      	movs	r1, #24
 8005470:	185b      	adds	r3, r3, r1
 8005472:	19db      	adds	r3, r3, r7
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d010      	beq.n	800549c <HAL_TIM_PeriodElapsedCallback+0xd40>
					tLine = i;
 800547a:	233a      	movs	r3, #58	; 0x3a
 800547c:	33ff      	adds	r3, #255	; 0xff
 800547e:	185b      	adds	r3, r3, r1
 8005480:	19db      	adds	r3, r3, r7
 8005482:	229c      	movs	r2, #156	; 0x9c
 8005484:	0052      	lsls	r2, r2, #1
 8005486:	1852      	adds	r2, r2, r1
 8005488:	19d2      	adds	r2, r2, r7
 800548a:	7812      	ldrb	r2, [r2, #0]
 800548c:	701a      	strb	r2, [r3, #0]
					tResponse = 'B';
 800548e:	2340      	movs	r3, #64	; 0x40
 8005490:	33ff      	adds	r3, #255	; 0xff
 8005492:	185b      	adds	r3, r3, r1
 8005494:	19db      	adds	r3, r3, r7
 8005496:	2242      	movs	r2, #66	; 0x42
 8005498:	701a      	strb	r2, [r3, #0]
					break;
 800549a:	e011      	b.n	80054c0 <HAL_TIM_PeriodElapsedCallback+0xd64>
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 800549c:	219c      	movs	r1, #156	; 0x9c
 800549e:	0049      	lsls	r1, r1, #1
 80054a0:	2018      	movs	r0, #24
 80054a2:	180b      	adds	r3, r1, r0
 80054a4:	19db      	adds	r3, r3, r7
 80054a6:	781a      	ldrb	r2, [r3, #0]
 80054a8:	180b      	adds	r3, r1, r0
 80054aa:	19db      	adds	r3, r3, r7
 80054ac:	3201      	adds	r2, #1
 80054ae:	701a      	strb	r2, [r3, #0]
 80054b0:	239c      	movs	r3, #156	; 0x9c
 80054b2:	005b      	lsls	r3, r3, #1
 80054b4:	2218      	movs	r2, #24
 80054b6:	189b      	adds	r3, r3, r2
 80054b8:	19db      	adds	r3, r3, r7
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	2b05      	cmp	r3, #5
 80054be:	d99b      	bls.n	80053f8 <HAL_TIM_PeriodElapsedCallback+0xc9c>
				}
			}
			if (tLine != 99) {
 80054c0:	233a      	movs	r3, #58	; 0x3a
 80054c2:	33ff      	adds	r3, #255	; 0xff
 80054c4:	2218      	movs	r2, #24
 80054c6:	189b      	adds	r3, r3, r2
 80054c8:	19db      	adds	r3, r3, r7
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	2b63      	cmp	r3, #99	; 0x63
 80054ce:	d021      	beq.n	8005514 <HAL_TIM_PeriodElapsedCallback+0xdb8>
				if (tResponse == 'G') {
 80054d0:	2340      	movs	r3, #64	; 0x40
 80054d2:	33ff      	adds	r3, #255	; 0xff
 80054d4:	189b      	adds	r3, r3, r2
 80054d6:	19db      	adds	r3, r3, r7
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	2b47      	cmp	r3, #71	; 0x47
 80054dc:	d108      	bne.n	80054f0 <HAL_TIM_PeriodElapsedCallback+0xd94>
					isResponseOk = 1;
 80054de:	4b29      	ldr	r3, [pc, #164]	; (8005584 <HAL_TIM_PeriodElapsedCallback+0xe28>)
 80054e0:	2201      	movs	r2, #1
 80054e2:	701a      	strb	r2, [r3, #0]
					clearit();
 80054e4:	f001 fbca 	bl	8006c7c <clearit>
					commandCase = 0;
 80054e8:	4b19      	ldr	r3, [pc, #100]	; (8005550 <HAL_TIM_PeriodElapsedCallback+0xdf4>)
 80054ea:	2200      	movs	r2, #0
 80054ec:	701a      	strb	r2, [r3, #0]
 80054ee:	e37c      	b.n	8005bea <HAL_TIM_PeriodElapsedCallback+0x148e>

				} else if (tResponse == 'B') {
 80054f0:	2340      	movs	r3, #64	; 0x40
 80054f2:	33ff      	adds	r3, #255	; 0xff
 80054f4:	2218      	movs	r2, #24
 80054f6:	189b      	adds	r3, r3, r2
 80054f8:	19db      	adds	r3, r3, r7
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	2b42      	cmp	r3, #66	; 0x42
 80054fe:	d000      	beq.n	8005502 <HAL_TIM_PeriodElapsedCallback+0xda6>
 8005500:	e373      	b.n	8005bea <HAL_TIM_PeriodElapsedCallback+0x148e>
					isResponseOk = 0;
 8005502:	4b20      	ldr	r3, [pc, #128]	; (8005584 <HAL_TIM_PeriodElapsedCallback+0xe28>)
 8005504:	2200      	movs	r2, #0
 8005506:	701a      	strb	r2, [r3, #0]
					clearit();
 8005508:	f001 fbb8 	bl	8006c7c <clearit>
					commandCase = 0;
 800550c:	4b10      	ldr	r3, [pc, #64]	; (8005550 <HAL_TIM_PeriodElapsedCallback+0xdf4>)
 800550e:	2200      	movs	r2, #0
 8005510:	701a      	strb	r2, [r3, #0]
 8005512:	e36a      	b.n	8005bea <HAL_TIM_PeriodElapsedCallback+0x148e>
				}
			} else {

				resTimeout--;
 8005514:	4b1c      	ldr	r3, [pc, #112]	; (8005588 <HAL_TIM_PeriodElapsedCallback+0xe2c>)
 8005516:	881b      	ldrh	r3, [r3, #0]
 8005518:	b29b      	uxth	r3, r3
 800551a:	3b01      	subs	r3, #1
 800551c:	b29a      	uxth	r2, r3
 800551e:	4b1a      	ldr	r3, [pc, #104]	; (8005588 <HAL_TIM_PeriodElapsedCallback+0xe2c>)
 8005520:	801a      	strh	r2, [r3, #0]
				if (resTimeout < 1) {
 8005522:	4b19      	ldr	r3, [pc, #100]	; (8005588 <HAL_TIM_PeriodElapsedCallback+0xe2c>)
 8005524:	881b      	ldrh	r3, [r3, #0]
 8005526:	b29b      	uxth	r3, r3
 8005528:	2b00      	cmp	r3, #0
 800552a:	d000      	beq.n	800552e <HAL_TIM_PeriodElapsedCallback+0xdd2>
 800552c:	e35d      	b.n	8005bea <HAL_TIM_PeriodElapsedCallback+0x148e>
					if (!recResponse) {
 800552e:	4b17      	ldr	r3, [pc, #92]	; (800558c <HAL_TIM_PeriodElapsedCallback+0xe30>)
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	b2db      	uxtb	r3, r3
 8005534:	2b00      	cmp	r3, #0
 8005536:	d101      	bne.n	800553c <HAL_TIM_PeriodElapsedCallback+0xde0>
						//printf("TIMEOUT HASH TAG\n");
						rebootsystem();
 8005538:	f000 ffa6 	bl	8006488 <rebootsystem>

					}
					clearit();
 800553c:	f001 fb9e 	bl	8006c7c <clearit>
					isResponseOk = 0;
 8005540:	4b10      	ldr	r3, [pc, #64]	; (8005584 <HAL_TIM_PeriodElapsedCallback+0xe28>)
 8005542:	2200      	movs	r2, #0
 8005544:	701a      	strb	r2, [r3, #0]
 8005546:	e350      	b.n	8005bea <HAL_TIM_PeriodElapsedCallback+0x148e>
 8005548:	fffffefc 	.word	0xfffffefc
 800554c:	20000a2f 	.word	0x20000a2f
 8005550:	2000087f 	.word	0x2000087f
 8005554:	20000748 	.word	0x20000748
 8005558:	08013184 	.word	0x08013184
 800555c:	0801318c 	.word	0x0801318c
 8005560:	20000a30 	.word	0x20000a30
 8005564:	2000087a 	.word	0x2000087a
 8005568:	20000a2c 	.word	0x20000a2c
 800556c:	20000398 	.word	0x20000398
 8005570:	20000874 	.word	0x20000874
 8005574:	20000875 	.word	0x20000875
 8005578:	20000878 	.word	0x20000878
 800557c:	08013198 	.word	0x08013198
 8005580:	0801319c 	.word	0x0801319c
 8005584:	20000880 	.word	0x20000880
 8005588:	2000087c 	.word	0x2000087c
 800558c:	20000881 	.word	0x20000881

				}
			}
		} else if (commandCase == 2) {
 8005590:	4be3      	ldr	r3, [pc, #908]	; (8005920 <HAL_TIM_PeriodElapsedCallback+0x11c4>)
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	b2db      	uxtb	r3, r3
 8005596:	2b02      	cmp	r3, #2
 8005598:	d169      	bne.n	800566e <HAL_TIM_PeriodElapsedCallback+0xf12>
			//CPIN Case
			uint8_t tLine = 99;
 800559a:	2338      	movs	r3, #56	; 0x38
 800559c:	33ff      	adds	r3, #255	; 0xff
 800559e:	2118      	movs	r1, #24
 80055a0:	185b      	adds	r3, r3, r1
 80055a2:	19db      	adds	r3, r3, r7
 80055a4:	2263      	movs	r2, #99	; 0x63
 80055a6:	701a      	strb	r2, [r3, #0]
			char *ptr;
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 80055a8:	239b      	movs	r3, #155	; 0x9b
 80055aa:	005b      	lsls	r3, r3, #1
 80055ac:	185b      	adds	r3, r3, r1
 80055ae:	19db      	adds	r3, r3, r7
 80055b0:	2200      	movs	r2, #0
 80055b2:	701a      	strb	r2, [r3, #0]
 80055b4:	e02b      	b.n	800560e <HAL_TIM_PeriodElapsedCallback+0xeb2>
				ptr = strstr(responseBuffer[i], "READY");
 80055b6:	249b      	movs	r4, #155	; 0x9b
 80055b8:	0064      	lsls	r4, r4, #1
 80055ba:	2518      	movs	r5, #24
 80055bc:	1963      	adds	r3, r4, r5
 80055be:	19db      	adds	r3, r3, r7
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	2232      	movs	r2, #50	; 0x32
 80055c4:	435a      	muls	r2, r3
 80055c6:	4bd7      	ldr	r3, [pc, #860]	; (8005924 <HAL_TIM_PeriodElapsedCallback+0x11c8>)
 80055c8:	18d3      	adds	r3, r2, r3
 80055ca:	4ad7      	ldr	r2, [pc, #860]	; (8005928 <HAL_TIM_PeriodElapsedCallback+0x11cc>)
 80055cc:	0011      	movs	r1, r2
 80055ce:	0018      	movs	r0, r3
 80055d0:	f009 fbd3 	bl	800ed7a <strstr>
 80055d4:	0003      	movs	r3, r0
 80055d6:	22b4      	movs	r2, #180	; 0xb4
 80055d8:	1951      	adds	r1, r2, r5
 80055da:	19c9      	adds	r1, r1, r7
 80055dc:	600b      	str	r3, [r1, #0]
				if (ptr != NULL) {
 80055de:	1953      	adds	r3, r2, r5
 80055e0:	19db      	adds	r3, r3, r7
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d008      	beq.n	80055fa <HAL_TIM_PeriodElapsedCallback+0xe9e>
					tLine = i;
 80055e8:	2338      	movs	r3, #56	; 0x38
 80055ea:	33ff      	adds	r3, #255	; 0xff
 80055ec:	195b      	adds	r3, r3, r5
 80055ee:	19db      	adds	r3, r3, r7
 80055f0:	1962      	adds	r2, r4, r5
 80055f2:	19d2      	adds	r2, r2, r7
 80055f4:	7812      	ldrb	r2, [r2, #0]
 80055f6:	701a      	strb	r2, [r3, #0]
					break;
 80055f8:	e011      	b.n	800561e <HAL_TIM_PeriodElapsedCallback+0xec2>
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 80055fa:	219b      	movs	r1, #155	; 0x9b
 80055fc:	0049      	lsls	r1, r1, #1
 80055fe:	2018      	movs	r0, #24
 8005600:	180b      	adds	r3, r1, r0
 8005602:	19db      	adds	r3, r3, r7
 8005604:	781a      	ldrb	r2, [r3, #0]
 8005606:	180b      	adds	r3, r1, r0
 8005608:	19db      	adds	r3, r3, r7
 800560a:	3201      	adds	r2, #1
 800560c:	701a      	strb	r2, [r3, #0]
 800560e:	239b      	movs	r3, #155	; 0x9b
 8005610:	005b      	lsls	r3, r3, #1
 8005612:	2218      	movs	r2, #24
 8005614:	189b      	adds	r3, r3, r2
 8005616:	19db      	adds	r3, r3, r7
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	2b05      	cmp	r3, #5
 800561c:	d9cb      	bls.n	80055b6 <HAL_TIM_PeriodElapsedCallback+0xe5a>
				}
			}
			if (tLine != 99) {
 800561e:	2338      	movs	r3, #56	; 0x38
 8005620:	33ff      	adds	r3, #255	; 0xff
 8005622:	2218      	movs	r2, #24
 8005624:	189b      	adds	r3, r3, r2
 8005626:	19db      	adds	r3, r3, r7
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	2b63      	cmp	r3, #99	; 0x63
 800562c:	d005      	beq.n	800563a <HAL_TIM_PeriodElapsedCallback+0xede>
				isResponseOk = 1;
 800562e:	4bbf      	ldr	r3, [pc, #764]	; (800592c <HAL_TIM_PeriodElapsedCallback+0x11d0>)
 8005630:	2201      	movs	r2, #1
 8005632:	701a      	strb	r2, [r3, #0]
				clearit();
 8005634:	f001 fb22 	bl	8006c7c <clearit>
 8005638:	e2d7      	b.n	8005bea <HAL_TIM_PeriodElapsedCallback+0x148e>
			} else {
				resTimeout--;
 800563a:	4bbd      	ldr	r3, [pc, #756]	; (8005930 <HAL_TIM_PeriodElapsedCallback+0x11d4>)
 800563c:	881b      	ldrh	r3, [r3, #0]
 800563e:	b29b      	uxth	r3, r3
 8005640:	3b01      	subs	r3, #1
 8005642:	b29a      	uxth	r2, r3
 8005644:	4bba      	ldr	r3, [pc, #744]	; (8005930 <HAL_TIM_PeriodElapsedCallback+0x11d4>)
 8005646:	801a      	strh	r2, [r3, #0]
				if (resTimeout < 1) {
 8005648:	4bb9      	ldr	r3, [pc, #740]	; (8005930 <HAL_TIM_PeriodElapsedCallback+0x11d4>)
 800564a:	881b      	ldrh	r3, [r3, #0]
 800564c:	b29b      	uxth	r3, r3
 800564e:	2b00      	cmp	r3, #0
 8005650:	d000      	beq.n	8005654 <HAL_TIM_PeriodElapsedCallback+0xef8>
 8005652:	e2ca      	b.n	8005bea <HAL_TIM_PeriodElapsedCallback+0x148e>
					if (!recResponse) {
 8005654:	4bb7      	ldr	r3, [pc, #732]	; (8005934 <HAL_TIM_PeriodElapsedCallback+0x11d8>)
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	b2db      	uxtb	r3, r3
 800565a:	2b00      	cmp	r3, #0
 800565c:	d101      	bne.n	8005662 <HAL_TIM_PeriodElapsedCallback+0xf06>
						rebootsystem();
 800565e:	f000 ff13 	bl	8006488 <rebootsystem>

					}
					clearit();
 8005662:	f001 fb0b 	bl	8006c7c <clearit>
					isResponseOk = 0;
 8005666:	4bb1      	ldr	r3, [pc, #708]	; (800592c <HAL_TIM_PeriodElapsedCallback+0x11d0>)
 8005668:	2200      	movs	r2, #0
 800566a:	701a      	strb	r2, [r3, #0]
 800566c:	e2bd      	b.n	8005bea <HAL_TIM_PeriodElapsedCallback+0x148e>
				}
			}
		} else if (commandCase == 3) {
 800566e:	4bac      	ldr	r3, [pc, #688]	; (8005920 <HAL_TIM_PeriodElapsedCallback+0x11c4>)
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	b2db      	uxtb	r3, r3
 8005674:	2b03      	cmp	r3, #3
 8005676:	d000      	beq.n	800567a <HAL_TIM_PeriodElapsedCallback+0xf1e>
 8005678:	e0b6      	b.n	80057e8 <HAL_TIM_PeriodElapsedCallback+0x108c>
			// CREG? / CGREG? case
			uint8_t tLine = 99;
 800567a:	2336      	movs	r3, #54	; 0x36
 800567c:	33ff      	adds	r3, #255	; 0xff
 800567e:	2118      	movs	r1, #24
 8005680:	185b      	adds	r3, r3, r1
 8005682:	19db      	adds	r3, r3, r7
 8005684:	2263      	movs	r2, #99	; 0x63
 8005686:	701a      	strb	r2, [r3, #0]
			char *ptr;
			char *ptr2;
			char *ptr3;
			char *ptr4;
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 8005688:	239a      	movs	r3, #154	; 0x9a
 800568a:	005b      	lsls	r3, r3, #1
 800568c:	185b      	adds	r3, r3, r1
 800568e:	19db      	adds	r3, r3, r7
 8005690:	2200      	movs	r2, #0
 8005692:	701a      	strb	r2, [r3, #0]
 8005694:	e075      	b.n	8005782 <HAL_TIM_PeriodElapsedCallback+0x1026>
				ptr = strstr(responseBuffer[i], "+CREG: 0,1");
 8005696:	249a      	movs	r4, #154	; 0x9a
 8005698:	0064      	lsls	r4, r4, #1
 800569a:	2618      	movs	r6, #24
 800569c:	19a3      	adds	r3, r4, r6
 800569e:	19db      	adds	r3, r3, r7
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	2232      	movs	r2, #50	; 0x32
 80056a4:	435a      	muls	r2, r3
 80056a6:	4b9f      	ldr	r3, [pc, #636]	; (8005924 <HAL_TIM_PeriodElapsedCallback+0x11c8>)
 80056a8:	18d3      	adds	r3, r2, r3
 80056aa:	4aa3      	ldr	r2, [pc, #652]	; (8005938 <HAL_TIM_PeriodElapsedCallback+0x11dc>)
 80056ac:	0011      	movs	r1, r2
 80056ae:	0018      	movs	r0, r3
 80056b0:	f009 fb63 	bl	800ed7a <strstr>
 80056b4:	0003      	movs	r3, r0
 80056b6:	25c4      	movs	r5, #196	; 0xc4
 80056b8:	19aa      	adds	r2, r5, r6
 80056ba:	19d2      	adds	r2, r2, r7
 80056bc:	6013      	str	r3, [r2, #0]
				ptr2 = strstr(responseBuffer[i], "+CREG: 0,5");
 80056be:	19a3      	adds	r3, r4, r6
 80056c0:	19db      	adds	r3, r3, r7
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	2232      	movs	r2, #50	; 0x32
 80056c6:	435a      	muls	r2, r3
 80056c8:	4b96      	ldr	r3, [pc, #600]	; (8005924 <HAL_TIM_PeriodElapsedCallback+0x11c8>)
 80056ca:	18d3      	adds	r3, r2, r3
 80056cc:	4a9b      	ldr	r2, [pc, #620]	; (800593c <HAL_TIM_PeriodElapsedCallback+0x11e0>)
 80056ce:	0011      	movs	r1, r2
 80056d0:	0018      	movs	r0, r3
 80056d2:	f009 fb52 	bl	800ed7a <strstr>
 80056d6:	0003      	movs	r3, r0
 80056d8:	26c0      	movs	r6, #192	; 0xc0
 80056da:	2018      	movs	r0, #24
 80056dc:	1832      	adds	r2, r6, r0
 80056de:	19d2      	adds	r2, r2, r7
 80056e0:	6013      	str	r3, [r2, #0]
				ptr3 = strstr(responseBuffer[i], "+CGREG: 0,1");
 80056e2:	1823      	adds	r3, r4, r0
 80056e4:	19db      	adds	r3, r3, r7
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	2232      	movs	r2, #50	; 0x32
 80056ea:	435a      	muls	r2, r3
 80056ec:	4b8d      	ldr	r3, [pc, #564]	; (8005924 <HAL_TIM_PeriodElapsedCallback+0x11c8>)
 80056ee:	18d3      	adds	r3, r2, r3
 80056f0:	4a93      	ldr	r2, [pc, #588]	; (8005940 <HAL_TIM_PeriodElapsedCallback+0x11e4>)
 80056f2:	0011      	movs	r1, r2
 80056f4:	0018      	movs	r0, r3
 80056f6:	f009 fb40 	bl	800ed7a <strstr>
 80056fa:	0003      	movs	r3, r0
 80056fc:	22bc      	movs	r2, #188	; 0xbc
 80056fe:	2018      	movs	r0, #24
 8005700:	1812      	adds	r2, r2, r0
 8005702:	19d1      	adds	r1, r2, r7
 8005704:	600b      	str	r3, [r1, #0]
				ptr4 = strstr(responseBuffer[i], "+CGREG: 0,5");
 8005706:	1823      	adds	r3, r4, r0
 8005708:	19db      	adds	r3, r3, r7
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	2232      	movs	r2, #50	; 0x32
 800570e:	435a      	muls	r2, r3
 8005710:	4b84      	ldr	r3, [pc, #528]	; (8005924 <HAL_TIM_PeriodElapsedCallback+0x11c8>)
 8005712:	18d3      	adds	r3, r2, r3
 8005714:	4a8b      	ldr	r2, [pc, #556]	; (8005944 <HAL_TIM_PeriodElapsedCallback+0x11e8>)
 8005716:	0011      	movs	r1, r2
 8005718:	0018      	movs	r0, r3
 800571a:	f009 fb2e 	bl	800ed7a <strstr>
 800571e:	0003      	movs	r3, r0
 8005720:	21b8      	movs	r1, #184	; 0xb8
 8005722:	2218      	movs	r2, #24
 8005724:	1888      	adds	r0, r1, r2
 8005726:	19c0      	adds	r0, r0, r7
 8005728:	6003      	str	r3, [r0, #0]
				if (ptr != NULL || ptr2 != NULL || ptr3 != NULL || ptr4 != NULL) {
 800572a:	0010      	movs	r0, r2
 800572c:	182b      	adds	r3, r5, r0
 800572e:	19db      	adds	r3, r3, r7
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d10f      	bne.n	8005756 <HAL_TIM_PeriodElapsedCallback+0xffa>
 8005736:	1833      	adds	r3, r6, r0
 8005738:	19db      	adds	r3, r3, r7
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d10a      	bne.n	8005756 <HAL_TIM_PeriodElapsedCallback+0xffa>
 8005740:	22bc      	movs	r2, #188	; 0xbc
 8005742:	1813      	adds	r3, r2, r0
 8005744:	19db      	adds	r3, r3, r7
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d104      	bne.n	8005756 <HAL_TIM_PeriodElapsedCallback+0xffa>
 800574c:	180b      	adds	r3, r1, r0
 800574e:	19db      	adds	r3, r3, r7
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d00b      	beq.n	800576e <HAL_TIM_PeriodElapsedCallback+0x1012>
					tLine = i;
 8005756:	2336      	movs	r3, #54	; 0x36
 8005758:	33ff      	adds	r3, #255	; 0xff
 800575a:	2118      	movs	r1, #24
 800575c:	185b      	adds	r3, r3, r1
 800575e:	19db      	adds	r3, r3, r7
 8005760:	229a      	movs	r2, #154	; 0x9a
 8005762:	0052      	lsls	r2, r2, #1
 8005764:	1852      	adds	r2, r2, r1
 8005766:	19d2      	adds	r2, r2, r7
 8005768:	7812      	ldrb	r2, [r2, #0]
 800576a:	701a      	strb	r2, [r3, #0]
					break;
 800576c:	e011      	b.n	8005792 <HAL_TIM_PeriodElapsedCallback+0x1036>
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 800576e:	219a      	movs	r1, #154	; 0x9a
 8005770:	0049      	lsls	r1, r1, #1
 8005772:	2018      	movs	r0, #24
 8005774:	180b      	adds	r3, r1, r0
 8005776:	19db      	adds	r3, r3, r7
 8005778:	781a      	ldrb	r2, [r3, #0]
 800577a:	180b      	adds	r3, r1, r0
 800577c:	19db      	adds	r3, r3, r7
 800577e:	3201      	adds	r2, #1
 8005780:	701a      	strb	r2, [r3, #0]
 8005782:	239a      	movs	r3, #154	; 0x9a
 8005784:	005b      	lsls	r3, r3, #1
 8005786:	2218      	movs	r2, #24
 8005788:	189b      	adds	r3, r3, r2
 800578a:	19db      	adds	r3, r3, r7
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	2b05      	cmp	r3, #5
 8005790:	d981      	bls.n	8005696 <HAL_TIM_PeriodElapsedCallback+0xf3a>
				}
			}
			if (tLine != 99) {
 8005792:	2336      	movs	r3, #54	; 0x36
 8005794:	33ff      	adds	r3, #255	; 0xff
 8005796:	2218      	movs	r2, #24
 8005798:	189b      	adds	r3, r3, r2
 800579a:	19db      	adds	r3, r3, r7
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	2b63      	cmp	r3, #99	; 0x63
 80057a0:	d008      	beq.n	80057b4 <HAL_TIM_PeriodElapsedCallback+0x1058>
				isReg = 1;
 80057a2:	4b69      	ldr	r3, [pc, #420]	; (8005948 <HAL_TIM_PeriodElapsedCallback+0x11ec>)
 80057a4:	2201      	movs	r2, #1
 80057a6:	701a      	strb	r2, [r3, #0]
				isResponseOk = 1;
 80057a8:	4b60      	ldr	r3, [pc, #384]	; (800592c <HAL_TIM_PeriodElapsedCallback+0x11d0>)
 80057aa:	2201      	movs	r2, #1
 80057ac:	701a      	strb	r2, [r3, #0]
				clearit();
 80057ae:	f001 fa65 	bl	8006c7c <clearit>
 80057b2:	e21a      	b.n	8005bea <HAL_TIM_PeriodElapsedCallback+0x148e>

			} else {
				resTimeout--;
 80057b4:	4b5e      	ldr	r3, [pc, #376]	; (8005930 <HAL_TIM_PeriodElapsedCallback+0x11d4>)
 80057b6:	881b      	ldrh	r3, [r3, #0]
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	3b01      	subs	r3, #1
 80057bc:	b29a      	uxth	r2, r3
 80057be:	4b5c      	ldr	r3, [pc, #368]	; (8005930 <HAL_TIM_PeriodElapsedCallback+0x11d4>)
 80057c0:	801a      	strh	r2, [r3, #0]
				if (resTimeout < 1) {
 80057c2:	4b5b      	ldr	r3, [pc, #364]	; (8005930 <HAL_TIM_PeriodElapsedCallback+0x11d4>)
 80057c4:	881b      	ldrh	r3, [r3, #0]
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d000      	beq.n	80057ce <HAL_TIM_PeriodElapsedCallback+0x1072>
 80057cc:	e20d      	b.n	8005bea <HAL_TIM_PeriodElapsedCallback+0x148e>
					if (!recResponse) {
 80057ce:	4b59      	ldr	r3, [pc, #356]	; (8005934 <HAL_TIM_PeriodElapsedCallback+0x11d8>)
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d101      	bne.n	80057dc <HAL_TIM_PeriodElapsedCallback+0x1080>
						rebootsystem();
 80057d8:	f000 fe56 	bl	8006488 <rebootsystem>
					}
					clearit();
 80057dc:	f001 fa4e 	bl	8006c7c <clearit>
					isResponseOk = 0;
 80057e0:	4b52      	ldr	r3, [pc, #328]	; (800592c <HAL_TIM_PeriodElapsedCallback+0x11d0>)
 80057e2:	2200      	movs	r2, #0
 80057e4:	701a      	strb	r2, [r3, #0]
 80057e6:	e200      	b.n	8005bea <HAL_TIM_PeriodElapsedCallback+0x148e>
				}
			}
		}

		else if (commandCase == 4) {
 80057e8:	4b4d      	ldr	r3, [pc, #308]	; (8005920 <HAL_TIM_PeriodElapsedCallback+0x11c4>)
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	2b04      	cmp	r3, #4
 80057f0:	d000      	beq.n	80057f4 <HAL_TIM_PeriodElapsedCallback+0x1098>
 80057f2:	e10b      	b.n	8005a0c <HAL_TIM_PeriodElapsedCallback+0x12b0>
			//CGSN (IMEI) case
			uint8_t tLine = 99;
 80057f4:	2334      	movs	r3, #52	; 0x34
 80057f6:	33ff      	adds	r3, #255	; 0xff
 80057f8:	2118      	movs	r1, #24
 80057fa:	185b      	adds	r3, r3, r1
 80057fc:	19db      	adds	r3, r3, r7
 80057fe:	2263      	movs	r2, #99	; 0x63
 8005800:	701a      	strb	r2, [r3, #0]
			char *ptr;
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 8005802:	2399      	movs	r3, #153	; 0x99
 8005804:	005b      	lsls	r3, r3, #1
 8005806:	185b      	adds	r3, r3, r1
 8005808:	19db      	adds	r3, r3, r7
 800580a:	2200      	movs	r2, #0
 800580c:	701a      	strb	r2, [r3, #0]
 800580e:	e02b      	b.n	8005868 <HAL_TIM_PeriodElapsedCallback+0x110c>
				ptr = strstr(responseBuffer[i], "OK");
 8005810:	2499      	movs	r4, #153	; 0x99
 8005812:	0064      	lsls	r4, r4, #1
 8005814:	2518      	movs	r5, #24
 8005816:	1963      	adds	r3, r4, r5
 8005818:	19db      	adds	r3, r3, r7
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	2232      	movs	r2, #50	; 0x32
 800581e:	435a      	muls	r2, r3
 8005820:	4b40      	ldr	r3, [pc, #256]	; (8005924 <HAL_TIM_PeriodElapsedCallback+0x11c8>)
 8005822:	18d3      	adds	r3, r2, r3
 8005824:	4a49      	ldr	r2, [pc, #292]	; (800594c <HAL_TIM_PeriodElapsedCallback+0x11f0>)
 8005826:	0011      	movs	r1, r2
 8005828:	0018      	movs	r0, r3
 800582a:	f009 faa6 	bl	800ed7a <strstr>
 800582e:	0003      	movs	r3, r0
 8005830:	22c8      	movs	r2, #200	; 0xc8
 8005832:	1951      	adds	r1, r2, r5
 8005834:	19c9      	adds	r1, r1, r7
 8005836:	600b      	str	r3, [r1, #0]
				if (ptr != NULL) {
 8005838:	1953      	adds	r3, r2, r5
 800583a:	19db      	adds	r3, r3, r7
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d008      	beq.n	8005854 <HAL_TIM_PeriodElapsedCallback+0x10f8>
					tLine = i;
 8005842:	2334      	movs	r3, #52	; 0x34
 8005844:	33ff      	adds	r3, #255	; 0xff
 8005846:	195b      	adds	r3, r3, r5
 8005848:	19db      	adds	r3, r3, r7
 800584a:	1962      	adds	r2, r4, r5
 800584c:	19d2      	adds	r2, r2, r7
 800584e:	7812      	ldrb	r2, [r2, #0]
 8005850:	701a      	strb	r2, [r3, #0]
					break;
 8005852:	e011      	b.n	8005878 <HAL_TIM_PeriodElapsedCallback+0x111c>
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 8005854:	2199      	movs	r1, #153	; 0x99
 8005856:	0049      	lsls	r1, r1, #1
 8005858:	2018      	movs	r0, #24
 800585a:	180b      	adds	r3, r1, r0
 800585c:	19db      	adds	r3, r3, r7
 800585e:	781a      	ldrb	r2, [r3, #0]
 8005860:	180b      	adds	r3, r1, r0
 8005862:	19db      	adds	r3, r3, r7
 8005864:	3201      	adds	r2, #1
 8005866:	701a      	strb	r2, [r3, #0]
 8005868:	2399      	movs	r3, #153	; 0x99
 800586a:	005b      	lsls	r3, r3, #1
 800586c:	2218      	movs	r2, #24
 800586e:	189b      	adds	r3, r3, r2
 8005870:	19db      	adds	r3, r3, r7
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	2b05      	cmp	r3, #5
 8005876:	d9cb      	bls.n	8005810 <HAL_TIM_PeriodElapsedCallback+0x10b4>
				}
			}
			if (tLine != 99) {
 8005878:	2434      	movs	r4, #52	; 0x34
 800587a:	34ff      	adds	r4, #255	; 0xff
 800587c:	2118      	movs	r1, #24
 800587e:	1863      	adds	r3, r4, r1
 8005880:	19db      	adds	r3, r3, r7
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	2b63      	cmp	r3, #99	; 0x63
 8005886:	d100      	bne.n	800588a <HAL_TIM_PeriodElapsedCallback+0x112e>
 8005888:	e0a6      	b.n	80059d8 <HAL_TIM_PeriodElapsedCallback+0x127c>
				isResponseOk = 1;
 800588a:	4b28      	ldr	r3, [pc, #160]	; (800592c <HAL_TIM_PeriodElapsedCallback+0x11d0>)
 800588c:	2201      	movs	r2, #1
 800588e:	701a      	strb	r2, [r3, #0]
				//to-do with that line
				char p[10];
				memset(p, 0, sizeof(p));
 8005890:	2584      	movs	r5, #132	; 0x84
 8005892:	000e      	movs	r6, r1
 8005894:	186b      	adds	r3, r5, r1
 8005896:	19db      	adds	r3, r3, r7
 8005898:	220a      	movs	r2, #10
 800589a:	2100      	movs	r1, #0
 800589c:	0018      	movs	r0, r3
 800589e:	f009 fa14 	bl	800ecca <memset>
				char *myt;
				myt = responseBuffer[tLine - 2];
 80058a2:	0031      	movs	r1, r6
 80058a4:	1863      	adds	r3, r4, r1
 80058a6:	19db      	adds	r3, r3, r7
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	3b02      	subs	r3, #2
 80058ac:	2232      	movs	r2, #50	; 0x32
 80058ae:	435a      	muls	r2, r3
 80058b0:	4b1c      	ldr	r3, [pc, #112]	; (8005924 <HAL_TIM_PeriodElapsedCallback+0x11c8>)
 80058b2:	18d3      	adds	r3, r2, r3
 80058b4:	2496      	movs	r4, #150	; 0x96
 80058b6:	0064      	lsls	r4, r4, #1
 80058b8:	000e      	movs	r6, r1
 80058ba:	19a2      	adds	r2, r4, r6
 80058bc:	19d2      	adds	r2, r2, r7
 80058be:	6013      	str	r3, [r2, #0]

				//make a copy of text based imei
				memset(imeiChar,0,sizeof(imeiChar));
 80058c0:	4b23      	ldr	r3, [pc, #140]	; (8005950 <HAL_TIM_PeriodElapsedCallback+0x11f4>)
 80058c2:	2214      	movs	r2, #20
 80058c4:	2100      	movs	r1, #0
 80058c6:	0018      	movs	r0, r3
 80058c8:	f009 f9ff 	bl	800ecca <memset>
				strncpy(imeiChar,myt,15);
 80058cc:	19a3      	adds	r3, r4, r6
 80058ce:	19db      	adds	r3, r3, r7
 80058d0:	6819      	ldr	r1, [r3, #0]
 80058d2:	4b1f      	ldr	r3, [pc, #124]	; (8005950 <HAL_TIM_PeriodElapsedCallback+0x11f4>)
 80058d4:	220f      	movs	r2, #15
 80058d6:	0018      	movs	r0, r3
 80058d8:	f009 fa3b 	bl	800ed52 <strncpy>
				//-------------------------------------

				strncpy(p, myt, 1);
 80058dc:	19a3      	adds	r3, r4, r6
 80058de:	19db      	adds	r3, r3, r7
 80058e0:	6819      	ldr	r1, [r3, #0]
 80058e2:	19ab      	adds	r3, r5, r6
 80058e4:	19db      	adds	r3, r3, r7
 80058e6:	2201      	movs	r2, #1
 80058e8:	0018      	movs	r0, r3
 80058ea:	f009 fa32 	bl	800ed52 <strncpy>
				imei[0] = (int) strtol(p, NULL, 16);
 80058ee:	19ab      	adds	r3, r5, r6
 80058f0:	19db      	adds	r3, r3, r7
 80058f2:	2210      	movs	r2, #16
 80058f4:	2100      	movs	r1, #0
 80058f6:	0018      	movs	r0, r3
 80058f8:	f00a f966 	bl	800fbc8 <strtol>
 80058fc:	0003      	movs	r3, r0
 80058fe:	b2da      	uxtb	r2, r3
 8005900:	4b14      	ldr	r3, [pc, #80]	; (8005954 <HAL_TIM_PeriodElapsedCallback+0x11f8>)
 8005902:	701a      	strb	r2, [r3, #0]
				myt++;
 8005904:	19a3      	adds	r3, r4, r6
 8005906:	19db      	adds	r3, r3, r7
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	3301      	adds	r3, #1
 800590c:	19a2      	adds	r2, r4, r6
 800590e:	19d2      	adds	r2, r2, r7
 8005910:	6013      	str	r3, [r2, #0]
				for (int i = 1; i < 8; i++) {
 8005912:	2301      	movs	r3, #1
 8005914:	2294      	movs	r2, #148	; 0x94
 8005916:	0052      	lsls	r2, r2, #1
 8005918:	1992      	adds	r2, r2, r6
 800591a:	19d2      	adds	r2, r2, r7
 800591c:	6013      	str	r3, [r2, #0]
 800591e:	e050      	b.n	80059c2 <HAL_TIM_PeriodElapsedCallback+0x1266>
 8005920:	2000087f 	.word	0x2000087f
 8005924:	20000748 	.word	0x20000748
 8005928:	080131a4 	.word	0x080131a4
 800592c:	20000880 	.word	0x20000880
 8005930:	2000087c 	.word	0x2000087c
 8005934:	20000881 	.word	0x20000881
 8005938:	080131ac 	.word	0x080131ac
 800593c:	080131b8 	.word	0x080131b8
 8005940:	080131c4 	.word	0x080131c4
 8005944:	080131d0 	.word	0x080131d0
 8005948:	20000a2d 	.word	0x20000a2d
 800594c:	08013198 	.word	0x08013198
 8005950:	2000088c 	.word	0x2000088c
 8005954:	20000884 	.word	0x20000884
					memset(p, 0, sizeof(p));
 8005958:	2484      	movs	r4, #132	; 0x84
 800595a:	2618      	movs	r6, #24
 800595c:	19a3      	adds	r3, r4, r6
 800595e:	19db      	adds	r3, r3, r7
 8005960:	220a      	movs	r2, #10
 8005962:	2100      	movs	r1, #0
 8005964:	0018      	movs	r0, r3
 8005966:	f009 f9b0 	bl	800ecca <memset>
					strncpy(p, myt, 2);
 800596a:	2596      	movs	r5, #150	; 0x96
 800596c:	006d      	lsls	r5, r5, #1
 800596e:	19ab      	adds	r3, r5, r6
 8005970:	19db      	adds	r3, r3, r7
 8005972:	6819      	ldr	r1, [r3, #0]
 8005974:	19a3      	adds	r3, r4, r6
 8005976:	19db      	adds	r3, r3, r7
 8005978:	2202      	movs	r2, #2
 800597a:	0018      	movs	r0, r3
 800597c:	f009 f9e9 	bl	800ed52 <strncpy>
					imei[i] = (int) strtol(p, NULL, 16);
 8005980:	19a3      	adds	r3, r4, r6
 8005982:	19db      	adds	r3, r3, r7
 8005984:	2210      	movs	r2, #16
 8005986:	2100      	movs	r1, #0
 8005988:	0018      	movs	r0, r3
 800598a:	f00a f91d 	bl	800fbc8 <strtol>
 800598e:	0003      	movs	r3, r0
 8005990:	b2d9      	uxtb	r1, r3
 8005992:	4add      	ldr	r2, [pc, #884]	; (8005d08 <HAL_TIM_PeriodElapsedCallback+0x15ac>)
 8005994:	2094      	movs	r0, #148	; 0x94
 8005996:	0040      	lsls	r0, r0, #1
 8005998:	0034      	movs	r4, r6
 800599a:	1903      	adds	r3, r0, r4
 800599c:	19db      	adds	r3, r3, r7
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	18d3      	adds	r3, r2, r3
 80059a2:	1c0a      	adds	r2, r1, #0
 80059a4:	701a      	strb	r2, [r3, #0]
					myt += 2;
 80059a6:	192b      	adds	r3, r5, r4
 80059a8:	19db      	adds	r3, r3, r7
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	3302      	adds	r3, #2
 80059ae:	192a      	adds	r2, r5, r4
 80059b0:	19d2      	adds	r2, r2, r7
 80059b2:	6013      	str	r3, [r2, #0]
				for (int i = 1; i < 8; i++) {
 80059b4:	1903      	adds	r3, r0, r4
 80059b6:	19db      	adds	r3, r3, r7
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	3301      	adds	r3, #1
 80059bc:	1902      	adds	r2, r0, r4
 80059be:	19d2      	adds	r2, r2, r7
 80059c0:	6013      	str	r3, [r2, #0]
 80059c2:	2394      	movs	r3, #148	; 0x94
 80059c4:	005b      	lsls	r3, r3, #1
 80059c6:	2218      	movs	r2, #24
 80059c8:	189b      	adds	r3, r3, r2
 80059ca:	19db      	adds	r3, r3, r7
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2b07      	cmp	r3, #7
 80059d0:	ddc2      	ble.n	8005958 <HAL_TIM_PeriodElapsedCallback+0x11fc>
				}
				clearit();
 80059d2:	f001 f953 	bl	8006c7c <clearit>
 80059d6:	e108      	b.n	8005bea <HAL_TIM_PeriodElapsedCallback+0x148e>

			} else {
				resTimeout--;
 80059d8:	4bcc      	ldr	r3, [pc, #816]	; (8005d0c <HAL_TIM_PeriodElapsedCallback+0x15b0>)
 80059da:	881b      	ldrh	r3, [r3, #0]
 80059dc:	b29b      	uxth	r3, r3
 80059de:	3b01      	subs	r3, #1
 80059e0:	b29a      	uxth	r2, r3
 80059e2:	4bca      	ldr	r3, [pc, #808]	; (8005d0c <HAL_TIM_PeriodElapsedCallback+0x15b0>)
 80059e4:	801a      	strh	r2, [r3, #0]
				if (resTimeout < 1) {
 80059e6:	4bc9      	ldr	r3, [pc, #804]	; (8005d0c <HAL_TIM_PeriodElapsedCallback+0x15b0>)
 80059e8:	881b      	ldrh	r3, [r3, #0]
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d000      	beq.n	80059f2 <HAL_TIM_PeriodElapsedCallback+0x1296>
 80059f0:	e0fb      	b.n	8005bea <HAL_TIM_PeriodElapsedCallback+0x148e>
					if (!recResponse) {
 80059f2:	4bc7      	ldr	r3, [pc, #796]	; (8005d10 <HAL_TIM_PeriodElapsedCallback+0x15b4>)
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d101      	bne.n	8005a00 <HAL_TIM_PeriodElapsedCallback+0x12a4>
						rebootsystem();
 80059fc:	f000 fd44 	bl	8006488 <rebootsystem>
					}
					isResponseOk = 0;
 8005a00:	4bc4      	ldr	r3, [pc, #784]	; (8005d14 <HAL_TIM_PeriodElapsedCallback+0x15b8>)
 8005a02:	2200      	movs	r2, #0
 8005a04:	701a      	strb	r2, [r3, #0]
					clearit();
 8005a06:	f001 f939 	bl	8006c7c <clearit>
 8005a0a:	e0ee      	b.n	8005bea <HAL_TIM_PeriodElapsedCallback+0x148e>

				}
			}
		} else if (commandCase == 5) {
 8005a0c:	4bc2      	ldr	r3, [pc, #776]	; (8005d18 <HAL_TIM_PeriodElapsedCallback+0x15bc>)
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	2b05      	cmp	r3, #5
 8005a14:	d000      	beq.n	8005a18 <HAL_TIM_PeriodElapsedCallback+0x12bc>
 8005a16:	e0e8      	b.n	8005bea <HAL_TIM_PeriodElapsedCallback+0x148e>
			//tcp open case
			uint8_t tLine = 99;
 8005a18:	2328      	movs	r3, #40	; 0x28
 8005a1a:	33ff      	adds	r3, #255	; 0xff
 8005a1c:	2118      	movs	r1, #24
 8005a1e:	185b      	adds	r3, r3, r1
 8005a20:	19db      	adds	r3, r3, r7
 8005a22:	2263      	movs	r2, #99	; 0x63
 8005a24:	701a      	strb	r2, [r3, #0]
			char *ptr;
			char *ptr2;
			char *ptr3;
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 8005a26:	2393      	movs	r3, #147	; 0x93
 8005a28:	005b      	lsls	r3, r3, #1
 8005a2a:	185b      	adds	r3, r3, r1
 8005a2c:	19db      	adds	r3, r3, r7
 8005a2e:	2200      	movs	r2, #0
 8005a30:	701a      	strb	r2, [r3, #0]
 8005a32:	e08d      	b.n	8005b50 <HAL_TIM_PeriodElapsedCallback+0x13f4>
				ptr = strstr(responseBuffer[i], "ALREADY CONNECT"); //todo check wether in data mode or not
 8005a34:	2493      	movs	r4, #147	; 0x93
 8005a36:	0064      	lsls	r4, r4, #1
 8005a38:	2618      	movs	r6, #24
 8005a3a:	19a3      	adds	r3, r4, r6
 8005a3c:	19db      	adds	r3, r3, r7
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	2232      	movs	r2, #50	; 0x32
 8005a42:	435a      	muls	r2, r3
 8005a44:	4bb5      	ldr	r3, [pc, #724]	; (8005d1c <HAL_TIM_PeriodElapsedCallback+0x15c0>)
 8005a46:	18d3      	adds	r3, r2, r3
 8005a48:	4ab5      	ldr	r2, [pc, #724]	; (8005d20 <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 8005a4a:	0011      	movs	r1, r2
 8005a4c:	0018      	movs	r0, r3
 8005a4e:	f009 f994 	bl	800ed7a <strstr>
 8005a52:	0003      	movs	r3, r0
 8005a54:	25d4      	movs	r5, #212	; 0xd4
 8005a56:	19aa      	adds	r2, r5, r6
 8005a58:	19d2      	adds	r2, r2, r7
 8005a5a:	6013      	str	r3, [r2, #0]
				ptr2 = strstr(responseBuffer[i], "CONNECT FAIL");
 8005a5c:	19a3      	adds	r3, r4, r6
 8005a5e:	19db      	adds	r3, r3, r7
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	2232      	movs	r2, #50	; 0x32
 8005a64:	435a      	muls	r2, r3
 8005a66:	4bad      	ldr	r3, [pc, #692]	; (8005d1c <HAL_TIM_PeriodElapsedCallback+0x15c0>)
 8005a68:	18d3      	adds	r3, r2, r3
 8005a6a:	4aae      	ldr	r2, [pc, #696]	; (8005d24 <HAL_TIM_PeriodElapsedCallback+0x15c8>)
 8005a6c:	0011      	movs	r1, r2
 8005a6e:	0018      	movs	r0, r3
 8005a70:	f009 f983 	bl	800ed7a <strstr>
 8005a74:	0003      	movs	r3, r0
 8005a76:	22d0      	movs	r2, #208	; 0xd0
 8005a78:	1992      	adds	r2, r2, r6
 8005a7a:	19d2      	adds	r2, r2, r7
 8005a7c:	6013      	str	r3, [r2, #0]
				ptr3 = strstr(responseBuffer[i], "CONNECT");
 8005a7e:	19a3      	adds	r3, r4, r6
 8005a80:	19db      	adds	r3, r3, r7
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	2232      	movs	r2, #50	; 0x32
 8005a86:	435a      	muls	r2, r3
 8005a88:	4ba4      	ldr	r3, [pc, #656]	; (8005d1c <HAL_TIM_PeriodElapsedCallback+0x15c0>)
 8005a8a:	18d3      	adds	r3, r2, r3
 8005a8c:	4aa6      	ldr	r2, [pc, #664]	; (8005d28 <HAL_TIM_PeriodElapsedCallback+0x15cc>)
 8005a8e:	0011      	movs	r1, r2
 8005a90:	0018      	movs	r0, r3
 8005a92:	f009 f972 	bl	800ed7a <strstr>
 8005a96:	0003      	movs	r3, r0
 8005a98:	22cc      	movs	r2, #204	; 0xcc
 8005a9a:	0031      	movs	r1, r6
 8005a9c:	1852      	adds	r2, r2, r1
 8005a9e:	19d2      	adds	r2, r2, r7
 8005aa0:	6013      	str	r3, [r2, #0]

				if (ptr != NULL) {
 8005aa2:	186b      	adds	r3, r5, r1
 8005aa4:	19db      	adds	r3, r3, r7
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d011      	beq.n	8005ad0 <HAL_TIM_PeriodElapsedCallback+0x1374>
					tLine = i;
 8005aac:	2328      	movs	r3, #40	; 0x28
 8005aae:	33ff      	adds	r3, #255	; 0xff
 8005ab0:	185b      	adds	r3, r3, r1
 8005ab2:	19db      	adds	r3, r3, r7
 8005ab4:	1862      	adds	r2, r4, r1
 8005ab6:	19d2      	adds	r2, r2, r7
 8005ab8:	7812      	ldrb	r2, [r2, #0]
 8005aba:	701a      	strb	r2, [r3, #0]
					tResponse = 'G';
 8005abc:	2340      	movs	r3, #64	; 0x40
 8005abe:	33ff      	adds	r3, #255	; 0xff
 8005ac0:	185b      	adds	r3, r3, r1
 8005ac2:	19db      	adds	r3, r3, r7
 8005ac4:	2247      	movs	r2, #71	; 0x47
 8005ac6:	701a      	strb	r2, [r3, #0]
					isDataMode = 0;
 8005ac8:	4b98      	ldr	r3, [pc, #608]	; (8005d2c <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 8005aca:	2200      	movs	r2, #0
 8005acc:	701a      	strb	r2, [r3, #0]
					break;
 8005ace:	e048      	b.n	8005b62 <HAL_TIM_PeriodElapsedCallback+0x1406>
				} else if (ptr2 != NULL) {
 8005ad0:	23d0      	movs	r3, #208	; 0xd0
 8005ad2:	2118      	movs	r1, #24
 8005ad4:	185b      	adds	r3, r3, r1
 8005ad6:	19db      	adds	r3, r3, r7
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d013      	beq.n	8005b06 <HAL_TIM_PeriodElapsedCallback+0x13aa>
					tLine = i;
 8005ade:	2328      	movs	r3, #40	; 0x28
 8005ae0:	33ff      	adds	r3, #255	; 0xff
 8005ae2:	185b      	adds	r3, r3, r1
 8005ae4:	19db      	adds	r3, r3, r7
 8005ae6:	2293      	movs	r2, #147	; 0x93
 8005ae8:	0052      	lsls	r2, r2, #1
 8005aea:	1852      	adds	r2, r2, r1
 8005aec:	19d2      	adds	r2, r2, r7
 8005aee:	7812      	ldrb	r2, [r2, #0]
 8005af0:	701a      	strb	r2, [r3, #0]
					tResponse = 'B';
 8005af2:	2340      	movs	r3, #64	; 0x40
 8005af4:	33ff      	adds	r3, #255	; 0xff
 8005af6:	185b      	adds	r3, r3, r1
 8005af8:	19db      	adds	r3, r3, r7
 8005afa:	2242      	movs	r2, #66	; 0x42
 8005afc:	701a      	strb	r2, [r3, #0]
					isDataMode = 0;
 8005afe:	4b8b      	ldr	r3, [pc, #556]	; (8005d2c <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 8005b00:	2200      	movs	r2, #0
 8005b02:	701a      	strb	r2, [r3, #0]
					break;
 8005b04:	e02d      	b.n	8005b62 <HAL_TIM_PeriodElapsedCallback+0x1406>
				} else if (ptr3 != NULL) {
 8005b06:	23cc      	movs	r3, #204	; 0xcc
 8005b08:	2118      	movs	r1, #24
 8005b0a:	185b      	adds	r3, r3, r1
 8005b0c:	19db      	adds	r3, r3, r7
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d013      	beq.n	8005b3c <HAL_TIM_PeriodElapsedCallback+0x13e0>
					tLine = i;
 8005b14:	2328      	movs	r3, #40	; 0x28
 8005b16:	33ff      	adds	r3, #255	; 0xff
 8005b18:	185b      	adds	r3, r3, r1
 8005b1a:	19db      	adds	r3, r3, r7
 8005b1c:	2293      	movs	r2, #147	; 0x93
 8005b1e:	0052      	lsls	r2, r2, #1
 8005b20:	1852      	adds	r2, r2, r1
 8005b22:	19d2      	adds	r2, r2, r7
 8005b24:	7812      	ldrb	r2, [r2, #0]
 8005b26:	701a      	strb	r2, [r3, #0]
					tResponse = 'G';
 8005b28:	2340      	movs	r3, #64	; 0x40
 8005b2a:	33ff      	adds	r3, #255	; 0xff
 8005b2c:	185b      	adds	r3, r3, r1
 8005b2e:	19db      	adds	r3, r3, r7
 8005b30:	2247      	movs	r2, #71	; 0x47
 8005b32:	701a      	strb	r2, [r3, #0]
					isDataMode = 1;
 8005b34:	4b7d      	ldr	r3, [pc, #500]	; (8005d2c <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 8005b36:	2201      	movs	r2, #1
 8005b38:	701a      	strb	r2, [r3, #0]
					break;
 8005b3a:	e012      	b.n	8005b62 <HAL_TIM_PeriodElapsedCallback+0x1406>
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 8005b3c:	2193      	movs	r1, #147	; 0x93
 8005b3e:	0049      	lsls	r1, r1, #1
 8005b40:	2018      	movs	r0, #24
 8005b42:	180b      	adds	r3, r1, r0
 8005b44:	19db      	adds	r3, r3, r7
 8005b46:	781a      	ldrb	r2, [r3, #0]
 8005b48:	180b      	adds	r3, r1, r0
 8005b4a:	19db      	adds	r3, r3, r7
 8005b4c:	3201      	adds	r2, #1
 8005b4e:	701a      	strb	r2, [r3, #0]
 8005b50:	2393      	movs	r3, #147	; 0x93
 8005b52:	005b      	lsls	r3, r3, #1
 8005b54:	2218      	movs	r2, #24
 8005b56:	189b      	adds	r3, r3, r2
 8005b58:	19db      	adds	r3, r3, r7
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	2b05      	cmp	r3, #5
 8005b5e:	d800      	bhi.n	8005b62 <HAL_TIM_PeriodElapsedCallback+0x1406>
 8005b60:	e768      	b.n	8005a34 <HAL_TIM_PeriodElapsedCallback+0x12d8>
				}
			}
			if (tLine != 99) {
 8005b62:	2328      	movs	r3, #40	; 0x28
 8005b64:	33ff      	adds	r3, #255	; 0xff
 8005b66:	2218      	movs	r2, #24
 8005b68:	189b      	adds	r3, r3, r2
 8005b6a:	19db      	adds	r3, r3, r7
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	2b63      	cmp	r3, #99	; 0x63
 8005b70:	d023      	beq.n	8005bba <HAL_TIM_PeriodElapsedCallback+0x145e>
				if (tResponse == 'G') {
 8005b72:	2340      	movs	r3, #64	; 0x40
 8005b74:	33ff      	adds	r3, #255	; 0xff
 8005b76:	189b      	adds	r3, r3, r2
 8005b78:	19db      	adds	r3, r3, r7
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	2b47      	cmp	r3, #71	; 0x47
 8005b7e:	d10b      	bne.n	8005b98 <HAL_TIM_PeriodElapsedCallback+0x143c>
					isResponseOk = 1;
 8005b80:	4b64      	ldr	r3, [pc, #400]	; (8005d14 <HAL_TIM_PeriodElapsedCallback+0x15b8>)
 8005b82:	2201      	movs	r2, #1
 8005b84:	701a      	strb	r2, [r3, #0]
					//to-do with that line
					clearit();
 8005b86:	f001 f879 	bl	8006c7c <clearit>
					isTcpOpen = 1;
 8005b8a:	4b69      	ldr	r3, [pc, #420]	; (8005d30 <HAL_TIM_PeriodElapsedCallback+0x15d4>)
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	701a      	strb	r2, [r3, #0]
					isDataMode = 1;
 8005b90:	4b66      	ldr	r3, [pc, #408]	; (8005d2c <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 8005b92:	2201      	movs	r2, #1
 8005b94:	701a      	strb	r2, [r3, #0]
 8005b96:	e028      	b.n	8005bea <HAL_TIM_PeriodElapsedCallback+0x148e>

				} else if (tResponse == 'B') {
 8005b98:	2340      	movs	r3, #64	; 0x40
 8005b9a:	33ff      	adds	r3, #255	; 0xff
 8005b9c:	2218      	movs	r2, #24
 8005b9e:	189b      	adds	r3, r3, r2
 8005ba0:	19db      	adds	r3, r3, r7
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	2b42      	cmp	r3, #66	; 0x42
 8005ba6:	d120      	bne.n	8005bea <HAL_TIM_PeriodElapsedCallback+0x148e>
					isResponseOk = 0;
 8005ba8:	4b5a      	ldr	r3, [pc, #360]	; (8005d14 <HAL_TIM_PeriodElapsedCallback+0x15b8>)
 8005baa:	2200      	movs	r2, #0
 8005bac:	701a      	strb	r2, [r3, #0]
					clearit();
 8005bae:	f001 f865 	bl	8006c7c <clearit>
					isTcpOpen = 0;
 8005bb2:	4b5f      	ldr	r3, [pc, #380]	; (8005d30 <HAL_TIM_PeriodElapsedCallback+0x15d4>)
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	701a      	strb	r2, [r3, #0]
 8005bb8:	e017      	b.n	8005bea <HAL_TIM_PeriodElapsedCallback+0x148e>
				}
			} else {
				resTimeout--;
 8005bba:	4b54      	ldr	r3, [pc, #336]	; (8005d0c <HAL_TIM_PeriodElapsedCallback+0x15b0>)
 8005bbc:	881b      	ldrh	r3, [r3, #0]
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	3b01      	subs	r3, #1
 8005bc2:	b29a      	uxth	r2, r3
 8005bc4:	4b51      	ldr	r3, [pc, #324]	; (8005d0c <HAL_TIM_PeriodElapsedCallback+0x15b0>)
 8005bc6:	801a      	strh	r2, [r3, #0]
				if (resTimeout < 1) {
 8005bc8:	4b50      	ldr	r3, [pc, #320]	; (8005d0c <HAL_TIM_PeriodElapsedCallback+0x15b0>)
 8005bca:	881b      	ldrh	r3, [r3, #0]
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d10b      	bne.n	8005bea <HAL_TIM_PeriodElapsedCallback+0x148e>
					if (!recResponse) {
 8005bd2:	4b4f      	ldr	r3, [pc, #316]	; (8005d10 <HAL_TIM_PeriodElapsedCallback+0x15b4>)
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d101      	bne.n	8005be0 <HAL_TIM_PeriodElapsedCallback+0x1484>
						rebootsystem();
 8005bdc:	f000 fc54 	bl	8006488 <rebootsystem>
					}
					clearit();
 8005be0:	f001 f84c 	bl	8006c7c <clearit>
					isResponseOk = 0;
 8005be4:	4b4b      	ldr	r3, [pc, #300]	; (8005d14 <HAL_TIM_PeriodElapsedCallback+0x15b8>)
 8005be6:	2200      	movs	r2, #0
 8005be8:	701a      	strb	r2, [r3, #0]

				}
			}
		}
		if (commandCase == 6) {
 8005bea:	4b4b      	ldr	r3, [pc, #300]	; (8005d18 <HAL_TIM_PeriodElapsedCallback+0x15bc>)
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	2b06      	cmp	r3, #6
 8005bf2:	d000      	beq.n	8005bf6 <HAL_TIM_PeriodElapsedCallback+0x149a>
 8005bf4:	e0f3      	b.n	8005dde <HAL_TIM_PeriodElapsedCallback+0x1682>
			uint8_t tLine = 99;
 8005bf6:	2326      	movs	r3, #38	; 0x26
 8005bf8:	33ff      	adds	r3, #255	; 0xff
 8005bfa:	2118      	movs	r1, #24
 8005bfc:	185b      	adds	r3, r3, r1
 8005bfe:	19db      	adds	r3, r3, r7
 8005c00:	2263      	movs	r2, #99	; 0x63
 8005c02:	701a      	strb	r2, [r3, #0]
			char *ptr;
			char *ptr2;
			char *ptr3;

			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 8005c04:	2392      	movs	r3, #146	; 0x92
 8005c06:	005b      	lsls	r3, r3, #1
 8005c08:	185b      	adds	r3, r3, r1
 8005c0a:	19db      	adds	r3, r3, r7
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	701a      	strb	r2, [r3, #0]
 8005c10:	e09e      	b.n	8005d50 <HAL_TIM_PeriodElapsedCallback+0x15f4>
				ptr = strstr(responseBuffer[i], "NO CARRIER");
 8005c12:	2492      	movs	r4, #146	; 0x92
 8005c14:	0064      	lsls	r4, r4, #1
 8005c16:	2618      	movs	r6, #24
 8005c18:	19a3      	adds	r3, r4, r6
 8005c1a:	19db      	adds	r3, r3, r7
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	2232      	movs	r2, #50	; 0x32
 8005c20:	435a      	muls	r2, r3
 8005c22:	4b3e      	ldr	r3, [pc, #248]	; (8005d1c <HAL_TIM_PeriodElapsedCallback+0x15c0>)
 8005c24:	18d3      	adds	r3, r2, r3
 8005c26:	4a43      	ldr	r2, [pc, #268]	; (8005d34 <HAL_TIM_PeriodElapsedCallback+0x15d8>)
 8005c28:	0011      	movs	r1, r2
 8005c2a:	0018      	movs	r0, r3
 8005c2c:	f009 f8a5 	bl	800ed7a <strstr>
 8005c30:	0003      	movs	r3, r0
 8005c32:	2598      	movs	r5, #152	; 0x98
 8005c34:	19aa      	adds	r2, r5, r6
 8005c36:	19d2      	adds	r2, r2, r7
 8005c38:	6013      	str	r3, [r2, #0]
				ptr2 = strstr(responseBuffer[i], "ERROR");
 8005c3a:	19a3      	adds	r3, r4, r6
 8005c3c:	19db      	adds	r3, r3, r7
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	2232      	movs	r2, #50	; 0x32
 8005c42:	435a      	muls	r2, r3
 8005c44:	4b35      	ldr	r3, [pc, #212]	; (8005d1c <HAL_TIM_PeriodElapsedCallback+0x15c0>)
 8005c46:	18d3      	adds	r3, r2, r3
 8005c48:	4a3b      	ldr	r2, [pc, #236]	; (8005d38 <HAL_TIM_PeriodElapsedCallback+0x15dc>)
 8005c4a:	0011      	movs	r1, r2
 8005c4c:	0018      	movs	r0, r3
 8005c4e:	f009 f894 	bl	800ed7a <strstr>
 8005c52:	0003      	movs	r3, r0
 8005c54:	2294      	movs	r2, #148	; 0x94
 8005c56:	1992      	adds	r2, r2, r6
 8005c58:	19d2      	adds	r2, r2, r7
 8005c5a:	6013      	str	r3, [r2, #0]
				ptr3 = strstr(responseBuffer[i], "CONNECT");
 8005c5c:	19a3      	adds	r3, r4, r6
 8005c5e:	19db      	adds	r3, r3, r7
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	2232      	movs	r2, #50	; 0x32
 8005c64:	435a      	muls	r2, r3
 8005c66:	4b2d      	ldr	r3, [pc, #180]	; (8005d1c <HAL_TIM_PeriodElapsedCallback+0x15c0>)
 8005c68:	18d3      	adds	r3, r2, r3
 8005c6a:	4a2f      	ldr	r2, [pc, #188]	; (8005d28 <HAL_TIM_PeriodElapsedCallback+0x15cc>)
 8005c6c:	0011      	movs	r1, r2
 8005c6e:	0018      	movs	r0, r3
 8005c70:	f009 f883 	bl	800ed7a <strstr>
 8005c74:	0003      	movs	r3, r0
 8005c76:	2290      	movs	r2, #144	; 0x90
 8005c78:	0031      	movs	r1, r6
 8005c7a:	1852      	adds	r2, r2, r1
 8005c7c:	19d2      	adds	r2, r2, r7
 8005c7e:	6013      	str	r3, [r2, #0]

				if (ptr != NULL) {
 8005c80:	186b      	adds	r3, r5, r1
 8005c82:	19db      	adds	r3, r3, r7
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00e      	beq.n	8005ca8 <HAL_TIM_PeriodElapsedCallback+0x154c>
					tLine = i;
 8005c8a:	2326      	movs	r3, #38	; 0x26
 8005c8c:	33ff      	adds	r3, #255	; 0xff
 8005c8e:	185b      	adds	r3, r3, r1
 8005c90:	19db      	adds	r3, r3, r7
 8005c92:	1862      	adds	r2, r4, r1
 8005c94:	19d2      	adds	r2, r2, r7
 8005c96:	7812      	ldrb	r2, [r2, #0]
 8005c98:	701a      	strb	r2, [r3, #0]
					tResponse = 'B';
 8005c9a:	2340      	movs	r3, #64	; 0x40
 8005c9c:	33ff      	adds	r3, #255	; 0xff
 8005c9e:	185b      	adds	r3, r3, r1
 8005ca0:	19db      	adds	r3, r3, r7
 8005ca2:	2242      	movs	r2, #66	; 0x42
 8005ca4:	701a      	strb	r2, [r3, #0]
					break;
 8005ca6:	e05c      	b.n	8005d62 <HAL_TIM_PeriodElapsedCallback+0x1606>
				}
				if (ptr2 != NULL) {
 8005ca8:	2394      	movs	r3, #148	; 0x94
 8005caa:	2118      	movs	r1, #24
 8005cac:	185b      	adds	r3, r3, r1
 8005cae:	19db      	adds	r3, r3, r7
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d010      	beq.n	8005cd8 <HAL_TIM_PeriodElapsedCallback+0x157c>
					tLine = i;
 8005cb6:	2326      	movs	r3, #38	; 0x26
 8005cb8:	33ff      	adds	r3, #255	; 0xff
 8005cba:	185b      	adds	r3, r3, r1
 8005cbc:	19db      	adds	r3, r3, r7
 8005cbe:	2292      	movs	r2, #146	; 0x92
 8005cc0:	0052      	lsls	r2, r2, #1
 8005cc2:	1852      	adds	r2, r2, r1
 8005cc4:	19d2      	adds	r2, r2, r7
 8005cc6:	7812      	ldrb	r2, [r2, #0]
 8005cc8:	701a      	strb	r2, [r3, #0]
					tResponse = 'B';
 8005cca:	2340      	movs	r3, #64	; 0x40
 8005ccc:	33ff      	adds	r3, #255	; 0xff
 8005cce:	185b      	adds	r3, r3, r1
 8005cd0:	19db      	adds	r3, r3, r7
 8005cd2:	2242      	movs	r2, #66	; 0x42
 8005cd4:	701a      	strb	r2, [r3, #0]
					break;
 8005cd6:	e044      	b.n	8005d62 <HAL_TIM_PeriodElapsedCallback+0x1606>
				}
				if (ptr3 != NULL) {
 8005cd8:	2390      	movs	r3, #144	; 0x90
 8005cda:	2118      	movs	r1, #24
 8005cdc:	185b      	adds	r3, r3, r1
 8005cde:	19db      	adds	r3, r3, r7
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d02a      	beq.n	8005d3c <HAL_TIM_PeriodElapsedCallback+0x15e0>
					tLine = i;
 8005ce6:	2326      	movs	r3, #38	; 0x26
 8005ce8:	33ff      	adds	r3, #255	; 0xff
 8005cea:	185b      	adds	r3, r3, r1
 8005cec:	19db      	adds	r3, r3, r7
 8005cee:	2292      	movs	r2, #146	; 0x92
 8005cf0:	0052      	lsls	r2, r2, #1
 8005cf2:	1852      	adds	r2, r2, r1
 8005cf4:	19d2      	adds	r2, r2, r7
 8005cf6:	7812      	ldrb	r2, [r2, #0]
 8005cf8:	701a      	strb	r2, [r3, #0]
					tResponse = 'G';
 8005cfa:	2340      	movs	r3, #64	; 0x40
 8005cfc:	33ff      	adds	r3, #255	; 0xff
 8005cfe:	185b      	adds	r3, r3, r1
 8005d00:	19db      	adds	r3, r3, r7
 8005d02:	2247      	movs	r2, #71	; 0x47
 8005d04:	701a      	strb	r2, [r3, #0]
					break;
 8005d06:	e02c      	b.n	8005d62 <HAL_TIM_PeriodElapsedCallback+0x1606>
 8005d08:	20000884 	.word	0x20000884
 8005d0c:	2000087c 	.word	0x2000087c
 8005d10:	20000881 	.word	0x20000881
 8005d14:	20000880 	.word	0x20000880
 8005d18:	2000087f 	.word	0x2000087f
 8005d1c:	20000748 	.word	0x20000748
 8005d20:	080131dc 	.word	0x080131dc
 8005d24:	080131ec 	.word	0x080131ec
 8005d28:	080131fc 	.word	0x080131fc
 8005d2c:	2000087a 	.word	0x2000087a
 8005d30:	20000a2c 	.word	0x20000a2c
 8005d34:	08013204 	.word	0x08013204
 8005d38:	0801319c 	.word	0x0801319c
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 8005d3c:	2192      	movs	r1, #146	; 0x92
 8005d3e:	0049      	lsls	r1, r1, #1
 8005d40:	2018      	movs	r0, #24
 8005d42:	180b      	adds	r3, r1, r0
 8005d44:	19db      	adds	r3, r3, r7
 8005d46:	781a      	ldrb	r2, [r3, #0]
 8005d48:	180b      	adds	r3, r1, r0
 8005d4a:	19db      	adds	r3, r3, r7
 8005d4c:	3201      	adds	r2, #1
 8005d4e:	701a      	strb	r2, [r3, #0]
 8005d50:	2392      	movs	r3, #146	; 0x92
 8005d52:	005b      	lsls	r3, r3, #1
 8005d54:	2218      	movs	r2, #24
 8005d56:	189b      	adds	r3, r3, r2
 8005d58:	19db      	adds	r3, r3, r7
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	2b05      	cmp	r3, #5
 8005d5e:	d800      	bhi.n	8005d62 <HAL_TIM_PeriodElapsedCallback+0x1606>
 8005d60:	e757      	b.n	8005c12 <HAL_TIM_PeriodElapsedCallback+0x14b6>
				}
			}
			if (tLine != 99) {
 8005d62:	2326      	movs	r3, #38	; 0x26
 8005d64:	33ff      	adds	r3, #255	; 0xff
 8005d66:	2218      	movs	r2, #24
 8005d68:	189b      	adds	r3, r3, r2
 8005d6a:	19db      	adds	r3, r3, r7
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	2b63      	cmp	r3, #99	; 0x63
 8005d70:	d01b      	beq.n	8005daa <HAL_TIM_PeriodElapsedCallback+0x164e>
				if (tResponse == 'G') {
 8005d72:	2340      	movs	r3, #64	; 0x40
 8005d74:	33ff      	adds	r3, #255	; 0xff
 8005d76:	189b      	adds	r3, r3, r2
 8005d78:	19db      	adds	r3, r3, r7
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	2b47      	cmp	r3, #71	; 0x47
 8005d7e:	d105      	bne.n	8005d8c <HAL_TIM_PeriodElapsedCallback+0x1630>
					isResponseOk = 1;
 8005d80:	4bde      	ldr	r3, [pc, #888]	; (80060fc <HAL_TIM_PeriodElapsedCallback+0x19a0>)
 8005d82:	2201      	movs	r2, #1
 8005d84:	701a      	strb	r2, [r3, #0]
					//to-do with that line
					clearit();
 8005d86:	f000 ff79 	bl	8006c7c <clearit>
		nmeaLC = 0;
		nmeaCC = 0;
		HAL_UART_Receive_IT(&GNSS_PORT, GNSS_BUFFER, 1);
		HAL_UART_Receive_IT(&GNSS_PORT, GNSS_BUFFER, 1);
	}
}
 8005d8a:	e33f      	b.n	800640c <HAL_TIM_PeriodElapsedCallback+0x1cb0>
				} else if (tResponse == 'B') {
 8005d8c:	2340      	movs	r3, #64	; 0x40
 8005d8e:	33ff      	adds	r3, #255	; 0xff
 8005d90:	2218      	movs	r2, #24
 8005d92:	189b      	adds	r3, r3, r2
 8005d94:	19db      	adds	r3, r3, r7
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	2b42      	cmp	r3, #66	; 0x42
 8005d9a:	d000      	beq.n	8005d9e <HAL_TIM_PeriodElapsedCallback+0x1642>
 8005d9c:	e336      	b.n	800640c <HAL_TIM_PeriodElapsedCallback+0x1cb0>
					isResponseOk = 0;
 8005d9e:	4bd7      	ldr	r3, [pc, #860]	; (80060fc <HAL_TIM_PeriodElapsedCallback+0x19a0>)
 8005da0:	2200      	movs	r2, #0
 8005da2:	701a      	strb	r2, [r3, #0]
					clearit();
 8005da4:	f000 ff6a 	bl	8006c7c <clearit>
}
 8005da8:	e330      	b.n	800640c <HAL_TIM_PeriodElapsedCallback+0x1cb0>
				resTimeout--;
 8005daa:	4bd5      	ldr	r3, [pc, #852]	; (8006100 <HAL_TIM_PeriodElapsedCallback+0x19a4>)
 8005dac:	881b      	ldrh	r3, [r3, #0]
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	3b01      	subs	r3, #1
 8005db2:	b29a      	uxth	r2, r3
 8005db4:	4bd2      	ldr	r3, [pc, #840]	; (8006100 <HAL_TIM_PeriodElapsedCallback+0x19a4>)
 8005db6:	801a      	strh	r2, [r3, #0]
				if (resTimeout < 1) {
 8005db8:	4bd1      	ldr	r3, [pc, #836]	; (8006100 <HAL_TIM_PeriodElapsedCallback+0x19a4>)
 8005dba:	881b      	ldrh	r3, [r3, #0]
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d000      	beq.n	8005dc4 <HAL_TIM_PeriodElapsedCallback+0x1668>
 8005dc2:	e323      	b.n	800640c <HAL_TIM_PeriodElapsedCallback+0x1cb0>
					if (!recResponse) {
 8005dc4:	4bcf      	ldr	r3, [pc, #828]	; (8006104 <HAL_TIM_PeriodElapsedCallback+0x19a8>)
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d101      	bne.n	8005dd2 <HAL_TIM_PeriodElapsedCallback+0x1676>
						rebootsystem();
 8005dce:	f000 fb5b 	bl	8006488 <rebootsystem>
					clearit();
 8005dd2:	f000 ff53 	bl	8006c7c <clearit>
					isResponseOk = 0;
 8005dd6:	4bc9      	ldr	r3, [pc, #804]	; (80060fc <HAL_TIM_PeriodElapsedCallback+0x19a0>)
 8005dd8:	2200      	movs	r2, #0
 8005dda:	701a      	strb	r2, [r3, #0]
}
 8005ddc:	e316      	b.n	800640c <HAL_TIM_PeriodElapsedCallback+0x1cb0>
		} else if (commandCase == 7) { //cmgs response check
 8005dde:	4bca      	ldr	r3, [pc, #808]	; (8006108 <HAL_TIM_PeriodElapsedCallback+0x19ac>)
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	2b07      	cmp	r3, #7
 8005de6:	d000      	beq.n	8005dea <HAL_TIM_PeriodElapsedCallback+0x168e>
 8005de8:	e0af      	b.n	8005f4a <HAL_TIM_PeriodElapsedCallback+0x17ee>
			uint8_t tLine = 99;
 8005dea:	2324      	movs	r3, #36	; 0x24
 8005dec:	33ff      	adds	r3, #255	; 0xff
 8005dee:	2118      	movs	r1, #24
 8005df0:	185b      	adds	r3, r3, r1
 8005df2:	19db      	adds	r3, r3, r7
 8005df4:	2263      	movs	r2, #99	; 0x63
 8005df6:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 8005df8:	2391      	movs	r3, #145	; 0x91
 8005dfa:	005b      	lsls	r3, r3, #1
 8005dfc:	185b      	adds	r3, r3, r1
 8005dfe:	19db      	adds	r3, r3, r7
 8005e00:	2200      	movs	r2, #0
 8005e02:	701a      	strb	r2, [r3, #0]
 8005e04:	e05b      	b.n	8005ebe <HAL_TIM_PeriodElapsedCallback+0x1762>
				ptr = strstr(responseBuffer[i], "+CMGS:");
 8005e06:	2491      	movs	r4, #145	; 0x91
 8005e08:	0064      	lsls	r4, r4, #1
 8005e0a:	2618      	movs	r6, #24
 8005e0c:	19a3      	adds	r3, r4, r6
 8005e0e:	19db      	adds	r3, r3, r7
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	2232      	movs	r2, #50	; 0x32
 8005e14:	435a      	muls	r2, r3
 8005e16:	4bbd      	ldr	r3, [pc, #756]	; (800610c <HAL_TIM_PeriodElapsedCallback+0x19b0>)
 8005e18:	18d3      	adds	r3, r2, r3
 8005e1a:	4abd      	ldr	r2, [pc, #756]	; (8006110 <HAL_TIM_PeriodElapsedCallback+0x19b4>)
 8005e1c:	0011      	movs	r1, r2
 8005e1e:	0018      	movs	r0, r3
 8005e20:	f008 ffab 	bl	800ed7a <strstr>
 8005e24:	0003      	movs	r3, r0
 8005e26:	25a0      	movs	r5, #160	; 0xa0
 8005e28:	19aa      	adds	r2, r5, r6
 8005e2a:	19d2      	adds	r2, r2, r7
 8005e2c:	6013      	str	r3, [r2, #0]
				ptr2 = strstr(responseBuffer[i], "ERROR");
 8005e2e:	19a3      	adds	r3, r4, r6
 8005e30:	19db      	adds	r3, r3, r7
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	2232      	movs	r2, #50	; 0x32
 8005e36:	435a      	muls	r2, r3
 8005e38:	4bb4      	ldr	r3, [pc, #720]	; (800610c <HAL_TIM_PeriodElapsedCallback+0x19b0>)
 8005e3a:	18d3      	adds	r3, r2, r3
 8005e3c:	4ab5      	ldr	r2, [pc, #724]	; (8006114 <HAL_TIM_PeriodElapsedCallback+0x19b8>)
 8005e3e:	0011      	movs	r1, r2
 8005e40:	0018      	movs	r0, r3
 8005e42:	f008 ff9a 	bl	800ed7a <strstr>
 8005e46:	0003      	movs	r3, r0
 8005e48:	229c      	movs	r2, #156	; 0x9c
 8005e4a:	0031      	movs	r1, r6
 8005e4c:	1852      	adds	r2, r2, r1
 8005e4e:	19d2      	adds	r2, r2, r7
 8005e50:	6013      	str	r3, [r2, #0]
				if (ptr != NULL) {
 8005e52:	186b      	adds	r3, r5, r1
 8005e54:	19db      	adds	r3, r3, r7
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d00e      	beq.n	8005e7a <HAL_TIM_PeriodElapsedCallback+0x171e>
					tLine = i;
 8005e5c:	2324      	movs	r3, #36	; 0x24
 8005e5e:	33ff      	adds	r3, #255	; 0xff
 8005e60:	185b      	adds	r3, r3, r1
 8005e62:	19db      	adds	r3, r3, r7
 8005e64:	1862      	adds	r2, r4, r1
 8005e66:	19d2      	adds	r2, r2, r7
 8005e68:	7812      	ldrb	r2, [r2, #0]
 8005e6a:	701a      	strb	r2, [r3, #0]
					tResponse = 'G';
 8005e6c:	2340      	movs	r3, #64	; 0x40
 8005e6e:	33ff      	adds	r3, #255	; 0xff
 8005e70:	185b      	adds	r3, r3, r1
 8005e72:	19db      	adds	r3, r3, r7
 8005e74:	2247      	movs	r2, #71	; 0x47
 8005e76:	701a      	strb	r2, [r3, #0]
					break;
 8005e78:	e029      	b.n	8005ece <HAL_TIM_PeriodElapsedCallback+0x1772>
				if (ptr2 != NULL) {
 8005e7a:	239c      	movs	r3, #156	; 0x9c
 8005e7c:	2118      	movs	r1, #24
 8005e7e:	185b      	adds	r3, r3, r1
 8005e80:	19db      	adds	r3, r3, r7
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d010      	beq.n	8005eaa <HAL_TIM_PeriodElapsedCallback+0x174e>
					tLine = i;
 8005e88:	2324      	movs	r3, #36	; 0x24
 8005e8a:	33ff      	adds	r3, #255	; 0xff
 8005e8c:	185b      	adds	r3, r3, r1
 8005e8e:	19db      	adds	r3, r3, r7
 8005e90:	2291      	movs	r2, #145	; 0x91
 8005e92:	0052      	lsls	r2, r2, #1
 8005e94:	1852      	adds	r2, r2, r1
 8005e96:	19d2      	adds	r2, r2, r7
 8005e98:	7812      	ldrb	r2, [r2, #0]
 8005e9a:	701a      	strb	r2, [r3, #0]
					tResponse = 'B';
 8005e9c:	2340      	movs	r3, #64	; 0x40
 8005e9e:	33ff      	adds	r3, #255	; 0xff
 8005ea0:	185b      	adds	r3, r3, r1
 8005ea2:	19db      	adds	r3, r3, r7
 8005ea4:	2242      	movs	r2, #66	; 0x42
 8005ea6:	701a      	strb	r2, [r3, #0]
					break;
 8005ea8:	e011      	b.n	8005ece <HAL_TIM_PeriodElapsedCallback+0x1772>
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 8005eaa:	2191      	movs	r1, #145	; 0x91
 8005eac:	0049      	lsls	r1, r1, #1
 8005eae:	2018      	movs	r0, #24
 8005eb0:	180b      	adds	r3, r1, r0
 8005eb2:	19db      	adds	r3, r3, r7
 8005eb4:	781a      	ldrb	r2, [r3, #0]
 8005eb6:	180b      	adds	r3, r1, r0
 8005eb8:	19db      	adds	r3, r3, r7
 8005eba:	3201      	adds	r2, #1
 8005ebc:	701a      	strb	r2, [r3, #0]
 8005ebe:	2391      	movs	r3, #145	; 0x91
 8005ec0:	005b      	lsls	r3, r3, #1
 8005ec2:	2218      	movs	r2, #24
 8005ec4:	189b      	adds	r3, r3, r2
 8005ec6:	19db      	adds	r3, r3, r7
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	2b05      	cmp	r3, #5
 8005ecc:	d99b      	bls.n	8005e06 <HAL_TIM_PeriodElapsedCallback+0x16aa>
			if (tLine != 99) {
 8005ece:	2324      	movs	r3, #36	; 0x24
 8005ed0:	33ff      	adds	r3, #255	; 0xff
 8005ed2:	2218      	movs	r2, #24
 8005ed4:	189b      	adds	r3, r3, r2
 8005ed6:	19db      	adds	r3, r3, r7
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	2b63      	cmp	r3, #99	; 0x63
 8005edc:	d01b      	beq.n	8005f16 <HAL_TIM_PeriodElapsedCallback+0x17ba>
				if (tResponse == 'G') {
 8005ede:	2340      	movs	r3, #64	; 0x40
 8005ee0:	33ff      	adds	r3, #255	; 0xff
 8005ee2:	189b      	adds	r3, r3, r2
 8005ee4:	19db      	adds	r3, r3, r7
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	2b47      	cmp	r3, #71	; 0x47
 8005eea:	d105      	bne.n	8005ef8 <HAL_TIM_PeriodElapsedCallback+0x179c>
					isResponseOk = 1;
 8005eec:	4b83      	ldr	r3, [pc, #524]	; (80060fc <HAL_TIM_PeriodElapsedCallback+0x19a0>)
 8005eee:	2201      	movs	r2, #1
 8005ef0:	701a      	strb	r2, [r3, #0]
					clearit();
 8005ef2:	f000 fec3 	bl	8006c7c <clearit>
}
 8005ef6:	e289      	b.n	800640c <HAL_TIM_PeriodElapsedCallback+0x1cb0>
				} else if (tResponse == 'B') {
 8005ef8:	2340      	movs	r3, #64	; 0x40
 8005efa:	33ff      	adds	r3, #255	; 0xff
 8005efc:	2218      	movs	r2, #24
 8005efe:	189b      	adds	r3, r3, r2
 8005f00:	19db      	adds	r3, r3, r7
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	2b42      	cmp	r3, #66	; 0x42
 8005f06:	d000      	beq.n	8005f0a <HAL_TIM_PeriodElapsedCallback+0x17ae>
 8005f08:	e280      	b.n	800640c <HAL_TIM_PeriodElapsedCallback+0x1cb0>
					isResponseOk = 1;
 8005f0a:	4b7c      	ldr	r3, [pc, #496]	; (80060fc <HAL_TIM_PeriodElapsedCallback+0x19a0>)
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	701a      	strb	r2, [r3, #0]
					clearit();
 8005f10:	f000 feb4 	bl	8006c7c <clearit>
}
 8005f14:	e27a      	b.n	800640c <HAL_TIM_PeriodElapsedCallback+0x1cb0>
				resTimeout--;
 8005f16:	4b7a      	ldr	r3, [pc, #488]	; (8006100 <HAL_TIM_PeriodElapsedCallback+0x19a4>)
 8005f18:	881b      	ldrh	r3, [r3, #0]
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	3b01      	subs	r3, #1
 8005f1e:	b29a      	uxth	r2, r3
 8005f20:	4b77      	ldr	r3, [pc, #476]	; (8006100 <HAL_TIM_PeriodElapsedCallback+0x19a4>)
 8005f22:	801a      	strh	r2, [r3, #0]
				if (resTimeout < 1) {
 8005f24:	4b76      	ldr	r3, [pc, #472]	; (8006100 <HAL_TIM_PeriodElapsedCallback+0x19a4>)
 8005f26:	881b      	ldrh	r3, [r3, #0]
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d000      	beq.n	8005f30 <HAL_TIM_PeriodElapsedCallback+0x17d4>
 8005f2e:	e26d      	b.n	800640c <HAL_TIM_PeriodElapsedCallback+0x1cb0>
					if (!recResponse) {
 8005f30:	4b74      	ldr	r3, [pc, #464]	; (8006104 <HAL_TIM_PeriodElapsedCallback+0x19a8>)
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d101      	bne.n	8005f3e <HAL_TIM_PeriodElapsedCallback+0x17e2>
						rebootsystem();
 8005f3a:	f000 faa5 	bl	8006488 <rebootsystem>
					isResponseOk = 0;
 8005f3e:	4b6f      	ldr	r3, [pc, #444]	; (80060fc <HAL_TIM_PeriodElapsedCallback+0x19a0>)
 8005f40:	2200      	movs	r2, #0
 8005f42:	701a      	strb	r2, [r3, #0]
					clearit();
 8005f44:	f000 fe9a 	bl	8006c7c <clearit>
}
 8005f48:	e260      	b.n	800640c <HAL_TIM_PeriodElapsedCallback+0x1cb0>
		} else if (commandCase == 8) { //battery voltage response check
 8005f4a:	4b6f      	ldr	r3, [pc, #444]	; (8006108 <HAL_TIM_PeriodElapsedCallback+0x19ac>)
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	2b08      	cmp	r3, #8
 8005f52:	d000      	beq.n	8005f56 <HAL_TIM_PeriodElapsedCallback+0x17fa>
 8005f54:	e25a      	b.n	800640c <HAL_TIM_PeriodElapsedCallback+0x1cb0>
			uint8_t tLine = 99;
 8005f56:	2322      	movs	r3, #34	; 0x22
 8005f58:	33ff      	adds	r3, #255	; 0xff
 8005f5a:	2118      	movs	r1, #24
 8005f5c:	185b      	adds	r3, r3, r1
 8005f5e:	19db      	adds	r3, r3, r7
 8005f60:	2263      	movs	r2, #99	; 0x63
 8005f62:	701a      	strb	r2, [r3, #0]
			memset(vData,0,sizeof(vData));
 8005f64:	2370      	movs	r3, #112	; 0x70
 8005f66:	000c      	movs	r4, r1
 8005f68:	185b      	adds	r3, r3, r1
 8005f6a:	19db      	adds	r3, r3, r7
 8005f6c:	2214      	movs	r2, #20
 8005f6e:	2100      	movs	r1, #0
 8005f70:	0018      	movs	r0, r3
 8005f72:	f008 feaa 	bl	800ecca <memset>
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 8005f76:	2390      	movs	r3, #144	; 0x90
 8005f78:	005b      	lsls	r3, r3, #1
 8005f7a:	191b      	adds	r3, r3, r4
 8005f7c:	19db      	adds	r3, r3, r7
 8005f7e:	2200      	movs	r2, #0
 8005f80:	701a      	strb	r2, [r3, #0]
 8005f82:	e05b      	b.n	800603c <HAL_TIM_PeriodElapsedCallback+0x18e0>
				ptr = strstr(responseBuffer[i], "+CBC:");
 8005f84:	2490      	movs	r4, #144	; 0x90
 8005f86:	0064      	lsls	r4, r4, #1
 8005f88:	2618      	movs	r6, #24
 8005f8a:	19a3      	adds	r3, r4, r6
 8005f8c:	19db      	adds	r3, r3, r7
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	2232      	movs	r2, #50	; 0x32
 8005f92:	435a      	muls	r2, r3
 8005f94:	4b5d      	ldr	r3, [pc, #372]	; (800610c <HAL_TIM_PeriodElapsedCallback+0x19b0>)
 8005f96:	18d3      	adds	r3, r2, r3
 8005f98:	4a5f      	ldr	r2, [pc, #380]	; (8006118 <HAL_TIM_PeriodElapsedCallback+0x19bc>)
 8005f9a:	0011      	movs	r1, r2
 8005f9c:	0018      	movs	r0, r3
 8005f9e:	f008 feec 	bl	800ed7a <strstr>
 8005fa2:	0003      	movs	r3, r0
 8005fa4:	25a8      	movs	r5, #168	; 0xa8
 8005fa6:	19aa      	adds	r2, r5, r6
 8005fa8:	19d2      	adds	r2, r2, r7
 8005faa:	6013      	str	r3, [r2, #0]
				ptr2 = strstr(responseBuffer[i], "ERROR");
 8005fac:	19a3      	adds	r3, r4, r6
 8005fae:	19db      	adds	r3, r3, r7
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	2232      	movs	r2, #50	; 0x32
 8005fb4:	435a      	muls	r2, r3
 8005fb6:	4b55      	ldr	r3, [pc, #340]	; (800610c <HAL_TIM_PeriodElapsedCallback+0x19b0>)
 8005fb8:	18d3      	adds	r3, r2, r3
 8005fba:	4a56      	ldr	r2, [pc, #344]	; (8006114 <HAL_TIM_PeriodElapsedCallback+0x19b8>)
 8005fbc:	0011      	movs	r1, r2
 8005fbe:	0018      	movs	r0, r3
 8005fc0:	f008 fedb 	bl	800ed7a <strstr>
 8005fc4:	0003      	movs	r3, r0
 8005fc6:	22a4      	movs	r2, #164	; 0xa4
 8005fc8:	0031      	movs	r1, r6
 8005fca:	1852      	adds	r2, r2, r1
 8005fcc:	19d2      	adds	r2, r2, r7
 8005fce:	6013      	str	r3, [r2, #0]
				if (ptr != NULL) {
 8005fd0:	186b      	adds	r3, r5, r1
 8005fd2:	19db      	adds	r3, r3, r7
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d00e      	beq.n	8005ff8 <HAL_TIM_PeriodElapsedCallback+0x189c>
					tLine = i;
 8005fda:	2322      	movs	r3, #34	; 0x22
 8005fdc:	33ff      	adds	r3, #255	; 0xff
 8005fde:	185b      	adds	r3, r3, r1
 8005fe0:	19db      	adds	r3, r3, r7
 8005fe2:	1862      	adds	r2, r4, r1
 8005fe4:	19d2      	adds	r2, r2, r7
 8005fe6:	7812      	ldrb	r2, [r2, #0]
 8005fe8:	701a      	strb	r2, [r3, #0]
					tResponse = 'G';
 8005fea:	2340      	movs	r3, #64	; 0x40
 8005fec:	33ff      	adds	r3, #255	; 0xff
 8005fee:	185b      	adds	r3, r3, r1
 8005ff0:	19db      	adds	r3, r3, r7
 8005ff2:	2247      	movs	r2, #71	; 0x47
 8005ff4:	701a      	strb	r2, [r3, #0]
					break;
 8005ff6:	e029      	b.n	800604c <HAL_TIM_PeriodElapsedCallback+0x18f0>
				if (ptr2 != NULL) {
 8005ff8:	23a4      	movs	r3, #164	; 0xa4
 8005ffa:	2118      	movs	r1, #24
 8005ffc:	185b      	adds	r3, r3, r1
 8005ffe:	19db      	adds	r3, r3, r7
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d010      	beq.n	8006028 <HAL_TIM_PeriodElapsedCallback+0x18cc>
					tLine = i;
 8006006:	2322      	movs	r3, #34	; 0x22
 8006008:	33ff      	adds	r3, #255	; 0xff
 800600a:	185b      	adds	r3, r3, r1
 800600c:	19db      	adds	r3, r3, r7
 800600e:	2290      	movs	r2, #144	; 0x90
 8006010:	0052      	lsls	r2, r2, #1
 8006012:	1852      	adds	r2, r2, r1
 8006014:	19d2      	adds	r2, r2, r7
 8006016:	7812      	ldrb	r2, [r2, #0]
 8006018:	701a      	strb	r2, [r3, #0]
					tResponse = 'B';
 800601a:	2340      	movs	r3, #64	; 0x40
 800601c:	33ff      	adds	r3, #255	; 0xff
 800601e:	185b      	adds	r3, r3, r1
 8006020:	19db      	adds	r3, r3, r7
 8006022:	2242      	movs	r2, #66	; 0x42
 8006024:	701a      	strb	r2, [r3, #0]
					break;
 8006026:	e011      	b.n	800604c <HAL_TIM_PeriodElapsedCallback+0x18f0>
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 8006028:	2190      	movs	r1, #144	; 0x90
 800602a:	0049      	lsls	r1, r1, #1
 800602c:	2018      	movs	r0, #24
 800602e:	180b      	adds	r3, r1, r0
 8006030:	19db      	adds	r3, r3, r7
 8006032:	781a      	ldrb	r2, [r3, #0]
 8006034:	180b      	adds	r3, r1, r0
 8006036:	19db      	adds	r3, r3, r7
 8006038:	3201      	adds	r2, #1
 800603a:	701a      	strb	r2, [r3, #0]
 800603c:	2390      	movs	r3, #144	; 0x90
 800603e:	005b      	lsls	r3, r3, #1
 8006040:	2218      	movs	r2, #24
 8006042:	189b      	adds	r3, r3, r2
 8006044:	19db      	adds	r3, r3, r7
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	2b05      	cmp	r3, #5
 800604a:	d99b      	bls.n	8005f84 <HAL_TIM_PeriodElapsedCallback+0x1828>
			if (tLine != 99) {
 800604c:	2322      	movs	r3, #34	; 0x22
 800604e:	33ff      	adds	r3, #255	; 0xff
 8006050:	2118      	movs	r1, #24
 8006052:	185b      	adds	r3, r3, r1
 8006054:	19db      	adds	r3, r3, r7
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	2b63      	cmp	r3, #99	; 0x63
 800605a:	d100      	bne.n	800605e <HAL_TIM_PeriodElapsedCallback+0x1902>
 800605c:	e097      	b.n	800618e <HAL_TIM_PeriodElapsedCallback+0x1a32>
				if (tResponse == 'G') {
 800605e:	2340      	movs	r3, #64	; 0x40
 8006060:	33ff      	adds	r3, #255	; 0xff
 8006062:	185b      	adds	r3, r3, r1
 8006064:	19db      	adds	r3, r3, r7
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	2b47      	cmp	r3, #71	; 0x47
 800606a:	d000      	beq.n	800606e <HAL_TIM_PeriodElapsedCallback+0x1912>
 800606c:	e080      	b.n	8006170 <HAL_TIM_PeriodElapsedCallback+0x1a14>
					uint8_t totalCommas = 0;
 800606e:	2320      	movs	r3, #32
 8006070:	33ff      	adds	r3, #255	; 0xff
 8006072:	185b      	adds	r3, r3, r1
 8006074:	19db      	adds	r3, r3, r7
 8006076:	2200      	movs	r2, #0
 8006078:	701a      	strb	r2, [r3, #0]
					for(uint8_t coms=0;coms<15;coms++){
 800607a:	238f      	movs	r3, #143	; 0x8f
 800607c:	005b      	lsls	r3, r3, #1
 800607e:	185b      	adds	r3, r3, r1
 8006080:	19db      	adds	r3, r3, r7
 8006082:	2200      	movs	r2, #0
 8006084:	701a      	strb	r2, [r3, #0]
 8006086:	e053      	b.n	8006130 <HAL_TIM_PeriodElapsedCallback+0x19d4>
						if(responseBuffer[tLine][coms]==','){
 8006088:	2322      	movs	r3, #34	; 0x22
 800608a:	33ff      	adds	r3, #255	; 0xff
 800608c:	2418      	movs	r4, #24
 800608e:	191b      	adds	r3, r3, r4
 8006090:	19db      	adds	r3, r3, r7
 8006092:	781a      	ldrb	r2, [r3, #0]
 8006094:	238f      	movs	r3, #143	; 0x8f
 8006096:	005b      	lsls	r3, r3, #1
 8006098:	191b      	adds	r3, r3, r4
 800609a:	19db      	adds	r3, r3, r7
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	491b      	ldr	r1, [pc, #108]	; (800610c <HAL_TIM_PeriodElapsedCallback+0x19b0>)
 80060a0:	2032      	movs	r0, #50	; 0x32
 80060a2:	4342      	muls	r2, r0
 80060a4:	188a      	adds	r2, r1, r2
 80060a6:	5cd3      	ldrb	r3, [r2, r3]
 80060a8:	2b2c      	cmp	r3, #44	; 0x2c
 80060aa:	d108      	bne.n	80060be <HAL_TIM_PeriodElapsedCallback+0x1962>
							totalCommas++;
 80060ac:	2120      	movs	r1, #32
 80060ae:	31ff      	adds	r1, #255	; 0xff
 80060b0:	190b      	adds	r3, r1, r4
 80060b2:	19db      	adds	r3, r3, r7
 80060b4:	781a      	ldrb	r2, [r3, #0]
 80060b6:	190b      	adds	r3, r1, r4
 80060b8:	19db      	adds	r3, r3, r7
 80060ba:	3201      	adds	r2, #1
 80060bc:	701a      	strb	r2, [r3, #0]
						if(totalCommas==2){
 80060be:	2320      	movs	r3, #32
 80060c0:	33ff      	adds	r3, #255	; 0xff
 80060c2:	2018      	movs	r0, #24
 80060c4:	181b      	adds	r3, r3, r0
 80060c6:	19db      	adds	r3, r3, r7
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	d126      	bne.n	800611c <HAL_TIM_PeriodElapsedCallback+0x19c0>
							substring(vData,responseBuffer[tLine],coms+1,4);
 80060ce:	2322      	movs	r3, #34	; 0x22
 80060d0:	33ff      	adds	r3, #255	; 0xff
 80060d2:	181b      	adds	r3, r3, r0
 80060d4:	19db      	adds	r3, r3, r7
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	2232      	movs	r2, #50	; 0x32
 80060da:	435a      	muls	r2, r3
 80060dc:	4b0b      	ldr	r3, [pc, #44]	; (800610c <HAL_TIM_PeriodElapsedCallback+0x19b0>)
 80060de:	18d1      	adds	r1, r2, r3
 80060e0:	238f      	movs	r3, #143	; 0x8f
 80060e2:	005b      	lsls	r3, r3, #1
 80060e4:	181b      	adds	r3, r3, r0
 80060e6:	19db      	adds	r3, r3, r7
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	3301      	adds	r3, #1
 80060ec:	b2da      	uxtb	r2, r3
 80060ee:	2370      	movs	r3, #112	; 0x70
 80060f0:	181b      	adds	r3, r3, r0
 80060f2:	19d8      	adds	r0, r3, r7
 80060f4:	2304      	movs	r3, #4
 80060f6:	f001 fb57 	bl	80077a8 <substring>
							break;
 80060fa:	e021      	b.n	8006140 <HAL_TIM_PeriodElapsedCallback+0x19e4>
 80060fc:	20000880 	.word	0x20000880
 8006100:	2000087c 	.word	0x2000087c
 8006104:	20000881 	.word	0x20000881
 8006108:	2000087f 	.word	0x2000087f
 800610c:	20000748 	.word	0x20000748
 8006110:	08013210 	.word	0x08013210
 8006114:	0801319c 	.word	0x0801319c
 8006118:	08013218 	.word	0x08013218
					for(uint8_t coms=0;coms<15;coms++){
 800611c:	218f      	movs	r1, #143	; 0x8f
 800611e:	0049      	lsls	r1, r1, #1
 8006120:	2018      	movs	r0, #24
 8006122:	180b      	adds	r3, r1, r0
 8006124:	19db      	adds	r3, r3, r7
 8006126:	781a      	ldrb	r2, [r3, #0]
 8006128:	180b      	adds	r3, r1, r0
 800612a:	19db      	adds	r3, r3, r7
 800612c:	3201      	adds	r2, #1
 800612e:	701a      	strb	r2, [r3, #0]
 8006130:	238f      	movs	r3, #143	; 0x8f
 8006132:	005b      	lsls	r3, r3, #1
 8006134:	2218      	movs	r2, #24
 8006136:	189b      	adds	r3, r3, r2
 8006138:	19db      	adds	r3, r3, r7
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	2b0e      	cmp	r3, #14
 800613e:	d9a3      	bls.n	8006088 <HAL_TIM_PeriodElapsedCallback+0x192c>
					if(totalCommas==2){
 8006140:	2320      	movs	r3, #32
 8006142:	33ff      	adds	r3, #255	; 0xff
 8006144:	2218      	movs	r2, #24
 8006146:	189b      	adds	r3, r3, r2
 8006148:	19db      	adds	r3, r3, r7
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	2b02      	cmp	r3, #2
 800614e:	d109      	bne.n	8006164 <HAL_TIM_PeriodElapsedCallback+0x1a08>
						voltage = atoi(vData);
 8006150:	2370      	movs	r3, #112	; 0x70
 8006152:	189b      	adds	r3, r3, r2
 8006154:	19db      	adds	r3, r3, r7
 8006156:	0018      	movs	r0, r3
 8006158:	f008 fd58 	bl	800ec0c <atoi>
 800615c:	0003      	movs	r3, r0
 800615e:	b29a      	uxth	r2, r3
 8006160:	4bad      	ldr	r3, [pc, #692]	; (8006418 <HAL_TIM_PeriodElapsedCallback+0x1cbc>)
 8006162:	801a      	strh	r2, [r3, #0]
					isResponseOk = 1;
 8006164:	4bad      	ldr	r3, [pc, #692]	; (800641c <HAL_TIM_PeriodElapsedCallback+0x1cc0>)
 8006166:	2201      	movs	r2, #1
 8006168:	701a      	strb	r2, [r3, #0]
					clearit();
 800616a:	f000 fd87 	bl	8006c7c <clearit>
}
 800616e:	e14d      	b.n	800640c <HAL_TIM_PeriodElapsedCallback+0x1cb0>
				} else if (tResponse == 'B') {
 8006170:	2340      	movs	r3, #64	; 0x40
 8006172:	33ff      	adds	r3, #255	; 0xff
 8006174:	2218      	movs	r2, #24
 8006176:	189b      	adds	r3, r3, r2
 8006178:	19db      	adds	r3, r3, r7
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	2b42      	cmp	r3, #66	; 0x42
 800617e:	d000      	beq.n	8006182 <HAL_TIM_PeriodElapsedCallback+0x1a26>
 8006180:	e144      	b.n	800640c <HAL_TIM_PeriodElapsedCallback+0x1cb0>
					isResponseOk = 1;
 8006182:	4ba6      	ldr	r3, [pc, #664]	; (800641c <HAL_TIM_PeriodElapsedCallback+0x1cc0>)
 8006184:	2201      	movs	r2, #1
 8006186:	701a      	strb	r2, [r3, #0]
					clearit();
 8006188:	f000 fd78 	bl	8006c7c <clearit>
}
 800618c:	e13e      	b.n	800640c <HAL_TIM_PeriodElapsedCallback+0x1cb0>
				resTimeout--;
 800618e:	4ba4      	ldr	r3, [pc, #656]	; (8006420 <HAL_TIM_PeriodElapsedCallback+0x1cc4>)
 8006190:	881b      	ldrh	r3, [r3, #0]
 8006192:	b29b      	uxth	r3, r3
 8006194:	3b01      	subs	r3, #1
 8006196:	b29a      	uxth	r2, r3
 8006198:	4ba1      	ldr	r3, [pc, #644]	; (8006420 <HAL_TIM_PeriodElapsedCallback+0x1cc4>)
 800619a:	801a      	strh	r2, [r3, #0]
				if (resTimeout < 1) {
 800619c:	4ba0      	ldr	r3, [pc, #640]	; (8006420 <HAL_TIM_PeriodElapsedCallback+0x1cc4>)
 800619e:	881b      	ldrh	r3, [r3, #0]
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d000      	beq.n	80061a8 <HAL_TIM_PeriodElapsedCallback+0x1a4c>
 80061a6:	e131      	b.n	800640c <HAL_TIM_PeriodElapsedCallback+0x1cb0>
					if (!recResponse) {
 80061a8:	4b9e      	ldr	r3, [pc, #632]	; (8006424 <HAL_TIM_PeriodElapsedCallback+0x1cc8>)
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d101      	bne.n	80061b6 <HAL_TIM_PeriodElapsedCallback+0x1a5a>
						rebootsystem();
 80061b2:	f000 f969 	bl	8006488 <rebootsystem>
					isResponseOk = 0;
 80061b6:	4b99      	ldr	r3, [pc, #612]	; (800641c <HAL_TIM_PeriodElapsedCallback+0x1cc0>)
 80061b8:	2200      	movs	r2, #0
 80061ba:	701a      	strb	r2, [r3, #0]
					clearit();
 80061bc:	f000 fd5e 	bl	8006c7c <clearit>
}
 80061c0:	e124      	b.n	800640c <HAL_TIM_PeriodElapsedCallback+0x1cb0>
	else if(htim == &htim3){
 80061c2:	69fa      	ldr	r2, [r7, #28]
 80061c4:	4b98      	ldr	r3, [pc, #608]	; (8006428 <HAL_TIM_PeriodElapsedCallback+0x1ccc>)
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d100      	bne.n	80061cc <HAL_TIM_PeriodElapsedCallback+0x1a70>
 80061ca:	e11f      	b.n	800640c <HAL_TIM_PeriodElapsedCallback+0x1cb0>
	else if (htim == &htim17) {
 80061cc:	69fa      	ldr	r2, [r7, #28]
 80061ce:	4b97      	ldr	r3, [pc, #604]	; (800642c <HAL_TIM_PeriodElapsedCallback+0x1cd0>)
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d000      	beq.n	80061d6 <HAL_TIM_PeriodElapsedCallback+0x1a7a>
 80061d4:	e11a      	b.n	800640c <HAL_TIM_PeriodElapsedCallback+0x1cb0>
		hangCounter = 0;
 80061d6:	4b96      	ldr	r3, [pc, #600]	; (8006430 <HAL_TIM_PeriodElapsedCallback+0x1cd4>)
 80061d8:	2200      	movs	r2, #0
 80061da:	601a      	str	r2, [r3, #0]
		for(uint8_t tLine =0; tLine< nmeaLC; tLine++){
 80061dc:	231e      	movs	r3, #30
 80061de:	33ff      	adds	r3, #255	; 0xff
 80061e0:	2218      	movs	r2, #24
 80061e2:	189b      	adds	r3, r3, r2
 80061e4:	19db      	adds	r3, r3, r7
 80061e6:	2200      	movs	r2, #0
 80061e8:	701a      	strb	r2, [r3, #0]
 80061ea:	e071      	b.n	80062d0 <HAL_TIM_PeriodElapsedCallback+0x1b74>
			uint8_t commandSize = 0;
 80061ec:	238e      	movs	r3, #142	; 0x8e
 80061ee:	005b      	lsls	r3, r3, #1
 80061f0:	2418      	movs	r4, #24
 80061f2:	191b      	adds	r3, r3, r4
 80061f4:	19db      	adds	r3, r3, r7
 80061f6:	2200      	movs	r2, #0
 80061f8:	701a      	strb	r2, [r3, #0]
			tempSentenceCheck = strstr(nmeaResponse[tLine],"VTG");
 80061fa:	231e      	movs	r3, #30
 80061fc:	33ff      	adds	r3, #255	; 0xff
 80061fe:	191b      	adds	r3, r3, r4
 8006200:	19db      	adds	r3, r3, r7
 8006202:	781a      	ldrb	r2, [r3, #0]
 8006204:	0013      	movs	r3, r2
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	189b      	adds	r3, r3, r2
 800620a:	011a      	lsls	r2, r3, #4
 800620c:	189b      	adds	r3, r3, r2
 800620e:	4a89      	ldr	r2, [pc, #548]	; (8006434 <HAL_TIM_PeriodElapsedCallback+0x1cd8>)
 8006210:	189b      	adds	r3, r3, r2
 8006212:	4a89      	ldr	r2, [pc, #548]	; (8006438 <HAL_TIM_PeriodElapsedCallback+0x1cdc>)
 8006214:	0011      	movs	r1, r2
 8006216:	0018      	movs	r0, r3
 8006218:	f008 fdaf 	bl	800ed7a <strstr>
 800621c:	0003      	movs	r3, r0
 800621e:	2286      	movs	r2, #134	; 0x86
 8006220:	0052      	lsls	r2, r2, #1
 8006222:	1911      	adds	r1, r2, r4
 8006224:	19c9      	adds	r1, r1, r7
 8006226:	600b      	str	r3, [r1, #0]
			if(tempSentenceCheck != NULL){
 8006228:	1913      	adds	r3, r2, r4
 800622a:	19db      	adds	r3, r3, r7
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d00d      	beq.n	800624e <HAL_TIM_PeriodElapsedCallback+0x1af2>
				HAL_UART_Transmit(&GNSS_PORT, "$PMTK314,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*28\r\n",51,2000);
 8006232:	23fa      	movs	r3, #250	; 0xfa
 8006234:	00db      	lsls	r3, r3, #3
 8006236:	4981      	ldr	r1, [pc, #516]	; (800643c <HAL_TIM_PeriodElapsedCallback+0x1ce0>)
 8006238:	4881      	ldr	r0, [pc, #516]	; (8006440 <HAL_TIM_PeriodElapsedCallback+0x1ce4>)
 800623a:	2233      	movs	r2, #51	; 0x33
 800623c:	f006 fdea 	bl	800ce14 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart4, "GNS SET\r\n", 9, 500);
 8006240:	23fa      	movs	r3, #250	; 0xfa
 8006242:	005b      	lsls	r3, r3, #1
 8006244:	497f      	ldr	r1, [pc, #508]	; (8006444 <HAL_TIM_PeriodElapsedCallback+0x1ce8>)
 8006246:	4880      	ldr	r0, [pc, #512]	; (8006448 <HAL_TIM_PeriodElapsedCallback+0x1cec>)
 8006248:	2209      	movs	r2, #9
 800624a:	f006 fde3 	bl	800ce14 <HAL_UART_Transmit>
			for(uint8_t tChar =0 ;tChar<NMEA_MAX_CHARS;tChar++) {
 800624e:	231c      	movs	r3, #28
 8006250:	33ff      	adds	r3, #255	; 0xff
 8006252:	2218      	movs	r2, #24
 8006254:	189b      	adds	r3, r3, r2
 8006256:	19db      	adds	r3, r3, r7
 8006258:	2200      	movs	r2, #0
 800625a:	701a      	strb	r2, [r3, #0]
 800625c:	e024      	b.n	80062a8 <HAL_TIM_PeriodElapsedCallback+0x1b4c>
				if(nmeaResponse[tLine][tChar] != NULL){
 800625e:	231e      	movs	r3, #30
 8006260:	33ff      	adds	r3, #255	; 0xff
 8006262:	2518      	movs	r5, #24
 8006264:	195b      	adds	r3, r3, r5
 8006266:	19db      	adds	r3, r3, r7
 8006268:	781a      	ldrb	r2, [r3, #0]
 800626a:	241c      	movs	r4, #28
 800626c:	34ff      	adds	r4, #255	; 0xff
 800626e:	1963      	adds	r3, r4, r5
 8006270:	19db      	adds	r3, r3, r7
 8006272:	7819      	ldrb	r1, [r3, #0]
 8006274:	486f      	ldr	r0, [pc, #444]	; (8006434 <HAL_TIM_PeriodElapsedCallback+0x1cd8>)
 8006276:	0013      	movs	r3, r2
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	189b      	adds	r3, r3, r2
 800627c:	011a      	lsls	r2, r3, #4
 800627e:	189b      	adds	r3, r3, r2
 8006280:	18c3      	adds	r3, r0, r3
 8006282:	5c5b      	ldrb	r3, [r3, r1]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d018      	beq.n	80062ba <HAL_TIM_PeriodElapsedCallback+0x1b5e>
					commandSize++;
 8006288:	218e      	movs	r1, #142	; 0x8e
 800628a:	0049      	lsls	r1, r1, #1
 800628c:	194b      	adds	r3, r1, r5
 800628e:	19db      	adds	r3, r3, r7
 8006290:	781a      	ldrb	r2, [r3, #0]
 8006292:	194b      	adds	r3, r1, r5
 8006294:	19db      	adds	r3, r3, r7
 8006296:	3201      	adds	r2, #1
 8006298:	701a      	strb	r2, [r3, #0]
			for(uint8_t tChar =0 ;tChar<NMEA_MAX_CHARS;tChar++) {
 800629a:	1963      	adds	r3, r4, r5
 800629c:	19db      	adds	r3, r3, r7
 800629e:	781a      	ldrb	r2, [r3, #0]
 80062a0:	1963      	adds	r3, r4, r5
 80062a2:	19db      	adds	r3, r3, r7
 80062a4:	3201      	adds	r2, #1
 80062a6:	701a      	strb	r2, [r3, #0]
 80062a8:	231c      	movs	r3, #28
 80062aa:	33ff      	adds	r3, #255	; 0xff
 80062ac:	2218      	movs	r2, #24
 80062ae:	189b      	adds	r3, r3, r2
 80062b0:	19db      	adds	r3, r3, r7
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	2b54      	cmp	r3, #84	; 0x54
 80062b6:	d9d2      	bls.n	800625e <HAL_TIM_PeriodElapsedCallback+0x1b02>
 80062b8:	e000      	b.n	80062bc <HAL_TIM_PeriodElapsedCallback+0x1b60>
					break;
 80062ba:	46c0      	nop			; (mov r8, r8)
		for(uint8_t tLine =0; tLine< nmeaLC; tLine++){
 80062bc:	211e      	movs	r1, #30
 80062be:	31ff      	adds	r1, #255	; 0xff
 80062c0:	2018      	movs	r0, #24
 80062c2:	180b      	adds	r3, r1, r0
 80062c4:	19db      	adds	r3, r3, r7
 80062c6:	781a      	ldrb	r2, [r3, #0]
 80062c8:	180b      	adds	r3, r1, r0
 80062ca:	19db      	adds	r3, r3, r7
 80062cc:	3201      	adds	r2, #1
 80062ce:	701a      	strb	r2, [r3, #0]
 80062d0:	4b5e      	ldr	r3, [pc, #376]	; (800644c <HAL_TIM_PeriodElapsedCallback+0x1cf0>)
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	221e      	movs	r2, #30
 80062d8:	32ff      	adds	r2, #255	; 0xff
 80062da:	2418      	movs	r4, #24
 80062dc:	1912      	adds	r2, r2, r4
 80062de:	19d2      	adds	r2, r2, r7
 80062e0:	7812      	ldrb	r2, [r2, #0]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d382      	bcc.n	80061ec <HAL_TIM_PeriodElapsedCallback+0x1a90>
		indicationCounter++;
 80062e6:	4b5a      	ldr	r3, [pc, #360]	; (8006450 <HAL_TIM_PeriodElapsedCallback+0x1cf4>)
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	3301      	adds	r3, #1
 80062ec:	b2da      	uxtb	r2, r3
 80062ee:	4b58      	ldr	r3, [pc, #352]	; (8006450 <HAL_TIM_PeriodElapsedCallback+0x1cf4>)
 80062f0:	701a      	strb	r2, [r3, #0]
		tempGps = nmea_parser(nmeaResponse, NMEA_MAX_CHARS,&crcc,&rCrc);
 80062f2:	4b58      	ldr	r3, [pc, #352]	; (8006454 <HAL_TIM_PeriodElapsedCallback+0x1cf8>)
 80062f4:	4a58      	ldr	r2, [pc, #352]	; (8006458 <HAL_TIM_PeriodElapsedCallback+0x1cfc>)
 80062f6:	484f      	ldr	r0, [pc, #316]	; (8006434 <HAL_TIM_PeriodElapsedCallback+0x1cd8>)
 80062f8:	2155      	movs	r1, #85	; 0x55
 80062fa:	f7fc fb5d 	bl	80029b8 <nmea_parser>
 80062fe:	0003      	movs	r3, r0
 8006300:	228a      	movs	r2, #138	; 0x8a
 8006302:	0052      	lsls	r2, r2, #1
 8006304:	0020      	movs	r0, r4
 8006306:	1811      	adds	r1, r2, r0
 8006308:	19c9      	adds	r1, r1, r7
 800630a:	600b      	str	r3, [r1, #0]
		if (tempGps != NULL) {
 800630c:	1813      	adds	r3, r2, r0
 800630e:	19db      	adds	r3, r3, r7
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d035      	beq.n	8006382 <HAL_TIM_PeriodElapsedCallback+0x1c26>
			gps_info = tempGps;
 8006316:	4b51      	ldr	r3, [pc, #324]	; (800645c <HAL_TIM_PeriodElapsedCallback+0x1d00>)
 8006318:	1812      	adds	r2, r2, r0
 800631a:	19d2      	adds	r2, r2, r7
 800631c:	6812      	ldr	r2, [r2, #0]
 800631e:	601a      	str	r2, [r3, #0]
			uint8_t vc = 0;
 8006320:	2114      	movs	r1, #20
 8006322:	31ff      	adds	r1, #255	; 0xff
 8006324:	180b      	adds	r3, r1, r0
 8006326:	19db      	adds	r3, r3, r7
 8006328:	2200      	movs	r2, #0
 800632a:	701a      	strb	r2, [r3, #0]
			vc=gps_info[16];
 800632c:	4b4b      	ldr	r3, [pc, #300]	; (800645c <HAL_TIM_PeriodElapsedCallback+0x1d00>)
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	180b      	adds	r3, r1, r0
 8006332:	19db      	adds	r3, r3, r7
 8006334:	7c12      	ldrb	r2, [r2, #16]
 8006336:	701a      	strb	r2, [r3, #0]
			gpsSpeed = gps_info[15];
 8006338:	4b48      	ldr	r3, [pc, #288]	; (800645c <HAL_TIM_PeriodElapsedCallback+0x1d00>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	7bda      	ldrb	r2, [r3, #15]
 800633e:	4b48      	ldr	r3, [pc, #288]	; (8006460 <HAL_TIM_PeriodElapsedCallback+0x1d04>)
 8006340:	701a      	strb	r2, [r3, #0]
			vc&=0x10;
 8006342:	0004      	movs	r4, r0
 8006344:	190b      	adds	r3, r1, r4
 8006346:	19db      	adds	r3, r3, r7
 8006348:	0008      	movs	r0, r1
 800634a:	190a      	adds	r2, r1, r4
 800634c:	19d2      	adds	r2, r2, r7
 800634e:	7812      	ldrb	r2, [r2, #0]
 8006350:	2110      	movs	r1, #16
 8006352:	400a      	ands	r2, r1
 8006354:	701a      	strb	r2, [r3, #0]
			vc = vc<<3;
 8006356:	0001      	movs	r1, r0
 8006358:	0020      	movs	r0, r4
 800635a:	180b      	adds	r3, r1, r0
 800635c:	19db      	adds	r3, r3, r7
 800635e:	180a      	adds	r2, r1, r0
 8006360:	19d2      	adds	r2, r2, r7
 8006362:	7812      	ldrb	r2, [r2, #0]
 8006364:	00d2      	lsls	r2, r2, #3
 8006366:	701a      	strb	r2, [r3, #0]
			if(vc == 0x80){
 8006368:	180b      	adds	r3, r1, r0
 800636a:	19db      	adds	r3, r3, r7
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	2b80      	cmp	r3, #128	; 0x80
 8006370:	d103      	bne.n	800637a <HAL_TIM_PeriodElapsedCallback+0x1c1e>
				isGpsValid = 1;
 8006372:	4b3c      	ldr	r3, [pc, #240]	; (8006464 <HAL_TIM_PeriodElapsedCallback+0x1d08>)
 8006374:	2201      	movs	r2, #1
 8006376:	701a      	strb	r2, [r3, #0]
 8006378:	e006      	b.n	8006388 <HAL_TIM_PeriodElapsedCallback+0x1c2c>
				isGpsValid = 0;
 800637a:	4b3a      	ldr	r3, [pc, #232]	; (8006464 <HAL_TIM_PeriodElapsedCallback+0x1d08>)
 800637c:	2200      	movs	r2, #0
 800637e:	701a      	strb	r2, [r3, #0]
 8006380:	e002      	b.n	8006388 <HAL_TIM_PeriodElapsedCallback+0x1c2c>
			isGpsValid = 0;
 8006382:	4b38      	ldr	r3, [pc, #224]	; (8006464 <HAL_TIM_PeriodElapsedCallback+0x1d08>)
 8006384:	2200      	movs	r2, #0
 8006386:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim17);
 8006388:	4b28      	ldr	r3, [pc, #160]	; (800642c <HAL_TIM_PeriodElapsedCallback+0x1cd0>)
 800638a:	0018      	movs	r0, r3
 800638c:	f005 fd92 	bl	800beb4 <HAL_TIM_Base_Stop_IT>
		isGNSSTimStart = 0;
 8006390:	4b35      	ldr	r3, [pc, #212]	; (8006468 <HAL_TIM_PeriodElapsedCallback+0x1d0c>)
 8006392:	2200      	movs	r2, #0
 8006394:	701a      	strb	r2, [r3, #0]
		if (tim6Count > msgPacketSaveInterval) {
 8006396:	4b35      	ldr	r3, [pc, #212]	; (800646c <HAL_TIM_PeriodElapsedCallback+0x1d10>)
 8006398:	781a      	ldrb	r2, [r3, #0]
 800639a:	4b35      	ldr	r3, [pc, #212]	; (8006470 <HAL_TIM_PeriodElapsedCallback+0x1d14>)
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d914      	bls.n	80063ce <HAL_TIM_PeriodElapsedCallback+0x1c72>
			if (isLoggedIn == 0 && isTcpOpen == 0 && flashready == 1) {
 80063a4:	4b33      	ldr	r3, [pc, #204]	; (8006474 <HAL_TIM_PeriodElapsedCallback+0x1d18>)
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d10b      	bne.n	80063c6 <HAL_TIM_PeriodElapsedCallback+0x1c6a>
 80063ae:	4b32      	ldr	r3, [pc, #200]	; (8006478 <HAL_TIM_PeriodElapsedCallback+0x1d1c>)
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d106      	bne.n	80063c6 <HAL_TIM_PeriodElapsedCallback+0x1c6a>
 80063b8:	4b30      	ldr	r3, [pc, #192]	; (800647c <HAL_TIM_PeriodElapsedCallback+0x1d20>)
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d101      	bne.n	80063c6 <HAL_TIM_PeriodElapsedCallback+0x1c6a>
				save_data_packet();
 80063c2:	f000 ff49 	bl	8007258 <save_data_packet>
			tim6Count = 0;
 80063c6:	4b29      	ldr	r3, [pc, #164]	; (800646c <HAL_TIM_PeriodElapsedCallback+0x1d10>)
 80063c8:	2200      	movs	r2, #0
 80063ca:	701a      	strb	r2, [r3, #0]
 80063cc:	e005      	b.n	80063da <HAL_TIM_PeriodElapsedCallback+0x1c7e>
			tim6Count++;
 80063ce:	4b27      	ldr	r3, [pc, #156]	; (800646c <HAL_TIM_PeriodElapsedCallback+0x1d10>)
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	3301      	adds	r3, #1
 80063d4:	b2da      	uxtb	r2, r3
 80063d6:	4b25      	ldr	r3, [pc, #148]	; (800646c <HAL_TIM_PeriodElapsedCallback+0x1d10>)
 80063d8:	701a      	strb	r2, [r3, #0]
		memset(nmeaResponse, 0, sizeof(nmeaResponse));
 80063da:	23aa      	movs	r3, #170	; 0xaa
 80063dc:	005a      	lsls	r2, r3, #1
 80063de:	4b15      	ldr	r3, [pc, #84]	; (8006434 <HAL_TIM_PeriodElapsedCallback+0x1cd8>)
 80063e0:	2100      	movs	r1, #0
 80063e2:	0018      	movs	r0, r3
 80063e4:	f008 fc71 	bl	800ecca <memset>
		nmeaLC = 0;
 80063e8:	4b18      	ldr	r3, [pc, #96]	; (800644c <HAL_TIM_PeriodElapsedCallback+0x1cf0>)
 80063ea:	2200      	movs	r2, #0
 80063ec:	701a      	strb	r2, [r3, #0]
		nmeaCC = 0;
 80063ee:	4b24      	ldr	r3, [pc, #144]	; (8006480 <HAL_TIM_PeriodElapsedCallback+0x1d24>)
 80063f0:	2200      	movs	r2, #0
 80063f2:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&GNSS_PORT, GNSS_BUFFER, 1);
 80063f4:	4923      	ldr	r1, [pc, #140]	; (8006484 <HAL_TIM_PeriodElapsedCallback+0x1d28>)
 80063f6:	4b12      	ldr	r3, [pc, #72]	; (8006440 <HAL_TIM_PeriodElapsedCallback+0x1ce4>)
 80063f8:	2201      	movs	r2, #1
 80063fa:	0018      	movs	r0, r3
 80063fc:	f006 fda6 	bl	800cf4c <HAL_UART_Receive_IT>
		HAL_UART_Receive_IT(&GNSS_PORT, GNSS_BUFFER, 1);
 8006400:	4920      	ldr	r1, [pc, #128]	; (8006484 <HAL_TIM_PeriodElapsedCallback+0x1d28>)
 8006402:	4b0f      	ldr	r3, [pc, #60]	; (8006440 <HAL_TIM_PeriodElapsedCallback+0x1ce4>)
 8006404:	2201      	movs	r2, #1
 8006406:	0018      	movs	r0, r3
 8006408:	f006 fda0 	bl	800cf4c <HAL_UART_Receive_IT>
}
 800640c:	46c0      	nop			; (mov r8, r8)
 800640e:	46bd      	mov	sp, r7
 8006410:	b056      	add	sp, #344	; 0x158
 8006412:	bc80      	pop	{r7}
 8006414:	46b8      	mov	r8, r7
 8006416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006418:	20000002 	.word	0x20000002
 800641c:	20000880 	.word	0x20000880
 8006420:	2000087c 	.word	0x2000087c
 8006424:	20000881 	.word	0x20000881
 8006428:	2000034c 	.word	0x2000034c
 800642c:	2000047c 	.word	0x2000047c
 8006430:	20000730 	.word	0x20000730
 8006434:	200008d8 	.word	0x200008d8
 8006438:	08013220 	.word	0x08013220
 800643c:	08013224 	.word	0x08013224
 8006440:	2000055c 	.word	0x2000055c
 8006444:	08013258 	.word	0x08013258
 8006448:	20000684 	.word	0x20000684
 800644c:	20000876 	.word	0x20000876
 8006450:	20000735 	.word	0x20000735
 8006454:	20000737 	.word	0x20000737
 8006458:	20000736 	.word	0x20000736
 800645c:	2000002c 	.word	0x2000002c
 8006460:	20000723 	.word	0x20000723
 8006464:	20000722 	.word	0x20000722
 8006468:	2000087e 	.word	0x2000087e
 800646c:	20000a31 	.word	0x20000a31
 8006470:	20000000 	.word	0x20000000
 8006474:	20000a30 	.word	0x20000a30
 8006478:	20000a2c 	.word	0x20000a2c
 800647c:	20000d1c 	.word	0x20000d1c
 8006480:	20000877 	.word	0x20000877
 8006484:	20000744 	.word	0x20000744

08006488 <rebootsystem>:

void rebootsystem() {
 8006488:	b580      	push	{r7, lr}
 800648a:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 1);
	save_to_flash(1);
 800648c:	2001      	movs	r0, #1
 800648e:	f000 f803 	bl	8006498 <save_to_flash>
	NVIC_SystemReset();
 8006492:	f7fd f997 	bl	80037c4 <__NVIC_SystemReset>
	...

08006498 <save_to_flash>:
	// todo save flash info
}
void save_to_flash(uint8_t autoRstValue) {
 8006498:	b590      	push	{r4, r7, lr}
 800649a:	b0c5      	sub	sp, #276	; 0x114
 800649c:	af00      	add	r7, sp, #0
 800649e:	0002      	movs	r2, r0
 80064a0:	4bb2      	ldr	r3, [pc, #712]	; (800676c <save_to_flash+0x2d4>)
 80064a2:	2488      	movs	r4, #136	; 0x88
 80064a4:	0064      	lsls	r4, r4, #1
 80064a6:	191b      	adds	r3, r3, r4
 80064a8:	19db      	adds	r3, r3, r7
 80064aa:	701a      	strb	r2, [r3, #0]
	flashready = 0;
 80064ac:	4bb0      	ldr	r3, [pc, #704]	; (8006770 <save_to_flash+0x2d8>)
 80064ae:	2200      	movs	r2, #0
 80064b0:	701a      	strb	r2, [r3, #0]

	uint8_t configPage[LASTPAGE_ADD+2];
	memset(configPage,0,sizeof(configPage));
 80064b2:	2310      	movs	r3, #16
 80064b4:	18fb      	adds	r3, r7, r3
 80064b6:	22fc      	movs	r2, #252	; 0xfc
 80064b8:	2100      	movs	r1, #0
 80064ba:	0018      	movs	r0, r3
 80064bc:	f008 fc05 	bl	800ecca <memset>
	//First time
	W25qxx_EraseSector(0);
 80064c0:	2000      	movs	r0, #0
 80064c2:	f002 fec9 	bl	8009258 <W25qxx_EraseSector>
	isFlash =1;
 80064c6:	4bab      	ldr	r3, [pc, #684]	; (8006774 <save_to_flash+0x2dc>)
 80064c8:	2201      	movs	r2, #1
 80064ca:	701a      	strb	r2, [r3, #0]
	configPage[0] = isFlash; // isflash
 80064cc:	4ba9      	ldr	r3, [pc, #676]	; (8006774 <save_to_flash+0x2dc>)
 80064ce:	781a      	ldrb	r2, [r3, #0]
 80064d0:	4ba9      	ldr	r3, [pc, #676]	; (8006778 <save_to_flash+0x2e0>)
 80064d2:	191b      	adds	r3, r3, r4
 80064d4:	19db      	adds	r3, r3, r7
 80064d6:	701a      	strb	r2, [r3, #0]

	uint8_t t[2];
	t[0] = StartSec >> 8;
 80064d8:	4ba8      	ldr	r3, [pc, #672]	; (800677c <save_to_flash+0x2e4>)
 80064da:	881b      	ldrh	r3, [r3, #0]
 80064dc:	b29b      	uxth	r3, r3
 80064de:	0a1b      	lsrs	r3, r3, #8
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	b2da      	uxtb	r2, r3
 80064e4:	4ba6      	ldr	r3, [pc, #664]	; (8006780 <save_to_flash+0x2e8>)
 80064e6:	191b      	adds	r3, r3, r4
 80064e8:	19db      	adds	r3, r3, r7
 80064ea:	701a      	strb	r2, [r3, #0]
	t[1] = StartSec;
 80064ec:	4ba3      	ldr	r3, [pc, #652]	; (800677c <save_to_flash+0x2e4>)
 80064ee:	881b      	ldrh	r3, [r3, #0]
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	b2da      	uxtb	r2, r3
 80064f4:	4ba2      	ldr	r3, [pc, #648]	; (8006780 <save_to_flash+0x2e8>)
 80064f6:	191b      	adds	r3, r3, r4
 80064f8:	19db      	adds	r3, r3, r7
 80064fa:	705a      	strb	r2, [r3, #1]
	configPage[MSBSS] = t[0]; //MSB StartSec
 80064fc:	4ba0      	ldr	r3, [pc, #640]	; (8006780 <save_to_flash+0x2e8>)
 80064fe:	191b      	adds	r3, r3, r4
 8006500:	19db      	adds	r3, r3, r7
 8006502:	781a      	ldrb	r2, [r3, #0]
 8006504:	4b9c      	ldr	r3, [pc, #624]	; (8006778 <save_to_flash+0x2e0>)
 8006506:	0021      	movs	r1, r4
 8006508:	191b      	adds	r3, r3, r4
 800650a:	19db      	adds	r3, r3, r7
 800650c:	705a      	strb	r2, [r3, #1]
	configPage[LSBSS] = t[1]; //LSB StartSec
 800650e:	4b9c      	ldr	r3, [pc, #624]	; (8006780 <save_to_flash+0x2e8>)
 8006510:	185b      	adds	r3, r3, r1
 8006512:	19db      	adds	r3, r3, r7
 8006514:	785a      	ldrb	r2, [r3, #1]
 8006516:	4b98      	ldr	r3, [pc, #608]	; (8006778 <save_to_flash+0x2e0>)
 8006518:	185b      	adds	r3, r3, r1
 800651a:	19db      	adds	r3, r3, r7
 800651c:	709a      	strb	r2, [r3, #2]

	t[0] = StartN >> 8;
 800651e:	4b99      	ldr	r3, [pc, #612]	; (8006784 <save_to_flash+0x2ec>)
 8006520:	881b      	ldrh	r3, [r3, #0]
 8006522:	b29b      	uxth	r3, r3
 8006524:	0a1b      	lsrs	r3, r3, #8
 8006526:	b29b      	uxth	r3, r3
 8006528:	b2da      	uxtb	r2, r3
 800652a:	4b95      	ldr	r3, [pc, #596]	; (8006780 <save_to_flash+0x2e8>)
 800652c:	185b      	adds	r3, r3, r1
 800652e:	19db      	adds	r3, r3, r7
 8006530:	701a      	strb	r2, [r3, #0]
	t[1] = StartN;
 8006532:	4b94      	ldr	r3, [pc, #592]	; (8006784 <save_to_flash+0x2ec>)
 8006534:	881b      	ldrh	r3, [r3, #0]
 8006536:	b29b      	uxth	r3, r3
 8006538:	b2da      	uxtb	r2, r3
 800653a:	4b91      	ldr	r3, [pc, #580]	; (8006780 <save_to_flash+0x2e8>)
 800653c:	185b      	adds	r3, r3, r1
 800653e:	19db      	adds	r3, r3, r7
 8006540:	705a      	strb	r2, [r3, #1]
	configPage[MSBSN] = t[0]; //MSB StartN
 8006542:	4b8f      	ldr	r3, [pc, #572]	; (8006780 <save_to_flash+0x2e8>)
 8006544:	185b      	adds	r3, r3, r1
 8006546:	19db      	adds	r3, r3, r7
 8006548:	781a      	ldrb	r2, [r3, #0]
 800654a:	4b8b      	ldr	r3, [pc, #556]	; (8006778 <save_to_flash+0x2e0>)
 800654c:	185b      	adds	r3, r3, r1
 800654e:	19db      	adds	r3, r3, r7
 8006550:	70da      	strb	r2, [r3, #3]
	configPage[LSBSN] = t[1]; //LSB StartN
 8006552:	4b8b      	ldr	r3, [pc, #556]	; (8006780 <save_to_flash+0x2e8>)
 8006554:	185b      	adds	r3, r3, r1
 8006556:	19db      	adds	r3, r3, r7
 8006558:	785a      	ldrb	r2, [r3, #1]
 800655a:	4b87      	ldr	r3, [pc, #540]	; (8006778 <save_to_flash+0x2e0>)
 800655c:	185b      	adds	r3, r3, r1
 800655e:	19db      	adds	r3, r3, r7
 8006560:	711a      	strb	r2, [r3, #4]

	t[0] = EndSec >> 8;
 8006562:	4b89      	ldr	r3, [pc, #548]	; (8006788 <save_to_flash+0x2f0>)
 8006564:	881b      	ldrh	r3, [r3, #0]
 8006566:	b29b      	uxth	r3, r3
 8006568:	0a1b      	lsrs	r3, r3, #8
 800656a:	b29b      	uxth	r3, r3
 800656c:	b2da      	uxtb	r2, r3
 800656e:	4b84      	ldr	r3, [pc, #528]	; (8006780 <save_to_flash+0x2e8>)
 8006570:	185b      	adds	r3, r3, r1
 8006572:	19db      	adds	r3, r3, r7
 8006574:	701a      	strb	r2, [r3, #0]
	t[1] = EndSec;
 8006576:	4b84      	ldr	r3, [pc, #528]	; (8006788 <save_to_flash+0x2f0>)
 8006578:	881b      	ldrh	r3, [r3, #0]
 800657a:	b29b      	uxth	r3, r3
 800657c:	b2da      	uxtb	r2, r3
 800657e:	4b80      	ldr	r3, [pc, #512]	; (8006780 <save_to_flash+0x2e8>)
 8006580:	185b      	adds	r3, r3, r1
 8006582:	19db      	adds	r3, r3, r7
 8006584:	705a      	strb	r2, [r3, #1]
	configPage[MSBES] = t[0]; //MSB EndSec
 8006586:	4b7e      	ldr	r3, [pc, #504]	; (8006780 <save_to_flash+0x2e8>)
 8006588:	185b      	adds	r3, r3, r1
 800658a:	19db      	adds	r3, r3, r7
 800658c:	781a      	ldrb	r2, [r3, #0]
 800658e:	4b7a      	ldr	r3, [pc, #488]	; (8006778 <save_to_flash+0x2e0>)
 8006590:	185b      	adds	r3, r3, r1
 8006592:	19db      	adds	r3, r3, r7
 8006594:	715a      	strb	r2, [r3, #5]
	configPage[LSBES] = t[1]; //LSB EndSec
 8006596:	4b7a      	ldr	r3, [pc, #488]	; (8006780 <save_to_flash+0x2e8>)
 8006598:	185b      	adds	r3, r3, r1
 800659a:	19db      	adds	r3, r3, r7
 800659c:	785a      	ldrb	r2, [r3, #1]
 800659e:	4b76      	ldr	r3, [pc, #472]	; (8006778 <save_to_flash+0x2e0>)
 80065a0:	185b      	adds	r3, r3, r1
 80065a2:	19db      	adds	r3, r3, r7
 80065a4:	719a      	strb	r2, [r3, #6]

	t[0] = EndN >> 8;
 80065a6:	4b79      	ldr	r3, [pc, #484]	; (800678c <save_to_flash+0x2f4>)
 80065a8:	881b      	ldrh	r3, [r3, #0]
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	0a1b      	lsrs	r3, r3, #8
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	b2da      	uxtb	r2, r3
 80065b2:	4b73      	ldr	r3, [pc, #460]	; (8006780 <save_to_flash+0x2e8>)
 80065b4:	185b      	adds	r3, r3, r1
 80065b6:	19db      	adds	r3, r3, r7
 80065b8:	701a      	strb	r2, [r3, #0]
	t[1] = EndN;
 80065ba:	4b74      	ldr	r3, [pc, #464]	; (800678c <save_to_flash+0x2f4>)
 80065bc:	881b      	ldrh	r3, [r3, #0]
 80065be:	b29b      	uxth	r3, r3
 80065c0:	b2da      	uxtb	r2, r3
 80065c2:	4b6f      	ldr	r3, [pc, #444]	; (8006780 <save_to_flash+0x2e8>)
 80065c4:	185b      	adds	r3, r3, r1
 80065c6:	19db      	adds	r3, r3, r7
 80065c8:	705a      	strb	r2, [r3, #1]
	configPage[MSBEN] = t[0]; //MSB EndN
 80065ca:	4b6d      	ldr	r3, [pc, #436]	; (8006780 <save_to_flash+0x2e8>)
 80065cc:	185b      	adds	r3, r3, r1
 80065ce:	19db      	adds	r3, r3, r7
 80065d0:	781a      	ldrb	r2, [r3, #0]
 80065d2:	4b69      	ldr	r3, [pc, #420]	; (8006778 <save_to_flash+0x2e0>)
 80065d4:	185b      	adds	r3, r3, r1
 80065d6:	19db      	adds	r3, r3, r7
 80065d8:	71da      	strb	r2, [r3, #7]
	configPage[LSBEN] = t[1]; //LSB EndN
 80065da:	4b69      	ldr	r3, [pc, #420]	; (8006780 <save_to_flash+0x2e8>)
 80065dc:	185b      	adds	r3, r3, r1
 80065de:	19db      	adds	r3, r3, r7
 80065e0:	785a      	ldrb	r2, [r3, #1]
 80065e2:	4b65      	ldr	r3, [pc, #404]	; (8006778 <save_to_flash+0x2e0>)
 80065e4:	185b      	adds	r3, r3, r1
 80065e6:	19db      	adds	r3, r3, r7
 80065e8:	721a      	strb	r2, [r3, #8]

	configPage[CP1_ADD] = cPin[0];  //pin 1
 80065ea:	4b69      	ldr	r3, [pc, #420]	; (8006790 <save_to_flash+0x2f8>)
 80065ec:	781a      	ldrb	r2, [r3, #0]
 80065ee:	4b62      	ldr	r3, [pc, #392]	; (8006778 <save_to_flash+0x2e0>)
 80065f0:	185b      	adds	r3, r3, r1
 80065f2:	19db      	adds	r3, r3, r7
 80065f4:	725a      	strb	r2, [r3, #9]
	configPage[CP2_ADD] = cPin[1]; //pin 2
 80065f6:	4b66      	ldr	r3, [pc, #408]	; (8006790 <save_to_flash+0x2f8>)
 80065f8:	785a      	ldrb	r2, [r3, #1]
 80065fa:	4b5f      	ldr	r3, [pc, #380]	; (8006778 <save_to_flash+0x2e0>)
 80065fc:	185b      	adds	r3, r3, r1
 80065fe:	19db      	adds	r3, r3, r7
 8006600:	729a      	strb	r2, [r3, #10]
	configPage[CP3_ADD] = cPin[2]; //pin 3
 8006602:	4b63      	ldr	r3, [pc, #396]	; (8006790 <save_to_flash+0x2f8>)
 8006604:	789a      	ldrb	r2, [r3, #2]
 8006606:	4b5c      	ldr	r3, [pc, #368]	; (8006778 <save_to_flash+0x2e0>)
 8006608:	185b      	adds	r3, r3, r1
 800660a:	19db      	adds	r3, r3, r7
 800660c:	72da      	strb	r2, [r3, #11]
	configPage[CP4_ADD] = cPin[3]; //pin 4
 800660e:	4b60      	ldr	r3, [pc, #384]	; (8006790 <save_to_flash+0x2f8>)
 8006610:	78da      	ldrb	r2, [r3, #3]
 8006612:	4b59      	ldr	r3, [pc, #356]	; (8006778 <save_to_flash+0x2e0>)
 8006614:	185b      	adds	r3, r3, r1
 8006616:	19db      	adds	r3, r3, r7
 8006618:	731a      	strb	r2, [r3, #12]

	// saving valid sender
	for (uint8_t te = VALIDSENSTART_ADD; te < VALIDSENEND_ADD+1; te++) {
 800661a:	2310      	movs	r3, #16
 800661c:	33ff      	adds	r3, #255	; 0xff
 800661e:	18fb      	adds	r3, r7, r3
 8006620:	220d      	movs	r2, #13
 8006622:	701a      	strb	r2, [r3, #0]
 8006624:	e014      	b.n	8006650 <save_to_flash+0x1b8>
		configPage[te] = validSender[te - VALIDSENSTART_ADD];
 8006626:	2010      	movs	r0, #16
 8006628:	30ff      	adds	r0, #255	; 0xff
 800662a:	183b      	adds	r3, r7, r0
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	3b0d      	subs	r3, #13
 8006630:	001a      	movs	r2, r3
 8006632:	183b      	adds	r3, r7, r0
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	4957      	ldr	r1, [pc, #348]	; (8006794 <save_to_flash+0x2fc>)
 8006638:	5c89      	ldrb	r1, [r1, r2]
 800663a:	4a4f      	ldr	r2, [pc, #316]	; (8006778 <save_to_flash+0x2e0>)
 800663c:	2488      	movs	r4, #136	; 0x88
 800663e:	0064      	lsls	r4, r4, #1
 8006640:	1912      	adds	r2, r2, r4
 8006642:	19d2      	adds	r2, r2, r7
 8006644:	54d1      	strb	r1, [r2, r3]
	for (uint8_t te = VALIDSENSTART_ADD; te < VALIDSENEND_ADD+1; te++) {
 8006646:	183b      	adds	r3, r7, r0
 8006648:	781a      	ldrb	r2, [r3, #0]
 800664a:	183b      	adds	r3, r7, r0
 800664c:	3201      	adds	r2, #1
 800664e:	701a      	strb	r2, [r3, #0]
 8006650:	2310      	movs	r3, #16
 8006652:	33ff      	adds	r3, #255	; 0xff
 8006654:	18fb      	adds	r3, r7, r3
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	2b16      	cmp	r3, #22
 800665a:	d9e4      	bls.n	8006626 <save_to_flash+0x18e>
	}
	//------------------------------------


	//saving domain address from 23 - 72
	for (uint8_t te = DOMAINSTART_ADD; te < DOMAINEND_ADD+1; te++) {
 800665c:	2387      	movs	r3, #135	; 0x87
 800665e:	005b      	lsls	r3, r3, #1
 8006660:	18fb      	adds	r3, r7, r3
 8006662:	2217      	movs	r2, #23
 8006664:	701a      	strb	r2, [r3, #0]
 8006666:	e014      	b.n	8006692 <save_to_flash+0x1fa>
		configPage[te] = domainAdd[te - DOMAINSTART_ADD];
 8006668:	2087      	movs	r0, #135	; 0x87
 800666a:	0040      	lsls	r0, r0, #1
 800666c:	183b      	adds	r3, r7, r0
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	3b17      	subs	r3, #23
 8006672:	001a      	movs	r2, r3
 8006674:	183b      	adds	r3, r7, r0
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	4947      	ldr	r1, [pc, #284]	; (8006798 <save_to_flash+0x300>)
 800667a:	5c89      	ldrb	r1, [r1, r2]
 800667c:	4a3e      	ldr	r2, [pc, #248]	; (8006778 <save_to_flash+0x2e0>)
 800667e:	2488      	movs	r4, #136	; 0x88
 8006680:	0064      	lsls	r4, r4, #1
 8006682:	1912      	adds	r2, r2, r4
 8006684:	19d2      	adds	r2, r2, r7
 8006686:	54d1      	strb	r1, [r2, r3]
	for (uint8_t te = DOMAINSTART_ADD; te < DOMAINEND_ADD+1; te++) {
 8006688:	183b      	adds	r3, r7, r0
 800668a:	781a      	ldrb	r2, [r3, #0]
 800668c:	183b      	adds	r3, r7, r0
 800668e:	3201      	adds	r2, #1
 8006690:	701a      	strb	r2, [r3, #0]
 8006692:	2387      	movs	r3, #135	; 0x87
 8006694:	005b      	lsls	r3, r3, #1
 8006696:	18fb      	adds	r3, r7, r3
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	2b48      	cmp	r3, #72	; 0x48
 800669c:	d9e4      	bls.n	8006668 <save_to_flash+0x1d0>
	}
	//----------------------------------------


	//saving port from 73 - 78
	for (uint8_t te = PORTSTART_ADD; te < PORTEND_ADD+1; te++) {
 800669e:	230e      	movs	r3, #14
 80066a0:	33ff      	adds	r3, #255	; 0xff
 80066a2:	18fb      	adds	r3, r7, r3
 80066a4:	2249      	movs	r2, #73	; 0x49
 80066a6:	701a      	strb	r2, [r3, #0]
 80066a8:	e014      	b.n	80066d4 <save_to_flash+0x23c>
		configPage[te] = portAdd[te - PORTSTART_ADD];
 80066aa:	200e      	movs	r0, #14
 80066ac:	30ff      	adds	r0, #255	; 0xff
 80066ae:	183b      	adds	r3, r7, r0
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	3b49      	subs	r3, #73	; 0x49
 80066b4:	001a      	movs	r2, r3
 80066b6:	183b      	adds	r3, r7, r0
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	4938      	ldr	r1, [pc, #224]	; (800679c <save_to_flash+0x304>)
 80066bc:	5c89      	ldrb	r1, [r1, r2]
 80066be:	4a2e      	ldr	r2, [pc, #184]	; (8006778 <save_to_flash+0x2e0>)
 80066c0:	2488      	movs	r4, #136	; 0x88
 80066c2:	0064      	lsls	r4, r4, #1
 80066c4:	1912      	adds	r2, r2, r4
 80066c6:	19d2      	adds	r2, r2, r7
 80066c8:	54d1      	strb	r1, [r2, r3]
	for (uint8_t te = PORTSTART_ADD; te < PORTEND_ADD+1; te++) {
 80066ca:	183b      	adds	r3, r7, r0
 80066cc:	781a      	ldrb	r2, [r3, #0]
 80066ce:	183b      	adds	r3, r7, r0
 80066d0:	3201      	adds	r2, #1
 80066d2:	701a      	strb	r2, [r3, #0]
 80066d4:	230e      	movs	r3, #14
 80066d6:	33ff      	adds	r3, #255	; 0xff
 80066d8:	18fb      	adds	r3, r7, r3
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	2b4e      	cmp	r3, #78	; 0x4e
 80066de:	d9e4      	bls.n	80066aa <save_to_flash+0x212>
	}
	//-----------------------------------

	configPage[LDIA_ADD] = locationDataIntervalA;  //locationDataIntervalA = 5
 80066e0:	4b2f      	ldr	r3, [pc, #188]	; (80067a0 <save_to_flash+0x308>)
 80066e2:	7819      	ldrb	r1, [r3, #0]
 80066e4:	4b24      	ldr	r3, [pc, #144]	; (8006778 <save_to_flash+0x2e0>)
 80066e6:	2088      	movs	r0, #136	; 0x88
 80066e8:	0040      	lsls	r0, r0, #1
 80066ea:	181b      	adds	r3, r3, r0
 80066ec:	19db      	adds	r3, r3, r7
 80066ee:	224f      	movs	r2, #79	; 0x4f
 80066f0:	5499      	strb	r1, [r3, r2]
	configPage[LDIB_ADD] = locationDataIntervalB;  //locationDataIntervalB = 5
 80066f2:	4b2c      	ldr	r3, [pc, #176]	; (80067a4 <save_to_flash+0x30c>)
 80066f4:	7819      	ldrb	r1, [r3, #0]
 80066f6:	4b20      	ldr	r3, [pc, #128]	; (8006778 <save_to_flash+0x2e0>)
 80066f8:	181b      	adds	r3, r3, r0
 80066fa:	19db      	adds	r3, r3, r7
 80066fc:	2250      	movs	r2, #80	; 0x50
 80066fe:	5499      	strb	r1, [r3, r2]
	isAutoRst = autoRstValue;
 8006700:	4b29      	ldr	r3, [pc, #164]	; (80067a8 <save_to_flash+0x310>)
 8006702:	4a1a      	ldr	r2, [pc, #104]	; (800676c <save_to_flash+0x2d4>)
 8006704:	1812      	adds	r2, r2, r0
 8006706:	19d2      	adds	r2, r2, r7
 8006708:	7812      	ldrb	r2, [r2, #0]
 800670a:	701a      	strb	r2, [r3, #0]
	configPage[AUTORST_ADD] = isAutoRst; //isAutorst
 800670c:	4b26      	ldr	r3, [pc, #152]	; (80067a8 <save_to_flash+0x310>)
 800670e:	7819      	ldrb	r1, [r3, #0]
 8006710:	4b19      	ldr	r3, [pc, #100]	; (8006778 <save_to_flash+0x2e0>)
 8006712:	181b      	adds	r3, r3, r0
 8006714:	19db      	adds	r3, r3, r7
 8006716:	2251      	movs	r2, #81	; 0x51
 8006718:	5499      	strb	r1, [r3, r2]
	configPage[SMSACTIVE_ADD] = isSMSActive;
 800671a:	4b24      	ldr	r3, [pc, #144]	; (80067ac <save_to_flash+0x314>)
 800671c:	7819      	ldrb	r1, [r3, #0]
 800671e:	4b16      	ldr	r3, [pc, #88]	; (8006778 <save_to_flash+0x2e0>)
 8006720:	181b      	adds	r3, r3, r0
 8006722:	19db      	adds	r3, r3, r7
 8006724:	2252      	movs	r2, #82	; 0x52
 8006726:	5499      	strb	r1, [r3, r2]
	configPage[RELAYSTATE_ADD] = relayState;
 8006728:	4b21      	ldr	r3, [pc, #132]	; (80067b0 <save_to_flash+0x318>)
 800672a:	7819      	ldrb	r1, [r3, #0]
 800672c:	4b12      	ldr	r3, [pc, #72]	; (8006778 <save_to_flash+0x2e0>)
 800672e:	181b      	adds	r3, r3, r0
 8006730:	19db      	adds	r3, r3, r7
 8006732:	2253      	movs	r2, #83	; 0x53
 8006734:	5499      	strb	r1, [r3, r2]
	isFlash1 = 1;
 8006736:	4b1f      	ldr	r3, [pc, #124]	; (80067b4 <save_to_flash+0x31c>)
 8006738:	2201      	movs	r2, #1
 800673a:	701a      	strb	r2, [r3, #0]
	configPage[LASTPAGE_ADD] = isFlash1; //isflash1
 800673c:	4b1d      	ldr	r3, [pc, #116]	; (80067b4 <save_to_flash+0x31c>)
 800673e:	7819      	ldrb	r1, [r3, #0]
 8006740:	4b0d      	ldr	r3, [pc, #52]	; (8006778 <save_to_flash+0x2e0>)
 8006742:	181b      	adds	r3, r3, r0
 8006744:	19db      	adds	r3, r3, r7
 8006746:	22fa      	movs	r2, #250	; 0xfa
 8006748:	5499      	strb	r1, [r3, r2]
	W25qxx_WritePage(configPage, 0, 0, LASTPAGE_ADD+2);
 800674a:	2310      	movs	r3, #16
 800674c:	18f8      	adds	r0, r7, r3
 800674e:	23fc      	movs	r3, #252	; 0xfc
 8006750:	2200      	movs	r2, #0
 8006752:	2100      	movs	r1, #0
 8006754:	f002 fdf0 	bl	8009338 <W25qxx_WritePage>
	flashready = 1;
 8006758:	4b05      	ldr	r3, [pc, #20]	; (8006770 <save_to_flash+0x2d8>)
 800675a:	2201      	movs	r2, #1
 800675c:	701a      	strb	r2, [r3, #0]
	HAL_Delay(100);
 800675e:	2064      	movs	r0, #100	; 0x64
 8006760:	f003 f91a 	bl	8009998 <HAL_Delay>

}
 8006764:	46c0      	nop			; (mov r8, r8)
 8006766:	46bd      	mov	sp, r7
 8006768:	b045      	add	sp, #276	; 0x114
 800676a:	bd90      	pop	{r4, r7, pc}
 800676c:	fffffef7 	.word	0xfffffef7
 8006770:	20000d1c 	.word	0x20000d1c
 8006774:	20000738 	.word	0x20000738
 8006778:	ffffff00 	.word	0xffffff00
 800677c:	20000d18 	.word	0x20000d18
 8006780:	fffffefc 	.word	0xfffffefc
 8006784:	20000d14 	.word	0x20000d14
 8006788:	20000d1a 	.word	0x20000d1a
 800678c:	20000d16 	.word	0x20000d16
 8006790:	20000014 	.word	0x20000014
 8006794:	20000008 	.word	0x20000008
 8006798:	20000038 	.word	0x20000038
 800679c:	20000030 	.word	0x20000030
 80067a0:	20000004 	.word	0x20000004
 80067a4:	20000005 	.word	0x20000005
 80067a8:	2000073a 	.word	0x2000073a
 80067ac:	20000734 	.word	0x20000734
 80067b0:	20000724 	.word	0x20000724
 80067b4:	20000739 	.word	0x20000739

080067b8 <send_command>:

void send_command(char *command, uint16_t timeout, uint8_t caseId,
		uint8_t retryCount, uint8_t isReset) {
 80067b8:	b590      	push	{r4, r7, lr}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	000c      	movs	r4, r1
 80067c2:	0010      	movs	r0, r2
 80067c4:	0019      	movs	r1, r3
 80067c6:	1cbb      	adds	r3, r7, #2
 80067c8:	1c22      	adds	r2, r4, #0
 80067ca:	801a      	strh	r2, [r3, #0]
 80067cc:	1c7b      	adds	r3, r7, #1
 80067ce:	1c02      	adds	r2, r0, #0
 80067d0:	701a      	strb	r2, [r3, #0]
 80067d2:	003b      	movs	r3, r7
 80067d4:	1c0a      	adds	r2, r1, #0
 80067d6:	701a      	strb	r2, [r3, #0]
	uint8_t processComplete = 0, processCount = 0;
 80067d8:	230f      	movs	r3, #15
 80067da:	18fb      	adds	r3, r7, r3
 80067dc:	2200      	movs	r2, #0
 80067de:	701a      	strb	r2, [r3, #0]
 80067e0:	230e      	movs	r3, #14
 80067e2:	18fb      	adds	r3, r7, r3
 80067e4:	2200      	movs	r2, #0
 80067e6:	701a      	strb	r2, [r3, #0]
	uint16_t commandSize = 0;
 80067e8:	230c      	movs	r3, #12
 80067ea:	18fb      	adds	r3, r7, r3
 80067ec:	2200      	movs	r2, #0
 80067ee:	801a      	strh	r2, [r3, #0]
	uint16_t i = 0;
 80067f0:	230a      	movs	r3, #10
 80067f2:	18fb      	adds	r3, r7, r3
 80067f4:	2200      	movs	r2, #0
 80067f6:	801a      	strh	r2, [r3, #0]
	while (command[i] != NULL) {
 80067f8:	e00b      	b.n	8006812 <send_command+0x5a>
		commandSize++;
 80067fa:	210c      	movs	r1, #12
 80067fc:	187b      	adds	r3, r7, r1
 80067fe:	881a      	ldrh	r2, [r3, #0]
 8006800:	187b      	adds	r3, r7, r1
 8006802:	3201      	adds	r2, #1
 8006804:	801a      	strh	r2, [r3, #0]
		i++;
 8006806:	210a      	movs	r1, #10
 8006808:	187b      	adds	r3, r7, r1
 800680a:	881a      	ldrh	r2, [r3, #0]
 800680c:	187b      	adds	r3, r7, r1
 800680e:	3201      	adds	r2, #1
 8006810:	801a      	strh	r2, [r3, #0]
	while (command[i] != NULL) {
 8006812:	230a      	movs	r3, #10
 8006814:	18fb      	adds	r3, r7, r3
 8006816:	881b      	ldrh	r3, [r3, #0]
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	18d3      	adds	r3, r2, r3
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d1eb      	bne.n	80067fa <send_command+0x42>
	}
	while (processComplete == 0) {
 8006822:	e05a      	b.n	80068da <send_command+0x122>
		while (isBusy)
 8006824:	46c0      	nop			; (mov r8, r8)
 8006826:	4b32      	ldr	r3, [pc, #200]	; (80068f0 <send_command+0x138>)
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	b2db      	uxtb	r3, r3
 800682c:	2b00      	cmp	r3, #0
 800682e:	d1fa      	bne.n	8006826 <send_command+0x6e>
			;
		isBusy = 1;
 8006830:	4b2f      	ldr	r3, [pc, #188]	; (80068f0 <send_command+0x138>)
 8006832:	2201      	movs	r2, #1
 8006834:	701a      	strb	r2, [r3, #0]
		isResponseOk = 0;
 8006836:	4b2f      	ldr	r3, [pc, #188]	; (80068f4 <send_command+0x13c>)
 8006838:	2200      	movs	r2, #0
 800683a:	701a      	strb	r2, [r3, #0]
		commandCase = caseId;
 800683c:	4b2e      	ldr	r3, [pc, #184]	; (80068f8 <send_command+0x140>)
 800683e:	1c7a      	adds	r2, r7, #1
 8006840:	7812      	ldrb	r2, [r2, #0]
 8006842:	701a      	strb	r2, [r3, #0]
		isStart = 1;
 8006844:	4b2d      	ldr	r3, [pc, #180]	; (80068fc <send_command+0x144>)
 8006846:	2201      	movs	r2, #1
 8006848:	701a      	strb	r2, [r3, #0]
		recResponse = 0;
 800684a:	4b2d      	ldr	r3, [pc, #180]	; (8006900 <send_command+0x148>)
 800684c:	2200      	movs	r2, #0
 800684e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&AT_PORT, command, commandSize, 1000);
 8006850:	23fa      	movs	r3, #250	; 0xfa
 8006852:	009c      	lsls	r4, r3, #2
 8006854:	230c      	movs	r3, #12
 8006856:	18fb      	adds	r3, r7, r3
 8006858:	881a      	ldrh	r2, [r3, #0]
 800685a:	6879      	ldr	r1, [r7, #4]
 800685c:	4829      	ldr	r0, [pc, #164]	; (8006904 <send_command+0x14c>)
 800685e:	0023      	movs	r3, r4
 8006860:	f006 fad8 	bl	800ce14 <HAL_UART_Transmit>
		FIX_TIMER_TRIGGER(&htim6);
 8006864:	4b28      	ldr	r3, [pc, #160]	; (8006908 <send_command+0x150>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2202      	movs	r2, #2
 800686a:	4252      	negs	r2, r2
 800686c:	611a      	str	r2, [r3, #16]
		HAL_TIM_Base_Start_IT(&htim6);
 800686e:	4b26      	ldr	r3, [pc, #152]	; (8006908 <send_command+0x150>)
 8006870:	0018      	movs	r0, r3
 8006872:	f005 fac9 	bl	800be08 <HAL_TIM_Base_Start_IT>
		resTimeout = timeout; //300 ms
 8006876:	4b25      	ldr	r3, [pc, #148]	; (800690c <send_command+0x154>)
 8006878:	1cba      	adds	r2, r7, #2
 800687a:	8812      	ldrh	r2, [r2, #0]
 800687c:	801a      	strh	r2, [r3, #0]
		ab=5;
 800687e:	4b24      	ldr	r3, [pc, #144]	; (8006910 <send_command+0x158>)
 8006880:	2205      	movs	r2, #5
 8006882:	701a      	strb	r2, [r3, #0]
		while (isBusy)
 8006884:	46c0      	nop			; (mov r8, r8)
 8006886:	4b1a      	ldr	r3, [pc, #104]	; (80068f0 <send_command+0x138>)
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	b2db      	uxtb	r3, r3
 800688c:	2b00      	cmp	r3, #0
 800688e:	d1fa      	bne.n	8006886 <send_command+0xce>
			;
		commandCase = 0;
 8006890:	4b19      	ldr	r3, [pc, #100]	; (80068f8 <send_command+0x140>)
 8006892:	2200      	movs	r2, #0
 8006894:	701a      	strb	r2, [r3, #0]
		if (isResponseOk) {
 8006896:	4b17      	ldr	r3, [pc, #92]	; (80068f4 <send_command+0x13c>)
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	b2db      	uxtb	r3, r3
 800689c:	2b00      	cmp	r3, #0
 800689e:	d004      	beq.n	80068aa <send_command+0xf2>
			processComplete = 1;
 80068a0:	230f      	movs	r3, #15
 80068a2:	18fb      	adds	r3, r7, r3
 80068a4:	2201      	movs	r2, #1
 80068a6:	701a      	strb	r2, [r3, #0]
 80068a8:	e017      	b.n	80068da <send_command+0x122>
		} else {
			//printf("failed\n");
			processCount++;
 80068aa:	210e      	movs	r1, #14
 80068ac:	187b      	adds	r3, r7, r1
 80068ae:	781a      	ldrb	r2, [r3, #0]
 80068b0:	187b      	adds	r3, r7, r1
 80068b2:	3201      	adds	r2, #1
 80068b4:	701a      	strb	r2, [r3, #0]
			if (processCount > retryCount) {
 80068b6:	187a      	adds	r2, r7, r1
 80068b8:	003b      	movs	r3, r7
 80068ba:	7812      	ldrb	r2, [r2, #0]
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	429a      	cmp	r2, r3
 80068c0:	d907      	bls.n	80068d2 <send_command+0x11a>
				if (isReset == 1) {
 80068c2:	2320      	movs	r3, #32
 80068c4:	18fb      	adds	r3, r7, r3
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d10c      	bne.n	80068e6 <send_command+0x12e>
					rebootsystem();
 80068cc:	f7ff fddc 	bl	8006488 <rebootsystem>
				}
				break;
 80068d0:	e009      	b.n	80068e6 <send_command+0x12e>
			}
			HAL_Delay(5000);
 80068d2:	4b10      	ldr	r3, [pc, #64]	; (8006914 <send_command+0x15c>)
 80068d4:	0018      	movs	r0, r3
 80068d6:	f003 f85f 	bl	8009998 <HAL_Delay>
	while (processComplete == 0) {
 80068da:	230f      	movs	r3, #15
 80068dc:	18fb      	adds	r3, r7, r3
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d09f      	beq.n	8006824 <send_command+0x6c>
		}
	}
}
 80068e4:	e000      	b.n	80068e8 <send_command+0x130>
				break;
 80068e6:	46c0      	nop			; (mov r8, r8)
}
 80068e8:	46c0      	nop			; (mov r8, r8)
 80068ea:	46bd      	mov	sp, r7
 80068ec:	b005      	add	sp, #20
 80068ee:	bd90      	pop	{r4, r7, pc}
 80068f0:	20000879 	.word	0x20000879
 80068f4:	20000880 	.word	0x20000880
 80068f8:	2000087f 	.word	0x2000087f
 80068fc:	20000878 	.word	0x20000878
 8006900:	20000881 	.word	0x20000881
 8006904:	200004c8 	.word	0x200004c8
 8006908:	20000398 	.word	0x20000398
 800690c:	2000087c 	.word	0x2000087c
 8006910:	20000d1e 	.word	0x20000d1e
 8006914:	00001388 	.word	0x00001388

08006918 <quectel_init>:
void quectel_init() {
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af02      	add	r7, sp, #8
	// printf("--Sending AT-- \n");
	send_command("AT\r\n", 3, 1, 1, 1);
 800691e:	4823      	ldr	r0, [pc, #140]	; (80069ac <quectel_init+0x94>)
 8006920:	2301      	movs	r3, #1
 8006922:	9300      	str	r3, [sp, #0]
 8006924:	2301      	movs	r3, #1
 8006926:	2201      	movs	r2, #1
 8006928:	2103      	movs	r1, #3
 800692a:	f7ff ff45 	bl	80067b8 <send_command>
	ab = 2;
 800692e:	4b20      	ldr	r3, [pc, #128]	; (80069b0 <quectel_init+0x98>)
 8006930:	2202      	movs	r2, #2
 8006932:	701a      	strb	r2, [r3, #0]
	send_command("AT+CBC\r\n", 4, 8, 3, 1);//get voltage of vbatt
 8006934:	481f      	ldr	r0, [pc, #124]	; (80069b4 <quectel_init+0x9c>)
 8006936:	2301      	movs	r3, #1
 8006938:	9300      	str	r3, [sp, #0]
 800693a:	2303      	movs	r3, #3
 800693c:	2208      	movs	r2, #8
 800693e:	2104      	movs	r1, #4
 8006940:	f7ff ff3a 	bl	80067b8 <send_command>


	// printf("--sending AT+QIURC=1--\n");
	// send_command("AT+QIURC=1\r\n", 3, 1, 1,1);
	// printf("--Sending AT+CPIN-- \n");
	send_command("AT+CPIN?\r\n", 51, 2, 2, 1);
 8006944:	481c      	ldr	r0, [pc, #112]	; (80069b8 <quectel_init+0xa0>)
 8006946:	2301      	movs	r3, #1
 8006948:	9300      	str	r3, [sp, #0]
 800694a:	2302      	movs	r3, #2
 800694c:	2202      	movs	r2, #2
 800694e:	2133      	movs	r1, #51	; 0x33
 8006950:	f7ff ff32 	bl	80067b8 <send_command>
	ab = 3;
 8006954:	4b16      	ldr	r3, [pc, #88]	; (80069b0 <quectel_init+0x98>)
 8006956:	2203      	movs	r2, #3
 8006958:	701a      	strb	r2, [r3, #0]
	// printf("--Sending AT+CREG?-- \n");
	// send_command("AT+CREG?\r\n",3,3,5,1);
	// printf("--Sending AT+CGREG?-- \n");
	// send_command("AT+CGREG?\r\n",3,3,3,1);
	// printf("--Sending AT+CMGF=1-- \n");
	send_command("AT+CMGF=1\r\n", 3, 1, 3, 1);
 800695a:	4818      	ldr	r0, [pc, #96]	; (80069bc <quectel_init+0xa4>)
 800695c:	2301      	movs	r3, #1
 800695e:	9300      	str	r3, [sp, #0]
 8006960:	2303      	movs	r3, #3
 8006962:	2201      	movs	r2, #1
 8006964:	2103      	movs	r1, #3
 8006966:	f7ff ff27 	bl	80067b8 <send_command>
	ab = 4;
 800696a:	4b11      	ldr	r3, [pc, #68]	; (80069b0 <quectel_init+0x98>)
 800696c:	2204      	movs	r2, #4
 800696e:	701a      	strb	r2, [r3, #0]

	// printf("--Sending AT+CNMI=2,2-- \n");
	send_command("AT+CNMI=2,2\r\n", 3, 1, 3, 1);
 8006970:	4813      	ldr	r0, [pc, #76]	; (80069c0 <quectel_init+0xa8>)
 8006972:	2301      	movs	r3, #1
 8006974:	9300      	str	r3, [sp, #0]
 8006976:	2303      	movs	r3, #3
 8006978:	2201      	movs	r2, #1
 800697a:	2103      	movs	r1, #3
 800697c:	f7ff ff1c 	bl	80067b8 <send_command>
	ab = 5;
 8006980:	4b0b      	ldr	r3, [pc, #44]	; (80069b0 <quectel_init+0x98>)
 8006982:	2205      	movs	r2, #5
 8006984:	701a      	strb	r2, [r3, #0]

	// printf("--Sending AT+CGSN--\r\n \n");
	send_command("AT+CGSN\r\n", 3, 4, 2, 1);
 8006986:	480f      	ldr	r0, [pc, #60]	; (80069c4 <quectel_init+0xac>)
 8006988:	2301      	movs	r3, #1
 800698a:	9300      	str	r3, [sp, #0]
 800698c:	2302      	movs	r3, #2
 800698e:	2204      	movs	r2, #4
 8006990:	2103      	movs	r1, #3
 8006992:	f7ff ff11 	bl	80067b8 <send_command>
	send_command("AT+QMGDA=\"DEL ALL\"\r\n", 50, 1, 0, 0);
 8006996:	480c      	ldr	r0, [pc, #48]	; (80069c8 <quectel_init+0xb0>)
 8006998:	2300      	movs	r3, #0
 800699a:	9300      	str	r3, [sp, #0]
 800699c:	2300      	movs	r3, #0
 800699e:	2201      	movs	r2, #1
 80069a0:	2132      	movs	r1, #50	; 0x32
 80069a2:	f7ff ff09 	bl	80067b8 <send_command>

}
 80069a6:	46c0      	nop			; (mov r8, r8)
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	08013264 	.word	0x08013264
 80069b0:	20000d1e 	.word	0x20000d1e
 80069b4:	0801326c 	.word	0x0801326c
 80069b8:	08013278 	.word	0x08013278
 80069bc:	08013284 	.word	0x08013284
 80069c0:	08013290 	.word	0x08013290
 80069c4:	080132a0 	.word	0x080132a0
 80069c8:	080132ac 	.word	0x080132ac

080069cc <estabilish_tcp>:

uint8_t estabilish_tcp() {
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b082      	sub	sp, #8
 80069d0:	af02      	add	r7, sp, #8
	// HAL_UART_Transmit(&huart4, "est tcp",
	// sizeof("est tcp"), 100);
	send_command("+++", 10, 1, 0, 0);
 80069d2:	4853      	ldr	r0, [pc, #332]	; (8006b20 <estabilish_tcp+0x154>)
 80069d4:	2300      	movs	r3, #0
 80069d6:	9300      	str	r3, [sp, #0]
 80069d8:	2300      	movs	r3, #0
 80069da:	2201      	movs	r2, #1
 80069dc:	210a      	movs	r1, #10
 80069de:	f7ff feeb 	bl	80067b8 <send_command>
	memset(tcpCommand, 0, sizeof(tcpCommand));
 80069e2:	4b50      	ldr	r3, [pc, #320]	; (8006b24 <estabilish_tcp+0x158>)
 80069e4:	2232      	movs	r2, #50	; 0x32
 80069e6:	2100      	movs	r1, #0
 80069e8:	0018      	movs	r0, r3
 80069ea:	f008 f96e 	bl	800ecca <memset>
	strcat(tcpCommand, "AT+QIOPEN=\"TCP\",\"");
 80069ee:	4b4d      	ldr	r3, [pc, #308]	; (8006b24 <estabilish_tcp+0x158>)
 80069f0:	0018      	movs	r0, r3
 80069f2:	f7f9 fb8f 	bl	8000114 <strlen>
 80069f6:	0003      	movs	r3, r0
 80069f8:	001a      	movs	r2, r3
 80069fa:	4b4a      	ldr	r3, [pc, #296]	; (8006b24 <estabilish_tcp+0x158>)
 80069fc:	18d2      	adds	r2, r2, r3
 80069fe:	4b4a      	ldr	r3, [pc, #296]	; (8006b28 <estabilish_tcp+0x15c>)
 8006a00:	0010      	movs	r0, r2
 8006a02:	0019      	movs	r1, r3
 8006a04:	2312      	movs	r3, #18
 8006a06:	001a      	movs	r2, r3
 8006a08:	f008 f956 	bl	800ecb8 <memcpy>
	strcat(tcpCommand, domainAdd);
 8006a0c:	4a47      	ldr	r2, [pc, #284]	; (8006b2c <estabilish_tcp+0x160>)
 8006a0e:	4b45      	ldr	r3, [pc, #276]	; (8006b24 <estabilish_tcp+0x158>)
 8006a10:	0011      	movs	r1, r2
 8006a12:	0018      	movs	r0, r3
 8006a14:	f008 f982 	bl	800ed1c <strcat>
	strcat(tcpCommand, "\",");
 8006a18:	4b42      	ldr	r3, [pc, #264]	; (8006b24 <estabilish_tcp+0x158>)
 8006a1a:	0018      	movs	r0, r3
 8006a1c:	f7f9 fb7a 	bl	8000114 <strlen>
 8006a20:	0003      	movs	r3, r0
 8006a22:	001a      	movs	r2, r3
 8006a24:	4b3f      	ldr	r3, [pc, #252]	; (8006b24 <estabilish_tcp+0x158>)
 8006a26:	18d2      	adds	r2, r2, r3
 8006a28:	4b41      	ldr	r3, [pc, #260]	; (8006b30 <estabilish_tcp+0x164>)
 8006a2a:	0010      	movs	r0, r2
 8006a2c:	0019      	movs	r1, r3
 8006a2e:	2303      	movs	r3, #3
 8006a30:	001a      	movs	r2, r3
 8006a32:	f008 f941 	bl	800ecb8 <memcpy>
	strcat(tcpCommand, portAdd);
 8006a36:	4a3f      	ldr	r2, [pc, #252]	; (8006b34 <estabilish_tcp+0x168>)
 8006a38:	4b3a      	ldr	r3, [pc, #232]	; (8006b24 <estabilish_tcp+0x158>)
 8006a3a:	0011      	movs	r1, r2
 8006a3c:	0018      	movs	r0, r3
 8006a3e:	f008 f96d 	bl	800ed1c <strcat>
	strcat(tcpCommand, "\r\n");
 8006a42:	4b38      	ldr	r3, [pc, #224]	; (8006b24 <estabilish_tcp+0x158>)
 8006a44:	0018      	movs	r0, r3
 8006a46:	f7f9 fb65 	bl	8000114 <strlen>
 8006a4a:	0003      	movs	r3, r0
 8006a4c:	001a      	movs	r2, r3
 8006a4e:	4b35      	ldr	r3, [pc, #212]	; (8006b24 <estabilish_tcp+0x158>)
 8006a50:	18d2      	adds	r2, r2, r3
 8006a52:	4b39      	ldr	r3, [pc, #228]	; (8006b38 <estabilish_tcp+0x16c>)
 8006a54:	0010      	movs	r0, r2
 8006a56:	0019      	movs	r1, r3
 8006a58:	2303      	movs	r3, #3
 8006a5a:	001a      	movs	r2, r3
 8006a5c:	f008 f92c 	bl	800ecb8 <memcpy>
	// printf("--Sent AT+QIDEACT \n");
	send_command("AT+QIDEACT\r\n", 401, 1, 2, 0);
 8006a60:	2392      	movs	r3, #146	; 0x92
 8006a62:	33ff      	adds	r3, #255	; 0xff
 8006a64:	0019      	movs	r1, r3
 8006a66:	4835      	ldr	r0, [pc, #212]	; (8006b3c <estabilish_tcp+0x170>)
 8006a68:	2300      	movs	r3, #0
 8006a6a:	9300      	str	r3, [sp, #0]
 8006a6c:	2302      	movs	r3, #2
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f7ff fea2 	bl	80067b8 <send_command>

	if (isResponseOk == 0) {
 8006a74:	4b32      	ldr	r3, [pc, #200]	; (8006b40 <estabilish_tcp+0x174>)
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d101      	bne.n	8006a82 <estabilish_tcp+0xb6>
		return 0;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	e04b      	b.n	8006b1a <estabilish_tcp+0x14e>
	}
	send_command("AT+QIMODE=1\r\n", 3, 1, 3, 0);
 8006a82:	4830      	ldr	r0, [pc, #192]	; (8006b44 <estabilish_tcp+0x178>)
 8006a84:	2300      	movs	r3, #0
 8006a86:	9300      	str	r3, [sp, #0]
 8006a88:	2303      	movs	r3, #3
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	2103      	movs	r1, #3
 8006a8e:	f7ff fe93 	bl	80067b8 <send_command>
	if (isResponseOk == 0) {
 8006a92:	4b2b      	ldr	r3, [pc, #172]	; (8006b40 <estabilish_tcp+0x174>)
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d101      	bne.n	8006aa0 <estabilish_tcp+0xd4>
		return 0;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	e03c      	b.n	8006b1a <estabilish_tcp+0x14e>
	}
	send_command("AT+QITCFG=3,2,512,1\r\n", 3, 1, 1, 0);
 8006aa0:	4829      	ldr	r0, [pc, #164]	; (8006b48 <estabilish_tcp+0x17c>)
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	9300      	str	r3, [sp, #0]
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	2103      	movs	r1, #3
 8006aac:	f7ff fe84 	bl	80067b8 <send_command>
	if (isResponseOk == 0) {
 8006ab0:	4b23      	ldr	r3, [pc, #140]	; (8006b40 <estabilish_tcp+0x174>)
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d101      	bne.n	8006abe <estabilish_tcp+0xf2>
		return 0;
 8006aba:	2300      	movs	r3, #0
 8006abc:	e02d      	b.n	8006b1a <estabilish_tcp+0x14e>
	}
	send_command("AT+QIREGAPP=\"network\",\"\",\"\"\r\n", 3, 1, 1, 0);
 8006abe:	4823      	ldr	r0, [pc, #140]	; (8006b4c <estabilish_tcp+0x180>)
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	9300      	str	r3, [sp, #0]
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	2103      	movs	r1, #3
 8006aca:	f7ff fe75 	bl	80067b8 <send_command>
	if (isResponseOk == 0) {
 8006ace:	4b1c      	ldr	r3, [pc, #112]	; (8006b40 <estabilish_tcp+0x174>)
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d101      	bne.n	8006adc <estabilish_tcp+0x110>
		return 0;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	e01e      	b.n	8006b1a <estabilish_tcp+0x14e>
	}
	send_command("AT+QIACT\r\n", 1510, 1, 0, 0);
 8006adc:	491c      	ldr	r1, [pc, #112]	; (8006b50 <estabilish_tcp+0x184>)
 8006ade:	481d      	ldr	r0, [pc, #116]	; (8006b54 <estabilish_tcp+0x188>)
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	9300      	str	r3, [sp, #0]
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f7ff fe66 	bl	80067b8 <send_command>
	if (isResponseOk == 0) {
 8006aec:	4b14      	ldr	r3, [pc, #80]	; (8006b40 <estabilish_tcp+0x174>)
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d101      	bne.n	8006afa <estabilish_tcp+0x12e>
		return 0;
 8006af6:	2300      	movs	r3, #0
 8006af8:	e00f      	b.n	8006b1a <estabilish_tcp+0x14e>
	}
	// HAL_UART_Transmit(&huart4, "S qiopen", sizeof("S qiopen"), 100);

	send_command(tcpCommand, 751, 5, 2, 0);
 8006afa:	4917      	ldr	r1, [pc, #92]	; (8006b58 <estabilish_tcp+0x18c>)
 8006afc:	4809      	ldr	r0, [pc, #36]	; (8006b24 <estabilish_tcp+0x158>)
 8006afe:	2300      	movs	r3, #0
 8006b00:	9300      	str	r3, [sp, #0]
 8006b02:	2302      	movs	r3, #2
 8006b04:	2205      	movs	r2, #5
 8006b06:	f7ff fe57 	bl	80067b8 <send_command>
	if (isResponseOk == 1) {
 8006b0a:	4b0d      	ldr	r3, [pc, #52]	; (8006b40 <estabilish_tcp+0x174>)
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d101      	bne.n	8006b18 <estabilish_tcp+0x14c>
		return 1;
 8006b14:	2301      	movs	r3, #1
 8006b16:	e000      	b.n	8006b1a <estabilish_tcp+0x14e>
	} else {
		return 0;
 8006b18:	2300      	movs	r3, #0
	}
}
 8006b1a:	0018      	movs	r0, r3
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	080132c4 	.word	0x080132c4
 8006b24:	200008a4 	.word	0x200008a4
 8006b28:	080132c8 	.word	0x080132c8
 8006b2c:	20000038 	.word	0x20000038
 8006b30:	080132dc 	.word	0x080132dc
 8006b34:	20000030 	.word	0x20000030
 8006b38:	080132e0 	.word	0x080132e0
 8006b3c:	080132e4 	.word	0x080132e4
 8006b40:	20000880 	.word	0x20000880
 8006b44:	080132f4 	.word	0x080132f4
 8006b48:	08013304 	.word	0x08013304
 8006b4c:	0801331c 	.word	0x0801331c
 8006b50:	000005e6 	.word	0x000005e6
 8006b54:	0801333c 	.word	0x0801333c
 8006b58:	000002ef 	.word	0x000002ef

08006b5c <GetCrc16>:

uint16_t GetCrc16(const uint8_t *pData, int nLength) {
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
	uint16_t fcs = 0xffff; // initialization
 8006b66:	230e      	movs	r3, #14
 8006b68:	18fb      	adds	r3, r7, r3
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	4252      	negs	r2, r2
 8006b6e:	801a      	strh	r2, [r3, #0]
	int a = 0;
 8006b70:	2300      	movs	r3, #0
 8006b72:	60bb      	str	r3, [r7, #8]
	while (nLength > 0) {
 8006b74:	e019      	b.n	8006baa <GetCrc16+0x4e>
		a = (fcs ^ *pData) & 0xff;
 8006b76:	200e      	movs	r0, #14
 8006b78:	183b      	adds	r3, r7, r0
 8006b7a:	881b      	ldrh	r3, [r3, #0]
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	7812      	ldrb	r2, [r2, #0]
 8006b80:	4053      	eors	r3, r2
 8006b82:	22ff      	movs	r2, #255	; 0xff
 8006b84:	4013      	ands	r3, r2
 8006b86:	60bb      	str	r3, [r7, #8]
		fcs = (fcs >> 8) ^ crctab16[a];
 8006b88:	183b      	adds	r3, r7, r0
 8006b8a:	881b      	ldrh	r3, [r3, #0]
 8006b8c:	0a1b      	lsrs	r3, r3, #8
 8006b8e:	b299      	uxth	r1, r3
 8006b90:	4b0c      	ldr	r3, [pc, #48]	; (8006bc4 <GetCrc16+0x68>)
 8006b92:	68ba      	ldr	r2, [r7, #8]
 8006b94:	0052      	lsls	r2, r2, #1
 8006b96:	5ad2      	ldrh	r2, [r2, r3]
 8006b98:	183b      	adds	r3, r7, r0
 8006b9a:	404a      	eors	r2, r1
 8006b9c:	801a      	strh	r2, [r3, #0]
		nLength--;
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	3b01      	subs	r3, #1
 8006ba2:	603b      	str	r3, [r7, #0]
		pData++;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	607b      	str	r3, [r7, #4]
	while (nLength > 0) {
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	dce2      	bgt.n	8006b76 <GetCrc16+0x1a>
	}
	return ~fcs; // negated
 8006bb0:	230e      	movs	r3, #14
 8006bb2:	18fb      	adds	r3, r7, r3
 8006bb4:	881b      	ldrh	r3, [r3, #0]
 8006bb6:	43db      	mvns	r3, r3
 8006bb8:	b29b      	uxth	r3, r3
}
 8006bba:	0018      	movs	r0, r3
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	b004      	add	sp, #16
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	46c0      	nop			; (mov r8, r8)
 8006bc4:	080133f0 	.word	0x080133f0

08006bc8 <where_api_handler>:

void where_api_handler() {
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b082      	sub	sp, #8
 8006bcc:	af02      	add	r7, sp, #8
	if (isWhereApiCalled == 1) {
 8006bce:	4b17      	ldr	r3, [pc, #92]	; (8006c2c <where_api_handler+0x64>)
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d111      	bne.n	8006bfa <where_api_handler+0x32>
		// printf("--Sending AT+CREG?-- \n");
		// HAL_UART_Transmit(&huart4, "S creg in api", sizeof("S creg in api"),
		// 100);
		send_command("AT+CREG?\r\n", 3, 3, 3, 1);
 8006bd6:	4816      	ldr	r0, [pc, #88]	; (8006c30 <where_api_handler+0x68>)
 8006bd8:	2301      	movs	r3, #1
 8006bda:	9300      	str	r3, [sp, #0]
 8006bdc:	2303      	movs	r3, #3
 8006bde:	2203      	movs	r2, #3
 8006be0:	2103      	movs	r1, #3
 8006be2:	f7ff fde9 	bl	80067b8 <send_command>
		if (isReg == 1) {
 8006be6:	4b13      	ldr	r3, [pc, #76]	; (8006c34 <where_api_handler+0x6c>)
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d11a      	bne.n	8006c24 <where_api_handler+0x5c>
			send_current_location_via_sms(); //sending current location
 8006bee:	f000 fe7d 	bl	80078ec <send_current_location_via_sms>
			isWhereApiCalled = 0;
 8006bf2:	4b0e      	ldr	r3, [pc, #56]	; (8006c2c <where_api_handler+0x64>)
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	701a      	strb	r2, [r3, #0]
		if (isReg == 1) {
			send_imei_via_sms(); //sending current location
			isIMEIApiCalled = 0;
		}
	}
}
 8006bf8:	e014      	b.n	8006c24 <where_api_handler+0x5c>
	}else if (isIMEIApiCalled == 1) {
 8006bfa:	4b0f      	ldr	r3, [pc, #60]	; (8006c38 <where_api_handler+0x70>)
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d110      	bne.n	8006c24 <where_api_handler+0x5c>
		send_command("AT+CREG?\r\n", 3, 3, 3, 1);
 8006c02:	480b      	ldr	r0, [pc, #44]	; (8006c30 <where_api_handler+0x68>)
 8006c04:	2301      	movs	r3, #1
 8006c06:	9300      	str	r3, [sp, #0]
 8006c08:	2303      	movs	r3, #3
 8006c0a:	2203      	movs	r2, #3
 8006c0c:	2103      	movs	r1, #3
 8006c0e:	f7ff fdd3 	bl	80067b8 <send_command>
		if (isReg == 1) {
 8006c12:	4b08      	ldr	r3, [pc, #32]	; (8006c34 <where_api_handler+0x6c>)
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d104      	bne.n	8006c24 <where_api_handler+0x5c>
			send_imei_via_sms(); //sending current location
 8006c1a:	f000 fdef 	bl	80077fc <send_imei_via_sms>
			isIMEIApiCalled = 0;
 8006c1e:	4b06      	ldr	r3, [pc, #24]	; (8006c38 <where_api_handler+0x70>)
 8006c20:	2200      	movs	r2, #0
 8006c22:	701a      	strb	r2, [r3, #0]
}
 8006c24:	46c0      	nop			; (mov r8, r8)
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	46c0      	nop			; (mov r8, r8)
 8006c2c:	20000a2e 	.word	0x20000a2e
 8006c30:	08013170 	.word	0x08013170
 8006c34:	20000a2d 	.word	0x20000a2d
 8006c38:	20000a2f 	.word	0x20000a2f

08006c3c <alarm_sender>:
void alarm_sender(){
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	af00      	add	r7, sp, #0
	if(isAlarm){
 8006c40:	4b0b      	ldr	r3, [pc, #44]	; (8006c70 <alarm_sender+0x34>)
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d00f      	beq.n	8006c6a <alarm_sender+0x2e>
		if (isReg == 1) {
 8006c4a:	4b0a      	ldr	r3, [pc, #40]	; (8006c74 <alarm_sender+0x38>)
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d105      	bne.n	8006c5e <alarm_sender+0x22>
			send_alarm_packet_via_sms();
 8006c52:	f001 f833 	bl	8007cbc <send_alarm_packet_via_sms>
			isAlarm = 0;
 8006c56:	4b06      	ldr	r3, [pc, #24]	; (8006c70 <alarm_sender+0x34>)
 8006c58:	2200      	movs	r2, #0
 8006c5a:	701a      	strb	r2, [r3, #0]
			saveAlarm=1;
			isAlarm=0;
		}

	}
}
 8006c5c:	e005      	b.n	8006c6a <alarm_sender+0x2e>
			saveAlarm=1;
 8006c5e:	4b06      	ldr	r3, [pc, #24]	; (8006c78 <alarm_sender+0x3c>)
 8006c60:	2201      	movs	r2, #1
 8006c62:	701a      	strb	r2, [r3, #0]
			isAlarm=0;
 8006c64:	4b02      	ldr	r3, [pc, #8]	; (8006c70 <alarm_sender+0x34>)
 8006c66:	2200      	movs	r2, #0
 8006c68:	701a      	strb	r2, [r3, #0]
}
 8006c6a:	46c0      	nop			; (mov r8, r8)
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}
 8006c70:	20000725 	.word	0x20000725
 8006c74:	20000a2d 	.word	0x20000a2d
 8006c78:	2000072a 	.word	0x2000072a

08006c7c <clearit>:

void clearit() {
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	af00      	add	r7, sp, #0
	resTimeout = 3;
 8006c80:	4b0e      	ldr	r3, [pc, #56]	; (8006cbc <clearit+0x40>)
 8006c82:	2203      	movs	r2, #3
 8006c84:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim6);
 8006c86:	4b0e      	ldr	r3, [pc, #56]	; (8006cc0 <clearit+0x44>)
 8006c88:	0018      	movs	r0, r3
 8006c8a:	f005 f913 	bl	800beb4 <HAL_TIM_Base_Stop_IT>
	memset(responseBuffer, 0, sizeof(responseBuffer));
 8006c8e:	2396      	movs	r3, #150	; 0x96
 8006c90:	005a      	lsls	r2, r3, #1
 8006c92:	4b0c      	ldr	r3, [pc, #48]	; (8006cc4 <clearit+0x48>)
 8006c94:	2100      	movs	r1, #0
 8006c96:	0018      	movs	r0, r3
 8006c98:	f008 f817 	bl	800ecca <memset>
	lineCount = 0;
 8006c9c:	4b0a      	ldr	r3, [pc, #40]	; (8006cc8 <clearit+0x4c>)
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	701a      	strb	r2, [r3, #0]
	charCount = 0;
 8006ca2:	4b0a      	ldr	r3, [pc, #40]	; (8006ccc <clearit+0x50>)
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	701a      	strb	r2, [r3, #0]
	isStart = 0;
 8006ca8:	4b09      	ldr	r3, [pc, #36]	; (8006cd0 <clearit+0x54>)
 8006caa:	2200      	movs	r2, #0
 8006cac:	701a      	strb	r2, [r3, #0]
	isBusy = 0;
 8006cae:	4b09      	ldr	r3, [pc, #36]	; (8006cd4 <clearit+0x58>)
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	701a      	strb	r2, [r3, #0]

}
 8006cb4:	46c0      	nop			; (mov r8, r8)
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	46c0      	nop			; (mov r8, r8)
 8006cbc:	2000087c 	.word	0x2000087c
 8006cc0:	20000398 	.word	0x20000398
 8006cc4:	20000748 	.word	0x20000748
 8006cc8:	20000874 	.word	0x20000874
 8006ccc:	20000875 	.word	0x20000875
 8006cd0:	20000878 	.word	0x20000878
 8006cd4:	20000879 	.word	0x20000879

08006cd8 <incoming_msg_handler>:

void incoming_msg_handler() {
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af02      	add	r7, sp, #8
	if (isPulse == 1) {
 8006cde:	4b26      	ldr	r3, [pc, #152]	; (8006d78 <incoming_msg_handler+0xa0>)
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d144      	bne.n	8006d72 <incoming_msg_handler+0x9a>
		isPulse = 0;
 8006ce8:	4b23      	ldr	r3, [pc, #140]	; (8006d78 <incoming_msg_handler+0xa0>)
 8006cea:	2200      	movs	r2, #0
 8006cec:	701a      	strb	r2, [r3, #0]
		//printf("--Sending +++-- \n");
		//HAL_UART_Transmit(&huart4, "S +++ incom", sizeof("S +++ incom"), 100);
		send_command("+++", 10, 1, 0, 0);
 8006cee:	4823      	ldr	r0, [pc, #140]	; (8006d7c <incoming_msg_handler+0xa4>)
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	9300      	str	r3, [sp, #0]
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	210a      	movs	r1, #10
 8006cfa:	f7ff fd5d 	bl	80067b8 <send_command>
		isDataMode = 0;
 8006cfe:	4b20      	ldr	r3, [pc, #128]	; (8006d80 <incoming_msg_handler+0xa8>)
 8006d00:	2200      	movs	r2, #0
 8006d02:	701a      	strb	r2, [r3, #0]
		indicationCounter = 0;
 8006d04:	4b1f      	ldr	r3, [pc, #124]	; (8006d84 <incoming_msg_handler+0xac>)
 8006d06:	2200      	movs	r2, #0
 8006d08:	701a      	strb	r2, [r3, #0]
		while (indicationCounter < 5)
 8006d0a:	46c0      	nop			; (mov r8, r8)
 8006d0c:	4b1d      	ldr	r3, [pc, #116]	; (8006d84 <incoming_msg_handler+0xac>)
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	2b04      	cmp	r3, #4
 8006d12:	d9fb      	bls.n	8006d0c <incoming_msg_handler+0x34>
			;
		where_api_handler();
 8006d14:	f7ff ff58 	bl	8006bc8 <where_api_handler>
		//HAL_UART_Transmit(&huart4, "S msg del", sizeof("S msg del"), 100);
		send_command("AT+QMGDA=\"DEL ALL\"\r\n", 50, 1, 0, 0);
 8006d18:	481b      	ldr	r0, [pc, #108]	; (8006d88 <incoming_msg_handler+0xb0>)
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	9300      	str	r3, [sp, #0]
 8006d1e:	2300      	movs	r3, #0
 8006d20:	2201      	movs	r2, #1
 8006d22:	2132      	movs	r1, #50	; 0x32
 8006d24:	f7ff fd48 	bl	80067b8 <send_command>
		msgcleared = 0;
 8006d28:	4b18      	ldr	r3, [pc, #96]	; (8006d8c <incoming_msg_handler+0xb4>)
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	701a      	strb	r2, [r3, #0]
		if (isResponseOk == 1) {
 8006d2e:	4b18      	ldr	r3, [pc, #96]	; (8006d90 <incoming_msg_handler+0xb8>)
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d102      	bne.n	8006d3e <incoming_msg_handler+0x66>
			msgcleared = 1;
 8006d38:	4b14      	ldr	r3, [pc, #80]	; (8006d8c <incoming_msg_handler+0xb4>)
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	701a      	strb	r2, [r3, #0]
		}
		//printf("--Sending ATO-- \n");
		send_command("ATO\r\n", 10, 6, 0, 0);
 8006d3e:	4815      	ldr	r0, [pc, #84]	; (8006d94 <incoming_msg_handler+0xbc>)
 8006d40:	2300      	movs	r3, #0
 8006d42:	9300      	str	r3, [sp, #0]
 8006d44:	2300      	movs	r3, #0
 8006d46:	2206      	movs	r2, #6
 8006d48:	210a      	movs	r1, #10
 8006d4a:	f7ff fd35 	bl	80067b8 <send_command>
		if (isResponseOk == 1) {
 8006d4e:	4b10      	ldr	r3, [pc, #64]	; (8006d90 <incoming_msg_handler+0xb8>)
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d103      	bne.n	8006d60 <incoming_msg_handler+0x88>
			isDataMode = 1;
 8006d58:	4b09      	ldr	r3, [pc, #36]	; (8006d80 <incoming_msg_handler+0xa8>)
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	701a      	strb	r2, [r3, #0]
			isDataMode = 0;
			isTcpOpen = 0;
		}
	}

}
 8006d5e:	e008      	b.n	8006d72 <incoming_msg_handler+0x9a>
			isLoggedIn = 0;
 8006d60:	4b0d      	ldr	r3, [pc, #52]	; (8006d98 <incoming_msg_handler+0xc0>)
 8006d62:	2200      	movs	r2, #0
 8006d64:	701a      	strb	r2, [r3, #0]
			isDataMode = 0;
 8006d66:	4b06      	ldr	r3, [pc, #24]	; (8006d80 <incoming_msg_handler+0xa8>)
 8006d68:	2200      	movs	r2, #0
 8006d6a:	701a      	strb	r2, [r3, #0]
			isTcpOpen = 0;
 8006d6c:	4b0b      	ldr	r3, [pc, #44]	; (8006d9c <incoming_msg_handler+0xc4>)
 8006d6e:	2200      	movs	r2, #0
 8006d70:	701a      	strb	r2, [r3, #0]
}
 8006d72:	46c0      	nop			; (mov r8, r8)
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}
 8006d78:	2000073d 	.word	0x2000073d
 8006d7c:	080132c4 	.word	0x080132c4
 8006d80:	2000087a 	.word	0x2000087a
 8006d84:	20000735 	.word	0x20000735
 8006d88:	080132ac 	.word	0x080132ac
 8006d8c:	200008a0 	.word	0x200008a0
 8006d90:	20000880 	.word	0x20000880
 8006d94:	08013348 	.word	0x08013348
 8006d98:	20000a30 	.word	0x20000a30
 8006d9c:	20000a2c 	.word	0x20000a2c

08006da0 <send_login_packet>:

void send_login_packet() {
 8006da0:	b5b0      	push	{r4, r5, r7, lr}
 8006da2:	b086      	sub	sp, #24
 8006da4:	af00      	add	r7, sp, #0
	if (isTcpOpen == 1 && isDataMode == 1) {
 8006da6:	4b39      	ldr	r3, [pc, #228]	; (8006e8c <send_login_packet+0xec>)
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d169      	bne.n	8006e84 <send_login_packet+0xe4>
 8006db0:	4b37      	ldr	r3, [pc, #220]	; (8006e90 <send_login_packet+0xf0>)
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d164      	bne.n	8006e84 <send_login_packet+0xe4>
		for (uint8_t i = 0; i < 8; i++) {
 8006dba:	2317      	movs	r3, #23
 8006dbc:	18fb      	adds	r3, r7, r3
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	701a      	strb	r2, [r3, #0]
 8006dc2:	e00e      	b.n	8006de2 <send_login_packet+0x42>
			loginPacket[i + 4] = imei[i];
 8006dc4:	2017      	movs	r0, #23
 8006dc6:	183b      	adds	r3, r7, r0
 8006dc8:	781a      	ldrb	r2, [r3, #0]
 8006dca:	183b      	adds	r3, r7, r0
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	3304      	adds	r3, #4
 8006dd0:	4930      	ldr	r1, [pc, #192]	; (8006e94 <send_login_packet+0xf4>)
 8006dd2:	5c89      	ldrb	r1, [r1, r2]
 8006dd4:	4a30      	ldr	r2, [pc, #192]	; (8006e98 <send_login_packet+0xf8>)
 8006dd6:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 8; i++) {
 8006dd8:	183b      	adds	r3, r7, r0
 8006dda:	781a      	ldrb	r2, [r3, #0]
 8006ddc:	183b      	adds	r3, r7, r0
 8006dde:	3201      	adds	r2, #1
 8006de0:	701a      	strb	r2, [r3, #0]
 8006de2:	2317      	movs	r3, #23
 8006de4:	18fb      	adds	r3, r7, r3
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	2b07      	cmp	r3, #7
 8006dea:	d9eb      	bls.n	8006dc4 <send_login_packet+0x24>
		}
		loginPacket[12] = infoSNo >> 8;
 8006dec:	4b2b      	ldr	r3, [pc, #172]	; (8006e9c <send_login_packet+0xfc>)
 8006dee:	881b      	ldrh	r3, [r3, #0]
 8006df0:	0a1b      	lsrs	r3, r3, #8
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	b2da      	uxtb	r2, r3
 8006df6:	4b28      	ldr	r3, [pc, #160]	; (8006e98 <send_login_packet+0xf8>)
 8006df8:	731a      	strb	r2, [r3, #12]
		loginPacket[13] = infoSNo;
 8006dfa:	4b28      	ldr	r3, [pc, #160]	; (8006e9c <send_login_packet+0xfc>)
 8006dfc:	881b      	ldrh	r3, [r3, #0]
 8006dfe:	b2da      	uxtb	r2, r3
 8006e00:	4b25      	ldr	r3, [pc, #148]	; (8006e98 <send_login_packet+0xf8>)
 8006e02:	735a      	strb	r2, [r3, #13]
		uint8_t tempCrcData[12];
		for (uint8_t i = 0; i < 12; i++) {
 8006e04:	2316      	movs	r3, #22
 8006e06:	18fb      	adds	r3, r7, r3
 8006e08:	2200      	movs	r2, #0
 8006e0a:	701a      	strb	r2, [r3, #0]
 8006e0c:	e00e      	b.n	8006e2c <send_login_packet+0x8c>
			tempCrcData[i] = loginPacket[i + 2];
 8006e0e:	2016      	movs	r0, #22
 8006e10:	183b      	adds	r3, r7, r0
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	1c9a      	adds	r2, r3, #2
 8006e16:	183b      	adds	r3, r7, r0
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	491f      	ldr	r1, [pc, #124]	; (8006e98 <send_login_packet+0xf8>)
 8006e1c:	5c89      	ldrb	r1, [r1, r2]
 8006e1e:	003a      	movs	r2, r7
 8006e20:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 12; i++) {
 8006e22:	183b      	adds	r3, r7, r0
 8006e24:	781a      	ldrb	r2, [r3, #0]
 8006e26:	183b      	adds	r3, r7, r0
 8006e28:	3201      	adds	r2, #1
 8006e2a:	701a      	strb	r2, [r3, #0]
 8006e2c:	2316      	movs	r3, #22
 8006e2e:	18fb      	adds	r3, r7, r3
 8006e30:	781b      	ldrb	r3, [r3, #0]
 8006e32:	2b0b      	cmp	r3, #11
 8006e34:	d9eb      	bls.n	8006e0e <send_login_packet+0x6e>
		}
		uint8_t *tempPtr = tempCrcData;
 8006e36:	003b      	movs	r3, r7
 8006e38:	613b      	str	r3, [r7, #16]
		uint16_t crcResult = 0;
 8006e3a:	250e      	movs	r5, #14
 8006e3c:	197b      	adds	r3, r7, r5
 8006e3e:	2200      	movs	r2, #0
 8006e40:	801a      	strh	r2, [r3, #0]
		crcResult = GetCrc16(tempPtr,
 8006e42:	197c      	adds	r4, r7, r5
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	210c      	movs	r1, #12
 8006e48:	0018      	movs	r0, r3
 8006e4a:	f7ff fe87 	bl	8006b5c <GetCrc16>
 8006e4e:	0003      	movs	r3, r0
 8006e50:	8023      	strh	r3, [r4, #0]
				sizeof(tempCrcData) / sizeof(tempCrcData[0]));
		loginPacket[14] = crcResult >> 8;
 8006e52:	0029      	movs	r1, r5
 8006e54:	187b      	adds	r3, r7, r1
 8006e56:	881b      	ldrh	r3, [r3, #0]
 8006e58:	0a1b      	lsrs	r3, r3, #8
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	b2da      	uxtb	r2, r3
 8006e5e:	4b0e      	ldr	r3, [pc, #56]	; (8006e98 <send_login_packet+0xf8>)
 8006e60:	739a      	strb	r2, [r3, #14]
		loginPacket[15] = crcResult;
 8006e62:	187b      	adds	r3, r7, r1
 8006e64:	881b      	ldrh	r3, [r3, #0]
 8006e66:	b2da      	uxtb	r2, r3
 8006e68:	4b0b      	ldr	r3, [pc, #44]	; (8006e98 <send_login_packet+0xf8>)
 8006e6a:	73da      	strb	r2, [r3, #15]
		HAL_UART_Transmit(&AT_PORT, loginPacket, 18, 100);
 8006e6c:	490a      	ldr	r1, [pc, #40]	; (8006e98 <send_login_packet+0xf8>)
 8006e6e:	480c      	ldr	r0, [pc, #48]	; (8006ea0 <send_login_packet+0x100>)
 8006e70:	2364      	movs	r3, #100	; 0x64
 8006e72:	2212      	movs	r2, #18
 8006e74:	f005 ffce 	bl	800ce14 <HAL_UART_Transmit>
		//printf("SENT LOGING PACKET SUCCESSFULLY\n");
		infoSNo++;
 8006e78:	4b08      	ldr	r3, [pc, #32]	; (8006e9c <send_login_packet+0xfc>)
 8006e7a:	881b      	ldrh	r3, [r3, #0]
 8006e7c:	3301      	adds	r3, #1
 8006e7e:	b29a      	uxth	r2, r3
 8006e80:	4b06      	ldr	r3, [pc, #24]	; (8006e9c <send_login_packet+0xfc>)
 8006e82:	801a      	strh	r2, [r3, #0]

	} else {
		//printf("TCP SESSION NOT OPENED\n");
	}
}
 8006e84:	46c0      	nop			; (mov r8, r8)
 8006e86:	46bd      	mov	sp, r7
 8006e88:	b006      	add	sp, #24
 8006e8a:	bdb0      	pop	{r4, r5, r7, pc}
 8006e8c:	20000a2c 	.word	0x20000a2c
 8006e90:	2000087a 	.word	0x2000087a
 8006e94:	20000884 	.word	0x20000884
 8006e98:	20000070 	.word	0x20000070
 8006e9c:	2000006c 	.word	0x2000006c
 8006ea0:	200004c8 	.word	0x200004c8

08006ea4 <send_data_packet>:

void send_data_packet() {
 8006ea4:	b5b0      	push	{r4, r5, r7, lr}
 8006ea6:	b0a0      	sub	sp, #128	; 0x80
 8006ea8:	af00      	add	r7, sp, #0
	infoSNo++;
 8006eaa:	4bbc      	ldr	r3, [pc, #752]	; (800719c <send_data_packet+0x2f8>)
 8006eac:	881b      	ldrh	r3, [r3, #0]
 8006eae:	3301      	adds	r3, #1
 8006eb0:	b29a      	uxth	r2, r3
 8006eb2:	4bba      	ldr	r3, [pc, #744]	; (800719c <send_data_packet+0x2f8>)
 8006eb4:	801a      	strh	r2, [r3, #0]
	uint8_t sendCounter = 0;
 8006eb6:	237f      	movs	r3, #127	; 0x7f
 8006eb8:	18fb      	adds	r3, r7, r3
 8006eba:	2200      	movs	r2, #0
 8006ebc:	701a      	strb	r2, [r3, #0]
	while (read_data_packet() == 1 && sendCounter < 100 && isLoggedIn == 1
 8006ebe:	e06d      	b.n	8006f9c <send_data_packet+0xf8>
			&& isDataMode == 1 && isTcpOpen == 1) {
		for (uint8_t i = 0; i < 18; i++) {
 8006ec0:	237e      	movs	r3, #126	; 0x7e
 8006ec2:	18fb      	adds	r3, r7, r3
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	701a      	strb	r2, [r3, #0]
 8006ec8:	e00e      	b.n	8006ee8 <send_data_packet+0x44>
			dataPacket[i + 4] = readPacket[i];
 8006eca:	207e      	movs	r0, #126	; 0x7e
 8006ecc:	183b      	adds	r3, r7, r0
 8006ece:	781a      	ldrb	r2, [r3, #0]
 8006ed0:	183b      	adds	r3, r7, r0
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	3304      	adds	r3, #4
 8006ed6:	49b2      	ldr	r1, [pc, #712]	; (80071a0 <send_data_packet+0x2fc>)
 8006ed8:	5c89      	ldrb	r1, [r1, r2]
 8006eda:	4ab2      	ldr	r2, [pc, #712]	; (80071a4 <send_data_packet+0x300>)
 8006edc:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 18; i++) {
 8006ede:	183b      	adds	r3, r7, r0
 8006ee0:	781a      	ldrb	r2, [r3, #0]
 8006ee2:	183b      	adds	r3, r7, r0
 8006ee4:	3201      	adds	r2, #1
 8006ee6:	701a      	strb	r2, [r3, #0]
 8006ee8:	237e      	movs	r3, #126	; 0x7e
 8006eea:	18fb      	adds	r3, r7, r3
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	2b11      	cmp	r3, #17
 8006ef0:	d9eb      	bls.n	8006eca <send_data_packet+0x26>
		}

		dataPacket[30] = infoSNo >> 8;
 8006ef2:	4baa      	ldr	r3, [pc, #680]	; (800719c <send_data_packet+0x2f8>)
 8006ef4:	881b      	ldrh	r3, [r3, #0]
 8006ef6:	0a1b      	lsrs	r3, r3, #8
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	b2da      	uxtb	r2, r3
 8006efc:	4ba9      	ldr	r3, [pc, #676]	; (80071a4 <send_data_packet+0x300>)
 8006efe:	779a      	strb	r2, [r3, #30]
		dataPacket[31] = infoSNo;
 8006f00:	4ba6      	ldr	r3, [pc, #664]	; (800719c <send_data_packet+0x2f8>)
 8006f02:	881b      	ldrh	r3, [r3, #0]
 8006f04:	b2da      	uxtb	r2, r3
 8006f06:	4ba7      	ldr	r3, [pc, #668]	; (80071a4 <send_data_packet+0x300>)
 8006f08:	77da      	strb	r2, [r3, #31]
		uint8_t tempCrcData[30];
		for (uint8_t i = 0; i < 29; i++) {
 8006f0a:	237d      	movs	r3, #125	; 0x7d
 8006f0c:	18fb      	adds	r3, r7, r3
 8006f0e:	2200      	movs	r2, #0
 8006f10:	701a      	strb	r2, [r3, #0]
 8006f12:	e00f      	b.n	8006f34 <send_data_packet+0x90>
			tempCrcData[i] = dataPacket[i + 2];
 8006f14:	207d      	movs	r0, #125	; 0x7d
 8006f16:	183b      	adds	r3, r7, r0
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	1c9a      	adds	r2, r3, #2
 8006f1c:	183b      	adds	r3, r7, r0
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	49a0      	ldr	r1, [pc, #640]	; (80071a4 <send_data_packet+0x300>)
 8006f22:	5c89      	ldrb	r1, [r1, r2]
 8006f24:	2244      	movs	r2, #68	; 0x44
 8006f26:	18ba      	adds	r2, r7, r2
 8006f28:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 29; i++) {
 8006f2a:	183b      	adds	r3, r7, r0
 8006f2c:	781a      	ldrb	r2, [r3, #0]
 8006f2e:	183b      	adds	r3, r7, r0
 8006f30:	3201      	adds	r2, #1
 8006f32:	701a      	strb	r2, [r3, #0]
 8006f34:	237d      	movs	r3, #125	; 0x7d
 8006f36:	18fb      	adds	r3, r7, r3
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	2b1c      	cmp	r3, #28
 8006f3c:	d9ea      	bls.n	8006f14 <send_data_packet+0x70>
		}
		uint8_t *tempPtr = tempCrcData;
 8006f3e:	2344      	movs	r3, #68	; 0x44
 8006f40:	18fb      	adds	r3, r7, r3
 8006f42:	677b      	str	r3, [r7, #116]	; 0x74
		uint16_t crcResult = 0;
 8006f44:	2572      	movs	r5, #114	; 0x72
 8006f46:	197b      	adds	r3, r7, r5
 8006f48:	2200      	movs	r2, #0
 8006f4a:	801a      	strh	r2, [r3, #0]
		crcResult = GetCrc16(tempPtr,
 8006f4c:	197c      	adds	r4, r7, r5
 8006f4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f50:	211e      	movs	r1, #30
 8006f52:	0018      	movs	r0, r3
 8006f54:	f7ff fe02 	bl	8006b5c <GetCrc16>
 8006f58:	0003      	movs	r3, r0
 8006f5a:	8023      	strh	r3, [r4, #0]
				sizeof(tempCrcData) / sizeof(tempCrcData[0]));
		dataPacket[32] = crcResult >> 8;
 8006f5c:	0028      	movs	r0, r5
 8006f5e:	183b      	adds	r3, r7, r0
 8006f60:	881b      	ldrh	r3, [r3, #0]
 8006f62:	0a1b      	lsrs	r3, r3, #8
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	b2d9      	uxtb	r1, r3
 8006f68:	4b8e      	ldr	r3, [pc, #568]	; (80071a4 <send_data_packet+0x300>)
 8006f6a:	2220      	movs	r2, #32
 8006f6c:	5499      	strb	r1, [r3, r2]
		dataPacket[33] = crcResult;
 8006f6e:	183b      	adds	r3, r7, r0
 8006f70:	881b      	ldrh	r3, [r3, #0]
 8006f72:	b2d9      	uxtb	r1, r3
 8006f74:	4b8b      	ldr	r3, [pc, #556]	; (80071a4 <send_data_packet+0x300>)
 8006f76:	2221      	movs	r2, #33	; 0x21
 8006f78:	5499      	strb	r1, [r3, r2]
		HAL_UART_Transmit(&AT_PORT, dataPacket, 36, 100);
 8006f7a:	498a      	ldr	r1, [pc, #552]	; (80071a4 <send_data_packet+0x300>)
 8006f7c:	488a      	ldr	r0, [pc, #552]	; (80071a8 <send_data_packet+0x304>)
 8006f7e:	2364      	movs	r3, #100	; 0x64
 8006f80:	2224      	movs	r2, #36	; 0x24
 8006f82:	f005 ff47 	bl	800ce14 <HAL_UART_Transmit>
		// HAL_UART_Transmit(&huart4, dataPacket, 36, 100);
		sendCounter++;
 8006f86:	217f      	movs	r1, #127	; 0x7f
 8006f88:	187b      	adds	r3, r7, r1
 8006f8a:	781a      	ldrb	r2, [r3, #0]
 8006f8c:	187b      	adds	r3, r7, r1
 8006f8e:	3201      	adds	r2, #1
 8006f90:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1000);
 8006f92:	23fa      	movs	r3, #250	; 0xfa
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	0018      	movs	r0, r3
 8006f98:	f002 fcfe 	bl	8009998 <HAL_Delay>
	while (read_data_packet() == 1 && sendCounter < 100 && isLoggedIn == 1
 8006f9c:	f000 f9ea 	bl	8007374 <read_data_packet>
 8006fa0:	0003      	movs	r3, r0
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d114      	bne.n	8006fd0 <send_data_packet+0x12c>
 8006fa6:	237f      	movs	r3, #127	; 0x7f
 8006fa8:	18fb      	adds	r3, r7, r3
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	2b63      	cmp	r3, #99	; 0x63
 8006fae:	d80f      	bhi.n	8006fd0 <send_data_packet+0x12c>
 8006fb0:	4b7e      	ldr	r3, [pc, #504]	; (80071ac <send_data_packet+0x308>)
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d10a      	bne.n	8006fd0 <send_data_packet+0x12c>
			&& isDataMode == 1 && isTcpOpen == 1) {
 8006fba:	4b7d      	ldr	r3, [pc, #500]	; (80071b0 <send_data_packet+0x30c>)
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d105      	bne.n	8006fd0 <send_data_packet+0x12c>
 8006fc4:	4b7b      	ldr	r3, [pc, #492]	; (80071b4 <send_data_packet+0x310>)
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d100      	bne.n	8006fd0 <send_data_packet+0x12c>
 8006fce:	e777      	b.n	8006ec0 <send_data_packet+0x1c>
	}
	if (read_data_packet() == 0) {
 8006fd0:	f000 f9d0 	bl	8007374 <read_data_packet>
 8006fd4:	1e03      	subs	r3, r0, #0
 8006fd6:	d000      	beq.n	8006fda <send_data_packet+0x136>
 8006fd8:	e0dc      	b.n	8007194 <send_data_packet+0x2f0>
		if(isAlarm){
 8006fda:	4b77      	ldr	r3, [pc, #476]	; (80071b8 <send_data_packet+0x314>)
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d074      	beq.n	80070ce <send_data_packet+0x22a>
			isAlarm=0;
 8006fe4:	4b74      	ldr	r3, [pc, #464]	; (80071b8 <send_data_packet+0x314>)
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < 18; i++) {
 8006fea:	237c      	movs	r3, #124	; 0x7c
 8006fec:	18fb      	adds	r3, r7, r3
 8006fee:	2200      	movs	r2, #0
 8006ff0:	701a      	strb	r2, [r3, #0]
 8006ff2:	e010      	b.n	8007016 <send_data_packet+0x172>
				alarmPacket[i + 4] = gps_info[i];
 8006ff4:	4b71      	ldr	r3, [pc, #452]	; (80071bc <send_data_packet+0x318>)
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	207c      	movs	r0, #124	; 0x7c
 8006ffa:	183b      	adds	r3, r7, r0
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	18d2      	adds	r2, r2, r3
 8007000:	183b      	adds	r3, r7, r0
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	3304      	adds	r3, #4
 8007006:	7811      	ldrb	r1, [r2, #0]
 8007008:	4a6d      	ldr	r2, [pc, #436]	; (80071c0 <send_data_packet+0x31c>)
 800700a:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i = 0; i < 18; i++) {
 800700c:	183b      	adds	r3, r7, r0
 800700e:	781a      	ldrb	r2, [r3, #0]
 8007010:	183b      	adds	r3, r7, r0
 8007012:	3201      	adds	r2, #1
 8007014:	701a      	strb	r2, [r3, #0]
 8007016:	237c      	movs	r3, #124	; 0x7c
 8007018:	18fb      	adds	r3, r7, r3
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	2b11      	cmp	r3, #17
 800701e:	d9e9      	bls.n	8006ff4 <send_data_packet+0x150>
			}
			create_status_info();
 8007020:	f000 fa1e 	bl	8007460 <create_status_info>
			alarmPacket[22]=TermInfo;
 8007024:	4b67      	ldr	r3, [pc, #412]	; (80071c4 <send_data_packet+0x320>)
 8007026:	781a      	ldrb	r2, [r3, #0]
 8007028:	4b65      	ldr	r3, [pc, #404]	; (80071c0 <send_data_packet+0x31c>)
 800702a:	759a      	strb	r2, [r3, #22]
			alarmPacket[23]=VLvl;
 800702c:	4b66      	ldr	r3, [pc, #408]	; (80071c8 <send_data_packet+0x324>)
 800702e:	781a      	ldrb	r2, [r3, #0]
 8007030:	4b63      	ldr	r3, [pc, #396]	; (80071c0 <send_data_packet+0x31c>)
 8007032:	75da      	strb	r2, [r3, #23]
			alarmPacket[24]=GSMSS;
 8007034:	4b65      	ldr	r3, [pc, #404]	; (80071cc <send_data_packet+0x328>)
 8007036:	781a      	ldrb	r2, [r3, #0]
 8007038:	4b61      	ldr	r3, [pc, #388]	; (80071c0 <send_data_packet+0x31c>)
 800703a:	761a      	strb	r2, [r3, #24]
			alarmPacket[26] = infoSNo >> 8;
 800703c:	4b57      	ldr	r3, [pc, #348]	; (800719c <send_data_packet+0x2f8>)
 800703e:	881b      	ldrh	r3, [r3, #0]
 8007040:	0a1b      	lsrs	r3, r3, #8
 8007042:	b29b      	uxth	r3, r3
 8007044:	b2da      	uxtb	r2, r3
 8007046:	4b5e      	ldr	r3, [pc, #376]	; (80071c0 <send_data_packet+0x31c>)
 8007048:	769a      	strb	r2, [r3, #26]
			alarmPacket[27] = infoSNo;
 800704a:	4b54      	ldr	r3, [pc, #336]	; (800719c <send_data_packet+0x2f8>)
 800704c:	881b      	ldrh	r3, [r3, #0]
 800704e:	b2da      	uxtb	r2, r3
 8007050:	4b5b      	ldr	r3, [pc, #364]	; (80071c0 <send_data_packet+0x31c>)
 8007052:	76da      	strb	r2, [r3, #27]
			uint8_t tempCrcData[30];
			for (uint8_t i = 0; i < 26; i++) {
 8007054:	237b      	movs	r3, #123	; 0x7b
 8007056:	18fb      	adds	r3, r7, r3
 8007058:	2200      	movs	r2, #0
 800705a:	701a      	strb	r2, [r3, #0]
 800705c:	e00f      	b.n	800707e <send_data_packet+0x1da>
				tempCrcData[i] = alarmPacket[i + 2];
 800705e:	207b      	movs	r0, #123	; 0x7b
 8007060:	183b      	adds	r3, r7, r0
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	1c9a      	adds	r2, r3, #2
 8007066:	183b      	adds	r3, r7, r0
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	4955      	ldr	r1, [pc, #340]	; (80071c0 <send_data_packet+0x31c>)
 800706c:	5c89      	ldrb	r1, [r1, r2]
 800706e:	2224      	movs	r2, #36	; 0x24
 8007070:	18ba      	adds	r2, r7, r2
 8007072:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i = 0; i < 26; i++) {
 8007074:	183b      	adds	r3, r7, r0
 8007076:	781a      	ldrb	r2, [r3, #0]
 8007078:	183b      	adds	r3, r7, r0
 800707a:	3201      	adds	r2, #1
 800707c:	701a      	strb	r2, [r3, #0]
 800707e:	237b      	movs	r3, #123	; 0x7b
 8007080:	18fb      	adds	r3, r7, r3
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	2b19      	cmp	r3, #25
 8007086:	d9ea      	bls.n	800705e <send_data_packet+0x1ba>
			}
			uint8_t *tempPtr = tempCrcData;
 8007088:	2324      	movs	r3, #36	; 0x24
 800708a:	18fb      	adds	r3, r7, r3
 800708c:	667b      	str	r3, [r7, #100]	; 0x64
			uint16_t crcResult = 0;
 800708e:	2562      	movs	r5, #98	; 0x62
 8007090:	197b      	adds	r3, r7, r5
 8007092:	2200      	movs	r2, #0
 8007094:	801a      	strh	r2, [r3, #0]
			crcResult = GetCrc16(tempPtr,
 8007096:	197c      	adds	r4, r7, r5
 8007098:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800709a:	211e      	movs	r1, #30
 800709c:	0018      	movs	r0, r3
 800709e:	f7ff fd5d 	bl	8006b5c <GetCrc16>
 80070a2:	0003      	movs	r3, r0
 80070a4:	8023      	strh	r3, [r4, #0]
					sizeof(tempCrcData) / sizeof(tempCrcData[0]));
			alarmPacket[28] = crcResult >> 8;
 80070a6:	0029      	movs	r1, r5
 80070a8:	187b      	adds	r3, r7, r1
 80070aa:	881b      	ldrh	r3, [r3, #0]
 80070ac:	0a1b      	lsrs	r3, r3, #8
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	b2da      	uxtb	r2, r3
 80070b2:	4b43      	ldr	r3, [pc, #268]	; (80071c0 <send_data_packet+0x31c>)
 80070b4:	771a      	strb	r2, [r3, #28]
			alarmPacket[29] = crcResult;
 80070b6:	187b      	adds	r3, r7, r1
 80070b8:	881b      	ldrh	r3, [r3, #0]
 80070ba:	b2da      	uxtb	r2, r3
 80070bc:	4b40      	ldr	r3, [pc, #256]	; (80071c0 <send_data_packet+0x31c>)
 80070be:	775a      	strb	r2, [r3, #29]
			HAL_UART_Transmit(&AT_PORT, alarmPacket, 29, 100);
 80070c0:	493f      	ldr	r1, [pc, #252]	; (80071c0 <send_data_packet+0x31c>)
 80070c2:	4839      	ldr	r0, [pc, #228]	; (80071a8 <send_data_packet+0x304>)
 80070c4:	2364      	movs	r3, #100	; 0x64
 80070c6:	221d      	movs	r2, #29
 80070c8:	f005 fea4 	bl	800ce14 <HAL_UART_Transmit>

		}


	}
}
 80070cc:	e062      	b.n	8007194 <send_data_packet+0x2f0>
			for (uint8_t i = 0; i < 18; i++) {
 80070ce:	237a      	movs	r3, #122	; 0x7a
 80070d0:	18fb      	adds	r3, r7, r3
 80070d2:	2200      	movs	r2, #0
 80070d4:	701a      	strb	r2, [r3, #0]
 80070d6:	e010      	b.n	80070fa <send_data_packet+0x256>
				dataPacket[i + 4] = gps_info[i];
 80070d8:	4b38      	ldr	r3, [pc, #224]	; (80071bc <send_data_packet+0x318>)
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	207a      	movs	r0, #122	; 0x7a
 80070de:	183b      	adds	r3, r7, r0
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	18d2      	adds	r2, r2, r3
 80070e4:	183b      	adds	r3, r7, r0
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	3304      	adds	r3, #4
 80070ea:	7811      	ldrb	r1, [r2, #0]
 80070ec:	4a2d      	ldr	r2, [pc, #180]	; (80071a4 <send_data_packet+0x300>)
 80070ee:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i = 0; i < 18; i++) {
 80070f0:	183b      	adds	r3, r7, r0
 80070f2:	781a      	ldrb	r2, [r3, #0]
 80070f4:	183b      	adds	r3, r7, r0
 80070f6:	3201      	adds	r2, #1
 80070f8:	701a      	strb	r2, [r3, #0]
 80070fa:	237a      	movs	r3, #122	; 0x7a
 80070fc:	18fb      	adds	r3, r7, r3
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	2b11      	cmp	r3, #17
 8007102:	d9e9      	bls.n	80070d8 <send_data_packet+0x234>
			dataPacket[30] = infoSNo >> 8;
 8007104:	4b25      	ldr	r3, [pc, #148]	; (800719c <send_data_packet+0x2f8>)
 8007106:	881b      	ldrh	r3, [r3, #0]
 8007108:	0a1b      	lsrs	r3, r3, #8
 800710a:	b29b      	uxth	r3, r3
 800710c:	b2da      	uxtb	r2, r3
 800710e:	4b25      	ldr	r3, [pc, #148]	; (80071a4 <send_data_packet+0x300>)
 8007110:	779a      	strb	r2, [r3, #30]
			dataPacket[31] = infoSNo;
 8007112:	4b22      	ldr	r3, [pc, #136]	; (800719c <send_data_packet+0x2f8>)
 8007114:	881b      	ldrh	r3, [r3, #0]
 8007116:	b2da      	uxtb	r2, r3
 8007118:	4b22      	ldr	r3, [pc, #136]	; (80071a4 <send_data_packet+0x300>)
 800711a:	77da      	strb	r2, [r3, #31]
			for (uint8_t i = 0; i < 29; i++) {
 800711c:	2379      	movs	r3, #121	; 0x79
 800711e:	18fb      	adds	r3, r7, r3
 8007120:	2200      	movs	r2, #0
 8007122:	701a      	strb	r2, [r3, #0]
 8007124:	e00e      	b.n	8007144 <send_data_packet+0x2a0>
				tempCrcData[i] = dataPacket[i + 2];
 8007126:	2079      	movs	r0, #121	; 0x79
 8007128:	183b      	adds	r3, r7, r0
 800712a:	781b      	ldrb	r3, [r3, #0]
 800712c:	1c9a      	adds	r2, r3, #2
 800712e:	183b      	adds	r3, r7, r0
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	491c      	ldr	r1, [pc, #112]	; (80071a4 <send_data_packet+0x300>)
 8007134:	5c89      	ldrb	r1, [r1, r2]
 8007136:	1d3a      	adds	r2, r7, #4
 8007138:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i = 0; i < 29; i++) {
 800713a:	183b      	adds	r3, r7, r0
 800713c:	781a      	ldrb	r2, [r3, #0]
 800713e:	183b      	adds	r3, r7, r0
 8007140:	3201      	adds	r2, #1
 8007142:	701a      	strb	r2, [r3, #0]
 8007144:	2379      	movs	r3, #121	; 0x79
 8007146:	18fb      	adds	r3, r7, r3
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	2b1c      	cmp	r3, #28
 800714c:	d9eb      	bls.n	8007126 <send_data_packet+0x282>
			uint8_t *tempPtr = tempCrcData;
 800714e:	1d3b      	adds	r3, r7, #4
 8007150:	66fb      	str	r3, [r7, #108]	; 0x6c
			uint16_t crcResult = 0;
 8007152:	256a      	movs	r5, #106	; 0x6a
 8007154:	197b      	adds	r3, r7, r5
 8007156:	2200      	movs	r2, #0
 8007158:	801a      	strh	r2, [r3, #0]
			crcResult = GetCrc16(tempPtr,
 800715a:	197c      	adds	r4, r7, r5
 800715c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800715e:	211e      	movs	r1, #30
 8007160:	0018      	movs	r0, r3
 8007162:	f7ff fcfb 	bl	8006b5c <GetCrc16>
 8007166:	0003      	movs	r3, r0
 8007168:	8023      	strh	r3, [r4, #0]
			dataPacket[32] = crcResult >> 8;
 800716a:	0028      	movs	r0, r5
 800716c:	183b      	adds	r3, r7, r0
 800716e:	881b      	ldrh	r3, [r3, #0]
 8007170:	0a1b      	lsrs	r3, r3, #8
 8007172:	b29b      	uxth	r3, r3
 8007174:	b2d9      	uxtb	r1, r3
 8007176:	4b0b      	ldr	r3, [pc, #44]	; (80071a4 <send_data_packet+0x300>)
 8007178:	2220      	movs	r2, #32
 800717a:	5499      	strb	r1, [r3, r2]
			dataPacket[33] = crcResult;
 800717c:	183b      	adds	r3, r7, r0
 800717e:	881b      	ldrh	r3, [r3, #0]
 8007180:	b2d9      	uxtb	r1, r3
 8007182:	4b08      	ldr	r3, [pc, #32]	; (80071a4 <send_data_packet+0x300>)
 8007184:	2221      	movs	r2, #33	; 0x21
 8007186:	5499      	strb	r1, [r3, r2]
			HAL_UART_Transmit(&AT_PORT, dataPacket, 36, 100);
 8007188:	4906      	ldr	r1, [pc, #24]	; (80071a4 <send_data_packet+0x300>)
 800718a:	4807      	ldr	r0, [pc, #28]	; (80071a8 <send_data_packet+0x304>)
 800718c:	2364      	movs	r3, #100	; 0x64
 800718e:	2224      	movs	r2, #36	; 0x24
 8007190:	f005 fe40 	bl	800ce14 <HAL_UART_Transmit>
}
 8007194:	46c0      	nop			; (mov r8, r8)
 8007196:	46bd      	mov	sp, r7
 8007198:	b020      	add	sp, #128	; 0x80
 800719a:	bdb0      	pop	{r4, r5, r7, pc}
 800719c:	2000006c 	.word	0x2000006c
 80071a0:	20000a54 	.word	0x20000a54
 80071a4:	20000084 	.word	0x20000084
 80071a8:	200004c8 	.word	0x200004c8
 80071ac:	20000a30 	.word	0x20000a30
 80071b0:	2000087a 	.word	0x2000087a
 80071b4:	20000a2c 	.word	0x20000a2c
 80071b8:	20000725 	.word	0x20000725
 80071bc:	2000002c 	.word	0x2000002c
 80071c0:	200000a8 	.word	0x200000a8
 80071c4:	2000072b 	.word	0x2000072b
 80071c8:	2000072d 	.word	0x2000072d
 80071cc:	2000072c 	.word	0x2000072c

080071d0 <checkdatasize>:
uint8_t checkdatasize() {
 80071d0:	b580      	push	{r7, lr}
 80071d2:	af00      	add	r7, sp, #0
	if (StartSec == EndSec) {
 80071d4:	4b1c      	ldr	r3, [pc, #112]	; (8007248 <checkdatasize+0x78>)
 80071d6:	881b      	ldrh	r3, [r3, #0]
 80071d8:	b29a      	uxth	r2, r3
 80071da:	4b1c      	ldr	r3, [pc, #112]	; (800724c <checkdatasize+0x7c>)
 80071dc:	881b      	ldrh	r3, [r3, #0]
 80071de:	b29b      	uxth	r3, r3
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d10f      	bne.n	8007204 <checkdatasize+0x34>
		if ((StartN - EndN) >= 672) {
 80071e4:	4b1a      	ldr	r3, [pc, #104]	; (8007250 <checkdatasize+0x80>)
 80071e6:	881b      	ldrh	r3, [r3, #0]
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	001a      	movs	r2, r3
 80071ec:	4b19      	ldr	r3, [pc, #100]	; (8007254 <checkdatasize+0x84>)
 80071ee:	881b      	ldrh	r3, [r3, #0]
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	1ad2      	subs	r2, r2, r3
 80071f4:	23a8      	movs	r3, #168	; 0xa8
 80071f6:	009b      	lsls	r3, r3, #2
 80071f8:	429a      	cmp	r2, r3
 80071fa:	db01      	blt.n	8007200 <checkdatasize+0x30>
			return 1;
 80071fc:	2301      	movs	r3, #1
 80071fe:	e01f      	b.n	8007240 <checkdatasize+0x70>
		} else {
			return 0;
 8007200:	2300      	movs	r3, #0
 8007202:	e01d      	b.n	8007240 <checkdatasize+0x70>
		}
	} else if ((StartSec - EndSec) == 1) {
 8007204:	4b10      	ldr	r3, [pc, #64]	; (8007248 <checkdatasize+0x78>)
 8007206:	881b      	ldrh	r3, [r3, #0]
 8007208:	b29b      	uxth	r3, r3
 800720a:	001a      	movs	r2, r3
 800720c:	4b0f      	ldr	r3, [pc, #60]	; (800724c <checkdatasize+0x7c>)
 800720e:	881b      	ldrh	r3, [r3, #0]
 8007210:	b29b      	uxth	r3, r3
 8007212:	1ad3      	subs	r3, r2, r3
 8007214:	2b01      	cmp	r3, #1
 8007216:	d112      	bne.n	800723e <checkdatasize+0x6e>
		if ((4096 - EndN + StartN) >= 672) {
 8007218:	4b0e      	ldr	r3, [pc, #56]	; (8007254 <checkdatasize+0x84>)
 800721a:	881b      	ldrh	r3, [r3, #0]
 800721c:	b29b      	uxth	r3, r3
 800721e:	001a      	movs	r2, r3
 8007220:	2380      	movs	r3, #128	; 0x80
 8007222:	015b      	lsls	r3, r3, #5
 8007224:	1a9b      	subs	r3, r3, r2
 8007226:	4a0a      	ldr	r2, [pc, #40]	; (8007250 <checkdatasize+0x80>)
 8007228:	8812      	ldrh	r2, [r2, #0]
 800722a:	b292      	uxth	r2, r2
 800722c:	189a      	adds	r2, r3, r2
 800722e:	23a8      	movs	r3, #168	; 0xa8
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	429a      	cmp	r2, r3
 8007234:	db01      	blt.n	800723a <checkdatasize+0x6a>
			return 1;
 8007236:	2301      	movs	r3, #1
 8007238:	e002      	b.n	8007240 <checkdatasize+0x70>
		} else {
			return 0;
 800723a:	2300      	movs	r3, #0
 800723c:	e000      	b.n	8007240 <checkdatasize+0x70>
		}
	} else {
		return 1;
 800723e:	2301      	movs	r3, #1
	}
}
 8007240:	0018      	movs	r0, r3
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
 8007246:	46c0      	nop			; (mov r8, r8)
 8007248:	20000d18 	.word	0x20000d18
 800724c:	20000d1a 	.word	0x20000d1a
 8007250:	20000d14 	.word	0x20000d14
 8007254:	20000d16 	.word	0x20000d16

08007258 <save_data_packet>:

void save_data_packet() {
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0

	if(saveAlarm){
 800725e:	4b3c      	ldr	r3, [pc, #240]	; (8007350 <save_data_packet+0xf8>)
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	b2db      	uxtb	r3, r3
 8007264:	2b00      	cmp	r3, #0
 8007266:	d002      	beq.n	800726e <save_data_packet+0x16>
		saveAlarm=0;
 8007268:	4b39      	ldr	r3, [pc, #228]	; (8007350 <save_data_packet+0xf8>)
 800726a:	2200      	movs	r2, #0
 800726c:	701a      	strb	r2, [r3, #0]
		//todo save packet
	}
	memset(savePacket, 0, sizeof(savePacket));
 800726e:	4b39      	ldr	r3, [pc, #228]	; (8007354 <save_data_packet+0xfc>)
 8007270:	2220      	movs	r2, #32
 8007272:	2100      	movs	r1, #0
 8007274:	0018      	movs	r0, r3
 8007276:	f007 fd28 	bl	800ecca <memset>
	for (uint8_t i = 0; i < 18; i++) {
 800727a:	1dfb      	adds	r3, r7, #7
 800727c:	2200      	movs	r2, #0
 800727e:	701a      	strb	r2, [r3, #0]
 8007280:	e00e      	b.n	80072a0 <save_data_packet+0x48>
		savePacket[i] = gps_info[i];
 8007282:	4b35      	ldr	r3, [pc, #212]	; (8007358 <save_data_packet+0x100>)
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	1dfb      	adds	r3, r7, #7
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	18d2      	adds	r2, r2, r3
 800728c:	1dfb      	adds	r3, r7, #7
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	7811      	ldrb	r1, [r2, #0]
 8007292:	4a30      	ldr	r2, [pc, #192]	; (8007354 <save_data_packet+0xfc>)
 8007294:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 18; i++) {
 8007296:	1dfb      	adds	r3, r7, #7
 8007298:	781a      	ldrb	r2, [r3, #0]
 800729a:	1dfb      	adds	r3, r7, #7
 800729c:	3201      	adds	r2, #1
 800729e:	701a      	strb	r2, [r3, #0]
 80072a0:	1dfb      	adds	r3, r7, #7
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	2b11      	cmp	r3, #17
 80072a6:	d9ec      	bls.n	8007282 <save_data_packet+0x2a>
	}
	W25qxx_WriteSector(savePacket, StartSec, StartN, 32);
 80072a8:	4b2c      	ldr	r3, [pc, #176]	; (800735c <save_data_packet+0x104>)
 80072aa:	881b      	ldrh	r3, [r3, #0]
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	0019      	movs	r1, r3
 80072b0:	4b2b      	ldr	r3, [pc, #172]	; (8007360 <save_data_packet+0x108>)
 80072b2:	881b      	ldrh	r3, [r3, #0]
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	001a      	movs	r2, r3
 80072b8:	4826      	ldr	r0, [pc, #152]	; (8007354 <save_data_packet+0xfc>)
 80072ba:	2320      	movs	r3, #32
 80072bc:	f002 f8c2 	bl	8009444 <W25qxx_WriteSector>
	StartN = StartN + 32;
 80072c0:	4b27      	ldr	r3, [pc, #156]	; (8007360 <save_data_packet+0x108>)
 80072c2:	881b      	ldrh	r3, [r3, #0]
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	3320      	adds	r3, #32
 80072c8:	b29a      	uxth	r2, r3
 80072ca:	4b25      	ldr	r3, [pc, #148]	; (8007360 <save_data_packet+0x108>)
 80072cc:	801a      	strh	r2, [r3, #0]
	if (StartN > 4090) {
 80072ce:	4b24      	ldr	r3, [pc, #144]	; (8007360 <save_data_packet+0x108>)
 80072d0:	881b      	ldrh	r3, [r3, #0]
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	4a23      	ldr	r2, [pc, #140]	; (8007364 <save_data_packet+0x10c>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d935      	bls.n	8007346 <save_data_packet+0xee>
		StartN = 0;
 80072da:	4b21      	ldr	r3, [pc, #132]	; (8007360 <save_data_packet+0x108>)
 80072dc:	2200      	movs	r2, #0
 80072de:	801a      	strh	r2, [r3, #0]
		StartSec += 1;
 80072e0:	4b1e      	ldr	r3, [pc, #120]	; (800735c <save_data_packet+0x104>)
 80072e2:	881b      	ldrh	r3, [r3, #0]
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	3301      	adds	r3, #1
 80072e8:	b29a      	uxth	r2, r3
 80072ea:	4b1c      	ldr	r3, [pc, #112]	; (800735c <save_data_packet+0x104>)
 80072ec:	801a      	strh	r2, [r3, #0]
		if (StartSec == 1024) {
 80072ee:	4b1b      	ldr	r3, [pc, #108]	; (800735c <save_data_packet+0x104>)
 80072f0:	881b      	ldrh	r3, [r3, #0]
 80072f2:	b29a      	uxth	r2, r3
 80072f4:	2380      	movs	r3, #128	; 0x80
 80072f6:	00db      	lsls	r3, r3, #3
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d102      	bne.n	8007302 <save_data_packet+0xaa>
			StartSec = 1;
 80072fc:	4b17      	ldr	r3, [pc, #92]	; (800735c <save_data_packet+0x104>)
 80072fe:	2201      	movs	r2, #1
 8007300:	801a      	strh	r2, [r3, #0]
		}
		W25qxx_EraseSector(StartSec);
 8007302:	4b16      	ldr	r3, [pc, #88]	; (800735c <save_data_packet+0x104>)
 8007304:	881b      	ldrh	r3, [r3, #0]
 8007306:	b29b      	uxth	r3, r3
 8007308:	0018      	movs	r0, r3
 800730a:	f001 ffa5 	bl	8009258 <W25qxx_EraseSector>
		if (StartSec == EndSec) {
 800730e:	4b13      	ldr	r3, [pc, #76]	; (800735c <save_data_packet+0x104>)
 8007310:	881b      	ldrh	r3, [r3, #0]
 8007312:	b29a      	uxth	r2, r3
 8007314:	4b14      	ldr	r3, [pc, #80]	; (8007368 <save_data_packet+0x110>)
 8007316:	881b      	ldrh	r3, [r3, #0]
 8007318:	b29b      	uxth	r3, r3
 800731a:	429a      	cmp	r2, r3
 800731c:	d113      	bne.n	8007346 <save_data_packet+0xee>
			EndN = 0;
 800731e:	4b13      	ldr	r3, [pc, #76]	; (800736c <save_data_packet+0x114>)
 8007320:	2200      	movs	r2, #0
 8007322:	801a      	strh	r2, [r3, #0]
			if (EndSec == 1023) {
 8007324:	4b10      	ldr	r3, [pc, #64]	; (8007368 <save_data_packet+0x110>)
 8007326:	881b      	ldrh	r3, [r3, #0]
 8007328:	b29b      	uxth	r3, r3
 800732a:	4a11      	ldr	r2, [pc, #68]	; (8007370 <save_data_packet+0x118>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d103      	bne.n	8007338 <save_data_packet+0xe0>
				EndSec = 1;
 8007330:	4b0d      	ldr	r3, [pc, #52]	; (8007368 <save_data_packet+0x110>)
 8007332:	2201      	movs	r2, #1
 8007334:	801a      	strh	r2, [r3, #0]
			} else {
				EndSec += 1;
			}
		}
	}
}
 8007336:	e006      	b.n	8007346 <save_data_packet+0xee>
				EndSec += 1;
 8007338:	4b0b      	ldr	r3, [pc, #44]	; (8007368 <save_data_packet+0x110>)
 800733a:	881b      	ldrh	r3, [r3, #0]
 800733c:	b29b      	uxth	r3, r3
 800733e:	3301      	adds	r3, #1
 8007340:	b29a      	uxth	r2, r3
 8007342:	4b09      	ldr	r3, [pc, #36]	; (8007368 <save_data_packet+0x110>)
 8007344:	801a      	strh	r2, [r3, #0]
}
 8007346:	46c0      	nop			; (mov r8, r8)
 8007348:	46bd      	mov	sp, r7
 800734a:	b002      	add	sp, #8
 800734c:	bd80      	pop	{r7, pc}
 800734e:	46c0      	nop			; (mov r8, r8)
 8007350:	2000072a 	.word	0x2000072a
 8007354:	20000a34 	.word	0x20000a34
 8007358:	2000002c 	.word	0x2000002c
 800735c:	20000d18 	.word	0x20000d18
 8007360:	20000d14 	.word	0x20000d14
 8007364:	00000ffa 	.word	0x00000ffa
 8007368:	20000d1a 	.word	0x20000d1a
 800736c:	20000d16 	.word	0x20000d16
 8007370:	000003ff 	.word	0x000003ff

08007374 <read_data_packet>:
uint8_t read_data_packet() {
 8007374:	b580      	push	{r7, lr}
 8007376:	af00      	add	r7, sp, #0
	memset(readPacket, 0, sizeof(readPacket));
 8007378:	4b32      	ldr	r3, [pc, #200]	; (8007444 <read_data_packet+0xd0>)
 800737a:	2220      	movs	r2, #32
 800737c:	2100      	movs	r1, #0
 800737e:	0018      	movs	r0, r3
 8007380:	f007 fca3 	bl	800ecca <memset>
	if ((EndSec == StartSec) && (EndN == StartN)) {
 8007384:	4b30      	ldr	r3, [pc, #192]	; (8007448 <read_data_packet+0xd4>)
 8007386:	881b      	ldrh	r3, [r3, #0]
 8007388:	b29a      	uxth	r2, r3
 800738a:	4b30      	ldr	r3, [pc, #192]	; (800744c <read_data_packet+0xd8>)
 800738c:	881b      	ldrh	r3, [r3, #0]
 800738e:	b29b      	uxth	r3, r3
 8007390:	429a      	cmp	r2, r3
 8007392:	d122      	bne.n	80073da <read_data_packet+0x66>
 8007394:	4b2e      	ldr	r3, [pc, #184]	; (8007450 <read_data_packet+0xdc>)
 8007396:	881b      	ldrh	r3, [r3, #0]
 8007398:	b29a      	uxth	r2, r3
 800739a:	4b2e      	ldr	r3, [pc, #184]	; (8007454 <read_data_packet+0xe0>)
 800739c:	881b      	ldrh	r3, [r3, #0]
 800739e:	b29b      	uxth	r3, r3
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d11a      	bne.n	80073da <read_data_packet+0x66>
		if (EndN != 0 || EndSec != 1) {
 80073a4:	4b2a      	ldr	r3, [pc, #168]	; (8007450 <read_data_packet+0xdc>)
 80073a6:	881b      	ldrh	r3, [r3, #0]
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d104      	bne.n	80073b8 <read_data_packet+0x44>
 80073ae:	4b26      	ldr	r3, [pc, #152]	; (8007448 <read_data_packet+0xd4>)
 80073b0:	881b      	ldrh	r3, [r3, #0]
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d00e      	beq.n	80073d6 <read_data_packet+0x62>
			W25qxx_EraseSector(1);
 80073b8:	2001      	movs	r0, #1
 80073ba:	f001 ff4d 	bl	8009258 <W25qxx_EraseSector>
			StartN = 0;
 80073be:	4b25      	ldr	r3, [pc, #148]	; (8007454 <read_data_packet+0xe0>)
 80073c0:	2200      	movs	r2, #0
 80073c2:	801a      	strh	r2, [r3, #0]
			EndN = 0;
 80073c4:	4b22      	ldr	r3, [pc, #136]	; (8007450 <read_data_packet+0xdc>)
 80073c6:	2200      	movs	r2, #0
 80073c8:	801a      	strh	r2, [r3, #0]
			StartSec = 1;
 80073ca:	4b20      	ldr	r3, [pc, #128]	; (800744c <read_data_packet+0xd8>)
 80073cc:	2201      	movs	r2, #1
 80073ce:	801a      	strh	r2, [r3, #0]
			EndSec = 1;
 80073d0:	4b1d      	ldr	r3, [pc, #116]	; (8007448 <read_data_packet+0xd4>)
 80073d2:	2201      	movs	r2, #1
 80073d4:	801a      	strh	r2, [r3, #0]
		}
		return 0;
 80073d6:	2300      	movs	r3, #0
 80073d8:	e030      	b.n	800743c <read_data_packet+0xc8>
	} else {
		W25qxx_ReadSector(readPacket, EndSec, EndN, 32);
 80073da:	4b1b      	ldr	r3, [pc, #108]	; (8007448 <read_data_packet+0xd4>)
 80073dc:	881b      	ldrh	r3, [r3, #0]
 80073de:	b29b      	uxth	r3, r3
 80073e0:	0019      	movs	r1, r3
 80073e2:	4b1b      	ldr	r3, [pc, #108]	; (8007450 <read_data_packet+0xdc>)
 80073e4:	881b      	ldrh	r3, [r3, #0]
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	001a      	movs	r2, r3
 80073ea:	4816      	ldr	r0, [pc, #88]	; (8007444 <read_data_packet+0xd0>)
 80073ec:	2320      	movs	r3, #32
 80073ee:	f002 f9bf 	bl	8009770 <W25qxx_ReadSector>
		//reading data//
		EndN = EndN + 32;
 80073f2:	4b17      	ldr	r3, [pc, #92]	; (8007450 <read_data_packet+0xdc>)
 80073f4:	881b      	ldrh	r3, [r3, #0]
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	3320      	adds	r3, #32
 80073fa:	b29a      	uxth	r2, r3
 80073fc:	4b14      	ldr	r3, [pc, #80]	; (8007450 <read_data_packet+0xdc>)
 80073fe:	801a      	strh	r2, [r3, #0]
		if (EndN > 4090) {
 8007400:	4b13      	ldr	r3, [pc, #76]	; (8007450 <read_data_packet+0xdc>)
 8007402:	881b      	ldrh	r3, [r3, #0]
 8007404:	b29b      	uxth	r3, r3
 8007406:	4a14      	ldr	r2, [pc, #80]	; (8007458 <read_data_packet+0xe4>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d916      	bls.n	800743a <read_data_packet+0xc6>
			if (EndSec == 1023) {
 800740c:	4b0e      	ldr	r3, [pc, #56]	; (8007448 <read_data_packet+0xd4>)
 800740e:	881b      	ldrh	r3, [r3, #0]
 8007410:	b29b      	uxth	r3, r3
 8007412:	4a12      	ldr	r2, [pc, #72]	; (800745c <read_data_packet+0xe8>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d106      	bne.n	8007426 <read_data_packet+0xb2>
				EndSec = 1;
 8007418:	4b0b      	ldr	r3, [pc, #44]	; (8007448 <read_data_packet+0xd4>)
 800741a:	2201      	movs	r2, #1
 800741c:	801a      	strh	r2, [r3, #0]
				EndN = 0;
 800741e:	4b0c      	ldr	r3, [pc, #48]	; (8007450 <read_data_packet+0xdc>)
 8007420:	2200      	movs	r2, #0
 8007422:	801a      	strh	r2, [r3, #0]
 8007424:	e009      	b.n	800743a <read_data_packet+0xc6>
			} else {
				EndSec = EndSec + 1;
 8007426:	4b08      	ldr	r3, [pc, #32]	; (8007448 <read_data_packet+0xd4>)
 8007428:	881b      	ldrh	r3, [r3, #0]
 800742a:	b29b      	uxth	r3, r3
 800742c:	3301      	adds	r3, #1
 800742e:	b29a      	uxth	r2, r3
 8007430:	4b05      	ldr	r3, [pc, #20]	; (8007448 <read_data_packet+0xd4>)
 8007432:	801a      	strh	r2, [r3, #0]
				EndN = 0;
 8007434:	4b06      	ldr	r3, [pc, #24]	; (8007450 <read_data_packet+0xdc>)
 8007436:	2200      	movs	r2, #0
 8007438:	801a      	strh	r2, [r3, #0]
			}
		}
		return 1;
 800743a:	2301      	movs	r3, #1
	}
}
 800743c:	0018      	movs	r0, r3
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}
 8007442:	46c0      	nop			; (mov r8, r8)
 8007444:	20000a54 	.word	0x20000a54
 8007448:	20000d1a 	.word	0x20000d1a
 800744c:	20000d18 	.word	0x20000d18
 8007450:	20000d16 	.word	0x20000d16
 8007454:	20000d14 	.word	0x20000d14
 8007458:	00000ffa 	.word	0x00000ffa
 800745c:	000003ff 	.word	0x000003ff

08007460 <create_status_info>:


void create_status_info(){
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af02      	add	r7, sp, #8

	//----------get voltage of vbatt-----------------
	send_command("AT+CBC\r\n", 4, 8, 3, 1);
 8007466:	4854      	ldr	r0, [pc, #336]	; (80075b8 <create_status_info+0x158>)
 8007468:	2301      	movs	r3, #1
 800746a:	9300      	str	r3, [sp, #0]
 800746c:	2303      	movs	r3, #3
 800746e:	2208      	movs	r2, #8
 8007470:	2104      	movs	r1, #4
 8007472:	f7ff f9a1 	bl	80067b8 <send_command>
	//-----------------------------------------------

	uint8_t SigStre = 20;
 8007476:	1dfb      	adds	r3, r7, #7
 8007478:	2214      	movs	r2, #20
 800747a:	701a      	strb	r2, [r3, #0]
		TermInfo = TermInfo | 0x80;
	}
	//if gps tracking is on

	if (1) {
		TermInfo = TermInfo | 0x40;
 800747c:	4b4f      	ldr	r3, [pc, #316]	; (80075bc <create_status_info+0x15c>)
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	2240      	movs	r2, #64	; 0x40
 8007482:	4313      	orrs	r3, r2
 8007484:	b2da      	uxtb	r2, r3
 8007486:	4b4d      	ldr	r3, [pc, #308]	; (80075bc <create_status_info+0x15c>)
 8007488:	701a      	strb	r2, [r3, #0]
	}
	//if SOS is on

	if (1) {
		TermInfo = TermInfo | 0x20;
 800748a:	4b4c      	ldr	r3, [pc, #304]	; (80075bc <create_status_info+0x15c>)
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	2220      	movs	r2, #32
 8007490:	4313      	orrs	r3, r2
 8007492:	b2da      	uxtb	r2, r3
 8007494:	4b49      	ldr	r3, [pc, #292]	; (80075bc <create_status_info+0x15c>)
 8007496:	701a      	strb	r2, [r3, #0]
	}
	//if Low batt alarm is on

	if (1) {
		TermInfo = TermInfo | 0x18;
 8007498:	4b48      	ldr	r3, [pc, #288]	; (80075bc <create_status_info+0x15c>)
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	2218      	movs	r2, #24
 800749e:	4313      	orrs	r3, r2
 80074a0:	b2da      	uxtb	r2, r3
 80074a2:	4b46      	ldr	r3, [pc, #280]	; (80075bc <create_status_info+0x15c>)
 80074a4:	701a      	strb	r2, [r3, #0]
	}
	//if Power Cut alarm is on

	if (1) {
		TermInfo = TermInfo | 0x10;
 80074a6:	4b45      	ldr	r3, [pc, #276]	; (80075bc <create_status_info+0x15c>)
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	2210      	movs	r2, #16
 80074ac:	4313      	orrs	r3, r2
 80074ae:	b2da      	uxtb	r2, r3
 80074b0:	4b42      	ldr	r3, [pc, #264]	; (80075bc <create_status_info+0x15c>)
 80074b2:	701a      	strb	r2, [r3, #0]
	}
	//if shock alarm is on
	if (1) {
		TermInfo = TermInfo | 0x8;
 80074b4:	4b41      	ldr	r3, [pc, #260]	; (80075bc <create_status_info+0x15c>)
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	2208      	movs	r2, #8
 80074ba:	4313      	orrs	r3, r2
 80074bc:	b2da      	uxtb	r2, r3
 80074be:	4b3f      	ldr	r3, [pc, #252]	; (80075bc <create_status_info+0x15c>)
 80074c0:	701a      	strb	r2, [r3, #0]
	}
	// 000 means normal
	//if charge is on
	if (1) {
		TermInfo = TermInfo | 0x4;
 80074c2:	4b3e      	ldr	r3, [pc, #248]	; (80075bc <create_status_info+0x15c>)
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	2204      	movs	r2, #4
 80074c8:	4313      	orrs	r3, r2
 80074ca:	b2da      	uxtb	r2, r3
 80074cc:	4b3b      	ldr	r3, [pc, #236]	; (80075bc <create_status_info+0x15c>)
 80074ce:	701a      	strb	r2, [r3, #0]
	}
	//if ACC is on
	if (accInputState) {
 80074d0:	4b3b      	ldr	r3, [pc, #236]	; (80075c0 <create_status_info+0x160>)
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d006      	beq.n	80074e8 <create_status_info+0x88>
		TermInfo = TermInfo | 0x2;
 80074da:	4b38      	ldr	r3, [pc, #224]	; (80075bc <create_status_info+0x15c>)
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	2202      	movs	r2, #2
 80074e0:	4313      	orrs	r3, r2
 80074e2:	b2da      	uxtb	r2, r3
 80074e4:	4b35      	ldr	r3, [pc, #212]	; (80075bc <create_status_info+0x15c>)
 80074e6:	701a      	strb	r2, [r3, #0]
	}
	//if Activated
	if (1) {
		TermInfo = TermInfo | 0x1;
 80074e8:	4b34      	ldr	r3, [pc, #208]	; (80075bc <create_status_info+0x15c>)
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	2201      	movs	r2, #1
 80074ee:	4313      	orrs	r3, r2
 80074f0:	b2da      	uxtb	r2, r3
 80074f2:	4b32      	ldr	r3, [pc, #200]	; (80075bc <create_status_info+0x15c>)
 80074f4:	701a      	strb	r2, [r3, #0]
	}
	if (voltage > 4110) {
 80074f6:	4b33      	ldr	r3, [pc, #204]	; (80075c4 <create_status_info+0x164>)
 80074f8:	881b      	ldrh	r3, [r3, #0]
 80074fa:	4a33      	ldr	r2, [pc, #204]	; (80075c8 <create_status_info+0x168>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d903      	bls.n	8007508 <create_status_info+0xa8>
		VLvl = 6;
 8007500:	4b32      	ldr	r3, [pc, #200]	; (80075cc <create_status_info+0x16c>)
 8007502:	2206      	movs	r2, #6
 8007504:	701a      	strb	r2, [r3, #0]
 8007506:	e02f      	b.n	8007568 <create_status_info+0x108>
	} else if (voltage > 4030) {
 8007508:	4b2e      	ldr	r3, [pc, #184]	; (80075c4 <create_status_info+0x164>)
 800750a:	881b      	ldrh	r3, [r3, #0]
 800750c:	4a30      	ldr	r2, [pc, #192]	; (80075d0 <create_status_info+0x170>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d903      	bls.n	800751a <create_status_info+0xba>
		VLvl = 5;
 8007512:	4b2e      	ldr	r3, [pc, #184]	; (80075cc <create_status_info+0x16c>)
 8007514:	2205      	movs	r2, #5
 8007516:	701a      	strb	r2, [r3, #0]
 8007518:	e026      	b.n	8007568 <create_status_info+0x108>

	} else if (voltage > 3950) {
 800751a:	4b2a      	ldr	r3, [pc, #168]	; (80075c4 <create_status_info+0x164>)
 800751c:	881b      	ldrh	r3, [r3, #0]
 800751e:	4a2d      	ldr	r2, [pc, #180]	; (80075d4 <create_status_info+0x174>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d903      	bls.n	800752c <create_status_info+0xcc>
		VLvl = 4;
 8007524:	4b29      	ldr	r3, [pc, #164]	; (80075cc <create_status_info+0x16c>)
 8007526:	2204      	movs	r2, #4
 8007528:	701a      	strb	r2, [r3, #0]
 800752a:	e01d      	b.n	8007568 <create_status_info+0x108>

	} else if (voltage > 3870) {
 800752c:	4b25      	ldr	r3, [pc, #148]	; (80075c4 <create_status_info+0x164>)
 800752e:	881b      	ldrh	r3, [r3, #0]
 8007530:	4a29      	ldr	r2, [pc, #164]	; (80075d8 <create_status_info+0x178>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d903      	bls.n	800753e <create_status_info+0xde>
		VLvl = 3;
 8007536:	4b25      	ldr	r3, [pc, #148]	; (80075cc <create_status_info+0x16c>)
 8007538:	2203      	movs	r2, #3
 800753a:	701a      	strb	r2, [r3, #0]
 800753c:	e014      	b.n	8007568 <create_status_info+0x108>

	} else if (voltage > 3790) {
 800753e:	4b21      	ldr	r3, [pc, #132]	; (80075c4 <create_status_info+0x164>)
 8007540:	881b      	ldrh	r3, [r3, #0]
 8007542:	4a26      	ldr	r2, [pc, #152]	; (80075dc <create_status_info+0x17c>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d903      	bls.n	8007550 <create_status_info+0xf0>
		VLvl = 2;
 8007548:	4b20      	ldr	r3, [pc, #128]	; (80075cc <create_status_info+0x16c>)
 800754a:	2202      	movs	r2, #2
 800754c:	701a      	strb	r2, [r3, #0]
 800754e:	e00b      	b.n	8007568 <create_status_info+0x108>

	} else if (voltage > 3710) {
 8007550:	4b1c      	ldr	r3, [pc, #112]	; (80075c4 <create_status_info+0x164>)
 8007552:	881b      	ldrh	r3, [r3, #0]
 8007554:	4a22      	ldr	r2, [pc, #136]	; (80075e0 <create_status_info+0x180>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d903      	bls.n	8007562 <create_status_info+0x102>
		VLvl = 1;
 800755a:	4b1c      	ldr	r3, [pc, #112]	; (80075cc <create_status_info+0x16c>)
 800755c:	2201      	movs	r2, #1
 800755e:	701a      	strb	r2, [r3, #0]
 8007560:	e002      	b.n	8007568 <create_status_info+0x108>

	} else {
		VLvl = 0;
 8007562:	4b1a      	ldr	r3, [pc, #104]	; (80075cc <create_status_info+0x16c>)
 8007564:	2200      	movs	r2, #0
 8007566:	701a      	strb	r2, [r3, #0]

	}
	if (SigStre > 19) {
 8007568:	1dfb      	adds	r3, r7, #7
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	2b13      	cmp	r3, #19
 800756e:	d903      	bls.n	8007578 <create_status_info+0x118>
		GSMSS = 4;
 8007570:	4b1c      	ldr	r3, [pc, #112]	; (80075e4 <create_status_info+0x184>)
 8007572:	2204      	movs	r2, #4
 8007574:	701a      	strb	r2, [r3, #0]
		GSMSS = 1;
	} else {
		GSMSS = 0;
	}

}
 8007576:	e01a      	b.n	80075ae <create_status_info+0x14e>
	} else if (SigStre > 14) {
 8007578:	1dfb      	adds	r3, r7, #7
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	2b0e      	cmp	r3, #14
 800757e:	d903      	bls.n	8007588 <create_status_info+0x128>
		GSMSS = 3;
 8007580:	4b18      	ldr	r3, [pc, #96]	; (80075e4 <create_status_info+0x184>)
 8007582:	2203      	movs	r2, #3
 8007584:	701a      	strb	r2, [r3, #0]
}
 8007586:	e012      	b.n	80075ae <create_status_info+0x14e>
	} else if (SigStre > 9) {
 8007588:	1dfb      	adds	r3, r7, #7
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	2b09      	cmp	r3, #9
 800758e:	d903      	bls.n	8007598 <create_status_info+0x138>
		GSMSS = 2;
 8007590:	4b14      	ldr	r3, [pc, #80]	; (80075e4 <create_status_info+0x184>)
 8007592:	2202      	movs	r2, #2
 8007594:	701a      	strb	r2, [r3, #0]
}
 8007596:	e00a      	b.n	80075ae <create_status_info+0x14e>
	} else if (SigStre > 1) {
 8007598:	1dfb      	adds	r3, r7, #7
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	2b01      	cmp	r3, #1
 800759e:	d903      	bls.n	80075a8 <create_status_info+0x148>
		GSMSS = 1;
 80075a0:	4b10      	ldr	r3, [pc, #64]	; (80075e4 <create_status_info+0x184>)
 80075a2:	2201      	movs	r2, #1
 80075a4:	701a      	strb	r2, [r3, #0]
}
 80075a6:	e002      	b.n	80075ae <create_status_info+0x14e>
		GSMSS = 0;
 80075a8:	4b0e      	ldr	r3, [pc, #56]	; (80075e4 <create_status_info+0x184>)
 80075aa:	2200      	movs	r2, #0
 80075ac:	701a      	strb	r2, [r3, #0]
}
 80075ae:	46c0      	nop			; (mov r8, r8)
 80075b0:	46bd      	mov	sp, r7
 80075b2:	b002      	add	sp, #8
 80075b4:	bd80      	pop	{r7, pc}
 80075b6:	46c0      	nop			; (mov r8, r8)
 80075b8:	0801326c 	.word	0x0801326c
 80075bc:	2000072b 	.word	0x2000072b
 80075c0:	20000726 	.word	0x20000726
 80075c4:	20000002 	.word	0x20000002
 80075c8:	0000100e 	.word	0x0000100e
 80075cc:	2000072d 	.word	0x2000072d
 80075d0:	00000fbe 	.word	0x00000fbe
 80075d4:	00000f6e 	.word	0x00000f6e
 80075d8:	00000f1e 	.word	0x00000f1e
 80075dc:	00000ece 	.word	0x00000ece
 80075e0:	00000e7e 	.word	0x00000e7e
 80075e4:	2000072c 	.word	0x2000072c

080075e8 <send_hb_packet>:

void send_hb_packet() {
 80075e8:	b5b0      	push	{r4, r5, r7, lr}
 80075ea:	b086      	sub	sp, #24
 80075ec:	af00      	add	r7, sp, #0
	if (isTcpOpen == 1 && isDataMode == 1) {
 80075ee:	4b37      	ldr	r3, [pc, #220]	; (80076cc <send_hb_packet+0xe4>)
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d164      	bne.n	80076c2 <send_hb_packet+0xda>
 80075f8:	4b35      	ldr	r3, [pc, #212]	; (80076d0 <send_hb_packet+0xe8>)
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d15f      	bne.n	80076c2 <send_hb_packet+0xda>

		create_status_info();
 8007602:	f7ff ff2d 	bl	8007460 <create_status_info>
		heartbeatPacket[4] = TermInfo;
 8007606:	4b33      	ldr	r3, [pc, #204]	; (80076d4 <send_hb_packet+0xec>)
 8007608:	781a      	ldrb	r2, [r3, #0]
 800760a:	4b33      	ldr	r3, [pc, #204]	; (80076d8 <send_hb_packet+0xf0>)
 800760c:	711a      	strb	r2, [r3, #4]
		heartbeatPacket[5] = VLvl;
 800760e:	4b33      	ldr	r3, [pc, #204]	; (80076dc <send_hb_packet+0xf4>)
 8007610:	781a      	ldrb	r2, [r3, #0]
 8007612:	4b31      	ldr	r3, [pc, #196]	; (80076d8 <send_hb_packet+0xf0>)
 8007614:	715a      	strb	r2, [r3, #5]
		heartbeatPacket[6] = GSMSS;
 8007616:	4b32      	ldr	r3, [pc, #200]	; (80076e0 <send_hb_packet+0xf8>)
 8007618:	781a      	ldrb	r2, [r3, #0]
 800761a:	4b2f      	ldr	r3, [pc, #188]	; (80076d8 <send_hb_packet+0xf0>)
 800761c:	719a      	strb	r2, [r3, #6]
		heartbeatPacket[7] = 0;
 800761e:	4b2e      	ldr	r3, [pc, #184]	; (80076d8 <send_hb_packet+0xf0>)
 8007620:	2200      	movs	r2, #0
 8007622:	71da      	strb	r2, [r3, #7]
		heartbeatPacket[8] = 2;
 8007624:	4b2c      	ldr	r3, [pc, #176]	; (80076d8 <send_hb_packet+0xf0>)
 8007626:	2202      	movs	r2, #2
 8007628:	721a      	strb	r2, [r3, #8]
		heartbeatPacket[9] = infoSNo >> 8;
 800762a:	4b2e      	ldr	r3, [pc, #184]	; (80076e4 <send_hb_packet+0xfc>)
 800762c:	881b      	ldrh	r3, [r3, #0]
 800762e:	0a1b      	lsrs	r3, r3, #8
 8007630:	b29b      	uxth	r3, r3
 8007632:	b2da      	uxtb	r2, r3
 8007634:	4b28      	ldr	r3, [pc, #160]	; (80076d8 <send_hb_packet+0xf0>)
 8007636:	725a      	strb	r2, [r3, #9]
		heartbeatPacket[10] = infoSNo;
 8007638:	4b2a      	ldr	r3, [pc, #168]	; (80076e4 <send_hb_packet+0xfc>)
 800763a:	881b      	ldrh	r3, [r3, #0]
 800763c:	b2da      	uxtb	r2, r3
 800763e:	4b26      	ldr	r3, [pc, #152]	; (80076d8 <send_hb_packet+0xf0>)
 8007640:	729a      	strb	r2, [r3, #10]

		uint8_t tempCrcData[9];
		for (uint8_t i = 0; i < 10; i++) {
 8007642:	2317      	movs	r3, #23
 8007644:	18fb      	adds	r3, r7, r3
 8007646:	2200      	movs	r2, #0
 8007648:	701a      	strb	r2, [r3, #0]
 800764a:	e00e      	b.n	800766a <send_hb_packet+0x82>
			tempCrcData[i] = heartbeatPacket[i + 2];
 800764c:	2017      	movs	r0, #23
 800764e:	183b      	adds	r3, r7, r0
 8007650:	781b      	ldrb	r3, [r3, #0]
 8007652:	1c9a      	adds	r2, r3, #2
 8007654:	183b      	adds	r3, r7, r0
 8007656:	781b      	ldrb	r3, [r3, #0]
 8007658:	491f      	ldr	r1, [pc, #124]	; (80076d8 <send_hb_packet+0xf0>)
 800765a:	5c89      	ldrb	r1, [r1, r2]
 800765c:	1d3a      	adds	r2, r7, #4
 800765e:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 10; i++) {
 8007660:	183b      	adds	r3, r7, r0
 8007662:	781a      	ldrb	r2, [r3, #0]
 8007664:	183b      	adds	r3, r7, r0
 8007666:	3201      	adds	r2, #1
 8007668:	701a      	strb	r2, [r3, #0]
 800766a:	2317      	movs	r3, #23
 800766c:	18fb      	adds	r3, r7, r3
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	2b09      	cmp	r3, #9
 8007672:	d9eb      	bls.n	800764c <send_hb_packet+0x64>
		}
		uint8_t *tempPtr = tempCrcData;
 8007674:	1d3b      	adds	r3, r7, #4
 8007676:	613b      	str	r3, [r7, #16]
		uint16_t crcResult = 0;
 8007678:	250e      	movs	r5, #14
 800767a:	197b      	adds	r3, r7, r5
 800767c:	2200      	movs	r2, #0
 800767e:	801a      	strh	r2, [r3, #0]
		crcResult = GetCrc16(tempPtr,
 8007680:	197c      	adds	r4, r7, r5
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	2109      	movs	r1, #9
 8007686:	0018      	movs	r0, r3
 8007688:	f7ff fa68 	bl	8006b5c <GetCrc16>
 800768c:	0003      	movs	r3, r0
 800768e:	8023      	strh	r3, [r4, #0]
				sizeof(tempCrcData) / sizeof(tempCrcData[0]));
		heartbeatPacket[11] = crcResult >> 8;
 8007690:	0029      	movs	r1, r5
 8007692:	187b      	adds	r3, r7, r1
 8007694:	881b      	ldrh	r3, [r3, #0]
 8007696:	0a1b      	lsrs	r3, r3, #8
 8007698:	b29b      	uxth	r3, r3
 800769a:	b2da      	uxtb	r2, r3
 800769c:	4b0e      	ldr	r3, [pc, #56]	; (80076d8 <send_hb_packet+0xf0>)
 800769e:	72da      	strb	r2, [r3, #11]
		heartbeatPacket[12] = crcResult;
 80076a0:	187b      	adds	r3, r7, r1
 80076a2:	881b      	ldrh	r3, [r3, #0]
 80076a4:	b2da      	uxtb	r2, r3
 80076a6:	4b0c      	ldr	r3, [pc, #48]	; (80076d8 <send_hb_packet+0xf0>)
 80076a8:	731a      	strb	r2, [r3, #12]
		HAL_UART_Transmit(&AT_PORT, heartbeatPacket, 15, 100);
 80076aa:	490b      	ldr	r1, [pc, #44]	; (80076d8 <send_hb_packet+0xf0>)
 80076ac:	480e      	ldr	r0, [pc, #56]	; (80076e8 <send_hb_packet+0x100>)
 80076ae:	2364      	movs	r3, #100	; 0x64
 80076b0:	220f      	movs	r2, #15
 80076b2:	f005 fbaf 	bl	800ce14 <HAL_UART_Transmit>
		infoSNo++;
 80076b6:	4b0b      	ldr	r3, [pc, #44]	; (80076e4 <send_hb_packet+0xfc>)
 80076b8:	881b      	ldrh	r3, [r3, #0]
 80076ba:	3301      	adds	r3, #1
 80076bc:	b29a      	uxth	r2, r3
 80076be:	4b09      	ldr	r3, [pc, #36]	; (80076e4 <send_hb_packet+0xfc>)
 80076c0:	801a      	strh	r2, [r3, #0]

	}
}
 80076c2:	46c0      	nop			; (mov r8, r8)
 80076c4:	46bd      	mov	sp, r7
 80076c6:	b006      	add	sp, #24
 80076c8:	bdb0      	pop	{r4, r5, r7, pc}
 80076ca:	46c0      	nop			; (mov r8, r8)
 80076cc:	20000a2c 	.word	0x20000a2c
 80076d0:	2000087a 	.word	0x2000087a
 80076d4:	2000072b 	.word	0x2000072b
 80076d8:	200000c8 	.word	0x200000c8
 80076dc:	2000072d 	.word	0x2000072d
 80076e0:	2000072c 	.word	0x2000072c
 80076e4:	2000006c 	.word	0x2000006c
 80076e8:	200004c8 	.word	0x200004c8

080076ec <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b082      	sub	sp, #8
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]

	if(isDataMode == 1){
 80076f4:	4b26      	ldr	r3, [pc, #152]	; (8007790 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d144      	bne.n	8007788 <HAL_TIM_IC_CaptureCallback+0x9c>
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	7f1b      	ldrb	r3, [r3, #28]
 8007702:	2b01      	cmp	r3, #1
 8007704:	d140      	bne.n	8007788 <HAL_TIM_IC_CaptureCallback+0x9c>
			currentValueIC = TIM3->CNT;
 8007706:	4b23      	ldr	r3, [pc, #140]	; (8007794 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8007708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800770a:	b29a      	uxth	r2, r3
 800770c:	4b22      	ldr	r3, [pc, #136]	; (8007798 <HAL_TIM_IC_CaptureCallback+0xac>)
 800770e:	801a      	strh	r2, [r3, #0]

			if(currentValueIC>lastValueIC){
 8007710:	4b21      	ldr	r3, [pc, #132]	; (8007798 <HAL_TIM_IC_CaptureCallback+0xac>)
 8007712:	881b      	ldrh	r3, [r3, #0]
 8007714:	b29a      	uxth	r2, r3
 8007716:	4b21      	ldr	r3, [pc, #132]	; (800779c <HAL_TIM_IC_CaptureCallback+0xb0>)
 8007718:	881b      	ldrh	r3, [r3, #0]
 800771a:	b29b      	uxth	r3, r3
 800771c:	429a      	cmp	r2, r3
 800771e:	d90a      	bls.n	8007736 <HAL_TIM_IC_CaptureCallback+0x4a>
				diff = currentValueIC - lastValueIC;
 8007720:	4b1d      	ldr	r3, [pc, #116]	; (8007798 <HAL_TIM_IC_CaptureCallback+0xac>)
 8007722:	881b      	ldrh	r3, [r3, #0]
 8007724:	b29a      	uxth	r2, r3
 8007726:	4b1d      	ldr	r3, [pc, #116]	; (800779c <HAL_TIM_IC_CaptureCallback+0xb0>)
 8007728:	881b      	ldrh	r3, [r3, #0]
 800772a:	b29b      	uxth	r3, r3
 800772c:	1ad3      	subs	r3, r2, r3
 800772e:	b29a      	uxth	r2, r3
 8007730:	4b1b      	ldr	r3, [pc, #108]	; (80077a0 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8007732:	801a      	strh	r2, [r3, #0]
 8007734:	e016      	b.n	8007764 <HAL_TIM_IC_CaptureCallback+0x78>
			}
			else if(currentValueIC < lastValueIC)
 8007736:	4b18      	ldr	r3, [pc, #96]	; (8007798 <HAL_TIM_IC_CaptureCallback+0xac>)
 8007738:	881b      	ldrh	r3, [r3, #0]
 800773a:	b29a      	uxth	r2, r3
 800773c:	4b17      	ldr	r3, [pc, #92]	; (800779c <HAL_TIM_IC_CaptureCallback+0xb0>)
 800773e:	881b      	ldrh	r3, [r3, #0]
 8007740:	b29b      	uxth	r3, r3
 8007742:	429a      	cmp	r2, r3
 8007744:	d20e      	bcs.n	8007764 <HAL_TIM_IC_CaptureCallback+0x78>
			{
				diff = (1000 - lastValueIC) + currentValueIC;
 8007746:	4b14      	ldr	r3, [pc, #80]	; (8007798 <HAL_TIM_IC_CaptureCallback+0xac>)
 8007748:	881b      	ldrh	r3, [r3, #0]
 800774a:	b29a      	uxth	r2, r3
 800774c:	4b13      	ldr	r3, [pc, #76]	; (800779c <HAL_TIM_IC_CaptureCallback+0xb0>)
 800774e:	881b      	ldrh	r3, [r3, #0]
 8007750:	b29b      	uxth	r3, r3
 8007752:	1ad3      	subs	r3, r2, r3
 8007754:	b29b      	uxth	r3, r3
 8007756:	22fa      	movs	r2, #250	; 0xfa
 8007758:	0092      	lsls	r2, r2, #2
 800775a:	4694      	mov	ip, r2
 800775c:	4463      	add	r3, ip
 800775e:	b29a      	uxth	r2, r3
 8007760:	4b0f      	ldr	r3, [pc, #60]	; (80077a0 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8007762:	801a      	strh	r2, [r3, #0]
			}
			if(diff > 100 && diff < 145){
 8007764:	4b0e      	ldr	r3, [pc, #56]	; (80077a0 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8007766:	881b      	ldrh	r3, [r3, #0]
 8007768:	b29b      	uxth	r3, r3
 800776a:	2b64      	cmp	r3, #100	; 0x64
 800776c:	d907      	bls.n	800777e <HAL_TIM_IC_CaptureCallback+0x92>
 800776e:	4b0c      	ldr	r3, [pc, #48]	; (80077a0 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8007770:	881b      	ldrh	r3, [r3, #0]
 8007772:	b29b      	uxth	r3, r3
 8007774:	2b90      	cmp	r3, #144	; 0x90
 8007776:	d802      	bhi.n	800777e <HAL_TIM_IC_CaptureCallback+0x92>
				isPulse = 1;
 8007778:	4b0a      	ldr	r3, [pc, #40]	; (80077a4 <HAL_TIM_IC_CaptureCallback+0xb8>)
 800777a:	2201      	movs	r2, #1
 800777c:	701a      	strb	r2, [r3, #0]
			}
			lastValueIC = currentValueIC;
 800777e:	4b06      	ldr	r3, [pc, #24]	; (8007798 <HAL_TIM_IC_CaptureCallback+0xac>)
 8007780:	881b      	ldrh	r3, [r3, #0]
 8007782:	b29a      	uxth	r2, r3
 8007784:	4b05      	ldr	r3, [pc, #20]	; (800779c <HAL_TIM_IC_CaptureCallback+0xb0>)
 8007786:	801a      	strh	r2, [r3, #0]
		}
	}

}
 8007788:	46c0      	nop			; (mov r8, r8)
 800778a:	46bd      	mov	sp, r7
 800778c:	b002      	add	sp, #8
 800778e:	bd80      	pop	{r7, pc}
 8007790:	2000087a 	.word	0x2000087a
 8007794:	40000400 	.word	0x40000400
 8007798:	2000071a 	.word	0x2000071a
 800779c:	20000718 	.word	0x20000718
 80077a0:	2000071c 	.word	0x2000071c
 80077a4:	2000073d 	.word	0x2000073d

080077a8 <substring>:

char* substring(char *destination, const char *source, uint8_t beg, uint8_t n) {
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	60b9      	str	r1, [r7, #8]
 80077b2:	0019      	movs	r1, r3
 80077b4:	1dfb      	adds	r3, r7, #7
 80077b6:	701a      	strb	r2, [r3, #0]
 80077b8:	1dbb      	adds	r3, r7, #6
 80077ba:	1c0a      	adds	r2, r1, #0
 80077bc:	701a      	strb	r2, [r3, #0]
	// extracts `n` characters from the source string starting from `beg` index
	// and copy them into the destination string
	while (n > 0) {
 80077be:	e011      	b.n	80077e4 <substring+0x3c>
		*destination = *(source + beg);
 80077c0:	1dfb      	adds	r3, r7, #7
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	68ba      	ldr	r2, [r7, #8]
 80077c6:	18d3      	adds	r3, r2, r3
 80077c8:	781a      	ldrb	r2, [r3, #0]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	701a      	strb	r2, [r3, #0]
		destination++;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	3301      	adds	r3, #1
 80077d2:	60fb      	str	r3, [r7, #12]
		source++;
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	3301      	adds	r3, #1
 80077d8:	60bb      	str	r3, [r7, #8]
		n--;
 80077da:	1dbb      	adds	r3, r7, #6
 80077dc:	781a      	ldrb	r2, [r3, #0]
 80077de:	1dbb      	adds	r3, r7, #6
 80077e0:	3a01      	subs	r2, #1
 80077e2:	701a      	strb	r2, [r3, #0]
	while (n > 0) {
 80077e4:	1dbb      	adds	r3, r7, #6
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d1e9      	bne.n	80077c0 <substring+0x18>
	}

	// null terminate destination string
	*destination = '\0';
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2200      	movs	r2, #0
 80077f0:	701a      	strb	r2, [r3, #0]

	// return the destination string
	return destination;
 80077f2:	68fb      	ldr	r3, [r7, #12]
}
 80077f4:	0018      	movs	r0, r3
 80077f6:	46bd      	mov	sp, r7
 80077f8:	b004      	add	sp, #16
 80077fa:	bd80      	pop	{r7, pc}

080077fc <send_imei_via_sms>:

void send_imei_via_sms() {
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b0a8      	sub	sp, #160	; 0xa0
 8007800:	af02      	add	r7, sp, #8
	if (isNumValid == 1) {
 8007802:	4b33      	ldr	r3, [pc, #204]	; (80078d0 <send_imei_via_sms+0xd4>)
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	2b01      	cmp	r3, #1
 8007808:	d15d      	bne.n	80078c6 <send_imei_via_sms+0xca>
		//printf("sending message(current location)\n");
		// send_command("AT+CMGS=\"3352093997\"\n\r", 10, 6, 0, 0);
		char tempMsg[150];
		memset(tempMsg, 0, sizeof(tempMsg));
 800780a:	003b      	movs	r3, r7
 800780c:	2296      	movs	r2, #150	; 0x96
 800780e:	2100      	movs	r1, #0
 8007810:	0018      	movs	r0, r3
 8007812:	f007 fa5a 	bl	800ecca <memset>
		strcat(tempMsg,"AT+CMGS=\"");
 8007816:	003b      	movs	r3, r7
 8007818:	0018      	movs	r0, r3
 800781a:	f7f8 fc7b 	bl	8000114 <strlen>
 800781e:	0003      	movs	r3, r0
 8007820:	001a      	movs	r2, r3
 8007822:	003b      	movs	r3, r7
 8007824:	189a      	adds	r2, r3, r2
 8007826:	4b2b      	ldr	r3, [pc, #172]	; (80078d4 <send_imei_via_sms+0xd8>)
 8007828:	0010      	movs	r0, r2
 800782a:	0019      	movs	r1, r3
 800782c:	230a      	movs	r3, #10
 800782e:	001a      	movs	r2, r3
 8007830:	f007 fa42 	bl	800ecb8 <memcpy>
		strcat(tempMsg,validSender);
 8007834:	4a28      	ldr	r2, [pc, #160]	; (80078d8 <send_imei_via_sms+0xdc>)
 8007836:	003b      	movs	r3, r7
 8007838:	0011      	movs	r1, r2
 800783a:	0018      	movs	r0, r3
 800783c:	f007 fa6e 	bl	800ed1c <strcat>
		strcat(tempMsg,"\"\r");
 8007840:	003b      	movs	r3, r7
 8007842:	0018      	movs	r0, r3
 8007844:	f7f8 fc66 	bl	8000114 <strlen>
 8007848:	0003      	movs	r3, r0
 800784a:	001a      	movs	r2, r3
 800784c:	003b      	movs	r3, r7
 800784e:	189a      	adds	r2, r3, r2
 8007850:	4b22      	ldr	r3, [pc, #136]	; (80078dc <send_imei_via_sms+0xe0>)
 8007852:	0010      	movs	r0, r2
 8007854:	0019      	movs	r1, r3
 8007856:	2303      	movs	r3, #3
 8007858:	001a      	movs	r2, r3
 800785a:	f007 fa2d 	bl	800ecb8 <memcpy>
//		strcat(tempMsg, "AT+CMGS=\"3322336979\"\r");
		strcat(tempMsg, "IMEI:");
 800785e:	003b      	movs	r3, r7
 8007860:	0018      	movs	r0, r3
 8007862:	f7f8 fc57 	bl	8000114 <strlen>
 8007866:	0003      	movs	r3, r0
 8007868:	001a      	movs	r2, r3
 800786a:	003b      	movs	r3, r7
 800786c:	189a      	adds	r2, r3, r2
 800786e:	4b1c      	ldr	r3, [pc, #112]	; (80078e0 <send_imei_via_sms+0xe4>)
 8007870:	0010      	movs	r0, r2
 8007872:	0019      	movs	r1, r3
 8007874:	2306      	movs	r3, #6
 8007876:	001a      	movs	r2, r3
 8007878:	f007 fa1e 	bl	800ecb8 <memcpy>
		strcat(tempMsg, imeiChar);
 800787c:	4a19      	ldr	r2, [pc, #100]	; (80078e4 <send_imei_via_sms+0xe8>)
 800787e:	003b      	movs	r3, r7
 8007880:	0011      	movs	r1, r2
 8007882:	0018      	movs	r0, r3
 8007884:	f007 fa4a 	bl	800ed1c <strcat>
		//todo replace while with for loop
		uint8_t tempCount = 0;
 8007888:	2397      	movs	r3, #151	; 0x97
 800788a:	18fb      	adds	r3, r7, r3
 800788c:	2200      	movs	r2, #0
 800788e:	701a      	strb	r2, [r3, #0]
		while (tempMsg[tempCount] != NULL) {
 8007890:	e005      	b.n	800789e <send_imei_via_sms+0xa2>
			tempCount++;
 8007892:	2197      	movs	r1, #151	; 0x97
 8007894:	187b      	adds	r3, r7, r1
 8007896:	781a      	ldrb	r2, [r3, #0]
 8007898:	187b      	adds	r3, r7, r1
 800789a:	3201      	adds	r2, #1
 800789c:	701a      	strb	r2, [r3, #0]
		while (tempMsg[tempCount] != NULL) {
 800789e:	2197      	movs	r1, #151	; 0x97
 80078a0:	187b      	adds	r3, r7, r1
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	003a      	movs	r2, r7
 80078a6:	5cd3      	ldrb	r3, [r2, r3]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d1f2      	bne.n	8007892 <send_imei_via_sms+0x96>
		}
		tempMsg[tempCount] = 26;
 80078ac:	187b      	adds	r3, r7, r1
 80078ae:	781b      	ldrb	r3, [r3, #0]
 80078b0:	003a      	movs	r2, r7
 80078b2:	211a      	movs	r1, #26
 80078b4:	54d1      	strb	r1, [r2, r3]
		//printf("--Sending message to mobile \n");
		send_command(tempMsg, 12005, 7, 0, 0);
 80078b6:	490c      	ldr	r1, [pc, #48]	; (80078e8 <send_imei_via_sms+0xec>)
 80078b8:	0038      	movs	r0, r7
 80078ba:	2300      	movs	r3, #0
 80078bc:	9300      	str	r3, [sp, #0]
 80078be:	2300      	movs	r3, #0
 80078c0:	2207      	movs	r2, #7
 80078c2:	f7fe ff79 	bl	80067b8 <send_command>
		// char tecMsg[] = {'A','T','+','C','M','G','S','=','\"','3','3','2','2','3','3','6','9','7','9','\"','\r','h','e','l','l','o',26,0};
		//    send_command(tecMsg, 12005, 7, 0, 0);
	}
}
 80078c6:	46c0      	nop			; (mov r8, r8)
 80078c8:	46bd      	mov	sp, r7
 80078ca:	b026      	add	sp, #152	; 0x98
 80078cc:	bd80      	pop	{r7, pc}
 80078ce:	46c0      	nop			; (mov r8, r8)
 80078d0:	2000071e 	.word	0x2000071e
 80078d4:	08013350 	.word	0x08013350
 80078d8:	20000008 	.word	0x20000008
 80078dc:	0801335c 	.word	0x0801335c
 80078e0:	08013360 	.word	0x08013360
 80078e4:	2000088c 	.word	0x2000088c
 80078e8:	00002ee5 	.word	0x00002ee5

080078ec <send_current_location_via_sms>:

void send_current_location_via_sms() {
 80078ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078ee:	b0b9      	sub	sp, #228	; 0xe4
 80078f0:	af02      	add	r7, sp, #8
	if (isNumValid == 1) {
 80078f2:	4be9      	ldr	r3, [pc, #932]	; (8007c98 <send_current_location_via_sms+0x3ac>)
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d000      	beq.n	80078fc <send_current_location_via_sms+0x10>
 80078fa:	e1c9      	b.n	8007c90 <send_current_location_via_sms+0x3a4>
		//printf("sending message(current location)\n");
		// send_command("AT+CMGS=\"3352093997\"\n\r", 10, 6, 0, 0);
		char tempMsg[150];
		uint8_t speed = 0;
 80078fc:	21d6      	movs	r1, #214	; 0xd6
 80078fe:	187b      	adds	r3, r7, r1
 8007900:	2200      	movs	r2, #0
 8007902:	701a      	strb	r2, [r3, #0]
		uint32_t lat = 0, lon = 0;
 8007904:	2300      	movs	r3, #0
 8007906:	20d0      	movs	r0, #208	; 0xd0
 8007908:	183a      	adds	r2, r7, r0
 800790a:	6013      	str	r3, [r2, #0]
 800790c:	2300      	movs	r3, #0
 800790e:	24cc      	movs	r4, #204	; 0xcc
 8007910:	193a      	adds	r2, r7, r4
 8007912:	6013      	str	r3, [r2, #0]
		double tempFloat;
		double tempMin;
		uint8_t tempDeg;
		char buf[15];
		float latitude, longitude;
		lat = (gps_info[7] << 24) | (gps_info[8] << 16) | (gps_info[9] << 8)
 8007914:	4be1      	ldr	r3, [pc, #900]	; (8007c9c <send_current_location_via_sms+0x3b0>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	3307      	adds	r3, #7
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	061a      	lsls	r2, r3, #24
 800791e:	4bdf      	ldr	r3, [pc, #892]	; (8007c9c <send_current_location_via_sms+0x3b0>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	3308      	adds	r3, #8
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	041b      	lsls	r3, r3, #16
 8007928:	431a      	orrs	r2, r3
 800792a:	4bdc      	ldr	r3, [pc, #880]	; (8007c9c <send_current_location_via_sms+0x3b0>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	3309      	adds	r3, #9
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	021b      	lsls	r3, r3, #8
 8007934:	431a      	orrs	r2, r3
		| gps_info[10];
 8007936:	4bd9      	ldr	r3, [pc, #868]	; (8007c9c <send_current_location_via_sms+0x3b0>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	330a      	adds	r3, #10
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	4313      	orrs	r3, r2
		lat = (gps_info[7] << 24) | (gps_info[8] << 16) | (gps_info[9] << 8)
 8007940:	183a      	adds	r2, r7, r0
 8007942:	6013      	str	r3, [r2, #0]
		lon = (gps_info[11] << 24) | (gps_info[12] << 16) | (gps_info[13] << 8)
 8007944:	4bd5      	ldr	r3, [pc, #852]	; (8007c9c <send_current_location_via_sms+0x3b0>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	330b      	adds	r3, #11
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	061a      	lsls	r2, r3, #24
 800794e:	4bd3      	ldr	r3, [pc, #844]	; (8007c9c <send_current_location_via_sms+0x3b0>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	330c      	adds	r3, #12
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	041b      	lsls	r3, r3, #16
 8007958:	431a      	orrs	r2, r3
 800795a:	4bd0      	ldr	r3, [pc, #832]	; (8007c9c <send_current_location_via_sms+0x3b0>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	330d      	adds	r3, #13
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	021b      	lsls	r3, r3, #8
 8007964:	431a      	orrs	r2, r3
		| gps_info[14];
 8007966:	4bcd      	ldr	r3, [pc, #820]	; (8007c9c <send_current_location_via_sms+0x3b0>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	330e      	adds	r3, #14
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	4313      	orrs	r3, r2
		lon = (gps_info[11] << 24) | (gps_info[12] << 16) | (gps_info[13] << 8)
 8007970:	193a      	adds	r2, r7, r4
 8007972:	6013      	str	r3, [r2, #0]
		speed = gps_info[15];
 8007974:	4bc9      	ldr	r3, [pc, #804]	; (8007c9c <send_current_location_via_sms+0x3b0>)
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	187b      	adds	r3, r7, r1
 800797a:	7bd2      	ldrb	r2, [r2, #15]
 800797c:	701a      	strb	r2, [r3, #0]
		tempFloat = lat / 30000.0;
 800797e:	183a      	adds	r2, r7, r0
 8007980:	6810      	ldr	r0, [r2, #0]
 8007982:	f7fa fed3 	bl	800272c <__aeabi_ui2d>
 8007986:	2200      	movs	r2, #0
 8007988:	4bc5      	ldr	r3, [pc, #788]	; (8007ca0 <send_current_location_via_sms+0x3b4>)
 800798a:	f7f9 fc4b 	bl	8001224 <__aeabi_ddiv>
 800798e:	0002      	movs	r2, r0
 8007990:	000b      	movs	r3, r1
 8007992:	24c0      	movs	r4, #192	; 0xc0
 8007994:	1938      	adds	r0, r7, r4
 8007996:	6002      	str	r2, [r0, #0]
 8007998:	6043      	str	r3, [r0, #4]
		tempDeg = (int) tempFloat / 60;
 800799a:	193a      	adds	r2, r7, r4
 800799c:	6810      	ldr	r0, [r2, #0]
 800799e:	6851      	ldr	r1, [r2, #4]
 80079a0:	f7fa fe5e 	bl	8002660 <__aeabi_d2iz>
 80079a4:	0003      	movs	r3, r0
 80079a6:	213c      	movs	r1, #60	; 0x3c
 80079a8:	0018      	movs	r0, r3
 80079aa:	f7f8 fc59 	bl	8000260 <__divsi3>
 80079ae:	0003      	movs	r3, r0
 80079b0:	001a      	movs	r2, r3
 80079b2:	26bf      	movs	r6, #191	; 0xbf
 80079b4:	19bb      	adds	r3, r7, r6
 80079b6:	701a      	strb	r2, [r3, #0]
		tempMin = (int) tempFloat % 60;
 80079b8:	193a      	adds	r2, r7, r4
 80079ba:	6810      	ldr	r0, [r2, #0]
 80079bc:	6851      	ldr	r1, [r2, #4]
 80079be:	f7fa fe4f 	bl	8002660 <__aeabi_d2iz>
 80079c2:	0003      	movs	r3, r0
 80079c4:	213c      	movs	r1, #60	; 0x3c
 80079c6:	0018      	movs	r0, r3
 80079c8:	f7f8 fd30 	bl	800042c <__aeabi_idivmod>
 80079cc:	000b      	movs	r3, r1
 80079ce:	0018      	movs	r0, r3
 80079d0:	f7fa fe7c 	bl	80026cc <__aeabi_i2d>
 80079d4:	0002      	movs	r2, r0
 80079d6:	000b      	movs	r3, r1
 80079d8:	25b0      	movs	r5, #176	; 0xb0
 80079da:	1978      	adds	r0, r7, r5
 80079dc:	6002      	str	r2, [r0, #0]
 80079de:	6043      	str	r3, [r0, #4]
		tempFloat = tempFloat - (int) tempFloat;
 80079e0:	193a      	adds	r2, r7, r4
 80079e2:	6810      	ldr	r0, [r2, #0]
 80079e4:	6851      	ldr	r1, [r2, #4]
 80079e6:	f7fa fe3b 	bl	8002660 <__aeabi_d2iz>
 80079ea:	0003      	movs	r3, r0
 80079ec:	0018      	movs	r0, r3
 80079ee:	f7fa fe6d 	bl	80026cc <__aeabi_i2d>
 80079f2:	0002      	movs	r2, r0
 80079f4:	000b      	movs	r3, r1
 80079f6:	1938      	adds	r0, r7, r4
 80079f8:	6841      	ldr	r1, [r0, #4]
 80079fa:	6800      	ldr	r0, [r0, #0]
 80079fc:	f7fa fa80 	bl	8001f00 <__aeabi_dsub>
 8007a00:	0002      	movs	r2, r0
 8007a02:	000b      	movs	r3, r1
 8007a04:	1938      	adds	r0, r7, r4
 8007a06:	6002      	str	r2, [r0, #0]
 8007a08:	6043      	str	r3, [r0, #4]
		tempMin = tempMin + tempFloat;
 8007a0a:	193a      	adds	r2, r7, r4
 8007a0c:	6853      	ldr	r3, [r2, #4]
 8007a0e:	6812      	ldr	r2, [r2, #0]
 8007a10:	1978      	adds	r0, r7, r5
 8007a12:	6841      	ldr	r1, [r0, #4]
 8007a14:	6800      	ldr	r0, [r0, #0]
 8007a16:	f7f9 f8c9 	bl	8000bac <__aeabi_dadd>
 8007a1a:	0002      	movs	r2, r0
 8007a1c:	000b      	movs	r3, r1
 8007a1e:	1978      	adds	r0, r7, r5
 8007a20:	6002      	str	r2, [r0, #0]
 8007a22:	6043      	str	r3, [r0, #4]
		latitude = tempMin / 60.0;
 8007a24:	2200      	movs	r2, #0
 8007a26:	4b9f      	ldr	r3, [pc, #636]	; (8007ca4 <send_current_location_via_sms+0x3b8>)
 8007a28:	1978      	adds	r0, r7, r5
 8007a2a:	6841      	ldr	r1, [r0, #4]
 8007a2c:	6800      	ldr	r0, [r0, #0]
 8007a2e:	f7f9 fbf9 	bl	8001224 <__aeabi_ddiv>
 8007a32:	0002      	movs	r2, r0
 8007a34:	000b      	movs	r3, r1
 8007a36:	0010      	movs	r0, r2
 8007a38:	0019      	movs	r1, r3
 8007a3a:	f7fa fee5 	bl	8002808 <__aeabi_d2f>
 8007a3e:	1c03      	adds	r3, r0, #0
 8007a40:	22ac      	movs	r2, #172	; 0xac
 8007a42:	18b8      	adds	r0, r7, r2
 8007a44:	6003      	str	r3, [r0, #0]
		latitude += tempDeg;
 8007a46:	19bb      	adds	r3, r7, r6
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	0018      	movs	r0, r3
 8007a4c:	f7f9 f860 	bl	8000b10 <__aeabi_i2f>
 8007a50:	1c03      	adds	r3, r0, #0
 8007a52:	1c19      	adds	r1, r3, #0
 8007a54:	22ac      	movs	r2, #172	; 0xac
 8007a56:	18b8      	adds	r0, r7, r2
 8007a58:	6800      	ldr	r0, [r0, #0]
 8007a5a:	f7f8 fdd5 	bl	8000608 <__aeabi_fadd>
 8007a5e:	1c03      	adds	r3, r0, #0
 8007a60:	22ac      	movs	r2, #172	; 0xac
 8007a62:	18b8      	adds	r0, r7, r2
 8007a64:	6003      	str	r3, [r0, #0]
		tempFloat = lon / 30000.0;
 8007a66:	23cc      	movs	r3, #204	; 0xcc
 8007a68:	18fb      	adds	r3, r7, r3
 8007a6a:	6818      	ldr	r0, [r3, #0]
 8007a6c:	f7fa fe5e 	bl	800272c <__aeabi_ui2d>
 8007a70:	2200      	movs	r2, #0
 8007a72:	4b8b      	ldr	r3, [pc, #556]	; (8007ca0 <send_current_location_via_sms+0x3b4>)
 8007a74:	f7f9 fbd6 	bl	8001224 <__aeabi_ddiv>
 8007a78:	0002      	movs	r2, r0
 8007a7a:	000b      	movs	r3, r1
 8007a7c:	1938      	adds	r0, r7, r4
 8007a7e:	6002      	str	r2, [r0, #0]
 8007a80:	6043      	str	r3, [r0, #4]
		tempDeg = (int) tempFloat / 60;
 8007a82:	193b      	adds	r3, r7, r4
 8007a84:	6818      	ldr	r0, [r3, #0]
 8007a86:	6859      	ldr	r1, [r3, #4]
 8007a88:	f7fa fdea 	bl	8002660 <__aeabi_d2iz>
 8007a8c:	0003      	movs	r3, r0
 8007a8e:	213c      	movs	r1, #60	; 0x3c
 8007a90:	0018      	movs	r0, r3
 8007a92:	f7f8 fbe5 	bl	8000260 <__divsi3>
 8007a96:	0003      	movs	r3, r0
 8007a98:	001a      	movs	r2, r3
 8007a9a:	19bb      	adds	r3, r7, r6
 8007a9c:	701a      	strb	r2, [r3, #0]
		tempMin = (int) tempFloat % 60;
 8007a9e:	193b      	adds	r3, r7, r4
 8007aa0:	6818      	ldr	r0, [r3, #0]
 8007aa2:	6859      	ldr	r1, [r3, #4]
 8007aa4:	f7fa fddc 	bl	8002660 <__aeabi_d2iz>
 8007aa8:	0003      	movs	r3, r0
 8007aaa:	213c      	movs	r1, #60	; 0x3c
 8007aac:	0018      	movs	r0, r3
 8007aae:	f7f8 fcbd 	bl	800042c <__aeabi_idivmod>
 8007ab2:	000b      	movs	r3, r1
 8007ab4:	0018      	movs	r0, r3
 8007ab6:	f7fa fe09 	bl	80026cc <__aeabi_i2d>
 8007aba:	0002      	movs	r2, r0
 8007abc:	000b      	movs	r3, r1
 8007abe:	1978      	adds	r0, r7, r5
 8007ac0:	6002      	str	r2, [r0, #0]
 8007ac2:	6043      	str	r3, [r0, #4]
		tempFloat = tempFloat - (int) tempFloat;
 8007ac4:	193b      	adds	r3, r7, r4
 8007ac6:	6818      	ldr	r0, [r3, #0]
 8007ac8:	6859      	ldr	r1, [r3, #4]
 8007aca:	f7fa fdc9 	bl	8002660 <__aeabi_d2iz>
 8007ace:	0003      	movs	r3, r0
 8007ad0:	0018      	movs	r0, r3
 8007ad2:	f7fa fdfb 	bl	80026cc <__aeabi_i2d>
 8007ad6:	0002      	movs	r2, r0
 8007ad8:	000b      	movs	r3, r1
 8007ada:	1938      	adds	r0, r7, r4
 8007adc:	6841      	ldr	r1, [r0, #4]
 8007ade:	6800      	ldr	r0, [r0, #0]
 8007ae0:	f7fa fa0e 	bl	8001f00 <__aeabi_dsub>
 8007ae4:	0002      	movs	r2, r0
 8007ae6:	000b      	movs	r3, r1
 8007ae8:	1938      	adds	r0, r7, r4
 8007aea:	6002      	str	r2, [r0, #0]
 8007aec:	6043      	str	r3, [r0, #4]
		tempMin = tempMin + tempFloat;
 8007aee:	193b      	adds	r3, r7, r4
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	1978      	adds	r0, r7, r5
 8007af6:	6841      	ldr	r1, [r0, #4]
 8007af8:	6800      	ldr	r0, [r0, #0]
 8007afa:	f7f9 f857 	bl	8000bac <__aeabi_dadd>
 8007afe:	0002      	movs	r2, r0
 8007b00:	000b      	movs	r3, r1
 8007b02:	1978      	adds	r0, r7, r5
 8007b04:	6002      	str	r2, [r0, #0]
 8007b06:	6043      	str	r3, [r0, #4]
		longitude = tempMin / 60.0;
 8007b08:	2200      	movs	r2, #0
 8007b0a:	4b66      	ldr	r3, [pc, #408]	; (8007ca4 <send_current_location_via_sms+0x3b8>)
 8007b0c:	1978      	adds	r0, r7, r5
 8007b0e:	6841      	ldr	r1, [r0, #4]
 8007b10:	6800      	ldr	r0, [r0, #0]
 8007b12:	f7f9 fb87 	bl	8001224 <__aeabi_ddiv>
 8007b16:	0002      	movs	r2, r0
 8007b18:	000b      	movs	r3, r1
 8007b1a:	0010      	movs	r0, r2
 8007b1c:	0019      	movs	r1, r3
 8007b1e:	f7fa fe73 	bl	8002808 <__aeabi_d2f>
 8007b22:	1c03      	adds	r3, r0, #0
 8007b24:	25a8      	movs	r5, #168	; 0xa8
 8007b26:	1978      	adds	r0, r7, r5
 8007b28:	6003      	str	r3, [r0, #0]
		longitude += tempDeg;
 8007b2a:	19bb      	adds	r3, r7, r6
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	0018      	movs	r0, r3
 8007b30:	f7f8 ffee 	bl	8000b10 <__aeabi_i2f>
 8007b34:	1c03      	adds	r3, r0, #0
 8007b36:	1c19      	adds	r1, r3, #0
 8007b38:	197b      	adds	r3, r7, r5
 8007b3a:	6818      	ldr	r0, [r3, #0]
 8007b3c:	f7f8 fd64 	bl	8000608 <__aeabi_fadd>
 8007b40:	1c03      	adds	r3, r0, #0
 8007b42:	1978      	adds	r0, r7, r5
 8007b44:	6003      	str	r3, [r0, #0]
		memset(tempMsg, 0, sizeof(tempMsg));
 8007b46:	003b      	movs	r3, r7
 8007b48:	2296      	movs	r2, #150	; 0x96
 8007b4a:	2100      	movs	r1, #0
 8007b4c:	0018      	movs	r0, r3
 8007b4e:	f007 f8bc 	bl	800ecca <memset>
		memset(buf, 0, sizeof(buf));
 8007b52:	2498      	movs	r4, #152	; 0x98
 8007b54:	193b      	adds	r3, r7, r4
 8007b56:	220f      	movs	r2, #15
 8007b58:	2100      	movs	r1, #0
 8007b5a:	0018      	movs	r0, r3
 8007b5c:	f007 f8b5 	bl	800ecca <memset>
		gcvt(latitude, 8, buf);
 8007b60:	22ac      	movs	r2, #172	; 0xac
 8007b62:	18bb      	adds	r3, r7, r2
 8007b64:	6818      	ldr	r0, [r3, #0]
 8007b66:	f7fa fe07 	bl	8002778 <__aeabi_f2d>
 8007b6a:	193b      	adds	r3, r7, r4
 8007b6c:	2208      	movs	r2, #8
 8007b6e:	f007 f853 	bl	800ec18 <gcvt>
		strcat(tempMsg,"AT+CMGS=\"");
 8007b72:	003b      	movs	r3, r7
 8007b74:	0018      	movs	r0, r3
 8007b76:	f7f8 facd 	bl	8000114 <strlen>
 8007b7a:	0003      	movs	r3, r0
 8007b7c:	001a      	movs	r2, r3
 8007b7e:	003b      	movs	r3, r7
 8007b80:	189a      	adds	r2, r3, r2
 8007b82:	4b49      	ldr	r3, [pc, #292]	; (8007ca8 <send_current_location_via_sms+0x3bc>)
 8007b84:	0010      	movs	r0, r2
 8007b86:	0019      	movs	r1, r3
 8007b88:	230a      	movs	r3, #10
 8007b8a:	001a      	movs	r2, r3
 8007b8c:	f007 f894 	bl	800ecb8 <memcpy>
		strcat(tempMsg,validSender);
 8007b90:	4a46      	ldr	r2, [pc, #280]	; (8007cac <send_current_location_via_sms+0x3c0>)
 8007b92:	003b      	movs	r3, r7
 8007b94:	0011      	movs	r1, r2
 8007b96:	0018      	movs	r0, r3
 8007b98:	f007 f8c0 	bl	800ed1c <strcat>
		strcat(tempMsg,"\"\r");
 8007b9c:	003b      	movs	r3, r7
 8007b9e:	0018      	movs	r0, r3
 8007ba0:	f7f8 fab8 	bl	8000114 <strlen>
 8007ba4:	0003      	movs	r3, r0
 8007ba6:	001a      	movs	r2, r3
 8007ba8:	003b      	movs	r3, r7
 8007baa:	189a      	adds	r2, r3, r2
 8007bac:	4b40      	ldr	r3, [pc, #256]	; (8007cb0 <send_current_location_via_sms+0x3c4>)
 8007bae:	0010      	movs	r0, r2
 8007bb0:	0019      	movs	r1, r3
 8007bb2:	2303      	movs	r3, #3
 8007bb4:	001a      	movs	r2, r3
 8007bb6:	f007 f87f 	bl	800ecb8 <memcpy>
//		strcat(tempMsg, "AT+CMGS=\"3322336979\"\r");
		strcat(tempMsg, buf);
 8007bba:	193a      	adds	r2, r7, r4
 8007bbc:	003b      	movs	r3, r7
 8007bbe:	0011      	movs	r1, r2
 8007bc0:	0018      	movs	r0, r3
 8007bc2:	f007 f8ab 	bl	800ed1c <strcat>
		memset(buf, 0, sizeof(buf));
 8007bc6:	193b      	adds	r3, r7, r4
 8007bc8:	220f      	movs	r2, #15
 8007bca:	2100      	movs	r1, #0
 8007bcc:	0018      	movs	r0, r3
 8007bce:	f007 f87c 	bl	800ecca <memset>
		gcvt(longitude, 8, buf);
 8007bd2:	197b      	adds	r3, r7, r5
 8007bd4:	6818      	ldr	r0, [r3, #0]
 8007bd6:	f7fa fdcf 	bl	8002778 <__aeabi_f2d>
 8007bda:	193b      	adds	r3, r7, r4
 8007bdc:	2208      	movs	r2, #8
 8007bde:	f007 f81b 	bl	800ec18 <gcvt>
		strcat(tempMsg, ",");
 8007be2:	003b      	movs	r3, r7
 8007be4:	0018      	movs	r0, r3
 8007be6:	f7f8 fa95 	bl	8000114 <strlen>
 8007bea:	0003      	movs	r3, r0
 8007bec:	001a      	movs	r2, r3
 8007bee:	003b      	movs	r3, r7
 8007bf0:	189a      	adds	r2, r3, r2
 8007bf2:	4b30      	ldr	r3, [pc, #192]	; (8007cb4 <send_current_location_via_sms+0x3c8>)
 8007bf4:	0010      	movs	r0, r2
 8007bf6:	0019      	movs	r1, r3
 8007bf8:	2302      	movs	r3, #2
 8007bfa:	001a      	movs	r2, r3
 8007bfc:	f007 f85c 	bl	800ecb8 <memcpy>
		strcat(tempMsg, buf);
 8007c00:	193a      	adds	r2, r7, r4
 8007c02:	003b      	movs	r3, r7
 8007c04:	0011      	movs	r1, r2
 8007c06:	0018      	movs	r0, r3
 8007c08:	f007 f888 	bl	800ed1c <strcat>
		strcat(tempMsg, ",");
 8007c0c:	003b      	movs	r3, r7
 8007c0e:	0018      	movs	r0, r3
 8007c10:	f7f8 fa80 	bl	8000114 <strlen>
 8007c14:	0003      	movs	r3, r0
 8007c16:	001a      	movs	r2, r3
 8007c18:	003b      	movs	r3, r7
 8007c1a:	189a      	adds	r2, r3, r2
 8007c1c:	4b25      	ldr	r3, [pc, #148]	; (8007cb4 <send_current_location_via_sms+0x3c8>)
 8007c1e:	0010      	movs	r0, r2
 8007c20:	0019      	movs	r1, r3
 8007c22:	2302      	movs	r3, #2
 8007c24:	001a      	movs	r2, r3
 8007c26:	f007 f847 	bl	800ecb8 <memcpy>
		memset(buf, 0, sizeof(buf));
 8007c2a:	193b      	adds	r3, r7, r4
 8007c2c:	220f      	movs	r2, #15
 8007c2e:	2100      	movs	r1, #0
 8007c30:	0018      	movs	r0, r3
 8007c32:	f007 f84a 	bl	800ecca <memset>
		int2string(speed, buf);
 8007c36:	21d6      	movs	r1, #214	; 0xd6
 8007c38:	187b      	adds	r3, r7, r1
 8007c3a:	781b      	ldrb	r3, [r3, #0]
 8007c3c:	193a      	adds	r2, r7, r4
 8007c3e:	0011      	movs	r1, r2
 8007c40:	0018      	movs	r0, r3
 8007c42:	f000 fa67 	bl	8008114 <int2string>
		strcat(tempMsg, buf);
 8007c46:	193a      	adds	r2, r7, r4
 8007c48:	003b      	movs	r3, r7
 8007c4a:	0011      	movs	r1, r2
 8007c4c:	0018      	movs	r0, r3
 8007c4e:	f007 f865 	bl	800ed1c <strcat>

		uint8_t tempCount = 0;
 8007c52:	23d7      	movs	r3, #215	; 0xd7
 8007c54:	18fb      	adds	r3, r7, r3
 8007c56:	2200      	movs	r2, #0
 8007c58:	701a      	strb	r2, [r3, #0]
		//todo replace while with for loop
		while (tempMsg[tempCount] != NULL) {
 8007c5a:	e005      	b.n	8007c68 <send_current_location_via_sms+0x37c>
			tempCount++;
 8007c5c:	21d7      	movs	r1, #215	; 0xd7
 8007c5e:	187b      	adds	r3, r7, r1
 8007c60:	781a      	ldrb	r2, [r3, #0]
 8007c62:	187b      	adds	r3, r7, r1
 8007c64:	3201      	adds	r2, #1
 8007c66:	701a      	strb	r2, [r3, #0]
		while (tempMsg[tempCount] != NULL) {
 8007c68:	21d7      	movs	r1, #215	; 0xd7
 8007c6a:	187b      	adds	r3, r7, r1
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	003a      	movs	r2, r7
 8007c70:	5cd3      	ldrb	r3, [r2, r3]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d1f2      	bne.n	8007c5c <send_current_location_via_sms+0x370>
		}

		tempMsg[tempCount] = 26;
 8007c76:	187b      	adds	r3, r7, r1
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	003a      	movs	r2, r7
 8007c7c:	211a      	movs	r1, #26
 8007c7e:	54d1      	strb	r1, [r2, r3]
		//printf("--Sending message to mobile \n");

		send_command(tempMsg, 12005, 7, 0, 0);
 8007c80:	490d      	ldr	r1, [pc, #52]	; (8007cb8 <send_current_location_via_sms+0x3cc>)
 8007c82:	0038      	movs	r0, r7
 8007c84:	2300      	movs	r3, #0
 8007c86:	9300      	str	r3, [sp, #0]
 8007c88:	2300      	movs	r3, #0
 8007c8a:	2207      	movs	r2, #7
 8007c8c:	f7fe fd94 	bl	80067b8 <send_command>

		// char tecMsg[] = {'A','T','+','C','M','G','S','=','\"','3','3','2','2','3','3','6','9','7','9','\"','\r','h','e','l','l','o',26,0};

		//    send_command(tecMsg, 12005, 7, 0, 0);
	}
}
 8007c90:	46c0      	nop			; (mov r8, r8)
 8007c92:	46bd      	mov	sp, r7
 8007c94:	b037      	add	sp, #220	; 0xdc
 8007c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c98:	2000071e 	.word	0x2000071e
 8007c9c:	2000002c 	.word	0x2000002c
 8007ca0:	40dd4c00 	.word	0x40dd4c00
 8007ca4:	404e0000 	.word	0x404e0000
 8007ca8:	08013350 	.word	0x08013350
 8007cac:	20000008 	.word	0x20000008
 8007cb0:	0801335c 	.word	0x0801335c
 8007cb4:	08013368 	.word	0x08013368
 8007cb8:	00002ee5 	.word	0x00002ee5

08007cbc <send_alarm_packet_via_sms>:


void send_alarm_packet_via_sms(){
 8007cbc:	b5b0      	push	{r4, r5, r7, lr}
 8007cbe:	b0a2      	sub	sp, #136	; 0x88
 8007cc0:	af02      	add	r7, sp, #8
	if(isSMSActive==1){
 8007cc2:	4b58      	ldr	r3, [pc, #352]	; (8007e24 <send_alarm_packet_via_sms+0x168>)
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d000      	beq.n	8007ccc <send_alarm_packet_via_sms+0x10>
 8007cca:	e0a7      	b.n	8007e1c <send_alarm_packet_via_sms+0x160>
		uint8_t tempalarm[23];
		memset(tempalarm, 0, sizeof(tempalarm));
 8007ccc:	2364      	movs	r3, #100	; 0x64
 8007cce:	18fb      	adds	r3, r7, r3
 8007cd0:	2217      	movs	r2, #23
 8007cd2:	2100      	movs	r1, #0
 8007cd4:	0018      	movs	r0, r3
 8007cd6:	f006 fff8 	bl	800ecca <memset>
		create_status_info();
 8007cda:	f7ff fbc1 	bl	8007460 <create_status_info>
		char temMsg[100];
		uint8_t n = 21;
 8007cde:	237f      	movs	r3, #127	; 0x7f
 8007ce0:	18fb      	adds	r3, r7, r3
 8007ce2:	2215      	movs	r2, #21
 8007ce4:	701a      	strb	r2, [r3, #0]
		uint8_t tempCt = 0;
 8007ce6:	237e      	movs	r3, #126	; 0x7e
 8007ce8:	18fb      	adds	r3, r7, r3
 8007cea:	2200      	movs	r2, #0
 8007cec:	701a      	strb	r2, [r3, #0]
		memset(temMsg, 0, sizeof(temMsg));
 8007cee:	003b      	movs	r3, r7
 8007cf0:	2264      	movs	r2, #100	; 0x64
 8007cf2:	2100      	movs	r1, #0
 8007cf4:	0018      	movs	r0, r3
 8007cf6:	f006 ffe8 	bl	800ecca <memset>
		strcat(temMsg,"AT+CMGS=\"");
 8007cfa:	003b      	movs	r3, r7
 8007cfc:	0018      	movs	r0, r3
 8007cfe:	f7f8 fa09 	bl	8000114 <strlen>
 8007d02:	0003      	movs	r3, r0
 8007d04:	001a      	movs	r2, r3
 8007d06:	003b      	movs	r3, r7
 8007d08:	189a      	adds	r2, r3, r2
 8007d0a:	4b47      	ldr	r3, [pc, #284]	; (8007e28 <send_alarm_packet_via_sms+0x16c>)
 8007d0c:	0010      	movs	r0, r2
 8007d0e:	0019      	movs	r1, r3
 8007d10:	230a      	movs	r3, #10
 8007d12:	001a      	movs	r2, r3
 8007d14:	f006 ffd0 	bl	800ecb8 <memcpy>
		strcat(temMsg,validSender);
 8007d18:	4a44      	ldr	r2, [pc, #272]	; (8007e2c <send_alarm_packet_via_sms+0x170>)
 8007d1a:	003b      	movs	r3, r7
 8007d1c:	0011      	movs	r1, r2
 8007d1e:	0018      	movs	r0, r3
 8007d20:	f006 fffc 	bl	800ed1c <strcat>
		strcat(temMsg,"\"\r");
 8007d24:	003b      	movs	r3, r7
 8007d26:	0018      	movs	r0, r3
 8007d28:	f7f8 f9f4 	bl	8000114 <strlen>
 8007d2c:	0003      	movs	r3, r0
 8007d2e:	001a      	movs	r2, r3
 8007d30:	003b      	movs	r3, r7
 8007d32:	189a      	adds	r2, r3, r2
 8007d34:	4b3e      	ldr	r3, [pc, #248]	; (8007e30 <send_alarm_packet_via_sms+0x174>)
 8007d36:	0010      	movs	r0, r2
 8007d38:	0019      	movs	r1, r3
 8007d3a:	2303      	movs	r3, #3
 8007d3c:	001a      	movs	r2, r3
 8007d3e:	f006 ffbb 	bl	800ecb8 <memcpy>
//		create_status_info();
		for (uint8_t y = 0; y < 18; y++) {
 8007d42:	237d      	movs	r3, #125	; 0x7d
 8007d44:	18fb      	adds	r3, r7, r3
 8007d46:	2200      	movs	r2, #0
 8007d48:	701a      	strb	r2, [r3, #0]
 8007d4a:	e010      	b.n	8007d6e <send_alarm_packet_via_sms+0xb2>
			tempalarm[y]  = gps_info[y];
 8007d4c:	4b39      	ldr	r3, [pc, #228]	; (8007e34 <send_alarm_packet_via_sms+0x178>)
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	207d      	movs	r0, #125	; 0x7d
 8007d52:	183b      	adds	r3, r7, r0
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	18d2      	adds	r2, r2, r3
 8007d58:	183b      	adds	r3, r7, r0
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	7811      	ldrb	r1, [r2, #0]
 8007d5e:	2264      	movs	r2, #100	; 0x64
 8007d60:	18ba      	adds	r2, r7, r2
 8007d62:	54d1      	strb	r1, [r2, r3]
		for (uint8_t y = 0; y < 18; y++) {
 8007d64:	183b      	adds	r3, r7, r0
 8007d66:	781a      	ldrb	r2, [r3, #0]
 8007d68:	183b      	adds	r3, r7, r0
 8007d6a:	3201      	adds	r2, #1
 8007d6c:	701a      	strb	r2, [r3, #0]
 8007d6e:	237d      	movs	r3, #125	; 0x7d
 8007d70:	18fb      	adds	r3, r7, r3
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	2b11      	cmp	r3, #17
 8007d76:	d9e9      	bls.n	8007d4c <send_alarm_packet_via_sms+0x90>
		}
		tempalarm[18]=TermInfo;
 8007d78:	4b2f      	ldr	r3, [pc, #188]	; (8007e38 <send_alarm_packet_via_sms+0x17c>)
 8007d7a:	781a      	ldrb	r2, [r3, #0]
 8007d7c:	2164      	movs	r1, #100	; 0x64
 8007d7e:	187b      	adds	r3, r7, r1
 8007d80:	749a      	strb	r2, [r3, #18]
		tempalarm[19]=VLvl;
 8007d82:	4b2e      	ldr	r3, [pc, #184]	; (8007e3c <send_alarm_packet_via_sms+0x180>)
 8007d84:	781a      	ldrb	r2, [r3, #0]
 8007d86:	187b      	adds	r3, r7, r1
 8007d88:	74da      	strb	r2, [r3, #19]
		tempalarm[20]=GSMSS;
 8007d8a:	4b2d      	ldr	r3, [pc, #180]	; (8007e40 <send_alarm_packet_via_sms+0x184>)
 8007d8c:	781a      	ldrb	r2, [r3, #0]
 8007d8e:	187b      	adds	r3, r7, r1
 8007d90:	751a      	strb	r2, [r3, #20]
		for (uint8_t y = 0; y < 21; y++) {
 8007d92:	237c      	movs	r3, #124	; 0x7c
 8007d94:	18fb      	adds	r3, r7, r3
 8007d96:	2200      	movs	r2, #0
 8007d98:	701a      	strb	r2, [r3, #0]
 8007d9a:	e01b      	b.n	8007dd4 <send_alarm_packet_via_sms+0x118>
			n += sprintf(&temMsg[n], "%d", tempalarm[y]);
 8007d9c:	247f      	movs	r4, #127	; 0x7f
 8007d9e:	193b      	adds	r3, r7, r4
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	003a      	movs	r2, r7
 8007da4:	18d0      	adds	r0, r2, r3
 8007da6:	257c      	movs	r5, #124	; 0x7c
 8007da8:	197b      	adds	r3, r7, r5
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	2264      	movs	r2, #100	; 0x64
 8007dae:	18ba      	adds	r2, r7, r2
 8007db0:	5cd3      	ldrb	r3, [r2, r3]
 8007db2:	001a      	movs	r2, r3
 8007db4:	4b23      	ldr	r3, [pc, #140]	; (8007e44 <send_alarm_packet_via_sms+0x188>)
 8007db6:	0019      	movs	r1, r3
 8007db8:	f006 ff90 	bl	800ecdc <siprintf>
 8007dbc:	0003      	movs	r3, r0
 8007dbe:	b2d9      	uxtb	r1, r3
 8007dc0:	193b      	adds	r3, r7, r4
 8007dc2:	193a      	adds	r2, r7, r4
 8007dc4:	7812      	ldrb	r2, [r2, #0]
 8007dc6:	188a      	adds	r2, r1, r2
 8007dc8:	701a      	strb	r2, [r3, #0]
		for (uint8_t y = 0; y < 21; y++) {
 8007dca:	197b      	adds	r3, r7, r5
 8007dcc:	781a      	ldrb	r2, [r3, #0]
 8007dce:	197b      	adds	r3, r7, r5
 8007dd0:	3201      	adds	r2, #1
 8007dd2:	701a      	strb	r2, [r3, #0]
 8007dd4:	237c      	movs	r3, #124	; 0x7c
 8007dd6:	18fb      	adds	r3, r7, r3
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	2b14      	cmp	r3, #20
 8007ddc:	d9de      	bls.n	8007d9c <send_alarm_packet_via_sms+0xe0>
		}
		tempCt = 0;
 8007dde:	237e      	movs	r3, #126	; 0x7e
 8007de0:	18fb      	adds	r3, r7, r3
 8007de2:	2200      	movs	r2, #0
 8007de4:	701a      	strb	r2, [r3, #0]
		while (temMsg[tempCt] != NULL) {
 8007de6:	e005      	b.n	8007df4 <send_alarm_packet_via_sms+0x138>
			tempCt++;
 8007de8:	217e      	movs	r1, #126	; 0x7e
 8007dea:	187b      	adds	r3, r7, r1
 8007dec:	781a      	ldrb	r2, [r3, #0]
 8007dee:	187b      	adds	r3, r7, r1
 8007df0:	3201      	adds	r2, #1
 8007df2:	701a      	strb	r2, [r3, #0]
		while (temMsg[tempCt] != NULL) {
 8007df4:	217e      	movs	r1, #126	; 0x7e
 8007df6:	187b      	adds	r3, r7, r1
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	003a      	movs	r2, r7
 8007dfc:	5cd3      	ldrb	r3, [r2, r3]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d1f2      	bne.n	8007de8 <send_alarm_packet_via_sms+0x12c>
		}
		temMsg[tempCt] = 26;
 8007e02:	187b      	adds	r3, r7, r1
 8007e04:	781b      	ldrb	r3, [r3, #0]
 8007e06:	003a      	movs	r2, r7
 8007e08:	211a      	movs	r1, #26
 8007e0a:	54d1      	strb	r1, [r2, r3]
		send_command(temMsg, 12005, 7, 0, 0);
 8007e0c:	490e      	ldr	r1, [pc, #56]	; (8007e48 <send_alarm_packet_via_sms+0x18c>)
 8007e0e:	0038      	movs	r0, r7
 8007e10:	2300      	movs	r3, #0
 8007e12:	9300      	str	r3, [sp, #0]
 8007e14:	2300      	movs	r3, #0
 8007e16:	2207      	movs	r2, #7
 8007e18:	f7fe fcce 	bl	80067b8 <send_command>
	}
}
 8007e1c:	46c0      	nop			; (mov r8, r8)
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	b020      	add	sp, #128	; 0x80
 8007e22:	bdb0      	pop	{r4, r5, r7, pc}
 8007e24:	20000734 	.word	0x20000734
 8007e28:	08013350 	.word	0x08013350
 8007e2c:	20000008 	.word	0x20000008
 8007e30:	0801335c 	.word	0x0801335c
 8007e34:	2000002c 	.word	0x2000002c
 8007e38:	2000072b 	.word	0x2000072b
 8007e3c:	2000072d 	.word	0x2000072d
 8007e40:	2000072c 	.word	0x2000072c
 8007e44:	0801336c 	.word	0x0801336c
 8007e48:	00002ee5 	.word	0x00002ee5

08007e4c <send_location_packet_via_sms>:

void send_location_packet_via_sms(){
 8007e4c:	b5b0      	push	{r4, r5, r7, lr}
 8007e4e:	4c9e      	ldr	r4, [pc, #632]	; (80080c8 <send_location_packet_via_sms+0x27c>)
 8007e50:	44a5      	add	sp, r4
 8007e52:	af02      	add	r7, sp, #8
	if(isSMSActive==1){
 8007e54:	4b9d      	ldr	r3, [pc, #628]	; (80080cc <send_location_packet_via_sms+0x280>)
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	d000      	beq.n	8007e5e <send_location_packet_via_sms+0x12>
 8007e5c:	e12e      	b.n	80080bc <send_location_packet_via_sms+0x270>
		msgCounter = 0;
 8007e5e:	4b9c      	ldr	r3, [pc, #624]	; (80080d0 <send_location_packet_via_sms+0x284>)
 8007e60:	2200      	movs	r2, #0
 8007e62:	701a      	strb	r2, [r3, #0]
		uint8_t dataSize = 0;
 8007e64:	499b      	ldr	r1, [pc, #620]	; (80080d4 <send_location_packet_via_sms+0x288>)
 8007e66:	187b      	adds	r3, r7, r1
 8007e68:	2200      	movs	r2, #0
 8007e6a:	701a      	strb	r2, [r3, #0]
		dataSize = checkdatasize();
 8007e6c:	187c      	adds	r4, r7, r1
 8007e6e:	f7ff f9af 	bl	80071d0 <checkdatasize>
 8007e72:	0003      	movs	r3, r0
 8007e74:	7023      	strb	r3, [r4, #0]
		while (dataSize == 1 && msgCounter < msgCount) {
 8007e76:	e115      	b.n	80080a4 <send_location_packet_via_sms+0x258>
			stats = 6;
 8007e78:	4b97      	ldr	r3, [pc, #604]	; (80080d8 <send_location_packet_via_sms+0x28c>)
 8007e7a:	2206      	movs	r2, #6
 8007e7c:	701a      	strb	r2, [r3, #0]
			uint8_t loopCount = 0;
 8007e7e:	4b97      	ldr	r3, [pc, #604]	; (80080dc <send_location_packet_via_sms+0x290>)
 8007e80:	18fb      	adds	r3, r7, r3
 8007e82:	2200      	movs	r2, #0
 8007e84:	701a      	strb	r2, [r3, #0]
			memset(bunchdata, 0, sizeof(bunchdata));
 8007e86:	23a8      	movs	r3, #168	; 0xa8
 8007e88:	009a      	lsls	r2, r3, #2
 8007e8a:	4b95      	ldr	r3, [pc, #596]	; (80080e0 <send_location_packet_via_sms+0x294>)
 8007e8c:	2100      	movs	r1, #0
 8007e8e:	0018      	movs	r0, r3
 8007e90:	f006 ff1b 	bl	800ecca <memset>
			//printf("--Sending AT+CREG?-- \n");
			send_command("AT+CREG?\r\n", 3, 3, 3, 1);
 8007e94:	4893      	ldr	r0, [pc, #588]	; (80080e4 <send_location_packet_via_sms+0x298>)
 8007e96:	2301      	movs	r3, #1
 8007e98:	9300      	str	r3, [sp, #0]
 8007e9a:	2303      	movs	r3, #3
 8007e9c:	2203      	movs	r2, #3
 8007e9e:	2103      	movs	r1, #3
 8007ea0:	f7fe fc8a 	bl	80067b8 <send_command>
			if (isReg == 1) {
 8007ea4:	4b90      	ldr	r3, [pc, #576]	; (80080e8 <send_location_packet_via_sms+0x29c>)
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d000      	beq.n	8007eae <send_location_packet_via_sms+0x62>
 8007eac:	e105      	b.n	80080ba <send_location_packet_via_sms+0x26e>
				while (read_data_packet() == 1 && loopCount < smsBunch) {
 8007eae:	e023      	b.n	8007ef8 <send_location_packet_via_sms+0xac>
					//printf("readed the data \n");
					for (uint8_t i = 0; i < 18; i++) {
 8007eb0:	4b8e      	ldr	r3, [pc, #568]	; (80080ec <send_location_packet_via_sms+0x2a0>)
 8007eb2:	18fb      	adds	r3, r7, r3
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	701a      	strb	r2, [r3, #0]
 8007eb8:	e013      	b.n	8007ee2 <send_location_packet_via_sms+0x96>
						bunchdata[loopCount][i] = readPacket[i];
 8007eba:	4c8c      	ldr	r4, [pc, #560]	; (80080ec <send_location_packet_via_sms+0x2a0>)
 8007ebc:	193b      	adds	r3, r7, r4
 8007ebe:	7819      	ldrb	r1, [r3, #0]
 8007ec0:	4b86      	ldr	r3, [pc, #536]	; (80080dc <send_location_packet_via_sms+0x290>)
 8007ec2:	18fb      	adds	r3, r7, r3
 8007ec4:	781a      	ldrb	r2, [r3, #0]
 8007ec6:	193b      	adds	r3, r7, r4
 8007ec8:	781b      	ldrb	r3, [r3, #0]
 8007eca:	4889      	ldr	r0, [pc, #548]	; (80080f0 <send_location_packet_via_sms+0x2a4>)
 8007ecc:	5c40      	ldrb	r0, [r0, r1]
 8007ece:	4984      	ldr	r1, [pc, #528]	; (80080e0 <send_location_packet_via_sms+0x294>)
 8007ed0:	0152      	lsls	r2, r2, #5
 8007ed2:	188a      	adds	r2, r1, r2
 8007ed4:	1c01      	adds	r1, r0, #0
 8007ed6:	54d1      	strb	r1, [r2, r3]
					for (uint8_t i = 0; i < 18; i++) {
 8007ed8:	193b      	adds	r3, r7, r4
 8007eda:	781a      	ldrb	r2, [r3, #0]
 8007edc:	193b      	adds	r3, r7, r4
 8007ede:	3201      	adds	r2, #1
 8007ee0:	701a      	strb	r2, [r3, #0]
 8007ee2:	4b82      	ldr	r3, [pc, #520]	; (80080ec <send_location_packet_via_sms+0x2a0>)
 8007ee4:	18fb      	adds	r3, r7, r3
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	2b11      	cmp	r3, #17
 8007eea:	d9e6      	bls.n	8007eba <send_location_packet_via_sms+0x6e>
					}
					loopCount++;
 8007eec:	497b      	ldr	r1, [pc, #492]	; (80080dc <send_location_packet_via_sms+0x290>)
 8007eee:	187b      	adds	r3, r7, r1
 8007ef0:	781a      	ldrb	r2, [r3, #0]
 8007ef2:	187b      	adds	r3, r7, r1
 8007ef4:	3201      	adds	r2, #1
 8007ef6:	701a      	strb	r2, [r3, #0]
				while (read_data_packet() == 1 && loopCount < smsBunch) {
 8007ef8:	f7ff fa3c 	bl	8007374 <read_data_packet>
 8007efc:	0003      	movs	r3, r0
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	d104      	bne.n	8007f0c <send_location_packet_via_sms+0xc0>
 8007f02:	4b76      	ldr	r3, [pc, #472]	; (80080dc <send_location_packet_via_sms+0x290>)
 8007f04:	18fb      	adds	r3, r7, r3
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	2b09      	cmp	r3, #9
 8007f0a:	d9d1      	bls.n	8007eb0 <send_location_packet_via_sms+0x64>
				}
				char temMsg[1000];
				int n = 21;
 8007f0c:	2315      	movs	r3, #21
 8007f0e:	22fc      	movs	r2, #252	; 0xfc
 8007f10:	0092      	lsls	r2, r2, #2
 8007f12:	18ba      	adds	r2, r7, r2
 8007f14:	6013      	str	r3, [r2, #0]
				int tempCt = 0;
 8007f16:	2300      	movs	r3, #0
 8007f18:	22fb      	movs	r2, #251	; 0xfb
 8007f1a:	0092      	lsls	r2, r2, #2
 8007f1c:	18ba      	adds	r2, r7, r2
 8007f1e:	6013      	str	r3, [r2, #0]
				memset(temMsg, 0, sizeof(temMsg));
 8007f20:	23fa      	movs	r3, #250	; 0xfa
 8007f22:	009a      	lsls	r2, r3, #2
 8007f24:	003b      	movs	r3, r7
 8007f26:	2100      	movs	r1, #0
 8007f28:	0018      	movs	r0, r3
 8007f2a:	f006 fece 	bl	800ecca <memset>
				strcat(temMsg,"AT+CMGS=\"");
 8007f2e:	003b      	movs	r3, r7
 8007f30:	0018      	movs	r0, r3
 8007f32:	f7f8 f8ef 	bl	8000114 <strlen>
 8007f36:	0003      	movs	r3, r0
 8007f38:	001a      	movs	r2, r3
 8007f3a:	003b      	movs	r3, r7
 8007f3c:	189a      	adds	r2, r3, r2
 8007f3e:	4b6d      	ldr	r3, [pc, #436]	; (80080f4 <send_location_packet_via_sms+0x2a8>)
 8007f40:	0010      	movs	r0, r2
 8007f42:	0019      	movs	r1, r3
 8007f44:	230a      	movs	r3, #10
 8007f46:	001a      	movs	r2, r3
 8007f48:	f006 feb6 	bl	800ecb8 <memcpy>
				strcat(temMsg,validSender);
 8007f4c:	4a6a      	ldr	r2, [pc, #424]	; (80080f8 <send_location_packet_via_sms+0x2ac>)
 8007f4e:	003b      	movs	r3, r7
 8007f50:	0011      	movs	r1, r2
 8007f52:	0018      	movs	r0, r3
 8007f54:	f006 fee2 	bl	800ed1c <strcat>
				strcat(temMsg,"\"\r");
 8007f58:	003b      	movs	r3, r7
 8007f5a:	0018      	movs	r0, r3
 8007f5c:	f7f8 f8da 	bl	8000114 <strlen>
 8007f60:	0003      	movs	r3, r0
 8007f62:	001a      	movs	r2, r3
 8007f64:	003b      	movs	r3, r7
 8007f66:	189a      	adds	r2, r3, r2
 8007f68:	4b64      	ldr	r3, [pc, #400]	; (80080fc <send_location_packet_via_sms+0x2b0>)
 8007f6a:	0010      	movs	r0, r2
 8007f6c:	0019      	movs	r1, r3
 8007f6e:	2303      	movs	r3, #3
 8007f70:	001a      	movs	r2, r3
 8007f72:	f006 fea1 	bl	800ecb8 <memcpy>
	//			strcat(temMsg, "AT+CMGS=\"3322336979\"\r");
				// todo send 21 msg packet
				for (uint8_t i = 0; i < loopCount; i++) {
 8007f76:	4b62      	ldr	r3, [pc, #392]	; (8008100 <send_location_packet_via_sms+0x2b4>)
 8007f78:	18fb      	adds	r3, r7, r3
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	701a      	strb	r2, [r3, #0]
 8007f7e:	e053      	b.n	8008028 <send_location_packet_via_sms+0x1dc>
					for (uint8_t y = 0; y < 18; y++) {
 8007f80:	4b60      	ldr	r3, [pc, #384]	; (8008104 <send_location_packet_via_sms+0x2b8>)
 8007f82:	18fb      	adds	r3, r7, r3
 8007f84:	2200      	movs	r2, #0
 8007f86:	701a      	strb	r2, [r3, #0]
 8007f88:	e01f      	b.n	8007fca <send_location_packet_via_sms+0x17e>
						n += sprintf(&temMsg[n], "%d", bunchdata[i][y]);
 8007f8a:	003a      	movs	r2, r7
 8007f8c:	24fc      	movs	r4, #252	; 0xfc
 8007f8e:	00a4      	lsls	r4, r4, #2
 8007f90:	193b      	adds	r3, r7, r4
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	18d0      	adds	r0, r2, r3
 8007f96:	4b5a      	ldr	r3, [pc, #360]	; (8008100 <send_location_packet_via_sms+0x2b4>)
 8007f98:	18fb      	adds	r3, r7, r3
 8007f9a:	781a      	ldrb	r2, [r3, #0]
 8007f9c:	4d59      	ldr	r5, [pc, #356]	; (8008104 <send_location_packet_via_sms+0x2b8>)
 8007f9e:	197b      	adds	r3, r7, r5
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	494f      	ldr	r1, [pc, #316]	; (80080e0 <send_location_packet_via_sms+0x294>)
 8007fa4:	0152      	lsls	r2, r2, #5
 8007fa6:	188a      	adds	r2, r1, r2
 8007fa8:	5cd3      	ldrb	r3, [r2, r3]
 8007faa:	001a      	movs	r2, r3
 8007fac:	4b56      	ldr	r3, [pc, #344]	; (8008108 <send_location_packet_via_sms+0x2bc>)
 8007fae:	0019      	movs	r1, r3
 8007fb0:	f006 fe94 	bl	800ecdc <siprintf>
 8007fb4:	0002      	movs	r2, r0
 8007fb6:	193b      	adds	r3, r7, r4
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	189b      	adds	r3, r3, r2
 8007fbc:	193a      	adds	r2, r7, r4
 8007fbe:	6013      	str	r3, [r2, #0]
					for (uint8_t y = 0; y < 18; y++) {
 8007fc0:	197b      	adds	r3, r7, r5
 8007fc2:	781a      	ldrb	r2, [r3, #0]
 8007fc4:	197b      	adds	r3, r7, r5
 8007fc6:	3201      	adds	r2, #1
 8007fc8:	701a      	strb	r2, [r3, #0]
 8007fca:	4b4e      	ldr	r3, [pc, #312]	; (8008104 <send_location_packet_via_sms+0x2b8>)
 8007fcc:	18fb      	adds	r3, r7, r3
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	2b11      	cmp	r3, #17
 8007fd2:	d9da      	bls.n	8007f8a <send_location_packet_via_sms+0x13e>
					}
					while (temMsg[tempCt] != NULL) {
 8007fd4:	e006      	b.n	8007fe4 <send_location_packet_via_sms+0x198>
						tempCt++;
 8007fd6:	22fb      	movs	r2, #251	; 0xfb
 8007fd8:	0092      	lsls	r2, r2, #2
 8007fda:	18bb      	adds	r3, r7, r2
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	3301      	adds	r3, #1
 8007fe0:	18ba      	adds	r2, r7, r2
 8007fe2:	6013      	str	r3, [r2, #0]
					while (temMsg[tempCt] != NULL) {
 8007fe4:	4b49      	ldr	r3, [pc, #292]	; (800810c <send_location_packet_via_sms+0x2c0>)
 8007fe6:	21fe      	movs	r1, #254	; 0xfe
 8007fe8:	0089      	lsls	r1, r1, #2
 8007fea:	185b      	adds	r3, r3, r1
 8007fec:	19da      	adds	r2, r3, r7
 8007fee:	20fb      	movs	r0, #251	; 0xfb
 8007ff0:	0080      	lsls	r0, r0, #2
 8007ff2:	183b      	adds	r3, r7, r0
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	18d3      	adds	r3, r2, r3
 8007ff8:	781b      	ldrb	r3, [r3, #0]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d1eb      	bne.n	8007fd6 <send_location_packet_via_sms+0x18a>
					}
					temMsg[tempCt] = ',';
 8007ffe:	4b43      	ldr	r3, [pc, #268]	; (800810c <send_location_packet_via_sms+0x2c0>)
 8008000:	185b      	adds	r3, r3, r1
 8008002:	19da      	adds	r2, r3, r7
 8008004:	183b      	adds	r3, r7, r0
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	18d3      	adds	r3, r2, r3
 800800a:	222c      	movs	r2, #44	; 0x2c
 800800c:	701a      	strb	r2, [r3, #0]
					n++;
 800800e:	22fc      	movs	r2, #252	; 0xfc
 8008010:	0092      	lsls	r2, r2, #2
 8008012:	18bb      	adds	r3, r7, r2
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	3301      	adds	r3, #1
 8008018:	18ba      	adds	r2, r7, r2
 800801a:	6013      	str	r3, [r2, #0]
				for (uint8_t i = 0; i < loopCount; i++) {
 800801c:	4938      	ldr	r1, [pc, #224]	; (8008100 <send_location_packet_via_sms+0x2b4>)
 800801e:	187b      	adds	r3, r7, r1
 8008020:	781a      	ldrb	r2, [r3, #0]
 8008022:	187b      	adds	r3, r7, r1
 8008024:	3201      	adds	r2, #1
 8008026:	701a      	strb	r2, [r3, #0]
 8008028:	4b35      	ldr	r3, [pc, #212]	; (8008100 <send_location_packet_via_sms+0x2b4>)
 800802a:	18fa      	adds	r2, r7, r3
 800802c:	4b2b      	ldr	r3, [pc, #172]	; (80080dc <send_location_packet_via_sms+0x290>)
 800802e:	18fb      	adds	r3, r7, r3
 8008030:	7812      	ldrb	r2, [r2, #0]
 8008032:	781b      	ldrb	r3, [r3, #0]
 8008034:	429a      	cmp	r2, r3
 8008036:	d3a3      	bcc.n	8007f80 <send_location_packet_via_sms+0x134>
				}
				tempCt = 0;
 8008038:	2300      	movs	r3, #0
 800803a:	22fb      	movs	r2, #251	; 0xfb
 800803c:	0092      	lsls	r2, r2, #2
 800803e:	18ba      	adds	r2, r7, r2
 8008040:	6013      	str	r3, [r2, #0]
				while (temMsg[tempCt] != NULL) {
 8008042:	e006      	b.n	8008052 <send_location_packet_via_sms+0x206>
					tempCt++;
 8008044:	22fb      	movs	r2, #251	; 0xfb
 8008046:	0092      	lsls	r2, r2, #2
 8008048:	18bb      	adds	r3, r7, r2
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	3301      	adds	r3, #1
 800804e:	18ba      	adds	r2, r7, r2
 8008050:	6013      	str	r3, [r2, #0]
				while (temMsg[tempCt] != NULL) {
 8008052:	4b2e      	ldr	r3, [pc, #184]	; (800810c <send_location_packet_via_sms+0x2c0>)
 8008054:	21fe      	movs	r1, #254	; 0xfe
 8008056:	0089      	lsls	r1, r1, #2
 8008058:	185b      	adds	r3, r3, r1
 800805a:	19da      	adds	r2, r3, r7
 800805c:	20fb      	movs	r0, #251	; 0xfb
 800805e:	0080      	lsls	r0, r0, #2
 8008060:	183b      	adds	r3, r7, r0
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	18d3      	adds	r3, r2, r3
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d1eb      	bne.n	8008044 <send_location_packet_via_sms+0x1f8>
				}
				temMsg[tempCt] = 26;
 800806c:	4b27      	ldr	r3, [pc, #156]	; (800810c <send_location_packet_via_sms+0x2c0>)
 800806e:	185b      	adds	r3, r3, r1
 8008070:	19da      	adds	r2, r3, r7
 8008072:	183b      	adds	r3, r7, r0
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	18d3      	adds	r3, r2, r3
 8008078:	221a      	movs	r2, #26
 800807a:	701a      	strb	r2, [r3, #0]
				send_command(temMsg, 12005, 7, 0, 0);
 800807c:	4924      	ldr	r1, [pc, #144]	; (8008110 <send_location_packet_via_sms+0x2c4>)
 800807e:	0038      	movs	r0, r7
 8008080:	2300      	movs	r3, #0
 8008082:	9300      	str	r3, [sp, #0]
 8008084:	2300      	movs	r3, #0
 8008086:	2207      	movs	r2, #7
 8008088:	f7fe fb96 	bl	80067b8 <send_command>
				dataSize = checkdatasize();
 800808c:	4b11      	ldr	r3, [pc, #68]	; (80080d4 <send_location_packet_via_sms+0x288>)
 800808e:	18fc      	adds	r4, r7, r3
 8008090:	f7ff f89e 	bl	80071d0 <checkdatasize>
 8008094:	0003      	movs	r3, r0
 8008096:	7023      	strb	r3, [r4, #0]
				msgCounter++;
 8008098:	4b0d      	ldr	r3, [pc, #52]	; (80080d0 <send_location_packet_via_sms+0x284>)
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	3301      	adds	r3, #1
 800809e:	b2da      	uxtb	r2, r3
 80080a0:	4b0b      	ldr	r3, [pc, #44]	; (80080d0 <send_location_packet_via_sms+0x284>)
 80080a2:	701a      	strb	r2, [r3, #0]
		while (dataSize == 1 && msgCounter < msgCount) {
 80080a4:	4b0b      	ldr	r3, [pc, #44]	; (80080d4 <send_location_packet_via_sms+0x288>)
 80080a6:	18fb      	adds	r3, r7, r3
 80080a8:	781b      	ldrb	r3, [r3, #0]
 80080aa:	2b01      	cmp	r3, #1
 80080ac:	d106      	bne.n	80080bc <send_location_packet_via_sms+0x270>
 80080ae:	4b08      	ldr	r3, [pc, #32]	; (80080d0 <send_location_packet_via_sms+0x284>)
 80080b0:	781b      	ldrb	r3, [r3, #0]
 80080b2:	2b09      	cmp	r3, #9
 80080b4:	d800      	bhi.n	80080b8 <send_location_packet_via_sms+0x26c>
 80080b6:	e6df      	b.n	8007e78 <send_location_packet_via_sms+0x2c>
			} else {
				break;
			}
		}
	}
}
 80080b8:	e000      	b.n	80080bc <send_location_packet_via_sms+0x270>
				break;
 80080ba:	46c0      	nop			; (mov r8, r8)
}
 80080bc:	46c0      	nop			; (mov r8, r8)
 80080be:	46bd      	mov	sp, r7
 80080c0:	23fe      	movs	r3, #254	; 0xfe
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	449d      	add	sp, r3
 80080c6:	bdb0      	pop	{r4, r5, r7, pc}
 80080c8:	fffffc00 	.word	0xfffffc00
 80080cc:	20000734 	.word	0x20000734
 80080d0:	2000073c 	.word	0x2000073c
 80080d4:	000003f7 	.word	0x000003f7
 80080d8:	20000d1d 	.word	0x20000d1d
 80080dc:	000003f6 	.word	0x000003f6
 80080e0:	20000a74 	.word	0x20000a74
 80080e4:	08013170 	.word	0x08013170
 80080e8:	20000a2d 	.word	0x20000a2d
 80080ec:	000003f5 	.word	0x000003f5
 80080f0:	20000a54 	.word	0x20000a54
 80080f4:	08013350 	.word	0x08013350
 80080f8:	20000008 	.word	0x20000008
 80080fc:	0801335c 	.word	0x0801335c
 8008100:	000003eb 	.word	0x000003eb
 8008104:	000003ea 	.word	0x000003ea
 8008108:	0801336c 	.word	0x0801336c
 800810c:	fffffc08 	.word	0xfffffc08
 8008110:	00002ee5 	.word	0x00002ee5

08008114 <int2string>:
char* int2string(int num, char *str) {
 8008114:	b580      	push	{r7, lr}
 8008116:	b082      	sub	sp, #8
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
	if (str == NULL) {
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d101      	bne.n	8008128 <int2string+0x14>
		return NULL;
 8008124:	2300      	movs	r3, #0
 8008126:	e006      	b.n	8008136 <int2string+0x22>
	}
	sprintf(str, "%d", num);
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	4905      	ldr	r1, [pc, #20]	; (8008140 <int2string+0x2c>)
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	0018      	movs	r0, r3
 8008130:	f006 fdd4 	bl	800ecdc <siprintf>
	return str;
 8008134:	683b      	ldr	r3, [r7, #0]
}
 8008136:	0018      	movs	r0, r3
 8008138:	46bd      	mov	sp, r7
 800813a:	b002      	add	sp, #8
 800813c:	bd80      	pop	{r7, pc}
 800813e:	46c0      	nop			; (mov r8, r8)
 8008140:	0801336c 	.word	0x0801336c

08008144 <check_command_SERVER>:

void check_command_SERVER(char* command){
 8008144:	b590      	push	{r4, r7, lr}
 8008146:	b085      	sub	sp, #20
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
		    //check for data integrity by counting commas.
		    //there must be 2 commas in total.
		    uint8_t commaPosition[2]={0,0};
 800814c:	2308      	movs	r3, #8
 800814e:	18fb      	adds	r3, r7, r3
 8008150:	2200      	movs	r2, #0
 8008152:	801a      	strh	r2, [r3, #0]
		    uint8_t totalCommas=0;
 8008154:	230f      	movs	r3, #15
 8008156:	18fb      	adds	r3, r7, r3
 8008158:	2200      	movs	r2, #0
 800815a:	701a      	strb	r2, [r3, #0]
		    for (uint8_t a=0;a<MAX_COMMAND_LEN;a++){
 800815c:	230e      	movs	r3, #14
 800815e:	18fb      	adds	r3, r7, r3
 8008160:	2200      	movs	r2, #0
 8008162:	701a      	strb	r2, [r3, #0]
 8008164:	e01f      	b.n	80081a6 <check_command_SERVER+0x62>
		        if(command[a]==','){
 8008166:	210e      	movs	r1, #14
 8008168:	187b      	adds	r3, r7, r1
 800816a:	781b      	ldrb	r3, [r3, #0]
 800816c:	687a      	ldr	r2, [r7, #4]
 800816e:	18d3      	adds	r3, r2, r3
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	2b2c      	cmp	r3, #44	; 0x2c
 8008174:	d111      	bne.n	800819a <check_command_SERVER+0x56>
		            if(totalCommas<2){
 8008176:	220f      	movs	r2, #15
 8008178:	18bb      	adds	r3, r7, r2
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	2b01      	cmp	r3, #1
 800817e:	d806      	bhi.n	800818e <check_command_SERVER+0x4a>
		                commaPosition[totalCommas]=a;
 8008180:	18bb      	adds	r3, r7, r2
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	2208      	movs	r2, #8
 8008186:	18ba      	adds	r2, r7, r2
 8008188:	1879      	adds	r1, r7, r1
 800818a:	7809      	ldrb	r1, [r1, #0]
 800818c:	54d1      	strb	r1, [r2, r3]
		            }
		            totalCommas++;
 800818e:	210f      	movs	r1, #15
 8008190:	187b      	adds	r3, r7, r1
 8008192:	781a      	ldrb	r2, [r3, #0]
 8008194:	187b      	adds	r3, r7, r1
 8008196:	3201      	adds	r2, #1
 8008198:	701a      	strb	r2, [r3, #0]
		    for (uint8_t a=0;a<MAX_COMMAND_LEN;a++){
 800819a:	210e      	movs	r1, #14
 800819c:	187b      	adds	r3, r7, r1
 800819e:	781a      	ldrb	r2, [r3, #0]
 80081a0:	187b      	adds	r3, r7, r1
 80081a2:	3201      	adds	r2, #1
 80081a4:	701a      	strb	r2, [r3, #0]
 80081a6:	230e      	movs	r3, #14
 80081a8:	18fb      	adds	r3, r7, r3
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	2b31      	cmp	r3, #49	; 0x31
 80081ae:	d9da      	bls.n	8008166 <check_command_SERVER+0x22>
		        }
		    }
		    if(totalCommas ==2 && commaPosition[0] == 6 ){
 80081b0:	230f      	movs	r3, #15
 80081b2:	18fb      	adds	r3, r7, r3
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	2b02      	cmp	r3, #2
 80081b8:	d162      	bne.n	8008280 <check_command_SERVER+0x13c>
 80081ba:	2408      	movs	r4, #8
 80081bc:	193b      	adds	r3, r7, r4
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	2b06      	cmp	r3, #6
 80081c2:	d15d      	bne.n	8008280 <check_command_SERVER+0x13c>
		        //two commas found, and first one is on 6th index.
		        //data is good.
		    	memset(portAdd,0,sizeof(portAdd));
 80081c4:	4b30      	ldr	r3, [pc, #192]	; (8008288 <check_command_SERVER+0x144>)
 80081c6:	2206      	movs	r2, #6
 80081c8:	2100      	movs	r1, #0
 80081ca:	0018      	movs	r0, r3
 80081cc:	f006 fd7d 	bl	800ecca <memset>
		    	memset(domainAdd,0,sizeof(domainAdd));
 80081d0:	4b2e      	ldr	r3, [pc, #184]	; (800828c <check_command_SERVER+0x148>)
 80081d2:	2233      	movs	r2, #51	; 0x33
 80081d4:	2100      	movs	r1, #0
 80081d6:	0018      	movs	r0, r3
 80081d8:	f006 fd77 	bl	800ecca <memset>

		        //extract dns
	            for(uint8_t a=commaPosition[0]+1;a<commaPosition[1];a++){
 80081dc:	193b      	adds	r3, r7, r4
 80081de:	781a      	ldrb	r2, [r3, #0]
 80081e0:	230d      	movs	r3, #13
 80081e2:	18fb      	adds	r3, r7, r3
 80081e4:	3201      	adds	r2, #1
 80081e6:	701a      	strb	r2, [r3, #0]
 80081e8:	e013      	b.n	8008212 <check_command_SERVER+0xce>
	                    domainAdd[a-(commaPosition[0]+1)]=command[a];
 80081ea:	200d      	movs	r0, #13
 80081ec:	183b      	adds	r3, r7, r0
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	18d2      	adds	r2, r2, r3
 80081f4:	183b      	adds	r3, r7, r0
 80081f6:	7819      	ldrb	r1, [r3, #0]
 80081f8:	2308      	movs	r3, #8
 80081fa:	18fb      	adds	r3, r7, r3
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	3301      	adds	r3, #1
 8008200:	1acb      	subs	r3, r1, r3
 8008202:	7811      	ldrb	r1, [r2, #0]
 8008204:	4a21      	ldr	r2, [pc, #132]	; (800828c <check_command_SERVER+0x148>)
 8008206:	54d1      	strb	r1, [r2, r3]
	            for(uint8_t a=commaPosition[0]+1;a<commaPosition[1];a++){
 8008208:	183b      	adds	r3, r7, r0
 800820a:	781a      	ldrb	r2, [r3, #0]
 800820c:	183b      	adds	r3, r7, r0
 800820e:	3201      	adds	r2, #1
 8008210:	701a      	strb	r2, [r3, #0]
 8008212:	2108      	movs	r1, #8
 8008214:	187b      	adds	r3, r7, r1
 8008216:	785b      	ldrb	r3, [r3, #1]
 8008218:	220d      	movs	r2, #13
 800821a:	18ba      	adds	r2, r7, r2
 800821c:	7812      	ldrb	r2, [r2, #0]
 800821e:	429a      	cmp	r2, r3
 8008220:	d3e3      	bcc.n	80081ea <check_command_SERVER+0xa6>
	                }
	            //extract port
	    	    for(uint8_t a=commaPosition[1]+1;a<commaPosition[1]+7;a++){
 8008222:	187b      	adds	r3, r7, r1
 8008224:	785a      	ldrb	r2, [r3, #1]
 8008226:	230c      	movs	r3, #12
 8008228:	18fb      	adds	r3, r7, r3
 800822a:	3201      	adds	r2, #1
 800822c:	701a      	strb	r2, [r3, #0]
 800822e:	e01b      	b.n	8008268 <check_command_SERVER+0x124>
	    	        if(command[a]!=NULL){
 8008230:	210c      	movs	r1, #12
 8008232:	187b      	adds	r3, r7, r1
 8008234:	781b      	ldrb	r3, [r3, #0]
 8008236:	687a      	ldr	r2, [r7, #4]
 8008238:	18d3      	adds	r3, r2, r3
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d00d      	beq.n	800825c <check_command_SERVER+0x118>
	    	            portAdd[a-(commaPosition[1]+1)] = command[a];
 8008240:	187b      	adds	r3, r7, r1
 8008242:	781b      	ldrb	r3, [r3, #0]
 8008244:	687a      	ldr	r2, [r7, #4]
 8008246:	18d2      	adds	r2, r2, r3
 8008248:	187b      	adds	r3, r7, r1
 800824a:	7819      	ldrb	r1, [r3, #0]
 800824c:	2308      	movs	r3, #8
 800824e:	18fb      	adds	r3, r7, r3
 8008250:	785b      	ldrb	r3, [r3, #1]
 8008252:	3301      	adds	r3, #1
 8008254:	1acb      	subs	r3, r1, r3
 8008256:	7811      	ldrb	r1, [r2, #0]
 8008258:	4a0b      	ldr	r2, [pc, #44]	; (8008288 <check_command_SERVER+0x144>)
 800825a:	54d1      	strb	r1, [r2, r3]
	    	    for(uint8_t a=commaPosition[1]+1;a<commaPosition[1]+7;a++){
 800825c:	210c      	movs	r1, #12
 800825e:	187b      	adds	r3, r7, r1
 8008260:	781a      	ldrb	r2, [r3, #0]
 8008262:	187b      	adds	r3, r7, r1
 8008264:	3201      	adds	r2, #1
 8008266:	701a      	strb	r2, [r3, #0]
 8008268:	2308      	movs	r3, #8
 800826a:	18fb      	adds	r3, r7, r3
 800826c:	785b      	ldrb	r3, [r3, #1]
 800826e:	1d9a      	adds	r2, r3, #6
 8008270:	230c      	movs	r3, #12
 8008272:	18fb      	adds	r3, r7, r3
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	429a      	cmp	r2, r3
 8008278:	dada      	bge.n	8008230 <check_command_SERVER+0xec>
	    	        }
	    	    }
	    	    save_to_flash(0);
 800827a:	2000      	movs	r0, #0
 800827c:	f7fe f90c 	bl	8006498 <save_to_flash>
	    	    //todo save to flash please.
		    }
		    else{
//		        printf("Data is bad");
		    }
}
 8008280:	46c0      	nop			; (mov r8, r8)
 8008282:	46bd      	mov	sp, r7
 8008284:	b005      	add	sp, #20
 8008286:	bd90      	pop	{r4, r7, pc}
 8008288:	20000030 	.word	0x20000030
 800828c:	20000038 	.word	0x20000038

08008290 <check_command_RELAY>:
void check_command_RELAY(char* sCommand){
 8008290:	b580      	push	{r7, lr}
 8008292:	b082      	sub	sp, #8
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
	if(sCommand[6]=='1'){
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	3306      	adds	r3, #6
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	2b31      	cmp	r3, #49	; 0x31
 80082a0:	d114      	bne.n	80082cc <check_command_RELAY+0x3c>
		if(isGpsValid == 1 && gpsSpeed < 20){
 80082a2:	4b15      	ldr	r3, [pc, #84]	; (80082f8 <check_command_RELAY+0x68>)
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d121      	bne.n	80082ee <check_command_RELAY+0x5e>
 80082aa:	4b14      	ldr	r3, [pc, #80]	; (80082fc <check_command_RELAY+0x6c>)
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	2b13      	cmp	r3, #19
 80082b0:	d81d      	bhi.n	80082ee <check_command_RELAY+0x5e>
			//SWITCH OFF THE CAR
			HAL_GPIO_WritePin(OUTPUT_1_GPIO_Port, OUTPUT_1_Pin, 1);
 80082b2:	4b13      	ldr	r3, [pc, #76]	; (8008300 <check_command_RELAY+0x70>)
 80082b4:	2201      	movs	r2, #1
 80082b6:	2102      	movs	r1, #2
 80082b8:	0018      	movs	r0, r3
 80082ba:	f001 febc 	bl	800a036 <HAL_GPIO_WritePin>
			relayState = 1;
 80082be:	4b11      	ldr	r3, [pc, #68]	; (8008304 <check_command_RELAY+0x74>)
 80082c0:	2201      	movs	r2, #1
 80082c2:	701a      	strb	r2, [r3, #0]
			save_to_flash(0);
 80082c4:	2000      	movs	r0, #0
 80082c6:	f7fe f8e7 	bl	8006498 <save_to_flash>
		//SWITCH ON THE CAR
		HAL_GPIO_WritePin(OUTPUT_1_GPIO_Port, OUTPUT_1_Pin, 0);
		relayState = 0;
		save_to_flash(0);
	}
}
 80082ca:	e010      	b.n	80082ee <check_command_RELAY+0x5e>
	else if(sCommand[6] == '0'){
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	3306      	adds	r3, #6
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	2b30      	cmp	r3, #48	; 0x30
 80082d4:	d10b      	bne.n	80082ee <check_command_RELAY+0x5e>
		HAL_GPIO_WritePin(OUTPUT_1_GPIO_Port, OUTPUT_1_Pin, 0);
 80082d6:	4b0a      	ldr	r3, [pc, #40]	; (8008300 <check_command_RELAY+0x70>)
 80082d8:	2200      	movs	r2, #0
 80082da:	2102      	movs	r1, #2
 80082dc:	0018      	movs	r0, r3
 80082de:	f001 feaa 	bl	800a036 <HAL_GPIO_WritePin>
		relayState = 0;
 80082e2:	4b08      	ldr	r3, [pc, #32]	; (8008304 <check_command_RELAY+0x74>)
 80082e4:	2200      	movs	r2, #0
 80082e6:	701a      	strb	r2, [r3, #0]
		save_to_flash(0);
 80082e8:	2000      	movs	r0, #0
 80082ea:	f7fe f8d5 	bl	8006498 <save_to_flash>
}
 80082ee:	46c0      	nop			; (mov r8, r8)
 80082f0:	46bd      	mov	sp, r7
 80082f2:	b002      	add	sp, #8
 80082f4:	bd80      	pop	{r7, pc}
 80082f6:	46c0      	nop			; (mov r8, r8)
 80082f8:	20000722 	.word	0x20000722
 80082fc:	20000723 	.word	0x20000723
 8008300:	50000400 	.word	0x50000400
 8008304:	20000724 	.word	0x20000724

08008308 <check_command_TIMER>:
void check_command_TIMER(char* command){
 8008308:	b590      	push	{r4, r7, lr}
 800830a:	b089      	sub	sp, #36	; 0x24
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]

    //check for data integrity by counting commas.
    //there must be 2 commas in total.
    //t1 and t2 both must no be greater than 3 chars.

    uint8_t commaPosition[2]={0,0};
 8008310:	230c      	movs	r3, #12
 8008312:	18fb      	adds	r3, r7, r3
 8008314:	2200      	movs	r2, #0
 8008316:	801a      	strh	r2, [r3, #0]
    uint8_t totalCommas=0;
 8008318:	231f      	movs	r3, #31
 800831a:	18fb      	adds	r3, r7, r3
 800831c:	2200      	movs	r2, #0
 800831e:	701a      	strb	r2, [r3, #0]
    for (uint8_t a=0;a<MAX_COMMAND_LEN;a++){
 8008320:	231e      	movs	r3, #30
 8008322:	18fb      	adds	r3, r7, r3
 8008324:	2200      	movs	r2, #0
 8008326:	701a      	strb	r2, [r3, #0]
 8008328:	e01f      	b.n	800836a <check_command_TIMER+0x62>
        if(command[a]==','){
 800832a:	211e      	movs	r1, #30
 800832c:	187b      	adds	r3, r7, r1
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	687a      	ldr	r2, [r7, #4]
 8008332:	18d3      	adds	r3, r2, r3
 8008334:	781b      	ldrb	r3, [r3, #0]
 8008336:	2b2c      	cmp	r3, #44	; 0x2c
 8008338:	d111      	bne.n	800835e <check_command_TIMER+0x56>
            if(totalCommas<2){
 800833a:	221f      	movs	r2, #31
 800833c:	18bb      	adds	r3, r7, r2
 800833e:	781b      	ldrb	r3, [r3, #0]
 8008340:	2b01      	cmp	r3, #1
 8008342:	d806      	bhi.n	8008352 <check_command_TIMER+0x4a>
                commaPosition[totalCommas]=a;
 8008344:	18bb      	adds	r3, r7, r2
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	220c      	movs	r2, #12
 800834a:	18ba      	adds	r2, r7, r2
 800834c:	1879      	adds	r1, r7, r1
 800834e:	7809      	ldrb	r1, [r1, #0]
 8008350:	54d1      	strb	r1, [r2, r3]
            }
            totalCommas++;
 8008352:	211f      	movs	r1, #31
 8008354:	187b      	adds	r3, r7, r1
 8008356:	781a      	ldrb	r2, [r3, #0]
 8008358:	187b      	adds	r3, r7, r1
 800835a:	3201      	adds	r2, #1
 800835c:	701a      	strb	r2, [r3, #0]
    for (uint8_t a=0;a<MAX_COMMAND_LEN;a++){
 800835e:	211e      	movs	r1, #30
 8008360:	187b      	adds	r3, r7, r1
 8008362:	781a      	ldrb	r2, [r3, #0]
 8008364:	187b      	adds	r3, r7, r1
 8008366:	3201      	adds	r2, #1
 8008368:	701a      	strb	r2, [r3, #0]
 800836a:	231e      	movs	r3, #30
 800836c:	18fb      	adds	r3, r7, r3
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	2b31      	cmp	r3, #49	; 0x31
 8008372:	d9da      	bls.n	800832a <check_command_TIMER+0x22>
        }
    }
    uint8_t comaDiff = 0;
 8008374:	201b      	movs	r0, #27
 8008376:	183b      	adds	r3, r7, r0
 8008378:	2200      	movs	r2, #0
 800837a:	701a      	strb	r2, [r3, #0]
    comaDiff = commaPosition[1] - commaPosition[0];
 800837c:	240c      	movs	r4, #12
 800837e:	193b      	adds	r3, r7, r4
 8008380:	7859      	ldrb	r1, [r3, #1]
 8008382:	193b      	adds	r3, r7, r4
 8008384:	781a      	ldrb	r2, [r3, #0]
 8008386:	183b      	adds	r3, r7, r0
 8008388:	1a8a      	subs	r2, r1, r2
 800838a:	701a      	strb	r2, [r3, #0]
    if(totalCommas ==2
 800838c:	231f      	movs	r3, #31
 800838e:	18fb      	adds	r3, r7, r3
 8008390:	781b      	ldrb	r3, [r3, #0]
 8008392:	2b02      	cmp	r3, #2
 8008394:	d000      	beq.n	8008398 <check_command_TIMER+0x90>
 8008396:	e0af      	b.n	80084f8 <check_command_TIMER+0x1f0>
    && commaPosition[0] == 5
 8008398:	193b      	adds	r3, r7, r4
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	2b05      	cmp	r3, #5
 800839e:	d000      	beq.n	80083a2 <check_command_TIMER+0x9a>
 80083a0:	e0aa      	b.n	80084f8 <check_command_TIMER+0x1f0>
    && comaDiff < 5
 80083a2:	183b      	adds	r3, r7, r0
 80083a4:	781b      	ldrb	r3, [r3, #0]
 80083a6:	2b04      	cmp	r3, #4
 80083a8:	d900      	bls.n	80083ac <check_command_TIMER+0xa4>
 80083aa:	e0a5      	b.n	80084f8 <check_command_TIMER+0x1f0>
    && comaDiff > 1){
 80083ac:	183b      	adds	r3, r7, r0
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	2b01      	cmp	r3, #1
 80083b2:	d800      	bhi.n	80083b6 <check_command_TIMER+0xae>
 80083b4:	e0a0      	b.n	80084f8 <check_command_TIMER+0x1f0>
        //two commas found, and first one is on 5th index.
        //t1 has 1-3 chars
        //data is good.
    	memset(t1,0,sizeof(t1));
 80083b6:	2314      	movs	r3, #20
 80083b8:	18fb      	adds	r3, r7, r3
 80083ba:	2204      	movs	r2, #4
 80083bc:	2100      	movs	r1, #0
 80083be:	0018      	movs	r0, r3
 80083c0:	f006 fc83 	bl	800ecca <memset>
    	memset(t2,0,sizeof(t2));
 80083c4:	2310      	movs	r3, #16
 80083c6:	18fb      	adds	r3, r7, r3
 80083c8:	2204      	movs	r2, #4
 80083ca:	2100      	movs	r1, #0
 80083cc:	0018      	movs	r0, r3
 80083ce:	f006 fc7c 	bl	800ecca <memset>

        //extract t1
        for(uint8_t a=commaPosition[0]+1;a<commaPosition[1];a++){
 80083d2:	193b      	adds	r3, r7, r4
 80083d4:	781a      	ldrb	r2, [r3, #0]
 80083d6:	231d      	movs	r3, #29
 80083d8:	18fb      	adds	r3, r7, r3
 80083da:	3201      	adds	r2, #1
 80083dc:	701a      	strb	r2, [r3, #0]
 80083de:	e014      	b.n	800840a <check_command_TIMER+0x102>
                t1[a-(commaPosition[0]+1)]=command[a];
 80083e0:	201d      	movs	r0, #29
 80083e2:	183b      	adds	r3, r7, r0
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	687a      	ldr	r2, [r7, #4]
 80083e8:	18d2      	adds	r2, r2, r3
 80083ea:	183b      	adds	r3, r7, r0
 80083ec:	7819      	ldrb	r1, [r3, #0]
 80083ee:	230c      	movs	r3, #12
 80083f0:	18fb      	adds	r3, r7, r3
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	3301      	adds	r3, #1
 80083f6:	1acb      	subs	r3, r1, r3
 80083f8:	7811      	ldrb	r1, [r2, #0]
 80083fa:	2214      	movs	r2, #20
 80083fc:	18ba      	adds	r2, r7, r2
 80083fe:	54d1      	strb	r1, [r2, r3]
        for(uint8_t a=commaPosition[0]+1;a<commaPosition[1];a++){
 8008400:	183b      	adds	r3, r7, r0
 8008402:	781a      	ldrb	r2, [r3, #0]
 8008404:	183b      	adds	r3, r7, r0
 8008406:	3201      	adds	r2, #1
 8008408:	701a      	strb	r2, [r3, #0]
 800840a:	210c      	movs	r1, #12
 800840c:	187b      	adds	r3, r7, r1
 800840e:	785b      	ldrb	r3, [r3, #1]
 8008410:	221d      	movs	r2, #29
 8008412:	18ba      	adds	r2, r7, r2
 8008414:	7812      	ldrb	r2, [r2, #0]
 8008416:	429a      	cmp	r2, r3
 8008418:	d3e2      	bcc.n	80083e0 <check_command_TIMER+0xd8>
            }
        //extract t2
	    for(uint8_t a=commaPosition[1]+1;a<commaPosition[1]+4;a++){
 800841a:	187b      	adds	r3, r7, r1
 800841c:	785a      	ldrb	r2, [r3, #1]
 800841e:	231c      	movs	r3, #28
 8008420:	18fb      	adds	r3, r7, r3
 8008422:	3201      	adds	r2, #1
 8008424:	701a      	strb	r2, [r3, #0]
 8008426:	e01b      	b.n	8008460 <check_command_TIMER+0x158>
	        if(command[a]!=NULL){
 8008428:	201c      	movs	r0, #28
 800842a:	183b      	adds	r3, r7, r0
 800842c:	781b      	ldrb	r3, [r3, #0]
 800842e:	687a      	ldr	r2, [r7, #4]
 8008430:	18d3      	adds	r3, r2, r3
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d01d      	beq.n	8008474 <check_command_TIMER+0x16c>
	            t2[a-(commaPosition[1]+1)] = command[a];
 8008438:	183b      	adds	r3, r7, r0
 800843a:	781b      	ldrb	r3, [r3, #0]
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	18d2      	adds	r2, r2, r3
 8008440:	183b      	adds	r3, r7, r0
 8008442:	7819      	ldrb	r1, [r3, #0]
 8008444:	230c      	movs	r3, #12
 8008446:	18fb      	adds	r3, r7, r3
 8008448:	785b      	ldrb	r3, [r3, #1]
 800844a:	3301      	adds	r3, #1
 800844c:	1acb      	subs	r3, r1, r3
 800844e:	7811      	ldrb	r1, [r2, #0]
 8008450:	2210      	movs	r2, #16
 8008452:	18ba      	adds	r2, r7, r2
 8008454:	54d1      	strb	r1, [r2, r3]
	    for(uint8_t a=commaPosition[1]+1;a<commaPosition[1]+4;a++){
 8008456:	183b      	adds	r3, r7, r0
 8008458:	781a      	ldrb	r2, [r3, #0]
 800845a:	183b      	adds	r3, r7, r0
 800845c:	3201      	adds	r2, #1
 800845e:	701a      	strb	r2, [r3, #0]
 8008460:	230c      	movs	r3, #12
 8008462:	18fb      	adds	r3, r7, r3
 8008464:	785b      	ldrb	r3, [r3, #1]
 8008466:	1cda      	adds	r2, r3, #3
 8008468:	231c      	movs	r3, #28
 800846a:	18fb      	adds	r3, r7, r3
 800846c:	781b      	ldrb	r3, [r3, #0]
 800846e:	429a      	cmp	r2, r3
 8008470:	dada      	bge.n	8008428 <check_command_TIMER+0x120>
 8008472:	e000      	b.n	8008476 <check_command_TIMER+0x16e>
	        }
	        else{
	        	break;
 8008474:	46c0      	nop			; (mov r8, r8)
	        }
	    }
	    locationDataIntervalA = atoi(t1);
 8008476:	2314      	movs	r3, #20
 8008478:	18fb      	adds	r3, r7, r3
 800847a:	0018      	movs	r0, r3
 800847c:	f006 fbc6 	bl	800ec0c <atoi>
 8008480:	0003      	movs	r3, r0
 8008482:	b2da      	uxtb	r2, r3
 8008484:	4b1e      	ldr	r3, [pc, #120]	; (8008500 <check_command_TIMER+0x1f8>)
 8008486:	701a      	strb	r2, [r3, #0]
	    locationDataIntervalB = atoi(t2);
 8008488:	2310      	movs	r3, #16
 800848a:	18fb      	adds	r3, r7, r3
 800848c:	0018      	movs	r0, r3
 800848e:	f006 fbbd 	bl	800ec0c <atoi>
 8008492:	0003      	movs	r3, r0
 8008494:	b2da      	uxtb	r2, r3
 8008496:	4b1b      	ldr	r3, [pc, #108]	; (8008504 <check_command_TIMER+0x1fc>)
 8008498:	701a      	strb	r2, [r3, #0]
	    locationDataIntervalA = locationDataIntervalA > 180 ? 180 : locationDataIntervalA;
 800849a:	4b19      	ldr	r3, [pc, #100]	; (8008500 <check_command_TIMER+0x1f8>)
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	1c1a      	adds	r2, r3, #0
 80084a0:	b2d3      	uxtb	r3, r2
 80084a2:	2bb4      	cmp	r3, #180	; 0xb4
 80084a4:	d901      	bls.n	80084aa <check_command_TIMER+0x1a2>
 80084a6:	23b4      	movs	r3, #180	; 0xb4
 80084a8:	1c1a      	adds	r2, r3, #0
 80084aa:	b2d2      	uxtb	r2, r2
 80084ac:	4b14      	ldr	r3, [pc, #80]	; (8008500 <check_command_TIMER+0x1f8>)
 80084ae:	701a      	strb	r2, [r3, #0]
	    locationDataIntervalA = locationDataIntervalA < 5 ? 5 : locationDataIntervalA;
 80084b0:	4b13      	ldr	r3, [pc, #76]	; (8008500 <check_command_TIMER+0x1f8>)
 80084b2:	781b      	ldrb	r3, [r3, #0]
 80084b4:	1c1a      	adds	r2, r3, #0
 80084b6:	b2d3      	uxtb	r3, r2
 80084b8:	2b05      	cmp	r3, #5
 80084ba:	d201      	bcs.n	80084c0 <check_command_TIMER+0x1b8>
 80084bc:	2305      	movs	r3, #5
 80084be:	1c1a      	adds	r2, r3, #0
 80084c0:	b2d2      	uxtb	r2, r2
 80084c2:	4b0f      	ldr	r3, [pc, #60]	; (8008500 <check_command_TIMER+0x1f8>)
 80084c4:	701a      	strb	r2, [r3, #0]
	    locationDataIntervalB = locationDataIntervalB > 180 ? 180 : locationDataIntervalB;
 80084c6:	4b0f      	ldr	r3, [pc, #60]	; (8008504 <check_command_TIMER+0x1fc>)
 80084c8:	781b      	ldrb	r3, [r3, #0]
 80084ca:	1c1a      	adds	r2, r3, #0
 80084cc:	b2d3      	uxtb	r3, r2
 80084ce:	2bb4      	cmp	r3, #180	; 0xb4
 80084d0:	d901      	bls.n	80084d6 <check_command_TIMER+0x1ce>
 80084d2:	23b4      	movs	r3, #180	; 0xb4
 80084d4:	1c1a      	adds	r2, r3, #0
 80084d6:	b2d2      	uxtb	r2, r2
 80084d8:	4b0a      	ldr	r3, [pc, #40]	; (8008504 <check_command_TIMER+0x1fc>)
 80084da:	701a      	strb	r2, [r3, #0]
	    locationDataIntervalB = locationDataIntervalB < 5 ? 5 : locationDataIntervalB;
 80084dc:	4b09      	ldr	r3, [pc, #36]	; (8008504 <check_command_TIMER+0x1fc>)
 80084de:	781b      	ldrb	r3, [r3, #0]
 80084e0:	1c1a      	adds	r2, r3, #0
 80084e2:	b2d3      	uxtb	r3, r2
 80084e4:	2b05      	cmp	r3, #5
 80084e6:	d201      	bcs.n	80084ec <check_command_TIMER+0x1e4>
 80084e8:	2305      	movs	r3, #5
 80084ea:	1c1a      	adds	r2, r3, #0
 80084ec:	b2d2      	uxtb	r2, r2
 80084ee:	4b05      	ldr	r3, [pc, #20]	; (8008504 <check_command_TIMER+0x1fc>)
 80084f0:	701a      	strb	r2, [r3, #0]
	    //todo save to flash please.
	    save_to_flash(0);
 80084f2:	2000      	movs	r0, #0
 80084f4:	f7fd ffd0 	bl	8006498 <save_to_flash>
    }
    else{
//		        printf("Data is bad");
    }
}
 80084f8:	46c0      	nop			; (mov r8, r8)
 80084fa:	46bd      	mov	sp, r7
 80084fc:	b009      	add	sp, #36	; 0x24
 80084fe:	bd90      	pop	{r4, r7, pc}
 8008500:	20000004 	.word	0x20000004
 8008504:	20000005 	.word	0x20000005

08008508 <check_command_MSGCFG>:

void check_command_MSGCFG(char* command){
 8008508:	b5b0      	push	{r4, r5, r7, lr}
 800850a:	b088      	sub	sp, #32
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
    char t1[4],t2[4];
    uint8_t cfgCode = 0;
 8008510:	231c      	movs	r3, #28
 8008512:	18fb      	adds	r3, r7, r3
 8008514:	2200      	movs	r2, #0
 8008516:	701a      	strb	r2, [r3, #0]
    //check for data integrity by counting commas.
    //there must be 2 commas in total.
    //t1 and t2 both must not be greater than 3 chars.

    uint8_t commaPosition[2]={0,0};
 8008518:	230c      	movs	r3, #12
 800851a:	18fb      	adds	r3, r7, r3
 800851c:	2200      	movs	r2, #0
 800851e:	801a      	strh	r2, [r3, #0]
    uint8_t totalCommas=0;
 8008520:	231f      	movs	r3, #31
 8008522:	18fb      	adds	r3, r7, r3
 8008524:	2200      	movs	r2, #0
 8008526:	701a      	strb	r2, [r3, #0]
    for (uint8_t a=0;a<MAX_COMMAND_LEN;a++){
 8008528:	231e      	movs	r3, #30
 800852a:	18fb      	adds	r3, r7, r3
 800852c:	2200      	movs	r2, #0
 800852e:	701a      	strb	r2, [r3, #0]
 8008530:	e01f      	b.n	8008572 <check_command_MSGCFG+0x6a>
        if(command[a]==','){
 8008532:	211e      	movs	r1, #30
 8008534:	187b      	adds	r3, r7, r1
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	687a      	ldr	r2, [r7, #4]
 800853a:	18d3      	adds	r3, r2, r3
 800853c:	781b      	ldrb	r3, [r3, #0]
 800853e:	2b2c      	cmp	r3, #44	; 0x2c
 8008540:	d111      	bne.n	8008566 <check_command_MSGCFG+0x5e>
            if(totalCommas<2){
 8008542:	221f      	movs	r2, #31
 8008544:	18bb      	adds	r3, r7, r2
 8008546:	781b      	ldrb	r3, [r3, #0]
 8008548:	2b01      	cmp	r3, #1
 800854a:	d806      	bhi.n	800855a <check_command_MSGCFG+0x52>
                commaPosition[totalCommas]=a;
 800854c:	18bb      	adds	r3, r7, r2
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	220c      	movs	r2, #12
 8008552:	18ba      	adds	r2, r7, r2
 8008554:	1879      	adds	r1, r7, r1
 8008556:	7809      	ldrb	r1, [r1, #0]
 8008558:	54d1      	strb	r1, [r2, r3]
            }
            totalCommas++;
 800855a:	211f      	movs	r1, #31
 800855c:	187b      	adds	r3, r7, r1
 800855e:	781a      	ldrb	r2, [r3, #0]
 8008560:	187b      	adds	r3, r7, r1
 8008562:	3201      	adds	r2, #1
 8008564:	701a      	strb	r2, [r3, #0]
    for (uint8_t a=0;a<MAX_COMMAND_LEN;a++){
 8008566:	211e      	movs	r1, #30
 8008568:	187b      	adds	r3, r7, r1
 800856a:	781a      	ldrb	r2, [r3, #0]
 800856c:	187b      	adds	r3, r7, r1
 800856e:	3201      	adds	r2, #1
 8008570:	701a      	strb	r2, [r3, #0]
 8008572:	231e      	movs	r3, #30
 8008574:	18fb      	adds	r3, r7, r3
 8008576:	781b      	ldrb	r3, [r3, #0]
 8008578:	2b31      	cmp	r3, #49	; 0x31
 800857a:	d9da      	bls.n	8008532 <check_command_MSGCFG+0x2a>
        }
    }
    uint8_t comaDiff = 0;
 800857c:	201b      	movs	r0, #27
 800857e:	183b      	adds	r3, r7, r0
 8008580:	2200      	movs	r2, #0
 8008582:	701a      	strb	r2, [r3, #0]
    comaDiff = commaPosition[1] - commaPosition[0];
 8008584:	240c      	movs	r4, #12
 8008586:	193b      	adds	r3, r7, r4
 8008588:	7859      	ldrb	r1, [r3, #1]
 800858a:	193b      	adds	r3, r7, r4
 800858c:	781a      	ldrb	r2, [r3, #0]
 800858e:	183b      	adds	r3, r7, r0
 8008590:	1a8a      	subs	r2, r1, r2
 8008592:	701a      	strb	r2, [r3, #0]
    if(totalCommas ==2
 8008594:	231f      	movs	r3, #31
 8008596:	18fb      	adds	r3, r7, r3
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	2b02      	cmp	r3, #2
 800859c:	d000      	beq.n	80085a0 <check_command_MSGCFG+0x98>
 800859e:	e076      	b.n	800868e <check_command_MSGCFG+0x186>
    && commaPosition[0] == 6
 80085a0:	193b      	adds	r3, r7, r4
 80085a2:	781b      	ldrb	r3, [r3, #0]
 80085a4:	2b06      	cmp	r3, #6
 80085a6:	d000      	beq.n	80085aa <check_command_MSGCFG+0xa2>
 80085a8:	e071      	b.n	800868e <check_command_MSGCFG+0x186>
    && comaDiff == 2){
 80085aa:	183b      	adds	r3, r7, r0
 80085ac:	781b      	ldrb	r3, [r3, #0]
 80085ae:	2b02      	cmp	r3, #2
 80085b0:	d16d      	bne.n	800868e <check_command_MSGCFG+0x186>
        //two commas found, and first one is on 6th index.
        //t1 has 1 char
        //data is good.
    	memset(t1,0,sizeof(t1));
 80085b2:	2514      	movs	r5, #20
 80085b4:	197b      	adds	r3, r7, r5
 80085b6:	2204      	movs	r2, #4
 80085b8:	2100      	movs	r1, #0
 80085ba:	0018      	movs	r0, r3
 80085bc:	f006 fb85 	bl	800ecca <memset>
    	memset(t2,0,sizeof(t2));
 80085c0:	2310      	movs	r3, #16
 80085c2:	18fb      	adds	r3, r7, r3
 80085c4:	2204      	movs	r2, #4
 80085c6:	2100      	movs	r1, #0
 80085c8:	0018      	movs	r0, r3
 80085ca:	f006 fb7e 	bl	800ecca <memset>

        //extract t1
         t1[0]=command[commaPosition[0]+1];
 80085ce:	0021      	movs	r1, r4
 80085d0:	187b      	adds	r3, r7, r1
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	3301      	adds	r3, #1
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	18d3      	adds	r3, r2, r3
 80085da:	781a      	ldrb	r2, [r3, #0]
 80085dc:	197b      	adds	r3, r7, r5
 80085de:	701a      	strb	r2, [r3, #0]
        //extract t2
	    for(uint8_t a=commaPosition[1]+1;a<commaPosition[1]+4;a++){
 80085e0:	187b      	adds	r3, r7, r1
 80085e2:	785a      	ldrb	r2, [r3, #1]
 80085e4:	231d      	movs	r3, #29
 80085e6:	18fb      	adds	r3, r7, r3
 80085e8:	3201      	adds	r2, #1
 80085ea:	701a      	strb	r2, [r3, #0]
 80085ec:	e01b      	b.n	8008626 <check_command_MSGCFG+0x11e>
	        if(command[a]!=NULL){
 80085ee:	201d      	movs	r0, #29
 80085f0:	183b      	adds	r3, r7, r0
 80085f2:	781b      	ldrb	r3, [r3, #0]
 80085f4:	687a      	ldr	r2, [r7, #4]
 80085f6:	18d3      	adds	r3, r2, r3
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d01d      	beq.n	800863a <check_command_MSGCFG+0x132>
	            t2[a-(commaPosition[1]+1)] = command[a];
 80085fe:	183b      	adds	r3, r7, r0
 8008600:	781b      	ldrb	r3, [r3, #0]
 8008602:	687a      	ldr	r2, [r7, #4]
 8008604:	18d2      	adds	r2, r2, r3
 8008606:	183b      	adds	r3, r7, r0
 8008608:	7819      	ldrb	r1, [r3, #0]
 800860a:	230c      	movs	r3, #12
 800860c:	18fb      	adds	r3, r7, r3
 800860e:	785b      	ldrb	r3, [r3, #1]
 8008610:	3301      	adds	r3, #1
 8008612:	1acb      	subs	r3, r1, r3
 8008614:	7811      	ldrb	r1, [r2, #0]
 8008616:	2210      	movs	r2, #16
 8008618:	18ba      	adds	r2, r7, r2
 800861a:	54d1      	strb	r1, [r2, r3]
	    for(uint8_t a=commaPosition[1]+1;a<commaPosition[1]+4;a++){
 800861c:	183b      	adds	r3, r7, r0
 800861e:	781a      	ldrb	r2, [r3, #0]
 8008620:	183b      	adds	r3, r7, r0
 8008622:	3201      	adds	r2, #1
 8008624:	701a      	strb	r2, [r3, #0]
 8008626:	230c      	movs	r3, #12
 8008628:	18fb      	adds	r3, r7, r3
 800862a:	785b      	ldrb	r3, [r3, #1]
 800862c:	1cda      	adds	r2, r3, #3
 800862e:	231d      	movs	r3, #29
 8008630:	18fb      	adds	r3, r7, r3
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	429a      	cmp	r2, r3
 8008636:	dada      	bge.n	80085ee <check_command_MSGCFG+0xe6>
 8008638:	e000      	b.n	800863c <check_command_MSGCFG+0x134>
	        }
	        else{
	        	break;
 800863a:	46c0      	nop			; (mov r8, r8)
	        }
	    }
	    cfgCode = atoi(t1);
 800863c:	2314      	movs	r3, #20
 800863e:	18fb      	adds	r3, r7, r3
 8008640:	0018      	movs	r0, r3
 8008642:	f006 fae3 	bl	800ec0c <atoi>
 8008646:	0002      	movs	r2, r0
 8008648:	211c      	movs	r1, #28
 800864a:	187b      	adds	r3, r7, r1
 800864c:	701a      	strb	r2, [r3, #0]
	    /*cfgCode:
	    	1 = TURN ON/OFF SENDING LOCATION PACKETS
	    */
	    if(cfgCode == 1){
 800864e:	187b      	adds	r3, r7, r1
 8008650:	781b      	ldrb	r3, [r3, #0]
 8008652:	2b01      	cmp	r3, #1
 8008654:	d118      	bne.n	8008688 <check_command_MSGCFG+0x180>
	    	uint8_t state = atoi(t2);
 8008656:	2310      	movs	r3, #16
 8008658:	18fb      	adds	r3, r7, r3
 800865a:	0018      	movs	r0, r3
 800865c:	f006 fad6 	bl	800ec0c <atoi>
 8008660:	0002      	movs	r2, r0
 8008662:	211a      	movs	r1, #26
 8008664:	187b      	adds	r3, r7, r1
 8008666:	701a      	strb	r2, [r3, #0]
	    	if(state == 0){
 8008668:	187b      	adds	r3, r7, r1
 800866a:	781b      	ldrb	r3, [r3, #0]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d103      	bne.n	8008678 <check_command_MSGCFG+0x170>
	    		isSMSActive = 0;
 8008670:	4b09      	ldr	r3, [pc, #36]	; (8008698 <check_command_MSGCFG+0x190>)
 8008672:	2200      	movs	r2, #0
 8008674:	701a      	strb	r2, [r3, #0]
 8008676:	e007      	b.n	8008688 <check_command_MSGCFG+0x180>
	    	}
	    	else if(state == 1){
 8008678:	231a      	movs	r3, #26
 800867a:	18fb      	adds	r3, r7, r3
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	2b01      	cmp	r3, #1
 8008680:	d102      	bne.n	8008688 <check_command_MSGCFG+0x180>
	    		isSMSActive = 1;
 8008682:	4b05      	ldr	r3, [pc, #20]	; (8008698 <check_command_MSGCFG+0x190>)
 8008684:	2201      	movs	r2, #1
 8008686:	701a      	strb	r2, [r3, #0]
	    	}
	    }
	    save_to_flash(0);
 8008688:	2000      	movs	r0, #0
 800868a:	f7fd ff05 	bl	8006498 <save_to_flash>
    }
    else{
//		        printf("Data is bad");
    }
}
 800868e:	46c0      	nop			; (mov r8, r8)
 8008690:	46bd      	mov	sp, r7
 8008692:	b008      	add	sp, #32
 8008694:	bdb0      	pop	{r4, r5, r7, pc}
 8008696:	46c0      	nop			; (mov r8, r8)
 8008698:	20000734 	.word	0x20000734

0800869c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80086a0:	b672      	cpsid	i
}
 80086a2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80086a4:	e7fe      	b.n	80086a4 <Error_Handler+0x8>
	...

080086a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b082      	sub	sp, #8
 80086ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80086ae:	4b0f      	ldr	r3, [pc, #60]	; (80086ec <HAL_MspInit+0x44>)
 80086b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80086b2:	4b0e      	ldr	r3, [pc, #56]	; (80086ec <HAL_MspInit+0x44>)
 80086b4:	2101      	movs	r1, #1
 80086b6:	430a      	orrs	r2, r1
 80086b8:	641a      	str	r2, [r3, #64]	; 0x40
 80086ba:	4b0c      	ldr	r3, [pc, #48]	; (80086ec <HAL_MspInit+0x44>)
 80086bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086be:	2201      	movs	r2, #1
 80086c0:	4013      	ands	r3, r2
 80086c2:	607b      	str	r3, [r7, #4]
 80086c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80086c6:	4b09      	ldr	r3, [pc, #36]	; (80086ec <HAL_MspInit+0x44>)
 80086c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80086ca:	4b08      	ldr	r3, [pc, #32]	; (80086ec <HAL_MspInit+0x44>)
 80086cc:	2180      	movs	r1, #128	; 0x80
 80086ce:	0549      	lsls	r1, r1, #21
 80086d0:	430a      	orrs	r2, r1
 80086d2:	63da      	str	r2, [r3, #60]	; 0x3c
 80086d4:	4b05      	ldr	r3, [pc, #20]	; (80086ec <HAL_MspInit+0x44>)
 80086d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80086d8:	2380      	movs	r3, #128	; 0x80
 80086da:	055b      	lsls	r3, r3, #21
 80086dc:	4013      	ands	r3, r2
 80086de:	603b      	str	r3, [r7, #0]
 80086e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80086e2:	46c0      	nop			; (mov r8, r8)
 80086e4:	46bd      	mov	sp, r7
 80086e6:	b002      	add	sp, #8
 80086e8:	bd80      	pop	{r7, pc}
 80086ea:	46c0      	nop			; (mov r8, r8)
 80086ec:	40021000 	.word	0x40021000

080086f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80086f0:	b590      	push	{r4, r7, lr}
 80086f2:	b08b      	sub	sp, #44	; 0x2c
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086f8:	2414      	movs	r4, #20
 80086fa:	193b      	adds	r3, r7, r4
 80086fc:	0018      	movs	r0, r3
 80086fe:	2314      	movs	r3, #20
 8008700:	001a      	movs	r2, r3
 8008702:	2100      	movs	r1, #0
 8008704:	f006 fae1 	bl	800ecca <memset>
  if(hspi->Instance==SPI1)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a1f      	ldr	r2, [pc, #124]	; (800878c <HAL_SPI_MspInit+0x9c>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d137      	bne.n	8008782 <HAL_SPI_MspInit+0x92>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008712:	4b1f      	ldr	r3, [pc, #124]	; (8008790 <HAL_SPI_MspInit+0xa0>)
 8008714:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008716:	4b1e      	ldr	r3, [pc, #120]	; (8008790 <HAL_SPI_MspInit+0xa0>)
 8008718:	2180      	movs	r1, #128	; 0x80
 800871a:	0149      	lsls	r1, r1, #5
 800871c:	430a      	orrs	r2, r1
 800871e:	641a      	str	r2, [r3, #64]	; 0x40
 8008720:	4b1b      	ldr	r3, [pc, #108]	; (8008790 <HAL_SPI_MspInit+0xa0>)
 8008722:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008724:	2380      	movs	r3, #128	; 0x80
 8008726:	015b      	lsls	r3, r3, #5
 8008728:	4013      	ands	r3, r2
 800872a:	613b      	str	r3, [r7, #16]
 800872c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800872e:	4b18      	ldr	r3, [pc, #96]	; (8008790 <HAL_SPI_MspInit+0xa0>)
 8008730:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008732:	4b17      	ldr	r3, [pc, #92]	; (8008790 <HAL_SPI_MspInit+0xa0>)
 8008734:	2102      	movs	r1, #2
 8008736:	430a      	orrs	r2, r1
 8008738:	635a      	str	r2, [r3, #52]	; 0x34
 800873a:	4b15      	ldr	r3, [pc, #84]	; (8008790 <HAL_SPI_MspInit+0xa0>)
 800873c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800873e:	2202      	movs	r2, #2
 8008740:	4013      	ands	r3, r2
 8008742:	60fb      	str	r3, [r7, #12]
 8008744:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8008746:	0021      	movs	r1, r4
 8008748:	187b      	adds	r3, r7, r1
 800874a:	2238      	movs	r2, #56	; 0x38
 800874c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800874e:	187b      	adds	r3, r7, r1
 8008750:	2202      	movs	r2, #2
 8008752:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008754:	187b      	adds	r3, r7, r1
 8008756:	2200      	movs	r2, #0
 8008758:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800875a:	187b      	adds	r3, r7, r1
 800875c:	2200      	movs	r2, #0
 800875e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8008760:	187b      	adds	r3, r7, r1
 8008762:	2200      	movs	r2, #0
 8008764:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008766:	187b      	adds	r3, r7, r1
 8008768:	4a0a      	ldr	r2, [pc, #40]	; (8008794 <HAL_SPI_MspInit+0xa4>)
 800876a:	0019      	movs	r1, r3
 800876c:	0010      	movs	r0, r2
 800876e:	f001 fae1 	bl	8009d34 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 3, 0);
 8008772:	2200      	movs	r2, #0
 8008774:	2103      	movs	r1, #3
 8008776:	2019      	movs	r0, #25
 8008778:	f001 f9de 	bl	8009b38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800877c:	2019      	movs	r0, #25
 800877e:	f001 f9f0 	bl	8009b62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8008782:	46c0      	nop			; (mov r8, r8)
 8008784:	46bd      	mov	sp, r7
 8008786:	b00b      	add	sp, #44	; 0x2c
 8008788:	bd90      	pop	{r4, r7, pc}
 800878a:	46c0      	nop			; (mov r8, r8)
 800878c:	40013000 	.word	0x40013000
 8008790:	40021000 	.word	0x40021000
 8008794:	50000400 	.word	0x50000400

08008798 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008798:	b590      	push	{r4, r7, lr}
 800879a:	b08f      	sub	sp, #60	; 0x3c
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087a0:	2424      	movs	r4, #36	; 0x24
 80087a2:	193b      	adds	r3, r7, r4
 80087a4:	0018      	movs	r0, r3
 80087a6:	2314      	movs	r3, #20
 80087a8:	001a      	movs	r2, r3
 80087aa:	2100      	movs	r1, #0
 80087ac:	f006 fa8d 	bl	800ecca <memset>
  if(htim_base->Instance==TIM3)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a55      	ldr	r2, [pc, #340]	; (800890c <HAL_TIM_Base_MspInit+0x174>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d137      	bne.n	800882a <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80087ba:	4b55      	ldr	r3, [pc, #340]	; (8008910 <HAL_TIM_Base_MspInit+0x178>)
 80087bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087be:	4b54      	ldr	r3, [pc, #336]	; (8008910 <HAL_TIM_Base_MspInit+0x178>)
 80087c0:	2102      	movs	r1, #2
 80087c2:	430a      	orrs	r2, r1
 80087c4:	63da      	str	r2, [r3, #60]	; 0x3c
 80087c6:	4b52      	ldr	r3, [pc, #328]	; (8008910 <HAL_TIM_Base_MspInit+0x178>)
 80087c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087ca:	2202      	movs	r2, #2
 80087cc:	4013      	ands	r3, r2
 80087ce:	623b      	str	r3, [r7, #32]
 80087d0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80087d2:	4b4f      	ldr	r3, [pc, #316]	; (8008910 <HAL_TIM_Base_MspInit+0x178>)
 80087d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087d6:	4b4e      	ldr	r3, [pc, #312]	; (8008910 <HAL_TIM_Base_MspInit+0x178>)
 80087d8:	2101      	movs	r1, #1
 80087da:	430a      	orrs	r2, r1
 80087dc:	635a      	str	r2, [r3, #52]	; 0x34
 80087de:	4b4c      	ldr	r3, [pc, #304]	; (8008910 <HAL_TIM_Base_MspInit+0x178>)
 80087e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087e2:	2201      	movs	r2, #1
 80087e4:	4013      	ands	r3, r2
 80087e6:	61fb      	str	r3, [r7, #28]
 80087e8:	69fb      	ldr	r3, [r7, #28]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = RI_Pin;
 80087ea:	0021      	movs	r1, r4
 80087ec:	187b      	adds	r3, r7, r1
 80087ee:	2240      	movs	r2, #64	; 0x40
 80087f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087f2:	187b      	adds	r3, r7, r1
 80087f4:	2202      	movs	r2, #2
 80087f6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80087f8:	187b      	adds	r3, r7, r1
 80087fa:	2202      	movs	r2, #2
 80087fc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80087fe:	187b      	adds	r3, r7, r1
 8008800:	2200      	movs	r2, #0
 8008802:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8008804:	187b      	adds	r3, r7, r1
 8008806:	2201      	movs	r2, #1
 8008808:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(RI_GPIO_Port, &GPIO_InitStruct);
 800880a:	187a      	adds	r2, r7, r1
 800880c:	23a0      	movs	r3, #160	; 0xa0
 800880e:	05db      	lsls	r3, r3, #23
 8008810:	0011      	movs	r1, r2
 8008812:	0018      	movs	r0, r3
 8008814:	f001 fa8e 	bl	8009d34 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 8008818:	2200      	movs	r2, #0
 800881a:	2103      	movs	r1, #3
 800881c:	2010      	movs	r0, #16
 800881e:	f001 f98b 	bl	8009b38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8008822:	2010      	movs	r0, #16
 8008824:	f001 f99d 	bl	8009b62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8008828:	e06c      	b.n	8008904 <HAL_TIM_Base_MspInit+0x16c>
  else if(htim_base->Instance==TIM6)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4a39      	ldr	r2, [pc, #228]	; (8008914 <HAL_TIM_Base_MspInit+0x17c>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d114      	bne.n	800885e <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8008834:	4b36      	ldr	r3, [pc, #216]	; (8008910 <HAL_TIM_Base_MspInit+0x178>)
 8008836:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008838:	4b35      	ldr	r3, [pc, #212]	; (8008910 <HAL_TIM_Base_MspInit+0x178>)
 800883a:	2110      	movs	r1, #16
 800883c:	430a      	orrs	r2, r1
 800883e:	63da      	str	r2, [r3, #60]	; 0x3c
 8008840:	4b33      	ldr	r3, [pc, #204]	; (8008910 <HAL_TIM_Base_MspInit+0x178>)
 8008842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008844:	2210      	movs	r2, #16
 8008846:	4013      	ands	r3, r2
 8008848:	61bb      	str	r3, [r7, #24]
 800884a:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_IRQn, 3, 0);
 800884c:	2200      	movs	r2, #0
 800884e:	2103      	movs	r1, #3
 8008850:	2011      	movs	r0, #17
 8008852:	f001 f971 	bl	8009b38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8008856:	2011      	movs	r0, #17
 8008858:	f001 f983 	bl	8009b62 <HAL_NVIC_EnableIRQ>
}
 800885c:	e052      	b.n	8008904 <HAL_TIM_Base_MspInit+0x16c>
  else if(htim_base->Instance==TIM14)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a2d      	ldr	r2, [pc, #180]	; (8008918 <HAL_TIM_Base_MspInit+0x180>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d116      	bne.n	8008896 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8008868:	4b29      	ldr	r3, [pc, #164]	; (8008910 <HAL_TIM_Base_MspInit+0x178>)
 800886a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800886c:	4b28      	ldr	r3, [pc, #160]	; (8008910 <HAL_TIM_Base_MspInit+0x178>)
 800886e:	2180      	movs	r1, #128	; 0x80
 8008870:	0209      	lsls	r1, r1, #8
 8008872:	430a      	orrs	r2, r1
 8008874:	641a      	str	r2, [r3, #64]	; 0x40
 8008876:	4b26      	ldr	r3, [pc, #152]	; (8008910 <HAL_TIM_Base_MspInit+0x178>)
 8008878:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800887a:	2380      	movs	r3, #128	; 0x80
 800887c:	021b      	lsls	r3, r3, #8
 800887e:	4013      	ands	r3, r2
 8008880:	617b      	str	r3, [r7, #20]
 8008882:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM14_IRQn, 2, 0);
 8008884:	2200      	movs	r2, #0
 8008886:	2102      	movs	r1, #2
 8008888:	2013      	movs	r0, #19
 800888a:	f001 f955 	bl	8009b38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 800888e:	2013      	movs	r0, #19
 8008890:	f001 f967 	bl	8009b62 <HAL_NVIC_EnableIRQ>
}
 8008894:	e036      	b.n	8008904 <HAL_TIM_Base_MspInit+0x16c>
  else if(htim_base->Instance==TIM16)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4a20      	ldr	r2, [pc, #128]	; (800891c <HAL_TIM_Base_MspInit+0x184>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d116      	bne.n	80088ce <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80088a0:	4b1b      	ldr	r3, [pc, #108]	; (8008910 <HAL_TIM_Base_MspInit+0x178>)
 80088a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80088a4:	4b1a      	ldr	r3, [pc, #104]	; (8008910 <HAL_TIM_Base_MspInit+0x178>)
 80088a6:	2180      	movs	r1, #128	; 0x80
 80088a8:	0289      	lsls	r1, r1, #10
 80088aa:	430a      	orrs	r2, r1
 80088ac:	641a      	str	r2, [r3, #64]	; 0x40
 80088ae:	4b18      	ldr	r3, [pc, #96]	; (8008910 <HAL_TIM_Base_MspInit+0x178>)
 80088b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80088b2:	2380      	movs	r3, #128	; 0x80
 80088b4:	029b      	lsls	r3, r3, #10
 80088b6:	4013      	ands	r3, r2
 80088b8:	613b      	str	r3, [r7, #16]
 80088ba:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80088bc:	2200      	movs	r2, #0
 80088be:	2100      	movs	r1, #0
 80088c0:	2015      	movs	r0, #21
 80088c2:	f001 f939 	bl	8009b38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80088c6:	2015      	movs	r0, #21
 80088c8:	f001 f94b 	bl	8009b62 <HAL_NVIC_EnableIRQ>
}
 80088cc:	e01a      	b.n	8008904 <HAL_TIM_Base_MspInit+0x16c>
  else if(htim_base->Instance==TIM17)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4a13      	ldr	r2, [pc, #76]	; (8008920 <HAL_TIM_Base_MspInit+0x188>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d115      	bne.n	8008904 <HAL_TIM_Base_MspInit+0x16c>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80088d8:	4b0d      	ldr	r3, [pc, #52]	; (8008910 <HAL_TIM_Base_MspInit+0x178>)
 80088da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80088dc:	4b0c      	ldr	r3, [pc, #48]	; (8008910 <HAL_TIM_Base_MspInit+0x178>)
 80088de:	2180      	movs	r1, #128	; 0x80
 80088e0:	02c9      	lsls	r1, r1, #11
 80088e2:	430a      	orrs	r2, r1
 80088e4:	641a      	str	r2, [r3, #64]	; 0x40
 80088e6:	4b0a      	ldr	r3, [pc, #40]	; (8008910 <HAL_TIM_Base_MspInit+0x178>)
 80088e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80088ea:	2380      	movs	r3, #128	; 0x80
 80088ec:	02db      	lsls	r3, r3, #11
 80088ee:	4013      	ands	r3, r2
 80088f0:	60fb      	str	r3, [r7, #12]
 80088f2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 3, 0);
 80088f4:	2200      	movs	r2, #0
 80088f6:	2103      	movs	r1, #3
 80088f8:	2016      	movs	r0, #22
 80088fa:	f001 f91d 	bl	8009b38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80088fe:	2016      	movs	r0, #22
 8008900:	f001 f92f 	bl	8009b62 <HAL_NVIC_EnableIRQ>
}
 8008904:	46c0      	nop			; (mov r8, r8)
 8008906:	46bd      	mov	sp, r7
 8008908:	b00f      	add	sp, #60	; 0x3c
 800890a:	bd90      	pop	{r4, r7, pc}
 800890c:	40000400 	.word	0x40000400
 8008910:	40021000 	.word	0x40021000
 8008914:	40001000 	.word	0x40001000
 8008918:	40002000 	.word	0x40002000
 800891c:	40014400 	.word	0x40014400
 8008920:	40014800 	.word	0x40014800

08008924 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008924:	b590      	push	{r4, r7, lr}
 8008926:	b099      	sub	sp, #100	; 0x64
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800892c:	234c      	movs	r3, #76	; 0x4c
 800892e:	18fb      	adds	r3, r7, r3
 8008930:	0018      	movs	r0, r3
 8008932:	2314      	movs	r3, #20
 8008934:	001a      	movs	r2, r3
 8008936:	2100      	movs	r1, #0
 8008938:	f006 f9c7 	bl	800ecca <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800893c:	2430      	movs	r4, #48	; 0x30
 800893e:	193b      	adds	r3, r7, r4
 8008940:	0018      	movs	r0, r3
 8008942:	231c      	movs	r3, #28
 8008944:	001a      	movs	r2, r3
 8008946:	2100      	movs	r1, #0
 8008948:	f006 f9bf 	bl	800ecca <memset>
  if(huart->Instance==USART1)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a9e      	ldr	r2, [pc, #632]	; (8008bcc <HAL_UART_MspInit+0x2a8>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d148      	bne.n	80089e8 <HAL_UART_MspInit+0xc4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8008956:	193b      	adds	r3, r7, r4
 8008958:	2201      	movs	r2, #1
 800895a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800895c:	193b      	adds	r3, r7, r4
 800895e:	2200      	movs	r2, #0
 8008960:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008962:	193b      	adds	r3, r7, r4
 8008964:	0018      	movs	r0, r3
 8008966:	f002 f8a5 	bl	800aab4 <HAL_RCCEx_PeriphCLKConfig>
 800896a:	1e03      	subs	r3, r0, #0
 800896c:	d001      	beq.n	8008972 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800896e:	f7ff fe95 	bl	800869c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008972:	4b97      	ldr	r3, [pc, #604]	; (8008bd0 <HAL_UART_MspInit+0x2ac>)
 8008974:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008976:	4b96      	ldr	r3, [pc, #600]	; (8008bd0 <HAL_UART_MspInit+0x2ac>)
 8008978:	2180      	movs	r1, #128	; 0x80
 800897a:	01c9      	lsls	r1, r1, #7
 800897c:	430a      	orrs	r2, r1
 800897e:	641a      	str	r2, [r3, #64]	; 0x40
 8008980:	4b93      	ldr	r3, [pc, #588]	; (8008bd0 <HAL_UART_MspInit+0x2ac>)
 8008982:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008984:	2380      	movs	r3, #128	; 0x80
 8008986:	01db      	lsls	r3, r3, #7
 8008988:	4013      	ands	r3, r2
 800898a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800898c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800898e:	4b90      	ldr	r3, [pc, #576]	; (8008bd0 <HAL_UART_MspInit+0x2ac>)
 8008990:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008992:	4b8f      	ldr	r3, [pc, #572]	; (8008bd0 <HAL_UART_MspInit+0x2ac>)
 8008994:	2101      	movs	r1, #1
 8008996:	430a      	orrs	r2, r1
 8008998:	635a      	str	r2, [r3, #52]	; 0x34
 800899a:	4b8d      	ldr	r3, [pc, #564]	; (8008bd0 <HAL_UART_MspInit+0x2ac>)
 800899c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800899e:	2201      	movs	r2, #1
 80089a0:	4013      	ands	r3, r2
 80089a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80089a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80089a6:	214c      	movs	r1, #76	; 0x4c
 80089a8:	187b      	adds	r3, r7, r1
 80089aa:	22c0      	movs	r2, #192	; 0xc0
 80089ac:	00d2      	lsls	r2, r2, #3
 80089ae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089b0:	187b      	adds	r3, r7, r1
 80089b2:	2202      	movs	r2, #2
 80089b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089b6:	187b      	adds	r3, r7, r1
 80089b8:	2200      	movs	r2, #0
 80089ba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80089bc:	187b      	adds	r3, r7, r1
 80089be:	2200      	movs	r2, #0
 80089c0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80089c2:	187b      	adds	r3, r7, r1
 80089c4:	2201      	movs	r2, #1
 80089c6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80089c8:	187a      	adds	r2, r7, r1
 80089ca:	23a0      	movs	r3, #160	; 0xa0
 80089cc:	05db      	lsls	r3, r3, #23
 80089ce:	0011      	movs	r1, r2
 80089d0:	0018      	movs	r0, r3
 80089d2:	f001 f9af 	bl	8009d34 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 80089d6:	2200      	movs	r2, #0
 80089d8:	2103      	movs	r1, #3
 80089da:	201b      	movs	r0, #27
 80089dc:	f001 f8ac 	bl	8009b38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80089e0:	201b      	movs	r0, #27
 80089e2:	f001 f8be 	bl	8009b62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }

}
 80089e6:	e0ec      	b.n	8008bc2 <HAL_UART_MspInit+0x29e>
  else if(huart->Instance==USART2)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a79      	ldr	r2, [pc, #484]	; (8008bd4 <HAL_UART_MspInit+0x2b0>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d148      	bne.n	8008a84 <HAL_UART_MspInit+0x160>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80089f2:	2130      	movs	r1, #48	; 0x30
 80089f4:	187b      	adds	r3, r7, r1
 80089f6:	2202      	movs	r2, #2
 80089f8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80089fa:	187b      	adds	r3, r7, r1
 80089fc:	2200      	movs	r2, #0
 80089fe:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008a00:	187b      	adds	r3, r7, r1
 8008a02:	0018      	movs	r0, r3
 8008a04:	f002 f856 	bl	800aab4 <HAL_RCCEx_PeriphCLKConfig>
 8008a08:	1e03      	subs	r3, r0, #0
 8008a0a:	d001      	beq.n	8008a10 <HAL_UART_MspInit+0xec>
      Error_Handler();
 8008a0c:	f7ff fe46 	bl	800869c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8008a10:	4b6f      	ldr	r3, [pc, #444]	; (8008bd0 <HAL_UART_MspInit+0x2ac>)
 8008a12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a14:	4b6e      	ldr	r3, [pc, #440]	; (8008bd0 <HAL_UART_MspInit+0x2ac>)
 8008a16:	2180      	movs	r1, #128	; 0x80
 8008a18:	0289      	lsls	r1, r1, #10
 8008a1a:	430a      	orrs	r2, r1
 8008a1c:	63da      	str	r2, [r3, #60]	; 0x3c
 8008a1e:	4b6c      	ldr	r3, [pc, #432]	; (8008bd0 <HAL_UART_MspInit+0x2ac>)
 8008a20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a22:	2380      	movs	r3, #128	; 0x80
 8008a24:	029b      	lsls	r3, r3, #10
 8008a26:	4013      	ands	r3, r2
 8008a28:	627b      	str	r3, [r7, #36]	; 0x24
 8008a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a2c:	4b68      	ldr	r3, [pc, #416]	; (8008bd0 <HAL_UART_MspInit+0x2ac>)
 8008a2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a30:	4b67      	ldr	r3, [pc, #412]	; (8008bd0 <HAL_UART_MspInit+0x2ac>)
 8008a32:	2101      	movs	r1, #1
 8008a34:	430a      	orrs	r2, r1
 8008a36:	635a      	str	r2, [r3, #52]	; 0x34
 8008a38:	4b65      	ldr	r3, [pc, #404]	; (8008bd0 <HAL_UART_MspInit+0x2ac>)
 8008a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	4013      	ands	r3, r2
 8008a40:	623b      	str	r3, [r7, #32]
 8008a42:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GNS_TX_Pin|GNS_RX_Pin;
 8008a44:	214c      	movs	r1, #76	; 0x4c
 8008a46:	187b      	adds	r3, r7, r1
 8008a48:	220c      	movs	r2, #12
 8008a4a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a4c:	187b      	adds	r3, r7, r1
 8008a4e:	2202      	movs	r2, #2
 8008a50:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a52:	187b      	adds	r3, r7, r1
 8008a54:	2200      	movs	r2, #0
 8008a56:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a58:	187b      	adds	r3, r7, r1
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8008a5e:	187b      	adds	r3, r7, r1
 8008a60:	2201      	movs	r2, #1
 8008a62:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a64:	187a      	adds	r2, r7, r1
 8008a66:	23a0      	movs	r3, #160	; 0xa0
 8008a68:	05db      	lsls	r3, r3, #23
 8008a6a:	0011      	movs	r1, r2
 8008a6c:	0018      	movs	r0, r3
 8008a6e:	f001 f961 	bl	8009d34 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8008a72:	2200      	movs	r2, #0
 8008a74:	2103      	movs	r1, #3
 8008a76:	201c      	movs	r0, #28
 8008a78:	f001 f85e 	bl	8009b38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8008a7c:	201c      	movs	r0, #28
 8008a7e:	f001 f870 	bl	8009b62 <HAL_NVIC_EnableIRQ>
}
 8008a82:	e09e      	b.n	8008bc2 <HAL_UART_MspInit+0x29e>
  else if(huart->Instance==USART3)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4a53      	ldr	r2, [pc, #332]	; (8008bd8 <HAL_UART_MspInit+0x2b4>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d15b      	bne.n	8008b46 <HAL_UART_MspInit+0x222>
    __HAL_RCC_USART3_CLK_ENABLE();
 8008a8e:	4b50      	ldr	r3, [pc, #320]	; (8008bd0 <HAL_UART_MspInit+0x2ac>)
 8008a90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a92:	4b4f      	ldr	r3, [pc, #316]	; (8008bd0 <HAL_UART_MspInit+0x2ac>)
 8008a94:	2180      	movs	r1, #128	; 0x80
 8008a96:	02c9      	lsls	r1, r1, #11
 8008a98:	430a      	orrs	r2, r1
 8008a9a:	63da      	str	r2, [r3, #60]	; 0x3c
 8008a9c:	4b4c      	ldr	r3, [pc, #304]	; (8008bd0 <HAL_UART_MspInit+0x2ac>)
 8008a9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008aa0:	2380      	movs	r3, #128	; 0x80
 8008aa2:	02db      	lsls	r3, r3, #11
 8008aa4:	4013      	ands	r3, r2
 8008aa6:	61fb      	str	r3, [r7, #28]
 8008aa8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008aaa:	4b49      	ldr	r3, [pc, #292]	; (8008bd0 <HAL_UART_MspInit+0x2ac>)
 8008aac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008aae:	4b48      	ldr	r3, [pc, #288]	; (8008bd0 <HAL_UART_MspInit+0x2ac>)
 8008ab0:	2101      	movs	r1, #1
 8008ab2:	430a      	orrs	r2, r1
 8008ab4:	635a      	str	r2, [r3, #52]	; 0x34
 8008ab6:	4b46      	ldr	r3, [pc, #280]	; (8008bd0 <HAL_UART_MspInit+0x2ac>)
 8008ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aba:	2201      	movs	r2, #1
 8008abc:	4013      	ands	r3, r2
 8008abe:	61bb      	str	r3, [r7, #24]
 8008ac0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008ac2:	4b43      	ldr	r3, [pc, #268]	; (8008bd0 <HAL_UART_MspInit+0x2ac>)
 8008ac4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ac6:	4b42      	ldr	r3, [pc, #264]	; (8008bd0 <HAL_UART_MspInit+0x2ac>)
 8008ac8:	2102      	movs	r1, #2
 8008aca:	430a      	orrs	r2, r1
 8008acc:	635a      	str	r2, [r3, #52]	; 0x34
 8008ace:	4b40      	ldr	r3, [pc, #256]	; (8008bd0 <HAL_UART_MspInit+0x2ac>)
 8008ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ad2:	2202      	movs	r2, #2
 8008ad4:	4013      	ands	r3, r2
 8008ad6:	617b      	str	r3, [r7, #20]
 8008ad8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8008ada:	244c      	movs	r4, #76	; 0x4c
 8008adc:	193b      	adds	r3, r7, r4
 8008ade:	2220      	movs	r2, #32
 8008ae0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ae2:	193b      	adds	r3, r7, r4
 8008ae4:	2202      	movs	r2, #2
 8008ae6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ae8:	193b      	adds	r3, r7, r4
 8008aea:	2200      	movs	r2, #0
 8008aec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008aee:	193b      	adds	r3, r7, r4
 8008af0:	2200      	movs	r2, #0
 8008af2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8008af4:	193b      	adds	r3, r7, r4
 8008af6:	2204      	movs	r2, #4
 8008af8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008afa:	193a      	adds	r2, r7, r4
 8008afc:	23a0      	movs	r3, #160	; 0xa0
 8008afe:	05db      	lsls	r3, r3, #23
 8008b00:	0011      	movs	r1, r2
 8008b02:	0018      	movs	r0, r3
 8008b04:	f001 f916 	bl	8009d34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8008b08:	0021      	movs	r1, r4
 8008b0a:	187b      	adds	r3, r7, r1
 8008b0c:	2201      	movs	r2, #1
 8008b0e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b10:	187b      	adds	r3, r7, r1
 8008b12:	2202      	movs	r2, #2
 8008b14:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b16:	187b      	adds	r3, r7, r1
 8008b18:	2200      	movs	r2, #0
 8008b1a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b1c:	187b      	adds	r3, r7, r1
 8008b1e:	2200      	movs	r2, #0
 8008b20:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8008b22:	187b      	adds	r3, r7, r1
 8008b24:	2204      	movs	r2, #4
 8008b26:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008b28:	187b      	adds	r3, r7, r1
 8008b2a:	4a2c      	ldr	r2, [pc, #176]	; (8008bdc <HAL_UART_MspInit+0x2b8>)
 8008b2c:	0019      	movs	r1, r3
 8008b2e:	0010      	movs	r0, r2
 8008b30:	f001 f900 	bl	8009d34 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 3, 0);
 8008b34:	2200      	movs	r2, #0
 8008b36:	2103      	movs	r1, #3
 8008b38:	201d      	movs	r0, #29
 8008b3a:	f000 fffd 	bl	8009b38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8008b3e:	201d      	movs	r0, #29
 8008b40:	f001 f80f 	bl	8009b62 <HAL_NVIC_EnableIRQ>
}
 8008b44:	e03d      	b.n	8008bc2 <HAL_UART_MspInit+0x29e>
  else if(huart->Instance==USART4)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a25      	ldr	r2, [pc, #148]	; (8008be0 <HAL_UART_MspInit+0x2bc>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d138      	bne.n	8008bc2 <HAL_UART_MspInit+0x29e>
    __HAL_RCC_USART4_CLK_ENABLE();
 8008b50:	4b1f      	ldr	r3, [pc, #124]	; (8008bd0 <HAL_UART_MspInit+0x2ac>)
 8008b52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b54:	4b1e      	ldr	r3, [pc, #120]	; (8008bd0 <HAL_UART_MspInit+0x2ac>)
 8008b56:	2180      	movs	r1, #128	; 0x80
 8008b58:	0309      	lsls	r1, r1, #12
 8008b5a:	430a      	orrs	r2, r1
 8008b5c:	63da      	str	r2, [r3, #60]	; 0x3c
 8008b5e:	4b1c      	ldr	r3, [pc, #112]	; (8008bd0 <HAL_UART_MspInit+0x2ac>)
 8008b60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b62:	2380      	movs	r3, #128	; 0x80
 8008b64:	031b      	lsls	r3, r3, #12
 8008b66:	4013      	ands	r3, r2
 8008b68:	613b      	str	r3, [r7, #16]
 8008b6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008b6c:	4b18      	ldr	r3, [pc, #96]	; (8008bd0 <HAL_UART_MspInit+0x2ac>)
 8008b6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b70:	4b17      	ldr	r3, [pc, #92]	; (8008bd0 <HAL_UART_MspInit+0x2ac>)
 8008b72:	2101      	movs	r1, #1
 8008b74:	430a      	orrs	r2, r1
 8008b76:	635a      	str	r2, [r3, #52]	; 0x34
 8008b78:	4b15      	ldr	r3, [pc, #84]	; (8008bd0 <HAL_UART_MspInit+0x2ac>)
 8008b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	4013      	ands	r3, r2
 8008b80:	60fb      	str	r3, [r7, #12]
 8008b82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DEBUG_TX_Pin|DEBUG_RX_Pin;
 8008b84:	214c      	movs	r1, #76	; 0x4c
 8008b86:	187b      	adds	r3, r7, r1
 8008b88:	2203      	movs	r2, #3
 8008b8a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b8c:	187b      	adds	r3, r7, r1
 8008b8e:	2202      	movs	r2, #2
 8008b90:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b92:	187b      	adds	r3, r7, r1
 8008b94:	2200      	movs	r2, #0
 8008b96:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b98:	187b      	adds	r3, r7, r1
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 8008b9e:	187b      	adds	r3, r7, r1
 8008ba0:	2204      	movs	r2, #4
 8008ba2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ba4:	187a      	adds	r2, r7, r1
 8008ba6:	23a0      	movs	r3, #160	; 0xa0
 8008ba8:	05db      	lsls	r3, r3, #23
 8008baa:	0011      	movs	r1, r2
 8008bac:	0018      	movs	r0, r3
 8008bae:	f001 f8c1 	bl	8009d34 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 3, 0);
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	2103      	movs	r1, #3
 8008bb6:	201d      	movs	r0, #29
 8008bb8:	f000 ffbe 	bl	8009b38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8008bbc:	201d      	movs	r0, #29
 8008bbe:	f000 ffd0 	bl	8009b62 <HAL_NVIC_EnableIRQ>
}
 8008bc2:	46c0      	nop			; (mov r8, r8)
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	b019      	add	sp, #100	; 0x64
 8008bc8:	bd90      	pop	{r4, r7, pc}
 8008bca:	46c0      	nop			; (mov r8, r8)
 8008bcc:	40013800 	.word	0x40013800
 8008bd0:	40021000 	.word	0x40021000
 8008bd4:	40004400 	.word	0x40004400
 8008bd8:	40004800 	.word	0x40004800
 8008bdc:	50000400 	.word	0x50000400
 8008be0:	40004c00 	.word	0x40004c00

08008be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008be8:	e7fe      	b.n	8008be8 <NMI_Handler+0x4>

08008bea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008bea:	b580      	push	{r7, lr}
 8008bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008bee:	e7fe      	b.n	8008bee <HardFault_Handler+0x4>

08008bf0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8008bf4:	46c0      	nop			; (mov r8, r8)
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}

08008bfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008bfa:	b580      	push	{r7, lr}
 8008bfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008bfe:	46c0      	nop			; (mov r8, r8)
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008c08:	f000 feaa 	bl	8009960 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008c0c:	46c0      	nop			; (mov r8, r8)
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
	...

08008c14 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8008c18:	4b03      	ldr	r3, [pc, #12]	; (8008c28 <TIM3_IRQHandler+0x14>)
 8008c1a:	0018      	movs	r0, r3
 8008c1c:	f003 fb0a 	bl	800c234 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8008c20:	46c0      	nop			; (mov r8, r8)
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
 8008c26:	46c0      	nop			; (mov r8, r8)
 8008c28:	2000034c 	.word	0x2000034c

08008c2c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8008c30:	4b03      	ldr	r3, [pc, #12]	; (8008c40 <TIM6_IRQHandler+0x14>)
 8008c32:	0018      	movs	r0, r3
 8008c34:	f003 fafe 	bl	800c234 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8008c38:	46c0      	nop			; (mov r8, r8)
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}
 8008c3e:	46c0      	nop			; (mov r8, r8)
 8008c40:	20000398 	.word	0x20000398

08008c44 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8008c48:	4b03      	ldr	r3, [pc, #12]	; (8008c58 <TIM14_IRQHandler+0x14>)
 8008c4a:	0018      	movs	r0, r3
 8008c4c:	f003 faf2 	bl	800c234 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8008c50:	46c0      	nop			; (mov r8, r8)
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
 8008c56:	46c0      	nop			; (mov r8, r8)
 8008c58:	200003e4 	.word	0x200003e4

08008c5c <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8008c60:	4b03      	ldr	r3, [pc, #12]	; (8008c70 <TIM16_IRQHandler+0x14>)
 8008c62:	0018      	movs	r0, r3
 8008c64:	f003 fae6 	bl	800c234 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8008c68:	46c0      	nop			; (mov r8, r8)
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}
 8008c6e:	46c0      	nop			; (mov r8, r8)
 8008c70:	20000430 	.word	0x20000430

08008c74 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8008c78:	4b03      	ldr	r3, [pc, #12]	; (8008c88 <TIM17_IRQHandler+0x14>)
 8008c7a:	0018      	movs	r0, r3
 8008c7c:	f003 fada 	bl	800c234 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8008c80:	46c0      	nop			; (mov r8, r8)
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
 8008c86:	46c0      	nop			; (mov r8, r8)
 8008c88:	2000047c 	.word	0x2000047c

08008c8c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8008c90:	4b03      	ldr	r3, [pc, #12]	; (8008ca0 <SPI1_IRQHandler+0x14>)
 8008c92:	0018      	movs	r0, r3
 8008c94:	f002 fd70 	bl	800b778 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8008c98:	46c0      	nop			; (mov r8, r8)
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
 8008c9e:	46c0      	nop			; (mov r8, r8)
 8008ca0:	200002e8 	.word	0x200002e8

08008ca4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008ca8:	4b03      	ldr	r3, [pc, #12]	; (8008cb8 <USART1_IRQHandler+0x14>)
 8008caa:	0018      	movs	r0, r3
 8008cac:	f004 f9a6 	bl	800cffc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008cb0:	46c0      	nop			; (mov r8, r8)
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}
 8008cb6:	46c0      	nop			; (mov r8, r8)
 8008cb8:	200004c8 	.word	0x200004c8

08008cbc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8008cc0:	4b03      	ldr	r3, [pc, #12]	; (8008cd0 <USART2_IRQHandler+0x14>)
 8008cc2:	0018      	movs	r0, r3
 8008cc4:	f004 f99a 	bl	800cffc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8008cc8:	46c0      	nop			; (mov r8, r8)
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}
 8008cce:	46c0      	nop			; (mov r8, r8)
 8008cd0:	2000055c 	.word	0x2000055c

08008cd4 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8008cd8:	4b05      	ldr	r3, [pc, #20]	; (8008cf0 <USART3_4_IRQHandler+0x1c>)
 8008cda:	0018      	movs	r0, r3
 8008cdc:	f004 f98e 	bl	800cffc <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart4);
 8008ce0:	4b04      	ldr	r3, [pc, #16]	; (8008cf4 <USART3_4_IRQHandler+0x20>)
 8008ce2:	0018      	movs	r0, r3
 8008ce4:	f004 f98a 	bl	800cffc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8008ce8:	46c0      	nop			; (mov r8, r8)
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}
 8008cee:	46c0      	nop			; (mov r8, r8)
 8008cf0:	200005f0 	.word	0x200005f0
 8008cf4:	20000684 	.word	0x20000684

08008cf8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	af00      	add	r7, sp, #0
	return 1;
 8008cfc:	2301      	movs	r3, #1
}
 8008cfe:	0018      	movs	r0, r3
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}

08008d04 <_kill>:

int _kill(int pid, int sig)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b082      	sub	sp, #8
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8008d0e:	f005 ffa9 	bl	800ec64 <__errno>
 8008d12:	0003      	movs	r3, r0
 8008d14:	2216      	movs	r2, #22
 8008d16:	601a      	str	r2, [r3, #0]
	return -1;
 8008d18:	2301      	movs	r3, #1
 8008d1a:	425b      	negs	r3, r3
}
 8008d1c:	0018      	movs	r0, r3
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	b002      	add	sp, #8
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <_exit>:

void _exit (int status)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b082      	sub	sp, #8
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	425a      	negs	r2, r3
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	0011      	movs	r1, r2
 8008d34:	0018      	movs	r0, r3
 8008d36:	f7ff ffe5 	bl	8008d04 <_kill>
	while (1) {}		/* Make sure we hang here */
 8008d3a:	e7fe      	b.n	8008d3a <_exit+0x16>

08008d3c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b086      	sub	sp, #24
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	60f8      	str	r0, [r7, #12]
 8008d44:	60b9      	str	r1, [r7, #8]
 8008d46:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008d48:	2300      	movs	r3, #0
 8008d4a:	617b      	str	r3, [r7, #20]
 8008d4c:	e00a      	b.n	8008d64 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8008d4e:	e000      	b.n	8008d52 <_read+0x16>
 8008d50:	bf00      	nop
 8008d52:	0001      	movs	r1, r0
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	1c5a      	adds	r2, r3, #1
 8008d58:	60ba      	str	r2, [r7, #8]
 8008d5a:	b2ca      	uxtb	r2, r1
 8008d5c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	3301      	adds	r3, #1
 8008d62:	617b      	str	r3, [r7, #20]
 8008d64:	697a      	ldr	r2, [r7, #20]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	dbf0      	blt.n	8008d4e <_read+0x12>
	}

return len;
 8008d6c:	687b      	ldr	r3, [r7, #4]
}
 8008d6e:	0018      	movs	r0, r3
 8008d70:	46bd      	mov	sp, r7
 8008d72:	b006      	add	sp, #24
 8008d74:	bd80      	pop	{r7, pc}

08008d76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008d76:	b580      	push	{r7, lr}
 8008d78:	b086      	sub	sp, #24
 8008d7a:	af00      	add	r7, sp, #0
 8008d7c:	60f8      	str	r0, [r7, #12]
 8008d7e:	60b9      	str	r1, [r7, #8]
 8008d80:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008d82:	2300      	movs	r3, #0
 8008d84:	617b      	str	r3, [r7, #20]
 8008d86:	e009      	b.n	8008d9c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	1c5a      	adds	r2, r3, #1
 8008d8c:	60ba      	str	r2, [r7, #8]
 8008d8e:	781b      	ldrb	r3, [r3, #0]
 8008d90:	0018      	movs	r0, r3
 8008d92:	e000      	b.n	8008d96 <_write+0x20>
 8008d94:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	3301      	adds	r3, #1
 8008d9a:	617b      	str	r3, [r7, #20]
 8008d9c:	697a      	ldr	r2, [r7, #20]
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	429a      	cmp	r2, r3
 8008da2:	dbf1      	blt.n	8008d88 <_write+0x12>
	}
	return len;
 8008da4:	687b      	ldr	r3, [r7, #4]
}
 8008da6:	0018      	movs	r0, r3
 8008da8:	46bd      	mov	sp, r7
 8008daa:	b006      	add	sp, #24
 8008dac:	bd80      	pop	{r7, pc}

08008dae <_close>:

int _close(int file)
{
 8008dae:	b580      	push	{r7, lr}
 8008db0:	b082      	sub	sp, #8
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
	return -1;
 8008db6:	2301      	movs	r3, #1
 8008db8:	425b      	negs	r3, r3
}
 8008dba:	0018      	movs	r0, r3
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	b002      	add	sp, #8
 8008dc0:	bd80      	pop	{r7, pc}

08008dc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008dc2:	b580      	push	{r7, lr}
 8008dc4:	b082      	sub	sp, #8
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	6078      	str	r0, [r7, #4]
 8008dca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	2280      	movs	r2, #128	; 0x80
 8008dd0:	0192      	lsls	r2, r2, #6
 8008dd2:	605a      	str	r2, [r3, #4]
	return 0;
 8008dd4:	2300      	movs	r3, #0
}
 8008dd6:	0018      	movs	r0, r3
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	b002      	add	sp, #8
 8008ddc:	bd80      	pop	{r7, pc}

08008dde <_isatty>:

int _isatty(int file)
{
 8008dde:	b580      	push	{r7, lr}
 8008de0:	b082      	sub	sp, #8
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]
	return 1;
 8008de6:	2301      	movs	r3, #1
}
 8008de8:	0018      	movs	r0, r3
 8008dea:	46bd      	mov	sp, r7
 8008dec:	b002      	add	sp, #8
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b084      	sub	sp, #16
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	60f8      	str	r0, [r7, #12]
 8008df8:	60b9      	str	r1, [r7, #8]
 8008dfa:	607a      	str	r2, [r7, #4]
	return 0;
 8008dfc:	2300      	movs	r3, #0
}
 8008dfe:	0018      	movs	r0, r3
 8008e00:	46bd      	mov	sp, r7
 8008e02:	b004      	add	sp, #16
 8008e04:	bd80      	pop	{r7, pc}
	...

08008e08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b086      	sub	sp, #24
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008e10:	4a14      	ldr	r2, [pc, #80]	; (8008e64 <_sbrk+0x5c>)
 8008e12:	4b15      	ldr	r3, [pc, #84]	; (8008e68 <_sbrk+0x60>)
 8008e14:	1ad3      	subs	r3, r2, r3
 8008e16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008e1c:	4b13      	ldr	r3, [pc, #76]	; (8008e6c <_sbrk+0x64>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d102      	bne.n	8008e2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008e24:	4b11      	ldr	r3, [pc, #68]	; (8008e6c <_sbrk+0x64>)
 8008e26:	4a12      	ldr	r2, [pc, #72]	; (8008e70 <_sbrk+0x68>)
 8008e28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008e2a:	4b10      	ldr	r3, [pc, #64]	; (8008e6c <_sbrk+0x64>)
 8008e2c:	681a      	ldr	r2, [r3, #0]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	18d3      	adds	r3, r2, r3
 8008e32:	693a      	ldr	r2, [r7, #16]
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d207      	bcs.n	8008e48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008e38:	f005 ff14 	bl	800ec64 <__errno>
 8008e3c:	0003      	movs	r3, r0
 8008e3e:	220c      	movs	r2, #12
 8008e40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008e42:	2301      	movs	r3, #1
 8008e44:	425b      	negs	r3, r3
 8008e46:	e009      	b.n	8008e5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008e48:	4b08      	ldr	r3, [pc, #32]	; (8008e6c <_sbrk+0x64>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008e4e:	4b07      	ldr	r3, [pc, #28]	; (8008e6c <_sbrk+0x64>)
 8008e50:	681a      	ldr	r2, [r3, #0]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	18d2      	adds	r2, r2, r3
 8008e56:	4b05      	ldr	r3, [pc, #20]	; (8008e6c <_sbrk+0x64>)
 8008e58:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
}
 8008e5c:	0018      	movs	r0, r3
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	b006      	add	sp, #24
 8008e62:	bd80      	pop	{r7, pc}
 8008e64:	20009000 	.word	0x20009000
 8008e68:	00000400 	.word	0x00000400
 8008e6c:	20000d20 	.word	0x20000d20
 8008e70:	20000d60 	.word	0x20000d60

08008e74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008e78:	46c0      	nop			; (mov r8, r8)
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}
	...

08008e80 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8008e80:	b590      	push	{r4, r7, lr}
 8008e82:	b087      	sub	sp, #28
 8008e84:	af02      	add	r7, sp, #8
 8008e86:	0002      	movs	r2, r0
 8008e88:	1dfb      	adds	r3, r7, #7
 8008e8a:	701a      	strb	r2, [r3, #0]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8008e8c:	240f      	movs	r4, #15
 8008e8e:	193a      	adds	r2, r7, r4
 8008e90:	1df9      	adds	r1, r7, #7
 8008e92:	4806      	ldr	r0, [pc, #24]	; (8008eac <W25qxx_Spi+0x2c>)
 8008e94:	2364      	movs	r3, #100	; 0x64
 8008e96:	9300      	str	r3, [sp, #0]
 8008e98:	2301      	movs	r3, #1
 8008e9a:	f002 fa9b 	bl	800b3d4 <HAL_SPI_TransmitReceive>
	return ret;
 8008e9e:	193b      	adds	r3, r7, r4
 8008ea0:	781b      	ldrb	r3, [r3, #0]
}
 8008ea2:	0018      	movs	r0, r3
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	b005      	add	sp, #20
 8008ea8:	bd90      	pop	{r4, r7, pc}
 8008eaa:	46c0      	nop			; (mov r8, r8)
 8008eac:	200002e8 	.word	0x200002e8

08008eb0 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b084      	sub	sp, #16
 8008eb4:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	60fb      	str	r3, [r7, #12]
 8008eba:	2300      	movs	r3, #0
 8008ebc:	60bb      	str	r3, [r7, #8]
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	607b      	str	r3, [r7, #4]
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8008ec6:	4b15      	ldr	r3, [pc, #84]	; (8008f1c <W25qxx_ReadID+0x6c>)
 8008ec8:	2200      	movs	r2, #0
 8008eca:	2108      	movs	r1, #8
 8008ecc:	0018      	movs	r0, r3
 8008ece:	f001 f8b2 	bl	800a036 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8008ed2:	209f      	movs	r0, #159	; 0x9f
 8008ed4:	f7ff ffd4 	bl	8008e80 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8008ed8:	20a5      	movs	r0, #165	; 0xa5
 8008eda:	f7ff ffd1 	bl	8008e80 <W25qxx_Spi>
 8008ede:	0003      	movs	r3, r0
 8008ee0:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8008ee2:	20a5      	movs	r0, #165	; 0xa5
 8008ee4:	f7ff ffcc 	bl	8008e80 <W25qxx_Spi>
 8008ee8:	0003      	movs	r3, r0
 8008eea:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8008eec:	20a5      	movs	r0, #165	; 0xa5
 8008eee:	f7ff ffc7 	bl	8008e80 <W25qxx_Spi>
 8008ef2:	0003      	movs	r3, r0
 8008ef4:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8008ef6:	4b09      	ldr	r3, [pc, #36]	; (8008f1c <W25qxx_ReadID+0x6c>)
 8008ef8:	2201      	movs	r2, #1
 8008efa:	2108      	movs	r1, #8
 8008efc:	0018      	movs	r0, r3
 8008efe:	f001 f89a 	bl	800a036 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	041a      	lsls	r2, r3, #16
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	021b      	lsls	r3, r3, #8
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	683a      	ldr	r2, [r7, #0]
 8008f0e:	4313      	orrs	r3, r2
 8008f10:	60fb      	str	r3, [r7, #12]
	return Temp;
 8008f12:	68fb      	ldr	r3, [r7, #12]
}
 8008f14:	0018      	movs	r0, r3
 8008f16:	46bd      	mov	sp, r7
 8008f18:	b004      	add	sp, #16
 8008f1a:	bd80      	pop	{r7, pc}
 8008f1c:	50000c00 	.word	0x50000c00

08008f20 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8008f20:	b590      	push	{r4, r7, lr}
 8008f22:	b083      	sub	sp, #12
 8008f24:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8008f26:	4b1d      	ldr	r3, [pc, #116]	; (8008f9c <W25qxx_ReadUniqID+0x7c>)
 8008f28:	2200      	movs	r2, #0
 8008f2a:	2108      	movs	r1, #8
 8008f2c:	0018      	movs	r0, r3
 8008f2e:	f001 f882 	bl	800a036 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8008f32:	204b      	movs	r0, #75	; 0x4b
 8008f34:	f7ff ffa4 	bl	8008e80 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8008f38:	1dfb      	adds	r3, r7, #7
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	701a      	strb	r2, [r3, #0]
 8008f3e:	e007      	b.n	8008f50 <W25qxx_ReadUniqID+0x30>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8008f40:	20a5      	movs	r0, #165	; 0xa5
 8008f42:	f7ff ff9d 	bl	8008e80 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8008f46:	1dfb      	adds	r3, r7, #7
 8008f48:	781a      	ldrb	r2, [r3, #0]
 8008f4a:	1dfb      	adds	r3, r7, #7
 8008f4c:	3201      	adds	r2, #1
 8008f4e:	701a      	strb	r2, [r3, #0]
 8008f50:	1dfb      	adds	r3, r7, #7
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	2b03      	cmp	r3, #3
 8008f56:	d9f3      	bls.n	8008f40 <W25qxx_ReadUniqID+0x20>
	for (uint8_t i = 0; i < 8; i++)
 8008f58:	1dbb      	adds	r3, r7, #6
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	701a      	strb	r2, [r3, #0]
 8008f5e:	e00e      	b.n	8008f7e <W25qxx_ReadUniqID+0x5e>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8008f60:	1dbb      	adds	r3, r7, #6
 8008f62:	781c      	ldrb	r4, [r3, #0]
 8008f64:	20a5      	movs	r0, #165	; 0xa5
 8008f66:	f7ff ff8b 	bl	8008e80 <W25qxx_Spi>
 8008f6a:	0003      	movs	r3, r0
 8008f6c:	001a      	movs	r2, r3
 8008f6e:	4b0c      	ldr	r3, [pc, #48]	; (8008fa0 <W25qxx_ReadUniqID+0x80>)
 8008f70:	191b      	adds	r3, r3, r4
 8008f72:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8008f74:	1dbb      	adds	r3, r7, #6
 8008f76:	781a      	ldrb	r2, [r3, #0]
 8008f78:	1dbb      	adds	r3, r7, #6
 8008f7a:	3201      	adds	r2, #1
 8008f7c:	701a      	strb	r2, [r3, #0]
 8008f7e:	1dbb      	adds	r3, r7, #6
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	2b07      	cmp	r3, #7
 8008f84:	d9ec      	bls.n	8008f60 <W25qxx_ReadUniqID+0x40>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8008f86:	4b05      	ldr	r3, [pc, #20]	; (8008f9c <W25qxx_ReadUniqID+0x7c>)
 8008f88:	2201      	movs	r2, #1
 8008f8a:	2108      	movs	r1, #8
 8008f8c:	0018      	movs	r0, r3
 8008f8e:	f001 f852 	bl	800a036 <HAL_GPIO_WritePin>
}
 8008f92:	46c0      	nop			; (mov r8, r8)
 8008f94:	46bd      	mov	sp, r7
 8008f96:	b003      	add	sp, #12
 8008f98:	bd90      	pop	{r4, r7, pc}
 8008f9a:	46c0      	nop			; (mov r8, r8)
 8008f9c:	50000c00 	.word	0x50000c00
 8008fa0:	20000d24 	.word	0x20000d24

08008fa4 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8008fa8:	4b0a      	ldr	r3, [pc, #40]	; (8008fd4 <W25qxx_WriteEnable+0x30>)
 8008faa:	2200      	movs	r2, #0
 8008fac:	2108      	movs	r1, #8
 8008fae:	0018      	movs	r0, r3
 8008fb0:	f001 f841 	bl	800a036 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 8008fb4:	2006      	movs	r0, #6
 8008fb6:	f7ff ff63 	bl	8008e80 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8008fba:	4b06      	ldr	r3, [pc, #24]	; (8008fd4 <W25qxx_WriteEnable+0x30>)
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	2108      	movs	r1, #8
 8008fc0:	0018      	movs	r0, r3
 8008fc2:	f001 f838 	bl	800a036 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8008fc6:	2001      	movs	r0, #1
 8008fc8:	f000 fce6 	bl	8009998 <HAL_Delay>
}
 8008fcc:	46c0      	nop			; (mov r8, r8)
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}
 8008fd2:	46c0      	nop			; (mov r8, r8)
 8008fd4:	50000c00 	.word	0x50000c00

08008fd8 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8008fd8:	b5b0      	push	{r4, r5, r7, lr}
 8008fda:	b084      	sub	sp, #16
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	0002      	movs	r2, r0
 8008fe0:	1dfb      	adds	r3, r7, #7
 8008fe2:	701a      	strb	r2, [r3, #0]
	uint8_t status = 0;
 8008fe4:	240f      	movs	r4, #15
 8008fe6:	193b      	adds	r3, r7, r4
 8008fe8:	2200      	movs	r2, #0
 8008fea:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8008fec:	4b24      	ldr	r3, [pc, #144]	; (8009080 <W25qxx_ReadStatusRegister+0xa8>)
 8008fee:	2200      	movs	r2, #0
 8008ff0:	2108      	movs	r1, #8
 8008ff2:	0018      	movs	r0, r3
 8008ff4:	f001 f81f 	bl	800a036 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8008ff8:	1dfb      	adds	r3, r7, #7
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	d10f      	bne.n	8009020 <W25qxx_ReadStatusRegister+0x48>
	{
		W25qxx_Spi(0x05);
 8009000:	2005      	movs	r0, #5
 8009002:	f7ff ff3d 	bl	8008e80 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8009006:	0025      	movs	r5, r4
 8009008:	193c      	adds	r4, r7, r4
 800900a:	20a5      	movs	r0, #165	; 0xa5
 800900c:	f7ff ff38 	bl	8008e80 <W25qxx_Spi>
 8009010:	0003      	movs	r3, r0
 8009012:	7023      	strb	r3, [r4, #0]
		w25qxx.StatusRegister1 = status;
 8009014:	4b1b      	ldr	r3, [pc, #108]	; (8009084 <W25qxx_ReadStatusRegister+0xac>)
 8009016:	197a      	adds	r2, r7, r5
 8009018:	2124      	movs	r1, #36	; 0x24
 800901a:	7812      	ldrb	r2, [r2, #0]
 800901c:	545a      	strb	r2, [r3, r1]
 800901e:	e022      	b.n	8009066 <W25qxx_ReadStatusRegister+0x8e>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8009020:	1dfb      	adds	r3, r7, #7
 8009022:	781b      	ldrb	r3, [r3, #0]
 8009024:	2b02      	cmp	r3, #2
 8009026:	d10f      	bne.n	8009048 <W25qxx_ReadStatusRegister+0x70>
	{
		W25qxx_Spi(0x35);
 8009028:	2035      	movs	r0, #53	; 0x35
 800902a:	f7ff ff29 	bl	8008e80 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800902e:	250f      	movs	r5, #15
 8009030:	197c      	adds	r4, r7, r5
 8009032:	20a5      	movs	r0, #165	; 0xa5
 8009034:	f7ff ff24 	bl	8008e80 <W25qxx_Spi>
 8009038:	0003      	movs	r3, r0
 800903a:	7023      	strb	r3, [r4, #0]
		w25qxx.StatusRegister2 = status;
 800903c:	4b11      	ldr	r3, [pc, #68]	; (8009084 <W25qxx_ReadStatusRegister+0xac>)
 800903e:	197a      	adds	r2, r7, r5
 8009040:	2125      	movs	r1, #37	; 0x25
 8009042:	7812      	ldrb	r2, [r2, #0]
 8009044:	545a      	strb	r2, [r3, r1]
 8009046:	e00e      	b.n	8009066 <W25qxx_ReadStatusRegister+0x8e>
	}
	else
	{
		W25qxx_Spi(0x15);
 8009048:	2015      	movs	r0, #21
 800904a:	f7ff ff19 	bl	8008e80 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800904e:	250f      	movs	r5, #15
 8009050:	197c      	adds	r4, r7, r5
 8009052:	20a5      	movs	r0, #165	; 0xa5
 8009054:	f7ff ff14 	bl	8008e80 <W25qxx_Spi>
 8009058:	0003      	movs	r3, r0
 800905a:	7023      	strb	r3, [r4, #0]
		w25qxx.StatusRegister3 = status;
 800905c:	4b09      	ldr	r3, [pc, #36]	; (8009084 <W25qxx_ReadStatusRegister+0xac>)
 800905e:	197a      	adds	r2, r7, r5
 8009060:	2126      	movs	r1, #38	; 0x26
 8009062:	7812      	ldrb	r2, [r2, #0]
 8009064:	545a      	strb	r2, [r3, r1]
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8009066:	4b06      	ldr	r3, [pc, #24]	; (8009080 <W25qxx_ReadStatusRegister+0xa8>)
 8009068:	2201      	movs	r2, #1
 800906a:	2108      	movs	r1, #8
 800906c:	0018      	movs	r0, r3
 800906e:	f000 ffe2 	bl	800a036 <HAL_GPIO_WritePin>
	return status;
 8009072:	230f      	movs	r3, #15
 8009074:	18fb      	adds	r3, r7, r3
 8009076:	781b      	ldrb	r3, [r3, #0]
}
 8009078:	0018      	movs	r0, r3
 800907a:	46bd      	mov	sp, r7
 800907c:	b004      	add	sp, #16
 800907e:	bdb0      	pop	{r4, r5, r7, pc}
 8009080:	50000c00 	.word	0x50000c00
 8009084:	20000d24 	.word	0x20000d24

08009088 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 800908c:	2001      	movs	r0, #1
 800908e:	f000 fc83 	bl	8009998 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8009092:	4b12      	ldr	r3, [pc, #72]	; (80090dc <W25qxx_WaitForWriteEnd+0x54>)
 8009094:	2200      	movs	r2, #0
 8009096:	2108      	movs	r1, #8
 8009098:	0018      	movs	r0, r3
 800909a:	f000 ffcc 	bl	800a036 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 800909e:	2005      	movs	r0, #5
 80090a0:	f7ff feee 	bl	8008e80 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80090a4:	20a5      	movs	r0, #165	; 0xa5
 80090a6:	f7ff feeb 	bl	8008e80 <W25qxx_Spi>
 80090aa:	0003      	movs	r3, r0
 80090ac:	0019      	movs	r1, r3
 80090ae:	4b0c      	ldr	r3, [pc, #48]	; (80090e0 <W25qxx_WaitForWriteEnd+0x58>)
 80090b0:	2224      	movs	r2, #36	; 0x24
 80090b2:	5499      	strb	r1, [r3, r2]
		W25qxx_Delay(1);
 80090b4:	2001      	movs	r0, #1
 80090b6:	f000 fc6f 	bl	8009998 <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 80090ba:	4b09      	ldr	r3, [pc, #36]	; (80090e0 <W25qxx_WaitForWriteEnd+0x58>)
 80090bc:	2224      	movs	r2, #36	; 0x24
 80090be:	5c9b      	ldrb	r3, [r3, r2]
 80090c0:	001a      	movs	r2, r3
 80090c2:	2301      	movs	r3, #1
 80090c4:	4013      	ands	r3, r2
 80090c6:	d1ed      	bne.n	80090a4 <W25qxx_WaitForWriteEnd+0x1c>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80090c8:	4b04      	ldr	r3, [pc, #16]	; (80090dc <W25qxx_WaitForWriteEnd+0x54>)
 80090ca:	2201      	movs	r2, #1
 80090cc:	2108      	movs	r1, #8
 80090ce:	0018      	movs	r0, r3
 80090d0:	f000 ffb1 	bl	800a036 <HAL_GPIO_WritePin>
}
 80090d4:	46c0      	nop			; (mov r8, r8)
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}
 80090da:	46c0      	nop			; (mov r8, r8)
 80090dc:	50000c00 	.word	0x50000c00
 80090e0:	20000d24 	.word	0x20000d24

080090e4 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b082      	sub	sp, #8
 80090e8:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 80090ea:	4b58      	ldr	r3, [pc, #352]	; (800924c <W25qxx_Init+0x168>)
 80090ec:	2227      	movs	r2, #39	; 0x27
 80090ee:	2101      	movs	r1, #1
 80090f0:	5499      	strb	r1, [r3, r2]
	while (HAL_GetTick() < 100)
 80090f2:	e002      	b.n	80090fa <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 80090f4:	2001      	movs	r0, #1
 80090f6:	f000 fc4f 	bl	8009998 <HAL_Delay>
	while (HAL_GetTick() < 100)
 80090fa:	f000 fc43 	bl	8009984 <HAL_GetTick>
 80090fe:	0003      	movs	r3, r0
 8009100:	2b63      	cmp	r3, #99	; 0x63
 8009102:	d9f7      	bls.n	80090f4 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8009104:	4b52      	ldr	r3, [pc, #328]	; (8009250 <W25qxx_Init+0x16c>)
 8009106:	2201      	movs	r2, #1
 8009108:	2108      	movs	r1, #8
 800910a:	0018      	movs	r0, r3
 800910c:	f000 ff93 	bl	800a036 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8009110:	2064      	movs	r0, #100	; 0x64
 8009112:	f000 fc41 	bl	8009998 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 8009116:	f7ff fecb 	bl	8008eb0 <W25qxx_ReadID>
 800911a:	0003      	movs	r3, r0
 800911c:	607b      	str	r3, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	22ff      	movs	r2, #255	; 0xff
 8009122:	4013      	ands	r3, r2
 8009124:	3b11      	subs	r3, #17
 8009126:	2b0f      	cmp	r3, #15
 8009128:	d84d      	bhi.n	80091c6 <W25qxx_Init+0xe2>
 800912a:	009a      	lsls	r2, r3, #2
 800912c:	4b49      	ldr	r3, [pc, #292]	; (8009254 <W25qxx_Init+0x170>)
 800912e:	18d3      	adds	r3, r2, r3
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	469f      	mov	pc, r3
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8009134:	4b45      	ldr	r3, [pc, #276]	; (800924c <W25qxx_Init+0x168>)
 8009136:	220a      	movs	r2, #10
 8009138:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 800913a:	4b44      	ldr	r3, [pc, #272]	; (800924c <W25qxx_Init+0x168>)
 800913c:	2280      	movs	r2, #128	; 0x80
 800913e:	00d2      	lsls	r2, r2, #3
 8009140:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 8009142:	e046      	b.n	80091d2 <W25qxx_Init+0xee>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8009144:	4b41      	ldr	r3, [pc, #260]	; (800924c <W25qxx_Init+0x168>)
 8009146:	2209      	movs	r2, #9
 8009148:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 800914a:	4b40      	ldr	r3, [pc, #256]	; (800924c <W25qxx_Init+0x168>)
 800914c:	2280      	movs	r2, #128	; 0x80
 800914e:	0092      	lsls	r2, r2, #2
 8009150:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 8009152:	e03e      	b.n	80091d2 <W25qxx_Init+0xee>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8009154:	4b3d      	ldr	r3, [pc, #244]	; (800924c <W25qxx_Init+0x168>)
 8009156:	2208      	movs	r2, #8
 8009158:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 800915a:	4b3c      	ldr	r3, [pc, #240]	; (800924c <W25qxx_Init+0x168>)
 800915c:	2280      	movs	r2, #128	; 0x80
 800915e:	0052      	lsls	r2, r2, #1
 8009160:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 8009162:	e036      	b.n	80091d2 <W25qxx_Init+0xee>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8009164:	4b39      	ldr	r3, [pc, #228]	; (800924c <W25qxx_Init+0x168>)
 8009166:	2207      	movs	r2, #7
 8009168:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 800916a:	4b38      	ldr	r3, [pc, #224]	; (800924c <W25qxx_Init+0x168>)
 800916c:	2280      	movs	r2, #128	; 0x80
 800916e:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 8009170:	e02f      	b.n	80091d2 <W25qxx_Init+0xee>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8009172:	4b36      	ldr	r3, [pc, #216]	; (800924c <W25qxx_Init+0x168>)
 8009174:	2206      	movs	r2, #6
 8009176:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8009178:	4b34      	ldr	r3, [pc, #208]	; (800924c <W25qxx_Init+0x168>)
 800917a:	2240      	movs	r2, #64	; 0x40
 800917c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 800917e:	e028      	b.n	80091d2 <W25qxx_Init+0xee>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8009180:	4b32      	ldr	r3, [pc, #200]	; (800924c <W25qxx_Init+0x168>)
 8009182:	2205      	movs	r2, #5
 8009184:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8009186:	4b31      	ldr	r3, [pc, #196]	; (800924c <W25qxx_Init+0x168>)
 8009188:	2220      	movs	r2, #32
 800918a:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 800918c:	e021      	b.n	80091d2 <W25qxx_Init+0xee>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 800918e:	4b2f      	ldr	r3, [pc, #188]	; (800924c <W25qxx_Init+0x168>)
 8009190:	2204      	movs	r2, #4
 8009192:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8009194:	4b2d      	ldr	r3, [pc, #180]	; (800924c <W25qxx_Init+0x168>)
 8009196:	2210      	movs	r2, #16
 8009198:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 800919a:	e01a      	b.n	80091d2 <W25qxx_Init+0xee>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 800919c:	4b2b      	ldr	r3, [pc, #172]	; (800924c <W25qxx_Init+0x168>)
 800919e:	2203      	movs	r2, #3
 80091a0:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 80091a2:	4b2a      	ldr	r3, [pc, #168]	; (800924c <W25qxx_Init+0x168>)
 80091a4:	2208      	movs	r2, #8
 80091a6:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 80091a8:	e013      	b.n	80091d2 <W25qxx_Init+0xee>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 80091aa:	4b28      	ldr	r3, [pc, #160]	; (800924c <W25qxx_Init+0x168>)
 80091ac:	2202      	movs	r2, #2
 80091ae:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 80091b0:	4b26      	ldr	r3, [pc, #152]	; (800924c <W25qxx_Init+0x168>)
 80091b2:	2204      	movs	r2, #4
 80091b4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 80091b6:	e00c      	b.n	80091d2 <W25qxx_Init+0xee>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 80091b8:	4b24      	ldr	r3, [pc, #144]	; (800924c <W25qxx_Init+0x168>)
 80091ba:	2201      	movs	r2, #1
 80091bc:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 80091be:	4b23      	ldr	r3, [pc, #140]	; (800924c <W25qxx_Init+0x168>)
 80091c0:	2202      	movs	r2, #2
 80091c2:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 80091c4:	e005      	b.n	80091d2 <W25qxx_Init+0xee>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 80091c6:	4b21      	ldr	r3, [pc, #132]	; (800924c <W25qxx_Init+0x168>)
 80091c8:	2227      	movs	r2, #39	; 0x27
 80091ca:	2100      	movs	r1, #0
 80091cc:	5499      	strb	r1, [r3, r2]
		return false;
 80091ce:	2300      	movs	r3, #0
 80091d0:	e038      	b.n	8009244 <W25qxx_Init+0x160>
	}
	w25qxx.PageSize = 256;
 80091d2:	4b1e      	ldr	r3, [pc, #120]	; (800924c <W25qxx_Init+0x168>)
 80091d4:	2280      	movs	r2, #128	; 0x80
 80091d6:	0052      	lsls	r2, r2, #1
 80091d8:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 80091da:	4b1c      	ldr	r3, [pc, #112]	; (800924c <W25qxx_Init+0x168>)
 80091dc:	2280      	movs	r2, #128	; 0x80
 80091de:	0152      	lsls	r2, r2, #5
 80091e0:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 80091e2:	4b1a      	ldr	r3, [pc, #104]	; (800924c <W25qxx_Init+0x168>)
 80091e4:	69db      	ldr	r3, [r3, #28]
 80091e6:	011a      	lsls	r2, r3, #4
 80091e8:	4b18      	ldr	r3, [pc, #96]	; (800924c <W25qxx_Init+0x168>)
 80091ea:	615a      	str	r2, [r3, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 80091ec:	4b17      	ldr	r3, [pc, #92]	; (800924c <W25qxx_Init+0x168>)
 80091ee:	695a      	ldr	r2, [r3, #20]
 80091f0:	4b16      	ldr	r3, [pc, #88]	; (800924c <W25qxx_Init+0x168>)
 80091f2:	691b      	ldr	r3, [r3, #16]
 80091f4:	435a      	muls	r2, r3
 80091f6:	4b15      	ldr	r3, [pc, #84]	; (800924c <W25qxx_Init+0x168>)
 80091f8:	895b      	ldrh	r3, [r3, #10]
 80091fa:	0019      	movs	r1, r3
 80091fc:	0010      	movs	r0, r2
 80091fe:	f7f6 ffa5 	bl	800014c <__udivsi3>
 8009202:	0003      	movs	r3, r0
 8009204:	001a      	movs	r2, r3
 8009206:	4b11      	ldr	r3, [pc, #68]	; (800924c <W25qxx_Init+0x168>)
 8009208:	60da      	str	r2, [r3, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 800920a:	4b10      	ldr	r3, [pc, #64]	; (800924c <W25qxx_Init+0x168>)
 800920c:	691b      	ldr	r3, [r3, #16]
 800920e:	011a      	lsls	r2, r3, #4
 8009210:	4b0e      	ldr	r3, [pc, #56]	; (800924c <W25qxx_Init+0x168>)
 8009212:	619a      	str	r2, [r3, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8009214:	4b0d      	ldr	r3, [pc, #52]	; (800924c <W25qxx_Init+0x168>)
 8009216:	695a      	ldr	r2, [r3, #20]
 8009218:	4b0c      	ldr	r3, [pc, #48]	; (800924c <W25qxx_Init+0x168>)
 800921a:	691b      	ldr	r3, [r3, #16]
 800921c:	4353      	muls	r3, r2
 800921e:	0a9a      	lsrs	r2, r3, #10
 8009220:	4b0a      	ldr	r3, [pc, #40]	; (800924c <W25qxx_Init+0x168>)
 8009222:	621a      	str	r2, [r3, #32]
	W25qxx_ReadUniqID();
 8009224:	f7ff fe7c 	bl	8008f20 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8009228:	2001      	movs	r0, #1
 800922a:	f7ff fed5 	bl	8008fd8 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 800922e:	2002      	movs	r0, #2
 8009230:	f7ff fed2 	bl	8008fd8 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8009234:	2003      	movs	r0, #3
 8009236:	f7ff fecf 	bl	8008fd8 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 800923a:	4b04      	ldr	r3, [pc, #16]	; (800924c <W25qxx_Init+0x168>)
 800923c:	2227      	movs	r2, #39	; 0x27
 800923e:	2100      	movs	r1, #0
 8009240:	5499      	strb	r1, [r3, r2]
	return true;
 8009242:	2301      	movs	r3, #1
}
 8009244:	0018      	movs	r0, r3
 8009246:	46bd      	mov	sp, r7
 8009248:	b002      	add	sp, #8
 800924a:	bd80      	pop	{r7, pc}
 800924c:	20000d24 	.word	0x20000d24
 8009250:	50000c00 	.word	0x50000c00
 8009254:	08013650 	.word	0x08013650

08009258 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8009260:	e002      	b.n	8009268 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 8009262:	2001      	movs	r0, #1
 8009264:	f000 fb98 	bl	8009998 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8009268:	4b26      	ldr	r3, [pc, #152]	; (8009304 <W25qxx_EraseSector+0xac>)
 800926a:	2227      	movs	r2, #39	; 0x27
 800926c:	5c9b      	ldrb	r3, [r3, r2]
 800926e:	2b01      	cmp	r3, #1
 8009270:	d0f7      	beq.n	8009262 <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 8009272:	4b24      	ldr	r3, [pc, #144]	; (8009304 <W25qxx_EraseSector+0xac>)
 8009274:	2227      	movs	r2, #39	; 0x27
 8009276:	2101      	movs	r1, #1
 8009278:	5499      	strb	r1, [r3, r2]
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
#endif
	W25qxx_WaitForWriteEnd();
 800927a:	f7ff ff05 	bl	8009088 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 800927e:	4b21      	ldr	r3, [pc, #132]	; (8009304 <W25qxx_EraseSector+0xac>)
 8009280:	691a      	ldr	r2, [r3, #16]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	4353      	muls	r3, r2
 8009286:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 8009288:	f7ff fe8c 	bl	8008fa4 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800928c:	4b1e      	ldr	r3, [pc, #120]	; (8009308 <W25qxx_EraseSector+0xb0>)
 800928e:	2200      	movs	r2, #0
 8009290:	2108      	movs	r1, #8
 8009292:	0018      	movs	r0, r3
 8009294:	f000 fecf 	bl	800a036 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8009298:	4b1a      	ldr	r3, [pc, #104]	; (8009304 <W25qxx_EraseSector+0xac>)
 800929a:	781b      	ldrb	r3, [r3, #0]
 800929c:	2b08      	cmp	r3, #8
 800929e:	d909      	bls.n	80092b4 <W25qxx_EraseSector+0x5c>
	{
		W25qxx_Spi(0x21);
 80092a0:	2021      	movs	r0, #33	; 0x21
 80092a2:	f7ff fded 	bl	8008e80 <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	0e1b      	lsrs	r3, r3, #24
 80092aa:	b2db      	uxtb	r3, r3
 80092ac:	0018      	movs	r0, r3
 80092ae:	f7ff fde7 	bl	8008e80 <W25qxx_Spi>
 80092b2:	e002      	b.n	80092ba <W25qxx_EraseSector+0x62>
	}
	else
	{
		W25qxx_Spi(0x20);
 80092b4:	2020      	movs	r0, #32
 80092b6:	f7ff fde3 	bl	8008e80 <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	0c1b      	lsrs	r3, r3, #16
 80092be:	b2db      	uxtb	r3, r3
 80092c0:	0018      	movs	r0, r3
 80092c2:	f7ff fddd 	bl	8008e80 <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	0a1b      	lsrs	r3, r3, #8
 80092ca:	b2db      	uxtb	r3, r3
 80092cc:	0018      	movs	r0, r3
 80092ce:	f7ff fdd7 	bl	8008e80 <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	b2db      	uxtb	r3, r3
 80092d6:	0018      	movs	r0, r3
 80092d8:	f7ff fdd2 	bl	8008e80 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80092dc:	4b0a      	ldr	r3, [pc, #40]	; (8009308 <W25qxx_EraseSector+0xb0>)
 80092de:	2201      	movs	r2, #1
 80092e0:	2108      	movs	r1, #8
 80092e2:	0018      	movs	r0, r3
 80092e4:	f000 fea7 	bl	800a036 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 80092e8:	f7ff fece 	bl	8009088 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
#endif
	W25qxx_Delay(1);
 80092ec:	2001      	movs	r0, #1
 80092ee:	f000 fb53 	bl	8009998 <HAL_Delay>
	w25qxx.Lock = 0;
 80092f2:	4b04      	ldr	r3, [pc, #16]	; (8009304 <W25qxx_EraseSector+0xac>)
 80092f4:	2227      	movs	r2, #39	; 0x27
 80092f6:	2100      	movs	r1, #0
 80092f8:	5499      	strb	r1, [r3, r2]
}
 80092fa:	46c0      	nop			; (mov r8, r8)
 80092fc:	46bd      	mov	sp, r7
 80092fe:	b002      	add	sp, #8
 8009300:	bd80      	pop	{r7, pc}
 8009302:	46c0      	nop			; (mov r8, r8)
 8009304:	20000d24 	.word	0x20000d24
 8009308:	50000c00 	.word	0x50000c00

0800930c <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b082      	sub	sp, #8
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8009314:	4b07      	ldr	r3, [pc, #28]	; (8009334 <W25qxx_SectorToPage+0x28>)
 8009316:	691b      	ldr	r3, [r3, #16]
 8009318:	687a      	ldr	r2, [r7, #4]
 800931a:	435a      	muls	r2, r3
 800931c:	4b05      	ldr	r3, [pc, #20]	; (8009334 <W25qxx_SectorToPage+0x28>)
 800931e:	895b      	ldrh	r3, [r3, #10]
 8009320:	0019      	movs	r1, r3
 8009322:	0010      	movs	r0, r2
 8009324:	f7f6 ff12 	bl	800014c <__udivsi3>
 8009328:	0003      	movs	r3, r0
}
 800932a:	0018      	movs	r0, r3
 800932c:	46bd      	mov	sp, r7
 800932e:	b002      	add	sp, #8
 8009330:	bd80      	pop	{r7, pc}
 8009332:	46c0      	nop			; (mov r8, r8)
 8009334:	20000d24 	.word	0x20000d24

08009338 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b084      	sub	sp, #16
 800933c:	af00      	add	r7, sp, #0
 800933e:	60f8      	str	r0, [r7, #12]
 8009340:	60b9      	str	r1, [r7, #8]
 8009342:	607a      	str	r2, [r7, #4]
 8009344:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8009346:	e002      	b.n	800934e <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8009348:	2001      	movs	r0, #1
 800934a:	f000 fb25 	bl	8009998 <HAL_Delay>
	while (w25qxx.Lock == 1)
 800934e:	4b3a      	ldr	r3, [pc, #232]	; (8009438 <W25qxx_WritePage+0x100>)
 8009350:	2227      	movs	r2, #39	; 0x27
 8009352:	5c9b      	ldrb	r3, [r3, r2]
 8009354:	2b01      	cmp	r3, #1
 8009356:	d0f7      	beq.n	8009348 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 8009358:	4b37      	ldr	r3, [pc, #220]	; (8009438 <W25qxx_WritePage+0x100>)
 800935a:	2227      	movs	r2, #39	; 0x27
 800935c:	2101      	movs	r1, #1
 800935e:	5499      	strb	r1, [r3, r2]
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8009360:	683a      	ldr	r2, [r7, #0]
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	18d3      	adds	r3, r2, r3
 8009366:	4a34      	ldr	r2, [pc, #208]	; (8009438 <W25qxx_WritePage+0x100>)
 8009368:	8952      	ldrh	r2, [r2, #10]
 800936a:	4293      	cmp	r3, r2
 800936c:	d802      	bhi.n	8009374 <W25qxx_WritePage+0x3c>
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d105      	bne.n	8009380 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8009374:	4b30      	ldr	r3, [pc, #192]	; (8009438 <W25qxx_WritePage+0x100>)
 8009376:	895b      	ldrh	r3, [r3, #10]
 8009378:	001a      	movs	r2, r3
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	1ad3      	subs	r3, r2, r3
 800937e:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8009380:	687a      	ldr	r2, [r7, #4]
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	18d3      	adds	r3, r2, r3
 8009386:	4a2c      	ldr	r2, [pc, #176]	; (8009438 <W25qxx_WritePage+0x100>)
 8009388:	8952      	ldrh	r2, [r2, #10]
 800938a:	4293      	cmp	r3, r2
 800938c:	d905      	bls.n	800939a <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800938e:	4b2a      	ldr	r3, [pc, #168]	; (8009438 <W25qxx_WritePage+0x100>)
 8009390:	895b      	ldrh	r3, [r3, #10]
 8009392:	001a      	movs	r2, r3
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	1ad3      	subs	r3, r2, r3
 8009398:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	W25qxx_WaitForWriteEnd();
 800939a:	f7ff fe75 	bl	8009088 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 800939e:	f7ff fe01 	bl	8008fa4 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80093a2:	4b26      	ldr	r3, [pc, #152]	; (800943c <W25qxx_WritePage+0x104>)
 80093a4:	2200      	movs	r2, #0
 80093a6:	2108      	movs	r1, #8
 80093a8:	0018      	movs	r0, r3
 80093aa:	f000 fe44 	bl	800a036 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 80093ae:	4b22      	ldr	r3, [pc, #136]	; (8009438 <W25qxx_WritePage+0x100>)
 80093b0:	895b      	ldrh	r3, [r3, #10]
 80093b2:	001a      	movs	r2, r3
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	4353      	muls	r3, r2
 80093b8:	687a      	ldr	r2, [r7, #4]
 80093ba:	18d3      	adds	r3, r2, r3
 80093bc:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 80093be:	4b1e      	ldr	r3, [pc, #120]	; (8009438 <W25qxx_WritePage+0x100>)
 80093c0:	781b      	ldrb	r3, [r3, #0]
 80093c2:	2b08      	cmp	r3, #8
 80093c4:	d909      	bls.n	80093da <W25qxx_WritePage+0xa2>
	{
		W25qxx_Spi(0x12);
 80093c6:	2012      	movs	r0, #18
 80093c8:	f7ff fd5a 	bl	8008e80 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	0e1b      	lsrs	r3, r3, #24
 80093d0:	b2db      	uxtb	r3, r3
 80093d2:	0018      	movs	r0, r3
 80093d4:	f7ff fd54 	bl	8008e80 <W25qxx_Spi>
 80093d8:	e002      	b.n	80093e0 <W25qxx_WritePage+0xa8>
	}
	else
	{
		W25qxx_Spi(0x02);
 80093da:	2002      	movs	r0, #2
 80093dc:	f7ff fd50 	bl	8008e80 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	0c1b      	lsrs	r3, r3, #16
 80093e4:	b2db      	uxtb	r3, r3
 80093e6:	0018      	movs	r0, r3
 80093e8:	f7ff fd4a 	bl	8008e80 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	0a1b      	lsrs	r3, r3, #8
 80093f0:	b2db      	uxtb	r3, r3
 80093f2:	0018      	movs	r0, r3
 80093f4:	f7ff fd44 	bl	8008e80 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	b2db      	uxtb	r3, r3
 80093fc:	0018      	movs	r0, r3
 80093fe:	f7ff fd3f 	bl	8008e80 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	b29a      	uxth	r2, r3
 8009406:	68f9      	ldr	r1, [r7, #12]
 8009408:	480d      	ldr	r0, [pc, #52]	; (8009440 <W25qxx_WritePage+0x108>)
 800940a:	2364      	movs	r3, #100	; 0x64
 800940c:	f001 fd3e 	bl	800ae8c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8009410:	4b0a      	ldr	r3, [pc, #40]	; (800943c <W25qxx_WritePage+0x104>)
 8009412:	2201      	movs	r2, #1
 8009414:	2108      	movs	r1, #8
 8009416:	0018      	movs	r0, r3
 8009418:	f000 fe0d 	bl	800a036 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 800941c:	f7ff fe34 	bl	8009088 <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8009420:	2001      	movs	r0, #1
 8009422:	f000 fab9 	bl	8009998 <HAL_Delay>
	w25qxx.Lock = 0;
 8009426:	4b04      	ldr	r3, [pc, #16]	; (8009438 <W25qxx_WritePage+0x100>)
 8009428:	2227      	movs	r2, #39	; 0x27
 800942a:	2100      	movs	r1, #0
 800942c:	5499      	strb	r1, [r3, r2]
}
 800942e:	46c0      	nop			; (mov r8, r8)
 8009430:	46bd      	mov	sp, r7
 8009432:	b004      	add	sp, #16
 8009434:	bd80      	pop	{r7, pc}
 8009436:	46c0      	nop			; (mov r8, r8)
 8009438:	20000d24 	.word	0x20000d24
 800943c:	50000c00 	.word	0x50000c00
 8009440:	200002e8 	.word	0x200002e8

08009444 <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8009444:	b590      	push	{r4, r7, lr}
 8009446:	b089      	sub	sp, #36	; 0x24
 8009448:	af00      	add	r7, sp, #0
 800944a:	60f8      	str	r0, [r7, #12]
 800944c:	60b9      	str	r1, [r7, #8]
 800944e:	607a      	str	r2, [r7, #4]
 8009450:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 8009452:	4b2d      	ldr	r3, [pc, #180]	; (8009508 <W25qxx_WriteSector+0xc4>)
 8009454:	691b      	ldr	r3, [r3, #16]
 8009456:	683a      	ldr	r2, [r7, #0]
 8009458:	429a      	cmp	r2, r3
 800945a:	d802      	bhi.n	8009462 <W25qxx_WriteSector+0x1e>
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d102      	bne.n	8009468 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 8009462:	4b29      	ldr	r3, [pc, #164]	; (8009508 <W25qxx_WriteSector+0xc4>)
 8009464:	691b      	ldr	r3, [r3, #16]
 8009466:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8009468:	4b27      	ldr	r3, [pc, #156]	; (8009508 <W25qxx_WriteSector+0xc4>)
 800946a:	691b      	ldr	r3, [r3, #16]
 800946c:	687a      	ldr	r2, [r7, #4]
 800946e:	429a      	cmp	r2, r3
 8009470:	d245      	bcs.n	80094fe <W25qxx_WriteSector+0xba>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 8009472:	687a      	ldr	r2, [r7, #4]
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	18d2      	adds	r2, r2, r3
 8009478:	4b23      	ldr	r3, [pc, #140]	; (8009508 <W25qxx_WriteSector+0xc4>)
 800947a:	691b      	ldr	r3, [r3, #16]
 800947c:	429a      	cmp	r2, r3
 800947e:	d905      	bls.n	800948c <W25qxx_WriteSector+0x48>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 8009480:	4b21      	ldr	r3, [pc, #132]	; (8009508 <W25qxx_WriteSector+0xc4>)
 8009482:	691a      	ldr	r2, [r3, #16]
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	1ad3      	subs	r3, r2, r3
 8009488:	61bb      	str	r3, [r7, #24]
 800948a:	e001      	b.n	8009490 <W25qxx_WriteSector+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	0018      	movs	r0, r3
 8009494:	f7ff ff3a 	bl	800930c <W25qxx_SectorToPage>
 8009498:	0004      	movs	r4, r0
 800949a:	4b1b      	ldr	r3, [pc, #108]	; (8009508 <W25qxx_WriteSector+0xc4>)
 800949c:	895b      	ldrh	r3, [r3, #10]
 800949e:	0019      	movs	r1, r3
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f7f6 fe53 	bl	800014c <__udivsi3>
 80094a6:	0003      	movs	r3, r0
 80094a8:	18e3      	adds	r3, r4, r3
 80094aa:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 80094ac:	4b16      	ldr	r3, [pc, #88]	; (8009508 <W25qxx_WriteSector+0xc4>)
 80094ae:	895b      	ldrh	r3, [r3, #10]
 80094b0:	001a      	movs	r2, r3
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	0011      	movs	r1, r2
 80094b6:	0018      	movs	r0, r3
 80094b8:	f7f6 fece 	bl	8000258 <__aeabi_uidivmod>
 80094bc:	000b      	movs	r3, r1
 80094be:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 80094c0:	69bb      	ldr	r3, [r7, #24]
 80094c2:	697a      	ldr	r2, [r7, #20]
 80094c4:	69f9      	ldr	r1, [r7, #28]
 80094c6:	68f8      	ldr	r0, [r7, #12]
 80094c8:	f7ff ff36 	bl	8009338 <W25qxx_WritePage>
		StartPage++;
 80094cc:	69fb      	ldr	r3, [r7, #28]
 80094ce:	3301      	adds	r3, #1
 80094d0:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 80094d2:	4b0d      	ldr	r3, [pc, #52]	; (8009508 <W25qxx_WriteSector+0xc4>)
 80094d4:	895b      	ldrh	r3, [r3, #10]
 80094d6:	001a      	movs	r2, r3
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	1a9a      	subs	r2, r3, r2
 80094dc:	69bb      	ldr	r3, [r7, #24]
 80094de:	18d3      	adds	r3, r2, r3
 80094e0:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 80094e2:	4b09      	ldr	r3, [pc, #36]	; (8009508 <W25qxx_WriteSector+0xc4>)
 80094e4:	895b      	ldrh	r3, [r3, #10]
 80094e6:	001a      	movs	r2, r3
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	1ad3      	subs	r3, r2, r3
 80094ec:	68fa      	ldr	r2, [r7, #12]
 80094ee:	18d3      	adds	r3, r2, r3
 80094f0:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 80094f2:	2300      	movs	r3, #0
 80094f4:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 80094f6:	69bb      	ldr	r3, [r7, #24]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	dce1      	bgt.n	80094c0 <W25qxx_WriteSector+0x7c>
 80094fc:	e000      	b.n	8009500 <W25qxx_WriteSector+0xbc>
		return;
 80094fe:	46c0      	nop			; (mov r8, r8)
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 8009500:	46bd      	mov	sp, r7
 8009502:	b009      	add	sp, #36	; 0x24
 8009504:	bd90      	pop	{r4, r7, pc}
 8009506:	46c0      	nop			; (mov r8, r8)
 8009508:	20000d24 	.word	0x20000d24

0800950c <W25qxx_ReadByte>:
	W25qxx_Delay(100);
#endif
}
//###################################################################################################################
void W25qxx_ReadByte(uint8_t *pBuffer, uint32_t Bytes_Address)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b082      	sub	sp, #8
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
 8009514:	6039      	str	r1, [r7, #0]
	while (w25qxx.Lock == 1)
 8009516:	e002      	b.n	800951e <W25qxx_ReadByte+0x12>
		W25qxx_Delay(1);
 8009518:	2001      	movs	r0, #1
 800951a:	f000 fa3d 	bl	8009998 <HAL_Delay>
	while (w25qxx.Lock == 1)
 800951e:	4b24      	ldr	r3, [pc, #144]	; (80095b0 <W25qxx_ReadByte+0xa4>)
 8009520:	2227      	movs	r2, #39	; 0x27
 8009522:	5c9b      	ldrb	r3, [r3, r2]
 8009524:	2b01      	cmp	r3, #1
 8009526:	d0f7      	beq.n	8009518 <W25qxx_ReadByte+0xc>
	w25qxx.Lock = 1;
 8009528:	4b21      	ldr	r3, [pc, #132]	; (80095b0 <W25qxx_ReadByte+0xa4>)
 800952a:	2227      	movs	r2, #39	; 0x27
 800952c:	2101      	movs	r1, #1
 800952e:	5499      	strb	r1, [r3, r2]
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx ReadByte at address %d begin...\r\n", Bytes_Address);
#endif
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8009530:	4b20      	ldr	r3, [pc, #128]	; (80095b4 <W25qxx_ReadByte+0xa8>)
 8009532:	2200      	movs	r2, #0
 8009534:	2108      	movs	r1, #8
 8009536:	0018      	movs	r0, r3
 8009538:	f000 fd7d 	bl	800a036 <HAL_GPIO_WritePin>

	if (w25qxx.ID >= W25Q256)
 800953c:	4b1c      	ldr	r3, [pc, #112]	; (80095b0 <W25qxx_ReadByte+0xa4>)
 800953e:	781b      	ldrb	r3, [r3, #0]
 8009540:	2b08      	cmp	r3, #8
 8009542:	d909      	bls.n	8009558 <W25qxx_ReadByte+0x4c>
	{
		W25qxx_Spi(0x0C);
 8009544:	200c      	movs	r0, #12
 8009546:	f7ff fc9b 	bl	8008e80 <W25qxx_Spi>
		W25qxx_Spi((Bytes_Address & 0xFF000000) >> 24);
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	0e1b      	lsrs	r3, r3, #24
 800954e:	b2db      	uxtb	r3, r3
 8009550:	0018      	movs	r0, r3
 8009552:	f7ff fc95 	bl	8008e80 <W25qxx_Spi>
 8009556:	e002      	b.n	800955e <W25qxx_ReadByte+0x52>
	}
	else
	{
		W25qxx_Spi(0x0B);
 8009558:	200b      	movs	r0, #11
 800955a:	f7ff fc91 	bl	8008e80 <W25qxx_Spi>
	}
	W25qxx_Spi((Bytes_Address & 0xFF0000) >> 16);
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	0c1b      	lsrs	r3, r3, #16
 8009562:	b2db      	uxtb	r3, r3
 8009564:	0018      	movs	r0, r3
 8009566:	f7ff fc8b 	bl	8008e80 <W25qxx_Spi>
	W25qxx_Spi((Bytes_Address & 0xFF00) >> 8);
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	0a1b      	lsrs	r3, r3, #8
 800956e:	b2db      	uxtb	r3, r3
 8009570:	0018      	movs	r0, r3
 8009572:	f7ff fc85 	bl	8008e80 <W25qxx_Spi>
	W25qxx_Spi(Bytes_Address & 0xFF);
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	b2db      	uxtb	r3, r3
 800957a:	0018      	movs	r0, r3
 800957c:	f7ff fc80 	bl	8008e80 <W25qxx_Spi>
	W25qxx_Spi(0);
 8009580:	2000      	movs	r0, #0
 8009582:	f7ff fc7d 	bl	8008e80 <W25qxx_Spi>
	*pBuffer = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8009586:	20a5      	movs	r0, #165	; 0xa5
 8009588:	f7ff fc7a 	bl	8008e80 <W25qxx_Spi>
 800958c:	0003      	movs	r3, r0
 800958e:	001a      	movs	r2, r3
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8009594:	4b07      	ldr	r3, [pc, #28]	; (80095b4 <W25qxx_ReadByte+0xa8>)
 8009596:	2201      	movs	r2, #1
 8009598:	2108      	movs	r1, #8
 800959a:	0018      	movs	r0, r3
 800959c:	f000 fd4b 	bl	800a036 <HAL_GPIO_WritePin>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadByte 0x%02X done after %d ms\r\n", *pBuffer, HAL_GetTick() - StartTime);
#endif
	w25qxx.Lock = 0;
 80095a0:	4b03      	ldr	r3, [pc, #12]	; (80095b0 <W25qxx_ReadByte+0xa4>)
 80095a2:	2227      	movs	r2, #39	; 0x27
 80095a4:	2100      	movs	r1, #0
 80095a6:	5499      	strb	r1, [r3, r2]
}
 80095a8:	46c0      	nop			; (mov r8, r8)
 80095aa:	46bd      	mov	sp, r7
 80095ac:	b002      	add	sp, #8
 80095ae:	bd80      	pop	{r7, pc}
 80095b0:	20000d24 	.word	0x20000d24
 80095b4:	50000c00 	.word	0x50000c00

080095b8 <W25qxx_ReadBytes>:
//###################################################################################################################
void W25qxx_ReadBytes(uint8_t *pBuffer, uint32_t ReadAddr, uint32_t NumByteToRead)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b084      	sub	sp, #16
 80095bc:	af00      	add	r7, sp, #0
 80095be:	60f8      	str	r0, [r7, #12]
 80095c0:	60b9      	str	r1, [r7, #8]
 80095c2:	607a      	str	r2, [r7, #4]
	while (w25qxx.Lock == 1)
 80095c4:	e002      	b.n	80095cc <W25qxx_ReadBytes+0x14>
		W25qxx_Delay(1);
 80095c6:	2001      	movs	r0, #1
 80095c8:	f000 f9e6 	bl	8009998 <HAL_Delay>
	while (w25qxx.Lock == 1)
 80095cc:	4b26      	ldr	r3, [pc, #152]	; (8009668 <W25qxx_ReadBytes+0xb0>)
 80095ce:	2227      	movs	r2, #39	; 0x27
 80095d0:	5c9b      	ldrb	r3, [r3, r2]
 80095d2:	2b01      	cmp	r3, #1
 80095d4:	d0f7      	beq.n	80095c6 <W25qxx_ReadBytes+0xe>
	w25qxx.Lock = 1;
 80095d6:	4b24      	ldr	r3, [pc, #144]	; (8009668 <W25qxx_ReadBytes+0xb0>)
 80095d8:	2227      	movs	r2, #39	; 0x27
 80095da:	2101      	movs	r1, #1
 80095dc:	5499      	strb	r1, [r3, r2]
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx ReadBytes at Address:%d, %d Bytes  begin...\r\n", ReadAddr, NumByteToRead);
#endif
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80095de:	4b23      	ldr	r3, [pc, #140]	; (800966c <W25qxx_ReadBytes+0xb4>)
 80095e0:	2200      	movs	r2, #0
 80095e2:	2108      	movs	r1, #8
 80095e4:	0018      	movs	r0, r3
 80095e6:	f000 fd26 	bl	800a036 <HAL_GPIO_WritePin>

	if (w25qxx.ID >= W25Q256)
 80095ea:	4b1f      	ldr	r3, [pc, #124]	; (8009668 <W25qxx_ReadBytes+0xb0>)
 80095ec:	781b      	ldrb	r3, [r3, #0]
 80095ee:	2b08      	cmp	r3, #8
 80095f0:	d909      	bls.n	8009606 <W25qxx_ReadBytes+0x4e>
	{
		W25qxx_Spi(0x0C);
 80095f2:	200c      	movs	r0, #12
 80095f4:	f7ff fc44 	bl	8008e80 <W25qxx_Spi>
		W25qxx_Spi((ReadAddr & 0xFF000000) >> 24);
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	0e1b      	lsrs	r3, r3, #24
 80095fc:	b2db      	uxtb	r3, r3
 80095fe:	0018      	movs	r0, r3
 8009600:	f7ff fc3e 	bl	8008e80 <W25qxx_Spi>
 8009604:	e002      	b.n	800960c <W25qxx_ReadBytes+0x54>
	}
	else
	{
		W25qxx_Spi(0x0B);
 8009606:	200b      	movs	r0, #11
 8009608:	f7ff fc3a 	bl	8008e80 <W25qxx_Spi>
	}
	W25qxx_Spi((ReadAddr & 0xFF0000) >> 16);
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	0c1b      	lsrs	r3, r3, #16
 8009610:	b2db      	uxtb	r3, r3
 8009612:	0018      	movs	r0, r3
 8009614:	f7ff fc34 	bl	8008e80 <W25qxx_Spi>
	W25qxx_Spi((ReadAddr & 0xFF00) >> 8);
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	0a1b      	lsrs	r3, r3, #8
 800961c:	b2db      	uxtb	r3, r3
 800961e:	0018      	movs	r0, r3
 8009620:	f7ff fc2e 	bl	8008e80 <W25qxx_Spi>
	W25qxx_Spi(ReadAddr & 0xFF);
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	b2db      	uxtb	r3, r3
 8009628:	0018      	movs	r0, r3
 800962a:	f7ff fc29 	bl	8008e80 <W25qxx_Spi>
	W25qxx_Spi(0);
 800962e:	2000      	movs	r0, #0
 8009630:	f7ff fc26 	bl	8008e80 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead, 2000);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	b29a      	uxth	r2, r3
 8009638:	23fa      	movs	r3, #250	; 0xfa
 800963a:	00db      	lsls	r3, r3, #3
 800963c:	68f9      	ldr	r1, [r7, #12]
 800963e:	480c      	ldr	r0, [pc, #48]	; (8009670 <W25qxx_ReadBytes+0xb8>)
 8009640:	f001 fd7c 	bl	800b13c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8009644:	4b09      	ldr	r3, [pc, #36]	; (800966c <W25qxx_ReadBytes+0xb4>)
 8009646:	2201      	movs	r2, #1
 8009648:	2108      	movs	r1, #8
 800964a:	0018      	movs	r0, r3
 800964c:	f000 fcf3 	bl	800a036 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadBytes done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8009650:	2001      	movs	r0, #1
 8009652:	f000 f9a1 	bl	8009998 <HAL_Delay>
	w25qxx.Lock = 0;
 8009656:	4b04      	ldr	r3, [pc, #16]	; (8009668 <W25qxx_ReadBytes+0xb0>)
 8009658:	2227      	movs	r2, #39	; 0x27
 800965a:	2100      	movs	r1, #0
 800965c:	5499      	strb	r1, [r3, r2]
}
 800965e:	46c0      	nop			; (mov r8, r8)
 8009660:	46bd      	mov	sp, r7
 8009662:	b004      	add	sp, #16
 8009664:	bd80      	pop	{r7, pc}
 8009666:	46c0      	nop			; (mov r8, r8)
 8009668:	20000d24 	.word	0x20000d24
 800966c:	50000c00 	.word	0x50000c00
 8009670:	200002e8 	.word	0x200002e8

08009674 <W25qxx_ReadPage>:
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b084      	sub	sp, #16
 8009678:	af00      	add	r7, sp, #0
 800967a:	60f8      	str	r0, [r7, #12]
 800967c:	60b9      	str	r1, [r7, #8]
 800967e:	607a      	str	r2, [r7, #4]
 8009680:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8009682:	e002      	b.n	800968a <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8009684:	2001      	movs	r0, #1
 8009686:	f000 f987 	bl	8009998 <HAL_Delay>
	while (w25qxx.Lock == 1)
 800968a:	4b36      	ldr	r3, [pc, #216]	; (8009764 <W25qxx_ReadPage+0xf0>)
 800968c:	2227      	movs	r2, #39	; 0x27
 800968e:	5c9b      	ldrb	r3, [r3, r2]
 8009690:	2b01      	cmp	r3, #1
 8009692:	d0f7      	beq.n	8009684 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 8009694:	4b33      	ldr	r3, [pc, #204]	; (8009764 <W25qxx_ReadPage+0xf0>)
 8009696:	2227      	movs	r2, #39	; 0x27
 8009698:	2101      	movs	r1, #1
 800969a:	5499      	strb	r1, [r3, r2]
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 800969c:	4b31      	ldr	r3, [pc, #196]	; (8009764 <W25qxx_ReadPage+0xf0>)
 800969e:	895b      	ldrh	r3, [r3, #10]
 80096a0:	001a      	movs	r2, r3
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d802      	bhi.n	80096ae <W25qxx_ReadPage+0x3a>
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d102      	bne.n	80096b4 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 80096ae:	4b2d      	ldr	r3, [pc, #180]	; (8009764 <W25qxx_ReadPage+0xf0>)
 80096b0:	895b      	ldrh	r3, [r3, #10]
 80096b2:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 80096b4:	687a      	ldr	r2, [r7, #4]
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	18d3      	adds	r3, r2, r3
 80096ba:	4a2a      	ldr	r2, [pc, #168]	; (8009764 <W25qxx_ReadPage+0xf0>)
 80096bc:	8952      	ldrh	r2, [r2, #10]
 80096be:	4293      	cmp	r3, r2
 80096c0:	d905      	bls.n	80096ce <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80096c2:	4b28      	ldr	r3, [pc, #160]	; (8009764 <W25qxx_ReadPage+0xf0>)
 80096c4:	895b      	ldrh	r3, [r3, #10]
 80096c6:	001a      	movs	r2, r3
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	1ad3      	subs	r3, r2, r3
 80096cc:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 80096ce:	4b25      	ldr	r3, [pc, #148]	; (8009764 <W25qxx_ReadPage+0xf0>)
 80096d0:	895b      	ldrh	r3, [r3, #10]
 80096d2:	001a      	movs	r2, r3
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	4353      	muls	r3, r2
 80096d8:	687a      	ldr	r2, [r7, #4]
 80096da:	18d3      	adds	r3, r2, r3
 80096dc:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80096de:	4b22      	ldr	r3, [pc, #136]	; (8009768 <W25qxx_ReadPage+0xf4>)
 80096e0:	2200      	movs	r2, #0
 80096e2:	2108      	movs	r1, #8
 80096e4:	0018      	movs	r0, r3
 80096e6:	f000 fca6 	bl	800a036 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 80096ea:	4b1e      	ldr	r3, [pc, #120]	; (8009764 <W25qxx_ReadPage+0xf0>)
 80096ec:	781b      	ldrb	r3, [r3, #0]
 80096ee:	2b08      	cmp	r3, #8
 80096f0:	d909      	bls.n	8009706 <W25qxx_ReadPage+0x92>
	{
		W25qxx_Spi(0x0C);
 80096f2:	200c      	movs	r0, #12
 80096f4:	f7ff fbc4 	bl	8008e80 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	0e1b      	lsrs	r3, r3, #24
 80096fc:	b2db      	uxtb	r3, r3
 80096fe:	0018      	movs	r0, r3
 8009700:	f7ff fbbe 	bl	8008e80 <W25qxx_Spi>
 8009704:	e002      	b.n	800970c <W25qxx_ReadPage+0x98>
	}
	else
	{
		W25qxx_Spi(0x0B);
 8009706:	200b      	movs	r0, #11
 8009708:	f7ff fbba 	bl	8008e80 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	0c1b      	lsrs	r3, r3, #16
 8009710:	b2db      	uxtb	r3, r3
 8009712:	0018      	movs	r0, r3
 8009714:	f7ff fbb4 	bl	8008e80 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	0a1b      	lsrs	r3, r3, #8
 800971c:	b2db      	uxtb	r3, r3
 800971e:	0018      	movs	r0, r3
 8009720:	f7ff fbae 	bl	8008e80 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	b2db      	uxtb	r3, r3
 8009728:	0018      	movs	r0, r3
 800972a:	f7ff fba9 	bl	8008e80 <W25qxx_Spi>
	W25qxx_Spi(0);
 800972e:	2000      	movs	r0, #0
 8009730:	f7ff fba6 	bl	8008e80 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	b29a      	uxth	r2, r3
 8009738:	68f9      	ldr	r1, [r7, #12]
 800973a:	480c      	ldr	r0, [pc, #48]	; (800976c <W25qxx_ReadPage+0xf8>)
 800973c:	2364      	movs	r3, #100	; 0x64
 800973e:	f001 fcfd 	bl	800b13c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8009742:	4b09      	ldr	r3, [pc, #36]	; (8009768 <W25qxx_ReadPage+0xf4>)
 8009744:	2201      	movs	r2, #1
 8009746:	2108      	movs	r1, #8
 8009748:	0018      	movs	r0, r3
 800974a:	f000 fc74 	bl	800a036 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 800974e:	2001      	movs	r0, #1
 8009750:	f000 f922 	bl	8009998 <HAL_Delay>
	w25qxx.Lock = 0;
 8009754:	4b03      	ldr	r3, [pc, #12]	; (8009764 <W25qxx_ReadPage+0xf0>)
 8009756:	2227      	movs	r2, #39	; 0x27
 8009758:	2100      	movs	r1, #0
 800975a:	5499      	strb	r1, [r3, r2]
}
 800975c:	46c0      	nop			; (mov r8, r8)
 800975e:	46bd      	mov	sp, r7
 8009760:	b004      	add	sp, #16
 8009762:	bd80      	pop	{r7, pc}
 8009764:	20000d24 	.word	0x20000d24
 8009768:	50000c00 	.word	0x50000c00
 800976c:	200002e8 	.word	0x200002e8

08009770 <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 8009770:	b590      	push	{r4, r7, lr}
 8009772:	b089      	sub	sp, #36	; 0x24
 8009774:	af00      	add	r7, sp, #0
 8009776:	60f8      	str	r0, [r7, #12]
 8009778:	60b9      	str	r1, [r7, #8]
 800977a:	607a      	str	r2, [r7, #4]
 800977c:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 800977e:	4b2d      	ldr	r3, [pc, #180]	; (8009834 <W25qxx_ReadSector+0xc4>)
 8009780:	691b      	ldr	r3, [r3, #16]
 8009782:	683a      	ldr	r2, [r7, #0]
 8009784:	429a      	cmp	r2, r3
 8009786:	d802      	bhi.n	800978e <W25qxx_ReadSector+0x1e>
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d102      	bne.n	8009794 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 800978e:	4b29      	ldr	r3, [pc, #164]	; (8009834 <W25qxx_ReadSector+0xc4>)
 8009790:	691b      	ldr	r3, [r3, #16]
 8009792:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8009794:	4b27      	ldr	r3, [pc, #156]	; (8009834 <W25qxx_ReadSector+0xc4>)
 8009796:	691b      	ldr	r3, [r3, #16]
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	429a      	cmp	r2, r3
 800979c:	d245      	bcs.n	800982a <W25qxx_ReadSector+0xba>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 800979e:	687a      	ldr	r2, [r7, #4]
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	18d2      	adds	r2, r2, r3
 80097a4:	4b23      	ldr	r3, [pc, #140]	; (8009834 <W25qxx_ReadSector+0xc4>)
 80097a6:	691b      	ldr	r3, [r3, #16]
 80097a8:	429a      	cmp	r2, r3
 80097aa:	d905      	bls.n	80097b8 <W25qxx_ReadSector+0x48>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 80097ac:	4b21      	ldr	r3, [pc, #132]	; (8009834 <W25qxx_ReadSector+0xc4>)
 80097ae:	691a      	ldr	r2, [r3, #16]
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	1ad3      	subs	r3, r2, r3
 80097b4:	61bb      	str	r3, [r7, #24]
 80097b6:	e001      	b.n	80097bc <W25qxx_ReadSector+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	0018      	movs	r0, r3
 80097c0:	f7ff fda4 	bl	800930c <W25qxx_SectorToPage>
 80097c4:	0004      	movs	r4, r0
 80097c6:	4b1b      	ldr	r3, [pc, #108]	; (8009834 <W25qxx_ReadSector+0xc4>)
 80097c8:	895b      	ldrh	r3, [r3, #10]
 80097ca:	0019      	movs	r1, r3
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f7f6 fcbd 	bl	800014c <__udivsi3>
 80097d2:	0003      	movs	r3, r0
 80097d4:	18e3      	adds	r3, r4, r3
 80097d6:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 80097d8:	4b16      	ldr	r3, [pc, #88]	; (8009834 <W25qxx_ReadSector+0xc4>)
 80097da:	895b      	ldrh	r3, [r3, #10]
 80097dc:	001a      	movs	r2, r3
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	0011      	movs	r1, r2
 80097e2:	0018      	movs	r0, r3
 80097e4:	f7f6 fd38 	bl	8000258 <__aeabi_uidivmod>
 80097e8:	000b      	movs	r3, r1
 80097ea:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 80097ec:	69bb      	ldr	r3, [r7, #24]
 80097ee:	697a      	ldr	r2, [r7, #20]
 80097f0:	69f9      	ldr	r1, [r7, #28]
 80097f2:	68f8      	ldr	r0, [r7, #12]
 80097f4:	f7ff ff3e 	bl	8009674 <W25qxx_ReadPage>
		StartPage++;
 80097f8:	69fb      	ldr	r3, [r7, #28]
 80097fa:	3301      	adds	r3, #1
 80097fc:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 80097fe:	4b0d      	ldr	r3, [pc, #52]	; (8009834 <W25qxx_ReadSector+0xc4>)
 8009800:	895b      	ldrh	r3, [r3, #10]
 8009802:	001a      	movs	r2, r3
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	1a9a      	subs	r2, r3, r2
 8009808:	69bb      	ldr	r3, [r7, #24]
 800980a:	18d3      	adds	r3, r2, r3
 800980c:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 800980e:	4b09      	ldr	r3, [pc, #36]	; (8009834 <W25qxx_ReadSector+0xc4>)
 8009810:	895b      	ldrh	r3, [r3, #10]
 8009812:	001a      	movs	r2, r3
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	1ad3      	subs	r3, r2, r3
 8009818:	68fa      	ldr	r2, [r7, #12]
 800981a:	18d3      	adds	r3, r2, r3
 800981c:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 800981e:	2300      	movs	r3, #0
 8009820:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 8009822:	69bb      	ldr	r3, [r7, #24]
 8009824:	2b00      	cmp	r3, #0
 8009826:	dce1      	bgt.n	80097ec <W25qxx_ReadSector+0x7c>
 8009828:	e000      	b.n	800982c <W25qxx_ReadSector+0xbc>
		return;
 800982a:	46c0      	nop			; (mov r8, r8)
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
#endif

}
 800982c:	46bd      	mov	sp, r7
 800982e:	b009      	add	sp, #36	; 0x24
 8009830:	bd90      	pop	{r4, r7, pc}
 8009832:	46c0      	nop			; (mov r8, r8)
 8009834:	20000d24 	.word	0x20000d24

08009838 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8009838:	480d      	ldr	r0, [pc, #52]	; (8009870 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800983a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800983c:	f7ff fb1a 	bl	8008e74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009840:	480c      	ldr	r0, [pc, #48]	; (8009874 <LoopForever+0x6>)
  ldr r1, =_edata
 8009842:	490d      	ldr	r1, [pc, #52]	; (8009878 <LoopForever+0xa>)
  ldr r2, =_sidata
 8009844:	4a0d      	ldr	r2, [pc, #52]	; (800987c <LoopForever+0xe>)
  movs r3, #0
 8009846:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009848:	e002      	b.n	8009850 <LoopCopyDataInit>

0800984a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800984a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800984c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800984e:	3304      	adds	r3, #4

08009850 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009850:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009852:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009854:	d3f9      	bcc.n	800984a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009856:	4a0a      	ldr	r2, [pc, #40]	; (8009880 <LoopForever+0x12>)
  ldr r4, =_ebss
 8009858:	4c0a      	ldr	r4, [pc, #40]	; (8009884 <LoopForever+0x16>)
  movs r3, #0
 800985a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800985c:	e001      	b.n	8009862 <LoopFillZerobss>

0800985e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800985e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009860:	3204      	adds	r2, #4

08009862 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009862:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009864:	d3fb      	bcc.n	800985e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8009866:	f005 fa03 	bl	800ec70 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800986a:	f7f9 ffbd 	bl	80037e8 <main>

0800986e <LoopForever>:

LoopForever:
  b LoopForever
 800986e:	e7fe      	b.n	800986e <LoopForever>
  ldr   r0, =_estack
 8009870:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8009874:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009878:	200002b8 	.word	0x200002b8
  ldr r2, =_sidata
 800987c:	08013b58 	.word	0x08013b58
  ldr r2, =_sbss
 8009880:	200002b8 	.word	0x200002b8
  ldr r4, =_ebss
 8009884:	20000d60 	.word	0x20000d60

08009888 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009888:	e7fe      	b.n	8009888 <ADC1_IRQHandler>
	...

0800988c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b082      	sub	sp, #8
 8009890:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8009892:	1dfb      	adds	r3, r7, #7
 8009894:	2200      	movs	r2, #0
 8009896:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009898:	4b0b      	ldr	r3, [pc, #44]	; (80098c8 <HAL_Init+0x3c>)
 800989a:	681a      	ldr	r2, [r3, #0]
 800989c:	4b0a      	ldr	r3, [pc, #40]	; (80098c8 <HAL_Init+0x3c>)
 800989e:	2180      	movs	r1, #128	; 0x80
 80098a0:	0049      	lsls	r1, r1, #1
 80098a2:	430a      	orrs	r2, r1
 80098a4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80098a6:	2000      	movs	r0, #0
 80098a8:	f000 f810 	bl	80098cc <HAL_InitTick>
 80098ac:	1e03      	subs	r3, r0, #0
 80098ae:	d003      	beq.n	80098b8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80098b0:	1dfb      	adds	r3, r7, #7
 80098b2:	2201      	movs	r2, #1
 80098b4:	701a      	strb	r2, [r3, #0]
 80098b6:	e001      	b.n	80098bc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80098b8:	f7fe fef6 	bl	80086a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80098bc:	1dfb      	adds	r3, r7, #7
 80098be:	781b      	ldrb	r3, [r3, #0]
}
 80098c0:	0018      	movs	r0, r3
 80098c2:	46bd      	mov	sp, r7
 80098c4:	b002      	add	sp, #8
 80098c6:	bd80      	pop	{r7, pc}
 80098c8:	40022000 	.word	0x40022000

080098cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80098cc:	b590      	push	{r4, r7, lr}
 80098ce:	b085      	sub	sp, #20
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80098d4:	230f      	movs	r3, #15
 80098d6:	18fb      	adds	r3, r7, r3
 80098d8:	2200      	movs	r2, #0
 80098da:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80098dc:	4b1d      	ldr	r3, [pc, #116]	; (8009954 <HAL_InitTick+0x88>)
 80098de:	781b      	ldrb	r3, [r3, #0]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d02b      	beq.n	800993c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80098e4:	4b1c      	ldr	r3, [pc, #112]	; (8009958 <HAL_InitTick+0x8c>)
 80098e6:	681c      	ldr	r4, [r3, #0]
 80098e8:	4b1a      	ldr	r3, [pc, #104]	; (8009954 <HAL_InitTick+0x88>)
 80098ea:	781b      	ldrb	r3, [r3, #0]
 80098ec:	0019      	movs	r1, r3
 80098ee:	23fa      	movs	r3, #250	; 0xfa
 80098f0:	0098      	lsls	r0, r3, #2
 80098f2:	f7f6 fc2b 	bl	800014c <__udivsi3>
 80098f6:	0003      	movs	r3, r0
 80098f8:	0019      	movs	r1, r3
 80098fa:	0020      	movs	r0, r4
 80098fc:	f7f6 fc26 	bl	800014c <__udivsi3>
 8009900:	0003      	movs	r3, r0
 8009902:	0018      	movs	r0, r3
 8009904:	f000 f93d 	bl	8009b82 <HAL_SYSTICK_Config>
 8009908:	1e03      	subs	r3, r0, #0
 800990a:	d112      	bne.n	8009932 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2b03      	cmp	r3, #3
 8009910:	d80a      	bhi.n	8009928 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009912:	6879      	ldr	r1, [r7, #4]
 8009914:	2301      	movs	r3, #1
 8009916:	425b      	negs	r3, r3
 8009918:	2200      	movs	r2, #0
 800991a:	0018      	movs	r0, r3
 800991c:	f000 f90c 	bl	8009b38 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8009920:	4b0e      	ldr	r3, [pc, #56]	; (800995c <HAL_InitTick+0x90>)
 8009922:	687a      	ldr	r2, [r7, #4]
 8009924:	601a      	str	r2, [r3, #0]
 8009926:	e00d      	b.n	8009944 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8009928:	230f      	movs	r3, #15
 800992a:	18fb      	adds	r3, r7, r3
 800992c:	2201      	movs	r2, #1
 800992e:	701a      	strb	r2, [r3, #0]
 8009930:	e008      	b.n	8009944 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8009932:	230f      	movs	r3, #15
 8009934:	18fb      	adds	r3, r7, r3
 8009936:	2201      	movs	r2, #1
 8009938:	701a      	strb	r2, [r3, #0]
 800993a:	e003      	b.n	8009944 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800993c:	230f      	movs	r3, #15
 800993e:	18fb      	adds	r3, r7, r3
 8009940:	2201      	movs	r2, #1
 8009942:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8009944:	230f      	movs	r3, #15
 8009946:	18fb      	adds	r3, r7, r3
 8009948:	781b      	ldrb	r3, [r3, #0]
}
 800994a:	0018      	movs	r0, r3
 800994c:	46bd      	mov	sp, r7
 800994e:	b005      	add	sp, #20
 8009950:	bd90      	pop	{r4, r7, pc}
 8009952:	46c0      	nop			; (mov r8, r8)
 8009954:	200000e0 	.word	0x200000e0
 8009958:	200000d8 	.word	0x200000d8
 800995c:	200000dc 	.word	0x200000dc

08009960 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8009964:	4b05      	ldr	r3, [pc, #20]	; (800997c <HAL_IncTick+0x1c>)
 8009966:	781b      	ldrb	r3, [r3, #0]
 8009968:	001a      	movs	r2, r3
 800996a:	4b05      	ldr	r3, [pc, #20]	; (8009980 <HAL_IncTick+0x20>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	18d2      	adds	r2, r2, r3
 8009970:	4b03      	ldr	r3, [pc, #12]	; (8009980 <HAL_IncTick+0x20>)
 8009972:	601a      	str	r2, [r3, #0]
}
 8009974:	46c0      	nop			; (mov r8, r8)
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}
 800997a:	46c0      	nop			; (mov r8, r8)
 800997c:	200000e0 	.word	0x200000e0
 8009980:	20000d4c 	.word	0x20000d4c

08009984 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	af00      	add	r7, sp, #0
  return uwTick;
 8009988:	4b02      	ldr	r3, [pc, #8]	; (8009994 <HAL_GetTick+0x10>)
 800998a:	681b      	ldr	r3, [r3, #0]
}
 800998c:	0018      	movs	r0, r3
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}
 8009992:	46c0      	nop			; (mov r8, r8)
 8009994:	20000d4c 	.word	0x20000d4c

08009998 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b084      	sub	sp, #16
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80099a0:	f7ff fff0 	bl	8009984 <HAL_GetTick>
 80099a4:	0003      	movs	r3, r0
 80099a6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	3301      	adds	r3, #1
 80099b0:	d005      	beq.n	80099be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80099b2:	4b0a      	ldr	r3, [pc, #40]	; (80099dc <HAL_Delay+0x44>)
 80099b4:	781b      	ldrb	r3, [r3, #0]
 80099b6:	001a      	movs	r2, r3
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	189b      	adds	r3, r3, r2
 80099bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80099be:	46c0      	nop			; (mov r8, r8)
 80099c0:	f7ff ffe0 	bl	8009984 <HAL_GetTick>
 80099c4:	0002      	movs	r2, r0
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	1ad3      	subs	r3, r2, r3
 80099ca:	68fa      	ldr	r2, [r7, #12]
 80099cc:	429a      	cmp	r2, r3
 80099ce:	d8f7      	bhi.n	80099c0 <HAL_Delay+0x28>
  {
  }
}
 80099d0:	46c0      	nop			; (mov r8, r8)
 80099d2:	46c0      	nop			; (mov r8, r8)
 80099d4:	46bd      	mov	sp, r7
 80099d6:	b004      	add	sp, #16
 80099d8:	bd80      	pop	{r7, pc}
 80099da:	46c0      	nop			; (mov r8, r8)
 80099dc:	200000e0 	.word	0x200000e0

080099e0 <__NVIC_EnableIRQ>:
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b082      	sub	sp, #8
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	0002      	movs	r2, r0
 80099e8:	1dfb      	adds	r3, r7, #7
 80099ea:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80099ec:	1dfb      	adds	r3, r7, #7
 80099ee:	781b      	ldrb	r3, [r3, #0]
 80099f0:	2b7f      	cmp	r3, #127	; 0x7f
 80099f2:	d809      	bhi.n	8009a08 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80099f4:	1dfb      	adds	r3, r7, #7
 80099f6:	781b      	ldrb	r3, [r3, #0]
 80099f8:	001a      	movs	r2, r3
 80099fa:	231f      	movs	r3, #31
 80099fc:	401a      	ands	r2, r3
 80099fe:	4b04      	ldr	r3, [pc, #16]	; (8009a10 <__NVIC_EnableIRQ+0x30>)
 8009a00:	2101      	movs	r1, #1
 8009a02:	4091      	lsls	r1, r2
 8009a04:	000a      	movs	r2, r1
 8009a06:	601a      	str	r2, [r3, #0]
}
 8009a08:	46c0      	nop			; (mov r8, r8)
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	b002      	add	sp, #8
 8009a0e:	bd80      	pop	{r7, pc}
 8009a10:	e000e100 	.word	0xe000e100

08009a14 <__NVIC_SetPriority>:
{
 8009a14:	b590      	push	{r4, r7, lr}
 8009a16:	b083      	sub	sp, #12
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	0002      	movs	r2, r0
 8009a1c:	6039      	str	r1, [r7, #0]
 8009a1e:	1dfb      	adds	r3, r7, #7
 8009a20:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8009a22:	1dfb      	adds	r3, r7, #7
 8009a24:	781b      	ldrb	r3, [r3, #0]
 8009a26:	2b7f      	cmp	r3, #127	; 0x7f
 8009a28:	d828      	bhi.n	8009a7c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009a2a:	4a2f      	ldr	r2, [pc, #188]	; (8009ae8 <__NVIC_SetPriority+0xd4>)
 8009a2c:	1dfb      	adds	r3, r7, #7
 8009a2e:	781b      	ldrb	r3, [r3, #0]
 8009a30:	b25b      	sxtb	r3, r3
 8009a32:	089b      	lsrs	r3, r3, #2
 8009a34:	33c0      	adds	r3, #192	; 0xc0
 8009a36:	009b      	lsls	r3, r3, #2
 8009a38:	589b      	ldr	r3, [r3, r2]
 8009a3a:	1dfa      	adds	r2, r7, #7
 8009a3c:	7812      	ldrb	r2, [r2, #0]
 8009a3e:	0011      	movs	r1, r2
 8009a40:	2203      	movs	r2, #3
 8009a42:	400a      	ands	r2, r1
 8009a44:	00d2      	lsls	r2, r2, #3
 8009a46:	21ff      	movs	r1, #255	; 0xff
 8009a48:	4091      	lsls	r1, r2
 8009a4a:	000a      	movs	r2, r1
 8009a4c:	43d2      	mvns	r2, r2
 8009a4e:	401a      	ands	r2, r3
 8009a50:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	019b      	lsls	r3, r3, #6
 8009a56:	22ff      	movs	r2, #255	; 0xff
 8009a58:	401a      	ands	r2, r3
 8009a5a:	1dfb      	adds	r3, r7, #7
 8009a5c:	781b      	ldrb	r3, [r3, #0]
 8009a5e:	0018      	movs	r0, r3
 8009a60:	2303      	movs	r3, #3
 8009a62:	4003      	ands	r3, r0
 8009a64:	00db      	lsls	r3, r3, #3
 8009a66:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009a68:	481f      	ldr	r0, [pc, #124]	; (8009ae8 <__NVIC_SetPriority+0xd4>)
 8009a6a:	1dfb      	adds	r3, r7, #7
 8009a6c:	781b      	ldrb	r3, [r3, #0]
 8009a6e:	b25b      	sxtb	r3, r3
 8009a70:	089b      	lsrs	r3, r3, #2
 8009a72:	430a      	orrs	r2, r1
 8009a74:	33c0      	adds	r3, #192	; 0xc0
 8009a76:	009b      	lsls	r3, r3, #2
 8009a78:	501a      	str	r2, [r3, r0]
}
 8009a7a:	e031      	b.n	8009ae0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009a7c:	4a1b      	ldr	r2, [pc, #108]	; (8009aec <__NVIC_SetPriority+0xd8>)
 8009a7e:	1dfb      	adds	r3, r7, #7
 8009a80:	781b      	ldrb	r3, [r3, #0]
 8009a82:	0019      	movs	r1, r3
 8009a84:	230f      	movs	r3, #15
 8009a86:	400b      	ands	r3, r1
 8009a88:	3b08      	subs	r3, #8
 8009a8a:	089b      	lsrs	r3, r3, #2
 8009a8c:	3306      	adds	r3, #6
 8009a8e:	009b      	lsls	r3, r3, #2
 8009a90:	18d3      	adds	r3, r2, r3
 8009a92:	3304      	adds	r3, #4
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	1dfa      	adds	r2, r7, #7
 8009a98:	7812      	ldrb	r2, [r2, #0]
 8009a9a:	0011      	movs	r1, r2
 8009a9c:	2203      	movs	r2, #3
 8009a9e:	400a      	ands	r2, r1
 8009aa0:	00d2      	lsls	r2, r2, #3
 8009aa2:	21ff      	movs	r1, #255	; 0xff
 8009aa4:	4091      	lsls	r1, r2
 8009aa6:	000a      	movs	r2, r1
 8009aa8:	43d2      	mvns	r2, r2
 8009aaa:	401a      	ands	r2, r3
 8009aac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	019b      	lsls	r3, r3, #6
 8009ab2:	22ff      	movs	r2, #255	; 0xff
 8009ab4:	401a      	ands	r2, r3
 8009ab6:	1dfb      	adds	r3, r7, #7
 8009ab8:	781b      	ldrb	r3, [r3, #0]
 8009aba:	0018      	movs	r0, r3
 8009abc:	2303      	movs	r3, #3
 8009abe:	4003      	ands	r3, r0
 8009ac0:	00db      	lsls	r3, r3, #3
 8009ac2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009ac4:	4809      	ldr	r0, [pc, #36]	; (8009aec <__NVIC_SetPriority+0xd8>)
 8009ac6:	1dfb      	adds	r3, r7, #7
 8009ac8:	781b      	ldrb	r3, [r3, #0]
 8009aca:	001c      	movs	r4, r3
 8009acc:	230f      	movs	r3, #15
 8009ace:	4023      	ands	r3, r4
 8009ad0:	3b08      	subs	r3, #8
 8009ad2:	089b      	lsrs	r3, r3, #2
 8009ad4:	430a      	orrs	r2, r1
 8009ad6:	3306      	adds	r3, #6
 8009ad8:	009b      	lsls	r3, r3, #2
 8009ada:	18c3      	adds	r3, r0, r3
 8009adc:	3304      	adds	r3, #4
 8009ade:	601a      	str	r2, [r3, #0]
}
 8009ae0:	46c0      	nop			; (mov r8, r8)
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	b003      	add	sp, #12
 8009ae6:	bd90      	pop	{r4, r7, pc}
 8009ae8:	e000e100 	.word	0xe000e100
 8009aec:	e000ed00 	.word	0xe000ed00

08009af0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b082      	sub	sp, #8
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	1e5a      	subs	r2, r3, #1
 8009afc:	2380      	movs	r3, #128	; 0x80
 8009afe:	045b      	lsls	r3, r3, #17
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d301      	bcc.n	8009b08 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009b04:	2301      	movs	r3, #1
 8009b06:	e010      	b.n	8009b2a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009b08:	4b0a      	ldr	r3, [pc, #40]	; (8009b34 <SysTick_Config+0x44>)
 8009b0a:	687a      	ldr	r2, [r7, #4]
 8009b0c:	3a01      	subs	r2, #1
 8009b0e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009b10:	2301      	movs	r3, #1
 8009b12:	425b      	negs	r3, r3
 8009b14:	2103      	movs	r1, #3
 8009b16:	0018      	movs	r0, r3
 8009b18:	f7ff ff7c 	bl	8009a14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009b1c:	4b05      	ldr	r3, [pc, #20]	; (8009b34 <SysTick_Config+0x44>)
 8009b1e:	2200      	movs	r2, #0
 8009b20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009b22:	4b04      	ldr	r3, [pc, #16]	; (8009b34 <SysTick_Config+0x44>)
 8009b24:	2207      	movs	r2, #7
 8009b26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009b28:	2300      	movs	r3, #0
}
 8009b2a:	0018      	movs	r0, r3
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	b002      	add	sp, #8
 8009b30:	bd80      	pop	{r7, pc}
 8009b32:	46c0      	nop			; (mov r8, r8)
 8009b34:	e000e010 	.word	0xe000e010

08009b38 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b084      	sub	sp, #16
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	60b9      	str	r1, [r7, #8]
 8009b40:	607a      	str	r2, [r7, #4]
 8009b42:	210f      	movs	r1, #15
 8009b44:	187b      	adds	r3, r7, r1
 8009b46:	1c02      	adds	r2, r0, #0
 8009b48:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8009b4a:	68ba      	ldr	r2, [r7, #8]
 8009b4c:	187b      	adds	r3, r7, r1
 8009b4e:	781b      	ldrb	r3, [r3, #0]
 8009b50:	b25b      	sxtb	r3, r3
 8009b52:	0011      	movs	r1, r2
 8009b54:	0018      	movs	r0, r3
 8009b56:	f7ff ff5d 	bl	8009a14 <__NVIC_SetPriority>
}
 8009b5a:	46c0      	nop			; (mov r8, r8)
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	b004      	add	sp, #16
 8009b60:	bd80      	pop	{r7, pc}

08009b62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009b62:	b580      	push	{r7, lr}
 8009b64:	b082      	sub	sp, #8
 8009b66:	af00      	add	r7, sp, #0
 8009b68:	0002      	movs	r2, r0
 8009b6a:	1dfb      	adds	r3, r7, #7
 8009b6c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009b6e:	1dfb      	adds	r3, r7, #7
 8009b70:	781b      	ldrb	r3, [r3, #0]
 8009b72:	b25b      	sxtb	r3, r3
 8009b74:	0018      	movs	r0, r3
 8009b76:	f7ff ff33 	bl	80099e0 <__NVIC_EnableIRQ>
}
 8009b7a:	46c0      	nop			; (mov r8, r8)
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	b002      	add	sp, #8
 8009b80:	bd80      	pop	{r7, pc}

08009b82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009b82:	b580      	push	{r7, lr}
 8009b84:	b082      	sub	sp, #8
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	0018      	movs	r0, r3
 8009b8e:	f7ff ffaf 	bl	8009af0 <SysTick_Config>
 8009b92:	0003      	movs	r3, r0
}
 8009b94:	0018      	movs	r0, r3
 8009b96:	46bd      	mov	sp, r7
 8009b98:	b002      	add	sp, #8
 8009b9a:	bd80      	pop	{r7, pc}

08009b9c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b082      	sub	sp, #8
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d101      	bne.n	8009bae <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8009baa:	2301      	movs	r3, #1
 8009bac:	e050      	b.n	8009c50 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2225      	movs	r2, #37	; 0x25
 8009bb2:	5c9b      	ldrb	r3, [r3, r2]
 8009bb4:	b2db      	uxtb	r3, r3
 8009bb6:	2b02      	cmp	r3, #2
 8009bb8:	d008      	beq.n	8009bcc <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2204      	movs	r2, #4
 8009bbe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2224      	movs	r2, #36	; 0x24
 8009bc4:	2100      	movs	r1, #0
 8009bc6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8009bc8:	2301      	movs	r3, #1
 8009bca:	e041      	b.n	8009c50 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	681a      	ldr	r2, [r3, #0]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	210e      	movs	r1, #14
 8009bd8:	438a      	bics	r2, r1
 8009bda:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009be0:	681a      	ldr	r2, [r3, #0]
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009be6:	491c      	ldr	r1, [pc, #112]	; (8009c58 <HAL_DMA_Abort+0xbc>)
 8009be8:	400a      	ands	r2, r1
 8009bea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	681a      	ldr	r2, [r3, #0]
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	2101      	movs	r1, #1
 8009bf8:	438a      	bics	r2, r1
 8009bfa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8009bfc:	4b17      	ldr	r3, [pc, #92]	; (8009c5c <HAL_DMA_Abort+0xc0>)
 8009bfe:	6859      	ldr	r1, [r3, #4]
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c04:	221c      	movs	r2, #28
 8009c06:	4013      	ands	r3, r2
 8009c08:	2201      	movs	r2, #1
 8009c0a:	409a      	lsls	r2, r3
 8009c0c:	4b13      	ldr	r3, [pc, #76]	; (8009c5c <HAL_DMA_Abort+0xc0>)
 8009c0e:	430a      	orrs	r2, r1
 8009c10:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c16:	687a      	ldr	r2, [r7, #4]
 8009c18:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8009c1a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d00c      	beq.n	8009c3e <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c28:	681a      	ldr	r2, [r3, #0]
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c2e:	490a      	ldr	r1, [pc, #40]	; (8009c58 <HAL_DMA_Abort+0xbc>)
 8009c30:	400a      	ands	r2, r1
 8009c32:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c38:	687a      	ldr	r2, [r7, #4]
 8009c3a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009c3c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2225      	movs	r2, #37	; 0x25
 8009c42:	2101      	movs	r1, #1
 8009c44:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2224      	movs	r2, #36	; 0x24
 8009c4a:	2100      	movs	r1, #0
 8009c4c:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8009c4e:	2300      	movs	r3, #0
}
 8009c50:	0018      	movs	r0, r3
 8009c52:	46bd      	mov	sp, r7
 8009c54:	b002      	add	sp, #8
 8009c56:	bd80      	pop	{r7, pc}
 8009c58:	fffffeff 	.word	0xfffffeff
 8009c5c:	40020000 	.word	0x40020000

08009c60 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b084      	sub	sp, #16
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c68:	210f      	movs	r1, #15
 8009c6a:	187b      	adds	r3, r7, r1
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2225      	movs	r2, #37	; 0x25
 8009c74:	5c9b      	ldrb	r3, [r3, r2]
 8009c76:	b2db      	uxtb	r3, r3
 8009c78:	2b02      	cmp	r3, #2
 8009c7a:	d006      	beq.n	8009c8a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2204      	movs	r2, #4
 8009c80:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8009c82:	187b      	adds	r3, r7, r1
 8009c84:	2201      	movs	r2, #1
 8009c86:	701a      	strb	r2, [r3, #0]
 8009c88:	e049      	b.n	8009d1e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	681a      	ldr	r2, [r3, #0]
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	210e      	movs	r1, #14
 8009c96:	438a      	bics	r2, r1
 8009c98:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	681a      	ldr	r2, [r3, #0]
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	2101      	movs	r1, #1
 8009ca6:	438a      	bics	r2, r1
 8009ca8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cae:	681a      	ldr	r2, [r3, #0]
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cb4:	491d      	ldr	r1, [pc, #116]	; (8009d2c <HAL_DMA_Abort_IT+0xcc>)
 8009cb6:	400a      	ands	r2, r1
 8009cb8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8009cba:	4b1d      	ldr	r3, [pc, #116]	; (8009d30 <HAL_DMA_Abort_IT+0xd0>)
 8009cbc:	6859      	ldr	r1, [r3, #4]
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cc2:	221c      	movs	r2, #28
 8009cc4:	4013      	ands	r3, r2
 8009cc6:	2201      	movs	r2, #1
 8009cc8:	409a      	lsls	r2, r3
 8009cca:	4b19      	ldr	r3, [pc, #100]	; (8009d30 <HAL_DMA_Abort_IT+0xd0>)
 8009ccc:	430a      	orrs	r2, r1
 8009cce:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009cd4:	687a      	ldr	r2, [r7, #4]
 8009cd6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8009cd8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d00c      	beq.n	8009cfc <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ce6:	681a      	ldr	r2, [r3, #0]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cec:	490f      	ldr	r1, [pc, #60]	; (8009d2c <HAL_DMA_Abort_IT+0xcc>)
 8009cee:	400a      	ands	r2, r1
 8009cf0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cf6:	687a      	ldr	r2, [r7, #4]
 8009cf8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009cfa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2225      	movs	r2, #37	; 0x25
 8009d00:	2101      	movs	r1, #1
 8009d02:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2224      	movs	r2, #36	; 0x24
 8009d08:	2100      	movs	r1, #0
 8009d0a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d004      	beq.n	8009d1e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d18:	687a      	ldr	r2, [r7, #4]
 8009d1a:	0010      	movs	r0, r2
 8009d1c:	4798      	blx	r3
    }
  }
  return status;
 8009d1e:	230f      	movs	r3, #15
 8009d20:	18fb      	adds	r3, r7, r3
 8009d22:	781b      	ldrb	r3, [r3, #0]
}
 8009d24:	0018      	movs	r0, r3
 8009d26:	46bd      	mov	sp, r7
 8009d28:	b004      	add	sp, #16
 8009d2a:	bd80      	pop	{r7, pc}
 8009d2c:	fffffeff 	.word	0xfffffeff
 8009d30:	40020000 	.word	0x40020000

08009d34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b086      	sub	sp, #24
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009d42:	e147      	b.n	8009fd4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	2101      	movs	r1, #1
 8009d4a:	697a      	ldr	r2, [r7, #20]
 8009d4c:	4091      	lsls	r1, r2
 8009d4e:	000a      	movs	r2, r1
 8009d50:	4013      	ands	r3, r2
 8009d52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d100      	bne.n	8009d5c <HAL_GPIO_Init+0x28>
 8009d5a:	e138      	b.n	8009fce <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	685b      	ldr	r3, [r3, #4]
 8009d60:	2203      	movs	r2, #3
 8009d62:	4013      	ands	r3, r2
 8009d64:	2b01      	cmp	r3, #1
 8009d66:	d005      	beq.n	8009d74 <HAL_GPIO_Init+0x40>
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	685b      	ldr	r3, [r3, #4]
 8009d6c:	2203      	movs	r2, #3
 8009d6e:	4013      	ands	r3, r2
 8009d70:	2b02      	cmp	r3, #2
 8009d72:	d130      	bne.n	8009dd6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	689b      	ldr	r3, [r3, #8]
 8009d78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	005b      	lsls	r3, r3, #1
 8009d7e:	2203      	movs	r2, #3
 8009d80:	409a      	lsls	r2, r3
 8009d82:	0013      	movs	r3, r2
 8009d84:	43da      	mvns	r2, r3
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	4013      	ands	r3, r2
 8009d8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	68da      	ldr	r2, [r3, #12]
 8009d90:	697b      	ldr	r3, [r7, #20]
 8009d92:	005b      	lsls	r3, r3, #1
 8009d94:	409a      	lsls	r2, r3
 8009d96:	0013      	movs	r3, r2
 8009d98:	693a      	ldr	r2, [r7, #16]
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	693a      	ldr	r2, [r7, #16]
 8009da2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	685b      	ldr	r3, [r3, #4]
 8009da8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009daa:	2201      	movs	r2, #1
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	409a      	lsls	r2, r3
 8009db0:	0013      	movs	r3, r2
 8009db2:	43da      	mvns	r2, r3
 8009db4:	693b      	ldr	r3, [r7, #16]
 8009db6:	4013      	ands	r3, r2
 8009db8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	685b      	ldr	r3, [r3, #4]
 8009dbe:	091b      	lsrs	r3, r3, #4
 8009dc0:	2201      	movs	r2, #1
 8009dc2:	401a      	ands	r2, r3
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	409a      	lsls	r2, r3
 8009dc8:	0013      	movs	r3, r2
 8009dca:	693a      	ldr	r2, [r7, #16]
 8009dcc:	4313      	orrs	r3, r2
 8009dce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	693a      	ldr	r2, [r7, #16]
 8009dd4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	685b      	ldr	r3, [r3, #4]
 8009dda:	2203      	movs	r2, #3
 8009ddc:	4013      	ands	r3, r2
 8009dde:	2b03      	cmp	r3, #3
 8009de0:	d017      	beq.n	8009e12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	68db      	ldr	r3, [r3, #12]
 8009de6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8009de8:	697b      	ldr	r3, [r7, #20]
 8009dea:	005b      	lsls	r3, r3, #1
 8009dec:	2203      	movs	r2, #3
 8009dee:	409a      	lsls	r2, r3
 8009df0:	0013      	movs	r3, r2
 8009df2:	43da      	mvns	r2, r3
 8009df4:	693b      	ldr	r3, [r7, #16]
 8009df6:	4013      	ands	r3, r2
 8009df8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	689a      	ldr	r2, [r3, #8]
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	005b      	lsls	r3, r3, #1
 8009e02:	409a      	lsls	r2, r3
 8009e04:	0013      	movs	r3, r2
 8009e06:	693a      	ldr	r2, [r7, #16]
 8009e08:	4313      	orrs	r3, r2
 8009e0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	693a      	ldr	r2, [r7, #16]
 8009e10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	685b      	ldr	r3, [r3, #4]
 8009e16:	2203      	movs	r2, #3
 8009e18:	4013      	ands	r3, r2
 8009e1a:	2b02      	cmp	r3, #2
 8009e1c:	d123      	bne.n	8009e66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	08da      	lsrs	r2, r3, #3
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	3208      	adds	r2, #8
 8009e26:	0092      	lsls	r2, r2, #2
 8009e28:	58d3      	ldr	r3, [r2, r3]
 8009e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	2207      	movs	r2, #7
 8009e30:	4013      	ands	r3, r2
 8009e32:	009b      	lsls	r3, r3, #2
 8009e34:	220f      	movs	r2, #15
 8009e36:	409a      	lsls	r2, r3
 8009e38:	0013      	movs	r3, r2
 8009e3a:	43da      	mvns	r2, r3
 8009e3c:	693b      	ldr	r3, [r7, #16]
 8009e3e:	4013      	ands	r3, r2
 8009e40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	691a      	ldr	r2, [r3, #16]
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	2107      	movs	r1, #7
 8009e4a:	400b      	ands	r3, r1
 8009e4c:	009b      	lsls	r3, r3, #2
 8009e4e:	409a      	lsls	r2, r3
 8009e50:	0013      	movs	r3, r2
 8009e52:	693a      	ldr	r2, [r7, #16]
 8009e54:	4313      	orrs	r3, r2
 8009e56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	08da      	lsrs	r2, r3, #3
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	3208      	adds	r2, #8
 8009e60:	0092      	lsls	r2, r2, #2
 8009e62:	6939      	ldr	r1, [r7, #16]
 8009e64:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	005b      	lsls	r3, r3, #1
 8009e70:	2203      	movs	r2, #3
 8009e72:	409a      	lsls	r2, r3
 8009e74:	0013      	movs	r3, r2
 8009e76:	43da      	mvns	r2, r3
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	4013      	ands	r3, r2
 8009e7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	685b      	ldr	r3, [r3, #4]
 8009e82:	2203      	movs	r2, #3
 8009e84:	401a      	ands	r2, r3
 8009e86:	697b      	ldr	r3, [r7, #20]
 8009e88:	005b      	lsls	r3, r3, #1
 8009e8a:	409a      	lsls	r2, r3
 8009e8c:	0013      	movs	r3, r2
 8009e8e:	693a      	ldr	r2, [r7, #16]
 8009e90:	4313      	orrs	r3, r2
 8009e92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	693a      	ldr	r2, [r7, #16]
 8009e98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	685a      	ldr	r2, [r3, #4]
 8009e9e:	23c0      	movs	r3, #192	; 0xc0
 8009ea0:	029b      	lsls	r3, r3, #10
 8009ea2:	4013      	ands	r3, r2
 8009ea4:	d100      	bne.n	8009ea8 <HAL_GPIO_Init+0x174>
 8009ea6:	e092      	b.n	8009fce <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8009ea8:	4a50      	ldr	r2, [pc, #320]	; (8009fec <HAL_GPIO_Init+0x2b8>)
 8009eaa:	697b      	ldr	r3, [r7, #20]
 8009eac:	089b      	lsrs	r3, r3, #2
 8009eae:	3318      	adds	r3, #24
 8009eb0:	009b      	lsls	r3, r3, #2
 8009eb2:	589b      	ldr	r3, [r3, r2]
 8009eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	2203      	movs	r2, #3
 8009eba:	4013      	ands	r3, r2
 8009ebc:	00db      	lsls	r3, r3, #3
 8009ebe:	220f      	movs	r2, #15
 8009ec0:	409a      	lsls	r2, r3
 8009ec2:	0013      	movs	r3, r2
 8009ec4:	43da      	mvns	r2, r3
 8009ec6:	693b      	ldr	r3, [r7, #16]
 8009ec8:	4013      	ands	r3, r2
 8009eca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8009ecc:	687a      	ldr	r2, [r7, #4]
 8009ece:	23a0      	movs	r3, #160	; 0xa0
 8009ed0:	05db      	lsls	r3, r3, #23
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d013      	beq.n	8009efe <HAL_GPIO_Init+0x1ca>
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	4a45      	ldr	r2, [pc, #276]	; (8009ff0 <HAL_GPIO_Init+0x2bc>)
 8009eda:	4293      	cmp	r3, r2
 8009edc:	d00d      	beq.n	8009efa <HAL_GPIO_Init+0x1c6>
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	4a44      	ldr	r2, [pc, #272]	; (8009ff4 <HAL_GPIO_Init+0x2c0>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d007      	beq.n	8009ef6 <HAL_GPIO_Init+0x1c2>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	4a43      	ldr	r2, [pc, #268]	; (8009ff8 <HAL_GPIO_Init+0x2c4>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d101      	bne.n	8009ef2 <HAL_GPIO_Init+0x1be>
 8009eee:	2303      	movs	r3, #3
 8009ef0:	e006      	b.n	8009f00 <HAL_GPIO_Init+0x1cc>
 8009ef2:	2305      	movs	r3, #5
 8009ef4:	e004      	b.n	8009f00 <HAL_GPIO_Init+0x1cc>
 8009ef6:	2302      	movs	r3, #2
 8009ef8:	e002      	b.n	8009f00 <HAL_GPIO_Init+0x1cc>
 8009efa:	2301      	movs	r3, #1
 8009efc:	e000      	b.n	8009f00 <HAL_GPIO_Init+0x1cc>
 8009efe:	2300      	movs	r3, #0
 8009f00:	697a      	ldr	r2, [r7, #20]
 8009f02:	2103      	movs	r1, #3
 8009f04:	400a      	ands	r2, r1
 8009f06:	00d2      	lsls	r2, r2, #3
 8009f08:	4093      	lsls	r3, r2
 8009f0a:	693a      	ldr	r2, [r7, #16]
 8009f0c:	4313      	orrs	r3, r2
 8009f0e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8009f10:	4936      	ldr	r1, [pc, #216]	; (8009fec <HAL_GPIO_Init+0x2b8>)
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	089b      	lsrs	r3, r3, #2
 8009f16:	3318      	adds	r3, #24
 8009f18:	009b      	lsls	r3, r3, #2
 8009f1a:	693a      	ldr	r2, [r7, #16]
 8009f1c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009f1e:	4b33      	ldr	r3, [pc, #204]	; (8009fec <HAL_GPIO_Init+0x2b8>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	43da      	mvns	r2, r3
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	4013      	ands	r3, r2
 8009f2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	685a      	ldr	r2, [r3, #4]
 8009f32:	2380      	movs	r3, #128	; 0x80
 8009f34:	035b      	lsls	r3, r3, #13
 8009f36:	4013      	ands	r3, r2
 8009f38:	d003      	beq.n	8009f42 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8009f3a:	693a      	ldr	r2, [r7, #16]
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009f42:	4b2a      	ldr	r3, [pc, #168]	; (8009fec <HAL_GPIO_Init+0x2b8>)
 8009f44:	693a      	ldr	r2, [r7, #16]
 8009f46:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8009f48:	4b28      	ldr	r3, [pc, #160]	; (8009fec <HAL_GPIO_Init+0x2b8>)
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	43da      	mvns	r2, r3
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	4013      	ands	r3, r2
 8009f56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	685a      	ldr	r2, [r3, #4]
 8009f5c:	2380      	movs	r3, #128	; 0x80
 8009f5e:	039b      	lsls	r3, r3, #14
 8009f60:	4013      	ands	r3, r2
 8009f62:	d003      	beq.n	8009f6c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8009f64:	693a      	ldr	r2, [r7, #16]
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	4313      	orrs	r3, r2
 8009f6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8009f6c:	4b1f      	ldr	r3, [pc, #124]	; (8009fec <HAL_GPIO_Init+0x2b8>)
 8009f6e:	693a      	ldr	r2, [r7, #16]
 8009f70:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8009f72:	4a1e      	ldr	r2, [pc, #120]	; (8009fec <HAL_GPIO_Init+0x2b8>)
 8009f74:	2384      	movs	r3, #132	; 0x84
 8009f76:	58d3      	ldr	r3, [r2, r3]
 8009f78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	43da      	mvns	r2, r3
 8009f7e:	693b      	ldr	r3, [r7, #16]
 8009f80:	4013      	ands	r3, r2
 8009f82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	685a      	ldr	r2, [r3, #4]
 8009f88:	2380      	movs	r3, #128	; 0x80
 8009f8a:	029b      	lsls	r3, r3, #10
 8009f8c:	4013      	ands	r3, r2
 8009f8e:	d003      	beq.n	8009f98 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8009f90:	693a      	ldr	r2, [r7, #16]
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	4313      	orrs	r3, r2
 8009f96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8009f98:	4914      	ldr	r1, [pc, #80]	; (8009fec <HAL_GPIO_Init+0x2b8>)
 8009f9a:	2284      	movs	r2, #132	; 0x84
 8009f9c:	693b      	ldr	r3, [r7, #16]
 8009f9e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8009fa0:	4a12      	ldr	r2, [pc, #72]	; (8009fec <HAL_GPIO_Init+0x2b8>)
 8009fa2:	2380      	movs	r3, #128	; 0x80
 8009fa4:	58d3      	ldr	r3, [r2, r3]
 8009fa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	43da      	mvns	r2, r3
 8009fac:	693b      	ldr	r3, [r7, #16]
 8009fae:	4013      	ands	r3, r2
 8009fb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	685a      	ldr	r2, [r3, #4]
 8009fb6:	2380      	movs	r3, #128	; 0x80
 8009fb8:	025b      	lsls	r3, r3, #9
 8009fba:	4013      	ands	r3, r2
 8009fbc:	d003      	beq.n	8009fc6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8009fbe:	693a      	ldr	r2, [r7, #16]
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	4313      	orrs	r3, r2
 8009fc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8009fc6:	4909      	ldr	r1, [pc, #36]	; (8009fec <HAL_GPIO_Init+0x2b8>)
 8009fc8:	2280      	movs	r2, #128	; 0x80
 8009fca:	693b      	ldr	r3, [r7, #16]
 8009fcc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	3301      	adds	r3, #1
 8009fd2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	681a      	ldr	r2, [r3, #0]
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	40da      	lsrs	r2, r3
 8009fdc:	1e13      	subs	r3, r2, #0
 8009fde:	d000      	beq.n	8009fe2 <HAL_GPIO_Init+0x2ae>
 8009fe0:	e6b0      	b.n	8009d44 <HAL_GPIO_Init+0x10>
  }
}
 8009fe2:	46c0      	nop			; (mov r8, r8)
 8009fe4:	46c0      	nop			; (mov r8, r8)
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	b006      	add	sp, #24
 8009fea:	bd80      	pop	{r7, pc}
 8009fec:	40021800 	.word	0x40021800
 8009ff0:	50000400 	.word	0x50000400
 8009ff4:	50000800 	.word	0x50000800
 8009ff8:	50000c00 	.word	0x50000c00

08009ffc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b084      	sub	sp, #16
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	000a      	movs	r2, r1
 800a006:	1cbb      	adds	r3, r7, #2
 800a008:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	691b      	ldr	r3, [r3, #16]
 800a00e:	1cba      	adds	r2, r7, #2
 800a010:	8812      	ldrh	r2, [r2, #0]
 800a012:	4013      	ands	r3, r2
 800a014:	d004      	beq.n	800a020 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800a016:	230f      	movs	r3, #15
 800a018:	18fb      	adds	r3, r7, r3
 800a01a:	2201      	movs	r2, #1
 800a01c:	701a      	strb	r2, [r3, #0]
 800a01e:	e003      	b.n	800a028 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a020:	230f      	movs	r3, #15
 800a022:	18fb      	adds	r3, r7, r3
 800a024:	2200      	movs	r2, #0
 800a026:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800a028:	230f      	movs	r3, #15
 800a02a:	18fb      	adds	r3, r7, r3
 800a02c:	781b      	ldrb	r3, [r3, #0]
}
 800a02e:	0018      	movs	r0, r3
 800a030:	46bd      	mov	sp, r7
 800a032:	b004      	add	sp, #16
 800a034:	bd80      	pop	{r7, pc}

0800a036 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a036:	b580      	push	{r7, lr}
 800a038:	b082      	sub	sp, #8
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	6078      	str	r0, [r7, #4]
 800a03e:	0008      	movs	r0, r1
 800a040:	0011      	movs	r1, r2
 800a042:	1cbb      	adds	r3, r7, #2
 800a044:	1c02      	adds	r2, r0, #0
 800a046:	801a      	strh	r2, [r3, #0]
 800a048:	1c7b      	adds	r3, r7, #1
 800a04a:	1c0a      	adds	r2, r1, #0
 800a04c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a04e:	1c7b      	adds	r3, r7, #1
 800a050:	781b      	ldrb	r3, [r3, #0]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d004      	beq.n	800a060 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a056:	1cbb      	adds	r3, r7, #2
 800a058:	881a      	ldrh	r2, [r3, #0]
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a05e:	e003      	b.n	800a068 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a060:	1cbb      	adds	r3, r7, #2
 800a062:	881a      	ldrh	r2, [r3, #0]
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a068:	46c0      	nop			; (mov r8, r8)
 800a06a:	46bd      	mov	sp, r7
 800a06c:	b002      	add	sp, #8
 800a06e:	bd80      	pop	{r7, pc}

0800a070 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b084      	sub	sp, #16
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	000a      	movs	r2, r1
 800a07a:	1cbb      	adds	r3, r7, #2
 800a07c:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	695b      	ldr	r3, [r3, #20]
 800a082:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a084:	1cbb      	adds	r3, r7, #2
 800a086:	881b      	ldrh	r3, [r3, #0]
 800a088:	68fa      	ldr	r2, [r7, #12]
 800a08a:	4013      	ands	r3, r2
 800a08c:	041a      	lsls	r2, r3, #16
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	43db      	mvns	r3, r3
 800a092:	1cb9      	adds	r1, r7, #2
 800a094:	8809      	ldrh	r1, [r1, #0]
 800a096:	400b      	ands	r3, r1
 800a098:	431a      	orrs	r2, r3
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	619a      	str	r2, [r3, #24]
}
 800a09e:	46c0      	nop			; (mov r8, r8)
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	b004      	add	sp, #16
 800a0a4:	bd80      	pop	{r7, pc}
	...

0800a0a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b084      	sub	sp, #16
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800a0b0:	4b19      	ldr	r3, [pc, #100]	; (800a118 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	4a19      	ldr	r2, [pc, #100]	; (800a11c <HAL_PWREx_ControlVoltageScaling+0x74>)
 800a0b6:	4013      	ands	r3, r2
 800a0b8:	0019      	movs	r1, r3
 800a0ba:	4b17      	ldr	r3, [pc, #92]	; (800a118 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800a0bc:	687a      	ldr	r2, [r7, #4]
 800a0be:	430a      	orrs	r2, r1
 800a0c0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a0c2:	687a      	ldr	r2, [r7, #4]
 800a0c4:	2380      	movs	r3, #128	; 0x80
 800a0c6:	009b      	lsls	r3, r3, #2
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	d11f      	bne.n	800a10c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800a0cc:	4b14      	ldr	r3, [pc, #80]	; (800a120 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800a0ce:	681a      	ldr	r2, [r3, #0]
 800a0d0:	0013      	movs	r3, r2
 800a0d2:	005b      	lsls	r3, r3, #1
 800a0d4:	189b      	adds	r3, r3, r2
 800a0d6:	005b      	lsls	r3, r3, #1
 800a0d8:	4912      	ldr	r1, [pc, #72]	; (800a124 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800a0da:	0018      	movs	r0, r3
 800a0dc:	f7f6 f836 	bl	800014c <__udivsi3>
 800a0e0:	0003      	movs	r3, r0
 800a0e2:	3301      	adds	r3, #1
 800a0e4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a0e6:	e008      	b.n	800a0fa <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d003      	beq.n	800a0f6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	3b01      	subs	r3, #1
 800a0f2:	60fb      	str	r3, [r7, #12]
 800a0f4:	e001      	b.n	800a0fa <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800a0f6:	2303      	movs	r3, #3
 800a0f8:	e009      	b.n	800a10e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a0fa:	4b07      	ldr	r3, [pc, #28]	; (800a118 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800a0fc:	695a      	ldr	r2, [r3, #20]
 800a0fe:	2380      	movs	r3, #128	; 0x80
 800a100:	00db      	lsls	r3, r3, #3
 800a102:	401a      	ands	r2, r3
 800a104:	2380      	movs	r3, #128	; 0x80
 800a106:	00db      	lsls	r3, r3, #3
 800a108:	429a      	cmp	r2, r3
 800a10a:	d0ed      	beq.n	800a0e8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800a10c:	2300      	movs	r3, #0
}
 800a10e:	0018      	movs	r0, r3
 800a110:	46bd      	mov	sp, r7
 800a112:	b004      	add	sp, #16
 800a114:	bd80      	pop	{r7, pc}
 800a116:	46c0      	nop			; (mov r8, r8)
 800a118:	40007000 	.word	0x40007000
 800a11c:	fffff9ff 	.word	0xfffff9ff
 800a120:	200000d8 	.word	0x200000d8
 800a124:	000f4240 	.word	0x000f4240

0800a128 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800a12c:	4b03      	ldr	r3, [pc, #12]	; (800a13c <LL_RCC_GetAPB1Prescaler+0x14>)
 800a12e:	689a      	ldr	r2, [r3, #8]
 800a130:	23e0      	movs	r3, #224	; 0xe0
 800a132:	01db      	lsls	r3, r3, #7
 800a134:	4013      	ands	r3, r2
}
 800a136:	0018      	movs	r0, r3
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}
 800a13c:	40021000 	.word	0x40021000

0800a140 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b088      	sub	sp, #32
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d101      	bne.n	800a152 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a14e:	2301      	movs	r3, #1
 800a150:	e2f3      	b.n	800a73a <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	2201      	movs	r2, #1
 800a158:	4013      	ands	r3, r2
 800a15a:	d100      	bne.n	800a15e <HAL_RCC_OscConfig+0x1e>
 800a15c:	e07c      	b.n	800a258 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a15e:	4bc3      	ldr	r3, [pc, #780]	; (800a46c <HAL_RCC_OscConfig+0x32c>)
 800a160:	689b      	ldr	r3, [r3, #8]
 800a162:	2238      	movs	r2, #56	; 0x38
 800a164:	4013      	ands	r3, r2
 800a166:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a168:	4bc0      	ldr	r3, [pc, #768]	; (800a46c <HAL_RCC_OscConfig+0x32c>)
 800a16a:	68db      	ldr	r3, [r3, #12]
 800a16c:	2203      	movs	r2, #3
 800a16e:	4013      	ands	r3, r2
 800a170:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800a172:	69bb      	ldr	r3, [r7, #24]
 800a174:	2b10      	cmp	r3, #16
 800a176:	d102      	bne.n	800a17e <HAL_RCC_OscConfig+0x3e>
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	2b03      	cmp	r3, #3
 800a17c:	d002      	beq.n	800a184 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800a17e:	69bb      	ldr	r3, [r7, #24]
 800a180:	2b08      	cmp	r3, #8
 800a182:	d10b      	bne.n	800a19c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a184:	4bb9      	ldr	r3, [pc, #740]	; (800a46c <HAL_RCC_OscConfig+0x32c>)
 800a186:	681a      	ldr	r2, [r3, #0]
 800a188:	2380      	movs	r3, #128	; 0x80
 800a18a:	029b      	lsls	r3, r3, #10
 800a18c:	4013      	ands	r3, r2
 800a18e:	d062      	beq.n	800a256 <HAL_RCC_OscConfig+0x116>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	685b      	ldr	r3, [r3, #4]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d15e      	bne.n	800a256 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800a198:	2301      	movs	r3, #1
 800a19a:	e2ce      	b.n	800a73a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	685a      	ldr	r2, [r3, #4]
 800a1a0:	2380      	movs	r3, #128	; 0x80
 800a1a2:	025b      	lsls	r3, r3, #9
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	d107      	bne.n	800a1b8 <HAL_RCC_OscConfig+0x78>
 800a1a8:	4bb0      	ldr	r3, [pc, #704]	; (800a46c <HAL_RCC_OscConfig+0x32c>)
 800a1aa:	681a      	ldr	r2, [r3, #0]
 800a1ac:	4baf      	ldr	r3, [pc, #700]	; (800a46c <HAL_RCC_OscConfig+0x32c>)
 800a1ae:	2180      	movs	r1, #128	; 0x80
 800a1b0:	0249      	lsls	r1, r1, #9
 800a1b2:	430a      	orrs	r2, r1
 800a1b4:	601a      	str	r2, [r3, #0]
 800a1b6:	e020      	b.n	800a1fa <HAL_RCC_OscConfig+0xba>
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	685a      	ldr	r2, [r3, #4]
 800a1bc:	23a0      	movs	r3, #160	; 0xa0
 800a1be:	02db      	lsls	r3, r3, #11
 800a1c0:	429a      	cmp	r2, r3
 800a1c2:	d10e      	bne.n	800a1e2 <HAL_RCC_OscConfig+0xa2>
 800a1c4:	4ba9      	ldr	r3, [pc, #676]	; (800a46c <HAL_RCC_OscConfig+0x32c>)
 800a1c6:	681a      	ldr	r2, [r3, #0]
 800a1c8:	4ba8      	ldr	r3, [pc, #672]	; (800a46c <HAL_RCC_OscConfig+0x32c>)
 800a1ca:	2180      	movs	r1, #128	; 0x80
 800a1cc:	02c9      	lsls	r1, r1, #11
 800a1ce:	430a      	orrs	r2, r1
 800a1d0:	601a      	str	r2, [r3, #0]
 800a1d2:	4ba6      	ldr	r3, [pc, #664]	; (800a46c <HAL_RCC_OscConfig+0x32c>)
 800a1d4:	681a      	ldr	r2, [r3, #0]
 800a1d6:	4ba5      	ldr	r3, [pc, #660]	; (800a46c <HAL_RCC_OscConfig+0x32c>)
 800a1d8:	2180      	movs	r1, #128	; 0x80
 800a1da:	0249      	lsls	r1, r1, #9
 800a1dc:	430a      	orrs	r2, r1
 800a1de:	601a      	str	r2, [r3, #0]
 800a1e0:	e00b      	b.n	800a1fa <HAL_RCC_OscConfig+0xba>
 800a1e2:	4ba2      	ldr	r3, [pc, #648]	; (800a46c <HAL_RCC_OscConfig+0x32c>)
 800a1e4:	681a      	ldr	r2, [r3, #0]
 800a1e6:	4ba1      	ldr	r3, [pc, #644]	; (800a46c <HAL_RCC_OscConfig+0x32c>)
 800a1e8:	49a1      	ldr	r1, [pc, #644]	; (800a470 <HAL_RCC_OscConfig+0x330>)
 800a1ea:	400a      	ands	r2, r1
 800a1ec:	601a      	str	r2, [r3, #0]
 800a1ee:	4b9f      	ldr	r3, [pc, #636]	; (800a46c <HAL_RCC_OscConfig+0x32c>)
 800a1f0:	681a      	ldr	r2, [r3, #0]
 800a1f2:	4b9e      	ldr	r3, [pc, #632]	; (800a46c <HAL_RCC_OscConfig+0x32c>)
 800a1f4:	499f      	ldr	r1, [pc, #636]	; (800a474 <HAL_RCC_OscConfig+0x334>)
 800a1f6:	400a      	ands	r2, r1
 800a1f8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	685b      	ldr	r3, [r3, #4]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d014      	beq.n	800a22c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a202:	f7ff fbbf 	bl	8009984 <HAL_GetTick>
 800a206:	0003      	movs	r3, r0
 800a208:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a20a:	e008      	b.n	800a21e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a20c:	f7ff fbba 	bl	8009984 <HAL_GetTick>
 800a210:	0002      	movs	r2, r0
 800a212:	693b      	ldr	r3, [r7, #16]
 800a214:	1ad3      	subs	r3, r2, r3
 800a216:	2b64      	cmp	r3, #100	; 0x64
 800a218:	d901      	bls.n	800a21e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800a21a:	2303      	movs	r3, #3
 800a21c:	e28d      	b.n	800a73a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a21e:	4b93      	ldr	r3, [pc, #588]	; (800a46c <HAL_RCC_OscConfig+0x32c>)
 800a220:	681a      	ldr	r2, [r3, #0]
 800a222:	2380      	movs	r3, #128	; 0x80
 800a224:	029b      	lsls	r3, r3, #10
 800a226:	4013      	ands	r3, r2
 800a228:	d0f0      	beq.n	800a20c <HAL_RCC_OscConfig+0xcc>
 800a22a:	e015      	b.n	800a258 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a22c:	f7ff fbaa 	bl	8009984 <HAL_GetTick>
 800a230:	0003      	movs	r3, r0
 800a232:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a234:	e008      	b.n	800a248 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a236:	f7ff fba5 	bl	8009984 <HAL_GetTick>
 800a23a:	0002      	movs	r2, r0
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	1ad3      	subs	r3, r2, r3
 800a240:	2b64      	cmp	r3, #100	; 0x64
 800a242:	d901      	bls.n	800a248 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800a244:	2303      	movs	r3, #3
 800a246:	e278      	b.n	800a73a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a248:	4b88      	ldr	r3, [pc, #544]	; (800a46c <HAL_RCC_OscConfig+0x32c>)
 800a24a:	681a      	ldr	r2, [r3, #0]
 800a24c:	2380      	movs	r3, #128	; 0x80
 800a24e:	029b      	lsls	r3, r3, #10
 800a250:	4013      	ands	r3, r2
 800a252:	d1f0      	bne.n	800a236 <HAL_RCC_OscConfig+0xf6>
 800a254:	e000      	b.n	800a258 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a256:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	2202      	movs	r2, #2
 800a25e:	4013      	ands	r3, r2
 800a260:	d100      	bne.n	800a264 <HAL_RCC_OscConfig+0x124>
 800a262:	e099      	b.n	800a398 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a264:	4b81      	ldr	r3, [pc, #516]	; (800a46c <HAL_RCC_OscConfig+0x32c>)
 800a266:	689b      	ldr	r3, [r3, #8]
 800a268:	2238      	movs	r2, #56	; 0x38
 800a26a:	4013      	ands	r3, r2
 800a26c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a26e:	4b7f      	ldr	r3, [pc, #508]	; (800a46c <HAL_RCC_OscConfig+0x32c>)
 800a270:	68db      	ldr	r3, [r3, #12]
 800a272:	2203      	movs	r2, #3
 800a274:	4013      	ands	r3, r2
 800a276:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800a278:	69bb      	ldr	r3, [r7, #24]
 800a27a:	2b10      	cmp	r3, #16
 800a27c:	d102      	bne.n	800a284 <HAL_RCC_OscConfig+0x144>
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	2b02      	cmp	r3, #2
 800a282:	d002      	beq.n	800a28a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800a284:	69bb      	ldr	r3, [r7, #24]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d135      	bne.n	800a2f6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a28a:	4b78      	ldr	r3, [pc, #480]	; (800a46c <HAL_RCC_OscConfig+0x32c>)
 800a28c:	681a      	ldr	r2, [r3, #0]
 800a28e:	2380      	movs	r3, #128	; 0x80
 800a290:	00db      	lsls	r3, r3, #3
 800a292:	4013      	ands	r3, r2
 800a294:	d005      	beq.n	800a2a2 <HAL_RCC_OscConfig+0x162>
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	68db      	ldr	r3, [r3, #12]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d101      	bne.n	800a2a2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800a29e:	2301      	movs	r3, #1
 800a2a0:	e24b      	b.n	800a73a <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a2a2:	4b72      	ldr	r3, [pc, #456]	; (800a46c <HAL_RCC_OscConfig+0x32c>)
 800a2a4:	685b      	ldr	r3, [r3, #4]
 800a2a6:	4a74      	ldr	r2, [pc, #464]	; (800a478 <HAL_RCC_OscConfig+0x338>)
 800a2a8:	4013      	ands	r3, r2
 800a2aa:	0019      	movs	r1, r3
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	695b      	ldr	r3, [r3, #20]
 800a2b0:	021a      	lsls	r2, r3, #8
 800a2b2:	4b6e      	ldr	r3, [pc, #440]	; (800a46c <HAL_RCC_OscConfig+0x32c>)
 800a2b4:	430a      	orrs	r2, r1
 800a2b6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a2b8:	69bb      	ldr	r3, [r7, #24]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d112      	bne.n	800a2e4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800a2be:	4b6b      	ldr	r3, [pc, #428]	; (800a46c <HAL_RCC_OscConfig+0x32c>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	4a6e      	ldr	r2, [pc, #440]	; (800a47c <HAL_RCC_OscConfig+0x33c>)
 800a2c4:	4013      	ands	r3, r2
 800a2c6:	0019      	movs	r1, r3
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	691a      	ldr	r2, [r3, #16]
 800a2cc:	4b67      	ldr	r3, [pc, #412]	; (800a46c <HAL_RCC_OscConfig+0x32c>)
 800a2ce:	430a      	orrs	r2, r1
 800a2d0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800a2d2:	4b66      	ldr	r3, [pc, #408]	; (800a46c <HAL_RCC_OscConfig+0x32c>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	0adb      	lsrs	r3, r3, #11
 800a2d8:	2207      	movs	r2, #7
 800a2da:	4013      	ands	r3, r2
 800a2dc:	4a68      	ldr	r2, [pc, #416]	; (800a480 <HAL_RCC_OscConfig+0x340>)
 800a2de:	40da      	lsrs	r2, r3
 800a2e0:	4b68      	ldr	r3, [pc, #416]	; (800a484 <HAL_RCC_OscConfig+0x344>)
 800a2e2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800a2e4:	4b68      	ldr	r3, [pc, #416]	; (800a488 <HAL_RCC_OscConfig+0x348>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	0018      	movs	r0, r3
 800a2ea:	f7ff faef 	bl	80098cc <HAL_InitTick>
 800a2ee:	1e03      	subs	r3, r0, #0
 800a2f0:	d051      	beq.n	800a396 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	e221      	b.n	800a73a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	68db      	ldr	r3, [r3, #12]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d030      	beq.n	800a360 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800a2fe:	4b5b      	ldr	r3, [pc, #364]	; (800a46c <HAL_RCC_OscConfig+0x32c>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	4a5e      	ldr	r2, [pc, #376]	; (800a47c <HAL_RCC_OscConfig+0x33c>)
 800a304:	4013      	ands	r3, r2
 800a306:	0019      	movs	r1, r3
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	691a      	ldr	r2, [r3, #16]
 800a30c:	4b57      	ldr	r3, [pc, #348]	; (800a46c <HAL_RCC_OscConfig+0x32c>)
 800a30e:	430a      	orrs	r2, r1
 800a310:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800a312:	4b56      	ldr	r3, [pc, #344]	; (800a46c <HAL_RCC_OscConfig+0x32c>)
 800a314:	681a      	ldr	r2, [r3, #0]
 800a316:	4b55      	ldr	r3, [pc, #340]	; (800a46c <HAL_RCC_OscConfig+0x32c>)
 800a318:	2180      	movs	r1, #128	; 0x80
 800a31a:	0049      	lsls	r1, r1, #1
 800a31c:	430a      	orrs	r2, r1
 800a31e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a320:	f7ff fb30 	bl	8009984 <HAL_GetTick>
 800a324:	0003      	movs	r3, r0
 800a326:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a328:	e008      	b.n	800a33c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a32a:	f7ff fb2b 	bl	8009984 <HAL_GetTick>
 800a32e:	0002      	movs	r2, r0
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	1ad3      	subs	r3, r2, r3
 800a334:	2b02      	cmp	r3, #2
 800a336:	d901      	bls.n	800a33c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800a338:	2303      	movs	r3, #3
 800a33a:	e1fe      	b.n	800a73a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a33c:	4b4b      	ldr	r3, [pc, #300]	; (800a46c <HAL_RCC_OscConfig+0x32c>)
 800a33e:	681a      	ldr	r2, [r3, #0]
 800a340:	2380      	movs	r3, #128	; 0x80
 800a342:	00db      	lsls	r3, r3, #3
 800a344:	4013      	ands	r3, r2
 800a346:	d0f0      	beq.n	800a32a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a348:	4b48      	ldr	r3, [pc, #288]	; (800a46c <HAL_RCC_OscConfig+0x32c>)
 800a34a:	685b      	ldr	r3, [r3, #4]
 800a34c:	4a4a      	ldr	r2, [pc, #296]	; (800a478 <HAL_RCC_OscConfig+0x338>)
 800a34e:	4013      	ands	r3, r2
 800a350:	0019      	movs	r1, r3
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	695b      	ldr	r3, [r3, #20]
 800a356:	021a      	lsls	r2, r3, #8
 800a358:	4b44      	ldr	r3, [pc, #272]	; (800a46c <HAL_RCC_OscConfig+0x32c>)
 800a35a:	430a      	orrs	r2, r1
 800a35c:	605a      	str	r2, [r3, #4]
 800a35e:	e01b      	b.n	800a398 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800a360:	4b42      	ldr	r3, [pc, #264]	; (800a46c <HAL_RCC_OscConfig+0x32c>)
 800a362:	681a      	ldr	r2, [r3, #0]
 800a364:	4b41      	ldr	r3, [pc, #260]	; (800a46c <HAL_RCC_OscConfig+0x32c>)
 800a366:	4949      	ldr	r1, [pc, #292]	; (800a48c <HAL_RCC_OscConfig+0x34c>)
 800a368:	400a      	ands	r2, r1
 800a36a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a36c:	f7ff fb0a 	bl	8009984 <HAL_GetTick>
 800a370:	0003      	movs	r3, r0
 800a372:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a374:	e008      	b.n	800a388 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a376:	f7ff fb05 	bl	8009984 <HAL_GetTick>
 800a37a:	0002      	movs	r2, r0
 800a37c:	693b      	ldr	r3, [r7, #16]
 800a37e:	1ad3      	subs	r3, r2, r3
 800a380:	2b02      	cmp	r3, #2
 800a382:	d901      	bls.n	800a388 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800a384:	2303      	movs	r3, #3
 800a386:	e1d8      	b.n	800a73a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a388:	4b38      	ldr	r3, [pc, #224]	; (800a46c <HAL_RCC_OscConfig+0x32c>)
 800a38a:	681a      	ldr	r2, [r3, #0]
 800a38c:	2380      	movs	r3, #128	; 0x80
 800a38e:	00db      	lsls	r3, r3, #3
 800a390:	4013      	ands	r3, r2
 800a392:	d1f0      	bne.n	800a376 <HAL_RCC_OscConfig+0x236>
 800a394:	e000      	b.n	800a398 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a396:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	2208      	movs	r2, #8
 800a39e:	4013      	ands	r3, r2
 800a3a0:	d047      	beq.n	800a432 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800a3a2:	4b32      	ldr	r3, [pc, #200]	; (800a46c <HAL_RCC_OscConfig+0x32c>)
 800a3a4:	689b      	ldr	r3, [r3, #8]
 800a3a6:	2238      	movs	r2, #56	; 0x38
 800a3a8:	4013      	ands	r3, r2
 800a3aa:	2b18      	cmp	r3, #24
 800a3ac:	d10a      	bne.n	800a3c4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800a3ae:	4b2f      	ldr	r3, [pc, #188]	; (800a46c <HAL_RCC_OscConfig+0x32c>)
 800a3b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3b2:	2202      	movs	r2, #2
 800a3b4:	4013      	ands	r3, r2
 800a3b6:	d03c      	beq.n	800a432 <HAL_RCC_OscConfig+0x2f2>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	699b      	ldr	r3, [r3, #24]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d138      	bne.n	800a432 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800a3c0:	2301      	movs	r3, #1
 800a3c2:	e1ba      	b.n	800a73a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	699b      	ldr	r3, [r3, #24]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d019      	beq.n	800a400 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800a3cc:	4b27      	ldr	r3, [pc, #156]	; (800a46c <HAL_RCC_OscConfig+0x32c>)
 800a3ce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a3d0:	4b26      	ldr	r3, [pc, #152]	; (800a46c <HAL_RCC_OscConfig+0x32c>)
 800a3d2:	2101      	movs	r1, #1
 800a3d4:	430a      	orrs	r2, r1
 800a3d6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3d8:	f7ff fad4 	bl	8009984 <HAL_GetTick>
 800a3dc:	0003      	movs	r3, r0
 800a3de:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a3e0:	e008      	b.n	800a3f4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a3e2:	f7ff facf 	bl	8009984 <HAL_GetTick>
 800a3e6:	0002      	movs	r2, r0
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	1ad3      	subs	r3, r2, r3
 800a3ec:	2b02      	cmp	r3, #2
 800a3ee:	d901      	bls.n	800a3f4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800a3f0:	2303      	movs	r3, #3
 800a3f2:	e1a2      	b.n	800a73a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a3f4:	4b1d      	ldr	r3, [pc, #116]	; (800a46c <HAL_RCC_OscConfig+0x32c>)
 800a3f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3f8:	2202      	movs	r2, #2
 800a3fa:	4013      	ands	r3, r2
 800a3fc:	d0f1      	beq.n	800a3e2 <HAL_RCC_OscConfig+0x2a2>
 800a3fe:	e018      	b.n	800a432 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800a400:	4b1a      	ldr	r3, [pc, #104]	; (800a46c <HAL_RCC_OscConfig+0x32c>)
 800a402:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a404:	4b19      	ldr	r3, [pc, #100]	; (800a46c <HAL_RCC_OscConfig+0x32c>)
 800a406:	2101      	movs	r1, #1
 800a408:	438a      	bics	r2, r1
 800a40a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a40c:	f7ff faba 	bl	8009984 <HAL_GetTick>
 800a410:	0003      	movs	r3, r0
 800a412:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a414:	e008      	b.n	800a428 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a416:	f7ff fab5 	bl	8009984 <HAL_GetTick>
 800a41a:	0002      	movs	r2, r0
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	1ad3      	subs	r3, r2, r3
 800a420:	2b02      	cmp	r3, #2
 800a422:	d901      	bls.n	800a428 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800a424:	2303      	movs	r3, #3
 800a426:	e188      	b.n	800a73a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a428:	4b10      	ldr	r3, [pc, #64]	; (800a46c <HAL_RCC_OscConfig+0x32c>)
 800a42a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a42c:	2202      	movs	r2, #2
 800a42e:	4013      	ands	r3, r2
 800a430:	d1f1      	bne.n	800a416 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	2204      	movs	r2, #4
 800a438:	4013      	ands	r3, r2
 800a43a:	d100      	bne.n	800a43e <HAL_RCC_OscConfig+0x2fe>
 800a43c:	e0c6      	b.n	800a5cc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a43e:	231f      	movs	r3, #31
 800a440:	18fb      	adds	r3, r7, r3
 800a442:	2200      	movs	r2, #0
 800a444:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800a446:	4b09      	ldr	r3, [pc, #36]	; (800a46c <HAL_RCC_OscConfig+0x32c>)
 800a448:	689b      	ldr	r3, [r3, #8]
 800a44a:	2238      	movs	r2, #56	; 0x38
 800a44c:	4013      	ands	r3, r2
 800a44e:	2b20      	cmp	r3, #32
 800a450:	d11e      	bne.n	800a490 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800a452:	4b06      	ldr	r3, [pc, #24]	; (800a46c <HAL_RCC_OscConfig+0x32c>)
 800a454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a456:	2202      	movs	r2, #2
 800a458:	4013      	ands	r3, r2
 800a45a:	d100      	bne.n	800a45e <HAL_RCC_OscConfig+0x31e>
 800a45c:	e0b6      	b.n	800a5cc <HAL_RCC_OscConfig+0x48c>
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	689b      	ldr	r3, [r3, #8]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d000      	beq.n	800a468 <HAL_RCC_OscConfig+0x328>
 800a466:	e0b1      	b.n	800a5cc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800a468:	2301      	movs	r3, #1
 800a46a:	e166      	b.n	800a73a <HAL_RCC_OscConfig+0x5fa>
 800a46c:	40021000 	.word	0x40021000
 800a470:	fffeffff 	.word	0xfffeffff
 800a474:	fffbffff 	.word	0xfffbffff
 800a478:	ffff80ff 	.word	0xffff80ff
 800a47c:	ffffc7ff 	.word	0xffffc7ff
 800a480:	00f42400 	.word	0x00f42400
 800a484:	200000d8 	.word	0x200000d8
 800a488:	200000dc 	.word	0x200000dc
 800a48c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a490:	4bac      	ldr	r3, [pc, #688]	; (800a744 <HAL_RCC_OscConfig+0x604>)
 800a492:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a494:	2380      	movs	r3, #128	; 0x80
 800a496:	055b      	lsls	r3, r3, #21
 800a498:	4013      	ands	r3, r2
 800a49a:	d101      	bne.n	800a4a0 <HAL_RCC_OscConfig+0x360>
 800a49c:	2301      	movs	r3, #1
 800a49e:	e000      	b.n	800a4a2 <HAL_RCC_OscConfig+0x362>
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d011      	beq.n	800a4ca <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800a4a6:	4ba7      	ldr	r3, [pc, #668]	; (800a744 <HAL_RCC_OscConfig+0x604>)
 800a4a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a4aa:	4ba6      	ldr	r3, [pc, #664]	; (800a744 <HAL_RCC_OscConfig+0x604>)
 800a4ac:	2180      	movs	r1, #128	; 0x80
 800a4ae:	0549      	lsls	r1, r1, #21
 800a4b0:	430a      	orrs	r2, r1
 800a4b2:	63da      	str	r2, [r3, #60]	; 0x3c
 800a4b4:	4ba3      	ldr	r3, [pc, #652]	; (800a744 <HAL_RCC_OscConfig+0x604>)
 800a4b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a4b8:	2380      	movs	r3, #128	; 0x80
 800a4ba:	055b      	lsls	r3, r3, #21
 800a4bc:	4013      	ands	r3, r2
 800a4be:	60fb      	str	r3, [r7, #12]
 800a4c0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800a4c2:	231f      	movs	r3, #31
 800a4c4:	18fb      	adds	r3, r7, r3
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a4ca:	4b9f      	ldr	r3, [pc, #636]	; (800a748 <HAL_RCC_OscConfig+0x608>)
 800a4cc:	681a      	ldr	r2, [r3, #0]
 800a4ce:	2380      	movs	r3, #128	; 0x80
 800a4d0:	005b      	lsls	r3, r3, #1
 800a4d2:	4013      	ands	r3, r2
 800a4d4:	d11a      	bne.n	800a50c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a4d6:	4b9c      	ldr	r3, [pc, #624]	; (800a748 <HAL_RCC_OscConfig+0x608>)
 800a4d8:	681a      	ldr	r2, [r3, #0]
 800a4da:	4b9b      	ldr	r3, [pc, #620]	; (800a748 <HAL_RCC_OscConfig+0x608>)
 800a4dc:	2180      	movs	r1, #128	; 0x80
 800a4de:	0049      	lsls	r1, r1, #1
 800a4e0:	430a      	orrs	r2, r1
 800a4e2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800a4e4:	f7ff fa4e 	bl	8009984 <HAL_GetTick>
 800a4e8:	0003      	movs	r3, r0
 800a4ea:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a4ec:	e008      	b.n	800a500 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a4ee:	f7ff fa49 	bl	8009984 <HAL_GetTick>
 800a4f2:	0002      	movs	r2, r0
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	1ad3      	subs	r3, r2, r3
 800a4f8:	2b02      	cmp	r3, #2
 800a4fa:	d901      	bls.n	800a500 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800a4fc:	2303      	movs	r3, #3
 800a4fe:	e11c      	b.n	800a73a <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a500:	4b91      	ldr	r3, [pc, #580]	; (800a748 <HAL_RCC_OscConfig+0x608>)
 800a502:	681a      	ldr	r2, [r3, #0]
 800a504:	2380      	movs	r3, #128	; 0x80
 800a506:	005b      	lsls	r3, r3, #1
 800a508:	4013      	ands	r3, r2
 800a50a:	d0f0      	beq.n	800a4ee <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	689b      	ldr	r3, [r3, #8]
 800a510:	2b01      	cmp	r3, #1
 800a512:	d106      	bne.n	800a522 <HAL_RCC_OscConfig+0x3e2>
 800a514:	4b8b      	ldr	r3, [pc, #556]	; (800a744 <HAL_RCC_OscConfig+0x604>)
 800a516:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a518:	4b8a      	ldr	r3, [pc, #552]	; (800a744 <HAL_RCC_OscConfig+0x604>)
 800a51a:	2101      	movs	r1, #1
 800a51c:	430a      	orrs	r2, r1
 800a51e:	65da      	str	r2, [r3, #92]	; 0x5c
 800a520:	e01c      	b.n	800a55c <HAL_RCC_OscConfig+0x41c>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	689b      	ldr	r3, [r3, #8]
 800a526:	2b05      	cmp	r3, #5
 800a528:	d10c      	bne.n	800a544 <HAL_RCC_OscConfig+0x404>
 800a52a:	4b86      	ldr	r3, [pc, #536]	; (800a744 <HAL_RCC_OscConfig+0x604>)
 800a52c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a52e:	4b85      	ldr	r3, [pc, #532]	; (800a744 <HAL_RCC_OscConfig+0x604>)
 800a530:	2104      	movs	r1, #4
 800a532:	430a      	orrs	r2, r1
 800a534:	65da      	str	r2, [r3, #92]	; 0x5c
 800a536:	4b83      	ldr	r3, [pc, #524]	; (800a744 <HAL_RCC_OscConfig+0x604>)
 800a538:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a53a:	4b82      	ldr	r3, [pc, #520]	; (800a744 <HAL_RCC_OscConfig+0x604>)
 800a53c:	2101      	movs	r1, #1
 800a53e:	430a      	orrs	r2, r1
 800a540:	65da      	str	r2, [r3, #92]	; 0x5c
 800a542:	e00b      	b.n	800a55c <HAL_RCC_OscConfig+0x41c>
 800a544:	4b7f      	ldr	r3, [pc, #508]	; (800a744 <HAL_RCC_OscConfig+0x604>)
 800a546:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a548:	4b7e      	ldr	r3, [pc, #504]	; (800a744 <HAL_RCC_OscConfig+0x604>)
 800a54a:	2101      	movs	r1, #1
 800a54c:	438a      	bics	r2, r1
 800a54e:	65da      	str	r2, [r3, #92]	; 0x5c
 800a550:	4b7c      	ldr	r3, [pc, #496]	; (800a744 <HAL_RCC_OscConfig+0x604>)
 800a552:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a554:	4b7b      	ldr	r3, [pc, #492]	; (800a744 <HAL_RCC_OscConfig+0x604>)
 800a556:	2104      	movs	r1, #4
 800a558:	438a      	bics	r2, r1
 800a55a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	689b      	ldr	r3, [r3, #8]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d014      	beq.n	800a58e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a564:	f7ff fa0e 	bl	8009984 <HAL_GetTick>
 800a568:	0003      	movs	r3, r0
 800a56a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a56c:	e009      	b.n	800a582 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a56e:	f7ff fa09 	bl	8009984 <HAL_GetTick>
 800a572:	0002      	movs	r2, r0
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	1ad3      	subs	r3, r2, r3
 800a578:	4a74      	ldr	r2, [pc, #464]	; (800a74c <HAL_RCC_OscConfig+0x60c>)
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d901      	bls.n	800a582 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800a57e:	2303      	movs	r3, #3
 800a580:	e0db      	b.n	800a73a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a582:	4b70      	ldr	r3, [pc, #448]	; (800a744 <HAL_RCC_OscConfig+0x604>)
 800a584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a586:	2202      	movs	r2, #2
 800a588:	4013      	ands	r3, r2
 800a58a:	d0f0      	beq.n	800a56e <HAL_RCC_OscConfig+0x42e>
 800a58c:	e013      	b.n	800a5b6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a58e:	f7ff f9f9 	bl	8009984 <HAL_GetTick>
 800a592:	0003      	movs	r3, r0
 800a594:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a596:	e009      	b.n	800a5ac <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a598:	f7ff f9f4 	bl	8009984 <HAL_GetTick>
 800a59c:	0002      	movs	r2, r0
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	1ad3      	subs	r3, r2, r3
 800a5a2:	4a6a      	ldr	r2, [pc, #424]	; (800a74c <HAL_RCC_OscConfig+0x60c>)
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	d901      	bls.n	800a5ac <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800a5a8:	2303      	movs	r3, #3
 800a5aa:	e0c6      	b.n	800a73a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a5ac:	4b65      	ldr	r3, [pc, #404]	; (800a744 <HAL_RCC_OscConfig+0x604>)
 800a5ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5b0:	2202      	movs	r2, #2
 800a5b2:	4013      	ands	r3, r2
 800a5b4:	d1f0      	bne.n	800a598 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800a5b6:	231f      	movs	r3, #31
 800a5b8:	18fb      	adds	r3, r7, r3
 800a5ba:	781b      	ldrb	r3, [r3, #0]
 800a5bc:	2b01      	cmp	r3, #1
 800a5be:	d105      	bne.n	800a5cc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800a5c0:	4b60      	ldr	r3, [pc, #384]	; (800a744 <HAL_RCC_OscConfig+0x604>)
 800a5c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a5c4:	4b5f      	ldr	r3, [pc, #380]	; (800a744 <HAL_RCC_OscConfig+0x604>)
 800a5c6:	4962      	ldr	r1, [pc, #392]	; (800a750 <HAL_RCC_OscConfig+0x610>)
 800a5c8:	400a      	ands	r2, r1
 800a5ca:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	69db      	ldr	r3, [r3, #28]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d100      	bne.n	800a5d6 <HAL_RCC_OscConfig+0x496>
 800a5d4:	e0b0      	b.n	800a738 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a5d6:	4b5b      	ldr	r3, [pc, #364]	; (800a744 <HAL_RCC_OscConfig+0x604>)
 800a5d8:	689b      	ldr	r3, [r3, #8]
 800a5da:	2238      	movs	r2, #56	; 0x38
 800a5dc:	4013      	ands	r3, r2
 800a5de:	2b10      	cmp	r3, #16
 800a5e0:	d100      	bne.n	800a5e4 <HAL_RCC_OscConfig+0x4a4>
 800a5e2:	e078      	b.n	800a6d6 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	69db      	ldr	r3, [r3, #28]
 800a5e8:	2b02      	cmp	r3, #2
 800a5ea:	d153      	bne.n	800a694 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a5ec:	4b55      	ldr	r3, [pc, #340]	; (800a744 <HAL_RCC_OscConfig+0x604>)
 800a5ee:	681a      	ldr	r2, [r3, #0]
 800a5f0:	4b54      	ldr	r3, [pc, #336]	; (800a744 <HAL_RCC_OscConfig+0x604>)
 800a5f2:	4958      	ldr	r1, [pc, #352]	; (800a754 <HAL_RCC_OscConfig+0x614>)
 800a5f4:	400a      	ands	r2, r1
 800a5f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5f8:	f7ff f9c4 	bl	8009984 <HAL_GetTick>
 800a5fc:	0003      	movs	r3, r0
 800a5fe:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a600:	e008      	b.n	800a614 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a602:	f7ff f9bf 	bl	8009984 <HAL_GetTick>
 800a606:	0002      	movs	r2, r0
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	1ad3      	subs	r3, r2, r3
 800a60c:	2b02      	cmp	r3, #2
 800a60e:	d901      	bls.n	800a614 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800a610:	2303      	movs	r3, #3
 800a612:	e092      	b.n	800a73a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a614:	4b4b      	ldr	r3, [pc, #300]	; (800a744 <HAL_RCC_OscConfig+0x604>)
 800a616:	681a      	ldr	r2, [r3, #0]
 800a618:	2380      	movs	r3, #128	; 0x80
 800a61a:	049b      	lsls	r3, r3, #18
 800a61c:	4013      	ands	r3, r2
 800a61e:	d1f0      	bne.n	800a602 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a620:	4b48      	ldr	r3, [pc, #288]	; (800a744 <HAL_RCC_OscConfig+0x604>)
 800a622:	68db      	ldr	r3, [r3, #12]
 800a624:	4a4c      	ldr	r2, [pc, #304]	; (800a758 <HAL_RCC_OscConfig+0x618>)
 800a626:	4013      	ands	r3, r2
 800a628:	0019      	movs	r1, r3
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6a1a      	ldr	r2, [r3, #32]
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a632:	431a      	orrs	r2, r3
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a638:	021b      	lsls	r3, r3, #8
 800a63a:	431a      	orrs	r2, r3
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a640:	431a      	orrs	r2, r3
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a646:	431a      	orrs	r2, r3
 800a648:	4b3e      	ldr	r3, [pc, #248]	; (800a744 <HAL_RCC_OscConfig+0x604>)
 800a64a:	430a      	orrs	r2, r1
 800a64c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a64e:	4b3d      	ldr	r3, [pc, #244]	; (800a744 <HAL_RCC_OscConfig+0x604>)
 800a650:	681a      	ldr	r2, [r3, #0]
 800a652:	4b3c      	ldr	r3, [pc, #240]	; (800a744 <HAL_RCC_OscConfig+0x604>)
 800a654:	2180      	movs	r1, #128	; 0x80
 800a656:	0449      	lsls	r1, r1, #17
 800a658:	430a      	orrs	r2, r1
 800a65a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800a65c:	4b39      	ldr	r3, [pc, #228]	; (800a744 <HAL_RCC_OscConfig+0x604>)
 800a65e:	68da      	ldr	r2, [r3, #12]
 800a660:	4b38      	ldr	r3, [pc, #224]	; (800a744 <HAL_RCC_OscConfig+0x604>)
 800a662:	2180      	movs	r1, #128	; 0x80
 800a664:	0549      	lsls	r1, r1, #21
 800a666:	430a      	orrs	r2, r1
 800a668:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a66a:	f7ff f98b 	bl	8009984 <HAL_GetTick>
 800a66e:	0003      	movs	r3, r0
 800a670:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a672:	e008      	b.n	800a686 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a674:	f7ff f986 	bl	8009984 <HAL_GetTick>
 800a678:	0002      	movs	r2, r0
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	1ad3      	subs	r3, r2, r3
 800a67e:	2b02      	cmp	r3, #2
 800a680:	d901      	bls.n	800a686 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800a682:	2303      	movs	r3, #3
 800a684:	e059      	b.n	800a73a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a686:	4b2f      	ldr	r3, [pc, #188]	; (800a744 <HAL_RCC_OscConfig+0x604>)
 800a688:	681a      	ldr	r2, [r3, #0]
 800a68a:	2380      	movs	r3, #128	; 0x80
 800a68c:	049b      	lsls	r3, r3, #18
 800a68e:	4013      	ands	r3, r2
 800a690:	d0f0      	beq.n	800a674 <HAL_RCC_OscConfig+0x534>
 800a692:	e051      	b.n	800a738 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a694:	4b2b      	ldr	r3, [pc, #172]	; (800a744 <HAL_RCC_OscConfig+0x604>)
 800a696:	681a      	ldr	r2, [r3, #0]
 800a698:	4b2a      	ldr	r3, [pc, #168]	; (800a744 <HAL_RCC_OscConfig+0x604>)
 800a69a:	492e      	ldr	r1, [pc, #184]	; (800a754 <HAL_RCC_OscConfig+0x614>)
 800a69c:	400a      	ands	r2, r1
 800a69e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6a0:	f7ff f970 	bl	8009984 <HAL_GetTick>
 800a6a4:	0003      	movs	r3, r0
 800a6a6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a6a8:	e008      	b.n	800a6bc <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a6aa:	f7ff f96b 	bl	8009984 <HAL_GetTick>
 800a6ae:	0002      	movs	r2, r0
 800a6b0:	693b      	ldr	r3, [r7, #16]
 800a6b2:	1ad3      	subs	r3, r2, r3
 800a6b4:	2b02      	cmp	r3, #2
 800a6b6:	d901      	bls.n	800a6bc <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 800a6b8:	2303      	movs	r3, #3
 800a6ba:	e03e      	b.n	800a73a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a6bc:	4b21      	ldr	r3, [pc, #132]	; (800a744 <HAL_RCC_OscConfig+0x604>)
 800a6be:	681a      	ldr	r2, [r3, #0]
 800a6c0:	2380      	movs	r3, #128	; 0x80
 800a6c2:	049b      	lsls	r3, r3, #18
 800a6c4:	4013      	ands	r3, r2
 800a6c6:	d1f0      	bne.n	800a6aa <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800a6c8:	4b1e      	ldr	r3, [pc, #120]	; (800a744 <HAL_RCC_OscConfig+0x604>)
 800a6ca:	68da      	ldr	r2, [r3, #12]
 800a6cc:	4b1d      	ldr	r3, [pc, #116]	; (800a744 <HAL_RCC_OscConfig+0x604>)
 800a6ce:	4923      	ldr	r1, [pc, #140]	; (800a75c <HAL_RCC_OscConfig+0x61c>)
 800a6d0:	400a      	ands	r2, r1
 800a6d2:	60da      	str	r2, [r3, #12]
 800a6d4:	e030      	b.n	800a738 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	69db      	ldr	r3, [r3, #28]
 800a6da:	2b01      	cmp	r3, #1
 800a6dc:	d101      	bne.n	800a6e2 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800a6de:	2301      	movs	r3, #1
 800a6e0:	e02b      	b.n	800a73a <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800a6e2:	4b18      	ldr	r3, [pc, #96]	; (800a744 <HAL_RCC_OscConfig+0x604>)
 800a6e4:	68db      	ldr	r3, [r3, #12]
 800a6e6:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a6e8:	697b      	ldr	r3, [r7, #20]
 800a6ea:	2203      	movs	r2, #3
 800a6ec:	401a      	ands	r2, r3
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6a1b      	ldr	r3, [r3, #32]
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	d11e      	bne.n	800a734 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	2270      	movs	r2, #112	; 0x70
 800a6fa:	401a      	ands	r2, r3
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a700:	429a      	cmp	r2, r3
 800a702:	d117      	bne.n	800a734 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a704:	697a      	ldr	r2, [r7, #20]
 800a706:	23fe      	movs	r3, #254	; 0xfe
 800a708:	01db      	lsls	r3, r3, #7
 800a70a:	401a      	ands	r2, r3
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a710:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a712:	429a      	cmp	r2, r3
 800a714:	d10e      	bne.n	800a734 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a716:	697a      	ldr	r2, [r7, #20]
 800a718:	23f8      	movs	r3, #248	; 0xf8
 800a71a:	039b      	lsls	r3, r3, #14
 800a71c:	401a      	ands	r2, r3
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a722:	429a      	cmp	r2, r3
 800a724:	d106      	bne.n	800a734 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800a726:	697b      	ldr	r3, [r7, #20]
 800a728:	0f5b      	lsrs	r3, r3, #29
 800a72a:	075a      	lsls	r2, r3, #29
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a730:	429a      	cmp	r2, r3
 800a732:	d001      	beq.n	800a738 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 800a734:	2301      	movs	r3, #1
 800a736:	e000      	b.n	800a73a <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 800a738:	2300      	movs	r3, #0
}
 800a73a:	0018      	movs	r0, r3
 800a73c:	46bd      	mov	sp, r7
 800a73e:	b008      	add	sp, #32
 800a740:	bd80      	pop	{r7, pc}
 800a742:	46c0      	nop			; (mov r8, r8)
 800a744:	40021000 	.word	0x40021000
 800a748:	40007000 	.word	0x40007000
 800a74c:	00001388 	.word	0x00001388
 800a750:	efffffff 	.word	0xefffffff
 800a754:	feffffff 	.word	0xfeffffff
 800a758:	1fc1808c 	.word	0x1fc1808c
 800a75c:	effefffc 	.word	0xeffefffc

0800a760 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b084      	sub	sp, #16
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
 800a768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d101      	bne.n	800a774 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a770:	2301      	movs	r3, #1
 800a772:	e0e9      	b.n	800a948 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a774:	4b76      	ldr	r3, [pc, #472]	; (800a950 <HAL_RCC_ClockConfig+0x1f0>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	2207      	movs	r2, #7
 800a77a:	4013      	ands	r3, r2
 800a77c:	683a      	ldr	r2, [r7, #0]
 800a77e:	429a      	cmp	r2, r3
 800a780:	d91e      	bls.n	800a7c0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a782:	4b73      	ldr	r3, [pc, #460]	; (800a950 <HAL_RCC_ClockConfig+0x1f0>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	2207      	movs	r2, #7
 800a788:	4393      	bics	r3, r2
 800a78a:	0019      	movs	r1, r3
 800a78c:	4b70      	ldr	r3, [pc, #448]	; (800a950 <HAL_RCC_ClockConfig+0x1f0>)
 800a78e:	683a      	ldr	r2, [r7, #0]
 800a790:	430a      	orrs	r2, r1
 800a792:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a794:	f7ff f8f6 	bl	8009984 <HAL_GetTick>
 800a798:	0003      	movs	r3, r0
 800a79a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a79c:	e009      	b.n	800a7b2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a79e:	f7ff f8f1 	bl	8009984 <HAL_GetTick>
 800a7a2:	0002      	movs	r2, r0
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	1ad3      	subs	r3, r2, r3
 800a7a8:	4a6a      	ldr	r2, [pc, #424]	; (800a954 <HAL_RCC_ClockConfig+0x1f4>)
 800a7aa:	4293      	cmp	r3, r2
 800a7ac:	d901      	bls.n	800a7b2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800a7ae:	2303      	movs	r3, #3
 800a7b0:	e0ca      	b.n	800a948 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a7b2:	4b67      	ldr	r3, [pc, #412]	; (800a950 <HAL_RCC_ClockConfig+0x1f0>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	2207      	movs	r2, #7
 800a7b8:	4013      	ands	r3, r2
 800a7ba:	683a      	ldr	r2, [r7, #0]
 800a7bc:	429a      	cmp	r2, r3
 800a7be:	d1ee      	bne.n	800a79e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	2202      	movs	r2, #2
 800a7c6:	4013      	ands	r3, r2
 800a7c8:	d015      	beq.n	800a7f6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	2204      	movs	r2, #4
 800a7d0:	4013      	ands	r3, r2
 800a7d2:	d006      	beq.n	800a7e2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800a7d4:	4b60      	ldr	r3, [pc, #384]	; (800a958 <HAL_RCC_ClockConfig+0x1f8>)
 800a7d6:	689a      	ldr	r2, [r3, #8]
 800a7d8:	4b5f      	ldr	r3, [pc, #380]	; (800a958 <HAL_RCC_ClockConfig+0x1f8>)
 800a7da:	21e0      	movs	r1, #224	; 0xe0
 800a7dc:	01c9      	lsls	r1, r1, #7
 800a7de:	430a      	orrs	r2, r1
 800a7e0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a7e2:	4b5d      	ldr	r3, [pc, #372]	; (800a958 <HAL_RCC_ClockConfig+0x1f8>)
 800a7e4:	689b      	ldr	r3, [r3, #8]
 800a7e6:	4a5d      	ldr	r2, [pc, #372]	; (800a95c <HAL_RCC_ClockConfig+0x1fc>)
 800a7e8:	4013      	ands	r3, r2
 800a7ea:	0019      	movs	r1, r3
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	689a      	ldr	r2, [r3, #8]
 800a7f0:	4b59      	ldr	r3, [pc, #356]	; (800a958 <HAL_RCC_ClockConfig+0x1f8>)
 800a7f2:	430a      	orrs	r2, r1
 800a7f4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	2201      	movs	r2, #1
 800a7fc:	4013      	ands	r3, r2
 800a7fe:	d057      	beq.n	800a8b0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	685b      	ldr	r3, [r3, #4]
 800a804:	2b01      	cmp	r3, #1
 800a806:	d107      	bne.n	800a818 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a808:	4b53      	ldr	r3, [pc, #332]	; (800a958 <HAL_RCC_ClockConfig+0x1f8>)
 800a80a:	681a      	ldr	r2, [r3, #0]
 800a80c:	2380      	movs	r3, #128	; 0x80
 800a80e:	029b      	lsls	r3, r3, #10
 800a810:	4013      	ands	r3, r2
 800a812:	d12b      	bne.n	800a86c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a814:	2301      	movs	r3, #1
 800a816:	e097      	b.n	800a948 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	685b      	ldr	r3, [r3, #4]
 800a81c:	2b02      	cmp	r3, #2
 800a81e:	d107      	bne.n	800a830 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a820:	4b4d      	ldr	r3, [pc, #308]	; (800a958 <HAL_RCC_ClockConfig+0x1f8>)
 800a822:	681a      	ldr	r2, [r3, #0]
 800a824:	2380      	movs	r3, #128	; 0x80
 800a826:	049b      	lsls	r3, r3, #18
 800a828:	4013      	ands	r3, r2
 800a82a:	d11f      	bne.n	800a86c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a82c:	2301      	movs	r3, #1
 800a82e:	e08b      	b.n	800a948 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	685b      	ldr	r3, [r3, #4]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d107      	bne.n	800a848 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a838:	4b47      	ldr	r3, [pc, #284]	; (800a958 <HAL_RCC_ClockConfig+0x1f8>)
 800a83a:	681a      	ldr	r2, [r3, #0]
 800a83c:	2380      	movs	r3, #128	; 0x80
 800a83e:	00db      	lsls	r3, r3, #3
 800a840:	4013      	ands	r3, r2
 800a842:	d113      	bne.n	800a86c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a844:	2301      	movs	r3, #1
 800a846:	e07f      	b.n	800a948 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	685b      	ldr	r3, [r3, #4]
 800a84c:	2b03      	cmp	r3, #3
 800a84e:	d106      	bne.n	800a85e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a850:	4b41      	ldr	r3, [pc, #260]	; (800a958 <HAL_RCC_ClockConfig+0x1f8>)
 800a852:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a854:	2202      	movs	r2, #2
 800a856:	4013      	ands	r3, r2
 800a858:	d108      	bne.n	800a86c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a85a:	2301      	movs	r3, #1
 800a85c:	e074      	b.n	800a948 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a85e:	4b3e      	ldr	r3, [pc, #248]	; (800a958 <HAL_RCC_ClockConfig+0x1f8>)
 800a860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a862:	2202      	movs	r2, #2
 800a864:	4013      	ands	r3, r2
 800a866:	d101      	bne.n	800a86c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a868:	2301      	movs	r3, #1
 800a86a:	e06d      	b.n	800a948 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a86c:	4b3a      	ldr	r3, [pc, #232]	; (800a958 <HAL_RCC_ClockConfig+0x1f8>)
 800a86e:	689b      	ldr	r3, [r3, #8]
 800a870:	2207      	movs	r2, #7
 800a872:	4393      	bics	r3, r2
 800a874:	0019      	movs	r1, r3
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	685a      	ldr	r2, [r3, #4]
 800a87a:	4b37      	ldr	r3, [pc, #220]	; (800a958 <HAL_RCC_ClockConfig+0x1f8>)
 800a87c:	430a      	orrs	r2, r1
 800a87e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a880:	f7ff f880 	bl	8009984 <HAL_GetTick>
 800a884:	0003      	movs	r3, r0
 800a886:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a888:	e009      	b.n	800a89e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a88a:	f7ff f87b 	bl	8009984 <HAL_GetTick>
 800a88e:	0002      	movs	r2, r0
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	1ad3      	subs	r3, r2, r3
 800a894:	4a2f      	ldr	r2, [pc, #188]	; (800a954 <HAL_RCC_ClockConfig+0x1f4>)
 800a896:	4293      	cmp	r3, r2
 800a898:	d901      	bls.n	800a89e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800a89a:	2303      	movs	r3, #3
 800a89c:	e054      	b.n	800a948 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a89e:	4b2e      	ldr	r3, [pc, #184]	; (800a958 <HAL_RCC_ClockConfig+0x1f8>)
 800a8a0:	689b      	ldr	r3, [r3, #8]
 800a8a2:	2238      	movs	r2, #56	; 0x38
 800a8a4:	401a      	ands	r2, r3
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	685b      	ldr	r3, [r3, #4]
 800a8aa:	00db      	lsls	r3, r3, #3
 800a8ac:	429a      	cmp	r2, r3
 800a8ae:	d1ec      	bne.n	800a88a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a8b0:	4b27      	ldr	r3, [pc, #156]	; (800a950 <HAL_RCC_ClockConfig+0x1f0>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	2207      	movs	r2, #7
 800a8b6:	4013      	ands	r3, r2
 800a8b8:	683a      	ldr	r2, [r7, #0]
 800a8ba:	429a      	cmp	r2, r3
 800a8bc:	d21e      	bcs.n	800a8fc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a8be:	4b24      	ldr	r3, [pc, #144]	; (800a950 <HAL_RCC_ClockConfig+0x1f0>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	2207      	movs	r2, #7
 800a8c4:	4393      	bics	r3, r2
 800a8c6:	0019      	movs	r1, r3
 800a8c8:	4b21      	ldr	r3, [pc, #132]	; (800a950 <HAL_RCC_ClockConfig+0x1f0>)
 800a8ca:	683a      	ldr	r2, [r7, #0]
 800a8cc:	430a      	orrs	r2, r1
 800a8ce:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a8d0:	f7ff f858 	bl	8009984 <HAL_GetTick>
 800a8d4:	0003      	movs	r3, r0
 800a8d6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a8d8:	e009      	b.n	800a8ee <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a8da:	f7ff f853 	bl	8009984 <HAL_GetTick>
 800a8de:	0002      	movs	r2, r0
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	1ad3      	subs	r3, r2, r3
 800a8e4:	4a1b      	ldr	r2, [pc, #108]	; (800a954 <HAL_RCC_ClockConfig+0x1f4>)
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	d901      	bls.n	800a8ee <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800a8ea:	2303      	movs	r3, #3
 800a8ec:	e02c      	b.n	800a948 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a8ee:	4b18      	ldr	r3, [pc, #96]	; (800a950 <HAL_RCC_ClockConfig+0x1f0>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	2207      	movs	r2, #7
 800a8f4:	4013      	ands	r3, r2
 800a8f6:	683a      	ldr	r2, [r7, #0]
 800a8f8:	429a      	cmp	r2, r3
 800a8fa:	d1ee      	bne.n	800a8da <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	2204      	movs	r2, #4
 800a902:	4013      	ands	r3, r2
 800a904:	d009      	beq.n	800a91a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800a906:	4b14      	ldr	r3, [pc, #80]	; (800a958 <HAL_RCC_ClockConfig+0x1f8>)
 800a908:	689b      	ldr	r3, [r3, #8]
 800a90a:	4a15      	ldr	r2, [pc, #84]	; (800a960 <HAL_RCC_ClockConfig+0x200>)
 800a90c:	4013      	ands	r3, r2
 800a90e:	0019      	movs	r1, r3
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	68da      	ldr	r2, [r3, #12]
 800a914:	4b10      	ldr	r3, [pc, #64]	; (800a958 <HAL_RCC_ClockConfig+0x1f8>)
 800a916:	430a      	orrs	r2, r1
 800a918:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800a91a:	f000 f829 	bl	800a970 <HAL_RCC_GetSysClockFreq>
 800a91e:	0001      	movs	r1, r0
 800a920:	4b0d      	ldr	r3, [pc, #52]	; (800a958 <HAL_RCC_ClockConfig+0x1f8>)
 800a922:	689b      	ldr	r3, [r3, #8]
 800a924:	0a1b      	lsrs	r3, r3, #8
 800a926:	220f      	movs	r2, #15
 800a928:	401a      	ands	r2, r3
 800a92a:	4b0e      	ldr	r3, [pc, #56]	; (800a964 <HAL_RCC_ClockConfig+0x204>)
 800a92c:	0092      	lsls	r2, r2, #2
 800a92e:	58d3      	ldr	r3, [r2, r3]
 800a930:	221f      	movs	r2, #31
 800a932:	4013      	ands	r3, r2
 800a934:	000a      	movs	r2, r1
 800a936:	40da      	lsrs	r2, r3
 800a938:	4b0b      	ldr	r3, [pc, #44]	; (800a968 <HAL_RCC_ClockConfig+0x208>)
 800a93a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800a93c:	4b0b      	ldr	r3, [pc, #44]	; (800a96c <HAL_RCC_ClockConfig+0x20c>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	0018      	movs	r0, r3
 800a942:	f7fe ffc3 	bl	80098cc <HAL_InitTick>
 800a946:	0003      	movs	r3, r0
}
 800a948:	0018      	movs	r0, r3
 800a94a:	46bd      	mov	sp, r7
 800a94c:	b004      	add	sp, #16
 800a94e:	bd80      	pop	{r7, pc}
 800a950:	40022000 	.word	0x40022000
 800a954:	00001388 	.word	0x00001388
 800a958:	40021000 	.word	0x40021000
 800a95c:	fffff0ff 	.word	0xfffff0ff
 800a960:	ffff8fff 	.word	0xffff8fff
 800a964:	080135f0 	.word	0x080135f0
 800a968:	200000d8 	.word	0x200000d8
 800a96c:	200000dc 	.word	0x200000dc

0800a970 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b086      	sub	sp, #24
 800a974:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a976:	4b3c      	ldr	r3, [pc, #240]	; (800aa68 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a978:	689b      	ldr	r3, [r3, #8]
 800a97a:	2238      	movs	r2, #56	; 0x38
 800a97c:	4013      	ands	r3, r2
 800a97e:	d10f      	bne.n	800a9a0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800a980:	4b39      	ldr	r3, [pc, #228]	; (800aa68 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	0adb      	lsrs	r3, r3, #11
 800a986:	2207      	movs	r2, #7
 800a988:	4013      	ands	r3, r2
 800a98a:	2201      	movs	r2, #1
 800a98c:	409a      	lsls	r2, r3
 800a98e:	0013      	movs	r3, r2
 800a990:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800a992:	6839      	ldr	r1, [r7, #0]
 800a994:	4835      	ldr	r0, [pc, #212]	; (800aa6c <HAL_RCC_GetSysClockFreq+0xfc>)
 800a996:	f7f5 fbd9 	bl	800014c <__udivsi3>
 800a99a:	0003      	movs	r3, r0
 800a99c:	613b      	str	r3, [r7, #16]
 800a99e:	e05d      	b.n	800aa5c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a9a0:	4b31      	ldr	r3, [pc, #196]	; (800aa68 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a9a2:	689b      	ldr	r3, [r3, #8]
 800a9a4:	2238      	movs	r2, #56	; 0x38
 800a9a6:	4013      	ands	r3, r2
 800a9a8:	2b08      	cmp	r3, #8
 800a9aa:	d102      	bne.n	800a9b2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a9ac:	4b30      	ldr	r3, [pc, #192]	; (800aa70 <HAL_RCC_GetSysClockFreq+0x100>)
 800a9ae:	613b      	str	r3, [r7, #16]
 800a9b0:	e054      	b.n	800aa5c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a9b2:	4b2d      	ldr	r3, [pc, #180]	; (800aa68 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a9b4:	689b      	ldr	r3, [r3, #8]
 800a9b6:	2238      	movs	r2, #56	; 0x38
 800a9b8:	4013      	ands	r3, r2
 800a9ba:	2b10      	cmp	r3, #16
 800a9bc:	d138      	bne.n	800aa30 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800a9be:	4b2a      	ldr	r3, [pc, #168]	; (800aa68 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a9c0:	68db      	ldr	r3, [r3, #12]
 800a9c2:	2203      	movs	r2, #3
 800a9c4:	4013      	ands	r3, r2
 800a9c6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a9c8:	4b27      	ldr	r3, [pc, #156]	; (800aa68 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a9ca:	68db      	ldr	r3, [r3, #12]
 800a9cc:	091b      	lsrs	r3, r3, #4
 800a9ce:	2207      	movs	r2, #7
 800a9d0:	4013      	ands	r3, r2
 800a9d2:	3301      	adds	r3, #1
 800a9d4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	2b03      	cmp	r3, #3
 800a9da:	d10d      	bne.n	800a9f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a9dc:	68b9      	ldr	r1, [r7, #8]
 800a9de:	4824      	ldr	r0, [pc, #144]	; (800aa70 <HAL_RCC_GetSysClockFreq+0x100>)
 800a9e0:	f7f5 fbb4 	bl	800014c <__udivsi3>
 800a9e4:	0003      	movs	r3, r0
 800a9e6:	0019      	movs	r1, r3
 800a9e8:	4b1f      	ldr	r3, [pc, #124]	; (800aa68 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a9ea:	68db      	ldr	r3, [r3, #12]
 800a9ec:	0a1b      	lsrs	r3, r3, #8
 800a9ee:	227f      	movs	r2, #127	; 0x7f
 800a9f0:	4013      	ands	r3, r2
 800a9f2:	434b      	muls	r3, r1
 800a9f4:	617b      	str	r3, [r7, #20]
        break;
 800a9f6:	e00d      	b.n	800aa14 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800a9f8:	68b9      	ldr	r1, [r7, #8]
 800a9fa:	481c      	ldr	r0, [pc, #112]	; (800aa6c <HAL_RCC_GetSysClockFreq+0xfc>)
 800a9fc:	f7f5 fba6 	bl	800014c <__udivsi3>
 800aa00:	0003      	movs	r3, r0
 800aa02:	0019      	movs	r1, r3
 800aa04:	4b18      	ldr	r3, [pc, #96]	; (800aa68 <HAL_RCC_GetSysClockFreq+0xf8>)
 800aa06:	68db      	ldr	r3, [r3, #12]
 800aa08:	0a1b      	lsrs	r3, r3, #8
 800aa0a:	227f      	movs	r2, #127	; 0x7f
 800aa0c:	4013      	ands	r3, r2
 800aa0e:	434b      	muls	r3, r1
 800aa10:	617b      	str	r3, [r7, #20]
        break;
 800aa12:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800aa14:	4b14      	ldr	r3, [pc, #80]	; (800aa68 <HAL_RCC_GetSysClockFreq+0xf8>)
 800aa16:	68db      	ldr	r3, [r3, #12]
 800aa18:	0f5b      	lsrs	r3, r3, #29
 800aa1a:	2207      	movs	r2, #7
 800aa1c:	4013      	ands	r3, r2
 800aa1e:	3301      	adds	r3, #1
 800aa20:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800aa22:	6879      	ldr	r1, [r7, #4]
 800aa24:	6978      	ldr	r0, [r7, #20]
 800aa26:	f7f5 fb91 	bl	800014c <__udivsi3>
 800aa2a:	0003      	movs	r3, r0
 800aa2c:	613b      	str	r3, [r7, #16]
 800aa2e:	e015      	b.n	800aa5c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800aa30:	4b0d      	ldr	r3, [pc, #52]	; (800aa68 <HAL_RCC_GetSysClockFreq+0xf8>)
 800aa32:	689b      	ldr	r3, [r3, #8]
 800aa34:	2238      	movs	r2, #56	; 0x38
 800aa36:	4013      	ands	r3, r2
 800aa38:	2b20      	cmp	r3, #32
 800aa3a:	d103      	bne.n	800aa44 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800aa3c:	2380      	movs	r3, #128	; 0x80
 800aa3e:	021b      	lsls	r3, r3, #8
 800aa40:	613b      	str	r3, [r7, #16]
 800aa42:	e00b      	b.n	800aa5c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800aa44:	4b08      	ldr	r3, [pc, #32]	; (800aa68 <HAL_RCC_GetSysClockFreq+0xf8>)
 800aa46:	689b      	ldr	r3, [r3, #8]
 800aa48:	2238      	movs	r2, #56	; 0x38
 800aa4a:	4013      	ands	r3, r2
 800aa4c:	2b18      	cmp	r3, #24
 800aa4e:	d103      	bne.n	800aa58 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800aa50:	23fa      	movs	r3, #250	; 0xfa
 800aa52:	01db      	lsls	r3, r3, #7
 800aa54:	613b      	str	r3, [r7, #16]
 800aa56:	e001      	b.n	800aa5c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800aa5c:	693b      	ldr	r3, [r7, #16]
}
 800aa5e:	0018      	movs	r0, r3
 800aa60:	46bd      	mov	sp, r7
 800aa62:	b006      	add	sp, #24
 800aa64:	bd80      	pop	{r7, pc}
 800aa66:	46c0      	nop			; (mov r8, r8)
 800aa68:	40021000 	.word	0x40021000
 800aa6c:	00f42400 	.word	0x00f42400
 800aa70:	007a1200 	.word	0x007a1200

0800aa74 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800aa78:	4b02      	ldr	r3, [pc, #8]	; (800aa84 <HAL_RCC_GetHCLKFreq+0x10>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
}
 800aa7c:	0018      	movs	r0, r3
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}
 800aa82:	46c0      	nop			; (mov r8, r8)
 800aa84:	200000d8 	.word	0x200000d8

0800aa88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800aa88:	b5b0      	push	{r4, r5, r7, lr}
 800aa8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800aa8c:	f7ff fff2 	bl	800aa74 <HAL_RCC_GetHCLKFreq>
 800aa90:	0004      	movs	r4, r0
 800aa92:	f7ff fb49 	bl	800a128 <LL_RCC_GetAPB1Prescaler>
 800aa96:	0003      	movs	r3, r0
 800aa98:	0b1a      	lsrs	r2, r3, #12
 800aa9a:	4b05      	ldr	r3, [pc, #20]	; (800aab0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800aa9c:	0092      	lsls	r2, r2, #2
 800aa9e:	58d3      	ldr	r3, [r2, r3]
 800aaa0:	221f      	movs	r2, #31
 800aaa2:	4013      	ands	r3, r2
 800aaa4:	40dc      	lsrs	r4, r3
 800aaa6:	0023      	movs	r3, r4
}
 800aaa8:	0018      	movs	r0, r3
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bdb0      	pop	{r4, r5, r7, pc}
 800aaae:	46c0      	nop			; (mov r8, r8)
 800aab0:	08013630 	.word	0x08013630

0800aab4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b086      	sub	sp, #24
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800aabc:	2313      	movs	r3, #19
 800aabe:	18fb      	adds	r3, r7, r3
 800aac0:	2200      	movs	r2, #0
 800aac2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800aac4:	2312      	movs	r3, #18
 800aac6:	18fb      	adds	r3, r7, r3
 800aac8:	2200      	movs	r2, #0
 800aaca:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681a      	ldr	r2, [r3, #0]
 800aad0:	2380      	movs	r3, #128	; 0x80
 800aad2:	029b      	lsls	r3, r3, #10
 800aad4:	4013      	ands	r3, r2
 800aad6:	d100      	bne.n	800aada <HAL_RCCEx_PeriphCLKConfig+0x26>
 800aad8:	e0a3      	b.n	800ac22 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800aada:	2011      	movs	r0, #17
 800aadc:	183b      	adds	r3, r7, r0
 800aade:	2200      	movs	r2, #0
 800aae0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800aae2:	4b86      	ldr	r3, [pc, #536]	; (800acfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800aae4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aae6:	2380      	movs	r3, #128	; 0x80
 800aae8:	055b      	lsls	r3, r3, #21
 800aaea:	4013      	ands	r3, r2
 800aaec:	d110      	bne.n	800ab10 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aaee:	4b83      	ldr	r3, [pc, #524]	; (800acfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800aaf0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aaf2:	4b82      	ldr	r3, [pc, #520]	; (800acfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800aaf4:	2180      	movs	r1, #128	; 0x80
 800aaf6:	0549      	lsls	r1, r1, #21
 800aaf8:	430a      	orrs	r2, r1
 800aafa:	63da      	str	r2, [r3, #60]	; 0x3c
 800aafc:	4b7f      	ldr	r3, [pc, #508]	; (800acfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800aafe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ab00:	2380      	movs	r3, #128	; 0x80
 800ab02:	055b      	lsls	r3, r3, #21
 800ab04:	4013      	ands	r3, r2
 800ab06:	60bb      	str	r3, [r7, #8]
 800ab08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ab0a:	183b      	adds	r3, r7, r0
 800ab0c:	2201      	movs	r2, #1
 800ab0e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ab10:	4b7b      	ldr	r3, [pc, #492]	; (800ad00 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800ab12:	681a      	ldr	r2, [r3, #0]
 800ab14:	4b7a      	ldr	r3, [pc, #488]	; (800ad00 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800ab16:	2180      	movs	r1, #128	; 0x80
 800ab18:	0049      	lsls	r1, r1, #1
 800ab1a:	430a      	orrs	r2, r1
 800ab1c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ab1e:	f7fe ff31 	bl	8009984 <HAL_GetTick>
 800ab22:	0003      	movs	r3, r0
 800ab24:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ab26:	e00b      	b.n	800ab40 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ab28:	f7fe ff2c 	bl	8009984 <HAL_GetTick>
 800ab2c:	0002      	movs	r2, r0
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	1ad3      	subs	r3, r2, r3
 800ab32:	2b02      	cmp	r3, #2
 800ab34:	d904      	bls.n	800ab40 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800ab36:	2313      	movs	r3, #19
 800ab38:	18fb      	adds	r3, r7, r3
 800ab3a:	2203      	movs	r2, #3
 800ab3c:	701a      	strb	r2, [r3, #0]
        break;
 800ab3e:	e005      	b.n	800ab4c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ab40:	4b6f      	ldr	r3, [pc, #444]	; (800ad00 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800ab42:	681a      	ldr	r2, [r3, #0]
 800ab44:	2380      	movs	r3, #128	; 0x80
 800ab46:	005b      	lsls	r3, r3, #1
 800ab48:	4013      	ands	r3, r2
 800ab4a:	d0ed      	beq.n	800ab28 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800ab4c:	2313      	movs	r3, #19
 800ab4e:	18fb      	adds	r3, r7, r3
 800ab50:	781b      	ldrb	r3, [r3, #0]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d154      	bne.n	800ac00 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800ab56:	4b69      	ldr	r3, [pc, #420]	; (800acfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800ab58:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ab5a:	23c0      	movs	r3, #192	; 0xc0
 800ab5c:	009b      	lsls	r3, r3, #2
 800ab5e:	4013      	ands	r3, r2
 800ab60:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d019      	beq.n	800ab9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	699b      	ldr	r3, [r3, #24]
 800ab6c:	697a      	ldr	r2, [r7, #20]
 800ab6e:	429a      	cmp	r2, r3
 800ab70:	d014      	beq.n	800ab9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800ab72:	4b62      	ldr	r3, [pc, #392]	; (800acfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800ab74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab76:	4a63      	ldr	r2, [pc, #396]	; (800ad04 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800ab78:	4013      	ands	r3, r2
 800ab7a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ab7c:	4b5f      	ldr	r3, [pc, #380]	; (800acfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800ab7e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ab80:	4b5e      	ldr	r3, [pc, #376]	; (800acfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800ab82:	2180      	movs	r1, #128	; 0x80
 800ab84:	0249      	lsls	r1, r1, #9
 800ab86:	430a      	orrs	r2, r1
 800ab88:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ab8a:	4b5c      	ldr	r3, [pc, #368]	; (800acfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800ab8c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ab8e:	4b5b      	ldr	r3, [pc, #364]	; (800acfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800ab90:	495d      	ldr	r1, [pc, #372]	; (800ad08 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800ab92:	400a      	ands	r2, r1
 800ab94:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800ab96:	4b59      	ldr	r3, [pc, #356]	; (800acfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800ab98:	697a      	ldr	r2, [r7, #20]
 800ab9a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800ab9c:	697b      	ldr	r3, [r7, #20]
 800ab9e:	2201      	movs	r2, #1
 800aba0:	4013      	ands	r3, r2
 800aba2:	d016      	beq.n	800abd2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aba4:	f7fe feee 	bl	8009984 <HAL_GetTick>
 800aba8:	0003      	movs	r3, r0
 800abaa:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800abac:	e00c      	b.n	800abc8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800abae:	f7fe fee9 	bl	8009984 <HAL_GetTick>
 800abb2:	0002      	movs	r2, r0
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	1ad3      	subs	r3, r2, r3
 800abb8:	4a54      	ldr	r2, [pc, #336]	; (800ad0c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800abba:	4293      	cmp	r3, r2
 800abbc:	d904      	bls.n	800abc8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800abbe:	2313      	movs	r3, #19
 800abc0:	18fb      	adds	r3, r7, r3
 800abc2:	2203      	movs	r2, #3
 800abc4:	701a      	strb	r2, [r3, #0]
            break;
 800abc6:	e004      	b.n	800abd2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800abc8:	4b4c      	ldr	r3, [pc, #304]	; (800acfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800abca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abcc:	2202      	movs	r2, #2
 800abce:	4013      	ands	r3, r2
 800abd0:	d0ed      	beq.n	800abae <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800abd2:	2313      	movs	r3, #19
 800abd4:	18fb      	adds	r3, r7, r3
 800abd6:	781b      	ldrb	r3, [r3, #0]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d10a      	bne.n	800abf2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800abdc:	4b47      	ldr	r3, [pc, #284]	; (800acfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800abde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abe0:	4a48      	ldr	r2, [pc, #288]	; (800ad04 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800abe2:	4013      	ands	r3, r2
 800abe4:	0019      	movs	r1, r3
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	699a      	ldr	r2, [r3, #24]
 800abea:	4b44      	ldr	r3, [pc, #272]	; (800acfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800abec:	430a      	orrs	r2, r1
 800abee:	65da      	str	r2, [r3, #92]	; 0x5c
 800abf0:	e00c      	b.n	800ac0c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800abf2:	2312      	movs	r3, #18
 800abf4:	18fb      	adds	r3, r7, r3
 800abf6:	2213      	movs	r2, #19
 800abf8:	18ba      	adds	r2, r7, r2
 800abfa:	7812      	ldrb	r2, [r2, #0]
 800abfc:	701a      	strb	r2, [r3, #0]
 800abfe:	e005      	b.n	800ac0c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac00:	2312      	movs	r3, #18
 800ac02:	18fb      	adds	r3, r7, r3
 800ac04:	2213      	movs	r2, #19
 800ac06:	18ba      	adds	r2, r7, r2
 800ac08:	7812      	ldrb	r2, [r2, #0]
 800ac0a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800ac0c:	2311      	movs	r3, #17
 800ac0e:	18fb      	adds	r3, r7, r3
 800ac10:	781b      	ldrb	r3, [r3, #0]
 800ac12:	2b01      	cmp	r3, #1
 800ac14:	d105      	bne.n	800ac22 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ac16:	4b39      	ldr	r3, [pc, #228]	; (800acfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800ac18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac1a:	4b38      	ldr	r3, [pc, #224]	; (800acfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800ac1c:	493c      	ldr	r1, [pc, #240]	; (800ad10 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800ac1e:	400a      	ands	r2, r1
 800ac20:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	2201      	movs	r2, #1
 800ac28:	4013      	ands	r3, r2
 800ac2a:	d009      	beq.n	800ac40 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ac2c:	4b33      	ldr	r3, [pc, #204]	; (800acfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800ac2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac30:	2203      	movs	r2, #3
 800ac32:	4393      	bics	r3, r2
 800ac34:	0019      	movs	r1, r3
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	685a      	ldr	r2, [r3, #4]
 800ac3a:	4b30      	ldr	r3, [pc, #192]	; (800acfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800ac3c:	430a      	orrs	r2, r1
 800ac3e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	2202      	movs	r2, #2
 800ac46:	4013      	ands	r3, r2
 800ac48:	d009      	beq.n	800ac5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ac4a:	4b2c      	ldr	r3, [pc, #176]	; (800acfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800ac4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac4e:	220c      	movs	r2, #12
 800ac50:	4393      	bics	r3, r2
 800ac52:	0019      	movs	r1, r3
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	689a      	ldr	r2, [r3, #8]
 800ac58:	4b28      	ldr	r3, [pc, #160]	; (800acfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800ac5a:	430a      	orrs	r2, r1
 800ac5c:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	2220      	movs	r2, #32
 800ac64:	4013      	ands	r3, r2
 800ac66:	d009      	beq.n	800ac7c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ac68:	4b24      	ldr	r3, [pc, #144]	; (800acfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800ac6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac6c:	4a29      	ldr	r2, [pc, #164]	; (800ad14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ac6e:	4013      	ands	r3, r2
 800ac70:	0019      	movs	r1, r3
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	68da      	ldr	r2, [r3, #12]
 800ac76:	4b21      	ldr	r3, [pc, #132]	; (800acfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800ac78:	430a      	orrs	r2, r1
 800ac7a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681a      	ldr	r2, [r3, #0]
 800ac80:	2380      	movs	r3, #128	; 0x80
 800ac82:	01db      	lsls	r3, r3, #7
 800ac84:	4013      	ands	r3, r2
 800ac86:	d015      	beq.n	800acb4 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ac88:	4b1c      	ldr	r3, [pc, #112]	; (800acfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800ac8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac8c:	009b      	lsls	r3, r3, #2
 800ac8e:	0899      	lsrs	r1, r3, #2
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	695a      	ldr	r2, [r3, #20]
 800ac94:	4b19      	ldr	r3, [pc, #100]	; (800acfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800ac96:	430a      	orrs	r2, r1
 800ac98:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	695a      	ldr	r2, [r3, #20]
 800ac9e:	2380      	movs	r3, #128	; 0x80
 800aca0:	05db      	lsls	r3, r3, #23
 800aca2:	429a      	cmp	r2, r3
 800aca4:	d106      	bne.n	800acb4 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800aca6:	4b15      	ldr	r3, [pc, #84]	; (800acfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800aca8:	68da      	ldr	r2, [r3, #12]
 800acaa:	4b14      	ldr	r3, [pc, #80]	; (800acfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800acac:	2180      	movs	r1, #128	; 0x80
 800acae:	0249      	lsls	r1, r1, #9
 800acb0:	430a      	orrs	r2, r1
 800acb2:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681a      	ldr	r2, [r3, #0]
 800acb8:	2380      	movs	r3, #128	; 0x80
 800acba:	011b      	lsls	r3, r3, #4
 800acbc:	4013      	ands	r3, r2
 800acbe:	d016      	beq.n	800acee <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800acc0:	4b0e      	ldr	r3, [pc, #56]	; (800acfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800acc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acc4:	4a14      	ldr	r2, [pc, #80]	; (800ad18 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800acc6:	4013      	ands	r3, r2
 800acc8:	0019      	movs	r1, r3
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	691a      	ldr	r2, [r3, #16]
 800acce:	4b0b      	ldr	r3, [pc, #44]	; (800acfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800acd0:	430a      	orrs	r2, r1
 800acd2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	691a      	ldr	r2, [r3, #16]
 800acd8:	2380      	movs	r3, #128	; 0x80
 800acda:	01db      	lsls	r3, r3, #7
 800acdc:	429a      	cmp	r2, r3
 800acde:	d106      	bne.n	800acee <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800ace0:	4b06      	ldr	r3, [pc, #24]	; (800acfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800ace2:	68da      	ldr	r2, [r3, #12]
 800ace4:	4b05      	ldr	r3, [pc, #20]	; (800acfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800ace6:	2180      	movs	r1, #128	; 0x80
 800ace8:	0249      	lsls	r1, r1, #9
 800acea:	430a      	orrs	r2, r1
 800acec:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800acee:	2312      	movs	r3, #18
 800acf0:	18fb      	adds	r3, r7, r3
 800acf2:	781b      	ldrb	r3, [r3, #0]
}
 800acf4:	0018      	movs	r0, r3
 800acf6:	46bd      	mov	sp, r7
 800acf8:	b006      	add	sp, #24
 800acfa:	bd80      	pop	{r7, pc}
 800acfc:	40021000 	.word	0x40021000
 800ad00:	40007000 	.word	0x40007000
 800ad04:	fffffcff 	.word	0xfffffcff
 800ad08:	fffeffff 	.word	0xfffeffff
 800ad0c:	00001388 	.word	0x00001388
 800ad10:	efffffff 	.word	0xefffffff
 800ad14:	ffffcfff 	.word	0xffffcfff
 800ad18:	ffff3fff 	.word	0xffff3fff

0800ad1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b084      	sub	sp, #16
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d101      	bne.n	800ad2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	e0a8      	b.n	800ae80 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d109      	bne.n	800ad4a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	685a      	ldr	r2, [r3, #4]
 800ad3a:	2382      	movs	r3, #130	; 0x82
 800ad3c:	005b      	lsls	r3, r3, #1
 800ad3e:	429a      	cmp	r2, r3
 800ad40:	d009      	beq.n	800ad56 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2200      	movs	r2, #0
 800ad46:	61da      	str	r2, [r3, #28]
 800ad48:	e005      	b.n	800ad56 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2200      	movs	r2, #0
 800ad54:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	225d      	movs	r2, #93	; 0x5d
 800ad60:	5c9b      	ldrb	r3, [r3, r2]
 800ad62:	b2db      	uxtb	r3, r3
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d107      	bne.n	800ad78 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	225c      	movs	r2, #92	; 0x5c
 800ad6c:	2100      	movs	r1, #0
 800ad6e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	0018      	movs	r0, r3
 800ad74:	f7fd fcbc 	bl	80086f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	225d      	movs	r2, #93	; 0x5d
 800ad7c:	2102      	movs	r1, #2
 800ad7e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	681a      	ldr	r2, [r3, #0]
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	2140      	movs	r1, #64	; 0x40
 800ad8c:	438a      	bics	r2, r1
 800ad8e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	68da      	ldr	r2, [r3, #12]
 800ad94:	23e0      	movs	r3, #224	; 0xe0
 800ad96:	00db      	lsls	r3, r3, #3
 800ad98:	429a      	cmp	r2, r3
 800ad9a:	d902      	bls.n	800ada2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	60fb      	str	r3, [r7, #12]
 800ada0:	e002      	b.n	800ada8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800ada2:	2380      	movs	r3, #128	; 0x80
 800ada4:	015b      	lsls	r3, r3, #5
 800ada6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	68da      	ldr	r2, [r3, #12]
 800adac:	23f0      	movs	r3, #240	; 0xf0
 800adae:	011b      	lsls	r3, r3, #4
 800adb0:	429a      	cmp	r2, r3
 800adb2:	d008      	beq.n	800adc6 <HAL_SPI_Init+0xaa>
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	68da      	ldr	r2, [r3, #12]
 800adb8:	23e0      	movs	r3, #224	; 0xe0
 800adba:	00db      	lsls	r3, r3, #3
 800adbc:	429a      	cmp	r2, r3
 800adbe:	d002      	beq.n	800adc6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2200      	movs	r2, #0
 800adc4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	685a      	ldr	r2, [r3, #4]
 800adca:	2382      	movs	r3, #130	; 0x82
 800adcc:	005b      	lsls	r3, r3, #1
 800adce:	401a      	ands	r2, r3
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6899      	ldr	r1, [r3, #8]
 800add4:	2384      	movs	r3, #132	; 0x84
 800add6:	021b      	lsls	r3, r3, #8
 800add8:	400b      	ands	r3, r1
 800adda:	431a      	orrs	r2, r3
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	691b      	ldr	r3, [r3, #16]
 800ade0:	2102      	movs	r1, #2
 800ade2:	400b      	ands	r3, r1
 800ade4:	431a      	orrs	r2, r3
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	695b      	ldr	r3, [r3, #20]
 800adea:	2101      	movs	r1, #1
 800adec:	400b      	ands	r3, r1
 800adee:	431a      	orrs	r2, r3
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6999      	ldr	r1, [r3, #24]
 800adf4:	2380      	movs	r3, #128	; 0x80
 800adf6:	009b      	lsls	r3, r3, #2
 800adf8:	400b      	ands	r3, r1
 800adfa:	431a      	orrs	r2, r3
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	69db      	ldr	r3, [r3, #28]
 800ae00:	2138      	movs	r1, #56	; 0x38
 800ae02:	400b      	ands	r3, r1
 800ae04:	431a      	orrs	r2, r3
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6a1b      	ldr	r3, [r3, #32]
 800ae0a:	2180      	movs	r1, #128	; 0x80
 800ae0c:	400b      	ands	r3, r1
 800ae0e:	431a      	orrs	r2, r3
 800ae10:	0011      	movs	r1, r2
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ae16:	2380      	movs	r3, #128	; 0x80
 800ae18:	019b      	lsls	r3, r3, #6
 800ae1a:	401a      	ands	r2, r3
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	430a      	orrs	r2, r1
 800ae22:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	699b      	ldr	r3, [r3, #24]
 800ae28:	0c1b      	lsrs	r3, r3, #16
 800ae2a:	2204      	movs	r2, #4
 800ae2c:	401a      	ands	r2, r3
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae32:	2110      	movs	r1, #16
 800ae34:	400b      	ands	r3, r1
 800ae36:	431a      	orrs	r2, r3
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae3c:	2108      	movs	r1, #8
 800ae3e:	400b      	ands	r3, r1
 800ae40:	431a      	orrs	r2, r3
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	68d9      	ldr	r1, [r3, #12]
 800ae46:	23f0      	movs	r3, #240	; 0xf0
 800ae48:	011b      	lsls	r3, r3, #4
 800ae4a:	400b      	ands	r3, r1
 800ae4c:	431a      	orrs	r2, r3
 800ae4e:	0011      	movs	r1, r2
 800ae50:	68fa      	ldr	r2, [r7, #12]
 800ae52:	2380      	movs	r3, #128	; 0x80
 800ae54:	015b      	lsls	r3, r3, #5
 800ae56:	401a      	ands	r2, r3
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	430a      	orrs	r2, r1
 800ae5e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	69da      	ldr	r2, [r3, #28]
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	4907      	ldr	r1, [pc, #28]	; (800ae88 <HAL_SPI_Init+0x16c>)
 800ae6c:	400a      	ands	r2, r1
 800ae6e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2200      	movs	r2, #0
 800ae74:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	225d      	movs	r2, #93	; 0x5d
 800ae7a:	2101      	movs	r1, #1
 800ae7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ae7e:	2300      	movs	r3, #0
}
 800ae80:	0018      	movs	r0, r3
 800ae82:	46bd      	mov	sp, r7
 800ae84:	b004      	add	sp, #16
 800ae86:	bd80      	pop	{r7, pc}
 800ae88:	fffff7ff 	.word	0xfffff7ff

0800ae8c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b088      	sub	sp, #32
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	60f8      	str	r0, [r7, #12]
 800ae94:	60b9      	str	r1, [r7, #8]
 800ae96:	603b      	str	r3, [r7, #0]
 800ae98:	1dbb      	adds	r3, r7, #6
 800ae9a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ae9c:	231f      	movs	r3, #31
 800ae9e:	18fb      	adds	r3, r7, r3
 800aea0:	2200      	movs	r2, #0
 800aea2:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	225c      	movs	r2, #92	; 0x5c
 800aea8:	5c9b      	ldrb	r3, [r3, r2]
 800aeaa:	2b01      	cmp	r3, #1
 800aeac:	d101      	bne.n	800aeb2 <HAL_SPI_Transmit+0x26>
 800aeae:	2302      	movs	r3, #2
 800aeb0:	e140      	b.n	800b134 <HAL_SPI_Transmit+0x2a8>
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	225c      	movs	r2, #92	; 0x5c
 800aeb6:	2101      	movs	r1, #1
 800aeb8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800aeba:	f7fe fd63 	bl	8009984 <HAL_GetTick>
 800aebe:	0003      	movs	r3, r0
 800aec0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800aec2:	2316      	movs	r3, #22
 800aec4:	18fb      	adds	r3, r7, r3
 800aec6:	1dba      	adds	r2, r7, #6
 800aec8:	8812      	ldrh	r2, [r2, #0]
 800aeca:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	225d      	movs	r2, #93	; 0x5d
 800aed0:	5c9b      	ldrb	r3, [r3, r2]
 800aed2:	b2db      	uxtb	r3, r3
 800aed4:	2b01      	cmp	r3, #1
 800aed6:	d004      	beq.n	800aee2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800aed8:	231f      	movs	r3, #31
 800aeda:	18fb      	adds	r3, r7, r3
 800aedc:	2202      	movs	r2, #2
 800aede:	701a      	strb	r2, [r3, #0]
    goto error;
 800aee0:	e11d      	b.n	800b11e <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800aee2:	68bb      	ldr	r3, [r7, #8]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d003      	beq.n	800aef0 <HAL_SPI_Transmit+0x64>
 800aee8:	1dbb      	adds	r3, r7, #6
 800aeea:	881b      	ldrh	r3, [r3, #0]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d104      	bne.n	800aefa <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800aef0:	231f      	movs	r3, #31
 800aef2:	18fb      	adds	r3, r7, r3
 800aef4:	2201      	movs	r2, #1
 800aef6:	701a      	strb	r2, [r3, #0]
    goto error;
 800aef8:	e111      	b.n	800b11e <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	225d      	movs	r2, #93	; 0x5d
 800aefe:	2103      	movs	r1, #3
 800af00:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	2200      	movs	r2, #0
 800af06:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	68ba      	ldr	r2, [r7, #8]
 800af0c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	1dba      	adds	r2, r7, #6
 800af12:	8812      	ldrh	r2, [r2, #0]
 800af14:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	1dba      	adds	r2, r7, #6
 800af1a:	8812      	ldrh	r2, [r2, #0]
 800af1c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	2200      	movs	r2, #0
 800af22:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	2244      	movs	r2, #68	; 0x44
 800af28:	2100      	movs	r1, #0
 800af2a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	2246      	movs	r2, #70	; 0x46
 800af30:	2100      	movs	r1, #0
 800af32:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	2200      	movs	r2, #0
 800af38:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	2200      	movs	r2, #0
 800af3e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	689a      	ldr	r2, [r3, #8]
 800af44:	2380      	movs	r3, #128	; 0x80
 800af46:	021b      	lsls	r3, r3, #8
 800af48:	429a      	cmp	r2, r3
 800af4a:	d110      	bne.n	800af6e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	681a      	ldr	r2, [r3, #0]
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	2140      	movs	r1, #64	; 0x40
 800af58:	438a      	bics	r2, r1
 800af5a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	681a      	ldr	r2, [r3, #0]
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	2180      	movs	r1, #128	; 0x80
 800af68:	01c9      	lsls	r1, r1, #7
 800af6a:	430a      	orrs	r2, r1
 800af6c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	2240      	movs	r2, #64	; 0x40
 800af76:	4013      	ands	r3, r2
 800af78:	2b40      	cmp	r3, #64	; 0x40
 800af7a:	d007      	beq.n	800af8c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	681a      	ldr	r2, [r3, #0]
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	2140      	movs	r1, #64	; 0x40
 800af88:	430a      	orrs	r2, r1
 800af8a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	68da      	ldr	r2, [r3, #12]
 800af90:	23e0      	movs	r3, #224	; 0xe0
 800af92:	00db      	lsls	r3, r3, #3
 800af94:	429a      	cmp	r2, r3
 800af96:	d94e      	bls.n	800b036 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	685b      	ldr	r3, [r3, #4]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d004      	beq.n	800afaa <HAL_SPI_Transmit+0x11e>
 800afa0:	2316      	movs	r3, #22
 800afa2:	18fb      	adds	r3, r7, r3
 800afa4:	881b      	ldrh	r3, [r3, #0]
 800afa6:	2b01      	cmp	r3, #1
 800afa8:	d13f      	bne.n	800b02a <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afae:	881a      	ldrh	r2, [r3, #0]
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afba:	1c9a      	adds	r2, r3, #2
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800afc4:	b29b      	uxth	r3, r3
 800afc6:	3b01      	subs	r3, #1
 800afc8:	b29a      	uxth	r2, r3
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800afce:	e02c      	b.n	800b02a <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	689b      	ldr	r3, [r3, #8]
 800afd6:	2202      	movs	r2, #2
 800afd8:	4013      	ands	r3, r2
 800afda:	2b02      	cmp	r3, #2
 800afdc:	d112      	bne.n	800b004 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afe2:	881a      	ldrh	r2, [r3, #0]
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afee:	1c9a      	adds	r2, r3, #2
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aff8:	b29b      	uxth	r3, r3
 800affa:	3b01      	subs	r3, #1
 800affc:	b29a      	uxth	r2, r3
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b002:	e012      	b.n	800b02a <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b004:	f7fe fcbe 	bl	8009984 <HAL_GetTick>
 800b008:	0002      	movs	r2, r0
 800b00a:	69bb      	ldr	r3, [r7, #24]
 800b00c:	1ad3      	subs	r3, r2, r3
 800b00e:	683a      	ldr	r2, [r7, #0]
 800b010:	429a      	cmp	r2, r3
 800b012:	d802      	bhi.n	800b01a <HAL_SPI_Transmit+0x18e>
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	3301      	adds	r3, #1
 800b018:	d102      	bne.n	800b020 <HAL_SPI_Transmit+0x194>
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d104      	bne.n	800b02a <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 800b020:	231f      	movs	r3, #31
 800b022:	18fb      	adds	r3, r7, r3
 800b024:	2203      	movs	r2, #3
 800b026:	701a      	strb	r2, [r3, #0]
          goto error;
 800b028:	e079      	b.n	800b11e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b02e:	b29b      	uxth	r3, r3
 800b030:	2b00      	cmp	r3, #0
 800b032:	d1cd      	bne.n	800afd0 <HAL_SPI_Transmit+0x144>
 800b034:	e04f      	b.n	800b0d6 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	685b      	ldr	r3, [r3, #4]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d004      	beq.n	800b048 <HAL_SPI_Transmit+0x1bc>
 800b03e:	2316      	movs	r3, #22
 800b040:	18fb      	adds	r3, r7, r3
 800b042:	881b      	ldrh	r3, [r3, #0]
 800b044:	2b01      	cmp	r3, #1
 800b046:	d141      	bne.n	800b0cc <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	330c      	adds	r3, #12
 800b052:	7812      	ldrb	r2, [r2, #0]
 800b054:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b05a:	1c5a      	adds	r2, r3, #1
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b064:	b29b      	uxth	r3, r3
 800b066:	3b01      	subs	r3, #1
 800b068:	b29a      	uxth	r2, r3
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800b06e:	e02d      	b.n	800b0cc <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	689b      	ldr	r3, [r3, #8]
 800b076:	2202      	movs	r2, #2
 800b078:	4013      	ands	r3, r2
 800b07a:	2b02      	cmp	r3, #2
 800b07c:	d113      	bne.n	800b0a6 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	330c      	adds	r3, #12
 800b088:	7812      	ldrb	r2, [r2, #0]
 800b08a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b090:	1c5a      	adds	r2, r3, #1
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b09a:	b29b      	uxth	r3, r3
 800b09c:	3b01      	subs	r3, #1
 800b09e:	b29a      	uxth	r2, r3
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b0a4:	e012      	b.n	800b0cc <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b0a6:	f7fe fc6d 	bl	8009984 <HAL_GetTick>
 800b0aa:	0002      	movs	r2, r0
 800b0ac:	69bb      	ldr	r3, [r7, #24]
 800b0ae:	1ad3      	subs	r3, r2, r3
 800b0b0:	683a      	ldr	r2, [r7, #0]
 800b0b2:	429a      	cmp	r2, r3
 800b0b4:	d802      	bhi.n	800b0bc <HAL_SPI_Transmit+0x230>
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	3301      	adds	r3, #1
 800b0ba:	d102      	bne.n	800b0c2 <HAL_SPI_Transmit+0x236>
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d104      	bne.n	800b0cc <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800b0c2:	231f      	movs	r3, #31
 800b0c4:	18fb      	adds	r3, r7, r3
 800b0c6:	2203      	movs	r2, #3
 800b0c8:	701a      	strb	r2, [r3, #0]
          goto error;
 800b0ca:	e028      	b.n	800b11e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b0d0:	b29b      	uxth	r3, r3
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d1cc      	bne.n	800b070 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b0d6:	69ba      	ldr	r2, [r7, #24]
 800b0d8:	6839      	ldr	r1, [r7, #0]
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	0018      	movs	r0, r3
 800b0de:	f000 fdf5 	bl	800bccc <SPI_EndRxTxTransaction>
 800b0e2:	1e03      	subs	r3, r0, #0
 800b0e4:	d002      	beq.n	800b0ec <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	2220      	movs	r2, #32
 800b0ea:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	689b      	ldr	r3, [r3, #8]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d10a      	bne.n	800b10a <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	613b      	str	r3, [r7, #16]
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	68db      	ldr	r3, [r3, #12]
 800b0fe:	613b      	str	r3, [r7, #16]
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	689b      	ldr	r3, [r3, #8]
 800b106:	613b      	str	r3, [r7, #16]
 800b108:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d004      	beq.n	800b11c <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800b112:	231f      	movs	r3, #31
 800b114:	18fb      	adds	r3, r7, r3
 800b116:	2201      	movs	r2, #1
 800b118:	701a      	strb	r2, [r3, #0]
 800b11a:	e000      	b.n	800b11e <HAL_SPI_Transmit+0x292>
  }

error:
 800b11c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	225d      	movs	r2, #93	; 0x5d
 800b122:	2101      	movs	r1, #1
 800b124:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	225c      	movs	r2, #92	; 0x5c
 800b12a:	2100      	movs	r1, #0
 800b12c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800b12e:	231f      	movs	r3, #31
 800b130:	18fb      	adds	r3, r7, r3
 800b132:	781b      	ldrb	r3, [r3, #0]
}
 800b134:	0018      	movs	r0, r3
 800b136:	46bd      	mov	sp, r7
 800b138:	b008      	add	sp, #32
 800b13a:	bd80      	pop	{r7, pc}

0800b13c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b13c:	b590      	push	{r4, r7, lr}
 800b13e:	b089      	sub	sp, #36	; 0x24
 800b140:	af02      	add	r7, sp, #8
 800b142:	60f8      	str	r0, [r7, #12]
 800b144:	60b9      	str	r1, [r7, #8]
 800b146:	603b      	str	r3, [r7, #0]
 800b148:	1dbb      	adds	r3, r7, #6
 800b14a:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b14c:	2317      	movs	r3, #23
 800b14e:	18fb      	adds	r3, r7, r3
 800b150:	2200      	movs	r2, #0
 800b152:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	685a      	ldr	r2, [r3, #4]
 800b158:	2382      	movs	r3, #130	; 0x82
 800b15a:	005b      	lsls	r3, r3, #1
 800b15c:	429a      	cmp	r2, r3
 800b15e:	d113      	bne.n	800b188 <HAL_SPI_Receive+0x4c>
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	689b      	ldr	r3, [r3, #8]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d10f      	bne.n	800b188 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	225d      	movs	r2, #93	; 0x5d
 800b16c:	2104      	movs	r1, #4
 800b16e:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b170:	1dbb      	adds	r3, r7, #6
 800b172:	881c      	ldrh	r4, [r3, #0]
 800b174:	68ba      	ldr	r2, [r7, #8]
 800b176:	68b9      	ldr	r1, [r7, #8]
 800b178:	68f8      	ldr	r0, [r7, #12]
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	9300      	str	r3, [sp, #0]
 800b17e:	0023      	movs	r3, r4
 800b180:	f000 f928 	bl	800b3d4 <HAL_SPI_TransmitReceive>
 800b184:	0003      	movs	r3, r0
 800b186:	e11c      	b.n	800b3c2 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	225c      	movs	r2, #92	; 0x5c
 800b18c:	5c9b      	ldrb	r3, [r3, r2]
 800b18e:	2b01      	cmp	r3, #1
 800b190:	d101      	bne.n	800b196 <HAL_SPI_Receive+0x5a>
 800b192:	2302      	movs	r3, #2
 800b194:	e115      	b.n	800b3c2 <HAL_SPI_Receive+0x286>
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	225c      	movs	r2, #92	; 0x5c
 800b19a:	2101      	movs	r1, #1
 800b19c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b19e:	f7fe fbf1 	bl	8009984 <HAL_GetTick>
 800b1a2:	0003      	movs	r3, r0
 800b1a4:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	225d      	movs	r2, #93	; 0x5d
 800b1aa:	5c9b      	ldrb	r3, [r3, r2]
 800b1ac:	b2db      	uxtb	r3, r3
 800b1ae:	2b01      	cmp	r3, #1
 800b1b0:	d004      	beq.n	800b1bc <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 800b1b2:	2317      	movs	r3, #23
 800b1b4:	18fb      	adds	r3, r7, r3
 800b1b6:	2202      	movs	r2, #2
 800b1b8:	701a      	strb	r2, [r3, #0]
    goto error;
 800b1ba:	e0f7      	b.n	800b3ac <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d003      	beq.n	800b1ca <HAL_SPI_Receive+0x8e>
 800b1c2:	1dbb      	adds	r3, r7, #6
 800b1c4:	881b      	ldrh	r3, [r3, #0]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d104      	bne.n	800b1d4 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 800b1ca:	2317      	movs	r3, #23
 800b1cc:	18fb      	adds	r3, r7, r3
 800b1ce:	2201      	movs	r2, #1
 800b1d0:	701a      	strb	r2, [r3, #0]
    goto error;
 800b1d2:	e0eb      	b.n	800b3ac <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	225d      	movs	r2, #93	; 0x5d
 800b1d8:	2104      	movs	r1, #4
 800b1da:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	2200      	movs	r2, #0
 800b1e0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	68ba      	ldr	r2, [r7, #8]
 800b1e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	1dba      	adds	r2, r7, #6
 800b1ec:	2144      	movs	r1, #68	; 0x44
 800b1ee:	8812      	ldrh	r2, [r2, #0]
 800b1f0:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	1dba      	adds	r2, r7, #6
 800b1f6:	2146      	movs	r1, #70	; 0x46
 800b1f8:	8812      	ldrh	r2, [r2, #0]
 800b1fa:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	2200      	movs	r2, #0
 800b200:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	2200      	movs	r2, #0
 800b206:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	2200      	movs	r2, #0
 800b20c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	2200      	movs	r2, #0
 800b212:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	2200      	movs	r2, #0
 800b218:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	68da      	ldr	r2, [r3, #12]
 800b21e:	23e0      	movs	r3, #224	; 0xe0
 800b220:	00db      	lsls	r3, r3, #3
 800b222:	429a      	cmp	r2, r3
 800b224:	d908      	bls.n	800b238 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	685a      	ldr	r2, [r3, #4]
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	4966      	ldr	r1, [pc, #408]	; (800b3cc <HAL_SPI_Receive+0x290>)
 800b232:	400a      	ands	r2, r1
 800b234:	605a      	str	r2, [r3, #4]
 800b236:	e008      	b.n	800b24a <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	685a      	ldr	r2, [r3, #4]
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	2180      	movs	r1, #128	; 0x80
 800b244:	0149      	lsls	r1, r1, #5
 800b246:	430a      	orrs	r2, r1
 800b248:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	689a      	ldr	r2, [r3, #8]
 800b24e:	2380      	movs	r3, #128	; 0x80
 800b250:	021b      	lsls	r3, r3, #8
 800b252:	429a      	cmp	r2, r3
 800b254:	d10f      	bne.n	800b276 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	681a      	ldr	r2, [r3, #0]
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	2140      	movs	r1, #64	; 0x40
 800b262:	438a      	bics	r2, r1
 800b264:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	681a      	ldr	r2, [r3, #0]
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	4957      	ldr	r1, [pc, #348]	; (800b3d0 <HAL_SPI_Receive+0x294>)
 800b272:	400a      	ands	r2, r1
 800b274:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	2240      	movs	r2, #64	; 0x40
 800b27e:	4013      	ands	r3, r2
 800b280:	2b40      	cmp	r3, #64	; 0x40
 800b282:	d007      	beq.n	800b294 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	681a      	ldr	r2, [r3, #0]
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	2140      	movs	r1, #64	; 0x40
 800b290:	430a      	orrs	r2, r1
 800b292:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	68da      	ldr	r2, [r3, #12]
 800b298:	23e0      	movs	r3, #224	; 0xe0
 800b29a:	00db      	lsls	r3, r3, #3
 800b29c:	429a      	cmp	r2, r3
 800b29e:	d900      	bls.n	800b2a2 <HAL_SPI_Receive+0x166>
 800b2a0:	e069      	b.n	800b376 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b2a2:	e031      	b.n	800b308 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	689b      	ldr	r3, [r3, #8]
 800b2aa:	2201      	movs	r2, #1
 800b2ac:	4013      	ands	r3, r2
 800b2ae:	2b01      	cmp	r3, #1
 800b2b0:	d117      	bne.n	800b2e2 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	330c      	adds	r3, #12
 800b2b8:	001a      	movs	r2, r3
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2be:	7812      	ldrb	r2, [r2, #0]
 800b2c0:	b2d2      	uxtb	r2, r2
 800b2c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2c8:	1c5a      	adds	r2, r3, #1
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	2246      	movs	r2, #70	; 0x46
 800b2d2:	5a9b      	ldrh	r3, [r3, r2]
 800b2d4:	b29b      	uxth	r3, r3
 800b2d6:	3b01      	subs	r3, #1
 800b2d8:	b299      	uxth	r1, r3
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	2246      	movs	r2, #70	; 0x46
 800b2de:	5299      	strh	r1, [r3, r2]
 800b2e0:	e012      	b.n	800b308 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b2e2:	f7fe fb4f 	bl	8009984 <HAL_GetTick>
 800b2e6:	0002      	movs	r2, r0
 800b2e8:	693b      	ldr	r3, [r7, #16]
 800b2ea:	1ad3      	subs	r3, r2, r3
 800b2ec:	683a      	ldr	r2, [r7, #0]
 800b2ee:	429a      	cmp	r2, r3
 800b2f0:	d802      	bhi.n	800b2f8 <HAL_SPI_Receive+0x1bc>
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	3301      	adds	r3, #1
 800b2f6:	d102      	bne.n	800b2fe <HAL_SPI_Receive+0x1c2>
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d104      	bne.n	800b308 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 800b2fe:	2317      	movs	r3, #23
 800b300:	18fb      	adds	r3, r7, r3
 800b302:	2203      	movs	r2, #3
 800b304:	701a      	strb	r2, [r3, #0]
          goto error;
 800b306:	e051      	b.n	800b3ac <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	2246      	movs	r2, #70	; 0x46
 800b30c:	5a9b      	ldrh	r3, [r3, r2]
 800b30e:	b29b      	uxth	r3, r3
 800b310:	2b00      	cmp	r3, #0
 800b312:	d1c7      	bne.n	800b2a4 <HAL_SPI_Receive+0x168>
 800b314:	e035      	b.n	800b382 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	689b      	ldr	r3, [r3, #8]
 800b31c:	2201      	movs	r2, #1
 800b31e:	4013      	ands	r3, r2
 800b320:	2b01      	cmp	r3, #1
 800b322:	d115      	bne.n	800b350 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	68da      	ldr	r2, [r3, #12]
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b32e:	b292      	uxth	r2, r2
 800b330:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b336:	1c9a      	adds	r2, r3, #2
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	2246      	movs	r2, #70	; 0x46
 800b340:	5a9b      	ldrh	r3, [r3, r2]
 800b342:	b29b      	uxth	r3, r3
 800b344:	3b01      	subs	r3, #1
 800b346:	b299      	uxth	r1, r3
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	2246      	movs	r2, #70	; 0x46
 800b34c:	5299      	strh	r1, [r3, r2]
 800b34e:	e012      	b.n	800b376 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b350:	f7fe fb18 	bl	8009984 <HAL_GetTick>
 800b354:	0002      	movs	r2, r0
 800b356:	693b      	ldr	r3, [r7, #16]
 800b358:	1ad3      	subs	r3, r2, r3
 800b35a:	683a      	ldr	r2, [r7, #0]
 800b35c:	429a      	cmp	r2, r3
 800b35e:	d802      	bhi.n	800b366 <HAL_SPI_Receive+0x22a>
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	3301      	adds	r3, #1
 800b364:	d102      	bne.n	800b36c <HAL_SPI_Receive+0x230>
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d104      	bne.n	800b376 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 800b36c:	2317      	movs	r3, #23
 800b36e:	18fb      	adds	r3, r7, r3
 800b370:	2203      	movs	r2, #3
 800b372:	701a      	strb	r2, [r3, #0]
          goto error;
 800b374:	e01a      	b.n	800b3ac <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	2246      	movs	r2, #70	; 0x46
 800b37a:	5a9b      	ldrh	r3, [r3, r2]
 800b37c:	b29b      	uxth	r3, r3
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d1c9      	bne.n	800b316 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b382:	693a      	ldr	r2, [r7, #16]
 800b384:	6839      	ldr	r1, [r7, #0]
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	0018      	movs	r0, r3
 800b38a:	f000 fc41 	bl	800bc10 <SPI_EndRxTransaction>
 800b38e:	1e03      	subs	r3, r0, #0
 800b390:	d002      	beq.n	800b398 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	2220      	movs	r2, #32
 800b396:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d004      	beq.n	800b3aa <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 800b3a0:	2317      	movs	r3, #23
 800b3a2:	18fb      	adds	r3, r7, r3
 800b3a4:	2201      	movs	r2, #1
 800b3a6:	701a      	strb	r2, [r3, #0]
 800b3a8:	e000      	b.n	800b3ac <HAL_SPI_Receive+0x270>
  }

error :
 800b3aa:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	225d      	movs	r2, #93	; 0x5d
 800b3b0:	2101      	movs	r1, #1
 800b3b2:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	225c      	movs	r2, #92	; 0x5c
 800b3b8:	2100      	movs	r1, #0
 800b3ba:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800b3bc:	2317      	movs	r3, #23
 800b3be:	18fb      	adds	r3, r7, r3
 800b3c0:	781b      	ldrb	r3, [r3, #0]
}
 800b3c2:	0018      	movs	r0, r3
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	b007      	add	sp, #28
 800b3c8:	bd90      	pop	{r4, r7, pc}
 800b3ca:	46c0      	nop			; (mov r8, r8)
 800b3cc:	ffffefff 	.word	0xffffefff
 800b3d0:	ffffbfff 	.word	0xffffbfff

0800b3d4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b08a      	sub	sp, #40	; 0x28
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	60f8      	str	r0, [r7, #12]
 800b3dc:	60b9      	str	r1, [r7, #8]
 800b3de:	607a      	str	r2, [r7, #4]
 800b3e0:	001a      	movs	r2, r3
 800b3e2:	1cbb      	adds	r3, r7, #2
 800b3e4:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b3ea:	2323      	movs	r3, #35	; 0x23
 800b3ec:	18fb      	adds	r3, r7, r3
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	225c      	movs	r2, #92	; 0x5c
 800b3f6:	5c9b      	ldrb	r3, [r3, r2]
 800b3f8:	2b01      	cmp	r3, #1
 800b3fa:	d101      	bne.n	800b400 <HAL_SPI_TransmitReceive+0x2c>
 800b3fc:	2302      	movs	r3, #2
 800b3fe:	e1b5      	b.n	800b76c <HAL_SPI_TransmitReceive+0x398>
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	225c      	movs	r2, #92	; 0x5c
 800b404:	2101      	movs	r1, #1
 800b406:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b408:	f7fe fabc 	bl	8009984 <HAL_GetTick>
 800b40c:	0003      	movs	r3, r0
 800b40e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b410:	201b      	movs	r0, #27
 800b412:	183b      	adds	r3, r7, r0
 800b414:	68fa      	ldr	r2, [r7, #12]
 800b416:	215d      	movs	r1, #93	; 0x5d
 800b418:	5c52      	ldrb	r2, [r2, r1]
 800b41a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	685b      	ldr	r3, [r3, #4]
 800b420:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800b422:	2312      	movs	r3, #18
 800b424:	18fb      	adds	r3, r7, r3
 800b426:	1cba      	adds	r2, r7, #2
 800b428:	8812      	ldrh	r2, [r2, #0]
 800b42a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b42c:	183b      	adds	r3, r7, r0
 800b42e:	781b      	ldrb	r3, [r3, #0]
 800b430:	2b01      	cmp	r3, #1
 800b432:	d011      	beq.n	800b458 <HAL_SPI_TransmitReceive+0x84>
 800b434:	697a      	ldr	r2, [r7, #20]
 800b436:	2382      	movs	r3, #130	; 0x82
 800b438:	005b      	lsls	r3, r3, #1
 800b43a:	429a      	cmp	r2, r3
 800b43c:	d107      	bne.n	800b44e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	689b      	ldr	r3, [r3, #8]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d103      	bne.n	800b44e <HAL_SPI_TransmitReceive+0x7a>
 800b446:	183b      	adds	r3, r7, r0
 800b448:	781b      	ldrb	r3, [r3, #0]
 800b44a:	2b04      	cmp	r3, #4
 800b44c:	d004      	beq.n	800b458 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800b44e:	2323      	movs	r3, #35	; 0x23
 800b450:	18fb      	adds	r3, r7, r3
 800b452:	2202      	movs	r2, #2
 800b454:	701a      	strb	r2, [r3, #0]
    goto error;
 800b456:	e17e      	b.n	800b756 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d006      	beq.n	800b46c <HAL_SPI_TransmitReceive+0x98>
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d003      	beq.n	800b46c <HAL_SPI_TransmitReceive+0x98>
 800b464:	1cbb      	adds	r3, r7, #2
 800b466:	881b      	ldrh	r3, [r3, #0]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d104      	bne.n	800b476 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800b46c:	2323      	movs	r3, #35	; 0x23
 800b46e:	18fb      	adds	r3, r7, r3
 800b470:	2201      	movs	r2, #1
 800b472:	701a      	strb	r2, [r3, #0]
    goto error;
 800b474:	e16f      	b.n	800b756 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	225d      	movs	r2, #93	; 0x5d
 800b47a:	5c9b      	ldrb	r3, [r3, r2]
 800b47c:	b2db      	uxtb	r3, r3
 800b47e:	2b04      	cmp	r3, #4
 800b480:	d003      	beq.n	800b48a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	225d      	movs	r2, #93	; 0x5d
 800b486:	2105      	movs	r1, #5
 800b488:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	2200      	movs	r2, #0
 800b48e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	687a      	ldr	r2, [r7, #4]
 800b494:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	1cba      	adds	r2, r7, #2
 800b49a:	2146      	movs	r1, #70	; 0x46
 800b49c:	8812      	ldrh	r2, [r2, #0]
 800b49e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	1cba      	adds	r2, r7, #2
 800b4a4:	2144      	movs	r1, #68	; 0x44
 800b4a6:	8812      	ldrh	r2, [r2, #0]
 800b4a8:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	68ba      	ldr	r2, [r7, #8]
 800b4ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	1cba      	adds	r2, r7, #2
 800b4b4:	8812      	ldrh	r2, [r2, #0]
 800b4b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	1cba      	adds	r2, r7, #2
 800b4bc:	8812      	ldrh	r2, [r2, #0]
 800b4be:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	68da      	ldr	r2, [r3, #12]
 800b4d0:	23e0      	movs	r3, #224	; 0xe0
 800b4d2:	00db      	lsls	r3, r3, #3
 800b4d4:	429a      	cmp	r2, r3
 800b4d6:	d908      	bls.n	800b4ea <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	685a      	ldr	r2, [r3, #4]
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	49a4      	ldr	r1, [pc, #656]	; (800b774 <HAL_SPI_TransmitReceive+0x3a0>)
 800b4e4:	400a      	ands	r2, r1
 800b4e6:	605a      	str	r2, [r3, #4]
 800b4e8:	e008      	b.n	800b4fc <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	685a      	ldr	r2, [r3, #4]
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	2180      	movs	r1, #128	; 0x80
 800b4f6:	0149      	lsls	r1, r1, #5
 800b4f8:	430a      	orrs	r2, r1
 800b4fa:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	2240      	movs	r2, #64	; 0x40
 800b504:	4013      	ands	r3, r2
 800b506:	2b40      	cmp	r3, #64	; 0x40
 800b508:	d007      	beq.n	800b51a <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	681a      	ldr	r2, [r3, #0]
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	2140      	movs	r1, #64	; 0x40
 800b516:	430a      	orrs	r2, r1
 800b518:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	68da      	ldr	r2, [r3, #12]
 800b51e:	23e0      	movs	r3, #224	; 0xe0
 800b520:	00db      	lsls	r3, r3, #3
 800b522:	429a      	cmp	r2, r3
 800b524:	d800      	bhi.n	800b528 <HAL_SPI_TransmitReceive+0x154>
 800b526:	e07f      	b.n	800b628 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	685b      	ldr	r3, [r3, #4]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d005      	beq.n	800b53c <HAL_SPI_TransmitReceive+0x168>
 800b530:	2312      	movs	r3, #18
 800b532:	18fb      	adds	r3, r7, r3
 800b534:	881b      	ldrh	r3, [r3, #0]
 800b536:	2b01      	cmp	r3, #1
 800b538:	d000      	beq.n	800b53c <HAL_SPI_TransmitReceive+0x168>
 800b53a:	e069      	b.n	800b610 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b540:	881a      	ldrh	r2, [r3, #0]
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b54c:	1c9a      	adds	r2, r3, #2
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b556:	b29b      	uxth	r3, r3
 800b558:	3b01      	subs	r3, #1
 800b55a:	b29a      	uxth	r2, r3
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b560:	e056      	b.n	800b610 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	689b      	ldr	r3, [r3, #8]
 800b568:	2202      	movs	r2, #2
 800b56a:	4013      	ands	r3, r2
 800b56c:	2b02      	cmp	r3, #2
 800b56e:	d11b      	bne.n	800b5a8 <HAL_SPI_TransmitReceive+0x1d4>
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b574:	b29b      	uxth	r3, r3
 800b576:	2b00      	cmp	r3, #0
 800b578:	d016      	beq.n	800b5a8 <HAL_SPI_TransmitReceive+0x1d4>
 800b57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b57c:	2b01      	cmp	r3, #1
 800b57e:	d113      	bne.n	800b5a8 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b584:	881a      	ldrh	r2, [r3, #0]
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b590:	1c9a      	adds	r2, r3, #2
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b59a:	b29b      	uxth	r3, r3
 800b59c:	3b01      	subs	r3, #1
 800b59e:	b29a      	uxth	r2, r3
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	689b      	ldr	r3, [r3, #8]
 800b5ae:	2201      	movs	r2, #1
 800b5b0:	4013      	ands	r3, r2
 800b5b2:	2b01      	cmp	r3, #1
 800b5b4:	d11c      	bne.n	800b5f0 <HAL_SPI_TransmitReceive+0x21c>
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	2246      	movs	r2, #70	; 0x46
 800b5ba:	5a9b      	ldrh	r3, [r3, r2]
 800b5bc:	b29b      	uxth	r3, r3
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d016      	beq.n	800b5f0 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	68da      	ldr	r2, [r3, #12]
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5cc:	b292      	uxth	r2, r2
 800b5ce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5d4:	1c9a      	adds	r2, r3, #2
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	2246      	movs	r2, #70	; 0x46
 800b5de:	5a9b      	ldrh	r3, [r3, r2]
 800b5e0:	b29b      	uxth	r3, r3
 800b5e2:	3b01      	subs	r3, #1
 800b5e4:	b299      	uxth	r1, r3
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	2246      	movs	r2, #70	; 0x46
 800b5ea:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b5ec:	2301      	movs	r3, #1
 800b5ee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b5f0:	f7fe f9c8 	bl	8009984 <HAL_GetTick>
 800b5f4:	0002      	movs	r2, r0
 800b5f6:	69fb      	ldr	r3, [r7, #28]
 800b5f8:	1ad3      	subs	r3, r2, r3
 800b5fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5fc:	429a      	cmp	r2, r3
 800b5fe:	d807      	bhi.n	800b610 <HAL_SPI_TransmitReceive+0x23c>
 800b600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b602:	3301      	adds	r3, #1
 800b604:	d004      	beq.n	800b610 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 800b606:	2323      	movs	r3, #35	; 0x23
 800b608:	18fb      	adds	r3, r7, r3
 800b60a:	2203      	movs	r2, #3
 800b60c:	701a      	strb	r2, [r3, #0]
        goto error;
 800b60e:	e0a2      	b.n	800b756 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b614:	b29b      	uxth	r3, r3
 800b616:	2b00      	cmp	r3, #0
 800b618:	d1a3      	bne.n	800b562 <HAL_SPI_TransmitReceive+0x18e>
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	2246      	movs	r2, #70	; 0x46
 800b61e:	5a9b      	ldrh	r3, [r3, r2]
 800b620:	b29b      	uxth	r3, r3
 800b622:	2b00      	cmp	r3, #0
 800b624:	d19d      	bne.n	800b562 <HAL_SPI_TransmitReceive+0x18e>
 800b626:	e085      	b.n	800b734 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	685b      	ldr	r3, [r3, #4]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d005      	beq.n	800b63c <HAL_SPI_TransmitReceive+0x268>
 800b630:	2312      	movs	r3, #18
 800b632:	18fb      	adds	r3, r7, r3
 800b634:	881b      	ldrh	r3, [r3, #0]
 800b636:	2b01      	cmp	r3, #1
 800b638:	d000      	beq.n	800b63c <HAL_SPI_TransmitReceive+0x268>
 800b63a:	e070      	b.n	800b71e <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	330c      	adds	r3, #12
 800b646:	7812      	ldrb	r2, [r2, #0]
 800b648:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b64e:	1c5a      	adds	r2, r3, #1
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b658:	b29b      	uxth	r3, r3
 800b65a:	3b01      	subs	r3, #1
 800b65c:	b29a      	uxth	r2, r3
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b662:	e05c      	b.n	800b71e <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	689b      	ldr	r3, [r3, #8]
 800b66a:	2202      	movs	r2, #2
 800b66c:	4013      	ands	r3, r2
 800b66e:	2b02      	cmp	r3, #2
 800b670:	d11c      	bne.n	800b6ac <HAL_SPI_TransmitReceive+0x2d8>
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b676:	b29b      	uxth	r3, r3
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d017      	beq.n	800b6ac <HAL_SPI_TransmitReceive+0x2d8>
 800b67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b67e:	2b01      	cmp	r3, #1
 800b680:	d114      	bne.n	800b6ac <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	330c      	adds	r3, #12
 800b68c:	7812      	ldrb	r2, [r2, #0]
 800b68e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b694:	1c5a      	adds	r2, r3, #1
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b69e:	b29b      	uxth	r3, r3
 800b6a0:	3b01      	subs	r3, #1
 800b6a2:	b29a      	uxth	r2, r3
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	689b      	ldr	r3, [r3, #8]
 800b6b2:	2201      	movs	r2, #1
 800b6b4:	4013      	ands	r3, r2
 800b6b6:	2b01      	cmp	r3, #1
 800b6b8:	d11e      	bne.n	800b6f8 <HAL_SPI_TransmitReceive+0x324>
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	2246      	movs	r2, #70	; 0x46
 800b6be:	5a9b      	ldrh	r3, [r3, r2]
 800b6c0:	b29b      	uxth	r3, r3
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d018      	beq.n	800b6f8 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	330c      	adds	r3, #12
 800b6cc:	001a      	movs	r2, r3
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6d2:	7812      	ldrb	r2, [r2, #0]
 800b6d4:	b2d2      	uxtb	r2, r2
 800b6d6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6dc:	1c5a      	adds	r2, r3, #1
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	2246      	movs	r2, #70	; 0x46
 800b6e6:	5a9b      	ldrh	r3, [r3, r2]
 800b6e8:	b29b      	uxth	r3, r3
 800b6ea:	3b01      	subs	r3, #1
 800b6ec:	b299      	uxth	r1, r3
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	2246      	movs	r2, #70	; 0x46
 800b6f2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b6f8:	f7fe f944 	bl	8009984 <HAL_GetTick>
 800b6fc:	0002      	movs	r2, r0
 800b6fe:	69fb      	ldr	r3, [r7, #28]
 800b700:	1ad3      	subs	r3, r2, r3
 800b702:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b704:	429a      	cmp	r2, r3
 800b706:	d802      	bhi.n	800b70e <HAL_SPI_TransmitReceive+0x33a>
 800b708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b70a:	3301      	adds	r3, #1
 800b70c:	d102      	bne.n	800b714 <HAL_SPI_TransmitReceive+0x340>
 800b70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b710:	2b00      	cmp	r3, #0
 800b712:	d104      	bne.n	800b71e <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 800b714:	2323      	movs	r3, #35	; 0x23
 800b716:	18fb      	adds	r3, r7, r3
 800b718:	2203      	movs	r2, #3
 800b71a:	701a      	strb	r2, [r3, #0]
        goto error;
 800b71c:	e01b      	b.n	800b756 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b722:	b29b      	uxth	r3, r3
 800b724:	2b00      	cmp	r3, #0
 800b726:	d19d      	bne.n	800b664 <HAL_SPI_TransmitReceive+0x290>
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	2246      	movs	r2, #70	; 0x46
 800b72c:	5a9b      	ldrh	r3, [r3, r2]
 800b72e:	b29b      	uxth	r3, r3
 800b730:	2b00      	cmp	r3, #0
 800b732:	d197      	bne.n	800b664 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b734:	69fa      	ldr	r2, [r7, #28]
 800b736:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	0018      	movs	r0, r3
 800b73c:	f000 fac6 	bl	800bccc <SPI_EndRxTxTransaction>
 800b740:	1e03      	subs	r3, r0, #0
 800b742:	d007      	beq.n	800b754 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 800b744:	2323      	movs	r3, #35	; 0x23
 800b746:	18fb      	adds	r3, r7, r3
 800b748:	2201      	movs	r2, #1
 800b74a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	2220      	movs	r2, #32
 800b750:	661a      	str	r2, [r3, #96]	; 0x60
 800b752:	e000      	b.n	800b756 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 800b754:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	225d      	movs	r2, #93	; 0x5d
 800b75a:	2101      	movs	r1, #1
 800b75c:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	225c      	movs	r2, #92	; 0x5c
 800b762:	2100      	movs	r1, #0
 800b764:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800b766:	2323      	movs	r3, #35	; 0x23
 800b768:	18fb      	adds	r3, r7, r3
 800b76a:	781b      	ldrb	r3, [r3, #0]
}
 800b76c:	0018      	movs	r0, r3
 800b76e:	46bd      	mov	sp, r7
 800b770:	b00a      	add	sp, #40	; 0x28
 800b772:	bd80      	pop	{r7, pc}
 800b774:	ffffefff 	.word	0xffffefff

0800b778 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b088      	sub	sp, #32
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	685b      	ldr	r3, [r3, #4]
 800b786:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	689b      	ldr	r3, [r3, #8]
 800b78e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800b790:	69bb      	ldr	r3, [r7, #24]
 800b792:	099b      	lsrs	r3, r3, #6
 800b794:	001a      	movs	r2, r3
 800b796:	2301      	movs	r3, #1
 800b798:	4013      	ands	r3, r2
 800b79a:	d10f      	bne.n	800b7bc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800b79c:	69bb      	ldr	r3, [r7, #24]
 800b79e:	2201      	movs	r2, #1
 800b7a0:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800b7a2:	d00b      	beq.n	800b7bc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800b7a4:	69fb      	ldr	r3, [r7, #28]
 800b7a6:	099b      	lsrs	r3, r3, #6
 800b7a8:	001a      	movs	r2, r3
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	4013      	ands	r3, r2
 800b7ae:	d005      	beq.n	800b7bc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7b4:	687a      	ldr	r2, [r7, #4]
 800b7b6:	0010      	movs	r0, r2
 800b7b8:	4798      	blx	r3
    return;
 800b7ba:	e0d5      	b.n	800b968 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800b7bc:	69bb      	ldr	r3, [r7, #24]
 800b7be:	085b      	lsrs	r3, r3, #1
 800b7c0:	001a      	movs	r2, r3
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	4013      	ands	r3, r2
 800b7c6:	d00b      	beq.n	800b7e0 <HAL_SPI_IRQHandler+0x68>
 800b7c8:	69fb      	ldr	r3, [r7, #28]
 800b7ca:	09db      	lsrs	r3, r3, #7
 800b7cc:	001a      	movs	r2, r3
 800b7ce:	2301      	movs	r3, #1
 800b7d0:	4013      	ands	r3, r2
 800b7d2:	d005      	beq.n	800b7e0 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7d8:	687a      	ldr	r2, [r7, #4]
 800b7da:	0010      	movs	r0, r2
 800b7dc:	4798      	blx	r3
    return;
 800b7de:	e0c3      	b.n	800b968 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800b7e0:	69bb      	ldr	r3, [r7, #24]
 800b7e2:	095b      	lsrs	r3, r3, #5
 800b7e4:	001a      	movs	r2, r3
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	4013      	ands	r3, r2
 800b7ea:	d10c      	bne.n	800b806 <HAL_SPI_IRQHandler+0x8e>
 800b7ec:	69bb      	ldr	r3, [r7, #24]
 800b7ee:	099b      	lsrs	r3, r3, #6
 800b7f0:	001a      	movs	r2, r3
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	4013      	ands	r3, r2
 800b7f6:	d106      	bne.n	800b806 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800b7f8:	69bb      	ldr	r3, [r7, #24]
 800b7fa:	0a1b      	lsrs	r3, r3, #8
 800b7fc:	001a      	movs	r2, r3
 800b7fe:	2301      	movs	r3, #1
 800b800:	4013      	ands	r3, r2
 800b802:	d100      	bne.n	800b806 <HAL_SPI_IRQHandler+0x8e>
 800b804:	e0b0      	b.n	800b968 <HAL_SPI_IRQHandler+0x1f0>
 800b806:	69fb      	ldr	r3, [r7, #28]
 800b808:	095b      	lsrs	r3, r3, #5
 800b80a:	001a      	movs	r2, r3
 800b80c:	2301      	movs	r3, #1
 800b80e:	4013      	ands	r3, r2
 800b810:	d100      	bne.n	800b814 <HAL_SPI_IRQHandler+0x9c>
 800b812:	e0a9      	b.n	800b968 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800b814:	69bb      	ldr	r3, [r7, #24]
 800b816:	099b      	lsrs	r3, r3, #6
 800b818:	001a      	movs	r2, r3
 800b81a:	2301      	movs	r3, #1
 800b81c:	4013      	ands	r3, r2
 800b81e:	d023      	beq.n	800b868 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	225d      	movs	r2, #93	; 0x5d
 800b824:	5c9b      	ldrb	r3, [r3, r2]
 800b826:	b2db      	uxtb	r3, r3
 800b828:	2b03      	cmp	r3, #3
 800b82a:	d011      	beq.n	800b850 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b830:	2204      	movs	r2, #4
 800b832:	431a      	orrs	r2, r3
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b838:	2300      	movs	r3, #0
 800b83a:	617b      	str	r3, [r7, #20]
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	68db      	ldr	r3, [r3, #12]
 800b842:	617b      	str	r3, [r7, #20]
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	689b      	ldr	r3, [r3, #8]
 800b84a:	617b      	str	r3, [r7, #20]
 800b84c:	697b      	ldr	r3, [r7, #20]
 800b84e:	e00b      	b.n	800b868 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b850:	2300      	movs	r3, #0
 800b852:	613b      	str	r3, [r7, #16]
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	68db      	ldr	r3, [r3, #12]
 800b85a:	613b      	str	r3, [r7, #16]
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	689b      	ldr	r3, [r3, #8]
 800b862:	613b      	str	r3, [r7, #16]
 800b864:	693b      	ldr	r3, [r7, #16]
        return;
 800b866:	e07f      	b.n	800b968 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800b868:	69bb      	ldr	r3, [r7, #24]
 800b86a:	095b      	lsrs	r3, r3, #5
 800b86c:	001a      	movs	r2, r3
 800b86e:	2301      	movs	r3, #1
 800b870:	4013      	ands	r3, r2
 800b872:	d014      	beq.n	800b89e <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b878:	2201      	movs	r2, #1
 800b87a:	431a      	orrs	r2, r3
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b880:	2300      	movs	r3, #0
 800b882:	60fb      	str	r3, [r7, #12]
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	689b      	ldr	r3, [r3, #8]
 800b88a:	60fb      	str	r3, [r7, #12]
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	681a      	ldr	r2, [r3, #0]
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	2140      	movs	r1, #64	; 0x40
 800b898:	438a      	bics	r2, r1
 800b89a:	601a      	str	r2, [r3, #0]
 800b89c:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800b89e:	69bb      	ldr	r3, [r7, #24]
 800b8a0:	0a1b      	lsrs	r3, r3, #8
 800b8a2:	001a      	movs	r2, r3
 800b8a4:	2301      	movs	r3, #1
 800b8a6:	4013      	ands	r3, r2
 800b8a8:	d00c      	beq.n	800b8c4 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b8ae:	2208      	movs	r2, #8
 800b8b0:	431a      	orrs	r2, r3
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	60bb      	str	r3, [r7, #8]
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	689b      	ldr	r3, [r3, #8]
 800b8c0:	60bb      	str	r3, [r7, #8]
 800b8c2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d04c      	beq.n	800b966 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	685a      	ldr	r2, [r3, #4]
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	21e0      	movs	r1, #224	; 0xe0
 800b8d8:	438a      	bics	r2, r1
 800b8da:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	225d      	movs	r2, #93	; 0x5d
 800b8e0:	2101      	movs	r1, #1
 800b8e2:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800b8e4:	69fb      	ldr	r3, [r7, #28]
 800b8e6:	2202      	movs	r2, #2
 800b8e8:	4013      	ands	r3, r2
 800b8ea:	d103      	bne.n	800b8f4 <HAL_SPI_IRQHandler+0x17c>
 800b8ec:	69fb      	ldr	r3, [r7, #28]
 800b8ee:	2201      	movs	r2, #1
 800b8f0:	4013      	ands	r3, r2
 800b8f2:	d032      	beq.n	800b95a <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	685a      	ldr	r2, [r3, #4]
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	2103      	movs	r1, #3
 800b900:	438a      	bics	r2, r1
 800b902:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d010      	beq.n	800b92e <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b910:	4a17      	ldr	r2, [pc, #92]	; (800b970 <HAL_SPI_IRQHandler+0x1f8>)
 800b912:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b918:	0018      	movs	r0, r3
 800b91a:	f7fe f9a1 	bl	8009c60 <HAL_DMA_Abort_IT>
 800b91e:	1e03      	subs	r3, r0, #0
 800b920:	d005      	beq.n	800b92e <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b926:	2240      	movs	r2, #64	; 0x40
 800b928:	431a      	orrs	r2, r3
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b932:	2b00      	cmp	r3, #0
 800b934:	d016      	beq.n	800b964 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b93a:	4a0d      	ldr	r2, [pc, #52]	; (800b970 <HAL_SPI_IRQHandler+0x1f8>)
 800b93c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b942:	0018      	movs	r0, r3
 800b944:	f7fe f98c 	bl	8009c60 <HAL_DMA_Abort_IT>
 800b948:	1e03      	subs	r3, r0, #0
 800b94a:	d00b      	beq.n	800b964 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b950:	2240      	movs	r2, #64	; 0x40
 800b952:	431a      	orrs	r2, r3
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800b958:	e004      	b.n	800b964 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	0018      	movs	r0, r3
 800b95e:	f000 f809 	bl	800b974 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800b962:	e000      	b.n	800b966 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 800b964:	46c0      	nop			; (mov r8, r8)
    return;
 800b966:	46c0      	nop			; (mov r8, r8)
  }
}
 800b968:	46bd      	mov	sp, r7
 800b96a:	b008      	add	sp, #32
 800b96c:	bd80      	pop	{r7, pc}
 800b96e:	46c0      	nop			; (mov r8, r8)
 800b970:	0800b985 	.word	0x0800b985

0800b974 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b082      	sub	sp, #8
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800b97c:	46c0      	nop			; (mov r8, r8)
 800b97e:	46bd      	mov	sp, r7
 800b980:	b002      	add	sp, #8
 800b982:	bd80      	pop	{r7, pc}

0800b984 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b084      	sub	sp, #16
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b990:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	2246      	movs	r2, #70	; 0x46
 800b996:	2100      	movs	r1, #0
 800b998:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	2200      	movs	r2, #0
 800b99e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	0018      	movs	r0, r3
 800b9a4:	f7ff ffe6 	bl	800b974 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b9a8:	46c0      	nop			; (mov r8, r8)
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	b004      	add	sp, #16
 800b9ae:	bd80      	pop	{r7, pc}

0800b9b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b088      	sub	sp, #32
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	60f8      	str	r0, [r7, #12]
 800b9b8:	60b9      	str	r1, [r7, #8]
 800b9ba:	603b      	str	r3, [r7, #0]
 800b9bc:	1dfb      	adds	r3, r7, #7
 800b9be:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b9c0:	f7fd ffe0 	bl	8009984 <HAL_GetTick>
 800b9c4:	0002      	movs	r2, r0
 800b9c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9c8:	1a9b      	subs	r3, r3, r2
 800b9ca:	683a      	ldr	r2, [r7, #0]
 800b9cc:	18d3      	adds	r3, r2, r3
 800b9ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b9d0:	f7fd ffd8 	bl	8009984 <HAL_GetTick>
 800b9d4:	0003      	movs	r3, r0
 800b9d6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b9d8:	4b3a      	ldr	r3, [pc, #232]	; (800bac4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	015b      	lsls	r3, r3, #5
 800b9de:	0d1b      	lsrs	r3, r3, #20
 800b9e0:	69fa      	ldr	r2, [r7, #28]
 800b9e2:	4353      	muls	r3, r2
 800b9e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b9e6:	e058      	b.n	800ba9a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	3301      	adds	r3, #1
 800b9ec:	d055      	beq.n	800ba9a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b9ee:	f7fd ffc9 	bl	8009984 <HAL_GetTick>
 800b9f2:	0002      	movs	r2, r0
 800b9f4:	69bb      	ldr	r3, [r7, #24]
 800b9f6:	1ad3      	subs	r3, r2, r3
 800b9f8:	69fa      	ldr	r2, [r7, #28]
 800b9fa:	429a      	cmp	r2, r3
 800b9fc:	d902      	bls.n	800ba04 <SPI_WaitFlagStateUntilTimeout+0x54>
 800b9fe:	69fb      	ldr	r3, [r7, #28]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d142      	bne.n	800ba8a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	685a      	ldr	r2, [r3, #4]
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	21e0      	movs	r1, #224	; 0xe0
 800ba10:	438a      	bics	r2, r1
 800ba12:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	685a      	ldr	r2, [r3, #4]
 800ba18:	2382      	movs	r3, #130	; 0x82
 800ba1a:	005b      	lsls	r3, r3, #1
 800ba1c:	429a      	cmp	r2, r3
 800ba1e:	d113      	bne.n	800ba48 <SPI_WaitFlagStateUntilTimeout+0x98>
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	689a      	ldr	r2, [r3, #8]
 800ba24:	2380      	movs	r3, #128	; 0x80
 800ba26:	021b      	lsls	r3, r3, #8
 800ba28:	429a      	cmp	r2, r3
 800ba2a:	d005      	beq.n	800ba38 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	689a      	ldr	r2, [r3, #8]
 800ba30:	2380      	movs	r3, #128	; 0x80
 800ba32:	00db      	lsls	r3, r3, #3
 800ba34:	429a      	cmp	r2, r3
 800ba36:	d107      	bne.n	800ba48 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	681a      	ldr	r2, [r3, #0]
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	2140      	movs	r1, #64	; 0x40
 800ba44:	438a      	bics	r2, r1
 800ba46:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ba4c:	2380      	movs	r3, #128	; 0x80
 800ba4e:	019b      	lsls	r3, r3, #6
 800ba50:	429a      	cmp	r2, r3
 800ba52:	d110      	bne.n	800ba76 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	681a      	ldr	r2, [r3, #0]
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	491a      	ldr	r1, [pc, #104]	; (800bac8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800ba60:	400a      	ands	r2, r1
 800ba62:	601a      	str	r2, [r3, #0]
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	681a      	ldr	r2, [r3, #0]
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	2180      	movs	r1, #128	; 0x80
 800ba70:	0189      	lsls	r1, r1, #6
 800ba72:	430a      	orrs	r2, r1
 800ba74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	225d      	movs	r2, #93	; 0x5d
 800ba7a:	2101      	movs	r1, #1
 800ba7c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	225c      	movs	r2, #92	; 0x5c
 800ba82:	2100      	movs	r1, #0
 800ba84:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800ba86:	2303      	movs	r3, #3
 800ba88:	e017      	b.n	800baba <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ba8a:	697b      	ldr	r3, [r7, #20]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d101      	bne.n	800ba94 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800ba90:	2300      	movs	r3, #0
 800ba92:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ba94:	697b      	ldr	r3, [r7, #20]
 800ba96:	3b01      	subs	r3, #1
 800ba98:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	689b      	ldr	r3, [r3, #8]
 800baa0:	68ba      	ldr	r2, [r7, #8]
 800baa2:	4013      	ands	r3, r2
 800baa4:	68ba      	ldr	r2, [r7, #8]
 800baa6:	1ad3      	subs	r3, r2, r3
 800baa8:	425a      	negs	r2, r3
 800baaa:	4153      	adcs	r3, r2
 800baac:	b2db      	uxtb	r3, r3
 800baae:	001a      	movs	r2, r3
 800bab0:	1dfb      	adds	r3, r7, #7
 800bab2:	781b      	ldrb	r3, [r3, #0]
 800bab4:	429a      	cmp	r2, r3
 800bab6:	d197      	bne.n	800b9e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800bab8:	2300      	movs	r3, #0
}
 800baba:	0018      	movs	r0, r3
 800babc:	46bd      	mov	sp, r7
 800babe:	b008      	add	sp, #32
 800bac0:	bd80      	pop	{r7, pc}
 800bac2:	46c0      	nop			; (mov r8, r8)
 800bac4:	200000d8 	.word	0x200000d8
 800bac8:	ffffdfff 	.word	0xffffdfff

0800bacc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b08a      	sub	sp, #40	; 0x28
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	60f8      	str	r0, [r7, #12]
 800bad4:	60b9      	str	r1, [r7, #8]
 800bad6:	607a      	str	r2, [r7, #4]
 800bad8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800bada:	2317      	movs	r3, #23
 800badc:	18fb      	adds	r3, r7, r3
 800bade:	2200      	movs	r2, #0
 800bae0:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800bae2:	f7fd ff4f 	bl	8009984 <HAL_GetTick>
 800bae6:	0002      	movs	r2, r0
 800bae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baea:	1a9b      	subs	r3, r3, r2
 800baec:	683a      	ldr	r2, [r7, #0]
 800baee:	18d3      	adds	r3, r2, r3
 800baf0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800baf2:	f7fd ff47 	bl	8009984 <HAL_GetTick>
 800baf6:	0003      	movs	r3, r0
 800baf8:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	330c      	adds	r3, #12
 800bb00:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800bb02:	4b41      	ldr	r3, [pc, #260]	; (800bc08 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800bb04:	681a      	ldr	r2, [r3, #0]
 800bb06:	0013      	movs	r3, r2
 800bb08:	009b      	lsls	r3, r3, #2
 800bb0a:	189b      	adds	r3, r3, r2
 800bb0c:	00da      	lsls	r2, r3, #3
 800bb0e:	1ad3      	subs	r3, r2, r3
 800bb10:	0d1b      	lsrs	r3, r3, #20
 800bb12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb14:	4353      	muls	r3, r2
 800bb16:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800bb18:	e068      	b.n	800bbec <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800bb1a:	68ba      	ldr	r2, [r7, #8]
 800bb1c:	23c0      	movs	r3, #192	; 0xc0
 800bb1e:	00db      	lsls	r3, r3, #3
 800bb20:	429a      	cmp	r2, r3
 800bb22:	d10a      	bne.n	800bb3a <SPI_WaitFifoStateUntilTimeout+0x6e>
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d107      	bne.n	800bb3a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800bb2a:	69fb      	ldr	r3, [r7, #28]
 800bb2c:	781b      	ldrb	r3, [r3, #0]
 800bb2e:	b2da      	uxtb	r2, r3
 800bb30:	2117      	movs	r1, #23
 800bb32:	187b      	adds	r3, r7, r1
 800bb34:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800bb36:	187b      	adds	r3, r7, r1
 800bb38:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	3301      	adds	r3, #1
 800bb3e:	d055      	beq.n	800bbec <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bb40:	f7fd ff20 	bl	8009984 <HAL_GetTick>
 800bb44:	0002      	movs	r2, r0
 800bb46:	6a3b      	ldr	r3, [r7, #32]
 800bb48:	1ad3      	subs	r3, r2, r3
 800bb4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb4c:	429a      	cmp	r2, r3
 800bb4e:	d902      	bls.n	800bb56 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800bb50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d142      	bne.n	800bbdc <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	685a      	ldr	r2, [r3, #4]
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	21e0      	movs	r1, #224	; 0xe0
 800bb62:	438a      	bics	r2, r1
 800bb64:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	685a      	ldr	r2, [r3, #4]
 800bb6a:	2382      	movs	r3, #130	; 0x82
 800bb6c:	005b      	lsls	r3, r3, #1
 800bb6e:	429a      	cmp	r2, r3
 800bb70:	d113      	bne.n	800bb9a <SPI_WaitFifoStateUntilTimeout+0xce>
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	689a      	ldr	r2, [r3, #8]
 800bb76:	2380      	movs	r3, #128	; 0x80
 800bb78:	021b      	lsls	r3, r3, #8
 800bb7a:	429a      	cmp	r2, r3
 800bb7c:	d005      	beq.n	800bb8a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	689a      	ldr	r2, [r3, #8]
 800bb82:	2380      	movs	r3, #128	; 0x80
 800bb84:	00db      	lsls	r3, r3, #3
 800bb86:	429a      	cmp	r2, r3
 800bb88:	d107      	bne.n	800bb9a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	681a      	ldr	r2, [r3, #0]
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	2140      	movs	r1, #64	; 0x40
 800bb96:	438a      	bics	r2, r1
 800bb98:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bb9e:	2380      	movs	r3, #128	; 0x80
 800bba0:	019b      	lsls	r3, r3, #6
 800bba2:	429a      	cmp	r2, r3
 800bba4:	d110      	bne.n	800bbc8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	681a      	ldr	r2, [r3, #0]
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	4916      	ldr	r1, [pc, #88]	; (800bc0c <SPI_WaitFifoStateUntilTimeout+0x140>)
 800bbb2:	400a      	ands	r2, r1
 800bbb4:	601a      	str	r2, [r3, #0]
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	681a      	ldr	r2, [r3, #0]
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	2180      	movs	r1, #128	; 0x80
 800bbc2:	0189      	lsls	r1, r1, #6
 800bbc4:	430a      	orrs	r2, r1
 800bbc6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	225d      	movs	r2, #93	; 0x5d
 800bbcc:	2101      	movs	r1, #1
 800bbce:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	225c      	movs	r2, #92	; 0x5c
 800bbd4:	2100      	movs	r1, #0
 800bbd6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800bbd8:	2303      	movs	r3, #3
 800bbda:	e010      	b.n	800bbfe <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800bbdc:	69bb      	ldr	r3, [r7, #24]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d101      	bne.n	800bbe6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800bbe6:	69bb      	ldr	r3, [r7, #24]
 800bbe8:	3b01      	subs	r3, #1
 800bbea:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	689b      	ldr	r3, [r3, #8]
 800bbf2:	68ba      	ldr	r2, [r7, #8]
 800bbf4:	4013      	ands	r3, r2
 800bbf6:	687a      	ldr	r2, [r7, #4]
 800bbf8:	429a      	cmp	r2, r3
 800bbfa:	d18e      	bne.n	800bb1a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800bbfc:	2300      	movs	r3, #0
}
 800bbfe:	0018      	movs	r0, r3
 800bc00:	46bd      	mov	sp, r7
 800bc02:	b00a      	add	sp, #40	; 0x28
 800bc04:	bd80      	pop	{r7, pc}
 800bc06:	46c0      	nop			; (mov r8, r8)
 800bc08:	200000d8 	.word	0x200000d8
 800bc0c:	ffffdfff 	.word	0xffffdfff

0800bc10 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b086      	sub	sp, #24
 800bc14:	af02      	add	r7, sp, #8
 800bc16:	60f8      	str	r0, [r7, #12]
 800bc18:	60b9      	str	r1, [r7, #8]
 800bc1a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	685a      	ldr	r2, [r3, #4]
 800bc20:	2382      	movs	r3, #130	; 0x82
 800bc22:	005b      	lsls	r3, r3, #1
 800bc24:	429a      	cmp	r2, r3
 800bc26:	d113      	bne.n	800bc50 <SPI_EndRxTransaction+0x40>
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	689a      	ldr	r2, [r3, #8]
 800bc2c:	2380      	movs	r3, #128	; 0x80
 800bc2e:	021b      	lsls	r3, r3, #8
 800bc30:	429a      	cmp	r2, r3
 800bc32:	d005      	beq.n	800bc40 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	689a      	ldr	r2, [r3, #8]
 800bc38:	2380      	movs	r3, #128	; 0x80
 800bc3a:	00db      	lsls	r3, r3, #3
 800bc3c:	429a      	cmp	r2, r3
 800bc3e:	d107      	bne.n	800bc50 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	681a      	ldr	r2, [r3, #0]
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	2140      	movs	r1, #64	; 0x40
 800bc4c:	438a      	bics	r2, r1
 800bc4e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bc50:	68ba      	ldr	r2, [r7, #8]
 800bc52:	68f8      	ldr	r0, [r7, #12]
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	9300      	str	r3, [sp, #0]
 800bc58:	0013      	movs	r3, r2
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	2180      	movs	r1, #128	; 0x80
 800bc5e:	f7ff fea7 	bl	800b9b0 <SPI_WaitFlagStateUntilTimeout>
 800bc62:	1e03      	subs	r3, r0, #0
 800bc64:	d007      	beq.n	800bc76 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc6a:	2220      	movs	r2, #32
 800bc6c:	431a      	orrs	r2, r3
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800bc72:	2303      	movs	r3, #3
 800bc74:	e026      	b.n	800bcc4 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	685a      	ldr	r2, [r3, #4]
 800bc7a:	2382      	movs	r3, #130	; 0x82
 800bc7c:	005b      	lsls	r3, r3, #1
 800bc7e:	429a      	cmp	r2, r3
 800bc80:	d11f      	bne.n	800bcc2 <SPI_EndRxTransaction+0xb2>
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	689a      	ldr	r2, [r3, #8]
 800bc86:	2380      	movs	r3, #128	; 0x80
 800bc88:	021b      	lsls	r3, r3, #8
 800bc8a:	429a      	cmp	r2, r3
 800bc8c:	d005      	beq.n	800bc9a <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	689a      	ldr	r2, [r3, #8]
 800bc92:	2380      	movs	r3, #128	; 0x80
 800bc94:	00db      	lsls	r3, r3, #3
 800bc96:	429a      	cmp	r2, r3
 800bc98:	d113      	bne.n	800bcc2 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800bc9a:	68ba      	ldr	r2, [r7, #8]
 800bc9c:	23c0      	movs	r3, #192	; 0xc0
 800bc9e:	00d9      	lsls	r1, r3, #3
 800bca0:	68f8      	ldr	r0, [r7, #12]
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	9300      	str	r3, [sp, #0]
 800bca6:	0013      	movs	r3, r2
 800bca8:	2200      	movs	r2, #0
 800bcaa:	f7ff ff0f 	bl	800bacc <SPI_WaitFifoStateUntilTimeout>
 800bcae:	1e03      	subs	r3, r0, #0
 800bcb0:	d007      	beq.n	800bcc2 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bcb6:	2220      	movs	r2, #32
 800bcb8:	431a      	orrs	r2, r3
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800bcbe:	2303      	movs	r3, #3
 800bcc0:	e000      	b.n	800bcc4 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800bcc2:	2300      	movs	r3, #0
}
 800bcc4:	0018      	movs	r0, r3
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	b004      	add	sp, #16
 800bcca:	bd80      	pop	{r7, pc}

0800bccc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b086      	sub	sp, #24
 800bcd0:	af02      	add	r7, sp, #8
 800bcd2:	60f8      	str	r0, [r7, #12]
 800bcd4:	60b9      	str	r1, [r7, #8]
 800bcd6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800bcd8:	68ba      	ldr	r2, [r7, #8]
 800bcda:	23c0      	movs	r3, #192	; 0xc0
 800bcdc:	0159      	lsls	r1, r3, #5
 800bcde:	68f8      	ldr	r0, [r7, #12]
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	9300      	str	r3, [sp, #0]
 800bce4:	0013      	movs	r3, r2
 800bce6:	2200      	movs	r2, #0
 800bce8:	f7ff fef0 	bl	800bacc <SPI_WaitFifoStateUntilTimeout>
 800bcec:	1e03      	subs	r3, r0, #0
 800bcee:	d007      	beq.n	800bd00 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bcf4:	2220      	movs	r2, #32
 800bcf6:	431a      	orrs	r2, r3
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800bcfc:	2303      	movs	r3, #3
 800bcfe:	e027      	b.n	800bd50 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bd00:	68ba      	ldr	r2, [r7, #8]
 800bd02:	68f8      	ldr	r0, [r7, #12]
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	9300      	str	r3, [sp, #0]
 800bd08:	0013      	movs	r3, r2
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	2180      	movs	r1, #128	; 0x80
 800bd0e:	f7ff fe4f 	bl	800b9b0 <SPI_WaitFlagStateUntilTimeout>
 800bd12:	1e03      	subs	r3, r0, #0
 800bd14:	d007      	beq.n	800bd26 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bd1a:	2220      	movs	r2, #32
 800bd1c:	431a      	orrs	r2, r3
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800bd22:	2303      	movs	r3, #3
 800bd24:	e014      	b.n	800bd50 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800bd26:	68ba      	ldr	r2, [r7, #8]
 800bd28:	23c0      	movs	r3, #192	; 0xc0
 800bd2a:	00d9      	lsls	r1, r3, #3
 800bd2c:	68f8      	ldr	r0, [r7, #12]
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	9300      	str	r3, [sp, #0]
 800bd32:	0013      	movs	r3, r2
 800bd34:	2200      	movs	r2, #0
 800bd36:	f7ff fec9 	bl	800bacc <SPI_WaitFifoStateUntilTimeout>
 800bd3a:	1e03      	subs	r3, r0, #0
 800bd3c:	d007      	beq.n	800bd4e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bd42:	2220      	movs	r2, #32
 800bd44:	431a      	orrs	r2, r3
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800bd4a:	2303      	movs	r3, #3
 800bd4c:	e000      	b.n	800bd50 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800bd4e:	2300      	movs	r3, #0
}
 800bd50:	0018      	movs	r0, r3
 800bd52:	46bd      	mov	sp, r7
 800bd54:	b004      	add	sp, #16
 800bd56:	bd80      	pop	{r7, pc}

0800bd58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b082      	sub	sp, #8
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d101      	bne.n	800bd6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bd66:	2301      	movs	r3, #1
 800bd68:	e04a      	b.n	800be00 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	223d      	movs	r2, #61	; 0x3d
 800bd6e:	5c9b      	ldrb	r3, [r3, r2]
 800bd70:	b2db      	uxtb	r3, r3
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d107      	bne.n	800bd86 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	223c      	movs	r2, #60	; 0x3c
 800bd7a:	2100      	movs	r1, #0
 800bd7c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	0018      	movs	r0, r3
 800bd82:	f7fc fd09 	bl	8008798 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	223d      	movs	r2, #61	; 0x3d
 800bd8a:	2102      	movs	r1, #2
 800bd8c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681a      	ldr	r2, [r3, #0]
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	3304      	adds	r3, #4
 800bd96:	0019      	movs	r1, r3
 800bd98:	0010      	movs	r0, r2
 800bd9a:	f000 fd0f 	bl	800c7bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2248      	movs	r2, #72	; 0x48
 800bda2:	2101      	movs	r1, #1
 800bda4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	223e      	movs	r2, #62	; 0x3e
 800bdaa:	2101      	movs	r1, #1
 800bdac:	5499      	strb	r1, [r3, r2]
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	223f      	movs	r2, #63	; 0x3f
 800bdb2:	2101      	movs	r1, #1
 800bdb4:	5499      	strb	r1, [r3, r2]
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2240      	movs	r2, #64	; 0x40
 800bdba:	2101      	movs	r1, #1
 800bdbc:	5499      	strb	r1, [r3, r2]
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	2241      	movs	r2, #65	; 0x41
 800bdc2:	2101      	movs	r1, #1
 800bdc4:	5499      	strb	r1, [r3, r2]
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	2242      	movs	r2, #66	; 0x42
 800bdca:	2101      	movs	r1, #1
 800bdcc:	5499      	strb	r1, [r3, r2]
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	2243      	movs	r2, #67	; 0x43
 800bdd2:	2101      	movs	r1, #1
 800bdd4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2244      	movs	r2, #68	; 0x44
 800bdda:	2101      	movs	r1, #1
 800bddc:	5499      	strb	r1, [r3, r2]
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	2245      	movs	r2, #69	; 0x45
 800bde2:	2101      	movs	r1, #1
 800bde4:	5499      	strb	r1, [r3, r2]
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	2246      	movs	r2, #70	; 0x46
 800bdea:	2101      	movs	r1, #1
 800bdec:	5499      	strb	r1, [r3, r2]
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	2247      	movs	r2, #71	; 0x47
 800bdf2:	2101      	movs	r1, #1
 800bdf4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	223d      	movs	r2, #61	; 0x3d
 800bdfa:	2101      	movs	r1, #1
 800bdfc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bdfe:	2300      	movs	r3, #0
}
 800be00:	0018      	movs	r0, r3
 800be02:	46bd      	mov	sp, r7
 800be04:	b002      	add	sp, #8
 800be06:	bd80      	pop	{r7, pc}

0800be08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b084      	sub	sp, #16
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	223d      	movs	r2, #61	; 0x3d
 800be14:	5c9b      	ldrb	r3, [r3, r2]
 800be16:	b2db      	uxtb	r3, r3
 800be18:	2b01      	cmp	r3, #1
 800be1a:	d001      	beq.n	800be20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800be1c:	2301      	movs	r3, #1
 800be1e:	e03c      	b.n	800be9a <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	223d      	movs	r2, #61	; 0x3d
 800be24:	2102      	movs	r1, #2
 800be26:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	68da      	ldr	r2, [r3, #12]
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	2101      	movs	r1, #1
 800be34:	430a      	orrs	r2, r1
 800be36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	4a19      	ldr	r2, [pc, #100]	; (800bea4 <HAL_TIM_Base_Start_IT+0x9c>)
 800be3e:	4293      	cmp	r3, r2
 800be40:	d009      	beq.n	800be56 <HAL_TIM_Base_Start_IT+0x4e>
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	4a18      	ldr	r2, [pc, #96]	; (800bea8 <HAL_TIM_Base_Start_IT+0xa0>)
 800be48:	4293      	cmp	r3, r2
 800be4a:	d004      	beq.n	800be56 <HAL_TIM_Base_Start_IT+0x4e>
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	4a16      	ldr	r2, [pc, #88]	; (800beac <HAL_TIM_Base_Start_IT+0xa4>)
 800be52:	4293      	cmp	r3, r2
 800be54:	d116      	bne.n	800be84 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	689b      	ldr	r3, [r3, #8]
 800be5c:	4a14      	ldr	r2, [pc, #80]	; (800beb0 <HAL_TIM_Base_Start_IT+0xa8>)
 800be5e:	4013      	ands	r3, r2
 800be60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	2b06      	cmp	r3, #6
 800be66:	d016      	beq.n	800be96 <HAL_TIM_Base_Start_IT+0x8e>
 800be68:	68fa      	ldr	r2, [r7, #12]
 800be6a:	2380      	movs	r3, #128	; 0x80
 800be6c:	025b      	lsls	r3, r3, #9
 800be6e:	429a      	cmp	r2, r3
 800be70:	d011      	beq.n	800be96 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	681a      	ldr	r2, [r3, #0]
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	2101      	movs	r1, #1
 800be7e:	430a      	orrs	r2, r1
 800be80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be82:	e008      	b.n	800be96 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	681a      	ldr	r2, [r3, #0]
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	2101      	movs	r1, #1
 800be90:	430a      	orrs	r2, r1
 800be92:	601a      	str	r2, [r3, #0]
 800be94:	e000      	b.n	800be98 <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be96:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800be98:	2300      	movs	r3, #0
}
 800be9a:	0018      	movs	r0, r3
 800be9c:	46bd      	mov	sp, r7
 800be9e:	b004      	add	sp, #16
 800bea0:	bd80      	pop	{r7, pc}
 800bea2:	46c0      	nop			; (mov r8, r8)
 800bea4:	40012c00 	.word	0x40012c00
 800bea8:	40000400 	.word	0x40000400
 800beac:	40014000 	.word	0x40014000
 800beb0:	00010007 	.word	0x00010007

0800beb4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b082      	sub	sp, #8
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	68da      	ldr	r2, [r3, #12]
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	2101      	movs	r1, #1
 800bec8:	438a      	bics	r2, r1
 800beca:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	6a1b      	ldr	r3, [r3, #32]
 800bed2:	4a0d      	ldr	r2, [pc, #52]	; (800bf08 <HAL_TIM_Base_Stop_IT+0x54>)
 800bed4:	4013      	ands	r3, r2
 800bed6:	d10d      	bne.n	800bef4 <HAL_TIM_Base_Stop_IT+0x40>
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	6a1b      	ldr	r3, [r3, #32]
 800bede:	4a0b      	ldr	r2, [pc, #44]	; (800bf0c <HAL_TIM_Base_Stop_IT+0x58>)
 800bee0:	4013      	ands	r3, r2
 800bee2:	d107      	bne.n	800bef4 <HAL_TIM_Base_Stop_IT+0x40>
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	681a      	ldr	r2, [r3, #0]
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	2101      	movs	r1, #1
 800bef0:	438a      	bics	r2, r1
 800bef2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	223d      	movs	r2, #61	; 0x3d
 800bef8:	2101      	movs	r1, #1
 800befa:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800befc:	2300      	movs	r3, #0
}
 800befe:	0018      	movs	r0, r3
 800bf00:	46bd      	mov	sp, r7
 800bf02:	b002      	add	sp, #8
 800bf04:	bd80      	pop	{r7, pc}
 800bf06:	46c0      	nop			; (mov r8, r8)
 800bf08:	00001111 	.word	0x00001111
 800bf0c:	00000444 	.word	0x00000444

0800bf10 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b082      	sub	sp, #8
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d101      	bne.n	800bf22 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800bf1e:	2301      	movs	r3, #1
 800bf20:	e04a      	b.n	800bfb8 <HAL_TIM_IC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	223d      	movs	r2, #61	; 0x3d
 800bf26:	5c9b      	ldrb	r3, [r3, r2]
 800bf28:	b2db      	uxtb	r3, r3
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d107      	bne.n	800bf3e <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	223c      	movs	r2, #60	; 0x3c
 800bf32:	2100      	movs	r1, #0
 800bf34:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	0018      	movs	r0, r3
 800bf3a:	f000 f841 	bl	800bfc0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	223d      	movs	r2, #61	; 0x3d
 800bf42:	2102      	movs	r1, #2
 800bf44:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681a      	ldr	r2, [r3, #0]
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	3304      	adds	r3, #4
 800bf4e:	0019      	movs	r1, r3
 800bf50:	0010      	movs	r0, r2
 800bf52:	f000 fc33 	bl	800c7bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	2248      	movs	r2, #72	; 0x48
 800bf5a:	2101      	movs	r1, #1
 800bf5c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	223e      	movs	r2, #62	; 0x3e
 800bf62:	2101      	movs	r1, #1
 800bf64:	5499      	strb	r1, [r3, r2]
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	223f      	movs	r2, #63	; 0x3f
 800bf6a:	2101      	movs	r1, #1
 800bf6c:	5499      	strb	r1, [r3, r2]
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2240      	movs	r2, #64	; 0x40
 800bf72:	2101      	movs	r1, #1
 800bf74:	5499      	strb	r1, [r3, r2]
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	2241      	movs	r2, #65	; 0x41
 800bf7a:	2101      	movs	r1, #1
 800bf7c:	5499      	strb	r1, [r3, r2]
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	2242      	movs	r2, #66	; 0x42
 800bf82:	2101      	movs	r1, #1
 800bf84:	5499      	strb	r1, [r3, r2]
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2243      	movs	r2, #67	; 0x43
 800bf8a:	2101      	movs	r1, #1
 800bf8c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2244      	movs	r2, #68	; 0x44
 800bf92:	2101      	movs	r1, #1
 800bf94:	5499      	strb	r1, [r3, r2]
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2245      	movs	r2, #69	; 0x45
 800bf9a:	2101      	movs	r1, #1
 800bf9c:	5499      	strb	r1, [r3, r2]
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	2246      	movs	r2, #70	; 0x46
 800bfa2:	2101      	movs	r1, #1
 800bfa4:	5499      	strb	r1, [r3, r2]
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2247      	movs	r2, #71	; 0x47
 800bfaa:	2101      	movs	r1, #1
 800bfac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	223d      	movs	r2, #61	; 0x3d
 800bfb2:	2101      	movs	r1, #1
 800bfb4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bfb6:	2300      	movs	r3, #0
}
 800bfb8:	0018      	movs	r0, r3
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	b002      	add	sp, #8
 800bfbe:	bd80      	pop	{r7, pc}

0800bfc0 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b082      	sub	sp, #8
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800bfc8:	46c0      	nop			; (mov r8, r8)
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	b002      	add	sp, #8
 800bfce:	bd80      	pop	{r7, pc}

0800bfd0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b084      	sub	sp, #16
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
 800bfd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bfda:	230f      	movs	r3, #15
 800bfdc:	18fb      	adds	r3, r7, r3
 800bfde:	2200      	movs	r2, #0
 800bfe0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d104      	bne.n	800bff2 <HAL_TIM_IC_Start_IT+0x22>
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	223e      	movs	r2, #62	; 0x3e
 800bfec:	5c9b      	ldrb	r3, [r3, r2]
 800bfee:	b2db      	uxtb	r3, r3
 800bff0:	e023      	b.n	800c03a <HAL_TIM_IC_Start_IT+0x6a>
 800bff2:	683b      	ldr	r3, [r7, #0]
 800bff4:	2b04      	cmp	r3, #4
 800bff6:	d104      	bne.n	800c002 <HAL_TIM_IC_Start_IT+0x32>
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	223f      	movs	r2, #63	; 0x3f
 800bffc:	5c9b      	ldrb	r3, [r3, r2]
 800bffe:	b2db      	uxtb	r3, r3
 800c000:	e01b      	b.n	800c03a <HAL_TIM_IC_Start_IT+0x6a>
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	2b08      	cmp	r3, #8
 800c006:	d104      	bne.n	800c012 <HAL_TIM_IC_Start_IT+0x42>
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2240      	movs	r2, #64	; 0x40
 800c00c:	5c9b      	ldrb	r3, [r3, r2]
 800c00e:	b2db      	uxtb	r3, r3
 800c010:	e013      	b.n	800c03a <HAL_TIM_IC_Start_IT+0x6a>
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	2b0c      	cmp	r3, #12
 800c016:	d104      	bne.n	800c022 <HAL_TIM_IC_Start_IT+0x52>
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2241      	movs	r2, #65	; 0x41
 800c01c:	5c9b      	ldrb	r3, [r3, r2]
 800c01e:	b2db      	uxtb	r3, r3
 800c020:	e00b      	b.n	800c03a <HAL_TIM_IC_Start_IT+0x6a>
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	2b10      	cmp	r3, #16
 800c026:	d104      	bne.n	800c032 <HAL_TIM_IC_Start_IT+0x62>
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2242      	movs	r2, #66	; 0x42
 800c02c:	5c9b      	ldrb	r3, [r3, r2]
 800c02e:	b2db      	uxtb	r3, r3
 800c030:	e003      	b.n	800c03a <HAL_TIM_IC_Start_IT+0x6a>
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	2243      	movs	r2, #67	; 0x43
 800c036:	5c9b      	ldrb	r3, [r3, r2]
 800c038:	b2db      	uxtb	r3, r3
 800c03a:	220e      	movs	r2, #14
 800c03c:	18ba      	adds	r2, r7, r2
 800c03e:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d104      	bne.n	800c050 <HAL_TIM_IC_Start_IT+0x80>
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	2244      	movs	r2, #68	; 0x44
 800c04a:	5c9b      	ldrb	r3, [r3, r2]
 800c04c:	b2db      	uxtb	r3, r3
 800c04e:	e013      	b.n	800c078 <HAL_TIM_IC_Start_IT+0xa8>
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	2b04      	cmp	r3, #4
 800c054:	d104      	bne.n	800c060 <HAL_TIM_IC_Start_IT+0x90>
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	2245      	movs	r2, #69	; 0x45
 800c05a:	5c9b      	ldrb	r3, [r3, r2]
 800c05c:	b2db      	uxtb	r3, r3
 800c05e:	e00b      	b.n	800c078 <HAL_TIM_IC_Start_IT+0xa8>
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	2b08      	cmp	r3, #8
 800c064:	d104      	bne.n	800c070 <HAL_TIM_IC_Start_IT+0xa0>
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	2246      	movs	r2, #70	; 0x46
 800c06a:	5c9b      	ldrb	r3, [r3, r2]
 800c06c:	b2db      	uxtb	r3, r3
 800c06e:	e003      	b.n	800c078 <HAL_TIM_IC_Start_IT+0xa8>
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2247      	movs	r2, #71	; 0x47
 800c074:	5c9b      	ldrb	r3, [r3, r2]
 800c076:	b2db      	uxtb	r3, r3
 800c078:	210d      	movs	r1, #13
 800c07a:	187a      	adds	r2, r7, r1
 800c07c:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800c07e:	230e      	movs	r3, #14
 800c080:	18fb      	adds	r3, r7, r3
 800c082:	781b      	ldrb	r3, [r3, #0]
 800c084:	2b01      	cmp	r3, #1
 800c086:	d103      	bne.n	800c090 <HAL_TIM_IC_Start_IT+0xc0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800c088:	187b      	adds	r3, r7, r1
 800c08a:	781b      	ldrb	r3, [r3, #0]
 800c08c:	2b01      	cmp	r3, #1
 800c08e:	d001      	beq.n	800c094 <HAL_TIM_IC_Start_IT+0xc4>
  {
    return HAL_ERROR;
 800c090:	2301      	movs	r3, #1
 800c092:	e0c2      	b.n	800c21a <HAL_TIM_IC_Start_IT+0x24a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d104      	bne.n	800c0a4 <HAL_TIM_IC_Start_IT+0xd4>
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	223e      	movs	r2, #62	; 0x3e
 800c09e:	2102      	movs	r1, #2
 800c0a0:	5499      	strb	r1, [r3, r2]
 800c0a2:	e023      	b.n	800c0ec <HAL_TIM_IC_Start_IT+0x11c>
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	2b04      	cmp	r3, #4
 800c0a8:	d104      	bne.n	800c0b4 <HAL_TIM_IC_Start_IT+0xe4>
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	223f      	movs	r2, #63	; 0x3f
 800c0ae:	2102      	movs	r1, #2
 800c0b0:	5499      	strb	r1, [r3, r2]
 800c0b2:	e01b      	b.n	800c0ec <HAL_TIM_IC_Start_IT+0x11c>
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	2b08      	cmp	r3, #8
 800c0b8:	d104      	bne.n	800c0c4 <HAL_TIM_IC_Start_IT+0xf4>
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	2240      	movs	r2, #64	; 0x40
 800c0be:	2102      	movs	r1, #2
 800c0c0:	5499      	strb	r1, [r3, r2]
 800c0c2:	e013      	b.n	800c0ec <HAL_TIM_IC_Start_IT+0x11c>
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	2b0c      	cmp	r3, #12
 800c0c8:	d104      	bne.n	800c0d4 <HAL_TIM_IC_Start_IT+0x104>
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	2241      	movs	r2, #65	; 0x41
 800c0ce:	2102      	movs	r1, #2
 800c0d0:	5499      	strb	r1, [r3, r2]
 800c0d2:	e00b      	b.n	800c0ec <HAL_TIM_IC_Start_IT+0x11c>
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	2b10      	cmp	r3, #16
 800c0d8:	d104      	bne.n	800c0e4 <HAL_TIM_IC_Start_IT+0x114>
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	2242      	movs	r2, #66	; 0x42
 800c0de:	2102      	movs	r1, #2
 800c0e0:	5499      	strb	r1, [r3, r2]
 800c0e2:	e003      	b.n	800c0ec <HAL_TIM_IC_Start_IT+0x11c>
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2243      	movs	r2, #67	; 0x43
 800c0e8:	2102      	movs	r1, #2
 800c0ea:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d104      	bne.n	800c0fc <HAL_TIM_IC_Start_IT+0x12c>
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	2244      	movs	r2, #68	; 0x44
 800c0f6:	2102      	movs	r1, #2
 800c0f8:	5499      	strb	r1, [r3, r2]
 800c0fa:	e013      	b.n	800c124 <HAL_TIM_IC_Start_IT+0x154>
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	2b04      	cmp	r3, #4
 800c100:	d104      	bne.n	800c10c <HAL_TIM_IC_Start_IT+0x13c>
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2245      	movs	r2, #69	; 0x45
 800c106:	2102      	movs	r1, #2
 800c108:	5499      	strb	r1, [r3, r2]
 800c10a:	e00b      	b.n	800c124 <HAL_TIM_IC_Start_IT+0x154>
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	2b08      	cmp	r3, #8
 800c110:	d104      	bne.n	800c11c <HAL_TIM_IC_Start_IT+0x14c>
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	2246      	movs	r2, #70	; 0x46
 800c116:	2102      	movs	r1, #2
 800c118:	5499      	strb	r1, [r3, r2]
 800c11a:	e003      	b.n	800c124 <HAL_TIM_IC_Start_IT+0x154>
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2247      	movs	r2, #71	; 0x47
 800c120:	2102      	movs	r1, #2
 800c122:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	2b0c      	cmp	r3, #12
 800c128:	d02a      	beq.n	800c180 <HAL_TIM_IC_Start_IT+0x1b0>
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	2b0c      	cmp	r3, #12
 800c12e:	d830      	bhi.n	800c192 <HAL_TIM_IC_Start_IT+0x1c2>
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	2b08      	cmp	r3, #8
 800c134:	d01b      	beq.n	800c16e <HAL_TIM_IC_Start_IT+0x19e>
 800c136:	683b      	ldr	r3, [r7, #0]
 800c138:	2b08      	cmp	r3, #8
 800c13a:	d82a      	bhi.n	800c192 <HAL_TIM_IC_Start_IT+0x1c2>
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d003      	beq.n	800c14a <HAL_TIM_IC_Start_IT+0x17a>
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	2b04      	cmp	r3, #4
 800c146:	d009      	beq.n	800c15c <HAL_TIM_IC_Start_IT+0x18c>
 800c148:	e023      	b.n	800c192 <HAL_TIM_IC_Start_IT+0x1c2>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	68da      	ldr	r2, [r3, #12]
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	2102      	movs	r1, #2
 800c156:	430a      	orrs	r2, r1
 800c158:	60da      	str	r2, [r3, #12]
      break;
 800c15a:	e01f      	b.n	800c19c <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	68da      	ldr	r2, [r3, #12]
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	2104      	movs	r1, #4
 800c168:	430a      	orrs	r2, r1
 800c16a:	60da      	str	r2, [r3, #12]
      break;
 800c16c:	e016      	b.n	800c19c <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	68da      	ldr	r2, [r3, #12]
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	2108      	movs	r1, #8
 800c17a:	430a      	orrs	r2, r1
 800c17c:	60da      	str	r2, [r3, #12]
      break;
 800c17e:	e00d      	b.n	800c19c <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	68da      	ldr	r2, [r3, #12]
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	2110      	movs	r1, #16
 800c18c:	430a      	orrs	r2, r1
 800c18e:	60da      	str	r2, [r3, #12]
      break;
 800c190:	e004      	b.n	800c19c <HAL_TIM_IC_Start_IT+0x1cc>
    }

    default:
      status = HAL_ERROR;
 800c192:	230f      	movs	r3, #15
 800c194:	18fb      	adds	r3, r7, r3
 800c196:	2201      	movs	r2, #1
 800c198:	701a      	strb	r2, [r3, #0]
      break;
 800c19a:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 800c19c:	230f      	movs	r3, #15
 800c19e:	18fb      	adds	r3, r7, r3
 800c1a0:	781b      	ldrb	r3, [r3, #0]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d136      	bne.n	800c214 <HAL_TIM_IC_Start_IT+0x244>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	6839      	ldr	r1, [r7, #0]
 800c1ac:	2201      	movs	r2, #1
 800c1ae:	0018      	movs	r0, r3
 800c1b0:	f000 fd36 	bl	800cc20 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	4a1a      	ldr	r2, [pc, #104]	; (800c224 <HAL_TIM_IC_Start_IT+0x254>)
 800c1ba:	4293      	cmp	r3, r2
 800c1bc:	d009      	beq.n	800c1d2 <HAL_TIM_IC_Start_IT+0x202>
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	4a19      	ldr	r2, [pc, #100]	; (800c228 <HAL_TIM_IC_Start_IT+0x258>)
 800c1c4:	4293      	cmp	r3, r2
 800c1c6:	d004      	beq.n	800c1d2 <HAL_TIM_IC_Start_IT+0x202>
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	4a17      	ldr	r2, [pc, #92]	; (800c22c <HAL_TIM_IC_Start_IT+0x25c>)
 800c1ce:	4293      	cmp	r3, r2
 800c1d0:	d116      	bne.n	800c200 <HAL_TIM_IC_Start_IT+0x230>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	689b      	ldr	r3, [r3, #8]
 800c1d8:	4a15      	ldr	r2, [pc, #84]	; (800c230 <HAL_TIM_IC_Start_IT+0x260>)
 800c1da:	4013      	ands	r3, r2
 800c1dc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c1de:	68bb      	ldr	r3, [r7, #8]
 800c1e0:	2b06      	cmp	r3, #6
 800c1e2:	d016      	beq.n	800c212 <HAL_TIM_IC_Start_IT+0x242>
 800c1e4:	68ba      	ldr	r2, [r7, #8]
 800c1e6:	2380      	movs	r3, #128	; 0x80
 800c1e8:	025b      	lsls	r3, r3, #9
 800c1ea:	429a      	cmp	r2, r3
 800c1ec:	d011      	beq.n	800c212 <HAL_TIM_IC_Start_IT+0x242>
      {
        __HAL_TIM_ENABLE(htim);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	681a      	ldr	r2, [r3, #0]
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	2101      	movs	r1, #1
 800c1fa:	430a      	orrs	r2, r1
 800c1fc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c1fe:	e008      	b.n	800c212 <HAL_TIM_IC_Start_IT+0x242>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	681a      	ldr	r2, [r3, #0]
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	2101      	movs	r1, #1
 800c20c:	430a      	orrs	r2, r1
 800c20e:	601a      	str	r2, [r3, #0]
 800c210:	e000      	b.n	800c214 <HAL_TIM_IC_Start_IT+0x244>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c212:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 800c214:	230f      	movs	r3, #15
 800c216:	18fb      	adds	r3, r7, r3
 800c218:	781b      	ldrb	r3, [r3, #0]
}
 800c21a:	0018      	movs	r0, r3
 800c21c:	46bd      	mov	sp, r7
 800c21e:	b004      	add	sp, #16
 800c220:	bd80      	pop	{r7, pc}
 800c222:	46c0      	nop			; (mov r8, r8)
 800c224:	40012c00 	.word	0x40012c00
 800c228:	40000400 	.word	0x40000400
 800c22c:	40014000 	.word	0x40014000
 800c230:	00010007 	.word	0x00010007

0800c234 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c234:	b580      	push	{r7, lr}
 800c236:	b082      	sub	sp, #8
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	691b      	ldr	r3, [r3, #16]
 800c242:	2202      	movs	r2, #2
 800c244:	4013      	ands	r3, r2
 800c246:	2b02      	cmp	r3, #2
 800c248:	d124      	bne.n	800c294 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	68db      	ldr	r3, [r3, #12]
 800c250:	2202      	movs	r2, #2
 800c252:	4013      	ands	r3, r2
 800c254:	2b02      	cmp	r3, #2
 800c256:	d11d      	bne.n	800c294 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	2203      	movs	r2, #3
 800c25e:	4252      	negs	r2, r2
 800c260:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2201      	movs	r2, #1
 800c266:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	699b      	ldr	r3, [r3, #24]
 800c26e:	2203      	movs	r2, #3
 800c270:	4013      	ands	r3, r2
 800c272:	d004      	beq.n	800c27e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	0018      	movs	r0, r3
 800c278:	f7fb fa38 	bl	80076ec <HAL_TIM_IC_CaptureCallback>
 800c27c:	e007      	b.n	800c28e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	0018      	movs	r0, r3
 800c282:	f000 fa83 	bl	800c78c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	0018      	movs	r0, r3
 800c28a:	f000 fa87 	bl	800c79c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2200      	movs	r2, #0
 800c292:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	691b      	ldr	r3, [r3, #16]
 800c29a:	2204      	movs	r2, #4
 800c29c:	4013      	ands	r3, r2
 800c29e:	2b04      	cmp	r3, #4
 800c2a0:	d125      	bne.n	800c2ee <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	68db      	ldr	r3, [r3, #12]
 800c2a8:	2204      	movs	r2, #4
 800c2aa:	4013      	ands	r3, r2
 800c2ac:	2b04      	cmp	r3, #4
 800c2ae:	d11e      	bne.n	800c2ee <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	2205      	movs	r2, #5
 800c2b6:	4252      	negs	r2, r2
 800c2b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	2202      	movs	r2, #2
 800c2be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	699a      	ldr	r2, [r3, #24]
 800c2c6:	23c0      	movs	r3, #192	; 0xc0
 800c2c8:	009b      	lsls	r3, r3, #2
 800c2ca:	4013      	ands	r3, r2
 800c2cc:	d004      	beq.n	800c2d8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	0018      	movs	r0, r3
 800c2d2:	f7fb fa0b 	bl	80076ec <HAL_TIM_IC_CaptureCallback>
 800c2d6:	e007      	b.n	800c2e8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	0018      	movs	r0, r3
 800c2dc:	f000 fa56 	bl	800c78c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	0018      	movs	r0, r3
 800c2e4:	f000 fa5a 	bl	800c79c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	691b      	ldr	r3, [r3, #16]
 800c2f4:	2208      	movs	r2, #8
 800c2f6:	4013      	ands	r3, r2
 800c2f8:	2b08      	cmp	r3, #8
 800c2fa:	d124      	bne.n	800c346 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	68db      	ldr	r3, [r3, #12]
 800c302:	2208      	movs	r2, #8
 800c304:	4013      	ands	r3, r2
 800c306:	2b08      	cmp	r3, #8
 800c308:	d11d      	bne.n	800c346 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	2209      	movs	r2, #9
 800c310:	4252      	negs	r2, r2
 800c312:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2204      	movs	r2, #4
 800c318:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	69db      	ldr	r3, [r3, #28]
 800c320:	2203      	movs	r2, #3
 800c322:	4013      	ands	r3, r2
 800c324:	d004      	beq.n	800c330 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	0018      	movs	r0, r3
 800c32a:	f7fb f9df 	bl	80076ec <HAL_TIM_IC_CaptureCallback>
 800c32e:	e007      	b.n	800c340 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	0018      	movs	r0, r3
 800c334:	f000 fa2a 	bl	800c78c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	0018      	movs	r0, r3
 800c33c:	f000 fa2e 	bl	800c79c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	2200      	movs	r2, #0
 800c344:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	691b      	ldr	r3, [r3, #16]
 800c34c:	2210      	movs	r2, #16
 800c34e:	4013      	ands	r3, r2
 800c350:	2b10      	cmp	r3, #16
 800c352:	d125      	bne.n	800c3a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	68db      	ldr	r3, [r3, #12]
 800c35a:	2210      	movs	r2, #16
 800c35c:	4013      	ands	r3, r2
 800c35e:	2b10      	cmp	r3, #16
 800c360:	d11e      	bne.n	800c3a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	2211      	movs	r2, #17
 800c368:	4252      	negs	r2, r2
 800c36a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2208      	movs	r2, #8
 800c370:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	69da      	ldr	r2, [r3, #28]
 800c378:	23c0      	movs	r3, #192	; 0xc0
 800c37a:	009b      	lsls	r3, r3, #2
 800c37c:	4013      	ands	r3, r2
 800c37e:	d004      	beq.n	800c38a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	0018      	movs	r0, r3
 800c384:	f7fb f9b2 	bl	80076ec <HAL_TIM_IC_CaptureCallback>
 800c388:	e007      	b.n	800c39a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	0018      	movs	r0, r3
 800c38e:	f000 f9fd 	bl	800c78c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	0018      	movs	r0, r3
 800c396:	f000 fa01 	bl	800c79c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	2200      	movs	r2, #0
 800c39e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	691b      	ldr	r3, [r3, #16]
 800c3a6:	2201      	movs	r2, #1
 800c3a8:	4013      	ands	r3, r2
 800c3aa:	2b01      	cmp	r3, #1
 800c3ac:	d10f      	bne.n	800c3ce <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	68db      	ldr	r3, [r3, #12]
 800c3b4:	2201      	movs	r2, #1
 800c3b6:	4013      	ands	r3, r2
 800c3b8:	2b01      	cmp	r3, #1
 800c3ba:	d108      	bne.n	800c3ce <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	2202      	movs	r2, #2
 800c3c2:	4252      	negs	r2, r2
 800c3c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	0018      	movs	r0, r3
 800c3ca:	f7f8 f9c7 	bl	800475c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	691b      	ldr	r3, [r3, #16]
 800c3d4:	2280      	movs	r2, #128	; 0x80
 800c3d6:	4013      	ands	r3, r2
 800c3d8:	2b80      	cmp	r3, #128	; 0x80
 800c3da:	d10f      	bne.n	800c3fc <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	68db      	ldr	r3, [r3, #12]
 800c3e2:	2280      	movs	r2, #128	; 0x80
 800c3e4:	4013      	ands	r3, r2
 800c3e6:	2b80      	cmp	r3, #128	; 0x80
 800c3e8:	d108      	bne.n	800c3fc <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	2281      	movs	r2, #129	; 0x81
 800c3f0:	4252      	negs	r2, r2
 800c3f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	0018      	movs	r0, r3
 800c3f8:	f000 fca6 	bl	800cd48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	691a      	ldr	r2, [r3, #16]
 800c402:	2380      	movs	r3, #128	; 0x80
 800c404:	005b      	lsls	r3, r3, #1
 800c406:	401a      	ands	r2, r3
 800c408:	2380      	movs	r3, #128	; 0x80
 800c40a:	005b      	lsls	r3, r3, #1
 800c40c:	429a      	cmp	r2, r3
 800c40e:	d10e      	bne.n	800c42e <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	68db      	ldr	r3, [r3, #12]
 800c416:	2280      	movs	r2, #128	; 0x80
 800c418:	4013      	ands	r3, r2
 800c41a:	2b80      	cmp	r3, #128	; 0x80
 800c41c:	d107      	bne.n	800c42e <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	4a1c      	ldr	r2, [pc, #112]	; (800c494 <HAL_TIM_IRQHandler+0x260>)
 800c424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	0018      	movs	r0, r3
 800c42a:	f000 fc95 	bl	800cd58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	691b      	ldr	r3, [r3, #16]
 800c434:	2240      	movs	r2, #64	; 0x40
 800c436:	4013      	ands	r3, r2
 800c438:	2b40      	cmp	r3, #64	; 0x40
 800c43a:	d10f      	bne.n	800c45c <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	68db      	ldr	r3, [r3, #12]
 800c442:	2240      	movs	r2, #64	; 0x40
 800c444:	4013      	ands	r3, r2
 800c446:	2b40      	cmp	r3, #64	; 0x40
 800c448:	d108      	bne.n	800c45c <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	2241      	movs	r2, #65	; 0x41
 800c450:	4252      	negs	r2, r2
 800c452:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	0018      	movs	r0, r3
 800c458:	f000 f9a8 	bl	800c7ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	691b      	ldr	r3, [r3, #16]
 800c462:	2220      	movs	r2, #32
 800c464:	4013      	ands	r3, r2
 800c466:	2b20      	cmp	r3, #32
 800c468:	d10f      	bne.n	800c48a <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	68db      	ldr	r3, [r3, #12]
 800c470:	2220      	movs	r2, #32
 800c472:	4013      	ands	r3, r2
 800c474:	2b20      	cmp	r3, #32
 800c476:	d108      	bne.n	800c48a <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	2221      	movs	r2, #33	; 0x21
 800c47e:	4252      	negs	r2, r2
 800c480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	0018      	movs	r0, r3
 800c486:	f000 fc57 	bl	800cd38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c48a:	46c0      	nop			; (mov r8, r8)
 800c48c:	46bd      	mov	sp, r7
 800c48e:	b002      	add	sp, #8
 800c490:	bd80      	pop	{r7, pc}
 800c492:	46c0      	nop			; (mov r8, r8)
 800c494:	fffffeff 	.word	0xfffffeff

0800c498 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b086      	sub	sp, #24
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	60f8      	str	r0, [r7, #12]
 800c4a0:	60b9      	str	r1, [r7, #8]
 800c4a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c4a4:	2317      	movs	r3, #23
 800c4a6:	18fb      	adds	r3, r7, r3
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	223c      	movs	r2, #60	; 0x3c
 800c4b0:	5c9b      	ldrb	r3, [r3, r2]
 800c4b2:	2b01      	cmp	r3, #1
 800c4b4:	d101      	bne.n	800c4ba <HAL_TIM_IC_ConfigChannel+0x22>
 800c4b6:	2302      	movs	r3, #2
 800c4b8:	e08c      	b.n	800c5d4 <HAL_TIM_IC_ConfigChannel+0x13c>
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	223c      	movs	r2, #60	; 0x3c
 800c4be:	2101      	movs	r1, #1
 800c4c0:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d11b      	bne.n	800c500 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	6818      	ldr	r0, [r3, #0]
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	6819      	ldr	r1, [r3, #0]
 800c4d0:	68bb      	ldr	r3, [r7, #8]
 800c4d2:	685a      	ldr	r2, [r3, #4]
 800c4d4:	68bb      	ldr	r3, [r7, #8]
 800c4d6:	68db      	ldr	r3, [r3, #12]
 800c4d8:	f000 f9e6 	bl	800c8a8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	699a      	ldr	r2, [r3, #24]
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	210c      	movs	r1, #12
 800c4e8:	438a      	bics	r2, r1
 800c4ea:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	6999      	ldr	r1, [r3, #24]
 800c4f2:	68bb      	ldr	r3, [r7, #8]
 800c4f4:	689a      	ldr	r2, [r3, #8]
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	430a      	orrs	r2, r1
 800c4fc:	619a      	str	r2, [r3, #24]
 800c4fe:	e062      	b.n	800c5c6 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	2b04      	cmp	r3, #4
 800c504:	d11c      	bne.n	800c540 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	6818      	ldr	r0, [r3, #0]
 800c50a:	68bb      	ldr	r3, [r7, #8]
 800c50c:	6819      	ldr	r1, [r3, #0]
 800c50e:	68bb      	ldr	r3, [r7, #8]
 800c510:	685a      	ldr	r2, [r3, #4]
 800c512:	68bb      	ldr	r3, [r7, #8]
 800c514:	68db      	ldr	r3, [r3, #12]
 800c516:	f000 fa4d 	bl	800c9b4 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	699a      	ldr	r2, [r3, #24]
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	492d      	ldr	r1, [pc, #180]	; (800c5dc <HAL_TIM_IC_ConfigChannel+0x144>)
 800c526:	400a      	ands	r2, r1
 800c528:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	6999      	ldr	r1, [r3, #24]
 800c530:	68bb      	ldr	r3, [r7, #8]
 800c532:	689b      	ldr	r3, [r3, #8]
 800c534:	021a      	lsls	r2, r3, #8
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	430a      	orrs	r2, r1
 800c53c:	619a      	str	r2, [r3, #24]
 800c53e:	e042      	b.n	800c5c6 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	2b08      	cmp	r3, #8
 800c544:	d11b      	bne.n	800c57e <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	6818      	ldr	r0, [r3, #0]
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	6819      	ldr	r1, [r3, #0]
 800c54e:	68bb      	ldr	r3, [r7, #8]
 800c550:	685a      	ldr	r2, [r3, #4]
 800c552:	68bb      	ldr	r3, [r7, #8]
 800c554:	68db      	ldr	r3, [r3, #12]
 800c556:	f000 faa1 	bl	800ca9c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	69da      	ldr	r2, [r3, #28]
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	210c      	movs	r1, #12
 800c566:	438a      	bics	r2, r1
 800c568:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	69d9      	ldr	r1, [r3, #28]
 800c570:	68bb      	ldr	r3, [r7, #8]
 800c572:	689a      	ldr	r2, [r3, #8]
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	430a      	orrs	r2, r1
 800c57a:	61da      	str	r2, [r3, #28]
 800c57c:	e023      	b.n	800c5c6 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	2b0c      	cmp	r3, #12
 800c582:	d11c      	bne.n	800c5be <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	6818      	ldr	r0, [r3, #0]
 800c588:	68bb      	ldr	r3, [r7, #8]
 800c58a:	6819      	ldr	r1, [r3, #0]
 800c58c:	68bb      	ldr	r3, [r7, #8]
 800c58e:	685a      	ldr	r2, [r3, #4]
 800c590:	68bb      	ldr	r3, [r7, #8]
 800c592:	68db      	ldr	r3, [r3, #12]
 800c594:	f000 fac2 	bl	800cb1c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	69da      	ldr	r2, [r3, #28]
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	490e      	ldr	r1, [pc, #56]	; (800c5dc <HAL_TIM_IC_ConfigChannel+0x144>)
 800c5a4:	400a      	ands	r2, r1
 800c5a6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	69d9      	ldr	r1, [r3, #28]
 800c5ae:	68bb      	ldr	r3, [r7, #8]
 800c5b0:	689b      	ldr	r3, [r3, #8]
 800c5b2:	021a      	lsls	r2, r3, #8
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	430a      	orrs	r2, r1
 800c5ba:	61da      	str	r2, [r3, #28]
 800c5bc:	e003      	b.n	800c5c6 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 800c5be:	2317      	movs	r3, #23
 800c5c0:	18fb      	adds	r3, r7, r3
 800c5c2:	2201      	movs	r2, #1
 800c5c4:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	223c      	movs	r2, #60	; 0x3c
 800c5ca:	2100      	movs	r1, #0
 800c5cc:	5499      	strb	r1, [r3, r2]

  return status;
 800c5ce:	2317      	movs	r3, #23
 800c5d0:	18fb      	adds	r3, r7, r3
 800c5d2:	781b      	ldrb	r3, [r3, #0]
}
 800c5d4:	0018      	movs	r0, r3
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	b006      	add	sp, #24
 800c5da:	bd80      	pop	{r7, pc}
 800c5dc:	fffff3ff 	.word	0xfffff3ff

0800c5e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b084      	sub	sp, #16
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
 800c5e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c5ea:	230f      	movs	r3, #15
 800c5ec:	18fb      	adds	r3, r7, r3
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	223c      	movs	r2, #60	; 0x3c
 800c5f6:	5c9b      	ldrb	r3, [r3, r2]
 800c5f8:	2b01      	cmp	r3, #1
 800c5fa:	d101      	bne.n	800c600 <HAL_TIM_ConfigClockSource+0x20>
 800c5fc:	2302      	movs	r3, #2
 800c5fe:	e0bc      	b.n	800c77a <HAL_TIM_ConfigClockSource+0x19a>
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	223c      	movs	r2, #60	; 0x3c
 800c604:	2101      	movs	r1, #1
 800c606:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	223d      	movs	r2, #61	; 0x3d
 800c60c:	2102      	movs	r1, #2
 800c60e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	689b      	ldr	r3, [r3, #8]
 800c616:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c618:	68bb      	ldr	r3, [r7, #8]
 800c61a:	4a5a      	ldr	r2, [pc, #360]	; (800c784 <HAL_TIM_ConfigClockSource+0x1a4>)
 800c61c:	4013      	ands	r3, r2
 800c61e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c620:	68bb      	ldr	r3, [r7, #8]
 800c622:	4a59      	ldr	r2, [pc, #356]	; (800c788 <HAL_TIM_ConfigClockSource+0x1a8>)
 800c624:	4013      	ands	r3, r2
 800c626:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	68ba      	ldr	r2, [r7, #8]
 800c62e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c630:	683b      	ldr	r3, [r7, #0]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	2280      	movs	r2, #128	; 0x80
 800c636:	0192      	lsls	r2, r2, #6
 800c638:	4293      	cmp	r3, r2
 800c63a:	d040      	beq.n	800c6be <HAL_TIM_ConfigClockSource+0xde>
 800c63c:	2280      	movs	r2, #128	; 0x80
 800c63e:	0192      	lsls	r2, r2, #6
 800c640:	4293      	cmp	r3, r2
 800c642:	d900      	bls.n	800c646 <HAL_TIM_ConfigClockSource+0x66>
 800c644:	e088      	b.n	800c758 <HAL_TIM_ConfigClockSource+0x178>
 800c646:	2280      	movs	r2, #128	; 0x80
 800c648:	0152      	lsls	r2, r2, #5
 800c64a:	4293      	cmp	r3, r2
 800c64c:	d100      	bne.n	800c650 <HAL_TIM_ConfigClockSource+0x70>
 800c64e:	e088      	b.n	800c762 <HAL_TIM_ConfigClockSource+0x182>
 800c650:	2280      	movs	r2, #128	; 0x80
 800c652:	0152      	lsls	r2, r2, #5
 800c654:	4293      	cmp	r3, r2
 800c656:	d900      	bls.n	800c65a <HAL_TIM_ConfigClockSource+0x7a>
 800c658:	e07e      	b.n	800c758 <HAL_TIM_ConfigClockSource+0x178>
 800c65a:	2b70      	cmp	r3, #112	; 0x70
 800c65c:	d018      	beq.n	800c690 <HAL_TIM_ConfigClockSource+0xb0>
 800c65e:	d900      	bls.n	800c662 <HAL_TIM_ConfigClockSource+0x82>
 800c660:	e07a      	b.n	800c758 <HAL_TIM_ConfigClockSource+0x178>
 800c662:	2b60      	cmp	r3, #96	; 0x60
 800c664:	d04f      	beq.n	800c706 <HAL_TIM_ConfigClockSource+0x126>
 800c666:	d900      	bls.n	800c66a <HAL_TIM_ConfigClockSource+0x8a>
 800c668:	e076      	b.n	800c758 <HAL_TIM_ConfigClockSource+0x178>
 800c66a:	2b50      	cmp	r3, #80	; 0x50
 800c66c:	d03b      	beq.n	800c6e6 <HAL_TIM_ConfigClockSource+0x106>
 800c66e:	d900      	bls.n	800c672 <HAL_TIM_ConfigClockSource+0x92>
 800c670:	e072      	b.n	800c758 <HAL_TIM_ConfigClockSource+0x178>
 800c672:	2b40      	cmp	r3, #64	; 0x40
 800c674:	d057      	beq.n	800c726 <HAL_TIM_ConfigClockSource+0x146>
 800c676:	d900      	bls.n	800c67a <HAL_TIM_ConfigClockSource+0x9a>
 800c678:	e06e      	b.n	800c758 <HAL_TIM_ConfigClockSource+0x178>
 800c67a:	2b30      	cmp	r3, #48	; 0x30
 800c67c:	d063      	beq.n	800c746 <HAL_TIM_ConfigClockSource+0x166>
 800c67e:	d86b      	bhi.n	800c758 <HAL_TIM_ConfigClockSource+0x178>
 800c680:	2b20      	cmp	r3, #32
 800c682:	d060      	beq.n	800c746 <HAL_TIM_ConfigClockSource+0x166>
 800c684:	d868      	bhi.n	800c758 <HAL_TIM_ConfigClockSource+0x178>
 800c686:	2b00      	cmp	r3, #0
 800c688:	d05d      	beq.n	800c746 <HAL_TIM_ConfigClockSource+0x166>
 800c68a:	2b10      	cmp	r3, #16
 800c68c:	d05b      	beq.n	800c746 <HAL_TIM_ConfigClockSource+0x166>
 800c68e:	e063      	b.n	800c758 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	6818      	ldr	r0, [r3, #0]
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	6899      	ldr	r1, [r3, #8]
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	685a      	ldr	r2, [r3, #4]
 800c69c:	683b      	ldr	r3, [r7, #0]
 800c69e:	68db      	ldr	r3, [r3, #12]
 800c6a0:	f000 fa9e 	bl	800cbe0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	689b      	ldr	r3, [r3, #8]
 800c6aa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c6ac:	68bb      	ldr	r3, [r7, #8]
 800c6ae:	2277      	movs	r2, #119	; 0x77
 800c6b0:	4313      	orrs	r3, r2
 800c6b2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	68ba      	ldr	r2, [r7, #8]
 800c6ba:	609a      	str	r2, [r3, #8]
      break;
 800c6bc:	e052      	b.n	800c764 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	6818      	ldr	r0, [r3, #0]
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	6899      	ldr	r1, [r3, #8]
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	685a      	ldr	r2, [r3, #4]
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	68db      	ldr	r3, [r3, #12]
 800c6ce:	f000 fa87 	bl	800cbe0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	689a      	ldr	r2, [r3, #8]
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	2180      	movs	r1, #128	; 0x80
 800c6de:	01c9      	lsls	r1, r1, #7
 800c6e0:	430a      	orrs	r2, r1
 800c6e2:	609a      	str	r2, [r3, #8]
      break;
 800c6e4:	e03e      	b.n	800c764 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	6818      	ldr	r0, [r3, #0]
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	6859      	ldr	r1, [r3, #4]
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	68db      	ldr	r3, [r3, #12]
 800c6f2:	001a      	movs	r2, r3
 800c6f4:	f000 f930 	bl	800c958 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	2150      	movs	r1, #80	; 0x50
 800c6fe:	0018      	movs	r0, r3
 800c700:	f000 fa52 	bl	800cba8 <TIM_ITRx_SetConfig>
      break;
 800c704:	e02e      	b.n	800c764 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	6818      	ldr	r0, [r3, #0]
 800c70a:	683b      	ldr	r3, [r7, #0]
 800c70c:	6859      	ldr	r1, [r3, #4]
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	68db      	ldr	r3, [r3, #12]
 800c712:	001a      	movs	r2, r3
 800c714:	f000 f990 	bl	800ca38 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	2160      	movs	r1, #96	; 0x60
 800c71e:	0018      	movs	r0, r3
 800c720:	f000 fa42 	bl	800cba8 <TIM_ITRx_SetConfig>
      break;
 800c724:	e01e      	b.n	800c764 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	6818      	ldr	r0, [r3, #0]
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	6859      	ldr	r1, [r3, #4]
 800c72e:	683b      	ldr	r3, [r7, #0]
 800c730:	68db      	ldr	r3, [r3, #12]
 800c732:	001a      	movs	r2, r3
 800c734:	f000 f910 	bl	800c958 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	2140      	movs	r1, #64	; 0x40
 800c73e:	0018      	movs	r0, r3
 800c740:	f000 fa32 	bl	800cba8 <TIM_ITRx_SetConfig>
      break;
 800c744:	e00e      	b.n	800c764 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681a      	ldr	r2, [r3, #0]
 800c74a:	683b      	ldr	r3, [r7, #0]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	0019      	movs	r1, r3
 800c750:	0010      	movs	r0, r2
 800c752:	f000 fa29 	bl	800cba8 <TIM_ITRx_SetConfig>
      break;
 800c756:	e005      	b.n	800c764 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800c758:	230f      	movs	r3, #15
 800c75a:	18fb      	adds	r3, r7, r3
 800c75c:	2201      	movs	r2, #1
 800c75e:	701a      	strb	r2, [r3, #0]
      break;
 800c760:	e000      	b.n	800c764 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800c762:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	223d      	movs	r2, #61	; 0x3d
 800c768:	2101      	movs	r1, #1
 800c76a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	223c      	movs	r2, #60	; 0x3c
 800c770:	2100      	movs	r1, #0
 800c772:	5499      	strb	r1, [r3, r2]

  return status;
 800c774:	230f      	movs	r3, #15
 800c776:	18fb      	adds	r3, r7, r3
 800c778:	781b      	ldrb	r3, [r3, #0]
}
 800c77a:	0018      	movs	r0, r3
 800c77c:	46bd      	mov	sp, r7
 800c77e:	b004      	add	sp, #16
 800c780:	bd80      	pop	{r7, pc}
 800c782:	46c0      	nop			; (mov r8, r8)
 800c784:	ffceff88 	.word	0xffceff88
 800c788:	ffff00ff 	.word	0xffff00ff

0800c78c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b082      	sub	sp, #8
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c794:	46c0      	nop			; (mov r8, r8)
 800c796:	46bd      	mov	sp, r7
 800c798:	b002      	add	sp, #8
 800c79a:	bd80      	pop	{r7, pc}

0800c79c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b082      	sub	sp, #8
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c7a4:	46c0      	nop			; (mov r8, r8)
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	b002      	add	sp, #8
 800c7aa:	bd80      	pop	{r7, pc}

0800c7ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b082      	sub	sp, #8
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c7b4:	46c0      	nop			; (mov r8, r8)
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	b002      	add	sp, #8
 800c7ba:	bd80      	pop	{r7, pc}

0800c7bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b084      	sub	sp, #16
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
 800c7c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	4a2f      	ldr	r2, [pc, #188]	; (800c88c <TIM_Base_SetConfig+0xd0>)
 800c7d0:	4293      	cmp	r3, r2
 800c7d2:	d003      	beq.n	800c7dc <TIM_Base_SetConfig+0x20>
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	4a2e      	ldr	r2, [pc, #184]	; (800c890 <TIM_Base_SetConfig+0xd4>)
 800c7d8:	4293      	cmp	r3, r2
 800c7da:	d108      	bne.n	800c7ee <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	2270      	movs	r2, #112	; 0x70
 800c7e0:	4393      	bics	r3, r2
 800c7e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	685b      	ldr	r3, [r3, #4]
 800c7e8:	68fa      	ldr	r2, [r7, #12]
 800c7ea:	4313      	orrs	r3, r2
 800c7ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	4a26      	ldr	r2, [pc, #152]	; (800c88c <TIM_Base_SetConfig+0xd0>)
 800c7f2:	4293      	cmp	r3, r2
 800c7f4:	d013      	beq.n	800c81e <TIM_Base_SetConfig+0x62>
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	4a25      	ldr	r2, [pc, #148]	; (800c890 <TIM_Base_SetConfig+0xd4>)
 800c7fa:	4293      	cmp	r3, r2
 800c7fc:	d00f      	beq.n	800c81e <TIM_Base_SetConfig+0x62>
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	4a24      	ldr	r2, [pc, #144]	; (800c894 <TIM_Base_SetConfig+0xd8>)
 800c802:	4293      	cmp	r3, r2
 800c804:	d00b      	beq.n	800c81e <TIM_Base_SetConfig+0x62>
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	4a23      	ldr	r2, [pc, #140]	; (800c898 <TIM_Base_SetConfig+0xdc>)
 800c80a:	4293      	cmp	r3, r2
 800c80c:	d007      	beq.n	800c81e <TIM_Base_SetConfig+0x62>
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	4a22      	ldr	r2, [pc, #136]	; (800c89c <TIM_Base_SetConfig+0xe0>)
 800c812:	4293      	cmp	r3, r2
 800c814:	d003      	beq.n	800c81e <TIM_Base_SetConfig+0x62>
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	4a21      	ldr	r2, [pc, #132]	; (800c8a0 <TIM_Base_SetConfig+0xe4>)
 800c81a:	4293      	cmp	r3, r2
 800c81c:	d108      	bne.n	800c830 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	4a20      	ldr	r2, [pc, #128]	; (800c8a4 <TIM_Base_SetConfig+0xe8>)
 800c822:	4013      	ands	r3, r2
 800c824:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	68db      	ldr	r3, [r3, #12]
 800c82a:	68fa      	ldr	r2, [r7, #12]
 800c82c:	4313      	orrs	r3, r2
 800c82e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	2280      	movs	r2, #128	; 0x80
 800c834:	4393      	bics	r3, r2
 800c836:	001a      	movs	r2, r3
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	695b      	ldr	r3, [r3, #20]
 800c83c:	4313      	orrs	r3, r2
 800c83e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	68fa      	ldr	r2, [r7, #12]
 800c844:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c846:	683b      	ldr	r3, [r7, #0]
 800c848:	689a      	ldr	r2, [r3, #8]
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c84e:	683b      	ldr	r3, [r7, #0]
 800c850:	681a      	ldr	r2, [r3, #0]
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	4a0c      	ldr	r2, [pc, #48]	; (800c88c <TIM_Base_SetConfig+0xd0>)
 800c85a:	4293      	cmp	r3, r2
 800c85c:	d00b      	beq.n	800c876 <TIM_Base_SetConfig+0xba>
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	4a0d      	ldr	r2, [pc, #52]	; (800c898 <TIM_Base_SetConfig+0xdc>)
 800c862:	4293      	cmp	r3, r2
 800c864:	d007      	beq.n	800c876 <TIM_Base_SetConfig+0xba>
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	4a0c      	ldr	r2, [pc, #48]	; (800c89c <TIM_Base_SetConfig+0xe0>)
 800c86a:	4293      	cmp	r3, r2
 800c86c:	d003      	beq.n	800c876 <TIM_Base_SetConfig+0xba>
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	4a0b      	ldr	r2, [pc, #44]	; (800c8a0 <TIM_Base_SetConfig+0xe4>)
 800c872:	4293      	cmp	r3, r2
 800c874:	d103      	bne.n	800c87e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c876:	683b      	ldr	r3, [r7, #0]
 800c878:	691a      	ldr	r2, [r3, #16]
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2201      	movs	r2, #1
 800c882:	615a      	str	r2, [r3, #20]
}
 800c884:	46c0      	nop			; (mov r8, r8)
 800c886:	46bd      	mov	sp, r7
 800c888:	b004      	add	sp, #16
 800c88a:	bd80      	pop	{r7, pc}
 800c88c:	40012c00 	.word	0x40012c00
 800c890:	40000400 	.word	0x40000400
 800c894:	40002000 	.word	0x40002000
 800c898:	40014000 	.word	0x40014000
 800c89c:	40014400 	.word	0x40014400
 800c8a0:	40014800 	.word	0x40014800
 800c8a4:	fffffcff 	.word	0xfffffcff

0800c8a8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b086      	sub	sp, #24
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	60f8      	str	r0, [r7, #12]
 800c8b0:	60b9      	str	r1, [r7, #8]
 800c8b2:	607a      	str	r2, [r7, #4]
 800c8b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	6a1b      	ldr	r3, [r3, #32]
 800c8ba:	2201      	movs	r2, #1
 800c8bc:	4393      	bics	r3, r2
 800c8be:	001a      	movs	r2, r3
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	699b      	ldr	r3, [r3, #24]
 800c8c8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	6a1b      	ldr	r3, [r3, #32]
 800c8ce:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	4a1e      	ldr	r2, [pc, #120]	; (800c94c <TIM_TI1_SetConfig+0xa4>)
 800c8d4:	4293      	cmp	r3, r2
 800c8d6:	d007      	beq.n	800c8e8 <TIM_TI1_SetConfig+0x40>
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	4a1d      	ldr	r2, [pc, #116]	; (800c950 <TIM_TI1_SetConfig+0xa8>)
 800c8dc:	4293      	cmp	r3, r2
 800c8de:	d003      	beq.n	800c8e8 <TIM_TI1_SetConfig+0x40>
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	4a1c      	ldr	r2, [pc, #112]	; (800c954 <TIM_TI1_SetConfig+0xac>)
 800c8e4:	4293      	cmp	r3, r2
 800c8e6:	d101      	bne.n	800c8ec <TIM_TI1_SetConfig+0x44>
 800c8e8:	2301      	movs	r3, #1
 800c8ea:	e000      	b.n	800c8ee <TIM_TI1_SetConfig+0x46>
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d008      	beq.n	800c904 <TIM_TI1_SetConfig+0x5c>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800c8f2:	697b      	ldr	r3, [r7, #20]
 800c8f4:	2203      	movs	r2, #3
 800c8f6:	4393      	bics	r3, r2
 800c8f8:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800c8fa:	697a      	ldr	r2, [r7, #20]
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	4313      	orrs	r3, r2
 800c900:	617b      	str	r3, [r7, #20]
 800c902:	e003      	b.n	800c90c <TIM_TI1_SetConfig+0x64>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800c904:	697b      	ldr	r3, [r7, #20]
 800c906:	2201      	movs	r2, #1
 800c908:	4313      	orrs	r3, r2
 800c90a:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c90c:	697b      	ldr	r3, [r7, #20]
 800c90e:	22f0      	movs	r2, #240	; 0xf0
 800c910:	4393      	bics	r3, r2
 800c912:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	011b      	lsls	r3, r3, #4
 800c918:	22ff      	movs	r2, #255	; 0xff
 800c91a:	4013      	ands	r3, r2
 800c91c:	697a      	ldr	r2, [r7, #20]
 800c91e:	4313      	orrs	r3, r2
 800c920:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c922:	693b      	ldr	r3, [r7, #16]
 800c924:	220a      	movs	r2, #10
 800c926:	4393      	bics	r3, r2
 800c928:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800c92a:	68bb      	ldr	r3, [r7, #8]
 800c92c:	220a      	movs	r2, #10
 800c92e:	4013      	ands	r3, r2
 800c930:	693a      	ldr	r2, [r7, #16]
 800c932:	4313      	orrs	r3, r2
 800c934:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	697a      	ldr	r2, [r7, #20]
 800c93a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	693a      	ldr	r2, [r7, #16]
 800c940:	621a      	str	r2, [r3, #32]
}
 800c942:	46c0      	nop			; (mov r8, r8)
 800c944:	46bd      	mov	sp, r7
 800c946:	b006      	add	sp, #24
 800c948:	bd80      	pop	{r7, pc}
 800c94a:	46c0      	nop			; (mov r8, r8)
 800c94c:	40012c00 	.word	0x40012c00
 800c950:	40000400 	.word	0x40000400
 800c954:	40014000 	.word	0x40014000

0800c958 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b086      	sub	sp, #24
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	60f8      	str	r0, [r7, #12]
 800c960:	60b9      	str	r1, [r7, #8]
 800c962:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	6a1b      	ldr	r3, [r3, #32]
 800c968:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	6a1b      	ldr	r3, [r3, #32]
 800c96e:	2201      	movs	r2, #1
 800c970:	4393      	bics	r3, r2
 800c972:	001a      	movs	r2, r3
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	699b      	ldr	r3, [r3, #24]
 800c97c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c97e:	693b      	ldr	r3, [r7, #16]
 800c980:	22f0      	movs	r2, #240	; 0xf0
 800c982:	4393      	bics	r3, r2
 800c984:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	011b      	lsls	r3, r3, #4
 800c98a:	693a      	ldr	r2, [r7, #16]
 800c98c:	4313      	orrs	r3, r2
 800c98e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c990:	697b      	ldr	r3, [r7, #20]
 800c992:	220a      	movs	r2, #10
 800c994:	4393      	bics	r3, r2
 800c996:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c998:	697a      	ldr	r2, [r7, #20]
 800c99a:	68bb      	ldr	r3, [r7, #8]
 800c99c:	4313      	orrs	r3, r2
 800c99e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	693a      	ldr	r2, [r7, #16]
 800c9a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	697a      	ldr	r2, [r7, #20]
 800c9aa:	621a      	str	r2, [r3, #32]
}
 800c9ac:	46c0      	nop			; (mov r8, r8)
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	b006      	add	sp, #24
 800c9b2:	bd80      	pop	{r7, pc}

0800c9b4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b086      	sub	sp, #24
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	60f8      	str	r0, [r7, #12]
 800c9bc:	60b9      	str	r1, [r7, #8]
 800c9be:	607a      	str	r2, [r7, #4]
 800c9c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	6a1b      	ldr	r3, [r3, #32]
 800c9c6:	2210      	movs	r2, #16
 800c9c8:	4393      	bics	r3, r2
 800c9ca:	001a      	movs	r2, r3
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	699b      	ldr	r3, [r3, #24]
 800c9d4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	6a1b      	ldr	r3, [r3, #32]
 800c9da:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800c9dc:	697b      	ldr	r3, [r7, #20]
 800c9de:	4a14      	ldr	r2, [pc, #80]	; (800ca30 <TIM_TI2_SetConfig+0x7c>)
 800c9e0:	4013      	ands	r3, r2
 800c9e2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	021b      	lsls	r3, r3, #8
 800c9e8:	697a      	ldr	r2, [r7, #20]
 800c9ea:	4313      	orrs	r3, r2
 800c9ec:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c9ee:	697b      	ldr	r3, [r7, #20]
 800c9f0:	4a10      	ldr	r2, [pc, #64]	; (800ca34 <TIM_TI2_SetConfig+0x80>)
 800c9f2:	4013      	ands	r3, r2
 800c9f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	031b      	lsls	r3, r3, #12
 800c9fa:	041b      	lsls	r3, r3, #16
 800c9fc:	0c1b      	lsrs	r3, r3, #16
 800c9fe:	697a      	ldr	r2, [r7, #20]
 800ca00:	4313      	orrs	r3, r2
 800ca02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ca04:	693b      	ldr	r3, [r7, #16]
 800ca06:	22a0      	movs	r2, #160	; 0xa0
 800ca08:	4393      	bics	r3, r2
 800ca0a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800ca0c:	68bb      	ldr	r3, [r7, #8]
 800ca0e:	011b      	lsls	r3, r3, #4
 800ca10:	22a0      	movs	r2, #160	; 0xa0
 800ca12:	4013      	ands	r3, r2
 800ca14:	693a      	ldr	r2, [r7, #16]
 800ca16:	4313      	orrs	r3, r2
 800ca18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	697a      	ldr	r2, [r7, #20]
 800ca1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	693a      	ldr	r2, [r7, #16]
 800ca24:	621a      	str	r2, [r3, #32]
}
 800ca26:	46c0      	nop			; (mov r8, r8)
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	b006      	add	sp, #24
 800ca2c:	bd80      	pop	{r7, pc}
 800ca2e:	46c0      	nop			; (mov r8, r8)
 800ca30:	fffffcff 	.word	0xfffffcff
 800ca34:	ffff0fff 	.word	0xffff0fff

0800ca38 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b086      	sub	sp, #24
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	60f8      	str	r0, [r7, #12]
 800ca40:	60b9      	str	r1, [r7, #8]
 800ca42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	6a1b      	ldr	r3, [r3, #32]
 800ca48:	2210      	movs	r2, #16
 800ca4a:	4393      	bics	r3, r2
 800ca4c:	001a      	movs	r2, r3
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	699b      	ldr	r3, [r3, #24]
 800ca56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	6a1b      	ldr	r3, [r3, #32]
 800ca5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ca5e:	697b      	ldr	r3, [r7, #20]
 800ca60:	4a0d      	ldr	r2, [pc, #52]	; (800ca98 <TIM_TI2_ConfigInputStage+0x60>)
 800ca62:	4013      	ands	r3, r2
 800ca64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	031b      	lsls	r3, r3, #12
 800ca6a:	697a      	ldr	r2, [r7, #20]
 800ca6c:	4313      	orrs	r3, r2
 800ca6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ca70:	693b      	ldr	r3, [r7, #16]
 800ca72:	22a0      	movs	r2, #160	; 0xa0
 800ca74:	4393      	bics	r3, r2
 800ca76:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ca78:	68bb      	ldr	r3, [r7, #8]
 800ca7a:	011b      	lsls	r3, r3, #4
 800ca7c:	693a      	ldr	r2, [r7, #16]
 800ca7e:	4313      	orrs	r3, r2
 800ca80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	697a      	ldr	r2, [r7, #20]
 800ca86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	693a      	ldr	r2, [r7, #16]
 800ca8c:	621a      	str	r2, [r3, #32]
}
 800ca8e:	46c0      	nop			; (mov r8, r8)
 800ca90:	46bd      	mov	sp, r7
 800ca92:	b006      	add	sp, #24
 800ca94:	bd80      	pop	{r7, pc}
 800ca96:	46c0      	nop			; (mov r8, r8)
 800ca98:	ffff0fff 	.word	0xffff0fff

0800ca9c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b086      	sub	sp, #24
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	60f8      	str	r0, [r7, #12]
 800caa4:	60b9      	str	r1, [r7, #8]
 800caa6:	607a      	str	r2, [r7, #4]
 800caa8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	6a1b      	ldr	r3, [r3, #32]
 800caae:	4a19      	ldr	r2, [pc, #100]	; (800cb14 <TIM_TI3_SetConfig+0x78>)
 800cab0:	401a      	ands	r2, r3
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	69db      	ldr	r3, [r3, #28]
 800caba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	6a1b      	ldr	r3, [r3, #32]
 800cac0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800cac2:	697b      	ldr	r3, [r7, #20]
 800cac4:	2203      	movs	r2, #3
 800cac6:	4393      	bics	r3, r2
 800cac8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800caca:	697a      	ldr	r2, [r7, #20]
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	4313      	orrs	r3, r2
 800cad0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800cad2:	697b      	ldr	r3, [r7, #20]
 800cad4:	22f0      	movs	r2, #240	; 0xf0
 800cad6:	4393      	bics	r3, r2
 800cad8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800cada:	683b      	ldr	r3, [r7, #0]
 800cadc:	011b      	lsls	r3, r3, #4
 800cade:	22ff      	movs	r2, #255	; 0xff
 800cae0:	4013      	ands	r3, r2
 800cae2:	697a      	ldr	r2, [r7, #20]
 800cae4:	4313      	orrs	r3, r2
 800cae6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800cae8:	693b      	ldr	r3, [r7, #16]
 800caea:	4a0b      	ldr	r2, [pc, #44]	; (800cb18 <TIM_TI3_SetConfig+0x7c>)
 800caec:	4013      	ands	r3, r2
 800caee:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800caf0:	68bb      	ldr	r3, [r7, #8]
 800caf2:	021a      	lsls	r2, r3, #8
 800caf4:	23a0      	movs	r3, #160	; 0xa0
 800caf6:	011b      	lsls	r3, r3, #4
 800caf8:	4013      	ands	r3, r2
 800cafa:	693a      	ldr	r2, [r7, #16]
 800cafc:	4313      	orrs	r3, r2
 800cafe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	697a      	ldr	r2, [r7, #20]
 800cb04:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	693a      	ldr	r2, [r7, #16]
 800cb0a:	621a      	str	r2, [r3, #32]
}
 800cb0c:	46c0      	nop			; (mov r8, r8)
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	b006      	add	sp, #24
 800cb12:	bd80      	pop	{r7, pc}
 800cb14:	fffffeff 	.word	0xfffffeff
 800cb18:	fffff5ff 	.word	0xfffff5ff

0800cb1c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b086      	sub	sp, #24
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	60f8      	str	r0, [r7, #12]
 800cb24:	60b9      	str	r1, [r7, #8]
 800cb26:	607a      	str	r2, [r7, #4]
 800cb28:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	6a1b      	ldr	r3, [r3, #32]
 800cb2e:	4a1a      	ldr	r2, [pc, #104]	; (800cb98 <TIM_TI4_SetConfig+0x7c>)
 800cb30:	401a      	ands	r2, r3
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	69db      	ldr	r3, [r3, #28]
 800cb3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	6a1b      	ldr	r3, [r3, #32]
 800cb40:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800cb42:	697b      	ldr	r3, [r7, #20]
 800cb44:	4a15      	ldr	r2, [pc, #84]	; (800cb9c <TIM_TI4_SetConfig+0x80>)
 800cb46:	4013      	ands	r3, r2
 800cb48:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	021b      	lsls	r3, r3, #8
 800cb4e:	697a      	ldr	r2, [r7, #20]
 800cb50:	4313      	orrs	r3, r2
 800cb52:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800cb54:	697b      	ldr	r3, [r7, #20]
 800cb56:	4a12      	ldr	r2, [pc, #72]	; (800cba0 <TIM_TI4_SetConfig+0x84>)
 800cb58:	4013      	ands	r3, r2
 800cb5a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	031b      	lsls	r3, r3, #12
 800cb60:	041b      	lsls	r3, r3, #16
 800cb62:	0c1b      	lsrs	r3, r3, #16
 800cb64:	697a      	ldr	r2, [r7, #20]
 800cb66:	4313      	orrs	r3, r2
 800cb68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800cb6a:	693b      	ldr	r3, [r7, #16]
 800cb6c:	4a0d      	ldr	r2, [pc, #52]	; (800cba4 <TIM_TI4_SetConfig+0x88>)
 800cb6e:	4013      	ands	r3, r2
 800cb70:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800cb72:	68bb      	ldr	r3, [r7, #8]
 800cb74:	031a      	lsls	r2, r3, #12
 800cb76:	23a0      	movs	r3, #160	; 0xa0
 800cb78:	021b      	lsls	r3, r3, #8
 800cb7a:	4013      	ands	r3, r2
 800cb7c:	693a      	ldr	r2, [r7, #16]
 800cb7e:	4313      	orrs	r3, r2
 800cb80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	697a      	ldr	r2, [r7, #20]
 800cb86:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	693a      	ldr	r2, [r7, #16]
 800cb8c:	621a      	str	r2, [r3, #32]
}
 800cb8e:	46c0      	nop			; (mov r8, r8)
 800cb90:	46bd      	mov	sp, r7
 800cb92:	b006      	add	sp, #24
 800cb94:	bd80      	pop	{r7, pc}
 800cb96:	46c0      	nop			; (mov r8, r8)
 800cb98:	ffffefff 	.word	0xffffefff
 800cb9c:	fffffcff 	.word	0xfffffcff
 800cba0:	ffff0fff 	.word	0xffff0fff
 800cba4:	ffff5fff 	.word	0xffff5fff

0800cba8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b084      	sub	sp, #16
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
 800cbb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	689b      	ldr	r3, [r3, #8]
 800cbb6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	4a08      	ldr	r2, [pc, #32]	; (800cbdc <TIM_ITRx_SetConfig+0x34>)
 800cbbc:	4013      	ands	r3, r2
 800cbbe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cbc0:	683a      	ldr	r2, [r7, #0]
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	4313      	orrs	r3, r2
 800cbc6:	2207      	movs	r2, #7
 800cbc8:	4313      	orrs	r3, r2
 800cbca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	68fa      	ldr	r2, [r7, #12]
 800cbd0:	609a      	str	r2, [r3, #8]
}
 800cbd2:	46c0      	nop			; (mov r8, r8)
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	b004      	add	sp, #16
 800cbd8:	bd80      	pop	{r7, pc}
 800cbda:	46c0      	nop			; (mov r8, r8)
 800cbdc:	ffcfff8f 	.word	0xffcfff8f

0800cbe0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b086      	sub	sp, #24
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	60f8      	str	r0, [r7, #12]
 800cbe8:	60b9      	str	r1, [r7, #8]
 800cbea:	607a      	str	r2, [r7, #4]
 800cbec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	689b      	ldr	r3, [r3, #8]
 800cbf2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cbf4:	697b      	ldr	r3, [r7, #20]
 800cbf6:	4a09      	ldr	r2, [pc, #36]	; (800cc1c <TIM_ETR_SetConfig+0x3c>)
 800cbf8:	4013      	ands	r3, r2
 800cbfa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cbfc:	683b      	ldr	r3, [r7, #0]
 800cbfe:	021a      	lsls	r2, r3, #8
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	431a      	orrs	r2, r3
 800cc04:	68bb      	ldr	r3, [r7, #8]
 800cc06:	4313      	orrs	r3, r2
 800cc08:	697a      	ldr	r2, [r7, #20]
 800cc0a:	4313      	orrs	r3, r2
 800cc0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	697a      	ldr	r2, [r7, #20]
 800cc12:	609a      	str	r2, [r3, #8]
}
 800cc14:	46c0      	nop			; (mov r8, r8)
 800cc16:	46bd      	mov	sp, r7
 800cc18:	b006      	add	sp, #24
 800cc1a:	bd80      	pop	{r7, pc}
 800cc1c:	ffff00ff 	.word	0xffff00ff

0800cc20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b086      	sub	sp, #24
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	60f8      	str	r0, [r7, #12]
 800cc28:	60b9      	str	r1, [r7, #8]
 800cc2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cc2c:	68bb      	ldr	r3, [r7, #8]
 800cc2e:	221f      	movs	r2, #31
 800cc30:	4013      	ands	r3, r2
 800cc32:	2201      	movs	r2, #1
 800cc34:	409a      	lsls	r2, r3
 800cc36:	0013      	movs	r3, r2
 800cc38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	6a1b      	ldr	r3, [r3, #32]
 800cc3e:	697a      	ldr	r2, [r7, #20]
 800cc40:	43d2      	mvns	r2, r2
 800cc42:	401a      	ands	r2, r3
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	6a1a      	ldr	r2, [r3, #32]
 800cc4c:	68bb      	ldr	r3, [r7, #8]
 800cc4e:	211f      	movs	r1, #31
 800cc50:	400b      	ands	r3, r1
 800cc52:	6879      	ldr	r1, [r7, #4]
 800cc54:	4099      	lsls	r1, r3
 800cc56:	000b      	movs	r3, r1
 800cc58:	431a      	orrs	r2, r3
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	621a      	str	r2, [r3, #32]
}
 800cc5e:	46c0      	nop			; (mov r8, r8)
 800cc60:	46bd      	mov	sp, r7
 800cc62:	b006      	add	sp, #24
 800cc64:	bd80      	pop	{r7, pc}
	...

0800cc68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b084      	sub	sp, #16
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
 800cc70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	223c      	movs	r2, #60	; 0x3c
 800cc76:	5c9b      	ldrb	r3, [r3, r2]
 800cc78:	2b01      	cmp	r3, #1
 800cc7a:	d101      	bne.n	800cc80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cc7c:	2302      	movs	r3, #2
 800cc7e:	e04f      	b.n	800cd20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	223c      	movs	r2, #60	; 0x3c
 800cc84:	2101      	movs	r1, #1
 800cc86:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	223d      	movs	r2, #61	; 0x3d
 800cc8c:	2102      	movs	r1, #2
 800cc8e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	685b      	ldr	r3, [r3, #4]
 800cc96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	689b      	ldr	r3, [r3, #8]
 800cc9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	4a20      	ldr	r2, [pc, #128]	; (800cd28 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800cca6:	4293      	cmp	r3, r2
 800cca8:	d108      	bne.n	800ccbc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	4a1f      	ldr	r2, [pc, #124]	; (800cd2c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800ccae:	4013      	ands	r3, r2
 800ccb0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ccb2:	683b      	ldr	r3, [r7, #0]
 800ccb4:	685b      	ldr	r3, [r3, #4]
 800ccb6:	68fa      	ldr	r2, [r7, #12]
 800ccb8:	4313      	orrs	r3, r2
 800ccba:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	2270      	movs	r2, #112	; 0x70
 800ccc0:	4393      	bics	r3, r2
 800ccc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ccc4:	683b      	ldr	r3, [r7, #0]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	68fa      	ldr	r2, [r7, #12]
 800ccca:	4313      	orrs	r3, r2
 800cccc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	68fa      	ldr	r2, [r7, #12]
 800ccd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	4a13      	ldr	r2, [pc, #76]	; (800cd28 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800ccdc:	4293      	cmp	r3, r2
 800ccde:	d009      	beq.n	800ccf4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	4a12      	ldr	r2, [pc, #72]	; (800cd30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800cce6:	4293      	cmp	r3, r2
 800cce8:	d004      	beq.n	800ccf4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	4a11      	ldr	r2, [pc, #68]	; (800cd34 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800ccf0:	4293      	cmp	r3, r2
 800ccf2:	d10c      	bne.n	800cd0e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ccf4:	68bb      	ldr	r3, [r7, #8]
 800ccf6:	2280      	movs	r2, #128	; 0x80
 800ccf8:	4393      	bics	r3, r2
 800ccfa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ccfc:	683b      	ldr	r3, [r7, #0]
 800ccfe:	689b      	ldr	r3, [r3, #8]
 800cd00:	68ba      	ldr	r2, [r7, #8]
 800cd02:	4313      	orrs	r3, r2
 800cd04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	68ba      	ldr	r2, [r7, #8]
 800cd0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	223d      	movs	r2, #61	; 0x3d
 800cd12:	2101      	movs	r1, #1
 800cd14:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	223c      	movs	r2, #60	; 0x3c
 800cd1a:	2100      	movs	r1, #0
 800cd1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800cd1e:	2300      	movs	r3, #0
}
 800cd20:	0018      	movs	r0, r3
 800cd22:	46bd      	mov	sp, r7
 800cd24:	b004      	add	sp, #16
 800cd26:	bd80      	pop	{r7, pc}
 800cd28:	40012c00 	.word	0x40012c00
 800cd2c:	ff0fffff 	.word	0xff0fffff
 800cd30:	40000400 	.word	0x40000400
 800cd34:	40014000 	.word	0x40014000

0800cd38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b082      	sub	sp, #8
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cd40:	46c0      	nop			; (mov r8, r8)
 800cd42:	46bd      	mov	sp, r7
 800cd44:	b002      	add	sp, #8
 800cd46:	bd80      	pop	{r7, pc}

0800cd48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b082      	sub	sp, #8
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cd50:	46c0      	nop			; (mov r8, r8)
 800cd52:	46bd      	mov	sp, r7
 800cd54:	b002      	add	sp, #8
 800cd56:	bd80      	pop	{r7, pc}

0800cd58 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b082      	sub	sp, #8
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cd60:	46c0      	nop			; (mov r8, r8)
 800cd62:	46bd      	mov	sp, r7
 800cd64:	b002      	add	sp, #8
 800cd66:	bd80      	pop	{r7, pc}

0800cd68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b082      	sub	sp, #8
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d101      	bne.n	800cd7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cd76:	2301      	movs	r3, #1
 800cd78:	e046      	b.n	800ce08 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	2288      	movs	r2, #136	; 0x88
 800cd7e:	589b      	ldr	r3, [r3, r2]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d107      	bne.n	800cd94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	2284      	movs	r2, #132	; 0x84
 800cd88:	2100      	movs	r1, #0
 800cd8a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	0018      	movs	r0, r3
 800cd90:	f7fb fdc8 	bl	8008924 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2288      	movs	r2, #136	; 0x88
 800cd98:	2124      	movs	r1, #36	; 0x24
 800cd9a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	681a      	ldr	r2, [r3, #0]
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	2101      	movs	r1, #1
 800cda8:	438a      	bics	r2, r1
 800cdaa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	0018      	movs	r0, r3
 800cdb0:	f000 fc5e 	bl	800d670 <UART_SetConfig>
 800cdb4:	0003      	movs	r3, r0
 800cdb6:	2b01      	cmp	r3, #1
 800cdb8:	d101      	bne.n	800cdbe <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800cdba:	2301      	movs	r3, #1
 800cdbc:	e024      	b.n	800ce08 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d003      	beq.n	800cdce <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	0018      	movs	r0, r3
 800cdca:	f000 fdf5 	bl	800d9b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	685a      	ldr	r2, [r3, #4]
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	490d      	ldr	r1, [pc, #52]	; (800ce10 <HAL_UART_Init+0xa8>)
 800cdda:	400a      	ands	r2, r1
 800cddc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	689a      	ldr	r2, [r3, #8]
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	212a      	movs	r1, #42	; 0x2a
 800cdea:	438a      	bics	r2, r1
 800cdec:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	681a      	ldr	r2, [r3, #0]
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	2101      	movs	r1, #1
 800cdfa:	430a      	orrs	r2, r1
 800cdfc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	0018      	movs	r0, r3
 800ce02:	f000 fe8d 	bl	800db20 <UART_CheckIdleState>
 800ce06:	0003      	movs	r3, r0
}
 800ce08:	0018      	movs	r0, r3
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	b002      	add	sp, #8
 800ce0e:	bd80      	pop	{r7, pc}
 800ce10:	ffffb7ff 	.word	0xffffb7ff

0800ce14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b08a      	sub	sp, #40	; 0x28
 800ce18:	af02      	add	r7, sp, #8
 800ce1a:	60f8      	str	r0, [r7, #12]
 800ce1c:	60b9      	str	r1, [r7, #8]
 800ce1e:	603b      	str	r3, [r7, #0]
 800ce20:	1dbb      	adds	r3, r7, #6
 800ce22:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	2288      	movs	r2, #136	; 0x88
 800ce28:	589b      	ldr	r3, [r3, r2]
 800ce2a:	2b20      	cmp	r3, #32
 800ce2c:	d000      	beq.n	800ce30 <HAL_UART_Transmit+0x1c>
 800ce2e:	e088      	b.n	800cf42 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ce30:	68bb      	ldr	r3, [r7, #8]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d003      	beq.n	800ce3e <HAL_UART_Transmit+0x2a>
 800ce36:	1dbb      	adds	r3, r7, #6
 800ce38:	881b      	ldrh	r3, [r3, #0]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d101      	bne.n	800ce42 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800ce3e:	2301      	movs	r3, #1
 800ce40:	e080      	b.n	800cf44 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	689a      	ldr	r2, [r3, #8]
 800ce46:	2380      	movs	r3, #128	; 0x80
 800ce48:	015b      	lsls	r3, r3, #5
 800ce4a:	429a      	cmp	r2, r3
 800ce4c:	d109      	bne.n	800ce62 <HAL_UART_Transmit+0x4e>
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	691b      	ldr	r3, [r3, #16]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d105      	bne.n	800ce62 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800ce56:	68bb      	ldr	r3, [r7, #8]
 800ce58:	2201      	movs	r2, #1
 800ce5a:	4013      	ands	r3, r2
 800ce5c:	d001      	beq.n	800ce62 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800ce5e:	2301      	movs	r3, #1
 800ce60:	e070      	b.n	800cf44 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	2290      	movs	r2, #144	; 0x90
 800ce66:	2100      	movs	r1, #0
 800ce68:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	2288      	movs	r2, #136	; 0x88
 800ce6e:	2121      	movs	r1, #33	; 0x21
 800ce70:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ce72:	f7fc fd87 	bl	8009984 <HAL_GetTick>
 800ce76:	0003      	movs	r3, r0
 800ce78:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	1dba      	adds	r2, r7, #6
 800ce7e:	2154      	movs	r1, #84	; 0x54
 800ce80:	8812      	ldrh	r2, [r2, #0]
 800ce82:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	1dba      	adds	r2, r7, #6
 800ce88:	2156      	movs	r1, #86	; 0x56
 800ce8a:	8812      	ldrh	r2, [r2, #0]
 800ce8c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	689a      	ldr	r2, [r3, #8]
 800ce92:	2380      	movs	r3, #128	; 0x80
 800ce94:	015b      	lsls	r3, r3, #5
 800ce96:	429a      	cmp	r2, r3
 800ce98:	d108      	bne.n	800ceac <HAL_UART_Transmit+0x98>
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	691b      	ldr	r3, [r3, #16]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d104      	bne.n	800ceac <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800cea2:	2300      	movs	r3, #0
 800cea4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cea6:	68bb      	ldr	r3, [r7, #8]
 800cea8:	61bb      	str	r3, [r7, #24]
 800ceaa:	e003      	b.n	800ceb4 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800ceac:	68bb      	ldr	r3, [r7, #8]
 800ceae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ceb4:	e02c      	b.n	800cf10 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ceb6:	697a      	ldr	r2, [r7, #20]
 800ceb8:	68f8      	ldr	r0, [r7, #12]
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	9300      	str	r3, [sp, #0]
 800cebe:	0013      	movs	r3, r2
 800cec0:	2200      	movs	r2, #0
 800cec2:	2180      	movs	r1, #128	; 0x80
 800cec4:	f000 fe7a 	bl	800dbbc <UART_WaitOnFlagUntilTimeout>
 800cec8:	1e03      	subs	r3, r0, #0
 800ceca:	d001      	beq.n	800ced0 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 800cecc:	2303      	movs	r3, #3
 800cece:	e039      	b.n	800cf44 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 800ced0:	69fb      	ldr	r3, [r7, #28]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d10b      	bne.n	800ceee <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ced6:	69bb      	ldr	r3, [r7, #24]
 800ced8:	881b      	ldrh	r3, [r3, #0]
 800ceda:	001a      	movs	r2, r3
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	05d2      	lsls	r2, r2, #23
 800cee2:	0dd2      	lsrs	r2, r2, #23
 800cee4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800cee6:	69bb      	ldr	r3, [r7, #24]
 800cee8:	3302      	adds	r3, #2
 800ceea:	61bb      	str	r3, [r7, #24]
 800ceec:	e007      	b.n	800cefe <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ceee:	69fb      	ldr	r3, [r7, #28]
 800cef0:	781a      	ldrb	r2, [r3, #0]
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800cef8:	69fb      	ldr	r3, [r7, #28]
 800cefa:	3301      	adds	r3, #1
 800cefc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	2256      	movs	r2, #86	; 0x56
 800cf02:	5a9b      	ldrh	r3, [r3, r2]
 800cf04:	b29b      	uxth	r3, r3
 800cf06:	3b01      	subs	r3, #1
 800cf08:	b299      	uxth	r1, r3
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	2256      	movs	r2, #86	; 0x56
 800cf0e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	2256      	movs	r2, #86	; 0x56
 800cf14:	5a9b      	ldrh	r3, [r3, r2]
 800cf16:	b29b      	uxth	r3, r3
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d1cc      	bne.n	800ceb6 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cf1c:	697a      	ldr	r2, [r7, #20]
 800cf1e:	68f8      	ldr	r0, [r7, #12]
 800cf20:	683b      	ldr	r3, [r7, #0]
 800cf22:	9300      	str	r3, [sp, #0]
 800cf24:	0013      	movs	r3, r2
 800cf26:	2200      	movs	r2, #0
 800cf28:	2140      	movs	r1, #64	; 0x40
 800cf2a:	f000 fe47 	bl	800dbbc <UART_WaitOnFlagUntilTimeout>
 800cf2e:	1e03      	subs	r3, r0, #0
 800cf30:	d001      	beq.n	800cf36 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 800cf32:	2303      	movs	r3, #3
 800cf34:	e006      	b.n	800cf44 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	2288      	movs	r2, #136	; 0x88
 800cf3a:	2120      	movs	r1, #32
 800cf3c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800cf3e:	2300      	movs	r3, #0
 800cf40:	e000      	b.n	800cf44 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 800cf42:	2302      	movs	r3, #2
  }
}
 800cf44:	0018      	movs	r0, r3
 800cf46:	46bd      	mov	sp, r7
 800cf48:	b008      	add	sp, #32
 800cf4a:	bd80      	pop	{r7, pc}

0800cf4c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b088      	sub	sp, #32
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	60f8      	str	r0, [r7, #12]
 800cf54:	60b9      	str	r1, [r7, #8]
 800cf56:	1dbb      	adds	r3, r7, #6
 800cf58:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	228c      	movs	r2, #140	; 0x8c
 800cf5e:	589b      	ldr	r3, [r3, r2]
 800cf60:	2b20      	cmp	r3, #32
 800cf62:	d145      	bne.n	800cff0 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 800cf64:	68bb      	ldr	r3, [r7, #8]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d003      	beq.n	800cf72 <HAL_UART_Receive_IT+0x26>
 800cf6a:	1dbb      	adds	r3, r7, #6
 800cf6c:	881b      	ldrh	r3, [r3, #0]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d101      	bne.n	800cf76 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800cf72:	2301      	movs	r3, #1
 800cf74:	e03d      	b.n	800cff2 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	689a      	ldr	r2, [r3, #8]
 800cf7a:	2380      	movs	r3, #128	; 0x80
 800cf7c:	015b      	lsls	r3, r3, #5
 800cf7e:	429a      	cmp	r2, r3
 800cf80:	d109      	bne.n	800cf96 <HAL_UART_Receive_IT+0x4a>
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	691b      	ldr	r3, [r3, #16]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d105      	bne.n	800cf96 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800cf8a:	68bb      	ldr	r3, [r7, #8]
 800cf8c:	2201      	movs	r2, #1
 800cf8e:	4013      	ands	r3, r2
 800cf90:	d001      	beq.n	800cf96 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800cf92:	2301      	movs	r3, #1
 800cf94:	e02d      	b.n	800cff2 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	2200      	movs	r2, #0
 800cf9a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	685a      	ldr	r2, [r3, #4]
 800cfa2:	2380      	movs	r3, #128	; 0x80
 800cfa4:	041b      	lsls	r3, r3, #16
 800cfa6:	4013      	ands	r3, r2
 800cfa8:	d019      	beq.n	800cfde <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cfaa:	f3ef 8310 	mrs	r3, PRIMASK
 800cfae:	613b      	str	r3, [r7, #16]
  return(result);
 800cfb0:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cfb2:	61fb      	str	r3, [r7, #28]
 800cfb4:	2301      	movs	r3, #1
 800cfb6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cfb8:	697b      	ldr	r3, [r7, #20]
 800cfba:	f383 8810 	msr	PRIMASK, r3
}
 800cfbe:	46c0      	nop			; (mov r8, r8)
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	681a      	ldr	r2, [r3, #0]
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	2180      	movs	r1, #128	; 0x80
 800cfcc:	04c9      	lsls	r1, r1, #19
 800cfce:	430a      	orrs	r2, r1
 800cfd0:	601a      	str	r2, [r3, #0]
 800cfd2:	69fb      	ldr	r3, [r7, #28]
 800cfd4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cfd6:	69bb      	ldr	r3, [r7, #24]
 800cfd8:	f383 8810 	msr	PRIMASK, r3
}
 800cfdc:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800cfde:	1dbb      	adds	r3, r7, #6
 800cfe0:	881a      	ldrh	r2, [r3, #0]
 800cfe2:	68b9      	ldr	r1, [r7, #8]
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	0018      	movs	r0, r3
 800cfe8:	f000 feb0 	bl	800dd4c <UART_Start_Receive_IT>
 800cfec:	0003      	movs	r3, r0
 800cfee:	e000      	b.n	800cff2 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 800cff0:	2302      	movs	r3, #2
  }
}
 800cff2:	0018      	movs	r0, r3
 800cff4:	46bd      	mov	sp, r7
 800cff6:	b008      	add	sp, #32
 800cff8:	bd80      	pop	{r7, pc}
	...

0800cffc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cffc:	b5b0      	push	{r4, r5, r7, lr}
 800cffe:	b0aa      	sub	sp, #168	; 0xa8
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	69db      	ldr	r3, [r3, #28]
 800d00a:	22a4      	movs	r2, #164	; 0xa4
 800d00c:	18b9      	adds	r1, r7, r2
 800d00e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	20a0      	movs	r0, #160	; 0xa0
 800d018:	1839      	adds	r1, r7, r0
 800d01a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	689b      	ldr	r3, [r3, #8]
 800d022:	249c      	movs	r4, #156	; 0x9c
 800d024:	1939      	adds	r1, r7, r4
 800d026:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d028:	0011      	movs	r1, r2
 800d02a:	18bb      	adds	r3, r7, r2
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	4aa2      	ldr	r2, [pc, #648]	; (800d2b8 <HAL_UART_IRQHandler+0x2bc>)
 800d030:	4013      	ands	r3, r2
 800d032:	2298      	movs	r2, #152	; 0x98
 800d034:	18bd      	adds	r5, r7, r2
 800d036:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800d038:	18bb      	adds	r3, r7, r2
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d11a      	bne.n	800d076 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d040:	187b      	adds	r3, r7, r1
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	2220      	movs	r2, #32
 800d046:	4013      	ands	r3, r2
 800d048:	d015      	beq.n	800d076 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d04a:	183b      	adds	r3, r7, r0
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	2220      	movs	r2, #32
 800d050:	4013      	ands	r3, r2
 800d052:	d105      	bne.n	800d060 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d054:	193b      	adds	r3, r7, r4
 800d056:	681a      	ldr	r2, [r3, #0]
 800d058:	2380      	movs	r3, #128	; 0x80
 800d05a:	055b      	lsls	r3, r3, #21
 800d05c:	4013      	ands	r3, r2
 800d05e:	d00a      	beq.n	800d076 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d064:	2b00      	cmp	r3, #0
 800d066:	d100      	bne.n	800d06a <HAL_UART_IRQHandler+0x6e>
 800d068:	e2dc      	b.n	800d624 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d06e:	687a      	ldr	r2, [r7, #4]
 800d070:	0010      	movs	r0, r2
 800d072:	4798      	blx	r3
      }
      return;
 800d074:	e2d6      	b.n	800d624 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d076:	2398      	movs	r3, #152	; 0x98
 800d078:	18fb      	adds	r3, r7, r3
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d100      	bne.n	800d082 <HAL_UART_IRQHandler+0x86>
 800d080:	e122      	b.n	800d2c8 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d082:	239c      	movs	r3, #156	; 0x9c
 800d084:	18fb      	adds	r3, r7, r3
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	4a8c      	ldr	r2, [pc, #560]	; (800d2bc <HAL_UART_IRQHandler+0x2c0>)
 800d08a:	4013      	ands	r3, r2
 800d08c:	d106      	bne.n	800d09c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d08e:	23a0      	movs	r3, #160	; 0xa0
 800d090:	18fb      	adds	r3, r7, r3
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	4a8a      	ldr	r2, [pc, #552]	; (800d2c0 <HAL_UART_IRQHandler+0x2c4>)
 800d096:	4013      	ands	r3, r2
 800d098:	d100      	bne.n	800d09c <HAL_UART_IRQHandler+0xa0>
 800d09a:	e115      	b.n	800d2c8 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d09c:	23a4      	movs	r3, #164	; 0xa4
 800d09e:	18fb      	adds	r3, r7, r3
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	2201      	movs	r2, #1
 800d0a4:	4013      	ands	r3, r2
 800d0a6:	d012      	beq.n	800d0ce <HAL_UART_IRQHandler+0xd2>
 800d0a8:	23a0      	movs	r3, #160	; 0xa0
 800d0aa:	18fb      	adds	r3, r7, r3
 800d0ac:	681a      	ldr	r2, [r3, #0]
 800d0ae:	2380      	movs	r3, #128	; 0x80
 800d0b0:	005b      	lsls	r3, r3, #1
 800d0b2:	4013      	ands	r3, r2
 800d0b4:	d00b      	beq.n	800d0ce <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	2201      	movs	r2, #1
 800d0bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	2290      	movs	r2, #144	; 0x90
 800d0c2:	589b      	ldr	r3, [r3, r2]
 800d0c4:	2201      	movs	r2, #1
 800d0c6:	431a      	orrs	r2, r3
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	2190      	movs	r1, #144	; 0x90
 800d0cc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d0ce:	23a4      	movs	r3, #164	; 0xa4
 800d0d0:	18fb      	adds	r3, r7, r3
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	2202      	movs	r2, #2
 800d0d6:	4013      	ands	r3, r2
 800d0d8:	d011      	beq.n	800d0fe <HAL_UART_IRQHandler+0x102>
 800d0da:	239c      	movs	r3, #156	; 0x9c
 800d0dc:	18fb      	adds	r3, r7, r3
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	2201      	movs	r2, #1
 800d0e2:	4013      	ands	r3, r2
 800d0e4:	d00b      	beq.n	800d0fe <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	2202      	movs	r2, #2
 800d0ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	2290      	movs	r2, #144	; 0x90
 800d0f2:	589b      	ldr	r3, [r3, r2]
 800d0f4:	2204      	movs	r2, #4
 800d0f6:	431a      	orrs	r2, r3
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2190      	movs	r1, #144	; 0x90
 800d0fc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d0fe:	23a4      	movs	r3, #164	; 0xa4
 800d100:	18fb      	adds	r3, r7, r3
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	2204      	movs	r2, #4
 800d106:	4013      	ands	r3, r2
 800d108:	d011      	beq.n	800d12e <HAL_UART_IRQHandler+0x132>
 800d10a:	239c      	movs	r3, #156	; 0x9c
 800d10c:	18fb      	adds	r3, r7, r3
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	2201      	movs	r2, #1
 800d112:	4013      	ands	r3, r2
 800d114:	d00b      	beq.n	800d12e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	2204      	movs	r2, #4
 800d11c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	2290      	movs	r2, #144	; 0x90
 800d122:	589b      	ldr	r3, [r3, r2]
 800d124:	2202      	movs	r2, #2
 800d126:	431a      	orrs	r2, r3
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	2190      	movs	r1, #144	; 0x90
 800d12c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d12e:	23a4      	movs	r3, #164	; 0xa4
 800d130:	18fb      	adds	r3, r7, r3
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	2208      	movs	r2, #8
 800d136:	4013      	ands	r3, r2
 800d138:	d017      	beq.n	800d16a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d13a:	23a0      	movs	r3, #160	; 0xa0
 800d13c:	18fb      	adds	r3, r7, r3
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	2220      	movs	r2, #32
 800d142:	4013      	ands	r3, r2
 800d144:	d105      	bne.n	800d152 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d146:	239c      	movs	r3, #156	; 0x9c
 800d148:	18fb      	adds	r3, r7, r3
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	4a5b      	ldr	r2, [pc, #364]	; (800d2bc <HAL_UART_IRQHandler+0x2c0>)
 800d14e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d150:	d00b      	beq.n	800d16a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	2208      	movs	r2, #8
 800d158:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	2290      	movs	r2, #144	; 0x90
 800d15e:	589b      	ldr	r3, [r3, r2]
 800d160:	2208      	movs	r2, #8
 800d162:	431a      	orrs	r2, r3
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2190      	movs	r1, #144	; 0x90
 800d168:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d16a:	23a4      	movs	r3, #164	; 0xa4
 800d16c:	18fb      	adds	r3, r7, r3
 800d16e:	681a      	ldr	r2, [r3, #0]
 800d170:	2380      	movs	r3, #128	; 0x80
 800d172:	011b      	lsls	r3, r3, #4
 800d174:	4013      	ands	r3, r2
 800d176:	d013      	beq.n	800d1a0 <HAL_UART_IRQHandler+0x1a4>
 800d178:	23a0      	movs	r3, #160	; 0xa0
 800d17a:	18fb      	adds	r3, r7, r3
 800d17c:	681a      	ldr	r2, [r3, #0]
 800d17e:	2380      	movs	r3, #128	; 0x80
 800d180:	04db      	lsls	r3, r3, #19
 800d182:	4013      	ands	r3, r2
 800d184:	d00c      	beq.n	800d1a0 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	2280      	movs	r2, #128	; 0x80
 800d18c:	0112      	lsls	r2, r2, #4
 800d18e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	2290      	movs	r2, #144	; 0x90
 800d194:	589b      	ldr	r3, [r3, r2]
 800d196:	2220      	movs	r2, #32
 800d198:	431a      	orrs	r2, r3
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	2190      	movs	r1, #144	; 0x90
 800d19e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2290      	movs	r2, #144	; 0x90
 800d1a4:	589b      	ldr	r3, [r3, r2]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d100      	bne.n	800d1ac <HAL_UART_IRQHandler+0x1b0>
 800d1aa:	e23d      	b.n	800d628 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d1ac:	23a4      	movs	r3, #164	; 0xa4
 800d1ae:	18fb      	adds	r3, r7, r3
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	2220      	movs	r2, #32
 800d1b4:	4013      	ands	r3, r2
 800d1b6:	d015      	beq.n	800d1e4 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d1b8:	23a0      	movs	r3, #160	; 0xa0
 800d1ba:	18fb      	adds	r3, r7, r3
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	2220      	movs	r2, #32
 800d1c0:	4013      	ands	r3, r2
 800d1c2:	d106      	bne.n	800d1d2 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d1c4:	239c      	movs	r3, #156	; 0x9c
 800d1c6:	18fb      	adds	r3, r7, r3
 800d1c8:	681a      	ldr	r2, [r3, #0]
 800d1ca:	2380      	movs	r3, #128	; 0x80
 800d1cc:	055b      	lsls	r3, r3, #21
 800d1ce:	4013      	ands	r3, r2
 800d1d0:	d008      	beq.n	800d1e4 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d004      	beq.n	800d1e4 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d1de:	687a      	ldr	r2, [r7, #4]
 800d1e0:	0010      	movs	r0, r2
 800d1e2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	2290      	movs	r2, #144	; 0x90
 800d1e8:	589b      	ldr	r3, [r3, r2]
 800d1ea:	2194      	movs	r1, #148	; 0x94
 800d1ec:	187a      	adds	r2, r7, r1
 800d1ee:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	689b      	ldr	r3, [r3, #8]
 800d1f6:	2240      	movs	r2, #64	; 0x40
 800d1f8:	4013      	ands	r3, r2
 800d1fa:	2b40      	cmp	r3, #64	; 0x40
 800d1fc:	d004      	beq.n	800d208 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d1fe:	187b      	adds	r3, r7, r1
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	2228      	movs	r2, #40	; 0x28
 800d204:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d206:	d04c      	beq.n	800d2a2 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	0018      	movs	r0, r3
 800d20c:	f000 fec2 	bl	800df94 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	689b      	ldr	r3, [r3, #8]
 800d216:	2240      	movs	r2, #64	; 0x40
 800d218:	4013      	ands	r3, r2
 800d21a:	2b40      	cmp	r3, #64	; 0x40
 800d21c:	d13c      	bne.n	800d298 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d21e:	f3ef 8310 	mrs	r3, PRIMASK
 800d222:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800d224:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d226:	2090      	movs	r0, #144	; 0x90
 800d228:	183a      	adds	r2, r7, r0
 800d22a:	6013      	str	r3, [r2, #0]
 800d22c:	2301      	movs	r3, #1
 800d22e:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d230:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d232:	f383 8810 	msr	PRIMASK, r3
}
 800d236:	46c0      	nop			; (mov r8, r8)
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	689a      	ldr	r2, [r3, #8]
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	2140      	movs	r1, #64	; 0x40
 800d244:	438a      	bics	r2, r1
 800d246:	609a      	str	r2, [r3, #8]
 800d248:	183b      	adds	r3, r7, r0
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d24e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d250:	f383 8810 	msr	PRIMASK, r3
}
 800d254:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	2280      	movs	r2, #128	; 0x80
 800d25a:	589b      	ldr	r3, [r3, r2]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d016      	beq.n	800d28e <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	2280      	movs	r2, #128	; 0x80
 800d264:	589b      	ldr	r3, [r3, r2]
 800d266:	4a17      	ldr	r2, [pc, #92]	; (800d2c4 <HAL_UART_IRQHandler+0x2c8>)
 800d268:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	2280      	movs	r2, #128	; 0x80
 800d26e:	589b      	ldr	r3, [r3, r2]
 800d270:	0018      	movs	r0, r3
 800d272:	f7fc fcf5 	bl	8009c60 <HAL_DMA_Abort_IT>
 800d276:	1e03      	subs	r3, r0, #0
 800d278:	d01c      	beq.n	800d2b4 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	2280      	movs	r2, #128	; 0x80
 800d27e:	589b      	ldr	r3, [r3, r2]
 800d280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d282:	687a      	ldr	r2, [r7, #4]
 800d284:	2180      	movs	r1, #128	; 0x80
 800d286:	5852      	ldr	r2, [r2, r1]
 800d288:	0010      	movs	r0, r2
 800d28a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d28c:	e012      	b.n	800d2b4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	0018      	movs	r0, r3
 800d292:	f7f7 f94f 	bl	8004534 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d296:	e00d      	b.n	800d2b4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	0018      	movs	r0, r3
 800d29c:	f7f7 f94a 	bl	8004534 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d2a0:	e008      	b.n	800d2b4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	0018      	movs	r0, r3
 800d2a6:	f7f7 f945 	bl	8004534 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	2290      	movs	r2, #144	; 0x90
 800d2ae:	2100      	movs	r1, #0
 800d2b0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800d2b2:	e1b9      	b.n	800d628 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d2b4:	46c0      	nop			; (mov r8, r8)
    return;
 800d2b6:	e1b7      	b.n	800d628 <HAL_UART_IRQHandler+0x62c>
 800d2b8:	0000080f 	.word	0x0000080f
 800d2bc:	10000001 	.word	0x10000001
 800d2c0:	04000120 	.word	0x04000120
 800d2c4:	0800e061 	.word	0x0800e061

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2cc:	2b01      	cmp	r3, #1
 800d2ce:	d000      	beq.n	800d2d2 <HAL_UART_IRQHandler+0x2d6>
 800d2d0:	e13e      	b.n	800d550 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d2d2:	23a4      	movs	r3, #164	; 0xa4
 800d2d4:	18fb      	adds	r3, r7, r3
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	2210      	movs	r2, #16
 800d2da:	4013      	ands	r3, r2
 800d2dc:	d100      	bne.n	800d2e0 <HAL_UART_IRQHandler+0x2e4>
 800d2de:	e137      	b.n	800d550 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d2e0:	23a0      	movs	r3, #160	; 0xa0
 800d2e2:	18fb      	adds	r3, r7, r3
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	2210      	movs	r2, #16
 800d2e8:	4013      	ands	r3, r2
 800d2ea:	d100      	bne.n	800d2ee <HAL_UART_IRQHandler+0x2f2>
 800d2ec:	e130      	b.n	800d550 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	2210      	movs	r2, #16
 800d2f4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	689b      	ldr	r3, [r3, #8]
 800d2fc:	2240      	movs	r2, #64	; 0x40
 800d2fe:	4013      	ands	r3, r2
 800d300:	2b40      	cmp	r3, #64	; 0x40
 800d302:	d000      	beq.n	800d306 <HAL_UART_IRQHandler+0x30a>
 800d304:	e0a4      	b.n	800d450 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	2280      	movs	r2, #128	; 0x80
 800d30a:	589b      	ldr	r3, [r3, r2]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	685a      	ldr	r2, [r3, #4]
 800d310:	217e      	movs	r1, #126	; 0x7e
 800d312:	187b      	adds	r3, r7, r1
 800d314:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800d316:	187b      	adds	r3, r7, r1
 800d318:	881b      	ldrh	r3, [r3, #0]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d100      	bne.n	800d320 <HAL_UART_IRQHandler+0x324>
 800d31e:	e185      	b.n	800d62c <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	225c      	movs	r2, #92	; 0x5c
 800d324:	5a9b      	ldrh	r3, [r3, r2]
 800d326:	187a      	adds	r2, r7, r1
 800d328:	8812      	ldrh	r2, [r2, #0]
 800d32a:	429a      	cmp	r2, r3
 800d32c:	d300      	bcc.n	800d330 <HAL_UART_IRQHandler+0x334>
 800d32e:	e17d      	b.n	800d62c <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	187a      	adds	r2, r7, r1
 800d334:	215e      	movs	r1, #94	; 0x5e
 800d336:	8812      	ldrh	r2, [r2, #0]
 800d338:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	2280      	movs	r2, #128	; 0x80
 800d33e:	589b      	ldr	r3, [r3, r2]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	2220      	movs	r2, #32
 800d346:	4013      	ands	r3, r2
 800d348:	d170      	bne.n	800d42c <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d34a:	f3ef 8310 	mrs	r3, PRIMASK
 800d34e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800d350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d352:	67bb      	str	r3, [r7, #120]	; 0x78
 800d354:	2301      	movs	r3, #1
 800d356:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d35a:	f383 8810 	msr	PRIMASK, r3
}
 800d35e:	46c0      	nop			; (mov r8, r8)
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	681a      	ldr	r2, [r3, #0]
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	49b4      	ldr	r1, [pc, #720]	; (800d63c <HAL_UART_IRQHandler+0x640>)
 800d36c:	400a      	ands	r2, r1
 800d36e:	601a      	str	r2, [r3, #0]
 800d370:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d372:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d376:	f383 8810 	msr	PRIMASK, r3
}
 800d37a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d37c:	f3ef 8310 	mrs	r3, PRIMASK
 800d380:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800d382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d384:	677b      	str	r3, [r7, #116]	; 0x74
 800d386:	2301      	movs	r3, #1
 800d388:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d38a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d38c:	f383 8810 	msr	PRIMASK, r3
}
 800d390:	46c0      	nop			; (mov r8, r8)
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	689a      	ldr	r2, [r3, #8]
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	2101      	movs	r1, #1
 800d39e:	438a      	bics	r2, r1
 800d3a0:	609a      	str	r2, [r3, #8]
 800d3a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d3a4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d3a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d3a8:	f383 8810 	msr	PRIMASK, r3
}
 800d3ac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d3ae:	f3ef 8310 	mrs	r3, PRIMASK
 800d3b2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800d3b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d3b6:	673b      	str	r3, [r7, #112]	; 0x70
 800d3b8:	2301      	movs	r3, #1
 800d3ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d3bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3be:	f383 8810 	msr	PRIMASK, r3
}
 800d3c2:	46c0      	nop			; (mov r8, r8)
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	689a      	ldr	r2, [r3, #8]
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	2140      	movs	r1, #64	; 0x40
 800d3d0:	438a      	bics	r2, r1
 800d3d2:	609a      	str	r2, [r3, #8]
 800d3d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d3d6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d3d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3da:	f383 8810 	msr	PRIMASK, r3
}
 800d3de:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	228c      	movs	r2, #140	; 0x8c
 800d3e4:	2120      	movs	r1, #32
 800d3e6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d3ee:	f3ef 8310 	mrs	r3, PRIMASK
 800d3f2:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800d3f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d3f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d3f8:	2301      	movs	r3, #1
 800d3fa:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d3fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d3fe:	f383 8810 	msr	PRIMASK, r3
}
 800d402:	46c0      	nop			; (mov r8, r8)
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	681a      	ldr	r2, [r3, #0]
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	2110      	movs	r1, #16
 800d410:	438a      	bics	r2, r1
 800d412:	601a      	str	r2, [r3, #0]
 800d414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d416:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d418:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d41a:	f383 8810 	msr	PRIMASK, r3
}
 800d41e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	2280      	movs	r2, #128	; 0x80
 800d424:	589b      	ldr	r3, [r3, r2]
 800d426:	0018      	movs	r0, r3
 800d428:	f7fc fbb8 	bl	8009b9c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	2202      	movs	r2, #2
 800d430:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	225c      	movs	r2, #92	; 0x5c
 800d436:	5a9a      	ldrh	r2, [r3, r2]
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	215e      	movs	r1, #94	; 0x5e
 800d43c:	5a5b      	ldrh	r3, [r3, r1]
 800d43e:	b29b      	uxth	r3, r3
 800d440:	1ad3      	subs	r3, r2, r3
 800d442:	b29a      	uxth	r2, r3
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	0011      	movs	r1, r2
 800d448:	0018      	movs	r0, r3
 800d44a:	f000 f905 	bl	800d658 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d44e:	e0ed      	b.n	800d62c <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	225c      	movs	r2, #92	; 0x5c
 800d454:	5a99      	ldrh	r1, [r3, r2]
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	225e      	movs	r2, #94	; 0x5e
 800d45a:	5a9b      	ldrh	r3, [r3, r2]
 800d45c:	b29a      	uxth	r2, r3
 800d45e:	208e      	movs	r0, #142	; 0x8e
 800d460:	183b      	adds	r3, r7, r0
 800d462:	1a8a      	subs	r2, r1, r2
 800d464:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	225e      	movs	r2, #94	; 0x5e
 800d46a:	5a9b      	ldrh	r3, [r3, r2]
 800d46c:	b29b      	uxth	r3, r3
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d100      	bne.n	800d474 <HAL_UART_IRQHandler+0x478>
 800d472:	e0dd      	b.n	800d630 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 800d474:	183b      	adds	r3, r7, r0
 800d476:	881b      	ldrh	r3, [r3, #0]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d100      	bne.n	800d47e <HAL_UART_IRQHandler+0x482>
 800d47c:	e0d8      	b.n	800d630 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d47e:	f3ef 8310 	mrs	r3, PRIMASK
 800d482:	60fb      	str	r3, [r7, #12]
  return(result);
 800d484:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d486:	2488      	movs	r4, #136	; 0x88
 800d488:	193a      	adds	r2, r7, r4
 800d48a:	6013      	str	r3, [r2, #0]
 800d48c:	2301      	movs	r3, #1
 800d48e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d490:	693b      	ldr	r3, [r7, #16]
 800d492:	f383 8810 	msr	PRIMASK, r3
}
 800d496:	46c0      	nop			; (mov r8, r8)
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	681a      	ldr	r2, [r3, #0]
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	4967      	ldr	r1, [pc, #412]	; (800d640 <HAL_UART_IRQHandler+0x644>)
 800d4a4:	400a      	ands	r2, r1
 800d4a6:	601a      	str	r2, [r3, #0]
 800d4a8:	193b      	adds	r3, r7, r4
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d4ae:	697b      	ldr	r3, [r7, #20]
 800d4b0:	f383 8810 	msr	PRIMASK, r3
}
 800d4b4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d4b6:	f3ef 8310 	mrs	r3, PRIMASK
 800d4ba:	61bb      	str	r3, [r7, #24]
  return(result);
 800d4bc:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d4be:	2484      	movs	r4, #132	; 0x84
 800d4c0:	193a      	adds	r2, r7, r4
 800d4c2:	6013      	str	r3, [r2, #0]
 800d4c4:	2301      	movs	r3, #1
 800d4c6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d4c8:	69fb      	ldr	r3, [r7, #28]
 800d4ca:	f383 8810 	msr	PRIMASK, r3
}
 800d4ce:	46c0      	nop			; (mov r8, r8)
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	689a      	ldr	r2, [r3, #8]
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	495a      	ldr	r1, [pc, #360]	; (800d644 <HAL_UART_IRQHandler+0x648>)
 800d4dc:	400a      	ands	r2, r1
 800d4de:	609a      	str	r2, [r3, #8]
 800d4e0:	193b      	adds	r3, r7, r4
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d4e6:	6a3b      	ldr	r3, [r7, #32]
 800d4e8:	f383 8810 	msr	PRIMASK, r3
}
 800d4ec:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	228c      	movs	r2, #140	; 0x8c
 800d4f2:	2120      	movs	r1, #32
 800d4f4:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2200      	movs	r2, #0
 800d500:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d502:	f3ef 8310 	mrs	r3, PRIMASK
 800d506:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800d508:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d50a:	2480      	movs	r4, #128	; 0x80
 800d50c:	193a      	adds	r2, r7, r4
 800d50e:	6013      	str	r3, [r2, #0]
 800d510:	2301      	movs	r3, #1
 800d512:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d516:	f383 8810 	msr	PRIMASK, r3
}
 800d51a:	46c0      	nop			; (mov r8, r8)
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	681a      	ldr	r2, [r3, #0]
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	2110      	movs	r1, #16
 800d528:	438a      	bics	r2, r1
 800d52a:	601a      	str	r2, [r3, #0]
 800d52c:	193b      	adds	r3, r7, r4
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d534:	f383 8810 	msr	PRIMASK, r3
}
 800d538:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	2202      	movs	r2, #2
 800d53e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d540:	183b      	adds	r3, r7, r0
 800d542:	881a      	ldrh	r2, [r3, #0]
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	0011      	movs	r1, r2
 800d548:	0018      	movs	r0, r3
 800d54a:	f000 f885 	bl	800d658 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d54e:	e06f      	b.n	800d630 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d550:	23a4      	movs	r3, #164	; 0xa4
 800d552:	18fb      	adds	r3, r7, r3
 800d554:	681a      	ldr	r2, [r3, #0]
 800d556:	2380      	movs	r3, #128	; 0x80
 800d558:	035b      	lsls	r3, r3, #13
 800d55a:	4013      	ands	r3, r2
 800d55c:	d010      	beq.n	800d580 <HAL_UART_IRQHandler+0x584>
 800d55e:	239c      	movs	r3, #156	; 0x9c
 800d560:	18fb      	adds	r3, r7, r3
 800d562:	681a      	ldr	r2, [r3, #0]
 800d564:	2380      	movs	r3, #128	; 0x80
 800d566:	03db      	lsls	r3, r3, #15
 800d568:	4013      	ands	r3, r2
 800d56a:	d009      	beq.n	800d580 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	2280      	movs	r2, #128	; 0x80
 800d572:	0352      	lsls	r2, r2, #13
 800d574:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	0018      	movs	r0, r3
 800d57a:	f001 fa15 	bl	800e9a8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d57e:	e05a      	b.n	800d636 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d580:	23a4      	movs	r3, #164	; 0xa4
 800d582:	18fb      	adds	r3, r7, r3
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	2280      	movs	r2, #128	; 0x80
 800d588:	4013      	ands	r3, r2
 800d58a:	d016      	beq.n	800d5ba <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d58c:	23a0      	movs	r3, #160	; 0xa0
 800d58e:	18fb      	adds	r3, r7, r3
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	2280      	movs	r2, #128	; 0x80
 800d594:	4013      	ands	r3, r2
 800d596:	d106      	bne.n	800d5a6 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d598:	239c      	movs	r3, #156	; 0x9c
 800d59a:	18fb      	adds	r3, r7, r3
 800d59c:	681a      	ldr	r2, [r3, #0]
 800d59e:	2380      	movs	r3, #128	; 0x80
 800d5a0:	041b      	lsls	r3, r3, #16
 800d5a2:	4013      	ands	r3, r2
 800d5a4:	d009      	beq.n	800d5ba <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d042      	beq.n	800d634 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d5b2:	687a      	ldr	r2, [r7, #4]
 800d5b4:	0010      	movs	r0, r2
 800d5b6:	4798      	blx	r3
    }
    return;
 800d5b8:	e03c      	b.n	800d634 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d5ba:	23a4      	movs	r3, #164	; 0xa4
 800d5bc:	18fb      	adds	r3, r7, r3
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	2240      	movs	r2, #64	; 0x40
 800d5c2:	4013      	ands	r3, r2
 800d5c4:	d00a      	beq.n	800d5dc <HAL_UART_IRQHandler+0x5e0>
 800d5c6:	23a0      	movs	r3, #160	; 0xa0
 800d5c8:	18fb      	adds	r3, r7, r3
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	2240      	movs	r2, #64	; 0x40
 800d5ce:	4013      	ands	r3, r2
 800d5d0:	d004      	beq.n	800d5dc <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	0018      	movs	r0, r3
 800d5d6:	f000 fd5a 	bl	800e08e <UART_EndTransmit_IT>
    return;
 800d5da:	e02c      	b.n	800d636 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d5dc:	23a4      	movs	r3, #164	; 0xa4
 800d5de:	18fb      	adds	r3, r7, r3
 800d5e0:	681a      	ldr	r2, [r3, #0]
 800d5e2:	2380      	movs	r3, #128	; 0x80
 800d5e4:	041b      	lsls	r3, r3, #16
 800d5e6:	4013      	ands	r3, r2
 800d5e8:	d00b      	beq.n	800d602 <HAL_UART_IRQHandler+0x606>
 800d5ea:	23a0      	movs	r3, #160	; 0xa0
 800d5ec:	18fb      	adds	r3, r7, r3
 800d5ee:	681a      	ldr	r2, [r3, #0]
 800d5f0:	2380      	movs	r3, #128	; 0x80
 800d5f2:	05db      	lsls	r3, r3, #23
 800d5f4:	4013      	ands	r3, r2
 800d5f6:	d004      	beq.n	800d602 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	0018      	movs	r0, r3
 800d5fc:	f001 f9e4 	bl	800e9c8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d600:	e019      	b.n	800d636 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d602:	23a4      	movs	r3, #164	; 0xa4
 800d604:	18fb      	adds	r3, r7, r3
 800d606:	681a      	ldr	r2, [r3, #0]
 800d608:	2380      	movs	r3, #128	; 0x80
 800d60a:	045b      	lsls	r3, r3, #17
 800d60c:	4013      	ands	r3, r2
 800d60e:	d012      	beq.n	800d636 <HAL_UART_IRQHandler+0x63a>
 800d610:	23a0      	movs	r3, #160	; 0xa0
 800d612:	18fb      	adds	r3, r7, r3
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	2b00      	cmp	r3, #0
 800d618:	da0d      	bge.n	800d636 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	0018      	movs	r0, r3
 800d61e:	f001 f9cb 	bl	800e9b8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d622:	e008      	b.n	800d636 <HAL_UART_IRQHandler+0x63a>
      return;
 800d624:	46c0      	nop			; (mov r8, r8)
 800d626:	e006      	b.n	800d636 <HAL_UART_IRQHandler+0x63a>
    return;
 800d628:	46c0      	nop			; (mov r8, r8)
 800d62a:	e004      	b.n	800d636 <HAL_UART_IRQHandler+0x63a>
      return;
 800d62c:	46c0      	nop			; (mov r8, r8)
 800d62e:	e002      	b.n	800d636 <HAL_UART_IRQHandler+0x63a>
      return;
 800d630:	46c0      	nop			; (mov r8, r8)
 800d632:	e000      	b.n	800d636 <HAL_UART_IRQHandler+0x63a>
    return;
 800d634:	46c0      	nop			; (mov r8, r8)
  }
}
 800d636:	46bd      	mov	sp, r7
 800d638:	b02a      	add	sp, #168	; 0xa8
 800d63a:	bdb0      	pop	{r4, r5, r7, pc}
 800d63c:	fffffeff 	.word	0xfffffeff
 800d640:	fffffedf 	.word	0xfffffedf
 800d644:	effffffe 	.word	0xeffffffe

0800d648 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b082      	sub	sp, #8
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d650:	46c0      	nop			; (mov r8, r8)
 800d652:	46bd      	mov	sp, r7
 800d654:	b002      	add	sp, #8
 800d656:	bd80      	pop	{r7, pc}

0800d658 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b082      	sub	sp, #8
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
 800d660:	000a      	movs	r2, r1
 800d662:	1cbb      	adds	r3, r7, #2
 800d664:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d666:	46c0      	nop			; (mov r8, r8)
 800d668:	46bd      	mov	sp, r7
 800d66a:	b002      	add	sp, #8
 800d66c:	bd80      	pop	{r7, pc}
	...

0800d670 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b088      	sub	sp, #32
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d678:	231a      	movs	r3, #26
 800d67a:	18fb      	adds	r3, r7, r3
 800d67c:	2200      	movs	r2, #0
 800d67e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	689a      	ldr	r2, [r3, #8]
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	691b      	ldr	r3, [r3, #16]
 800d688:	431a      	orrs	r2, r3
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	695b      	ldr	r3, [r3, #20]
 800d68e:	431a      	orrs	r2, r3
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	69db      	ldr	r3, [r3, #28]
 800d694:	4313      	orrs	r3, r2
 800d696:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	4abc      	ldr	r2, [pc, #752]	; (800d990 <UART_SetConfig+0x320>)
 800d6a0:	4013      	ands	r3, r2
 800d6a2:	0019      	movs	r1, r3
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	69fa      	ldr	r2, [r7, #28]
 800d6aa:	430a      	orrs	r2, r1
 800d6ac:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	685b      	ldr	r3, [r3, #4]
 800d6b4:	4ab7      	ldr	r2, [pc, #732]	; (800d994 <UART_SetConfig+0x324>)
 800d6b6:	4013      	ands	r3, r2
 800d6b8:	0019      	movs	r1, r3
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	68da      	ldr	r2, [r3, #12]
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	430a      	orrs	r2, r1
 800d6c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	699b      	ldr	r3, [r3, #24]
 800d6ca:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	6a1b      	ldr	r3, [r3, #32]
 800d6d0:	69fa      	ldr	r2, [r7, #28]
 800d6d2:	4313      	orrs	r3, r2
 800d6d4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	689b      	ldr	r3, [r3, #8]
 800d6dc:	4aae      	ldr	r2, [pc, #696]	; (800d998 <UART_SetConfig+0x328>)
 800d6de:	4013      	ands	r3, r2
 800d6e0:	0019      	movs	r1, r3
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	69fa      	ldr	r2, [r7, #28]
 800d6e8:	430a      	orrs	r2, r1
 800d6ea:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6f2:	220f      	movs	r2, #15
 800d6f4:	4393      	bics	r3, r2
 800d6f6:	0019      	movs	r1, r3
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	430a      	orrs	r2, r1
 800d702:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	4aa4      	ldr	r2, [pc, #656]	; (800d99c <UART_SetConfig+0x32c>)
 800d70a:	4293      	cmp	r3, r2
 800d70c:	d127      	bne.n	800d75e <UART_SetConfig+0xee>
 800d70e:	4ba4      	ldr	r3, [pc, #656]	; (800d9a0 <UART_SetConfig+0x330>)
 800d710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d712:	2203      	movs	r2, #3
 800d714:	4013      	ands	r3, r2
 800d716:	2b03      	cmp	r3, #3
 800d718:	d017      	beq.n	800d74a <UART_SetConfig+0xda>
 800d71a:	d81b      	bhi.n	800d754 <UART_SetConfig+0xe4>
 800d71c:	2b02      	cmp	r3, #2
 800d71e:	d00a      	beq.n	800d736 <UART_SetConfig+0xc6>
 800d720:	d818      	bhi.n	800d754 <UART_SetConfig+0xe4>
 800d722:	2b00      	cmp	r3, #0
 800d724:	d002      	beq.n	800d72c <UART_SetConfig+0xbc>
 800d726:	2b01      	cmp	r3, #1
 800d728:	d00a      	beq.n	800d740 <UART_SetConfig+0xd0>
 800d72a:	e013      	b.n	800d754 <UART_SetConfig+0xe4>
 800d72c:	231b      	movs	r3, #27
 800d72e:	18fb      	adds	r3, r7, r3
 800d730:	2200      	movs	r2, #0
 800d732:	701a      	strb	r2, [r3, #0]
 800d734:	e058      	b.n	800d7e8 <UART_SetConfig+0x178>
 800d736:	231b      	movs	r3, #27
 800d738:	18fb      	adds	r3, r7, r3
 800d73a:	2202      	movs	r2, #2
 800d73c:	701a      	strb	r2, [r3, #0]
 800d73e:	e053      	b.n	800d7e8 <UART_SetConfig+0x178>
 800d740:	231b      	movs	r3, #27
 800d742:	18fb      	adds	r3, r7, r3
 800d744:	2204      	movs	r2, #4
 800d746:	701a      	strb	r2, [r3, #0]
 800d748:	e04e      	b.n	800d7e8 <UART_SetConfig+0x178>
 800d74a:	231b      	movs	r3, #27
 800d74c:	18fb      	adds	r3, r7, r3
 800d74e:	2208      	movs	r2, #8
 800d750:	701a      	strb	r2, [r3, #0]
 800d752:	e049      	b.n	800d7e8 <UART_SetConfig+0x178>
 800d754:	231b      	movs	r3, #27
 800d756:	18fb      	adds	r3, r7, r3
 800d758:	2210      	movs	r2, #16
 800d75a:	701a      	strb	r2, [r3, #0]
 800d75c:	e044      	b.n	800d7e8 <UART_SetConfig+0x178>
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	4a90      	ldr	r2, [pc, #576]	; (800d9a4 <UART_SetConfig+0x334>)
 800d764:	4293      	cmp	r3, r2
 800d766:	d127      	bne.n	800d7b8 <UART_SetConfig+0x148>
 800d768:	4b8d      	ldr	r3, [pc, #564]	; (800d9a0 <UART_SetConfig+0x330>)
 800d76a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d76c:	220c      	movs	r2, #12
 800d76e:	4013      	ands	r3, r2
 800d770:	2b0c      	cmp	r3, #12
 800d772:	d017      	beq.n	800d7a4 <UART_SetConfig+0x134>
 800d774:	d81b      	bhi.n	800d7ae <UART_SetConfig+0x13e>
 800d776:	2b08      	cmp	r3, #8
 800d778:	d00a      	beq.n	800d790 <UART_SetConfig+0x120>
 800d77a:	d818      	bhi.n	800d7ae <UART_SetConfig+0x13e>
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d002      	beq.n	800d786 <UART_SetConfig+0x116>
 800d780:	2b04      	cmp	r3, #4
 800d782:	d00a      	beq.n	800d79a <UART_SetConfig+0x12a>
 800d784:	e013      	b.n	800d7ae <UART_SetConfig+0x13e>
 800d786:	231b      	movs	r3, #27
 800d788:	18fb      	adds	r3, r7, r3
 800d78a:	2200      	movs	r2, #0
 800d78c:	701a      	strb	r2, [r3, #0]
 800d78e:	e02b      	b.n	800d7e8 <UART_SetConfig+0x178>
 800d790:	231b      	movs	r3, #27
 800d792:	18fb      	adds	r3, r7, r3
 800d794:	2202      	movs	r2, #2
 800d796:	701a      	strb	r2, [r3, #0]
 800d798:	e026      	b.n	800d7e8 <UART_SetConfig+0x178>
 800d79a:	231b      	movs	r3, #27
 800d79c:	18fb      	adds	r3, r7, r3
 800d79e:	2204      	movs	r2, #4
 800d7a0:	701a      	strb	r2, [r3, #0]
 800d7a2:	e021      	b.n	800d7e8 <UART_SetConfig+0x178>
 800d7a4:	231b      	movs	r3, #27
 800d7a6:	18fb      	adds	r3, r7, r3
 800d7a8:	2208      	movs	r2, #8
 800d7aa:	701a      	strb	r2, [r3, #0]
 800d7ac:	e01c      	b.n	800d7e8 <UART_SetConfig+0x178>
 800d7ae:	231b      	movs	r3, #27
 800d7b0:	18fb      	adds	r3, r7, r3
 800d7b2:	2210      	movs	r2, #16
 800d7b4:	701a      	strb	r2, [r3, #0]
 800d7b6:	e017      	b.n	800d7e8 <UART_SetConfig+0x178>
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	4a7a      	ldr	r2, [pc, #488]	; (800d9a8 <UART_SetConfig+0x338>)
 800d7be:	4293      	cmp	r3, r2
 800d7c0:	d104      	bne.n	800d7cc <UART_SetConfig+0x15c>
 800d7c2:	231b      	movs	r3, #27
 800d7c4:	18fb      	adds	r3, r7, r3
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	701a      	strb	r2, [r3, #0]
 800d7ca:	e00d      	b.n	800d7e8 <UART_SetConfig+0x178>
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	4a76      	ldr	r2, [pc, #472]	; (800d9ac <UART_SetConfig+0x33c>)
 800d7d2:	4293      	cmp	r3, r2
 800d7d4:	d104      	bne.n	800d7e0 <UART_SetConfig+0x170>
 800d7d6:	231b      	movs	r3, #27
 800d7d8:	18fb      	adds	r3, r7, r3
 800d7da:	2200      	movs	r2, #0
 800d7dc:	701a      	strb	r2, [r3, #0]
 800d7de:	e003      	b.n	800d7e8 <UART_SetConfig+0x178>
 800d7e0:	231b      	movs	r3, #27
 800d7e2:	18fb      	adds	r3, r7, r3
 800d7e4:	2210      	movs	r2, #16
 800d7e6:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	69da      	ldr	r2, [r3, #28]
 800d7ec:	2380      	movs	r3, #128	; 0x80
 800d7ee:	021b      	lsls	r3, r3, #8
 800d7f0:	429a      	cmp	r2, r3
 800d7f2:	d000      	beq.n	800d7f6 <UART_SetConfig+0x186>
 800d7f4:	e065      	b.n	800d8c2 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 800d7f6:	231b      	movs	r3, #27
 800d7f8:	18fb      	adds	r3, r7, r3
 800d7fa:	781b      	ldrb	r3, [r3, #0]
 800d7fc:	2b08      	cmp	r3, #8
 800d7fe:	d015      	beq.n	800d82c <UART_SetConfig+0x1bc>
 800d800:	dc18      	bgt.n	800d834 <UART_SetConfig+0x1c4>
 800d802:	2b04      	cmp	r3, #4
 800d804:	d00d      	beq.n	800d822 <UART_SetConfig+0x1b2>
 800d806:	dc15      	bgt.n	800d834 <UART_SetConfig+0x1c4>
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d002      	beq.n	800d812 <UART_SetConfig+0x1a2>
 800d80c:	2b02      	cmp	r3, #2
 800d80e:	d005      	beq.n	800d81c <UART_SetConfig+0x1ac>
 800d810:	e010      	b.n	800d834 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d812:	f7fd f939 	bl	800aa88 <HAL_RCC_GetPCLK1Freq>
 800d816:	0003      	movs	r3, r0
 800d818:	617b      	str	r3, [r7, #20]
        break;
 800d81a:	e012      	b.n	800d842 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d81c:	4b64      	ldr	r3, [pc, #400]	; (800d9b0 <UART_SetConfig+0x340>)
 800d81e:	617b      	str	r3, [r7, #20]
        break;
 800d820:	e00f      	b.n	800d842 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d822:	f7fd f8a5 	bl	800a970 <HAL_RCC_GetSysClockFreq>
 800d826:	0003      	movs	r3, r0
 800d828:	617b      	str	r3, [r7, #20]
        break;
 800d82a:	e00a      	b.n	800d842 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d82c:	2380      	movs	r3, #128	; 0x80
 800d82e:	021b      	lsls	r3, r3, #8
 800d830:	617b      	str	r3, [r7, #20]
        break;
 800d832:	e006      	b.n	800d842 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800d834:	2300      	movs	r3, #0
 800d836:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800d838:	231a      	movs	r3, #26
 800d83a:	18fb      	adds	r3, r7, r3
 800d83c:	2201      	movs	r2, #1
 800d83e:	701a      	strb	r2, [r3, #0]
        break;
 800d840:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d842:	697b      	ldr	r3, [r7, #20]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d100      	bne.n	800d84a <UART_SetConfig+0x1da>
 800d848:	e08d      	b.n	800d966 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d84e:	4b59      	ldr	r3, [pc, #356]	; (800d9b4 <UART_SetConfig+0x344>)
 800d850:	0052      	lsls	r2, r2, #1
 800d852:	5ad3      	ldrh	r3, [r2, r3]
 800d854:	0019      	movs	r1, r3
 800d856:	6978      	ldr	r0, [r7, #20]
 800d858:	f7f2 fc78 	bl	800014c <__udivsi3>
 800d85c:	0003      	movs	r3, r0
 800d85e:	005a      	lsls	r2, r3, #1
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	685b      	ldr	r3, [r3, #4]
 800d864:	085b      	lsrs	r3, r3, #1
 800d866:	18d2      	adds	r2, r2, r3
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	685b      	ldr	r3, [r3, #4]
 800d86c:	0019      	movs	r1, r3
 800d86e:	0010      	movs	r0, r2
 800d870:	f7f2 fc6c 	bl	800014c <__udivsi3>
 800d874:	0003      	movs	r3, r0
 800d876:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d878:	693b      	ldr	r3, [r7, #16]
 800d87a:	2b0f      	cmp	r3, #15
 800d87c:	d91c      	bls.n	800d8b8 <UART_SetConfig+0x248>
 800d87e:	693a      	ldr	r2, [r7, #16]
 800d880:	2380      	movs	r3, #128	; 0x80
 800d882:	025b      	lsls	r3, r3, #9
 800d884:	429a      	cmp	r2, r3
 800d886:	d217      	bcs.n	800d8b8 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d888:	693b      	ldr	r3, [r7, #16]
 800d88a:	b29a      	uxth	r2, r3
 800d88c:	200e      	movs	r0, #14
 800d88e:	183b      	adds	r3, r7, r0
 800d890:	210f      	movs	r1, #15
 800d892:	438a      	bics	r2, r1
 800d894:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d896:	693b      	ldr	r3, [r7, #16]
 800d898:	085b      	lsrs	r3, r3, #1
 800d89a:	b29b      	uxth	r3, r3
 800d89c:	2207      	movs	r2, #7
 800d89e:	4013      	ands	r3, r2
 800d8a0:	b299      	uxth	r1, r3
 800d8a2:	183b      	adds	r3, r7, r0
 800d8a4:	183a      	adds	r2, r7, r0
 800d8a6:	8812      	ldrh	r2, [r2, #0]
 800d8a8:	430a      	orrs	r2, r1
 800d8aa:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	183a      	adds	r2, r7, r0
 800d8b2:	8812      	ldrh	r2, [r2, #0]
 800d8b4:	60da      	str	r2, [r3, #12]
 800d8b6:	e056      	b.n	800d966 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800d8b8:	231a      	movs	r3, #26
 800d8ba:	18fb      	adds	r3, r7, r3
 800d8bc:	2201      	movs	r2, #1
 800d8be:	701a      	strb	r2, [r3, #0]
 800d8c0:	e051      	b.n	800d966 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d8c2:	231b      	movs	r3, #27
 800d8c4:	18fb      	adds	r3, r7, r3
 800d8c6:	781b      	ldrb	r3, [r3, #0]
 800d8c8:	2b08      	cmp	r3, #8
 800d8ca:	d015      	beq.n	800d8f8 <UART_SetConfig+0x288>
 800d8cc:	dc18      	bgt.n	800d900 <UART_SetConfig+0x290>
 800d8ce:	2b04      	cmp	r3, #4
 800d8d0:	d00d      	beq.n	800d8ee <UART_SetConfig+0x27e>
 800d8d2:	dc15      	bgt.n	800d900 <UART_SetConfig+0x290>
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d002      	beq.n	800d8de <UART_SetConfig+0x26e>
 800d8d8:	2b02      	cmp	r3, #2
 800d8da:	d005      	beq.n	800d8e8 <UART_SetConfig+0x278>
 800d8dc:	e010      	b.n	800d900 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d8de:	f7fd f8d3 	bl	800aa88 <HAL_RCC_GetPCLK1Freq>
 800d8e2:	0003      	movs	r3, r0
 800d8e4:	617b      	str	r3, [r7, #20]
        break;
 800d8e6:	e012      	b.n	800d90e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d8e8:	4b31      	ldr	r3, [pc, #196]	; (800d9b0 <UART_SetConfig+0x340>)
 800d8ea:	617b      	str	r3, [r7, #20]
        break;
 800d8ec:	e00f      	b.n	800d90e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d8ee:	f7fd f83f 	bl	800a970 <HAL_RCC_GetSysClockFreq>
 800d8f2:	0003      	movs	r3, r0
 800d8f4:	617b      	str	r3, [r7, #20]
        break;
 800d8f6:	e00a      	b.n	800d90e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d8f8:	2380      	movs	r3, #128	; 0x80
 800d8fa:	021b      	lsls	r3, r3, #8
 800d8fc:	617b      	str	r3, [r7, #20]
        break;
 800d8fe:	e006      	b.n	800d90e <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 800d900:	2300      	movs	r3, #0
 800d902:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800d904:	231a      	movs	r3, #26
 800d906:	18fb      	adds	r3, r7, r3
 800d908:	2201      	movs	r2, #1
 800d90a:	701a      	strb	r2, [r3, #0]
        break;
 800d90c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800d90e:	697b      	ldr	r3, [r7, #20]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d028      	beq.n	800d966 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d918:	4b26      	ldr	r3, [pc, #152]	; (800d9b4 <UART_SetConfig+0x344>)
 800d91a:	0052      	lsls	r2, r2, #1
 800d91c:	5ad3      	ldrh	r3, [r2, r3]
 800d91e:	0019      	movs	r1, r3
 800d920:	6978      	ldr	r0, [r7, #20]
 800d922:	f7f2 fc13 	bl	800014c <__udivsi3>
 800d926:	0003      	movs	r3, r0
 800d928:	001a      	movs	r2, r3
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	685b      	ldr	r3, [r3, #4]
 800d92e:	085b      	lsrs	r3, r3, #1
 800d930:	18d2      	adds	r2, r2, r3
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	685b      	ldr	r3, [r3, #4]
 800d936:	0019      	movs	r1, r3
 800d938:	0010      	movs	r0, r2
 800d93a:	f7f2 fc07 	bl	800014c <__udivsi3>
 800d93e:	0003      	movs	r3, r0
 800d940:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d942:	693b      	ldr	r3, [r7, #16]
 800d944:	2b0f      	cmp	r3, #15
 800d946:	d90a      	bls.n	800d95e <UART_SetConfig+0x2ee>
 800d948:	693a      	ldr	r2, [r7, #16]
 800d94a:	2380      	movs	r3, #128	; 0x80
 800d94c:	025b      	lsls	r3, r3, #9
 800d94e:	429a      	cmp	r2, r3
 800d950:	d205      	bcs.n	800d95e <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d952:	693b      	ldr	r3, [r7, #16]
 800d954:	b29a      	uxth	r2, r3
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	60da      	str	r2, [r3, #12]
 800d95c:	e003      	b.n	800d966 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800d95e:	231a      	movs	r3, #26
 800d960:	18fb      	adds	r3, r7, r3
 800d962:	2201      	movs	r2, #1
 800d964:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	226a      	movs	r2, #106	; 0x6a
 800d96a:	2101      	movs	r1, #1
 800d96c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	2268      	movs	r2, #104	; 0x68
 800d972:	2101      	movs	r1, #1
 800d974:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	2200      	movs	r2, #0
 800d97a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	2200      	movs	r2, #0
 800d980:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800d982:	231a      	movs	r3, #26
 800d984:	18fb      	adds	r3, r7, r3
 800d986:	781b      	ldrb	r3, [r3, #0]
}
 800d988:	0018      	movs	r0, r3
 800d98a:	46bd      	mov	sp, r7
 800d98c:	b008      	add	sp, #32
 800d98e:	bd80      	pop	{r7, pc}
 800d990:	cfff69f3 	.word	0xcfff69f3
 800d994:	ffffcfff 	.word	0xffffcfff
 800d998:	11fff4ff 	.word	0x11fff4ff
 800d99c:	40013800 	.word	0x40013800
 800d9a0:	40021000 	.word	0x40021000
 800d9a4:	40004400 	.word	0x40004400
 800d9a8:	40004800 	.word	0x40004800
 800d9ac:	40004c00 	.word	0x40004c00
 800d9b0:	00f42400 	.word	0x00f42400
 800d9b4:	08013690 	.word	0x08013690

0800d9b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	b082      	sub	sp, #8
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9c4:	2201      	movs	r2, #1
 800d9c6:	4013      	ands	r3, r2
 800d9c8:	d00b      	beq.n	800d9e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	685b      	ldr	r3, [r3, #4]
 800d9d0:	4a4a      	ldr	r2, [pc, #296]	; (800dafc <UART_AdvFeatureConfig+0x144>)
 800d9d2:	4013      	ands	r3, r2
 800d9d4:	0019      	movs	r1, r3
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	430a      	orrs	r2, r1
 800d9e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9e6:	2202      	movs	r2, #2
 800d9e8:	4013      	ands	r3, r2
 800d9ea:	d00b      	beq.n	800da04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	685b      	ldr	r3, [r3, #4]
 800d9f2:	4a43      	ldr	r2, [pc, #268]	; (800db00 <UART_AdvFeatureConfig+0x148>)
 800d9f4:	4013      	ands	r3, r2
 800d9f6:	0019      	movs	r1, r3
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	430a      	orrs	r2, r1
 800da02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da08:	2204      	movs	r2, #4
 800da0a:	4013      	ands	r3, r2
 800da0c:	d00b      	beq.n	800da26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	685b      	ldr	r3, [r3, #4]
 800da14:	4a3b      	ldr	r2, [pc, #236]	; (800db04 <UART_AdvFeatureConfig+0x14c>)
 800da16:	4013      	ands	r3, r2
 800da18:	0019      	movs	r1, r3
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	430a      	orrs	r2, r1
 800da24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da2a:	2208      	movs	r2, #8
 800da2c:	4013      	ands	r3, r2
 800da2e:	d00b      	beq.n	800da48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	685b      	ldr	r3, [r3, #4]
 800da36:	4a34      	ldr	r2, [pc, #208]	; (800db08 <UART_AdvFeatureConfig+0x150>)
 800da38:	4013      	ands	r3, r2
 800da3a:	0019      	movs	r1, r3
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	430a      	orrs	r2, r1
 800da46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da4c:	2210      	movs	r2, #16
 800da4e:	4013      	ands	r3, r2
 800da50:	d00b      	beq.n	800da6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	689b      	ldr	r3, [r3, #8]
 800da58:	4a2c      	ldr	r2, [pc, #176]	; (800db0c <UART_AdvFeatureConfig+0x154>)
 800da5a:	4013      	ands	r3, r2
 800da5c:	0019      	movs	r1, r3
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	430a      	orrs	r2, r1
 800da68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da6e:	2220      	movs	r2, #32
 800da70:	4013      	ands	r3, r2
 800da72:	d00b      	beq.n	800da8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	689b      	ldr	r3, [r3, #8]
 800da7a:	4a25      	ldr	r2, [pc, #148]	; (800db10 <UART_AdvFeatureConfig+0x158>)
 800da7c:	4013      	ands	r3, r2
 800da7e:	0019      	movs	r1, r3
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	430a      	orrs	r2, r1
 800da8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da90:	2240      	movs	r2, #64	; 0x40
 800da92:	4013      	ands	r3, r2
 800da94:	d01d      	beq.n	800dad2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	685b      	ldr	r3, [r3, #4]
 800da9c:	4a1d      	ldr	r2, [pc, #116]	; (800db14 <UART_AdvFeatureConfig+0x15c>)
 800da9e:	4013      	ands	r3, r2
 800daa0:	0019      	movs	r1, r3
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	430a      	orrs	r2, r1
 800daac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dab2:	2380      	movs	r3, #128	; 0x80
 800dab4:	035b      	lsls	r3, r3, #13
 800dab6:	429a      	cmp	r2, r3
 800dab8:	d10b      	bne.n	800dad2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	685b      	ldr	r3, [r3, #4]
 800dac0:	4a15      	ldr	r2, [pc, #84]	; (800db18 <UART_AdvFeatureConfig+0x160>)
 800dac2:	4013      	ands	r3, r2
 800dac4:	0019      	movs	r1, r3
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	430a      	orrs	r2, r1
 800dad0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dad6:	2280      	movs	r2, #128	; 0x80
 800dad8:	4013      	ands	r3, r2
 800dada:	d00b      	beq.n	800daf4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	685b      	ldr	r3, [r3, #4]
 800dae2:	4a0e      	ldr	r2, [pc, #56]	; (800db1c <UART_AdvFeatureConfig+0x164>)
 800dae4:	4013      	ands	r3, r2
 800dae6:	0019      	movs	r1, r3
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	430a      	orrs	r2, r1
 800daf2:	605a      	str	r2, [r3, #4]
  }
}
 800daf4:	46c0      	nop			; (mov r8, r8)
 800daf6:	46bd      	mov	sp, r7
 800daf8:	b002      	add	sp, #8
 800dafa:	bd80      	pop	{r7, pc}
 800dafc:	fffdffff 	.word	0xfffdffff
 800db00:	fffeffff 	.word	0xfffeffff
 800db04:	fffbffff 	.word	0xfffbffff
 800db08:	ffff7fff 	.word	0xffff7fff
 800db0c:	ffffefff 	.word	0xffffefff
 800db10:	ffffdfff 	.word	0xffffdfff
 800db14:	ffefffff 	.word	0xffefffff
 800db18:	ff9fffff 	.word	0xff9fffff
 800db1c:	fff7ffff 	.word	0xfff7ffff

0800db20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800db20:	b580      	push	{r7, lr}
 800db22:	b086      	sub	sp, #24
 800db24:	af02      	add	r7, sp, #8
 800db26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	2290      	movs	r2, #144	; 0x90
 800db2c:	2100      	movs	r1, #0
 800db2e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800db30:	f7fb ff28 	bl	8009984 <HAL_GetTick>
 800db34:	0003      	movs	r3, r0
 800db36:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	2208      	movs	r2, #8
 800db40:	4013      	ands	r3, r2
 800db42:	2b08      	cmp	r3, #8
 800db44:	d10c      	bne.n	800db60 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	2280      	movs	r2, #128	; 0x80
 800db4a:	0391      	lsls	r1, r2, #14
 800db4c:	6878      	ldr	r0, [r7, #4]
 800db4e:	4a1a      	ldr	r2, [pc, #104]	; (800dbb8 <UART_CheckIdleState+0x98>)
 800db50:	9200      	str	r2, [sp, #0]
 800db52:	2200      	movs	r2, #0
 800db54:	f000 f832 	bl	800dbbc <UART_WaitOnFlagUntilTimeout>
 800db58:	1e03      	subs	r3, r0, #0
 800db5a:	d001      	beq.n	800db60 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800db5c:	2303      	movs	r3, #3
 800db5e:	e026      	b.n	800dbae <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	2204      	movs	r2, #4
 800db68:	4013      	ands	r3, r2
 800db6a:	2b04      	cmp	r3, #4
 800db6c:	d10c      	bne.n	800db88 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	2280      	movs	r2, #128	; 0x80
 800db72:	03d1      	lsls	r1, r2, #15
 800db74:	6878      	ldr	r0, [r7, #4]
 800db76:	4a10      	ldr	r2, [pc, #64]	; (800dbb8 <UART_CheckIdleState+0x98>)
 800db78:	9200      	str	r2, [sp, #0]
 800db7a:	2200      	movs	r2, #0
 800db7c:	f000 f81e 	bl	800dbbc <UART_WaitOnFlagUntilTimeout>
 800db80:	1e03      	subs	r3, r0, #0
 800db82:	d001      	beq.n	800db88 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800db84:	2303      	movs	r3, #3
 800db86:	e012      	b.n	800dbae <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	2288      	movs	r2, #136	; 0x88
 800db8c:	2120      	movs	r1, #32
 800db8e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	228c      	movs	r2, #140	; 0x8c
 800db94:	2120      	movs	r1, #32
 800db96:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	2200      	movs	r2, #0
 800db9c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	2200      	movs	r2, #0
 800dba2:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	2284      	movs	r2, #132	; 0x84
 800dba8:	2100      	movs	r1, #0
 800dbaa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800dbac:	2300      	movs	r3, #0
}
 800dbae:	0018      	movs	r0, r3
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	b004      	add	sp, #16
 800dbb4:	bd80      	pop	{r7, pc}
 800dbb6:	46c0      	nop			; (mov r8, r8)
 800dbb8:	01ffffff 	.word	0x01ffffff

0800dbbc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	b094      	sub	sp, #80	; 0x50
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	60f8      	str	r0, [r7, #12]
 800dbc4:	60b9      	str	r1, [r7, #8]
 800dbc6:	603b      	str	r3, [r7, #0]
 800dbc8:	1dfb      	adds	r3, r7, #7
 800dbca:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dbcc:	e0a7      	b.n	800dd1e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dbce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dbd0:	3301      	adds	r3, #1
 800dbd2:	d100      	bne.n	800dbd6 <UART_WaitOnFlagUntilTimeout+0x1a>
 800dbd4:	e0a3      	b.n	800dd1e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dbd6:	f7fb fed5 	bl	8009984 <HAL_GetTick>
 800dbda:	0002      	movs	r2, r0
 800dbdc:	683b      	ldr	r3, [r7, #0]
 800dbde:	1ad3      	subs	r3, r2, r3
 800dbe0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dbe2:	429a      	cmp	r2, r3
 800dbe4:	d302      	bcc.n	800dbec <UART_WaitOnFlagUntilTimeout+0x30>
 800dbe6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d13f      	bne.n	800dc6c <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dbec:	f3ef 8310 	mrs	r3, PRIMASK
 800dbf0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800dbf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800dbf4:	647b      	str	r3, [r7, #68]	; 0x44
 800dbf6:	2301      	movs	r3, #1
 800dbf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dbfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbfc:	f383 8810 	msr	PRIMASK, r3
}
 800dc00:	46c0      	nop			; (mov r8, r8)
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	681a      	ldr	r2, [r3, #0]
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	494e      	ldr	r1, [pc, #312]	; (800dd48 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800dc0e:	400a      	ands	r2, r1
 800dc10:	601a      	str	r2, [r3, #0]
 800dc12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dc14:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc18:	f383 8810 	msr	PRIMASK, r3
}
 800dc1c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc1e:	f3ef 8310 	mrs	r3, PRIMASK
 800dc22:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800dc24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dc26:	643b      	str	r3, [r7, #64]	; 0x40
 800dc28:	2301      	movs	r3, #1
 800dc2a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc2e:	f383 8810 	msr	PRIMASK, r3
}
 800dc32:	46c0      	nop			; (mov r8, r8)
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	689a      	ldr	r2, [r3, #8]
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	2101      	movs	r1, #1
 800dc40:	438a      	bics	r2, r1
 800dc42:	609a      	str	r2, [r3, #8]
 800dc44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc46:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc4a:	f383 8810 	msr	PRIMASK, r3
}
 800dc4e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	2288      	movs	r2, #136	; 0x88
 800dc54:	2120      	movs	r1, #32
 800dc56:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	228c      	movs	r2, #140	; 0x8c
 800dc5c:	2120      	movs	r1, #32
 800dc5e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	2284      	movs	r2, #132	; 0x84
 800dc64:	2100      	movs	r1, #0
 800dc66:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800dc68:	2303      	movs	r3, #3
 800dc6a:	e069      	b.n	800dd40 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	2204      	movs	r2, #4
 800dc74:	4013      	ands	r3, r2
 800dc76:	d052      	beq.n	800dd1e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	69da      	ldr	r2, [r3, #28]
 800dc7e:	2380      	movs	r3, #128	; 0x80
 800dc80:	011b      	lsls	r3, r3, #4
 800dc82:	401a      	ands	r2, r3
 800dc84:	2380      	movs	r3, #128	; 0x80
 800dc86:	011b      	lsls	r3, r3, #4
 800dc88:	429a      	cmp	r2, r3
 800dc8a:	d148      	bne.n	800dd1e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	2280      	movs	r2, #128	; 0x80
 800dc92:	0112      	lsls	r2, r2, #4
 800dc94:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc96:	f3ef 8310 	mrs	r3, PRIMASK
 800dc9a:	613b      	str	r3, [r7, #16]
  return(result);
 800dc9c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800dc9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dca0:	2301      	movs	r3, #1
 800dca2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dca4:	697b      	ldr	r3, [r7, #20]
 800dca6:	f383 8810 	msr	PRIMASK, r3
}
 800dcaa:	46c0      	nop			; (mov r8, r8)
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	681a      	ldr	r2, [r3, #0]
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	4924      	ldr	r1, [pc, #144]	; (800dd48 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800dcb8:	400a      	ands	r2, r1
 800dcba:	601a      	str	r2, [r3, #0]
 800dcbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcbe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dcc0:	69bb      	ldr	r3, [r7, #24]
 800dcc2:	f383 8810 	msr	PRIMASK, r3
}
 800dcc6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dcc8:	f3ef 8310 	mrs	r3, PRIMASK
 800dccc:	61fb      	str	r3, [r7, #28]
  return(result);
 800dcce:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dcd0:	64bb      	str	r3, [r7, #72]	; 0x48
 800dcd2:	2301      	movs	r3, #1
 800dcd4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dcd6:	6a3b      	ldr	r3, [r7, #32]
 800dcd8:	f383 8810 	msr	PRIMASK, r3
}
 800dcdc:	46c0      	nop			; (mov r8, r8)
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	689a      	ldr	r2, [r3, #8]
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	2101      	movs	r1, #1
 800dcea:	438a      	bics	r2, r1
 800dcec:	609a      	str	r2, [r3, #8]
 800dcee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dcf0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dcf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcf4:	f383 8810 	msr	PRIMASK, r3
}
 800dcf8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	2288      	movs	r2, #136	; 0x88
 800dcfe:	2120      	movs	r1, #32
 800dd00:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	228c      	movs	r2, #140	; 0x8c
 800dd06:	2120      	movs	r1, #32
 800dd08:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	2290      	movs	r2, #144	; 0x90
 800dd0e:	2120      	movs	r1, #32
 800dd10:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	2284      	movs	r2, #132	; 0x84
 800dd16:	2100      	movs	r1, #0
 800dd18:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800dd1a:	2303      	movs	r3, #3
 800dd1c:	e010      	b.n	800dd40 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	69db      	ldr	r3, [r3, #28]
 800dd24:	68ba      	ldr	r2, [r7, #8]
 800dd26:	4013      	ands	r3, r2
 800dd28:	68ba      	ldr	r2, [r7, #8]
 800dd2a:	1ad3      	subs	r3, r2, r3
 800dd2c:	425a      	negs	r2, r3
 800dd2e:	4153      	adcs	r3, r2
 800dd30:	b2db      	uxtb	r3, r3
 800dd32:	001a      	movs	r2, r3
 800dd34:	1dfb      	adds	r3, r7, #7
 800dd36:	781b      	ldrb	r3, [r3, #0]
 800dd38:	429a      	cmp	r2, r3
 800dd3a:	d100      	bne.n	800dd3e <UART_WaitOnFlagUntilTimeout+0x182>
 800dd3c:	e747      	b.n	800dbce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dd3e:	2300      	movs	r3, #0
}
 800dd40:	0018      	movs	r0, r3
 800dd42:	46bd      	mov	sp, r7
 800dd44:	b014      	add	sp, #80	; 0x50
 800dd46:	bd80      	pop	{r7, pc}
 800dd48:	fffffe5f 	.word	0xfffffe5f

0800dd4c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	b098      	sub	sp, #96	; 0x60
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	60f8      	str	r0, [r7, #12]
 800dd54:	60b9      	str	r1, [r7, #8]
 800dd56:	1dbb      	adds	r3, r7, #6
 800dd58:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	68ba      	ldr	r2, [r7, #8]
 800dd5e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	1dba      	adds	r2, r7, #6
 800dd64:	215c      	movs	r1, #92	; 0x5c
 800dd66:	8812      	ldrh	r2, [r2, #0]
 800dd68:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	1dba      	adds	r2, r7, #6
 800dd6e:	215e      	movs	r1, #94	; 0x5e
 800dd70:	8812      	ldrh	r2, [r2, #0]
 800dd72:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	2200      	movs	r2, #0
 800dd78:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	689a      	ldr	r2, [r3, #8]
 800dd7e:	2380      	movs	r3, #128	; 0x80
 800dd80:	015b      	lsls	r3, r3, #5
 800dd82:	429a      	cmp	r2, r3
 800dd84:	d10d      	bne.n	800dda2 <UART_Start_Receive_IT+0x56>
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	691b      	ldr	r3, [r3, #16]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d104      	bne.n	800dd98 <UART_Start_Receive_IT+0x4c>
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	2260      	movs	r2, #96	; 0x60
 800dd92:	497b      	ldr	r1, [pc, #492]	; (800df80 <UART_Start_Receive_IT+0x234>)
 800dd94:	5299      	strh	r1, [r3, r2]
 800dd96:	e02e      	b.n	800ddf6 <UART_Start_Receive_IT+0xaa>
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	2260      	movs	r2, #96	; 0x60
 800dd9c:	21ff      	movs	r1, #255	; 0xff
 800dd9e:	5299      	strh	r1, [r3, r2]
 800dda0:	e029      	b.n	800ddf6 <UART_Start_Receive_IT+0xaa>
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	689b      	ldr	r3, [r3, #8]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d10d      	bne.n	800ddc6 <UART_Start_Receive_IT+0x7a>
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	691b      	ldr	r3, [r3, #16]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d104      	bne.n	800ddbc <UART_Start_Receive_IT+0x70>
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	2260      	movs	r2, #96	; 0x60
 800ddb6:	21ff      	movs	r1, #255	; 0xff
 800ddb8:	5299      	strh	r1, [r3, r2]
 800ddba:	e01c      	b.n	800ddf6 <UART_Start_Receive_IT+0xaa>
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	2260      	movs	r2, #96	; 0x60
 800ddc0:	217f      	movs	r1, #127	; 0x7f
 800ddc2:	5299      	strh	r1, [r3, r2]
 800ddc4:	e017      	b.n	800ddf6 <UART_Start_Receive_IT+0xaa>
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	689a      	ldr	r2, [r3, #8]
 800ddca:	2380      	movs	r3, #128	; 0x80
 800ddcc:	055b      	lsls	r3, r3, #21
 800ddce:	429a      	cmp	r2, r3
 800ddd0:	d10d      	bne.n	800ddee <UART_Start_Receive_IT+0xa2>
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	691b      	ldr	r3, [r3, #16]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d104      	bne.n	800dde4 <UART_Start_Receive_IT+0x98>
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	2260      	movs	r2, #96	; 0x60
 800ddde:	217f      	movs	r1, #127	; 0x7f
 800dde0:	5299      	strh	r1, [r3, r2]
 800dde2:	e008      	b.n	800ddf6 <UART_Start_Receive_IT+0xaa>
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	2260      	movs	r2, #96	; 0x60
 800dde8:	213f      	movs	r1, #63	; 0x3f
 800ddea:	5299      	strh	r1, [r3, r2]
 800ddec:	e003      	b.n	800ddf6 <UART_Start_Receive_IT+0xaa>
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	2260      	movs	r2, #96	; 0x60
 800ddf2:	2100      	movs	r1, #0
 800ddf4:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	2290      	movs	r2, #144	; 0x90
 800ddfa:	2100      	movs	r1, #0
 800ddfc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	228c      	movs	r2, #140	; 0x8c
 800de02:	2122      	movs	r1, #34	; 0x22
 800de04:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de06:	f3ef 8310 	mrs	r3, PRIMASK
 800de0a:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 800de0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800de0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800de10:	2301      	movs	r3, #1
 800de12:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de16:	f383 8810 	msr	PRIMASK, r3
}
 800de1a:	46c0      	nop			; (mov r8, r8)
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	689a      	ldr	r2, [r3, #8]
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	2101      	movs	r1, #1
 800de28:	430a      	orrs	r2, r1
 800de2a:	609a      	str	r2, [r3, #8]
 800de2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de2e:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de32:	f383 8810 	msr	PRIMASK, r3
}
 800de36:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800de3c:	2380      	movs	r3, #128	; 0x80
 800de3e:	059b      	lsls	r3, r3, #22
 800de40:	429a      	cmp	r2, r3
 800de42:	d150      	bne.n	800dee6 <UART_Start_Receive_IT+0x19a>
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	2268      	movs	r2, #104	; 0x68
 800de48:	5a9b      	ldrh	r3, [r3, r2]
 800de4a:	1dba      	adds	r2, r7, #6
 800de4c:	8812      	ldrh	r2, [r2, #0]
 800de4e:	429a      	cmp	r2, r3
 800de50:	d349      	bcc.n	800dee6 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	689a      	ldr	r2, [r3, #8]
 800de56:	2380      	movs	r3, #128	; 0x80
 800de58:	015b      	lsls	r3, r3, #5
 800de5a:	429a      	cmp	r2, r3
 800de5c:	d107      	bne.n	800de6e <UART_Start_Receive_IT+0x122>
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	691b      	ldr	r3, [r3, #16]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d103      	bne.n	800de6e <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	4a46      	ldr	r2, [pc, #280]	; (800df84 <UART_Start_Receive_IT+0x238>)
 800de6a:	675a      	str	r2, [r3, #116]	; 0x74
 800de6c:	e002      	b.n	800de74 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	4a45      	ldr	r2, [pc, #276]	; (800df88 <UART_Start_Receive_IT+0x23c>)
 800de72:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	691b      	ldr	r3, [r3, #16]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d019      	beq.n	800deb0 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de7c:	f3ef 8310 	mrs	r3, PRIMASK
 800de80:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800de82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800de84:	65bb      	str	r3, [r7, #88]	; 0x58
 800de86:	2301      	movs	r3, #1
 800de88:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de8c:	f383 8810 	msr	PRIMASK, r3
}
 800de90:	46c0      	nop			; (mov r8, r8)
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	681a      	ldr	r2, [r3, #0]
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	2180      	movs	r1, #128	; 0x80
 800de9e:	0049      	lsls	r1, r1, #1
 800dea0:	430a      	orrs	r2, r1
 800dea2:	601a      	str	r2, [r3, #0]
 800dea4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dea6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800deaa:	f383 8810 	msr	PRIMASK, r3
}
 800deae:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800deb0:	f3ef 8310 	mrs	r3, PRIMASK
 800deb4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800deb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800deb8:	657b      	str	r3, [r7, #84]	; 0x54
 800deba:	2301      	movs	r3, #1
 800debc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800debe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dec0:	f383 8810 	msr	PRIMASK, r3
}
 800dec4:	46c0      	nop			; (mov r8, r8)
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	689a      	ldr	r2, [r3, #8]
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	2180      	movs	r1, #128	; 0x80
 800ded2:	0549      	lsls	r1, r1, #21
 800ded4:	430a      	orrs	r2, r1
 800ded6:	609a      	str	r2, [r3, #8]
 800ded8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800deda:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dedc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dede:	f383 8810 	msr	PRIMASK, r3
}
 800dee2:	46c0      	nop			; (mov r8, r8)
 800dee4:	e047      	b.n	800df76 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	689a      	ldr	r2, [r3, #8]
 800deea:	2380      	movs	r3, #128	; 0x80
 800deec:	015b      	lsls	r3, r3, #5
 800deee:	429a      	cmp	r2, r3
 800def0:	d107      	bne.n	800df02 <UART_Start_Receive_IT+0x1b6>
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	691b      	ldr	r3, [r3, #16]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d103      	bne.n	800df02 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	4a23      	ldr	r2, [pc, #140]	; (800df8c <UART_Start_Receive_IT+0x240>)
 800defe:	675a      	str	r2, [r3, #116]	; 0x74
 800df00:	e002      	b.n	800df08 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	4a22      	ldr	r2, [pc, #136]	; (800df90 <UART_Start_Receive_IT+0x244>)
 800df06:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	691b      	ldr	r3, [r3, #16]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d019      	beq.n	800df44 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800df10:	f3ef 8310 	mrs	r3, PRIMASK
 800df14:	61fb      	str	r3, [r7, #28]
  return(result);
 800df16:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800df18:	64fb      	str	r3, [r7, #76]	; 0x4c
 800df1a:	2301      	movs	r3, #1
 800df1c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df1e:	6a3b      	ldr	r3, [r7, #32]
 800df20:	f383 8810 	msr	PRIMASK, r3
}
 800df24:	46c0      	nop			; (mov r8, r8)
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	681a      	ldr	r2, [r3, #0]
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	2190      	movs	r1, #144	; 0x90
 800df32:	0049      	lsls	r1, r1, #1
 800df34:	430a      	orrs	r2, r1
 800df36:	601a      	str	r2, [r3, #0]
 800df38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df3a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df3e:	f383 8810 	msr	PRIMASK, r3
}
 800df42:	e018      	b.n	800df76 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800df44:	f3ef 8310 	mrs	r3, PRIMASK
 800df48:	613b      	str	r3, [r7, #16]
  return(result);
 800df4a:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800df4c:	653b      	str	r3, [r7, #80]	; 0x50
 800df4e:	2301      	movs	r3, #1
 800df50:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df52:	697b      	ldr	r3, [r7, #20]
 800df54:	f383 8810 	msr	PRIMASK, r3
}
 800df58:	46c0      	nop			; (mov r8, r8)
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	681a      	ldr	r2, [r3, #0]
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	2120      	movs	r1, #32
 800df66:	430a      	orrs	r2, r1
 800df68:	601a      	str	r2, [r3, #0]
 800df6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df6c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df6e:	69bb      	ldr	r3, [r7, #24]
 800df70:	f383 8810 	msr	PRIMASK, r3
}
 800df74:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 800df76:	2300      	movs	r3, #0
}
 800df78:	0018      	movs	r0, r3
 800df7a:	46bd      	mov	sp, r7
 800df7c:	b018      	add	sp, #96	; 0x60
 800df7e:	bd80      	pop	{r7, pc}
 800df80:	000001ff 	.word	0x000001ff
 800df84:	0800e6bd 	.word	0x0800e6bd
 800df88:	0800e3d1 	.word	0x0800e3d1
 800df8c:	0800e25d 	.word	0x0800e25d
 800df90:	0800e0e9 	.word	0x0800e0e9

0800df94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b08e      	sub	sp, #56	; 0x38
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800df9c:	f3ef 8310 	mrs	r3, PRIMASK
 800dfa0:	617b      	str	r3, [r7, #20]
  return(result);
 800dfa2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dfa4:	637b      	str	r3, [r7, #52]	; 0x34
 800dfa6:	2301      	movs	r3, #1
 800dfa8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dfaa:	69bb      	ldr	r3, [r7, #24]
 800dfac:	f383 8810 	msr	PRIMASK, r3
}
 800dfb0:	46c0      	nop			; (mov r8, r8)
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	681a      	ldr	r2, [r3, #0]
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	4926      	ldr	r1, [pc, #152]	; (800e058 <UART_EndRxTransfer+0xc4>)
 800dfbe:	400a      	ands	r2, r1
 800dfc0:	601a      	str	r2, [r3, #0]
 800dfc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfc4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dfc6:	69fb      	ldr	r3, [r7, #28]
 800dfc8:	f383 8810 	msr	PRIMASK, r3
}
 800dfcc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dfce:	f3ef 8310 	mrs	r3, PRIMASK
 800dfd2:	623b      	str	r3, [r7, #32]
  return(result);
 800dfd4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dfd6:	633b      	str	r3, [r7, #48]	; 0x30
 800dfd8:	2301      	movs	r3, #1
 800dfda:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dfdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfde:	f383 8810 	msr	PRIMASK, r3
}
 800dfe2:	46c0      	nop			; (mov r8, r8)
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	689a      	ldr	r2, [r3, #8]
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	491b      	ldr	r1, [pc, #108]	; (800e05c <UART_EndRxTransfer+0xc8>)
 800dff0:	400a      	ands	r2, r1
 800dff2:	609a      	str	r2, [r3, #8]
 800dff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dff6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dffa:	f383 8810 	msr	PRIMASK, r3
}
 800dffe:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e004:	2b01      	cmp	r3, #1
 800e006:	d118      	bne.n	800e03a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e008:	f3ef 8310 	mrs	r3, PRIMASK
 800e00c:	60bb      	str	r3, [r7, #8]
  return(result);
 800e00e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e010:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e012:	2301      	movs	r3, #1
 800e014:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	f383 8810 	msr	PRIMASK, r3
}
 800e01c:	46c0      	nop			; (mov r8, r8)
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	681a      	ldr	r2, [r3, #0]
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	2110      	movs	r1, #16
 800e02a:	438a      	bics	r2, r1
 800e02c:	601a      	str	r2, [r3, #0]
 800e02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e030:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e032:	693b      	ldr	r3, [r7, #16]
 800e034:	f383 8810 	msr	PRIMASK, r3
}
 800e038:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	228c      	movs	r2, #140	; 0x8c
 800e03e:	2120      	movs	r1, #32
 800e040:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	2200      	movs	r2, #0
 800e046:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	2200      	movs	r2, #0
 800e04c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800e04e:	46c0      	nop			; (mov r8, r8)
 800e050:	46bd      	mov	sp, r7
 800e052:	b00e      	add	sp, #56	; 0x38
 800e054:	bd80      	pop	{r7, pc}
 800e056:	46c0      	nop			; (mov r8, r8)
 800e058:	fffffedf 	.word	0xfffffedf
 800e05c:	effffffe 	.word	0xeffffffe

0800e060 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e060:	b580      	push	{r7, lr}
 800e062:	b084      	sub	sp, #16
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e06c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	225e      	movs	r2, #94	; 0x5e
 800e072:	2100      	movs	r1, #0
 800e074:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	2256      	movs	r2, #86	; 0x56
 800e07a:	2100      	movs	r1, #0
 800e07c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	0018      	movs	r0, r3
 800e082:	f7f6 fa57 	bl	8004534 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e086:	46c0      	nop			; (mov r8, r8)
 800e088:	46bd      	mov	sp, r7
 800e08a:	b004      	add	sp, #16
 800e08c:	bd80      	pop	{r7, pc}

0800e08e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e08e:	b580      	push	{r7, lr}
 800e090:	b086      	sub	sp, #24
 800e092:	af00      	add	r7, sp, #0
 800e094:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e096:	f3ef 8310 	mrs	r3, PRIMASK
 800e09a:	60bb      	str	r3, [r7, #8]
  return(result);
 800e09c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e09e:	617b      	str	r3, [r7, #20]
 800e0a0:	2301      	movs	r3, #1
 800e0a2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	f383 8810 	msr	PRIMASK, r3
}
 800e0aa:	46c0      	nop			; (mov r8, r8)
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	681a      	ldr	r2, [r3, #0]
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	2140      	movs	r1, #64	; 0x40
 800e0b8:	438a      	bics	r2, r1
 800e0ba:	601a      	str	r2, [r3, #0]
 800e0bc:	697b      	ldr	r3, [r7, #20]
 800e0be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e0c0:	693b      	ldr	r3, [r7, #16]
 800e0c2:	f383 8810 	msr	PRIMASK, r3
}
 800e0c6:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	2288      	movs	r2, #136	; 0x88
 800e0cc:	2120      	movs	r1, #32
 800e0ce:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	2200      	movs	r2, #0
 800e0d4:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	0018      	movs	r0, r3
 800e0da:	f7ff fab5 	bl	800d648 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e0de:	46c0      	nop			; (mov r8, r8)
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	b006      	add	sp, #24
 800e0e4:	bd80      	pop	{r7, pc}
	...

0800e0e8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b090      	sub	sp, #64	; 0x40
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800e0f0:	203e      	movs	r0, #62	; 0x3e
 800e0f2:	183b      	adds	r3, r7, r0
 800e0f4:	687a      	ldr	r2, [r7, #4]
 800e0f6:	2160      	movs	r1, #96	; 0x60
 800e0f8:	5a52      	ldrh	r2, [r2, r1]
 800e0fa:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	228c      	movs	r2, #140	; 0x8c
 800e100:	589b      	ldr	r3, [r3, r2]
 800e102:	2b22      	cmp	r3, #34	; 0x22
 800e104:	d000      	beq.n	800e108 <UART_RxISR_8BIT+0x20>
 800e106:	e09a      	b.n	800e23e <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e10e:	213c      	movs	r1, #60	; 0x3c
 800e110:	187b      	adds	r3, r7, r1
 800e112:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e114:	187b      	adds	r3, r7, r1
 800e116:	881b      	ldrh	r3, [r3, #0]
 800e118:	b2da      	uxtb	r2, r3
 800e11a:	183b      	adds	r3, r7, r0
 800e11c:	881b      	ldrh	r3, [r3, #0]
 800e11e:	b2d9      	uxtb	r1, r3
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e124:	400a      	ands	r2, r1
 800e126:	b2d2      	uxtb	r2, r2
 800e128:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e12e:	1c5a      	adds	r2, r3, #1
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	225e      	movs	r2, #94	; 0x5e
 800e138:	5a9b      	ldrh	r3, [r3, r2]
 800e13a:	b29b      	uxth	r3, r3
 800e13c:	3b01      	subs	r3, #1
 800e13e:	b299      	uxth	r1, r3
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	225e      	movs	r2, #94	; 0x5e
 800e144:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	225e      	movs	r2, #94	; 0x5e
 800e14a:	5a9b      	ldrh	r3, [r3, r2]
 800e14c:	b29b      	uxth	r3, r3
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d000      	beq.n	800e154 <UART_RxISR_8BIT+0x6c>
 800e152:	e07c      	b.n	800e24e <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e154:	f3ef 8310 	mrs	r3, PRIMASK
 800e158:	61bb      	str	r3, [r7, #24]
  return(result);
 800e15a:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e15c:	63bb      	str	r3, [r7, #56]	; 0x38
 800e15e:	2301      	movs	r3, #1
 800e160:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e162:	69fb      	ldr	r3, [r7, #28]
 800e164:	f383 8810 	msr	PRIMASK, r3
}
 800e168:	46c0      	nop			; (mov r8, r8)
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	681a      	ldr	r2, [r3, #0]
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	4938      	ldr	r1, [pc, #224]	; (800e258 <UART_RxISR_8BIT+0x170>)
 800e176:	400a      	ands	r2, r1
 800e178:	601a      	str	r2, [r3, #0]
 800e17a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e17c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e17e:	6a3b      	ldr	r3, [r7, #32]
 800e180:	f383 8810 	msr	PRIMASK, r3
}
 800e184:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e186:	f3ef 8310 	mrs	r3, PRIMASK
 800e18a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800e18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e18e:	637b      	str	r3, [r7, #52]	; 0x34
 800e190:	2301      	movs	r3, #1
 800e192:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e196:	f383 8810 	msr	PRIMASK, r3
}
 800e19a:	46c0      	nop			; (mov r8, r8)
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	689a      	ldr	r2, [r3, #8]
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	2101      	movs	r1, #1
 800e1a8:	438a      	bics	r2, r1
 800e1aa:	609a      	str	r2, [r3, #8]
 800e1ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e1b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1b2:	f383 8810 	msr	PRIMASK, r3
}
 800e1b6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	228c      	movs	r2, #140	; 0x8c
 800e1bc:	2120      	movs	r1, #32
 800e1be:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	2200      	movs	r2, #0
 800e1ca:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1d0:	2b01      	cmp	r3, #1
 800e1d2:	d12f      	bne.n	800e234 <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	2200      	movs	r2, #0
 800e1d8:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e1da:	f3ef 8310 	mrs	r3, PRIMASK
 800e1de:	60fb      	str	r3, [r7, #12]
  return(result);
 800e1e0:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e1e2:	633b      	str	r3, [r7, #48]	; 0x30
 800e1e4:	2301      	movs	r3, #1
 800e1e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e1e8:	693b      	ldr	r3, [r7, #16]
 800e1ea:	f383 8810 	msr	PRIMASK, r3
}
 800e1ee:	46c0      	nop			; (mov r8, r8)
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	681a      	ldr	r2, [r3, #0]
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	2110      	movs	r1, #16
 800e1fc:	438a      	bics	r2, r1
 800e1fe:	601a      	str	r2, [r3, #0]
 800e200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e202:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e204:	697b      	ldr	r3, [r7, #20]
 800e206:	f383 8810 	msr	PRIMASK, r3
}
 800e20a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	69db      	ldr	r3, [r3, #28]
 800e212:	2210      	movs	r2, #16
 800e214:	4013      	ands	r3, r2
 800e216:	2b10      	cmp	r3, #16
 800e218:	d103      	bne.n	800e222 <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	2210      	movs	r2, #16
 800e220:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	225c      	movs	r2, #92	; 0x5c
 800e226:	5a9a      	ldrh	r2, [r3, r2]
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	0011      	movs	r1, r2
 800e22c:	0018      	movs	r0, r3
 800e22e:	f7ff fa13 	bl	800d658 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e232:	e00c      	b.n	800e24e <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	0018      	movs	r0, r3
 800e238:	f7f6 f9b4 	bl	80045a4 <HAL_UART_RxCpltCallback>
}
 800e23c:	e007      	b.n	800e24e <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	699a      	ldr	r2, [r3, #24]
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	2108      	movs	r1, #8
 800e24a:	430a      	orrs	r2, r1
 800e24c:	619a      	str	r2, [r3, #24]
}
 800e24e:	46c0      	nop			; (mov r8, r8)
 800e250:	46bd      	mov	sp, r7
 800e252:	b010      	add	sp, #64	; 0x40
 800e254:	bd80      	pop	{r7, pc}
 800e256:	46c0      	nop			; (mov r8, r8)
 800e258:	fffffedf 	.word	0xfffffedf

0800e25c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e25c:	b580      	push	{r7, lr}
 800e25e:	b090      	sub	sp, #64	; 0x40
 800e260:	af00      	add	r7, sp, #0
 800e262:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800e264:	203e      	movs	r0, #62	; 0x3e
 800e266:	183b      	adds	r3, r7, r0
 800e268:	687a      	ldr	r2, [r7, #4]
 800e26a:	2160      	movs	r1, #96	; 0x60
 800e26c:	5a52      	ldrh	r2, [r2, r1]
 800e26e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	228c      	movs	r2, #140	; 0x8c
 800e274:	589b      	ldr	r3, [r3, r2]
 800e276:	2b22      	cmp	r3, #34	; 0x22
 800e278:	d000      	beq.n	800e27c <UART_RxISR_16BIT+0x20>
 800e27a:	e09a      	b.n	800e3b2 <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e282:	213c      	movs	r1, #60	; 0x3c
 800e284:	187b      	adds	r3, r7, r1
 800e286:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e28c:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 800e28e:	187b      	adds	r3, r7, r1
 800e290:	183a      	adds	r2, r7, r0
 800e292:	881b      	ldrh	r3, [r3, #0]
 800e294:	8812      	ldrh	r2, [r2, #0]
 800e296:	4013      	ands	r3, r2
 800e298:	b29a      	uxth	r2, r3
 800e29a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e29c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e2a2:	1c9a      	adds	r2, r3, #2
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	225e      	movs	r2, #94	; 0x5e
 800e2ac:	5a9b      	ldrh	r3, [r3, r2]
 800e2ae:	b29b      	uxth	r3, r3
 800e2b0:	3b01      	subs	r3, #1
 800e2b2:	b299      	uxth	r1, r3
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	225e      	movs	r2, #94	; 0x5e
 800e2b8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	225e      	movs	r2, #94	; 0x5e
 800e2be:	5a9b      	ldrh	r3, [r3, r2]
 800e2c0:	b29b      	uxth	r3, r3
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d000      	beq.n	800e2c8 <UART_RxISR_16BIT+0x6c>
 800e2c6:	e07c      	b.n	800e3c2 <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e2c8:	f3ef 8310 	mrs	r3, PRIMASK
 800e2cc:	617b      	str	r3, [r7, #20]
  return(result);
 800e2ce:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e2d0:	637b      	str	r3, [r7, #52]	; 0x34
 800e2d2:	2301      	movs	r3, #1
 800e2d4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e2d6:	69bb      	ldr	r3, [r7, #24]
 800e2d8:	f383 8810 	msr	PRIMASK, r3
}
 800e2dc:	46c0      	nop			; (mov r8, r8)
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	681a      	ldr	r2, [r3, #0]
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	4938      	ldr	r1, [pc, #224]	; (800e3cc <UART_RxISR_16BIT+0x170>)
 800e2ea:	400a      	ands	r2, r1
 800e2ec:	601a      	str	r2, [r3, #0]
 800e2ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e2f2:	69fb      	ldr	r3, [r7, #28]
 800e2f4:	f383 8810 	msr	PRIMASK, r3
}
 800e2f8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e2fa:	f3ef 8310 	mrs	r3, PRIMASK
 800e2fe:	623b      	str	r3, [r7, #32]
  return(result);
 800e300:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e302:	633b      	str	r3, [r7, #48]	; 0x30
 800e304:	2301      	movs	r3, #1
 800e306:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e30a:	f383 8810 	msr	PRIMASK, r3
}
 800e30e:	46c0      	nop			; (mov r8, r8)
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	689a      	ldr	r2, [r3, #8]
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	2101      	movs	r1, #1
 800e31c:	438a      	bics	r2, r1
 800e31e:	609a      	str	r2, [r3, #8]
 800e320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e322:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e326:	f383 8810 	msr	PRIMASK, r3
}
 800e32a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	228c      	movs	r2, #140	; 0x8c
 800e330:	2120      	movs	r1, #32
 800e332:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	2200      	movs	r2, #0
 800e338:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	2200      	movs	r2, #0
 800e33e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e344:	2b01      	cmp	r3, #1
 800e346:	d12f      	bne.n	800e3a8 <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	2200      	movs	r2, #0
 800e34c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e34e:	f3ef 8310 	mrs	r3, PRIMASK
 800e352:	60bb      	str	r3, [r7, #8]
  return(result);
 800e354:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e356:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e358:	2301      	movs	r3, #1
 800e35a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	f383 8810 	msr	PRIMASK, r3
}
 800e362:	46c0      	nop			; (mov r8, r8)
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	681a      	ldr	r2, [r3, #0]
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	2110      	movs	r1, #16
 800e370:	438a      	bics	r2, r1
 800e372:	601a      	str	r2, [r3, #0]
 800e374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e376:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e378:	693b      	ldr	r3, [r7, #16]
 800e37a:	f383 8810 	msr	PRIMASK, r3
}
 800e37e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	69db      	ldr	r3, [r3, #28]
 800e386:	2210      	movs	r2, #16
 800e388:	4013      	ands	r3, r2
 800e38a:	2b10      	cmp	r3, #16
 800e38c:	d103      	bne.n	800e396 <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	2210      	movs	r2, #16
 800e394:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	225c      	movs	r2, #92	; 0x5c
 800e39a:	5a9a      	ldrh	r2, [r3, r2]
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	0011      	movs	r1, r2
 800e3a0:	0018      	movs	r0, r3
 800e3a2:	f7ff f959 	bl	800d658 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e3a6:	e00c      	b.n	800e3c2 <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	0018      	movs	r0, r3
 800e3ac:	f7f6 f8fa 	bl	80045a4 <HAL_UART_RxCpltCallback>
}
 800e3b0:	e007      	b.n	800e3c2 <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	699a      	ldr	r2, [r3, #24]
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	2108      	movs	r1, #8
 800e3be:	430a      	orrs	r2, r1
 800e3c0:	619a      	str	r2, [r3, #24]
}
 800e3c2:	46c0      	nop			; (mov r8, r8)
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	b010      	add	sp, #64	; 0x40
 800e3c8:	bd80      	pop	{r7, pc}
 800e3ca:	46c0      	nop			; (mov r8, r8)
 800e3cc:	fffffedf 	.word	0xfffffedf

0800e3d0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b09c      	sub	sp, #112	; 0x70
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800e3d8:	236a      	movs	r3, #106	; 0x6a
 800e3da:	18fb      	adds	r3, r7, r3
 800e3dc:	687a      	ldr	r2, [r7, #4]
 800e3de:	2160      	movs	r1, #96	; 0x60
 800e3e0:	5a52      	ldrh	r2, [r2, r1]
 800e3e2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	69db      	ldr	r3, [r3, #28]
 800e3ea:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	689b      	ldr	r3, [r3, #8]
 800e3fa:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	228c      	movs	r2, #140	; 0x8c
 800e400:	589b      	ldr	r3, [r3, r2]
 800e402:	2b22      	cmp	r3, #34	; 0x22
 800e404:	d000      	beq.n	800e408 <UART_RxISR_8BIT_FIFOEN+0x38>
 800e406:	e144      	b.n	800e692 <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e408:	235e      	movs	r3, #94	; 0x5e
 800e40a:	18fb      	adds	r3, r7, r3
 800e40c:	687a      	ldr	r2, [r7, #4]
 800e40e:	2168      	movs	r1, #104	; 0x68
 800e410:	5a52      	ldrh	r2, [r2, r1]
 800e412:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e414:	e0eb      	b.n	800e5ee <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e41c:	215c      	movs	r1, #92	; 0x5c
 800e41e:	187b      	adds	r3, r7, r1
 800e420:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e422:	187b      	adds	r3, r7, r1
 800e424:	881b      	ldrh	r3, [r3, #0]
 800e426:	b2da      	uxtb	r2, r3
 800e428:	236a      	movs	r3, #106	; 0x6a
 800e42a:	18fb      	adds	r3, r7, r3
 800e42c:	881b      	ldrh	r3, [r3, #0]
 800e42e:	b2d9      	uxtb	r1, r3
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e434:	400a      	ands	r2, r1
 800e436:	b2d2      	uxtb	r2, r2
 800e438:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e43e:	1c5a      	adds	r2, r3, #1
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	225e      	movs	r2, #94	; 0x5e
 800e448:	5a9b      	ldrh	r3, [r3, r2]
 800e44a:	b29b      	uxth	r3, r3
 800e44c:	3b01      	subs	r3, #1
 800e44e:	b299      	uxth	r1, r3
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	225e      	movs	r2, #94	; 0x5e
 800e454:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	69db      	ldr	r3, [r3, #28]
 800e45c:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e45e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e460:	2207      	movs	r2, #7
 800e462:	4013      	ands	r3, r2
 800e464:	d049      	beq.n	800e4fa <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e468:	2201      	movs	r2, #1
 800e46a:	4013      	ands	r3, r2
 800e46c:	d010      	beq.n	800e490 <UART_RxISR_8BIT_FIFOEN+0xc0>
 800e46e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e470:	2380      	movs	r3, #128	; 0x80
 800e472:	005b      	lsls	r3, r3, #1
 800e474:	4013      	ands	r3, r2
 800e476:	d00b      	beq.n	800e490 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	2201      	movs	r2, #1
 800e47e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	2290      	movs	r2, #144	; 0x90
 800e484:	589b      	ldr	r3, [r3, r2]
 800e486:	2201      	movs	r2, #1
 800e488:	431a      	orrs	r2, r3
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	2190      	movs	r1, #144	; 0x90
 800e48e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e490:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e492:	2202      	movs	r2, #2
 800e494:	4013      	ands	r3, r2
 800e496:	d00f      	beq.n	800e4b8 <UART_RxISR_8BIT_FIFOEN+0xe8>
 800e498:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e49a:	2201      	movs	r2, #1
 800e49c:	4013      	ands	r3, r2
 800e49e:	d00b      	beq.n	800e4b8 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	2202      	movs	r2, #2
 800e4a6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	2290      	movs	r2, #144	; 0x90
 800e4ac:	589b      	ldr	r3, [r3, r2]
 800e4ae:	2204      	movs	r2, #4
 800e4b0:	431a      	orrs	r2, r3
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	2190      	movs	r1, #144	; 0x90
 800e4b6:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e4b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e4ba:	2204      	movs	r2, #4
 800e4bc:	4013      	ands	r3, r2
 800e4be:	d00f      	beq.n	800e4e0 <UART_RxISR_8BIT_FIFOEN+0x110>
 800e4c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e4c2:	2201      	movs	r2, #1
 800e4c4:	4013      	ands	r3, r2
 800e4c6:	d00b      	beq.n	800e4e0 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	2204      	movs	r2, #4
 800e4ce:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	2290      	movs	r2, #144	; 0x90
 800e4d4:	589b      	ldr	r3, [r3, r2]
 800e4d6:	2202      	movs	r2, #2
 800e4d8:	431a      	orrs	r2, r3
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	2190      	movs	r1, #144	; 0x90
 800e4de:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	2290      	movs	r2, #144	; 0x90
 800e4e4:	589b      	ldr	r3, [r3, r2]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d007      	beq.n	800e4fa <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	0018      	movs	r0, r3
 800e4ee:	f7f6 f821 	bl	8004534 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	2290      	movs	r2, #144	; 0x90
 800e4f6:	2100      	movs	r1, #0
 800e4f8:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	225e      	movs	r2, #94	; 0x5e
 800e4fe:	5a9b      	ldrh	r3, [r3, r2]
 800e500:	b29b      	uxth	r3, r3
 800e502:	2b00      	cmp	r3, #0
 800e504:	d173      	bne.n	800e5ee <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e506:	f3ef 8310 	mrs	r3, PRIMASK
 800e50a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800e50c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e50e:	65bb      	str	r3, [r7, #88]	; 0x58
 800e510:	2301      	movs	r3, #1
 800e512:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e516:	f383 8810 	msr	PRIMASK, r3
}
 800e51a:	46c0      	nop			; (mov r8, r8)
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	681a      	ldr	r2, [r3, #0]
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	4961      	ldr	r1, [pc, #388]	; (800e6ac <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 800e528:	400a      	ands	r2, r1
 800e52a:	601a      	str	r2, [r3, #0]
 800e52c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e52e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e532:	f383 8810 	msr	PRIMASK, r3
}
 800e536:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e538:	f3ef 8310 	mrs	r3, PRIMASK
 800e53c:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 800e53e:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e540:	657b      	str	r3, [r7, #84]	; 0x54
 800e542:	2301      	movs	r3, #1
 800e544:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e548:	f383 8810 	msr	PRIMASK, r3
}
 800e54c:	46c0      	nop			; (mov r8, r8)
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	689a      	ldr	r2, [r3, #8]
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	4955      	ldr	r1, [pc, #340]	; (800e6b0 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 800e55a:	400a      	ands	r2, r1
 800e55c:	609a      	str	r2, [r3, #8]
 800e55e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e560:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e562:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e564:	f383 8810 	msr	PRIMASK, r3
}
 800e568:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	228c      	movs	r2, #140	; 0x8c
 800e56e:	2120      	movs	r1, #32
 800e570:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	2200      	movs	r2, #0
 800e576:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	2200      	movs	r2, #0
 800e57c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e582:	2b01      	cmp	r3, #1
 800e584:	d12f      	bne.n	800e5e6 <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	2200      	movs	r2, #0
 800e58a:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e58c:	f3ef 8310 	mrs	r3, PRIMASK
 800e590:	623b      	str	r3, [r7, #32]
  return(result);
 800e592:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e594:	653b      	str	r3, [r7, #80]	; 0x50
 800e596:	2301      	movs	r3, #1
 800e598:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e59c:	f383 8810 	msr	PRIMASK, r3
}
 800e5a0:	46c0      	nop			; (mov r8, r8)
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	681a      	ldr	r2, [r3, #0]
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	2110      	movs	r1, #16
 800e5ae:	438a      	bics	r2, r1
 800e5b0:	601a      	str	r2, [r3, #0]
 800e5b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e5b4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e5b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5b8:	f383 8810 	msr	PRIMASK, r3
}
 800e5bc:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	69db      	ldr	r3, [r3, #28]
 800e5c4:	2210      	movs	r2, #16
 800e5c6:	4013      	ands	r3, r2
 800e5c8:	2b10      	cmp	r3, #16
 800e5ca:	d103      	bne.n	800e5d4 <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	2210      	movs	r2, #16
 800e5d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	225c      	movs	r2, #92	; 0x5c
 800e5d8:	5a9a      	ldrh	r2, [r3, r2]
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	0011      	movs	r1, r2
 800e5de:	0018      	movs	r0, r3
 800e5e0:	f7ff f83a 	bl	800d658 <HAL_UARTEx_RxEventCallback>
 800e5e4:	e003      	b.n	800e5ee <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	0018      	movs	r0, r3
 800e5ea:	f7f5 ffdb 	bl	80045a4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e5ee:	235e      	movs	r3, #94	; 0x5e
 800e5f0:	18fb      	adds	r3, r7, r3
 800e5f2:	881b      	ldrh	r3, [r3, #0]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d004      	beq.n	800e602 <UART_RxISR_8BIT_FIFOEN+0x232>
 800e5f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e5fa:	2220      	movs	r2, #32
 800e5fc:	4013      	ands	r3, r2
 800e5fe:	d000      	beq.n	800e602 <UART_RxISR_8BIT_FIFOEN+0x232>
 800e600:	e709      	b.n	800e416 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e602:	204e      	movs	r0, #78	; 0x4e
 800e604:	183b      	adds	r3, r7, r0
 800e606:	687a      	ldr	r2, [r7, #4]
 800e608:	215e      	movs	r1, #94	; 0x5e
 800e60a:	5a52      	ldrh	r2, [r2, r1]
 800e60c:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e60e:	0001      	movs	r1, r0
 800e610:	187b      	adds	r3, r7, r1
 800e612:	881b      	ldrh	r3, [r3, #0]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d044      	beq.n	800e6a2 <UART_RxISR_8BIT_FIFOEN+0x2d2>
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	2268      	movs	r2, #104	; 0x68
 800e61c:	5a9b      	ldrh	r3, [r3, r2]
 800e61e:	187a      	adds	r2, r7, r1
 800e620:	8812      	ldrh	r2, [r2, #0]
 800e622:	429a      	cmp	r2, r3
 800e624:	d23d      	bcs.n	800e6a2 <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e626:	f3ef 8310 	mrs	r3, PRIMASK
 800e62a:	60bb      	str	r3, [r7, #8]
  return(result);
 800e62c:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e62e:	64bb      	str	r3, [r7, #72]	; 0x48
 800e630:	2301      	movs	r3, #1
 800e632:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	f383 8810 	msr	PRIMASK, r3
}
 800e63a:	46c0      	nop			; (mov r8, r8)
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	689a      	ldr	r2, [r3, #8]
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	491b      	ldr	r1, [pc, #108]	; (800e6b4 <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 800e648:	400a      	ands	r2, r1
 800e64a:	609a      	str	r2, [r3, #8]
 800e64c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e64e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e650:	693b      	ldr	r3, [r7, #16]
 800e652:	f383 8810 	msr	PRIMASK, r3
}
 800e656:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	4a17      	ldr	r2, [pc, #92]	; (800e6b8 <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 800e65c:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e65e:	f3ef 8310 	mrs	r3, PRIMASK
 800e662:	617b      	str	r3, [r7, #20]
  return(result);
 800e664:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e666:	647b      	str	r3, [r7, #68]	; 0x44
 800e668:	2301      	movs	r3, #1
 800e66a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e66c:	69bb      	ldr	r3, [r7, #24]
 800e66e:	f383 8810 	msr	PRIMASK, r3
}
 800e672:	46c0      	nop			; (mov r8, r8)
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	681a      	ldr	r2, [r3, #0]
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	2120      	movs	r1, #32
 800e680:	430a      	orrs	r2, r1
 800e682:	601a      	str	r2, [r3, #0]
 800e684:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e686:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e688:	69fb      	ldr	r3, [r7, #28]
 800e68a:	f383 8810 	msr	PRIMASK, r3
}
 800e68e:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e690:	e007      	b.n	800e6a2 <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	699a      	ldr	r2, [r3, #24]
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	2108      	movs	r1, #8
 800e69e:	430a      	orrs	r2, r1
 800e6a0:	619a      	str	r2, [r3, #24]
}
 800e6a2:	46c0      	nop			; (mov r8, r8)
 800e6a4:	46bd      	mov	sp, r7
 800e6a6:	b01c      	add	sp, #112	; 0x70
 800e6a8:	bd80      	pop	{r7, pc}
 800e6aa:	46c0      	nop			; (mov r8, r8)
 800e6ac:	fffffeff 	.word	0xfffffeff
 800e6b0:	effffffe 	.word	0xeffffffe
 800e6b4:	efffffff 	.word	0xefffffff
 800e6b8:	0800e0e9 	.word	0x0800e0e9

0800e6bc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b09e      	sub	sp, #120	; 0x78
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800e6c4:	2372      	movs	r3, #114	; 0x72
 800e6c6:	18fb      	adds	r3, r7, r3
 800e6c8:	687a      	ldr	r2, [r7, #4]
 800e6ca:	2160      	movs	r1, #96	; 0x60
 800e6cc:	5a52      	ldrh	r2, [r2, r1]
 800e6ce:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	69db      	ldr	r3, [r3, #28]
 800e6d6:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	689b      	ldr	r3, [r3, #8]
 800e6e6:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	228c      	movs	r2, #140	; 0x8c
 800e6ec:	589b      	ldr	r3, [r3, r2]
 800e6ee:	2b22      	cmp	r3, #34	; 0x22
 800e6f0:	d000      	beq.n	800e6f4 <UART_RxISR_16BIT_FIFOEN+0x38>
 800e6f2:	e144      	b.n	800e97e <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e6f4:	2366      	movs	r3, #102	; 0x66
 800e6f6:	18fb      	adds	r3, r7, r3
 800e6f8:	687a      	ldr	r2, [r7, #4]
 800e6fa:	2168      	movs	r1, #104	; 0x68
 800e6fc:	5a52      	ldrh	r2, [r2, r1]
 800e6fe:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e700:	e0eb      	b.n	800e8da <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e708:	2164      	movs	r1, #100	; 0x64
 800e70a:	187b      	adds	r3, r7, r1
 800e70c:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e712:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 800e714:	187b      	adds	r3, r7, r1
 800e716:	2272      	movs	r2, #114	; 0x72
 800e718:	18ba      	adds	r2, r7, r2
 800e71a:	881b      	ldrh	r3, [r3, #0]
 800e71c:	8812      	ldrh	r2, [r2, #0]
 800e71e:	4013      	ands	r3, r2
 800e720:	b29a      	uxth	r2, r3
 800e722:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e724:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e72a:	1c9a      	adds	r2, r3, #2
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	225e      	movs	r2, #94	; 0x5e
 800e734:	5a9b      	ldrh	r3, [r3, r2]
 800e736:	b29b      	uxth	r3, r3
 800e738:	3b01      	subs	r3, #1
 800e73a:	b299      	uxth	r1, r3
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	225e      	movs	r2, #94	; 0x5e
 800e740:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	69db      	ldr	r3, [r3, #28]
 800e748:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e74a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e74c:	2207      	movs	r2, #7
 800e74e:	4013      	ands	r3, r2
 800e750:	d049      	beq.n	800e7e6 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e752:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e754:	2201      	movs	r2, #1
 800e756:	4013      	ands	r3, r2
 800e758:	d010      	beq.n	800e77c <UART_RxISR_16BIT_FIFOEN+0xc0>
 800e75a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e75c:	2380      	movs	r3, #128	; 0x80
 800e75e:	005b      	lsls	r3, r3, #1
 800e760:	4013      	ands	r3, r2
 800e762:	d00b      	beq.n	800e77c <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	2201      	movs	r2, #1
 800e76a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	2290      	movs	r2, #144	; 0x90
 800e770:	589b      	ldr	r3, [r3, r2]
 800e772:	2201      	movs	r2, #1
 800e774:	431a      	orrs	r2, r3
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	2190      	movs	r1, #144	; 0x90
 800e77a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e77c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e77e:	2202      	movs	r2, #2
 800e780:	4013      	ands	r3, r2
 800e782:	d00f      	beq.n	800e7a4 <UART_RxISR_16BIT_FIFOEN+0xe8>
 800e784:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e786:	2201      	movs	r2, #1
 800e788:	4013      	ands	r3, r2
 800e78a:	d00b      	beq.n	800e7a4 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	2202      	movs	r2, #2
 800e792:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	2290      	movs	r2, #144	; 0x90
 800e798:	589b      	ldr	r3, [r3, r2]
 800e79a:	2204      	movs	r2, #4
 800e79c:	431a      	orrs	r2, r3
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	2190      	movs	r1, #144	; 0x90
 800e7a2:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e7a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e7a6:	2204      	movs	r2, #4
 800e7a8:	4013      	ands	r3, r2
 800e7aa:	d00f      	beq.n	800e7cc <UART_RxISR_16BIT_FIFOEN+0x110>
 800e7ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e7ae:	2201      	movs	r2, #1
 800e7b0:	4013      	ands	r3, r2
 800e7b2:	d00b      	beq.n	800e7cc <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	2204      	movs	r2, #4
 800e7ba:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	2290      	movs	r2, #144	; 0x90
 800e7c0:	589b      	ldr	r3, [r3, r2]
 800e7c2:	2202      	movs	r2, #2
 800e7c4:	431a      	orrs	r2, r3
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	2190      	movs	r1, #144	; 0x90
 800e7ca:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	2290      	movs	r2, #144	; 0x90
 800e7d0:	589b      	ldr	r3, [r3, r2]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d007      	beq.n	800e7e6 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	0018      	movs	r0, r3
 800e7da:	f7f5 feab 	bl	8004534 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	2290      	movs	r2, #144	; 0x90
 800e7e2:	2100      	movs	r1, #0
 800e7e4:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	225e      	movs	r2, #94	; 0x5e
 800e7ea:	5a9b      	ldrh	r3, [r3, r2]
 800e7ec:	b29b      	uxth	r3, r3
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d173      	bne.n	800e8da <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e7f2:	f3ef 8310 	mrs	r3, PRIMASK
 800e7f6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800e7f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e7fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e7fc:	2301      	movs	r3, #1
 800e7fe:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e802:	f383 8810 	msr	PRIMASK, r3
}
 800e806:	46c0      	nop			; (mov r8, r8)
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	681a      	ldr	r2, [r3, #0]
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	4961      	ldr	r1, [pc, #388]	; (800e998 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 800e814:	400a      	ands	r2, r1
 800e816:	601a      	str	r2, [r3, #0]
 800e818:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e81a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e81c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e81e:	f383 8810 	msr	PRIMASK, r3
}
 800e822:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e824:	f3ef 8310 	mrs	r3, PRIMASK
 800e828:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800e82a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e82c:	65bb      	str	r3, [r7, #88]	; 0x58
 800e82e:	2301      	movs	r3, #1
 800e830:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e832:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e834:	f383 8810 	msr	PRIMASK, r3
}
 800e838:	46c0      	nop			; (mov r8, r8)
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	689a      	ldr	r2, [r3, #8]
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	4955      	ldr	r1, [pc, #340]	; (800e99c <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 800e846:	400a      	ands	r2, r1
 800e848:	609a      	str	r2, [r3, #8]
 800e84a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e84c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e84e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e850:	f383 8810 	msr	PRIMASK, r3
}
 800e854:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	228c      	movs	r2, #140	; 0x8c
 800e85a:	2120      	movs	r1, #32
 800e85c:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	2200      	movs	r2, #0
 800e862:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	2200      	movs	r2, #0
 800e868:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e86e:	2b01      	cmp	r3, #1
 800e870:	d12f      	bne.n	800e8d2 <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	2200      	movs	r2, #0
 800e876:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e878:	f3ef 8310 	mrs	r3, PRIMASK
 800e87c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800e87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e880:	657b      	str	r3, [r7, #84]	; 0x54
 800e882:	2301      	movs	r3, #1
 800e884:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e888:	f383 8810 	msr	PRIMASK, r3
}
 800e88c:	46c0      	nop			; (mov r8, r8)
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	681a      	ldr	r2, [r3, #0]
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	2110      	movs	r1, #16
 800e89a:	438a      	bics	r2, r1
 800e89c:	601a      	str	r2, [r3, #0]
 800e89e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e8a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e8a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8a4:	f383 8810 	msr	PRIMASK, r3
}
 800e8a8:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	69db      	ldr	r3, [r3, #28]
 800e8b0:	2210      	movs	r2, #16
 800e8b2:	4013      	ands	r3, r2
 800e8b4:	2b10      	cmp	r3, #16
 800e8b6:	d103      	bne.n	800e8c0 <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	2210      	movs	r2, #16
 800e8be:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	225c      	movs	r2, #92	; 0x5c
 800e8c4:	5a9a      	ldrh	r2, [r3, r2]
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	0011      	movs	r1, r2
 800e8ca:	0018      	movs	r0, r3
 800e8cc:	f7fe fec4 	bl	800d658 <HAL_UARTEx_RxEventCallback>
 800e8d0:	e003      	b.n	800e8da <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	0018      	movs	r0, r3
 800e8d6:	f7f5 fe65 	bl	80045a4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e8da:	2366      	movs	r3, #102	; 0x66
 800e8dc:	18fb      	adds	r3, r7, r3
 800e8de:	881b      	ldrh	r3, [r3, #0]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d004      	beq.n	800e8ee <UART_RxISR_16BIT_FIFOEN+0x232>
 800e8e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e8e6:	2220      	movs	r2, #32
 800e8e8:	4013      	ands	r3, r2
 800e8ea:	d000      	beq.n	800e8ee <UART_RxISR_16BIT_FIFOEN+0x232>
 800e8ec:	e709      	b.n	800e702 <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e8ee:	2052      	movs	r0, #82	; 0x52
 800e8f0:	183b      	adds	r3, r7, r0
 800e8f2:	687a      	ldr	r2, [r7, #4]
 800e8f4:	215e      	movs	r1, #94	; 0x5e
 800e8f6:	5a52      	ldrh	r2, [r2, r1]
 800e8f8:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e8fa:	0001      	movs	r1, r0
 800e8fc:	187b      	adds	r3, r7, r1
 800e8fe:	881b      	ldrh	r3, [r3, #0]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d044      	beq.n	800e98e <UART_RxISR_16BIT_FIFOEN+0x2d2>
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	2268      	movs	r2, #104	; 0x68
 800e908:	5a9b      	ldrh	r3, [r3, r2]
 800e90a:	187a      	adds	r2, r7, r1
 800e90c:	8812      	ldrh	r2, [r2, #0]
 800e90e:	429a      	cmp	r2, r3
 800e910:	d23d      	bcs.n	800e98e <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e912:	f3ef 8310 	mrs	r3, PRIMASK
 800e916:	60fb      	str	r3, [r7, #12]
  return(result);
 800e918:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e91a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e91c:	2301      	movs	r3, #1
 800e91e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e920:	693b      	ldr	r3, [r7, #16]
 800e922:	f383 8810 	msr	PRIMASK, r3
}
 800e926:	46c0      	nop			; (mov r8, r8)
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	689a      	ldr	r2, [r3, #8]
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	491b      	ldr	r1, [pc, #108]	; (800e9a0 <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 800e934:	400a      	ands	r2, r1
 800e936:	609a      	str	r2, [r3, #8]
 800e938:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e93a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e93c:	697b      	ldr	r3, [r7, #20]
 800e93e:	f383 8810 	msr	PRIMASK, r3
}
 800e942:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	4a17      	ldr	r2, [pc, #92]	; (800e9a4 <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 800e948:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e94a:	f3ef 8310 	mrs	r3, PRIMASK
 800e94e:	61bb      	str	r3, [r7, #24]
  return(result);
 800e950:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e952:	64bb      	str	r3, [r7, #72]	; 0x48
 800e954:	2301      	movs	r3, #1
 800e956:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e958:	69fb      	ldr	r3, [r7, #28]
 800e95a:	f383 8810 	msr	PRIMASK, r3
}
 800e95e:	46c0      	nop			; (mov r8, r8)
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	681a      	ldr	r2, [r3, #0]
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	2120      	movs	r1, #32
 800e96c:	430a      	orrs	r2, r1
 800e96e:	601a      	str	r2, [r3, #0]
 800e970:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e972:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e974:	6a3b      	ldr	r3, [r7, #32]
 800e976:	f383 8810 	msr	PRIMASK, r3
}
 800e97a:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e97c:	e007      	b.n	800e98e <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	699a      	ldr	r2, [r3, #24]
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	2108      	movs	r1, #8
 800e98a:	430a      	orrs	r2, r1
 800e98c:	619a      	str	r2, [r3, #24]
}
 800e98e:	46c0      	nop			; (mov r8, r8)
 800e990:	46bd      	mov	sp, r7
 800e992:	b01e      	add	sp, #120	; 0x78
 800e994:	bd80      	pop	{r7, pc}
 800e996:	46c0      	nop			; (mov r8, r8)
 800e998:	fffffeff 	.word	0xfffffeff
 800e99c:	effffffe 	.word	0xeffffffe
 800e9a0:	efffffff 	.word	0xefffffff
 800e9a4:	0800e25d 	.word	0x0800e25d

0800e9a8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b082      	sub	sp, #8
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e9b0:	46c0      	nop			; (mov r8, r8)
 800e9b2:	46bd      	mov	sp, r7
 800e9b4:	b002      	add	sp, #8
 800e9b6:	bd80      	pop	{r7, pc}

0800e9b8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b082      	sub	sp, #8
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e9c0:	46c0      	nop			; (mov r8, r8)
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	b002      	add	sp, #8
 800e9c6:	bd80      	pop	{r7, pc}

0800e9c8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b082      	sub	sp, #8
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e9d0:	46c0      	nop			; (mov r8, r8)
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	b002      	add	sp, #8
 800e9d6:	bd80      	pop	{r7, pc}

0800e9d8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b084      	sub	sp, #16
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	2284      	movs	r2, #132	; 0x84
 800e9e4:	5c9b      	ldrb	r3, [r3, r2]
 800e9e6:	2b01      	cmp	r3, #1
 800e9e8:	d101      	bne.n	800e9ee <HAL_UARTEx_DisableFifoMode+0x16>
 800e9ea:	2302      	movs	r3, #2
 800e9ec:	e027      	b.n	800ea3e <HAL_UARTEx_DisableFifoMode+0x66>
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	2284      	movs	r2, #132	; 0x84
 800e9f2:	2101      	movs	r1, #1
 800e9f4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	2288      	movs	r2, #136	; 0x88
 800e9fa:	2124      	movs	r1, #36	; 0x24
 800e9fc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	681a      	ldr	r2, [r3, #0]
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	2101      	movs	r1, #1
 800ea12:	438a      	bics	r2, r1
 800ea14:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	4a0b      	ldr	r2, [pc, #44]	; (800ea48 <HAL_UARTEx_DisableFifoMode+0x70>)
 800ea1a:	4013      	ands	r3, r2
 800ea1c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	2200      	movs	r2, #0
 800ea22:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	68fa      	ldr	r2, [r7, #12]
 800ea2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	2288      	movs	r2, #136	; 0x88
 800ea30:	2120      	movs	r1, #32
 800ea32:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	2284      	movs	r2, #132	; 0x84
 800ea38:	2100      	movs	r1, #0
 800ea3a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ea3c:	2300      	movs	r3, #0
}
 800ea3e:	0018      	movs	r0, r3
 800ea40:	46bd      	mov	sp, r7
 800ea42:	b004      	add	sp, #16
 800ea44:	bd80      	pop	{r7, pc}
 800ea46:	46c0      	nop			; (mov r8, r8)
 800ea48:	dfffffff 	.word	0xdfffffff

0800ea4c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	b084      	sub	sp, #16
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]
 800ea54:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	2284      	movs	r2, #132	; 0x84
 800ea5a:	5c9b      	ldrb	r3, [r3, r2]
 800ea5c:	2b01      	cmp	r3, #1
 800ea5e:	d101      	bne.n	800ea64 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ea60:	2302      	movs	r3, #2
 800ea62:	e02e      	b.n	800eac2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	2284      	movs	r2, #132	; 0x84
 800ea68:	2101      	movs	r1, #1
 800ea6a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	2288      	movs	r2, #136	; 0x88
 800ea70:	2124      	movs	r1, #36	; 0x24
 800ea72:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	681a      	ldr	r2, [r3, #0]
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	2101      	movs	r1, #1
 800ea88:	438a      	bics	r2, r1
 800ea8a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	689b      	ldr	r3, [r3, #8]
 800ea92:	00db      	lsls	r3, r3, #3
 800ea94:	08d9      	lsrs	r1, r3, #3
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	683a      	ldr	r2, [r7, #0]
 800ea9c:	430a      	orrs	r2, r1
 800ea9e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	0018      	movs	r0, r3
 800eaa4:	f000 f854 	bl	800eb50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	68fa      	ldr	r2, [r7, #12]
 800eaae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	2288      	movs	r2, #136	; 0x88
 800eab4:	2120      	movs	r1, #32
 800eab6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	2284      	movs	r2, #132	; 0x84
 800eabc:	2100      	movs	r1, #0
 800eabe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800eac0:	2300      	movs	r3, #0
}
 800eac2:	0018      	movs	r0, r3
 800eac4:	46bd      	mov	sp, r7
 800eac6:	b004      	add	sp, #16
 800eac8:	bd80      	pop	{r7, pc}
	...

0800eacc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800eacc:	b580      	push	{r7, lr}
 800eace:	b084      	sub	sp, #16
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	6078      	str	r0, [r7, #4]
 800ead4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	2284      	movs	r2, #132	; 0x84
 800eada:	5c9b      	ldrb	r3, [r3, r2]
 800eadc:	2b01      	cmp	r3, #1
 800eade:	d101      	bne.n	800eae4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800eae0:	2302      	movs	r3, #2
 800eae2:	e02f      	b.n	800eb44 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	2284      	movs	r2, #132	; 0x84
 800eae8:	2101      	movs	r1, #1
 800eaea:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	2288      	movs	r2, #136	; 0x88
 800eaf0:	2124      	movs	r1, #36	; 0x24
 800eaf2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	681a      	ldr	r2, [r3, #0]
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	2101      	movs	r1, #1
 800eb08:	438a      	bics	r2, r1
 800eb0a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	689b      	ldr	r3, [r3, #8]
 800eb12:	4a0e      	ldr	r2, [pc, #56]	; (800eb4c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800eb14:	4013      	ands	r3, r2
 800eb16:	0019      	movs	r1, r3
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	683a      	ldr	r2, [r7, #0]
 800eb1e:	430a      	orrs	r2, r1
 800eb20:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	0018      	movs	r0, r3
 800eb26:	f000 f813 	bl	800eb50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	68fa      	ldr	r2, [r7, #12]
 800eb30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	2288      	movs	r2, #136	; 0x88
 800eb36:	2120      	movs	r1, #32
 800eb38:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	2284      	movs	r2, #132	; 0x84
 800eb3e:	2100      	movs	r1, #0
 800eb40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800eb42:	2300      	movs	r3, #0
}
 800eb44:	0018      	movs	r0, r3
 800eb46:	46bd      	mov	sp, r7
 800eb48:	b004      	add	sp, #16
 800eb4a:	bd80      	pop	{r7, pc}
 800eb4c:	f1ffffff 	.word	0xf1ffffff

0800eb50 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800eb50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb52:	b085      	sub	sp, #20
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d108      	bne.n	800eb72 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	226a      	movs	r2, #106	; 0x6a
 800eb64:	2101      	movs	r1, #1
 800eb66:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	2268      	movs	r2, #104	; 0x68
 800eb6c:	2101      	movs	r1, #1
 800eb6e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800eb70:	e043      	b.n	800ebfa <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800eb72:	260f      	movs	r6, #15
 800eb74:	19bb      	adds	r3, r7, r6
 800eb76:	2208      	movs	r2, #8
 800eb78:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800eb7a:	200e      	movs	r0, #14
 800eb7c:	183b      	adds	r3, r7, r0
 800eb7e:	2208      	movs	r2, #8
 800eb80:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	689b      	ldr	r3, [r3, #8]
 800eb88:	0e5b      	lsrs	r3, r3, #25
 800eb8a:	b2da      	uxtb	r2, r3
 800eb8c:	240d      	movs	r4, #13
 800eb8e:	193b      	adds	r3, r7, r4
 800eb90:	2107      	movs	r1, #7
 800eb92:	400a      	ands	r2, r1
 800eb94:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	689b      	ldr	r3, [r3, #8]
 800eb9c:	0f5b      	lsrs	r3, r3, #29
 800eb9e:	b2da      	uxtb	r2, r3
 800eba0:	250c      	movs	r5, #12
 800eba2:	197b      	adds	r3, r7, r5
 800eba4:	2107      	movs	r1, #7
 800eba6:	400a      	ands	r2, r1
 800eba8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ebaa:	183b      	adds	r3, r7, r0
 800ebac:	781b      	ldrb	r3, [r3, #0]
 800ebae:	197a      	adds	r2, r7, r5
 800ebb0:	7812      	ldrb	r2, [r2, #0]
 800ebb2:	4914      	ldr	r1, [pc, #80]	; (800ec04 <UARTEx_SetNbDataToProcess+0xb4>)
 800ebb4:	5c8a      	ldrb	r2, [r1, r2]
 800ebb6:	435a      	muls	r2, r3
 800ebb8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800ebba:	197b      	adds	r3, r7, r5
 800ebbc:	781b      	ldrb	r3, [r3, #0]
 800ebbe:	4a12      	ldr	r2, [pc, #72]	; (800ec08 <UARTEx_SetNbDataToProcess+0xb8>)
 800ebc0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ebc2:	0019      	movs	r1, r3
 800ebc4:	f7f1 fb4c 	bl	8000260 <__divsi3>
 800ebc8:	0003      	movs	r3, r0
 800ebca:	b299      	uxth	r1, r3
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	226a      	movs	r2, #106	; 0x6a
 800ebd0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ebd2:	19bb      	adds	r3, r7, r6
 800ebd4:	781b      	ldrb	r3, [r3, #0]
 800ebd6:	193a      	adds	r2, r7, r4
 800ebd8:	7812      	ldrb	r2, [r2, #0]
 800ebda:	490a      	ldr	r1, [pc, #40]	; (800ec04 <UARTEx_SetNbDataToProcess+0xb4>)
 800ebdc:	5c8a      	ldrb	r2, [r1, r2]
 800ebde:	435a      	muls	r2, r3
 800ebe0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800ebe2:	193b      	adds	r3, r7, r4
 800ebe4:	781b      	ldrb	r3, [r3, #0]
 800ebe6:	4a08      	ldr	r2, [pc, #32]	; (800ec08 <UARTEx_SetNbDataToProcess+0xb8>)
 800ebe8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ebea:	0019      	movs	r1, r3
 800ebec:	f7f1 fb38 	bl	8000260 <__divsi3>
 800ebf0:	0003      	movs	r3, r0
 800ebf2:	b299      	uxth	r1, r3
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	2268      	movs	r2, #104	; 0x68
 800ebf8:	5299      	strh	r1, [r3, r2]
}
 800ebfa:	46c0      	nop			; (mov r8, r8)
 800ebfc:	46bd      	mov	sp, r7
 800ebfe:	b005      	add	sp, #20
 800ec00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec02:	46c0      	nop			; (mov r8, r8)
 800ec04:	080136a8 	.word	0x080136a8
 800ec08:	080136b0 	.word	0x080136b0

0800ec0c <atoi>:
 800ec0c:	b510      	push	{r4, lr}
 800ec0e:	220a      	movs	r2, #10
 800ec10:	2100      	movs	r1, #0
 800ec12:	f000 ffd9 	bl	800fbc8 <strtol>
 800ec16:	bd10      	pop	{r4, pc}

0800ec18 <gcvt>:
 800ec18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec1a:	001c      	movs	r4, r3
 800ec1c:	0015      	movs	r5, r2
 800ec1e:	2300      	movs	r3, #0
 800ec20:	2200      	movs	r2, #0
 800ec22:	b085      	sub	sp, #20
 800ec24:	0006      	movs	r6, r0
 800ec26:	000f      	movs	r7, r1
 800ec28:	f7f1 fc1c 	bl	8000464 <__aeabi_dcmplt>
 800ec2c:	0023      	movs	r3, r4
 800ec2e:	2800      	cmp	r0, #0
 800ec30:	d003      	beq.n	800ec3a <gcvt+0x22>
 800ec32:	232d      	movs	r3, #45	; 0x2d
 800ec34:	3d01      	subs	r5, #1
 800ec36:	7023      	strb	r3, [r4, #0]
 800ec38:	1c63      	adds	r3, r4, #1
 800ec3a:	2200      	movs	r2, #0
 800ec3c:	4908      	ldr	r1, [pc, #32]	; (800ec60 <gcvt+0x48>)
 800ec3e:	9203      	str	r2, [sp, #12]
 800ec40:	3267      	adds	r2, #103	; 0x67
 800ec42:	9202      	str	r2, [sp, #8]
 800ec44:	9301      	str	r3, [sp, #4]
 800ec46:	9500      	str	r5, [sp, #0]
 800ec48:	003b      	movs	r3, r7
 800ec4a:	0032      	movs	r2, r6
 800ec4c:	6808      	ldr	r0, [r1, #0]
 800ec4e:	f001 f849 	bl	800fce4 <_gcvt>
 800ec52:	1e43      	subs	r3, r0, #1
 800ec54:	4198      	sbcs	r0, r3
 800ec56:	4240      	negs	r0, r0
 800ec58:	4004      	ands	r4, r0
 800ec5a:	0020      	movs	r0, r4
 800ec5c:	b005      	add	sp, #20
 800ec5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec60:	200000e4 	.word	0x200000e4

0800ec64 <__errno>:
 800ec64:	4b01      	ldr	r3, [pc, #4]	; (800ec6c <__errno+0x8>)
 800ec66:	6818      	ldr	r0, [r3, #0]
 800ec68:	4770      	bx	lr
 800ec6a:	46c0      	nop			; (mov r8, r8)
 800ec6c:	200000e4 	.word	0x200000e4

0800ec70 <__libc_init_array>:
 800ec70:	b570      	push	{r4, r5, r6, lr}
 800ec72:	2600      	movs	r6, #0
 800ec74:	4d0c      	ldr	r5, [pc, #48]	; (800eca8 <__libc_init_array+0x38>)
 800ec76:	4c0d      	ldr	r4, [pc, #52]	; (800ecac <__libc_init_array+0x3c>)
 800ec78:	1b64      	subs	r4, r4, r5
 800ec7a:	10a4      	asrs	r4, r4, #2
 800ec7c:	42a6      	cmp	r6, r4
 800ec7e:	d109      	bne.n	800ec94 <__libc_init_array+0x24>
 800ec80:	2600      	movs	r6, #0
 800ec82:	f004 fa61 	bl	8013148 <_init>
 800ec86:	4d0a      	ldr	r5, [pc, #40]	; (800ecb0 <__libc_init_array+0x40>)
 800ec88:	4c0a      	ldr	r4, [pc, #40]	; (800ecb4 <__libc_init_array+0x44>)
 800ec8a:	1b64      	subs	r4, r4, r5
 800ec8c:	10a4      	asrs	r4, r4, #2
 800ec8e:	42a6      	cmp	r6, r4
 800ec90:	d105      	bne.n	800ec9e <__libc_init_array+0x2e>
 800ec92:	bd70      	pop	{r4, r5, r6, pc}
 800ec94:	00b3      	lsls	r3, r6, #2
 800ec96:	58eb      	ldr	r3, [r5, r3]
 800ec98:	4798      	blx	r3
 800ec9a:	3601      	adds	r6, #1
 800ec9c:	e7ee      	b.n	800ec7c <__libc_init_array+0xc>
 800ec9e:	00b3      	lsls	r3, r6, #2
 800eca0:	58eb      	ldr	r3, [r5, r3]
 800eca2:	4798      	blx	r3
 800eca4:	3601      	adds	r6, #1
 800eca6:	e7f2      	b.n	800ec8e <__libc_init_array+0x1e>
 800eca8:	08013b50 	.word	0x08013b50
 800ecac:	08013b50 	.word	0x08013b50
 800ecb0:	08013b50 	.word	0x08013b50
 800ecb4:	08013b54 	.word	0x08013b54

0800ecb8 <memcpy>:
 800ecb8:	2300      	movs	r3, #0
 800ecba:	b510      	push	{r4, lr}
 800ecbc:	429a      	cmp	r2, r3
 800ecbe:	d100      	bne.n	800ecc2 <memcpy+0xa>
 800ecc0:	bd10      	pop	{r4, pc}
 800ecc2:	5ccc      	ldrb	r4, [r1, r3]
 800ecc4:	54c4      	strb	r4, [r0, r3]
 800ecc6:	3301      	adds	r3, #1
 800ecc8:	e7f8      	b.n	800ecbc <memcpy+0x4>

0800ecca <memset>:
 800ecca:	0003      	movs	r3, r0
 800eccc:	1882      	adds	r2, r0, r2
 800ecce:	4293      	cmp	r3, r2
 800ecd0:	d100      	bne.n	800ecd4 <memset+0xa>
 800ecd2:	4770      	bx	lr
 800ecd4:	7019      	strb	r1, [r3, #0]
 800ecd6:	3301      	adds	r3, #1
 800ecd8:	e7f9      	b.n	800ecce <memset+0x4>
	...

0800ecdc <siprintf>:
 800ecdc:	b40e      	push	{r1, r2, r3}
 800ecde:	b500      	push	{lr}
 800ece0:	490b      	ldr	r1, [pc, #44]	; (800ed10 <siprintf+0x34>)
 800ece2:	b09c      	sub	sp, #112	; 0x70
 800ece4:	ab1d      	add	r3, sp, #116	; 0x74
 800ece6:	9002      	str	r0, [sp, #8]
 800ece8:	9006      	str	r0, [sp, #24]
 800ecea:	9107      	str	r1, [sp, #28]
 800ecec:	9104      	str	r1, [sp, #16]
 800ecee:	4809      	ldr	r0, [pc, #36]	; (800ed14 <siprintf+0x38>)
 800ecf0:	4909      	ldr	r1, [pc, #36]	; (800ed18 <siprintf+0x3c>)
 800ecf2:	cb04      	ldmia	r3!, {r2}
 800ecf4:	9105      	str	r1, [sp, #20]
 800ecf6:	6800      	ldr	r0, [r0, #0]
 800ecf8:	a902      	add	r1, sp, #8
 800ecfa:	9301      	str	r3, [sp, #4]
 800ecfc:	f002 fa82 	bl	8011204 <_svfiprintf_r>
 800ed00:	2300      	movs	r3, #0
 800ed02:	9a02      	ldr	r2, [sp, #8]
 800ed04:	7013      	strb	r3, [r2, #0]
 800ed06:	b01c      	add	sp, #112	; 0x70
 800ed08:	bc08      	pop	{r3}
 800ed0a:	b003      	add	sp, #12
 800ed0c:	4718      	bx	r3
 800ed0e:	46c0      	nop			; (mov r8, r8)
 800ed10:	7fffffff 	.word	0x7fffffff
 800ed14:	200000e4 	.word	0x200000e4
 800ed18:	ffff0208 	.word	0xffff0208

0800ed1c <strcat>:
 800ed1c:	0002      	movs	r2, r0
 800ed1e:	b510      	push	{r4, lr}
 800ed20:	7813      	ldrb	r3, [r2, #0]
 800ed22:	0014      	movs	r4, r2
 800ed24:	3201      	adds	r2, #1
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d1fa      	bne.n	800ed20 <strcat+0x4>
 800ed2a:	5cca      	ldrb	r2, [r1, r3]
 800ed2c:	54e2      	strb	r2, [r4, r3]
 800ed2e:	3301      	adds	r3, #1
 800ed30:	2a00      	cmp	r2, #0
 800ed32:	d1fa      	bne.n	800ed2a <strcat+0xe>
 800ed34:	bd10      	pop	{r4, pc}

0800ed36 <strchr>:
 800ed36:	b2c9      	uxtb	r1, r1
 800ed38:	7803      	ldrb	r3, [r0, #0]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d004      	beq.n	800ed48 <strchr+0x12>
 800ed3e:	428b      	cmp	r3, r1
 800ed40:	d100      	bne.n	800ed44 <strchr+0xe>
 800ed42:	4770      	bx	lr
 800ed44:	3001      	adds	r0, #1
 800ed46:	e7f7      	b.n	800ed38 <strchr+0x2>
 800ed48:	424b      	negs	r3, r1
 800ed4a:	4159      	adcs	r1, r3
 800ed4c:	4249      	negs	r1, r1
 800ed4e:	4008      	ands	r0, r1
 800ed50:	e7f7      	b.n	800ed42 <strchr+0xc>

0800ed52 <strncpy>:
 800ed52:	0003      	movs	r3, r0
 800ed54:	b530      	push	{r4, r5, lr}
 800ed56:	001d      	movs	r5, r3
 800ed58:	2a00      	cmp	r2, #0
 800ed5a:	d006      	beq.n	800ed6a <strncpy+0x18>
 800ed5c:	780c      	ldrb	r4, [r1, #0]
 800ed5e:	3a01      	subs	r2, #1
 800ed60:	3301      	adds	r3, #1
 800ed62:	702c      	strb	r4, [r5, #0]
 800ed64:	3101      	adds	r1, #1
 800ed66:	2c00      	cmp	r4, #0
 800ed68:	d1f5      	bne.n	800ed56 <strncpy+0x4>
 800ed6a:	2100      	movs	r1, #0
 800ed6c:	189a      	adds	r2, r3, r2
 800ed6e:	4293      	cmp	r3, r2
 800ed70:	d100      	bne.n	800ed74 <strncpy+0x22>
 800ed72:	bd30      	pop	{r4, r5, pc}
 800ed74:	7019      	strb	r1, [r3, #0]
 800ed76:	3301      	adds	r3, #1
 800ed78:	e7f9      	b.n	800ed6e <strncpy+0x1c>

0800ed7a <strstr>:
 800ed7a:	780a      	ldrb	r2, [r1, #0]
 800ed7c:	b530      	push	{r4, r5, lr}
 800ed7e:	2a00      	cmp	r2, #0
 800ed80:	d10c      	bne.n	800ed9c <strstr+0x22>
 800ed82:	bd30      	pop	{r4, r5, pc}
 800ed84:	429a      	cmp	r2, r3
 800ed86:	d108      	bne.n	800ed9a <strstr+0x20>
 800ed88:	2301      	movs	r3, #1
 800ed8a:	5ccc      	ldrb	r4, [r1, r3]
 800ed8c:	2c00      	cmp	r4, #0
 800ed8e:	d0f8      	beq.n	800ed82 <strstr+0x8>
 800ed90:	5cc5      	ldrb	r5, [r0, r3]
 800ed92:	42a5      	cmp	r5, r4
 800ed94:	d101      	bne.n	800ed9a <strstr+0x20>
 800ed96:	3301      	adds	r3, #1
 800ed98:	e7f7      	b.n	800ed8a <strstr+0x10>
 800ed9a:	3001      	adds	r0, #1
 800ed9c:	7803      	ldrb	r3, [r0, #0]
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d1f0      	bne.n	800ed84 <strstr+0xa>
 800eda2:	0018      	movs	r0, r3
 800eda4:	e7ed      	b.n	800ed82 <strstr+0x8>
	...

0800eda8 <sulp>:
 800eda8:	b570      	push	{r4, r5, r6, lr}
 800edaa:	0016      	movs	r6, r2
 800edac:	000d      	movs	r5, r1
 800edae:	f001 ff73 	bl	8010c98 <__ulp>
 800edb2:	2e00      	cmp	r6, #0
 800edb4:	d00d      	beq.n	800edd2 <sulp+0x2a>
 800edb6:	236b      	movs	r3, #107	; 0x6b
 800edb8:	006a      	lsls	r2, r5, #1
 800edba:	0d52      	lsrs	r2, r2, #21
 800edbc:	1a9b      	subs	r3, r3, r2
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	dd07      	ble.n	800edd2 <sulp+0x2a>
 800edc2:	2400      	movs	r4, #0
 800edc4:	4a03      	ldr	r2, [pc, #12]	; (800edd4 <sulp+0x2c>)
 800edc6:	051b      	lsls	r3, r3, #20
 800edc8:	189d      	adds	r5, r3, r2
 800edca:	002b      	movs	r3, r5
 800edcc:	0022      	movs	r2, r4
 800edce:	f7f2 fe2b 	bl	8001a28 <__aeabi_dmul>
 800edd2:	bd70      	pop	{r4, r5, r6, pc}
 800edd4:	3ff00000 	.word	0x3ff00000

0800edd8 <_strtod_l>:
 800edd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800edda:	001d      	movs	r5, r3
 800eddc:	2300      	movs	r3, #0
 800edde:	b0a5      	sub	sp, #148	; 0x94
 800ede0:	9320      	str	r3, [sp, #128]	; 0x80
 800ede2:	4bac      	ldr	r3, [pc, #688]	; (800f094 <_strtod_l+0x2bc>)
 800ede4:	9005      	str	r0, [sp, #20]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	9108      	str	r1, [sp, #32]
 800edea:	0018      	movs	r0, r3
 800edec:	9307      	str	r3, [sp, #28]
 800edee:	921b      	str	r2, [sp, #108]	; 0x6c
 800edf0:	f7f1 f990 	bl	8000114 <strlen>
 800edf4:	2600      	movs	r6, #0
 800edf6:	0004      	movs	r4, r0
 800edf8:	2700      	movs	r7, #0
 800edfa:	9b08      	ldr	r3, [sp, #32]
 800edfc:	931f      	str	r3, [sp, #124]	; 0x7c
 800edfe:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800ee00:	7813      	ldrb	r3, [r2, #0]
 800ee02:	2b2b      	cmp	r3, #43	; 0x2b
 800ee04:	d058      	beq.n	800eeb8 <_strtod_l+0xe0>
 800ee06:	d844      	bhi.n	800ee92 <_strtod_l+0xba>
 800ee08:	2b0d      	cmp	r3, #13
 800ee0a:	d83d      	bhi.n	800ee88 <_strtod_l+0xb0>
 800ee0c:	2b08      	cmp	r3, #8
 800ee0e:	d83d      	bhi.n	800ee8c <_strtod_l+0xb4>
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d047      	beq.n	800eea4 <_strtod_l+0xcc>
 800ee14:	2300      	movs	r3, #0
 800ee16:	930e      	str	r3, [sp, #56]	; 0x38
 800ee18:	2200      	movs	r2, #0
 800ee1a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ee1c:	920a      	str	r2, [sp, #40]	; 0x28
 800ee1e:	9306      	str	r3, [sp, #24]
 800ee20:	781b      	ldrb	r3, [r3, #0]
 800ee22:	2b30      	cmp	r3, #48	; 0x30
 800ee24:	d000      	beq.n	800ee28 <_strtod_l+0x50>
 800ee26:	e07f      	b.n	800ef28 <_strtod_l+0x150>
 800ee28:	9b06      	ldr	r3, [sp, #24]
 800ee2a:	3220      	adds	r2, #32
 800ee2c:	785b      	ldrb	r3, [r3, #1]
 800ee2e:	4393      	bics	r3, r2
 800ee30:	2b58      	cmp	r3, #88	; 0x58
 800ee32:	d000      	beq.n	800ee36 <_strtod_l+0x5e>
 800ee34:	e06e      	b.n	800ef14 <_strtod_l+0x13c>
 800ee36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ee38:	9502      	str	r5, [sp, #8]
 800ee3a:	9301      	str	r3, [sp, #4]
 800ee3c:	ab20      	add	r3, sp, #128	; 0x80
 800ee3e:	9300      	str	r3, [sp, #0]
 800ee40:	4a95      	ldr	r2, [pc, #596]	; (800f098 <_strtod_l+0x2c0>)
 800ee42:	ab21      	add	r3, sp, #132	; 0x84
 800ee44:	9805      	ldr	r0, [sp, #20]
 800ee46:	a91f      	add	r1, sp, #124	; 0x7c
 800ee48:	f001 f886 	bl	800ff58 <__gethex>
 800ee4c:	2307      	movs	r3, #7
 800ee4e:	0005      	movs	r5, r0
 800ee50:	0004      	movs	r4, r0
 800ee52:	401d      	ands	r5, r3
 800ee54:	4218      	tst	r0, r3
 800ee56:	d006      	beq.n	800ee66 <_strtod_l+0x8e>
 800ee58:	2d06      	cmp	r5, #6
 800ee5a:	d12f      	bne.n	800eebc <_strtod_l+0xe4>
 800ee5c:	9b06      	ldr	r3, [sp, #24]
 800ee5e:	3301      	adds	r3, #1
 800ee60:	931f      	str	r3, [sp, #124]	; 0x7c
 800ee62:	2300      	movs	r3, #0
 800ee64:	930e      	str	r3, [sp, #56]	; 0x38
 800ee66:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d002      	beq.n	800ee72 <_strtod_l+0x9a>
 800ee6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ee6e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800ee70:	601a      	str	r2, [r3, #0]
 800ee72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d01c      	beq.n	800eeb2 <_strtod_l+0xda>
 800ee78:	2380      	movs	r3, #128	; 0x80
 800ee7a:	0032      	movs	r2, r6
 800ee7c:	061b      	lsls	r3, r3, #24
 800ee7e:	18fb      	adds	r3, r7, r3
 800ee80:	0010      	movs	r0, r2
 800ee82:	0019      	movs	r1, r3
 800ee84:	b025      	add	sp, #148	; 0x94
 800ee86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee88:	2b20      	cmp	r3, #32
 800ee8a:	d1c3      	bne.n	800ee14 <_strtod_l+0x3c>
 800ee8c:	3201      	adds	r2, #1
 800ee8e:	921f      	str	r2, [sp, #124]	; 0x7c
 800ee90:	e7b5      	b.n	800edfe <_strtod_l+0x26>
 800ee92:	2b2d      	cmp	r3, #45	; 0x2d
 800ee94:	d1be      	bne.n	800ee14 <_strtod_l+0x3c>
 800ee96:	3b2c      	subs	r3, #44	; 0x2c
 800ee98:	930e      	str	r3, [sp, #56]	; 0x38
 800ee9a:	1c53      	adds	r3, r2, #1
 800ee9c:	931f      	str	r3, [sp, #124]	; 0x7c
 800ee9e:	7853      	ldrb	r3, [r2, #1]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d1b9      	bne.n	800ee18 <_strtod_l+0x40>
 800eea4:	9b08      	ldr	r3, [sp, #32]
 800eea6:	931f      	str	r3, [sp, #124]	; 0x7c
 800eea8:	2300      	movs	r3, #0
 800eeaa:	930e      	str	r3, [sp, #56]	; 0x38
 800eeac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d1dc      	bne.n	800ee6c <_strtod_l+0x94>
 800eeb2:	0032      	movs	r2, r6
 800eeb4:	003b      	movs	r3, r7
 800eeb6:	e7e3      	b.n	800ee80 <_strtod_l+0xa8>
 800eeb8:	2300      	movs	r3, #0
 800eeba:	e7ed      	b.n	800ee98 <_strtod_l+0xc0>
 800eebc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800eebe:	2a00      	cmp	r2, #0
 800eec0:	d007      	beq.n	800eed2 <_strtod_l+0xfa>
 800eec2:	2135      	movs	r1, #53	; 0x35
 800eec4:	a822      	add	r0, sp, #136	; 0x88
 800eec6:	f002 f803 	bl	8010ed0 <__copybits>
 800eeca:	9920      	ldr	r1, [sp, #128]	; 0x80
 800eecc:	9805      	ldr	r0, [sp, #20]
 800eece:	f001 fba3 	bl	8010618 <_Bfree>
 800eed2:	1e68      	subs	r0, r5, #1
 800eed4:	2804      	cmp	r0, #4
 800eed6:	d806      	bhi.n	800eee6 <_strtod_l+0x10e>
 800eed8:	f7f1 f924 	bl	8000124 <__gnu_thumb1_case_uqi>
 800eedc:	1816030b 	.word	0x1816030b
 800eee0:	0b          	.byte	0x0b
 800eee1:	00          	.byte	0x00
 800eee2:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800eee4:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 800eee6:	0723      	lsls	r3, r4, #28
 800eee8:	d5bd      	bpl.n	800ee66 <_strtod_l+0x8e>
 800eeea:	2380      	movs	r3, #128	; 0x80
 800eeec:	061b      	lsls	r3, r3, #24
 800eeee:	431f      	orrs	r7, r3
 800eef0:	e7b9      	b.n	800ee66 <_strtod_l+0x8e>
 800eef2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800eef4:	4a69      	ldr	r2, [pc, #420]	; (800f09c <_strtod_l+0x2c4>)
 800eef6:	496a      	ldr	r1, [pc, #424]	; (800f0a0 <_strtod_l+0x2c8>)
 800eef8:	401a      	ands	r2, r3
 800eefa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eefc:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800eefe:	185b      	adds	r3, r3, r1
 800ef00:	051b      	lsls	r3, r3, #20
 800ef02:	431a      	orrs	r2, r3
 800ef04:	0017      	movs	r7, r2
 800ef06:	e7ee      	b.n	800eee6 <_strtod_l+0x10e>
 800ef08:	4f66      	ldr	r7, [pc, #408]	; (800f0a4 <_strtod_l+0x2cc>)
 800ef0a:	e7ec      	b.n	800eee6 <_strtod_l+0x10e>
 800ef0c:	2601      	movs	r6, #1
 800ef0e:	4f66      	ldr	r7, [pc, #408]	; (800f0a8 <_strtod_l+0x2d0>)
 800ef10:	4276      	negs	r6, r6
 800ef12:	e7e8      	b.n	800eee6 <_strtod_l+0x10e>
 800ef14:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ef16:	1c5a      	adds	r2, r3, #1
 800ef18:	921f      	str	r2, [sp, #124]	; 0x7c
 800ef1a:	785b      	ldrb	r3, [r3, #1]
 800ef1c:	2b30      	cmp	r3, #48	; 0x30
 800ef1e:	d0f9      	beq.n	800ef14 <_strtod_l+0x13c>
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d0a0      	beq.n	800ee66 <_strtod_l+0x8e>
 800ef24:	2301      	movs	r3, #1
 800ef26:	930a      	str	r3, [sp, #40]	; 0x28
 800ef28:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ef2a:	220a      	movs	r2, #10
 800ef2c:	9310      	str	r3, [sp, #64]	; 0x40
 800ef2e:	2300      	movs	r3, #0
 800ef30:	930f      	str	r3, [sp, #60]	; 0x3c
 800ef32:	930b      	str	r3, [sp, #44]	; 0x2c
 800ef34:	9309      	str	r3, [sp, #36]	; 0x24
 800ef36:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800ef38:	7805      	ldrb	r5, [r0, #0]
 800ef3a:	002b      	movs	r3, r5
 800ef3c:	3b30      	subs	r3, #48	; 0x30
 800ef3e:	b2d9      	uxtb	r1, r3
 800ef40:	2909      	cmp	r1, #9
 800ef42:	d927      	bls.n	800ef94 <_strtod_l+0x1bc>
 800ef44:	0022      	movs	r2, r4
 800ef46:	9907      	ldr	r1, [sp, #28]
 800ef48:	f002 fc02 	bl	8011750 <strncmp>
 800ef4c:	2800      	cmp	r0, #0
 800ef4e:	d033      	beq.n	800efb8 <_strtod_l+0x1e0>
 800ef50:	2000      	movs	r0, #0
 800ef52:	002b      	movs	r3, r5
 800ef54:	4684      	mov	ip, r0
 800ef56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ef58:	900c      	str	r0, [sp, #48]	; 0x30
 800ef5a:	9206      	str	r2, [sp, #24]
 800ef5c:	2220      	movs	r2, #32
 800ef5e:	0019      	movs	r1, r3
 800ef60:	4391      	bics	r1, r2
 800ef62:	000a      	movs	r2, r1
 800ef64:	2100      	movs	r1, #0
 800ef66:	9107      	str	r1, [sp, #28]
 800ef68:	2a45      	cmp	r2, #69	; 0x45
 800ef6a:	d000      	beq.n	800ef6e <_strtod_l+0x196>
 800ef6c:	e0c5      	b.n	800f0fa <_strtod_l+0x322>
 800ef6e:	9b06      	ldr	r3, [sp, #24]
 800ef70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ef72:	4303      	orrs	r3, r0
 800ef74:	4313      	orrs	r3, r2
 800ef76:	428b      	cmp	r3, r1
 800ef78:	d094      	beq.n	800eea4 <_strtod_l+0xcc>
 800ef7a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ef7c:	9308      	str	r3, [sp, #32]
 800ef7e:	3301      	adds	r3, #1
 800ef80:	931f      	str	r3, [sp, #124]	; 0x7c
 800ef82:	9b08      	ldr	r3, [sp, #32]
 800ef84:	785b      	ldrb	r3, [r3, #1]
 800ef86:	2b2b      	cmp	r3, #43	; 0x2b
 800ef88:	d076      	beq.n	800f078 <_strtod_l+0x2a0>
 800ef8a:	000c      	movs	r4, r1
 800ef8c:	2b2d      	cmp	r3, #45	; 0x2d
 800ef8e:	d179      	bne.n	800f084 <_strtod_l+0x2ac>
 800ef90:	2401      	movs	r4, #1
 800ef92:	e072      	b.n	800f07a <_strtod_l+0x2a2>
 800ef94:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ef96:	2908      	cmp	r1, #8
 800ef98:	dc09      	bgt.n	800efae <_strtod_l+0x1d6>
 800ef9a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ef9c:	4351      	muls	r1, r2
 800ef9e:	185b      	adds	r3, r3, r1
 800efa0:	930b      	str	r3, [sp, #44]	; 0x2c
 800efa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efa4:	3001      	adds	r0, #1
 800efa6:	3301      	adds	r3, #1
 800efa8:	9309      	str	r3, [sp, #36]	; 0x24
 800efaa:	901f      	str	r0, [sp, #124]	; 0x7c
 800efac:	e7c3      	b.n	800ef36 <_strtod_l+0x15e>
 800efae:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800efb0:	4351      	muls	r1, r2
 800efb2:	185b      	adds	r3, r3, r1
 800efb4:	930f      	str	r3, [sp, #60]	; 0x3c
 800efb6:	e7f4      	b.n	800efa2 <_strtod_l+0x1ca>
 800efb8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800efba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800efbc:	191c      	adds	r4, r3, r4
 800efbe:	941f      	str	r4, [sp, #124]	; 0x7c
 800efc0:	7823      	ldrb	r3, [r4, #0]
 800efc2:	2a00      	cmp	r2, #0
 800efc4:	d039      	beq.n	800f03a <_strtod_l+0x262>
 800efc6:	900c      	str	r0, [sp, #48]	; 0x30
 800efc8:	9206      	str	r2, [sp, #24]
 800efca:	001a      	movs	r2, r3
 800efcc:	3a30      	subs	r2, #48	; 0x30
 800efce:	2a09      	cmp	r2, #9
 800efd0:	d912      	bls.n	800eff8 <_strtod_l+0x220>
 800efd2:	2201      	movs	r2, #1
 800efd4:	4694      	mov	ip, r2
 800efd6:	e7c1      	b.n	800ef5c <_strtod_l+0x184>
 800efd8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800efda:	3001      	adds	r0, #1
 800efdc:	1c5a      	adds	r2, r3, #1
 800efde:	921f      	str	r2, [sp, #124]	; 0x7c
 800efe0:	785b      	ldrb	r3, [r3, #1]
 800efe2:	2b30      	cmp	r3, #48	; 0x30
 800efe4:	d0f8      	beq.n	800efd8 <_strtod_l+0x200>
 800efe6:	001a      	movs	r2, r3
 800efe8:	3a31      	subs	r2, #49	; 0x31
 800efea:	2a08      	cmp	r2, #8
 800efec:	d83f      	bhi.n	800f06e <_strtod_l+0x296>
 800efee:	900c      	str	r0, [sp, #48]	; 0x30
 800eff0:	2000      	movs	r0, #0
 800eff2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800eff4:	9006      	str	r0, [sp, #24]
 800eff6:	9210      	str	r2, [sp, #64]	; 0x40
 800eff8:	001a      	movs	r2, r3
 800effa:	1c41      	adds	r1, r0, #1
 800effc:	3a30      	subs	r2, #48	; 0x30
 800effe:	2b30      	cmp	r3, #48	; 0x30
 800f000:	d015      	beq.n	800f02e <_strtod_l+0x256>
 800f002:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f004:	185b      	adds	r3, r3, r1
 800f006:	210a      	movs	r1, #10
 800f008:	930c      	str	r3, [sp, #48]	; 0x30
 800f00a:	9b06      	ldr	r3, [sp, #24]
 800f00c:	18c4      	adds	r4, r0, r3
 800f00e:	42a3      	cmp	r3, r4
 800f010:	d115      	bne.n	800f03e <_strtod_l+0x266>
 800f012:	9906      	ldr	r1, [sp, #24]
 800f014:	9b06      	ldr	r3, [sp, #24]
 800f016:	3101      	adds	r1, #1
 800f018:	1809      	adds	r1, r1, r0
 800f01a:	181b      	adds	r3, r3, r0
 800f01c:	9106      	str	r1, [sp, #24]
 800f01e:	2b08      	cmp	r3, #8
 800f020:	dc1b      	bgt.n	800f05a <_strtod_l+0x282>
 800f022:	230a      	movs	r3, #10
 800f024:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f026:	434b      	muls	r3, r1
 800f028:	2100      	movs	r1, #0
 800f02a:	18d3      	adds	r3, r2, r3
 800f02c:	930b      	str	r3, [sp, #44]	; 0x2c
 800f02e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f030:	0008      	movs	r0, r1
 800f032:	1c5a      	adds	r2, r3, #1
 800f034:	921f      	str	r2, [sp, #124]	; 0x7c
 800f036:	785b      	ldrb	r3, [r3, #1]
 800f038:	e7c7      	b.n	800efca <_strtod_l+0x1f2>
 800f03a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f03c:	e7d1      	b.n	800efe2 <_strtod_l+0x20a>
 800f03e:	2b08      	cmp	r3, #8
 800f040:	dc04      	bgt.n	800f04c <_strtod_l+0x274>
 800f042:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800f044:	434d      	muls	r5, r1
 800f046:	950b      	str	r5, [sp, #44]	; 0x2c
 800f048:	3301      	adds	r3, #1
 800f04a:	e7e0      	b.n	800f00e <_strtod_l+0x236>
 800f04c:	1c5d      	adds	r5, r3, #1
 800f04e:	2d10      	cmp	r5, #16
 800f050:	dcfa      	bgt.n	800f048 <_strtod_l+0x270>
 800f052:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f054:	434d      	muls	r5, r1
 800f056:	950f      	str	r5, [sp, #60]	; 0x3c
 800f058:	e7f6      	b.n	800f048 <_strtod_l+0x270>
 800f05a:	9b06      	ldr	r3, [sp, #24]
 800f05c:	2100      	movs	r1, #0
 800f05e:	2b10      	cmp	r3, #16
 800f060:	dce5      	bgt.n	800f02e <_strtod_l+0x256>
 800f062:	230a      	movs	r3, #10
 800f064:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800f066:	4343      	muls	r3, r0
 800f068:	18d3      	adds	r3, r2, r3
 800f06a:	930f      	str	r3, [sp, #60]	; 0x3c
 800f06c:	e7df      	b.n	800f02e <_strtod_l+0x256>
 800f06e:	2200      	movs	r2, #0
 800f070:	920c      	str	r2, [sp, #48]	; 0x30
 800f072:	9206      	str	r2, [sp, #24]
 800f074:	3201      	adds	r2, #1
 800f076:	e7ad      	b.n	800efd4 <_strtod_l+0x1fc>
 800f078:	2400      	movs	r4, #0
 800f07a:	9b08      	ldr	r3, [sp, #32]
 800f07c:	3302      	adds	r3, #2
 800f07e:	931f      	str	r3, [sp, #124]	; 0x7c
 800f080:	9b08      	ldr	r3, [sp, #32]
 800f082:	789b      	ldrb	r3, [r3, #2]
 800f084:	001a      	movs	r2, r3
 800f086:	3a30      	subs	r2, #48	; 0x30
 800f088:	2a09      	cmp	r2, #9
 800f08a:	d913      	bls.n	800f0b4 <_strtod_l+0x2dc>
 800f08c:	9a08      	ldr	r2, [sp, #32]
 800f08e:	921f      	str	r2, [sp, #124]	; 0x7c
 800f090:	2200      	movs	r2, #0
 800f092:	e031      	b.n	800f0f8 <_strtod_l+0x320>
 800f094:	08013890 	.word	0x08013890
 800f098:	080136c4 	.word	0x080136c4
 800f09c:	ffefffff 	.word	0xffefffff
 800f0a0:	00000433 	.word	0x00000433
 800f0a4:	7ff00000 	.word	0x7ff00000
 800f0a8:	7fffffff 	.word	0x7fffffff
 800f0ac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f0ae:	1c5a      	adds	r2, r3, #1
 800f0b0:	921f      	str	r2, [sp, #124]	; 0x7c
 800f0b2:	785b      	ldrb	r3, [r3, #1]
 800f0b4:	2b30      	cmp	r3, #48	; 0x30
 800f0b6:	d0f9      	beq.n	800f0ac <_strtod_l+0x2d4>
 800f0b8:	2200      	movs	r2, #0
 800f0ba:	9207      	str	r2, [sp, #28]
 800f0bc:	001a      	movs	r2, r3
 800f0be:	3a31      	subs	r2, #49	; 0x31
 800f0c0:	2a08      	cmp	r2, #8
 800f0c2:	d81a      	bhi.n	800f0fa <_strtod_l+0x322>
 800f0c4:	3b30      	subs	r3, #48	; 0x30
 800f0c6:	001a      	movs	r2, r3
 800f0c8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f0ca:	9307      	str	r3, [sp, #28]
 800f0cc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f0ce:	1c59      	adds	r1, r3, #1
 800f0d0:	911f      	str	r1, [sp, #124]	; 0x7c
 800f0d2:	785b      	ldrb	r3, [r3, #1]
 800f0d4:	001d      	movs	r5, r3
 800f0d6:	3d30      	subs	r5, #48	; 0x30
 800f0d8:	2d09      	cmp	r5, #9
 800f0da:	d939      	bls.n	800f150 <_strtod_l+0x378>
 800f0dc:	9d07      	ldr	r5, [sp, #28]
 800f0de:	1b49      	subs	r1, r1, r5
 800f0e0:	4db0      	ldr	r5, [pc, #704]	; (800f3a4 <_strtod_l+0x5cc>)
 800f0e2:	9507      	str	r5, [sp, #28]
 800f0e4:	2908      	cmp	r1, #8
 800f0e6:	dc03      	bgt.n	800f0f0 <_strtod_l+0x318>
 800f0e8:	9207      	str	r2, [sp, #28]
 800f0ea:	42aa      	cmp	r2, r5
 800f0ec:	dd00      	ble.n	800f0f0 <_strtod_l+0x318>
 800f0ee:	9507      	str	r5, [sp, #28]
 800f0f0:	2c00      	cmp	r4, #0
 800f0f2:	d002      	beq.n	800f0fa <_strtod_l+0x322>
 800f0f4:	9a07      	ldr	r2, [sp, #28]
 800f0f6:	4252      	negs	r2, r2
 800f0f8:	9207      	str	r2, [sp, #28]
 800f0fa:	9a06      	ldr	r2, [sp, #24]
 800f0fc:	2a00      	cmp	r2, #0
 800f0fe:	d14b      	bne.n	800f198 <_strtod_l+0x3c0>
 800f100:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f102:	4310      	orrs	r0, r2
 800f104:	d000      	beq.n	800f108 <_strtod_l+0x330>
 800f106:	e6ae      	b.n	800ee66 <_strtod_l+0x8e>
 800f108:	4662      	mov	r2, ip
 800f10a:	2a00      	cmp	r2, #0
 800f10c:	d000      	beq.n	800f110 <_strtod_l+0x338>
 800f10e:	e6c9      	b.n	800eea4 <_strtod_l+0xcc>
 800f110:	2b69      	cmp	r3, #105	; 0x69
 800f112:	d025      	beq.n	800f160 <_strtod_l+0x388>
 800f114:	dc21      	bgt.n	800f15a <_strtod_l+0x382>
 800f116:	2b49      	cmp	r3, #73	; 0x49
 800f118:	d022      	beq.n	800f160 <_strtod_l+0x388>
 800f11a:	2b4e      	cmp	r3, #78	; 0x4e
 800f11c:	d000      	beq.n	800f120 <_strtod_l+0x348>
 800f11e:	e6c1      	b.n	800eea4 <_strtod_l+0xcc>
 800f120:	49a1      	ldr	r1, [pc, #644]	; (800f3a8 <_strtod_l+0x5d0>)
 800f122:	a81f      	add	r0, sp, #124	; 0x7c
 800f124:	f001 f966 	bl	80103f4 <__match>
 800f128:	2800      	cmp	r0, #0
 800f12a:	d100      	bne.n	800f12e <_strtod_l+0x356>
 800f12c:	e6ba      	b.n	800eea4 <_strtod_l+0xcc>
 800f12e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f130:	781b      	ldrb	r3, [r3, #0]
 800f132:	2b28      	cmp	r3, #40	; 0x28
 800f134:	d12a      	bne.n	800f18c <_strtod_l+0x3b4>
 800f136:	499d      	ldr	r1, [pc, #628]	; (800f3ac <_strtod_l+0x5d4>)
 800f138:	aa22      	add	r2, sp, #136	; 0x88
 800f13a:	a81f      	add	r0, sp, #124	; 0x7c
 800f13c:	f001 f96e 	bl	801041c <__hexnan>
 800f140:	2805      	cmp	r0, #5
 800f142:	d123      	bne.n	800f18c <_strtod_l+0x3b4>
 800f144:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f146:	4a9a      	ldr	r2, [pc, #616]	; (800f3b0 <_strtod_l+0x5d8>)
 800f148:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800f14a:	431a      	orrs	r2, r3
 800f14c:	0017      	movs	r7, r2
 800f14e:	e68a      	b.n	800ee66 <_strtod_l+0x8e>
 800f150:	210a      	movs	r1, #10
 800f152:	434a      	muls	r2, r1
 800f154:	18d2      	adds	r2, r2, r3
 800f156:	3a30      	subs	r2, #48	; 0x30
 800f158:	e7b8      	b.n	800f0cc <_strtod_l+0x2f4>
 800f15a:	2b6e      	cmp	r3, #110	; 0x6e
 800f15c:	d0e0      	beq.n	800f120 <_strtod_l+0x348>
 800f15e:	e6a1      	b.n	800eea4 <_strtod_l+0xcc>
 800f160:	4994      	ldr	r1, [pc, #592]	; (800f3b4 <_strtod_l+0x5dc>)
 800f162:	a81f      	add	r0, sp, #124	; 0x7c
 800f164:	f001 f946 	bl	80103f4 <__match>
 800f168:	2800      	cmp	r0, #0
 800f16a:	d100      	bne.n	800f16e <_strtod_l+0x396>
 800f16c:	e69a      	b.n	800eea4 <_strtod_l+0xcc>
 800f16e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f170:	4991      	ldr	r1, [pc, #580]	; (800f3b8 <_strtod_l+0x5e0>)
 800f172:	3b01      	subs	r3, #1
 800f174:	a81f      	add	r0, sp, #124	; 0x7c
 800f176:	931f      	str	r3, [sp, #124]	; 0x7c
 800f178:	f001 f93c 	bl	80103f4 <__match>
 800f17c:	2800      	cmp	r0, #0
 800f17e:	d102      	bne.n	800f186 <_strtod_l+0x3ae>
 800f180:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f182:	3301      	adds	r3, #1
 800f184:	931f      	str	r3, [sp, #124]	; 0x7c
 800f186:	2600      	movs	r6, #0
 800f188:	4f89      	ldr	r7, [pc, #548]	; (800f3b0 <_strtod_l+0x5d8>)
 800f18a:	e66c      	b.n	800ee66 <_strtod_l+0x8e>
 800f18c:	488b      	ldr	r0, [pc, #556]	; (800f3bc <_strtod_l+0x5e4>)
 800f18e:	f002 fabb 	bl	8011708 <nan>
 800f192:	0006      	movs	r6, r0
 800f194:	000f      	movs	r7, r1
 800f196:	e666      	b.n	800ee66 <_strtod_l+0x8e>
 800f198:	9b07      	ldr	r3, [sp, #28]
 800f19a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f19c:	1a9b      	subs	r3, r3, r2
 800f19e:	930a      	str	r3, [sp, #40]	; 0x28
 800f1a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d101      	bne.n	800f1aa <_strtod_l+0x3d2>
 800f1a6:	9b06      	ldr	r3, [sp, #24]
 800f1a8:	9309      	str	r3, [sp, #36]	; 0x24
 800f1aa:	9c06      	ldr	r4, [sp, #24]
 800f1ac:	2c10      	cmp	r4, #16
 800f1ae:	dd00      	ble.n	800f1b2 <_strtod_l+0x3da>
 800f1b0:	2410      	movs	r4, #16
 800f1b2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f1b4:	f7f3 faba 	bl	800272c <__aeabi_ui2d>
 800f1b8:	9b06      	ldr	r3, [sp, #24]
 800f1ba:	0006      	movs	r6, r0
 800f1bc:	000f      	movs	r7, r1
 800f1be:	2b09      	cmp	r3, #9
 800f1c0:	dd15      	ble.n	800f1ee <_strtod_l+0x416>
 800f1c2:	0022      	movs	r2, r4
 800f1c4:	4b7e      	ldr	r3, [pc, #504]	; (800f3c0 <_strtod_l+0x5e8>)
 800f1c6:	3a09      	subs	r2, #9
 800f1c8:	00d2      	lsls	r2, r2, #3
 800f1ca:	189b      	adds	r3, r3, r2
 800f1cc:	681a      	ldr	r2, [r3, #0]
 800f1ce:	685b      	ldr	r3, [r3, #4]
 800f1d0:	f7f2 fc2a 	bl	8001a28 <__aeabi_dmul>
 800f1d4:	0006      	movs	r6, r0
 800f1d6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800f1d8:	000f      	movs	r7, r1
 800f1da:	f7f3 faa7 	bl	800272c <__aeabi_ui2d>
 800f1de:	0002      	movs	r2, r0
 800f1e0:	000b      	movs	r3, r1
 800f1e2:	0030      	movs	r0, r6
 800f1e4:	0039      	movs	r1, r7
 800f1e6:	f7f1 fce1 	bl	8000bac <__aeabi_dadd>
 800f1ea:	0006      	movs	r6, r0
 800f1ec:	000f      	movs	r7, r1
 800f1ee:	9b06      	ldr	r3, [sp, #24]
 800f1f0:	2b0f      	cmp	r3, #15
 800f1f2:	dc39      	bgt.n	800f268 <_strtod_l+0x490>
 800f1f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d100      	bne.n	800f1fc <_strtod_l+0x424>
 800f1fa:	e634      	b.n	800ee66 <_strtod_l+0x8e>
 800f1fc:	dd24      	ble.n	800f248 <_strtod_l+0x470>
 800f1fe:	2b16      	cmp	r3, #22
 800f200:	dc09      	bgt.n	800f216 <_strtod_l+0x43e>
 800f202:	496f      	ldr	r1, [pc, #444]	; (800f3c0 <_strtod_l+0x5e8>)
 800f204:	00db      	lsls	r3, r3, #3
 800f206:	18c9      	adds	r1, r1, r3
 800f208:	0032      	movs	r2, r6
 800f20a:	6808      	ldr	r0, [r1, #0]
 800f20c:	6849      	ldr	r1, [r1, #4]
 800f20e:	003b      	movs	r3, r7
 800f210:	f7f2 fc0a 	bl	8001a28 <__aeabi_dmul>
 800f214:	e7bd      	b.n	800f192 <_strtod_l+0x3ba>
 800f216:	2325      	movs	r3, #37	; 0x25
 800f218:	9a06      	ldr	r2, [sp, #24]
 800f21a:	1a9b      	subs	r3, r3, r2
 800f21c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f21e:	4293      	cmp	r3, r2
 800f220:	db22      	blt.n	800f268 <_strtod_l+0x490>
 800f222:	240f      	movs	r4, #15
 800f224:	9b06      	ldr	r3, [sp, #24]
 800f226:	4d66      	ldr	r5, [pc, #408]	; (800f3c0 <_strtod_l+0x5e8>)
 800f228:	1ae4      	subs	r4, r4, r3
 800f22a:	00e1      	lsls	r1, r4, #3
 800f22c:	1869      	adds	r1, r5, r1
 800f22e:	0032      	movs	r2, r6
 800f230:	6808      	ldr	r0, [r1, #0]
 800f232:	6849      	ldr	r1, [r1, #4]
 800f234:	003b      	movs	r3, r7
 800f236:	f7f2 fbf7 	bl	8001a28 <__aeabi_dmul>
 800f23a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f23c:	1b1c      	subs	r4, r3, r4
 800f23e:	00e4      	lsls	r4, r4, #3
 800f240:	192c      	adds	r4, r5, r4
 800f242:	6822      	ldr	r2, [r4, #0]
 800f244:	6863      	ldr	r3, [r4, #4]
 800f246:	e7e3      	b.n	800f210 <_strtod_l+0x438>
 800f248:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f24a:	3316      	adds	r3, #22
 800f24c:	db0c      	blt.n	800f268 <_strtod_l+0x490>
 800f24e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f250:	9a07      	ldr	r2, [sp, #28]
 800f252:	0030      	movs	r0, r6
 800f254:	1a9a      	subs	r2, r3, r2
 800f256:	4b5a      	ldr	r3, [pc, #360]	; (800f3c0 <_strtod_l+0x5e8>)
 800f258:	00d2      	lsls	r2, r2, #3
 800f25a:	189b      	adds	r3, r3, r2
 800f25c:	0039      	movs	r1, r7
 800f25e:	681a      	ldr	r2, [r3, #0]
 800f260:	685b      	ldr	r3, [r3, #4]
 800f262:	f7f1 ffdf 	bl	8001224 <__aeabi_ddiv>
 800f266:	e794      	b.n	800f192 <_strtod_l+0x3ba>
 800f268:	9b06      	ldr	r3, [sp, #24]
 800f26a:	1b1c      	subs	r4, r3, r4
 800f26c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f26e:	18e4      	adds	r4, r4, r3
 800f270:	2c00      	cmp	r4, #0
 800f272:	dd72      	ble.n	800f35a <_strtod_l+0x582>
 800f274:	230f      	movs	r3, #15
 800f276:	0021      	movs	r1, r4
 800f278:	4019      	ands	r1, r3
 800f27a:	421c      	tst	r4, r3
 800f27c:	d00a      	beq.n	800f294 <_strtod_l+0x4bc>
 800f27e:	00cb      	lsls	r3, r1, #3
 800f280:	494f      	ldr	r1, [pc, #316]	; (800f3c0 <_strtod_l+0x5e8>)
 800f282:	0032      	movs	r2, r6
 800f284:	18c9      	adds	r1, r1, r3
 800f286:	6808      	ldr	r0, [r1, #0]
 800f288:	6849      	ldr	r1, [r1, #4]
 800f28a:	003b      	movs	r3, r7
 800f28c:	f7f2 fbcc 	bl	8001a28 <__aeabi_dmul>
 800f290:	0006      	movs	r6, r0
 800f292:	000f      	movs	r7, r1
 800f294:	230f      	movs	r3, #15
 800f296:	439c      	bics	r4, r3
 800f298:	d04a      	beq.n	800f330 <_strtod_l+0x558>
 800f29a:	3326      	adds	r3, #38	; 0x26
 800f29c:	33ff      	adds	r3, #255	; 0xff
 800f29e:	429c      	cmp	r4, r3
 800f2a0:	dd22      	ble.n	800f2e8 <_strtod_l+0x510>
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	9306      	str	r3, [sp, #24]
 800f2a6:	9307      	str	r3, [sp, #28]
 800f2a8:	930b      	str	r3, [sp, #44]	; 0x2c
 800f2aa:	9309      	str	r3, [sp, #36]	; 0x24
 800f2ac:	2322      	movs	r3, #34	; 0x22
 800f2ae:	2600      	movs	r6, #0
 800f2b0:	9a05      	ldr	r2, [sp, #20]
 800f2b2:	4f3f      	ldr	r7, [pc, #252]	; (800f3b0 <_strtod_l+0x5d8>)
 800f2b4:	6013      	str	r3, [r2, #0]
 800f2b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f2b8:	42b3      	cmp	r3, r6
 800f2ba:	d100      	bne.n	800f2be <_strtod_l+0x4e6>
 800f2bc:	e5d3      	b.n	800ee66 <_strtod_l+0x8e>
 800f2be:	9920      	ldr	r1, [sp, #128]	; 0x80
 800f2c0:	9805      	ldr	r0, [sp, #20]
 800f2c2:	f001 f9a9 	bl	8010618 <_Bfree>
 800f2c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f2c8:	9805      	ldr	r0, [sp, #20]
 800f2ca:	f001 f9a5 	bl	8010618 <_Bfree>
 800f2ce:	9907      	ldr	r1, [sp, #28]
 800f2d0:	9805      	ldr	r0, [sp, #20]
 800f2d2:	f001 f9a1 	bl	8010618 <_Bfree>
 800f2d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f2d8:	9805      	ldr	r0, [sp, #20]
 800f2da:	f001 f99d 	bl	8010618 <_Bfree>
 800f2de:	9906      	ldr	r1, [sp, #24]
 800f2e0:	9805      	ldr	r0, [sp, #20]
 800f2e2:	f001 f999 	bl	8010618 <_Bfree>
 800f2e6:	e5be      	b.n	800ee66 <_strtod_l+0x8e>
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	0030      	movs	r0, r6
 800f2ec:	0039      	movs	r1, r7
 800f2ee:	4d35      	ldr	r5, [pc, #212]	; (800f3c4 <_strtod_l+0x5ec>)
 800f2f0:	1124      	asrs	r4, r4, #4
 800f2f2:	9308      	str	r3, [sp, #32]
 800f2f4:	2c01      	cmp	r4, #1
 800f2f6:	dc1e      	bgt.n	800f336 <_strtod_l+0x55e>
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d001      	beq.n	800f300 <_strtod_l+0x528>
 800f2fc:	0006      	movs	r6, r0
 800f2fe:	000f      	movs	r7, r1
 800f300:	4b31      	ldr	r3, [pc, #196]	; (800f3c8 <_strtod_l+0x5f0>)
 800f302:	0032      	movs	r2, r6
 800f304:	18ff      	adds	r7, r7, r3
 800f306:	9b08      	ldr	r3, [sp, #32]
 800f308:	00dd      	lsls	r5, r3, #3
 800f30a:	4b2e      	ldr	r3, [pc, #184]	; (800f3c4 <_strtod_l+0x5ec>)
 800f30c:	195d      	adds	r5, r3, r5
 800f30e:	6828      	ldr	r0, [r5, #0]
 800f310:	6869      	ldr	r1, [r5, #4]
 800f312:	003b      	movs	r3, r7
 800f314:	f7f2 fb88 	bl	8001a28 <__aeabi_dmul>
 800f318:	4b25      	ldr	r3, [pc, #148]	; (800f3b0 <_strtod_l+0x5d8>)
 800f31a:	4a2c      	ldr	r2, [pc, #176]	; (800f3cc <_strtod_l+0x5f4>)
 800f31c:	0006      	movs	r6, r0
 800f31e:	400b      	ands	r3, r1
 800f320:	4293      	cmp	r3, r2
 800f322:	d8be      	bhi.n	800f2a2 <_strtod_l+0x4ca>
 800f324:	4a2a      	ldr	r2, [pc, #168]	; (800f3d0 <_strtod_l+0x5f8>)
 800f326:	4293      	cmp	r3, r2
 800f328:	d913      	bls.n	800f352 <_strtod_l+0x57a>
 800f32a:	2601      	movs	r6, #1
 800f32c:	4f29      	ldr	r7, [pc, #164]	; (800f3d4 <_strtod_l+0x5fc>)
 800f32e:	4276      	negs	r6, r6
 800f330:	2300      	movs	r3, #0
 800f332:	9308      	str	r3, [sp, #32]
 800f334:	e087      	b.n	800f446 <_strtod_l+0x66e>
 800f336:	2201      	movs	r2, #1
 800f338:	4214      	tst	r4, r2
 800f33a:	d004      	beq.n	800f346 <_strtod_l+0x56e>
 800f33c:	682a      	ldr	r2, [r5, #0]
 800f33e:	686b      	ldr	r3, [r5, #4]
 800f340:	f7f2 fb72 	bl	8001a28 <__aeabi_dmul>
 800f344:	2301      	movs	r3, #1
 800f346:	9a08      	ldr	r2, [sp, #32]
 800f348:	1064      	asrs	r4, r4, #1
 800f34a:	3201      	adds	r2, #1
 800f34c:	9208      	str	r2, [sp, #32]
 800f34e:	3508      	adds	r5, #8
 800f350:	e7d0      	b.n	800f2f4 <_strtod_l+0x51c>
 800f352:	23d4      	movs	r3, #212	; 0xd4
 800f354:	049b      	lsls	r3, r3, #18
 800f356:	18cf      	adds	r7, r1, r3
 800f358:	e7ea      	b.n	800f330 <_strtod_l+0x558>
 800f35a:	2c00      	cmp	r4, #0
 800f35c:	d0e8      	beq.n	800f330 <_strtod_l+0x558>
 800f35e:	4264      	negs	r4, r4
 800f360:	220f      	movs	r2, #15
 800f362:	0023      	movs	r3, r4
 800f364:	4013      	ands	r3, r2
 800f366:	4214      	tst	r4, r2
 800f368:	d00a      	beq.n	800f380 <_strtod_l+0x5a8>
 800f36a:	00da      	lsls	r2, r3, #3
 800f36c:	4b14      	ldr	r3, [pc, #80]	; (800f3c0 <_strtod_l+0x5e8>)
 800f36e:	0030      	movs	r0, r6
 800f370:	189b      	adds	r3, r3, r2
 800f372:	0039      	movs	r1, r7
 800f374:	681a      	ldr	r2, [r3, #0]
 800f376:	685b      	ldr	r3, [r3, #4]
 800f378:	f7f1 ff54 	bl	8001224 <__aeabi_ddiv>
 800f37c:	0006      	movs	r6, r0
 800f37e:	000f      	movs	r7, r1
 800f380:	1124      	asrs	r4, r4, #4
 800f382:	d0d5      	beq.n	800f330 <_strtod_l+0x558>
 800f384:	2c1f      	cmp	r4, #31
 800f386:	dd27      	ble.n	800f3d8 <_strtod_l+0x600>
 800f388:	2300      	movs	r3, #0
 800f38a:	9306      	str	r3, [sp, #24]
 800f38c:	9307      	str	r3, [sp, #28]
 800f38e:	930b      	str	r3, [sp, #44]	; 0x2c
 800f390:	9309      	str	r3, [sp, #36]	; 0x24
 800f392:	2322      	movs	r3, #34	; 0x22
 800f394:	9a05      	ldr	r2, [sp, #20]
 800f396:	2600      	movs	r6, #0
 800f398:	6013      	str	r3, [r2, #0]
 800f39a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f39c:	2700      	movs	r7, #0
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d18d      	bne.n	800f2be <_strtod_l+0x4e6>
 800f3a2:	e560      	b.n	800ee66 <_strtod_l+0x8e>
 800f3a4:	00004e1f 	.word	0x00004e1f
 800f3a8:	080136bf 	.word	0x080136bf
 800f3ac:	080136d8 	.word	0x080136d8
 800f3b0:	7ff00000 	.word	0x7ff00000
 800f3b4:	080136bc 	.word	0x080136bc
 800f3b8:	08013a86 	.word	0x08013a86
 800f3bc:	08013a82 	.word	0x08013a82
 800f3c0:	08013940 	.word	0x08013940
 800f3c4:	08013918 	.word	0x08013918
 800f3c8:	fcb00000 	.word	0xfcb00000
 800f3cc:	7ca00000 	.word	0x7ca00000
 800f3d0:	7c900000 	.word	0x7c900000
 800f3d4:	7fefffff 	.word	0x7fefffff
 800f3d8:	2310      	movs	r3, #16
 800f3da:	0022      	movs	r2, r4
 800f3dc:	401a      	ands	r2, r3
 800f3de:	9208      	str	r2, [sp, #32]
 800f3e0:	421c      	tst	r4, r3
 800f3e2:	d001      	beq.n	800f3e8 <_strtod_l+0x610>
 800f3e4:	335a      	adds	r3, #90	; 0x5a
 800f3e6:	9308      	str	r3, [sp, #32]
 800f3e8:	0030      	movs	r0, r6
 800f3ea:	0039      	movs	r1, r7
 800f3ec:	2300      	movs	r3, #0
 800f3ee:	4dc5      	ldr	r5, [pc, #788]	; (800f704 <_strtod_l+0x92c>)
 800f3f0:	2201      	movs	r2, #1
 800f3f2:	4214      	tst	r4, r2
 800f3f4:	d004      	beq.n	800f400 <_strtod_l+0x628>
 800f3f6:	682a      	ldr	r2, [r5, #0]
 800f3f8:	686b      	ldr	r3, [r5, #4]
 800f3fa:	f7f2 fb15 	bl	8001a28 <__aeabi_dmul>
 800f3fe:	2301      	movs	r3, #1
 800f400:	1064      	asrs	r4, r4, #1
 800f402:	3508      	adds	r5, #8
 800f404:	2c00      	cmp	r4, #0
 800f406:	d1f3      	bne.n	800f3f0 <_strtod_l+0x618>
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d001      	beq.n	800f410 <_strtod_l+0x638>
 800f40c:	0006      	movs	r6, r0
 800f40e:	000f      	movs	r7, r1
 800f410:	9b08      	ldr	r3, [sp, #32]
 800f412:	2b00      	cmp	r3, #0
 800f414:	d00f      	beq.n	800f436 <_strtod_l+0x65e>
 800f416:	236b      	movs	r3, #107	; 0x6b
 800f418:	007a      	lsls	r2, r7, #1
 800f41a:	0d52      	lsrs	r2, r2, #21
 800f41c:	0039      	movs	r1, r7
 800f41e:	1a9b      	subs	r3, r3, r2
 800f420:	2b00      	cmp	r3, #0
 800f422:	dd08      	ble.n	800f436 <_strtod_l+0x65e>
 800f424:	2b1f      	cmp	r3, #31
 800f426:	dc00      	bgt.n	800f42a <_strtod_l+0x652>
 800f428:	e124      	b.n	800f674 <_strtod_l+0x89c>
 800f42a:	2600      	movs	r6, #0
 800f42c:	2b34      	cmp	r3, #52	; 0x34
 800f42e:	dc00      	bgt.n	800f432 <_strtod_l+0x65a>
 800f430:	e119      	b.n	800f666 <_strtod_l+0x88e>
 800f432:	27dc      	movs	r7, #220	; 0xdc
 800f434:	04bf      	lsls	r7, r7, #18
 800f436:	2200      	movs	r2, #0
 800f438:	2300      	movs	r3, #0
 800f43a:	0030      	movs	r0, r6
 800f43c:	0039      	movs	r1, r7
 800f43e:	f7f1 f80b 	bl	8000458 <__aeabi_dcmpeq>
 800f442:	2800      	cmp	r0, #0
 800f444:	d1a0      	bne.n	800f388 <_strtod_l+0x5b0>
 800f446:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f448:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f44a:	9300      	str	r3, [sp, #0]
 800f44c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800f44e:	9b06      	ldr	r3, [sp, #24]
 800f450:	9805      	ldr	r0, [sp, #20]
 800f452:	f001 f949 	bl	80106e8 <__s2b>
 800f456:	900b      	str	r0, [sp, #44]	; 0x2c
 800f458:	2800      	cmp	r0, #0
 800f45a:	d100      	bne.n	800f45e <_strtod_l+0x686>
 800f45c:	e721      	b.n	800f2a2 <_strtod_l+0x4ca>
 800f45e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f460:	9907      	ldr	r1, [sp, #28]
 800f462:	17da      	asrs	r2, r3, #31
 800f464:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f466:	1a5b      	subs	r3, r3, r1
 800f468:	401a      	ands	r2, r3
 800f46a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f46c:	9215      	str	r2, [sp, #84]	; 0x54
 800f46e:	43db      	mvns	r3, r3
 800f470:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f472:	17db      	asrs	r3, r3, #31
 800f474:	401a      	ands	r2, r3
 800f476:	2300      	movs	r3, #0
 800f478:	921a      	str	r2, [sp, #104]	; 0x68
 800f47a:	9306      	str	r3, [sp, #24]
 800f47c:	9307      	str	r3, [sp, #28]
 800f47e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f480:	9805      	ldr	r0, [sp, #20]
 800f482:	6859      	ldr	r1, [r3, #4]
 800f484:	f001 f884 	bl	8010590 <_Balloc>
 800f488:	9009      	str	r0, [sp, #36]	; 0x24
 800f48a:	2800      	cmp	r0, #0
 800f48c:	d100      	bne.n	800f490 <_strtod_l+0x6b8>
 800f48e:	e70d      	b.n	800f2ac <_strtod_l+0x4d4>
 800f490:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f492:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f494:	691b      	ldr	r3, [r3, #16]
 800f496:	310c      	adds	r1, #12
 800f498:	1c9a      	adds	r2, r3, #2
 800f49a:	0092      	lsls	r2, r2, #2
 800f49c:	300c      	adds	r0, #12
 800f49e:	930c      	str	r3, [sp, #48]	; 0x30
 800f4a0:	f7ff fc0a 	bl	800ecb8 <memcpy>
 800f4a4:	ab22      	add	r3, sp, #136	; 0x88
 800f4a6:	9301      	str	r3, [sp, #4]
 800f4a8:	ab21      	add	r3, sp, #132	; 0x84
 800f4aa:	9300      	str	r3, [sp, #0]
 800f4ac:	0032      	movs	r2, r6
 800f4ae:	003b      	movs	r3, r7
 800f4b0:	9805      	ldr	r0, [sp, #20]
 800f4b2:	9612      	str	r6, [sp, #72]	; 0x48
 800f4b4:	9713      	str	r7, [sp, #76]	; 0x4c
 800f4b6:	f001 fc63 	bl	8010d80 <__d2b>
 800f4ba:	9020      	str	r0, [sp, #128]	; 0x80
 800f4bc:	2800      	cmp	r0, #0
 800f4be:	d100      	bne.n	800f4c2 <_strtod_l+0x6ea>
 800f4c0:	e6f4      	b.n	800f2ac <_strtod_l+0x4d4>
 800f4c2:	2101      	movs	r1, #1
 800f4c4:	9805      	ldr	r0, [sp, #20]
 800f4c6:	f001 f9a3 	bl	8010810 <__i2b>
 800f4ca:	9007      	str	r0, [sp, #28]
 800f4cc:	2800      	cmp	r0, #0
 800f4ce:	d100      	bne.n	800f4d2 <_strtod_l+0x6fa>
 800f4d0:	e6ec      	b.n	800f2ac <_strtod_l+0x4d4>
 800f4d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f4d4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f4d6:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800f4d8:	1ad4      	subs	r4, r2, r3
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	db01      	blt.n	800f4e2 <_strtod_l+0x70a>
 800f4de:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800f4e0:	195d      	adds	r5, r3, r5
 800f4e2:	9908      	ldr	r1, [sp, #32]
 800f4e4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800f4e6:	1a5b      	subs	r3, r3, r1
 800f4e8:	2136      	movs	r1, #54	; 0x36
 800f4ea:	189b      	adds	r3, r3, r2
 800f4ec:	1a8a      	subs	r2, r1, r2
 800f4ee:	4986      	ldr	r1, [pc, #536]	; (800f708 <_strtod_l+0x930>)
 800f4f0:	2001      	movs	r0, #1
 800f4f2:	468c      	mov	ip, r1
 800f4f4:	2100      	movs	r1, #0
 800f4f6:	3b01      	subs	r3, #1
 800f4f8:	9110      	str	r1, [sp, #64]	; 0x40
 800f4fa:	9014      	str	r0, [sp, #80]	; 0x50
 800f4fc:	4563      	cmp	r3, ip
 800f4fe:	da07      	bge.n	800f510 <_strtod_l+0x738>
 800f500:	4661      	mov	r1, ip
 800f502:	1ac9      	subs	r1, r1, r3
 800f504:	1a52      	subs	r2, r2, r1
 800f506:	291f      	cmp	r1, #31
 800f508:	dd00      	ble.n	800f50c <_strtod_l+0x734>
 800f50a:	e0b8      	b.n	800f67e <_strtod_l+0x8a6>
 800f50c:	4088      	lsls	r0, r1
 800f50e:	9014      	str	r0, [sp, #80]	; 0x50
 800f510:	18ab      	adds	r3, r5, r2
 800f512:	930c      	str	r3, [sp, #48]	; 0x30
 800f514:	18a4      	adds	r4, r4, r2
 800f516:	9b08      	ldr	r3, [sp, #32]
 800f518:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f51a:	191c      	adds	r4, r3, r4
 800f51c:	002b      	movs	r3, r5
 800f51e:	4295      	cmp	r5, r2
 800f520:	dd00      	ble.n	800f524 <_strtod_l+0x74c>
 800f522:	0013      	movs	r3, r2
 800f524:	42a3      	cmp	r3, r4
 800f526:	dd00      	ble.n	800f52a <_strtod_l+0x752>
 800f528:	0023      	movs	r3, r4
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	dd04      	ble.n	800f538 <_strtod_l+0x760>
 800f52e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f530:	1ae4      	subs	r4, r4, r3
 800f532:	1ad2      	subs	r2, r2, r3
 800f534:	920c      	str	r2, [sp, #48]	; 0x30
 800f536:	1aed      	subs	r5, r5, r3
 800f538:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	dd17      	ble.n	800f56e <_strtod_l+0x796>
 800f53e:	001a      	movs	r2, r3
 800f540:	9907      	ldr	r1, [sp, #28]
 800f542:	9805      	ldr	r0, [sp, #20]
 800f544:	f001 fa2a 	bl	801099c <__pow5mult>
 800f548:	9007      	str	r0, [sp, #28]
 800f54a:	2800      	cmp	r0, #0
 800f54c:	d100      	bne.n	800f550 <_strtod_l+0x778>
 800f54e:	e6ad      	b.n	800f2ac <_strtod_l+0x4d4>
 800f550:	0001      	movs	r1, r0
 800f552:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f554:	9805      	ldr	r0, [sp, #20]
 800f556:	f001 f971 	bl	801083c <__multiply>
 800f55a:	900f      	str	r0, [sp, #60]	; 0x3c
 800f55c:	2800      	cmp	r0, #0
 800f55e:	d100      	bne.n	800f562 <_strtod_l+0x78a>
 800f560:	e6a4      	b.n	800f2ac <_strtod_l+0x4d4>
 800f562:	9920      	ldr	r1, [sp, #128]	; 0x80
 800f564:	9805      	ldr	r0, [sp, #20]
 800f566:	f001 f857 	bl	8010618 <_Bfree>
 800f56a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f56c:	9320      	str	r3, [sp, #128]	; 0x80
 800f56e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f570:	2b00      	cmp	r3, #0
 800f572:	dd00      	ble.n	800f576 <_strtod_l+0x79e>
 800f574:	e089      	b.n	800f68a <_strtod_l+0x8b2>
 800f576:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f578:	2b00      	cmp	r3, #0
 800f57a:	dd08      	ble.n	800f58e <_strtod_l+0x7b6>
 800f57c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f57e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f580:	9805      	ldr	r0, [sp, #20]
 800f582:	f001 fa0b 	bl	801099c <__pow5mult>
 800f586:	9009      	str	r0, [sp, #36]	; 0x24
 800f588:	2800      	cmp	r0, #0
 800f58a:	d100      	bne.n	800f58e <_strtod_l+0x7b6>
 800f58c:	e68e      	b.n	800f2ac <_strtod_l+0x4d4>
 800f58e:	2c00      	cmp	r4, #0
 800f590:	dd08      	ble.n	800f5a4 <_strtod_l+0x7cc>
 800f592:	0022      	movs	r2, r4
 800f594:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f596:	9805      	ldr	r0, [sp, #20]
 800f598:	f001 fa5c 	bl	8010a54 <__lshift>
 800f59c:	9009      	str	r0, [sp, #36]	; 0x24
 800f59e:	2800      	cmp	r0, #0
 800f5a0:	d100      	bne.n	800f5a4 <_strtod_l+0x7cc>
 800f5a2:	e683      	b.n	800f2ac <_strtod_l+0x4d4>
 800f5a4:	2d00      	cmp	r5, #0
 800f5a6:	dd08      	ble.n	800f5ba <_strtod_l+0x7e2>
 800f5a8:	002a      	movs	r2, r5
 800f5aa:	9907      	ldr	r1, [sp, #28]
 800f5ac:	9805      	ldr	r0, [sp, #20]
 800f5ae:	f001 fa51 	bl	8010a54 <__lshift>
 800f5b2:	9007      	str	r0, [sp, #28]
 800f5b4:	2800      	cmp	r0, #0
 800f5b6:	d100      	bne.n	800f5ba <_strtod_l+0x7e2>
 800f5b8:	e678      	b.n	800f2ac <_strtod_l+0x4d4>
 800f5ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f5bc:	9920      	ldr	r1, [sp, #128]	; 0x80
 800f5be:	9805      	ldr	r0, [sp, #20]
 800f5c0:	f001 fad2 	bl	8010b68 <__mdiff>
 800f5c4:	9006      	str	r0, [sp, #24]
 800f5c6:	2800      	cmp	r0, #0
 800f5c8:	d100      	bne.n	800f5cc <_strtod_l+0x7f4>
 800f5ca:	e66f      	b.n	800f2ac <_strtod_l+0x4d4>
 800f5cc:	2200      	movs	r2, #0
 800f5ce:	68c3      	ldr	r3, [r0, #12]
 800f5d0:	9907      	ldr	r1, [sp, #28]
 800f5d2:	60c2      	str	r2, [r0, #12]
 800f5d4:	930f      	str	r3, [sp, #60]	; 0x3c
 800f5d6:	f001 faab 	bl	8010b30 <__mcmp>
 800f5da:	2800      	cmp	r0, #0
 800f5dc:	da5f      	bge.n	800f69e <_strtod_l+0x8c6>
 800f5de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f5e0:	4333      	orrs	r3, r6
 800f5e2:	d000      	beq.n	800f5e6 <_strtod_l+0x80e>
 800f5e4:	e08a      	b.n	800f6fc <_strtod_l+0x924>
 800f5e6:	033b      	lsls	r3, r7, #12
 800f5e8:	d000      	beq.n	800f5ec <_strtod_l+0x814>
 800f5ea:	e087      	b.n	800f6fc <_strtod_l+0x924>
 800f5ec:	22d6      	movs	r2, #214	; 0xd6
 800f5ee:	4b47      	ldr	r3, [pc, #284]	; (800f70c <_strtod_l+0x934>)
 800f5f0:	04d2      	lsls	r2, r2, #19
 800f5f2:	403b      	ands	r3, r7
 800f5f4:	4293      	cmp	r3, r2
 800f5f6:	d800      	bhi.n	800f5fa <_strtod_l+0x822>
 800f5f8:	e080      	b.n	800f6fc <_strtod_l+0x924>
 800f5fa:	9b06      	ldr	r3, [sp, #24]
 800f5fc:	695b      	ldr	r3, [r3, #20]
 800f5fe:	930a      	str	r3, [sp, #40]	; 0x28
 800f600:	2b00      	cmp	r3, #0
 800f602:	d104      	bne.n	800f60e <_strtod_l+0x836>
 800f604:	9b06      	ldr	r3, [sp, #24]
 800f606:	691b      	ldr	r3, [r3, #16]
 800f608:	930a      	str	r3, [sp, #40]	; 0x28
 800f60a:	2b01      	cmp	r3, #1
 800f60c:	dd76      	ble.n	800f6fc <_strtod_l+0x924>
 800f60e:	9906      	ldr	r1, [sp, #24]
 800f610:	2201      	movs	r2, #1
 800f612:	9805      	ldr	r0, [sp, #20]
 800f614:	f001 fa1e 	bl	8010a54 <__lshift>
 800f618:	9907      	ldr	r1, [sp, #28]
 800f61a:	9006      	str	r0, [sp, #24]
 800f61c:	f001 fa88 	bl	8010b30 <__mcmp>
 800f620:	2800      	cmp	r0, #0
 800f622:	dd6b      	ble.n	800f6fc <_strtod_l+0x924>
 800f624:	9908      	ldr	r1, [sp, #32]
 800f626:	003b      	movs	r3, r7
 800f628:	4a38      	ldr	r2, [pc, #224]	; (800f70c <_strtod_l+0x934>)
 800f62a:	2900      	cmp	r1, #0
 800f62c:	d100      	bne.n	800f630 <_strtod_l+0x858>
 800f62e:	e092      	b.n	800f756 <_strtod_l+0x97e>
 800f630:	0011      	movs	r1, r2
 800f632:	20d6      	movs	r0, #214	; 0xd6
 800f634:	4039      	ands	r1, r7
 800f636:	04c0      	lsls	r0, r0, #19
 800f638:	4281      	cmp	r1, r0
 800f63a:	dd00      	ble.n	800f63e <_strtod_l+0x866>
 800f63c:	e08b      	b.n	800f756 <_strtod_l+0x97e>
 800f63e:	23dc      	movs	r3, #220	; 0xdc
 800f640:	049b      	lsls	r3, r3, #18
 800f642:	4299      	cmp	r1, r3
 800f644:	dc00      	bgt.n	800f648 <_strtod_l+0x870>
 800f646:	e6a4      	b.n	800f392 <_strtod_l+0x5ba>
 800f648:	0030      	movs	r0, r6
 800f64a:	0039      	movs	r1, r7
 800f64c:	2200      	movs	r2, #0
 800f64e:	4b30      	ldr	r3, [pc, #192]	; (800f710 <_strtod_l+0x938>)
 800f650:	f7f2 f9ea 	bl	8001a28 <__aeabi_dmul>
 800f654:	0006      	movs	r6, r0
 800f656:	000f      	movs	r7, r1
 800f658:	4308      	orrs	r0, r1
 800f65a:	d000      	beq.n	800f65e <_strtod_l+0x886>
 800f65c:	e62f      	b.n	800f2be <_strtod_l+0x4e6>
 800f65e:	2322      	movs	r3, #34	; 0x22
 800f660:	9a05      	ldr	r2, [sp, #20]
 800f662:	6013      	str	r3, [r2, #0]
 800f664:	e62b      	b.n	800f2be <_strtod_l+0x4e6>
 800f666:	234b      	movs	r3, #75	; 0x4b
 800f668:	1a9a      	subs	r2, r3, r2
 800f66a:	3b4c      	subs	r3, #76	; 0x4c
 800f66c:	4093      	lsls	r3, r2
 800f66e:	4019      	ands	r1, r3
 800f670:	000f      	movs	r7, r1
 800f672:	e6e0      	b.n	800f436 <_strtod_l+0x65e>
 800f674:	2201      	movs	r2, #1
 800f676:	4252      	negs	r2, r2
 800f678:	409a      	lsls	r2, r3
 800f67a:	4016      	ands	r6, r2
 800f67c:	e6db      	b.n	800f436 <_strtod_l+0x65e>
 800f67e:	4925      	ldr	r1, [pc, #148]	; (800f714 <_strtod_l+0x93c>)
 800f680:	1acb      	subs	r3, r1, r3
 800f682:	0001      	movs	r1, r0
 800f684:	4099      	lsls	r1, r3
 800f686:	9110      	str	r1, [sp, #64]	; 0x40
 800f688:	e741      	b.n	800f50e <_strtod_l+0x736>
 800f68a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f68c:	9920      	ldr	r1, [sp, #128]	; 0x80
 800f68e:	9805      	ldr	r0, [sp, #20]
 800f690:	f001 f9e0 	bl	8010a54 <__lshift>
 800f694:	9020      	str	r0, [sp, #128]	; 0x80
 800f696:	2800      	cmp	r0, #0
 800f698:	d000      	beq.n	800f69c <_strtod_l+0x8c4>
 800f69a:	e76c      	b.n	800f576 <_strtod_l+0x79e>
 800f69c:	e606      	b.n	800f2ac <_strtod_l+0x4d4>
 800f69e:	970c      	str	r7, [sp, #48]	; 0x30
 800f6a0:	2800      	cmp	r0, #0
 800f6a2:	d176      	bne.n	800f792 <_strtod_l+0x9ba>
 800f6a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f6a6:	033b      	lsls	r3, r7, #12
 800f6a8:	0b1b      	lsrs	r3, r3, #12
 800f6aa:	2a00      	cmp	r2, #0
 800f6ac:	d038      	beq.n	800f720 <_strtod_l+0x948>
 800f6ae:	4a1a      	ldr	r2, [pc, #104]	; (800f718 <_strtod_l+0x940>)
 800f6b0:	4293      	cmp	r3, r2
 800f6b2:	d138      	bne.n	800f726 <_strtod_l+0x94e>
 800f6b4:	2201      	movs	r2, #1
 800f6b6:	9b08      	ldr	r3, [sp, #32]
 800f6b8:	4252      	negs	r2, r2
 800f6ba:	0031      	movs	r1, r6
 800f6bc:	0010      	movs	r0, r2
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d00b      	beq.n	800f6da <_strtod_l+0x902>
 800f6c2:	24d4      	movs	r4, #212	; 0xd4
 800f6c4:	4b11      	ldr	r3, [pc, #68]	; (800f70c <_strtod_l+0x934>)
 800f6c6:	0010      	movs	r0, r2
 800f6c8:	403b      	ands	r3, r7
 800f6ca:	04e4      	lsls	r4, r4, #19
 800f6cc:	42a3      	cmp	r3, r4
 800f6ce:	d804      	bhi.n	800f6da <_strtod_l+0x902>
 800f6d0:	306c      	adds	r0, #108	; 0x6c
 800f6d2:	0d1b      	lsrs	r3, r3, #20
 800f6d4:	1ac3      	subs	r3, r0, r3
 800f6d6:	409a      	lsls	r2, r3
 800f6d8:	0010      	movs	r0, r2
 800f6da:	4281      	cmp	r1, r0
 800f6dc:	d123      	bne.n	800f726 <_strtod_l+0x94e>
 800f6de:	4b0f      	ldr	r3, [pc, #60]	; (800f71c <_strtod_l+0x944>)
 800f6e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f6e2:	429a      	cmp	r2, r3
 800f6e4:	d102      	bne.n	800f6ec <_strtod_l+0x914>
 800f6e6:	1c4b      	adds	r3, r1, #1
 800f6e8:	d100      	bne.n	800f6ec <_strtod_l+0x914>
 800f6ea:	e5df      	b.n	800f2ac <_strtod_l+0x4d4>
 800f6ec:	4b07      	ldr	r3, [pc, #28]	; (800f70c <_strtod_l+0x934>)
 800f6ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f6f0:	2600      	movs	r6, #0
 800f6f2:	401a      	ands	r2, r3
 800f6f4:	0013      	movs	r3, r2
 800f6f6:	2280      	movs	r2, #128	; 0x80
 800f6f8:	0352      	lsls	r2, r2, #13
 800f6fa:	189f      	adds	r7, r3, r2
 800f6fc:	9b08      	ldr	r3, [sp, #32]
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d1a2      	bne.n	800f648 <_strtod_l+0x870>
 800f702:	e5dc      	b.n	800f2be <_strtod_l+0x4e6>
 800f704:	080136f0 	.word	0x080136f0
 800f708:	fffffc02 	.word	0xfffffc02
 800f70c:	7ff00000 	.word	0x7ff00000
 800f710:	39500000 	.word	0x39500000
 800f714:	fffffbe2 	.word	0xfffffbe2
 800f718:	000fffff 	.word	0x000fffff
 800f71c:	7fefffff 	.word	0x7fefffff
 800f720:	4333      	orrs	r3, r6
 800f722:	d100      	bne.n	800f726 <_strtod_l+0x94e>
 800f724:	e77e      	b.n	800f624 <_strtod_l+0x84c>
 800f726:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d01d      	beq.n	800f768 <_strtod_l+0x990>
 800f72c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f72e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f730:	4213      	tst	r3, r2
 800f732:	d0e3      	beq.n	800f6fc <_strtod_l+0x924>
 800f734:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f736:	0030      	movs	r0, r6
 800f738:	0039      	movs	r1, r7
 800f73a:	9a08      	ldr	r2, [sp, #32]
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d017      	beq.n	800f770 <_strtod_l+0x998>
 800f740:	f7ff fb32 	bl	800eda8 <sulp>
 800f744:	0002      	movs	r2, r0
 800f746:	000b      	movs	r3, r1
 800f748:	9812      	ldr	r0, [sp, #72]	; 0x48
 800f74a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800f74c:	f7f1 fa2e 	bl	8000bac <__aeabi_dadd>
 800f750:	0006      	movs	r6, r0
 800f752:	000f      	movs	r7, r1
 800f754:	e7d2      	b.n	800f6fc <_strtod_l+0x924>
 800f756:	2601      	movs	r6, #1
 800f758:	4013      	ands	r3, r2
 800f75a:	4a99      	ldr	r2, [pc, #612]	; (800f9c0 <_strtod_l+0xbe8>)
 800f75c:	4276      	negs	r6, r6
 800f75e:	189b      	adds	r3, r3, r2
 800f760:	4a98      	ldr	r2, [pc, #608]	; (800f9c4 <_strtod_l+0xbec>)
 800f762:	431a      	orrs	r2, r3
 800f764:	0017      	movs	r7, r2
 800f766:	e7c9      	b.n	800f6fc <_strtod_l+0x924>
 800f768:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f76a:	4233      	tst	r3, r6
 800f76c:	d0c6      	beq.n	800f6fc <_strtod_l+0x924>
 800f76e:	e7e1      	b.n	800f734 <_strtod_l+0x95c>
 800f770:	f7ff fb1a 	bl	800eda8 <sulp>
 800f774:	0002      	movs	r2, r0
 800f776:	000b      	movs	r3, r1
 800f778:	9812      	ldr	r0, [sp, #72]	; 0x48
 800f77a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800f77c:	f7f2 fbc0 	bl	8001f00 <__aeabi_dsub>
 800f780:	2200      	movs	r2, #0
 800f782:	2300      	movs	r3, #0
 800f784:	0006      	movs	r6, r0
 800f786:	000f      	movs	r7, r1
 800f788:	f7f0 fe66 	bl	8000458 <__aeabi_dcmpeq>
 800f78c:	2800      	cmp	r0, #0
 800f78e:	d0b5      	beq.n	800f6fc <_strtod_l+0x924>
 800f790:	e5ff      	b.n	800f392 <_strtod_l+0x5ba>
 800f792:	9907      	ldr	r1, [sp, #28]
 800f794:	9806      	ldr	r0, [sp, #24]
 800f796:	f001 fb57 	bl	8010e48 <__ratio>
 800f79a:	2380      	movs	r3, #128	; 0x80
 800f79c:	2200      	movs	r2, #0
 800f79e:	05db      	lsls	r3, r3, #23
 800f7a0:	0004      	movs	r4, r0
 800f7a2:	000d      	movs	r5, r1
 800f7a4:	f7f0 fe68 	bl	8000478 <__aeabi_dcmple>
 800f7a8:	2800      	cmp	r0, #0
 800f7aa:	d075      	beq.n	800f898 <_strtod_l+0xac0>
 800f7ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d047      	beq.n	800f842 <_strtod_l+0xa6a>
 800f7b2:	2300      	movs	r3, #0
 800f7b4:	4c84      	ldr	r4, [pc, #528]	; (800f9c8 <_strtod_l+0xbf0>)
 800f7b6:	2500      	movs	r5, #0
 800f7b8:	9310      	str	r3, [sp, #64]	; 0x40
 800f7ba:	9411      	str	r4, [sp, #68]	; 0x44
 800f7bc:	4c82      	ldr	r4, [pc, #520]	; (800f9c8 <_strtod_l+0xbf0>)
 800f7be:	4a83      	ldr	r2, [pc, #524]	; (800f9cc <_strtod_l+0xbf4>)
 800f7c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f7c2:	4013      	ands	r3, r2
 800f7c4:	9314      	str	r3, [sp, #80]	; 0x50
 800f7c6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f7c8:	4b81      	ldr	r3, [pc, #516]	; (800f9d0 <_strtod_l+0xbf8>)
 800f7ca:	429a      	cmp	r2, r3
 800f7cc:	d000      	beq.n	800f7d0 <_strtod_l+0x9f8>
 800f7ce:	e0ac      	b.n	800f92a <_strtod_l+0xb52>
 800f7d0:	4a80      	ldr	r2, [pc, #512]	; (800f9d4 <_strtod_l+0xbfc>)
 800f7d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f7d4:	4694      	mov	ip, r2
 800f7d6:	4463      	add	r3, ip
 800f7d8:	001f      	movs	r7, r3
 800f7da:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f7dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f7de:	0030      	movs	r0, r6
 800f7e0:	0039      	movs	r1, r7
 800f7e2:	920c      	str	r2, [sp, #48]	; 0x30
 800f7e4:	930d      	str	r3, [sp, #52]	; 0x34
 800f7e6:	f001 fa57 	bl	8010c98 <__ulp>
 800f7ea:	0002      	movs	r2, r0
 800f7ec:	000b      	movs	r3, r1
 800f7ee:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f7f0:	990d      	ldr	r1, [sp, #52]	; 0x34
 800f7f2:	f7f2 f919 	bl	8001a28 <__aeabi_dmul>
 800f7f6:	0032      	movs	r2, r6
 800f7f8:	003b      	movs	r3, r7
 800f7fa:	f7f1 f9d7 	bl	8000bac <__aeabi_dadd>
 800f7fe:	4a73      	ldr	r2, [pc, #460]	; (800f9cc <_strtod_l+0xbf4>)
 800f800:	4b75      	ldr	r3, [pc, #468]	; (800f9d8 <_strtod_l+0xc00>)
 800f802:	0006      	movs	r6, r0
 800f804:	400a      	ands	r2, r1
 800f806:	429a      	cmp	r2, r3
 800f808:	d95e      	bls.n	800f8c8 <_strtod_l+0xaf0>
 800f80a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f80c:	4b73      	ldr	r3, [pc, #460]	; (800f9dc <_strtod_l+0xc04>)
 800f80e:	429a      	cmp	r2, r3
 800f810:	d103      	bne.n	800f81a <_strtod_l+0xa42>
 800f812:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f814:	3301      	adds	r3, #1
 800f816:	d100      	bne.n	800f81a <_strtod_l+0xa42>
 800f818:	e548      	b.n	800f2ac <_strtod_l+0x4d4>
 800f81a:	2601      	movs	r6, #1
 800f81c:	4f6f      	ldr	r7, [pc, #444]	; (800f9dc <_strtod_l+0xc04>)
 800f81e:	4276      	negs	r6, r6
 800f820:	9920      	ldr	r1, [sp, #128]	; 0x80
 800f822:	9805      	ldr	r0, [sp, #20]
 800f824:	f000 fef8 	bl	8010618 <_Bfree>
 800f828:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f82a:	9805      	ldr	r0, [sp, #20]
 800f82c:	f000 fef4 	bl	8010618 <_Bfree>
 800f830:	9907      	ldr	r1, [sp, #28]
 800f832:	9805      	ldr	r0, [sp, #20]
 800f834:	f000 fef0 	bl	8010618 <_Bfree>
 800f838:	9906      	ldr	r1, [sp, #24]
 800f83a:	9805      	ldr	r0, [sp, #20]
 800f83c:	f000 feec 	bl	8010618 <_Bfree>
 800f840:	e61d      	b.n	800f47e <_strtod_l+0x6a6>
 800f842:	2e00      	cmp	r6, #0
 800f844:	d11c      	bne.n	800f880 <_strtod_l+0xaa8>
 800f846:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f848:	031b      	lsls	r3, r3, #12
 800f84a:	d11f      	bne.n	800f88c <_strtod_l+0xab4>
 800f84c:	2200      	movs	r2, #0
 800f84e:	0020      	movs	r0, r4
 800f850:	0029      	movs	r1, r5
 800f852:	4b5d      	ldr	r3, [pc, #372]	; (800f9c8 <_strtod_l+0xbf0>)
 800f854:	f7f0 fe06 	bl	8000464 <__aeabi_dcmplt>
 800f858:	2800      	cmp	r0, #0
 800f85a:	d11a      	bne.n	800f892 <_strtod_l+0xaba>
 800f85c:	0020      	movs	r0, r4
 800f85e:	0029      	movs	r1, r5
 800f860:	2200      	movs	r2, #0
 800f862:	4b5f      	ldr	r3, [pc, #380]	; (800f9e0 <_strtod_l+0xc08>)
 800f864:	f7f2 f8e0 	bl	8001a28 <__aeabi_dmul>
 800f868:	0005      	movs	r5, r0
 800f86a:	000c      	movs	r4, r1
 800f86c:	2380      	movs	r3, #128	; 0x80
 800f86e:	061b      	lsls	r3, r3, #24
 800f870:	18e3      	adds	r3, r4, r3
 800f872:	951c      	str	r5, [sp, #112]	; 0x70
 800f874:	931d      	str	r3, [sp, #116]	; 0x74
 800f876:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800f878:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f87a:	9210      	str	r2, [sp, #64]	; 0x40
 800f87c:	9311      	str	r3, [sp, #68]	; 0x44
 800f87e:	e79e      	b.n	800f7be <_strtod_l+0x9e6>
 800f880:	2e01      	cmp	r6, #1
 800f882:	d103      	bne.n	800f88c <_strtod_l+0xab4>
 800f884:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f886:	2b00      	cmp	r3, #0
 800f888:	d100      	bne.n	800f88c <_strtod_l+0xab4>
 800f88a:	e582      	b.n	800f392 <_strtod_l+0x5ba>
 800f88c:	2300      	movs	r3, #0
 800f88e:	4c55      	ldr	r4, [pc, #340]	; (800f9e4 <_strtod_l+0xc0c>)
 800f890:	e791      	b.n	800f7b6 <_strtod_l+0x9de>
 800f892:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f894:	4c52      	ldr	r4, [pc, #328]	; (800f9e0 <_strtod_l+0xc08>)
 800f896:	e7e9      	b.n	800f86c <_strtod_l+0xa94>
 800f898:	2200      	movs	r2, #0
 800f89a:	0020      	movs	r0, r4
 800f89c:	0029      	movs	r1, r5
 800f89e:	4b50      	ldr	r3, [pc, #320]	; (800f9e0 <_strtod_l+0xc08>)
 800f8a0:	f7f2 f8c2 	bl	8001a28 <__aeabi_dmul>
 800f8a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f8a6:	0005      	movs	r5, r0
 800f8a8:	000b      	movs	r3, r1
 800f8aa:	000c      	movs	r4, r1
 800f8ac:	2a00      	cmp	r2, #0
 800f8ae:	d107      	bne.n	800f8c0 <_strtod_l+0xae8>
 800f8b0:	2280      	movs	r2, #128	; 0x80
 800f8b2:	0612      	lsls	r2, r2, #24
 800f8b4:	188b      	adds	r3, r1, r2
 800f8b6:	9016      	str	r0, [sp, #88]	; 0x58
 800f8b8:	9317      	str	r3, [sp, #92]	; 0x5c
 800f8ba:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800f8bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f8be:	e7dc      	b.n	800f87a <_strtod_l+0xaa2>
 800f8c0:	0002      	movs	r2, r0
 800f8c2:	9216      	str	r2, [sp, #88]	; 0x58
 800f8c4:	9317      	str	r3, [sp, #92]	; 0x5c
 800f8c6:	e7f8      	b.n	800f8ba <_strtod_l+0xae2>
 800f8c8:	23d4      	movs	r3, #212	; 0xd4
 800f8ca:	049b      	lsls	r3, r3, #18
 800f8cc:	18cf      	adds	r7, r1, r3
 800f8ce:	9b08      	ldr	r3, [sp, #32]
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d1a5      	bne.n	800f820 <_strtod_l+0xa48>
 800f8d4:	4b3d      	ldr	r3, [pc, #244]	; (800f9cc <_strtod_l+0xbf4>)
 800f8d6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f8d8:	403b      	ands	r3, r7
 800f8da:	429a      	cmp	r2, r3
 800f8dc:	d1a0      	bne.n	800f820 <_strtod_l+0xa48>
 800f8de:	0028      	movs	r0, r5
 800f8e0:	0021      	movs	r1, r4
 800f8e2:	f7f0 fe3f 	bl	8000564 <__aeabi_d2lz>
 800f8e6:	f7f0 fe79 	bl	80005dc <__aeabi_l2d>
 800f8ea:	0002      	movs	r2, r0
 800f8ec:	000b      	movs	r3, r1
 800f8ee:	0028      	movs	r0, r5
 800f8f0:	0021      	movs	r1, r4
 800f8f2:	f7f2 fb05 	bl	8001f00 <__aeabi_dsub>
 800f8f6:	033b      	lsls	r3, r7, #12
 800f8f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f8fa:	0b1b      	lsrs	r3, r3, #12
 800f8fc:	4333      	orrs	r3, r6
 800f8fe:	4313      	orrs	r3, r2
 800f900:	0004      	movs	r4, r0
 800f902:	000d      	movs	r5, r1
 800f904:	4a38      	ldr	r2, [pc, #224]	; (800f9e8 <_strtod_l+0xc10>)
 800f906:	2b00      	cmp	r3, #0
 800f908:	d055      	beq.n	800f9b6 <_strtod_l+0xbde>
 800f90a:	4b38      	ldr	r3, [pc, #224]	; (800f9ec <_strtod_l+0xc14>)
 800f90c:	f7f0 fdaa 	bl	8000464 <__aeabi_dcmplt>
 800f910:	2800      	cmp	r0, #0
 800f912:	d000      	beq.n	800f916 <_strtod_l+0xb3e>
 800f914:	e4d3      	b.n	800f2be <_strtod_l+0x4e6>
 800f916:	0020      	movs	r0, r4
 800f918:	0029      	movs	r1, r5
 800f91a:	4a35      	ldr	r2, [pc, #212]	; (800f9f0 <_strtod_l+0xc18>)
 800f91c:	4b30      	ldr	r3, [pc, #192]	; (800f9e0 <_strtod_l+0xc08>)
 800f91e:	f7f0 fdb5 	bl	800048c <__aeabi_dcmpgt>
 800f922:	2800      	cmp	r0, #0
 800f924:	d100      	bne.n	800f928 <_strtod_l+0xb50>
 800f926:	e77b      	b.n	800f820 <_strtod_l+0xa48>
 800f928:	e4c9      	b.n	800f2be <_strtod_l+0x4e6>
 800f92a:	9b08      	ldr	r3, [sp, #32]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d02b      	beq.n	800f988 <_strtod_l+0xbb0>
 800f930:	23d4      	movs	r3, #212	; 0xd4
 800f932:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f934:	04db      	lsls	r3, r3, #19
 800f936:	429a      	cmp	r2, r3
 800f938:	d826      	bhi.n	800f988 <_strtod_l+0xbb0>
 800f93a:	0028      	movs	r0, r5
 800f93c:	0021      	movs	r1, r4
 800f93e:	4a2d      	ldr	r2, [pc, #180]	; (800f9f4 <_strtod_l+0xc1c>)
 800f940:	4b2d      	ldr	r3, [pc, #180]	; (800f9f8 <_strtod_l+0xc20>)
 800f942:	f7f0 fd99 	bl	8000478 <__aeabi_dcmple>
 800f946:	2800      	cmp	r0, #0
 800f948:	d017      	beq.n	800f97a <_strtod_l+0xba2>
 800f94a:	0028      	movs	r0, r5
 800f94c:	0021      	movs	r1, r4
 800f94e:	f7f0 fdeb 	bl	8000528 <__aeabi_d2uiz>
 800f952:	2800      	cmp	r0, #0
 800f954:	d100      	bne.n	800f958 <_strtod_l+0xb80>
 800f956:	3001      	adds	r0, #1
 800f958:	f7f2 fee8 	bl	800272c <__aeabi_ui2d>
 800f95c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f95e:	0005      	movs	r5, r0
 800f960:	000b      	movs	r3, r1
 800f962:	000c      	movs	r4, r1
 800f964:	2a00      	cmp	r2, #0
 800f966:	d122      	bne.n	800f9ae <_strtod_l+0xbd6>
 800f968:	2280      	movs	r2, #128	; 0x80
 800f96a:	0612      	lsls	r2, r2, #24
 800f96c:	188b      	adds	r3, r1, r2
 800f96e:	9018      	str	r0, [sp, #96]	; 0x60
 800f970:	9319      	str	r3, [sp, #100]	; 0x64
 800f972:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f974:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f976:	9210      	str	r2, [sp, #64]	; 0x40
 800f978:	9311      	str	r3, [sp, #68]	; 0x44
 800f97a:	22d6      	movs	r2, #214	; 0xd6
 800f97c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f97e:	04d2      	lsls	r2, r2, #19
 800f980:	189b      	adds	r3, r3, r2
 800f982:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f984:	1a9b      	subs	r3, r3, r2
 800f986:	9311      	str	r3, [sp, #68]	; 0x44
 800f988:	9812      	ldr	r0, [sp, #72]	; 0x48
 800f98a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800f98c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800f98e:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800f990:	f001 f982 	bl	8010c98 <__ulp>
 800f994:	0002      	movs	r2, r0
 800f996:	000b      	movs	r3, r1
 800f998:	0030      	movs	r0, r6
 800f99a:	0039      	movs	r1, r7
 800f99c:	f7f2 f844 	bl	8001a28 <__aeabi_dmul>
 800f9a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f9a2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f9a4:	f7f1 f902 	bl	8000bac <__aeabi_dadd>
 800f9a8:	0006      	movs	r6, r0
 800f9aa:	000f      	movs	r7, r1
 800f9ac:	e78f      	b.n	800f8ce <_strtod_l+0xaf6>
 800f9ae:	0002      	movs	r2, r0
 800f9b0:	9218      	str	r2, [sp, #96]	; 0x60
 800f9b2:	9319      	str	r3, [sp, #100]	; 0x64
 800f9b4:	e7dd      	b.n	800f972 <_strtod_l+0xb9a>
 800f9b6:	4b11      	ldr	r3, [pc, #68]	; (800f9fc <_strtod_l+0xc24>)
 800f9b8:	f7f0 fd54 	bl	8000464 <__aeabi_dcmplt>
 800f9bc:	e7b1      	b.n	800f922 <_strtod_l+0xb4a>
 800f9be:	46c0      	nop			; (mov r8, r8)
 800f9c0:	fff00000 	.word	0xfff00000
 800f9c4:	000fffff 	.word	0x000fffff
 800f9c8:	3ff00000 	.word	0x3ff00000
 800f9cc:	7ff00000 	.word	0x7ff00000
 800f9d0:	7fe00000 	.word	0x7fe00000
 800f9d4:	fcb00000 	.word	0xfcb00000
 800f9d8:	7c9fffff 	.word	0x7c9fffff
 800f9dc:	7fefffff 	.word	0x7fefffff
 800f9e0:	3fe00000 	.word	0x3fe00000
 800f9e4:	bff00000 	.word	0xbff00000
 800f9e8:	94a03595 	.word	0x94a03595
 800f9ec:	3fdfffff 	.word	0x3fdfffff
 800f9f0:	35afe535 	.word	0x35afe535
 800f9f4:	ffc00000 	.word	0xffc00000
 800f9f8:	41dfffff 	.word	0x41dfffff
 800f9fc:	3fcfffff 	.word	0x3fcfffff

0800fa00 <strtof>:
 800fa00:	000a      	movs	r2, r1
 800fa02:	0001      	movs	r1, r0
 800fa04:	4824      	ldr	r0, [pc, #144]	; (800fa98 <strtof+0x98>)
 800fa06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa08:	6800      	ldr	r0, [r0, #0]
 800fa0a:	4b24      	ldr	r3, [pc, #144]	; (800fa9c <strtof+0x9c>)
 800fa0c:	f7ff f9e4 	bl	800edd8 <_strtod_l>
 800fa10:	0006      	movs	r6, r0
 800fa12:	000c      	movs	r4, r1
 800fa14:	0002      	movs	r2, r0
 800fa16:	000b      	movs	r3, r1
 800fa18:	0030      	movs	r0, r6
 800fa1a:	0021      	movs	r1, r4
 800fa1c:	f7f2 fe02 	bl	8002624 <__aeabi_dcmpun>
 800fa20:	2800      	cmp	r0, #0
 800fa22:	d00d      	beq.n	800fa40 <strtof+0x40>
 800fa24:	481e      	ldr	r0, [pc, #120]	; (800faa0 <strtof+0xa0>)
 800fa26:	2c00      	cmp	r4, #0
 800fa28:	da06      	bge.n	800fa38 <strtof+0x38>
 800fa2a:	f001 fe85 	bl	8011738 <nanf>
 800fa2e:	2380      	movs	r3, #128	; 0x80
 800fa30:	061b      	lsls	r3, r3, #24
 800fa32:	18c5      	adds	r5, r0, r3
 800fa34:	1c28      	adds	r0, r5, #0
 800fa36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa38:	f001 fe7e 	bl	8011738 <nanf>
 800fa3c:	1c05      	adds	r5, r0, #0
 800fa3e:	e7f9      	b.n	800fa34 <strtof+0x34>
 800fa40:	0021      	movs	r1, r4
 800fa42:	0030      	movs	r0, r6
 800fa44:	f7f2 fee0 	bl	8002808 <__aeabi_d2f>
 800fa48:	0047      	lsls	r7, r0, #1
 800fa4a:	087f      	lsrs	r7, r7, #1
 800fa4c:	1c05      	adds	r5, r0, #0
 800fa4e:	4915      	ldr	r1, [pc, #84]	; (800faa4 <strtof+0xa4>)
 800fa50:	1c38      	adds	r0, r7, #0
 800fa52:	f7f1 f827 	bl	8000aa4 <__aeabi_fcmpun>
 800fa56:	2800      	cmp	r0, #0
 800fa58:	d1ec      	bne.n	800fa34 <strtof+0x34>
 800fa5a:	4912      	ldr	r1, [pc, #72]	; (800faa4 <strtof+0xa4>)
 800fa5c:	1c38      	adds	r0, r7, #0
 800fa5e:	f7f0 fd45 	bl	80004ec <__aeabi_fcmple>
 800fa62:	2800      	cmp	r0, #0
 800fa64:	d1e6      	bne.n	800fa34 <strtof+0x34>
 800fa66:	2201      	movs	r2, #1
 800fa68:	0064      	lsls	r4, r4, #1
 800fa6a:	0864      	lsrs	r4, r4, #1
 800fa6c:	0030      	movs	r0, r6
 800fa6e:	0021      	movs	r1, r4
 800fa70:	4b0d      	ldr	r3, [pc, #52]	; (800faa8 <strtof+0xa8>)
 800fa72:	4252      	negs	r2, r2
 800fa74:	f7f2 fdd6 	bl	8002624 <__aeabi_dcmpun>
 800fa78:	2800      	cmp	r0, #0
 800fa7a:	d108      	bne.n	800fa8e <strtof+0x8e>
 800fa7c:	2201      	movs	r2, #1
 800fa7e:	0030      	movs	r0, r6
 800fa80:	0021      	movs	r1, r4
 800fa82:	4b09      	ldr	r3, [pc, #36]	; (800faa8 <strtof+0xa8>)
 800fa84:	4252      	negs	r2, r2
 800fa86:	f7f0 fcf7 	bl	8000478 <__aeabi_dcmple>
 800fa8a:	2800      	cmp	r0, #0
 800fa8c:	d0d2      	beq.n	800fa34 <strtof+0x34>
 800fa8e:	2222      	movs	r2, #34	; 0x22
 800fa90:	4b01      	ldr	r3, [pc, #4]	; (800fa98 <strtof+0x98>)
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	601a      	str	r2, [r3, #0]
 800fa96:	e7cd      	b.n	800fa34 <strtof+0x34>
 800fa98:	200000e4 	.word	0x200000e4
 800fa9c:	2000014c 	.word	0x2000014c
 800faa0:	08013a82 	.word	0x08013a82
 800faa4:	7f7fffff 	.word	0x7f7fffff
 800faa8:	7fefffff 	.word	0x7fefffff

0800faac <_strtol_l.constprop.0>:
 800faac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800faae:	b087      	sub	sp, #28
 800fab0:	001e      	movs	r6, r3
 800fab2:	9005      	str	r0, [sp, #20]
 800fab4:	9101      	str	r1, [sp, #4]
 800fab6:	9202      	str	r2, [sp, #8]
 800fab8:	2b01      	cmp	r3, #1
 800faba:	d045      	beq.n	800fb48 <_strtol_l.constprop.0+0x9c>
 800fabc:	000b      	movs	r3, r1
 800fabe:	2e24      	cmp	r6, #36	; 0x24
 800fac0:	d842      	bhi.n	800fb48 <_strtol_l.constprop.0+0x9c>
 800fac2:	4a3f      	ldr	r2, [pc, #252]	; (800fbc0 <_strtol_l.constprop.0+0x114>)
 800fac4:	2108      	movs	r1, #8
 800fac6:	4694      	mov	ip, r2
 800fac8:	001a      	movs	r2, r3
 800faca:	4660      	mov	r0, ip
 800facc:	7814      	ldrb	r4, [r2, #0]
 800face:	3301      	adds	r3, #1
 800fad0:	5d00      	ldrb	r0, [r0, r4]
 800fad2:	001d      	movs	r5, r3
 800fad4:	0007      	movs	r7, r0
 800fad6:	400f      	ands	r7, r1
 800fad8:	4208      	tst	r0, r1
 800fada:	d1f5      	bne.n	800fac8 <_strtol_l.constprop.0+0x1c>
 800fadc:	2c2d      	cmp	r4, #45	; 0x2d
 800fade:	d13a      	bne.n	800fb56 <_strtol_l.constprop.0+0xaa>
 800fae0:	2701      	movs	r7, #1
 800fae2:	781c      	ldrb	r4, [r3, #0]
 800fae4:	1c95      	adds	r5, r2, #2
 800fae6:	2e00      	cmp	r6, #0
 800fae8:	d065      	beq.n	800fbb6 <_strtol_l.constprop.0+0x10a>
 800faea:	2e10      	cmp	r6, #16
 800faec:	d109      	bne.n	800fb02 <_strtol_l.constprop.0+0x56>
 800faee:	2c30      	cmp	r4, #48	; 0x30
 800faf0:	d107      	bne.n	800fb02 <_strtol_l.constprop.0+0x56>
 800faf2:	2220      	movs	r2, #32
 800faf4:	782b      	ldrb	r3, [r5, #0]
 800faf6:	4393      	bics	r3, r2
 800faf8:	2b58      	cmp	r3, #88	; 0x58
 800fafa:	d157      	bne.n	800fbac <_strtol_l.constprop.0+0x100>
 800fafc:	2610      	movs	r6, #16
 800fafe:	786c      	ldrb	r4, [r5, #1]
 800fb00:	3502      	adds	r5, #2
 800fb02:	4b30      	ldr	r3, [pc, #192]	; (800fbc4 <_strtol_l.constprop.0+0x118>)
 800fb04:	0031      	movs	r1, r6
 800fb06:	18fb      	adds	r3, r7, r3
 800fb08:	0018      	movs	r0, r3
 800fb0a:	9303      	str	r3, [sp, #12]
 800fb0c:	f7f0 fba4 	bl	8000258 <__aeabi_uidivmod>
 800fb10:	2300      	movs	r3, #0
 800fb12:	2201      	movs	r2, #1
 800fb14:	4684      	mov	ip, r0
 800fb16:	0018      	movs	r0, r3
 800fb18:	9104      	str	r1, [sp, #16]
 800fb1a:	4252      	negs	r2, r2
 800fb1c:	0021      	movs	r1, r4
 800fb1e:	3930      	subs	r1, #48	; 0x30
 800fb20:	2909      	cmp	r1, #9
 800fb22:	d81d      	bhi.n	800fb60 <_strtol_l.constprop.0+0xb4>
 800fb24:	000c      	movs	r4, r1
 800fb26:	42a6      	cmp	r6, r4
 800fb28:	dd28      	ble.n	800fb7c <_strtol_l.constprop.0+0xd0>
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	db24      	blt.n	800fb78 <_strtol_l.constprop.0+0xcc>
 800fb2e:	0013      	movs	r3, r2
 800fb30:	4584      	cmp	ip, r0
 800fb32:	d306      	bcc.n	800fb42 <_strtol_l.constprop.0+0x96>
 800fb34:	d102      	bne.n	800fb3c <_strtol_l.constprop.0+0x90>
 800fb36:	9904      	ldr	r1, [sp, #16]
 800fb38:	42a1      	cmp	r1, r4
 800fb3a:	db02      	blt.n	800fb42 <_strtol_l.constprop.0+0x96>
 800fb3c:	2301      	movs	r3, #1
 800fb3e:	4370      	muls	r0, r6
 800fb40:	1820      	adds	r0, r4, r0
 800fb42:	782c      	ldrb	r4, [r5, #0]
 800fb44:	3501      	adds	r5, #1
 800fb46:	e7e9      	b.n	800fb1c <_strtol_l.constprop.0+0x70>
 800fb48:	f7ff f88c 	bl	800ec64 <__errno>
 800fb4c:	2316      	movs	r3, #22
 800fb4e:	6003      	str	r3, [r0, #0]
 800fb50:	2000      	movs	r0, #0
 800fb52:	b007      	add	sp, #28
 800fb54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb56:	2c2b      	cmp	r4, #43	; 0x2b
 800fb58:	d1c5      	bne.n	800fae6 <_strtol_l.constprop.0+0x3a>
 800fb5a:	781c      	ldrb	r4, [r3, #0]
 800fb5c:	1c95      	adds	r5, r2, #2
 800fb5e:	e7c2      	b.n	800fae6 <_strtol_l.constprop.0+0x3a>
 800fb60:	0021      	movs	r1, r4
 800fb62:	3941      	subs	r1, #65	; 0x41
 800fb64:	2919      	cmp	r1, #25
 800fb66:	d801      	bhi.n	800fb6c <_strtol_l.constprop.0+0xc0>
 800fb68:	3c37      	subs	r4, #55	; 0x37
 800fb6a:	e7dc      	b.n	800fb26 <_strtol_l.constprop.0+0x7a>
 800fb6c:	0021      	movs	r1, r4
 800fb6e:	3961      	subs	r1, #97	; 0x61
 800fb70:	2919      	cmp	r1, #25
 800fb72:	d803      	bhi.n	800fb7c <_strtol_l.constprop.0+0xd0>
 800fb74:	3c57      	subs	r4, #87	; 0x57
 800fb76:	e7d6      	b.n	800fb26 <_strtol_l.constprop.0+0x7a>
 800fb78:	0013      	movs	r3, r2
 800fb7a:	e7e2      	b.n	800fb42 <_strtol_l.constprop.0+0x96>
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	da09      	bge.n	800fb94 <_strtol_l.constprop.0+0xe8>
 800fb80:	2322      	movs	r3, #34	; 0x22
 800fb82:	9a05      	ldr	r2, [sp, #20]
 800fb84:	9803      	ldr	r0, [sp, #12]
 800fb86:	6013      	str	r3, [r2, #0]
 800fb88:	9b02      	ldr	r3, [sp, #8]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d0e1      	beq.n	800fb52 <_strtol_l.constprop.0+0xa6>
 800fb8e:	1e6b      	subs	r3, r5, #1
 800fb90:	9301      	str	r3, [sp, #4]
 800fb92:	e007      	b.n	800fba4 <_strtol_l.constprop.0+0xf8>
 800fb94:	2f00      	cmp	r7, #0
 800fb96:	d000      	beq.n	800fb9a <_strtol_l.constprop.0+0xee>
 800fb98:	4240      	negs	r0, r0
 800fb9a:	9a02      	ldr	r2, [sp, #8]
 800fb9c:	2a00      	cmp	r2, #0
 800fb9e:	d0d8      	beq.n	800fb52 <_strtol_l.constprop.0+0xa6>
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d1f4      	bne.n	800fb8e <_strtol_l.constprop.0+0xe2>
 800fba4:	9b02      	ldr	r3, [sp, #8]
 800fba6:	9a01      	ldr	r2, [sp, #4]
 800fba8:	601a      	str	r2, [r3, #0]
 800fbaa:	e7d2      	b.n	800fb52 <_strtol_l.constprop.0+0xa6>
 800fbac:	2430      	movs	r4, #48	; 0x30
 800fbae:	2e00      	cmp	r6, #0
 800fbb0:	d1a7      	bne.n	800fb02 <_strtol_l.constprop.0+0x56>
 800fbb2:	3608      	adds	r6, #8
 800fbb4:	e7a5      	b.n	800fb02 <_strtol_l.constprop.0+0x56>
 800fbb6:	2c30      	cmp	r4, #48	; 0x30
 800fbb8:	d09b      	beq.n	800faf2 <_strtol_l.constprop.0+0x46>
 800fbba:	260a      	movs	r6, #10
 800fbbc:	e7a1      	b.n	800fb02 <_strtol_l.constprop.0+0x56>
 800fbbe:	46c0      	nop			; (mov r8, r8)
 800fbc0:	08013719 	.word	0x08013719
 800fbc4:	7fffffff 	.word	0x7fffffff

0800fbc8 <strtol>:
 800fbc8:	b510      	push	{r4, lr}
 800fbca:	0013      	movs	r3, r2
 800fbcc:	000a      	movs	r2, r1
 800fbce:	0001      	movs	r1, r0
 800fbd0:	4802      	ldr	r0, [pc, #8]	; (800fbdc <strtol+0x14>)
 800fbd2:	6800      	ldr	r0, [r0, #0]
 800fbd4:	f7ff ff6a 	bl	800faac <_strtol_l.constprop.0>
 800fbd8:	bd10      	pop	{r4, pc}
 800fbda:	46c0      	nop			; (mov r8, r8)
 800fbdc:	200000e4 	.word	0x200000e4

0800fbe0 <print_e>:
 800fbe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbe2:	b08b      	sub	sp, #44	; 0x2c
 800fbe4:	000f      	movs	r7, r1
 800fbe6:	a910      	add	r1, sp, #64	; 0x40
 800fbe8:	c920      	ldmia	r1!, {r5}
 800fbea:	780e      	ldrb	r6, [r1, #0]
 800fbec:	a908      	add	r1, sp, #32
 800fbee:	9104      	str	r1, [sp, #16]
 800fbf0:	a907      	add	r1, sp, #28
 800fbf2:	9103      	str	r1, [sp, #12]
 800fbf4:	a909      	add	r1, sp, #36	; 0x24
 800fbf6:	9102      	str	r1, [sp, #8]
 800fbf8:	1c69      	adds	r1, r5, #1
 800fbfa:	9101      	str	r1, [sp, #4]
 800fbfc:	2102      	movs	r1, #2
 800fbfe:	9100      	str	r1, [sp, #0]
 800fc00:	f001 fe70 	bl	80118e4 <_dtoa_r>
 800fc04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fc06:	4b36      	ldr	r3, [pc, #216]	; (800fce0 <print_e+0x100>)
 800fc08:	0001      	movs	r1, r0
 800fc0a:	429a      	cmp	r2, r3
 800fc0c:	d104      	bne.n	800fc18 <print_e+0x38>
 800fc0e:	0038      	movs	r0, r7
 800fc10:	f001 fd96 	bl	8011740 <strcpy>
 800fc14:	b00b      	add	sp, #44	; 0x2c
 800fc16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc18:	7801      	ldrb	r1, [r0, #0]
 800fc1a:	1c43      	adds	r3, r0, #1
 800fc1c:	1c7c      	adds	r4, r7, #1
 800fc1e:	7039      	strb	r1, [r7, #0]
 800fc20:	2d00      	cmp	r5, #0
 800fc22:	dd01      	ble.n	800fc28 <print_e+0x48>
 800fc24:	2101      	movs	r1, #1
 800fc26:	9112      	str	r1, [sp, #72]	; 0x48
 800fc28:	212e      	movs	r1, #46	; 0x2e
 800fc2a:	7818      	ldrb	r0, [r3, #0]
 800fc2c:	2800      	cmp	r0, #0
 800fc2e:	d001      	beq.n	800fc34 <print_e+0x54>
 800fc30:	2d00      	cmp	r5, #0
 800fc32:	dc35      	bgt.n	800fca0 <print_e+0xc0>
 800fc34:	2e67      	cmp	r6, #103	; 0x67
 800fc36:	d04b      	beq.n	800fcd0 <print_e+0xf0>
 800fc38:	2e47      	cmp	r6, #71	; 0x47
 800fc3a:	d04b      	beq.n	800fcd4 <print_e+0xf4>
 800fc3c:	232e      	movs	r3, #46	; 0x2e
 800fc3e:	2130      	movs	r1, #48	; 0x30
 800fc40:	2d00      	cmp	r5, #0
 800fc42:	dc3a      	bgt.n	800fcba <print_e+0xda>
 800fc44:	1e53      	subs	r3, r2, #1
 800fc46:	7026      	strb	r6, [r4, #0]
 800fc48:	9309      	str	r3, [sp, #36]	; 0x24
 800fc4a:	1ca5      	adds	r5, r4, #2
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	da43      	bge.n	800fcd8 <print_e+0xf8>
 800fc50:	232d      	movs	r3, #45	; 0x2d
 800fc52:	7063      	strb	r3, [r4, #1]
 800fc54:	3b2c      	subs	r3, #44	; 0x2c
 800fc56:	1a9b      	subs	r3, r3, r2
 800fc58:	9309      	str	r3, [sp, #36]	; 0x24
 800fc5a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800fc5c:	2e63      	cmp	r6, #99	; 0x63
 800fc5e:	dd0d      	ble.n	800fc7c <print_e+0x9c>
 800fc60:	2164      	movs	r1, #100	; 0x64
 800fc62:	0030      	movs	r0, r6
 800fc64:	f7f0 fafc 	bl	8000260 <__divsi3>
 800fc68:	0003      	movs	r3, r0
 800fc6a:	0002      	movs	r2, r0
 800fc6c:	2064      	movs	r0, #100	; 0x64
 800fc6e:	4240      	negs	r0, r0
 800fc70:	4358      	muls	r0, r3
 800fc72:	3230      	adds	r2, #48	; 0x30
 800fc74:	1980      	adds	r0, r0, r6
 800fc76:	1ce5      	adds	r5, r4, #3
 800fc78:	70a2      	strb	r2, [r4, #2]
 800fc7a:	9009      	str	r0, [sp, #36]	; 0x24
 800fc7c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800fc7e:	210a      	movs	r1, #10
 800fc80:	0020      	movs	r0, r4
 800fc82:	f7f0 faed 	bl	8000260 <__divsi3>
 800fc86:	0003      	movs	r3, r0
 800fc88:	0002      	movs	r2, r0
 800fc8a:	200a      	movs	r0, #10
 800fc8c:	4240      	negs	r0, r0
 800fc8e:	4358      	muls	r0, r3
 800fc90:	2300      	movs	r3, #0
 800fc92:	1900      	adds	r0, r0, r4
 800fc94:	3230      	adds	r2, #48	; 0x30
 800fc96:	3030      	adds	r0, #48	; 0x30
 800fc98:	702a      	strb	r2, [r5, #0]
 800fc9a:	7068      	strb	r0, [r5, #1]
 800fc9c:	70ab      	strb	r3, [r5, #2]
 800fc9e:	e7b9      	b.n	800fc14 <print_e+0x34>
 800fca0:	9812      	ldr	r0, [sp, #72]	; 0x48
 800fca2:	2800      	cmp	r0, #0
 800fca4:	d001      	beq.n	800fcaa <print_e+0xca>
 800fca6:	7021      	strb	r1, [r4, #0]
 800fca8:	3401      	adds	r4, #1
 800fcaa:	7818      	ldrb	r0, [r3, #0]
 800fcac:	3d01      	subs	r5, #1
 800fcae:	7020      	strb	r0, [r4, #0]
 800fcb0:	2000      	movs	r0, #0
 800fcb2:	3301      	adds	r3, #1
 800fcb4:	3401      	adds	r4, #1
 800fcb6:	9012      	str	r0, [sp, #72]	; 0x48
 800fcb8:	e7b7      	b.n	800fc2a <print_e+0x4a>
 800fcba:	9812      	ldr	r0, [sp, #72]	; 0x48
 800fcbc:	2800      	cmp	r0, #0
 800fcbe:	d001      	beq.n	800fcc4 <print_e+0xe4>
 800fcc0:	7023      	strb	r3, [r4, #0]
 800fcc2:	3401      	adds	r4, #1
 800fcc4:	2000      	movs	r0, #0
 800fcc6:	7021      	strb	r1, [r4, #0]
 800fcc8:	3d01      	subs	r5, #1
 800fcca:	3401      	adds	r4, #1
 800fccc:	9012      	str	r0, [sp, #72]	; 0x48
 800fcce:	e7b7      	b.n	800fc40 <print_e+0x60>
 800fcd0:	2665      	movs	r6, #101	; 0x65
 800fcd2:	e7b7      	b.n	800fc44 <print_e+0x64>
 800fcd4:	2645      	movs	r6, #69	; 0x45
 800fcd6:	e7b5      	b.n	800fc44 <print_e+0x64>
 800fcd8:	232b      	movs	r3, #43	; 0x2b
 800fcda:	7063      	strb	r3, [r4, #1]
 800fcdc:	e7bd      	b.n	800fc5a <print_e+0x7a>
 800fcde:	46c0      	nop			; (mov r8, r8)
 800fce0:	0000270f 	.word	0x0000270f

0800fce4 <_gcvt>:
 800fce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fce6:	0016      	movs	r6, r2
 800fce8:	001d      	movs	r5, r3
 800fcea:	b08d      	sub	sp, #52	; 0x34
 800fcec:	ab14      	add	r3, sp, #80	; 0x50
 800fcee:	781b      	ldrb	r3, [r3, #0]
 800fcf0:	0007      	movs	r7, r0
 800fcf2:	9307      	str	r3, [sp, #28]
 800fcf4:	2200      	movs	r2, #0
 800fcf6:	2300      	movs	r3, #0
 800fcf8:	0030      	movs	r0, r6
 800fcfa:	0029      	movs	r1, r5
 800fcfc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800fcfe:	f7f0 fbb1 	bl	8000464 <__aeabi_dcmplt>
 800fd02:	2800      	cmp	r0, #0
 800fd04:	d002      	beq.n	800fd0c <_gcvt+0x28>
 800fd06:	2380      	movs	r3, #128	; 0x80
 800fd08:	061b      	lsls	r3, r3, #24
 800fd0a:	18ed      	adds	r5, r5, r3
 800fd0c:	2200      	movs	r2, #0
 800fd0e:	2300      	movs	r3, #0
 800fd10:	0030      	movs	r0, r6
 800fd12:	0029      	movs	r1, r5
 800fd14:	f7f0 fba0 	bl	8000458 <__aeabi_dcmpeq>
 800fd18:	2800      	cmp	r0, #0
 800fd1a:	d006      	beq.n	800fd2a <_gcvt+0x46>
 800fd1c:	2330      	movs	r3, #48	; 0x30
 800fd1e:	7023      	strb	r3, [r4, #0]
 800fd20:	2300      	movs	r3, #0
 800fd22:	7063      	strb	r3, [r4, #1]
 800fd24:	0020      	movs	r0, r4
 800fd26:	b00d      	add	sp, #52	; 0x34
 800fd28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd2a:	0030      	movs	r0, r6
 800fd2c:	0029      	movs	r1, r5
 800fd2e:	4a52      	ldr	r2, [pc, #328]	; (800fe78 <_gcvt+0x194>)
 800fd30:	4b52      	ldr	r3, [pc, #328]	; (800fe7c <_gcvt+0x198>)
 800fd32:	f7f0 fba1 	bl	8000478 <__aeabi_dcmple>
 800fd36:	2800      	cmp	r0, #0
 800fd38:	d00d      	beq.n	800fd56 <_gcvt+0x72>
 800fd3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fd3c:	0032      	movs	r2, r6
 800fd3e:	9302      	str	r3, [sp, #8]
 800fd40:	9b07      	ldr	r3, [sp, #28]
 800fd42:	0021      	movs	r1, r4
 800fd44:	9301      	str	r3, [sp, #4]
 800fd46:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fd48:	0038      	movs	r0, r7
 800fd4a:	3b01      	subs	r3, #1
 800fd4c:	9300      	str	r3, [sp, #0]
 800fd4e:	002b      	movs	r3, r5
 800fd50:	f7ff ff46 	bl	800fbe0 <print_e>
 800fd54:	e7e6      	b.n	800fd24 <_gcvt+0x40>
 800fd56:	9812      	ldr	r0, [sp, #72]	; 0x48
 800fd58:	f001 f8a0 	bl	8010e9c <_mprec_log10>
 800fd5c:	0032      	movs	r2, r6
 800fd5e:	002b      	movs	r3, r5
 800fd60:	f7f0 fb8a 	bl	8000478 <__aeabi_dcmple>
 800fd64:	2800      	cmp	r0, #0
 800fd66:	d1e8      	bne.n	800fd3a <_gcvt+0x56>
 800fd68:	ab0b      	add	r3, sp, #44	; 0x2c
 800fd6a:	9304      	str	r3, [sp, #16]
 800fd6c:	ab0a      	add	r3, sp, #40	; 0x28
 800fd6e:	9303      	str	r3, [sp, #12]
 800fd70:	ab09      	add	r3, sp, #36	; 0x24
 800fd72:	9302      	str	r3, [sp, #8]
 800fd74:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fd76:	0032      	movs	r2, r6
 800fd78:	9301      	str	r3, [sp, #4]
 800fd7a:	2302      	movs	r3, #2
 800fd7c:	0038      	movs	r0, r7
 800fd7e:	9300      	str	r3, [sp, #0]
 800fd80:	002b      	movs	r3, r5
 800fd82:	f001 fdaf 	bl	80118e4 <_dtoa_r>
 800fd86:	4b3e      	ldr	r3, [pc, #248]	; (800fe80 <_gcvt+0x19c>)
 800fd88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fd8a:	0001      	movs	r1, r0
 800fd8c:	0020      	movs	r0, r4
 800fd8e:	429a      	cmp	r2, r3
 800fd90:	d00c      	beq.n	800fdac <_gcvt+0xc8>
 800fd92:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fd94:	18e5      	adds	r5, r4, r3
 800fd96:	780e      	ldrb	r6, [r1, #0]
 800fd98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fd9a:	1a2b      	subs	r3, r5, r0
 800fd9c:	2e00      	cmp	r6, #0
 800fd9e:	d001      	beq.n	800fda4 <_gcvt+0xc0>
 800fda0:	2a00      	cmp	r2, #0
 800fda2:	dc06      	bgt.n	800fdb2 <_gcvt+0xce>
 800fda4:	2501      	movs	r5, #1
 800fda6:	2600      	movs	r6, #0
 800fda8:	46ac      	mov	ip, r5
 800fdaa:	e00d      	b.n	800fdc8 <_gcvt+0xe4>
 800fdac:	f001 fcc8 	bl	8011740 <strcpy>
 800fdb0:	e7b8      	b.n	800fd24 <_gcvt+0x40>
 800fdb2:	3a01      	subs	r2, #1
 800fdb4:	7006      	strb	r6, [r0, #0]
 800fdb6:	3101      	adds	r1, #1
 800fdb8:	9209      	str	r2, [sp, #36]	; 0x24
 800fdba:	3001      	adds	r0, #1
 800fdbc:	e7eb      	b.n	800fd96 <_gcvt+0xb2>
 800fdbe:	2530      	movs	r5, #48	; 0x30
 800fdc0:	4666      	mov	r6, ip
 800fdc2:	7005      	strb	r5, [r0, #0]
 800fdc4:	3b01      	subs	r3, #1
 800fdc6:	3001      	adds	r0, #1
 800fdc8:	0005      	movs	r5, r0
 800fdca:	1e17      	subs	r7, r2, #0
 800fdcc:	dc35      	bgt.n	800fe3a <_gcvt+0x156>
 800fdce:	2e00      	cmp	r6, #0
 800fdd0:	d000      	beq.n	800fdd4 <_gcvt+0xf0>
 800fdd2:	9209      	str	r2, [sp, #36]	; 0x24
 800fdd4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800fdd6:	2a00      	cmp	r2, #0
 800fdd8:	d102      	bne.n	800fde0 <_gcvt+0xfc>
 800fdda:	780a      	ldrb	r2, [r1, #0]
 800fddc:	2a00      	cmp	r2, #0
 800fdde:	d029      	beq.n	800fe34 <_gcvt+0x150>
 800fde0:	4284      	cmp	r4, r0
 800fde2:	d102      	bne.n	800fdea <_gcvt+0x106>
 800fde4:	2230      	movs	r2, #48	; 0x30
 800fde6:	1c65      	adds	r5, r4, #1
 800fde8:	7022      	strb	r2, [r4, #0]
 800fdea:	222e      	movs	r2, #46	; 0x2e
 800fdec:	702a      	strb	r2, [r5, #0]
 800fdee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fdf0:	0028      	movs	r0, r5
 800fdf2:	1b57      	subs	r7, r2, r5
 800fdf4:	9707      	str	r7, [sp, #28]
 800fdf6:	2701      	movs	r7, #1
 800fdf8:	2600      	movs	r6, #0
 800fdfa:	46bc      	mov	ip, r7
 800fdfc:	9f07      	ldr	r7, [sp, #28]
 800fdfe:	42c7      	cmn	r7, r0
 800fe00:	d422      	bmi.n	800fe48 <_gcvt+0x164>
 800fe02:	2000      	movs	r0, #0
 800fe04:	4257      	negs	r7, r2
 800fe06:	4282      	cmp	r2, r0
 800fe08:	dc00      	bgt.n	800fe0c <_gcvt+0x128>
 800fe0a:	0038      	movs	r0, r7
 800fe0c:	3001      	adds	r0, #1
 800fe0e:	182d      	adds	r5, r5, r0
 800fe10:	2000      	movs	r0, #0
 800fe12:	4282      	cmp	r2, r0
 800fe14:	dc00      	bgt.n	800fe18 <_gcvt+0x134>
 800fe16:	0038      	movs	r0, r7
 800fe18:	1810      	adds	r0, r2, r0
 800fe1a:	2e00      	cmp	r6, #0
 800fe1c:	d000      	beq.n	800fe20 <_gcvt+0x13c>
 800fe1e:	9009      	str	r0, [sp, #36]	; 0x24
 800fe20:	002a      	movs	r2, r5
 800fe22:	7808      	ldrb	r0, [r1, #0]
 800fe24:	0015      	movs	r5, r2
 800fe26:	2800      	cmp	r0, #0
 800fe28:	d001      	beq.n	800fe2e <_gcvt+0x14a>
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	dc11      	bgt.n	800fe52 <_gcvt+0x16e>
 800fe2e:	9915      	ldr	r1, [sp, #84]	; 0x54
 800fe30:	2900      	cmp	r1, #0
 800fe32:	d11d      	bne.n	800fe70 <_gcvt+0x18c>
 800fe34:	2300      	movs	r3, #0
 800fe36:	702b      	strb	r3, [r5, #0]
 800fe38:	e774      	b.n	800fd24 <_gcvt+0x40>
 800fe3a:	3a01      	subs	r2, #1
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	dcbe      	bgt.n	800fdbe <_gcvt+0xda>
 800fe40:	2e00      	cmp	r6, #0
 800fe42:	d0c7      	beq.n	800fdd4 <_gcvt+0xf0>
 800fe44:	9709      	str	r7, [sp, #36]	; 0x24
 800fe46:	e7c5      	b.n	800fdd4 <_gcvt+0xf0>
 800fe48:	2630      	movs	r6, #48	; 0x30
 800fe4a:	3001      	adds	r0, #1
 800fe4c:	7006      	strb	r6, [r0, #0]
 800fe4e:	4666      	mov	r6, ip
 800fe50:	e7d4      	b.n	800fdfc <_gcvt+0x118>
 800fe52:	7010      	strb	r0, [r2, #0]
 800fe54:	3101      	adds	r1, #1
 800fe56:	3b01      	subs	r3, #1
 800fe58:	3201      	adds	r2, #1
 800fe5a:	e7e2      	b.n	800fe22 <_gcvt+0x13e>
 800fe5c:	700e      	strb	r6, [r1, #0]
 800fe5e:	3101      	adds	r1, #1
 800fe60:	1a68      	subs	r0, r5, r1
 800fe62:	2800      	cmp	r0, #0
 800fe64:	dcfa      	bgt.n	800fe5c <_gcvt+0x178>
 800fe66:	43dd      	mvns	r5, r3
 800fe68:	17ed      	asrs	r5, r5, #31
 800fe6a:	401d      	ands	r5, r3
 800fe6c:	1955      	adds	r5, r2, r5
 800fe6e:	e7e1      	b.n	800fe34 <_gcvt+0x150>
 800fe70:	0011      	movs	r1, r2
 800fe72:	2630      	movs	r6, #48	; 0x30
 800fe74:	189d      	adds	r5, r3, r2
 800fe76:	e7f3      	b.n	800fe60 <_gcvt+0x17c>
 800fe78:	eb1c432d 	.word	0xeb1c432d
 800fe7c:	3f1a36e2 	.word	0x3f1a36e2
 800fe80:	0000270f 	.word	0x0000270f

0800fe84 <rshift>:
 800fe84:	0002      	movs	r2, r0
 800fe86:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe88:	6904      	ldr	r4, [r0, #16]
 800fe8a:	3214      	adds	r2, #20
 800fe8c:	0013      	movs	r3, r2
 800fe8e:	b085      	sub	sp, #20
 800fe90:	114f      	asrs	r7, r1, #5
 800fe92:	42bc      	cmp	r4, r7
 800fe94:	dd31      	ble.n	800fefa <rshift+0x76>
 800fe96:	00bb      	lsls	r3, r7, #2
 800fe98:	18d3      	adds	r3, r2, r3
 800fe9a:	261f      	movs	r6, #31
 800fe9c:	9301      	str	r3, [sp, #4]
 800fe9e:	000b      	movs	r3, r1
 800fea0:	00a5      	lsls	r5, r4, #2
 800fea2:	4033      	ands	r3, r6
 800fea4:	1955      	adds	r5, r2, r5
 800fea6:	9302      	str	r3, [sp, #8]
 800fea8:	4231      	tst	r1, r6
 800feaa:	d10c      	bne.n	800fec6 <rshift+0x42>
 800feac:	0016      	movs	r6, r2
 800feae:	9901      	ldr	r1, [sp, #4]
 800feb0:	428d      	cmp	r5, r1
 800feb2:	d838      	bhi.n	800ff26 <rshift+0xa2>
 800feb4:	9901      	ldr	r1, [sp, #4]
 800feb6:	2300      	movs	r3, #0
 800feb8:	3903      	subs	r1, #3
 800feba:	428d      	cmp	r5, r1
 800febc:	d301      	bcc.n	800fec2 <rshift+0x3e>
 800febe:	1be3      	subs	r3, r4, r7
 800fec0:	009b      	lsls	r3, r3, #2
 800fec2:	18d3      	adds	r3, r2, r3
 800fec4:	e019      	b.n	800fefa <rshift+0x76>
 800fec6:	2120      	movs	r1, #32
 800fec8:	9b02      	ldr	r3, [sp, #8]
 800feca:	9e01      	ldr	r6, [sp, #4]
 800fecc:	1acb      	subs	r3, r1, r3
 800fece:	9303      	str	r3, [sp, #12]
 800fed0:	ce02      	ldmia	r6!, {r1}
 800fed2:	9b02      	ldr	r3, [sp, #8]
 800fed4:	4694      	mov	ip, r2
 800fed6:	40d9      	lsrs	r1, r3
 800fed8:	9100      	str	r1, [sp, #0]
 800feda:	42b5      	cmp	r5, r6
 800fedc:	d816      	bhi.n	800ff0c <rshift+0x88>
 800fede:	9e01      	ldr	r6, [sp, #4]
 800fee0:	2300      	movs	r3, #0
 800fee2:	3601      	adds	r6, #1
 800fee4:	42b5      	cmp	r5, r6
 800fee6:	d302      	bcc.n	800feee <rshift+0x6a>
 800fee8:	1be3      	subs	r3, r4, r7
 800feea:	009b      	lsls	r3, r3, #2
 800feec:	3b04      	subs	r3, #4
 800feee:	9900      	ldr	r1, [sp, #0]
 800fef0:	18d3      	adds	r3, r2, r3
 800fef2:	6019      	str	r1, [r3, #0]
 800fef4:	2900      	cmp	r1, #0
 800fef6:	d000      	beq.n	800fefa <rshift+0x76>
 800fef8:	3304      	adds	r3, #4
 800fefa:	1a99      	subs	r1, r3, r2
 800fefc:	1089      	asrs	r1, r1, #2
 800fefe:	6101      	str	r1, [r0, #16]
 800ff00:	4293      	cmp	r3, r2
 800ff02:	d101      	bne.n	800ff08 <rshift+0x84>
 800ff04:	2300      	movs	r3, #0
 800ff06:	6143      	str	r3, [r0, #20]
 800ff08:	b005      	add	sp, #20
 800ff0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff0c:	6833      	ldr	r3, [r6, #0]
 800ff0e:	9903      	ldr	r1, [sp, #12]
 800ff10:	408b      	lsls	r3, r1
 800ff12:	9900      	ldr	r1, [sp, #0]
 800ff14:	4319      	orrs	r1, r3
 800ff16:	4663      	mov	r3, ip
 800ff18:	c302      	stmia	r3!, {r1}
 800ff1a:	469c      	mov	ip, r3
 800ff1c:	ce02      	ldmia	r6!, {r1}
 800ff1e:	9b02      	ldr	r3, [sp, #8]
 800ff20:	40d9      	lsrs	r1, r3
 800ff22:	9100      	str	r1, [sp, #0]
 800ff24:	e7d9      	b.n	800feda <rshift+0x56>
 800ff26:	c908      	ldmia	r1!, {r3}
 800ff28:	c608      	stmia	r6!, {r3}
 800ff2a:	e7c1      	b.n	800feb0 <rshift+0x2c>

0800ff2c <__hexdig_fun>:
 800ff2c:	0002      	movs	r2, r0
 800ff2e:	3a30      	subs	r2, #48	; 0x30
 800ff30:	0003      	movs	r3, r0
 800ff32:	2a09      	cmp	r2, #9
 800ff34:	d802      	bhi.n	800ff3c <__hexdig_fun+0x10>
 800ff36:	3b20      	subs	r3, #32
 800ff38:	b2d8      	uxtb	r0, r3
 800ff3a:	4770      	bx	lr
 800ff3c:	0002      	movs	r2, r0
 800ff3e:	3a61      	subs	r2, #97	; 0x61
 800ff40:	2a05      	cmp	r2, #5
 800ff42:	d801      	bhi.n	800ff48 <__hexdig_fun+0x1c>
 800ff44:	3b47      	subs	r3, #71	; 0x47
 800ff46:	e7f7      	b.n	800ff38 <__hexdig_fun+0xc>
 800ff48:	001a      	movs	r2, r3
 800ff4a:	3a41      	subs	r2, #65	; 0x41
 800ff4c:	2000      	movs	r0, #0
 800ff4e:	2a05      	cmp	r2, #5
 800ff50:	d8f3      	bhi.n	800ff3a <__hexdig_fun+0xe>
 800ff52:	3b27      	subs	r3, #39	; 0x27
 800ff54:	e7f0      	b.n	800ff38 <__hexdig_fun+0xc>
	...

0800ff58 <__gethex>:
 800ff58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff5a:	b08d      	sub	sp, #52	; 0x34
 800ff5c:	930a      	str	r3, [sp, #40]	; 0x28
 800ff5e:	4bbf      	ldr	r3, [pc, #764]	; (801025c <__gethex+0x304>)
 800ff60:	9005      	str	r0, [sp, #20]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	9109      	str	r1, [sp, #36]	; 0x24
 800ff66:	0018      	movs	r0, r3
 800ff68:	9202      	str	r2, [sp, #8]
 800ff6a:	9307      	str	r3, [sp, #28]
 800ff6c:	f7f0 f8d2 	bl	8000114 <strlen>
 800ff70:	2202      	movs	r2, #2
 800ff72:	9b07      	ldr	r3, [sp, #28]
 800ff74:	4252      	negs	r2, r2
 800ff76:	181b      	adds	r3, r3, r0
 800ff78:	3b01      	subs	r3, #1
 800ff7a:	781b      	ldrb	r3, [r3, #0]
 800ff7c:	9003      	str	r0, [sp, #12]
 800ff7e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ff80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff82:	6819      	ldr	r1, [r3, #0]
 800ff84:	1c8b      	adds	r3, r1, #2
 800ff86:	1a52      	subs	r2, r2, r1
 800ff88:	18d1      	adds	r1, r2, r3
 800ff8a:	9301      	str	r3, [sp, #4]
 800ff8c:	9108      	str	r1, [sp, #32]
 800ff8e:	9901      	ldr	r1, [sp, #4]
 800ff90:	3301      	adds	r3, #1
 800ff92:	7808      	ldrb	r0, [r1, #0]
 800ff94:	2830      	cmp	r0, #48	; 0x30
 800ff96:	d0f7      	beq.n	800ff88 <__gethex+0x30>
 800ff98:	f7ff ffc8 	bl	800ff2c <__hexdig_fun>
 800ff9c:	2300      	movs	r3, #0
 800ff9e:	001c      	movs	r4, r3
 800ffa0:	9304      	str	r3, [sp, #16]
 800ffa2:	4298      	cmp	r0, r3
 800ffa4:	d11f      	bne.n	800ffe6 <__gethex+0x8e>
 800ffa6:	9a03      	ldr	r2, [sp, #12]
 800ffa8:	9907      	ldr	r1, [sp, #28]
 800ffaa:	9801      	ldr	r0, [sp, #4]
 800ffac:	f001 fbd0 	bl	8011750 <strncmp>
 800ffb0:	0007      	movs	r7, r0
 800ffb2:	42a0      	cmp	r0, r4
 800ffb4:	d000      	beq.n	800ffb8 <__gethex+0x60>
 800ffb6:	e06b      	b.n	8010090 <__gethex+0x138>
 800ffb8:	9b01      	ldr	r3, [sp, #4]
 800ffba:	9a03      	ldr	r2, [sp, #12]
 800ffbc:	5c98      	ldrb	r0, [r3, r2]
 800ffbe:	189d      	adds	r5, r3, r2
 800ffc0:	f7ff ffb4 	bl	800ff2c <__hexdig_fun>
 800ffc4:	2301      	movs	r3, #1
 800ffc6:	9304      	str	r3, [sp, #16]
 800ffc8:	42a0      	cmp	r0, r4
 800ffca:	d030      	beq.n	801002e <__gethex+0xd6>
 800ffcc:	9501      	str	r5, [sp, #4]
 800ffce:	9b01      	ldr	r3, [sp, #4]
 800ffd0:	7818      	ldrb	r0, [r3, #0]
 800ffd2:	2830      	cmp	r0, #48	; 0x30
 800ffd4:	d009      	beq.n	800ffea <__gethex+0x92>
 800ffd6:	f7ff ffa9 	bl	800ff2c <__hexdig_fun>
 800ffda:	4242      	negs	r2, r0
 800ffdc:	4142      	adcs	r2, r0
 800ffde:	2301      	movs	r3, #1
 800ffe0:	002c      	movs	r4, r5
 800ffe2:	9204      	str	r2, [sp, #16]
 800ffe4:	9308      	str	r3, [sp, #32]
 800ffe6:	9d01      	ldr	r5, [sp, #4]
 800ffe8:	e004      	b.n	800fff4 <__gethex+0x9c>
 800ffea:	9b01      	ldr	r3, [sp, #4]
 800ffec:	3301      	adds	r3, #1
 800ffee:	9301      	str	r3, [sp, #4]
 800fff0:	e7ed      	b.n	800ffce <__gethex+0x76>
 800fff2:	3501      	adds	r5, #1
 800fff4:	7828      	ldrb	r0, [r5, #0]
 800fff6:	f7ff ff99 	bl	800ff2c <__hexdig_fun>
 800fffa:	1e07      	subs	r7, r0, #0
 800fffc:	d1f9      	bne.n	800fff2 <__gethex+0x9a>
 800fffe:	0028      	movs	r0, r5
 8010000:	9a03      	ldr	r2, [sp, #12]
 8010002:	9907      	ldr	r1, [sp, #28]
 8010004:	f001 fba4 	bl	8011750 <strncmp>
 8010008:	2800      	cmp	r0, #0
 801000a:	d10e      	bne.n	801002a <__gethex+0xd2>
 801000c:	2c00      	cmp	r4, #0
 801000e:	d107      	bne.n	8010020 <__gethex+0xc8>
 8010010:	9b03      	ldr	r3, [sp, #12]
 8010012:	18ed      	adds	r5, r5, r3
 8010014:	002c      	movs	r4, r5
 8010016:	7828      	ldrb	r0, [r5, #0]
 8010018:	f7ff ff88 	bl	800ff2c <__hexdig_fun>
 801001c:	2800      	cmp	r0, #0
 801001e:	d102      	bne.n	8010026 <__gethex+0xce>
 8010020:	1b64      	subs	r4, r4, r5
 8010022:	00a7      	lsls	r7, r4, #2
 8010024:	e003      	b.n	801002e <__gethex+0xd6>
 8010026:	3501      	adds	r5, #1
 8010028:	e7f5      	b.n	8010016 <__gethex+0xbe>
 801002a:	2c00      	cmp	r4, #0
 801002c:	d1f8      	bne.n	8010020 <__gethex+0xc8>
 801002e:	2220      	movs	r2, #32
 8010030:	782b      	ldrb	r3, [r5, #0]
 8010032:	002e      	movs	r6, r5
 8010034:	4393      	bics	r3, r2
 8010036:	2b50      	cmp	r3, #80	; 0x50
 8010038:	d11d      	bne.n	8010076 <__gethex+0x11e>
 801003a:	786b      	ldrb	r3, [r5, #1]
 801003c:	2b2b      	cmp	r3, #43	; 0x2b
 801003e:	d02c      	beq.n	801009a <__gethex+0x142>
 8010040:	2b2d      	cmp	r3, #45	; 0x2d
 8010042:	d02e      	beq.n	80100a2 <__gethex+0x14a>
 8010044:	2300      	movs	r3, #0
 8010046:	1c6e      	adds	r6, r5, #1
 8010048:	9306      	str	r3, [sp, #24]
 801004a:	7830      	ldrb	r0, [r6, #0]
 801004c:	f7ff ff6e 	bl	800ff2c <__hexdig_fun>
 8010050:	1e43      	subs	r3, r0, #1
 8010052:	b2db      	uxtb	r3, r3
 8010054:	2b18      	cmp	r3, #24
 8010056:	d82b      	bhi.n	80100b0 <__gethex+0x158>
 8010058:	3810      	subs	r0, #16
 801005a:	0004      	movs	r4, r0
 801005c:	7870      	ldrb	r0, [r6, #1]
 801005e:	f7ff ff65 	bl	800ff2c <__hexdig_fun>
 8010062:	1e43      	subs	r3, r0, #1
 8010064:	b2db      	uxtb	r3, r3
 8010066:	3601      	adds	r6, #1
 8010068:	2b18      	cmp	r3, #24
 801006a:	d91c      	bls.n	80100a6 <__gethex+0x14e>
 801006c:	9b06      	ldr	r3, [sp, #24]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d000      	beq.n	8010074 <__gethex+0x11c>
 8010072:	4264      	negs	r4, r4
 8010074:	193f      	adds	r7, r7, r4
 8010076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010078:	601e      	str	r6, [r3, #0]
 801007a:	9b04      	ldr	r3, [sp, #16]
 801007c:	2b00      	cmp	r3, #0
 801007e:	d019      	beq.n	80100b4 <__gethex+0x15c>
 8010080:	2600      	movs	r6, #0
 8010082:	9b08      	ldr	r3, [sp, #32]
 8010084:	42b3      	cmp	r3, r6
 8010086:	d100      	bne.n	801008a <__gethex+0x132>
 8010088:	3606      	adds	r6, #6
 801008a:	0030      	movs	r0, r6
 801008c:	b00d      	add	sp, #52	; 0x34
 801008e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010090:	2301      	movs	r3, #1
 8010092:	2700      	movs	r7, #0
 8010094:	9d01      	ldr	r5, [sp, #4]
 8010096:	9304      	str	r3, [sp, #16]
 8010098:	e7c9      	b.n	801002e <__gethex+0xd6>
 801009a:	2300      	movs	r3, #0
 801009c:	9306      	str	r3, [sp, #24]
 801009e:	1cae      	adds	r6, r5, #2
 80100a0:	e7d3      	b.n	801004a <__gethex+0xf2>
 80100a2:	2301      	movs	r3, #1
 80100a4:	e7fa      	b.n	801009c <__gethex+0x144>
 80100a6:	230a      	movs	r3, #10
 80100a8:	435c      	muls	r4, r3
 80100aa:	1824      	adds	r4, r4, r0
 80100ac:	3c10      	subs	r4, #16
 80100ae:	e7d5      	b.n	801005c <__gethex+0x104>
 80100b0:	002e      	movs	r6, r5
 80100b2:	e7e0      	b.n	8010076 <__gethex+0x11e>
 80100b4:	9b01      	ldr	r3, [sp, #4]
 80100b6:	9904      	ldr	r1, [sp, #16]
 80100b8:	1aeb      	subs	r3, r5, r3
 80100ba:	3b01      	subs	r3, #1
 80100bc:	2b07      	cmp	r3, #7
 80100be:	dc0a      	bgt.n	80100d6 <__gethex+0x17e>
 80100c0:	9805      	ldr	r0, [sp, #20]
 80100c2:	f000 fa65 	bl	8010590 <_Balloc>
 80100c6:	1e04      	subs	r4, r0, #0
 80100c8:	d108      	bne.n	80100dc <__gethex+0x184>
 80100ca:	0002      	movs	r2, r0
 80100cc:	21de      	movs	r1, #222	; 0xde
 80100ce:	4b64      	ldr	r3, [pc, #400]	; (8010260 <__gethex+0x308>)
 80100d0:	4864      	ldr	r0, [pc, #400]	; (8010264 <__gethex+0x30c>)
 80100d2:	f001 fb5d 	bl	8011790 <__assert_func>
 80100d6:	3101      	adds	r1, #1
 80100d8:	105b      	asrs	r3, r3, #1
 80100da:	e7ef      	b.n	80100bc <__gethex+0x164>
 80100dc:	0003      	movs	r3, r0
 80100de:	3314      	adds	r3, #20
 80100e0:	9304      	str	r3, [sp, #16]
 80100e2:	9309      	str	r3, [sp, #36]	; 0x24
 80100e4:	2300      	movs	r3, #0
 80100e6:	001e      	movs	r6, r3
 80100e8:	9306      	str	r3, [sp, #24]
 80100ea:	9b01      	ldr	r3, [sp, #4]
 80100ec:	42ab      	cmp	r3, r5
 80100ee:	d340      	bcc.n	8010172 <__gethex+0x21a>
 80100f0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80100f2:	9b04      	ldr	r3, [sp, #16]
 80100f4:	c540      	stmia	r5!, {r6}
 80100f6:	1aed      	subs	r5, r5, r3
 80100f8:	10ad      	asrs	r5, r5, #2
 80100fa:	0030      	movs	r0, r6
 80100fc:	6125      	str	r5, [r4, #16]
 80100fe:	f000 fb3f 	bl	8010780 <__hi0bits>
 8010102:	9b02      	ldr	r3, [sp, #8]
 8010104:	016d      	lsls	r5, r5, #5
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	1a2e      	subs	r6, r5, r0
 801010a:	9301      	str	r3, [sp, #4]
 801010c:	429e      	cmp	r6, r3
 801010e:	dd5a      	ble.n	80101c6 <__gethex+0x26e>
 8010110:	1af6      	subs	r6, r6, r3
 8010112:	0031      	movs	r1, r6
 8010114:	0020      	movs	r0, r4
 8010116:	f000 fefc 	bl	8010f12 <__any_on>
 801011a:	1e05      	subs	r5, r0, #0
 801011c:	d016      	beq.n	801014c <__gethex+0x1f4>
 801011e:	2501      	movs	r5, #1
 8010120:	211f      	movs	r1, #31
 8010122:	0028      	movs	r0, r5
 8010124:	1e73      	subs	r3, r6, #1
 8010126:	4019      	ands	r1, r3
 8010128:	4088      	lsls	r0, r1
 801012a:	0001      	movs	r1, r0
 801012c:	115a      	asrs	r2, r3, #5
 801012e:	9804      	ldr	r0, [sp, #16]
 8010130:	0092      	lsls	r2, r2, #2
 8010132:	5812      	ldr	r2, [r2, r0]
 8010134:	420a      	tst	r2, r1
 8010136:	d009      	beq.n	801014c <__gethex+0x1f4>
 8010138:	42ab      	cmp	r3, r5
 801013a:	dd06      	ble.n	801014a <__gethex+0x1f2>
 801013c:	0020      	movs	r0, r4
 801013e:	1eb1      	subs	r1, r6, #2
 8010140:	f000 fee7 	bl	8010f12 <__any_on>
 8010144:	3502      	adds	r5, #2
 8010146:	2800      	cmp	r0, #0
 8010148:	d100      	bne.n	801014c <__gethex+0x1f4>
 801014a:	2502      	movs	r5, #2
 801014c:	0031      	movs	r1, r6
 801014e:	0020      	movs	r0, r4
 8010150:	f7ff fe98 	bl	800fe84 <rshift>
 8010154:	19bf      	adds	r7, r7, r6
 8010156:	9b02      	ldr	r3, [sp, #8]
 8010158:	689b      	ldr	r3, [r3, #8]
 801015a:	9303      	str	r3, [sp, #12]
 801015c:	42bb      	cmp	r3, r7
 801015e:	da42      	bge.n	80101e6 <__gethex+0x28e>
 8010160:	0021      	movs	r1, r4
 8010162:	9805      	ldr	r0, [sp, #20]
 8010164:	f000 fa58 	bl	8010618 <_Bfree>
 8010168:	2300      	movs	r3, #0
 801016a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801016c:	26a3      	movs	r6, #163	; 0xa3
 801016e:	6013      	str	r3, [r2, #0]
 8010170:	e78b      	b.n	801008a <__gethex+0x132>
 8010172:	1e6b      	subs	r3, r5, #1
 8010174:	9308      	str	r3, [sp, #32]
 8010176:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010178:	781b      	ldrb	r3, [r3, #0]
 801017a:	4293      	cmp	r3, r2
 801017c:	d014      	beq.n	80101a8 <__gethex+0x250>
 801017e:	9b06      	ldr	r3, [sp, #24]
 8010180:	2b20      	cmp	r3, #32
 8010182:	d104      	bne.n	801018e <__gethex+0x236>
 8010184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010186:	c340      	stmia	r3!, {r6}
 8010188:	2600      	movs	r6, #0
 801018a:	9309      	str	r3, [sp, #36]	; 0x24
 801018c:	9606      	str	r6, [sp, #24]
 801018e:	9b08      	ldr	r3, [sp, #32]
 8010190:	7818      	ldrb	r0, [r3, #0]
 8010192:	f7ff fecb 	bl	800ff2c <__hexdig_fun>
 8010196:	230f      	movs	r3, #15
 8010198:	4018      	ands	r0, r3
 801019a:	9b06      	ldr	r3, [sp, #24]
 801019c:	9d08      	ldr	r5, [sp, #32]
 801019e:	4098      	lsls	r0, r3
 80101a0:	3304      	adds	r3, #4
 80101a2:	4306      	orrs	r6, r0
 80101a4:	9306      	str	r3, [sp, #24]
 80101a6:	e7a0      	b.n	80100ea <__gethex+0x192>
 80101a8:	2301      	movs	r3, #1
 80101aa:	9a03      	ldr	r2, [sp, #12]
 80101ac:	1a9d      	subs	r5, r3, r2
 80101ae:	9b08      	ldr	r3, [sp, #32]
 80101b0:	195d      	adds	r5, r3, r5
 80101b2:	9b01      	ldr	r3, [sp, #4]
 80101b4:	429d      	cmp	r5, r3
 80101b6:	d3e2      	bcc.n	801017e <__gethex+0x226>
 80101b8:	0028      	movs	r0, r5
 80101ba:	9907      	ldr	r1, [sp, #28]
 80101bc:	f001 fac8 	bl	8011750 <strncmp>
 80101c0:	2800      	cmp	r0, #0
 80101c2:	d1dc      	bne.n	801017e <__gethex+0x226>
 80101c4:	e791      	b.n	80100ea <__gethex+0x192>
 80101c6:	9b01      	ldr	r3, [sp, #4]
 80101c8:	2500      	movs	r5, #0
 80101ca:	429e      	cmp	r6, r3
 80101cc:	dac3      	bge.n	8010156 <__gethex+0x1fe>
 80101ce:	1b9e      	subs	r6, r3, r6
 80101d0:	0021      	movs	r1, r4
 80101d2:	0032      	movs	r2, r6
 80101d4:	9805      	ldr	r0, [sp, #20]
 80101d6:	f000 fc3d 	bl	8010a54 <__lshift>
 80101da:	0003      	movs	r3, r0
 80101dc:	3314      	adds	r3, #20
 80101de:	0004      	movs	r4, r0
 80101e0:	1bbf      	subs	r7, r7, r6
 80101e2:	9304      	str	r3, [sp, #16]
 80101e4:	e7b7      	b.n	8010156 <__gethex+0x1fe>
 80101e6:	9b02      	ldr	r3, [sp, #8]
 80101e8:	685e      	ldr	r6, [r3, #4]
 80101ea:	42be      	cmp	r6, r7
 80101ec:	dd71      	ble.n	80102d2 <__gethex+0x37a>
 80101ee:	9b01      	ldr	r3, [sp, #4]
 80101f0:	1bf6      	subs	r6, r6, r7
 80101f2:	42b3      	cmp	r3, r6
 80101f4:	dc38      	bgt.n	8010268 <__gethex+0x310>
 80101f6:	9b02      	ldr	r3, [sp, #8]
 80101f8:	68db      	ldr	r3, [r3, #12]
 80101fa:	2b02      	cmp	r3, #2
 80101fc:	d026      	beq.n	801024c <__gethex+0x2f4>
 80101fe:	2b03      	cmp	r3, #3
 8010200:	d028      	beq.n	8010254 <__gethex+0x2fc>
 8010202:	2b01      	cmp	r3, #1
 8010204:	d119      	bne.n	801023a <__gethex+0x2e2>
 8010206:	9b01      	ldr	r3, [sp, #4]
 8010208:	42b3      	cmp	r3, r6
 801020a:	d116      	bne.n	801023a <__gethex+0x2e2>
 801020c:	2b01      	cmp	r3, #1
 801020e:	d10d      	bne.n	801022c <__gethex+0x2d4>
 8010210:	9b02      	ldr	r3, [sp, #8]
 8010212:	2662      	movs	r6, #98	; 0x62
 8010214:	685b      	ldr	r3, [r3, #4]
 8010216:	9301      	str	r3, [sp, #4]
 8010218:	9a01      	ldr	r2, [sp, #4]
 801021a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801021c:	601a      	str	r2, [r3, #0]
 801021e:	2301      	movs	r3, #1
 8010220:	9a04      	ldr	r2, [sp, #16]
 8010222:	6123      	str	r3, [r4, #16]
 8010224:	6013      	str	r3, [r2, #0]
 8010226:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010228:	601c      	str	r4, [r3, #0]
 801022a:	e72e      	b.n	801008a <__gethex+0x132>
 801022c:	9901      	ldr	r1, [sp, #4]
 801022e:	0020      	movs	r0, r4
 8010230:	3901      	subs	r1, #1
 8010232:	f000 fe6e 	bl	8010f12 <__any_on>
 8010236:	2800      	cmp	r0, #0
 8010238:	d1ea      	bne.n	8010210 <__gethex+0x2b8>
 801023a:	0021      	movs	r1, r4
 801023c:	9805      	ldr	r0, [sp, #20]
 801023e:	f000 f9eb 	bl	8010618 <_Bfree>
 8010242:	2300      	movs	r3, #0
 8010244:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010246:	2650      	movs	r6, #80	; 0x50
 8010248:	6013      	str	r3, [r2, #0]
 801024a:	e71e      	b.n	801008a <__gethex+0x132>
 801024c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801024e:	2b00      	cmp	r3, #0
 8010250:	d1f3      	bne.n	801023a <__gethex+0x2e2>
 8010252:	e7dd      	b.n	8010210 <__gethex+0x2b8>
 8010254:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010256:	2b00      	cmp	r3, #0
 8010258:	d1da      	bne.n	8010210 <__gethex+0x2b8>
 801025a:	e7ee      	b.n	801023a <__gethex+0x2e2>
 801025c:	08013890 	.word	0x08013890
 8010260:	08013819 	.word	0x08013819
 8010264:	0801382a 	.word	0x0801382a
 8010268:	1e77      	subs	r7, r6, #1
 801026a:	2d00      	cmp	r5, #0
 801026c:	d12f      	bne.n	80102ce <__gethex+0x376>
 801026e:	2f00      	cmp	r7, #0
 8010270:	d004      	beq.n	801027c <__gethex+0x324>
 8010272:	0039      	movs	r1, r7
 8010274:	0020      	movs	r0, r4
 8010276:	f000 fe4c 	bl	8010f12 <__any_on>
 801027a:	0005      	movs	r5, r0
 801027c:	231f      	movs	r3, #31
 801027e:	117a      	asrs	r2, r7, #5
 8010280:	401f      	ands	r7, r3
 8010282:	3b1e      	subs	r3, #30
 8010284:	40bb      	lsls	r3, r7
 8010286:	9904      	ldr	r1, [sp, #16]
 8010288:	0092      	lsls	r2, r2, #2
 801028a:	5852      	ldr	r2, [r2, r1]
 801028c:	421a      	tst	r2, r3
 801028e:	d001      	beq.n	8010294 <__gethex+0x33c>
 8010290:	2302      	movs	r3, #2
 8010292:	431d      	orrs	r5, r3
 8010294:	9b01      	ldr	r3, [sp, #4]
 8010296:	0031      	movs	r1, r6
 8010298:	1b9b      	subs	r3, r3, r6
 801029a:	2602      	movs	r6, #2
 801029c:	0020      	movs	r0, r4
 801029e:	9301      	str	r3, [sp, #4]
 80102a0:	f7ff fdf0 	bl	800fe84 <rshift>
 80102a4:	9b02      	ldr	r3, [sp, #8]
 80102a6:	685f      	ldr	r7, [r3, #4]
 80102a8:	2d00      	cmp	r5, #0
 80102aa:	d041      	beq.n	8010330 <__gethex+0x3d8>
 80102ac:	9b02      	ldr	r3, [sp, #8]
 80102ae:	68db      	ldr	r3, [r3, #12]
 80102b0:	2b02      	cmp	r3, #2
 80102b2:	d010      	beq.n	80102d6 <__gethex+0x37e>
 80102b4:	2b03      	cmp	r3, #3
 80102b6:	d012      	beq.n	80102de <__gethex+0x386>
 80102b8:	2b01      	cmp	r3, #1
 80102ba:	d106      	bne.n	80102ca <__gethex+0x372>
 80102bc:	07aa      	lsls	r2, r5, #30
 80102be:	d504      	bpl.n	80102ca <__gethex+0x372>
 80102c0:	9a04      	ldr	r2, [sp, #16]
 80102c2:	6810      	ldr	r0, [r2, #0]
 80102c4:	4305      	orrs	r5, r0
 80102c6:	421d      	tst	r5, r3
 80102c8:	d10c      	bne.n	80102e4 <__gethex+0x38c>
 80102ca:	2310      	movs	r3, #16
 80102cc:	e02f      	b.n	801032e <__gethex+0x3d6>
 80102ce:	2501      	movs	r5, #1
 80102d0:	e7d4      	b.n	801027c <__gethex+0x324>
 80102d2:	2601      	movs	r6, #1
 80102d4:	e7e8      	b.n	80102a8 <__gethex+0x350>
 80102d6:	2301      	movs	r3, #1
 80102d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80102da:	1a9b      	subs	r3, r3, r2
 80102dc:	9313      	str	r3, [sp, #76]	; 0x4c
 80102de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d0f2      	beq.n	80102ca <__gethex+0x372>
 80102e4:	6923      	ldr	r3, [r4, #16]
 80102e6:	2000      	movs	r0, #0
 80102e8:	9303      	str	r3, [sp, #12]
 80102ea:	009b      	lsls	r3, r3, #2
 80102ec:	9304      	str	r3, [sp, #16]
 80102ee:	0023      	movs	r3, r4
 80102f0:	9a04      	ldr	r2, [sp, #16]
 80102f2:	3314      	adds	r3, #20
 80102f4:	1899      	adds	r1, r3, r2
 80102f6:	681a      	ldr	r2, [r3, #0]
 80102f8:	1c55      	adds	r5, r2, #1
 80102fa:	d01e      	beq.n	801033a <__gethex+0x3e2>
 80102fc:	3201      	adds	r2, #1
 80102fe:	601a      	str	r2, [r3, #0]
 8010300:	0023      	movs	r3, r4
 8010302:	3314      	adds	r3, #20
 8010304:	2e02      	cmp	r6, #2
 8010306:	d140      	bne.n	801038a <__gethex+0x432>
 8010308:	9a02      	ldr	r2, [sp, #8]
 801030a:	9901      	ldr	r1, [sp, #4]
 801030c:	6812      	ldr	r2, [r2, #0]
 801030e:	3a01      	subs	r2, #1
 8010310:	428a      	cmp	r2, r1
 8010312:	d10b      	bne.n	801032c <__gethex+0x3d4>
 8010314:	114a      	asrs	r2, r1, #5
 8010316:	211f      	movs	r1, #31
 8010318:	9801      	ldr	r0, [sp, #4]
 801031a:	0092      	lsls	r2, r2, #2
 801031c:	4001      	ands	r1, r0
 801031e:	2001      	movs	r0, #1
 8010320:	0005      	movs	r5, r0
 8010322:	408d      	lsls	r5, r1
 8010324:	58d3      	ldr	r3, [r2, r3]
 8010326:	422b      	tst	r3, r5
 8010328:	d000      	beq.n	801032c <__gethex+0x3d4>
 801032a:	2601      	movs	r6, #1
 801032c:	2320      	movs	r3, #32
 801032e:	431e      	orrs	r6, r3
 8010330:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010332:	601c      	str	r4, [r3, #0]
 8010334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010336:	601f      	str	r7, [r3, #0]
 8010338:	e6a7      	b.n	801008a <__gethex+0x132>
 801033a:	c301      	stmia	r3!, {r0}
 801033c:	4299      	cmp	r1, r3
 801033e:	d8da      	bhi.n	80102f6 <__gethex+0x39e>
 8010340:	9b03      	ldr	r3, [sp, #12]
 8010342:	68a2      	ldr	r2, [r4, #8]
 8010344:	4293      	cmp	r3, r2
 8010346:	db17      	blt.n	8010378 <__gethex+0x420>
 8010348:	6863      	ldr	r3, [r4, #4]
 801034a:	9805      	ldr	r0, [sp, #20]
 801034c:	1c59      	adds	r1, r3, #1
 801034e:	f000 f91f 	bl	8010590 <_Balloc>
 8010352:	1e05      	subs	r5, r0, #0
 8010354:	d103      	bne.n	801035e <__gethex+0x406>
 8010356:	0002      	movs	r2, r0
 8010358:	2184      	movs	r1, #132	; 0x84
 801035a:	4b1c      	ldr	r3, [pc, #112]	; (80103cc <__gethex+0x474>)
 801035c:	e6b8      	b.n	80100d0 <__gethex+0x178>
 801035e:	0021      	movs	r1, r4
 8010360:	6923      	ldr	r3, [r4, #16]
 8010362:	310c      	adds	r1, #12
 8010364:	1c9a      	adds	r2, r3, #2
 8010366:	0092      	lsls	r2, r2, #2
 8010368:	300c      	adds	r0, #12
 801036a:	f7fe fca5 	bl	800ecb8 <memcpy>
 801036e:	0021      	movs	r1, r4
 8010370:	9805      	ldr	r0, [sp, #20]
 8010372:	f000 f951 	bl	8010618 <_Bfree>
 8010376:	002c      	movs	r4, r5
 8010378:	6923      	ldr	r3, [r4, #16]
 801037a:	1c5a      	adds	r2, r3, #1
 801037c:	6122      	str	r2, [r4, #16]
 801037e:	2201      	movs	r2, #1
 8010380:	3304      	adds	r3, #4
 8010382:	009b      	lsls	r3, r3, #2
 8010384:	18e3      	adds	r3, r4, r3
 8010386:	605a      	str	r2, [r3, #4]
 8010388:	e7ba      	b.n	8010300 <__gethex+0x3a8>
 801038a:	6922      	ldr	r2, [r4, #16]
 801038c:	9903      	ldr	r1, [sp, #12]
 801038e:	428a      	cmp	r2, r1
 8010390:	dd09      	ble.n	80103a6 <__gethex+0x44e>
 8010392:	2101      	movs	r1, #1
 8010394:	0020      	movs	r0, r4
 8010396:	f7ff fd75 	bl	800fe84 <rshift>
 801039a:	9b02      	ldr	r3, [sp, #8]
 801039c:	3701      	adds	r7, #1
 801039e:	689b      	ldr	r3, [r3, #8]
 80103a0:	42bb      	cmp	r3, r7
 80103a2:	dac2      	bge.n	801032a <__gethex+0x3d2>
 80103a4:	e6dc      	b.n	8010160 <__gethex+0x208>
 80103a6:	221f      	movs	r2, #31
 80103a8:	9d01      	ldr	r5, [sp, #4]
 80103aa:	9901      	ldr	r1, [sp, #4]
 80103ac:	2601      	movs	r6, #1
 80103ae:	4015      	ands	r5, r2
 80103b0:	4211      	tst	r1, r2
 80103b2:	d0bb      	beq.n	801032c <__gethex+0x3d4>
 80103b4:	9a04      	ldr	r2, [sp, #16]
 80103b6:	189b      	adds	r3, r3, r2
 80103b8:	3b04      	subs	r3, #4
 80103ba:	6818      	ldr	r0, [r3, #0]
 80103bc:	f000 f9e0 	bl	8010780 <__hi0bits>
 80103c0:	2320      	movs	r3, #32
 80103c2:	1b5d      	subs	r5, r3, r5
 80103c4:	42a8      	cmp	r0, r5
 80103c6:	dbe4      	blt.n	8010392 <__gethex+0x43a>
 80103c8:	e7b0      	b.n	801032c <__gethex+0x3d4>
 80103ca:	46c0      	nop			; (mov r8, r8)
 80103cc:	08013819 	.word	0x08013819

080103d0 <L_shift>:
 80103d0:	2308      	movs	r3, #8
 80103d2:	b570      	push	{r4, r5, r6, lr}
 80103d4:	2520      	movs	r5, #32
 80103d6:	1a9a      	subs	r2, r3, r2
 80103d8:	0092      	lsls	r2, r2, #2
 80103da:	1aad      	subs	r5, r5, r2
 80103dc:	6843      	ldr	r3, [r0, #4]
 80103de:	6806      	ldr	r6, [r0, #0]
 80103e0:	001c      	movs	r4, r3
 80103e2:	40ac      	lsls	r4, r5
 80103e4:	40d3      	lsrs	r3, r2
 80103e6:	4334      	orrs	r4, r6
 80103e8:	6004      	str	r4, [r0, #0]
 80103ea:	6043      	str	r3, [r0, #4]
 80103ec:	3004      	adds	r0, #4
 80103ee:	4288      	cmp	r0, r1
 80103f0:	d3f4      	bcc.n	80103dc <L_shift+0xc>
 80103f2:	bd70      	pop	{r4, r5, r6, pc}

080103f4 <__match>:
 80103f4:	b530      	push	{r4, r5, lr}
 80103f6:	6803      	ldr	r3, [r0, #0]
 80103f8:	780c      	ldrb	r4, [r1, #0]
 80103fa:	3301      	adds	r3, #1
 80103fc:	2c00      	cmp	r4, #0
 80103fe:	d102      	bne.n	8010406 <__match+0x12>
 8010400:	6003      	str	r3, [r0, #0]
 8010402:	2001      	movs	r0, #1
 8010404:	bd30      	pop	{r4, r5, pc}
 8010406:	781a      	ldrb	r2, [r3, #0]
 8010408:	0015      	movs	r5, r2
 801040a:	3d41      	subs	r5, #65	; 0x41
 801040c:	2d19      	cmp	r5, #25
 801040e:	d800      	bhi.n	8010412 <__match+0x1e>
 8010410:	3220      	adds	r2, #32
 8010412:	3101      	adds	r1, #1
 8010414:	42a2      	cmp	r2, r4
 8010416:	d0ef      	beq.n	80103f8 <__match+0x4>
 8010418:	2000      	movs	r0, #0
 801041a:	e7f3      	b.n	8010404 <__match+0x10>

0801041c <__hexnan>:
 801041c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801041e:	680b      	ldr	r3, [r1, #0]
 8010420:	b08b      	sub	sp, #44	; 0x2c
 8010422:	9201      	str	r2, [sp, #4]
 8010424:	9901      	ldr	r1, [sp, #4]
 8010426:	115a      	asrs	r2, r3, #5
 8010428:	0092      	lsls	r2, r2, #2
 801042a:	188a      	adds	r2, r1, r2
 801042c:	9202      	str	r2, [sp, #8]
 801042e:	0019      	movs	r1, r3
 8010430:	221f      	movs	r2, #31
 8010432:	4011      	ands	r1, r2
 8010434:	9008      	str	r0, [sp, #32]
 8010436:	9106      	str	r1, [sp, #24]
 8010438:	4213      	tst	r3, r2
 801043a:	d002      	beq.n	8010442 <__hexnan+0x26>
 801043c:	9b02      	ldr	r3, [sp, #8]
 801043e:	3304      	adds	r3, #4
 8010440:	9302      	str	r3, [sp, #8]
 8010442:	9b02      	ldr	r3, [sp, #8]
 8010444:	2500      	movs	r5, #0
 8010446:	1f1e      	subs	r6, r3, #4
 8010448:	0037      	movs	r7, r6
 801044a:	0034      	movs	r4, r6
 801044c:	9b08      	ldr	r3, [sp, #32]
 801044e:	6035      	str	r5, [r6, #0]
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	9507      	str	r5, [sp, #28]
 8010454:	9305      	str	r3, [sp, #20]
 8010456:	9503      	str	r5, [sp, #12]
 8010458:	9b05      	ldr	r3, [sp, #20]
 801045a:	3301      	adds	r3, #1
 801045c:	9309      	str	r3, [sp, #36]	; 0x24
 801045e:	9b05      	ldr	r3, [sp, #20]
 8010460:	785b      	ldrb	r3, [r3, #1]
 8010462:	9304      	str	r3, [sp, #16]
 8010464:	2b00      	cmp	r3, #0
 8010466:	d028      	beq.n	80104ba <__hexnan+0x9e>
 8010468:	9804      	ldr	r0, [sp, #16]
 801046a:	f7ff fd5f 	bl	800ff2c <__hexdig_fun>
 801046e:	2800      	cmp	r0, #0
 8010470:	d154      	bne.n	801051c <__hexnan+0x100>
 8010472:	9b04      	ldr	r3, [sp, #16]
 8010474:	2b20      	cmp	r3, #32
 8010476:	d819      	bhi.n	80104ac <__hexnan+0x90>
 8010478:	9b03      	ldr	r3, [sp, #12]
 801047a:	9a07      	ldr	r2, [sp, #28]
 801047c:	4293      	cmp	r3, r2
 801047e:	dd12      	ble.n	80104a6 <__hexnan+0x8a>
 8010480:	42bc      	cmp	r4, r7
 8010482:	d206      	bcs.n	8010492 <__hexnan+0x76>
 8010484:	2d07      	cmp	r5, #7
 8010486:	dc04      	bgt.n	8010492 <__hexnan+0x76>
 8010488:	002a      	movs	r2, r5
 801048a:	0039      	movs	r1, r7
 801048c:	0020      	movs	r0, r4
 801048e:	f7ff ff9f 	bl	80103d0 <L_shift>
 8010492:	9b01      	ldr	r3, [sp, #4]
 8010494:	2508      	movs	r5, #8
 8010496:	429c      	cmp	r4, r3
 8010498:	d905      	bls.n	80104a6 <__hexnan+0x8a>
 801049a:	1f27      	subs	r7, r4, #4
 801049c:	2500      	movs	r5, #0
 801049e:	003c      	movs	r4, r7
 80104a0:	9b03      	ldr	r3, [sp, #12]
 80104a2:	603d      	str	r5, [r7, #0]
 80104a4:	9307      	str	r3, [sp, #28]
 80104a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104a8:	9305      	str	r3, [sp, #20]
 80104aa:	e7d5      	b.n	8010458 <__hexnan+0x3c>
 80104ac:	9b04      	ldr	r3, [sp, #16]
 80104ae:	2b29      	cmp	r3, #41	; 0x29
 80104b0:	d159      	bne.n	8010566 <__hexnan+0x14a>
 80104b2:	9b05      	ldr	r3, [sp, #20]
 80104b4:	9a08      	ldr	r2, [sp, #32]
 80104b6:	3302      	adds	r3, #2
 80104b8:	6013      	str	r3, [r2, #0]
 80104ba:	9b03      	ldr	r3, [sp, #12]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d052      	beq.n	8010566 <__hexnan+0x14a>
 80104c0:	42bc      	cmp	r4, r7
 80104c2:	d206      	bcs.n	80104d2 <__hexnan+0xb6>
 80104c4:	2d07      	cmp	r5, #7
 80104c6:	dc04      	bgt.n	80104d2 <__hexnan+0xb6>
 80104c8:	002a      	movs	r2, r5
 80104ca:	0039      	movs	r1, r7
 80104cc:	0020      	movs	r0, r4
 80104ce:	f7ff ff7f 	bl	80103d0 <L_shift>
 80104d2:	9b01      	ldr	r3, [sp, #4]
 80104d4:	429c      	cmp	r4, r3
 80104d6:	d935      	bls.n	8010544 <__hexnan+0x128>
 80104d8:	001a      	movs	r2, r3
 80104da:	0023      	movs	r3, r4
 80104dc:	cb02      	ldmia	r3!, {r1}
 80104de:	c202      	stmia	r2!, {r1}
 80104e0:	429e      	cmp	r6, r3
 80104e2:	d2fb      	bcs.n	80104dc <__hexnan+0xc0>
 80104e4:	9b02      	ldr	r3, [sp, #8]
 80104e6:	1c61      	adds	r1, r4, #1
 80104e8:	1eda      	subs	r2, r3, #3
 80104ea:	2304      	movs	r3, #4
 80104ec:	4291      	cmp	r1, r2
 80104ee:	d805      	bhi.n	80104fc <__hexnan+0xe0>
 80104f0:	9b02      	ldr	r3, [sp, #8]
 80104f2:	3b04      	subs	r3, #4
 80104f4:	1b1b      	subs	r3, r3, r4
 80104f6:	089b      	lsrs	r3, r3, #2
 80104f8:	3301      	adds	r3, #1
 80104fa:	009b      	lsls	r3, r3, #2
 80104fc:	9a01      	ldr	r2, [sp, #4]
 80104fe:	18d3      	adds	r3, r2, r3
 8010500:	2200      	movs	r2, #0
 8010502:	c304      	stmia	r3!, {r2}
 8010504:	429e      	cmp	r6, r3
 8010506:	d2fc      	bcs.n	8010502 <__hexnan+0xe6>
 8010508:	6833      	ldr	r3, [r6, #0]
 801050a:	2b00      	cmp	r3, #0
 801050c:	d104      	bne.n	8010518 <__hexnan+0xfc>
 801050e:	9b01      	ldr	r3, [sp, #4]
 8010510:	429e      	cmp	r6, r3
 8010512:	d126      	bne.n	8010562 <__hexnan+0x146>
 8010514:	2301      	movs	r3, #1
 8010516:	6033      	str	r3, [r6, #0]
 8010518:	2005      	movs	r0, #5
 801051a:	e025      	b.n	8010568 <__hexnan+0x14c>
 801051c:	9b03      	ldr	r3, [sp, #12]
 801051e:	3501      	adds	r5, #1
 8010520:	3301      	adds	r3, #1
 8010522:	9303      	str	r3, [sp, #12]
 8010524:	2d08      	cmp	r5, #8
 8010526:	dd06      	ble.n	8010536 <__hexnan+0x11a>
 8010528:	9b01      	ldr	r3, [sp, #4]
 801052a:	429c      	cmp	r4, r3
 801052c:	d9bb      	bls.n	80104a6 <__hexnan+0x8a>
 801052e:	2300      	movs	r3, #0
 8010530:	2501      	movs	r5, #1
 8010532:	3c04      	subs	r4, #4
 8010534:	6023      	str	r3, [r4, #0]
 8010536:	220f      	movs	r2, #15
 8010538:	6823      	ldr	r3, [r4, #0]
 801053a:	4010      	ands	r0, r2
 801053c:	011b      	lsls	r3, r3, #4
 801053e:	4318      	orrs	r0, r3
 8010540:	6020      	str	r0, [r4, #0]
 8010542:	e7b0      	b.n	80104a6 <__hexnan+0x8a>
 8010544:	9b06      	ldr	r3, [sp, #24]
 8010546:	2b00      	cmp	r3, #0
 8010548:	d0de      	beq.n	8010508 <__hexnan+0xec>
 801054a:	2120      	movs	r1, #32
 801054c:	9a06      	ldr	r2, [sp, #24]
 801054e:	9b02      	ldr	r3, [sp, #8]
 8010550:	1a89      	subs	r1, r1, r2
 8010552:	2201      	movs	r2, #1
 8010554:	4252      	negs	r2, r2
 8010556:	40ca      	lsrs	r2, r1
 8010558:	3b04      	subs	r3, #4
 801055a:	6819      	ldr	r1, [r3, #0]
 801055c:	400a      	ands	r2, r1
 801055e:	601a      	str	r2, [r3, #0]
 8010560:	e7d2      	b.n	8010508 <__hexnan+0xec>
 8010562:	3e04      	subs	r6, #4
 8010564:	e7d0      	b.n	8010508 <__hexnan+0xec>
 8010566:	2004      	movs	r0, #4
 8010568:	b00b      	add	sp, #44	; 0x2c
 801056a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801056c <__ascii_mbtowc>:
 801056c:	b082      	sub	sp, #8
 801056e:	2900      	cmp	r1, #0
 8010570:	d100      	bne.n	8010574 <__ascii_mbtowc+0x8>
 8010572:	a901      	add	r1, sp, #4
 8010574:	1e10      	subs	r0, r2, #0
 8010576:	d006      	beq.n	8010586 <__ascii_mbtowc+0x1a>
 8010578:	2b00      	cmp	r3, #0
 801057a:	d006      	beq.n	801058a <__ascii_mbtowc+0x1e>
 801057c:	7813      	ldrb	r3, [r2, #0]
 801057e:	600b      	str	r3, [r1, #0]
 8010580:	7810      	ldrb	r0, [r2, #0]
 8010582:	1e43      	subs	r3, r0, #1
 8010584:	4198      	sbcs	r0, r3
 8010586:	b002      	add	sp, #8
 8010588:	4770      	bx	lr
 801058a:	2002      	movs	r0, #2
 801058c:	4240      	negs	r0, r0
 801058e:	e7fa      	b.n	8010586 <__ascii_mbtowc+0x1a>

08010590 <_Balloc>:
 8010590:	b570      	push	{r4, r5, r6, lr}
 8010592:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010594:	0006      	movs	r6, r0
 8010596:	000c      	movs	r4, r1
 8010598:	2d00      	cmp	r5, #0
 801059a:	d10e      	bne.n	80105ba <_Balloc+0x2a>
 801059c:	2010      	movs	r0, #16
 801059e:	f001 ffcb 	bl	8012538 <malloc>
 80105a2:	1e02      	subs	r2, r0, #0
 80105a4:	6270      	str	r0, [r6, #36]	; 0x24
 80105a6:	d104      	bne.n	80105b2 <_Balloc+0x22>
 80105a8:	2166      	movs	r1, #102	; 0x66
 80105aa:	4b19      	ldr	r3, [pc, #100]	; (8010610 <_Balloc+0x80>)
 80105ac:	4819      	ldr	r0, [pc, #100]	; (8010614 <_Balloc+0x84>)
 80105ae:	f001 f8ef 	bl	8011790 <__assert_func>
 80105b2:	6045      	str	r5, [r0, #4]
 80105b4:	6085      	str	r5, [r0, #8]
 80105b6:	6005      	str	r5, [r0, #0]
 80105b8:	60c5      	str	r5, [r0, #12]
 80105ba:	6a75      	ldr	r5, [r6, #36]	; 0x24
 80105bc:	68eb      	ldr	r3, [r5, #12]
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d013      	beq.n	80105ea <_Balloc+0x5a>
 80105c2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80105c4:	00a2      	lsls	r2, r4, #2
 80105c6:	68db      	ldr	r3, [r3, #12]
 80105c8:	189b      	adds	r3, r3, r2
 80105ca:	6818      	ldr	r0, [r3, #0]
 80105cc:	2800      	cmp	r0, #0
 80105ce:	d118      	bne.n	8010602 <_Balloc+0x72>
 80105d0:	2101      	movs	r1, #1
 80105d2:	000d      	movs	r5, r1
 80105d4:	40a5      	lsls	r5, r4
 80105d6:	1d6a      	adds	r2, r5, #5
 80105d8:	0030      	movs	r0, r6
 80105da:	0092      	lsls	r2, r2, #2
 80105dc:	f000 fcbc 	bl	8010f58 <_calloc_r>
 80105e0:	2800      	cmp	r0, #0
 80105e2:	d00c      	beq.n	80105fe <_Balloc+0x6e>
 80105e4:	6044      	str	r4, [r0, #4]
 80105e6:	6085      	str	r5, [r0, #8]
 80105e8:	e00d      	b.n	8010606 <_Balloc+0x76>
 80105ea:	2221      	movs	r2, #33	; 0x21
 80105ec:	2104      	movs	r1, #4
 80105ee:	0030      	movs	r0, r6
 80105f0:	f000 fcb2 	bl	8010f58 <_calloc_r>
 80105f4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80105f6:	60e8      	str	r0, [r5, #12]
 80105f8:	68db      	ldr	r3, [r3, #12]
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d1e1      	bne.n	80105c2 <_Balloc+0x32>
 80105fe:	2000      	movs	r0, #0
 8010600:	bd70      	pop	{r4, r5, r6, pc}
 8010602:	6802      	ldr	r2, [r0, #0]
 8010604:	601a      	str	r2, [r3, #0]
 8010606:	2300      	movs	r3, #0
 8010608:	6103      	str	r3, [r0, #16]
 801060a:	60c3      	str	r3, [r0, #12]
 801060c:	e7f8      	b.n	8010600 <_Balloc+0x70>
 801060e:	46c0      	nop			; (mov r8, r8)
 8010610:	080138a4 	.word	0x080138a4
 8010614:	080138bb 	.word	0x080138bb

08010618 <_Bfree>:
 8010618:	b570      	push	{r4, r5, r6, lr}
 801061a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801061c:	0005      	movs	r5, r0
 801061e:	000c      	movs	r4, r1
 8010620:	2e00      	cmp	r6, #0
 8010622:	d10e      	bne.n	8010642 <_Bfree+0x2a>
 8010624:	2010      	movs	r0, #16
 8010626:	f001 ff87 	bl	8012538 <malloc>
 801062a:	1e02      	subs	r2, r0, #0
 801062c:	6268      	str	r0, [r5, #36]	; 0x24
 801062e:	d104      	bne.n	801063a <_Bfree+0x22>
 8010630:	218a      	movs	r1, #138	; 0x8a
 8010632:	4b09      	ldr	r3, [pc, #36]	; (8010658 <_Bfree+0x40>)
 8010634:	4809      	ldr	r0, [pc, #36]	; (801065c <_Bfree+0x44>)
 8010636:	f001 f8ab 	bl	8011790 <__assert_func>
 801063a:	6046      	str	r6, [r0, #4]
 801063c:	6086      	str	r6, [r0, #8]
 801063e:	6006      	str	r6, [r0, #0]
 8010640:	60c6      	str	r6, [r0, #12]
 8010642:	2c00      	cmp	r4, #0
 8010644:	d007      	beq.n	8010656 <_Bfree+0x3e>
 8010646:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010648:	6862      	ldr	r2, [r4, #4]
 801064a:	68db      	ldr	r3, [r3, #12]
 801064c:	0092      	lsls	r2, r2, #2
 801064e:	189b      	adds	r3, r3, r2
 8010650:	681a      	ldr	r2, [r3, #0]
 8010652:	6022      	str	r2, [r4, #0]
 8010654:	601c      	str	r4, [r3, #0]
 8010656:	bd70      	pop	{r4, r5, r6, pc}
 8010658:	080138a4 	.word	0x080138a4
 801065c:	080138bb 	.word	0x080138bb

08010660 <__multadd>:
 8010660:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010662:	000e      	movs	r6, r1
 8010664:	9001      	str	r0, [sp, #4]
 8010666:	000c      	movs	r4, r1
 8010668:	001d      	movs	r5, r3
 801066a:	2000      	movs	r0, #0
 801066c:	690f      	ldr	r7, [r1, #16]
 801066e:	3614      	adds	r6, #20
 8010670:	6833      	ldr	r3, [r6, #0]
 8010672:	3001      	adds	r0, #1
 8010674:	b299      	uxth	r1, r3
 8010676:	4351      	muls	r1, r2
 8010678:	0c1b      	lsrs	r3, r3, #16
 801067a:	4353      	muls	r3, r2
 801067c:	1949      	adds	r1, r1, r5
 801067e:	0c0d      	lsrs	r5, r1, #16
 8010680:	195b      	adds	r3, r3, r5
 8010682:	0c1d      	lsrs	r5, r3, #16
 8010684:	b289      	uxth	r1, r1
 8010686:	041b      	lsls	r3, r3, #16
 8010688:	185b      	adds	r3, r3, r1
 801068a:	c608      	stmia	r6!, {r3}
 801068c:	4287      	cmp	r7, r0
 801068e:	dcef      	bgt.n	8010670 <__multadd+0x10>
 8010690:	2d00      	cmp	r5, #0
 8010692:	d022      	beq.n	80106da <__multadd+0x7a>
 8010694:	68a3      	ldr	r3, [r4, #8]
 8010696:	42bb      	cmp	r3, r7
 8010698:	dc19      	bgt.n	80106ce <__multadd+0x6e>
 801069a:	6863      	ldr	r3, [r4, #4]
 801069c:	9801      	ldr	r0, [sp, #4]
 801069e:	1c59      	adds	r1, r3, #1
 80106a0:	f7ff ff76 	bl	8010590 <_Balloc>
 80106a4:	1e06      	subs	r6, r0, #0
 80106a6:	d105      	bne.n	80106b4 <__multadd+0x54>
 80106a8:	0002      	movs	r2, r0
 80106aa:	21b5      	movs	r1, #181	; 0xb5
 80106ac:	4b0c      	ldr	r3, [pc, #48]	; (80106e0 <__multadd+0x80>)
 80106ae:	480d      	ldr	r0, [pc, #52]	; (80106e4 <__multadd+0x84>)
 80106b0:	f001 f86e 	bl	8011790 <__assert_func>
 80106b4:	0021      	movs	r1, r4
 80106b6:	6923      	ldr	r3, [r4, #16]
 80106b8:	310c      	adds	r1, #12
 80106ba:	1c9a      	adds	r2, r3, #2
 80106bc:	0092      	lsls	r2, r2, #2
 80106be:	300c      	adds	r0, #12
 80106c0:	f7fe fafa 	bl	800ecb8 <memcpy>
 80106c4:	0021      	movs	r1, r4
 80106c6:	9801      	ldr	r0, [sp, #4]
 80106c8:	f7ff ffa6 	bl	8010618 <_Bfree>
 80106cc:	0034      	movs	r4, r6
 80106ce:	1d3b      	adds	r3, r7, #4
 80106d0:	009b      	lsls	r3, r3, #2
 80106d2:	18e3      	adds	r3, r4, r3
 80106d4:	605d      	str	r5, [r3, #4]
 80106d6:	1c7b      	adds	r3, r7, #1
 80106d8:	6123      	str	r3, [r4, #16]
 80106da:	0020      	movs	r0, r4
 80106dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80106de:	46c0      	nop			; (mov r8, r8)
 80106e0:	08013819 	.word	0x08013819
 80106e4:	080138bb 	.word	0x080138bb

080106e8 <__s2b>:
 80106e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80106ea:	0006      	movs	r6, r0
 80106ec:	0018      	movs	r0, r3
 80106ee:	000c      	movs	r4, r1
 80106f0:	3008      	adds	r0, #8
 80106f2:	2109      	movs	r1, #9
 80106f4:	9301      	str	r3, [sp, #4]
 80106f6:	0015      	movs	r5, r2
 80106f8:	f7ef fdb2 	bl	8000260 <__divsi3>
 80106fc:	2301      	movs	r3, #1
 80106fe:	2100      	movs	r1, #0
 8010700:	4283      	cmp	r3, r0
 8010702:	db0a      	blt.n	801071a <__s2b+0x32>
 8010704:	0030      	movs	r0, r6
 8010706:	f7ff ff43 	bl	8010590 <_Balloc>
 801070a:	1e01      	subs	r1, r0, #0
 801070c:	d108      	bne.n	8010720 <__s2b+0x38>
 801070e:	0002      	movs	r2, r0
 8010710:	4b19      	ldr	r3, [pc, #100]	; (8010778 <__s2b+0x90>)
 8010712:	481a      	ldr	r0, [pc, #104]	; (801077c <__s2b+0x94>)
 8010714:	31ce      	adds	r1, #206	; 0xce
 8010716:	f001 f83b 	bl	8011790 <__assert_func>
 801071a:	005b      	lsls	r3, r3, #1
 801071c:	3101      	adds	r1, #1
 801071e:	e7ef      	b.n	8010700 <__s2b+0x18>
 8010720:	9b08      	ldr	r3, [sp, #32]
 8010722:	6143      	str	r3, [r0, #20]
 8010724:	2301      	movs	r3, #1
 8010726:	6103      	str	r3, [r0, #16]
 8010728:	2d09      	cmp	r5, #9
 801072a:	dd18      	ble.n	801075e <__s2b+0x76>
 801072c:	0023      	movs	r3, r4
 801072e:	3309      	adds	r3, #9
 8010730:	001f      	movs	r7, r3
 8010732:	9300      	str	r3, [sp, #0]
 8010734:	1964      	adds	r4, r4, r5
 8010736:	783b      	ldrb	r3, [r7, #0]
 8010738:	220a      	movs	r2, #10
 801073a:	0030      	movs	r0, r6
 801073c:	3b30      	subs	r3, #48	; 0x30
 801073e:	f7ff ff8f 	bl	8010660 <__multadd>
 8010742:	3701      	adds	r7, #1
 8010744:	0001      	movs	r1, r0
 8010746:	42a7      	cmp	r7, r4
 8010748:	d1f5      	bne.n	8010736 <__s2b+0x4e>
 801074a:	002c      	movs	r4, r5
 801074c:	9b00      	ldr	r3, [sp, #0]
 801074e:	3c08      	subs	r4, #8
 8010750:	191c      	adds	r4, r3, r4
 8010752:	002f      	movs	r7, r5
 8010754:	9b01      	ldr	r3, [sp, #4]
 8010756:	429f      	cmp	r7, r3
 8010758:	db04      	blt.n	8010764 <__s2b+0x7c>
 801075a:	0008      	movs	r0, r1
 801075c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801075e:	2509      	movs	r5, #9
 8010760:	340a      	adds	r4, #10
 8010762:	e7f6      	b.n	8010752 <__s2b+0x6a>
 8010764:	1b63      	subs	r3, r4, r5
 8010766:	5ddb      	ldrb	r3, [r3, r7]
 8010768:	220a      	movs	r2, #10
 801076a:	0030      	movs	r0, r6
 801076c:	3b30      	subs	r3, #48	; 0x30
 801076e:	f7ff ff77 	bl	8010660 <__multadd>
 8010772:	3701      	adds	r7, #1
 8010774:	0001      	movs	r1, r0
 8010776:	e7ed      	b.n	8010754 <__s2b+0x6c>
 8010778:	08013819 	.word	0x08013819
 801077c:	080138bb 	.word	0x080138bb

08010780 <__hi0bits>:
 8010780:	0003      	movs	r3, r0
 8010782:	0c02      	lsrs	r2, r0, #16
 8010784:	2000      	movs	r0, #0
 8010786:	4282      	cmp	r2, r0
 8010788:	d101      	bne.n	801078e <__hi0bits+0xe>
 801078a:	041b      	lsls	r3, r3, #16
 801078c:	3010      	adds	r0, #16
 801078e:	0e1a      	lsrs	r2, r3, #24
 8010790:	d101      	bne.n	8010796 <__hi0bits+0x16>
 8010792:	3008      	adds	r0, #8
 8010794:	021b      	lsls	r3, r3, #8
 8010796:	0f1a      	lsrs	r2, r3, #28
 8010798:	d101      	bne.n	801079e <__hi0bits+0x1e>
 801079a:	3004      	adds	r0, #4
 801079c:	011b      	lsls	r3, r3, #4
 801079e:	0f9a      	lsrs	r2, r3, #30
 80107a0:	d101      	bne.n	80107a6 <__hi0bits+0x26>
 80107a2:	3002      	adds	r0, #2
 80107a4:	009b      	lsls	r3, r3, #2
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	db03      	blt.n	80107b2 <__hi0bits+0x32>
 80107aa:	3001      	adds	r0, #1
 80107ac:	005b      	lsls	r3, r3, #1
 80107ae:	d400      	bmi.n	80107b2 <__hi0bits+0x32>
 80107b0:	2020      	movs	r0, #32
 80107b2:	4770      	bx	lr

080107b4 <__lo0bits>:
 80107b4:	6803      	ldr	r3, [r0, #0]
 80107b6:	0002      	movs	r2, r0
 80107b8:	2107      	movs	r1, #7
 80107ba:	0018      	movs	r0, r3
 80107bc:	4008      	ands	r0, r1
 80107be:	420b      	tst	r3, r1
 80107c0:	d00d      	beq.n	80107de <__lo0bits+0x2a>
 80107c2:	3906      	subs	r1, #6
 80107c4:	2000      	movs	r0, #0
 80107c6:	420b      	tst	r3, r1
 80107c8:	d105      	bne.n	80107d6 <__lo0bits+0x22>
 80107ca:	3002      	adds	r0, #2
 80107cc:	4203      	tst	r3, r0
 80107ce:	d003      	beq.n	80107d8 <__lo0bits+0x24>
 80107d0:	40cb      	lsrs	r3, r1
 80107d2:	0008      	movs	r0, r1
 80107d4:	6013      	str	r3, [r2, #0]
 80107d6:	4770      	bx	lr
 80107d8:	089b      	lsrs	r3, r3, #2
 80107da:	6013      	str	r3, [r2, #0]
 80107dc:	e7fb      	b.n	80107d6 <__lo0bits+0x22>
 80107de:	b299      	uxth	r1, r3
 80107e0:	2900      	cmp	r1, #0
 80107e2:	d101      	bne.n	80107e8 <__lo0bits+0x34>
 80107e4:	2010      	movs	r0, #16
 80107e6:	0c1b      	lsrs	r3, r3, #16
 80107e8:	b2d9      	uxtb	r1, r3
 80107ea:	2900      	cmp	r1, #0
 80107ec:	d101      	bne.n	80107f2 <__lo0bits+0x3e>
 80107ee:	3008      	adds	r0, #8
 80107f0:	0a1b      	lsrs	r3, r3, #8
 80107f2:	0719      	lsls	r1, r3, #28
 80107f4:	d101      	bne.n	80107fa <__lo0bits+0x46>
 80107f6:	3004      	adds	r0, #4
 80107f8:	091b      	lsrs	r3, r3, #4
 80107fa:	0799      	lsls	r1, r3, #30
 80107fc:	d101      	bne.n	8010802 <__lo0bits+0x4e>
 80107fe:	3002      	adds	r0, #2
 8010800:	089b      	lsrs	r3, r3, #2
 8010802:	07d9      	lsls	r1, r3, #31
 8010804:	d4e9      	bmi.n	80107da <__lo0bits+0x26>
 8010806:	3001      	adds	r0, #1
 8010808:	085b      	lsrs	r3, r3, #1
 801080a:	d1e6      	bne.n	80107da <__lo0bits+0x26>
 801080c:	2020      	movs	r0, #32
 801080e:	e7e2      	b.n	80107d6 <__lo0bits+0x22>

08010810 <__i2b>:
 8010810:	b510      	push	{r4, lr}
 8010812:	000c      	movs	r4, r1
 8010814:	2101      	movs	r1, #1
 8010816:	f7ff febb 	bl	8010590 <_Balloc>
 801081a:	2800      	cmp	r0, #0
 801081c:	d106      	bne.n	801082c <__i2b+0x1c>
 801081e:	21a0      	movs	r1, #160	; 0xa0
 8010820:	0002      	movs	r2, r0
 8010822:	4b04      	ldr	r3, [pc, #16]	; (8010834 <__i2b+0x24>)
 8010824:	4804      	ldr	r0, [pc, #16]	; (8010838 <__i2b+0x28>)
 8010826:	0049      	lsls	r1, r1, #1
 8010828:	f000 ffb2 	bl	8011790 <__assert_func>
 801082c:	2301      	movs	r3, #1
 801082e:	6144      	str	r4, [r0, #20]
 8010830:	6103      	str	r3, [r0, #16]
 8010832:	bd10      	pop	{r4, pc}
 8010834:	08013819 	.word	0x08013819
 8010838:	080138bb 	.word	0x080138bb

0801083c <__multiply>:
 801083c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801083e:	690b      	ldr	r3, [r1, #16]
 8010840:	0014      	movs	r4, r2
 8010842:	6912      	ldr	r2, [r2, #16]
 8010844:	000d      	movs	r5, r1
 8010846:	b089      	sub	sp, #36	; 0x24
 8010848:	4293      	cmp	r3, r2
 801084a:	da01      	bge.n	8010850 <__multiply+0x14>
 801084c:	0025      	movs	r5, r4
 801084e:	000c      	movs	r4, r1
 8010850:	692f      	ldr	r7, [r5, #16]
 8010852:	6926      	ldr	r6, [r4, #16]
 8010854:	6869      	ldr	r1, [r5, #4]
 8010856:	19bb      	adds	r3, r7, r6
 8010858:	9302      	str	r3, [sp, #8]
 801085a:	68ab      	ldr	r3, [r5, #8]
 801085c:	19ba      	adds	r2, r7, r6
 801085e:	4293      	cmp	r3, r2
 8010860:	da00      	bge.n	8010864 <__multiply+0x28>
 8010862:	3101      	adds	r1, #1
 8010864:	f7ff fe94 	bl	8010590 <_Balloc>
 8010868:	9001      	str	r0, [sp, #4]
 801086a:	2800      	cmp	r0, #0
 801086c:	d106      	bne.n	801087c <__multiply+0x40>
 801086e:	215e      	movs	r1, #94	; 0x5e
 8010870:	0002      	movs	r2, r0
 8010872:	4b48      	ldr	r3, [pc, #288]	; (8010994 <__multiply+0x158>)
 8010874:	4848      	ldr	r0, [pc, #288]	; (8010998 <__multiply+0x15c>)
 8010876:	31ff      	adds	r1, #255	; 0xff
 8010878:	f000 ff8a 	bl	8011790 <__assert_func>
 801087c:	9b01      	ldr	r3, [sp, #4]
 801087e:	2200      	movs	r2, #0
 8010880:	3314      	adds	r3, #20
 8010882:	469c      	mov	ip, r3
 8010884:	19bb      	adds	r3, r7, r6
 8010886:	009b      	lsls	r3, r3, #2
 8010888:	4463      	add	r3, ip
 801088a:	9303      	str	r3, [sp, #12]
 801088c:	4663      	mov	r3, ip
 801088e:	9903      	ldr	r1, [sp, #12]
 8010890:	428b      	cmp	r3, r1
 8010892:	d32c      	bcc.n	80108ee <__multiply+0xb2>
 8010894:	002b      	movs	r3, r5
 8010896:	0022      	movs	r2, r4
 8010898:	3314      	adds	r3, #20
 801089a:	00bf      	lsls	r7, r7, #2
 801089c:	3214      	adds	r2, #20
 801089e:	9306      	str	r3, [sp, #24]
 80108a0:	00b6      	lsls	r6, r6, #2
 80108a2:	19db      	adds	r3, r3, r7
 80108a4:	9304      	str	r3, [sp, #16]
 80108a6:	1993      	adds	r3, r2, r6
 80108a8:	9307      	str	r3, [sp, #28]
 80108aa:	2304      	movs	r3, #4
 80108ac:	9305      	str	r3, [sp, #20]
 80108ae:	002b      	movs	r3, r5
 80108b0:	9904      	ldr	r1, [sp, #16]
 80108b2:	3315      	adds	r3, #21
 80108b4:	9200      	str	r2, [sp, #0]
 80108b6:	4299      	cmp	r1, r3
 80108b8:	d305      	bcc.n	80108c6 <__multiply+0x8a>
 80108ba:	1b4b      	subs	r3, r1, r5
 80108bc:	3b15      	subs	r3, #21
 80108be:	089b      	lsrs	r3, r3, #2
 80108c0:	3301      	adds	r3, #1
 80108c2:	009b      	lsls	r3, r3, #2
 80108c4:	9305      	str	r3, [sp, #20]
 80108c6:	9b07      	ldr	r3, [sp, #28]
 80108c8:	9a00      	ldr	r2, [sp, #0]
 80108ca:	429a      	cmp	r2, r3
 80108cc:	d311      	bcc.n	80108f2 <__multiply+0xb6>
 80108ce:	9b02      	ldr	r3, [sp, #8]
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	dd06      	ble.n	80108e2 <__multiply+0xa6>
 80108d4:	9b03      	ldr	r3, [sp, #12]
 80108d6:	3b04      	subs	r3, #4
 80108d8:	9303      	str	r3, [sp, #12]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	9300      	str	r3, [sp, #0]
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d053      	beq.n	801098a <__multiply+0x14e>
 80108e2:	9b01      	ldr	r3, [sp, #4]
 80108e4:	9a02      	ldr	r2, [sp, #8]
 80108e6:	0018      	movs	r0, r3
 80108e8:	611a      	str	r2, [r3, #16]
 80108ea:	b009      	add	sp, #36	; 0x24
 80108ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80108ee:	c304      	stmia	r3!, {r2}
 80108f0:	e7cd      	b.n	801088e <__multiply+0x52>
 80108f2:	9b00      	ldr	r3, [sp, #0]
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	b298      	uxth	r0, r3
 80108f8:	2800      	cmp	r0, #0
 80108fa:	d01b      	beq.n	8010934 <__multiply+0xf8>
 80108fc:	4667      	mov	r7, ip
 80108fe:	2400      	movs	r4, #0
 8010900:	9e06      	ldr	r6, [sp, #24]
 8010902:	ce02      	ldmia	r6!, {r1}
 8010904:	683a      	ldr	r2, [r7, #0]
 8010906:	b28b      	uxth	r3, r1
 8010908:	4343      	muls	r3, r0
 801090a:	b292      	uxth	r2, r2
 801090c:	189b      	adds	r3, r3, r2
 801090e:	191b      	adds	r3, r3, r4
 8010910:	0c0c      	lsrs	r4, r1, #16
 8010912:	4344      	muls	r4, r0
 8010914:	683a      	ldr	r2, [r7, #0]
 8010916:	0c11      	lsrs	r1, r2, #16
 8010918:	1861      	adds	r1, r4, r1
 801091a:	0c1c      	lsrs	r4, r3, #16
 801091c:	1909      	adds	r1, r1, r4
 801091e:	0c0c      	lsrs	r4, r1, #16
 8010920:	b29b      	uxth	r3, r3
 8010922:	0409      	lsls	r1, r1, #16
 8010924:	430b      	orrs	r3, r1
 8010926:	c708      	stmia	r7!, {r3}
 8010928:	9b04      	ldr	r3, [sp, #16]
 801092a:	42b3      	cmp	r3, r6
 801092c:	d8e9      	bhi.n	8010902 <__multiply+0xc6>
 801092e:	4663      	mov	r3, ip
 8010930:	9a05      	ldr	r2, [sp, #20]
 8010932:	509c      	str	r4, [r3, r2]
 8010934:	9b00      	ldr	r3, [sp, #0]
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	0c1e      	lsrs	r6, r3, #16
 801093a:	d020      	beq.n	801097e <__multiply+0x142>
 801093c:	4663      	mov	r3, ip
 801093e:	002c      	movs	r4, r5
 8010940:	4660      	mov	r0, ip
 8010942:	2700      	movs	r7, #0
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	3414      	adds	r4, #20
 8010948:	6822      	ldr	r2, [r4, #0]
 801094a:	b29b      	uxth	r3, r3
 801094c:	b291      	uxth	r1, r2
 801094e:	4371      	muls	r1, r6
 8010950:	6802      	ldr	r2, [r0, #0]
 8010952:	0c12      	lsrs	r2, r2, #16
 8010954:	1889      	adds	r1, r1, r2
 8010956:	19cf      	adds	r7, r1, r7
 8010958:	0439      	lsls	r1, r7, #16
 801095a:	430b      	orrs	r3, r1
 801095c:	6003      	str	r3, [r0, #0]
 801095e:	cc02      	ldmia	r4!, {r1}
 8010960:	6843      	ldr	r3, [r0, #4]
 8010962:	0c09      	lsrs	r1, r1, #16
 8010964:	4371      	muls	r1, r6
 8010966:	b29b      	uxth	r3, r3
 8010968:	0c3f      	lsrs	r7, r7, #16
 801096a:	18cb      	adds	r3, r1, r3
 801096c:	9a04      	ldr	r2, [sp, #16]
 801096e:	19db      	adds	r3, r3, r7
 8010970:	0c1f      	lsrs	r7, r3, #16
 8010972:	3004      	adds	r0, #4
 8010974:	42a2      	cmp	r2, r4
 8010976:	d8e7      	bhi.n	8010948 <__multiply+0x10c>
 8010978:	4662      	mov	r2, ip
 801097a:	9905      	ldr	r1, [sp, #20]
 801097c:	5053      	str	r3, [r2, r1]
 801097e:	9b00      	ldr	r3, [sp, #0]
 8010980:	3304      	adds	r3, #4
 8010982:	9300      	str	r3, [sp, #0]
 8010984:	2304      	movs	r3, #4
 8010986:	449c      	add	ip, r3
 8010988:	e79d      	b.n	80108c6 <__multiply+0x8a>
 801098a:	9b02      	ldr	r3, [sp, #8]
 801098c:	3b01      	subs	r3, #1
 801098e:	9302      	str	r3, [sp, #8]
 8010990:	e79d      	b.n	80108ce <__multiply+0x92>
 8010992:	46c0      	nop			; (mov r8, r8)
 8010994:	08013819 	.word	0x08013819
 8010998:	080138bb 	.word	0x080138bb

0801099c <__pow5mult>:
 801099c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801099e:	2303      	movs	r3, #3
 80109a0:	0015      	movs	r5, r2
 80109a2:	0007      	movs	r7, r0
 80109a4:	000e      	movs	r6, r1
 80109a6:	401a      	ands	r2, r3
 80109a8:	421d      	tst	r5, r3
 80109aa:	d008      	beq.n	80109be <__pow5mult+0x22>
 80109ac:	4925      	ldr	r1, [pc, #148]	; (8010a44 <__pow5mult+0xa8>)
 80109ae:	3a01      	subs	r2, #1
 80109b0:	0092      	lsls	r2, r2, #2
 80109b2:	5852      	ldr	r2, [r2, r1]
 80109b4:	2300      	movs	r3, #0
 80109b6:	0031      	movs	r1, r6
 80109b8:	f7ff fe52 	bl	8010660 <__multadd>
 80109bc:	0006      	movs	r6, r0
 80109be:	10ad      	asrs	r5, r5, #2
 80109c0:	d03d      	beq.n	8010a3e <__pow5mult+0xa2>
 80109c2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80109c4:	2c00      	cmp	r4, #0
 80109c6:	d10f      	bne.n	80109e8 <__pow5mult+0x4c>
 80109c8:	2010      	movs	r0, #16
 80109ca:	f001 fdb5 	bl	8012538 <malloc>
 80109ce:	1e02      	subs	r2, r0, #0
 80109d0:	6278      	str	r0, [r7, #36]	; 0x24
 80109d2:	d105      	bne.n	80109e0 <__pow5mult+0x44>
 80109d4:	21d7      	movs	r1, #215	; 0xd7
 80109d6:	4b1c      	ldr	r3, [pc, #112]	; (8010a48 <__pow5mult+0xac>)
 80109d8:	481c      	ldr	r0, [pc, #112]	; (8010a4c <__pow5mult+0xb0>)
 80109da:	0049      	lsls	r1, r1, #1
 80109dc:	f000 fed8 	bl	8011790 <__assert_func>
 80109e0:	6044      	str	r4, [r0, #4]
 80109e2:	6084      	str	r4, [r0, #8]
 80109e4:	6004      	str	r4, [r0, #0]
 80109e6:	60c4      	str	r4, [r0, #12]
 80109e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109ea:	689c      	ldr	r4, [r3, #8]
 80109ec:	9301      	str	r3, [sp, #4]
 80109ee:	2c00      	cmp	r4, #0
 80109f0:	d108      	bne.n	8010a04 <__pow5mult+0x68>
 80109f2:	0038      	movs	r0, r7
 80109f4:	4916      	ldr	r1, [pc, #88]	; (8010a50 <__pow5mult+0xb4>)
 80109f6:	f7ff ff0b 	bl	8010810 <__i2b>
 80109fa:	9b01      	ldr	r3, [sp, #4]
 80109fc:	0004      	movs	r4, r0
 80109fe:	6098      	str	r0, [r3, #8]
 8010a00:	2300      	movs	r3, #0
 8010a02:	6003      	str	r3, [r0, #0]
 8010a04:	2301      	movs	r3, #1
 8010a06:	421d      	tst	r5, r3
 8010a08:	d00a      	beq.n	8010a20 <__pow5mult+0x84>
 8010a0a:	0031      	movs	r1, r6
 8010a0c:	0022      	movs	r2, r4
 8010a0e:	0038      	movs	r0, r7
 8010a10:	f7ff ff14 	bl	801083c <__multiply>
 8010a14:	0031      	movs	r1, r6
 8010a16:	9001      	str	r0, [sp, #4]
 8010a18:	0038      	movs	r0, r7
 8010a1a:	f7ff fdfd 	bl	8010618 <_Bfree>
 8010a1e:	9e01      	ldr	r6, [sp, #4]
 8010a20:	106d      	asrs	r5, r5, #1
 8010a22:	d00c      	beq.n	8010a3e <__pow5mult+0xa2>
 8010a24:	6820      	ldr	r0, [r4, #0]
 8010a26:	2800      	cmp	r0, #0
 8010a28:	d107      	bne.n	8010a3a <__pow5mult+0x9e>
 8010a2a:	0022      	movs	r2, r4
 8010a2c:	0021      	movs	r1, r4
 8010a2e:	0038      	movs	r0, r7
 8010a30:	f7ff ff04 	bl	801083c <__multiply>
 8010a34:	2300      	movs	r3, #0
 8010a36:	6020      	str	r0, [r4, #0]
 8010a38:	6003      	str	r3, [r0, #0]
 8010a3a:	0004      	movs	r4, r0
 8010a3c:	e7e2      	b.n	8010a04 <__pow5mult+0x68>
 8010a3e:	0030      	movs	r0, r6
 8010a40:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010a42:	46c0      	nop			; (mov r8, r8)
 8010a44:	08013a08 	.word	0x08013a08
 8010a48:	080138a4 	.word	0x080138a4
 8010a4c:	080138bb 	.word	0x080138bb
 8010a50:	00000271 	.word	0x00000271

08010a54 <__lshift>:
 8010a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010a56:	000c      	movs	r4, r1
 8010a58:	0017      	movs	r7, r2
 8010a5a:	6923      	ldr	r3, [r4, #16]
 8010a5c:	1155      	asrs	r5, r2, #5
 8010a5e:	b087      	sub	sp, #28
 8010a60:	18eb      	adds	r3, r5, r3
 8010a62:	9302      	str	r3, [sp, #8]
 8010a64:	3301      	adds	r3, #1
 8010a66:	9301      	str	r3, [sp, #4]
 8010a68:	6849      	ldr	r1, [r1, #4]
 8010a6a:	68a3      	ldr	r3, [r4, #8]
 8010a6c:	9004      	str	r0, [sp, #16]
 8010a6e:	9a01      	ldr	r2, [sp, #4]
 8010a70:	4293      	cmp	r3, r2
 8010a72:	db10      	blt.n	8010a96 <__lshift+0x42>
 8010a74:	9804      	ldr	r0, [sp, #16]
 8010a76:	f7ff fd8b 	bl	8010590 <_Balloc>
 8010a7a:	2300      	movs	r3, #0
 8010a7c:	0002      	movs	r2, r0
 8010a7e:	0006      	movs	r6, r0
 8010a80:	0019      	movs	r1, r3
 8010a82:	3214      	adds	r2, #20
 8010a84:	4298      	cmp	r0, r3
 8010a86:	d10c      	bne.n	8010aa2 <__lshift+0x4e>
 8010a88:	21da      	movs	r1, #218	; 0xda
 8010a8a:	0002      	movs	r2, r0
 8010a8c:	4b26      	ldr	r3, [pc, #152]	; (8010b28 <__lshift+0xd4>)
 8010a8e:	4827      	ldr	r0, [pc, #156]	; (8010b2c <__lshift+0xd8>)
 8010a90:	31ff      	adds	r1, #255	; 0xff
 8010a92:	f000 fe7d 	bl	8011790 <__assert_func>
 8010a96:	3101      	adds	r1, #1
 8010a98:	005b      	lsls	r3, r3, #1
 8010a9a:	e7e8      	b.n	8010a6e <__lshift+0x1a>
 8010a9c:	0098      	lsls	r0, r3, #2
 8010a9e:	5011      	str	r1, [r2, r0]
 8010aa0:	3301      	adds	r3, #1
 8010aa2:	42ab      	cmp	r3, r5
 8010aa4:	dbfa      	blt.n	8010a9c <__lshift+0x48>
 8010aa6:	43eb      	mvns	r3, r5
 8010aa8:	17db      	asrs	r3, r3, #31
 8010aaa:	401d      	ands	r5, r3
 8010aac:	211f      	movs	r1, #31
 8010aae:	0023      	movs	r3, r4
 8010ab0:	0038      	movs	r0, r7
 8010ab2:	00ad      	lsls	r5, r5, #2
 8010ab4:	1955      	adds	r5, r2, r5
 8010ab6:	6922      	ldr	r2, [r4, #16]
 8010ab8:	3314      	adds	r3, #20
 8010aba:	0092      	lsls	r2, r2, #2
 8010abc:	4008      	ands	r0, r1
 8010abe:	4684      	mov	ip, r0
 8010ac0:	189a      	adds	r2, r3, r2
 8010ac2:	420f      	tst	r7, r1
 8010ac4:	d02a      	beq.n	8010b1c <__lshift+0xc8>
 8010ac6:	3101      	adds	r1, #1
 8010ac8:	1a09      	subs	r1, r1, r0
 8010aca:	9105      	str	r1, [sp, #20]
 8010acc:	2100      	movs	r1, #0
 8010ace:	9503      	str	r5, [sp, #12]
 8010ad0:	4667      	mov	r7, ip
 8010ad2:	6818      	ldr	r0, [r3, #0]
 8010ad4:	40b8      	lsls	r0, r7
 8010ad6:	4301      	orrs	r1, r0
 8010ad8:	9803      	ldr	r0, [sp, #12]
 8010ada:	c002      	stmia	r0!, {r1}
 8010adc:	cb02      	ldmia	r3!, {r1}
 8010ade:	9003      	str	r0, [sp, #12]
 8010ae0:	9805      	ldr	r0, [sp, #20]
 8010ae2:	40c1      	lsrs	r1, r0
 8010ae4:	429a      	cmp	r2, r3
 8010ae6:	d8f3      	bhi.n	8010ad0 <__lshift+0x7c>
 8010ae8:	0020      	movs	r0, r4
 8010aea:	3015      	adds	r0, #21
 8010aec:	2304      	movs	r3, #4
 8010aee:	4282      	cmp	r2, r0
 8010af0:	d304      	bcc.n	8010afc <__lshift+0xa8>
 8010af2:	1b13      	subs	r3, r2, r4
 8010af4:	3b15      	subs	r3, #21
 8010af6:	089b      	lsrs	r3, r3, #2
 8010af8:	3301      	adds	r3, #1
 8010afa:	009b      	lsls	r3, r3, #2
 8010afc:	50e9      	str	r1, [r5, r3]
 8010afe:	2900      	cmp	r1, #0
 8010b00:	d002      	beq.n	8010b08 <__lshift+0xb4>
 8010b02:	9b02      	ldr	r3, [sp, #8]
 8010b04:	3302      	adds	r3, #2
 8010b06:	9301      	str	r3, [sp, #4]
 8010b08:	9b01      	ldr	r3, [sp, #4]
 8010b0a:	9804      	ldr	r0, [sp, #16]
 8010b0c:	3b01      	subs	r3, #1
 8010b0e:	0021      	movs	r1, r4
 8010b10:	6133      	str	r3, [r6, #16]
 8010b12:	f7ff fd81 	bl	8010618 <_Bfree>
 8010b16:	0030      	movs	r0, r6
 8010b18:	b007      	add	sp, #28
 8010b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b1c:	cb02      	ldmia	r3!, {r1}
 8010b1e:	c502      	stmia	r5!, {r1}
 8010b20:	429a      	cmp	r2, r3
 8010b22:	d8fb      	bhi.n	8010b1c <__lshift+0xc8>
 8010b24:	e7f0      	b.n	8010b08 <__lshift+0xb4>
 8010b26:	46c0      	nop			; (mov r8, r8)
 8010b28:	08013819 	.word	0x08013819
 8010b2c:	080138bb 	.word	0x080138bb

08010b30 <__mcmp>:
 8010b30:	6902      	ldr	r2, [r0, #16]
 8010b32:	690b      	ldr	r3, [r1, #16]
 8010b34:	b530      	push	{r4, r5, lr}
 8010b36:	0004      	movs	r4, r0
 8010b38:	1ad0      	subs	r0, r2, r3
 8010b3a:	429a      	cmp	r2, r3
 8010b3c:	d10d      	bne.n	8010b5a <__mcmp+0x2a>
 8010b3e:	009b      	lsls	r3, r3, #2
 8010b40:	3414      	adds	r4, #20
 8010b42:	3114      	adds	r1, #20
 8010b44:	18e2      	adds	r2, r4, r3
 8010b46:	18c9      	adds	r1, r1, r3
 8010b48:	3a04      	subs	r2, #4
 8010b4a:	3904      	subs	r1, #4
 8010b4c:	6815      	ldr	r5, [r2, #0]
 8010b4e:	680b      	ldr	r3, [r1, #0]
 8010b50:	429d      	cmp	r5, r3
 8010b52:	d003      	beq.n	8010b5c <__mcmp+0x2c>
 8010b54:	2001      	movs	r0, #1
 8010b56:	429d      	cmp	r5, r3
 8010b58:	d303      	bcc.n	8010b62 <__mcmp+0x32>
 8010b5a:	bd30      	pop	{r4, r5, pc}
 8010b5c:	4294      	cmp	r4, r2
 8010b5e:	d3f3      	bcc.n	8010b48 <__mcmp+0x18>
 8010b60:	e7fb      	b.n	8010b5a <__mcmp+0x2a>
 8010b62:	4240      	negs	r0, r0
 8010b64:	e7f9      	b.n	8010b5a <__mcmp+0x2a>
	...

08010b68 <__mdiff>:
 8010b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b6a:	000e      	movs	r6, r1
 8010b6c:	0007      	movs	r7, r0
 8010b6e:	0011      	movs	r1, r2
 8010b70:	0030      	movs	r0, r6
 8010b72:	b087      	sub	sp, #28
 8010b74:	0014      	movs	r4, r2
 8010b76:	f7ff ffdb 	bl	8010b30 <__mcmp>
 8010b7a:	1e05      	subs	r5, r0, #0
 8010b7c:	d110      	bne.n	8010ba0 <__mdiff+0x38>
 8010b7e:	0001      	movs	r1, r0
 8010b80:	0038      	movs	r0, r7
 8010b82:	f7ff fd05 	bl	8010590 <_Balloc>
 8010b86:	1e02      	subs	r2, r0, #0
 8010b88:	d104      	bne.n	8010b94 <__mdiff+0x2c>
 8010b8a:	4b40      	ldr	r3, [pc, #256]	; (8010c8c <__mdiff+0x124>)
 8010b8c:	4940      	ldr	r1, [pc, #256]	; (8010c90 <__mdiff+0x128>)
 8010b8e:	4841      	ldr	r0, [pc, #260]	; (8010c94 <__mdiff+0x12c>)
 8010b90:	f000 fdfe 	bl	8011790 <__assert_func>
 8010b94:	2301      	movs	r3, #1
 8010b96:	6145      	str	r5, [r0, #20]
 8010b98:	6103      	str	r3, [r0, #16]
 8010b9a:	0010      	movs	r0, r2
 8010b9c:	b007      	add	sp, #28
 8010b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ba0:	2301      	movs	r3, #1
 8010ba2:	9301      	str	r3, [sp, #4]
 8010ba4:	2800      	cmp	r0, #0
 8010ba6:	db04      	blt.n	8010bb2 <__mdiff+0x4a>
 8010ba8:	0023      	movs	r3, r4
 8010baa:	0034      	movs	r4, r6
 8010bac:	001e      	movs	r6, r3
 8010bae:	2300      	movs	r3, #0
 8010bb0:	9301      	str	r3, [sp, #4]
 8010bb2:	0038      	movs	r0, r7
 8010bb4:	6861      	ldr	r1, [r4, #4]
 8010bb6:	f7ff fceb 	bl	8010590 <_Balloc>
 8010bba:	1e02      	subs	r2, r0, #0
 8010bbc:	d103      	bne.n	8010bc6 <__mdiff+0x5e>
 8010bbe:	2190      	movs	r1, #144	; 0x90
 8010bc0:	4b32      	ldr	r3, [pc, #200]	; (8010c8c <__mdiff+0x124>)
 8010bc2:	0089      	lsls	r1, r1, #2
 8010bc4:	e7e3      	b.n	8010b8e <__mdiff+0x26>
 8010bc6:	9b01      	ldr	r3, [sp, #4]
 8010bc8:	2700      	movs	r7, #0
 8010bca:	60c3      	str	r3, [r0, #12]
 8010bcc:	6920      	ldr	r0, [r4, #16]
 8010bce:	3414      	adds	r4, #20
 8010bd0:	9401      	str	r4, [sp, #4]
 8010bd2:	9b01      	ldr	r3, [sp, #4]
 8010bd4:	0084      	lsls	r4, r0, #2
 8010bd6:	191b      	adds	r3, r3, r4
 8010bd8:	0034      	movs	r4, r6
 8010bda:	9302      	str	r3, [sp, #8]
 8010bdc:	6933      	ldr	r3, [r6, #16]
 8010bde:	3414      	adds	r4, #20
 8010be0:	0099      	lsls	r1, r3, #2
 8010be2:	1863      	adds	r3, r4, r1
 8010be4:	9303      	str	r3, [sp, #12]
 8010be6:	0013      	movs	r3, r2
 8010be8:	3314      	adds	r3, #20
 8010bea:	469c      	mov	ip, r3
 8010bec:	9305      	str	r3, [sp, #20]
 8010bee:	9b01      	ldr	r3, [sp, #4]
 8010bf0:	9304      	str	r3, [sp, #16]
 8010bf2:	9b04      	ldr	r3, [sp, #16]
 8010bf4:	cc02      	ldmia	r4!, {r1}
 8010bf6:	cb20      	ldmia	r3!, {r5}
 8010bf8:	9304      	str	r3, [sp, #16]
 8010bfa:	b2ab      	uxth	r3, r5
 8010bfc:	19df      	adds	r7, r3, r7
 8010bfe:	b28b      	uxth	r3, r1
 8010c00:	1afb      	subs	r3, r7, r3
 8010c02:	0c09      	lsrs	r1, r1, #16
 8010c04:	0c2d      	lsrs	r5, r5, #16
 8010c06:	1a6d      	subs	r5, r5, r1
 8010c08:	1419      	asrs	r1, r3, #16
 8010c0a:	186d      	adds	r5, r5, r1
 8010c0c:	4661      	mov	r1, ip
 8010c0e:	142f      	asrs	r7, r5, #16
 8010c10:	b29b      	uxth	r3, r3
 8010c12:	042d      	lsls	r5, r5, #16
 8010c14:	432b      	orrs	r3, r5
 8010c16:	c108      	stmia	r1!, {r3}
 8010c18:	9b03      	ldr	r3, [sp, #12]
 8010c1a:	468c      	mov	ip, r1
 8010c1c:	42a3      	cmp	r3, r4
 8010c1e:	d8e8      	bhi.n	8010bf2 <__mdiff+0x8a>
 8010c20:	0031      	movs	r1, r6
 8010c22:	9c03      	ldr	r4, [sp, #12]
 8010c24:	3115      	adds	r1, #21
 8010c26:	2304      	movs	r3, #4
 8010c28:	428c      	cmp	r4, r1
 8010c2a:	d304      	bcc.n	8010c36 <__mdiff+0xce>
 8010c2c:	1ba3      	subs	r3, r4, r6
 8010c2e:	3b15      	subs	r3, #21
 8010c30:	089b      	lsrs	r3, r3, #2
 8010c32:	3301      	adds	r3, #1
 8010c34:	009b      	lsls	r3, r3, #2
 8010c36:	9901      	ldr	r1, [sp, #4]
 8010c38:	18cc      	adds	r4, r1, r3
 8010c3a:	9905      	ldr	r1, [sp, #20]
 8010c3c:	0026      	movs	r6, r4
 8010c3e:	18cb      	adds	r3, r1, r3
 8010c40:	469c      	mov	ip, r3
 8010c42:	9902      	ldr	r1, [sp, #8]
 8010c44:	428e      	cmp	r6, r1
 8010c46:	d310      	bcc.n	8010c6a <__mdiff+0x102>
 8010c48:	9e02      	ldr	r6, [sp, #8]
 8010c4a:	1ee1      	subs	r1, r4, #3
 8010c4c:	2500      	movs	r5, #0
 8010c4e:	428e      	cmp	r6, r1
 8010c50:	d304      	bcc.n	8010c5c <__mdiff+0xf4>
 8010c52:	0031      	movs	r1, r6
 8010c54:	3103      	adds	r1, #3
 8010c56:	1b0c      	subs	r4, r1, r4
 8010c58:	08a4      	lsrs	r4, r4, #2
 8010c5a:	00a5      	lsls	r5, r4, #2
 8010c5c:	195b      	adds	r3, r3, r5
 8010c5e:	3b04      	subs	r3, #4
 8010c60:	6819      	ldr	r1, [r3, #0]
 8010c62:	2900      	cmp	r1, #0
 8010c64:	d00f      	beq.n	8010c86 <__mdiff+0x11e>
 8010c66:	6110      	str	r0, [r2, #16]
 8010c68:	e797      	b.n	8010b9a <__mdiff+0x32>
 8010c6a:	ce02      	ldmia	r6!, {r1}
 8010c6c:	b28d      	uxth	r5, r1
 8010c6e:	19ed      	adds	r5, r5, r7
 8010c70:	0c0f      	lsrs	r7, r1, #16
 8010c72:	1429      	asrs	r1, r5, #16
 8010c74:	1879      	adds	r1, r7, r1
 8010c76:	140f      	asrs	r7, r1, #16
 8010c78:	b2ad      	uxth	r5, r5
 8010c7a:	0409      	lsls	r1, r1, #16
 8010c7c:	430d      	orrs	r5, r1
 8010c7e:	4661      	mov	r1, ip
 8010c80:	c120      	stmia	r1!, {r5}
 8010c82:	468c      	mov	ip, r1
 8010c84:	e7dd      	b.n	8010c42 <__mdiff+0xda>
 8010c86:	3801      	subs	r0, #1
 8010c88:	e7e9      	b.n	8010c5e <__mdiff+0xf6>
 8010c8a:	46c0      	nop			; (mov r8, r8)
 8010c8c:	08013819 	.word	0x08013819
 8010c90:	00000232 	.word	0x00000232
 8010c94:	080138bb 	.word	0x080138bb

08010c98 <__ulp>:
 8010c98:	4b0f      	ldr	r3, [pc, #60]	; (8010cd8 <__ulp+0x40>)
 8010c9a:	4019      	ands	r1, r3
 8010c9c:	4b0f      	ldr	r3, [pc, #60]	; (8010cdc <__ulp+0x44>)
 8010c9e:	18c9      	adds	r1, r1, r3
 8010ca0:	2900      	cmp	r1, #0
 8010ca2:	dd04      	ble.n	8010cae <__ulp+0x16>
 8010ca4:	2200      	movs	r2, #0
 8010ca6:	000b      	movs	r3, r1
 8010ca8:	0010      	movs	r0, r2
 8010caa:	0019      	movs	r1, r3
 8010cac:	4770      	bx	lr
 8010cae:	4249      	negs	r1, r1
 8010cb0:	2200      	movs	r2, #0
 8010cb2:	2300      	movs	r3, #0
 8010cb4:	1509      	asrs	r1, r1, #20
 8010cb6:	2913      	cmp	r1, #19
 8010cb8:	dc04      	bgt.n	8010cc4 <__ulp+0x2c>
 8010cba:	2080      	movs	r0, #128	; 0x80
 8010cbc:	0300      	lsls	r0, r0, #12
 8010cbe:	4108      	asrs	r0, r1
 8010cc0:	0003      	movs	r3, r0
 8010cc2:	e7f1      	b.n	8010ca8 <__ulp+0x10>
 8010cc4:	3914      	subs	r1, #20
 8010cc6:	2001      	movs	r0, #1
 8010cc8:	291e      	cmp	r1, #30
 8010cca:	dc02      	bgt.n	8010cd2 <__ulp+0x3a>
 8010ccc:	2080      	movs	r0, #128	; 0x80
 8010cce:	0600      	lsls	r0, r0, #24
 8010cd0:	40c8      	lsrs	r0, r1
 8010cd2:	0002      	movs	r2, r0
 8010cd4:	e7e8      	b.n	8010ca8 <__ulp+0x10>
 8010cd6:	46c0      	nop			; (mov r8, r8)
 8010cd8:	7ff00000 	.word	0x7ff00000
 8010cdc:	fcc00000 	.word	0xfcc00000

08010ce0 <__b2d>:
 8010ce0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010ce2:	0006      	movs	r6, r0
 8010ce4:	6903      	ldr	r3, [r0, #16]
 8010ce6:	3614      	adds	r6, #20
 8010ce8:	009b      	lsls	r3, r3, #2
 8010cea:	18f3      	adds	r3, r6, r3
 8010cec:	1f1d      	subs	r5, r3, #4
 8010cee:	682c      	ldr	r4, [r5, #0]
 8010cf0:	000f      	movs	r7, r1
 8010cf2:	0020      	movs	r0, r4
 8010cf4:	9301      	str	r3, [sp, #4]
 8010cf6:	f7ff fd43 	bl	8010780 <__hi0bits>
 8010cfa:	2320      	movs	r3, #32
 8010cfc:	1a1b      	subs	r3, r3, r0
 8010cfe:	491f      	ldr	r1, [pc, #124]	; (8010d7c <__b2d+0x9c>)
 8010d00:	603b      	str	r3, [r7, #0]
 8010d02:	280a      	cmp	r0, #10
 8010d04:	dc16      	bgt.n	8010d34 <__b2d+0x54>
 8010d06:	230b      	movs	r3, #11
 8010d08:	0027      	movs	r7, r4
 8010d0a:	1a1b      	subs	r3, r3, r0
 8010d0c:	40df      	lsrs	r7, r3
 8010d0e:	4339      	orrs	r1, r7
 8010d10:	469c      	mov	ip, r3
 8010d12:	000b      	movs	r3, r1
 8010d14:	2100      	movs	r1, #0
 8010d16:	42ae      	cmp	r6, r5
 8010d18:	d202      	bcs.n	8010d20 <__b2d+0x40>
 8010d1a:	9901      	ldr	r1, [sp, #4]
 8010d1c:	3908      	subs	r1, #8
 8010d1e:	6809      	ldr	r1, [r1, #0]
 8010d20:	3015      	adds	r0, #21
 8010d22:	4084      	lsls	r4, r0
 8010d24:	4660      	mov	r0, ip
 8010d26:	40c1      	lsrs	r1, r0
 8010d28:	430c      	orrs	r4, r1
 8010d2a:	0022      	movs	r2, r4
 8010d2c:	0010      	movs	r0, r2
 8010d2e:	0019      	movs	r1, r3
 8010d30:	b003      	add	sp, #12
 8010d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d34:	2700      	movs	r7, #0
 8010d36:	42ae      	cmp	r6, r5
 8010d38:	d202      	bcs.n	8010d40 <__b2d+0x60>
 8010d3a:	9d01      	ldr	r5, [sp, #4]
 8010d3c:	3d08      	subs	r5, #8
 8010d3e:	682f      	ldr	r7, [r5, #0]
 8010d40:	230b      	movs	r3, #11
 8010d42:	425b      	negs	r3, r3
 8010d44:	469c      	mov	ip, r3
 8010d46:	4484      	add	ip, r0
 8010d48:	280b      	cmp	r0, #11
 8010d4a:	d013      	beq.n	8010d74 <__b2d+0x94>
 8010d4c:	4663      	mov	r3, ip
 8010d4e:	2020      	movs	r0, #32
 8010d50:	409c      	lsls	r4, r3
 8010d52:	1ac0      	subs	r0, r0, r3
 8010d54:	003b      	movs	r3, r7
 8010d56:	40c3      	lsrs	r3, r0
 8010d58:	431c      	orrs	r4, r3
 8010d5a:	4321      	orrs	r1, r4
 8010d5c:	000b      	movs	r3, r1
 8010d5e:	2100      	movs	r1, #0
 8010d60:	42b5      	cmp	r5, r6
 8010d62:	d901      	bls.n	8010d68 <__b2d+0x88>
 8010d64:	3d04      	subs	r5, #4
 8010d66:	6829      	ldr	r1, [r5, #0]
 8010d68:	4664      	mov	r4, ip
 8010d6a:	40c1      	lsrs	r1, r0
 8010d6c:	40a7      	lsls	r7, r4
 8010d6e:	430f      	orrs	r7, r1
 8010d70:	003a      	movs	r2, r7
 8010d72:	e7db      	b.n	8010d2c <__b2d+0x4c>
 8010d74:	4321      	orrs	r1, r4
 8010d76:	000b      	movs	r3, r1
 8010d78:	e7fa      	b.n	8010d70 <__b2d+0x90>
 8010d7a:	46c0      	nop			; (mov r8, r8)
 8010d7c:	3ff00000 	.word	0x3ff00000

08010d80 <__d2b>:
 8010d80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010d82:	2101      	movs	r1, #1
 8010d84:	0014      	movs	r4, r2
 8010d86:	001e      	movs	r6, r3
 8010d88:	9f08      	ldr	r7, [sp, #32]
 8010d8a:	f7ff fc01 	bl	8010590 <_Balloc>
 8010d8e:	1e05      	subs	r5, r0, #0
 8010d90:	d105      	bne.n	8010d9e <__d2b+0x1e>
 8010d92:	0002      	movs	r2, r0
 8010d94:	4b26      	ldr	r3, [pc, #152]	; (8010e30 <__d2b+0xb0>)
 8010d96:	4927      	ldr	r1, [pc, #156]	; (8010e34 <__d2b+0xb4>)
 8010d98:	4827      	ldr	r0, [pc, #156]	; (8010e38 <__d2b+0xb8>)
 8010d9a:	f000 fcf9 	bl	8011790 <__assert_func>
 8010d9e:	0333      	lsls	r3, r6, #12
 8010da0:	0076      	lsls	r6, r6, #1
 8010da2:	0b1b      	lsrs	r3, r3, #12
 8010da4:	0d76      	lsrs	r6, r6, #21
 8010da6:	d124      	bne.n	8010df2 <__d2b+0x72>
 8010da8:	9301      	str	r3, [sp, #4]
 8010daa:	2c00      	cmp	r4, #0
 8010dac:	d027      	beq.n	8010dfe <__d2b+0x7e>
 8010dae:	4668      	mov	r0, sp
 8010db0:	9400      	str	r4, [sp, #0]
 8010db2:	f7ff fcff 	bl	80107b4 <__lo0bits>
 8010db6:	9c00      	ldr	r4, [sp, #0]
 8010db8:	2800      	cmp	r0, #0
 8010dba:	d01e      	beq.n	8010dfa <__d2b+0x7a>
 8010dbc:	9b01      	ldr	r3, [sp, #4]
 8010dbe:	2120      	movs	r1, #32
 8010dc0:	001a      	movs	r2, r3
 8010dc2:	1a09      	subs	r1, r1, r0
 8010dc4:	408a      	lsls	r2, r1
 8010dc6:	40c3      	lsrs	r3, r0
 8010dc8:	4322      	orrs	r2, r4
 8010dca:	616a      	str	r2, [r5, #20]
 8010dcc:	9301      	str	r3, [sp, #4]
 8010dce:	9c01      	ldr	r4, [sp, #4]
 8010dd0:	61ac      	str	r4, [r5, #24]
 8010dd2:	1e63      	subs	r3, r4, #1
 8010dd4:	419c      	sbcs	r4, r3
 8010dd6:	3401      	adds	r4, #1
 8010dd8:	612c      	str	r4, [r5, #16]
 8010dda:	2e00      	cmp	r6, #0
 8010ddc:	d018      	beq.n	8010e10 <__d2b+0x90>
 8010dde:	4b17      	ldr	r3, [pc, #92]	; (8010e3c <__d2b+0xbc>)
 8010de0:	18f6      	adds	r6, r6, r3
 8010de2:	2335      	movs	r3, #53	; 0x35
 8010de4:	1836      	adds	r6, r6, r0
 8010de6:	1a18      	subs	r0, r3, r0
 8010de8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010dea:	603e      	str	r6, [r7, #0]
 8010dec:	6018      	str	r0, [r3, #0]
 8010dee:	0028      	movs	r0, r5
 8010df0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010df2:	2280      	movs	r2, #128	; 0x80
 8010df4:	0352      	lsls	r2, r2, #13
 8010df6:	4313      	orrs	r3, r2
 8010df8:	e7d6      	b.n	8010da8 <__d2b+0x28>
 8010dfa:	616c      	str	r4, [r5, #20]
 8010dfc:	e7e7      	b.n	8010dce <__d2b+0x4e>
 8010dfe:	a801      	add	r0, sp, #4
 8010e00:	f7ff fcd8 	bl	80107b4 <__lo0bits>
 8010e04:	2401      	movs	r4, #1
 8010e06:	9b01      	ldr	r3, [sp, #4]
 8010e08:	612c      	str	r4, [r5, #16]
 8010e0a:	616b      	str	r3, [r5, #20]
 8010e0c:	3020      	adds	r0, #32
 8010e0e:	e7e4      	b.n	8010dda <__d2b+0x5a>
 8010e10:	4b0b      	ldr	r3, [pc, #44]	; (8010e40 <__d2b+0xc0>)
 8010e12:	18c0      	adds	r0, r0, r3
 8010e14:	4b0b      	ldr	r3, [pc, #44]	; (8010e44 <__d2b+0xc4>)
 8010e16:	6038      	str	r0, [r7, #0]
 8010e18:	18e3      	adds	r3, r4, r3
 8010e1a:	009b      	lsls	r3, r3, #2
 8010e1c:	18eb      	adds	r3, r5, r3
 8010e1e:	6958      	ldr	r0, [r3, #20]
 8010e20:	f7ff fcae 	bl	8010780 <__hi0bits>
 8010e24:	0164      	lsls	r4, r4, #5
 8010e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e28:	1a24      	subs	r4, r4, r0
 8010e2a:	601c      	str	r4, [r3, #0]
 8010e2c:	e7df      	b.n	8010dee <__d2b+0x6e>
 8010e2e:	46c0      	nop			; (mov r8, r8)
 8010e30:	08013819 	.word	0x08013819
 8010e34:	0000030a 	.word	0x0000030a
 8010e38:	080138bb 	.word	0x080138bb
 8010e3c:	fffffbcd 	.word	0xfffffbcd
 8010e40:	fffffbce 	.word	0xfffffbce
 8010e44:	3fffffff 	.word	0x3fffffff

08010e48 <__ratio>:
 8010e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e4a:	b087      	sub	sp, #28
 8010e4c:	000f      	movs	r7, r1
 8010e4e:	a904      	add	r1, sp, #16
 8010e50:	0006      	movs	r6, r0
 8010e52:	f7ff ff45 	bl	8010ce0 <__b2d>
 8010e56:	9000      	str	r0, [sp, #0]
 8010e58:	9101      	str	r1, [sp, #4]
 8010e5a:	9c00      	ldr	r4, [sp, #0]
 8010e5c:	9d01      	ldr	r5, [sp, #4]
 8010e5e:	0038      	movs	r0, r7
 8010e60:	a905      	add	r1, sp, #20
 8010e62:	f7ff ff3d 	bl	8010ce0 <__b2d>
 8010e66:	9002      	str	r0, [sp, #8]
 8010e68:	9103      	str	r1, [sp, #12]
 8010e6a:	9a02      	ldr	r2, [sp, #8]
 8010e6c:	9b03      	ldr	r3, [sp, #12]
 8010e6e:	6931      	ldr	r1, [r6, #16]
 8010e70:	6938      	ldr	r0, [r7, #16]
 8010e72:	9e05      	ldr	r6, [sp, #20]
 8010e74:	1a08      	subs	r0, r1, r0
 8010e76:	9904      	ldr	r1, [sp, #16]
 8010e78:	0140      	lsls	r0, r0, #5
 8010e7a:	1b89      	subs	r1, r1, r6
 8010e7c:	1841      	adds	r1, r0, r1
 8010e7e:	0508      	lsls	r0, r1, #20
 8010e80:	2900      	cmp	r1, #0
 8010e82:	dd07      	ble.n	8010e94 <__ratio+0x4c>
 8010e84:	9901      	ldr	r1, [sp, #4]
 8010e86:	1845      	adds	r5, r0, r1
 8010e88:	0020      	movs	r0, r4
 8010e8a:	0029      	movs	r1, r5
 8010e8c:	f7f0 f9ca 	bl	8001224 <__aeabi_ddiv>
 8010e90:	b007      	add	sp, #28
 8010e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e94:	9903      	ldr	r1, [sp, #12]
 8010e96:	1a0b      	subs	r3, r1, r0
 8010e98:	e7f6      	b.n	8010e88 <__ratio+0x40>
	...

08010e9c <_mprec_log10>:
 8010e9c:	b510      	push	{r4, lr}
 8010e9e:	0004      	movs	r4, r0
 8010ea0:	2817      	cmp	r0, #23
 8010ea2:	dc05      	bgt.n	8010eb0 <_mprec_log10+0x14>
 8010ea4:	4c07      	ldr	r4, [pc, #28]	; (8010ec4 <_mprec_log10+0x28>)
 8010ea6:	00c0      	lsls	r0, r0, #3
 8010ea8:	1824      	adds	r4, r4, r0
 8010eaa:	6820      	ldr	r0, [r4, #0]
 8010eac:	6861      	ldr	r1, [r4, #4]
 8010eae:	bd10      	pop	{r4, pc}
 8010eb0:	2000      	movs	r0, #0
 8010eb2:	4905      	ldr	r1, [pc, #20]	; (8010ec8 <_mprec_log10+0x2c>)
 8010eb4:	2200      	movs	r2, #0
 8010eb6:	4b05      	ldr	r3, [pc, #20]	; (8010ecc <_mprec_log10+0x30>)
 8010eb8:	3c01      	subs	r4, #1
 8010eba:	f7f0 fdb5 	bl	8001a28 <__aeabi_dmul>
 8010ebe:	2c00      	cmp	r4, #0
 8010ec0:	d1f8      	bne.n	8010eb4 <_mprec_log10+0x18>
 8010ec2:	e7f4      	b.n	8010eae <_mprec_log10+0x12>
 8010ec4:	08013940 	.word	0x08013940
 8010ec8:	3ff00000 	.word	0x3ff00000
 8010ecc:	40240000 	.word	0x40240000

08010ed0 <__copybits>:
 8010ed0:	b570      	push	{r4, r5, r6, lr}
 8010ed2:	0014      	movs	r4, r2
 8010ed4:	0005      	movs	r5, r0
 8010ed6:	3901      	subs	r1, #1
 8010ed8:	6913      	ldr	r3, [r2, #16]
 8010eda:	1149      	asrs	r1, r1, #5
 8010edc:	3101      	adds	r1, #1
 8010ede:	0089      	lsls	r1, r1, #2
 8010ee0:	3414      	adds	r4, #20
 8010ee2:	009b      	lsls	r3, r3, #2
 8010ee4:	1841      	adds	r1, r0, r1
 8010ee6:	18e3      	adds	r3, r4, r3
 8010ee8:	42a3      	cmp	r3, r4
 8010eea:	d80d      	bhi.n	8010f08 <__copybits+0x38>
 8010eec:	0014      	movs	r4, r2
 8010eee:	3411      	adds	r4, #17
 8010ef0:	2500      	movs	r5, #0
 8010ef2:	429c      	cmp	r4, r3
 8010ef4:	d803      	bhi.n	8010efe <__copybits+0x2e>
 8010ef6:	1a9b      	subs	r3, r3, r2
 8010ef8:	3b11      	subs	r3, #17
 8010efa:	089b      	lsrs	r3, r3, #2
 8010efc:	009d      	lsls	r5, r3, #2
 8010efe:	2300      	movs	r3, #0
 8010f00:	1940      	adds	r0, r0, r5
 8010f02:	4281      	cmp	r1, r0
 8010f04:	d803      	bhi.n	8010f0e <__copybits+0x3e>
 8010f06:	bd70      	pop	{r4, r5, r6, pc}
 8010f08:	cc40      	ldmia	r4!, {r6}
 8010f0a:	c540      	stmia	r5!, {r6}
 8010f0c:	e7ec      	b.n	8010ee8 <__copybits+0x18>
 8010f0e:	c008      	stmia	r0!, {r3}
 8010f10:	e7f7      	b.n	8010f02 <__copybits+0x32>

08010f12 <__any_on>:
 8010f12:	0002      	movs	r2, r0
 8010f14:	6900      	ldr	r0, [r0, #16]
 8010f16:	b510      	push	{r4, lr}
 8010f18:	3214      	adds	r2, #20
 8010f1a:	114b      	asrs	r3, r1, #5
 8010f1c:	4298      	cmp	r0, r3
 8010f1e:	db13      	blt.n	8010f48 <__any_on+0x36>
 8010f20:	dd0c      	ble.n	8010f3c <__any_on+0x2a>
 8010f22:	241f      	movs	r4, #31
 8010f24:	0008      	movs	r0, r1
 8010f26:	4020      	ands	r0, r4
 8010f28:	4221      	tst	r1, r4
 8010f2a:	d007      	beq.n	8010f3c <__any_on+0x2a>
 8010f2c:	0099      	lsls	r1, r3, #2
 8010f2e:	588c      	ldr	r4, [r1, r2]
 8010f30:	0021      	movs	r1, r4
 8010f32:	40c1      	lsrs	r1, r0
 8010f34:	4081      	lsls	r1, r0
 8010f36:	2001      	movs	r0, #1
 8010f38:	428c      	cmp	r4, r1
 8010f3a:	d104      	bne.n	8010f46 <__any_on+0x34>
 8010f3c:	009b      	lsls	r3, r3, #2
 8010f3e:	18d3      	adds	r3, r2, r3
 8010f40:	4293      	cmp	r3, r2
 8010f42:	d803      	bhi.n	8010f4c <__any_on+0x3a>
 8010f44:	2000      	movs	r0, #0
 8010f46:	bd10      	pop	{r4, pc}
 8010f48:	0003      	movs	r3, r0
 8010f4a:	e7f7      	b.n	8010f3c <__any_on+0x2a>
 8010f4c:	3b04      	subs	r3, #4
 8010f4e:	6819      	ldr	r1, [r3, #0]
 8010f50:	2900      	cmp	r1, #0
 8010f52:	d0f5      	beq.n	8010f40 <__any_on+0x2e>
 8010f54:	2001      	movs	r0, #1
 8010f56:	e7f6      	b.n	8010f46 <__any_on+0x34>

08010f58 <_calloc_r>:
 8010f58:	b570      	push	{r4, r5, r6, lr}
 8010f5a:	0c13      	lsrs	r3, r2, #16
 8010f5c:	0c0d      	lsrs	r5, r1, #16
 8010f5e:	d11e      	bne.n	8010f9e <_calloc_r+0x46>
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d10c      	bne.n	8010f7e <_calloc_r+0x26>
 8010f64:	b289      	uxth	r1, r1
 8010f66:	b294      	uxth	r4, r2
 8010f68:	434c      	muls	r4, r1
 8010f6a:	0021      	movs	r1, r4
 8010f6c:	f000 f842 	bl	8010ff4 <_malloc_r>
 8010f70:	1e05      	subs	r5, r0, #0
 8010f72:	d01b      	beq.n	8010fac <_calloc_r+0x54>
 8010f74:	0022      	movs	r2, r4
 8010f76:	2100      	movs	r1, #0
 8010f78:	f7fd fea7 	bl	800ecca <memset>
 8010f7c:	e016      	b.n	8010fac <_calloc_r+0x54>
 8010f7e:	1c1d      	adds	r5, r3, #0
 8010f80:	1c0b      	adds	r3, r1, #0
 8010f82:	b292      	uxth	r2, r2
 8010f84:	b289      	uxth	r1, r1
 8010f86:	b29c      	uxth	r4, r3
 8010f88:	4351      	muls	r1, r2
 8010f8a:	b2ab      	uxth	r3, r5
 8010f8c:	4363      	muls	r3, r4
 8010f8e:	0c0c      	lsrs	r4, r1, #16
 8010f90:	191c      	adds	r4, r3, r4
 8010f92:	0c22      	lsrs	r2, r4, #16
 8010f94:	d107      	bne.n	8010fa6 <_calloc_r+0x4e>
 8010f96:	0424      	lsls	r4, r4, #16
 8010f98:	b289      	uxth	r1, r1
 8010f9a:	430c      	orrs	r4, r1
 8010f9c:	e7e5      	b.n	8010f6a <_calloc_r+0x12>
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d101      	bne.n	8010fa6 <_calloc_r+0x4e>
 8010fa2:	1c13      	adds	r3, r2, #0
 8010fa4:	e7ed      	b.n	8010f82 <_calloc_r+0x2a>
 8010fa6:	230c      	movs	r3, #12
 8010fa8:	2500      	movs	r5, #0
 8010faa:	6003      	str	r3, [r0, #0]
 8010fac:	0028      	movs	r0, r5
 8010fae:	bd70      	pop	{r4, r5, r6, pc}

08010fb0 <sbrk_aligned>:
 8010fb0:	b570      	push	{r4, r5, r6, lr}
 8010fb2:	4e0f      	ldr	r6, [pc, #60]	; (8010ff0 <sbrk_aligned+0x40>)
 8010fb4:	000d      	movs	r5, r1
 8010fb6:	6831      	ldr	r1, [r6, #0]
 8010fb8:	0004      	movs	r4, r0
 8010fba:	2900      	cmp	r1, #0
 8010fbc:	d102      	bne.n	8010fc4 <sbrk_aligned+0x14>
 8010fbe:	f000 fba9 	bl	8011714 <_sbrk_r>
 8010fc2:	6030      	str	r0, [r6, #0]
 8010fc4:	0029      	movs	r1, r5
 8010fc6:	0020      	movs	r0, r4
 8010fc8:	f000 fba4 	bl	8011714 <_sbrk_r>
 8010fcc:	1c43      	adds	r3, r0, #1
 8010fce:	d00a      	beq.n	8010fe6 <sbrk_aligned+0x36>
 8010fd0:	2303      	movs	r3, #3
 8010fd2:	1cc5      	adds	r5, r0, #3
 8010fd4:	439d      	bics	r5, r3
 8010fd6:	42a8      	cmp	r0, r5
 8010fd8:	d007      	beq.n	8010fea <sbrk_aligned+0x3a>
 8010fda:	1a29      	subs	r1, r5, r0
 8010fdc:	0020      	movs	r0, r4
 8010fde:	f000 fb99 	bl	8011714 <_sbrk_r>
 8010fe2:	1c43      	adds	r3, r0, #1
 8010fe4:	d101      	bne.n	8010fea <sbrk_aligned+0x3a>
 8010fe6:	2501      	movs	r5, #1
 8010fe8:	426d      	negs	r5, r5
 8010fea:	0028      	movs	r0, r5
 8010fec:	bd70      	pop	{r4, r5, r6, pc}
 8010fee:	46c0      	nop			; (mov r8, r8)
 8010ff0:	20000d54 	.word	0x20000d54

08010ff4 <_malloc_r>:
 8010ff4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010ff6:	2203      	movs	r2, #3
 8010ff8:	1ccb      	adds	r3, r1, #3
 8010ffa:	4393      	bics	r3, r2
 8010ffc:	3308      	adds	r3, #8
 8010ffe:	0006      	movs	r6, r0
 8011000:	001f      	movs	r7, r3
 8011002:	2b0c      	cmp	r3, #12
 8011004:	d232      	bcs.n	801106c <_malloc_r+0x78>
 8011006:	270c      	movs	r7, #12
 8011008:	42b9      	cmp	r1, r7
 801100a:	d831      	bhi.n	8011070 <_malloc_r+0x7c>
 801100c:	0030      	movs	r0, r6
 801100e:	f001 fabb 	bl	8012588 <__malloc_lock>
 8011012:	4d32      	ldr	r5, [pc, #200]	; (80110dc <_malloc_r+0xe8>)
 8011014:	682b      	ldr	r3, [r5, #0]
 8011016:	001c      	movs	r4, r3
 8011018:	2c00      	cmp	r4, #0
 801101a:	d12e      	bne.n	801107a <_malloc_r+0x86>
 801101c:	0039      	movs	r1, r7
 801101e:	0030      	movs	r0, r6
 8011020:	f7ff ffc6 	bl	8010fb0 <sbrk_aligned>
 8011024:	0004      	movs	r4, r0
 8011026:	1c43      	adds	r3, r0, #1
 8011028:	d11e      	bne.n	8011068 <_malloc_r+0x74>
 801102a:	682c      	ldr	r4, [r5, #0]
 801102c:	0025      	movs	r5, r4
 801102e:	2d00      	cmp	r5, #0
 8011030:	d14a      	bne.n	80110c8 <_malloc_r+0xd4>
 8011032:	6823      	ldr	r3, [r4, #0]
 8011034:	0029      	movs	r1, r5
 8011036:	18e3      	adds	r3, r4, r3
 8011038:	0030      	movs	r0, r6
 801103a:	9301      	str	r3, [sp, #4]
 801103c:	f000 fb6a 	bl	8011714 <_sbrk_r>
 8011040:	9b01      	ldr	r3, [sp, #4]
 8011042:	4283      	cmp	r3, r0
 8011044:	d143      	bne.n	80110ce <_malloc_r+0xda>
 8011046:	6823      	ldr	r3, [r4, #0]
 8011048:	3703      	adds	r7, #3
 801104a:	1aff      	subs	r7, r7, r3
 801104c:	2303      	movs	r3, #3
 801104e:	439f      	bics	r7, r3
 8011050:	3708      	adds	r7, #8
 8011052:	2f0c      	cmp	r7, #12
 8011054:	d200      	bcs.n	8011058 <_malloc_r+0x64>
 8011056:	270c      	movs	r7, #12
 8011058:	0039      	movs	r1, r7
 801105a:	0030      	movs	r0, r6
 801105c:	f7ff ffa8 	bl	8010fb0 <sbrk_aligned>
 8011060:	1c43      	adds	r3, r0, #1
 8011062:	d034      	beq.n	80110ce <_malloc_r+0xda>
 8011064:	6823      	ldr	r3, [r4, #0]
 8011066:	19df      	adds	r7, r3, r7
 8011068:	6027      	str	r7, [r4, #0]
 801106a:	e013      	b.n	8011094 <_malloc_r+0xa0>
 801106c:	2b00      	cmp	r3, #0
 801106e:	dacb      	bge.n	8011008 <_malloc_r+0x14>
 8011070:	230c      	movs	r3, #12
 8011072:	2500      	movs	r5, #0
 8011074:	6033      	str	r3, [r6, #0]
 8011076:	0028      	movs	r0, r5
 8011078:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801107a:	6822      	ldr	r2, [r4, #0]
 801107c:	1bd1      	subs	r1, r2, r7
 801107e:	d420      	bmi.n	80110c2 <_malloc_r+0xce>
 8011080:	290b      	cmp	r1, #11
 8011082:	d917      	bls.n	80110b4 <_malloc_r+0xc0>
 8011084:	19e2      	adds	r2, r4, r7
 8011086:	6027      	str	r7, [r4, #0]
 8011088:	42a3      	cmp	r3, r4
 801108a:	d111      	bne.n	80110b0 <_malloc_r+0xbc>
 801108c:	602a      	str	r2, [r5, #0]
 801108e:	6863      	ldr	r3, [r4, #4]
 8011090:	6011      	str	r1, [r2, #0]
 8011092:	6053      	str	r3, [r2, #4]
 8011094:	0030      	movs	r0, r6
 8011096:	0025      	movs	r5, r4
 8011098:	f001 fa7e 	bl	8012598 <__malloc_unlock>
 801109c:	2207      	movs	r2, #7
 801109e:	350b      	adds	r5, #11
 80110a0:	1d23      	adds	r3, r4, #4
 80110a2:	4395      	bics	r5, r2
 80110a4:	1aea      	subs	r2, r5, r3
 80110a6:	429d      	cmp	r5, r3
 80110a8:	d0e5      	beq.n	8011076 <_malloc_r+0x82>
 80110aa:	1b5b      	subs	r3, r3, r5
 80110ac:	50a3      	str	r3, [r4, r2]
 80110ae:	e7e2      	b.n	8011076 <_malloc_r+0x82>
 80110b0:	605a      	str	r2, [r3, #4]
 80110b2:	e7ec      	b.n	801108e <_malloc_r+0x9a>
 80110b4:	6862      	ldr	r2, [r4, #4]
 80110b6:	42a3      	cmp	r3, r4
 80110b8:	d101      	bne.n	80110be <_malloc_r+0xca>
 80110ba:	602a      	str	r2, [r5, #0]
 80110bc:	e7ea      	b.n	8011094 <_malloc_r+0xa0>
 80110be:	605a      	str	r2, [r3, #4]
 80110c0:	e7e8      	b.n	8011094 <_malloc_r+0xa0>
 80110c2:	0023      	movs	r3, r4
 80110c4:	6864      	ldr	r4, [r4, #4]
 80110c6:	e7a7      	b.n	8011018 <_malloc_r+0x24>
 80110c8:	002c      	movs	r4, r5
 80110ca:	686d      	ldr	r5, [r5, #4]
 80110cc:	e7af      	b.n	801102e <_malloc_r+0x3a>
 80110ce:	230c      	movs	r3, #12
 80110d0:	0030      	movs	r0, r6
 80110d2:	6033      	str	r3, [r6, #0]
 80110d4:	f001 fa60 	bl	8012598 <__malloc_unlock>
 80110d8:	e7cd      	b.n	8011076 <_malloc_r+0x82>
 80110da:	46c0      	nop			; (mov r8, r8)
 80110dc:	20000d50 	.word	0x20000d50

080110e0 <_realloc_r>:
 80110e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80110e2:	0007      	movs	r7, r0
 80110e4:	000e      	movs	r6, r1
 80110e6:	0014      	movs	r4, r2
 80110e8:	2900      	cmp	r1, #0
 80110ea:	d105      	bne.n	80110f8 <_realloc_r+0x18>
 80110ec:	0011      	movs	r1, r2
 80110ee:	f7ff ff81 	bl	8010ff4 <_malloc_r>
 80110f2:	0005      	movs	r5, r0
 80110f4:	0028      	movs	r0, r5
 80110f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80110f8:	2a00      	cmp	r2, #0
 80110fa:	d103      	bne.n	8011104 <_realloc_r+0x24>
 80110fc:	f001 fa54 	bl	80125a8 <_free_r>
 8011100:	0025      	movs	r5, r4
 8011102:	e7f7      	b.n	80110f4 <_realloc_r+0x14>
 8011104:	f001 fa9a 	bl	801263c <_malloc_usable_size_r>
 8011108:	9001      	str	r0, [sp, #4]
 801110a:	4284      	cmp	r4, r0
 801110c:	d803      	bhi.n	8011116 <_realloc_r+0x36>
 801110e:	0035      	movs	r5, r6
 8011110:	0843      	lsrs	r3, r0, #1
 8011112:	42a3      	cmp	r3, r4
 8011114:	d3ee      	bcc.n	80110f4 <_realloc_r+0x14>
 8011116:	0021      	movs	r1, r4
 8011118:	0038      	movs	r0, r7
 801111a:	f7ff ff6b 	bl	8010ff4 <_malloc_r>
 801111e:	1e05      	subs	r5, r0, #0
 8011120:	d0e8      	beq.n	80110f4 <_realloc_r+0x14>
 8011122:	9b01      	ldr	r3, [sp, #4]
 8011124:	0022      	movs	r2, r4
 8011126:	429c      	cmp	r4, r3
 8011128:	d900      	bls.n	801112c <_realloc_r+0x4c>
 801112a:	001a      	movs	r2, r3
 801112c:	0031      	movs	r1, r6
 801112e:	0028      	movs	r0, r5
 8011130:	f7fd fdc2 	bl	800ecb8 <memcpy>
 8011134:	0031      	movs	r1, r6
 8011136:	0038      	movs	r0, r7
 8011138:	f001 fa36 	bl	80125a8 <_free_r>
 801113c:	e7da      	b.n	80110f4 <_realloc_r+0x14>
	...

08011140 <__ssputs_r>:
 8011140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011142:	688e      	ldr	r6, [r1, #8]
 8011144:	b085      	sub	sp, #20
 8011146:	0007      	movs	r7, r0
 8011148:	000c      	movs	r4, r1
 801114a:	9203      	str	r2, [sp, #12]
 801114c:	9301      	str	r3, [sp, #4]
 801114e:	429e      	cmp	r6, r3
 8011150:	d83c      	bhi.n	80111cc <__ssputs_r+0x8c>
 8011152:	2390      	movs	r3, #144	; 0x90
 8011154:	898a      	ldrh	r2, [r1, #12]
 8011156:	00db      	lsls	r3, r3, #3
 8011158:	421a      	tst	r2, r3
 801115a:	d034      	beq.n	80111c6 <__ssputs_r+0x86>
 801115c:	6909      	ldr	r1, [r1, #16]
 801115e:	6823      	ldr	r3, [r4, #0]
 8011160:	6960      	ldr	r0, [r4, #20]
 8011162:	1a5b      	subs	r3, r3, r1
 8011164:	9302      	str	r3, [sp, #8]
 8011166:	2303      	movs	r3, #3
 8011168:	4343      	muls	r3, r0
 801116a:	0fdd      	lsrs	r5, r3, #31
 801116c:	18ed      	adds	r5, r5, r3
 801116e:	9b01      	ldr	r3, [sp, #4]
 8011170:	9802      	ldr	r0, [sp, #8]
 8011172:	3301      	adds	r3, #1
 8011174:	181b      	adds	r3, r3, r0
 8011176:	106d      	asrs	r5, r5, #1
 8011178:	42ab      	cmp	r3, r5
 801117a:	d900      	bls.n	801117e <__ssputs_r+0x3e>
 801117c:	001d      	movs	r5, r3
 801117e:	0553      	lsls	r3, r2, #21
 8011180:	d532      	bpl.n	80111e8 <__ssputs_r+0xa8>
 8011182:	0029      	movs	r1, r5
 8011184:	0038      	movs	r0, r7
 8011186:	f7ff ff35 	bl	8010ff4 <_malloc_r>
 801118a:	1e06      	subs	r6, r0, #0
 801118c:	d109      	bne.n	80111a2 <__ssputs_r+0x62>
 801118e:	230c      	movs	r3, #12
 8011190:	603b      	str	r3, [r7, #0]
 8011192:	2340      	movs	r3, #64	; 0x40
 8011194:	2001      	movs	r0, #1
 8011196:	89a2      	ldrh	r2, [r4, #12]
 8011198:	4240      	negs	r0, r0
 801119a:	4313      	orrs	r3, r2
 801119c:	81a3      	strh	r3, [r4, #12]
 801119e:	b005      	add	sp, #20
 80111a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80111a2:	9a02      	ldr	r2, [sp, #8]
 80111a4:	6921      	ldr	r1, [r4, #16]
 80111a6:	f7fd fd87 	bl	800ecb8 <memcpy>
 80111aa:	89a3      	ldrh	r3, [r4, #12]
 80111ac:	4a14      	ldr	r2, [pc, #80]	; (8011200 <__ssputs_r+0xc0>)
 80111ae:	401a      	ands	r2, r3
 80111b0:	2380      	movs	r3, #128	; 0x80
 80111b2:	4313      	orrs	r3, r2
 80111b4:	81a3      	strh	r3, [r4, #12]
 80111b6:	9b02      	ldr	r3, [sp, #8]
 80111b8:	6126      	str	r6, [r4, #16]
 80111ba:	18f6      	adds	r6, r6, r3
 80111bc:	6026      	str	r6, [r4, #0]
 80111be:	6165      	str	r5, [r4, #20]
 80111c0:	9e01      	ldr	r6, [sp, #4]
 80111c2:	1aed      	subs	r5, r5, r3
 80111c4:	60a5      	str	r5, [r4, #8]
 80111c6:	9b01      	ldr	r3, [sp, #4]
 80111c8:	429e      	cmp	r6, r3
 80111ca:	d900      	bls.n	80111ce <__ssputs_r+0x8e>
 80111cc:	9e01      	ldr	r6, [sp, #4]
 80111ce:	0032      	movs	r2, r6
 80111d0:	9903      	ldr	r1, [sp, #12]
 80111d2:	6820      	ldr	r0, [r4, #0]
 80111d4:	f001 f9c5 	bl	8012562 <memmove>
 80111d8:	68a3      	ldr	r3, [r4, #8]
 80111da:	2000      	movs	r0, #0
 80111dc:	1b9b      	subs	r3, r3, r6
 80111de:	60a3      	str	r3, [r4, #8]
 80111e0:	6823      	ldr	r3, [r4, #0]
 80111e2:	199e      	adds	r6, r3, r6
 80111e4:	6026      	str	r6, [r4, #0]
 80111e6:	e7da      	b.n	801119e <__ssputs_r+0x5e>
 80111e8:	002a      	movs	r2, r5
 80111ea:	0038      	movs	r0, r7
 80111ec:	f7ff ff78 	bl	80110e0 <_realloc_r>
 80111f0:	1e06      	subs	r6, r0, #0
 80111f2:	d1e0      	bne.n	80111b6 <__ssputs_r+0x76>
 80111f4:	0038      	movs	r0, r7
 80111f6:	6921      	ldr	r1, [r4, #16]
 80111f8:	f001 f9d6 	bl	80125a8 <_free_r>
 80111fc:	e7c7      	b.n	801118e <__ssputs_r+0x4e>
 80111fe:	46c0      	nop			; (mov r8, r8)
 8011200:	fffffb7f 	.word	0xfffffb7f

08011204 <_svfiprintf_r>:
 8011204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011206:	b0a1      	sub	sp, #132	; 0x84
 8011208:	9003      	str	r0, [sp, #12]
 801120a:	001d      	movs	r5, r3
 801120c:	898b      	ldrh	r3, [r1, #12]
 801120e:	000f      	movs	r7, r1
 8011210:	0016      	movs	r6, r2
 8011212:	061b      	lsls	r3, r3, #24
 8011214:	d511      	bpl.n	801123a <_svfiprintf_r+0x36>
 8011216:	690b      	ldr	r3, [r1, #16]
 8011218:	2b00      	cmp	r3, #0
 801121a:	d10e      	bne.n	801123a <_svfiprintf_r+0x36>
 801121c:	2140      	movs	r1, #64	; 0x40
 801121e:	f7ff fee9 	bl	8010ff4 <_malloc_r>
 8011222:	6038      	str	r0, [r7, #0]
 8011224:	6138      	str	r0, [r7, #16]
 8011226:	2800      	cmp	r0, #0
 8011228:	d105      	bne.n	8011236 <_svfiprintf_r+0x32>
 801122a:	230c      	movs	r3, #12
 801122c:	9a03      	ldr	r2, [sp, #12]
 801122e:	3801      	subs	r0, #1
 8011230:	6013      	str	r3, [r2, #0]
 8011232:	b021      	add	sp, #132	; 0x84
 8011234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011236:	2340      	movs	r3, #64	; 0x40
 8011238:	617b      	str	r3, [r7, #20]
 801123a:	2300      	movs	r3, #0
 801123c:	ac08      	add	r4, sp, #32
 801123e:	6163      	str	r3, [r4, #20]
 8011240:	3320      	adds	r3, #32
 8011242:	7663      	strb	r3, [r4, #25]
 8011244:	3310      	adds	r3, #16
 8011246:	76a3      	strb	r3, [r4, #26]
 8011248:	9507      	str	r5, [sp, #28]
 801124a:	0035      	movs	r5, r6
 801124c:	782b      	ldrb	r3, [r5, #0]
 801124e:	2b00      	cmp	r3, #0
 8011250:	d001      	beq.n	8011256 <_svfiprintf_r+0x52>
 8011252:	2b25      	cmp	r3, #37	; 0x25
 8011254:	d147      	bne.n	80112e6 <_svfiprintf_r+0xe2>
 8011256:	1bab      	subs	r3, r5, r6
 8011258:	9305      	str	r3, [sp, #20]
 801125a:	42b5      	cmp	r5, r6
 801125c:	d00c      	beq.n	8011278 <_svfiprintf_r+0x74>
 801125e:	0032      	movs	r2, r6
 8011260:	0039      	movs	r1, r7
 8011262:	9803      	ldr	r0, [sp, #12]
 8011264:	f7ff ff6c 	bl	8011140 <__ssputs_r>
 8011268:	1c43      	adds	r3, r0, #1
 801126a:	d100      	bne.n	801126e <_svfiprintf_r+0x6a>
 801126c:	e0ae      	b.n	80113cc <_svfiprintf_r+0x1c8>
 801126e:	6962      	ldr	r2, [r4, #20]
 8011270:	9b05      	ldr	r3, [sp, #20]
 8011272:	4694      	mov	ip, r2
 8011274:	4463      	add	r3, ip
 8011276:	6163      	str	r3, [r4, #20]
 8011278:	782b      	ldrb	r3, [r5, #0]
 801127a:	2b00      	cmp	r3, #0
 801127c:	d100      	bne.n	8011280 <_svfiprintf_r+0x7c>
 801127e:	e0a5      	b.n	80113cc <_svfiprintf_r+0x1c8>
 8011280:	2201      	movs	r2, #1
 8011282:	2300      	movs	r3, #0
 8011284:	4252      	negs	r2, r2
 8011286:	6062      	str	r2, [r4, #4]
 8011288:	a904      	add	r1, sp, #16
 801128a:	3254      	adds	r2, #84	; 0x54
 801128c:	1852      	adds	r2, r2, r1
 801128e:	1c6e      	adds	r6, r5, #1
 8011290:	6023      	str	r3, [r4, #0]
 8011292:	60e3      	str	r3, [r4, #12]
 8011294:	60a3      	str	r3, [r4, #8]
 8011296:	7013      	strb	r3, [r2, #0]
 8011298:	65a3      	str	r3, [r4, #88]	; 0x58
 801129a:	2205      	movs	r2, #5
 801129c:	7831      	ldrb	r1, [r6, #0]
 801129e:	4854      	ldr	r0, [pc, #336]	; (80113f0 <_svfiprintf_r+0x1ec>)
 80112a0:	f001 f954 	bl	801254c <memchr>
 80112a4:	1c75      	adds	r5, r6, #1
 80112a6:	2800      	cmp	r0, #0
 80112a8:	d11f      	bne.n	80112ea <_svfiprintf_r+0xe6>
 80112aa:	6822      	ldr	r2, [r4, #0]
 80112ac:	06d3      	lsls	r3, r2, #27
 80112ae:	d504      	bpl.n	80112ba <_svfiprintf_r+0xb6>
 80112b0:	2353      	movs	r3, #83	; 0x53
 80112b2:	a904      	add	r1, sp, #16
 80112b4:	185b      	adds	r3, r3, r1
 80112b6:	2120      	movs	r1, #32
 80112b8:	7019      	strb	r1, [r3, #0]
 80112ba:	0713      	lsls	r3, r2, #28
 80112bc:	d504      	bpl.n	80112c8 <_svfiprintf_r+0xc4>
 80112be:	2353      	movs	r3, #83	; 0x53
 80112c0:	a904      	add	r1, sp, #16
 80112c2:	185b      	adds	r3, r3, r1
 80112c4:	212b      	movs	r1, #43	; 0x2b
 80112c6:	7019      	strb	r1, [r3, #0]
 80112c8:	7833      	ldrb	r3, [r6, #0]
 80112ca:	2b2a      	cmp	r3, #42	; 0x2a
 80112cc:	d016      	beq.n	80112fc <_svfiprintf_r+0xf8>
 80112ce:	0035      	movs	r5, r6
 80112d0:	2100      	movs	r1, #0
 80112d2:	200a      	movs	r0, #10
 80112d4:	68e3      	ldr	r3, [r4, #12]
 80112d6:	782a      	ldrb	r2, [r5, #0]
 80112d8:	1c6e      	adds	r6, r5, #1
 80112da:	3a30      	subs	r2, #48	; 0x30
 80112dc:	2a09      	cmp	r2, #9
 80112de:	d94e      	bls.n	801137e <_svfiprintf_r+0x17a>
 80112e0:	2900      	cmp	r1, #0
 80112e2:	d111      	bne.n	8011308 <_svfiprintf_r+0x104>
 80112e4:	e017      	b.n	8011316 <_svfiprintf_r+0x112>
 80112e6:	3501      	adds	r5, #1
 80112e8:	e7b0      	b.n	801124c <_svfiprintf_r+0x48>
 80112ea:	4b41      	ldr	r3, [pc, #260]	; (80113f0 <_svfiprintf_r+0x1ec>)
 80112ec:	6822      	ldr	r2, [r4, #0]
 80112ee:	1ac0      	subs	r0, r0, r3
 80112f0:	2301      	movs	r3, #1
 80112f2:	4083      	lsls	r3, r0
 80112f4:	4313      	orrs	r3, r2
 80112f6:	002e      	movs	r6, r5
 80112f8:	6023      	str	r3, [r4, #0]
 80112fa:	e7ce      	b.n	801129a <_svfiprintf_r+0x96>
 80112fc:	9b07      	ldr	r3, [sp, #28]
 80112fe:	1d19      	adds	r1, r3, #4
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	9107      	str	r1, [sp, #28]
 8011304:	2b00      	cmp	r3, #0
 8011306:	db01      	blt.n	801130c <_svfiprintf_r+0x108>
 8011308:	930b      	str	r3, [sp, #44]	; 0x2c
 801130a:	e004      	b.n	8011316 <_svfiprintf_r+0x112>
 801130c:	425b      	negs	r3, r3
 801130e:	60e3      	str	r3, [r4, #12]
 8011310:	2302      	movs	r3, #2
 8011312:	4313      	orrs	r3, r2
 8011314:	6023      	str	r3, [r4, #0]
 8011316:	782b      	ldrb	r3, [r5, #0]
 8011318:	2b2e      	cmp	r3, #46	; 0x2e
 801131a:	d10a      	bne.n	8011332 <_svfiprintf_r+0x12e>
 801131c:	786b      	ldrb	r3, [r5, #1]
 801131e:	2b2a      	cmp	r3, #42	; 0x2a
 8011320:	d135      	bne.n	801138e <_svfiprintf_r+0x18a>
 8011322:	9b07      	ldr	r3, [sp, #28]
 8011324:	3502      	adds	r5, #2
 8011326:	1d1a      	adds	r2, r3, #4
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	9207      	str	r2, [sp, #28]
 801132c:	2b00      	cmp	r3, #0
 801132e:	db2b      	blt.n	8011388 <_svfiprintf_r+0x184>
 8011330:	9309      	str	r3, [sp, #36]	; 0x24
 8011332:	4e30      	ldr	r6, [pc, #192]	; (80113f4 <_svfiprintf_r+0x1f0>)
 8011334:	2203      	movs	r2, #3
 8011336:	0030      	movs	r0, r6
 8011338:	7829      	ldrb	r1, [r5, #0]
 801133a:	f001 f907 	bl	801254c <memchr>
 801133e:	2800      	cmp	r0, #0
 8011340:	d006      	beq.n	8011350 <_svfiprintf_r+0x14c>
 8011342:	2340      	movs	r3, #64	; 0x40
 8011344:	1b80      	subs	r0, r0, r6
 8011346:	4083      	lsls	r3, r0
 8011348:	6822      	ldr	r2, [r4, #0]
 801134a:	3501      	adds	r5, #1
 801134c:	4313      	orrs	r3, r2
 801134e:	6023      	str	r3, [r4, #0]
 8011350:	7829      	ldrb	r1, [r5, #0]
 8011352:	2206      	movs	r2, #6
 8011354:	4828      	ldr	r0, [pc, #160]	; (80113f8 <_svfiprintf_r+0x1f4>)
 8011356:	1c6e      	adds	r6, r5, #1
 8011358:	7621      	strb	r1, [r4, #24]
 801135a:	f001 f8f7 	bl	801254c <memchr>
 801135e:	2800      	cmp	r0, #0
 8011360:	d03c      	beq.n	80113dc <_svfiprintf_r+0x1d8>
 8011362:	4b26      	ldr	r3, [pc, #152]	; (80113fc <_svfiprintf_r+0x1f8>)
 8011364:	2b00      	cmp	r3, #0
 8011366:	d125      	bne.n	80113b4 <_svfiprintf_r+0x1b0>
 8011368:	2207      	movs	r2, #7
 801136a:	9b07      	ldr	r3, [sp, #28]
 801136c:	3307      	adds	r3, #7
 801136e:	4393      	bics	r3, r2
 8011370:	3308      	adds	r3, #8
 8011372:	9307      	str	r3, [sp, #28]
 8011374:	6963      	ldr	r3, [r4, #20]
 8011376:	9a04      	ldr	r2, [sp, #16]
 8011378:	189b      	adds	r3, r3, r2
 801137a:	6163      	str	r3, [r4, #20]
 801137c:	e765      	b.n	801124a <_svfiprintf_r+0x46>
 801137e:	4343      	muls	r3, r0
 8011380:	0035      	movs	r5, r6
 8011382:	2101      	movs	r1, #1
 8011384:	189b      	adds	r3, r3, r2
 8011386:	e7a6      	b.n	80112d6 <_svfiprintf_r+0xd2>
 8011388:	2301      	movs	r3, #1
 801138a:	425b      	negs	r3, r3
 801138c:	e7d0      	b.n	8011330 <_svfiprintf_r+0x12c>
 801138e:	2300      	movs	r3, #0
 8011390:	200a      	movs	r0, #10
 8011392:	001a      	movs	r2, r3
 8011394:	3501      	adds	r5, #1
 8011396:	6063      	str	r3, [r4, #4]
 8011398:	7829      	ldrb	r1, [r5, #0]
 801139a:	1c6e      	adds	r6, r5, #1
 801139c:	3930      	subs	r1, #48	; 0x30
 801139e:	2909      	cmp	r1, #9
 80113a0:	d903      	bls.n	80113aa <_svfiprintf_r+0x1a6>
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d0c5      	beq.n	8011332 <_svfiprintf_r+0x12e>
 80113a6:	9209      	str	r2, [sp, #36]	; 0x24
 80113a8:	e7c3      	b.n	8011332 <_svfiprintf_r+0x12e>
 80113aa:	4342      	muls	r2, r0
 80113ac:	0035      	movs	r5, r6
 80113ae:	2301      	movs	r3, #1
 80113b0:	1852      	adds	r2, r2, r1
 80113b2:	e7f1      	b.n	8011398 <_svfiprintf_r+0x194>
 80113b4:	ab07      	add	r3, sp, #28
 80113b6:	9300      	str	r3, [sp, #0]
 80113b8:	003a      	movs	r2, r7
 80113ba:	0021      	movs	r1, r4
 80113bc:	4b10      	ldr	r3, [pc, #64]	; (8011400 <_svfiprintf_r+0x1fc>)
 80113be:	9803      	ldr	r0, [sp, #12]
 80113c0:	e000      	b.n	80113c4 <_svfiprintf_r+0x1c0>
 80113c2:	bf00      	nop
 80113c4:	9004      	str	r0, [sp, #16]
 80113c6:	9b04      	ldr	r3, [sp, #16]
 80113c8:	3301      	adds	r3, #1
 80113ca:	d1d3      	bne.n	8011374 <_svfiprintf_r+0x170>
 80113cc:	89bb      	ldrh	r3, [r7, #12]
 80113ce:	980d      	ldr	r0, [sp, #52]	; 0x34
 80113d0:	065b      	lsls	r3, r3, #25
 80113d2:	d400      	bmi.n	80113d6 <_svfiprintf_r+0x1d2>
 80113d4:	e72d      	b.n	8011232 <_svfiprintf_r+0x2e>
 80113d6:	2001      	movs	r0, #1
 80113d8:	4240      	negs	r0, r0
 80113da:	e72a      	b.n	8011232 <_svfiprintf_r+0x2e>
 80113dc:	ab07      	add	r3, sp, #28
 80113de:	9300      	str	r3, [sp, #0]
 80113e0:	003a      	movs	r2, r7
 80113e2:	0021      	movs	r1, r4
 80113e4:	4b06      	ldr	r3, [pc, #24]	; (8011400 <_svfiprintf_r+0x1fc>)
 80113e6:	9803      	ldr	r0, [sp, #12]
 80113e8:	f000 f87c 	bl	80114e4 <_printf_i>
 80113ec:	e7ea      	b.n	80113c4 <_svfiprintf_r+0x1c0>
 80113ee:	46c0      	nop			; (mov r8, r8)
 80113f0:	08013a14 	.word	0x08013a14
 80113f4:	08013a1a 	.word	0x08013a1a
 80113f8:	08013a1e 	.word	0x08013a1e
 80113fc:	00000000 	.word	0x00000000
 8011400:	08011141 	.word	0x08011141

08011404 <_printf_common>:
 8011404:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011406:	0015      	movs	r5, r2
 8011408:	9301      	str	r3, [sp, #4]
 801140a:	688a      	ldr	r2, [r1, #8]
 801140c:	690b      	ldr	r3, [r1, #16]
 801140e:	000c      	movs	r4, r1
 8011410:	9000      	str	r0, [sp, #0]
 8011412:	4293      	cmp	r3, r2
 8011414:	da00      	bge.n	8011418 <_printf_common+0x14>
 8011416:	0013      	movs	r3, r2
 8011418:	0022      	movs	r2, r4
 801141a:	602b      	str	r3, [r5, #0]
 801141c:	3243      	adds	r2, #67	; 0x43
 801141e:	7812      	ldrb	r2, [r2, #0]
 8011420:	2a00      	cmp	r2, #0
 8011422:	d001      	beq.n	8011428 <_printf_common+0x24>
 8011424:	3301      	adds	r3, #1
 8011426:	602b      	str	r3, [r5, #0]
 8011428:	6823      	ldr	r3, [r4, #0]
 801142a:	069b      	lsls	r3, r3, #26
 801142c:	d502      	bpl.n	8011434 <_printf_common+0x30>
 801142e:	682b      	ldr	r3, [r5, #0]
 8011430:	3302      	adds	r3, #2
 8011432:	602b      	str	r3, [r5, #0]
 8011434:	6822      	ldr	r2, [r4, #0]
 8011436:	2306      	movs	r3, #6
 8011438:	0017      	movs	r7, r2
 801143a:	401f      	ands	r7, r3
 801143c:	421a      	tst	r2, r3
 801143e:	d027      	beq.n	8011490 <_printf_common+0x8c>
 8011440:	0023      	movs	r3, r4
 8011442:	3343      	adds	r3, #67	; 0x43
 8011444:	781b      	ldrb	r3, [r3, #0]
 8011446:	1e5a      	subs	r2, r3, #1
 8011448:	4193      	sbcs	r3, r2
 801144a:	6822      	ldr	r2, [r4, #0]
 801144c:	0692      	lsls	r2, r2, #26
 801144e:	d430      	bmi.n	80114b2 <_printf_common+0xae>
 8011450:	0022      	movs	r2, r4
 8011452:	9901      	ldr	r1, [sp, #4]
 8011454:	9800      	ldr	r0, [sp, #0]
 8011456:	9e08      	ldr	r6, [sp, #32]
 8011458:	3243      	adds	r2, #67	; 0x43
 801145a:	47b0      	blx	r6
 801145c:	1c43      	adds	r3, r0, #1
 801145e:	d025      	beq.n	80114ac <_printf_common+0xa8>
 8011460:	2306      	movs	r3, #6
 8011462:	6820      	ldr	r0, [r4, #0]
 8011464:	682a      	ldr	r2, [r5, #0]
 8011466:	68e1      	ldr	r1, [r4, #12]
 8011468:	2500      	movs	r5, #0
 801146a:	4003      	ands	r3, r0
 801146c:	2b04      	cmp	r3, #4
 801146e:	d103      	bne.n	8011478 <_printf_common+0x74>
 8011470:	1a8d      	subs	r5, r1, r2
 8011472:	43eb      	mvns	r3, r5
 8011474:	17db      	asrs	r3, r3, #31
 8011476:	401d      	ands	r5, r3
 8011478:	68a3      	ldr	r3, [r4, #8]
 801147a:	6922      	ldr	r2, [r4, #16]
 801147c:	4293      	cmp	r3, r2
 801147e:	dd01      	ble.n	8011484 <_printf_common+0x80>
 8011480:	1a9b      	subs	r3, r3, r2
 8011482:	18ed      	adds	r5, r5, r3
 8011484:	2700      	movs	r7, #0
 8011486:	42bd      	cmp	r5, r7
 8011488:	d120      	bne.n	80114cc <_printf_common+0xc8>
 801148a:	2000      	movs	r0, #0
 801148c:	e010      	b.n	80114b0 <_printf_common+0xac>
 801148e:	3701      	adds	r7, #1
 8011490:	68e3      	ldr	r3, [r4, #12]
 8011492:	682a      	ldr	r2, [r5, #0]
 8011494:	1a9b      	subs	r3, r3, r2
 8011496:	42bb      	cmp	r3, r7
 8011498:	ddd2      	ble.n	8011440 <_printf_common+0x3c>
 801149a:	0022      	movs	r2, r4
 801149c:	2301      	movs	r3, #1
 801149e:	9901      	ldr	r1, [sp, #4]
 80114a0:	9800      	ldr	r0, [sp, #0]
 80114a2:	9e08      	ldr	r6, [sp, #32]
 80114a4:	3219      	adds	r2, #25
 80114a6:	47b0      	blx	r6
 80114a8:	1c43      	adds	r3, r0, #1
 80114aa:	d1f0      	bne.n	801148e <_printf_common+0x8a>
 80114ac:	2001      	movs	r0, #1
 80114ae:	4240      	negs	r0, r0
 80114b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80114b2:	2030      	movs	r0, #48	; 0x30
 80114b4:	18e1      	adds	r1, r4, r3
 80114b6:	3143      	adds	r1, #67	; 0x43
 80114b8:	7008      	strb	r0, [r1, #0]
 80114ba:	0021      	movs	r1, r4
 80114bc:	1c5a      	adds	r2, r3, #1
 80114be:	3145      	adds	r1, #69	; 0x45
 80114c0:	7809      	ldrb	r1, [r1, #0]
 80114c2:	18a2      	adds	r2, r4, r2
 80114c4:	3243      	adds	r2, #67	; 0x43
 80114c6:	3302      	adds	r3, #2
 80114c8:	7011      	strb	r1, [r2, #0]
 80114ca:	e7c1      	b.n	8011450 <_printf_common+0x4c>
 80114cc:	0022      	movs	r2, r4
 80114ce:	2301      	movs	r3, #1
 80114d0:	9901      	ldr	r1, [sp, #4]
 80114d2:	9800      	ldr	r0, [sp, #0]
 80114d4:	9e08      	ldr	r6, [sp, #32]
 80114d6:	321a      	adds	r2, #26
 80114d8:	47b0      	blx	r6
 80114da:	1c43      	adds	r3, r0, #1
 80114dc:	d0e6      	beq.n	80114ac <_printf_common+0xa8>
 80114de:	3701      	adds	r7, #1
 80114e0:	e7d1      	b.n	8011486 <_printf_common+0x82>
	...

080114e4 <_printf_i>:
 80114e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80114e6:	b08b      	sub	sp, #44	; 0x2c
 80114e8:	9206      	str	r2, [sp, #24]
 80114ea:	000a      	movs	r2, r1
 80114ec:	3243      	adds	r2, #67	; 0x43
 80114ee:	9307      	str	r3, [sp, #28]
 80114f0:	9005      	str	r0, [sp, #20]
 80114f2:	9204      	str	r2, [sp, #16]
 80114f4:	7e0a      	ldrb	r2, [r1, #24]
 80114f6:	000c      	movs	r4, r1
 80114f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80114fa:	2a78      	cmp	r2, #120	; 0x78
 80114fc:	d807      	bhi.n	801150e <_printf_i+0x2a>
 80114fe:	2a62      	cmp	r2, #98	; 0x62
 8011500:	d809      	bhi.n	8011516 <_printf_i+0x32>
 8011502:	2a00      	cmp	r2, #0
 8011504:	d100      	bne.n	8011508 <_printf_i+0x24>
 8011506:	e0c1      	b.n	801168c <_printf_i+0x1a8>
 8011508:	2a58      	cmp	r2, #88	; 0x58
 801150a:	d100      	bne.n	801150e <_printf_i+0x2a>
 801150c:	e08c      	b.n	8011628 <_printf_i+0x144>
 801150e:	0026      	movs	r6, r4
 8011510:	3642      	adds	r6, #66	; 0x42
 8011512:	7032      	strb	r2, [r6, #0]
 8011514:	e022      	b.n	801155c <_printf_i+0x78>
 8011516:	0010      	movs	r0, r2
 8011518:	3863      	subs	r0, #99	; 0x63
 801151a:	2815      	cmp	r0, #21
 801151c:	d8f7      	bhi.n	801150e <_printf_i+0x2a>
 801151e:	f7ee fe0b 	bl	8000138 <__gnu_thumb1_case_shi>
 8011522:	0016      	.short	0x0016
 8011524:	fff6001f 	.word	0xfff6001f
 8011528:	fff6fff6 	.word	0xfff6fff6
 801152c:	001ffff6 	.word	0x001ffff6
 8011530:	fff6fff6 	.word	0xfff6fff6
 8011534:	fff6fff6 	.word	0xfff6fff6
 8011538:	003600a8 	.word	0x003600a8
 801153c:	fff6009a 	.word	0xfff6009a
 8011540:	00b9fff6 	.word	0x00b9fff6
 8011544:	0036fff6 	.word	0x0036fff6
 8011548:	fff6fff6 	.word	0xfff6fff6
 801154c:	009e      	.short	0x009e
 801154e:	0026      	movs	r6, r4
 8011550:	681a      	ldr	r2, [r3, #0]
 8011552:	3642      	adds	r6, #66	; 0x42
 8011554:	1d11      	adds	r1, r2, #4
 8011556:	6019      	str	r1, [r3, #0]
 8011558:	6813      	ldr	r3, [r2, #0]
 801155a:	7033      	strb	r3, [r6, #0]
 801155c:	2301      	movs	r3, #1
 801155e:	e0a7      	b.n	80116b0 <_printf_i+0x1cc>
 8011560:	6808      	ldr	r0, [r1, #0]
 8011562:	6819      	ldr	r1, [r3, #0]
 8011564:	1d0a      	adds	r2, r1, #4
 8011566:	0605      	lsls	r5, r0, #24
 8011568:	d50b      	bpl.n	8011582 <_printf_i+0x9e>
 801156a:	680d      	ldr	r5, [r1, #0]
 801156c:	601a      	str	r2, [r3, #0]
 801156e:	2d00      	cmp	r5, #0
 8011570:	da03      	bge.n	801157a <_printf_i+0x96>
 8011572:	232d      	movs	r3, #45	; 0x2d
 8011574:	9a04      	ldr	r2, [sp, #16]
 8011576:	426d      	negs	r5, r5
 8011578:	7013      	strb	r3, [r2, #0]
 801157a:	4b61      	ldr	r3, [pc, #388]	; (8011700 <_printf_i+0x21c>)
 801157c:	270a      	movs	r7, #10
 801157e:	9303      	str	r3, [sp, #12]
 8011580:	e01b      	b.n	80115ba <_printf_i+0xd6>
 8011582:	680d      	ldr	r5, [r1, #0]
 8011584:	601a      	str	r2, [r3, #0]
 8011586:	0641      	lsls	r1, r0, #25
 8011588:	d5f1      	bpl.n	801156e <_printf_i+0x8a>
 801158a:	b22d      	sxth	r5, r5
 801158c:	e7ef      	b.n	801156e <_printf_i+0x8a>
 801158e:	680d      	ldr	r5, [r1, #0]
 8011590:	6819      	ldr	r1, [r3, #0]
 8011592:	1d08      	adds	r0, r1, #4
 8011594:	6018      	str	r0, [r3, #0]
 8011596:	062e      	lsls	r6, r5, #24
 8011598:	d501      	bpl.n	801159e <_printf_i+0xba>
 801159a:	680d      	ldr	r5, [r1, #0]
 801159c:	e003      	b.n	80115a6 <_printf_i+0xc2>
 801159e:	066d      	lsls	r5, r5, #25
 80115a0:	d5fb      	bpl.n	801159a <_printf_i+0xb6>
 80115a2:	680d      	ldr	r5, [r1, #0]
 80115a4:	b2ad      	uxth	r5, r5
 80115a6:	4b56      	ldr	r3, [pc, #344]	; (8011700 <_printf_i+0x21c>)
 80115a8:	2708      	movs	r7, #8
 80115aa:	9303      	str	r3, [sp, #12]
 80115ac:	2a6f      	cmp	r2, #111	; 0x6f
 80115ae:	d000      	beq.n	80115b2 <_printf_i+0xce>
 80115b0:	3702      	adds	r7, #2
 80115b2:	0023      	movs	r3, r4
 80115b4:	2200      	movs	r2, #0
 80115b6:	3343      	adds	r3, #67	; 0x43
 80115b8:	701a      	strb	r2, [r3, #0]
 80115ba:	6863      	ldr	r3, [r4, #4]
 80115bc:	60a3      	str	r3, [r4, #8]
 80115be:	2b00      	cmp	r3, #0
 80115c0:	db03      	blt.n	80115ca <_printf_i+0xe6>
 80115c2:	2204      	movs	r2, #4
 80115c4:	6821      	ldr	r1, [r4, #0]
 80115c6:	4391      	bics	r1, r2
 80115c8:	6021      	str	r1, [r4, #0]
 80115ca:	2d00      	cmp	r5, #0
 80115cc:	d102      	bne.n	80115d4 <_printf_i+0xf0>
 80115ce:	9e04      	ldr	r6, [sp, #16]
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d00c      	beq.n	80115ee <_printf_i+0x10a>
 80115d4:	9e04      	ldr	r6, [sp, #16]
 80115d6:	0028      	movs	r0, r5
 80115d8:	0039      	movs	r1, r7
 80115da:	f7ee fe3d 	bl	8000258 <__aeabi_uidivmod>
 80115de:	9b03      	ldr	r3, [sp, #12]
 80115e0:	3e01      	subs	r6, #1
 80115e2:	5c5b      	ldrb	r3, [r3, r1]
 80115e4:	7033      	strb	r3, [r6, #0]
 80115e6:	002b      	movs	r3, r5
 80115e8:	0005      	movs	r5, r0
 80115ea:	429f      	cmp	r7, r3
 80115ec:	d9f3      	bls.n	80115d6 <_printf_i+0xf2>
 80115ee:	2f08      	cmp	r7, #8
 80115f0:	d109      	bne.n	8011606 <_printf_i+0x122>
 80115f2:	6823      	ldr	r3, [r4, #0]
 80115f4:	07db      	lsls	r3, r3, #31
 80115f6:	d506      	bpl.n	8011606 <_printf_i+0x122>
 80115f8:	6863      	ldr	r3, [r4, #4]
 80115fa:	6922      	ldr	r2, [r4, #16]
 80115fc:	4293      	cmp	r3, r2
 80115fe:	dc02      	bgt.n	8011606 <_printf_i+0x122>
 8011600:	2330      	movs	r3, #48	; 0x30
 8011602:	3e01      	subs	r6, #1
 8011604:	7033      	strb	r3, [r6, #0]
 8011606:	9b04      	ldr	r3, [sp, #16]
 8011608:	1b9b      	subs	r3, r3, r6
 801160a:	6123      	str	r3, [r4, #16]
 801160c:	9b07      	ldr	r3, [sp, #28]
 801160e:	0021      	movs	r1, r4
 8011610:	9300      	str	r3, [sp, #0]
 8011612:	9805      	ldr	r0, [sp, #20]
 8011614:	9b06      	ldr	r3, [sp, #24]
 8011616:	aa09      	add	r2, sp, #36	; 0x24
 8011618:	f7ff fef4 	bl	8011404 <_printf_common>
 801161c:	1c43      	adds	r3, r0, #1
 801161e:	d14c      	bne.n	80116ba <_printf_i+0x1d6>
 8011620:	2001      	movs	r0, #1
 8011622:	4240      	negs	r0, r0
 8011624:	b00b      	add	sp, #44	; 0x2c
 8011626:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011628:	3145      	adds	r1, #69	; 0x45
 801162a:	700a      	strb	r2, [r1, #0]
 801162c:	4a34      	ldr	r2, [pc, #208]	; (8011700 <_printf_i+0x21c>)
 801162e:	9203      	str	r2, [sp, #12]
 8011630:	681a      	ldr	r2, [r3, #0]
 8011632:	6821      	ldr	r1, [r4, #0]
 8011634:	ca20      	ldmia	r2!, {r5}
 8011636:	601a      	str	r2, [r3, #0]
 8011638:	0608      	lsls	r0, r1, #24
 801163a:	d516      	bpl.n	801166a <_printf_i+0x186>
 801163c:	07cb      	lsls	r3, r1, #31
 801163e:	d502      	bpl.n	8011646 <_printf_i+0x162>
 8011640:	2320      	movs	r3, #32
 8011642:	4319      	orrs	r1, r3
 8011644:	6021      	str	r1, [r4, #0]
 8011646:	2710      	movs	r7, #16
 8011648:	2d00      	cmp	r5, #0
 801164a:	d1b2      	bne.n	80115b2 <_printf_i+0xce>
 801164c:	2320      	movs	r3, #32
 801164e:	6822      	ldr	r2, [r4, #0]
 8011650:	439a      	bics	r2, r3
 8011652:	6022      	str	r2, [r4, #0]
 8011654:	e7ad      	b.n	80115b2 <_printf_i+0xce>
 8011656:	2220      	movs	r2, #32
 8011658:	6809      	ldr	r1, [r1, #0]
 801165a:	430a      	orrs	r2, r1
 801165c:	6022      	str	r2, [r4, #0]
 801165e:	0022      	movs	r2, r4
 8011660:	2178      	movs	r1, #120	; 0x78
 8011662:	3245      	adds	r2, #69	; 0x45
 8011664:	7011      	strb	r1, [r2, #0]
 8011666:	4a27      	ldr	r2, [pc, #156]	; (8011704 <_printf_i+0x220>)
 8011668:	e7e1      	b.n	801162e <_printf_i+0x14a>
 801166a:	0648      	lsls	r0, r1, #25
 801166c:	d5e6      	bpl.n	801163c <_printf_i+0x158>
 801166e:	b2ad      	uxth	r5, r5
 8011670:	e7e4      	b.n	801163c <_printf_i+0x158>
 8011672:	681a      	ldr	r2, [r3, #0]
 8011674:	680d      	ldr	r5, [r1, #0]
 8011676:	1d10      	adds	r0, r2, #4
 8011678:	6949      	ldr	r1, [r1, #20]
 801167a:	6018      	str	r0, [r3, #0]
 801167c:	6813      	ldr	r3, [r2, #0]
 801167e:	062e      	lsls	r6, r5, #24
 8011680:	d501      	bpl.n	8011686 <_printf_i+0x1a2>
 8011682:	6019      	str	r1, [r3, #0]
 8011684:	e002      	b.n	801168c <_printf_i+0x1a8>
 8011686:	066d      	lsls	r5, r5, #25
 8011688:	d5fb      	bpl.n	8011682 <_printf_i+0x19e>
 801168a:	8019      	strh	r1, [r3, #0]
 801168c:	2300      	movs	r3, #0
 801168e:	9e04      	ldr	r6, [sp, #16]
 8011690:	6123      	str	r3, [r4, #16]
 8011692:	e7bb      	b.n	801160c <_printf_i+0x128>
 8011694:	681a      	ldr	r2, [r3, #0]
 8011696:	1d11      	adds	r1, r2, #4
 8011698:	6019      	str	r1, [r3, #0]
 801169a:	6816      	ldr	r6, [r2, #0]
 801169c:	2100      	movs	r1, #0
 801169e:	0030      	movs	r0, r6
 80116a0:	6862      	ldr	r2, [r4, #4]
 80116a2:	f000 ff53 	bl	801254c <memchr>
 80116a6:	2800      	cmp	r0, #0
 80116a8:	d001      	beq.n	80116ae <_printf_i+0x1ca>
 80116aa:	1b80      	subs	r0, r0, r6
 80116ac:	6060      	str	r0, [r4, #4]
 80116ae:	6863      	ldr	r3, [r4, #4]
 80116b0:	6123      	str	r3, [r4, #16]
 80116b2:	2300      	movs	r3, #0
 80116b4:	9a04      	ldr	r2, [sp, #16]
 80116b6:	7013      	strb	r3, [r2, #0]
 80116b8:	e7a8      	b.n	801160c <_printf_i+0x128>
 80116ba:	6923      	ldr	r3, [r4, #16]
 80116bc:	0032      	movs	r2, r6
 80116be:	9906      	ldr	r1, [sp, #24]
 80116c0:	9805      	ldr	r0, [sp, #20]
 80116c2:	9d07      	ldr	r5, [sp, #28]
 80116c4:	47a8      	blx	r5
 80116c6:	1c43      	adds	r3, r0, #1
 80116c8:	d0aa      	beq.n	8011620 <_printf_i+0x13c>
 80116ca:	6823      	ldr	r3, [r4, #0]
 80116cc:	079b      	lsls	r3, r3, #30
 80116ce:	d415      	bmi.n	80116fc <_printf_i+0x218>
 80116d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80116d2:	68e0      	ldr	r0, [r4, #12]
 80116d4:	4298      	cmp	r0, r3
 80116d6:	daa5      	bge.n	8011624 <_printf_i+0x140>
 80116d8:	0018      	movs	r0, r3
 80116da:	e7a3      	b.n	8011624 <_printf_i+0x140>
 80116dc:	0022      	movs	r2, r4
 80116de:	2301      	movs	r3, #1
 80116e0:	9906      	ldr	r1, [sp, #24]
 80116e2:	9805      	ldr	r0, [sp, #20]
 80116e4:	9e07      	ldr	r6, [sp, #28]
 80116e6:	3219      	adds	r2, #25
 80116e8:	47b0      	blx	r6
 80116ea:	1c43      	adds	r3, r0, #1
 80116ec:	d098      	beq.n	8011620 <_printf_i+0x13c>
 80116ee:	3501      	adds	r5, #1
 80116f0:	68e3      	ldr	r3, [r4, #12]
 80116f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80116f4:	1a9b      	subs	r3, r3, r2
 80116f6:	42ab      	cmp	r3, r5
 80116f8:	dcf0      	bgt.n	80116dc <_printf_i+0x1f8>
 80116fa:	e7e9      	b.n	80116d0 <_printf_i+0x1ec>
 80116fc:	2500      	movs	r5, #0
 80116fe:	e7f7      	b.n	80116f0 <_printf_i+0x20c>
 8011700:	08013a25 	.word	0x08013a25
 8011704:	08013a36 	.word	0x08013a36

08011708 <nan>:
 8011708:	2000      	movs	r0, #0
 801170a:	4901      	ldr	r1, [pc, #4]	; (8011710 <nan+0x8>)
 801170c:	4770      	bx	lr
 801170e:	46c0      	nop			; (mov r8, r8)
 8011710:	7ff80000 	.word	0x7ff80000

08011714 <_sbrk_r>:
 8011714:	2300      	movs	r3, #0
 8011716:	b570      	push	{r4, r5, r6, lr}
 8011718:	4d06      	ldr	r5, [pc, #24]	; (8011734 <_sbrk_r+0x20>)
 801171a:	0004      	movs	r4, r0
 801171c:	0008      	movs	r0, r1
 801171e:	602b      	str	r3, [r5, #0]
 8011720:	f7f7 fb72 	bl	8008e08 <_sbrk>
 8011724:	1c43      	adds	r3, r0, #1
 8011726:	d103      	bne.n	8011730 <_sbrk_r+0x1c>
 8011728:	682b      	ldr	r3, [r5, #0]
 801172a:	2b00      	cmp	r3, #0
 801172c:	d000      	beq.n	8011730 <_sbrk_r+0x1c>
 801172e:	6023      	str	r3, [r4, #0]
 8011730:	bd70      	pop	{r4, r5, r6, pc}
 8011732:	46c0      	nop			; (mov r8, r8)
 8011734:	20000d58 	.word	0x20000d58

08011738 <nanf>:
 8011738:	4800      	ldr	r0, [pc, #0]	; (801173c <nanf+0x4>)
 801173a:	4770      	bx	lr
 801173c:	7fc00000 	.word	0x7fc00000

08011740 <strcpy>:
 8011740:	0003      	movs	r3, r0
 8011742:	780a      	ldrb	r2, [r1, #0]
 8011744:	3101      	adds	r1, #1
 8011746:	701a      	strb	r2, [r3, #0]
 8011748:	3301      	adds	r3, #1
 801174a:	2a00      	cmp	r2, #0
 801174c:	d1f9      	bne.n	8011742 <strcpy+0x2>
 801174e:	4770      	bx	lr

08011750 <strncmp>:
 8011750:	b530      	push	{r4, r5, lr}
 8011752:	0005      	movs	r5, r0
 8011754:	1e10      	subs	r0, r2, #0
 8011756:	d008      	beq.n	801176a <strncmp+0x1a>
 8011758:	2400      	movs	r4, #0
 801175a:	3a01      	subs	r2, #1
 801175c:	5d2b      	ldrb	r3, [r5, r4]
 801175e:	5d08      	ldrb	r0, [r1, r4]
 8011760:	4283      	cmp	r3, r0
 8011762:	d101      	bne.n	8011768 <strncmp+0x18>
 8011764:	4294      	cmp	r4, r2
 8011766:	d101      	bne.n	801176c <strncmp+0x1c>
 8011768:	1a18      	subs	r0, r3, r0
 801176a:	bd30      	pop	{r4, r5, pc}
 801176c:	3401      	adds	r4, #1
 801176e:	2b00      	cmp	r3, #0
 8011770:	d1f4      	bne.n	801175c <strncmp+0xc>
 8011772:	e7f9      	b.n	8011768 <strncmp+0x18>

08011774 <__ascii_wctomb>:
 8011774:	0003      	movs	r3, r0
 8011776:	1e08      	subs	r0, r1, #0
 8011778:	d005      	beq.n	8011786 <__ascii_wctomb+0x12>
 801177a:	2aff      	cmp	r2, #255	; 0xff
 801177c:	d904      	bls.n	8011788 <__ascii_wctomb+0x14>
 801177e:	228a      	movs	r2, #138	; 0x8a
 8011780:	2001      	movs	r0, #1
 8011782:	601a      	str	r2, [r3, #0]
 8011784:	4240      	negs	r0, r0
 8011786:	4770      	bx	lr
 8011788:	2001      	movs	r0, #1
 801178a:	700a      	strb	r2, [r1, #0]
 801178c:	e7fb      	b.n	8011786 <__ascii_wctomb+0x12>
	...

08011790 <__assert_func>:
 8011790:	b530      	push	{r4, r5, lr}
 8011792:	0014      	movs	r4, r2
 8011794:	001a      	movs	r2, r3
 8011796:	4b09      	ldr	r3, [pc, #36]	; (80117bc <__assert_func+0x2c>)
 8011798:	0005      	movs	r5, r0
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	b085      	sub	sp, #20
 801179e:	68d8      	ldr	r0, [r3, #12]
 80117a0:	4b07      	ldr	r3, [pc, #28]	; (80117c0 <__assert_func+0x30>)
 80117a2:	2c00      	cmp	r4, #0
 80117a4:	d101      	bne.n	80117aa <__assert_func+0x1a>
 80117a6:	4b07      	ldr	r3, [pc, #28]	; (80117c4 <__assert_func+0x34>)
 80117a8:	001c      	movs	r4, r3
 80117aa:	9301      	str	r3, [sp, #4]
 80117ac:	9100      	str	r1, [sp, #0]
 80117ae:	002b      	movs	r3, r5
 80117b0:	4905      	ldr	r1, [pc, #20]	; (80117c8 <__assert_func+0x38>)
 80117b2:	9402      	str	r4, [sp, #8]
 80117b4:	f000 feb0 	bl	8012518 <fiprintf>
 80117b8:	f001 f978 	bl	8012aac <abort>
 80117bc:	200000e4 	.word	0x200000e4
 80117c0:	08013a47 	.word	0x08013a47
 80117c4:	08013a82 	.word	0x08013a82
 80117c8:	08013a54 	.word	0x08013a54

080117cc <quorem>:
 80117cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80117ce:	0006      	movs	r6, r0
 80117d0:	690b      	ldr	r3, [r1, #16]
 80117d2:	6932      	ldr	r2, [r6, #16]
 80117d4:	b087      	sub	sp, #28
 80117d6:	2000      	movs	r0, #0
 80117d8:	9103      	str	r1, [sp, #12]
 80117da:	429a      	cmp	r2, r3
 80117dc:	db65      	blt.n	80118aa <quorem+0xde>
 80117de:	3b01      	subs	r3, #1
 80117e0:	009c      	lsls	r4, r3, #2
 80117e2:	9300      	str	r3, [sp, #0]
 80117e4:	000b      	movs	r3, r1
 80117e6:	3314      	adds	r3, #20
 80117e8:	9305      	str	r3, [sp, #20]
 80117ea:	191b      	adds	r3, r3, r4
 80117ec:	9304      	str	r3, [sp, #16]
 80117ee:	0033      	movs	r3, r6
 80117f0:	3314      	adds	r3, #20
 80117f2:	9302      	str	r3, [sp, #8]
 80117f4:	191c      	adds	r4, r3, r4
 80117f6:	9b04      	ldr	r3, [sp, #16]
 80117f8:	6827      	ldr	r7, [r4, #0]
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	0038      	movs	r0, r7
 80117fe:	1c5d      	adds	r5, r3, #1
 8011800:	0029      	movs	r1, r5
 8011802:	9301      	str	r3, [sp, #4]
 8011804:	f7ee fca2 	bl	800014c <__udivsi3>
 8011808:	9001      	str	r0, [sp, #4]
 801180a:	42af      	cmp	r7, r5
 801180c:	d324      	bcc.n	8011858 <quorem+0x8c>
 801180e:	2500      	movs	r5, #0
 8011810:	46ac      	mov	ip, r5
 8011812:	9802      	ldr	r0, [sp, #8]
 8011814:	9f05      	ldr	r7, [sp, #20]
 8011816:	cf08      	ldmia	r7!, {r3}
 8011818:	9a01      	ldr	r2, [sp, #4]
 801181a:	b299      	uxth	r1, r3
 801181c:	4351      	muls	r1, r2
 801181e:	0c1b      	lsrs	r3, r3, #16
 8011820:	4353      	muls	r3, r2
 8011822:	1949      	adds	r1, r1, r5
 8011824:	0c0a      	lsrs	r2, r1, #16
 8011826:	189b      	adds	r3, r3, r2
 8011828:	6802      	ldr	r2, [r0, #0]
 801182a:	b289      	uxth	r1, r1
 801182c:	b292      	uxth	r2, r2
 801182e:	4462      	add	r2, ip
 8011830:	1a52      	subs	r2, r2, r1
 8011832:	6801      	ldr	r1, [r0, #0]
 8011834:	0c1d      	lsrs	r5, r3, #16
 8011836:	0c09      	lsrs	r1, r1, #16
 8011838:	b29b      	uxth	r3, r3
 801183a:	1acb      	subs	r3, r1, r3
 801183c:	1411      	asrs	r1, r2, #16
 801183e:	185b      	adds	r3, r3, r1
 8011840:	1419      	asrs	r1, r3, #16
 8011842:	b292      	uxth	r2, r2
 8011844:	041b      	lsls	r3, r3, #16
 8011846:	431a      	orrs	r2, r3
 8011848:	9b04      	ldr	r3, [sp, #16]
 801184a:	468c      	mov	ip, r1
 801184c:	c004      	stmia	r0!, {r2}
 801184e:	42bb      	cmp	r3, r7
 8011850:	d2e1      	bcs.n	8011816 <quorem+0x4a>
 8011852:	6823      	ldr	r3, [r4, #0]
 8011854:	2b00      	cmp	r3, #0
 8011856:	d030      	beq.n	80118ba <quorem+0xee>
 8011858:	0030      	movs	r0, r6
 801185a:	9903      	ldr	r1, [sp, #12]
 801185c:	f7ff f968 	bl	8010b30 <__mcmp>
 8011860:	2800      	cmp	r0, #0
 8011862:	db21      	blt.n	80118a8 <quorem+0xdc>
 8011864:	0030      	movs	r0, r6
 8011866:	2400      	movs	r4, #0
 8011868:	9b01      	ldr	r3, [sp, #4]
 801186a:	9903      	ldr	r1, [sp, #12]
 801186c:	3301      	adds	r3, #1
 801186e:	9301      	str	r3, [sp, #4]
 8011870:	3014      	adds	r0, #20
 8011872:	3114      	adds	r1, #20
 8011874:	6803      	ldr	r3, [r0, #0]
 8011876:	c920      	ldmia	r1!, {r5}
 8011878:	b29a      	uxth	r2, r3
 801187a:	1914      	adds	r4, r2, r4
 801187c:	b2aa      	uxth	r2, r5
 801187e:	1aa2      	subs	r2, r4, r2
 8011880:	0c1b      	lsrs	r3, r3, #16
 8011882:	0c2d      	lsrs	r5, r5, #16
 8011884:	1414      	asrs	r4, r2, #16
 8011886:	1b5b      	subs	r3, r3, r5
 8011888:	191b      	adds	r3, r3, r4
 801188a:	141c      	asrs	r4, r3, #16
 801188c:	b292      	uxth	r2, r2
 801188e:	041b      	lsls	r3, r3, #16
 8011890:	4313      	orrs	r3, r2
 8011892:	c008      	stmia	r0!, {r3}
 8011894:	9b04      	ldr	r3, [sp, #16]
 8011896:	428b      	cmp	r3, r1
 8011898:	d2ec      	bcs.n	8011874 <quorem+0xa8>
 801189a:	9b00      	ldr	r3, [sp, #0]
 801189c:	9a02      	ldr	r2, [sp, #8]
 801189e:	009b      	lsls	r3, r3, #2
 80118a0:	18d3      	adds	r3, r2, r3
 80118a2:	681a      	ldr	r2, [r3, #0]
 80118a4:	2a00      	cmp	r2, #0
 80118a6:	d015      	beq.n	80118d4 <quorem+0x108>
 80118a8:	9801      	ldr	r0, [sp, #4]
 80118aa:	b007      	add	sp, #28
 80118ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80118ae:	6823      	ldr	r3, [r4, #0]
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d106      	bne.n	80118c2 <quorem+0xf6>
 80118b4:	9b00      	ldr	r3, [sp, #0]
 80118b6:	3b01      	subs	r3, #1
 80118b8:	9300      	str	r3, [sp, #0]
 80118ba:	9b02      	ldr	r3, [sp, #8]
 80118bc:	3c04      	subs	r4, #4
 80118be:	42a3      	cmp	r3, r4
 80118c0:	d3f5      	bcc.n	80118ae <quorem+0xe2>
 80118c2:	9b00      	ldr	r3, [sp, #0]
 80118c4:	6133      	str	r3, [r6, #16]
 80118c6:	e7c7      	b.n	8011858 <quorem+0x8c>
 80118c8:	681a      	ldr	r2, [r3, #0]
 80118ca:	2a00      	cmp	r2, #0
 80118cc:	d106      	bne.n	80118dc <quorem+0x110>
 80118ce:	9a00      	ldr	r2, [sp, #0]
 80118d0:	3a01      	subs	r2, #1
 80118d2:	9200      	str	r2, [sp, #0]
 80118d4:	9a02      	ldr	r2, [sp, #8]
 80118d6:	3b04      	subs	r3, #4
 80118d8:	429a      	cmp	r2, r3
 80118da:	d3f5      	bcc.n	80118c8 <quorem+0xfc>
 80118dc:	9b00      	ldr	r3, [sp, #0]
 80118de:	6133      	str	r3, [r6, #16]
 80118e0:	e7e2      	b.n	80118a8 <quorem+0xdc>
	...

080118e4 <_dtoa_r>:
 80118e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80118e6:	b09d      	sub	sp, #116	; 0x74
 80118e8:	9202      	str	r2, [sp, #8]
 80118ea:	9303      	str	r3, [sp, #12]
 80118ec:	9b02      	ldr	r3, [sp, #8]
 80118ee:	9c03      	ldr	r4, [sp, #12]
 80118f0:	9308      	str	r3, [sp, #32]
 80118f2:	9409      	str	r4, [sp, #36]	; 0x24
 80118f4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80118f6:	0007      	movs	r7, r0
 80118f8:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80118fa:	2c00      	cmp	r4, #0
 80118fc:	d10e      	bne.n	801191c <_dtoa_r+0x38>
 80118fe:	2010      	movs	r0, #16
 8011900:	f000 fe1a 	bl	8012538 <malloc>
 8011904:	1e02      	subs	r2, r0, #0
 8011906:	6278      	str	r0, [r7, #36]	; 0x24
 8011908:	d104      	bne.n	8011914 <_dtoa_r+0x30>
 801190a:	21ea      	movs	r1, #234	; 0xea
 801190c:	4bc7      	ldr	r3, [pc, #796]	; (8011c2c <_dtoa_r+0x348>)
 801190e:	48c8      	ldr	r0, [pc, #800]	; (8011c30 <_dtoa_r+0x34c>)
 8011910:	f7ff ff3e 	bl	8011790 <__assert_func>
 8011914:	6044      	str	r4, [r0, #4]
 8011916:	6084      	str	r4, [r0, #8]
 8011918:	6004      	str	r4, [r0, #0]
 801191a:	60c4      	str	r4, [r0, #12]
 801191c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801191e:	6819      	ldr	r1, [r3, #0]
 8011920:	2900      	cmp	r1, #0
 8011922:	d00a      	beq.n	801193a <_dtoa_r+0x56>
 8011924:	685a      	ldr	r2, [r3, #4]
 8011926:	2301      	movs	r3, #1
 8011928:	4093      	lsls	r3, r2
 801192a:	604a      	str	r2, [r1, #4]
 801192c:	608b      	str	r3, [r1, #8]
 801192e:	0038      	movs	r0, r7
 8011930:	f7fe fe72 	bl	8010618 <_Bfree>
 8011934:	2200      	movs	r2, #0
 8011936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011938:	601a      	str	r2, [r3, #0]
 801193a:	9b03      	ldr	r3, [sp, #12]
 801193c:	2b00      	cmp	r3, #0
 801193e:	da20      	bge.n	8011982 <_dtoa_r+0x9e>
 8011940:	2301      	movs	r3, #1
 8011942:	602b      	str	r3, [r5, #0]
 8011944:	9b03      	ldr	r3, [sp, #12]
 8011946:	005b      	lsls	r3, r3, #1
 8011948:	085b      	lsrs	r3, r3, #1
 801194a:	9309      	str	r3, [sp, #36]	; 0x24
 801194c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801194e:	4bb9      	ldr	r3, [pc, #740]	; (8011c34 <_dtoa_r+0x350>)
 8011950:	4ab8      	ldr	r2, [pc, #736]	; (8011c34 <_dtoa_r+0x350>)
 8011952:	402b      	ands	r3, r5
 8011954:	4293      	cmp	r3, r2
 8011956:	d117      	bne.n	8011988 <_dtoa_r+0xa4>
 8011958:	4bb7      	ldr	r3, [pc, #732]	; (8011c38 <_dtoa_r+0x354>)
 801195a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801195c:	0328      	lsls	r0, r5, #12
 801195e:	6013      	str	r3, [r2, #0]
 8011960:	9b02      	ldr	r3, [sp, #8]
 8011962:	0b00      	lsrs	r0, r0, #12
 8011964:	4318      	orrs	r0, r3
 8011966:	d101      	bne.n	801196c <_dtoa_r+0x88>
 8011968:	f000 fdbf 	bl	80124ea <_dtoa_r+0xc06>
 801196c:	48b3      	ldr	r0, [pc, #716]	; (8011c3c <_dtoa_r+0x358>)
 801196e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011970:	9006      	str	r0, [sp, #24]
 8011972:	2b00      	cmp	r3, #0
 8011974:	d002      	beq.n	801197c <_dtoa_r+0x98>
 8011976:	4bb2      	ldr	r3, [pc, #712]	; (8011c40 <_dtoa_r+0x35c>)
 8011978:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801197a:	6013      	str	r3, [r2, #0]
 801197c:	9806      	ldr	r0, [sp, #24]
 801197e:	b01d      	add	sp, #116	; 0x74
 8011980:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011982:	2300      	movs	r3, #0
 8011984:	602b      	str	r3, [r5, #0]
 8011986:	e7e1      	b.n	801194c <_dtoa_r+0x68>
 8011988:	9b08      	ldr	r3, [sp, #32]
 801198a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801198c:	9312      	str	r3, [sp, #72]	; 0x48
 801198e:	9413      	str	r4, [sp, #76]	; 0x4c
 8011990:	9812      	ldr	r0, [sp, #72]	; 0x48
 8011992:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8011994:	2200      	movs	r2, #0
 8011996:	2300      	movs	r3, #0
 8011998:	f7ee fd5e 	bl	8000458 <__aeabi_dcmpeq>
 801199c:	1e04      	subs	r4, r0, #0
 801199e:	d009      	beq.n	80119b4 <_dtoa_r+0xd0>
 80119a0:	2301      	movs	r3, #1
 80119a2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80119a4:	6013      	str	r3, [r2, #0]
 80119a6:	4ba7      	ldr	r3, [pc, #668]	; (8011c44 <_dtoa_r+0x360>)
 80119a8:	9306      	str	r3, [sp, #24]
 80119aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d0e5      	beq.n	801197c <_dtoa_r+0x98>
 80119b0:	4ba5      	ldr	r3, [pc, #660]	; (8011c48 <_dtoa_r+0x364>)
 80119b2:	e7e1      	b.n	8011978 <_dtoa_r+0x94>
 80119b4:	ab1a      	add	r3, sp, #104	; 0x68
 80119b6:	9301      	str	r3, [sp, #4]
 80119b8:	ab1b      	add	r3, sp, #108	; 0x6c
 80119ba:	9300      	str	r3, [sp, #0]
 80119bc:	0038      	movs	r0, r7
 80119be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80119c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80119c2:	f7ff f9dd 	bl	8010d80 <__d2b>
 80119c6:	006e      	lsls	r6, r5, #1
 80119c8:	9005      	str	r0, [sp, #20]
 80119ca:	0d76      	lsrs	r6, r6, #21
 80119cc:	d100      	bne.n	80119d0 <_dtoa_r+0xec>
 80119ce:	e07c      	b.n	8011aca <_dtoa_r+0x1e6>
 80119d0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80119d2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80119d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80119d6:	4a9d      	ldr	r2, [pc, #628]	; (8011c4c <_dtoa_r+0x368>)
 80119d8:	031b      	lsls	r3, r3, #12
 80119da:	0b1b      	lsrs	r3, r3, #12
 80119dc:	431a      	orrs	r2, r3
 80119de:	0011      	movs	r1, r2
 80119e0:	4b9b      	ldr	r3, [pc, #620]	; (8011c50 <_dtoa_r+0x36c>)
 80119e2:	9418      	str	r4, [sp, #96]	; 0x60
 80119e4:	18f6      	adds	r6, r6, r3
 80119e6:	2200      	movs	r2, #0
 80119e8:	4b9a      	ldr	r3, [pc, #616]	; (8011c54 <_dtoa_r+0x370>)
 80119ea:	f7f0 fa89 	bl	8001f00 <__aeabi_dsub>
 80119ee:	4a9a      	ldr	r2, [pc, #616]	; (8011c58 <_dtoa_r+0x374>)
 80119f0:	4b9a      	ldr	r3, [pc, #616]	; (8011c5c <_dtoa_r+0x378>)
 80119f2:	f7f0 f819 	bl	8001a28 <__aeabi_dmul>
 80119f6:	4a9a      	ldr	r2, [pc, #616]	; (8011c60 <_dtoa_r+0x37c>)
 80119f8:	4b9a      	ldr	r3, [pc, #616]	; (8011c64 <_dtoa_r+0x380>)
 80119fa:	f7ef f8d7 	bl	8000bac <__aeabi_dadd>
 80119fe:	0004      	movs	r4, r0
 8011a00:	0030      	movs	r0, r6
 8011a02:	000d      	movs	r5, r1
 8011a04:	f7f0 fe62 	bl	80026cc <__aeabi_i2d>
 8011a08:	4a97      	ldr	r2, [pc, #604]	; (8011c68 <_dtoa_r+0x384>)
 8011a0a:	4b98      	ldr	r3, [pc, #608]	; (8011c6c <_dtoa_r+0x388>)
 8011a0c:	f7f0 f80c 	bl	8001a28 <__aeabi_dmul>
 8011a10:	0002      	movs	r2, r0
 8011a12:	000b      	movs	r3, r1
 8011a14:	0020      	movs	r0, r4
 8011a16:	0029      	movs	r1, r5
 8011a18:	f7ef f8c8 	bl	8000bac <__aeabi_dadd>
 8011a1c:	0004      	movs	r4, r0
 8011a1e:	000d      	movs	r5, r1
 8011a20:	f7f0 fe1e 	bl	8002660 <__aeabi_d2iz>
 8011a24:	2200      	movs	r2, #0
 8011a26:	9002      	str	r0, [sp, #8]
 8011a28:	2300      	movs	r3, #0
 8011a2a:	0020      	movs	r0, r4
 8011a2c:	0029      	movs	r1, r5
 8011a2e:	f7ee fd19 	bl	8000464 <__aeabi_dcmplt>
 8011a32:	2800      	cmp	r0, #0
 8011a34:	d00b      	beq.n	8011a4e <_dtoa_r+0x16a>
 8011a36:	9802      	ldr	r0, [sp, #8]
 8011a38:	f7f0 fe48 	bl	80026cc <__aeabi_i2d>
 8011a3c:	002b      	movs	r3, r5
 8011a3e:	0022      	movs	r2, r4
 8011a40:	f7ee fd0a 	bl	8000458 <__aeabi_dcmpeq>
 8011a44:	4243      	negs	r3, r0
 8011a46:	4158      	adcs	r0, r3
 8011a48:	9b02      	ldr	r3, [sp, #8]
 8011a4a:	1a1b      	subs	r3, r3, r0
 8011a4c:	9302      	str	r3, [sp, #8]
 8011a4e:	2301      	movs	r3, #1
 8011a50:	9316      	str	r3, [sp, #88]	; 0x58
 8011a52:	9b02      	ldr	r3, [sp, #8]
 8011a54:	2b16      	cmp	r3, #22
 8011a56:	d80f      	bhi.n	8011a78 <_dtoa_r+0x194>
 8011a58:	9812      	ldr	r0, [sp, #72]	; 0x48
 8011a5a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8011a5c:	00da      	lsls	r2, r3, #3
 8011a5e:	4b84      	ldr	r3, [pc, #528]	; (8011c70 <_dtoa_r+0x38c>)
 8011a60:	189b      	adds	r3, r3, r2
 8011a62:	681a      	ldr	r2, [r3, #0]
 8011a64:	685b      	ldr	r3, [r3, #4]
 8011a66:	f7ee fcfd 	bl	8000464 <__aeabi_dcmplt>
 8011a6a:	2800      	cmp	r0, #0
 8011a6c:	d049      	beq.n	8011b02 <_dtoa_r+0x21e>
 8011a6e:	9b02      	ldr	r3, [sp, #8]
 8011a70:	3b01      	subs	r3, #1
 8011a72:	9302      	str	r3, [sp, #8]
 8011a74:	2300      	movs	r3, #0
 8011a76:	9316      	str	r3, [sp, #88]	; 0x58
 8011a78:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8011a7a:	1b9e      	subs	r6, r3, r6
 8011a7c:	2300      	movs	r3, #0
 8011a7e:	930a      	str	r3, [sp, #40]	; 0x28
 8011a80:	0033      	movs	r3, r6
 8011a82:	3b01      	subs	r3, #1
 8011a84:	930d      	str	r3, [sp, #52]	; 0x34
 8011a86:	d504      	bpl.n	8011a92 <_dtoa_r+0x1ae>
 8011a88:	2301      	movs	r3, #1
 8011a8a:	1b9b      	subs	r3, r3, r6
 8011a8c:	930a      	str	r3, [sp, #40]	; 0x28
 8011a8e:	2300      	movs	r3, #0
 8011a90:	930d      	str	r3, [sp, #52]	; 0x34
 8011a92:	9b02      	ldr	r3, [sp, #8]
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	db36      	blt.n	8011b06 <_dtoa_r+0x222>
 8011a98:	9a02      	ldr	r2, [sp, #8]
 8011a9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011a9c:	4694      	mov	ip, r2
 8011a9e:	4463      	add	r3, ip
 8011aa0:	930d      	str	r3, [sp, #52]	; 0x34
 8011aa2:	2300      	movs	r3, #0
 8011aa4:	9215      	str	r2, [sp, #84]	; 0x54
 8011aa6:	930e      	str	r3, [sp, #56]	; 0x38
 8011aa8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011aaa:	2401      	movs	r4, #1
 8011aac:	2b09      	cmp	r3, #9
 8011aae:	d864      	bhi.n	8011b7a <_dtoa_r+0x296>
 8011ab0:	2b05      	cmp	r3, #5
 8011ab2:	dd02      	ble.n	8011aba <_dtoa_r+0x1d6>
 8011ab4:	2400      	movs	r4, #0
 8011ab6:	3b04      	subs	r3, #4
 8011ab8:	9322      	str	r3, [sp, #136]	; 0x88
 8011aba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011abc:	1e98      	subs	r0, r3, #2
 8011abe:	2803      	cmp	r0, #3
 8011ac0:	d864      	bhi.n	8011b8c <_dtoa_r+0x2a8>
 8011ac2:	f7ee fb2f 	bl	8000124 <__gnu_thumb1_case_uqi>
 8011ac6:	3829      	.short	0x3829
 8011ac8:	5836      	.short	0x5836
 8011aca:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8011acc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8011ace:	189e      	adds	r6, r3, r2
 8011ad0:	4b68      	ldr	r3, [pc, #416]	; (8011c74 <_dtoa_r+0x390>)
 8011ad2:	18f2      	adds	r2, r6, r3
 8011ad4:	2a20      	cmp	r2, #32
 8011ad6:	dd0f      	ble.n	8011af8 <_dtoa_r+0x214>
 8011ad8:	2340      	movs	r3, #64	; 0x40
 8011ada:	1a9b      	subs	r3, r3, r2
 8011adc:	409d      	lsls	r5, r3
 8011ade:	4b66      	ldr	r3, [pc, #408]	; (8011c78 <_dtoa_r+0x394>)
 8011ae0:	9802      	ldr	r0, [sp, #8]
 8011ae2:	18f3      	adds	r3, r6, r3
 8011ae4:	40d8      	lsrs	r0, r3
 8011ae6:	4328      	orrs	r0, r5
 8011ae8:	f7f0 fe20 	bl	800272c <__aeabi_ui2d>
 8011aec:	2301      	movs	r3, #1
 8011aee:	4c63      	ldr	r4, [pc, #396]	; (8011c7c <_dtoa_r+0x398>)
 8011af0:	3e01      	subs	r6, #1
 8011af2:	1909      	adds	r1, r1, r4
 8011af4:	9318      	str	r3, [sp, #96]	; 0x60
 8011af6:	e776      	b.n	80119e6 <_dtoa_r+0x102>
 8011af8:	2320      	movs	r3, #32
 8011afa:	9802      	ldr	r0, [sp, #8]
 8011afc:	1a9b      	subs	r3, r3, r2
 8011afe:	4098      	lsls	r0, r3
 8011b00:	e7f2      	b.n	8011ae8 <_dtoa_r+0x204>
 8011b02:	9016      	str	r0, [sp, #88]	; 0x58
 8011b04:	e7b8      	b.n	8011a78 <_dtoa_r+0x194>
 8011b06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b08:	9a02      	ldr	r2, [sp, #8]
 8011b0a:	1a9b      	subs	r3, r3, r2
 8011b0c:	930a      	str	r3, [sp, #40]	; 0x28
 8011b0e:	4253      	negs	r3, r2
 8011b10:	930e      	str	r3, [sp, #56]	; 0x38
 8011b12:	2300      	movs	r3, #0
 8011b14:	9315      	str	r3, [sp, #84]	; 0x54
 8011b16:	e7c7      	b.n	8011aa8 <_dtoa_r+0x1c4>
 8011b18:	2300      	movs	r3, #0
 8011b1a:	930f      	str	r3, [sp, #60]	; 0x3c
 8011b1c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011b1e:	930c      	str	r3, [sp, #48]	; 0x30
 8011b20:	9307      	str	r3, [sp, #28]
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	dc13      	bgt.n	8011b4e <_dtoa_r+0x26a>
 8011b26:	2301      	movs	r3, #1
 8011b28:	001a      	movs	r2, r3
 8011b2a:	930c      	str	r3, [sp, #48]	; 0x30
 8011b2c:	9307      	str	r3, [sp, #28]
 8011b2e:	9223      	str	r2, [sp, #140]	; 0x8c
 8011b30:	e00d      	b.n	8011b4e <_dtoa_r+0x26a>
 8011b32:	2301      	movs	r3, #1
 8011b34:	e7f1      	b.n	8011b1a <_dtoa_r+0x236>
 8011b36:	2300      	movs	r3, #0
 8011b38:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8011b3a:	930f      	str	r3, [sp, #60]	; 0x3c
 8011b3c:	4694      	mov	ip, r2
 8011b3e:	9b02      	ldr	r3, [sp, #8]
 8011b40:	4463      	add	r3, ip
 8011b42:	930c      	str	r3, [sp, #48]	; 0x30
 8011b44:	3301      	adds	r3, #1
 8011b46:	9307      	str	r3, [sp, #28]
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	dc00      	bgt.n	8011b4e <_dtoa_r+0x26a>
 8011b4c:	2301      	movs	r3, #1
 8011b4e:	2200      	movs	r2, #0
 8011b50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011b52:	6042      	str	r2, [r0, #4]
 8011b54:	3204      	adds	r2, #4
 8011b56:	0015      	movs	r5, r2
 8011b58:	3514      	adds	r5, #20
 8011b5a:	6841      	ldr	r1, [r0, #4]
 8011b5c:	429d      	cmp	r5, r3
 8011b5e:	d919      	bls.n	8011b94 <_dtoa_r+0x2b0>
 8011b60:	0038      	movs	r0, r7
 8011b62:	f7fe fd15 	bl	8010590 <_Balloc>
 8011b66:	9006      	str	r0, [sp, #24]
 8011b68:	2800      	cmp	r0, #0
 8011b6a:	d117      	bne.n	8011b9c <_dtoa_r+0x2b8>
 8011b6c:	21d5      	movs	r1, #213	; 0xd5
 8011b6e:	0002      	movs	r2, r0
 8011b70:	4b43      	ldr	r3, [pc, #268]	; (8011c80 <_dtoa_r+0x39c>)
 8011b72:	0049      	lsls	r1, r1, #1
 8011b74:	e6cb      	b.n	801190e <_dtoa_r+0x2a>
 8011b76:	2301      	movs	r3, #1
 8011b78:	e7de      	b.n	8011b38 <_dtoa_r+0x254>
 8011b7a:	2300      	movs	r3, #0
 8011b7c:	940f      	str	r4, [sp, #60]	; 0x3c
 8011b7e:	9322      	str	r3, [sp, #136]	; 0x88
 8011b80:	3b01      	subs	r3, #1
 8011b82:	930c      	str	r3, [sp, #48]	; 0x30
 8011b84:	9307      	str	r3, [sp, #28]
 8011b86:	2200      	movs	r2, #0
 8011b88:	3313      	adds	r3, #19
 8011b8a:	e7d0      	b.n	8011b2e <_dtoa_r+0x24a>
 8011b8c:	2301      	movs	r3, #1
 8011b8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011b90:	3b02      	subs	r3, #2
 8011b92:	e7f6      	b.n	8011b82 <_dtoa_r+0x29e>
 8011b94:	3101      	adds	r1, #1
 8011b96:	6041      	str	r1, [r0, #4]
 8011b98:	0052      	lsls	r2, r2, #1
 8011b9a:	e7dc      	b.n	8011b56 <_dtoa_r+0x272>
 8011b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b9e:	9a06      	ldr	r2, [sp, #24]
 8011ba0:	601a      	str	r2, [r3, #0]
 8011ba2:	9b07      	ldr	r3, [sp, #28]
 8011ba4:	2b0e      	cmp	r3, #14
 8011ba6:	d900      	bls.n	8011baa <_dtoa_r+0x2c6>
 8011ba8:	e0eb      	b.n	8011d82 <_dtoa_r+0x49e>
 8011baa:	2c00      	cmp	r4, #0
 8011bac:	d100      	bne.n	8011bb0 <_dtoa_r+0x2cc>
 8011bae:	e0e8      	b.n	8011d82 <_dtoa_r+0x49e>
 8011bb0:	9b02      	ldr	r3, [sp, #8]
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	dd68      	ble.n	8011c88 <_dtoa_r+0x3a4>
 8011bb6:	001a      	movs	r2, r3
 8011bb8:	210f      	movs	r1, #15
 8011bba:	4b2d      	ldr	r3, [pc, #180]	; (8011c70 <_dtoa_r+0x38c>)
 8011bbc:	400a      	ands	r2, r1
 8011bbe:	00d2      	lsls	r2, r2, #3
 8011bc0:	189b      	adds	r3, r3, r2
 8011bc2:	681d      	ldr	r5, [r3, #0]
 8011bc4:	685e      	ldr	r6, [r3, #4]
 8011bc6:	9b02      	ldr	r3, [sp, #8]
 8011bc8:	111c      	asrs	r4, r3, #4
 8011bca:	2302      	movs	r3, #2
 8011bcc:	9310      	str	r3, [sp, #64]	; 0x40
 8011bce:	9b02      	ldr	r3, [sp, #8]
 8011bd0:	05db      	lsls	r3, r3, #23
 8011bd2:	d50b      	bpl.n	8011bec <_dtoa_r+0x308>
 8011bd4:	4b2b      	ldr	r3, [pc, #172]	; (8011c84 <_dtoa_r+0x3a0>)
 8011bd6:	400c      	ands	r4, r1
 8011bd8:	6a1a      	ldr	r2, [r3, #32]
 8011bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bdc:	9812      	ldr	r0, [sp, #72]	; 0x48
 8011bde:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8011be0:	f7ef fb20 	bl	8001224 <__aeabi_ddiv>
 8011be4:	2303      	movs	r3, #3
 8011be6:	9008      	str	r0, [sp, #32]
 8011be8:	9109      	str	r1, [sp, #36]	; 0x24
 8011bea:	9310      	str	r3, [sp, #64]	; 0x40
 8011bec:	4b25      	ldr	r3, [pc, #148]	; (8011c84 <_dtoa_r+0x3a0>)
 8011bee:	9314      	str	r3, [sp, #80]	; 0x50
 8011bf0:	2c00      	cmp	r4, #0
 8011bf2:	d108      	bne.n	8011c06 <_dtoa_r+0x322>
 8011bf4:	9808      	ldr	r0, [sp, #32]
 8011bf6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011bf8:	002a      	movs	r2, r5
 8011bfa:	0033      	movs	r3, r6
 8011bfc:	f7ef fb12 	bl	8001224 <__aeabi_ddiv>
 8011c00:	9008      	str	r0, [sp, #32]
 8011c02:	9109      	str	r1, [sp, #36]	; 0x24
 8011c04:	e05c      	b.n	8011cc0 <_dtoa_r+0x3dc>
 8011c06:	2301      	movs	r3, #1
 8011c08:	421c      	tst	r4, r3
 8011c0a:	d00b      	beq.n	8011c24 <_dtoa_r+0x340>
 8011c0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011c0e:	0028      	movs	r0, r5
 8011c10:	3301      	adds	r3, #1
 8011c12:	9310      	str	r3, [sp, #64]	; 0x40
 8011c14:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011c16:	0031      	movs	r1, r6
 8011c18:	681a      	ldr	r2, [r3, #0]
 8011c1a:	685b      	ldr	r3, [r3, #4]
 8011c1c:	f7ef ff04 	bl	8001a28 <__aeabi_dmul>
 8011c20:	0005      	movs	r5, r0
 8011c22:	000e      	movs	r6, r1
 8011c24:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011c26:	1064      	asrs	r4, r4, #1
 8011c28:	3308      	adds	r3, #8
 8011c2a:	e7e0      	b.n	8011bee <_dtoa_r+0x30a>
 8011c2c:	080138a4 	.word	0x080138a4
 8011c30:	08013a92 	.word	0x08013a92
 8011c34:	7ff00000 	.word	0x7ff00000
 8011c38:	0000270f 	.word	0x0000270f
 8011c3c:	08013a8c 	.word	0x08013a8c
 8011c40:	08013a8f 	.word	0x08013a8f
 8011c44:	08013a90 	.word	0x08013a90
 8011c48:	08013a91 	.word	0x08013a91
 8011c4c:	3ff00000 	.word	0x3ff00000
 8011c50:	fffffc01 	.word	0xfffffc01
 8011c54:	3ff80000 	.word	0x3ff80000
 8011c58:	636f4361 	.word	0x636f4361
 8011c5c:	3fd287a7 	.word	0x3fd287a7
 8011c60:	8b60c8b3 	.word	0x8b60c8b3
 8011c64:	3fc68a28 	.word	0x3fc68a28
 8011c68:	509f79fb 	.word	0x509f79fb
 8011c6c:	3fd34413 	.word	0x3fd34413
 8011c70:	08013940 	.word	0x08013940
 8011c74:	00000432 	.word	0x00000432
 8011c78:	00000412 	.word	0x00000412
 8011c7c:	fe100000 	.word	0xfe100000
 8011c80:	08013819 	.word	0x08013819
 8011c84:	08013918 	.word	0x08013918
 8011c88:	2302      	movs	r3, #2
 8011c8a:	9310      	str	r3, [sp, #64]	; 0x40
 8011c8c:	9b02      	ldr	r3, [sp, #8]
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d016      	beq.n	8011cc0 <_dtoa_r+0x3dc>
 8011c92:	9812      	ldr	r0, [sp, #72]	; 0x48
 8011c94:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8011c96:	425c      	negs	r4, r3
 8011c98:	230f      	movs	r3, #15
 8011c9a:	4ab6      	ldr	r2, [pc, #728]	; (8011f74 <_dtoa_r+0x690>)
 8011c9c:	4023      	ands	r3, r4
 8011c9e:	00db      	lsls	r3, r3, #3
 8011ca0:	18d3      	adds	r3, r2, r3
 8011ca2:	681a      	ldr	r2, [r3, #0]
 8011ca4:	685b      	ldr	r3, [r3, #4]
 8011ca6:	f7ef febf 	bl	8001a28 <__aeabi_dmul>
 8011caa:	2601      	movs	r6, #1
 8011cac:	2300      	movs	r3, #0
 8011cae:	9008      	str	r0, [sp, #32]
 8011cb0:	9109      	str	r1, [sp, #36]	; 0x24
 8011cb2:	4db1      	ldr	r5, [pc, #708]	; (8011f78 <_dtoa_r+0x694>)
 8011cb4:	1124      	asrs	r4, r4, #4
 8011cb6:	2c00      	cmp	r4, #0
 8011cb8:	d000      	beq.n	8011cbc <_dtoa_r+0x3d8>
 8011cba:	e094      	b.n	8011de6 <_dtoa_r+0x502>
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d19f      	bne.n	8011c00 <_dtoa_r+0x31c>
 8011cc0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d100      	bne.n	8011cc8 <_dtoa_r+0x3e4>
 8011cc6:	e09b      	b.n	8011e00 <_dtoa_r+0x51c>
 8011cc8:	9c08      	ldr	r4, [sp, #32]
 8011cca:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8011ccc:	2200      	movs	r2, #0
 8011cce:	0020      	movs	r0, r4
 8011cd0:	0029      	movs	r1, r5
 8011cd2:	4baa      	ldr	r3, [pc, #680]	; (8011f7c <_dtoa_r+0x698>)
 8011cd4:	f7ee fbc6 	bl	8000464 <__aeabi_dcmplt>
 8011cd8:	2800      	cmp	r0, #0
 8011cda:	d100      	bne.n	8011cde <_dtoa_r+0x3fa>
 8011cdc:	e090      	b.n	8011e00 <_dtoa_r+0x51c>
 8011cde:	9b07      	ldr	r3, [sp, #28]
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d100      	bne.n	8011ce6 <_dtoa_r+0x402>
 8011ce4:	e08c      	b.n	8011e00 <_dtoa_r+0x51c>
 8011ce6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	dd46      	ble.n	8011d7a <_dtoa_r+0x496>
 8011cec:	9b02      	ldr	r3, [sp, #8]
 8011cee:	2200      	movs	r2, #0
 8011cf0:	0020      	movs	r0, r4
 8011cf2:	0029      	movs	r1, r5
 8011cf4:	1e5e      	subs	r6, r3, #1
 8011cf6:	4ba2      	ldr	r3, [pc, #648]	; (8011f80 <_dtoa_r+0x69c>)
 8011cf8:	f7ef fe96 	bl	8001a28 <__aeabi_dmul>
 8011cfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011cfe:	9008      	str	r0, [sp, #32]
 8011d00:	9109      	str	r1, [sp, #36]	; 0x24
 8011d02:	3301      	adds	r3, #1
 8011d04:	9310      	str	r3, [sp, #64]	; 0x40
 8011d06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011d08:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011d0a:	9c08      	ldr	r4, [sp, #32]
 8011d0c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8011d0e:	9314      	str	r3, [sp, #80]	; 0x50
 8011d10:	f7f0 fcdc 	bl	80026cc <__aeabi_i2d>
 8011d14:	0022      	movs	r2, r4
 8011d16:	002b      	movs	r3, r5
 8011d18:	f7ef fe86 	bl	8001a28 <__aeabi_dmul>
 8011d1c:	2200      	movs	r2, #0
 8011d1e:	4b99      	ldr	r3, [pc, #612]	; (8011f84 <_dtoa_r+0x6a0>)
 8011d20:	f7ee ff44 	bl	8000bac <__aeabi_dadd>
 8011d24:	9010      	str	r0, [sp, #64]	; 0x40
 8011d26:	9111      	str	r1, [sp, #68]	; 0x44
 8011d28:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011d2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011d2c:	9208      	str	r2, [sp, #32]
 8011d2e:	9309      	str	r3, [sp, #36]	; 0x24
 8011d30:	4a95      	ldr	r2, [pc, #596]	; (8011f88 <_dtoa_r+0x6a4>)
 8011d32:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011d34:	4694      	mov	ip, r2
 8011d36:	4463      	add	r3, ip
 8011d38:	9317      	str	r3, [sp, #92]	; 0x5c
 8011d3a:	9309      	str	r3, [sp, #36]	; 0x24
 8011d3c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d161      	bne.n	8011e06 <_dtoa_r+0x522>
 8011d42:	2200      	movs	r2, #0
 8011d44:	0020      	movs	r0, r4
 8011d46:	0029      	movs	r1, r5
 8011d48:	4b90      	ldr	r3, [pc, #576]	; (8011f8c <_dtoa_r+0x6a8>)
 8011d4a:	f7f0 f8d9 	bl	8001f00 <__aeabi_dsub>
 8011d4e:	9a08      	ldr	r2, [sp, #32]
 8011d50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011d52:	0004      	movs	r4, r0
 8011d54:	000d      	movs	r5, r1
 8011d56:	f7ee fb99 	bl	800048c <__aeabi_dcmpgt>
 8011d5a:	2800      	cmp	r0, #0
 8011d5c:	d000      	beq.n	8011d60 <_dtoa_r+0x47c>
 8011d5e:	e2af      	b.n	80122c0 <_dtoa_r+0x9dc>
 8011d60:	488b      	ldr	r0, [pc, #556]	; (8011f90 <_dtoa_r+0x6ac>)
 8011d62:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011d64:	4684      	mov	ip, r0
 8011d66:	4461      	add	r1, ip
 8011d68:	000b      	movs	r3, r1
 8011d6a:	0020      	movs	r0, r4
 8011d6c:	0029      	movs	r1, r5
 8011d6e:	9a08      	ldr	r2, [sp, #32]
 8011d70:	f7ee fb78 	bl	8000464 <__aeabi_dcmplt>
 8011d74:	2800      	cmp	r0, #0
 8011d76:	d000      	beq.n	8011d7a <_dtoa_r+0x496>
 8011d78:	e29f      	b.n	80122ba <_dtoa_r+0x9d6>
 8011d7a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011d7c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8011d7e:	9308      	str	r3, [sp, #32]
 8011d80:	9409      	str	r4, [sp, #36]	; 0x24
 8011d82:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	da00      	bge.n	8011d8a <_dtoa_r+0x4a6>
 8011d88:	e172      	b.n	8012070 <_dtoa_r+0x78c>
 8011d8a:	9a02      	ldr	r2, [sp, #8]
 8011d8c:	2a0e      	cmp	r2, #14
 8011d8e:	dd00      	ble.n	8011d92 <_dtoa_r+0x4ae>
 8011d90:	e16e      	b.n	8012070 <_dtoa_r+0x78c>
 8011d92:	4b78      	ldr	r3, [pc, #480]	; (8011f74 <_dtoa_r+0x690>)
 8011d94:	00d2      	lsls	r2, r2, #3
 8011d96:	189b      	adds	r3, r3, r2
 8011d98:	685c      	ldr	r4, [r3, #4]
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	930a      	str	r3, [sp, #40]	; 0x28
 8011d9e:	940b      	str	r4, [sp, #44]	; 0x2c
 8011da0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	db00      	blt.n	8011da8 <_dtoa_r+0x4c4>
 8011da6:	e0f7      	b.n	8011f98 <_dtoa_r+0x6b4>
 8011da8:	9b07      	ldr	r3, [sp, #28]
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	dd00      	ble.n	8011db0 <_dtoa_r+0x4cc>
 8011dae:	e0f3      	b.n	8011f98 <_dtoa_r+0x6b4>
 8011db0:	d000      	beq.n	8011db4 <_dtoa_r+0x4d0>
 8011db2:	e282      	b.n	80122ba <_dtoa_r+0x9d6>
 8011db4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8011db6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011db8:	2200      	movs	r2, #0
 8011dba:	4b74      	ldr	r3, [pc, #464]	; (8011f8c <_dtoa_r+0x6a8>)
 8011dbc:	f7ef fe34 	bl	8001a28 <__aeabi_dmul>
 8011dc0:	9a08      	ldr	r2, [sp, #32]
 8011dc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011dc4:	f7ee fb6c 	bl	80004a0 <__aeabi_dcmpge>
 8011dc8:	9e07      	ldr	r6, [sp, #28]
 8011dca:	0035      	movs	r5, r6
 8011dcc:	2800      	cmp	r0, #0
 8011dce:	d000      	beq.n	8011dd2 <_dtoa_r+0x4ee>
 8011dd0:	e259      	b.n	8012286 <_dtoa_r+0x9a2>
 8011dd2:	9b06      	ldr	r3, [sp, #24]
 8011dd4:	9a06      	ldr	r2, [sp, #24]
 8011dd6:	3301      	adds	r3, #1
 8011dd8:	9308      	str	r3, [sp, #32]
 8011dda:	2331      	movs	r3, #49	; 0x31
 8011ddc:	7013      	strb	r3, [r2, #0]
 8011dde:	9b02      	ldr	r3, [sp, #8]
 8011de0:	3301      	adds	r3, #1
 8011de2:	9302      	str	r3, [sp, #8]
 8011de4:	e254      	b.n	8012290 <_dtoa_r+0x9ac>
 8011de6:	4234      	tst	r4, r6
 8011de8:	d007      	beq.n	8011dfa <_dtoa_r+0x516>
 8011dea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011dec:	3301      	adds	r3, #1
 8011dee:	9310      	str	r3, [sp, #64]	; 0x40
 8011df0:	682a      	ldr	r2, [r5, #0]
 8011df2:	686b      	ldr	r3, [r5, #4]
 8011df4:	f7ef fe18 	bl	8001a28 <__aeabi_dmul>
 8011df8:	0033      	movs	r3, r6
 8011dfa:	1064      	asrs	r4, r4, #1
 8011dfc:	3508      	adds	r5, #8
 8011dfe:	e75a      	b.n	8011cb6 <_dtoa_r+0x3d2>
 8011e00:	9e02      	ldr	r6, [sp, #8]
 8011e02:	9b07      	ldr	r3, [sp, #28]
 8011e04:	e780      	b.n	8011d08 <_dtoa_r+0x424>
 8011e06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011e08:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011e0a:	1e5a      	subs	r2, r3, #1
 8011e0c:	4b59      	ldr	r3, [pc, #356]	; (8011f74 <_dtoa_r+0x690>)
 8011e0e:	00d2      	lsls	r2, r2, #3
 8011e10:	189b      	adds	r3, r3, r2
 8011e12:	681a      	ldr	r2, [r3, #0]
 8011e14:	685b      	ldr	r3, [r3, #4]
 8011e16:	2900      	cmp	r1, #0
 8011e18:	d051      	beq.n	8011ebe <_dtoa_r+0x5da>
 8011e1a:	2000      	movs	r0, #0
 8011e1c:	495d      	ldr	r1, [pc, #372]	; (8011f94 <_dtoa_r+0x6b0>)
 8011e1e:	f7ef fa01 	bl	8001224 <__aeabi_ddiv>
 8011e22:	9a08      	ldr	r2, [sp, #32]
 8011e24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e26:	f7f0 f86b 	bl	8001f00 <__aeabi_dsub>
 8011e2a:	9a06      	ldr	r2, [sp, #24]
 8011e2c:	9b06      	ldr	r3, [sp, #24]
 8011e2e:	4694      	mov	ip, r2
 8011e30:	9317      	str	r3, [sp, #92]	; 0x5c
 8011e32:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011e34:	9010      	str	r0, [sp, #64]	; 0x40
 8011e36:	9111      	str	r1, [sp, #68]	; 0x44
 8011e38:	4463      	add	r3, ip
 8011e3a:	9319      	str	r3, [sp, #100]	; 0x64
 8011e3c:	0029      	movs	r1, r5
 8011e3e:	0020      	movs	r0, r4
 8011e40:	f7f0 fc0e 	bl	8002660 <__aeabi_d2iz>
 8011e44:	9014      	str	r0, [sp, #80]	; 0x50
 8011e46:	f7f0 fc41 	bl	80026cc <__aeabi_i2d>
 8011e4a:	0002      	movs	r2, r0
 8011e4c:	000b      	movs	r3, r1
 8011e4e:	0020      	movs	r0, r4
 8011e50:	0029      	movs	r1, r5
 8011e52:	f7f0 f855 	bl	8001f00 <__aeabi_dsub>
 8011e56:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011e58:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011e5a:	3301      	adds	r3, #1
 8011e5c:	9308      	str	r3, [sp, #32]
 8011e5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011e60:	0004      	movs	r4, r0
 8011e62:	3330      	adds	r3, #48	; 0x30
 8011e64:	7013      	strb	r3, [r2, #0]
 8011e66:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011e68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011e6a:	000d      	movs	r5, r1
 8011e6c:	f7ee fafa 	bl	8000464 <__aeabi_dcmplt>
 8011e70:	2800      	cmp	r0, #0
 8011e72:	d175      	bne.n	8011f60 <_dtoa_r+0x67c>
 8011e74:	0022      	movs	r2, r4
 8011e76:	002b      	movs	r3, r5
 8011e78:	2000      	movs	r0, #0
 8011e7a:	4940      	ldr	r1, [pc, #256]	; (8011f7c <_dtoa_r+0x698>)
 8011e7c:	f7f0 f840 	bl	8001f00 <__aeabi_dsub>
 8011e80:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011e82:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011e84:	f7ee faee 	bl	8000464 <__aeabi_dcmplt>
 8011e88:	2800      	cmp	r0, #0
 8011e8a:	d000      	beq.n	8011e8e <_dtoa_r+0x5aa>
 8011e8c:	e0d2      	b.n	8012034 <_dtoa_r+0x750>
 8011e8e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011e90:	9a08      	ldr	r2, [sp, #32]
 8011e92:	4293      	cmp	r3, r2
 8011e94:	d100      	bne.n	8011e98 <_dtoa_r+0x5b4>
 8011e96:	e770      	b.n	8011d7a <_dtoa_r+0x496>
 8011e98:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011e9a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011e9c:	2200      	movs	r2, #0
 8011e9e:	4b38      	ldr	r3, [pc, #224]	; (8011f80 <_dtoa_r+0x69c>)
 8011ea0:	f7ef fdc2 	bl	8001a28 <__aeabi_dmul>
 8011ea4:	4b36      	ldr	r3, [pc, #216]	; (8011f80 <_dtoa_r+0x69c>)
 8011ea6:	9010      	str	r0, [sp, #64]	; 0x40
 8011ea8:	9111      	str	r1, [sp, #68]	; 0x44
 8011eaa:	2200      	movs	r2, #0
 8011eac:	0020      	movs	r0, r4
 8011eae:	0029      	movs	r1, r5
 8011eb0:	f7ef fdba 	bl	8001a28 <__aeabi_dmul>
 8011eb4:	9b08      	ldr	r3, [sp, #32]
 8011eb6:	0004      	movs	r4, r0
 8011eb8:	000d      	movs	r5, r1
 8011eba:	9317      	str	r3, [sp, #92]	; 0x5c
 8011ebc:	e7be      	b.n	8011e3c <_dtoa_r+0x558>
 8011ebe:	9808      	ldr	r0, [sp, #32]
 8011ec0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011ec2:	f7ef fdb1 	bl	8001a28 <__aeabi_dmul>
 8011ec6:	9a06      	ldr	r2, [sp, #24]
 8011ec8:	9b06      	ldr	r3, [sp, #24]
 8011eca:	4694      	mov	ip, r2
 8011ecc:	9308      	str	r3, [sp, #32]
 8011ece:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011ed0:	9010      	str	r0, [sp, #64]	; 0x40
 8011ed2:	9111      	str	r1, [sp, #68]	; 0x44
 8011ed4:	4463      	add	r3, ip
 8011ed6:	9319      	str	r3, [sp, #100]	; 0x64
 8011ed8:	0029      	movs	r1, r5
 8011eda:	0020      	movs	r0, r4
 8011edc:	f7f0 fbc0 	bl	8002660 <__aeabi_d2iz>
 8011ee0:	9017      	str	r0, [sp, #92]	; 0x5c
 8011ee2:	f7f0 fbf3 	bl	80026cc <__aeabi_i2d>
 8011ee6:	0002      	movs	r2, r0
 8011ee8:	000b      	movs	r3, r1
 8011eea:	0020      	movs	r0, r4
 8011eec:	0029      	movs	r1, r5
 8011eee:	f7f0 f807 	bl	8001f00 <__aeabi_dsub>
 8011ef2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011ef4:	9a08      	ldr	r2, [sp, #32]
 8011ef6:	3330      	adds	r3, #48	; 0x30
 8011ef8:	7013      	strb	r3, [r2, #0]
 8011efa:	0013      	movs	r3, r2
 8011efc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8011efe:	3301      	adds	r3, #1
 8011f00:	0004      	movs	r4, r0
 8011f02:	000d      	movs	r5, r1
 8011f04:	9308      	str	r3, [sp, #32]
 8011f06:	4293      	cmp	r3, r2
 8011f08:	d12c      	bne.n	8011f64 <_dtoa_r+0x680>
 8011f0a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011f0c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011f0e:	9a06      	ldr	r2, [sp, #24]
 8011f10:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011f12:	4694      	mov	ip, r2
 8011f14:	4463      	add	r3, ip
 8011f16:	2200      	movs	r2, #0
 8011f18:	9308      	str	r3, [sp, #32]
 8011f1a:	4b1e      	ldr	r3, [pc, #120]	; (8011f94 <_dtoa_r+0x6b0>)
 8011f1c:	f7ee fe46 	bl	8000bac <__aeabi_dadd>
 8011f20:	0002      	movs	r2, r0
 8011f22:	000b      	movs	r3, r1
 8011f24:	0020      	movs	r0, r4
 8011f26:	0029      	movs	r1, r5
 8011f28:	f7ee fab0 	bl	800048c <__aeabi_dcmpgt>
 8011f2c:	2800      	cmp	r0, #0
 8011f2e:	d000      	beq.n	8011f32 <_dtoa_r+0x64e>
 8011f30:	e080      	b.n	8012034 <_dtoa_r+0x750>
 8011f32:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011f34:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011f36:	2000      	movs	r0, #0
 8011f38:	4916      	ldr	r1, [pc, #88]	; (8011f94 <_dtoa_r+0x6b0>)
 8011f3a:	f7ef ffe1 	bl	8001f00 <__aeabi_dsub>
 8011f3e:	0002      	movs	r2, r0
 8011f40:	000b      	movs	r3, r1
 8011f42:	0020      	movs	r0, r4
 8011f44:	0029      	movs	r1, r5
 8011f46:	f7ee fa8d 	bl	8000464 <__aeabi_dcmplt>
 8011f4a:	2800      	cmp	r0, #0
 8011f4c:	d100      	bne.n	8011f50 <_dtoa_r+0x66c>
 8011f4e:	e714      	b.n	8011d7a <_dtoa_r+0x496>
 8011f50:	9b08      	ldr	r3, [sp, #32]
 8011f52:	001a      	movs	r2, r3
 8011f54:	3a01      	subs	r2, #1
 8011f56:	9208      	str	r2, [sp, #32]
 8011f58:	7812      	ldrb	r2, [r2, #0]
 8011f5a:	2a30      	cmp	r2, #48	; 0x30
 8011f5c:	d0f8      	beq.n	8011f50 <_dtoa_r+0x66c>
 8011f5e:	9308      	str	r3, [sp, #32]
 8011f60:	9602      	str	r6, [sp, #8]
 8011f62:	e055      	b.n	8012010 <_dtoa_r+0x72c>
 8011f64:	2200      	movs	r2, #0
 8011f66:	4b06      	ldr	r3, [pc, #24]	; (8011f80 <_dtoa_r+0x69c>)
 8011f68:	f7ef fd5e 	bl	8001a28 <__aeabi_dmul>
 8011f6c:	0004      	movs	r4, r0
 8011f6e:	000d      	movs	r5, r1
 8011f70:	e7b2      	b.n	8011ed8 <_dtoa_r+0x5f4>
 8011f72:	46c0      	nop			; (mov r8, r8)
 8011f74:	08013940 	.word	0x08013940
 8011f78:	08013918 	.word	0x08013918
 8011f7c:	3ff00000 	.word	0x3ff00000
 8011f80:	40240000 	.word	0x40240000
 8011f84:	401c0000 	.word	0x401c0000
 8011f88:	fcc00000 	.word	0xfcc00000
 8011f8c:	40140000 	.word	0x40140000
 8011f90:	7cc00000 	.word	0x7cc00000
 8011f94:	3fe00000 	.word	0x3fe00000
 8011f98:	9b07      	ldr	r3, [sp, #28]
 8011f9a:	9e06      	ldr	r6, [sp, #24]
 8011f9c:	3b01      	subs	r3, #1
 8011f9e:	199b      	adds	r3, r3, r6
 8011fa0:	930c      	str	r3, [sp, #48]	; 0x30
 8011fa2:	9c08      	ldr	r4, [sp, #32]
 8011fa4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8011fa6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011fa8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011faa:	0020      	movs	r0, r4
 8011fac:	0029      	movs	r1, r5
 8011fae:	f7ef f939 	bl	8001224 <__aeabi_ddiv>
 8011fb2:	f7f0 fb55 	bl	8002660 <__aeabi_d2iz>
 8011fb6:	9007      	str	r0, [sp, #28]
 8011fb8:	f7f0 fb88 	bl	80026cc <__aeabi_i2d>
 8011fbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011fbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011fc0:	f7ef fd32 	bl	8001a28 <__aeabi_dmul>
 8011fc4:	0002      	movs	r2, r0
 8011fc6:	000b      	movs	r3, r1
 8011fc8:	0020      	movs	r0, r4
 8011fca:	0029      	movs	r1, r5
 8011fcc:	f7ef ff98 	bl	8001f00 <__aeabi_dsub>
 8011fd0:	0033      	movs	r3, r6
 8011fd2:	9a07      	ldr	r2, [sp, #28]
 8011fd4:	3601      	adds	r6, #1
 8011fd6:	3230      	adds	r2, #48	; 0x30
 8011fd8:	701a      	strb	r2, [r3, #0]
 8011fda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011fdc:	9608      	str	r6, [sp, #32]
 8011fde:	429a      	cmp	r2, r3
 8011fe0:	d139      	bne.n	8012056 <_dtoa_r+0x772>
 8011fe2:	0002      	movs	r2, r0
 8011fe4:	000b      	movs	r3, r1
 8011fe6:	f7ee fde1 	bl	8000bac <__aeabi_dadd>
 8011fea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011fec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011fee:	0004      	movs	r4, r0
 8011ff0:	000d      	movs	r5, r1
 8011ff2:	f7ee fa4b 	bl	800048c <__aeabi_dcmpgt>
 8011ff6:	2800      	cmp	r0, #0
 8011ff8:	d11b      	bne.n	8012032 <_dtoa_r+0x74e>
 8011ffa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011ffc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011ffe:	0020      	movs	r0, r4
 8012000:	0029      	movs	r1, r5
 8012002:	f7ee fa29 	bl	8000458 <__aeabi_dcmpeq>
 8012006:	2800      	cmp	r0, #0
 8012008:	d002      	beq.n	8012010 <_dtoa_r+0x72c>
 801200a:	9b07      	ldr	r3, [sp, #28]
 801200c:	07db      	lsls	r3, r3, #31
 801200e:	d410      	bmi.n	8012032 <_dtoa_r+0x74e>
 8012010:	0038      	movs	r0, r7
 8012012:	9905      	ldr	r1, [sp, #20]
 8012014:	f7fe fb00 	bl	8010618 <_Bfree>
 8012018:	2300      	movs	r3, #0
 801201a:	9a08      	ldr	r2, [sp, #32]
 801201c:	9802      	ldr	r0, [sp, #8]
 801201e:	7013      	strb	r3, [r2, #0]
 8012020:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8012022:	3001      	adds	r0, #1
 8012024:	6018      	str	r0, [r3, #0]
 8012026:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8012028:	2b00      	cmp	r3, #0
 801202a:	d100      	bne.n	801202e <_dtoa_r+0x74a>
 801202c:	e4a6      	b.n	801197c <_dtoa_r+0x98>
 801202e:	601a      	str	r2, [r3, #0]
 8012030:	e4a4      	b.n	801197c <_dtoa_r+0x98>
 8012032:	9e02      	ldr	r6, [sp, #8]
 8012034:	9b08      	ldr	r3, [sp, #32]
 8012036:	9308      	str	r3, [sp, #32]
 8012038:	3b01      	subs	r3, #1
 801203a:	781a      	ldrb	r2, [r3, #0]
 801203c:	2a39      	cmp	r2, #57	; 0x39
 801203e:	d106      	bne.n	801204e <_dtoa_r+0x76a>
 8012040:	9a06      	ldr	r2, [sp, #24]
 8012042:	429a      	cmp	r2, r3
 8012044:	d1f7      	bne.n	8012036 <_dtoa_r+0x752>
 8012046:	2230      	movs	r2, #48	; 0x30
 8012048:	9906      	ldr	r1, [sp, #24]
 801204a:	3601      	adds	r6, #1
 801204c:	700a      	strb	r2, [r1, #0]
 801204e:	781a      	ldrb	r2, [r3, #0]
 8012050:	3201      	adds	r2, #1
 8012052:	701a      	strb	r2, [r3, #0]
 8012054:	e784      	b.n	8011f60 <_dtoa_r+0x67c>
 8012056:	2200      	movs	r2, #0
 8012058:	4baa      	ldr	r3, [pc, #680]	; (8012304 <_dtoa_r+0xa20>)
 801205a:	f7ef fce5 	bl	8001a28 <__aeabi_dmul>
 801205e:	2200      	movs	r2, #0
 8012060:	2300      	movs	r3, #0
 8012062:	0004      	movs	r4, r0
 8012064:	000d      	movs	r5, r1
 8012066:	f7ee f9f7 	bl	8000458 <__aeabi_dcmpeq>
 801206a:	2800      	cmp	r0, #0
 801206c:	d09b      	beq.n	8011fa6 <_dtoa_r+0x6c2>
 801206e:	e7cf      	b.n	8012010 <_dtoa_r+0x72c>
 8012070:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8012072:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8012074:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8012076:	2d00      	cmp	r5, #0
 8012078:	d012      	beq.n	80120a0 <_dtoa_r+0x7bc>
 801207a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801207c:	2a01      	cmp	r2, #1
 801207e:	dc66      	bgt.n	801214e <_dtoa_r+0x86a>
 8012080:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012082:	2a00      	cmp	r2, #0
 8012084:	d05d      	beq.n	8012142 <_dtoa_r+0x85e>
 8012086:	4aa0      	ldr	r2, [pc, #640]	; (8012308 <_dtoa_r+0xa24>)
 8012088:	189b      	adds	r3, r3, r2
 801208a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801208c:	2101      	movs	r1, #1
 801208e:	18d2      	adds	r2, r2, r3
 8012090:	920a      	str	r2, [sp, #40]	; 0x28
 8012092:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012094:	0038      	movs	r0, r7
 8012096:	18d3      	adds	r3, r2, r3
 8012098:	930d      	str	r3, [sp, #52]	; 0x34
 801209a:	f7fe fbb9 	bl	8010810 <__i2b>
 801209e:	0005      	movs	r5, r0
 80120a0:	2c00      	cmp	r4, #0
 80120a2:	dd0e      	ble.n	80120c2 <_dtoa_r+0x7de>
 80120a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	dd0b      	ble.n	80120c2 <_dtoa_r+0x7de>
 80120aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80120ac:	0023      	movs	r3, r4
 80120ae:	4294      	cmp	r4, r2
 80120b0:	dd00      	ble.n	80120b4 <_dtoa_r+0x7d0>
 80120b2:	0013      	movs	r3, r2
 80120b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80120b6:	1ae4      	subs	r4, r4, r3
 80120b8:	1ad2      	subs	r2, r2, r3
 80120ba:	920a      	str	r2, [sp, #40]	; 0x28
 80120bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80120be:	1ad3      	subs	r3, r2, r3
 80120c0:	930d      	str	r3, [sp, #52]	; 0x34
 80120c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d01f      	beq.n	8012108 <_dtoa_r+0x824>
 80120c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d054      	beq.n	8012178 <_dtoa_r+0x894>
 80120ce:	2e00      	cmp	r6, #0
 80120d0:	dd11      	ble.n	80120f6 <_dtoa_r+0x812>
 80120d2:	0029      	movs	r1, r5
 80120d4:	0032      	movs	r2, r6
 80120d6:	0038      	movs	r0, r7
 80120d8:	f7fe fc60 	bl	801099c <__pow5mult>
 80120dc:	9a05      	ldr	r2, [sp, #20]
 80120de:	0001      	movs	r1, r0
 80120e0:	0005      	movs	r5, r0
 80120e2:	0038      	movs	r0, r7
 80120e4:	f7fe fbaa 	bl	801083c <__multiply>
 80120e8:	9905      	ldr	r1, [sp, #20]
 80120ea:	9014      	str	r0, [sp, #80]	; 0x50
 80120ec:	0038      	movs	r0, r7
 80120ee:	f7fe fa93 	bl	8010618 <_Bfree>
 80120f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80120f4:	9305      	str	r3, [sp, #20]
 80120f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80120f8:	1b9a      	subs	r2, r3, r6
 80120fa:	42b3      	cmp	r3, r6
 80120fc:	d004      	beq.n	8012108 <_dtoa_r+0x824>
 80120fe:	0038      	movs	r0, r7
 8012100:	9905      	ldr	r1, [sp, #20]
 8012102:	f7fe fc4b 	bl	801099c <__pow5mult>
 8012106:	9005      	str	r0, [sp, #20]
 8012108:	2101      	movs	r1, #1
 801210a:	0038      	movs	r0, r7
 801210c:	f7fe fb80 	bl	8010810 <__i2b>
 8012110:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012112:	0006      	movs	r6, r0
 8012114:	2b00      	cmp	r3, #0
 8012116:	dd31      	ble.n	801217c <_dtoa_r+0x898>
 8012118:	001a      	movs	r2, r3
 801211a:	0001      	movs	r1, r0
 801211c:	0038      	movs	r0, r7
 801211e:	f7fe fc3d 	bl	801099c <__pow5mult>
 8012122:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012124:	0006      	movs	r6, r0
 8012126:	2b01      	cmp	r3, #1
 8012128:	dd2d      	ble.n	8012186 <_dtoa_r+0x8a2>
 801212a:	2300      	movs	r3, #0
 801212c:	930e      	str	r3, [sp, #56]	; 0x38
 801212e:	6933      	ldr	r3, [r6, #16]
 8012130:	3303      	adds	r3, #3
 8012132:	009b      	lsls	r3, r3, #2
 8012134:	18f3      	adds	r3, r6, r3
 8012136:	6858      	ldr	r0, [r3, #4]
 8012138:	f7fe fb22 	bl	8010780 <__hi0bits>
 801213c:	2320      	movs	r3, #32
 801213e:	1a18      	subs	r0, r3, r0
 8012140:	e039      	b.n	80121b6 <_dtoa_r+0x8d2>
 8012142:	2336      	movs	r3, #54	; 0x36
 8012144:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8012146:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8012148:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801214a:	1a9b      	subs	r3, r3, r2
 801214c:	e79d      	b.n	801208a <_dtoa_r+0x7a6>
 801214e:	9b07      	ldr	r3, [sp, #28]
 8012150:	1e5e      	subs	r6, r3, #1
 8012152:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012154:	42b3      	cmp	r3, r6
 8012156:	db07      	blt.n	8012168 <_dtoa_r+0x884>
 8012158:	1b9e      	subs	r6, r3, r6
 801215a:	9b07      	ldr	r3, [sp, #28]
 801215c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801215e:	2b00      	cmp	r3, #0
 8012160:	da93      	bge.n	801208a <_dtoa_r+0x7a6>
 8012162:	1ae4      	subs	r4, r4, r3
 8012164:	2300      	movs	r3, #0
 8012166:	e790      	b.n	801208a <_dtoa_r+0x7a6>
 8012168:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801216a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801216c:	1af3      	subs	r3, r6, r3
 801216e:	18d3      	adds	r3, r2, r3
 8012170:	960e      	str	r6, [sp, #56]	; 0x38
 8012172:	9315      	str	r3, [sp, #84]	; 0x54
 8012174:	2600      	movs	r6, #0
 8012176:	e7f0      	b.n	801215a <_dtoa_r+0x876>
 8012178:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801217a:	e7c0      	b.n	80120fe <_dtoa_r+0x81a>
 801217c:	2300      	movs	r3, #0
 801217e:	930e      	str	r3, [sp, #56]	; 0x38
 8012180:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012182:	2b01      	cmp	r3, #1
 8012184:	dc13      	bgt.n	80121ae <_dtoa_r+0x8ca>
 8012186:	2300      	movs	r3, #0
 8012188:	930e      	str	r3, [sp, #56]	; 0x38
 801218a:	9b08      	ldr	r3, [sp, #32]
 801218c:	2b00      	cmp	r3, #0
 801218e:	d10e      	bne.n	80121ae <_dtoa_r+0x8ca>
 8012190:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012192:	031b      	lsls	r3, r3, #12
 8012194:	d10b      	bne.n	80121ae <_dtoa_r+0x8ca>
 8012196:	4b5d      	ldr	r3, [pc, #372]	; (801230c <_dtoa_r+0xa28>)
 8012198:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801219a:	4213      	tst	r3, r2
 801219c:	d007      	beq.n	80121ae <_dtoa_r+0x8ca>
 801219e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80121a0:	3301      	adds	r3, #1
 80121a2:	930a      	str	r3, [sp, #40]	; 0x28
 80121a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80121a6:	3301      	adds	r3, #1
 80121a8:	930d      	str	r3, [sp, #52]	; 0x34
 80121aa:	2301      	movs	r3, #1
 80121ac:	930e      	str	r3, [sp, #56]	; 0x38
 80121ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80121b0:	2001      	movs	r0, #1
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d1bb      	bne.n	801212e <_dtoa_r+0x84a>
 80121b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80121b8:	221f      	movs	r2, #31
 80121ba:	1818      	adds	r0, r3, r0
 80121bc:	0003      	movs	r3, r0
 80121be:	4013      	ands	r3, r2
 80121c0:	4210      	tst	r0, r2
 80121c2:	d046      	beq.n	8012252 <_dtoa_r+0x96e>
 80121c4:	3201      	adds	r2, #1
 80121c6:	1ad2      	subs	r2, r2, r3
 80121c8:	2a04      	cmp	r2, #4
 80121ca:	dd3f      	ble.n	801224c <_dtoa_r+0x968>
 80121cc:	221c      	movs	r2, #28
 80121ce:	1ad3      	subs	r3, r2, r3
 80121d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80121d2:	18e4      	adds	r4, r4, r3
 80121d4:	18d2      	adds	r2, r2, r3
 80121d6:	920a      	str	r2, [sp, #40]	; 0x28
 80121d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80121da:	18d3      	adds	r3, r2, r3
 80121dc:	930d      	str	r3, [sp, #52]	; 0x34
 80121de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	dd05      	ble.n	80121f0 <_dtoa_r+0x90c>
 80121e4:	001a      	movs	r2, r3
 80121e6:	0038      	movs	r0, r7
 80121e8:	9905      	ldr	r1, [sp, #20]
 80121ea:	f7fe fc33 	bl	8010a54 <__lshift>
 80121ee:	9005      	str	r0, [sp, #20]
 80121f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	dd05      	ble.n	8012202 <_dtoa_r+0x91e>
 80121f6:	0031      	movs	r1, r6
 80121f8:	001a      	movs	r2, r3
 80121fa:	0038      	movs	r0, r7
 80121fc:	f7fe fc2a 	bl	8010a54 <__lshift>
 8012200:	0006      	movs	r6, r0
 8012202:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012204:	2b00      	cmp	r3, #0
 8012206:	d026      	beq.n	8012256 <_dtoa_r+0x972>
 8012208:	0031      	movs	r1, r6
 801220a:	9805      	ldr	r0, [sp, #20]
 801220c:	f7fe fc90 	bl	8010b30 <__mcmp>
 8012210:	2800      	cmp	r0, #0
 8012212:	da20      	bge.n	8012256 <_dtoa_r+0x972>
 8012214:	9b02      	ldr	r3, [sp, #8]
 8012216:	220a      	movs	r2, #10
 8012218:	3b01      	subs	r3, #1
 801221a:	9302      	str	r3, [sp, #8]
 801221c:	0038      	movs	r0, r7
 801221e:	2300      	movs	r3, #0
 8012220:	9905      	ldr	r1, [sp, #20]
 8012222:	f7fe fa1d 	bl	8010660 <__multadd>
 8012226:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012228:	9005      	str	r0, [sp, #20]
 801222a:	2b00      	cmp	r3, #0
 801222c:	d100      	bne.n	8012230 <_dtoa_r+0x94c>
 801222e:	e166      	b.n	80124fe <_dtoa_r+0xc1a>
 8012230:	2300      	movs	r3, #0
 8012232:	0029      	movs	r1, r5
 8012234:	220a      	movs	r2, #10
 8012236:	0038      	movs	r0, r7
 8012238:	f7fe fa12 	bl	8010660 <__multadd>
 801223c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801223e:	0005      	movs	r5, r0
 8012240:	2b00      	cmp	r3, #0
 8012242:	dc47      	bgt.n	80122d4 <_dtoa_r+0x9f0>
 8012244:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012246:	2b02      	cmp	r3, #2
 8012248:	dc0d      	bgt.n	8012266 <_dtoa_r+0x982>
 801224a:	e043      	b.n	80122d4 <_dtoa_r+0x9f0>
 801224c:	2a04      	cmp	r2, #4
 801224e:	d0c6      	beq.n	80121de <_dtoa_r+0x8fa>
 8012250:	0013      	movs	r3, r2
 8012252:	331c      	adds	r3, #28
 8012254:	e7bc      	b.n	80121d0 <_dtoa_r+0x8ec>
 8012256:	9b07      	ldr	r3, [sp, #28]
 8012258:	2b00      	cmp	r3, #0
 801225a:	dc35      	bgt.n	80122c8 <_dtoa_r+0x9e4>
 801225c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801225e:	2b02      	cmp	r3, #2
 8012260:	dd32      	ble.n	80122c8 <_dtoa_r+0x9e4>
 8012262:	9b07      	ldr	r3, [sp, #28]
 8012264:	930c      	str	r3, [sp, #48]	; 0x30
 8012266:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012268:	2b00      	cmp	r3, #0
 801226a:	d10c      	bne.n	8012286 <_dtoa_r+0x9a2>
 801226c:	0031      	movs	r1, r6
 801226e:	2205      	movs	r2, #5
 8012270:	0038      	movs	r0, r7
 8012272:	f7fe f9f5 	bl	8010660 <__multadd>
 8012276:	0006      	movs	r6, r0
 8012278:	0001      	movs	r1, r0
 801227a:	9805      	ldr	r0, [sp, #20]
 801227c:	f7fe fc58 	bl	8010b30 <__mcmp>
 8012280:	2800      	cmp	r0, #0
 8012282:	dd00      	ble.n	8012286 <_dtoa_r+0x9a2>
 8012284:	e5a5      	b.n	8011dd2 <_dtoa_r+0x4ee>
 8012286:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012288:	43db      	mvns	r3, r3
 801228a:	9302      	str	r3, [sp, #8]
 801228c:	9b06      	ldr	r3, [sp, #24]
 801228e:	9308      	str	r3, [sp, #32]
 8012290:	2400      	movs	r4, #0
 8012292:	0031      	movs	r1, r6
 8012294:	0038      	movs	r0, r7
 8012296:	f7fe f9bf 	bl	8010618 <_Bfree>
 801229a:	2d00      	cmp	r5, #0
 801229c:	d100      	bne.n	80122a0 <_dtoa_r+0x9bc>
 801229e:	e6b7      	b.n	8012010 <_dtoa_r+0x72c>
 80122a0:	2c00      	cmp	r4, #0
 80122a2:	d005      	beq.n	80122b0 <_dtoa_r+0x9cc>
 80122a4:	42ac      	cmp	r4, r5
 80122a6:	d003      	beq.n	80122b0 <_dtoa_r+0x9cc>
 80122a8:	0021      	movs	r1, r4
 80122aa:	0038      	movs	r0, r7
 80122ac:	f7fe f9b4 	bl	8010618 <_Bfree>
 80122b0:	0029      	movs	r1, r5
 80122b2:	0038      	movs	r0, r7
 80122b4:	f7fe f9b0 	bl	8010618 <_Bfree>
 80122b8:	e6aa      	b.n	8012010 <_dtoa_r+0x72c>
 80122ba:	2600      	movs	r6, #0
 80122bc:	0035      	movs	r5, r6
 80122be:	e7e2      	b.n	8012286 <_dtoa_r+0x9a2>
 80122c0:	9602      	str	r6, [sp, #8]
 80122c2:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80122c4:	0035      	movs	r5, r6
 80122c6:	e584      	b.n	8011dd2 <_dtoa_r+0x4ee>
 80122c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d100      	bne.n	80122d0 <_dtoa_r+0x9ec>
 80122ce:	e0ce      	b.n	801246e <_dtoa_r+0xb8a>
 80122d0:	9b07      	ldr	r3, [sp, #28]
 80122d2:	930c      	str	r3, [sp, #48]	; 0x30
 80122d4:	2c00      	cmp	r4, #0
 80122d6:	dd05      	ble.n	80122e4 <_dtoa_r+0xa00>
 80122d8:	0029      	movs	r1, r5
 80122da:	0022      	movs	r2, r4
 80122dc:	0038      	movs	r0, r7
 80122de:	f7fe fbb9 	bl	8010a54 <__lshift>
 80122e2:	0005      	movs	r5, r0
 80122e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80122e6:	0028      	movs	r0, r5
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d022      	beq.n	8012332 <_dtoa_r+0xa4e>
 80122ec:	0038      	movs	r0, r7
 80122ee:	6869      	ldr	r1, [r5, #4]
 80122f0:	f7fe f94e 	bl	8010590 <_Balloc>
 80122f4:	1e04      	subs	r4, r0, #0
 80122f6:	d10f      	bne.n	8012318 <_dtoa_r+0xa34>
 80122f8:	0002      	movs	r2, r0
 80122fa:	4b05      	ldr	r3, [pc, #20]	; (8012310 <_dtoa_r+0xa2c>)
 80122fc:	4905      	ldr	r1, [pc, #20]	; (8012314 <_dtoa_r+0xa30>)
 80122fe:	f7ff fb06 	bl	801190e <_dtoa_r+0x2a>
 8012302:	46c0      	nop			; (mov r8, r8)
 8012304:	40240000 	.word	0x40240000
 8012308:	00000433 	.word	0x00000433
 801230c:	7ff00000 	.word	0x7ff00000
 8012310:	08013819 	.word	0x08013819
 8012314:	000002ea 	.word	0x000002ea
 8012318:	0029      	movs	r1, r5
 801231a:	692b      	ldr	r3, [r5, #16]
 801231c:	310c      	adds	r1, #12
 801231e:	1c9a      	adds	r2, r3, #2
 8012320:	0092      	lsls	r2, r2, #2
 8012322:	300c      	adds	r0, #12
 8012324:	f7fc fcc8 	bl	800ecb8 <memcpy>
 8012328:	2201      	movs	r2, #1
 801232a:	0021      	movs	r1, r4
 801232c:	0038      	movs	r0, r7
 801232e:	f7fe fb91 	bl	8010a54 <__lshift>
 8012332:	9b06      	ldr	r3, [sp, #24]
 8012334:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012336:	930a      	str	r3, [sp, #40]	; 0x28
 8012338:	3b01      	subs	r3, #1
 801233a:	189b      	adds	r3, r3, r2
 801233c:	2201      	movs	r2, #1
 801233e:	002c      	movs	r4, r5
 8012340:	0005      	movs	r5, r0
 8012342:	9314      	str	r3, [sp, #80]	; 0x50
 8012344:	9b08      	ldr	r3, [sp, #32]
 8012346:	4013      	ands	r3, r2
 8012348:	930f      	str	r3, [sp, #60]	; 0x3c
 801234a:	0031      	movs	r1, r6
 801234c:	9805      	ldr	r0, [sp, #20]
 801234e:	f7ff fa3d 	bl	80117cc <quorem>
 8012352:	0003      	movs	r3, r0
 8012354:	0021      	movs	r1, r4
 8012356:	3330      	adds	r3, #48	; 0x30
 8012358:	900d      	str	r0, [sp, #52]	; 0x34
 801235a:	9805      	ldr	r0, [sp, #20]
 801235c:	9307      	str	r3, [sp, #28]
 801235e:	f7fe fbe7 	bl	8010b30 <__mcmp>
 8012362:	002a      	movs	r2, r5
 8012364:	900e      	str	r0, [sp, #56]	; 0x38
 8012366:	0031      	movs	r1, r6
 8012368:	0038      	movs	r0, r7
 801236a:	f7fe fbfd 	bl	8010b68 <__mdiff>
 801236e:	68c3      	ldr	r3, [r0, #12]
 8012370:	9008      	str	r0, [sp, #32]
 8012372:	9310      	str	r3, [sp, #64]	; 0x40
 8012374:	2301      	movs	r3, #1
 8012376:	930c      	str	r3, [sp, #48]	; 0x30
 8012378:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801237a:	2b00      	cmp	r3, #0
 801237c:	d104      	bne.n	8012388 <_dtoa_r+0xaa4>
 801237e:	0001      	movs	r1, r0
 8012380:	9805      	ldr	r0, [sp, #20]
 8012382:	f7fe fbd5 	bl	8010b30 <__mcmp>
 8012386:	900c      	str	r0, [sp, #48]	; 0x30
 8012388:	0038      	movs	r0, r7
 801238a:	9908      	ldr	r1, [sp, #32]
 801238c:	f7fe f944 	bl	8010618 <_Bfree>
 8012390:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012392:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012394:	3301      	adds	r3, #1
 8012396:	9308      	str	r3, [sp, #32]
 8012398:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801239a:	4313      	orrs	r3, r2
 801239c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801239e:	4313      	orrs	r3, r2
 80123a0:	d10c      	bne.n	80123bc <_dtoa_r+0xad8>
 80123a2:	9b07      	ldr	r3, [sp, #28]
 80123a4:	2b39      	cmp	r3, #57	; 0x39
 80123a6:	d026      	beq.n	80123f6 <_dtoa_r+0xb12>
 80123a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	dd02      	ble.n	80123b4 <_dtoa_r+0xad0>
 80123ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80123b0:	3331      	adds	r3, #49	; 0x31
 80123b2:	9307      	str	r3, [sp, #28]
 80123b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80123b6:	9a07      	ldr	r2, [sp, #28]
 80123b8:	701a      	strb	r2, [r3, #0]
 80123ba:	e76a      	b.n	8012292 <_dtoa_r+0x9ae>
 80123bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80123be:	2b00      	cmp	r3, #0
 80123c0:	db04      	blt.n	80123cc <_dtoa_r+0xae8>
 80123c2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80123c4:	4313      	orrs	r3, r2
 80123c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80123c8:	4313      	orrs	r3, r2
 80123ca:	d11f      	bne.n	801240c <_dtoa_r+0xb28>
 80123cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	ddf0      	ble.n	80123b4 <_dtoa_r+0xad0>
 80123d2:	9905      	ldr	r1, [sp, #20]
 80123d4:	2201      	movs	r2, #1
 80123d6:	0038      	movs	r0, r7
 80123d8:	f7fe fb3c 	bl	8010a54 <__lshift>
 80123dc:	0031      	movs	r1, r6
 80123de:	9005      	str	r0, [sp, #20]
 80123e0:	f7fe fba6 	bl	8010b30 <__mcmp>
 80123e4:	2800      	cmp	r0, #0
 80123e6:	dc03      	bgt.n	80123f0 <_dtoa_r+0xb0c>
 80123e8:	d1e4      	bne.n	80123b4 <_dtoa_r+0xad0>
 80123ea:	9b07      	ldr	r3, [sp, #28]
 80123ec:	07db      	lsls	r3, r3, #31
 80123ee:	d5e1      	bpl.n	80123b4 <_dtoa_r+0xad0>
 80123f0:	9b07      	ldr	r3, [sp, #28]
 80123f2:	2b39      	cmp	r3, #57	; 0x39
 80123f4:	d1db      	bne.n	80123ae <_dtoa_r+0xaca>
 80123f6:	2339      	movs	r3, #57	; 0x39
 80123f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80123fa:	7013      	strb	r3, [r2, #0]
 80123fc:	9b08      	ldr	r3, [sp, #32]
 80123fe:	9308      	str	r3, [sp, #32]
 8012400:	3b01      	subs	r3, #1
 8012402:	781a      	ldrb	r2, [r3, #0]
 8012404:	2a39      	cmp	r2, #57	; 0x39
 8012406:	d068      	beq.n	80124da <_dtoa_r+0xbf6>
 8012408:	3201      	adds	r2, #1
 801240a:	e7d5      	b.n	80123b8 <_dtoa_r+0xad4>
 801240c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801240e:	2b00      	cmp	r3, #0
 8012410:	dd07      	ble.n	8012422 <_dtoa_r+0xb3e>
 8012412:	9b07      	ldr	r3, [sp, #28]
 8012414:	2b39      	cmp	r3, #57	; 0x39
 8012416:	d0ee      	beq.n	80123f6 <_dtoa_r+0xb12>
 8012418:	9b07      	ldr	r3, [sp, #28]
 801241a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801241c:	3301      	adds	r3, #1
 801241e:	7013      	strb	r3, [r2, #0]
 8012420:	e737      	b.n	8012292 <_dtoa_r+0x9ae>
 8012422:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012424:	9a07      	ldr	r2, [sp, #28]
 8012426:	701a      	strb	r2, [r3, #0]
 8012428:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801242a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801242c:	4293      	cmp	r3, r2
 801242e:	d03e      	beq.n	80124ae <_dtoa_r+0xbca>
 8012430:	2300      	movs	r3, #0
 8012432:	220a      	movs	r2, #10
 8012434:	9905      	ldr	r1, [sp, #20]
 8012436:	0038      	movs	r0, r7
 8012438:	f7fe f912 	bl	8010660 <__multadd>
 801243c:	2300      	movs	r3, #0
 801243e:	9005      	str	r0, [sp, #20]
 8012440:	220a      	movs	r2, #10
 8012442:	0021      	movs	r1, r4
 8012444:	0038      	movs	r0, r7
 8012446:	42ac      	cmp	r4, r5
 8012448:	d106      	bne.n	8012458 <_dtoa_r+0xb74>
 801244a:	f7fe f909 	bl	8010660 <__multadd>
 801244e:	0004      	movs	r4, r0
 8012450:	0005      	movs	r5, r0
 8012452:	9b08      	ldr	r3, [sp, #32]
 8012454:	930a      	str	r3, [sp, #40]	; 0x28
 8012456:	e778      	b.n	801234a <_dtoa_r+0xa66>
 8012458:	f7fe f902 	bl	8010660 <__multadd>
 801245c:	0029      	movs	r1, r5
 801245e:	0004      	movs	r4, r0
 8012460:	2300      	movs	r3, #0
 8012462:	220a      	movs	r2, #10
 8012464:	0038      	movs	r0, r7
 8012466:	f7fe f8fb 	bl	8010660 <__multadd>
 801246a:	0005      	movs	r5, r0
 801246c:	e7f1      	b.n	8012452 <_dtoa_r+0xb6e>
 801246e:	9b07      	ldr	r3, [sp, #28]
 8012470:	930c      	str	r3, [sp, #48]	; 0x30
 8012472:	2400      	movs	r4, #0
 8012474:	0031      	movs	r1, r6
 8012476:	9805      	ldr	r0, [sp, #20]
 8012478:	f7ff f9a8 	bl	80117cc <quorem>
 801247c:	9b06      	ldr	r3, [sp, #24]
 801247e:	3030      	adds	r0, #48	; 0x30
 8012480:	5518      	strb	r0, [r3, r4]
 8012482:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012484:	3401      	adds	r4, #1
 8012486:	9007      	str	r0, [sp, #28]
 8012488:	42a3      	cmp	r3, r4
 801248a:	dd07      	ble.n	801249c <_dtoa_r+0xbb8>
 801248c:	2300      	movs	r3, #0
 801248e:	220a      	movs	r2, #10
 8012490:	0038      	movs	r0, r7
 8012492:	9905      	ldr	r1, [sp, #20]
 8012494:	f7fe f8e4 	bl	8010660 <__multadd>
 8012498:	9005      	str	r0, [sp, #20]
 801249a:	e7eb      	b.n	8012474 <_dtoa_r+0xb90>
 801249c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801249e:	2001      	movs	r0, #1
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	dd00      	ble.n	80124a6 <_dtoa_r+0xbc2>
 80124a4:	0018      	movs	r0, r3
 80124a6:	2400      	movs	r4, #0
 80124a8:	9b06      	ldr	r3, [sp, #24]
 80124aa:	181b      	adds	r3, r3, r0
 80124ac:	9308      	str	r3, [sp, #32]
 80124ae:	9905      	ldr	r1, [sp, #20]
 80124b0:	2201      	movs	r2, #1
 80124b2:	0038      	movs	r0, r7
 80124b4:	f7fe face 	bl	8010a54 <__lshift>
 80124b8:	0031      	movs	r1, r6
 80124ba:	9005      	str	r0, [sp, #20]
 80124bc:	f7fe fb38 	bl	8010b30 <__mcmp>
 80124c0:	2800      	cmp	r0, #0
 80124c2:	dc9b      	bgt.n	80123fc <_dtoa_r+0xb18>
 80124c4:	d102      	bne.n	80124cc <_dtoa_r+0xbe8>
 80124c6:	9b07      	ldr	r3, [sp, #28]
 80124c8:	07db      	lsls	r3, r3, #31
 80124ca:	d497      	bmi.n	80123fc <_dtoa_r+0xb18>
 80124cc:	9b08      	ldr	r3, [sp, #32]
 80124ce:	9308      	str	r3, [sp, #32]
 80124d0:	3b01      	subs	r3, #1
 80124d2:	781a      	ldrb	r2, [r3, #0]
 80124d4:	2a30      	cmp	r2, #48	; 0x30
 80124d6:	d0fa      	beq.n	80124ce <_dtoa_r+0xbea>
 80124d8:	e6db      	b.n	8012292 <_dtoa_r+0x9ae>
 80124da:	9a06      	ldr	r2, [sp, #24]
 80124dc:	429a      	cmp	r2, r3
 80124de:	d18e      	bne.n	80123fe <_dtoa_r+0xb1a>
 80124e0:	9b02      	ldr	r3, [sp, #8]
 80124e2:	3301      	adds	r3, #1
 80124e4:	9302      	str	r3, [sp, #8]
 80124e6:	2331      	movs	r3, #49	; 0x31
 80124e8:	e799      	b.n	801241e <_dtoa_r+0xb3a>
 80124ea:	4b09      	ldr	r3, [pc, #36]	; (8012510 <_dtoa_r+0xc2c>)
 80124ec:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80124ee:	9306      	str	r3, [sp, #24]
 80124f0:	4b08      	ldr	r3, [pc, #32]	; (8012514 <_dtoa_r+0xc30>)
 80124f2:	2a00      	cmp	r2, #0
 80124f4:	d001      	beq.n	80124fa <_dtoa_r+0xc16>
 80124f6:	f7ff fa3f 	bl	8011978 <_dtoa_r+0x94>
 80124fa:	f7ff fa3f 	bl	801197c <_dtoa_r+0x98>
 80124fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012500:	2b00      	cmp	r3, #0
 8012502:	dcb6      	bgt.n	8012472 <_dtoa_r+0xb8e>
 8012504:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012506:	2b02      	cmp	r3, #2
 8012508:	dd00      	ble.n	801250c <_dtoa_r+0xc28>
 801250a:	e6ac      	b.n	8012266 <_dtoa_r+0x982>
 801250c:	e7b1      	b.n	8012472 <_dtoa_r+0xb8e>
 801250e:	46c0      	nop			; (mov r8, r8)
 8012510:	08013a83 	.word	0x08013a83
 8012514:	08013a8b 	.word	0x08013a8b

08012518 <fiprintf>:
 8012518:	b40e      	push	{r1, r2, r3}
 801251a:	b503      	push	{r0, r1, lr}
 801251c:	0001      	movs	r1, r0
 801251e:	ab03      	add	r3, sp, #12
 8012520:	4804      	ldr	r0, [pc, #16]	; (8012534 <fiprintf+0x1c>)
 8012522:	cb04      	ldmia	r3!, {r2}
 8012524:	6800      	ldr	r0, [r0, #0]
 8012526:	9301      	str	r3, [sp, #4]
 8012528:	f000 f8b8 	bl	801269c <_vfiprintf_r>
 801252c:	b002      	add	sp, #8
 801252e:	bc08      	pop	{r3}
 8012530:	b003      	add	sp, #12
 8012532:	4718      	bx	r3
 8012534:	200000e4 	.word	0x200000e4

08012538 <malloc>:
 8012538:	b510      	push	{r4, lr}
 801253a:	4b03      	ldr	r3, [pc, #12]	; (8012548 <malloc+0x10>)
 801253c:	0001      	movs	r1, r0
 801253e:	6818      	ldr	r0, [r3, #0]
 8012540:	f7fe fd58 	bl	8010ff4 <_malloc_r>
 8012544:	bd10      	pop	{r4, pc}
 8012546:	46c0      	nop			; (mov r8, r8)
 8012548:	200000e4 	.word	0x200000e4

0801254c <memchr>:
 801254c:	b2c9      	uxtb	r1, r1
 801254e:	1882      	adds	r2, r0, r2
 8012550:	4290      	cmp	r0, r2
 8012552:	d101      	bne.n	8012558 <memchr+0xc>
 8012554:	2000      	movs	r0, #0
 8012556:	4770      	bx	lr
 8012558:	7803      	ldrb	r3, [r0, #0]
 801255a:	428b      	cmp	r3, r1
 801255c:	d0fb      	beq.n	8012556 <memchr+0xa>
 801255e:	3001      	adds	r0, #1
 8012560:	e7f6      	b.n	8012550 <memchr+0x4>

08012562 <memmove>:
 8012562:	b510      	push	{r4, lr}
 8012564:	4288      	cmp	r0, r1
 8012566:	d902      	bls.n	801256e <memmove+0xc>
 8012568:	188b      	adds	r3, r1, r2
 801256a:	4298      	cmp	r0, r3
 801256c:	d303      	bcc.n	8012576 <memmove+0x14>
 801256e:	2300      	movs	r3, #0
 8012570:	e007      	b.n	8012582 <memmove+0x20>
 8012572:	5c8b      	ldrb	r3, [r1, r2]
 8012574:	5483      	strb	r3, [r0, r2]
 8012576:	3a01      	subs	r2, #1
 8012578:	d2fb      	bcs.n	8012572 <memmove+0x10>
 801257a:	bd10      	pop	{r4, pc}
 801257c:	5ccc      	ldrb	r4, [r1, r3]
 801257e:	54c4      	strb	r4, [r0, r3]
 8012580:	3301      	adds	r3, #1
 8012582:	429a      	cmp	r2, r3
 8012584:	d1fa      	bne.n	801257c <memmove+0x1a>
 8012586:	e7f8      	b.n	801257a <memmove+0x18>

08012588 <__malloc_lock>:
 8012588:	b510      	push	{r4, lr}
 801258a:	4802      	ldr	r0, [pc, #8]	; (8012594 <__malloc_lock+0xc>)
 801258c:	f000 fc65 	bl	8012e5a <__retarget_lock_acquire_recursive>
 8012590:	bd10      	pop	{r4, pc}
 8012592:	46c0      	nop			; (mov r8, r8)
 8012594:	20000d5c 	.word	0x20000d5c

08012598 <__malloc_unlock>:
 8012598:	b510      	push	{r4, lr}
 801259a:	4802      	ldr	r0, [pc, #8]	; (80125a4 <__malloc_unlock+0xc>)
 801259c:	f000 fc5e 	bl	8012e5c <__retarget_lock_release_recursive>
 80125a0:	bd10      	pop	{r4, pc}
 80125a2:	46c0      	nop			; (mov r8, r8)
 80125a4:	20000d5c 	.word	0x20000d5c

080125a8 <_free_r>:
 80125a8:	b570      	push	{r4, r5, r6, lr}
 80125aa:	0005      	movs	r5, r0
 80125ac:	2900      	cmp	r1, #0
 80125ae:	d010      	beq.n	80125d2 <_free_r+0x2a>
 80125b0:	1f0c      	subs	r4, r1, #4
 80125b2:	6823      	ldr	r3, [r4, #0]
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	da00      	bge.n	80125ba <_free_r+0x12>
 80125b8:	18e4      	adds	r4, r4, r3
 80125ba:	0028      	movs	r0, r5
 80125bc:	f7ff ffe4 	bl	8012588 <__malloc_lock>
 80125c0:	4a1d      	ldr	r2, [pc, #116]	; (8012638 <_free_r+0x90>)
 80125c2:	6813      	ldr	r3, [r2, #0]
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	d105      	bne.n	80125d4 <_free_r+0x2c>
 80125c8:	6063      	str	r3, [r4, #4]
 80125ca:	6014      	str	r4, [r2, #0]
 80125cc:	0028      	movs	r0, r5
 80125ce:	f7ff ffe3 	bl	8012598 <__malloc_unlock>
 80125d2:	bd70      	pop	{r4, r5, r6, pc}
 80125d4:	42a3      	cmp	r3, r4
 80125d6:	d908      	bls.n	80125ea <_free_r+0x42>
 80125d8:	6821      	ldr	r1, [r4, #0]
 80125da:	1860      	adds	r0, r4, r1
 80125dc:	4283      	cmp	r3, r0
 80125de:	d1f3      	bne.n	80125c8 <_free_r+0x20>
 80125e0:	6818      	ldr	r0, [r3, #0]
 80125e2:	685b      	ldr	r3, [r3, #4]
 80125e4:	1841      	adds	r1, r0, r1
 80125e6:	6021      	str	r1, [r4, #0]
 80125e8:	e7ee      	b.n	80125c8 <_free_r+0x20>
 80125ea:	001a      	movs	r2, r3
 80125ec:	685b      	ldr	r3, [r3, #4]
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d001      	beq.n	80125f6 <_free_r+0x4e>
 80125f2:	42a3      	cmp	r3, r4
 80125f4:	d9f9      	bls.n	80125ea <_free_r+0x42>
 80125f6:	6811      	ldr	r1, [r2, #0]
 80125f8:	1850      	adds	r0, r2, r1
 80125fa:	42a0      	cmp	r0, r4
 80125fc:	d10b      	bne.n	8012616 <_free_r+0x6e>
 80125fe:	6820      	ldr	r0, [r4, #0]
 8012600:	1809      	adds	r1, r1, r0
 8012602:	1850      	adds	r0, r2, r1
 8012604:	6011      	str	r1, [r2, #0]
 8012606:	4283      	cmp	r3, r0
 8012608:	d1e0      	bne.n	80125cc <_free_r+0x24>
 801260a:	6818      	ldr	r0, [r3, #0]
 801260c:	685b      	ldr	r3, [r3, #4]
 801260e:	1841      	adds	r1, r0, r1
 8012610:	6011      	str	r1, [r2, #0]
 8012612:	6053      	str	r3, [r2, #4]
 8012614:	e7da      	b.n	80125cc <_free_r+0x24>
 8012616:	42a0      	cmp	r0, r4
 8012618:	d902      	bls.n	8012620 <_free_r+0x78>
 801261a:	230c      	movs	r3, #12
 801261c:	602b      	str	r3, [r5, #0]
 801261e:	e7d5      	b.n	80125cc <_free_r+0x24>
 8012620:	6821      	ldr	r1, [r4, #0]
 8012622:	1860      	adds	r0, r4, r1
 8012624:	4283      	cmp	r3, r0
 8012626:	d103      	bne.n	8012630 <_free_r+0x88>
 8012628:	6818      	ldr	r0, [r3, #0]
 801262a:	685b      	ldr	r3, [r3, #4]
 801262c:	1841      	adds	r1, r0, r1
 801262e:	6021      	str	r1, [r4, #0]
 8012630:	6063      	str	r3, [r4, #4]
 8012632:	6054      	str	r4, [r2, #4]
 8012634:	e7ca      	b.n	80125cc <_free_r+0x24>
 8012636:	46c0      	nop			; (mov r8, r8)
 8012638:	20000d50 	.word	0x20000d50

0801263c <_malloc_usable_size_r>:
 801263c:	1f0b      	subs	r3, r1, #4
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	1f18      	subs	r0, r3, #4
 8012642:	2b00      	cmp	r3, #0
 8012644:	da01      	bge.n	801264a <_malloc_usable_size_r+0xe>
 8012646:	580b      	ldr	r3, [r1, r0]
 8012648:	18c0      	adds	r0, r0, r3
 801264a:	4770      	bx	lr

0801264c <__sfputc_r>:
 801264c:	6893      	ldr	r3, [r2, #8]
 801264e:	b510      	push	{r4, lr}
 8012650:	3b01      	subs	r3, #1
 8012652:	6093      	str	r3, [r2, #8]
 8012654:	2b00      	cmp	r3, #0
 8012656:	da04      	bge.n	8012662 <__sfputc_r+0x16>
 8012658:	6994      	ldr	r4, [r2, #24]
 801265a:	42a3      	cmp	r3, r4
 801265c:	db07      	blt.n	801266e <__sfputc_r+0x22>
 801265e:	290a      	cmp	r1, #10
 8012660:	d005      	beq.n	801266e <__sfputc_r+0x22>
 8012662:	6813      	ldr	r3, [r2, #0]
 8012664:	1c58      	adds	r0, r3, #1
 8012666:	6010      	str	r0, [r2, #0]
 8012668:	7019      	strb	r1, [r3, #0]
 801266a:	0008      	movs	r0, r1
 801266c:	bd10      	pop	{r4, pc}
 801266e:	f000 f94f 	bl	8012910 <__swbuf_r>
 8012672:	0001      	movs	r1, r0
 8012674:	e7f9      	b.n	801266a <__sfputc_r+0x1e>

08012676 <__sfputs_r>:
 8012676:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012678:	0006      	movs	r6, r0
 801267a:	000f      	movs	r7, r1
 801267c:	0014      	movs	r4, r2
 801267e:	18d5      	adds	r5, r2, r3
 8012680:	42ac      	cmp	r4, r5
 8012682:	d101      	bne.n	8012688 <__sfputs_r+0x12>
 8012684:	2000      	movs	r0, #0
 8012686:	e007      	b.n	8012698 <__sfputs_r+0x22>
 8012688:	7821      	ldrb	r1, [r4, #0]
 801268a:	003a      	movs	r2, r7
 801268c:	0030      	movs	r0, r6
 801268e:	f7ff ffdd 	bl	801264c <__sfputc_r>
 8012692:	3401      	adds	r4, #1
 8012694:	1c43      	adds	r3, r0, #1
 8012696:	d1f3      	bne.n	8012680 <__sfputs_r+0xa>
 8012698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801269c <_vfiprintf_r>:
 801269c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801269e:	b0a1      	sub	sp, #132	; 0x84
 80126a0:	0006      	movs	r6, r0
 80126a2:	000c      	movs	r4, r1
 80126a4:	001f      	movs	r7, r3
 80126a6:	9203      	str	r2, [sp, #12]
 80126a8:	2800      	cmp	r0, #0
 80126aa:	d004      	beq.n	80126b6 <_vfiprintf_r+0x1a>
 80126ac:	6983      	ldr	r3, [r0, #24]
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d101      	bne.n	80126b6 <_vfiprintf_r+0x1a>
 80126b2:	f000 fb31 	bl	8012d18 <__sinit>
 80126b6:	4b8e      	ldr	r3, [pc, #568]	; (80128f0 <_vfiprintf_r+0x254>)
 80126b8:	429c      	cmp	r4, r3
 80126ba:	d11c      	bne.n	80126f6 <_vfiprintf_r+0x5a>
 80126bc:	6874      	ldr	r4, [r6, #4]
 80126be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80126c0:	07db      	lsls	r3, r3, #31
 80126c2:	d405      	bmi.n	80126d0 <_vfiprintf_r+0x34>
 80126c4:	89a3      	ldrh	r3, [r4, #12]
 80126c6:	059b      	lsls	r3, r3, #22
 80126c8:	d402      	bmi.n	80126d0 <_vfiprintf_r+0x34>
 80126ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80126cc:	f000 fbc5 	bl	8012e5a <__retarget_lock_acquire_recursive>
 80126d0:	89a3      	ldrh	r3, [r4, #12]
 80126d2:	071b      	lsls	r3, r3, #28
 80126d4:	d502      	bpl.n	80126dc <_vfiprintf_r+0x40>
 80126d6:	6923      	ldr	r3, [r4, #16]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d11d      	bne.n	8012718 <_vfiprintf_r+0x7c>
 80126dc:	0021      	movs	r1, r4
 80126de:	0030      	movs	r0, r6
 80126e0:	f000 f96c 	bl	80129bc <__swsetup_r>
 80126e4:	2800      	cmp	r0, #0
 80126e6:	d017      	beq.n	8012718 <_vfiprintf_r+0x7c>
 80126e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80126ea:	07db      	lsls	r3, r3, #31
 80126ec:	d50d      	bpl.n	801270a <_vfiprintf_r+0x6e>
 80126ee:	2001      	movs	r0, #1
 80126f0:	4240      	negs	r0, r0
 80126f2:	b021      	add	sp, #132	; 0x84
 80126f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80126f6:	4b7f      	ldr	r3, [pc, #508]	; (80128f4 <_vfiprintf_r+0x258>)
 80126f8:	429c      	cmp	r4, r3
 80126fa:	d101      	bne.n	8012700 <_vfiprintf_r+0x64>
 80126fc:	68b4      	ldr	r4, [r6, #8]
 80126fe:	e7de      	b.n	80126be <_vfiprintf_r+0x22>
 8012700:	4b7d      	ldr	r3, [pc, #500]	; (80128f8 <_vfiprintf_r+0x25c>)
 8012702:	429c      	cmp	r4, r3
 8012704:	d1db      	bne.n	80126be <_vfiprintf_r+0x22>
 8012706:	68f4      	ldr	r4, [r6, #12]
 8012708:	e7d9      	b.n	80126be <_vfiprintf_r+0x22>
 801270a:	89a3      	ldrh	r3, [r4, #12]
 801270c:	059b      	lsls	r3, r3, #22
 801270e:	d4ee      	bmi.n	80126ee <_vfiprintf_r+0x52>
 8012710:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012712:	f000 fba3 	bl	8012e5c <__retarget_lock_release_recursive>
 8012716:	e7ea      	b.n	80126ee <_vfiprintf_r+0x52>
 8012718:	2300      	movs	r3, #0
 801271a:	ad08      	add	r5, sp, #32
 801271c:	616b      	str	r3, [r5, #20]
 801271e:	3320      	adds	r3, #32
 8012720:	766b      	strb	r3, [r5, #25]
 8012722:	3310      	adds	r3, #16
 8012724:	76ab      	strb	r3, [r5, #26]
 8012726:	9707      	str	r7, [sp, #28]
 8012728:	9f03      	ldr	r7, [sp, #12]
 801272a:	783b      	ldrb	r3, [r7, #0]
 801272c:	2b00      	cmp	r3, #0
 801272e:	d001      	beq.n	8012734 <_vfiprintf_r+0x98>
 8012730:	2b25      	cmp	r3, #37	; 0x25
 8012732:	d14e      	bne.n	80127d2 <_vfiprintf_r+0x136>
 8012734:	9b03      	ldr	r3, [sp, #12]
 8012736:	1afb      	subs	r3, r7, r3
 8012738:	9305      	str	r3, [sp, #20]
 801273a:	9b03      	ldr	r3, [sp, #12]
 801273c:	429f      	cmp	r7, r3
 801273e:	d00d      	beq.n	801275c <_vfiprintf_r+0xc0>
 8012740:	9b05      	ldr	r3, [sp, #20]
 8012742:	0021      	movs	r1, r4
 8012744:	0030      	movs	r0, r6
 8012746:	9a03      	ldr	r2, [sp, #12]
 8012748:	f7ff ff95 	bl	8012676 <__sfputs_r>
 801274c:	1c43      	adds	r3, r0, #1
 801274e:	d100      	bne.n	8012752 <_vfiprintf_r+0xb6>
 8012750:	e0b5      	b.n	80128be <_vfiprintf_r+0x222>
 8012752:	696a      	ldr	r2, [r5, #20]
 8012754:	9b05      	ldr	r3, [sp, #20]
 8012756:	4694      	mov	ip, r2
 8012758:	4463      	add	r3, ip
 801275a:	616b      	str	r3, [r5, #20]
 801275c:	783b      	ldrb	r3, [r7, #0]
 801275e:	2b00      	cmp	r3, #0
 8012760:	d100      	bne.n	8012764 <_vfiprintf_r+0xc8>
 8012762:	e0ac      	b.n	80128be <_vfiprintf_r+0x222>
 8012764:	2201      	movs	r2, #1
 8012766:	1c7b      	adds	r3, r7, #1
 8012768:	9303      	str	r3, [sp, #12]
 801276a:	2300      	movs	r3, #0
 801276c:	4252      	negs	r2, r2
 801276e:	606a      	str	r2, [r5, #4]
 8012770:	a904      	add	r1, sp, #16
 8012772:	3254      	adds	r2, #84	; 0x54
 8012774:	1852      	adds	r2, r2, r1
 8012776:	602b      	str	r3, [r5, #0]
 8012778:	60eb      	str	r3, [r5, #12]
 801277a:	60ab      	str	r3, [r5, #8]
 801277c:	7013      	strb	r3, [r2, #0]
 801277e:	65ab      	str	r3, [r5, #88]	; 0x58
 8012780:	9b03      	ldr	r3, [sp, #12]
 8012782:	2205      	movs	r2, #5
 8012784:	7819      	ldrb	r1, [r3, #0]
 8012786:	485d      	ldr	r0, [pc, #372]	; (80128fc <_vfiprintf_r+0x260>)
 8012788:	f7ff fee0 	bl	801254c <memchr>
 801278c:	9b03      	ldr	r3, [sp, #12]
 801278e:	1c5f      	adds	r7, r3, #1
 8012790:	2800      	cmp	r0, #0
 8012792:	d120      	bne.n	80127d6 <_vfiprintf_r+0x13a>
 8012794:	682a      	ldr	r2, [r5, #0]
 8012796:	06d3      	lsls	r3, r2, #27
 8012798:	d504      	bpl.n	80127a4 <_vfiprintf_r+0x108>
 801279a:	2353      	movs	r3, #83	; 0x53
 801279c:	a904      	add	r1, sp, #16
 801279e:	185b      	adds	r3, r3, r1
 80127a0:	2120      	movs	r1, #32
 80127a2:	7019      	strb	r1, [r3, #0]
 80127a4:	0713      	lsls	r3, r2, #28
 80127a6:	d504      	bpl.n	80127b2 <_vfiprintf_r+0x116>
 80127a8:	2353      	movs	r3, #83	; 0x53
 80127aa:	a904      	add	r1, sp, #16
 80127ac:	185b      	adds	r3, r3, r1
 80127ae:	212b      	movs	r1, #43	; 0x2b
 80127b0:	7019      	strb	r1, [r3, #0]
 80127b2:	9b03      	ldr	r3, [sp, #12]
 80127b4:	781b      	ldrb	r3, [r3, #0]
 80127b6:	2b2a      	cmp	r3, #42	; 0x2a
 80127b8:	d016      	beq.n	80127e8 <_vfiprintf_r+0x14c>
 80127ba:	2100      	movs	r1, #0
 80127bc:	68eb      	ldr	r3, [r5, #12]
 80127be:	9f03      	ldr	r7, [sp, #12]
 80127c0:	783a      	ldrb	r2, [r7, #0]
 80127c2:	1c78      	adds	r0, r7, #1
 80127c4:	3a30      	subs	r2, #48	; 0x30
 80127c6:	4684      	mov	ip, r0
 80127c8:	2a09      	cmp	r2, #9
 80127ca:	d94f      	bls.n	801286c <_vfiprintf_r+0x1d0>
 80127cc:	2900      	cmp	r1, #0
 80127ce:	d111      	bne.n	80127f4 <_vfiprintf_r+0x158>
 80127d0:	e017      	b.n	8012802 <_vfiprintf_r+0x166>
 80127d2:	3701      	adds	r7, #1
 80127d4:	e7a9      	b.n	801272a <_vfiprintf_r+0x8e>
 80127d6:	4b49      	ldr	r3, [pc, #292]	; (80128fc <_vfiprintf_r+0x260>)
 80127d8:	682a      	ldr	r2, [r5, #0]
 80127da:	1ac0      	subs	r0, r0, r3
 80127dc:	2301      	movs	r3, #1
 80127de:	4083      	lsls	r3, r0
 80127e0:	4313      	orrs	r3, r2
 80127e2:	602b      	str	r3, [r5, #0]
 80127e4:	9703      	str	r7, [sp, #12]
 80127e6:	e7cb      	b.n	8012780 <_vfiprintf_r+0xe4>
 80127e8:	9b07      	ldr	r3, [sp, #28]
 80127ea:	1d19      	adds	r1, r3, #4
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	9107      	str	r1, [sp, #28]
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	db01      	blt.n	80127f8 <_vfiprintf_r+0x15c>
 80127f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80127f6:	e004      	b.n	8012802 <_vfiprintf_r+0x166>
 80127f8:	425b      	negs	r3, r3
 80127fa:	60eb      	str	r3, [r5, #12]
 80127fc:	2302      	movs	r3, #2
 80127fe:	4313      	orrs	r3, r2
 8012800:	602b      	str	r3, [r5, #0]
 8012802:	783b      	ldrb	r3, [r7, #0]
 8012804:	2b2e      	cmp	r3, #46	; 0x2e
 8012806:	d10a      	bne.n	801281e <_vfiprintf_r+0x182>
 8012808:	787b      	ldrb	r3, [r7, #1]
 801280a:	2b2a      	cmp	r3, #42	; 0x2a
 801280c:	d137      	bne.n	801287e <_vfiprintf_r+0x1e2>
 801280e:	9b07      	ldr	r3, [sp, #28]
 8012810:	3702      	adds	r7, #2
 8012812:	1d1a      	adds	r2, r3, #4
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	9207      	str	r2, [sp, #28]
 8012818:	2b00      	cmp	r3, #0
 801281a:	db2d      	blt.n	8012878 <_vfiprintf_r+0x1dc>
 801281c:	9309      	str	r3, [sp, #36]	; 0x24
 801281e:	2203      	movs	r2, #3
 8012820:	7839      	ldrb	r1, [r7, #0]
 8012822:	4837      	ldr	r0, [pc, #220]	; (8012900 <_vfiprintf_r+0x264>)
 8012824:	f7ff fe92 	bl	801254c <memchr>
 8012828:	2800      	cmp	r0, #0
 801282a:	d007      	beq.n	801283c <_vfiprintf_r+0x1a0>
 801282c:	4b34      	ldr	r3, [pc, #208]	; (8012900 <_vfiprintf_r+0x264>)
 801282e:	682a      	ldr	r2, [r5, #0]
 8012830:	1ac0      	subs	r0, r0, r3
 8012832:	2340      	movs	r3, #64	; 0x40
 8012834:	4083      	lsls	r3, r0
 8012836:	4313      	orrs	r3, r2
 8012838:	3701      	adds	r7, #1
 801283a:	602b      	str	r3, [r5, #0]
 801283c:	7839      	ldrb	r1, [r7, #0]
 801283e:	1c7b      	adds	r3, r7, #1
 8012840:	2206      	movs	r2, #6
 8012842:	4830      	ldr	r0, [pc, #192]	; (8012904 <_vfiprintf_r+0x268>)
 8012844:	9303      	str	r3, [sp, #12]
 8012846:	7629      	strb	r1, [r5, #24]
 8012848:	f7ff fe80 	bl	801254c <memchr>
 801284c:	2800      	cmp	r0, #0
 801284e:	d045      	beq.n	80128dc <_vfiprintf_r+0x240>
 8012850:	4b2d      	ldr	r3, [pc, #180]	; (8012908 <_vfiprintf_r+0x26c>)
 8012852:	2b00      	cmp	r3, #0
 8012854:	d127      	bne.n	80128a6 <_vfiprintf_r+0x20a>
 8012856:	2207      	movs	r2, #7
 8012858:	9b07      	ldr	r3, [sp, #28]
 801285a:	3307      	adds	r3, #7
 801285c:	4393      	bics	r3, r2
 801285e:	3308      	adds	r3, #8
 8012860:	9307      	str	r3, [sp, #28]
 8012862:	696b      	ldr	r3, [r5, #20]
 8012864:	9a04      	ldr	r2, [sp, #16]
 8012866:	189b      	adds	r3, r3, r2
 8012868:	616b      	str	r3, [r5, #20]
 801286a:	e75d      	b.n	8012728 <_vfiprintf_r+0x8c>
 801286c:	210a      	movs	r1, #10
 801286e:	434b      	muls	r3, r1
 8012870:	4667      	mov	r7, ip
 8012872:	189b      	adds	r3, r3, r2
 8012874:	3909      	subs	r1, #9
 8012876:	e7a3      	b.n	80127c0 <_vfiprintf_r+0x124>
 8012878:	2301      	movs	r3, #1
 801287a:	425b      	negs	r3, r3
 801287c:	e7ce      	b.n	801281c <_vfiprintf_r+0x180>
 801287e:	2300      	movs	r3, #0
 8012880:	001a      	movs	r2, r3
 8012882:	3701      	adds	r7, #1
 8012884:	606b      	str	r3, [r5, #4]
 8012886:	7839      	ldrb	r1, [r7, #0]
 8012888:	1c78      	adds	r0, r7, #1
 801288a:	3930      	subs	r1, #48	; 0x30
 801288c:	4684      	mov	ip, r0
 801288e:	2909      	cmp	r1, #9
 8012890:	d903      	bls.n	801289a <_vfiprintf_r+0x1fe>
 8012892:	2b00      	cmp	r3, #0
 8012894:	d0c3      	beq.n	801281e <_vfiprintf_r+0x182>
 8012896:	9209      	str	r2, [sp, #36]	; 0x24
 8012898:	e7c1      	b.n	801281e <_vfiprintf_r+0x182>
 801289a:	230a      	movs	r3, #10
 801289c:	435a      	muls	r2, r3
 801289e:	4667      	mov	r7, ip
 80128a0:	1852      	adds	r2, r2, r1
 80128a2:	3b09      	subs	r3, #9
 80128a4:	e7ef      	b.n	8012886 <_vfiprintf_r+0x1ea>
 80128a6:	ab07      	add	r3, sp, #28
 80128a8:	9300      	str	r3, [sp, #0]
 80128aa:	0022      	movs	r2, r4
 80128ac:	0029      	movs	r1, r5
 80128ae:	0030      	movs	r0, r6
 80128b0:	4b16      	ldr	r3, [pc, #88]	; (801290c <_vfiprintf_r+0x270>)
 80128b2:	e000      	b.n	80128b6 <_vfiprintf_r+0x21a>
 80128b4:	bf00      	nop
 80128b6:	9004      	str	r0, [sp, #16]
 80128b8:	9b04      	ldr	r3, [sp, #16]
 80128ba:	3301      	adds	r3, #1
 80128bc:	d1d1      	bne.n	8012862 <_vfiprintf_r+0x1c6>
 80128be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80128c0:	07db      	lsls	r3, r3, #31
 80128c2:	d405      	bmi.n	80128d0 <_vfiprintf_r+0x234>
 80128c4:	89a3      	ldrh	r3, [r4, #12]
 80128c6:	059b      	lsls	r3, r3, #22
 80128c8:	d402      	bmi.n	80128d0 <_vfiprintf_r+0x234>
 80128ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80128cc:	f000 fac6 	bl	8012e5c <__retarget_lock_release_recursive>
 80128d0:	89a3      	ldrh	r3, [r4, #12]
 80128d2:	065b      	lsls	r3, r3, #25
 80128d4:	d500      	bpl.n	80128d8 <_vfiprintf_r+0x23c>
 80128d6:	e70a      	b.n	80126ee <_vfiprintf_r+0x52>
 80128d8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80128da:	e70a      	b.n	80126f2 <_vfiprintf_r+0x56>
 80128dc:	ab07      	add	r3, sp, #28
 80128de:	9300      	str	r3, [sp, #0]
 80128e0:	0022      	movs	r2, r4
 80128e2:	0029      	movs	r1, r5
 80128e4:	0030      	movs	r0, r6
 80128e6:	4b09      	ldr	r3, [pc, #36]	; (801290c <_vfiprintf_r+0x270>)
 80128e8:	f7fe fdfc 	bl	80114e4 <_printf_i>
 80128ec:	e7e3      	b.n	80128b6 <_vfiprintf_r+0x21a>
 80128ee:	46c0      	nop			; (mov r8, r8)
 80128f0:	08013b10 	.word	0x08013b10
 80128f4:	08013b30 	.word	0x08013b30
 80128f8:	08013af0 	.word	0x08013af0
 80128fc:	08013a14 	.word	0x08013a14
 8012900:	08013a1a 	.word	0x08013a1a
 8012904:	08013a1e 	.word	0x08013a1e
 8012908:	00000000 	.word	0x00000000
 801290c:	08012677 	.word	0x08012677

08012910 <__swbuf_r>:
 8012910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012912:	0005      	movs	r5, r0
 8012914:	000e      	movs	r6, r1
 8012916:	0014      	movs	r4, r2
 8012918:	2800      	cmp	r0, #0
 801291a:	d004      	beq.n	8012926 <__swbuf_r+0x16>
 801291c:	6983      	ldr	r3, [r0, #24]
 801291e:	2b00      	cmp	r3, #0
 8012920:	d101      	bne.n	8012926 <__swbuf_r+0x16>
 8012922:	f000 f9f9 	bl	8012d18 <__sinit>
 8012926:	4b22      	ldr	r3, [pc, #136]	; (80129b0 <__swbuf_r+0xa0>)
 8012928:	429c      	cmp	r4, r3
 801292a:	d12e      	bne.n	801298a <__swbuf_r+0x7a>
 801292c:	686c      	ldr	r4, [r5, #4]
 801292e:	69a3      	ldr	r3, [r4, #24]
 8012930:	60a3      	str	r3, [r4, #8]
 8012932:	89a3      	ldrh	r3, [r4, #12]
 8012934:	071b      	lsls	r3, r3, #28
 8012936:	d532      	bpl.n	801299e <__swbuf_r+0x8e>
 8012938:	6923      	ldr	r3, [r4, #16]
 801293a:	2b00      	cmp	r3, #0
 801293c:	d02f      	beq.n	801299e <__swbuf_r+0x8e>
 801293e:	6823      	ldr	r3, [r4, #0]
 8012940:	6922      	ldr	r2, [r4, #16]
 8012942:	b2f7      	uxtb	r7, r6
 8012944:	1a98      	subs	r0, r3, r2
 8012946:	6963      	ldr	r3, [r4, #20]
 8012948:	b2f6      	uxtb	r6, r6
 801294a:	4283      	cmp	r3, r0
 801294c:	dc05      	bgt.n	801295a <__swbuf_r+0x4a>
 801294e:	0021      	movs	r1, r4
 8012950:	0028      	movs	r0, r5
 8012952:	f000 f93f 	bl	8012bd4 <_fflush_r>
 8012956:	2800      	cmp	r0, #0
 8012958:	d127      	bne.n	80129aa <__swbuf_r+0x9a>
 801295a:	68a3      	ldr	r3, [r4, #8]
 801295c:	3001      	adds	r0, #1
 801295e:	3b01      	subs	r3, #1
 8012960:	60a3      	str	r3, [r4, #8]
 8012962:	6823      	ldr	r3, [r4, #0]
 8012964:	1c5a      	adds	r2, r3, #1
 8012966:	6022      	str	r2, [r4, #0]
 8012968:	701f      	strb	r7, [r3, #0]
 801296a:	6963      	ldr	r3, [r4, #20]
 801296c:	4283      	cmp	r3, r0
 801296e:	d004      	beq.n	801297a <__swbuf_r+0x6a>
 8012970:	89a3      	ldrh	r3, [r4, #12]
 8012972:	07db      	lsls	r3, r3, #31
 8012974:	d507      	bpl.n	8012986 <__swbuf_r+0x76>
 8012976:	2e0a      	cmp	r6, #10
 8012978:	d105      	bne.n	8012986 <__swbuf_r+0x76>
 801297a:	0021      	movs	r1, r4
 801297c:	0028      	movs	r0, r5
 801297e:	f000 f929 	bl	8012bd4 <_fflush_r>
 8012982:	2800      	cmp	r0, #0
 8012984:	d111      	bne.n	80129aa <__swbuf_r+0x9a>
 8012986:	0030      	movs	r0, r6
 8012988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801298a:	4b0a      	ldr	r3, [pc, #40]	; (80129b4 <__swbuf_r+0xa4>)
 801298c:	429c      	cmp	r4, r3
 801298e:	d101      	bne.n	8012994 <__swbuf_r+0x84>
 8012990:	68ac      	ldr	r4, [r5, #8]
 8012992:	e7cc      	b.n	801292e <__swbuf_r+0x1e>
 8012994:	4b08      	ldr	r3, [pc, #32]	; (80129b8 <__swbuf_r+0xa8>)
 8012996:	429c      	cmp	r4, r3
 8012998:	d1c9      	bne.n	801292e <__swbuf_r+0x1e>
 801299a:	68ec      	ldr	r4, [r5, #12]
 801299c:	e7c7      	b.n	801292e <__swbuf_r+0x1e>
 801299e:	0021      	movs	r1, r4
 80129a0:	0028      	movs	r0, r5
 80129a2:	f000 f80b 	bl	80129bc <__swsetup_r>
 80129a6:	2800      	cmp	r0, #0
 80129a8:	d0c9      	beq.n	801293e <__swbuf_r+0x2e>
 80129aa:	2601      	movs	r6, #1
 80129ac:	4276      	negs	r6, r6
 80129ae:	e7ea      	b.n	8012986 <__swbuf_r+0x76>
 80129b0:	08013b10 	.word	0x08013b10
 80129b4:	08013b30 	.word	0x08013b30
 80129b8:	08013af0 	.word	0x08013af0

080129bc <__swsetup_r>:
 80129bc:	4b37      	ldr	r3, [pc, #220]	; (8012a9c <__swsetup_r+0xe0>)
 80129be:	b570      	push	{r4, r5, r6, lr}
 80129c0:	681d      	ldr	r5, [r3, #0]
 80129c2:	0006      	movs	r6, r0
 80129c4:	000c      	movs	r4, r1
 80129c6:	2d00      	cmp	r5, #0
 80129c8:	d005      	beq.n	80129d6 <__swsetup_r+0x1a>
 80129ca:	69ab      	ldr	r3, [r5, #24]
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d102      	bne.n	80129d6 <__swsetup_r+0x1a>
 80129d0:	0028      	movs	r0, r5
 80129d2:	f000 f9a1 	bl	8012d18 <__sinit>
 80129d6:	4b32      	ldr	r3, [pc, #200]	; (8012aa0 <__swsetup_r+0xe4>)
 80129d8:	429c      	cmp	r4, r3
 80129da:	d10f      	bne.n	80129fc <__swsetup_r+0x40>
 80129dc:	686c      	ldr	r4, [r5, #4]
 80129de:	230c      	movs	r3, #12
 80129e0:	5ee2      	ldrsh	r2, [r4, r3]
 80129e2:	b293      	uxth	r3, r2
 80129e4:	0711      	lsls	r1, r2, #28
 80129e6:	d42d      	bmi.n	8012a44 <__swsetup_r+0x88>
 80129e8:	06d9      	lsls	r1, r3, #27
 80129ea:	d411      	bmi.n	8012a10 <__swsetup_r+0x54>
 80129ec:	2309      	movs	r3, #9
 80129ee:	2001      	movs	r0, #1
 80129f0:	6033      	str	r3, [r6, #0]
 80129f2:	3337      	adds	r3, #55	; 0x37
 80129f4:	4313      	orrs	r3, r2
 80129f6:	81a3      	strh	r3, [r4, #12]
 80129f8:	4240      	negs	r0, r0
 80129fa:	bd70      	pop	{r4, r5, r6, pc}
 80129fc:	4b29      	ldr	r3, [pc, #164]	; (8012aa4 <__swsetup_r+0xe8>)
 80129fe:	429c      	cmp	r4, r3
 8012a00:	d101      	bne.n	8012a06 <__swsetup_r+0x4a>
 8012a02:	68ac      	ldr	r4, [r5, #8]
 8012a04:	e7eb      	b.n	80129de <__swsetup_r+0x22>
 8012a06:	4b28      	ldr	r3, [pc, #160]	; (8012aa8 <__swsetup_r+0xec>)
 8012a08:	429c      	cmp	r4, r3
 8012a0a:	d1e8      	bne.n	80129de <__swsetup_r+0x22>
 8012a0c:	68ec      	ldr	r4, [r5, #12]
 8012a0e:	e7e6      	b.n	80129de <__swsetup_r+0x22>
 8012a10:	075b      	lsls	r3, r3, #29
 8012a12:	d513      	bpl.n	8012a3c <__swsetup_r+0x80>
 8012a14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012a16:	2900      	cmp	r1, #0
 8012a18:	d008      	beq.n	8012a2c <__swsetup_r+0x70>
 8012a1a:	0023      	movs	r3, r4
 8012a1c:	3344      	adds	r3, #68	; 0x44
 8012a1e:	4299      	cmp	r1, r3
 8012a20:	d002      	beq.n	8012a28 <__swsetup_r+0x6c>
 8012a22:	0030      	movs	r0, r6
 8012a24:	f7ff fdc0 	bl	80125a8 <_free_r>
 8012a28:	2300      	movs	r3, #0
 8012a2a:	6363      	str	r3, [r4, #52]	; 0x34
 8012a2c:	2224      	movs	r2, #36	; 0x24
 8012a2e:	89a3      	ldrh	r3, [r4, #12]
 8012a30:	4393      	bics	r3, r2
 8012a32:	81a3      	strh	r3, [r4, #12]
 8012a34:	2300      	movs	r3, #0
 8012a36:	6063      	str	r3, [r4, #4]
 8012a38:	6923      	ldr	r3, [r4, #16]
 8012a3a:	6023      	str	r3, [r4, #0]
 8012a3c:	2308      	movs	r3, #8
 8012a3e:	89a2      	ldrh	r2, [r4, #12]
 8012a40:	4313      	orrs	r3, r2
 8012a42:	81a3      	strh	r3, [r4, #12]
 8012a44:	6923      	ldr	r3, [r4, #16]
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d10b      	bne.n	8012a62 <__swsetup_r+0xa6>
 8012a4a:	21a0      	movs	r1, #160	; 0xa0
 8012a4c:	2280      	movs	r2, #128	; 0x80
 8012a4e:	89a3      	ldrh	r3, [r4, #12]
 8012a50:	0089      	lsls	r1, r1, #2
 8012a52:	0092      	lsls	r2, r2, #2
 8012a54:	400b      	ands	r3, r1
 8012a56:	4293      	cmp	r3, r2
 8012a58:	d003      	beq.n	8012a62 <__swsetup_r+0xa6>
 8012a5a:	0021      	movs	r1, r4
 8012a5c:	0030      	movs	r0, r6
 8012a5e:	f000 fa27 	bl	8012eb0 <__smakebuf_r>
 8012a62:	220c      	movs	r2, #12
 8012a64:	5ea3      	ldrsh	r3, [r4, r2]
 8012a66:	2001      	movs	r0, #1
 8012a68:	001a      	movs	r2, r3
 8012a6a:	b299      	uxth	r1, r3
 8012a6c:	4002      	ands	r2, r0
 8012a6e:	4203      	tst	r3, r0
 8012a70:	d00f      	beq.n	8012a92 <__swsetup_r+0xd6>
 8012a72:	2200      	movs	r2, #0
 8012a74:	60a2      	str	r2, [r4, #8]
 8012a76:	6962      	ldr	r2, [r4, #20]
 8012a78:	4252      	negs	r2, r2
 8012a7a:	61a2      	str	r2, [r4, #24]
 8012a7c:	2000      	movs	r0, #0
 8012a7e:	6922      	ldr	r2, [r4, #16]
 8012a80:	4282      	cmp	r2, r0
 8012a82:	d1ba      	bne.n	80129fa <__swsetup_r+0x3e>
 8012a84:	060a      	lsls	r2, r1, #24
 8012a86:	d5b8      	bpl.n	80129fa <__swsetup_r+0x3e>
 8012a88:	2240      	movs	r2, #64	; 0x40
 8012a8a:	4313      	orrs	r3, r2
 8012a8c:	81a3      	strh	r3, [r4, #12]
 8012a8e:	3801      	subs	r0, #1
 8012a90:	e7b3      	b.n	80129fa <__swsetup_r+0x3e>
 8012a92:	0788      	lsls	r0, r1, #30
 8012a94:	d400      	bmi.n	8012a98 <__swsetup_r+0xdc>
 8012a96:	6962      	ldr	r2, [r4, #20]
 8012a98:	60a2      	str	r2, [r4, #8]
 8012a9a:	e7ef      	b.n	8012a7c <__swsetup_r+0xc0>
 8012a9c:	200000e4 	.word	0x200000e4
 8012aa0:	08013b10 	.word	0x08013b10
 8012aa4:	08013b30 	.word	0x08013b30
 8012aa8:	08013af0 	.word	0x08013af0

08012aac <abort>:
 8012aac:	2006      	movs	r0, #6
 8012aae:	b510      	push	{r4, lr}
 8012ab0:	f000 fa6c 	bl	8012f8c <raise>
 8012ab4:	2001      	movs	r0, #1
 8012ab6:	f7f6 f935 	bl	8008d24 <_exit>
	...

08012abc <__sflush_r>:
 8012abc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012abe:	898b      	ldrh	r3, [r1, #12]
 8012ac0:	0005      	movs	r5, r0
 8012ac2:	000c      	movs	r4, r1
 8012ac4:	071a      	lsls	r2, r3, #28
 8012ac6:	d45f      	bmi.n	8012b88 <__sflush_r+0xcc>
 8012ac8:	684a      	ldr	r2, [r1, #4]
 8012aca:	2a00      	cmp	r2, #0
 8012acc:	dc04      	bgt.n	8012ad8 <__sflush_r+0x1c>
 8012ace:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8012ad0:	2a00      	cmp	r2, #0
 8012ad2:	dc01      	bgt.n	8012ad8 <__sflush_r+0x1c>
 8012ad4:	2000      	movs	r0, #0
 8012ad6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012ad8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8012ada:	2f00      	cmp	r7, #0
 8012adc:	d0fa      	beq.n	8012ad4 <__sflush_r+0x18>
 8012ade:	2200      	movs	r2, #0
 8012ae0:	2180      	movs	r1, #128	; 0x80
 8012ae2:	682e      	ldr	r6, [r5, #0]
 8012ae4:	602a      	str	r2, [r5, #0]
 8012ae6:	001a      	movs	r2, r3
 8012ae8:	0149      	lsls	r1, r1, #5
 8012aea:	400a      	ands	r2, r1
 8012aec:	420b      	tst	r3, r1
 8012aee:	d034      	beq.n	8012b5a <__sflush_r+0x9e>
 8012af0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012af2:	89a3      	ldrh	r3, [r4, #12]
 8012af4:	075b      	lsls	r3, r3, #29
 8012af6:	d506      	bpl.n	8012b06 <__sflush_r+0x4a>
 8012af8:	6863      	ldr	r3, [r4, #4]
 8012afa:	1ac0      	subs	r0, r0, r3
 8012afc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d001      	beq.n	8012b06 <__sflush_r+0x4a>
 8012b02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012b04:	1ac0      	subs	r0, r0, r3
 8012b06:	0002      	movs	r2, r0
 8012b08:	6a21      	ldr	r1, [r4, #32]
 8012b0a:	2300      	movs	r3, #0
 8012b0c:	0028      	movs	r0, r5
 8012b0e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8012b10:	47b8      	blx	r7
 8012b12:	89a1      	ldrh	r1, [r4, #12]
 8012b14:	1c43      	adds	r3, r0, #1
 8012b16:	d106      	bne.n	8012b26 <__sflush_r+0x6a>
 8012b18:	682b      	ldr	r3, [r5, #0]
 8012b1a:	2b1d      	cmp	r3, #29
 8012b1c:	d831      	bhi.n	8012b82 <__sflush_r+0xc6>
 8012b1e:	4a2c      	ldr	r2, [pc, #176]	; (8012bd0 <__sflush_r+0x114>)
 8012b20:	40da      	lsrs	r2, r3
 8012b22:	07d3      	lsls	r3, r2, #31
 8012b24:	d52d      	bpl.n	8012b82 <__sflush_r+0xc6>
 8012b26:	2300      	movs	r3, #0
 8012b28:	6063      	str	r3, [r4, #4]
 8012b2a:	6923      	ldr	r3, [r4, #16]
 8012b2c:	6023      	str	r3, [r4, #0]
 8012b2e:	04cb      	lsls	r3, r1, #19
 8012b30:	d505      	bpl.n	8012b3e <__sflush_r+0x82>
 8012b32:	1c43      	adds	r3, r0, #1
 8012b34:	d102      	bne.n	8012b3c <__sflush_r+0x80>
 8012b36:	682b      	ldr	r3, [r5, #0]
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d100      	bne.n	8012b3e <__sflush_r+0x82>
 8012b3c:	6560      	str	r0, [r4, #84]	; 0x54
 8012b3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012b40:	602e      	str	r6, [r5, #0]
 8012b42:	2900      	cmp	r1, #0
 8012b44:	d0c6      	beq.n	8012ad4 <__sflush_r+0x18>
 8012b46:	0023      	movs	r3, r4
 8012b48:	3344      	adds	r3, #68	; 0x44
 8012b4a:	4299      	cmp	r1, r3
 8012b4c:	d002      	beq.n	8012b54 <__sflush_r+0x98>
 8012b4e:	0028      	movs	r0, r5
 8012b50:	f7ff fd2a 	bl	80125a8 <_free_r>
 8012b54:	2000      	movs	r0, #0
 8012b56:	6360      	str	r0, [r4, #52]	; 0x34
 8012b58:	e7bd      	b.n	8012ad6 <__sflush_r+0x1a>
 8012b5a:	2301      	movs	r3, #1
 8012b5c:	0028      	movs	r0, r5
 8012b5e:	6a21      	ldr	r1, [r4, #32]
 8012b60:	47b8      	blx	r7
 8012b62:	1c43      	adds	r3, r0, #1
 8012b64:	d1c5      	bne.n	8012af2 <__sflush_r+0x36>
 8012b66:	682b      	ldr	r3, [r5, #0]
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d0c2      	beq.n	8012af2 <__sflush_r+0x36>
 8012b6c:	2b1d      	cmp	r3, #29
 8012b6e:	d001      	beq.n	8012b74 <__sflush_r+0xb8>
 8012b70:	2b16      	cmp	r3, #22
 8012b72:	d101      	bne.n	8012b78 <__sflush_r+0xbc>
 8012b74:	602e      	str	r6, [r5, #0]
 8012b76:	e7ad      	b.n	8012ad4 <__sflush_r+0x18>
 8012b78:	2340      	movs	r3, #64	; 0x40
 8012b7a:	89a2      	ldrh	r2, [r4, #12]
 8012b7c:	4313      	orrs	r3, r2
 8012b7e:	81a3      	strh	r3, [r4, #12]
 8012b80:	e7a9      	b.n	8012ad6 <__sflush_r+0x1a>
 8012b82:	2340      	movs	r3, #64	; 0x40
 8012b84:	430b      	orrs	r3, r1
 8012b86:	e7fa      	b.n	8012b7e <__sflush_r+0xc2>
 8012b88:	690f      	ldr	r7, [r1, #16]
 8012b8a:	2f00      	cmp	r7, #0
 8012b8c:	d0a2      	beq.n	8012ad4 <__sflush_r+0x18>
 8012b8e:	680a      	ldr	r2, [r1, #0]
 8012b90:	600f      	str	r7, [r1, #0]
 8012b92:	1bd2      	subs	r2, r2, r7
 8012b94:	9201      	str	r2, [sp, #4]
 8012b96:	2200      	movs	r2, #0
 8012b98:	079b      	lsls	r3, r3, #30
 8012b9a:	d100      	bne.n	8012b9e <__sflush_r+0xe2>
 8012b9c:	694a      	ldr	r2, [r1, #20]
 8012b9e:	60a2      	str	r2, [r4, #8]
 8012ba0:	9b01      	ldr	r3, [sp, #4]
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	dc00      	bgt.n	8012ba8 <__sflush_r+0xec>
 8012ba6:	e795      	b.n	8012ad4 <__sflush_r+0x18>
 8012ba8:	003a      	movs	r2, r7
 8012baa:	0028      	movs	r0, r5
 8012bac:	9b01      	ldr	r3, [sp, #4]
 8012bae:	6a21      	ldr	r1, [r4, #32]
 8012bb0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012bb2:	47b0      	blx	r6
 8012bb4:	2800      	cmp	r0, #0
 8012bb6:	dc06      	bgt.n	8012bc6 <__sflush_r+0x10a>
 8012bb8:	2340      	movs	r3, #64	; 0x40
 8012bba:	2001      	movs	r0, #1
 8012bbc:	89a2      	ldrh	r2, [r4, #12]
 8012bbe:	4240      	negs	r0, r0
 8012bc0:	4313      	orrs	r3, r2
 8012bc2:	81a3      	strh	r3, [r4, #12]
 8012bc4:	e787      	b.n	8012ad6 <__sflush_r+0x1a>
 8012bc6:	9b01      	ldr	r3, [sp, #4]
 8012bc8:	183f      	adds	r7, r7, r0
 8012bca:	1a1b      	subs	r3, r3, r0
 8012bcc:	9301      	str	r3, [sp, #4]
 8012bce:	e7e7      	b.n	8012ba0 <__sflush_r+0xe4>
 8012bd0:	20400001 	.word	0x20400001

08012bd4 <_fflush_r>:
 8012bd4:	690b      	ldr	r3, [r1, #16]
 8012bd6:	b570      	push	{r4, r5, r6, lr}
 8012bd8:	0005      	movs	r5, r0
 8012bda:	000c      	movs	r4, r1
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d102      	bne.n	8012be6 <_fflush_r+0x12>
 8012be0:	2500      	movs	r5, #0
 8012be2:	0028      	movs	r0, r5
 8012be4:	bd70      	pop	{r4, r5, r6, pc}
 8012be6:	2800      	cmp	r0, #0
 8012be8:	d004      	beq.n	8012bf4 <_fflush_r+0x20>
 8012bea:	6983      	ldr	r3, [r0, #24]
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d101      	bne.n	8012bf4 <_fflush_r+0x20>
 8012bf0:	f000 f892 	bl	8012d18 <__sinit>
 8012bf4:	4b14      	ldr	r3, [pc, #80]	; (8012c48 <_fflush_r+0x74>)
 8012bf6:	429c      	cmp	r4, r3
 8012bf8:	d11b      	bne.n	8012c32 <_fflush_r+0x5e>
 8012bfa:	686c      	ldr	r4, [r5, #4]
 8012bfc:	220c      	movs	r2, #12
 8012bfe:	5ea3      	ldrsh	r3, [r4, r2]
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d0ed      	beq.n	8012be0 <_fflush_r+0xc>
 8012c04:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012c06:	07d2      	lsls	r2, r2, #31
 8012c08:	d404      	bmi.n	8012c14 <_fflush_r+0x40>
 8012c0a:	059b      	lsls	r3, r3, #22
 8012c0c:	d402      	bmi.n	8012c14 <_fflush_r+0x40>
 8012c0e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012c10:	f000 f923 	bl	8012e5a <__retarget_lock_acquire_recursive>
 8012c14:	0028      	movs	r0, r5
 8012c16:	0021      	movs	r1, r4
 8012c18:	f7ff ff50 	bl	8012abc <__sflush_r>
 8012c1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012c1e:	0005      	movs	r5, r0
 8012c20:	07db      	lsls	r3, r3, #31
 8012c22:	d4de      	bmi.n	8012be2 <_fflush_r+0xe>
 8012c24:	89a3      	ldrh	r3, [r4, #12]
 8012c26:	059b      	lsls	r3, r3, #22
 8012c28:	d4db      	bmi.n	8012be2 <_fflush_r+0xe>
 8012c2a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012c2c:	f000 f916 	bl	8012e5c <__retarget_lock_release_recursive>
 8012c30:	e7d7      	b.n	8012be2 <_fflush_r+0xe>
 8012c32:	4b06      	ldr	r3, [pc, #24]	; (8012c4c <_fflush_r+0x78>)
 8012c34:	429c      	cmp	r4, r3
 8012c36:	d101      	bne.n	8012c3c <_fflush_r+0x68>
 8012c38:	68ac      	ldr	r4, [r5, #8]
 8012c3a:	e7df      	b.n	8012bfc <_fflush_r+0x28>
 8012c3c:	4b04      	ldr	r3, [pc, #16]	; (8012c50 <_fflush_r+0x7c>)
 8012c3e:	429c      	cmp	r4, r3
 8012c40:	d1dc      	bne.n	8012bfc <_fflush_r+0x28>
 8012c42:	68ec      	ldr	r4, [r5, #12]
 8012c44:	e7da      	b.n	8012bfc <_fflush_r+0x28>
 8012c46:	46c0      	nop			; (mov r8, r8)
 8012c48:	08013b10 	.word	0x08013b10
 8012c4c:	08013b30 	.word	0x08013b30
 8012c50:	08013af0 	.word	0x08013af0

08012c54 <std>:
 8012c54:	2300      	movs	r3, #0
 8012c56:	b510      	push	{r4, lr}
 8012c58:	0004      	movs	r4, r0
 8012c5a:	6003      	str	r3, [r0, #0]
 8012c5c:	6043      	str	r3, [r0, #4]
 8012c5e:	6083      	str	r3, [r0, #8]
 8012c60:	8181      	strh	r1, [r0, #12]
 8012c62:	6643      	str	r3, [r0, #100]	; 0x64
 8012c64:	0019      	movs	r1, r3
 8012c66:	81c2      	strh	r2, [r0, #14]
 8012c68:	6103      	str	r3, [r0, #16]
 8012c6a:	6143      	str	r3, [r0, #20]
 8012c6c:	6183      	str	r3, [r0, #24]
 8012c6e:	2208      	movs	r2, #8
 8012c70:	305c      	adds	r0, #92	; 0x5c
 8012c72:	f7fc f82a 	bl	800ecca <memset>
 8012c76:	4b05      	ldr	r3, [pc, #20]	; (8012c8c <std+0x38>)
 8012c78:	6224      	str	r4, [r4, #32]
 8012c7a:	6263      	str	r3, [r4, #36]	; 0x24
 8012c7c:	4b04      	ldr	r3, [pc, #16]	; (8012c90 <std+0x3c>)
 8012c7e:	62a3      	str	r3, [r4, #40]	; 0x28
 8012c80:	4b04      	ldr	r3, [pc, #16]	; (8012c94 <std+0x40>)
 8012c82:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012c84:	4b04      	ldr	r3, [pc, #16]	; (8012c98 <std+0x44>)
 8012c86:	6323      	str	r3, [r4, #48]	; 0x30
 8012c88:	bd10      	pop	{r4, pc}
 8012c8a:	46c0      	nop			; (mov r8, r8)
 8012c8c:	08012fcd 	.word	0x08012fcd
 8012c90:	08012ff5 	.word	0x08012ff5
 8012c94:	0801302d 	.word	0x0801302d
 8012c98:	08013059 	.word	0x08013059

08012c9c <_cleanup_r>:
 8012c9c:	b510      	push	{r4, lr}
 8012c9e:	4902      	ldr	r1, [pc, #8]	; (8012ca8 <_cleanup_r+0xc>)
 8012ca0:	f000 f8ba 	bl	8012e18 <_fwalk_reent>
 8012ca4:	bd10      	pop	{r4, pc}
 8012ca6:	46c0      	nop			; (mov r8, r8)
 8012ca8:	08012bd5 	.word	0x08012bd5

08012cac <__sfmoreglue>:
 8012cac:	b570      	push	{r4, r5, r6, lr}
 8012cae:	2568      	movs	r5, #104	; 0x68
 8012cb0:	1e4a      	subs	r2, r1, #1
 8012cb2:	4355      	muls	r5, r2
 8012cb4:	000e      	movs	r6, r1
 8012cb6:	0029      	movs	r1, r5
 8012cb8:	3174      	adds	r1, #116	; 0x74
 8012cba:	f7fe f99b 	bl	8010ff4 <_malloc_r>
 8012cbe:	1e04      	subs	r4, r0, #0
 8012cc0:	d008      	beq.n	8012cd4 <__sfmoreglue+0x28>
 8012cc2:	2100      	movs	r1, #0
 8012cc4:	002a      	movs	r2, r5
 8012cc6:	6001      	str	r1, [r0, #0]
 8012cc8:	6046      	str	r6, [r0, #4]
 8012cca:	300c      	adds	r0, #12
 8012ccc:	60a0      	str	r0, [r4, #8]
 8012cce:	3268      	adds	r2, #104	; 0x68
 8012cd0:	f7fb fffb 	bl	800ecca <memset>
 8012cd4:	0020      	movs	r0, r4
 8012cd6:	bd70      	pop	{r4, r5, r6, pc}

08012cd8 <__sfp_lock_acquire>:
 8012cd8:	b510      	push	{r4, lr}
 8012cda:	4802      	ldr	r0, [pc, #8]	; (8012ce4 <__sfp_lock_acquire+0xc>)
 8012cdc:	f000 f8bd 	bl	8012e5a <__retarget_lock_acquire_recursive>
 8012ce0:	bd10      	pop	{r4, pc}
 8012ce2:	46c0      	nop			; (mov r8, r8)
 8012ce4:	20000d5d 	.word	0x20000d5d

08012ce8 <__sfp_lock_release>:
 8012ce8:	b510      	push	{r4, lr}
 8012cea:	4802      	ldr	r0, [pc, #8]	; (8012cf4 <__sfp_lock_release+0xc>)
 8012cec:	f000 f8b6 	bl	8012e5c <__retarget_lock_release_recursive>
 8012cf0:	bd10      	pop	{r4, pc}
 8012cf2:	46c0      	nop			; (mov r8, r8)
 8012cf4:	20000d5d 	.word	0x20000d5d

08012cf8 <__sinit_lock_acquire>:
 8012cf8:	b510      	push	{r4, lr}
 8012cfa:	4802      	ldr	r0, [pc, #8]	; (8012d04 <__sinit_lock_acquire+0xc>)
 8012cfc:	f000 f8ad 	bl	8012e5a <__retarget_lock_acquire_recursive>
 8012d00:	bd10      	pop	{r4, pc}
 8012d02:	46c0      	nop			; (mov r8, r8)
 8012d04:	20000d5e 	.word	0x20000d5e

08012d08 <__sinit_lock_release>:
 8012d08:	b510      	push	{r4, lr}
 8012d0a:	4802      	ldr	r0, [pc, #8]	; (8012d14 <__sinit_lock_release+0xc>)
 8012d0c:	f000 f8a6 	bl	8012e5c <__retarget_lock_release_recursive>
 8012d10:	bd10      	pop	{r4, pc}
 8012d12:	46c0      	nop			; (mov r8, r8)
 8012d14:	20000d5e 	.word	0x20000d5e

08012d18 <__sinit>:
 8012d18:	b513      	push	{r0, r1, r4, lr}
 8012d1a:	0004      	movs	r4, r0
 8012d1c:	f7ff ffec 	bl	8012cf8 <__sinit_lock_acquire>
 8012d20:	69a3      	ldr	r3, [r4, #24]
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d002      	beq.n	8012d2c <__sinit+0x14>
 8012d26:	f7ff ffef 	bl	8012d08 <__sinit_lock_release>
 8012d2a:	bd13      	pop	{r0, r1, r4, pc}
 8012d2c:	64a3      	str	r3, [r4, #72]	; 0x48
 8012d2e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8012d30:	6523      	str	r3, [r4, #80]	; 0x50
 8012d32:	4b13      	ldr	r3, [pc, #76]	; (8012d80 <__sinit+0x68>)
 8012d34:	4a13      	ldr	r2, [pc, #76]	; (8012d84 <__sinit+0x6c>)
 8012d36:	681b      	ldr	r3, [r3, #0]
 8012d38:	62a2      	str	r2, [r4, #40]	; 0x28
 8012d3a:	9301      	str	r3, [sp, #4]
 8012d3c:	42a3      	cmp	r3, r4
 8012d3e:	d101      	bne.n	8012d44 <__sinit+0x2c>
 8012d40:	2301      	movs	r3, #1
 8012d42:	61a3      	str	r3, [r4, #24]
 8012d44:	0020      	movs	r0, r4
 8012d46:	f000 f81f 	bl	8012d88 <__sfp>
 8012d4a:	6060      	str	r0, [r4, #4]
 8012d4c:	0020      	movs	r0, r4
 8012d4e:	f000 f81b 	bl	8012d88 <__sfp>
 8012d52:	60a0      	str	r0, [r4, #8]
 8012d54:	0020      	movs	r0, r4
 8012d56:	f000 f817 	bl	8012d88 <__sfp>
 8012d5a:	2200      	movs	r2, #0
 8012d5c:	2104      	movs	r1, #4
 8012d5e:	60e0      	str	r0, [r4, #12]
 8012d60:	6860      	ldr	r0, [r4, #4]
 8012d62:	f7ff ff77 	bl	8012c54 <std>
 8012d66:	2201      	movs	r2, #1
 8012d68:	2109      	movs	r1, #9
 8012d6a:	68a0      	ldr	r0, [r4, #8]
 8012d6c:	f7ff ff72 	bl	8012c54 <std>
 8012d70:	2202      	movs	r2, #2
 8012d72:	2112      	movs	r1, #18
 8012d74:	68e0      	ldr	r0, [r4, #12]
 8012d76:	f7ff ff6d 	bl	8012c54 <std>
 8012d7a:	2301      	movs	r3, #1
 8012d7c:	61a3      	str	r3, [r4, #24]
 8012d7e:	e7d2      	b.n	8012d26 <__sinit+0xe>
 8012d80:	080136b8 	.word	0x080136b8
 8012d84:	08012c9d 	.word	0x08012c9d

08012d88 <__sfp>:
 8012d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d8a:	0007      	movs	r7, r0
 8012d8c:	f7ff ffa4 	bl	8012cd8 <__sfp_lock_acquire>
 8012d90:	4b1f      	ldr	r3, [pc, #124]	; (8012e10 <__sfp+0x88>)
 8012d92:	681e      	ldr	r6, [r3, #0]
 8012d94:	69b3      	ldr	r3, [r6, #24]
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d102      	bne.n	8012da0 <__sfp+0x18>
 8012d9a:	0030      	movs	r0, r6
 8012d9c:	f7ff ffbc 	bl	8012d18 <__sinit>
 8012da0:	3648      	adds	r6, #72	; 0x48
 8012da2:	68b4      	ldr	r4, [r6, #8]
 8012da4:	6873      	ldr	r3, [r6, #4]
 8012da6:	3b01      	subs	r3, #1
 8012da8:	d504      	bpl.n	8012db4 <__sfp+0x2c>
 8012daa:	6833      	ldr	r3, [r6, #0]
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d022      	beq.n	8012df6 <__sfp+0x6e>
 8012db0:	6836      	ldr	r6, [r6, #0]
 8012db2:	e7f6      	b.n	8012da2 <__sfp+0x1a>
 8012db4:	220c      	movs	r2, #12
 8012db6:	5ea5      	ldrsh	r5, [r4, r2]
 8012db8:	2d00      	cmp	r5, #0
 8012dba:	d11a      	bne.n	8012df2 <__sfp+0x6a>
 8012dbc:	0020      	movs	r0, r4
 8012dbe:	4b15      	ldr	r3, [pc, #84]	; (8012e14 <__sfp+0x8c>)
 8012dc0:	3058      	adds	r0, #88	; 0x58
 8012dc2:	60e3      	str	r3, [r4, #12]
 8012dc4:	6665      	str	r5, [r4, #100]	; 0x64
 8012dc6:	f000 f847 	bl	8012e58 <__retarget_lock_init_recursive>
 8012dca:	f7ff ff8d 	bl	8012ce8 <__sfp_lock_release>
 8012dce:	0020      	movs	r0, r4
 8012dd0:	2208      	movs	r2, #8
 8012dd2:	0029      	movs	r1, r5
 8012dd4:	6025      	str	r5, [r4, #0]
 8012dd6:	60a5      	str	r5, [r4, #8]
 8012dd8:	6065      	str	r5, [r4, #4]
 8012dda:	6125      	str	r5, [r4, #16]
 8012ddc:	6165      	str	r5, [r4, #20]
 8012dde:	61a5      	str	r5, [r4, #24]
 8012de0:	305c      	adds	r0, #92	; 0x5c
 8012de2:	f7fb ff72 	bl	800ecca <memset>
 8012de6:	6365      	str	r5, [r4, #52]	; 0x34
 8012de8:	63a5      	str	r5, [r4, #56]	; 0x38
 8012dea:	64a5      	str	r5, [r4, #72]	; 0x48
 8012dec:	64e5      	str	r5, [r4, #76]	; 0x4c
 8012dee:	0020      	movs	r0, r4
 8012df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012df2:	3468      	adds	r4, #104	; 0x68
 8012df4:	e7d7      	b.n	8012da6 <__sfp+0x1e>
 8012df6:	2104      	movs	r1, #4
 8012df8:	0038      	movs	r0, r7
 8012dfa:	f7ff ff57 	bl	8012cac <__sfmoreglue>
 8012dfe:	1e04      	subs	r4, r0, #0
 8012e00:	6030      	str	r0, [r6, #0]
 8012e02:	d1d5      	bne.n	8012db0 <__sfp+0x28>
 8012e04:	f7ff ff70 	bl	8012ce8 <__sfp_lock_release>
 8012e08:	230c      	movs	r3, #12
 8012e0a:	603b      	str	r3, [r7, #0]
 8012e0c:	e7ef      	b.n	8012dee <__sfp+0x66>
 8012e0e:	46c0      	nop			; (mov r8, r8)
 8012e10:	080136b8 	.word	0x080136b8
 8012e14:	ffff0001 	.word	0xffff0001

08012e18 <_fwalk_reent>:
 8012e18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012e1a:	0004      	movs	r4, r0
 8012e1c:	0006      	movs	r6, r0
 8012e1e:	2700      	movs	r7, #0
 8012e20:	9101      	str	r1, [sp, #4]
 8012e22:	3448      	adds	r4, #72	; 0x48
 8012e24:	6863      	ldr	r3, [r4, #4]
 8012e26:	68a5      	ldr	r5, [r4, #8]
 8012e28:	9300      	str	r3, [sp, #0]
 8012e2a:	9b00      	ldr	r3, [sp, #0]
 8012e2c:	3b01      	subs	r3, #1
 8012e2e:	9300      	str	r3, [sp, #0]
 8012e30:	d504      	bpl.n	8012e3c <_fwalk_reent+0x24>
 8012e32:	6824      	ldr	r4, [r4, #0]
 8012e34:	2c00      	cmp	r4, #0
 8012e36:	d1f5      	bne.n	8012e24 <_fwalk_reent+0xc>
 8012e38:	0038      	movs	r0, r7
 8012e3a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012e3c:	89ab      	ldrh	r3, [r5, #12]
 8012e3e:	2b01      	cmp	r3, #1
 8012e40:	d908      	bls.n	8012e54 <_fwalk_reent+0x3c>
 8012e42:	220e      	movs	r2, #14
 8012e44:	5eab      	ldrsh	r3, [r5, r2]
 8012e46:	3301      	adds	r3, #1
 8012e48:	d004      	beq.n	8012e54 <_fwalk_reent+0x3c>
 8012e4a:	0029      	movs	r1, r5
 8012e4c:	0030      	movs	r0, r6
 8012e4e:	9b01      	ldr	r3, [sp, #4]
 8012e50:	4798      	blx	r3
 8012e52:	4307      	orrs	r7, r0
 8012e54:	3568      	adds	r5, #104	; 0x68
 8012e56:	e7e8      	b.n	8012e2a <_fwalk_reent+0x12>

08012e58 <__retarget_lock_init_recursive>:
 8012e58:	4770      	bx	lr

08012e5a <__retarget_lock_acquire_recursive>:
 8012e5a:	4770      	bx	lr

08012e5c <__retarget_lock_release_recursive>:
 8012e5c:	4770      	bx	lr
	...

08012e60 <__swhatbuf_r>:
 8012e60:	b570      	push	{r4, r5, r6, lr}
 8012e62:	000e      	movs	r6, r1
 8012e64:	001d      	movs	r5, r3
 8012e66:	230e      	movs	r3, #14
 8012e68:	5ec9      	ldrsh	r1, [r1, r3]
 8012e6a:	0014      	movs	r4, r2
 8012e6c:	b096      	sub	sp, #88	; 0x58
 8012e6e:	2900      	cmp	r1, #0
 8012e70:	da08      	bge.n	8012e84 <__swhatbuf_r+0x24>
 8012e72:	220c      	movs	r2, #12
 8012e74:	5eb3      	ldrsh	r3, [r6, r2]
 8012e76:	2200      	movs	r2, #0
 8012e78:	602a      	str	r2, [r5, #0]
 8012e7a:	061b      	lsls	r3, r3, #24
 8012e7c:	d411      	bmi.n	8012ea2 <__swhatbuf_r+0x42>
 8012e7e:	2380      	movs	r3, #128	; 0x80
 8012e80:	00db      	lsls	r3, r3, #3
 8012e82:	e00f      	b.n	8012ea4 <__swhatbuf_r+0x44>
 8012e84:	466a      	mov	r2, sp
 8012e86:	f000 f913 	bl	80130b0 <_fstat_r>
 8012e8a:	2800      	cmp	r0, #0
 8012e8c:	dbf1      	blt.n	8012e72 <__swhatbuf_r+0x12>
 8012e8e:	23f0      	movs	r3, #240	; 0xf0
 8012e90:	9901      	ldr	r1, [sp, #4]
 8012e92:	021b      	lsls	r3, r3, #8
 8012e94:	4019      	ands	r1, r3
 8012e96:	4b05      	ldr	r3, [pc, #20]	; (8012eac <__swhatbuf_r+0x4c>)
 8012e98:	18c9      	adds	r1, r1, r3
 8012e9a:	424b      	negs	r3, r1
 8012e9c:	4159      	adcs	r1, r3
 8012e9e:	6029      	str	r1, [r5, #0]
 8012ea0:	e7ed      	b.n	8012e7e <__swhatbuf_r+0x1e>
 8012ea2:	2340      	movs	r3, #64	; 0x40
 8012ea4:	2000      	movs	r0, #0
 8012ea6:	6023      	str	r3, [r4, #0]
 8012ea8:	b016      	add	sp, #88	; 0x58
 8012eaa:	bd70      	pop	{r4, r5, r6, pc}
 8012eac:	ffffe000 	.word	0xffffe000

08012eb0 <__smakebuf_r>:
 8012eb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012eb2:	2602      	movs	r6, #2
 8012eb4:	898b      	ldrh	r3, [r1, #12]
 8012eb6:	0005      	movs	r5, r0
 8012eb8:	000c      	movs	r4, r1
 8012eba:	4233      	tst	r3, r6
 8012ebc:	d006      	beq.n	8012ecc <__smakebuf_r+0x1c>
 8012ebe:	0023      	movs	r3, r4
 8012ec0:	3347      	adds	r3, #71	; 0x47
 8012ec2:	6023      	str	r3, [r4, #0]
 8012ec4:	6123      	str	r3, [r4, #16]
 8012ec6:	2301      	movs	r3, #1
 8012ec8:	6163      	str	r3, [r4, #20]
 8012eca:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8012ecc:	466a      	mov	r2, sp
 8012ece:	ab01      	add	r3, sp, #4
 8012ed0:	f7ff ffc6 	bl	8012e60 <__swhatbuf_r>
 8012ed4:	9900      	ldr	r1, [sp, #0]
 8012ed6:	0007      	movs	r7, r0
 8012ed8:	0028      	movs	r0, r5
 8012eda:	f7fe f88b 	bl	8010ff4 <_malloc_r>
 8012ede:	2800      	cmp	r0, #0
 8012ee0:	d108      	bne.n	8012ef4 <__smakebuf_r+0x44>
 8012ee2:	220c      	movs	r2, #12
 8012ee4:	5ea3      	ldrsh	r3, [r4, r2]
 8012ee6:	059a      	lsls	r2, r3, #22
 8012ee8:	d4ef      	bmi.n	8012eca <__smakebuf_r+0x1a>
 8012eea:	2203      	movs	r2, #3
 8012eec:	4393      	bics	r3, r2
 8012eee:	431e      	orrs	r6, r3
 8012ef0:	81a6      	strh	r6, [r4, #12]
 8012ef2:	e7e4      	b.n	8012ebe <__smakebuf_r+0xe>
 8012ef4:	4b0f      	ldr	r3, [pc, #60]	; (8012f34 <__smakebuf_r+0x84>)
 8012ef6:	62ab      	str	r3, [r5, #40]	; 0x28
 8012ef8:	2380      	movs	r3, #128	; 0x80
 8012efa:	89a2      	ldrh	r2, [r4, #12]
 8012efc:	6020      	str	r0, [r4, #0]
 8012efe:	4313      	orrs	r3, r2
 8012f00:	81a3      	strh	r3, [r4, #12]
 8012f02:	9b00      	ldr	r3, [sp, #0]
 8012f04:	6120      	str	r0, [r4, #16]
 8012f06:	6163      	str	r3, [r4, #20]
 8012f08:	9b01      	ldr	r3, [sp, #4]
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d00d      	beq.n	8012f2a <__smakebuf_r+0x7a>
 8012f0e:	0028      	movs	r0, r5
 8012f10:	230e      	movs	r3, #14
 8012f12:	5ee1      	ldrsh	r1, [r4, r3]
 8012f14:	f000 f8de 	bl	80130d4 <_isatty_r>
 8012f18:	2800      	cmp	r0, #0
 8012f1a:	d006      	beq.n	8012f2a <__smakebuf_r+0x7a>
 8012f1c:	2203      	movs	r2, #3
 8012f1e:	89a3      	ldrh	r3, [r4, #12]
 8012f20:	4393      	bics	r3, r2
 8012f22:	001a      	movs	r2, r3
 8012f24:	2301      	movs	r3, #1
 8012f26:	4313      	orrs	r3, r2
 8012f28:	81a3      	strh	r3, [r4, #12]
 8012f2a:	89a0      	ldrh	r0, [r4, #12]
 8012f2c:	4307      	orrs	r7, r0
 8012f2e:	81a7      	strh	r7, [r4, #12]
 8012f30:	e7cb      	b.n	8012eca <__smakebuf_r+0x1a>
 8012f32:	46c0      	nop			; (mov r8, r8)
 8012f34:	08012c9d 	.word	0x08012c9d

08012f38 <_raise_r>:
 8012f38:	b570      	push	{r4, r5, r6, lr}
 8012f3a:	0004      	movs	r4, r0
 8012f3c:	000d      	movs	r5, r1
 8012f3e:	291f      	cmp	r1, #31
 8012f40:	d904      	bls.n	8012f4c <_raise_r+0x14>
 8012f42:	2316      	movs	r3, #22
 8012f44:	6003      	str	r3, [r0, #0]
 8012f46:	2001      	movs	r0, #1
 8012f48:	4240      	negs	r0, r0
 8012f4a:	bd70      	pop	{r4, r5, r6, pc}
 8012f4c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d004      	beq.n	8012f5c <_raise_r+0x24>
 8012f52:	008a      	lsls	r2, r1, #2
 8012f54:	189b      	adds	r3, r3, r2
 8012f56:	681a      	ldr	r2, [r3, #0]
 8012f58:	2a00      	cmp	r2, #0
 8012f5a:	d108      	bne.n	8012f6e <_raise_r+0x36>
 8012f5c:	0020      	movs	r0, r4
 8012f5e:	f000 f831 	bl	8012fc4 <_getpid_r>
 8012f62:	002a      	movs	r2, r5
 8012f64:	0001      	movs	r1, r0
 8012f66:	0020      	movs	r0, r4
 8012f68:	f000 f81a 	bl	8012fa0 <_kill_r>
 8012f6c:	e7ed      	b.n	8012f4a <_raise_r+0x12>
 8012f6e:	2000      	movs	r0, #0
 8012f70:	2a01      	cmp	r2, #1
 8012f72:	d0ea      	beq.n	8012f4a <_raise_r+0x12>
 8012f74:	1c51      	adds	r1, r2, #1
 8012f76:	d103      	bne.n	8012f80 <_raise_r+0x48>
 8012f78:	2316      	movs	r3, #22
 8012f7a:	3001      	adds	r0, #1
 8012f7c:	6023      	str	r3, [r4, #0]
 8012f7e:	e7e4      	b.n	8012f4a <_raise_r+0x12>
 8012f80:	2400      	movs	r4, #0
 8012f82:	0028      	movs	r0, r5
 8012f84:	601c      	str	r4, [r3, #0]
 8012f86:	4790      	blx	r2
 8012f88:	0020      	movs	r0, r4
 8012f8a:	e7de      	b.n	8012f4a <_raise_r+0x12>

08012f8c <raise>:
 8012f8c:	b510      	push	{r4, lr}
 8012f8e:	4b03      	ldr	r3, [pc, #12]	; (8012f9c <raise+0x10>)
 8012f90:	0001      	movs	r1, r0
 8012f92:	6818      	ldr	r0, [r3, #0]
 8012f94:	f7ff ffd0 	bl	8012f38 <_raise_r>
 8012f98:	bd10      	pop	{r4, pc}
 8012f9a:	46c0      	nop			; (mov r8, r8)
 8012f9c:	200000e4 	.word	0x200000e4

08012fa0 <_kill_r>:
 8012fa0:	2300      	movs	r3, #0
 8012fa2:	b570      	push	{r4, r5, r6, lr}
 8012fa4:	4d06      	ldr	r5, [pc, #24]	; (8012fc0 <_kill_r+0x20>)
 8012fa6:	0004      	movs	r4, r0
 8012fa8:	0008      	movs	r0, r1
 8012faa:	0011      	movs	r1, r2
 8012fac:	602b      	str	r3, [r5, #0]
 8012fae:	f7f5 fea9 	bl	8008d04 <_kill>
 8012fb2:	1c43      	adds	r3, r0, #1
 8012fb4:	d103      	bne.n	8012fbe <_kill_r+0x1e>
 8012fb6:	682b      	ldr	r3, [r5, #0]
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d000      	beq.n	8012fbe <_kill_r+0x1e>
 8012fbc:	6023      	str	r3, [r4, #0]
 8012fbe:	bd70      	pop	{r4, r5, r6, pc}
 8012fc0:	20000d58 	.word	0x20000d58

08012fc4 <_getpid_r>:
 8012fc4:	b510      	push	{r4, lr}
 8012fc6:	f7f5 fe97 	bl	8008cf8 <_getpid>
 8012fca:	bd10      	pop	{r4, pc}

08012fcc <__sread>:
 8012fcc:	b570      	push	{r4, r5, r6, lr}
 8012fce:	000c      	movs	r4, r1
 8012fd0:	250e      	movs	r5, #14
 8012fd2:	5f49      	ldrsh	r1, [r1, r5]
 8012fd4:	f000 f8a4 	bl	8013120 <_read_r>
 8012fd8:	2800      	cmp	r0, #0
 8012fda:	db03      	blt.n	8012fe4 <__sread+0x18>
 8012fdc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8012fde:	181b      	adds	r3, r3, r0
 8012fe0:	6563      	str	r3, [r4, #84]	; 0x54
 8012fe2:	bd70      	pop	{r4, r5, r6, pc}
 8012fe4:	89a3      	ldrh	r3, [r4, #12]
 8012fe6:	4a02      	ldr	r2, [pc, #8]	; (8012ff0 <__sread+0x24>)
 8012fe8:	4013      	ands	r3, r2
 8012fea:	81a3      	strh	r3, [r4, #12]
 8012fec:	e7f9      	b.n	8012fe2 <__sread+0x16>
 8012fee:	46c0      	nop			; (mov r8, r8)
 8012ff0:	ffffefff 	.word	0xffffefff

08012ff4 <__swrite>:
 8012ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ff6:	001f      	movs	r7, r3
 8012ff8:	898b      	ldrh	r3, [r1, #12]
 8012ffa:	0005      	movs	r5, r0
 8012ffc:	000c      	movs	r4, r1
 8012ffe:	0016      	movs	r6, r2
 8013000:	05db      	lsls	r3, r3, #23
 8013002:	d505      	bpl.n	8013010 <__swrite+0x1c>
 8013004:	230e      	movs	r3, #14
 8013006:	5ec9      	ldrsh	r1, [r1, r3]
 8013008:	2200      	movs	r2, #0
 801300a:	2302      	movs	r3, #2
 801300c:	f000 f874 	bl	80130f8 <_lseek_r>
 8013010:	89a3      	ldrh	r3, [r4, #12]
 8013012:	4a05      	ldr	r2, [pc, #20]	; (8013028 <__swrite+0x34>)
 8013014:	0028      	movs	r0, r5
 8013016:	4013      	ands	r3, r2
 8013018:	81a3      	strh	r3, [r4, #12]
 801301a:	0032      	movs	r2, r6
 801301c:	230e      	movs	r3, #14
 801301e:	5ee1      	ldrsh	r1, [r4, r3]
 8013020:	003b      	movs	r3, r7
 8013022:	f000 f81f 	bl	8013064 <_write_r>
 8013026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013028:	ffffefff 	.word	0xffffefff

0801302c <__sseek>:
 801302c:	b570      	push	{r4, r5, r6, lr}
 801302e:	000c      	movs	r4, r1
 8013030:	250e      	movs	r5, #14
 8013032:	5f49      	ldrsh	r1, [r1, r5]
 8013034:	f000 f860 	bl	80130f8 <_lseek_r>
 8013038:	89a3      	ldrh	r3, [r4, #12]
 801303a:	1c42      	adds	r2, r0, #1
 801303c:	d103      	bne.n	8013046 <__sseek+0x1a>
 801303e:	4a05      	ldr	r2, [pc, #20]	; (8013054 <__sseek+0x28>)
 8013040:	4013      	ands	r3, r2
 8013042:	81a3      	strh	r3, [r4, #12]
 8013044:	bd70      	pop	{r4, r5, r6, pc}
 8013046:	2280      	movs	r2, #128	; 0x80
 8013048:	0152      	lsls	r2, r2, #5
 801304a:	4313      	orrs	r3, r2
 801304c:	81a3      	strh	r3, [r4, #12]
 801304e:	6560      	str	r0, [r4, #84]	; 0x54
 8013050:	e7f8      	b.n	8013044 <__sseek+0x18>
 8013052:	46c0      	nop			; (mov r8, r8)
 8013054:	ffffefff 	.word	0xffffefff

08013058 <__sclose>:
 8013058:	b510      	push	{r4, lr}
 801305a:	230e      	movs	r3, #14
 801305c:	5ec9      	ldrsh	r1, [r1, r3]
 801305e:	f000 f815 	bl	801308c <_close_r>
 8013062:	bd10      	pop	{r4, pc}

08013064 <_write_r>:
 8013064:	b570      	push	{r4, r5, r6, lr}
 8013066:	0004      	movs	r4, r0
 8013068:	0008      	movs	r0, r1
 801306a:	0011      	movs	r1, r2
 801306c:	001a      	movs	r2, r3
 801306e:	2300      	movs	r3, #0
 8013070:	4d05      	ldr	r5, [pc, #20]	; (8013088 <_write_r+0x24>)
 8013072:	602b      	str	r3, [r5, #0]
 8013074:	f7f5 fe7f 	bl	8008d76 <_write>
 8013078:	1c43      	adds	r3, r0, #1
 801307a:	d103      	bne.n	8013084 <_write_r+0x20>
 801307c:	682b      	ldr	r3, [r5, #0]
 801307e:	2b00      	cmp	r3, #0
 8013080:	d000      	beq.n	8013084 <_write_r+0x20>
 8013082:	6023      	str	r3, [r4, #0]
 8013084:	bd70      	pop	{r4, r5, r6, pc}
 8013086:	46c0      	nop			; (mov r8, r8)
 8013088:	20000d58 	.word	0x20000d58

0801308c <_close_r>:
 801308c:	2300      	movs	r3, #0
 801308e:	b570      	push	{r4, r5, r6, lr}
 8013090:	4d06      	ldr	r5, [pc, #24]	; (80130ac <_close_r+0x20>)
 8013092:	0004      	movs	r4, r0
 8013094:	0008      	movs	r0, r1
 8013096:	602b      	str	r3, [r5, #0]
 8013098:	f7f5 fe89 	bl	8008dae <_close>
 801309c:	1c43      	adds	r3, r0, #1
 801309e:	d103      	bne.n	80130a8 <_close_r+0x1c>
 80130a0:	682b      	ldr	r3, [r5, #0]
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d000      	beq.n	80130a8 <_close_r+0x1c>
 80130a6:	6023      	str	r3, [r4, #0]
 80130a8:	bd70      	pop	{r4, r5, r6, pc}
 80130aa:	46c0      	nop			; (mov r8, r8)
 80130ac:	20000d58 	.word	0x20000d58

080130b0 <_fstat_r>:
 80130b0:	2300      	movs	r3, #0
 80130b2:	b570      	push	{r4, r5, r6, lr}
 80130b4:	4d06      	ldr	r5, [pc, #24]	; (80130d0 <_fstat_r+0x20>)
 80130b6:	0004      	movs	r4, r0
 80130b8:	0008      	movs	r0, r1
 80130ba:	0011      	movs	r1, r2
 80130bc:	602b      	str	r3, [r5, #0]
 80130be:	f7f5 fe80 	bl	8008dc2 <_fstat>
 80130c2:	1c43      	adds	r3, r0, #1
 80130c4:	d103      	bne.n	80130ce <_fstat_r+0x1e>
 80130c6:	682b      	ldr	r3, [r5, #0]
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d000      	beq.n	80130ce <_fstat_r+0x1e>
 80130cc:	6023      	str	r3, [r4, #0]
 80130ce:	bd70      	pop	{r4, r5, r6, pc}
 80130d0:	20000d58 	.word	0x20000d58

080130d4 <_isatty_r>:
 80130d4:	2300      	movs	r3, #0
 80130d6:	b570      	push	{r4, r5, r6, lr}
 80130d8:	4d06      	ldr	r5, [pc, #24]	; (80130f4 <_isatty_r+0x20>)
 80130da:	0004      	movs	r4, r0
 80130dc:	0008      	movs	r0, r1
 80130de:	602b      	str	r3, [r5, #0]
 80130e0:	f7f5 fe7d 	bl	8008dde <_isatty>
 80130e4:	1c43      	adds	r3, r0, #1
 80130e6:	d103      	bne.n	80130f0 <_isatty_r+0x1c>
 80130e8:	682b      	ldr	r3, [r5, #0]
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d000      	beq.n	80130f0 <_isatty_r+0x1c>
 80130ee:	6023      	str	r3, [r4, #0]
 80130f0:	bd70      	pop	{r4, r5, r6, pc}
 80130f2:	46c0      	nop			; (mov r8, r8)
 80130f4:	20000d58 	.word	0x20000d58

080130f8 <_lseek_r>:
 80130f8:	b570      	push	{r4, r5, r6, lr}
 80130fa:	0004      	movs	r4, r0
 80130fc:	0008      	movs	r0, r1
 80130fe:	0011      	movs	r1, r2
 8013100:	001a      	movs	r2, r3
 8013102:	2300      	movs	r3, #0
 8013104:	4d05      	ldr	r5, [pc, #20]	; (801311c <_lseek_r+0x24>)
 8013106:	602b      	str	r3, [r5, #0]
 8013108:	f7f5 fe72 	bl	8008df0 <_lseek>
 801310c:	1c43      	adds	r3, r0, #1
 801310e:	d103      	bne.n	8013118 <_lseek_r+0x20>
 8013110:	682b      	ldr	r3, [r5, #0]
 8013112:	2b00      	cmp	r3, #0
 8013114:	d000      	beq.n	8013118 <_lseek_r+0x20>
 8013116:	6023      	str	r3, [r4, #0]
 8013118:	bd70      	pop	{r4, r5, r6, pc}
 801311a:	46c0      	nop			; (mov r8, r8)
 801311c:	20000d58 	.word	0x20000d58

08013120 <_read_r>:
 8013120:	b570      	push	{r4, r5, r6, lr}
 8013122:	0004      	movs	r4, r0
 8013124:	0008      	movs	r0, r1
 8013126:	0011      	movs	r1, r2
 8013128:	001a      	movs	r2, r3
 801312a:	2300      	movs	r3, #0
 801312c:	4d05      	ldr	r5, [pc, #20]	; (8013144 <_read_r+0x24>)
 801312e:	602b      	str	r3, [r5, #0]
 8013130:	f7f5 fe04 	bl	8008d3c <_read>
 8013134:	1c43      	adds	r3, r0, #1
 8013136:	d103      	bne.n	8013140 <_read_r+0x20>
 8013138:	682b      	ldr	r3, [r5, #0]
 801313a:	2b00      	cmp	r3, #0
 801313c:	d000      	beq.n	8013140 <_read_r+0x20>
 801313e:	6023      	str	r3, [r4, #0]
 8013140:	bd70      	pop	{r4, r5, r6, pc}
 8013142:	46c0      	nop			; (mov r8, r8)
 8013144:	20000d58 	.word	0x20000d58

08013148 <_init>:
 8013148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801314a:	46c0      	nop			; (mov r8, r8)
 801314c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801314e:	bc08      	pop	{r3}
 8013150:	469e      	mov	lr, r3
 8013152:	4770      	bx	lr

08013154 <_fini>:
 8013154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013156:	46c0      	nop			; (mov r8, r8)
 8013158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801315a:	bc08      	pop	{r3}
 801315c:	469e      	mov	lr, r3
 801315e:	4770      	bx	lr
