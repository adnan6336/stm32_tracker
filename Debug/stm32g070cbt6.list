
stm32g070cbt6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000133e4  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a08  080134a0  080134a0  000234a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013ea8  08013ea8  000302b8  2**0
                  CONTENTS
  4 .ARM          00000000  08013ea8  08013ea8  000302b8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08013ea8  08013ea8  000302b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013ea8  08013ea8  00023ea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013eac  08013eac  00023eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b8  20000000  08013eb0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000af8  200002b8  08014168  000302b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000db0  08014168  00030db0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000302b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017498  00000000  00000000  000302e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cc1  00000000  00000000  00047778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001338  00000000  00000000  0004a440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001438  00000000  00000000  0004b778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e16  00000000  00000000  0004cbb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017ebd  00000000  00000000  000649c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000932ff  00000000  00000000  0007c883  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010fb82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005df4  00000000  00000000  0010fbd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200002b8 	.word	0x200002b8
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08013484 	.word	0x08013484

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200002bc 	.word	0x200002bc
 80000fc:	08013484 	.word	0x08013484

08000100 <strcmp>:
 8000100:	7802      	ldrb	r2, [r0, #0]
 8000102:	780b      	ldrb	r3, [r1, #0]
 8000104:	2a00      	cmp	r2, #0
 8000106:	d003      	beq.n	8000110 <strcmp+0x10>
 8000108:	3001      	adds	r0, #1
 800010a:	3101      	adds	r1, #1
 800010c:	429a      	cmp	r2, r3
 800010e:	d0f7      	beq.n	8000100 <strcmp>
 8000110:	1ad0      	subs	r0, r2, r3
 8000112:	4770      	bx	lr

08000114 <strlen>:
 8000114:	2300      	movs	r3, #0
 8000116:	5cc2      	ldrb	r2, [r0, r3]
 8000118:	3301      	adds	r3, #1
 800011a:	2a00      	cmp	r2, #0
 800011c:	d1fb      	bne.n	8000116 <strlen+0x2>
 800011e:	1e58      	subs	r0, r3, #1
 8000120:	4770      	bx	lr
	...

08000124 <__gnu_thumb1_case_uqi>:
 8000124:	b402      	push	{r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0049      	lsls	r1, r1, #1
 800012c:	5c09      	ldrb	r1, [r1, r0]
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	448e      	add	lr, r1
 8000132:	bc02      	pop	{r1}
 8000134:	4770      	bx	lr
 8000136:	46c0      	nop			; (mov r8, r8)

08000138 <__gnu_thumb1_case_shi>:
 8000138:	b403      	push	{r0, r1}
 800013a:	4671      	mov	r1, lr
 800013c:	0849      	lsrs	r1, r1, #1
 800013e:	0040      	lsls	r0, r0, #1
 8000140:	0049      	lsls	r1, r1, #1
 8000142:	5e09      	ldrsh	r1, [r1, r0]
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	448e      	add	lr, r1
 8000148:	bc03      	pop	{r0, r1}
 800014a:	4770      	bx	lr

0800014c <__udivsi3>:
 800014c:	2200      	movs	r2, #0
 800014e:	0843      	lsrs	r3, r0, #1
 8000150:	428b      	cmp	r3, r1
 8000152:	d374      	bcc.n	800023e <__udivsi3+0xf2>
 8000154:	0903      	lsrs	r3, r0, #4
 8000156:	428b      	cmp	r3, r1
 8000158:	d35f      	bcc.n	800021a <__udivsi3+0xce>
 800015a:	0a03      	lsrs	r3, r0, #8
 800015c:	428b      	cmp	r3, r1
 800015e:	d344      	bcc.n	80001ea <__udivsi3+0x9e>
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d328      	bcc.n	80001b8 <__udivsi3+0x6c>
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d30d      	bcc.n	8000188 <__udivsi3+0x3c>
 800016c:	22ff      	movs	r2, #255	; 0xff
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	ba12      	rev	r2, r2
 8000172:	0c03      	lsrs	r3, r0, #16
 8000174:	428b      	cmp	r3, r1
 8000176:	d302      	bcc.n	800017e <__udivsi3+0x32>
 8000178:	1212      	asrs	r2, r2, #8
 800017a:	0209      	lsls	r1, r1, #8
 800017c:	d065      	beq.n	800024a <__udivsi3+0xfe>
 800017e:	0b03      	lsrs	r3, r0, #12
 8000180:	428b      	cmp	r3, r1
 8000182:	d319      	bcc.n	80001b8 <__udivsi3+0x6c>
 8000184:	e000      	b.n	8000188 <__udivsi3+0x3c>
 8000186:	0a09      	lsrs	r1, r1, #8
 8000188:	0bc3      	lsrs	r3, r0, #15
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x46>
 800018e:	03cb      	lsls	r3, r1, #15
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b83      	lsrs	r3, r0, #14
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x52>
 800019a:	038b      	lsls	r3, r1, #14
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b43      	lsrs	r3, r0, #13
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x5e>
 80001a6:	034b      	lsls	r3, r1, #13
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0b03      	lsrs	r3, r0, #12
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x6a>
 80001b2:	030b      	lsls	r3, r1, #12
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0ac3      	lsrs	r3, r0, #11
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x76>
 80001be:	02cb      	lsls	r3, r1, #11
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a83      	lsrs	r3, r0, #10
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x82>
 80001ca:	028b      	lsls	r3, r1, #10
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a43      	lsrs	r3, r0, #9
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x8e>
 80001d6:	024b      	lsls	r3, r1, #9
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	0a03      	lsrs	r3, r0, #8
 80001de:	428b      	cmp	r3, r1
 80001e0:	d301      	bcc.n	80001e6 <__udivsi3+0x9a>
 80001e2:	020b      	lsls	r3, r1, #8
 80001e4:	1ac0      	subs	r0, r0, r3
 80001e6:	4152      	adcs	r2, r2
 80001e8:	d2cd      	bcs.n	8000186 <__udivsi3+0x3a>
 80001ea:	09c3      	lsrs	r3, r0, #7
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xa8>
 80001f0:	01cb      	lsls	r3, r1, #7
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0983      	lsrs	r3, r0, #6
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xb4>
 80001fc:	018b      	lsls	r3, r1, #6
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0943      	lsrs	r3, r0, #5
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xc0>
 8000208:	014b      	lsls	r3, r1, #5
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0903      	lsrs	r3, r0, #4
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xcc>
 8000214:	010b      	lsls	r3, r1, #4
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	08c3      	lsrs	r3, r0, #3
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xd8>
 8000220:	00cb      	lsls	r3, r1, #3
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0883      	lsrs	r3, r0, #2
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xe4>
 800022c:	008b      	lsls	r3, r1, #2
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	0843      	lsrs	r3, r0, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d301      	bcc.n	800023c <__udivsi3+0xf0>
 8000238:	004b      	lsls	r3, r1, #1
 800023a:	1ac0      	subs	r0, r0, r3
 800023c:	4152      	adcs	r2, r2
 800023e:	1a41      	subs	r1, r0, r1
 8000240:	d200      	bcs.n	8000244 <__udivsi3+0xf8>
 8000242:	4601      	mov	r1, r0
 8000244:	4152      	adcs	r2, r2
 8000246:	4610      	mov	r0, r2
 8000248:	4770      	bx	lr
 800024a:	e7ff      	b.n	800024c <__udivsi3+0x100>
 800024c:	b501      	push	{r0, lr}
 800024e:	2000      	movs	r0, #0
 8000250:	f000 f8f0 	bl	8000434 <__aeabi_idiv0>
 8000254:	bd02      	pop	{r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_uidivmod>:
 8000258:	2900      	cmp	r1, #0
 800025a:	d0f7      	beq.n	800024c <__udivsi3+0x100>
 800025c:	e776      	b.n	800014c <__udivsi3>
 800025e:	4770      	bx	lr

08000260 <__divsi3>:
 8000260:	4603      	mov	r3, r0
 8000262:	430b      	orrs	r3, r1
 8000264:	d47f      	bmi.n	8000366 <__divsi3+0x106>
 8000266:	2200      	movs	r2, #0
 8000268:	0843      	lsrs	r3, r0, #1
 800026a:	428b      	cmp	r3, r1
 800026c:	d374      	bcc.n	8000358 <__divsi3+0xf8>
 800026e:	0903      	lsrs	r3, r0, #4
 8000270:	428b      	cmp	r3, r1
 8000272:	d35f      	bcc.n	8000334 <__divsi3+0xd4>
 8000274:	0a03      	lsrs	r3, r0, #8
 8000276:	428b      	cmp	r3, r1
 8000278:	d344      	bcc.n	8000304 <__divsi3+0xa4>
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d328      	bcc.n	80002d2 <__divsi3+0x72>
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d30d      	bcc.n	80002a2 <__divsi3+0x42>
 8000286:	22ff      	movs	r2, #255	; 0xff
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	ba12      	rev	r2, r2
 800028c:	0c03      	lsrs	r3, r0, #16
 800028e:	428b      	cmp	r3, r1
 8000290:	d302      	bcc.n	8000298 <__divsi3+0x38>
 8000292:	1212      	asrs	r2, r2, #8
 8000294:	0209      	lsls	r1, r1, #8
 8000296:	d065      	beq.n	8000364 <__divsi3+0x104>
 8000298:	0b03      	lsrs	r3, r0, #12
 800029a:	428b      	cmp	r3, r1
 800029c:	d319      	bcc.n	80002d2 <__divsi3+0x72>
 800029e:	e000      	b.n	80002a2 <__divsi3+0x42>
 80002a0:	0a09      	lsrs	r1, r1, #8
 80002a2:	0bc3      	lsrs	r3, r0, #15
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x4c>
 80002a8:	03cb      	lsls	r3, r1, #15
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b83      	lsrs	r3, r0, #14
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x58>
 80002b4:	038b      	lsls	r3, r1, #14
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b43      	lsrs	r3, r0, #13
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x64>
 80002c0:	034b      	lsls	r3, r1, #13
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0b03      	lsrs	r3, r0, #12
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x70>
 80002cc:	030b      	lsls	r3, r1, #12
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0ac3      	lsrs	r3, r0, #11
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x7c>
 80002d8:	02cb      	lsls	r3, r1, #11
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a83      	lsrs	r3, r0, #10
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x88>
 80002e4:	028b      	lsls	r3, r1, #10
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a43      	lsrs	r3, r0, #9
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0x94>
 80002f0:	024b      	lsls	r3, r1, #9
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	0a03      	lsrs	r3, r0, #8
 80002f8:	428b      	cmp	r3, r1
 80002fa:	d301      	bcc.n	8000300 <__divsi3+0xa0>
 80002fc:	020b      	lsls	r3, r1, #8
 80002fe:	1ac0      	subs	r0, r0, r3
 8000300:	4152      	adcs	r2, r2
 8000302:	d2cd      	bcs.n	80002a0 <__divsi3+0x40>
 8000304:	09c3      	lsrs	r3, r0, #7
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xae>
 800030a:	01cb      	lsls	r3, r1, #7
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0983      	lsrs	r3, r0, #6
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xba>
 8000316:	018b      	lsls	r3, r1, #6
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0943      	lsrs	r3, r0, #5
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xc6>
 8000322:	014b      	lsls	r3, r1, #5
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0903      	lsrs	r3, r0, #4
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xd2>
 800032e:	010b      	lsls	r3, r1, #4
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	08c3      	lsrs	r3, r0, #3
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xde>
 800033a:	00cb      	lsls	r3, r1, #3
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0883      	lsrs	r3, r0, #2
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xea>
 8000346:	008b      	lsls	r3, r1, #2
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	0843      	lsrs	r3, r0, #1
 800034e:	428b      	cmp	r3, r1
 8000350:	d301      	bcc.n	8000356 <__divsi3+0xf6>
 8000352:	004b      	lsls	r3, r1, #1
 8000354:	1ac0      	subs	r0, r0, r3
 8000356:	4152      	adcs	r2, r2
 8000358:	1a41      	subs	r1, r0, r1
 800035a:	d200      	bcs.n	800035e <__divsi3+0xfe>
 800035c:	4601      	mov	r1, r0
 800035e:	4152      	adcs	r2, r2
 8000360:	4610      	mov	r0, r2
 8000362:	4770      	bx	lr
 8000364:	e05d      	b.n	8000422 <__divsi3+0x1c2>
 8000366:	0fca      	lsrs	r2, r1, #31
 8000368:	d000      	beq.n	800036c <__divsi3+0x10c>
 800036a:	4249      	negs	r1, r1
 800036c:	1003      	asrs	r3, r0, #32
 800036e:	d300      	bcc.n	8000372 <__divsi3+0x112>
 8000370:	4240      	negs	r0, r0
 8000372:	4053      	eors	r3, r2
 8000374:	2200      	movs	r2, #0
 8000376:	469c      	mov	ip, r3
 8000378:	0903      	lsrs	r3, r0, #4
 800037a:	428b      	cmp	r3, r1
 800037c:	d32d      	bcc.n	80003da <__divsi3+0x17a>
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d312      	bcc.n	80003aa <__divsi3+0x14a>
 8000384:	22fc      	movs	r2, #252	; 0xfc
 8000386:	0189      	lsls	r1, r1, #6
 8000388:	ba12      	rev	r2, r2
 800038a:	0a03      	lsrs	r3, r0, #8
 800038c:	428b      	cmp	r3, r1
 800038e:	d30c      	bcc.n	80003aa <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	1192      	asrs	r2, r2, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d308      	bcc.n	80003aa <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d304      	bcc.n	80003aa <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	d03a      	beq.n	800041a <__divsi3+0x1ba>
 80003a4:	1192      	asrs	r2, r2, #6
 80003a6:	e000      	b.n	80003aa <__divsi3+0x14a>
 80003a8:	0989      	lsrs	r1, r1, #6
 80003aa:	09c3      	lsrs	r3, r0, #7
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x154>
 80003b0:	01cb      	lsls	r3, r1, #7
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0983      	lsrs	r3, r0, #6
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x160>
 80003bc:	018b      	lsls	r3, r1, #6
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0943      	lsrs	r3, r0, #5
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x16c>
 80003c8:	014b      	lsls	r3, r1, #5
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	0903      	lsrs	r3, r0, #4
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x178>
 80003d4:	010b      	lsls	r3, r1, #4
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	08c3      	lsrs	r3, r0, #3
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x184>
 80003e0:	00cb      	lsls	r3, r1, #3
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	0883      	lsrs	r3, r0, #2
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x190>
 80003ec:	008b      	lsls	r3, r1, #2
 80003ee:	1ac0      	subs	r0, r0, r3
 80003f0:	4152      	adcs	r2, r2
 80003f2:	d2d9      	bcs.n	80003a8 <__divsi3+0x148>
 80003f4:	0843      	lsrs	r3, r0, #1
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d301      	bcc.n	80003fe <__divsi3+0x19e>
 80003fa:	004b      	lsls	r3, r1, #1
 80003fc:	1ac0      	subs	r0, r0, r3
 80003fe:	4152      	adcs	r2, r2
 8000400:	1a41      	subs	r1, r0, r1
 8000402:	d200      	bcs.n	8000406 <__divsi3+0x1a6>
 8000404:	4601      	mov	r1, r0
 8000406:	4663      	mov	r3, ip
 8000408:	4152      	adcs	r2, r2
 800040a:	105b      	asrs	r3, r3, #1
 800040c:	4610      	mov	r0, r2
 800040e:	d301      	bcc.n	8000414 <__divsi3+0x1b4>
 8000410:	4240      	negs	r0, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d500      	bpl.n	8000418 <__divsi3+0x1b8>
 8000416:	4249      	negs	r1, r1
 8000418:	4770      	bx	lr
 800041a:	4663      	mov	r3, ip
 800041c:	105b      	asrs	r3, r3, #1
 800041e:	d300      	bcc.n	8000422 <__divsi3+0x1c2>
 8000420:	4240      	negs	r0, r0
 8000422:	b501      	push	{r0, lr}
 8000424:	2000      	movs	r0, #0
 8000426:	f000 f805 	bl	8000434 <__aeabi_idiv0>
 800042a:	bd02      	pop	{r1, pc}

0800042c <__aeabi_idivmod>:
 800042c:	2900      	cmp	r1, #0
 800042e:	d0f8      	beq.n	8000422 <__divsi3+0x1c2>
 8000430:	e716      	b.n	8000260 <__divsi3>
 8000432:	4770      	bx	lr

08000434 <__aeabi_idiv0>:
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdrcmple>:
 8000438:	4684      	mov	ip, r0
 800043a:	0010      	movs	r0, r2
 800043c:	4662      	mov	r2, ip
 800043e:	468c      	mov	ip, r1
 8000440:	0019      	movs	r1, r3
 8000442:	4663      	mov	r3, ip
 8000444:	e000      	b.n	8000448 <__aeabi_cdcmpeq>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_cdcmpeq>:
 8000448:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044a:	f001 fa89 	bl	8001960 <__ledf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	d401      	bmi.n	8000456 <__aeabi_cdcmpeq+0xe>
 8000452:	2100      	movs	r1, #0
 8000454:	42c8      	cmn	r0, r1
 8000456:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000458 <__aeabi_dcmpeq>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f9d9 	bl	8001810 <__eqdf2>
 800045e:	4240      	negs	r0, r0
 8000460:	3001      	adds	r0, #1
 8000462:	bd10      	pop	{r4, pc}

08000464 <__aeabi_dcmplt>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f001 fa7b 	bl	8001960 <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	db01      	blt.n	8000472 <__aeabi_dcmplt+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__aeabi_dcmple>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f001 fa71 	bl	8001960 <__ledf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dd01      	ble.n	8000486 <__aeabi_dcmple+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			; (mov r8, r8)

0800048c <__aeabi_dcmpgt>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f001 fa01 	bl	8001894 <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	dc01      	bgt.n	800049a <__aeabi_dcmpgt+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			; (mov r8, r8)

080004a0 <__aeabi_dcmpge>:
 80004a0:	b510      	push	{r4, lr}
 80004a2:	f001 f9f7 	bl	8001894 <__gedf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	da01      	bge.n	80004ae <__aeabi_dcmpge+0xe>
 80004aa:	2000      	movs	r0, #0
 80004ac:	bd10      	pop	{r4, pc}
 80004ae:	2001      	movs	r0, #1
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	46c0      	nop			; (mov r8, r8)

080004b4 <__aeabi_cfrcmple>:
 80004b4:	4684      	mov	ip, r0
 80004b6:	0008      	movs	r0, r1
 80004b8:	4661      	mov	r1, ip
 80004ba:	e7ff      	b.n	80004bc <__aeabi_cfcmpeq>

080004bc <__aeabi_cfcmpeq>:
 80004bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004be:	f000 faad 	bl	8000a1c <__lesf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	d401      	bmi.n	80004ca <__aeabi_cfcmpeq+0xe>
 80004c6:	2100      	movs	r1, #0
 80004c8:	42c8      	cmn	r0, r1
 80004ca:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004cc <__aeabi_fcmpeq>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fa39 	bl	8000944 <__eqsf2>
 80004d2:	4240      	negs	r0, r0
 80004d4:	3001      	adds	r0, #1
 80004d6:	bd10      	pop	{r4, pc}

080004d8 <__aeabi_fcmplt>:
 80004d8:	b510      	push	{r4, lr}
 80004da:	f000 fa9f 	bl	8000a1c <__lesf2>
 80004de:	2800      	cmp	r0, #0
 80004e0:	db01      	blt.n	80004e6 <__aeabi_fcmplt+0xe>
 80004e2:	2000      	movs	r0, #0
 80004e4:	bd10      	pop	{r4, pc}
 80004e6:	2001      	movs	r0, #1
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	46c0      	nop			; (mov r8, r8)

080004ec <__aeabi_fcmple>:
 80004ec:	b510      	push	{r4, lr}
 80004ee:	f000 fa95 	bl	8000a1c <__lesf2>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	dd01      	ble.n	80004fa <__aeabi_fcmple+0xe>
 80004f6:	2000      	movs	r0, #0
 80004f8:	bd10      	pop	{r4, pc}
 80004fa:	2001      	movs	r0, #1
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	46c0      	nop			; (mov r8, r8)

08000500 <__aeabi_fcmpgt>:
 8000500:	b510      	push	{r4, lr}
 8000502:	f000 fa45 	bl	8000990 <__gesf2>
 8000506:	2800      	cmp	r0, #0
 8000508:	dc01      	bgt.n	800050e <__aeabi_fcmpgt+0xe>
 800050a:	2000      	movs	r0, #0
 800050c:	bd10      	pop	{r4, pc}
 800050e:	2001      	movs	r0, #1
 8000510:	bd10      	pop	{r4, pc}
 8000512:	46c0      	nop			; (mov r8, r8)

08000514 <__aeabi_fcmpge>:
 8000514:	b510      	push	{r4, lr}
 8000516:	f000 fa3b 	bl	8000990 <__gesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	da01      	bge.n	8000522 <__aeabi_fcmpge+0xe>
 800051e:	2000      	movs	r0, #0
 8000520:	bd10      	pop	{r4, pc}
 8000522:	2001      	movs	r0, #1
 8000524:	bd10      	pop	{r4, pc}
 8000526:	46c0      	nop			; (mov r8, r8)

08000528 <__aeabi_d2uiz>:
 8000528:	b570      	push	{r4, r5, r6, lr}
 800052a:	2200      	movs	r2, #0
 800052c:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <__aeabi_d2uiz+0x38>)
 800052e:	0004      	movs	r4, r0
 8000530:	000d      	movs	r5, r1
 8000532:	f7ff ffb5 	bl	80004a0 <__aeabi_dcmpge>
 8000536:	2800      	cmp	r0, #0
 8000538:	d104      	bne.n	8000544 <__aeabi_d2uiz+0x1c>
 800053a:	0020      	movs	r0, r4
 800053c:	0029      	movs	r1, r5
 800053e:	f002 f88f 	bl	8002660 <__aeabi_d2iz>
 8000542:	bd70      	pop	{r4, r5, r6, pc}
 8000544:	4b06      	ldr	r3, [pc, #24]	; (8000560 <__aeabi_d2uiz+0x38>)
 8000546:	2200      	movs	r2, #0
 8000548:	0020      	movs	r0, r4
 800054a:	0029      	movs	r1, r5
 800054c:	f001 fcd8 	bl	8001f00 <__aeabi_dsub>
 8000550:	f002 f886 	bl	8002660 <__aeabi_d2iz>
 8000554:	2380      	movs	r3, #128	; 0x80
 8000556:	061b      	lsls	r3, r3, #24
 8000558:	469c      	mov	ip, r3
 800055a:	4460      	add	r0, ip
 800055c:	e7f1      	b.n	8000542 <__aeabi_d2uiz+0x1a>
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	41e00000 	.word	0x41e00000

08000564 <__aeabi_d2lz>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	0005      	movs	r5, r0
 8000568:	000c      	movs	r4, r1
 800056a:	2200      	movs	r2, #0
 800056c:	2300      	movs	r3, #0
 800056e:	0028      	movs	r0, r5
 8000570:	0021      	movs	r1, r4
 8000572:	f7ff ff77 	bl	8000464 <__aeabi_dcmplt>
 8000576:	2800      	cmp	r0, #0
 8000578:	d108      	bne.n	800058c <__aeabi_d2lz+0x28>
 800057a:	0028      	movs	r0, r5
 800057c:	0021      	movs	r1, r4
 800057e:	f000 f80f 	bl	80005a0 <__aeabi_d2ulz>
 8000582:	0002      	movs	r2, r0
 8000584:	000b      	movs	r3, r1
 8000586:	0010      	movs	r0, r2
 8000588:	0019      	movs	r1, r3
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	2380      	movs	r3, #128	; 0x80
 800058e:	061b      	lsls	r3, r3, #24
 8000590:	18e1      	adds	r1, r4, r3
 8000592:	0028      	movs	r0, r5
 8000594:	f000 f804 	bl	80005a0 <__aeabi_d2ulz>
 8000598:	2300      	movs	r3, #0
 800059a:	4242      	negs	r2, r0
 800059c:	418b      	sbcs	r3, r1
 800059e:	e7f2      	b.n	8000586 <__aeabi_d2lz+0x22>

080005a0 <__aeabi_d2ulz>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	2200      	movs	r2, #0
 80005a4:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <__aeabi_d2ulz+0x34>)
 80005a6:	000d      	movs	r5, r1
 80005a8:	0004      	movs	r4, r0
 80005aa:	f001 fa3d 	bl	8001a28 <__aeabi_dmul>
 80005ae:	f7ff ffbb 	bl	8000528 <__aeabi_d2uiz>
 80005b2:	0006      	movs	r6, r0
 80005b4:	f002 f8ba 	bl	800272c <__aeabi_ui2d>
 80005b8:	2200      	movs	r2, #0
 80005ba:	4b07      	ldr	r3, [pc, #28]	; (80005d8 <__aeabi_d2ulz+0x38>)
 80005bc:	f001 fa34 	bl	8001a28 <__aeabi_dmul>
 80005c0:	0002      	movs	r2, r0
 80005c2:	000b      	movs	r3, r1
 80005c4:	0020      	movs	r0, r4
 80005c6:	0029      	movs	r1, r5
 80005c8:	f001 fc9a 	bl	8001f00 <__aeabi_dsub>
 80005cc:	f7ff ffac 	bl	8000528 <__aeabi_d2uiz>
 80005d0:	0031      	movs	r1, r6
 80005d2:	bd70      	pop	{r4, r5, r6, pc}
 80005d4:	3df00000 	.word	0x3df00000
 80005d8:	41f00000 	.word	0x41f00000

080005dc <__aeabi_l2d>:
 80005dc:	b570      	push	{r4, r5, r6, lr}
 80005de:	0006      	movs	r6, r0
 80005e0:	0008      	movs	r0, r1
 80005e2:	f002 f873 	bl	80026cc <__aeabi_i2d>
 80005e6:	2200      	movs	r2, #0
 80005e8:	4b06      	ldr	r3, [pc, #24]	; (8000604 <__aeabi_l2d+0x28>)
 80005ea:	f001 fa1d 	bl	8001a28 <__aeabi_dmul>
 80005ee:	000d      	movs	r5, r1
 80005f0:	0004      	movs	r4, r0
 80005f2:	0030      	movs	r0, r6
 80005f4:	f002 f89a 	bl	800272c <__aeabi_ui2d>
 80005f8:	002b      	movs	r3, r5
 80005fa:	0022      	movs	r2, r4
 80005fc:	f000 fad6 	bl	8000bac <__aeabi_dadd>
 8000600:	bd70      	pop	{r4, r5, r6, pc}
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	41f00000 	.word	0x41f00000

08000608 <__aeabi_fadd>:
 8000608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800060a:	46c6      	mov	lr, r8
 800060c:	0243      	lsls	r3, r0, #9
 800060e:	0a5b      	lsrs	r3, r3, #9
 8000610:	024e      	lsls	r6, r1, #9
 8000612:	0045      	lsls	r5, r0, #1
 8000614:	004f      	lsls	r7, r1, #1
 8000616:	00da      	lsls	r2, r3, #3
 8000618:	0fc4      	lsrs	r4, r0, #31
 800061a:	469c      	mov	ip, r3
 800061c:	0a70      	lsrs	r0, r6, #9
 800061e:	4690      	mov	r8, r2
 8000620:	b500      	push	{lr}
 8000622:	0e2d      	lsrs	r5, r5, #24
 8000624:	0e3f      	lsrs	r7, r7, #24
 8000626:	0fc9      	lsrs	r1, r1, #31
 8000628:	09b6      	lsrs	r6, r6, #6
 800062a:	428c      	cmp	r4, r1
 800062c:	d04b      	beq.n	80006c6 <__aeabi_fadd+0xbe>
 800062e:	1bea      	subs	r2, r5, r7
 8000630:	2a00      	cmp	r2, #0
 8000632:	dd36      	ble.n	80006a2 <__aeabi_fadd+0x9a>
 8000634:	2f00      	cmp	r7, #0
 8000636:	d061      	beq.n	80006fc <__aeabi_fadd+0xf4>
 8000638:	2dff      	cmp	r5, #255	; 0xff
 800063a:	d100      	bne.n	800063e <__aeabi_fadd+0x36>
 800063c:	e0ad      	b.n	800079a <__aeabi_fadd+0x192>
 800063e:	2380      	movs	r3, #128	; 0x80
 8000640:	04db      	lsls	r3, r3, #19
 8000642:	431e      	orrs	r6, r3
 8000644:	2a1b      	cmp	r2, #27
 8000646:	dc00      	bgt.n	800064a <__aeabi_fadd+0x42>
 8000648:	e0d3      	b.n	80007f2 <__aeabi_fadd+0x1ea>
 800064a:	2001      	movs	r0, #1
 800064c:	4643      	mov	r3, r8
 800064e:	1a18      	subs	r0, r3, r0
 8000650:	0143      	lsls	r3, r0, #5
 8000652:	d400      	bmi.n	8000656 <__aeabi_fadd+0x4e>
 8000654:	e08c      	b.n	8000770 <__aeabi_fadd+0x168>
 8000656:	0180      	lsls	r0, r0, #6
 8000658:	0987      	lsrs	r7, r0, #6
 800065a:	0038      	movs	r0, r7
 800065c:	f002 f95c 	bl	8002918 <__clzsi2>
 8000660:	3805      	subs	r0, #5
 8000662:	4087      	lsls	r7, r0
 8000664:	4285      	cmp	r5, r0
 8000666:	dc00      	bgt.n	800066a <__aeabi_fadd+0x62>
 8000668:	e0b6      	b.n	80007d8 <__aeabi_fadd+0x1d0>
 800066a:	1a2d      	subs	r5, r5, r0
 800066c:	48b3      	ldr	r0, [pc, #716]	; (800093c <__aeabi_fadd+0x334>)
 800066e:	4038      	ands	r0, r7
 8000670:	0743      	lsls	r3, r0, #29
 8000672:	d004      	beq.n	800067e <__aeabi_fadd+0x76>
 8000674:	230f      	movs	r3, #15
 8000676:	4003      	ands	r3, r0
 8000678:	2b04      	cmp	r3, #4
 800067a:	d000      	beq.n	800067e <__aeabi_fadd+0x76>
 800067c:	3004      	adds	r0, #4
 800067e:	0143      	lsls	r3, r0, #5
 8000680:	d400      	bmi.n	8000684 <__aeabi_fadd+0x7c>
 8000682:	e078      	b.n	8000776 <__aeabi_fadd+0x16e>
 8000684:	1c6a      	adds	r2, r5, #1
 8000686:	2dfe      	cmp	r5, #254	; 0xfe
 8000688:	d065      	beq.n	8000756 <__aeabi_fadd+0x14e>
 800068a:	0180      	lsls	r0, r0, #6
 800068c:	0a43      	lsrs	r3, r0, #9
 800068e:	469c      	mov	ip, r3
 8000690:	b2d2      	uxtb	r2, r2
 8000692:	4663      	mov	r3, ip
 8000694:	05d0      	lsls	r0, r2, #23
 8000696:	4318      	orrs	r0, r3
 8000698:	07e4      	lsls	r4, r4, #31
 800069a:	4320      	orrs	r0, r4
 800069c:	bc80      	pop	{r7}
 800069e:	46b8      	mov	r8, r7
 80006a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006a2:	2a00      	cmp	r2, #0
 80006a4:	d035      	beq.n	8000712 <__aeabi_fadd+0x10a>
 80006a6:	1b7a      	subs	r2, r7, r5
 80006a8:	2d00      	cmp	r5, #0
 80006aa:	d000      	beq.n	80006ae <__aeabi_fadd+0xa6>
 80006ac:	e0af      	b.n	800080e <__aeabi_fadd+0x206>
 80006ae:	4643      	mov	r3, r8
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d100      	bne.n	80006b6 <__aeabi_fadd+0xae>
 80006b4:	e0a7      	b.n	8000806 <__aeabi_fadd+0x1fe>
 80006b6:	1e53      	subs	r3, r2, #1
 80006b8:	2a01      	cmp	r2, #1
 80006ba:	d100      	bne.n	80006be <__aeabi_fadd+0xb6>
 80006bc:	e12f      	b.n	800091e <__aeabi_fadd+0x316>
 80006be:	2aff      	cmp	r2, #255	; 0xff
 80006c0:	d069      	beq.n	8000796 <__aeabi_fadd+0x18e>
 80006c2:	001a      	movs	r2, r3
 80006c4:	e0aa      	b.n	800081c <__aeabi_fadd+0x214>
 80006c6:	1be9      	subs	r1, r5, r7
 80006c8:	2900      	cmp	r1, #0
 80006ca:	dd70      	ble.n	80007ae <__aeabi_fadd+0x1a6>
 80006cc:	2f00      	cmp	r7, #0
 80006ce:	d037      	beq.n	8000740 <__aeabi_fadd+0x138>
 80006d0:	2dff      	cmp	r5, #255	; 0xff
 80006d2:	d062      	beq.n	800079a <__aeabi_fadd+0x192>
 80006d4:	2380      	movs	r3, #128	; 0x80
 80006d6:	04db      	lsls	r3, r3, #19
 80006d8:	431e      	orrs	r6, r3
 80006da:	291b      	cmp	r1, #27
 80006dc:	dc00      	bgt.n	80006e0 <__aeabi_fadd+0xd8>
 80006de:	e0b0      	b.n	8000842 <__aeabi_fadd+0x23a>
 80006e0:	2001      	movs	r0, #1
 80006e2:	4440      	add	r0, r8
 80006e4:	0143      	lsls	r3, r0, #5
 80006e6:	d543      	bpl.n	8000770 <__aeabi_fadd+0x168>
 80006e8:	3501      	adds	r5, #1
 80006ea:	2dff      	cmp	r5, #255	; 0xff
 80006ec:	d033      	beq.n	8000756 <__aeabi_fadd+0x14e>
 80006ee:	2301      	movs	r3, #1
 80006f0:	4a93      	ldr	r2, [pc, #588]	; (8000940 <__aeabi_fadd+0x338>)
 80006f2:	4003      	ands	r3, r0
 80006f4:	0840      	lsrs	r0, r0, #1
 80006f6:	4010      	ands	r0, r2
 80006f8:	4318      	orrs	r0, r3
 80006fa:	e7b9      	b.n	8000670 <__aeabi_fadd+0x68>
 80006fc:	2e00      	cmp	r6, #0
 80006fe:	d100      	bne.n	8000702 <__aeabi_fadd+0xfa>
 8000700:	e083      	b.n	800080a <__aeabi_fadd+0x202>
 8000702:	1e51      	subs	r1, r2, #1
 8000704:	2a01      	cmp	r2, #1
 8000706:	d100      	bne.n	800070a <__aeabi_fadd+0x102>
 8000708:	e0d8      	b.n	80008bc <__aeabi_fadd+0x2b4>
 800070a:	2aff      	cmp	r2, #255	; 0xff
 800070c:	d045      	beq.n	800079a <__aeabi_fadd+0x192>
 800070e:	000a      	movs	r2, r1
 8000710:	e798      	b.n	8000644 <__aeabi_fadd+0x3c>
 8000712:	27fe      	movs	r7, #254	; 0xfe
 8000714:	1c6a      	adds	r2, r5, #1
 8000716:	4217      	tst	r7, r2
 8000718:	d000      	beq.n	800071c <__aeabi_fadd+0x114>
 800071a:	e086      	b.n	800082a <__aeabi_fadd+0x222>
 800071c:	2d00      	cmp	r5, #0
 800071e:	d000      	beq.n	8000722 <__aeabi_fadd+0x11a>
 8000720:	e0b7      	b.n	8000892 <__aeabi_fadd+0x28a>
 8000722:	4643      	mov	r3, r8
 8000724:	2b00      	cmp	r3, #0
 8000726:	d100      	bne.n	800072a <__aeabi_fadd+0x122>
 8000728:	e0f3      	b.n	8000912 <__aeabi_fadd+0x30a>
 800072a:	2200      	movs	r2, #0
 800072c:	2e00      	cmp	r6, #0
 800072e:	d0b0      	beq.n	8000692 <__aeabi_fadd+0x8a>
 8000730:	1b98      	subs	r0, r3, r6
 8000732:	0143      	lsls	r3, r0, #5
 8000734:	d400      	bmi.n	8000738 <__aeabi_fadd+0x130>
 8000736:	e0fa      	b.n	800092e <__aeabi_fadd+0x326>
 8000738:	4643      	mov	r3, r8
 800073a:	000c      	movs	r4, r1
 800073c:	1af0      	subs	r0, r6, r3
 800073e:	e797      	b.n	8000670 <__aeabi_fadd+0x68>
 8000740:	2e00      	cmp	r6, #0
 8000742:	d100      	bne.n	8000746 <__aeabi_fadd+0x13e>
 8000744:	e0c8      	b.n	80008d8 <__aeabi_fadd+0x2d0>
 8000746:	1e4a      	subs	r2, r1, #1
 8000748:	2901      	cmp	r1, #1
 800074a:	d100      	bne.n	800074e <__aeabi_fadd+0x146>
 800074c:	e0ae      	b.n	80008ac <__aeabi_fadd+0x2a4>
 800074e:	29ff      	cmp	r1, #255	; 0xff
 8000750:	d023      	beq.n	800079a <__aeabi_fadd+0x192>
 8000752:	0011      	movs	r1, r2
 8000754:	e7c1      	b.n	80006da <__aeabi_fadd+0xd2>
 8000756:	2300      	movs	r3, #0
 8000758:	22ff      	movs	r2, #255	; 0xff
 800075a:	469c      	mov	ip, r3
 800075c:	e799      	b.n	8000692 <__aeabi_fadd+0x8a>
 800075e:	21fe      	movs	r1, #254	; 0xfe
 8000760:	1c6a      	adds	r2, r5, #1
 8000762:	4211      	tst	r1, r2
 8000764:	d077      	beq.n	8000856 <__aeabi_fadd+0x24e>
 8000766:	2aff      	cmp	r2, #255	; 0xff
 8000768:	d0f5      	beq.n	8000756 <__aeabi_fadd+0x14e>
 800076a:	0015      	movs	r5, r2
 800076c:	4446      	add	r6, r8
 800076e:	0870      	lsrs	r0, r6, #1
 8000770:	0743      	lsls	r3, r0, #29
 8000772:	d000      	beq.n	8000776 <__aeabi_fadd+0x16e>
 8000774:	e77e      	b.n	8000674 <__aeabi_fadd+0x6c>
 8000776:	08c3      	lsrs	r3, r0, #3
 8000778:	2dff      	cmp	r5, #255	; 0xff
 800077a:	d00e      	beq.n	800079a <__aeabi_fadd+0x192>
 800077c:	025b      	lsls	r3, r3, #9
 800077e:	0a5b      	lsrs	r3, r3, #9
 8000780:	469c      	mov	ip, r3
 8000782:	b2ea      	uxtb	r2, r5
 8000784:	e785      	b.n	8000692 <__aeabi_fadd+0x8a>
 8000786:	2e00      	cmp	r6, #0
 8000788:	d007      	beq.n	800079a <__aeabi_fadd+0x192>
 800078a:	2280      	movs	r2, #128	; 0x80
 800078c:	03d2      	lsls	r2, r2, #15
 800078e:	4213      	tst	r3, r2
 8000790:	d003      	beq.n	800079a <__aeabi_fadd+0x192>
 8000792:	4210      	tst	r0, r2
 8000794:	d101      	bne.n	800079a <__aeabi_fadd+0x192>
 8000796:	000c      	movs	r4, r1
 8000798:	0003      	movs	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d0db      	beq.n	8000756 <__aeabi_fadd+0x14e>
 800079e:	2080      	movs	r0, #128	; 0x80
 80007a0:	03c0      	lsls	r0, r0, #15
 80007a2:	4318      	orrs	r0, r3
 80007a4:	0240      	lsls	r0, r0, #9
 80007a6:	0a43      	lsrs	r3, r0, #9
 80007a8:	469c      	mov	ip, r3
 80007aa:	22ff      	movs	r2, #255	; 0xff
 80007ac:	e771      	b.n	8000692 <__aeabi_fadd+0x8a>
 80007ae:	2900      	cmp	r1, #0
 80007b0:	d0d5      	beq.n	800075e <__aeabi_fadd+0x156>
 80007b2:	1b7a      	subs	r2, r7, r5
 80007b4:	2d00      	cmp	r5, #0
 80007b6:	d160      	bne.n	800087a <__aeabi_fadd+0x272>
 80007b8:	4643      	mov	r3, r8
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d024      	beq.n	8000808 <__aeabi_fadd+0x200>
 80007be:	1e53      	subs	r3, r2, #1
 80007c0:	2a01      	cmp	r2, #1
 80007c2:	d073      	beq.n	80008ac <__aeabi_fadd+0x2a4>
 80007c4:	2aff      	cmp	r2, #255	; 0xff
 80007c6:	d0e7      	beq.n	8000798 <__aeabi_fadd+0x190>
 80007c8:	001a      	movs	r2, r3
 80007ca:	2a1b      	cmp	r2, #27
 80007cc:	dc00      	bgt.n	80007d0 <__aeabi_fadd+0x1c8>
 80007ce:	e085      	b.n	80008dc <__aeabi_fadd+0x2d4>
 80007d0:	2001      	movs	r0, #1
 80007d2:	003d      	movs	r5, r7
 80007d4:	1980      	adds	r0, r0, r6
 80007d6:	e785      	b.n	80006e4 <__aeabi_fadd+0xdc>
 80007d8:	2320      	movs	r3, #32
 80007da:	003a      	movs	r2, r7
 80007dc:	1b45      	subs	r5, r0, r5
 80007de:	0038      	movs	r0, r7
 80007e0:	3501      	adds	r5, #1
 80007e2:	40ea      	lsrs	r2, r5
 80007e4:	1b5d      	subs	r5, r3, r5
 80007e6:	40a8      	lsls	r0, r5
 80007e8:	1e43      	subs	r3, r0, #1
 80007ea:	4198      	sbcs	r0, r3
 80007ec:	2500      	movs	r5, #0
 80007ee:	4310      	orrs	r0, r2
 80007f0:	e73e      	b.n	8000670 <__aeabi_fadd+0x68>
 80007f2:	2320      	movs	r3, #32
 80007f4:	0030      	movs	r0, r6
 80007f6:	1a9b      	subs	r3, r3, r2
 80007f8:	0031      	movs	r1, r6
 80007fa:	4098      	lsls	r0, r3
 80007fc:	40d1      	lsrs	r1, r2
 80007fe:	1e43      	subs	r3, r0, #1
 8000800:	4198      	sbcs	r0, r3
 8000802:	4308      	orrs	r0, r1
 8000804:	e722      	b.n	800064c <__aeabi_fadd+0x44>
 8000806:	000c      	movs	r4, r1
 8000808:	0003      	movs	r3, r0
 800080a:	0015      	movs	r5, r2
 800080c:	e7b4      	b.n	8000778 <__aeabi_fadd+0x170>
 800080e:	2fff      	cmp	r7, #255	; 0xff
 8000810:	d0c1      	beq.n	8000796 <__aeabi_fadd+0x18e>
 8000812:	2380      	movs	r3, #128	; 0x80
 8000814:	4640      	mov	r0, r8
 8000816:	04db      	lsls	r3, r3, #19
 8000818:	4318      	orrs	r0, r3
 800081a:	4680      	mov	r8, r0
 800081c:	2a1b      	cmp	r2, #27
 800081e:	dd51      	ble.n	80008c4 <__aeabi_fadd+0x2bc>
 8000820:	2001      	movs	r0, #1
 8000822:	000c      	movs	r4, r1
 8000824:	003d      	movs	r5, r7
 8000826:	1a30      	subs	r0, r6, r0
 8000828:	e712      	b.n	8000650 <__aeabi_fadd+0x48>
 800082a:	4643      	mov	r3, r8
 800082c:	1b9f      	subs	r7, r3, r6
 800082e:	017b      	lsls	r3, r7, #5
 8000830:	d42b      	bmi.n	800088a <__aeabi_fadd+0x282>
 8000832:	2f00      	cmp	r7, #0
 8000834:	d000      	beq.n	8000838 <__aeabi_fadd+0x230>
 8000836:	e710      	b.n	800065a <__aeabi_fadd+0x52>
 8000838:	2300      	movs	r3, #0
 800083a:	2400      	movs	r4, #0
 800083c:	2200      	movs	r2, #0
 800083e:	469c      	mov	ip, r3
 8000840:	e727      	b.n	8000692 <__aeabi_fadd+0x8a>
 8000842:	2320      	movs	r3, #32
 8000844:	0032      	movs	r2, r6
 8000846:	0030      	movs	r0, r6
 8000848:	40ca      	lsrs	r2, r1
 800084a:	1a59      	subs	r1, r3, r1
 800084c:	4088      	lsls	r0, r1
 800084e:	1e43      	subs	r3, r0, #1
 8000850:	4198      	sbcs	r0, r3
 8000852:	4310      	orrs	r0, r2
 8000854:	e745      	b.n	80006e2 <__aeabi_fadd+0xda>
 8000856:	2d00      	cmp	r5, #0
 8000858:	d14a      	bne.n	80008f0 <__aeabi_fadd+0x2e8>
 800085a:	4643      	mov	r3, r8
 800085c:	2b00      	cmp	r3, #0
 800085e:	d063      	beq.n	8000928 <__aeabi_fadd+0x320>
 8000860:	2200      	movs	r2, #0
 8000862:	2e00      	cmp	r6, #0
 8000864:	d100      	bne.n	8000868 <__aeabi_fadd+0x260>
 8000866:	e714      	b.n	8000692 <__aeabi_fadd+0x8a>
 8000868:	0030      	movs	r0, r6
 800086a:	4440      	add	r0, r8
 800086c:	0143      	lsls	r3, r0, #5
 800086e:	d400      	bmi.n	8000872 <__aeabi_fadd+0x26a>
 8000870:	e77e      	b.n	8000770 <__aeabi_fadd+0x168>
 8000872:	4b32      	ldr	r3, [pc, #200]	; (800093c <__aeabi_fadd+0x334>)
 8000874:	3501      	adds	r5, #1
 8000876:	4018      	ands	r0, r3
 8000878:	e77a      	b.n	8000770 <__aeabi_fadd+0x168>
 800087a:	2fff      	cmp	r7, #255	; 0xff
 800087c:	d08c      	beq.n	8000798 <__aeabi_fadd+0x190>
 800087e:	2380      	movs	r3, #128	; 0x80
 8000880:	4641      	mov	r1, r8
 8000882:	04db      	lsls	r3, r3, #19
 8000884:	4319      	orrs	r1, r3
 8000886:	4688      	mov	r8, r1
 8000888:	e79f      	b.n	80007ca <__aeabi_fadd+0x1c2>
 800088a:	4643      	mov	r3, r8
 800088c:	000c      	movs	r4, r1
 800088e:	1af7      	subs	r7, r6, r3
 8000890:	e6e3      	b.n	800065a <__aeabi_fadd+0x52>
 8000892:	4642      	mov	r2, r8
 8000894:	2a00      	cmp	r2, #0
 8000896:	d000      	beq.n	800089a <__aeabi_fadd+0x292>
 8000898:	e775      	b.n	8000786 <__aeabi_fadd+0x17e>
 800089a:	2e00      	cmp	r6, #0
 800089c:	d000      	beq.n	80008a0 <__aeabi_fadd+0x298>
 800089e:	e77a      	b.n	8000796 <__aeabi_fadd+0x18e>
 80008a0:	2380      	movs	r3, #128	; 0x80
 80008a2:	03db      	lsls	r3, r3, #15
 80008a4:	2400      	movs	r4, #0
 80008a6:	469c      	mov	ip, r3
 80008a8:	22ff      	movs	r2, #255	; 0xff
 80008aa:	e6f2      	b.n	8000692 <__aeabi_fadd+0x8a>
 80008ac:	0030      	movs	r0, r6
 80008ae:	4440      	add	r0, r8
 80008b0:	2501      	movs	r5, #1
 80008b2:	0143      	lsls	r3, r0, #5
 80008b4:	d400      	bmi.n	80008b8 <__aeabi_fadd+0x2b0>
 80008b6:	e75b      	b.n	8000770 <__aeabi_fadd+0x168>
 80008b8:	2502      	movs	r5, #2
 80008ba:	e718      	b.n	80006ee <__aeabi_fadd+0xe6>
 80008bc:	4643      	mov	r3, r8
 80008be:	2501      	movs	r5, #1
 80008c0:	1b98      	subs	r0, r3, r6
 80008c2:	e6c5      	b.n	8000650 <__aeabi_fadd+0x48>
 80008c4:	2320      	movs	r3, #32
 80008c6:	4644      	mov	r4, r8
 80008c8:	4640      	mov	r0, r8
 80008ca:	40d4      	lsrs	r4, r2
 80008cc:	1a9a      	subs	r2, r3, r2
 80008ce:	4090      	lsls	r0, r2
 80008d0:	1e43      	subs	r3, r0, #1
 80008d2:	4198      	sbcs	r0, r3
 80008d4:	4320      	orrs	r0, r4
 80008d6:	e7a4      	b.n	8000822 <__aeabi_fadd+0x21a>
 80008d8:	000d      	movs	r5, r1
 80008da:	e74d      	b.n	8000778 <__aeabi_fadd+0x170>
 80008dc:	2320      	movs	r3, #32
 80008de:	4641      	mov	r1, r8
 80008e0:	4640      	mov	r0, r8
 80008e2:	40d1      	lsrs	r1, r2
 80008e4:	1a9a      	subs	r2, r3, r2
 80008e6:	4090      	lsls	r0, r2
 80008e8:	1e43      	subs	r3, r0, #1
 80008ea:	4198      	sbcs	r0, r3
 80008ec:	4308      	orrs	r0, r1
 80008ee:	e770      	b.n	80007d2 <__aeabi_fadd+0x1ca>
 80008f0:	4642      	mov	r2, r8
 80008f2:	2a00      	cmp	r2, #0
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fadd+0x2f0>
 80008f6:	e74f      	b.n	8000798 <__aeabi_fadd+0x190>
 80008f8:	2e00      	cmp	r6, #0
 80008fa:	d100      	bne.n	80008fe <__aeabi_fadd+0x2f6>
 80008fc:	e74d      	b.n	800079a <__aeabi_fadd+0x192>
 80008fe:	2280      	movs	r2, #128	; 0x80
 8000900:	03d2      	lsls	r2, r2, #15
 8000902:	4213      	tst	r3, r2
 8000904:	d100      	bne.n	8000908 <__aeabi_fadd+0x300>
 8000906:	e748      	b.n	800079a <__aeabi_fadd+0x192>
 8000908:	4210      	tst	r0, r2
 800090a:	d000      	beq.n	800090e <__aeabi_fadd+0x306>
 800090c:	e745      	b.n	800079a <__aeabi_fadd+0x192>
 800090e:	0003      	movs	r3, r0
 8000910:	e743      	b.n	800079a <__aeabi_fadd+0x192>
 8000912:	2e00      	cmp	r6, #0
 8000914:	d090      	beq.n	8000838 <__aeabi_fadd+0x230>
 8000916:	000c      	movs	r4, r1
 8000918:	4684      	mov	ip, r0
 800091a:	2200      	movs	r2, #0
 800091c:	e6b9      	b.n	8000692 <__aeabi_fadd+0x8a>
 800091e:	4643      	mov	r3, r8
 8000920:	000c      	movs	r4, r1
 8000922:	1af0      	subs	r0, r6, r3
 8000924:	3501      	adds	r5, #1
 8000926:	e693      	b.n	8000650 <__aeabi_fadd+0x48>
 8000928:	4684      	mov	ip, r0
 800092a:	2200      	movs	r2, #0
 800092c:	e6b1      	b.n	8000692 <__aeabi_fadd+0x8a>
 800092e:	2800      	cmp	r0, #0
 8000930:	d000      	beq.n	8000934 <__aeabi_fadd+0x32c>
 8000932:	e71d      	b.n	8000770 <__aeabi_fadd+0x168>
 8000934:	2300      	movs	r3, #0
 8000936:	2400      	movs	r4, #0
 8000938:	469c      	mov	ip, r3
 800093a:	e6aa      	b.n	8000692 <__aeabi_fadd+0x8a>
 800093c:	fbffffff 	.word	0xfbffffff
 8000940:	7dffffff 	.word	0x7dffffff

08000944 <__eqsf2>:
 8000944:	b570      	push	{r4, r5, r6, lr}
 8000946:	0042      	lsls	r2, r0, #1
 8000948:	0245      	lsls	r5, r0, #9
 800094a:	024e      	lsls	r6, r1, #9
 800094c:	004c      	lsls	r4, r1, #1
 800094e:	0fc3      	lsrs	r3, r0, #31
 8000950:	0a6d      	lsrs	r5, r5, #9
 8000952:	2001      	movs	r0, #1
 8000954:	0e12      	lsrs	r2, r2, #24
 8000956:	0a76      	lsrs	r6, r6, #9
 8000958:	0e24      	lsrs	r4, r4, #24
 800095a:	0fc9      	lsrs	r1, r1, #31
 800095c:	2aff      	cmp	r2, #255	; 0xff
 800095e:	d006      	beq.n	800096e <__eqsf2+0x2a>
 8000960:	2cff      	cmp	r4, #255	; 0xff
 8000962:	d003      	beq.n	800096c <__eqsf2+0x28>
 8000964:	42a2      	cmp	r2, r4
 8000966:	d101      	bne.n	800096c <__eqsf2+0x28>
 8000968:	42b5      	cmp	r5, r6
 800096a:	d006      	beq.n	800097a <__eqsf2+0x36>
 800096c:	bd70      	pop	{r4, r5, r6, pc}
 800096e:	2d00      	cmp	r5, #0
 8000970:	d1fc      	bne.n	800096c <__eqsf2+0x28>
 8000972:	2cff      	cmp	r4, #255	; 0xff
 8000974:	d1fa      	bne.n	800096c <__eqsf2+0x28>
 8000976:	2e00      	cmp	r6, #0
 8000978:	d1f8      	bne.n	800096c <__eqsf2+0x28>
 800097a:	428b      	cmp	r3, r1
 800097c:	d006      	beq.n	800098c <__eqsf2+0x48>
 800097e:	2001      	movs	r0, #1
 8000980:	2a00      	cmp	r2, #0
 8000982:	d1f3      	bne.n	800096c <__eqsf2+0x28>
 8000984:	0028      	movs	r0, r5
 8000986:	1e43      	subs	r3, r0, #1
 8000988:	4198      	sbcs	r0, r3
 800098a:	e7ef      	b.n	800096c <__eqsf2+0x28>
 800098c:	2000      	movs	r0, #0
 800098e:	e7ed      	b.n	800096c <__eqsf2+0x28>

08000990 <__gesf2>:
 8000990:	b570      	push	{r4, r5, r6, lr}
 8000992:	0042      	lsls	r2, r0, #1
 8000994:	0245      	lsls	r5, r0, #9
 8000996:	024e      	lsls	r6, r1, #9
 8000998:	004c      	lsls	r4, r1, #1
 800099a:	0fc3      	lsrs	r3, r0, #31
 800099c:	0a6d      	lsrs	r5, r5, #9
 800099e:	0e12      	lsrs	r2, r2, #24
 80009a0:	0a76      	lsrs	r6, r6, #9
 80009a2:	0e24      	lsrs	r4, r4, #24
 80009a4:	0fc8      	lsrs	r0, r1, #31
 80009a6:	2aff      	cmp	r2, #255	; 0xff
 80009a8:	d01b      	beq.n	80009e2 <__gesf2+0x52>
 80009aa:	2cff      	cmp	r4, #255	; 0xff
 80009ac:	d00e      	beq.n	80009cc <__gesf2+0x3c>
 80009ae:	2a00      	cmp	r2, #0
 80009b0:	d11b      	bne.n	80009ea <__gesf2+0x5a>
 80009b2:	2c00      	cmp	r4, #0
 80009b4:	d101      	bne.n	80009ba <__gesf2+0x2a>
 80009b6:	2e00      	cmp	r6, #0
 80009b8:	d01c      	beq.n	80009f4 <__gesf2+0x64>
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d00c      	beq.n	80009d8 <__gesf2+0x48>
 80009be:	4283      	cmp	r3, r0
 80009c0:	d01c      	beq.n	80009fc <__gesf2+0x6c>
 80009c2:	2102      	movs	r1, #2
 80009c4:	1e58      	subs	r0, r3, #1
 80009c6:	4008      	ands	r0, r1
 80009c8:	3801      	subs	r0, #1
 80009ca:	bd70      	pop	{r4, r5, r6, pc}
 80009cc:	2e00      	cmp	r6, #0
 80009ce:	d122      	bne.n	8000a16 <__gesf2+0x86>
 80009d0:	2a00      	cmp	r2, #0
 80009d2:	d1f4      	bne.n	80009be <__gesf2+0x2e>
 80009d4:	2d00      	cmp	r5, #0
 80009d6:	d1f2      	bne.n	80009be <__gesf2+0x2e>
 80009d8:	2800      	cmp	r0, #0
 80009da:	d1f6      	bne.n	80009ca <__gesf2+0x3a>
 80009dc:	2001      	movs	r0, #1
 80009de:	4240      	negs	r0, r0
 80009e0:	e7f3      	b.n	80009ca <__gesf2+0x3a>
 80009e2:	2d00      	cmp	r5, #0
 80009e4:	d117      	bne.n	8000a16 <__gesf2+0x86>
 80009e6:	2cff      	cmp	r4, #255	; 0xff
 80009e8:	d0f0      	beq.n	80009cc <__gesf2+0x3c>
 80009ea:	2c00      	cmp	r4, #0
 80009ec:	d1e7      	bne.n	80009be <__gesf2+0x2e>
 80009ee:	2e00      	cmp	r6, #0
 80009f0:	d1e5      	bne.n	80009be <__gesf2+0x2e>
 80009f2:	e7e6      	b.n	80009c2 <__gesf2+0x32>
 80009f4:	2000      	movs	r0, #0
 80009f6:	2d00      	cmp	r5, #0
 80009f8:	d0e7      	beq.n	80009ca <__gesf2+0x3a>
 80009fa:	e7e2      	b.n	80009c2 <__gesf2+0x32>
 80009fc:	42a2      	cmp	r2, r4
 80009fe:	dc05      	bgt.n	8000a0c <__gesf2+0x7c>
 8000a00:	dbea      	blt.n	80009d8 <__gesf2+0x48>
 8000a02:	42b5      	cmp	r5, r6
 8000a04:	d802      	bhi.n	8000a0c <__gesf2+0x7c>
 8000a06:	d3e7      	bcc.n	80009d8 <__gesf2+0x48>
 8000a08:	2000      	movs	r0, #0
 8000a0a:	e7de      	b.n	80009ca <__gesf2+0x3a>
 8000a0c:	4243      	negs	r3, r0
 8000a0e:	4158      	adcs	r0, r3
 8000a10:	0040      	lsls	r0, r0, #1
 8000a12:	3801      	subs	r0, #1
 8000a14:	e7d9      	b.n	80009ca <__gesf2+0x3a>
 8000a16:	2002      	movs	r0, #2
 8000a18:	4240      	negs	r0, r0
 8000a1a:	e7d6      	b.n	80009ca <__gesf2+0x3a>

08000a1c <__lesf2>:
 8000a1c:	b570      	push	{r4, r5, r6, lr}
 8000a1e:	0042      	lsls	r2, r0, #1
 8000a20:	0245      	lsls	r5, r0, #9
 8000a22:	024e      	lsls	r6, r1, #9
 8000a24:	004c      	lsls	r4, r1, #1
 8000a26:	0fc3      	lsrs	r3, r0, #31
 8000a28:	0a6d      	lsrs	r5, r5, #9
 8000a2a:	0e12      	lsrs	r2, r2, #24
 8000a2c:	0a76      	lsrs	r6, r6, #9
 8000a2e:	0e24      	lsrs	r4, r4, #24
 8000a30:	0fc8      	lsrs	r0, r1, #31
 8000a32:	2aff      	cmp	r2, #255	; 0xff
 8000a34:	d00b      	beq.n	8000a4e <__lesf2+0x32>
 8000a36:	2cff      	cmp	r4, #255	; 0xff
 8000a38:	d00d      	beq.n	8000a56 <__lesf2+0x3a>
 8000a3a:	2a00      	cmp	r2, #0
 8000a3c:	d11f      	bne.n	8000a7e <__lesf2+0x62>
 8000a3e:	2c00      	cmp	r4, #0
 8000a40:	d116      	bne.n	8000a70 <__lesf2+0x54>
 8000a42:	2e00      	cmp	r6, #0
 8000a44:	d114      	bne.n	8000a70 <__lesf2+0x54>
 8000a46:	2000      	movs	r0, #0
 8000a48:	2d00      	cmp	r5, #0
 8000a4a:	d010      	beq.n	8000a6e <__lesf2+0x52>
 8000a4c:	e009      	b.n	8000a62 <__lesf2+0x46>
 8000a4e:	2d00      	cmp	r5, #0
 8000a50:	d10c      	bne.n	8000a6c <__lesf2+0x50>
 8000a52:	2cff      	cmp	r4, #255	; 0xff
 8000a54:	d113      	bne.n	8000a7e <__lesf2+0x62>
 8000a56:	2e00      	cmp	r6, #0
 8000a58:	d108      	bne.n	8000a6c <__lesf2+0x50>
 8000a5a:	2a00      	cmp	r2, #0
 8000a5c:	d008      	beq.n	8000a70 <__lesf2+0x54>
 8000a5e:	4283      	cmp	r3, r0
 8000a60:	d012      	beq.n	8000a88 <__lesf2+0x6c>
 8000a62:	2102      	movs	r1, #2
 8000a64:	1e58      	subs	r0, r3, #1
 8000a66:	4008      	ands	r0, r1
 8000a68:	3801      	subs	r0, #1
 8000a6a:	e000      	b.n	8000a6e <__lesf2+0x52>
 8000a6c:	2002      	movs	r0, #2
 8000a6e:	bd70      	pop	{r4, r5, r6, pc}
 8000a70:	2d00      	cmp	r5, #0
 8000a72:	d1f4      	bne.n	8000a5e <__lesf2+0x42>
 8000a74:	2800      	cmp	r0, #0
 8000a76:	d1fa      	bne.n	8000a6e <__lesf2+0x52>
 8000a78:	2001      	movs	r0, #1
 8000a7a:	4240      	negs	r0, r0
 8000a7c:	e7f7      	b.n	8000a6e <__lesf2+0x52>
 8000a7e:	2c00      	cmp	r4, #0
 8000a80:	d1ed      	bne.n	8000a5e <__lesf2+0x42>
 8000a82:	2e00      	cmp	r6, #0
 8000a84:	d1eb      	bne.n	8000a5e <__lesf2+0x42>
 8000a86:	e7ec      	b.n	8000a62 <__lesf2+0x46>
 8000a88:	42a2      	cmp	r2, r4
 8000a8a:	dc05      	bgt.n	8000a98 <__lesf2+0x7c>
 8000a8c:	dbf2      	blt.n	8000a74 <__lesf2+0x58>
 8000a8e:	42b5      	cmp	r5, r6
 8000a90:	d802      	bhi.n	8000a98 <__lesf2+0x7c>
 8000a92:	d3ef      	bcc.n	8000a74 <__lesf2+0x58>
 8000a94:	2000      	movs	r0, #0
 8000a96:	e7ea      	b.n	8000a6e <__lesf2+0x52>
 8000a98:	4243      	negs	r3, r0
 8000a9a:	4158      	adcs	r0, r3
 8000a9c:	0040      	lsls	r0, r0, #1
 8000a9e:	3801      	subs	r0, #1
 8000aa0:	e7e5      	b.n	8000a6e <__lesf2+0x52>
 8000aa2:	46c0      	nop			; (mov r8, r8)

08000aa4 <__aeabi_fcmpun>:
 8000aa4:	0243      	lsls	r3, r0, #9
 8000aa6:	024a      	lsls	r2, r1, #9
 8000aa8:	0040      	lsls	r0, r0, #1
 8000aaa:	0049      	lsls	r1, r1, #1
 8000aac:	0a5b      	lsrs	r3, r3, #9
 8000aae:	0a52      	lsrs	r2, r2, #9
 8000ab0:	0e09      	lsrs	r1, r1, #24
 8000ab2:	0e00      	lsrs	r0, r0, #24
 8000ab4:	28ff      	cmp	r0, #255	; 0xff
 8000ab6:	d006      	beq.n	8000ac6 <__aeabi_fcmpun+0x22>
 8000ab8:	2000      	movs	r0, #0
 8000aba:	29ff      	cmp	r1, #255	; 0xff
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_fcmpun+0x20>
 8000abe:	1e53      	subs	r3, r2, #1
 8000ac0:	419a      	sbcs	r2, r3
 8000ac2:	0010      	movs	r0, r2
 8000ac4:	4770      	bx	lr
 8000ac6:	38fe      	subs	r0, #254	; 0xfe
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d1fb      	bne.n	8000ac4 <__aeabi_fcmpun+0x20>
 8000acc:	e7f4      	b.n	8000ab8 <__aeabi_fcmpun+0x14>
 8000ace:	46c0      	nop			; (mov r8, r8)

08000ad0 <__aeabi_f2iz>:
 8000ad0:	0241      	lsls	r1, r0, #9
 8000ad2:	0042      	lsls	r2, r0, #1
 8000ad4:	0fc3      	lsrs	r3, r0, #31
 8000ad6:	0a49      	lsrs	r1, r1, #9
 8000ad8:	2000      	movs	r0, #0
 8000ada:	0e12      	lsrs	r2, r2, #24
 8000adc:	2a7e      	cmp	r2, #126	; 0x7e
 8000ade:	dd03      	ble.n	8000ae8 <__aeabi_f2iz+0x18>
 8000ae0:	2a9d      	cmp	r2, #157	; 0x9d
 8000ae2:	dd02      	ble.n	8000aea <__aeabi_f2iz+0x1a>
 8000ae4:	4a09      	ldr	r2, [pc, #36]	; (8000b0c <__aeabi_f2iz+0x3c>)
 8000ae6:	1898      	adds	r0, r3, r2
 8000ae8:	4770      	bx	lr
 8000aea:	2080      	movs	r0, #128	; 0x80
 8000aec:	0400      	lsls	r0, r0, #16
 8000aee:	4301      	orrs	r1, r0
 8000af0:	2a95      	cmp	r2, #149	; 0x95
 8000af2:	dc07      	bgt.n	8000b04 <__aeabi_f2iz+0x34>
 8000af4:	2096      	movs	r0, #150	; 0x96
 8000af6:	1a82      	subs	r2, r0, r2
 8000af8:	40d1      	lsrs	r1, r2
 8000afa:	4248      	negs	r0, r1
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d1f3      	bne.n	8000ae8 <__aeabi_f2iz+0x18>
 8000b00:	0008      	movs	r0, r1
 8000b02:	e7f1      	b.n	8000ae8 <__aeabi_f2iz+0x18>
 8000b04:	3a96      	subs	r2, #150	; 0x96
 8000b06:	4091      	lsls	r1, r2
 8000b08:	e7f7      	b.n	8000afa <__aeabi_f2iz+0x2a>
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	7fffffff 	.word	0x7fffffff

08000b10 <__aeabi_i2f>:
 8000b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b12:	2800      	cmp	r0, #0
 8000b14:	d013      	beq.n	8000b3e <__aeabi_i2f+0x2e>
 8000b16:	17c3      	asrs	r3, r0, #31
 8000b18:	18c6      	adds	r6, r0, r3
 8000b1a:	405e      	eors	r6, r3
 8000b1c:	0fc4      	lsrs	r4, r0, #31
 8000b1e:	0030      	movs	r0, r6
 8000b20:	f001 fefa 	bl	8002918 <__clzsi2>
 8000b24:	239e      	movs	r3, #158	; 0x9e
 8000b26:	0005      	movs	r5, r0
 8000b28:	1a1b      	subs	r3, r3, r0
 8000b2a:	2b96      	cmp	r3, #150	; 0x96
 8000b2c:	dc0f      	bgt.n	8000b4e <__aeabi_i2f+0x3e>
 8000b2e:	2808      	cmp	r0, #8
 8000b30:	dd01      	ble.n	8000b36 <__aeabi_i2f+0x26>
 8000b32:	3d08      	subs	r5, #8
 8000b34:	40ae      	lsls	r6, r5
 8000b36:	0276      	lsls	r6, r6, #9
 8000b38:	0a76      	lsrs	r6, r6, #9
 8000b3a:	b2d8      	uxtb	r0, r3
 8000b3c:	e002      	b.n	8000b44 <__aeabi_i2f+0x34>
 8000b3e:	2400      	movs	r4, #0
 8000b40:	2000      	movs	r0, #0
 8000b42:	2600      	movs	r6, #0
 8000b44:	05c0      	lsls	r0, r0, #23
 8000b46:	4330      	orrs	r0, r6
 8000b48:	07e4      	lsls	r4, r4, #31
 8000b4a:	4320      	orrs	r0, r4
 8000b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b4e:	2b99      	cmp	r3, #153	; 0x99
 8000b50:	dd0c      	ble.n	8000b6c <__aeabi_i2f+0x5c>
 8000b52:	2205      	movs	r2, #5
 8000b54:	0031      	movs	r1, r6
 8000b56:	1a12      	subs	r2, r2, r0
 8000b58:	40d1      	lsrs	r1, r2
 8000b5a:	000a      	movs	r2, r1
 8000b5c:	0001      	movs	r1, r0
 8000b5e:	0030      	movs	r0, r6
 8000b60:	311b      	adds	r1, #27
 8000b62:	4088      	lsls	r0, r1
 8000b64:	1e41      	subs	r1, r0, #1
 8000b66:	4188      	sbcs	r0, r1
 8000b68:	4302      	orrs	r2, r0
 8000b6a:	0016      	movs	r6, r2
 8000b6c:	2d05      	cmp	r5, #5
 8000b6e:	dc12      	bgt.n	8000b96 <__aeabi_i2f+0x86>
 8000b70:	0031      	movs	r1, r6
 8000b72:	4f0d      	ldr	r7, [pc, #52]	; (8000ba8 <__aeabi_i2f+0x98>)
 8000b74:	4039      	ands	r1, r7
 8000b76:	0772      	lsls	r2, r6, #29
 8000b78:	d009      	beq.n	8000b8e <__aeabi_i2f+0x7e>
 8000b7a:	200f      	movs	r0, #15
 8000b7c:	4030      	ands	r0, r6
 8000b7e:	2804      	cmp	r0, #4
 8000b80:	d005      	beq.n	8000b8e <__aeabi_i2f+0x7e>
 8000b82:	3104      	adds	r1, #4
 8000b84:	014a      	lsls	r2, r1, #5
 8000b86:	d502      	bpl.n	8000b8e <__aeabi_i2f+0x7e>
 8000b88:	239f      	movs	r3, #159	; 0x9f
 8000b8a:	4039      	ands	r1, r7
 8000b8c:	1b5b      	subs	r3, r3, r5
 8000b8e:	0189      	lsls	r1, r1, #6
 8000b90:	0a4e      	lsrs	r6, r1, #9
 8000b92:	b2d8      	uxtb	r0, r3
 8000b94:	e7d6      	b.n	8000b44 <__aeabi_i2f+0x34>
 8000b96:	1f6a      	subs	r2, r5, #5
 8000b98:	4096      	lsls	r6, r2
 8000b9a:	0031      	movs	r1, r6
 8000b9c:	4f02      	ldr	r7, [pc, #8]	; (8000ba8 <__aeabi_i2f+0x98>)
 8000b9e:	4039      	ands	r1, r7
 8000ba0:	0772      	lsls	r2, r6, #29
 8000ba2:	d0f4      	beq.n	8000b8e <__aeabi_i2f+0x7e>
 8000ba4:	e7e9      	b.n	8000b7a <__aeabi_i2f+0x6a>
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	fbffffff 	.word	0xfbffffff

08000bac <__aeabi_dadd>:
 8000bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bae:	464f      	mov	r7, r9
 8000bb0:	4646      	mov	r6, r8
 8000bb2:	46d6      	mov	lr, sl
 8000bb4:	000d      	movs	r5, r1
 8000bb6:	0004      	movs	r4, r0
 8000bb8:	b5c0      	push	{r6, r7, lr}
 8000bba:	001f      	movs	r7, r3
 8000bbc:	0011      	movs	r1, r2
 8000bbe:	0328      	lsls	r0, r5, #12
 8000bc0:	0f62      	lsrs	r2, r4, #29
 8000bc2:	0a40      	lsrs	r0, r0, #9
 8000bc4:	4310      	orrs	r0, r2
 8000bc6:	007a      	lsls	r2, r7, #1
 8000bc8:	0d52      	lsrs	r2, r2, #21
 8000bca:	00e3      	lsls	r3, r4, #3
 8000bcc:	033c      	lsls	r4, r7, #12
 8000bce:	4691      	mov	r9, r2
 8000bd0:	0a64      	lsrs	r4, r4, #9
 8000bd2:	0ffa      	lsrs	r2, r7, #31
 8000bd4:	0f4f      	lsrs	r7, r1, #29
 8000bd6:	006e      	lsls	r6, r5, #1
 8000bd8:	4327      	orrs	r7, r4
 8000bda:	4692      	mov	sl, r2
 8000bdc:	46b8      	mov	r8, r7
 8000bde:	0d76      	lsrs	r6, r6, #21
 8000be0:	0fed      	lsrs	r5, r5, #31
 8000be2:	00c9      	lsls	r1, r1, #3
 8000be4:	4295      	cmp	r5, r2
 8000be6:	d100      	bne.n	8000bea <__aeabi_dadd+0x3e>
 8000be8:	e099      	b.n	8000d1e <__aeabi_dadd+0x172>
 8000bea:	464c      	mov	r4, r9
 8000bec:	1b34      	subs	r4, r6, r4
 8000bee:	46a4      	mov	ip, r4
 8000bf0:	2c00      	cmp	r4, #0
 8000bf2:	dc00      	bgt.n	8000bf6 <__aeabi_dadd+0x4a>
 8000bf4:	e07c      	b.n	8000cf0 <__aeabi_dadd+0x144>
 8000bf6:	464a      	mov	r2, r9
 8000bf8:	2a00      	cmp	r2, #0
 8000bfa:	d100      	bne.n	8000bfe <__aeabi_dadd+0x52>
 8000bfc:	e0b8      	b.n	8000d70 <__aeabi_dadd+0x1c4>
 8000bfe:	4ac5      	ldr	r2, [pc, #788]	; (8000f14 <__aeabi_dadd+0x368>)
 8000c00:	4296      	cmp	r6, r2
 8000c02:	d100      	bne.n	8000c06 <__aeabi_dadd+0x5a>
 8000c04:	e11c      	b.n	8000e40 <__aeabi_dadd+0x294>
 8000c06:	2280      	movs	r2, #128	; 0x80
 8000c08:	003c      	movs	r4, r7
 8000c0a:	0412      	lsls	r2, r2, #16
 8000c0c:	4314      	orrs	r4, r2
 8000c0e:	46a0      	mov	r8, r4
 8000c10:	4662      	mov	r2, ip
 8000c12:	2a38      	cmp	r2, #56	; 0x38
 8000c14:	dd00      	ble.n	8000c18 <__aeabi_dadd+0x6c>
 8000c16:	e161      	b.n	8000edc <__aeabi_dadd+0x330>
 8000c18:	2a1f      	cmp	r2, #31
 8000c1a:	dd00      	ble.n	8000c1e <__aeabi_dadd+0x72>
 8000c1c:	e1cc      	b.n	8000fb8 <__aeabi_dadd+0x40c>
 8000c1e:	4664      	mov	r4, ip
 8000c20:	2220      	movs	r2, #32
 8000c22:	1b12      	subs	r2, r2, r4
 8000c24:	4644      	mov	r4, r8
 8000c26:	4094      	lsls	r4, r2
 8000c28:	000f      	movs	r7, r1
 8000c2a:	46a1      	mov	r9, r4
 8000c2c:	4664      	mov	r4, ip
 8000c2e:	4091      	lsls	r1, r2
 8000c30:	40e7      	lsrs	r7, r4
 8000c32:	464c      	mov	r4, r9
 8000c34:	1e4a      	subs	r2, r1, #1
 8000c36:	4191      	sbcs	r1, r2
 8000c38:	433c      	orrs	r4, r7
 8000c3a:	4642      	mov	r2, r8
 8000c3c:	4321      	orrs	r1, r4
 8000c3e:	4664      	mov	r4, ip
 8000c40:	40e2      	lsrs	r2, r4
 8000c42:	1a80      	subs	r0, r0, r2
 8000c44:	1a5c      	subs	r4, r3, r1
 8000c46:	42a3      	cmp	r3, r4
 8000c48:	419b      	sbcs	r3, r3
 8000c4a:	425f      	negs	r7, r3
 8000c4c:	1bc7      	subs	r7, r0, r7
 8000c4e:	023b      	lsls	r3, r7, #8
 8000c50:	d400      	bmi.n	8000c54 <__aeabi_dadd+0xa8>
 8000c52:	e0d0      	b.n	8000df6 <__aeabi_dadd+0x24a>
 8000c54:	027f      	lsls	r7, r7, #9
 8000c56:	0a7f      	lsrs	r7, r7, #9
 8000c58:	2f00      	cmp	r7, #0
 8000c5a:	d100      	bne.n	8000c5e <__aeabi_dadd+0xb2>
 8000c5c:	e0ff      	b.n	8000e5e <__aeabi_dadd+0x2b2>
 8000c5e:	0038      	movs	r0, r7
 8000c60:	f001 fe5a 	bl	8002918 <__clzsi2>
 8000c64:	0001      	movs	r1, r0
 8000c66:	3908      	subs	r1, #8
 8000c68:	2320      	movs	r3, #32
 8000c6a:	0022      	movs	r2, r4
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	408f      	lsls	r7, r1
 8000c70:	40da      	lsrs	r2, r3
 8000c72:	408c      	lsls	r4, r1
 8000c74:	4317      	orrs	r7, r2
 8000c76:	42b1      	cmp	r1, r6
 8000c78:	da00      	bge.n	8000c7c <__aeabi_dadd+0xd0>
 8000c7a:	e0ff      	b.n	8000e7c <__aeabi_dadd+0x2d0>
 8000c7c:	1b89      	subs	r1, r1, r6
 8000c7e:	1c4b      	adds	r3, r1, #1
 8000c80:	2b1f      	cmp	r3, #31
 8000c82:	dd00      	ble.n	8000c86 <__aeabi_dadd+0xda>
 8000c84:	e0a8      	b.n	8000dd8 <__aeabi_dadd+0x22c>
 8000c86:	2220      	movs	r2, #32
 8000c88:	0039      	movs	r1, r7
 8000c8a:	1ad2      	subs	r2, r2, r3
 8000c8c:	0020      	movs	r0, r4
 8000c8e:	4094      	lsls	r4, r2
 8000c90:	4091      	lsls	r1, r2
 8000c92:	40d8      	lsrs	r0, r3
 8000c94:	1e62      	subs	r2, r4, #1
 8000c96:	4194      	sbcs	r4, r2
 8000c98:	40df      	lsrs	r7, r3
 8000c9a:	2600      	movs	r6, #0
 8000c9c:	4301      	orrs	r1, r0
 8000c9e:	430c      	orrs	r4, r1
 8000ca0:	0763      	lsls	r3, r4, #29
 8000ca2:	d009      	beq.n	8000cb8 <__aeabi_dadd+0x10c>
 8000ca4:	230f      	movs	r3, #15
 8000ca6:	4023      	ands	r3, r4
 8000ca8:	2b04      	cmp	r3, #4
 8000caa:	d005      	beq.n	8000cb8 <__aeabi_dadd+0x10c>
 8000cac:	1d23      	adds	r3, r4, #4
 8000cae:	42a3      	cmp	r3, r4
 8000cb0:	41a4      	sbcs	r4, r4
 8000cb2:	4264      	negs	r4, r4
 8000cb4:	193f      	adds	r7, r7, r4
 8000cb6:	001c      	movs	r4, r3
 8000cb8:	023b      	lsls	r3, r7, #8
 8000cba:	d400      	bmi.n	8000cbe <__aeabi_dadd+0x112>
 8000cbc:	e09e      	b.n	8000dfc <__aeabi_dadd+0x250>
 8000cbe:	4b95      	ldr	r3, [pc, #596]	; (8000f14 <__aeabi_dadd+0x368>)
 8000cc0:	3601      	adds	r6, #1
 8000cc2:	429e      	cmp	r6, r3
 8000cc4:	d100      	bne.n	8000cc8 <__aeabi_dadd+0x11c>
 8000cc6:	e0b7      	b.n	8000e38 <__aeabi_dadd+0x28c>
 8000cc8:	4a93      	ldr	r2, [pc, #588]	; (8000f18 <__aeabi_dadd+0x36c>)
 8000cca:	08e4      	lsrs	r4, r4, #3
 8000ccc:	4017      	ands	r7, r2
 8000cce:	077b      	lsls	r3, r7, #29
 8000cd0:	0571      	lsls	r1, r6, #21
 8000cd2:	027f      	lsls	r7, r7, #9
 8000cd4:	4323      	orrs	r3, r4
 8000cd6:	0b3f      	lsrs	r7, r7, #12
 8000cd8:	0d4a      	lsrs	r2, r1, #21
 8000cda:	0512      	lsls	r2, r2, #20
 8000cdc:	433a      	orrs	r2, r7
 8000cde:	07ed      	lsls	r5, r5, #31
 8000ce0:	432a      	orrs	r2, r5
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	0011      	movs	r1, r2
 8000ce6:	bce0      	pop	{r5, r6, r7}
 8000ce8:	46ba      	mov	sl, r7
 8000cea:	46b1      	mov	r9, r6
 8000cec:	46a8      	mov	r8, r5
 8000cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cf0:	2c00      	cmp	r4, #0
 8000cf2:	d04b      	beq.n	8000d8c <__aeabi_dadd+0x1e0>
 8000cf4:	464c      	mov	r4, r9
 8000cf6:	1ba4      	subs	r4, r4, r6
 8000cf8:	46a4      	mov	ip, r4
 8000cfa:	2e00      	cmp	r6, #0
 8000cfc:	d000      	beq.n	8000d00 <__aeabi_dadd+0x154>
 8000cfe:	e123      	b.n	8000f48 <__aeabi_dadd+0x39c>
 8000d00:	0004      	movs	r4, r0
 8000d02:	431c      	orrs	r4, r3
 8000d04:	d100      	bne.n	8000d08 <__aeabi_dadd+0x15c>
 8000d06:	e1af      	b.n	8001068 <__aeabi_dadd+0x4bc>
 8000d08:	4662      	mov	r2, ip
 8000d0a:	1e54      	subs	r4, r2, #1
 8000d0c:	2a01      	cmp	r2, #1
 8000d0e:	d100      	bne.n	8000d12 <__aeabi_dadd+0x166>
 8000d10:	e215      	b.n	800113e <__aeabi_dadd+0x592>
 8000d12:	4d80      	ldr	r5, [pc, #512]	; (8000f14 <__aeabi_dadd+0x368>)
 8000d14:	45ac      	cmp	ip, r5
 8000d16:	d100      	bne.n	8000d1a <__aeabi_dadd+0x16e>
 8000d18:	e1c8      	b.n	80010ac <__aeabi_dadd+0x500>
 8000d1a:	46a4      	mov	ip, r4
 8000d1c:	e11b      	b.n	8000f56 <__aeabi_dadd+0x3aa>
 8000d1e:	464a      	mov	r2, r9
 8000d20:	1ab2      	subs	r2, r6, r2
 8000d22:	4694      	mov	ip, r2
 8000d24:	2a00      	cmp	r2, #0
 8000d26:	dc00      	bgt.n	8000d2a <__aeabi_dadd+0x17e>
 8000d28:	e0ac      	b.n	8000e84 <__aeabi_dadd+0x2d8>
 8000d2a:	464a      	mov	r2, r9
 8000d2c:	2a00      	cmp	r2, #0
 8000d2e:	d043      	beq.n	8000db8 <__aeabi_dadd+0x20c>
 8000d30:	4a78      	ldr	r2, [pc, #480]	; (8000f14 <__aeabi_dadd+0x368>)
 8000d32:	4296      	cmp	r6, r2
 8000d34:	d100      	bne.n	8000d38 <__aeabi_dadd+0x18c>
 8000d36:	e1af      	b.n	8001098 <__aeabi_dadd+0x4ec>
 8000d38:	2280      	movs	r2, #128	; 0x80
 8000d3a:	003c      	movs	r4, r7
 8000d3c:	0412      	lsls	r2, r2, #16
 8000d3e:	4314      	orrs	r4, r2
 8000d40:	46a0      	mov	r8, r4
 8000d42:	4662      	mov	r2, ip
 8000d44:	2a38      	cmp	r2, #56	; 0x38
 8000d46:	dc67      	bgt.n	8000e18 <__aeabi_dadd+0x26c>
 8000d48:	2a1f      	cmp	r2, #31
 8000d4a:	dc00      	bgt.n	8000d4e <__aeabi_dadd+0x1a2>
 8000d4c:	e15f      	b.n	800100e <__aeabi_dadd+0x462>
 8000d4e:	4647      	mov	r7, r8
 8000d50:	3a20      	subs	r2, #32
 8000d52:	40d7      	lsrs	r7, r2
 8000d54:	4662      	mov	r2, ip
 8000d56:	2a20      	cmp	r2, #32
 8000d58:	d005      	beq.n	8000d66 <__aeabi_dadd+0x1ba>
 8000d5a:	4664      	mov	r4, ip
 8000d5c:	2240      	movs	r2, #64	; 0x40
 8000d5e:	1b12      	subs	r2, r2, r4
 8000d60:	4644      	mov	r4, r8
 8000d62:	4094      	lsls	r4, r2
 8000d64:	4321      	orrs	r1, r4
 8000d66:	1e4a      	subs	r2, r1, #1
 8000d68:	4191      	sbcs	r1, r2
 8000d6a:	000c      	movs	r4, r1
 8000d6c:	433c      	orrs	r4, r7
 8000d6e:	e057      	b.n	8000e20 <__aeabi_dadd+0x274>
 8000d70:	003a      	movs	r2, r7
 8000d72:	430a      	orrs	r2, r1
 8000d74:	d100      	bne.n	8000d78 <__aeabi_dadd+0x1cc>
 8000d76:	e105      	b.n	8000f84 <__aeabi_dadd+0x3d8>
 8000d78:	0022      	movs	r2, r4
 8000d7a:	3a01      	subs	r2, #1
 8000d7c:	2c01      	cmp	r4, #1
 8000d7e:	d100      	bne.n	8000d82 <__aeabi_dadd+0x1d6>
 8000d80:	e182      	b.n	8001088 <__aeabi_dadd+0x4dc>
 8000d82:	4c64      	ldr	r4, [pc, #400]	; (8000f14 <__aeabi_dadd+0x368>)
 8000d84:	45a4      	cmp	ip, r4
 8000d86:	d05b      	beq.n	8000e40 <__aeabi_dadd+0x294>
 8000d88:	4694      	mov	ip, r2
 8000d8a:	e741      	b.n	8000c10 <__aeabi_dadd+0x64>
 8000d8c:	4c63      	ldr	r4, [pc, #396]	; (8000f1c <__aeabi_dadd+0x370>)
 8000d8e:	1c77      	adds	r7, r6, #1
 8000d90:	4227      	tst	r7, r4
 8000d92:	d000      	beq.n	8000d96 <__aeabi_dadd+0x1ea>
 8000d94:	e0c4      	b.n	8000f20 <__aeabi_dadd+0x374>
 8000d96:	0004      	movs	r4, r0
 8000d98:	431c      	orrs	r4, r3
 8000d9a:	2e00      	cmp	r6, #0
 8000d9c:	d000      	beq.n	8000da0 <__aeabi_dadd+0x1f4>
 8000d9e:	e169      	b.n	8001074 <__aeabi_dadd+0x4c8>
 8000da0:	2c00      	cmp	r4, #0
 8000da2:	d100      	bne.n	8000da6 <__aeabi_dadd+0x1fa>
 8000da4:	e1bf      	b.n	8001126 <__aeabi_dadd+0x57a>
 8000da6:	4644      	mov	r4, r8
 8000da8:	430c      	orrs	r4, r1
 8000daa:	d000      	beq.n	8000dae <__aeabi_dadd+0x202>
 8000dac:	e1d0      	b.n	8001150 <__aeabi_dadd+0x5a4>
 8000dae:	0742      	lsls	r2, r0, #29
 8000db0:	08db      	lsrs	r3, r3, #3
 8000db2:	4313      	orrs	r3, r2
 8000db4:	08c0      	lsrs	r0, r0, #3
 8000db6:	e029      	b.n	8000e0c <__aeabi_dadd+0x260>
 8000db8:	003a      	movs	r2, r7
 8000dba:	430a      	orrs	r2, r1
 8000dbc:	d100      	bne.n	8000dc0 <__aeabi_dadd+0x214>
 8000dbe:	e170      	b.n	80010a2 <__aeabi_dadd+0x4f6>
 8000dc0:	4662      	mov	r2, ip
 8000dc2:	4664      	mov	r4, ip
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	2c01      	cmp	r4, #1
 8000dc8:	d100      	bne.n	8000dcc <__aeabi_dadd+0x220>
 8000dca:	e0e0      	b.n	8000f8e <__aeabi_dadd+0x3e2>
 8000dcc:	4c51      	ldr	r4, [pc, #324]	; (8000f14 <__aeabi_dadd+0x368>)
 8000dce:	45a4      	cmp	ip, r4
 8000dd0:	d100      	bne.n	8000dd4 <__aeabi_dadd+0x228>
 8000dd2:	e161      	b.n	8001098 <__aeabi_dadd+0x4ec>
 8000dd4:	4694      	mov	ip, r2
 8000dd6:	e7b4      	b.n	8000d42 <__aeabi_dadd+0x196>
 8000dd8:	003a      	movs	r2, r7
 8000dda:	391f      	subs	r1, #31
 8000ddc:	40ca      	lsrs	r2, r1
 8000dde:	0011      	movs	r1, r2
 8000de0:	2b20      	cmp	r3, #32
 8000de2:	d003      	beq.n	8000dec <__aeabi_dadd+0x240>
 8000de4:	2240      	movs	r2, #64	; 0x40
 8000de6:	1ad3      	subs	r3, r2, r3
 8000de8:	409f      	lsls	r7, r3
 8000dea:	433c      	orrs	r4, r7
 8000dec:	1e63      	subs	r3, r4, #1
 8000dee:	419c      	sbcs	r4, r3
 8000df0:	2700      	movs	r7, #0
 8000df2:	2600      	movs	r6, #0
 8000df4:	430c      	orrs	r4, r1
 8000df6:	0763      	lsls	r3, r4, #29
 8000df8:	d000      	beq.n	8000dfc <__aeabi_dadd+0x250>
 8000dfa:	e753      	b.n	8000ca4 <__aeabi_dadd+0xf8>
 8000dfc:	46b4      	mov	ip, r6
 8000dfe:	08e4      	lsrs	r4, r4, #3
 8000e00:	077b      	lsls	r3, r7, #29
 8000e02:	4323      	orrs	r3, r4
 8000e04:	08f8      	lsrs	r0, r7, #3
 8000e06:	4a43      	ldr	r2, [pc, #268]	; (8000f14 <__aeabi_dadd+0x368>)
 8000e08:	4594      	cmp	ip, r2
 8000e0a:	d01d      	beq.n	8000e48 <__aeabi_dadd+0x29c>
 8000e0c:	4662      	mov	r2, ip
 8000e0e:	0307      	lsls	r7, r0, #12
 8000e10:	0552      	lsls	r2, r2, #21
 8000e12:	0b3f      	lsrs	r7, r7, #12
 8000e14:	0d52      	lsrs	r2, r2, #21
 8000e16:	e760      	b.n	8000cda <__aeabi_dadd+0x12e>
 8000e18:	4644      	mov	r4, r8
 8000e1a:	430c      	orrs	r4, r1
 8000e1c:	1e62      	subs	r2, r4, #1
 8000e1e:	4194      	sbcs	r4, r2
 8000e20:	18e4      	adds	r4, r4, r3
 8000e22:	429c      	cmp	r4, r3
 8000e24:	419b      	sbcs	r3, r3
 8000e26:	425f      	negs	r7, r3
 8000e28:	183f      	adds	r7, r7, r0
 8000e2a:	023b      	lsls	r3, r7, #8
 8000e2c:	d5e3      	bpl.n	8000df6 <__aeabi_dadd+0x24a>
 8000e2e:	4b39      	ldr	r3, [pc, #228]	; (8000f14 <__aeabi_dadd+0x368>)
 8000e30:	3601      	adds	r6, #1
 8000e32:	429e      	cmp	r6, r3
 8000e34:	d000      	beq.n	8000e38 <__aeabi_dadd+0x28c>
 8000e36:	e0b5      	b.n	8000fa4 <__aeabi_dadd+0x3f8>
 8000e38:	0032      	movs	r2, r6
 8000e3a:	2700      	movs	r7, #0
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	e74c      	b.n	8000cda <__aeabi_dadd+0x12e>
 8000e40:	0742      	lsls	r2, r0, #29
 8000e42:	08db      	lsrs	r3, r3, #3
 8000e44:	4313      	orrs	r3, r2
 8000e46:	08c0      	lsrs	r0, r0, #3
 8000e48:	001a      	movs	r2, r3
 8000e4a:	4302      	orrs	r2, r0
 8000e4c:	d100      	bne.n	8000e50 <__aeabi_dadd+0x2a4>
 8000e4e:	e1e1      	b.n	8001214 <__aeabi_dadd+0x668>
 8000e50:	2780      	movs	r7, #128	; 0x80
 8000e52:	033f      	lsls	r7, r7, #12
 8000e54:	4307      	orrs	r7, r0
 8000e56:	033f      	lsls	r7, r7, #12
 8000e58:	4a2e      	ldr	r2, [pc, #184]	; (8000f14 <__aeabi_dadd+0x368>)
 8000e5a:	0b3f      	lsrs	r7, r7, #12
 8000e5c:	e73d      	b.n	8000cda <__aeabi_dadd+0x12e>
 8000e5e:	0020      	movs	r0, r4
 8000e60:	f001 fd5a 	bl	8002918 <__clzsi2>
 8000e64:	0001      	movs	r1, r0
 8000e66:	3118      	adds	r1, #24
 8000e68:	291f      	cmp	r1, #31
 8000e6a:	dc00      	bgt.n	8000e6e <__aeabi_dadd+0x2c2>
 8000e6c:	e6fc      	b.n	8000c68 <__aeabi_dadd+0xbc>
 8000e6e:	3808      	subs	r0, #8
 8000e70:	4084      	lsls	r4, r0
 8000e72:	0027      	movs	r7, r4
 8000e74:	2400      	movs	r4, #0
 8000e76:	42b1      	cmp	r1, r6
 8000e78:	db00      	blt.n	8000e7c <__aeabi_dadd+0x2d0>
 8000e7a:	e6ff      	b.n	8000c7c <__aeabi_dadd+0xd0>
 8000e7c:	4a26      	ldr	r2, [pc, #152]	; (8000f18 <__aeabi_dadd+0x36c>)
 8000e7e:	1a76      	subs	r6, r6, r1
 8000e80:	4017      	ands	r7, r2
 8000e82:	e70d      	b.n	8000ca0 <__aeabi_dadd+0xf4>
 8000e84:	2a00      	cmp	r2, #0
 8000e86:	d02f      	beq.n	8000ee8 <__aeabi_dadd+0x33c>
 8000e88:	464a      	mov	r2, r9
 8000e8a:	1b92      	subs	r2, r2, r6
 8000e8c:	4694      	mov	ip, r2
 8000e8e:	2e00      	cmp	r6, #0
 8000e90:	d100      	bne.n	8000e94 <__aeabi_dadd+0x2e8>
 8000e92:	e0ad      	b.n	8000ff0 <__aeabi_dadd+0x444>
 8000e94:	4a1f      	ldr	r2, [pc, #124]	; (8000f14 <__aeabi_dadd+0x368>)
 8000e96:	4591      	cmp	r9, r2
 8000e98:	d100      	bne.n	8000e9c <__aeabi_dadd+0x2f0>
 8000e9a:	e10f      	b.n	80010bc <__aeabi_dadd+0x510>
 8000e9c:	2280      	movs	r2, #128	; 0x80
 8000e9e:	0412      	lsls	r2, r2, #16
 8000ea0:	4310      	orrs	r0, r2
 8000ea2:	4662      	mov	r2, ip
 8000ea4:	2a38      	cmp	r2, #56	; 0x38
 8000ea6:	dd00      	ble.n	8000eaa <__aeabi_dadd+0x2fe>
 8000ea8:	e10f      	b.n	80010ca <__aeabi_dadd+0x51e>
 8000eaa:	2a1f      	cmp	r2, #31
 8000eac:	dd00      	ble.n	8000eb0 <__aeabi_dadd+0x304>
 8000eae:	e180      	b.n	80011b2 <__aeabi_dadd+0x606>
 8000eb0:	4664      	mov	r4, ip
 8000eb2:	2220      	movs	r2, #32
 8000eb4:	001e      	movs	r6, r3
 8000eb6:	1b12      	subs	r2, r2, r4
 8000eb8:	4667      	mov	r7, ip
 8000eba:	0004      	movs	r4, r0
 8000ebc:	4093      	lsls	r3, r2
 8000ebe:	4094      	lsls	r4, r2
 8000ec0:	40fe      	lsrs	r6, r7
 8000ec2:	1e5a      	subs	r2, r3, #1
 8000ec4:	4193      	sbcs	r3, r2
 8000ec6:	40f8      	lsrs	r0, r7
 8000ec8:	4334      	orrs	r4, r6
 8000eca:	431c      	orrs	r4, r3
 8000ecc:	4480      	add	r8, r0
 8000ece:	1864      	adds	r4, r4, r1
 8000ed0:	428c      	cmp	r4, r1
 8000ed2:	41bf      	sbcs	r7, r7
 8000ed4:	427f      	negs	r7, r7
 8000ed6:	464e      	mov	r6, r9
 8000ed8:	4447      	add	r7, r8
 8000eda:	e7a6      	b.n	8000e2a <__aeabi_dadd+0x27e>
 8000edc:	4642      	mov	r2, r8
 8000ede:	430a      	orrs	r2, r1
 8000ee0:	0011      	movs	r1, r2
 8000ee2:	1e4a      	subs	r2, r1, #1
 8000ee4:	4191      	sbcs	r1, r2
 8000ee6:	e6ad      	b.n	8000c44 <__aeabi_dadd+0x98>
 8000ee8:	4c0c      	ldr	r4, [pc, #48]	; (8000f1c <__aeabi_dadd+0x370>)
 8000eea:	1c72      	adds	r2, r6, #1
 8000eec:	4222      	tst	r2, r4
 8000eee:	d000      	beq.n	8000ef2 <__aeabi_dadd+0x346>
 8000ef0:	e0a1      	b.n	8001036 <__aeabi_dadd+0x48a>
 8000ef2:	0002      	movs	r2, r0
 8000ef4:	431a      	orrs	r2, r3
 8000ef6:	2e00      	cmp	r6, #0
 8000ef8:	d000      	beq.n	8000efc <__aeabi_dadd+0x350>
 8000efa:	e0fa      	b.n	80010f2 <__aeabi_dadd+0x546>
 8000efc:	2a00      	cmp	r2, #0
 8000efe:	d100      	bne.n	8000f02 <__aeabi_dadd+0x356>
 8000f00:	e145      	b.n	800118e <__aeabi_dadd+0x5e2>
 8000f02:	003a      	movs	r2, r7
 8000f04:	430a      	orrs	r2, r1
 8000f06:	d000      	beq.n	8000f0a <__aeabi_dadd+0x35e>
 8000f08:	e146      	b.n	8001198 <__aeabi_dadd+0x5ec>
 8000f0a:	0742      	lsls	r2, r0, #29
 8000f0c:	08db      	lsrs	r3, r3, #3
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	08c0      	lsrs	r0, r0, #3
 8000f12:	e77b      	b.n	8000e0c <__aeabi_dadd+0x260>
 8000f14:	000007ff 	.word	0x000007ff
 8000f18:	ff7fffff 	.word	0xff7fffff
 8000f1c:	000007fe 	.word	0x000007fe
 8000f20:	4647      	mov	r7, r8
 8000f22:	1a5c      	subs	r4, r3, r1
 8000f24:	1bc2      	subs	r2, r0, r7
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	41bf      	sbcs	r7, r7
 8000f2a:	427f      	negs	r7, r7
 8000f2c:	46b9      	mov	r9, r7
 8000f2e:	0017      	movs	r7, r2
 8000f30:	464a      	mov	r2, r9
 8000f32:	1abf      	subs	r7, r7, r2
 8000f34:	023a      	lsls	r2, r7, #8
 8000f36:	d500      	bpl.n	8000f3a <__aeabi_dadd+0x38e>
 8000f38:	e08d      	b.n	8001056 <__aeabi_dadd+0x4aa>
 8000f3a:	0023      	movs	r3, r4
 8000f3c:	433b      	orrs	r3, r7
 8000f3e:	d000      	beq.n	8000f42 <__aeabi_dadd+0x396>
 8000f40:	e68a      	b.n	8000c58 <__aeabi_dadd+0xac>
 8000f42:	2000      	movs	r0, #0
 8000f44:	2500      	movs	r5, #0
 8000f46:	e761      	b.n	8000e0c <__aeabi_dadd+0x260>
 8000f48:	4cb4      	ldr	r4, [pc, #720]	; (800121c <__aeabi_dadd+0x670>)
 8000f4a:	45a1      	cmp	r9, r4
 8000f4c:	d100      	bne.n	8000f50 <__aeabi_dadd+0x3a4>
 8000f4e:	e0ad      	b.n	80010ac <__aeabi_dadd+0x500>
 8000f50:	2480      	movs	r4, #128	; 0x80
 8000f52:	0424      	lsls	r4, r4, #16
 8000f54:	4320      	orrs	r0, r4
 8000f56:	4664      	mov	r4, ip
 8000f58:	2c38      	cmp	r4, #56	; 0x38
 8000f5a:	dc3d      	bgt.n	8000fd8 <__aeabi_dadd+0x42c>
 8000f5c:	4662      	mov	r2, ip
 8000f5e:	2c1f      	cmp	r4, #31
 8000f60:	dd00      	ble.n	8000f64 <__aeabi_dadd+0x3b8>
 8000f62:	e0b7      	b.n	80010d4 <__aeabi_dadd+0x528>
 8000f64:	2520      	movs	r5, #32
 8000f66:	001e      	movs	r6, r3
 8000f68:	1b2d      	subs	r5, r5, r4
 8000f6a:	0004      	movs	r4, r0
 8000f6c:	40ab      	lsls	r3, r5
 8000f6e:	40ac      	lsls	r4, r5
 8000f70:	40d6      	lsrs	r6, r2
 8000f72:	40d0      	lsrs	r0, r2
 8000f74:	4642      	mov	r2, r8
 8000f76:	1e5d      	subs	r5, r3, #1
 8000f78:	41ab      	sbcs	r3, r5
 8000f7a:	4334      	orrs	r4, r6
 8000f7c:	1a12      	subs	r2, r2, r0
 8000f7e:	4690      	mov	r8, r2
 8000f80:	4323      	orrs	r3, r4
 8000f82:	e02c      	b.n	8000fde <__aeabi_dadd+0x432>
 8000f84:	0742      	lsls	r2, r0, #29
 8000f86:	08db      	lsrs	r3, r3, #3
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	08c0      	lsrs	r0, r0, #3
 8000f8c:	e73b      	b.n	8000e06 <__aeabi_dadd+0x25a>
 8000f8e:	185c      	adds	r4, r3, r1
 8000f90:	429c      	cmp	r4, r3
 8000f92:	419b      	sbcs	r3, r3
 8000f94:	4440      	add	r0, r8
 8000f96:	425b      	negs	r3, r3
 8000f98:	18c7      	adds	r7, r0, r3
 8000f9a:	2601      	movs	r6, #1
 8000f9c:	023b      	lsls	r3, r7, #8
 8000f9e:	d400      	bmi.n	8000fa2 <__aeabi_dadd+0x3f6>
 8000fa0:	e729      	b.n	8000df6 <__aeabi_dadd+0x24a>
 8000fa2:	2602      	movs	r6, #2
 8000fa4:	4a9e      	ldr	r2, [pc, #632]	; (8001220 <__aeabi_dadd+0x674>)
 8000fa6:	0863      	lsrs	r3, r4, #1
 8000fa8:	4017      	ands	r7, r2
 8000faa:	2201      	movs	r2, #1
 8000fac:	4014      	ands	r4, r2
 8000fae:	431c      	orrs	r4, r3
 8000fb0:	07fb      	lsls	r3, r7, #31
 8000fb2:	431c      	orrs	r4, r3
 8000fb4:	087f      	lsrs	r7, r7, #1
 8000fb6:	e673      	b.n	8000ca0 <__aeabi_dadd+0xf4>
 8000fb8:	4644      	mov	r4, r8
 8000fba:	3a20      	subs	r2, #32
 8000fbc:	40d4      	lsrs	r4, r2
 8000fbe:	4662      	mov	r2, ip
 8000fc0:	2a20      	cmp	r2, #32
 8000fc2:	d005      	beq.n	8000fd0 <__aeabi_dadd+0x424>
 8000fc4:	4667      	mov	r7, ip
 8000fc6:	2240      	movs	r2, #64	; 0x40
 8000fc8:	1bd2      	subs	r2, r2, r7
 8000fca:	4647      	mov	r7, r8
 8000fcc:	4097      	lsls	r7, r2
 8000fce:	4339      	orrs	r1, r7
 8000fd0:	1e4a      	subs	r2, r1, #1
 8000fd2:	4191      	sbcs	r1, r2
 8000fd4:	4321      	orrs	r1, r4
 8000fd6:	e635      	b.n	8000c44 <__aeabi_dadd+0x98>
 8000fd8:	4303      	orrs	r3, r0
 8000fda:	1e58      	subs	r0, r3, #1
 8000fdc:	4183      	sbcs	r3, r0
 8000fde:	1acc      	subs	r4, r1, r3
 8000fe0:	42a1      	cmp	r1, r4
 8000fe2:	41bf      	sbcs	r7, r7
 8000fe4:	4643      	mov	r3, r8
 8000fe6:	427f      	negs	r7, r7
 8000fe8:	4655      	mov	r5, sl
 8000fea:	464e      	mov	r6, r9
 8000fec:	1bdf      	subs	r7, r3, r7
 8000fee:	e62e      	b.n	8000c4e <__aeabi_dadd+0xa2>
 8000ff0:	0002      	movs	r2, r0
 8000ff2:	431a      	orrs	r2, r3
 8000ff4:	d100      	bne.n	8000ff8 <__aeabi_dadd+0x44c>
 8000ff6:	e0bd      	b.n	8001174 <__aeabi_dadd+0x5c8>
 8000ff8:	4662      	mov	r2, ip
 8000ffa:	4664      	mov	r4, ip
 8000ffc:	3a01      	subs	r2, #1
 8000ffe:	2c01      	cmp	r4, #1
 8001000:	d100      	bne.n	8001004 <__aeabi_dadd+0x458>
 8001002:	e0e5      	b.n	80011d0 <__aeabi_dadd+0x624>
 8001004:	4c85      	ldr	r4, [pc, #532]	; (800121c <__aeabi_dadd+0x670>)
 8001006:	45a4      	cmp	ip, r4
 8001008:	d058      	beq.n	80010bc <__aeabi_dadd+0x510>
 800100a:	4694      	mov	ip, r2
 800100c:	e749      	b.n	8000ea2 <__aeabi_dadd+0x2f6>
 800100e:	4664      	mov	r4, ip
 8001010:	2220      	movs	r2, #32
 8001012:	1b12      	subs	r2, r2, r4
 8001014:	4644      	mov	r4, r8
 8001016:	4094      	lsls	r4, r2
 8001018:	000f      	movs	r7, r1
 800101a:	46a1      	mov	r9, r4
 800101c:	4664      	mov	r4, ip
 800101e:	4091      	lsls	r1, r2
 8001020:	40e7      	lsrs	r7, r4
 8001022:	464c      	mov	r4, r9
 8001024:	1e4a      	subs	r2, r1, #1
 8001026:	4191      	sbcs	r1, r2
 8001028:	433c      	orrs	r4, r7
 800102a:	4642      	mov	r2, r8
 800102c:	430c      	orrs	r4, r1
 800102e:	4661      	mov	r1, ip
 8001030:	40ca      	lsrs	r2, r1
 8001032:	1880      	adds	r0, r0, r2
 8001034:	e6f4      	b.n	8000e20 <__aeabi_dadd+0x274>
 8001036:	4c79      	ldr	r4, [pc, #484]	; (800121c <__aeabi_dadd+0x670>)
 8001038:	42a2      	cmp	r2, r4
 800103a:	d100      	bne.n	800103e <__aeabi_dadd+0x492>
 800103c:	e6fd      	b.n	8000e3a <__aeabi_dadd+0x28e>
 800103e:	1859      	adds	r1, r3, r1
 8001040:	4299      	cmp	r1, r3
 8001042:	419b      	sbcs	r3, r3
 8001044:	4440      	add	r0, r8
 8001046:	425f      	negs	r7, r3
 8001048:	19c7      	adds	r7, r0, r7
 800104a:	07fc      	lsls	r4, r7, #31
 800104c:	0849      	lsrs	r1, r1, #1
 800104e:	0016      	movs	r6, r2
 8001050:	430c      	orrs	r4, r1
 8001052:	087f      	lsrs	r7, r7, #1
 8001054:	e6cf      	b.n	8000df6 <__aeabi_dadd+0x24a>
 8001056:	1acc      	subs	r4, r1, r3
 8001058:	42a1      	cmp	r1, r4
 800105a:	41bf      	sbcs	r7, r7
 800105c:	4643      	mov	r3, r8
 800105e:	427f      	negs	r7, r7
 8001060:	1a18      	subs	r0, r3, r0
 8001062:	4655      	mov	r5, sl
 8001064:	1bc7      	subs	r7, r0, r7
 8001066:	e5f7      	b.n	8000c58 <__aeabi_dadd+0xac>
 8001068:	08c9      	lsrs	r1, r1, #3
 800106a:	077b      	lsls	r3, r7, #29
 800106c:	4655      	mov	r5, sl
 800106e:	430b      	orrs	r3, r1
 8001070:	08f8      	lsrs	r0, r7, #3
 8001072:	e6c8      	b.n	8000e06 <__aeabi_dadd+0x25a>
 8001074:	2c00      	cmp	r4, #0
 8001076:	d000      	beq.n	800107a <__aeabi_dadd+0x4ce>
 8001078:	e081      	b.n	800117e <__aeabi_dadd+0x5d2>
 800107a:	4643      	mov	r3, r8
 800107c:	430b      	orrs	r3, r1
 800107e:	d115      	bne.n	80010ac <__aeabi_dadd+0x500>
 8001080:	2080      	movs	r0, #128	; 0x80
 8001082:	2500      	movs	r5, #0
 8001084:	0300      	lsls	r0, r0, #12
 8001086:	e6e3      	b.n	8000e50 <__aeabi_dadd+0x2a4>
 8001088:	1a5c      	subs	r4, r3, r1
 800108a:	42a3      	cmp	r3, r4
 800108c:	419b      	sbcs	r3, r3
 800108e:	1bc7      	subs	r7, r0, r7
 8001090:	425b      	negs	r3, r3
 8001092:	2601      	movs	r6, #1
 8001094:	1aff      	subs	r7, r7, r3
 8001096:	e5da      	b.n	8000c4e <__aeabi_dadd+0xa2>
 8001098:	0742      	lsls	r2, r0, #29
 800109a:	08db      	lsrs	r3, r3, #3
 800109c:	4313      	orrs	r3, r2
 800109e:	08c0      	lsrs	r0, r0, #3
 80010a0:	e6d2      	b.n	8000e48 <__aeabi_dadd+0x29c>
 80010a2:	0742      	lsls	r2, r0, #29
 80010a4:	08db      	lsrs	r3, r3, #3
 80010a6:	4313      	orrs	r3, r2
 80010a8:	08c0      	lsrs	r0, r0, #3
 80010aa:	e6ac      	b.n	8000e06 <__aeabi_dadd+0x25a>
 80010ac:	4643      	mov	r3, r8
 80010ae:	4642      	mov	r2, r8
 80010b0:	08c9      	lsrs	r1, r1, #3
 80010b2:	075b      	lsls	r3, r3, #29
 80010b4:	4655      	mov	r5, sl
 80010b6:	430b      	orrs	r3, r1
 80010b8:	08d0      	lsrs	r0, r2, #3
 80010ba:	e6c5      	b.n	8000e48 <__aeabi_dadd+0x29c>
 80010bc:	4643      	mov	r3, r8
 80010be:	4642      	mov	r2, r8
 80010c0:	075b      	lsls	r3, r3, #29
 80010c2:	08c9      	lsrs	r1, r1, #3
 80010c4:	430b      	orrs	r3, r1
 80010c6:	08d0      	lsrs	r0, r2, #3
 80010c8:	e6be      	b.n	8000e48 <__aeabi_dadd+0x29c>
 80010ca:	4303      	orrs	r3, r0
 80010cc:	001c      	movs	r4, r3
 80010ce:	1e63      	subs	r3, r4, #1
 80010d0:	419c      	sbcs	r4, r3
 80010d2:	e6fc      	b.n	8000ece <__aeabi_dadd+0x322>
 80010d4:	0002      	movs	r2, r0
 80010d6:	3c20      	subs	r4, #32
 80010d8:	40e2      	lsrs	r2, r4
 80010da:	0014      	movs	r4, r2
 80010dc:	4662      	mov	r2, ip
 80010de:	2a20      	cmp	r2, #32
 80010e0:	d003      	beq.n	80010ea <__aeabi_dadd+0x53e>
 80010e2:	2540      	movs	r5, #64	; 0x40
 80010e4:	1aad      	subs	r5, r5, r2
 80010e6:	40a8      	lsls	r0, r5
 80010e8:	4303      	orrs	r3, r0
 80010ea:	1e58      	subs	r0, r3, #1
 80010ec:	4183      	sbcs	r3, r0
 80010ee:	4323      	orrs	r3, r4
 80010f0:	e775      	b.n	8000fde <__aeabi_dadd+0x432>
 80010f2:	2a00      	cmp	r2, #0
 80010f4:	d0e2      	beq.n	80010bc <__aeabi_dadd+0x510>
 80010f6:	003a      	movs	r2, r7
 80010f8:	430a      	orrs	r2, r1
 80010fa:	d0cd      	beq.n	8001098 <__aeabi_dadd+0x4ec>
 80010fc:	0742      	lsls	r2, r0, #29
 80010fe:	08db      	lsrs	r3, r3, #3
 8001100:	4313      	orrs	r3, r2
 8001102:	2280      	movs	r2, #128	; 0x80
 8001104:	08c0      	lsrs	r0, r0, #3
 8001106:	0312      	lsls	r2, r2, #12
 8001108:	4210      	tst	r0, r2
 800110a:	d006      	beq.n	800111a <__aeabi_dadd+0x56e>
 800110c:	08fc      	lsrs	r4, r7, #3
 800110e:	4214      	tst	r4, r2
 8001110:	d103      	bne.n	800111a <__aeabi_dadd+0x56e>
 8001112:	0020      	movs	r0, r4
 8001114:	08cb      	lsrs	r3, r1, #3
 8001116:	077a      	lsls	r2, r7, #29
 8001118:	4313      	orrs	r3, r2
 800111a:	0f5a      	lsrs	r2, r3, #29
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	0752      	lsls	r2, r2, #29
 8001120:	08db      	lsrs	r3, r3, #3
 8001122:	4313      	orrs	r3, r2
 8001124:	e690      	b.n	8000e48 <__aeabi_dadd+0x29c>
 8001126:	4643      	mov	r3, r8
 8001128:	430b      	orrs	r3, r1
 800112a:	d100      	bne.n	800112e <__aeabi_dadd+0x582>
 800112c:	e709      	b.n	8000f42 <__aeabi_dadd+0x396>
 800112e:	4643      	mov	r3, r8
 8001130:	4642      	mov	r2, r8
 8001132:	08c9      	lsrs	r1, r1, #3
 8001134:	075b      	lsls	r3, r3, #29
 8001136:	4655      	mov	r5, sl
 8001138:	430b      	orrs	r3, r1
 800113a:	08d0      	lsrs	r0, r2, #3
 800113c:	e666      	b.n	8000e0c <__aeabi_dadd+0x260>
 800113e:	1acc      	subs	r4, r1, r3
 8001140:	42a1      	cmp	r1, r4
 8001142:	4189      	sbcs	r1, r1
 8001144:	1a3f      	subs	r7, r7, r0
 8001146:	4249      	negs	r1, r1
 8001148:	4655      	mov	r5, sl
 800114a:	2601      	movs	r6, #1
 800114c:	1a7f      	subs	r7, r7, r1
 800114e:	e57e      	b.n	8000c4e <__aeabi_dadd+0xa2>
 8001150:	4642      	mov	r2, r8
 8001152:	1a5c      	subs	r4, r3, r1
 8001154:	1a87      	subs	r7, r0, r2
 8001156:	42a3      	cmp	r3, r4
 8001158:	4192      	sbcs	r2, r2
 800115a:	4252      	negs	r2, r2
 800115c:	1abf      	subs	r7, r7, r2
 800115e:	023a      	lsls	r2, r7, #8
 8001160:	d53d      	bpl.n	80011de <__aeabi_dadd+0x632>
 8001162:	1acc      	subs	r4, r1, r3
 8001164:	42a1      	cmp	r1, r4
 8001166:	4189      	sbcs	r1, r1
 8001168:	4643      	mov	r3, r8
 800116a:	4249      	negs	r1, r1
 800116c:	1a1f      	subs	r7, r3, r0
 800116e:	4655      	mov	r5, sl
 8001170:	1a7f      	subs	r7, r7, r1
 8001172:	e595      	b.n	8000ca0 <__aeabi_dadd+0xf4>
 8001174:	077b      	lsls	r3, r7, #29
 8001176:	08c9      	lsrs	r1, r1, #3
 8001178:	430b      	orrs	r3, r1
 800117a:	08f8      	lsrs	r0, r7, #3
 800117c:	e643      	b.n	8000e06 <__aeabi_dadd+0x25a>
 800117e:	4644      	mov	r4, r8
 8001180:	08db      	lsrs	r3, r3, #3
 8001182:	430c      	orrs	r4, r1
 8001184:	d130      	bne.n	80011e8 <__aeabi_dadd+0x63c>
 8001186:	0742      	lsls	r2, r0, #29
 8001188:	4313      	orrs	r3, r2
 800118a:	08c0      	lsrs	r0, r0, #3
 800118c:	e65c      	b.n	8000e48 <__aeabi_dadd+0x29c>
 800118e:	077b      	lsls	r3, r7, #29
 8001190:	08c9      	lsrs	r1, r1, #3
 8001192:	430b      	orrs	r3, r1
 8001194:	08f8      	lsrs	r0, r7, #3
 8001196:	e639      	b.n	8000e0c <__aeabi_dadd+0x260>
 8001198:	185c      	adds	r4, r3, r1
 800119a:	429c      	cmp	r4, r3
 800119c:	419b      	sbcs	r3, r3
 800119e:	4440      	add	r0, r8
 80011a0:	425b      	negs	r3, r3
 80011a2:	18c7      	adds	r7, r0, r3
 80011a4:	023b      	lsls	r3, r7, #8
 80011a6:	d400      	bmi.n	80011aa <__aeabi_dadd+0x5fe>
 80011a8:	e625      	b.n	8000df6 <__aeabi_dadd+0x24a>
 80011aa:	4b1d      	ldr	r3, [pc, #116]	; (8001220 <__aeabi_dadd+0x674>)
 80011ac:	2601      	movs	r6, #1
 80011ae:	401f      	ands	r7, r3
 80011b0:	e621      	b.n	8000df6 <__aeabi_dadd+0x24a>
 80011b2:	0004      	movs	r4, r0
 80011b4:	3a20      	subs	r2, #32
 80011b6:	40d4      	lsrs	r4, r2
 80011b8:	4662      	mov	r2, ip
 80011ba:	2a20      	cmp	r2, #32
 80011bc:	d004      	beq.n	80011c8 <__aeabi_dadd+0x61c>
 80011be:	2240      	movs	r2, #64	; 0x40
 80011c0:	4666      	mov	r6, ip
 80011c2:	1b92      	subs	r2, r2, r6
 80011c4:	4090      	lsls	r0, r2
 80011c6:	4303      	orrs	r3, r0
 80011c8:	1e5a      	subs	r2, r3, #1
 80011ca:	4193      	sbcs	r3, r2
 80011cc:	431c      	orrs	r4, r3
 80011ce:	e67e      	b.n	8000ece <__aeabi_dadd+0x322>
 80011d0:	185c      	adds	r4, r3, r1
 80011d2:	428c      	cmp	r4, r1
 80011d4:	4189      	sbcs	r1, r1
 80011d6:	4440      	add	r0, r8
 80011d8:	4249      	negs	r1, r1
 80011da:	1847      	adds	r7, r0, r1
 80011dc:	e6dd      	b.n	8000f9a <__aeabi_dadd+0x3ee>
 80011de:	0023      	movs	r3, r4
 80011e0:	433b      	orrs	r3, r7
 80011e2:	d100      	bne.n	80011e6 <__aeabi_dadd+0x63a>
 80011e4:	e6ad      	b.n	8000f42 <__aeabi_dadd+0x396>
 80011e6:	e606      	b.n	8000df6 <__aeabi_dadd+0x24a>
 80011e8:	0744      	lsls	r4, r0, #29
 80011ea:	4323      	orrs	r3, r4
 80011ec:	2480      	movs	r4, #128	; 0x80
 80011ee:	08c0      	lsrs	r0, r0, #3
 80011f0:	0324      	lsls	r4, r4, #12
 80011f2:	4220      	tst	r0, r4
 80011f4:	d008      	beq.n	8001208 <__aeabi_dadd+0x65c>
 80011f6:	4642      	mov	r2, r8
 80011f8:	08d6      	lsrs	r6, r2, #3
 80011fa:	4226      	tst	r6, r4
 80011fc:	d104      	bne.n	8001208 <__aeabi_dadd+0x65c>
 80011fe:	4655      	mov	r5, sl
 8001200:	0030      	movs	r0, r6
 8001202:	08cb      	lsrs	r3, r1, #3
 8001204:	0751      	lsls	r1, r2, #29
 8001206:	430b      	orrs	r3, r1
 8001208:	0f5a      	lsrs	r2, r3, #29
 800120a:	00db      	lsls	r3, r3, #3
 800120c:	08db      	lsrs	r3, r3, #3
 800120e:	0752      	lsls	r2, r2, #29
 8001210:	4313      	orrs	r3, r2
 8001212:	e619      	b.n	8000e48 <__aeabi_dadd+0x29c>
 8001214:	2300      	movs	r3, #0
 8001216:	4a01      	ldr	r2, [pc, #4]	; (800121c <__aeabi_dadd+0x670>)
 8001218:	001f      	movs	r7, r3
 800121a:	e55e      	b.n	8000cda <__aeabi_dadd+0x12e>
 800121c:	000007ff 	.word	0x000007ff
 8001220:	ff7fffff 	.word	0xff7fffff

08001224 <__aeabi_ddiv>:
 8001224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001226:	4657      	mov	r7, sl
 8001228:	464e      	mov	r6, r9
 800122a:	4645      	mov	r5, r8
 800122c:	46de      	mov	lr, fp
 800122e:	b5e0      	push	{r5, r6, r7, lr}
 8001230:	4681      	mov	r9, r0
 8001232:	0005      	movs	r5, r0
 8001234:	030c      	lsls	r4, r1, #12
 8001236:	0048      	lsls	r0, r1, #1
 8001238:	4692      	mov	sl, r2
 800123a:	001f      	movs	r7, r3
 800123c:	b085      	sub	sp, #20
 800123e:	0b24      	lsrs	r4, r4, #12
 8001240:	0d40      	lsrs	r0, r0, #21
 8001242:	0fce      	lsrs	r6, r1, #31
 8001244:	2800      	cmp	r0, #0
 8001246:	d100      	bne.n	800124a <__aeabi_ddiv+0x26>
 8001248:	e156      	b.n	80014f8 <__aeabi_ddiv+0x2d4>
 800124a:	4bd4      	ldr	r3, [pc, #848]	; (800159c <__aeabi_ddiv+0x378>)
 800124c:	4298      	cmp	r0, r3
 800124e:	d100      	bne.n	8001252 <__aeabi_ddiv+0x2e>
 8001250:	e172      	b.n	8001538 <__aeabi_ddiv+0x314>
 8001252:	0f6b      	lsrs	r3, r5, #29
 8001254:	00e4      	lsls	r4, r4, #3
 8001256:	431c      	orrs	r4, r3
 8001258:	2380      	movs	r3, #128	; 0x80
 800125a:	041b      	lsls	r3, r3, #16
 800125c:	4323      	orrs	r3, r4
 800125e:	4698      	mov	r8, r3
 8001260:	4bcf      	ldr	r3, [pc, #828]	; (80015a0 <__aeabi_ddiv+0x37c>)
 8001262:	00ed      	lsls	r5, r5, #3
 8001264:	469b      	mov	fp, r3
 8001266:	2300      	movs	r3, #0
 8001268:	4699      	mov	r9, r3
 800126a:	4483      	add	fp, r0
 800126c:	9300      	str	r3, [sp, #0]
 800126e:	033c      	lsls	r4, r7, #12
 8001270:	007b      	lsls	r3, r7, #1
 8001272:	4650      	mov	r0, sl
 8001274:	0b24      	lsrs	r4, r4, #12
 8001276:	0d5b      	lsrs	r3, r3, #21
 8001278:	0fff      	lsrs	r7, r7, #31
 800127a:	2b00      	cmp	r3, #0
 800127c:	d100      	bne.n	8001280 <__aeabi_ddiv+0x5c>
 800127e:	e11f      	b.n	80014c0 <__aeabi_ddiv+0x29c>
 8001280:	4ac6      	ldr	r2, [pc, #792]	; (800159c <__aeabi_ddiv+0x378>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d100      	bne.n	8001288 <__aeabi_ddiv+0x64>
 8001286:	e162      	b.n	800154e <__aeabi_ddiv+0x32a>
 8001288:	49c5      	ldr	r1, [pc, #788]	; (80015a0 <__aeabi_ddiv+0x37c>)
 800128a:	0f42      	lsrs	r2, r0, #29
 800128c:	468c      	mov	ip, r1
 800128e:	00e4      	lsls	r4, r4, #3
 8001290:	4659      	mov	r1, fp
 8001292:	4314      	orrs	r4, r2
 8001294:	2280      	movs	r2, #128	; 0x80
 8001296:	4463      	add	r3, ip
 8001298:	0412      	lsls	r2, r2, #16
 800129a:	1acb      	subs	r3, r1, r3
 800129c:	4314      	orrs	r4, r2
 800129e:	469b      	mov	fp, r3
 80012a0:	00c2      	lsls	r2, r0, #3
 80012a2:	2000      	movs	r0, #0
 80012a4:	0033      	movs	r3, r6
 80012a6:	407b      	eors	r3, r7
 80012a8:	469a      	mov	sl, r3
 80012aa:	464b      	mov	r3, r9
 80012ac:	2b0f      	cmp	r3, #15
 80012ae:	d827      	bhi.n	8001300 <__aeabi_ddiv+0xdc>
 80012b0:	49bc      	ldr	r1, [pc, #752]	; (80015a4 <__aeabi_ddiv+0x380>)
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	58cb      	ldr	r3, [r1, r3]
 80012b6:	469f      	mov	pc, r3
 80012b8:	46b2      	mov	sl, r6
 80012ba:	9b00      	ldr	r3, [sp, #0]
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d016      	beq.n	80012ee <__aeabi_ddiv+0xca>
 80012c0:	2b03      	cmp	r3, #3
 80012c2:	d100      	bne.n	80012c6 <__aeabi_ddiv+0xa2>
 80012c4:	e28e      	b.n	80017e4 <__aeabi_ddiv+0x5c0>
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d000      	beq.n	80012cc <__aeabi_ddiv+0xa8>
 80012ca:	e0d9      	b.n	8001480 <__aeabi_ddiv+0x25c>
 80012cc:	2300      	movs	r3, #0
 80012ce:	2400      	movs	r4, #0
 80012d0:	2500      	movs	r5, #0
 80012d2:	4652      	mov	r2, sl
 80012d4:	051b      	lsls	r3, r3, #20
 80012d6:	4323      	orrs	r3, r4
 80012d8:	07d2      	lsls	r2, r2, #31
 80012da:	4313      	orrs	r3, r2
 80012dc:	0028      	movs	r0, r5
 80012de:	0019      	movs	r1, r3
 80012e0:	b005      	add	sp, #20
 80012e2:	bcf0      	pop	{r4, r5, r6, r7}
 80012e4:	46bb      	mov	fp, r7
 80012e6:	46b2      	mov	sl, r6
 80012e8:	46a9      	mov	r9, r5
 80012ea:	46a0      	mov	r8, r4
 80012ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012ee:	2400      	movs	r4, #0
 80012f0:	2500      	movs	r5, #0
 80012f2:	4baa      	ldr	r3, [pc, #680]	; (800159c <__aeabi_ddiv+0x378>)
 80012f4:	e7ed      	b.n	80012d2 <__aeabi_ddiv+0xae>
 80012f6:	46ba      	mov	sl, r7
 80012f8:	46a0      	mov	r8, r4
 80012fa:	0015      	movs	r5, r2
 80012fc:	9000      	str	r0, [sp, #0]
 80012fe:	e7dc      	b.n	80012ba <__aeabi_ddiv+0x96>
 8001300:	4544      	cmp	r4, r8
 8001302:	d200      	bcs.n	8001306 <__aeabi_ddiv+0xe2>
 8001304:	e1c7      	b.n	8001696 <__aeabi_ddiv+0x472>
 8001306:	d100      	bne.n	800130a <__aeabi_ddiv+0xe6>
 8001308:	e1c2      	b.n	8001690 <__aeabi_ddiv+0x46c>
 800130a:	2301      	movs	r3, #1
 800130c:	425b      	negs	r3, r3
 800130e:	469c      	mov	ip, r3
 8001310:	002e      	movs	r6, r5
 8001312:	4640      	mov	r0, r8
 8001314:	2500      	movs	r5, #0
 8001316:	44e3      	add	fp, ip
 8001318:	0223      	lsls	r3, r4, #8
 800131a:	0e14      	lsrs	r4, r2, #24
 800131c:	431c      	orrs	r4, r3
 800131e:	0c1b      	lsrs	r3, r3, #16
 8001320:	4699      	mov	r9, r3
 8001322:	0423      	lsls	r3, r4, #16
 8001324:	0c1f      	lsrs	r7, r3, #16
 8001326:	0212      	lsls	r2, r2, #8
 8001328:	4649      	mov	r1, r9
 800132a:	9200      	str	r2, [sp, #0]
 800132c:	9701      	str	r7, [sp, #4]
 800132e:	f7fe ff93 	bl	8000258 <__aeabi_uidivmod>
 8001332:	0002      	movs	r2, r0
 8001334:	437a      	muls	r2, r7
 8001336:	040b      	lsls	r3, r1, #16
 8001338:	0c31      	lsrs	r1, r6, #16
 800133a:	4680      	mov	r8, r0
 800133c:	4319      	orrs	r1, r3
 800133e:	428a      	cmp	r2, r1
 8001340:	d907      	bls.n	8001352 <__aeabi_ddiv+0x12e>
 8001342:	2301      	movs	r3, #1
 8001344:	425b      	negs	r3, r3
 8001346:	469c      	mov	ip, r3
 8001348:	1909      	adds	r1, r1, r4
 800134a:	44e0      	add	r8, ip
 800134c:	428c      	cmp	r4, r1
 800134e:	d800      	bhi.n	8001352 <__aeabi_ddiv+0x12e>
 8001350:	e207      	b.n	8001762 <__aeabi_ddiv+0x53e>
 8001352:	1a88      	subs	r0, r1, r2
 8001354:	4649      	mov	r1, r9
 8001356:	f7fe ff7f 	bl	8000258 <__aeabi_uidivmod>
 800135a:	0409      	lsls	r1, r1, #16
 800135c:	468c      	mov	ip, r1
 800135e:	0431      	lsls	r1, r6, #16
 8001360:	4666      	mov	r6, ip
 8001362:	9a01      	ldr	r2, [sp, #4]
 8001364:	0c09      	lsrs	r1, r1, #16
 8001366:	4342      	muls	r2, r0
 8001368:	0003      	movs	r3, r0
 800136a:	4331      	orrs	r1, r6
 800136c:	428a      	cmp	r2, r1
 800136e:	d904      	bls.n	800137a <__aeabi_ddiv+0x156>
 8001370:	1909      	adds	r1, r1, r4
 8001372:	3b01      	subs	r3, #1
 8001374:	428c      	cmp	r4, r1
 8001376:	d800      	bhi.n	800137a <__aeabi_ddiv+0x156>
 8001378:	e1ed      	b.n	8001756 <__aeabi_ddiv+0x532>
 800137a:	1a88      	subs	r0, r1, r2
 800137c:	4642      	mov	r2, r8
 800137e:	0412      	lsls	r2, r2, #16
 8001380:	431a      	orrs	r2, r3
 8001382:	4690      	mov	r8, r2
 8001384:	4641      	mov	r1, r8
 8001386:	9b00      	ldr	r3, [sp, #0]
 8001388:	040e      	lsls	r6, r1, #16
 800138a:	0c1b      	lsrs	r3, r3, #16
 800138c:	001f      	movs	r7, r3
 800138e:	9302      	str	r3, [sp, #8]
 8001390:	9b00      	ldr	r3, [sp, #0]
 8001392:	0c36      	lsrs	r6, r6, #16
 8001394:	041b      	lsls	r3, r3, #16
 8001396:	0c19      	lsrs	r1, r3, #16
 8001398:	000b      	movs	r3, r1
 800139a:	4373      	muls	r3, r6
 800139c:	0c12      	lsrs	r2, r2, #16
 800139e:	437e      	muls	r6, r7
 80013a0:	9103      	str	r1, [sp, #12]
 80013a2:	4351      	muls	r1, r2
 80013a4:	437a      	muls	r2, r7
 80013a6:	0c1f      	lsrs	r7, r3, #16
 80013a8:	46bc      	mov	ip, r7
 80013aa:	1876      	adds	r6, r6, r1
 80013ac:	4466      	add	r6, ip
 80013ae:	42b1      	cmp	r1, r6
 80013b0:	d903      	bls.n	80013ba <__aeabi_ddiv+0x196>
 80013b2:	2180      	movs	r1, #128	; 0x80
 80013b4:	0249      	lsls	r1, r1, #9
 80013b6:	468c      	mov	ip, r1
 80013b8:	4462      	add	r2, ip
 80013ba:	0c31      	lsrs	r1, r6, #16
 80013bc:	188a      	adds	r2, r1, r2
 80013be:	0431      	lsls	r1, r6, #16
 80013c0:	041e      	lsls	r6, r3, #16
 80013c2:	0c36      	lsrs	r6, r6, #16
 80013c4:	198e      	adds	r6, r1, r6
 80013c6:	4290      	cmp	r0, r2
 80013c8:	d302      	bcc.n	80013d0 <__aeabi_ddiv+0x1ac>
 80013ca:	d112      	bne.n	80013f2 <__aeabi_ddiv+0x1ce>
 80013cc:	42b5      	cmp	r5, r6
 80013ce:	d210      	bcs.n	80013f2 <__aeabi_ddiv+0x1ce>
 80013d0:	4643      	mov	r3, r8
 80013d2:	1e59      	subs	r1, r3, #1
 80013d4:	9b00      	ldr	r3, [sp, #0]
 80013d6:	469c      	mov	ip, r3
 80013d8:	4465      	add	r5, ip
 80013da:	001f      	movs	r7, r3
 80013dc:	429d      	cmp	r5, r3
 80013de:	419b      	sbcs	r3, r3
 80013e0:	425b      	negs	r3, r3
 80013e2:	191b      	adds	r3, r3, r4
 80013e4:	18c0      	adds	r0, r0, r3
 80013e6:	4284      	cmp	r4, r0
 80013e8:	d200      	bcs.n	80013ec <__aeabi_ddiv+0x1c8>
 80013ea:	e1a0      	b.n	800172e <__aeabi_ddiv+0x50a>
 80013ec:	d100      	bne.n	80013f0 <__aeabi_ddiv+0x1cc>
 80013ee:	e19b      	b.n	8001728 <__aeabi_ddiv+0x504>
 80013f0:	4688      	mov	r8, r1
 80013f2:	1bae      	subs	r6, r5, r6
 80013f4:	42b5      	cmp	r5, r6
 80013f6:	41ad      	sbcs	r5, r5
 80013f8:	1a80      	subs	r0, r0, r2
 80013fa:	426d      	negs	r5, r5
 80013fc:	1b40      	subs	r0, r0, r5
 80013fe:	4284      	cmp	r4, r0
 8001400:	d100      	bne.n	8001404 <__aeabi_ddiv+0x1e0>
 8001402:	e1d5      	b.n	80017b0 <__aeabi_ddiv+0x58c>
 8001404:	4649      	mov	r1, r9
 8001406:	f7fe ff27 	bl	8000258 <__aeabi_uidivmod>
 800140a:	9a01      	ldr	r2, [sp, #4]
 800140c:	040b      	lsls	r3, r1, #16
 800140e:	4342      	muls	r2, r0
 8001410:	0c31      	lsrs	r1, r6, #16
 8001412:	0005      	movs	r5, r0
 8001414:	4319      	orrs	r1, r3
 8001416:	428a      	cmp	r2, r1
 8001418:	d900      	bls.n	800141c <__aeabi_ddiv+0x1f8>
 800141a:	e16c      	b.n	80016f6 <__aeabi_ddiv+0x4d2>
 800141c:	1a88      	subs	r0, r1, r2
 800141e:	4649      	mov	r1, r9
 8001420:	f7fe ff1a 	bl	8000258 <__aeabi_uidivmod>
 8001424:	9a01      	ldr	r2, [sp, #4]
 8001426:	0436      	lsls	r6, r6, #16
 8001428:	4342      	muls	r2, r0
 800142a:	0409      	lsls	r1, r1, #16
 800142c:	0c36      	lsrs	r6, r6, #16
 800142e:	0003      	movs	r3, r0
 8001430:	430e      	orrs	r6, r1
 8001432:	42b2      	cmp	r2, r6
 8001434:	d900      	bls.n	8001438 <__aeabi_ddiv+0x214>
 8001436:	e153      	b.n	80016e0 <__aeabi_ddiv+0x4bc>
 8001438:	9803      	ldr	r0, [sp, #12]
 800143a:	1ab6      	subs	r6, r6, r2
 800143c:	0002      	movs	r2, r0
 800143e:	042d      	lsls	r5, r5, #16
 8001440:	431d      	orrs	r5, r3
 8001442:	9f02      	ldr	r7, [sp, #8]
 8001444:	042b      	lsls	r3, r5, #16
 8001446:	0c1b      	lsrs	r3, r3, #16
 8001448:	435a      	muls	r2, r3
 800144a:	437b      	muls	r3, r7
 800144c:	469c      	mov	ip, r3
 800144e:	0c29      	lsrs	r1, r5, #16
 8001450:	4348      	muls	r0, r1
 8001452:	0c13      	lsrs	r3, r2, #16
 8001454:	4484      	add	ip, r0
 8001456:	4463      	add	r3, ip
 8001458:	4379      	muls	r1, r7
 800145a:	4298      	cmp	r0, r3
 800145c:	d903      	bls.n	8001466 <__aeabi_ddiv+0x242>
 800145e:	2080      	movs	r0, #128	; 0x80
 8001460:	0240      	lsls	r0, r0, #9
 8001462:	4684      	mov	ip, r0
 8001464:	4461      	add	r1, ip
 8001466:	0c18      	lsrs	r0, r3, #16
 8001468:	0412      	lsls	r2, r2, #16
 800146a:	041b      	lsls	r3, r3, #16
 800146c:	0c12      	lsrs	r2, r2, #16
 800146e:	1841      	adds	r1, r0, r1
 8001470:	189b      	adds	r3, r3, r2
 8001472:	428e      	cmp	r6, r1
 8001474:	d200      	bcs.n	8001478 <__aeabi_ddiv+0x254>
 8001476:	e0ff      	b.n	8001678 <__aeabi_ddiv+0x454>
 8001478:	d100      	bne.n	800147c <__aeabi_ddiv+0x258>
 800147a:	e0fa      	b.n	8001672 <__aeabi_ddiv+0x44e>
 800147c:	2301      	movs	r3, #1
 800147e:	431d      	orrs	r5, r3
 8001480:	4a49      	ldr	r2, [pc, #292]	; (80015a8 <__aeabi_ddiv+0x384>)
 8001482:	445a      	add	r2, fp
 8001484:	2a00      	cmp	r2, #0
 8001486:	dc00      	bgt.n	800148a <__aeabi_ddiv+0x266>
 8001488:	e0aa      	b.n	80015e0 <__aeabi_ddiv+0x3bc>
 800148a:	076b      	lsls	r3, r5, #29
 800148c:	d000      	beq.n	8001490 <__aeabi_ddiv+0x26c>
 800148e:	e13d      	b.n	800170c <__aeabi_ddiv+0x4e8>
 8001490:	08ed      	lsrs	r5, r5, #3
 8001492:	4643      	mov	r3, r8
 8001494:	01db      	lsls	r3, r3, #7
 8001496:	d506      	bpl.n	80014a6 <__aeabi_ddiv+0x282>
 8001498:	4642      	mov	r2, r8
 800149a:	4b44      	ldr	r3, [pc, #272]	; (80015ac <__aeabi_ddiv+0x388>)
 800149c:	401a      	ands	r2, r3
 800149e:	4690      	mov	r8, r2
 80014a0:	2280      	movs	r2, #128	; 0x80
 80014a2:	00d2      	lsls	r2, r2, #3
 80014a4:	445a      	add	r2, fp
 80014a6:	4b42      	ldr	r3, [pc, #264]	; (80015b0 <__aeabi_ddiv+0x38c>)
 80014a8:	429a      	cmp	r2, r3
 80014aa:	dd00      	ble.n	80014ae <__aeabi_ddiv+0x28a>
 80014ac:	e71f      	b.n	80012ee <__aeabi_ddiv+0xca>
 80014ae:	4643      	mov	r3, r8
 80014b0:	075b      	lsls	r3, r3, #29
 80014b2:	431d      	orrs	r5, r3
 80014b4:	4643      	mov	r3, r8
 80014b6:	0552      	lsls	r2, r2, #21
 80014b8:	025c      	lsls	r4, r3, #9
 80014ba:	0b24      	lsrs	r4, r4, #12
 80014bc:	0d53      	lsrs	r3, r2, #21
 80014be:	e708      	b.n	80012d2 <__aeabi_ddiv+0xae>
 80014c0:	4652      	mov	r2, sl
 80014c2:	4322      	orrs	r2, r4
 80014c4:	d100      	bne.n	80014c8 <__aeabi_ddiv+0x2a4>
 80014c6:	e07b      	b.n	80015c0 <__aeabi_ddiv+0x39c>
 80014c8:	2c00      	cmp	r4, #0
 80014ca:	d100      	bne.n	80014ce <__aeabi_ddiv+0x2aa>
 80014cc:	e0fa      	b.n	80016c4 <__aeabi_ddiv+0x4a0>
 80014ce:	0020      	movs	r0, r4
 80014d0:	f001 fa22 	bl	8002918 <__clzsi2>
 80014d4:	0002      	movs	r2, r0
 80014d6:	3a0b      	subs	r2, #11
 80014d8:	231d      	movs	r3, #29
 80014da:	0001      	movs	r1, r0
 80014dc:	1a9b      	subs	r3, r3, r2
 80014de:	4652      	mov	r2, sl
 80014e0:	3908      	subs	r1, #8
 80014e2:	40da      	lsrs	r2, r3
 80014e4:	408c      	lsls	r4, r1
 80014e6:	4314      	orrs	r4, r2
 80014e8:	4652      	mov	r2, sl
 80014ea:	408a      	lsls	r2, r1
 80014ec:	4b31      	ldr	r3, [pc, #196]	; (80015b4 <__aeabi_ddiv+0x390>)
 80014ee:	4458      	add	r0, fp
 80014f0:	469b      	mov	fp, r3
 80014f2:	4483      	add	fp, r0
 80014f4:	2000      	movs	r0, #0
 80014f6:	e6d5      	b.n	80012a4 <__aeabi_ddiv+0x80>
 80014f8:	464b      	mov	r3, r9
 80014fa:	4323      	orrs	r3, r4
 80014fc:	4698      	mov	r8, r3
 80014fe:	d044      	beq.n	800158a <__aeabi_ddiv+0x366>
 8001500:	2c00      	cmp	r4, #0
 8001502:	d100      	bne.n	8001506 <__aeabi_ddiv+0x2e2>
 8001504:	e0ce      	b.n	80016a4 <__aeabi_ddiv+0x480>
 8001506:	0020      	movs	r0, r4
 8001508:	f001 fa06 	bl	8002918 <__clzsi2>
 800150c:	0001      	movs	r1, r0
 800150e:	0002      	movs	r2, r0
 8001510:	390b      	subs	r1, #11
 8001512:	231d      	movs	r3, #29
 8001514:	1a5b      	subs	r3, r3, r1
 8001516:	4649      	mov	r1, r9
 8001518:	0010      	movs	r0, r2
 800151a:	40d9      	lsrs	r1, r3
 800151c:	3808      	subs	r0, #8
 800151e:	4084      	lsls	r4, r0
 8001520:	000b      	movs	r3, r1
 8001522:	464d      	mov	r5, r9
 8001524:	4323      	orrs	r3, r4
 8001526:	4698      	mov	r8, r3
 8001528:	4085      	lsls	r5, r0
 800152a:	4823      	ldr	r0, [pc, #140]	; (80015b8 <__aeabi_ddiv+0x394>)
 800152c:	1a83      	subs	r3, r0, r2
 800152e:	469b      	mov	fp, r3
 8001530:	2300      	movs	r3, #0
 8001532:	4699      	mov	r9, r3
 8001534:	9300      	str	r3, [sp, #0]
 8001536:	e69a      	b.n	800126e <__aeabi_ddiv+0x4a>
 8001538:	464b      	mov	r3, r9
 800153a:	4323      	orrs	r3, r4
 800153c:	4698      	mov	r8, r3
 800153e:	d11d      	bne.n	800157c <__aeabi_ddiv+0x358>
 8001540:	2308      	movs	r3, #8
 8001542:	4699      	mov	r9, r3
 8001544:	3b06      	subs	r3, #6
 8001546:	2500      	movs	r5, #0
 8001548:	4683      	mov	fp, r0
 800154a:	9300      	str	r3, [sp, #0]
 800154c:	e68f      	b.n	800126e <__aeabi_ddiv+0x4a>
 800154e:	4652      	mov	r2, sl
 8001550:	4322      	orrs	r2, r4
 8001552:	d109      	bne.n	8001568 <__aeabi_ddiv+0x344>
 8001554:	2302      	movs	r3, #2
 8001556:	4649      	mov	r1, r9
 8001558:	4319      	orrs	r1, r3
 800155a:	4b18      	ldr	r3, [pc, #96]	; (80015bc <__aeabi_ddiv+0x398>)
 800155c:	4689      	mov	r9, r1
 800155e:	469c      	mov	ip, r3
 8001560:	2400      	movs	r4, #0
 8001562:	2002      	movs	r0, #2
 8001564:	44e3      	add	fp, ip
 8001566:	e69d      	b.n	80012a4 <__aeabi_ddiv+0x80>
 8001568:	2303      	movs	r3, #3
 800156a:	464a      	mov	r2, r9
 800156c:	431a      	orrs	r2, r3
 800156e:	4b13      	ldr	r3, [pc, #76]	; (80015bc <__aeabi_ddiv+0x398>)
 8001570:	4691      	mov	r9, r2
 8001572:	469c      	mov	ip, r3
 8001574:	4652      	mov	r2, sl
 8001576:	2003      	movs	r0, #3
 8001578:	44e3      	add	fp, ip
 800157a:	e693      	b.n	80012a4 <__aeabi_ddiv+0x80>
 800157c:	230c      	movs	r3, #12
 800157e:	4699      	mov	r9, r3
 8001580:	3b09      	subs	r3, #9
 8001582:	46a0      	mov	r8, r4
 8001584:	4683      	mov	fp, r0
 8001586:	9300      	str	r3, [sp, #0]
 8001588:	e671      	b.n	800126e <__aeabi_ddiv+0x4a>
 800158a:	2304      	movs	r3, #4
 800158c:	4699      	mov	r9, r3
 800158e:	2300      	movs	r3, #0
 8001590:	469b      	mov	fp, r3
 8001592:	3301      	adds	r3, #1
 8001594:	2500      	movs	r5, #0
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	e669      	b.n	800126e <__aeabi_ddiv+0x4a>
 800159a:	46c0      	nop			; (mov r8, r8)
 800159c:	000007ff 	.word	0x000007ff
 80015a0:	fffffc01 	.word	0xfffffc01
 80015a4:	080136c8 	.word	0x080136c8
 80015a8:	000003ff 	.word	0x000003ff
 80015ac:	feffffff 	.word	0xfeffffff
 80015b0:	000007fe 	.word	0x000007fe
 80015b4:	000003f3 	.word	0x000003f3
 80015b8:	fffffc0d 	.word	0xfffffc0d
 80015bc:	fffff801 	.word	0xfffff801
 80015c0:	4649      	mov	r1, r9
 80015c2:	2301      	movs	r3, #1
 80015c4:	4319      	orrs	r1, r3
 80015c6:	4689      	mov	r9, r1
 80015c8:	2400      	movs	r4, #0
 80015ca:	2001      	movs	r0, #1
 80015cc:	e66a      	b.n	80012a4 <__aeabi_ddiv+0x80>
 80015ce:	2300      	movs	r3, #0
 80015d0:	2480      	movs	r4, #128	; 0x80
 80015d2:	469a      	mov	sl, r3
 80015d4:	2500      	movs	r5, #0
 80015d6:	4b8a      	ldr	r3, [pc, #552]	; (8001800 <__aeabi_ddiv+0x5dc>)
 80015d8:	0324      	lsls	r4, r4, #12
 80015da:	e67a      	b.n	80012d2 <__aeabi_ddiv+0xae>
 80015dc:	2501      	movs	r5, #1
 80015de:	426d      	negs	r5, r5
 80015e0:	2301      	movs	r3, #1
 80015e2:	1a9b      	subs	r3, r3, r2
 80015e4:	2b38      	cmp	r3, #56	; 0x38
 80015e6:	dd00      	ble.n	80015ea <__aeabi_ddiv+0x3c6>
 80015e8:	e670      	b.n	80012cc <__aeabi_ddiv+0xa8>
 80015ea:	2b1f      	cmp	r3, #31
 80015ec:	dc00      	bgt.n	80015f0 <__aeabi_ddiv+0x3cc>
 80015ee:	e0bf      	b.n	8001770 <__aeabi_ddiv+0x54c>
 80015f0:	211f      	movs	r1, #31
 80015f2:	4249      	negs	r1, r1
 80015f4:	1a8a      	subs	r2, r1, r2
 80015f6:	4641      	mov	r1, r8
 80015f8:	40d1      	lsrs	r1, r2
 80015fa:	000a      	movs	r2, r1
 80015fc:	2b20      	cmp	r3, #32
 80015fe:	d004      	beq.n	800160a <__aeabi_ddiv+0x3e6>
 8001600:	4641      	mov	r1, r8
 8001602:	4b80      	ldr	r3, [pc, #512]	; (8001804 <__aeabi_ddiv+0x5e0>)
 8001604:	445b      	add	r3, fp
 8001606:	4099      	lsls	r1, r3
 8001608:	430d      	orrs	r5, r1
 800160a:	1e6b      	subs	r3, r5, #1
 800160c:	419d      	sbcs	r5, r3
 800160e:	2307      	movs	r3, #7
 8001610:	432a      	orrs	r2, r5
 8001612:	001d      	movs	r5, r3
 8001614:	2400      	movs	r4, #0
 8001616:	4015      	ands	r5, r2
 8001618:	4213      	tst	r3, r2
 800161a:	d100      	bne.n	800161e <__aeabi_ddiv+0x3fa>
 800161c:	e0d4      	b.n	80017c8 <__aeabi_ddiv+0x5a4>
 800161e:	210f      	movs	r1, #15
 8001620:	2300      	movs	r3, #0
 8001622:	4011      	ands	r1, r2
 8001624:	2904      	cmp	r1, #4
 8001626:	d100      	bne.n	800162a <__aeabi_ddiv+0x406>
 8001628:	e0cb      	b.n	80017c2 <__aeabi_ddiv+0x59e>
 800162a:	1d11      	adds	r1, r2, #4
 800162c:	4291      	cmp	r1, r2
 800162e:	4192      	sbcs	r2, r2
 8001630:	4252      	negs	r2, r2
 8001632:	189b      	adds	r3, r3, r2
 8001634:	000a      	movs	r2, r1
 8001636:	0219      	lsls	r1, r3, #8
 8001638:	d400      	bmi.n	800163c <__aeabi_ddiv+0x418>
 800163a:	e0c2      	b.n	80017c2 <__aeabi_ddiv+0x59e>
 800163c:	2301      	movs	r3, #1
 800163e:	2400      	movs	r4, #0
 8001640:	2500      	movs	r5, #0
 8001642:	e646      	b.n	80012d2 <__aeabi_ddiv+0xae>
 8001644:	2380      	movs	r3, #128	; 0x80
 8001646:	4641      	mov	r1, r8
 8001648:	031b      	lsls	r3, r3, #12
 800164a:	4219      	tst	r1, r3
 800164c:	d008      	beq.n	8001660 <__aeabi_ddiv+0x43c>
 800164e:	421c      	tst	r4, r3
 8001650:	d106      	bne.n	8001660 <__aeabi_ddiv+0x43c>
 8001652:	431c      	orrs	r4, r3
 8001654:	0324      	lsls	r4, r4, #12
 8001656:	46ba      	mov	sl, r7
 8001658:	0015      	movs	r5, r2
 800165a:	4b69      	ldr	r3, [pc, #420]	; (8001800 <__aeabi_ddiv+0x5dc>)
 800165c:	0b24      	lsrs	r4, r4, #12
 800165e:	e638      	b.n	80012d2 <__aeabi_ddiv+0xae>
 8001660:	2480      	movs	r4, #128	; 0x80
 8001662:	4643      	mov	r3, r8
 8001664:	0324      	lsls	r4, r4, #12
 8001666:	431c      	orrs	r4, r3
 8001668:	0324      	lsls	r4, r4, #12
 800166a:	46b2      	mov	sl, r6
 800166c:	4b64      	ldr	r3, [pc, #400]	; (8001800 <__aeabi_ddiv+0x5dc>)
 800166e:	0b24      	lsrs	r4, r4, #12
 8001670:	e62f      	b.n	80012d2 <__aeabi_ddiv+0xae>
 8001672:	2b00      	cmp	r3, #0
 8001674:	d100      	bne.n	8001678 <__aeabi_ddiv+0x454>
 8001676:	e703      	b.n	8001480 <__aeabi_ddiv+0x25c>
 8001678:	19a6      	adds	r6, r4, r6
 800167a:	1e68      	subs	r0, r5, #1
 800167c:	42a6      	cmp	r6, r4
 800167e:	d200      	bcs.n	8001682 <__aeabi_ddiv+0x45e>
 8001680:	e08d      	b.n	800179e <__aeabi_ddiv+0x57a>
 8001682:	428e      	cmp	r6, r1
 8001684:	d200      	bcs.n	8001688 <__aeabi_ddiv+0x464>
 8001686:	e0a3      	b.n	80017d0 <__aeabi_ddiv+0x5ac>
 8001688:	d100      	bne.n	800168c <__aeabi_ddiv+0x468>
 800168a:	e0b3      	b.n	80017f4 <__aeabi_ddiv+0x5d0>
 800168c:	0005      	movs	r5, r0
 800168e:	e6f5      	b.n	800147c <__aeabi_ddiv+0x258>
 8001690:	42aa      	cmp	r2, r5
 8001692:	d900      	bls.n	8001696 <__aeabi_ddiv+0x472>
 8001694:	e639      	b.n	800130a <__aeabi_ddiv+0xe6>
 8001696:	4643      	mov	r3, r8
 8001698:	07de      	lsls	r6, r3, #31
 800169a:	0858      	lsrs	r0, r3, #1
 800169c:	086b      	lsrs	r3, r5, #1
 800169e:	431e      	orrs	r6, r3
 80016a0:	07ed      	lsls	r5, r5, #31
 80016a2:	e639      	b.n	8001318 <__aeabi_ddiv+0xf4>
 80016a4:	4648      	mov	r0, r9
 80016a6:	f001 f937 	bl	8002918 <__clzsi2>
 80016aa:	0001      	movs	r1, r0
 80016ac:	0002      	movs	r2, r0
 80016ae:	3115      	adds	r1, #21
 80016b0:	3220      	adds	r2, #32
 80016b2:	291c      	cmp	r1, #28
 80016b4:	dc00      	bgt.n	80016b8 <__aeabi_ddiv+0x494>
 80016b6:	e72c      	b.n	8001512 <__aeabi_ddiv+0x2ee>
 80016b8:	464b      	mov	r3, r9
 80016ba:	3808      	subs	r0, #8
 80016bc:	4083      	lsls	r3, r0
 80016be:	2500      	movs	r5, #0
 80016c0:	4698      	mov	r8, r3
 80016c2:	e732      	b.n	800152a <__aeabi_ddiv+0x306>
 80016c4:	f001 f928 	bl	8002918 <__clzsi2>
 80016c8:	0003      	movs	r3, r0
 80016ca:	001a      	movs	r2, r3
 80016cc:	3215      	adds	r2, #21
 80016ce:	3020      	adds	r0, #32
 80016d0:	2a1c      	cmp	r2, #28
 80016d2:	dc00      	bgt.n	80016d6 <__aeabi_ddiv+0x4b2>
 80016d4:	e700      	b.n	80014d8 <__aeabi_ddiv+0x2b4>
 80016d6:	4654      	mov	r4, sl
 80016d8:	3b08      	subs	r3, #8
 80016da:	2200      	movs	r2, #0
 80016dc:	409c      	lsls	r4, r3
 80016de:	e705      	b.n	80014ec <__aeabi_ddiv+0x2c8>
 80016e0:	1936      	adds	r6, r6, r4
 80016e2:	3b01      	subs	r3, #1
 80016e4:	42b4      	cmp	r4, r6
 80016e6:	d900      	bls.n	80016ea <__aeabi_ddiv+0x4c6>
 80016e8:	e6a6      	b.n	8001438 <__aeabi_ddiv+0x214>
 80016ea:	42b2      	cmp	r2, r6
 80016ec:	d800      	bhi.n	80016f0 <__aeabi_ddiv+0x4cc>
 80016ee:	e6a3      	b.n	8001438 <__aeabi_ddiv+0x214>
 80016f0:	1e83      	subs	r3, r0, #2
 80016f2:	1936      	adds	r6, r6, r4
 80016f4:	e6a0      	b.n	8001438 <__aeabi_ddiv+0x214>
 80016f6:	1909      	adds	r1, r1, r4
 80016f8:	3d01      	subs	r5, #1
 80016fa:	428c      	cmp	r4, r1
 80016fc:	d900      	bls.n	8001700 <__aeabi_ddiv+0x4dc>
 80016fe:	e68d      	b.n	800141c <__aeabi_ddiv+0x1f8>
 8001700:	428a      	cmp	r2, r1
 8001702:	d800      	bhi.n	8001706 <__aeabi_ddiv+0x4e2>
 8001704:	e68a      	b.n	800141c <__aeabi_ddiv+0x1f8>
 8001706:	1e85      	subs	r5, r0, #2
 8001708:	1909      	adds	r1, r1, r4
 800170a:	e687      	b.n	800141c <__aeabi_ddiv+0x1f8>
 800170c:	230f      	movs	r3, #15
 800170e:	402b      	ands	r3, r5
 8001710:	2b04      	cmp	r3, #4
 8001712:	d100      	bne.n	8001716 <__aeabi_ddiv+0x4f2>
 8001714:	e6bc      	b.n	8001490 <__aeabi_ddiv+0x26c>
 8001716:	2305      	movs	r3, #5
 8001718:	425b      	negs	r3, r3
 800171a:	42ab      	cmp	r3, r5
 800171c:	419b      	sbcs	r3, r3
 800171e:	3504      	adds	r5, #4
 8001720:	425b      	negs	r3, r3
 8001722:	08ed      	lsrs	r5, r5, #3
 8001724:	4498      	add	r8, r3
 8001726:	e6b4      	b.n	8001492 <__aeabi_ddiv+0x26e>
 8001728:	42af      	cmp	r7, r5
 800172a:	d900      	bls.n	800172e <__aeabi_ddiv+0x50a>
 800172c:	e660      	b.n	80013f0 <__aeabi_ddiv+0x1cc>
 800172e:	4282      	cmp	r2, r0
 8001730:	d804      	bhi.n	800173c <__aeabi_ddiv+0x518>
 8001732:	d000      	beq.n	8001736 <__aeabi_ddiv+0x512>
 8001734:	e65c      	b.n	80013f0 <__aeabi_ddiv+0x1cc>
 8001736:	42ae      	cmp	r6, r5
 8001738:	d800      	bhi.n	800173c <__aeabi_ddiv+0x518>
 800173a:	e659      	b.n	80013f0 <__aeabi_ddiv+0x1cc>
 800173c:	2302      	movs	r3, #2
 800173e:	425b      	negs	r3, r3
 8001740:	469c      	mov	ip, r3
 8001742:	9b00      	ldr	r3, [sp, #0]
 8001744:	44e0      	add	r8, ip
 8001746:	469c      	mov	ip, r3
 8001748:	4465      	add	r5, ip
 800174a:	429d      	cmp	r5, r3
 800174c:	419b      	sbcs	r3, r3
 800174e:	425b      	negs	r3, r3
 8001750:	191b      	adds	r3, r3, r4
 8001752:	18c0      	adds	r0, r0, r3
 8001754:	e64d      	b.n	80013f2 <__aeabi_ddiv+0x1ce>
 8001756:	428a      	cmp	r2, r1
 8001758:	d800      	bhi.n	800175c <__aeabi_ddiv+0x538>
 800175a:	e60e      	b.n	800137a <__aeabi_ddiv+0x156>
 800175c:	1e83      	subs	r3, r0, #2
 800175e:	1909      	adds	r1, r1, r4
 8001760:	e60b      	b.n	800137a <__aeabi_ddiv+0x156>
 8001762:	428a      	cmp	r2, r1
 8001764:	d800      	bhi.n	8001768 <__aeabi_ddiv+0x544>
 8001766:	e5f4      	b.n	8001352 <__aeabi_ddiv+0x12e>
 8001768:	1e83      	subs	r3, r0, #2
 800176a:	4698      	mov	r8, r3
 800176c:	1909      	adds	r1, r1, r4
 800176e:	e5f0      	b.n	8001352 <__aeabi_ddiv+0x12e>
 8001770:	4925      	ldr	r1, [pc, #148]	; (8001808 <__aeabi_ddiv+0x5e4>)
 8001772:	0028      	movs	r0, r5
 8001774:	4459      	add	r1, fp
 8001776:	408d      	lsls	r5, r1
 8001778:	4642      	mov	r2, r8
 800177a:	408a      	lsls	r2, r1
 800177c:	1e69      	subs	r1, r5, #1
 800177e:	418d      	sbcs	r5, r1
 8001780:	4641      	mov	r1, r8
 8001782:	40d8      	lsrs	r0, r3
 8001784:	40d9      	lsrs	r1, r3
 8001786:	4302      	orrs	r2, r0
 8001788:	432a      	orrs	r2, r5
 800178a:	000b      	movs	r3, r1
 800178c:	0751      	lsls	r1, r2, #29
 800178e:	d100      	bne.n	8001792 <__aeabi_ddiv+0x56e>
 8001790:	e751      	b.n	8001636 <__aeabi_ddiv+0x412>
 8001792:	210f      	movs	r1, #15
 8001794:	4011      	ands	r1, r2
 8001796:	2904      	cmp	r1, #4
 8001798:	d000      	beq.n	800179c <__aeabi_ddiv+0x578>
 800179a:	e746      	b.n	800162a <__aeabi_ddiv+0x406>
 800179c:	e74b      	b.n	8001636 <__aeabi_ddiv+0x412>
 800179e:	0005      	movs	r5, r0
 80017a0:	428e      	cmp	r6, r1
 80017a2:	d000      	beq.n	80017a6 <__aeabi_ddiv+0x582>
 80017a4:	e66a      	b.n	800147c <__aeabi_ddiv+0x258>
 80017a6:	9a00      	ldr	r2, [sp, #0]
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d000      	beq.n	80017ae <__aeabi_ddiv+0x58a>
 80017ac:	e666      	b.n	800147c <__aeabi_ddiv+0x258>
 80017ae:	e667      	b.n	8001480 <__aeabi_ddiv+0x25c>
 80017b0:	4a16      	ldr	r2, [pc, #88]	; (800180c <__aeabi_ddiv+0x5e8>)
 80017b2:	445a      	add	r2, fp
 80017b4:	2a00      	cmp	r2, #0
 80017b6:	dc00      	bgt.n	80017ba <__aeabi_ddiv+0x596>
 80017b8:	e710      	b.n	80015dc <__aeabi_ddiv+0x3b8>
 80017ba:	2301      	movs	r3, #1
 80017bc:	2500      	movs	r5, #0
 80017be:	4498      	add	r8, r3
 80017c0:	e667      	b.n	8001492 <__aeabi_ddiv+0x26e>
 80017c2:	075d      	lsls	r5, r3, #29
 80017c4:	025b      	lsls	r3, r3, #9
 80017c6:	0b1c      	lsrs	r4, r3, #12
 80017c8:	08d2      	lsrs	r2, r2, #3
 80017ca:	2300      	movs	r3, #0
 80017cc:	4315      	orrs	r5, r2
 80017ce:	e580      	b.n	80012d2 <__aeabi_ddiv+0xae>
 80017d0:	9800      	ldr	r0, [sp, #0]
 80017d2:	3d02      	subs	r5, #2
 80017d4:	0042      	lsls	r2, r0, #1
 80017d6:	4282      	cmp	r2, r0
 80017d8:	41bf      	sbcs	r7, r7
 80017da:	427f      	negs	r7, r7
 80017dc:	193c      	adds	r4, r7, r4
 80017de:	1936      	adds	r6, r6, r4
 80017e0:	9200      	str	r2, [sp, #0]
 80017e2:	e7dd      	b.n	80017a0 <__aeabi_ddiv+0x57c>
 80017e4:	2480      	movs	r4, #128	; 0x80
 80017e6:	4643      	mov	r3, r8
 80017e8:	0324      	lsls	r4, r4, #12
 80017ea:	431c      	orrs	r4, r3
 80017ec:	0324      	lsls	r4, r4, #12
 80017ee:	4b04      	ldr	r3, [pc, #16]	; (8001800 <__aeabi_ddiv+0x5dc>)
 80017f0:	0b24      	lsrs	r4, r4, #12
 80017f2:	e56e      	b.n	80012d2 <__aeabi_ddiv+0xae>
 80017f4:	9a00      	ldr	r2, [sp, #0]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d3ea      	bcc.n	80017d0 <__aeabi_ddiv+0x5ac>
 80017fa:	0005      	movs	r5, r0
 80017fc:	e7d3      	b.n	80017a6 <__aeabi_ddiv+0x582>
 80017fe:	46c0      	nop			; (mov r8, r8)
 8001800:	000007ff 	.word	0x000007ff
 8001804:	0000043e 	.word	0x0000043e
 8001808:	0000041e 	.word	0x0000041e
 800180c:	000003ff 	.word	0x000003ff

08001810 <__eqdf2>:
 8001810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001812:	464e      	mov	r6, r9
 8001814:	4645      	mov	r5, r8
 8001816:	46de      	mov	lr, fp
 8001818:	4657      	mov	r7, sl
 800181a:	4690      	mov	r8, r2
 800181c:	b5e0      	push	{r5, r6, r7, lr}
 800181e:	0017      	movs	r7, r2
 8001820:	031a      	lsls	r2, r3, #12
 8001822:	0b12      	lsrs	r2, r2, #12
 8001824:	0005      	movs	r5, r0
 8001826:	4684      	mov	ip, r0
 8001828:	4819      	ldr	r0, [pc, #100]	; (8001890 <__eqdf2+0x80>)
 800182a:	030e      	lsls	r6, r1, #12
 800182c:	004c      	lsls	r4, r1, #1
 800182e:	4691      	mov	r9, r2
 8001830:	005a      	lsls	r2, r3, #1
 8001832:	0fdb      	lsrs	r3, r3, #31
 8001834:	469b      	mov	fp, r3
 8001836:	0b36      	lsrs	r6, r6, #12
 8001838:	0d64      	lsrs	r4, r4, #21
 800183a:	0fc9      	lsrs	r1, r1, #31
 800183c:	0d52      	lsrs	r2, r2, #21
 800183e:	4284      	cmp	r4, r0
 8001840:	d019      	beq.n	8001876 <__eqdf2+0x66>
 8001842:	4282      	cmp	r2, r0
 8001844:	d010      	beq.n	8001868 <__eqdf2+0x58>
 8001846:	2001      	movs	r0, #1
 8001848:	4294      	cmp	r4, r2
 800184a:	d10e      	bne.n	800186a <__eqdf2+0x5a>
 800184c:	454e      	cmp	r6, r9
 800184e:	d10c      	bne.n	800186a <__eqdf2+0x5a>
 8001850:	2001      	movs	r0, #1
 8001852:	45c4      	cmp	ip, r8
 8001854:	d109      	bne.n	800186a <__eqdf2+0x5a>
 8001856:	4559      	cmp	r1, fp
 8001858:	d017      	beq.n	800188a <__eqdf2+0x7a>
 800185a:	2c00      	cmp	r4, #0
 800185c:	d105      	bne.n	800186a <__eqdf2+0x5a>
 800185e:	0030      	movs	r0, r6
 8001860:	4328      	orrs	r0, r5
 8001862:	1e43      	subs	r3, r0, #1
 8001864:	4198      	sbcs	r0, r3
 8001866:	e000      	b.n	800186a <__eqdf2+0x5a>
 8001868:	2001      	movs	r0, #1
 800186a:	bcf0      	pop	{r4, r5, r6, r7}
 800186c:	46bb      	mov	fp, r7
 800186e:	46b2      	mov	sl, r6
 8001870:	46a9      	mov	r9, r5
 8001872:	46a0      	mov	r8, r4
 8001874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001876:	0033      	movs	r3, r6
 8001878:	2001      	movs	r0, #1
 800187a:	432b      	orrs	r3, r5
 800187c:	d1f5      	bne.n	800186a <__eqdf2+0x5a>
 800187e:	42a2      	cmp	r2, r4
 8001880:	d1f3      	bne.n	800186a <__eqdf2+0x5a>
 8001882:	464b      	mov	r3, r9
 8001884:	433b      	orrs	r3, r7
 8001886:	d1f0      	bne.n	800186a <__eqdf2+0x5a>
 8001888:	e7e2      	b.n	8001850 <__eqdf2+0x40>
 800188a:	2000      	movs	r0, #0
 800188c:	e7ed      	b.n	800186a <__eqdf2+0x5a>
 800188e:	46c0      	nop			; (mov r8, r8)
 8001890:	000007ff 	.word	0x000007ff

08001894 <__gedf2>:
 8001894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001896:	4647      	mov	r7, r8
 8001898:	46ce      	mov	lr, r9
 800189a:	0004      	movs	r4, r0
 800189c:	0018      	movs	r0, r3
 800189e:	0016      	movs	r6, r2
 80018a0:	031b      	lsls	r3, r3, #12
 80018a2:	0b1b      	lsrs	r3, r3, #12
 80018a4:	4d2d      	ldr	r5, [pc, #180]	; (800195c <__gedf2+0xc8>)
 80018a6:	004a      	lsls	r2, r1, #1
 80018a8:	4699      	mov	r9, r3
 80018aa:	b580      	push	{r7, lr}
 80018ac:	0043      	lsls	r3, r0, #1
 80018ae:	030f      	lsls	r7, r1, #12
 80018b0:	46a4      	mov	ip, r4
 80018b2:	46b0      	mov	r8, r6
 80018b4:	0b3f      	lsrs	r7, r7, #12
 80018b6:	0d52      	lsrs	r2, r2, #21
 80018b8:	0fc9      	lsrs	r1, r1, #31
 80018ba:	0d5b      	lsrs	r3, r3, #21
 80018bc:	0fc0      	lsrs	r0, r0, #31
 80018be:	42aa      	cmp	r2, r5
 80018c0:	d021      	beq.n	8001906 <__gedf2+0x72>
 80018c2:	42ab      	cmp	r3, r5
 80018c4:	d013      	beq.n	80018ee <__gedf2+0x5a>
 80018c6:	2a00      	cmp	r2, #0
 80018c8:	d122      	bne.n	8001910 <__gedf2+0x7c>
 80018ca:	433c      	orrs	r4, r7
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d102      	bne.n	80018d6 <__gedf2+0x42>
 80018d0:	464d      	mov	r5, r9
 80018d2:	432e      	orrs	r6, r5
 80018d4:	d022      	beq.n	800191c <__gedf2+0x88>
 80018d6:	2c00      	cmp	r4, #0
 80018d8:	d010      	beq.n	80018fc <__gedf2+0x68>
 80018da:	4281      	cmp	r1, r0
 80018dc:	d022      	beq.n	8001924 <__gedf2+0x90>
 80018de:	2002      	movs	r0, #2
 80018e0:	3901      	subs	r1, #1
 80018e2:	4008      	ands	r0, r1
 80018e4:	3801      	subs	r0, #1
 80018e6:	bcc0      	pop	{r6, r7}
 80018e8:	46b9      	mov	r9, r7
 80018ea:	46b0      	mov	r8, r6
 80018ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018ee:	464d      	mov	r5, r9
 80018f0:	432e      	orrs	r6, r5
 80018f2:	d129      	bne.n	8001948 <__gedf2+0xb4>
 80018f4:	2a00      	cmp	r2, #0
 80018f6:	d1f0      	bne.n	80018da <__gedf2+0x46>
 80018f8:	433c      	orrs	r4, r7
 80018fa:	d1ee      	bne.n	80018da <__gedf2+0x46>
 80018fc:	2800      	cmp	r0, #0
 80018fe:	d1f2      	bne.n	80018e6 <__gedf2+0x52>
 8001900:	2001      	movs	r0, #1
 8001902:	4240      	negs	r0, r0
 8001904:	e7ef      	b.n	80018e6 <__gedf2+0x52>
 8001906:	003d      	movs	r5, r7
 8001908:	4325      	orrs	r5, r4
 800190a:	d11d      	bne.n	8001948 <__gedf2+0xb4>
 800190c:	4293      	cmp	r3, r2
 800190e:	d0ee      	beq.n	80018ee <__gedf2+0x5a>
 8001910:	2b00      	cmp	r3, #0
 8001912:	d1e2      	bne.n	80018da <__gedf2+0x46>
 8001914:	464c      	mov	r4, r9
 8001916:	4326      	orrs	r6, r4
 8001918:	d1df      	bne.n	80018da <__gedf2+0x46>
 800191a:	e7e0      	b.n	80018de <__gedf2+0x4a>
 800191c:	2000      	movs	r0, #0
 800191e:	2c00      	cmp	r4, #0
 8001920:	d0e1      	beq.n	80018e6 <__gedf2+0x52>
 8001922:	e7dc      	b.n	80018de <__gedf2+0x4a>
 8001924:	429a      	cmp	r2, r3
 8001926:	dc0a      	bgt.n	800193e <__gedf2+0xaa>
 8001928:	dbe8      	blt.n	80018fc <__gedf2+0x68>
 800192a:	454f      	cmp	r7, r9
 800192c:	d8d7      	bhi.n	80018de <__gedf2+0x4a>
 800192e:	d00e      	beq.n	800194e <__gedf2+0xba>
 8001930:	2000      	movs	r0, #0
 8001932:	454f      	cmp	r7, r9
 8001934:	d2d7      	bcs.n	80018e6 <__gedf2+0x52>
 8001936:	2900      	cmp	r1, #0
 8001938:	d0e2      	beq.n	8001900 <__gedf2+0x6c>
 800193a:	0008      	movs	r0, r1
 800193c:	e7d3      	b.n	80018e6 <__gedf2+0x52>
 800193e:	4243      	negs	r3, r0
 8001940:	4158      	adcs	r0, r3
 8001942:	0040      	lsls	r0, r0, #1
 8001944:	3801      	subs	r0, #1
 8001946:	e7ce      	b.n	80018e6 <__gedf2+0x52>
 8001948:	2002      	movs	r0, #2
 800194a:	4240      	negs	r0, r0
 800194c:	e7cb      	b.n	80018e6 <__gedf2+0x52>
 800194e:	45c4      	cmp	ip, r8
 8001950:	d8c5      	bhi.n	80018de <__gedf2+0x4a>
 8001952:	2000      	movs	r0, #0
 8001954:	45c4      	cmp	ip, r8
 8001956:	d2c6      	bcs.n	80018e6 <__gedf2+0x52>
 8001958:	e7ed      	b.n	8001936 <__gedf2+0xa2>
 800195a:	46c0      	nop			; (mov r8, r8)
 800195c:	000007ff 	.word	0x000007ff

08001960 <__ledf2>:
 8001960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001962:	4647      	mov	r7, r8
 8001964:	46ce      	mov	lr, r9
 8001966:	0004      	movs	r4, r0
 8001968:	0018      	movs	r0, r3
 800196a:	0016      	movs	r6, r2
 800196c:	031b      	lsls	r3, r3, #12
 800196e:	0b1b      	lsrs	r3, r3, #12
 8001970:	4d2c      	ldr	r5, [pc, #176]	; (8001a24 <__ledf2+0xc4>)
 8001972:	004a      	lsls	r2, r1, #1
 8001974:	4699      	mov	r9, r3
 8001976:	b580      	push	{r7, lr}
 8001978:	0043      	lsls	r3, r0, #1
 800197a:	030f      	lsls	r7, r1, #12
 800197c:	46a4      	mov	ip, r4
 800197e:	46b0      	mov	r8, r6
 8001980:	0b3f      	lsrs	r7, r7, #12
 8001982:	0d52      	lsrs	r2, r2, #21
 8001984:	0fc9      	lsrs	r1, r1, #31
 8001986:	0d5b      	lsrs	r3, r3, #21
 8001988:	0fc0      	lsrs	r0, r0, #31
 800198a:	42aa      	cmp	r2, r5
 800198c:	d00d      	beq.n	80019aa <__ledf2+0x4a>
 800198e:	42ab      	cmp	r3, r5
 8001990:	d010      	beq.n	80019b4 <__ledf2+0x54>
 8001992:	2a00      	cmp	r2, #0
 8001994:	d127      	bne.n	80019e6 <__ledf2+0x86>
 8001996:	433c      	orrs	r4, r7
 8001998:	2b00      	cmp	r3, #0
 800199a:	d111      	bne.n	80019c0 <__ledf2+0x60>
 800199c:	464d      	mov	r5, r9
 800199e:	432e      	orrs	r6, r5
 80019a0:	d10e      	bne.n	80019c0 <__ledf2+0x60>
 80019a2:	2000      	movs	r0, #0
 80019a4:	2c00      	cmp	r4, #0
 80019a6:	d015      	beq.n	80019d4 <__ledf2+0x74>
 80019a8:	e00e      	b.n	80019c8 <__ledf2+0x68>
 80019aa:	003d      	movs	r5, r7
 80019ac:	4325      	orrs	r5, r4
 80019ae:	d110      	bne.n	80019d2 <__ledf2+0x72>
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d118      	bne.n	80019e6 <__ledf2+0x86>
 80019b4:	464d      	mov	r5, r9
 80019b6:	432e      	orrs	r6, r5
 80019b8:	d10b      	bne.n	80019d2 <__ledf2+0x72>
 80019ba:	2a00      	cmp	r2, #0
 80019bc:	d102      	bne.n	80019c4 <__ledf2+0x64>
 80019be:	433c      	orrs	r4, r7
 80019c0:	2c00      	cmp	r4, #0
 80019c2:	d00b      	beq.n	80019dc <__ledf2+0x7c>
 80019c4:	4281      	cmp	r1, r0
 80019c6:	d014      	beq.n	80019f2 <__ledf2+0x92>
 80019c8:	2002      	movs	r0, #2
 80019ca:	3901      	subs	r1, #1
 80019cc:	4008      	ands	r0, r1
 80019ce:	3801      	subs	r0, #1
 80019d0:	e000      	b.n	80019d4 <__ledf2+0x74>
 80019d2:	2002      	movs	r0, #2
 80019d4:	bcc0      	pop	{r6, r7}
 80019d6:	46b9      	mov	r9, r7
 80019d8:	46b0      	mov	r8, r6
 80019da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019dc:	2800      	cmp	r0, #0
 80019de:	d1f9      	bne.n	80019d4 <__ledf2+0x74>
 80019e0:	2001      	movs	r0, #1
 80019e2:	4240      	negs	r0, r0
 80019e4:	e7f6      	b.n	80019d4 <__ledf2+0x74>
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1ec      	bne.n	80019c4 <__ledf2+0x64>
 80019ea:	464c      	mov	r4, r9
 80019ec:	4326      	orrs	r6, r4
 80019ee:	d1e9      	bne.n	80019c4 <__ledf2+0x64>
 80019f0:	e7ea      	b.n	80019c8 <__ledf2+0x68>
 80019f2:	429a      	cmp	r2, r3
 80019f4:	dd04      	ble.n	8001a00 <__ledf2+0xa0>
 80019f6:	4243      	negs	r3, r0
 80019f8:	4158      	adcs	r0, r3
 80019fa:	0040      	lsls	r0, r0, #1
 80019fc:	3801      	subs	r0, #1
 80019fe:	e7e9      	b.n	80019d4 <__ledf2+0x74>
 8001a00:	429a      	cmp	r2, r3
 8001a02:	dbeb      	blt.n	80019dc <__ledf2+0x7c>
 8001a04:	454f      	cmp	r7, r9
 8001a06:	d8df      	bhi.n	80019c8 <__ledf2+0x68>
 8001a08:	d006      	beq.n	8001a18 <__ledf2+0xb8>
 8001a0a:	2000      	movs	r0, #0
 8001a0c:	454f      	cmp	r7, r9
 8001a0e:	d2e1      	bcs.n	80019d4 <__ledf2+0x74>
 8001a10:	2900      	cmp	r1, #0
 8001a12:	d0e5      	beq.n	80019e0 <__ledf2+0x80>
 8001a14:	0008      	movs	r0, r1
 8001a16:	e7dd      	b.n	80019d4 <__ledf2+0x74>
 8001a18:	45c4      	cmp	ip, r8
 8001a1a:	d8d5      	bhi.n	80019c8 <__ledf2+0x68>
 8001a1c:	2000      	movs	r0, #0
 8001a1e:	45c4      	cmp	ip, r8
 8001a20:	d2d8      	bcs.n	80019d4 <__ledf2+0x74>
 8001a22:	e7f5      	b.n	8001a10 <__ledf2+0xb0>
 8001a24:	000007ff 	.word	0x000007ff

08001a28 <__aeabi_dmul>:
 8001a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a2a:	4657      	mov	r7, sl
 8001a2c:	464e      	mov	r6, r9
 8001a2e:	4645      	mov	r5, r8
 8001a30:	46de      	mov	lr, fp
 8001a32:	b5e0      	push	{r5, r6, r7, lr}
 8001a34:	4698      	mov	r8, r3
 8001a36:	030c      	lsls	r4, r1, #12
 8001a38:	004b      	lsls	r3, r1, #1
 8001a3a:	0006      	movs	r6, r0
 8001a3c:	4692      	mov	sl, r2
 8001a3e:	b087      	sub	sp, #28
 8001a40:	0b24      	lsrs	r4, r4, #12
 8001a42:	0d5b      	lsrs	r3, r3, #21
 8001a44:	0fcf      	lsrs	r7, r1, #31
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d100      	bne.n	8001a4c <__aeabi_dmul+0x24>
 8001a4a:	e15c      	b.n	8001d06 <__aeabi_dmul+0x2de>
 8001a4c:	4ad9      	ldr	r2, [pc, #868]	; (8001db4 <__aeabi_dmul+0x38c>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d100      	bne.n	8001a54 <__aeabi_dmul+0x2c>
 8001a52:	e175      	b.n	8001d40 <__aeabi_dmul+0x318>
 8001a54:	0f42      	lsrs	r2, r0, #29
 8001a56:	00e4      	lsls	r4, r4, #3
 8001a58:	4314      	orrs	r4, r2
 8001a5a:	2280      	movs	r2, #128	; 0x80
 8001a5c:	0412      	lsls	r2, r2, #16
 8001a5e:	4314      	orrs	r4, r2
 8001a60:	4ad5      	ldr	r2, [pc, #852]	; (8001db8 <__aeabi_dmul+0x390>)
 8001a62:	00c5      	lsls	r5, r0, #3
 8001a64:	4694      	mov	ip, r2
 8001a66:	4463      	add	r3, ip
 8001a68:	9300      	str	r3, [sp, #0]
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	4699      	mov	r9, r3
 8001a6e:	469b      	mov	fp, r3
 8001a70:	4643      	mov	r3, r8
 8001a72:	4642      	mov	r2, r8
 8001a74:	031e      	lsls	r6, r3, #12
 8001a76:	0fd2      	lsrs	r2, r2, #31
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	4650      	mov	r0, sl
 8001a7c:	4690      	mov	r8, r2
 8001a7e:	0b36      	lsrs	r6, r6, #12
 8001a80:	0d5b      	lsrs	r3, r3, #21
 8001a82:	d100      	bne.n	8001a86 <__aeabi_dmul+0x5e>
 8001a84:	e120      	b.n	8001cc8 <__aeabi_dmul+0x2a0>
 8001a86:	4acb      	ldr	r2, [pc, #812]	; (8001db4 <__aeabi_dmul+0x38c>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d100      	bne.n	8001a8e <__aeabi_dmul+0x66>
 8001a8c:	e162      	b.n	8001d54 <__aeabi_dmul+0x32c>
 8001a8e:	49ca      	ldr	r1, [pc, #808]	; (8001db8 <__aeabi_dmul+0x390>)
 8001a90:	0f42      	lsrs	r2, r0, #29
 8001a92:	468c      	mov	ip, r1
 8001a94:	9900      	ldr	r1, [sp, #0]
 8001a96:	4463      	add	r3, ip
 8001a98:	00f6      	lsls	r6, r6, #3
 8001a9a:	468c      	mov	ip, r1
 8001a9c:	4316      	orrs	r6, r2
 8001a9e:	2280      	movs	r2, #128	; 0x80
 8001aa0:	449c      	add	ip, r3
 8001aa2:	0412      	lsls	r2, r2, #16
 8001aa4:	4663      	mov	r3, ip
 8001aa6:	4316      	orrs	r6, r2
 8001aa8:	00c2      	lsls	r2, r0, #3
 8001aaa:	2000      	movs	r0, #0
 8001aac:	9300      	str	r3, [sp, #0]
 8001aae:	9900      	ldr	r1, [sp, #0]
 8001ab0:	4643      	mov	r3, r8
 8001ab2:	3101      	adds	r1, #1
 8001ab4:	468c      	mov	ip, r1
 8001ab6:	4649      	mov	r1, r9
 8001ab8:	407b      	eors	r3, r7
 8001aba:	9301      	str	r3, [sp, #4]
 8001abc:	290f      	cmp	r1, #15
 8001abe:	d826      	bhi.n	8001b0e <__aeabi_dmul+0xe6>
 8001ac0:	4bbe      	ldr	r3, [pc, #760]	; (8001dbc <__aeabi_dmul+0x394>)
 8001ac2:	0089      	lsls	r1, r1, #2
 8001ac4:	5859      	ldr	r1, [r3, r1]
 8001ac6:	468f      	mov	pc, r1
 8001ac8:	4643      	mov	r3, r8
 8001aca:	9301      	str	r3, [sp, #4]
 8001acc:	0034      	movs	r4, r6
 8001ace:	0015      	movs	r5, r2
 8001ad0:	4683      	mov	fp, r0
 8001ad2:	465b      	mov	r3, fp
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d016      	beq.n	8001b06 <__aeabi_dmul+0xde>
 8001ad8:	2b03      	cmp	r3, #3
 8001ada:	d100      	bne.n	8001ade <__aeabi_dmul+0xb6>
 8001adc:	e203      	b.n	8001ee6 <__aeabi_dmul+0x4be>
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d000      	beq.n	8001ae4 <__aeabi_dmul+0xbc>
 8001ae2:	e0cd      	b.n	8001c80 <__aeabi_dmul+0x258>
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	2400      	movs	r4, #0
 8001ae8:	2500      	movs	r5, #0
 8001aea:	9b01      	ldr	r3, [sp, #4]
 8001aec:	0512      	lsls	r2, r2, #20
 8001aee:	4322      	orrs	r2, r4
 8001af0:	07db      	lsls	r3, r3, #31
 8001af2:	431a      	orrs	r2, r3
 8001af4:	0028      	movs	r0, r5
 8001af6:	0011      	movs	r1, r2
 8001af8:	b007      	add	sp, #28
 8001afa:	bcf0      	pop	{r4, r5, r6, r7}
 8001afc:	46bb      	mov	fp, r7
 8001afe:	46b2      	mov	sl, r6
 8001b00:	46a9      	mov	r9, r5
 8001b02:	46a0      	mov	r8, r4
 8001b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b06:	2400      	movs	r4, #0
 8001b08:	2500      	movs	r5, #0
 8001b0a:	4aaa      	ldr	r2, [pc, #680]	; (8001db4 <__aeabi_dmul+0x38c>)
 8001b0c:	e7ed      	b.n	8001aea <__aeabi_dmul+0xc2>
 8001b0e:	0c28      	lsrs	r0, r5, #16
 8001b10:	042d      	lsls	r5, r5, #16
 8001b12:	0c2d      	lsrs	r5, r5, #16
 8001b14:	002b      	movs	r3, r5
 8001b16:	0c11      	lsrs	r1, r2, #16
 8001b18:	0412      	lsls	r2, r2, #16
 8001b1a:	0c12      	lsrs	r2, r2, #16
 8001b1c:	4353      	muls	r3, r2
 8001b1e:	4698      	mov	r8, r3
 8001b20:	0013      	movs	r3, r2
 8001b22:	002f      	movs	r7, r5
 8001b24:	4343      	muls	r3, r0
 8001b26:	4699      	mov	r9, r3
 8001b28:	434f      	muls	r7, r1
 8001b2a:	444f      	add	r7, r9
 8001b2c:	46bb      	mov	fp, r7
 8001b2e:	4647      	mov	r7, r8
 8001b30:	000b      	movs	r3, r1
 8001b32:	0c3f      	lsrs	r7, r7, #16
 8001b34:	46ba      	mov	sl, r7
 8001b36:	4343      	muls	r3, r0
 8001b38:	44da      	add	sl, fp
 8001b3a:	9302      	str	r3, [sp, #8]
 8001b3c:	45d1      	cmp	r9, sl
 8001b3e:	d904      	bls.n	8001b4a <__aeabi_dmul+0x122>
 8001b40:	2780      	movs	r7, #128	; 0x80
 8001b42:	027f      	lsls	r7, r7, #9
 8001b44:	46b9      	mov	r9, r7
 8001b46:	444b      	add	r3, r9
 8001b48:	9302      	str	r3, [sp, #8]
 8001b4a:	4653      	mov	r3, sl
 8001b4c:	0c1b      	lsrs	r3, r3, #16
 8001b4e:	469b      	mov	fp, r3
 8001b50:	4653      	mov	r3, sl
 8001b52:	041f      	lsls	r7, r3, #16
 8001b54:	4643      	mov	r3, r8
 8001b56:	041b      	lsls	r3, r3, #16
 8001b58:	0c1b      	lsrs	r3, r3, #16
 8001b5a:	4698      	mov	r8, r3
 8001b5c:	003b      	movs	r3, r7
 8001b5e:	4443      	add	r3, r8
 8001b60:	9304      	str	r3, [sp, #16]
 8001b62:	0c33      	lsrs	r3, r6, #16
 8001b64:	0436      	lsls	r6, r6, #16
 8001b66:	0c36      	lsrs	r6, r6, #16
 8001b68:	4698      	mov	r8, r3
 8001b6a:	0033      	movs	r3, r6
 8001b6c:	4343      	muls	r3, r0
 8001b6e:	4699      	mov	r9, r3
 8001b70:	4643      	mov	r3, r8
 8001b72:	4343      	muls	r3, r0
 8001b74:	002f      	movs	r7, r5
 8001b76:	469a      	mov	sl, r3
 8001b78:	4643      	mov	r3, r8
 8001b7a:	4377      	muls	r7, r6
 8001b7c:	435d      	muls	r5, r3
 8001b7e:	0c38      	lsrs	r0, r7, #16
 8001b80:	444d      	add	r5, r9
 8001b82:	1945      	adds	r5, r0, r5
 8001b84:	45a9      	cmp	r9, r5
 8001b86:	d903      	bls.n	8001b90 <__aeabi_dmul+0x168>
 8001b88:	2380      	movs	r3, #128	; 0x80
 8001b8a:	025b      	lsls	r3, r3, #9
 8001b8c:	4699      	mov	r9, r3
 8001b8e:	44ca      	add	sl, r9
 8001b90:	043f      	lsls	r7, r7, #16
 8001b92:	0c28      	lsrs	r0, r5, #16
 8001b94:	0c3f      	lsrs	r7, r7, #16
 8001b96:	042d      	lsls	r5, r5, #16
 8001b98:	19ed      	adds	r5, r5, r7
 8001b9a:	0c27      	lsrs	r7, r4, #16
 8001b9c:	0424      	lsls	r4, r4, #16
 8001b9e:	0c24      	lsrs	r4, r4, #16
 8001ba0:	0003      	movs	r3, r0
 8001ba2:	0020      	movs	r0, r4
 8001ba4:	4350      	muls	r0, r2
 8001ba6:	437a      	muls	r2, r7
 8001ba8:	4691      	mov	r9, r2
 8001baa:	003a      	movs	r2, r7
 8001bac:	4453      	add	r3, sl
 8001bae:	9305      	str	r3, [sp, #20]
 8001bb0:	0c03      	lsrs	r3, r0, #16
 8001bb2:	469a      	mov	sl, r3
 8001bb4:	434a      	muls	r2, r1
 8001bb6:	4361      	muls	r1, r4
 8001bb8:	4449      	add	r1, r9
 8001bba:	4451      	add	r1, sl
 8001bbc:	44ab      	add	fp, r5
 8001bbe:	4589      	cmp	r9, r1
 8001bc0:	d903      	bls.n	8001bca <__aeabi_dmul+0x1a2>
 8001bc2:	2380      	movs	r3, #128	; 0x80
 8001bc4:	025b      	lsls	r3, r3, #9
 8001bc6:	4699      	mov	r9, r3
 8001bc8:	444a      	add	r2, r9
 8001bca:	0400      	lsls	r0, r0, #16
 8001bcc:	0c0b      	lsrs	r3, r1, #16
 8001bce:	0c00      	lsrs	r0, r0, #16
 8001bd0:	0409      	lsls	r1, r1, #16
 8001bd2:	1809      	adds	r1, r1, r0
 8001bd4:	0020      	movs	r0, r4
 8001bd6:	4699      	mov	r9, r3
 8001bd8:	4643      	mov	r3, r8
 8001bda:	4370      	muls	r0, r6
 8001bdc:	435c      	muls	r4, r3
 8001bde:	437e      	muls	r6, r7
 8001be0:	435f      	muls	r7, r3
 8001be2:	0c03      	lsrs	r3, r0, #16
 8001be4:	4698      	mov	r8, r3
 8001be6:	19a4      	adds	r4, r4, r6
 8001be8:	4444      	add	r4, r8
 8001bea:	444a      	add	r2, r9
 8001bec:	9703      	str	r7, [sp, #12]
 8001bee:	42a6      	cmp	r6, r4
 8001bf0:	d904      	bls.n	8001bfc <__aeabi_dmul+0x1d4>
 8001bf2:	2380      	movs	r3, #128	; 0x80
 8001bf4:	025b      	lsls	r3, r3, #9
 8001bf6:	4698      	mov	r8, r3
 8001bf8:	4447      	add	r7, r8
 8001bfa:	9703      	str	r7, [sp, #12]
 8001bfc:	0423      	lsls	r3, r4, #16
 8001bfe:	9e02      	ldr	r6, [sp, #8]
 8001c00:	469a      	mov	sl, r3
 8001c02:	9b05      	ldr	r3, [sp, #20]
 8001c04:	445e      	add	r6, fp
 8001c06:	4698      	mov	r8, r3
 8001c08:	42ae      	cmp	r6, r5
 8001c0a:	41ad      	sbcs	r5, r5
 8001c0c:	1876      	adds	r6, r6, r1
 8001c0e:	428e      	cmp	r6, r1
 8001c10:	4189      	sbcs	r1, r1
 8001c12:	0400      	lsls	r0, r0, #16
 8001c14:	0c00      	lsrs	r0, r0, #16
 8001c16:	4450      	add	r0, sl
 8001c18:	4440      	add	r0, r8
 8001c1a:	426d      	negs	r5, r5
 8001c1c:	1947      	adds	r7, r0, r5
 8001c1e:	46b8      	mov	r8, r7
 8001c20:	4693      	mov	fp, r2
 8001c22:	4249      	negs	r1, r1
 8001c24:	4689      	mov	r9, r1
 8001c26:	44c3      	add	fp, r8
 8001c28:	44d9      	add	r9, fp
 8001c2a:	4298      	cmp	r0, r3
 8001c2c:	4180      	sbcs	r0, r0
 8001c2e:	45a8      	cmp	r8, r5
 8001c30:	41ad      	sbcs	r5, r5
 8001c32:	4593      	cmp	fp, r2
 8001c34:	4192      	sbcs	r2, r2
 8001c36:	4589      	cmp	r9, r1
 8001c38:	4189      	sbcs	r1, r1
 8001c3a:	426d      	negs	r5, r5
 8001c3c:	4240      	negs	r0, r0
 8001c3e:	4328      	orrs	r0, r5
 8001c40:	0c24      	lsrs	r4, r4, #16
 8001c42:	4252      	negs	r2, r2
 8001c44:	4249      	negs	r1, r1
 8001c46:	430a      	orrs	r2, r1
 8001c48:	9b03      	ldr	r3, [sp, #12]
 8001c4a:	1900      	adds	r0, r0, r4
 8001c4c:	1880      	adds	r0, r0, r2
 8001c4e:	18c7      	adds	r7, r0, r3
 8001c50:	464b      	mov	r3, r9
 8001c52:	0ddc      	lsrs	r4, r3, #23
 8001c54:	9b04      	ldr	r3, [sp, #16]
 8001c56:	0275      	lsls	r5, r6, #9
 8001c58:	431d      	orrs	r5, r3
 8001c5a:	1e6a      	subs	r2, r5, #1
 8001c5c:	4195      	sbcs	r5, r2
 8001c5e:	464b      	mov	r3, r9
 8001c60:	0df6      	lsrs	r6, r6, #23
 8001c62:	027f      	lsls	r7, r7, #9
 8001c64:	4335      	orrs	r5, r6
 8001c66:	025a      	lsls	r2, r3, #9
 8001c68:	433c      	orrs	r4, r7
 8001c6a:	4315      	orrs	r5, r2
 8001c6c:	01fb      	lsls	r3, r7, #7
 8001c6e:	d400      	bmi.n	8001c72 <__aeabi_dmul+0x24a>
 8001c70:	e11c      	b.n	8001eac <__aeabi_dmul+0x484>
 8001c72:	2101      	movs	r1, #1
 8001c74:	086a      	lsrs	r2, r5, #1
 8001c76:	400d      	ands	r5, r1
 8001c78:	4315      	orrs	r5, r2
 8001c7a:	07e2      	lsls	r2, r4, #31
 8001c7c:	4315      	orrs	r5, r2
 8001c7e:	0864      	lsrs	r4, r4, #1
 8001c80:	494f      	ldr	r1, [pc, #316]	; (8001dc0 <__aeabi_dmul+0x398>)
 8001c82:	4461      	add	r1, ip
 8001c84:	2900      	cmp	r1, #0
 8001c86:	dc00      	bgt.n	8001c8a <__aeabi_dmul+0x262>
 8001c88:	e0b0      	b.n	8001dec <__aeabi_dmul+0x3c4>
 8001c8a:	076b      	lsls	r3, r5, #29
 8001c8c:	d009      	beq.n	8001ca2 <__aeabi_dmul+0x27a>
 8001c8e:	220f      	movs	r2, #15
 8001c90:	402a      	ands	r2, r5
 8001c92:	2a04      	cmp	r2, #4
 8001c94:	d005      	beq.n	8001ca2 <__aeabi_dmul+0x27a>
 8001c96:	1d2a      	adds	r2, r5, #4
 8001c98:	42aa      	cmp	r2, r5
 8001c9a:	41ad      	sbcs	r5, r5
 8001c9c:	426d      	negs	r5, r5
 8001c9e:	1964      	adds	r4, r4, r5
 8001ca0:	0015      	movs	r5, r2
 8001ca2:	01e3      	lsls	r3, r4, #7
 8001ca4:	d504      	bpl.n	8001cb0 <__aeabi_dmul+0x288>
 8001ca6:	2180      	movs	r1, #128	; 0x80
 8001ca8:	4a46      	ldr	r2, [pc, #280]	; (8001dc4 <__aeabi_dmul+0x39c>)
 8001caa:	00c9      	lsls	r1, r1, #3
 8001cac:	4014      	ands	r4, r2
 8001cae:	4461      	add	r1, ip
 8001cb0:	4a45      	ldr	r2, [pc, #276]	; (8001dc8 <__aeabi_dmul+0x3a0>)
 8001cb2:	4291      	cmp	r1, r2
 8001cb4:	dd00      	ble.n	8001cb8 <__aeabi_dmul+0x290>
 8001cb6:	e726      	b.n	8001b06 <__aeabi_dmul+0xde>
 8001cb8:	0762      	lsls	r2, r4, #29
 8001cba:	08ed      	lsrs	r5, r5, #3
 8001cbc:	0264      	lsls	r4, r4, #9
 8001cbe:	0549      	lsls	r1, r1, #21
 8001cc0:	4315      	orrs	r5, r2
 8001cc2:	0b24      	lsrs	r4, r4, #12
 8001cc4:	0d4a      	lsrs	r2, r1, #21
 8001cc6:	e710      	b.n	8001aea <__aeabi_dmul+0xc2>
 8001cc8:	4652      	mov	r2, sl
 8001cca:	4332      	orrs	r2, r6
 8001ccc:	d100      	bne.n	8001cd0 <__aeabi_dmul+0x2a8>
 8001cce:	e07f      	b.n	8001dd0 <__aeabi_dmul+0x3a8>
 8001cd0:	2e00      	cmp	r6, #0
 8001cd2:	d100      	bne.n	8001cd6 <__aeabi_dmul+0x2ae>
 8001cd4:	e0dc      	b.n	8001e90 <__aeabi_dmul+0x468>
 8001cd6:	0030      	movs	r0, r6
 8001cd8:	f000 fe1e 	bl	8002918 <__clzsi2>
 8001cdc:	0002      	movs	r2, r0
 8001cde:	3a0b      	subs	r2, #11
 8001ce0:	231d      	movs	r3, #29
 8001ce2:	0001      	movs	r1, r0
 8001ce4:	1a9b      	subs	r3, r3, r2
 8001ce6:	4652      	mov	r2, sl
 8001ce8:	3908      	subs	r1, #8
 8001cea:	40da      	lsrs	r2, r3
 8001cec:	408e      	lsls	r6, r1
 8001cee:	4316      	orrs	r6, r2
 8001cf0:	4652      	mov	r2, sl
 8001cf2:	408a      	lsls	r2, r1
 8001cf4:	9b00      	ldr	r3, [sp, #0]
 8001cf6:	4935      	ldr	r1, [pc, #212]	; (8001dcc <__aeabi_dmul+0x3a4>)
 8001cf8:	1a18      	subs	r0, r3, r0
 8001cfa:	0003      	movs	r3, r0
 8001cfc:	468c      	mov	ip, r1
 8001cfe:	4463      	add	r3, ip
 8001d00:	2000      	movs	r0, #0
 8001d02:	9300      	str	r3, [sp, #0]
 8001d04:	e6d3      	b.n	8001aae <__aeabi_dmul+0x86>
 8001d06:	0025      	movs	r5, r4
 8001d08:	4305      	orrs	r5, r0
 8001d0a:	d04a      	beq.n	8001da2 <__aeabi_dmul+0x37a>
 8001d0c:	2c00      	cmp	r4, #0
 8001d0e:	d100      	bne.n	8001d12 <__aeabi_dmul+0x2ea>
 8001d10:	e0b0      	b.n	8001e74 <__aeabi_dmul+0x44c>
 8001d12:	0020      	movs	r0, r4
 8001d14:	f000 fe00 	bl	8002918 <__clzsi2>
 8001d18:	0001      	movs	r1, r0
 8001d1a:	0002      	movs	r2, r0
 8001d1c:	390b      	subs	r1, #11
 8001d1e:	231d      	movs	r3, #29
 8001d20:	0010      	movs	r0, r2
 8001d22:	1a5b      	subs	r3, r3, r1
 8001d24:	0031      	movs	r1, r6
 8001d26:	0035      	movs	r5, r6
 8001d28:	3808      	subs	r0, #8
 8001d2a:	4084      	lsls	r4, r0
 8001d2c:	40d9      	lsrs	r1, r3
 8001d2e:	4085      	lsls	r5, r0
 8001d30:	430c      	orrs	r4, r1
 8001d32:	4826      	ldr	r0, [pc, #152]	; (8001dcc <__aeabi_dmul+0x3a4>)
 8001d34:	1a83      	subs	r3, r0, r2
 8001d36:	9300      	str	r3, [sp, #0]
 8001d38:	2300      	movs	r3, #0
 8001d3a:	4699      	mov	r9, r3
 8001d3c:	469b      	mov	fp, r3
 8001d3e:	e697      	b.n	8001a70 <__aeabi_dmul+0x48>
 8001d40:	0005      	movs	r5, r0
 8001d42:	4325      	orrs	r5, r4
 8001d44:	d126      	bne.n	8001d94 <__aeabi_dmul+0x36c>
 8001d46:	2208      	movs	r2, #8
 8001d48:	9300      	str	r3, [sp, #0]
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	2400      	movs	r4, #0
 8001d4e:	4691      	mov	r9, r2
 8001d50:	469b      	mov	fp, r3
 8001d52:	e68d      	b.n	8001a70 <__aeabi_dmul+0x48>
 8001d54:	4652      	mov	r2, sl
 8001d56:	9b00      	ldr	r3, [sp, #0]
 8001d58:	4332      	orrs	r2, r6
 8001d5a:	d110      	bne.n	8001d7e <__aeabi_dmul+0x356>
 8001d5c:	4915      	ldr	r1, [pc, #84]	; (8001db4 <__aeabi_dmul+0x38c>)
 8001d5e:	2600      	movs	r6, #0
 8001d60:	468c      	mov	ip, r1
 8001d62:	4463      	add	r3, ip
 8001d64:	4649      	mov	r1, r9
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	2302      	movs	r3, #2
 8001d6a:	4319      	orrs	r1, r3
 8001d6c:	4689      	mov	r9, r1
 8001d6e:	2002      	movs	r0, #2
 8001d70:	e69d      	b.n	8001aae <__aeabi_dmul+0x86>
 8001d72:	465b      	mov	r3, fp
 8001d74:	9701      	str	r7, [sp, #4]
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d000      	beq.n	8001d7c <__aeabi_dmul+0x354>
 8001d7a:	e6ad      	b.n	8001ad8 <__aeabi_dmul+0xb0>
 8001d7c:	e6c3      	b.n	8001b06 <__aeabi_dmul+0xde>
 8001d7e:	4a0d      	ldr	r2, [pc, #52]	; (8001db4 <__aeabi_dmul+0x38c>)
 8001d80:	2003      	movs	r0, #3
 8001d82:	4694      	mov	ip, r2
 8001d84:	4463      	add	r3, ip
 8001d86:	464a      	mov	r2, r9
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	431a      	orrs	r2, r3
 8001d8e:	4691      	mov	r9, r2
 8001d90:	4652      	mov	r2, sl
 8001d92:	e68c      	b.n	8001aae <__aeabi_dmul+0x86>
 8001d94:	220c      	movs	r2, #12
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	2303      	movs	r3, #3
 8001d9a:	0005      	movs	r5, r0
 8001d9c:	4691      	mov	r9, r2
 8001d9e:	469b      	mov	fp, r3
 8001da0:	e666      	b.n	8001a70 <__aeabi_dmul+0x48>
 8001da2:	2304      	movs	r3, #4
 8001da4:	4699      	mov	r9, r3
 8001da6:	2300      	movs	r3, #0
 8001da8:	9300      	str	r3, [sp, #0]
 8001daa:	3301      	adds	r3, #1
 8001dac:	2400      	movs	r4, #0
 8001dae:	469b      	mov	fp, r3
 8001db0:	e65e      	b.n	8001a70 <__aeabi_dmul+0x48>
 8001db2:	46c0      	nop			; (mov r8, r8)
 8001db4:	000007ff 	.word	0x000007ff
 8001db8:	fffffc01 	.word	0xfffffc01
 8001dbc:	08013708 	.word	0x08013708
 8001dc0:	000003ff 	.word	0x000003ff
 8001dc4:	feffffff 	.word	0xfeffffff
 8001dc8:	000007fe 	.word	0x000007fe
 8001dcc:	fffffc0d 	.word	0xfffffc0d
 8001dd0:	4649      	mov	r1, r9
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	4319      	orrs	r1, r3
 8001dd6:	4689      	mov	r9, r1
 8001dd8:	2600      	movs	r6, #0
 8001dda:	2001      	movs	r0, #1
 8001ddc:	e667      	b.n	8001aae <__aeabi_dmul+0x86>
 8001dde:	2300      	movs	r3, #0
 8001de0:	2480      	movs	r4, #128	; 0x80
 8001de2:	2500      	movs	r5, #0
 8001de4:	4a43      	ldr	r2, [pc, #268]	; (8001ef4 <__aeabi_dmul+0x4cc>)
 8001de6:	9301      	str	r3, [sp, #4]
 8001de8:	0324      	lsls	r4, r4, #12
 8001dea:	e67e      	b.n	8001aea <__aeabi_dmul+0xc2>
 8001dec:	2001      	movs	r0, #1
 8001dee:	1a40      	subs	r0, r0, r1
 8001df0:	2838      	cmp	r0, #56	; 0x38
 8001df2:	dd00      	ble.n	8001df6 <__aeabi_dmul+0x3ce>
 8001df4:	e676      	b.n	8001ae4 <__aeabi_dmul+0xbc>
 8001df6:	281f      	cmp	r0, #31
 8001df8:	dd5b      	ble.n	8001eb2 <__aeabi_dmul+0x48a>
 8001dfa:	221f      	movs	r2, #31
 8001dfc:	0023      	movs	r3, r4
 8001dfe:	4252      	negs	r2, r2
 8001e00:	1a51      	subs	r1, r2, r1
 8001e02:	40cb      	lsrs	r3, r1
 8001e04:	0019      	movs	r1, r3
 8001e06:	2820      	cmp	r0, #32
 8001e08:	d003      	beq.n	8001e12 <__aeabi_dmul+0x3ea>
 8001e0a:	4a3b      	ldr	r2, [pc, #236]	; (8001ef8 <__aeabi_dmul+0x4d0>)
 8001e0c:	4462      	add	r2, ip
 8001e0e:	4094      	lsls	r4, r2
 8001e10:	4325      	orrs	r5, r4
 8001e12:	1e6a      	subs	r2, r5, #1
 8001e14:	4195      	sbcs	r5, r2
 8001e16:	002a      	movs	r2, r5
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	2107      	movs	r1, #7
 8001e1c:	000d      	movs	r5, r1
 8001e1e:	2400      	movs	r4, #0
 8001e20:	4015      	ands	r5, r2
 8001e22:	4211      	tst	r1, r2
 8001e24:	d05b      	beq.n	8001ede <__aeabi_dmul+0x4b6>
 8001e26:	210f      	movs	r1, #15
 8001e28:	2400      	movs	r4, #0
 8001e2a:	4011      	ands	r1, r2
 8001e2c:	2904      	cmp	r1, #4
 8001e2e:	d053      	beq.n	8001ed8 <__aeabi_dmul+0x4b0>
 8001e30:	1d11      	adds	r1, r2, #4
 8001e32:	4291      	cmp	r1, r2
 8001e34:	4192      	sbcs	r2, r2
 8001e36:	4252      	negs	r2, r2
 8001e38:	18a4      	adds	r4, r4, r2
 8001e3a:	000a      	movs	r2, r1
 8001e3c:	0223      	lsls	r3, r4, #8
 8001e3e:	d54b      	bpl.n	8001ed8 <__aeabi_dmul+0x4b0>
 8001e40:	2201      	movs	r2, #1
 8001e42:	2400      	movs	r4, #0
 8001e44:	2500      	movs	r5, #0
 8001e46:	e650      	b.n	8001aea <__aeabi_dmul+0xc2>
 8001e48:	2380      	movs	r3, #128	; 0x80
 8001e4a:	031b      	lsls	r3, r3, #12
 8001e4c:	421c      	tst	r4, r3
 8001e4e:	d009      	beq.n	8001e64 <__aeabi_dmul+0x43c>
 8001e50:	421e      	tst	r6, r3
 8001e52:	d107      	bne.n	8001e64 <__aeabi_dmul+0x43c>
 8001e54:	4333      	orrs	r3, r6
 8001e56:	031c      	lsls	r4, r3, #12
 8001e58:	4643      	mov	r3, r8
 8001e5a:	0015      	movs	r5, r2
 8001e5c:	0b24      	lsrs	r4, r4, #12
 8001e5e:	4a25      	ldr	r2, [pc, #148]	; (8001ef4 <__aeabi_dmul+0x4cc>)
 8001e60:	9301      	str	r3, [sp, #4]
 8001e62:	e642      	b.n	8001aea <__aeabi_dmul+0xc2>
 8001e64:	2280      	movs	r2, #128	; 0x80
 8001e66:	0312      	lsls	r2, r2, #12
 8001e68:	4314      	orrs	r4, r2
 8001e6a:	0324      	lsls	r4, r4, #12
 8001e6c:	4a21      	ldr	r2, [pc, #132]	; (8001ef4 <__aeabi_dmul+0x4cc>)
 8001e6e:	0b24      	lsrs	r4, r4, #12
 8001e70:	9701      	str	r7, [sp, #4]
 8001e72:	e63a      	b.n	8001aea <__aeabi_dmul+0xc2>
 8001e74:	f000 fd50 	bl	8002918 <__clzsi2>
 8001e78:	0001      	movs	r1, r0
 8001e7a:	0002      	movs	r2, r0
 8001e7c:	3115      	adds	r1, #21
 8001e7e:	3220      	adds	r2, #32
 8001e80:	291c      	cmp	r1, #28
 8001e82:	dc00      	bgt.n	8001e86 <__aeabi_dmul+0x45e>
 8001e84:	e74b      	b.n	8001d1e <__aeabi_dmul+0x2f6>
 8001e86:	0034      	movs	r4, r6
 8001e88:	3808      	subs	r0, #8
 8001e8a:	2500      	movs	r5, #0
 8001e8c:	4084      	lsls	r4, r0
 8001e8e:	e750      	b.n	8001d32 <__aeabi_dmul+0x30a>
 8001e90:	f000 fd42 	bl	8002918 <__clzsi2>
 8001e94:	0003      	movs	r3, r0
 8001e96:	001a      	movs	r2, r3
 8001e98:	3215      	adds	r2, #21
 8001e9a:	3020      	adds	r0, #32
 8001e9c:	2a1c      	cmp	r2, #28
 8001e9e:	dc00      	bgt.n	8001ea2 <__aeabi_dmul+0x47a>
 8001ea0:	e71e      	b.n	8001ce0 <__aeabi_dmul+0x2b8>
 8001ea2:	4656      	mov	r6, sl
 8001ea4:	3b08      	subs	r3, #8
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	409e      	lsls	r6, r3
 8001eaa:	e723      	b.n	8001cf4 <__aeabi_dmul+0x2cc>
 8001eac:	9b00      	ldr	r3, [sp, #0]
 8001eae:	469c      	mov	ip, r3
 8001eb0:	e6e6      	b.n	8001c80 <__aeabi_dmul+0x258>
 8001eb2:	4912      	ldr	r1, [pc, #72]	; (8001efc <__aeabi_dmul+0x4d4>)
 8001eb4:	0022      	movs	r2, r4
 8001eb6:	4461      	add	r1, ip
 8001eb8:	002e      	movs	r6, r5
 8001eba:	408d      	lsls	r5, r1
 8001ebc:	408a      	lsls	r2, r1
 8001ebe:	40c6      	lsrs	r6, r0
 8001ec0:	1e69      	subs	r1, r5, #1
 8001ec2:	418d      	sbcs	r5, r1
 8001ec4:	4332      	orrs	r2, r6
 8001ec6:	432a      	orrs	r2, r5
 8001ec8:	40c4      	lsrs	r4, r0
 8001eca:	0753      	lsls	r3, r2, #29
 8001ecc:	d0b6      	beq.n	8001e3c <__aeabi_dmul+0x414>
 8001ece:	210f      	movs	r1, #15
 8001ed0:	4011      	ands	r1, r2
 8001ed2:	2904      	cmp	r1, #4
 8001ed4:	d1ac      	bne.n	8001e30 <__aeabi_dmul+0x408>
 8001ed6:	e7b1      	b.n	8001e3c <__aeabi_dmul+0x414>
 8001ed8:	0765      	lsls	r5, r4, #29
 8001eda:	0264      	lsls	r4, r4, #9
 8001edc:	0b24      	lsrs	r4, r4, #12
 8001ede:	08d2      	lsrs	r2, r2, #3
 8001ee0:	4315      	orrs	r5, r2
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	e601      	b.n	8001aea <__aeabi_dmul+0xc2>
 8001ee6:	2280      	movs	r2, #128	; 0x80
 8001ee8:	0312      	lsls	r2, r2, #12
 8001eea:	4314      	orrs	r4, r2
 8001eec:	0324      	lsls	r4, r4, #12
 8001eee:	4a01      	ldr	r2, [pc, #4]	; (8001ef4 <__aeabi_dmul+0x4cc>)
 8001ef0:	0b24      	lsrs	r4, r4, #12
 8001ef2:	e5fa      	b.n	8001aea <__aeabi_dmul+0xc2>
 8001ef4:	000007ff 	.word	0x000007ff
 8001ef8:	0000043e 	.word	0x0000043e
 8001efc:	0000041e 	.word	0x0000041e

08001f00 <__aeabi_dsub>:
 8001f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f02:	4657      	mov	r7, sl
 8001f04:	464e      	mov	r6, r9
 8001f06:	4645      	mov	r5, r8
 8001f08:	46de      	mov	lr, fp
 8001f0a:	b5e0      	push	{r5, r6, r7, lr}
 8001f0c:	001e      	movs	r6, r3
 8001f0e:	0017      	movs	r7, r2
 8001f10:	004a      	lsls	r2, r1, #1
 8001f12:	030b      	lsls	r3, r1, #12
 8001f14:	0d52      	lsrs	r2, r2, #21
 8001f16:	0a5b      	lsrs	r3, r3, #9
 8001f18:	4690      	mov	r8, r2
 8001f1a:	0f42      	lsrs	r2, r0, #29
 8001f1c:	431a      	orrs	r2, r3
 8001f1e:	0fcd      	lsrs	r5, r1, #31
 8001f20:	4ccd      	ldr	r4, [pc, #820]	; (8002258 <__aeabi_dsub+0x358>)
 8001f22:	0331      	lsls	r1, r6, #12
 8001f24:	00c3      	lsls	r3, r0, #3
 8001f26:	4694      	mov	ip, r2
 8001f28:	0070      	lsls	r0, r6, #1
 8001f2a:	0f7a      	lsrs	r2, r7, #29
 8001f2c:	0a49      	lsrs	r1, r1, #9
 8001f2e:	00ff      	lsls	r7, r7, #3
 8001f30:	469a      	mov	sl, r3
 8001f32:	46b9      	mov	r9, r7
 8001f34:	0d40      	lsrs	r0, r0, #21
 8001f36:	0ff6      	lsrs	r6, r6, #31
 8001f38:	4311      	orrs	r1, r2
 8001f3a:	42a0      	cmp	r0, r4
 8001f3c:	d100      	bne.n	8001f40 <__aeabi_dsub+0x40>
 8001f3e:	e0b1      	b.n	80020a4 <__aeabi_dsub+0x1a4>
 8001f40:	2201      	movs	r2, #1
 8001f42:	4056      	eors	r6, r2
 8001f44:	46b3      	mov	fp, r6
 8001f46:	42b5      	cmp	r5, r6
 8001f48:	d100      	bne.n	8001f4c <__aeabi_dsub+0x4c>
 8001f4a:	e088      	b.n	800205e <__aeabi_dsub+0x15e>
 8001f4c:	4642      	mov	r2, r8
 8001f4e:	1a12      	subs	r2, r2, r0
 8001f50:	2a00      	cmp	r2, #0
 8001f52:	dc00      	bgt.n	8001f56 <__aeabi_dsub+0x56>
 8001f54:	e0ae      	b.n	80020b4 <__aeabi_dsub+0x1b4>
 8001f56:	2800      	cmp	r0, #0
 8001f58:	d100      	bne.n	8001f5c <__aeabi_dsub+0x5c>
 8001f5a:	e0c1      	b.n	80020e0 <__aeabi_dsub+0x1e0>
 8001f5c:	48be      	ldr	r0, [pc, #760]	; (8002258 <__aeabi_dsub+0x358>)
 8001f5e:	4580      	cmp	r8, r0
 8001f60:	d100      	bne.n	8001f64 <__aeabi_dsub+0x64>
 8001f62:	e151      	b.n	8002208 <__aeabi_dsub+0x308>
 8001f64:	2080      	movs	r0, #128	; 0x80
 8001f66:	0400      	lsls	r0, r0, #16
 8001f68:	4301      	orrs	r1, r0
 8001f6a:	2a38      	cmp	r2, #56	; 0x38
 8001f6c:	dd00      	ble.n	8001f70 <__aeabi_dsub+0x70>
 8001f6e:	e17b      	b.n	8002268 <__aeabi_dsub+0x368>
 8001f70:	2a1f      	cmp	r2, #31
 8001f72:	dd00      	ble.n	8001f76 <__aeabi_dsub+0x76>
 8001f74:	e1ee      	b.n	8002354 <__aeabi_dsub+0x454>
 8001f76:	2020      	movs	r0, #32
 8001f78:	003e      	movs	r6, r7
 8001f7a:	1a80      	subs	r0, r0, r2
 8001f7c:	000c      	movs	r4, r1
 8001f7e:	40d6      	lsrs	r6, r2
 8001f80:	40d1      	lsrs	r1, r2
 8001f82:	4087      	lsls	r7, r0
 8001f84:	4662      	mov	r2, ip
 8001f86:	4084      	lsls	r4, r0
 8001f88:	1a52      	subs	r2, r2, r1
 8001f8a:	1e78      	subs	r0, r7, #1
 8001f8c:	4187      	sbcs	r7, r0
 8001f8e:	4694      	mov	ip, r2
 8001f90:	4334      	orrs	r4, r6
 8001f92:	4327      	orrs	r7, r4
 8001f94:	1bdc      	subs	r4, r3, r7
 8001f96:	42a3      	cmp	r3, r4
 8001f98:	419b      	sbcs	r3, r3
 8001f9a:	4662      	mov	r2, ip
 8001f9c:	425b      	negs	r3, r3
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	4699      	mov	r9, r3
 8001fa2:	464b      	mov	r3, r9
 8001fa4:	021b      	lsls	r3, r3, #8
 8001fa6:	d400      	bmi.n	8001faa <__aeabi_dsub+0xaa>
 8001fa8:	e118      	b.n	80021dc <__aeabi_dsub+0x2dc>
 8001faa:	464b      	mov	r3, r9
 8001fac:	0258      	lsls	r0, r3, #9
 8001fae:	0a43      	lsrs	r3, r0, #9
 8001fb0:	4699      	mov	r9, r3
 8001fb2:	464b      	mov	r3, r9
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d100      	bne.n	8001fba <__aeabi_dsub+0xba>
 8001fb8:	e137      	b.n	800222a <__aeabi_dsub+0x32a>
 8001fba:	4648      	mov	r0, r9
 8001fbc:	f000 fcac 	bl	8002918 <__clzsi2>
 8001fc0:	0001      	movs	r1, r0
 8001fc2:	3908      	subs	r1, #8
 8001fc4:	2320      	movs	r3, #32
 8001fc6:	0022      	movs	r2, r4
 8001fc8:	4648      	mov	r0, r9
 8001fca:	1a5b      	subs	r3, r3, r1
 8001fcc:	40da      	lsrs	r2, r3
 8001fce:	4088      	lsls	r0, r1
 8001fd0:	408c      	lsls	r4, r1
 8001fd2:	4643      	mov	r3, r8
 8001fd4:	4310      	orrs	r0, r2
 8001fd6:	4588      	cmp	r8, r1
 8001fd8:	dd00      	ble.n	8001fdc <__aeabi_dsub+0xdc>
 8001fda:	e136      	b.n	800224a <__aeabi_dsub+0x34a>
 8001fdc:	1ac9      	subs	r1, r1, r3
 8001fde:	1c4b      	adds	r3, r1, #1
 8001fe0:	2b1f      	cmp	r3, #31
 8001fe2:	dd00      	ble.n	8001fe6 <__aeabi_dsub+0xe6>
 8001fe4:	e0ea      	b.n	80021bc <__aeabi_dsub+0x2bc>
 8001fe6:	2220      	movs	r2, #32
 8001fe8:	0026      	movs	r6, r4
 8001fea:	1ad2      	subs	r2, r2, r3
 8001fec:	0001      	movs	r1, r0
 8001fee:	4094      	lsls	r4, r2
 8001ff0:	40de      	lsrs	r6, r3
 8001ff2:	40d8      	lsrs	r0, r3
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	4091      	lsls	r1, r2
 8001ff8:	1e62      	subs	r2, r4, #1
 8001ffa:	4194      	sbcs	r4, r2
 8001ffc:	4681      	mov	r9, r0
 8001ffe:	4698      	mov	r8, r3
 8002000:	4331      	orrs	r1, r6
 8002002:	430c      	orrs	r4, r1
 8002004:	0763      	lsls	r3, r4, #29
 8002006:	d009      	beq.n	800201c <__aeabi_dsub+0x11c>
 8002008:	230f      	movs	r3, #15
 800200a:	4023      	ands	r3, r4
 800200c:	2b04      	cmp	r3, #4
 800200e:	d005      	beq.n	800201c <__aeabi_dsub+0x11c>
 8002010:	1d23      	adds	r3, r4, #4
 8002012:	42a3      	cmp	r3, r4
 8002014:	41a4      	sbcs	r4, r4
 8002016:	4264      	negs	r4, r4
 8002018:	44a1      	add	r9, r4
 800201a:	001c      	movs	r4, r3
 800201c:	464b      	mov	r3, r9
 800201e:	021b      	lsls	r3, r3, #8
 8002020:	d400      	bmi.n	8002024 <__aeabi_dsub+0x124>
 8002022:	e0de      	b.n	80021e2 <__aeabi_dsub+0x2e2>
 8002024:	4641      	mov	r1, r8
 8002026:	4b8c      	ldr	r3, [pc, #560]	; (8002258 <__aeabi_dsub+0x358>)
 8002028:	3101      	adds	r1, #1
 800202a:	4299      	cmp	r1, r3
 800202c:	d100      	bne.n	8002030 <__aeabi_dsub+0x130>
 800202e:	e0e7      	b.n	8002200 <__aeabi_dsub+0x300>
 8002030:	464b      	mov	r3, r9
 8002032:	488a      	ldr	r0, [pc, #552]	; (800225c <__aeabi_dsub+0x35c>)
 8002034:	08e4      	lsrs	r4, r4, #3
 8002036:	4003      	ands	r3, r0
 8002038:	0018      	movs	r0, r3
 800203a:	0549      	lsls	r1, r1, #21
 800203c:	075b      	lsls	r3, r3, #29
 800203e:	0240      	lsls	r0, r0, #9
 8002040:	4323      	orrs	r3, r4
 8002042:	0d4a      	lsrs	r2, r1, #21
 8002044:	0b04      	lsrs	r4, r0, #12
 8002046:	0512      	lsls	r2, r2, #20
 8002048:	07ed      	lsls	r5, r5, #31
 800204a:	4322      	orrs	r2, r4
 800204c:	432a      	orrs	r2, r5
 800204e:	0018      	movs	r0, r3
 8002050:	0011      	movs	r1, r2
 8002052:	bcf0      	pop	{r4, r5, r6, r7}
 8002054:	46bb      	mov	fp, r7
 8002056:	46b2      	mov	sl, r6
 8002058:	46a9      	mov	r9, r5
 800205a:	46a0      	mov	r8, r4
 800205c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800205e:	4642      	mov	r2, r8
 8002060:	1a12      	subs	r2, r2, r0
 8002062:	2a00      	cmp	r2, #0
 8002064:	dd52      	ble.n	800210c <__aeabi_dsub+0x20c>
 8002066:	2800      	cmp	r0, #0
 8002068:	d100      	bne.n	800206c <__aeabi_dsub+0x16c>
 800206a:	e09c      	b.n	80021a6 <__aeabi_dsub+0x2a6>
 800206c:	45a0      	cmp	r8, r4
 800206e:	d100      	bne.n	8002072 <__aeabi_dsub+0x172>
 8002070:	e0ca      	b.n	8002208 <__aeabi_dsub+0x308>
 8002072:	2080      	movs	r0, #128	; 0x80
 8002074:	0400      	lsls	r0, r0, #16
 8002076:	4301      	orrs	r1, r0
 8002078:	2a38      	cmp	r2, #56	; 0x38
 800207a:	dd00      	ble.n	800207e <__aeabi_dsub+0x17e>
 800207c:	e149      	b.n	8002312 <__aeabi_dsub+0x412>
 800207e:	2a1f      	cmp	r2, #31
 8002080:	dc00      	bgt.n	8002084 <__aeabi_dsub+0x184>
 8002082:	e197      	b.n	80023b4 <__aeabi_dsub+0x4b4>
 8002084:	0010      	movs	r0, r2
 8002086:	000e      	movs	r6, r1
 8002088:	3820      	subs	r0, #32
 800208a:	40c6      	lsrs	r6, r0
 800208c:	2a20      	cmp	r2, #32
 800208e:	d004      	beq.n	800209a <__aeabi_dsub+0x19a>
 8002090:	2040      	movs	r0, #64	; 0x40
 8002092:	1a82      	subs	r2, r0, r2
 8002094:	4091      	lsls	r1, r2
 8002096:	430f      	orrs	r7, r1
 8002098:	46b9      	mov	r9, r7
 800209a:	464c      	mov	r4, r9
 800209c:	1e62      	subs	r2, r4, #1
 800209e:	4194      	sbcs	r4, r2
 80020a0:	4334      	orrs	r4, r6
 80020a2:	e13a      	b.n	800231a <__aeabi_dsub+0x41a>
 80020a4:	000a      	movs	r2, r1
 80020a6:	433a      	orrs	r2, r7
 80020a8:	d028      	beq.n	80020fc <__aeabi_dsub+0x1fc>
 80020aa:	46b3      	mov	fp, r6
 80020ac:	42b5      	cmp	r5, r6
 80020ae:	d02b      	beq.n	8002108 <__aeabi_dsub+0x208>
 80020b0:	4a6b      	ldr	r2, [pc, #428]	; (8002260 <__aeabi_dsub+0x360>)
 80020b2:	4442      	add	r2, r8
 80020b4:	2a00      	cmp	r2, #0
 80020b6:	d05d      	beq.n	8002174 <__aeabi_dsub+0x274>
 80020b8:	4642      	mov	r2, r8
 80020ba:	4644      	mov	r4, r8
 80020bc:	1a82      	subs	r2, r0, r2
 80020be:	2c00      	cmp	r4, #0
 80020c0:	d000      	beq.n	80020c4 <__aeabi_dsub+0x1c4>
 80020c2:	e0f5      	b.n	80022b0 <__aeabi_dsub+0x3b0>
 80020c4:	4665      	mov	r5, ip
 80020c6:	431d      	orrs	r5, r3
 80020c8:	d100      	bne.n	80020cc <__aeabi_dsub+0x1cc>
 80020ca:	e19c      	b.n	8002406 <__aeabi_dsub+0x506>
 80020cc:	1e55      	subs	r5, r2, #1
 80020ce:	2a01      	cmp	r2, #1
 80020d0:	d100      	bne.n	80020d4 <__aeabi_dsub+0x1d4>
 80020d2:	e1fb      	b.n	80024cc <__aeabi_dsub+0x5cc>
 80020d4:	4c60      	ldr	r4, [pc, #384]	; (8002258 <__aeabi_dsub+0x358>)
 80020d6:	42a2      	cmp	r2, r4
 80020d8:	d100      	bne.n	80020dc <__aeabi_dsub+0x1dc>
 80020da:	e1bd      	b.n	8002458 <__aeabi_dsub+0x558>
 80020dc:	002a      	movs	r2, r5
 80020de:	e0f0      	b.n	80022c2 <__aeabi_dsub+0x3c2>
 80020e0:	0008      	movs	r0, r1
 80020e2:	4338      	orrs	r0, r7
 80020e4:	d100      	bne.n	80020e8 <__aeabi_dsub+0x1e8>
 80020e6:	e0c3      	b.n	8002270 <__aeabi_dsub+0x370>
 80020e8:	1e50      	subs	r0, r2, #1
 80020ea:	2a01      	cmp	r2, #1
 80020ec:	d100      	bne.n	80020f0 <__aeabi_dsub+0x1f0>
 80020ee:	e1a8      	b.n	8002442 <__aeabi_dsub+0x542>
 80020f0:	4c59      	ldr	r4, [pc, #356]	; (8002258 <__aeabi_dsub+0x358>)
 80020f2:	42a2      	cmp	r2, r4
 80020f4:	d100      	bne.n	80020f8 <__aeabi_dsub+0x1f8>
 80020f6:	e087      	b.n	8002208 <__aeabi_dsub+0x308>
 80020f8:	0002      	movs	r2, r0
 80020fa:	e736      	b.n	8001f6a <__aeabi_dsub+0x6a>
 80020fc:	2201      	movs	r2, #1
 80020fe:	4056      	eors	r6, r2
 8002100:	46b3      	mov	fp, r6
 8002102:	42b5      	cmp	r5, r6
 8002104:	d000      	beq.n	8002108 <__aeabi_dsub+0x208>
 8002106:	e721      	b.n	8001f4c <__aeabi_dsub+0x4c>
 8002108:	4a55      	ldr	r2, [pc, #340]	; (8002260 <__aeabi_dsub+0x360>)
 800210a:	4442      	add	r2, r8
 800210c:	2a00      	cmp	r2, #0
 800210e:	d100      	bne.n	8002112 <__aeabi_dsub+0x212>
 8002110:	e0b5      	b.n	800227e <__aeabi_dsub+0x37e>
 8002112:	4642      	mov	r2, r8
 8002114:	4644      	mov	r4, r8
 8002116:	1a82      	subs	r2, r0, r2
 8002118:	2c00      	cmp	r4, #0
 800211a:	d100      	bne.n	800211e <__aeabi_dsub+0x21e>
 800211c:	e138      	b.n	8002390 <__aeabi_dsub+0x490>
 800211e:	4e4e      	ldr	r6, [pc, #312]	; (8002258 <__aeabi_dsub+0x358>)
 8002120:	42b0      	cmp	r0, r6
 8002122:	d100      	bne.n	8002126 <__aeabi_dsub+0x226>
 8002124:	e1de      	b.n	80024e4 <__aeabi_dsub+0x5e4>
 8002126:	2680      	movs	r6, #128	; 0x80
 8002128:	4664      	mov	r4, ip
 800212a:	0436      	lsls	r6, r6, #16
 800212c:	4334      	orrs	r4, r6
 800212e:	46a4      	mov	ip, r4
 8002130:	2a38      	cmp	r2, #56	; 0x38
 8002132:	dd00      	ble.n	8002136 <__aeabi_dsub+0x236>
 8002134:	e196      	b.n	8002464 <__aeabi_dsub+0x564>
 8002136:	2a1f      	cmp	r2, #31
 8002138:	dd00      	ble.n	800213c <__aeabi_dsub+0x23c>
 800213a:	e224      	b.n	8002586 <__aeabi_dsub+0x686>
 800213c:	2620      	movs	r6, #32
 800213e:	1ab4      	subs	r4, r6, r2
 8002140:	46a2      	mov	sl, r4
 8002142:	4664      	mov	r4, ip
 8002144:	4656      	mov	r6, sl
 8002146:	40b4      	lsls	r4, r6
 8002148:	46a1      	mov	r9, r4
 800214a:	001c      	movs	r4, r3
 800214c:	464e      	mov	r6, r9
 800214e:	40d4      	lsrs	r4, r2
 8002150:	4326      	orrs	r6, r4
 8002152:	0034      	movs	r4, r6
 8002154:	4656      	mov	r6, sl
 8002156:	40b3      	lsls	r3, r6
 8002158:	1e5e      	subs	r6, r3, #1
 800215a:	41b3      	sbcs	r3, r6
 800215c:	431c      	orrs	r4, r3
 800215e:	4663      	mov	r3, ip
 8002160:	40d3      	lsrs	r3, r2
 8002162:	18c9      	adds	r1, r1, r3
 8002164:	19e4      	adds	r4, r4, r7
 8002166:	42bc      	cmp	r4, r7
 8002168:	41bf      	sbcs	r7, r7
 800216a:	427f      	negs	r7, r7
 800216c:	46b9      	mov	r9, r7
 800216e:	4680      	mov	r8, r0
 8002170:	4489      	add	r9, r1
 8002172:	e0d8      	b.n	8002326 <__aeabi_dsub+0x426>
 8002174:	4640      	mov	r0, r8
 8002176:	4c3b      	ldr	r4, [pc, #236]	; (8002264 <__aeabi_dsub+0x364>)
 8002178:	3001      	adds	r0, #1
 800217a:	4220      	tst	r0, r4
 800217c:	d000      	beq.n	8002180 <__aeabi_dsub+0x280>
 800217e:	e0b4      	b.n	80022ea <__aeabi_dsub+0x3ea>
 8002180:	4640      	mov	r0, r8
 8002182:	2800      	cmp	r0, #0
 8002184:	d000      	beq.n	8002188 <__aeabi_dsub+0x288>
 8002186:	e144      	b.n	8002412 <__aeabi_dsub+0x512>
 8002188:	4660      	mov	r0, ip
 800218a:	4318      	orrs	r0, r3
 800218c:	d100      	bne.n	8002190 <__aeabi_dsub+0x290>
 800218e:	e190      	b.n	80024b2 <__aeabi_dsub+0x5b2>
 8002190:	0008      	movs	r0, r1
 8002192:	4338      	orrs	r0, r7
 8002194:	d000      	beq.n	8002198 <__aeabi_dsub+0x298>
 8002196:	e1aa      	b.n	80024ee <__aeabi_dsub+0x5ee>
 8002198:	4661      	mov	r1, ip
 800219a:	08db      	lsrs	r3, r3, #3
 800219c:	0749      	lsls	r1, r1, #29
 800219e:	430b      	orrs	r3, r1
 80021a0:	4661      	mov	r1, ip
 80021a2:	08cc      	lsrs	r4, r1, #3
 80021a4:	e027      	b.n	80021f6 <__aeabi_dsub+0x2f6>
 80021a6:	0008      	movs	r0, r1
 80021a8:	4338      	orrs	r0, r7
 80021aa:	d061      	beq.n	8002270 <__aeabi_dsub+0x370>
 80021ac:	1e50      	subs	r0, r2, #1
 80021ae:	2a01      	cmp	r2, #1
 80021b0:	d100      	bne.n	80021b4 <__aeabi_dsub+0x2b4>
 80021b2:	e139      	b.n	8002428 <__aeabi_dsub+0x528>
 80021b4:	42a2      	cmp	r2, r4
 80021b6:	d027      	beq.n	8002208 <__aeabi_dsub+0x308>
 80021b8:	0002      	movs	r2, r0
 80021ba:	e75d      	b.n	8002078 <__aeabi_dsub+0x178>
 80021bc:	0002      	movs	r2, r0
 80021be:	391f      	subs	r1, #31
 80021c0:	40ca      	lsrs	r2, r1
 80021c2:	0011      	movs	r1, r2
 80021c4:	2b20      	cmp	r3, #32
 80021c6:	d003      	beq.n	80021d0 <__aeabi_dsub+0x2d0>
 80021c8:	2240      	movs	r2, #64	; 0x40
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	4098      	lsls	r0, r3
 80021ce:	4304      	orrs	r4, r0
 80021d0:	1e63      	subs	r3, r4, #1
 80021d2:	419c      	sbcs	r4, r3
 80021d4:	2300      	movs	r3, #0
 80021d6:	4699      	mov	r9, r3
 80021d8:	4698      	mov	r8, r3
 80021da:	430c      	orrs	r4, r1
 80021dc:	0763      	lsls	r3, r4, #29
 80021de:	d000      	beq.n	80021e2 <__aeabi_dsub+0x2e2>
 80021e0:	e712      	b.n	8002008 <__aeabi_dsub+0x108>
 80021e2:	464b      	mov	r3, r9
 80021e4:	464a      	mov	r2, r9
 80021e6:	08e4      	lsrs	r4, r4, #3
 80021e8:	075b      	lsls	r3, r3, #29
 80021ea:	4323      	orrs	r3, r4
 80021ec:	08d4      	lsrs	r4, r2, #3
 80021ee:	4642      	mov	r2, r8
 80021f0:	4919      	ldr	r1, [pc, #100]	; (8002258 <__aeabi_dsub+0x358>)
 80021f2:	428a      	cmp	r2, r1
 80021f4:	d00e      	beq.n	8002214 <__aeabi_dsub+0x314>
 80021f6:	0324      	lsls	r4, r4, #12
 80021f8:	0552      	lsls	r2, r2, #21
 80021fa:	0b24      	lsrs	r4, r4, #12
 80021fc:	0d52      	lsrs	r2, r2, #21
 80021fe:	e722      	b.n	8002046 <__aeabi_dsub+0x146>
 8002200:	000a      	movs	r2, r1
 8002202:	2400      	movs	r4, #0
 8002204:	2300      	movs	r3, #0
 8002206:	e71e      	b.n	8002046 <__aeabi_dsub+0x146>
 8002208:	08db      	lsrs	r3, r3, #3
 800220a:	4662      	mov	r2, ip
 800220c:	0752      	lsls	r2, r2, #29
 800220e:	4313      	orrs	r3, r2
 8002210:	4662      	mov	r2, ip
 8002212:	08d4      	lsrs	r4, r2, #3
 8002214:	001a      	movs	r2, r3
 8002216:	4322      	orrs	r2, r4
 8002218:	d100      	bne.n	800221c <__aeabi_dsub+0x31c>
 800221a:	e1fc      	b.n	8002616 <__aeabi_dsub+0x716>
 800221c:	2280      	movs	r2, #128	; 0x80
 800221e:	0312      	lsls	r2, r2, #12
 8002220:	4314      	orrs	r4, r2
 8002222:	0324      	lsls	r4, r4, #12
 8002224:	4a0c      	ldr	r2, [pc, #48]	; (8002258 <__aeabi_dsub+0x358>)
 8002226:	0b24      	lsrs	r4, r4, #12
 8002228:	e70d      	b.n	8002046 <__aeabi_dsub+0x146>
 800222a:	0020      	movs	r0, r4
 800222c:	f000 fb74 	bl	8002918 <__clzsi2>
 8002230:	0001      	movs	r1, r0
 8002232:	3118      	adds	r1, #24
 8002234:	291f      	cmp	r1, #31
 8002236:	dc00      	bgt.n	800223a <__aeabi_dsub+0x33a>
 8002238:	e6c4      	b.n	8001fc4 <__aeabi_dsub+0xc4>
 800223a:	3808      	subs	r0, #8
 800223c:	4084      	lsls	r4, r0
 800223e:	4643      	mov	r3, r8
 8002240:	0020      	movs	r0, r4
 8002242:	2400      	movs	r4, #0
 8002244:	4588      	cmp	r8, r1
 8002246:	dc00      	bgt.n	800224a <__aeabi_dsub+0x34a>
 8002248:	e6c8      	b.n	8001fdc <__aeabi_dsub+0xdc>
 800224a:	4a04      	ldr	r2, [pc, #16]	; (800225c <__aeabi_dsub+0x35c>)
 800224c:	1a5b      	subs	r3, r3, r1
 800224e:	4010      	ands	r0, r2
 8002250:	4698      	mov	r8, r3
 8002252:	4681      	mov	r9, r0
 8002254:	e6d6      	b.n	8002004 <__aeabi_dsub+0x104>
 8002256:	46c0      	nop			; (mov r8, r8)
 8002258:	000007ff 	.word	0x000007ff
 800225c:	ff7fffff 	.word	0xff7fffff
 8002260:	fffff801 	.word	0xfffff801
 8002264:	000007fe 	.word	0x000007fe
 8002268:	430f      	orrs	r7, r1
 800226a:	1e7a      	subs	r2, r7, #1
 800226c:	4197      	sbcs	r7, r2
 800226e:	e691      	b.n	8001f94 <__aeabi_dsub+0x94>
 8002270:	4661      	mov	r1, ip
 8002272:	08db      	lsrs	r3, r3, #3
 8002274:	0749      	lsls	r1, r1, #29
 8002276:	430b      	orrs	r3, r1
 8002278:	4661      	mov	r1, ip
 800227a:	08cc      	lsrs	r4, r1, #3
 800227c:	e7b8      	b.n	80021f0 <__aeabi_dsub+0x2f0>
 800227e:	4640      	mov	r0, r8
 8002280:	4cd3      	ldr	r4, [pc, #844]	; (80025d0 <__aeabi_dsub+0x6d0>)
 8002282:	3001      	adds	r0, #1
 8002284:	4220      	tst	r0, r4
 8002286:	d000      	beq.n	800228a <__aeabi_dsub+0x38a>
 8002288:	e0a2      	b.n	80023d0 <__aeabi_dsub+0x4d0>
 800228a:	4640      	mov	r0, r8
 800228c:	2800      	cmp	r0, #0
 800228e:	d000      	beq.n	8002292 <__aeabi_dsub+0x392>
 8002290:	e101      	b.n	8002496 <__aeabi_dsub+0x596>
 8002292:	4660      	mov	r0, ip
 8002294:	4318      	orrs	r0, r3
 8002296:	d100      	bne.n	800229a <__aeabi_dsub+0x39a>
 8002298:	e15e      	b.n	8002558 <__aeabi_dsub+0x658>
 800229a:	0008      	movs	r0, r1
 800229c:	4338      	orrs	r0, r7
 800229e:	d000      	beq.n	80022a2 <__aeabi_dsub+0x3a2>
 80022a0:	e15f      	b.n	8002562 <__aeabi_dsub+0x662>
 80022a2:	4661      	mov	r1, ip
 80022a4:	08db      	lsrs	r3, r3, #3
 80022a6:	0749      	lsls	r1, r1, #29
 80022a8:	430b      	orrs	r3, r1
 80022aa:	4661      	mov	r1, ip
 80022ac:	08cc      	lsrs	r4, r1, #3
 80022ae:	e7a2      	b.n	80021f6 <__aeabi_dsub+0x2f6>
 80022b0:	4dc8      	ldr	r5, [pc, #800]	; (80025d4 <__aeabi_dsub+0x6d4>)
 80022b2:	42a8      	cmp	r0, r5
 80022b4:	d100      	bne.n	80022b8 <__aeabi_dsub+0x3b8>
 80022b6:	e0cf      	b.n	8002458 <__aeabi_dsub+0x558>
 80022b8:	2580      	movs	r5, #128	; 0x80
 80022ba:	4664      	mov	r4, ip
 80022bc:	042d      	lsls	r5, r5, #16
 80022be:	432c      	orrs	r4, r5
 80022c0:	46a4      	mov	ip, r4
 80022c2:	2a38      	cmp	r2, #56	; 0x38
 80022c4:	dc56      	bgt.n	8002374 <__aeabi_dsub+0x474>
 80022c6:	2a1f      	cmp	r2, #31
 80022c8:	dd00      	ble.n	80022cc <__aeabi_dsub+0x3cc>
 80022ca:	e0d1      	b.n	8002470 <__aeabi_dsub+0x570>
 80022cc:	2520      	movs	r5, #32
 80022ce:	001e      	movs	r6, r3
 80022d0:	1aad      	subs	r5, r5, r2
 80022d2:	4664      	mov	r4, ip
 80022d4:	40ab      	lsls	r3, r5
 80022d6:	40ac      	lsls	r4, r5
 80022d8:	40d6      	lsrs	r6, r2
 80022da:	1e5d      	subs	r5, r3, #1
 80022dc:	41ab      	sbcs	r3, r5
 80022de:	4334      	orrs	r4, r6
 80022e0:	4323      	orrs	r3, r4
 80022e2:	4664      	mov	r4, ip
 80022e4:	40d4      	lsrs	r4, r2
 80022e6:	1b09      	subs	r1, r1, r4
 80022e8:	e049      	b.n	800237e <__aeabi_dsub+0x47e>
 80022ea:	4660      	mov	r0, ip
 80022ec:	1bdc      	subs	r4, r3, r7
 80022ee:	1a46      	subs	r6, r0, r1
 80022f0:	42a3      	cmp	r3, r4
 80022f2:	4180      	sbcs	r0, r0
 80022f4:	4240      	negs	r0, r0
 80022f6:	4681      	mov	r9, r0
 80022f8:	0030      	movs	r0, r6
 80022fa:	464e      	mov	r6, r9
 80022fc:	1b80      	subs	r0, r0, r6
 80022fe:	4681      	mov	r9, r0
 8002300:	0200      	lsls	r0, r0, #8
 8002302:	d476      	bmi.n	80023f2 <__aeabi_dsub+0x4f2>
 8002304:	464b      	mov	r3, r9
 8002306:	4323      	orrs	r3, r4
 8002308:	d000      	beq.n	800230c <__aeabi_dsub+0x40c>
 800230a:	e652      	b.n	8001fb2 <__aeabi_dsub+0xb2>
 800230c:	2400      	movs	r4, #0
 800230e:	2500      	movs	r5, #0
 8002310:	e771      	b.n	80021f6 <__aeabi_dsub+0x2f6>
 8002312:	4339      	orrs	r1, r7
 8002314:	000c      	movs	r4, r1
 8002316:	1e62      	subs	r2, r4, #1
 8002318:	4194      	sbcs	r4, r2
 800231a:	18e4      	adds	r4, r4, r3
 800231c:	429c      	cmp	r4, r3
 800231e:	419b      	sbcs	r3, r3
 8002320:	425b      	negs	r3, r3
 8002322:	4463      	add	r3, ip
 8002324:	4699      	mov	r9, r3
 8002326:	464b      	mov	r3, r9
 8002328:	021b      	lsls	r3, r3, #8
 800232a:	d400      	bmi.n	800232e <__aeabi_dsub+0x42e>
 800232c:	e756      	b.n	80021dc <__aeabi_dsub+0x2dc>
 800232e:	2301      	movs	r3, #1
 8002330:	469c      	mov	ip, r3
 8002332:	4ba8      	ldr	r3, [pc, #672]	; (80025d4 <__aeabi_dsub+0x6d4>)
 8002334:	44e0      	add	r8, ip
 8002336:	4598      	cmp	r8, r3
 8002338:	d038      	beq.n	80023ac <__aeabi_dsub+0x4ac>
 800233a:	464b      	mov	r3, r9
 800233c:	48a6      	ldr	r0, [pc, #664]	; (80025d8 <__aeabi_dsub+0x6d8>)
 800233e:	2201      	movs	r2, #1
 8002340:	4003      	ands	r3, r0
 8002342:	0018      	movs	r0, r3
 8002344:	0863      	lsrs	r3, r4, #1
 8002346:	4014      	ands	r4, r2
 8002348:	431c      	orrs	r4, r3
 800234a:	07c3      	lsls	r3, r0, #31
 800234c:	431c      	orrs	r4, r3
 800234e:	0843      	lsrs	r3, r0, #1
 8002350:	4699      	mov	r9, r3
 8002352:	e657      	b.n	8002004 <__aeabi_dsub+0x104>
 8002354:	0010      	movs	r0, r2
 8002356:	000e      	movs	r6, r1
 8002358:	3820      	subs	r0, #32
 800235a:	40c6      	lsrs	r6, r0
 800235c:	2a20      	cmp	r2, #32
 800235e:	d004      	beq.n	800236a <__aeabi_dsub+0x46a>
 8002360:	2040      	movs	r0, #64	; 0x40
 8002362:	1a82      	subs	r2, r0, r2
 8002364:	4091      	lsls	r1, r2
 8002366:	430f      	orrs	r7, r1
 8002368:	46b9      	mov	r9, r7
 800236a:	464f      	mov	r7, r9
 800236c:	1e7a      	subs	r2, r7, #1
 800236e:	4197      	sbcs	r7, r2
 8002370:	4337      	orrs	r7, r6
 8002372:	e60f      	b.n	8001f94 <__aeabi_dsub+0x94>
 8002374:	4662      	mov	r2, ip
 8002376:	431a      	orrs	r2, r3
 8002378:	0013      	movs	r3, r2
 800237a:	1e5a      	subs	r2, r3, #1
 800237c:	4193      	sbcs	r3, r2
 800237e:	1afc      	subs	r4, r7, r3
 8002380:	42a7      	cmp	r7, r4
 8002382:	41bf      	sbcs	r7, r7
 8002384:	427f      	negs	r7, r7
 8002386:	1bcb      	subs	r3, r1, r7
 8002388:	4699      	mov	r9, r3
 800238a:	465d      	mov	r5, fp
 800238c:	4680      	mov	r8, r0
 800238e:	e608      	b.n	8001fa2 <__aeabi_dsub+0xa2>
 8002390:	4666      	mov	r6, ip
 8002392:	431e      	orrs	r6, r3
 8002394:	d100      	bne.n	8002398 <__aeabi_dsub+0x498>
 8002396:	e0be      	b.n	8002516 <__aeabi_dsub+0x616>
 8002398:	1e56      	subs	r6, r2, #1
 800239a:	2a01      	cmp	r2, #1
 800239c:	d100      	bne.n	80023a0 <__aeabi_dsub+0x4a0>
 800239e:	e109      	b.n	80025b4 <__aeabi_dsub+0x6b4>
 80023a0:	4c8c      	ldr	r4, [pc, #560]	; (80025d4 <__aeabi_dsub+0x6d4>)
 80023a2:	42a2      	cmp	r2, r4
 80023a4:	d100      	bne.n	80023a8 <__aeabi_dsub+0x4a8>
 80023a6:	e119      	b.n	80025dc <__aeabi_dsub+0x6dc>
 80023a8:	0032      	movs	r2, r6
 80023aa:	e6c1      	b.n	8002130 <__aeabi_dsub+0x230>
 80023ac:	4642      	mov	r2, r8
 80023ae:	2400      	movs	r4, #0
 80023b0:	2300      	movs	r3, #0
 80023b2:	e648      	b.n	8002046 <__aeabi_dsub+0x146>
 80023b4:	2020      	movs	r0, #32
 80023b6:	000c      	movs	r4, r1
 80023b8:	1a80      	subs	r0, r0, r2
 80023ba:	003e      	movs	r6, r7
 80023bc:	4087      	lsls	r7, r0
 80023be:	4084      	lsls	r4, r0
 80023c0:	40d6      	lsrs	r6, r2
 80023c2:	1e78      	subs	r0, r7, #1
 80023c4:	4187      	sbcs	r7, r0
 80023c6:	40d1      	lsrs	r1, r2
 80023c8:	4334      	orrs	r4, r6
 80023ca:	433c      	orrs	r4, r7
 80023cc:	448c      	add	ip, r1
 80023ce:	e7a4      	b.n	800231a <__aeabi_dsub+0x41a>
 80023d0:	4a80      	ldr	r2, [pc, #512]	; (80025d4 <__aeabi_dsub+0x6d4>)
 80023d2:	4290      	cmp	r0, r2
 80023d4:	d100      	bne.n	80023d8 <__aeabi_dsub+0x4d8>
 80023d6:	e0e9      	b.n	80025ac <__aeabi_dsub+0x6ac>
 80023d8:	19df      	adds	r7, r3, r7
 80023da:	429f      	cmp	r7, r3
 80023dc:	419b      	sbcs	r3, r3
 80023de:	4461      	add	r1, ip
 80023e0:	425b      	negs	r3, r3
 80023e2:	18c9      	adds	r1, r1, r3
 80023e4:	07cc      	lsls	r4, r1, #31
 80023e6:	087f      	lsrs	r7, r7, #1
 80023e8:	084b      	lsrs	r3, r1, #1
 80023ea:	4699      	mov	r9, r3
 80023ec:	4680      	mov	r8, r0
 80023ee:	433c      	orrs	r4, r7
 80023f0:	e6f4      	b.n	80021dc <__aeabi_dsub+0x2dc>
 80023f2:	1afc      	subs	r4, r7, r3
 80023f4:	42a7      	cmp	r7, r4
 80023f6:	41bf      	sbcs	r7, r7
 80023f8:	4663      	mov	r3, ip
 80023fa:	427f      	negs	r7, r7
 80023fc:	1ac9      	subs	r1, r1, r3
 80023fe:	1bcb      	subs	r3, r1, r7
 8002400:	4699      	mov	r9, r3
 8002402:	465d      	mov	r5, fp
 8002404:	e5d5      	b.n	8001fb2 <__aeabi_dsub+0xb2>
 8002406:	08ff      	lsrs	r7, r7, #3
 8002408:	074b      	lsls	r3, r1, #29
 800240a:	465d      	mov	r5, fp
 800240c:	433b      	orrs	r3, r7
 800240e:	08cc      	lsrs	r4, r1, #3
 8002410:	e6ee      	b.n	80021f0 <__aeabi_dsub+0x2f0>
 8002412:	4662      	mov	r2, ip
 8002414:	431a      	orrs	r2, r3
 8002416:	d000      	beq.n	800241a <__aeabi_dsub+0x51a>
 8002418:	e082      	b.n	8002520 <__aeabi_dsub+0x620>
 800241a:	000b      	movs	r3, r1
 800241c:	433b      	orrs	r3, r7
 800241e:	d11b      	bne.n	8002458 <__aeabi_dsub+0x558>
 8002420:	2480      	movs	r4, #128	; 0x80
 8002422:	2500      	movs	r5, #0
 8002424:	0324      	lsls	r4, r4, #12
 8002426:	e6f9      	b.n	800221c <__aeabi_dsub+0x31c>
 8002428:	19dc      	adds	r4, r3, r7
 800242a:	429c      	cmp	r4, r3
 800242c:	419b      	sbcs	r3, r3
 800242e:	4461      	add	r1, ip
 8002430:	4689      	mov	r9, r1
 8002432:	425b      	negs	r3, r3
 8002434:	4499      	add	r9, r3
 8002436:	464b      	mov	r3, r9
 8002438:	021b      	lsls	r3, r3, #8
 800243a:	d444      	bmi.n	80024c6 <__aeabi_dsub+0x5c6>
 800243c:	2301      	movs	r3, #1
 800243e:	4698      	mov	r8, r3
 8002440:	e6cc      	b.n	80021dc <__aeabi_dsub+0x2dc>
 8002442:	1bdc      	subs	r4, r3, r7
 8002444:	4662      	mov	r2, ip
 8002446:	42a3      	cmp	r3, r4
 8002448:	419b      	sbcs	r3, r3
 800244a:	1a51      	subs	r1, r2, r1
 800244c:	425b      	negs	r3, r3
 800244e:	1acb      	subs	r3, r1, r3
 8002450:	4699      	mov	r9, r3
 8002452:	2301      	movs	r3, #1
 8002454:	4698      	mov	r8, r3
 8002456:	e5a4      	b.n	8001fa2 <__aeabi_dsub+0xa2>
 8002458:	08ff      	lsrs	r7, r7, #3
 800245a:	074b      	lsls	r3, r1, #29
 800245c:	465d      	mov	r5, fp
 800245e:	433b      	orrs	r3, r7
 8002460:	08cc      	lsrs	r4, r1, #3
 8002462:	e6d7      	b.n	8002214 <__aeabi_dsub+0x314>
 8002464:	4662      	mov	r2, ip
 8002466:	431a      	orrs	r2, r3
 8002468:	0014      	movs	r4, r2
 800246a:	1e63      	subs	r3, r4, #1
 800246c:	419c      	sbcs	r4, r3
 800246e:	e679      	b.n	8002164 <__aeabi_dsub+0x264>
 8002470:	0015      	movs	r5, r2
 8002472:	4664      	mov	r4, ip
 8002474:	3d20      	subs	r5, #32
 8002476:	40ec      	lsrs	r4, r5
 8002478:	46a0      	mov	r8, r4
 800247a:	2a20      	cmp	r2, #32
 800247c:	d005      	beq.n	800248a <__aeabi_dsub+0x58a>
 800247e:	2540      	movs	r5, #64	; 0x40
 8002480:	4664      	mov	r4, ip
 8002482:	1aaa      	subs	r2, r5, r2
 8002484:	4094      	lsls	r4, r2
 8002486:	4323      	orrs	r3, r4
 8002488:	469a      	mov	sl, r3
 800248a:	4654      	mov	r4, sl
 800248c:	1e63      	subs	r3, r4, #1
 800248e:	419c      	sbcs	r4, r3
 8002490:	4643      	mov	r3, r8
 8002492:	4323      	orrs	r3, r4
 8002494:	e773      	b.n	800237e <__aeabi_dsub+0x47e>
 8002496:	4662      	mov	r2, ip
 8002498:	431a      	orrs	r2, r3
 800249a:	d023      	beq.n	80024e4 <__aeabi_dsub+0x5e4>
 800249c:	000a      	movs	r2, r1
 800249e:	433a      	orrs	r2, r7
 80024a0:	d000      	beq.n	80024a4 <__aeabi_dsub+0x5a4>
 80024a2:	e0a0      	b.n	80025e6 <__aeabi_dsub+0x6e6>
 80024a4:	4662      	mov	r2, ip
 80024a6:	08db      	lsrs	r3, r3, #3
 80024a8:	0752      	lsls	r2, r2, #29
 80024aa:	4313      	orrs	r3, r2
 80024ac:	4662      	mov	r2, ip
 80024ae:	08d4      	lsrs	r4, r2, #3
 80024b0:	e6b0      	b.n	8002214 <__aeabi_dsub+0x314>
 80024b2:	000b      	movs	r3, r1
 80024b4:	433b      	orrs	r3, r7
 80024b6:	d100      	bne.n	80024ba <__aeabi_dsub+0x5ba>
 80024b8:	e728      	b.n	800230c <__aeabi_dsub+0x40c>
 80024ba:	08ff      	lsrs	r7, r7, #3
 80024bc:	074b      	lsls	r3, r1, #29
 80024be:	465d      	mov	r5, fp
 80024c0:	433b      	orrs	r3, r7
 80024c2:	08cc      	lsrs	r4, r1, #3
 80024c4:	e697      	b.n	80021f6 <__aeabi_dsub+0x2f6>
 80024c6:	2302      	movs	r3, #2
 80024c8:	4698      	mov	r8, r3
 80024ca:	e736      	b.n	800233a <__aeabi_dsub+0x43a>
 80024cc:	1afc      	subs	r4, r7, r3
 80024ce:	42a7      	cmp	r7, r4
 80024d0:	41bf      	sbcs	r7, r7
 80024d2:	4663      	mov	r3, ip
 80024d4:	427f      	negs	r7, r7
 80024d6:	1ac9      	subs	r1, r1, r3
 80024d8:	1bcb      	subs	r3, r1, r7
 80024da:	4699      	mov	r9, r3
 80024dc:	2301      	movs	r3, #1
 80024de:	465d      	mov	r5, fp
 80024e0:	4698      	mov	r8, r3
 80024e2:	e55e      	b.n	8001fa2 <__aeabi_dsub+0xa2>
 80024e4:	074b      	lsls	r3, r1, #29
 80024e6:	08ff      	lsrs	r7, r7, #3
 80024e8:	433b      	orrs	r3, r7
 80024ea:	08cc      	lsrs	r4, r1, #3
 80024ec:	e692      	b.n	8002214 <__aeabi_dsub+0x314>
 80024ee:	1bdc      	subs	r4, r3, r7
 80024f0:	4660      	mov	r0, ip
 80024f2:	42a3      	cmp	r3, r4
 80024f4:	41b6      	sbcs	r6, r6
 80024f6:	1a40      	subs	r0, r0, r1
 80024f8:	4276      	negs	r6, r6
 80024fa:	1b80      	subs	r0, r0, r6
 80024fc:	4681      	mov	r9, r0
 80024fe:	0200      	lsls	r0, r0, #8
 8002500:	d560      	bpl.n	80025c4 <__aeabi_dsub+0x6c4>
 8002502:	1afc      	subs	r4, r7, r3
 8002504:	42a7      	cmp	r7, r4
 8002506:	41bf      	sbcs	r7, r7
 8002508:	4663      	mov	r3, ip
 800250a:	427f      	negs	r7, r7
 800250c:	1ac9      	subs	r1, r1, r3
 800250e:	1bcb      	subs	r3, r1, r7
 8002510:	4699      	mov	r9, r3
 8002512:	465d      	mov	r5, fp
 8002514:	e576      	b.n	8002004 <__aeabi_dsub+0x104>
 8002516:	08ff      	lsrs	r7, r7, #3
 8002518:	074b      	lsls	r3, r1, #29
 800251a:	433b      	orrs	r3, r7
 800251c:	08cc      	lsrs	r4, r1, #3
 800251e:	e667      	b.n	80021f0 <__aeabi_dsub+0x2f0>
 8002520:	000a      	movs	r2, r1
 8002522:	08db      	lsrs	r3, r3, #3
 8002524:	433a      	orrs	r2, r7
 8002526:	d100      	bne.n	800252a <__aeabi_dsub+0x62a>
 8002528:	e66f      	b.n	800220a <__aeabi_dsub+0x30a>
 800252a:	4662      	mov	r2, ip
 800252c:	0752      	lsls	r2, r2, #29
 800252e:	4313      	orrs	r3, r2
 8002530:	4662      	mov	r2, ip
 8002532:	08d4      	lsrs	r4, r2, #3
 8002534:	2280      	movs	r2, #128	; 0x80
 8002536:	0312      	lsls	r2, r2, #12
 8002538:	4214      	tst	r4, r2
 800253a:	d007      	beq.n	800254c <__aeabi_dsub+0x64c>
 800253c:	08c8      	lsrs	r0, r1, #3
 800253e:	4210      	tst	r0, r2
 8002540:	d104      	bne.n	800254c <__aeabi_dsub+0x64c>
 8002542:	465d      	mov	r5, fp
 8002544:	0004      	movs	r4, r0
 8002546:	08fb      	lsrs	r3, r7, #3
 8002548:	0749      	lsls	r1, r1, #29
 800254a:	430b      	orrs	r3, r1
 800254c:	0f5a      	lsrs	r2, r3, #29
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	08db      	lsrs	r3, r3, #3
 8002552:	0752      	lsls	r2, r2, #29
 8002554:	4313      	orrs	r3, r2
 8002556:	e65d      	b.n	8002214 <__aeabi_dsub+0x314>
 8002558:	074b      	lsls	r3, r1, #29
 800255a:	08ff      	lsrs	r7, r7, #3
 800255c:	433b      	orrs	r3, r7
 800255e:	08cc      	lsrs	r4, r1, #3
 8002560:	e649      	b.n	80021f6 <__aeabi_dsub+0x2f6>
 8002562:	19dc      	adds	r4, r3, r7
 8002564:	429c      	cmp	r4, r3
 8002566:	419b      	sbcs	r3, r3
 8002568:	4461      	add	r1, ip
 800256a:	4689      	mov	r9, r1
 800256c:	425b      	negs	r3, r3
 800256e:	4499      	add	r9, r3
 8002570:	464b      	mov	r3, r9
 8002572:	021b      	lsls	r3, r3, #8
 8002574:	d400      	bmi.n	8002578 <__aeabi_dsub+0x678>
 8002576:	e631      	b.n	80021dc <__aeabi_dsub+0x2dc>
 8002578:	464a      	mov	r2, r9
 800257a:	4b17      	ldr	r3, [pc, #92]	; (80025d8 <__aeabi_dsub+0x6d8>)
 800257c:	401a      	ands	r2, r3
 800257e:	2301      	movs	r3, #1
 8002580:	4691      	mov	r9, r2
 8002582:	4698      	mov	r8, r3
 8002584:	e62a      	b.n	80021dc <__aeabi_dsub+0x2dc>
 8002586:	0016      	movs	r6, r2
 8002588:	4664      	mov	r4, ip
 800258a:	3e20      	subs	r6, #32
 800258c:	40f4      	lsrs	r4, r6
 800258e:	46a0      	mov	r8, r4
 8002590:	2a20      	cmp	r2, #32
 8002592:	d005      	beq.n	80025a0 <__aeabi_dsub+0x6a0>
 8002594:	2640      	movs	r6, #64	; 0x40
 8002596:	4664      	mov	r4, ip
 8002598:	1ab2      	subs	r2, r6, r2
 800259a:	4094      	lsls	r4, r2
 800259c:	4323      	orrs	r3, r4
 800259e:	469a      	mov	sl, r3
 80025a0:	4654      	mov	r4, sl
 80025a2:	1e63      	subs	r3, r4, #1
 80025a4:	419c      	sbcs	r4, r3
 80025a6:	4643      	mov	r3, r8
 80025a8:	431c      	orrs	r4, r3
 80025aa:	e5db      	b.n	8002164 <__aeabi_dsub+0x264>
 80025ac:	0002      	movs	r2, r0
 80025ae:	2400      	movs	r4, #0
 80025b0:	2300      	movs	r3, #0
 80025b2:	e548      	b.n	8002046 <__aeabi_dsub+0x146>
 80025b4:	19dc      	adds	r4, r3, r7
 80025b6:	42bc      	cmp	r4, r7
 80025b8:	41bf      	sbcs	r7, r7
 80025ba:	4461      	add	r1, ip
 80025bc:	4689      	mov	r9, r1
 80025be:	427f      	negs	r7, r7
 80025c0:	44b9      	add	r9, r7
 80025c2:	e738      	b.n	8002436 <__aeabi_dsub+0x536>
 80025c4:	464b      	mov	r3, r9
 80025c6:	4323      	orrs	r3, r4
 80025c8:	d100      	bne.n	80025cc <__aeabi_dsub+0x6cc>
 80025ca:	e69f      	b.n	800230c <__aeabi_dsub+0x40c>
 80025cc:	e606      	b.n	80021dc <__aeabi_dsub+0x2dc>
 80025ce:	46c0      	nop			; (mov r8, r8)
 80025d0:	000007fe 	.word	0x000007fe
 80025d4:	000007ff 	.word	0x000007ff
 80025d8:	ff7fffff 	.word	0xff7fffff
 80025dc:	08ff      	lsrs	r7, r7, #3
 80025de:	074b      	lsls	r3, r1, #29
 80025e0:	433b      	orrs	r3, r7
 80025e2:	08cc      	lsrs	r4, r1, #3
 80025e4:	e616      	b.n	8002214 <__aeabi_dsub+0x314>
 80025e6:	4662      	mov	r2, ip
 80025e8:	08db      	lsrs	r3, r3, #3
 80025ea:	0752      	lsls	r2, r2, #29
 80025ec:	4313      	orrs	r3, r2
 80025ee:	4662      	mov	r2, ip
 80025f0:	08d4      	lsrs	r4, r2, #3
 80025f2:	2280      	movs	r2, #128	; 0x80
 80025f4:	0312      	lsls	r2, r2, #12
 80025f6:	4214      	tst	r4, r2
 80025f8:	d007      	beq.n	800260a <__aeabi_dsub+0x70a>
 80025fa:	08c8      	lsrs	r0, r1, #3
 80025fc:	4210      	tst	r0, r2
 80025fe:	d104      	bne.n	800260a <__aeabi_dsub+0x70a>
 8002600:	465d      	mov	r5, fp
 8002602:	0004      	movs	r4, r0
 8002604:	08fb      	lsrs	r3, r7, #3
 8002606:	0749      	lsls	r1, r1, #29
 8002608:	430b      	orrs	r3, r1
 800260a:	0f5a      	lsrs	r2, r3, #29
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	0752      	lsls	r2, r2, #29
 8002610:	08db      	lsrs	r3, r3, #3
 8002612:	4313      	orrs	r3, r2
 8002614:	e5fe      	b.n	8002214 <__aeabi_dsub+0x314>
 8002616:	2300      	movs	r3, #0
 8002618:	4a01      	ldr	r2, [pc, #4]	; (8002620 <__aeabi_dsub+0x720>)
 800261a:	001c      	movs	r4, r3
 800261c:	e513      	b.n	8002046 <__aeabi_dsub+0x146>
 800261e:	46c0      	nop			; (mov r8, r8)
 8002620:	000007ff 	.word	0x000007ff

08002624 <__aeabi_dcmpun>:
 8002624:	b570      	push	{r4, r5, r6, lr}
 8002626:	0005      	movs	r5, r0
 8002628:	480c      	ldr	r0, [pc, #48]	; (800265c <__aeabi_dcmpun+0x38>)
 800262a:	031c      	lsls	r4, r3, #12
 800262c:	0016      	movs	r6, r2
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	030a      	lsls	r2, r1, #12
 8002632:	0049      	lsls	r1, r1, #1
 8002634:	0b12      	lsrs	r2, r2, #12
 8002636:	0d49      	lsrs	r1, r1, #21
 8002638:	0b24      	lsrs	r4, r4, #12
 800263a:	0d5b      	lsrs	r3, r3, #21
 800263c:	4281      	cmp	r1, r0
 800263e:	d008      	beq.n	8002652 <__aeabi_dcmpun+0x2e>
 8002640:	4a06      	ldr	r2, [pc, #24]	; (800265c <__aeabi_dcmpun+0x38>)
 8002642:	2000      	movs	r0, #0
 8002644:	4293      	cmp	r3, r2
 8002646:	d103      	bne.n	8002650 <__aeabi_dcmpun+0x2c>
 8002648:	0020      	movs	r0, r4
 800264a:	4330      	orrs	r0, r6
 800264c:	1e43      	subs	r3, r0, #1
 800264e:	4198      	sbcs	r0, r3
 8002650:	bd70      	pop	{r4, r5, r6, pc}
 8002652:	2001      	movs	r0, #1
 8002654:	432a      	orrs	r2, r5
 8002656:	d1fb      	bne.n	8002650 <__aeabi_dcmpun+0x2c>
 8002658:	e7f2      	b.n	8002640 <__aeabi_dcmpun+0x1c>
 800265a:	46c0      	nop			; (mov r8, r8)
 800265c:	000007ff 	.word	0x000007ff

08002660 <__aeabi_d2iz>:
 8002660:	000a      	movs	r2, r1
 8002662:	b530      	push	{r4, r5, lr}
 8002664:	4c13      	ldr	r4, [pc, #76]	; (80026b4 <__aeabi_d2iz+0x54>)
 8002666:	0053      	lsls	r3, r2, #1
 8002668:	0309      	lsls	r1, r1, #12
 800266a:	0005      	movs	r5, r0
 800266c:	0b09      	lsrs	r1, r1, #12
 800266e:	2000      	movs	r0, #0
 8002670:	0d5b      	lsrs	r3, r3, #21
 8002672:	0fd2      	lsrs	r2, r2, #31
 8002674:	42a3      	cmp	r3, r4
 8002676:	dd04      	ble.n	8002682 <__aeabi_d2iz+0x22>
 8002678:	480f      	ldr	r0, [pc, #60]	; (80026b8 <__aeabi_d2iz+0x58>)
 800267a:	4283      	cmp	r3, r0
 800267c:	dd02      	ble.n	8002684 <__aeabi_d2iz+0x24>
 800267e:	4b0f      	ldr	r3, [pc, #60]	; (80026bc <__aeabi_d2iz+0x5c>)
 8002680:	18d0      	adds	r0, r2, r3
 8002682:	bd30      	pop	{r4, r5, pc}
 8002684:	2080      	movs	r0, #128	; 0x80
 8002686:	0340      	lsls	r0, r0, #13
 8002688:	4301      	orrs	r1, r0
 800268a:	480d      	ldr	r0, [pc, #52]	; (80026c0 <__aeabi_d2iz+0x60>)
 800268c:	1ac0      	subs	r0, r0, r3
 800268e:	281f      	cmp	r0, #31
 8002690:	dd08      	ble.n	80026a4 <__aeabi_d2iz+0x44>
 8002692:	480c      	ldr	r0, [pc, #48]	; (80026c4 <__aeabi_d2iz+0x64>)
 8002694:	1ac3      	subs	r3, r0, r3
 8002696:	40d9      	lsrs	r1, r3
 8002698:	000b      	movs	r3, r1
 800269a:	4258      	negs	r0, r3
 800269c:	2a00      	cmp	r2, #0
 800269e:	d1f0      	bne.n	8002682 <__aeabi_d2iz+0x22>
 80026a0:	0018      	movs	r0, r3
 80026a2:	e7ee      	b.n	8002682 <__aeabi_d2iz+0x22>
 80026a4:	4c08      	ldr	r4, [pc, #32]	; (80026c8 <__aeabi_d2iz+0x68>)
 80026a6:	40c5      	lsrs	r5, r0
 80026a8:	46a4      	mov	ip, r4
 80026aa:	4463      	add	r3, ip
 80026ac:	4099      	lsls	r1, r3
 80026ae:	000b      	movs	r3, r1
 80026b0:	432b      	orrs	r3, r5
 80026b2:	e7f2      	b.n	800269a <__aeabi_d2iz+0x3a>
 80026b4:	000003fe 	.word	0x000003fe
 80026b8:	0000041d 	.word	0x0000041d
 80026bc:	7fffffff 	.word	0x7fffffff
 80026c0:	00000433 	.word	0x00000433
 80026c4:	00000413 	.word	0x00000413
 80026c8:	fffffbed 	.word	0xfffffbed

080026cc <__aeabi_i2d>:
 80026cc:	b570      	push	{r4, r5, r6, lr}
 80026ce:	2800      	cmp	r0, #0
 80026d0:	d016      	beq.n	8002700 <__aeabi_i2d+0x34>
 80026d2:	17c3      	asrs	r3, r0, #31
 80026d4:	18c5      	adds	r5, r0, r3
 80026d6:	405d      	eors	r5, r3
 80026d8:	0fc4      	lsrs	r4, r0, #31
 80026da:	0028      	movs	r0, r5
 80026dc:	f000 f91c 	bl	8002918 <__clzsi2>
 80026e0:	4a11      	ldr	r2, [pc, #68]	; (8002728 <__aeabi_i2d+0x5c>)
 80026e2:	1a12      	subs	r2, r2, r0
 80026e4:	280a      	cmp	r0, #10
 80026e6:	dc16      	bgt.n	8002716 <__aeabi_i2d+0x4a>
 80026e8:	0003      	movs	r3, r0
 80026ea:	002e      	movs	r6, r5
 80026ec:	3315      	adds	r3, #21
 80026ee:	409e      	lsls	r6, r3
 80026f0:	230b      	movs	r3, #11
 80026f2:	1a18      	subs	r0, r3, r0
 80026f4:	40c5      	lsrs	r5, r0
 80026f6:	0552      	lsls	r2, r2, #21
 80026f8:	032d      	lsls	r5, r5, #12
 80026fa:	0b2d      	lsrs	r5, r5, #12
 80026fc:	0d53      	lsrs	r3, r2, #21
 80026fe:	e003      	b.n	8002708 <__aeabi_i2d+0x3c>
 8002700:	2400      	movs	r4, #0
 8002702:	2300      	movs	r3, #0
 8002704:	2500      	movs	r5, #0
 8002706:	2600      	movs	r6, #0
 8002708:	051b      	lsls	r3, r3, #20
 800270a:	432b      	orrs	r3, r5
 800270c:	07e4      	lsls	r4, r4, #31
 800270e:	4323      	orrs	r3, r4
 8002710:	0030      	movs	r0, r6
 8002712:	0019      	movs	r1, r3
 8002714:	bd70      	pop	{r4, r5, r6, pc}
 8002716:	380b      	subs	r0, #11
 8002718:	4085      	lsls	r5, r0
 800271a:	0552      	lsls	r2, r2, #21
 800271c:	032d      	lsls	r5, r5, #12
 800271e:	2600      	movs	r6, #0
 8002720:	0b2d      	lsrs	r5, r5, #12
 8002722:	0d53      	lsrs	r3, r2, #21
 8002724:	e7f0      	b.n	8002708 <__aeabi_i2d+0x3c>
 8002726:	46c0      	nop			; (mov r8, r8)
 8002728:	0000041e 	.word	0x0000041e

0800272c <__aeabi_ui2d>:
 800272c:	b510      	push	{r4, lr}
 800272e:	1e04      	subs	r4, r0, #0
 8002730:	d010      	beq.n	8002754 <__aeabi_ui2d+0x28>
 8002732:	f000 f8f1 	bl	8002918 <__clzsi2>
 8002736:	4b0f      	ldr	r3, [pc, #60]	; (8002774 <__aeabi_ui2d+0x48>)
 8002738:	1a1b      	subs	r3, r3, r0
 800273a:	280a      	cmp	r0, #10
 800273c:	dc11      	bgt.n	8002762 <__aeabi_ui2d+0x36>
 800273e:	220b      	movs	r2, #11
 8002740:	0021      	movs	r1, r4
 8002742:	1a12      	subs	r2, r2, r0
 8002744:	40d1      	lsrs	r1, r2
 8002746:	3015      	adds	r0, #21
 8002748:	030a      	lsls	r2, r1, #12
 800274a:	055b      	lsls	r3, r3, #21
 800274c:	4084      	lsls	r4, r0
 800274e:	0b12      	lsrs	r2, r2, #12
 8002750:	0d5b      	lsrs	r3, r3, #21
 8002752:	e001      	b.n	8002758 <__aeabi_ui2d+0x2c>
 8002754:	2300      	movs	r3, #0
 8002756:	2200      	movs	r2, #0
 8002758:	051b      	lsls	r3, r3, #20
 800275a:	4313      	orrs	r3, r2
 800275c:	0020      	movs	r0, r4
 800275e:	0019      	movs	r1, r3
 8002760:	bd10      	pop	{r4, pc}
 8002762:	0022      	movs	r2, r4
 8002764:	380b      	subs	r0, #11
 8002766:	4082      	lsls	r2, r0
 8002768:	055b      	lsls	r3, r3, #21
 800276a:	0312      	lsls	r2, r2, #12
 800276c:	2400      	movs	r4, #0
 800276e:	0b12      	lsrs	r2, r2, #12
 8002770:	0d5b      	lsrs	r3, r3, #21
 8002772:	e7f1      	b.n	8002758 <__aeabi_ui2d+0x2c>
 8002774:	0000041e 	.word	0x0000041e

08002778 <__aeabi_f2d>:
 8002778:	b570      	push	{r4, r5, r6, lr}
 800277a:	0043      	lsls	r3, r0, #1
 800277c:	0246      	lsls	r6, r0, #9
 800277e:	0fc4      	lsrs	r4, r0, #31
 8002780:	20fe      	movs	r0, #254	; 0xfe
 8002782:	0e1b      	lsrs	r3, r3, #24
 8002784:	1c59      	adds	r1, r3, #1
 8002786:	0a75      	lsrs	r5, r6, #9
 8002788:	4208      	tst	r0, r1
 800278a:	d00c      	beq.n	80027a6 <__aeabi_f2d+0x2e>
 800278c:	22e0      	movs	r2, #224	; 0xe0
 800278e:	0092      	lsls	r2, r2, #2
 8002790:	4694      	mov	ip, r2
 8002792:	076d      	lsls	r5, r5, #29
 8002794:	0b36      	lsrs	r6, r6, #12
 8002796:	4463      	add	r3, ip
 8002798:	051b      	lsls	r3, r3, #20
 800279a:	4333      	orrs	r3, r6
 800279c:	07e4      	lsls	r4, r4, #31
 800279e:	4323      	orrs	r3, r4
 80027a0:	0028      	movs	r0, r5
 80027a2:	0019      	movs	r1, r3
 80027a4:	bd70      	pop	{r4, r5, r6, pc}
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d114      	bne.n	80027d4 <__aeabi_f2d+0x5c>
 80027aa:	2d00      	cmp	r5, #0
 80027ac:	d01b      	beq.n	80027e6 <__aeabi_f2d+0x6e>
 80027ae:	0028      	movs	r0, r5
 80027b0:	f000 f8b2 	bl	8002918 <__clzsi2>
 80027b4:	280a      	cmp	r0, #10
 80027b6:	dc1c      	bgt.n	80027f2 <__aeabi_f2d+0x7a>
 80027b8:	230b      	movs	r3, #11
 80027ba:	002e      	movs	r6, r5
 80027bc:	1a1b      	subs	r3, r3, r0
 80027be:	40de      	lsrs	r6, r3
 80027c0:	0003      	movs	r3, r0
 80027c2:	3315      	adds	r3, #21
 80027c4:	409d      	lsls	r5, r3
 80027c6:	4a0e      	ldr	r2, [pc, #56]	; (8002800 <__aeabi_f2d+0x88>)
 80027c8:	0336      	lsls	r6, r6, #12
 80027ca:	1a12      	subs	r2, r2, r0
 80027cc:	0552      	lsls	r2, r2, #21
 80027ce:	0b36      	lsrs	r6, r6, #12
 80027d0:	0d53      	lsrs	r3, r2, #21
 80027d2:	e7e1      	b.n	8002798 <__aeabi_f2d+0x20>
 80027d4:	2d00      	cmp	r5, #0
 80027d6:	d009      	beq.n	80027ec <__aeabi_f2d+0x74>
 80027d8:	2280      	movs	r2, #128	; 0x80
 80027da:	0b36      	lsrs	r6, r6, #12
 80027dc:	0312      	lsls	r2, r2, #12
 80027de:	4b09      	ldr	r3, [pc, #36]	; (8002804 <__aeabi_f2d+0x8c>)
 80027e0:	076d      	lsls	r5, r5, #29
 80027e2:	4316      	orrs	r6, r2
 80027e4:	e7d8      	b.n	8002798 <__aeabi_f2d+0x20>
 80027e6:	2300      	movs	r3, #0
 80027e8:	2600      	movs	r6, #0
 80027ea:	e7d5      	b.n	8002798 <__aeabi_f2d+0x20>
 80027ec:	2600      	movs	r6, #0
 80027ee:	4b05      	ldr	r3, [pc, #20]	; (8002804 <__aeabi_f2d+0x8c>)
 80027f0:	e7d2      	b.n	8002798 <__aeabi_f2d+0x20>
 80027f2:	0003      	movs	r3, r0
 80027f4:	3b0b      	subs	r3, #11
 80027f6:	409d      	lsls	r5, r3
 80027f8:	002e      	movs	r6, r5
 80027fa:	2500      	movs	r5, #0
 80027fc:	e7e3      	b.n	80027c6 <__aeabi_f2d+0x4e>
 80027fe:	46c0      	nop			; (mov r8, r8)
 8002800:	00000389 	.word	0x00000389
 8002804:	000007ff 	.word	0x000007ff

08002808 <__aeabi_d2f>:
 8002808:	0002      	movs	r2, r0
 800280a:	004b      	lsls	r3, r1, #1
 800280c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800280e:	0d5b      	lsrs	r3, r3, #21
 8002810:	030c      	lsls	r4, r1, #12
 8002812:	4e3d      	ldr	r6, [pc, #244]	; (8002908 <__aeabi_d2f+0x100>)
 8002814:	0a64      	lsrs	r4, r4, #9
 8002816:	0f40      	lsrs	r0, r0, #29
 8002818:	1c5f      	adds	r7, r3, #1
 800281a:	0fc9      	lsrs	r1, r1, #31
 800281c:	4304      	orrs	r4, r0
 800281e:	00d5      	lsls	r5, r2, #3
 8002820:	4237      	tst	r7, r6
 8002822:	d00a      	beq.n	800283a <__aeabi_d2f+0x32>
 8002824:	4839      	ldr	r0, [pc, #228]	; (800290c <__aeabi_d2f+0x104>)
 8002826:	181e      	adds	r6, r3, r0
 8002828:	2efe      	cmp	r6, #254	; 0xfe
 800282a:	dd16      	ble.n	800285a <__aeabi_d2f+0x52>
 800282c:	20ff      	movs	r0, #255	; 0xff
 800282e:	2400      	movs	r4, #0
 8002830:	05c0      	lsls	r0, r0, #23
 8002832:	4320      	orrs	r0, r4
 8002834:	07c9      	lsls	r1, r1, #31
 8002836:	4308      	orrs	r0, r1
 8002838:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800283a:	2b00      	cmp	r3, #0
 800283c:	d106      	bne.n	800284c <__aeabi_d2f+0x44>
 800283e:	432c      	orrs	r4, r5
 8002840:	d026      	beq.n	8002890 <__aeabi_d2f+0x88>
 8002842:	2205      	movs	r2, #5
 8002844:	0192      	lsls	r2, r2, #6
 8002846:	0a54      	lsrs	r4, r2, #9
 8002848:	b2d8      	uxtb	r0, r3
 800284a:	e7f1      	b.n	8002830 <__aeabi_d2f+0x28>
 800284c:	4325      	orrs	r5, r4
 800284e:	d0ed      	beq.n	800282c <__aeabi_d2f+0x24>
 8002850:	2080      	movs	r0, #128	; 0x80
 8002852:	03c0      	lsls	r0, r0, #15
 8002854:	4304      	orrs	r4, r0
 8002856:	20ff      	movs	r0, #255	; 0xff
 8002858:	e7ea      	b.n	8002830 <__aeabi_d2f+0x28>
 800285a:	2e00      	cmp	r6, #0
 800285c:	dd1b      	ble.n	8002896 <__aeabi_d2f+0x8e>
 800285e:	0192      	lsls	r2, r2, #6
 8002860:	1e53      	subs	r3, r2, #1
 8002862:	419a      	sbcs	r2, r3
 8002864:	00e4      	lsls	r4, r4, #3
 8002866:	0f6d      	lsrs	r5, r5, #29
 8002868:	4322      	orrs	r2, r4
 800286a:	432a      	orrs	r2, r5
 800286c:	0753      	lsls	r3, r2, #29
 800286e:	d048      	beq.n	8002902 <__aeabi_d2f+0xfa>
 8002870:	230f      	movs	r3, #15
 8002872:	4013      	ands	r3, r2
 8002874:	2b04      	cmp	r3, #4
 8002876:	d000      	beq.n	800287a <__aeabi_d2f+0x72>
 8002878:	3204      	adds	r2, #4
 800287a:	2380      	movs	r3, #128	; 0x80
 800287c:	04db      	lsls	r3, r3, #19
 800287e:	4013      	ands	r3, r2
 8002880:	d03f      	beq.n	8002902 <__aeabi_d2f+0xfa>
 8002882:	1c70      	adds	r0, r6, #1
 8002884:	2efe      	cmp	r6, #254	; 0xfe
 8002886:	d0d1      	beq.n	800282c <__aeabi_d2f+0x24>
 8002888:	0192      	lsls	r2, r2, #6
 800288a:	0a54      	lsrs	r4, r2, #9
 800288c:	b2c0      	uxtb	r0, r0
 800288e:	e7cf      	b.n	8002830 <__aeabi_d2f+0x28>
 8002890:	2000      	movs	r0, #0
 8002892:	2400      	movs	r4, #0
 8002894:	e7cc      	b.n	8002830 <__aeabi_d2f+0x28>
 8002896:	0032      	movs	r2, r6
 8002898:	3217      	adds	r2, #23
 800289a:	db22      	blt.n	80028e2 <__aeabi_d2f+0xda>
 800289c:	2080      	movs	r0, #128	; 0x80
 800289e:	0400      	lsls	r0, r0, #16
 80028a0:	4320      	orrs	r0, r4
 80028a2:	241e      	movs	r4, #30
 80028a4:	1ba4      	subs	r4, r4, r6
 80028a6:	2c1f      	cmp	r4, #31
 80028a8:	dd1d      	ble.n	80028e6 <__aeabi_d2f+0xde>
 80028aa:	2202      	movs	r2, #2
 80028ac:	4252      	negs	r2, r2
 80028ae:	1b96      	subs	r6, r2, r6
 80028b0:	0002      	movs	r2, r0
 80028b2:	40f2      	lsrs	r2, r6
 80028b4:	0016      	movs	r6, r2
 80028b6:	2c20      	cmp	r4, #32
 80028b8:	d004      	beq.n	80028c4 <__aeabi_d2f+0xbc>
 80028ba:	4a15      	ldr	r2, [pc, #84]	; (8002910 <__aeabi_d2f+0x108>)
 80028bc:	4694      	mov	ip, r2
 80028be:	4463      	add	r3, ip
 80028c0:	4098      	lsls	r0, r3
 80028c2:	4305      	orrs	r5, r0
 80028c4:	002a      	movs	r2, r5
 80028c6:	1e53      	subs	r3, r2, #1
 80028c8:	419a      	sbcs	r2, r3
 80028ca:	4332      	orrs	r2, r6
 80028cc:	2600      	movs	r6, #0
 80028ce:	0753      	lsls	r3, r2, #29
 80028d0:	d1ce      	bne.n	8002870 <__aeabi_d2f+0x68>
 80028d2:	2480      	movs	r4, #128	; 0x80
 80028d4:	0013      	movs	r3, r2
 80028d6:	04e4      	lsls	r4, r4, #19
 80028d8:	2001      	movs	r0, #1
 80028da:	4023      	ands	r3, r4
 80028dc:	4222      	tst	r2, r4
 80028de:	d1d3      	bne.n	8002888 <__aeabi_d2f+0x80>
 80028e0:	e7b0      	b.n	8002844 <__aeabi_d2f+0x3c>
 80028e2:	2300      	movs	r3, #0
 80028e4:	e7ad      	b.n	8002842 <__aeabi_d2f+0x3a>
 80028e6:	4a0b      	ldr	r2, [pc, #44]	; (8002914 <__aeabi_d2f+0x10c>)
 80028e8:	4694      	mov	ip, r2
 80028ea:	002a      	movs	r2, r5
 80028ec:	40e2      	lsrs	r2, r4
 80028ee:	0014      	movs	r4, r2
 80028f0:	002a      	movs	r2, r5
 80028f2:	4463      	add	r3, ip
 80028f4:	409a      	lsls	r2, r3
 80028f6:	4098      	lsls	r0, r3
 80028f8:	1e55      	subs	r5, r2, #1
 80028fa:	41aa      	sbcs	r2, r5
 80028fc:	4302      	orrs	r2, r0
 80028fe:	4322      	orrs	r2, r4
 8002900:	e7e4      	b.n	80028cc <__aeabi_d2f+0xc4>
 8002902:	0033      	movs	r3, r6
 8002904:	e79e      	b.n	8002844 <__aeabi_d2f+0x3c>
 8002906:	46c0      	nop			; (mov r8, r8)
 8002908:	000007fe 	.word	0x000007fe
 800290c:	fffffc80 	.word	0xfffffc80
 8002910:	fffffca2 	.word	0xfffffca2
 8002914:	fffffc82 	.word	0xfffffc82

08002918 <__clzsi2>:
 8002918:	211c      	movs	r1, #28
 800291a:	2301      	movs	r3, #1
 800291c:	041b      	lsls	r3, r3, #16
 800291e:	4298      	cmp	r0, r3
 8002920:	d301      	bcc.n	8002926 <__clzsi2+0xe>
 8002922:	0c00      	lsrs	r0, r0, #16
 8002924:	3910      	subs	r1, #16
 8002926:	0a1b      	lsrs	r3, r3, #8
 8002928:	4298      	cmp	r0, r3
 800292a:	d301      	bcc.n	8002930 <__clzsi2+0x18>
 800292c:	0a00      	lsrs	r0, r0, #8
 800292e:	3908      	subs	r1, #8
 8002930:	091b      	lsrs	r3, r3, #4
 8002932:	4298      	cmp	r0, r3
 8002934:	d301      	bcc.n	800293a <__clzsi2+0x22>
 8002936:	0900      	lsrs	r0, r0, #4
 8002938:	3904      	subs	r1, #4
 800293a:	a202      	add	r2, pc, #8	; (adr r2, 8002944 <__clzsi2+0x2c>)
 800293c:	5c10      	ldrb	r0, [r2, r0]
 800293e:	1840      	adds	r0, r0, r1
 8002940:	4770      	bx	lr
 8002942:	46c0      	nop			; (mov r8, r8)
 8002944:	02020304 	.word	0x02020304
 8002948:	01010101 	.word	0x01010101
	...

08002954 <hex2int>:
//}



uint8_t hex2int(char ch)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	0002      	movs	r2, r0
 800295c:	1dfb      	adds	r3, r7, #7
 800295e:	701a      	strb	r2, [r3, #0]
	if (ch >= '0' && ch <= '9')
 8002960:	1dfb      	adds	r3, r7, #7
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	2b2f      	cmp	r3, #47	; 0x2f
 8002966:	d908      	bls.n	800297a <hex2int+0x26>
 8002968:	1dfb      	adds	r3, r7, #7
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	2b39      	cmp	r3, #57	; 0x39
 800296e:	d804      	bhi.n	800297a <hex2int+0x26>
		return ch - '0';
 8002970:	1dfb      	adds	r3, r7, #7
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	3b30      	subs	r3, #48	; 0x30
 8002976:	b2db      	uxtb	r3, r3
 8002978:	e01a      	b.n	80029b0 <hex2int+0x5c>
	if (ch >= 'A' && ch <= 'F')
 800297a:	1dfb      	adds	r3, r7, #7
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	2b40      	cmp	r3, #64	; 0x40
 8002980:	d908      	bls.n	8002994 <hex2int+0x40>
 8002982:	1dfb      	adds	r3, r7, #7
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	2b46      	cmp	r3, #70	; 0x46
 8002988:	d804      	bhi.n	8002994 <hex2int+0x40>
		return ch - 'A' + 10;
 800298a:	1dfb      	adds	r3, r7, #7
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	3b37      	subs	r3, #55	; 0x37
 8002990:	b2db      	uxtb	r3, r3
 8002992:	e00d      	b.n	80029b0 <hex2int+0x5c>
	if (ch >= 'a' && ch <= 'f')
 8002994:	1dfb      	adds	r3, r7, #7
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	2b60      	cmp	r3, #96	; 0x60
 800299a:	d908      	bls.n	80029ae <hex2int+0x5a>
 800299c:	1dfb      	adds	r3, r7, #7
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	2b66      	cmp	r3, #102	; 0x66
 80029a2:	d804      	bhi.n	80029ae <hex2int+0x5a>
		return ch - 'a' + 10;
 80029a4:	1dfb      	adds	r3, r7, #7
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	3b57      	subs	r3, #87	; 0x57
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	e000      	b.n	80029b0 <hex2int+0x5c>
	return -1;
 80029ae:	23ff      	movs	r3, #255	; 0xff
}
 80029b0:	0018      	movs	r0, r3
 80029b2:	46bd      	mov	sp, r7
 80029b4:	b002      	add	sp, #8
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <nmea_parser>:
		crc ^= nmea_data[i];
	}
	return crc;
}
uint8_t* nmea_parser(char *NR,uint8_t responseLenght,uint8_t *checkSum ,uint8_t *rCheckSum)
{
 80029b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029ba:	b0c1      	sub	sp, #260	; 0x104
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6178      	str	r0, [r7, #20]
 80029c0:	60fa      	str	r2, [r7, #12]
 80029c2:	60bb      	str	r3, [r7, #8]
 80029c4:	200b      	movs	r0, #11
 80029c6:	2608      	movs	r6, #8
 80029c8:	1983      	adds	r3, r0, r6
 80029ca:	19db      	adds	r3, r3, r7
 80029cc:	1c0a      	adds	r2, r1, #0
 80029ce:	701a      	strb	r2, [r3, #0]
	char (*nmeaResponse)[responseLenght];
 80029d0:	0031      	movs	r1, r6
 80029d2:	1843      	adds	r3, r0, r1
 80029d4:	19db      	adds	r3, r3, r7
 80029d6:	781e      	ldrb	r6, [r3, #0]
 80029d8:	0033      	movs	r3, r6
 80029da:	3b01      	subs	r3, #1
 80029dc:	22d0      	movs	r2, #208	; 0xd0
 80029de:	1852      	adds	r2, r2, r1
 80029e0:	19d2      	adds	r2, r2, r7
 80029e2:	6013      	str	r3, [r2, #0]
 80029e4:	603e      	str	r6, [r7, #0]
 80029e6:	2300      	movs	r3, #0
 80029e8:	607b      	str	r3, [r7, #4]
 80029ea:	6839      	ldr	r1, [r7, #0]
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	000b      	movs	r3, r1
 80029f0:	0f5b      	lsrs	r3, r3, #29
 80029f2:	0010      	movs	r0, r2
 80029f4:	00c5      	lsls	r5, r0, #3
 80029f6:	431d      	orrs	r5, r3
 80029f8:	000b      	movs	r3, r1
 80029fa:	00dc      	lsls	r4, r3, #3
	uint8_t gnssCRC = 0;
 80029fc:	23f5      	movs	r3, #245	; 0xf5
 80029fe:	2008      	movs	r0, #8
 8002a00:	181b      	adds	r3, r3, r0
 8002a02:	19db      	adds	r3, r3, r7
 8002a04:	2200      	movs	r2, #0
 8002a06:	701a      	strb	r2, [r3, #0]
	nmeaResponse=NR;
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	21cc      	movs	r1, #204	; 0xcc
 8002a0c:	180a      	adds	r2, r1, r0
 8002a0e:	19d2      	adds	r2, r2, r7
 8002a10:	6013      	str	r3, [r2, #0]
	uint8_t QOG = 0xC0;
 8002a12:	23cb      	movs	r3, #203	; 0xcb
 8002a14:	181b      	adds	r3, r3, r0
 8002a16:	19db      	adds	r3, r3, r7
 8002a18:	22c0      	movs	r2, #192	; 0xc0
 8002a1a:	701a      	strb	r2, [r3, #0]
	uint16_t courseStatus = 0x0;
 8002a1c:	23f6      	movs	r3, #246	; 0xf6
 8002a1e:	181b      	adds	r3, r3, r0
 8002a20:	19db      	adds	r3, r3, r7
 8002a22:	2200      	movs	r2, #0
 8002a24:	801a      	strh	r2, [r3, #0]
	static uint8_t GPSInformation[18] = {0};


	char *p1;
	char *p2;
	p1 = strstr(nmeaResponse[GNGGA],"$GNGGA");
 8002a26:	0032      	movs	r2, r6
 8002a28:	000c      	movs	r4, r1
 8002a2a:	180b      	adds	r3, r1, r0
 8002a2c:	19db      	adds	r3, r3, r7
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	189b      	adds	r3, r3, r2
 8002a32:	4ad2      	ldr	r2, [pc, #840]	; (8002d7c <nmea_parser+0x3c4>)
 8002a34:	0011      	movs	r1, r2
 8002a36:	0018      	movs	r0, r3
 8002a38:	f00c fb3d 	bl	800f0b6 <strstr>
 8002a3c:	0003      	movs	r3, r0
 8002a3e:	25c4      	movs	r5, #196	; 0xc4
 8002a40:	2008      	movs	r0, #8
 8002a42:	182a      	adds	r2, r5, r0
 8002a44:	19d2      	adds	r2, r2, r7
 8002a46:	6013      	str	r3, [r2, #0]
	p2 = strstr(nmeaResponse[GNRMC],"$GNRMC");
 8002a48:	4acd      	ldr	r2, [pc, #820]	; (8002d80 <nmea_parser+0x3c8>)
 8002a4a:	1823      	adds	r3, r4, r0
 8002a4c:	19db      	adds	r3, r3, r7
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	0011      	movs	r1, r2
 8002a52:	0018      	movs	r0, r3
 8002a54:	f00c fb2f 	bl	800f0b6 <strstr>
 8002a58:	0003      	movs	r3, r0
 8002a5a:	22c0      	movs	r2, #192	; 0xc0
 8002a5c:	2008      	movs	r0, #8
 8002a5e:	1811      	adds	r1, r2, r0
 8002a60:	19c9      	adds	r1, r1, r7
 8002a62:	600b      	str	r3, [r1, #0]

	if(p1 != NULL && p2 != NULL){
 8002a64:	0001      	movs	r1, r0
 8002a66:	186b      	adds	r3, r5, r1
 8002a68:	19db      	adds	r3, r3, r7
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d101      	bne.n	8002a74 <nmea_parser+0xbc>
 8002a70:	f000 fe98 	bl	80037a4 <nmea_parser+0xdec>
 8002a74:	1853      	adds	r3, r2, r1
 8002a76:	19db      	adds	r3, r3, r7
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <nmea_parser+0xca>
 8002a7e:	f000 fe91 	bl	80037a4 <nmea_parser+0xdec>


		for(uint8_t sen=0;sen<2;sen++){
 8002a82:	23f4      	movs	r3, #244	; 0xf4
 8002a84:	185b      	adds	r3, r3, r1
 8002a86:	19db      	adds	r3, r3, r7
 8002a88:	2200      	movs	r2, #0
 8002a8a:	701a      	strb	r2, [r3, #0]
 8002a8c:	e0d9      	b.n	8002c42 <nmea_parser+0x28a>
			uint8_t recvCrc=0;
 8002a8e:	23bf      	movs	r3, #191	; 0xbf
 8002a90:	2108      	movs	r1, #8
 8002a92:	185b      	adds	r3, r3, r1
 8002a94:	19db      	adds	r3, r3, r7
 8002a96:	2200      	movs	r2, #0
 8002a98:	701a      	strb	r2, [r3, #0]
			char rawData[100];
			memset(rawData,0,sizeof(rawData));
 8002a9a:	2210      	movs	r2, #16
 8002a9c:	000c      	movs	r4, r1
 8002a9e:	1853      	adds	r3, r2, r1
 8002aa0:	19db      	adds	r3, r3, r7
 8002aa2:	2264      	movs	r2, #100	; 0x64
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	f00c faad 	bl	800f006 <memset>

			char *ind1;
			char *ind2;
			ind1=strchr(nmeaResponse[sen],'$');
 8002aac:	25f4      	movs	r5, #244	; 0xf4
 8002aae:	0021      	movs	r1, r4
 8002ab0:	186b      	adds	r3, r5, r1
 8002ab2:	19db      	adds	r3, r3, r7
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	0032      	movs	r2, r6
 8002ab8:	4353      	muls	r3, r2
 8002aba:	22cc      	movs	r2, #204	; 0xcc
 8002abc:	1850      	adds	r0, r2, r1
 8002abe:	19c1      	adds	r1, r0, r7
 8002ac0:	680a      	ldr	r2, [r1, #0]
 8002ac2:	18d3      	adds	r3, r2, r3
 8002ac4:	2124      	movs	r1, #36	; 0x24
 8002ac6:	0018      	movs	r0, r3
 8002ac8:	f00c fad3 	bl	800f072 <strchr>
 8002acc:	0003      	movs	r3, r0
 8002ace:	24b8      	movs	r4, #184	; 0xb8
 8002ad0:	2208      	movs	r2, #8
 8002ad2:	18a1      	adds	r1, r4, r2
 8002ad4:	19c9      	adds	r1, r1, r7
 8002ad6:	600b      	str	r3, [r1, #0]
			ind2=strchr(nmeaResponse[sen],'*');
 8002ad8:	0011      	movs	r1, r2
 8002ada:	186b      	adds	r3, r5, r1
 8002adc:	19db      	adds	r3, r3, r7
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	0032      	movs	r2, r6
 8002ae2:	4353      	muls	r3, r2
 8002ae4:	22cc      	movs	r2, #204	; 0xcc
 8002ae6:	000d      	movs	r5, r1
 8002ae8:	1852      	adds	r2, r2, r1
 8002aea:	19d2      	adds	r2, r2, r7
 8002aec:	6812      	ldr	r2, [r2, #0]
 8002aee:	18d3      	adds	r3, r2, r3
 8002af0:	212a      	movs	r1, #42	; 0x2a
 8002af2:	0018      	movs	r0, r3
 8002af4:	f00c fabd 	bl	800f072 <strchr>
 8002af8:	0003      	movs	r3, r0
 8002afa:	21b4      	movs	r1, #180	; 0xb4
 8002afc:	194a      	adds	r2, r1, r5
 8002afe:	19d2      	adds	r2, r2, r7
 8002b00:	6013      	str	r3, [r2, #0]

			if(ind1!=NULL && ind2!=NULL){
 8002b02:	1963      	adds	r3, r4, r5
 8002b04:	19da      	adds	r2, r3, r7
 8002b06:	6813      	ldr	r3, [r2, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d100      	bne.n	8002b0e <nmea_parser+0x156>
 8002b0c:	e08a      	b.n	8002c24 <nmea_parser+0x26c>
 8002b0e:	194b      	adds	r3, r1, r5
 8002b10:	19da      	adds	r2, r3, r7
 8002b12:	6813      	ldr	r3, [r2, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d100      	bne.n	8002b1a <nmea_parser+0x162>
 8002b18:	e084      	b.n	8002c24 <nmea_parser+0x26c>
				uint8_t len = ind2-ind1;
 8002b1a:	194b      	adds	r3, r1, r5
 8002b1c:	19da      	adds	r2, r3, r7
 8002b1e:	6812      	ldr	r2, [r2, #0]
 8002b20:	1963      	adds	r3, r4, r5
 8002b22:	19d8      	adds	r0, r3, r7
 8002b24:	6803      	ldr	r3, [r0, #0]
 8002b26:	1ad2      	subs	r2, r2, r3
 8002b28:	20b3      	movs	r0, #179	; 0xb3
 8002b2a:	002c      	movs	r4, r5
 8002b2c:	1903      	adds	r3, r0, r4
 8002b2e:	19db      	adds	r3, r3, r7
 8002b30:	701a      	strb	r2, [r3, #0]
				gnssCRC = 0;
 8002b32:	22f5      	movs	r2, #245	; 0xf5
 8002b34:	0020      	movs	r0, r4
 8002b36:	1813      	adds	r3, r2, r0
 8002b38:	19db      	adds	r3, r3, r7
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	701a      	strb	r2, [r3, #0]
				recvCrc = hex2int(*(ind2+2)) | hex2int(*(ind2+1)) <<4;
 8002b3e:	000d      	movs	r5, r1
 8002b40:	180b      	adds	r3, r1, r0
 8002b42:	19da      	adds	r2, r3, r7
 8002b44:	6813      	ldr	r3, [r2, #0]
 8002b46:	3302      	adds	r3, #2
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	0018      	movs	r0, r3
 8002b4c:	f7ff ff02 	bl	8002954 <hex2int>
 8002b50:	0003      	movs	r3, r0
 8002b52:	b25c      	sxtb	r4, r3
 8002b54:	2108      	movs	r1, #8
 8002b56:	186b      	adds	r3, r5, r1
 8002b58:	19da      	adds	r2, r3, r7
 8002b5a:	6813      	ldr	r3, [r2, #0]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	0018      	movs	r0, r3
 8002b62:	f7ff fef7 	bl	8002954 <hex2int>
 8002b66:	0003      	movs	r3, r0
 8002b68:	011b      	lsls	r3, r3, #4
 8002b6a:	b25b      	sxtb	r3, r3
 8002b6c:	4323      	orrs	r3, r4
 8002b6e:	b25a      	sxtb	r2, r3
 8002b70:	23bf      	movs	r3, #191	; 0xbf
 8002b72:	2108      	movs	r1, #8
 8002b74:	185b      	adds	r3, r3, r1
 8002b76:	19db      	adds	r3, r3, r7
 8002b78:	701a      	strb	r2, [r3, #0]
				for(uint8_t i=0;i<len-1;i++){
 8002b7a:	23f3      	movs	r3, #243	; 0xf3
 8002b7c:	185b      	adds	r3, r3, r1
 8002b7e:	19db      	adds	r3, r3, r7
 8002b80:	2200      	movs	r2, #0
 8002b82:	701a      	strb	r2, [r3, #0]
 8002b84:	e02b      	b.n	8002bde <nmea_parser+0x226>
					rawData[i]=*(ind1+1+i);
 8002b86:	20f3      	movs	r0, #243	; 0xf3
 8002b88:	2108      	movs	r1, #8
 8002b8a:	1843      	adds	r3, r0, r1
 8002b8c:	19db      	adds	r3, r3, r7
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	3301      	adds	r3, #1
 8002b92:	22b8      	movs	r2, #184	; 0xb8
 8002b94:	1852      	adds	r2, r2, r1
 8002b96:	19d2      	adds	r2, r2, r7
 8002b98:	6812      	ldr	r2, [r2, #0]
 8002b9a:	18d2      	adds	r2, r2, r3
 8002b9c:	000d      	movs	r5, r1
 8002b9e:	1943      	adds	r3, r0, r5
 8002ba0:	19db      	adds	r3, r3, r7
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	7811      	ldrb	r1, [r2, #0]
 8002ba6:	2410      	movs	r4, #16
 8002ba8:	1962      	adds	r2, r4, r5
 8002baa:	19d2      	adds	r2, r2, r7
 8002bac:	54d1      	strb	r1, [r2, r3]
					gnssCRC ^= rawData[i];
 8002bae:	0029      	movs	r1, r5
 8002bb0:	1843      	adds	r3, r0, r1
 8002bb2:	19db      	adds	r3, r3, r7
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	000d      	movs	r5, r1
 8002bb8:	1862      	adds	r2, r4, r1
 8002bba:	19d2      	adds	r2, r2, r7
 8002bbc:	5cd1      	ldrb	r1, [r2, r3]
 8002bbe:	22f5      	movs	r2, #245	; 0xf5
 8002bc0:	002c      	movs	r4, r5
 8002bc2:	1913      	adds	r3, r2, r4
 8002bc4:	19db      	adds	r3, r3, r7
 8002bc6:	1912      	adds	r2, r2, r4
 8002bc8:	19d2      	adds	r2, r2, r7
 8002bca:	7812      	ldrb	r2, [r2, #0]
 8002bcc:	404a      	eors	r2, r1
 8002bce:	701a      	strb	r2, [r3, #0]
				for(uint8_t i=0;i<len-1;i++){
 8002bd0:	1903      	adds	r3, r0, r4
 8002bd2:	19db      	adds	r3, r3, r7
 8002bd4:	781a      	ldrb	r2, [r3, #0]
 8002bd6:	1903      	adds	r3, r0, r4
 8002bd8:	19db      	adds	r3, r3, r7
 8002bda:	3201      	adds	r2, #1
 8002bdc:	701a      	strb	r2, [r3, #0]
 8002bde:	23f3      	movs	r3, #243	; 0xf3
 8002be0:	2008      	movs	r0, #8
 8002be2:	181b      	adds	r3, r3, r0
 8002be4:	19db      	adds	r3, r3, r7
 8002be6:	781a      	ldrb	r2, [r3, #0]
 8002be8:	23b3      	movs	r3, #179	; 0xb3
 8002bea:	181b      	adds	r3, r3, r0
 8002bec:	19db      	adds	r3, r3, r7
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	dbc7      	blt.n	8002b86 <nmea_parser+0x1ce>

				}
				*checkSum = gnssCRC;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	21f5      	movs	r1, #245	; 0xf5
 8002bfa:	0004      	movs	r4, r0
 8002bfc:	190a      	adds	r2, r1, r4
 8002bfe:	19d2      	adds	r2, r2, r7
 8002c00:	7812      	ldrb	r2, [r2, #0]
 8002c02:	701a      	strb	r2, [r3, #0]
				*rCheckSum = recvCrc;
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	20bf      	movs	r0, #191	; 0xbf
 8002c08:	1902      	adds	r2, r0, r4
 8002c0a:	19d2      	adds	r2, r2, r7
 8002c0c:	7812      	ldrb	r2, [r2, #0]
 8002c0e:	701a      	strb	r2, [r3, #0]
			if(ind1!=NULL && ind2!=NULL){
 8002c10:	46c0      	nop			; (mov r8, r8)
			}
			else{
				return NULL;
			}
			if(recvCrc != gnssCRC){
 8002c12:	1903      	adds	r3, r0, r4
 8002c14:	19da      	adds	r2, r3, r7
 8002c16:	190b      	adds	r3, r1, r4
 8002c18:	19db      	adds	r3, r3, r7
 8002c1a:	7812      	ldrb	r2, [r2, #0]
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d006      	beq.n	8002c30 <nmea_parser+0x278>
 8002c22:	e002      	b.n	8002c2a <nmea_parser+0x272>
				return NULL;
 8002c24:	2300      	movs	r3, #0
 8002c26:	f000 fdc1 	bl	80037ac <nmea_parser+0xdf4>
				return NULL;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	f000 fdbe 	bl	80037ac <nmea_parser+0xdf4>
		for(uint8_t sen=0;sen<2;sen++){
 8002c30:	21f4      	movs	r1, #244	; 0xf4
 8002c32:	2008      	movs	r0, #8
 8002c34:	180b      	adds	r3, r1, r0
 8002c36:	19db      	adds	r3, r3, r7
 8002c38:	781a      	ldrb	r2, [r3, #0]
 8002c3a:	180b      	adds	r3, r1, r0
 8002c3c:	19db      	adds	r3, r3, r7
 8002c3e:	3201      	adds	r2, #1
 8002c40:	701a      	strb	r2, [r3, #0]
 8002c42:	23f4      	movs	r3, #244	; 0xf4
 8002c44:	2108      	movs	r1, #8
 8002c46:	185b      	adds	r3, r3, r1
 8002c48:	19db      	adds	r3, r3, r7
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d800      	bhi.n	8002c52 <nmea_parser+0x29a>
 8002c50:	e71d      	b.n	8002a8e <nmea_parser+0xd6>
		// }

		//data is valid. go on
		uint8_t GNGGAComma[15];
		uint8_t GNRMCComma[15];
		memset(GNGGAComma, 0, sizeof(GNGGAComma)); // for automatically-allocated arrays
 8002c52:	23a4      	movs	r3, #164	; 0xa4
 8002c54:	000c      	movs	r4, r1
 8002c56:	191b      	adds	r3, r3, r4
 8002c58:	19db      	adds	r3, r3, r7
 8002c5a:	220f      	movs	r2, #15
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	0018      	movs	r0, r3
 8002c60:	f00c f9d1 	bl	800f006 <memset>
		memset(GNRMCComma, 0, sizeof(GNRMCComma)); // for automatically-allocated arrays
 8002c64:	2394      	movs	r3, #148	; 0x94
 8002c66:	191b      	adds	r3, r3, r4
 8002c68:	19db      	adds	r3, r3, r7
 8002c6a:	220f      	movs	r2, #15
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	0018      	movs	r0, r3
 8002c70:	f00c f9c9 	bl	800f006 <memset>


		uint8_t GNGGACInd=0;
 8002c74:	23f2      	movs	r3, #242	; 0xf2
 8002c76:	0021      	movs	r1, r4
 8002c78:	185b      	adds	r3, r3, r1
 8002c7a:	19db      	adds	r3, r3, r7
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	701a      	strb	r2, [r3, #0]
		uint8_t GNRMCCInd=0;
 8002c80:	23f1      	movs	r3, #241	; 0xf1
 8002c82:	185b      	adds	r3, r3, r1
 8002c84:	19db      	adds	r3, r3, r7
 8002c86:	2200      	movs	r2, #0
 8002c88:	701a      	strb	r2, [r3, #0]
		uint32_t latitude;
		uint32_t longitude;
		uint8_t tempDataIndex = 0;
 8002c8a:	23e7      	movs	r3, #231	; 0xe7
 8002c8c:	185b      	adds	r3, r3, r1
 8002c8e:	19db      	adds	r3, r3, r7
 8002c90:	2200      	movs	r2, #0
 8002c92:	701a      	strb	r2, [r3, #0]




		//-------store all parameter's comma
		for(uint8_t i=0;i<responseLenght;i++ ){
 8002c94:	23e6      	movs	r3, #230	; 0xe6
 8002c96:	185b      	adds	r3, r3, r1
 8002c98:	19db      	adds	r3, r3, r7
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	701a      	strb	r2, [r3, #0]
 8002c9e:	e048      	b.n	8002d32 <nmea_parser+0x37a>
			if(nmeaResponse[GNGGA][i]==44){
 8002ca0:	0032      	movs	r2, r6
 8002ca2:	23cc      	movs	r3, #204	; 0xcc
 8002ca4:	2408      	movs	r4, #8
 8002ca6:	191b      	adds	r3, r3, r4
 8002ca8:	19db      	adds	r3, r3, r7
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	189a      	adds	r2, r3, r2
 8002cae:	21e6      	movs	r1, #230	; 0xe6
 8002cb0:	190b      	adds	r3, r1, r4
 8002cb2:	19db      	adds	r3, r3, r7
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	5cd3      	ldrb	r3, [r2, r3]
 8002cb8:	2b2c      	cmp	r3, #44	; 0x2c
 8002cba:	d112      	bne.n	8002ce2 <nmea_parser+0x32a>
				GNGGAComma[GNGGACInd]=i;
 8002cbc:	20f2      	movs	r0, #242	; 0xf2
 8002cbe:	1903      	adds	r3, r0, r4
 8002cc0:	19db      	adds	r3, r3, r7
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	22a4      	movs	r2, #164	; 0xa4
 8002cc6:	1912      	adds	r2, r2, r4
 8002cc8:	19d2      	adds	r2, r2, r7
 8002cca:	1909      	adds	r1, r1, r4
 8002ccc:	19c9      	adds	r1, r1, r7
 8002cce:	7809      	ldrb	r1, [r1, #0]
 8002cd0:	54d1      	strb	r1, [r2, r3]
				GNGGACInd++;
 8002cd2:	0021      	movs	r1, r4
 8002cd4:	1843      	adds	r3, r0, r1
 8002cd6:	19db      	adds	r3, r3, r7
 8002cd8:	781a      	ldrb	r2, [r3, #0]
 8002cda:	1843      	adds	r3, r0, r1
 8002cdc:	19db      	adds	r3, r3, r7
 8002cde:	3201      	adds	r2, #1
 8002ce0:	701a      	strb	r2, [r3, #0]
			}
			if(nmeaResponse[GNRMC][i]==44){
 8002ce2:	21e6      	movs	r1, #230	; 0xe6
 8002ce4:	2408      	movs	r4, #8
 8002ce6:	190b      	adds	r3, r1, r4
 8002ce8:	19db      	adds	r3, r3, r7
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	22cc      	movs	r2, #204	; 0xcc
 8002cee:	1912      	adds	r2, r2, r4
 8002cf0:	19d2      	adds	r2, r2, r7
 8002cf2:	6812      	ldr	r2, [r2, #0]
 8002cf4:	5cd3      	ldrb	r3, [r2, r3]
 8002cf6:	2b2c      	cmp	r3, #44	; 0x2c
 8002cf8:	d112      	bne.n	8002d20 <nmea_parser+0x368>
				GNRMCComma[GNRMCCInd]=i;
 8002cfa:	20f1      	movs	r0, #241	; 0xf1
 8002cfc:	1903      	adds	r3, r0, r4
 8002cfe:	19db      	adds	r3, r3, r7
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	2294      	movs	r2, #148	; 0x94
 8002d04:	1912      	adds	r2, r2, r4
 8002d06:	19d2      	adds	r2, r2, r7
 8002d08:	1909      	adds	r1, r1, r4
 8002d0a:	19c9      	adds	r1, r1, r7
 8002d0c:	7809      	ldrb	r1, [r1, #0]
 8002d0e:	54d1      	strb	r1, [r2, r3]
				GNRMCCInd++;
 8002d10:	0021      	movs	r1, r4
 8002d12:	1843      	adds	r3, r0, r1
 8002d14:	19db      	adds	r3, r3, r7
 8002d16:	781a      	ldrb	r2, [r3, #0]
 8002d18:	1843      	adds	r3, r0, r1
 8002d1a:	19db      	adds	r3, r3, r7
 8002d1c:	3201      	adds	r2, #1
 8002d1e:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0;i<responseLenght;i++ ){
 8002d20:	21e6      	movs	r1, #230	; 0xe6
 8002d22:	2008      	movs	r0, #8
 8002d24:	180b      	adds	r3, r1, r0
 8002d26:	19db      	adds	r3, r3, r7
 8002d28:	781a      	ldrb	r2, [r3, #0]
 8002d2a:	180b      	adds	r3, r1, r0
 8002d2c:	19db      	adds	r3, r3, r7
 8002d2e:	3201      	adds	r2, #1
 8002d30:	701a      	strb	r2, [r3, #0]
 8002d32:	23e6      	movs	r3, #230	; 0xe6
 8002d34:	2108      	movs	r1, #8
 8002d36:	185b      	adds	r3, r3, r1
 8002d38:	19da      	adds	r2, r3, r7
 8002d3a:	230b      	movs	r3, #11
 8002d3c:	185b      	adds	r3, r3, r1
 8002d3e:	19db      	adds	r3, r3, r7
 8002d40:	7812      	ldrb	r2, [r2, #0]
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d3ab      	bcc.n	8002ca0 <nmea_parser+0x2e8>
			}
		}

		//------------------------Time and date Stamp------------------------------------
		memset(tempData,0,sizeof(tempData));
 8002d48:	2384      	movs	r3, #132	; 0x84
 8002d4a:	000c      	movs	r4, r1
 8002d4c:	185b      	adds	r3, r3, r1
 8002d4e:	19db      	adds	r3, r3, r7
 8002d50:	220f      	movs	r2, #15
 8002d52:	2100      	movs	r1, #0
 8002d54:	0018      	movs	r0, r3
 8002d56:	f00c f956 	bl	800f006 <memset>
		tempDataIndex = 0;
 8002d5a:	23e7      	movs	r3, #231	; 0xe7
 8002d5c:	0021      	movs	r1, r4
 8002d5e:	185b      	adds	r3, r3, r1
 8002d60:	19db      	adds	r3, r3, r7
 8002d62:	2200      	movs	r2, #0
 8002d64:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[8]+1;x<GNRMCComma[9];x++){
 8002d66:	2394      	movs	r3, #148	; 0x94
 8002d68:	185b      	adds	r3, r3, r1
 8002d6a:	19db      	adds	r3, r3, r7
 8002d6c:	7a1a      	ldrb	r2, [r3, #8]
 8002d6e:	23e5      	movs	r3, #229	; 0xe5
 8002d70:	185b      	adds	r3, r3, r1
 8002d72:	19db      	adds	r3, r3, r7
 8002d74:	3201      	adds	r2, #1
 8002d76:	701a      	strb	r2, [r3, #0]
 8002d78:	e025      	b.n	8002dc6 <nmea_parser+0x40e>
 8002d7a:	46c0      	nop			; (mov r8, r8)
 8002d7c:	080134a0 	.word	0x080134a0
 8002d80:	080134a8 	.word	0x080134a8
			tempData[tempDataIndex]= nmeaResponse[GNRMC][x];
 8002d84:	20e5      	movs	r0, #229	; 0xe5
 8002d86:	2508      	movs	r5, #8
 8002d88:	1943      	adds	r3, r0, r5
 8002d8a:	19db      	adds	r3, r3, r7
 8002d8c:	781a      	ldrb	r2, [r3, #0]
 8002d8e:	24e7      	movs	r4, #231	; 0xe7
 8002d90:	1963      	adds	r3, r4, r5
 8002d92:	19db      	adds	r3, r3, r7
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	21cc      	movs	r1, #204	; 0xcc
 8002d98:	1949      	adds	r1, r1, r5
 8002d9a:	19c9      	adds	r1, r1, r7
 8002d9c:	6809      	ldr	r1, [r1, #0]
 8002d9e:	5c89      	ldrb	r1, [r1, r2]
 8002da0:	2284      	movs	r2, #132	; 0x84
 8002da2:	1952      	adds	r2, r2, r5
 8002da4:	19d2      	adds	r2, r2, r7
 8002da6:	54d1      	strb	r1, [r2, r3]
			tempDataIndex++;
 8002da8:	0029      	movs	r1, r5
 8002daa:	1863      	adds	r3, r4, r1
 8002dac:	19db      	adds	r3, r3, r7
 8002dae:	781a      	ldrb	r2, [r3, #0]
 8002db0:	1863      	adds	r3, r4, r1
 8002db2:	19db      	adds	r3, r3, r7
 8002db4:	3201      	adds	r2, #1
 8002db6:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[8]+1;x<GNRMCComma[9];x++){
 8002db8:	1843      	adds	r3, r0, r1
 8002dba:	19db      	adds	r3, r3, r7
 8002dbc:	781a      	ldrb	r2, [r3, #0]
 8002dbe:	1843      	adds	r3, r0, r1
 8002dc0:	19db      	adds	r3, r3, r7
 8002dc2:	3201      	adds	r2, #1
 8002dc4:	701a      	strb	r2, [r3, #0]
 8002dc6:	2394      	movs	r3, #148	; 0x94
 8002dc8:	2008      	movs	r0, #8
 8002dca:	181b      	adds	r3, r3, r0
 8002dcc:	19db      	adds	r3, r3, r7
 8002dce:	7a5b      	ldrb	r3, [r3, #9]
 8002dd0:	22e5      	movs	r2, #229	; 0xe5
 8002dd2:	1812      	adds	r2, r2, r0
 8002dd4:	19d2      	adds	r2, r2, r7
 8002dd6:	7812      	ldrb	r2, [r2, #0]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d3d3      	bcc.n	8002d84 <nmea_parser+0x3cc>
		}
		char tempData2[4];

		//Year (1 byte)
		memset(tempData2,0,sizeof(tempData2));
 8002ddc:	2480      	movs	r4, #128	; 0x80
 8002dde:	1823      	adds	r3, r4, r0
 8002de0:	19db      	adds	r3, r3, r7
 8002de2:	2204      	movs	r2, #4
 8002de4:	2100      	movs	r1, #0
 8002de6:	0018      	movs	r0, r3
 8002de8:	f00c f90d 	bl	800f006 <memset>
		tempData2[0]=tempData[4];
 8002dec:	2584      	movs	r5, #132	; 0x84
 8002dee:	2008      	movs	r0, #8
 8002df0:	182b      	adds	r3, r5, r0
 8002df2:	19db      	adds	r3, r3, r7
 8002df4:	791a      	ldrb	r2, [r3, #4]
 8002df6:	0021      	movs	r1, r4
 8002df8:	180b      	adds	r3, r1, r0
 8002dfa:	19db      	adds	r3, r3, r7
 8002dfc:	701a      	strb	r2, [r3, #0]
		tempData2[1]=tempData[5];
 8002dfe:	182b      	adds	r3, r5, r0
 8002e00:	19db      	adds	r3, r3, r7
 8002e02:	795a      	ldrb	r2, [r3, #5]
 8002e04:	000c      	movs	r4, r1
 8002e06:	1823      	adds	r3, r4, r0
 8002e08:	19db      	adds	r3, r3, r7
 8002e0a:	705a      	strb	r2, [r3, #1]
		GPSInformation[0] = (uint8_t)atoi(tempData2);
 8002e0c:	1823      	adds	r3, r4, r0
 8002e0e:	19db      	adds	r3, r3, r7
 8002e10:	0018      	movs	r0, r3
 8002e12:	f00c f899 	bl	800ef48 <atoi>
 8002e16:	0003      	movs	r3, r0
 8002e18:	b2da      	uxtb	r2, r3
 8002e1a:	4bd8      	ldr	r3, [pc, #864]	; (800317c <nmea_parser+0x7c4>)
 8002e1c:	701a      	strb	r2, [r3, #0]

		//month (1 byte)
		memset(tempData2,0,sizeof(tempData2));
 8002e1e:	2008      	movs	r0, #8
 8002e20:	1823      	adds	r3, r4, r0
 8002e22:	19db      	adds	r3, r3, r7
 8002e24:	2204      	movs	r2, #4
 8002e26:	2100      	movs	r1, #0
 8002e28:	0018      	movs	r0, r3
 8002e2a:	f00c f8ec 	bl	800f006 <memset>
		tempData2[0]=tempData[2];
 8002e2e:	2008      	movs	r0, #8
 8002e30:	182b      	adds	r3, r5, r0
 8002e32:	19db      	adds	r3, r3, r7
 8002e34:	789a      	ldrb	r2, [r3, #2]
 8002e36:	0021      	movs	r1, r4
 8002e38:	180b      	adds	r3, r1, r0
 8002e3a:	19db      	adds	r3, r3, r7
 8002e3c:	701a      	strb	r2, [r3, #0]
		tempData2[1]=tempData[3];
 8002e3e:	182b      	adds	r3, r5, r0
 8002e40:	19db      	adds	r3, r3, r7
 8002e42:	78da      	ldrb	r2, [r3, #3]
 8002e44:	000c      	movs	r4, r1
 8002e46:	1823      	adds	r3, r4, r0
 8002e48:	19db      	adds	r3, r3, r7
 8002e4a:	705a      	strb	r2, [r3, #1]
		GPSInformation[1] = atoi(tempData2);
 8002e4c:	1823      	adds	r3, r4, r0
 8002e4e:	19db      	adds	r3, r3, r7
 8002e50:	0018      	movs	r0, r3
 8002e52:	f00c f879 	bl	800ef48 <atoi>
 8002e56:	0003      	movs	r3, r0
 8002e58:	b2da      	uxtb	r2, r3
 8002e5a:	4bc8      	ldr	r3, [pc, #800]	; (800317c <nmea_parser+0x7c4>)
 8002e5c:	705a      	strb	r2, [r3, #1]
		//day (1 byte)
		memset(tempData2,0,sizeof(tempData2));
 8002e5e:	2008      	movs	r0, #8
 8002e60:	1823      	adds	r3, r4, r0
 8002e62:	19db      	adds	r3, r3, r7
 8002e64:	2204      	movs	r2, #4
 8002e66:	2100      	movs	r1, #0
 8002e68:	0018      	movs	r0, r3
 8002e6a:	f00c f8cc 	bl	800f006 <memset>
		tempData2[0]=tempData[0];
 8002e6e:	2008      	movs	r0, #8
 8002e70:	182b      	adds	r3, r5, r0
 8002e72:	19db      	adds	r3, r3, r7
 8002e74:	781a      	ldrb	r2, [r3, #0]
 8002e76:	0021      	movs	r1, r4
 8002e78:	0004      	movs	r4, r0
 8002e7a:	190b      	adds	r3, r1, r4
 8002e7c:	19db      	adds	r3, r3, r7
 8002e7e:	701a      	strb	r2, [r3, #0]
		tempData2[1]=tempData[1];
 8002e80:	192b      	adds	r3, r5, r4
 8002e82:	19db      	adds	r3, r3, r7
 8002e84:	785a      	ldrb	r2, [r3, #1]
 8002e86:	190b      	adds	r3, r1, r4
 8002e88:	19db      	adds	r3, r3, r7
 8002e8a:	705a      	strb	r2, [r3, #1]
		GPSInformation[2] = atoi(tempData2);
 8002e8c:	190b      	adds	r3, r1, r4
 8002e8e:	19db      	adds	r3, r3, r7
 8002e90:	0018      	movs	r0, r3
 8002e92:	f00c f859 	bl	800ef48 <atoi>
 8002e96:	0003      	movs	r3, r0
 8002e98:	b2da      	uxtb	r2, r3
 8002e9a:	4bb8      	ldr	r3, [pc, #736]	; (800317c <nmea_parser+0x7c4>)
 8002e9c:	709a      	strb	r2, [r3, #2]

		memset(tempData,0,sizeof(tempData));
 8002e9e:	192b      	adds	r3, r5, r4
 8002ea0:	19db      	adds	r3, r3, r7
 8002ea2:	220f      	movs	r2, #15
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	f00c f8ad 	bl	800f006 <memset>
		tempDataIndex = 0;
 8002eac:	22e7      	movs	r2, #231	; 0xe7
 8002eae:	1913      	adds	r3, r2, r4
 8002eb0:	19db      	adds	r3, r3, r7
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[0]+1;x<GNRMCComma[1]-4;x++){
 8002eb6:	2394      	movs	r3, #148	; 0x94
 8002eb8:	191b      	adds	r3, r3, r4
 8002eba:	19db      	adds	r3, r3, r7
 8002ebc:	781a      	ldrb	r2, [r3, #0]
 8002ebe:	23e4      	movs	r3, #228	; 0xe4
 8002ec0:	191b      	adds	r3, r3, r4
 8002ec2:	19db      	adds	r3, r3, r7
 8002ec4:	3201      	adds	r2, #1
 8002ec6:	701a      	strb	r2, [r3, #0]
 8002ec8:	e020      	b.n	8002f0c <nmea_parser+0x554>
			tempData[tempDataIndex]= nmeaResponse[GNRMC][x];
 8002eca:	20e4      	movs	r0, #228	; 0xe4
 8002ecc:	2508      	movs	r5, #8
 8002ece:	1943      	adds	r3, r0, r5
 8002ed0:	19db      	adds	r3, r3, r7
 8002ed2:	781a      	ldrb	r2, [r3, #0]
 8002ed4:	24e7      	movs	r4, #231	; 0xe7
 8002ed6:	1963      	adds	r3, r4, r5
 8002ed8:	19db      	adds	r3, r3, r7
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	21cc      	movs	r1, #204	; 0xcc
 8002ede:	1949      	adds	r1, r1, r5
 8002ee0:	19c9      	adds	r1, r1, r7
 8002ee2:	6809      	ldr	r1, [r1, #0]
 8002ee4:	5c89      	ldrb	r1, [r1, r2]
 8002ee6:	2284      	movs	r2, #132	; 0x84
 8002ee8:	1952      	adds	r2, r2, r5
 8002eea:	19d2      	adds	r2, r2, r7
 8002eec:	54d1      	strb	r1, [r2, r3]
			tempDataIndex++;
 8002eee:	0029      	movs	r1, r5
 8002ef0:	1863      	adds	r3, r4, r1
 8002ef2:	19db      	adds	r3, r3, r7
 8002ef4:	781a      	ldrb	r2, [r3, #0]
 8002ef6:	1863      	adds	r3, r4, r1
 8002ef8:	19db      	adds	r3, r3, r7
 8002efa:	3201      	adds	r2, #1
 8002efc:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[0]+1;x<GNRMCComma[1]-4;x++){
 8002efe:	1843      	adds	r3, r0, r1
 8002f00:	19db      	adds	r3, r3, r7
 8002f02:	781a      	ldrb	r2, [r3, #0]
 8002f04:	1843      	adds	r3, r0, r1
 8002f06:	19db      	adds	r3, r3, r7
 8002f08:	3201      	adds	r2, #1
 8002f0a:	701a      	strb	r2, [r3, #0]
 8002f0c:	23e4      	movs	r3, #228	; 0xe4
 8002f0e:	2108      	movs	r1, #8
 8002f10:	185b      	adds	r3, r3, r1
 8002f12:	19db      	adds	r3, r3, r7
 8002f14:	781a      	ldrb	r2, [r3, #0]
 8002f16:	2394      	movs	r3, #148	; 0x94
 8002f18:	185b      	adds	r3, r3, r1
 8002f1a:	19db      	adds	r3, r3, r7
 8002f1c:	785b      	ldrb	r3, [r3, #1]
 8002f1e:	3b04      	subs	r3, #4
 8002f20:	429a      	cmp	r2, r3
 8002f22:	dbd2      	blt.n	8002eca <nmea_parser+0x512>
		}
		//hour(1 byte)
		memset(tempData2,0,sizeof(tempData2));
 8002f24:	2480      	movs	r4, #128	; 0x80
 8002f26:	1863      	adds	r3, r4, r1
 8002f28:	19db      	adds	r3, r3, r7
 8002f2a:	2204      	movs	r2, #4
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	0018      	movs	r0, r3
 8002f30:	f00c f869 	bl	800f006 <memset>
		tempData2[0]=tempData[0];
 8002f34:	2584      	movs	r5, #132	; 0x84
 8002f36:	2008      	movs	r0, #8
 8002f38:	182b      	adds	r3, r5, r0
 8002f3a:	19db      	adds	r3, r3, r7
 8002f3c:	781a      	ldrb	r2, [r3, #0]
 8002f3e:	0021      	movs	r1, r4
 8002f40:	180b      	adds	r3, r1, r0
 8002f42:	19db      	adds	r3, r3, r7
 8002f44:	701a      	strb	r2, [r3, #0]
		tempData2[1]=tempData[1];
 8002f46:	182b      	adds	r3, r5, r0
 8002f48:	19db      	adds	r3, r3, r7
 8002f4a:	785a      	ldrb	r2, [r3, #1]
 8002f4c:	000c      	movs	r4, r1
 8002f4e:	1823      	adds	r3, r4, r0
 8002f50:	19db      	adds	r3, r3, r7
 8002f52:	705a      	strb	r2, [r3, #1]
		GPSInformation[3] = (uint8_t)atoi(tempData2);
 8002f54:	1823      	adds	r3, r4, r0
 8002f56:	19db      	adds	r3, r3, r7
 8002f58:	0018      	movs	r0, r3
 8002f5a:	f00b fff5 	bl	800ef48 <atoi>
 8002f5e:	0003      	movs	r3, r0
 8002f60:	b2da      	uxtb	r2, r3
 8002f62:	4b86      	ldr	r3, [pc, #536]	; (800317c <nmea_parser+0x7c4>)
 8002f64:	70da      	strb	r2, [r3, #3]
		//minutes(1 byte)
		memset(tempData2,0,sizeof(tempData2));
 8002f66:	2008      	movs	r0, #8
 8002f68:	1823      	adds	r3, r4, r0
 8002f6a:	19db      	adds	r3, r3, r7
 8002f6c:	2204      	movs	r2, #4
 8002f6e:	2100      	movs	r1, #0
 8002f70:	0018      	movs	r0, r3
 8002f72:	f00c f848 	bl	800f006 <memset>
		tempData2[0]=tempData[2];
 8002f76:	2008      	movs	r0, #8
 8002f78:	182b      	adds	r3, r5, r0
 8002f7a:	19db      	adds	r3, r3, r7
 8002f7c:	789a      	ldrb	r2, [r3, #2]
 8002f7e:	0021      	movs	r1, r4
 8002f80:	180b      	adds	r3, r1, r0
 8002f82:	19db      	adds	r3, r3, r7
 8002f84:	701a      	strb	r2, [r3, #0]
		tempData2[1]=tempData[3];
 8002f86:	182b      	adds	r3, r5, r0
 8002f88:	19db      	adds	r3, r3, r7
 8002f8a:	78da      	ldrb	r2, [r3, #3]
 8002f8c:	000c      	movs	r4, r1
 8002f8e:	1823      	adds	r3, r4, r0
 8002f90:	19db      	adds	r3, r3, r7
 8002f92:	705a      	strb	r2, [r3, #1]
		GPSInformation[4] = (uint8_t)atoi(tempData2);
 8002f94:	1823      	adds	r3, r4, r0
 8002f96:	19db      	adds	r3, r3, r7
 8002f98:	0018      	movs	r0, r3
 8002f9a:	f00b ffd5 	bl	800ef48 <atoi>
 8002f9e:	0003      	movs	r3, r0
 8002fa0:	b2da      	uxtb	r2, r3
 8002fa2:	4b76      	ldr	r3, [pc, #472]	; (800317c <nmea_parser+0x7c4>)
 8002fa4:	711a      	strb	r2, [r3, #4]
		//seconds(1 byte)
		memset(tempData2,0,sizeof(tempData2));
 8002fa6:	2008      	movs	r0, #8
 8002fa8:	1823      	adds	r3, r4, r0
 8002faa:	19db      	adds	r3, r3, r7
 8002fac:	2204      	movs	r2, #4
 8002fae:	2100      	movs	r1, #0
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	f00c f828 	bl	800f006 <memset>
		tempData2[0]=tempData[4];
 8002fb6:	2008      	movs	r0, #8
 8002fb8:	182b      	adds	r3, r5, r0
 8002fba:	19db      	adds	r3, r3, r7
 8002fbc:	791a      	ldrb	r2, [r3, #4]
 8002fbe:	0021      	movs	r1, r4
 8002fc0:	0004      	movs	r4, r0
 8002fc2:	190b      	adds	r3, r1, r4
 8002fc4:	19db      	adds	r3, r3, r7
 8002fc6:	701a      	strb	r2, [r3, #0]
		tempData2[1]=tempData[5];
 8002fc8:	192b      	adds	r3, r5, r4
 8002fca:	19db      	adds	r3, r3, r7
 8002fcc:	795a      	ldrb	r2, [r3, #5]
 8002fce:	190b      	adds	r3, r1, r4
 8002fd0:	19db      	adds	r3, r3, r7
 8002fd2:	705a      	strb	r2, [r3, #1]
		GPSInformation[5] = (uint8_t)atoi(tempData2);
 8002fd4:	190b      	adds	r3, r1, r4
 8002fd6:	19db      	adds	r3, r3, r7
 8002fd8:	0018      	movs	r0, r3
 8002fda:	f00b ffb5 	bl	800ef48 <atoi>
 8002fde:	0003      	movs	r3, r0
 8002fe0:	b2da      	uxtb	r2, r3
 8002fe2:	4b66      	ldr	r3, [pc, #408]	; (800317c <nmea_parser+0x7c4>)
 8002fe4:	715a      	strb	r2, [r3, #5]
		//--------------------------------time/date stamp end-------------------------------------------------

		//-----Quantity of GPS information satellites(1 byte, left 4 bit for gps info len, right 4 bit for qty of sats)
		memset(tempData,0,sizeof(tempData));
 8002fe6:	192b      	adds	r3, r5, r4
 8002fe8:	19db      	adds	r3, r3, r7
 8002fea:	220f      	movs	r2, #15
 8002fec:	2100      	movs	r1, #0
 8002fee:	0018      	movs	r0, r3
 8002ff0:	f00c f809 	bl	800f006 <memset>
		tempDataIndex = 0;
 8002ff4:	23e7      	movs	r3, #231	; 0xe7
 8002ff6:	191b      	adds	r3, r3, r4
 8002ff8:	19db      	adds	r3, r3, r7
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNGGAComma[6]+1;x<GNGGAComma[7];x++){
 8002ffe:	23a4      	movs	r3, #164	; 0xa4
 8003000:	191b      	adds	r3, r3, r4
 8003002:	19db      	adds	r3, r3, r7
 8003004:	799a      	ldrb	r2, [r3, #6]
 8003006:	23e3      	movs	r3, #227	; 0xe3
 8003008:	191b      	adds	r3, r3, r4
 800300a:	19db      	adds	r3, r3, r7
 800300c:	3201      	adds	r2, #1
 800300e:	701a      	strb	r2, [r3, #0]
 8003010:	e022      	b.n	8003058 <nmea_parser+0x6a0>
			tempData[tempDataIndex] = nmeaResponse[GNGGA][x];
 8003012:	0032      	movs	r2, r6
 8003014:	23cc      	movs	r3, #204	; 0xcc
 8003016:	2508      	movs	r5, #8
 8003018:	195b      	adds	r3, r3, r5
 800301a:	19db      	adds	r3, r3, r7
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	1899      	adds	r1, r3, r2
 8003020:	20e3      	movs	r0, #227	; 0xe3
 8003022:	1943      	adds	r3, r0, r5
 8003024:	19db      	adds	r3, r3, r7
 8003026:	781a      	ldrb	r2, [r3, #0]
 8003028:	24e7      	movs	r4, #231	; 0xe7
 800302a:	1963      	adds	r3, r4, r5
 800302c:	19db      	adds	r3, r3, r7
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	5c89      	ldrb	r1, [r1, r2]
 8003032:	2284      	movs	r2, #132	; 0x84
 8003034:	1952      	adds	r2, r2, r5
 8003036:	19d2      	adds	r2, r2, r7
 8003038:	54d1      	strb	r1, [r2, r3]
			tempDataIndex++;
 800303a:	0029      	movs	r1, r5
 800303c:	1863      	adds	r3, r4, r1
 800303e:	19db      	adds	r3, r3, r7
 8003040:	781a      	ldrb	r2, [r3, #0]
 8003042:	1863      	adds	r3, r4, r1
 8003044:	19db      	adds	r3, r3, r7
 8003046:	3201      	adds	r2, #1
 8003048:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNGGAComma[6]+1;x<GNGGAComma[7];x++){
 800304a:	1843      	adds	r3, r0, r1
 800304c:	19db      	adds	r3, r3, r7
 800304e:	781a      	ldrb	r2, [r3, #0]
 8003050:	1843      	adds	r3, r0, r1
 8003052:	19db      	adds	r3, r3, r7
 8003054:	3201      	adds	r2, #1
 8003056:	701a      	strb	r2, [r3, #0]
 8003058:	23a4      	movs	r3, #164	; 0xa4
 800305a:	2508      	movs	r5, #8
 800305c:	195b      	adds	r3, r3, r5
 800305e:	19db      	adds	r3, r3, r7
 8003060:	79db      	ldrb	r3, [r3, #7]
 8003062:	22e3      	movs	r2, #227	; 0xe3
 8003064:	1952      	adds	r2, r2, r5
 8003066:	19d2      	adds	r2, r2, r7
 8003068:	7812      	ldrb	r2, [r2, #0]
 800306a:	429a      	cmp	r2, r3
 800306c:	d3d1      	bcc.n	8003012 <nmea_parser+0x65a>
		}
		QOG |= (atoi(tempData));
 800306e:	2484      	movs	r4, #132	; 0x84
 8003070:	1963      	adds	r3, r4, r5
 8003072:	19db      	adds	r3, r3, r7
 8003074:	0018      	movs	r0, r3
 8003076:	f00b ff67 	bl	800ef48 <atoi>
 800307a:	0003      	movs	r3, r0
 800307c:	b25a      	sxtb	r2, r3
 800307e:	21cb      	movs	r1, #203	; 0xcb
 8003080:	0028      	movs	r0, r5
 8003082:	180b      	adds	r3, r1, r0
 8003084:	19db      	adds	r3, r3, r7
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	b25b      	sxtb	r3, r3
 800308a:	4313      	orrs	r3, r2
 800308c:	b25a      	sxtb	r2, r3
 800308e:	180b      	adds	r3, r1, r0
 8003090:	19db      	adds	r3, r3, r7
 8003092:	701a      	strb	r2, [r3, #0]
		GPSInformation[6] = QOG;
 8003094:	4b39      	ldr	r3, [pc, #228]	; (800317c <nmea_parser+0x7c4>)
 8003096:	180a      	adds	r2, r1, r0
 8003098:	19d2      	adds	r2, r2, r7
 800309a:	7812      	ldrb	r2, [r2, #0]
 800309c:	719a      	strb	r2, [r3, #6]
		//-------------------------------------QOG END------------------------------------------------------


		//------------------------------------latitude (4 bytes)--------------------------------------
		// char *ptr1;
		memset(tempData,0,sizeof(tempData));
 800309e:	0005      	movs	r5, r0
 80030a0:	1823      	adds	r3, r4, r0
 80030a2:	19db      	adds	r3, r3, r7
 80030a4:	220f      	movs	r2, #15
 80030a6:	2100      	movs	r1, #0
 80030a8:	0018      	movs	r0, r3
 80030aa:	f00b ffac 	bl	800f006 <memset>
		memset(tempData2,0,sizeof(tempData2));
 80030ae:	2380      	movs	r3, #128	; 0x80
 80030b0:	002c      	movs	r4, r5
 80030b2:	191b      	adds	r3, r3, r4
 80030b4:	19db      	adds	r3, r3, r7
 80030b6:	2204      	movs	r2, #4
 80030b8:	2100      	movs	r1, #0
 80030ba:	0018      	movs	r0, r3
 80030bc:	f00b ffa3 	bl	800f006 <memset>
		tempDataIndex = 0;
 80030c0:	23e7      	movs	r3, #231	; 0xe7
 80030c2:	0021      	movs	r1, r4
 80030c4:	185b      	adds	r3, r3, r1
 80030c6:	19db      	adds	r3, r3, r7
 80030c8:	2200      	movs	r2, #0
 80030ca:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[2]+1;x<GNRMCComma[3];x++){
 80030cc:	2394      	movs	r3, #148	; 0x94
 80030ce:	185b      	adds	r3, r3, r1
 80030d0:	19db      	adds	r3, r3, r7
 80030d2:	789a      	ldrb	r2, [r3, #2]
 80030d4:	23e2      	movs	r3, #226	; 0xe2
 80030d6:	185b      	adds	r3, r3, r1
 80030d8:	19db      	adds	r3, r3, r7
 80030da:	3201      	adds	r2, #1
 80030dc:	701a      	strb	r2, [r3, #0]
 80030de:	e020      	b.n	8003122 <nmea_parser+0x76a>
			tempData[tempDataIndex]= nmeaResponse[GNRMC][x];
 80030e0:	20e2      	movs	r0, #226	; 0xe2
 80030e2:	2508      	movs	r5, #8
 80030e4:	1943      	adds	r3, r0, r5
 80030e6:	19db      	adds	r3, r3, r7
 80030e8:	781a      	ldrb	r2, [r3, #0]
 80030ea:	24e7      	movs	r4, #231	; 0xe7
 80030ec:	1963      	adds	r3, r4, r5
 80030ee:	19db      	adds	r3, r3, r7
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	21cc      	movs	r1, #204	; 0xcc
 80030f4:	1949      	adds	r1, r1, r5
 80030f6:	19c9      	adds	r1, r1, r7
 80030f8:	6809      	ldr	r1, [r1, #0]
 80030fa:	5c89      	ldrb	r1, [r1, r2]
 80030fc:	2284      	movs	r2, #132	; 0x84
 80030fe:	1952      	adds	r2, r2, r5
 8003100:	19d2      	adds	r2, r2, r7
 8003102:	54d1      	strb	r1, [r2, r3]
			tempDataIndex++;
 8003104:	0029      	movs	r1, r5
 8003106:	1863      	adds	r3, r4, r1
 8003108:	19db      	adds	r3, r3, r7
 800310a:	781a      	ldrb	r2, [r3, #0]
 800310c:	1863      	adds	r3, r4, r1
 800310e:	19db      	adds	r3, r3, r7
 8003110:	3201      	adds	r2, #1
 8003112:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[2]+1;x<GNRMCComma[3];x++){
 8003114:	1843      	adds	r3, r0, r1
 8003116:	19db      	adds	r3, r3, r7
 8003118:	781a      	ldrb	r2, [r3, #0]
 800311a:	1843      	adds	r3, r0, r1
 800311c:	19db      	adds	r3, r3, r7
 800311e:	3201      	adds	r2, #1
 8003120:	701a      	strb	r2, [r3, #0]
 8003122:	2394      	movs	r3, #148	; 0x94
 8003124:	2408      	movs	r4, #8
 8003126:	191b      	adds	r3, r3, r4
 8003128:	19db      	adds	r3, r3, r7
 800312a:	78db      	ldrb	r3, [r3, #3]
 800312c:	22e2      	movs	r2, #226	; 0xe2
 800312e:	1912      	adds	r2, r2, r4
 8003130:	19d2      	adds	r2, r2, r7
 8003132:	7812      	ldrb	r2, [r2, #0]
 8003134:	429a      	cmp	r2, r3
 8003136:	d3d3      	bcc.n	80030e0 <nmea_parser+0x728>
		}
		tempData2[0]=tempData[0];
 8003138:	2184      	movs	r1, #132	; 0x84
 800313a:	190b      	adds	r3, r1, r4
 800313c:	19db      	adds	r3, r3, r7
 800313e:	781a      	ldrb	r2, [r3, #0]
 8003140:	2080      	movs	r0, #128	; 0x80
 8003142:	1903      	adds	r3, r0, r4
 8003144:	19db      	adds	r3, r3, r7
 8003146:	701a      	strb	r2, [r3, #0]
		tempData2[1]=tempData[1];
 8003148:	190b      	adds	r3, r1, r4
 800314a:	19db      	adds	r3, r3, r7
 800314c:	785a      	ldrb	r2, [r3, #1]
 800314e:	0021      	movs	r1, r4
 8003150:	1843      	adds	r3, r0, r1
 8003152:	19db      	adds	r3, r3, r7
 8003154:	705a      	strb	r2, [r3, #1]
		uint8_t t1=2;
 8003156:	23e1      	movs	r3, #225	; 0xe1
 8003158:	185b      	adds	r3, r3, r1
 800315a:	19db      	adds	r3, r3, r7
 800315c:	2202      	movs	r2, #2
 800315e:	701a      	strb	r2, [r3, #0]
		uint8_t t2=0;
 8003160:	23e0      	movs	r3, #224	; 0xe0
 8003162:	185b      	adds	r3, r3, r1
 8003164:	19db      	adds	r3, r3, r7
 8003166:	2200      	movs	r2, #0
 8003168:	701a      	strb	r2, [r3, #0]
		char tB[9];
		memset(tB,0,sizeof(tB));
 800316a:	2374      	movs	r3, #116	; 0x74
 800316c:	185b      	adds	r3, r3, r1
 800316e:	19db      	adds	r3, r3, r7
 8003170:	2209      	movs	r2, #9
 8003172:	2100      	movs	r1, #0
 8003174:	0018      	movs	r0, r3
 8003176:	f00b ff46 	bl	800f006 <memset>
		while(tempData[t1]!=NULL){
 800317a:	e02f      	b.n	80031dc <nmea_parser+0x824>
 800317c:	200002d4 	.word	0x200002d4
			if(tempData[t1]!='.'){
 8003180:	21e1      	movs	r1, #225	; 0xe1
 8003182:	2008      	movs	r0, #8
 8003184:	180b      	adds	r3, r1, r0
 8003186:	19db      	adds	r3, r3, r7
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	2484      	movs	r4, #132	; 0x84
 800318c:	1822      	adds	r2, r4, r0
 800318e:	19d2      	adds	r2, r2, r7
 8003190:	5cd3      	ldrb	r3, [r2, r3]
 8003192:	2b2e      	cmp	r3, #46	; 0x2e
 8003194:	d019      	beq.n	80031ca <nmea_parser+0x812>
				tB[t2]=tempData[t1];
 8003196:	0005      	movs	r5, r0
 8003198:	180b      	adds	r3, r1, r0
 800319a:	19db      	adds	r3, r3, r7
 800319c:	781a      	ldrb	r2, [r3, #0]
 800319e:	20e0      	movs	r0, #224	; 0xe0
 80031a0:	0029      	movs	r1, r5
 80031a2:	1843      	adds	r3, r0, r1
 80031a4:	19db      	adds	r3, r3, r7
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	000d      	movs	r5, r1
 80031aa:	1861      	adds	r1, r4, r1
 80031ac:	19c9      	adds	r1, r1, r7
 80031ae:	5c89      	ldrb	r1, [r1, r2]
 80031b0:	2274      	movs	r2, #116	; 0x74
 80031b2:	002c      	movs	r4, r5
 80031b4:	1912      	adds	r2, r2, r4
 80031b6:	19d2      	adds	r2, r2, r7
 80031b8:	54d1      	strb	r1, [r2, r3]
				t2++;
 80031ba:	0021      	movs	r1, r4
 80031bc:	1843      	adds	r3, r0, r1
 80031be:	19db      	adds	r3, r3, r7
 80031c0:	781a      	ldrb	r2, [r3, #0]
 80031c2:	1843      	adds	r3, r0, r1
 80031c4:	19db      	adds	r3, r3, r7
 80031c6:	3201      	adds	r2, #1
 80031c8:	701a      	strb	r2, [r3, #0]
			}
			t1++;
 80031ca:	21e1      	movs	r1, #225	; 0xe1
 80031cc:	2008      	movs	r0, #8
 80031ce:	180b      	adds	r3, r1, r0
 80031d0:	19db      	adds	r3, r3, r7
 80031d2:	781a      	ldrb	r2, [r3, #0]
 80031d4:	180b      	adds	r3, r1, r0
 80031d6:	19db      	adds	r3, r3, r7
 80031d8:	3201      	adds	r2, #1
 80031da:	701a      	strb	r2, [r3, #0]
		while(tempData[t1]!=NULL){
 80031dc:	23e1      	movs	r3, #225	; 0xe1
 80031de:	2008      	movs	r0, #8
 80031e0:	181b      	adds	r3, r3, r0
 80031e2:	19db      	adds	r3, r3, r7
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	2284      	movs	r2, #132	; 0x84
 80031e8:	1812      	adds	r2, r2, r0
 80031ea:	19d2      	adds	r2, r2, r7
 80031ec:	5cd3      	ldrb	r3, [r2, r3]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1c6      	bne.n	8003180 <nmea_parser+0x7c8>
		}
		latitude=atoi(tB);
 80031f2:	2374      	movs	r3, #116	; 0x74
 80031f4:	0004      	movs	r4, r0
 80031f6:	181b      	adds	r3, r3, r0
 80031f8:	19db      	adds	r3, r3, r7
 80031fa:	0018      	movs	r0, r3
 80031fc:	f00b fea4 	bl	800ef48 <atoi>
 8003200:	0003      	movs	r3, r0
 8003202:	22ec      	movs	r2, #236	; 0xec
 8003204:	0020      	movs	r0, r4
 8003206:	1811      	adds	r1, r2, r0
 8003208:	19c9      	adds	r1, r1, r7
 800320a:	600b      	str	r3, [r1, #0]
		if(t2==4){
 800320c:	23e0      	movs	r3, #224	; 0xe0
 800320e:	181b      	adds	r3, r3, r0
 8003210:	19db      	adds	r3, r3, r7
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	2b04      	cmp	r3, #4
 8003216:	d109      	bne.n	800322c <nmea_parser+0x874>
			latitude*=100;
 8003218:	0011      	movs	r1, r2
 800321a:	1813      	adds	r3, r2, r0
 800321c:	19db      	adds	r3, r3, r7
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2264      	movs	r2, #100	; 0x64
 8003222:	4353      	muls	r3, r2
 8003224:	180a      	adds	r2, r1, r0
 8003226:	19d2      	adds	r2, r2, r7
 8003228:	6013      	str	r3, [r2, #0]
 800322a:	e011      	b.n	8003250 <nmea_parser+0x898>
		}
		else if(t2==5){
 800322c:	23e0      	movs	r3, #224	; 0xe0
 800322e:	2008      	movs	r0, #8
 8003230:	181b      	adds	r3, r3, r0
 8003232:	19db      	adds	r3, r3, r7
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	2b05      	cmp	r3, #5
 8003238:	d10a      	bne.n	8003250 <nmea_parser+0x898>
			latitude*=10;
 800323a:	21ec      	movs	r1, #236	; 0xec
 800323c:	180b      	adds	r3, r1, r0
 800323e:	19db      	adds	r3, r3, r7
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	0013      	movs	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	189b      	adds	r3, r3, r2
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	180a      	adds	r2, r1, r0
 800324c:	19d2      	adds	r2, r2, r7
 800324e:	6013      	str	r3, [r2, #0]
		}

		latitude=latitude*3;
 8003250:	24ec      	movs	r4, #236	; 0xec
 8003252:	2008      	movs	r0, #8
 8003254:	1823      	adds	r3, r4, r0
 8003256:	19db      	adds	r3, r3, r7
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	0013      	movs	r3, r2
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	189b      	adds	r3, r3, r2
 8003260:	1822      	adds	r2, r4, r0
 8003262:	19d2      	adds	r2, r2, r7
 8003264:	6013      	str	r3, [r2, #0]

		latitude+= (atoi(tempData2)*60*30000);
 8003266:	2580      	movs	r5, #128	; 0x80
 8003268:	182b      	adds	r3, r5, r0
 800326a:	19db      	adds	r3, r3, r7
 800326c:	0018      	movs	r0, r3
 800326e:	f00b fe6b 	bl	800ef48 <atoi>
 8003272:	0003      	movs	r3, r0
 8003274:	4aae      	ldr	r2, [pc, #696]	; (8003530 <nmea_parser+0xb78>)
 8003276:	4353      	muls	r3, r2
 8003278:	001a      	movs	r2, r3
 800327a:	2008      	movs	r0, #8
 800327c:	1823      	adds	r3, r4, r0
 800327e:	19db      	adds	r3, r3, r7
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	189b      	adds	r3, r3, r2
 8003284:	0021      	movs	r1, r4
 8003286:	180a      	adds	r2, r1, r0
 8003288:	19d2      	adds	r2, r2, r7
 800328a:	6013      	str	r3, [r2, #0]

		GPSInformation[7] = latitude>>24;
 800328c:	180b      	adds	r3, r1, r0
 800328e:	19db      	adds	r3, r3, r7
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	0e1b      	lsrs	r3, r3, #24
 8003294:	b2da      	uxtb	r2, r3
 8003296:	4ba7      	ldr	r3, [pc, #668]	; (8003534 <nmea_parser+0xb7c>)
 8003298:	71da      	strb	r2, [r3, #7]
		GPSInformation[8] = latitude>>16;
 800329a:	180b      	adds	r3, r1, r0
 800329c:	19db      	adds	r3, r3, r7
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	0c1b      	lsrs	r3, r3, #16
 80032a2:	b2da      	uxtb	r2, r3
 80032a4:	4ba3      	ldr	r3, [pc, #652]	; (8003534 <nmea_parser+0xb7c>)
 80032a6:	721a      	strb	r2, [r3, #8]
		GPSInformation[9] = latitude>>8;
 80032a8:	180b      	adds	r3, r1, r0
 80032aa:	19db      	adds	r3, r3, r7
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	0a1b      	lsrs	r3, r3, #8
 80032b0:	b2da      	uxtb	r2, r3
 80032b2:	4ba0      	ldr	r3, [pc, #640]	; (8003534 <nmea_parser+0xb7c>)
 80032b4:	725a      	strb	r2, [r3, #9]
		GPSInformation[10] = latitude;
 80032b6:	180b      	adds	r3, r1, r0
 80032b8:	19db      	adds	r3, r3, r7
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	b2da      	uxtb	r2, r3
 80032be:	4b9d      	ldr	r3, [pc, #628]	; (8003534 <nmea_parser+0xb7c>)
 80032c0:	729a      	strb	r2, [r3, #10]



		//------------------------------------longitude (4 bytes)--------------------------------------
		// char *ptr2;
		memset(tempData,0,sizeof(tempData));
 80032c2:	2384      	movs	r3, #132	; 0x84
 80032c4:	0004      	movs	r4, r0
 80032c6:	191b      	adds	r3, r3, r4
 80032c8:	19db      	adds	r3, r3, r7
 80032ca:	220f      	movs	r2, #15
 80032cc:	2100      	movs	r1, #0
 80032ce:	0018      	movs	r0, r3
 80032d0:	f00b fe99 	bl	800f006 <memset>
		memset(tempData2,0,sizeof(tempData2));
 80032d4:	192b      	adds	r3, r5, r4
 80032d6:	19db      	adds	r3, r3, r7
 80032d8:	2204      	movs	r2, #4
 80032da:	2100      	movs	r1, #0
 80032dc:	0018      	movs	r0, r3
 80032de:	f00b fe92 	bl	800f006 <memset>
		tempDataIndex = 0;
 80032e2:	23e7      	movs	r3, #231	; 0xe7
 80032e4:	0020      	movs	r0, r4
 80032e6:	181b      	adds	r3, r3, r0
 80032e8:	19db      	adds	r3, r3, r7
 80032ea:	2200      	movs	r2, #0
 80032ec:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[4]+1;x<GNRMCComma[5];x++){
 80032ee:	2394      	movs	r3, #148	; 0x94
 80032f0:	181b      	adds	r3, r3, r0
 80032f2:	19db      	adds	r3, r3, r7
 80032f4:	791a      	ldrb	r2, [r3, #4]
 80032f6:	23df      	movs	r3, #223	; 0xdf
 80032f8:	181b      	adds	r3, r3, r0
 80032fa:	19db      	adds	r3, r3, r7
 80032fc:	3201      	adds	r2, #1
 80032fe:	701a      	strb	r2, [r3, #0]
 8003300:	e020      	b.n	8003344 <nmea_parser+0x98c>
			tempData[tempDataIndex]= nmeaResponse[GNRMC][x];
 8003302:	20df      	movs	r0, #223	; 0xdf
 8003304:	2508      	movs	r5, #8
 8003306:	1943      	adds	r3, r0, r5
 8003308:	19db      	adds	r3, r3, r7
 800330a:	781a      	ldrb	r2, [r3, #0]
 800330c:	24e7      	movs	r4, #231	; 0xe7
 800330e:	1963      	adds	r3, r4, r5
 8003310:	19db      	adds	r3, r3, r7
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	21cc      	movs	r1, #204	; 0xcc
 8003316:	1949      	adds	r1, r1, r5
 8003318:	19c9      	adds	r1, r1, r7
 800331a:	6809      	ldr	r1, [r1, #0]
 800331c:	5c89      	ldrb	r1, [r1, r2]
 800331e:	2284      	movs	r2, #132	; 0x84
 8003320:	1952      	adds	r2, r2, r5
 8003322:	19d2      	adds	r2, r2, r7
 8003324:	54d1      	strb	r1, [r2, r3]
			tempDataIndex++;
 8003326:	0029      	movs	r1, r5
 8003328:	1863      	adds	r3, r4, r1
 800332a:	19db      	adds	r3, r3, r7
 800332c:	781a      	ldrb	r2, [r3, #0]
 800332e:	1863      	adds	r3, r4, r1
 8003330:	19db      	adds	r3, r3, r7
 8003332:	3201      	adds	r2, #1
 8003334:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[4]+1;x<GNRMCComma[5];x++){
 8003336:	1843      	adds	r3, r0, r1
 8003338:	19db      	adds	r3, r3, r7
 800333a:	781a      	ldrb	r2, [r3, #0]
 800333c:	1843      	adds	r3, r0, r1
 800333e:	19db      	adds	r3, r3, r7
 8003340:	3201      	adds	r2, #1
 8003342:	701a      	strb	r2, [r3, #0]
 8003344:	2394      	movs	r3, #148	; 0x94
 8003346:	2408      	movs	r4, #8
 8003348:	191b      	adds	r3, r3, r4
 800334a:	19db      	adds	r3, r3, r7
 800334c:	795b      	ldrb	r3, [r3, #5]
 800334e:	22df      	movs	r2, #223	; 0xdf
 8003350:	1912      	adds	r2, r2, r4
 8003352:	19d2      	adds	r2, r2, r7
 8003354:	7812      	ldrb	r2, [r2, #0]
 8003356:	429a      	cmp	r2, r3
 8003358:	d3d3      	bcc.n	8003302 <nmea_parser+0x94a>
		}

		tempData2[0]=tempData[0];
 800335a:	2184      	movs	r1, #132	; 0x84
 800335c:	190b      	adds	r3, r1, r4
 800335e:	19db      	adds	r3, r3, r7
 8003360:	781a      	ldrb	r2, [r3, #0]
 8003362:	2080      	movs	r0, #128	; 0x80
 8003364:	1903      	adds	r3, r0, r4
 8003366:	19db      	adds	r3, r3, r7
 8003368:	701a      	strb	r2, [r3, #0]
		tempData2[1]=tempData[1];
 800336a:	190b      	adds	r3, r1, r4
 800336c:	19db      	adds	r3, r3, r7
 800336e:	785a      	ldrb	r2, [r3, #1]
 8003370:	1903      	adds	r3, r0, r4
 8003372:	19db      	adds	r3, r3, r7
 8003374:	705a      	strb	r2, [r3, #1]
		tempData2[2]=tempData[2];
 8003376:	190b      	adds	r3, r1, r4
 8003378:	19db      	adds	r3, r3, r7
 800337a:	789a      	ldrb	r2, [r3, #2]
 800337c:	0021      	movs	r1, r4
 800337e:	1843      	adds	r3, r0, r1
 8003380:	19db      	adds	r3, r3, r7
 8003382:	709a      	strb	r2, [r3, #2]
		memset(tB,0,sizeof(tB));
 8003384:	2374      	movs	r3, #116	; 0x74
 8003386:	000c      	movs	r4, r1
 8003388:	185b      	adds	r3, r3, r1
 800338a:	19db      	adds	r3, r3, r7
 800338c:	2209      	movs	r2, #9
 800338e:	2100      	movs	r1, #0
 8003390:	0018      	movs	r0, r3
 8003392:	f00b fe38 	bl	800f006 <memset>
		t1=3;
 8003396:	23e1      	movs	r3, #225	; 0xe1
 8003398:	0021      	movs	r1, r4
 800339a:	185b      	adds	r3, r3, r1
 800339c:	19db      	adds	r3, r3, r7
 800339e:	2203      	movs	r2, #3
 80033a0:	701a      	strb	r2, [r3, #0]
		t2=0;
 80033a2:	23e0      	movs	r3, #224	; 0xe0
 80033a4:	185b      	adds	r3, r3, r1
 80033a6:	19db      	adds	r3, r3, r7
 80033a8:	2200      	movs	r2, #0
 80033aa:	701a      	strb	r2, [r3, #0]
		while(tempData[t1]!=NULL){
 80033ac:	e02d      	b.n	800340a <nmea_parser+0xa52>
			if(tempData[t1]!='.'){
 80033ae:	21e1      	movs	r1, #225	; 0xe1
 80033b0:	2008      	movs	r0, #8
 80033b2:	180b      	adds	r3, r1, r0
 80033b4:	19db      	adds	r3, r3, r7
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	2484      	movs	r4, #132	; 0x84
 80033ba:	1822      	adds	r2, r4, r0
 80033bc:	19d2      	adds	r2, r2, r7
 80033be:	5cd3      	ldrb	r3, [r2, r3]
 80033c0:	2b2e      	cmp	r3, #46	; 0x2e
 80033c2:	d019      	beq.n	80033f8 <nmea_parser+0xa40>
				tB[t2]=tempData[t1];
 80033c4:	0005      	movs	r5, r0
 80033c6:	180b      	adds	r3, r1, r0
 80033c8:	19db      	adds	r3, r3, r7
 80033ca:	781a      	ldrb	r2, [r3, #0]
 80033cc:	20e0      	movs	r0, #224	; 0xe0
 80033ce:	0029      	movs	r1, r5
 80033d0:	1843      	adds	r3, r0, r1
 80033d2:	19db      	adds	r3, r3, r7
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	000d      	movs	r5, r1
 80033d8:	1861      	adds	r1, r4, r1
 80033da:	19c9      	adds	r1, r1, r7
 80033dc:	5c89      	ldrb	r1, [r1, r2]
 80033de:	2274      	movs	r2, #116	; 0x74
 80033e0:	002c      	movs	r4, r5
 80033e2:	1912      	adds	r2, r2, r4
 80033e4:	19d2      	adds	r2, r2, r7
 80033e6:	54d1      	strb	r1, [r2, r3]
				t2++;
 80033e8:	0021      	movs	r1, r4
 80033ea:	1843      	adds	r3, r0, r1
 80033ec:	19db      	adds	r3, r3, r7
 80033ee:	781a      	ldrb	r2, [r3, #0]
 80033f0:	1843      	adds	r3, r0, r1
 80033f2:	19db      	adds	r3, r3, r7
 80033f4:	3201      	adds	r2, #1
 80033f6:	701a      	strb	r2, [r3, #0]
			}
			t1++;
 80033f8:	21e1      	movs	r1, #225	; 0xe1
 80033fa:	2008      	movs	r0, #8
 80033fc:	180b      	adds	r3, r1, r0
 80033fe:	19db      	adds	r3, r3, r7
 8003400:	781a      	ldrb	r2, [r3, #0]
 8003402:	180b      	adds	r3, r1, r0
 8003404:	19db      	adds	r3, r3, r7
 8003406:	3201      	adds	r2, #1
 8003408:	701a      	strb	r2, [r3, #0]
		while(tempData[t1]!=NULL){
 800340a:	23e1      	movs	r3, #225	; 0xe1
 800340c:	2008      	movs	r0, #8
 800340e:	181b      	adds	r3, r3, r0
 8003410:	19db      	adds	r3, r3, r7
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	2284      	movs	r2, #132	; 0x84
 8003416:	1812      	adds	r2, r2, r0
 8003418:	19d2      	adds	r2, r2, r7
 800341a:	5cd3      	ldrb	r3, [r2, r3]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1c6      	bne.n	80033ae <nmea_parser+0x9f6>
		}
		longitude=atoi(tB);
 8003420:	2374      	movs	r3, #116	; 0x74
 8003422:	0004      	movs	r4, r0
 8003424:	181b      	adds	r3, r3, r0
 8003426:	19db      	adds	r3, r3, r7
 8003428:	0018      	movs	r0, r3
 800342a:	f00b fd8d 	bl	800ef48 <atoi>
 800342e:	0003      	movs	r3, r0
 8003430:	22e8      	movs	r2, #232	; 0xe8
 8003432:	0020      	movs	r0, r4
 8003434:	1811      	adds	r1, r2, r0
 8003436:	19c9      	adds	r1, r1, r7
 8003438:	600b      	str	r3, [r1, #0]
		if(t2==4){
 800343a:	23e0      	movs	r3, #224	; 0xe0
 800343c:	181b      	adds	r3, r3, r0
 800343e:	19db      	adds	r3, r3, r7
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	2b04      	cmp	r3, #4
 8003444:	d109      	bne.n	800345a <nmea_parser+0xaa2>
			longitude*=100;
 8003446:	0011      	movs	r1, r2
 8003448:	1813      	adds	r3, r2, r0
 800344a:	19db      	adds	r3, r3, r7
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2264      	movs	r2, #100	; 0x64
 8003450:	4353      	muls	r3, r2
 8003452:	180a      	adds	r2, r1, r0
 8003454:	19d2      	adds	r2, r2, r7
 8003456:	6013      	str	r3, [r2, #0]
 8003458:	e011      	b.n	800347e <nmea_parser+0xac6>
		}
		else if(t2==5){
 800345a:	23e0      	movs	r3, #224	; 0xe0
 800345c:	2008      	movs	r0, #8
 800345e:	181b      	adds	r3, r3, r0
 8003460:	19db      	adds	r3, r3, r7
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	2b05      	cmp	r3, #5
 8003466:	d10a      	bne.n	800347e <nmea_parser+0xac6>
			longitude*=10;
 8003468:	21e8      	movs	r1, #232	; 0xe8
 800346a:	180b      	adds	r3, r1, r0
 800346c:	19db      	adds	r3, r3, r7
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	0013      	movs	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	189b      	adds	r3, r3, r2
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	180a      	adds	r2, r1, r0
 800347a:	19d2      	adds	r2, r2, r7
 800347c:	6013      	str	r3, [r2, #0]
		}
		longitude=longitude*3;
 800347e:	24e8      	movs	r4, #232	; 0xe8
 8003480:	2008      	movs	r0, #8
 8003482:	1823      	adds	r3, r4, r0
 8003484:	19db      	adds	r3, r3, r7
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	0013      	movs	r3, r2
 800348a:	005b      	lsls	r3, r3, #1
 800348c:	189b      	adds	r3, r3, r2
 800348e:	1822      	adds	r2, r4, r0
 8003490:	19d2      	adds	r2, r2, r7
 8003492:	6013      	str	r3, [r2, #0]
		longitude+= (atoi(tempData2)*60*30000);
 8003494:	2580      	movs	r5, #128	; 0x80
 8003496:	182b      	adds	r3, r5, r0
 8003498:	19db      	adds	r3, r3, r7
 800349a:	0018      	movs	r0, r3
 800349c:	f00b fd54 	bl	800ef48 <atoi>
 80034a0:	0003      	movs	r3, r0
 80034a2:	4a23      	ldr	r2, [pc, #140]	; (8003530 <nmea_parser+0xb78>)
 80034a4:	4353      	muls	r3, r2
 80034a6:	001a      	movs	r2, r3
 80034a8:	2008      	movs	r0, #8
 80034aa:	1823      	adds	r3, r4, r0
 80034ac:	19db      	adds	r3, r3, r7
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	189b      	adds	r3, r3, r2
 80034b2:	0021      	movs	r1, r4
 80034b4:	180a      	adds	r2, r1, r0
 80034b6:	19d2      	adds	r2, r2, r7
 80034b8:	6013      	str	r3, [r2, #0]
		GPSInformation[11] = longitude>>24;
 80034ba:	180b      	adds	r3, r1, r0
 80034bc:	19db      	adds	r3, r3, r7
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	0e1b      	lsrs	r3, r3, #24
 80034c2:	b2da      	uxtb	r2, r3
 80034c4:	4b1b      	ldr	r3, [pc, #108]	; (8003534 <nmea_parser+0xb7c>)
 80034c6:	72da      	strb	r2, [r3, #11]
		GPSInformation[12] = longitude>>16;
 80034c8:	180b      	adds	r3, r1, r0
 80034ca:	19db      	adds	r3, r3, r7
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	0c1b      	lsrs	r3, r3, #16
 80034d0:	b2da      	uxtb	r2, r3
 80034d2:	4b18      	ldr	r3, [pc, #96]	; (8003534 <nmea_parser+0xb7c>)
 80034d4:	731a      	strb	r2, [r3, #12]
		GPSInformation[13] = longitude>>8;
 80034d6:	180b      	adds	r3, r1, r0
 80034d8:	19db      	adds	r3, r3, r7
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	0a1b      	lsrs	r3, r3, #8
 80034de:	b2da      	uxtb	r2, r3
 80034e0:	4b14      	ldr	r3, [pc, #80]	; (8003534 <nmea_parser+0xb7c>)
 80034e2:	735a      	strb	r2, [r3, #13]
		GPSInformation[14] = longitude;
 80034e4:	180b      	adds	r3, r1, r0
 80034e6:	19db      	adds	r3, r3, r7
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	b2da      	uxtb	r2, r3
 80034ec:	4b11      	ldr	r3, [pc, #68]	; (8003534 <nmea_parser+0xb7c>)
 80034ee:	739a      	strb	r2, [r3, #14]
		//------------------------------------longitude end--------------------------------------



		//----------------------------------speed----------------------------------------------------
		memset(tempData,0,sizeof(tempData));
 80034f0:	2384      	movs	r3, #132	; 0x84
 80034f2:	0004      	movs	r4, r0
 80034f4:	191b      	adds	r3, r3, r4
 80034f6:	19db      	adds	r3, r3, r7
 80034f8:	220f      	movs	r2, #15
 80034fa:	2100      	movs	r1, #0
 80034fc:	0018      	movs	r0, r3
 80034fe:	f00b fd82 	bl	800f006 <memset>
		memset(tempData2,0,sizeof(tempData2));
 8003502:	192b      	adds	r3, r5, r4
 8003504:	19db      	adds	r3, r3, r7
 8003506:	2204      	movs	r2, #4
 8003508:	2100      	movs	r1, #0
 800350a:	0018      	movs	r0, r3
 800350c:	f00b fd7b 	bl	800f006 <memset>
		tempDataIndex = 0;
 8003510:	23e7      	movs	r3, #231	; 0xe7
 8003512:	0020      	movs	r0, r4
 8003514:	181b      	adds	r3, r3, r0
 8003516:	19db      	adds	r3, r3, r7
 8003518:	2200      	movs	r2, #0
 800351a:	701a      	strb	r2, [r3, #0]
		float speedinf;
		for(uint8_t x =GNRMCComma[6]+1;x<GNRMCComma[7];x++){
 800351c:	2394      	movs	r3, #148	; 0x94
 800351e:	181b      	adds	r3, r3, r0
 8003520:	19db      	adds	r3, r3, r7
 8003522:	799a      	ldrb	r2, [r3, #6]
 8003524:	23d7      	movs	r3, #215	; 0xd7
 8003526:	181b      	adds	r3, r3, r0
 8003528:	19db      	adds	r3, r3, r7
 800352a:	3201      	adds	r2, #1
 800352c:	701a      	strb	r2, [r3, #0]
 800352e:	e024      	b.n	800357a <nmea_parser+0xbc2>
 8003530:	001b7740 	.word	0x001b7740
 8003534:	200002d4 	.word	0x200002d4
			tempData[tempDataIndex]= nmeaResponse[GNRMC][x];
 8003538:	20d7      	movs	r0, #215	; 0xd7
 800353a:	2508      	movs	r5, #8
 800353c:	1943      	adds	r3, r0, r5
 800353e:	19db      	adds	r3, r3, r7
 8003540:	781a      	ldrb	r2, [r3, #0]
 8003542:	24e7      	movs	r4, #231	; 0xe7
 8003544:	1963      	adds	r3, r4, r5
 8003546:	19db      	adds	r3, r3, r7
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	21cc      	movs	r1, #204	; 0xcc
 800354c:	1949      	adds	r1, r1, r5
 800354e:	19c9      	adds	r1, r1, r7
 8003550:	6809      	ldr	r1, [r1, #0]
 8003552:	5c89      	ldrb	r1, [r1, r2]
 8003554:	2284      	movs	r2, #132	; 0x84
 8003556:	1952      	adds	r2, r2, r5
 8003558:	19d2      	adds	r2, r2, r7
 800355a:	54d1      	strb	r1, [r2, r3]
			tempDataIndex++;
 800355c:	0029      	movs	r1, r5
 800355e:	1863      	adds	r3, r4, r1
 8003560:	19db      	adds	r3, r3, r7
 8003562:	781a      	ldrb	r2, [r3, #0]
 8003564:	1863      	adds	r3, r4, r1
 8003566:	19db      	adds	r3, r3, r7
 8003568:	3201      	adds	r2, #1
 800356a:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[6]+1;x<GNRMCComma[7];x++){
 800356c:	1843      	adds	r3, r0, r1
 800356e:	19db      	adds	r3, r3, r7
 8003570:	781a      	ldrb	r2, [r3, #0]
 8003572:	1843      	adds	r3, r0, r1
 8003574:	19db      	adds	r3, r3, r7
 8003576:	3201      	adds	r2, #1
 8003578:	701a      	strb	r2, [r3, #0]
 800357a:	2394      	movs	r3, #148	; 0x94
 800357c:	2508      	movs	r5, #8
 800357e:	195b      	adds	r3, r3, r5
 8003580:	19db      	adds	r3, r3, r7
 8003582:	79db      	ldrb	r3, [r3, #7]
 8003584:	22d7      	movs	r2, #215	; 0xd7
 8003586:	1952      	adds	r2, r2, r5
 8003588:	19d2      	adds	r2, r2, r7
 800358a:	7812      	ldrb	r2, [r2, #0]
 800358c:	429a      	cmp	r2, r3
 800358e:	d3d3      	bcc.n	8003538 <nmea_parser+0xb80>
		}

		speedinf = strtof(tempData,NULL);
 8003590:	2384      	movs	r3, #132	; 0x84
 8003592:	195b      	adds	r3, r3, r5
 8003594:	19db      	adds	r3, r3, r7
 8003596:	2100      	movs	r1, #0
 8003598:	0018      	movs	r0, r3
 800359a:	f00c fbcf 	bl	800fd3c <strtof>
 800359e:	1c03      	adds	r3, r0, #0
 80035a0:	24d8      	movs	r4, #216	; 0xd8
 80035a2:	1962      	adds	r2, r4, r5
 80035a4:	19d2      	adds	r2, r2, r7
 80035a6:	6013      	str	r3, [r2, #0]
		speedinf= speedinf * 1.85;
 80035a8:	1963      	adds	r3, r4, r5
 80035aa:	19db      	adds	r3, r3, r7
 80035ac:	6818      	ldr	r0, [r3, #0]
 80035ae:	f7ff f8e3 	bl	8002778 <__aeabi_f2d>
 80035b2:	4a80      	ldr	r2, [pc, #512]	; (80037b4 <nmea_parser+0xdfc>)
 80035b4:	4b80      	ldr	r3, [pc, #512]	; (80037b8 <nmea_parser+0xe00>)
 80035b6:	f7fe fa37 	bl	8001a28 <__aeabi_dmul>
 80035ba:	0002      	movs	r2, r0
 80035bc:	000b      	movs	r3, r1
 80035be:	0010      	movs	r0, r2
 80035c0:	0019      	movs	r1, r3
 80035c2:	f7ff f921 	bl	8002808 <__aeabi_d2f>
 80035c6:	1c03      	adds	r3, r0, #0
 80035c8:	1962      	adds	r2, r4, r5
 80035ca:	19d2      	adds	r2, r2, r7
 80035cc:	6013      	str	r3, [r2, #0]
		if(speedinf>255){
 80035ce:	497b      	ldr	r1, [pc, #492]	; (80037bc <nmea_parser+0xe04>)
 80035d0:	1963      	adds	r3, r4, r5
 80035d2:	19db      	adds	r3, r3, r7
 80035d4:	6818      	ldr	r0, [r3, #0]
 80035d6:	f7fc ff93 	bl	8000500 <__aeabi_fcmpgt>
 80035da:	1e03      	subs	r3, r0, #0
 80035dc:	d003      	beq.n	80035e6 <nmea_parser+0xc2e>
			speedinf=255;
 80035de:	4b77      	ldr	r3, [pc, #476]	; (80037bc <nmea_parser+0xe04>)
 80035e0:	1962      	adds	r2, r4, r5
 80035e2:	19d2      	adds	r2, r2, r7
 80035e4:	6013      	str	r3, [r2, #0]
		}
		if(speedinf<1){
 80035e6:	21fe      	movs	r1, #254	; 0xfe
 80035e8:	0589      	lsls	r1, r1, #22
 80035ea:	24d8      	movs	r4, #216	; 0xd8
 80035ec:	2508      	movs	r5, #8
 80035ee:	1963      	adds	r3, r4, r5
 80035f0:	19db      	adds	r3, r3, r7
 80035f2:	6818      	ldr	r0, [r3, #0]
 80035f4:	f7fc ff70 	bl	80004d8 <__aeabi_fcmplt>
 80035f8:	1e03      	subs	r3, r0, #0
 80035fa:	d003      	beq.n	8003604 <nmea_parser+0xc4c>
			speedinf=0;
 80035fc:	2300      	movs	r3, #0
 80035fe:	1962      	adds	r2, r4, r5
 8003600:	19d2      	adds	r2, r2, r7
 8003602:	6013      	str	r3, [r2, #0]

		}

		GPSInformation[15] = (int)speedinf;
 8003604:	23d8      	movs	r3, #216	; 0xd8
 8003606:	2408      	movs	r4, #8
 8003608:	191b      	adds	r3, r3, r4
 800360a:	19db      	adds	r3, r3, r7
 800360c:	6818      	ldr	r0, [r3, #0]
 800360e:	f7fd fa5f 	bl	8000ad0 <__aeabi_f2iz>
 8003612:	0003      	movs	r3, r0
 8003614:	b2da      	uxtb	r2, r3
 8003616:	4b6a      	ldr	r3, [pc, #424]	; (80037c0 <nmea_parser+0xe08>)
 8003618:	73da      	strb	r2, [r3, #15]



		//------------------------------Coursestatus block(2 byte)--------------------------------
		//Byte1, bit 4(gps position bit)
		if (nmeaResponse[GNRMC][GNRMCComma[1]+1] == 'A'){
 800361a:	2394      	movs	r3, #148	; 0x94
 800361c:	191b      	adds	r3, r3, r4
 800361e:	19db      	adds	r3, r3, r7
 8003620:	785b      	ldrb	r3, [r3, #1]
 8003622:	3301      	adds	r3, #1
 8003624:	22cc      	movs	r2, #204	; 0xcc
 8003626:	1912      	adds	r2, r2, r4
 8003628:	19d2      	adds	r2, r2, r7
 800362a:	6812      	ldr	r2, [r2, #0]
 800362c:	5cd3      	ldrb	r3, [r2, r3]
 800362e:	2b41      	cmp	r3, #65	; 0x41
 8003630:	d109      	bne.n	8003646 <nmea_parser+0xc8e>
			courseStatus |= 0x1000;
 8003632:	22f6      	movs	r2, #246	; 0xf6
 8003634:	1913      	adds	r3, r2, r4
 8003636:	19db      	adds	r3, r3, r7
 8003638:	1912      	adds	r2, r2, r4
 800363a:	19d2      	adds	r2, r2, r7
 800363c:	8812      	ldrh	r2, [r2, #0]
 800363e:	2180      	movs	r1, #128	; 0x80
 8003640:	0149      	lsls	r1, r1, #5
 8003642:	430a      	orrs	r2, r1
 8003644:	801a      	strh	r2, [r3, #0]
		}
		//Byte1, bit 5(realtime differential)
		if (nmeaResponse[GNGGA][GNGGAComma[5]+1] != '1'){
 8003646:	0032      	movs	r2, r6
 8003648:	23cc      	movs	r3, #204	; 0xcc
 800364a:	2108      	movs	r1, #8
 800364c:	185b      	adds	r3, r3, r1
 800364e:	19db      	adds	r3, r3, r7
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	189a      	adds	r2, r3, r2
 8003654:	23a4      	movs	r3, #164	; 0xa4
 8003656:	185b      	adds	r3, r3, r1
 8003658:	19db      	adds	r3, r3, r7
 800365a:	795b      	ldrb	r3, [r3, #5]
 800365c:	3301      	adds	r3, #1
 800365e:	5cd3      	ldrb	r3, [r2, r3]
 8003660:	2b31      	cmp	r3, #49	; 0x31
 8003662:	d009      	beq.n	8003678 <nmea_parser+0xcc0>
			courseStatus |= 0x2000;
 8003664:	22f6      	movs	r2, #246	; 0xf6
 8003666:	1853      	adds	r3, r2, r1
 8003668:	19db      	adds	r3, r3, r7
 800366a:	1852      	adds	r2, r2, r1
 800366c:	19d2      	adds	r2, r2, r7
 800366e:	8812      	ldrh	r2, [r2, #0]
 8003670:	2180      	movs	r1, #128	; 0x80
 8003672:	0189      	lsls	r1, r1, #6
 8003674:	430a      	orrs	r2, r1
 8003676:	801a      	strh	r2, [r3, #0]
		}
		//Byte1, bit 3(East/West bit)
		if(nmeaResponse[GNRMC][GNRMCComma[5]+1] == 'W' ){
 8003678:	2394      	movs	r3, #148	; 0x94
 800367a:	2108      	movs	r1, #8
 800367c:	185b      	adds	r3, r3, r1
 800367e:	19db      	adds	r3, r3, r7
 8003680:	795b      	ldrb	r3, [r3, #5]
 8003682:	3301      	adds	r3, #1
 8003684:	22cc      	movs	r2, #204	; 0xcc
 8003686:	1852      	adds	r2, r2, r1
 8003688:	19d2      	adds	r2, r2, r7
 800368a:	6812      	ldr	r2, [r2, #0]
 800368c:	5cd3      	ldrb	r3, [r2, r3]
 800368e:	2b57      	cmp	r3, #87	; 0x57
 8003690:	d109      	bne.n	80036a6 <nmea_parser+0xcee>
			courseStatus |= 0x800;
 8003692:	22f6      	movs	r2, #246	; 0xf6
 8003694:	1853      	adds	r3, r2, r1
 8003696:	19db      	adds	r3, r3, r7
 8003698:	1852      	adds	r2, r2, r1
 800369a:	19d2      	adds	r2, r2, r7
 800369c:	8812      	ldrh	r2, [r2, #0]
 800369e:	2180      	movs	r1, #128	; 0x80
 80036a0:	0109      	lsls	r1, r1, #4
 80036a2:	430a      	orrs	r2, r1
 80036a4:	801a      	strh	r2, [r3, #0]
		}
		//Byte1, bit 2(North/South bit)
		if(nmeaResponse[GNRMC][GNRMCComma[3]+1] == 'N' ){
 80036a6:	2394      	movs	r3, #148	; 0x94
 80036a8:	2108      	movs	r1, #8
 80036aa:	185b      	adds	r3, r3, r1
 80036ac:	19db      	adds	r3, r3, r7
 80036ae:	78db      	ldrb	r3, [r3, #3]
 80036b0:	3301      	adds	r3, #1
 80036b2:	22cc      	movs	r2, #204	; 0xcc
 80036b4:	1852      	adds	r2, r2, r1
 80036b6:	19d2      	adds	r2, r2, r7
 80036b8:	6812      	ldr	r2, [r2, #0]
 80036ba:	5cd3      	ldrb	r3, [r2, r3]
 80036bc:	2b4e      	cmp	r3, #78	; 0x4e
 80036be:	d109      	bne.n	80036d4 <nmea_parser+0xd1c>
			courseStatus |= 0x400;
 80036c0:	22f6      	movs	r2, #246	; 0xf6
 80036c2:	1853      	adds	r3, r2, r1
 80036c4:	19db      	adds	r3, r3, r7
 80036c6:	1852      	adds	r2, r2, r1
 80036c8:	19d2      	adds	r2, r2, r7
 80036ca:	8812      	ldrh	r2, [r2, #0]
 80036cc:	2180      	movs	r1, #128	; 0x80
 80036ce:	00c9      	lsls	r1, r1, #3
 80036d0:	430a      	orrs	r2, r1
 80036d2:	801a      	strh	r2, [r3, #0]
		}

		//Course
		memset(tempData,0,sizeof(tempData));
 80036d4:	2384      	movs	r3, #132	; 0x84
 80036d6:	2408      	movs	r4, #8
 80036d8:	191b      	adds	r3, r3, r4
 80036da:	19db      	adds	r3, r3, r7
 80036dc:	220f      	movs	r2, #15
 80036de:	2100      	movs	r1, #0
 80036e0:	0018      	movs	r0, r3
 80036e2:	f00b fc90 	bl	800f006 <memset>
		tempDataIndex = 0;
 80036e6:	23e7      	movs	r3, #231	; 0xe7
 80036e8:	0021      	movs	r1, r4
 80036ea:	185b      	adds	r3, r3, r1
 80036ec:	19db      	adds	r3, r3, r7
 80036ee:	2200      	movs	r2, #0
 80036f0:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[7]+1;x<GNRMCComma[8];x++){
 80036f2:	2394      	movs	r3, #148	; 0x94
 80036f4:	185b      	adds	r3, r3, r1
 80036f6:	19db      	adds	r3, r3, r7
 80036f8:	79da      	ldrb	r2, [r3, #7]
 80036fa:	23d6      	movs	r3, #214	; 0xd6
 80036fc:	185b      	adds	r3, r3, r1
 80036fe:	19db      	adds	r3, r3, r7
 8003700:	3201      	adds	r2, #1
 8003702:	701a      	strb	r2, [r3, #0]
 8003704:	e020      	b.n	8003748 <nmea_parser+0xd90>
			tempData[tempDataIndex]= nmeaResponse[GNRMC][x];
 8003706:	20d6      	movs	r0, #214	; 0xd6
 8003708:	2508      	movs	r5, #8
 800370a:	1943      	adds	r3, r0, r5
 800370c:	19db      	adds	r3, r3, r7
 800370e:	781a      	ldrb	r2, [r3, #0]
 8003710:	24e7      	movs	r4, #231	; 0xe7
 8003712:	1963      	adds	r3, r4, r5
 8003714:	19db      	adds	r3, r3, r7
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	21cc      	movs	r1, #204	; 0xcc
 800371a:	1949      	adds	r1, r1, r5
 800371c:	19c9      	adds	r1, r1, r7
 800371e:	6809      	ldr	r1, [r1, #0]
 8003720:	5c89      	ldrb	r1, [r1, r2]
 8003722:	2284      	movs	r2, #132	; 0x84
 8003724:	1952      	adds	r2, r2, r5
 8003726:	19d2      	adds	r2, r2, r7
 8003728:	54d1      	strb	r1, [r2, r3]
			tempDataIndex++;
 800372a:	0029      	movs	r1, r5
 800372c:	1863      	adds	r3, r4, r1
 800372e:	19db      	adds	r3, r3, r7
 8003730:	781a      	ldrb	r2, [r3, #0]
 8003732:	1863      	adds	r3, r4, r1
 8003734:	19db      	adds	r3, r3, r7
 8003736:	3201      	adds	r2, #1
 8003738:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[7]+1;x<GNRMCComma[8];x++){
 800373a:	1843      	adds	r3, r0, r1
 800373c:	19db      	adds	r3, r3, r7
 800373e:	781a      	ldrb	r2, [r3, #0]
 8003740:	1843      	adds	r3, r0, r1
 8003742:	19db      	adds	r3, r3, r7
 8003744:	3201      	adds	r2, #1
 8003746:	701a      	strb	r2, [r3, #0]
 8003748:	2394      	movs	r3, #148	; 0x94
 800374a:	2408      	movs	r4, #8
 800374c:	191b      	adds	r3, r3, r4
 800374e:	19db      	adds	r3, r3, r7
 8003750:	7a1b      	ldrb	r3, [r3, #8]
 8003752:	22d6      	movs	r2, #214	; 0xd6
 8003754:	1912      	adds	r2, r2, r4
 8003756:	19d2      	adds	r2, r2, r7
 8003758:	7812      	ldrb	r2, [r2, #0]
 800375a:	429a      	cmp	r2, r3
 800375c:	d3d3      	bcc.n	8003706 <nmea_parser+0xd4e>
		}
		courseStatus |= atoi(tempData);
 800375e:	2384      	movs	r3, #132	; 0x84
 8003760:	191b      	adds	r3, r3, r4
 8003762:	19db      	adds	r3, r3, r7
 8003764:	0018      	movs	r0, r3
 8003766:	f00b fbef 	bl	800ef48 <atoi>
 800376a:	0003      	movs	r3, r0
 800376c:	b21a      	sxth	r2, r3
 800376e:	21f6      	movs	r1, #246	; 0xf6
 8003770:	190b      	adds	r3, r1, r4
 8003772:	19db      	adds	r3, r3, r7
 8003774:	2000      	movs	r0, #0
 8003776:	5e1b      	ldrsh	r3, [r3, r0]
 8003778:	4313      	orrs	r3, r2
 800377a:	b21a      	sxth	r2, r3
 800377c:	0020      	movs	r0, r4
 800377e:	180b      	adds	r3, r1, r0
 8003780:	19db      	adds	r3, r3, r7
 8003782:	801a      	strh	r2, [r3, #0]
		GPSInformation[16]= courseStatus>>8;
 8003784:	180b      	adds	r3, r1, r0
 8003786:	19db      	adds	r3, r3, r7
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	0a1b      	lsrs	r3, r3, #8
 800378c:	b29b      	uxth	r3, r3
 800378e:	b2da      	uxtb	r2, r3
 8003790:	4b0b      	ldr	r3, [pc, #44]	; (80037c0 <nmea_parser+0xe08>)
 8003792:	741a      	strb	r2, [r3, #16]
		GPSInformation[17]= courseStatus;
 8003794:	180b      	adds	r3, r1, r0
 8003796:	19db      	adds	r3, r3, r7
 8003798:	881b      	ldrh	r3, [r3, #0]
 800379a:	b2da      	uxtb	r2, r3
 800379c:	4b08      	ldr	r3, [pc, #32]	; (80037c0 <nmea_parser+0xe08>)
 800379e:	745a      	strb	r2, [r3, #17]
		//------------------------------Course Status Block END------------------------------------

		return GPSInformation;
 80037a0:	4b07      	ldr	r3, [pc, #28]	; (80037c0 <nmea_parser+0xe08>)
 80037a2:	e003      	b.n	80037ac <nmea_parser+0xdf4>
	}
	else{
		*checkSum = 55;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2237      	movs	r2, #55	; 0x37
 80037a8:	701a      	strb	r2, [r3, #0]
		return NULL;
 80037aa:	2300      	movs	r3, #0
	}

}
 80037ac:	0018      	movs	r0, r3
 80037ae:	46bd      	mov	sp, r7
 80037b0:	b041      	add	sp, #260	; 0x104
 80037b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037b4:	9999999a 	.word	0x9999999a
 80037b8:	3ffd9999 	.word	0x3ffd9999
 80037bc:	437f0000 	.word	0x437f0000
 80037c0:	200002d4 	.word	0x200002d4

080037c4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80037c8:	f3bf 8f4f 	dsb	sy
}
 80037cc:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037ce:	4b04      	ldr	r3, [pc, #16]	; (80037e0 <__NVIC_SystemReset+0x1c>)
 80037d0:	4a04      	ldr	r2, [pc, #16]	; (80037e4 <__NVIC_SystemReset+0x20>)
 80037d2:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80037d4:	f3bf 8f4f 	dsb	sy
}
 80037d8:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80037da:	46c0      	nop			; (mov r8, r8)
 80037dc:	e7fd      	b.n	80037da <__NVIC_SystemReset+0x16>
 80037de:	46c0      	nop			; (mov r8, r8)
 80037e0:	e000ed00 	.word	0xe000ed00
 80037e4:	05fa0004 	.word	0x05fa0004

080037e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b0c2      	sub	sp, #264	; 0x108
 80037ec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80037ee:	f006 f9eb 	bl	8009bc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80037f2:	f000 fb19 	bl	8003e28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80037f6:	f000 fe21 	bl	800443c <MX_GPIO_Init>
  MX_SPI1_Init();
 80037fa:	f000 fb6f 	bl	8003edc <MX_SPI1_Init>
  MX_TIM3_Init();
 80037fe:	f000 fbab 	bl	8003f58 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8003802:	f000 fd17 	bl	8004234 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8003806:	f000 fd63 	bl	80042d0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800380a:	f000 fdaf 	bl	800436c <MX_USART3_UART_Init>
  MX_USART4_UART_Init();
 800380e:	f000 fde1 	bl	80043d4 <MX_USART4_UART_Init>
  MX_TIM17_Init();
 8003812:	f000 fce5 	bl	80041e0 <MX_TIM17_Init>
  MX_TIM14_Init();
 8003816:	f000 fc93 	bl	8004140 <MX_TIM14_Init>
  MX_TIM6_Init();
 800381a:	f000 fc19 	bl	8004050 <MX_TIM6_Init>
  MX_TIM16_Init();
 800381e:	f000 fcb5 	bl	800418c <MX_TIM16_Init>
  MX_TIM7_Init();
 8003822:	f000 fc51 	bl	80040c8 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim14);//watchDog Timer
 8003826:	4be0      	ldr	r3, [pc, #896]	; (8003ba8 <main+0x3c0>)
 8003828:	0018      	movs	r0, r3
 800382a:	f008 fc8b 	bl	800c144 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim16);//tcp open checking timer
 800382e:	4bdf      	ldr	r3, [pc, #892]	; (8003bac <main+0x3c4>)
 8003830:	0018      	movs	r0, r3
 8003832:	f008 fc87 	bl	800c144 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);//AT PORT
 8003836:	4bde      	ldr	r3, [pc, #888]	; (8003bb0 <main+0x3c8>)
 8003838:	0018      	movs	r0, r3
 800383a:	f008 fc83 	bl	800c144 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);//system state timer
 800383e:	4bdd      	ldr	r3, [pc, #884]	; (8003bb4 <main+0x3cc>)
 8003840:	0018      	movs	r0, r3
 8003842:	f008 fc7f 	bl	800c144 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, GNSS_BUFFER, 1);
 8003846:	49dc      	ldr	r1, [pc, #880]	; (8003bb8 <main+0x3d0>)
 8003848:	4bdc      	ldr	r3, [pc, #880]	; (8003bbc <main+0x3d4>)
 800384a:	2201      	movs	r2, #1
 800384c:	0018      	movs	r0, r3
 800384e:	f009 fd1b 	bl	800d288 <HAL_UART_Receive_IT>
  W25qxx_Init();
 8003852:	f005 fde5 	bl	8009420 <W25qxx_Init>


	//INPUT CAPTURE--------------------------------------
  HAL_TIM_Base_Start_IT(&htim3);//input capture timer starts
 8003856:	4bda      	ldr	r3, [pc, #872]	; (8003bc0 <main+0x3d8>)
 8003858:	0018      	movs	r0, r3
 800385a:	f008 fc73 	bl	800c144 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim17);///GNS PORT
 800385e:	4bd9      	ldr	r3, [pc, #868]	; (8003bc4 <main+0x3dc>)
 8003860:	0018      	movs	r0, r3
 8003862:	f008 fc6f 	bl	800c144 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&AT_PORT, AT_BUFFER, 1);
 8003866:	49d8      	ldr	r1, [pc, #864]	; (8003bc8 <main+0x3e0>)
 8003868:	4bd8      	ldr	r3, [pc, #864]	; (8003bcc <main+0x3e4>)
 800386a:	2201      	movs	r2, #1
 800386c:	0018      	movs	r0, r3
 800386e:	f009 fd0b 	bl	800d288 <HAL_UART_Receive_IT>



  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 1);
 8003872:	4bd7      	ldr	r3, [pc, #860]	; (8003bd0 <main+0x3e8>)
 8003874:	2201      	movs	r2, #1
 8003876:	2104      	movs	r1, #4
 8003878:	0018      	movs	r0, r3
 800387a:	f006 fd7a 	bl	800a372 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 800387e:	23fa      	movs	r3, #250	; 0xfa
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	0018      	movs	r0, r3
 8003884:	f006 fa26 	bl	8009cd4 <HAL_Delay>
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 0);
 8003888:	4bd1      	ldr	r3, [pc, #836]	; (8003bd0 <main+0x3e8>)
 800388a:	2200      	movs	r2, #0
 800388c:	2104      	movs	r1, #4
 800388e:	0018      	movs	r0, r3
 8003890:	f006 fd6f 	bl	800a372 <HAL_GPIO_WritePin>


	//ROM INTEGRITY------------------------------------------------------------------------------------------------------------------------------
//	W25qxx_EraseSector(0);
//	W25qxx_EraseSector(1);
	W25qxx_ReadByte(&isFlash, 0);
 8003894:	4bcf      	ldr	r3, [pc, #828]	; (8003bd4 <main+0x3ec>)
 8003896:	2100      	movs	r1, #0
 8003898:	0018      	movs	r0, r3
 800389a:	f005 ffd5 	bl	8009848 <W25qxx_ReadByte>
	W25qxx_ReadByte(&isFlash1, LASTPAGE_ADD);
 800389e:	4bce      	ldr	r3, [pc, #824]	; (8003bd8 <main+0x3f0>)
 80038a0:	21fa      	movs	r1, #250	; 0xfa
 80038a2:	0018      	movs	r0, r3
 80038a4:	f005 ffd0 	bl	8009848 <W25qxx_ReadByte>
	if (isFlash != 1 || isFlash1 !=1 ) {
 80038a8:	4bca      	ldr	r3, [pc, #808]	; (8003bd4 <main+0x3ec>)
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d103      	bne.n	80038b8 <main+0xd0>
 80038b0:	4bc9      	ldr	r3, [pc, #804]	; (8003bd8 <main+0x3f0>)
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d00f      	beq.n	80038d8 <main+0xf0>
		StartN = 0;
 80038b8:	4bc8      	ldr	r3, [pc, #800]	; (8003bdc <main+0x3f4>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	801a      	strh	r2, [r3, #0]
		EndN = 0;
 80038be:	4bc8      	ldr	r3, [pc, #800]	; (8003be0 <main+0x3f8>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	801a      	strh	r2, [r3, #0]
		StartSec = 1;
 80038c4:	4bc7      	ldr	r3, [pc, #796]	; (8003be4 <main+0x3fc>)
 80038c6:	2201      	movs	r2, #1
 80038c8:	801a      	strh	r2, [r3, #0]
		EndSec = 1;
 80038ca:	4bc7      	ldr	r3, [pc, #796]	; (8003be8 <main+0x400>)
 80038cc:	2201      	movs	r2, #1
 80038ce:	801a      	strh	r2, [r3, #0]
		W25qxx_EraseSector(1);
 80038d0:	2001      	movs	r0, #1
 80038d2:	f005 fe5f 	bl	8009594 <W25qxx_EraseSector>
 80038d6:	e119      	b.n	8003b0c <main+0x324>

	} else {
		//reading from ROM
		uint8_t configPage[LASTPAGE_ADD+2];
		memset(configPage, 0, sizeof(configPage));
 80038d8:	003b      	movs	r3, r7
 80038da:	22fc      	movs	r2, #252	; 0xfc
 80038dc:	2100      	movs	r1, #0
 80038de:	0018      	movs	r0, r3
 80038e0:	f00b fb91 	bl	800f006 <memset>
		W25qxx_ReadBytes(configPage, 0, LASTPAGE_ADD+2);
 80038e4:	003b      	movs	r3, r7
 80038e6:	22fc      	movs	r2, #252	; 0xfc
 80038e8:	2100      	movs	r1, #0
 80038ea:	0018      	movs	r0, r3
 80038ec:	f006 f802 	bl	80098f4 <W25qxx_ReadBytes>

		StartSec = configPage[1];
 80038f0:	4bbe      	ldr	r3, [pc, #760]	; (8003bec <main+0x404>)
 80038f2:	3301      	adds	r3, #1
 80038f4:	33ff      	adds	r3, #255	; 0xff
 80038f6:	19db      	adds	r3, r3, r7
 80038f8:	785b      	ldrb	r3, [r3, #1]
 80038fa:	b29a      	uxth	r2, r3
 80038fc:	4bb9      	ldr	r3, [pc, #740]	; (8003be4 <main+0x3fc>)
 80038fe:	801a      	strh	r2, [r3, #0]
		StartSec = StartSec << 8 | configPage[2];
 8003900:	4bb8      	ldr	r3, [pc, #736]	; (8003be4 <main+0x3fc>)
 8003902:	881b      	ldrh	r3, [r3, #0]
 8003904:	b29b      	uxth	r3, r3
 8003906:	021b      	lsls	r3, r3, #8
 8003908:	b21a      	sxth	r2, r3
 800390a:	4bb8      	ldr	r3, [pc, #736]	; (8003bec <main+0x404>)
 800390c:	3301      	adds	r3, #1
 800390e:	33ff      	adds	r3, #255	; 0xff
 8003910:	19db      	adds	r3, r3, r7
 8003912:	789b      	ldrb	r3, [r3, #2]
 8003914:	b21b      	sxth	r3, r3
 8003916:	4313      	orrs	r3, r2
 8003918:	b21b      	sxth	r3, r3
 800391a:	b29a      	uxth	r2, r3
 800391c:	4bb1      	ldr	r3, [pc, #708]	; (8003be4 <main+0x3fc>)
 800391e:	801a      	strh	r2, [r3, #0]

		StartN = configPage[3];
 8003920:	4bb2      	ldr	r3, [pc, #712]	; (8003bec <main+0x404>)
 8003922:	3301      	adds	r3, #1
 8003924:	33ff      	adds	r3, #255	; 0xff
 8003926:	19db      	adds	r3, r3, r7
 8003928:	78db      	ldrb	r3, [r3, #3]
 800392a:	b29a      	uxth	r2, r3
 800392c:	4bab      	ldr	r3, [pc, #684]	; (8003bdc <main+0x3f4>)
 800392e:	801a      	strh	r2, [r3, #0]
		StartN = StartN << 8 | configPage[4];
 8003930:	4baa      	ldr	r3, [pc, #680]	; (8003bdc <main+0x3f4>)
 8003932:	881b      	ldrh	r3, [r3, #0]
 8003934:	b29b      	uxth	r3, r3
 8003936:	021b      	lsls	r3, r3, #8
 8003938:	b21a      	sxth	r2, r3
 800393a:	4bac      	ldr	r3, [pc, #688]	; (8003bec <main+0x404>)
 800393c:	3301      	adds	r3, #1
 800393e:	33ff      	adds	r3, #255	; 0xff
 8003940:	19db      	adds	r3, r3, r7
 8003942:	791b      	ldrb	r3, [r3, #4]
 8003944:	b21b      	sxth	r3, r3
 8003946:	4313      	orrs	r3, r2
 8003948:	b21b      	sxth	r3, r3
 800394a:	b29a      	uxth	r2, r3
 800394c:	4ba3      	ldr	r3, [pc, #652]	; (8003bdc <main+0x3f4>)
 800394e:	801a      	strh	r2, [r3, #0]

		EndSec = configPage[5];
 8003950:	4ba6      	ldr	r3, [pc, #664]	; (8003bec <main+0x404>)
 8003952:	3301      	adds	r3, #1
 8003954:	33ff      	adds	r3, #255	; 0xff
 8003956:	19db      	adds	r3, r3, r7
 8003958:	795b      	ldrb	r3, [r3, #5]
 800395a:	b29a      	uxth	r2, r3
 800395c:	4ba2      	ldr	r3, [pc, #648]	; (8003be8 <main+0x400>)
 800395e:	801a      	strh	r2, [r3, #0]
		EndSec = EndSec << 8 | configPage[6];
 8003960:	4ba1      	ldr	r3, [pc, #644]	; (8003be8 <main+0x400>)
 8003962:	881b      	ldrh	r3, [r3, #0]
 8003964:	b29b      	uxth	r3, r3
 8003966:	021b      	lsls	r3, r3, #8
 8003968:	b21a      	sxth	r2, r3
 800396a:	4ba0      	ldr	r3, [pc, #640]	; (8003bec <main+0x404>)
 800396c:	3301      	adds	r3, #1
 800396e:	33ff      	adds	r3, #255	; 0xff
 8003970:	19db      	adds	r3, r3, r7
 8003972:	799b      	ldrb	r3, [r3, #6]
 8003974:	b21b      	sxth	r3, r3
 8003976:	4313      	orrs	r3, r2
 8003978:	b21b      	sxth	r3, r3
 800397a:	b29a      	uxth	r2, r3
 800397c:	4b9a      	ldr	r3, [pc, #616]	; (8003be8 <main+0x400>)
 800397e:	801a      	strh	r2, [r3, #0]

		EndN = configPage[7];
 8003980:	4b9a      	ldr	r3, [pc, #616]	; (8003bec <main+0x404>)
 8003982:	3301      	adds	r3, #1
 8003984:	33ff      	adds	r3, #255	; 0xff
 8003986:	19db      	adds	r3, r3, r7
 8003988:	79db      	ldrb	r3, [r3, #7]
 800398a:	b29a      	uxth	r2, r3
 800398c:	4b94      	ldr	r3, [pc, #592]	; (8003be0 <main+0x3f8>)
 800398e:	801a      	strh	r2, [r3, #0]
		EndN = EndN << 8 | configPage[8];
 8003990:	4b93      	ldr	r3, [pc, #588]	; (8003be0 <main+0x3f8>)
 8003992:	881b      	ldrh	r3, [r3, #0]
 8003994:	b29b      	uxth	r3, r3
 8003996:	021b      	lsls	r3, r3, #8
 8003998:	b21a      	sxth	r2, r3
 800399a:	4b94      	ldr	r3, [pc, #592]	; (8003bec <main+0x404>)
 800399c:	3301      	adds	r3, #1
 800399e:	33ff      	adds	r3, #255	; 0xff
 80039a0:	19db      	adds	r3, r3, r7
 80039a2:	7a1b      	ldrb	r3, [r3, #8]
 80039a4:	b21b      	sxth	r3, r3
 80039a6:	4313      	orrs	r3, r2
 80039a8:	b21b      	sxth	r3, r3
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	4b8c      	ldr	r3, [pc, #560]	; (8003be0 <main+0x3f8>)
 80039ae:	801a      	strh	r2, [r3, #0]

		cPin[0] = configPage[CP1_ADD];
 80039b0:	4b8e      	ldr	r3, [pc, #568]	; (8003bec <main+0x404>)
 80039b2:	3301      	adds	r3, #1
 80039b4:	33ff      	adds	r3, #255	; 0xff
 80039b6:	19db      	adds	r3, r3, r7
 80039b8:	7a5a      	ldrb	r2, [r3, #9]
 80039ba:	4b8d      	ldr	r3, [pc, #564]	; (8003bf0 <main+0x408>)
 80039bc:	701a      	strb	r2, [r3, #0]
		cPin[1] = configPage[CP2_ADD];
 80039be:	4b8b      	ldr	r3, [pc, #556]	; (8003bec <main+0x404>)
 80039c0:	3301      	adds	r3, #1
 80039c2:	33ff      	adds	r3, #255	; 0xff
 80039c4:	19db      	adds	r3, r3, r7
 80039c6:	7a9a      	ldrb	r2, [r3, #10]
 80039c8:	4b89      	ldr	r3, [pc, #548]	; (8003bf0 <main+0x408>)
 80039ca:	705a      	strb	r2, [r3, #1]
		cPin[2] = configPage[CP3_ADD];
 80039cc:	4b87      	ldr	r3, [pc, #540]	; (8003bec <main+0x404>)
 80039ce:	3301      	adds	r3, #1
 80039d0:	33ff      	adds	r3, #255	; 0xff
 80039d2:	19db      	adds	r3, r3, r7
 80039d4:	7ada      	ldrb	r2, [r3, #11]
 80039d6:	4b86      	ldr	r3, [pc, #536]	; (8003bf0 <main+0x408>)
 80039d8:	709a      	strb	r2, [r3, #2]
		cPin[3] = configPage[CP4_ADD];
 80039da:	4b84      	ldr	r3, [pc, #528]	; (8003bec <main+0x404>)
 80039dc:	3301      	adds	r3, #1
 80039de:	33ff      	adds	r3, #255	; 0xff
 80039e0:	19db      	adds	r3, r3, r7
 80039e2:	7b1a      	ldrb	r2, [r3, #12]
 80039e4:	4b82      	ldr	r3, [pc, #520]	; (8003bf0 <main+0x408>)
 80039e6:	70da      	strb	r2, [r3, #3]

		for (uint8_t te = 0; te < 10; te++) {
 80039e8:	23ff      	movs	r3, #255	; 0xff
 80039ea:	18fb      	adds	r3, r7, r3
 80039ec:	2200      	movs	r2, #0
 80039ee:	701a      	strb	r2, [r3, #0]
 80039f0:	e012      	b.n	8003a18 <main+0x230>
			validSender[te] = configPage[te + VALIDSENSTART_ADD];
 80039f2:	20ff      	movs	r0, #255	; 0xff
 80039f4:	183b      	adds	r3, r7, r0
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	330d      	adds	r3, #13
 80039fa:	001a      	movs	r2, r3
 80039fc:	183b      	adds	r3, r7, r0
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	497a      	ldr	r1, [pc, #488]	; (8003bec <main+0x404>)
 8003a02:	3101      	adds	r1, #1
 8003a04:	31ff      	adds	r1, #255	; 0xff
 8003a06:	19c9      	adds	r1, r1, r7
 8003a08:	5c89      	ldrb	r1, [r1, r2]
 8003a0a:	4a7a      	ldr	r2, [pc, #488]	; (8003bf4 <main+0x40c>)
 8003a0c:	54d1      	strb	r1, [r2, r3]
		for (uint8_t te = 0; te < 10; te++) {
 8003a0e:	183b      	adds	r3, r7, r0
 8003a10:	781a      	ldrb	r2, [r3, #0]
 8003a12:	183b      	adds	r3, r7, r0
 8003a14:	3201      	adds	r2, #1
 8003a16:	701a      	strb	r2, [r3, #0]
 8003a18:	23ff      	movs	r3, #255	; 0xff
 8003a1a:	18fb      	adds	r3, r7, r3
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	2b09      	cmp	r3, #9
 8003a20:	d9e7      	bls.n	80039f2 <main+0x20a>
		}
		for (uint8_t te = 0; te < 50; te++) {
 8003a22:	23fe      	movs	r3, #254	; 0xfe
 8003a24:	18fb      	adds	r3, r7, r3
 8003a26:	2200      	movs	r2, #0
 8003a28:	701a      	strb	r2, [r3, #0]
 8003a2a:	e012      	b.n	8003a52 <main+0x26a>
			domainAdd[te] = configPage[te + DOMAINSTART_ADD];
 8003a2c:	20fe      	movs	r0, #254	; 0xfe
 8003a2e:	183b      	adds	r3, r7, r0
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	3317      	adds	r3, #23
 8003a34:	001a      	movs	r2, r3
 8003a36:	183b      	adds	r3, r7, r0
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	496c      	ldr	r1, [pc, #432]	; (8003bec <main+0x404>)
 8003a3c:	3101      	adds	r1, #1
 8003a3e:	31ff      	adds	r1, #255	; 0xff
 8003a40:	19c9      	adds	r1, r1, r7
 8003a42:	5c89      	ldrb	r1, [r1, r2]
 8003a44:	4a6c      	ldr	r2, [pc, #432]	; (8003bf8 <main+0x410>)
 8003a46:	54d1      	strb	r1, [r2, r3]
		for (uint8_t te = 0; te < 50; te++) {
 8003a48:	183b      	adds	r3, r7, r0
 8003a4a:	781a      	ldrb	r2, [r3, #0]
 8003a4c:	183b      	adds	r3, r7, r0
 8003a4e:	3201      	adds	r2, #1
 8003a50:	701a      	strb	r2, [r3, #0]
 8003a52:	23fe      	movs	r3, #254	; 0xfe
 8003a54:	18fb      	adds	r3, r7, r3
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	2b31      	cmp	r3, #49	; 0x31
 8003a5a:	d9e7      	bls.n	8003a2c <main+0x244>
		}
		for (uint8_t te = 0; te < 6; te++) {
 8003a5c:	23fd      	movs	r3, #253	; 0xfd
 8003a5e:	18fb      	adds	r3, r7, r3
 8003a60:	2200      	movs	r2, #0
 8003a62:	701a      	strb	r2, [r3, #0]
 8003a64:	e012      	b.n	8003a8c <main+0x2a4>
			portAdd[te] = configPage[te + PORTSTART_ADD];
 8003a66:	20fd      	movs	r0, #253	; 0xfd
 8003a68:	183b      	adds	r3, r7, r0
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	3349      	adds	r3, #73	; 0x49
 8003a6e:	001a      	movs	r2, r3
 8003a70:	183b      	adds	r3, r7, r0
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	495d      	ldr	r1, [pc, #372]	; (8003bec <main+0x404>)
 8003a76:	3101      	adds	r1, #1
 8003a78:	31ff      	adds	r1, #255	; 0xff
 8003a7a:	19c9      	adds	r1, r1, r7
 8003a7c:	5c89      	ldrb	r1, [r1, r2]
 8003a7e:	4a5f      	ldr	r2, [pc, #380]	; (8003bfc <main+0x414>)
 8003a80:	54d1      	strb	r1, [r2, r3]
		for (uint8_t te = 0; te < 6; te++) {
 8003a82:	183b      	adds	r3, r7, r0
 8003a84:	781a      	ldrb	r2, [r3, #0]
 8003a86:	183b      	adds	r3, r7, r0
 8003a88:	3201      	adds	r2, #1
 8003a8a:	701a      	strb	r2, [r3, #0]
 8003a8c:	23fd      	movs	r3, #253	; 0xfd
 8003a8e:	18fb      	adds	r3, r7, r3
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	2b05      	cmp	r3, #5
 8003a94:	d9e7      	bls.n	8003a66 <main+0x27e>
		}
		locationDataIntervalA = configPage[LDIA_ADD];
 8003a96:	4b55      	ldr	r3, [pc, #340]	; (8003bec <main+0x404>)
 8003a98:	3301      	adds	r3, #1
 8003a9a:	33ff      	adds	r3, #255	; 0xff
 8003a9c:	19db      	adds	r3, r3, r7
 8003a9e:	224f      	movs	r2, #79	; 0x4f
 8003aa0:	5c9a      	ldrb	r2, [r3, r2]
 8003aa2:	4b57      	ldr	r3, [pc, #348]	; (8003c00 <main+0x418>)
 8003aa4:	701a      	strb	r2, [r3, #0]
		locationDataIntervalB = configPage[LDIB_ADD];
 8003aa6:	4b51      	ldr	r3, [pc, #324]	; (8003bec <main+0x404>)
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	33ff      	adds	r3, #255	; 0xff
 8003aac:	19db      	adds	r3, r3, r7
 8003aae:	2250      	movs	r2, #80	; 0x50
 8003ab0:	5c9a      	ldrb	r2, [r3, r2]
 8003ab2:	4b54      	ldr	r3, [pc, #336]	; (8003c04 <main+0x41c>)
 8003ab4:	701a      	strb	r2, [r3, #0]
		isAutoRst = configPage[AUTORST_ADD];
 8003ab6:	4b4d      	ldr	r3, [pc, #308]	; (8003bec <main+0x404>)
 8003ab8:	3301      	adds	r3, #1
 8003aba:	33ff      	adds	r3, #255	; 0xff
 8003abc:	19db      	adds	r3, r3, r7
 8003abe:	2251      	movs	r2, #81	; 0x51
 8003ac0:	5c9a      	ldrb	r2, [r3, r2]
 8003ac2:	4b51      	ldr	r3, [pc, #324]	; (8003c08 <main+0x420>)
 8003ac4:	701a      	strb	r2, [r3, #0]
		isSMSActive = configPage[SMSACTIVE_ADD];
 8003ac6:	4b49      	ldr	r3, [pc, #292]	; (8003bec <main+0x404>)
 8003ac8:	3301      	adds	r3, #1
 8003aca:	33ff      	adds	r3, #255	; 0xff
 8003acc:	19db      	adds	r3, r3, r7
 8003ace:	2252      	movs	r2, #82	; 0x52
 8003ad0:	5c9a      	ldrb	r2, [r3, r2]
 8003ad2:	4b4e      	ldr	r3, [pc, #312]	; (8003c0c <main+0x424>)
 8003ad4:	701a      	strb	r2, [r3, #0]
		relayState = configPage[RELAYSTATE_ADD];
 8003ad6:	4b45      	ldr	r3, [pc, #276]	; (8003bec <main+0x404>)
 8003ad8:	3301      	adds	r3, #1
 8003ada:	33ff      	adds	r3, #255	; 0xff
 8003adc:	19db      	adds	r3, r3, r7
 8003ade:	2253      	movs	r2, #83	; 0x53
 8003ae0:	5c9a      	ldrb	r2, [r3, r2]
 8003ae2:	4b4b      	ldr	r3, [pc, #300]	; (8003c10 <main+0x428>)
 8003ae4:	701a      	strb	r2, [r3, #0]
		if(isAutoRst==0){
 8003ae6:	4b48      	ldr	r3, [pc, #288]	; (8003c08 <main+0x420>)
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10e      	bne.n	8003b0c <main+0x324>
			StartN = 0;
 8003aee:	4b3b      	ldr	r3, [pc, #236]	; (8003bdc <main+0x3f4>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	801a      	strh	r2, [r3, #0]
			EndN = 0;
 8003af4:	4b3a      	ldr	r3, [pc, #232]	; (8003be0 <main+0x3f8>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	801a      	strh	r2, [r3, #0]
			StartSec = 1;
 8003afa:	4b3a      	ldr	r3, [pc, #232]	; (8003be4 <main+0x3fc>)
 8003afc:	2201      	movs	r2, #1
 8003afe:	801a      	strh	r2, [r3, #0]
			EndSec = 1;
 8003b00:	4b39      	ldr	r3, [pc, #228]	; (8003be8 <main+0x400>)
 8003b02:	2201      	movs	r2, #1
 8003b04:	801a      	strh	r2, [r3, #0]
			W25qxx_EraseSector(1);
 8003b06:	2001      	movs	r0, #1
 8003b08:	f005 fd44 	bl	8009594 <W25qxx_EraseSector>
		}
	}
	save_to_flash(0);
 8003b0c:	2000      	movs	r0, #0
 8003b0e:	f002 fded 	bl	80066ec <save_to_flash>




	//-------------------check if tracker has registered any mobile number?-------------
	if(validSender[0] == '0' && validSender[1] == '0' && validSender[2] == '0'){
 8003b12:	4b38      	ldr	r3, [pc, #224]	; (8003bf4 <main+0x40c>)
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	2b30      	cmp	r3, #48	; 0x30
 8003b18:	d10b      	bne.n	8003b32 <main+0x34a>
 8003b1a:	4b36      	ldr	r3, [pc, #216]	; (8003bf4 <main+0x40c>)
 8003b1c:	785b      	ldrb	r3, [r3, #1]
 8003b1e:	2b30      	cmp	r3, #48	; 0x30
 8003b20:	d107      	bne.n	8003b32 <main+0x34a>
 8003b22:	4b34      	ldr	r3, [pc, #208]	; (8003bf4 <main+0x40c>)
 8003b24:	789b      	ldrb	r3, [r3, #2]
 8003b26:	2b30      	cmp	r3, #48	; 0x30
 8003b28:	d103      	bne.n	8003b32 <main+0x34a>
		isNumValid=0;
 8003b2a:	4b3a      	ldr	r3, [pc, #232]	; (8003c14 <main+0x42c>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	701a      	strb	r2, [r3, #0]
 8003b30:	e002      	b.n	8003b38 <main+0x350>
	}
	else{
		isNumValid=1;
 8003b32:	4b38      	ldr	r3, [pc, #224]	; (8003c14 <main+0x42c>)
 8003b34:	2201      	movs	r2, #1
 8003b36:	701a      	strb	r2, [r3, #0]
	}
	//----------------------------------------------------------------------------------


	//-----------------------set car state--------------------------------
	if(relayState == 1){
 8003b38:	4b35      	ldr	r3, [pc, #212]	; (8003c10 <main+0x428>)
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d106      	bne.n	8003b4e <main+0x366>
		//switch off the car
		HAL_GPIO_WritePin(OUTPUT_1_GPIO_Port, OUTPUT_1_Pin, 1);
 8003b40:	4b23      	ldr	r3, [pc, #140]	; (8003bd0 <main+0x3e8>)
 8003b42:	2201      	movs	r2, #1
 8003b44:	2102      	movs	r1, #2
 8003b46:	0018      	movs	r0, r3
 8003b48:	f006 fc13 	bl	800a372 <HAL_GPIO_WritePin>
 8003b4c:	e005      	b.n	8003b5a <main+0x372>
	}
	else{
		//switch on the car
		HAL_GPIO_WritePin(OUTPUT_1_GPIO_Port, OUTPUT_1_Pin, 0);
 8003b4e:	4b20      	ldr	r3, [pc, #128]	; (8003bd0 <main+0x3e8>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	2102      	movs	r1, #2
 8003b54:	0018      	movs	r0, r3
 8003b56:	f006 fc0c 	bl	800a372 <HAL_GPIO_WritePin>
	}

	//---------------------------------------------------------------------

	HAL_GPIO_WritePin(PWR_KEY_GPIO_Port, PWR_KEY_Pin, 1);
 8003b5a:	2380      	movs	r3, #128	; 0x80
 8003b5c:	019b      	lsls	r3, r3, #6
 8003b5e:	481c      	ldr	r0, [pc, #112]	; (8003bd0 <main+0x3e8>)
 8003b60:	2201      	movs	r2, #1
 8003b62:	0019      	movs	r1, r3
 8003b64:	f006 fc05 	bl	800a372 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8003b68:	23fa      	movs	r3, #250	; 0xfa
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	0018      	movs	r0, r3
 8003b6e:	f006 f8b1 	bl	8009cd4 <HAL_Delay>
	HAL_GPIO_WritePin(PWR_KEY_GPIO_Port, PWR_KEY_Pin, 0);
 8003b72:	2380      	movs	r3, #128	; 0x80
 8003b74:	019b      	lsls	r3, r3, #6
 8003b76:	4816      	ldr	r0, [pc, #88]	; (8003bd0 <main+0x3e8>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	0019      	movs	r1, r3
 8003b7c:	f006 fbf9 	bl	800a372 <HAL_GPIO_WritePin>
	HAL_Delay(5000);
 8003b80:	4b25      	ldr	r3, [pc, #148]	; (8003c18 <main+0x430>)
 8003b82:	0018      	movs	r0, r3
 8003b84:	f006 f8a6 	bl	8009cd4 <HAL_Delay>
	quectel_init();
 8003b88:	f002 fff0 	bl	8006b6c <quectel_init>

//	INPUT CAPTURE------
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8003b8c:	4b0c      	ldr	r3, [pc, #48]	; (8003bc0 <main+0x3d8>)
 8003b8e:	2100      	movs	r1, #0
 8003b90:	0018      	movs	r0, r3
 8003b92:	f008 fbbb 	bl	800c30c <HAL_TIM_IC_Start_IT>
//	HAL_TIM_IC_Start_DMA(&htim3, TIM_CHANNEL_1, vals, NUMVAL);
	ab=1;
 8003b96:	4b21      	ldr	r3, [pc, #132]	; (8003c1c <main+0x434>)
 8003b98:	2201      	movs	r2, #1
 8003b9a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		while (isTcpOpen == 0 && isLoggedIn == 0) {
 8003b9c:	e0a9      	b.n	8003cf2 <main+0x50a>

			stats = 1;
 8003b9e:	4b20      	ldr	r3, [pc, #128]	; (8003c20 <main+0x438>)
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	701a      	strb	r2, [r3, #0]
			while (isReg == 0) {
 8003ba4:	e063      	b.n	8003c6e <main+0x486>
 8003ba6:	46c0      	nop			; (mov r8, r8)
 8003ba8:	20000430 	.word	0x20000430
 8003bac:	2000047c 	.word	0x2000047c
 8003bb0:	20000398 	.word	0x20000398
 8003bb4:	200003e4 	.word	0x200003e4
 8003bb8:	20000790 	.word	0x20000790
 8003bbc:	200005a8 	.word	0x200005a8
 8003bc0:	2000034c 	.word	0x2000034c
 8003bc4:	200004c8 	.word	0x200004c8
 8003bc8:	2000078c 	.word	0x2000078c
 8003bcc:	20000514 	.word	0x20000514
 8003bd0:	50000400 	.word	0x50000400
 8003bd4:	20000784 	.word	0x20000784
 8003bd8:	20000785 	.word	0x20000785
 8003bdc:	20000d60 	.word	0x20000d60
 8003be0:	20000d62 	.word	0x20000d62
 8003be4:	20000d64 	.word	0x20000d64
 8003be8:	20000d66 	.word	0x20000d66
 8003bec:	ffffff00 	.word	0xffffff00
 8003bf0:	20000014 	.word	0x20000014
 8003bf4:	20000008 	.word	0x20000008
 8003bf8:	20000038 	.word	0x20000038
 8003bfc:	20000030 	.word	0x20000030
 8003c00:	20000004 	.word	0x20000004
 8003c04:	20000005 	.word	0x20000005
 8003c08:	20000786 	.word	0x20000786
 8003c0c:	20000780 	.word	0x20000780
 8003c10:	20000770 	.word	0x20000770
 8003c14:	2000076a 	.word	0x2000076a
 8003c18:	00001388 	.word	0x00001388
 8003c1c:	20000d6d 	.word	0x20000d6d
 8003c20:	20000d6c 	.word	0x20000d6c

				stats = 2;
 8003c24:	4b72      	ldr	r3, [pc, #456]	; (8003df0 <main+0x608>)
 8003c26:	2202      	movs	r2, #2
 8003c28:	701a      	strb	r2, [r3, #0]
				// HAL_UART_Transmit(&huart4, "at+creg",
				// sizeof("at+creg"), 100);
				send_command("AT+CREG?\r\n", 3, 3, 5, 1);
 8003c2a:	4872      	ldr	r0, [pc, #456]	; (8003df4 <main+0x60c>)
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	9300      	str	r3, [sp, #0]
 8003c30:	2305      	movs	r3, #5
 8003c32:	2203      	movs	r2, #3
 8003c34:	2103      	movs	r1, #3
 8003c36:	f002 fee9 	bl	8006a0c <send_command>
				if (!isReg) {
 8003c3a:	4b6f      	ldr	r3, [pc, #444]	; (8003df8 <main+0x610>)
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d115      	bne.n	8003c6e <main+0x486>
					totalBlinks = 4; // not register (2.5 second blink)
 8003c42:	4b6e      	ldr	r3, [pc, #440]	; (8003dfc <main+0x614>)
 8003c44:	2204      	movs	r2, #4
 8003c46:	701a      	strb	r2, [r3, #0]
					HAL_Delay(10000);
 8003c48:	4b6d      	ldr	r3, [pc, #436]	; (8003e00 <main+0x618>)
 8003c4a:	0018      	movs	r0, r3
 8003c4c:	f006 f842 	bl	8009cd4 <HAL_Delay>
					stats = 3;
 8003c50:	4b67      	ldr	r3, [pc, #412]	; (8003df0 <main+0x608>)
 8003c52:	2203      	movs	r2, #3
 8003c54:	701a      	strb	r2, [r3, #0]
					rebootCounter++;
 8003c56:	4b6b      	ldr	r3, [pc, #428]	; (8003e04 <main+0x61c>)
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	b2da      	uxtb	r2, r3
 8003c5e:	4b69      	ldr	r3, [pc, #420]	; (8003e04 <main+0x61c>)
 8003c60:	701a      	strb	r2, [r3, #0]
					if (rebootCounter > mainCount) {
 8003c62:	4b68      	ldr	r3, [pc, #416]	; (8003e04 <main+0x61c>)
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	2b78      	cmp	r3, #120	; 0x78
 8003c68:	d901      	bls.n	8003c6e <main+0x486>
						rebootsystem();
 8003c6a:	f002 fd37 	bl	80066dc <rebootsystem>
			while (isReg == 0) {
 8003c6e:	4b62      	ldr	r3, [pc, #392]	; (8003df8 <main+0x610>)
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d0d6      	beq.n	8003c24 <main+0x43c>
					}
				}
			}
			totalBlinks = 3; // sim registered (1 second blink)
 8003c76:	4b61      	ldr	r3, [pc, #388]	; (8003dfc <main+0x614>)
 8003c78:	2203      	movs	r2, #3
 8003c7a:	701a      	strb	r2, [r3, #0]
			if (estabilish_tcp() == 1) {
 8003c7c:	f002 ffd0 	bl	8006c20 <estabilish_tcp>
 8003c80:	0003      	movs	r3, r0
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d11c      	bne.n	8003cc0 <main+0x4d8>
				totalBlinks = 2; // tcp opened (0.5 second blink)
 8003c86:	4b5d      	ldr	r3, [pc, #372]	; (8003dfc <main+0x614>)
 8003c88:	2202      	movs	r2, #2
 8003c8a:	701a      	strb	r2, [r3, #0]
				// HAL_UART_Transmit(&huart4, "Loginpacket sending",
				// sizeof("loginpacket sending"), 100);
				send_login_packet();
 8003c8c:	f003 f9b2 	bl	8006ff4 <send_login_packet>
				HAL_Delay(5000);
 8003c90:	4b5d      	ldr	r3, [pc, #372]	; (8003e08 <main+0x620>)
 8003c92:	0018      	movs	r0, r3
 8003c94:	f006 f81e 	bl	8009cd4 <HAL_Delay>
				if (isLoggedIn == 0) {
 8003c98:	4b5c      	ldr	r3, [pc, #368]	; (8003e0c <main+0x624>)
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d127      	bne.n	8003cf2 <main+0x50a>
					// HAL_UART_Transmit(&huart4, "Loginpacket sending",
					// sizeof("loginpacket sending"), 100);
					send_login_packet();
 8003ca2:	f003 f9a7 	bl	8006ff4 <send_login_packet>
					HAL_Delay(5000);
 8003ca6:	4b58      	ldr	r3, [pc, #352]	; (8003e08 <main+0x620>)
 8003ca8:	0018      	movs	r0, r3
 8003caa:	f006 f813 	bl	8009cd4 <HAL_Delay>
					if (isLoggedIn == 0) {
 8003cae:	4b57      	ldr	r3, [pc, #348]	; (8003e0c <main+0x624>)
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d11c      	bne.n	8003cf2 <main+0x50a>
						isTcpOpen = 0;
 8003cb8:	4b55      	ldr	r3, [pc, #340]	; (8003e10 <main+0x628>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	701a      	strb	r2, [r3, #0]
 8003cbe:	e018      	b.n	8003cf2 <main+0x50a>
					}
				}
			}
			else {

				recTimeA = 0;
 8003cc0:	4b54      	ldr	r3, [pc, #336]	; (8003e14 <main+0x62c>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	701a      	strb	r2, [r3, #0]
				while (recTimeA < rTime) { //18 to 180
 8003cc6:	e00e      	b.n	8003ce6 <main+0x4fe>
					HAL_Delay(1000);
 8003cc8:	23fa      	movs	r3, #250	; 0xfa
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	0018      	movs	r0, r3
 8003cce:	f006 f801 	bl	8009cd4 <HAL_Delay>
					recTimeA++;
 8003cd2:	4b50      	ldr	r3, [pc, #320]	; (8003e14 <main+0x62c>)
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	b2da      	uxtb	r2, r3
 8003cda:	4b4e      	ldr	r3, [pc, #312]	; (8003e14 <main+0x62c>)
 8003cdc:	701a      	strb	r2, [r3, #0]
					where_api_handler();
 8003cde:	f003 f89d 	bl	8006e1c <where_api_handler>
					alarm_sender();
 8003ce2:	f003 f8d5 	bl	8006e90 <alarm_sender>
				while (recTimeA < rTime) { //18 to 180
 8003ce6:	4b4b      	ldr	r3, [pc, #300]	; (8003e14 <main+0x62c>)
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	2bb3      	cmp	r3, #179	; 0xb3
 8003cec:	d9ec      	bls.n	8003cc8 <main+0x4e0>
				}
				//SEND LOCATION VIA SMS
				//--------------------------------------------------------------------------
				send_location_packet_via_sms();
 8003cee:	f004 fa11 	bl	8008114 <send_location_packet_via_sms>
		while (isTcpOpen == 0 && isLoggedIn == 0) {
 8003cf2:	4b47      	ldr	r3, [pc, #284]	; (8003e10 <main+0x628>)
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d15f      	bne.n	8003dbc <main+0x5d4>
 8003cfc:	4b43      	ldr	r3, [pc, #268]	; (8003e0c <main+0x624>)
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d100      	bne.n	8003d08 <main+0x520>
 8003d06:	e74a      	b.n	8003b9e <main+0x3b6>
				//--------------------------------------------------------
			}
		}
		while (isTcpOpen == 1 && isLoggedIn == 1 && isDataMode == 1) {
 8003d08:	e058      	b.n	8003dbc <main+0x5d4>
			totalBlinks = 1; // (all good 100ms blink)
 8003d0a:	4b3c      	ldr	r3, [pc, #240]	; (8003dfc <main+0x614>)
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	701a      	strb	r2, [r3, #0]
			stats = 7;
 8003d10:	4b37      	ldr	r3, [pc, #220]	; (8003df0 <main+0x608>)
 8003d12:	2207      	movs	r2, #7
 8003d14:	701a      	strb	r2, [r3, #0]
			uint8_t tempDelayCounter=0;
 8003d16:	23fc      	movs	r3, #252	; 0xfc
 8003d18:	18fb      	adds	r3, r7, r3
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	701a      	strb	r2, [r3, #0]
			while(isAlarm == 0){
 8003d1e:	e014      	b.n	8003d4a <main+0x562>
				tempDelayCounter++;
 8003d20:	21fc      	movs	r1, #252	; 0xfc
 8003d22:	187b      	adds	r3, r7, r1
 8003d24:	781a      	ldrb	r2, [r3, #0]
 8003d26:	187b      	adds	r3, r7, r1
 8003d28:	3201      	adds	r2, #1
 8003d2a:	701a      	strb	r2, [r3, #0]
				if(tempDelayCounter>locationDataIntervalA){
 8003d2c:	4b3a      	ldr	r3, [pc, #232]	; (8003e18 <main+0x630>)
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	187a      	adds	r2, r7, r1
 8003d32:	7812      	ldrb	r2, [r2, #0]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d903      	bls.n	8003d40 <main+0x558>
					tempDelayCounter=0;
 8003d38:	187b      	adds	r3, r7, r1
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	701a      	strb	r2, [r3, #0]
					break;
 8003d3e:	e009      	b.n	8003d54 <main+0x56c>
				}
				else{
					HAL_Delay(1000);
 8003d40:	23fa      	movs	r3, #250	; 0xfa
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	0018      	movs	r0, r3
 8003d46:	f005 ffc5 	bl	8009cd4 <HAL_Delay>
			while(isAlarm == 0){
 8003d4a:	4b34      	ldr	r3, [pc, #208]	; (8003e1c <main+0x634>)
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d0e5      	beq.n	8003d20 <main+0x538>
				}
			}
			HAL_Delay(1000);
 8003d54:	23fa      	movs	r3, #250	; 0xfa
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	0018      	movs	r0, r3
 8003d5a:	f005 ffbb 	bl	8009cd4 <HAL_Delay>
//			HAL_Delay(locationDataIntervalA*1000);
			heartBeatTimer++;
 8003d5e:	4b30      	ldr	r3, [pc, #192]	; (8003e20 <main+0x638>)
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	3301      	adds	r3, #1
 8003d64:	b2da      	uxtb	r2, r3
 8003d66:	4b2e      	ldr	r3, [pc, #184]	; (8003e20 <main+0x638>)
 8003d68:	701a      	strb	r2, [r3, #0]
			if (heartBeatTimer > 36) {
 8003d6a:	4b2d      	ldr	r3, [pc, #180]	; (8003e20 <main+0x638>)
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	2b24      	cmp	r3, #36	; 0x24
 8003d70:	d90e      	bls.n	8003d90 <main+0x5a8>
				stats = 8;
 8003d72:	4b1f      	ldr	r3, [pc, #124]	; (8003df0 <main+0x608>)
 8003d74:	2208      	movs	r2, #8
 8003d76:	701a      	strb	r2, [r3, #0]
				isLoggedIn = 0;
 8003d78:	4b24      	ldr	r3, [pc, #144]	; (8003e0c <main+0x624>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	701a      	strb	r2, [r3, #0]
				send_hb_packet();
 8003d7e:	f003 fd97 	bl	80078b0 <send_hb_packet>
				HAL_Delay(10000);
 8003d82:	4b1f      	ldr	r3, [pc, #124]	; (8003e00 <main+0x618>)
 8003d84:	0018      	movs	r0, r3
 8003d86:	f005 ffa5 	bl	8009cd4 <HAL_Delay>
				heartBeatTimer = 0;
 8003d8a:	4b25      	ldr	r3, [pc, #148]	; (8003e20 <main+0x638>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	701a      	strb	r2, [r3, #0]
			}
			if (isDataMode == 1 && isLoggedIn == 1 && isTcpOpen == 1) {
 8003d90:	4b24      	ldr	r3, [pc, #144]	; (8003e24 <main+0x63c>)
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d110      	bne.n	8003dbc <main+0x5d4>
 8003d9a:	4b1c      	ldr	r3, [pc, #112]	; (8003e0c <main+0x624>)
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d10b      	bne.n	8003dbc <main+0x5d4>
 8003da4:	4b1a      	ldr	r3, [pc, #104]	; (8003e10 <main+0x628>)
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d106      	bne.n	8003dbc <main+0x5d4>
				stats = 8;
 8003dae:	4b10      	ldr	r3, [pc, #64]	; (8003df0 <main+0x608>)
 8003db0:	2208      	movs	r2, #8
 8003db2:	701a      	strb	r2, [r3, #0]
				incoming_msg_handler();
 8003db4:	f003 f8ba 	bl	8006f2c <incoming_msg_handler>
				send_data_packet();
 8003db8:	f003 f99e 	bl	80070f8 <send_data_packet>
		while (isTcpOpen == 1 && isLoggedIn == 1 && isDataMode == 1) {
 8003dbc:	4b14      	ldr	r3, [pc, #80]	; (8003e10 <main+0x628>)
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d109      	bne.n	8003dda <main+0x5f2>
 8003dc6:	4b11      	ldr	r3, [pc, #68]	; (8003e0c <main+0x624>)
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d104      	bne.n	8003dda <main+0x5f2>
 8003dd0:	4b14      	ldr	r3, [pc, #80]	; (8003e24 <main+0x63c>)
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d097      	beq.n	8003d0a <main+0x522>
			}

		}
		isTcpOpen = 0;
 8003dda:	4b0d      	ldr	r3, [pc, #52]	; (8003e10 <main+0x628>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	701a      	strb	r2, [r3, #0]
		isLoggedIn = 0;
 8003de0:	4b0a      	ldr	r3, [pc, #40]	; (8003e0c <main+0x624>)
 8003de2:	2200      	movs	r2, #0
 8003de4:	701a      	strb	r2, [r3, #0]
		isDataMode = 0;
 8003de6:	4b0f      	ldr	r3, [pc, #60]	; (8003e24 <main+0x63c>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	701a      	strb	r2, [r3, #0]
		while (isTcpOpen == 0 && isLoggedIn == 0) {
 8003dec:	e781      	b.n	8003cf2 <main+0x50a>
 8003dee:	46c0      	nop			; (mov r8, r8)
 8003df0:	20000d6c 	.word	0x20000d6c
 8003df4:	080134b0 	.word	0x080134b0
 8003df8:	20000a79 	.word	0x20000a79
 8003dfc:	200000d7 	.word	0x200000d7
 8003e00:	00002710 	.word	0x00002710
 8003e04:	2000078b 	.word	0x2000078b
 8003e08:	00001388 	.word	0x00001388
 8003e0c:	20000a7c 	.word	0x20000a7c
 8003e10:	20000a78 	.word	0x20000a78
 8003e14:	20000787 	.word	0x20000787
 8003e18:	20000004 	.word	0x20000004
 8003e1c:	20000771 	.word	0x20000771
 8003e20:	2000078a 	.word	0x2000078a
 8003e24:	200008c6 	.word	0x200008c6

08003e28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003e28:	b590      	push	{r4, r7, lr}
 8003e2a:	b093      	sub	sp, #76	; 0x4c
 8003e2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003e2e:	2414      	movs	r4, #20
 8003e30:	193b      	adds	r3, r7, r4
 8003e32:	0018      	movs	r0, r3
 8003e34:	2334      	movs	r3, #52	; 0x34
 8003e36:	001a      	movs	r2, r3
 8003e38:	2100      	movs	r1, #0
 8003e3a:	f00b f8e4 	bl	800f006 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003e3e:	1d3b      	adds	r3, r7, #4
 8003e40:	0018      	movs	r0, r3
 8003e42:	2310      	movs	r3, #16
 8003e44:	001a      	movs	r2, r3
 8003e46:	2100      	movs	r1, #0
 8003e48:	f00b f8dd 	bl	800f006 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e4c:	2380      	movs	r3, #128	; 0x80
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	0018      	movs	r0, r3
 8003e52:	f006 fac7 	bl	800a3e4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003e56:	193b      	adds	r3, r7, r4
 8003e58:	2202      	movs	r2, #2
 8003e5a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003e5c:	193b      	adds	r3, r7, r4
 8003e5e:	2280      	movs	r2, #128	; 0x80
 8003e60:	0052      	lsls	r2, r2, #1
 8003e62:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8003e64:	0021      	movs	r1, r4
 8003e66:	187b      	adds	r3, r7, r1
 8003e68:	2200      	movs	r2, #0
 8003e6a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003e6c:	187b      	adds	r3, r7, r1
 8003e6e:	2240      	movs	r2, #64	; 0x40
 8003e70:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e72:	187b      	adds	r3, r7, r1
 8003e74:	2202      	movs	r2, #2
 8003e76:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003e78:	187b      	adds	r3, r7, r1
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8003e7e:	187b      	adds	r3, r7, r1
 8003e80:	2200      	movs	r2, #0
 8003e82:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8003e84:	187b      	adds	r3, r7, r1
 8003e86:	2208      	movs	r2, #8
 8003e88:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003e8a:	187b      	adds	r3, r7, r1
 8003e8c:	2280      	movs	r2, #128	; 0x80
 8003e8e:	0292      	lsls	r2, r2, #10
 8003e90:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003e92:	187b      	adds	r3, r7, r1
 8003e94:	2280      	movs	r2, #128	; 0x80
 8003e96:	0592      	lsls	r2, r2, #22
 8003e98:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e9a:	187b      	adds	r3, r7, r1
 8003e9c:	0018      	movs	r0, r3
 8003e9e:	f006 faed 	bl	800a47c <HAL_RCC_OscConfig>
 8003ea2:	1e03      	subs	r3, r0, #0
 8003ea4:	d001      	beq.n	8003eaa <SystemClock_Config+0x82>
  {
    Error_Handler();
 8003ea6:	f004 fd5d 	bl	8008964 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003eaa:	1d3b      	adds	r3, r7, #4
 8003eac:	2207      	movs	r2, #7
 8003eae:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003eb0:	1d3b      	adds	r3, r7, #4
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003eb6:	1d3b      	adds	r3, r7, #4
 8003eb8:	2200      	movs	r2, #0
 8003eba:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003ebc:	1d3b      	adds	r3, r7, #4
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003ec2:	1d3b      	adds	r3, r7, #4
 8003ec4:	2102      	movs	r1, #2
 8003ec6:	0018      	movs	r0, r3
 8003ec8:	f006 fde8 	bl	800aa9c <HAL_RCC_ClockConfig>
 8003ecc:	1e03      	subs	r3, r0, #0
 8003ece:	d001      	beq.n	8003ed4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8003ed0:	f004 fd48 	bl	8008964 <Error_Handler>
  }
}
 8003ed4:	46c0      	nop			; (mov r8, r8)
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	b013      	add	sp, #76	; 0x4c
 8003eda:	bd90      	pop	{r4, r7, pc}

08003edc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003ee0:	4b1b      	ldr	r3, [pc, #108]	; (8003f50 <MX_SPI1_Init+0x74>)
 8003ee2:	4a1c      	ldr	r2, [pc, #112]	; (8003f54 <MX_SPI1_Init+0x78>)
 8003ee4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003ee6:	4b1a      	ldr	r3, [pc, #104]	; (8003f50 <MX_SPI1_Init+0x74>)
 8003ee8:	2282      	movs	r2, #130	; 0x82
 8003eea:	0052      	lsls	r2, r2, #1
 8003eec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003eee:	4b18      	ldr	r3, [pc, #96]	; (8003f50 <MX_SPI1_Init+0x74>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003ef4:	4b16      	ldr	r3, [pc, #88]	; (8003f50 <MX_SPI1_Init+0x74>)
 8003ef6:	22e0      	movs	r2, #224	; 0xe0
 8003ef8:	00d2      	lsls	r2, r2, #3
 8003efa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003efc:	4b14      	ldr	r3, [pc, #80]	; (8003f50 <MX_SPI1_Init+0x74>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003f02:	4b13      	ldr	r3, [pc, #76]	; (8003f50 <MX_SPI1_Init+0x74>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003f08:	4b11      	ldr	r3, [pc, #68]	; (8003f50 <MX_SPI1_Init+0x74>)
 8003f0a:	2280      	movs	r2, #128	; 0x80
 8003f0c:	0092      	lsls	r2, r2, #2
 8003f0e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003f10:	4b0f      	ldr	r3, [pc, #60]	; (8003f50 <MX_SPI1_Init+0x74>)
 8003f12:	2220      	movs	r2, #32
 8003f14:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003f16:	4b0e      	ldr	r3, [pc, #56]	; (8003f50 <MX_SPI1_Init+0x74>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003f1c:	4b0c      	ldr	r3, [pc, #48]	; (8003f50 <MX_SPI1_Init+0x74>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f22:	4b0b      	ldr	r3, [pc, #44]	; (8003f50 <MX_SPI1_Init+0x74>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003f28:	4b09      	ldr	r3, [pc, #36]	; (8003f50 <MX_SPI1_Init+0x74>)
 8003f2a:	2207      	movs	r2, #7
 8003f2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003f2e:	4b08      	ldr	r3, [pc, #32]	; (8003f50 <MX_SPI1_Init+0x74>)
 8003f30:	2200      	movs	r2, #0
 8003f32:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003f34:	4b06      	ldr	r3, [pc, #24]	; (8003f50 <MX_SPI1_Init+0x74>)
 8003f36:	2208      	movs	r2, #8
 8003f38:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003f3a:	4b05      	ldr	r3, [pc, #20]	; (8003f50 <MX_SPI1_Init+0x74>)
 8003f3c:	0018      	movs	r0, r3
 8003f3e:	f007 f88b 	bl	800b058 <HAL_SPI_Init>
 8003f42:	1e03      	subs	r3, r0, #0
 8003f44:	d001      	beq.n	8003f4a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003f46:	f004 fd0d 	bl	8008964 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003f4a:	46c0      	nop			; (mov r8, r8)
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	200002e8 	.word	0x200002e8
 8003f54:	40013000 	.word	0x40013000

08003f58 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b08c      	sub	sp, #48	; 0x30
 8003f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f5e:	2320      	movs	r3, #32
 8003f60:	18fb      	adds	r3, r7, r3
 8003f62:	0018      	movs	r0, r3
 8003f64:	2310      	movs	r3, #16
 8003f66:	001a      	movs	r2, r3
 8003f68:	2100      	movs	r1, #0
 8003f6a:	f00b f84c 	bl	800f006 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f6e:	2314      	movs	r3, #20
 8003f70:	18fb      	adds	r3, r7, r3
 8003f72:	0018      	movs	r0, r3
 8003f74:	230c      	movs	r3, #12
 8003f76:	001a      	movs	r2, r3
 8003f78:	2100      	movs	r1, #0
 8003f7a:	f00b f844 	bl	800f006 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003f7e:	1d3b      	adds	r3, r7, #4
 8003f80:	0018      	movs	r0, r3
 8003f82:	2310      	movs	r3, #16
 8003f84:	001a      	movs	r2, r3
 8003f86:	2100      	movs	r1, #0
 8003f88:	f00b f83d 	bl	800f006 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003f8c:	4b2e      	ldr	r3, [pc, #184]	; (8004048 <MX_TIM3_Init+0xf0>)
 8003f8e:	4a2f      	ldr	r2, [pc, #188]	; (800404c <MX_TIM3_Init+0xf4>)
 8003f90:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64000;
 8003f92:	4b2d      	ldr	r3, [pc, #180]	; (8004048 <MX_TIM3_Init+0xf0>)
 8003f94:	22fa      	movs	r2, #250	; 0xfa
 8003f96:	0212      	lsls	r2, r2, #8
 8003f98:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f9a:	4b2b      	ldr	r3, [pc, #172]	; (8004048 <MX_TIM3_Init+0xf0>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8003fa0:	4b29      	ldr	r3, [pc, #164]	; (8004048 <MX_TIM3_Init+0xf0>)
 8003fa2:	22fa      	movs	r2, #250	; 0xfa
 8003fa4:	0092      	lsls	r2, r2, #2
 8003fa6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fa8:	4b27      	ldr	r3, [pc, #156]	; (8004048 <MX_TIM3_Init+0xf0>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003fae:	4b26      	ldr	r3, [pc, #152]	; (8004048 <MX_TIM3_Init+0xf0>)
 8003fb0:	2280      	movs	r2, #128	; 0x80
 8003fb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003fb4:	4b24      	ldr	r3, [pc, #144]	; (8004048 <MX_TIM3_Init+0xf0>)
 8003fb6:	0018      	movs	r0, r3
 8003fb8:	f008 f86c 	bl	800c094 <HAL_TIM_Base_Init>
 8003fbc:	1e03      	subs	r3, r0, #0
 8003fbe:	d001      	beq.n	8003fc4 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8003fc0:	f004 fcd0 	bl	8008964 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003fc4:	2120      	movs	r1, #32
 8003fc6:	187b      	adds	r3, r7, r1
 8003fc8:	2280      	movs	r2, #128	; 0x80
 8003fca:	0152      	lsls	r2, r2, #5
 8003fcc:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003fce:	187a      	adds	r2, r7, r1
 8003fd0:	4b1d      	ldr	r3, [pc, #116]	; (8004048 <MX_TIM3_Init+0xf0>)
 8003fd2:	0011      	movs	r1, r2
 8003fd4:	0018      	movs	r0, r3
 8003fd6:	f008 fca1 	bl	800c91c <HAL_TIM_ConfigClockSource>
 8003fda:	1e03      	subs	r3, r0, #0
 8003fdc:	d001      	beq.n	8003fe2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8003fde:	f004 fcc1 	bl	8008964 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8003fe2:	4b19      	ldr	r3, [pc, #100]	; (8004048 <MX_TIM3_Init+0xf0>)
 8003fe4:	0018      	movs	r0, r3
 8003fe6:	f008 f931 	bl	800c24c <HAL_TIM_IC_Init>
 8003fea:	1e03      	subs	r3, r0, #0
 8003fec:	d001      	beq.n	8003ff2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8003fee:	f004 fcb9 	bl	8008964 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ff2:	2114      	movs	r1, #20
 8003ff4:	187b      	adds	r3, r7, r1
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ffa:	187b      	adds	r3, r7, r1
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004000:	187a      	adds	r2, r7, r1
 8004002:	4b11      	ldr	r3, [pc, #68]	; (8004048 <MX_TIM3_Init+0xf0>)
 8004004:	0011      	movs	r1, r2
 8004006:	0018      	movs	r0, r3
 8004008:	f008 ffcc 	bl	800cfa4 <HAL_TIMEx_MasterConfigSynchronization>
 800400c:	1e03      	subs	r3, r0, #0
 800400e:	d001      	beq.n	8004014 <MX_TIM3_Init+0xbc>
  {
    Error_Handler();
 8004010:	f004 fca8 	bl	8008964 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8004014:	1d3b      	adds	r3, r7, #4
 8004016:	220a      	movs	r2, #10
 8004018:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800401a:	1d3b      	adds	r3, r7, #4
 800401c:	2201      	movs	r2, #1
 800401e:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004020:	1d3b      	adds	r3, r7, #4
 8004022:	2200      	movs	r2, #0
 8004024:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8004026:	1d3b      	adds	r3, r7, #4
 8004028:	2200      	movs	r2, #0
 800402a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800402c:	1d39      	adds	r1, r7, #4
 800402e:	4b06      	ldr	r3, [pc, #24]	; (8004048 <MX_TIM3_Init+0xf0>)
 8004030:	2200      	movs	r2, #0
 8004032:	0018      	movs	r0, r3
 8004034:	f008 fbce 	bl	800c7d4 <HAL_TIM_IC_ConfigChannel>
 8004038:	1e03      	subs	r3, r0, #0
 800403a:	d001      	beq.n	8004040 <MX_TIM3_Init+0xe8>
  {
    Error_Handler();
 800403c:	f004 fc92 	bl	8008964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004040:	46c0      	nop			; (mov r8, r8)
 8004042:	46bd      	mov	sp, r7
 8004044:	b00c      	add	sp, #48	; 0x30
 8004046:	bd80      	pop	{r7, pc}
 8004048:	2000034c 	.word	0x2000034c
 800404c:	40000400 	.word	0x40000400

08004050 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004056:	1d3b      	adds	r3, r7, #4
 8004058:	0018      	movs	r0, r3
 800405a:	230c      	movs	r3, #12
 800405c:	001a      	movs	r2, r3
 800405e:	2100      	movs	r1, #0
 8004060:	f00a ffd1 	bl	800f006 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004064:	4b15      	ldr	r3, [pc, #84]	; (80040bc <MX_TIM6_Init+0x6c>)
 8004066:	4a16      	ldr	r2, [pc, #88]	; (80040c0 <MX_TIM6_Init+0x70>)
 8004068:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 6400;
 800406a:	4b14      	ldr	r3, [pc, #80]	; (80040bc <MX_TIM6_Init+0x6c>)
 800406c:	22c8      	movs	r2, #200	; 0xc8
 800406e:	0152      	lsls	r2, r2, #5
 8004070:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004072:	4b12      	ldr	r3, [pc, #72]	; (80040bc <MX_TIM6_Init+0x6c>)
 8004074:	2200      	movs	r2, #0
 8004076:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8004078:	4b10      	ldr	r3, [pc, #64]	; (80040bc <MX_TIM6_Init+0x6c>)
 800407a:	4a12      	ldr	r2, [pc, #72]	; (80040c4 <MX_TIM6_Init+0x74>)
 800407c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800407e:	4b0f      	ldr	r3, [pc, #60]	; (80040bc <MX_TIM6_Init+0x6c>)
 8004080:	2280      	movs	r2, #128	; 0x80
 8004082:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004084:	4b0d      	ldr	r3, [pc, #52]	; (80040bc <MX_TIM6_Init+0x6c>)
 8004086:	0018      	movs	r0, r3
 8004088:	f008 f804 	bl	800c094 <HAL_TIM_Base_Init>
 800408c:	1e03      	subs	r3, r0, #0
 800408e:	d001      	beq.n	8004094 <MX_TIM6_Init+0x44>
  {
    Error_Handler();
 8004090:	f004 fc68 	bl	8008964 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004094:	1d3b      	adds	r3, r7, #4
 8004096:	2200      	movs	r2, #0
 8004098:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800409a:	1d3b      	adds	r3, r7, #4
 800409c:	2200      	movs	r2, #0
 800409e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80040a0:	1d3a      	adds	r2, r7, #4
 80040a2:	4b06      	ldr	r3, [pc, #24]	; (80040bc <MX_TIM6_Init+0x6c>)
 80040a4:	0011      	movs	r1, r2
 80040a6:	0018      	movs	r0, r3
 80040a8:	f008 ff7c 	bl	800cfa4 <HAL_TIMEx_MasterConfigSynchronization>
 80040ac:	1e03      	subs	r3, r0, #0
 80040ae:	d001      	beq.n	80040b4 <MX_TIM6_Init+0x64>
  {
    Error_Handler();
 80040b0:	f004 fc58 	bl	8008964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80040b4:	46c0      	nop			; (mov r8, r8)
 80040b6:	46bd      	mov	sp, r7
 80040b8:	b004      	add	sp, #16
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	20000398 	.word	0x20000398
 80040c0:	40001000 	.word	0x40001000
 80040c4:	000003e7 	.word	0x000003e7

080040c8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040ce:	1d3b      	adds	r3, r7, #4
 80040d0:	0018      	movs	r0, r3
 80040d2:	230c      	movs	r3, #12
 80040d4:	001a      	movs	r2, r3
 80040d6:	2100      	movs	r1, #0
 80040d8:	f00a ff95 	bl	800f006 <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80040dc:	4b15      	ldr	r3, [pc, #84]	; (8004134 <MX_TIM7_Init+0x6c>)
 80040de:	4a16      	ldr	r2, [pc, #88]	; (8004138 <MX_TIM7_Init+0x70>)
 80040e0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 6400;
 80040e2:	4b14      	ldr	r3, [pc, #80]	; (8004134 <MX_TIM7_Init+0x6c>)
 80040e4:	22c8      	movs	r2, #200	; 0xc8
 80040e6:	0152      	lsls	r2, r2, #5
 80040e8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040ea:	4b12      	ldr	r3, [pc, #72]	; (8004134 <MX_TIM7_Init+0x6c>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 80040f0:	4b10      	ldr	r3, [pc, #64]	; (8004134 <MX_TIM7_Init+0x6c>)
 80040f2:	4a12      	ldr	r2, [pc, #72]	; (800413c <MX_TIM7_Init+0x74>)
 80040f4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80040f6:	4b0f      	ldr	r3, [pc, #60]	; (8004134 <MX_TIM7_Init+0x6c>)
 80040f8:	2280      	movs	r2, #128	; 0x80
 80040fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80040fc:	4b0d      	ldr	r3, [pc, #52]	; (8004134 <MX_TIM7_Init+0x6c>)
 80040fe:	0018      	movs	r0, r3
 8004100:	f007 ffc8 	bl	800c094 <HAL_TIM_Base_Init>
 8004104:	1e03      	subs	r3, r0, #0
 8004106:	d001      	beq.n	800410c <MX_TIM7_Init+0x44>
  {
    Error_Handler();
 8004108:	f004 fc2c 	bl	8008964 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800410c:	1d3b      	adds	r3, r7, #4
 800410e:	2200      	movs	r2, #0
 8004110:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004112:	1d3b      	adds	r3, r7, #4
 8004114:	2200      	movs	r2, #0
 8004116:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004118:	1d3a      	adds	r2, r7, #4
 800411a:	4b06      	ldr	r3, [pc, #24]	; (8004134 <MX_TIM7_Init+0x6c>)
 800411c:	0011      	movs	r1, r2
 800411e:	0018      	movs	r0, r3
 8004120:	f008 ff40 	bl	800cfa4 <HAL_TIMEx_MasterConfigSynchronization>
 8004124:	1e03      	subs	r3, r0, #0
 8004126:	d001      	beq.n	800412c <MX_TIM7_Init+0x64>
  {
    Error_Handler();
 8004128:	f004 fc1c 	bl	8008964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800412c:	46c0      	nop			; (mov r8, r8)
 800412e:	46bd      	mov	sp, r7
 8004130:	b004      	add	sp, #16
 8004132:	bd80      	pop	{r7, pc}
 8004134:	200003e4 	.word	0x200003e4
 8004138:	40001400 	.word	0x40001400
 800413c:	000003e7 	.word	0x000003e7

08004140 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8004144:	4b0e      	ldr	r3, [pc, #56]	; (8004180 <MX_TIM14_Init+0x40>)
 8004146:	4a0f      	ldr	r2, [pc, #60]	; (8004184 <MX_TIM14_Init+0x44>)
 8004148:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 6400;
 800414a:	4b0d      	ldr	r3, [pc, #52]	; (8004180 <MX_TIM14_Init+0x40>)
 800414c:	22c8      	movs	r2, #200	; 0xc8
 800414e:	0152      	lsls	r2, r2, #5
 8004150:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004152:	4b0b      	ldr	r3, [pc, #44]	; (8004180 <MX_TIM14_Init+0x40>)
 8004154:	2200      	movs	r2, #0
 8004156:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000-1;
 8004158:	4b09      	ldr	r3, [pc, #36]	; (8004180 <MX_TIM14_Init+0x40>)
 800415a:	4a0b      	ldr	r2, [pc, #44]	; (8004188 <MX_TIM14_Init+0x48>)
 800415c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800415e:	4b08      	ldr	r3, [pc, #32]	; (8004180 <MX_TIM14_Init+0x40>)
 8004160:	2200      	movs	r2, #0
 8004162:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004164:	4b06      	ldr	r3, [pc, #24]	; (8004180 <MX_TIM14_Init+0x40>)
 8004166:	2280      	movs	r2, #128	; 0x80
 8004168:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800416a:	4b05      	ldr	r3, [pc, #20]	; (8004180 <MX_TIM14_Init+0x40>)
 800416c:	0018      	movs	r0, r3
 800416e:	f007 ff91 	bl	800c094 <HAL_TIM_Base_Init>
 8004172:	1e03      	subs	r3, r0, #0
 8004174:	d001      	beq.n	800417a <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8004176:	f004 fbf5 	bl	8008964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800417a:	46c0      	nop			; (mov r8, r8)
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	20000430 	.word	0x20000430
 8004184:	40002000 	.word	0x40002000
 8004188:	0000270f 	.word	0x0000270f

0800418c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8004190:	4b10      	ldr	r3, [pc, #64]	; (80041d4 <MX_TIM16_Init+0x48>)
 8004192:	4a11      	ldr	r2, [pc, #68]	; (80041d8 <MX_TIM16_Init+0x4c>)
 8004194:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 6400;
 8004196:	4b0f      	ldr	r3, [pc, #60]	; (80041d4 <MX_TIM16_Init+0x48>)
 8004198:	22c8      	movs	r2, #200	; 0xc8
 800419a:	0152      	lsls	r2, r2, #5
 800419c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800419e:	4b0d      	ldr	r3, [pc, #52]	; (80041d4 <MX_TIM16_Init+0x48>)
 80041a0:	2200      	movs	r2, #0
 80041a2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000-1;
 80041a4:	4b0b      	ldr	r3, [pc, #44]	; (80041d4 <MX_TIM16_Init+0x48>)
 80041a6:	4a0d      	ldr	r2, [pc, #52]	; (80041dc <MX_TIM16_Init+0x50>)
 80041a8:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041aa:	4b0a      	ldr	r3, [pc, #40]	; (80041d4 <MX_TIM16_Init+0x48>)
 80041ac:	2200      	movs	r2, #0
 80041ae:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80041b0:	4b08      	ldr	r3, [pc, #32]	; (80041d4 <MX_TIM16_Init+0x48>)
 80041b2:	2200      	movs	r2, #0
 80041b4:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80041b6:	4b07      	ldr	r3, [pc, #28]	; (80041d4 <MX_TIM16_Init+0x48>)
 80041b8:	2280      	movs	r2, #128	; 0x80
 80041ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80041bc:	4b05      	ldr	r3, [pc, #20]	; (80041d4 <MX_TIM16_Init+0x48>)
 80041be:	0018      	movs	r0, r3
 80041c0:	f007 ff68 	bl	800c094 <HAL_TIM_Base_Init>
 80041c4:	1e03      	subs	r3, r0, #0
 80041c6:	d001      	beq.n	80041cc <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80041c8:	f004 fbcc 	bl	8008964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80041cc:	46c0      	nop			; (mov r8, r8)
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	46c0      	nop			; (mov r8, r8)
 80041d4:	2000047c 	.word	0x2000047c
 80041d8:	40014400 	.word	0x40014400
 80041dc:	0000270f 	.word	0x0000270f

080041e0 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80041e4:	4b10      	ldr	r3, [pc, #64]	; (8004228 <MX_TIM17_Init+0x48>)
 80041e6:	4a11      	ldr	r2, [pc, #68]	; (800422c <MX_TIM17_Init+0x4c>)
 80041e8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 6400;
 80041ea:	4b0f      	ldr	r3, [pc, #60]	; (8004228 <MX_TIM17_Init+0x48>)
 80041ec:	22c8      	movs	r2, #200	; 0xc8
 80041ee:	0152      	lsls	r2, r2, #5
 80041f0:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041f2:	4b0d      	ldr	r3, [pc, #52]	; (8004228 <MX_TIM17_Init+0x48>)
 80041f4:	2200      	movs	r2, #0
 80041f6:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 4000-1;
 80041f8:	4b0b      	ldr	r3, [pc, #44]	; (8004228 <MX_TIM17_Init+0x48>)
 80041fa:	4a0d      	ldr	r2, [pc, #52]	; (8004230 <MX_TIM17_Init+0x50>)
 80041fc:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041fe:	4b0a      	ldr	r3, [pc, #40]	; (8004228 <MX_TIM17_Init+0x48>)
 8004200:	2200      	movs	r2, #0
 8004202:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8004204:	4b08      	ldr	r3, [pc, #32]	; (8004228 <MX_TIM17_Init+0x48>)
 8004206:	2200      	movs	r2, #0
 8004208:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800420a:	4b07      	ldr	r3, [pc, #28]	; (8004228 <MX_TIM17_Init+0x48>)
 800420c:	2280      	movs	r2, #128	; 0x80
 800420e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8004210:	4b05      	ldr	r3, [pc, #20]	; (8004228 <MX_TIM17_Init+0x48>)
 8004212:	0018      	movs	r0, r3
 8004214:	f007 ff3e 	bl	800c094 <HAL_TIM_Base_Init>
 8004218:	1e03      	subs	r3, r0, #0
 800421a:	d001      	beq.n	8004220 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 800421c:	f004 fba2 	bl	8008964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8004220:	46c0      	nop			; (mov r8, r8)
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	46c0      	nop			; (mov r8, r8)
 8004228:	200004c8 	.word	0x200004c8
 800422c:	40014800 	.word	0x40014800
 8004230:	00000f9f 	.word	0x00000f9f

08004234 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004238:	4b23      	ldr	r3, [pc, #140]	; (80042c8 <MX_USART1_UART_Init+0x94>)
 800423a:	4a24      	ldr	r2, [pc, #144]	; (80042cc <MX_USART1_UART_Init+0x98>)
 800423c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800423e:	4b22      	ldr	r3, [pc, #136]	; (80042c8 <MX_USART1_UART_Init+0x94>)
 8004240:	2296      	movs	r2, #150	; 0x96
 8004242:	0192      	lsls	r2, r2, #6
 8004244:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004246:	4b20      	ldr	r3, [pc, #128]	; (80042c8 <MX_USART1_UART_Init+0x94>)
 8004248:	2200      	movs	r2, #0
 800424a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800424c:	4b1e      	ldr	r3, [pc, #120]	; (80042c8 <MX_USART1_UART_Init+0x94>)
 800424e:	2200      	movs	r2, #0
 8004250:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004252:	4b1d      	ldr	r3, [pc, #116]	; (80042c8 <MX_USART1_UART_Init+0x94>)
 8004254:	2200      	movs	r2, #0
 8004256:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004258:	4b1b      	ldr	r3, [pc, #108]	; (80042c8 <MX_USART1_UART_Init+0x94>)
 800425a:	220c      	movs	r2, #12
 800425c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800425e:	4b1a      	ldr	r3, [pc, #104]	; (80042c8 <MX_USART1_UART_Init+0x94>)
 8004260:	2200      	movs	r2, #0
 8004262:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004264:	4b18      	ldr	r3, [pc, #96]	; (80042c8 <MX_USART1_UART_Init+0x94>)
 8004266:	2200      	movs	r2, #0
 8004268:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800426a:	4b17      	ldr	r3, [pc, #92]	; (80042c8 <MX_USART1_UART_Init+0x94>)
 800426c:	2200      	movs	r2, #0
 800426e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004270:	4b15      	ldr	r3, [pc, #84]	; (80042c8 <MX_USART1_UART_Init+0x94>)
 8004272:	2200      	movs	r2, #0
 8004274:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004276:	4b14      	ldr	r3, [pc, #80]	; (80042c8 <MX_USART1_UART_Init+0x94>)
 8004278:	2200      	movs	r2, #0
 800427a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800427c:	4b12      	ldr	r3, [pc, #72]	; (80042c8 <MX_USART1_UART_Init+0x94>)
 800427e:	0018      	movs	r0, r3
 8004280:	f008 ff10 	bl	800d0a4 <HAL_UART_Init>
 8004284:	1e03      	subs	r3, r0, #0
 8004286:	d001      	beq.n	800428c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8004288:	f004 fb6c 	bl	8008964 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800428c:	4b0e      	ldr	r3, [pc, #56]	; (80042c8 <MX_USART1_UART_Init+0x94>)
 800428e:	2100      	movs	r1, #0
 8004290:	0018      	movs	r0, r3
 8004292:	f00a fd79 	bl	800ed88 <HAL_UARTEx_SetTxFifoThreshold>
 8004296:	1e03      	subs	r3, r0, #0
 8004298:	d001      	beq.n	800429e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800429a:	f004 fb63 	bl	8008964 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800429e:	4b0a      	ldr	r3, [pc, #40]	; (80042c8 <MX_USART1_UART_Init+0x94>)
 80042a0:	2100      	movs	r1, #0
 80042a2:	0018      	movs	r0, r3
 80042a4:	f00a fdb0 	bl	800ee08 <HAL_UARTEx_SetRxFifoThreshold>
 80042a8:	1e03      	subs	r3, r0, #0
 80042aa:	d001      	beq.n	80042b0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80042ac:	f004 fb5a 	bl	8008964 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80042b0:	4b05      	ldr	r3, [pc, #20]	; (80042c8 <MX_USART1_UART_Init+0x94>)
 80042b2:	0018      	movs	r0, r3
 80042b4:	f00a fd2e 	bl	800ed14 <HAL_UARTEx_DisableFifoMode>
 80042b8:	1e03      	subs	r3, r0, #0
 80042ba:	d001      	beq.n	80042c0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80042bc:	f004 fb52 	bl	8008964 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80042c0:	46c0      	nop			; (mov r8, r8)
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	46c0      	nop			; (mov r8, r8)
 80042c8:	20000514 	.word	0x20000514
 80042cc:	40013800 	.word	0x40013800

080042d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80042d4:	4b23      	ldr	r3, [pc, #140]	; (8004364 <MX_USART2_UART_Init+0x94>)
 80042d6:	4a24      	ldr	r2, [pc, #144]	; (8004368 <MX_USART2_UART_Init+0x98>)
 80042d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80042da:	4b22      	ldr	r3, [pc, #136]	; (8004364 <MX_USART2_UART_Init+0x94>)
 80042dc:	22e1      	movs	r2, #225	; 0xe1
 80042de:	0252      	lsls	r2, r2, #9
 80042e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80042e2:	4b20      	ldr	r3, [pc, #128]	; (8004364 <MX_USART2_UART_Init+0x94>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80042e8:	4b1e      	ldr	r3, [pc, #120]	; (8004364 <MX_USART2_UART_Init+0x94>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80042ee:	4b1d      	ldr	r3, [pc, #116]	; (8004364 <MX_USART2_UART_Init+0x94>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80042f4:	4b1b      	ldr	r3, [pc, #108]	; (8004364 <MX_USART2_UART_Init+0x94>)
 80042f6:	220c      	movs	r2, #12
 80042f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042fa:	4b1a      	ldr	r3, [pc, #104]	; (8004364 <MX_USART2_UART_Init+0x94>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004300:	4b18      	ldr	r3, [pc, #96]	; (8004364 <MX_USART2_UART_Init+0x94>)
 8004302:	2200      	movs	r2, #0
 8004304:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004306:	4b17      	ldr	r3, [pc, #92]	; (8004364 <MX_USART2_UART_Init+0x94>)
 8004308:	2200      	movs	r2, #0
 800430a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800430c:	4b15      	ldr	r3, [pc, #84]	; (8004364 <MX_USART2_UART_Init+0x94>)
 800430e:	2200      	movs	r2, #0
 8004310:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004312:	4b14      	ldr	r3, [pc, #80]	; (8004364 <MX_USART2_UART_Init+0x94>)
 8004314:	2200      	movs	r2, #0
 8004316:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004318:	4b12      	ldr	r3, [pc, #72]	; (8004364 <MX_USART2_UART_Init+0x94>)
 800431a:	0018      	movs	r0, r3
 800431c:	f008 fec2 	bl	800d0a4 <HAL_UART_Init>
 8004320:	1e03      	subs	r3, r0, #0
 8004322:	d001      	beq.n	8004328 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8004324:	f004 fb1e 	bl	8008964 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004328:	4b0e      	ldr	r3, [pc, #56]	; (8004364 <MX_USART2_UART_Init+0x94>)
 800432a:	2100      	movs	r1, #0
 800432c:	0018      	movs	r0, r3
 800432e:	f00a fd2b 	bl	800ed88 <HAL_UARTEx_SetTxFifoThreshold>
 8004332:	1e03      	subs	r3, r0, #0
 8004334:	d001      	beq.n	800433a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8004336:	f004 fb15 	bl	8008964 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800433a:	4b0a      	ldr	r3, [pc, #40]	; (8004364 <MX_USART2_UART_Init+0x94>)
 800433c:	2100      	movs	r1, #0
 800433e:	0018      	movs	r0, r3
 8004340:	f00a fd62 	bl	800ee08 <HAL_UARTEx_SetRxFifoThreshold>
 8004344:	1e03      	subs	r3, r0, #0
 8004346:	d001      	beq.n	800434c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8004348:	f004 fb0c 	bl	8008964 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800434c:	4b05      	ldr	r3, [pc, #20]	; (8004364 <MX_USART2_UART_Init+0x94>)
 800434e:	0018      	movs	r0, r3
 8004350:	f00a fce0 	bl	800ed14 <HAL_UARTEx_DisableFifoMode>
 8004354:	1e03      	subs	r3, r0, #0
 8004356:	d001      	beq.n	800435c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8004358:	f004 fb04 	bl	8008964 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800435c:	46c0      	nop			; (mov r8, r8)
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	46c0      	nop			; (mov r8, r8)
 8004364:	200005a8 	.word	0x200005a8
 8004368:	40004400 	.word	0x40004400

0800436c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004370:	4b16      	ldr	r3, [pc, #88]	; (80043cc <MX_USART3_UART_Init+0x60>)
 8004372:	4a17      	ldr	r2, [pc, #92]	; (80043d0 <MX_USART3_UART_Init+0x64>)
 8004374:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004376:	4b15      	ldr	r3, [pc, #84]	; (80043cc <MX_USART3_UART_Init+0x60>)
 8004378:	22e1      	movs	r2, #225	; 0xe1
 800437a:	0252      	lsls	r2, r2, #9
 800437c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800437e:	4b13      	ldr	r3, [pc, #76]	; (80043cc <MX_USART3_UART_Init+0x60>)
 8004380:	2200      	movs	r2, #0
 8004382:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004384:	4b11      	ldr	r3, [pc, #68]	; (80043cc <MX_USART3_UART_Init+0x60>)
 8004386:	2200      	movs	r2, #0
 8004388:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800438a:	4b10      	ldr	r3, [pc, #64]	; (80043cc <MX_USART3_UART_Init+0x60>)
 800438c:	2200      	movs	r2, #0
 800438e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004390:	4b0e      	ldr	r3, [pc, #56]	; (80043cc <MX_USART3_UART_Init+0x60>)
 8004392:	220c      	movs	r2, #12
 8004394:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004396:	4b0d      	ldr	r3, [pc, #52]	; (80043cc <MX_USART3_UART_Init+0x60>)
 8004398:	2200      	movs	r2, #0
 800439a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800439c:	4b0b      	ldr	r3, [pc, #44]	; (80043cc <MX_USART3_UART_Init+0x60>)
 800439e:	2200      	movs	r2, #0
 80043a0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80043a2:	4b0a      	ldr	r3, [pc, #40]	; (80043cc <MX_USART3_UART_Init+0x60>)
 80043a4:	2200      	movs	r2, #0
 80043a6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80043a8:	4b08      	ldr	r3, [pc, #32]	; (80043cc <MX_USART3_UART_Init+0x60>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80043ae:	4b07      	ldr	r3, [pc, #28]	; (80043cc <MX_USART3_UART_Init+0x60>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80043b4:	4b05      	ldr	r3, [pc, #20]	; (80043cc <MX_USART3_UART_Init+0x60>)
 80043b6:	0018      	movs	r0, r3
 80043b8:	f008 fe74 	bl	800d0a4 <HAL_UART_Init>
 80043bc:	1e03      	subs	r3, r0, #0
 80043be:	d001      	beq.n	80043c4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80043c0:	f004 fad0 	bl	8008964 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80043c4:	46c0      	nop			; (mov r8, r8)
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	46c0      	nop			; (mov r8, r8)
 80043cc:	2000063c 	.word	0x2000063c
 80043d0:	40004800 	.word	0x40004800

080043d4 <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 80043d8:	4b16      	ldr	r3, [pc, #88]	; (8004434 <MX_USART4_UART_Init+0x60>)
 80043da:	4a17      	ldr	r2, [pc, #92]	; (8004438 <MX_USART4_UART_Init+0x64>)
 80043dc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80043de:	4b15      	ldr	r3, [pc, #84]	; (8004434 <MX_USART4_UART_Init+0x60>)
 80043e0:	22e1      	movs	r2, #225	; 0xe1
 80043e2:	0252      	lsls	r2, r2, #9
 80043e4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80043e6:	4b13      	ldr	r3, [pc, #76]	; (8004434 <MX_USART4_UART_Init+0x60>)
 80043e8:	2200      	movs	r2, #0
 80043ea:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80043ec:	4b11      	ldr	r3, [pc, #68]	; (8004434 <MX_USART4_UART_Init+0x60>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80043f2:	4b10      	ldr	r3, [pc, #64]	; (8004434 <MX_USART4_UART_Init+0x60>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80043f8:	4b0e      	ldr	r3, [pc, #56]	; (8004434 <MX_USART4_UART_Init+0x60>)
 80043fa:	220c      	movs	r2, #12
 80043fc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80043fe:	4b0d      	ldr	r3, [pc, #52]	; (8004434 <MX_USART4_UART_Init+0x60>)
 8004400:	2200      	movs	r2, #0
 8004402:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004404:	4b0b      	ldr	r3, [pc, #44]	; (8004434 <MX_USART4_UART_Init+0x60>)
 8004406:	2200      	movs	r2, #0
 8004408:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800440a:	4b0a      	ldr	r3, [pc, #40]	; (8004434 <MX_USART4_UART_Init+0x60>)
 800440c:	2200      	movs	r2, #0
 800440e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004410:	4b08      	ldr	r3, [pc, #32]	; (8004434 <MX_USART4_UART_Init+0x60>)
 8004412:	2200      	movs	r2, #0
 8004414:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004416:	4b07      	ldr	r3, [pc, #28]	; (8004434 <MX_USART4_UART_Init+0x60>)
 8004418:	2200      	movs	r2, #0
 800441a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800441c:	4b05      	ldr	r3, [pc, #20]	; (8004434 <MX_USART4_UART_Init+0x60>)
 800441e:	0018      	movs	r0, r3
 8004420:	f008 fe40 	bl	800d0a4 <HAL_UART_Init>
 8004424:	1e03      	subs	r3, r0, #0
 8004426:	d001      	beq.n	800442c <MX_USART4_UART_Init+0x58>
  {
    Error_Handler();
 8004428:	f004 fa9c 	bl	8008964 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 800442c:	46c0      	nop			; (mov r8, r8)
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	46c0      	nop			; (mov r8, r8)
 8004434:	200006d0 	.word	0x200006d0
 8004438:	40004c00 	.word	0x40004c00

0800443c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800443c:	b590      	push	{r4, r7, lr}
 800443e:	b08b      	sub	sp, #44	; 0x2c
 8004440:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004442:	2414      	movs	r4, #20
 8004444:	193b      	adds	r3, r7, r4
 8004446:	0018      	movs	r0, r3
 8004448:	2314      	movs	r3, #20
 800444a:	001a      	movs	r2, r3
 800444c:	2100      	movs	r1, #0
 800444e:	f00a fdda 	bl	800f006 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004452:	4b59      	ldr	r3, [pc, #356]	; (80045b8 <MX_GPIO_Init+0x17c>)
 8004454:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004456:	4b58      	ldr	r3, [pc, #352]	; (80045b8 <MX_GPIO_Init+0x17c>)
 8004458:	2120      	movs	r1, #32
 800445a:	430a      	orrs	r2, r1
 800445c:	635a      	str	r2, [r3, #52]	; 0x34
 800445e:	4b56      	ldr	r3, [pc, #344]	; (80045b8 <MX_GPIO_Init+0x17c>)
 8004460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004462:	2220      	movs	r2, #32
 8004464:	4013      	ands	r3, r2
 8004466:	613b      	str	r3, [r7, #16]
 8004468:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800446a:	4b53      	ldr	r3, [pc, #332]	; (80045b8 <MX_GPIO_Init+0x17c>)
 800446c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800446e:	4b52      	ldr	r3, [pc, #328]	; (80045b8 <MX_GPIO_Init+0x17c>)
 8004470:	2101      	movs	r1, #1
 8004472:	430a      	orrs	r2, r1
 8004474:	635a      	str	r2, [r3, #52]	; 0x34
 8004476:	4b50      	ldr	r3, [pc, #320]	; (80045b8 <MX_GPIO_Init+0x17c>)
 8004478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800447a:	2201      	movs	r2, #1
 800447c:	4013      	ands	r3, r2
 800447e:	60fb      	str	r3, [r7, #12]
 8004480:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004482:	4b4d      	ldr	r3, [pc, #308]	; (80045b8 <MX_GPIO_Init+0x17c>)
 8004484:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004486:	4b4c      	ldr	r3, [pc, #304]	; (80045b8 <MX_GPIO_Init+0x17c>)
 8004488:	2102      	movs	r1, #2
 800448a:	430a      	orrs	r2, r1
 800448c:	635a      	str	r2, [r3, #52]	; 0x34
 800448e:	4b4a      	ldr	r3, [pc, #296]	; (80045b8 <MX_GPIO_Init+0x17c>)
 8004490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004492:	2202      	movs	r2, #2
 8004494:	4013      	ands	r3, r2
 8004496:	60bb      	str	r3, [r7, #8]
 8004498:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800449a:	4b47      	ldr	r3, [pc, #284]	; (80045b8 <MX_GPIO_Init+0x17c>)
 800449c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800449e:	4b46      	ldr	r3, [pc, #280]	; (80045b8 <MX_GPIO_Init+0x17c>)
 80044a0:	2104      	movs	r1, #4
 80044a2:	430a      	orrs	r2, r1
 80044a4:	635a      	str	r2, [r3, #52]	; 0x34
 80044a6:	4b44      	ldr	r3, [pc, #272]	; (80045b8 <MX_GPIO_Init+0x17c>)
 80044a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044aa:	2204      	movs	r2, #4
 80044ac:	4013      	ands	r3, r2
 80044ae:	607b      	str	r3, [r7, #4]
 80044b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80044b2:	4b41      	ldr	r3, [pc, #260]	; (80045b8 <MX_GPIO_Init+0x17c>)
 80044b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044b6:	4b40      	ldr	r3, [pc, #256]	; (80045b8 <MX_GPIO_Init+0x17c>)
 80044b8:	2108      	movs	r1, #8
 80044ba:	430a      	orrs	r2, r1
 80044bc:	635a      	str	r2, [r3, #52]	; 0x34
 80044be:	4b3e      	ldr	r3, [pc, #248]	; (80045b8 <MX_GPIO_Init+0x17c>)
 80044c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044c2:	2208      	movs	r2, #8
 80044c4:	4013      	ands	r3, r2
 80044c6:	603b      	str	r3, [r7, #0]
 80044c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WD_GPIO_Port, WD_Pin, GPIO_PIN_RESET);
 80044ca:	23a0      	movs	r3, #160	; 0xa0
 80044cc:	05db      	lsls	r3, r3, #23
 80044ce:	2200      	movs	r2, #0
 80044d0:	2110      	movs	r1, #16
 80044d2:	0018      	movs	r0, r3
 80044d4:	f005 ff4d 	bl	800a372 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUTPUT_1_Pin|LED_2_Pin|DCD_Pin|LED_1_Pin
 80044d8:	4938      	ldr	r1, [pc, #224]	; (80045bc <MX_GPIO_Init+0x180>)
 80044da:	4b39      	ldr	r3, [pc, #228]	; (80045c0 <MX_GPIO_Init+0x184>)
 80044dc:	2200      	movs	r2, #0
 80044de:	0018      	movs	r0, r3
 80044e0:	f005 ff47 	bl	800a372 <HAL_GPIO_WritePin>
                          |PWR_KEY_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(G_CTRL_GPIO_Port, G_CTRL_Pin, GPIO_PIN_SET);
 80044e4:	4b37      	ldr	r3, [pc, #220]	; (80045c4 <MX_GPIO_Init+0x188>)
 80044e6:	2201      	movs	r2, #1
 80044e8:	2102      	movs	r1, #2
 80044ea:	0018      	movs	r0, r3
 80044ec:	f005 ff41 	bl	800a372 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Q_CTRL_Pin|FLASH_CS_Pin, GPIO_PIN_RESET);
 80044f0:	4b34      	ldr	r3, [pc, #208]	; (80045c4 <MX_GPIO_Init+0x188>)
 80044f2:	2200      	movs	r2, #0
 80044f4:	210c      	movs	r1, #12
 80044f6:	0018      	movs	r0, r3
 80044f8:	f005 ff3b 	bl	800a372 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : WD_Pin */
  GPIO_InitStruct.Pin = WD_Pin;
 80044fc:	193b      	adds	r3, r7, r4
 80044fe:	2210      	movs	r2, #16
 8004500:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004502:	193b      	adds	r3, r7, r4
 8004504:	2201      	movs	r2, #1
 8004506:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004508:	193b      	adds	r3, r7, r4
 800450a:	2200      	movs	r2, #0
 800450c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800450e:	193b      	adds	r3, r7, r4
 8004510:	2200      	movs	r2, #0
 8004512:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(WD_GPIO_Port, &GPIO_InitStruct);
 8004514:	193a      	adds	r2, r7, r4
 8004516:	23a0      	movs	r3, #160	; 0xa0
 8004518:	05db      	lsls	r3, r3, #23
 800451a:	0011      	movs	r1, r2
 800451c:	0018      	movs	r0, r3
 800451e:	f005 fda7 	bl	800a070 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUTPUT_1_Pin LED_2_Pin DCD_Pin LED_1_Pin
                           PWR_KEY_Pin */
  GPIO_InitStruct.Pin = OUTPUT_1_Pin|LED_2_Pin|DCD_Pin|LED_1_Pin
 8004522:	193b      	adds	r3, r7, r4
 8004524:	4a25      	ldr	r2, [pc, #148]	; (80045bc <MX_GPIO_Init+0x180>)
 8004526:	601a      	str	r2, [r3, #0]
                          |PWR_KEY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004528:	193b      	adds	r3, r7, r4
 800452a:	2201      	movs	r2, #1
 800452c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800452e:	193b      	adds	r3, r7, r4
 8004530:	2200      	movs	r2, #0
 8004532:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004534:	193b      	adds	r3, r7, r4
 8004536:	2200      	movs	r2, #0
 8004538:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800453a:	193b      	adds	r3, r7, r4
 800453c:	4a20      	ldr	r2, [pc, #128]	; (80045c0 <MX_GPIO_Init+0x184>)
 800453e:	0019      	movs	r1, r3
 8004540:	0010      	movs	r0, r2
 8004542:	f005 fd95 	bl	800a070 <HAL_GPIO_Init>

  /*Configure GPIO pin : DTR_Pin */
  GPIO_InitStruct.Pin = DTR_Pin;
 8004546:	0021      	movs	r1, r4
 8004548:	187b      	adds	r3, r7, r1
 800454a:	2280      	movs	r2, #128	; 0x80
 800454c:	00d2      	lsls	r2, r2, #3
 800454e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004550:	000c      	movs	r4, r1
 8004552:	193b      	adds	r3, r7, r4
 8004554:	2200      	movs	r2, #0
 8004556:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004558:	193b      	adds	r3, r7, r4
 800455a:	2200      	movs	r2, #0
 800455c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DTR_GPIO_Port, &GPIO_InitStruct);
 800455e:	193b      	adds	r3, r7, r4
 8004560:	4a17      	ldr	r2, [pc, #92]	; (80045c0 <MX_GPIO_Init+0x184>)
 8004562:	0019      	movs	r1, r3
 8004564:	0010      	movs	r0, r2
 8004566:	f005 fd83 	bl	800a070 <HAL_GPIO_Init>

  /*Configure GPIO pin : INPUT_1_Pin */
  GPIO_InitStruct.Pin = INPUT_1_Pin;
 800456a:	193b      	adds	r3, r7, r4
 800456c:	2280      	movs	r2, #128	; 0x80
 800456e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004570:	193b      	adds	r3, r7, r4
 8004572:	2200      	movs	r2, #0
 8004574:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004576:	193b      	adds	r3, r7, r4
 8004578:	2201      	movs	r2, #1
 800457a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(INPUT_1_GPIO_Port, &GPIO_InitStruct);
 800457c:	193b      	adds	r3, r7, r4
 800457e:	4a12      	ldr	r2, [pc, #72]	; (80045c8 <MX_GPIO_Init+0x18c>)
 8004580:	0019      	movs	r1, r3
 8004582:	0010      	movs	r0, r2
 8004584:	f005 fd74 	bl	800a070 <HAL_GPIO_Init>

  /*Configure GPIO pins : G_CTRL_Pin Q_CTRL_Pin FLASH_CS_Pin */
  GPIO_InitStruct.Pin = G_CTRL_Pin|Q_CTRL_Pin|FLASH_CS_Pin;
 8004588:	0021      	movs	r1, r4
 800458a:	187b      	adds	r3, r7, r1
 800458c:	220e      	movs	r2, #14
 800458e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004590:	187b      	adds	r3, r7, r1
 8004592:	2201      	movs	r2, #1
 8004594:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004596:	187b      	adds	r3, r7, r1
 8004598:	2200      	movs	r2, #0
 800459a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800459c:	187b      	adds	r3, r7, r1
 800459e:	2200      	movs	r2, #0
 80045a0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80045a2:	187b      	adds	r3, r7, r1
 80045a4:	4a07      	ldr	r2, [pc, #28]	; (80045c4 <MX_GPIO_Init+0x188>)
 80045a6:	0019      	movs	r1, r3
 80045a8:	0010      	movs	r0, r2
 80045aa:	f005 fd61 	bl	800a070 <HAL_GPIO_Init>

}
 80045ae:	46c0      	nop			; (mov r8, r8)
 80045b0:	46bd      	mov	sp, r7
 80045b2:	b00b      	add	sp, #44	; 0x2c
 80045b4:	bd90      	pop	{r4, r7, pc}
 80045b6:	46c0      	nop			; (mov r8, r8)
 80045b8:	40021000 	.word	0x40021000
 80045bc:	00003806 	.word	0x00003806
 80045c0:	50000400 	.word	0x50000400
 80045c4:	50000c00 	.word	0x50000c00
 80045c8:	50000800 	.word	0x50000800

080045cc <HAL_UART_ErrorCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a12      	ldr	r2, [pc, #72]	; (8004624 <HAL_UART_ErrorCallback+0x58>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d10c      	bne.n	80045f8 <HAL_UART_ErrorCallback+0x2c>
		if(huart->ErrorCode != HAL_UART_ERROR_NONE){
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2290      	movs	r2, #144	; 0x90
 80045e2:	589b      	ldr	r3, [r3, r2]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d007      	beq.n	80045f8 <HAL_UART_ErrorCallback+0x2c>
			MX_USART2_UART_Init();
 80045e8:	f7ff fe72 	bl	80042d0 <MX_USART2_UART_Init>
			HAL_UART_Receive_IT(&GNSS_PORT, GNSS_BUFFER, 1);
 80045ec:	490e      	ldr	r1, [pc, #56]	; (8004628 <HAL_UART_ErrorCallback+0x5c>)
 80045ee:	4b0f      	ldr	r3, [pc, #60]	; (800462c <HAL_UART_ErrorCallback+0x60>)
 80045f0:	2201      	movs	r2, #1
 80045f2:	0018      	movs	r0, r3
 80045f4:	f008 fe48 	bl	800d288 <HAL_UART_Receive_IT>
		}
	}
	if (huart->Instance == USART1) {
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a0c      	ldr	r2, [pc, #48]	; (8004630 <HAL_UART_ErrorCallback+0x64>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d10c      	bne.n	800461c <HAL_UART_ErrorCallback+0x50>
		if(huart->ErrorCode != HAL_UART_ERROR_NONE){
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2290      	movs	r2, #144	; 0x90
 8004606:	589b      	ldr	r3, [r3, r2]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d007      	beq.n	800461c <HAL_UART_ErrorCallback+0x50>
			MX_USART1_UART_Init();
 800460c:	f7ff fe12 	bl	8004234 <MX_USART1_UART_Init>
			HAL_UART_Receive_IT(&AT_PORT, AT_BUFFER, 1);
 8004610:	4908      	ldr	r1, [pc, #32]	; (8004634 <HAL_UART_ErrorCallback+0x68>)
 8004612:	4b09      	ldr	r3, [pc, #36]	; (8004638 <HAL_UART_ErrorCallback+0x6c>)
 8004614:	2201      	movs	r2, #1
 8004616:	0018      	movs	r0, r3
 8004618:	f008 fe36 	bl	800d288 <HAL_UART_Receive_IT>
		}
	}
}
 800461c:	46c0      	nop			; (mov r8, r8)
 800461e:	46bd      	mov	sp, r7
 8004620:	b002      	add	sp, #8
 8004622:	bd80      	pop	{r7, pc}
 8004624:	40004400 	.word	0x40004400
 8004628:	20000790 	.word	0x20000790
 800462c:	200005a8 	.word	0x200005a8
 8004630:	40013800 	.word	0x40013800
 8004634:	2000078c 	.word	0x2000078c
 8004638:	20000514 	.word	0x20000514

0800463c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800463c:	b590      	push	{r4, r7, lr}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]

	//------------------------------------------------------------------
	if (huart == &GNSS_PORT) {
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	4b5a      	ldr	r3, [pc, #360]	; (80047b0 <HAL_UART_RxCpltCallback+0x174>)
 8004648:	429a      	cmp	r2, r3
 800464a:	d152      	bne.n	80046f2 <HAL_UART_RxCpltCallback+0xb6>
		// Incoming data from GNSS, receiving single byte
		HAL_UART_Receive_IT(&GNSS_PORT, GNSS_BUFFER, 1);
 800464c:	4959      	ldr	r1, [pc, #356]	; (80047b4 <HAL_UART_RxCpltCallback+0x178>)
 800464e:	4b58      	ldr	r3, [pc, #352]	; (80047b0 <HAL_UART_RxCpltCallback+0x174>)
 8004650:	2201      	movs	r2, #1
 8004652:	0018      	movs	r0, r3
 8004654:	f008 fe18 	bl	800d288 <HAL_UART_Receive_IT>
		if (isGNSSTimStart == 0) {
 8004658:	4b57      	ldr	r3, [pc, #348]	; (80047b8 <HAL_UART_RxCpltCallback+0x17c>)
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d106      	bne.n	800466e <HAL_UART_RxCpltCallback+0x32>
			isGNSSTimStart = 1;
 8004660:	4b55      	ldr	r3, [pc, #340]	; (80047b8 <HAL_UART_RxCpltCallback+0x17c>)
 8004662:	2201      	movs	r2, #1
 8004664:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim17);
 8004666:	4b55      	ldr	r3, [pc, #340]	; (80047bc <HAL_UART_RxCpltCallback+0x180>)
 8004668:	0018      	movs	r0, r3
 800466a:	f007 fd6b 	bl	800c144 <HAL_TIM_Base_Start_IT>
		}
		TIM17->CNT &= 0x0;
 800466e:	4b54      	ldr	r3, [pc, #336]	; (80047c0 <HAL_UART_RxCpltCallback+0x184>)
 8004670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004672:	4b53      	ldr	r3, [pc, #332]	; (80047c0 <HAL_UART_RxCpltCallback+0x184>)
 8004674:	2200      	movs	r2, #0
 8004676:	625a      	str	r2, [r3, #36]	; 0x24
		if(GNSS_BUFFER[0] != NULL){
 8004678:	4b4e      	ldr	r3, [pc, #312]	; (80047b4 <HAL_UART_RxCpltCallback+0x178>)
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d038      	beq.n	80046f2 <HAL_UART_RxCpltCallback+0xb6>
			nmeaResponse[nmeaLC][nmeaCC] = GNSS_BUFFER[0];
 8004680:	4b50      	ldr	r3, [pc, #320]	; (80047c4 <HAL_UART_RxCpltCallback+0x188>)
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	b2db      	uxtb	r3, r3
 8004686:	0019      	movs	r1, r3
 8004688:	4b4f      	ldr	r3, [pc, #316]	; (80047c8 <HAL_UART_RxCpltCallback+0x18c>)
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	b2db      	uxtb	r3, r3
 800468e:	0018      	movs	r0, r3
 8004690:	4b48      	ldr	r3, [pc, #288]	; (80047b4 <HAL_UART_RxCpltCallback+0x178>)
 8004692:	781c      	ldrb	r4, [r3, #0]
 8004694:	4a4d      	ldr	r2, [pc, #308]	; (80047cc <HAL_UART_RxCpltCallback+0x190>)
 8004696:	000b      	movs	r3, r1
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	185b      	adds	r3, r3, r1
 800469c:	0119      	lsls	r1, r3, #4
 800469e:	185b      	adds	r3, r3, r1
 80046a0:	18d3      	adds	r3, r2, r3
 80046a2:	1c22      	adds	r2, r4, #0
 80046a4:	541a      	strb	r2, [r3, r0]
			if (GNSS_BUFFER[0] == '\n') {
 80046a6:	4b43      	ldr	r3, [pc, #268]	; (80047b4 <HAL_UART_RxCpltCallback+0x178>)
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	2b0a      	cmp	r3, #10
 80046ac:	d112      	bne.n	80046d4 <HAL_UART_RxCpltCallback+0x98>
				nmeaLC++;
 80046ae:	4b45      	ldr	r3, [pc, #276]	; (80047c4 <HAL_UART_RxCpltCallback+0x188>)
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	3301      	adds	r3, #1
 80046b6:	b2da      	uxtb	r2, r3
 80046b8:	4b42      	ldr	r3, [pc, #264]	; (80047c4 <HAL_UART_RxCpltCallback+0x188>)
 80046ba:	701a      	strb	r2, [r3, #0]
				if (nmeaLC > NMEA_MAX_LINES - 1) {
 80046bc:	4b41      	ldr	r3, [pc, #260]	; (80047c4 <HAL_UART_RxCpltCallback+0x188>)
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b03      	cmp	r3, #3
 80046c4:	d902      	bls.n	80046cc <HAL_UART_RxCpltCallback+0x90>
					nmeaLC = NMEA_MAX_LINES -1;
 80046c6:	4b3f      	ldr	r3, [pc, #252]	; (80047c4 <HAL_UART_RxCpltCallback+0x188>)
 80046c8:	2203      	movs	r2, #3
 80046ca:	701a      	strb	r2, [r3, #0]
				}
				nmeaCC = 0;
 80046cc:	4b3e      	ldr	r3, [pc, #248]	; (80047c8 <HAL_UART_RxCpltCallback+0x18c>)
 80046ce:	2200      	movs	r2, #0
 80046d0:	701a      	strb	r2, [r3, #0]
 80046d2:	e00e      	b.n	80046f2 <HAL_UART_RxCpltCallback+0xb6>
			} else {
				nmeaCC++;
 80046d4:	4b3c      	ldr	r3, [pc, #240]	; (80047c8 <HAL_UART_RxCpltCallback+0x18c>)
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	3301      	adds	r3, #1
 80046dc:	b2da      	uxtb	r2, r3
 80046de:	4b3a      	ldr	r3, [pc, #232]	; (80047c8 <HAL_UART_RxCpltCallback+0x18c>)
 80046e0:	701a      	strb	r2, [r3, #0]
				if (nmeaCC > NMEA_MAX_CHARS - 1) {
 80046e2:	4b39      	ldr	r3, [pc, #228]	; (80047c8 <HAL_UART_RxCpltCallback+0x18c>)
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	2b54      	cmp	r3, #84	; 0x54
 80046ea:	d902      	bls.n	80046f2 <HAL_UART_RxCpltCallback+0xb6>
					nmeaCC = 0;
 80046ec:	4b36      	ldr	r3, [pc, #216]	; (80047c8 <HAL_UART_RxCpltCallback+0x18c>)
 80046ee:	2200      	movs	r2, #0
 80046f0:	701a      	strb	r2, [r3, #0]

		}
	}
	//------------------------------------------------------------------

	if (huart == &AT_PORT) {
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	4b36      	ldr	r3, [pc, #216]	; (80047d0 <HAL_UART_RxCpltCallback+0x194>)
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d155      	bne.n	80047a6 <HAL_UART_RxCpltCallback+0x16a>
		recResponse = 1;
 80046fa:	4b36      	ldr	r3, [pc, #216]	; (80047d4 <HAL_UART_RxCpltCallback+0x198>)
 80046fc:	2201      	movs	r2, #1
 80046fe:	701a      	strb	r2, [r3, #0]
		if (isStart == 0) {
 8004700:	4b35      	ldr	r3, [pc, #212]	; (80047d8 <HAL_UART_RxCpltCallback+0x19c>)
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d10b      	bne.n	8004722 <HAL_UART_RxCpltCallback+0xe6>
			isStart = 1;
 800470a:	4b33      	ldr	r3, [pc, #204]	; (80047d8 <HAL_UART_RxCpltCallback+0x19c>)
 800470c:	2201      	movs	r2, #1
 800470e:	701a      	strb	r2, [r3, #0]
			FIX_TIMER_TRIGGER(&htim6);
 8004710:	4b32      	ldr	r3, [pc, #200]	; (80047dc <HAL_UART_RxCpltCallback+0x1a0>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2202      	movs	r2, #2
 8004716:	4252      	negs	r2, r2
 8004718:	611a      	str	r2, [r3, #16]
			HAL_TIM_Base_Start_IT(&htim6);
 800471a:	4b30      	ldr	r3, [pc, #192]	; (80047dc <HAL_UART_RxCpltCallback+0x1a0>)
 800471c:	0018      	movs	r0, r3
 800471e:	f007 fd11 	bl	800c144 <HAL_TIM_Base_Start_IT>
		}
		TIM6->CNT &= 0x0;
 8004722:	4b2f      	ldr	r3, [pc, #188]	; (80047e0 <HAL_UART_RxCpltCallback+0x1a4>)
 8004724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004726:	4b2e      	ldr	r3, [pc, #184]	; (80047e0 <HAL_UART_RxCpltCallback+0x1a4>)
 8004728:	2200      	movs	r2, #0
 800472a:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_UART_Receive_IT(&AT_PORT, AT_BUFFER, 1);
 800472c:	492d      	ldr	r1, [pc, #180]	; (80047e4 <HAL_UART_RxCpltCallback+0x1a8>)
 800472e:	4b28      	ldr	r3, [pc, #160]	; (80047d0 <HAL_UART_RxCpltCallback+0x194>)
 8004730:	2201      	movs	r2, #1
 8004732:	0018      	movs	r0, r3
 8004734:	f008 fda8 	bl	800d288 <HAL_UART_Receive_IT>
		if (AT_BUFFER[0] == '\n') {
 8004738:	4b2a      	ldr	r3, [pc, #168]	; (80047e4 <HAL_UART_RxCpltCallback+0x1a8>)
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	2b0a      	cmp	r3, #10
 800473e:	d113      	bne.n	8004768 <HAL_UART_RxCpltCallback+0x12c>
			if (lineCount > RESPONSE_MAX_LINE - 2) {
 8004740:	4b29      	ldr	r3, [pc, #164]	; (80047e8 <HAL_UART_RxCpltCallback+0x1ac>)
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b04      	cmp	r3, #4
 8004748:	d903      	bls.n	8004752 <HAL_UART_RxCpltCallback+0x116>
				lineCount = 0;
 800474a:	4b27      	ldr	r3, [pc, #156]	; (80047e8 <HAL_UART_RxCpltCallback+0x1ac>)
 800474c:	2200      	movs	r2, #0
 800474e:	701a      	strb	r2, [r3, #0]
 8004750:	e006      	b.n	8004760 <HAL_UART_RxCpltCallback+0x124>
			} else {
				lineCount++;
 8004752:	4b25      	ldr	r3, [pc, #148]	; (80047e8 <HAL_UART_RxCpltCallback+0x1ac>)
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	b2db      	uxtb	r3, r3
 8004758:	3301      	adds	r3, #1
 800475a:	b2da      	uxtb	r2, r3
 800475c:	4b22      	ldr	r3, [pc, #136]	; (80047e8 <HAL_UART_RxCpltCallback+0x1ac>)
 800475e:	701a      	strb	r2, [r3, #0]
			}
			charCount = 0;
 8004760:	4b22      	ldr	r3, [pc, #136]	; (80047ec <HAL_UART_RxCpltCallback+0x1b0>)
 8004762:	2200      	movs	r2, #0
 8004764:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	//-----------------------------------------------------------------------------

}
 8004766:	e01e      	b.n	80047a6 <HAL_UART_RxCpltCallback+0x16a>
			responseBuffer[lineCount][charCount] = AT_BUFFER[0];
 8004768:	4b1f      	ldr	r3, [pc, #124]	; (80047e8 <HAL_UART_RxCpltCallback+0x1ac>)
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	b2db      	uxtb	r3, r3
 800476e:	001c      	movs	r4, r3
 8004770:	4b1e      	ldr	r3, [pc, #120]	; (80047ec <HAL_UART_RxCpltCallback+0x1b0>)
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	b2db      	uxtb	r3, r3
 8004776:	0019      	movs	r1, r3
 8004778:	4b1a      	ldr	r3, [pc, #104]	; (80047e4 <HAL_UART_RxCpltCallback+0x1a8>)
 800477a:	7818      	ldrb	r0, [r3, #0]
 800477c:	4a1c      	ldr	r2, [pc, #112]	; (80047f0 <HAL_UART_RxCpltCallback+0x1b4>)
 800477e:	2332      	movs	r3, #50	; 0x32
 8004780:	4363      	muls	r3, r4
 8004782:	18d3      	adds	r3, r2, r3
 8004784:	1c02      	adds	r2, r0, #0
 8004786:	545a      	strb	r2, [r3, r1]
			charCount++;
 8004788:	4b18      	ldr	r3, [pc, #96]	; (80047ec <HAL_UART_RxCpltCallback+0x1b0>)
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	b2db      	uxtb	r3, r3
 800478e:	3301      	adds	r3, #1
 8004790:	b2da      	uxtb	r2, r3
 8004792:	4b16      	ldr	r3, [pc, #88]	; (80047ec <HAL_UART_RxCpltCallback+0x1b0>)
 8004794:	701a      	strb	r2, [r3, #0]
			if (lineCount > RESPONSE_MAX_CHAR - 2) {
 8004796:	4b14      	ldr	r3, [pc, #80]	; (80047e8 <HAL_UART_RxCpltCallback+0x1ac>)
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	b2db      	uxtb	r3, r3
 800479c:	2b30      	cmp	r3, #48	; 0x30
 800479e:	d902      	bls.n	80047a6 <HAL_UART_RxCpltCallback+0x16a>
				charCount = 0;
 80047a0:	4b12      	ldr	r3, [pc, #72]	; (80047ec <HAL_UART_RxCpltCallback+0x1b0>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	701a      	strb	r2, [r3, #0]
}
 80047a6:	46c0      	nop			; (mov r8, r8)
 80047a8:	46bd      	mov	sp, r7
 80047aa:	b003      	add	sp, #12
 80047ac:	bd90      	pop	{r4, r7, pc}
 80047ae:	46c0      	nop			; (mov r8, r8)
 80047b0:	200005a8 	.word	0x200005a8
 80047b4:	20000790 	.word	0x20000790
 80047b8:	200008ca 	.word	0x200008ca
 80047bc:	200004c8 	.word	0x200004c8
 80047c0:	40014800 	.word	0x40014800
 80047c4:	200008c2 	.word	0x200008c2
 80047c8:	200008c3 	.word	0x200008c3
 80047cc:	20000924 	.word	0x20000924
 80047d0:	20000514 	.word	0x20000514
 80047d4:	200008cd 	.word	0x200008cd
 80047d8:	200008c4 	.word	0x200008c4
 80047dc:	20000398 	.word	0x20000398
 80047e0:	40001000 	.word	0x40001000
 80047e4:	2000078c 	.word	0x2000078c
 80047e8:	200008c0 	.word	0x200008c0
 80047ec:	200008c1 	.word	0x200008c1
 80047f0:	20000794 	.word	0x20000794

080047f4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80047f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047f6:	46c6      	mov	lr, r8
 80047f8:	b500      	push	{lr}
 80047fa:	b0d8      	sub	sp, #352	; 0x160
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	61f8      	str	r0, [r7, #28]
	if(htim == &htim7){
 8004800:	69fa      	ldr	r2, [r7, #28]
 8004802:	4bd0      	ldr	r3, [pc, #832]	; (8004b44 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8004804:	429a      	cmp	r2, r3
 8004806:	d139      	bne.n	800487c <HAL_TIM_PeriodElapsedCallback+0x88>

		if(isSystemLedOn){
 8004808:	4bcf      	ldr	r3, [pc, #828]	; (8004b48 <HAL_TIM_PeriodElapsedCallback+0x354>)
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d010      	beq.n	8004834 <HAL_TIM_PeriodElapsedCallback+0x40>
			blinkCounter++;
 8004812:	4bce      	ldr	r3, [pc, #824]	; (8004b4c <HAL_TIM_PeriodElapsedCallback+0x358>)
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	b2db      	uxtb	r3, r3
 8004818:	3301      	adds	r3, #1
 800481a:	b2da      	uxtb	r2, r3
 800481c:	4bcb      	ldr	r3, [pc, #812]	; (8004b4c <HAL_TIM_PeriodElapsedCallback+0x358>)
 800481e:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 0);
 8004820:	4bcb      	ldr	r3, [pc, #812]	; (8004b50 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8004822:	2200      	movs	r2, #0
 8004824:	2104      	movs	r1, #4
 8004826:	0018      	movs	r0, r3
 8004828:	f005 fda3 	bl	800a372 <HAL_GPIO_WritePin>
			isSystemLedOn = 0;
 800482c:	4bc6      	ldr	r3, [pc, #792]	; (8004b48 <HAL_TIM_PeriodElapsedCallback+0x354>)
 800482e:	2200      	movs	r2, #0
 8004830:	701a      	strb	r2, [r3, #0]
 8004832:	e023      	b.n	800487c <HAL_TIM_PeriodElapsedCallback+0x88>
		}
		else{
			if(blinkCounter<totalBlinks){
 8004834:	4bc5      	ldr	r3, [pc, #788]	; (8004b4c <HAL_TIM_PeriodElapsedCallback+0x358>)
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	b2da      	uxtb	r2, r3
 800483a:	4bc6      	ldr	r3, [pc, #792]	; (8004b54 <HAL_TIM_PeriodElapsedCallback+0x360>)
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	b2db      	uxtb	r3, r3
 8004840:	429a      	cmp	r2, r3
 8004842:	d209      	bcs.n	8004858 <HAL_TIM_PeriodElapsedCallback+0x64>
				HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 1);
 8004844:	4bc2      	ldr	r3, [pc, #776]	; (8004b50 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8004846:	2201      	movs	r2, #1
 8004848:	2104      	movs	r1, #4
 800484a:	0018      	movs	r0, r3
 800484c:	f005 fd91 	bl	800a372 <HAL_GPIO_WritePin>
				isSystemLedOn = 1;
 8004850:	4bbd      	ldr	r3, [pc, #756]	; (8004b48 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8004852:	2201      	movs	r2, #1
 8004854:	701a      	strb	r2, [r3, #0]
 8004856:	e011      	b.n	800487c <HAL_TIM_PeriodElapsedCallback+0x88>
			}
			else{
				systemStateCounter++;
 8004858:	4bbf      	ldr	r3, [pc, #764]	; (8004b58 <HAL_TIM_PeriodElapsedCallback+0x364>)
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	b2db      	uxtb	r3, r3
 800485e:	3301      	adds	r3, #1
 8004860:	b2da      	uxtb	r2, r3
 8004862:	4bbd      	ldr	r3, [pc, #756]	; (8004b58 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8004864:	701a      	strb	r2, [r3, #0]
				if(systemStateCounter>LED2_WAIT_TIME){
 8004866:	4bbc      	ldr	r3, [pc, #752]	; (8004b58 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	b2db      	uxtb	r3, r3
 800486c:	2b32      	cmp	r3, #50	; 0x32
 800486e:	d905      	bls.n	800487c <HAL_TIM_PeriodElapsedCallback+0x88>
					blinkCounter = 0;
 8004870:	4bb6      	ldr	r3, [pc, #728]	; (8004b4c <HAL_TIM_PeriodElapsedCallback+0x358>)
 8004872:	2200      	movs	r2, #0
 8004874:	701a      	strb	r2, [r3, #0]
					systemStateCounter = 0;
 8004876:	4bb8      	ldr	r3, [pc, #736]	; (8004b58 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8004878:	2200      	movs	r2, #0
 800487a:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
	if (htim == &htim16) {
 800487c:	69fa      	ldr	r2, [r7, #28]
 800487e:	4bb7      	ldr	r3, [pc, #732]	; (8004b5c <HAL_TIM_PeriodElapsedCallback+0x368>)
 8004880:	429a      	cmp	r2, r3
 8004882:	d11d      	bne.n	80048c0 <HAL_TIM_PeriodElapsedCallback+0xcc>
			//tcp open checking timer
		if(isTcpOpen == 0 || isLoggedIn == 0){
 8004884:	4bb6      	ldr	r3, [pc, #728]	; (8004b60 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d004      	beq.n	8004898 <HAL_TIM_PeriodElapsedCallback+0xa4>
 800488e:	4bb5      	ldr	r3, [pc, #724]	; (8004b64 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	b2db      	uxtb	r3, r3
 8004894:	2b00      	cmp	r3, #0
 8004896:	d107      	bne.n	80048a8 <HAL_TIM_PeriodElapsedCallback+0xb4>
			tcpOpenElapsedTime++;
 8004898:	4bb3      	ldr	r3, [pc, #716]	; (8004b68 <HAL_TIM_PeriodElapsedCallback+0x374>)
 800489a:	881b      	ldrh	r3, [r3, #0]
 800489c:	b29b      	uxth	r3, r3
 800489e:	3301      	adds	r3, #1
 80048a0:	b29a      	uxth	r2, r3
 80048a2:	4bb1      	ldr	r3, [pc, #708]	; (8004b68 <HAL_TIM_PeriodElapsedCallback+0x374>)
 80048a4:	801a      	strh	r2, [r3, #0]
 80048a6:	e002      	b.n	80048ae <HAL_TIM_PeriodElapsedCallback+0xba>
		}
		else{
			tcpOpenElapsedTime=0;
 80048a8:	4baf      	ldr	r3, [pc, #700]	; (8004b68 <HAL_TIM_PeriodElapsedCallback+0x374>)
 80048aa:	2200      	movs	r2, #0
 80048ac:	801a      	strh	r2, [r3, #0]
		}
		if(tcpOpenElapsedTime > 1200){
 80048ae:	4bae      	ldr	r3, [pc, #696]	; (8004b68 <HAL_TIM_PeriodElapsedCallback+0x374>)
 80048b0:	881b      	ldrh	r3, [r3, #0]
 80048b2:	b29a      	uxth	r2, r3
 80048b4:	2396      	movs	r3, #150	; 0x96
 80048b6:	00db      	lsls	r3, r3, #3
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d901      	bls.n	80048c0 <HAL_TIM_PeriodElapsedCallback+0xcc>
			//more than 20 minutes
			rebootsystem();
 80048bc:	f001 ff0e 	bl	80066dc <rebootsystem>
		}

	}
	if (htim == &htim14) {
 80048c0:	69fa      	ldr	r2, [r7, #28]
 80048c2:	4baa      	ldr	r3, [pc, #680]	; (8004b6c <HAL_TIM_PeriodElapsedCallback+0x378>)
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d14c      	bne.n	8004962 <HAL_TIM_PeriodElapsedCallback+0x16e>
		//watchdog timer

		//check acc input for 2 seconds, and raise flag if its on otherwise off.
		if(HAL_GPIO_ReadPin(INPUT_1_GPIO_Port, INPUT_1_Pin)){
 80048c8:	4ba9      	ldr	r3, [pc, #676]	; (8004b70 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 80048ca:	2180      	movs	r1, #128	; 0x80
 80048cc:	0018      	movs	r0, r3
 80048ce:	f005 fd33 	bl	800a338 <HAL_GPIO_ReadPin>
 80048d2:	1e03      	subs	r3, r0, #0
 80048d4:	d015      	beq.n	8004902 <HAL_TIM_PeriodElapsedCallback+0x10e>
			accInputHigh++;
 80048d6:	4ba7      	ldr	r3, [pc, #668]	; (8004b74 <HAL_TIM_PeriodElapsedCallback+0x380>)
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	3301      	adds	r3, #1
 80048de:	b2da      	uxtb	r2, r3
 80048e0:	4ba4      	ldr	r3, [pc, #656]	; (8004b74 <HAL_TIM_PeriodElapsedCallback+0x380>)
 80048e2:	701a      	strb	r2, [r3, #0]
			accInputLow=0;
 80048e4:	4ba4      	ldr	r3, [pc, #656]	; (8004b78 <HAL_TIM_PeriodElapsedCallback+0x384>)
 80048e6:	2200      	movs	r2, #0
 80048e8:	701a      	strb	r2, [r3, #0]
			if(accInputHigh > MAX_INPUT_COUNTS){
 80048ea:	4ba2      	ldr	r3, [pc, #648]	; (8004b74 <HAL_TIM_PeriodElapsedCallback+0x380>)
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d91b      	bls.n	800492c <HAL_TIM_PeriodElapsedCallback+0x138>
				accInputHigh =0;
 80048f4:	4b9f      	ldr	r3, [pc, #636]	; (8004b74 <HAL_TIM_PeriodElapsedCallback+0x380>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	701a      	strb	r2, [r3, #0]
				accInputState = 1;
 80048fa:	4ba0      	ldr	r3, [pc, #640]	; (8004b7c <HAL_TIM_PeriodElapsedCallback+0x388>)
 80048fc:	2201      	movs	r2, #1
 80048fe:	701a      	strb	r2, [r3, #0]
 8004900:	e014      	b.n	800492c <HAL_TIM_PeriodElapsedCallback+0x138>
				}
			}
		else{
			accInputLow++;
 8004902:	4b9d      	ldr	r3, [pc, #628]	; (8004b78 <HAL_TIM_PeriodElapsedCallback+0x384>)
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	b2db      	uxtb	r3, r3
 8004908:	3301      	adds	r3, #1
 800490a:	b2da      	uxtb	r2, r3
 800490c:	4b9a      	ldr	r3, [pc, #616]	; (8004b78 <HAL_TIM_PeriodElapsedCallback+0x384>)
 800490e:	701a      	strb	r2, [r3, #0]
			accInputHigh=0;
 8004910:	4b98      	ldr	r3, [pc, #608]	; (8004b74 <HAL_TIM_PeriodElapsedCallback+0x380>)
 8004912:	2200      	movs	r2, #0
 8004914:	701a      	strb	r2, [r3, #0]
			if(accInputLow > MAX_INPUT_COUNTS){
 8004916:	4b98      	ldr	r3, [pc, #608]	; (8004b78 <HAL_TIM_PeriodElapsedCallback+0x384>)
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	b2db      	uxtb	r3, r3
 800491c:	2b02      	cmp	r3, #2
 800491e:	d905      	bls.n	800492c <HAL_TIM_PeriodElapsedCallback+0x138>
				accInputLow =0;
 8004920:	4b95      	ldr	r3, [pc, #596]	; (8004b78 <HAL_TIM_PeriodElapsedCallback+0x384>)
 8004922:	2200      	movs	r2, #0
 8004924:	701a      	strb	r2, [r3, #0]
				accInputState = 0;
 8004926:	4b95      	ldr	r3, [pc, #596]	; (8004b7c <HAL_TIM_PeriodElapsedCallback+0x388>)
 8004928:	2200      	movs	r2, #0
 800492a:	701a      	strb	r2, [r3, #0]
			}
		}
		if(accInputState != accInputStatex){
 800492c:	4b93      	ldr	r3, [pc, #588]	; (8004b7c <HAL_TIM_PeriodElapsedCallback+0x388>)
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	b2da      	uxtb	r2, r3
 8004932:	4b93      	ldr	r3, [pc, #588]	; (8004b80 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	b2db      	uxtb	r3, r3
 8004938:	429a      	cmp	r2, r3
 800493a:	d007      	beq.n	800494c <HAL_TIM_PeriodElapsedCallback+0x158>
			isAlarm = 1;
 800493c:	4b91      	ldr	r3, [pc, #580]	; (8004b84 <HAL_TIM_PeriodElapsedCallback+0x390>)
 800493e:	2201      	movs	r2, #1
 8004940:	701a      	strb	r2, [r3, #0]
			accInputStatex=accInputState;
 8004942:	4b8e      	ldr	r3, [pc, #568]	; (8004b7c <HAL_TIM_PeriodElapsedCallback+0x388>)
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	b2da      	uxtb	r2, r3
 8004948:	4b8d      	ldr	r3, [pc, #564]	; (8004b80 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 800494a:	701a      	strb	r2, [r3, #0]
		}
		//---------------------------------------------------------------------------

		HAL_GPIO_TogglePin(WD_GPIO_Port, WD_Pin);
 800494c:	23a0      	movs	r3, #160	; 0xa0
 800494e:	05db      	lsls	r3, r3, #23
 8004950:	2110      	movs	r1, #16
 8004952:	0018      	movs	r0, r3
 8004954:	f005 fd2a 	bl	800a3ac <HAL_GPIO_TogglePin>
//		HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
		hangCounter++;
 8004958:	4b8b      	ldr	r3, [pc, #556]	; (8004b88 <HAL_TIM_PeriodElapsedCallback+0x394>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	1c5a      	adds	r2, r3, #1
 800495e:	4b8a      	ldr	r3, [pc, #552]	; (8004b88 <HAL_TIM_PeriodElapsedCallback+0x394>)
 8004960:	601a      	str	r2, [r3, #0]
		if(hangCounter>25){
			//if system hangs for more than 10 seconds.
//			NVIC_SystemReset();
		}
	}
	if (htim == &htim6) {
 8004962:	69fa      	ldr	r2, [r7, #28]
 8004964:	4b89      	ldr	r3, [pc, #548]	; (8004b8c <HAL_TIM_PeriodElapsedCallback+0x398>)
 8004966:	429a      	cmp	r2, r3
 8004968:	d001      	beq.n	800496e <HAL_TIM_PeriodElapsedCallback+0x17a>
 800496a:	f001 fd44 	bl	80063f6 <HAL_TIM_PeriodElapsedCallback+0x1c02>
//		HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
//		HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 1);
		// AT PORT TIMER
		char tResponse = '0';
 800496e:	2348      	movs	r3, #72	; 0x48
 8004970:	33ff      	adds	r3, #255	; 0xff
 8004972:	2018      	movs	r0, #24
 8004974:	181b      	adds	r3, r3, r0
 8004976:	19db      	adds	r3, r3, r7
 8004978:	2230      	movs	r2, #48	; 0x30
 800497a:	701a      	strb	r2, [r3, #0]
		//todo
		//---- server response check
		if (responseBuffer[0][0] == 0x78 && responseBuffer[0][1] == 0x78) {
 800497c:	4b84      	ldr	r3, [pc, #528]	; (8004b90 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	2b78      	cmp	r3, #120	; 0x78
 8004982:	d000      	beq.n	8004986 <HAL_TIM_PeriodElapsedCallback+0x192>
 8004984:	e0cf      	b.n	8004b26 <HAL_TIM_PeriodElapsedCallback+0x332>
 8004986:	4b82      	ldr	r3, [pc, #520]	; (8004b90 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8004988:	785b      	ldrb	r3, [r3, #1]
 800498a:	2b78      	cmp	r3, #120	; 0x78
 800498c:	d000      	beq.n	8004990 <HAL_TIM_PeriodElapsedCallback+0x19c>
 800498e:	e0ca      	b.n	8004b26 <HAL_TIM_PeriodElapsedCallback+0x332>
 8004990:	466b      	mov	r3, sp
 8004992:	4698      	mov	r8, r3
			// HAL_UART_Transmit(&huart4, "Res rec server",
			// sizeof("Res rec server"), 100);
			uint8_t c = responseBuffer[0][2];
 8004994:	2108      	movs	r1, #8
 8004996:	31ff      	adds	r1, #255	; 0xff
 8004998:	180b      	adds	r3, r1, r0
 800499a:	19db      	adds	r3, r3, r7
 800499c:	4a7c      	ldr	r2, [pc, #496]	; (8004b90 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 800499e:	7892      	ldrb	r2, [r2, #2]
 80049a0:	701a      	strb	r2, [r3, #0]
			uint8_t tempCrcData[c - 1];
 80049a2:	180b      	adds	r3, r1, r0
 80049a4:	19db      	adds	r3, r3, r7
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	3b01      	subs	r3, #1
 80049aa:	1e5a      	subs	r2, r3, #1
 80049ac:	218c      	movs	r1, #140	; 0x8c
 80049ae:	0049      	lsls	r1, r1, #1
 80049b0:	1879      	adds	r1, r7, r1
 80049b2:	600a      	str	r2, [r1, #0]
 80049b4:	001a      	movs	r2, r3
 80049b6:	60ba      	str	r2, [r7, #8]
 80049b8:	2200      	movs	r2, #0
 80049ba:	60fa      	str	r2, [r7, #12]
 80049bc:	68b8      	ldr	r0, [r7, #8]
 80049be:	68f9      	ldr	r1, [r7, #12]
 80049c0:	0002      	movs	r2, r0
 80049c2:	0f52      	lsrs	r2, r2, #29
 80049c4:	000e      	movs	r6, r1
 80049c6:	00f6      	lsls	r6, r6, #3
 80049c8:	617e      	str	r6, [r7, #20]
 80049ca:	697e      	ldr	r6, [r7, #20]
 80049cc:	4316      	orrs	r6, r2
 80049ce:	617e      	str	r6, [r7, #20]
 80049d0:	0002      	movs	r2, r0
 80049d2:	00d2      	lsls	r2, r2, #3
 80049d4:	613a      	str	r2, [r7, #16]
 80049d6:	001a      	movs	r2, r3
 80049d8:	603a      	str	r2, [r7, #0]
 80049da:	2200      	movs	r2, #0
 80049dc:	607a      	str	r2, [r7, #4]
 80049de:	6838      	ldr	r0, [r7, #0]
 80049e0:	6879      	ldr	r1, [r7, #4]
 80049e2:	0002      	movs	r2, r0
 80049e4:	0f52      	lsrs	r2, r2, #29
 80049e6:	000e      	movs	r6, r1
 80049e8:	00f5      	lsls	r5, r6, #3
 80049ea:	4315      	orrs	r5, r2
 80049ec:	0002      	movs	r2, r0
 80049ee:	00d4      	lsls	r4, r2, #3
 80049f0:	001a      	movs	r2, r3
 80049f2:	3207      	adds	r2, #7
 80049f4:	08d2      	lsrs	r2, r2, #3
 80049f6:	00d2      	lsls	r2, r2, #3
 80049f8:	4669      	mov	r1, sp
 80049fa:	1a8a      	subs	r2, r1, r2
 80049fc:	4695      	mov	sp, r2
 80049fe:	466a      	mov	r2, sp
 8004a00:	3200      	adds	r2, #0
 8004a02:	21fc      	movs	r1, #252	; 0xfc
 8004a04:	2018      	movs	r0, #24
 8004a06:	1809      	adds	r1, r1, r0
 8004a08:	19c9      	adds	r1, r1, r7
 8004a0a:	600a      	str	r2, [r1, #0]
			uint16_t crcResult = 0;
 8004a0c:	22fa      	movs	r2, #250	; 0xfa
 8004a0e:	1812      	adds	r2, r2, r0
 8004a10:	19d2      	adds	r2, r2, r7
 8004a12:	2100      	movs	r1, #0
 8004a14:	8011      	strh	r1, [r2, #0]
			for (uint8_t i = 2; i < c + 1; i++) {
 8004a16:	22a3      	movs	r2, #163	; 0xa3
 8004a18:	0052      	lsls	r2, r2, #1
 8004a1a:	1812      	adds	r2, r2, r0
 8004a1c:	19d2      	adds	r2, r2, r7
 8004a1e:	2102      	movs	r1, #2
 8004a20:	7011      	strb	r1, [r2, #0]
 8004a22:	e017      	b.n	8004a54 <HAL_TIM_PeriodElapsedCallback+0x260>
				tempCrcData[i - 2] = responseBuffer[0][i];
 8004a24:	24a3      	movs	r4, #163	; 0xa3
 8004a26:	0064      	lsls	r4, r4, #1
 8004a28:	2518      	movs	r5, #24
 8004a2a:	1962      	adds	r2, r4, r5
 8004a2c:	19d2      	adds	r2, r2, r7
 8004a2e:	7811      	ldrb	r1, [r2, #0]
 8004a30:	1962      	adds	r2, r4, r5
 8004a32:	19d2      	adds	r2, r2, r7
 8004a34:	7812      	ldrb	r2, [r2, #0]
 8004a36:	3a02      	subs	r2, #2
 8004a38:	4855      	ldr	r0, [pc, #340]	; (8004b90 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8004a3a:	5c40      	ldrb	r0, [r0, r1]
 8004a3c:	21fc      	movs	r1, #252	; 0xfc
 8004a3e:	1949      	adds	r1, r1, r5
 8004a40:	19c9      	adds	r1, r1, r7
 8004a42:	6809      	ldr	r1, [r1, #0]
 8004a44:	5488      	strb	r0, [r1, r2]
			for (uint8_t i = 2; i < c + 1; i++) {
 8004a46:	1962      	adds	r2, r4, r5
 8004a48:	19d2      	adds	r2, r2, r7
 8004a4a:	7811      	ldrb	r1, [r2, #0]
 8004a4c:	1962      	adds	r2, r4, r5
 8004a4e:	19d2      	adds	r2, r2, r7
 8004a50:	3101      	adds	r1, #1
 8004a52:	7011      	strb	r1, [r2, #0]
 8004a54:	2508      	movs	r5, #8
 8004a56:	35ff      	adds	r5, #255	; 0xff
 8004a58:	2018      	movs	r0, #24
 8004a5a:	182a      	adds	r2, r5, r0
 8004a5c:	19d1      	adds	r1, r2, r7
 8004a5e:	22a3      	movs	r2, #163	; 0xa3
 8004a60:	0052      	lsls	r2, r2, #1
 8004a62:	1812      	adds	r2, r2, r0
 8004a64:	19d2      	adds	r2, r2, r7
 8004a66:	7809      	ldrb	r1, [r1, #0]
 8004a68:	7812      	ldrb	r2, [r2, #0]
 8004a6a:	4291      	cmp	r1, r2
 8004a6c:	d2da      	bcs.n	8004a24 <HAL_TIM_PeriodElapsedCallback+0x230>
			}
			uint8_t *tempPtr = tempCrcData;
 8004a6e:	22fc      	movs	r2, #252	; 0xfc
 8004a70:	1812      	adds	r2, r2, r0
 8004a72:	19d2      	adds	r2, r2, r7
 8004a74:	6812      	ldr	r2, [r2, #0]
 8004a76:	21f4      	movs	r1, #244	; 0xf4
 8004a78:	0004      	movs	r4, r0
 8004a7a:	1808      	adds	r0, r1, r0
 8004a7c:	19c0      	adds	r0, r0, r7
 8004a7e:	6002      	str	r2, [r0, #0]
			crcResult = GetCrc16(tempPtr,
 8004a80:	26fa      	movs	r6, #250	; 0xfa
 8004a82:	0020      	movs	r0, r4
 8004a84:	1832      	adds	r2, r6, r0
 8004a86:	19d4      	adds	r4, r2, r7
 8004a88:	180a      	adds	r2, r1, r0
 8004a8a:	19d2      	adds	r2, r2, r7
 8004a8c:	6812      	ldr	r2, [r2, #0]
 8004a8e:	0019      	movs	r1, r3
 8004a90:	0010      	movs	r0, r2
 8004a92:	f002 f98d 	bl	8006db0 <GetCrc16>
 8004a96:	0003      	movs	r3, r0
 8004a98:	8023      	strh	r3, [r4, #0]
					sizeof(tempCrcData) / sizeof(tempCrcData[0]));
			uint16_t checker = responseBuffer[0][c + 1];
 8004a9a:	2418      	movs	r4, #24
 8004a9c:	192b      	adds	r3, r5, r4
 8004a9e:	19db      	adds	r3, r3, r7
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	4a3a      	ldr	r2, [pc, #232]	; (8004b90 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8004aa6:	5cd2      	ldrb	r2, [r2, r3]
 8004aa8:	20f2      	movs	r0, #242	; 0xf2
 8004aaa:	1903      	adds	r3, r0, r4
 8004aac:	19db      	adds	r3, r3, r7
 8004aae:	801a      	strh	r2, [r3, #0]
			checker = checker << 8 | responseBuffer[0][c + 2];
 8004ab0:	1903      	adds	r3, r0, r4
 8004ab2:	19db      	adds	r3, r3, r7
 8004ab4:	881b      	ldrh	r3, [r3, #0]
 8004ab6:	021b      	lsls	r3, r3, #8
 8004ab8:	b21a      	sxth	r2, r3
 8004aba:	192b      	adds	r3, r5, r4
 8004abc:	19db      	adds	r3, r3, r7
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	3302      	adds	r3, #2
 8004ac2:	4933      	ldr	r1, [pc, #204]	; (8004b90 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8004ac4:	5ccb      	ldrb	r3, [r1, r3]
 8004ac6:	b21b      	sxth	r3, r3
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	b21a      	sxth	r2, r3
 8004acc:	1903      	adds	r3, r0, r4
 8004ace:	19db      	adds	r3, r3, r7
 8004ad0:	801a      	strh	r2, [r3, #0]
			if (crcResult == checker) {
 8004ad2:	1933      	adds	r3, r6, r4
 8004ad4:	19da      	adds	r2, r3, r7
 8004ad6:	1903      	adds	r3, r0, r4
 8004ad8:	19db      	adds	r3, r3, r7
 8004ada:	8812      	ldrh	r2, [r2, #0]
 8004adc:	881b      	ldrh	r3, [r3, #0]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d10a      	bne.n	8004af8 <HAL_TIM_PeriodElapsedCallback+0x304>
				if (responseBuffer[0][3] == 1 || responseBuffer[0][3] == 0x13) {
 8004ae2:	4b2b      	ldr	r3, [pc, #172]	; (8004b90 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8004ae4:	78db      	ldrb	r3, [r3, #3]
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d003      	beq.n	8004af2 <HAL_TIM_PeriodElapsedCallback+0x2fe>
 8004aea:	4b29      	ldr	r3, [pc, #164]	; (8004b90 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8004aec:	78db      	ldrb	r3, [r3, #3]
 8004aee:	2b13      	cmp	r3, #19
 8004af0:	d102      	bne.n	8004af8 <HAL_TIM_PeriodElapsedCallback+0x304>
					isLoggedIn = 1;
 8004af2:	4b1c      	ldr	r3, [pc, #112]	; (8004b64 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8004af4:	2201      	movs	r2, #1
 8004af6:	701a      	strb	r2, [r3, #0]
						// HAL_UART_Transmit(&huart4, "HB rec", sizeof("HB rec"),
						// 100);
					}
				}
			}
			HAL_TIM_Base_Stop_IT(&htim6);
 8004af8:	4b24      	ldr	r3, [pc, #144]	; (8004b8c <HAL_TIM_PeriodElapsedCallback+0x398>)
 8004afa:	0018      	movs	r0, r3
 8004afc:	f007 fb78 	bl	800c1f0 <HAL_TIM_Base_Stop_IT>
			memset(responseBuffer, 0, sizeof(responseBuffer));
 8004b00:	2396      	movs	r3, #150	; 0x96
 8004b02:	005a      	lsls	r2, r3, #1
 8004b04:	4b22      	ldr	r3, [pc, #136]	; (8004b90 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8004b06:	2100      	movs	r1, #0
 8004b08:	0018      	movs	r0, r3
 8004b0a:	f00a fa7c 	bl	800f006 <memset>
			lineCount = 0;
 8004b0e:	4b21      	ldr	r3, [pc, #132]	; (8004b94 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8004b10:	2200      	movs	r2, #0
 8004b12:	701a      	strb	r2, [r3, #0]
			charCount = 0;
 8004b14:	4b20      	ldr	r3, [pc, #128]	; (8004b98 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8004b16:	2200      	movs	r2, #0
 8004b18:	701a      	strb	r2, [r3, #0]
			isStart = 0;
 8004b1a:	4b20      	ldr	r3, [pc, #128]	; (8004b9c <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	701a      	strb	r2, [r3, #0]
 8004b20:	46c5      	mov	sp, r8
		if (responseBuffer[0][0] == 0x78 && responseBuffer[0][1] == 0x78) {
 8004b22:	f000 fce4 	bl	80054ee <HAL_TIM_PeriodElapsedCallback+0xcfa>
		} else {
			uint8_t tLine = 99;
 8004b26:	2346      	movs	r3, #70	; 0x46
 8004b28:	33ff      	adds	r3, #255	; 0xff
 8004b2a:	2118      	movs	r1, #24
 8004b2c:	185b      	adds	r3, r3, r1
 8004b2e:	19db      	adds	r3, r3, r7
 8004b30:	2263      	movs	r2, #99	; 0x63
 8004b32:	701a      	strb	r2, [r3, #0]
			char *ptr;
			char *ptr2;
			char *ptr3;
			uint8_t tIndex;
			//message handling here------------------------------------------
			for (uint8_t i = 0; i <= RESPONSE_MAX_LINE; i++) {
 8004b34:	2338      	movs	r3, #56	; 0x38
 8004b36:	33ff      	adds	r3, #255	; 0xff
 8004b38:	185b      	adds	r3, r3, r1
 8004b3a:	19db      	adds	r3, r3, r7
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	701a      	strb	r2, [r3, #0]
 8004b40:	e09a      	b.n	8004c78 <HAL_TIM_PeriodElapsedCallback+0x484>
 8004b42:	46c0      	nop			; (mov r8, r8)
 8004b44:	200003e4 	.word	0x200003e4
 8004b48:	20000d6a 	.word	0x20000d6a
 8004b4c:	20000d6b 	.word	0x20000d6b
 8004b50:	50000400 	.word	0x50000400
 8004b54:	200000d7 	.word	0x200000d7
 8004b58:	20000d69 	.word	0x20000d69
 8004b5c:	2000047c 	.word	0x2000047c
 8004b60:	20000a78 	.word	0x20000a78
 8004b64:	20000a7c 	.word	0x20000a7c
 8004b68:	2000076c 	.word	0x2000076c
 8004b6c:	20000430 	.word	0x20000430
 8004b70:	50000800 	.word	0x50000800
 8004b74:	20000774 	.word	0x20000774
 8004b78:	20000775 	.word	0x20000775
 8004b7c:	20000772 	.word	0x20000772
 8004b80:	20000773 	.word	0x20000773
 8004b84:	20000771 	.word	0x20000771
 8004b88:	2000077c 	.word	0x2000077c
 8004b8c:	20000398 	.word	0x20000398
 8004b90:	20000794 	.word	0x20000794
 8004b94:	200008c0 	.word	0x200008c0
 8004b98:	200008c1 	.word	0x200008c1
 8004b9c:	200008c4 	.word	0x200008c4
				ptr = strstr(responseBuffer[i], "+CMT:");
 8004ba0:	2438      	movs	r4, #56	; 0x38
 8004ba2:	34ff      	adds	r4, #255	; 0xff
 8004ba4:	2618      	movs	r6, #24
 8004ba6:	19a3      	adds	r3, r4, r6
 8004ba8:	19db      	adds	r3, r3, r7
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	2232      	movs	r2, #50	; 0x32
 8004bae:	435a      	muls	r2, r3
 8004bb0:	4bdc      	ldr	r3, [pc, #880]	; (8004f24 <HAL_TIM_PeriodElapsedCallback+0x730>)
 8004bb2:	18d3      	adds	r3, r2, r3
 8004bb4:	4adc      	ldr	r2, [pc, #880]	; (8004f28 <HAL_TIM_PeriodElapsedCallback+0x734>)
 8004bb6:	0011      	movs	r1, r2
 8004bb8:	0018      	movs	r0, r3
 8004bba:	f00a fa7c 	bl	800f0b6 <strstr>
 8004bbe:	0003      	movs	r3, r0
 8004bc0:	25a0      	movs	r5, #160	; 0xa0
 8004bc2:	006d      	lsls	r5, r5, #1
 8004bc4:	19aa      	adds	r2, r5, r6
 8004bc6:	19d2      	adds	r2, r2, r7
 8004bc8:	6013      	str	r3, [r2, #0]
				ptr2 = strstr(responseBuffer[i], "SMS Ready");
 8004bca:	19a3      	adds	r3, r4, r6
 8004bcc:	19db      	adds	r3, r3, r7
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	2232      	movs	r2, #50	; 0x32
 8004bd2:	435a      	muls	r2, r3
 8004bd4:	4bd3      	ldr	r3, [pc, #844]	; (8004f24 <HAL_TIM_PeriodElapsedCallback+0x730>)
 8004bd6:	18d3      	adds	r3, r2, r3
 8004bd8:	4ad4      	ldr	r2, [pc, #848]	; (8004f2c <HAL_TIM_PeriodElapsedCallback+0x738>)
 8004bda:	0011      	movs	r1, r2
 8004bdc:	0018      	movs	r0, r3
 8004bde:	f00a fa6a 	bl	800f0b6 <strstr>
 8004be2:	0003      	movs	r3, r0
 8004be4:	229e      	movs	r2, #158	; 0x9e
 8004be6:	0052      	lsls	r2, r2, #1
 8004be8:	1992      	adds	r2, r2, r6
 8004bea:	19d2      	adds	r2, r2, r7
 8004bec:	6013      	str	r3, [r2, #0]
				ptr3 = strstr(responseBuffer[i], "Call Ready");
 8004bee:	19a3      	adds	r3, r4, r6
 8004bf0:	19db      	adds	r3, r3, r7
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	2232      	movs	r2, #50	; 0x32
 8004bf6:	435a      	muls	r2, r3
 8004bf8:	4bca      	ldr	r3, [pc, #808]	; (8004f24 <HAL_TIM_PeriodElapsedCallback+0x730>)
 8004bfa:	18d3      	adds	r3, r2, r3
 8004bfc:	4acc      	ldr	r2, [pc, #816]	; (8004f30 <HAL_TIM_PeriodElapsedCallback+0x73c>)
 8004bfe:	0011      	movs	r1, r2
 8004c00:	0018      	movs	r0, r3
 8004c02:	f00a fa58 	bl	800f0b6 <strstr>
 8004c06:	0003      	movs	r3, r0
 8004c08:	229c      	movs	r2, #156	; 0x9c
 8004c0a:	0052      	lsls	r2, r2, #1
 8004c0c:	1992      	adds	r2, r2, r6
 8004c0e:	19d2      	adds	r2, r2, r7
 8004c10:	6013      	str	r3, [r2, #0]
				if (ptr != NULL) {
 8004c12:	19ab      	adds	r3, r5, r6
 8004c14:	19db      	adds	r3, r3, r7
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d008      	beq.n	8004c2e <HAL_TIM_PeriodElapsedCallback+0x43a>
					tLine = i;
 8004c1c:	2346      	movs	r3, #70	; 0x46
 8004c1e:	33ff      	adds	r3, #255	; 0xff
 8004c20:	199b      	adds	r3, r3, r6
 8004c22:	19db      	adds	r3, r3, r7
 8004c24:	19a2      	adds	r2, r4, r6
 8004c26:	19d2      	adds	r2, r2, r7
 8004c28:	7812      	ldrb	r2, [r2, #0]
 8004c2a:	701a      	strb	r2, [r3, #0]
					break;
 8004c2c:	e02c      	b.n	8004c88 <HAL_TIM_PeriodElapsedCallback+0x494>
				}else if (ptr2 != NULL || ptr3 != NULL) {
 8004c2e:	239e      	movs	r3, #158	; 0x9e
 8004c30:	005b      	lsls	r3, r3, #1
 8004c32:	2218      	movs	r2, #24
 8004c34:	189b      	adds	r3, r3, r2
 8004c36:	19db      	adds	r3, r3, r7
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d106      	bne.n	8004c4c <HAL_TIM_PeriodElapsedCallback+0x458>
 8004c3e:	239c      	movs	r3, #156	; 0x9c
 8004c40:	005b      	lsls	r3, r3, #1
 8004c42:	189b      	adds	r3, r3, r2
 8004c44:	19db      	adds	r3, r3, r7
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d00b      	beq.n	8004c64 <HAL_TIM_PeriodElapsedCallback+0x470>
					tLine = i;
 8004c4c:	2346      	movs	r3, #70	; 0x46
 8004c4e:	33ff      	adds	r3, #255	; 0xff
 8004c50:	2118      	movs	r1, #24
 8004c52:	185b      	adds	r3, r3, r1
 8004c54:	19db      	adds	r3, r3, r7
 8004c56:	2238      	movs	r2, #56	; 0x38
 8004c58:	32ff      	adds	r2, #255	; 0xff
 8004c5a:	1852      	adds	r2, r2, r1
 8004c5c:	19d2      	adds	r2, r2, r7
 8004c5e:	7812      	ldrb	r2, [r2, #0]
 8004c60:	701a      	strb	r2, [r3, #0]
					break;
 8004c62:	e011      	b.n	8004c88 <HAL_TIM_PeriodElapsedCallback+0x494>
			for (uint8_t i = 0; i <= RESPONSE_MAX_LINE; i++) {
 8004c64:	2138      	movs	r1, #56	; 0x38
 8004c66:	31ff      	adds	r1, #255	; 0xff
 8004c68:	2018      	movs	r0, #24
 8004c6a:	180b      	adds	r3, r1, r0
 8004c6c:	19db      	adds	r3, r3, r7
 8004c6e:	781a      	ldrb	r2, [r3, #0]
 8004c70:	180b      	adds	r3, r1, r0
 8004c72:	19db      	adds	r3, r3, r7
 8004c74:	3201      	adds	r2, #1
 8004c76:	701a      	strb	r2, [r3, #0]
 8004c78:	2338      	movs	r3, #56	; 0x38
 8004c7a:	33ff      	adds	r3, #255	; 0xff
 8004c7c:	2218      	movs	r2, #24
 8004c7e:	189b      	adds	r3, r3, r2
 8004c80:	19db      	adds	r3, r3, r7
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	2b06      	cmp	r3, #6
 8004c86:	d98b      	bls.n	8004ba0 <HAL_TIM_PeriodElapsedCallback+0x3ac>
				}
			}
			if (tLine != 99 && (ptr2 != NULL || ptr3 != NULL)){
 8004c88:	2346      	movs	r3, #70	; 0x46
 8004c8a:	33ff      	adds	r3, #255	; 0xff
 8004c8c:	2218      	movs	r2, #24
 8004c8e:	189b      	adds	r3, r3, r2
 8004c90:	19db      	adds	r3, r3, r7
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	2b63      	cmp	r3, #99	; 0x63
 8004c96:	d011      	beq.n	8004cbc <HAL_TIM_PeriodElapsedCallback+0x4c8>
 8004c98:	239e      	movs	r3, #158	; 0x9e
 8004c9a:	005b      	lsls	r3, r3, #1
 8004c9c:	189b      	adds	r3, r3, r2
 8004c9e:	19db      	adds	r3, r3, r7
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d106      	bne.n	8004cb4 <HAL_TIM_PeriodElapsedCallback+0x4c0>
 8004ca6:	239c      	movs	r3, #156	; 0x9c
 8004ca8:	005b      	lsls	r3, r3, #1
 8004caa:	189b      	adds	r3, r3, r2
 8004cac:	19db      	adds	r3, r3, r7
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d003      	beq.n	8004cbc <HAL_TIM_PeriodElapsedCallback+0x4c8>
				//SMS Ready received
				clearit();
 8004cb4:	f002 f90c 	bl	8006ed0 <clearit>
 8004cb8:	f000 fc19 	bl	80054ee <HAL_TIM_PeriodElapsedCallback+0xcfa>
			}
			else if (tLine != 99 && ptr != NULL) {
 8004cbc:	2446      	movs	r4, #70	; 0x46
 8004cbe:	34ff      	adds	r4, #255	; 0xff
 8004cc0:	2218      	movs	r2, #24
 8004cc2:	18a3      	adds	r3, r4, r2
 8004cc4:	19db      	adds	r3, r3, r7
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	2b63      	cmp	r3, #99	; 0x63
 8004cca:	d101      	bne.n	8004cd0 <HAL_TIM_PeriodElapsedCallback+0x4dc>
 8004ccc:	f000 fc0f 	bl	80054ee <HAL_TIM_PeriodElapsedCallback+0xcfa>
 8004cd0:	26a0      	movs	r6, #160	; 0xa0
 8004cd2:	0076      	lsls	r6, r6, #1
 8004cd4:	18b3      	adds	r3, r6, r2
 8004cd6:	19db      	adds	r3, r3, r7
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d101      	bne.n	8004ce2 <HAL_TIM_PeriodElapsedCallback+0x4ee>
 8004cde:	f000 fc06 	bl	80054ee <HAL_TIM_PeriodElapsedCallback+0xcfa>
				//some message is received!!!.
				//---check the sender's number.
				char sender[50];
				memset(sender, 0, sizeof(sender));
 8004ce2:	250c      	movs	r5, #12
 8004ce4:	18ab      	adds	r3, r5, r2
 8004ce6:	19db      	adds	r3, r3, r7
 8004ce8:	2232      	movs	r2, #50	; 0x32
 8004cea:	2100      	movs	r1, #0
 8004cec:	0018      	movs	r0, r3
 8004cee:	f00a f98a 	bl	800f006 <memset>
				ptr = strchr(responseBuffer[tLine], '\"');
 8004cf2:	2018      	movs	r0, #24
 8004cf4:	1823      	adds	r3, r4, r0
 8004cf6:	19db      	adds	r3, r3, r7
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	2232      	movs	r2, #50	; 0x32
 8004cfc:	435a      	muls	r2, r3
 8004cfe:	4b89      	ldr	r3, [pc, #548]	; (8004f24 <HAL_TIM_PeriodElapsedCallback+0x730>)
 8004d00:	18d3      	adds	r3, r2, r3
 8004d02:	2122      	movs	r1, #34	; 0x22
 8004d04:	0018      	movs	r0, r3
 8004d06:	f00a f9b4 	bl	800f072 <strchr>
 8004d0a:	0003      	movs	r3, r0
 8004d0c:	0031      	movs	r1, r6
 8004d0e:	2018      	movs	r0, #24
 8004d10:	180a      	adds	r2, r1, r0
 8004d12:	19d2      	adds	r2, r2, r7
 8004d14:	6013      	str	r3, [r2, #0]
				if (ptr != NULL) {
 8004d16:	180b      	adds	r3, r1, r0
 8004d18:	19db      	adds	r3, r3, r7
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d101      	bne.n	8004d24 <HAL_TIM_PeriodElapsedCallback+0x530>
 8004d20:	f000 fbe3 	bl	80054ea <HAL_TIM_PeriodElapsedCallback+0xcf6>
					tIndex = ptr - (char) responseBuffer[tLine];
 8004d24:	1823      	adds	r3, r4, r0
 8004d26:	19db      	adds	r3, r3, r7
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	2232      	movs	r2, #50	; 0x32
 8004d2c:	435a      	muls	r2, r3
 8004d2e:	4b7d      	ldr	r3, [pc, #500]	; (8004f24 <HAL_TIM_PeriodElapsedCallback+0x730>)
 8004d30:	18d3      	adds	r3, r2, r3
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	425b      	negs	r3, r3
 8004d36:	0006      	movs	r6, r0
 8004d38:	198a      	adds	r2, r1, r6
 8004d3a:	19d2      	adds	r2, r2, r7
 8004d3c:	6812      	ldr	r2, [r2, #0]
 8004d3e:	18d3      	adds	r3, r2, r3
 8004d40:	001a      	movs	r2, r3
 8004d42:	20f1      	movs	r0, #241	; 0xf1
 8004d44:	1983      	adds	r3, r0, r6
 8004d46:	19db      	adds	r3, r3, r7
 8004d48:	701a      	strb	r2, [r3, #0]
					substring(sender, responseBuffer[tLine], tIndex + 1, 13);
 8004d4a:	19a3      	adds	r3, r4, r6
 8004d4c:	19db      	adds	r3, r3, r7
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	2232      	movs	r2, #50	; 0x32
 8004d52:	435a      	muls	r2, r3
 8004d54:	4b73      	ldr	r3, [pc, #460]	; (8004f24 <HAL_TIM_PeriodElapsedCallback+0x730>)
 8004d56:	18d1      	adds	r1, r2, r3
 8004d58:	1983      	adds	r3, r0, r6
 8004d5a:	19db      	adds	r3, r3, r7
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	3301      	adds	r3, #1
 8004d60:	b2da      	uxtb	r2, r3
 8004d62:	19ab      	adds	r3, r5, r6
 8004d64:	19d8      	adds	r0, r3, r7
 8004d66:	230d      	movs	r3, #13
 8004d68:	f002 fe82 	bl	8007a70 <substring>
					substring(sender, sender, 3, 10);
 8004d6c:	19ab      	adds	r3, r5, r6
 8004d6e:	19d9      	adds	r1, r3, r7
 8004d70:	19ab      	adds	r3, r5, r6
 8004d72:	19d8      	adds	r0, r3, r7
 8004d74:	230a      	movs	r3, #10
 8004d76:	2203      	movs	r2, #3
 8004d78:	f002 fe7a 	bl	8007a70 <substring>
					uint8_t isOwner = 0;
 8004d7c:	26f0      	movs	r6, #240	; 0xf0
 8004d7e:	2118      	movs	r1, #24
 8004d80:	1873      	adds	r3, r6, r1
 8004d82:	19db      	adds	r3, r3, r7
 8004d84:	2200      	movs	r2, #0
 8004d86:	701a      	strb	r2, [r3, #0]
					isOwner = !strcmp(sender, validSender); //check if sender's number is an owner?
 8004d88:	4a6a      	ldr	r2, [pc, #424]	; (8004f34 <HAL_TIM_PeriodElapsedCallback+0x740>)
 8004d8a:	186b      	adds	r3, r5, r1
 8004d8c:	19db      	adds	r3, r3, r7
 8004d8e:	0011      	movs	r1, r2
 8004d90:	0018      	movs	r0, r3
 8004d92:	f7fb f9b5 	bl	8000100 <strcmp>
 8004d96:	0003      	movs	r3, r0
 8004d98:	425a      	negs	r2, r3
 8004d9a:	4153      	adcs	r3, r2
 8004d9c:	b2da      	uxtb	r2, r3
 8004d9e:	2118      	movs	r1, #24
 8004da0:	1873      	adds	r3, r6, r1
 8004da2:	19db      	adds	r3, r3, r7
 8004da4:	701a      	strb	r2, [r3, #0]
					//---check the message content for any command. (*auto# for example)
					uint8_t ind1;
					uint8_t ind2; //command length.
					char *x;
					char sCommand[MAX_COMMAND_LEN];
					memset(sCommand,0,sizeof(sCommand));//new line added
 8004da6:	2640      	movs	r6, #64	; 0x40
 8004da8:	000d      	movs	r5, r1
 8004daa:	1873      	adds	r3, r6, r1
 8004dac:	19db      	adds	r3, r3, r7
 8004dae:	2232      	movs	r2, #50	; 0x32
 8004db0:	2100      	movs	r1, #0
 8004db2:	0018      	movs	r0, r3
 8004db4:	f00a f927 	bl	800f006 <memset>
					x = strchr(responseBuffer[tLine + 1], '*');
 8004db8:	0029      	movs	r1, r5
 8004dba:	1863      	adds	r3, r4, r1
 8004dbc:	19db      	adds	r3, r3, r7
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	2232      	movs	r2, #50	; 0x32
 8004dc4:	435a      	muls	r2, r3
 8004dc6:	4b57      	ldr	r3, [pc, #348]	; (8004f24 <HAL_TIM_PeriodElapsedCallback+0x730>)
 8004dc8:	18d3      	adds	r3, r2, r3
 8004dca:	212a      	movs	r1, #42	; 0x2a
 8004dcc:	0018      	movs	r0, r3
 8004dce:	f00a f950 	bl	800f072 <strchr>
 8004dd2:	0003      	movs	r3, r0
 8004dd4:	25ec      	movs	r5, #236	; 0xec
 8004dd6:	2118      	movs	r1, #24
 8004dd8:	186a      	adds	r2, r5, r1
 8004dda:	19d2      	adds	r2, r2, r7
 8004ddc:	6013      	str	r3, [r2, #0]
					if (x != NULL) {
 8004dde:	000a      	movs	r2, r1
 8004de0:	18ab      	adds	r3, r5, r2
 8004de2:	19db      	adds	r3, r3, r7
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d101      	bne.n	8004dee <HAL_TIM_PeriodElapsedCallback+0x5fa>
 8004dea:	f000 fb7e 	bl	80054ea <HAL_TIM_PeriodElapsedCallback+0xcf6>
						char *y;
						y = strchr(responseBuffer[tLine + 1], '#');
 8004dee:	18a3      	adds	r3, r4, r2
 8004df0:	19db      	adds	r3, r3, r7
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	3301      	adds	r3, #1
 8004df6:	2232      	movs	r2, #50	; 0x32
 8004df8:	435a      	muls	r2, r3
 8004dfa:	4b4a      	ldr	r3, [pc, #296]	; (8004f24 <HAL_TIM_PeriodElapsedCallback+0x730>)
 8004dfc:	18d3      	adds	r3, r2, r3
 8004dfe:	2123      	movs	r1, #35	; 0x23
 8004e00:	0018      	movs	r0, r3
 8004e02:	f00a f936 	bl	800f072 <strchr>
 8004e06:	0003      	movs	r3, r0
 8004e08:	20e8      	movs	r0, #232	; 0xe8
 8004e0a:	2118      	movs	r1, #24
 8004e0c:	1842      	adds	r2, r0, r1
 8004e0e:	19d2      	adds	r2, r2, r7
 8004e10:	6013      	str	r3, [r2, #0]
						if (y != NULL) {
 8004e12:	000a      	movs	r2, r1
 8004e14:	1883      	adds	r3, r0, r2
 8004e16:	19db      	adds	r3, r3, r7
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d100      	bne.n	8004e20 <HAL_TIM_PeriodElapsedCallback+0x62c>
 8004e1e:	e364      	b.n	80054ea <HAL_TIM_PeriodElapsedCallback+0xcf6>
							//command found!!!
							//---extract the command.
							ind1 = x - (char) responseBuffer[tLine + 1] + 1;
 8004e20:	0021      	movs	r1, r4
 8004e22:	0014      	movs	r4, r2
 8004e24:	188b      	adds	r3, r1, r2
 8004e26:	19db      	adds	r3, r3, r7
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	2232      	movs	r2, #50	; 0x32
 8004e2e:	435a      	muls	r2, r3
 8004e30:	4b3c      	ldr	r3, [pc, #240]	; (8004f24 <HAL_TIM_PeriodElapsedCallback+0x730>)
 8004e32:	18d3      	adds	r3, r2, r3
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	001a      	movs	r2, r3
 8004e38:	2301      	movs	r3, #1
 8004e3a:	1a9b      	subs	r3, r3, r2
 8004e3c:	192a      	adds	r2, r5, r4
 8004e3e:	19d2      	adds	r2, r2, r7
 8004e40:	6812      	ldr	r2, [r2, #0]
 8004e42:	18d3      	adds	r3, r2, r3
 8004e44:	001a      	movs	r2, r3
 8004e46:	23e7      	movs	r3, #231	; 0xe7
 8004e48:	191b      	adds	r3, r3, r4
 8004e4a:	19db      	adds	r3, r3, r7
 8004e4c:	701a      	strb	r2, [r3, #0]
							ind2 = y - (char) responseBuffer[tLine + 1] - 1;
 8004e4e:	190b      	adds	r3, r1, r4
 8004e50:	19db      	adds	r3, r3, r7
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	3301      	adds	r3, #1
 8004e56:	2232      	movs	r2, #50	; 0x32
 8004e58:	435a      	muls	r2, r3
 8004e5a:	4b32      	ldr	r3, [pc, #200]	; (8004f24 <HAL_TIM_PeriodElapsedCallback+0x730>)
 8004e5c:	18d3      	adds	r3, r2, r3
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	43db      	mvns	r3, r3
 8004e62:	1902      	adds	r2, r0, r4
 8004e64:	19d2      	adds	r2, r2, r7
 8004e66:	6812      	ldr	r2, [r2, #0]
 8004e68:	18d3      	adds	r3, r2, r3
 8004e6a:	001a      	movs	r2, r3
 8004e6c:	25e6      	movs	r5, #230	; 0xe6
 8004e6e:	192b      	adds	r3, r5, r4
 8004e70:	19db      	adds	r3, r3, r7
 8004e72:	701a      	strb	r2, [r3, #0]
							substring(sCommand, responseBuffer[tLine + 1], ind1,ind2);
 8004e74:	190b      	adds	r3, r1, r4
 8004e76:	19db      	adds	r3, r3, r7
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	2232      	movs	r2, #50	; 0x32
 8004e7e:	435a      	muls	r2, r3
 8004e80:	4b28      	ldr	r3, [pc, #160]	; (8004f24 <HAL_TIM_PeriodElapsedCallback+0x730>)
 8004e82:	18d1      	adds	r1, r2, r3
 8004e84:	0020      	movs	r0, r4
 8004e86:	182b      	adds	r3, r5, r0
 8004e88:	19db      	adds	r3, r3, r7
 8004e8a:	781c      	ldrb	r4, [r3, #0]
 8004e8c:	23e7      	movs	r3, #231	; 0xe7
 8004e8e:	181b      	adds	r3, r3, r0
 8004e90:	19db      	adds	r3, r3, r7
 8004e92:	781a      	ldrb	r2, [r3, #0]
 8004e94:	1833      	adds	r3, r6, r0
 8004e96:	19d8      	adds	r0, r3, r7
 8004e98:	0023      	movs	r3, r4
 8004e9a:	f002 fde9 	bl	8007a70 <substring>
							//--->1)RES0 = reset user PIN and registered NUMBER
							//--->2)RNUM3322336979xxxx = register new owner's number
							//--->3)RPIN = set new pin
							//--->4)WHERE
							//--->5)SERVER,DNS,PORT (DNS<=50,PORT<=5)
							if(sCommand[0] == 'R'
 8004e9e:	4b26      	ldr	r3, [pc, #152]	; (8004f38 <HAL_TIM_PeriodElapsedCallback+0x744>)
 8004ea0:	22a4      	movs	r2, #164	; 0xa4
 8004ea2:	0052      	lsls	r2, r2, #1
 8004ea4:	189b      	adds	r3, r3, r2
 8004ea6:	2118      	movs	r1, #24
 8004ea8:	468c      	mov	ip, r1
 8004eaa:	44bc      	add	ip, r7
 8004eac:	4463      	add	r3, ip
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	2b52      	cmp	r3, #82	; 0x52
 8004eb2:	d149      	bne.n	8004f48 <HAL_TIM_PeriodElapsedCallback+0x754>
							&& sCommand[1] == 'E'
 8004eb4:	4b20      	ldr	r3, [pc, #128]	; (8004f38 <HAL_TIM_PeriodElapsedCallback+0x744>)
 8004eb6:	189b      	adds	r3, r3, r2
 8004eb8:	2118      	movs	r1, #24
 8004eba:	468c      	mov	ip, r1
 8004ebc:	44bc      	add	ip, r7
 8004ebe:	4463      	add	r3, ip
 8004ec0:	785b      	ldrb	r3, [r3, #1]
 8004ec2:	2b45      	cmp	r3, #69	; 0x45
 8004ec4:	d140      	bne.n	8004f48 <HAL_TIM_PeriodElapsedCallback+0x754>
							&& sCommand[2] == 'S'
 8004ec6:	4b1c      	ldr	r3, [pc, #112]	; (8004f38 <HAL_TIM_PeriodElapsedCallback+0x744>)
 8004ec8:	189b      	adds	r3, r3, r2
 8004eca:	2118      	movs	r1, #24
 8004ecc:	468c      	mov	ip, r1
 8004ece:	44bc      	add	ip, r7
 8004ed0:	4463      	add	r3, ip
 8004ed2:	789b      	ldrb	r3, [r3, #2]
 8004ed4:	2b53      	cmp	r3, #83	; 0x53
 8004ed6:	d137      	bne.n	8004f48 <HAL_TIM_PeriodElapsedCallback+0x754>
							&& sCommand[3] == '0'
 8004ed8:	4b17      	ldr	r3, [pc, #92]	; (8004f38 <HAL_TIM_PeriodElapsedCallback+0x744>)
 8004eda:	189b      	adds	r3, r3, r2
 8004edc:	2218      	movs	r2, #24
 8004ede:	4694      	mov	ip, r2
 8004ee0:	44bc      	add	ip, r7
 8004ee2:	4463      	add	r3, ip
 8004ee4:	78db      	ldrb	r3, [r3, #3]
 8004ee6:	2b30      	cmp	r3, #48	; 0x30
 8004ee8:	d12e      	bne.n	8004f48 <HAL_TIM_PeriodElapsedCallback+0x754>
							&& ind2 == 4) {
 8004eea:	2018      	movs	r0, #24
 8004eec:	182b      	adds	r3, r5, r0
 8004eee:	19db      	adds	r3, r3, r7
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	2b04      	cmp	r3, #4
 8004ef4:	d128      	bne.n	8004f48 <HAL_TIM_PeriodElapsedCallback+0x754>
								//--- reset command received.
								cPin[0] = '1';
 8004ef6:	4b11      	ldr	r3, [pc, #68]	; (8004f3c <HAL_TIM_PeriodElapsedCallback+0x748>)
 8004ef8:	2231      	movs	r2, #49	; 0x31
 8004efa:	701a      	strb	r2, [r3, #0]
								cPin[1] = '2';
 8004efc:	4b0f      	ldr	r3, [pc, #60]	; (8004f3c <HAL_TIM_PeriodElapsedCallback+0x748>)
 8004efe:	2232      	movs	r2, #50	; 0x32
 8004f00:	705a      	strb	r2, [r3, #1]
								cPin[2] = '3';
 8004f02:	4b0e      	ldr	r3, [pc, #56]	; (8004f3c <HAL_TIM_PeriodElapsedCallback+0x748>)
 8004f04:	2233      	movs	r2, #51	; 0x33
 8004f06:	709a      	strb	r2, [r3, #2]
								cPin[3] = '4';
 8004f08:	4b0c      	ldr	r3, [pc, #48]	; (8004f3c <HAL_TIM_PeriodElapsedCallback+0x748>)
 8004f0a:	2234      	movs	r2, #52	; 0x34
 8004f0c:	70da      	strb	r2, [r3, #3]
								locationDataIntervalA = 5;
 8004f0e:	4b0c      	ldr	r3, [pc, #48]	; (8004f40 <HAL_TIM_PeriodElapsedCallback+0x74c>)
 8004f10:	2205      	movs	r2, #5
 8004f12:	701a      	strb	r2, [r3, #0]
								locationDataIntervalB = 5;
 8004f14:	4b0b      	ldr	r3, [pc, #44]	; (8004f44 <HAL_TIM_PeriodElapsedCallback+0x750>)
 8004f16:	2205      	movs	r2, #5
 8004f18:	701a      	strb	r2, [r3, #0]
								//---saving to flash memory
								save_to_flash(0);
 8004f1a:	2000      	movs	r0, #0
 8004f1c:	f001 fbe6 	bl	80066ec <save_to_flash>
 8004f20:	e2e3      	b.n	80054ea <HAL_TIM_PeriodElapsedCallback+0xcf6>
 8004f22:	46c0      	nop			; (mov r8, r8)
 8004f24:	20000794 	.word	0x20000794
 8004f28:	080134bc 	.word	0x080134bc
 8004f2c:	080134c4 	.word	0x080134c4
 8004f30:	080134d0 	.word	0x080134d0
 8004f34:	20000008 	.word	0x20000008
 8004f38:	fffffef8 	.word	0xfffffef8
 8004f3c:	20000014 	.word	0x20000014
 8004f40:	20000004 	.word	0x20000004
 8004f44:	20000005 	.word	0x20000005
								//printf("Reset Completed\n");
							} else if (sCommand[0] == 'R'
 8004f48:	4bdb      	ldr	r3, [pc, #876]	; (80052b8 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 8004f4a:	22a4      	movs	r2, #164	; 0xa4
 8004f4c:	0052      	lsls	r2, r2, #1
 8004f4e:	189b      	adds	r3, r3, r2
 8004f50:	2118      	movs	r1, #24
 8004f52:	468c      	mov	ip, r1
 8004f54:	44bc      	add	ip, r7
 8004f56:	4463      	add	r3, ip
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	2b52      	cmp	r3, #82	; 0x52
 8004f5c:	d000      	beq.n	8004f60 <HAL_TIM_PeriodElapsedCallback+0x76c>
 8004f5e:	e094      	b.n	800508a <HAL_TIM_PeriodElapsedCallback+0x896>
									&& sCommand[1] == 'N'
 8004f60:	4bd5      	ldr	r3, [pc, #852]	; (80052b8 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 8004f62:	189b      	adds	r3, r3, r2
 8004f64:	2118      	movs	r1, #24
 8004f66:	468c      	mov	ip, r1
 8004f68:	44bc      	add	ip, r7
 8004f6a:	4463      	add	r3, ip
 8004f6c:	785b      	ldrb	r3, [r3, #1]
 8004f6e:	2b4e      	cmp	r3, #78	; 0x4e
 8004f70:	d000      	beq.n	8004f74 <HAL_TIM_PeriodElapsedCallback+0x780>
 8004f72:	e08a      	b.n	800508a <HAL_TIM_PeriodElapsedCallback+0x896>
									&& sCommand[2] == 'U'
 8004f74:	4bd0      	ldr	r3, [pc, #832]	; (80052b8 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 8004f76:	189b      	adds	r3, r3, r2
 8004f78:	2118      	movs	r1, #24
 8004f7a:	468c      	mov	ip, r1
 8004f7c:	44bc      	add	ip, r7
 8004f7e:	4463      	add	r3, ip
 8004f80:	789b      	ldrb	r3, [r3, #2]
 8004f82:	2b55      	cmp	r3, #85	; 0x55
 8004f84:	d000      	beq.n	8004f88 <HAL_TIM_PeriodElapsedCallback+0x794>
 8004f86:	e080      	b.n	800508a <HAL_TIM_PeriodElapsedCallback+0x896>
									&& sCommand[3] == 'M'
 8004f88:	4bcb      	ldr	r3, [pc, #812]	; (80052b8 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 8004f8a:	189b      	adds	r3, r3, r2
 8004f8c:	2118      	movs	r1, #24
 8004f8e:	468c      	mov	ip, r1
 8004f90:	44bc      	add	ip, r7
 8004f92:	4463      	add	r3, ip
 8004f94:	78db      	ldrb	r3, [r3, #3]
 8004f96:	2b4d      	cmp	r3, #77	; 0x4d
 8004f98:	d000      	beq.n	8004f9c <HAL_TIM_PeriodElapsedCallback+0x7a8>
 8004f9a:	e076      	b.n	800508a <HAL_TIM_PeriodElapsedCallback+0x896>
									&& ind2 == 18) {
 8004f9c:	23e6      	movs	r3, #230	; 0xe6
 8004f9e:	2018      	movs	r0, #24
 8004fa0:	181b      	adds	r3, r3, r0
 8004fa2:	19db      	adds	r3, r3, r7
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	2b12      	cmp	r3, #18
 8004fa8:	d16f      	bne.n	800508a <HAL_TIM_PeriodElapsedCallback+0x896>
								//---owner number registration command received
								//printf("number registration command received\n");
								if(sCommand[14] == cPin[0]
 8004faa:	4bc3      	ldr	r3, [pc, #780]	; (80052b8 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 8004fac:	0011      	movs	r1, r2
 8004fae:	185b      	adds	r3, r3, r1
 8004fb0:	2218      	movs	r2, #24
 8004fb2:	4694      	mov	ip, r2
 8004fb4:	44bc      	add	ip, r7
 8004fb6:	4463      	add	r3, ip
 8004fb8:	7b9a      	ldrb	r2, [r3, #14]
 8004fba:	4bc0      	ldr	r3, [pc, #768]	; (80052bc <HAL_TIM_PeriodElapsedCallback+0xac8>)
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d000      	beq.n	8004fc4 <HAL_TIM_PeriodElapsedCallback+0x7d0>
 8004fc2:	e28f      	b.n	80054e4 <HAL_TIM_PeriodElapsedCallback+0xcf0>
								&& sCommand[15] == cPin[1]
 8004fc4:	4bbc      	ldr	r3, [pc, #752]	; (80052b8 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 8004fc6:	185b      	adds	r3, r3, r1
 8004fc8:	2218      	movs	r2, #24
 8004fca:	4694      	mov	ip, r2
 8004fcc:	44bc      	add	ip, r7
 8004fce:	4463      	add	r3, ip
 8004fd0:	7bda      	ldrb	r2, [r3, #15]
 8004fd2:	4bba      	ldr	r3, [pc, #744]	; (80052bc <HAL_TIM_PeriodElapsedCallback+0xac8>)
 8004fd4:	785b      	ldrb	r3, [r3, #1]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d000      	beq.n	8004fdc <HAL_TIM_PeriodElapsedCallback+0x7e8>
 8004fda:	e283      	b.n	80054e4 <HAL_TIM_PeriodElapsedCallback+0xcf0>
								&& sCommand[16] == cPin[2]
 8004fdc:	4bb6      	ldr	r3, [pc, #728]	; (80052b8 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 8004fde:	185b      	adds	r3, r3, r1
 8004fe0:	2218      	movs	r2, #24
 8004fe2:	4694      	mov	ip, r2
 8004fe4:	44bc      	add	ip, r7
 8004fe6:	4463      	add	r3, ip
 8004fe8:	7c1a      	ldrb	r2, [r3, #16]
 8004fea:	4bb4      	ldr	r3, [pc, #720]	; (80052bc <HAL_TIM_PeriodElapsedCallback+0xac8>)
 8004fec:	789b      	ldrb	r3, [r3, #2]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d000      	beq.n	8004ff4 <HAL_TIM_PeriodElapsedCallback+0x800>
 8004ff2:	e277      	b.n	80054e4 <HAL_TIM_PeriodElapsedCallback+0xcf0>
								&& sCommand[17] == cPin[3]) {
 8004ff4:	4bb0      	ldr	r3, [pc, #704]	; (80052b8 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 8004ff6:	185b      	adds	r3, r3, r1
 8004ff8:	2218      	movs	r2, #24
 8004ffa:	4694      	mov	ip, r2
 8004ffc:	44bc      	add	ip, r7
 8004ffe:	4463      	add	r3, ip
 8005000:	7c5a      	ldrb	r2, [r3, #17]
 8005002:	4bae      	ldr	r3, [pc, #696]	; (80052bc <HAL_TIM_PeriodElapsedCallback+0xac8>)
 8005004:	78db      	ldrb	r3, [r3, #3]
 8005006:	429a      	cmp	r2, r3
 8005008:	d000      	beq.n	800500c <HAL_TIM_PeriodElapsedCallback+0x818>
 800500a:	e26b      	b.n	80054e4 <HAL_TIM_PeriodElapsedCallback+0xcf0>
									//PIN is valid!!!
									//---register new number
									for (uint8_t m = 0; m < 10; m++) {
 800500c:	239b      	movs	r3, #155	; 0x9b
 800500e:	005b      	lsls	r3, r3, #1
 8005010:	181b      	adds	r3, r3, r0
 8005012:	19db      	adds	r3, r3, r7
 8005014:	2200      	movs	r2, #0
 8005016:	701a      	strb	r2, [r3, #0]
 8005018:	e01b      	b.n	8005052 <HAL_TIM_PeriodElapsedCallback+0x85e>
										validSender[m] = sCommand[m + 4];
 800501a:	209b      	movs	r0, #155	; 0x9b
 800501c:	0040      	lsls	r0, r0, #1
 800501e:	2518      	movs	r5, #24
 8005020:	1943      	adds	r3, r0, r5
 8005022:	19db      	adds	r3, r3, r7
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	1d1a      	adds	r2, r3, #4
 8005028:	1943      	adds	r3, r0, r5
 800502a:	19db      	adds	r3, r3, r7
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	49a2      	ldr	r1, [pc, #648]	; (80052b8 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 8005030:	24a4      	movs	r4, #164	; 0xa4
 8005032:	0064      	lsls	r4, r4, #1
 8005034:	1909      	adds	r1, r1, r4
 8005036:	2418      	movs	r4, #24
 8005038:	46a4      	mov	ip, r4
 800503a:	44bc      	add	ip, r7
 800503c:	4461      	add	r1, ip
 800503e:	5c89      	ldrb	r1, [r1, r2]
 8005040:	4a9f      	ldr	r2, [pc, #636]	; (80052c0 <HAL_TIM_PeriodElapsedCallback+0xacc>)
 8005042:	54d1      	strb	r1, [r2, r3]
									for (uint8_t m = 0; m < 10; m++) {
 8005044:	1943      	adds	r3, r0, r5
 8005046:	19db      	adds	r3, r3, r7
 8005048:	781a      	ldrb	r2, [r3, #0]
 800504a:	1943      	adds	r3, r0, r5
 800504c:	19db      	adds	r3, r3, r7
 800504e:	3201      	adds	r2, #1
 8005050:	701a      	strb	r2, [r3, #0]
 8005052:	239b      	movs	r3, #155	; 0x9b
 8005054:	005b      	lsls	r3, r3, #1
 8005056:	2218      	movs	r2, #24
 8005058:	189b      	adds	r3, r3, r2
 800505a:	19db      	adds	r3, r3, r7
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	2b09      	cmp	r3, #9
 8005060:	d9db      	bls.n	800501a <HAL_TIM_PeriodElapsedCallback+0x826>
									}
									if(validSender[0] == '0' && validSender[1] == '0' && validSender[2] == '0'){
 8005062:	4b97      	ldr	r3, [pc, #604]	; (80052c0 <HAL_TIM_PeriodElapsedCallback+0xacc>)
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	2b30      	cmp	r3, #48	; 0x30
 8005068:	d10b      	bne.n	8005082 <HAL_TIM_PeriodElapsedCallback+0x88e>
 800506a:	4b95      	ldr	r3, [pc, #596]	; (80052c0 <HAL_TIM_PeriodElapsedCallback+0xacc>)
 800506c:	785b      	ldrb	r3, [r3, #1]
 800506e:	2b30      	cmp	r3, #48	; 0x30
 8005070:	d107      	bne.n	8005082 <HAL_TIM_PeriodElapsedCallback+0x88e>
 8005072:	4b93      	ldr	r3, [pc, #588]	; (80052c0 <HAL_TIM_PeriodElapsedCallback+0xacc>)
 8005074:	789b      	ldrb	r3, [r3, #2]
 8005076:	2b30      	cmp	r3, #48	; 0x30
 8005078:	d103      	bne.n	8005082 <HAL_TIM_PeriodElapsedCallback+0x88e>
										isNumValid=0;
 800507a:	4b92      	ldr	r3, [pc, #584]	; (80052c4 <HAL_TIM_PeriodElapsedCallback+0xad0>)
 800507c:	2200      	movs	r2, #0
 800507e:	701a      	strb	r2, [r3, #0]
								if(sCommand[14] == cPin[0]
 8005080:	e230      	b.n	80054e4 <HAL_TIM_PeriodElapsedCallback+0xcf0>
									}else{
										isNumValid=1;
 8005082:	4b90      	ldr	r3, [pc, #576]	; (80052c4 <HAL_TIM_PeriodElapsedCallback+0xad0>)
 8005084:	2201      	movs	r2, #1
 8005086:	701a      	strb	r2, [r3, #0]
								if(sCommand[14] == cPin[0]
 8005088:	e22c      	b.n	80054e4 <HAL_TIM_PeriodElapsedCallback+0xcf0>
									//---send success message(todo)
								} else {
									// incorrect pin, send message (incoorect pin),(todo)
									// *future* stop sending message after 3 fails
								}
							} else if (sCommand[0] == 'R'
 800508a:	4b8b      	ldr	r3, [pc, #556]	; (80052b8 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 800508c:	22a4      	movs	r2, #164	; 0xa4
 800508e:	0052      	lsls	r2, r2, #1
 8005090:	189b      	adds	r3, r3, r2
 8005092:	2118      	movs	r1, #24
 8005094:	468c      	mov	ip, r1
 8005096:	44bc      	add	ip, r7
 8005098:	4463      	add	r3, ip
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	2b52      	cmp	r3, #82	; 0x52
 800509e:	d000      	beq.n	80050a2 <HAL_TIM_PeriodElapsedCallback+0x8ae>
 80050a0:	e081      	b.n	80051a6 <HAL_TIM_PeriodElapsedCallback+0x9b2>
									&& sCommand[1] == 'P'
 80050a2:	4b85      	ldr	r3, [pc, #532]	; (80052b8 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 80050a4:	189b      	adds	r3, r3, r2
 80050a6:	2118      	movs	r1, #24
 80050a8:	468c      	mov	ip, r1
 80050aa:	44bc      	add	ip, r7
 80050ac:	4463      	add	r3, ip
 80050ae:	785b      	ldrb	r3, [r3, #1]
 80050b0:	2b50      	cmp	r3, #80	; 0x50
 80050b2:	d000      	beq.n	80050b6 <HAL_TIM_PeriodElapsedCallback+0x8c2>
 80050b4:	e077      	b.n	80051a6 <HAL_TIM_PeriodElapsedCallback+0x9b2>
									&& sCommand[2] == 'I'
 80050b6:	4b80      	ldr	r3, [pc, #512]	; (80052b8 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 80050b8:	189b      	adds	r3, r3, r2
 80050ba:	2118      	movs	r1, #24
 80050bc:	468c      	mov	ip, r1
 80050be:	44bc      	add	ip, r7
 80050c0:	4463      	add	r3, ip
 80050c2:	789b      	ldrb	r3, [r3, #2]
 80050c4:	2b49      	cmp	r3, #73	; 0x49
 80050c6:	d16e      	bne.n	80051a6 <HAL_TIM_PeriodElapsedCallback+0x9b2>
									&& sCommand[3] == 'N'
 80050c8:	4b7b      	ldr	r3, [pc, #492]	; (80052b8 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 80050ca:	189b      	adds	r3, r3, r2
 80050cc:	2118      	movs	r1, #24
 80050ce:	468c      	mov	ip, r1
 80050d0:	44bc      	add	ip, r7
 80050d2:	4463      	add	r3, ip
 80050d4:	78db      	ldrb	r3, [r3, #3]
 80050d6:	2b4e      	cmp	r3, #78	; 0x4e
 80050d8:	d165      	bne.n	80051a6 <HAL_TIM_PeriodElapsedCallback+0x9b2>
									&& ind2 == 12
 80050da:	23e6      	movs	r3, #230	; 0xe6
 80050dc:	2118      	movs	r1, #24
 80050de:	185b      	adds	r3, r3, r1
 80050e0:	19db      	adds	r3, r3, r7
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	2b0c      	cmp	r3, #12
 80050e6:	d15e      	bne.n	80051a6 <HAL_TIM_PeriodElapsedCallback+0x9b2>
									&& isOwner == 1) {
 80050e8:	23f0      	movs	r3, #240	; 0xf0
 80050ea:	185b      	adds	r3, r3, r1
 80050ec:	19db      	adds	r3, r3, r7
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d158      	bne.n	80051a6 <HAL_TIM_PeriodElapsedCallback+0x9b2>
								//---SET PIN command received from owner.
								// RPINxxxxNNNN
								//printf("set PIN command received\n");
								if (sCommand[4] == cPin[0]
 80050f4:	4b70      	ldr	r3, [pc, #448]	; (80052b8 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 80050f6:	0011      	movs	r1, r2
 80050f8:	185b      	adds	r3, r3, r1
 80050fa:	2218      	movs	r2, #24
 80050fc:	4694      	mov	ip, r2
 80050fe:	44bc      	add	ip, r7
 8005100:	4463      	add	r3, ip
 8005102:	791a      	ldrb	r2, [r3, #4]
 8005104:	4b6d      	ldr	r3, [pc, #436]	; (80052bc <HAL_TIM_PeriodElapsedCallback+0xac8>)
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	429a      	cmp	r2, r3
 800510a:	d000      	beq.n	800510e <HAL_TIM_PeriodElapsedCallback+0x91a>
 800510c:	e1ec      	b.n	80054e8 <HAL_TIM_PeriodElapsedCallback+0xcf4>
								&& sCommand[5] == cPin[1]
 800510e:	4b6a      	ldr	r3, [pc, #424]	; (80052b8 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 8005110:	185b      	adds	r3, r3, r1
 8005112:	2218      	movs	r2, #24
 8005114:	4694      	mov	ip, r2
 8005116:	44bc      	add	ip, r7
 8005118:	4463      	add	r3, ip
 800511a:	795a      	ldrb	r2, [r3, #5]
 800511c:	4b67      	ldr	r3, [pc, #412]	; (80052bc <HAL_TIM_PeriodElapsedCallback+0xac8>)
 800511e:	785b      	ldrb	r3, [r3, #1]
 8005120:	429a      	cmp	r2, r3
 8005122:	d000      	beq.n	8005126 <HAL_TIM_PeriodElapsedCallback+0x932>
 8005124:	e1e0      	b.n	80054e8 <HAL_TIM_PeriodElapsedCallback+0xcf4>
								&& sCommand[6] == cPin[2]
 8005126:	4b64      	ldr	r3, [pc, #400]	; (80052b8 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 8005128:	185b      	adds	r3, r3, r1
 800512a:	2218      	movs	r2, #24
 800512c:	4694      	mov	ip, r2
 800512e:	44bc      	add	ip, r7
 8005130:	4463      	add	r3, ip
 8005132:	799a      	ldrb	r2, [r3, #6]
 8005134:	4b61      	ldr	r3, [pc, #388]	; (80052bc <HAL_TIM_PeriodElapsedCallback+0xac8>)
 8005136:	789b      	ldrb	r3, [r3, #2]
 8005138:	429a      	cmp	r2, r3
 800513a:	d000      	beq.n	800513e <HAL_TIM_PeriodElapsedCallback+0x94a>
 800513c:	e1d4      	b.n	80054e8 <HAL_TIM_PeriodElapsedCallback+0xcf4>
								&& sCommand[7] == cPin[3]) {
 800513e:	4b5e      	ldr	r3, [pc, #376]	; (80052b8 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 8005140:	185b      	adds	r3, r3, r1
 8005142:	2218      	movs	r2, #24
 8005144:	4694      	mov	ip, r2
 8005146:	44bc      	add	ip, r7
 8005148:	4463      	add	r3, ip
 800514a:	79da      	ldrb	r2, [r3, #7]
 800514c:	4b5b      	ldr	r3, [pc, #364]	; (80052bc <HAL_TIM_PeriodElapsedCallback+0xac8>)
 800514e:	78db      	ldrb	r3, [r3, #3]
 8005150:	429a      	cmp	r2, r3
 8005152:	d000      	beq.n	8005156 <HAL_TIM_PeriodElapsedCallback+0x962>
 8005154:	e1c8      	b.n	80054e8 <HAL_TIM_PeriodElapsedCallback+0xcf4>
									//old PIN is valid!!!
									//---set new pin
									cPin[0] = sCommand[8];
 8005156:	4b58      	ldr	r3, [pc, #352]	; (80052b8 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 8005158:	185b      	adds	r3, r3, r1
 800515a:	2218      	movs	r2, #24
 800515c:	4694      	mov	ip, r2
 800515e:	44bc      	add	ip, r7
 8005160:	4463      	add	r3, ip
 8005162:	7a1a      	ldrb	r2, [r3, #8]
 8005164:	4b55      	ldr	r3, [pc, #340]	; (80052bc <HAL_TIM_PeriodElapsedCallback+0xac8>)
 8005166:	701a      	strb	r2, [r3, #0]
									cPin[1] = sCommand[9];
 8005168:	4b53      	ldr	r3, [pc, #332]	; (80052b8 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 800516a:	185b      	adds	r3, r3, r1
 800516c:	2218      	movs	r2, #24
 800516e:	4694      	mov	ip, r2
 8005170:	44bc      	add	ip, r7
 8005172:	4463      	add	r3, ip
 8005174:	7a5a      	ldrb	r2, [r3, #9]
 8005176:	4b51      	ldr	r3, [pc, #324]	; (80052bc <HAL_TIM_PeriodElapsedCallback+0xac8>)
 8005178:	705a      	strb	r2, [r3, #1]
									cPin[2] = sCommand[10];
 800517a:	4b4f      	ldr	r3, [pc, #316]	; (80052b8 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 800517c:	185b      	adds	r3, r3, r1
 800517e:	2218      	movs	r2, #24
 8005180:	4694      	mov	ip, r2
 8005182:	44bc      	add	ip, r7
 8005184:	4463      	add	r3, ip
 8005186:	7a9a      	ldrb	r2, [r3, #10]
 8005188:	4b4c      	ldr	r3, [pc, #304]	; (80052bc <HAL_TIM_PeriodElapsedCallback+0xac8>)
 800518a:	709a      	strb	r2, [r3, #2]
									cPin[3] = sCommand[11];
 800518c:	4b4a      	ldr	r3, [pc, #296]	; (80052b8 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 800518e:	185b      	adds	r3, r3, r1
 8005190:	2218      	movs	r2, #24
 8005192:	4694      	mov	ip, r2
 8005194:	44bc      	add	ip, r7
 8005196:	4463      	add	r3, ip
 8005198:	7ada      	ldrb	r2, [r3, #11]
 800519a:	4b48      	ldr	r3, [pc, #288]	; (80052bc <HAL_TIM_PeriodElapsedCallback+0xac8>)
 800519c:	70da      	strb	r2, [r3, #3]
									//---saving to flash memory
									save_to_flash(0);
 800519e:	2000      	movs	r0, #0
 80051a0:	f001 faa4 	bl	80066ec <save_to_flash>
								if (sCommand[4] == cPin[0]
 80051a4:	e1a0      	b.n	80054e8 <HAL_TIM_PeriodElapsedCallback+0xcf4>
									//printf("NEW PIN set \n");
								}
							} else if (sCommand[0] == 'W'
 80051a6:	4b44      	ldr	r3, [pc, #272]	; (80052b8 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 80051a8:	22a4      	movs	r2, #164	; 0xa4
 80051aa:	0052      	lsls	r2, r2, #1
 80051ac:	189b      	adds	r3, r3, r2
 80051ae:	2118      	movs	r1, #24
 80051b0:	468c      	mov	ip, r1
 80051b2:	44bc      	add	ip, r7
 80051b4:	4463      	add	r3, ip
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	2b57      	cmp	r3, #87	; 0x57
 80051ba:	d12e      	bne.n	800521a <HAL_TIM_PeriodElapsedCallback+0xa26>
									&& sCommand[1] == 'H'
 80051bc:	4b3e      	ldr	r3, [pc, #248]	; (80052b8 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 80051be:	189b      	adds	r3, r3, r2
 80051c0:	2118      	movs	r1, #24
 80051c2:	468c      	mov	ip, r1
 80051c4:	44bc      	add	ip, r7
 80051c6:	4463      	add	r3, ip
 80051c8:	785b      	ldrb	r3, [r3, #1]
 80051ca:	2b48      	cmp	r3, #72	; 0x48
 80051cc:	d125      	bne.n	800521a <HAL_TIM_PeriodElapsedCallback+0xa26>
									&& sCommand[2] == 'E'
 80051ce:	4b3a      	ldr	r3, [pc, #232]	; (80052b8 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 80051d0:	189b      	adds	r3, r3, r2
 80051d2:	2118      	movs	r1, #24
 80051d4:	468c      	mov	ip, r1
 80051d6:	44bc      	add	ip, r7
 80051d8:	4463      	add	r3, ip
 80051da:	789b      	ldrb	r3, [r3, #2]
 80051dc:	2b45      	cmp	r3, #69	; 0x45
 80051de:	d11c      	bne.n	800521a <HAL_TIM_PeriodElapsedCallback+0xa26>
									&& sCommand[3] == 'R'
 80051e0:	4b35      	ldr	r3, [pc, #212]	; (80052b8 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 80051e2:	189b      	adds	r3, r3, r2
 80051e4:	2118      	movs	r1, #24
 80051e6:	468c      	mov	ip, r1
 80051e8:	44bc      	add	ip, r7
 80051ea:	4463      	add	r3, ip
 80051ec:	78db      	ldrb	r3, [r3, #3]
 80051ee:	2b52      	cmp	r3, #82	; 0x52
 80051f0:	d113      	bne.n	800521a <HAL_TIM_PeriodElapsedCallback+0xa26>
									&& sCommand[4] == 'E'
 80051f2:	4b31      	ldr	r3, [pc, #196]	; (80052b8 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 80051f4:	189b      	adds	r3, r3, r2
 80051f6:	2218      	movs	r2, #24
 80051f8:	4694      	mov	ip, r2
 80051fa:	44bc      	add	ip, r7
 80051fc:	4463      	add	r3, ip
 80051fe:	791b      	ldrb	r3, [r3, #4]
 8005200:	2b45      	cmp	r3, #69	; 0x45
 8005202:	d10a      	bne.n	800521a <HAL_TIM_PeriodElapsedCallback+0xa26>
									&& isOwner == 1) {
 8005204:	23f0      	movs	r3, #240	; 0xf0
 8005206:	2218      	movs	r2, #24
 8005208:	189b      	adds	r3, r3, r2
 800520a:	19db      	adds	r3, r3, r7
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	2b01      	cmp	r3, #1
 8005210:	d103      	bne.n	800521a <HAL_TIM_PeriodElapsedCallback+0xa26>
								//WHERE API REQUEST RECEIVED
								isWhereApiCalled = 1;
 8005212:	4b2d      	ldr	r3, [pc, #180]	; (80052c8 <HAL_TIM_PeriodElapsedCallback+0xad4>)
 8005214:	2201      	movs	r2, #1
 8005216:	701a      	strb	r2, [r3, #0]
 8005218:	e167      	b.n	80054ea <HAL_TIM_PeriodElapsedCallback+0xcf6>
							} else if (sCommand[0] == 'S'
 800521a:	4b27      	ldr	r3, [pc, #156]	; (80052b8 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 800521c:	22a4      	movs	r2, #164	; 0xa4
 800521e:	0052      	lsls	r2, r2, #1
 8005220:	189b      	adds	r3, r3, r2
 8005222:	2118      	movs	r1, #24
 8005224:	468c      	mov	ip, r1
 8005226:	44bc      	add	ip, r7
 8005228:	4463      	add	r3, ip
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	2b53      	cmp	r3, #83	; 0x53
 800522e:	d14d      	bne.n	80052cc <HAL_TIM_PeriodElapsedCallback+0xad8>
									&& sCommand[1] == 'E'
 8005230:	4b21      	ldr	r3, [pc, #132]	; (80052b8 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 8005232:	189b      	adds	r3, r3, r2
 8005234:	2118      	movs	r1, #24
 8005236:	468c      	mov	ip, r1
 8005238:	44bc      	add	ip, r7
 800523a:	4463      	add	r3, ip
 800523c:	785b      	ldrb	r3, [r3, #1]
 800523e:	2b45      	cmp	r3, #69	; 0x45
 8005240:	d144      	bne.n	80052cc <HAL_TIM_PeriodElapsedCallback+0xad8>
									&& sCommand[2] == 'R'
 8005242:	4b1d      	ldr	r3, [pc, #116]	; (80052b8 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 8005244:	189b      	adds	r3, r3, r2
 8005246:	2118      	movs	r1, #24
 8005248:	468c      	mov	ip, r1
 800524a:	44bc      	add	ip, r7
 800524c:	4463      	add	r3, ip
 800524e:	789b      	ldrb	r3, [r3, #2]
 8005250:	2b52      	cmp	r3, #82	; 0x52
 8005252:	d13b      	bne.n	80052cc <HAL_TIM_PeriodElapsedCallback+0xad8>
									&& sCommand[3] == 'V'
 8005254:	4b18      	ldr	r3, [pc, #96]	; (80052b8 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 8005256:	189b      	adds	r3, r3, r2
 8005258:	2118      	movs	r1, #24
 800525a:	468c      	mov	ip, r1
 800525c:	44bc      	add	ip, r7
 800525e:	4463      	add	r3, ip
 8005260:	78db      	ldrb	r3, [r3, #3]
 8005262:	2b56      	cmp	r3, #86	; 0x56
 8005264:	d132      	bne.n	80052cc <HAL_TIM_PeriodElapsedCallback+0xad8>
									&& sCommand[4] == 'E'
 8005266:	4b14      	ldr	r3, [pc, #80]	; (80052b8 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 8005268:	189b      	adds	r3, r3, r2
 800526a:	2118      	movs	r1, #24
 800526c:	468c      	mov	ip, r1
 800526e:	44bc      	add	ip, r7
 8005270:	4463      	add	r3, ip
 8005272:	791b      	ldrb	r3, [r3, #4]
 8005274:	2b45      	cmp	r3, #69	; 0x45
 8005276:	d129      	bne.n	80052cc <HAL_TIM_PeriodElapsedCallback+0xad8>
									&& sCommand[5] == 'R'
 8005278:	4b0f      	ldr	r3, [pc, #60]	; (80052b8 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 800527a:	189b      	adds	r3, r3, r2
 800527c:	2118      	movs	r1, #24
 800527e:	468c      	mov	ip, r1
 8005280:	44bc      	add	ip, r7
 8005282:	4463      	add	r3, ip
 8005284:	795b      	ldrb	r3, [r3, #5]
 8005286:	2b52      	cmp	r3, #82	; 0x52
 8005288:	d120      	bne.n	80052cc <HAL_TIM_PeriodElapsedCallback+0xad8>
									&& sCommand[6] == ','
 800528a:	4b0b      	ldr	r3, [pc, #44]	; (80052b8 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 800528c:	189b      	adds	r3, r3, r2
 800528e:	2218      	movs	r2, #24
 8005290:	4694      	mov	ip, r2
 8005292:	44bc      	add	ip, r7
 8005294:	4463      	add	r3, ip
 8005296:	799b      	ldrb	r3, [r3, #6]
 8005298:	2b2c      	cmp	r3, #44	; 0x2c
 800529a:	d117      	bne.n	80052cc <HAL_TIM_PeriodElapsedCallback+0xad8>
									&& isOwner == 1) {
 800529c:	23f0      	movs	r3, #240	; 0xf0
 800529e:	2218      	movs	r2, #24
 80052a0:	189b      	adds	r3, r3, r2
 80052a2:	19db      	adds	r3, r3, r7
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d110      	bne.n	80052cc <HAL_TIM_PeriodElapsedCallback+0xad8>
								//SERVER CONFIG COMMAND RECEIVED
								check_command_SERVER(sCommand);///handle the SERVER CONFIG COMMAND
 80052aa:	2340      	movs	r3, #64	; 0x40
 80052ac:	189b      	adds	r3, r3, r2
 80052ae:	19db      	adds	r3, r3, r7
 80052b0:	0018      	movs	r0, r3
 80052b2:	f003 f8ab 	bl	800840c <check_command_SERVER>
 80052b6:	e118      	b.n	80054ea <HAL_TIM_PeriodElapsedCallback+0xcf6>
 80052b8:	fffffef8 	.word	0xfffffef8
 80052bc:	20000014 	.word	0x20000014
 80052c0:	20000008 	.word	0x20000008
 80052c4:	2000076a 	.word	0x2000076a
 80052c8:	20000a7a 	.word	0x20000a7a

							} else if (sCommand[0] == 'T'
 80052cc:	4bcf      	ldr	r3, [pc, #828]	; (800560c <HAL_TIM_PeriodElapsedCallback+0xe18>)
 80052ce:	22a4      	movs	r2, #164	; 0xa4
 80052d0:	0052      	lsls	r2, r2, #1
 80052d2:	189b      	adds	r3, r3, r2
 80052d4:	2118      	movs	r1, #24
 80052d6:	468c      	mov	ip, r1
 80052d8:	44bc      	add	ip, r7
 80052da:	4463      	add	r3, ip
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	2b54      	cmp	r3, #84	; 0x54
 80052e0:	d13a      	bne.n	8005358 <HAL_TIM_PeriodElapsedCallback+0xb64>
									&& sCommand[1] == 'I'
 80052e2:	4bca      	ldr	r3, [pc, #808]	; (800560c <HAL_TIM_PeriodElapsedCallback+0xe18>)
 80052e4:	189b      	adds	r3, r3, r2
 80052e6:	2118      	movs	r1, #24
 80052e8:	468c      	mov	ip, r1
 80052ea:	44bc      	add	ip, r7
 80052ec:	4463      	add	r3, ip
 80052ee:	785b      	ldrb	r3, [r3, #1]
 80052f0:	2b49      	cmp	r3, #73	; 0x49
 80052f2:	d131      	bne.n	8005358 <HAL_TIM_PeriodElapsedCallback+0xb64>
									&& sCommand[2] == 'M'
 80052f4:	4bc5      	ldr	r3, [pc, #788]	; (800560c <HAL_TIM_PeriodElapsedCallback+0xe18>)
 80052f6:	189b      	adds	r3, r3, r2
 80052f8:	2118      	movs	r1, #24
 80052fa:	468c      	mov	ip, r1
 80052fc:	44bc      	add	ip, r7
 80052fe:	4463      	add	r3, ip
 8005300:	789b      	ldrb	r3, [r3, #2]
 8005302:	2b4d      	cmp	r3, #77	; 0x4d
 8005304:	d128      	bne.n	8005358 <HAL_TIM_PeriodElapsedCallback+0xb64>
									&& sCommand[3] == 'E'
 8005306:	4bc1      	ldr	r3, [pc, #772]	; (800560c <HAL_TIM_PeriodElapsedCallback+0xe18>)
 8005308:	189b      	adds	r3, r3, r2
 800530a:	2118      	movs	r1, #24
 800530c:	468c      	mov	ip, r1
 800530e:	44bc      	add	ip, r7
 8005310:	4463      	add	r3, ip
 8005312:	78db      	ldrb	r3, [r3, #3]
 8005314:	2b45      	cmp	r3, #69	; 0x45
 8005316:	d11f      	bne.n	8005358 <HAL_TIM_PeriodElapsedCallback+0xb64>
									&& sCommand[4] == 'R'
 8005318:	4bbc      	ldr	r3, [pc, #752]	; (800560c <HAL_TIM_PeriodElapsedCallback+0xe18>)
 800531a:	189b      	adds	r3, r3, r2
 800531c:	2118      	movs	r1, #24
 800531e:	468c      	mov	ip, r1
 8005320:	44bc      	add	ip, r7
 8005322:	4463      	add	r3, ip
 8005324:	791b      	ldrb	r3, [r3, #4]
 8005326:	2b52      	cmp	r3, #82	; 0x52
 8005328:	d116      	bne.n	8005358 <HAL_TIM_PeriodElapsedCallback+0xb64>
									&& sCommand[5] == ','
 800532a:	4bb8      	ldr	r3, [pc, #736]	; (800560c <HAL_TIM_PeriodElapsedCallback+0xe18>)
 800532c:	189b      	adds	r3, r3, r2
 800532e:	2218      	movs	r2, #24
 8005330:	4694      	mov	ip, r2
 8005332:	44bc      	add	ip, r7
 8005334:	4463      	add	r3, ip
 8005336:	795b      	ldrb	r3, [r3, #5]
 8005338:	2b2c      	cmp	r3, #44	; 0x2c
 800533a:	d10d      	bne.n	8005358 <HAL_TIM_PeriodElapsedCallback+0xb64>
									&& isOwner == 1) {
 800533c:	23f0      	movs	r3, #240	; 0xf0
 800533e:	2218      	movs	r2, #24
 8005340:	189b      	adds	r3, r3, r2
 8005342:	19db      	adds	r3, r3, r7
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	2b01      	cmp	r3, #1
 8005348:	d106      	bne.n	8005358 <HAL_TIM_PeriodElapsedCallback+0xb64>
								//TIMER CONFIG COMMAND RECEIVED
								check_command_TIMER(sCommand);///handle the TIMER CONFIG COMMAND
 800534a:	2340      	movs	r3, #64	; 0x40
 800534c:	189b      	adds	r3, r3, r2
 800534e:	19db      	adds	r3, r3, r7
 8005350:	0018      	movs	r0, r3
 8005352:	f003 f93d 	bl	80085d0 <check_command_TIMER>
 8005356:	e0c8      	b.n	80054ea <HAL_TIM_PeriodElapsedCallback+0xcf6>

							} else if (sCommand[0] == 'M'
 8005358:	4bac      	ldr	r3, [pc, #688]	; (800560c <HAL_TIM_PeriodElapsedCallback+0xe18>)
 800535a:	22a4      	movs	r2, #164	; 0xa4
 800535c:	0052      	lsls	r2, r2, #1
 800535e:	189b      	adds	r3, r3, r2
 8005360:	2118      	movs	r1, #24
 8005362:	468c      	mov	ip, r1
 8005364:	44bc      	add	ip, r7
 8005366:	4463      	add	r3, ip
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	2b4d      	cmp	r3, #77	; 0x4d
 800536c:	d143      	bne.n	80053f6 <HAL_TIM_PeriodElapsedCallback+0xc02>
									&& sCommand[1] == 'S'
 800536e:	4ba7      	ldr	r3, [pc, #668]	; (800560c <HAL_TIM_PeriodElapsedCallback+0xe18>)
 8005370:	189b      	adds	r3, r3, r2
 8005372:	2118      	movs	r1, #24
 8005374:	468c      	mov	ip, r1
 8005376:	44bc      	add	ip, r7
 8005378:	4463      	add	r3, ip
 800537a:	785b      	ldrb	r3, [r3, #1]
 800537c:	2b53      	cmp	r3, #83	; 0x53
 800537e:	d13a      	bne.n	80053f6 <HAL_TIM_PeriodElapsedCallback+0xc02>
									&& sCommand[2] == 'G'
 8005380:	4ba2      	ldr	r3, [pc, #648]	; (800560c <HAL_TIM_PeriodElapsedCallback+0xe18>)
 8005382:	189b      	adds	r3, r3, r2
 8005384:	2118      	movs	r1, #24
 8005386:	468c      	mov	ip, r1
 8005388:	44bc      	add	ip, r7
 800538a:	4463      	add	r3, ip
 800538c:	789b      	ldrb	r3, [r3, #2]
 800538e:	2b47      	cmp	r3, #71	; 0x47
 8005390:	d131      	bne.n	80053f6 <HAL_TIM_PeriodElapsedCallback+0xc02>
									&& sCommand[3] == 'C'
 8005392:	4b9e      	ldr	r3, [pc, #632]	; (800560c <HAL_TIM_PeriodElapsedCallback+0xe18>)
 8005394:	189b      	adds	r3, r3, r2
 8005396:	2118      	movs	r1, #24
 8005398:	468c      	mov	ip, r1
 800539a:	44bc      	add	ip, r7
 800539c:	4463      	add	r3, ip
 800539e:	78db      	ldrb	r3, [r3, #3]
 80053a0:	2b43      	cmp	r3, #67	; 0x43
 80053a2:	d128      	bne.n	80053f6 <HAL_TIM_PeriodElapsedCallback+0xc02>
									&& sCommand[4] == 'F'
 80053a4:	4b99      	ldr	r3, [pc, #612]	; (800560c <HAL_TIM_PeriodElapsedCallback+0xe18>)
 80053a6:	189b      	adds	r3, r3, r2
 80053a8:	2118      	movs	r1, #24
 80053aa:	468c      	mov	ip, r1
 80053ac:	44bc      	add	ip, r7
 80053ae:	4463      	add	r3, ip
 80053b0:	791b      	ldrb	r3, [r3, #4]
 80053b2:	2b46      	cmp	r3, #70	; 0x46
 80053b4:	d11f      	bne.n	80053f6 <HAL_TIM_PeriodElapsedCallback+0xc02>
									&& sCommand[5] == 'G'
 80053b6:	4b95      	ldr	r3, [pc, #596]	; (800560c <HAL_TIM_PeriodElapsedCallback+0xe18>)
 80053b8:	189b      	adds	r3, r3, r2
 80053ba:	2118      	movs	r1, #24
 80053bc:	468c      	mov	ip, r1
 80053be:	44bc      	add	ip, r7
 80053c0:	4463      	add	r3, ip
 80053c2:	795b      	ldrb	r3, [r3, #5]
 80053c4:	2b47      	cmp	r3, #71	; 0x47
 80053c6:	d116      	bne.n	80053f6 <HAL_TIM_PeriodElapsedCallback+0xc02>
									&& sCommand[6] == ','
 80053c8:	4b90      	ldr	r3, [pc, #576]	; (800560c <HAL_TIM_PeriodElapsedCallback+0xe18>)
 80053ca:	189b      	adds	r3, r3, r2
 80053cc:	2218      	movs	r2, #24
 80053ce:	4694      	mov	ip, r2
 80053d0:	44bc      	add	ip, r7
 80053d2:	4463      	add	r3, ip
 80053d4:	799b      	ldrb	r3, [r3, #6]
 80053d6:	2b2c      	cmp	r3, #44	; 0x2c
 80053d8:	d10d      	bne.n	80053f6 <HAL_TIM_PeriodElapsedCallback+0xc02>
									&& isOwner == 1) {
 80053da:	23f0      	movs	r3, #240	; 0xf0
 80053dc:	2218      	movs	r2, #24
 80053de:	189b      	adds	r3, r3, r2
 80053e0:	19db      	adds	r3, r3, r7
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d106      	bne.n	80053f6 <HAL_TIM_PeriodElapsedCallback+0xc02>
								//MSGCFG CONFIG COMMAND RECEIVED
								check_command_MSGCFG(sCommand);///handle the TIMER CONFIG COMMAND
 80053e8:	2340      	movs	r3, #64	; 0x40
 80053ea:	189b      	adds	r3, r3, r2
 80053ec:	19db      	adds	r3, r3, r7
 80053ee:	0018      	movs	r0, r3
 80053f0:	f003 f9ee 	bl	80087d0 <check_command_MSGCFG>
 80053f4:	e079      	b.n	80054ea <HAL_TIM_PeriodElapsedCallback+0xcf6>
							} else if (sCommand[0] == 'R'
 80053f6:	4b85      	ldr	r3, [pc, #532]	; (800560c <HAL_TIM_PeriodElapsedCallback+0xe18>)
 80053f8:	22a4      	movs	r2, #164	; 0xa4
 80053fa:	0052      	lsls	r2, r2, #1
 80053fc:	189b      	adds	r3, r3, r2
 80053fe:	2118      	movs	r1, #24
 8005400:	468c      	mov	ip, r1
 8005402:	44bc      	add	ip, r7
 8005404:	4463      	add	r3, ip
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	2b52      	cmp	r3, #82	; 0x52
 800540a:	d13a      	bne.n	8005482 <HAL_TIM_PeriodElapsedCallback+0xc8e>
									&& sCommand[1] == 'E'
 800540c:	4b7f      	ldr	r3, [pc, #508]	; (800560c <HAL_TIM_PeriodElapsedCallback+0xe18>)
 800540e:	189b      	adds	r3, r3, r2
 8005410:	2118      	movs	r1, #24
 8005412:	468c      	mov	ip, r1
 8005414:	44bc      	add	ip, r7
 8005416:	4463      	add	r3, ip
 8005418:	785b      	ldrb	r3, [r3, #1]
 800541a:	2b45      	cmp	r3, #69	; 0x45
 800541c:	d131      	bne.n	8005482 <HAL_TIM_PeriodElapsedCallback+0xc8e>
									&& sCommand[2] == 'L'
 800541e:	4b7b      	ldr	r3, [pc, #492]	; (800560c <HAL_TIM_PeriodElapsedCallback+0xe18>)
 8005420:	189b      	adds	r3, r3, r2
 8005422:	2118      	movs	r1, #24
 8005424:	468c      	mov	ip, r1
 8005426:	44bc      	add	ip, r7
 8005428:	4463      	add	r3, ip
 800542a:	789b      	ldrb	r3, [r3, #2]
 800542c:	2b4c      	cmp	r3, #76	; 0x4c
 800542e:	d128      	bne.n	8005482 <HAL_TIM_PeriodElapsedCallback+0xc8e>
									&& sCommand[3] == 'A'
 8005430:	4b76      	ldr	r3, [pc, #472]	; (800560c <HAL_TIM_PeriodElapsedCallback+0xe18>)
 8005432:	189b      	adds	r3, r3, r2
 8005434:	2118      	movs	r1, #24
 8005436:	468c      	mov	ip, r1
 8005438:	44bc      	add	ip, r7
 800543a:	4463      	add	r3, ip
 800543c:	78db      	ldrb	r3, [r3, #3]
 800543e:	2b41      	cmp	r3, #65	; 0x41
 8005440:	d11f      	bne.n	8005482 <HAL_TIM_PeriodElapsedCallback+0xc8e>
									&& sCommand[4] == 'Y'
 8005442:	4b72      	ldr	r3, [pc, #456]	; (800560c <HAL_TIM_PeriodElapsedCallback+0xe18>)
 8005444:	189b      	adds	r3, r3, r2
 8005446:	2118      	movs	r1, #24
 8005448:	468c      	mov	ip, r1
 800544a:	44bc      	add	ip, r7
 800544c:	4463      	add	r3, ip
 800544e:	791b      	ldrb	r3, [r3, #4]
 8005450:	2b59      	cmp	r3, #89	; 0x59
 8005452:	d116      	bne.n	8005482 <HAL_TIM_PeriodElapsedCallback+0xc8e>
									&& sCommand[5] == ','
 8005454:	4b6d      	ldr	r3, [pc, #436]	; (800560c <HAL_TIM_PeriodElapsedCallback+0xe18>)
 8005456:	189b      	adds	r3, r3, r2
 8005458:	2218      	movs	r2, #24
 800545a:	4694      	mov	ip, r2
 800545c:	44bc      	add	ip, r7
 800545e:	4463      	add	r3, ip
 8005460:	795b      	ldrb	r3, [r3, #5]
 8005462:	2b2c      	cmp	r3, #44	; 0x2c
 8005464:	d10d      	bne.n	8005482 <HAL_TIM_PeriodElapsedCallback+0xc8e>
									&& isOwner == 1) {
 8005466:	23f0      	movs	r3, #240	; 0xf0
 8005468:	2218      	movs	r2, #24
 800546a:	189b      	adds	r3, r3, r2
 800546c:	19db      	adds	r3, r3, r7
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	2b01      	cmp	r3, #1
 8005472:	d106      	bne.n	8005482 <HAL_TIM_PeriodElapsedCallback+0xc8e>
								//TIMER CONFIG COMMAND RECEIVED
								check_command_RELAY(sCommand);///handle the TIMER CONFIG COMMAND
 8005474:	2340      	movs	r3, #64	; 0x40
 8005476:	189b      	adds	r3, r3, r2
 8005478:	19db      	adds	r3, r3, r7
 800547a:	0018      	movs	r0, r3
 800547c:	f003 f86c 	bl	8008558 <check_command_RELAY>
 8005480:	e033      	b.n	80054ea <HAL_TIM_PeriodElapsedCallback+0xcf6>
							} else if (sCommand[0] == 'I'
 8005482:	4b62      	ldr	r3, [pc, #392]	; (800560c <HAL_TIM_PeriodElapsedCallback+0xe18>)
 8005484:	22a4      	movs	r2, #164	; 0xa4
 8005486:	0052      	lsls	r2, r2, #1
 8005488:	189b      	adds	r3, r3, r2
 800548a:	2118      	movs	r1, #24
 800548c:	468c      	mov	ip, r1
 800548e:	44bc      	add	ip, r7
 8005490:	4463      	add	r3, ip
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	2b49      	cmp	r3, #73	; 0x49
 8005496:	d128      	bne.n	80054ea <HAL_TIM_PeriodElapsedCallback+0xcf6>
									&& sCommand[1] == 'N'
 8005498:	4b5c      	ldr	r3, [pc, #368]	; (800560c <HAL_TIM_PeriodElapsedCallback+0xe18>)
 800549a:	189b      	adds	r3, r3, r2
 800549c:	2118      	movs	r1, #24
 800549e:	468c      	mov	ip, r1
 80054a0:	44bc      	add	ip, r7
 80054a2:	4463      	add	r3, ip
 80054a4:	785b      	ldrb	r3, [r3, #1]
 80054a6:	2b4e      	cmp	r3, #78	; 0x4e
 80054a8:	d11f      	bne.n	80054ea <HAL_TIM_PeriodElapsedCallback+0xcf6>
									&& sCommand[2] == 'F'
 80054aa:	4b58      	ldr	r3, [pc, #352]	; (800560c <HAL_TIM_PeriodElapsedCallback+0xe18>)
 80054ac:	189b      	adds	r3, r3, r2
 80054ae:	2118      	movs	r1, #24
 80054b0:	468c      	mov	ip, r1
 80054b2:	44bc      	add	ip, r7
 80054b4:	4463      	add	r3, ip
 80054b6:	789b      	ldrb	r3, [r3, #2]
 80054b8:	2b46      	cmp	r3, #70	; 0x46
 80054ba:	d116      	bne.n	80054ea <HAL_TIM_PeriodElapsedCallback+0xcf6>
									&& sCommand[3] == 'O'
 80054bc:	4b53      	ldr	r3, [pc, #332]	; (800560c <HAL_TIM_PeriodElapsedCallback+0xe18>)
 80054be:	189b      	adds	r3, r3, r2
 80054c0:	2218      	movs	r2, #24
 80054c2:	4694      	mov	ip, r2
 80054c4:	44bc      	add	ip, r7
 80054c6:	4463      	add	r3, ip
 80054c8:	78db      	ldrb	r3, [r3, #3]
 80054ca:	2b4f      	cmp	r3, #79	; 0x4f
 80054cc:	d10d      	bne.n	80054ea <HAL_TIM_PeriodElapsedCallback+0xcf6>
									&& isOwner == 1) {
 80054ce:	23f0      	movs	r3, #240	; 0xf0
 80054d0:	2218      	movs	r2, #24
 80054d2:	189b      	adds	r3, r3, r2
 80054d4:	19db      	adds	r3, r3, r7
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d106      	bne.n	80054ea <HAL_TIM_PeriodElapsedCallback+0xcf6>
								//INFO COMMAND RECEIVED
								isIMEIApiCalled = 1;
 80054dc:	4b4c      	ldr	r3, [pc, #304]	; (8005610 <HAL_TIM_PeriodElapsedCallback+0xe1c>)
 80054de:	2201      	movs	r2, #1
 80054e0:	701a      	strb	r2, [r3, #0]
 80054e2:	e002      	b.n	80054ea <HAL_TIM_PeriodElapsedCallback+0xcf6>
								if(sCommand[14] == cPin[0]
 80054e4:	46c0      	nop			; (mov r8, r8)
 80054e6:	e000      	b.n	80054ea <HAL_TIM_PeriodElapsedCallback+0xcf6>
								if (sCommand[4] == cPin[0]
 80054e8:	46c0      	nop			; (mov r8, r8)
							}
						}
					}
				}
				clearit();
 80054ea:	f001 fcf1 	bl	8006ed0 <clearit>
			}

		}
		if (commandCase == 0) {
 80054ee:	4b49      	ldr	r3, [pc, #292]	; (8005614 <HAL_TIM_PeriodElapsedCallback+0xe20>)
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d174      	bne.n	80055e2 <HAL_TIM_PeriodElapsedCallback+0xdee>
			char *ptr;
			char *ptr2;
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 80054f8:	2336      	movs	r3, #54	; 0x36
 80054fa:	33ff      	adds	r3, #255	; 0xff
 80054fc:	2218      	movs	r2, #24
 80054fe:	189b      	adds	r3, r3, r2
 8005500:	19db      	adds	r3, r3, r7
 8005502:	2200      	movs	r2, #0
 8005504:	701a      	strb	r2, [r3, #0]
 8005506:	e04e      	b.n	80055a6 <HAL_TIM_PeriodElapsedCallback+0xdb2>
				ptr = strstr(responseBuffer[i], "CLOSED");
 8005508:	2436      	movs	r4, #54	; 0x36
 800550a:	34ff      	adds	r4, #255	; 0xff
 800550c:	2618      	movs	r6, #24
 800550e:	19a3      	adds	r3, r4, r6
 8005510:	19db      	adds	r3, r3, r7
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	2232      	movs	r2, #50	; 0x32
 8005516:	435a      	muls	r2, r3
 8005518:	4b3f      	ldr	r3, [pc, #252]	; (8005618 <HAL_TIM_PeriodElapsedCallback+0xe24>)
 800551a:	18d3      	adds	r3, r2, r3
 800551c:	4a3f      	ldr	r2, [pc, #252]	; (800561c <HAL_TIM_PeriodElapsedCallback+0xe28>)
 800551e:	0011      	movs	r1, r2
 8005520:	0018      	movs	r0, r3
 8005522:	f009 fdc8 	bl	800f0b6 <strstr>
 8005526:	0003      	movs	r3, r0
 8005528:	2598      	movs	r5, #152	; 0x98
 800552a:	19aa      	adds	r2, r5, r6
 800552c:	19d2      	adds	r2, r2, r7
 800552e:	6013      	str	r3, [r2, #0]
				ptr2 = strstr(responseBuffer[i], "+PDP DEACT");
 8005530:	19a3      	adds	r3, r4, r6
 8005532:	19db      	adds	r3, r3, r7
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	2232      	movs	r2, #50	; 0x32
 8005538:	435a      	muls	r2, r3
 800553a:	4b37      	ldr	r3, [pc, #220]	; (8005618 <HAL_TIM_PeriodElapsedCallback+0xe24>)
 800553c:	18d3      	adds	r3, r2, r3
 800553e:	4a38      	ldr	r2, [pc, #224]	; (8005620 <HAL_TIM_PeriodElapsedCallback+0xe2c>)
 8005540:	0011      	movs	r1, r2
 8005542:	0018      	movs	r0, r3
 8005544:	f009 fdb7 	bl	800f0b6 <strstr>
 8005548:	0003      	movs	r3, r0
 800554a:	2294      	movs	r2, #148	; 0x94
 800554c:	1992      	adds	r2, r2, r6
 800554e:	19d2      	adds	r2, r2, r7
 8005550:	6013      	str	r3, [r2, #0]
				if (ptr != NULL) {
 8005552:	19ab      	adds	r3, r5, r6
 8005554:	19db      	adds	r3, r3, r7
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d009      	beq.n	8005570 <HAL_TIM_PeriodElapsedCallback+0xd7c>
					// HAL_UART_Transmit(&huart4, "closed recv",
					// sizeof("closed recv"), 100);

					isLoggedIn = 0;
 800555c:	4b31      	ldr	r3, [pc, #196]	; (8005624 <HAL_TIM_PeriodElapsedCallback+0xe30>)
 800555e:	2200      	movs	r2, #0
 8005560:	701a      	strb	r2, [r3, #0]
					isDataMode = 0; //command mode activated
 8005562:	4b31      	ldr	r3, [pc, #196]	; (8005628 <HAL_TIM_PeriodElapsedCallback+0xe34>)
 8005564:	2200      	movs	r2, #0
 8005566:	701a      	strb	r2, [r3, #0]
					isTcpOpen = 0;
 8005568:	4b30      	ldr	r3, [pc, #192]	; (800562c <HAL_TIM_PeriodElapsedCallback+0xe38>)
 800556a:	2200      	movs	r2, #0
 800556c:	701a      	strb	r2, [r3, #0]
					break;
 800556e:	e022      	b.n	80055b6 <HAL_TIM_PeriodElapsedCallback+0xdc2>
				}
				if (ptr2 != NULL) {
 8005570:	2394      	movs	r3, #148	; 0x94
 8005572:	2218      	movs	r2, #24
 8005574:	189b      	adds	r3, r3, r2
 8005576:	19db      	adds	r3, r3, r7
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d009      	beq.n	8005592 <HAL_TIM_PeriodElapsedCallback+0xd9e>
					// HAL_UART_Transmit(&huart4, "pdp deact recv",
					// sizeof("pdp deact"), 100);
					isLoggedIn = 0;
 800557e:	4b29      	ldr	r3, [pc, #164]	; (8005624 <HAL_TIM_PeriodElapsedCallback+0xe30>)
 8005580:	2200      	movs	r2, #0
 8005582:	701a      	strb	r2, [r3, #0]
					isDataMode = 0; //command mode activated
 8005584:	4b28      	ldr	r3, [pc, #160]	; (8005628 <HAL_TIM_PeriodElapsedCallback+0xe34>)
 8005586:	2200      	movs	r2, #0
 8005588:	701a      	strb	r2, [r3, #0]
					isTcpOpen = 0;
 800558a:	4b28      	ldr	r3, [pc, #160]	; (800562c <HAL_TIM_PeriodElapsedCallback+0xe38>)
 800558c:	2200      	movs	r2, #0
 800558e:	701a      	strb	r2, [r3, #0]
					break;
 8005590:	e011      	b.n	80055b6 <HAL_TIM_PeriodElapsedCallback+0xdc2>
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 8005592:	2136      	movs	r1, #54	; 0x36
 8005594:	31ff      	adds	r1, #255	; 0xff
 8005596:	2018      	movs	r0, #24
 8005598:	180b      	adds	r3, r1, r0
 800559a:	19db      	adds	r3, r3, r7
 800559c:	781a      	ldrb	r2, [r3, #0]
 800559e:	180b      	adds	r3, r1, r0
 80055a0:	19db      	adds	r3, r3, r7
 80055a2:	3201      	adds	r2, #1
 80055a4:	701a      	strb	r2, [r3, #0]
 80055a6:	2336      	movs	r3, #54	; 0x36
 80055a8:	33ff      	adds	r3, #255	; 0xff
 80055aa:	2218      	movs	r2, #24
 80055ac:	189b      	adds	r3, r3, r2
 80055ae:	19db      	adds	r3, r3, r7
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	2b05      	cmp	r3, #5
 80055b4:	d9a8      	bls.n	8005508 <HAL_TIM_PeriodElapsedCallback+0xd14>
				}
			}
			HAL_TIM_Base_Stop_IT(&htim6);
 80055b6:	4b1e      	ldr	r3, [pc, #120]	; (8005630 <HAL_TIM_PeriodElapsedCallback+0xe3c>)
 80055b8:	0018      	movs	r0, r3
 80055ba:	f006 fe19 	bl	800c1f0 <HAL_TIM_Base_Stop_IT>
			memset(responseBuffer, 0, sizeof(responseBuffer));
 80055be:	2396      	movs	r3, #150	; 0x96
 80055c0:	005a      	lsls	r2, r3, #1
 80055c2:	4b15      	ldr	r3, [pc, #84]	; (8005618 <HAL_TIM_PeriodElapsedCallback+0xe24>)
 80055c4:	2100      	movs	r1, #0
 80055c6:	0018      	movs	r0, r3
 80055c8:	f009 fd1d 	bl	800f006 <memset>
			lineCount = 0;
 80055cc:	4b19      	ldr	r3, [pc, #100]	; (8005634 <HAL_TIM_PeriodElapsedCallback+0xe40>)
 80055ce:	2200      	movs	r2, #0
 80055d0:	701a      	strb	r2, [r3, #0]
			charCount = 0;
 80055d2:	4b19      	ldr	r3, [pc, #100]	; (8005638 <HAL_TIM_PeriodElapsedCallback+0xe44>)
 80055d4:	2200      	movs	r2, #0
 80055d6:	701a      	strb	r2, [r3, #0]
			isStart = 0;
 80055d8:	4b18      	ldr	r3, [pc, #96]	; (800563c <HAL_TIM_PeriodElapsedCallback+0xe48>)
 80055da:	2200      	movs	r2, #0
 80055dc:	701a      	strb	r2, [r3, #0]
		nmeaLC = 0;
		nmeaCC = 0;
		HAL_UART_Receive_IT(&GNSS_PORT, GNSS_BUFFER, 1);
		HAL_UART_Receive_IT(&GNSS_PORT, GNSS_BUFFER, 1);
	}
}
 80055de:	f001 f853 	bl	8006688 <HAL_TIM_PeriodElapsedCallback+0x1e94>
		else if (commandCase == 1) {
 80055e2:	4b0c      	ldr	r3, [pc, #48]	; (8005614 <HAL_TIM_PeriodElapsedCallback+0xe20>)
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d000      	beq.n	80055ee <HAL_TIM_PeriodElapsedCallback+0xdfa>
 80055ec:	e0d5      	b.n	800579a <HAL_TIM_PeriodElapsedCallback+0xfa6>
			uint8_t tLine = 99;
 80055ee:	239a      	movs	r3, #154	; 0x9a
 80055f0:	005b      	lsls	r3, r3, #1
 80055f2:	2118      	movs	r1, #24
 80055f4:	185b      	adds	r3, r3, r1
 80055f6:	19db      	adds	r3, r3, r7
 80055f8:	2263      	movs	r2, #99	; 0x63
 80055fa:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 80055fc:	2334      	movs	r3, #52	; 0x34
 80055fe:	33ff      	adds	r3, #255	; 0xff
 8005600:	185b      	adds	r3, r3, r1
 8005602:	19db      	adds	r3, r3, r7
 8005604:	2200      	movs	r2, #0
 8005606:	701a      	strb	r2, [r3, #0]
 8005608:	e076      	b.n	80056f8 <HAL_TIM_PeriodElapsedCallback+0xf04>
 800560a:	46c0      	nop			; (mov r8, r8)
 800560c:	fffffef8 	.word	0xfffffef8
 8005610:	20000a7b 	.word	0x20000a7b
 8005614:	200008cb 	.word	0x200008cb
 8005618:	20000794 	.word	0x20000794
 800561c:	080134dc 	.word	0x080134dc
 8005620:	080134e4 	.word	0x080134e4
 8005624:	20000a7c 	.word	0x20000a7c
 8005628:	200008c6 	.word	0x200008c6
 800562c:	20000a78 	.word	0x20000a78
 8005630:	20000398 	.word	0x20000398
 8005634:	200008c0 	.word	0x200008c0
 8005638:	200008c1 	.word	0x200008c1
 800563c:	200008c4 	.word	0x200008c4
				ptr = strstr(responseBuffer[i], "OK");
 8005640:	2434      	movs	r4, #52	; 0x34
 8005642:	34ff      	adds	r4, #255	; 0xff
 8005644:	2618      	movs	r6, #24
 8005646:	19a3      	adds	r3, r4, r6
 8005648:	19db      	adds	r3, r3, r7
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	2232      	movs	r2, #50	; 0x32
 800564e:	435a      	muls	r2, r3
 8005650:	4bdd      	ldr	r3, [pc, #884]	; (80059c8 <HAL_TIM_PeriodElapsedCallback+0x11d4>)
 8005652:	18d3      	adds	r3, r2, r3
 8005654:	4add      	ldr	r2, [pc, #884]	; (80059cc <HAL_TIM_PeriodElapsedCallback+0x11d8>)
 8005656:	0011      	movs	r1, r2
 8005658:	0018      	movs	r0, r3
 800565a:	f009 fd2c 	bl	800f0b6 <strstr>
 800565e:	0003      	movs	r3, r0
 8005660:	25a0      	movs	r5, #160	; 0xa0
 8005662:	19aa      	adds	r2, r5, r6
 8005664:	19d2      	adds	r2, r2, r7
 8005666:	6013      	str	r3, [r2, #0]
				ptr2 = strstr(responseBuffer[i], "ERROR");
 8005668:	19a3      	adds	r3, r4, r6
 800566a:	19db      	adds	r3, r3, r7
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	2232      	movs	r2, #50	; 0x32
 8005670:	435a      	muls	r2, r3
 8005672:	4bd5      	ldr	r3, [pc, #852]	; (80059c8 <HAL_TIM_PeriodElapsedCallback+0x11d4>)
 8005674:	18d3      	adds	r3, r2, r3
 8005676:	4ad6      	ldr	r2, [pc, #856]	; (80059d0 <HAL_TIM_PeriodElapsedCallback+0x11dc>)
 8005678:	0011      	movs	r1, r2
 800567a:	0018      	movs	r0, r3
 800567c:	f009 fd1b 	bl	800f0b6 <strstr>
 8005680:	0003      	movs	r3, r0
 8005682:	229c      	movs	r2, #156	; 0x9c
 8005684:	0031      	movs	r1, r6
 8005686:	1852      	adds	r2, r2, r1
 8005688:	19d2      	adds	r2, r2, r7
 800568a:	6013      	str	r3, [r2, #0]
				if (ptr != NULL) {
 800568c:	186b      	adds	r3, r5, r1
 800568e:	19db      	adds	r3, r3, r7
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00e      	beq.n	80056b4 <HAL_TIM_PeriodElapsedCallback+0xec0>
					tLine = i;
 8005696:	239a      	movs	r3, #154	; 0x9a
 8005698:	005b      	lsls	r3, r3, #1
 800569a:	185b      	adds	r3, r3, r1
 800569c:	19db      	adds	r3, r3, r7
 800569e:	1862      	adds	r2, r4, r1
 80056a0:	19d2      	adds	r2, r2, r7
 80056a2:	7812      	ldrb	r2, [r2, #0]
 80056a4:	701a      	strb	r2, [r3, #0]
					tResponse = 'G';
 80056a6:	2348      	movs	r3, #72	; 0x48
 80056a8:	33ff      	adds	r3, #255	; 0xff
 80056aa:	185b      	adds	r3, r3, r1
 80056ac:	19db      	adds	r3, r3, r7
 80056ae:	2247      	movs	r2, #71	; 0x47
 80056b0:	701a      	strb	r2, [r3, #0]
					break;
 80056b2:	e029      	b.n	8005708 <HAL_TIM_PeriodElapsedCallback+0xf14>
				if (ptr2 != NULL) {
 80056b4:	239c      	movs	r3, #156	; 0x9c
 80056b6:	2118      	movs	r1, #24
 80056b8:	185b      	adds	r3, r3, r1
 80056ba:	19db      	adds	r3, r3, r7
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d010      	beq.n	80056e4 <HAL_TIM_PeriodElapsedCallback+0xef0>
					tLine = i;
 80056c2:	239a      	movs	r3, #154	; 0x9a
 80056c4:	005b      	lsls	r3, r3, #1
 80056c6:	185b      	adds	r3, r3, r1
 80056c8:	19db      	adds	r3, r3, r7
 80056ca:	2234      	movs	r2, #52	; 0x34
 80056cc:	32ff      	adds	r2, #255	; 0xff
 80056ce:	1852      	adds	r2, r2, r1
 80056d0:	19d2      	adds	r2, r2, r7
 80056d2:	7812      	ldrb	r2, [r2, #0]
 80056d4:	701a      	strb	r2, [r3, #0]
					tResponse = 'B';
 80056d6:	2348      	movs	r3, #72	; 0x48
 80056d8:	33ff      	adds	r3, #255	; 0xff
 80056da:	185b      	adds	r3, r3, r1
 80056dc:	19db      	adds	r3, r3, r7
 80056de:	2242      	movs	r2, #66	; 0x42
 80056e0:	701a      	strb	r2, [r3, #0]
					break;
 80056e2:	e011      	b.n	8005708 <HAL_TIM_PeriodElapsedCallback+0xf14>
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 80056e4:	2134      	movs	r1, #52	; 0x34
 80056e6:	31ff      	adds	r1, #255	; 0xff
 80056e8:	2018      	movs	r0, #24
 80056ea:	180b      	adds	r3, r1, r0
 80056ec:	19db      	adds	r3, r3, r7
 80056ee:	781a      	ldrb	r2, [r3, #0]
 80056f0:	180b      	adds	r3, r1, r0
 80056f2:	19db      	adds	r3, r3, r7
 80056f4:	3201      	adds	r2, #1
 80056f6:	701a      	strb	r2, [r3, #0]
 80056f8:	2334      	movs	r3, #52	; 0x34
 80056fa:	33ff      	adds	r3, #255	; 0xff
 80056fc:	2218      	movs	r2, #24
 80056fe:	189b      	adds	r3, r3, r2
 8005700:	19db      	adds	r3, r3, r7
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	2b05      	cmp	r3, #5
 8005706:	d99b      	bls.n	8005640 <HAL_TIM_PeriodElapsedCallback+0xe4c>
			if (tLine != 99) {
 8005708:	239a      	movs	r3, #154	; 0x9a
 800570a:	005b      	lsls	r3, r3, #1
 800570c:	2218      	movs	r2, #24
 800570e:	189b      	adds	r3, r3, r2
 8005710:	19db      	adds	r3, r3, r7
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	2b63      	cmp	r3, #99	; 0x63
 8005716:	d024      	beq.n	8005762 <HAL_TIM_PeriodElapsedCallback+0xf6e>
				if (tResponse == 'G') {
 8005718:	2348      	movs	r3, #72	; 0x48
 800571a:	33ff      	adds	r3, #255	; 0xff
 800571c:	189b      	adds	r3, r3, r2
 800571e:	19db      	adds	r3, r3, r7
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	2b47      	cmp	r3, #71	; 0x47
 8005724:	d109      	bne.n	800573a <HAL_TIM_PeriodElapsedCallback+0xf46>
					isResponseOk = 1;
 8005726:	4bab      	ldr	r3, [pc, #684]	; (80059d4 <HAL_TIM_PeriodElapsedCallback+0x11e0>)
 8005728:	2201      	movs	r2, #1
 800572a:	701a      	strb	r2, [r3, #0]
					clearit();
 800572c:	f001 fbd0 	bl	8006ed0 <clearit>
					commandCase = 0;
 8005730:	4ba9      	ldr	r3, [pc, #676]	; (80059d8 <HAL_TIM_PeriodElapsedCallback+0x11e4>)
 8005732:	2200      	movs	r2, #0
 8005734:	701a      	strb	r2, [r3, #0]
}
 8005736:	f000 ffa7 	bl	8006688 <HAL_TIM_PeriodElapsedCallback+0x1e94>
				} else if (tResponse == 'B') {
 800573a:	2348      	movs	r3, #72	; 0x48
 800573c:	33ff      	adds	r3, #255	; 0xff
 800573e:	2218      	movs	r2, #24
 8005740:	189b      	adds	r3, r3, r2
 8005742:	19db      	adds	r3, r3, r7
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	2b42      	cmp	r3, #66	; 0x42
 8005748:	d001      	beq.n	800574e <HAL_TIM_PeriodElapsedCallback+0xf5a>
 800574a:	f000 ff9d 	bl	8006688 <HAL_TIM_PeriodElapsedCallback+0x1e94>
					isResponseOk = 0;
 800574e:	4ba1      	ldr	r3, [pc, #644]	; (80059d4 <HAL_TIM_PeriodElapsedCallback+0x11e0>)
 8005750:	2200      	movs	r2, #0
 8005752:	701a      	strb	r2, [r3, #0]
					clearit();
 8005754:	f001 fbbc 	bl	8006ed0 <clearit>
					commandCase = 0;
 8005758:	4b9f      	ldr	r3, [pc, #636]	; (80059d8 <HAL_TIM_PeriodElapsedCallback+0x11e4>)
 800575a:	2200      	movs	r2, #0
 800575c:	701a      	strb	r2, [r3, #0]
}
 800575e:	f000 ff93 	bl	8006688 <HAL_TIM_PeriodElapsedCallback+0x1e94>
				resTimeout--;
 8005762:	4b9e      	ldr	r3, [pc, #632]	; (80059dc <HAL_TIM_PeriodElapsedCallback+0x11e8>)
 8005764:	881b      	ldrh	r3, [r3, #0]
 8005766:	b29b      	uxth	r3, r3
 8005768:	3b01      	subs	r3, #1
 800576a:	b29a      	uxth	r2, r3
 800576c:	4b9b      	ldr	r3, [pc, #620]	; (80059dc <HAL_TIM_PeriodElapsedCallback+0x11e8>)
 800576e:	801a      	strh	r2, [r3, #0]
				if (resTimeout < 1) {
 8005770:	4b9a      	ldr	r3, [pc, #616]	; (80059dc <HAL_TIM_PeriodElapsedCallback+0x11e8>)
 8005772:	881b      	ldrh	r3, [r3, #0]
 8005774:	b29b      	uxth	r3, r3
 8005776:	2b00      	cmp	r3, #0
 8005778:	d001      	beq.n	800577e <HAL_TIM_PeriodElapsedCallback+0xf8a>
 800577a:	f000 ff85 	bl	8006688 <HAL_TIM_PeriodElapsedCallback+0x1e94>
					if (!recResponse) {
 800577e:	4b98      	ldr	r3, [pc, #608]	; (80059e0 <HAL_TIM_PeriodElapsedCallback+0x11ec>)
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	b2db      	uxtb	r3, r3
 8005784:	2b00      	cmp	r3, #0
 8005786:	d101      	bne.n	800578c <HAL_TIM_PeriodElapsedCallback+0xf98>
						rebootsystem();
 8005788:	f000 ffa8 	bl	80066dc <rebootsystem>
					clearit();
 800578c:	f001 fba0 	bl	8006ed0 <clearit>
					isResponseOk = 0;
 8005790:	4b90      	ldr	r3, [pc, #576]	; (80059d4 <HAL_TIM_PeriodElapsedCallback+0x11e0>)
 8005792:	2200      	movs	r2, #0
 8005794:	701a      	strb	r2, [r3, #0]
}
 8005796:	f000 ff77 	bl	8006688 <HAL_TIM_PeriodElapsedCallback+0x1e94>
		} else if (commandCase == 2) {
 800579a:	4b8f      	ldr	r3, [pc, #572]	; (80059d8 <HAL_TIM_PeriodElapsedCallback+0x11e4>)
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d16c      	bne.n	800587e <HAL_TIM_PeriodElapsedCallback+0x108a>
			uint8_t tLine = 99;
 80057a4:	2399      	movs	r3, #153	; 0x99
 80057a6:	005b      	lsls	r3, r3, #1
 80057a8:	2118      	movs	r1, #24
 80057aa:	185b      	adds	r3, r3, r1
 80057ac:	19db      	adds	r3, r3, r7
 80057ae:	2263      	movs	r2, #99	; 0x63
 80057b0:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 80057b2:	2332      	movs	r3, #50	; 0x32
 80057b4:	33ff      	adds	r3, #255	; 0xff
 80057b6:	185b      	adds	r3, r3, r1
 80057b8:	19db      	adds	r3, r3, r7
 80057ba:	2200      	movs	r2, #0
 80057bc:	701a      	strb	r2, [r3, #0]
 80057be:	e02b      	b.n	8005818 <HAL_TIM_PeriodElapsedCallback+0x1024>
				ptr = strstr(responseBuffer[i], "READY");
 80057c0:	2432      	movs	r4, #50	; 0x32
 80057c2:	34ff      	adds	r4, #255	; 0xff
 80057c4:	2518      	movs	r5, #24
 80057c6:	1963      	adds	r3, r4, r5
 80057c8:	19db      	adds	r3, r3, r7
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	2232      	movs	r2, #50	; 0x32
 80057ce:	435a      	muls	r2, r3
 80057d0:	4b7d      	ldr	r3, [pc, #500]	; (80059c8 <HAL_TIM_PeriodElapsedCallback+0x11d4>)
 80057d2:	18d3      	adds	r3, r2, r3
 80057d4:	4a83      	ldr	r2, [pc, #524]	; (80059e4 <HAL_TIM_PeriodElapsedCallback+0x11f0>)
 80057d6:	0011      	movs	r1, r2
 80057d8:	0018      	movs	r0, r3
 80057da:	f009 fc6c 	bl	800f0b6 <strstr>
 80057de:	0003      	movs	r3, r0
 80057e0:	22a4      	movs	r2, #164	; 0xa4
 80057e2:	1951      	adds	r1, r2, r5
 80057e4:	19c9      	adds	r1, r1, r7
 80057e6:	600b      	str	r3, [r1, #0]
				if (ptr != NULL) {
 80057e8:	1953      	adds	r3, r2, r5
 80057ea:	19db      	adds	r3, r3, r7
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d008      	beq.n	8005804 <HAL_TIM_PeriodElapsedCallback+0x1010>
					tLine = i;
 80057f2:	2399      	movs	r3, #153	; 0x99
 80057f4:	005b      	lsls	r3, r3, #1
 80057f6:	195b      	adds	r3, r3, r5
 80057f8:	19db      	adds	r3, r3, r7
 80057fa:	1962      	adds	r2, r4, r5
 80057fc:	19d2      	adds	r2, r2, r7
 80057fe:	7812      	ldrb	r2, [r2, #0]
 8005800:	701a      	strb	r2, [r3, #0]
					break;
 8005802:	e011      	b.n	8005828 <HAL_TIM_PeriodElapsedCallback+0x1034>
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 8005804:	2132      	movs	r1, #50	; 0x32
 8005806:	31ff      	adds	r1, #255	; 0xff
 8005808:	2018      	movs	r0, #24
 800580a:	180b      	adds	r3, r1, r0
 800580c:	19db      	adds	r3, r3, r7
 800580e:	781a      	ldrb	r2, [r3, #0]
 8005810:	180b      	adds	r3, r1, r0
 8005812:	19db      	adds	r3, r3, r7
 8005814:	3201      	adds	r2, #1
 8005816:	701a      	strb	r2, [r3, #0]
 8005818:	2332      	movs	r3, #50	; 0x32
 800581a:	33ff      	adds	r3, #255	; 0xff
 800581c:	2218      	movs	r2, #24
 800581e:	189b      	adds	r3, r3, r2
 8005820:	19db      	adds	r3, r3, r7
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	2b05      	cmp	r3, #5
 8005826:	d9cb      	bls.n	80057c0 <HAL_TIM_PeriodElapsedCallback+0xfcc>
			if (tLine != 99) {
 8005828:	2399      	movs	r3, #153	; 0x99
 800582a:	005b      	lsls	r3, r3, #1
 800582c:	2218      	movs	r2, #24
 800582e:	189b      	adds	r3, r3, r2
 8005830:	19db      	adds	r3, r3, r7
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	2b63      	cmp	r3, #99	; 0x63
 8005836:	d006      	beq.n	8005846 <HAL_TIM_PeriodElapsedCallback+0x1052>
				isResponseOk = 1;
 8005838:	4b66      	ldr	r3, [pc, #408]	; (80059d4 <HAL_TIM_PeriodElapsedCallback+0x11e0>)
 800583a:	2201      	movs	r2, #1
 800583c:	701a      	strb	r2, [r3, #0]
				clearit();
 800583e:	f001 fb47 	bl	8006ed0 <clearit>
}
 8005842:	f000 ff21 	bl	8006688 <HAL_TIM_PeriodElapsedCallback+0x1e94>
				resTimeout--;
 8005846:	4b65      	ldr	r3, [pc, #404]	; (80059dc <HAL_TIM_PeriodElapsedCallback+0x11e8>)
 8005848:	881b      	ldrh	r3, [r3, #0]
 800584a:	b29b      	uxth	r3, r3
 800584c:	3b01      	subs	r3, #1
 800584e:	b29a      	uxth	r2, r3
 8005850:	4b62      	ldr	r3, [pc, #392]	; (80059dc <HAL_TIM_PeriodElapsedCallback+0x11e8>)
 8005852:	801a      	strh	r2, [r3, #0]
				if (resTimeout < 1) {
 8005854:	4b61      	ldr	r3, [pc, #388]	; (80059dc <HAL_TIM_PeriodElapsedCallback+0x11e8>)
 8005856:	881b      	ldrh	r3, [r3, #0]
 8005858:	b29b      	uxth	r3, r3
 800585a:	2b00      	cmp	r3, #0
 800585c:	d001      	beq.n	8005862 <HAL_TIM_PeriodElapsedCallback+0x106e>
 800585e:	f000 ff13 	bl	8006688 <HAL_TIM_PeriodElapsedCallback+0x1e94>
					if (!recResponse) {
 8005862:	4b5f      	ldr	r3, [pc, #380]	; (80059e0 <HAL_TIM_PeriodElapsedCallback+0x11ec>)
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	b2db      	uxtb	r3, r3
 8005868:	2b00      	cmp	r3, #0
 800586a:	d101      	bne.n	8005870 <HAL_TIM_PeriodElapsedCallback+0x107c>
						rebootsystem();
 800586c:	f000 ff36 	bl	80066dc <rebootsystem>
					clearit();
 8005870:	f001 fb2e 	bl	8006ed0 <clearit>
					isResponseOk = 0;
 8005874:	4b57      	ldr	r3, [pc, #348]	; (80059d4 <HAL_TIM_PeriodElapsedCallback+0x11e0>)
 8005876:	2200      	movs	r2, #0
 8005878:	701a      	strb	r2, [r3, #0]
}
 800587a:	f000 ff05 	bl	8006688 <HAL_TIM_PeriodElapsedCallback+0x1e94>
		} else if (commandCase == 3) {
 800587e:	4b56      	ldr	r3, [pc, #344]	; (80059d8 <HAL_TIM_PeriodElapsedCallback+0x11e4>)
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	b2db      	uxtb	r3, r3
 8005884:	2b03      	cmp	r3, #3
 8005886:	d000      	beq.n	800588a <HAL_TIM_PeriodElapsedCallback+0x1096>
 8005888:	e0d4      	b.n	8005a34 <HAL_TIM_PeriodElapsedCallback+0x1240>
			uint8_t tLine = 99;
 800588a:	2398      	movs	r3, #152	; 0x98
 800588c:	005b      	lsls	r3, r3, #1
 800588e:	2118      	movs	r1, #24
 8005890:	185b      	adds	r3, r3, r1
 8005892:	19db      	adds	r3, r3, r7
 8005894:	2263      	movs	r2, #99	; 0x63
 8005896:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 8005898:	2330      	movs	r3, #48	; 0x30
 800589a:	33ff      	adds	r3, #255	; 0xff
 800589c:	185b      	adds	r3, r3, r1
 800589e:	19db      	adds	r3, r3, r7
 80058a0:	2200      	movs	r2, #0
 80058a2:	701a      	strb	r2, [r3, #0]
 80058a4:	e075      	b.n	8005992 <HAL_TIM_PeriodElapsedCallback+0x119e>
				ptr = strstr(responseBuffer[i], "+CREG: 0,1");
 80058a6:	2430      	movs	r4, #48	; 0x30
 80058a8:	34ff      	adds	r4, #255	; 0xff
 80058aa:	2618      	movs	r6, #24
 80058ac:	19a3      	adds	r3, r4, r6
 80058ae:	19db      	adds	r3, r3, r7
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	2232      	movs	r2, #50	; 0x32
 80058b4:	435a      	muls	r2, r3
 80058b6:	4b44      	ldr	r3, [pc, #272]	; (80059c8 <HAL_TIM_PeriodElapsedCallback+0x11d4>)
 80058b8:	18d3      	adds	r3, r2, r3
 80058ba:	4a4b      	ldr	r2, [pc, #300]	; (80059e8 <HAL_TIM_PeriodElapsedCallback+0x11f4>)
 80058bc:	0011      	movs	r1, r2
 80058be:	0018      	movs	r0, r3
 80058c0:	f009 fbf9 	bl	800f0b6 <strstr>
 80058c4:	0003      	movs	r3, r0
 80058c6:	25b4      	movs	r5, #180	; 0xb4
 80058c8:	19aa      	adds	r2, r5, r6
 80058ca:	19d2      	adds	r2, r2, r7
 80058cc:	6013      	str	r3, [r2, #0]
				ptr2 = strstr(responseBuffer[i], "+CREG: 0,5");
 80058ce:	19a3      	adds	r3, r4, r6
 80058d0:	19db      	adds	r3, r3, r7
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	2232      	movs	r2, #50	; 0x32
 80058d6:	435a      	muls	r2, r3
 80058d8:	4b3b      	ldr	r3, [pc, #236]	; (80059c8 <HAL_TIM_PeriodElapsedCallback+0x11d4>)
 80058da:	18d3      	adds	r3, r2, r3
 80058dc:	4a43      	ldr	r2, [pc, #268]	; (80059ec <HAL_TIM_PeriodElapsedCallback+0x11f8>)
 80058de:	0011      	movs	r1, r2
 80058e0:	0018      	movs	r0, r3
 80058e2:	f009 fbe8 	bl	800f0b6 <strstr>
 80058e6:	0003      	movs	r3, r0
 80058e8:	26b0      	movs	r6, #176	; 0xb0
 80058ea:	2018      	movs	r0, #24
 80058ec:	1832      	adds	r2, r6, r0
 80058ee:	19d2      	adds	r2, r2, r7
 80058f0:	6013      	str	r3, [r2, #0]
				ptr3 = strstr(responseBuffer[i], "+CGREG: 0,1");
 80058f2:	1823      	adds	r3, r4, r0
 80058f4:	19db      	adds	r3, r3, r7
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	2232      	movs	r2, #50	; 0x32
 80058fa:	435a      	muls	r2, r3
 80058fc:	4b32      	ldr	r3, [pc, #200]	; (80059c8 <HAL_TIM_PeriodElapsedCallback+0x11d4>)
 80058fe:	18d3      	adds	r3, r2, r3
 8005900:	4a3b      	ldr	r2, [pc, #236]	; (80059f0 <HAL_TIM_PeriodElapsedCallback+0x11fc>)
 8005902:	0011      	movs	r1, r2
 8005904:	0018      	movs	r0, r3
 8005906:	f009 fbd6 	bl	800f0b6 <strstr>
 800590a:	0003      	movs	r3, r0
 800590c:	22ac      	movs	r2, #172	; 0xac
 800590e:	2018      	movs	r0, #24
 8005910:	1812      	adds	r2, r2, r0
 8005912:	19d1      	adds	r1, r2, r7
 8005914:	600b      	str	r3, [r1, #0]
				ptr4 = strstr(responseBuffer[i], "+CGREG: 0,5");
 8005916:	1823      	adds	r3, r4, r0
 8005918:	19db      	adds	r3, r3, r7
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	2232      	movs	r2, #50	; 0x32
 800591e:	435a      	muls	r2, r3
 8005920:	4b29      	ldr	r3, [pc, #164]	; (80059c8 <HAL_TIM_PeriodElapsedCallback+0x11d4>)
 8005922:	18d3      	adds	r3, r2, r3
 8005924:	4a33      	ldr	r2, [pc, #204]	; (80059f4 <HAL_TIM_PeriodElapsedCallback+0x1200>)
 8005926:	0011      	movs	r1, r2
 8005928:	0018      	movs	r0, r3
 800592a:	f009 fbc4 	bl	800f0b6 <strstr>
 800592e:	0003      	movs	r3, r0
 8005930:	21a8      	movs	r1, #168	; 0xa8
 8005932:	2218      	movs	r2, #24
 8005934:	1888      	adds	r0, r1, r2
 8005936:	19c0      	adds	r0, r0, r7
 8005938:	6003      	str	r3, [r0, #0]
				if (ptr != NULL || ptr2 != NULL || ptr3 != NULL || ptr4 != NULL) {
 800593a:	0010      	movs	r0, r2
 800593c:	182b      	adds	r3, r5, r0
 800593e:	19db      	adds	r3, r3, r7
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d10f      	bne.n	8005966 <HAL_TIM_PeriodElapsedCallback+0x1172>
 8005946:	1833      	adds	r3, r6, r0
 8005948:	19db      	adds	r3, r3, r7
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d10a      	bne.n	8005966 <HAL_TIM_PeriodElapsedCallback+0x1172>
 8005950:	22ac      	movs	r2, #172	; 0xac
 8005952:	1813      	adds	r3, r2, r0
 8005954:	19db      	adds	r3, r3, r7
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d104      	bne.n	8005966 <HAL_TIM_PeriodElapsedCallback+0x1172>
 800595c:	180b      	adds	r3, r1, r0
 800595e:	19db      	adds	r3, r3, r7
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00b      	beq.n	800597e <HAL_TIM_PeriodElapsedCallback+0x118a>
					tLine = i;
 8005966:	2398      	movs	r3, #152	; 0x98
 8005968:	005b      	lsls	r3, r3, #1
 800596a:	2118      	movs	r1, #24
 800596c:	185b      	adds	r3, r3, r1
 800596e:	19db      	adds	r3, r3, r7
 8005970:	2230      	movs	r2, #48	; 0x30
 8005972:	32ff      	adds	r2, #255	; 0xff
 8005974:	1852      	adds	r2, r2, r1
 8005976:	19d2      	adds	r2, r2, r7
 8005978:	7812      	ldrb	r2, [r2, #0]
 800597a:	701a      	strb	r2, [r3, #0]
					break;
 800597c:	e011      	b.n	80059a2 <HAL_TIM_PeriodElapsedCallback+0x11ae>
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 800597e:	2130      	movs	r1, #48	; 0x30
 8005980:	31ff      	adds	r1, #255	; 0xff
 8005982:	2018      	movs	r0, #24
 8005984:	180b      	adds	r3, r1, r0
 8005986:	19db      	adds	r3, r3, r7
 8005988:	781a      	ldrb	r2, [r3, #0]
 800598a:	180b      	adds	r3, r1, r0
 800598c:	19db      	adds	r3, r3, r7
 800598e:	3201      	adds	r2, #1
 8005990:	701a      	strb	r2, [r3, #0]
 8005992:	2330      	movs	r3, #48	; 0x30
 8005994:	33ff      	adds	r3, #255	; 0xff
 8005996:	2218      	movs	r2, #24
 8005998:	189b      	adds	r3, r3, r2
 800599a:	19db      	adds	r3, r3, r7
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	2b05      	cmp	r3, #5
 80059a0:	d981      	bls.n	80058a6 <HAL_TIM_PeriodElapsedCallback+0x10b2>
			if (tLine != 99) {
 80059a2:	2398      	movs	r3, #152	; 0x98
 80059a4:	005b      	lsls	r3, r3, #1
 80059a6:	2218      	movs	r2, #24
 80059a8:	189b      	adds	r3, r3, r2
 80059aa:	19db      	adds	r3, r3, r7
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	2b63      	cmp	r3, #99	; 0x63
 80059b0:	d024      	beq.n	80059fc <HAL_TIM_PeriodElapsedCallback+0x1208>
				isReg = 1;
 80059b2:	4b11      	ldr	r3, [pc, #68]	; (80059f8 <HAL_TIM_PeriodElapsedCallback+0x1204>)
 80059b4:	2201      	movs	r2, #1
 80059b6:	701a      	strb	r2, [r3, #0]
				isResponseOk = 1;
 80059b8:	4b06      	ldr	r3, [pc, #24]	; (80059d4 <HAL_TIM_PeriodElapsedCallback+0x11e0>)
 80059ba:	2201      	movs	r2, #1
 80059bc:	701a      	strb	r2, [r3, #0]
				clearit();
 80059be:	f001 fa87 	bl	8006ed0 <clearit>
}
 80059c2:	f000 fe61 	bl	8006688 <HAL_TIM_PeriodElapsedCallback+0x1e94>
 80059c6:	46c0      	nop			; (mov r8, r8)
 80059c8:	20000794 	.word	0x20000794
 80059cc:	080134f0 	.word	0x080134f0
 80059d0:	080134f4 	.word	0x080134f4
 80059d4:	200008cc 	.word	0x200008cc
 80059d8:	200008cb 	.word	0x200008cb
 80059dc:	200008c8 	.word	0x200008c8
 80059e0:	200008cd 	.word	0x200008cd
 80059e4:	080134fc 	.word	0x080134fc
 80059e8:	08013504 	.word	0x08013504
 80059ec:	08013510 	.word	0x08013510
 80059f0:	0801351c 	.word	0x0801351c
 80059f4:	08013528 	.word	0x08013528
 80059f8:	20000a79 	.word	0x20000a79
				resTimeout--;
 80059fc:	4bd6      	ldr	r3, [pc, #856]	; (8005d58 <HAL_TIM_PeriodElapsedCallback+0x1564>)
 80059fe:	881b      	ldrh	r3, [r3, #0]
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	3b01      	subs	r3, #1
 8005a04:	b29a      	uxth	r2, r3
 8005a06:	4bd4      	ldr	r3, [pc, #848]	; (8005d58 <HAL_TIM_PeriodElapsedCallback+0x1564>)
 8005a08:	801a      	strh	r2, [r3, #0]
				if (resTimeout < 1) {
 8005a0a:	4bd3      	ldr	r3, [pc, #844]	; (8005d58 <HAL_TIM_PeriodElapsedCallback+0x1564>)
 8005a0c:	881b      	ldrh	r3, [r3, #0]
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d001      	beq.n	8005a18 <HAL_TIM_PeriodElapsedCallback+0x1224>
 8005a14:	f000 fe38 	bl	8006688 <HAL_TIM_PeriodElapsedCallback+0x1e94>
					if (!recResponse) {
 8005a18:	4bd0      	ldr	r3, [pc, #832]	; (8005d5c <HAL_TIM_PeriodElapsedCallback+0x1568>)
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d101      	bne.n	8005a26 <HAL_TIM_PeriodElapsedCallback+0x1232>
						rebootsystem();
 8005a22:	f000 fe5b 	bl	80066dc <rebootsystem>
					clearit();
 8005a26:	f001 fa53 	bl	8006ed0 <clearit>
					isResponseOk = 0;
 8005a2a:	4bcd      	ldr	r3, [pc, #820]	; (8005d60 <HAL_TIM_PeriodElapsedCallback+0x156c>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	701a      	strb	r2, [r3, #0]
}
 8005a30:	f000 fe2a 	bl	8006688 <HAL_TIM_PeriodElapsedCallback+0x1e94>
		else if (commandCase == 4) {
 8005a34:	4bcb      	ldr	r3, [pc, #812]	; (8005d64 <HAL_TIM_PeriodElapsedCallback+0x1570>)
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	2b04      	cmp	r3, #4
 8005a3c:	d000      	beq.n	8005a40 <HAL_TIM_PeriodElapsedCallback+0x124c>
 8005a3e:	e0f2      	b.n	8005c26 <HAL_TIM_PeriodElapsedCallback+0x1432>
			uint8_t tLine = 99;
 8005a40:	2397      	movs	r3, #151	; 0x97
 8005a42:	005b      	lsls	r3, r3, #1
 8005a44:	2118      	movs	r1, #24
 8005a46:	185b      	adds	r3, r3, r1
 8005a48:	19db      	adds	r3, r3, r7
 8005a4a:	2263      	movs	r2, #99	; 0x63
 8005a4c:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 8005a4e:	232e      	movs	r3, #46	; 0x2e
 8005a50:	33ff      	adds	r3, #255	; 0xff
 8005a52:	185b      	adds	r3, r3, r1
 8005a54:	19db      	adds	r3, r3, r7
 8005a56:	2200      	movs	r2, #0
 8005a58:	701a      	strb	r2, [r3, #0]
 8005a5a:	e02b      	b.n	8005ab4 <HAL_TIM_PeriodElapsedCallback+0x12c0>
				ptr = strstr(responseBuffer[i], "OK");
 8005a5c:	242e      	movs	r4, #46	; 0x2e
 8005a5e:	34ff      	adds	r4, #255	; 0xff
 8005a60:	2518      	movs	r5, #24
 8005a62:	1963      	adds	r3, r4, r5
 8005a64:	19db      	adds	r3, r3, r7
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	2232      	movs	r2, #50	; 0x32
 8005a6a:	435a      	muls	r2, r3
 8005a6c:	4bbe      	ldr	r3, [pc, #760]	; (8005d68 <HAL_TIM_PeriodElapsedCallback+0x1574>)
 8005a6e:	18d3      	adds	r3, r2, r3
 8005a70:	4abe      	ldr	r2, [pc, #760]	; (8005d6c <HAL_TIM_PeriodElapsedCallback+0x1578>)
 8005a72:	0011      	movs	r1, r2
 8005a74:	0018      	movs	r0, r3
 8005a76:	f009 fb1e 	bl	800f0b6 <strstr>
 8005a7a:	0003      	movs	r3, r0
 8005a7c:	22b8      	movs	r2, #184	; 0xb8
 8005a7e:	1951      	adds	r1, r2, r5
 8005a80:	19c9      	adds	r1, r1, r7
 8005a82:	600b      	str	r3, [r1, #0]
				if (ptr != NULL) {
 8005a84:	1953      	adds	r3, r2, r5
 8005a86:	19db      	adds	r3, r3, r7
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d008      	beq.n	8005aa0 <HAL_TIM_PeriodElapsedCallback+0x12ac>
					tLine = i;
 8005a8e:	2397      	movs	r3, #151	; 0x97
 8005a90:	005b      	lsls	r3, r3, #1
 8005a92:	195b      	adds	r3, r3, r5
 8005a94:	19db      	adds	r3, r3, r7
 8005a96:	1962      	adds	r2, r4, r5
 8005a98:	19d2      	adds	r2, r2, r7
 8005a9a:	7812      	ldrb	r2, [r2, #0]
 8005a9c:	701a      	strb	r2, [r3, #0]
					break;
 8005a9e:	e011      	b.n	8005ac4 <HAL_TIM_PeriodElapsedCallback+0x12d0>
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 8005aa0:	212e      	movs	r1, #46	; 0x2e
 8005aa2:	31ff      	adds	r1, #255	; 0xff
 8005aa4:	2018      	movs	r0, #24
 8005aa6:	180b      	adds	r3, r1, r0
 8005aa8:	19db      	adds	r3, r3, r7
 8005aaa:	781a      	ldrb	r2, [r3, #0]
 8005aac:	180b      	adds	r3, r1, r0
 8005aae:	19db      	adds	r3, r3, r7
 8005ab0:	3201      	adds	r2, #1
 8005ab2:	701a      	strb	r2, [r3, #0]
 8005ab4:	232e      	movs	r3, #46	; 0x2e
 8005ab6:	33ff      	adds	r3, #255	; 0xff
 8005ab8:	2218      	movs	r2, #24
 8005aba:	189b      	adds	r3, r3, r2
 8005abc:	19db      	adds	r3, r3, r7
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	2b05      	cmp	r3, #5
 8005ac2:	d9cb      	bls.n	8005a5c <HAL_TIM_PeriodElapsedCallback+0x1268>
			if (tLine != 99) {
 8005ac4:	2497      	movs	r4, #151	; 0x97
 8005ac6:	0064      	lsls	r4, r4, #1
 8005ac8:	2118      	movs	r1, #24
 8005aca:	1863      	adds	r3, r4, r1
 8005acc:	19db      	adds	r3, r3, r7
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	2b63      	cmp	r3, #99	; 0x63
 8005ad2:	d100      	bne.n	8005ad6 <HAL_TIM_PeriodElapsedCallback+0x12e2>
 8005ad4:	e08b      	b.n	8005bee <HAL_TIM_PeriodElapsedCallback+0x13fa>
				isResponseOk = 1;
 8005ad6:	4ba2      	ldr	r3, [pc, #648]	; (8005d60 <HAL_TIM_PeriodElapsedCallback+0x156c>)
 8005ad8:	2201      	movs	r2, #1
 8005ada:	701a      	strb	r2, [r3, #0]
				memset(p, 0, sizeof(p));
 8005adc:	2588      	movs	r5, #136	; 0x88
 8005ade:	000e      	movs	r6, r1
 8005ae0:	186b      	adds	r3, r5, r1
 8005ae2:	19db      	adds	r3, r3, r7
 8005ae4:	220a      	movs	r2, #10
 8005ae6:	2100      	movs	r1, #0
 8005ae8:	0018      	movs	r0, r3
 8005aea:	f009 fa8c 	bl	800f006 <memset>
				myt = responseBuffer[tLine - 2];
 8005aee:	0031      	movs	r1, r6
 8005af0:	1863      	adds	r3, r4, r1
 8005af2:	19db      	adds	r3, r3, r7
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	3b02      	subs	r3, #2
 8005af8:	2232      	movs	r2, #50	; 0x32
 8005afa:	435a      	muls	r2, r3
 8005afc:	4b9a      	ldr	r3, [pc, #616]	; (8005d68 <HAL_TIM_PeriodElapsedCallback+0x1574>)
 8005afe:	18d3      	adds	r3, r2, r3
 8005b00:	2494      	movs	r4, #148	; 0x94
 8005b02:	0064      	lsls	r4, r4, #1
 8005b04:	000e      	movs	r6, r1
 8005b06:	19a2      	adds	r2, r4, r6
 8005b08:	19d2      	adds	r2, r2, r7
 8005b0a:	6013      	str	r3, [r2, #0]
				memset(imeiChar,0,sizeof(imeiChar));
 8005b0c:	4b98      	ldr	r3, [pc, #608]	; (8005d70 <HAL_TIM_PeriodElapsedCallback+0x157c>)
 8005b0e:	2214      	movs	r2, #20
 8005b10:	2100      	movs	r1, #0
 8005b12:	0018      	movs	r0, r3
 8005b14:	f009 fa77 	bl	800f006 <memset>
				strncpy(imeiChar,myt,15);
 8005b18:	19a3      	adds	r3, r4, r6
 8005b1a:	19db      	adds	r3, r3, r7
 8005b1c:	6819      	ldr	r1, [r3, #0]
 8005b1e:	4b94      	ldr	r3, [pc, #592]	; (8005d70 <HAL_TIM_PeriodElapsedCallback+0x157c>)
 8005b20:	220f      	movs	r2, #15
 8005b22:	0018      	movs	r0, r3
 8005b24:	f009 fab3 	bl	800f08e <strncpy>
				strncpy(p, myt, 1);
 8005b28:	19a3      	adds	r3, r4, r6
 8005b2a:	19db      	adds	r3, r3, r7
 8005b2c:	6819      	ldr	r1, [r3, #0]
 8005b2e:	19ab      	adds	r3, r5, r6
 8005b30:	19db      	adds	r3, r3, r7
 8005b32:	2201      	movs	r2, #1
 8005b34:	0018      	movs	r0, r3
 8005b36:	f009 faaa 	bl	800f08e <strncpy>
				imei[0] = (int) strtol(p, NULL, 16);
 8005b3a:	19ab      	adds	r3, r5, r6
 8005b3c:	19db      	adds	r3, r3, r7
 8005b3e:	2210      	movs	r2, #16
 8005b40:	2100      	movs	r1, #0
 8005b42:	0018      	movs	r0, r3
 8005b44:	f00a f9de 	bl	800ff04 <strtol>
 8005b48:	0003      	movs	r3, r0
 8005b4a:	b2da      	uxtb	r2, r3
 8005b4c:	4b89      	ldr	r3, [pc, #548]	; (8005d74 <HAL_TIM_PeriodElapsedCallback+0x1580>)
 8005b4e:	701a      	strb	r2, [r3, #0]
				myt++;
 8005b50:	19a3      	adds	r3, r4, r6
 8005b52:	19db      	adds	r3, r3, r7
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	3301      	adds	r3, #1
 8005b58:	19a2      	adds	r2, r4, r6
 8005b5a:	19d2      	adds	r2, r2, r7
 8005b5c:	6013      	str	r3, [r2, #0]
				for (int i = 1; i < 8; i++) {
 8005b5e:	2301      	movs	r3, #1
 8005b60:	2292      	movs	r2, #146	; 0x92
 8005b62:	0052      	lsls	r2, r2, #1
 8005b64:	1992      	adds	r2, r2, r6
 8005b66:	19d2      	adds	r2, r2, r7
 8005b68:	6013      	str	r3, [r2, #0]
 8005b6a:	e034      	b.n	8005bd6 <HAL_TIM_PeriodElapsedCallback+0x13e2>
					memset(p, 0, sizeof(p));
 8005b6c:	2488      	movs	r4, #136	; 0x88
 8005b6e:	2618      	movs	r6, #24
 8005b70:	19a3      	adds	r3, r4, r6
 8005b72:	19db      	adds	r3, r3, r7
 8005b74:	220a      	movs	r2, #10
 8005b76:	2100      	movs	r1, #0
 8005b78:	0018      	movs	r0, r3
 8005b7a:	f009 fa44 	bl	800f006 <memset>
					strncpy(p, myt, 2);
 8005b7e:	2594      	movs	r5, #148	; 0x94
 8005b80:	006d      	lsls	r5, r5, #1
 8005b82:	19ab      	adds	r3, r5, r6
 8005b84:	19db      	adds	r3, r3, r7
 8005b86:	6819      	ldr	r1, [r3, #0]
 8005b88:	19a3      	adds	r3, r4, r6
 8005b8a:	19db      	adds	r3, r3, r7
 8005b8c:	2202      	movs	r2, #2
 8005b8e:	0018      	movs	r0, r3
 8005b90:	f009 fa7d 	bl	800f08e <strncpy>
					imei[i] = (int) strtol(p, NULL, 16);
 8005b94:	19a3      	adds	r3, r4, r6
 8005b96:	19db      	adds	r3, r3, r7
 8005b98:	2210      	movs	r2, #16
 8005b9a:	2100      	movs	r1, #0
 8005b9c:	0018      	movs	r0, r3
 8005b9e:	f00a f9b1 	bl	800ff04 <strtol>
 8005ba2:	0003      	movs	r3, r0
 8005ba4:	b2d9      	uxtb	r1, r3
 8005ba6:	4a73      	ldr	r2, [pc, #460]	; (8005d74 <HAL_TIM_PeriodElapsedCallback+0x1580>)
 8005ba8:	2092      	movs	r0, #146	; 0x92
 8005baa:	0040      	lsls	r0, r0, #1
 8005bac:	0034      	movs	r4, r6
 8005bae:	1903      	adds	r3, r0, r4
 8005bb0:	19db      	adds	r3, r3, r7
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	18d3      	adds	r3, r2, r3
 8005bb6:	1c0a      	adds	r2, r1, #0
 8005bb8:	701a      	strb	r2, [r3, #0]
					myt += 2;
 8005bba:	192b      	adds	r3, r5, r4
 8005bbc:	19db      	adds	r3, r3, r7
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	3302      	adds	r3, #2
 8005bc2:	192a      	adds	r2, r5, r4
 8005bc4:	19d2      	adds	r2, r2, r7
 8005bc6:	6013      	str	r3, [r2, #0]
				for (int i = 1; i < 8; i++) {
 8005bc8:	1903      	adds	r3, r0, r4
 8005bca:	19db      	adds	r3, r3, r7
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	3301      	adds	r3, #1
 8005bd0:	1902      	adds	r2, r0, r4
 8005bd2:	19d2      	adds	r2, r2, r7
 8005bd4:	6013      	str	r3, [r2, #0]
 8005bd6:	2392      	movs	r3, #146	; 0x92
 8005bd8:	005b      	lsls	r3, r3, #1
 8005bda:	2218      	movs	r2, #24
 8005bdc:	189b      	adds	r3, r3, r2
 8005bde:	19db      	adds	r3, r3, r7
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2b07      	cmp	r3, #7
 8005be4:	ddc2      	ble.n	8005b6c <HAL_TIM_PeriodElapsedCallback+0x1378>
				clearit();
 8005be6:	f001 f973 	bl	8006ed0 <clearit>
}
 8005bea:	f000 fd4d 	bl	8006688 <HAL_TIM_PeriodElapsedCallback+0x1e94>
				resTimeout--;
 8005bee:	4b5a      	ldr	r3, [pc, #360]	; (8005d58 <HAL_TIM_PeriodElapsedCallback+0x1564>)
 8005bf0:	881b      	ldrh	r3, [r3, #0]
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	3b01      	subs	r3, #1
 8005bf6:	b29a      	uxth	r2, r3
 8005bf8:	4b57      	ldr	r3, [pc, #348]	; (8005d58 <HAL_TIM_PeriodElapsedCallback+0x1564>)
 8005bfa:	801a      	strh	r2, [r3, #0]
				if (resTimeout < 1) {
 8005bfc:	4b56      	ldr	r3, [pc, #344]	; (8005d58 <HAL_TIM_PeriodElapsedCallback+0x1564>)
 8005bfe:	881b      	ldrh	r3, [r3, #0]
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d001      	beq.n	8005c0a <HAL_TIM_PeriodElapsedCallback+0x1416>
 8005c06:	f000 fd3f 	bl	8006688 <HAL_TIM_PeriodElapsedCallback+0x1e94>
					if (!recResponse) {
 8005c0a:	4b54      	ldr	r3, [pc, #336]	; (8005d5c <HAL_TIM_PeriodElapsedCallback+0x1568>)
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d101      	bne.n	8005c18 <HAL_TIM_PeriodElapsedCallback+0x1424>
						rebootsystem();
 8005c14:	f000 fd62 	bl	80066dc <rebootsystem>
					isResponseOk = 0;
 8005c18:	4b51      	ldr	r3, [pc, #324]	; (8005d60 <HAL_TIM_PeriodElapsedCallback+0x156c>)
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	701a      	strb	r2, [r3, #0]
					clearit();
 8005c1e:	f001 f957 	bl	8006ed0 <clearit>
}
 8005c22:	f000 fd31 	bl	8006688 <HAL_TIM_PeriodElapsedCallback+0x1e94>
		} else if (commandCase == 5) {
 8005c26:	4b4f      	ldr	r3, [pc, #316]	; (8005d64 <HAL_TIM_PeriodElapsedCallback+0x1570>)
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	2b05      	cmp	r3, #5
 8005c2e:	d000      	beq.n	8005c32 <HAL_TIM_PeriodElapsedCallback+0x143e>
 8005c30:	e109      	b.n	8005e46 <HAL_TIM_PeriodElapsedCallback+0x1652>
			uint8_t tLine = 99;
 8005c32:	2324      	movs	r3, #36	; 0x24
 8005c34:	33ff      	adds	r3, #255	; 0xff
 8005c36:	2118      	movs	r1, #24
 8005c38:	185b      	adds	r3, r3, r1
 8005c3a:	19db      	adds	r3, r3, r7
 8005c3c:	2263      	movs	r2, #99	; 0x63
 8005c3e:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 8005c40:	2391      	movs	r3, #145	; 0x91
 8005c42:	005b      	lsls	r3, r3, #1
 8005c44:	185b      	adds	r3, r3, r1
 8005c46:	19db      	adds	r3, r3, r7
 8005c48:	2200      	movs	r2, #0
 8005c4a:	701a      	strb	r2, [r3, #0]
 8005c4c:	e0a6      	b.n	8005d9c <HAL_TIM_PeriodElapsedCallback+0x15a8>
				ptr = strstr(responseBuffer[i], "ALREADY CONNECT"); //todo check wether in data mode or not
 8005c4e:	2491      	movs	r4, #145	; 0x91
 8005c50:	0064      	lsls	r4, r4, #1
 8005c52:	2618      	movs	r6, #24
 8005c54:	19a3      	adds	r3, r4, r6
 8005c56:	19db      	adds	r3, r3, r7
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	2232      	movs	r2, #50	; 0x32
 8005c5c:	435a      	muls	r2, r3
 8005c5e:	4b42      	ldr	r3, [pc, #264]	; (8005d68 <HAL_TIM_PeriodElapsedCallback+0x1574>)
 8005c60:	18d3      	adds	r3, r2, r3
 8005c62:	4a45      	ldr	r2, [pc, #276]	; (8005d78 <HAL_TIM_PeriodElapsedCallback+0x1584>)
 8005c64:	0011      	movs	r1, r2
 8005c66:	0018      	movs	r0, r3
 8005c68:	f009 fa25 	bl	800f0b6 <strstr>
 8005c6c:	0003      	movs	r3, r0
 8005c6e:	25c4      	movs	r5, #196	; 0xc4
 8005c70:	19aa      	adds	r2, r5, r6
 8005c72:	19d2      	adds	r2, r2, r7
 8005c74:	6013      	str	r3, [r2, #0]
				ptr2 = strstr(responseBuffer[i], "CONNECT FAIL");
 8005c76:	19a3      	adds	r3, r4, r6
 8005c78:	19db      	adds	r3, r3, r7
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	2232      	movs	r2, #50	; 0x32
 8005c7e:	435a      	muls	r2, r3
 8005c80:	4b39      	ldr	r3, [pc, #228]	; (8005d68 <HAL_TIM_PeriodElapsedCallback+0x1574>)
 8005c82:	18d3      	adds	r3, r2, r3
 8005c84:	4a3d      	ldr	r2, [pc, #244]	; (8005d7c <HAL_TIM_PeriodElapsedCallback+0x1588>)
 8005c86:	0011      	movs	r1, r2
 8005c88:	0018      	movs	r0, r3
 8005c8a:	f009 fa14 	bl	800f0b6 <strstr>
 8005c8e:	0003      	movs	r3, r0
 8005c90:	22c0      	movs	r2, #192	; 0xc0
 8005c92:	1992      	adds	r2, r2, r6
 8005c94:	19d2      	adds	r2, r2, r7
 8005c96:	6013      	str	r3, [r2, #0]
				ptr3 = strstr(responseBuffer[i], "CONNECT");
 8005c98:	19a3      	adds	r3, r4, r6
 8005c9a:	19db      	adds	r3, r3, r7
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	2232      	movs	r2, #50	; 0x32
 8005ca0:	435a      	muls	r2, r3
 8005ca2:	4b31      	ldr	r3, [pc, #196]	; (8005d68 <HAL_TIM_PeriodElapsedCallback+0x1574>)
 8005ca4:	18d3      	adds	r3, r2, r3
 8005ca6:	4a36      	ldr	r2, [pc, #216]	; (8005d80 <HAL_TIM_PeriodElapsedCallback+0x158c>)
 8005ca8:	0011      	movs	r1, r2
 8005caa:	0018      	movs	r0, r3
 8005cac:	f009 fa03 	bl	800f0b6 <strstr>
 8005cb0:	0003      	movs	r3, r0
 8005cb2:	22bc      	movs	r2, #188	; 0xbc
 8005cb4:	0031      	movs	r1, r6
 8005cb6:	1852      	adds	r2, r2, r1
 8005cb8:	19d2      	adds	r2, r2, r7
 8005cba:	6013      	str	r3, [r2, #0]
				if (ptr != NULL) {
 8005cbc:	186b      	adds	r3, r5, r1
 8005cbe:	19db      	adds	r3, r3, r7
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d011      	beq.n	8005cea <HAL_TIM_PeriodElapsedCallback+0x14f6>
					tLine = i;
 8005cc6:	2324      	movs	r3, #36	; 0x24
 8005cc8:	33ff      	adds	r3, #255	; 0xff
 8005cca:	185b      	adds	r3, r3, r1
 8005ccc:	19db      	adds	r3, r3, r7
 8005cce:	1862      	adds	r2, r4, r1
 8005cd0:	19d2      	adds	r2, r2, r7
 8005cd2:	7812      	ldrb	r2, [r2, #0]
 8005cd4:	701a      	strb	r2, [r3, #0]
					tResponse = 'G';
 8005cd6:	2348      	movs	r3, #72	; 0x48
 8005cd8:	33ff      	adds	r3, #255	; 0xff
 8005cda:	185b      	adds	r3, r3, r1
 8005cdc:	19db      	adds	r3, r3, r7
 8005cde:	2247      	movs	r2, #71	; 0x47
 8005ce0:	701a      	strb	r2, [r3, #0]
					isDataMode = 0;
 8005ce2:	4b28      	ldr	r3, [pc, #160]	; (8005d84 <HAL_TIM_PeriodElapsedCallback+0x1590>)
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	701a      	strb	r2, [r3, #0]
					break;
 8005ce8:	e061      	b.n	8005dae <HAL_TIM_PeriodElapsedCallback+0x15ba>
				} else if (ptr2 != NULL) {
 8005cea:	23c0      	movs	r3, #192	; 0xc0
 8005cec:	2118      	movs	r1, #24
 8005cee:	185b      	adds	r3, r3, r1
 8005cf0:	19db      	adds	r3, r3, r7
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d013      	beq.n	8005d20 <HAL_TIM_PeriodElapsedCallback+0x152c>
					tLine = i;
 8005cf8:	2324      	movs	r3, #36	; 0x24
 8005cfa:	33ff      	adds	r3, #255	; 0xff
 8005cfc:	185b      	adds	r3, r3, r1
 8005cfe:	19db      	adds	r3, r3, r7
 8005d00:	2291      	movs	r2, #145	; 0x91
 8005d02:	0052      	lsls	r2, r2, #1
 8005d04:	1852      	adds	r2, r2, r1
 8005d06:	19d2      	adds	r2, r2, r7
 8005d08:	7812      	ldrb	r2, [r2, #0]
 8005d0a:	701a      	strb	r2, [r3, #0]
					tResponse = 'B';
 8005d0c:	2348      	movs	r3, #72	; 0x48
 8005d0e:	33ff      	adds	r3, #255	; 0xff
 8005d10:	185b      	adds	r3, r3, r1
 8005d12:	19db      	adds	r3, r3, r7
 8005d14:	2242      	movs	r2, #66	; 0x42
 8005d16:	701a      	strb	r2, [r3, #0]
					isDataMode = 0;
 8005d18:	4b1a      	ldr	r3, [pc, #104]	; (8005d84 <HAL_TIM_PeriodElapsedCallback+0x1590>)
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	701a      	strb	r2, [r3, #0]
					break;
 8005d1e:	e046      	b.n	8005dae <HAL_TIM_PeriodElapsedCallback+0x15ba>
				} else if (ptr3 != NULL) {
 8005d20:	23bc      	movs	r3, #188	; 0xbc
 8005d22:	2118      	movs	r1, #24
 8005d24:	185b      	adds	r3, r3, r1
 8005d26:	19db      	adds	r3, r3, r7
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d02c      	beq.n	8005d88 <HAL_TIM_PeriodElapsedCallback+0x1594>
					tLine = i;
 8005d2e:	2324      	movs	r3, #36	; 0x24
 8005d30:	33ff      	adds	r3, #255	; 0xff
 8005d32:	185b      	adds	r3, r3, r1
 8005d34:	19db      	adds	r3, r3, r7
 8005d36:	2291      	movs	r2, #145	; 0x91
 8005d38:	0052      	lsls	r2, r2, #1
 8005d3a:	1852      	adds	r2, r2, r1
 8005d3c:	19d2      	adds	r2, r2, r7
 8005d3e:	7812      	ldrb	r2, [r2, #0]
 8005d40:	701a      	strb	r2, [r3, #0]
					tResponse = 'G';
 8005d42:	2348      	movs	r3, #72	; 0x48
 8005d44:	33ff      	adds	r3, #255	; 0xff
 8005d46:	185b      	adds	r3, r3, r1
 8005d48:	19db      	adds	r3, r3, r7
 8005d4a:	2247      	movs	r2, #71	; 0x47
 8005d4c:	701a      	strb	r2, [r3, #0]
					isDataMode = 1;
 8005d4e:	4b0d      	ldr	r3, [pc, #52]	; (8005d84 <HAL_TIM_PeriodElapsedCallback+0x1590>)
 8005d50:	2201      	movs	r2, #1
 8005d52:	701a      	strb	r2, [r3, #0]
					break;
 8005d54:	e02b      	b.n	8005dae <HAL_TIM_PeriodElapsedCallback+0x15ba>
 8005d56:	46c0      	nop			; (mov r8, r8)
 8005d58:	200008c8 	.word	0x200008c8
 8005d5c:	200008cd 	.word	0x200008cd
 8005d60:	200008cc 	.word	0x200008cc
 8005d64:	200008cb 	.word	0x200008cb
 8005d68:	20000794 	.word	0x20000794
 8005d6c:	080134f0 	.word	0x080134f0
 8005d70:	200008d8 	.word	0x200008d8
 8005d74:	200008d0 	.word	0x200008d0
 8005d78:	08013534 	.word	0x08013534
 8005d7c:	08013544 	.word	0x08013544
 8005d80:	08013554 	.word	0x08013554
 8005d84:	200008c6 	.word	0x200008c6
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 8005d88:	2191      	movs	r1, #145	; 0x91
 8005d8a:	0049      	lsls	r1, r1, #1
 8005d8c:	2018      	movs	r0, #24
 8005d8e:	180b      	adds	r3, r1, r0
 8005d90:	19db      	adds	r3, r3, r7
 8005d92:	781a      	ldrb	r2, [r3, #0]
 8005d94:	180b      	adds	r3, r1, r0
 8005d96:	19db      	adds	r3, r3, r7
 8005d98:	3201      	adds	r2, #1
 8005d9a:	701a      	strb	r2, [r3, #0]
 8005d9c:	2391      	movs	r3, #145	; 0x91
 8005d9e:	005b      	lsls	r3, r3, #1
 8005da0:	2218      	movs	r2, #24
 8005da2:	189b      	adds	r3, r3, r2
 8005da4:	19db      	adds	r3, r3, r7
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	2b05      	cmp	r3, #5
 8005daa:	d800      	bhi.n	8005dae <HAL_TIM_PeriodElapsedCallback+0x15ba>
 8005dac:	e74f      	b.n	8005c4e <HAL_TIM_PeriodElapsedCallback+0x145a>
			if (tLine != 99) {
 8005dae:	2324      	movs	r3, #36	; 0x24
 8005db0:	33ff      	adds	r3, #255	; 0xff
 8005db2:	2218      	movs	r2, #24
 8005db4:	189b      	adds	r3, r3, r2
 8005db6:	19db      	adds	r3, r3, r7
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	2b63      	cmp	r3, #99	; 0x63
 8005dbc:	d027      	beq.n	8005e0e <HAL_TIM_PeriodElapsedCallback+0x161a>
				if (tResponse == 'G') {
 8005dbe:	2348      	movs	r3, #72	; 0x48
 8005dc0:	33ff      	adds	r3, #255	; 0xff
 8005dc2:	189b      	adds	r3, r3, r2
 8005dc4:	19db      	adds	r3, r3, r7
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	2b47      	cmp	r3, #71	; 0x47
 8005dca:	d10c      	bne.n	8005de6 <HAL_TIM_PeriodElapsedCallback+0x15f2>
					isResponseOk = 1;
 8005dcc:	4bdc      	ldr	r3, [pc, #880]	; (8006140 <HAL_TIM_PeriodElapsedCallback+0x194c>)
 8005dce:	2201      	movs	r2, #1
 8005dd0:	701a      	strb	r2, [r3, #0]
					clearit();
 8005dd2:	f001 f87d 	bl	8006ed0 <clearit>
					isTcpOpen = 1;
 8005dd6:	4bdb      	ldr	r3, [pc, #876]	; (8006144 <HAL_TIM_PeriodElapsedCallback+0x1950>)
 8005dd8:	2201      	movs	r2, #1
 8005dda:	701a      	strb	r2, [r3, #0]
					isDataMode = 1;
 8005ddc:	4bda      	ldr	r3, [pc, #872]	; (8006148 <HAL_TIM_PeriodElapsedCallback+0x1954>)
 8005dde:	2201      	movs	r2, #1
 8005de0:	701a      	strb	r2, [r3, #0]
}
 8005de2:	f000 fc51 	bl	8006688 <HAL_TIM_PeriodElapsedCallback+0x1e94>
				} else if (tResponse == 'B') {
 8005de6:	2348      	movs	r3, #72	; 0x48
 8005de8:	33ff      	adds	r3, #255	; 0xff
 8005dea:	2218      	movs	r2, #24
 8005dec:	189b      	adds	r3, r3, r2
 8005dee:	19db      	adds	r3, r3, r7
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	2b42      	cmp	r3, #66	; 0x42
 8005df4:	d001      	beq.n	8005dfa <HAL_TIM_PeriodElapsedCallback+0x1606>
 8005df6:	f000 fc47 	bl	8006688 <HAL_TIM_PeriodElapsedCallback+0x1e94>
					isResponseOk = 0;
 8005dfa:	4bd1      	ldr	r3, [pc, #836]	; (8006140 <HAL_TIM_PeriodElapsedCallback+0x194c>)
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	701a      	strb	r2, [r3, #0]
					clearit();
 8005e00:	f001 f866 	bl	8006ed0 <clearit>
					isTcpOpen = 0;
 8005e04:	4bcf      	ldr	r3, [pc, #828]	; (8006144 <HAL_TIM_PeriodElapsedCallback+0x1950>)
 8005e06:	2200      	movs	r2, #0
 8005e08:	701a      	strb	r2, [r3, #0]
}
 8005e0a:	f000 fc3d 	bl	8006688 <HAL_TIM_PeriodElapsedCallback+0x1e94>
				resTimeout--;
 8005e0e:	4bcf      	ldr	r3, [pc, #828]	; (800614c <HAL_TIM_PeriodElapsedCallback+0x1958>)
 8005e10:	881b      	ldrh	r3, [r3, #0]
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	3b01      	subs	r3, #1
 8005e16:	b29a      	uxth	r2, r3
 8005e18:	4bcc      	ldr	r3, [pc, #816]	; (800614c <HAL_TIM_PeriodElapsedCallback+0x1958>)
 8005e1a:	801a      	strh	r2, [r3, #0]
				if (resTimeout < 1) {
 8005e1c:	4bcb      	ldr	r3, [pc, #812]	; (800614c <HAL_TIM_PeriodElapsedCallback+0x1958>)
 8005e1e:	881b      	ldrh	r3, [r3, #0]
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d001      	beq.n	8005e2a <HAL_TIM_PeriodElapsedCallback+0x1636>
 8005e26:	f000 fc2f 	bl	8006688 <HAL_TIM_PeriodElapsedCallback+0x1e94>
					if (!recResponse) {
 8005e2a:	4bc9      	ldr	r3, [pc, #804]	; (8006150 <HAL_TIM_PeriodElapsedCallback+0x195c>)
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d101      	bne.n	8005e38 <HAL_TIM_PeriodElapsedCallback+0x1644>
						rebootsystem();
 8005e34:	f000 fc52 	bl	80066dc <rebootsystem>
					clearit();
 8005e38:	f001 f84a 	bl	8006ed0 <clearit>
					isResponseOk = 0;
 8005e3c:	4bc0      	ldr	r3, [pc, #768]	; (8006140 <HAL_TIM_PeriodElapsedCallback+0x194c>)
 8005e3e:	2200      	movs	r2, #0
 8005e40:	701a      	strb	r2, [r3, #0]
}
 8005e42:	f000 fc21 	bl	8006688 <HAL_TIM_PeriodElapsedCallback+0x1e94>
		else if (commandCase == 6) {
 8005e46:	4bc3      	ldr	r3, [pc, #780]	; (8006154 <HAL_TIM_PeriodElapsedCallback+0x1960>)
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	2b06      	cmp	r3, #6
 8005e4e:	d000      	beq.n	8005e52 <HAL_TIM_PeriodElapsedCallback+0x165e>
 8005e50:	e0d9      	b.n	8006006 <HAL_TIM_PeriodElapsedCallback+0x1812>
			uint8_t tLine = 99;
 8005e52:	2322      	movs	r3, #34	; 0x22
 8005e54:	33ff      	adds	r3, #255	; 0xff
 8005e56:	2118      	movs	r1, #24
 8005e58:	185b      	adds	r3, r3, r1
 8005e5a:	19db      	adds	r3, r3, r7
 8005e5c:	2263      	movs	r2, #99	; 0x63
 8005e5e:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 8005e60:	2390      	movs	r3, #144	; 0x90
 8005e62:	005b      	lsls	r3, r3, #1
 8005e64:	185b      	adds	r3, r3, r1
 8005e66:	19db      	adds	r3, r3, r7
 8005e68:	2200      	movs	r2, #0
 8005e6a:	701a      	strb	r2, [r3, #0]
 8005e6c:	e084      	b.n	8005f78 <HAL_TIM_PeriodElapsedCallback+0x1784>
				ptr = strstr(responseBuffer[i], "NO CARRIER");
 8005e6e:	2490      	movs	r4, #144	; 0x90
 8005e70:	0064      	lsls	r4, r4, #1
 8005e72:	2618      	movs	r6, #24
 8005e74:	19a3      	adds	r3, r4, r6
 8005e76:	19db      	adds	r3, r3, r7
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	2232      	movs	r2, #50	; 0x32
 8005e7c:	435a      	muls	r2, r3
 8005e7e:	4bb6      	ldr	r3, [pc, #728]	; (8006158 <HAL_TIM_PeriodElapsedCallback+0x1964>)
 8005e80:	18d3      	adds	r3, r2, r3
 8005e82:	4ab6      	ldr	r2, [pc, #728]	; (800615c <HAL_TIM_PeriodElapsedCallback+0x1968>)
 8005e84:	0011      	movs	r1, r2
 8005e86:	0018      	movs	r0, r3
 8005e88:	f009 f915 	bl	800f0b6 <strstr>
 8005e8c:	0003      	movs	r3, r0
 8005e8e:	25d0      	movs	r5, #208	; 0xd0
 8005e90:	19aa      	adds	r2, r5, r6
 8005e92:	19d2      	adds	r2, r2, r7
 8005e94:	6013      	str	r3, [r2, #0]
				ptr2 = strstr(responseBuffer[i], "ERROR");
 8005e96:	19a3      	adds	r3, r4, r6
 8005e98:	19db      	adds	r3, r3, r7
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	2232      	movs	r2, #50	; 0x32
 8005e9e:	435a      	muls	r2, r3
 8005ea0:	4bad      	ldr	r3, [pc, #692]	; (8006158 <HAL_TIM_PeriodElapsedCallback+0x1964>)
 8005ea2:	18d3      	adds	r3, r2, r3
 8005ea4:	4aae      	ldr	r2, [pc, #696]	; (8006160 <HAL_TIM_PeriodElapsedCallback+0x196c>)
 8005ea6:	0011      	movs	r1, r2
 8005ea8:	0018      	movs	r0, r3
 8005eaa:	f009 f904 	bl	800f0b6 <strstr>
 8005eae:	0003      	movs	r3, r0
 8005eb0:	22cc      	movs	r2, #204	; 0xcc
 8005eb2:	1992      	adds	r2, r2, r6
 8005eb4:	19d2      	adds	r2, r2, r7
 8005eb6:	6013      	str	r3, [r2, #0]
				ptr3 = strstr(responseBuffer[i], "CONNECT");
 8005eb8:	19a3      	adds	r3, r4, r6
 8005eba:	19db      	adds	r3, r3, r7
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	2232      	movs	r2, #50	; 0x32
 8005ec0:	435a      	muls	r2, r3
 8005ec2:	4ba5      	ldr	r3, [pc, #660]	; (8006158 <HAL_TIM_PeriodElapsedCallback+0x1964>)
 8005ec4:	18d3      	adds	r3, r2, r3
 8005ec6:	4aa7      	ldr	r2, [pc, #668]	; (8006164 <HAL_TIM_PeriodElapsedCallback+0x1970>)
 8005ec8:	0011      	movs	r1, r2
 8005eca:	0018      	movs	r0, r3
 8005ecc:	f009 f8f3 	bl	800f0b6 <strstr>
 8005ed0:	0003      	movs	r3, r0
 8005ed2:	22c8      	movs	r2, #200	; 0xc8
 8005ed4:	0031      	movs	r1, r6
 8005ed6:	1852      	adds	r2, r2, r1
 8005ed8:	19d2      	adds	r2, r2, r7
 8005eda:	6013      	str	r3, [r2, #0]
				if (ptr != NULL) {
 8005edc:	186b      	adds	r3, r5, r1
 8005ede:	19db      	adds	r3, r3, r7
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d00e      	beq.n	8005f04 <HAL_TIM_PeriodElapsedCallback+0x1710>
					tLine = i;
 8005ee6:	2322      	movs	r3, #34	; 0x22
 8005ee8:	33ff      	adds	r3, #255	; 0xff
 8005eea:	185b      	adds	r3, r3, r1
 8005eec:	19db      	adds	r3, r3, r7
 8005eee:	1862      	adds	r2, r4, r1
 8005ef0:	19d2      	adds	r2, r2, r7
 8005ef2:	7812      	ldrb	r2, [r2, #0]
 8005ef4:	701a      	strb	r2, [r3, #0]
					tResponse = 'B';
 8005ef6:	2348      	movs	r3, #72	; 0x48
 8005ef8:	33ff      	adds	r3, #255	; 0xff
 8005efa:	185b      	adds	r3, r3, r1
 8005efc:	19db      	adds	r3, r3, r7
 8005efe:	2242      	movs	r2, #66	; 0x42
 8005f00:	701a      	strb	r2, [r3, #0]
					break;
 8005f02:	e042      	b.n	8005f8a <HAL_TIM_PeriodElapsedCallback+0x1796>
				if (ptr2 != NULL) {
 8005f04:	23cc      	movs	r3, #204	; 0xcc
 8005f06:	2118      	movs	r1, #24
 8005f08:	185b      	adds	r3, r3, r1
 8005f0a:	19db      	adds	r3, r3, r7
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d010      	beq.n	8005f34 <HAL_TIM_PeriodElapsedCallback+0x1740>
					tLine = i;
 8005f12:	2322      	movs	r3, #34	; 0x22
 8005f14:	33ff      	adds	r3, #255	; 0xff
 8005f16:	185b      	adds	r3, r3, r1
 8005f18:	19db      	adds	r3, r3, r7
 8005f1a:	2290      	movs	r2, #144	; 0x90
 8005f1c:	0052      	lsls	r2, r2, #1
 8005f1e:	1852      	adds	r2, r2, r1
 8005f20:	19d2      	adds	r2, r2, r7
 8005f22:	7812      	ldrb	r2, [r2, #0]
 8005f24:	701a      	strb	r2, [r3, #0]
					tResponse = 'B';
 8005f26:	2348      	movs	r3, #72	; 0x48
 8005f28:	33ff      	adds	r3, #255	; 0xff
 8005f2a:	185b      	adds	r3, r3, r1
 8005f2c:	19db      	adds	r3, r3, r7
 8005f2e:	2242      	movs	r2, #66	; 0x42
 8005f30:	701a      	strb	r2, [r3, #0]
					break;
 8005f32:	e02a      	b.n	8005f8a <HAL_TIM_PeriodElapsedCallback+0x1796>
				if (ptr3 != NULL) {
 8005f34:	23c8      	movs	r3, #200	; 0xc8
 8005f36:	2118      	movs	r1, #24
 8005f38:	185b      	adds	r3, r3, r1
 8005f3a:	19db      	adds	r3, r3, r7
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d010      	beq.n	8005f64 <HAL_TIM_PeriodElapsedCallback+0x1770>
					tLine = i;
 8005f42:	2322      	movs	r3, #34	; 0x22
 8005f44:	33ff      	adds	r3, #255	; 0xff
 8005f46:	185b      	adds	r3, r3, r1
 8005f48:	19db      	adds	r3, r3, r7
 8005f4a:	2290      	movs	r2, #144	; 0x90
 8005f4c:	0052      	lsls	r2, r2, #1
 8005f4e:	1852      	adds	r2, r2, r1
 8005f50:	19d2      	adds	r2, r2, r7
 8005f52:	7812      	ldrb	r2, [r2, #0]
 8005f54:	701a      	strb	r2, [r3, #0]
					tResponse = 'G';
 8005f56:	2348      	movs	r3, #72	; 0x48
 8005f58:	33ff      	adds	r3, #255	; 0xff
 8005f5a:	185b      	adds	r3, r3, r1
 8005f5c:	19db      	adds	r3, r3, r7
 8005f5e:	2247      	movs	r2, #71	; 0x47
 8005f60:	701a      	strb	r2, [r3, #0]
					break;
 8005f62:	e012      	b.n	8005f8a <HAL_TIM_PeriodElapsedCallback+0x1796>
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 8005f64:	2190      	movs	r1, #144	; 0x90
 8005f66:	0049      	lsls	r1, r1, #1
 8005f68:	2018      	movs	r0, #24
 8005f6a:	180b      	adds	r3, r1, r0
 8005f6c:	19db      	adds	r3, r3, r7
 8005f6e:	781a      	ldrb	r2, [r3, #0]
 8005f70:	180b      	adds	r3, r1, r0
 8005f72:	19db      	adds	r3, r3, r7
 8005f74:	3201      	adds	r2, #1
 8005f76:	701a      	strb	r2, [r3, #0]
 8005f78:	2390      	movs	r3, #144	; 0x90
 8005f7a:	005b      	lsls	r3, r3, #1
 8005f7c:	2218      	movs	r2, #24
 8005f7e:	189b      	adds	r3, r3, r2
 8005f80:	19db      	adds	r3, r3, r7
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	2b05      	cmp	r3, #5
 8005f86:	d800      	bhi.n	8005f8a <HAL_TIM_PeriodElapsedCallback+0x1796>
 8005f88:	e771      	b.n	8005e6e <HAL_TIM_PeriodElapsedCallback+0x167a>
			if (tLine != 99) {
 8005f8a:	2322      	movs	r3, #34	; 0x22
 8005f8c:	33ff      	adds	r3, #255	; 0xff
 8005f8e:	2218      	movs	r2, #24
 8005f90:	189b      	adds	r3, r3, r2
 8005f92:	19db      	adds	r3, r3, r7
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	2b63      	cmp	r3, #99	; 0x63
 8005f98:	d01b      	beq.n	8005fd2 <HAL_TIM_PeriodElapsedCallback+0x17de>
				if (tResponse == 'G') {
 8005f9a:	2348      	movs	r3, #72	; 0x48
 8005f9c:	33ff      	adds	r3, #255	; 0xff
 8005f9e:	189b      	adds	r3, r3, r2
 8005fa0:	19db      	adds	r3, r3, r7
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	2b47      	cmp	r3, #71	; 0x47
 8005fa6:	d105      	bne.n	8005fb4 <HAL_TIM_PeriodElapsedCallback+0x17c0>
					isResponseOk = 1;
 8005fa8:	4b65      	ldr	r3, [pc, #404]	; (8006140 <HAL_TIM_PeriodElapsedCallback+0x194c>)
 8005faa:	2201      	movs	r2, #1
 8005fac:	701a      	strb	r2, [r3, #0]
					clearit();
 8005fae:	f000 ff8f 	bl	8006ed0 <clearit>
}
 8005fb2:	e369      	b.n	8006688 <HAL_TIM_PeriodElapsedCallback+0x1e94>
				} else if (tResponse == 'B') {
 8005fb4:	2348      	movs	r3, #72	; 0x48
 8005fb6:	33ff      	adds	r3, #255	; 0xff
 8005fb8:	2218      	movs	r2, #24
 8005fba:	189b      	adds	r3, r3, r2
 8005fbc:	19db      	adds	r3, r3, r7
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	2b42      	cmp	r3, #66	; 0x42
 8005fc2:	d000      	beq.n	8005fc6 <HAL_TIM_PeriodElapsedCallback+0x17d2>
 8005fc4:	e360      	b.n	8006688 <HAL_TIM_PeriodElapsedCallback+0x1e94>
					isResponseOk = 0;
 8005fc6:	4b5e      	ldr	r3, [pc, #376]	; (8006140 <HAL_TIM_PeriodElapsedCallback+0x194c>)
 8005fc8:	2200      	movs	r2, #0
 8005fca:	701a      	strb	r2, [r3, #0]
					clearit();
 8005fcc:	f000 ff80 	bl	8006ed0 <clearit>
}
 8005fd0:	e35a      	b.n	8006688 <HAL_TIM_PeriodElapsedCallback+0x1e94>
				resTimeout--;
 8005fd2:	4b5e      	ldr	r3, [pc, #376]	; (800614c <HAL_TIM_PeriodElapsedCallback+0x1958>)
 8005fd4:	881b      	ldrh	r3, [r3, #0]
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	3b01      	subs	r3, #1
 8005fda:	b29a      	uxth	r2, r3
 8005fdc:	4b5b      	ldr	r3, [pc, #364]	; (800614c <HAL_TIM_PeriodElapsedCallback+0x1958>)
 8005fde:	801a      	strh	r2, [r3, #0]
				if (resTimeout < 1) {
 8005fe0:	4b5a      	ldr	r3, [pc, #360]	; (800614c <HAL_TIM_PeriodElapsedCallback+0x1958>)
 8005fe2:	881b      	ldrh	r3, [r3, #0]
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d000      	beq.n	8005fec <HAL_TIM_PeriodElapsedCallback+0x17f8>
 8005fea:	e34d      	b.n	8006688 <HAL_TIM_PeriodElapsedCallback+0x1e94>
					if (!recResponse) {
 8005fec:	4b58      	ldr	r3, [pc, #352]	; (8006150 <HAL_TIM_PeriodElapsedCallback+0x195c>)
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d101      	bne.n	8005ffa <HAL_TIM_PeriodElapsedCallback+0x1806>
						rebootsystem();
 8005ff6:	f000 fb71 	bl	80066dc <rebootsystem>
					clearit();
 8005ffa:	f000 ff69 	bl	8006ed0 <clearit>
					isResponseOk = 0;
 8005ffe:	4b50      	ldr	r3, [pc, #320]	; (8006140 <HAL_TIM_PeriodElapsedCallback+0x194c>)
 8006000:	2200      	movs	r2, #0
 8006002:	701a      	strb	r2, [r3, #0]
}
 8006004:	e340      	b.n	8006688 <HAL_TIM_PeriodElapsedCallback+0x1e94>
		} else if (commandCase == 7) { //cmgs response check
 8006006:	4b53      	ldr	r3, [pc, #332]	; (8006154 <HAL_TIM_PeriodElapsedCallback+0x1960>)
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	b2db      	uxtb	r3, r3
 800600c:	2b07      	cmp	r3, #7
 800600e:	d000      	beq.n	8006012 <HAL_TIM_PeriodElapsedCallback+0x181e>
 8006010:	e0c6      	b.n	80061a0 <HAL_TIM_PeriodElapsedCallback+0x19ac>
			uint8_t tLine = 99;
 8006012:	2320      	movs	r3, #32
 8006014:	33ff      	adds	r3, #255	; 0xff
 8006016:	2118      	movs	r1, #24
 8006018:	185b      	adds	r3, r3, r1
 800601a:	19db      	adds	r3, r3, r7
 800601c:	2263      	movs	r2, #99	; 0x63
 800601e:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 8006020:	238f      	movs	r3, #143	; 0x8f
 8006022:	005b      	lsls	r3, r3, #1
 8006024:	185b      	adds	r3, r3, r1
 8006026:	19db      	adds	r3, r3, r7
 8006028:	2200      	movs	r2, #0
 800602a:	701a      	strb	r2, [r3, #0]
 800602c:	e05b      	b.n	80060e6 <HAL_TIM_PeriodElapsedCallback+0x18f2>
				ptr = strstr(responseBuffer[i], "+CMGS:");
 800602e:	248f      	movs	r4, #143	; 0x8f
 8006030:	0064      	lsls	r4, r4, #1
 8006032:	2618      	movs	r6, #24
 8006034:	19a3      	adds	r3, r4, r6
 8006036:	19db      	adds	r3, r3, r7
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	2232      	movs	r2, #50	; 0x32
 800603c:	435a      	muls	r2, r3
 800603e:	4b46      	ldr	r3, [pc, #280]	; (8006158 <HAL_TIM_PeriodElapsedCallback+0x1964>)
 8006040:	18d3      	adds	r3, r2, r3
 8006042:	4a49      	ldr	r2, [pc, #292]	; (8006168 <HAL_TIM_PeriodElapsedCallback+0x1974>)
 8006044:	0011      	movs	r1, r2
 8006046:	0018      	movs	r0, r3
 8006048:	f009 f835 	bl	800f0b6 <strstr>
 800604c:	0003      	movs	r3, r0
 800604e:	25d8      	movs	r5, #216	; 0xd8
 8006050:	19aa      	adds	r2, r5, r6
 8006052:	19d2      	adds	r2, r2, r7
 8006054:	6013      	str	r3, [r2, #0]
				ptr2 = strstr(responseBuffer[i], "ERROR");
 8006056:	19a3      	adds	r3, r4, r6
 8006058:	19db      	adds	r3, r3, r7
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	2232      	movs	r2, #50	; 0x32
 800605e:	435a      	muls	r2, r3
 8006060:	4b3d      	ldr	r3, [pc, #244]	; (8006158 <HAL_TIM_PeriodElapsedCallback+0x1964>)
 8006062:	18d3      	adds	r3, r2, r3
 8006064:	4a3e      	ldr	r2, [pc, #248]	; (8006160 <HAL_TIM_PeriodElapsedCallback+0x196c>)
 8006066:	0011      	movs	r1, r2
 8006068:	0018      	movs	r0, r3
 800606a:	f009 f824 	bl	800f0b6 <strstr>
 800606e:	0003      	movs	r3, r0
 8006070:	22d4      	movs	r2, #212	; 0xd4
 8006072:	0031      	movs	r1, r6
 8006074:	1852      	adds	r2, r2, r1
 8006076:	19d2      	adds	r2, r2, r7
 8006078:	6013      	str	r3, [r2, #0]
				if (ptr != NULL) {
 800607a:	186b      	adds	r3, r5, r1
 800607c:	19db      	adds	r3, r3, r7
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d00e      	beq.n	80060a2 <HAL_TIM_PeriodElapsedCallback+0x18ae>
					tLine = i;
 8006084:	2320      	movs	r3, #32
 8006086:	33ff      	adds	r3, #255	; 0xff
 8006088:	185b      	adds	r3, r3, r1
 800608a:	19db      	adds	r3, r3, r7
 800608c:	1862      	adds	r2, r4, r1
 800608e:	19d2      	adds	r2, r2, r7
 8006090:	7812      	ldrb	r2, [r2, #0]
 8006092:	701a      	strb	r2, [r3, #0]
					tResponse = 'G';
 8006094:	2348      	movs	r3, #72	; 0x48
 8006096:	33ff      	adds	r3, #255	; 0xff
 8006098:	185b      	adds	r3, r3, r1
 800609a:	19db      	adds	r3, r3, r7
 800609c:	2247      	movs	r2, #71	; 0x47
 800609e:	701a      	strb	r2, [r3, #0]
					break;
 80060a0:	e029      	b.n	80060f6 <HAL_TIM_PeriodElapsedCallback+0x1902>
				if (ptr2 != NULL) {
 80060a2:	23d4      	movs	r3, #212	; 0xd4
 80060a4:	2118      	movs	r1, #24
 80060a6:	185b      	adds	r3, r3, r1
 80060a8:	19db      	adds	r3, r3, r7
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d010      	beq.n	80060d2 <HAL_TIM_PeriodElapsedCallback+0x18de>
					tLine = i;
 80060b0:	2320      	movs	r3, #32
 80060b2:	33ff      	adds	r3, #255	; 0xff
 80060b4:	185b      	adds	r3, r3, r1
 80060b6:	19db      	adds	r3, r3, r7
 80060b8:	228f      	movs	r2, #143	; 0x8f
 80060ba:	0052      	lsls	r2, r2, #1
 80060bc:	1852      	adds	r2, r2, r1
 80060be:	19d2      	adds	r2, r2, r7
 80060c0:	7812      	ldrb	r2, [r2, #0]
 80060c2:	701a      	strb	r2, [r3, #0]
					tResponse = 'B';
 80060c4:	2348      	movs	r3, #72	; 0x48
 80060c6:	33ff      	adds	r3, #255	; 0xff
 80060c8:	185b      	adds	r3, r3, r1
 80060ca:	19db      	adds	r3, r3, r7
 80060cc:	2242      	movs	r2, #66	; 0x42
 80060ce:	701a      	strb	r2, [r3, #0]
					break;
 80060d0:	e011      	b.n	80060f6 <HAL_TIM_PeriodElapsedCallback+0x1902>
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 80060d2:	218f      	movs	r1, #143	; 0x8f
 80060d4:	0049      	lsls	r1, r1, #1
 80060d6:	2018      	movs	r0, #24
 80060d8:	180b      	adds	r3, r1, r0
 80060da:	19db      	adds	r3, r3, r7
 80060dc:	781a      	ldrb	r2, [r3, #0]
 80060de:	180b      	adds	r3, r1, r0
 80060e0:	19db      	adds	r3, r3, r7
 80060e2:	3201      	adds	r2, #1
 80060e4:	701a      	strb	r2, [r3, #0]
 80060e6:	238f      	movs	r3, #143	; 0x8f
 80060e8:	005b      	lsls	r3, r3, #1
 80060ea:	2218      	movs	r2, #24
 80060ec:	189b      	adds	r3, r3, r2
 80060ee:	19db      	adds	r3, r3, r7
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	2b05      	cmp	r3, #5
 80060f4:	d99b      	bls.n	800602e <HAL_TIM_PeriodElapsedCallback+0x183a>
			if (tLine != 99) {
 80060f6:	2320      	movs	r3, #32
 80060f8:	33ff      	adds	r3, #255	; 0xff
 80060fa:	2218      	movs	r2, #24
 80060fc:	189b      	adds	r3, r3, r2
 80060fe:	19db      	adds	r3, r3, r7
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	2b63      	cmp	r3, #99	; 0x63
 8006104:	d032      	beq.n	800616c <HAL_TIM_PeriodElapsedCallback+0x1978>
				if (tResponse == 'G') {
 8006106:	2348      	movs	r3, #72	; 0x48
 8006108:	33ff      	adds	r3, #255	; 0xff
 800610a:	189b      	adds	r3, r3, r2
 800610c:	19db      	adds	r3, r3, r7
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	2b47      	cmp	r3, #71	; 0x47
 8006112:	d105      	bne.n	8006120 <HAL_TIM_PeriodElapsedCallback+0x192c>
					isResponseOk = 1;
 8006114:	4b0a      	ldr	r3, [pc, #40]	; (8006140 <HAL_TIM_PeriodElapsedCallback+0x194c>)
 8006116:	2201      	movs	r2, #1
 8006118:	701a      	strb	r2, [r3, #0]
					clearit();
 800611a:	f000 fed9 	bl	8006ed0 <clearit>
}
 800611e:	e2b3      	b.n	8006688 <HAL_TIM_PeriodElapsedCallback+0x1e94>
				} else if (tResponse == 'B') {
 8006120:	2348      	movs	r3, #72	; 0x48
 8006122:	33ff      	adds	r3, #255	; 0xff
 8006124:	2218      	movs	r2, #24
 8006126:	189b      	adds	r3, r3, r2
 8006128:	19db      	adds	r3, r3, r7
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	2b42      	cmp	r3, #66	; 0x42
 800612e:	d000      	beq.n	8006132 <HAL_TIM_PeriodElapsedCallback+0x193e>
 8006130:	e2aa      	b.n	8006688 <HAL_TIM_PeriodElapsedCallback+0x1e94>
					isResponseOk = 1;
 8006132:	4b03      	ldr	r3, [pc, #12]	; (8006140 <HAL_TIM_PeriodElapsedCallback+0x194c>)
 8006134:	2201      	movs	r2, #1
 8006136:	701a      	strb	r2, [r3, #0]
					clearit();
 8006138:	f000 feca 	bl	8006ed0 <clearit>
}
 800613c:	e2a4      	b.n	8006688 <HAL_TIM_PeriodElapsedCallback+0x1e94>
 800613e:	46c0      	nop			; (mov r8, r8)
 8006140:	200008cc 	.word	0x200008cc
 8006144:	20000a78 	.word	0x20000a78
 8006148:	200008c6 	.word	0x200008c6
 800614c:	200008c8 	.word	0x200008c8
 8006150:	200008cd 	.word	0x200008cd
 8006154:	200008cb 	.word	0x200008cb
 8006158:	20000794 	.word	0x20000794
 800615c:	0801355c 	.word	0x0801355c
 8006160:	080134f4 	.word	0x080134f4
 8006164:	08013554 	.word	0x08013554
 8006168:	08013568 	.word	0x08013568
				resTimeout--;
 800616c:	4be0      	ldr	r3, [pc, #896]	; (80064f0 <HAL_TIM_PeriodElapsedCallback+0x1cfc>)
 800616e:	881b      	ldrh	r3, [r3, #0]
 8006170:	b29b      	uxth	r3, r3
 8006172:	3b01      	subs	r3, #1
 8006174:	b29a      	uxth	r2, r3
 8006176:	4bde      	ldr	r3, [pc, #888]	; (80064f0 <HAL_TIM_PeriodElapsedCallback+0x1cfc>)
 8006178:	801a      	strh	r2, [r3, #0]
				if (resTimeout < 1) {
 800617a:	4bdd      	ldr	r3, [pc, #884]	; (80064f0 <HAL_TIM_PeriodElapsedCallback+0x1cfc>)
 800617c:	881b      	ldrh	r3, [r3, #0]
 800617e:	b29b      	uxth	r3, r3
 8006180:	2b00      	cmp	r3, #0
 8006182:	d000      	beq.n	8006186 <HAL_TIM_PeriodElapsedCallback+0x1992>
 8006184:	e280      	b.n	8006688 <HAL_TIM_PeriodElapsedCallback+0x1e94>
					if (!recResponse) {
 8006186:	4bdb      	ldr	r3, [pc, #876]	; (80064f4 <HAL_TIM_PeriodElapsedCallback+0x1d00>)
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	b2db      	uxtb	r3, r3
 800618c:	2b00      	cmp	r3, #0
 800618e:	d101      	bne.n	8006194 <HAL_TIM_PeriodElapsedCallback+0x19a0>
						rebootsystem();
 8006190:	f000 faa4 	bl	80066dc <rebootsystem>
					isResponseOk = 0;
 8006194:	4bd8      	ldr	r3, [pc, #864]	; (80064f8 <HAL_TIM_PeriodElapsedCallback+0x1d04>)
 8006196:	2200      	movs	r2, #0
 8006198:	701a      	strb	r2, [r3, #0]
					clearit();
 800619a:	f000 fe99 	bl	8006ed0 <clearit>
}
 800619e:	e273      	b.n	8006688 <HAL_TIM_PeriodElapsedCallback+0x1e94>
		} else if (commandCase == 8) { //battery voltage response check
 80061a0:	4bd6      	ldr	r3, [pc, #856]	; (80064fc <HAL_TIM_PeriodElapsedCallback+0x1d08>)
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	2b08      	cmp	r3, #8
 80061a8:	d000      	beq.n	80061ac <HAL_TIM_PeriodElapsedCallback+0x19b8>
 80061aa:	e26d      	b.n	8006688 <HAL_TIM_PeriodElapsedCallback+0x1e94>
			uint8_t tLine = 99;
 80061ac:	231e      	movs	r3, #30
 80061ae:	33ff      	adds	r3, #255	; 0xff
 80061b0:	2118      	movs	r1, #24
 80061b2:	185b      	adds	r3, r3, r1
 80061b4:	19db      	adds	r3, r3, r7
 80061b6:	2263      	movs	r2, #99	; 0x63
 80061b8:	701a      	strb	r2, [r3, #0]
			memset(vData,0,sizeof(vData));
 80061ba:	2374      	movs	r3, #116	; 0x74
 80061bc:	000c      	movs	r4, r1
 80061be:	185b      	adds	r3, r3, r1
 80061c0:	19db      	adds	r3, r3, r7
 80061c2:	2214      	movs	r2, #20
 80061c4:	2100      	movs	r1, #0
 80061c6:	0018      	movs	r0, r3
 80061c8:	f008 ff1d 	bl	800f006 <memset>
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 80061cc:	238e      	movs	r3, #142	; 0x8e
 80061ce:	005b      	lsls	r3, r3, #1
 80061d0:	191b      	adds	r3, r3, r4
 80061d2:	19db      	adds	r3, r3, r7
 80061d4:	2200      	movs	r2, #0
 80061d6:	701a      	strb	r2, [r3, #0]
 80061d8:	e05b      	b.n	8006292 <HAL_TIM_PeriodElapsedCallback+0x1a9e>
				ptr = strstr(responseBuffer[i], "+CBC:");
 80061da:	248e      	movs	r4, #142	; 0x8e
 80061dc:	0064      	lsls	r4, r4, #1
 80061de:	2618      	movs	r6, #24
 80061e0:	19a3      	adds	r3, r4, r6
 80061e2:	19db      	adds	r3, r3, r7
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	2232      	movs	r2, #50	; 0x32
 80061e8:	435a      	muls	r2, r3
 80061ea:	4bc5      	ldr	r3, [pc, #788]	; (8006500 <HAL_TIM_PeriodElapsedCallback+0x1d0c>)
 80061ec:	18d3      	adds	r3, r2, r3
 80061ee:	4ac5      	ldr	r2, [pc, #788]	; (8006504 <HAL_TIM_PeriodElapsedCallback+0x1d10>)
 80061f0:	0011      	movs	r1, r2
 80061f2:	0018      	movs	r0, r3
 80061f4:	f008 ff5f 	bl	800f0b6 <strstr>
 80061f8:	0003      	movs	r3, r0
 80061fa:	25e0      	movs	r5, #224	; 0xe0
 80061fc:	19aa      	adds	r2, r5, r6
 80061fe:	19d2      	adds	r2, r2, r7
 8006200:	6013      	str	r3, [r2, #0]
				ptr2 = strstr(responseBuffer[i], "ERROR");
 8006202:	19a3      	adds	r3, r4, r6
 8006204:	19db      	adds	r3, r3, r7
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	2232      	movs	r2, #50	; 0x32
 800620a:	435a      	muls	r2, r3
 800620c:	4bbc      	ldr	r3, [pc, #752]	; (8006500 <HAL_TIM_PeriodElapsedCallback+0x1d0c>)
 800620e:	18d3      	adds	r3, r2, r3
 8006210:	4abd      	ldr	r2, [pc, #756]	; (8006508 <HAL_TIM_PeriodElapsedCallback+0x1d14>)
 8006212:	0011      	movs	r1, r2
 8006214:	0018      	movs	r0, r3
 8006216:	f008 ff4e 	bl	800f0b6 <strstr>
 800621a:	0003      	movs	r3, r0
 800621c:	22dc      	movs	r2, #220	; 0xdc
 800621e:	0031      	movs	r1, r6
 8006220:	1852      	adds	r2, r2, r1
 8006222:	19d2      	adds	r2, r2, r7
 8006224:	6013      	str	r3, [r2, #0]
				if (ptr != NULL) {
 8006226:	186b      	adds	r3, r5, r1
 8006228:	19db      	adds	r3, r3, r7
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d00e      	beq.n	800624e <HAL_TIM_PeriodElapsedCallback+0x1a5a>
					tLine = i;
 8006230:	231e      	movs	r3, #30
 8006232:	33ff      	adds	r3, #255	; 0xff
 8006234:	185b      	adds	r3, r3, r1
 8006236:	19db      	adds	r3, r3, r7
 8006238:	1862      	adds	r2, r4, r1
 800623a:	19d2      	adds	r2, r2, r7
 800623c:	7812      	ldrb	r2, [r2, #0]
 800623e:	701a      	strb	r2, [r3, #0]
					tResponse = 'G';
 8006240:	2348      	movs	r3, #72	; 0x48
 8006242:	33ff      	adds	r3, #255	; 0xff
 8006244:	185b      	adds	r3, r3, r1
 8006246:	19db      	adds	r3, r3, r7
 8006248:	2247      	movs	r2, #71	; 0x47
 800624a:	701a      	strb	r2, [r3, #0]
					break;
 800624c:	e029      	b.n	80062a2 <HAL_TIM_PeriodElapsedCallback+0x1aae>
				if (ptr2 != NULL) {
 800624e:	23dc      	movs	r3, #220	; 0xdc
 8006250:	2118      	movs	r1, #24
 8006252:	185b      	adds	r3, r3, r1
 8006254:	19db      	adds	r3, r3, r7
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d010      	beq.n	800627e <HAL_TIM_PeriodElapsedCallback+0x1a8a>
					tLine = i;
 800625c:	231e      	movs	r3, #30
 800625e:	33ff      	adds	r3, #255	; 0xff
 8006260:	185b      	adds	r3, r3, r1
 8006262:	19db      	adds	r3, r3, r7
 8006264:	228e      	movs	r2, #142	; 0x8e
 8006266:	0052      	lsls	r2, r2, #1
 8006268:	1852      	adds	r2, r2, r1
 800626a:	19d2      	adds	r2, r2, r7
 800626c:	7812      	ldrb	r2, [r2, #0]
 800626e:	701a      	strb	r2, [r3, #0]
					tResponse = 'B';
 8006270:	2348      	movs	r3, #72	; 0x48
 8006272:	33ff      	adds	r3, #255	; 0xff
 8006274:	185b      	adds	r3, r3, r1
 8006276:	19db      	adds	r3, r3, r7
 8006278:	2242      	movs	r2, #66	; 0x42
 800627a:	701a      	strb	r2, [r3, #0]
					break;
 800627c:	e011      	b.n	80062a2 <HAL_TIM_PeriodElapsedCallback+0x1aae>
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 800627e:	218e      	movs	r1, #142	; 0x8e
 8006280:	0049      	lsls	r1, r1, #1
 8006282:	2018      	movs	r0, #24
 8006284:	180b      	adds	r3, r1, r0
 8006286:	19db      	adds	r3, r3, r7
 8006288:	781a      	ldrb	r2, [r3, #0]
 800628a:	180b      	adds	r3, r1, r0
 800628c:	19db      	adds	r3, r3, r7
 800628e:	3201      	adds	r2, #1
 8006290:	701a      	strb	r2, [r3, #0]
 8006292:	238e      	movs	r3, #142	; 0x8e
 8006294:	005b      	lsls	r3, r3, #1
 8006296:	2218      	movs	r2, #24
 8006298:	189b      	adds	r3, r3, r2
 800629a:	19db      	adds	r3, r3, r7
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	2b05      	cmp	r3, #5
 80062a0:	d99b      	bls.n	80061da <HAL_TIM_PeriodElapsedCallback+0x19e6>
			if (tLine != 99) {
 80062a2:	231e      	movs	r3, #30
 80062a4:	33ff      	adds	r3, #255	; 0xff
 80062a6:	2118      	movs	r1, #24
 80062a8:	185b      	adds	r3, r3, r1
 80062aa:	19db      	adds	r3, r3, r7
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	2b63      	cmp	r3, #99	; 0x63
 80062b0:	d100      	bne.n	80062b4 <HAL_TIM_PeriodElapsedCallback+0x1ac0>
 80062b2:	e086      	b.n	80063c2 <HAL_TIM_PeriodElapsedCallback+0x1bce>
				if (tResponse == 'G') {
 80062b4:	2348      	movs	r3, #72	; 0x48
 80062b6:	33ff      	adds	r3, #255	; 0xff
 80062b8:	185b      	adds	r3, r3, r1
 80062ba:	19db      	adds	r3, r3, r7
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	2b47      	cmp	r3, #71	; 0x47
 80062c0:	d170      	bne.n	80063a4 <HAL_TIM_PeriodElapsedCallback+0x1bb0>
					uint8_t totalCommas = 0;
 80062c2:	231c      	movs	r3, #28
 80062c4:	33ff      	adds	r3, #255	; 0xff
 80062c6:	185b      	adds	r3, r3, r1
 80062c8:	19db      	adds	r3, r3, r7
 80062ca:	2200      	movs	r2, #0
 80062cc:	701a      	strb	r2, [r3, #0]
					for(uint8_t coms=0;coms<15;coms++){
 80062ce:	238d      	movs	r3, #141	; 0x8d
 80062d0:	005b      	lsls	r3, r3, #1
 80062d2:	185b      	adds	r3, r3, r1
 80062d4:	19db      	adds	r3, r3, r7
 80062d6:	2200      	movs	r2, #0
 80062d8:	701a      	strb	r2, [r3, #0]
 80062da:	e043      	b.n	8006364 <HAL_TIM_PeriodElapsedCallback+0x1b70>
						if(responseBuffer[tLine][coms]==','){
 80062dc:	231e      	movs	r3, #30
 80062de:	33ff      	adds	r3, #255	; 0xff
 80062e0:	2418      	movs	r4, #24
 80062e2:	191b      	adds	r3, r3, r4
 80062e4:	19db      	adds	r3, r3, r7
 80062e6:	781a      	ldrb	r2, [r3, #0]
 80062e8:	238d      	movs	r3, #141	; 0x8d
 80062ea:	005b      	lsls	r3, r3, #1
 80062ec:	191b      	adds	r3, r3, r4
 80062ee:	19db      	adds	r3, r3, r7
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	4983      	ldr	r1, [pc, #524]	; (8006500 <HAL_TIM_PeriodElapsedCallback+0x1d0c>)
 80062f4:	2032      	movs	r0, #50	; 0x32
 80062f6:	4342      	muls	r2, r0
 80062f8:	188a      	adds	r2, r1, r2
 80062fa:	5cd3      	ldrb	r3, [r2, r3]
 80062fc:	2b2c      	cmp	r3, #44	; 0x2c
 80062fe:	d108      	bne.n	8006312 <HAL_TIM_PeriodElapsedCallback+0x1b1e>
							totalCommas++;
 8006300:	211c      	movs	r1, #28
 8006302:	31ff      	adds	r1, #255	; 0xff
 8006304:	190b      	adds	r3, r1, r4
 8006306:	19db      	adds	r3, r3, r7
 8006308:	781a      	ldrb	r2, [r3, #0]
 800630a:	190b      	adds	r3, r1, r4
 800630c:	19db      	adds	r3, r3, r7
 800630e:	3201      	adds	r2, #1
 8006310:	701a      	strb	r2, [r3, #0]
						if(totalCommas==2){
 8006312:	231c      	movs	r3, #28
 8006314:	33ff      	adds	r3, #255	; 0xff
 8006316:	2018      	movs	r0, #24
 8006318:	181b      	adds	r3, r3, r0
 800631a:	19db      	adds	r3, r3, r7
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	2b02      	cmp	r3, #2
 8006320:	d116      	bne.n	8006350 <HAL_TIM_PeriodElapsedCallback+0x1b5c>
							substring(vData,responseBuffer[tLine],coms+1,4);
 8006322:	231e      	movs	r3, #30
 8006324:	33ff      	adds	r3, #255	; 0xff
 8006326:	181b      	adds	r3, r3, r0
 8006328:	19db      	adds	r3, r3, r7
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	2232      	movs	r2, #50	; 0x32
 800632e:	435a      	muls	r2, r3
 8006330:	4b73      	ldr	r3, [pc, #460]	; (8006500 <HAL_TIM_PeriodElapsedCallback+0x1d0c>)
 8006332:	18d1      	adds	r1, r2, r3
 8006334:	238d      	movs	r3, #141	; 0x8d
 8006336:	005b      	lsls	r3, r3, #1
 8006338:	181b      	adds	r3, r3, r0
 800633a:	19db      	adds	r3, r3, r7
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	3301      	adds	r3, #1
 8006340:	b2da      	uxtb	r2, r3
 8006342:	2374      	movs	r3, #116	; 0x74
 8006344:	181b      	adds	r3, r3, r0
 8006346:	19d8      	adds	r0, r3, r7
 8006348:	2304      	movs	r3, #4
 800634a:	f001 fb91 	bl	8007a70 <substring>
							break;
 800634e:	e011      	b.n	8006374 <HAL_TIM_PeriodElapsedCallback+0x1b80>
					for(uint8_t coms=0;coms<15;coms++){
 8006350:	218d      	movs	r1, #141	; 0x8d
 8006352:	0049      	lsls	r1, r1, #1
 8006354:	2018      	movs	r0, #24
 8006356:	180b      	adds	r3, r1, r0
 8006358:	19db      	adds	r3, r3, r7
 800635a:	781a      	ldrb	r2, [r3, #0]
 800635c:	180b      	adds	r3, r1, r0
 800635e:	19db      	adds	r3, r3, r7
 8006360:	3201      	adds	r2, #1
 8006362:	701a      	strb	r2, [r3, #0]
 8006364:	238d      	movs	r3, #141	; 0x8d
 8006366:	005b      	lsls	r3, r3, #1
 8006368:	2218      	movs	r2, #24
 800636a:	189b      	adds	r3, r3, r2
 800636c:	19db      	adds	r3, r3, r7
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	2b0e      	cmp	r3, #14
 8006372:	d9b3      	bls.n	80062dc <HAL_TIM_PeriodElapsedCallback+0x1ae8>
					if(totalCommas==2){
 8006374:	231c      	movs	r3, #28
 8006376:	33ff      	adds	r3, #255	; 0xff
 8006378:	2218      	movs	r2, #24
 800637a:	189b      	adds	r3, r3, r2
 800637c:	19db      	adds	r3, r3, r7
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	2b02      	cmp	r3, #2
 8006382:	d109      	bne.n	8006398 <HAL_TIM_PeriodElapsedCallback+0x1ba4>
						voltage = atoi(vData);
 8006384:	2374      	movs	r3, #116	; 0x74
 8006386:	189b      	adds	r3, r3, r2
 8006388:	19db      	adds	r3, r3, r7
 800638a:	0018      	movs	r0, r3
 800638c:	f008 fddc 	bl	800ef48 <atoi>
 8006390:	0003      	movs	r3, r0
 8006392:	b29a      	uxth	r2, r3
 8006394:	4b5d      	ldr	r3, [pc, #372]	; (800650c <HAL_TIM_PeriodElapsedCallback+0x1d18>)
 8006396:	801a      	strh	r2, [r3, #0]
					isResponseOk = 1;
 8006398:	4b57      	ldr	r3, [pc, #348]	; (80064f8 <HAL_TIM_PeriodElapsedCallback+0x1d04>)
 800639a:	2201      	movs	r2, #1
 800639c:	701a      	strb	r2, [r3, #0]
					clearit();
 800639e:	f000 fd97 	bl	8006ed0 <clearit>
}
 80063a2:	e171      	b.n	8006688 <HAL_TIM_PeriodElapsedCallback+0x1e94>
				} else if (tResponse == 'B') {
 80063a4:	2348      	movs	r3, #72	; 0x48
 80063a6:	33ff      	adds	r3, #255	; 0xff
 80063a8:	2218      	movs	r2, #24
 80063aa:	189b      	adds	r3, r3, r2
 80063ac:	19db      	adds	r3, r3, r7
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	2b42      	cmp	r3, #66	; 0x42
 80063b2:	d000      	beq.n	80063b6 <HAL_TIM_PeriodElapsedCallback+0x1bc2>
 80063b4:	e168      	b.n	8006688 <HAL_TIM_PeriodElapsedCallback+0x1e94>
					isResponseOk = 1;
 80063b6:	4b50      	ldr	r3, [pc, #320]	; (80064f8 <HAL_TIM_PeriodElapsedCallback+0x1d04>)
 80063b8:	2201      	movs	r2, #1
 80063ba:	701a      	strb	r2, [r3, #0]
					clearit();
 80063bc:	f000 fd88 	bl	8006ed0 <clearit>
}
 80063c0:	e162      	b.n	8006688 <HAL_TIM_PeriodElapsedCallback+0x1e94>
				resTimeout--;
 80063c2:	4b4b      	ldr	r3, [pc, #300]	; (80064f0 <HAL_TIM_PeriodElapsedCallback+0x1cfc>)
 80063c4:	881b      	ldrh	r3, [r3, #0]
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	3b01      	subs	r3, #1
 80063ca:	b29a      	uxth	r2, r3
 80063cc:	4b48      	ldr	r3, [pc, #288]	; (80064f0 <HAL_TIM_PeriodElapsedCallback+0x1cfc>)
 80063ce:	801a      	strh	r2, [r3, #0]
				if (resTimeout < 1) {
 80063d0:	4b47      	ldr	r3, [pc, #284]	; (80064f0 <HAL_TIM_PeriodElapsedCallback+0x1cfc>)
 80063d2:	881b      	ldrh	r3, [r3, #0]
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d000      	beq.n	80063dc <HAL_TIM_PeriodElapsedCallback+0x1be8>
 80063da:	e155      	b.n	8006688 <HAL_TIM_PeriodElapsedCallback+0x1e94>
					if (!recResponse) {
 80063dc:	4b45      	ldr	r3, [pc, #276]	; (80064f4 <HAL_TIM_PeriodElapsedCallback+0x1d00>)
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d101      	bne.n	80063ea <HAL_TIM_PeriodElapsedCallback+0x1bf6>
						rebootsystem();
 80063e6:	f000 f979 	bl	80066dc <rebootsystem>
					isResponseOk = 0;
 80063ea:	4b43      	ldr	r3, [pc, #268]	; (80064f8 <HAL_TIM_PeriodElapsedCallback+0x1d04>)
 80063ec:	2200      	movs	r2, #0
 80063ee:	701a      	strb	r2, [r3, #0]
					clearit();
 80063f0:	f000 fd6e 	bl	8006ed0 <clearit>
}
 80063f4:	e148      	b.n	8006688 <HAL_TIM_PeriodElapsedCallback+0x1e94>
	else if(htim == &htim3){
 80063f6:	69fa      	ldr	r2, [r7, #28]
 80063f8:	4b45      	ldr	r3, [pc, #276]	; (8006510 <HAL_TIM_PeriodElapsedCallback+0x1d1c>)
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d100      	bne.n	8006400 <HAL_TIM_PeriodElapsedCallback+0x1c0c>
 80063fe:	e143      	b.n	8006688 <HAL_TIM_PeriodElapsedCallback+0x1e94>
	else if (htim == &htim17) {
 8006400:	69fa      	ldr	r2, [r7, #28]
 8006402:	4b44      	ldr	r3, [pc, #272]	; (8006514 <HAL_TIM_PeriodElapsedCallback+0x1d20>)
 8006404:	429a      	cmp	r2, r3
 8006406:	d000      	beq.n	800640a <HAL_TIM_PeriodElapsedCallback+0x1c16>
 8006408:	e13e      	b.n	8006688 <HAL_TIM_PeriodElapsedCallback+0x1e94>
		hangCounter = 0;
 800640a:	4b43      	ldr	r3, [pc, #268]	; (8006518 <HAL_TIM_PeriodElapsedCallback+0x1d24>)
 800640c:	2200      	movs	r2, #0
 800640e:	601a      	str	r2, [r3, #0]
		for(uint8_t tLine =0; tLine< nmeaLC; tLine++){
 8006410:	231a      	movs	r3, #26
 8006412:	33ff      	adds	r3, #255	; 0xff
 8006414:	2218      	movs	r2, #24
 8006416:	189b      	adds	r3, r3, r2
 8006418:	19db      	adds	r3, r3, r7
 800641a:	2200      	movs	r2, #0
 800641c:	701a      	strb	r2, [r3, #0]
 800641e:	e094      	b.n	800654a <HAL_TIM_PeriodElapsedCallback+0x1d56>
			uint8_t commandSize = 0;
 8006420:	238c      	movs	r3, #140	; 0x8c
 8006422:	005b      	lsls	r3, r3, #1
 8006424:	2418      	movs	r4, #24
 8006426:	191b      	adds	r3, r3, r4
 8006428:	19db      	adds	r3, r3, r7
 800642a:	2200      	movs	r2, #0
 800642c:	701a      	strb	r2, [r3, #0]
			tempSentenceCheck = strstr(nmeaResponse[tLine],"VTG");
 800642e:	231a      	movs	r3, #26
 8006430:	33ff      	adds	r3, #255	; 0xff
 8006432:	191b      	adds	r3, r3, r4
 8006434:	19db      	adds	r3, r3, r7
 8006436:	781a      	ldrb	r2, [r3, #0]
 8006438:	0013      	movs	r3, r2
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	189b      	adds	r3, r3, r2
 800643e:	011a      	lsls	r2, r3, #4
 8006440:	189b      	adds	r3, r3, r2
 8006442:	4a36      	ldr	r2, [pc, #216]	; (800651c <HAL_TIM_PeriodElapsedCallback+0x1d28>)
 8006444:	189b      	adds	r3, r3, r2
 8006446:	4a36      	ldr	r2, [pc, #216]	; (8006520 <HAL_TIM_PeriodElapsedCallback+0x1d2c>)
 8006448:	0011      	movs	r1, r2
 800644a:	0018      	movs	r0, r3
 800644c:	f008 fe33 	bl	800f0b6 <strstr>
 8006450:	0003      	movs	r3, r0
 8006452:	2284      	movs	r2, #132	; 0x84
 8006454:	0052      	lsls	r2, r2, #1
 8006456:	1911      	adds	r1, r2, r4
 8006458:	19c9      	adds	r1, r1, r7
 800645a:	600b      	str	r3, [r1, #0]
			if(tempSentenceCheck != NULL){
 800645c:	1913      	adds	r3, r2, r4
 800645e:	19db      	adds	r3, r3, r7
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d00d      	beq.n	8006482 <HAL_TIM_PeriodElapsedCallback+0x1c8e>
				HAL_UART_Transmit(&GNSS_PORT, "$PMTK314,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*28\r\n",51,2000);
 8006466:	23fa      	movs	r3, #250	; 0xfa
 8006468:	00db      	lsls	r3, r3, #3
 800646a:	492e      	ldr	r1, [pc, #184]	; (8006524 <HAL_TIM_PeriodElapsedCallback+0x1d30>)
 800646c:	482e      	ldr	r0, [pc, #184]	; (8006528 <HAL_TIM_PeriodElapsedCallback+0x1d34>)
 800646e:	2233      	movs	r2, #51	; 0x33
 8006470:	f006 fe6e 	bl	800d150 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart4, "GNS SET\r\n", 9, 500);
 8006474:	23fa      	movs	r3, #250	; 0xfa
 8006476:	005b      	lsls	r3, r3, #1
 8006478:	492c      	ldr	r1, [pc, #176]	; (800652c <HAL_TIM_PeriodElapsedCallback+0x1d38>)
 800647a:	482d      	ldr	r0, [pc, #180]	; (8006530 <HAL_TIM_PeriodElapsedCallback+0x1d3c>)
 800647c:	2209      	movs	r2, #9
 800647e:	f006 fe67 	bl	800d150 <HAL_UART_Transmit>
			for(uint8_t tChar =0 ;tChar<NMEA_MAX_CHARS;tChar++) {
 8006482:	2318      	movs	r3, #24
 8006484:	33ff      	adds	r3, #255	; 0xff
 8006486:	2218      	movs	r2, #24
 8006488:	189b      	adds	r3, r3, r2
 800648a:	19db      	adds	r3, r3, r7
 800648c:	2200      	movs	r2, #0
 800648e:	701a      	strb	r2, [r3, #0]
 8006490:	e024      	b.n	80064dc <HAL_TIM_PeriodElapsedCallback+0x1ce8>
				if(nmeaResponse[tLine][tChar] != NULL){
 8006492:	231a      	movs	r3, #26
 8006494:	33ff      	adds	r3, #255	; 0xff
 8006496:	2518      	movs	r5, #24
 8006498:	195b      	adds	r3, r3, r5
 800649a:	19db      	adds	r3, r3, r7
 800649c:	781a      	ldrb	r2, [r3, #0]
 800649e:	2418      	movs	r4, #24
 80064a0:	34ff      	adds	r4, #255	; 0xff
 80064a2:	1963      	adds	r3, r4, r5
 80064a4:	19db      	adds	r3, r3, r7
 80064a6:	7819      	ldrb	r1, [r3, #0]
 80064a8:	481c      	ldr	r0, [pc, #112]	; (800651c <HAL_TIM_PeriodElapsedCallback+0x1d28>)
 80064aa:	0013      	movs	r3, r2
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	189b      	adds	r3, r3, r2
 80064b0:	011a      	lsls	r2, r3, #4
 80064b2:	189b      	adds	r3, r3, r2
 80064b4:	18c3      	adds	r3, r0, r3
 80064b6:	5c5b      	ldrb	r3, [r3, r1]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d03b      	beq.n	8006534 <HAL_TIM_PeriodElapsedCallback+0x1d40>
					commandSize++;
 80064bc:	218c      	movs	r1, #140	; 0x8c
 80064be:	0049      	lsls	r1, r1, #1
 80064c0:	194b      	adds	r3, r1, r5
 80064c2:	19db      	adds	r3, r3, r7
 80064c4:	781a      	ldrb	r2, [r3, #0]
 80064c6:	194b      	adds	r3, r1, r5
 80064c8:	19db      	adds	r3, r3, r7
 80064ca:	3201      	adds	r2, #1
 80064cc:	701a      	strb	r2, [r3, #0]
			for(uint8_t tChar =0 ;tChar<NMEA_MAX_CHARS;tChar++) {
 80064ce:	1963      	adds	r3, r4, r5
 80064d0:	19db      	adds	r3, r3, r7
 80064d2:	781a      	ldrb	r2, [r3, #0]
 80064d4:	1963      	adds	r3, r4, r5
 80064d6:	19db      	adds	r3, r3, r7
 80064d8:	3201      	adds	r2, #1
 80064da:	701a      	strb	r2, [r3, #0]
 80064dc:	2318      	movs	r3, #24
 80064de:	33ff      	adds	r3, #255	; 0xff
 80064e0:	2218      	movs	r2, #24
 80064e2:	189b      	adds	r3, r3, r2
 80064e4:	19db      	adds	r3, r3, r7
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	2b54      	cmp	r3, #84	; 0x54
 80064ea:	d9d2      	bls.n	8006492 <HAL_TIM_PeriodElapsedCallback+0x1c9e>
 80064ec:	e023      	b.n	8006536 <HAL_TIM_PeriodElapsedCallback+0x1d42>
 80064ee:	46c0      	nop			; (mov r8, r8)
 80064f0:	200008c8 	.word	0x200008c8
 80064f4:	200008cd 	.word	0x200008cd
 80064f8:	200008cc 	.word	0x200008cc
 80064fc:	200008cb 	.word	0x200008cb
 8006500:	20000794 	.word	0x20000794
 8006504:	08013570 	.word	0x08013570
 8006508:	080134f4 	.word	0x080134f4
 800650c:	20000002 	.word	0x20000002
 8006510:	2000034c 	.word	0x2000034c
 8006514:	200004c8 	.word	0x200004c8
 8006518:	2000077c 	.word	0x2000077c
 800651c:	20000924 	.word	0x20000924
 8006520:	08013578 	.word	0x08013578
 8006524:	0801357c 	.word	0x0801357c
 8006528:	200005a8 	.word	0x200005a8
 800652c:	080135b0 	.word	0x080135b0
 8006530:	200006d0 	.word	0x200006d0
					break;
 8006534:	46c0      	nop			; (mov r8, r8)
		for(uint8_t tLine =0; tLine< nmeaLC; tLine++){
 8006536:	211a      	movs	r1, #26
 8006538:	31ff      	adds	r1, #255	; 0xff
 800653a:	2018      	movs	r0, #24
 800653c:	180b      	adds	r3, r1, r0
 800653e:	19db      	adds	r3, r3, r7
 8006540:	781a      	ldrb	r2, [r3, #0]
 8006542:	180b      	adds	r3, r1, r0
 8006544:	19db      	adds	r3, r3, r7
 8006546:	3201      	adds	r2, #1
 8006548:	701a      	strb	r2, [r3, #0]
 800654a:	4b52      	ldr	r3, [pc, #328]	; (8006694 <HAL_TIM_PeriodElapsedCallback+0x1ea0>)
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	b2db      	uxtb	r3, r3
 8006550:	221a      	movs	r2, #26
 8006552:	32ff      	adds	r2, #255	; 0xff
 8006554:	2418      	movs	r4, #24
 8006556:	1912      	adds	r2, r2, r4
 8006558:	19d2      	adds	r2, r2, r7
 800655a:	7812      	ldrb	r2, [r2, #0]
 800655c:	429a      	cmp	r2, r3
 800655e:	d200      	bcs.n	8006562 <HAL_TIM_PeriodElapsedCallback+0x1d6e>
 8006560:	e75e      	b.n	8006420 <HAL_TIM_PeriodElapsedCallback+0x1c2c>
		indicationCounter++;
 8006562:	4b4d      	ldr	r3, [pc, #308]	; (8006698 <HAL_TIM_PeriodElapsedCallback+0x1ea4>)
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	3301      	adds	r3, #1
 8006568:	b2da      	uxtb	r2, r3
 800656a:	4b4b      	ldr	r3, [pc, #300]	; (8006698 <HAL_TIM_PeriodElapsedCallback+0x1ea4>)
 800656c:	701a      	strb	r2, [r3, #0]
		tempGps = nmea_parser(nmeaResponse, NMEA_MAX_CHARS,&crcc,&rCrc);
 800656e:	4b4b      	ldr	r3, [pc, #300]	; (800669c <HAL_TIM_PeriodElapsedCallback+0x1ea8>)
 8006570:	4a4b      	ldr	r2, [pc, #300]	; (80066a0 <HAL_TIM_PeriodElapsedCallback+0x1eac>)
 8006572:	484c      	ldr	r0, [pc, #304]	; (80066a4 <HAL_TIM_PeriodElapsedCallback+0x1eb0>)
 8006574:	2155      	movs	r1, #85	; 0x55
 8006576:	f7fc fa1f 	bl	80029b8 <nmea_parser>
 800657a:	0003      	movs	r3, r0
 800657c:	2288      	movs	r2, #136	; 0x88
 800657e:	0052      	lsls	r2, r2, #1
 8006580:	0020      	movs	r0, r4
 8006582:	1811      	adds	r1, r2, r0
 8006584:	19c9      	adds	r1, r1, r7
 8006586:	600b      	str	r3, [r1, #0]
		if (tempGps != NULL) {
 8006588:	1813      	adds	r3, r2, r0
 800658a:	19db      	adds	r3, r3, r7
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d035      	beq.n	80065fe <HAL_TIM_PeriodElapsedCallback+0x1e0a>
			gps_info = tempGps;
 8006592:	4b45      	ldr	r3, [pc, #276]	; (80066a8 <HAL_TIM_PeriodElapsedCallback+0x1eb4>)
 8006594:	1812      	adds	r2, r2, r0
 8006596:	19d2      	adds	r2, r2, r7
 8006598:	6812      	ldr	r2, [r2, #0]
 800659a:	601a      	str	r2, [r3, #0]
			uint8_t vc = 0;
 800659c:	2110      	movs	r1, #16
 800659e:	31ff      	adds	r1, #255	; 0xff
 80065a0:	180b      	adds	r3, r1, r0
 80065a2:	19db      	adds	r3, r3, r7
 80065a4:	2200      	movs	r2, #0
 80065a6:	701a      	strb	r2, [r3, #0]
			vc=gps_info[16];
 80065a8:	4b3f      	ldr	r3, [pc, #252]	; (80066a8 <HAL_TIM_PeriodElapsedCallback+0x1eb4>)
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	180b      	adds	r3, r1, r0
 80065ae:	19db      	adds	r3, r3, r7
 80065b0:	7c12      	ldrb	r2, [r2, #16]
 80065b2:	701a      	strb	r2, [r3, #0]
			gpsSpeed = gps_info[15];
 80065b4:	4b3c      	ldr	r3, [pc, #240]	; (80066a8 <HAL_TIM_PeriodElapsedCallback+0x1eb4>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	7bda      	ldrb	r2, [r3, #15]
 80065ba:	4b3c      	ldr	r3, [pc, #240]	; (80066ac <HAL_TIM_PeriodElapsedCallback+0x1eb8>)
 80065bc:	701a      	strb	r2, [r3, #0]
			vc&=0x10;
 80065be:	0004      	movs	r4, r0
 80065c0:	190b      	adds	r3, r1, r4
 80065c2:	19db      	adds	r3, r3, r7
 80065c4:	0008      	movs	r0, r1
 80065c6:	190a      	adds	r2, r1, r4
 80065c8:	19d2      	adds	r2, r2, r7
 80065ca:	7812      	ldrb	r2, [r2, #0]
 80065cc:	2110      	movs	r1, #16
 80065ce:	400a      	ands	r2, r1
 80065d0:	701a      	strb	r2, [r3, #0]
			vc = vc<<3;
 80065d2:	0001      	movs	r1, r0
 80065d4:	0020      	movs	r0, r4
 80065d6:	180b      	adds	r3, r1, r0
 80065d8:	19db      	adds	r3, r3, r7
 80065da:	180a      	adds	r2, r1, r0
 80065dc:	19d2      	adds	r2, r2, r7
 80065de:	7812      	ldrb	r2, [r2, #0]
 80065e0:	00d2      	lsls	r2, r2, #3
 80065e2:	701a      	strb	r2, [r3, #0]
			if(vc == 0x80){
 80065e4:	180b      	adds	r3, r1, r0
 80065e6:	19db      	adds	r3, r3, r7
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	2b80      	cmp	r3, #128	; 0x80
 80065ec:	d103      	bne.n	80065f6 <HAL_TIM_PeriodElapsedCallback+0x1e02>
				isGpsValid = 1;
 80065ee:	4b30      	ldr	r3, [pc, #192]	; (80066b0 <HAL_TIM_PeriodElapsedCallback+0x1ebc>)
 80065f0:	2201      	movs	r2, #1
 80065f2:	701a      	strb	r2, [r3, #0]
 80065f4:	e006      	b.n	8006604 <HAL_TIM_PeriodElapsedCallback+0x1e10>
				isGpsValid = 0;
 80065f6:	4b2e      	ldr	r3, [pc, #184]	; (80066b0 <HAL_TIM_PeriodElapsedCallback+0x1ebc>)
 80065f8:	2200      	movs	r2, #0
 80065fa:	701a      	strb	r2, [r3, #0]
 80065fc:	e002      	b.n	8006604 <HAL_TIM_PeriodElapsedCallback+0x1e10>
			isGpsValid = 0;
 80065fe:	4b2c      	ldr	r3, [pc, #176]	; (80066b0 <HAL_TIM_PeriodElapsedCallback+0x1ebc>)
 8006600:	2200      	movs	r2, #0
 8006602:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim17);
 8006604:	4b2b      	ldr	r3, [pc, #172]	; (80066b4 <HAL_TIM_PeriodElapsedCallback+0x1ec0>)
 8006606:	0018      	movs	r0, r3
 8006608:	f005 fdf2 	bl	800c1f0 <HAL_TIM_Base_Stop_IT>
		isGNSSTimStart = 0;
 800660c:	4b2a      	ldr	r3, [pc, #168]	; (80066b8 <HAL_TIM_PeriodElapsedCallback+0x1ec4>)
 800660e:	2200      	movs	r2, #0
 8006610:	701a      	strb	r2, [r3, #0]
		if (tim6Count > msgPacketSaveInterval) {
 8006612:	4b2a      	ldr	r3, [pc, #168]	; (80066bc <HAL_TIM_PeriodElapsedCallback+0x1ec8>)
 8006614:	781a      	ldrb	r2, [r3, #0]
 8006616:	4b2a      	ldr	r3, [pc, #168]	; (80066c0 <HAL_TIM_PeriodElapsedCallback+0x1ecc>)
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	b2db      	uxtb	r3, r3
 800661c:	429a      	cmp	r2, r3
 800661e:	d914      	bls.n	800664a <HAL_TIM_PeriodElapsedCallback+0x1e56>
			if (isLoggedIn == 0 && isTcpOpen == 0 && flashready == 1) {
 8006620:	4b28      	ldr	r3, [pc, #160]	; (80066c4 <HAL_TIM_PeriodElapsedCallback+0x1ed0>)
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	b2db      	uxtb	r3, r3
 8006626:	2b00      	cmp	r3, #0
 8006628:	d10b      	bne.n	8006642 <HAL_TIM_PeriodElapsedCallback+0x1e4e>
 800662a:	4b27      	ldr	r3, [pc, #156]	; (80066c8 <HAL_TIM_PeriodElapsedCallback+0x1ed4>)
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	b2db      	uxtb	r3, r3
 8006630:	2b00      	cmp	r3, #0
 8006632:	d106      	bne.n	8006642 <HAL_TIM_PeriodElapsedCallback+0x1e4e>
 8006634:	4b25      	ldr	r3, [pc, #148]	; (80066cc <HAL_TIM_PeriodElapsedCallback+0x1ed8>)
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	b2db      	uxtb	r3, r3
 800663a:	2b01      	cmp	r3, #1
 800663c:	d101      	bne.n	8006642 <HAL_TIM_PeriodElapsedCallback+0x1e4e>
				save_data_packet();
 800663e:	f000 ff35 	bl	80074ac <save_data_packet>
			tim6Count = 0;
 8006642:	4b1e      	ldr	r3, [pc, #120]	; (80066bc <HAL_TIM_PeriodElapsedCallback+0x1ec8>)
 8006644:	2200      	movs	r2, #0
 8006646:	701a      	strb	r2, [r3, #0]
 8006648:	e005      	b.n	8006656 <HAL_TIM_PeriodElapsedCallback+0x1e62>
			tim6Count++;
 800664a:	4b1c      	ldr	r3, [pc, #112]	; (80066bc <HAL_TIM_PeriodElapsedCallback+0x1ec8>)
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	3301      	adds	r3, #1
 8006650:	b2da      	uxtb	r2, r3
 8006652:	4b1a      	ldr	r3, [pc, #104]	; (80066bc <HAL_TIM_PeriodElapsedCallback+0x1ec8>)
 8006654:	701a      	strb	r2, [r3, #0]
		memset(nmeaResponse, 0, sizeof(nmeaResponse));
 8006656:	23aa      	movs	r3, #170	; 0xaa
 8006658:	005a      	lsls	r2, r3, #1
 800665a:	4b12      	ldr	r3, [pc, #72]	; (80066a4 <HAL_TIM_PeriodElapsedCallback+0x1eb0>)
 800665c:	2100      	movs	r1, #0
 800665e:	0018      	movs	r0, r3
 8006660:	f008 fcd1 	bl	800f006 <memset>
		nmeaLC = 0;
 8006664:	4b0b      	ldr	r3, [pc, #44]	; (8006694 <HAL_TIM_PeriodElapsedCallback+0x1ea0>)
 8006666:	2200      	movs	r2, #0
 8006668:	701a      	strb	r2, [r3, #0]
		nmeaCC = 0;
 800666a:	4b19      	ldr	r3, [pc, #100]	; (80066d0 <HAL_TIM_PeriodElapsedCallback+0x1edc>)
 800666c:	2200      	movs	r2, #0
 800666e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&GNSS_PORT, GNSS_BUFFER, 1);
 8006670:	4918      	ldr	r1, [pc, #96]	; (80066d4 <HAL_TIM_PeriodElapsedCallback+0x1ee0>)
 8006672:	4b19      	ldr	r3, [pc, #100]	; (80066d8 <HAL_TIM_PeriodElapsedCallback+0x1ee4>)
 8006674:	2201      	movs	r2, #1
 8006676:	0018      	movs	r0, r3
 8006678:	f006 fe06 	bl	800d288 <HAL_UART_Receive_IT>
		HAL_UART_Receive_IT(&GNSS_PORT, GNSS_BUFFER, 1);
 800667c:	4915      	ldr	r1, [pc, #84]	; (80066d4 <HAL_TIM_PeriodElapsedCallback+0x1ee0>)
 800667e:	4b16      	ldr	r3, [pc, #88]	; (80066d8 <HAL_TIM_PeriodElapsedCallback+0x1ee4>)
 8006680:	2201      	movs	r2, #1
 8006682:	0018      	movs	r0, r3
 8006684:	f006 fe00 	bl	800d288 <HAL_UART_Receive_IT>
}
 8006688:	46c0      	nop			; (mov r8, r8)
 800668a:	46bd      	mov	sp, r7
 800668c:	b058      	add	sp, #352	; 0x160
 800668e:	bc80      	pop	{r7}
 8006690:	46b8      	mov	r8, r7
 8006692:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006694:	200008c2 	.word	0x200008c2
 8006698:	20000781 	.word	0x20000781
 800669c:	20000783 	.word	0x20000783
 80066a0:	20000782 	.word	0x20000782
 80066a4:	20000924 	.word	0x20000924
 80066a8:	2000002c 	.word	0x2000002c
 80066ac:	2000076f 	.word	0x2000076f
 80066b0:	2000076e 	.word	0x2000076e
 80066b4:	200004c8 	.word	0x200004c8
 80066b8:	200008ca 	.word	0x200008ca
 80066bc:	20000a7d 	.word	0x20000a7d
 80066c0:	20000000 	.word	0x20000000
 80066c4:	20000a7c 	.word	0x20000a7c
 80066c8:	20000a78 	.word	0x20000a78
 80066cc:	20000d68 	.word	0x20000d68
 80066d0:	200008c3 	.word	0x200008c3
 80066d4:	20000790 	.word	0x20000790
 80066d8:	200005a8 	.word	0x200005a8

080066dc <rebootsystem>:

void rebootsystem() {
 80066dc:	b580      	push	{r7, lr}
 80066de:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 1);
	save_to_flash(1);
 80066e0:	2001      	movs	r0, #1
 80066e2:	f000 f803 	bl	80066ec <save_to_flash>
	NVIC_SystemReset();
 80066e6:	f7fd f86d 	bl	80037c4 <__NVIC_SystemReset>
	...

080066ec <save_to_flash>:
	// todo save flash info
}
void save_to_flash(uint8_t autoRstValue) {
 80066ec:	b590      	push	{r4, r7, lr}
 80066ee:	b0c5      	sub	sp, #276	; 0x114
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	0002      	movs	r2, r0
 80066f4:	4bb2      	ldr	r3, [pc, #712]	; (80069c0 <save_to_flash+0x2d4>)
 80066f6:	2488      	movs	r4, #136	; 0x88
 80066f8:	0064      	lsls	r4, r4, #1
 80066fa:	191b      	adds	r3, r3, r4
 80066fc:	19db      	adds	r3, r3, r7
 80066fe:	701a      	strb	r2, [r3, #0]
	flashready = 0;
 8006700:	4bb0      	ldr	r3, [pc, #704]	; (80069c4 <save_to_flash+0x2d8>)
 8006702:	2200      	movs	r2, #0
 8006704:	701a      	strb	r2, [r3, #0]

	uint8_t configPage[LASTPAGE_ADD+2];
	memset(configPage,0,sizeof(configPage));
 8006706:	2310      	movs	r3, #16
 8006708:	18fb      	adds	r3, r7, r3
 800670a:	22fc      	movs	r2, #252	; 0xfc
 800670c:	2100      	movs	r1, #0
 800670e:	0018      	movs	r0, r3
 8006710:	f008 fc79 	bl	800f006 <memset>
	//First time
	W25qxx_EraseSector(0);
 8006714:	2000      	movs	r0, #0
 8006716:	f002 ff3d 	bl	8009594 <W25qxx_EraseSector>
	isFlash =1;
 800671a:	4bab      	ldr	r3, [pc, #684]	; (80069c8 <save_to_flash+0x2dc>)
 800671c:	2201      	movs	r2, #1
 800671e:	701a      	strb	r2, [r3, #0]
	configPage[0] = isFlash; // isflash
 8006720:	4ba9      	ldr	r3, [pc, #676]	; (80069c8 <save_to_flash+0x2dc>)
 8006722:	781a      	ldrb	r2, [r3, #0]
 8006724:	4ba9      	ldr	r3, [pc, #676]	; (80069cc <save_to_flash+0x2e0>)
 8006726:	191b      	adds	r3, r3, r4
 8006728:	19db      	adds	r3, r3, r7
 800672a:	701a      	strb	r2, [r3, #0]

	uint8_t t[2];
	t[0] = StartSec >> 8;
 800672c:	4ba8      	ldr	r3, [pc, #672]	; (80069d0 <save_to_flash+0x2e4>)
 800672e:	881b      	ldrh	r3, [r3, #0]
 8006730:	b29b      	uxth	r3, r3
 8006732:	0a1b      	lsrs	r3, r3, #8
 8006734:	b29b      	uxth	r3, r3
 8006736:	b2da      	uxtb	r2, r3
 8006738:	4ba6      	ldr	r3, [pc, #664]	; (80069d4 <save_to_flash+0x2e8>)
 800673a:	191b      	adds	r3, r3, r4
 800673c:	19db      	adds	r3, r3, r7
 800673e:	701a      	strb	r2, [r3, #0]
	t[1] = StartSec;
 8006740:	4ba3      	ldr	r3, [pc, #652]	; (80069d0 <save_to_flash+0x2e4>)
 8006742:	881b      	ldrh	r3, [r3, #0]
 8006744:	b29b      	uxth	r3, r3
 8006746:	b2da      	uxtb	r2, r3
 8006748:	4ba2      	ldr	r3, [pc, #648]	; (80069d4 <save_to_flash+0x2e8>)
 800674a:	191b      	adds	r3, r3, r4
 800674c:	19db      	adds	r3, r3, r7
 800674e:	705a      	strb	r2, [r3, #1]
	configPage[MSBSS] = t[0]; //MSB StartSec
 8006750:	4ba0      	ldr	r3, [pc, #640]	; (80069d4 <save_to_flash+0x2e8>)
 8006752:	191b      	adds	r3, r3, r4
 8006754:	19db      	adds	r3, r3, r7
 8006756:	781a      	ldrb	r2, [r3, #0]
 8006758:	4b9c      	ldr	r3, [pc, #624]	; (80069cc <save_to_flash+0x2e0>)
 800675a:	0021      	movs	r1, r4
 800675c:	191b      	adds	r3, r3, r4
 800675e:	19db      	adds	r3, r3, r7
 8006760:	705a      	strb	r2, [r3, #1]
	configPage[LSBSS] = t[1]; //LSB StartSec
 8006762:	4b9c      	ldr	r3, [pc, #624]	; (80069d4 <save_to_flash+0x2e8>)
 8006764:	185b      	adds	r3, r3, r1
 8006766:	19db      	adds	r3, r3, r7
 8006768:	785a      	ldrb	r2, [r3, #1]
 800676a:	4b98      	ldr	r3, [pc, #608]	; (80069cc <save_to_flash+0x2e0>)
 800676c:	185b      	adds	r3, r3, r1
 800676e:	19db      	adds	r3, r3, r7
 8006770:	709a      	strb	r2, [r3, #2]

	t[0] = StartN >> 8;
 8006772:	4b99      	ldr	r3, [pc, #612]	; (80069d8 <save_to_flash+0x2ec>)
 8006774:	881b      	ldrh	r3, [r3, #0]
 8006776:	b29b      	uxth	r3, r3
 8006778:	0a1b      	lsrs	r3, r3, #8
 800677a:	b29b      	uxth	r3, r3
 800677c:	b2da      	uxtb	r2, r3
 800677e:	4b95      	ldr	r3, [pc, #596]	; (80069d4 <save_to_flash+0x2e8>)
 8006780:	185b      	adds	r3, r3, r1
 8006782:	19db      	adds	r3, r3, r7
 8006784:	701a      	strb	r2, [r3, #0]
	t[1] = StartN;
 8006786:	4b94      	ldr	r3, [pc, #592]	; (80069d8 <save_to_flash+0x2ec>)
 8006788:	881b      	ldrh	r3, [r3, #0]
 800678a:	b29b      	uxth	r3, r3
 800678c:	b2da      	uxtb	r2, r3
 800678e:	4b91      	ldr	r3, [pc, #580]	; (80069d4 <save_to_flash+0x2e8>)
 8006790:	185b      	adds	r3, r3, r1
 8006792:	19db      	adds	r3, r3, r7
 8006794:	705a      	strb	r2, [r3, #1]
	configPage[MSBSN] = t[0]; //MSB StartN
 8006796:	4b8f      	ldr	r3, [pc, #572]	; (80069d4 <save_to_flash+0x2e8>)
 8006798:	185b      	adds	r3, r3, r1
 800679a:	19db      	adds	r3, r3, r7
 800679c:	781a      	ldrb	r2, [r3, #0]
 800679e:	4b8b      	ldr	r3, [pc, #556]	; (80069cc <save_to_flash+0x2e0>)
 80067a0:	185b      	adds	r3, r3, r1
 80067a2:	19db      	adds	r3, r3, r7
 80067a4:	70da      	strb	r2, [r3, #3]
	configPage[LSBSN] = t[1]; //LSB StartN
 80067a6:	4b8b      	ldr	r3, [pc, #556]	; (80069d4 <save_to_flash+0x2e8>)
 80067a8:	185b      	adds	r3, r3, r1
 80067aa:	19db      	adds	r3, r3, r7
 80067ac:	785a      	ldrb	r2, [r3, #1]
 80067ae:	4b87      	ldr	r3, [pc, #540]	; (80069cc <save_to_flash+0x2e0>)
 80067b0:	185b      	adds	r3, r3, r1
 80067b2:	19db      	adds	r3, r3, r7
 80067b4:	711a      	strb	r2, [r3, #4]

	t[0] = EndSec >> 8;
 80067b6:	4b89      	ldr	r3, [pc, #548]	; (80069dc <save_to_flash+0x2f0>)
 80067b8:	881b      	ldrh	r3, [r3, #0]
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	0a1b      	lsrs	r3, r3, #8
 80067be:	b29b      	uxth	r3, r3
 80067c0:	b2da      	uxtb	r2, r3
 80067c2:	4b84      	ldr	r3, [pc, #528]	; (80069d4 <save_to_flash+0x2e8>)
 80067c4:	185b      	adds	r3, r3, r1
 80067c6:	19db      	adds	r3, r3, r7
 80067c8:	701a      	strb	r2, [r3, #0]
	t[1] = EndSec;
 80067ca:	4b84      	ldr	r3, [pc, #528]	; (80069dc <save_to_flash+0x2f0>)
 80067cc:	881b      	ldrh	r3, [r3, #0]
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	b2da      	uxtb	r2, r3
 80067d2:	4b80      	ldr	r3, [pc, #512]	; (80069d4 <save_to_flash+0x2e8>)
 80067d4:	185b      	adds	r3, r3, r1
 80067d6:	19db      	adds	r3, r3, r7
 80067d8:	705a      	strb	r2, [r3, #1]
	configPage[MSBES] = t[0]; //MSB EndSec
 80067da:	4b7e      	ldr	r3, [pc, #504]	; (80069d4 <save_to_flash+0x2e8>)
 80067dc:	185b      	adds	r3, r3, r1
 80067de:	19db      	adds	r3, r3, r7
 80067e0:	781a      	ldrb	r2, [r3, #0]
 80067e2:	4b7a      	ldr	r3, [pc, #488]	; (80069cc <save_to_flash+0x2e0>)
 80067e4:	185b      	adds	r3, r3, r1
 80067e6:	19db      	adds	r3, r3, r7
 80067e8:	715a      	strb	r2, [r3, #5]
	configPage[LSBES] = t[1]; //LSB EndSec
 80067ea:	4b7a      	ldr	r3, [pc, #488]	; (80069d4 <save_to_flash+0x2e8>)
 80067ec:	185b      	adds	r3, r3, r1
 80067ee:	19db      	adds	r3, r3, r7
 80067f0:	785a      	ldrb	r2, [r3, #1]
 80067f2:	4b76      	ldr	r3, [pc, #472]	; (80069cc <save_to_flash+0x2e0>)
 80067f4:	185b      	adds	r3, r3, r1
 80067f6:	19db      	adds	r3, r3, r7
 80067f8:	719a      	strb	r2, [r3, #6]

	t[0] = EndN >> 8;
 80067fa:	4b79      	ldr	r3, [pc, #484]	; (80069e0 <save_to_flash+0x2f4>)
 80067fc:	881b      	ldrh	r3, [r3, #0]
 80067fe:	b29b      	uxth	r3, r3
 8006800:	0a1b      	lsrs	r3, r3, #8
 8006802:	b29b      	uxth	r3, r3
 8006804:	b2da      	uxtb	r2, r3
 8006806:	4b73      	ldr	r3, [pc, #460]	; (80069d4 <save_to_flash+0x2e8>)
 8006808:	185b      	adds	r3, r3, r1
 800680a:	19db      	adds	r3, r3, r7
 800680c:	701a      	strb	r2, [r3, #0]
	t[1] = EndN;
 800680e:	4b74      	ldr	r3, [pc, #464]	; (80069e0 <save_to_flash+0x2f4>)
 8006810:	881b      	ldrh	r3, [r3, #0]
 8006812:	b29b      	uxth	r3, r3
 8006814:	b2da      	uxtb	r2, r3
 8006816:	4b6f      	ldr	r3, [pc, #444]	; (80069d4 <save_to_flash+0x2e8>)
 8006818:	185b      	adds	r3, r3, r1
 800681a:	19db      	adds	r3, r3, r7
 800681c:	705a      	strb	r2, [r3, #1]
	configPage[MSBEN] = t[0]; //MSB EndN
 800681e:	4b6d      	ldr	r3, [pc, #436]	; (80069d4 <save_to_flash+0x2e8>)
 8006820:	185b      	adds	r3, r3, r1
 8006822:	19db      	adds	r3, r3, r7
 8006824:	781a      	ldrb	r2, [r3, #0]
 8006826:	4b69      	ldr	r3, [pc, #420]	; (80069cc <save_to_flash+0x2e0>)
 8006828:	185b      	adds	r3, r3, r1
 800682a:	19db      	adds	r3, r3, r7
 800682c:	71da      	strb	r2, [r3, #7]
	configPage[LSBEN] = t[1]; //LSB EndN
 800682e:	4b69      	ldr	r3, [pc, #420]	; (80069d4 <save_to_flash+0x2e8>)
 8006830:	185b      	adds	r3, r3, r1
 8006832:	19db      	adds	r3, r3, r7
 8006834:	785a      	ldrb	r2, [r3, #1]
 8006836:	4b65      	ldr	r3, [pc, #404]	; (80069cc <save_to_flash+0x2e0>)
 8006838:	185b      	adds	r3, r3, r1
 800683a:	19db      	adds	r3, r3, r7
 800683c:	721a      	strb	r2, [r3, #8]

	configPage[CP1_ADD] = cPin[0];  //pin 1
 800683e:	4b69      	ldr	r3, [pc, #420]	; (80069e4 <save_to_flash+0x2f8>)
 8006840:	781a      	ldrb	r2, [r3, #0]
 8006842:	4b62      	ldr	r3, [pc, #392]	; (80069cc <save_to_flash+0x2e0>)
 8006844:	185b      	adds	r3, r3, r1
 8006846:	19db      	adds	r3, r3, r7
 8006848:	725a      	strb	r2, [r3, #9]
	configPage[CP2_ADD] = cPin[1]; //pin 2
 800684a:	4b66      	ldr	r3, [pc, #408]	; (80069e4 <save_to_flash+0x2f8>)
 800684c:	785a      	ldrb	r2, [r3, #1]
 800684e:	4b5f      	ldr	r3, [pc, #380]	; (80069cc <save_to_flash+0x2e0>)
 8006850:	185b      	adds	r3, r3, r1
 8006852:	19db      	adds	r3, r3, r7
 8006854:	729a      	strb	r2, [r3, #10]
	configPage[CP3_ADD] = cPin[2]; //pin 3
 8006856:	4b63      	ldr	r3, [pc, #396]	; (80069e4 <save_to_flash+0x2f8>)
 8006858:	789a      	ldrb	r2, [r3, #2]
 800685a:	4b5c      	ldr	r3, [pc, #368]	; (80069cc <save_to_flash+0x2e0>)
 800685c:	185b      	adds	r3, r3, r1
 800685e:	19db      	adds	r3, r3, r7
 8006860:	72da      	strb	r2, [r3, #11]
	configPage[CP4_ADD] = cPin[3]; //pin 4
 8006862:	4b60      	ldr	r3, [pc, #384]	; (80069e4 <save_to_flash+0x2f8>)
 8006864:	78da      	ldrb	r2, [r3, #3]
 8006866:	4b59      	ldr	r3, [pc, #356]	; (80069cc <save_to_flash+0x2e0>)
 8006868:	185b      	adds	r3, r3, r1
 800686a:	19db      	adds	r3, r3, r7
 800686c:	731a      	strb	r2, [r3, #12]

	// saving valid sender
	for (uint8_t te = VALIDSENSTART_ADD; te < VALIDSENEND_ADD+1; te++) {
 800686e:	2310      	movs	r3, #16
 8006870:	33ff      	adds	r3, #255	; 0xff
 8006872:	18fb      	adds	r3, r7, r3
 8006874:	220d      	movs	r2, #13
 8006876:	701a      	strb	r2, [r3, #0]
 8006878:	e014      	b.n	80068a4 <save_to_flash+0x1b8>
		configPage[te] = validSender[te - VALIDSENSTART_ADD];
 800687a:	2010      	movs	r0, #16
 800687c:	30ff      	adds	r0, #255	; 0xff
 800687e:	183b      	adds	r3, r7, r0
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	3b0d      	subs	r3, #13
 8006884:	001a      	movs	r2, r3
 8006886:	183b      	adds	r3, r7, r0
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	4957      	ldr	r1, [pc, #348]	; (80069e8 <save_to_flash+0x2fc>)
 800688c:	5c89      	ldrb	r1, [r1, r2]
 800688e:	4a4f      	ldr	r2, [pc, #316]	; (80069cc <save_to_flash+0x2e0>)
 8006890:	2488      	movs	r4, #136	; 0x88
 8006892:	0064      	lsls	r4, r4, #1
 8006894:	1912      	adds	r2, r2, r4
 8006896:	19d2      	adds	r2, r2, r7
 8006898:	54d1      	strb	r1, [r2, r3]
	for (uint8_t te = VALIDSENSTART_ADD; te < VALIDSENEND_ADD+1; te++) {
 800689a:	183b      	adds	r3, r7, r0
 800689c:	781a      	ldrb	r2, [r3, #0]
 800689e:	183b      	adds	r3, r7, r0
 80068a0:	3201      	adds	r2, #1
 80068a2:	701a      	strb	r2, [r3, #0]
 80068a4:	2310      	movs	r3, #16
 80068a6:	33ff      	adds	r3, #255	; 0xff
 80068a8:	18fb      	adds	r3, r7, r3
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	2b16      	cmp	r3, #22
 80068ae:	d9e4      	bls.n	800687a <save_to_flash+0x18e>
	}
	//------------------------------------


	//saving domain address from 23 - 72
	for (uint8_t te = DOMAINSTART_ADD; te < DOMAINEND_ADD+1; te++) {
 80068b0:	2387      	movs	r3, #135	; 0x87
 80068b2:	005b      	lsls	r3, r3, #1
 80068b4:	18fb      	adds	r3, r7, r3
 80068b6:	2217      	movs	r2, #23
 80068b8:	701a      	strb	r2, [r3, #0]
 80068ba:	e014      	b.n	80068e6 <save_to_flash+0x1fa>
		configPage[te] = domainAdd[te - DOMAINSTART_ADD];
 80068bc:	2087      	movs	r0, #135	; 0x87
 80068be:	0040      	lsls	r0, r0, #1
 80068c0:	183b      	adds	r3, r7, r0
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	3b17      	subs	r3, #23
 80068c6:	001a      	movs	r2, r3
 80068c8:	183b      	adds	r3, r7, r0
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	4947      	ldr	r1, [pc, #284]	; (80069ec <save_to_flash+0x300>)
 80068ce:	5c89      	ldrb	r1, [r1, r2]
 80068d0:	4a3e      	ldr	r2, [pc, #248]	; (80069cc <save_to_flash+0x2e0>)
 80068d2:	2488      	movs	r4, #136	; 0x88
 80068d4:	0064      	lsls	r4, r4, #1
 80068d6:	1912      	adds	r2, r2, r4
 80068d8:	19d2      	adds	r2, r2, r7
 80068da:	54d1      	strb	r1, [r2, r3]
	for (uint8_t te = DOMAINSTART_ADD; te < DOMAINEND_ADD+1; te++) {
 80068dc:	183b      	adds	r3, r7, r0
 80068de:	781a      	ldrb	r2, [r3, #0]
 80068e0:	183b      	adds	r3, r7, r0
 80068e2:	3201      	adds	r2, #1
 80068e4:	701a      	strb	r2, [r3, #0]
 80068e6:	2387      	movs	r3, #135	; 0x87
 80068e8:	005b      	lsls	r3, r3, #1
 80068ea:	18fb      	adds	r3, r7, r3
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	2b48      	cmp	r3, #72	; 0x48
 80068f0:	d9e4      	bls.n	80068bc <save_to_flash+0x1d0>
	}
	//----------------------------------------


	//saving port from 73 - 78
	for (uint8_t te = PORTSTART_ADD; te < PORTEND_ADD+1; te++) {
 80068f2:	230e      	movs	r3, #14
 80068f4:	33ff      	adds	r3, #255	; 0xff
 80068f6:	18fb      	adds	r3, r7, r3
 80068f8:	2249      	movs	r2, #73	; 0x49
 80068fa:	701a      	strb	r2, [r3, #0]
 80068fc:	e014      	b.n	8006928 <save_to_flash+0x23c>
		configPage[te] = portAdd[te - PORTSTART_ADD];
 80068fe:	200e      	movs	r0, #14
 8006900:	30ff      	adds	r0, #255	; 0xff
 8006902:	183b      	adds	r3, r7, r0
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	3b49      	subs	r3, #73	; 0x49
 8006908:	001a      	movs	r2, r3
 800690a:	183b      	adds	r3, r7, r0
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	4938      	ldr	r1, [pc, #224]	; (80069f0 <save_to_flash+0x304>)
 8006910:	5c89      	ldrb	r1, [r1, r2]
 8006912:	4a2e      	ldr	r2, [pc, #184]	; (80069cc <save_to_flash+0x2e0>)
 8006914:	2488      	movs	r4, #136	; 0x88
 8006916:	0064      	lsls	r4, r4, #1
 8006918:	1912      	adds	r2, r2, r4
 800691a:	19d2      	adds	r2, r2, r7
 800691c:	54d1      	strb	r1, [r2, r3]
	for (uint8_t te = PORTSTART_ADD; te < PORTEND_ADD+1; te++) {
 800691e:	183b      	adds	r3, r7, r0
 8006920:	781a      	ldrb	r2, [r3, #0]
 8006922:	183b      	adds	r3, r7, r0
 8006924:	3201      	adds	r2, #1
 8006926:	701a      	strb	r2, [r3, #0]
 8006928:	230e      	movs	r3, #14
 800692a:	33ff      	adds	r3, #255	; 0xff
 800692c:	18fb      	adds	r3, r7, r3
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	2b4e      	cmp	r3, #78	; 0x4e
 8006932:	d9e4      	bls.n	80068fe <save_to_flash+0x212>
	}
	//-----------------------------------

	configPage[LDIA_ADD] = locationDataIntervalA;  //locationDataIntervalA = 5
 8006934:	4b2f      	ldr	r3, [pc, #188]	; (80069f4 <save_to_flash+0x308>)
 8006936:	7819      	ldrb	r1, [r3, #0]
 8006938:	4b24      	ldr	r3, [pc, #144]	; (80069cc <save_to_flash+0x2e0>)
 800693a:	2088      	movs	r0, #136	; 0x88
 800693c:	0040      	lsls	r0, r0, #1
 800693e:	181b      	adds	r3, r3, r0
 8006940:	19db      	adds	r3, r3, r7
 8006942:	224f      	movs	r2, #79	; 0x4f
 8006944:	5499      	strb	r1, [r3, r2]
	configPage[LDIB_ADD] = locationDataIntervalB;  //locationDataIntervalB = 5
 8006946:	4b2c      	ldr	r3, [pc, #176]	; (80069f8 <save_to_flash+0x30c>)
 8006948:	7819      	ldrb	r1, [r3, #0]
 800694a:	4b20      	ldr	r3, [pc, #128]	; (80069cc <save_to_flash+0x2e0>)
 800694c:	181b      	adds	r3, r3, r0
 800694e:	19db      	adds	r3, r3, r7
 8006950:	2250      	movs	r2, #80	; 0x50
 8006952:	5499      	strb	r1, [r3, r2]
	isAutoRst = autoRstValue;
 8006954:	4b29      	ldr	r3, [pc, #164]	; (80069fc <save_to_flash+0x310>)
 8006956:	4a1a      	ldr	r2, [pc, #104]	; (80069c0 <save_to_flash+0x2d4>)
 8006958:	1812      	adds	r2, r2, r0
 800695a:	19d2      	adds	r2, r2, r7
 800695c:	7812      	ldrb	r2, [r2, #0]
 800695e:	701a      	strb	r2, [r3, #0]
	configPage[AUTORST_ADD] = isAutoRst; //isAutorst
 8006960:	4b26      	ldr	r3, [pc, #152]	; (80069fc <save_to_flash+0x310>)
 8006962:	7819      	ldrb	r1, [r3, #0]
 8006964:	4b19      	ldr	r3, [pc, #100]	; (80069cc <save_to_flash+0x2e0>)
 8006966:	181b      	adds	r3, r3, r0
 8006968:	19db      	adds	r3, r3, r7
 800696a:	2251      	movs	r2, #81	; 0x51
 800696c:	5499      	strb	r1, [r3, r2]
	configPage[SMSACTIVE_ADD] = isSMSActive;
 800696e:	4b24      	ldr	r3, [pc, #144]	; (8006a00 <save_to_flash+0x314>)
 8006970:	7819      	ldrb	r1, [r3, #0]
 8006972:	4b16      	ldr	r3, [pc, #88]	; (80069cc <save_to_flash+0x2e0>)
 8006974:	181b      	adds	r3, r3, r0
 8006976:	19db      	adds	r3, r3, r7
 8006978:	2252      	movs	r2, #82	; 0x52
 800697a:	5499      	strb	r1, [r3, r2]
	configPage[RELAYSTATE_ADD] = relayState;
 800697c:	4b21      	ldr	r3, [pc, #132]	; (8006a04 <save_to_flash+0x318>)
 800697e:	7819      	ldrb	r1, [r3, #0]
 8006980:	4b12      	ldr	r3, [pc, #72]	; (80069cc <save_to_flash+0x2e0>)
 8006982:	181b      	adds	r3, r3, r0
 8006984:	19db      	adds	r3, r3, r7
 8006986:	2253      	movs	r2, #83	; 0x53
 8006988:	5499      	strb	r1, [r3, r2]
	isFlash1 = 1;
 800698a:	4b1f      	ldr	r3, [pc, #124]	; (8006a08 <save_to_flash+0x31c>)
 800698c:	2201      	movs	r2, #1
 800698e:	701a      	strb	r2, [r3, #0]
	configPage[LASTPAGE_ADD] = isFlash1; //isflash1
 8006990:	4b1d      	ldr	r3, [pc, #116]	; (8006a08 <save_to_flash+0x31c>)
 8006992:	7819      	ldrb	r1, [r3, #0]
 8006994:	4b0d      	ldr	r3, [pc, #52]	; (80069cc <save_to_flash+0x2e0>)
 8006996:	181b      	adds	r3, r3, r0
 8006998:	19db      	adds	r3, r3, r7
 800699a:	22fa      	movs	r2, #250	; 0xfa
 800699c:	5499      	strb	r1, [r3, r2]
	W25qxx_WritePage(configPage, 0, 0, LASTPAGE_ADD+2);
 800699e:	2310      	movs	r3, #16
 80069a0:	18f8      	adds	r0, r7, r3
 80069a2:	23fc      	movs	r3, #252	; 0xfc
 80069a4:	2200      	movs	r2, #0
 80069a6:	2100      	movs	r1, #0
 80069a8:	f002 fe64 	bl	8009674 <W25qxx_WritePage>
	flashready = 1;
 80069ac:	4b05      	ldr	r3, [pc, #20]	; (80069c4 <save_to_flash+0x2d8>)
 80069ae:	2201      	movs	r2, #1
 80069b0:	701a      	strb	r2, [r3, #0]
	HAL_Delay(100);
 80069b2:	2064      	movs	r0, #100	; 0x64
 80069b4:	f003 f98e 	bl	8009cd4 <HAL_Delay>

}
 80069b8:	46c0      	nop			; (mov r8, r8)
 80069ba:	46bd      	mov	sp, r7
 80069bc:	b045      	add	sp, #276	; 0x114
 80069be:	bd90      	pop	{r4, r7, pc}
 80069c0:	fffffef7 	.word	0xfffffef7
 80069c4:	20000d68 	.word	0x20000d68
 80069c8:	20000784 	.word	0x20000784
 80069cc:	ffffff00 	.word	0xffffff00
 80069d0:	20000d64 	.word	0x20000d64
 80069d4:	fffffefc 	.word	0xfffffefc
 80069d8:	20000d60 	.word	0x20000d60
 80069dc:	20000d66 	.word	0x20000d66
 80069e0:	20000d62 	.word	0x20000d62
 80069e4:	20000014 	.word	0x20000014
 80069e8:	20000008 	.word	0x20000008
 80069ec:	20000038 	.word	0x20000038
 80069f0:	20000030 	.word	0x20000030
 80069f4:	20000004 	.word	0x20000004
 80069f8:	20000005 	.word	0x20000005
 80069fc:	20000786 	.word	0x20000786
 8006a00:	20000780 	.word	0x20000780
 8006a04:	20000770 	.word	0x20000770
 8006a08:	20000785 	.word	0x20000785

08006a0c <send_command>:

void send_command(char *command, uint16_t timeout, uint8_t caseId,
		uint8_t retryCount, uint8_t isReset) {
 8006a0c:	b590      	push	{r4, r7, lr}
 8006a0e:	b085      	sub	sp, #20
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	000c      	movs	r4, r1
 8006a16:	0010      	movs	r0, r2
 8006a18:	0019      	movs	r1, r3
 8006a1a:	1cbb      	adds	r3, r7, #2
 8006a1c:	1c22      	adds	r2, r4, #0
 8006a1e:	801a      	strh	r2, [r3, #0]
 8006a20:	1c7b      	adds	r3, r7, #1
 8006a22:	1c02      	adds	r2, r0, #0
 8006a24:	701a      	strb	r2, [r3, #0]
 8006a26:	003b      	movs	r3, r7
 8006a28:	1c0a      	adds	r2, r1, #0
 8006a2a:	701a      	strb	r2, [r3, #0]
	uint8_t processComplete = 0, processCount = 0;
 8006a2c:	230f      	movs	r3, #15
 8006a2e:	18fb      	adds	r3, r7, r3
 8006a30:	2200      	movs	r2, #0
 8006a32:	701a      	strb	r2, [r3, #0]
 8006a34:	230e      	movs	r3, #14
 8006a36:	18fb      	adds	r3, r7, r3
 8006a38:	2200      	movs	r2, #0
 8006a3a:	701a      	strb	r2, [r3, #0]
	uint16_t commandSize = 0;
 8006a3c:	230c      	movs	r3, #12
 8006a3e:	18fb      	adds	r3, r7, r3
 8006a40:	2200      	movs	r2, #0
 8006a42:	801a      	strh	r2, [r3, #0]
	uint16_t i = 0;
 8006a44:	230a      	movs	r3, #10
 8006a46:	18fb      	adds	r3, r7, r3
 8006a48:	2200      	movs	r2, #0
 8006a4a:	801a      	strh	r2, [r3, #0]
	while (command[i] != NULL) {
 8006a4c:	e00b      	b.n	8006a66 <send_command+0x5a>
		commandSize++;
 8006a4e:	210c      	movs	r1, #12
 8006a50:	187b      	adds	r3, r7, r1
 8006a52:	881a      	ldrh	r2, [r3, #0]
 8006a54:	187b      	adds	r3, r7, r1
 8006a56:	3201      	adds	r2, #1
 8006a58:	801a      	strh	r2, [r3, #0]
		i++;
 8006a5a:	210a      	movs	r1, #10
 8006a5c:	187b      	adds	r3, r7, r1
 8006a5e:	881a      	ldrh	r2, [r3, #0]
 8006a60:	187b      	adds	r3, r7, r1
 8006a62:	3201      	adds	r2, #1
 8006a64:	801a      	strh	r2, [r3, #0]
	while (command[i] != NULL) {
 8006a66:	230a      	movs	r3, #10
 8006a68:	18fb      	adds	r3, r7, r3
 8006a6a:	881b      	ldrh	r3, [r3, #0]
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	18d3      	adds	r3, r2, r3
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d1eb      	bne.n	8006a4e <send_command+0x42>
	}
	while (processComplete == 0) {
 8006a76:	e05a      	b.n	8006b2e <send_command+0x122>
		while (isBusy)
 8006a78:	46c0      	nop			; (mov r8, r8)
 8006a7a:	4b32      	ldr	r3, [pc, #200]	; (8006b44 <send_command+0x138>)
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	b2db      	uxtb	r3, r3
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d1fa      	bne.n	8006a7a <send_command+0x6e>
			;
		isBusy = 1;
 8006a84:	4b2f      	ldr	r3, [pc, #188]	; (8006b44 <send_command+0x138>)
 8006a86:	2201      	movs	r2, #1
 8006a88:	701a      	strb	r2, [r3, #0]
		isResponseOk = 0;
 8006a8a:	4b2f      	ldr	r3, [pc, #188]	; (8006b48 <send_command+0x13c>)
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	701a      	strb	r2, [r3, #0]
		commandCase = caseId;
 8006a90:	4b2e      	ldr	r3, [pc, #184]	; (8006b4c <send_command+0x140>)
 8006a92:	1c7a      	adds	r2, r7, #1
 8006a94:	7812      	ldrb	r2, [r2, #0]
 8006a96:	701a      	strb	r2, [r3, #0]
		isStart = 1;
 8006a98:	4b2d      	ldr	r3, [pc, #180]	; (8006b50 <send_command+0x144>)
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	701a      	strb	r2, [r3, #0]
		recResponse = 0;
 8006a9e:	4b2d      	ldr	r3, [pc, #180]	; (8006b54 <send_command+0x148>)
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&AT_PORT, command, commandSize, 1000);
 8006aa4:	23fa      	movs	r3, #250	; 0xfa
 8006aa6:	009c      	lsls	r4, r3, #2
 8006aa8:	230c      	movs	r3, #12
 8006aaa:	18fb      	adds	r3, r7, r3
 8006aac:	881a      	ldrh	r2, [r3, #0]
 8006aae:	6879      	ldr	r1, [r7, #4]
 8006ab0:	4829      	ldr	r0, [pc, #164]	; (8006b58 <send_command+0x14c>)
 8006ab2:	0023      	movs	r3, r4
 8006ab4:	f006 fb4c 	bl	800d150 <HAL_UART_Transmit>
		FIX_TIMER_TRIGGER(&htim6);
 8006ab8:	4b28      	ldr	r3, [pc, #160]	; (8006b5c <send_command+0x150>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	2202      	movs	r2, #2
 8006abe:	4252      	negs	r2, r2
 8006ac0:	611a      	str	r2, [r3, #16]
		HAL_TIM_Base_Start_IT(&htim6);
 8006ac2:	4b26      	ldr	r3, [pc, #152]	; (8006b5c <send_command+0x150>)
 8006ac4:	0018      	movs	r0, r3
 8006ac6:	f005 fb3d 	bl	800c144 <HAL_TIM_Base_Start_IT>
		resTimeout = timeout; //300 ms
 8006aca:	4b25      	ldr	r3, [pc, #148]	; (8006b60 <send_command+0x154>)
 8006acc:	1cba      	adds	r2, r7, #2
 8006ace:	8812      	ldrh	r2, [r2, #0]
 8006ad0:	801a      	strh	r2, [r3, #0]
		ab=5;
 8006ad2:	4b24      	ldr	r3, [pc, #144]	; (8006b64 <send_command+0x158>)
 8006ad4:	2205      	movs	r2, #5
 8006ad6:	701a      	strb	r2, [r3, #0]
		while (isBusy)
 8006ad8:	46c0      	nop			; (mov r8, r8)
 8006ada:	4b1a      	ldr	r3, [pc, #104]	; (8006b44 <send_command+0x138>)
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d1fa      	bne.n	8006ada <send_command+0xce>
			;
		commandCase = 0;
 8006ae4:	4b19      	ldr	r3, [pc, #100]	; (8006b4c <send_command+0x140>)
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	701a      	strb	r2, [r3, #0]
		if (isResponseOk) {
 8006aea:	4b17      	ldr	r3, [pc, #92]	; (8006b48 <send_command+0x13c>)
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d004      	beq.n	8006afe <send_command+0xf2>
			processComplete = 1;
 8006af4:	230f      	movs	r3, #15
 8006af6:	18fb      	adds	r3, r7, r3
 8006af8:	2201      	movs	r2, #1
 8006afa:	701a      	strb	r2, [r3, #0]
 8006afc:	e017      	b.n	8006b2e <send_command+0x122>
		} else {
			//printf("failed\n");
			processCount++;
 8006afe:	210e      	movs	r1, #14
 8006b00:	187b      	adds	r3, r7, r1
 8006b02:	781a      	ldrb	r2, [r3, #0]
 8006b04:	187b      	adds	r3, r7, r1
 8006b06:	3201      	adds	r2, #1
 8006b08:	701a      	strb	r2, [r3, #0]
			if (processCount > retryCount) {
 8006b0a:	187a      	adds	r2, r7, r1
 8006b0c:	003b      	movs	r3, r7
 8006b0e:	7812      	ldrb	r2, [r2, #0]
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d907      	bls.n	8006b26 <send_command+0x11a>
				if (isReset == 1) {
 8006b16:	2320      	movs	r3, #32
 8006b18:	18fb      	adds	r3, r7, r3
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d10c      	bne.n	8006b3a <send_command+0x12e>
					rebootsystem();
 8006b20:	f7ff fddc 	bl	80066dc <rebootsystem>
				}
				break;
 8006b24:	e009      	b.n	8006b3a <send_command+0x12e>
			}
			HAL_Delay(5000);
 8006b26:	4b10      	ldr	r3, [pc, #64]	; (8006b68 <send_command+0x15c>)
 8006b28:	0018      	movs	r0, r3
 8006b2a:	f003 f8d3 	bl	8009cd4 <HAL_Delay>
	while (processComplete == 0) {
 8006b2e:	230f      	movs	r3, #15
 8006b30:	18fb      	adds	r3, r7, r3
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d09f      	beq.n	8006a78 <send_command+0x6c>
		}
	}
}
 8006b38:	e000      	b.n	8006b3c <send_command+0x130>
				break;
 8006b3a:	46c0      	nop			; (mov r8, r8)
}
 8006b3c:	46c0      	nop			; (mov r8, r8)
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	b005      	add	sp, #20
 8006b42:	bd90      	pop	{r4, r7, pc}
 8006b44:	200008c5 	.word	0x200008c5
 8006b48:	200008cc 	.word	0x200008cc
 8006b4c:	200008cb 	.word	0x200008cb
 8006b50:	200008c4 	.word	0x200008c4
 8006b54:	200008cd 	.word	0x200008cd
 8006b58:	20000514 	.word	0x20000514
 8006b5c:	20000398 	.word	0x20000398
 8006b60:	200008c8 	.word	0x200008c8
 8006b64:	20000d6d 	.word	0x20000d6d
 8006b68:	00001388 	.word	0x00001388

08006b6c <quectel_init>:
void quectel_init() {
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b082      	sub	sp, #8
 8006b70:	af02      	add	r7, sp, #8
	// printf("--Sending AT-- \n");
	send_command("AT\r\n", 3, 1, 1, 1);
 8006b72:	4823      	ldr	r0, [pc, #140]	; (8006c00 <quectel_init+0x94>)
 8006b74:	2301      	movs	r3, #1
 8006b76:	9300      	str	r3, [sp, #0]
 8006b78:	2301      	movs	r3, #1
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	2103      	movs	r1, #3
 8006b7e:	f7ff ff45 	bl	8006a0c <send_command>
	ab = 2;
 8006b82:	4b20      	ldr	r3, [pc, #128]	; (8006c04 <quectel_init+0x98>)
 8006b84:	2202      	movs	r2, #2
 8006b86:	701a      	strb	r2, [r3, #0]
	send_command("AT+CBC\r\n", 4, 8, 3, 1);//get voltage of vbatt
 8006b88:	481f      	ldr	r0, [pc, #124]	; (8006c08 <quectel_init+0x9c>)
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	9300      	str	r3, [sp, #0]
 8006b8e:	2303      	movs	r3, #3
 8006b90:	2208      	movs	r2, #8
 8006b92:	2104      	movs	r1, #4
 8006b94:	f7ff ff3a 	bl	8006a0c <send_command>


	// printf("--sending AT+QIURC=1--\n");
	// send_command("AT+QIURC=1\r\n", 3, 1, 1,1);
	// printf("--Sending AT+CPIN-- \n");
	send_command("AT+CPIN?\r\n", 51, 2, 2, 1);
 8006b98:	481c      	ldr	r0, [pc, #112]	; (8006c0c <quectel_init+0xa0>)
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	9300      	str	r3, [sp, #0]
 8006b9e:	2302      	movs	r3, #2
 8006ba0:	2202      	movs	r2, #2
 8006ba2:	2133      	movs	r1, #51	; 0x33
 8006ba4:	f7ff ff32 	bl	8006a0c <send_command>
	ab = 3;
 8006ba8:	4b16      	ldr	r3, [pc, #88]	; (8006c04 <quectel_init+0x98>)
 8006baa:	2203      	movs	r2, #3
 8006bac:	701a      	strb	r2, [r3, #0]
	// printf("--Sending AT+CREG?-- \n");
	// send_command("AT+CREG?\r\n",3,3,5,1);
	// printf("--Sending AT+CGREG?-- \n");
	// send_command("AT+CGREG?\r\n",3,3,3,1);
	// printf("--Sending AT+CMGF=1-- \n");
	send_command("AT+CMGF=1\r\n", 3, 1, 3, 1);
 8006bae:	4818      	ldr	r0, [pc, #96]	; (8006c10 <quectel_init+0xa4>)
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	9300      	str	r3, [sp, #0]
 8006bb4:	2303      	movs	r3, #3
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	2103      	movs	r1, #3
 8006bba:	f7ff ff27 	bl	8006a0c <send_command>
	ab = 4;
 8006bbe:	4b11      	ldr	r3, [pc, #68]	; (8006c04 <quectel_init+0x98>)
 8006bc0:	2204      	movs	r2, #4
 8006bc2:	701a      	strb	r2, [r3, #0]

	// printf("--Sending AT+CNMI=2,2-- \n");
	send_command("AT+CNMI=2,2\r\n", 3, 1, 3, 1);
 8006bc4:	4813      	ldr	r0, [pc, #76]	; (8006c14 <quectel_init+0xa8>)
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	9300      	str	r3, [sp, #0]
 8006bca:	2303      	movs	r3, #3
 8006bcc:	2201      	movs	r2, #1
 8006bce:	2103      	movs	r1, #3
 8006bd0:	f7ff ff1c 	bl	8006a0c <send_command>
	ab = 5;
 8006bd4:	4b0b      	ldr	r3, [pc, #44]	; (8006c04 <quectel_init+0x98>)
 8006bd6:	2205      	movs	r2, #5
 8006bd8:	701a      	strb	r2, [r3, #0]

	// printf("--Sending AT+CGSN--\r\n \n");
	send_command("AT+CGSN\r\n", 3, 4, 2, 1);
 8006bda:	480f      	ldr	r0, [pc, #60]	; (8006c18 <quectel_init+0xac>)
 8006bdc:	2301      	movs	r3, #1
 8006bde:	9300      	str	r3, [sp, #0]
 8006be0:	2302      	movs	r3, #2
 8006be2:	2204      	movs	r2, #4
 8006be4:	2103      	movs	r1, #3
 8006be6:	f7ff ff11 	bl	8006a0c <send_command>
	send_command("AT+QMGDA=\"DEL ALL\"\r\n", 50, 1, 0, 0);
 8006bea:	480c      	ldr	r0, [pc, #48]	; (8006c1c <quectel_init+0xb0>)
 8006bec:	2300      	movs	r3, #0
 8006bee:	9300      	str	r3, [sp, #0]
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	2132      	movs	r1, #50	; 0x32
 8006bf6:	f7ff ff09 	bl	8006a0c <send_command>

}
 8006bfa:	46c0      	nop			; (mov r8, r8)
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}
 8006c00:	080135bc 	.word	0x080135bc
 8006c04:	20000d6d 	.word	0x20000d6d
 8006c08:	080135c4 	.word	0x080135c4
 8006c0c:	080135d0 	.word	0x080135d0
 8006c10:	080135dc 	.word	0x080135dc
 8006c14:	080135e8 	.word	0x080135e8
 8006c18:	080135f8 	.word	0x080135f8
 8006c1c:	08013604 	.word	0x08013604

08006c20 <estabilish_tcp>:

uint8_t estabilish_tcp() {
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af02      	add	r7, sp, #8
	// HAL_UART_Transmit(&huart4, "est tcp",
	// sizeof("est tcp"), 100);
	send_command("+++", 10, 1, 0, 0);
 8006c26:	4853      	ldr	r0, [pc, #332]	; (8006d74 <estabilish_tcp+0x154>)
 8006c28:	2300      	movs	r3, #0
 8006c2a:	9300      	str	r3, [sp, #0]
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	2201      	movs	r2, #1
 8006c30:	210a      	movs	r1, #10
 8006c32:	f7ff feeb 	bl	8006a0c <send_command>
	memset(tcpCommand, 0, sizeof(tcpCommand));
 8006c36:	4b50      	ldr	r3, [pc, #320]	; (8006d78 <estabilish_tcp+0x158>)
 8006c38:	2232      	movs	r2, #50	; 0x32
 8006c3a:	2100      	movs	r1, #0
 8006c3c:	0018      	movs	r0, r3
 8006c3e:	f008 f9e2 	bl	800f006 <memset>
	strcat(tcpCommand, "AT+QIOPEN=\"TCP\",\"");
 8006c42:	4b4d      	ldr	r3, [pc, #308]	; (8006d78 <estabilish_tcp+0x158>)
 8006c44:	0018      	movs	r0, r3
 8006c46:	f7f9 fa65 	bl	8000114 <strlen>
 8006c4a:	0003      	movs	r3, r0
 8006c4c:	001a      	movs	r2, r3
 8006c4e:	4b4a      	ldr	r3, [pc, #296]	; (8006d78 <estabilish_tcp+0x158>)
 8006c50:	18d2      	adds	r2, r2, r3
 8006c52:	4b4a      	ldr	r3, [pc, #296]	; (8006d7c <estabilish_tcp+0x15c>)
 8006c54:	0010      	movs	r0, r2
 8006c56:	0019      	movs	r1, r3
 8006c58:	2312      	movs	r3, #18
 8006c5a:	001a      	movs	r2, r3
 8006c5c:	f008 f9ca 	bl	800eff4 <memcpy>
	strcat(tcpCommand, domainAdd);
 8006c60:	4a47      	ldr	r2, [pc, #284]	; (8006d80 <estabilish_tcp+0x160>)
 8006c62:	4b45      	ldr	r3, [pc, #276]	; (8006d78 <estabilish_tcp+0x158>)
 8006c64:	0011      	movs	r1, r2
 8006c66:	0018      	movs	r0, r3
 8006c68:	f008 f9f6 	bl	800f058 <strcat>
	strcat(tcpCommand, "\",");
 8006c6c:	4b42      	ldr	r3, [pc, #264]	; (8006d78 <estabilish_tcp+0x158>)
 8006c6e:	0018      	movs	r0, r3
 8006c70:	f7f9 fa50 	bl	8000114 <strlen>
 8006c74:	0003      	movs	r3, r0
 8006c76:	001a      	movs	r2, r3
 8006c78:	4b3f      	ldr	r3, [pc, #252]	; (8006d78 <estabilish_tcp+0x158>)
 8006c7a:	18d2      	adds	r2, r2, r3
 8006c7c:	4b41      	ldr	r3, [pc, #260]	; (8006d84 <estabilish_tcp+0x164>)
 8006c7e:	0010      	movs	r0, r2
 8006c80:	0019      	movs	r1, r3
 8006c82:	2303      	movs	r3, #3
 8006c84:	001a      	movs	r2, r3
 8006c86:	f008 f9b5 	bl	800eff4 <memcpy>
	strcat(tcpCommand, portAdd);
 8006c8a:	4a3f      	ldr	r2, [pc, #252]	; (8006d88 <estabilish_tcp+0x168>)
 8006c8c:	4b3a      	ldr	r3, [pc, #232]	; (8006d78 <estabilish_tcp+0x158>)
 8006c8e:	0011      	movs	r1, r2
 8006c90:	0018      	movs	r0, r3
 8006c92:	f008 f9e1 	bl	800f058 <strcat>
	strcat(tcpCommand, "\r\n");
 8006c96:	4b38      	ldr	r3, [pc, #224]	; (8006d78 <estabilish_tcp+0x158>)
 8006c98:	0018      	movs	r0, r3
 8006c9a:	f7f9 fa3b 	bl	8000114 <strlen>
 8006c9e:	0003      	movs	r3, r0
 8006ca0:	001a      	movs	r2, r3
 8006ca2:	4b35      	ldr	r3, [pc, #212]	; (8006d78 <estabilish_tcp+0x158>)
 8006ca4:	18d2      	adds	r2, r2, r3
 8006ca6:	4b39      	ldr	r3, [pc, #228]	; (8006d8c <estabilish_tcp+0x16c>)
 8006ca8:	0010      	movs	r0, r2
 8006caa:	0019      	movs	r1, r3
 8006cac:	2303      	movs	r3, #3
 8006cae:	001a      	movs	r2, r3
 8006cb0:	f008 f9a0 	bl	800eff4 <memcpy>
	// printf("--Sent AT+QIDEACT \n");
	send_command("AT+QIDEACT\r\n", 401, 1, 2, 0);
 8006cb4:	2392      	movs	r3, #146	; 0x92
 8006cb6:	33ff      	adds	r3, #255	; 0xff
 8006cb8:	0019      	movs	r1, r3
 8006cba:	4835      	ldr	r0, [pc, #212]	; (8006d90 <estabilish_tcp+0x170>)
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	9300      	str	r3, [sp, #0]
 8006cc0:	2302      	movs	r3, #2
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f7ff fea2 	bl	8006a0c <send_command>

	if (isResponseOk == 0) {
 8006cc8:	4b32      	ldr	r3, [pc, #200]	; (8006d94 <estabilish_tcp+0x174>)
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d101      	bne.n	8006cd6 <estabilish_tcp+0xb6>
		return 0;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	e04b      	b.n	8006d6e <estabilish_tcp+0x14e>
	}
	send_command("AT+QIMODE=1\r\n", 3, 1, 3, 0);
 8006cd6:	4830      	ldr	r0, [pc, #192]	; (8006d98 <estabilish_tcp+0x178>)
 8006cd8:	2300      	movs	r3, #0
 8006cda:	9300      	str	r3, [sp, #0]
 8006cdc:	2303      	movs	r3, #3
 8006cde:	2201      	movs	r2, #1
 8006ce0:	2103      	movs	r1, #3
 8006ce2:	f7ff fe93 	bl	8006a0c <send_command>
	if (isResponseOk == 0) {
 8006ce6:	4b2b      	ldr	r3, [pc, #172]	; (8006d94 <estabilish_tcp+0x174>)
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d101      	bne.n	8006cf4 <estabilish_tcp+0xd4>
		return 0;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	e03c      	b.n	8006d6e <estabilish_tcp+0x14e>
	}
	send_command("AT+QITCFG=3,2,512,1\r\n", 3, 1, 1, 0);
 8006cf4:	4829      	ldr	r0, [pc, #164]	; (8006d9c <estabilish_tcp+0x17c>)
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	9300      	str	r3, [sp, #0]
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	2103      	movs	r1, #3
 8006d00:	f7ff fe84 	bl	8006a0c <send_command>
	if (isResponseOk == 0) {
 8006d04:	4b23      	ldr	r3, [pc, #140]	; (8006d94 <estabilish_tcp+0x174>)
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d101      	bne.n	8006d12 <estabilish_tcp+0xf2>
		return 0;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	e02d      	b.n	8006d6e <estabilish_tcp+0x14e>
	}
	send_command("AT+QIREGAPP=\"network\",\"\",\"\"\r\n", 3, 1, 1, 0);
 8006d12:	4823      	ldr	r0, [pc, #140]	; (8006da0 <estabilish_tcp+0x180>)
 8006d14:	2300      	movs	r3, #0
 8006d16:	9300      	str	r3, [sp, #0]
 8006d18:	2301      	movs	r3, #1
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	2103      	movs	r1, #3
 8006d1e:	f7ff fe75 	bl	8006a0c <send_command>
	if (isResponseOk == 0) {
 8006d22:	4b1c      	ldr	r3, [pc, #112]	; (8006d94 <estabilish_tcp+0x174>)
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d101      	bne.n	8006d30 <estabilish_tcp+0x110>
		return 0;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	e01e      	b.n	8006d6e <estabilish_tcp+0x14e>
	}
	send_command("AT+QIACT\r\n", 1510, 1, 0, 0);
 8006d30:	491c      	ldr	r1, [pc, #112]	; (8006da4 <estabilish_tcp+0x184>)
 8006d32:	481d      	ldr	r0, [pc, #116]	; (8006da8 <estabilish_tcp+0x188>)
 8006d34:	2300      	movs	r3, #0
 8006d36:	9300      	str	r3, [sp, #0]
 8006d38:	2300      	movs	r3, #0
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f7ff fe66 	bl	8006a0c <send_command>
	if (isResponseOk == 0) {
 8006d40:	4b14      	ldr	r3, [pc, #80]	; (8006d94 <estabilish_tcp+0x174>)
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d101      	bne.n	8006d4e <estabilish_tcp+0x12e>
		return 0;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	e00f      	b.n	8006d6e <estabilish_tcp+0x14e>
	}
	// HAL_UART_Transmit(&huart4, "S qiopen", sizeof("S qiopen"), 100);

	send_command(tcpCommand, 751, 5, 2, 0);
 8006d4e:	4917      	ldr	r1, [pc, #92]	; (8006dac <estabilish_tcp+0x18c>)
 8006d50:	4809      	ldr	r0, [pc, #36]	; (8006d78 <estabilish_tcp+0x158>)
 8006d52:	2300      	movs	r3, #0
 8006d54:	9300      	str	r3, [sp, #0]
 8006d56:	2302      	movs	r3, #2
 8006d58:	2205      	movs	r2, #5
 8006d5a:	f7ff fe57 	bl	8006a0c <send_command>
	if (isResponseOk == 1) {
 8006d5e:	4b0d      	ldr	r3, [pc, #52]	; (8006d94 <estabilish_tcp+0x174>)
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d101      	bne.n	8006d6c <estabilish_tcp+0x14c>
		return 1;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e000      	b.n	8006d6e <estabilish_tcp+0x14e>
	} else {
		return 0;
 8006d6c:	2300      	movs	r3, #0
	}
}
 8006d6e:	0018      	movs	r0, r3
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	0801361c 	.word	0x0801361c
 8006d78:	200008f0 	.word	0x200008f0
 8006d7c:	08013620 	.word	0x08013620
 8006d80:	20000038 	.word	0x20000038
 8006d84:	08013634 	.word	0x08013634
 8006d88:	20000030 	.word	0x20000030
 8006d8c:	08013638 	.word	0x08013638
 8006d90:	0801363c 	.word	0x0801363c
 8006d94:	200008cc 	.word	0x200008cc
 8006d98:	0801364c 	.word	0x0801364c
 8006d9c:	0801365c 	.word	0x0801365c
 8006da0:	08013674 	.word	0x08013674
 8006da4:	000005e6 	.word	0x000005e6
 8006da8:	08013694 	.word	0x08013694
 8006dac:	000002ef 	.word	0x000002ef

08006db0 <GetCrc16>:

uint16_t GetCrc16(const uint8_t *pData, int nLength) {
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b084      	sub	sp, #16
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
	uint16_t fcs = 0xffff; // initialization
 8006dba:	230e      	movs	r3, #14
 8006dbc:	18fb      	adds	r3, r7, r3
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	4252      	negs	r2, r2
 8006dc2:	801a      	strh	r2, [r3, #0]
	int a = 0;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	60bb      	str	r3, [r7, #8]
	while (nLength > 0) {
 8006dc8:	e019      	b.n	8006dfe <GetCrc16+0x4e>
		a = (fcs ^ *pData) & 0xff;
 8006dca:	200e      	movs	r0, #14
 8006dcc:	183b      	adds	r3, r7, r0
 8006dce:	881b      	ldrh	r3, [r3, #0]
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	7812      	ldrb	r2, [r2, #0]
 8006dd4:	4053      	eors	r3, r2
 8006dd6:	22ff      	movs	r2, #255	; 0xff
 8006dd8:	4013      	ands	r3, r2
 8006dda:	60bb      	str	r3, [r7, #8]
		fcs = (fcs >> 8) ^ crctab16[a];
 8006ddc:	183b      	adds	r3, r7, r0
 8006dde:	881b      	ldrh	r3, [r3, #0]
 8006de0:	0a1b      	lsrs	r3, r3, #8
 8006de2:	b299      	uxth	r1, r3
 8006de4:	4b0c      	ldr	r3, [pc, #48]	; (8006e18 <GetCrc16+0x68>)
 8006de6:	68ba      	ldr	r2, [r7, #8]
 8006de8:	0052      	lsls	r2, r2, #1
 8006dea:	5ad2      	ldrh	r2, [r2, r3]
 8006dec:	183b      	adds	r3, r7, r0
 8006dee:	404a      	eors	r2, r1
 8006df0:	801a      	strh	r2, [r3, #0]
		nLength--;
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	3b01      	subs	r3, #1
 8006df6:	603b      	str	r3, [r7, #0]
		pData++;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	607b      	str	r3, [r7, #4]
	while (nLength > 0) {
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	dce2      	bgt.n	8006dca <GetCrc16+0x1a>
	}
	return ~fcs; // negated
 8006e04:	230e      	movs	r3, #14
 8006e06:	18fb      	adds	r3, r7, r3
 8006e08:	881b      	ldrh	r3, [r3, #0]
 8006e0a:	43db      	mvns	r3, r3
 8006e0c:	b29b      	uxth	r3, r3
}
 8006e0e:	0018      	movs	r0, r3
 8006e10:	46bd      	mov	sp, r7
 8006e12:	b004      	add	sp, #16
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	46c0      	nop			; (mov r8, r8)
 8006e18:	08013748 	.word	0x08013748

08006e1c <where_api_handler>:

void where_api_handler() {
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b082      	sub	sp, #8
 8006e20:	af02      	add	r7, sp, #8
	if (isWhereApiCalled == 1) {
 8006e22:	4b17      	ldr	r3, [pc, #92]	; (8006e80 <where_api_handler+0x64>)
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d111      	bne.n	8006e4e <where_api_handler+0x32>
		// printf("--Sending AT+CREG?-- \n");
		// HAL_UART_Transmit(&huart4, "S creg in api", sizeof("S creg in api"),
		// 100);
		send_command("AT+CREG?\r\n", 3, 3, 3, 1);
 8006e2a:	4816      	ldr	r0, [pc, #88]	; (8006e84 <where_api_handler+0x68>)
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	9300      	str	r3, [sp, #0]
 8006e30:	2303      	movs	r3, #3
 8006e32:	2203      	movs	r2, #3
 8006e34:	2103      	movs	r1, #3
 8006e36:	f7ff fde9 	bl	8006a0c <send_command>
		if (isReg == 1) {
 8006e3a:	4b13      	ldr	r3, [pc, #76]	; (8006e88 <where_api_handler+0x6c>)
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d11a      	bne.n	8006e78 <where_api_handler+0x5c>
			send_current_location_via_sms(); //sending current location
 8006e42:	f000 feb7 	bl	8007bb4 <send_current_location_via_sms>
			isWhereApiCalled = 0;
 8006e46:	4b0e      	ldr	r3, [pc, #56]	; (8006e80 <where_api_handler+0x64>)
 8006e48:	2200      	movs	r2, #0
 8006e4a:	701a      	strb	r2, [r3, #0]
		if (isReg == 1) {
			send_imei_via_sms(); //sending current location
			isIMEIApiCalled = 0;
		}
	}
}
 8006e4c:	e014      	b.n	8006e78 <where_api_handler+0x5c>
	}else if (isIMEIApiCalled == 1) {
 8006e4e:	4b0f      	ldr	r3, [pc, #60]	; (8006e8c <where_api_handler+0x70>)
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d110      	bne.n	8006e78 <where_api_handler+0x5c>
		send_command("AT+CREG?\r\n", 3, 3, 3, 1);
 8006e56:	480b      	ldr	r0, [pc, #44]	; (8006e84 <where_api_handler+0x68>)
 8006e58:	2301      	movs	r3, #1
 8006e5a:	9300      	str	r3, [sp, #0]
 8006e5c:	2303      	movs	r3, #3
 8006e5e:	2203      	movs	r2, #3
 8006e60:	2103      	movs	r1, #3
 8006e62:	f7ff fdd3 	bl	8006a0c <send_command>
		if (isReg == 1) {
 8006e66:	4b08      	ldr	r3, [pc, #32]	; (8006e88 <where_api_handler+0x6c>)
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d104      	bne.n	8006e78 <where_api_handler+0x5c>
			send_imei_via_sms(); //sending current location
 8006e6e:	f000 fe29 	bl	8007ac4 <send_imei_via_sms>
			isIMEIApiCalled = 0;
 8006e72:	4b06      	ldr	r3, [pc, #24]	; (8006e8c <where_api_handler+0x70>)
 8006e74:	2200      	movs	r2, #0
 8006e76:	701a      	strb	r2, [r3, #0]
}
 8006e78:	46c0      	nop			; (mov r8, r8)
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	46c0      	nop			; (mov r8, r8)
 8006e80:	20000a7a 	.word	0x20000a7a
 8006e84:	080134b0 	.word	0x080134b0
 8006e88:	20000a79 	.word	0x20000a79
 8006e8c:	20000a7b 	.word	0x20000a7b

08006e90 <alarm_sender>:
void alarm_sender(){
 8006e90:	b580      	push	{r7, lr}
 8006e92:	af00      	add	r7, sp, #0
	if(isAlarm){
 8006e94:	4b0b      	ldr	r3, [pc, #44]	; (8006ec4 <alarm_sender+0x34>)
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d00f      	beq.n	8006ebe <alarm_sender+0x2e>
		if (isReg == 1) {
 8006e9e:	4b0a      	ldr	r3, [pc, #40]	; (8006ec8 <alarm_sender+0x38>)
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d105      	bne.n	8006eb2 <alarm_sender+0x22>
			send_alarm_packet_via_sms();
 8006ea6:	f001 f86d 	bl	8007f84 <send_alarm_packet_via_sms>
			isAlarm = 0;
 8006eaa:	4b06      	ldr	r3, [pc, #24]	; (8006ec4 <alarm_sender+0x34>)
 8006eac:	2200      	movs	r2, #0
 8006eae:	701a      	strb	r2, [r3, #0]
			saveAlarm=1;
			isAlarm=0;
		}

	}
}
 8006eb0:	e005      	b.n	8006ebe <alarm_sender+0x2e>
			saveAlarm=1;
 8006eb2:	4b06      	ldr	r3, [pc, #24]	; (8006ecc <alarm_sender+0x3c>)
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	701a      	strb	r2, [r3, #0]
			isAlarm=0;
 8006eb8:	4b02      	ldr	r3, [pc, #8]	; (8006ec4 <alarm_sender+0x34>)
 8006eba:	2200      	movs	r2, #0
 8006ebc:	701a      	strb	r2, [r3, #0]
}
 8006ebe:	46c0      	nop			; (mov r8, r8)
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}
 8006ec4:	20000771 	.word	0x20000771
 8006ec8:	20000a79 	.word	0x20000a79
 8006ecc:	20000776 	.word	0x20000776

08006ed0 <clearit>:

void clearit() {
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	af00      	add	r7, sp, #0
	resTimeout = 3;
 8006ed4:	4b0e      	ldr	r3, [pc, #56]	; (8006f10 <clearit+0x40>)
 8006ed6:	2203      	movs	r2, #3
 8006ed8:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim6);
 8006eda:	4b0e      	ldr	r3, [pc, #56]	; (8006f14 <clearit+0x44>)
 8006edc:	0018      	movs	r0, r3
 8006ede:	f005 f987 	bl	800c1f0 <HAL_TIM_Base_Stop_IT>
	memset(responseBuffer, 0, sizeof(responseBuffer));
 8006ee2:	2396      	movs	r3, #150	; 0x96
 8006ee4:	005a      	lsls	r2, r3, #1
 8006ee6:	4b0c      	ldr	r3, [pc, #48]	; (8006f18 <clearit+0x48>)
 8006ee8:	2100      	movs	r1, #0
 8006eea:	0018      	movs	r0, r3
 8006eec:	f008 f88b 	bl	800f006 <memset>
	lineCount = 0;
 8006ef0:	4b0a      	ldr	r3, [pc, #40]	; (8006f1c <clearit+0x4c>)
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	701a      	strb	r2, [r3, #0]
	charCount = 0;
 8006ef6:	4b0a      	ldr	r3, [pc, #40]	; (8006f20 <clearit+0x50>)
 8006ef8:	2200      	movs	r2, #0
 8006efa:	701a      	strb	r2, [r3, #0]
	isStart = 0;
 8006efc:	4b09      	ldr	r3, [pc, #36]	; (8006f24 <clearit+0x54>)
 8006efe:	2200      	movs	r2, #0
 8006f00:	701a      	strb	r2, [r3, #0]
	isBusy = 0;
 8006f02:	4b09      	ldr	r3, [pc, #36]	; (8006f28 <clearit+0x58>)
 8006f04:	2200      	movs	r2, #0
 8006f06:	701a      	strb	r2, [r3, #0]

}
 8006f08:	46c0      	nop			; (mov r8, r8)
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	46c0      	nop			; (mov r8, r8)
 8006f10:	200008c8 	.word	0x200008c8
 8006f14:	20000398 	.word	0x20000398
 8006f18:	20000794 	.word	0x20000794
 8006f1c:	200008c0 	.word	0x200008c0
 8006f20:	200008c1 	.word	0x200008c1
 8006f24:	200008c4 	.word	0x200008c4
 8006f28:	200008c5 	.word	0x200008c5

08006f2c <incoming_msg_handler>:

void incoming_msg_handler() {
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b082      	sub	sp, #8
 8006f30:	af02      	add	r7, sp, #8
	if (isPulse == 1) {
 8006f32:	4b26      	ldr	r3, [pc, #152]	; (8006fcc <incoming_msg_handler+0xa0>)
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d144      	bne.n	8006fc6 <incoming_msg_handler+0x9a>
		isPulse = 0;
 8006f3c:	4b23      	ldr	r3, [pc, #140]	; (8006fcc <incoming_msg_handler+0xa0>)
 8006f3e:	2200      	movs	r2, #0
 8006f40:	701a      	strb	r2, [r3, #0]
		//printf("--Sending +++-- \n");
		//HAL_UART_Transmit(&huart4, "S +++ incom", sizeof("S +++ incom"), 100);
		send_command("+++", 10, 1, 0, 0);
 8006f42:	4823      	ldr	r0, [pc, #140]	; (8006fd0 <incoming_msg_handler+0xa4>)
 8006f44:	2300      	movs	r3, #0
 8006f46:	9300      	str	r3, [sp, #0]
 8006f48:	2300      	movs	r3, #0
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	210a      	movs	r1, #10
 8006f4e:	f7ff fd5d 	bl	8006a0c <send_command>
		isDataMode = 0;
 8006f52:	4b20      	ldr	r3, [pc, #128]	; (8006fd4 <incoming_msg_handler+0xa8>)
 8006f54:	2200      	movs	r2, #0
 8006f56:	701a      	strb	r2, [r3, #0]
		indicationCounter = 0;
 8006f58:	4b1f      	ldr	r3, [pc, #124]	; (8006fd8 <incoming_msg_handler+0xac>)
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	701a      	strb	r2, [r3, #0]
		while (indicationCounter < 5)
 8006f5e:	46c0      	nop			; (mov r8, r8)
 8006f60:	4b1d      	ldr	r3, [pc, #116]	; (8006fd8 <incoming_msg_handler+0xac>)
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	2b04      	cmp	r3, #4
 8006f66:	d9fb      	bls.n	8006f60 <incoming_msg_handler+0x34>
			;
		where_api_handler();
 8006f68:	f7ff ff58 	bl	8006e1c <where_api_handler>
		//HAL_UART_Transmit(&huart4, "S msg del", sizeof("S msg del"), 100);
		send_command("AT+QMGDA=\"DEL ALL\"\r\n", 50, 1, 0, 0);
 8006f6c:	481b      	ldr	r0, [pc, #108]	; (8006fdc <incoming_msg_handler+0xb0>)
 8006f6e:	2300      	movs	r3, #0
 8006f70:	9300      	str	r3, [sp, #0]
 8006f72:	2300      	movs	r3, #0
 8006f74:	2201      	movs	r2, #1
 8006f76:	2132      	movs	r1, #50	; 0x32
 8006f78:	f7ff fd48 	bl	8006a0c <send_command>
		msgcleared = 0;
 8006f7c:	4b18      	ldr	r3, [pc, #96]	; (8006fe0 <incoming_msg_handler+0xb4>)
 8006f7e:	2200      	movs	r2, #0
 8006f80:	701a      	strb	r2, [r3, #0]
		if (isResponseOk == 1) {
 8006f82:	4b18      	ldr	r3, [pc, #96]	; (8006fe4 <incoming_msg_handler+0xb8>)
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d102      	bne.n	8006f92 <incoming_msg_handler+0x66>
			msgcleared = 1;
 8006f8c:	4b14      	ldr	r3, [pc, #80]	; (8006fe0 <incoming_msg_handler+0xb4>)
 8006f8e:	2201      	movs	r2, #1
 8006f90:	701a      	strb	r2, [r3, #0]
		}
		//printf("--Sending ATO-- \n");
		send_command("ATO\r\n", 10, 6, 0, 0);
 8006f92:	4815      	ldr	r0, [pc, #84]	; (8006fe8 <incoming_msg_handler+0xbc>)
 8006f94:	2300      	movs	r3, #0
 8006f96:	9300      	str	r3, [sp, #0]
 8006f98:	2300      	movs	r3, #0
 8006f9a:	2206      	movs	r2, #6
 8006f9c:	210a      	movs	r1, #10
 8006f9e:	f7ff fd35 	bl	8006a0c <send_command>
		if (isResponseOk == 1) {
 8006fa2:	4b10      	ldr	r3, [pc, #64]	; (8006fe4 <incoming_msg_handler+0xb8>)
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d103      	bne.n	8006fb4 <incoming_msg_handler+0x88>
			isDataMode = 1;
 8006fac:	4b09      	ldr	r3, [pc, #36]	; (8006fd4 <incoming_msg_handler+0xa8>)
 8006fae:	2201      	movs	r2, #1
 8006fb0:	701a      	strb	r2, [r3, #0]
			isDataMode = 0;
			isTcpOpen = 0;
		}
	}

}
 8006fb2:	e008      	b.n	8006fc6 <incoming_msg_handler+0x9a>
			isLoggedIn = 0;
 8006fb4:	4b0d      	ldr	r3, [pc, #52]	; (8006fec <incoming_msg_handler+0xc0>)
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	701a      	strb	r2, [r3, #0]
			isDataMode = 0;
 8006fba:	4b06      	ldr	r3, [pc, #24]	; (8006fd4 <incoming_msg_handler+0xa8>)
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	701a      	strb	r2, [r3, #0]
			isTcpOpen = 0;
 8006fc0:	4b0b      	ldr	r3, [pc, #44]	; (8006ff0 <incoming_msg_handler+0xc4>)
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	701a      	strb	r2, [r3, #0]
}
 8006fc6:	46c0      	nop			; (mov r8, r8)
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	20000789 	.word	0x20000789
 8006fd0:	0801361c 	.word	0x0801361c
 8006fd4:	200008c6 	.word	0x200008c6
 8006fd8:	20000781 	.word	0x20000781
 8006fdc:	08013604 	.word	0x08013604
 8006fe0:	200008ec 	.word	0x200008ec
 8006fe4:	200008cc 	.word	0x200008cc
 8006fe8:	080136a0 	.word	0x080136a0
 8006fec:	20000a7c 	.word	0x20000a7c
 8006ff0:	20000a78 	.word	0x20000a78

08006ff4 <send_login_packet>:

void send_login_packet() {
 8006ff4:	b5b0      	push	{r4, r5, r7, lr}
 8006ff6:	b086      	sub	sp, #24
 8006ff8:	af00      	add	r7, sp, #0
	if (isTcpOpen == 1 && isDataMode == 1) {
 8006ffa:	4b39      	ldr	r3, [pc, #228]	; (80070e0 <send_login_packet+0xec>)
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	2b01      	cmp	r3, #1
 8007002:	d169      	bne.n	80070d8 <send_login_packet+0xe4>
 8007004:	4b37      	ldr	r3, [pc, #220]	; (80070e4 <send_login_packet+0xf0>)
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	b2db      	uxtb	r3, r3
 800700a:	2b01      	cmp	r3, #1
 800700c:	d164      	bne.n	80070d8 <send_login_packet+0xe4>
		for (uint8_t i = 0; i < 8; i++) {
 800700e:	2317      	movs	r3, #23
 8007010:	18fb      	adds	r3, r7, r3
 8007012:	2200      	movs	r2, #0
 8007014:	701a      	strb	r2, [r3, #0]
 8007016:	e00e      	b.n	8007036 <send_login_packet+0x42>
			loginPacket[i + 4] = imei[i];
 8007018:	2017      	movs	r0, #23
 800701a:	183b      	adds	r3, r7, r0
 800701c:	781a      	ldrb	r2, [r3, #0]
 800701e:	183b      	adds	r3, r7, r0
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	3304      	adds	r3, #4
 8007024:	4930      	ldr	r1, [pc, #192]	; (80070e8 <send_login_packet+0xf4>)
 8007026:	5c89      	ldrb	r1, [r1, r2]
 8007028:	4a30      	ldr	r2, [pc, #192]	; (80070ec <send_login_packet+0xf8>)
 800702a:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 8; i++) {
 800702c:	183b      	adds	r3, r7, r0
 800702e:	781a      	ldrb	r2, [r3, #0]
 8007030:	183b      	adds	r3, r7, r0
 8007032:	3201      	adds	r2, #1
 8007034:	701a      	strb	r2, [r3, #0]
 8007036:	2317      	movs	r3, #23
 8007038:	18fb      	adds	r3, r7, r3
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	2b07      	cmp	r3, #7
 800703e:	d9eb      	bls.n	8007018 <send_login_packet+0x24>
		}
		loginPacket[12] = infoSNo >> 8;
 8007040:	4b2b      	ldr	r3, [pc, #172]	; (80070f0 <send_login_packet+0xfc>)
 8007042:	881b      	ldrh	r3, [r3, #0]
 8007044:	0a1b      	lsrs	r3, r3, #8
 8007046:	b29b      	uxth	r3, r3
 8007048:	b2da      	uxtb	r2, r3
 800704a:	4b28      	ldr	r3, [pc, #160]	; (80070ec <send_login_packet+0xf8>)
 800704c:	731a      	strb	r2, [r3, #12]
		loginPacket[13] = infoSNo;
 800704e:	4b28      	ldr	r3, [pc, #160]	; (80070f0 <send_login_packet+0xfc>)
 8007050:	881b      	ldrh	r3, [r3, #0]
 8007052:	b2da      	uxtb	r2, r3
 8007054:	4b25      	ldr	r3, [pc, #148]	; (80070ec <send_login_packet+0xf8>)
 8007056:	735a      	strb	r2, [r3, #13]
		uint8_t tempCrcData[12];
		for (uint8_t i = 0; i < 12; i++) {
 8007058:	2316      	movs	r3, #22
 800705a:	18fb      	adds	r3, r7, r3
 800705c:	2200      	movs	r2, #0
 800705e:	701a      	strb	r2, [r3, #0]
 8007060:	e00e      	b.n	8007080 <send_login_packet+0x8c>
			tempCrcData[i] = loginPacket[i + 2];
 8007062:	2016      	movs	r0, #22
 8007064:	183b      	adds	r3, r7, r0
 8007066:	781b      	ldrb	r3, [r3, #0]
 8007068:	1c9a      	adds	r2, r3, #2
 800706a:	183b      	adds	r3, r7, r0
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	491f      	ldr	r1, [pc, #124]	; (80070ec <send_login_packet+0xf8>)
 8007070:	5c89      	ldrb	r1, [r1, r2]
 8007072:	003a      	movs	r2, r7
 8007074:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 12; i++) {
 8007076:	183b      	adds	r3, r7, r0
 8007078:	781a      	ldrb	r2, [r3, #0]
 800707a:	183b      	adds	r3, r7, r0
 800707c:	3201      	adds	r2, #1
 800707e:	701a      	strb	r2, [r3, #0]
 8007080:	2316      	movs	r3, #22
 8007082:	18fb      	adds	r3, r7, r3
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	2b0b      	cmp	r3, #11
 8007088:	d9eb      	bls.n	8007062 <send_login_packet+0x6e>
		}
		uint8_t *tempPtr = tempCrcData;
 800708a:	003b      	movs	r3, r7
 800708c:	613b      	str	r3, [r7, #16]
		uint16_t crcResult = 0;
 800708e:	250e      	movs	r5, #14
 8007090:	197b      	adds	r3, r7, r5
 8007092:	2200      	movs	r2, #0
 8007094:	801a      	strh	r2, [r3, #0]
		crcResult = GetCrc16(tempPtr,
 8007096:	197c      	adds	r4, r7, r5
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	210c      	movs	r1, #12
 800709c:	0018      	movs	r0, r3
 800709e:	f7ff fe87 	bl	8006db0 <GetCrc16>
 80070a2:	0003      	movs	r3, r0
 80070a4:	8023      	strh	r3, [r4, #0]
				sizeof(tempCrcData) / sizeof(tempCrcData[0]));
		loginPacket[14] = crcResult >> 8;
 80070a6:	0029      	movs	r1, r5
 80070a8:	187b      	adds	r3, r7, r1
 80070aa:	881b      	ldrh	r3, [r3, #0]
 80070ac:	0a1b      	lsrs	r3, r3, #8
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	b2da      	uxtb	r2, r3
 80070b2:	4b0e      	ldr	r3, [pc, #56]	; (80070ec <send_login_packet+0xf8>)
 80070b4:	739a      	strb	r2, [r3, #14]
		loginPacket[15] = crcResult;
 80070b6:	187b      	adds	r3, r7, r1
 80070b8:	881b      	ldrh	r3, [r3, #0]
 80070ba:	b2da      	uxtb	r2, r3
 80070bc:	4b0b      	ldr	r3, [pc, #44]	; (80070ec <send_login_packet+0xf8>)
 80070be:	73da      	strb	r2, [r3, #15]
		HAL_UART_Transmit(&AT_PORT, loginPacket, 18, 100);
 80070c0:	490a      	ldr	r1, [pc, #40]	; (80070ec <send_login_packet+0xf8>)
 80070c2:	480c      	ldr	r0, [pc, #48]	; (80070f4 <send_login_packet+0x100>)
 80070c4:	2364      	movs	r3, #100	; 0x64
 80070c6:	2212      	movs	r2, #18
 80070c8:	f006 f842 	bl	800d150 <HAL_UART_Transmit>
		//printf("SENT LOGING PACKET SUCCESSFULLY\n");
		infoSNo++;
 80070cc:	4b08      	ldr	r3, [pc, #32]	; (80070f0 <send_login_packet+0xfc>)
 80070ce:	881b      	ldrh	r3, [r3, #0]
 80070d0:	3301      	adds	r3, #1
 80070d2:	b29a      	uxth	r2, r3
 80070d4:	4b06      	ldr	r3, [pc, #24]	; (80070f0 <send_login_packet+0xfc>)
 80070d6:	801a      	strh	r2, [r3, #0]

	} else {
		//printf("TCP SESSION NOT OPENED\n");
	}
}
 80070d8:	46c0      	nop			; (mov r8, r8)
 80070da:	46bd      	mov	sp, r7
 80070dc:	b006      	add	sp, #24
 80070de:	bdb0      	pop	{r4, r5, r7, pc}
 80070e0:	20000a78 	.word	0x20000a78
 80070e4:	200008c6 	.word	0x200008c6
 80070e8:	200008d0 	.word	0x200008d0
 80070ec:	20000070 	.word	0x20000070
 80070f0:	2000006c 	.word	0x2000006c
 80070f4:	20000514 	.word	0x20000514

080070f8 <send_data_packet>:

void send_data_packet() {
 80070f8:	b5b0      	push	{r4, r5, r7, lr}
 80070fa:	b0a0      	sub	sp, #128	; 0x80
 80070fc:	af00      	add	r7, sp, #0
	infoSNo++;
 80070fe:	4bbc      	ldr	r3, [pc, #752]	; (80073f0 <send_data_packet+0x2f8>)
 8007100:	881b      	ldrh	r3, [r3, #0]
 8007102:	3301      	adds	r3, #1
 8007104:	b29a      	uxth	r2, r3
 8007106:	4bba      	ldr	r3, [pc, #744]	; (80073f0 <send_data_packet+0x2f8>)
 8007108:	801a      	strh	r2, [r3, #0]
	uint8_t sendCounter = 0;
 800710a:	237f      	movs	r3, #127	; 0x7f
 800710c:	18fb      	adds	r3, r7, r3
 800710e:	2200      	movs	r2, #0
 8007110:	701a      	strb	r2, [r3, #0]
	while (read_data_packet() == 1 && sendCounter < 100 && isLoggedIn == 1
 8007112:	e06d      	b.n	80071f0 <send_data_packet+0xf8>
			&& isDataMode == 1 && isTcpOpen == 1) {
		for (uint8_t i = 0; i < 18; i++) {
 8007114:	237e      	movs	r3, #126	; 0x7e
 8007116:	18fb      	adds	r3, r7, r3
 8007118:	2200      	movs	r2, #0
 800711a:	701a      	strb	r2, [r3, #0]
 800711c:	e00e      	b.n	800713c <send_data_packet+0x44>
			dataPacket[i + 4] = readPacket[i];
 800711e:	207e      	movs	r0, #126	; 0x7e
 8007120:	183b      	adds	r3, r7, r0
 8007122:	781a      	ldrb	r2, [r3, #0]
 8007124:	183b      	adds	r3, r7, r0
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	3304      	adds	r3, #4
 800712a:	49b2      	ldr	r1, [pc, #712]	; (80073f4 <send_data_packet+0x2fc>)
 800712c:	5c89      	ldrb	r1, [r1, r2]
 800712e:	4ab2      	ldr	r2, [pc, #712]	; (80073f8 <send_data_packet+0x300>)
 8007130:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 18; i++) {
 8007132:	183b      	adds	r3, r7, r0
 8007134:	781a      	ldrb	r2, [r3, #0]
 8007136:	183b      	adds	r3, r7, r0
 8007138:	3201      	adds	r2, #1
 800713a:	701a      	strb	r2, [r3, #0]
 800713c:	237e      	movs	r3, #126	; 0x7e
 800713e:	18fb      	adds	r3, r7, r3
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	2b11      	cmp	r3, #17
 8007144:	d9eb      	bls.n	800711e <send_data_packet+0x26>
		}

		dataPacket[30] = infoSNo >> 8;
 8007146:	4baa      	ldr	r3, [pc, #680]	; (80073f0 <send_data_packet+0x2f8>)
 8007148:	881b      	ldrh	r3, [r3, #0]
 800714a:	0a1b      	lsrs	r3, r3, #8
 800714c:	b29b      	uxth	r3, r3
 800714e:	b2da      	uxtb	r2, r3
 8007150:	4ba9      	ldr	r3, [pc, #676]	; (80073f8 <send_data_packet+0x300>)
 8007152:	779a      	strb	r2, [r3, #30]
		dataPacket[31] = infoSNo;
 8007154:	4ba6      	ldr	r3, [pc, #664]	; (80073f0 <send_data_packet+0x2f8>)
 8007156:	881b      	ldrh	r3, [r3, #0]
 8007158:	b2da      	uxtb	r2, r3
 800715a:	4ba7      	ldr	r3, [pc, #668]	; (80073f8 <send_data_packet+0x300>)
 800715c:	77da      	strb	r2, [r3, #31]
		uint8_t tempCrcData[30];
		for (uint8_t i = 0; i < 29; i++) {
 800715e:	237d      	movs	r3, #125	; 0x7d
 8007160:	18fb      	adds	r3, r7, r3
 8007162:	2200      	movs	r2, #0
 8007164:	701a      	strb	r2, [r3, #0]
 8007166:	e00f      	b.n	8007188 <send_data_packet+0x90>
			tempCrcData[i] = dataPacket[i + 2];
 8007168:	207d      	movs	r0, #125	; 0x7d
 800716a:	183b      	adds	r3, r7, r0
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	1c9a      	adds	r2, r3, #2
 8007170:	183b      	adds	r3, r7, r0
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	49a0      	ldr	r1, [pc, #640]	; (80073f8 <send_data_packet+0x300>)
 8007176:	5c89      	ldrb	r1, [r1, r2]
 8007178:	2244      	movs	r2, #68	; 0x44
 800717a:	18ba      	adds	r2, r7, r2
 800717c:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 29; i++) {
 800717e:	183b      	adds	r3, r7, r0
 8007180:	781a      	ldrb	r2, [r3, #0]
 8007182:	183b      	adds	r3, r7, r0
 8007184:	3201      	adds	r2, #1
 8007186:	701a      	strb	r2, [r3, #0]
 8007188:	237d      	movs	r3, #125	; 0x7d
 800718a:	18fb      	adds	r3, r7, r3
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	2b1c      	cmp	r3, #28
 8007190:	d9ea      	bls.n	8007168 <send_data_packet+0x70>
		}
		uint8_t *tempPtr = tempCrcData;
 8007192:	2344      	movs	r3, #68	; 0x44
 8007194:	18fb      	adds	r3, r7, r3
 8007196:	677b      	str	r3, [r7, #116]	; 0x74
		uint16_t crcResult = 0;
 8007198:	2572      	movs	r5, #114	; 0x72
 800719a:	197b      	adds	r3, r7, r5
 800719c:	2200      	movs	r2, #0
 800719e:	801a      	strh	r2, [r3, #0]
		crcResult = GetCrc16(tempPtr,
 80071a0:	197c      	adds	r4, r7, r5
 80071a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071a4:	211e      	movs	r1, #30
 80071a6:	0018      	movs	r0, r3
 80071a8:	f7ff fe02 	bl	8006db0 <GetCrc16>
 80071ac:	0003      	movs	r3, r0
 80071ae:	8023      	strh	r3, [r4, #0]
				sizeof(tempCrcData) / sizeof(tempCrcData[0]));
		dataPacket[32] = crcResult >> 8;
 80071b0:	0028      	movs	r0, r5
 80071b2:	183b      	adds	r3, r7, r0
 80071b4:	881b      	ldrh	r3, [r3, #0]
 80071b6:	0a1b      	lsrs	r3, r3, #8
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	b2d9      	uxtb	r1, r3
 80071bc:	4b8e      	ldr	r3, [pc, #568]	; (80073f8 <send_data_packet+0x300>)
 80071be:	2220      	movs	r2, #32
 80071c0:	5499      	strb	r1, [r3, r2]
		dataPacket[33] = crcResult;
 80071c2:	183b      	adds	r3, r7, r0
 80071c4:	881b      	ldrh	r3, [r3, #0]
 80071c6:	b2d9      	uxtb	r1, r3
 80071c8:	4b8b      	ldr	r3, [pc, #556]	; (80073f8 <send_data_packet+0x300>)
 80071ca:	2221      	movs	r2, #33	; 0x21
 80071cc:	5499      	strb	r1, [r3, r2]
		HAL_UART_Transmit(&AT_PORT, dataPacket, 36, 100);
 80071ce:	498a      	ldr	r1, [pc, #552]	; (80073f8 <send_data_packet+0x300>)
 80071d0:	488a      	ldr	r0, [pc, #552]	; (80073fc <send_data_packet+0x304>)
 80071d2:	2364      	movs	r3, #100	; 0x64
 80071d4:	2224      	movs	r2, #36	; 0x24
 80071d6:	f005 ffbb 	bl	800d150 <HAL_UART_Transmit>
		// HAL_UART_Transmit(&huart4, dataPacket, 36, 100);
		sendCounter++;
 80071da:	217f      	movs	r1, #127	; 0x7f
 80071dc:	187b      	adds	r3, r7, r1
 80071de:	781a      	ldrb	r2, [r3, #0]
 80071e0:	187b      	adds	r3, r7, r1
 80071e2:	3201      	adds	r2, #1
 80071e4:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1000);
 80071e6:	23fa      	movs	r3, #250	; 0xfa
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	0018      	movs	r0, r3
 80071ec:	f002 fd72 	bl	8009cd4 <HAL_Delay>
	while (read_data_packet() == 1 && sendCounter < 100 && isLoggedIn == 1
 80071f0:	f000 f9ea 	bl	80075c8 <read_data_packet>
 80071f4:	0003      	movs	r3, r0
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d114      	bne.n	8007224 <send_data_packet+0x12c>
 80071fa:	237f      	movs	r3, #127	; 0x7f
 80071fc:	18fb      	adds	r3, r7, r3
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	2b63      	cmp	r3, #99	; 0x63
 8007202:	d80f      	bhi.n	8007224 <send_data_packet+0x12c>
 8007204:	4b7e      	ldr	r3, [pc, #504]	; (8007400 <send_data_packet+0x308>)
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	b2db      	uxtb	r3, r3
 800720a:	2b01      	cmp	r3, #1
 800720c:	d10a      	bne.n	8007224 <send_data_packet+0x12c>
			&& isDataMode == 1 && isTcpOpen == 1) {
 800720e:	4b7d      	ldr	r3, [pc, #500]	; (8007404 <send_data_packet+0x30c>)
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	b2db      	uxtb	r3, r3
 8007214:	2b01      	cmp	r3, #1
 8007216:	d105      	bne.n	8007224 <send_data_packet+0x12c>
 8007218:	4b7b      	ldr	r3, [pc, #492]	; (8007408 <send_data_packet+0x310>)
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	b2db      	uxtb	r3, r3
 800721e:	2b01      	cmp	r3, #1
 8007220:	d100      	bne.n	8007224 <send_data_packet+0x12c>
 8007222:	e777      	b.n	8007114 <send_data_packet+0x1c>
	}
	if (read_data_packet() == 0) {
 8007224:	f000 f9d0 	bl	80075c8 <read_data_packet>
 8007228:	1e03      	subs	r3, r0, #0
 800722a:	d000      	beq.n	800722e <send_data_packet+0x136>
 800722c:	e0dc      	b.n	80073e8 <send_data_packet+0x2f0>
		if(isAlarm){
 800722e:	4b77      	ldr	r3, [pc, #476]	; (800740c <send_data_packet+0x314>)
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	b2db      	uxtb	r3, r3
 8007234:	2b00      	cmp	r3, #0
 8007236:	d074      	beq.n	8007322 <send_data_packet+0x22a>
			isAlarm=0;
 8007238:	4b74      	ldr	r3, [pc, #464]	; (800740c <send_data_packet+0x314>)
 800723a:	2200      	movs	r2, #0
 800723c:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < 18; i++) {
 800723e:	237c      	movs	r3, #124	; 0x7c
 8007240:	18fb      	adds	r3, r7, r3
 8007242:	2200      	movs	r2, #0
 8007244:	701a      	strb	r2, [r3, #0]
 8007246:	e010      	b.n	800726a <send_data_packet+0x172>
				alarmPacket[i + 4] = gps_info[i];
 8007248:	4b71      	ldr	r3, [pc, #452]	; (8007410 <send_data_packet+0x318>)
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	207c      	movs	r0, #124	; 0x7c
 800724e:	183b      	adds	r3, r7, r0
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	18d2      	adds	r2, r2, r3
 8007254:	183b      	adds	r3, r7, r0
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	3304      	adds	r3, #4
 800725a:	7811      	ldrb	r1, [r2, #0]
 800725c:	4a6d      	ldr	r2, [pc, #436]	; (8007414 <send_data_packet+0x31c>)
 800725e:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i = 0; i < 18; i++) {
 8007260:	183b      	adds	r3, r7, r0
 8007262:	781a      	ldrb	r2, [r3, #0]
 8007264:	183b      	adds	r3, r7, r0
 8007266:	3201      	adds	r2, #1
 8007268:	701a      	strb	r2, [r3, #0]
 800726a:	237c      	movs	r3, #124	; 0x7c
 800726c:	18fb      	adds	r3, r7, r3
 800726e:	781b      	ldrb	r3, [r3, #0]
 8007270:	2b11      	cmp	r3, #17
 8007272:	d9e9      	bls.n	8007248 <send_data_packet+0x150>
			}
			create_status_info();
 8007274:	f000 fa1e 	bl	80076b4 <create_status_info>
			alarmPacket[22]=TermInfo;
 8007278:	4b67      	ldr	r3, [pc, #412]	; (8007418 <send_data_packet+0x320>)
 800727a:	781a      	ldrb	r2, [r3, #0]
 800727c:	4b65      	ldr	r3, [pc, #404]	; (8007414 <send_data_packet+0x31c>)
 800727e:	759a      	strb	r2, [r3, #22]
			alarmPacket[23]=VLvl;
 8007280:	4b66      	ldr	r3, [pc, #408]	; (800741c <send_data_packet+0x324>)
 8007282:	781a      	ldrb	r2, [r3, #0]
 8007284:	4b63      	ldr	r3, [pc, #396]	; (8007414 <send_data_packet+0x31c>)
 8007286:	75da      	strb	r2, [r3, #23]
			alarmPacket[24]=GSMSS;
 8007288:	4b65      	ldr	r3, [pc, #404]	; (8007420 <send_data_packet+0x328>)
 800728a:	781a      	ldrb	r2, [r3, #0]
 800728c:	4b61      	ldr	r3, [pc, #388]	; (8007414 <send_data_packet+0x31c>)
 800728e:	761a      	strb	r2, [r3, #24]
			alarmPacket[26] = infoSNo >> 8;
 8007290:	4b57      	ldr	r3, [pc, #348]	; (80073f0 <send_data_packet+0x2f8>)
 8007292:	881b      	ldrh	r3, [r3, #0]
 8007294:	0a1b      	lsrs	r3, r3, #8
 8007296:	b29b      	uxth	r3, r3
 8007298:	b2da      	uxtb	r2, r3
 800729a:	4b5e      	ldr	r3, [pc, #376]	; (8007414 <send_data_packet+0x31c>)
 800729c:	769a      	strb	r2, [r3, #26]
			alarmPacket[27] = infoSNo;
 800729e:	4b54      	ldr	r3, [pc, #336]	; (80073f0 <send_data_packet+0x2f8>)
 80072a0:	881b      	ldrh	r3, [r3, #0]
 80072a2:	b2da      	uxtb	r2, r3
 80072a4:	4b5b      	ldr	r3, [pc, #364]	; (8007414 <send_data_packet+0x31c>)
 80072a6:	76da      	strb	r2, [r3, #27]
			uint8_t tempCrcData[30];
			for (uint8_t i = 0; i < 26; i++) {
 80072a8:	237b      	movs	r3, #123	; 0x7b
 80072aa:	18fb      	adds	r3, r7, r3
 80072ac:	2200      	movs	r2, #0
 80072ae:	701a      	strb	r2, [r3, #0]
 80072b0:	e00f      	b.n	80072d2 <send_data_packet+0x1da>
				tempCrcData[i] = alarmPacket[i + 2];
 80072b2:	207b      	movs	r0, #123	; 0x7b
 80072b4:	183b      	adds	r3, r7, r0
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	1c9a      	adds	r2, r3, #2
 80072ba:	183b      	adds	r3, r7, r0
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	4955      	ldr	r1, [pc, #340]	; (8007414 <send_data_packet+0x31c>)
 80072c0:	5c89      	ldrb	r1, [r1, r2]
 80072c2:	2224      	movs	r2, #36	; 0x24
 80072c4:	18ba      	adds	r2, r7, r2
 80072c6:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i = 0; i < 26; i++) {
 80072c8:	183b      	adds	r3, r7, r0
 80072ca:	781a      	ldrb	r2, [r3, #0]
 80072cc:	183b      	adds	r3, r7, r0
 80072ce:	3201      	adds	r2, #1
 80072d0:	701a      	strb	r2, [r3, #0]
 80072d2:	237b      	movs	r3, #123	; 0x7b
 80072d4:	18fb      	adds	r3, r7, r3
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	2b19      	cmp	r3, #25
 80072da:	d9ea      	bls.n	80072b2 <send_data_packet+0x1ba>
			}
			uint8_t *tempPtr = tempCrcData;
 80072dc:	2324      	movs	r3, #36	; 0x24
 80072de:	18fb      	adds	r3, r7, r3
 80072e0:	667b      	str	r3, [r7, #100]	; 0x64
			uint16_t crcResult = 0;
 80072e2:	2562      	movs	r5, #98	; 0x62
 80072e4:	197b      	adds	r3, r7, r5
 80072e6:	2200      	movs	r2, #0
 80072e8:	801a      	strh	r2, [r3, #0]
			crcResult = GetCrc16(tempPtr,
 80072ea:	197c      	adds	r4, r7, r5
 80072ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072ee:	211e      	movs	r1, #30
 80072f0:	0018      	movs	r0, r3
 80072f2:	f7ff fd5d 	bl	8006db0 <GetCrc16>
 80072f6:	0003      	movs	r3, r0
 80072f8:	8023      	strh	r3, [r4, #0]
					sizeof(tempCrcData) / sizeof(tempCrcData[0]));
			alarmPacket[28] = crcResult >> 8;
 80072fa:	0029      	movs	r1, r5
 80072fc:	187b      	adds	r3, r7, r1
 80072fe:	881b      	ldrh	r3, [r3, #0]
 8007300:	0a1b      	lsrs	r3, r3, #8
 8007302:	b29b      	uxth	r3, r3
 8007304:	b2da      	uxtb	r2, r3
 8007306:	4b43      	ldr	r3, [pc, #268]	; (8007414 <send_data_packet+0x31c>)
 8007308:	771a      	strb	r2, [r3, #28]
			alarmPacket[29] = crcResult;
 800730a:	187b      	adds	r3, r7, r1
 800730c:	881b      	ldrh	r3, [r3, #0]
 800730e:	b2da      	uxtb	r2, r3
 8007310:	4b40      	ldr	r3, [pc, #256]	; (8007414 <send_data_packet+0x31c>)
 8007312:	775a      	strb	r2, [r3, #29]
			HAL_UART_Transmit(&AT_PORT, alarmPacket, 29, 100);
 8007314:	493f      	ldr	r1, [pc, #252]	; (8007414 <send_data_packet+0x31c>)
 8007316:	4839      	ldr	r0, [pc, #228]	; (80073fc <send_data_packet+0x304>)
 8007318:	2364      	movs	r3, #100	; 0x64
 800731a:	221d      	movs	r2, #29
 800731c:	f005 ff18 	bl	800d150 <HAL_UART_Transmit>

		}


	}
}
 8007320:	e062      	b.n	80073e8 <send_data_packet+0x2f0>
			for (uint8_t i = 0; i < 18; i++) {
 8007322:	237a      	movs	r3, #122	; 0x7a
 8007324:	18fb      	adds	r3, r7, r3
 8007326:	2200      	movs	r2, #0
 8007328:	701a      	strb	r2, [r3, #0]
 800732a:	e010      	b.n	800734e <send_data_packet+0x256>
				dataPacket[i + 4] = gps_info[i];
 800732c:	4b38      	ldr	r3, [pc, #224]	; (8007410 <send_data_packet+0x318>)
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	207a      	movs	r0, #122	; 0x7a
 8007332:	183b      	adds	r3, r7, r0
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	18d2      	adds	r2, r2, r3
 8007338:	183b      	adds	r3, r7, r0
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	3304      	adds	r3, #4
 800733e:	7811      	ldrb	r1, [r2, #0]
 8007340:	4a2d      	ldr	r2, [pc, #180]	; (80073f8 <send_data_packet+0x300>)
 8007342:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i = 0; i < 18; i++) {
 8007344:	183b      	adds	r3, r7, r0
 8007346:	781a      	ldrb	r2, [r3, #0]
 8007348:	183b      	adds	r3, r7, r0
 800734a:	3201      	adds	r2, #1
 800734c:	701a      	strb	r2, [r3, #0]
 800734e:	237a      	movs	r3, #122	; 0x7a
 8007350:	18fb      	adds	r3, r7, r3
 8007352:	781b      	ldrb	r3, [r3, #0]
 8007354:	2b11      	cmp	r3, #17
 8007356:	d9e9      	bls.n	800732c <send_data_packet+0x234>
			dataPacket[30] = infoSNo >> 8;
 8007358:	4b25      	ldr	r3, [pc, #148]	; (80073f0 <send_data_packet+0x2f8>)
 800735a:	881b      	ldrh	r3, [r3, #0]
 800735c:	0a1b      	lsrs	r3, r3, #8
 800735e:	b29b      	uxth	r3, r3
 8007360:	b2da      	uxtb	r2, r3
 8007362:	4b25      	ldr	r3, [pc, #148]	; (80073f8 <send_data_packet+0x300>)
 8007364:	779a      	strb	r2, [r3, #30]
			dataPacket[31] = infoSNo;
 8007366:	4b22      	ldr	r3, [pc, #136]	; (80073f0 <send_data_packet+0x2f8>)
 8007368:	881b      	ldrh	r3, [r3, #0]
 800736a:	b2da      	uxtb	r2, r3
 800736c:	4b22      	ldr	r3, [pc, #136]	; (80073f8 <send_data_packet+0x300>)
 800736e:	77da      	strb	r2, [r3, #31]
			for (uint8_t i = 0; i < 29; i++) {
 8007370:	2379      	movs	r3, #121	; 0x79
 8007372:	18fb      	adds	r3, r7, r3
 8007374:	2200      	movs	r2, #0
 8007376:	701a      	strb	r2, [r3, #0]
 8007378:	e00e      	b.n	8007398 <send_data_packet+0x2a0>
				tempCrcData[i] = dataPacket[i + 2];
 800737a:	2079      	movs	r0, #121	; 0x79
 800737c:	183b      	adds	r3, r7, r0
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	1c9a      	adds	r2, r3, #2
 8007382:	183b      	adds	r3, r7, r0
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	491c      	ldr	r1, [pc, #112]	; (80073f8 <send_data_packet+0x300>)
 8007388:	5c89      	ldrb	r1, [r1, r2]
 800738a:	1d3a      	adds	r2, r7, #4
 800738c:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i = 0; i < 29; i++) {
 800738e:	183b      	adds	r3, r7, r0
 8007390:	781a      	ldrb	r2, [r3, #0]
 8007392:	183b      	adds	r3, r7, r0
 8007394:	3201      	adds	r2, #1
 8007396:	701a      	strb	r2, [r3, #0]
 8007398:	2379      	movs	r3, #121	; 0x79
 800739a:	18fb      	adds	r3, r7, r3
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	2b1c      	cmp	r3, #28
 80073a0:	d9eb      	bls.n	800737a <send_data_packet+0x282>
			uint8_t *tempPtr = tempCrcData;
 80073a2:	1d3b      	adds	r3, r7, #4
 80073a4:	66fb      	str	r3, [r7, #108]	; 0x6c
			uint16_t crcResult = 0;
 80073a6:	256a      	movs	r5, #106	; 0x6a
 80073a8:	197b      	adds	r3, r7, r5
 80073aa:	2200      	movs	r2, #0
 80073ac:	801a      	strh	r2, [r3, #0]
			crcResult = GetCrc16(tempPtr,
 80073ae:	197c      	adds	r4, r7, r5
 80073b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073b2:	211e      	movs	r1, #30
 80073b4:	0018      	movs	r0, r3
 80073b6:	f7ff fcfb 	bl	8006db0 <GetCrc16>
 80073ba:	0003      	movs	r3, r0
 80073bc:	8023      	strh	r3, [r4, #0]
			dataPacket[32] = crcResult >> 8;
 80073be:	0028      	movs	r0, r5
 80073c0:	183b      	adds	r3, r7, r0
 80073c2:	881b      	ldrh	r3, [r3, #0]
 80073c4:	0a1b      	lsrs	r3, r3, #8
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	b2d9      	uxtb	r1, r3
 80073ca:	4b0b      	ldr	r3, [pc, #44]	; (80073f8 <send_data_packet+0x300>)
 80073cc:	2220      	movs	r2, #32
 80073ce:	5499      	strb	r1, [r3, r2]
			dataPacket[33] = crcResult;
 80073d0:	183b      	adds	r3, r7, r0
 80073d2:	881b      	ldrh	r3, [r3, #0]
 80073d4:	b2d9      	uxtb	r1, r3
 80073d6:	4b08      	ldr	r3, [pc, #32]	; (80073f8 <send_data_packet+0x300>)
 80073d8:	2221      	movs	r2, #33	; 0x21
 80073da:	5499      	strb	r1, [r3, r2]
			HAL_UART_Transmit(&AT_PORT, dataPacket, 36, 100);
 80073dc:	4906      	ldr	r1, [pc, #24]	; (80073f8 <send_data_packet+0x300>)
 80073de:	4807      	ldr	r0, [pc, #28]	; (80073fc <send_data_packet+0x304>)
 80073e0:	2364      	movs	r3, #100	; 0x64
 80073e2:	2224      	movs	r2, #36	; 0x24
 80073e4:	f005 feb4 	bl	800d150 <HAL_UART_Transmit>
}
 80073e8:	46c0      	nop			; (mov r8, r8)
 80073ea:	46bd      	mov	sp, r7
 80073ec:	b020      	add	sp, #128	; 0x80
 80073ee:	bdb0      	pop	{r4, r5, r7, pc}
 80073f0:	2000006c 	.word	0x2000006c
 80073f4:	20000aa0 	.word	0x20000aa0
 80073f8:	20000084 	.word	0x20000084
 80073fc:	20000514 	.word	0x20000514
 8007400:	20000a7c 	.word	0x20000a7c
 8007404:	200008c6 	.word	0x200008c6
 8007408:	20000a78 	.word	0x20000a78
 800740c:	20000771 	.word	0x20000771
 8007410:	2000002c 	.word	0x2000002c
 8007414:	200000a8 	.word	0x200000a8
 8007418:	20000777 	.word	0x20000777
 800741c:	20000779 	.word	0x20000779
 8007420:	20000778 	.word	0x20000778

08007424 <checkdatasize>:
uint8_t checkdatasize() {
 8007424:	b580      	push	{r7, lr}
 8007426:	af00      	add	r7, sp, #0
	if (StartSec == EndSec) {
 8007428:	4b1c      	ldr	r3, [pc, #112]	; (800749c <checkdatasize+0x78>)
 800742a:	881b      	ldrh	r3, [r3, #0]
 800742c:	b29a      	uxth	r2, r3
 800742e:	4b1c      	ldr	r3, [pc, #112]	; (80074a0 <checkdatasize+0x7c>)
 8007430:	881b      	ldrh	r3, [r3, #0]
 8007432:	b29b      	uxth	r3, r3
 8007434:	429a      	cmp	r2, r3
 8007436:	d10f      	bne.n	8007458 <checkdatasize+0x34>
		if ((StartN - EndN) >= 672) {
 8007438:	4b1a      	ldr	r3, [pc, #104]	; (80074a4 <checkdatasize+0x80>)
 800743a:	881b      	ldrh	r3, [r3, #0]
 800743c:	b29b      	uxth	r3, r3
 800743e:	001a      	movs	r2, r3
 8007440:	4b19      	ldr	r3, [pc, #100]	; (80074a8 <checkdatasize+0x84>)
 8007442:	881b      	ldrh	r3, [r3, #0]
 8007444:	b29b      	uxth	r3, r3
 8007446:	1ad2      	subs	r2, r2, r3
 8007448:	23a8      	movs	r3, #168	; 0xa8
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	429a      	cmp	r2, r3
 800744e:	db01      	blt.n	8007454 <checkdatasize+0x30>
			return 1;
 8007450:	2301      	movs	r3, #1
 8007452:	e01f      	b.n	8007494 <checkdatasize+0x70>
		} else {
			return 0;
 8007454:	2300      	movs	r3, #0
 8007456:	e01d      	b.n	8007494 <checkdatasize+0x70>
		}
	} else if ((StartSec - EndSec) == 1) {
 8007458:	4b10      	ldr	r3, [pc, #64]	; (800749c <checkdatasize+0x78>)
 800745a:	881b      	ldrh	r3, [r3, #0]
 800745c:	b29b      	uxth	r3, r3
 800745e:	001a      	movs	r2, r3
 8007460:	4b0f      	ldr	r3, [pc, #60]	; (80074a0 <checkdatasize+0x7c>)
 8007462:	881b      	ldrh	r3, [r3, #0]
 8007464:	b29b      	uxth	r3, r3
 8007466:	1ad3      	subs	r3, r2, r3
 8007468:	2b01      	cmp	r3, #1
 800746a:	d112      	bne.n	8007492 <checkdatasize+0x6e>
		if ((4096 - EndN + StartN) >= 672) {
 800746c:	4b0e      	ldr	r3, [pc, #56]	; (80074a8 <checkdatasize+0x84>)
 800746e:	881b      	ldrh	r3, [r3, #0]
 8007470:	b29b      	uxth	r3, r3
 8007472:	001a      	movs	r2, r3
 8007474:	2380      	movs	r3, #128	; 0x80
 8007476:	015b      	lsls	r3, r3, #5
 8007478:	1a9b      	subs	r3, r3, r2
 800747a:	4a0a      	ldr	r2, [pc, #40]	; (80074a4 <checkdatasize+0x80>)
 800747c:	8812      	ldrh	r2, [r2, #0]
 800747e:	b292      	uxth	r2, r2
 8007480:	189a      	adds	r2, r3, r2
 8007482:	23a8      	movs	r3, #168	; 0xa8
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	429a      	cmp	r2, r3
 8007488:	db01      	blt.n	800748e <checkdatasize+0x6a>
			return 1;
 800748a:	2301      	movs	r3, #1
 800748c:	e002      	b.n	8007494 <checkdatasize+0x70>
		} else {
			return 0;
 800748e:	2300      	movs	r3, #0
 8007490:	e000      	b.n	8007494 <checkdatasize+0x70>
		}
	} else {
		return 1;
 8007492:	2301      	movs	r3, #1
	}
}
 8007494:	0018      	movs	r0, r3
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
 800749a:	46c0      	nop			; (mov r8, r8)
 800749c:	20000d64 	.word	0x20000d64
 80074a0:	20000d66 	.word	0x20000d66
 80074a4:	20000d60 	.word	0x20000d60
 80074a8:	20000d62 	.word	0x20000d62

080074ac <save_data_packet>:

void save_data_packet() {
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af00      	add	r7, sp, #0

	if(saveAlarm){
 80074b2:	4b3c      	ldr	r3, [pc, #240]	; (80075a4 <save_data_packet+0xf8>)
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d002      	beq.n	80074c2 <save_data_packet+0x16>
		saveAlarm=0;
 80074bc:	4b39      	ldr	r3, [pc, #228]	; (80075a4 <save_data_packet+0xf8>)
 80074be:	2200      	movs	r2, #0
 80074c0:	701a      	strb	r2, [r3, #0]
		//todo save packet
	}
	memset(savePacket, 0, sizeof(savePacket));
 80074c2:	4b39      	ldr	r3, [pc, #228]	; (80075a8 <save_data_packet+0xfc>)
 80074c4:	2220      	movs	r2, #32
 80074c6:	2100      	movs	r1, #0
 80074c8:	0018      	movs	r0, r3
 80074ca:	f007 fd9c 	bl	800f006 <memset>
	for (uint8_t i = 0; i < 18; i++) {
 80074ce:	1dfb      	adds	r3, r7, #7
 80074d0:	2200      	movs	r2, #0
 80074d2:	701a      	strb	r2, [r3, #0]
 80074d4:	e00e      	b.n	80074f4 <save_data_packet+0x48>
		savePacket[i] = gps_info[i];
 80074d6:	4b35      	ldr	r3, [pc, #212]	; (80075ac <save_data_packet+0x100>)
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	1dfb      	adds	r3, r7, #7
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	18d2      	adds	r2, r2, r3
 80074e0:	1dfb      	adds	r3, r7, #7
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	7811      	ldrb	r1, [r2, #0]
 80074e6:	4a30      	ldr	r2, [pc, #192]	; (80075a8 <save_data_packet+0xfc>)
 80074e8:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 18; i++) {
 80074ea:	1dfb      	adds	r3, r7, #7
 80074ec:	781a      	ldrb	r2, [r3, #0]
 80074ee:	1dfb      	adds	r3, r7, #7
 80074f0:	3201      	adds	r2, #1
 80074f2:	701a      	strb	r2, [r3, #0]
 80074f4:	1dfb      	adds	r3, r7, #7
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	2b11      	cmp	r3, #17
 80074fa:	d9ec      	bls.n	80074d6 <save_data_packet+0x2a>
	}
	W25qxx_WriteSector(savePacket, StartSec, StartN, 32);
 80074fc:	4b2c      	ldr	r3, [pc, #176]	; (80075b0 <save_data_packet+0x104>)
 80074fe:	881b      	ldrh	r3, [r3, #0]
 8007500:	b29b      	uxth	r3, r3
 8007502:	0019      	movs	r1, r3
 8007504:	4b2b      	ldr	r3, [pc, #172]	; (80075b4 <save_data_packet+0x108>)
 8007506:	881b      	ldrh	r3, [r3, #0]
 8007508:	b29b      	uxth	r3, r3
 800750a:	001a      	movs	r2, r3
 800750c:	4826      	ldr	r0, [pc, #152]	; (80075a8 <save_data_packet+0xfc>)
 800750e:	2320      	movs	r3, #32
 8007510:	f002 f936 	bl	8009780 <W25qxx_WriteSector>
	StartN = StartN + 32;
 8007514:	4b27      	ldr	r3, [pc, #156]	; (80075b4 <save_data_packet+0x108>)
 8007516:	881b      	ldrh	r3, [r3, #0]
 8007518:	b29b      	uxth	r3, r3
 800751a:	3320      	adds	r3, #32
 800751c:	b29a      	uxth	r2, r3
 800751e:	4b25      	ldr	r3, [pc, #148]	; (80075b4 <save_data_packet+0x108>)
 8007520:	801a      	strh	r2, [r3, #0]
	if (StartN > 4090) {
 8007522:	4b24      	ldr	r3, [pc, #144]	; (80075b4 <save_data_packet+0x108>)
 8007524:	881b      	ldrh	r3, [r3, #0]
 8007526:	b29b      	uxth	r3, r3
 8007528:	4a23      	ldr	r2, [pc, #140]	; (80075b8 <save_data_packet+0x10c>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d935      	bls.n	800759a <save_data_packet+0xee>
		StartN = 0;
 800752e:	4b21      	ldr	r3, [pc, #132]	; (80075b4 <save_data_packet+0x108>)
 8007530:	2200      	movs	r2, #0
 8007532:	801a      	strh	r2, [r3, #0]
		StartSec += 1;
 8007534:	4b1e      	ldr	r3, [pc, #120]	; (80075b0 <save_data_packet+0x104>)
 8007536:	881b      	ldrh	r3, [r3, #0]
 8007538:	b29b      	uxth	r3, r3
 800753a:	3301      	adds	r3, #1
 800753c:	b29a      	uxth	r2, r3
 800753e:	4b1c      	ldr	r3, [pc, #112]	; (80075b0 <save_data_packet+0x104>)
 8007540:	801a      	strh	r2, [r3, #0]
		if (StartSec == 1024) {
 8007542:	4b1b      	ldr	r3, [pc, #108]	; (80075b0 <save_data_packet+0x104>)
 8007544:	881b      	ldrh	r3, [r3, #0]
 8007546:	b29a      	uxth	r2, r3
 8007548:	2380      	movs	r3, #128	; 0x80
 800754a:	00db      	lsls	r3, r3, #3
 800754c:	429a      	cmp	r2, r3
 800754e:	d102      	bne.n	8007556 <save_data_packet+0xaa>
			StartSec = 1;
 8007550:	4b17      	ldr	r3, [pc, #92]	; (80075b0 <save_data_packet+0x104>)
 8007552:	2201      	movs	r2, #1
 8007554:	801a      	strh	r2, [r3, #0]
		}
		W25qxx_EraseSector(StartSec);
 8007556:	4b16      	ldr	r3, [pc, #88]	; (80075b0 <save_data_packet+0x104>)
 8007558:	881b      	ldrh	r3, [r3, #0]
 800755a:	b29b      	uxth	r3, r3
 800755c:	0018      	movs	r0, r3
 800755e:	f002 f819 	bl	8009594 <W25qxx_EraseSector>
		if (StartSec == EndSec) {
 8007562:	4b13      	ldr	r3, [pc, #76]	; (80075b0 <save_data_packet+0x104>)
 8007564:	881b      	ldrh	r3, [r3, #0]
 8007566:	b29a      	uxth	r2, r3
 8007568:	4b14      	ldr	r3, [pc, #80]	; (80075bc <save_data_packet+0x110>)
 800756a:	881b      	ldrh	r3, [r3, #0]
 800756c:	b29b      	uxth	r3, r3
 800756e:	429a      	cmp	r2, r3
 8007570:	d113      	bne.n	800759a <save_data_packet+0xee>
			EndN = 0;
 8007572:	4b13      	ldr	r3, [pc, #76]	; (80075c0 <save_data_packet+0x114>)
 8007574:	2200      	movs	r2, #0
 8007576:	801a      	strh	r2, [r3, #0]
			if (EndSec == 1023) {
 8007578:	4b10      	ldr	r3, [pc, #64]	; (80075bc <save_data_packet+0x110>)
 800757a:	881b      	ldrh	r3, [r3, #0]
 800757c:	b29b      	uxth	r3, r3
 800757e:	4a11      	ldr	r2, [pc, #68]	; (80075c4 <save_data_packet+0x118>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d103      	bne.n	800758c <save_data_packet+0xe0>
				EndSec = 1;
 8007584:	4b0d      	ldr	r3, [pc, #52]	; (80075bc <save_data_packet+0x110>)
 8007586:	2201      	movs	r2, #1
 8007588:	801a      	strh	r2, [r3, #0]
			} else {
				EndSec += 1;
			}
		}
	}
}
 800758a:	e006      	b.n	800759a <save_data_packet+0xee>
				EndSec += 1;
 800758c:	4b0b      	ldr	r3, [pc, #44]	; (80075bc <save_data_packet+0x110>)
 800758e:	881b      	ldrh	r3, [r3, #0]
 8007590:	b29b      	uxth	r3, r3
 8007592:	3301      	adds	r3, #1
 8007594:	b29a      	uxth	r2, r3
 8007596:	4b09      	ldr	r3, [pc, #36]	; (80075bc <save_data_packet+0x110>)
 8007598:	801a      	strh	r2, [r3, #0]
}
 800759a:	46c0      	nop			; (mov r8, r8)
 800759c:	46bd      	mov	sp, r7
 800759e:	b002      	add	sp, #8
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	46c0      	nop			; (mov r8, r8)
 80075a4:	20000776 	.word	0x20000776
 80075a8:	20000a80 	.word	0x20000a80
 80075ac:	2000002c 	.word	0x2000002c
 80075b0:	20000d64 	.word	0x20000d64
 80075b4:	20000d60 	.word	0x20000d60
 80075b8:	00000ffa 	.word	0x00000ffa
 80075bc:	20000d66 	.word	0x20000d66
 80075c0:	20000d62 	.word	0x20000d62
 80075c4:	000003ff 	.word	0x000003ff

080075c8 <read_data_packet>:
uint8_t read_data_packet() {
 80075c8:	b580      	push	{r7, lr}
 80075ca:	af00      	add	r7, sp, #0
	memset(readPacket, 0, sizeof(readPacket));
 80075cc:	4b32      	ldr	r3, [pc, #200]	; (8007698 <read_data_packet+0xd0>)
 80075ce:	2220      	movs	r2, #32
 80075d0:	2100      	movs	r1, #0
 80075d2:	0018      	movs	r0, r3
 80075d4:	f007 fd17 	bl	800f006 <memset>
	if ((EndSec == StartSec) && (EndN == StartN)) {
 80075d8:	4b30      	ldr	r3, [pc, #192]	; (800769c <read_data_packet+0xd4>)
 80075da:	881b      	ldrh	r3, [r3, #0]
 80075dc:	b29a      	uxth	r2, r3
 80075de:	4b30      	ldr	r3, [pc, #192]	; (80076a0 <read_data_packet+0xd8>)
 80075e0:	881b      	ldrh	r3, [r3, #0]
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d122      	bne.n	800762e <read_data_packet+0x66>
 80075e8:	4b2e      	ldr	r3, [pc, #184]	; (80076a4 <read_data_packet+0xdc>)
 80075ea:	881b      	ldrh	r3, [r3, #0]
 80075ec:	b29a      	uxth	r2, r3
 80075ee:	4b2e      	ldr	r3, [pc, #184]	; (80076a8 <read_data_packet+0xe0>)
 80075f0:	881b      	ldrh	r3, [r3, #0]
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d11a      	bne.n	800762e <read_data_packet+0x66>
		if (EndN != 0 || EndSec != 1) {
 80075f8:	4b2a      	ldr	r3, [pc, #168]	; (80076a4 <read_data_packet+0xdc>)
 80075fa:	881b      	ldrh	r3, [r3, #0]
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d104      	bne.n	800760c <read_data_packet+0x44>
 8007602:	4b26      	ldr	r3, [pc, #152]	; (800769c <read_data_packet+0xd4>)
 8007604:	881b      	ldrh	r3, [r3, #0]
 8007606:	b29b      	uxth	r3, r3
 8007608:	2b01      	cmp	r3, #1
 800760a:	d00e      	beq.n	800762a <read_data_packet+0x62>
			W25qxx_EraseSector(1);
 800760c:	2001      	movs	r0, #1
 800760e:	f001 ffc1 	bl	8009594 <W25qxx_EraseSector>
			StartN = 0;
 8007612:	4b25      	ldr	r3, [pc, #148]	; (80076a8 <read_data_packet+0xe0>)
 8007614:	2200      	movs	r2, #0
 8007616:	801a      	strh	r2, [r3, #0]
			EndN = 0;
 8007618:	4b22      	ldr	r3, [pc, #136]	; (80076a4 <read_data_packet+0xdc>)
 800761a:	2200      	movs	r2, #0
 800761c:	801a      	strh	r2, [r3, #0]
			StartSec = 1;
 800761e:	4b20      	ldr	r3, [pc, #128]	; (80076a0 <read_data_packet+0xd8>)
 8007620:	2201      	movs	r2, #1
 8007622:	801a      	strh	r2, [r3, #0]
			EndSec = 1;
 8007624:	4b1d      	ldr	r3, [pc, #116]	; (800769c <read_data_packet+0xd4>)
 8007626:	2201      	movs	r2, #1
 8007628:	801a      	strh	r2, [r3, #0]
		}
		return 0;
 800762a:	2300      	movs	r3, #0
 800762c:	e030      	b.n	8007690 <read_data_packet+0xc8>
	} else {
		W25qxx_ReadSector(readPacket, EndSec, EndN, 32);
 800762e:	4b1b      	ldr	r3, [pc, #108]	; (800769c <read_data_packet+0xd4>)
 8007630:	881b      	ldrh	r3, [r3, #0]
 8007632:	b29b      	uxth	r3, r3
 8007634:	0019      	movs	r1, r3
 8007636:	4b1b      	ldr	r3, [pc, #108]	; (80076a4 <read_data_packet+0xdc>)
 8007638:	881b      	ldrh	r3, [r3, #0]
 800763a:	b29b      	uxth	r3, r3
 800763c:	001a      	movs	r2, r3
 800763e:	4816      	ldr	r0, [pc, #88]	; (8007698 <read_data_packet+0xd0>)
 8007640:	2320      	movs	r3, #32
 8007642:	f002 fa33 	bl	8009aac <W25qxx_ReadSector>
		//reading data//
		EndN = EndN + 32;
 8007646:	4b17      	ldr	r3, [pc, #92]	; (80076a4 <read_data_packet+0xdc>)
 8007648:	881b      	ldrh	r3, [r3, #0]
 800764a:	b29b      	uxth	r3, r3
 800764c:	3320      	adds	r3, #32
 800764e:	b29a      	uxth	r2, r3
 8007650:	4b14      	ldr	r3, [pc, #80]	; (80076a4 <read_data_packet+0xdc>)
 8007652:	801a      	strh	r2, [r3, #0]
		if (EndN > 4090) {
 8007654:	4b13      	ldr	r3, [pc, #76]	; (80076a4 <read_data_packet+0xdc>)
 8007656:	881b      	ldrh	r3, [r3, #0]
 8007658:	b29b      	uxth	r3, r3
 800765a:	4a14      	ldr	r2, [pc, #80]	; (80076ac <read_data_packet+0xe4>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d916      	bls.n	800768e <read_data_packet+0xc6>
			if (EndSec == 1023) {
 8007660:	4b0e      	ldr	r3, [pc, #56]	; (800769c <read_data_packet+0xd4>)
 8007662:	881b      	ldrh	r3, [r3, #0]
 8007664:	b29b      	uxth	r3, r3
 8007666:	4a12      	ldr	r2, [pc, #72]	; (80076b0 <read_data_packet+0xe8>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d106      	bne.n	800767a <read_data_packet+0xb2>
				EndSec = 1;
 800766c:	4b0b      	ldr	r3, [pc, #44]	; (800769c <read_data_packet+0xd4>)
 800766e:	2201      	movs	r2, #1
 8007670:	801a      	strh	r2, [r3, #0]
				EndN = 0;
 8007672:	4b0c      	ldr	r3, [pc, #48]	; (80076a4 <read_data_packet+0xdc>)
 8007674:	2200      	movs	r2, #0
 8007676:	801a      	strh	r2, [r3, #0]
 8007678:	e009      	b.n	800768e <read_data_packet+0xc6>
			} else {
				EndSec = EndSec + 1;
 800767a:	4b08      	ldr	r3, [pc, #32]	; (800769c <read_data_packet+0xd4>)
 800767c:	881b      	ldrh	r3, [r3, #0]
 800767e:	b29b      	uxth	r3, r3
 8007680:	3301      	adds	r3, #1
 8007682:	b29a      	uxth	r2, r3
 8007684:	4b05      	ldr	r3, [pc, #20]	; (800769c <read_data_packet+0xd4>)
 8007686:	801a      	strh	r2, [r3, #0]
				EndN = 0;
 8007688:	4b06      	ldr	r3, [pc, #24]	; (80076a4 <read_data_packet+0xdc>)
 800768a:	2200      	movs	r2, #0
 800768c:	801a      	strh	r2, [r3, #0]
			}
		}
		return 1;
 800768e:	2301      	movs	r3, #1
	}
}
 8007690:	0018      	movs	r0, r3
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
 8007696:	46c0      	nop			; (mov r8, r8)
 8007698:	20000aa0 	.word	0x20000aa0
 800769c:	20000d66 	.word	0x20000d66
 80076a0:	20000d64 	.word	0x20000d64
 80076a4:	20000d62 	.word	0x20000d62
 80076a8:	20000d60 	.word	0x20000d60
 80076ac:	00000ffa 	.word	0x00000ffa
 80076b0:	000003ff 	.word	0x000003ff

080076b4 <create_status_info>:


void create_status_info(){
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af02      	add	r7, sp, #8

	//----------get voltage of vbatt-----------------
	send_command("+++", 10, 1, 0, 0);
 80076ba:	486a      	ldr	r0, [pc, #424]	; (8007864 <create_status_info+0x1b0>)
 80076bc:	2300      	movs	r3, #0
 80076be:	9300      	str	r3, [sp, #0]
 80076c0:	2300      	movs	r3, #0
 80076c2:	2201      	movs	r2, #1
 80076c4:	210a      	movs	r1, #10
 80076c6:	f7ff f9a1 	bl	8006a0c <send_command>
	isDataMode = 0;
 80076ca:	4b67      	ldr	r3, [pc, #412]	; (8007868 <create_status_info+0x1b4>)
 80076cc:	2200      	movs	r2, #0
 80076ce:	701a      	strb	r2, [r3, #0]
	send_command("AT+CBC\r\n", 4, 8, 3, 1);
 80076d0:	4866      	ldr	r0, [pc, #408]	; (800786c <create_status_info+0x1b8>)
 80076d2:	2301      	movs	r3, #1
 80076d4:	9300      	str	r3, [sp, #0]
 80076d6:	2303      	movs	r3, #3
 80076d8:	2208      	movs	r2, #8
 80076da:	2104      	movs	r1, #4
 80076dc:	f7ff f996 	bl	8006a0c <send_command>
	//HAL_UART_Transmit(&huart4, "S msg del", sizeof("S msg del"), 100);
	send_command("AT+QMGDA=\"DEL ALL\"\r\n", 50, 1, 0, 0);
 80076e0:	4863      	ldr	r0, [pc, #396]	; (8007870 <create_status_info+0x1bc>)
 80076e2:	2300      	movs	r3, #0
 80076e4:	9300      	str	r3, [sp, #0]
 80076e6:	2300      	movs	r3, #0
 80076e8:	2201      	movs	r2, #1
 80076ea:	2132      	movs	r1, #50	; 0x32
 80076ec:	f7ff f98e 	bl	8006a0c <send_command>
	send_command("ATO\r\n", 10, 6, 0, 0);
 80076f0:	4860      	ldr	r0, [pc, #384]	; (8007874 <create_status_info+0x1c0>)
 80076f2:	2300      	movs	r3, #0
 80076f4:	9300      	str	r3, [sp, #0]
 80076f6:	2300      	movs	r3, #0
 80076f8:	2206      	movs	r2, #6
 80076fa:	210a      	movs	r1, #10
 80076fc:	f7ff f986 	bl	8006a0c <send_command>
	if (isResponseOk == 1) {
 8007700:	4b5d      	ldr	r3, [pc, #372]	; (8007878 <create_status_info+0x1c4>)
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	b2db      	uxtb	r3, r3
 8007706:	2b01      	cmp	r3, #1
 8007708:	d103      	bne.n	8007712 <create_status_info+0x5e>
		isDataMode = 1;
 800770a:	4b57      	ldr	r3, [pc, #348]	; (8007868 <create_status_info+0x1b4>)
 800770c:	2201      	movs	r2, #1
 800770e:	701a      	strb	r2, [r3, #0]
 8007710:	e008      	b.n	8007724 <create_status_info+0x70>
		// HAL_UART_Transmit(&huart4, "conn resum",
		// sizeof("conn resum"), 100);
	} else {
		isLoggedIn = 0;
 8007712:	4b5a      	ldr	r3, [pc, #360]	; (800787c <create_status_info+0x1c8>)
 8007714:	2200      	movs	r2, #0
 8007716:	701a      	strb	r2, [r3, #0]
		isDataMode = 0;
 8007718:	4b53      	ldr	r3, [pc, #332]	; (8007868 <create_status_info+0x1b4>)
 800771a:	2200      	movs	r2, #0
 800771c:	701a      	strb	r2, [r3, #0]
		isTcpOpen = 0;
 800771e:	4b58      	ldr	r3, [pc, #352]	; (8007880 <create_status_info+0x1cc>)
 8007720:	2200      	movs	r2, #0
 8007722:	701a      	strb	r2, [r3, #0]
	}
	//-----------------------------------------------

	uint8_t SigStre = 20;
 8007724:	1dfb      	adds	r3, r7, #7
 8007726:	2214      	movs	r2, #20
 8007728:	701a      	strb	r2, [r3, #0]
		TermInfo = TermInfo | 0x80;
	}
	//if gps tracking is on

	if (1) {
		TermInfo = TermInfo | 0x40;
 800772a:	4b56      	ldr	r3, [pc, #344]	; (8007884 <create_status_info+0x1d0>)
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	2240      	movs	r2, #64	; 0x40
 8007730:	4313      	orrs	r3, r2
 8007732:	b2da      	uxtb	r2, r3
 8007734:	4b53      	ldr	r3, [pc, #332]	; (8007884 <create_status_info+0x1d0>)
 8007736:	701a      	strb	r2, [r3, #0]
	}
	//if SOS is on

	if (1) {
		TermInfo = TermInfo | 0x20;
 8007738:	4b52      	ldr	r3, [pc, #328]	; (8007884 <create_status_info+0x1d0>)
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	2220      	movs	r2, #32
 800773e:	4313      	orrs	r3, r2
 8007740:	b2da      	uxtb	r2, r3
 8007742:	4b50      	ldr	r3, [pc, #320]	; (8007884 <create_status_info+0x1d0>)
 8007744:	701a      	strb	r2, [r3, #0]
	}
	//if Low batt alarm is on

	if (1) {
		TermInfo = TermInfo | 0x18;
 8007746:	4b4f      	ldr	r3, [pc, #316]	; (8007884 <create_status_info+0x1d0>)
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	2218      	movs	r2, #24
 800774c:	4313      	orrs	r3, r2
 800774e:	b2da      	uxtb	r2, r3
 8007750:	4b4c      	ldr	r3, [pc, #304]	; (8007884 <create_status_info+0x1d0>)
 8007752:	701a      	strb	r2, [r3, #0]
	}
	//if Power Cut alarm is on

	if (1) {
		TermInfo = TermInfo | 0x10;
 8007754:	4b4b      	ldr	r3, [pc, #300]	; (8007884 <create_status_info+0x1d0>)
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	2210      	movs	r2, #16
 800775a:	4313      	orrs	r3, r2
 800775c:	b2da      	uxtb	r2, r3
 800775e:	4b49      	ldr	r3, [pc, #292]	; (8007884 <create_status_info+0x1d0>)
 8007760:	701a      	strb	r2, [r3, #0]
	}
	//if shock alarm is on
	if (1) {
		TermInfo = TermInfo | 0x8;
 8007762:	4b48      	ldr	r3, [pc, #288]	; (8007884 <create_status_info+0x1d0>)
 8007764:	781b      	ldrb	r3, [r3, #0]
 8007766:	2208      	movs	r2, #8
 8007768:	4313      	orrs	r3, r2
 800776a:	b2da      	uxtb	r2, r3
 800776c:	4b45      	ldr	r3, [pc, #276]	; (8007884 <create_status_info+0x1d0>)
 800776e:	701a      	strb	r2, [r3, #0]
	}
	// 000 means normal
	//if charge is on
	if (1) {
		TermInfo = TermInfo | 0x4;
 8007770:	4b44      	ldr	r3, [pc, #272]	; (8007884 <create_status_info+0x1d0>)
 8007772:	781b      	ldrb	r3, [r3, #0]
 8007774:	2204      	movs	r2, #4
 8007776:	4313      	orrs	r3, r2
 8007778:	b2da      	uxtb	r2, r3
 800777a:	4b42      	ldr	r3, [pc, #264]	; (8007884 <create_status_info+0x1d0>)
 800777c:	701a      	strb	r2, [r3, #0]
	}
	//if ACC is on
	if (accInputState) {
 800777e:	4b42      	ldr	r3, [pc, #264]	; (8007888 <create_status_info+0x1d4>)
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	b2db      	uxtb	r3, r3
 8007784:	2b00      	cmp	r3, #0
 8007786:	d006      	beq.n	8007796 <create_status_info+0xe2>
		TermInfo = TermInfo | 0x2;
 8007788:	4b3e      	ldr	r3, [pc, #248]	; (8007884 <create_status_info+0x1d0>)
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	2202      	movs	r2, #2
 800778e:	4313      	orrs	r3, r2
 8007790:	b2da      	uxtb	r2, r3
 8007792:	4b3c      	ldr	r3, [pc, #240]	; (8007884 <create_status_info+0x1d0>)
 8007794:	701a      	strb	r2, [r3, #0]
	}
	//if Activated
	if (1) {
		TermInfo = TermInfo | 0x1;
 8007796:	4b3b      	ldr	r3, [pc, #236]	; (8007884 <create_status_info+0x1d0>)
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	2201      	movs	r2, #1
 800779c:	4313      	orrs	r3, r2
 800779e:	b2da      	uxtb	r2, r3
 80077a0:	4b38      	ldr	r3, [pc, #224]	; (8007884 <create_status_info+0x1d0>)
 80077a2:	701a      	strb	r2, [r3, #0]
	}
	if (voltage > 4110) {
 80077a4:	4b39      	ldr	r3, [pc, #228]	; (800788c <create_status_info+0x1d8>)
 80077a6:	881b      	ldrh	r3, [r3, #0]
 80077a8:	4a39      	ldr	r2, [pc, #228]	; (8007890 <create_status_info+0x1dc>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d903      	bls.n	80077b6 <create_status_info+0x102>
		VLvl = 6;
 80077ae:	4b39      	ldr	r3, [pc, #228]	; (8007894 <create_status_info+0x1e0>)
 80077b0:	2206      	movs	r2, #6
 80077b2:	701a      	strb	r2, [r3, #0]
 80077b4:	e02f      	b.n	8007816 <create_status_info+0x162>
	} else if (voltage > 4030) {
 80077b6:	4b35      	ldr	r3, [pc, #212]	; (800788c <create_status_info+0x1d8>)
 80077b8:	881b      	ldrh	r3, [r3, #0]
 80077ba:	4a37      	ldr	r2, [pc, #220]	; (8007898 <create_status_info+0x1e4>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d903      	bls.n	80077c8 <create_status_info+0x114>
		VLvl = 5;
 80077c0:	4b34      	ldr	r3, [pc, #208]	; (8007894 <create_status_info+0x1e0>)
 80077c2:	2205      	movs	r2, #5
 80077c4:	701a      	strb	r2, [r3, #0]
 80077c6:	e026      	b.n	8007816 <create_status_info+0x162>

	} else if (voltage > 3950) {
 80077c8:	4b30      	ldr	r3, [pc, #192]	; (800788c <create_status_info+0x1d8>)
 80077ca:	881b      	ldrh	r3, [r3, #0]
 80077cc:	4a33      	ldr	r2, [pc, #204]	; (800789c <create_status_info+0x1e8>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d903      	bls.n	80077da <create_status_info+0x126>
		VLvl = 4;
 80077d2:	4b30      	ldr	r3, [pc, #192]	; (8007894 <create_status_info+0x1e0>)
 80077d4:	2204      	movs	r2, #4
 80077d6:	701a      	strb	r2, [r3, #0]
 80077d8:	e01d      	b.n	8007816 <create_status_info+0x162>

	} else if (voltage > 3870) {
 80077da:	4b2c      	ldr	r3, [pc, #176]	; (800788c <create_status_info+0x1d8>)
 80077dc:	881b      	ldrh	r3, [r3, #0]
 80077de:	4a30      	ldr	r2, [pc, #192]	; (80078a0 <create_status_info+0x1ec>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d903      	bls.n	80077ec <create_status_info+0x138>
		VLvl = 3;
 80077e4:	4b2b      	ldr	r3, [pc, #172]	; (8007894 <create_status_info+0x1e0>)
 80077e6:	2203      	movs	r2, #3
 80077e8:	701a      	strb	r2, [r3, #0]
 80077ea:	e014      	b.n	8007816 <create_status_info+0x162>

	} else if (voltage > 3790) {
 80077ec:	4b27      	ldr	r3, [pc, #156]	; (800788c <create_status_info+0x1d8>)
 80077ee:	881b      	ldrh	r3, [r3, #0]
 80077f0:	4a2c      	ldr	r2, [pc, #176]	; (80078a4 <create_status_info+0x1f0>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d903      	bls.n	80077fe <create_status_info+0x14a>
		VLvl = 2;
 80077f6:	4b27      	ldr	r3, [pc, #156]	; (8007894 <create_status_info+0x1e0>)
 80077f8:	2202      	movs	r2, #2
 80077fa:	701a      	strb	r2, [r3, #0]
 80077fc:	e00b      	b.n	8007816 <create_status_info+0x162>

	} else if (voltage > 3710) {
 80077fe:	4b23      	ldr	r3, [pc, #140]	; (800788c <create_status_info+0x1d8>)
 8007800:	881b      	ldrh	r3, [r3, #0]
 8007802:	4a29      	ldr	r2, [pc, #164]	; (80078a8 <create_status_info+0x1f4>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d903      	bls.n	8007810 <create_status_info+0x15c>
		VLvl = 1;
 8007808:	4b22      	ldr	r3, [pc, #136]	; (8007894 <create_status_info+0x1e0>)
 800780a:	2201      	movs	r2, #1
 800780c:	701a      	strb	r2, [r3, #0]
 800780e:	e002      	b.n	8007816 <create_status_info+0x162>

	} else {
		VLvl = 0;
 8007810:	4b20      	ldr	r3, [pc, #128]	; (8007894 <create_status_info+0x1e0>)
 8007812:	2200      	movs	r2, #0
 8007814:	701a      	strb	r2, [r3, #0]

	}
	if (SigStre > 19) {
 8007816:	1dfb      	adds	r3, r7, #7
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	2b13      	cmp	r3, #19
 800781c:	d903      	bls.n	8007826 <create_status_info+0x172>
		GSMSS = 4;
 800781e:	4b23      	ldr	r3, [pc, #140]	; (80078ac <create_status_info+0x1f8>)
 8007820:	2204      	movs	r2, #4
 8007822:	701a      	strb	r2, [r3, #0]
		GSMSS = 1;
	} else {
		GSMSS = 0;
	}

}
 8007824:	e01a      	b.n	800785c <create_status_info+0x1a8>
	} else if (SigStre > 14) {
 8007826:	1dfb      	adds	r3, r7, #7
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	2b0e      	cmp	r3, #14
 800782c:	d903      	bls.n	8007836 <create_status_info+0x182>
		GSMSS = 3;
 800782e:	4b1f      	ldr	r3, [pc, #124]	; (80078ac <create_status_info+0x1f8>)
 8007830:	2203      	movs	r2, #3
 8007832:	701a      	strb	r2, [r3, #0]
}
 8007834:	e012      	b.n	800785c <create_status_info+0x1a8>
	} else if (SigStre > 9) {
 8007836:	1dfb      	adds	r3, r7, #7
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	2b09      	cmp	r3, #9
 800783c:	d903      	bls.n	8007846 <create_status_info+0x192>
		GSMSS = 2;
 800783e:	4b1b      	ldr	r3, [pc, #108]	; (80078ac <create_status_info+0x1f8>)
 8007840:	2202      	movs	r2, #2
 8007842:	701a      	strb	r2, [r3, #0]
}
 8007844:	e00a      	b.n	800785c <create_status_info+0x1a8>
	} else if (SigStre > 1) {
 8007846:	1dfb      	adds	r3, r7, #7
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	2b01      	cmp	r3, #1
 800784c:	d903      	bls.n	8007856 <create_status_info+0x1a2>
		GSMSS = 1;
 800784e:	4b17      	ldr	r3, [pc, #92]	; (80078ac <create_status_info+0x1f8>)
 8007850:	2201      	movs	r2, #1
 8007852:	701a      	strb	r2, [r3, #0]
}
 8007854:	e002      	b.n	800785c <create_status_info+0x1a8>
		GSMSS = 0;
 8007856:	4b15      	ldr	r3, [pc, #84]	; (80078ac <create_status_info+0x1f8>)
 8007858:	2200      	movs	r2, #0
 800785a:	701a      	strb	r2, [r3, #0]
}
 800785c:	46c0      	nop			; (mov r8, r8)
 800785e:	46bd      	mov	sp, r7
 8007860:	b002      	add	sp, #8
 8007862:	bd80      	pop	{r7, pc}
 8007864:	0801361c 	.word	0x0801361c
 8007868:	200008c6 	.word	0x200008c6
 800786c:	080135c4 	.word	0x080135c4
 8007870:	08013604 	.word	0x08013604
 8007874:	080136a0 	.word	0x080136a0
 8007878:	200008cc 	.word	0x200008cc
 800787c:	20000a7c 	.word	0x20000a7c
 8007880:	20000a78 	.word	0x20000a78
 8007884:	20000777 	.word	0x20000777
 8007888:	20000772 	.word	0x20000772
 800788c:	20000002 	.word	0x20000002
 8007890:	0000100e 	.word	0x0000100e
 8007894:	20000779 	.word	0x20000779
 8007898:	00000fbe 	.word	0x00000fbe
 800789c:	00000f6e 	.word	0x00000f6e
 80078a0:	00000f1e 	.word	0x00000f1e
 80078a4:	00000ece 	.word	0x00000ece
 80078a8:	00000e7e 	.word	0x00000e7e
 80078ac:	20000778 	.word	0x20000778

080078b0 <send_hb_packet>:

void send_hb_packet() {
 80078b0:	b5b0      	push	{r4, r5, r7, lr}
 80078b2:	b086      	sub	sp, #24
 80078b4:	af00      	add	r7, sp, #0
	if (isTcpOpen == 1 && isDataMode == 1) {
 80078b6:	4b37      	ldr	r3, [pc, #220]	; (8007994 <send_hb_packet+0xe4>)
 80078b8:	781b      	ldrb	r3, [r3, #0]
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d164      	bne.n	800798a <send_hb_packet+0xda>
 80078c0:	4b35      	ldr	r3, [pc, #212]	; (8007998 <send_hb_packet+0xe8>)
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d15f      	bne.n	800798a <send_hb_packet+0xda>

		create_status_info();
 80078ca:	f7ff fef3 	bl	80076b4 <create_status_info>
		heartbeatPacket[4] = TermInfo;
 80078ce:	4b33      	ldr	r3, [pc, #204]	; (800799c <send_hb_packet+0xec>)
 80078d0:	781a      	ldrb	r2, [r3, #0]
 80078d2:	4b33      	ldr	r3, [pc, #204]	; (80079a0 <send_hb_packet+0xf0>)
 80078d4:	711a      	strb	r2, [r3, #4]
		heartbeatPacket[5] = VLvl;
 80078d6:	4b33      	ldr	r3, [pc, #204]	; (80079a4 <send_hb_packet+0xf4>)
 80078d8:	781a      	ldrb	r2, [r3, #0]
 80078da:	4b31      	ldr	r3, [pc, #196]	; (80079a0 <send_hb_packet+0xf0>)
 80078dc:	715a      	strb	r2, [r3, #5]
		heartbeatPacket[6] = GSMSS;
 80078de:	4b32      	ldr	r3, [pc, #200]	; (80079a8 <send_hb_packet+0xf8>)
 80078e0:	781a      	ldrb	r2, [r3, #0]
 80078e2:	4b2f      	ldr	r3, [pc, #188]	; (80079a0 <send_hb_packet+0xf0>)
 80078e4:	719a      	strb	r2, [r3, #6]
		heartbeatPacket[7] = 0;
 80078e6:	4b2e      	ldr	r3, [pc, #184]	; (80079a0 <send_hb_packet+0xf0>)
 80078e8:	2200      	movs	r2, #0
 80078ea:	71da      	strb	r2, [r3, #7]
		heartbeatPacket[8] = 2;
 80078ec:	4b2c      	ldr	r3, [pc, #176]	; (80079a0 <send_hb_packet+0xf0>)
 80078ee:	2202      	movs	r2, #2
 80078f0:	721a      	strb	r2, [r3, #8]
		heartbeatPacket[9] = infoSNo >> 8;
 80078f2:	4b2e      	ldr	r3, [pc, #184]	; (80079ac <send_hb_packet+0xfc>)
 80078f4:	881b      	ldrh	r3, [r3, #0]
 80078f6:	0a1b      	lsrs	r3, r3, #8
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	b2da      	uxtb	r2, r3
 80078fc:	4b28      	ldr	r3, [pc, #160]	; (80079a0 <send_hb_packet+0xf0>)
 80078fe:	725a      	strb	r2, [r3, #9]
		heartbeatPacket[10] = infoSNo;
 8007900:	4b2a      	ldr	r3, [pc, #168]	; (80079ac <send_hb_packet+0xfc>)
 8007902:	881b      	ldrh	r3, [r3, #0]
 8007904:	b2da      	uxtb	r2, r3
 8007906:	4b26      	ldr	r3, [pc, #152]	; (80079a0 <send_hb_packet+0xf0>)
 8007908:	729a      	strb	r2, [r3, #10]

		uint8_t tempCrcData[9];
		for (uint8_t i = 0; i < 10; i++) {
 800790a:	2317      	movs	r3, #23
 800790c:	18fb      	adds	r3, r7, r3
 800790e:	2200      	movs	r2, #0
 8007910:	701a      	strb	r2, [r3, #0]
 8007912:	e00e      	b.n	8007932 <send_hb_packet+0x82>
			tempCrcData[i] = heartbeatPacket[i + 2];
 8007914:	2017      	movs	r0, #23
 8007916:	183b      	adds	r3, r7, r0
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	1c9a      	adds	r2, r3, #2
 800791c:	183b      	adds	r3, r7, r0
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	491f      	ldr	r1, [pc, #124]	; (80079a0 <send_hb_packet+0xf0>)
 8007922:	5c89      	ldrb	r1, [r1, r2]
 8007924:	1d3a      	adds	r2, r7, #4
 8007926:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 10; i++) {
 8007928:	183b      	adds	r3, r7, r0
 800792a:	781a      	ldrb	r2, [r3, #0]
 800792c:	183b      	adds	r3, r7, r0
 800792e:	3201      	adds	r2, #1
 8007930:	701a      	strb	r2, [r3, #0]
 8007932:	2317      	movs	r3, #23
 8007934:	18fb      	adds	r3, r7, r3
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	2b09      	cmp	r3, #9
 800793a:	d9eb      	bls.n	8007914 <send_hb_packet+0x64>
		}
		uint8_t *tempPtr = tempCrcData;
 800793c:	1d3b      	adds	r3, r7, #4
 800793e:	613b      	str	r3, [r7, #16]
		uint16_t crcResult = 0;
 8007940:	250e      	movs	r5, #14
 8007942:	197b      	adds	r3, r7, r5
 8007944:	2200      	movs	r2, #0
 8007946:	801a      	strh	r2, [r3, #0]
		crcResult = GetCrc16(tempPtr,
 8007948:	197c      	adds	r4, r7, r5
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	2109      	movs	r1, #9
 800794e:	0018      	movs	r0, r3
 8007950:	f7ff fa2e 	bl	8006db0 <GetCrc16>
 8007954:	0003      	movs	r3, r0
 8007956:	8023      	strh	r3, [r4, #0]
				sizeof(tempCrcData) / sizeof(tempCrcData[0]));
		heartbeatPacket[11] = crcResult >> 8;
 8007958:	0029      	movs	r1, r5
 800795a:	187b      	adds	r3, r7, r1
 800795c:	881b      	ldrh	r3, [r3, #0]
 800795e:	0a1b      	lsrs	r3, r3, #8
 8007960:	b29b      	uxth	r3, r3
 8007962:	b2da      	uxtb	r2, r3
 8007964:	4b0e      	ldr	r3, [pc, #56]	; (80079a0 <send_hb_packet+0xf0>)
 8007966:	72da      	strb	r2, [r3, #11]
		heartbeatPacket[12] = crcResult;
 8007968:	187b      	adds	r3, r7, r1
 800796a:	881b      	ldrh	r3, [r3, #0]
 800796c:	b2da      	uxtb	r2, r3
 800796e:	4b0c      	ldr	r3, [pc, #48]	; (80079a0 <send_hb_packet+0xf0>)
 8007970:	731a      	strb	r2, [r3, #12]
		HAL_UART_Transmit(&AT_PORT, heartbeatPacket, 15, 100);
 8007972:	490b      	ldr	r1, [pc, #44]	; (80079a0 <send_hb_packet+0xf0>)
 8007974:	480e      	ldr	r0, [pc, #56]	; (80079b0 <send_hb_packet+0x100>)
 8007976:	2364      	movs	r3, #100	; 0x64
 8007978:	220f      	movs	r2, #15
 800797a:	f005 fbe9 	bl	800d150 <HAL_UART_Transmit>
		infoSNo++;
 800797e:	4b0b      	ldr	r3, [pc, #44]	; (80079ac <send_hb_packet+0xfc>)
 8007980:	881b      	ldrh	r3, [r3, #0]
 8007982:	3301      	adds	r3, #1
 8007984:	b29a      	uxth	r2, r3
 8007986:	4b09      	ldr	r3, [pc, #36]	; (80079ac <send_hb_packet+0xfc>)
 8007988:	801a      	strh	r2, [r3, #0]

	}
}
 800798a:	46c0      	nop			; (mov r8, r8)
 800798c:	46bd      	mov	sp, r7
 800798e:	b006      	add	sp, #24
 8007990:	bdb0      	pop	{r4, r5, r7, pc}
 8007992:	46c0      	nop			; (mov r8, r8)
 8007994:	20000a78 	.word	0x20000a78
 8007998:	200008c6 	.word	0x200008c6
 800799c:	20000777 	.word	0x20000777
 80079a0:	200000c8 	.word	0x200000c8
 80079a4:	20000779 	.word	0x20000779
 80079a8:	20000778 	.word	0x20000778
 80079ac:	2000006c 	.word	0x2000006c
 80079b0:	20000514 	.word	0x20000514

080079b4 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b082      	sub	sp, #8
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]

	if(isDataMode == 1){
 80079bc:	4b26      	ldr	r3, [pc, #152]	; (8007a58 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d144      	bne.n	8007a50 <HAL_TIM_IC_CaptureCallback+0x9c>
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	7f1b      	ldrb	r3, [r3, #28]
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d140      	bne.n	8007a50 <HAL_TIM_IC_CaptureCallback+0x9c>
			currentValueIC = TIM3->CNT;
 80079ce:	4b23      	ldr	r3, [pc, #140]	; (8007a5c <HAL_TIM_IC_CaptureCallback+0xa8>)
 80079d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d2:	b29a      	uxth	r2, r3
 80079d4:	4b22      	ldr	r3, [pc, #136]	; (8007a60 <HAL_TIM_IC_CaptureCallback+0xac>)
 80079d6:	801a      	strh	r2, [r3, #0]

			if(currentValueIC>lastValueIC){
 80079d8:	4b21      	ldr	r3, [pc, #132]	; (8007a60 <HAL_TIM_IC_CaptureCallback+0xac>)
 80079da:	881b      	ldrh	r3, [r3, #0]
 80079dc:	b29a      	uxth	r2, r3
 80079de:	4b21      	ldr	r3, [pc, #132]	; (8007a64 <HAL_TIM_IC_CaptureCallback+0xb0>)
 80079e0:	881b      	ldrh	r3, [r3, #0]
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d90a      	bls.n	80079fe <HAL_TIM_IC_CaptureCallback+0x4a>
				diff = currentValueIC - lastValueIC;
 80079e8:	4b1d      	ldr	r3, [pc, #116]	; (8007a60 <HAL_TIM_IC_CaptureCallback+0xac>)
 80079ea:	881b      	ldrh	r3, [r3, #0]
 80079ec:	b29a      	uxth	r2, r3
 80079ee:	4b1d      	ldr	r3, [pc, #116]	; (8007a64 <HAL_TIM_IC_CaptureCallback+0xb0>)
 80079f0:	881b      	ldrh	r3, [r3, #0]
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	1ad3      	subs	r3, r2, r3
 80079f6:	b29a      	uxth	r2, r3
 80079f8:	4b1b      	ldr	r3, [pc, #108]	; (8007a68 <HAL_TIM_IC_CaptureCallback+0xb4>)
 80079fa:	801a      	strh	r2, [r3, #0]
 80079fc:	e016      	b.n	8007a2c <HAL_TIM_IC_CaptureCallback+0x78>
			}
			else if(currentValueIC < lastValueIC)
 80079fe:	4b18      	ldr	r3, [pc, #96]	; (8007a60 <HAL_TIM_IC_CaptureCallback+0xac>)
 8007a00:	881b      	ldrh	r3, [r3, #0]
 8007a02:	b29a      	uxth	r2, r3
 8007a04:	4b17      	ldr	r3, [pc, #92]	; (8007a64 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8007a06:	881b      	ldrh	r3, [r3, #0]
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d20e      	bcs.n	8007a2c <HAL_TIM_IC_CaptureCallback+0x78>
			{
				diff = (1000 - lastValueIC) + currentValueIC;
 8007a0e:	4b14      	ldr	r3, [pc, #80]	; (8007a60 <HAL_TIM_IC_CaptureCallback+0xac>)
 8007a10:	881b      	ldrh	r3, [r3, #0]
 8007a12:	b29a      	uxth	r2, r3
 8007a14:	4b13      	ldr	r3, [pc, #76]	; (8007a64 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8007a16:	881b      	ldrh	r3, [r3, #0]
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	1ad3      	subs	r3, r2, r3
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	22fa      	movs	r2, #250	; 0xfa
 8007a20:	0092      	lsls	r2, r2, #2
 8007a22:	4694      	mov	ip, r2
 8007a24:	4463      	add	r3, ip
 8007a26:	b29a      	uxth	r2, r3
 8007a28:	4b0f      	ldr	r3, [pc, #60]	; (8007a68 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8007a2a:	801a      	strh	r2, [r3, #0]
			}
			if(diff > 100 && diff < 145){
 8007a2c:	4b0e      	ldr	r3, [pc, #56]	; (8007a68 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8007a2e:	881b      	ldrh	r3, [r3, #0]
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	2b64      	cmp	r3, #100	; 0x64
 8007a34:	d907      	bls.n	8007a46 <HAL_TIM_IC_CaptureCallback+0x92>
 8007a36:	4b0c      	ldr	r3, [pc, #48]	; (8007a68 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8007a38:	881b      	ldrh	r3, [r3, #0]
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	2b90      	cmp	r3, #144	; 0x90
 8007a3e:	d802      	bhi.n	8007a46 <HAL_TIM_IC_CaptureCallback+0x92>
				isPulse = 1;
 8007a40:	4b0a      	ldr	r3, [pc, #40]	; (8007a6c <HAL_TIM_IC_CaptureCallback+0xb8>)
 8007a42:	2201      	movs	r2, #1
 8007a44:	701a      	strb	r2, [r3, #0]
			}
			lastValueIC = currentValueIC;
 8007a46:	4b06      	ldr	r3, [pc, #24]	; (8007a60 <HAL_TIM_IC_CaptureCallback+0xac>)
 8007a48:	881b      	ldrh	r3, [r3, #0]
 8007a4a:	b29a      	uxth	r2, r3
 8007a4c:	4b05      	ldr	r3, [pc, #20]	; (8007a64 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8007a4e:	801a      	strh	r2, [r3, #0]
		}
	}

}
 8007a50:	46c0      	nop			; (mov r8, r8)
 8007a52:	46bd      	mov	sp, r7
 8007a54:	b002      	add	sp, #8
 8007a56:	bd80      	pop	{r7, pc}
 8007a58:	200008c6 	.word	0x200008c6
 8007a5c:	40000400 	.word	0x40000400
 8007a60:	20000766 	.word	0x20000766
 8007a64:	20000764 	.word	0x20000764
 8007a68:	20000768 	.word	0x20000768
 8007a6c:	20000789 	.word	0x20000789

08007a70 <substring>:

char* substring(char *destination, const char *source, uint8_t beg, uint8_t n) {
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	60f8      	str	r0, [r7, #12]
 8007a78:	60b9      	str	r1, [r7, #8]
 8007a7a:	0019      	movs	r1, r3
 8007a7c:	1dfb      	adds	r3, r7, #7
 8007a7e:	701a      	strb	r2, [r3, #0]
 8007a80:	1dbb      	adds	r3, r7, #6
 8007a82:	1c0a      	adds	r2, r1, #0
 8007a84:	701a      	strb	r2, [r3, #0]
	// extracts `n` characters from the source string starting from `beg` index
	// and copy them into the destination string
	while (n > 0) {
 8007a86:	e011      	b.n	8007aac <substring+0x3c>
		*destination = *(source + beg);
 8007a88:	1dfb      	adds	r3, r7, #7
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	68ba      	ldr	r2, [r7, #8]
 8007a8e:	18d3      	adds	r3, r2, r3
 8007a90:	781a      	ldrb	r2, [r3, #0]
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	701a      	strb	r2, [r3, #0]
		destination++;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	3301      	adds	r3, #1
 8007a9a:	60fb      	str	r3, [r7, #12]
		source++;
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	3301      	adds	r3, #1
 8007aa0:	60bb      	str	r3, [r7, #8]
		n--;
 8007aa2:	1dbb      	adds	r3, r7, #6
 8007aa4:	781a      	ldrb	r2, [r3, #0]
 8007aa6:	1dbb      	adds	r3, r7, #6
 8007aa8:	3a01      	subs	r2, #1
 8007aaa:	701a      	strb	r2, [r3, #0]
	while (n > 0) {
 8007aac:	1dbb      	adds	r3, r7, #6
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d1e9      	bne.n	8007a88 <substring+0x18>
	}

	// null terminate destination string
	*destination = '\0';
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	701a      	strb	r2, [r3, #0]

	// return the destination string
	return destination;
 8007aba:	68fb      	ldr	r3, [r7, #12]
}
 8007abc:	0018      	movs	r0, r3
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	b004      	add	sp, #16
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <send_imei_via_sms>:

void send_imei_via_sms() {
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b0a8      	sub	sp, #160	; 0xa0
 8007ac8:	af02      	add	r7, sp, #8
	if (isNumValid == 1) {
 8007aca:	4b33      	ldr	r3, [pc, #204]	; (8007b98 <send_imei_via_sms+0xd4>)
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	2b01      	cmp	r3, #1
 8007ad0:	d15d      	bne.n	8007b8e <send_imei_via_sms+0xca>
		//printf("sending message(current location)\n");
		// send_command("AT+CMGS=\"3352093997\"\n\r", 10, 6, 0, 0);
		char tempMsg[150];
		memset(tempMsg, 0, sizeof(tempMsg));
 8007ad2:	003b      	movs	r3, r7
 8007ad4:	2296      	movs	r2, #150	; 0x96
 8007ad6:	2100      	movs	r1, #0
 8007ad8:	0018      	movs	r0, r3
 8007ada:	f007 fa94 	bl	800f006 <memset>
		strcat(tempMsg,"AT+CMGS=\"");
 8007ade:	003b      	movs	r3, r7
 8007ae0:	0018      	movs	r0, r3
 8007ae2:	f7f8 fb17 	bl	8000114 <strlen>
 8007ae6:	0003      	movs	r3, r0
 8007ae8:	001a      	movs	r2, r3
 8007aea:	003b      	movs	r3, r7
 8007aec:	189a      	adds	r2, r3, r2
 8007aee:	4b2b      	ldr	r3, [pc, #172]	; (8007b9c <send_imei_via_sms+0xd8>)
 8007af0:	0010      	movs	r0, r2
 8007af2:	0019      	movs	r1, r3
 8007af4:	230a      	movs	r3, #10
 8007af6:	001a      	movs	r2, r3
 8007af8:	f007 fa7c 	bl	800eff4 <memcpy>
		strcat(tempMsg,validSender);
 8007afc:	4a28      	ldr	r2, [pc, #160]	; (8007ba0 <send_imei_via_sms+0xdc>)
 8007afe:	003b      	movs	r3, r7
 8007b00:	0011      	movs	r1, r2
 8007b02:	0018      	movs	r0, r3
 8007b04:	f007 faa8 	bl	800f058 <strcat>
		strcat(tempMsg,"\"\r");
 8007b08:	003b      	movs	r3, r7
 8007b0a:	0018      	movs	r0, r3
 8007b0c:	f7f8 fb02 	bl	8000114 <strlen>
 8007b10:	0003      	movs	r3, r0
 8007b12:	001a      	movs	r2, r3
 8007b14:	003b      	movs	r3, r7
 8007b16:	189a      	adds	r2, r3, r2
 8007b18:	4b22      	ldr	r3, [pc, #136]	; (8007ba4 <send_imei_via_sms+0xe0>)
 8007b1a:	0010      	movs	r0, r2
 8007b1c:	0019      	movs	r1, r3
 8007b1e:	2303      	movs	r3, #3
 8007b20:	001a      	movs	r2, r3
 8007b22:	f007 fa67 	bl	800eff4 <memcpy>
//		strcat(tempMsg, "AT+CMGS=\"3322336979\"\r");
		strcat(tempMsg, "IMEI:");
 8007b26:	003b      	movs	r3, r7
 8007b28:	0018      	movs	r0, r3
 8007b2a:	f7f8 faf3 	bl	8000114 <strlen>
 8007b2e:	0003      	movs	r3, r0
 8007b30:	001a      	movs	r2, r3
 8007b32:	003b      	movs	r3, r7
 8007b34:	189a      	adds	r2, r3, r2
 8007b36:	4b1c      	ldr	r3, [pc, #112]	; (8007ba8 <send_imei_via_sms+0xe4>)
 8007b38:	0010      	movs	r0, r2
 8007b3a:	0019      	movs	r1, r3
 8007b3c:	2306      	movs	r3, #6
 8007b3e:	001a      	movs	r2, r3
 8007b40:	f007 fa58 	bl	800eff4 <memcpy>
		strcat(tempMsg, imeiChar);
 8007b44:	4a19      	ldr	r2, [pc, #100]	; (8007bac <send_imei_via_sms+0xe8>)
 8007b46:	003b      	movs	r3, r7
 8007b48:	0011      	movs	r1, r2
 8007b4a:	0018      	movs	r0, r3
 8007b4c:	f007 fa84 	bl	800f058 <strcat>
		//todo replace while with for loop
		uint8_t tempCount = 0;
 8007b50:	2397      	movs	r3, #151	; 0x97
 8007b52:	18fb      	adds	r3, r7, r3
 8007b54:	2200      	movs	r2, #0
 8007b56:	701a      	strb	r2, [r3, #0]
		while (tempMsg[tempCount] != NULL) {
 8007b58:	e005      	b.n	8007b66 <send_imei_via_sms+0xa2>
			tempCount++;
 8007b5a:	2197      	movs	r1, #151	; 0x97
 8007b5c:	187b      	adds	r3, r7, r1
 8007b5e:	781a      	ldrb	r2, [r3, #0]
 8007b60:	187b      	adds	r3, r7, r1
 8007b62:	3201      	adds	r2, #1
 8007b64:	701a      	strb	r2, [r3, #0]
		while (tempMsg[tempCount] != NULL) {
 8007b66:	2197      	movs	r1, #151	; 0x97
 8007b68:	187b      	adds	r3, r7, r1
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	003a      	movs	r2, r7
 8007b6e:	5cd3      	ldrb	r3, [r2, r3]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d1f2      	bne.n	8007b5a <send_imei_via_sms+0x96>
		}
		tempMsg[tempCount] = 26;
 8007b74:	187b      	adds	r3, r7, r1
 8007b76:	781b      	ldrb	r3, [r3, #0]
 8007b78:	003a      	movs	r2, r7
 8007b7a:	211a      	movs	r1, #26
 8007b7c:	54d1      	strb	r1, [r2, r3]
		//printf("--Sending message to mobile \n");
		send_command(tempMsg, 12005, 7, 0, 0);
 8007b7e:	490c      	ldr	r1, [pc, #48]	; (8007bb0 <send_imei_via_sms+0xec>)
 8007b80:	0038      	movs	r0, r7
 8007b82:	2300      	movs	r3, #0
 8007b84:	9300      	str	r3, [sp, #0]
 8007b86:	2300      	movs	r3, #0
 8007b88:	2207      	movs	r2, #7
 8007b8a:	f7fe ff3f 	bl	8006a0c <send_command>
		// char tecMsg[] = {'A','T','+','C','M','G','S','=','\"','3','3','2','2','3','3','6','9','7','9','\"','\r','h','e','l','l','o',26,0};
		//    send_command(tecMsg, 12005, 7, 0, 0);
	}
}
 8007b8e:	46c0      	nop			; (mov r8, r8)
 8007b90:	46bd      	mov	sp, r7
 8007b92:	b026      	add	sp, #152	; 0x98
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	46c0      	nop			; (mov r8, r8)
 8007b98:	2000076a 	.word	0x2000076a
 8007b9c:	080136a8 	.word	0x080136a8
 8007ba0:	20000008 	.word	0x20000008
 8007ba4:	080136b4 	.word	0x080136b4
 8007ba8:	080136b8 	.word	0x080136b8
 8007bac:	200008d8 	.word	0x200008d8
 8007bb0:	00002ee5 	.word	0x00002ee5

08007bb4 <send_current_location_via_sms>:

void send_current_location_via_sms() {
 8007bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bb6:	b0b9      	sub	sp, #228	; 0xe4
 8007bb8:	af02      	add	r7, sp, #8
	if (isNumValid == 1) {
 8007bba:	4be9      	ldr	r3, [pc, #932]	; (8007f60 <send_current_location_via_sms+0x3ac>)
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	d000      	beq.n	8007bc4 <send_current_location_via_sms+0x10>
 8007bc2:	e1c9      	b.n	8007f58 <send_current_location_via_sms+0x3a4>
		//printf("sending message(current location)\n");
		// send_command("AT+CMGS=\"3352093997\"\n\r", 10, 6, 0, 0);
		char tempMsg[150];
		uint8_t speed = 0;
 8007bc4:	21d6      	movs	r1, #214	; 0xd6
 8007bc6:	187b      	adds	r3, r7, r1
 8007bc8:	2200      	movs	r2, #0
 8007bca:	701a      	strb	r2, [r3, #0]
		uint32_t lat = 0, lon = 0;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	20d0      	movs	r0, #208	; 0xd0
 8007bd0:	183a      	adds	r2, r7, r0
 8007bd2:	6013      	str	r3, [r2, #0]
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	24cc      	movs	r4, #204	; 0xcc
 8007bd8:	193a      	adds	r2, r7, r4
 8007bda:	6013      	str	r3, [r2, #0]
		double tempFloat;
		double tempMin;
		uint8_t tempDeg;
		char buf[15];
		float latitude, longitude;
		lat = (gps_info[7] << 24) | (gps_info[8] << 16) | (gps_info[9] << 8)
 8007bdc:	4be1      	ldr	r3, [pc, #900]	; (8007f64 <send_current_location_via_sms+0x3b0>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	3307      	adds	r3, #7
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	061a      	lsls	r2, r3, #24
 8007be6:	4bdf      	ldr	r3, [pc, #892]	; (8007f64 <send_current_location_via_sms+0x3b0>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	3308      	adds	r3, #8
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	041b      	lsls	r3, r3, #16
 8007bf0:	431a      	orrs	r2, r3
 8007bf2:	4bdc      	ldr	r3, [pc, #880]	; (8007f64 <send_current_location_via_sms+0x3b0>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	3309      	adds	r3, #9
 8007bf8:	781b      	ldrb	r3, [r3, #0]
 8007bfa:	021b      	lsls	r3, r3, #8
 8007bfc:	431a      	orrs	r2, r3
		| gps_info[10];
 8007bfe:	4bd9      	ldr	r3, [pc, #868]	; (8007f64 <send_current_location_via_sms+0x3b0>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	330a      	adds	r3, #10
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	4313      	orrs	r3, r2
		lat = (gps_info[7] << 24) | (gps_info[8] << 16) | (gps_info[9] << 8)
 8007c08:	183a      	adds	r2, r7, r0
 8007c0a:	6013      	str	r3, [r2, #0]
		lon = (gps_info[11] << 24) | (gps_info[12] << 16) | (gps_info[13] << 8)
 8007c0c:	4bd5      	ldr	r3, [pc, #852]	; (8007f64 <send_current_location_via_sms+0x3b0>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	330b      	adds	r3, #11
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	061a      	lsls	r2, r3, #24
 8007c16:	4bd3      	ldr	r3, [pc, #844]	; (8007f64 <send_current_location_via_sms+0x3b0>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	330c      	adds	r3, #12
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	041b      	lsls	r3, r3, #16
 8007c20:	431a      	orrs	r2, r3
 8007c22:	4bd0      	ldr	r3, [pc, #832]	; (8007f64 <send_current_location_via_sms+0x3b0>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	330d      	adds	r3, #13
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	021b      	lsls	r3, r3, #8
 8007c2c:	431a      	orrs	r2, r3
		| gps_info[14];
 8007c2e:	4bcd      	ldr	r3, [pc, #820]	; (8007f64 <send_current_location_via_sms+0x3b0>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	330e      	adds	r3, #14
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	4313      	orrs	r3, r2
		lon = (gps_info[11] << 24) | (gps_info[12] << 16) | (gps_info[13] << 8)
 8007c38:	193a      	adds	r2, r7, r4
 8007c3a:	6013      	str	r3, [r2, #0]
		speed = gps_info[15];
 8007c3c:	4bc9      	ldr	r3, [pc, #804]	; (8007f64 <send_current_location_via_sms+0x3b0>)
 8007c3e:	681a      	ldr	r2, [r3, #0]
 8007c40:	187b      	adds	r3, r7, r1
 8007c42:	7bd2      	ldrb	r2, [r2, #15]
 8007c44:	701a      	strb	r2, [r3, #0]
		tempFloat = lat / 30000.0;
 8007c46:	183a      	adds	r2, r7, r0
 8007c48:	6810      	ldr	r0, [r2, #0]
 8007c4a:	f7fa fd6f 	bl	800272c <__aeabi_ui2d>
 8007c4e:	2200      	movs	r2, #0
 8007c50:	4bc5      	ldr	r3, [pc, #788]	; (8007f68 <send_current_location_via_sms+0x3b4>)
 8007c52:	f7f9 fae7 	bl	8001224 <__aeabi_ddiv>
 8007c56:	0002      	movs	r2, r0
 8007c58:	000b      	movs	r3, r1
 8007c5a:	24c0      	movs	r4, #192	; 0xc0
 8007c5c:	1938      	adds	r0, r7, r4
 8007c5e:	6002      	str	r2, [r0, #0]
 8007c60:	6043      	str	r3, [r0, #4]
		tempDeg = (int) tempFloat / 60;
 8007c62:	193a      	adds	r2, r7, r4
 8007c64:	6810      	ldr	r0, [r2, #0]
 8007c66:	6851      	ldr	r1, [r2, #4]
 8007c68:	f7fa fcfa 	bl	8002660 <__aeabi_d2iz>
 8007c6c:	0003      	movs	r3, r0
 8007c6e:	213c      	movs	r1, #60	; 0x3c
 8007c70:	0018      	movs	r0, r3
 8007c72:	f7f8 faf5 	bl	8000260 <__divsi3>
 8007c76:	0003      	movs	r3, r0
 8007c78:	001a      	movs	r2, r3
 8007c7a:	26bf      	movs	r6, #191	; 0xbf
 8007c7c:	19bb      	adds	r3, r7, r6
 8007c7e:	701a      	strb	r2, [r3, #0]
		tempMin = (int) tempFloat % 60;
 8007c80:	193a      	adds	r2, r7, r4
 8007c82:	6810      	ldr	r0, [r2, #0]
 8007c84:	6851      	ldr	r1, [r2, #4]
 8007c86:	f7fa fceb 	bl	8002660 <__aeabi_d2iz>
 8007c8a:	0003      	movs	r3, r0
 8007c8c:	213c      	movs	r1, #60	; 0x3c
 8007c8e:	0018      	movs	r0, r3
 8007c90:	f7f8 fbcc 	bl	800042c <__aeabi_idivmod>
 8007c94:	000b      	movs	r3, r1
 8007c96:	0018      	movs	r0, r3
 8007c98:	f7fa fd18 	bl	80026cc <__aeabi_i2d>
 8007c9c:	0002      	movs	r2, r0
 8007c9e:	000b      	movs	r3, r1
 8007ca0:	25b0      	movs	r5, #176	; 0xb0
 8007ca2:	1978      	adds	r0, r7, r5
 8007ca4:	6002      	str	r2, [r0, #0]
 8007ca6:	6043      	str	r3, [r0, #4]
		tempFloat = tempFloat - (int) tempFloat;
 8007ca8:	193a      	adds	r2, r7, r4
 8007caa:	6810      	ldr	r0, [r2, #0]
 8007cac:	6851      	ldr	r1, [r2, #4]
 8007cae:	f7fa fcd7 	bl	8002660 <__aeabi_d2iz>
 8007cb2:	0003      	movs	r3, r0
 8007cb4:	0018      	movs	r0, r3
 8007cb6:	f7fa fd09 	bl	80026cc <__aeabi_i2d>
 8007cba:	0002      	movs	r2, r0
 8007cbc:	000b      	movs	r3, r1
 8007cbe:	1938      	adds	r0, r7, r4
 8007cc0:	6841      	ldr	r1, [r0, #4]
 8007cc2:	6800      	ldr	r0, [r0, #0]
 8007cc4:	f7fa f91c 	bl	8001f00 <__aeabi_dsub>
 8007cc8:	0002      	movs	r2, r0
 8007cca:	000b      	movs	r3, r1
 8007ccc:	1938      	adds	r0, r7, r4
 8007cce:	6002      	str	r2, [r0, #0]
 8007cd0:	6043      	str	r3, [r0, #4]
		tempMin = tempMin + tempFloat;
 8007cd2:	193a      	adds	r2, r7, r4
 8007cd4:	6853      	ldr	r3, [r2, #4]
 8007cd6:	6812      	ldr	r2, [r2, #0]
 8007cd8:	1978      	adds	r0, r7, r5
 8007cda:	6841      	ldr	r1, [r0, #4]
 8007cdc:	6800      	ldr	r0, [r0, #0]
 8007cde:	f7f8 ff65 	bl	8000bac <__aeabi_dadd>
 8007ce2:	0002      	movs	r2, r0
 8007ce4:	000b      	movs	r3, r1
 8007ce6:	1978      	adds	r0, r7, r5
 8007ce8:	6002      	str	r2, [r0, #0]
 8007cea:	6043      	str	r3, [r0, #4]
		latitude = tempMin / 60.0;
 8007cec:	2200      	movs	r2, #0
 8007cee:	4b9f      	ldr	r3, [pc, #636]	; (8007f6c <send_current_location_via_sms+0x3b8>)
 8007cf0:	1978      	adds	r0, r7, r5
 8007cf2:	6841      	ldr	r1, [r0, #4]
 8007cf4:	6800      	ldr	r0, [r0, #0]
 8007cf6:	f7f9 fa95 	bl	8001224 <__aeabi_ddiv>
 8007cfa:	0002      	movs	r2, r0
 8007cfc:	000b      	movs	r3, r1
 8007cfe:	0010      	movs	r0, r2
 8007d00:	0019      	movs	r1, r3
 8007d02:	f7fa fd81 	bl	8002808 <__aeabi_d2f>
 8007d06:	1c03      	adds	r3, r0, #0
 8007d08:	22ac      	movs	r2, #172	; 0xac
 8007d0a:	18b8      	adds	r0, r7, r2
 8007d0c:	6003      	str	r3, [r0, #0]
		latitude += tempDeg;
 8007d0e:	19bb      	adds	r3, r7, r6
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	0018      	movs	r0, r3
 8007d14:	f7f8 fefc 	bl	8000b10 <__aeabi_i2f>
 8007d18:	1c03      	adds	r3, r0, #0
 8007d1a:	1c19      	adds	r1, r3, #0
 8007d1c:	22ac      	movs	r2, #172	; 0xac
 8007d1e:	18b8      	adds	r0, r7, r2
 8007d20:	6800      	ldr	r0, [r0, #0]
 8007d22:	f7f8 fc71 	bl	8000608 <__aeabi_fadd>
 8007d26:	1c03      	adds	r3, r0, #0
 8007d28:	22ac      	movs	r2, #172	; 0xac
 8007d2a:	18b8      	adds	r0, r7, r2
 8007d2c:	6003      	str	r3, [r0, #0]
		tempFloat = lon / 30000.0;
 8007d2e:	23cc      	movs	r3, #204	; 0xcc
 8007d30:	18fb      	adds	r3, r7, r3
 8007d32:	6818      	ldr	r0, [r3, #0]
 8007d34:	f7fa fcfa 	bl	800272c <__aeabi_ui2d>
 8007d38:	2200      	movs	r2, #0
 8007d3a:	4b8b      	ldr	r3, [pc, #556]	; (8007f68 <send_current_location_via_sms+0x3b4>)
 8007d3c:	f7f9 fa72 	bl	8001224 <__aeabi_ddiv>
 8007d40:	0002      	movs	r2, r0
 8007d42:	000b      	movs	r3, r1
 8007d44:	1938      	adds	r0, r7, r4
 8007d46:	6002      	str	r2, [r0, #0]
 8007d48:	6043      	str	r3, [r0, #4]
		tempDeg = (int) tempFloat / 60;
 8007d4a:	193b      	adds	r3, r7, r4
 8007d4c:	6818      	ldr	r0, [r3, #0]
 8007d4e:	6859      	ldr	r1, [r3, #4]
 8007d50:	f7fa fc86 	bl	8002660 <__aeabi_d2iz>
 8007d54:	0003      	movs	r3, r0
 8007d56:	213c      	movs	r1, #60	; 0x3c
 8007d58:	0018      	movs	r0, r3
 8007d5a:	f7f8 fa81 	bl	8000260 <__divsi3>
 8007d5e:	0003      	movs	r3, r0
 8007d60:	001a      	movs	r2, r3
 8007d62:	19bb      	adds	r3, r7, r6
 8007d64:	701a      	strb	r2, [r3, #0]
		tempMin = (int) tempFloat % 60;
 8007d66:	193b      	adds	r3, r7, r4
 8007d68:	6818      	ldr	r0, [r3, #0]
 8007d6a:	6859      	ldr	r1, [r3, #4]
 8007d6c:	f7fa fc78 	bl	8002660 <__aeabi_d2iz>
 8007d70:	0003      	movs	r3, r0
 8007d72:	213c      	movs	r1, #60	; 0x3c
 8007d74:	0018      	movs	r0, r3
 8007d76:	f7f8 fb59 	bl	800042c <__aeabi_idivmod>
 8007d7a:	000b      	movs	r3, r1
 8007d7c:	0018      	movs	r0, r3
 8007d7e:	f7fa fca5 	bl	80026cc <__aeabi_i2d>
 8007d82:	0002      	movs	r2, r0
 8007d84:	000b      	movs	r3, r1
 8007d86:	1978      	adds	r0, r7, r5
 8007d88:	6002      	str	r2, [r0, #0]
 8007d8a:	6043      	str	r3, [r0, #4]
		tempFloat = tempFloat - (int) tempFloat;
 8007d8c:	193b      	adds	r3, r7, r4
 8007d8e:	6818      	ldr	r0, [r3, #0]
 8007d90:	6859      	ldr	r1, [r3, #4]
 8007d92:	f7fa fc65 	bl	8002660 <__aeabi_d2iz>
 8007d96:	0003      	movs	r3, r0
 8007d98:	0018      	movs	r0, r3
 8007d9a:	f7fa fc97 	bl	80026cc <__aeabi_i2d>
 8007d9e:	0002      	movs	r2, r0
 8007da0:	000b      	movs	r3, r1
 8007da2:	1938      	adds	r0, r7, r4
 8007da4:	6841      	ldr	r1, [r0, #4]
 8007da6:	6800      	ldr	r0, [r0, #0]
 8007da8:	f7fa f8aa 	bl	8001f00 <__aeabi_dsub>
 8007dac:	0002      	movs	r2, r0
 8007dae:	000b      	movs	r3, r1
 8007db0:	1938      	adds	r0, r7, r4
 8007db2:	6002      	str	r2, [r0, #0]
 8007db4:	6043      	str	r3, [r0, #4]
		tempMin = tempMin + tempFloat;
 8007db6:	193b      	adds	r3, r7, r4
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	1978      	adds	r0, r7, r5
 8007dbe:	6841      	ldr	r1, [r0, #4]
 8007dc0:	6800      	ldr	r0, [r0, #0]
 8007dc2:	f7f8 fef3 	bl	8000bac <__aeabi_dadd>
 8007dc6:	0002      	movs	r2, r0
 8007dc8:	000b      	movs	r3, r1
 8007dca:	1978      	adds	r0, r7, r5
 8007dcc:	6002      	str	r2, [r0, #0]
 8007dce:	6043      	str	r3, [r0, #4]
		longitude = tempMin / 60.0;
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	4b66      	ldr	r3, [pc, #408]	; (8007f6c <send_current_location_via_sms+0x3b8>)
 8007dd4:	1978      	adds	r0, r7, r5
 8007dd6:	6841      	ldr	r1, [r0, #4]
 8007dd8:	6800      	ldr	r0, [r0, #0]
 8007dda:	f7f9 fa23 	bl	8001224 <__aeabi_ddiv>
 8007dde:	0002      	movs	r2, r0
 8007de0:	000b      	movs	r3, r1
 8007de2:	0010      	movs	r0, r2
 8007de4:	0019      	movs	r1, r3
 8007de6:	f7fa fd0f 	bl	8002808 <__aeabi_d2f>
 8007dea:	1c03      	adds	r3, r0, #0
 8007dec:	25a8      	movs	r5, #168	; 0xa8
 8007dee:	1978      	adds	r0, r7, r5
 8007df0:	6003      	str	r3, [r0, #0]
		longitude += tempDeg;
 8007df2:	19bb      	adds	r3, r7, r6
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	0018      	movs	r0, r3
 8007df8:	f7f8 fe8a 	bl	8000b10 <__aeabi_i2f>
 8007dfc:	1c03      	adds	r3, r0, #0
 8007dfe:	1c19      	adds	r1, r3, #0
 8007e00:	197b      	adds	r3, r7, r5
 8007e02:	6818      	ldr	r0, [r3, #0]
 8007e04:	f7f8 fc00 	bl	8000608 <__aeabi_fadd>
 8007e08:	1c03      	adds	r3, r0, #0
 8007e0a:	1978      	adds	r0, r7, r5
 8007e0c:	6003      	str	r3, [r0, #0]
		memset(tempMsg, 0, sizeof(tempMsg));
 8007e0e:	003b      	movs	r3, r7
 8007e10:	2296      	movs	r2, #150	; 0x96
 8007e12:	2100      	movs	r1, #0
 8007e14:	0018      	movs	r0, r3
 8007e16:	f007 f8f6 	bl	800f006 <memset>
		memset(buf, 0, sizeof(buf));
 8007e1a:	2498      	movs	r4, #152	; 0x98
 8007e1c:	193b      	adds	r3, r7, r4
 8007e1e:	220f      	movs	r2, #15
 8007e20:	2100      	movs	r1, #0
 8007e22:	0018      	movs	r0, r3
 8007e24:	f007 f8ef 	bl	800f006 <memset>
		gcvt(latitude, 8, buf);
 8007e28:	22ac      	movs	r2, #172	; 0xac
 8007e2a:	18bb      	adds	r3, r7, r2
 8007e2c:	6818      	ldr	r0, [r3, #0]
 8007e2e:	f7fa fca3 	bl	8002778 <__aeabi_f2d>
 8007e32:	193b      	adds	r3, r7, r4
 8007e34:	2208      	movs	r2, #8
 8007e36:	f007 f88d 	bl	800ef54 <gcvt>
		strcat(tempMsg,"AT+CMGS=\"");
 8007e3a:	003b      	movs	r3, r7
 8007e3c:	0018      	movs	r0, r3
 8007e3e:	f7f8 f969 	bl	8000114 <strlen>
 8007e42:	0003      	movs	r3, r0
 8007e44:	001a      	movs	r2, r3
 8007e46:	003b      	movs	r3, r7
 8007e48:	189a      	adds	r2, r3, r2
 8007e4a:	4b49      	ldr	r3, [pc, #292]	; (8007f70 <send_current_location_via_sms+0x3bc>)
 8007e4c:	0010      	movs	r0, r2
 8007e4e:	0019      	movs	r1, r3
 8007e50:	230a      	movs	r3, #10
 8007e52:	001a      	movs	r2, r3
 8007e54:	f007 f8ce 	bl	800eff4 <memcpy>
		strcat(tempMsg,validSender);
 8007e58:	4a46      	ldr	r2, [pc, #280]	; (8007f74 <send_current_location_via_sms+0x3c0>)
 8007e5a:	003b      	movs	r3, r7
 8007e5c:	0011      	movs	r1, r2
 8007e5e:	0018      	movs	r0, r3
 8007e60:	f007 f8fa 	bl	800f058 <strcat>
		strcat(tempMsg,"\"\r");
 8007e64:	003b      	movs	r3, r7
 8007e66:	0018      	movs	r0, r3
 8007e68:	f7f8 f954 	bl	8000114 <strlen>
 8007e6c:	0003      	movs	r3, r0
 8007e6e:	001a      	movs	r2, r3
 8007e70:	003b      	movs	r3, r7
 8007e72:	189a      	adds	r2, r3, r2
 8007e74:	4b40      	ldr	r3, [pc, #256]	; (8007f78 <send_current_location_via_sms+0x3c4>)
 8007e76:	0010      	movs	r0, r2
 8007e78:	0019      	movs	r1, r3
 8007e7a:	2303      	movs	r3, #3
 8007e7c:	001a      	movs	r2, r3
 8007e7e:	f007 f8b9 	bl	800eff4 <memcpy>
//		strcat(tempMsg, "AT+CMGS=\"3322336979\"\r");
		strcat(tempMsg, buf);
 8007e82:	193a      	adds	r2, r7, r4
 8007e84:	003b      	movs	r3, r7
 8007e86:	0011      	movs	r1, r2
 8007e88:	0018      	movs	r0, r3
 8007e8a:	f007 f8e5 	bl	800f058 <strcat>
		memset(buf, 0, sizeof(buf));
 8007e8e:	193b      	adds	r3, r7, r4
 8007e90:	220f      	movs	r2, #15
 8007e92:	2100      	movs	r1, #0
 8007e94:	0018      	movs	r0, r3
 8007e96:	f007 f8b6 	bl	800f006 <memset>
		gcvt(longitude, 8, buf);
 8007e9a:	197b      	adds	r3, r7, r5
 8007e9c:	6818      	ldr	r0, [r3, #0]
 8007e9e:	f7fa fc6b 	bl	8002778 <__aeabi_f2d>
 8007ea2:	193b      	adds	r3, r7, r4
 8007ea4:	2208      	movs	r2, #8
 8007ea6:	f007 f855 	bl	800ef54 <gcvt>
		strcat(tempMsg, ",");
 8007eaa:	003b      	movs	r3, r7
 8007eac:	0018      	movs	r0, r3
 8007eae:	f7f8 f931 	bl	8000114 <strlen>
 8007eb2:	0003      	movs	r3, r0
 8007eb4:	001a      	movs	r2, r3
 8007eb6:	003b      	movs	r3, r7
 8007eb8:	189a      	adds	r2, r3, r2
 8007eba:	4b30      	ldr	r3, [pc, #192]	; (8007f7c <send_current_location_via_sms+0x3c8>)
 8007ebc:	0010      	movs	r0, r2
 8007ebe:	0019      	movs	r1, r3
 8007ec0:	2302      	movs	r3, #2
 8007ec2:	001a      	movs	r2, r3
 8007ec4:	f007 f896 	bl	800eff4 <memcpy>
		strcat(tempMsg, buf);
 8007ec8:	193a      	adds	r2, r7, r4
 8007eca:	003b      	movs	r3, r7
 8007ecc:	0011      	movs	r1, r2
 8007ece:	0018      	movs	r0, r3
 8007ed0:	f007 f8c2 	bl	800f058 <strcat>
		strcat(tempMsg, ",");
 8007ed4:	003b      	movs	r3, r7
 8007ed6:	0018      	movs	r0, r3
 8007ed8:	f7f8 f91c 	bl	8000114 <strlen>
 8007edc:	0003      	movs	r3, r0
 8007ede:	001a      	movs	r2, r3
 8007ee0:	003b      	movs	r3, r7
 8007ee2:	189a      	adds	r2, r3, r2
 8007ee4:	4b25      	ldr	r3, [pc, #148]	; (8007f7c <send_current_location_via_sms+0x3c8>)
 8007ee6:	0010      	movs	r0, r2
 8007ee8:	0019      	movs	r1, r3
 8007eea:	2302      	movs	r3, #2
 8007eec:	001a      	movs	r2, r3
 8007eee:	f007 f881 	bl	800eff4 <memcpy>
		memset(buf, 0, sizeof(buf));
 8007ef2:	193b      	adds	r3, r7, r4
 8007ef4:	220f      	movs	r2, #15
 8007ef6:	2100      	movs	r1, #0
 8007ef8:	0018      	movs	r0, r3
 8007efa:	f007 f884 	bl	800f006 <memset>
		int2string(speed, buf);
 8007efe:	21d6      	movs	r1, #214	; 0xd6
 8007f00:	187b      	adds	r3, r7, r1
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	193a      	adds	r2, r7, r4
 8007f06:	0011      	movs	r1, r2
 8007f08:	0018      	movs	r0, r3
 8007f0a:	f000 fa67 	bl	80083dc <int2string>
		strcat(tempMsg, buf);
 8007f0e:	193a      	adds	r2, r7, r4
 8007f10:	003b      	movs	r3, r7
 8007f12:	0011      	movs	r1, r2
 8007f14:	0018      	movs	r0, r3
 8007f16:	f007 f89f 	bl	800f058 <strcat>

		uint8_t tempCount = 0;
 8007f1a:	23d7      	movs	r3, #215	; 0xd7
 8007f1c:	18fb      	adds	r3, r7, r3
 8007f1e:	2200      	movs	r2, #0
 8007f20:	701a      	strb	r2, [r3, #0]
		//todo replace while with for loop
		while (tempMsg[tempCount] != NULL) {
 8007f22:	e005      	b.n	8007f30 <send_current_location_via_sms+0x37c>
			tempCount++;
 8007f24:	21d7      	movs	r1, #215	; 0xd7
 8007f26:	187b      	adds	r3, r7, r1
 8007f28:	781a      	ldrb	r2, [r3, #0]
 8007f2a:	187b      	adds	r3, r7, r1
 8007f2c:	3201      	adds	r2, #1
 8007f2e:	701a      	strb	r2, [r3, #0]
		while (tempMsg[tempCount] != NULL) {
 8007f30:	21d7      	movs	r1, #215	; 0xd7
 8007f32:	187b      	adds	r3, r7, r1
 8007f34:	781b      	ldrb	r3, [r3, #0]
 8007f36:	003a      	movs	r2, r7
 8007f38:	5cd3      	ldrb	r3, [r2, r3]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d1f2      	bne.n	8007f24 <send_current_location_via_sms+0x370>
		}

		tempMsg[tempCount] = 26;
 8007f3e:	187b      	adds	r3, r7, r1
 8007f40:	781b      	ldrb	r3, [r3, #0]
 8007f42:	003a      	movs	r2, r7
 8007f44:	211a      	movs	r1, #26
 8007f46:	54d1      	strb	r1, [r2, r3]
		//printf("--Sending message to mobile \n");

		send_command(tempMsg, 12005, 7, 0, 0);
 8007f48:	490d      	ldr	r1, [pc, #52]	; (8007f80 <send_current_location_via_sms+0x3cc>)
 8007f4a:	0038      	movs	r0, r7
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	9300      	str	r3, [sp, #0]
 8007f50:	2300      	movs	r3, #0
 8007f52:	2207      	movs	r2, #7
 8007f54:	f7fe fd5a 	bl	8006a0c <send_command>

		// char tecMsg[] = {'A','T','+','C','M','G','S','=','\"','3','3','2','2','3','3','6','9','7','9','\"','\r','h','e','l','l','o',26,0};

		//    send_command(tecMsg, 12005, 7, 0, 0);
	}
}
 8007f58:	46c0      	nop			; (mov r8, r8)
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	b037      	add	sp, #220	; 0xdc
 8007f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f60:	2000076a 	.word	0x2000076a
 8007f64:	2000002c 	.word	0x2000002c
 8007f68:	40dd4c00 	.word	0x40dd4c00
 8007f6c:	404e0000 	.word	0x404e0000
 8007f70:	080136a8 	.word	0x080136a8
 8007f74:	20000008 	.word	0x20000008
 8007f78:	080136b4 	.word	0x080136b4
 8007f7c:	080136c0 	.word	0x080136c0
 8007f80:	00002ee5 	.word	0x00002ee5

08007f84 <send_alarm_packet_via_sms>:


void send_alarm_packet_via_sms(){
 8007f84:	b5b0      	push	{r4, r5, r7, lr}
 8007f86:	b0a2      	sub	sp, #136	; 0x88
 8007f88:	af02      	add	r7, sp, #8
	if(isSMSActive==1){
 8007f8a:	4b58      	ldr	r3, [pc, #352]	; (80080ec <send_alarm_packet_via_sms+0x168>)
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d000      	beq.n	8007f94 <send_alarm_packet_via_sms+0x10>
 8007f92:	e0a7      	b.n	80080e4 <send_alarm_packet_via_sms+0x160>
		uint8_t tempalarm[23];
		memset(tempalarm, 0, sizeof(tempalarm));
 8007f94:	2364      	movs	r3, #100	; 0x64
 8007f96:	18fb      	adds	r3, r7, r3
 8007f98:	2217      	movs	r2, #23
 8007f9a:	2100      	movs	r1, #0
 8007f9c:	0018      	movs	r0, r3
 8007f9e:	f007 f832 	bl	800f006 <memset>
		create_status_info();
 8007fa2:	f7ff fb87 	bl	80076b4 <create_status_info>
		char temMsg[100];
		uint8_t n = 21;
 8007fa6:	237f      	movs	r3, #127	; 0x7f
 8007fa8:	18fb      	adds	r3, r7, r3
 8007faa:	2215      	movs	r2, #21
 8007fac:	701a      	strb	r2, [r3, #0]
		uint8_t tempCt = 0;
 8007fae:	237e      	movs	r3, #126	; 0x7e
 8007fb0:	18fb      	adds	r3, r7, r3
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	701a      	strb	r2, [r3, #0]
		memset(temMsg, 0, sizeof(temMsg));
 8007fb6:	003b      	movs	r3, r7
 8007fb8:	2264      	movs	r2, #100	; 0x64
 8007fba:	2100      	movs	r1, #0
 8007fbc:	0018      	movs	r0, r3
 8007fbe:	f007 f822 	bl	800f006 <memset>
		strcat(temMsg,"AT+CMGS=\"");
 8007fc2:	003b      	movs	r3, r7
 8007fc4:	0018      	movs	r0, r3
 8007fc6:	f7f8 f8a5 	bl	8000114 <strlen>
 8007fca:	0003      	movs	r3, r0
 8007fcc:	001a      	movs	r2, r3
 8007fce:	003b      	movs	r3, r7
 8007fd0:	189a      	adds	r2, r3, r2
 8007fd2:	4b47      	ldr	r3, [pc, #284]	; (80080f0 <send_alarm_packet_via_sms+0x16c>)
 8007fd4:	0010      	movs	r0, r2
 8007fd6:	0019      	movs	r1, r3
 8007fd8:	230a      	movs	r3, #10
 8007fda:	001a      	movs	r2, r3
 8007fdc:	f007 f80a 	bl	800eff4 <memcpy>
		strcat(temMsg,validSender);
 8007fe0:	4a44      	ldr	r2, [pc, #272]	; (80080f4 <send_alarm_packet_via_sms+0x170>)
 8007fe2:	003b      	movs	r3, r7
 8007fe4:	0011      	movs	r1, r2
 8007fe6:	0018      	movs	r0, r3
 8007fe8:	f007 f836 	bl	800f058 <strcat>
		strcat(temMsg,"\"\r");
 8007fec:	003b      	movs	r3, r7
 8007fee:	0018      	movs	r0, r3
 8007ff0:	f7f8 f890 	bl	8000114 <strlen>
 8007ff4:	0003      	movs	r3, r0
 8007ff6:	001a      	movs	r2, r3
 8007ff8:	003b      	movs	r3, r7
 8007ffa:	189a      	adds	r2, r3, r2
 8007ffc:	4b3e      	ldr	r3, [pc, #248]	; (80080f8 <send_alarm_packet_via_sms+0x174>)
 8007ffe:	0010      	movs	r0, r2
 8008000:	0019      	movs	r1, r3
 8008002:	2303      	movs	r3, #3
 8008004:	001a      	movs	r2, r3
 8008006:	f006 fff5 	bl	800eff4 <memcpy>
//		create_status_info();
		for (uint8_t y = 0; y < 18; y++) {
 800800a:	237d      	movs	r3, #125	; 0x7d
 800800c:	18fb      	adds	r3, r7, r3
 800800e:	2200      	movs	r2, #0
 8008010:	701a      	strb	r2, [r3, #0]
 8008012:	e010      	b.n	8008036 <send_alarm_packet_via_sms+0xb2>
			tempalarm[y]  = gps_info[y];
 8008014:	4b39      	ldr	r3, [pc, #228]	; (80080fc <send_alarm_packet_via_sms+0x178>)
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	207d      	movs	r0, #125	; 0x7d
 800801a:	183b      	adds	r3, r7, r0
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	18d2      	adds	r2, r2, r3
 8008020:	183b      	adds	r3, r7, r0
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	7811      	ldrb	r1, [r2, #0]
 8008026:	2264      	movs	r2, #100	; 0x64
 8008028:	18ba      	adds	r2, r7, r2
 800802a:	54d1      	strb	r1, [r2, r3]
		for (uint8_t y = 0; y < 18; y++) {
 800802c:	183b      	adds	r3, r7, r0
 800802e:	781a      	ldrb	r2, [r3, #0]
 8008030:	183b      	adds	r3, r7, r0
 8008032:	3201      	adds	r2, #1
 8008034:	701a      	strb	r2, [r3, #0]
 8008036:	237d      	movs	r3, #125	; 0x7d
 8008038:	18fb      	adds	r3, r7, r3
 800803a:	781b      	ldrb	r3, [r3, #0]
 800803c:	2b11      	cmp	r3, #17
 800803e:	d9e9      	bls.n	8008014 <send_alarm_packet_via_sms+0x90>
		}
		tempalarm[18]=TermInfo;
 8008040:	4b2f      	ldr	r3, [pc, #188]	; (8008100 <send_alarm_packet_via_sms+0x17c>)
 8008042:	781a      	ldrb	r2, [r3, #0]
 8008044:	2164      	movs	r1, #100	; 0x64
 8008046:	187b      	adds	r3, r7, r1
 8008048:	749a      	strb	r2, [r3, #18]
		tempalarm[19]=VLvl;
 800804a:	4b2e      	ldr	r3, [pc, #184]	; (8008104 <send_alarm_packet_via_sms+0x180>)
 800804c:	781a      	ldrb	r2, [r3, #0]
 800804e:	187b      	adds	r3, r7, r1
 8008050:	74da      	strb	r2, [r3, #19]
		tempalarm[20]=GSMSS;
 8008052:	4b2d      	ldr	r3, [pc, #180]	; (8008108 <send_alarm_packet_via_sms+0x184>)
 8008054:	781a      	ldrb	r2, [r3, #0]
 8008056:	187b      	adds	r3, r7, r1
 8008058:	751a      	strb	r2, [r3, #20]
		for (uint8_t y = 0; y < 21; y++) {
 800805a:	237c      	movs	r3, #124	; 0x7c
 800805c:	18fb      	adds	r3, r7, r3
 800805e:	2200      	movs	r2, #0
 8008060:	701a      	strb	r2, [r3, #0]
 8008062:	e01b      	b.n	800809c <send_alarm_packet_via_sms+0x118>
			n += sprintf(&temMsg[n], "%d", tempalarm[y]);
 8008064:	247f      	movs	r4, #127	; 0x7f
 8008066:	193b      	adds	r3, r7, r4
 8008068:	781b      	ldrb	r3, [r3, #0]
 800806a:	003a      	movs	r2, r7
 800806c:	18d0      	adds	r0, r2, r3
 800806e:	257c      	movs	r5, #124	; 0x7c
 8008070:	197b      	adds	r3, r7, r5
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	2264      	movs	r2, #100	; 0x64
 8008076:	18ba      	adds	r2, r7, r2
 8008078:	5cd3      	ldrb	r3, [r2, r3]
 800807a:	001a      	movs	r2, r3
 800807c:	4b23      	ldr	r3, [pc, #140]	; (800810c <send_alarm_packet_via_sms+0x188>)
 800807e:	0019      	movs	r1, r3
 8008080:	f006 ffca 	bl	800f018 <siprintf>
 8008084:	0003      	movs	r3, r0
 8008086:	b2d9      	uxtb	r1, r3
 8008088:	193b      	adds	r3, r7, r4
 800808a:	193a      	adds	r2, r7, r4
 800808c:	7812      	ldrb	r2, [r2, #0]
 800808e:	188a      	adds	r2, r1, r2
 8008090:	701a      	strb	r2, [r3, #0]
		for (uint8_t y = 0; y < 21; y++) {
 8008092:	197b      	adds	r3, r7, r5
 8008094:	781a      	ldrb	r2, [r3, #0]
 8008096:	197b      	adds	r3, r7, r5
 8008098:	3201      	adds	r2, #1
 800809a:	701a      	strb	r2, [r3, #0]
 800809c:	237c      	movs	r3, #124	; 0x7c
 800809e:	18fb      	adds	r3, r7, r3
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	2b14      	cmp	r3, #20
 80080a4:	d9de      	bls.n	8008064 <send_alarm_packet_via_sms+0xe0>
		}
		tempCt = 0;
 80080a6:	237e      	movs	r3, #126	; 0x7e
 80080a8:	18fb      	adds	r3, r7, r3
 80080aa:	2200      	movs	r2, #0
 80080ac:	701a      	strb	r2, [r3, #0]
		while (temMsg[tempCt] != NULL) {
 80080ae:	e005      	b.n	80080bc <send_alarm_packet_via_sms+0x138>
			tempCt++;
 80080b0:	217e      	movs	r1, #126	; 0x7e
 80080b2:	187b      	adds	r3, r7, r1
 80080b4:	781a      	ldrb	r2, [r3, #0]
 80080b6:	187b      	adds	r3, r7, r1
 80080b8:	3201      	adds	r2, #1
 80080ba:	701a      	strb	r2, [r3, #0]
		while (temMsg[tempCt] != NULL) {
 80080bc:	217e      	movs	r1, #126	; 0x7e
 80080be:	187b      	adds	r3, r7, r1
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	003a      	movs	r2, r7
 80080c4:	5cd3      	ldrb	r3, [r2, r3]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d1f2      	bne.n	80080b0 <send_alarm_packet_via_sms+0x12c>
		}
		temMsg[tempCt] = 26;
 80080ca:	187b      	adds	r3, r7, r1
 80080cc:	781b      	ldrb	r3, [r3, #0]
 80080ce:	003a      	movs	r2, r7
 80080d0:	211a      	movs	r1, #26
 80080d2:	54d1      	strb	r1, [r2, r3]
		send_command(temMsg, 12005, 7, 0, 0);
 80080d4:	490e      	ldr	r1, [pc, #56]	; (8008110 <send_alarm_packet_via_sms+0x18c>)
 80080d6:	0038      	movs	r0, r7
 80080d8:	2300      	movs	r3, #0
 80080da:	9300      	str	r3, [sp, #0]
 80080dc:	2300      	movs	r3, #0
 80080de:	2207      	movs	r2, #7
 80080e0:	f7fe fc94 	bl	8006a0c <send_command>
	}
}
 80080e4:	46c0      	nop			; (mov r8, r8)
 80080e6:	46bd      	mov	sp, r7
 80080e8:	b020      	add	sp, #128	; 0x80
 80080ea:	bdb0      	pop	{r4, r5, r7, pc}
 80080ec:	20000780 	.word	0x20000780
 80080f0:	080136a8 	.word	0x080136a8
 80080f4:	20000008 	.word	0x20000008
 80080f8:	080136b4 	.word	0x080136b4
 80080fc:	2000002c 	.word	0x2000002c
 8008100:	20000777 	.word	0x20000777
 8008104:	20000779 	.word	0x20000779
 8008108:	20000778 	.word	0x20000778
 800810c:	080136c4 	.word	0x080136c4
 8008110:	00002ee5 	.word	0x00002ee5

08008114 <send_location_packet_via_sms>:

void send_location_packet_via_sms(){
 8008114:	b5b0      	push	{r4, r5, r7, lr}
 8008116:	4c9e      	ldr	r4, [pc, #632]	; (8008390 <send_location_packet_via_sms+0x27c>)
 8008118:	44a5      	add	sp, r4
 800811a:	af02      	add	r7, sp, #8
	if(isSMSActive==1){
 800811c:	4b9d      	ldr	r3, [pc, #628]	; (8008394 <send_location_packet_via_sms+0x280>)
 800811e:	781b      	ldrb	r3, [r3, #0]
 8008120:	2b01      	cmp	r3, #1
 8008122:	d000      	beq.n	8008126 <send_location_packet_via_sms+0x12>
 8008124:	e12e      	b.n	8008384 <send_location_packet_via_sms+0x270>
		msgCounter = 0;
 8008126:	4b9c      	ldr	r3, [pc, #624]	; (8008398 <send_location_packet_via_sms+0x284>)
 8008128:	2200      	movs	r2, #0
 800812a:	701a      	strb	r2, [r3, #0]
		uint8_t dataSize = 0;
 800812c:	499b      	ldr	r1, [pc, #620]	; (800839c <send_location_packet_via_sms+0x288>)
 800812e:	187b      	adds	r3, r7, r1
 8008130:	2200      	movs	r2, #0
 8008132:	701a      	strb	r2, [r3, #0]
		dataSize = checkdatasize();
 8008134:	187c      	adds	r4, r7, r1
 8008136:	f7ff f975 	bl	8007424 <checkdatasize>
 800813a:	0003      	movs	r3, r0
 800813c:	7023      	strb	r3, [r4, #0]
		while (dataSize == 1 && msgCounter < msgCount) {
 800813e:	e115      	b.n	800836c <send_location_packet_via_sms+0x258>
			stats = 6;
 8008140:	4b97      	ldr	r3, [pc, #604]	; (80083a0 <send_location_packet_via_sms+0x28c>)
 8008142:	2206      	movs	r2, #6
 8008144:	701a      	strb	r2, [r3, #0]
			uint8_t loopCount = 0;
 8008146:	4b97      	ldr	r3, [pc, #604]	; (80083a4 <send_location_packet_via_sms+0x290>)
 8008148:	18fb      	adds	r3, r7, r3
 800814a:	2200      	movs	r2, #0
 800814c:	701a      	strb	r2, [r3, #0]
			memset(bunchdata, 0, sizeof(bunchdata));
 800814e:	23a8      	movs	r3, #168	; 0xa8
 8008150:	009a      	lsls	r2, r3, #2
 8008152:	4b95      	ldr	r3, [pc, #596]	; (80083a8 <send_location_packet_via_sms+0x294>)
 8008154:	2100      	movs	r1, #0
 8008156:	0018      	movs	r0, r3
 8008158:	f006 ff55 	bl	800f006 <memset>
			//printf("--Sending AT+CREG?-- \n");
			send_command("AT+CREG?\r\n", 3, 3, 3, 1);
 800815c:	4893      	ldr	r0, [pc, #588]	; (80083ac <send_location_packet_via_sms+0x298>)
 800815e:	2301      	movs	r3, #1
 8008160:	9300      	str	r3, [sp, #0]
 8008162:	2303      	movs	r3, #3
 8008164:	2203      	movs	r2, #3
 8008166:	2103      	movs	r1, #3
 8008168:	f7fe fc50 	bl	8006a0c <send_command>
			if (isReg == 1) {
 800816c:	4b90      	ldr	r3, [pc, #576]	; (80083b0 <send_location_packet_via_sms+0x29c>)
 800816e:	781b      	ldrb	r3, [r3, #0]
 8008170:	2b01      	cmp	r3, #1
 8008172:	d000      	beq.n	8008176 <send_location_packet_via_sms+0x62>
 8008174:	e105      	b.n	8008382 <send_location_packet_via_sms+0x26e>
				while (read_data_packet() == 1 && loopCount < smsBunch) {
 8008176:	e023      	b.n	80081c0 <send_location_packet_via_sms+0xac>
					//printf("readed the data \n");
					for (uint8_t i = 0; i < 18; i++) {
 8008178:	4b8e      	ldr	r3, [pc, #568]	; (80083b4 <send_location_packet_via_sms+0x2a0>)
 800817a:	18fb      	adds	r3, r7, r3
 800817c:	2200      	movs	r2, #0
 800817e:	701a      	strb	r2, [r3, #0]
 8008180:	e013      	b.n	80081aa <send_location_packet_via_sms+0x96>
						bunchdata[loopCount][i] = readPacket[i];
 8008182:	4c8c      	ldr	r4, [pc, #560]	; (80083b4 <send_location_packet_via_sms+0x2a0>)
 8008184:	193b      	adds	r3, r7, r4
 8008186:	7819      	ldrb	r1, [r3, #0]
 8008188:	4b86      	ldr	r3, [pc, #536]	; (80083a4 <send_location_packet_via_sms+0x290>)
 800818a:	18fb      	adds	r3, r7, r3
 800818c:	781a      	ldrb	r2, [r3, #0]
 800818e:	193b      	adds	r3, r7, r4
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	4889      	ldr	r0, [pc, #548]	; (80083b8 <send_location_packet_via_sms+0x2a4>)
 8008194:	5c40      	ldrb	r0, [r0, r1]
 8008196:	4984      	ldr	r1, [pc, #528]	; (80083a8 <send_location_packet_via_sms+0x294>)
 8008198:	0152      	lsls	r2, r2, #5
 800819a:	188a      	adds	r2, r1, r2
 800819c:	1c01      	adds	r1, r0, #0
 800819e:	54d1      	strb	r1, [r2, r3]
					for (uint8_t i = 0; i < 18; i++) {
 80081a0:	193b      	adds	r3, r7, r4
 80081a2:	781a      	ldrb	r2, [r3, #0]
 80081a4:	193b      	adds	r3, r7, r4
 80081a6:	3201      	adds	r2, #1
 80081a8:	701a      	strb	r2, [r3, #0]
 80081aa:	4b82      	ldr	r3, [pc, #520]	; (80083b4 <send_location_packet_via_sms+0x2a0>)
 80081ac:	18fb      	adds	r3, r7, r3
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	2b11      	cmp	r3, #17
 80081b2:	d9e6      	bls.n	8008182 <send_location_packet_via_sms+0x6e>
					}
					loopCount++;
 80081b4:	497b      	ldr	r1, [pc, #492]	; (80083a4 <send_location_packet_via_sms+0x290>)
 80081b6:	187b      	adds	r3, r7, r1
 80081b8:	781a      	ldrb	r2, [r3, #0]
 80081ba:	187b      	adds	r3, r7, r1
 80081bc:	3201      	adds	r2, #1
 80081be:	701a      	strb	r2, [r3, #0]
				while (read_data_packet() == 1 && loopCount < smsBunch) {
 80081c0:	f7ff fa02 	bl	80075c8 <read_data_packet>
 80081c4:	0003      	movs	r3, r0
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d104      	bne.n	80081d4 <send_location_packet_via_sms+0xc0>
 80081ca:	4b76      	ldr	r3, [pc, #472]	; (80083a4 <send_location_packet_via_sms+0x290>)
 80081cc:	18fb      	adds	r3, r7, r3
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	2b09      	cmp	r3, #9
 80081d2:	d9d1      	bls.n	8008178 <send_location_packet_via_sms+0x64>
				}
				char temMsg[1000];
				int n = 21;
 80081d4:	2315      	movs	r3, #21
 80081d6:	22fc      	movs	r2, #252	; 0xfc
 80081d8:	0092      	lsls	r2, r2, #2
 80081da:	18ba      	adds	r2, r7, r2
 80081dc:	6013      	str	r3, [r2, #0]
				int tempCt = 0;
 80081de:	2300      	movs	r3, #0
 80081e0:	22fb      	movs	r2, #251	; 0xfb
 80081e2:	0092      	lsls	r2, r2, #2
 80081e4:	18ba      	adds	r2, r7, r2
 80081e6:	6013      	str	r3, [r2, #0]
				memset(temMsg, 0, sizeof(temMsg));
 80081e8:	23fa      	movs	r3, #250	; 0xfa
 80081ea:	009a      	lsls	r2, r3, #2
 80081ec:	003b      	movs	r3, r7
 80081ee:	2100      	movs	r1, #0
 80081f0:	0018      	movs	r0, r3
 80081f2:	f006 ff08 	bl	800f006 <memset>
				strcat(temMsg,"AT+CMGS=\"");
 80081f6:	003b      	movs	r3, r7
 80081f8:	0018      	movs	r0, r3
 80081fa:	f7f7 ff8b 	bl	8000114 <strlen>
 80081fe:	0003      	movs	r3, r0
 8008200:	001a      	movs	r2, r3
 8008202:	003b      	movs	r3, r7
 8008204:	189a      	adds	r2, r3, r2
 8008206:	4b6d      	ldr	r3, [pc, #436]	; (80083bc <send_location_packet_via_sms+0x2a8>)
 8008208:	0010      	movs	r0, r2
 800820a:	0019      	movs	r1, r3
 800820c:	230a      	movs	r3, #10
 800820e:	001a      	movs	r2, r3
 8008210:	f006 fef0 	bl	800eff4 <memcpy>
				strcat(temMsg,validSender);
 8008214:	4a6a      	ldr	r2, [pc, #424]	; (80083c0 <send_location_packet_via_sms+0x2ac>)
 8008216:	003b      	movs	r3, r7
 8008218:	0011      	movs	r1, r2
 800821a:	0018      	movs	r0, r3
 800821c:	f006 ff1c 	bl	800f058 <strcat>
				strcat(temMsg,"\"\r");
 8008220:	003b      	movs	r3, r7
 8008222:	0018      	movs	r0, r3
 8008224:	f7f7 ff76 	bl	8000114 <strlen>
 8008228:	0003      	movs	r3, r0
 800822a:	001a      	movs	r2, r3
 800822c:	003b      	movs	r3, r7
 800822e:	189a      	adds	r2, r3, r2
 8008230:	4b64      	ldr	r3, [pc, #400]	; (80083c4 <send_location_packet_via_sms+0x2b0>)
 8008232:	0010      	movs	r0, r2
 8008234:	0019      	movs	r1, r3
 8008236:	2303      	movs	r3, #3
 8008238:	001a      	movs	r2, r3
 800823a:	f006 fedb 	bl	800eff4 <memcpy>
	//			strcat(temMsg, "AT+CMGS=\"3322336979\"\r");
				// todo send 21 msg packet
				for (uint8_t i = 0; i < loopCount; i++) {
 800823e:	4b62      	ldr	r3, [pc, #392]	; (80083c8 <send_location_packet_via_sms+0x2b4>)
 8008240:	18fb      	adds	r3, r7, r3
 8008242:	2200      	movs	r2, #0
 8008244:	701a      	strb	r2, [r3, #0]
 8008246:	e053      	b.n	80082f0 <send_location_packet_via_sms+0x1dc>
					for (uint8_t y = 0; y < 18; y++) {
 8008248:	4b60      	ldr	r3, [pc, #384]	; (80083cc <send_location_packet_via_sms+0x2b8>)
 800824a:	18fb      	adds	r3, r7, r3
 800824c:	2200      	movs	r2, #0
 800824e:	701a      	strb	r2, [r3, #0]
 8008250:	e01f      	b.n	8008292 <send_location_packet_via_sms+0x17e>
						n += sprintf(&temMsg[n], "%d", bunchdata[i][y]);
 8008252:	003a      	movs	r2, r7
 8008254:	24fc      	movs	r4, #252	; 0xfc
 8008256:	00a4      	lsls	r4, r4, #2
 8008258:	193b      	adds	r3, r7, r4
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	18d0      	adds	r0, r2, r3
 800825e:	4b5a      	ldr	r3, [pc, #360]	; (80083c8 <send_location_packet_via_sms+0x2b4>)
 8008260:	18fb      	adds	r3, r7, r3
 8008262:	781a      	ldrb	r2, [r3, #0]
 8008264:	4d59      	ldr	r5, [pc, #356]	; (80083cc <send_location_packet_via_sms+0x2b8>)
 8008266:	197b      	adds	r3, r7, r5
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	494f      	ldr	r1, [pc, #316]	; (80083a8 <send_location_packet_via_sms+0x294>)
 800826c:	0152      	lsls	r2, r2, #5
 800826e:	188a      	adds	r2, r1, r2
 8008270:	5cd3      	ldrb	r3, [r2, r3]
 8008272:	001a      	movs	r2, r3
 8008274:	4b56      	ldr	r3, [pc, #344]	; (80083d0 <send_location_packet_via_sms+0x2bc>)
 8008276:	0019      	movs	r1, r3
 8008278:	f006 fece 	bl	800f018 <siprintf>
 800827c:	0002      	movs	r2, r0
 800827e:	193b      	adds	r3, r7, r4
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	189b      	adds	r3, r3, r2
 8008284:	193a      	adds	r2, r7, r4
 8008286:	6013      	str	r3, [r2, #0]
					for (uint8_t y = 0; y < 18; y++) {
 8008288:	197b      	adds	r3, r7, r5
 800828a:	781a      	ldrb	r2, [r3, #0]
 800828c:	197b      	adds	r3, r7, r5
 800828e:	3201      	adds	r2, #1
 8008290:	701a      	strb	r2, [r3, #0]
 8008292:	4b4e      	ldr	r3, [pc, #312]	; (80083cc <send_location_packet_via_sms+0x2b8>)
 8008294:	18fb      	adds	r3, r7, r3
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	2b11      	cmp	r3, #17
 800829a:	d9da      	bls.n	8008252 <send_location_packet_via_sms+0x13e>
					}
					while (temMsg[tempCt] != NULL) {
 800829c:	e006      	b.n	80082ac <send_location_packet_via_sms+0x198>
						tempCt++;
 800829e:	22fb      	movs	r2, #251	; 0xfb
 80082a0:	0092      	lsls	r2, r2, #2
 80082a2:	18bb      	adds	r3, r7, r2
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	3301      	adds	r3, #1
 80082a8:	18ba      	adds	r2, r7, r2
 80082aa:	6013      	str	r3, [r2, #0]
					while (temMsg[tempCt] != NULL) {
 80082ac:	4b49      	ldr	r3, [pc, #292]	; (80083d4 <send_location_packet_via_sms+0x2c0>)
 80082ae:	21fe      	movs	r1, #254	; 0xfe
 80082b0:	0089      	lsls	r1, r1, #2
 80082b2:	185b      	adds	r3, r3, r1
 80082b4:	19da      	adds	r2, r3, r7
 80082b6:	20fb      	movs	r0, #251	; 0xfb
 80082b8:	0080      	lsls	r0, r0, #2
 80082ba:	183b      	adds	r3, r7, r0
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	18d3      	adds	r3, r2, r3
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d1eb      	bne.n	800829e <send_location_packet_via_sms+0x18a>
					}
					temMsg[tempCt] = ',';
 80082c6:	4b43      	ldr	r3, [pc, #268]	; (80083d4 <send_location_packet_via_sms+0x2c0>)
 80082c8:	185b      	adds	r3, r3, r1
 80082ca:	19da      	adds	r2, r3, r7
 80082cc:	183b      	adds	r3, r7, r0
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	18d3      	adds	r3, r2, r3
 80082d2:	222c      	movs	r2, #44	; 0x2c
 80082d4:	701a      	strb	r2, [r3, #0]
					n++;
 80082d6:	22fc      	movs	r2, #252	; 0xfc
 80082d8:	0092      	lsls	r2, r2, #2
 80082da:	18bb      	adds	r3, r7, r2
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	3301      	adds	r3, #1
 80082e0:	18ba      	adds	r2, r7, r2
 80082e2:	6013      	str	r3, [r2, #0]
				for (uint8_t i = 0; i < loopCount; i++) {
 80082e4:	4938      	ldr	r1, [pc, #224]	; (80083c8 <send_location_packet_via_sms+0x2b4>)
 80082e6:	187b      	adds	r3, r7, r1
 80082e8:	781a      	ldrb	r2, [r3, #0]
 80082ea:	187b      	adds	r3, r7, r1
 80082ec:	3201      	adds	r2, #1
 80082ee:	701a      	strb	r2, [r3, #0]
 80082f0:	4b35      	ldr	r3, [pc, #212]	; (80083c8 <send_location_packet_via_sms+0x2b4>)
 80082f2:	18fa      	adds	r2, r7, r3
 80082f4:	4b2b      	ldr	r3, [pc, #172]	; (80083a4 <send_location_packet_via_sms+0x290>)
 80082f6:	18fb      	adds	r3, r7, r3
 80082f8:	7812      	ldrb	r2, [r2, #0]
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d3a3      	bcc.n	8008248 <send_location_packet_via_sms+0x134>
				}
				tempCt = 0;
 8008300:	2300      	movs	r3, #0
 8008302:	22fb      	movs	r2, #251	; 0xfb
 8008304:	0092      	lsls	r2, r2, #2
 8008306:	18ba      	adds	r2, r7, r2
 8008308:	6013      	str	r3, [r2, #0]
				while (temMsg[tempCt] != NULL) {
 800830a:	e006      	b.n	800831a <send_location_packet_via_sms+0x206>
					tempCt++;
 800830c:	22fb      	movs	r2, #251	; 0xfb
 800830e:	0092      	lsls	r2, r2, #2
 8008310:	18bb      	adds	r3, r7, r2
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	3301      	adds	r3, #1
 8008316:	18ba      	adds	r2, r7, r2
 8008318:	6013      	str	r3, [r2, #0]
				while (temMsg[tempCt] != NULL) {
 800831a:	4b2e      	ldr	r3, [pc, #184]	; (80083d4 <send_location_packet_via_sms+0x2c0>)
 800831c:	21fe      	movs	r1, #254	; 0xfe
 800831e:	0089      	lsls	r1, r1, #2
 8008320:	185b      	adds	r3, r3, r1
 8008322:	19da      	adds	r2, r3, r7
 8008324:	20fb      	movs	r0, #251	; 0xfb
 8008326:	0080      	lsls	r0, r0, #2
 8008328:	183b      	adds	r3, r7, r0
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	18d3      	adds	r3, r2, r3
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d1eb      	bne.n	800830c <send_location_packet_via_sms+0x1f8>
				}
				temMsg[tempCt] = 26;
 8008334:	4b27      	ldr	r3, [pc, #156]	; (80083d4 <send_location_packet_via_sms+0x2c0>)
 8008336:	185b      	adds	r3, r3, r1
 8008338:	19da      	adds	r2, r3, r7
 800833a:	183b      	adds	r3, r7, r0
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	18d3      	adds	r3, r2, r3
 8008340:	221a      	movs	r2, #26
 8008342:	701a      	strb	r2, [r3, #0]
				send_command(temMsg, 12005, 7, 0, 0);
 8008344:	4924      	ldr	r1, [pc, #144]	; (80083d8 <send_location_packet_via_sms+0x2c4>)
 8008346:	0038      	movs	r0, r7
 8008348:	2300      	movs	r3, #0
 800834a:	9300      	str	r3, [sp, #0]
 800834c:	2300      	movs	r3, #0
 800834e:	2207      	movs	r2, #7
 8008350:	f7fe fb5c 	bl	8006a0c <send_command>
				dataSize = checkdatasize();
 8008354:	4b11      	ldr	r3, [pc, #68]	; (800839c <send_location_packet_via_sms+0x288>)
 8008356:	18fc      	adds	r4, r7, r3
 8008358:	f7ff f864 	bl	8007424 <checkdatasize>
 800835c:	0003      	movs	r3, r0
 800835e:	7023      	strb	r3, [r4, #0]
				msgCounter++;
 8008360:	4b0d      	ldr	r3, [pc, #52]	; (8008398 <send_location_packet_via_sms+0x284>)
 8008362:	781b      	ldrb	r3, [r3, #0]
 8008364:	3301      	adds	r3, #1
 8008366:	b2da      	uxtb	r2, r3
 8008368:	4b0b      	ldr	r3, [pc, #44]	; (8008398 <send_location_packet_via_sms+0x284>)
 800836a:	701a      	strb	r2, [r3, #0]
		while (dataSize == 1 && msgCounter < msgCount) {
 800836c:	4b0b      	ldr	r3, [pc, #44]	; (800839c <send_location_packet_via_sms+0x288>)
 800836e:	18fb      	adds	r3, r7, r3
 8008370:	781b      	ldrb	r3, [r3, #0]
 8008372:	2b01      	cmp	r3, #1
 8008374:	d106      	bne.n	8008384 <send_location_packet_via_sms+0x270>
 8008376:	4b08      	ldr	r3, [pc, #32]	; (8008398 <send_location_packet_via_sms+0x284>)
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	2b09      	cmp	r3, #9
 800837c:	d800      	bhi.n	8008380 <send_location_packet_via_sms+0x26c>
 800837e:	e6df      	b.n	8008140 <send_location_packet_via_sms+0x2c>
			} else {
				break;
			}
		}
	}
}
 8008380:	e000      	b.n	8008384 <send_location_packet_via_sms+0x270>
				break;
 8008382:	46c0      	nop			; (mov r8, r8)
}
 8008384:	46c0      	nop			; (mov r8, r8)
 8008386:	46bd      	mov	sp, r7
 8008388:	23fe      	movs	r3, #254	; 0xfe
 800838a:	009b      	lsls	r3, r3, #2
 800838c:	449d      	add	sp, r3
 800838e:	bdb0      	pop	{r4, r5, r7, pc}
 8008390:	fffffc00 	.word	0xfffffc00
 8008394:	20000780 	.word	0x20000780
 8008398:	20000788 	.word	0x20000788
 800839c:	000003f7 	.word	0x000003f7
 80083a0:	20000d6c 	.word	0x20000d6c
 80083a4:	000003f6 	.word	0x000003f6
 80083a8:	20000ac0 	.word	0x20000ac0
 80083ac:	080134b0 	.word	0x080134b0
 80083b0:	20000a79 	.word	0x20000a79
 80083b4:	000003f5 	.word	0x000003f5
 80083b8:	20000aa0 	.word	0x20000aa0
 80083bc:	080136a8 	.word	0x080136a8
 80083c0:	20000008 	.word	0x20000008
 80083c4:	080136b4 	.word	0x080136b4
 80083c8:	000003eb 	.word	0x000003eb
 80083cc:	000003ea 	.word	0x000003ea
 80083d0:	080136c4 	.word	0x080136c4
 80083d4:	fffffc08 	.word	0xfffffc08
 80083d8:	00002ee5 	.word	0x00002ee5

080083dc <int2string>:
char* int2string(int num, char *str) {
 80083dc:	b580      	push	{r7, lr}
 80083de:	b082      	sub	sp, #8
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	6039      	str	r1, [r7, #0]
	if (str == NULL) {
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d101      	bne.n	80083f0 <int2string+0x14>
		return NULL;
 80083ec:	2300      	movs	r3, #0
 80083ee:	e006      	b.n	80083fe <int2string+0x22>
	}
	sprintf(str, "%d", num);
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	4905      	ldr	r1, [pc, #20]	; (8008408 <int2string+0x2c>)
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	0018      	movs	r0, r3
 80083f8:	f006 fe0e 	bl	800f018 <siprintf>
	return str;
 80083fc:	683b      	ldr	r3, [r7, #0]
}
 80083fe:	0018      	movs	r0, r3
 8008400:	46bd      	mov	sp, r7
 8008402:	b002      	add	sp, #8
 8008404:	bd80      	pop	{r7, pc}
 8008406:	46c0      	nop			; (mov r8, r8)
 8008408:	080136c4 	.word	0x080136c4

0800840c <check_command_SERVER>:

void check_command_SERVER(char* command){
 800840c:	b590      	push	{r4, r7, lr}
 800840e:	b085      	sub	sp, #20
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
		    //check for data integrity by counting commas.
		    //there must be 2 commas in total.
		    uint8_t commaPosition[2]={0,0};
 8008414:	2308      	movs	r3, #8
 8008416:	18fb      	adds	r3, r7, r3
 8008418:	2200      	movs	r2, #0
 800841a:	801a      	strh	r2, [r3, #0]
		    uint8_t totalCommas=0;
 800841c:	230f      	movs	r3, #15
 800841e:	18fb      	adds	r3, r7, r3
 8008420:	2200      	movs	r2, #0
 8008422:	701a      	strb	r2, [r3, #0]
		    for (uint8_t a=0;a<MAX_COMMAND_LEN;a++){
 8008424:	230e      	movs	r3, #14
 8008426:	18fb      	adds	r3, r7, r3
 8008428:	2200      	movs	r2, #0
 800842a:	701a      	strb	r2, [r3, #0]
 800842c:	e01f      	b.n	800846e <check_command_SERVER+0x62>
		        if(command[a]==','){
 800842e:	210e      	movs	r1, #14
 8008430:	187b      	adds	r3, r7, r1
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	18d3      	adds	r3, r2, r3
 8008438:	781b      	ldrb	r3, [r3, #0]
 800843a:	2b2c      	cmp	r3, #44	; 0x2c
 800843c:	d111      	bne.n	8008462 <check_command_SERVER+0x56>
		            if(totalCommas<2){
 800843e:	220f      	movs	r2, #15
 8008440:	18bb      	adds	r3, r7, r2
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	2b01      	cmp	r3, #1
 8008446:	d806      	bhi.n	8008456 <check_command_SERVER+0x4a>
		                commaPosition[totalCommas]=a;
 8008448:	18bb      	adds	r3, r7, r2
 800844a:	781b      	ldrb	r3, [r3, #0]
 800844c:	2208      	movs	r2, #8
 800844e:	18ba      	adds	r2, r7, r2
 8008450:	1879      	adds	r1, r7, r1
 8008452:	7809      	ldrb	r1, [r1, #0]
 8008454:	54d1      	strb	r1, [r2, r3]
		            }
		            totalCommas++;
 8008456:	210f      	movs	r1, #15
 8008458:	187b      	adds	r3, r7, r1
 800845a:	781a      	ldrb	r2, [r3, #0]
 800845c:	187b      	adds	r3, r7, r1
 800845e:	3201      	adds	r2, #1
 8008460:	701a      	strb	r2, [r3, #0]
		    for (uint8_t a=0;a<MAX_COMMAND_LEN;a++){
 8008462:	210e      	movs	r1, #14
 8008464:	187b      	adds	r3, r7, r1
 8008466:	781a      	ldrb	r2, [r3, #0]
 8008468:	187b      	adds	r3, r7, r1
 800846a:	3201      	adds	r2, #1
 800846c:	701a      	strb	r2, [r3, #0]
 800846e:	230e      	movs	r3, #14
 8008470:	18fb      	adds	r3, r7, r3
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	2b31      	cmp	r3, #49	; 0x31
 8008476:	d9da      	bls.n	800842e <check_command_SERVER+0x22>
		        }
		    }
		    if(totalCommas ==2 && commaPosition[0] == 6 ){
 8008478:	230f      	movs	r3, #15
 800847a:	18fb      	adds	r3, r7, r3
 800847c:	781b      	ldrb	r3, [r3, #0]
 800847e:	2b02      	cmp	r3, #2
 8008480:	d162      	bne.n	8008548 <check_command_SERVER+0x13c>
 8008482:	2408      	movs	r4, #8
 8008484:	193b      	adds	r3, r7, r4
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	2b06      	cmp	r3, #6
 800848a:	d15d      	bne.n	8008548 <check_command_SERVER+0x13c>
		        //two commas found, and first one is on 6th index.
		        //data is good.
		    	memset(portAdd,0,sizeof(portAdd));
 800848c:	4b30      	ldr	r3, [pc, #192]	; (8008550 <check_command_SERVER+0x144>)
 800848e:	2206      	movs	r2, #6
 8008490:	2100      	movs	r1, #0
 8008492:	0018      	movs	r0, r3
 8008494:	f006 fdb7 	bl	800f006 <memset>
		    	memset(domainAdd,0,sizeof(domainAdd));
 8008498:	4b2e      	ldr	r3, [pc, #184]	; (8008554 <check_command_SERVER+0x148>)
 800849a:	2233      	movs	r2, #51	; 0x33
 800849c:	2100      	movs	r1, #0
 800849e:	0018      	movs	r0, r3
 80084a0:	f006 fdb1 	bl	800f006 <memset>

		        //extract dns
	            for(uint8_t a=commaPosition[0]+1;a<commaPosition[1];a++){
 80084a4:	193b      	adds	r3, r7, r4
 80084a6:	781a      	ldrb	r2, [r3, #0]
 80084a8:	230d      	movs	r3, #13
 80084aa:	18fb      	adds	r3, r7, r3
 80084ac:	3201      	adds	r2, #1
 80084ae:	701a      	strb	r2, [r3, #0]
 80084b0:	e013      	b.n	80084da <check_command_SERVER+0xce>
	                    domainAdd[a-(commaPosition[0]+1)]=command[a];
 80084b2:	200d      	movs	r0, #13
 80084b4:	183b      	adds	r3, r7, r0
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	687a      	ldr	r2, [r7, #4]
 80084ba:	18d2      	adds	r2, r2, r3
 80084bc:	183b      	adds	r3, r7, r0
 80084be:	7819      	ldrb	r1, [r3, #0]
 80084c0:	2308      	movs	r3, #8
 80084c2:	18fb      	adds	r3, r7, r3
 80084c4:	781b      	ldrb	r3, [r3, #0]
 80084c6:	3301      	adds	r3, #1
 80084c8:	1acb      	subs	r3, r1, r3
 80084ca:	7811      	ldrb	r1, [r2, #0]
 80084cc:	4a21      	ldr	r2, [pc, #132]	; (8008554 <check_command_SERVER+0x148>)
 80084ce:	54d1      	strb	r1, [r2, r3]
	            for(uint8_t a=commaPosition[0]+1;a<commaPosition[1];a++){
 80084d0:	183b      	adds	r3, r7, r0
 80084d2:	781a      	ldrb	r2, [r3, #0]
 80084d4:	183b      	adds	r3, r7, r0
 80084d6:	3201      	adds	r2, #1
 80084d8:	701a      	strb	r2, [r3, #0]
 80084da:	2108      	movs	r1, #8
 80084dc:	187b      	adds	r3, r7, r1
 80084de:	785b      	ldrb	r3, [r3, #1]
 80084e0:	220d      	movs	r2, #13
 80084e2:	18ba      	adds	r2, r7, r2
 80084e4:	7812      	ldrb	r2, [r2, #0]
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d3e3      	bcc.n	80084b2 <check_command_SERVER+0xa6>
	                }
	            //extract port
	    	    for(uint8_t a=commaPosition[1]+1;a<commaPosition[1]+7;a++){
 80084ea:	187b      	adds	r3, r7, r1
 80084ec:	785a      	ldrb	r2, [r3, #1]
 80084ee:	230c      	movs	r3, #12
 80084f0:	18fb      	adds	r3, r7, r3
 80084f2:	3201      	adds	r2, #1
 80084f4:	701a      	strb	r2, [r3, #0]
 80084f6:	e01b      	b.n	8008530 <check_command_SERVER+0x124>
	    	        if(command[a]!=NULL){
 80084f8:	210c      	movs	r1, #12
 80084fa:	187b      	adds	r3, r7, r1
 80084fc:	781b      	ldrb	r3, [r3, #0]
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	18d3      	adds	r3, r2, r3
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d00d      	beq.n	8008524 <check_command_SERVER+0x118>
	    	            portAdd[a-(commaPosition[1]+1)] = command[a];
 8008508:	187b      	adds	r3, r7, r1
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	18d2      	adds	r2, r2, r3
 8008510:	187b      	adds	r3, r7, r1
 8008512:	7819      	ldrb	r1, [r3, #0]
 8008514:	2308      	movs	r3, #8
 8008516:	18fb      	adds	r3, r7, r3
 8008518:	785b      	ldrb	r3, [r3, #1]
 800851a:	3301      	adds	r3, #1
 800851c:	1acb      	subs	r3, r1, r3
 800851e:	7811      	ldrb	r1, [r2, #0]
 8008520:	4a0b      	ldr	r2, [pc, #44]	; (8008550 <check_command_SERVER+0x144>)
 8008522:	54d1      	strb	r1, [r2, r3]
	    	    for(uint8_t a=commaPosition[1]+1;a<commaPosition[1]+7;a++){
 8008524:	210c      	movs	r1, #12
 8008526:	187b      	adds	r3, r7, r1
 8008528:	781a      	ldrb	r2, [r3, #0]
 800852a:	187b      	adds	r3, r7, r1
 800852c:	3201      	adds	r2, #1
 800852e:	701a      	strb	r2, [r3, #0]
 8008530:	2308      	movs	r3, #8
 8008532:	18fb      	adds	r3, r7, r3
 8008534:	785b      	ldrb	r3, [r3, #1]
 8008536:	1d9a      	adds	r2, r3, #6
 8008538:	230c      	movs	r3, #12
 800853a:	18fb      	adds	r3, r7, r3
 800853c:	781b      	ldrb	r3, [r3, #0]
 800853e:	429a      	cmp	r2, r3
 8008540:	dada      	bge.n	80084f8 <check_command_SERVER+0xec>
	    	        }
	    	    }
	    	    save_to_flash(0);
 8008542:	2000      	movs	r0, #0
 8008544:	f7fe f8d2 	bl	80066ec <save_to_flash>
	    	    //todo save to flash please.
		    }
		    else{
//		        printf("Data is bad");
		    }
}
 8008548:	46c0      	nop			; (mov r8, r8)
 800854a:	46bd      	mov	sp, r7
 800854c:	b005      	add	sp, #20
 800854e:	bd90      	pop	{r4, r7, pc}
 8008550:	20000030 	.word	0x20000030
 8008554:	20000038 	.word	0x20000038

08008558 <check_command_RELAY>:
void check_command_RELAY(char* sCommand){
 8008558:	b580      	push	{r7, lr}
 800855a:	b082      	sub	sp, #8
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
	if(sCommand[6]=='1'){
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	3306      	adds	r3, #6
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	2b31      	cmp	r3, #49	; 0x31
 8008568:	d114      	bne.n	8008594 <check_command_RELAY+0x3c>
		if(isGpsValid == 1 && gpsSpeed < 20){
 800856a:	4b15      	ldr	r3, [pc, #84]	; (80085c0 <check_command_RELAY+0x68>)
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	2b01      	cmp	r3, #1
 8008570:	d121      	bne.n	80085b6 <check_command_RELAY+0x5e>
 8008572:	4b14      	ldr	r3, [pc, #80]	; (80085c4 <check_command_RELAY+0x6c>)
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	2b13      	cmp	r3, #19
 8008578:	d81d      	bhi.n	80085b6 <check_command_RELAY+0x5e>
			//SWITCH OFF THE CAR
			HAL_GPIO_WritePin(OUTPUT_1_GPIO_Port, OUTPUT_1_Pin, 1);
 800857a:	4b13      	ldr	r3, [pc, #76]	; (80085c8 <check_command_RELAY+0x70>)
 800857c:	2201      	movs	r2, #1
 800857e:	2102      	movs	r1, #2
 8008580:	0018      	movs	r0, r3
 8008582:	f001 fef6 	bl	800a372 <HAL_GPIO_WritePin>
			relayState = 1;
 8008586:	4b11      	ldr	r3, [pc, #68]	; (80085cc <check_command_RELAY+0x74>)
 8008588:	2201      	movs	r2, #1
 800858a:	701a      	strb	r2, [r3, #0]
			save_to_flash(0);
 800858c:	2000      	movs	r0, #0
 800858e:	f7fe f8ad 	bl	80066ec <save_to_flash>
		//SWITCH ON THE CAR
		HAL_GPIO_WritePin(OUTPUT_1_GPIO_Port, OUTPUT_1_Pin, 0);
		relayState = 0;
		save_to_flash(0);
	}
}
 8008592:	e010      	b.n	80085b6 <check_command_RELAY+0x5e>
	else if(sCommand[6] == '0'){
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	3306      	adds	r3, #6
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	2b30      	cmp	r3, #48	; 0x30
 800859c:	d10b      	bne.n	80085b6 <check_command_RELAY+0x5e>
		HAL_GPIO_WritePin(OUTPUT_1_GPIO_Port, OUTPUT_1_Pin, 0);
 800859e:	4b0a      	ldr	r3, [pc, #40]	; (80085c8 <check_command_RELAY+0x70>)
 80085a0:	2200      	movs	r2, #0
 80085a2:	2102      	movs	r1, #2
 80085a4:	0018      	movs	r0, r3
 80085a6:	f001 fee4 	bl	800a372 <HAL_GPIO_WritePin>
		relayState = 0;
 80085aa:	4b08      	ldr	r3, [pc, #32]	; (80085cc <check_command_RELAY+0x74>)
 80085ac:	2200      	movs	r2, #0
 80085ae:	701a      	strb	r2, [r3, #0]
		save_to_flash(0);
 80085b0:	2000      	movs	r0, #0
 80085b2:	f7fe f89b 	bl	80066ec <save_to_flash>
}
 80085b6:	46c0      	nop			; (mov r8, r8)
 80085b8:	46bd      	mov	sp, r7
 80085ba:	b002      	add	sp, #8
 80085bc:	bd80      	pop	{r7, pc}
 80085be:	46c0      	nop			; (mov r8, r8)
 80085c0:	2000076e 	.word	0x2000076e
 80085c4:	2000076f 	.word	0x2000076f
 80085c8:	50000400 	.word	0x50000400
 80085cc:	20000770 	.word	0x20000770

080085d0 <check_command_TIMER>:
void check_command_TIMER(char* command){
 80085d0:	b590      	push	{r4, r7, lr}
 80085d2:	b089      	sub	sp, #36	; 0x24
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]

    //check for data integrity by counting commas.
    //there must be 2 commas in total.
    //t1 and t2 both must no be greater than 3 chars.

    uint8_t commaPosition[2]={0,0};
 80085d8:	230c      	movs	r3, #12
 80085da:	18fb      	adds	r3, r7, r3
 80085dc:	2200      	movs	r2, #0
 80085de:	801a      	strh	r2, [r3, #0]
    uint8_t totalCommas=0;
 80085e0:	231f      	movs	r3, #31
 80085e2:	18fb      	adds	r3, r7, r3
 80085e4:	2200      	movs	r2, #0
 80085e6:	701a      	strb	r2, [r3, #0]
    for (uint8_t a=0;a<MAX_COMMAND_LEN;a++){
 80085e8:	231e      	movs	r3, #30
 80085ea:	18fb      	adds	r3, r7, r3
 80085ec:	2200      	movs	r2, #0
 80085ee:	701a      	strb	r2, [r3, #0]
 80085f0:	e01f      	b.n	8008632 <check_command_TIMER+0x62>
        if(command[a]==','){
 80085f2:	211e      	movs	r1, #30
 80085f4:	187b      	adds	r3, r7, r1
 80085f6:	781b      	ldrb	r3, [r3, #0]
 80085f8:	687a      	ldr	r2, [r7, #4]
 80085fa:	18d3      	adds	r3, r2, r3
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	2b2c      	cmp	r3, #44	; 0x2c
 8008600:	d111      	bne.n	8008626 <check_command_TIMER+0x56>
            if(totalCommas<2){
 8008602:	221f      	movs	r2, #31
 8008604:	18bb      	adds	r3, r7, r2
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	2b01      	cmp	r3, #1
 800860a:	d806      	bhi.n	800861a <check_command_TIMER+0x4a>
                commaPosition[totalCommas]=a;
 800860c:	18bb      	adds	r3, r7, r2
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	220c      	movs	r2, #12
 8008612:	18ba      	adds	r2, r7, r2
 8008614:	1879      	adds	r1, r7, r1
 8008616:	7809      	ldrb	r1, [r1, #0]
 8008618:	54d1      	strb	r1, [r2, r3]
            }
            totalCommas++;
 800861a:	211f      	movs	r1, #31
 800861c:	187b      	adds	r3, r7, r1
 800861e:	781a      	ldrb	r2, [r3, #0]
 8008620:	187b      	adds	r3, r7, r1
 8008622:	3201      	adds	r2, #1
 8008624:	701a      	strb	r2, [r3, #0]
    for (uint8_t a=0;a<MAX_COMMAND_LEN;a++){
 8008626:	211e      	movs	r1, #30
 8008628:	187b      	adds	r3, r7, r1
 800862a:	781a      	ldrb	r2, [r3, #0]
 800862c:	187b      	adds	r3, r7, r1
 800862e:	3201      	adds	r2, #1
 8008630:	701a      	strb	r2, [r3, #0]
 8008632:	231e      	movs	r3, #30
 8008634:	18fb      	adds	r3, r7, r3
 8008636:	781b      	ldrb	r3, [r3, #0]
 8008638:	2b31      	cmp	r3, #49	; 0x31
 800863a:	d9da      	bls.n	80085f2 <check_command_TIMER+0x22>
        }
    }
    uint8_t comaDiff = 0;
 800863c:	201b      	movs	r0, #27
 800863e:	183b      	adds	r3, r7, r0
 8008640:	2200      	movs	r2, #0
 8008642:	701a      	strb	r2, [r3, #0]
    comaDiff = commaPosition[1] - commaPosition[0];
 8008644:	240c      	movs	r4, #12
 8008646:	193b      	adds	r3, r7, r4
 8008648:	7859      	ldrb	r1, [r3, #1]
 800864a:	193b      	adds	r3, r7, r4
 800864c:	781a      	ldrb	r2, [r3, #0]
 800864e:	183b      	adds	r3, r7, r0
 8008650:	1a8a      	subs	r2, r1, r2
 8008652:	701a      	strb	r2, [r3, #0]
    if(totalCommas ==2
 8008654:	231f      	movs	r3, #31
 8008656:	18fb      	adds	r3, r7, r3
 8008658:	781b      	ldrb	r3, [r3, #0]
 800865a:	2b02      	cmp	r3, #2
 800865c:	d000      	beq.n	8008660 <check_command_TIMER+0x90>
 800865e:	e0af      	b.n	80087c0 <check_command_TIMER+0x1f0>
    && commaPosition[0] == 5
 8008660:	193b      	adds	r3, r7, r4
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	2b05      	cmp	r3, #5
 8008666:	d000      	beq.n	800866a <check_command_TIMER+0x9a>
 8008668:	e0aa      	b.n	80087c0 <check_command_TIMER+0x1f0>
    && comaDiff < 5
 800866a:	183b      	adds	r3, r7, r0
 800866c:	781b      	ldrb	r3, [r3, #0]
 800866e:	2b04      	cmp	r3, #4
 8008670:	d900      	bls.n	8008674 <check_command_TIMER+0xa4>
 8008672:	e0a5      	b.n	80087c0 <check_command_TIMER+0x1f0>
    && comaDiff > 1){
 8008674:	183b      	adds	r3, r7, r0
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	2b01      	cmp	r3, #1
 800867a:	d800      	bhi.n	800867e <check_command_TIMER+0xae>
 800867c:	e0a0      	b.n	80087c0 <check_command_TIMER+0x1f0>
        //two commas found, and first one is on 5th index.
        //t1 has 1-3 chars
        //data is good.
    	memset(t1,0,sizeof(t1));
 800867e:	2314      	movs	r3, #20
 8008680:	18fb      	adds	r3, r7, r3
 8008682:	2204      	movs	r2, #4
 8008684:	2100      	movs	r1, #0
 8008686:	0018      	movs	r0, r3
 8008688:	f006 fcbd 	bl	800f006 <memset>
    	memset(t2,0,sizeof(t2));
 800868c:	2310      	movs	r3, #16
 800868e:	18fb      	adds	r3, r7, r3
 8008690:	2204      	movs	r2, #4
 8008692:	2100      	movs	r1, #0
 8008694:	0018      	movs	r0, r3
 8008696:	f006 fcb6 	bl	800f006 <memset>

        //extract t1
        for(uint8_t a=commaPosition[0]+1;a<commaPosition[1];a++){
 800869a:	193b      	adds	r3, r7, r4
 800869c:	781a      	ldrb	r2, [r3, #0]
 800869e:	231d      	movs	r3, #29
 80086a0:	18fb      	adds	r3, r7, r3
 80086a2:	3201      	adds	r2, #1
 80086a4:	701a      	strb	r2, [r3, #0]
 80086a6:	e014      	b.n	80086d2 <check_command_TIMER+0x102>
                t1[a-(commaPosition[0]+1)]=command[a];
 80086a8:	201d      	movs	r0, #29
 80086aa:	183b      	adds	r3, r7, r0
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	18d2      	adds	r2, r2, r3
 80086b2:	183b      	adds	r3, r7, r0
 80086b4:	7819      	ldrb	r1, [r3, #0]
 80086b6:	230c      	movs	r3, #12
 80086b8:	18fb      	adds	r3, r7, r3
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	3301      	adds	r3, #1
 80086be:	1acb      	subs	r3, r1, r3
 80086c0:	7811      	ldrb	r1, [r2, #0]
 80086c2:	2214      	movs	r2, #20
 80086c4:	18ba      	adds	r2, r7, r2
 80086c6:	54d1      	strb	r1, [r2, r3]
        for(uint8_t a=commaPosition[0]+1;a<commaPosition[1];a++){
 80086c8:	183b      	adds	r3, r7, r0
 80086ca:	781a      	ldrb	r2, [r3, #0]
 80086cc:	183b      	adds	r3, r7, r0
 80086ce:	3201      	adds	r2, #1
 80086d0:	701a      	strb	r2, [r3, #0]
 80086d2:	210c      	movs	r1, #12
 80086d4:	187b      	adds	r3, r7, r1
 80086d6:	785b      	ldrb	r3, [r3, #1]
 80086d8:	221d      	movs	r2, #29
 80086da:	18ba      	adds	r2, r7, r2
 80086dc:	7812      	ldrb	r2, [r2, #0]
 80086de:	429a      	cmp	r2, r3
 80086e0:	d3e2      	bcc.n	80086a8 <check_command_TIMER+0xd8>
            }
        //extract t2
	    for(uint8_t a=commaPosition[1]+1;a<commaPosition[1]+4;a++){
 80086e2:	187b      	adds	r3, r7, r1
 80086e4:	785a      	ldrb	r2, [r3, #1]
 80086e6:	231c      	movs	r3, #28
 80086e8:	18fb      	adds	r3, r7, r3
 80086ea:	3201      	adds	r2, #1
 80086ec:	701a      	strb	r2, [r3, #0]
 80086ee:	e01b      	b.n	8008728 <check_command_TIMER+0x158>
	        if(command[a]!=NULL){
 80086f0:	201c      	movs	r0, #28
 80086f2:	183b      	adds	r3, r7, r0
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	687a      	ldr	r2, [r7, #4]
 80086f8:	18d3      	adds	r3, r2, r3
 80086fa:	781b      	ldrb	r3, [r3, #0]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d01d      	beq.n	800873c <check_command_TIMER+0x16c>
	            t2[a-(commaPosition[1]+1)] = command[a];
 8008700:	183b      	adds	r3, r7, r0
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	18d2      	adds	r2, r2, r3
 8008708:	183b      	adds	r3, r7, r0
 800870a:	7819      	ldrb	r1, [r3, #0]
 800870c:	230c      	movs	r3, #12
 800870e:	18fb      	adds	r3, r7, r3
 8008710:	785b      	ldrb	r3, [r3, #1]
 8008712:	3301      	adds	r3, #1
 8008714:	1acb      	subs	r3, r1, r3
 8008716:	7811      	ldrb	r1, [r2, #0]
 8008718:	2210      	movs	r2, #16
 800871a:	18ba      	adds	r2, r7, r2
 800871c:	54d1      	strb	r1, [r2, r3]
	    for(uint8_t a=commaPosition[1]+1;a<commaPosition[1]+4;a++){
 800871e:	183b      	adds	r3, r7, r0
 8008720:	781a      	ldrb	r2, [r3, #0]
 8008722:	183b      	adds	r3, r7, r0
 8008724:	3201      	adds	r2, #1
 8008726:	701a      	strb	r2, [r3, #0]
 8008728:	230c      	movs	r3, #12
 800872a:	18fb      	adds	r3, r7, r3
 800872c:	785b      	ldrb	r3, [r3, #1]
 800872e:	1cda      	adds	r2, r3, #3
 8008730:	231c      	movs	r3, #28
 8008732:	18fb      	adds	r3, r7, r3
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	429a      	cmp	r2, r3
 8008738:	dada      	bge.n	80086f0 <check_command_TIMER+0x120>
 800873a:	e000      	b.n	800873e <check_command_TIMER+0x16e>
	        }
	        else{
	        	break;
 800873c:	46c0      	nop			; (mov r8, r8)
	        }
	    }
	    locationDataIntervalA = atoi(t1);
 800873e:	2314      	movs	r3, #20
 8008740:	18fb      	adds	r3, r7, r3
 8008742:	0018      	movs	r0, r3
 8008744:	f006 fc00 	bl	800ef48 <atoi>
 8008748:	0003      	movs	r3, r0
 800874a:	b2da      	uxtb	r2, r3
 800874c:	4b1e      	ldr	r3, [pc, #120]	; (80087c8 <check_command_TIMER+0x1f8>)
 800874e:	701a      	strb	r2, [r3, #0]
	    locationDataIntervalB = atoi(t2);
 8008750:	2310      	movs	r3, #16
 8008752:	18fb      	adds	r3, r7, r3
 8008754:	0018      	movs	r0, r3
 8008756:	f006 fbf7 	bl	800ef48 <atoi>
 800875a:	0003      	movs	r3, r0
 800875c:	b2da      	uxtb	r2, r3
 800875e:	4b1b      	ldr	r3, [pc, #108]	; (80087cc <check_command_TIMER+0x1fc>)
 8008760:	701a      	strb	r2, [r3, #0]
	    locationDataIntervalA = locationDataIntervalA > 180 ? 180 : locationDataIntervalA;
 8008762:	4b19      	ldr	r3, [pc, #100]	; (80087c8 <check_command_TIMER+0x1f8>)
 8008764:	781b      	ldrb	r3, [r3, #0]
 8008766:	1c1a      	adds	r2, r3, #0
 8008768:	b2d3      	uxtb	r3, r2
 800876a:	2bb4      	cmp	r3, #180	; 0xb4
 800876c:	d901      	bls.n	8008772 <check_command_TIMER+0x1a2>
 800876e:	23b4      	movs	r3, #180	; 0xb4
 8008770:	1c1a      	adds	r2, r3, #0
 8008772:	b2d2      	uxtb	r2, r2
 8008774:	4b14      	ldr	r3, [pc, #80]	; (80087c8 <check_command_TIMER+0x1f8>)
 8008776:	701a      	strb	r2, [r3, #0]
	    locationDataIntervalA = locationDataIntervalA < 5 ? 5 : locationDataIntervalA;
 8008778:	4b13      	ldr	r3, [pc, #76]	; (80087c8 <check_command_TIMER+0x1f8>)
 800877a:	781b      	ldrb	r3, [r3, #0]
 800877c:	1c1a      	adds	r2, r3, #0
 800877e:	b2d3      	uxtb	r3, r2
 8008780:	2b05      	cmp	r3, #5
 8008782:	d201      	bcs.n	8008788 <check_command_TIMER+0x1b8>
 8008784:	2305      	movs	r3, #5
 8008786:	1c1a      	adds	r2, r3, #0
 8008788:	b2d2      	uxtb	r2, r2
 800878a:	4b0f      	ldr	r3, [pc, #60]	; (80087c8 <check_command_TIMER+0x1f8>)
 800878c:	701a      	strb	r2, [r3, #0]
	    locationDataIntervalB = locationDataIntervalB > 180 ? 180 : locationDataIntervalB;
 800878e:	4b0f      	ldr	r3, [pc, #60]	; (80087cc <check_command_TIMER+0x1fc>)
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	1c1a      	adds	r2, r3, #0
 8008794:	b2d3      	uxtb	r3, r2
 8008796:	2bb4      	cmp	r3, #180	; 0xb4
 8008798:	d901      	bls.n	800879e <check_command_TIMER+0x1ce>
 800879a:	23b4      	movs	r3, #180	; 0xb4
 800879c:	1c1a      	adds	r2, r3, #0
 800879e:	b2d2      	uxtb	r2, r2
 80087a0:	4b0a      	ldr	r3, [pc, #40]	; (80087cc <check_command_TIMER+0x1fc>)
 80087a2:	701a      	strb	r2, [r3, #0]
	    locationDataIntervalB = locationDataIntervalB < 5 ? 5 : locationDataIntervalB;
 80087a4:	4b09      	ldr	r3, [pc, #36]	; (80087cc <check_command_TIMER+0x1fc>)
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	1c1a      	adds	r2, r3, #0
 80087aa:	b2d3      	uxtb	r3, r2
 80087ac:	2b05      	cmp	r3, #5
 80087ae:	d201      	bcs.n	80087b4 <check_command_TIMER+0x1e4>
 80087b0:	2305      	movs	r3, #5
 80087b2:	1c1a      	adds	r2, r3, #0
 80087b4:	b2d2      	uxtb	r2, r2
 80087b6:	4b05      	ldr	r3, [pc, #20]	; (80087cc <check_command_TIMER+0x1fc>)
 80087b8:	701a      	strb	r2, [r3, #0]
	    //todo save to flash please.
	    save_to_flash(0);
 80087ba:	2000      	movs	r0, #0
 80087bc:	f7fd ff96 	bl	80066ec <save_to_flash>
    }
    else{
//		        printf("Data is bad");
    }
}
 80087c0:	46c0      	nop			; (mov r8, r8)
 80087c2:	46bd      	mov	sp, r7
 80087c4:	b009      	add	sp, #36	; 0x24
 80087c6:	bd90      	pop	{r4, r7, pc}
 80087c8:	20000004 	.word	0x20000004
 80087cc:	20000005 	.word	0x20000005

080087d0 <check_command_MSGCFG>:

void check_command_MSGCFG(char* command){
 80087d0:	b5b0      	push	{r4, r5, r7, lr}
 80087d2:	b088      	sub	sp, #32
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
    char t1[4],t2[4];
    uint8_t cfgCode = 0;
 80087d8:	231c      	movs	r3, #28
 80087da:	18fb      	adds	r3, r7, r3
 80087dc:	2200      	movs	r2, #0
 80087de:	701a      	strb	r2, [r3, #0]
    //check for data integrity by counting commas.
    //there must be 2 commas in total.
    //t1 and t2 both must not be greater than 3 chars.

    uint8_t commaPosition[2]={0,0};
 80087e0:	230c      	movs	r3, #12
 80087e2:	18fb      	adds	r3, r7, r3
 80087e4:	2200      	movs	r2, #0
 80087e6:	801a      	strh	r2, [r3, #0]
    uint8_t totalCommas=0;
 80087e8:	231f      	movs	r3, #31
 80087ea:	18fb      	adds	r3, r7, r3
 80087ec:	2200      	movs	r2, #0
 80087ee:	701a      	strb	r2, [r3, #0]
    for (uint8_t a=0;a<MAX_COMMAND_LEN;a++){
 80087f0:	231e      	movs	r3, #30
 80087f2:	18fb      	adds	r3, r7, r3
 80087f4:	2200      	movs	r2, #0
 80087f6:	701a      	strb	r2, [r3, #0]
 80087f8:	e01f      	b.n	800883a <check_command_MSGCFG+0x6a>
        if(command[a]==','){
 80087fa:	211e      	movs	r1, #30
 80087fc:	187b      	adds	r3, r7, r1
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	687a      	ldr	r2, [r7, #4]
 8008802:	18d3      	adds	r3, r2, r3
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	2b2c      	cmp	r3, #44	; 0x2c
 8008808:	d111      	bne.n	800882e <check_command_MSGCFG+0x5e>
            if(totalCommas<2){
 800880a:	221f      	movs	r2, #31
 800880c:	18bb      	adds	r3, r7, r2
 800880e:	781b      	ldrb	r3, [r3, #0]
 8008810:	2b01      	cmp	r3, #1
 8008812:	d806      	bhi.n	8008822 <check_command_MSGCFG+0x52>
                commaPosition[totalCommas]=a;
 8008814:	18bb      	adds	r3, r7, r2
 8008816:	781b      	ldrb	r3, [r3, #0]
 8008818:	220c      	movs	r2, #12
 800881a:	18ba      	adds	r2, r7, r2
 800881c:	1879      	adds	r1, r7, r1
 800881e:	7809      	ldrb	r1, [r1, #0]
 8008820:	54d1      	strb	r1, [r2, r3]
            }
            totalCommas++;
 8008822:	211f      	movs	r1, #31
 8008824:	187b      	adds	r3, r7, r1
 8008826:	781a      	ldrb	r2, [r3, #0]
 8008828:	187b      	adds	r3, r7, r1
 800882a:	3201      	adds	r2, #1
 800882c:	701a      	strb	r2, [r3, #0]
    for (uint8_t a=0;a<MAX_COMMAND_LEN;a++){
 800882e:	211e      	movs	r1, #30
 8008830:	187b      	adds	r3, r7, r1
 8008832:	781a      	ldrb	r2, [r3, #0]
 8008834:	187b      	adds	r3, r7, r1
 8008836:	3201      	adds	r2, #1
 8008838:	701a      	strb	r2, [r3, #0]
 800883a:	231e      	movs	r3, #30
 800883c:	18fb      	adds	r3, r7, r3
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	2b31      	cmp	r3, #49	; 0x31
 8008842:	d9da      	bls.n	80087fa <check_command_MSGCFG+0x2a>
        }
    }
    uint8_t comaDiff = 0;
 8008844:	201b      	movs	r0, #27
 8008846:	183b      	adds	r3, r7, r0
 8008848:	2200      	movs	r2, #0
 800884a:	701a      	strb	r2, [r3, #0]
    comaDiff = commaPosition[1] - commaPosition[0];
 800884c:	240c      	movs	r4, #12
 800884e:	193b      	adds	r3, r7, r4
 8008850:	7859      	ldrb	r1, [r3, #1]
 8008852:	193b      	adds	r3, r7, r4
 8008854:	781a      	ldrb	r2, [r3, #0]
 8008856:	183b      	adds	r3, r7, r0
 8008858:	1a8a      	subs	r2, r1, r2
 800885a:	701a      	strb	r2, [r3, #0]
    if(totalCommas ==2
 800885c:	231f      	movs	r3, #31
 800885e:	18fb      	adds	r3, r7, r3
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	2b02      	cmp	r3, #2
 8008864:	d000      	beq.n	8008868 <check_command_MSGCFG+0x98>
 8008866:	e076      	b.n	8008956 <check_command_MSGCFG+0x186>
    && commaPosition[0] == 6
 8008868:	193b      	adds	r3, r7, r4
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	2b06      	cmp	r3, #6
 800886e:	d000      	beq.n	8008872 <check_command_MSGCFG+0xa2>
 8008870:	e071      	b.n	8008956 <check_command_MSGCFG+0x186>
    && comaDiff == 2){
 8008872:	183b      	adds	r3, r7, r0
 8008874:	781b      	ldrb	r3, [r3, #0]
 8008876:	2b02      	cmp	r3, #2
 8008878:	d16d      	bne.n	8008956 <check_command_MSGCFG+0x186>
        //two commas found, and first one is on 6th index.
        //t1 has 1 char
        //data is good.
    	memset(t1,0,sizeof(t1));
 800887a:	2514      	movs	r5, #20
 800887c:	197b      	adds	r3, r7, r5
 800887e:	2204      	movs	r2, #4
 8008880:	2100      	movs	r1, #0
 8008882:	0018      	movs	r0, r3
 8008884:	f006 fbbf 	bl	800f006 <memset>
    	memset(t2,0,sizeof(t2));
 8008888:	2310      	movs	r3, #16
 800888a:	18fb      	adds	r3, r7, r3
 800888c:	2204      	movs	r2, #4
 800888e:	2100      	movs	r1, #0
 8008890:	0018      	movs	r0, r3
 8008892:	f006 fbb8 	bl	800f006 <memset>

        //extract t1
         t1[0]=command[commaPosition[0]+1];
 8008896:	0021      	movs	r1, r4
 8008898:	187b      	adds	r3, r7, r1
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	3301      	adds	r3, #1
 800889e:	687a      	ldr	r2, [r7, #4]
 80088a0:	18d3      	adds	r3, r2, r3
 80088a2:	781a      	ldrb	r2, [r3, #0]
 80088a4:	197b      	adds	r3, r7, r5
 80088a6:	701a      	strb	r2, [r3, #0]
        //extract t2
	    for(uint8_t a=commaPosition[1]+1;a<commaPosition[1]+4;a++){
 80088a8:	187b      	adds	r3, r7, r1
 80088aa:	785a      	ldrb	r2, [r3, #1]
 80088ac:	231d      	movs	r3, #29
 80088ae:	18fb      	adds	r3, r7, r3
 80088b0:	3201      	adds	r2, #1
 80088b2:	701a      	strb	r2, [r3, #0]
 80088b4:	e01b      	b.n	80088ee <check_command_MSGCFG+0x11e>
	        if(command[a]!=NULL){
 80088b6:	201d      	movs	r0, #29
 80088b8:	183b      	adds	r3, r7, r0
 80088ba:	781b      	ldrb	r3, [r3, #0]
 80088bc:	687a      	ldr	r2, [r7, #4]
 80088be:	18d3      	adds	r3, r2, r3
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d01d      	beq.n	8008902 <check_command_MSGCFG+0x132>
	            t2[a-(commaPosition[1]+1)] = command[a];
 80088c6:	183b      	adds	r3, r7, r0
 80088c8:	781b      	ldrb	r3, [r3, #0]
 80088ca:	687a      	ldr	r2, [r7, #4]
 80088cc:	18d2      	adds	r2, r2, r3
 80088ce:	183b      	adds	r3, r7, r0
 80088d0:	7819      	ldrb	r1, [r3, #0]
 80088d2:	230c      	movs	r3, #12
 80088d4:	18fb      	adds	r3, r7, r3
 80088d6:	785b      	ldrb	r3, [r3, #1]
 80088d8:	3301      	adds	r3, #1
 80088da:	1acb      	subs	r3, r1, r3
 80088dc:	7811      	ldrb	r1, [r2, #0]
 80088de:	2210      	movs	r2, #16
 80088e0:	18ba      	adds	r2, r7, r2
 80088e2:	54d1      	strb	r1, [r2, r3]
	    for(uint8_t a=commaPosition[1]+1;a<commaPosition[1]+4;a++){
 80088e4:	183b      	adds	r3, r7, r0
 80088e6:	781a      	ldrb	r2, [r3, #0]
 80088e8:	183b      	adds	r3, r7, r0
 80088ea:	3201      	adds	r2, #1
 80088ec:	701a      	strb	r2, [r3, #0]
 80088ee:	230c      	movs	r3, #12
 80088f0:	18fb      	adds	r3, r7, r3
 80088f2:	785b      	ldrb	r3, [r3, #1]
 80088f4:	1cda      	adds	r2, r3, #3
 80088f6:	231d      	movs	r3, #29
 80088f8:	18fb      	adds	r3, r7, r3
 80088fa:	781b      	ldrb	r3, [r3, #0]
 80088fc:	429a      	cmp	r2, r3
 80088fe:	dada      	bge.n	80088b6 <check_command_MSGCFG+0xe6>
 8008900:	e000      	b.n	8008904 <check_command_MSGCFG+0x134>
	        }
	        else{
	        	break;
 8008902:	46c0      	nop			; (mov r8, r8)
	        }
	    }
	    cfgCode = atoi(t1);
 8008904:	2314      	movs	r3, #20
 8008906:	18fb      	adds	r3, r7, r3
 8008908:	0018      	movs	r0, r3
 800890a:	f006 fb1d 	bl	800ef48 <atoi>
 800890e:	0002      	movs	r2, r0
 8008910:	211c      	movs	r1, #28
 8008912:	187b      	adds	r3, r7, r1
 8008914:	701a      	strb	r2, [r3, #0]
	    /*cfgCode:
	    	1 = TURN ON/OFF SENDING LOCATION PACKETS
	    */
	    if(cfgCode == 1){
 8008916:	187b      	adds	r3, r7, r1
 8008918:	781b      	ldrb	r3, [r3, #0]
 800891a:	2b01      	cmp	r3, #1
 800891c:	d118      	bne.n	8008950 <check_command_MSGCFG+0x180>
	    	uint8_t state = atoi(t2);
 800891e:	2310      	movs	r3, #16
 8008920:	18fb      	adds	r3, r7, r3
 8008922:	0018      	movs	r0, r3
 8008924:	f006 fb10 	bl	800ef48 <atoi>
 8008928:	0002      	movs	r2, r0
 800892a:	211a      	movs	r1, #26
 800892c:	187b      	adds	r3, r7, r1
 800892e:	701a      	strb	r2, [r3, #0]
	    	if(state == 0){
 8008930:	187b      	adds	r3, r7, r1
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d103      	bne.n	8008940 <check_command_MSGCFG+0x170>
	    		isSMSActive = 0;
 8008938:	4b09      	ldr	r3, [pc, #36]	; (8008960 <check_command_MSGCFG+0x190>)
 800893a:	2200      	movs	r2, #0
 800893c:	701a      	strb	r2, [r3, #0]
 800893e:	e007      	b.n	8008950 <check_command_MSGCFG+0x180>
	    	}
	    	else if(state == 1){
 8008940:	231a      	movs	r3, #26
 8008942:	18fb      	adds	r3, r7, r3
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	2b01      	cmp	r3, #1
 8008948:	d102      	bne.n	8008950 <check_command_MSGCFG+0x180>
	    		isSMSActive = 1;
 800894a:	4b05      	ldr	r3, [pc, #20]	; (8008960 <check_command_MSGCFG+0x190>)
 800894c:	2201      	movs	r2, #1
 800894e:	701a      	strb	r2, [r3, #0]
	    	}
	    }
	    save_to_flash(0);
 8008950:	2000      	movs	r0, #0
 8008952:	f7fd fecb 	bl	80066ec <save_to_flash>
    }
    else{
//		        printf("Data is bad");
    }
}
 8008956:	46c0      	nop			; (mov r8, r8)
 8008958:	46bd      	mov	sp, r7
 800895a:	b008      	add	sp, #32
 800895c:	bdb0      	pop	{r4, r5, r7, pc}
 800895e:	46c0      	nop			; (mov r8, r8)
 8008960:	20000780 	.word	0x20000780

08008964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8008968:	b672      	cpsid	i
}
 800896a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800896c:	e7fe      	b.n	800896c <Error_Handler+0x8>
	...

08008970 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b082      	sub	sp, #8
 8008974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008976:	4b0f      	ldr	r3, [pc, #60]	; (80089b4 <HAL_MspInit+0x44>)
 8008978:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800897a:	4b0e      	ldr	r3, [pc, #56]	; (80089b4 <HAL_MspInit+0x44>)
 800897c:	2101      	movs	r1, #1
 800897e:	430a      	orrs	r2, r1
 8008980:	641a      	str	r2, [r3, #64]	; 0x40
 8008982:	4b0c      	ldr	r3, [pc, #48]	; (80089b4 <HAL_MspInit+0x44>)
 8008984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008986:	2201      	movs	r2, #1
 8008988:	4013      	ands	r3, r2
 800898a:	607b      	str	r3, [r7, #4]
 800898c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800898e:	4b09      	ldr	r3, [pc, #36]	; (80089b4 <HAL_MspInit+0x44>)
 8008990:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008992:	4b08      	ldr	r3, [pc, #32]	; (80089b4 <HAL_MspInit+0x44>)
 8008994:	2180      	movs	r1, #128	; 0x80
 8008996:	0549      	lsls	r1, r1, #21
 8008998:	430a      	orrs	r2, r1
 800899a:	63da      	str	r2, [r3, #60]	; 0x3c
 800899c:	4b05      	ldr	r3, [pc, #20]	; (80089b4 <HAL_MspInit+0x44>)
 800899e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80089a0:	2380      	movs	r3, #128	; 0x80
 80089a2:	055b      	lsls	r3, r3, #21
 80089a4:	4013      	ands	r3, r2
 80089a6:	603b      	str	r3, [r7, #0]
 80089a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80089aa:	46c0      	nop			; (mov r8, r8)
 80089ac:	46bd      	mov	sp, r7
 80089ae:	b002      	add	sp, #8
 80089b0:	bd80      	pop	{r7, pc}
 80089b2:	46c0      	nop			; (mov r8, r8)
 80089b4:	40021000 	.word	0x40021000

080089b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80089b8:	b590      	push	{r4, r7, lr}
 80089ba:	b08b      	sub	sp, #44	; 0x2c
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80089c0:	2414      	movs	r4, #20
 80089c2:	193b      	adds	r3, r7, r4
 80089c4:	0018      	movs	r0, r3
 80089c6:	2314      	movs	r3, #20
 80089c8:	001a      	movs	r2, r3
 80089ca:	2100      	movs	r1, #0
 80089cc:	f006 fb1b 	bl	800f006 <memset>
  if(hspi->Instance==SPI1)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4a1f      	ldr	r2, [pc, #124]	; (8008a54 <HAL_SPI_MspInit+0x9c>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d137      	bne.n	8008a4a <HAL_SPI_MspInit+0x92>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80089da:	4b1f      	ldr	r3, [pc, #124]	; (8008a58 <HAL_SPI_MspInit+0xa0>)
 80089dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80089de:	4b1e      	ldr	r3, [pc, #120]	; (8008a58 <HAL_SPI_MspInit+0xa0>)
 80089e0:	2180      	movs	r1, #128	; 0x80
 80089e2:	0149      	lsls	r1, r1, #5
 80089e4:	430a      	orrs	r2, r1
 80089e6:	641a      	str	r2, [r3, #64]	; 0x40
 80089e8:	4b1b      	ldr	r3, [pc, #108]	; (8008a58 <HAL_SPI_MspInit+0xa0>)
 80089ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80089ec:	2380      	movs	r3, #128	; 0x80
 80089ee:	015b      	lsls	r3, r3, #5
 80089f0:	4013      	ands	r3, r2
 80089f2:	613b      	str	r3, [r7, #16]
 80089f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80089f6:	4b18      	ldr	r3, [pc, #96]	; (8008a58 <HAL_SPI_MspInit+0xa0>)
 80089f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089fa:	4b17      	ldr	r3, [pc, #92]	; (8008a58 <HAL_SPI_MspInit+0xa0>)
 80089fc:	2102      	movs	r1, #2
 80089fe:	430a      	orrs	r2, r1
 8008a00:	635a      	str	r2, [r3, #52]	; 0x34
 8008a02:	4b15      	ldr	r3, [pc, #84]	; (8008a58 <HAL_SPI_MspInit+0xa0>)
 8008a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a06:	2202      	movs	r2, #2
 8008a08:	4013      	ands	r3, r2
 8008a0a:	60fb      	str	r3, [r7, #12]
 8008a0c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8008a0e:	0021      	movs	r1, r4
 8008a10:	187b      	adds	r3, r7, r1
 8008a12:	2238      	movs	r2, #56	; 0x38
 8008a14:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a16:	187b      	adds	r3, r7, r1
 8008a18:	2202      	movs	r2, #2
 8008a1a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a1c:	187b      	adds	r3, r7, r1
 8008a1e:	2200      	movs	r2, #0
 8008a20:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a22:	187b      	adds	r3, r7, r1
 8008a24:	2200      	movs	r2, #0
 8008a26:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8008a28:	187b      	adds	r3, r7, r1
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008a2e:	187b      	adds	r3, r7, r1
 8008a30:	4a0a      	ldr	r2, [pc, #40]	; (8008a5c <HAL_SPI_MspInit+0xa4>)
 8008a32:	0019      	movs	r1, r3
 8008a34:	0010      	movs	r0, r2
 8008a36:	f001 fb1b 	bl	800a070 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 3, 0);
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	2103      	movs	r1, #3
 8008a3e:	2019      	movs	r0, #25
 8008a40:	f001 fa18 	bl	8009e74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8008a44:	2019      	movs	r0, #25
 8008a46:	f001 fa2a 	bl	8009e9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8008a4a:	46c0      	nop			; (mov r8, r8)
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	b00b      	add	sp, #44	; 0x2c
 8008a50:	bd90      	pop	{r4, r7, pc}
 8008a52:	46c0      	nop			; (mov r8, r8)
 8008a54:	40013000 	.word	0x40013000
 8008a58:	40021000 	.word	0x40021000
 8008a5c:	50000400 	.word	0x50000400

08008a60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008a60:	b590      	push	{r4, r7, lr}
 8008a62:	b08f      	sub	sp, #60	; 0x3c
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a68:	2424      	movs	r4, #36	; 0x24
 8008a6a:	193b      	adds	r3, r7, r4
 8008a6c:	0018      	movs	r0, r3
 8008a6e:	2314      	movs	r3, #20
 8008a70:	001a      	movs	r2, r3
 8008a72:	2100      	movs	r1, #0
 8008a74:	f006 fac7 	bl	800f006 <memset>
  if(htim_base->Instance==TIM3)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a62      	ldr	r2, [pc, #392]	; (8008c08 <HAL_TIM_Base_MspInit+0x1a8>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d137      	bne.n	8008af2 <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008a82:	4b62      	ldr	r3, [pc, #392]	; (8008c0c <HAL_TIM_Base_MspInit+0x1ac>)
 8008a84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a86:	4b61      	ldr	r3, [pc, #388]	; (8008c0c <HAL_TIM_Base_MspInit+0x1ac>)
 8008a88:	2102      	movs	r1, #2
 8008a8a:	430a      	orrs	r2, r1
 8008a8c:	63da      	str	r2, [r3, #60]	; 0x3c
 8008a8e:	4b5f      	ldr	r3, [pc, #380]	; (8008c0c <HAL_TIM_Base_MspInit+0x1ac>)
 8008a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a92:	2202      	movs	r2, #2
 8008a94:	4013      	ands	r3, r2
 8008a96:	623b      	str	r3, [r7, #32]
 8008a98:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a9a:	4b5c      	ldr	r3, [pc, #368]	; (8008c0c <HAL_TIM_Base_MspInit+0x1ac>)
 8008a9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a9e:	4b5b      	ldr	r3, [pc, #364]	; (8008c0c <HAL_TIM_Base_MspInit+0x1ac>)
 8008aa0:	2101      	movs	r1, #1
 8008aa2:	430a      	orrs	r2, r1
 8008aa4:	635a      	str	r2, [r3, #52]	; 0x34
 8008aa6:	4b59      	ldr	r3, [pc, #356]	; (8008c0c <HAL_TIM_Base_MspInit+0x1ac>)
 8008aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aaa:	2201      	movs	r2, #1
 8008aac:	4013      	ands	r3, r2
 8008aae:	61fb      	str	r3, [r7, #28]
 8008ab0:	69fb      	ldr	r3, [r7, #28]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = RI_Pin;
 8008ab2:	0021      	movs	r1, r4
 8008ab4:	187b      	adds	r3, r7, r1
 8008ab6:	2240      	movs	r2, #64	; 0x40
 8008ab8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008aba:	187b      	adds	r3, r7, r1
 8008abc:	2202      	movs	r2, #2
 8008abe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8008ac0:	187b      	adds	r3, r7, r1
 8008ac2:	2202      	movs	r2, #2
 8008ac4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ac6:	187b      	adds	r3, r7, r1
 8008ac8:	2200      	movs	r2, #0
 8008aca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8008acc:	187b      	adds	r3, r7, r1
 8008ace:	2201      	movs	r2, #1
 8008ad0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(RI_GPIO_Port, &GPIO_InitStruct);
 8008ad2:	187a      	adds	r2, r7, r1
 8008ad4:	23a0      	movs	r3, #160	; 0xa0
 8008ad6:	05db      	lsls	r3, r3, #23
 8008ad8:	0011      	movs	r1, r2
 8008ada:	0018      	movs	r0, r3
 8008adc:	f001 fac8 	bl	800a070 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	2103      	movs	r1, #3
 8008ae4:	2010      	movs	r0, #16
 8008ae6:	f001 f9c5 	bl	8009e74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8008aea:	2010      	movs	r0, #16
 8008aec:	f001 f9d7 	bl	8009e9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8008af0:	e086      	b.n	8008c00 <HAL_TIM_Base_MspInit+0x1a0>
  else if(htim_base->Instance==TIM6)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4a46      	ldr	r2, [pc, #280]	; (8008c10 <HAL_TIM_Base_MspInit+0x1b0>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d114      	bne.n	8008b26 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8008afc:	4b43      	ldr	r3, [pc, #268]	; (8008c0c <HAL_TIM_Base_MspInit+0x1ac>)
 8008afe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b00:	4b42      	ldr	r3, [pc, #264]	; (8008c0c <HAL_TIM_Base_MspInit+0x1ac>)
 8008b02:	2110      	movs	r1, #16
 8008b04:	430a      	orrs	r2, r1
 8008b06:	63da      	str	r2, [r3, #60]	; 0x3c
 8008b08:	4b40      	ldr	r3, [pc, #256]	; (8008c0c <HAL_TIM_Base_MspInit+0x1ac>)
 8008b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b0c:	2210      	movs	r2, #16
 8008b0e:	4013      	ands	r3, r2
 8008b10:	61bb      	str	r3, [r7, #24]
 8008b12:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_IRQn, 3, 0);
 8008b14:	2200      	movs	r2, #0
 8008b16:	2103      	movs	r1, #3
 8008b18:	2011      	movs	r0, #17
 8008b1a:	f001 f9ab 	bl	8009e74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8008b1e:	2011      	movs	r0, #17
 8008b20:	f001 f9bd 	bl	8009e9e <HAL_NVIC_EnableIRQ>
}
 8008b24:	e06c      	b.n	8008c00 <HAL_TIM_Base_MspInit+0x1a0>
  else if(htim_base->Instance==TIM7)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4a3a      	ldr	r2, [pc, #232]	; (8008c14 <HAL_TIM_Base_MspInit+0x1b4>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d114      	bne.n	8008b5a <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8008b30:	4b36      	ldr	r3, [pc, #216]	; (8008c0c <HAL_TIM_Base_MspInit+0x1ac>)
 8008b32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b34:	4b35      	ldr	r3, [pc, #212]	; (8008c0c <HAL_TIM_Base_MspInit+0x1ac>)
 8008b36:	2120      	movs	r1, #32
 8008b38:	430a      	orrs	r2, r1
 8008b3a:	63da      	str	r2, [r3, #60]	; 0x3c
 8008b3c:	4b33      	ldr	r3, [pc, #204]	; (8008c0c <HAL_TIM_Base_MspInit+0x1ac>)
 8008b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b40:	2220      	movs	r2, #32
 8008b42:	4013      	ands	r3, r2
 8008b44:	617b      	str	r3, [r7, #20]
 8008b46:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM7_IRQn, 3, 0);
 8008b48:	2200      	movs	r2, #0
 8008b4a:	2103      	movs	r1, #3
 8008b4c:	2012      	movs	r0, #18
 8008b4e:	f001 f991 	bl	8009e74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8008b52:	2012      	movs	r0, #18
 8008b54:	f001 f9a3 	bl	8009e9e <HAL_NVIC_EnableIRQ>
}
 8008b58:	e052      	b.n	8008c00 <HAL_TIM_Base_MspInit+0x1a0>
  else if(htim_base->Instance==TIM14)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	4a2e      	ldr	r2, [pc, #184]	; (8008c18 <HAL_TIM_Base_MspInit+0x1b8>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d116      	bne.n	8008b92 <HAL_TIM_Base_MspInit+0x132>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8008b64:	4b29      	ldr	r3, [pc, #164]	; (8008c0c <HAL_TIM_Base_MspInit+0x1ac>)
 8008b66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b68:	4b28      	ldr	r3, [pc, #160]	; (8008c0c <HAL_TIM_Base_MspInit+0x1ac>)
 8008b6a:	2180      	movs	r1, #128	; 0x80
 8008b6c:	0209      	lsls	r1, r1, #8
 8008b6e:	430a      	orrs	r2, r1
 8008b70:	641a      	str	r2, [r3, #64]	; 0x40
 8008b72:	4b26      	ldr	r3, [pc, #152]	; (8008c0c <HAL_TIM_Base_MspInit+0x1ac>)
 8008b74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b76:	2380      	movs	r3, #128	; 0x80
 8008b78:	021b      	lsls	r3, r3, #8
 8008b7a:	4013      	ands	r3, r2
 8008b7c:	613b      	str	r3, [r7, #16]
 8008b7e:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM14_IRQn, 2, 0);
 8008b80:	2200      	movs	r2, #0
 8008b82:	2102      	movs	r1, #2
 8008b84:	2013      	movs	r0, #19
 8008b86:	f001 f975 	bl	8009e74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8008b8a:	2013      	movs	r0, #19
 8008b8c:	f001 f987 	bl	8009e9e <HAL_NVIC_EnableIRQ>
}
 8008b90:	e036      	b.n	8008c00 <HAL_TIM_Base_MspInit+0x1a0>
  else if(htim_base->Instance==TIM16)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a21      	ldr	r2, [pc, #132]	; (8008c1c <HAL_TIM_Base_MspInit+0x1bc>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d116      	bne.n	8008bca <HAL_TIM_Base_MspInit+0x16a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8008b9c:	4b1b      	ldr	r3, [pc, #108]	; (8008c0c <HAL_TIM_Base_MspInit+0x1ac>)
 8008b9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ba0:	4b1a      	ldr	r3, [pc, #104]	; (8008c0c <HAL_TIM_Base_MspInit+0x1ac>)
 8008ba2:	2180      	movs	r1, #128	; 0x80
 8008ba4:	0289      	lsls	r1, r1, #10
 8008ba6:	430a      	orrs	r2, r1
 8008ba8:	641a      	str	r2, [r3, #64]	; 0x40
 8008baa:	4b18      	ldr	r3, [pc, #96]	; (8008c0c <HAL_TIM_Base_MspInit+0x1ac>)
 8008bac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008bae:	2380      	movs	r3, #128	; 0x80
 8008bb0:	029b      	lsls	r3, r3, #10
 8008bb2:	4013      	ands	r3, r2
 8008bb4:	60fb      	str	r3, [r7, #12]
 8008bb6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8008bb8:	2200      	movs	r2, #0
 8008bba:	2100      	movs	r1, #0
 8008bbc:	2015      	movs	r0, #21
 8008bbe:	f001 f959 	bl	8009e74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8008bc2:	2015      	movs	r0, #21
 8008bc4:	f001 f96b 	bl	8009e9e <HAL_NVIC_EnableIRQ>
}
 8008bc8:	e01a      	b.n	8008c00 <HAL_TIM_Base_MspInit+0x1a0>
  else if(htim_base->Instance==TIM17)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4a14      	ldr	r2, [pc, #80]	; (8008c20 <HAL_TIM_Base_MspInit+0x1c0>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d115      	bne.n	8008c00 <HAL_TIM_Base_MspInit+0x1a0>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8008bd4:	4b0d      	ldr	r3, [pc, #52]	; (8008c0c <HAL_TIM_Base_MspInit+0x1ac>)
 8008bd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008bd8:	4b0c      	ldr	r3, [pc, #48]	; (8008c0c <HAL_TIM_Base_MspInit+0x1ac>)
 8008bda:	2180      	movs	r1, #128	; 0x80
 8008bdc:	02c9      	lsls	r1, r1, #11
 8008bde:	430a      	orrs	r2, r1
 8008be0:	641a      	str	r2, [r3, #64]	; 0x40
 8008be2:	4b0a      	ldr	r3, [pc, #40]	; (8008c0c <HAL_TIM_Base_MspInit+0x1ac>)
 8008be4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008be6:	2380      	movs	r3, #128	; 0x80
 8008be8:	02db      	lsls	r3, r3, #11
 8008bea:	4013      	ands	r3, r2
 8008bec:	60bb      	str	r3, [r7, #8]
 8008bee:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM17_IRQn, 3, 0);
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	2103      	movs	r1, #3
 8008bf4:	2016      	movs	r0, #22
 8008bf6:	f001 f93d 	bl	8009e74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8008bfa:	2016      	movs	r0, #22
 8008bfc:	f001 f94f 	bl	8009e9e <HAL_NVIC_EnableIRQ>
}
 8008c00:	46c0      	nop			; (mov r8, r8)
 8008c02:	46bd      	mov	sp, r7
 8008c04:	b00f      	add	sp, #60	; 0x3c
 8008c06:	bd90      	pop	{r4, r7, pc}
 8008c08:	40000400 	.word	0x40000400
 8008c0c:	40021000 	.word	0x40021000
 8008c10:	40001000 	.word	0x40001000
 8008c14:	40001400 	.word	0x40001400
 8008c18:	40002000 	.word	0x40002000
 8008c1c:	40014400 	.word	0x40014400
 8008c20:	40014800 	.word	0x40014800

08008c24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008c24:	b590      	push	{r4, r7, lr}
 8008c26:	b099      	sub	sp, #100	; 0x64
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c2c:	234c      	movs	r3, #76	; 0x4c
 8008c2e:	18fb      	adds	r3, r7, r3
 8008c30:	0018      	movs	r0, r3
 8008c32:	2314      	movs	r3, #20
 8008c34:	001a      	movs	r2, r3
 8008c36:	2100      	movs	r1, #0
 8008c38:	f006 f9e5 	bl	800f006 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008c3c:	2430      	movs	r4, #48	; 0x30
 8008c3e:	193b      	adds	r3, r7, r4
 8008c40:	0018      	movs	r0, r3
 8008c42:	231c      	movs	r3, #28
 8008c44:	001a      	movs	r2, r3
 8008c46:	2100      	movs	r1, #0
 8008c48:	f006 f9dd 	bl	800f006 <memset>
  if(huart->Instance==USART1)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a9e      	ldr	r2, [pc, #632]	; (8008ecc <HAL_UART_MspInit+0x2a8>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d148      	bne.n	8008ce8 <HAL_UART_MspInit+0xc4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8008c56:	193b      	adds	r3, r7, r4
 8008c58:	2201      	movs	r2, #1
 8008c5a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8008c5c:	193b      	adds	r3, r7, r4
 8008c5e:	2200      	movs	r2, #0
 8008c60:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008c62:	193b      	adds	r3, r7, r4
 8008c64:	0018      	movs	r0, r3
 8008c66:	f002 f8c3 	bl	800adf0 <HAL_RCCEx_PeriphCLKConfig>
 8008c6a:	1e03      	subs	r3, r0, #0
 8008c6c:	d001      	beq.n	8008c72 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8008c6e:	f7ff fe79 	bl	8008964 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008c72:	4b97      	ldr	r3, [pc, #604]	; (8008ed0 <HAL_UART_MspInit+0x2ac>)
 8008c74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c76:	4b96      	ldr	r3, [pc, #600]	; (8008ed0 <HAL_UART_MspInit+0x2ac>)
 8008c78:	2180      	movs	r1, #128	; 0x80
 8008c7a:	01c9      	lsls	r1, r1, #7
 8008c7c:	430a      	orrs	r2, r1
 8008c7e:	641a      	str	r2, [r3, #64]	; 0x40
 8008c80:	4b93      	ldr	r3, [pc, #588]	; (8008ed0 <HAL_UART_MspInit+0x2ac>)
 8008c82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c84:	2380      	movs	r3, #128	; 0x80
 8008c86:	01db      	lsls	r3, r3, #7
 8008c88:	4013      	ands	r3, r2
 8008c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c8e:	4b90      	ldr	r3, [pc, #576]	; (8008ed0 <HAL_UART_MspInit+0x2ac>)
 8008c90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c92:	4b8f      	ldr	r3, [pc, #572]	; (8008ed0 <HAL_UART_MspInit+0x2ac>)
 8008c94:	2101      	movs	r1, #1
 8008c96:	430a      	orrs	r2, r1
 8008c98:	635a      	str	r2, [r3, #52]	; 0x34
 8008c9a:	4b8d      	ldr	r3, [pc, #564]	; (8008ed0 <HAL_UART_MspInit+0x2ac>)
 8008c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	4013      	ands	r3, r2
 8008ca2:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8008ca6:	214c      	movs	r1, #76	; 0x4c
 8008ca8:	187b      	adds	r3, r7, r1
 8008caa:	22c0      	movs	r2, #192	; 0xc0
 8008cac:	00d2      	lsls	r2, r2, #3
 8008cae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008cb0:	187b      	adds	r3, r7, r1
 8008cb2:	2202      	movs	r2, #2
 8008cb4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cb6:	187b      	adds	r3, r7, r1
 8008cb8:	2200      	movs	r2, #0
 8008cba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008cbc:	187b      	adds	r3, r7, r1
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8008cc2:	187b      	adds	r3, r7, r1
 8008cc4:	2201      	movs	r2, #1
 8008cc6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008cc8:	187a      	adds	r2, r7, r1
 8008cca:	23a0      	movs	r3, #160	; 0xa0
 8008ccc:	05db      	lsls	r3, r3, #23
 8008cce:	0011      	movs	r1, r2
 8008cd0:	0018      	movs	r0, r3
 8008cd2:	f001 f9cd 	bl	800a070 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	2103      	movs	r1, #3
 8008cda:	201b      	movs	r0, #27
 8008cdc:	f001 f8ca 	bl	8009e74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008ce0:	201b      	movs	r0, #27
 8008ce2:	f001 f8dc 	bl	8009e9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }

}
 8008ce6:	e0ec      	b.n	8008ec2 <HAL_UART_MspInit+0x29e>
  else if(huart->Instance==USART2)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4a79      	ldr	r2, [pc, #484]	; (8008ed4 <HAL_UART_MspInit+0x2b0>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d148      	bne.n	8008d84 <HAL_UART_MspInit+0x160>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8008cf2:	2130      	movs	r1, #48	; 0x30
 8008cf4:	187b      	adds	r3, r7, r1
 8008cf6:	2202      	movs	r2, #2
 8008cf8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8008cfa:	187b      	adds	r3, r7, r1
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008d00:	187b      	adds	r3, r7, r1
 8008d02:	0018      	movs	r0, r3
 8008d04:	f002 f874 	bl	800adf0 <HAL_RCCEx_PeriphCLKConfig>
 8008d08:	1e03      	subs	r3, r0, #0
 8008d0a:	d001      	beq.n	8008d10 <HAL_UART_MspInit+0xec>
      Error_Handler();
 8008d0c:	f7ff fe2a 	bl	8008964 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8008d10:	4b6f      	ldr	r3, [pc, #444]	; (8008ed0 <HAL_UART_MspInit+0x2ac>)
 8008d12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d14:	4b6e      	ldr	r3, [pc, #440]	; (8008ed0 <HAL_UART_MspInit+0x2ac>)
 8008d16:	2180      	movs	r1, #128	; 0x80
 8008d18:	0289      	lsls	r1, r1, #10
 8008d1a:	430a      	orrs	r2, r1
 8008d1c:	63da      	str	r2, [r3, #60]	; 0x3c
 8008d1e:	4b6c      	ldr	r3, [pc, #432]	; (8008ed0 <HAL_UART_MspInit+0x2ac>)
 8008d20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d22:	2380      	movs	r3, #128	; 0x80
 8008d24:	029b      	lsls	r3, r3, #10
 8008d26:	4013      	ands	r3, r2
 8008d28:	627b      	str	r3, [r7, #36]	; 0x24
 8008d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d2c:	4b68      	ldr	r3, [pc, #416]	; (8008ed0 <HAL_UART_MspInit+0x2ac>)
 8008d2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d30:	4b67      	ldr	r3, [pc, #412]	; (8008ed0 <HAL_UART_MspInit+0x2ac>)
 8008d32:	2101      	movs	r1, #1
 8008d34:	430a      	orrs	r2, r1
 8008d36:	635a      	str	r2, [r3, #52]	; 0x34
 8008d38:	4b65      	ldr	r3, [pc, #404]	; (8008ed0 <HAL_UART_MspInit+0x2ac>)
 8008d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	4013      	ands	r3, r2
 8008d40:	623b      	str	r3, [r7, #32]
 8008d42:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GNS_TX_Pin|GNS_RX_Pin;
 8008d44:	214c      	movs	r1, #76	; 0x4c
 8008d46:	187b      	adds	r3, r7, r1
 8008d48:	220c      	movs	r2, #12
 8008d4a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d4c:	187b      	adds	r3, r7, r1
 8008d4e:	2202      	movs	r2, #2
 8008d50:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d52:	187b      	adds	r3, r7, r1
 8008d54:	2200      	movs	r2, #0
 8008d56:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d58:	187b      	adds	r3, r7, r1
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8008d5e:	187b      	adds	r3, r7, r1
 8008d60:	2201      	movs	r2, #1
 8008d62:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d64:	187a      	adds	r2, r7, r1
 8008d66:	23a0      	movs	r3, #160	; 0xa0
 8008d68:	05db      	lsls	r3, r3, #23
 8008d6a:	0011      	movs	r1, r2
 8008d6c:	0018      	movs	r0, r3
 8008d6e:	f001 f97f 	bl	800a070 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8008d72:	2200      	movs	r2, #0
 8008d74:	2103      	movs	r1, #3
 8008d76:	201c      	movs	r0, #28
 8008d78:	f001 f87c 	bl	8009e74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8008d7c:	201c      	movs	r0, #28
 8008d7e:	f001 f88e 	bl	8009e9e <HAL_NVIC_EnableIRQ>
}
 8008d82:	e09e      	b.n	8008ec2 <HAL_UART_MspInit+0x29e>
  else if(huart->Instance==USART3)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a53      	ldr	r2, [pc, #332]	; (8008ed8 <HAL_UART_MspInit+0x2b4>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d15b      	bne.n	8008e46 <HAL_UART_MspInit+0x222>
    __HAL_RCC_USART3_CLK_ENABLE();
 8008d8e:	4b50      	ldr	r3, [pc, #320]	; (8008ed0 <HAL_UART_MspInit+0x2ac>)
 8008d90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d92:	4b4f      	ldr	r3, [pc, #316]	; (8008ed0 <HAL_UART_MspInit+0x2ac>)
 8008d94:	2180      	movs	r1, #128	; 0x80
 8008d96:	02c9      	lsls	r1, r1, #11
 8008d98:	430a      	orrs	r2, r1
 8008d9a:	63da      	str	r2, [r3, #60]	; 0x3c
 8008d9c:	4b4c      	ldr	r3, [pc, #304]	; (8008ed0 <HAL_UART_MspInit+0x2ac>)
 8008d9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008da0:	2380      	movs	r3, #128	; 0x80
 8008da2:	02db      	lsls	r3, r3, #11
 8008da4:	4013      	ands	r3, r2
 8008da6:	61fb      	str	r3, [r7, #28]
 8008da8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008daa:	4b49      	ldr	r3, [pc, #292]	; (8008ed0 <HAL_UART_MspInit+0x2ac>)
 8008dac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008dae:	4b48      	ldr	r3, [pc, #288]	; (8008ed0 <HAL_UART_MspInit+0x2ac>)
 8008db0:	2101      	movs	r1, #1
 8008db2:	430a      	orrs	r2, r1
 8008db4:	635a      	str	r2, [r3, #52]	; 0x34
 8008db6:	4b46      	ldr	r3, [pc, #280]	; (8008ed0 <HAL_UART_MspInit+0x2ac>)
 8008db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dba:	2201      	movs	r2, #1
 8008dbc:	4013      	ands	r3, r2
 8008dbe:	61bb      	str	r3, [r7, #24]
 8008dc0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008dc2:	4b43      	ldr	r3, [pc, #268]	; (8008ed0 <HAL_UART_MspInit+0x2ac>)
 8008dc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008dc6:	4b42      	ldr	r3, [pc, #264]	; (8008ed0 <HAL_UART_MspInit+0x2ac>)
 8008dc8:	2102      	movs	r1, #2
 8008dca:	430a      	orrs	r2, r1
 8008dcc:	635a      	str	r2, [r3, #52]	; 0x34
 8008dce:	4b40      	ldr	r3, [pc, #256]	; (8008ed0 <HAL_UART_MspInit+0x2ac>)
 8008dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dd2:	2202      	movs	r2, #2
 8008dd4:	4013      	ands	r3, r2
 8008dd6:	617b      	str	r3, [r7, #20]
 8008dd8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8008dda:	244c      	movs	r4, #76	; 0x4c
 8008ddc:	193b      	adds	r3, r7, r4
 8008dde:	2220      	movs	r2, #32
 8008de0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008de2:	193b      	adds	r3, r7, r4
 8008de4:	2202      	movs	r2, #2
 8008de6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008de8:	193b      	adds	r3, r7, r4
 8008dea:	2200      	movs	r2, #0
 8008dec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008dee:	193b      	adds	r3, r7, r4
 8008df0:	2200      	movs	r2, #0
 8008df2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8008df4:	193b      	adds	r3, r7, r4
 8008df6:	2204      	movs	r2, #4
 8008df8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008dfa:	193a      	adds	r2, r7, r4
 8008dfc:	23a0      	movs	r3, #160	; 0xa0
 8008dfe:	05db      	lsls	r3, r3, #23
 8008e00:	0011      	movs	r1, r2
 8008e02:	0018      	movs	r0, r3
 8008e04:	f001 f934 	bl	800a070 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8008e08:	0021      	movs	r1, r4
 8008e0a:	187b      	adds	r3, r7, r1
 8008e0c:	2201      	movs	r2, #1
 8008e0e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e10:	187b      	adds	r3, r7, r1
 8008e12:	2202      	movs	r2, #2
 8008e14:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e16:	187b      	adds	r3, r7, r1
 8008e18:	2200      	movs	r2, #0
 8008e1a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e1c:	187b      	adds	r3, r7, r1
 8008e1e:	2200      	movs	r2, #0
 8008e20:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8008e22:	187b      	adds	r3, r7, r1
 8008e24:	2204      	movs	r2, #4
 8008e26:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008e28:	187b      	adds	r3, r7, r1
 8008e2a:	4a2c      	ldr	r2, [pc, #176]	; (8008edc <HAL_UART_MspInit+0x2b8>)
 8008e2c:	0019      	movs	r1, r3
 8008e2e:	0010      	movs	r0, r2
 8008e30:	f001 f91e 	bl	800a070 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 3, 0);
 8008e34:	2200      	movs	r2, #0
 8008e36:	2103      	movs	r1, #3
 8008e38:	201d      	movs	r0, #29
 8008e3a:	f001 f81b 	bl	8009e74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8008e3e:	201d      	movs	r0, #29
 8008e40:	f001 f82d 	bl	8009e9e <HAL_NVIC_EnableIRQ>
}
 8008e44:	e03d      	b.n	8008ec2 <HAL_UART_MspInit+0x29e>
  else if(huart->Instance==USART4)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a25      	ldr	r2, [pc, #148]	; (8008ee0 <HAL_UART_MspInit+0x2bc>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d138      	bne.n	8008ec2 <HAL_UART_MspInit+0x29e>
    __HAL_RCC_USART4_CLK_ENABLE();
 8008e50:	4b1f      	ldr	r3, [pc, #124]	; (8008ed0 <HAL_UART_MspInit+0x2ac>)
 8008e52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e54:	4b1e      	ldr	r3, [pc, #120]	; (8008ed0 <HAL_UART_MspInit+0x2ac>)
 8008e56:	2180      	movs	r1, #128	; 0x80
 8008e58:	0309      	lsls	r1, r1, #12
 8008e5a:	430a      	orrs	r2, r1
 8008e5c:	63da      	str	r2, [r3, #60]	; 0x3c
 8008e5e:	4b1c      	ldr	r3, [pc, #112]	; (8008ed0 <HAL_UART_MspInit+0x2ac>)
 8008e60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e62:	2380      	movs	r3, #128	; 0x80
 8008e64:	031b      	lsls	r3, r3, #12
 8008e66:	4013      	ands	r3, r2
 8008e68:	613b      	str	r3, [r7, #16]
 8008e6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e6c:	4b18      	ldr	r3, [pc, #96]	; (8008ed0 <HAL_UART_MspInit+0x2ac>)
 8008e6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e70:	4b17      	ldr	r3, [pc, #92]	; (8008ed0 <HAL_UART_MspInit+0x2ac>)
 8008e72:	2101      	movs	r1, #1
 8008e74:	430a      	orrs	r2, r1
 8008e76:	635a      	str	r2, [r3, #52]	; 0x34
 8008e78:	4b15      	ldr	r3, [pc, #84]	; (8008ed0 <HAL_UART_MspInit+0x2ac>)
 8008e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	4013      	ands	r3, r2
 8008e80:	60fb      	str	r3, [r7, #12]
 8008e82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DEBUG_TX_Pin|DEBUG_RX_Pin;
 8008e84:	214c      	movs	r1, #76	; 0x4c
 8008e86:	187b      	adds	r3, r7, r1
 8008e88:	2203      	movs	r2, #3
 8008e8a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e8c:	187b      	adds	r3, r7, r1
 8008e8e:	2202      	movs	r2, #2
 8008e90:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e92:	187b      	adds	r3, r7, r1
 8008e94:	2200      	movs	r2, #0
 8008e96:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e98:	187b      	adds	r3, r7, r1
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 8008e9e:	187b      	adds	r3, r7, r1
 8008ea0:	2204      	movs	r2, #4
 8008ea2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ea4:	187a      	adds	r2, r7, r1
 8008ea6:	23a0      	movs	r3, #160	; 0xa0
 8008ea8:	05db      	lsls	r3, r3, #23
 8008eaa:	0011      	movs	r1, r2
 8008eac:	0018      	movs	r0, r3
 8008eae:	f001 f8df 	bl	800a070 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 3, 0);
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	2103      	movs	r1, #3
 8008eb6:	201d      	movs	r0, #29
 8008eb8:	f000 ffdc 	bl	8009e74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8008ebc:	201d      	movs	r0, #29
 8008ebe:	f000 ffee 	bl	8009e9e <HAL_NVIC_EnableIRQ>
}
 8008ec2:	46c0      	nop			; (mov r8, r8)
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	b019      	add	sp, #100	; 0x64
 8008ec8:	bd90      	pop	{r4, r7, pc}
 8008eca:	46c0      	nop			; (mov r8, r8)
 8008ecc:	40013800 	.word	0x40013800
 8008ed0:	40021000 	.word	0x40021000
 8008ed4:	40004400 	.word	0x40004400
 8008ed8:	40004800 	.word	0x40004800
 8008edc:	50000400 	.word	0x50000400
 8008ee0:	40004c00 	.word	0x40004c00

08008ee4 <__NVIC_SystemReset>:
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8008ee8:	f3bf 8f4f 	dsb	sy
}
 8008eec:	46c0      	nop			; (mov r8, r8)
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008eee:	4b04      	ldr	r3, [pc, #16]	; (8008f00 <__NVIC_SystemReset+0x1c>)
 8008ef0:	4a04      	ldr	r2, [pc, #16]	; (8008f04 <__NVIC_SystemReset+0x20>)
 8008ef2:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8008ef4:	f3bf 8f4f 	dsb	sy
}
 8008ef8:	46c0      	nop			; (mov r8, r8)
    __NOP();
 8008efa:	46c0      	nop			; (mov r8, r8)
 8008efc:	e7fd      	b.n	8008efa <__NVIC_SystemReset+0x16>
 8008efe:	46c0      	nop			; (mov r8, r8)
 8008f00:	e000ed00 	.word	0xe000ed00
 8008f04:	05fa0004 	.word	0x05fa0004

08008f08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008f0c:	e7fe      	b.n	8008f0c <NMI_Handler+0x4>

08008f0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008f0e:	b580      	push	{r7, lr}
 8008f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	 NVIC_SystemReset();
 8008f12:	f7ff ffe7 	bl	8008ee4 <__NVIC_SystemReset>

08008f16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008f16:	b580      	push	{r7, lr}
 8008f18:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8008f1a:	46c0      	nop			; (mov r8, r8)
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}

08008f20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008f24:	46c0      	nop			; (mov r8, r8)
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}

08008f2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008f2a:	b580      	push	{r7, lr}
 8008f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008f2e:	f000 feb5 	bl	8009c9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008f32:	46c0      	nop			; (mov r8, r8)
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}

08008f38 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8008f3c:	4b03      	ldr	r3, [pc, #12]	; (8008f4c <TIM3_IRQHandler+0x14>)
 8008f3e:	0018      	movs	r0, r3
 8008f40:	f003 fb16 	bl	800c570 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8008f44:	46c0      	nop			; (mov r8, r8)
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}
 8008f4a:	46c0      	nop			; (mov r8, r8)
 8008f4c:	2000034c 	.word	0x2000034c

08008f50 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8008f54:	4b03      	ldr	r3, [pc, #12]	; (8008f64 <TIM6_IRQHandler+0x14>)
 8008f56:	0018      	movs	r0, r3
 8008f58:	f003 fb0a 	bl	800c570 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8008f5c:	46c0      	nop			; (mov r8, r8)
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}
 8008f62:	46c0      	nop			; (mov r8, r8)
 8008f64:	20000398 	.word	0x20000398

08008f68 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8008f6c:	4b03      	ldr	r3, [pc, #12]	; (8008f7c <TIM7_IRQHandler+0x14>)
 8008f6e:	0018      	movs	r0, r3
 8008f70:	f003 fafe 	bl	800c570 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8008f74:	46c0      	nop			; (mov r8, r8)
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}
 8008f7a:	46c0      	nop			; (mov r8, r8)
 8008f7c:	200003e4 	.word	0x200003e4

08008f80 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8008f84:	4b03      	ldr	r3, [pc, #12]	; (8008f94 <TIM14_IRQHandler+0x14>)
 8008f86:	0018      	movs	r0, r3
 8008f88:	f003 faf2 	bl	800c570 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8008f8c:	46c0      	nop			; (mov r8, r8)
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}
 8008f92:	46c0      	nop			; (mov r8, r8)
 8008f94:	20000430 	.word	0x20000430

08008f98 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8008f9c:	4b03      	ldr	r3, [pc, #12]	; (8008fac <TIM16_IRQHandler+0x14>)
 8008f9e:	0018      	movs	r0, r3
 8008fa0:	f003 fae6 	bl	800c570 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8008fa4:	46c0      	nop			; (mov r8, r8)
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}
 8008faa:	46c0      	nop			; (mov r8, r8)
 8008fac:	2000047c 	.word	0x2000047c

08008fb0 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8008fb4:	4b03      	ldr	r3, [pc, #12]	; (8008fc4 <TIM17_IRQHandler+0x14>)
 8008fb6:	0018      	movs	r0, r3
 8008fb8:	f003 fada 	bl	800c570 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8008fbc:	46c0      	nop			; (mov r8, r8)
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}
 8008fc2:	46c0      	nop			; (mov r8, r8)
 8008fc4:	200004c8 	.word	0x200004c8

08008fc8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8008fcc:	4b03      	ldr	r3, [pc, #12]	; (8008fdc <SPI1_IRQHandler+0x14>)
 8008fce:	0018      	movs	r0, r3
 8008fd0:	f002 fd70 	bl	800bab4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8008fd4:	46c0      	nop			; (mov r8, r8)
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
 8008fda:	46c0      	nop			; (mov r8, r8)
 8008fdc:	200002e8 	.word	0x200002e8

08008fe0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008fe4:	4b03      	ldr	r3, [pc, #12]	; (8008ff4 <USART1_IRQHandler+0x14>)
 8008fe6:	0018      	movs	r0, r3
 8008fe8:	f004 f9a6 	bl	800d338 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008fec:	46c0      	nop			; (mov r8, r8)
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}
 8008ff2:	46c0      	nop			; (mov r8, r8)
 8008ff4:	20000514 	.word	0x20000514

08008ff8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8008ffc:	4b03      	ldr	r3, [pc, #12]	; (800900c <USART2_IRQHandler+0x14>)
 8008ffe:	0018      	movs	r0, r3
 8009000:	f004 f99a 	bl	800d338 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8009004:	46c0      	nop			; (mov r8, r8)
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}
 800900a:	46c0      	nop			; (mov r8, r8)
 800900c:	200005a8 	.word	0x200005a8

08009010 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8009014:	4b05      	ldr	r3, [pc, #20]	; (800902c <USART3_4_IRQHandler+0x1c>)
 8009016:	0018      	movs	r0, r3
 8009018:	f004 f98e 	bl	800d338 <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart4);
 800901c:	4b04      	ldr	r3, [pc, #16]	; (8009030 <USART3_4_IRQHandler+0x20>)
 800901e:	0018      	movs	r0, r3
 8009020:	f004 f98a 	bl	800d338 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8009024:	46c0      	nop			; (mov r8, r8)
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}
 800902a:	46c0      	nop			; (mov r8, r8)
 800902c:	2000063c 	.word	0x2000063c
 8009030:	200006d0 	.word	0x200006d0

08009034 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	af00      	add	r7, sp, #0
	return 1;
 8009038:	2301      	movs	r3, #1
}
 800903a:	0018      	movs	r0, r3
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}

08009040 <_kill>:

int _kill(int pid, int sig)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b082      	sub	sp, #8
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800904a:	f005 ffa9 	bl	800efa0 <__errno>
 800904e:	0003      	movs	r3, r0
 8009050:	2216      	movs	r2, #22
 8009052:	601a      	str	r2, [r3, #0]
	return -1;
 8009054:	2301      	movs	r3, #1
 8009056:	425b      	negs	r3, r3
}
 8009058:	0018      	movs	r0, r3
 800905a:	46bd      	mov	sp, r7
 800905c:	b002      	add	sp, #8
 800905e:	bd80      	pop	{r7, pc}

08009060 <_exit>:

void _exit (int status)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b082      	sub	sp, #8
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8009068:	2301      	movs	r3, #1
 800906a:	425a      	negs	r2, r3
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	0011      	movs	r1, r2
 8009070:	0018      	movs	r0, r3
 8009072:	f7ff ffe5 	bl	8009040 <_kill>
	while (1) {}		/* Make sure we hang here */
 8009076:	e7fe      	b.n	8009076 <_exit+0x16>

08009078 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b086      	sub	sp, #24
 800907c:	af00      	add	r7, sp, #0
 800907e:	60f8      	str	r0, [r7, #12]
 8009080:	60b9      	str	r1, [r7, #8]
 8009082:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009084:	2300      	movs	r3, #0
 8009086:	617b      	str	r3, [r7, #20]
 8009088:	e00a      	b.n	80090a0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800908a:	e000      	b.n	800908e <_read+0x16>
 800908c:	bf00      	nop
 800908e:	0001      	movs	r1, r0
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	1c5a      	adds	r2, r3, #1
 8009094:	60ba      	str	r2, [r7, #8]
 8009096:	b2ca      	uxtb	r2, r1
 8009098:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	3301      	adds	r3, #1
 800909e:	617b      	str	r3, [r7, #20]
 80090a0:	697a      	ldr	r2, [r7, #20]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	429a      	cmp	r2, r3
 80090a6:	dbf0      	blt.n	800908a <_read+0x12>
	}

return len;
 80090a8:	687b      	ldr	r3, [r7, #4]
}
 80090aa:	0018      	movs	r0, r3
 80090ac:	46bd      	mov	sp, r7
 80090ae:	b006      	add	sp, #24
 80090b0:	bd80      	pop	{r7, pc}

080090b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80090b2:	b580      	push	{r7, lr}
 80090b4:	b086      	sub	sp, #24
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	60f8      	str	r0, [r7, #12]
 80090ba:	60b9      	str	r1, [r7, #8]
 80090bc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80090be:	2300      	movs	r3, #0
 80090c0:	617b      	str	r3, [r7, #20]
 80090c2:	e009      	b.n	80090d8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	1c5a      	adds	r2, r3, #1
 80090c8:	60ba      	str	r2, [r7, #8]
 80090ca:	781b      	ldrb	r3, [r3, #0]
 80090cc:	0018      	movs	r0, r3
 80090ce:	e000      	b.n	80090d2 <_write+0x20>
 80090d0:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	3301      	adds	r3, #1
 80090d6:	617b      	str	r3, [r7, #20]
 80090d8:	697a      	ldr	r2, [r7, #20]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	429a      	cmp	r2, r3
 80090de:	dbf1      	blt.n	80090c4 <_write+0x12>
	}
	return len;
 80090e0:	687b      	ldr	r3, [r7, #4]
}
 80090e2:	0018      	movs	r0, r3
 80090e4:	46bd      	mov	sp, r7
 80090e6:	b006      	add	sp, #24
 80090e8:	bd80      	pop	{r7, pc}

080090ea <_close>:

int _close(int file)
{
 80090ea:	b580      	push	{r7, lr}
 80090ec:	b082      	sub	sp, #8
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	6078      	str	r0, [r7, #4]
	return -1;
 80090f2:	2301      	movs	r3, #1
 80090f4:	425b      	negs	r3, r3
}
 80090f6:	0018      	movs	r0, r3
 80090f8:	46bd      	mov	sp, r7
 80090fa:	b002      	add	sp, #8
 80090fc:	bd80      	pop	{r7, pc}

080090fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80090fe:	b580      	push	{r7, lr}
 8009100:	b082      	sub	sp, #8
 8009102:	af00      	add	r7, sp, #0
 8009104:	6078      	str	r0, [r7, #4]
 8009106:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	2280      	movs	r2, #128	; 0x80
 800910c:	0192      	lsls	r2, r2, #6
 800910e:	605a      	str	r2, [r3, #4]
	return 0;
 8009110:	2300      	movs	r3, #0
}
 8009112:	0018      	movs	r0, r3
 8009114:	46bd      	mov	sp, r7
 8009116:	b002      	add	sp, #8
 8009118:	bd80      	pop	{r7, pc}

0800911a <_isatty>:

int _isatty(int file)
{
 800911a:	b580      	push	{r7, lr}
 800911c:	b082      	sub	sp, #8
 800911e:	af00      	add	r7, sp, #0
 8009120:	6078      	str	r0, [r7, #4]
	return 1;
 8009122:	2301      	movs	r3, #1
}
 8009124:	0018      	movs	r0, r3
 8009126:	46bd      	mov	sp, r7
 8009128:	b002      	add	sp, #8
 800912a:	bd80      	pop	{r7, pc}

0800912c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b084      	sub	sp, #16
 8009130:	af00      	add	r7, sp, #0
 8009132:	60f8      	str	r0, [r7, #12]
 8009134:	60b9      	str	r1, [r7, #8]
 8009136:	607a      	str	r2, [r7, #4]
	return 0;
 8009138:	2300      	movs	r3, #0
}
 800913a:	0018      	movs	r0, r3
 800913c:	46bd      	mov	sp, r7
 800913e:	b004      	add	sp, #16
 8009140:	bd80      	pop	{r7, pc}
	...

08009144 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b086      	sub	sp, #24
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800914c:	4a14      	ldr	r2, [pc, #80]	; (80091a0 <_sbrk+0x5c>)
 800914e:	4b15      	ldr	r3, [pc, #84]	; (80091a4 <_sbrk+0x60>)
 8009150:	1ad3      	subs	r3, r2, r3
 8009152:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009158:	4b13      	ldr	r3, [pc, #76]	; (80091a8 <_sbrk+0x64>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d102      	bne.n	8009166 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009160:	4b11      	ldr	r3, [pc, #68]	; (80091a8 <_sbrk+0x64>)
 8009162:	4a12      	ldr	r2, [pc, #72]	; (80091ac <_sbrk+0x68>)
 8009164:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009166:	4b10      	ldr	r3, [pc, #64]	; (80091a8 <_sbrk+0x64>)
 8009168:	681a      	ldr	r2, [r3, #0]
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	18d3      	adds	r3, r2, r3
 800916e:	693a      	ldr	r2, [r7, #16]
 8009170:	429a      	cmp	r2, r3
 8009172:	d207      	bcs.n	8009184 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009174:	f005 ff14 	bl	800efa0 <__errno>
 8009178:	0003      	movs	r3, r0
 800917a:	220c      	movs	r2, #12
 800917c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800917e:	2301      	movs	r3, #1
 8009180:	425b      	negs	r3, r3
 8009182:	e009      	b.n	8009198 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009184:	4b08      	ldr	r3, [pc, #32]	; (80091a8 <_sbrk+0x64>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800918a:	4b07      	ldr	r3, [pc, #28]	; (80091a8 <_sbrk+0x64>)
 800918c:	681a      	ldr	r2, [r3, #0]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	18d2      	adds	r2, r2, r3
 8009192:	4b05      	ldr	r3, [pc, #20]	; (80091a8 <_sbrk+0x64>)
 8009194:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8009196:	68fb      	ldr	r3, [r7, #12]
}
 8009198:	0018      	movs	r0, r3
 800919a:	46bd      	mov	sp, r7
 800919c:	b006      	add	sp, #24
 800919e:	bd80      	pop	{r7, pc}
 80091a0:	20009000 	.word	0x20009000
 80091a4:	00000400 	.word	0x00000400
 80091a8:	20000d70 	.word	0x20000d70
 80091ac:	20000db0 	.word	0x20000db0

080091b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80091b4:	46c0      	nop			; (mov r8, r8)
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
	...

080091bc <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 80091bc:	b590      	push	{r4, r7, lr}
 80091be:	b087      	sub	sp, #28
 80091c0:	af02      	add	r7, sp, #8
 80091c2:	0002      	movs	r2, r0
 80091c4:	1dfb      	adds	r3, r7, #7
 80091c6:	701a      	strb	r2, [r3, #0]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 80091c8:	240f      	movs	r4, #15
 80091ca:	193a      	adds	r2, r7, r4
 80091cc:	1df9      	adds	r1, r7, #7
 80091ce:	4806      	ldr	r0, [pc, #24]	; (80091e8 <W25qxx_Spi+0x2c>)
 80091d0:	2364      	movs	r3, #100	; 0x64
 80091d2:	9300      	str	r3, [sp, #0]
 80091d4:	2301      	movs	r3, #1
 80091d6:	f002 fa9b 	bl	800b710 <HAL_SPI_TransmitReceive>
	return ret;
 80091da:	193b      	adds	r3, r7, r4
 80091dc:	781b      	ldrb	r3, [r3, #0]
}
 80091de:	0018      	movs	r0, r3
 80091e0:	46bd      	mov	sp, r7
 80091e2:	b005      	add	sp, #20
 80091e4:	bd90      	pop	{r4, r7, pc}
 80091e6:	46c0      	nop			; (mov r8, r8)
 80091e8:	200002e8 	.word	0x200002e8

080091ec <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b084      	sub	sp, #16
 80091f0:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 80091f2:	2300      	movs	r3, #0
 80091f4:	60fb      	str	r3, [r7, #12]
 80091f6:	2300      	movs	r3, #0
 80091f8:	60bb      	str	r3, [r7, #8]
 80091fa:	2300      	movs	r3, #0
 80091fc:	607b      	str	r3, [r7, #4]
 80091fe:	2300      	movs	r3, #0
 8009200:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8009202:	4b15      	ldr	r3, [pc, #84]	; (8009258 <W25qxx_ReadID+0x6c>)
 8009204:	2200      	movs	r2, #0
 8009206:	2108      	movs	r1, #8
 8009208:	0018      	movs	r0, r3
 800920a:	f001 f8b2 	bl	800a372 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 800920e:	209f      	movs	r0, #159	; 0x9f
 8009210:	f7ff ffd4 	bl	80091bc <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8009214:	20a5      	movs	r0, #165	; 0xa5
 8009216:	f7ff ffd1 	bl	80091bc <W25qxx_Spi>
 800921a:	0003      	movs	r3, r0
 800921c:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800921e:	20a5      	movs	r0, #165	; 0xa5
 8009220:	f7ff ffcc 	bl	80091bc <W25qxx_Spi>
 8009224:	0003      	movs	r3, r0
 8009226:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8009228:	20a5      	movs	r0, #165	; 0xa5
 800922a:	f7ff ffc7 	bl	80091bc <W25qxx_Spi>
 800922e:	0003      	movs	r3, r0
 8009230:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8009232:	4b09      	ldr	r3, [pc, #36]	; (8009258 <W25qxx_ReadID+0x6c>)
 8009234:	2201      	movs	r2, #1
 8009236:	2108      	movs	r1, #8
 8009238:	0018      	movs	r0, r3
 800923a:	f001 f89a 	bl	800a372 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	041a      	lsls	r2, r3, #16
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	021b      	lsls	r3, r3, #8
 8009246:	4313      	orrs	r3, r2
 8009248:	683a      	ldr	r2, [r7, #0]
 800924a:	4313      	orrs	r3, r2
 800924c:	60fb      	str	r3, [r7, #12]
	return Temp;
 800924e:	68fb      	ldr	r3, [r7, #12]
}
 8009250:	0018      	movs	r0, r3
 8009252:	46bd      	mov	sp, r7
 8009254:	b004      	add	sp, #16
 8009256:	bd80      	pop	{r7, pc}
 8009258:	50000c00 	.word	0x50000c00

0800925c <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 800925c:	b590      	push	{r4, r7, lr}
 800925e:	b083      	sub	sp, #12
 8009260:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8009262:	4b1d      	ldr	r3, [pc, #116]	; (80092d8 <W25qxx_ReadUniqID+0x7c>)
 8009264:	2200      	movs	r2, #0
 8009266:	2108      	movs	r1, #8
 8009268:	0018      	movs	r0, r3
 800926a:	f001 f882 	bl	800a372 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 800926e:	204b      	movs	r0, #75	; 0x4b
 8009270:	f7ff ffa4 	bl	80091bc <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8009274:	1dfb      	adds	r3, r7, #7
 8009276:	2200      	movs	r2, #0
 8009278:	701a      	strb	r2, [r3, #0]
 800927a:	e007      	b.n	800928c <W25qxx_ReadUniqID+0x30>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800927c:	20a5      	movs	r0, #165	; 0xa5
 800927e:	f7ff ff9d 	bl	80091bc <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8009282:	1dfb      	adds	r3, r7, #7
 8009284:	781a      	ldrb	r2, [r3, #0]
 8009286:	1dfb      	adds	r3, r7, #7
 8009288:	3201      	adds	r2, #1
 800928a:	701a      	strb	r2, [r3, #0]
 800928c:	1dfb      	adds	r3, r7, #7
 800928e:	781b      	ldrb	r3, [r3, #0]
 8009290:	2b03      	cmp	r3, #3
 8009292:	d9f3      	bls.n	800927c <W25qxx_ReadUniqID+0x20>
	for (uint8_t i = 0; i < 8; i++)
 8009294:	1dbb      	adds	r3, r7, #6
 8009296:	2200      	movs	r2, #0
 8009298:	701a      	strb	r2, [r3, #0]
 800929a:	e00e      	b.n	80092ba <W25qxx_ReadUniqID+0x5e>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800929c:	1dbb      	adds	r3, r7, #6
 800929e:	781c      	ldrb	r4, [r3, #0]
 80092a0:	20a5      	movs	r0, #165	; 0xa5
 80092a2:	f7ff ff8b 	bl	80091bc <W25qxx_Spi>
 80092a6:	0003      	movs	r3, r0
 80092a8:	001a      	movs	r2, r3
 80092aa:	4b0c      	ldr	r3, [pc, #48]	; (80092dc <W25qxx_ReadUniqID+0x80>)
 80092ac:	191b      	adds	r3, r3, r4
 80092ae:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 80092b0:	1dbb      	adds	r3, r7, #6
 80092b2:	781a      	ldrb	r2, [r3, #0]
 80092b4:	1dbb      	adds	r3, r7, #6
 80092b6:	3201      	adds	r2, #1
 80092b8:	701a      	strb	r2, [r3, #0]
 80092ba:	1dbb      	adds	r3, r7, #6
 80092bc:	781b      	ldrb	r3, [r3, #0]
 80092be:	2b07      	cmp	r3, #7
 80092c0:	d9ec      	bls.n	800929c <W25qxx_ReadUniqID+0x40>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80092c2:	4b05      	ldr	r3, [pc, #20]	; (80092d8 <W25qxx_ReadUniqID+0x7c>)
 80092c4:	2201      	movs	r2, #1
 80092c6:	2108      	movs	r1, #8
 80092c8:	0018      	movs	r0, r3
 80092ca:	f001 f852 	bl	800a372 <HAL_GPIO_WritePin>
}
 80092ce:	46c0      	nop			; (mov r8, r8)
 80092d0:	46bd      	mov	sp, r7
 80092d2:	b003      	add	sp, #12
 80092d4:	bd90      	pop	{r4, r7, pc}
 80092d6:	46c0      	nop			; (mov r8, r8)
 80092d8:	50000c00 	.word	0x50000c00
 80092dc:	20000d74 	.word	0x20000d74

080092e0 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80092e4:	4b0a      	ldr	r3, [pc, #40]	; (8009310 <W25qxx_WriteEnable+0x30>)
 80092e6:	2200      	movs	r2, #0
 80092e8:	2108      	movs	r1, #8
 80092ea:	0018      	movs	r0, r3
 80092ec:	f001 f841 	bl	800a372 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 80092f0:	2006      	movs	r0, #6
 80092f2:	f7ff ff63 	bl	80091bc <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80092f6:	4b06      	ldr	r3, [pc, #24]	; (8009310 <W25qxx_WriteEnable+0x30>)
 80092f8:	2201      	movs	r2, #1
 80092fa:	2108      	movs	r1, #8
 80092fc:	0018      	movs	r0, r3
 80092fe:	f001 f838 	bl	800a372 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8009302:	2001      	movs	r0, #1
 8009304:	f000 fce6 	bl	8009cd4 <HAL_Delay>
}
 8009308:	46c0      	nop			; (mov r8, r8)
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}
 800930e:	46c0      	nop			; (mov r8, r8)
 8009310:	50000c00 	.word	0x50000c00

08009314 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8009314:	b5b0      	push	{r4, r5, r7, lr}
 8009316:	b084      	sub	sp, #16
 8009318:	af00      	add	r7, sp, #0
 800931a:	0002      	movs	r2, r0
 800931c:	1dfb      	adds	r3, r7, #7
 800931e:	701a      	strb	r2, [r3, #0]
	uint8_t status = 0;
 8009320:	240f      	movs	r4, #15
 8009322:	193b      	adds	r3, r7, r4
 8009324:	2200      	movs	r2, #0
 8009326:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8009328:	4b24      	ldr	r3, [pc, #144]	; (80093bc <W25qxx_ReadStatusRegister+0xa8>)
 800932a:	2200      	movs	r2, #0
 800932c:	2108      	movs	r1, #8
 800932e:	0018      	movs	r0, r3
 8009330:	f001 f81f 	bl	800a372 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8009334:	1dfb      	adds	r3, r7, #7
 8009336:	781b      	ldrb	r3, [r3, #0]
 8009338:	2b01      	cmp	r3, #1
 800933a:	d10f      	bne.n	800935c <W25qxx_ReadStatusRegister+0x48>
	{
		W25qxx_Spi(0x05);
 800933c:	2005      	movs	r0, #5
 800933e:	f7ff ff3d 	bl	80091bc <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8009342:	0025      	movs	r5, r4
 8009344:	193c      	adds	r4, r7, r4
 8009346:	20a5      	movs	r0, #165	; 0xa5
 8009348:	f7ff ff38 	bl	80091bc <W25qxx_Spi>
 800934c:	0003      	movs	r3, r0
 800934e:	7023      	strb	r3, [r4, #0]
		w25qxx.StatusRegister1 = status;
 8009350:	4b1b      	ldr	r3, [pc, #108]	; (80093c0 <W25qxx_ReadStatusRegister+0xac>)
 8009352:	197a      	adds	r2, r7, r5
 8009354:	2124      	movs	r1, #36	; 0x24
 8009356:	7812      	ldrb	r2, [r2, #0]
 8009358:	545a      	strb	r2, [r3, r1]
 800935a:	e022      	b.n	80093a2 <W25qxx_ReadStatusRegister+0x8e>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 800935c:	1dfb      	adds	r3, r7, #7
 800935e:	781b      	ldrb	r3, [r3, #0]
 8009360:	2b02      	cmp	r3, #2
 8009362:	d10f      	bne.n	8009384 <W25qxx_ReadStatusRegister+0x70>
	{
		W25qxx_Spi(0x35);
 8009364:	2035      	movs	r0, #53	; 0x35
 8009366:	f7ff ff29 	bl	80091bc <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800936a:	250f      	movs	r5, #15
 800936c:	197c      	adds	r4, r7, r5
 800936e:	20a5      	movs	r0, #165	; 0xa5
 8009370:	f7ff ff24 	bl	80091bc <W25qxx_Spi>
 8009374:	0003      	movs	r3, r0
 8009376:	7023      	strb	r3, [r4, #0]
		w25qxx.StatusRegister2 = status;
 8009378:	4b11      	ldr	r3, [pc, #68]	; (80093c0 <W25qxx_ReadStatusRegister+0xac>)
 800937a:	197a      	adds	r2, r7, r5
 800937c:	2125      	movs	r1, #37	; 0x25
 800937e:	7812      	ldrb	r2, [r2, #0]
 8009380:	545a      	strb	r2, [r3, r1]
 8009382:	e00e      	b.n	80093a2 <W25qxx_ReadStatusRegister+0x8e>
	}
	else
	{
		W25qxx_Spi(0x15);
 8009384:	2015      	movs	r0, #21
 8009386:	f7ff ff19 	bl	80091bc <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800938a:	250f      	movs	r5, #15
 800938c:	197c      	adds	r4, r7, r5
 800938e:	20a5      	movs	r0, #165	; 0xa5
 8009390:	f7ff ff14 	bl	80091bc <W25qxx_Spi>
 8009394:	0003      	movs	r3, r0
 8009396:	7023      	strb	r3, [r4, #0]
		w25qxx.StatusRegister3 = status;
 8009398:	4b09      	ldr	r3, [pc, #36]	; (80093c0 <W25qxx_ReadStatusRegister+0xac>)
 800939a:	197a      	adds	r2, r7, r5
 800939c:	2126      	movs	r1, #38	; 0x26
 800939e:	7812      	ldrb	r2, [r2, #0]
 80093a0:	545a      	strb	r2, [r3, r1]
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80093a2:	4b06      	ldr	r3, [pc, #24]	; (80093bc <W25qxx_ReadStatusRegister+0xa8>)
 80093a4:	2201      	movs	r2, #1
 80093a6:	2108      	movs	r1, #8
 80093a8:	0018      	movs	r0, r3
 80093aa:	f000 ffe2 	bl	800a372 <HAL_GPIO_WritePin>
	return status;
 80093ae:	230f      	movs	r3, #15
 80093b0:	18fb      	adds	r3, r7, r3
 80093b2:	781b      	ldrb	r3, [r3, #0]
}
 80093b4:	0018      	movs	r0, r3
 80093b6:	46bd      	mov	sp, r7
 80093b8:	b004      	add	sp, #16
 80093ba:	bdb0      	pop	{r4, r5, r7, pc}
 80093bc:	50000c00 	.word	0x50000c00
 80093c0:	20000d74 	.word	0x20000d74

080093c4 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 80093c8:	2001      	movs	r0, #1
 80093ca:	f000 fc83 	bl	8009cd4 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80093ce:	4b12      	ldr	r3, [pc, #72]	; (8009418 <W25qxx_WaitForWriteEnd+0x54>)
 80093d0:	2200      	movs	r2, #0
 80093d2:	2108      	movs	r1, #8
 80093d4:	0018      	movs	r0, r3
 80093d6:	f000 ffcc 	bl	800a372 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 80093da:	2005      	movs	r0, #5
 80093dc:	f7ff feee 	bl	80091bc <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80093e0:	20a5      	movs	r0, #165	; 0xa5
 80093e2:	f7ff feeb 	bl	80091bc <W25qxx_Spi>
 80093e6:	0003      	movs	r3, r0
 80093e8:	0019      	movs	r1, r3
 80093ea:	4b0c      	ldr	r3, [pc, #48]	; (800941c <W25qxx_WaitForWriteEnd+0x58>)
 80093ec:	2224      	movs	r2, #36	; 0x24
 80093ee:	5499      	strb	r1, [r3, r2]
		W25qxx_Delay(1);
 80093f0:	2001      	movs	r0, #1
 80093f2:	f000 fc6f 	bl	8009cd4 <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 80093f6:	4b09      	ldr	r3, [pc, #36]	; (800941c <W25qxx_WaitForWriteEnd+0x58>)
 80093f8:	2224      	movs	r2, #36	; 0x24
 80093fa:	5c9b      	ldrb	r3, [r3, r2]
 80093fc:	001a      	movs	r2, r3
 80093fe:	2301      	movs	r3, #1
 8009400:	4013      	ands	r3, r2
 8009402:	d1ed      	bne.n	80093e0 <W25qxx_WaitForWriteEnd+0x1c>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8009404:	4b04      	ldr	r3, [pc, #16]	; (8009418 <W25qxx_WaitForWriteEnd+0x54>)
 8009406:	2201      	movs	r2, #1
 8009408:	2108      	movs	r1, #8
 800940a:	0018      	movs	r0, r3
 800940c:	f000 ffb1 	bl	800a372 <HAL_GPIO_WritePin>
}
 8009410:	46c0      	nop			; (mov r8, r8)
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
 8009416:	46c0      	nop			; (mov r8, r8)
 8009418:	50000c00 	.word	0x50000c00
 800941c:	20000d74 	.word	0x20000d74

08009420 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b082      	sub	sp, #8
 8009424:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8009426:	4b58      	ldr	r3, [pc, #352]	; (8009588 <W25qxx_Init+0x168>)
 8009428:	2227      	movs	r2, #39	; 0x27
 800942a:	2101      	movs	r1, #1
 800942c:	5499      	strb	r1, [r3, r2]
	while (HAL_GetTick() < 100)
 800942e:	e002      	b.n	8009436 <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8009430:	2001      	movs	r0, #1
 8009432:	f000 fc4f 	bl	8009cd4 <HAL_Delay>
	while (HAL_GetTick() < 100)
 8009436:	f000 fc43 	bl	8009cc0 <HAL_GetTick>
 800943a:	0003      	movs	r3, r0
 800943c:	2b63      	cmp	r3, #99	; 0x63
 800943e:	d9f7      	bls.n	8009430 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8009440:	4b52      	ldr	r3, [pc, #328]	; (800958c <W25qxx_Init+0x16c>)
 8009442:	2201      	movs	r2, #1
 8009444:	2108      	movs	r1, #8
 8009446:	0018      	movs	r0, r3
 8009448:	f000 ff93 	bl	800a372 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 800944c:	2064      	movs	r0, #100	; 0x64
 800944e:	f000 fc41 	bl	8009cd4 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 8009452:	f7ff fecb 	bl	80091ec <W25qxx_ReadID>
 8009456:	0003      	movs	r3, r0
 8009458:	607b      	str	r3, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	22ff      	movs	r2, #255	; 0xff
 800945e:	4013      	ands	r3, r2
 8009460:	3b11      	subs	r3, #17
 8009462:	2b0f      	cmp	r3, #15
 8009464:	d84d      	bhi.n	8009502 <W25qxx_Init+0xe2>
 8009466:	009a      	lsls	r2, r3, #2
 8009468:	4b49      	ldr	r3, [pc, #292]	; (8009590 <W25qxx_Init+0x170>)
 800946a:	18d3      	adds	r3, r2, r3
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	469f      	mov	pc, r3
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8009470:	4b45      	ldr	r3, [pc, #276]	; (8009588 <W25qxx_Init+0x168>)
 8009472:	220a      	movs	r2, #10
 8009474:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 8009476:	4b44      	ldr	r3, [pc, #272]	; (8009588 <W25qxx_Init+0x168>)
 8009478:	2280      	movs	r2, #128	; 0x80
 800947a:	00d2      	lsls	r2, r2, #3
 800947c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 800947e:	e046      	b.n	800950e <W25qxx_Init+0xee>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8009480:	4b41      	ldr	r3, [pc, #260]	; (8009588 <W25qxx_Init+0x168>)
 8009482:	2209      	movs	r2, #9
 8009484:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8009486:	4b40      	ldr	r3, [pc, #256]	; (8009588 <W25qxx_Init+0x168>)
 8009488:	2280      	movs	r2, #128	; 0x80
 800948a:	0092      	lsls	r2, r2, #2
 800948c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 800948e:	e03e      	b.n	800950e <W25qxx_Init+0xee>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8009490:	4b3d      	ldr	r3, [pc, #244]	; (8009588 <W25qxx_Init+0x168>)
 8009492:	2208      	movs	r2, #8
 8009494:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8009496:	4b3c      	ldr	r3, [pc, #240]	; (8009588 <W25qxx_Init+0x168>)
 8009498:	2280      	movs	r2, #128	; 0x80
 800949a:	0052      	lsls	r2, r2, #1
 800949c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 800949e:	e036      	b.n	800950e <W25qxx_Init+0xee>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 80094a0:	4b39      	ldr	r3, [pc, #228]	; (8009588 <W25qxx_Init+0x168>)
 80094a2:	2207      	movs	r2, #7
 80094a4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 80094a6:	4b38      	ldr	r3, [pc, #224]	; (8009588 <W25qxx_Init+0x168>)
 80094a8:	2280      	movs	r2, #128	; 0x80
 80094aa:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 80094ac:	e02f      	b.n	800950e <W25qxx_Init+0xee>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 80094ae:	4b36      	ldr	r3, [pc, #216]	; (8009588 <W25qxx_Init+0x168>)
 80094b0:	2206      	movs	r2, #6
 80094b2:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 80094b4:	4b34      	ldr	r3, [pc, #208]	; (8009588 <W25qxx_Init+0x168>)
 80094b6:	2240      	movs	r2, #64	; 0x40
 80094b8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 80094ba:	e028      	b.n	800950e <W25qxx_Init+0xee>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 80094bc:	4b32      	ldr	r3, [pc, #200]	; (8009588 <W25qxx_Init+0x168>)
 80094be:	2205      	movs	r2, #5
 80094c0:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 80094c2:	4b31      	ldr	r3, [pc, #196]	; (8009588 <W25qxx_Init+0x168>)
 80094c4:	2220      	movs	r2, #32
 80094c6:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 80094c8:	e021      	b.n	800950e <W25qxx_Init+0xee>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 80094ca:	4b2f      	ldr	r3, [pc, #188]	; (8009588 <W25qxx_Init+0x168>)
 80094cc:	2204      	movs	r2, #4
 80094ce:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 80094d0:	4b2d      	ldr	r3, [pc, #180]	; (8009588 <W25qxx_Init+0x168>)
 80094d2:	2210      	movs	r2, #16
 80094d4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 80094d6:	e01a      	b.n	800950e <W25qxx_Init+0xee>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 80094d8:	4b2b      	ldr	r3, [pc, #172]	; (8009588 <W25qxx_Init+0x168>)
 80094da:	2203      	movs	r2, #3
 80094dc:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 80094de:	4b2a      	ldr	r3, [pc, #168]	; (8009588 <W25qxx_Init+0x168>)
 80094e0:	2208      	movs	r2, #8
 80094e2:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 80094e4:	e013      	b.n	800950e <W25qxx_Init+0xee>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 80094e6:	4b28      	ldr	r3, [pc, #160]	; (8009588 <W25qxx_Init+0x168>)
 80094e8:	2202      	movs	r2, #2
 80094ea:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 80094ec:	4b26      	ldr	r3, [pc, #152]	; (8009588 <W25qxx_Init+0x168>)
 80094ee:	2204      	movs	r2, #4
 80094f0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 80094f2:	e00c      	b.n	800950e <W25qxx_Init+0xee>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 80094f4:	4b24      	ldr	r3, [pc, #144]	; (8009588 <W25qxx_Init+0x168>)
 80094f6:	2201      	movs	r2, #1
 80094f8:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 80094fa:	4b23      	ldr	r3, [pc, #140]	; (8009588 <W25qxx_Init+0x168>)
 80094fc:	2202      	movs	r2, #2
 80094fe:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 8009500:	e005      	b.n	800950e <W25qxx_Init+0xee>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 8009502:	4b21      	ldr	r3, [pc, #132]	; (8009588 <W25qxx_Init+0x168>)
 8009504:	2227      	movs	r2, #39	; 0x27
 8009506:	2100      	movs	r1, #0
 8009508:	5499      	strb	r1, [r3, r2]
		return false;
 800950a:	2300      	movs	r3, #0
 800950c:	e038      	b.n	8009580 <W25qxx_Init+0x160>
	}
	w25qxx.PageSize = 256;
 800950e:	4b1e      	ldr	r3, [pc, #120]	; (8009588 <W25qxx_Init+0x168>)
 8009510:	2280      	movs	r2, #128	; 0x80
 8009512:	0052      	lsls	r2, r2, #1
 8009514:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8009516:	4b1c      	ldr	r3, [pc, #112]	; (8009588 <W25qxx_Init+0x168>)
 8009518:	2280      	movs	r2, #128	; 0x80
 800951a:	0152      	lsls	r2, r2, #5
 800951c:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 800951e:	4b1a      	ldr	r3, [pc, #104]	; (8009588 <W25qxx_Init+0x168>)
 8009520:	69db      	ldr	r3, [r3, #28]
 8009522:	011a      	lsls	r2, r3, #4
 8009524:	4b18      	ldr	r3, [pc, #96]	; (8009588 <W25qxx_Init+0x168>)
 8009526:	615a      	str	r2, [r3, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8009528:	4b17      	ldr	r3, [pc, #92]	; (8009588 <W25qxx_Init+0x168>)
 800952a:	695a      	ldr	r2, [r3, #20]
 800952c:	4b16      	ldr	r3, [pc, #88]	; (8009588 <W25qxx_Init+0x168>)
 800952e:	691b      	ldr	r3, [r3, #16]
 8009530:	435a      	muls	r2, r3
 8009532:	4b15      	ldr	r3, [pc, #84]	; (8009588 <W25qxx_Init+0x168>)
 8009534:	895b      	ldrh	r3, [r3, #10]
 8009536:	0019      	movs	r1, r3
 8009538:	0010      	movs	r0, r2
 800953a:	f7f6 fe07 	bl	800014c <__udivsi3>
 800953e:	0003      	movs	r3, r0
 8009540:	001a      	movs	r2, r3
 8009542:	4b11      	ldr	r3, [pc, #68]	; (8009588 <W25qxx_Init+0x168>)
 8009544:	60da      	str	r2, [r3, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8009546:	4b10      	ldr	r3, [pc, #64]	; (8009588 <W25qxx_Init+0x168>)
 8009548:	691b      	ldr	r3, [r3, #16]
 800954a:	011a      	lsls	r2, r3, #4
 800954c:	4b0e      	ldr	r3, [pc, #56]	; (8009588 <W25qxx_Init+0x168>)
 800954e:	619a      	str	r2, [r3, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8009550:	4b0d      	ldr	r3, [pc, #52]	; (8009588 <W25qxx_Init+0x168>)
 8009552:	695a      	ldr	r2, [r3, #20]
 8009554:	4b0c      	ldr	r3, [pc, #48]	; (8009588 <W25qxx_Init+0x168>)
 8009556:	691b      	ldr	r3, [r3, #16]
 8009558:	4353      	muls	r3, r2
 800955a:	0a9a      	lsrs	r2, r3, #10
 800955c:	4b0a      	ldr	r3, [pc, #40]	; (8009588 <W25qxx_Init+0x168>)
 800955e:	621a      	str	r2, [r3, #32]
	W25qxx_ReadUniqID();
 8009560:	f7ff fe7c 	bl	800925c <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8009564:	2001      	movs	r0, #1
 8009566:	f7ff fed5 	bl	8009314 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 800956a:	2002      	movs	r0, #2
 800956c:	f7ff fed2 	bl	8009314 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8009570:	2003      	movs	r0, #3
 8009572:	f7ff fecf 	bl	8009314 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 8009576:	4b04      	ldr	r3, [pc, #16]	; (8009588 <W25qxx_Init+0x168>)
 8009578:	2227      	movs	r2, #39	; 0x27
 800957a:	2100      	movs	r1, #0
 800957c:	5499      	strb	r1, [r3, r2]
	return true;
 800957e:	2301      	movs	r3, #1
}
 8009580:	0018      	movs	r0, r3
 8009582:	46bd      	mov	sp, r7
 8009584:	b002      	add	sp, #8
 8009586:	bd80      	pop	{r7, pc}
 8009588:	20000d74 	.word	0x20000d74
 800958c:	50000c00 	.word	0x50000c00
 8009590:	080139a8 	.word	0x080139a8

08009594 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b082      	sub	sp, #8
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 800959c:	e002      	b.n	80095a4 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 800959e:	2001      	movs	r0, #1
 80095a0:	f000 fb98 	bl	8009cd4 <HAL_Delay>
	while (w25qxx.Lock == 1)
 80095a4:	4b26      	ldr	r3, [pc, #152]	; (8009640 <W25qxx_EraseSector+0xac>)
 80095a6:	2227      	movs	r2, #39	; 0x27
 80095a8:	5c9b      	ldrb	r3, [r3, r2]
 80095aa:	2b01      	cmp	r3, #1
 80095ac:	d0f7      	beq.n	800959e <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 80095ae:	4b24      	ldr	r3, [pc, #144]	; (8009640 <W25qxx_EraseSector+0xac>)
 80095b0:	2227      	movs	r2, #39	; 0x27
 80095b2:	2101      	movs	r1, #1
 80095b4:	5499      	strb	r1, [r3, r2]
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
#endif
	W25qxx_WaitForWriteEnd();
 80095b6:	f7ff ff05 	bl	80093c4 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 80095ba:	4b21      	ldr	r3, [pc, #132]	; (8009640 <W25qxx_EraseSector+0xac>)
 80095bc:	691a      	ldr	r2, [r3, #16]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	4353      	muls	r3, r2
 80095c2:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 80095c4:	f7ff fe8c 	bl	80092e0 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80095c8:	4b1e      	ldr	r3, [pc, #120]	; (8009644 <W25qxx_EraseSector+0xb0>)
 80095ca:	2200      	movs	r2, #0
 80095cc:	2108      	movs	r1, #8
 80095ce:	0018      	movs	r0, r3
 80095d0:	f000 fecf 	bl	800a372 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 80095d4:	4b1a      	ldr	r3, [pc, #104]	; (8009640 <W25qxx_EraseSector+0xac>)
 80095d6:	781b      	ldrb	r3, [r3, #0]
 80095d8:	2b08      	cmp	r3, #8
 80095da:	d909      	bls.n	80095f0 <W25qxx_EraseSector+0x5c>
	{
		W25qxx_Spi(0x21);
 80095dc:	2021      	movs	r0, #33	; 0x21
 80095de:	f7ff fded 	bl	80091bc <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	0e1b      	lsrs	r3, r3, #24
 80095e6:	b2db      	uxtb	r3, r3
 80095e8:	0018      	movs	r0, r3
 80095ea:	f7ff fde7 	bl	80091bc <W25qxx_Spi>
 80095ee:	e002      	b.n	80095f6 <W25qxx_EraseSector+0x62>
	}
	else
	{
		W25qxx_Spi(0x20);
 80095f0:	2020      	movs	r0, #32
 80095f2:	f7ff fde3 	bl	80091bc <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	0c1b      	lsrs	r3, r3, #16
 80095fa:	b2db      	uxtb	r3, r3
 80095fc:	0018      	movs	r0, r3
 80095fe:	f7ff fddd 	bl	80091bc <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	0a1b      	lsrs	r3, r3, #8
 8009606:	b2db      	uxtb	r3, r3
 8009608:	0018      	movs	r0, r3
 800960a:	f7ff fdd7 	bl	80091bc <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	b2db      	uxtb	r3, r3
 8009612:	0018      	movs	r0, r3
 8009614:	f7ff fdd2 	bl	80091bc <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8009618:	4b0a      	ldr	r3, [pc, #40]	; (8009644 <W25qxx_EraseSector+0xb0>)
 800961a:	2201      	movs	r2, #1
 800961c:	2108      	movs	r1, #8
 800961e:	0018      	movs	r0, r3
 8009620:	f000 fea7 	bl	800a372 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8009624:	f7ff fece 	bl	80093c4 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
#endif
	W25qxx_Delay(1);
 8009628:	2001      	movs	r0, #1
 800962a:	f000 fb53 	bl	8009cd4 <HAL_Delay>
	w25qxx.Lock = 0;
 800962e:	4b04      	ldr	r3, [pc, #16]	; (8009640 <W25qxx_EraseSector+0xac>)
 8009630:	2227      	movs	r2, #39	; 0x27
 8009632:	2100      	movs	r1, #0
 8009634:	5499      	strb	r1, [r3, r2]
}
 8009636:	46c0      	nop			; (mov r8, r8)
 8009638:	46bd      	mov	sp, r7
 800963a:	b002      	add	sp, #8
 800963c:	bd80      	pop	{r7, pc}
 800963e:	46c0      	nop			; (mov r8, r8)
 8009640:	20000d74 	.word	0x20000d74
 8009644:	50000c00 	.word	0x50000c00

08009648 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b082      	sub	sp, #8
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8009650:	4b07      	ldr	r3, [pc, #28]	; (8009670 <W25qxx_SectorToPage+0x28>)
 8009652:	691b      	ldr	r3, [r3, #16]
 8009654:	687a      	ldr	r2, [r7, #4]
 8009656:	435a      	muls	r2, r3
 8009658:	4b05      	ldr	r3, [pc, #20]	; (8009670 <W25qxx_SectorToPage+0x28>)
 800965a:	895b      	ldrh	r3, [r3, #10]
 800965c:	0019      	movs	r1, r3
 800965e:	0010      	movs	r0, r2
 8009660:	f7f6 fd74 	bl	800014c <__udivsi3>
 8009664:	0003      	movs	r3, r0
}
 8009666:	0018      	movs	r0, r3
 8009668:	46bd      	mov	sp, r7
 800966a:	b002      	add	sp, #8
 800966c:	bd80      	pop	{r7, pc}
 800966e:	46c0      	nop			; (mov r8, r8)
 8009670:	20000d74 	.word	0x20000d74

08009674 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b084      	sub	sp, #16
 8009678:	af00      	add	r7, sp, #0
 800967a:	60f8      	str	r0, [r7, #12]
 800967c:	60b9      	str	r1, [r7, #8]
 800967e:	607a      	str	r2, [r7, #4]
 8009680:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8009682:	e002      	b.n	800968a <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8009684:	2001      	movs	r0, #1
 8009686:	f000 fb25 	bl	8009cd4 <HAL_Delay>
	while (w25qxx.Lock == 1)
 800968a:	4b3a      	ldr	r3, [pc, #232]	; (8009774 <W25qxx_WritePage+0x100>)
 800968c:	2227      	movs	r2, #39	; 0x27
 800968e:	5c9b      	ldrb	r3, [r3, r2]
 8009690:	2b01      	cmp	r3, #1
 8009692:	d0f7      	beq.n	8009684 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 8009694:	4b37      	ldr	r3, [pc, #220]	; (8009774 <W25qxx_WritePage+0x100>)
 8009696:	2227      	movs	r2, #39	; 0x27
 8009698:	2101      	movs	r1, #1
 800969a:	5499      	strb	r1, [r3, r2]
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 800969c:	683a      	ldr	r2, [r7, #0]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	18d3      	adds	r3, r2, r3
 80096a2:	4a34      	ldr	r2, [pc, #208]	; (8009774 <W25qxx_WritePage+0x100>)
 80096a4:	8952      	ldrh	r2, [r2, #10]
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d802      	bhi.n	80096b0 <W25qxx_WritePage+0x3c>
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d105      	bne.n	80096bc <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80096b0:	4b30      	ldr	r3, [pc, #192]	; (8009774 <W25qxx_WritePage+0x100>)
 80096b2:	895b      	ldrh	r3, [r3, #10]
 80096b4:	001a      	movs	r2, r3
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	1ad3      	subs	r3, r2, r3
 80096ba:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 80096bc:	687a      	ldr	r2, [r7, #4]
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	18d3      	adds	r3, r2, r3
 80096c2:	4a2c      	ldr	r2, [pc, #176]	; (8009774 <W25qxx_WritePage+0x100>)
 80096c4:	8952      	ldrh	r2, [r2, #10]
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d905      	bls.n	80096d6 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80096ca:	4b2a      	ldr	r3, [pc, #168]	; (8009774 <W25qxx_WritePage+0x100>)
 80096cc:	895b      	ldrh	r3, [r3, #10]
 80096ce:	001a      	movs	r2, r3
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	1ad3      	subs	r3, r2, r3
 80096d4:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	W25qxx_WaitForWriteEnd();
 80096d6:	f7ff fe75 	bl	80093c4 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 80096da:	f7ff fe01 	bl	80092e0 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80096de:	4b26      	ldr	r3, [pc, #152]	; (8009778 <W25qxx_WritePage+0x104>)
 80096e0:	2200      	movs	r2, #0
 80096e2:	2108      	movs	r1, #8
 80096e4:	0018      	movs	r0, r3
 80096e6:	f000 fe44 	bl	800a372 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 80096ea:	4b22      	ldr	r3, [pc, #136]	; (8009774 <W25qxx_WritePage+0x100>)
 80096ec:	895b      	ldrh	r3, [r3, #10]
 80096ee:	001a      	movs	r2, r3
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	4353      	muls	r3, r2
 80096f4:	687a      	ldr	r2, [r7, #4]
 80096f6:	18d3      	adds	r3, r2, r3
 80096f8:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 80096fa:	4b1e      	ldr	r3, [pc, #120]	; (8009774 <W25qxx_WritePage+0x100>)
 80096fc:	781b      	ldrb	r3, [r3, #0]
 80096fe:	2b08      	cmp	r3, #8
 8009700:	d909      	bls.n	8009716 <W25qxx_WritePage+0xa2>
	{
		W25qxx_Spi(0x12);
 8009702:	2012      	movs	r0, #18
 8009704:	f7ff fd5a 	bl	80091bc <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	0e1b      	lsrs	r3, r3, #24
 800970c:	b2db      	uxtb	r3, r3
 800970e:	0018      	movs	r0, r3
 8009710:	f7ff fd54 	bl	80091bc <W25qxx_Spi>
 8009714:	e002      	b.n	800971c <W25qxx_WritePage+0xa8>
	}
	else
	{
		W25qxx_Spi(0x02);
 8009716:	2002      	movs	r0, #2
 8009718:	f7ff fd50 	bl	80091bc <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	0c1b      	lsrs	r3, r3, #16
 8009720:	b2db      	uxtb	r3, r3
 8009722:	0018      	movs	r0, r3
 8009724:	f7ff fd4a 	bl	80091bc <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	0a1b      	lsrs	r3, r3, #8
 800972c:	b2db      	uxtb	r3, r3
 800972e:	0018      	movs	r0, r3
 8009730:	f7ff fd44 	bl	80091bc <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	b2db      	uxtb	r3, r3
 8009738:	0018      	movs	r0, r3
 800973a:	f7ff fd3f 	bl	80091bc <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	b29a      	uxth	r2, r3
 8009742:	68f9      	ldr	r1, [r7, #12]
 8009744:	480d      	ldr	r0, [pc, #52]	; (800977c <W25qxx_WritePage+0x108>)
 8009746:	2364      	movs	r3, #100	; 0x64
 8009748:	f001 fd3e 	bl	800b1c8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800974c:	4b0a      	ldr	r3, [pc, #40]	; (8009778 <W25qxx_WritePage+0x104>)
 800974e:	2201      	movs	r2, #1
 8009750:	2108      	movs	r1, #8
 8009752:	0018      	movs	r0, r3
 8009754:	f000 fe0d 	bl	800a372 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8009758:	f7ff fe34 	bl	80093c4 <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 800975c:	2001      	movs	r0, #1
 800975e:	f000 fab9 	bl	8009cd4 <HAL_Delay>
	w25qxx.Lock = 0;
 8009762:	4b04      	ldr	r3, [pc, #16]	; (8009774 <W25qxx_WritePage+0x100>)
 8009764:	2227      	movs	r2, #39	; 0x27
 8009766:	2100      	movs	r1, #0
 8009768:	5499      	strb	r1, [r3, r2]
}
 800976a:	46c0      	nop			; (mov r8, r8)
 800976c:	46bd      	mov	sp, r7
 800976e:	b004      	add	sp, #16
 8009770:	bd80      	pop	{r7, pc}
 8009772:	46c0      	nop			; (mov r8, r8)
 8009774:	20000d74 	.word	0x20000d74
 8009778:	50000c00 	.word	0x50000c00
 800977c:	200002e8 	.word	0x200002e8

08009780 <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8009780:	b590      	push	{r4, r7, lr}
 8009782:	b089      	sub	sp, #36	; 0x24
 8009784:	af00      	add	r7, sp, #0
 8009786:	60f8      	str	r0, [r7, #12]
 8009788:	60b9      	str	r1, [r7, #8]
 800978a:	607a      	str	r2, [r7, #4]
 800978c:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 800978e:	4b2d      	ldr	r3, [pc, #180]	; (8009844 <W25qxx_WriteSector+0xc4>)
 8009790:	691b      	ldr	r3, [r3, #16]
 8009792:	683a      	ldr	r2, [r7, #0]
 8009794:	429a      	cmp	r2, r3
 8009796:	d802      	bhi.n	800979e <W25qxx_WriteSector+0x1e>
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d102      	bne.n	80097a4 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 800979e:	4b29      	ldr	r3, [pc, #164]	; (8009844 <W25qxx_WriteSector+0xc4>)
 80097a0:	691b      	ldr	r3, [r3, #16]
 80097a2:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 80097a4:	4b27      	ldr	r3, [pc, #156]	; (8009844 <W25qxx_WriteSector+0xc4>)
 80097a6:	691b      	ldr	r3, [r3, #16]
 80097a8:	687a      	ldr	r2, [r7, #4]
 80097aa:	429a      	cmp	r2, r3
 80097ac:	d245      	bcs.n	800983a <W25qxx_WriteSector+0xba>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 80097ae:	687a      	ldr	r2, [r7, #4]
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	18d2      	adds	r2, r2, r3
 80097b4:	4b23      	ldr	r3, [pc, #140]	; (8009844 <W25qxx_WriteSector+0xc4>)
 80097b6:	691b      	ldr	r3, [r3, #16]
 80097b8:	429a      	cmp	r2, r3
 80097ba:	d905      	bls.n	80097c8 <W25qxx_WriteSector+0x48>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 80097bc:	4b21      	ldr	r3, [pc, #132]	; (8009844 <W25qxx_WriteSector+0xc4>)
 80097be:	691a      	ldr	r2, [r3, #16]
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	1ad3      	subs	r3, r2, r3
 80097c4:	61bb      	str	r3, [r7, #24]
 80097c6:	e001      	b.n	80097cc <W25qxx_WriteSector+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	0018      	movs	r0, r3
 80097d0:	f7ff ff3a 	bl	8009648 <W25qxx_SectorToPage>
 80097d4:	0004      	movs	r4, r0
 80097d6:	4b1b      	ldr	r3, [pc, #108]	; (8009844 <W25qxx_WriteSector+0xc4>)
 80097d8:	895b      	ldrh	r3, [r3, #10]
 80097da:	0019      	movs	r1, r3
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f7f6 fcb5 	bl	800014c <__udivsi3>
 80097e2:	0003      	movs	r3, r0
 80097e4:	18e3      	adds	r3, r4, r3
 80097e6:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 80097e8:	4b16      	ldr	r3, [pc, #88]	; (8009844 <W25qxx_WriteSector+0xc4>)
 80097ea:	895b      	ldrh	r3, [r3, #10]
 80097ec:	001a      	movs	r2, r3
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	0011      	movs	r1, r2
 80097f2:	0018      	movs	r0, r3
 80097f4:	f7f6 fd30 	bl	8000258 <__aeabi_uidivmod>
 80097f8:	000b      	movs	r3, r1
 80097fa:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 80097fc:	69bb      	ldr	r3, [r7, #24]
 80097fe:	697a      	ldr	r2, [r7, #20]
 8009800:	69f9      	ldr	r1, [r7, #28]
 8009802:	68f8      	ldr	r0, [r7, #12]
 8009804:	f7ff ff36 	bl	8009674 <W25qxx_WritePage>
		StartPage++;
 8009808:	69fb      	ldr	r3, [r7, #28]
 800980a:	3301      	adds	r3, #1
 800980c:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 800980e:	4b0d      	ldr	r3, [pc, #52]	; (8009844 <W25qxx_WriteSector+0xc4>)
 8009810:	895b      	ldrh	r3, [r3, #10]
 8009812:	001a      	movs	r2, r3
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	1a9a      	subs	r2, r3, r2
 8009818:	69bb      	ldr	r3, [r7, #24]
 800981a:	18d3      	adds	r3, r2, r3
 800981c:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 800981e:	4b09      	ldr	r3, [pc, #36]	; (8009844 <W25qxx_WriteSector+0xc4>)
 8009820:	895b      	ldrh	r3, [r3, #10]
 8009822:	001a      	movs	r2, r3
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	1ad3      	subs	r3, r2, r3
 8009828:	68fa      	ldr	r2, [r7, #12]
 800982a:	18d3      	adds	r3, r2, r3
 800982c:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 800982e:	2300      	movs	r3, #0
 8009830:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 8009832:	69bb      	ldr	r3, [r7, #24]
 8009834:	2b00      	cmp	r3, #0
 8009836:	dce1      	bgt.n	80097fc <W25qxx_WriteSector+0x7c>
 8009838:	e000      	b.n	800983c <W25qxx_WriteSector+0xbc>
		return;
 800983a:	46c0      	nop			; (mov r8, r8)
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 800983c:	46bd      	mov	sp, r7
 800983e:	b009      	add	sp, #36	; 0x24
 8009840:	bd90      	pop	{r4, r7, pc}
 8009842:	46c0      	nop			; (mov r8, r8)
 8009844:	20000d74 	.word	0x20000d74

08009848 <W25qxx_ReadByte>:
	W25qxx_Delay(100);
#endif
}
//###################################################################################################################
void W25qxx_ReadByte(uint8_t *pBuffer, uint32_t Bytes_Address)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b082      	sub	sp, #8
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	6039      	str	r1, [r7, #0]
	while (w25qxx.Lock == 1)
 8009852:	e002      	b.n	800985a <W25qxx_ReadByte+0x12>
		W25qxx_Delay(1);
 8009854:	2001      	movs	r0, #1
 8009856:	f000 fa3d 	bl	8009cd4 <HAL_Delay>
	while (w25qxx.Lock == 1)
 800985a:	4b24      	ldr	r3, [pc, #144]	; (80098ec <W25qxx_ReadByte+0xa4>)
 800985c:	2227      	movs	r2, #39	; 0x27
 800985e:	5c9b      	ldrb	r3, [r3, r2]
 8009860:	2b01      	cmp	r3, #1
 8009862:	d0f7      	beq.n	8009854 <W25qxx_ReadByte+0xc>
	w25qxx.Lock = 1;
 8009864:	4b21      	ldr	r3, [pc, #132]	; (80098ec <W25qxx_ReadByte+0xa4>)
 8009866:	2227      	movs	r2, #39	; 0x27
 8009868:	2101      	movs	r1, #1
 800986a:	5499      	strb	r1, [r3, r2]
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx ReadByte at address %d begin...\r\n", Bytes_Address);
#endif
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800986c:	4b20      	ldr	r3, [pc, #128]	; (80098f0 <W25qxx_ReadByte+0xa8>)
 800986e:	2200      	movs	r2, #0
 8009870:	2108      	movs	r1, #8
 8009872:	0018      	movs	r0, r3
 8009874:	f000 fd7d 	bl	800a372 <HAL_GPIO_WritePin>

	if (w25qxx.ID >= W25Q256)
 8009878:	4b1c      	ldr	r3, [pc, #112]	; (80098ec <W25qxx_ReadByte+0xa4>)
 800987a:	781b      	ldrb	r3, [r3, #0]
 800987c:	2b08      	cmp	r3, #8
 800987e:	d909      	bls.n	8009894 <W25qxx_ReadByte+0x4c>
	{
		W25qxx_Spi(0x0C);
 8009880:	200c      	movs	r0, #12
 8009882:	f7ff fc9b 	bl	80091bc <W25qxx_Spi>
		W25qxx_Spi((Bytes_Address & 0xFF000000) >> 24);
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	0e1b      	lsrs	r3, r3, #24
 800988a:	b2db      	uxtb	r3, r3
 800988c:	0018      	movs	r0, r3
 800988e:	f7ff fc95 	bl	80091bc <W25qxx_Spi>
 8009892:	e002      	b.n	800989a <W25qxx_ReadByte+0x52>
	}
	else
	{
		W25qxx_Spi(0x0B);
 8009894:	200b      	movs	r0, #11
 8009896:	f7ff fc91 	bl	80091bc <W25qxx_Spi>
	}
	W25qxx_Spi((Bytes_Address & 0xFF0000) >> 16);
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	0c1b      	lsrs	r3, r3, #16
 800989e:	b2db      	uxtb	r3, r3
 80098a0:	0018      	movs	r0, r3
 80098a2:	f7ff fc8b 	bl	80091bc <W25qxx_Spi>
	W25qxx_Spi((Bytes_Address & 0xFF00) >> 8);
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	0a1b      	lsrs	r3, r3, #8
 80098aa:	b2db      	uxtb	r3, r3
 80098ac:	0018      	movs	r0, r3
 80098ae:	f7ff fc85 	bl	80091bc <W25qxx_Spi>
	W25qxx_Spi(Bytes_Address & 0xFF);
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	b2db      	uxtb	r3, r3
 80098b6:	0018      	movs	r0, r3
 80098b8:	f7ff fc80 	bl	80091bc <W25qxx_Spi>
	W25qxx_Spi(0);
 80098bc:	2000      	movs	r0, #0
 80098be:	f7ff fc7d 	bl	80091bc <W25qxx_Spi>
	*pBuffer = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80098c2:	20a5      	movs	r0, #165	; 0xa5
 80098c4:	f7ff fc7a 	bl	80091bc <W25qxx_Spi>
 80098c8:	0003      	movs	r3, r0
 80098ca:	001a      	movs	r2, r3
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80098d0:	4b07      	ldr	r3, [pc, #28]	; (80098f0 <W25qxx_ReadByte+0xa8>)
 80098d2:	2201      	movs	r2, #1
 80098d4:	2108      	movs	r1, #8
 80098d6:	0018      	movs	r0, r3
 80098d8:	f000 fd4b 	bl	800a372 <HAL_GPIO_WritePin>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadByte 0x%02X done after %d ms\r\n", *pBuffer, HAL_GetTick() - StartTime);
#endif
	w25qxx.Lock = 0;
 80098dc:	4b03      	ldr	r3, [pc, #12]	; (80098ec <W25qxx_ReadByte+0xa4>)
 80098de:	2227      	movs	r2, #39	; 0x27
 80098e0:	2100      	movs	r1, #0
 80098e2:	5499      	strb	r1, [r3, r2]
}
 80098e4:	46c0      	nop			; (mov r8, r8)
 80098e6:	46bd      	mov	sp, r7
 80098e8:	b002      	add	sp, #8
 80098ea:	bd80      	pop	{r7, pc}
 80098ec:	20000d74 	.word	0x20000d74
 80098f0:	50000c00 	.word	0x50000c00

080098f4 <W25qxx_ReadBytes>:
//###################################################################################################################
void W25qxx_ReadBytes(uint8_t *pBuffer, uint32_t ReadAddr, uint32_t NumByteToRead)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b084      	sub	sp, #16
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	60f8      	str	r0, [r7, #12]
 80098fc:	60b9      	str	r1, [r7, #8]
 80098fe:	607a      	str	r2, [r7, #4]
	while (w25qxx.Lock == 1)
 8009900:	e002      	b.n	8009908 <W25qxx_ReadBytes+0x14>
		W25qxx_Delay(1);
 8009902:	2001      	movs	r0, #1
 8009904:	f000 f9e6 	bl	8009cd4 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8009908:	4b26      	ldr	r3, [pc, #152]	; (80099a4 <W25qxx_ReadBytes+0xb0>)
 800990a:	2227      	movs	r2, #39	; 0x27
 800990c:	5c9b      	ldrb	r3, [r3, r2]
 800990e:	2b01      	cmp	r3, #1
 8009910:	d0f7      	beq.n	8009902 <W25qxx_ReadBytes+0xe>
	w25qxx.Lock = 1;
 8009912:	4b24      	ldr	r3, [pc, #144]	; (80099a4 <W25qxx_ReadBytes+0xb0>)
 8009914:	2227      	movs	r2, #39	; 0x27
 8009916:	2101      	movs	r1, #1
 8009918:	5499      	strb	r1, [r3, r2]
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx ReadBytes at Address:%d, %d Bytes  begin...\r\n", ReadAddr, NumByteToRead);
#endif
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800991a:	4b23      	ldr	r3, [pc, #140]	; (80099a8 <W25qxx_ReadBytes+0xb4>)
 800991c:	2200      	movs	r2, #0
 800991e:	2108      	movs	r1, #8
 8009920:	0018      	movs	r0, r3
 8009922:	f000 fd26 	bl	800a372 <HAL_GPIO_WritePin>

	if (w25qxx.ID >= W25Q256)
 8009926:	4b1f      	ldr	r3, [pc, #124]	; (80099a4 <W25qxx_ReadBytes+0xb0>)
 8009928:	781b      	ldrb	r3, [r3, #0]
 800992a:	2b08      	cmp	r3, #8
 800992c:	d909      	bls.n	8009942 <W25qxx_ReadBytes+0x4e>
	{
		W25qxx_Spi(0x0C);
 800992e:	200c      	movs	r0, #12
 8009930:	f7ff fc44 	bl	80091bc <W25qxx_Spi>
		W25qxx_Spi((ReadAddr & 0xFF000000) >> 24);
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	0e1b      	lsrs	r3, r3, #24
 8009938:	b2db      	uxtb	r3, r3
 800993a:	0018      	movs	r0, r3
 800993c:	f7ff fc3e 	bl	80091bc <W25qxx_Spi>
 8009940:	e002      	b.n	8009948 <W25qxx_ReadBytes+0x54>
	}
	else
	{
		W25qxx_Spi(0x0B);
 8009942:	200b      	movs	r0, #11
 8009944:	f7ff fc3a 	bl	80091bc <W25qxx_Spi>
	}
	W25qxx_Spi((ReadAddr & 0xFF0000) >> 16);
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	0c1b      	lsrs	r3, r3, #16
 800994c:	b2db      	uxtb	r3, r3
 800994e:	0018      	movs	r0, r3
 8009950:	f7ff fc34 	bl	80091bc <W25qxx_Spi>
	W25qxx_Spi((ReadAddr & 0xFF00) >> 8);
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	0a1b      	lsrs	r3, r3, #8
 8009958:	b2db      	uxtb	r3, r3
 800995a:	0018      	movs	r0, r3
 800995c:	f7ff fc2e 	bl	80091bc <W25qxx_Spi>
	W25qxx_Spi(ReadAddr & 0xFF);
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	b2db      	uxtb	r3, r3
 8009964:	0018      	movs	r0, r3
 8009966:	f7ff fc29 	bl	80091bc <W25qxx_Spi>
	W25qxx_Spi(0);
 800996a:	2000      	movs	r0, #0
 800996c:	f7ff fc26 	bl	80091bc <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead, 2000);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	b29a      	uxth	r2, r3
 8009974:	23fa      	movs	r3, #250	; 0xfa
 8009976:	00db      	lsls	r3, r3, #3
 8009978:	68f9      	ldr	r1, [r7, #12]
 800997a:	480c      	ldr	r0, [pc, #48]	; (80099ac <W25qxx_ReadBytes+0xb8>)
 800997c:	f001 fd7c 	bl	800b478 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8009980:	4b09      	ldr	r3, [pc, #36]	; (80099a8 <W25qxx_ReadBytes+0xb4>)
 8009982:	2201      	movs	r2, #1
 8009984:	2108      	movs	r1, #8
 8009986:	0018      	movs	r0, r3
 8009988:	f000 fcf3 	bl	800a372 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadBytes done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 800998c:	2001      	movs	r0, #1
 800998e:	f000 f9a1 	bl	8009cd4 <HAL_Delay>
	w25qxx.Lock = 0;
 8009992:	4b04      	ldr	r3, [pc, #16]	; (80099a4 <W25qxx_ReadBytes+0xb0>)
 8009994:	2227      	movs	r2, #39	; 0x27
 8009996:	2100      	movs	r1, #0
 8009998:	5499      	strb	r1, [r3, r2]
}
 800999a:	46c0      	nop			; (mov r8, r8)
 800999c:	46bd      	mov	sp, r7
 800999e:	b004      	add	sp, #16
 80099a0:	bd80      	pop	{r7, pc}
 80099a2:	46c0      	nop			; (mov r8, r8)
 80099a4:	20000d74 	.word	0x20000d74
 80099a8:	50000c00 	.word	0x50000c00
 80099ac:	200002e8 	.word	0x200002e8

080099b0 <W25qxx_ReadPage>:
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b084      	sub	sp, #16
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	60f8      	str	r0, [r7, #12]
 80099b8:	60b9      	str	r1, [r7, #8]
 80099ba:	607a      	str	r2, [r7, #4]
 80099bc:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 80099be:	e002      	b.n	80099c6 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 80099c0:	2001      	movs	r0, #1
 80099c2:	f000 f987 	bl	8009cd4 <HAL_Delay>
	while (w25qxx.Lock == 1)
 80099c6:	4b36      	ldr	r3, [pc, #216]	; (8009aa0 <W25qxx_ReadPage+0xf0>)
 80099c8:	2227      	movs	r2, #39	; 0x27
 80099ca:	5c9b      	ldrb	r3, [r3, r2]
 80099cc:	2b01      	cmp	r3, #1
 80099ce:	d0f7      	beq.n	80099c0 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 80099d0:	4b33      	ldr	r3, [pc, #204]	; (8009aa0 <W25qxx_ReadPage+0xf0>)
 80099d2:	2227      	movs	r2, #39	; 0x27
 80099d4:	2101      	movs	r1, #1
 80099d6:	5499      	strb	r1, [r3, r2]
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 80099d8:	4b31      	ldr	r3, [pc, #196]	; (8009aa0 <W25qxx_ReadPage+0xf0>)
 80099da:	895b      	ldrh	r3, [r3, #10]
 80099dc:	001a      	movs	r2, r3
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d802      	bhi.n	80099ea <W25qxx_ReadPage+0x3a>
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d102      	bne.n	80099f0 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 80099ea:	4b2d      	ldr	r3, [pc, #180]	; (8009aa0 <W25qxx_ReadPage+0xf0>)
 80099ec:	895b      	ldrh	r3, [r3, #10]
 80099ee:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 80099f0:	687a      	ldr	r2, [r7, #4]
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	18d3      	adds	r3, r2, r3
 80099f6:	4a2a      	ldr	r2, [pc, #168]	; (8009aa0 <W25qxx_ReadPage+0xf0>)
 80099f8:	8952      	ldrh	r2, [r2, #10]
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d905      	bls.n	8009a0a <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80099fe:	4b28      	ldr	r3, [pc, #160]	; (8009aa0 <W25qxx_ReadPage+0xf0>)
 8009a00:	895b      	ldrh	r3, [r3, #10]
 8009a02:	001a      	movs	r2, r3
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	1ad3      	subs	r3, r2, r3
 8009a08:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 8009a0a:	4b25      	ldr	r3, [pc, #148]	; (8009aa0 <W25qxx_ReadPage+0xf0>)
 8009a0c:	895b      	ldrh	r3, [r3, #10]
 8009a0e:	001a      	movs	r2, r3
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	4353      	muls	r3, r2
 8009a14:	687a      	ldr	r2, [r7, #4]
 8009a16:	18d3      	adds	r3, r2, r3
 8009a18:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8009a1a:	4b22      	ldr	r3, [pc, #136]	; (8009aa4 <W25qxx_ReadPage+0xf4>)
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	2108      	movs	r1, #8
 8009a20:	0018      	movs	r0, r3
 8009a22:	f000 fca6 	bl	800a372 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8009a26:	4b1e      	ldr	r3, [pc, #120]	; (8009aa0 <W25qxx_ReadPage+0xf0>)
 8009a28:	781b      	ldrb	r3, [r3, #0]
 8009a2a:	2b08      	cmp	r3, #8
 8009a2c:	d909      	bls.n	8009a42 <W25qxx_ReadPage+0x92>
	{
		W25qxx_Spi(0x0C);
 8009a2e:	200c      	movs	r0, #12
 8009a30:	f7ff fbc4 	bl	80091bc <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	0e1b      	lsrs	r3, r3, #24
 8009a38:	b2db      	uxtb	r3, r3
 8009a3a:	0018      	movs	r0, r3
 8009a3c:	f7ff fbbe 	bl	80091bc <W25qxx_Spi>
 8009a40:	e002      	b.n	8009a48 <W25qxx_ReadPage+0x98>
	}
	else
	{
		W25qxx_Spi(0x0B);
 8009a42:	200b      	movs	r0, #11
 8009a44:	f7ff fbba 	bl	80091bc <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	0c1b      	lsrs	r3, r3, #16
 8009a4c:	b2db      	uxtb	r3, r3
 8009a4e:	0018      	movs	r0, r3
 8009a50:	f7ff fbb4 	bl	80091bc <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	0a1b      	lsrs	r3, r3, #8
 8009a58:	b2db      	uxtb	r3, r3
 8009a5a:	0018      	movs	r0, r3
 8009a5c:	f7ff fbae 	bl	80091bc <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	b2db      	uxtb	r3, r3
 8009a64:	0018      	movs	r0, r3
 8009a66:	f7ff fba9 	bl	80091bc <W25qxx_Spi>
	W25qxx_Spi(0);
 8009a6a:	2000      	movs	r0, #0
 8009a6c:	f7ff fba6 	bl	80091bc <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	b29a      	uxth	r2, r3
 8009a74:	68f9      	ldr	r1, [r7, #12]
 8009a76:	480c      	ldr	r0, [pc, #48]	; (8009aa8 <W25qxx_ReadPage+0xf8>)
 8009a78:	2364      	movs	r3, #100	; 0x64
 8009a7a:	f001 fcfd 	bl	800b478 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8009a7e:	4b09      	ldr	r3, [pc, #36]	; (8009aa4 <W25qxx_ReadPage+0xf4>)
 8009a80:	2201      	movs	r2, #1
 8009a82:	2108      	movs	r1, #8
 8009a84:	0018      	movs	r0, r3
 8009a86:	f000 fc74 	bl	800a372 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8009a8a:	2001      	movs	r0, #1
 8009a8c:	f000 f922 	bl	8009cd4 <HAL_Delay>
	w25qxx.Lock = 0;
 8009a90:	4b03      	ldr	r3, [pc, #12]	; (8009aa0 <W25qxx_ReadPage+0xf0>)
 8009a92:	2227      	movs	r2, #39	; 0x27
 8009a94:	2100      	movs	r1, #0
 8009a96:	5499      	strb	r1, [r3, r2]
}
 8009a98:	46c0      	nop			; (mov r8, r8)
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	b004      	add	sp, #16
 8009a9e:	bd80      	pop	{r7, pc}
 8009aa0:	20000d74 	.word	0x20000d74
 8009aa4:	50000c00 	.word	0x50000c00
 8009aa8:	200002e8 	.word	0x200002e8

08009aac <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 8009aac:	b590      	push	{r4, r7, lr}
 8009aae:	b089      	sub	sp, #36	; 0x24
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	60f8      	str	r0, [r7, #12]
 8009ab4:	60b9      	str	r1, [r7, #8]
 8009ab6:	607a      	str	r2, [r7, #4]
 8009ab8:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 8009aba:	4b2d      	ldr	r3, [pc, #180]	; (8009b70 <W25qxx_ReadSector+0xc4>)
 8009abc:	691b      	ldr	r3, [r3, #16]
 8009abe:	683a      	ldr	r2, [r7, #0]
 8009ac0:	429a      	cmp	r2, r3
 8009ac2:	d802      	bhi.n	8009aca <W25qxx_ReadSector+0x1e>
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d102      	bne.n	8009ad0 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 8009aca:	4b29      	ldr	r3, [pc, #164]	; (8009b70 <W25qxx_ReadSector+0xc4>)
 8009acc:	691b      	ldr	r3, [r3, #16]
 8009ace:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8009ad0:	4b27      	ldr	r3, [pc, #156]	; (8009b70 <W25qxx_ReadSector+0xc4>)
 8009ad2:	691b      	ldr	r3, [r3, #16]
 8009ad4:	687a      	ldr	r2, [r7, #4]
 8009ad6:	429a      	cmp	r2, r3
 8009ad8:	d245      	bcs.n	8009b66 <W25qxx_ReadSector+0xba>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 8009ada:	687a      	ldr	r2, [r7, #4]
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	18d2      	adds	r2, r2, r3
 8009ae0:	4b23      	ldr	r3, [pc, #140]	; (8009b70 <W25qxx_ReadSector+0xc4>)
 8009ae2:	691b      	ldr	r3, [r3, #16]
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	d905      	bls.n	8009af4 <W25qxx_ReadSector+0x48>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 8009ae8:	4b21      	ldr	r3, [pc, #132]	; (8009b70 <W25qxx_ReadSector+0xc4>)
 8009aea:	691a      	ldr	r2, [r3, #16]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	1ad3      	subs	r3, r2, r3
 8009af0:	61bb      	str	r3, [r7, #24]
 8009af2:	e001      	b.n	8009af8 <W25qxx_ReadSector+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	0018      	movs	r0, r3
 8009afc:	f7ff fda4 	bl	8009648 <W25qxx_SectorToPage>
 8009b00:	0004      	movs	r4, r0
 8009b02:	4b1b      	ldr	r3, [pc, #108]	; (8009b70 <W25qxx_ReadSector+0xc4>)
 8009b04:	895b      	ldrh	r3, [r3, #10]
 8009b06:	0019      	movs	r1, r3
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f7f6 fb1f 	bl	800014c <__udivsi3>
 8009b0e:	0003      	movs	r3, r0
 8009b10:	18e3      	adds	r3, r4, r3
 8009b12:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8009b14:	4b16      	ldr	r3, [pc, #88]	; (8009b70 <W25qxx_ReadSector+0xc4>)
 8009b16:	895b      	ldrh	r3, [r3, #10]
 8009b18:	001a      	movs	r2, r3
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	0011      	movs	r1, r2
 8009b1e:	0018      	movs	r0, r3
 8009b20:	f7f6 fb9a 	bl	8000258 <__aeabi_uidivmod>
 8009b24:	000b      	movs	r3, r1
 8009b26:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8009b28:	69bb      	ldr	r3, [r7, #24]
 8009b2a:	697a      	ldr	r2, [r7, #20]
 8009b2c:	69f9      	ldr	r1, [r7, #28]
 8009b2e:	68f8      	ldr	r0, [r7, #12]
 8009b30:	f7ff ff3e 	bl	80099b0 <W25qxx_ReadPage>
		StartPage++;
 8009b34:	69fb      	ldr	r3, [r7, #28]
 8009b36:	3301      	adds	r3, #1
 8009b38:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 8009b3a:	4b0d      	ldr	r3, [pc, #52]	; (8009b70 <W25qxx_ReadSector+0xc4>)
 8009b3c:	895b      	ldrh	r3, [r3, #10]
 8009b3e:	001a      	movs	r2, r3
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	1a9a      	subs	r2, r3, r2
 8009b44:	69bb      	ldr	r3, [r7, #24]
 8009b46:	18d3      	adds	r3, r2, r3
 8009b48:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8009b4a:	4b09      	ldr	r3, [pc, #36]	; (8009b70 <W25qxx_ReadSector+0xc4>)
 8009b4c:	895b      	ldrh	r3, [r3, #10]
 8009b4e:	001a      	movs	r2, r3
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	1ad3      	subs	r3, r2, r3
 8009b54:	68fa      	ldr	r2, [r7, #12]
 8009b56:	18d3      	adds	r3, r2, r3
 8009b58:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 8009b5e:	69bb      	ldr	r3, [r7, #24]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	dce1      	bgt.n	8009b28 <W25qxx_ReadSector+0x7c>
 8009b64:	e000      	b.n	8009b68 <W25qxx_ReadSector+0xbc>
		return;
 8009b66:	46c0      	nop			; (mov r8, r8)
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
#endif

}
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	b009      	add	sp, #36	; 0x24
 8009b6c:	bd90      	pop	{r4, r7, pc}
 8009b6e:	46c0      	nop			; (mov r8, r8)
 8009b70:	20000d74 	.word	0x20000d74

08009b74 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8009b74:	480d      	ldr	r0, [pc, #52]	; (8009bac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8009b76:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8009b78:	f7ff fb1a 	bl	80091b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009b7c:	480c      	ldr	r0, [pc, #48]	; (8009bb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8009b7e:	490d      	ldr	r1, [pc, #52]	; (8009bb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8009b80:	4a0d      	ldr	r2, [pc, #52]	; (8009bb8 <LoopForever+0xe>)
  movs r3, #0
 8009b82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009b84:	e002      	b.n	8009b8c <LoopCopyDataInit>

08009b86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009b86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009b88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009b8a:	3304      	adds	r3, #4

08009b8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009b8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009b8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009b90:	d3f9      	bcc.n	8009b86 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009b92:	4a0a      	ldr	r2, [pc, #40]	; (8009bbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8009b94:	4c0a      	ldr	r4, [pc, #40]	; (8009bc0 <LoopForever+0x16>)
  movs r3, #0
 8009b96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009b98:	e001      	b.n	8009b9e <LoopFillZerobss>

08009b9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009b9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009b9c:	3204      	adds	r2, #4

08009b9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009b9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009ba0:	d3fb      	bcc.n	8009b9a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8009ba2:	f005 fa03 	bl	800efac <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8009ba6:	f7f9 fe1f 	bl	80037e8 <main>

08009baa <LoopForever>:

LoopForever:
  b LoopForever
 8009baa:	e7fe      	b.n	8009baa <LoopForever>
  ldr   r0, =_estack
 8009bac:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8009bb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009bb4:	200002b8 	.word	0x200002b8
  ldr r2, =_sidata
 8009bb8:	08013eb0 	.word	0x08013eb0
  ldr r2, =_sbss
 8009bbc:	200002b8 	.word	0x200002b8
  ldr r4, =_ebss
 8009bc0:	20000db0 	.word	0x20000db0

08009bc4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009bc4:	e7fe      	b.n	8009bc4 <ADC1_IRQHandler>
	...

08009bc8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b082      	sub	sp, #8
 8009bcc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8009bce:	1dfb      	adds	r3, r7, #7
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009bd4:	4b0b      	ldr	r3, [pc, #44]	; (8009c04 <HAL_Init+0x3c>)
 8009bd6:	681a      	ldr	r2, [r3, #0]
 8009bd8:	4b0a      	ldr	r3, [pc, #40]	; (8009c04 <HAL_Init+0x3c>)
 8009bda:	2180      	movs	r1, #128	; 0x80
 8009bdc:	0049      	lsls	r1, r1, #1
 8009bde:	430a      	orrs	r2, r1
 8009be0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009be2:	2000      	movs	r0, #0
 8009be4:	f000 f810 	bl	8009c08 <HAL_InitTick>
 8009be8:	1e03      	subs	r3, r0, #0
 8009bea:	d003      	beq.n	8009bf4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8009bec:	1dfb      	adds	r3, r7, #7
 8009bee:	2201      	movs	r2, #1
 8009bf0:	701a      	strb	r2, [r3, #0]
 8009bf2:	e001      	b.n	8009bf8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8009bf4:	f7fe febc 	bl	8008970 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8009bf8:	1dfb      	adds	r3, r7, #7
 8009bfa:	781b      	ldrb	r3, [r3, #0]
}
 8009bfc:	0018      	movs	r0, r3
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	b002      	add	sp, #8
 8009c02:	bd80      	pop	{r7, pc}
 8009c04:	40022000 	.word	0x40022000

08009c08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009c08:	b590      	push	{r4, r7, lr}
 8009c0a:	b085      	sub	sp, #20
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8009c10:	230f      	movs	r3, #15
 8009c12:	18fb      	adds	r3, r7, r3
 8009c14:	2200      	movs	r2, #0
 8009c16:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8009c18:	4b1d      	ldr	r3, [pc, #116]	; (8009c90 <HAL_InitTick+0x88>)
 8009c1a:	781b      	ldrb	r3, [r3, #0]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d02b      	beq.n	8009c78 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8009c20:	4b1c      	ldr	r3, [pc, #112]	; (8009c94 <HAL_InitTick+0x8c>)
 8009c22:	681c      	ldr	r4, [r3, #0]
 8009c24:	4b1a      	ldr	r3, [pc, #104]	; (8009c90 <HAL_InitTick+0x88>)
 8009c26:	781b      	ldrb	r3, [r3, #0]
 8009c28:	0019      	movs	r1, r3
 8009c2a:	23fa      	movs	r3, #250	; 0xfa
 8009c2c:	0098      	lsls	r0, r3, #2
 8009c2e:	f7f6 fa8d 	bl	800014c <__udivsi3>
 8009c32:	0003      	movs	r3, r0
 8009c34:	0019      	movs	r1, r3
 8009c36:	0020      	movs	r0, r4
 8009c38:	f7f6 fa88 	bl	800014c <__udivsi3>
 8009c3c:	0003      	movs	r3, r0
 8009c3e:	0018      	movs	r0, r3
 8009c40:	f000 f93d 	bl	8009ebe <HAL_SYSTICK_Config>
 8009c44:	1e03      	subs	r3, r0, #0
 8009c46:	d112      	bne.n	8009c6e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2b03      	cmp	r3, #3
 8009c4c:	d80a      	bhi.n	8009c64 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009c4e:	6879      	ldr	r1, [r7, #4]
 8009c50:	2301      	movs	r3, #1
 8009c52:	425b      	negs	r3, r3
 8009c54:	2200      	movs	r2, #0
 8009c56:	0018      	movs	r0, r3
 8009c58:	f000 f90c 	bl	8009e74 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8009c5c:	4b0e      	ldr	r3, [pc, #56]	; (8009c98 <HAL_InitTick+0x90>)
 8009c5e:	687a      	ldr	r2, [r7, #4]
 8009c60:	601a      	str	r2, [r3, #0]
 8009c62:	e00d      	b.n	8009c80 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8009c64:	230f      	movs	r3, #15
 8009c66:	18fb      	adds	r3, r7, r3
 8009c68:	2201      	movs	r2, #1
 8009c6a:	701a      	strb	r2, [r3, #0]
 8009c6c:	e008      	b.n	8009c80 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8009c6e:	230f      	movs	r3, #15
 8009c70:	18fb      	adds	r3, r7, r3
 8009c72:	2201      	movs	r2, #1
 8009c74:	701a      	strb	r2, [r3, #0]
 8009c76:	e003      	b.n	8009c80 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8009c78:	230f      	movs	r3, #15
 8009c7a:	18fb      	adds	r3, r7, r3
 8009c7c:	2201      	movs	r2, #1
 8009c7e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8009c80:	230f      	movs	r3, #15
 8009c82:	18fb      	adds	r3, r7, r3
 8009c84:	781b      	ldrb	r3, [r3, #0]
}
 8009c86:	0018      	movs	r0, r3
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	b005      	add	sp, #20
 8009c8c:	bd90      	pop	{r4, r7, pc}
 8009c8e:	46c0      	nop			; (mov r8, r8)
 8009c90:	200000e0 	.word	0x200000e0
 8009c94:	200000d8 	.word	0x200000d8
 8009c98:	200000dc 	.word	0x200000dc

08009c9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8009ca0:	4b05      	ldr	r3, [pc, #20]	; (8009cb8 <HAL_IncTick+0x1c>)
 8009ca2:	781b      	ldrb	r3, [r3, #0]
 8009ca4:	001a      	movs	r2, r3
 8009ca6:	4b05      	ldr	r3, [pc, #20]	; (8009cbc <HAL_IncTick+0x20>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	18d2      	adds	r2, r2, r3
 8009cac:	4b03      	ldr	r3, [pc, #12]	; (8009cbc <HAL_IncTick+0x20>)
 8009cae:	601a      	str	r2, [r3, #0]
}
 8009cb0:	46c0      	nop			; (mov r8, r8)
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}
 8009cb6:	46c0      	nop			; (mov r8, r8)
 8009cb8:	200000e0 	.word	0x200000e0
 8009cbc:	20000d9c 	.word	0x20000d9c

08009cc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	af00      	add	r7, sp, #0
  return uwTick;
 8009cc4:	4b02      	ldr	r3, [pc, #8]	; (8009cd0 <HAL_GetTick+0x10>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
}
 8009cc8:	0018      	movs	r0, r3
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
 8009cce:	46c0      	nop			; (mov r8, r8)
 8009cd0:	20000d9c 	.word	0x20000d9c

08009cd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b084      	sub	sp, #16
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009cdc:	f7ff fff0 	bl	8009cc0 <HAL_GetTick>
 8009ce0:	0003      	movs	r3, r0
 8009ce2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	3301      	adds	r3, #1
 8009cec:	d005      	beq.n	8009cfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009cee:	4b0a      	ldr	r3, [pc, #40]	; (8009d18 <HAL_Delay+0x44>)
 8009cf0:	781b      	ldrb	r3, [r3, #0]
 8009cf2:	001a      	movs	r2, r3
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	189b      	adds	r3, r3, r2
 8009cf8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009cfa:	46c0      	nop			; (mov r8, r8)
 8009cfc:	f7ff ffe0 	bl	8009cc0 <HAL_GetTick>
 8009d00:	0002      	movs	r2, r0
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	1ad3      	subs	r3, r2, r3
 8009d06:	68fa      	ldr	r2, [r7, #12]
 8009d08:	429a      	cmp	r2, r3
 8009d0a:	d8f7      	bhi.n	8009cfc <HAL_Delay+0x28>
  {
  }
}
 8009d0c:	46c0      	nop			; (mov r8, r8)
 8009d0e:	46c0      	nop			; (mov r8, r8)
 8009d10:	46bd      	mov	sp, r7
 8009d12:	b004      	add	sp, #16
 8009d14:	bd80      	pop	{r7, pc}
 8009d16:	46c0      	nop			; (mov r8, r8)
 8009d18:	200000e0 	.word	0x200000e0

08009d1c <__NVIC_EnableIRQ>:
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b082      	sub	sp, #8
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	0002      	movs	r2, r0
 8009d24:	1dfb      	adds	r3, r7, #7
 8009d26:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8009d28:	1dfb      	adds	r3, r7, #7
 8009d2a:	781b      	ldrb	r3, [r3, #0]
 8009d2c:	2b7f      	cmp	r3, #127	; 0x7f
 8009d2e:	d809      	bhi.n	8009d44 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009d30:	1dfb      	adds	r3, r7, #7
 8009d32:	781b      	ldrb	r3, [r3, #0]
 8009d34:	001a      	movs	r2, r3
 8009d36:	231f      	movs	r3, #31
 8009d38:	401a      	ands	r2, r3
 8009d3a:	4b04      	ldr	r3, [pc, #16]	; (8009d4c <__NVIC_EnableIRQ+0x30>)
 8009d3c:	2101      	movs	r1, #1
 8009d3e:	4091      	lsls	r1, r2
 8009d40:	000a      	movs	r2, r1
 8009d42:	601a      	str	r2, [r3, #0]
}
 8009d44:	46c0      	nop			; (mov r8, r8)
 8009d46:	46bd      	mov	sp, r7
 8009d48:	b002      	add	sp, #8
 8009d4a:	bd80      	pop	{r7, pc}
 8009d4c:	e000e100 	.word	0xe000e100

08009d50 <__NVIC_SetPriority>:
{
 8009d50:	b590      	push	{r4, r7, lr}
 8009d52:	b083      	sub	sp, #12
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	0002      	movs	r2, r0
 8009d58:	6039      	str	r1, [r7, #0]
 8009d5a:	1dfb      	adds	r3, r7, #7
 8009d5c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8009d5e:	1dfb      	adds	r3, r7, #7
 8009d60:	781b      	ldrb	r3, [r3, #0]
 8009d62:	2b7f      	cmp	r3, #127	; 0x7f
 8009d64:	d828      	bhi.n	8009db8 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009d66:	4a2f      	ldr	r2, [pc, #188]	; (8009e24 <__NVIC_SetPriority+0xd4>)
 8009d68:	1dfb      	adds	r3, r7, #7
 8009d6a:	781b      	ldrb	r3, [r3, #0]
 8009d6c:	b25b      	sxtb	r3, r3
 8009d6e:	089b      	lsrs	r3, r3, #2
 8009d70:	33c0      	adds	r3, #192	; 0xc0
 8009d72:	009b      	lsls	r3, r3, #2
 8009d74:	589b      	ldr	r3, [r3, r2]
 8009d76:	1dfa      	adds	r2, r7, #7
 8009d78:	7812      	ldrb	r2, [r2, #0]
 8009d7a:	0011      	movs	r1, r2
 8009d7c:	2203      	movs	r2, #3
 8009d7e:	400a      	ands	r2, r1
 8009d80:	00d2      	lsls	r2, r2, #3
 8009d82:	21ff      	movs	r1, #255	; 0xff
 8009d84:	4091      	lsls	r1, r2
 8009d86:	000a      	movs	r2, r1
 8009d88:	43d2      	mvns	r2, r2
 8009d8a:	401a      	ands	r2, r3
 8009d8c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	019b      	lsls	r3, r3, #6
 8009d92:	22ff      	movs	r2, #255	; 0xff
 8009d94:	401a      	ands	r2, r3
 8009d96:	1dfb      	adds	r3, r7, #7
 8009d98:	781b      	ldrb	r3, [r3, #0]
 8009d9a:	0018      	movs	r0, r3
 8009d9c:	2303      	movs	r3, #3
 8009d9e:	4003      	ands	r3, r0
 8009da0:	00db      	lsls	r3, r3, #3
 8009da2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009da4:	481f      	ldr	r0, [pc, #124]	; (8009e24 <__NVIC_SetPriority+0xd4>)
 8009da6:	1dfb      	adds	r3, r7, #7
 8009da8:	781b      	ldrb	r3, [r3, #0]
 8009daa:	b25b      	sxtb	r3, r3
 8009dac:	089b      	lsrs	r3, r3, #2
 8009dae:	430a      	orrs	r2, r1
 8009db0:	33c0      	adds	r3, #192	; 0xc0
 8009db2:	009b      	lsls	r3, r3, #2
 8009db4:	501a      	str	r2, [r3, r0]
}
 8009db6:	e031      	b.n	8009e1c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009db8:	4a1b      	ldr	r2, [pc, #108]	; (8009e28 <__NVIC_SetPriority+0xd8>)
 8009dba:	1dfb      	adds	r3, r7, #7
 8009dbc:	781b      	ldrb	r3, [r3, #0]
 8009dbe:	0019      	movs	r1, r3
 8009dc0:	230f      	movs	r3, #15
 8009dc2:	400b      	ands	r3, r1
 8009dc4:	3b08      	subs	r3, #8
 8009dc6:	089b      	lsrs	r3, r3, #2
 8009dc8:	3306      	adds	r3, #6
 8009dca:	009b      	lsls	r3, r3, #2
 8009dcc:	18d3      	adds	r3, r2, r3
 8009dce:	3304      	adds	r3, #4
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	1dfa      	adds	r2, r7, #7
 8009dd4:	7812      	ldrb	r2, [r2, #0]
 8009dd6:	0011      	movs	r1, r2
 8009dd8:	2203      	movs	r2, #3
 8009dda:	400a      	ands	r2, r1
 8009ddc:	00d2      	lsls	r2, r2, #3
 8009dde:	21ff      	movs	r1, #255	; 0xff
 8009de0:	4091      	lsls	r1, r2
 8009de2:	000a      	movs	r2, r1
 8009de4:	43d2      	mvns	r2, r2
 8009de6:	401a      	ands	r2, r3
 8009de8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	019b      	lsls	r3, r3, #6
 8009dee:	22ff      	movs	r2, #255	; 0xff
 8009df0:	401a      	ands	r2, r3
 8009df2:	1dfb      	adds	r3, r7, #7
 8009df4:	781b      	ldrb	r3, [r3, #0]
 8009df6:	0018      	movs	r0, r3
 8009df8:	2303      	movs	r3, #3
 8009dfa:	4003      	ands	r3, r0
 8009dfc:	00db      	lsls	r3, r3, #3
 8009dfe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009e00:	4809      	ldr	r0, [pc, #36]	; (8009e28 <__NVIC_SetPriority+0xd8>)
 8009e02:	1dfb      	adds	r3, r7, #7
 8009e04:	781b      	ldrb	r3, [r3, #0]
 8009e06:	001c      	movs	r4, r3
 8009e08:	230f      	movs	r3, #15
 8009e0a:	4023      	ands	r3, r4
 8009e0c:	3b08      	subs	r3, #8
 8009e0e:	089b      	lsrs	r3, r3, #2
 8009e10:	430a      	orrs	r2, r1
 8009e12:	3306      	adds	r3, #6
 8009e14:	009b      	lsls	r3, r3, #2
 8009e16:	18c3      	adds	r3, r0, r3
 8009e18:	3304      	adds	r3, #4
 8009e1a:	601a      	str	r2, [r3, #0]
}
 8009e1c:	46c0      	nop			; (mov r8, r8)
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	b003      	add	sp, #12
 8009e22:	bd90      	pop	{r4, r7, pc}
 8009e24:	e000e100 	.word	0xe000e100
 8009e28:	e000ed00 	.word	0xe000ed00

08009e2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b082      	sub	sp, #8
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	1e5a      	subs	r2, r3, #1
 8009e38:	2380      	movs	r3, #128	; 0x80
 8009e3a:	045b      	lsls	r3, r3, #17
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d301      	bcc.n	8009e44 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009e40:	2301      	movs	r3, #1
 8009e42:	e010      	b.n	8009e66 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009e44:	4b0a      	ldr	r3, [pc, #40]	; (8009e70 <SysTick_Config+0x44>)
 8009e46:	687a      	ldr	r2, [r7, #4]
 8009e48:	3a01      	subs	r2, #1
 8009e4a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	425b      	negs	r3, r3
 8009e50:	2103      	movs	r1, #3
 8009e52:	0018      	movs	r0, r3
 8009e54:	f7ff ff7c 	bl	8009d50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009e58:	4b05      	ldr	r3, [pc, #20]	; (8009e70 <SysTick_Config+0x44>)
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009e5e:	4b04      	ldr	r3, [pc, #16]	; (8009e70 <SysTick_Config+0x44>)
 8009e60:	2207      	movs	r2, #7
 8009e62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009e64:	2300      	movs	r3, #0
}
 8009e66:	0018      	movs	r0, r3
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	b002      	add	sp, #8
 8009e6c:	bd80      	pop	{r7, pc}
 8009e6e:	46c0      	nop			; (mov r8, r8)
 8009e70:	e000e010 	.word	0xe000e010

08009e74 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b084      	sub	sp, #16
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	60b9      	str	r1, [r7, #8]
 8009e7c:	607a      	str	r2, [r7, #4]
 8009e7e:	210f      	movs	r1, #15
 8009e80:	187b      	adds	r3, r7, r1
 8009e82:	1c02      	adds	r2, r0, #0
 8009e84:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8009e86:	68ba      	ldr	r2, [r7, #8]
 8009e88:	187b      	adds	r3, r7, r1
 8009e8a:	781b      	ldrb	r3, [r3, #0]
 8009e8c:	b25b      	sxtb	r3, r3
 8009e8e:	0011      	movs	r1, r2
 8009e90:	0018      	movs	r0, r3
 8009e92:	f7ff ff5d 	bl	8009d50 <__NVIC_SetPriority>
}
 8009e96:	46c0      	nop			; (mov r8, r8)
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	b004      	add	sp, #16
 8009e9c:	bd80      	pop	{r7, pc}

08009e9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009e9e:	b580      	push	{r7, lr}
 8009ea0:	b082      	sub	sp, #8
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	0002      	movs	r2, r0
 8009ea6:	1dfb      	adds	r3, r7, #7
 8009ea8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009eaa:	1dfb      	adds	r3, r7, #7
 8009eac:	781b      	ldrb	r3, [r3, #0]
 8009eae:	b25b      	sxtb	r3, r3
 8009eb0:	0018      	movs	r0, r3
 8009eb2:	f7ff ff33 	bl	8009d1c <__NVIC_EnableIRQ>
}
 8009eb6:	46c0      	nop			; (mov r8, r8)
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	b002      	add	sp, #8
 8009ebc:	bd80      	pop	{r7, pc}

08009ebe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009ebe:	b580      	push	{r7, lr}
 8009ec0:	b082      	sub	sp, #8
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	0018      	movs	r0, r3
 8009eca:	f7ff ffaf 	bl	8009e2c <SysTick_Config>
 8009ece:	0003      	movs	r3, r0
}
 8009ed0:	0018      	movs	r0, r3
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	b002      	add	sp, #8
 8009ed6:	bd80      	pop	{r7, pc}

08009ed8 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b082      	sub	sp, #8
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d101      	bne.n	8009eea <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	e050      	b.n	8009f8c <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2225      	movs	r2, #37	; 0x25
 8009eee:	5c9b      	ldrb	r3, [r3, r2]
 8009ef0:	b2db      	uxtb	r3, r3
 8009ef2:	2b02      	cmp	r3, #2
 8009ef4:	d008      	beq.n	8009f08 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2204      	movs	r2, #4
 8009efa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2224      	movs	r2, #36	; 0x24
 8009f00:	2100      	movs	r1, #0
 8009f02:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8009f04:	2301      	movs	r3, #1
 8009f06:	e041      	b.n	8009f8c <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	681a      	ldr	r2, [r3, #0]
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	210e      	movs	r1, #14
 8009f14:	438a      	bics	r2, r1
 8009f16:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f1c:	681a      	ldr	r2, [r3, #0]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f22:	491c      	ldr	r1, [pc, #112]	; (8009f94 <HAL_DMA_Abort+0xbc>)
 8009f24:	400a      	ands	r2, r1
 8009f26:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	681a      	ldr	r2, [r3, #0]
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	2101      	movs	r1, #1
 8009f34:	438a      	bics	r2, r1
 8009f36:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8009f38:	4b17      	ldr	r3, [pc, #92]	; (8009f98 <HAL_DMA_Abort+0xc0>)
 8009f3a:	6859      	ldr	r1, [r3, #4]
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f40:	221c      	movs	r2, #28
 8009f42:	4013      	ands	r3, r2
 8009f44:	2201      	movs	r2, #1
 8009f46:	409a      	lsls	r2, r3
 8009f48:	4b13      	ldr	r3, [pc, #76]	; (8009f98 <HAL_DMA_Abort+0xc0>)
 8009f4a:	430a      	orrs	r2, r1
 8009f4c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f52:	687a      	ldr	r2, [r7, #4]
 8009f54:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8009f56:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d00c      	beq.n	8009f7a <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f64:	681a      	ldr	r2, [r3, #0]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f6a:	490a      	ldr	r1, [pc, #40]	; (8009f94 <HAL_DMA_Abort+0xbc>)
 8009f6c:	400a      	ands	r2, r1
 8009f6e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f74:	687a      	ldr	r2, [r7, #4]
 8009f76:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009f78:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2225      	movs	r2, #37	; 0x25
 8009f7e:	2101      	movs	r1, #1
 8009f80:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2224      	movs	r2, #36	; 0x24
 8009f86:	2100      	movs	r1, #0
 8009f88:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8009f8a:	2300      	movs	r3, #0
}
 8009f8c:	0018      	movs	r0, r3
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	b002      	add	sp, #8
 8009f92:	bd80      	pop	{r7, pc}
 8009f94:	fffffeff 	.word	0xfffffeff
 8009f98:	40020000 	.word	0x40020000

08009f9c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b084      	sub	sp, #16
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009fa4:	210f      	movs	r1, #15
 8009fa6:	187b      	adds	r3, r7, r1
 8009fa8:	2200      	movs	r2, #0
 8009faa:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2225      	movs	r2, #37	; 0x25
 8009fb0:	5c9b      	ldrb	r3, [r3, r2]
 8009fb2:	b2db      	uxtb	r3, r3
 8009fb4:	2b02      	cmp	r3, #2
 8009fb6:	d006      	beq.n	8009fc6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2204      	movs	r2, #4
 8009fbc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8009fbe:	187b      	adds	r3, r7, r1
 8009fc0:	2201      	movs	r2, #1
 8009fc2:	701a      	strb	r2, [r3, #0]
 8009fc4:	e049      	b.n	800a05a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	681a      	ldr	r2, [r3, #0]
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	210e      	movs	r1, #14
 8009fd2:	438a      	bics	r2, r1
 8009fd4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	681a      	ldr	r2, [r3, #0]
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	2101      	movs	r1, #1
 8009fe2:	438a      	bics	r2, r1
 8009fe4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fea:	681a      	ldr	r2, [r3, #0]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ff0:	491d      	ldr	r1, [pc, #116]	; (800a068 <HAL_DMA_Abort_IT+0xcc>)
 8009ff2:	400a      	ands	r2, r1
 8009ff4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8009ff6:	4b1d      	ldr	r3, [pc, #116]	; (800a06c <HAL_DMA_Abort_IT+0xd0>)
 8009ff8:	6859      	ldr	r1, [r3, #4]
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ffe:	221c      	movs	r2, #28
 800a000:	4013      	ands	r3, r2
 800a002:	2201      	movs	r2, #1
 800a004:	409a      	lsls	r2, r3
 800a006:	4b19      	ldr	r3, [pc, #100]	; (800a06c <HAL_DMA_Abort_IT+0xd0>)
 800a008:	430a      	orrs	r2, r1
 800a00a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a010:	687a      	ldr	r2, [r7, #4]
 800a012:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800a014:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d00c      	beq.n	800a038 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a022:	681a      	ldr	r2, [r3, #0]
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a028:	490f      	ldr	r1, [pc, #60]	; (800a068 <HAL_DMA_Abort_IT+0xcc>)
 800a02a:	400a      	ands	r2, r1
 800a02c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a032:	687a      	ldr	r2, [r7, #4]
 800a034:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800a036:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2225      	movs	r2, #37	; 0x25
 800a03c:	2101      	movs	r1, #1
 800a03e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2224      	movs	r2, #36	; 0x24
 800a044:	2100      	movs	r1, #0
 800a046:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d004      	beq.n	800a05a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a054:	687a      	ldr	r2, [r7, #4]
 800a056:	0010      	movs	r0, r2
 800a058:	4798      	blx	r3
    }
  }
  return status;
 800a05a:	230f      	movs	r3, #15
 800a05c:	18fb      	adds	r3, r7, r3
 800a05e:	781b      	ldrb	r3, [r3, #0]
}
 800a060:	0018      	movs	r0, r3
 800a062:	46bd      	mov	sp, r7
 800a064:	b004      	add	sp, #16
 800a066:	bd80      	pop	{r7, pc}
 800a068:	fffffeff 	.word	0xfffffeff
 800a06c:	40020000 	.word	0x40020000

0800a070 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b086      	sub	sp, #24
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a07a:	2300      	movs	r3, #0
 800a07c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a07e:	e147      	b.n	800a310 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	2101      	movs	r1, #1
 800a086:	697a      	ldr	r2, [r7, #20]
 800a088:	4091      	lsls	r1, r2
 800a08a:	000a      	movs	r2, r1
 800a08c:	4013      	ands	r3, r2
 800a08e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d100      	bne.n	800a098 <HAL_GPIO_Init+0x28>
 800a096:	e138      	b.n	800a30a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	685b      	ldr	r3, [r3, #4]
 800a09c:	2203      	movs	r2, #3
 800a09e:	4013      	ands	r3, r2
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	d005      	beq.n	800a0b0 <HAL_GPIO_Init+0x40>
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	685b      	ldr	r3, [r3, #4]
 800a0a8:	2203      	movs	r2, #3
 800a0aa:	4013      	ands	r3, r2
 800a0ac:	2b02      	cmp	r3, #2
 800a0ae:	d130      	bne.n	800a112 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	689b      	ldr	r3, [r3, #8]
 800a0b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	005b      	lsls	r3, r3, #1
 800a0ba:	2203      	movs	r2, #3
 800a0bc:	409a      	lsls	r2, r3
 800a0be:	0013      	movs	r3, r2
 800a0c0:	43da      	mvns	r2, r3
 800a0c2:	693b      	ldr	r3, [r7, #16]
 800a0c4:	4013      	ands	r3, r2
 800a0c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	68da      	ldr	r2, [r3, #12]
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	005b      	lsls	r3, r3, #1
 800a0d0:	409a      	lsls	r2, r3
 800a0d2:	0013      	movs	r3, r2
 800a0d4:	693a      	ldr	r2, [r7, #16]
 800a0d6:	4313      	orrs	r3, r2
 800a0d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	693a      	ldr	r2, [r7, #16]
 800a0de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	685b      	ldr	r3, [r3, #4]
 800a0e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	697b      	ldr	r3, [r7, #20]
 800a0ea:	409a      	lsls	r2, r3
 800a0ec:	0013      	movs	r3, r2
 800a0ee:	43da      	mvns	r2, r3
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	4013      	ands	r3, r2
 800a0f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	685b      	ldr	r3, [r3, #4]
 800a0fa:	091b      	lsrs	r3, r3, #4
 800a0fc:	2201      	movs	r2, #1
 800a0fe:	401a      	ands	r2, r3
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	409a      	lsls	r2, r3
 800a104:	0013      	movs	r3, r2
 800a106:	693a      	ldr	r2, [r7, #16]
 800a108:	4313      	orrs	r3, r2
 800a10a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	693a      	ldr	r2, [r7, #16]
 800a110:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	2203      	movs	r2, #3
 800a118:	4013      	ands	r3, r2
 800a11a:	2b03      	cmp	r3, #3
 800a11c:	d017      	beq.n	800a14e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	68db      	ldr	r3, [r3, #12]
 800a122:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	005b      	lsls	r3, r3, #1
 800a128:	2203      	movs	r2, #3
 800a12a:	409a      	lsls	r2, r3
 800a12c:	0013      	movs	r3, r2
 800a12e:	43da      	mvns	r2, r3
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	4013      	ands	r3, r2
 800a134:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	689a      	ldr	r2, [r3, #8]
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	005b      	lsls	r3, r3, #1
 800a13e:	409a      	lsls	r2, r3
 800a140:	0013      	movs	r3, r2
 800a142:	693a      	ldr	r2, [r7, #16]
 800a144:	4313      	orrs	r3, r2
 800a146:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	693a      	ldr	r2, [r7, #16]
 800a14c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	685b      	ldr	r3, [r3, #4]
 800a152:	2203      	movs	r2, #3
 800a154:	4013      	ands	r3, r2
 800a156:	2b02      	cmp	r3, #2
 800a158:	d123      	bne.n	800a1a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	08da      	lsrs	r2, r3, #3
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	3208      	adds	r2, #8
 800a162:	0092      	lsls	r2, r2, #2
 800a164:	58d3      	ldr	r3, [r2, r3]
 800a166:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800a168:	697b      	ldr	r3, [r7, #20]
 800a16a:	2207      	movs	r2, #7
 800a16c:	4013      	ands	r3, r2
 800a16e:	009b      	lsls	r3, r3, #2
 800a170:	220f      	movs	r2, #15
 800a172:	409a      	lsls	r2, r3
 800a174:	0013      	movs	r3, r2
 800a176:	43da      	mvns	r2, r3
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	4013      	ands	r3, r2
 800a17c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	691a      	ldr	r2, [r3, #16]
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	2107      	movs	r1, #7
 800a186:	400b      	ands	r3, r1
 800a188:	009b      	lsls	r3, r3, #2
 800a18a:	409a      	lsls	r2, r3
 800a18c:	0013      	movs	r3, r2
 800a18e:	693a      	ldr	r2, [r7, #16]
 800a190:	4313      	orrs	r3, r2
 800a192:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	08da      	lsrs	r2, r3, #3
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	3208      	adds	r2, #8
 800a19c:	0092      	lsls	r2, r2, #2
 800a19e:	6939      	ldr	r1, [r7, #16]
 800a1a0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	005b      	lsls	r3, r3, #1
 800a1ac:	2203      	movs	r2, #3
 800a1ae:	409a      	lsls	r2, r3
 800a1b0:	0013      	movs	r3, r2
 800a1b2:	43da      	mvns	r2, r3
 800a1b4:	693b      	ldr	r3, [r7, #16]
 800a1b6:	4013      	ands	r3, r2
 800a1b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	685b      	ldr	r3, [r3, #4]
 800a1be:	2203      	movs	r2, #3
 800a1c0:	401a      	ands	r2, r3
 800a1c2:	697b      	ldr	r3, [r7, #20]
 800a1c4:	005b      	lsls	r3, r3, #1
 800a1c6:	409a      	lsls	r2, r3
 800a1c8:	0013      	movs	r3, r2
 800a1ca:	693a      	ldr	r2, [r7, #16]
 800a1cc:	4313      	orrs	r3, r2
 800a1ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	693a      	ldr	r2, [r7, #16]
 800a1d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	685a      	ldr	r2, [r3, #4]
 800a1da:	23c0      	movs	r3, #192	; 0xc0
 800a1dc:	029b      	lsls	r3, r3, #10
 800a1de:	4013      	ands	r3, r2
 800a1e0:	d100      	bne.n	800a1e4 <HAL_GPIO_Init+0x174>
 800a1e2:	e092      	b.n	800a30a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800a1e4:	4a50      	ldr	r2, [pc, #320]	; (800a328 <HAL_GPIO_Init+0x2b8>)
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	089b      	lsrs	r3, r3, #2
 800a1ea:	3318      	adds	r3, #24
 800a1ec:	009b      	lsls	r3, r3, #2
 800a1ee:	589b      	ldr	r3, [r3, r2]
 800a1f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	2203      	movs	r2, #3
 800a1f6:	4013      	ands	r3, r2
 800a1f8:	00db      	lsls	r3, r3, #3
 800a1fa:	220f      	movs	r2, #15
 800a1fc:	409a      	lsls	r2, r3
 800a1fe:	0013      	movs	r3, r2
 800a200:	43da      	mvns	r2, r3
 800a202:	693b      	ldr	r3, [r7, #16]
 800a204:	4013      	ands	r3, r2
 800a206:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800a208:	687a      	ldr	r2, [r7, #4]
 800a20a:	23a0      	movs	r3, #160	; 0xa0
 800a20c:	05db      	lsls	r3, r3, #23
 800a20e:	429a      	cmp	r2, r3
 800a210:	d013      	beq.n	800a23a <HAL_GPIO_Init+0x1ca>
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	4a45      	ldr	r2, [pc, #276]	; (800a32c <HAL_GPIO_Init+0x2bc>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d00d      	beq.n	800a236 <HAL_GPIO_Init+0x1c6>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	4a44      	ldr	r2, [pc, #272]	; (800a330 <HAL_GPIO_Init+0x2c0>)
 800a21e:	4293      	cmp	r3, r2
 800a220:	d007      	beq.n	800a232 <HAL_GPIO_Init+0x1c2>
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	4a43      	ldr	r2, [pc, #268]	; (800a334 <HAL_GPIO_Init+0x2c4>)
 800a226:	4293      	cmp	r3, r2
 800a228:	d101      	bne.n	800a22e <HAL_GPIO_Init+0x1be>
 800a22a:	2303      	movs	r3, #3
 800a22c:	e006      	b.n	800a23c <HAL_GPIO_Init+0x1cc>
 800a22e:	2305      	movs	r3, #5
 800a230:	e004      	b.n	800a23c <HAL_GPIO_Init+0x1cc>
 800a232:	2302      	movs	r3, #2
 800a234:	e002      	b.n	800a23c <HAL_GPIO_Init+0x1cc>
 800a236:	2301      	movs	r3, #1
 800a238:	e000      	b.n	800a23c <HAL_GPIO_Init+0x1cc>
 800a23a:	2300      	movs	r3, #0
 800a23c:	697a      	ldr	r2, [r7, #20]
 800a23e:	2103      	movs	r1, #3
 800a240:	400a      	ands	r2, r1
 800a242:	00d2      	lsls	r2, r2, #3
 800a244:	4093      	lsls	r3, r2
 800a246:	693a      	ldr	r2, [r7, #16]
 800a248:	4313      	orrs	r3, r2
 800a24a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800a24c:	4936      	ldr	r1, [pc, #216]	; (800a328 <HAL_GPIO_Init+0x2b8>)
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	089b      	lsrs	r3, r3, #2
 800a252:	3318      	adds	r3, #24
 800a254:	009b      	lsls	r3, r3, #2
 800a256:	693a      	ldr	r2, [r7, #16]
 800a258:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a25a:	4b33      	ldr	r3, [pc, #204]	; (800a328 <HAL_GPIO_Init+0x2b8>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	43da      	mvns	r2, r3
 800a264:	693b      	ldr	r3, [r7, #16]
 800a266:	4013      	ands	r3, r2
 800a268:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	685a      	ldr	r2, [r3, #4]
 800a26e:	2380      	movs	r3, #128	; 0x80
 800a270:	035b      	lsls	r3, r3, #13
 800a272:	4013      	ands	r3, r2
 800a274:	d003      	beq.n	800a27e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800a276:	693a      	ldr	r2, [r7, #16]
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	4313      	orrs	r3, r2
 800a27c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a27e:	4b2a      	ldr	r3, [pc, #168]	; (800a328 <HAL_GPIO_Init+0x2b8>)
 800a280:	693a      	ldr	r2, [r7, #16]
 800a282:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800a284:	4b28      	ldr	r3, [pc, #160]	; (800a328 <HAL_GPIO_Init+0x2b8>)
 800a286:	685b      	ldr	r3, [r3, #4]
 800a288:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	43da      	mvns	r2, r3
 800a28e:	693b      	ldr	r3, [r7, #16]
 800a290:	4013      	ands	r3, r2
 800a292:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	685a      	ldr	r2, [r3, #4]
 800a298:	2380      	movs	r3, #128	; 0x80
 800a29a:	039b      	lsls	r3, r3, #14
 800a29c:	4013      	ands	r3, r2
 800a29e:	d003      	beq.n	800a2a8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800a2a0:	693a      	ldr	r2, [r7, #16]
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	4313      	orrs	r3, r2
 800a2a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a2a8:	4b1f      	ldr	r3, [pc, #124]	; (800a328 <HAL_GPIO_Init+0x2b8>)
 800a2aa:	693a      	ldr	r2, [r7, #16]
 800a2ac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800a2ae:	4a1e      	ldr	r2, [pc, #120]	; (800a328 <HAL_GPIO_Init+0x2b8>)
 800a2b0:	2384      	movs	r3, #132	; 0x84
 800a2b2:	58d3      	ldr	r3, [r2, r3]
 800a2b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	43da      	mvns	r2, r3
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	4013      	ands	r3, r2
 800a2be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	685a      	ldr	r2, [r3, #4]
 800a2c4:	2380      	movs	r3, #128	; 0x80
 800a2c6:	029b      	lsls	r3, r3, #10
 800a2c8:	4013      	ands	r3, r2
 800a2ca:	d003      	beq.n	800a2d4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800a2cc:	693a      	ldr	r2, [r7, #16]
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	4313      	orrs	r3, r2
 800a2d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a2d4:	4914      	ldr	r1, [pc, #80]	; (800a328 <HAL_GPIO_Init+0x2b8>)
 800a2d6:	2284      	movs	r2, #132	; 0x84
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800a2dc:	4a12      	ldr	r2, [pc, #72]	; (800a328 <HAL_GPIO_Init+0x2b8>)
 800a2de:	2380      	movs	r3, #128	; 0x80
 800a2e0:	58d3      	ldr	r3, [r2, r3]
 800a2e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	43da      	mvns	r2, r3
 800a2e8:	693b      	ldr	r3, [r7, #16]
 800a2ea:	4013      	ands	r3, r2
 800a2ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	685a      	ldr	r2, [r3, #4]
 800a2f2:	2380      	movs	r3, #128	; 0x80
 800a2f4:	025b      	lsls	r3, r3, #9
 800a2f6:	4013      	ands	r3, r2
 800a2f8:	d003      	beq.n	800a302 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800a2fa:	693a      	ldr	r2, [r7, #16]
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	4313      	orrs	r3, r2
 800a300:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a302:	4909      	ldr	r1, [pc, #36]	; (800a328 <HAL_GPIO_Init+0x2b8>)
 800a304:	2280      	movs	r2, #128	; 0x80
 800a306:	693b      	ldr	r3, [r7, #16]
 800a308:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	3301      	adds	r3, #1
 800a30e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	681a      	ldr	r2, [r3, #0]
 800a314:	697b      	ldr	r3, [r7, #20]
 800a316:	40da      	lsrs	r2, r3
 800a318:	1e13      	subs	r3, r2, #0
 800a31a:	d000      	beq.n	800a31e <HAL_GPIO_Init+0x2ae>
 800a31c:	e6b0      	b.n	800a080 <HAL_GPIO_Init+0x10>
  }
}
 800a31e:	46c0      	nop			; (mov r8, r8)
 800a320:	46c0      	nop			; (mov r8, r8)
 800a322:	46bd      	mov	sp, r7
 800a324:	b006      	add	sp, #24
 800a326:	bd80      	pop	{r7, pc}
 800a328:	40021800 	.word	0x40021800
 800a32c:	50000400 	.word	0x50000400
 800a330:	50000800 	.word	0x50000800
 800a334:	50000c00 	.word	0x50000c00

0800a338 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b084      	sub	sp, #16
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	000a      	movs	r2, r1
 800a342:	1cbb      	adds	r3, r7, #2
 800a344:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	691b      	ldr	r3, [r3, #16]
 800a34a:	1cba      	adds	r2, r7, #2
 800a34c:	8812      	ldrh	r2, [r2, #0]
 800a34e:	4013      	ands	r3, r2
 800a350:	d004      	beq.n	800a35c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800a352:	230f      	movs	r3, #15
 800a354:	18fb      	adds	r3, r7, r3
 800a356:	2201      	movs	r2, #1
 800a358:	701a      	strb	r2, [r3, #0]
 800a35a:	e003      	b.n	800a364 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a35c:	230f      	movs	r3, #15
 800a35e:	18fb      	adds	r3, r7, r3
 800a360:	2200      	movs	r2, #0
 800a362:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800a364:	230f      	movs	r3, #15
 800a366:	18fb      	adds	r3, r7, r3
 800a368:	781b      	ldrb	r3, [r3, #0]
}
 800a36a:	0018      	movs	r0, r3
 800a36c:	46bd      	mov	sp, r7
 800a36e:	b004      	add	sp, #16
 800a370:	bd80      	pop	{r7, pc}

0800a372 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a372:	b580      	push	{r7, lr}
 800a374:	b082      	sub	sp, #8
 800a376:	af00      	add	r7, sp, #0
 800a378:	6078      	str	r0, [r7, #4]
 800a37a:	0008      	movs	r0, r1
 800a37c:	0011      	movs	r1, r2
 800a37e:	1cbb      	adds	r3, r7, #2
 800a380:	1c02      	adds	r2, r0, #0
 800a382:	801a      	strh	r2, [r3, #0]
 800a384:	1c7b      	adds	r3, r7, #1
 800a386:	1c0a      	adds	r2, r1, #0
 800a388:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a38a:	1c7b      	adds	r3, r7, #1
 800a38c:	781b      	ldrb	r3, [r3, #0]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d004      	beq.n	800a39c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a392:	1cbb      	adds	r3, r7, #2
 800a394:	881a      	ldrh	r2, [r3, #0]
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a39a:	e003      	b.n	800a3a4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a39c:	1cbb      	adds	r3, r7, #2
 800a39e:	881a      	ldrh	r2, [r3, #0]
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a3a4:	46c0      	nop			; (mov r8, r8)
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	b002      	add	sp, #8
 800a3aa:	bd80      	pop	{r7, pc}

0800a3ac <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b084      	sub	sp, #16
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
 800a3b4:	000a      	movs	r2, r1
 800a3b6:	1cbb      	adds	r3, r7, #2
 800a3b8:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	695b      	ldr	r3, [r3, #20]
 800a3be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a3c0:	1cbb      	adds	r3, r7, #2
 800a3c2:	881b      	ldrh	r3, [r3, #0]
 800a3c4:	68fa      	ldr	r2, [r7, #12]
 800a3c6:	4013      	ands	r3, r2
 800a3c8:	041a      	lsls	r2, r3, #16
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	43db      	mvns	r3, r3
 800a3ce:	1cb9      	adds	r1, r7, #2
 800a3d0:	8809      	ldrh	r1, [r1, #0]
 800a3d2:	400b      	ands	r3, r1
 800a3d4:	431a      	orrs	r2, r3
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	619a      	str	r2, [r3, #24]
}
 800a3da:	46c0      	nop			; (mov r8, r8)
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	b004      	add	sp, #16
 800a3e0:	bd80      	pop	{r7, pc}
	...

0800a3e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b084      	sub	sp, #16
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800a3ec:	4b19      	ldr	r3, [pc, #100]	; (800a454 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	4a19      	ldr	r2, [pc, #100]	; (800a458 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800a3f2:	4013      	ands	r3, r2
 800a3f4:	0019      	movs	r1, r3
 800a3f6:	4b17      	ldr	r3, [pc, #92]	; (800a454 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800a3f8:	687a      	ldr	r2, [r7, #4]
 800a3fa:	430a      	orrs	r2, r1
 800a3fc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a3fe:	687a      	ldr	r2, [r7, #4]
 800a400:	2380      	movs	r3, #128	; 0x80
 800a402:	009b      	lsls	r3, r3, #2
 800a404:	429a      	cmp	r2, r3
 800a406:	d11f      	bne.n	800a448 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800a408:	4b14      	ldr	r3, [pc, #80]	; (800a45c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800a40a:	681a      	ldr	r2, [r3, #0]
 800a40c:	0013      	movs	r3, r2
 800a40e:	005b      	lsls	r3, r3, #1
 800a410:	189b      	adds	r3, r3, r2
 800a412:	005b      	lsls	r3, r3, #1
 800a414:	4912      	ldr	r1, [pc, #72]	; (800a460 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800a416:	0018      	movs	r0, r3
 800a418:	f7f5 fe98 	bl	800014c <__udivsi3>
 800a41c:	0003      	movs	r3, r0
 800a41e:	3301      	adds	r3, #1
 800a420:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a422:	e008      	b.n	800a436 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d003      	beq.n	800a432 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	3b01      	subs	r3, #1
 800a42e:	60fb      	str	r3, [r7, #12]
 800a430:	e001      	b.n	800a436 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800a432:	2303      	movs	r3, #3
 800a434:	e009      	b.n	800a44a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a436:	4b07      	ldr	r3, [pc, #28]	; (800a454 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800a438:	695a      	ldr	r2, [r3, #20]
 800a43a:	2380      	movs	r3, #128	; 0x80
 800a43c:	00db      	lsls	r3, r3, #3
 800a43e:	401a      	ands	r2, r3
 800a440:	2380      	movs	r3, #128	; 0x80
 800a442:	00db      	lsls	r3, r3, #3
 800a444:	429a      	cmp	r2, r3
 800a446:	d0ed      	beq.n	800a424 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800a448:	2300      	movs	r3, #0
}
 800a44a:	0018      	movs	r0, r3
 800a44c:	46bd      	mov	sp, r7
 800a44e:	b004      	add	sp, #16
 800a450:	bd80      	pop	{r7, pc}
 800a452:	46c0      	nop			; (mov r8, r8)
 800a454:	40007000 	.word	0x40007000
 800a458:	fffff9ff 	.word	0xfffff9ff
 800a45c:	200000d8 	.word	0x200000d8
 800a460:	000f4240 	.word	0x000f4240

0800a464 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800a468:	4b03      	ldr	r3, [pc, #12]	; (800a478 <LL_RCC_GetAPB1Prescaler+0x14>)
 800a46a:	689a      	ldr	r2, [r3, #8]
 800a46c:	23e0      	movs	r3, #224	; 0xe0
 800a46e:	01db      	lsls	r3, r3, #7
 800a470:	4013      	ands	r3, r2
}
 800a472:	0018      	movs	r0, r3
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}
 800a478:	40021000 	.word	0x40021000

0800a47c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b088      	sub	sp, #32
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d101      	bne.n	800a48e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a48a:	2301      	movs	r3, #1
 800a48c:	e2f3      	b.n	800aa76 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	2201      	movs	r2, #1
 800a494:	4013      	ands	r3, r2
 800a496:	d100      	bne.n	800a49a <HAL_RCC_OscConfig+0x1e>
 800a498:	e07c      	b.n	800a594 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a49a:	4bc3      	ldr	r3, [pc, #780]	; (800a7a8 <HAL_RCC_OscConfig+0x32c>)
 800a49c:	689b      	ldr	r3, [r3, #8]
 800a49e:	2238      	movs	r2, #56	; 0x38
 800a4a0:	4013      	ands	r3, r2
 800a4a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a4a4:	4bc0      	ldr	r3, [pc, #768]	; (800a7a8 <HAL_RCC_OscConfig+0x32c>)
 800a4a6:	68db      	ldr	r3, [r3, #12]
 800a4a8:	2203      	movs	r2, #3
 800a4aa:	4013      	ands	r3, r2
 800a4ac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800a4ae:	69bb      	ldr	r3, [r7, #24]
 800a4b0:	2b10      	cmp	r3, #16
 800a4b2:	d102      	bne.n	800a4ba <HAL_RCC_OscConfig+0x3e>
 800a4b4:	697b      	ldr	r3, [r7, #20]
 800a4b6:	2b03      	cmp	r3, #3
 800a4b8:	d002      	beq.n	800a4c0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800a4ba:	69bb      	ldr	r3, [r7, #24]
 800a4bc:	2b08      	cmp	r3, #8
 800a4be:	d10b      	bne.n	800a4d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a4c0:	4bb9      	ldr	r3, [pc, #740]	; (800a7a8 <HAL_RCC_OscConfig+0x32c>)
 800a4c2:	681a      	ldr	r2, [r3, #0]
 800a4c4:	2380      	movs	r3, #128	; 0x80
 800a4c6:	029b      	lsls	r3, r3, #10
 800a4c8:	4013      	ands	r3, r2
 800a4ca:	d062      	beq.n	800a592 <HAL_RCC_OscConfig+0x116>
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	685b      	ldr	r3, [r3, #4]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d15e      	bne.n	800a592 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	e2ce      	b.n	800aa76 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	685a      	ldr	r2, [r3, #4]
 800a4dc:	2380      	movs	r3, #128	; 0x80
 800a4de:	025b      	lsls	r3, r3, #9
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	d107      	bne.n	800a4f4 <HAL_RCC_OscConfig+0x78>
 800a4e4:	4bb0      	ldr	r3, [pc, #704]	; (800a7a8 <HAL_RCC_OscConfig+0x32c>)
 800a4e6:	681a      	ldr	r2, [r3, #0]
 800a4e8:	4baf      	ldr	r3, [pc, #700]	; (800a7a8 <HAL_RCC_OscConfig+0x32c>)
 800a4ea:	2180      	movs	r1, #128	; 0x80
 800a4ec:	0249      	lsls	r1, r1, #9
 800a4ee:	430a      	orrs	r2, r1
 800a4f0:	601a      	str	r2, [r3, #0]
 800a4f2:	e020      	b.n	800a536 <HAL_RCC_OscConfig+0xba>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	685a      	ldr	r2, [r3, #4]
 800a4f8:	23a0      	movs	r3, #160	; 0xa0
 800a4fa:	02db      	lsls	r3, r3, #11
 800a4fc:	429a      	cmp	r2, r3
 800a4fe:	d10e      	bne.n	800a51e <HAL_RCC_OscConfig+0xa2>
 800a500:	4ba9      	ldr	r3, [pc, #676]	; (800a7a8 <HAL_RCC_OscConfig+0x32c>)
 800a502:	681a      	ldr	r2, [r3, #0]
 800a504:	4ba8      	ldr	r3, [pc, #672]	; (800a7a8 <HAL_RCC_OscConfig+0x32c>)
 800a506:	2180      	movs	r1, #128	; 0x80
 800a508:	02c9      	lsls	r1, r1, #11
 800a50a:	430a      	orrs	r2, r1
 800a50c:	601a      	str	r2, [r3, #0]
 800a50e:	4ba6      	ldr	r3, [pc, #664]	; (800a7a8 <HAL_RCC_OscConfig+0x32c>)
 800a510:	681a      	ldr	r2, [r3, #0]
 800a512:	4ba5      	ldr	r3, [pc, #660]	; (800a7a8 <HAL_RCC_OscConfig+0x32c>)
 800a514:	2180      	movs	r1, #128	; 0x80
 800a516:	0249      	lsls	r1, r1, #9
 800a518:	430a      	orrs	r2, r1
 800a51a:	601a      	str	r2, [r3, #0]
 800a51c:	e00b      	b.n	800a536 <HAL_RCC_OscConfig+0xba>
 800a51e:	4ba2      	ldr	r3, [pc, #648]	; (800a7a8 <HAL_RCC_OscConfig+0x32c>)
 800a520:	681a      	ldr	r2, [r3, #0]
 800a522:	4ba1      	ldr	r3, [pc, #644]	; (800a7a8 <HAL_RCC_OscConfig+0x32c>)
 800a524:	49a1      	ldr	r1, [pc, #644]	; (800a7ac <HAL_RCC_OscConfig+0x330>)
 800a526:	400a      	ands	r2, r1
 800a528:	601a      	str	r2, [r3, #0]
 800a52a:	4b9f      	ldr	r3, [pc, #636]	; (800a7a8 <HAL_RCC_OscConfig+0x32c>)
 800a52c:	681a      	ldr	r2, [r3, #0]
 800a52e:	4b9e      	ldr	r3, [pc, #632]	; (800a7a8 <HAL_RCC_OscConfig+0x32c>)
 800a530:	499f      	ldr	r1, [pc, #636]	; (800a7b0 <HAL_RCC_OscConfig+0x334>)
 800a532:	400a      	ands	r2, r1
 800a534:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	685b      	ldr	r3, [r3, #4]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d014      	beq.n	800a568 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a53e:	f7ff fbbf 	bl	8009cc0 <HAL_GetTick>
 800a542:	0003      	movs	r3, r0
 800a544:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a546:	e008      	b.n	800a55a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a548:	f7ff fbba 	bl	8009cc0 <HAL_GetTick>
 800a54c:	0002      	movs	r2, r0
 800a54e:	693b      	ldr	r3, [r7, #16]
 800a550:	1ad3      	subs	r3, r2, r3
 800a552:	2b64      	cmp	r3, #100	; 0x64
 800a554:	d901      	bls.n	800a55a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800a556:	2303      	movs	r3, #3
 800a558:	e28d      	b.n	800aa76 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a55a:	4b93      	ldr	r3, [pc, #588]	; (800a7a8 <HAL_RCC_OscConfig+0x32c>)
 800a55c:	681a      	ldr	r2, [r3, #0]
 800a55e:	2380      	movs	r3, #128	; 0x80
 800a560:	029b      	lsls	r3, r3, #10
 800a562:	4013      	ands	r3, r2
 800a564:	d0f0      	beq.n	800a548 <HAL_RCC_OscConfig+0xcc>
 800a566:	e015      	b.n	800a594 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a568:	f7ff fbaa 	bl	8009cc0 <HAL_GetTick>
 800a56c:	0003      	movs	r3, r0
 800a56e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a570:	e008      	b.n	800a584 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a572:	f7ff fba5 	bl	8009cc0 <HAL_GetTick>
 800a576:	0002      	movs	r2, r0
 800a578:	693b      	ldr	r3, [r7, #16]
 800a57a:	1ad3      	subs	r3, r2, r3
 800a57c:	2b64      	cmp	r3, #100	; 0x64
 800a57e:	d901      	bls.n	800a584 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800a580:	2303      	movs	r3, #3
 800a582:	e278      	b.n	800aa76 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a584:	4b88      	ldr	r3, [pc, #544]	; (800a7a8 <HAL_RCC_OscConfig+0x32c>)
 800a586:	681a      	ldr	r2, [r3, #0]
 800a588:	2380      	movs	r3, #128	; 0x80
 800a58a:	029b      	lsls	r3, r3, #10
 800a58c:	4013      	ands	r3, r2
 800a58e:	d1f0      	bne.n	800a572 <HAL_RCC_OscConfig+0xf6>
 800a590:	e000      	b.n	800a594 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a592:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	2202      	movs	r2, #2
 800a59a:	4013      	ands	r3, r2
 800a59c:	d100      	bne.n	800a5a0 <HAL_RCC_OscConfig+0x124>
 800a59e:	e099      	b.n	800a6d4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a5a0:	4b81      	ldr	r3, [pc, #516]	; (800a7a8 <HAL_RCC_OscConfig+0x32c>)
 800a5a2:	689b      	ldr	r3, [r3, #8]
 800a5a4:	2238      	movs	r2, #56	; 0x38
 800a5a6:	4013      	ands	r3, r2
 800a5a8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a5aa:	4b7f      	ldr	r3, [pc, #508]	; (800a7a8 <HAL_RCC_OscConfig+0x32c>)
 800a5ac:	68db      	ldr	r3, [r3, #12]
 800a5ae:	2203      	movs	r2, #3
 800a5b0:	4013      	ands	r3, r2
 800a5b2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800a5b4:	69bb      	ldr	r3, [r7, #24]
 800a5b6:	2b10      	cmp	r3, #16
 800a5b8:	d102      	bne.n	800a5c0 <HAL_RCC_OscConfig+0x144>
 800a5ba:	697b      	ldr	r3, [r7, #20]
 800a5bc:	2b02      	cmp	r3, #2
 800a5be:	d002      	beq.n	800a5c6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800a5c0:	69bb      	ldr	r3, [r7, #24]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d135      	bne.n	800a632 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a5c6:	4b78      	ldr	r3, [pc, #480]	; (800a7a8 <HAL_RCC_OscConfig+0x32c>)
 800a5c8:	681a      	ldr	r2, [r3, #0]
 800a5ca:	2380      	movs	r3, #128	; 0x80
 800a5cc:	00db      	lsls	r3, r3, #3
 800a5ce:	4013      	ands	r3, r2
 800a5d0:	d005      	beq.n	800a5de <HAL_RCC_OscConfig+0x162>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	68db      	ldr	r3, [r3, #12]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d101      	bne.n	800a5de <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800a5da:	2301      	movs	r3, #1
 800a5dc:	e24b      	b.n	800aa76 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a5de:	4b72      	ldr	r3, [pc, #456]	; (800a7a8 <HAL_RCC_OscConfig+0x32c>)
 800a5e0:	685b      	ldr	r3, [r3, #4]
 800a5e2:	4a74      	ldr	r2, [pc, #464]	; (800a7b4 <HAL_RCC_OscConfig+0x338>)
 800a5e4:	4013      	ands	r3, r2
 800a5e6:	0019      	movs	r1, r3
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	695b      	ldr	r3, [r3, #20]
 800a5ec:	021a      	lsls	r2, r3, #8
 800a5ee:	4b6e      	ldr	r3, [pc, #440]	; (800a7a8 <HAL_RCC_OscConfig+0x32c>)
 800a5f0:	430a      	orrs	r2, r1
 800a5f2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a5f4:	69bb      	ldr	r3, [r7, #24]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d112      	bne.n	800a620 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800a5fa:	4b6b      	ldr	r3, [pc, #428]	; (800a7a8 <HAL_RCC_OscConfig+0x32c>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	4a6e      	ldr	r2, [pc, #440]	; (800a7b8 <HAL_RCC_OscConfig+0x33c>)
 800a600:	4013      	ands	r3, r2
 800a602:	0019      	movs	r1, r3
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	691a      	ldr	r2, [r3, #16]
 800a608:	4b67      	ldr	r3, [pc, #412]	; (800a7a8 <HAL_RCC_OscConfig+0x32c>)
 800a60a:	430a      	orrs	r2, r1
 800a60c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800a60e:	4b66      	ldr	r3, [pc, #408]	; (800a7a8 <HAL_RCC_OscConfig+0x32c>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	0adb      	lsrs	r3, r3, #11
 800a614:	2207      	movs	r2, #7
 800a616:	4013      	ands	r3, r2
 800a618:	4a68      	ldr	r2, [pc, #416]	; (800a7bc <HAL_RCC_OscConfig+0x340>)
 800a61a:	40da      	lsrs	r2, r3
 800a61c:	4b68      	ldr	r3, [pc, #416]	; (800a7c0 <HAL_RCC_OscConfig+0x344>)
 800a61e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800a620:	4b68      	ldr	r3, [pc, #416]	; (800a7c4 <HAL_RCC_OscConfig+0x348>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	0018      	movs	r0, r3
 800a626:	f7ff faef 	bl	8009c08 <HAL_InitTick>
 800a62a:	1e03      	subs	r3, r0, #0
 800a62c:	d051      	beq.n	800a6d2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800a62e:	2301      	movs	r3, #1
 800a630:	e221      	b.n	800aa76 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	68db      	ldr	r3, [r3, #12]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d030      	beq.n	800a69c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800a63a:	4b5b      	ldr	r3, [pc, #364]	; (800a7a8 <HAL_RCC_OscConfig+0x32c>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	4a5e      	ldr	r2, [pc, #376]	; (800a7b8 <HAL_RCC_OscConfig+0x33c>)
 800a640:	4013      	ands	r3, r2
 800a642:	0019      	movs	r1, r3
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	691a      	ldr	r2, [r3, #16]
 800a648:	4b57      	ldr	r3, [pc, #348]	; (800a7a8 <HAL_RCC_OscConfig+0x32c>)
 800a64a:	430a      	orrs	r2, r1
 800a64c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800a64e:	4b56      	ldr	r3, [pc, #344]	; (800a7a8 <HAL_RCC_OscConfig+0x32c>)
 800a650:	681a      	ldr	r2, [r3, #0]
 800a652:	4b55      	ldr	r3, [pc, #340]	; (800a7a8 <HAL_RCC_OscConfig+0x32c>)
 800a654:	2180      	movs	r1, #128	; 0x80
 800a656:	0049      	lsls	r1, r1, #1
 800a658:	430a      	orrs	r2, r1
 800a65a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a65c:	f7ff fb30 	bl	8009cc0 <HAL_GetTick>
 800a660:	0003      	movs	r3, r0
 800a662:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a664:	e008      	b.n	800a678 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a666:	f7ff fb2b 	bl	8009cc0 <HAL_GetTick>
 800a66a:	0002      	movs	r2, r0
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	1ad3      	subs	r3, r2, r3
 800a670:	2b02      	cmp	r3, #2
 800a672:	d901      	bls.n	800a678 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800a674:	2303      	movs	r3, #3
 800a676:	e1fe      	b.n	800aa76 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a678:	4b4b      	ldr	r3, [pc, #300]	; (800a7a8 <HAL_RCC_OscConfig+0x32c>)
 800a67a:	681a      	ldr	r2, [r3, #0]
 800a67c:	2380      	movs	r3, #128	; 0x80
 800a67e:	00db      	lsls	r3, r3, #3
 800a680:	4013      	ands	r3, r2
 800a682:	d0f0      	beq.n	800a666 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a684:	4b48      	ldr	r3, [pc, #288]	; (800a7a8 <HAL_RCC_OscConfig+0x32c>)
 800a686:	685b      	ldr	r3, [r3, #4]
 800a688:	4a4a      	ldr	r2, [pc, #296]	; (800a7b4 <HAL_RCC_OscConfig+0x338>)
 800a68a:	4013      	ands	r3, r2
 800a68c:	0019      	movs	r1, r3
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	695b      	ldr	r3, [r3, #20]
 800a692:	021a      	lsls	r2, r3, #8
 800a694:	4b44      	ldr	r3, [pc, #272]	; (800a7a8 <HAL_RCC_OscConfig+0x32c>)
 800a696:	430a      	orrs	r2, r1
 800a698:	605a      	str	r2, [r3, #4]
 800a69a:	e01b      	b.n	800a6d4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800a69c:	4b42      	ldr	r3, [pc, #264]	; (800a7a8 <HAL_RCC_OscConfig+0x32c>)
 800a69e:	681a      	ldr	r2, [r3, #0]
 800a6a0:	4b41      	ldr	r3, [pc, #260]	; (800a7a8 <HAL_RCC_OscConfig+0x32c>)
 800a6a2:	4949      	ldr	r1, [pc, #292]	; (800a7c8 <HAL_RCC_OscConfig+0x34c>)
 800a6a4:	400a      	ands	r2, r1
 800a6a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6a8:	f7ff fb0a 	bl	8009cc0 <HAL_GetTick>
 800a6ac:	0003      	movs	r3, r0
 800a6ae:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a6b0:	e008      	b.n	800a6c4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a6b2:	f7ff fb05 	bl	8009cc0 <HAL_GetTick>
 800a6b6:	0002      	movs	r2, r0
 800a6b8:	693b      	ldr	r3, [r7, #16]
 800a6ba:	1ad3      	subs	r3, r2, r3
 800a6bc:	2b02      	cmp	r3, #2
 800a6be:	d901      	bls.n	800a6c4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800a6c0:	2303      	movs	r3, #3
 800a6c2:	e1d8      	b.n	800aa76 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a6c4:	4b38      	ldr	r3, [pc, #224]	; (800a7a8 <HAL_RCC_OscConfig+0x32c>)
 800a6c6:	681a      	ldr	r2, [r3, #0]
 800a6c8:	2380      	movs	r3, #128	; 0x80
 800a6ca:	00db      	lsls	r3, r3, #3
 800a6cc:	4013      	ands	r3, r2
 800a6ce:	d1f0      	bne.n	800a6b2 <HAL_RCC_OscConfig+0x236>
 800a6d0:	e000      	b.n	800a6d4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a6d2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	2208      	movs	r2, #8
 800a6da:	4013      	ands	r3, r2
 800a6dc:	d047      	beq.n	800a76e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800a6de:	4b32      	ldr	r3, [pc, #200]	; (800a7a8 <HAL_RCC_OscConfig+0x32c>)
 800a6e0:	689b      	ldr	r3, [r3, #8]
 800a6e2:	2238      	movs	r2, #56	; 0x38
 800a6e4:	4013      	ands	r3, r2
 800a6e6:	2b18      	cmp	r3, #24
 800a6e8:	d10a      	bne.n	800a700 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800a6ea:	4b2f      	ldr	r3, [pc, #188]	; (800a7a8 <HAL_RCC_OscConfig+0x32c>)
 800a6ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6ee:	2202      	movs	r2, #2
 800a6f0:	4013      	ands	r3, r2
 800a6f2:	d03c      	beq.n	800a76e <HAL_RCC_OscConfig+0x2f2>
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	699b      	ldr	r3, [r3, #24]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d138      	bne.n	800a76e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	e1ba      	b.n	800aa76 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	699b      	ldr	r3, [r3, #24]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d019      	beq.n	800a73c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800a708:	4b27      	ldr	r3, [pc, #156]	; (800a7a8 <HAL_RCC_OscConfig+0x32c>)
 800a70a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a70c:	4b26      	ldr	r3, [pc, #152]	; (800a7a8 <HAL_RCC_OscConfig+0x32c>)
 800a70e:	2101      	movs	r1, #1
 800a710:	430a      	orrs	r2, r1
 800a712:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a714:	f7ff fad4 	bl	8009cc0 <HAL_GetTick>
 800a718:	0003      	movs	r3, r0
 800a71a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a71c:	e008      	b.n	800a730 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a71e:	f7ff facf 	bl	8009cc0 <HAL_GetTick>
 800a722:	0002      	movs	r2, r0
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	1ad3      	subs	r3, r2, r3
 800a728:	2b02      	cmp	r3, #2
 800a72a:	d901      	bls.n	800a730 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800a72c:	2303      	movs	r3, #3
 800a72e:	e1a2      	b.n	800aa76 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a730:	4b1d      	ldr	r3, [pc, #116]	; (800a7a8 <HAL_RCC_OscConfig+0x32c>)
 800a732:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a734:	2202      	movs	r2, #2
 800a736:	4013      	ands	r3, r2
 800a738:	d0f1      	beq.n	800a71e <HAL_RCC_OscConfig+0x2a2>
 800a73a:	e018      	b.n	800a76e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800a73c:	4b1a      	ldr	r3, [pc, #104]	; (800a7a8 <HAL_RCC_OscConfig+0x32c>)
 800a73e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a740:	4b19      	ldr	r3, [pc, #100]	; (800a7a8 <HAL_RCC_OscConfig+0x32c>)
 800a742:	2101      	movs	r1, #1
 800a744:	438a      	bics	r2, r1
 800a746:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a748:	f7ff faba 	bl	8009cc0 <HAL_GetTick>
 800a74c:	0003      	movs	r3, r0
 800a74e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a750:	e008      	b.n	800a764 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a752:	f7ff fab5 	bl	8009cc0 <HAL_GetTick>
 800a756:	0002      	movs	r2, r0
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	1ad3      	subs	r3, r2, r3
 800a75c:	2b02      	cmp	r3, #2
 800a75e:	d901      	bls.n	800a764 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800a760:	2303      	movs	r3, #3
 800a762:	e188      	b.n	800aa76 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a764:	4b10      	ldr	r3, [pc, #64]	; (800a7a8 <HAL_RCC_OscConfig+0x32c>)
 800a766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a768:	2202      	movs	r2, #2
 800a76a:	4013      	ands	r3, r2
 800a76c:	d1f1      	bne.n	800a752 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	2204      	movs	r2, #4
 800a774:	4013      	ands	r3, r2
 800a776:	d100      	bne.n	800a77a <HAL_RCC_OscConfig+0x2fe>
 800a778:	e0c6      	b.n	800a908 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a77a:	231f      	movs	r3, #31
 800a77c:	18fb      	adds	r3, r7, r3
 800a77e:	2200      	movs	r2, #0
 800a780:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800a782:	4b09      	ldr	r3, [pc, #36]	; (800a7a8 <HAL_RCC_OscConfig+0x32c>)
 800a784:	689b      	ldr	r3, [r3, #8]
 800a786:	2238      	movs	r2, #56	; 0x38
 800a788:	4013      	ands	r3, r2
 800a78a:	2b20      	cmp	r3, #32
 800a78c:	d11e      	bne.n	800a7cc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800a78e:	4b06      	ldr	r3, [pc, #24]	; (800a7a8 <HAL_RCC_OscConfig+0x32c>)
 800a790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a792:	2202      	movs	r2, #2
 800a794:	4013      	ands	r3, r2
 800a796:	d100      	bne.n	800a79a <HAL_RCC_OscConfig+0x31e>
 800a798:	e0b6      	b.n	800a908 <HAL_RCC_OscConfig+0x48c>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	689b      	ldr	r3, [r3, #8]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d000      	beq.n	800a7a4 <HAL_RCC_OscConfig+0x328>
 800a7a2:	e0b1      	b.n	800a908 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	e166      	b.n	800aa76 <HAL_RCC_OscConfig+0x5fa>
 800a7a8:	40021000 	.word	0x40021000
 800a7ac:	fffeffff 	.word	0xfffeffff
 800a7b0:	fffbffff 	.word	0xfffbffff
 800a7b4:	ffff80ff 	.word	0xffff80ff
 800a7b8:	ffffc7ff 	.word	0xffffc7ff
 800a7bc:	00f42400 	.word	0x00f42400
 800a7c0:	200000d8 	.word	0x200000d8
 800a7c4:	200000dc 	.word	0x200000dc
 800a7c8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a7cc:	4bac      	ldr	r3, [pc, #688]	; (800aa80 <HAL_RCC_OscConfig+0x604>)
 800a7ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a7d0:	2380      	movs	r3, #128	; 0x80
 800a7d2:	055b      	lsls	r3, r3, #21
 800a7d4:	4013      	ands	r3, r2
 800a7d6:	d101      	bne.n	800a7dc <HAL_RCC_OscConfig+0x360>
 800a7d8:	2301      	movs	r3, #1
 800a7da:	e000      	b.n	800a7de <HAL_RCC_OscConfig+0x362>
 800a7dc:	2300      	movs	r3, #0
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d011      	beq.n	800a806 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800a7e2:	4ba7      	ldr	r3, [pc, #668]	; (800aa80 <HAL_RCC_OscConfig+0x604>)
 800a7e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a7e6:	4ba6      	ldr	r3, [pc, #664]	; (800aa80 <HAL_RCC_OscConfig+0x604>)
 800a7e8:	2180      	movs	r1, #128	; 0x80
 800a7ea:	0549      	lsls	r1, r1, #21
 800a7ec:	430a      	orrs	r2, r1
 800a7ee:	63da      	str	r2, [r3, #60]	; 0x3c
 800a7f0:	4ba3      	ldr	r3, [pc, #652]	; (800aa80 <HAL_RCC_OscConfig+0x604>)
 800a7f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a7f4:	2380      	movs	r3, #128	; 0x80
 800a7f6:	055b      	lsls	r3, r3, #21
 800a7f8:	4013      	ands	r3, r2
 800a7fa:	60fb      	str	r3, [r7, #12]
 800a7fc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800a7fe:	231f      	movs	r3, #31
 800a800:	18fb      	adds	r3, r7, r3
 800a802:	2201      	movs	r2, #1
 800a804:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a806:	4b9f      	ldr	r3, [pc, #636]	; (800aa84 <HAL_RCC_OscConfig+0x608>)
 800a808:	681a      	ldr	r2, [r3, #0]
 800a80a:	2380      	movs	r3, #128	; 0x80
 800a80c:	005b      	lsls	r3, r3, #1
 800a80e:	4013      	ands	r3, r2
 800a810:	d11a      	bne.n	800a848 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a812:	4b9c      	ldr	r3, [pc, #624]	; (800aa84 <HAL_RCC_OscConfig+0x608>)
 800a814:	681a      	ldr	r2, [r3, #0]
 800a816:	4b9b      	ldr	r3, [pc, #620]	; (800aa84 <HAL_RCC_OscConfig+0x608>)
 800a818:	2180      	movs	r1, #128	; 0x80
 800a81a:	0049      	lsls	r1, r1, #1
 800a81c:	430a      	orrs	r2, r1
 800a81e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800a820:	f7ff fa4e 	bl	8009cc0 <HAL_GetTick>
 800a824:	0003      	movs	r3, r0
 800a826:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a828:	e008      	b.n	800a83c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a82a:	f7ff fa49 	bl	8009cc0 <HAL_GetTick>
 800a82e:	0002      	movs	r2, r0
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	1ad3      	subs	r3, r2, r3
 800a834:	2b02      	cmp	r3, #2
 800a836:	d901      	bls.n	800a83c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800a838:	2303      	movs	r3, #3
 800a83a:	e11c      	b.n	800aa76 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a83c:	4b91      	ldr	r3, [pc, #580]	; (800aa84 <HAL_RCC_OscConfig+0x608>)
 800a83e:	681a      	ldr	r2, [r3, #0]
 800a840:	2380      	movs	r3, #128	; 0x80
 800a842:	005b      	lsls	r3, r3, #1
 800a844:	4013      	ands	r3, r2
 800a846:	d0f0      	beq.n	800a82a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	689b      	ldr	r3, [r3, #8]
 800a84c:	2b01      	cmp	r3, #1
 800a84e:	d106      	bne.n	800a85e <HAL_RCC_OscConfig+0x3e2>
 800a850:	4b8b      	ldr	r3, [pc, #556]	; (800aa80 <HAL_RCC_OscConfig+0x604>)
 800a852:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a854:	4b8a      	ldr	r3, [pc, #552]	; (800aa80 <HAL_RCC_OscConfig+0x604>)
 800a856:	2101      	movs	r1, #1
 800a858:	430a      	orrs	r2, r1
 800a85a:	65da      	str	r2, [r3, #92]	; 0x5c
 800a85c:	e01c      	b.n	800a898 <HAL_RCC_OscConfig+0x41c>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	689b      	ldr	r3, [r3, #8]
 800a862:	2b05      	cmp	r3, #5
 800a864:	d10c      	bne.n	800a880 <HAL_RCC_OscConfig+0x404>
 800a866:	4b86      	ldr	r3, [pc, #536]	; (800aa80 <HAL_RCC_OscConfig+0x604>)
 800a868:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a86a:	4b85      	ldr	r3, [pc, #532]	; (800aa80 <HAL_RCC_OscConfig+0x604>)
 800a86c:	2104      	movs	r1, #4
 800a86e:	430a      	orrs	r2, r1
 800a870:	65da      	str	r2, [r3, #92]	; 0x5c
 800a872:	4b83      	ldr	r3, [pc, #524]	; (800aa80 <HAL_RCC_OscConfig+0x604>)
 800a874:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a876:	4b82      	ldr	r3, [pc, #520]	; (800aa80 <HAL_RCC_OscConfig+0x604>)
 800a878:	2101      	movs	r1, #1
 800a87a:	430a      	orrs	r2, r1
 800a87c:	65da      	str	r2, [r3, #92]	; 0x5c
 800a87e:	e00b      	b.n	800a898 <HAL_RCC_OscConfig+0x41c>
 800a880:	4b7f      	ldr	r3, [pc, #508]	; (800aa80 <HAL_RCC_OscConfig+0x604>)
 800a882:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a884:	4b7e      	ldr	r3, [pc, #504]	; (800aa80 <HAL_RCC_OscConfig+0x604>)
 800a886:	2101      	movs	r1, #1
 800a888:	438a      	bics	r2, r1
 800a88a:	65da      	str	r2, [r3, #92]	; 0x5c
 800a88c:	4b7c      	ldr	r3, [pc, #496]	; (800aa80 <HAL_RCC_OscConfig+0x604>)
 800a88e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a890:	4b7b      	ldr	r3, [pc, #492]	; (800aa80 <HAL_RCC_OscConfig+0x604>)
 800a892:	2104      	movs	r1, #4
 800a894:	438a      	bics	r2, r1
 800a896:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	689b      	ldr	r3, [r3, #8]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d014      	beq.n	800a8ca <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8a0:	f7ff fa0e 	bl	8009cc0 <HAL_GetTick>
 800a8a4:	0003      	movs	r3, r0
 800a8a6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a8a8:	e009      	b.n	800a8be <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a8aa:	f7ff fa09 	bl	8009cc0 <HAL_GetTick>
 800a8ae:	0002      	movs	r2, r0
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	1ad3      	subs	r3, r2, r3
 800a8b4:	4a74      	ldr	r2, [pc, #464]	; (800aa88 <HAL_RCC_OscConfig+0x60c>)
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	d901      	bls.n	800a8be <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800a8ba:	2303      	movs	r3, #3
 800a8bc:	e0db      	b.n	800aa76 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a8be:	4b70      	ldr	r3, [pc, #448]	; (800aa80 <HAL_RCC_OscConfig+0x604>)
 800a8c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8c2:	2202      	movs	r2, #2
 800a8c4:	4013      	ands	r3, r2
 800a8c6:	d0f0      	beq.n	800a8aa <HAL_RCC_OscConfig+0x42e>
 800a8c8:	e013      	b.n	800a8f2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8ca:	f7ff f9f9 	bl	8009cc0 <HAL_GetTick>
 800a8ce:	0003      	movs	r3, r0
 800a8d0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a8d2:	e009      	b.n	800a8e8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a8d4:	f7ff f9f4 	bl	8009cc0 <HAL_GetTick>
 800a8d8:	0002      	movs	r2, r0
 800a8da:	693b      	ldr	r3, [r7, #16]
 800a8dc:	1ad3      	subs	r3, r2, r3
 800a8de:	4a6a      	ldr	r2, [pc, #424]	; (800aa88 <HAL_RCC_OscConfig+0x60c>)
 800a8e0:	4293      	cmp	r3, r2
 800a8e2:	d901      	bls.n	800a8e8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800a8e4:	2303      	movs	r3, #3
 800a8e6:	e0c6      	b.n	800aa76 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a8e8:	4b65      	ldr	r3, [pc, #404]	; (800aa80 <HAL_RCC_OscConfig+0x604>)
 800a8ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8ec:	2202      	movs	r2, #2
 800a8ee:	4013      	ands	r3, r2
 800a8f0:	d1f0      	bne.n	800a8d4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800a8f2:	231f      	movs	r3, #31
 800a8f4:	18fb      	adds	r3, r7, r3
 800a8f6:	781b      	ldrb	r3, [r3, #0]
 800a8f8:	2b01      	cmp	r3, #1
 800a8fa:	d105      	bne.n	800a908 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800a8fc:	4b60      	ldr	r3, [pc, #384]	; (800aa80 <HAL_RCC_OscConfig+0x604>)
 800a8fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a900:	4b5f      	ldr	r3, [pc, #380]	; (800aa80 <HAL_RCC_OscConfig+0x604>)
 800a902:	4962      	ldr	r1, [pc, #392]	; (800aa8c <HAL_RCC_OscConfig+0x610>)
 800a904:	400a      	ands	r2, r1
 800a906:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	69db      	ldr	r3, [r3, #28]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d100      	bne.n	800a912 <HAL_RCC_OscConfig+0x496>
 800a910:	e0b0      	b.n	800aa74 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a912:	4b5b      	ldr	r3, [pc, #364]	; (800aa80 <HAL_RCC_OscConfig+0x604>)
 800a914:	689b      	ldr	r3, [r3, #8]
 800a916:	2238      	movs	r2, #56	; 0x38
 800a918:	4013      	ands	r3, r2
 800a91a:	2b10      	cmp	r3, #16
 800a91c:	d100      	bne.n	800a920 <HAL_RCC_OscConfig+0x4a4>
 800a91e:	e078      	b.n	800aa12 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	69db      	ldr	r3, [r3, #28]
 800a924:	2b02      	cmp	r3, #2
 800a926:	d153      	bne.n	800a9d0 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a928:	4b55      	ldr	r3, [pc, #340]	; (800aa80 <HAL_RCC_OscConfig+0x604>)
 800a92a:	681a      	ldr	r2, [r3, #0]
 800a92c:	4b54      	ldr	r3, [pc, #336]	; (800aa80 <HAL_RCC_OscConfig+0x604>)
 800a92e:	4958      	ldr	r1, [pc, #352]	; (800aa90 <HAL_RCC_OscConfig+0x614>)
 800a930:	400a      	ands	r2, r1
 800a932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a934:	f7ff f9c4 	bl	8009cc0 <HAL_GetTick>
 800a938:	0003      	movs	r3, r0
 800a93a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a93c:	e008      	b.n	800a950 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a93e:	f7ff f9bf 	bl	8009cc0 <HAL_GetTick>
 800a942:	0002      	movs	r2, r0
 800a944:	693b      	ldr	r3, [r7, #16]
 800a946:	1ad3      	subs	r3, r2, r3
 800a948:	2b02      	cmp	r3, #2
 800a94a:	d901      	bls.n	800a950 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800a94c:	2303      	movs	r3, #3
 800a94e:	e092      	b.n	800aa76 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a950:	4b4b      	ldr	r3, [pc, #300]	; (800aa80 <HAL_RCC_OscConfig+0x604>)
 800a952:	681a      	ldr	r2, [r3, #0]
 800a954:	2380      	movs	r3, #128	; 0x80
 800a956:	049b      	lsls	r3, r3, #18
 800a958:	4013      	ands	r3, r2
 800a95a:	d1f0      	bne.n	800a93e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a95c:	4b48      	ldr	r3, [pc, #288]	; (800aa80 <HAL_RCC_OscConfig+0x604>)
 800a95e:	68db      	ldr	r3, [r3, #12]
 800a960:	4a4c      	ldr	r2, [pc, #304]	; (800aa94 <HAL_RCC_OscConfig+0x618>)
 800a962:	4013      	ands	r3, r2
 800a964:	0019      	movs	r1, r3
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6a1a      	ldr	r2, [r3, #32]
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a96e:	431a      	orrs	r2, r3
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a974:	021b      	lsls	r3, r3, #8
 800a976:	431a      	orrs	r2, r3
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a97c:	431a      	orrs	r2, r3
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a982:	431a      	orrs	r2, r3
 800a984:	4b3e      	ldr	r3, [pc, #248]	; (800aa80 <HAL_RCC_OscConfig+0x604>)
 800a986:	430a      	orrs	r2, r1
 800a988:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a98a:	4b3d      	ldr	r3, [pc, #244]	; (800aa80 <HAL_RCC_OscConfig+0x604>)
 800a98c:	681a      	ldr	r2, [r3, #0]
 800a98e:	4b3c      	ldr	r3, [pc, #240]	; (800aa80 <HAL_RCC_OscConfig+0x604>)
 800a990:	2180      	movs	r1, #128	; 0x80
 800a992:	0449      	lsls	r1, r1, #17
 800a994:	430a      	orrs	r2, r1
 800a996:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800a998:	4b39      	ldr	r3, [pc, #228]	; (800aa80 <HAL_RCC_OscConfig+0x604>)
 800a99a:	68da      	ldr	r2, [r3, #12]
 800a99c:	4b38      	ldr	r3, [pc, #224]	; (800aa80 <HAL_RCC_OscConfig+0x604>)
 800a99e:	2180      	movs	r1, #128	; 0x80
 800a9a0:	0549      	lsls	r1, r1, #21
 800a9a2:	430a      	orrs	r2, r1
 800a9a4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9a6:	f7ff f98b 	bl	8009cc0 <HAL_GetTick>
 800a9aa:	0003      	movs	r3, r0
 800a9ac:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a9ae:	e008      	b.n	800a9c2 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a9b0:	f7ff f986 	bl	8009cc0 <HAL_GetTick>
 800a9b4:	0002      	movs	r2, r0
 800a9b6:	693b      	ldr	r3, [r7, #16]
 800a9b8:	1ad3      	subs	r3, r2, r3
 800a9ba:	2b02      	cmp	r3, #2
 800a9bc:	d901      	bls.n	800a9c2 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800a9be:	2303      	movs	r3, #3
 800a9c0:	e059      	b.n	800aa76 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a9c2:	4b2f      	ldr	r3, [pc, #188]	; (800aa80 <HAL_RCC_OscConfig+0x604>)
 800a9c4:	681a      	ldr	r2, [r3, #0]
 800a9c6:	2380      	movs	r3, #128	; 0x80
 800a9c8:	049b      	lsls	r3, r3, #18
 800a9ca:	4013      	ands	r3, r2
 800a9cc:	d0f0      	beq.n	800a9b0 <HAL_RCC_OscConfig+0x534>
 800a9ce:	e051      	b.n	800aa74 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a9d0:	4b2b      	ldr	r3, [pc, #172]	; (800aa80 <HAL_RCC_OscConfig+0x604>)
 800a9d2:	681a      	ldr	r2, [r3, #0]
 800a9d4:	4b2a      	ldr	r3, [pc, #168]	; (800aa80 <HAL_RCC_OscConfig+0x604>)
 800a9d6:	492e      	ldr	r1, [pc, #184]	; (800aa90 <HAL_RCC_OscConfig+0x614>)
 800a9d8:	400a      	ands	r2, r1
 800a9da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9dc:	f7ff f970 	bl	8009cc0 <HAL_GetTick>
 800a9e0:	0003      	movs	r3, r0
 800a9e2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a9e4:	e008      	b.n	800a9f8 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a9e6:	f7ff f96b 	bl	8009cc0 <HAL_GetTick>
 800a9ea:	0002      	movs	r2, r0
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	1ad3      	subs	r3, r2, r3
 800a9f0:	2b02      	cmp	r3, #2
 800a9f2:	d901      	bls.n	800a9f8 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 800a9f4:	2303      	movs	r3, #3
 800a9f6:	e03e      	b.n	800aa76 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a9f8:	4b21      	ldr	r3, [pc, #132]	; (800aa80 <HAL_RCC_OscConfig+0x604>)
 800a9fa:	681a      	ldr	r2, [r3, #0]
 800a9fc:	2380      	movs	r3, #128	; 0x80
 800a9fe:	049b      	lsls	r3, r3, #18
 800aa00:	4013      	ands	r3, r2
 800aa02:	d1f0      	bne.n	800a9e6 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800aa04:	4b1e      	ldr	r3, [pc, #120]	; (800aa80 <HAL_RCC_OscConfig+0x604>)
 800aa06:	68da      	ldr	r2, [r3, #12]
 800aa08:	4b1d      	ldr	r3, [pc, #116]	; (800aa80 <HAL_RCC_OscConfig+0x604>)
 800aa0a:	4923      	ldr	r1, [pc, #140]	; (800aa98 <HAL_RCC_OscConfig+0x61c>)
 800aa0c:	400a      	ands	r2, r1
 800aa0e:	60da      	str	r2, [r3, #12]
 800aa10:	e030      	b.n	800aa74 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	69db      	ldr	r3, [r3, #28]
 800aa16:	2b01      	cmp	r3, #1
 800aa18:	d101      	bne.n	800aa1e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800aa1a:	2301      	movs	r3, #1
 800aa1c:	e02b      	b.n	800aa76 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800aa1e:	4b18      	ldr	r3, [pc, #96]	; (800aa80 <HAL_RCC_OscConfig+0x604>)
 800aa20:	68db      	ldr	r3, [r3, #12]
 800aa22:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aa24:	697b      	ldr	r3, [r7, #20]
 800aa26:	2203      	movs	r2, #3
 800aa28:	401a      	ands	r2, r3
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6a1b      	ldr	r3, [r3, #32]
 800aa2e:	429a      	cmp	r2, r3
 800aa30:	d11e      	bne.n	800aa70 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	2270      	movs	r2, #112	; 0x70
 800aa36:	401a      	ands	r2, r3
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aa3c:	429a      	cmp	r2, r3
 800aa3e:	d117      	bne.n	800aa70 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800aa40:	697a      	ldr	r2, [r7, #20]
 800aa42:	23fe      	movs	r3, #254	; 0xfe
 800aa44:	01db      	lsls	r3, r3, #7
 800aa46:	401a      	ands	r2, r3
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa4c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800aa4e:	429a      	cmp	r2, r3
 800aa50:	d10e      	bne.n	800aa70 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800aa52:	697a      	ldr	r2, [r7, #20]
 800aa54:	23f8      	movs	r3, #248	; 0xf8
 800aa56:	039b      	lsls	r3, r3, #14
 800aa58:	401a      	ands	r2, r3
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	d106      	bne.n	800aa70 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	0f5b      	lsrs	r3, r3, #29
 800aa66:	075a      	lsls	r2, r3, #29
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800aa6c:	429a      	cmp	r2, r3
 800aa6e:	d001      	beq.n	800aa74 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 800aa70:	2301      	movs	r3, #1
 800aa72:	e000      	b.n	800aa76 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 800aa74:	2300      	movs	r3, #0
}
 800aa76:	0018      	movs	r0, r3
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	b008      	add	sp, #32
 800aa7c:	bd80      	pop	{r7, pc}
 800aa7e:	46c0      	nop			; (mov r8, r8)
 800aa80:	40021000 	.word	0x40021000
 800aa84:	40007000 	.word	0x40007000
 800aa88:	00001388 	.word	0x00001388
 800aa8c:	efffffff 	.word	0xefffffff
 800aa90:	feffffff 	.word	0xfeffffff
 800aa94:	1fc1808c 	.word	0x1fc1808c
 800aa98:	effefffc 	.word	0xeffefffc

0800aa9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b084      	sub	sp, #16
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
 800aaa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d101      	bne.n	800aab0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800aaac:	2301      	movs	r3, #1
 800aaae:	e0e9      	b.n	800ac84 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800aab0:	4b76      	ldr	r3, [pc, #472]	; (800ac8c <HAL_RCC_ClockConfig+0x1f0>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	2207      	movs	r2, #7
 800aab6:	4013      	ands	r3, r2
 800aab8:	683a      	ldr	r2, [r7, #0]
 800aaba:	429a      	cmp	r2, r3
 800aabc:	d91e      	bls.n	800aafc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aabe:	4b73      	ldr	r3, [pc, #460]	; (800ac8c <HAL_RCC_ClockConfig+0x1f0>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	2207      	movs	r2, #7
 800aac4:	4393      	bics	r3, r2
 800aac6:	0019      	movs	r1, r3
 800aac8:	4b70      	ldr	r3, [pc, #448]	; (800ac8c <HAL_RCC_ClockConfig+0x1f0>)
 800aaca:	683a      	ldr	r2, [r7, #0]
 800aacc:	430a      	orrs	r2, r1
 800aace:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800aad0:	f7ff f8f6 	bl	8009cc0 <HAL_GetTick>
 800aad4:	0003      	movs	r3, r0
 800aad6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800aad8:	e009      	b.n	800aaee <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aada:	f7ff f8f1 	bl	8009cc0 <HAL_GetTick>
 800aade:	0002      	movs	r2, r0
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	1ad3      	subs	r3, r2, r3
 800aae4:	4a6a      	ldr	r2, [pc, #424]	; (800ac90 <HAL_RCC_ClockConfig+0x1f4>)
 800aae6:	4293      	cmp	r3, r2
 800aae8:	d901      	bls.n	800aaee <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800aaea:	2303      	movs	r3, #3
 800aaec:	e0ca      	b.n	800ac84 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800aaee:	4b67      	ldr	r3, [pc, #412]	; (800ac8c <HAL_RCC_ClockConfig+0x1f0>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	2207      	movs	r2, #7
 800aaf4:	4013      	ands	r3, r2
 800aaf6:	683a      	ldr	r2, [r7, #0]
 800aaf8:	429a      	cmp	r2, r3
 800aafa:	d1ee      	bne.n	800aada <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	2202      	movs	r2, #2
 800ab02:	4013      	ands	r3, r2
 800ab04:	d015      	beq.n	800ab32 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	2204      	movs	r2, #4
 800ab0c:	4013      	ands	r3, r2
 800ab0e:	d006      	beq.n	800ab1e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800ab10:	4b60      	ldr	r3, [pc, #384]	; (800ac94 <HAL_RCC_ClockConfig+0x1f8>)
 800ab12:	689a      	ldr	r2, [r3, #8]
 800ab14:	4b5f      	ldr	r3, [pc, #380]	; (800ac94 <HAL_RCC_ClockConfig+0x1f8>)
 800ab16:	21e0      	movs	r1, #224	; 0xe0
 800ab18:	01c9      	lsls	r1, r1, #7
 800ab1a:	430a      	orrs	r2, r1
 800ab1c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ab1e:	4b5d      	ldr	r3, [pc, #372]	; (800ac94 <HAL_RCC_ClockConfig+0x1f8>)
 800ab20:	689b      	ldr	r3, [r3, #8]
 800ab22:	4a5d      	ldr	r2, [pc, #372]	; (800ac98 <HAL_RCC_ClockConfig+0x1fc>)
 800ab24:	4013      	ands	r3, r2
 800ab26:	0019      	movs	r1, r3
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	689a      	ldr	r2, [r3, #8]
 800ab2c:	4b59      	ldr	r3, [pc, #356]	; (800ac94 <HAL_RCC_ClockConfig+0x1f8>)
 800ab2e:	430a      	orrs	r2, r1
 800ab30:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	2201      	movs	r2, #1
 800ab38:	4013      	ands	r3, r2
 800ab3a:	d057      	beq.n	800abec <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	685b      	ldr	r3, [r3, #4]
 800ab40:	2b01      	cmp	r3, #1
 800ab42:	d107      	bne.n	800ab54 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ab44:	4b53      	ldr	r3, [pc, #332]	; (800ac94 <HAL_RCC_ClockConfig+0x1f8>)
 800ab46:	681a      	ldr	r2, [r3, #0]
 800ab48:	2380      	movs	r3, #128	; 0x80
 800ab4a:	029b      	lsls	r3, r3, #10
 800ab4c:	4013      	ands	r3, r2
 800ab4e:	d12b      	bne.n	800aba8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800ab50:	2301      	movs	r3, #1
 800ab52:	e097      	b.n	800ac84 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	685b      	ldr	r3, [r3, #4]
 800ab58:	2b02      	cmp	r3, #2
 800ab5a:	d107      	bne.n	800ab6c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ab5c:	4b4d      	ldr	r3, [pc, #308]	; (800ac94 <HAL_RCC_ClockConfig+0x1f8>)
 800ab5e:	681a      	ldr	r2, [r3, #0]
 800ab60:	2380      	movs	r3, #128	; 0x80
 800ab62:	049b      	lsls	r3, r3, #18
 800ab64:	4013      	ands	r3, r2
 800ab66:	d11f      	bne.n	800aba8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800ab68:	2301      	movs	r3, #1
 800ab6a:	e08b      	b.n	800ac84 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	685b      	ldr	r3, [r3, #4]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d107      	bne.n	800ab84 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ab74:	4b47      	ldr	r3, [pc, #284]	; (800ac94 <HAL_RCC_ClockConfig+0x1f8>)
 800ab76:	681a      	ldr	r2, [r3, #0]
 800ab78:	2380      	movs	r3, #128	; 0x80
 800ab7a:	00db      	lsls	r3, r3, #3
 800ab7c:	4013      	ands	r3, r2
 800ab7e:	d113      	bne.n	800aba8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800ab80:	2301      	movs	r3, #1
 800ab82:	e07f      	b.n	800ac84 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	685b      	ldr	r3, [r3, #4]
 800ab88:	2b03      	cmp	r3, #3
 800ab8a:	d106      	bne.n	800ab9a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800ab8c:	4b41      	ldr	r3, [pc, #260]	; (800ac94 <HAL_RCC_ClockConfig+0x1f8>)
 800ab8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab90:	2202      	movs	r2, #2
 800ab92:	4013      	ands	r3, r2
 800ab94:	d108      	bne.n	800aba8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800ab96:	2301      	movs	r3, #1
 800ab98:	e074      	b.n	800ac84 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ab9a:	4b3e      	ldr	r3, [pc, #248]	; (800ac94 <HAL_RCC_ClockConfig+0x1f8>)
 800ab9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab9e:	2202      	movs	r2, #2
 800aba0:	4013      	ands	r3, r2
 800aba2:	d101      	bne.n	800aba8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800aba4:	2301      	movs	r3, #1
 800aba6:	e06d      	b.n	800ac84 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800aba8:	4b3a      	ldr	r3, [pc, #232]	; (800ac94 <HAL_RCC_ClockConfig+0x1f8>)
 800abaa:	689b      	ldr	r3, [r3, #8]
 800abac:	2207      	movs	r2, #7
 800abae:	4393      	bics	r3, r2
 800abb0:	0019      	movs	r1, r3
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	685a      	ldr	r2, [r3, #4]
 800abb6:	4b37      	ldr	r3, [pc, #220]	; (800ac94 <HAL_RCC_ClockConfig+0x1f8>)
 800abb8:	430a      	orrs	r2, r1
 800abba:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800abbc:	f7ff f880 	bl	8009cc0 <HAL_GetTick>
 800abc0:	0003      	movs	r3, r0
 800abc2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800abc4:	e009      	b.n	800abda <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800abc6:	f7ff f87b 	bl	8009cc0 <HAL_GetTick>
 800abca:	0002      	movs	r2, r0
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	1ad3      	subs	r3, r2, r3
 800abd0:	4a2f      	ldr	r2, [pc, #188]	; (800ac90 <HAL_RCC_ClockConfig+0x1f4>)
 800abd2:	4293      	cmp	r3, r2
 800abd4:	d901      	bls.n	800abda <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800abd6:	2303      	movs	r3, #3
 800abd8:	e054      	b.n	800ac84 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800abda:	4b2e      	ldr	r3, [pc, #184]	; (800ac94 <HAL_RCC_ClockConfig+0x1f8>)
 800abdc:	689b      	ldr	r3, [r3, #8]
 800abde:	2238      	movs	r2, #56	; 0x38
 800abe0:	401a      	ands	r2, r3
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	685b      	ldr	r3, [r3, #4]
 800abe6:	00db      	lsls	r3, r3, #3
 800abe8:	429a      	cmp	r2, r3
 800abea:	d1ec      	bne.n	800abc6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800abec:	4b27      	ldr	r3, [pc, #156]	; (800ac8c <HAL_RCC_ClockConfig+0x1f0>)
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	2207      	movs	r2, #7
 800abf2:	4013      	ands	r3, r2
 800abf4:	683a      	ldr	r2, [r7, #0]
 800abf6:	429a      	cmp	r2, r3
 800abf8:	d21e      	bcs.n	800ac38 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800abfa:	4b24      	ldr	r3, [pc, #144]	; (800ac8c <HAL_RCC_ClockConfig+0x1f0>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	2207      	movs	r2, #7
 800ac00:	4393      	bics	r3, r2
 800ac02:	0019      	movs	r1, r3
 800ac04:	4b21      	ldr	r3, [pc, #132]	; (800ac8c <HAL_RCC_ClockConfig+0x1f0>)
 800ac06:	683a      	ldr	r2, [r7, #0]
 800ac08:	430a      	orrs	r2, r1
 800ac0a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800ac0c:	f7ff f858 	bl	8009cc0 <HAL_GetTick>
 800ac10:	0003      	movs	r3, r0
 800ac12:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800ac14:	e009      	b.n	800ac2a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ac16:	f7ff f853 	bl	8009cc0 <HAL_GetTick>
 800ac1a:	0002      	movs	r2, r0
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	1ad3      	subs	r3, r2, r3
 800ac20:	4a1b      	ldr	r2, [pc, #108]	; (800ac90 <HAL_RCC_ClockConfig+0x1f4>)
 800ac22:	4293      	cmp	r3, r2
 800ac24:	d901      	bls.n	800ac2a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800ac26:	2303      	movs	r3, #3
 800ac28:	e02c      	b.n	800ac84 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800ac2a:	4b18      	ldr	r3, [pc, #96]	; (800ac8c <HAL_RCC_ClockConfig+0x1f0>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	2207      	movs	r2, #7
 800ac30:	4013      	ands	r3, r2
 800ac32:	683a      	ldr	r2, [r7, #0]
 800ac34:	429a      	cmp	r2, r3
 800ac36:	d1ee      	bne.n	800ac16 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	2204      	movs	r2, #4
 800ac3e:	4013      	ands	r3, r2
 800ac40:	d009      	beq.n	800ac56 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800ac42:	4b14      	ldr	r3, [pc, #80]	; (800ac94 <HAL_RCC_ClockConfig+0x1f8>)
 800ac44:	689b      	ldr	r3, [r3, #8]
 800ac46:	4a15      	ldr	r2, [pc, #84]	; (800ac9c <HAL_RCC_ClockConfig+0x200>)
 800ac48:	4013      	ands	r3, r2
 800ac4a:	0019      	movs	r1, r3
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	68da      	ldr	r2, [r3, #12]
 800ac50:	4b10      	ldr	r3, [pc, #64]	; (800ac94 <HAL_RCC_ClockConfig+0x1f8>)
 800ac52:	430a      	orrs	r2, r1
 800ac54:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800ac56:	f000 f829 	bl	800acac <HAL_RCC_GetSysClockFreq>
 800ac5a:	0001      	movs	r1, r0
 800ac5c:	4b0d      	ldr	r3, [pc, #52]	; (800ac94 <HAL_RCC_ClockConfig+0x1f8>)
 800ac5e:	689b      	ldr	r3, [r3, #8]
 800ac60:	0a1b      	lsrs	r3, r3, #8
 800ac62:	220f      	movs	r2, #15
 800ac64:	401a      	ands	r2, r3
 800ac66:	4b0e      	ldr	r3, [pc, #56]	; (800aca0 <HAL_RCC_ClockConfig+0x204>)
 800ac68:	0092      	lsls	r2, r2, #2
 800ac6a:	58d3      	ldr	r3, [r2, r3]
 800ac6c:	221f      	movs	r2, #31
 800ac6e:	4013      	ands	r3, r2
 800ac70:	000a      	movs	r2, r1
 800ac72:	40da      	lsrs	r2, r3
 800ac74:	4b0b      	ldr	r3, [pc, #44]	; (800aca4 <HAL_RCC_ClockConfig+0x208>)
 800ac76:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800ac78:	4b0b      	ldr	r3, [pc, #44]	; (800aca8 <HAL_RCC_ClockConfig+0x20c>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	0018      	movs	r0, r3
 800ac7e:	f7fe ffc3 	bl	8009c08 <HAL_InitTick>
 800ac82:	0003      	movs	r3, r0
}
 800ac84:	0018      	movs	r0, r3
 800ac86:	46bd      	mov	sp, r7
 800ac88:	b004      	add	sp, #16
 800ac8a:	bd80      	pop	{r7, pc}
 800ac8c:	40022000 	.word	0x40022000
 800ac90:	00001388 	.word	0x00001388
 800ac94:	40021000 	.word	0x40021000
 800ac98:	fffff0ff 	.word	0xfffff0ff
 800ac9c:	ffff8fff 	.word	0xffff8fff
 800aca0:	08013948 	.word	0x08013948
 800aca4:	200000d8 	.word	0x200000d8
 800aca8:	200000dc 	.word	0x200000dc

0800acac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b086      	sub	sp, #24
 800acb0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800acb2:	4b3c      	ldr	r3, [pc, #240]	; (800ada4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800acb4:	689b      	ldr	r3, [r3, #8]
 800acb6:	2238      	movs	r2, #56	; 0x38
 800acb8:	4013      	ands	r3, r2
 800acba:	d10f      	bne.n	800acdc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800acbc:	4b39      	ldr	r3, [pc, #228]	; (800ada4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	0adb      	lsrs	r3, r3, #11
 800acc2:	2207      	movs	r2, #7
 800acc4:	4013      	ands	r3, r2
 800acc6:	2201      	movs	r2, #1
 800acc8:	409a      	lsls	r2, r3
 800acca:	0013      	movs	r3, r2
 800accc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800acce:	6839      	ldr	r1, [r7, #0]
 800acd0:	4835      	ldr	r0, [pc, #212]	; (800ada8 <HAL_RCC_GetSysClockFreq+0xfc>)
 800acd2:	f7f5 fa3b 	bl	800014c <__udivsi3>
 800acd6:	0003      	movs	r3, r0
 800acd8:	613b      	str	r3, [r7, #16]
 800acda:	e05d      	b.n	800ad98 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800acdc:	4b31      	ldr	r3, [pc, #196]	; (800ada4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800acde:	689b      	ldr	r3, [r3, #8]
 800ace0:	2238      	movs	r2, #56	; 0x38
 800ace2:	4013      	ands	r3, r2
 800ace4:	2b08      	cmp	r3, #8
 800ace6:	d102      	bne.n	800acee <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800ace8:	4b30      	ldr	r3, [pc, #192]	; (800adac <HAL_RCC_GetSysClockFreq+0x100>)
 800acea:	613b      	str	r3, [r7, #16]
 800acec:	e054      	b.n	800ad98 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800acee:	4b2d      	ldr	r3, [pc, #180]	; (800ada4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800acf0:	689b      	ldr	r3, [r3, #8]
 800acf2:	2238      	movs	r2, #56	; 0x38
 800acf4:	4013      	ands	r3, r2
 800acf6:	2b10      	cmp	r3, #16
 800acf8:	d138      	bne.n	800ad6c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800acfa:	4b2a      	ldr	r3, [pc, #168]	; (800ada4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800acfc:	68db      	ldr	r3, [r3, #12]
 800acfe:	2203      	movs	r2, #3
 800ad00:	4013      	ands	r3, r2
 800ad02:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ad04:	4b27      	ldr	r3, [pc, #156]	; (800ada4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800ad06:	68db      	ldr	r3, [r3, #12]
 800ad08:	091b      	lsrs	r3, r3, #4
 800ad0a:	2207      	movs	r2, #7
 800ad0c:	4013      	ands	r3, r2
 800ad0e:	3301      	adds	r3, #1
 800ad10:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	2b03      	cmp	r3, #3
 800ad16:	d10d      	bne.n	800ad34 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ad18:	68b9      	ldr	r1, [r7, #8]
 800ad1a:	4824      	ldr	r0, [pc, #144]	; (800adac <HAL_RCC_GetSysClockFreq+0x100>)
 800ad1c:	f7f5 fa16 	bl	800014c <__udivsi3>
 800ad20:	0003      	movs	r3, r0
 800ad22:	0019      	movs	r1, r3
 800ad24:	4b1f      	ldr	r3, [pc, #124]	; (800ada4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800ad26:	68db      	ldr	r3, [r3, #12]
 800ad28:	0a1b      	lsrs	r3, r3, #8
 800ad2a:	227f      	movs	r2, #127	; 0x7f
 800ad2c:	4013      	ands	r3, r2
 800ad2e:	434b      	muls	r3, r1
 800ad30:	617b      	str	r3, [r7, #20]
        break;
 800ad32:	e00d      	b.n	800ad50 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800ad34:	68b9      	ldr	r1, [r7, #8]
 800ad36:	481c      	ldr	r0, [pc, #112]	; (800ada8 <HAL_RCC_GetSysClockFreq+0xfc>)
 800ad38:	f7f5 fa08 	bl	800014c <__udivsi3>
 800ad3c:	0003      	movs	r3, r0
 800ad3e:	0019      	movs	r1, r3
 800ad40:	4b18      	ldr	r3, [pc, #96]	; (800ada4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800ad42:	68db      	ldr	r3, [r3, #12]
 800ad44:	0a1b      	lsrs	r3, r3, #8
 800ad46:	227f      	movs	r2, #127	; 0x7f
 800ad48:	4013      	ands	r3, r2
 800ad4a:	434b      	muls	r3, r1
 800ad4c:	617b      	str	r3, [r7, #20]
        break;
 800ad4e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800ad50:	4b14      	ldr	r3, [pc, #80]	; (800ada4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800ad52:	68db      	ldr	r3, [r3, #12]
 800ad54:	0f5b      	lsrs	r3, r3, #29
 800ad56:	2207      	movs	r2, #7
 800ad58:	4013      	ands	r3, r2
 800ad5a:	3301      	adds	r3, #1
 800ad5c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800ad5e:	6879      	ldr	r1, [r7, #4]
 800ad60:	6978      	ldr	r0, [r7, #20]
 800ad62:	f7f5 f9f3 	bl	800014c <__udivsi3>
 800ad66:	0003      	movs	r3, r0
 800ad68:	613b      	str	r3, [r7, #16]
 800ad6a:	e015      	b.n	800ad98 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800ad6c:	4b0d      	ldr	r3, [pc, #52]	; (800ada4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800ad6e:	689b      	ldr	r3, [r3, #8]
 800ad70:	2238      	movs	r2, #56	; 0x38
 800ad72:	4013      	ands	r3, r2
 800ad74:	2b20      	cmp	r3, #32
 800ad76:	d103      	bne.n	800ad80 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800ad78:	2380      	movs	r3, #128	; 0x80
 800ad7a:	021b      	lsls	r3, r3, #8
 800ad7c:	613b      	str	r3, [r7, #16]
 800ad7e:	e00b      	b.n	800ad98 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800ad80:	4b08      	ldr	r3, [pc, #32]	; (800ada4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800ad82:	689b      	ldr	r3, [r3, #8]
 800ad84:	2238      	movs	r2, #56	; 0x38
 800ad86:	4013      	ands	r3, r2
 800ad88:	2b18      	cmp	r3, #24
 800ad8a:	d103      	bne.n	800ad94 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800ad8c:	23fa      	movs	r3, #250	; 0xfa
 800ad8e:	01db      	lsls	r3, r3, #7
 800ad90:	613b      	str	r3, [r7, #16]
 800ad92:	e001      	b.n	800ad98 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800ad94:	2300      	movs	r3, #0
 800ad96:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800ad98:	693b      	ldr	r3, [r7, #16]
}
 800ad9a:	0018      	movs	r0, r3
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	b006      	add	sp, #24
 800ada0:	bd80      	pop	{r7, pc}
 800ada2:	46c0      	nop			; (mov r8, r8)
 800ada4:	40021000 	.word	0x40021000
 800ada8:	00f42400 	.word	0x00f42400
 800adac:	007a1200 	.word	0x007a1200

0800adb0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800adb4:	4b02      	ldr	r3, [pc, #8]	; (800adc0 <HAL_RCC_GetHCLKFreq+0x10>)
 800adb6:	681b      	ldr	r3, [r3, #0]
}
 800adb8:	0018      	movs	r0, r3
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}
 800adbe:	46c0      	nop			; (mov r8, r8)
 800adc0:	200000d8 	.word	0x200000d8

0800adc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800adc4:	b5b0      	push	{r4, r5, r7, lr}
 800adc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800adc8:	f7ff fff2 	bl	800adb0 <HAL_RCC_GetHCLKFreq>
 800adcc:	0004      	movs	r4, r0
 800adce:	f7ff fb49 	bl	800a464 <LL_RCC_GetAPB1Prescaler>
 800add2:	0003      	movs	r3, r0
 800add4:	0b1a      	lsrs	r2, r3, #12
 800add6:	4b05      	ldr	r3, [pc, #20]	; (800adec <HAL_RCC_GetPCLK1Freq+0x28>)
 800add8:	0092      	lsls	r2, r2, #2
 800adda:	58d3      	ldr	r3, [r2, r3]
 800addc:	221f      	movs	r2, #31
 800adde:	4013      	ands	r3, r2
 800ade0:	40dc      	lsrs	r4, r3
 800ade2:	0023      	movs	r3, r4
}
 800ade4:	0018      	movs	r0, r3
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bdb0      	pop	{r4, r5, r7, pc}
 800adea:	46c0      	nop			; (mov r8, r8)
 800adec:	08013988 	.word	0x08013988

0800adf0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b086      	sub	sp, #24
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800adf8:	2313      	movs	r3, #19
 800adfa:	18fb      	adds	r3, r7, r3
 800adfc:	2200      	movs	r2, #0
 800adfe:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ae00:	2312      	movs	r3, #18
 800ae02:	18fb      	adds	r3, r7, r3
 800ae04:	2200      	movs	r2, #0
 800ae06:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681a      	ldr	r2, [r3, #0]
 800ae0c:	2380      	movs	r3, #128	; 0x80
 800ae0e:	029b      	lsls	r3, r3, #10
 800ae10:	4013      	ands	r3, r2
 800ae12:	d100      	bne.n	800ae16 <HAL_RCCEx_PeriphCLKConfig+0x26>
 800ae14:	e0a3      	b.n	800af5e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ae16:	2011      	movs	r0, #17
 800ae18:	183b      	adds	r3, r7, r0
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ae1e:	4b86      	ldr	r3, [pc, #536]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800ae20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae22:	2380      	movs	r3, #128	; 0x80
 800ae24:	055b      	lsls	r3, r3, #21
 800ae26:	4013      	ands	r3, r2
 800ae28:	d110      	bne.n	800ae4c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ae2a:	4b83      	ldr	r3, [pc, #524]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800ae2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae2e:	4b82      	ldr	r3, [pc, #520]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800ae30:	2180      	movs	r1, #128	; 0x80
 800ae32:	0549      	lsls	r1, r1, #21
 800ae34:	430a      	orrs	r2, r1
 800ae36:	63da      	str	r2, [r3, #60]	; 0x3c
 800ae38:	4b7f      	ldr	r3, [pc, #508]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800ae3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae3c:	2380      	movs	r3, #128	; 0x80
 800ae3e:	055b      	lsls	r3, r3, #21
 800ae40:	4013      	ands	r3, r2
 800ae42:	60bb      	str	r3, [r7, #8]
 800ae44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ae46:	183b      	adds	r3, r7, r0
 800ae48:	2201      	movs	r2, #1
 800ae4a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ae4c:	4b7b      	ldr	r3, [pc, #492]	; (800b03c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800ae4e:	681a      	ldr	r2, [r3, #0]
 800ae50:	4b7a      	ldr	r3, [pc, #488]	; (800b03c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800ae52:	2180      	movs	r1, #128	; 0x80
 800ae54:	0049      	lsls	r1, r1, #1
 800ae56:	430a      	orrs	r2, r1
 800ae58:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ae5a:	f7fe ff31 	bl	8009cc0 <HAL_GetTick>
 800ae5e:	0003      	movs	r3, r0
 800ae60:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ae62:	e00b      	b.n	800ae7c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ae64:	f7fe ff2c 	bl	8009cc0 <HAL_GetTick>
 800ae68:	0002      	movs	r2, r0
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	1ad3      	subs	r3, r2, r3
 800ae6e:	2b02      	cmp	r3, #2
 800ae70:	d904      	bls.n	800ae7c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800ae72:	2313      	movs	r3, #19
 800ae74:	18fb      	adds	r3, r7, r3
 800ae76:	2203      	movs	r2, #3
 800ae78:	701a      	strb	r2, [r3, #0]
        break;
 800ae7a:	e005      	b.n	800ae88 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ae7c:	4b6f      	ldr	r3, [pc, #444]	; (800b03c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800ae7e:	681a      	ldr	r2, [r3, #0]
 800ae80:	2380      	movs	r3, #128	; 0x80
 800ae82:	005b      	lsls	r3, r3, #1
 800ae84:	4013      	ands	r3, r2
 800ae86:	d0ed      	beq.n	800ae64 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800ae88:	2313      	movs	r3, #19
 800ae8a:	18fb      	adds	r3, r7, r3
 800ae8c:	781b      	ldrb	r3, [r3, #0]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d154      	bne.n	800af3c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800ae92:	4b69      	ldr	r3, [pc, #420]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800ae94:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ae96:	23c0      	movs	r3, #192	; 0xc0
 800ae98:	009b      	lsls	r3, r3, #2
 800ae9a:	4013      	ands	r3, r2
 800ae9c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800ae9e:	697b      	ldr	r3, [r7, #20]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d019      	beq.n	800aed8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	699b      	ldr	r3, [r3, #24]
 800aea8:	697a      	ldr	r2, [r7, #20]
 800aeaa:	429a      	cmp	r2, r3
 800aeac:	d014      	beq.n	800aed8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800aeae:	4b62      	ldr	r3, [pc, #392]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800aeb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aeb2:	4a63      	ldr	r2, [pc, #396]	; (800b040 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800aeb4:	4013      	ands	r3, r2
 800aeb6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800aeb8:	4b5f      	ldr	r3, [pc, #380]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800aeba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800aebc:	4b5e      	ldr	r3, [pc, #376]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800aebe:	2180      	movs	r1, #128	; 0x80
 800aec0:	0249      	lsls	r1, r1, #9
 800aec2:	430a      	orrs	r2, r1
 800aec4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800aec6:	4b5c      	ldr	r3, [pc, #368]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800aec8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800aeca:	4b5b      	ldr	r3, [pc, #364]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800aecc:	495d      	ldr	r1, [pc, #372]	; (800b044 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800aece:	400a      	ands	r2, r1
 800aed0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800aed2:	4b59      	ldr	r3, [pc, #356]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800aed4:	697a      	ldr	r2, [r7, #20]
 800aed6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	2201      	movs	r2, #1
 800aedc:	4013      	ands	r3, r2
 800aede:	d016      	beq.n	800af0e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aee0:	f7fe feee 	bl	8009cc0 <HAL_GetTick>
 800aee4:	0003      	movs	r3, r0
 800aee6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aee8:	e00c      	b.n	800af04 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aeea:	f7fe fee9 	bl	8009cc0 <HAL_GetTick>
 800aeee:	0002      	movs	r2, r0
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	1ad3      	subs	r3, r2, r3
 800aef4:	4a54      	ldr	r2, [pc, #336]	; (800b048 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800aef6:	4293      	cmp	r3, r2
 800aef8:	d904      	bls.n	800af04 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800aefa:	2313      	movs	r3, #19
 800aefc:	18fb      	adds	r3, r7, r3
 800aefe:	2203      	movs	r2, #3
 800af00:	701a      	strb	r2, [r3, #0]
            break;
 800af02:	e004      	b.n	800af0e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800af04:	4b4c      	ldr	r3, [pc, #304]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800af06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af08:	2202      	movs	r2, #2
 800af0a:	4013      	ands	r3, r2
 800af0c:	d0ed      	beq.n	800aeea <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800af0e:	2313      	movs	r3, #19
 800af10:	18fb      	adds	r3, r7, r3
 800af12:	781b      	ldrb	r3, [r3, #0]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d10a      	bne.n	800af2e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800af18:	4b47      	ldr	r3, [pc, #284]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800af1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af1c:	4a48      	ldr	r2, [pc, #288]	; (800b040 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800af1e:	4013      	ands	r3, r2
 800af20:	0019      	movs	r1, r3
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	699a      	ldr	r2, [r3, #24]
 800af26:	4b44      	ldr	r3, [pc, #272]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800af28:	430a      	orrs	r2, r1
 800af2a:	65da      	str	r2, [r3, #92]	; 0x5c
 800af2c:	e00c      	b.n	800af48 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800af2e:	2312      	movs	r3, #18
 800af30:	18fb      	adds	r3, r7, r3
 800af32:	2213      	movs	r2, #19
 800af34:	18ba      	adds	r2, r7, r2
 800af36:	7812      	ldrb	r2, [r2, #0]
 800af38:	701a      	strb	r2, [r3, #0]
 800af3a:	e005      	b.n	800af48 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af3c:	2312      	movs	r3, #18
 800af3e:	18fb      	adds	r3, r7, r3
 800af40:	2213      	movs	r2, #19
 800af42:	18ba      	adds	r2, r7, r2
 800af44:	7812      	ldrb	r2, [r2, #0]
 800af46:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800af48:	2311      	movs	r3, #17
 800af4a:	18fb      	adds	r3, r7, r3
 800af4c:	781b      	ldrb	r3, [r3, #0]
 800af4e:	2b01      	cmp	r3, #1
 800af50:	d105      	bne.n	800af5e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800af52:	4b39      	ldr	r3, [pc, #228]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800af54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800af56:	4b38      	ldr	r3, [pc, #224]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800af58:	493c      	ldr	r1, [pc, #240]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800af5a:	400a      	ands	r2, r1
 800af5c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	2201      	movs	r2, #1
 800af64:	4013      	ands	r3, r2
 800af66:	d009      	beq.n	800af7c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800af68:	4b33      	ldr	r3, [pc, #204]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800af6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af6c:	2203      	movs	r2, #3
 800af6e:	4393      	bics	r3, r2
 800af70:	0019      	movs	r1, r3
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	685a      	ldr	r2, [r3, #4]
 800af76:	4b30      	ldr	r3, [pc, #192]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800af78:	430a      	orrs	r2, r1
 800af7a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	2202      	movs	r2, #2
 800af82:	4013      	ands	r3, r2
 800af84:	d009      	beq.n	800af9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800af86:	4b2c      	ldr	r3, [pc, #176]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800af88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af8a:	220c      	movs	r2, #12
 800af8c:	4393      	bics	r3, r2
 800af8e:	0019      	movs	r1, r3
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	689a      	ldr	r2, [r3, #8]
 800af94:	4b28      	ldr	r3, [pc, #160]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800af96:	430a      	orrs	r2, r1
 800af98:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	2220      	movs	r2, #32
 800afa0:	4013      	ands	r3, r2
 800afa2:	d009      	beq.n	800afb8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800afa4:	4b24      	ldr	r3, [pc, #144]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800afa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afa8:	4a29      	ldr	r2, [pc, #164]	; (800b050 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800afaa:	4013      	ands	r3, r2
 800afac:	0019      	movs	r1, r3
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	68da      	ldr	r2, [r3, #12]
 800afb2:	4b21      	ldr	r3, [pc, #132]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800afb4:	430a      	orrs	r2, r1
 800afb6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681a      	ldr	r2, [r3, #0]
 800afbc:	2380      	movs	r3, #128	; 0x80
 800afbe:	01db      	lsls	r3, r3, #7
 800afc0:	4013      	ands	r3, r2
 800afc2:	d015      	beq.n	800aff0 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800afc4:	4b1c      	ldr	r3, [pc, #112]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800afc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afc8:	009b      	lsls	r3, r3, #2
 800afca:	0899      	lsrs	r1, r3, #2
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	695a      	ldr	r2, [r3, #20]
 800afd0:	4b19      	ldr	r3, [pc, #100]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800afd2:	430a      	orrs	r2, r1
 800afd4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	695a      	ldr	r2, [r3, #20]
 800afda:	2380      	movs	r3, #128	; 0x80
 800afdc:	05db      	lsls	r3, r3, #23
 800afde:	429a      	cmp	r2, r3
 800afe0:	d106      	bne.n	800aff0 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800afe2:	4b15      	ldr	r3, [pc, #84]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800afe4:	68da      	ldr	r2, [r3, #12]
 800afe6:	4b14      	ldr	r3, [pc, #80]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800afe8:	2180      	movs	r1, #128	; 0x80
 800afea:	0249      	lsls	r1, r1, #9
 800afec:	430a      	orrs	r2, r1
 800afee:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681a      	ldr	r2, [r3, #0]
 800aff4:	2380      	movs	r3, #128	; 0x80
 800aff6:	011b      	lsls	r3, r3, #4
 800aff8:	4013      	ands	r3, r2
 800affa:	d016      	beq.n	800b02a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800affc:	4b0e      	ldr	r3, [pc, #56]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800affe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b000:	4a14      	ldr	r2, [pc, #80]	; (800b054 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800b002:	4013      	ands	r3, r2
 800b004:	0019      	movs	r1, r3
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	691a      	ldr	r2, [r3, #16]
 800b00a:	4b0b      	ldr	r3, [pc, #44]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800b00c:	430a      	orrs	r2, r1
 800b00e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	691a      	ldr	r2, [r3, #16]
 800b014:	2380      	movs	r3, #128	; 0x80
 800b016:	01db      	lsls	r3, r3, #7
 800b018:	429a      	cmp	r2, r3
 800b01a:	d106      	bne.n	800b02a <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800b01c:	4b06      	ldr	r3, [pc, #24]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800b01e:	68da      	ldr	r2, [r3, #12]
 800b020:	4b05      	ldr	r3, [pc, #20]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800b022:	2180      	movs	r1, #128	; 0x80
 800b024:	0249      	lsls	r1, r1, #9
 800b026:	430a      	orrs	r2, r1
 800b028:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800b02a:	2312      	movs	r3, #18
 800b02c:	18fb      	adds	r3, r7, r3
 800b02e:	781b      	ldrb	r3, [r3, #0]
}
 800b030:	0018      	movs	r0, r3
 800b032:	46bd      	mov	sp, r7
 800b034:	b006      	add	sp, #24
 800b036:	bd80      	pop	{r7, pc}
 800b038:	40021000 	.word	0x40021000
 800b03c:	40007000 	.word	0x40007000
 800b040:	fffffcff 	.word	0xfffffcff
 800b044:	fffeffff 	.word	0xfffeffff
 800b048:	00001388 	.word	0x00001388
 800b04c:	efffffff 	.word	0xefffffff
 800b050:	ffffcfff 	.word	0xffffcfff
 800b054:	ffff3fff 	.word	0xffff3fff

0800b058 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b084      	sub	sp, #16
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d101      	bne.n	800b06a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b066:	2301      	movs	r3, #1
 800b068:	e0a8      	b.n	800b1bc <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d109      	bne.n	800b086 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	685a      	ldr	r2, [r3, #4]
 800b076:	2382      	movs	r3, #130	; 0x82
 800b078:	005b      	lsls	r3, r3, #1
 800b07a:	429a      	cmp	r2, r3
 800b07c:	d009      	beq.n	800b092 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2200      	movs	r2, #0
 800b082:	61da      	str	r2, [r3, #28]
 800b084:	e005      	b.n	800b092 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2200      	movs	r2, #0
 800b08a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2200      	movs	r2, #0
 800b090:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2200      	movs	r2, #0
 800b096:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	225d      	movs	r2, #93	; 0x5d
 800b09c:	5c9b      	ldrb	r3, [r3, r2]
 800b09e:	b2db      	uxtb	r3, r3
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d107      	bne.n	800b0b4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	225c      	movs	r2, #92	; 0x5c
 800b0a8:	2100      	movs	r1, #0
 800b0aa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	0018      	movs	r0, r3
 800b0b0:	f7fd fc82 	bl	80089b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	225d      	movs	r2, #93	; 0x5d
 800b0b8:	2102      	movs	r1, #2
 800b0ba:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	681a      	ldr	r2, [r3, #0]
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	2140      	movs	r1, #64	; 0x40
 800b0c8:	438a      	bics	r2, r1
 800b0ca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	68da      	ldr	r2, [r3, #12]
 800b0d0:	23e0      	movs	r3, #224	; 0xe0
 800b0d2:	00db      	lsls	r3, r3, #3
 800b0d4:	429a      	cmp	r2, r3
 800b0d6:	d902      	bls.n	800b0de <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b0d8:	2300      	movs	r3, #0
 800b0da:	60fb      	str	r3, [r7, #12]
 800b0dc:	e002      	b.n	800b0e4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b0de:	2380      	movs	r3, #128	; 0x80
 800b0e0:	015b      	lsls	r3, r3, #5
 800b0e2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	68da      	ldr	r2, [r3, #12]
 800b0e8:	23f0      	movs	r3, #240	; 0xf0
 800b0ea:	011b      	lsls	r3, r3, #4
 800b0ec:	429a      	cmp	r2, r3
 800b0ee:	d008      	beq.n	800b102 <HAL_SPI_Init+0xaa>
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	68da      	ldr	r2, [r3, #12]
 800b0f4:	23e0      	movs	r3, #224	; 0xe0
 800b0f6:	00db      	lsls	r3, r3, #3
 800b0f8:	429a      	cmp	r2, r3
 800b0fa:	d002      	beq.n	800b102 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2200      	movs	r2, #0
 800b100:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	685a      	ldr	r2, [r3, #4]
 800b106:	2382      	movs	r3, #130	; 0x82
 800b108:	005b      	lsls	r3, r3, #1
 800b10a:	401a      	ands	r2, r3
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6899      	ldr	r1, [r3, #8]
 800b110:	2384      	movs	r3, #132	; 0x84
 800b112:	021b      	lsls	r3, r3, #8
 800b114:	400b      	ands	r3, r1
 800b116:	431a      	orrs	r2, r3
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	691b      	ldr	r3, [r3, #16]
 800b11c:	2102      	movs	r1, #2
 800b11e:	400b      	ands	r3, r1
 800b120:	431a      	orrs	r2, r3
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	695b      	ldr	r3, [r3, #20]
 800b126:	2101      	movs	r1, #1
 800b128:	400b      	ands	r3, r1
 800b12a:	431a      	orrs	r2, r3
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	6999      	ldr	r1, [r3, #24]
 800b130:	2380      	movs	r3, #128	; 0x80
 800b132:	009b      	lsls	r3, r3, #2
 800b134:	400b      	ands	r3, r1
 800b136:	431a      	orrs	r2, r3
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	69db      	ldr	r3, [r3, #28]
 800b13c:	2138      	movs	r1, #56	; 0x38
 800b13e:	400b      	ands	r3, r1
 800b140:	431a      	orrs	r2, r3
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	6a1b      	ldr	r3, [r3, #32]
 800b146:	2180      	movs	r1, #128	; 0x80
 800b148:	400b      	ands	r3, r1
 800b14a:	431a      	orrs	r2, r3
 800b14c:	0011      	movs	r1, r2
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b152:	2380      	movs	r3, #128	; 0x80
 800b154:	019b      	lsls	r3, r3, #6
 800b156:	401a      	ands	r2, r3
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	430a      	orrs	r2, r1
 800b15e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	699b      	ldr	r3, [r3, #24]
 800b164:	0c1b      	lsrs	r3, r3, #16
 800b166:	2204      	movs	r2, #4
 800b168:	401a      	ands	r2, r3
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b16e:	2110      	movs	r1, #16
 800b170:	400b      	ands	r3, r1
 800b172:	431a      	orrs	r2, r3
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b178:	2108      	movs	r1, #8
 800b17a:	400b      	ands	r3, r1
 800b17c:	431a      	orrs	r2, r3
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	68d9      	ldr	r1, [r3, #12]
 800b182:	23f0      	movs	r3, #240	; 0xf0
 800b184:	011b      	lsls	r3, r3, #4
 800b186:	400b      	ands	r3, r1
 800b188:	431a      	orrs	r2, r3
 800b18a:	0011      	movs	r1, r2
 800b18c:	68fa      	ldr	r2, [r7, #12]
 800b18e:	2380      	movs	r3, #128	; 0x80
 800b190:	015b      	lsls	r3, r3, #5
 800b192:	401a      	ands	r2, r3
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	430a      	orrs	r2, r1
 800b19a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	69da      	ldr	r2, [r3, #28]
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	4907      	ldr	r1, [pc, #28]	; (800b1c4 <HAL_SPI_Init+0x16c>)
 800b1a8:	400a      	ands	r2, r1
 800b1aa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	225d      	movs	r2, #93	; 0x5d
 800b1b6:	2101      	movs	r1, #1
 800b1b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b1ba:	2300      	movs	r3, #0
}
 800b1bc:	0018      	movs	r0, r3
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	b004      	add	sp, #16
 800b1c2:	bd80      	pop	{r7, pc}
 800b1c4:	fffff7ff 	.word	0xfffff7ff

0800b1c8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b088      	sub	sp, #32
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	60f8      	str	r0, [r7, #12]
 800b1d0:	60b9      	str	r1, [r7, #8]
 800b1d2:	603b      	str	r3, [r7, #0]
 800b1d4:	1dbb      	adds	r3, r7, #6
 800b1d6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b1d8:	231f      	movs	r3, #31
 800b1da:	18fb      	adds	r3, r7, r3
 800b1dc:	2200      	movs	r2, #0
 800b1de:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	225c      	movs	r2, #92	; 0x5c
 800b1e4:	5c9b      	ldrb	r3, [r3, r2]
 800b1e6:	2b01      	cmp	r3, #1
 800b1e8:	d101      	bne.n	800b1ee <HAL_SPI_Transmit+0x26>
 800b1ea:	2302      	movs	r3, #2
 800b1ec:	e140      	b.n	800b470 <HAL_SPI_Transmit+0x2a8>
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	225c      	movs	r2, #92	; 0x5c
 800b1f2:	2101      	movs	r1, #1
 800b1f4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b1f6:	f7fe fd63 	bl	8009cc0 <HAL_GetTick>
 800b1fa:	0003      	movs	r3, r0
 800b1fc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800b1fe:	2316      	movs	r3, #22
 800b200:	18fb      	adds	r3, r7, r3
 800b202:	1dba      	adds	r2, r7, #6
 800b204:	8812      	ldrh	r2, [r2, #0]
 800b206:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	225d      	movs	r2, #93	; 0x5d
 800b20c:	5c9b      	ldrb	r3, [r3, r2]
 800b20e:	b2db      	uxtb	r3, r3
 800b210:	2b01      	cmp	r3, #1
 800b212:	d004      	beq.n	800b21e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800b214:	231f      	movs	r3, #31
 800b216:	18fb      	adds	r3, r7, r3
 800b218:	2202      	movs	r2, #2
 800b21a:	701a      	strb	r2, [r3, #0]
    goto error;
 800b21c:	e11d      	b.n	800b45a <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d003      	beq.n	800b22c <HAL_SPI_Transmit+0x64>
 800b224:	1dbb      	adds	r3, r7, #6
 800b226:	881b      	ldrh	r3, [r3, #0]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d104      	bne.n	800b236 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800b22c:	231f      	movs	r3, #31
 800b22e:	18fb      	adds	r3, r7, r3
 800b230:	2201      	movs	r2, #1
 800b232:	701a      	strb	r2, [r3, #0]
    goto error;
 800b234:	e111      	b.n	800b45a <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	225d      	movs	r2, #93	; 0x5d
 800b23a:	2103      	movs	r1, #3
 800b23c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	2200      	movs	r2, #0
 800b242:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	68ba      	ldr	r2, [r7, #8]
 800b248:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	1dba      	adds	r2, r7, #6
 800b24e:	8812      	ldrh	r2, [r2, #0]
 800b250:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	1dba      	adds	r2, r7, #6
 800b256:	8812      	ldrh	r2, [r2, #0]
 800b258:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	2200      	movs	r2, #0
 800b25e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	2244      	movs	r2, #68	; 0x44
 800b264:	2100      	movs	r1, #0
 800b266:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	2246      	movs	r2, #70	; 0x46
 800b26c:	2100      	movs	r1, #0
 800b26e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	2200      	movs	r2, #0
 800b274:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	2200      	movs	r2, #0
 800b27a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	689a      	ldr	r2, [r3, #8]
 800b280:	2380      	movs	r3, #128	; 0x80
 800b282:	021b      	lsls	r3, r3, #8
 800b284:	429a      	cmp	r2, r3
 800b286:	d110      	bne.n	800b2aa <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	681a      	ldr	r2, [r3, #0]
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	2140      	movs	r1, #64	; 0x40
 800b294:	438a      	bics	r2, r1
 800b296:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	681a      	ldr	r2, [r3, #0]
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	2180      	movs	r1, #128	; 0x80
 800b2a4:	01c9      	lsls	r1, r1, #7
 800b2a6:	430a      	orrs	r2, r1
 800b2a8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	2240      	movs	r2, #64	; 0x40
 800b2b2:	4013      	ands	r3, r2
 800b2b4:	2b40      	cmp	r3, #64	; 0x40
 800b2b6:	d007      	beq.n	800b2c8 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	681a      	ldr	r2, [r3, #0]
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	2140      	movs	r1, #64	; 0x40
 800b2c4:	430a      	orrs	r2, r1
 800b2c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	68da      	ldr	r2, [r3, #12]
 800b2cc:	23e0      	movs	r3, #224	; 0xe0
 800b2ce:	00db      	lsls	r3, r3, #3
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	d94e      	bls.n	800b372 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	685b      	ldr	r3, [r3, #4]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d004      	beq.n	800b2e6 <HAL_SPI_Transmit+0x11e>
 800b2dc:	2316      	movs	r3, #22
 800b2de:	18fb      	adds	r3, r7, r3
 800b2e0:	881b      	ldrh	r3, [r3, #0]
 800b2e2:	2b01      	cmp	r3, #1
 800b2e4:	d13f      	bne.n	800b366 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2ea:	881a      	ldrh	r2, [r3, #0]
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2f6:	1c9a      	adds	r2, r3, #2
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b300:	b29b      	uxth	r3, r3
 800b302:	3b01      	subs	r3, #1
 800b304:	b29a      	uxth	r2, r3
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b30a:	e02c      	b.n	800b366 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	689b      	ldr	r3, [r3, #8]
 800b312:	2202      	movs	r2, #2
 800b314:	4013      	ands	r3, r2
 800b316:	2b02      	cmp	r3, #2
 800b318:	d112      	bne.n	800b340 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b31e:	881a      	ldrh	r2, [r3, #0]
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b32a:	1c9a      	adds	r2, r3, #2
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b334:	b29b      	uxth	r3, r3
 800b336:	3b01      	subs	r3, #1
 800b338:	b29a      	uxth	r2, r3
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b33e:	e012      	b.n	800b366 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b340:	f7fe fcbe 	bl	8009cc0 <HAL_GetTick>
 800b344:	0002      	movs	r2, r0
 800b346:	69bb      	ldr	r3, [r7, #24]
 800b348:	1ad3      	subs	r3, r2, r3
 800b34a:	683a      	ldr	r2, [r7, #0]
 800b34c:	429a      	cmp	r2, r3
 800b34e:	d802      	bhi.n	800b356 <HAL_SPI_Transmit+0x18e>
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	3301      	adds	r3, #1
 800b354:	d102      	bne.n	800b35c <HAL_SPI_Transmit+0x194>
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d104      	bne.n	800b366 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 800b35c:	231f      	movs	r3, #31
 800b35e:	18fb      	adds	r3, r7, r3
 800b360:	2203      	movs	r2, #3
 800b362:	701a      	strb	r2, [r3, #0]
          goto error;
 800b364:	e079      	b.n	800b45a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b36a:	b29b      	uxth	r3, r3
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d1cd      	bne.n	800b30c <HAL_SPI_Transmit+0x144>
 800b370:	e04f      	b.n	800b412 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	685b      	ldr	r3, [r3, #4]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d004      	beq.n	800b384 <HAL_SPI_Transmit+0x1bc>
 800b37a:	2316      	movs	r3, #22
 800b37c:	18fb      	adds	r3, r7, r3
 800b37e:	881b      	ldrh	r3, [r3, #0]
 800b380:	2b01      	cmp	r3, #1
 800b382:	d141      	bne.n	800b408 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	330c      	adds	r3, #12
 800b38e:	7812      	ldrb	r2, [r2, #0]
 800b390:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b396:	1c5a      	adds	r2, r3, #1
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b3a0:	b29b      	uxth	r3, r3
 800b3a2:	3b01      	subs	r3, #1
 800b3a4:	b29a      	uxth	r2, r3
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800b3aa:	e02d      	b.n	800b408 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	689b      	ldr	r3, [r3, #8]
 800b3b2:	2202      	movs	r2, #2
 800b3b4:	4013      	ands	r3, r2
 800b3b6:	2b02      	cmp	r3, #2
 800b3b8:	d113      	bne.n	800b3e2 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	330c      	adds	r3, #12
 800b3c4:	7812      	ldrb	r2, [r2, #0]
 800b3c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3cc:	1c5a      	adds	r2, r3, #1
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b3d6:	b29b      	uxth	r3, r3
 800b3d8:	3b01      	subs	r3, #1
 800b3da:	b29a      	uxth	r2, r3
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b3e0:	e012      	b.n	800b408 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b3e2:	f7fe fc6d 	bl	8009cc0 <HAL_GetTick>
 800b3e6:	0002      	movs	r2, r0
 800b3e8:	69bb      	ldr	r3, [r7, #24]
 800b3ea:	1ad3      	subs	r3, r2, r3
 800b3ec:	683a      	ldr	r2, [r7, #0]
 800b3ee:	429a      	cmp	r2, r3
 800b3f0:	d802      	bhi.n	800b3f8 <HAL_SPI_Transmit+0x230>
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	3301      	adds	r3, #1
 800b3f6:	d102      	bne.n	800b3fe <HAL_SPI_Transmit+0x236>
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d104      	bne.n	800b408 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800b3fe:	231f      	movs	r3, #31
 800b400:	18fb      	adds	r3, r7, r3
 800b402:	2203      	movs	r2, #3
 800b404:	701a      	strb	r2, [r3, #0]
          goto error;
 800b406:	e028      	b.n	800b45a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b40c:	b29b      	uxth	r3, r3
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d1cc      	bne.n	800b3ac <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b412:	69ba      	ldr	r2, [r7, #24]
 800b414:	6839      	ldr	r1, [r7, #0]
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	0018      	movs	r0, r3
 800b41a:	f000 fdf5 	bl	800c008 <SPI_EndRxTxTransaction>
 800b41e:	1e03      	subs	r3, r0, #0
 800b420:	d002      	beq.n	800b428 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	2220      	movs	r2, #32
 800b426:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	689b      	ldr	r3, [r3, #8]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d10a      	bne.n	800b446 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b430:	2300      	movs	r3, #0
 800b432:	613b      	str	r3, [r7, #16]
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	68db      	ldr	r3, [r3, #12]
 800b43a:	613b      	str	r3, [r7, #16]
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	689b      	ldr	r3, [r3, #8]
 800b442:	613b      	str	r3, [r7, #16]
 800b444:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d004      	beq.n	800b458 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800b44e:	231f      	movs	r3, #31
 800b450:	18fb      	adds	r3, r7, r3
 800b452:	2201      	movs	r2, #1
 800b454:	701a      	strb	r2, [r3, #0]
 800b456:	e000      	b.n	800b45a <HAL_SPI_Transmit+0x292>
  }

error:
 800b458:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	225d      	movs	r2, #93	; 0x5d
 800b45e:	2101      	movs	r1, #1
 800b460:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	225c      	movs	r2, #92	; 0x5c
 800b466:	2100      	movs	r1, #0
 800b468:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800b46a:	231f      	movs	r3, #31
 800b46c:	18fb      	adds	r3, r7, r3
 800b46e:	781b      	ldrb	r3, [r3, #0]
}
 800b470:	0018      	movs	r0, r3
 800b472:	46bd      	mov	sp, r7
 800b474:	b008      	add	sp, #32
 800b476:	bd80      	pop	{r7, pc}

0800b478 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b478:	b590      	push	{r4, r7, lr}
 800b47a:	b089      	sub	sp, #36	; 0x24
 800b47c:	af02      	add	r7, sp, #8
 800b47e:	60f8      	str	r0, [r7, #12]
 800b480:	60b9      	str	r1, [r7, #8]
 800b482:	603b      	str	r3, [r7, #0]
 800b484:	1dbb      	adds	r3, r7, #6
 800b486:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b488:	2317      	movs	r3, #23
 800b48a:	18fb      	adds	r3, r7, r3
 800b48c:	2200      	movs	r2, #0
 800b48e:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	685a      	ldr	r2, [r3, #4]
 800b494:	2382      	movs	r3, #130	; 0x82
 800b496:	005b      	lsls	r3, r3, #1
 800b498:	429a      	cmp	r2, r3
 800b49a:	d113      	bne.n	800b4c4 <HAL_SPI_Receive+0x4c>
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	689b      	ldr	r3, [r3, #8]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d10f      	bne.n	800b4c4 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	225d      	movs	r2, #93	; 0x5d
 800b4a8:	2104      	movs	r1, #4
 800b4aa:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b4ac:	1dbb      	adds	r3, r7, #6
 800b4ae:	881c      	ldrh	r4, [r3, #0]
 800b4b0:	68ba      	ldr	r2, [r7, #8]
 800b4b2:	68b9      	ldr	r1, [r7, #8]
 800b4b4:	68f8      	ldr	r0, [r7, #12]
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	9300      	str	r3, [sp, #0]
 800b4ba:	0023      	movs	r3, r4
 800b4bc:	f000 f928 	bl	800b710 <HAL_SPI_TransmitReceive>
 800b4c0:	0003      	movs	r3, r0
 800b4c2:	e11c      	b.n	800b6fe <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	225c      	movs	r2, #92	; 0x5c
 800b4c8:	5c9b      	ldrb	r3, [r3, r2]
 800b4ca:	2b01      	cmp	r3, #1
 800b4cc:	d101      	bne.n	800b4d2 <HAL_SPI_Receive+0x5a>
 800b4ce:	2302      	movs	r3, #2
 800b4d0:	e115      	b.n	800b6fe <HAL_SPI_Receive+0x286>
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	225c      	movs	r2, #92	; 0x5c
 800b4d6:	2101      	movs	r1, #1
 800b4d8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b4da:	f7fe fbf1 	bl	8009cc0 <HAL_GetTick>
 800b4de:	0003      	movs	r3, r0
 800b4e0:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	225d      	movs	r2, #93	; 0x5d
 800b4e6:	5c9b      	ldrb	r3, [r3, r2]
 800b4e8:	b2db      	uxtb	r3, r3
 800b4ea:	2b01      	cmp	r3, #1
 800b4ec:	d004      	beq.n	800b4f8 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 800b4ee:	2317      	movs	r3, #23
 800b4f0:	18fb      	adds	r3, r7, r3
 800b4f2:	2202      	movs	r2, #2
 800b4f4:	701a      	strb	r2, [r3, #0]
    goto error;
 800b4f6:	e0f7      	b.n	800b6e8 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d003      	beq.n	800b506 <HAL_SPI_Receive+0x8e>
 800b4fe:	1dbb      	adds	r3, r7, #6
 800b500:	881b      	ldrh	r3, [r3, #0]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d104      	bne.n	800b510 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 800b506:	2317      	movs	r3, #23
 800b508:	18fb      	adds	r3, r7, r3
 800b50a:	2201      	movs	r2, #1
 800b50c:	701a      	strb	r2, [r3, #0]
    goto error;
 800b50e:	e0eb      	b.n	800b6e8 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	225d      	movs	r2, #93	; 0x5d
 800b514:	2104      	movs	r1, #4
 800b516:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	2200      	movs	r2, #0
 800b51c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	68ba      	ldr	r2, [r7, #8]
 800b522:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	1dba      	adds	r2, r7, #6
 800b528:	2144      	movs	r1, #68	; 0x44
 800b52a:	8812      	ldrh	r2, [r2, #0]
 800b52c:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	1dba      	adds	r2, r7, #6
 800b532:	2146      	movs	r1, #70	; 0x46
 800b534:	8812      	ldrh	r2, [r2, #0]
 800b536:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	2200      	movs	r2, #0
 800b53c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	2200      	movs	r2, #0
 800b542:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	2200      	movs	r2, #0
 800b548:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	2200      	movs	r2, #0
 800b54e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	2200      	movs	r2, #0
 800b554:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	68da      	ldr	r2, [r3, #12]
 800b55a:	23e0      	movs	r3, #224	; 0xe0
 800b55c:	00db      	lsls	r3, r3, #3
 800b55e:	429a      	cmp	r2, r3
 800b560:	d908      	bls.n	800b574 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	685a      	ldr	r2, [r3, #4]
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	4966      	ldr	r1, [pc, #408]	; (800b708 <HAL_SPI_Receive+0x290>)
 800b56e:	400a      	ands	r2, r1
 800b570:	605a      	str	r2, [r3, #4]
 800b572:	e008      	b.n	800b586 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	685a      	ldr	r2, [r3, #4]
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	2180      	movs	r1, #128	; 0x80
 800b580:	0149      	lsls	r1, r1, #5
 800b582:	430a      	orrs	r2, r1
 800b584:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	689a      	ldr	r2, [r3, #8]
 800b58a:	2380      	movs	r3, #128	; 0x80
 800b58c:	021b      	lsls	r3, r3, #8
 800b58e:	429a      	cmp	r2, r3
 800b590:	d10f      	bne.n	800b5b2 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	681a      	ldr	r2, [r3, #0]
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	2140      	movs	r1, #64	; 0x40
 800b59e:	438a      	bics	r2, r1
 800b5a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	681a      	ldr	r2, [r3, #0]
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	4957      	ldr	r1, [pc, #348]	; (800b70c <HAL_SPI_Receive+0x294>)
 800b5ae:	400a      	ands	r2, r1
 800b5b0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	2240      	movs	r2, #64	; 0x40
 800b5ba:	4013      	ands	r3, r2
 800b5bc:	2b40      	cmp	r3, #64	; 0x40
 800b5be:	d007      	beq.n	800b5d0 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	681a      	ldr	r2, [r3, #0]
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	2140      	movs	r1, #64	; 0x40
 800b5cc:	430a      	orrs	r2, r1
 800b5ce:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	68da      	ldr	r2, [r3, #12]
 800b5d4:	23e0      	movs	r3, #224	; 0xe0
 800b5d6:	00db      	lsls	r3, r3, #3
 800b5d8:	429a      	cmp	r2, r3
 800b5da:	d900      	bls.n	800b5de <HAL_SPI_Receive+0x166>
 800b5dc:	e069      	b.n	800b6b2 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b5de:	e031      	b.n	800b644 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	689b      	ldr	r3, [r3, #8]
 800b5e6:	2201      	movs	r2, #1
 800b5e8:	4013      	ands	r3, r2
 800b5ea:	2b01      	cmp	r3, #1
 800b5ec:	d117      	bne.n	800b61e <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	330c      	adds	r3, #12
 800b5f4:	001a      	movs	r2, r3
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5fa:	7812      	ldrb	r2, [r2, #0]
 800b5fc:	b2d2      	uxtb	r2, r2
 800b5fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b604:	1c5a      	adds	r2, r3, #1
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	2246      	movs	r2, #70	; 0x46
 800b60e:	5a9b      	ldrh	r3, [r3, r2]
 800b610:	b29b      	uxth	r3, r3
 800b612:	3b01      	subs	r3, #1
 800b614:	b299      	uxth	r1, r3
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	2246      	movs	r2, #70	; 0x46
 800b61a:	5299      	strh	r1, [r3, r2]
 800b61c:	e012      	b.n	800b644 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b61e:	f7fe fb4f 	bl	8009cc0 <HAL_GetTick>
 800b622:	0002      	movs	r2, r0
 800b624:	693b      	ldr	r3, [r7, #16]
 800b626:	1ad3      	subs	r3, r2, r3
 800b628:	683a      	ldr	r2, [r7, #0]
 800b62a:	429a      	cmp	r2, r3
 800b62c:	d802      	bhi.n	800b634 <HAL_SPI_Receive+0x1bc>
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	3301      	adds	r3, #1
 800b632:	d102      	bne.n	800b63a <HAL_SPI_Receive+0x1c2>
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d104      	bne.n	800b644 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 800b63a:	2317      	movs	r3, #23
 800b63c:	18fb      	adds	r3, r7, r3
 800b63e:	2203      	movs	r2, #3
 800b640:	701a      	strb	r2, [r3, #0]
          goto error;
 800b642:	e051      	b.n	800b6e8 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	2246      	movs	r2, #70	; 0x46
 800b648:	5a9b      	ldrh	r3, [r3, r2]
 800b64a:	b29b      	uxth	r3, r3
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d1c7      	bne.n	800b5e0 <HAL_SPI_Receive+0x168>
 800b650:	e035      	b.n	800b6be <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	689b      	ldr	r3, [r3, #8]
 800b658:	2201      	movs	r2, #1
 800b65a:	4013      	ands	r3, r2
 800b65c:	2b01      	cmp	r3, #1
 800b65e:	d115      	bne.n	800b68c <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	68da      	ldr	r2, [r3, #12]
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b66a:	b292      	uxth	r2, r2
 800b66c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b672:	1c9a      	adds	r2, r3, #2
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	2246      	movs	r2, #70	; 0x46
 800b67c:	5a9b      	ldrh	r3, [r3, r2]
 800b67e:	b29b      	uxth	r3, r3
 800b680:	3b01      	subs	r3, #1
 800b682:	b299      	uxth	r1, r3
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	2246      	movs	r2, #70	; 0x46
 800b688:	5299      	strh	r1, [r3, r2]
 800b68a:	e012      	b.n	800b6b2 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b68c:	f7fe fb18 	bl	8009cc0 <HAL_GetTick>
 800b690:	0002      	movs	r2, r0
 800b692:	693b      	ldr	r3, [r7, #16]
 800b694:	1ad3      	subs	r3, r2, r3
 800b696:	683a      	ldr	r2, [r7, #0]
 800b698:	429a      	cmp	r2, r3
 800b69a:	d802      	bhi.n	800b6a2 <HAL_SPI_Receive+0x22a>
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	3301      	adds	r3, #1
 800b6a0:	d102      	bne.n	800b6a8 <HAL_SPI_Receive+0x230>
 800b6a2:	683b      	ldr	r3, [r7, #0]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d104      	bne.n	800b6b2 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 800b6a8:	2317      	movs	r3, #23
 800b6aa:	18fb      	adds	r3, r7, r3
 800b6ac:	2203      	movs	r2, #3
 800b6ae:	701a      	strb	r2, [r3, #0]
          goto error;
 800b6b0:	e01a      	b.n	800b6e8 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	2246      	movs	r2, #70	; 0x46
 800b6b6:	5a9b      	ldrh	r3, [r3, r2]
 800b6b8:	b29b      	uxth	r3, r3
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d1c9      	bne.n	800b652 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b6be:	693a      	ldr	r2, [r7, #16]
 800b6c0:	6839      	ldr	r1, [r7, #0]
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	0018      	movs	r0, r3
 800b6c6:	f000 fc41 	bl	800bf4c <SPI_EndRxTransaction>
 800b6ca:	1e03      	subs	r3, r0, #0
 800b6cc:	d002      	beq.n	800b6d4 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	2220      	movs	r2, #32
 800b6d2:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d004      	beq.n	800b6e6 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 800b6dc:	2317      	movs	r3, #23
 800b6de:	18fb      	adds	r3, r7, r3
 800b6e0:	2201      	movs	r2, #1
 800b6e2:	701a      	strb	r2, [r3, #0]
 800b6e4:	e000      	b.n	800b6e8 <HAL_SPI_Receive+0x270>
  }

error :
 800b6e6:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	225d      	movs	r2, #93	; 0x5d
 800b6ec:	2101      	movs	r1, #1
 800b6ee:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	225c      	movs	r2, #92	; 0x5c
 800b6f4:	2100      	movs	r1, #0
 800b6f6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800b6f8:	2317      	movs	r3, #23
 800b6fa:	18fb      	adds	r3, r7, r3
 800b6fc:	781b      	ldrb	r3, [r3, #0]
}
 800b6fe:	0018      	movs	r0, r3
 800b700:	46bd      	mov	sp, r7
 800b702:	b007      	add	sp, #28
 800b704:	bd90      	pop	{r4, r7, pc}
 800b706:	46c0      	nop			; (mov r8, r8)
 800b708:	ffffefff 	.word	0xffffefff
 800b70c:	ffffbfff 	.word	0xffffbfff

0800b710 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b08a      	sub	sp, #40	; 0x28
 800b714:	af00      	add	r7, sp, #0
 800b716:	60f8      	str	r0, [r7, #12]
 800b718:	60b9      	str	r1, [r7, #8]
 800b71a:	607a      	str	r2, [r7, #4]
 800b71c:	001a      	movs	r2, r3
 800b71e:	1cbb      	adds	r3, r7, #2
 800b720:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b722:	2301      	movs	r3, #1
 800b724:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b726:	2323      	movs	r3, #35	; 0x23
 800b728:	18fb      	adds	r3, r7, r3
 800b72a:	2200      	movs	r2, #0
 800b72c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	225c      	movs	r2, #92	; 0x5c
 800b732:	5c9b      	ldrb	r3, [r3, r2]
 800b734:	2b01      	cmp	r3, #1
 800b736:	d101      	bne.n	800b73c <HAL_SPI_TransmitReceive+0x2c>
 800b738:	2302      	movs	r3, #2
 800b73a:	e1b5      	b.n	800baa8 <HAL_SPI_TransmitReceive+0x398>
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	225c      	movs	r2, #92	; 0x5c
 800b740:	2101      	movs	r1, #1
 800b742:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b744:	f7fe fabc 	bl	8009cc0 <HAL_GetTick>
 800b748:	0003      	movs	r3, r0
 800b74a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b74c:	201b      	movs	r0, #27
 800b74e:	183b      	adds	r3, r7, r0
 800b750:	68fa      	ldr	r2, [r7, #12]
 800b752:	215d      	movs	r1, #93	; 0x5d
 800b754:	5c52      	ldrb	r2, [r2, r1]
 800b756:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	685b      	ldr	r3, [r3, #4]
 800b75c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800b75e:	2312      	movs	r3, #18
 800b760:	18fb      	adds	r3, r7, r3
 800b762:	1cba      	adds	r2, r7, #2
 800b764:	8812      	ldrh	r2, [r2, #0]
 800b766:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b768:	183b      	adds	r3, r7, r0
 800b76a:	781b      	ldrb	r3, [r3, #0]
 800b76c:	2b01      	cmp	r3, #1
 800b76e:	d011      	beq.n	800b794 <HAL_SPI_TransmitReceive+0x84>
 800b770:	697a      	ldr	r2, [r7, #20]
 800b772:	2382      	movs	r3, #130	; 0x82
 800b774:	005b      	lsls	r3, r3, #1
 800b776:	429a      	cmp	r2, r3
 800b778:	d107      	bne.n	800b78a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	689b      	ldr	r3, [r3, #8]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d103      	bne.n	800b78a <HAL_SPI_TransmitReceive+0x7a>
 800b782:	183b      	adds	r3, r7, r0
 800b784:	781b      	ldrb	r3, [r3, #0]
 800b786:	2b04      	cmp	r3, #4
 800b788:	d004      	beq.n	800b794 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800b78a:	2323      	movs	r3, #35	; 0x23
 800b78c:	18fb      	adds	r3, r7, r3
 800b78e:	2202      	movs	r2, #2
 800b790:	701a      	strb	r2, [r3, #0]
    goto error;
 800b792:	e17e      	b.n	800ba92 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d006      	beq.n	800b7a8 <HAL_SPI_TransmitReceive+0x98>
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d003      	beq.n	800b7a8 <HAL_SPI_TransmitReceive+0x98>
 800b7a0:	1cbb      	adds	r3, r7, #2
 800b7a2:	881b      	ldrh	r3, [r3, #0]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d104      	bne.n	800b7b2 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800b7a8:	2323      	movs	r3, #35	; 0x23
 800b7aa:	18fb      	adds	r3, r7, r3
 800b7ac:	2201      	movs	r2, #1
 800b7ae:	701a      	strb	r2, [r3, #0]
    goto error;
 800b7b0:	e16f      	b.n	800ba92 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	225d      	movs	r2, #93	; 0x5d
 800b7b6:	5c9b      	ldrb	r3, [r3, r2]
 800b7b8:	b2db      	uxtb	r3, r3
 800b7ba:	2b04      	cmp	r3, #4
 800b7bc:	d003      	beq.n	800b7c6 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	225d      	movs	r2, #93	; 0x5d
 800b7c2:	2105      	movs	r1, #5
 800b7c4:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	687a      	ldr	r2, [r7, #4]
 800b7d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	1cba      	adds	r2, r7, #2
 800b7d6:	2146      	movs	r1, #70	; 0x46
 800b7d8:	8812      	ldrh	r2, [r2, #0]
 800b7da:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	1cba      	adds	r2, r7, #2
 800b7e0:	2144      	movs	r1, #68	; 0x44
 800b7e2:	8812      	ldrh	r2, [r2, #0]
 800b7e4:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	68ba      	ldr	r2, [r7, #8]
 800b7ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	1cba      	adds	r2, r7, #2
 800b7f0:	8812      	ldrh	r2, [r2, #0]
 800b7f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	1cba      	adds	r2, r7, #2
 800b7f8:	8812      	ldrh	r2, [r2, #0]
 800b7fa:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	2200      	movs	r2, #0
 800b800:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	2200      	movs	r2, #0
 800b806:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	68da      	ldr	r2, [r3, #12]
 800b80c:	23e0      	movs	r3, #224	; 0xe0
 800b80e:	00db      	lsls	r3, r3, #3
 800b810:	429a      	cmp	r2, r3
 800b812:	d908      	bls.n	800b826 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	685a      	ldr	r2, [r3, #4]
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	49a4      	ldr	r1, [pc, #656]	; (800bab0 <HAL_SPI_TransmitReceive+0x3a0>)
 800b820:	400a      	ands	r2, r1
 800b822:	605a      	str	r2, [r3, #4]
 800b824:	e008      	b.n	800b838 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	685a      	ldr	r2, [r3, #4]
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	2180      	movs	r1, #128	; 0x80
 800b832:	0149      	lsls	r1, r1, #5
 800b834:	430a      	orrs	r2, r1
 800b836:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	2240      	movs	r2, #64	; 0x40
 800b840:	4013      	ands	r3, r2
 800b842:	2b40      	cmp	r3, #64	; 0x40
 800b844:	d007      	beq.n	800b856 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	681a      	ldr	r2, [r3, #0]
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	2140      	movs	r1, #64	; 0x40
 800b852:	430a      	orrs	r2, r1
 800b854:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	68da      	ldr	r2, [r3, #12]
 800b85a:	23e0      	movs	r3, #224	; 0xe0
 800b85c:	00db      	lsls	r3, r3, #3
 800b85e:	429a      	cmp	r2, r3
 800b860:	d800      	bhi.n	800b864 <HAL_SPI_TransmitReceive+0x154>
 800b862:	e07f      	b.n	800b964 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	685b      	ldr	r3, [r3, #4]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d005      	beq.n	800b878 <HAL_SPI_TransmitReceive+0x168>
 800b86c:	2312      	movs	r3, #18
 800b86e:	18fb      	adds	r3, r7, r3
 800b870:	881b      	ldrh	r3, [r3, #0]
 800b872:	2b01      	cmp	r3, #1
 800b874:	d000      	beq.n	800b878 <HAL_SPI_TransmitReceive+0x168>
 800b876:	e069      	b.n	800b94c <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b87c:	881a      	ldrh	r2, [r3, #0]
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b888:	1c9a      	adds	r2, r3, #2
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b892:	b29b      	uxth	r3, r3
 800b894:	3b01      	subs	r3, #1
 800b896:	b29a      	uxth	r2, r3
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b89c:	e056      	b.n	800b94c <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	689b      	ldr	r3, [r3, #8]
 800b8a4:	2202      	movs	r2, #2
 800b8a6:	4013      	ands	r3, r2
 800b8a8:	2b02      	cmp	r3, #2
 800b8aa:	d11b      	bne.n	800b8e4 <HAL_SPI_TransmitReceive+0x1d4>
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b8b0:	b29b      	uxth	r3, r3
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d016      	beq.n	800b8e4 <HAL_SPI_TransmitReceive+0x1d4>
 800b8b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b8:	2b01      	cmp	r3, #1
 800b8ba:	d113      	bne.n	800b8e4 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8c0:	881a      	ldrh	r2, [r3, #0]
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8cc:	1c9a      	adds	r2, r3, #2
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b8d6:	b29b      	uxth	r3, r3
 800b8d8:	3b01      	subs	r3, #1
 800b8da:	b29a      	uxth	r2, r3
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	689b      	ldr	r3, [r3, #8]
 800b8ea:	2201      	movs	r2, #1
 800b8ec:	4013      	ands	r3, r2
 800b8ee:	2b01      	cmp	r3, #1
 800b8f0:	d11c      	bne.n	800b92c <HAL_SPI_TransmitReceive+0x21c>
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	2246      	movs	r2, #70	; 0x46
 800b8f6:	5a9b      	ldrh	r3, [r3, r2]
 800b8f8:	b29b      	uxth	r3, r3
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d016      	beq.n	800b92c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	68da      	ldr	r2, [r3, #12]
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b908:	b292      	uxth	r2, r2
 800b90a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b910:	1c9a      	adds	r2, r3, #2
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	2246      	movs	r2, #70	; 0x46
 800b91a:	5a9b      	ldrh	r3, [r3, r2]
 800b91c:	b29b      	uxth	r3, r3
 800b91e:	3b01      	subs	r3, #1
 800b920:	b299      	uxth	r1, r3
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	2246      	movs	r2, #70	; 0x46
 800b926:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b928:	2301      	movs	r3, #1
 800b92a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b92c:	f7fe f9c8 	bl	8009cc0 <HAL_GetTick>
 800b930:	0002      	movs	r2, r0
 800b932:	69fb      	ldr	r3, [r7, #28]
 800b934:	1ad3      	subs	r3, r2, r3
 800b936:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b938:	429a      	cmp	r2, r3
 800b93a:	d807      	bhi.n	800b94c <HAL_SPI_TransmitReceive+0x23c>
 800b93c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b93e:	3301      	adds	r3, #1
 800b940:	d004      	beq.n	800b94c <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 800b942:	2323      	movs	r3, #35	; 0x23
 800b944:	18fb      	adds	r3, r7, r3
 800b946:	2203      	movs	r2, #3
 800b948:	701a      	strb	r2, [r3, #0]
        goto error;
 800b94a:	e0a2      	b.n	800ba92 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b950:	b29b      	uxth	r3, r3
 800b952:	2b00      	cmp	r3, #0
 800b954:	d1a3      	bne.n	800b89e <HAL_SPI_TransmitReceive+0x18e>
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	2246      	movs	r2, #70	; 0x46
 800b95a:	5a9b      	ldrh	r3, [r3, r2]
 800b95c:	b29b      	uxth	r3, r3
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d19d      	bne.n	800b89e <HAL_SPI_TransmitReceive+0x18e>
 800b962:	e085      	b.n	800ba70 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	685b      	ldr	r3, [r3, #4]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d005      	beq.n	800b978 <HAL_SPI_TransmitReceive+0x268>
 800b96c:	2312      	movs	r3, #18
 800b96e:	18fb      	adds	r3, r7, r3
 800b970:	881b      	ldrh	r3, [r3, #0]
 800b972:	2b01      	cmp	r3, #1
 800b974:	d000      	beq.n	800b978 <HAL_SPI_TransmitReceive+0x268>
 800b976:	e070      	b.n	800ba5a <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	330c      	adds	r3, #12
 800b982:	7812      	ldrb	r2, [r2, #0]
 800b984:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b98a:	1c5a      	adds	r2, r3, #1
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b994:	b29b      	uxth	r3, r3
 800b996:	3b01      	subs	r3, #1
 800b998:	b29a      	uxth	r2, r3
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b99e:	e05c      	b.n	800ba5a <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	689b      	ldr	r3, [r3, #8]
 800b9a6:	2202      	movs	r2, #2
 800b9a8:	4013      	ands	r3, r2
 800b9aa:	2b02      	cmp	r3, #2
 800b9ac:	d11c      	bne.n	800b9e8 <HAL_SPI_TransmitReceive+0x2d8>
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b9b2:	b29b      	uxth	r3, r3
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d017      	beq.n	800b9e8 <HAL_SPI_TransmitReceive+0x2d8>
 800b9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ba:	2b01      	cmp	r3, #1
 800b9bc:	d114      	bne.n	800b9e8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	330c      	adds	r3, #12
 800b9c8:	7812      	ldrb	r2, [r2, #0]
 800b9ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9d0:	1c5a      	adds	r2, r3, #1
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b9da:	b29b      	uxth	r3, r3
 800b9dc:	3b01      	subs	r3, #1
 800b9de:	b29a      	uxth	r2, r3
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	689b      	ldr	r3, [r3, #8]
 800b9ee:	2201      	movs	r2, #1
 800b9f0:	4013      	ands	r3, r2
 800b9f2:	2b01      	cmp	r3, #1
 800b9f4:	d11e      	bne.n	800ba34 <HAL_SPI_TransmitReceive+0x324>
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	2246      	movs	r2, #70	; 0x46
 800b9fa:	5a9b      	ldrh	r3, [r3, r2]
 800b9fc:	b29b      	uxth	r3, r3
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d018      	beq.n	800ba34 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	330c      	adds	r3, #12
 800ba08:	001a      	movs	r2, r3
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba0e:	7812      	ldrb	r2, [r2, #0]
 800ba10:	b2d2      	uxtb	r2, r2
 800ba12:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba18:	1c5a      	adds	r2, r3, #1
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	2246      	movs	r2, #70	; 0x46
 800ba22:	5a9b      	ldrh	r3, [r3, r2]
 800ba24:	b29b      	uxth	r3, r3
 800ba26:	3b01      	subs	r3, #1
 800ba28:	b299      	uxth	r1, r3
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	2246      	movs	r2, #70	; 0x46
 800ba2e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ba30:	2301      	movs	r3, #1
 800ba32:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ba34:	f7fe f944 	bl	8009cc0 <HAL_GetTick>
 800ba38:	0002      	movs	r2, r0
 800ba3a:	69fb      	ldr	r3, [r7, #28]
 800ba3c:	1ad3      	subs	r3, r2, r3
 800ba3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba40:	429a      	cmp	r2, r3
 800ba42:	d802      	bhi.n	800ba4a <HAL_SPI_TransmitReceive+0x33a>
 800ba44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba46:	3301      	adds	r3, #1
 800ba48:	d102      	bne.n	800ba50 <HAL_SPI_TransmitReceive+0x340>
 800ba4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d104      	bne.n	800ba5a <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 800ba50:	2323      	movs	r3, #35	; 0x23
 800ba52:	18fb      	adds	r3, r7, r3
 800ba54:	2203      	movs	r2, #3
 800ba56:	701a      	strb	r2, [r3, #0]
        goto error;
 800ba58:	e01b      	b.n	800ba92 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba5e:	b29b      	uxth	r3, r3
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d19d      	bne.n	800b9a0 <HAL_SPI_TransmitReceive+0x290>
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	2246      	movs	r2, #70	; 0x46
 800ba68:	5a9b      	ldrh	r3, [r3, r2]
 800ba6a:	b29b      	uxth	r3, r3
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d197      	bne.n	800b9a0 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ba70:	69fa      	ldr	r2, [r7, #28]
 800ba72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	0018      	movs	r0, r3
 800ba78:	f000 fac6 	bl	800c008 <SPI_EndRxTxTransaction>
 800ba7c:	1e03      	subs	r3, r0, #0
 800ba7e:	d007      	beq.n	800ba90 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 800ba80:	2323      	movs	r3, #35	; 0x23
 800ba82:	18fb      	adds	r3, r7, r3
 800ba84:	2201      	movs	r2, #1
 800ba86:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	2220      	movs	r2, #32
 800ba8c:	661a      	str	r2, [r3, #96]	; 0x60
 800ba8e:	e000      	b.n	800ba92 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 800ba90:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	225d      	movs	r2, #93	; 0x5d
 800ba96:	2101      	movs	r1, #1
 800ba98:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	225c      	movs	r2, #92	; 0x5c
 800ba9e:	2100      	movs	r1, #0
 800baa0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800baa2:	2323      	movs	r3, #35	; 0x23
 800baa4:	18fb      	adds	r3, r7, r3
 800baa6:	781b      	ldrb	r3, [r3, #0]
}
 800baa8:	0018      	movs	r0, r3
 800baaa:	46bd      	mov	sp, r7
 800baac:	b00a      	add	sp, #40	; 0x28
 800baae:	bd80      	pop	{r7, pc}
 800bab0:	ffffefff 	.word	0xffffefff

0800bab4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b088      	sub	sp, #32
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	685b      	ldr	r3, [r3, #4]
 800bac2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	689b      	ldr	r3, [r3, #8]
 800baca:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800bacc:	69bb      	ldr	r3, [r7, #24]
 800bace:	099b      	lsrs	r3, r3, #6
 800bad0:	001a      	movs	r2, r3
 800bad2:	2301      	movs	r3, #1
 800bad4:	4013      	ands	r3, r2
 800bad6:	d10f      	bne.n	800baf8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800bad8:	69bb      	ldr	r3, [r7, #24]
 800bada:	2201      	movs	r2, #1
 800badc:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800bade:	d00b      	beq.n	800baf8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800bae0:	69fb      	ldr	r3, [r7, #28]
 800bae2:	099b      	lsrs	r3, r3, #6
 800bae4:	001a      	movs	r2, r3
 800bae6:	2301      	movs	r3, #1
 800bae8:	4013      	ands	r3, r2
 800baea:	d005      	beq.n	800baf8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800baf0:	687a      	ldr	r2, [r7, #4]
 800baf2:	0010      	movs	r0, r2
 800baf4:	4798      	blx	r3
    return;
 800baf6:	e0d5      	b.n	800bca4 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800baf8:	69bb      	ldr	r3, [r7, #24]
 800bafa:	085b      	lsrs	r3, r3, #1
 800bafc:	001a      	movs	r2, r3
 800bafe:	2301      	movs	r3, #1
 800bb00:	4013      	ands	r3, r2
 800bb02:	d00b      	beq.n	800bb1c <HAL_SPI_IRQHandler+0x68>
 800bb04:	69fb      	ldr	r3, [r7, #28]
 800bb06:	09db      	lsrs	r3, r3, #7
 800bb08:	001a      	movs	r2, r3
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	4013      	ands	r3, r2
 800bb0e:	d005      	beq.n	800bb1c <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb14:	687a      	ldr	r2, [r7, #4]
 800bb16:	0010      	movs	r0, r2
 800bb18:	4798      	blx	r3
    return;
 800bb1a:	e0c3      	b.n	800bca4 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800bb1c:	69bb      	ldr	r3, [r7, #24]
 800bb1e:	095b      	lsrs	r3, r3, #5
 800bb20:	001a      	movs	r2, r3
 800bb22:	2301      	movs	r3, #1
 800bb24:	4013      	ands	r3, r2
 800bb26:	d10c      	bne.n	800bb42 <HAL_SPI_IRQHandler+0x8e>
 800bb28:	69bb      	ldr	r3, [r7, #24]
 800bb2a:	099b      	lsrs	r3, r3, #6
 800bb2c:	001a      	movs	r2, r3
 800bb2e:	2301      	movs	r3, #1
 800bb30:	4013      	ands	r3, r2
 800bb32:	d106      	bne.n	800bb42 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800bb34:	69bb      	ldr	r3, [r7, #24]
 800bb36:	0a1b      	lsrs	r3, r3, #8
 800bb38:	001a      	movs	r2, r3
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	4013      	ands	r3, r2
 800bb3e:	d100      	bne.n	800bb42 <HAL_SPI_IRQHandler+0x8e>
 800bb40:	e0b0      	b.n	800bca4 <HAL_SPI_IRQHandler+0x1f0>
 800bb42:	69fb      	ldr	r3, [r7, #28]
 800bb44:	095b      	lsrs	r3, r3, #5
 800bb46:	001a      	movs	r2, r3
 800bb48:	2301      	movs	r3, #1
 800bb4a:	4013      	ands	r3, r2
 800bb4c:	d100      	bne.n	800bb50 <HAL_SPI_IRQHandler+0x9c>
 800bb4e:	e0a9      	b.n	800bca4 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800bb50:	69bb      	ldr	r3, [r7, #24]
 800bb52:	099b      	lsrs	r3, r3, #6
 800bb54:	001a      	movs	r2, r3
 800bb56:	2301      	movs	r3, #1
 800bb58:	4013      	ands	r3, r2
 800bb5a:	d023      	beq.n	800bba4 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	225d      	movs	r2, #93	; 0x5d
 800bb60:	5c9b      	ldrb	r3, [r3, r2]
 800bb62:	b2db      	uxtb	r3, r3
 800bb64:	2b03      	cmp	r3, #3
 800bb66:	d011      	beq.n	800bb8c <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bb6c:	2204      	movs	r2, #4
 800bb6e:	431a      	orrs	r2, r3
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bb74:	2300      	movs	r3, #0
 800bb76:	617b      	str	r3, [r7, #20]
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	68db      	ldr	r3, [r3, #12]
 800bb7e:	617b      	str	r3, [r7, #20]
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	689b      	ldr	r3, [r3, #8]
 800bb86:	617b      	str	r3, [r7, #20]
 800bb88:	697b      	ldr	r3, [r7, #20]
 800bb8a:	e00b      	b.n	800bba4 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	613b      	str	r3, [r7, #16]
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	68db      	ldr	r3, [r3, #12]
 800bb96:	613b      	str	r3, [r7, #16]
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	689b      	ldr	r3, [r3, #8]
 800bb9e:	613b      	str	r3, [r7, #16]
 800bba0:	693b      	ldr	r3, [r7, #16]
        return;
 800bba2:	e07f      	b.n	800bca4 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800bba4:	69bb      	ldr	r3, [r7, #24]
 800bba6:	095b      	lsrs	r3, r3, #5
 800bba8:	001a      	movs	r2, r3
 800bbaa:	2301      	movs	r3, #1
 800bbac:	4013      	ands	r3, r2
 800bbae:	d014      	beq.n	800bbda <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bbb4:	2201      	movs	r2, #1
 800bbb6:	431a      	orrs	r2, r3
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	60fb      	str	r3, [r7, #12]
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	689b      	ldr	r3, [r3, #8]
 800bbc6:	60fb      	str	r3, [r7, #12]
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	681a      	ldr	r2, [r3, #0]
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	2140      	movs	r1, #64	; 0x40
 800bbd4:	438a      	bics	r2, r1
 800bbd6:	601a      	str	r2, [r3, #0]
 800bbd8:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800bbda:	69bb      	ldr	r3, [r7, #24]
 800bbdc:	0a1b      	lsrs	r3, r3, #8
 800bbde:	001a      	movs	r2, r3
 800bbe0:	2301      	movs	r3, #1
 800bbe2:	4013      	ands	r3, r2
 800bbe4:	d00c      	beq.n	800bc00 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bbea:	2208      	movs	r2, #8
 800bbec:	431a      	orrs	r2, r3
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	60bb      	str	r3, [r7, #8]
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	689b      	ldr	r3, [r3, #8]
 800bbfc:	60bb      	str	r3, [r7, #8]
 800bbfe:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d04c      	beq.n	800bca2 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	685a      	ldr	r2, [r3, #4]
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	21e0      	movs	r1, #224	; 0xe0
 800bc14:	438a      	bics	r2, r1
 800bc16:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	225d      	movs	r2, #93	; 0x5d
 800bc1c:	2101      	movs	r1, #1
 800bc1e:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800bc20:	69fb      	ldr	r3, [r7, #28]
 800bc22:	2202      	movs	r2, #2
 800bc24:	4013      	ands	r3, r2
 800bc26:	d103      	bne.n	800bc30 <HAL_SPI_IRQHandler+0x17c>
 800bc28:	69fb      	ldr	r3, [r7, #28]
 800bc2a:	2201      	movs	r2, #1
 800bc2c:	4013      	ands	r3, r2
 800bc2e:	d032      	beq.n	800bc96 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	685a      	ldr	r2, [r3, #4]
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	2103      	movs	r1, #3
 800bc3c:	438a      	bics	r2, r1
 800bc3e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d010      	beq.n	800bc6a <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc4c:	4a17      	ldr	r2, [pc, #92]	; (800bcac <HAL_SPI_IRQHandler+0x1f8>)
 800bc4e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc54:	0018      	movs	r0, r3
 800bc56:	f7fe f9a1 	bl	8009f9c <HAL_DMA_Abort_IT>
 800bc5a:	1e03      	subs	r3, r0, #0
 800bc5c:	d005      	beq.n	800bc6a <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc62:	2240      	movs	r2, #64	; 0x40
 800bc64:	431a      	orrs	r2, r3
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d016      	beq.n	800bca0 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc76:	4a0d      	ldr	r2, [pc, #52]	; (800bcac <HAL_SPI_IRQHandler+0x1f8>)
 800bc78:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc7e:	0018      	movs	r0, r3
 800bc80:	f7fe f98c 	bl	8009f9c <HAL_DMA_Abort_IT>
 800bc84:	1e03      	subs	r3, r0, #0
 800bc86:	d00b      	beq.n	800bca0 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc8c:	2240      	movs	r2, #64	; 0x40
 800bc8e:	431a      	orrs	r2, r3
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800bc94:	e004      	b.n	800bca0 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	0018      	movs	r0, r3
 800bc9a:	f000 f809 	bl	800bcb0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800bc9e:	e000      	b.n	800bca2 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 800bca0:	46c0      	nop			; (mov r8, r8)
    return;
 800bca2:	46c0      	nop			; (mov r8, r8)
  }
}
 800bca4:	46bd      	mov	sp, r7
 800bca6:	b008      	add	sp, #32
 800bca8:	bd80      	pop	{r7, pc}
 800bcaa:	46c0      	nop			; (mov r8, r8)
 800bcac:	0800bcc1 	.word	0x0800bcc1

0800bcb0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b082      	sub	sp, #8
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800bcb8:	46c0      	nop			; (mov r8, r8)
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	b002      	add	sp, #8
 800bcbe:	bd80      	pop	{r7, pc}

0800bcc0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b084      	sub	sp, #16
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bccc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	2246      	movs	r2, #70	; 0x46
 800bcd2:	2100      	movs	r1, #0
 800bcd4:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	2200      	movs	r2, #0
 800bcda:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	0018      	movs	r0, r3
 800bce0:	f7ff ffe6 	bl	800bcb0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800bce4:	46c0      	nop			; (mov r8, r8)
 800bce6:	46bd      	mov	sp, r7
 800bce8:	b004      	add	sp, #16
 800bcea:	bd80      	pop	{r7, pc}

0800bcec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b088      	sub	sp, #32
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	60f8      	str	r0, [r7, #12]
 800bcf4:	60b9      	str	r1, [r7, #8]
 800bcf6:	603b      	str	r3, [r7, #0]
 800bcf8:	1dfb      	adds	r3, r7, #7
 800bcfa:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800bcfc:	f7fd ffe0 	bl	8009cc0 <HAL_GetTick>
 800bd00:	0002      	movs	r2, r0
 800bd02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd04:	1a9b      	subs	r3, r3, r2
 800bd06:	683a      	ldr	r2, [r7, #0]
 800bd08:	18d3      	adds	r3, r2, r3
 800bd0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800bd0c:	f7fd ffd8 	bl	8009cc0 <HAL_GetTick>
 800bd10:	0003      	movs	r3, r0
 800bd12:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800bd14:	4b3a      	ldr	r3, [pc, #232]	; (800be00 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	015b      	lsls	r3, r3, #5
 800bd1a:	0d1b      	lsrs	r3, r3, #20
 800bd1c:	69fa      	ldr	r2, [r7, #28]
 800bd1e:	4353      	muls	r3, r2
 800bd20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bd22:	e058      	b.n	800bdd6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	3301      	adds	r3, #1
 800bd28:	d055      	beq.n	800bdd6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bd2a:	f7fd ffc9 	bl	8009cc0 <HAL_GetTick>
 800bd2e:	0002      	movs	r2, r0
 800bd30:	69bb      	ldr	r3, [r7, #24]
 800bd32:	1ad3      	subs	r3, r2, r3
 800bd34:	69fa      	ldr	r2, [r7, #28]
 800bd36:	429a      	cmp	r2, r3
 800bd38:	d902      	bls.n	800bd40 <SPI_WaitFlagStateUntilTimeout+0x54>
 800bd3a:	69fb      	ldr	r3, [r7, #28]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d142      	bne.n	800bdc6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	685a      	ldr	r2, [r3, #4]
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	21e0      	movs	r1, #224	; 0xe0
 800bd4c:	438a      	bics	r2, r1
 800bd4e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	685a      	ldr	r2, [r3, #4]
 800bd54:	2382      	movs	r3, #130	; 0x82
 800bd56:	005b      	lsls	r3, r3, #1
 800bd58:	429a      	cmp	r2, r3
 800bd5a:	d113      	bne.n	800bd84 <SPI_WaitFlagStateUntilTimeout+0x98>
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	689a      	ldr	r2, [r3, #8]
 800bd60:	2380      	movs	r3, #128	; 0x80
 800bd62:	021b      	lsls	r3, r3, #8
 800bd64:	429a      	cmp	r2, r3
 800bd66:	d005      	beq.n	800bd74 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	689a      	ldr	r2, [r3, #8]
 800bd6c:	2380      	movs	r3, #128	; 0x80
 800bd6e:	00db      	lsls	r3, r3, #3
 800bd70:	429a      	cmp	r2, r3
 800bd72:	d107      	bne.n	800bd84 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	681a      	ldr	r2, [r3, #0]
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	2140      	movs	r1, #64	; 0x40
 800bd80:	438a      	bics	r2, r1
 800bd82:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bd88:	2380      	movs	r3, #128	; 0x80
 800bd8a:	019b      	lsls	r3, r3, #6
 800bd8c:	429a      	cmp	r2, r3
 800bd8e:	d110      	bne.n	800bdb2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	681a      	ldr	r2, [r3, #0]
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	491a      	ldr	r1, [pc, #104]	; (800be04 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800bd9c:	400a      	ands	r2, r1
 800bd9e:	601a      	str	r2, [r3, #0]
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	681a      	ldr	r2, [r3, #0]
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	2180      	movs	r1, #128	; 0x80
 800bdac:	0189      	lsls	r1, r1, #6
 800bdae:	430a      	orrs	r2, r1
 800bdb0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	225d      	movs	r2, #93	; 0x5d
 800bdb6:	2101      	movs	r1, #1
 800bdb8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	225c      	movs	r2, #92	; 0x5c
 800bdbe:	2100      	movs	r1, #0
 800bdc0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800bdc2:	2303      	movs	r3, #3
 800bdc4:	e017      	b.n	800bdf6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800bdc6:	697b      	ldr	r3, [r7, #20]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d101      	bne.n	800bdd0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800bdcc:	2300      	movs	r3, #0
 800bdce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800bdd0:	697b      	ldr	r3, [r7, #20]
 800bdd2:	3b01      	subs	r3, #1
 800bdd4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	689b      	ldr	r3, [r3, #8]
 800bddc:	68ba      	ldr	r2, [r7, #8]
 800bdde:	4013      	ands	r3, r2
 800bde0:	68ba      	ldr	r2, [r7, #8]
 800bde2:	1ad3      	subs	r3, r2, r3
 800bde4:	425a      	negs	r2, r3
 800bde6:	4153      	adcs	r3, r2
 800bde8:	b2db      	uxtb	r3, r3
 800bdea:	001a      	movs	r2, r3
 800bdec:	1dfb      	adds	r3, r7, #7
 800bdee:	781b      	ldrb	r3, [r3, #0]
 800bdf0:	429a      	cmp	r2, r3
 800bdf2:	d197      	bne.n	800bd24 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800bdf4:	2300      	movs	r3, #0
}
 800bdf6:	0018      	movs	r0, r3
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	b008      	add	sp, #32
 800bdfc:	bd80      	pop	{r7, pc}
 800bdfe:	46c0      	nop			; (mov r8, r8)
 800be00:	200000d8 	.word	0x200000d8
 800be04:	ffffdfff 	.word	0xffffdfff

0800be08 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b08a      	sub	sp, #40	; 0x28
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	60f8      	str	r0, [r7, #12]
 800be10:	60b9      	str	r1, [r7, #8]
 800be12:	607a      	str	r2, [r7, #4]
 800be14:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800be16:	2317      	movs	r3, #23
 800be18:	18fb      	adds	r3, r7, r3
 800be1a:	2200      	movs	r2, #0
 800be1c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800be1e:	f7fd ff4f 	bl	8009cc0 <HAL_GetTick>
 800be22:	0002      	movs	r2, r0
 800be24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be26:	1a9b      	subs	r3, r3, r2
 800be28:	683a      	ldr	r2, [r7, #0]
 800be2a:	18d3      	adds	r3, r2, r3
 800be2c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800be2e:	f7fd ff47 	bl	8009cc0 <HAL_GetTick>
 800be32:	0003      	movs	r3, r0
 800be34:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	330c      	adds	r3, #12
 800be3c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800be3e:	4b41      	ldr	r3, [pc, #260]	; (800bf44 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800be40:	681a      	ldr	r2, [r3, #0]
 800be42:	0013      	movs	r3, r2
 800be44:	009b      	lsls	r3, r3, #2
 800be46:	189b      	adds	r3, r3, r2
 800be48:	00da      	lsls	r2, r3, #3
 800be4a:	1ad3      	subs	r3, r2, r3
 800be4c:	0d1b      	lsrs	r3, r3, #20
 800be4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be50:	4353      	muls	r3, r2
 800be52:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800be54:	e068      	b.n	800bf28 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800be56:	68ba      	ldr	r2, [r7, #8]
 800be58:	23c0      	movs	r3, #192	; 0xc0
 800be5a:	00db      	lsls	r3, r3, #3
 800be5c:	429a      	cmp	r2, r3
 800be5e:	d10a      	bne.n	800be76 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d107      	bne.n	800be76 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800be66:	69fb      	ldr	r3, [r7, #28]
 800be68:	781b      	ldrb	r3, [r3, #0]
 800be6a:	b2da      	uxtb	r2, r3
 800be6c:	2117      	movs	r1, #23
 800be6e:	187b      	adds	r3, r7, r1
 800be70:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800be72:	187b      	adds	r3, r7, r1
 800be74:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	3301      	adds	r3, #1
 800be7a:	d055      	beq.n	800bf28 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800be7c:	f7fd ff20 	bl	8009cc0 <HAL_GetTick>
 800be80:	0002      	movs	r2, r0
 800be82:	6a3b      	ldr	r3, [r7, #32]
 800be84:	1ad3      	subs	r3, r2, r3
 800be86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be88:	429a      	cmp	r2, r3
 800be8a:	d902      	bls.n	800be92 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800be8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d142      	bne.n	800bf18 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	685a      	ldr	r2, [r3, #4]
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	21e0      	movs	r1, #224	; 0xe0
 800be9e:	438a      	bics	r2, r1
 800bea0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	685a      	ldr	r2, [r3, #4]
 800bea6:	2382      	movs	r3, #130	; 0x82
 800bea8:	005b      	lsls	r3, r3, #1
 800beaa:	429a      	cmp	r2, r3
 800beac:	d113      	bne.n	800bed6 <SPI_WaitFifoStateUntilTimeout+0xce>
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	689a      	ldr	r2, [r3, #8]
 800beb2:	2380      	movs	r3, #128	; 0x80
 800beb4:	021b      	lsls	r3, r3, #8
 800beb6:	429a      	cmp	r2, r3
 800beb8:	d005      	beq.n	800bec6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	689a      	ldr	r2, [r3, #8]
 800bebe:	2380      	movs	r3, #128	; 0x80
 800bec0:	00db      	lsls	r3, r3, #3
 800bec2:	429a      	cmp	r2, r3
 800bec4:	d107      	bne.n	800bed6 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	681a      	ldr	r2, [r3, #0]
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	2140      	movs	r1, #64	; 0x40
 800bed2:	438a      	bics	r2, r1
 800bed4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800beda:	2380      	movs	r3, #128	; 0x80
 800bedc:	019b      	lsls	r3, r3, #6
 800bede:	429a      	cmp	r2, r3
 800bee0:	d110      	bne.n	800bf04 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	681a      	ldr	r2, [r3, #0]
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	4916      	ldr	r1, [pc, #88]	; (800bf48 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800beee:	400a      	ands	r2, r1
 800bef0:	601a      	str	r2, [r3, #0]
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	681a      	ldr	r2, [r3, #0]
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	2180      	movs	r1, #128	; 0x80
 800befe:	0189      	lsls	r1, r1, #6
 800bf00:	430a      	orrs	r2, r1
 800bf02:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	225d      	movs	r2, #93	; 0x5d
 800bf08:	2101      	movs	r1, #1
 800bf0a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	225c      	movs	r2, #92	; 0x5c
 800bf10:	2100      	movs	r1, #0
 800bf12:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800bf14:	2303      	movs	r3, #3
 800bf16:	e010      	b.n	800bf3a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800bf18:	69bb      	ldr	r3, [r7, #24]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d101      	bne.n	800bf22 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800bf22:	69bb      	ldr	r3, [r7, #24]
 800bf24:	3b01      	subs	r3, #1
 800bf26:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	689b      	ldr	r3, [r3, #8]
 800bf2e:	68ba      	ldr	r2, [r7, #8]
 800bf30:	4013      	ands	r3, r2
 800bf32:	687a      	ldr	r2, [r7, #4]
 800bf34:	429a      	cmp	r2, r3
 800bf36:	d18e      	bne.n	800be56 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800bf38:	2300      	movs	r3, #0
}
 800bf3a:	0018      	movs	r0, r3
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	b00a      	add	sp, #40	; 0x28
 800bf40:	bd80      	pop	{r7, pc}
 800bf42:	46c0      	nop			; (mov r8, r8)
 800bf44:	200000d8 	.word	0x200000d8
 800bf48:	ffffdfff 	.word	0xffffdfff

0800bf4c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b086      	sub	sp, #24
 800bf50:	af02      	add	r7, sp, #8
 800bf52:	60f8      	str	r0, [r7, #12]
 800bf54:	60b9      	str	r1, [r7, #8]
 800bf56:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	685a      	ldr	r2, [r3, #4]
 800bf5c:	2382      	movs	r3, #130	; 0x82
 800bf5e:	005b      	lsls	r3, r3, #1
 800bf60:	429a      	cmp	r2, r3
 800bf62:	d113      	bne.n	800bf8c <SPI_EndRxTransaction+0x40>
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	689a      	ldr	r2, [r3, #8]
 800bf68:	2380      	movs	r3, #128	; 0x80
 800bf6a:	021b      	lsls	r3, r3, #8
 800bf6c:	429a      	cmp	r2, r3
 800bf6e:	d005      	beq.n	800bf7c <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	689a      	ldr	r2, [r3, #8]
 800bf74:	2380      	movs	r3, #128	; 0x80
 800bf76:	00db      	lsls	r3, r3, #3
 800bf78:	429a      	cmp	r2, r3
 800bf7a:	d107      	bne.n	800bf8c <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	681a      	ldr	r2, [r3, #0]
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	2140      	movs	r1, #64	; 0x40
 800bf88:	438a      	bics	r2, r1
 800bf8a:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bf8c:	68ba      	ldr	r2, [r7, #8]
 800bf8e:	68f8      	ldr	r0, [r7, #12]
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	9300      	str	r3, [sp, #0]
 800bf94:	0013      	movs	r3, r2
 800bf96:	2200      	movs	r2, #0
 800bf98:	2180      	movs	r1, #128	; 0x80
 800bf9a:	f7ff fea7 	bl	800bcec <SPI_WaitFlagStateUntilTimeout>
 800bf9e:	1e03      	subs	r3, r0, #0
 800bfa0:	d007      	beq.n	800bfb2 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bfa6:	2220      	movs	r2, #32
 800bfa8:	431a      	orrs	r2, r3
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800bfae:	2303      	movs	r3, #3
 800bfb0:	e026      	b.n	800c000 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	685a      	ldr	r2, [r3, #4]
 800bfb6:	2382      	movs	r3, #130	; 0x82
 800bfb8:	005b      	lsls	r3, r3, #1
 800bfba:	429a      	cmp	r2, r3
 800bfbc:	d11f      	bne.n	800bffe <SPI_EndRxTransaction+0xb2>
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	689a      	ldr	r2, [r3, #8]
 800bfc2:	2380      	movs	r3, #128	; 0x80
 800bfc4:	021b      	lsls	r3, r3, #8
 800bfc6:	429a      	cmp	r2, r3
 800bfc8:	d005      	beq.n	800bfd6 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	689a      	ldr	r2, [r3, #8]
 800bfce:	2380      	movs	r3, #128	; 0x80
 800bfd0:	00db      	lsls	r3, r3, #3
 800bfd2:	429a      	cmp	r2, r3
 800bfd4:	d113      	bne.n	800bffe <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800bfd6:	68ba      	ldr	r2, [r7, #8]
 800bfd8:	23c0      	movs	r3, #192	; 0xc0
 800bfda:	00d9      	lsls	r1, r3, #3
 800bfdc:	68f8      	ldr	r0, [r7, #12]
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	9300      	str	r3, [sp, #0]
 800bfe2:	0013      	movs	r3, r2
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	f7ff ff0f 	bl	800be08 <SPI_WaitFifoStateUntilTimeout>
 800bfea:	1e03      	subs	r3, r0, #0
 800bfec:	d007      	beq.n	800bffe <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bff2:	2220      	movs	r2, #32
 800bff4:	431a      	orrs	r2, r3
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800bffa:	2303      	movs	r3, #3
 800bffc:	e000      	b.n	800c000 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800bffe:	2300      	movs	r3, #0
}
 800c000:	0018      	movs	r0, r3
 800c002:	46bd      	mov	sp, r7
 800c004:	b004      	add	sp, #16
 800c006:	bd80      	pop	{r7, pc}

0800c008 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b086      	sub	sp, #24
 800c00c:	af02      	add	r7, sp, #8
 800c00e:	60f8      	str	r0, [r7, #12]
 800c010:	60b9      	str	r1, [r7, #8]
 800c012:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c014:	68ba      	ldr	r2, [r7, #8]
 800c016:	23c0      	movs	r3, #192	; 0xc0
 800c018:	0159      	lsls	r1, r3, #5
 800c01a:	68f8      	ldr	r0, [r7, #12]
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	9300      	str	r3, [sp, #0]
 800c020:	0013      	movs	r3, r2
 800c022:	2200      	movs	r2, #0
 800c024:	f7ff fef0 	bl	800be08 <SPI_WaitFifoStateUntilTimeout>
 800c028:	1e03      	subs	r3, r0, #0
 800c02a:	d007      	beq.n	800c03c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c030:	2220      	movs	r2, #32
 800c032:	431a      	orrs	r2, r3
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c038:	2303      	movs	r3, #3
 800c03a:	e027      	b.n	800c08c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c03c:	68ba      	ldr	r2, [r7, #8]
 800c03e:	68f8      	ldr	r0, [r7, #12]
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	9300      	str	r3, [sp, #0]
 800c044:	0013      	movs	r3, r2
 800c046:	2200      	movs	r2, #0
 800c048:	2180      	movs	r1, #128	; 0x80
 800c04a:	f7ff fe4f 	bl	800bcec <SPI_WaitFlagStateUntilTimeout>
 800c04e:	1e03      	subs	r3, r0, #0
 800c050:	d007      	beq.n	800c062 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c056:	2220      	movs	r2, #32
 800c058:	431a      	orrs	r2, r3
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c05e:	2303      	movs	r3, #3
 800c060:	e014      	b.n	800c08c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c062:	68ba      	ldr	r2, [r7, #8]
 800c064:	23c0      	movs	r3, #192	; 0xc0
 800c066:	00d9      	lsls	r1, r3, #3
 800c068:	68f8      	ldr	r0, [r7, #12]
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	9300      	str	r3, [sp, #0]
 800c06e:	0013      	movs	r3, r2
 800c070:	2200      	movs	r2, #0
 800c072:	f7ff fec9 	bl	800be08 <SPI_WaitFifoStateUntilTimeout>
 800c076:	1e03      	subs	r3, r0, #0
 800c078:	d007      	beq.n	800c08a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c07e:	2220      	movs	r2, #32
 800c080:	431a      	orrs	r2, r3
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c086:	2303      	movs	r3, #3
 800c088:	e000      	b.n	800c08c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800c08a:	2300      	movs	r3, #0
}
 800c08c:	0018      	movs	r0, r3
 800c08e:	46bd      	mov	sp, r7
 800c090:	b004      	add	sp, #16
 800c092:	bd80      	pop	{r7, pc}

0800c094 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b082      	sub	sp, #8
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d101      	bne.n	800c0a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c0a2:	2301      	movs	r3, #1
 800c0a4:	e04a      	b.n	800c13c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	223d      	movs	r2, #61	; 0x3d
 800c0aa:	5c9b      	ldrb	r3, [r3, r2]
 800c0ac:	b2db      	uxtb	r3, r3
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d107      	bne.n	800c0c2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	223c      	movs	r2, #60	; 0x3c
 800c0b6:	2100      	movs	r1, #0
 800c0b8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	0018      	movs	r0, r3
 800c0be:	f7fc fccf 	bl	8008a60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	223d      	movs	r2, #61	; 0x3d
 800c0c6:	2102      	movs	r1, #2
 800c0c8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681a      	ldr	r2, [r3, #0]
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	3304      	adds	r3, #4
 800c0d2:	0019      	movs	r1, r3
 800c0d4:	0010      	movs	r0, r2
 800c0d6:	f000 fd0f 	bl	800caf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	2248      	movs	r2, #72	; 0x48
 800c0de:	2101      	movs	r1, #1
 800c0e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	223e      	movs	r2, #62	; 0x3e
 800c0e6:	2101      	movs	r1, #1
 800c0e8:	5499      	strb	r1, [r3, r2]
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	223f      	movs	r2, #63	; 0x3f
 800c0ee:	2101      	movs	r1, #1
 800c0f0:	5499      	strb	r1, [r3, r2]
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	2240      	movs	r2, #64	; 0x40
 800c0f6:	2101      	movs	r1, #1
 800c0f8:	5499      	strb	r1, [r3, r2]
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	2241      	movs	r2, #65	; 0x41
 800c0fe:	2101      	movs	r1, #1
 800c100:	5499      	strb	r1, [r3, r2]
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2242      	movs	r2, #66	; 0x42
 800c106:	2101      	movs	r1, #1
 800c108:	5499      	strb	r1, [r3, r2]
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2243      	movs	r2, #67	; 0x43
 800c10e:	2101      	movs	r1, #1
 800c110:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	2244      	movs	r2, #68	; 0x44
 800c116:	2101      	movs	r1, #1
 800c118:	5499      	strb	r1, [r3, r2]
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	2245      	movs	r2, #69	; 0x45
 800c11e:	2101      	movs	r1, #1
 800c120:	5499      	strb	r1, [r3, r2]
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	2246      	movs	r2, #70	; 0x46
 800c126:	2101      	movs	r1, #1
 800c128:	5499      	strb	r1, [r3, r2]
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	2247      	movs	r2, #71	; 0x47
 800c12e:	2101      	movs	r1, #1
 800c130:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	223d      	movs	r2, #61	; 0x3d
 800c136:	2101      	movs	r1, #1
 800c138:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c13a:	2300      	movs	r3, #0
}
 800c13c:	0018      	movs	r0, r3
 800c13e:	46bd      	mov	sp, r7
 800c140:	b002      	add	sp, #8
 800c142:	bd80      	pop	{r7, pc}

0800c144 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b084      	sub	sp, #16
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	223d      	movs	r2, #61	; 0x3d
 800c150:	5c9b      	ldrb	r3, [r3, r2]
 800c152:	b2db      	uxtb	r3, r3
 800c154:	2b01      	cmp	r3, #1
 800c156:	d001      	beq.n	800c15c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c158:	2301      	movs	r3, #1
 800c15a:	e03c      	b.n	800c1d6 <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	223d      	movs	r2, #61	; 0x3d
 800c160:	2102      	movs	r1, #2
 800c162:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	68da      	ldr	r2, [r3, #12]
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	2101      	movs	r1, #1
 800c170:	430a      	orrs	r2, r1
 800c172:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	4a19      	ldr	r2, [pc, #100]	; (800c1e0 <HAL_TIM_Base_Start_IT+0x9c>)
 800c17a:	4293      	cmp	r3, r2
 800c17c:	d009      	beq.n	800c192 <HAL_TIM_Base_Start_IT+0x4e>
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	4a18      	ldr	r2, [pc, #96]	; (800c1e4 <HAL_TIM_Base_Start_IT+0xa0>)
 800c184:	4293      	cmp	r3, r2
 800c186:	d004      	beq.n	800c192 <HAL_TIM_Base_Start_IT+0x4e>
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	4a16      	ldr	r2, [pc, #88]	; (800c1e8 <HAL_TIM_Base_Start_IT+0xa4>)
 800c18e:	4293      	cmp	r3, r2
 800c190:	d116      	bne.n	800c1c0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	689b      	ldr	r3, [r3, #8]
 800c198:	4a14      	ldr	r2, [pc, #80]	; (800c1ec <HAL_TIM_Base_Start_IT+0xa8>)
 800c19a:	4013      	ands	r3, r2
 800c19c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	2b06      	cmp	r3, #6
 800c1a2:	d016      	beq.n	800c1d2 <HAL_TIM_Base_Start_IT+0x8e>
 800c1a4:	68fa      	ldr	r2, [r7, #12]
 800c1a6:	2380      	movs	r3, #128	; 0x80
 800c1a8:	025b      	lsls	r3, r3, #9
 800c1aa:	429a      	cmp	r2, r3
 800c1ac:	d011      	beq.n	800c1d2 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	681a      	ldr	r2, [r3, #0]
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	2101      	movs	r1, #1
 800c1ba:	430a      	orrs	r2, r1
 800c1bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c1be:	e008      	b.n	800c1d2 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	681a      	ldr	r2, [r3, #0]
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	2101      	movs	r1, #1
 800c1cc:	430a      	orrs	r2, r1
 800c1ce:	601a      	str	r2, [r3, #0]
 800c1d0:	e000      	b.n	800c1d4 <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c1d2:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800c1d4:	2300      	movs	r3, #0
}
 800c1d6:	0018      	movs	r0, r3
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	b004      	add	sp, #16
 800c1dc:	bd80      	pop	{r7, pc}
 800c1de:	46c0      	nop			; (mov r8, r8)
 800c1e0:	40012c00 	.word	0x40012c00
 800c1e4:	40000400 	.word	0x40000400
 800c1e8:	40014000 	.word	0x40014000
 800c1ec:	00010007 	.word	0x00010007

0800c1f0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b082      	sub	sp, #8
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	68da      	ldr	r2, [r3, #12]
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	2101      	movs	r1, #1
 800c204:	438a      	bics	r2, r1
 800c206:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	6a1b      	ldr	r3, [r3, #32]
 800c20e:	4a0d      	ldr	r2, [pc, #52]	; (800c244 <HAL_TIM_Base_Stop_IT+0x54>)
 800c210:	4013      	ands	r3, r2
 800c212:	d10d      	bne.n	800c230 <HAL_TIM_Base_Stop_IT+0x40>
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	6a1b      	ldr	r3, [r3, #32]
 800c21a:	4a0b      	ldr	r2, [pc, #44]	; (800c248 <HAL_TIM_Base_Stop_IT+0x58>)
 800c21c:	4013      	ands	r3, r2
 800c21e:	d107      	bne.n	800c230 <HAL_TIM_Base_Stop_IT+0x40>
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	681a      	ldr	r2, [r3, #0]
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	2101      	movs	r1, #1
 800c22c:	438a      	bics	r2, r1
 800c22e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	223d      	movs	r2, #61	; 0x3d
 800c234:	2101      	movs	r1, #1
 800c236:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800c238:	2300      	movs	r3, #0
}
 800c23a:	0018      	movs	r0, r3
 800c23c:	46bd      	mov	sp, r7
 800c23e:	b002      	add	sp, #8
 800c240:	bd80      	pop	{r7, pc}
 800c242:	46c0      	nop			; (mov r8, r8)
 800c244:	00001111 	.word	0x00001111
 800c248:	00000444 	.word	0x00000444

0800c24c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b082      	sub	sp, #8
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d101      	bne.n	800c25e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800c25a:	2301      	movs	r3, #1
 800c25c:	e04a      	b.n	800c2f4 <HAL_TIM_IC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	223d      	movs	r2, #61	; 0x3d
 800c262:	5c9b      	ldrb	r3, [r3, r2]
 800c264:	b2db      	uxtb	r3, r3
 800c266:	2b00      	cmp	r3, #0
 800c268:	d107      	bne.n	800c27a <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	223c      	movs	r2, #60	; 0x3c
 800c26e:	2100      	movs	r1, #0
 800c270:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	0018      	movs	r0, r3
 800c276:	f000 f841 	bl	800c2fc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	223d      	movs	r2, #61	; 0x3d
 800c27e:	2102      	movs	r1, #2
 800c280:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681a      	ldr	r2, [r3, #0]
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	3304      	adds	r3, #4
 800c28a:	0019      	movs	r1, r3
 800c28c:	0010      	movs	r0, r2
 800c28e:	f000 fc33 	bl	800caf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	2248      	movs	r2, #72	; 0x48
 800c296:	2101      	movs	r1, #1
 800c298:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	223e      	movs	r2, #62	; 0x3e
 800c29e:	2101      	movs	r1, #1
 800c2a0:	5499      	strb	r1, [r3, r2]
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	223f      	movs	r2, #63	; 0x3f
 800c2a6:	2101      	movs	r1, #1
 800c2a8:	5499      	strb	r1, [r3, r2]
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	2240      	movs	r2, #64	; 0x40
 800c2ae:	2101      	movs	r1, #1
 800c2b0:	5499      	strb	r1, [r3, r2]
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	2241      	movs	r2, #65	; 0x41
 800c2b6:	2101      	movs	r1, #1
 800c2b8:	5499      	strb	r1, [r3, r2]
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	2242      	movs	r2, #66	; 0x42
 800c2be:	2101      	movs	r1, #1
 800c2c0:	5499      	strb	r1, [r3, r2]
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	2243      	movs	r2, #67	; 0x43
 800c2c6:	2101      	movs	r1, #1
 800c2c8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	2244      	movs	r2, #68	; 0x44
 800c2ce:	2101      	movs	r1, #1
 800c2d0:	5499      	strb	r1, [r3, r2]
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	2245      	movs	r2, #69	; 0x45
 800c2d6:	2101      	movs	r1, #1
 800c2d8:	5499      	strb	r1, [r3, r2]
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	2246      	movs	r2, #70	; 0x46
 800c2de:	2101      	movs	r1, #1
 800c2e0:	5499      	strb	r1, [r3, r2]
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	2247      	movs	r2, #71	; 0x47
 800c2e6:	2101      	movs	r1, #1
 800c2e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	223d      	movs	r2, #61	; 0x3d
 800c2ee:	2101      	movs	r1, #1
 800c2f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c2f2:	2300      	movs	r3, #0
}
 800c2f4:	0018      	movs	r0, r3
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	b002      	add	sp, #8
 800c2fa:	bd80      	pop	{r7, pc}

0800c2fc <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b082      	sub	sp, #8
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800c304:	46c0      	nop			; (mov r8, r8)
 800c306:	46bd      	mov	sp, r7
 800c308:	b002      	add	sp, #8
 800c30a:	bd80      	pop	{r7, pc}

0800c30c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b084      	sub	sp, #16
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
 800c314:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c316:	230f      	movs	r3, #15
 800c318:	18fb      	adds	r3, r7, r3
 800c31a:	2200      	movs	r2, #0
 800c31c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d104      	bne.n	800c32e <HAL_TIM_IC_Start_IT+0x22>
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	223e      	movs	r2, #62	; 0x3e
 800c328:	5c9b      	ldrb	r3, [r3, r2]
 800c32a:	b2db      	uxtb	r3, r3
 800c32c:	e023      	b.n	800c376 <HAL_TIM_IC_Start_IT+0x6a>
 800c32e:	683b      	ldr	r3, [r7, #0]
 800c330:	2b04      	cmp	r3, #4
 800c332:	d104      	bne.n	800c33e <HAL_TIM_IC_Start_IT+0x32>
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	223f      	movs	r2, #63	; 0x3f
 800c338:	5c9b      	ldrb	r3, [r3, r2]
 800c33a:	b2db      	uxtb	r3, r3
 800c33c:	e01b      	b.n	800c376 <HAL_TIM_IC_Start_IT+0x6a>
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	2b08      	cmp	r3, #8
 800c342:	d104      	bne.n	800c34e <HAL_TIM_IC_Start_IT+0x42>
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2240      	movs	r2, #64	; 0x40
 800c348:	5c9b      	ldrb	r3, [r3, r2]
 800c34a:	b2db      	uxtb	r3, r3
 800c34c:	e013      	b.n	800c376 <HAL_TIM_IC_Start_IT+0x6a>
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	2b0c      	cmp	r3, #12
 800c352:	d104      	bne.n	800c35e <HAL_TIM_IC_Start_IT+0x52>
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2241      	movs	r2, #65	; 0x41
 800c358:	5c9b      	ldrb	r3, [r3, r2]
 800c35a:	b2db      	uxtb	r3, r3
 800c35c:	e00b      	b.n	800c376 <HAL_TIM_IC_Start_IT+0x6a>
 800c35e:	683b      	ldr	r3, [r7, #0]
 800c360:	2b10      	cmp	r3, #16
 800c362:	d104      	bne.n	800c36e <HAL_TIM_IC_Start_IT+0x62>
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2242      	movs	r2, #66	; 0x42
 800c368:	5c9b      	ldrb	r3, [r3, r2]
 800c36a:	b2db      	uxtb	r3, r3
 800c36c:	e003      	b.n	800c376 <HAL_TIM_IC_Start_IT+0x6a>
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2243      	movs	r2, #67	; 0x43
 800c372:	5c9b      	ldrb	r3, [r3, r2]
 800c374:	b2db      	uxtb	r3, r3
 800c376:	220e      	movs	r2, #14
 800c378:	18ba      	adds	r2, r7, r2
 800c37a:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d104      	bne.n	800c38c <HAL_TIM_IC_Start_IT+0x80>
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	2244      	movs	r2, #68	; 0x44
 800c386:	5c9b      	ldrb	r3, [r3, r2]
 800c388:	b2db      	uxtb	r3, r3
 800c38a:	e013      	b.n	800c3b4 <HAL_TIM_IC_Start_IT+0xa8>
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	2b04      	cmp	r3, #4
 800c390:	d104      	bne.n	800c39c <HAL_TIM_IC_Start_IT+0x90>
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	2245      	movs	r2, #69	; 0x45
 800c396:	5c9b      	ldrb	r3, [r3, r2]
 800c398:	b2db      	uxtb	r3, r3
 800c39a:	e00b      	b.n	800c3b4 <HAL_TIM_IC_Start_IT+0xa8>
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	2b08      	cmp	r3, #8
 800c3a0:	d104      	bne.n	800c3ac <HAL_TIM_IC_Start_IT+0xa0>
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	2246      	movs	r2, #70	; 0x46
 800c3a6:	5c9b      	ldrb	r3, [r3, r2]
 800c3a8:	b2db      	uxtb	r3, r3
 800c3aa:	e003      	b.n	800c3b4 <HAL_TIM_IC_Start_IT+0xa8>
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	2247      	movs	r2, #71	; 0x47
 800c3b0:	5c9b      	ldrb	r3, [r3, r2]
 800c3b2:	b2db      	uxtb	r3, r3
 800c3b4:	210d      	movs	r1, #13
 800c3b6:	187a      	adds	r2, r7, r1
 800c3b8:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800c3ba:	230e      	movs	r3, #14
 800c3bc:	18fb      	adds	r3, r7, r3
 800c3be:	781b      	ldrb	r3, [r3, #0]
 800c3c0:	2b01      	cmp	r3, #1
 800c3c2:	d103      	bne.n	800c3cc <HAL_TIM_IC_Start_IT+0xc0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800c3c4:	187b      	adds	r3, r7, r1
 800c3c6:	781b      	ldrb	r3, [r3, #0]
 800c3c8:	2b01      	cmp	r3, #1
 800c3ca:	d001      	beq.n	800c3d0 <HAL_TIM_IC_Start_IT+0xc4>
  {
    return HAL_ERROR;
 800c3cc:	2301      	movs	r3, #1
 800c3ce:	e0c2      	b.n	800c556 <HAL_TIM_IC_Start_IT+0x24a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d104      	bne.n	800c3e0 <HAL_TIM_IC_Start_IT+0xd4>
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	223e      	movs	r2, #62	; 0x3e
 800c3da:	2102      	movs	r1, #2
 800c3dc:	5499      	strb	r1, [r3, r2]
 800c3de:	e023      	b.n	800c428 <HAL_TIM_IC_Start_IT+0x11c>
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	2b04      	cmp	r3, #4
 800c3e4:	d104      	bne.n	800c3f0 <HAL_TIM_IC_Start_IT+0xe4>
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	223f      	movs	r2, #63	; 0x3f
 800c3ea:	2102      	movs	r1, #2
 800c3ec:	5499      	strb	r1, [r3, r2]
 800c3ee:	e01b      	b.n	800c428 <HAL_TIM_IC_Start_IT+0x11c>
 800c3f0:	683b      	ldr	r3, [r7, #0]
 800c3f2:	2b08      	cmp	r3, #8
 800c3f4:	d104      	bne.n	800c400 <HAL_TIM_IC_Start_IT+0xf4>
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	2240      	movs	r2, #64	; 0x40
 800c3fa:	2102      	movs	r1, #2
 800c3fc:	5499      	strb	r1, [r3, r2]
 800c3fe:	e013      	b.n	800c428 <HAL_TIM_IC_Start_IT+0x11c>
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	2b0c      	cmp	r3, #12
 800c404:	d104      	bne.n	800c410 <HAL_TIM_IC_Start_IT+0x104>
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	2241      	movs	r2, #65	; 0x41
 800c40a:	2102      	movs	r1, #2
 800c40c:	5499      	strb	r1, [r3, r2]
 800c40e:	e00b      	b.n	800c428 <HAL_TIM_IC_Start_IT+0x11c>
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	2b10      	cmp	r3, #16
 800c414:	d104      	bne.n	800c420 <HAL_TIM_IC_Start_IT+0x114>
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	2242      	movs	r2, #66	; 0x42
 800c41a:	2102      	movs	r1, #2
 800c41c:	5499      	strb	r1, [r3, r2]
 800c41e:	e003      	b.n	800c428 <HAL_TIM_IC_Start_IT+0x11c>
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	2243      	movs	r2, #67	; 0x43
 800c424:	2102      	movs	r1, #2
 800c426:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d104      	bne.n	800c438 <HAL_TIM_IC_Start_IT+0x12c>
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	2244      	movs	r2, #68	; 0x44
 800c432:	2102      	movs	r1, #2
 800c434:	5499      	strb	r1, [r3, r2]
 800c436:	e013      	b.n	800c460 <HAL_TIM_IC_Start_IT+0x154>
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	2b04      	cmp	r3, #4
 800c43c:	d104      	bne.n	800c448 <HAL_TIM_IC_Start_IT+0x13c>
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	2245      	movs	r2, #69	; 0x45
 800c442:	2102      	movs	r1, #2
 800c444:	5499      	strb	r1, [r3, r2]
 800c446:	e00b      	b.n	800c460 <HAL_TIM_IC_Start_IT+0x154>
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	2b08      	cmp	r3, #8
 800c44c:	d104      	bne.n	800c458 <HAL_TIM_IC_Start_IT+0x14c>
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2246      	movs	r2, #70	; 0x46
 800c452:	2102      	movs	r1, #2
 800c454:	5499      	strb	r1, [r3, r2]
 800c456:	e003      	b.n	800c460 <HAL_TIM_IC_Start_IT+0x154>
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2247      	movs	r2, #71	; 0x47
 800c45c:	2102      	movs	r1, #2
 800c45e:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	2b0c      	cmp	r3, #12
 800c464:	d02a      	beq.n	800c4bc <HAL_TIM_IC_Start_IT+0x1b0>
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	2b0c      	cmp	r3, #12
 800c46a:	d830      	bhi.n	800c4ce <HAL_TIM_IC_Start_IT+0x1c2>
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	2b08      	cmp	r3, #8
 800c470:	d01b      	beq.n	800c4aa <HAL_TIM_IC_Start_IT+0x19e>
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	2b08      	cmp	r3, #8
 800c476:	d82a      	bhi.n	800c4ce <HAL_TIM_IC_Start_IT+0x1c2>
 800c478:	683b      	ldr	r3, [r7, #0]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d003      	beq.n	800c486 <HAL_TIM_IC_Start_IT+0x17a>
 800c47e:	683b      	ldr	r3, [r7, #0]
 800c480:	2b04      	cmp	r3, #4
 800c482:	d009      	beq.n	800c498 <HAL_TIM_IC_Start_IT+0x18c>
 800c484:	e023      	b.n	800c4ce <HAL_TIM_IC_Start_IT+0x1c2>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	68da      	ldr	r2, [r3, #12]
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	2102      	movs	r1, #2
 800c492:	430a      	orrs	r2, r1
 800c494:	60da      	str	r2, [r3, #12]
      break;
 800c496:	e01f      	b.n	800c4d8 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	68da      	ldr	r2, [r3, #12]
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	2104      	movs	r1, #4
 800c4a4:	430a      	orrs	r2, r1
 800c4a6:	60da      	str	r2, [r3, #12]
      break;
 800c4a8:	e016      	b.n	800c4d8 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	68da      	ldr	r2, [r3, #12]
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	2108      	movs	r1, #8
 800c4b6:	430a      	orrs	r2, r1
 800c4b8:	60da      	str	r2, [r3, #12]
      break;
 800c4ba:	e00d      	b.n	800c4d8 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	68da      	ldr	r2, [r3, #12]
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	2110      	movs	r1, #16
 800c4c8:	430a      	orrs	r2, r1
 800c4ca:	60da      	str	r2, [r3, #12]
      break;
 800c4cc:	e004      	b.n	800c4d8 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    default:
      status = HAL_ERROR;
 800c4ce:	230f      	movs	r3, #15
 800c4d0:	18fb      	adds	r3, r7, r3
 800c4d2:	2201      	movs	r2, #1
 800c4d4:	701a      	strb	r2, [r3, #0]
      break;
 800c4d6:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 800c4d8:	230f      	movs	r3, #15
 800c4da:	18fb      	adds	r3, r7, r3
 800c4dc:	781b      	ldrb	r3, [r3, #0]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d136      	bne.n	800c550 <HAL_TIM_IC_Start_IT+0x244>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	6839      	ldr	r1, [r7, #0]
 800c4e8:	2201      	movs	r2, #1
 800c4ea:	0018      	movs	r0, r3
 800c4ec:	f000 fd36 	bl	800cf5c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	4a1a      	ldr	r2, [pc, #104]	; (800c560 <HAL_TIM_IC_Start_IT+0x254>)
 800c4f6:	4293      	cmp	r3, r2
 800c4f8:	d009      	beq.n	800c50e <HAL_TIM_IC_Start_IT+0x202>
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	4a19      	ldr	r2, [pc, #100]	; (800c564 <HAL_TIM_IC_Start_IT+0x258>)
 800c500:	4293      	cmp	r3, r2
 800c502:	d004      	beq.n	800c50e <HAL_TIM_IC_Start_IT+0x202>
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	4a17      	ldr	r2, [pc, #92]	; (800c568 <HAL_TIM_IC_Start_IT+0x25c>)
 800c50a:	4293      	cmp	r3, r2
 800c50c:	d116      	bne.n	800c53c <HAL_TIM_IC_Start_IT+0x230>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	689b      	ldr	r3, [r3, #8]
 800c514:	4a15      	ldr	r2, [pc, #84]	; (800c56c <HAL_TIM_IC_Start_IT+0x260>)
 800c516:	4013      	ands	r3, r2
 800c518:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c51a:	68bb      	ldr	r3, [r7, #8]
 800c51c:	2b06      	cmp	r3, #6
 800c51e:	d016      	beq.n	800c54e <HAL_TIM_IC_Start_IT+0x242>
 800c520:	68ba      	ldr	r2, [r7, #8]
 800c522:	2380      	movs	r3, #128	; 0x80
 800c524:	025b      	lsls	r3, r3, #9
 800c526:	429a      	cmp	r2, r3
 800c528:	d011      	beq.n	800c54e <HAL_TIM_IC_Start_IT+0x242>
      {
        __HAL_TIM_ENABLE(htim);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	681a      	ldr	r2, [r3, #0]
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	2101      	movs	r1, #1
 800c536:	430a      	orrs	r2, r1
 800c538:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c53a:	e008      	b.n	800c54e <HAL_TIM_IC_Start_IT+0x242>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	681a      	ldr	r2, [r3, #0]
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	2101      	movs	r1, #1
 800c548:	430a      	orrs	r2, r1
 800c54a:	601a      	str	r2, [r3, #0]
 800c54c:	e000      	b.n	800c550 <HAL_TIM_IC_Start_IT+0x244>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c54e:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 800c550:	230f      	movs	r3, #15
 800c552:	18fb      	adds	r3, r7, r3
 800c554:	781b      	ldrb	r3, [r3, #0]
}
 800c556:	0018      	movs	r0, r3
 800c558:	46bd      	mov	sp, r7
 800c55a:	b004      	add	sp, #16
 800c55c:	bd80      	pop	{r7, pc}
 800c55e:	46c0      	nop			; (mov r8, r8)
 800c560:	40012c00 	.word	0x40012c00
 800c564:	40000400 	.word	0x40000400
 800c568:	40014000 	.word	0x40014000
 800c56c:	00010007 	.word	0x00010007

0800c570 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b082      	sub	sp, #8
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	691b      	ldr	r3, [r3, #16]
 800c57e:	2202      	movs	r2, #2
 800c580:	4013      	ands	r3, r2
 800c582:	2b02      	cmp	r3, #2
 800c584:	d124      	bne.n	800c5d0 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	68db      	ldr	r3, [r3, #12]
 800c58c:	2202      	movs	r2, #2
 800c58e:	4013      	ands	r3, r2
 800c590:	2b02      	cmp	r3, #2
 800c592:	d11d      	bne.n	800c5d0 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	2203      	movs	r2, #3
 800c59a:	4252      	negs	r2, r2
 800c59c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2201      	movs	r2, #1
 800c5a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	699b      	ldr	r3, [r3, #24]
 800c5aa:	2203      	movs	r2, #3
 800c5ac:	4013      	ands	r3, r2
 800c5ae:	d004      	beq.n	800c5ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	0018      	movs	r0, r3
 800c5b4:	f7fb f9fe 	bl	80079b4 <HAL_TIM_IC_CaptureCallback>
 800c5b8:	e007      	b.n	800c5ca <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	0018      	movs	r0, r3
 800c5be:	f000 fa83 	bl	800cac8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	0018      	movs	r0, r3
 800c5c6:	f000 fa87 	bl	800cad8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	691b      	ldr	r3, [r3, #16]
 800c5d6:	2204      	movs	r2, #4
 800c5d8:	4013      	ands	r3, r2
 800c5da:	2b04      	cmp	r3, #4
 800c5dc:	d125      	bne.n	800c62a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	68db      	ldr	r3, [r3, #12]
 800c5e4:	2204      	movs	r2, #4
 800c5e6:	4013      	ands	r3, r2
 800c5e8:	2b04      	cmp	r3, #4
 800c5ea:	d11e      	bne.n	800c62a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	2205      	movs	r2, #5
 800c5f2:	4252      	negs	r2, r2
 800c5f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	2202      	movs	r2, #2
 800c5fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	699a      	ldr	r2, [r3, #24]
 800c602:	23c0      	movs	r3, #192	; 0xc0
 800c604:	009b      	lsls	r3, r3, #2
 800c606:	4013      	ands	r3, r2
 800c608:	d004      	beq.n	800c614 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	0018      	movs	r0, r3
 800c60e:	f7fb f9d1 	bl	80079b4 <HAL_TIM_IC_CaptureCallback>
 800c612:	e007      	b.n	800c624 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	0018      	movs	r0, r3
 800c618:	f000 fa56 	bl	800cac8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	0018      	movs	r0, r3
 800c620:	f000 fa5a 	bl	800cad8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2200      	movs	r2, #0
 800c628:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	691b      	ldr	r3, [r3, #16]
 800c630:	2208      	movs	r2, #8
 800c632:	4013      	ands	r3, r2
 800c634:	2b08      	cmp	r3, #8
 800c636:	d124      	bne.n	800c682 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	68db      	ldr	r3, [r3, #12]
 800c63e:	2208      	movs	r2, #8
 800c640:	4013      	ands	r3, r2
 800c642:	2b08      	cmp	r3, #8
 800c644:	d11d      	bne.n	800c682 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	2209      	movs	r2, #9
 800c64c:	4252      	negs	r2, r2
 800c64e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2204      	movs	r2, #4
 800c654:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	69db      	ldr	r3, [r3, #28]
 800c65c:	2203      	movs	r2, #3
 800c65e:	4013      	ands	r3, r2
 800c660:	d004      	beq.n	800c66c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	0018      	movs	r0, r3
 800c666:	f7fb f9a5 	bl	80079b4 <HAL_TIM_IC_CaptureCallback>
 800c66a:	e007      	b.n	800c67c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	0018      	movs	r0, r3
 800c670:	f000 fa2a 	bl	800cac8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	0018      	movs	r0, r3
 800c678:	f000 fa2e 	bl	800cad8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2200      	movs	r2, #0
 800c680:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	691b      	ldr	r3, [r3, #16]
 800c688:	2210      	movs	r2, #16
 800c68a:	4013      	ands	r3, r2
 800c68c:	2b10      	cmp	r3, #16
 800c68e:	d125      	bne.n	800c6dc <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	68db      	ldr	r3, [r3, #12]
 800c696:	2210      	movs	r2, #16
 800c698:	4013      	ands	r3, r2
 800c69a:	2b10      	cmp	r3, #16
 800c69c:	d11e      	bne.n	800c6dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	2211      	movs	r2, #17
 800c6a4:	4252      	negs	r2, r2
 800c6a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2208      	movs	r2, #8
 800c6ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	69da      	ldr	r2, [r3, #28]
 800c6b4:	23c0      	movs	r3, #192	; 0xc0
 800c6b6:	009b      	lsls	r3, r3, #2
 800c6b8:	4013      	ands	r3, r2
 800c6ba:	d004      	beq.n	800c6c6 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	0018      	movs	r0, r3
 800c6c0:	f7fb f978 	bl	80079b4 <HAL_TIM_IC_CaptureCallback>
 800c6c4:	e007      	b.n	800c6d6 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	0018      	movs	r0, r3
 800c6ca:	f000 f9fd 	bl	800cac8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	0018      	movs	r0, r3
 800c6d2:	f000 fa01 	bl	800cad8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	2200      	movs	r2, #0
 800c6da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	691b      	ldr	r3, [r3, #16]
 800c6e2:	2201      	movs	r2, #1
 800c6e4:	4013      	ands	r3, r2
 800c6e6:	2b01      	cmp	r3, #1
 800c6e8:	d10f      	bne.n	800c70a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	68db      	ldr	r3, [r3, #12]
 800c6f0:	2201      	movs	r2, #1
 800c6f2:	4013      	ands	r3, r2
 800c6f4:	2b01      	cmp	r3, #1
 800c6f6:	d108      	bne.n	800c70a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	2202      	movs	r2, #2
 800c6fe:	4252      	negs	r2, r2
 800c700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	0018      	movs	r0, r3
 800c706:	f7f8 f875 	bl	80047f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	691b      	ldr	r3, [r3, #16]
 800c710:	2280      	movs	r2, #128	; 0x80
 800c712:	4013      	ands	r3, r2
 800c714:	2b80      	cmp	r3, #128	; 0x80
 800c716:	d10f      	bne.n	800c738 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	68db      	ldr	r3, [r3, #12]
 800c71e:	2280      	movs	r2, #128	; 0x80
 800c720:	4013      	ands	r3, r2
 800c722:	2b80      	cmp	r3, #128	; 0x80
 800c724:	d108      	bne.n	800c738 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	2281      	movs	r2, #129	; 0x81
 800c72c:	4252      	negs	r2, r2
 800c72e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	0018      	movs	r0, r3
 800c734:	f000 fca6 	bl	800d084 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	691a      	ldr	r2, [r3, #16]
 800c73e:	2380      	movs	r3, #128	; 0x80
 800c740:	005b      	lsls	r3, r3, #1
 800c742:	401a      	ands	r2, r3
 800c744:	2380      	movs	r3, #128	; 0x80
 800c746:	005b      	lsls	r3, r3, #1
 800c748:	429a      	cmp	r2, r3
 800c74a:	d10e      	bne.n	800c76a <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	68db      	ldr	r3, [r3, #12]
 800c752:	2280      	movs	r2, #128	; 0x80
 800c754:	4013      	ands	r3, r2
 800c756:	2b80      	cmp	r3, #128	; 0x80
 800c758:	d107      	bne.n	800c76a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	4a1c      	ldr	r2, [pc, #112]	; (800c7d0 <HAL_TIM_IRQHandler+0x260>)
 800c760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	0018      	movs	r0, r3
 800c766:	f000 fc95 	bl	800d094 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	691b      	ldr	r3, [r3, #16]
 800c770:	2240      	movs	r2, #64	; 0x40
 800c772:	4013      	ands	r3, r2
 800c774:	2b40      	cmp	r3, #64	; 0x40
 800c776:	d10f      	bne.n	800c798 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	68db      	ldr	r3, [r3, #12]
 800c77e:	2240      	movs	r2, #64	; 0x40
 800c780:	4013      	ands	r3, r2
 800c782:	2b40      	cmp	r3, #64	; 0x40
 800c784:	d108      	bne.n	800c798 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	2241      	movs	r2, #65	; 0x41
 800c78c:	4252      	negs	r2, r2
 800c78e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	0018      	movs	r0, r3
 800c794:	f000 f9a8 	bl	800cae8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	691b      	ldr	r3, [r3, #16]
 800c79e:	2220      	movs	r2, #32
 800c7a0:	4013      	ands	r3, r2
 800c7a2:	2b20      	cmp	r3, #32
 800c7a4:	d10f      	bne.n	800c7c6 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	68db      	ldr	r3, [r3, #12]
 800c7ac:	2220      	movs	r2, #32
 800c7ae:	4013      	ands	r3, r2
 800c7b0:	2b20      	cmp	r3, #32
 800c7b2:	d108      	bne.n	800c7c6 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	2221      	movs	r2, #33	; 0x21
 800c7ba:	4252      	negs	r2, r2
 800c7bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	0018      	movs	r0, r3
 800c7c2:	f000 fc57 	bl	800d074 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c7c6:	46c0      	nop			; (mov r8, r8)
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	b002      	add	sp, #8
 800c7cc:	bd80      	pop	{r7, pc}
 800c7ce:	46c0      	nop			; (mov r8, r8)
 800c7d0:	fffffeff 	.word	0xfffffeff

0800c7d4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b086      	sub	sp, #24
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	60f8      	str	r0, [r7, #12]
 800c7dc:	60b9      	str	r1, [r7, #8]
 800c7de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c7e0:	2317      	movs	r3, #23
 800c7e2:	18fb      	adds	r3, r7, r3
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	223c      	movs	r2, #60	; 0x3c
 800c7ec:	5c9b      	ldrb	r3, [r3, r2]
 800c7ee:	2b01      	cmp	r3, #1
 800c7f0:	d101      	bne.n	800c7f6 <HAL_TIM_IC_ConfigChannel+0x22>
 800c7f2:	2302      	movs	r3, #2
 800c7f4:	e08c      	b.n	800c910 <HAL_TIM_IC_ConfigChannel+0x13c>
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	223c      	movs	r2, #60	; 0x3c
 800c7fa:	2101      	movs	r1, #1
 800c7fc:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d11b      	bne.n	800c83c <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	6818      	ldr	r0, [r3, #0]
 800c808:	68bb      	ldr	r3, [r7, #8]
 800c80a:	6819      	ldr	r1, [r3, #0]
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	685a      	ldr	r2, [r3, #4]
 800c810:	68bb      	ldr	r3, [r7, #8]
 800c812:	68db      	ldr	r3, [r3, #12]
 800c814:	f000 f9e6 	bl	800cbe4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	699a      	ldr	r2, [r3, #24]
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	210c      	movs	r1, #12
 800c824:	438a      	bics	r2, r1
 800c826:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	6999      	ldr	r1, [r3, #24]
 800c82e:	68bb      	ldr	r3, [r7, #8]
 800c830:	689a      	ldr	r2, [r3, #8]
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	430a      	orrs	r2, r1
 800c838:	619a      	str	r2, [r3, #24]
 800c83a:	e062      	b.n	800c902 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	2b04      	cmp	r3, #4
 800c840:	d11c      	bne.n	800c87c <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	6818      	ldr	r0, [r3, #0]
 800c846:	68bb      	ldr	r3, [r7, #8]
 800c848:	6819      	ldr	r1, [r3, #0]
 800c84a:	68bb      	ldr	r3, [r7, #8]
 800c84c:	685a      	ldr	r2, [r3, #4]
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	68db      	ldr	r3, [r3, #12]
 800c852:	f000 fa4d 	bl	800ccf0 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	699a      	ldr	r2, [r3, #24]
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	492d      	ldr	r1, [pc, #180]	; (800c918 <HAL_TIM_IC_ConfigChannel+0x144>)
 800c862:	400a      	ands	r2, r1
 800c864:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	6999      	ldr	r1, [r3, #24]
 800c86c:	68bb      	ldr	r3, [r7, #8]
 800c86e:	689b      	ldr	r3, [r3, #8]
 800c870:	021a      	lsls	r2, r3, #8
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	430a      	orrs	r2, r1
 800c878:	619a      	str	r2, [r3, #24]
 800c87a:	e042      	b.n	800c902 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2b08      	cmp	r3, #8
 800c880:	d11b      	bne.n	800c8ba <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	6818      	ldr	r0, [r3, #0]
 800c886:	68bb      	ldr	r3, [r7, #8]
 800c888:	6819      	ldr	r1, [r3, #0]
 800c88a:	68bb      	ldr	r3, [r7, #8]
 800c88c:	685a      	ldr	r2, [r3, #4]
 800c88e:	68bb      	ldr	r3, [r7, #8]
 800c890:	68db      	ldr	r3, [r3, #12]
 800c892:	f000 faa1 	bl	800cdd8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	69da      	ldr	r2, [r3, #28]
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	210c      	movs	r1, #12
 800c8a2:	438a      	bics	r2, r1
 800c8a4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	69d9      	ldr	r1, [r3, #28]
 800c8ac:	68bb      	ldr	r3, [r7, #8]
 800c8ae:	689a      	ldr	r2, [r3, #8]
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	430a      	orrs	r2, r1
 800c8b6:	61da      	str	r2, [r3, #28]
 800c8b8:	e023      	b.n	800c902 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	2b0c      	cmp	r3, #12
 800c8be:	d11c      	bne.n	800c8fa <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	6818      	ldr	r0, [r3, #0]
 800c8c4:	68bb      	ldr	r3, [r7, #8]
 800c8c6:	6819      	ldr	r1, [r3, #0]
 800c8c8:	68bb      	ldr	r3, [r7, #8]
 800c8ca:	685a      	ldr	r2, [r3, #4]
 800c8cc:	68bb      	ldr	r3, [r7, #8]
 800c8ce:	68db      	ldr	r3, [r3, #12]
 800c8d0:	f000 fac2 	bl	800ce58 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	69da      	ldr	r2, [r3, #28]
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	490e      	ldr	r1, [pc, #56]	; (800c918 <HAL_TIM_IC_ConfigChannel+0x144>)
 800c8e0:	400a      	ands	r2, r1
 800c8e2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	69d9      	ldr	r1, [r3, #28]
 800c8ea:	68bb      	ldr	r3, [r7, #8]
 800c8ec:	689b      	ldr	r3, [r3, #8]
 800c8ee:	021a      	lsls	r2, r3, #8
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	430a      	orrs	r2, r1
 800c8f6:	61da      	str	r2, [r3, #28]
 800c8f8:	e003      	b.n	800c902 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 800c8fa:	2317      	movs	r3, #23
 800c8fc:	18fb      	adds	r3, r7, r3
 800c8fe:	2201      	movs	r2, #1
 800c900:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	223c      	movs	r2, #60	; 0x3c
 800c906:	2100      	movs	r1, #0
 800c908:	5499      	strb	r1, [r3, r2]

  return status;
 800c90a:	2317      	movs	r3, #23
 800c90c:	18fb      	adds	r3, r7, r3
 800c90e:	781b      	ldrb	r3, [r3, #0]
}
 800c910:	0018      	movs	r0, r3
 800c912:	46bd      	mov	sp, r7
 800c914:	b006      	add	sp, #24
 800c916:	bd80      	pop	{r7, pc}
 800c918:	fffff3ff 	.word	0xfffff3ff

0800c91c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b084      	sub	sp, #16
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
 800c924:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c926:	230f      	movs	r3, #15
 800c928:	18fb      	adds	r3, r7, r3
 800c92a:	2200      	movs	r2, #0
 800c92c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	223c      	movs	r2, #60	; 0x3c
 800c932:	5c9b      	ldrb	r3, [r3, r2]
 800c934:	2b01      	cmp	r3, #1
 800c936:	d101      	bne.n	800c93c <HAL_TIM_ConfigClockSource+0x20>
 800c938:	2302      	movs	r3, #2
 800c93a:	e0bc      	b.n	800cab6 <HAL_TIM_ConfigClockSource+0x19a>
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	223c      	movs	r2, #60	; 0x3c
 800c940:	2101      	movs	r1, #1
 800c942:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	223d      	movs	r2, #61	; 0x3d
 800c948:	2102      	movs	r1, #2
 800c94a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	689b      	ldr	r3, [r3, #8]
 800c952:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c954:	68bb      	ldr	r3, [r7, #8]
 800c956:	4a5a      	ldr	r2, [pc, #360]	; (800cac0 <HAL_TIM_ConfigClockSource+0x1a4>)
 800c958:	4013      	ands	r3, r2
 800c95a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c95c:	68bb      	ldr	r3, [r7, #8]
 800c95e:	4a59      	ldr	r2, [pc, #356]	; (800cac4 <HAL_TIM_ConfigClockSource+0x1a8>)
 800c960:	4013      	ands	r3, r2
 800c962:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	68ba      	ldr	r2, [r7, #8]
 800c96a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c96c:	683b      	ldr	r3, [r7, #0]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	2280      	movs	r2, #128	; 0x80
 800c972:	0192      	lsls	r2, r2, #6
 800c974:	4293      	cmp	r3, r2
 800c976:	d040      	beq.n	800c9fa <HAL_TIM_ConfigClockSource+0xde>
 800c978:	2280      	movs	r2, #128	; 0x80
 800c97a:	0192      	lsls	r2, r2, #6
 800c97c:	4293      	cmp	r3, r2
 800c97e:	d900      	bls.n	800c982 <HAL_TIM_ConfigClockSource+0x66>
 800c980:	e088      	b.n	800ca94 <HAL_TIM_ConfigClockSource+0x178>
 800c982:	2280      	movs	r2, #128	; 0x80
 800c984:	0152      	lsls	r2, r2, #5
 800c986:	4293      	cmp	r3, r2
 800c988:	d100      	bne.n	800c98c <HAL_TIM_ConfigClockSource+0x70>
 800c98a:	e088      	b.n	800ca9e <HAL_TIM_ConfigClockSource+0x182>
 800c98c:	2280      	movs	r2, #128	; 0x80
 800c98e:	0152      	lsls	r2, r2, #5
 800c990:	4293      	cmp	r3, r2
 800c992:	d900      	bls.n	800c996 <HAL_TIM_ConfigClockSource+0x7a>
 800c994:	e07e      	b.n	800ca94 <HAL_TIM_ConfigClockSource+0x178>
 800c996:	2b70      	cmp	r3, #112	; 0x70
 800c998:	d018      	beq.n	800c9cc <HAL_TIM_ConfigClockSource+0xb0>
 800c99a:	d900      	bls.n	800c99e <HAL_TIM_ConfigClockSource+0x82>
 800c99c:	e07a      	b.n	800ca94 <HAL_TIM_ConfigClockSource+0x178>
 800c99e:	2b60      	cmp	r3, #96	; 0x60
 800c9a0:	d04f      	beq.n	800ca42 <HAL_TIM_ConfigClockSource+0x126>
 800c9a2:	d900      	bls.n	800c9a6 <HAL_TIM_ConfigClockSource+0x8a>
 800c9a4:	e076      	b.n	800ca94 <HAL_TIM_ConfigClockSource+0x178>
 800c9a6:	2b50      	cmp	r3, #80	; 0x50
 800c9a8:	d03b      	beq.n	800ca22 <HAL_TIM_ConfigClockSource+0x106>
 800c9aa:	d900      	bls.n	800c9ae <HAL_TIM_ConfigClockSource+0x92>
 800c9ac:	e072      	b.n	800ca94 <HAL_TIM_ConfigClockSource+0x178>
 800c9ae:	2b40      	cmp	r3, #64	; 0x40
 800c9b0:	d057      	beq.n	800ca62 <HAL_TIM_ConfigClockSource+0x146>
 800c9b2:	d900      	bls.n	800c9b6 <HAL_TIM_ConfigClockSource+0x9a>
 800c9b4:	e06e      	b.n	800ca94 <HAL_TIM_ConfigClockSource+0x178>
 800c9b6:	2b30      	cmp	r3, #48	; 0x30
 800c9b8:	d063      	beq.n	800ca82 <HAL_TIM_ConfigClockSource+0x166>
 800c9ba:	d86b      	bhi.n	800ca94 <HAL_TIM_ConfigClockSource+0x178>
 800c9bc:	2b20      	cmp	r3, #32
 800c9be:	d060      	beq.n	800ca82 <HAL_TIM_ConfigClockSource+0x166>
 800c9c0:	d868      	bhi.n	800ca94 <HAL_TIM_ConfigClockSource+0x178>
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d05d      	beq.n	800ca82 <HAL_TIM_ConfigClockSource+0x166>
 800c9c6:	2b10      	cmp	r3, #16
 800c9c8:	d05b      	beq.n	800ca82 <HAL_TIM_ConfigClockSource+0x166>
 800c9ca:	e063      	b.n	800ca94 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	6818      	ldr	r0, [r3, #0]
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	6899      	ldr	r1, [r3, #8]
 800c9d4:	683b      	ldr	r3, [r7, #0]
 800c9d6:	685a      	ldr	r2, [r3, #4]
 800c9d8:	683b      	ldr	r3, [r7, #0]
 800c9da:	68db      	ldr	r3, [r3, #12]
 800c9dc:	f000 fa9e 	bl	800cf1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	689b      	ldr	r3, [r3, #8]
 800c9e6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c9e8:	68bb      	ldr	r3, [r7, #8]
 800c9ea:	2277      	movs	r2, #119	; 0x77
 800c9ec:	4313      	orrs	r3, r2
 800c9ee:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	68ba      	ldr	r2, [r7, #8]
 800c9f6:	609a      	str	r2, [r3, #8]
      break;
 800c9f8:	e052      	b.n	800caa0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	6818      	ldr	r0, [r3, #0]
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	6899      	ldr	r1, [r3, #8]
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	685a      	ldr	r2, [r3, #4]
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	68db      	ldr	r3, [r3, #12]
 800ca0a:	f000 fa87 	bl	800cf1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	689a      	ldr	r2, [r3, #8]
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	2180      	movs	r1, #128	; 0x80
 800ca1a:	01c9      	lsls	r1, r1, #7
 800ca1c:	430a      	orrs	r2, r1
 800ca1e:	609a      	str	r2, [r3, #8]
      break;
 800ca20:	e03e      	b.n	800caa0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	6818      	ldr	r0, [r3, #0]
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	6859      	ldr	r1, [r3, #4]
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	68db      	ldr	r3, [r3, #12]
 800ca2e:	001a      	movs	r2, r3
 800ca30:	f000 f930 	bl	800cc94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	2150      	movs	r1, #80	; 0x50
 800ca3a:	0018      	movs	r0, r3
 800ca3c:	f000 fa52 	bl	800cee4 <TIM_ITRx_SetConfig>
      break;
 800ca40:	e02e      	b.n	800caa0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	6818      	ldr	r0, [r3, #0]
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	6859      	ldr	r1, [r3, #4]
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	68db      	ldr	r3, [r3, #12]
 800ca4e:	001a      	movs	r2, r3
 800ca50:	f000 f990 	bl	800cd74 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	2160      	movs	r1, #96	; 0x60
 800ca5a:	0018      	movs	r0, r3
 800ca5c:	f000 fa42 	bl	800cee4 <TIM_ITRx_SetConfig>
      break;
 800ca60:	e01e      	b.n	800caa0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	6818      	ldr	r0, [r3, #0]
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	6859      	ldr	r1, [r3, #4]
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	68db      	ldr	r3, [r3, #12]
 800ca6e:	001a      	movs	r2, r3
 800ca70:	f000 f910 	bl	800cc94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	2140      	movs	r1, #64	; 0x40
 800ca7a:	0018      	movs	r0, r3
 800ca7c:	f000 fa32 	bl	800cee4 <TIM_ITRx_SetConfig>
      break;
 800ca80:	e00e      	b.n	800caa0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681a      	ldr	r2, [r3, #0]
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	0019      	movs	r1, r3
 800ca8c:	0010      	movs	r0, r2
 800ca8e:	f000 fa29 	bl	800cee4 <TIM_ITRx_SetConfig>
      break;
 800ca92:	e005      	b.n	800caa0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800ca94:	230f      	movs	r3, #15
 800ca96:	18fb      	adds	r3, r7, r3
 800ca98:	2201      	movs	r2, #1
 800ca9a:	701a      	strb	r2, [r3, #0]
      break;
 800ca9c:	e000      	b.n	800caa0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800ca9e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	223d      	movs	r2, #61	; 0x3d
 800caa4:	2101      	movs	r1, #1
 800caa6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	223c      	movs	r2, #60	; 0x3c
 800caac:	2100      	movs	r1, #0
 800caae:	5499      	strb	r1, [r3, r2]

  return status;
 800cab0:	230f      	movs	r3, #15
 800cab2:	18fb      	adds	r3, r7, r3
 800cab4:	781b      	ldrb	r3, [r3, #0]
}
 800cab6:	0018      	movs	r0, r3
 800cab8:	46bd      	mov	sp, r7
 800caba:	b004      	add	sp, #16
 800cabc:	bd80      	pop	{r7, pc}
 800cabe:	46c0      	nop			; (mov r8, r8)
 800cac0:	ffceff88 	.word	0xffceff88
 800cac4:	ffff00ff 	.word	0xffff00ff

0800cac8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b082      	sub	sp, #8
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cad0:	46c0      	nop			; (mov r8, r8)
 800cad2:	46bd      	mov	sp, r7
 800cad4:	b002      	add	sp, #8
 800cad6:	bd80      	pop	{r7, pc}

0800cad8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b082      	sub	sp, #8
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cae0:	46c0      	nop			; (mov r8, r8)
 800cae2:	46bd      	mov	sp, r7
 800cae4:	b002      	add	sp, #8
 800cae6:	bd80      	pop	{r7, pc}

0800cae8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b082      	sub	sp, #8
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800caf0:	46c0      	nop			; (mov r8, r8)
 800caf2:	46bd      	mov	sp, r7
 800caf4:	b002      	add	sp, #8
 800caf6:	bd80      	pop	{r7, pc}

0800caf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b084      	sub	sp, #16
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
 800cb00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	4a2f      	ldr	r2, [pc, #188]	; (800cbc8 <TIM_Base_SetConfig+0xd0>)
 800cb0c:	4293      	cmp	r3, r2
 800cb0e:	d003      	beq.n	800cb18 <TIM_Base_SetConfig+0x20>
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	4a2e      	ldr	r2, [pc, #184]	; (800cbcc <TIM_Base_SetConfig+0xd4>)
 800cb14:	4293      	cmp	r3, r2
 800cb16:	d108      	bne.n	800cb2a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	2270      	movs	r2, #112	; 0x70
 800cb1c:	4393      	bics	r3, r2
 800cb1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	685b      	ldr	r3, [r3, #4]
 800cb24:	68fa      	ldr	r2, [r7, #12]
 800cb26:	4313      	orrs	r3, r2
 800cb28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	4a26      	ldr	r2, [pc, #152]	; (800cbc8 <TIM_Base_SetConfig+0xd0>)
 800cb2e:	4293      	cmp	r3, r2
 800cb30:	d013      	beq.n	800cb5a <TIM_Base_SetConfig+0x62>
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	4a25      	ldr	r2, [pc, #148]	; (800cbcc <TIM_Base_SetConfig+0xd4>)
 800cb36:	4293      	cmp	r3, r2
 800cb38:	d00f      	beq.n	800cb5a <TIM_Base_SetConfig+0x62>
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	4a24      	ldr	r2, [pc, #144]	; (800cbd0 <TIM_Base_SetConfig+0xd8>)
 800cb3e:	4293      	cmp	r3, r2
 800cb40:	d00b      	beq.n	800cb5a <TIM_Base_SetConfig+0x62>
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	4a23      	ldr	r2, [pc, #140]	; (800cbd4 <TIM_Base_SetConfig+0xdc>)
 800cb46:	4293      	cmp	r3, r2
 800cb48:	d007      	beq.n	800cb5a <TIM_Base_SetConfig+0x62>
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	4a22      	ldr	r2, [pc, #136]	; (800cbd8 <TIM_Base_SetConfig+0xe0>)
 800cb4e:	4293      	cmp	r3, r2
 800cb50:	d003      	beq.n	800cb5a <TIM_Base_SetConfig+0x62>
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	4a21      	ldr	r2, [pc, #132]	; (800cbdc <TIM_Base_SetConfig+0xe4>)
 800cb56:	4293      	cmp	r3, r2
 800cb58:	d108      	bne.n	800cb6c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	4a20      	ldr	r2, [pc, #128]	; (800cbe0 <TIM_Base_SetConfig+0xe8>)
 800cb5e:	4013      	ands	r3, r2
 800cb60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	68db      	ldr	r3, [r3, #12]
 800cb66:	68fa      	ldr	r2, [r7, #12]
 800cb68:	4313      	orrs	r3, r2
 800cb6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	2280      	movs	r2, #128	; 0x80
 800cb70:	4393      	bics	r3, r2
 800cb72:	001a      	movs	r2, r3
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	695b      	ldr	r3, [r3, #20]
 800cb78:	4313      	orrs	r3, r2
 800cb7a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	68fa      	ldr	r2, [r7, #12]
 800cb80:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	689a      	ldr	r2, [r3, #8]
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	681a      	ldr	r2, [r3, #0]
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	4a0c      	ldr	r2, [pc, #48]	; (800cbc8 <TIM_Base_SetConfig+0xd0>)
 800cb96:	4293      	cmp	r3, r2
 800cb98:	d00b      	beq.n	800cbb2 <TIM_Base_SetConfig+0xba>
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	4a0d      	ldr	r2, [pc, #52]	; (800cbd4 <TIM_Base_SetConfig+0xdc>)
 800cb9e:	4293      	cmp	r3, r2
 800cba0:	d007      	beq.n	800cbb2 <TIM_Base_SetConfig+0xba>
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	4a0c      	ldr	r2, [pc, #48]	; (800cbd8 <TIM_Base_SetConfig+0xe0>)
 800cba6:	4293      	cmp	r3, r2
 800cba8:	d003      	beq.n	800cbb2 <TIM_Base_SetConfig+0xba>
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	4a0b      	ldr	r2, [pc, #44]	; (800cbdc <TIM_Base_SetConfig+0xe4>)
 800cbae:	4293      	cmp	r3, r2
 800cbb0:	d103      	bne.n	800cbba <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cbb2:	683b      	ldr	r3, [r7, #0]
 800cbb4:	691a      	ldr	r2, [r3, #16]
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	2201      	movs	r2, #1
 800cbbe:	615a      	str	r2, [r3, #20]
}
 800cbc0:	46c0      	nop			; (mov r8, r8)
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	b004      	add	sp, #16
 800cbc6:	bd80      	pop	{r7, pc}
 800cbc8:	40012c00 	.word	0x40012c00
 800cbcc:	40000400 	.word	0x40000400
 800cbd0:	40002000 	.word	0x40002000
 800cbd4:	40014000 	.word	0x40014000
 800cbd8:	40014400 	.word	0x40014400
 800cbdc:	40014800 	.word	0x40014800
 800cbe0:	fffffcff 	.word	0xfffffcff

0800cbe4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b086      	sub	sp, #24
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	60f8      	str	r0, [r7, #12]
 800cbec:	60b9      	str	r1, [r7, #8]
 800cbee:	607a      	str	r2, [r7, #4]
 800cbf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	6a1b      	ldr	r3, [r3, #32]
 800cbf6:	2201      	movs	r2, #1
 800cbf8:	4393      	bics	r3, r2
 800cbfa:	001a      	movs	r2, r3
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	699b      	ldr	r3, [r3, #24]
 800cc04:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	6a1b      	ldr	r3, [r3, #32]
 800cc0a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	4a1e      	ldr	r2, [pc, #120]	; (800cc88 <TIM_TI1_SetConfig+0xa4>)
 800cc10:	4293      	cmp	r3, r2
 800cc12:	d007      	beq.n	800cc24 <TIM_TI1_SetConfig+0x40>
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	4a1d      	ldr	r2, [pc, #116]	; (800cc8c <TIM_TI1_SetConfig+0xa8>)
 800cc18:	4293      	cmp	r3, r2
 800cc1a:	d003      	beq.n	800cc24 <TIM_TI1_SetConfig+0x40>
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	4a1c      	ldr	r2, [pc, #112]	; (800cc90 <TIM_TI1_SetConfig+0xac>)
 800cc20:	4293      	cmp	r3, r2
 800cc22:	d101      	bne.n	800cc28 <TIM_TI1_SetConfig+0x44>
 800cc24:	2301      	movs	r3, #1
 800cc26:	e000      	b.n	800cc2a <TIM_TI1_SetConfig+0x46>
 800cc28:	2300      	movs	r3, #0
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d008      	beq.n	800cc40 <TIM_TI1_SetConfig+0x5c>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800cc2e:	697b      	ldr	r3, [r7, #20]
 800cc30:	2203      	movs	r2, #3
 800cc32:	4393      	bics	r3, r2
 800cc34:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800cc36:	697a      	ldr	r2, [r7, #20]
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	4313      	orrs	r3, r2
 800cc3c:	617b      	str	r3, [r7, #20]
 800cc3e:	e003      	b.n	800cc48 <TIM_TI1_SetConfig+0x64>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800cc40:	697b      	ldr	r3, [r7, #20]
 800cc42:	2201      	movs	r2, #1
 800cc44:	4313      	orrs	r3, r2
 800cc46:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cc48:	697b      	ldr	r3, [r7, #20]
 800cc4a:	22f0      	movs	r2, #240	; 0xf0
 800cc4c:	4393      	bics	r3, r2
 800cc4e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	011b      	lsls	r3, r3, #4
 800cc54:	22ff      	movs	r2, #255	; 0xff
 800cc56:	4013      	ands	r3, r2
 800cc58:	697a      	ldr	r2, [r7, #20]
 800cc5a:	4313      	orrs	r3, r2
 800cc5c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cc5e:	693b      	ldr	r3, [r7, #16]
 800cc60:	220a      	movs	r2, #10
 800cc62:	4393      	bics	r3, r2
 800cc64:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800cc66:	68bb      	ldr	r3, [r7, #8]
 800cc68:	220a      	movs	r2, #10
 800cc6a:	4013      	ands	r3, r2
 800cc6c:	693a      	ldr	r2, [r7, #16]
 800cc6e:	4313      	orrs	r3, r2
 800cc70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	697a      	ldr	r2, [r7, #20]
 800cc76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	693a      	ldr	r2, [r7, #16]
 800cc7c:	621a      	str	r2, [r3, #32]
}
 800cc7e:	46c0      	nop			; (mov r8, r8)
 800cc80:	46bd      	mov	sp, r7
 800cc82:	b006      	add	sp, #24
 800cc84:	bd80      	pop	{r7, pc}
 800cc86:	46c0      	nop			; (mov r8, r8)
 800cc88:	40012c00 	.word	0x40012c00
 800cc8c:	40000400 	.word	0x40000400
 800cc90:	40014000 	.word	0x40014000

0800cc94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b086      	sub	sp, #24
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	60f8      	str	r0, [r7, #12]
 800cc9c:	60b9      	str	r1, [r7, #8]
 800cc9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	6a1b      	ldr	r3, [r3, #32]
 800cca4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	6a1b      	ldr	r3, [r3, #32]
 800ccaa:	2201      	movs	r2, #1
 800ccac:	4393      	bics	r3, r2
 800ccae:	001a      	movs	r2, r3
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	699b      	ldr	r3, [r3, #24]
 800ccb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ccba:	693b      	ldr	r3, [r7, #16]
 800ccbc:	22f0      	movs	r2, #240	; 0xf0
 800ccbe:	4393      	bics	r3, r2
 800ccc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	011b      	lsls	r3, r3, #4
 800ccc6:	693a      	ldr	r2, [r7, #16]
 800ccc8:	4313      	orrs	r3, r2
 800ccca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cccc:	697b      	ldr	r3, [r7, #20]
 800ccce:	220a      	movs	r2, #10
 800ccd0:	4393      	bics	r3, r2
 800ccd2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ccd4:	697a      	ldr	r2, [r7, #20]
 800ccd6:	68bb      	ldr	r3, [r7, #8]
 800ccd8:	4313      	orrs	r3, r2
 800ccda:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	693a      	ldr	r2, [r7, #16]
 800cce0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	697a      	ldr	r2, [r7, #20]
 800cce6:	621a      	str	r2, [r3, #32]
}
 800cce8:	46c0      	nop			; (mov r8, r8)
 800ccea:	46bd      	mov	sp, r7
 800ccec:	b006      	add	sp, #24
 800ccee:	bd80      	pop	{r7, pc}

0800ccf0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b086      	sub	sp, #24
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	60f8      	str	r0, [r7, #12]
 800ccf8:	60b9      	str	r1, [r7, #8]
 800ccfa:	607a      	str	r2, [r7, #4]
 800ccfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	6a1b      	ldr	r3, [r3, #32]
 800cd02:	2210      	movs	r2, #16
 800cd04:	4393      	bics	r3, r2
 800cd06:	001a      	movs	r2, r3
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	699b      	ldr	r3, [r3, #24]
 800cd10:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	6a1b      	ldr	r3, [r3, #32]
 800cd16:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800cd18:	697b      	ldr	r3, [r7, #20]
 800cd1a:	4a14      	ldr	r2, [pc, #80]	; (800cd6c <TIM_TI2_SetConfig+0x7c>)
 800cd1c:	4013      	ands	r3, r2
 800cd1e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	021b      	lsls	r3, r3, #8
 800cd24:	697a      	ldr	r2, [r7, #20]
 800cd26:	4313      	orrs	r3, r2
 800cd28:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cd2a:	697b      	ldr	r3, [r7, #20]
 800cd2c:	4a10      	ldr	r2, [pc, #64]	; (800cd70 <TIM_TI2_SetConfig+0x80>)
 800cd2e:	4013      	ands	r3, r2
 800cd30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800cd32:	683b      	ldr	r3, [r7, #0]
 800cd34:	031b      	lsls	r3, r3, #12
 800cd36:	041b      	lsls	r3, r3, #16
 800cd38:	0c1b      	lsrs	r3, r3, #16
 800cd3a:	697a      	ldr	r2, [r7, #20]
 800cd3c:	4313      	orrs	r3, r2
 800cd3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cd40:	693b      	ldr	r3, [r7, #16]
 800cd42:	22a0      	movs	r2, #160	; 0xa0
 800cd44:	4393      	bics	r3, r2
 800cd46:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800cd48:	68bb      	ldr	r3, [r7, #8]
 800cd4a:	011b      	lsls	r3, r3, #4
 800cd4c:	22a0      	movs	r2, #160	; 0xa0
 800cd4e:	4013      	ands	r3, r2
 800cd50:	693a      	ldr	r2, [r7, #16]
 800cd52:	4313      	orrs	r3, r2
 800cd54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	697a      	ldr	r2, [r7, #20]
 800cd5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	693a      	ldr	r2, [r7, #16]
 800cd60:	621a      	str	r2, [r3, #32]
}
 800cd62:	46c0      	nop			; (mov r8, r8)
 800cd64:	46bd      	mov	sp, r7
 800cd66:	b006      	add	sp, #24
 800cd68:	bd80      	pop	{r7, pc}
 800cd6a:	46c0      	nop			; (mov r8, r8)
 800cd6c:	fffffcff 	.word	0xfffffcff
 800cd70:	ffff0fff 	.word	0xffff0fff

0800cd74 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b086      	sub	sp, #24
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	60f8      	str	r0, [r7, #12]
 800cd7c:	60b9      	str	r1, [r7, #8]
 800cd7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	6a1b      	ldr	r3, [r3, #32]
 800cd84:	2210      	movs	r2, #16
 800cd86:	4393      	bics	r3, r2
 800cd88:	001a      	movs	r2, r3
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	699b      	ldr	r3, [r3, #24]
 800cd92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	6a1b      	ldr	r3, [r3, #32]
 800cd98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cd9a:	697b      	ldr	r3, [r7, #20]
 800cd9c:	4a0d      	ldr	r2, [pc, #52]	; (800cdd4 <TIM_TI2_ConfigInputStage+0x60>)
 800cd9e:	4013      	ands	r3, r2
 800cda0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	031b      	lsls	r3, r3, #12
 800cda6:	697a      	ldr	r2, [r7, #20]
 800cda8:	4313      	orrs	r3, r2
 800cdaa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cdac:	693b      	ldr	r3, [r7, #16]
 800cdae:	22a0      	movs	r2, #160	; 0xa0
 800cdb0:	4393      	bics	r3, r2
 800cdb2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cdb4:	68bb      	ldr	r3, [r7, #8]
 800cdb6:	011b      	lsls	r3, r3, #4
 800cdb8:	693a      	ldr	r2, [r7, #16]
 800cdba:	4313      	orrs	r3, r2
 800cdbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	697a      	ldr	r2, [r7, #20]
 800cdc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	693a      	ldr	r2, [r7, #16]
 800cdc8:	621a      	str	r2, [r3, #32]
}
 800cdca:	46c0      	nop			; (mov r8, r8)
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	b006      	add	sp, #24
 800cdd0:	bd80      	pop	{r7, pc}
 800cdd2:	46c0      	nop			; (mov r8, r8)
 800cdd4:	ffff0fff 	.word	0xffff0fff

0800cdd8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b086      	sub	sp, #24
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	60f8      	str	r0, [r7, #12]
 800cde0:	60b9      	str	r1, [r7, #8]
 800cde2:	607a      	str	r2, [r7, #4]
 800cde4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	6a1b      	ldr	r3, [r3, #32]
 800cdea:	4a19      	ldr	r2, [pc, #100]	; (800ce50 <TIM_TI3_SetConfig+0x78>)
 800cdec:	401a      	ands	r2, r3
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	69db      	ldr	r3, [r3, #28]
 800cdf6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	6a1b      	ldr	r3, [r3, #32]
 800cdfc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800cdfe:	697b      	ldr	r3, [r7, #20]
 800ce00:	2203      	movs	r2, #3
 800ce02:	4393      	bics	r3, r2
 800ce04:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800ce06:	697a      	ldr	r2, [r7, #20]
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	4313      	orrs	r3, r2
 800ce0c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800ce0e:	697b      	ldr	r3, [r7, #20]
 800ce10:	22f0      	movs	r2, #240	; 0xf0
 800ce12:	4393      	bics	r3, r2
 800ce14:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800ce16:	683b      	ldr	r3, [r7, #0]
 800ce18:	011b      	lsls	r3, r3, #4
 800ce1a:	22ff      	movs	r2, #255	; 0xff
 800ce1c:	4013      	ands	r3, r2
 800ce1e:	697a      	ldr	r2, [r7, #20]
 800ce20:	4313      	orrs	r3, r2
 800ce22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800ce24:	693b      	ldr	r3, [r7, #16]
 800ce26:	4a0b      	ldr	r2, [pc, #44]	; (800ce54 <TIM_TI3_SetConfig+0x7c>)
 800ce28:	4013      	ands	r3, r2
 800ce2a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800ce2c:	68bb      	ldr	r3, [r7, #8]
 800ce2e:	021a      	lsls	r2, r3, #8
 800ce30:	23a0      	movs	r3, #160	; 0xa0
 800ce32:	011b      	lsls	r3, r3, #4
 800ce34:	4013      	ands	r3, r2
 800ce36:	693a      	ldr	r2, [r7, #16]
 800ce38:	4313      	orrs	r3, r2
 800ce3a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	697a      	ldr	r2, [r7, #20]
 800ce40:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	693a      	ldr	r2, [r7, #16]
 800ce46:	621a      	str	r2, [r3, #32]
}
 800ce48:	46c0      	nop			; (mov r8, r8)
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	b006      	add	sp, #24
 800ce4e:	bd80      	pop	{r7, pc}
 800ce50:	fffffeff 	.word	0xfffffeff
 800ce54:	fffff5ff 	.word	0xfffff5ff

0800ce58 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b086      	sub	sp, #24
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	60f8      	str	r0, [r7, #12]
 800ce60:	60b9      	str	r1, [r7, #8]
 800ce62:	607a      	str	r2, [r7, #4]
 800ce64:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	6a1b      	ldr	r3, [r3, #32]
 800ce6a:	4a1a      	ldr	r2, [pc, #104]	; (800ced4 <TIM_TI4_SetConfig+0x7c>)
 800ce6c:	401a      	ands	r2, r3
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	69db      	ldr	r3, [r3, #28]
 800ce76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	6a1b      	ldr	r3, [r3, #32]
 800ce7c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800ce7e:	697b      	ldr	r3, [r7, #20]
 800ce80:	4a15      	ldr	r2, [pc, #84]	; (800ced8 <TIM_TI4_SetConfig+0x80>)
 800ce82:	4013      	ands	r3, r2
 800ce84:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	021b      	lsls	r3, r3, #8
 800ce8a:	697a      	ldr	r2, [r7, #20]
 800ce8c:	4313      	orrs	r3, r2
 800ce8e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800ce90:	697b      	ldr	r3, [r7, #20]
 800ce92:	4a12      	ldr	r2, [pc, #72]	; (800cedc <TIM_TI4_SetConfig+0x84>)
 800ce94:	4013      	ands	r3, r2
 800ce96:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800ce98:	683b      	ldr	r3, [r7, #0]
 800ce9a:	031b      	lsls	r3, r3, #12
 800ce9c:	041b      	lsls	r3, r3, #16
 800ce9e:	0c1b      	lsrs	r3, r3, #16
 800cea0:	697a      	ldr	r2, [r7, #20]
 800cea2:	4313      	orrs	r3, r2
 800cea4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800cea6:	693b      	ldr	r3, [r7, #16]
 800cea8:	4a0d      	ldr	r2, [pc, #52]	; (800cee0 <TIM_TI4_SetConfig+0x88>)
 800ceaa:	4013      	ands	r3, r2
 800ceac:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800ceae:	68bb      	ldr	r3, [r7, #8]
 800ceb0:	031a      	lsls	r2, r3, #12
 800ceb2:	23a0      	movs	r3, #160	; 0xa0
 800ceb4:	021b      	lsls	r3, r3, #8
 800ceb6:	4013      	ands	r3, r2
 800ceb8:	693a      	ldr	r2, [r7, #16]
 800ceba:	4313      	orrs	r3, r2
 800cebc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	697a      	ldr	r2, [r7, #20]
 800cec2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	693a      	ldr	r2, [r7, #16]
 800cec8:	621a      	str	r2, [r3, #32]
}
 800ceca:	46c0      	nop			; (mov r8, r8)
 800cecc:	46bd      	mov	sp, r7
 800cece:	b006      	add	sp, #24
 800ced0:	bd80      	pop	{r7, pc}
 800ced2:	46c0      	nop			; (mov r8, r8)
 800ced4:	ffffefff 	.word	0xffffefff
 800ced8:	fffffcff 	.word	0xfffffcff
 800cedc:	ffff0fff 	.word	0xffff0fff
 800cee0:	ffff5fff 	.word	0xffff5fff

0800cee4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b084      	sub	sp, #16
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
 800ceec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	689b      	ldr	r3, [r3, #8]
 800cef2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	4a08      	ldr	r2, [pc, #32]	; (800cf18 <TIM_ITRx_SetConfig+0x34>)
 800cef8:	4013      	ands	r3, r2
 800cefa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cefc:	683a      	ldr	r2, [r7, #0]
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	4313      	orrs	r3, r2
 800cf02:	2207      	movs	r2, #7
 800cf04:	4313      	orrs	r3, r2
 800cf06:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	68fa      	ldr	r2, [r7, #12]
 800cf0c:	609a      	str	r2, [r3, #8]
}
 800cf0e:	46c0      	nop			; (mov r8, r8)
 800cf10:	46bd      	mov	sp, r7
 800cf12:	b004      	add	sp, #16
 800cf14:	bd80      	pop	{r7, pc}
 800cf16:	46c0      	nop			; (mov r8, r8)
 800cf18:	ffcfff8f 	.word	0xffcfff8f

0800cf1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b086      	sub	sp, #24
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	60f8      	str	r0, [r7, #12]
 800cf24:	60b9      	str	r1, [r7, #8]
 800cf26:	607a      	str	r2, [r7, #4]
 800cf28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	689b      	ldr	r3, [r3, #8]
 800cf2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cf30:	697b      	ldr	r3, [r7, #20]
 800cf32:	4a09      	ldr	r2, [pc, #36]	; (800cf58 <TIM_ETR_SetConfig+0x3c>)
 800cf34:	4013      	ands	r3, r2
 800cf36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	021a      	lsls	r2, r3, #8
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	431a      	orrs	r2, r3
 800cf40:	68bb      	ldr	r3, [r7, #8]
 800cf42:	4313      	orrs	r3, r2
 800cf44:	697a      	ldr	r2, [r7, #20]
 800cf46:	4313      	orrs	r3, r2
 800cf48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	697a      	ldr	r2, [r7, #20]
 800cf4e:	609a      	str	r2, [r3, #8]
}
 800cf50:	46c0      	nop			; (mov r8, r8)
 800cf52:	46bd      	mov	sp, r7
 800cf54:	b006      	add	sp, #24
 800cf56:	bd80      	pop	{r7, pc}
 800cf58:	ffff00ff 	.word	0xffff00ff

0800cf5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b086      	sub	sp, #24
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	60f8      	str	r0, [r7, #12]
 800cf64:	60b9      	str	r1, [r7, #8]
 800cf66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cf68:	68bb      	ldr	r3, [r7, #8]
 800cf6a:	221f      	movs	r2, #31
 800cf6c:	4013      	ands	r3, r2
 800cf6e:	2201      	movs	r2, #1
 800cf70:	409a      	lsls	r2, r3
 800cf72:	0013      	movs	r3, r2
 800cf74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	6a1b      	ldr	r3, [r3, #32]
 800cf7a:	697a      	ldr	r2, [r7, #20]
 800cf7c:	43d2      	mvns	r2, r2
 800cf7e:	401a      	ands	r2, r3
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	6a1a      	ldr	r2, [r3, #32]
 800cf88:	68bb      	ldr	r3, [r7, #8]
 800cf8a:	211f      	movs	r1, #31
 800cf8c:	400b      	ands	r3, r1
 800cf8e:	6879      	ldr	r1, [r7, #4]
 800cf90:	4099      	lsls	r1, r3
 800cf92:	000b      	movs	r3, r1
 800cf94:	431a      	orrs	r2, r3
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	621a      	str	r2, [r3, #32]
}
 800cf9a:	46c0      	nop			; (mov r8, r8)
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	b006      	add	sp, #24
 800cfa0:	bd80      	pop	{r7, pc}
	...

0800cfa4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b084      	sub	sp, #16
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
 800cfac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	223c      	movs	r2, #60	; 0x3c
 800cfb2:	5c9b      	ldrb	r3, [r3, r2]
 800cfb4:	2b01      	cmp	r3, #1
 800cfb6:	d101      	bne.n	800cfbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cfb8:	2302      	movs	r3, #2
 800cfba:	e04f      	b.n	800d05c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	223c      	movs	r2, #60	; 0x3c
 800cfc0:	2101      	movs	r1, #1
 800cfc2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	223d      	movs	r2, #61	; 0x3d
 800cfc8:	2102      	movs	r1, #2
 800cfca:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	685b      	ldr	r3, [r3, #4]
 800cfd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	689b      	ldr	r3, [r3, #8]
 800cfda:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	4a20      	ldr	r2, [pc, #128]	; (800d064 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800cfe2:	4293      	cmp	r3, r2
 800cfe4:	d108      	bne.n	800cff8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	4a1f      	ldr	r2, [pc, #124]	; (800d068 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800cfea:	4013      	ands	r3, r2
 800cfec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cfee:	683b      	ldr	r3, [r7, #0]
 800cff0:	685b      	ldr	r3, [r3, #4]
 800cff2:	68fa      	ldr	r2, [r7, #12]
 800cff4:	4313      	orrs	r3, r2
 800cff6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	2270      	movs	r2, #112	; 0x70
 800cffc:	4393      	bics	r3, r2
 800cffe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d000:	683b      	ldr	r3, [r7, #0]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	68fa      	ldr	r2, [r7, #12]
 800d006:	4313      	orrs	r3, r2
 800d008:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	68fa      	ldr	r2, [r7, #12]
 800d010:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	4a13      	ldr	r2, [pc, #76]	; (800d064 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800d018:	4293      	cmp	r3, r2
 800d01a:	d009      	beq.n	800d030 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	4a12      	ldr	r2, [pc, #72]	; (800d06c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800d022:	4293      	cmp	r3, r2
 800d024:	d004      	beq.n	800d030 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	4a11      	ldr	r2, [pc, #68]	; (800d070 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800d02c:	4293      	cmp	r3, r2
 800d02e:	d10c      	bne.n	800d04a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d030:	68bb      	ldr	r3, [r7, #8]
 800d032:	2280      	movs	r2, #128	; 0x80
 800d034:	4393      	bics	r3, r2
 800d036:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d038:	683b      	ldr	r3, [r7, #0]
 800d03a:	689b      	ldr	r3, [r3, #8]
 800d03c:	68ba      	ldr	r2, [r7, #8]
 800d03e:	4313      	orrs	r3, r2
 800d040:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	68ba      	ldr	r2, [r7, #8]
 800d048:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	223d      	movs	r2, #61	; 0x3d
 800d04e:	2101      	movs	r1, #1
 800d050:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	223c      	movs	r2, #60	; 0x3c
 800d056:	2100      	movs	r1, #0
 800d058:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d05a:	2300      	movs	r3, #0
}
 800d05c:	0018      	movs	r0, r3
 800d05e:	46bd      	mov	sp, r7
 800d060:	b004      	add	sp, #16
 800d062:	bd80      	pop	{r7, pc}
 800d064:	40012c00 	.word	0x40012c00
 800d068:	ff0fffff 	.word	0xff0fffff
 800d06c:	40000400 	.word	0x40000400
 800d070:	40014000 	.word	0x40014000

0800d074 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b082      	sub	sp, #8
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d07c:	46c0      	nop			; (mov r8, r8)
 800d07e:	46bd      	mov	sp, r7
 800d080:	b002      	add	sp, #8
 800d082:	bd80      	pop	{r7, pc}

0800d084 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d084:	b580      	push	{r7, lr}
 800d086:	b082      	sub	sp, #8
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d08c:	46c0      	nop			; (mov r8, r8)
 800d08e:	46bd      	mov	sp, r7
 800d090:	b002      	add	sp, #8
 800d092:	bd80      	pop	{r7, pc}

0800d094 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b082      	sub	sp, #8
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d09c:	46c0      	nop			; (mov r8, r8)
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	b002      	add	sp, #8
 800d0a2:	bd80      	pop	{r7, pc}

0800d0a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b082      	sub	sp, #8
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d101      	bne.n	800d0b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d0b2:	2301      	movs	r3, #1
 800d0b4:	e046      	b.n	800d144 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	2288      	movs	r2, #136	; 0x88
 800d0ba:	589b      	ldr	r3, [r3, r2]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d107      	bne.n	800d0d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	2284      	movs	r2, #132	; 0x84
 800d0c4:	2100      	movs	r1, #0
 800d0c6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	0018      	movs	r0, r3
 800d0cc:	f7fb fdaa 	bl	8008c24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2288      	movs	r2, #136	; 0x88
 800d0d4:	2124      	movs	r1, #36	; 0x24
 800d0d6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	681a      	ldr	r2, [r3, #0]
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	2101      	movs	r1, #1
 800d0e4:	438a      	bics	r2, r1
 800d0e6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	0018      	movs	r0, r3
 800d0ec:	f000 fc5e 	bl	800d9ac <UART_SetConfig>
 800d0f0:	0003      	movs	r3, r0
 800d0f2:	2b01      	cmp	r3, #1
 800d0f4:	d101      	bne.n	800d0fa <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800d0f6:	2301      	movs	r3, #1
 800d0f8:	e024      	b.n	800d144 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d003      	beq.n	800d10a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	0018      	movs	r0, r3
 800d106:	f000 fdf5 	bl	800dcf4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	685a      	ldr	r2, [r3, #4]
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	490d      	ldr	r1, [pc, #52]	; (800d14c <HAL_UART_Init+0xa8>)
 800d116:	400a      	ands	r2, r1
 800d118:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	689a      	ldr	r2, [r3, #8]
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	212a      	movs	r1, #42	; 0x2a
 800d126:	438a      	bics	r2, r1
 800d128:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	681a      	ldr	r2, [r3, #0]
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	2101      	movs	r1, #1
 800d136:	430a      	orrs	r2, r1
 800d138:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	0018      	movs	r0, r3
 800d13e:	f000 fe8d 	bl	800de5c <UART_CheckIdleState>
 800d142:	0003      	movs	r3, r0
}
 800d144:	0018      	movs	r0, r3
 800d146:	46bd      	mov	sp, r7
 800d148:	b002      	add	sp, #8
 800d14a:	bd80      	pop	{r7, pc}
 800d14c:	ffffb7ff 	.word	0xffffb7ff

0800d150 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b08a      	sub	sp, #40	; 0x28
 800d154:	af02      	add	r7, sp, #8
 800d156:	60f8      	str	r0, [r7, #12]
 800d158:	60b9      	str	r1, [r7, #8]
 800d15a:	603b      	str	r3, [r7, #0]
 800d15c:	1dbb      	adds	r3, r7, #6
 800d15e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	2288      	movs	r2, #136	; 0x88
 800d164:	589b      	ldr	r3, [r3, r2]
 800d166:	2b20      	cmp	r3, #32
 800d168:	d000      	beq.n	800d16c <HAL_UART_Transmit+0x1c>
 800d16a:	e088      	b.n	800d27e <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 800d16c:	68bb      	ldr	r3, [r7, #8]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d003      	beq.n	800d17a <HAL_UART_Transmit+0x2a>
 800d172:	1dbb      	adds	r3, r7, #6
 800d174:	881b      	ldrh	r3, [r3, #0]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d101      	bne.n	800d17e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800d17a:	2301      	movs	r3, #1
 800d17c:	e080      	b.n	800d280 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	689a      	ldr	r2, [r3, #8]
 800d182:	2380      	movs	r3, #128	; 0x80
 800d184:	015b      	lsls	r3, r3, #5
 800d186:	429a      	cmp	r2, r3
 800d188:	d109      	bne.n	800d19e <HAL_UART_Transmit+0x4e>
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	691b      	ldr	r3, [r3, #16]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d105      	bne.n	800d19e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800d192:	68bb      	ldr	r3, [r7, #8]
 800d194:	2201      	movs	r2, #1
 800d196:	4013      	ands	r3, r2
 800d198:	d001      	beq.n	800d19e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800d19a:	2301      	movs	r3, #1
 800d19c:	e070      	b.n	800d280 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	2290      	movs	r2, #144	; 0x90
 800d1a2:	2100      	movs	r1, #0
 800d1a4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	2288      	movs	r2, #136	; 0x88
 800d1aa:	2121      	movs	r1, #33	; 0x21
 800d1ac:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d1ae:	f7fc fd87 	bl	8009cc0 <HAL_GetTick>
 800d1b2:	0003      	movs	r3, r0
 800d1b4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	1dba      	adds	r2, r7, #6
 800d1ba:	2154      	movs	r1, #84	; 0x54
 800d1bc:	8812      	ldrh	r2, [r2, #0]
 800d1be:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	1dba      	adds	r2, r7, #6
 800d1c4:	2156      	movs	r1, #86	; 0x56
 800d1c6:	8812      	ldrh	r2, [r2, #0]
 800d1c8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	689a      	ldr	r2, [r3, #8]
 800d1ce:	2380      	movs	r3, #128	; 0x80
 800d1d0:	015b      	lsls	r3, r3, #5
 800d1d2:	429a      	cmp	r2, r3
 800d1d4:	d108      	bne.n	800d1e8 <HAL_UART_Transmit+0x98>
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	691b      	ldr	r3, [r3, #16]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d104      	bne.n	800d1e8 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800d1de:	2300      	movs	r3, #0
 800d1e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d1e2:	68bb      	ldr	r3, [r7, #8]
 800d1e4:	61bb      	str	r3, [r7, #24]
 800d1e6:	e003      	b.n	800d1f0 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800d1e8:	68bb      	ldr	r3, [r7, #8]
 800d1ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d1f0:	e02c      	b.n	800d24c <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d1f2:	697a      	ldr	r2, [r7, #20]
 800d1f4:	68f8      	ldr	r0, [r7, #12]
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	9300      	str	r3, [sp, #0]
 800d1fa:	0013      	movs	r3, r2
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	2180      	movs	r1, #128	; 0x80
 800d200:	f000 fe7a 	bl	800def8 <UART_WaitOnFlagUntilTimeout>
 800d204:	1e03      	subs	r3, r0, #0
 800d206:	d001      	beq.n	800d20c <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 800d208:	2303      	movs	r3, #3
 800d20a:	e039      	b.n	800d280 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 800d20c:	69fb      	ldr	r3, [r7, #28]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d10b      	bne.n	800d22a <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d212:	69bb      	ldr	r3, [r7, #24]
 800d214:	881b      	ldrh	r3, [r3, #0]
 800d216:	001a      	movs	r2, r3
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	05d2      	lsls	r2, r2, #23
 800d21e:	0dd2      	lsrs	r2, r2, #23
 800d220:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d222:	69bb      	ldr	r3, [r7, #24]
 800d224:	3302      	adds	r3, #2
 800d226:	61bb      	str	r3, [r7, #24]
 800d228:	e007      	b.n	800d23a <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d22a:	69fb      	ldr	r3, [r7, #28]
 800d22c:	781a      	ldrb	r2, [r3, #0]
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d234:	69fb      	ldr	r3, [r7, #28]
 800d236:	3301      	adds	r3, #1
 800d238:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	2256      	movs	r2, #86	; 0x56
 800d23e:	5a9b      	ldrh	r3, [r3, r2]
 800d240:	b29b      	uxth	r3, r3
 800d242:	3b01      	subs	r3, #1
 800d244:	b299      	uxth	r1, r3
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	2256      	movs	r2, #86	; 0x56
 800d24a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	2256      	movs	r2, #86	; 0x56
 800d250:	5a9b      	ldrh	r3, [r3, r2]
 800d252:	b29b      	uxth	r3, r3
 800d254:	2b00      	cmp	r3, #0
 800d256:	d1cc      	bne.n	800d1f2 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d258:	697a      	ldr	r2, [r7, #20]
 800d25a:	68f8      	ldr	r0, [r7, #12]
 800d25c:	683b      	ldr	r3, [r7, #0]
 800d25e:	9300      	str	r3, [sp, #0]
 800d260:	0013      	movs	r3, r2
 800d262:	2200      	movs	r2, #0
 800d264:	2140      	movs	r1, #64	; 0x40
 800d266:	f000 fe47 	bl	800def8 <UART_WaitOnFlagUntilTimeout>
 800d26a:	1e03      	subs	r3, r0, #0
 800d26c:	d001      	beq.n	800d272 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 800d26e:	2303      	movs	r3, #3
 800d270:	e006      	b.n	800d280 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	2288      	movs	r2, #136	; 0x88
 800d276:	2120      	movs	r1, #32
 800d278:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800d27a:	2300      	movs	r3, #0
 800d27c:	e000      	b.n	800d280 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 800d27e:	2302      	movs	r3, #2
  }
}
 800d280:	0018      	movs	r0, r3
 800d282:	46bd      	mov	sp, r7
 800d284:	b008      	add	sp, #32
 800d286:	bd80      	pop	{r7, pc}

0800d288 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b088      	sub	sp, #32
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	60f8      	str	r0, [r7, #12]
 800d290:	60b9      	str	r1, [r7, #8]
 800d292:	1dbb      	adds	r3, r7, #6
 800d294:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	228c      	movs	r2, #140	; 0x8c
 800d29a:	589b      	ldr	r3, [r3, r2]
 800d29c:	2b20      	cmp	r3, #32
 800d29e:	d145      	bne.n	800d32c <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 800d2a0:	68bb      	ldr	r3, [r7, #8]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d003      	beq.n	800d2ae <HAL_UART_Receive_IT+0x26>
 800d2a6:	1dbb      	adds	r3, r7, #6
 800d2a8:	881b      	ldrh	r3, [r3, #0]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d101      	bne.n	800d2b2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800d2ae:	2301      	movs	r3, #1
 800d2b0:	e03d      	b.n	800d32e <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	689a      	ldr	r2, [r3, #8]
 800d2b6:	2380      	movs	r3, #128	; 0x80
 800d2b8:	015b      	lsls	r3, r3, #5
 800d2ba:	429a      	cmp	r2, r3
 800d2bc:	d109      	bne.n	800d2d2 <HAL_UART_Receive_IT+0x4a>
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	691b      	ldr	r3, [r3, #16]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d105      	bne.n	800d2d2 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800d2c6:	68bb      	ldr	r3, [r7, #8]
 800d2c8:	2201      	movs	r2, #1
 800d2ca:	4013      	ands	r3, r2
 800d2cc:	d001      	beq.n	800d2d2 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800d2ce:	2301      	movs	r3, #1
 800d2d0:	e02d      	b.n	800d32e <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	685a      	ldr	r2, [r3, #4]
 800d2de:	2380      	movs	r3, #128	; 0x80
 800d2e0:	041b      	lsls	r3, r3, #16
 800d2e2:	4013      	ands	r3, r2
 800d2e4:	d019      	beq.n	800d31a <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d2e6:	f3ef 8310 	mrs	r3, PRIMASK
 800d2ea:	613b      	str	r3, [r7, #16]
  return(result);
 800d2ec:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d2ee:	61fb      	str	r3, [r7, #28]
 800d2f0:	2301      	movs	r3, #1
 800d2f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d2f4:	697b      	ldr	r3, [r7, #20]
 800d2f6:	f383 8810 	msr	PRIMASK, r3
}
 800d2fa:	46c0      	nop			; (mov r8, r8)
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	681a      	ldr	r2, [r3, #0]
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	2180      	movs	r1, #128	; 0x80
 800d308:	04c9      	lsls	r1, r1, #19
 800d30a:	430a      	orrs	r2, r1
 800d30c:	601a      	str	r2, [r3, #0]
 800d30e:	69fb      	ldr	r3, [r7, #28]
 800d310:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d312:	69bb      	ldr	r3, [r7, #24]
 800d314:	f383 8810 	msr	PRIMASK, r3
}
 800d318:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800d31a:	1dbb      	adds	r3, r7, #6
 800d31c:	881a      	ldrh	r2, [r3, #0]
 800d31e:	68b9      	ldr	r1, [r7, #8]
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	0018      	movs	r0, r3
 800d324:	f000 feb0 	bl	800e088 <UART_Start_Receive_IT>
 800d328:	0003      	movs	r3, r0
 800d32a:	e000      	b.n	800d32e <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 800d32c:	2302      	movs	r3, #2
  }
}
 800d32e:	0018      	movs	r0, r3
 800d330:	46bd      	mov	sp, r7
 800d332:	b008      	add	sp, #32
 800d334:	bd80      	pop	{r7, pc}
	...

0800d338 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d338:	b5b0      	push	{r4, r5, r7, lr}
 800d33a:	b0aa      	sub	sp, #168	; 0xa8
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	69db      	ldr	r3, [r3, #28]
 800d346:	22a4      	movs	r2, #164	; 0xa4
 800d348:	18b9      	adds	r1, r7, r2
 800d34a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	20a0      	movs	r0, #160	; 0xa0
 800d354:	1839      	adds	r1, r7, r0
 800d356:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	689b      	ldr	r3, [r3, #8]
 800d35e:	249c      	movs	r4, #156	; 0x9c
 800d360:	1939      	adds	r1, r7, r4
 800d362:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d364:	0011      	movs	r1, r2
 800d366:	18bb      	adds	r3, r7, r2
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	4aa2      	ldr	r2, [pc, #648]	; (800d5f4 <HAL_UART_IRQHandler+0x2bc>)
 800d36c:	4013      	ands	r3, r2
 800d36e:	2298      	movs	r2, #152	; 0x98
 800d370:	18bd      	adds	r5, r7, r2
 800d372:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800d374:	18bb      	adds	r3, r7, r2
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d11a      	bne.n	800d3b2 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d37c:	187b      	adds	r3, r7, r1
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	2220      	movs	r2, #32
 800d382:	4013      	ands	r3, r2
 800d384:	d015      	beq.n	800d3b2 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d386:	183b      	adds	r3, r7, r0
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	2220      	movs	r2, #32
 800d38c:	4013      	ands	r3, r2
 800d38e:	d105      	bne.n	800d39c <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d390:	193b      	adds	r3, r7, r4
 800d392:	681a      	ldr	r2, [r3, #0]
 800d394:	2380      	movs	r3, #128	; 0x80
 800d396:	055b      	lsls	r3, r3, #21
 800d398:	4013      	ands	r3, r2
 800d39a:	d00a      	beq.n	800d3b2 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d100      	bne.n	800d3a6 <HAL_UART_IRQHandler+0x6e>
 800d3a4:	e2dc      	b.n	800d960 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d3aa:	687a      	ldr	r2, [r7, #4]
 800d3ac:	0010      	movs	r0, r2
 800d3ae:	4798      	blx	r3
      }
      return;
 800d3b0:	e2d6      	b.n	800d960 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d3b2:	2398      	movs	r3, #152	; 0x98
 800d3b4:	18fb      	adds	r3, r7, r3
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d100      	bne.n	800d3be <HAL_UART_IRQHandler+0x86>
 800d3bc:	e122      	b.n	800d604 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d3be:	239c      	movs	r3, #156	; 0x9c
 800d3c0:	18fb      	adds	r3, r7, r3
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	4a8c      	ldr	r2, [pc, #560]	; (800d5f8 <HAL_UART_IRQHandler+0x2c0>)
 800d3c6:	4013      	ands	r3, r2
 800d3c8:	d106      	bne.n	800d3d8 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d3ca:	23a0      	movs	r3, #160	; 0xa0
 800d3cc:	18fb      	adds	r3, r7, r3
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	4a8a      	ldr	r2, [pc, #552]	; (800d5fc <HAL_UART_IRQHandler+0x2c4>)
 800d3d2:	4013      	ands	r3, r2
 800d3d4:	d100      	bne.n	800d3d8 <HAL_UART_IRQHandler+0xa0>
 800d3d6:	e115      	b.n	800d604 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d3d8:	23a4      	movs	r3, #164	; 0xa4
 800d3da:	18fb      	adds	r3, r7, r3
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	2201      	movs	r2, #1
 800d3e0:	4013      	ands	r3, r2
 800d3e2:	d012      	beq.n	800d40a <HAL_UART_IRQHandler+0xd2>
 800d3e4:	23a0      	movs	r3, #160	; 0xa0
 800d3e6:	18fb      	adds	r3, r7, r3
 800d3e8:	681a      	ldr	r2, [r3, #0]
 800d3ea:	2380      	movs	r3, #128	; 0x80
 800d3ec:	005b      	lsls	r3, r3, #1
 800d3ee:	4013      	ands	r3, r2
 800d3f0:	d00b      	beq.n	800d40a <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	2201      	movs	r2, #1
 800d3f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	2290      	movs	r2, #144	; 0x90
 800d3fe:	589b      	ldr	r3, [r3, r2]
 800d400:	2201      	movs	r2, #1
 800d402:	431a      	orrs	r2, r3
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	2190      	movs	r1, #144	; 0x90
 800d408:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d40a:	23a4      	movs	r3, #164	; 0xa4
 800d40c:	18fb      	adds	r3, r7, r3
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	2202      	movs	r2, #2
 800d412:	4013      	ands	r3, r2
 800d414:	d011      	beq.n	800d43a <HAL_UART_IRQHandler+0x102>
 800d416:	239c      	movs	r3, #156	; 0x9c
 800d418:	18fb      	adds	r3, r7, r3
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	2201      	movs	r2, #1
 800d41e:	4013      	ands	r3, r2
 800d420:	d00b      	beq.n	800d43a <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	2202      	movs	r2, #2
 800d428:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	2290      	movs	r2, #144	; 0x90
 800d42e:	589b      	ldr	r3, [r3, r2]
 800d430:	2204      	movs	r2, #4
 800d432:	431a      	orrs	r2, r3
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	2190      	movs	r1, #144	; 0x90
 800d438:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d43a:	23a4      	movs	r3, #164	; 0xa4
 800d43c:	18fb      	adds	r3, r7, r3
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	2204      	movs	r2, #4
 800d442:	4013      	ands	r3, r2
 800d444:	d011      	beq.n	800d46a <HAL_UART_IRQHandler+0x132>
 800d446:	239c      	movs	r3, #156	; 0x9c
 800d448:	18fb      	adds	r3, r7, r3
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	2201      	movs	r2, #1
 800d44e:	4013      	ands	r3, r2
 800d450:	d00b      	beq.n	800d46a <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	2204      	movs	r2, #4
 800d458:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	2290      	movs	r2, #144	; 0x90
 800d45e:	589b      	ldr	r3, [r3, r2]
 800d460:	2202      	movs	r2, #2
 800d462:	431a      	orrs	r2, r3
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	2190      	movs	r1, #144	; 0x90
 800d468:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d46a:	23a4      	movs	r3, #164	; 0xa4
 800d46c:	18fb      	adds	r3, r7, r3
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	2208      	movs	r2, #8
 800d472:	4013      	ands	r3, r2
 800d474:	d017      	beq.n	800d4a6 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d476:	23a0      	movs	r3, #160	; 0xa0
 800d478:	18fb      	adds	r3, r7, r3
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	2220      	movs	r2, #32
 800d47e:	4013      	ands	r3, r2
 800d480:	d105      	bne.n	800d48e <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d482:	239c      	movs	r3, #156	; 0x9c
 800d484:	18fb      	adds	r3, r7, r3
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	4a5b      	ldr	r2, [pc, #364]	; (800d5f8 <HAL_UART_IRQHandler+0x2c0>)
 800d48a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d48c:	d00b      	beq.n	800d4a6 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	2208      	movs	r2, #8
 800d494:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	2290      	movs	r2, #144	; 0x90
 800d49a:	589b      	ldr	r3, [r3, r2]
 800d49c:	2208      	movs	r2, #8
 800d49e:	431a      	orrs	r2, r3
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	2190      	movs	r1, #144	; 0x90
 800d4a4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d4a6:	23a4      	movs	r3, #164	; 0xa4
 800d4a8:	18fb      	adds	r3, r7, r3
 800d4aa:	681a      	ldr	r2, [r3, #0]
 800d4ac:	2380      	movs	r3, #128	; 0x80
 800d4ae:	011b      	lsls	r3, r3, #4
 800d4b0:	4013      	ands	r3, r2
 800d4b2:	d013      	beq.n	800d4dc <HAL_UART_IRQHandler+0x1a4>
 800d4b4:	23a0      	movs	r3, #160	; 0xa0
 800d4b6:	18fb      	adds	r3, r7, r3
 800d4b8:	681a      	ldr	r2, [r3, #0]
 800d4ba:	2380      	movs	r3, #128	; 0x80
 800d4bc:	04db      	lsls	r3, r3, #19
 800d4be:	4013      	ands	r3, r2
 800d4c0:	d00c      	beq.n	800d4dc <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	2280      	movs	r2, #128	; 0x80
 800d4c8:	0112      	lsls	r2, r2, #4
 800d4ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	2290      	movs	r2, #144	; 0x90
 800d4d0:	589b      	ldr	r3, [r3, r2]
 800d4d2:	2220      	movs	r2, #32
 800d4d4:	431a      	orrs	r2, r3
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	2190      	movs	r1, #144	; 0x90
 800d4da:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	2290      	movs	r2, #144	; 0x90
 800d4e0:	589b      	ldr	r3, [r3, r2]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d100      	bne.n	800d4e8 <HAL_UART_IRQHandler+0x1b0>
 800d4e6:	e23d      	b.n	800d964 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d4e8:	23a4      	movs	r3, #164	; 0xa4
 800d4ea:	18fb      	adds	r3, r7, r3
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	2220      	movs	r2, #32
 800d4f0:	4013      	ands	r3, r2
 800d4f2:	d015      	beq.n	800d520 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d4f4:	23a0      	movs	r3, #160	; 0xa0
 800d4f6:	18fb      	adds	r3, r7, r3
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	2220      	movs	r2, #32
 800d4fc:	4013      	ands	r3, r2
 800d4fe:	d106      	bne.n	800d50e <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d500:	239c      	movs	r3, #156	; 0x9c
 800d502:	18fb      	adds	r3, r7, r3
 800d504:	681a      	ldr	r2, [r3, #0]
 800d506:	2380      	movs	r3, #128	; 0x80
 800d508:	055b      	lsls	r3, r3, #21
 800d50a:	4013      	ands	r3, r2
 800d50c:	d008      	beq.n	800d520 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d512:	2b00      	cmp	r3, #0
 800d514:	d004      	beq.n	800d520 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d51a:	687a      	ldr	r2, [r7, #4]
 800d51c:	0010      	movs	r0, r2
 800d51e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	2290      	movs	r2, #144	; 0x90
 800d524:	589b      	ldr	r3, [r3, r2]
 800d526:	2194      	movs	r1, #148	; 0x94
 800d528:	187a      	adds	r2, r7, r1
 800d52a:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	689b      	ldr	r3, [r3, #8]
 800d532:	2240      	movs	r2, #64	; 0x40
 800d534:	4013      	ands	r3, r2
 800d536:	2b40      	cmp	r3, #64	; 0x40
 800d538:	d004      	beq.n	800d544 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d53a:	187b      	adds	r3, r7, r1
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	2228      	movs	r2, #40	; 0x28
 800d540:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d542:	d04c      	beq.n	800d5de <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	0018      	movs	r0, r3
 800d548:	f000 fec2 	bl	800e2d0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	689b      	ldr	r3, [r3, #8]
 800d552:	2240      	movs	r2, #64	; 0x40
 800d554:	4013      	ands	r3, r2
 800d556:	2b40      	cmp	r3, #64	; 0x40
 800d558:	d13c      	bne.n	800d5d4 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d55a:	f3ef 8310 	mrs	r3, PRIMASK
 800d55e:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800d560:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d562:	2090      	movs	r0, #144	; 0x90
 800d564:	183a      	adds	r2, r7, r0
 800d566:	6013      	str	r3, [r2, #0]
 800d568:	2301      	movs	r3, #1
 800d56a:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d56c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d56e:	f383 8810 	msr	PRIMASK, r3
}
 800d572:	46c0      	nop			; (mov r8, r8)
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	689a      	ldr	r2, [r3, #8]
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	2140      	movs	r1, #64	; 0x40
 800d580:	438a      	bics	r2, r1
 800d582:	609a      	str	r2, [r3, #8]
 800d584:	183b      	adds	r3, r7, r0
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d58a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d58c:	f383 8810 	msr	PRIMASK, r3
}
 800d590:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	2280      	movs	r2, #128	; 0x80
 800d596:	589b      	ldr	r3, [r3, r2]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d016      	beq.n	800d5ca <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	2280      	movs	r2, #128	; 0x80
 800d5a0:	589b      	ldr	r3, [r3, r2]
 800d5a2:	4a17      	ldr	r2, [pc, #92]	; (800d600 <HAL_UART_IRQHandler+0x2c8>)
 800d5a4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	2280      	movs	r2, #128	; 0x80
 800d5aa:	589b      	ldr	r3, [r3, r2]
 800d5ac:	0018      	movs	r0, r3
 800d5ae:	f7fc fcf5 	bl	8009f9c <HAL_DMA_Abort_IT>
 800d5b2:	1e03      	subs	r3, r0, #0
 800d5b4:	d01c      	beq.n	800d5f0 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	2280      	movs	r2, #128	; 0x80
 800d5ba:	589b      	ldr	r3, [r3, r2]
 800d5bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5be:	687a      	ldr	r2, [r7, #4]
 800d5c0:	2180      	movs	r1, #128	; 0x80
 800d5c2:	5852      	ldr	r2, [r2, r1]
 800d5c4:	0010      	movs	r0, r2
 800d5c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d5c8:	e012      	b.n	800d5f0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	0018      	movs	r0, r3
 800d5ce:	f7f6 fffd 	bl	80045cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d5d2:	e00d      	b.n	800d5f0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	0018      	movs	r0, r3
 800d5d8:	f7f6 fff8 	bl	80045cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d5dc:	e008      	b.n	800d5f0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	0018      	movs	r0, r3
 800d5e2:	f7f6 fff3 	bl	80045cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	2290      	movs	r2, #144	; 0x90
 800d5ea:	2100      	movs	r1, #0
 800d5ec:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800d5ee:	e1b9      	b.n	800d964 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d5f0:	46c0      	nop			; (mov r8, r8)
    return;
 800d5f2:	e1b7      	b.n	800d964 <HAL_UART_IRQHandler+0x62c>
 800d5f4:	0000080f 	.word	0x0000080f
 800d5f8:	10000001 	.word	0x10000001
 800d5fc:	04000120 	.word	0x04000120
 800d600:	0800e39d 	.word	0x0800e39d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d608:	2b01      	cmp	r3, #1
 800d60a:	d000      	beq.n	800d60e <HAL_UART_IRQHandler+0x2d6>
 800d60c:	e13e      	b.n	800d88c <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d60e:	23a4      	movs	r3, #164	; 0xa4
 800d610:	18fb      	adds	r3, r7, r3
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	2210      	movs	r2, #16
 800d616:	4013      	ands	r3, r2
 800d618:	d100      	bne.n	800d61c <HAL_UART_IRQHandler+0x2e4>
 800d61a:	e137      	b.n	800d88c <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d61c:	23a0      	movs	r3, #160	; 0xa0
 800d61e:	18fb      	adds	r3, r7, r3
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	2210      	movs	r2, #16
 800d624:	4013      	ands	r3, r2
 800d626:	d100      	bne.n	800d62a <HAL_UART_IRQHandler+0x2f2>
 800d628:	e130      	b.n	800d88c <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	2210      	movs	r2, #16
 800d630:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	689b      	ldr	r3, [r3, #8]
 800d638:	2240      	movs	r2, #64	; 0x40
 800d63a:	4013      	ands	r3, r2
 800d63c:	2b40      	cmp	r3, #64	; 0x40
 800d63e:	d000      	beq.n	800d642 <HAL_UART_IRQHandler+0x30a>
 800d640:	e0a4      	b.n	800d78c <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	2280      	movs	r2, #128	; 0x80
 800d646:	589b      	ldr	r3, [r3, r2]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	685a      	ldr	r2, [r3, #4]
 800d64c:	217e      	movs	r1, #126	; 0x7e
 800d64e:	187b      	adds	r3, r7, r1
 800d650:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800d652:	187b      	adds	r3, r7, r1
 800d654:	881b      	ldrh	r3, [r3, #0]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d100      	bne.n	800d65c <HAL_UART_IRQHandler+0x324>
 800d65a:	e185      	b.n	800d968 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	225c      	movs	r2, #92	; 0x5c
 800d660:	5a9b      	ldrh	r3, [r3, r2]
 800d662:	187a      	adds	r2, r7, r1
 800d664:	8812      	ldrh	r2, [r2, #0]
 800d666:	429a      	cmp	r2, r3
 800d668:	d300      	bcc.n	800d66c <HAL_UART_IRQHandler+0x334>
 800d66a:	e17d      	b.n	800d968 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	187a      	adds	r2, r7, r1
 800d670:	215e      	movs	r1, #94	; 0x5e
 800d672:	8812      	ldrh	r2, [r2, #0]
 800d674:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	2280      	movs	r2, #128	; 0x80
 800d67a:	589b      	ldr	r3, [r3, r2]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	2220      	movs	r2, #32
 800d682:	4013      	ands	r3, r2
 800d684:	d170      	bne.n	800d768 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d686:	f3ef 8310 	mrs	r3, PRIMASK
 800d68a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800d68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d68e:	67bb      	str	r3, [r7, #120]	; 0x78
 800d690:	2301      	movs	r3, #1
 800d692:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d696:	f383 8810 	msr	PRIMASK, r3
}
 800d69a:	46c0      	nop			; (mov r8, r8)
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	681a      	ldr	r2, [r3, #0]
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	49b4      	ldr	r1, [pc, #720]	; (800d978 <HAL_UART_IRQHandler+0x640>)
 800d6a8:	400a      	ands	r2, r1
 800d6aa:	601a      	str	r2, [r3, #0]
 800d6ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d6ae:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d6b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6b2:	f383 8810 	msr	PRIMASK, r3
}
 800d6b6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d6b8:	f3ef 8310 	mrs	r3, PRIMASK
 800d6bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800d6be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d6c0:	677b      	str	r3, [r7, #116]	; 0x74
 800d6c2:	2301      	movs	r3, #1
 800d6c4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d6c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6c8:	f383 8810 	msr	PRIMASK, r3
}
 800d6cc:	46c0      	nop			; (mov r8, r8)
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	689a      	ldr	r2, [r3, #8]
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	2101      	movs	r1, #1
 800d6da:	438a      	bics	r2, r1
 800d6dc:	609a      	str	r2, [r3, #8]
 800d6de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d6e0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d6e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d6e4:	f383 8810 	msr	PRIMASK, r3
}
 800d6e8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d6ea:	f3ef 8310 	mrs	r3, PRIMASK
 800d6ee:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800d6f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d6f2:	673b      	str	r3, [r7, #112]	; 0x70
 800d6f4:	2301      	movs	r3, #1
 800d6f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d6f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6fa:	f383 8810 	msr	PRIMASK, r3
}
 800d6fe:	46c0      	nop			; (mov r8, r8)
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	689a      	ldr	r2, [r3, #8]
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	2140      	movs	r1, #64	; 0x40
 800d70c:	438a      	bics	r2, r1
 800d70e:	609a      	str	r2, [r3, #8]
 800d710:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d712:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d714:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d716:	f383 8810 	msr	PRIMASK, r3
}
 800d71a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	228c      	movs	r2, #140	; 0x8c
 800d720:	2120      	movs	r1, #32
 800d722:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	2200      	movs	r2, #0
 800d728:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d72a:	f3ef 8310 	mrs	r3, PRIMASK
 800d72e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800d730:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d732:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d734:	2301      	movs	r3, #1
 800d736:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d738:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d73a:	f383 8810 	msr	PRIMASK, r3
}
 800d73e:	46c0      	nop			; (mov r8, r8)
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	681a      	ldr	r2, [r3, #0]
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	2110      	movs	r1, #16
 800d74c:	438a      	bics	r2, r1
 800d74e:	601a      	str	r2, [r3, #0]
 800d750:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d752:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d754:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d756:	f383 8810 	msr	PRIMASK, r3
}
 800d75a:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	2280      	movs	r2, #128	; 0x80
 800d760:	589b      	ldr	r3, [r3, r2]
 800d762:	0018      	movs	r0, r3
 800d764:	f7fc fbb8 	bl	8009ed8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	2202      	movs	r2, #2
 800d76c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	225c      	movs	r2, #92	; 0x5c
 800d772:	5a9a      	ldrh	r2, [r3, r2]
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	215e      	movs	r1, #94	; 0x5e
 800d778:	5a5b      	ldrh	r3, [r3, r1]
 800d77a:	b29b      	uxth	r3, r3
 800d77c:	1ad3      	subs	r3, r2, r3
 800d77e:	b29a      	uxth	r2, r3
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	0011      	movs	r1, r2
 800d784:	0018      	movs	r0, r3
 800d786:	f000 f905 	bl	800d994 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d78a:	e0ed      	b.n	800d968 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	225c      	movs	r2, #92	; 0x5c
 800d790:	5a99      	ldrh	r1, [r3, r2]
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	225e      	movs	r2, #94	; 0x5e
 800d796:	5a9b      	ldrh	r3, [r3, r2]
 800d798:	b29a      	uxth	r2, r3
 800d79a:	208e      	movs	r0, #142	; 0x8e
 800d79c:	183b      	adds	r3, r7, r0
 800d79e:	1a8a      	subs	r2, r1, r2
 800d7a0:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	225e      	movs	r2, #94	; 0x5e
 800d7a6:	5a9b      	ldrh	r3, [r3, r2]
 800d7a8:	b29b      	uxth	r3, r3
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d100      	bne.n	800d7b0 <HAL_UART_IRQHandler+0x478>
 800d7ae:	e0dd      	b.n	800d96c <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 800d7b0:	183b      	adds	r3, r7, r0
 800d7b2:	881b      	ldrh	r3, [r3, #0]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d100      	bne.n	800d7ba <HAL_UART_IRQHandler+0x482>
 800d7b8:	e0d8      	b.n	800d96c <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d7ba:	f3ef 8310 	mrs	r3, PRIMASK
 800d7be:	60fb      	str	r3, [r7, #12]
  return(result);
 800d7c0:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d7c2:	2488      	movs	r4, #136	; 0x88
 800d7c4:	193a      	adds	r2, r7, r4
 800d7c6:	6013      	str	r3, [r2, #0]
 800d7c8:	2301      	movs	r3, #1
 800d7ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d7cc:	693b      	ldr	r3, [r7, #16]
 800d7ce:	f383 8810 	msr	PRIMASK, r3
}
 800d7d2:	46c0      	nop			; (mov r8, r8)
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	681a      	ldr	r2, [r3, #0]
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	4967      	ldr	r1, [pc, #412]	; (800d97c <HAL_UART_IRQHandler+0x644>)
 800d7e0:	400a      	ands	r2, r1
 800d7e2:	601a      	str	r2, [r3, #0]
 800d7e4:	193b      	adds	r3, r7, r4
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d7ea:	697b      	ldr	r3, [r7, #20]
 800d7ec:	f383 8810 	msr	PRIMASK, r3
}
 800d7f0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d7f2:	f3ef 8310 	mrs	r3, PRIMASK
 800d7f6:	61bb      	str	r3, [r7, #24]
  return(result);
 800d7f8:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d7fa:	2484      	movs	r4, #132	; 0x84
 800d7fc:	193a      	adds	r2, r7, r4
 800d7fe:	6013      	str	r3, [r2, #0]
 800d800:	2301      	movs	r3, #1
 800d802:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d804:	69fb      	ldr	r3, [r7, #28]
 800d806:	f383 8810 	msr	PRIMASK, r3
}
 800d80a:	46c0      	nop			; (mov r8, r8)
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	689a      	ldr	r2, [r3, #8]
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	495a      	ldr	r1, [pc, #360]	; (800d980 <HAL_UART_IRQHandler+0x648>)
 800d818:	400a      	ands	r2, r1
 800d81a:	609a      	str	r2, [r3, #8]
 800d81c:	193b      	adds	r3, r7, r4
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d822:	6a3b      	ldr	r3, [r7, #32]
 800d824:	f383 8810 	msr	PRIMASK, r3
}
 800d828:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	228c      	movs	r2, #140	; 0x8c
 800d82e:	2120      	movs	r1, #32
 800d830:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	2200      	movs	r2, #0
 800d836:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	2200      	movs	r2, #0
 800d83c:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d83e:	f3ef 8310 	mrs	r3, PRIMASK
 800d842:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800d844:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d846:	2480      	movs	r4, #128	; 0x80
 800d848:	193a      	adds	r2, r7, r4
 800d84a:	6013      	str	r3, [r2, #0]
 800d84c:	2301      	movs	r3, #1
 800d84e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d852:	f383 8810 	msr	PRIMASK, r3
}
 800d856:	46c0      	nop			; (mov r8, r8)
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	681a      	ldr	r2, [r3, #0]
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	2110      	movs	r1, #16
 800d864:	438a      	bics	r2, r1
 800d866:	601a      	str	r2, [r3, #0]
 800d868:	193b      	adds	r3, r7, r4
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d86e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d870:	f383 8810 	msr	PRIMASK, r3
}
 800d874:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	2202      	movs	r2, #2
 800d87a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d87c:	183b      	adds	r3, r7, r0
 800d87e:	881a      	ldrh	r2, [r3, #0]
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	0011      	movs	r1, r2
 800d884:	0018      	movs	r0, r3
 800d886:	f000 f885 	bl	800d994 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d88a:	e06f      	b.n	800d96c <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d88c:	23a4      	movs	r3, #164	; 0xa4
 800d88e:	18fb      	adds	r3, r7, r3
 800d890:	681a      	ldr	r2, [r3, #0]
 800d892:	2380      	movs	r3, #128	; 0x80
 800d894:	035b      	lsls	r3, r3, #13
 800d896:	4013      	ands	r3, r2
 800d898:	d010      	beq.n	800d8bc <HAL_UART_IRQHandler+0x584>
 800d89a:	239c      	movs	r3, #156	; 0x9c
 800d89c:	18fb      	adds	r3, r7, r3
 800d89e:	681a      	ldr	r2, [r3, #0]
 800d8a0:	2380      	movs	r3, #128	; 0x80
 800d8a2:	03db      	lsls	r3, r3, #15
 800d8a4:	4013      	ands	r3, r2
 800d8a6:	d009      	beq.n	800d8bc <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	2280      	movs	r2, #128	; 0x80
 800d8ae:	0352      	lsls	r2, r2, #13
 800d8b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	0018      	movs	r0, r3
 800d8b6:	f001 fa15 	bl	800ece4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d8ba:	e05a      	b.n	800d972 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d8bc:	23a4      	movs	r3, #164	; 0xa4
 800d8be:	18fb      	adds	r3, r7, r3
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	2280      	movs	r2, #128	; 0x80
 800d8c4:	4013      	ands	r3, r2
 800d8c6:	d016      	beq.n	800d8f6 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d8c8:	23a0      	movs	r3, #160	; 0xa0
 800d8ca:	18fb      	adds	r3, r7, r3
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	2280      	movs	r2, #128	; 0x80
 800d8d0:	4013      	ands	r3, r2
 800d8d2:	d106      	bne.n	800d8e2 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d8d4:	239c      	movs	r3, #156	; 0x9c
 800d8d6:	18fb      	adds	r3, r7, r3
 800d8d8:	681a      	ldr	r2, [r3, #0]
 800d8da:	2380      	movs	r3, #128	; 0x80
 800d8dc:	041b      	lsls	r3, r3, #16
 800d8de:	4013      	ands	r3, r2
 800d8e0:	d009      	beq.n	800d8f6 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d042      	beq.n	800d970 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d8ee:	687a      	ldr	r2, [r7, #4]
 800d8f0:	0010      	movs	r0, r2
 800d8f2:	4798      	blx	r3
    }
    return;
 800d8f4:	e03c      	b.n	800d970 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d8f6:	23a4      	movs	r3, #164	; 0xa4
 800d8f8:	18fb      	adds	r3, r7, r3
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	2240      	movs	r2, #64	; 0x40
 800d8fe:	4013      	ands	r3, r2
 800d900:	d00a      	beq.n	800d918 <HAL_UART_IRQHandler+0x5e0>
 800d902:	23a0      	movs	r3, #160	; 0xa0
 800d904:	18fb      	adds	r3, r7, r3
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	2240      	movs	r2, #64	; 0x40
 800d90a:	4013      	ands	r3, r2
 800d90c:	d004      	beq.n	800d918 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	0018      	movs	r0, r3
 800d912:	f000 fd5a 	bl	800e3ca <UART_EndTransmit_IT>
    return;
 800d916:	e02c      	b.n	800d972 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d918:	23a4      	movs	r3, #164	; 0xa4
 800d91a:	18fb      	adds	r3, r7, r3
 800d91c:	681a      	ldr	r2, [r3, #0]
 800d91e:	2380      	movs	r3, #128	; 0x80
 800d920:	041b      	lsls	r3, r3, #16
 800d922:	4013      	ands	r3, r2
 800d924:	d00b      	beq.n	800d93e <HAL_UART_IRQHandler+0x606>
 800d926:	23a0      	movs	r3, #160	; 0xa0
 800d928:	18fb      	adds	r3, r7, r3
 800d92a:	681a      	ldr	r2, [r3, #0]
 800d92c:	2380      	movs	r3, #128	; 0x80
 800d92e:	05db      	lsls	r3, r3, #23
 800d930:	4013      	ands	r3, r2
 800d932:	d004      	beq.n	800d93e <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	0018      	movs	r0, r3
 800d938:	f001 f9e4 	bl	800ed04 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d93c:	e019      	b.n	800d972 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d93e:	23a4      	movs	r3, #164	; 0xa4
 800d940:	18fb      	adds	r3, r7, r3
 800d942:	681a      	ldr	r2, [r3, #0]
 800d944:	2380      	movs	r3, #128	; 0x80
 800d946:	045b      	lsls	r3, r3, #17
 800d948:	4013      	ands	r3, r2
 800d94a:	d012      	beq.n	800d972 <HAL_UART_IRQHandler+0x63a>
 800d94c:	23a0      	movs	r3, #160	; 0xa0
 800d94e:	18fb      	adds	r3, r7, r3
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	2b00      	cmp	r3, #0
 800d954:	da0d      	bge.n	800d972 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	0018      	movs	r0, r3
 800d95a:	f001 f9cb 	bl	800ecf4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d95e:	e008      	b.n	800d972 <HAL_UART_IRQHandler+0x63a>
      return;
 800d960:	46c0      	nop			; (mov r8, r8)
 800d962:	e006      	b.n	800d972 <HAL_UART_IRQHandler+0x63a>
    return;
 800d964:	46c0      	nop			; (mov r8, r8)
 800d966:	e004      	b.n	800d972 <HAL_UART_IRQHandler+0x63a>
      return;
 800d968:	46c0      	nop			; (mov r8, r8)
 800d96a:	e002      	b.n	800d972 <HAL_UART_IRQHandler+0x63a>
      return;
 800d96c:	46c0      	nop			; (mov r8, r8)
 800d96e:	e000      	b.n	800d972 <HAL_UART_IRQHandler+0x63a>
    return;
 800d970:	46c0      	nop			; (mov r8, r8)
  }
}
 800d972:	46bd      	mov	sp, r7
 800d974:	b02a      	add	sp, #168	; 0xa8
 800d976:	bdb0      	pop	{r4, r5, r7, pc}
 800d978:	fffffeff 	.word	0xfffffeff
 800d97c:	fffffedf 	.word	0xfffffedf
 800d980:	effffffe 	.word	0xeffffffe

0800d984 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b082      	sub	sp, #8
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d98c:	46c0      	nop			; (mov r8, r8)
 800d98e:	46bd      	mov	sp, r7
 800d990:	b002      	add	sp, #8
 800d992:	bd80      	pop	{r7, pc}

0800d994 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b082      	sub	sp, #8
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
 800d99c:	000a      	movs	r2, r1
 800d99e:	1cbb      	adds	r3, r7, #2
 800d9a0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d9a2:	46c0      	nop			; (mov r8, r8)
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	b002      	add	sp, #8
 800d9a8:	bd80      	pop	{r7, pc}
	...

0800d9ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b088      	sub	sp, #32
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d9b4:	231a      	movs	r3, #26
 800d9b6:	18fb      	adds	r3, r7, r3
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	689a      	ldr	r2, [r3, #8]
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	691b      	ldr	r3, [r3, #16]
 800d9c4:	431a      	orrs	r2, r3
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	695b      	ldr	r3, [r3, #20]
 800d9ca:	431a      	orrs	r2, r3
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	69db      	ldr	r3, [r3, #28]
 800d9d0:	4313      	orrs	r3, r2
 800d9d2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	4abc      	ldr	r2, [pc, #752]	; (800dccc <UART_SetConfig+0x320>)
 800d9dc:	4013      	ands	r3, r2
 800d9de:	0019      	movs	r1, r3
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	69fa      	ldr	r2, [r7, #28]
 800d9e6:	430a      	orrs	r2, r1
 800d9e8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	685b      	ldr	r3, [r3, #4]
 800d9f0:	4ab7      	ldr	r2, [pc, #732]	; (800dcd0 <UART_SetConfig+0x324>)
 800d9f2:	4013      	ands	r3, r2
 800d9f4:	0019      	movs	r1, r3
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	68da      	ldr	r2, [r3, #12]
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	430a      	orrs	r2, r1
 800da00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	699b      	ldr	r3, [r3, #24]
 800da06:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	6a1b      	ldr	r3, [r3, #32]
 800da0c:	69fa      	ldr	r2, [r7, #28]
 800da0e:	4313      	orrs	r3, r2
 800da10:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	689b      	ldr	r3, [r3, #8]
 800da18:	4aae      	ldr	r2, [pc, #696]	; (800dcd4 <UART_SetConfig+0x328>)
 800da1a:	4013      	ands	r3, r2
 800da1c:	0019      	movs	r1, r3
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	69fa      	ldr	r2, [r7, #28]
 800da24:	430a      	orrs	r2, r1
 800da26:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da2e:	220f      	movs	r2, #15
 800da30:	4393      	bics	r3, r2
 800da32:	0019      	movs	r1, r3
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	430a      	orrs	r2, r1
 800da3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	4aa4      	ldr	r2, [pc, #656]	; (800dcd8 <UART_SetConfig+0x32c>)
 800da46:	4293      	cmp	r3, r2
 800da48:	d127      	bne.n	800da9a <UART_SetConfig+0xee>
 800da4a:	4ba4      	ldr	r3, [pc, #656]	; (800dcdc <UART_SetConfig+0x330>)
 800da4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da4e:	2203      	movs	r2, #3
 800da50:	4013      	ands	r3, r2
 800da52:	2b03      	cmp	r3, #3
 800da54:	d017      	beq.n	800da86 <UART_SetConfig+0xda>
 800da56:	d81b      	bhi.n	800da90 <UART_SetConfig+0xe4>
 800da58:	2b02      	cmp	r3, #2
 800da5a:	d00a      	beq.n	800da72 <UART_SetConfig+0xc6>
 800da5c:	d818      	bhi.n	800da90 <UART_SetConfig+0xe4>
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d002      	beq.n	800da68 <UART_SetConfig+0xbc>
 800da62:	2b01      	cmp	r3, #1
 800da64:	d00a      	beq.n	800da7c <UART_SetConfig+0xd0>
 800da66:	e013      	b.n	800da90 <UART_SetConfig+0xe4>
 800da68:	231b      	movs	r3, #27
 800da6a:	18fb      	adds	r3, r7, r3
 800da6c:	2200      	movs	r2, #0
 800da6e:	701a      	strb	r2, [r3, #0]
 800da70:	e058      	b.n	800db24 <UART_SetConfig+0x178>
 800da72:	231b      	movs	r3, #27
 800da74:	18fb      	adds	r3, r7, r3
 800da76:	2202      	movs	r2, #2
 800da78:	701a      	strb	r2, [r3, #0]
 800da7a:	e053      	b.n	800db24 <UART_SetConfig+0x178>
 800da7c:	231b      	movs	r3, #27
 800da7e:	18fb      	adds	r3, r7, r3
 800da80:	2204      	movs	r2, #4
 800da82:	701a      	strb	r2, [r3, #0]
 800da84:	e04e      	b.n	800db24 <UART_SetConfig+0x178>
 800da86:	231b      	movs	r3, #27
 800da88:	18fb      	adds	r3, r7, r3
 800da8a:	2208      	movs	r2, #8
 800da8c:	701a      	strb	r2, [r3, #0]
 800da8e:	e049      	b.n	800db24 <UART_SetConfig+0x178>
 800da90:	231b      	movs	r3, #27
 800da92:	18fb      	adds	r3, r7, r3
 800da94:	2210      	movs	r2, #16
 800da96:	701a      	strb	r2, [r3, #0]
 800da98:	e044      	b.n	800db24 <UART_SetConfig+0x178>
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	4a90      	ldr	r2, [pc, #576]	; (800dce0 <UART_SetConfig+0x334>)
 800daa0:	4293      	cmp	r3, r2
 800daa2:	d127      	bne.n	800daf4 <UART_SetConfig+0x148>
 800daa4:	4b8d      	ldr	r3, [pc, #564]	; (800dcdc <UART_SetConfig+0x330>)
 800daa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800daa8:	220c      	movs	r2, #12
 800daaa:	4013      	ands	r3, r2
 800daac:	2b0c      	cmp	r3, #12
 800daae:	d017      	beq.n	800dae0 <UART_SetConfig+0x134>
 800dab0:	d81b      	bhi.n	800daea <UART_SetConfig+0x13e>
 800dab2:	2b08      	cmp	r3, #8
 800dab4:	d00a      	beq.n	800dacc <UART_SetConfig+0x120>
 800dab6:	d818      	bhi.n	800daea <UART_SetConfig+0x13e>
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d002      	beq.n	800dac2 <UART_SetConfig+0x116>
 800dabc:	2b04      	cmp	r3, #4
 800dabe:	d00a      	beq.n	800dad6 <UART_SetConfig+0x12a>
 800dac0:	e013      	b.n	800daea <UART_SetConfig+0x13e>
 800dac2:	231b      	movs	r3, #27
 800dac4:	18fb      	adds	r3, r7, r3
 800dac6:	2200      	movs	r2, #0
 800dac8:	701a      	strb	r2, [r3, #0]
 800daca:	e02b      	b.n	800db24 <UART_SetConfig+0x178>
 800dacc:	231b      	movs	r3, #27
 800dace:	18fb      	adds	r3, r7, r3
 800dad0:	2202      	movs	r2, #2
 800dad2:	701a      	strb	r2, [r3, #0]
 800dad4:	e026      	b.n	800db24 <UART_SetConfig+0x178>
 800dad6:	231b      	movs	r3, #27
 800dad8:	18fb      	adds	r3, r7, r3
 800dada:	2204      	movs	r2, #4
 800dadc:	701a      	strb	r2, [r3, #0]
 800dade:	e021      	b.n	800db24 <UART_SetConfig+0x178>
 800dae0:	231b      	movs	r3, #27
 800dae2:	18fb      	adds	r3, r7, r3
 800dae4:	2208      	movs	r2, #8
 800dae6:	701a      	strb	r2, [r3, #0]
 800dae8:	e01c      	b.n	800db24 <UART_SetConfig+0x178>
 800daea:	231b      	movs	r3, #27
 800daec:	18fb      	adds	r3, r7, r3
 800daee:	2210      	movs	r2, #16
 800daf0:	701a      	strb	r2, [r3, #0]
 800daf2:	e017      	b.n	800db24 <UART_SetConfig+0x178>
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	4a7a      	ldr	r2, [pc, #488]	; (800dce4 <UART_SetConfig+0x338>)
 800dafa:	4293      	cmp	r3, r2
 800dafc:	d104      	bne.n	800db08 <UART_SetConfig+0x15c>
 800dafe:	231b      	movs	r3, #27
 800db00:	18fb      	adds	r3, r7, r3
 800db02:	2200      	movs	r2, #0
 800db04:	701a      	strb	r2, [r3, #0]
 800db06:	e00d      	b.n	800db24 <UART_SetConfig+0x178>
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	4a76      	ldr	r2, [pc, #472]	; (800dce8 <UART_SetConfig+0x33c>)
 800db0e:	4293      	cmp	r3, r2
 800db10:	d104      	bne.n	800db1c <UART_SetConfig+0x170>
 800db12:	231b      	movs	r3, #27
 800db14:	18fb      	adds	r3, r7, r3
 800db16:	2200      	movs	r2, #0
 800db18:	701a      	strb	r2, [r3, #0]
 800db1a:	e003      	b.n	800db24 <UART_SetConfig+0x178>
 800db1c:	231b      	movs	r3, #27
 800db1e:	18fb      	adds	r3, r7, r3
 800db20:	2210      	movs	r2, #16
 800db22:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	69da      	ldr	r2, [r3, #28]
 800db28:	2380      	movs	r3, #128	; 0x80
 800db2a:	021b      	lsls	r3, r3, #8
 800db2c:	429a      	cmp	r2, r3
 800db2e:	d000      	beq.n	800db32 <UART_SetConfig+0x186>
 800db30:	e065      	b.n	800dbfe <UART_SetConfig+0x252>
  {
    switch (clocksource)
 800db32:	231b      	movs	r3, #27
 800db34:	18fb      	adds	r3, r7, r3
 800db36:	781b      	ldrb	r3, [r3, #0]
 800db38:	2b08      	cmp	r3, #8
 800db3a:	d015      	beq.n	800db68 <UART_SetConfig+0x1bc>
 800db3c:	dc18      	bgt.n	800db70 <UART_SetConfig+0x1c4>
 800db3e:	2b04      	cmp	r3, #4
 800db40:	d00d      	beq.n	800db5e <UART_SetConfig+0x1b2>
 800db42:	dc15      	bgt.n	800db70 <UART_SetConfig+0x1c4>
 800db44:	2b00      	cmp	r3, #0
 800db46:	d002      	beq.n	800db4e <UART_SetConfig+0x1a2>
 800db48:	2b02      	cmp	r3, #2
 800db4a:	d005      	beq.n	800db58 <UART_SetConfig+0x1ac>
 800db4c:	e010      	b.n	800db70 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800db4e:	f7fd f939 	bl	800adc4 <HAL_RCC_GetPCLK1Freq>
 800db52:	0003      	movs	r3, r0
 800db54:	617b      	str	r3, [r7, #20]
        break;
 800db56:	e012      	b.n	800db7e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800db58:	4b64      	ldr	r3, [pc, #400]	; (800dcec <UART_SetConfig+0x340>)
 800db5a:	617b      	str	r3, [r7, #20]
        break;
 800db5c:	e00f      	b.n	800db7e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800db5e:	f7fd f8a5 	bl	800acac <HAL_RCC_GetSysClockFreq>
 800db62:	0003      	movs	r3, r0
 800db64:	617b      	str	r3, [r7, #20]
        break;
 800db66:	e00a      	b.n	800db7e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800db68:	2380      	movs	r3, #128	; 0x80
 800db6a:	021b      	lsls	r3, r3, #8
 800db6c:	617b      	str	r3, [r7, #20]
        break;
 800db6e:	e006      	b.n	800db7e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800db70:	2300      	movs	r3, #0
 800db72:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800db74:	231a      	movs	r3, #26
 800db76:	18fb      	adds	r3, r7, r3
 800db78:	2201      	movs	r2, #1
 800db7a:	701a      	strb	r2, [r3, #0]
        break;
 800db7c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800db7e:	697b      	ldr	r3, [r7, #20]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d100      	bne.n	800db86 <UART_SetConfig+0x1da>
 800db84:	e08d      	b.n	800dca2 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800db8a:	4b59      	ldr	r3, [pc, #356]	; (800dcf0 <UART_SetConfig+0x344>)
 800db8c:	0052      	lsls	r2, r2, #1
 800db8e:	5ad3      	ldrh	r3, [r2, r3]
 800db90:	0019      	movs	r1, r3
 800db92:	6978      	ldr	r0, [r7, #20]
 800db94:	f7f2 fada 	bl	800014c <__udivsi3>
 800db98:	0003      	movs	r3, r0
 800db9a:	005a      	lsls	r2, r3, #1
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	685b      	ldr	r3, [r3, #4]
 800dba0:	085b      	lsrs	r3, r3, #1
 800dba2:	18d2      	adds	r2, r2, r3
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	685b      	ldr	r3, [r3, #4]
 800dba8:	0019      	movs	r1, r3
 800dbaa:	0010      	movs	r0, r2
 800dbac:	f7f2 face 	bl	800014c <__udivsi3>
 800dbb0:	0003      	movs	r3, r0
 800dbb2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dbb4:	693b      	ldr	r3, [r7, #16]
 800dbb6:	2b0f      	cmp	r3, #15
 800dbb8:	d91c      	bls.n	800dbf4 <UART_SetConfig+0x248>
 800dbba:	693a      	ldr	r2, [r7, #16]
 800dbbc:	2380      	movs	r3, #128	; 0x80
 800dbbe:	025b      	lsls	r3, r3, #9
 800dbc0:	429a      	cmp	r2, r3
 800dbc2:	d217      	bcs.n	800dbf4 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800dbc4:	693b      	ldr	r3, [r7, #16]
 800dbc6:	b29a      	uxth	r2, r3
 800dbc8:	200e      	movs	r0, #14
 800dbca:	183b      	adds	r3, r7, r0
 800dbcc:	210f      	movs	r1, #15
 800dbce:	438a      	bics	r2, r1
 800dbd0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800dbd2:	693b      	ldr	r3, [r7, #16]
 800dbd4:	085b      	lsrs	r3, r3, #1
 800dbd6:	b29b      	uxth	r3, r3
 800dbd8:	2207      	movs	r2, #7
 800dbda:	4013      	ands	r3, r2
 800dbdc:	b299      	uxth	r1, r3
 800dbde:	183b      	adds	r3, r7, r0
 800dbe0:	183a      	adds	r2, r7, r0
 800dbe2:	8812      	ldrh	r2, [r2, #0]
 800dbe4:	430a      	orrs	r2, r1
 800dbe6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	183a      	adds	r2, r7, r0
 800dbee:	8812      	ldrh	r2, [r2, #0]
 800dbf0:	60da      	str	r2, [r3, #12]
 800dbf2:	e056      	b.n	800dca2 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800dbf4:	231a      	movs	r3, #26
 800dbf6:	18fb      	adds	r3, r7, r3
 800dbf8:	2201      	movs	r2, #1
 800dbfa:	701a      	strb	r2, [r3, #0]
 800dbfc:	e051      	b.n	800dca2 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800dbfe:	231b      	movs	r3, #27
 800dc00:	18fb      	adds	r3, r7, r3
 800dc02:	781b      	ldrb	r3, [r3, #0]
 800dc04:	2b08      	cmp	r3, #8
 800dc06:	d015      	beq.n	800dc34 <UART_SetConfig+0x288>
 800dc08:	dc18      	bgt.n	800dc3c <UART_SetConfig+0x290>
 800dc0a:	2b04      	cmp	r3, #4
 800dc0c:	d00d      	beq.n	800dc2a <UART_SetConfig+0x27e>
 800dc0e:	dc15      	bgt.n	800dc3c <UART_SetConfig+0x290>
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d002      	beq.n	800dc1a <UART_SetConfig+0x26e>
 800dc14:	2b02      	cmp	r3, #2
 800dc16:	d005      	beq.n	800dc24 <UART_SetConfig+0x278>
 800dc18:	e010      	b.n	800dc3c <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dc1a:	f7fd f8d3 	bl	800adc4 <HAL_RCC_GetPCLK1Freq>
 800dc1e:	0003      	movs	r3, r0
 800dc20:	617b      	str	r3, [r7, #20]
        break;
 800dc22:	e012      	b.n	800dc4a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800dc24:	4b31      	ldr	r3, [pc, #196]	; (800dcec <UART_SetConfig+0x340>)
 800dc26:	617b      	str	r3, [r7, #20]
        break;
 800dc28:	e00f      	b.n	800dc4a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800dc2a:	f7fd f83f 	bl	800acac <HAL_RCC_GetSysClockFreq>
 800dc2e:	0003      	movs	r3, r0
 800dc30:	617b      	str	r3, [r7, #20]
        break;
 800dc32:	e00a      	b.n	800dc4a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dc34:	2380      	movs	r3, #128	; 0x80
 800dc36:	021b      	lsls	r3, r3, #8
 800dc38:	617b      	str	r3, [r7, #20]
        break;
 800dc3a:	e006      	b.n	800dc4a <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800dc40:	231a      	movs	r3, #26
 800dc42:	18fb      	adds	r3, r7, r3
 800dc44:	2201      	movs	r2, #1
 800dc46:	701a      	strb	r2, [r3, #0]
        break;
 800dc48:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800dc4a:	697b      	ldr	r3, [r7, #20]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d028      	beq.n	800dca2 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dc54:	4b26      	ldr	r3, [pc, #152]	; (800dcf0 <UART_SetConfig+0x344>)
 800dc56:	0052      	lsls	r2, r2, #1
 800dc58:	5ad3      	ldrh	r3, [r2, r3]
 800dc5a:	0019      	movs	r1, r3
 800dc5c:	6978      	ldr	r0, [r7, #20]
 800dc5e:	f7f2 fa75 	bl	800014c <__udivsi3>
 800dc62:	0003      	movs	r3, r0
 800dc64:	001a      	movs	r2, r3
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	685b      	ldr	r3, [r3, #4]
 800dc6a:	085b      	lsrs	r3, r3, #1
 800dc6c:	18d2      	adds	r2, r2, r3
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	685b      	ldr	r3, [r3, #4]
 800dc72:	0019      	movs	r1, r3
 800dc74:	0010      	movs	r0, r2
 800dc76:	f7f2 fa69 	bl	800014c <__udivsi3>
 800dc7a:	0003      	movs	r3, r0
 800dc7c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dc7e:	693b      	ldr	r3, [r7, #16]
 800dc80:	2b0f      	cmp	r3, #15
 800dc82:	d90a      	bls.n	800dc9a <UART_SetConfig+0x2ee>
 800dc84:	693a      	ldr	r2, [r7, #16]
 800dc86:	2380      	movs	r3, #128	; 0x80
 800dc88:	025b      	lsls	r3, r3, #9
 800dc8a:	429a      	cmp	r2, r3
 800dc8c:	d205      	bcs.n	800dc9a <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800dc8e:	693b      	ldr	r3, [r7, #16]
 800dc90:	b29a      	uxth	r2, r3
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	60da      	str	r2, [r3, #12]
 800dc98:	e003      	b.n	800dca2 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800dc9a:	231a      	movs	r3, #26
 800dc9c:	18fb      	adds	r3, r7, r3
 800dc9e:	2201      	movs	r2, #1
 800dca0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	226a      	movs	r2, #106	; 0x6a
 800dca6:	2101      	movs	r1, #1
 800dca8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	2268      	movs	r2, #104	; 0x68
 800dcae:	2101      	movs	r1, #1
 800dcb0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	2200      	movs	r2, #0
 800dcbc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800dcbe:	231a      	movs	r3, #26
 800dcc0:	18fb      	adds	r3, r7, r3
 800dcc2:	781b      	ldrb	r3, [r3, #0]
}
 800dcc4:	0018      	movs	r0, r3
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	b008      	add	sp, #32
 800dcca:	bd80      	pop	{r7, pc}
 800dccc:	cfff69f3 	.word	0xcfff69f3
 800dcd0:	ffffcfff 	.word	0xffffcfff
 800dcd4:	11fff4ff 	.word	0x11fff4ff
 800dcd8:	40013800 	.word	0x40013800
 800dcdc:	40021000 	.word	0x40021000
 800dce0:	40004400 	.word	0x40004400
 800dce4:	40004800 	.word	0x40004800
 800dce8:	40004c00 	.word	0x40004c00
 800dcec:	00f42400 	.word	0x00f42400
 800dcf0:	080139e8 	.word	0x080139e8

0800dcf4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b082      	sub	sp, #8
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd00:	2201      	movs	r2, #1
 800dd02:	4013      	ands	r3, r2
 800dd04:	d00b      	beq.n	800dd1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	685b      	ldr	r3, [r3, #4]
 800dd0c:	4a4a      	ldr	r2, [pc, #296]	; (800de38 <UART_AdvFeatureConfig+0x144>)
 800dd0e:	4013      	ands	r3, r2
 800dd10:	0019      	movs	r1, r3
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	430a      	orrs	r2, r1
 800dd1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd22:	2202      	movs	r2, #2
 800dd24:	4013      	ands	r3, r2
 800dd26:	d00b      	beq.n	800dd40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	685b      	ldr	r3, [r3, #4]
 800dd2e:	4a43      	ldr	r2, [pc, #268]	; (800de3c <UART_AdvFeatureConfig+0x148>)
 800dd30:	4013      	ands	r3, r2
 800dd32:	0019      	movs	r1, r3
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	430a      	orrs	r2, r1
 800dd3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd44:	2204      	movs	r2, #4
 800dd46:	4013      	ands	r3, r2
 800dd48:	d00b      	beq.n	800dd62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	685b      	ldr	r3, [r3, #4]
 800dd50:	4a3b      	ldr	r2, [pc, #236]	; (800de40 <UART_AdvFeatureConfig+0x14c>)
 800dd52:	4013      	ands	r3, r2
 800dd54:	0019      	movs	r1, r3
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	430a      	orrs	r2, r1
 800dd60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd66:	2208      	movs	r2, #8
 800dd68:	4013      	ands	r3, r2
 800dd6a:	d00b      	beq.n	800dd84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	685b      	ldr	r3, [r3, #4]
 800dd72:	4a34      	ldr	r2, [pc, #208]	; (800de44 <UART_AdvFeatureConfig+0x150>)
 800dd74:	4013      	ands	r3, r2
 800dd76:	0019      	movs	r1, r3
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	430a      	orrs	r2, r1
 800dd82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd88:	2210      	movs	r2, #16
 800dd8a:	4013      	ands	r3, r2
 800dd8c:	d00b      	beq.n	800dda6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	689b      	ldr	r3, [r3, #8]
 800dd94:	4a2c      	ldr	r2, [pc, #176]	; (800de48 <UART_AdvFeatureConfig+0x154>)
 800dd96:	4013      	ands	r3, r2
 800dd98:	0019      	movs	r1, r3
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	430a      	orrs	r2, r1
 800dda4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddaa:	2220      	movs	r2, #32
 800ddac:	4013      	ands	r3, r2
 800ddae:	d00b      	beq.n	800ddc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	689b      	ldr	r3, [r3, #8]
 800ddb6:	4a25      	ldr	r2, [pc, #148]	; (800de4c <UART_AdvFeatureConfig+0x158>)
 800ddb8:	4013      	ands	r3, r2
 800ddba:	0019      	movs	r1, r3
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	430a      	orrs	r2, r1
 800ddc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddcc:	2240      	movs	r2, #64	; 0x40
 800ddce:	4013      	ands	r3, r2
 800ddd0:	d01d      	beq.n	800de0e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	685b      	ldr	r3, [r3, #4]
 800ddd8:	4a1d      	ldr	r2, [pc, #116]	; (800de50 <UART_AdvFeatureConfig+0x15c>)
 800ddda:	4013      	ands	r3, r2
 800dddc:	0019      	movs	r1, r3
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	430a      	orrs	r2, r1
 800dde8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ddee:	2380      	movs	r3, #128	; 0x80
 800ddf0:	035b      	lsls	r3, r3, #13
 800ddf2:	429a      	cmp	r2, r3
 800ddf4:	d10b      	bne.n	800de0e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	685b      	ldr	r3, [r3, #4]
 800ddfc:	4a15      	ldr	r2, [pc, #84]	; (800de54 <UART_AdvFeatureConfig+0x160>)
 800ddfe:	4013      	ands	r3, r2
 800de00:	0019      	movs	r1, r3
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	430a      	orrs	r2, r1
 800de0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de12:	2280      	movs	r2, #128	; 0x80
 800de14:	4013      	ands	r3, r2
 800de16:	d00b      	beq.n	800de30 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	685b      	ldr	r3, [r3, #4]
 800de1e:	4a0e      	ldr	r2, [pc, #56]	; (800de58 <UART_AdvFeatureConfig+0x164>)
 800de20:	4013      	ands	r3, r2
 800de22:	0019      	movs	r1, r3
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	430a      	orrs	r2, r1
 800de2e:	605a      	str	r2, [r3, #4]
  }
}
 800de30:	46c0      	nop			; (mov r8, r8)
 800de32:	46bd      	mov	sp, r7
 800de34:	b002      	add	sp, #8
 800de36:	bd80      	pop	{r7, pc}
 800de38:	fffdffff 	.word	0xfffdffff
 800de3c:	fffeffff 	.word	0xfffeffff
 800de40:	fffbffff 	.word	0xfffbffff
 800de44:	ffff7fff 	.word	0xffff7fff
 800de48:	ffffefff 	.word	0xffffefff
 800de4c:	ffffdfff 	.word	0xffffdfff
 800de50:	ffefffff 	.word	0xffefffff
 800de54:	ff9fffff 	.word	0xff9fffff
 800de58:	fff7ffff 	.word	0xfff7ffff

0800de5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b086      	sub	sp, #24
 800de60:	af02      	add	r7, sp, #8
 800de62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	2290      	movs	r2, #144	; 0x90
 800de68:	2100      	movs	r1, #0
 800de6a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800de6c:	f7fb ff28 	bl	8009cc0 <HAL_GetTick>
 800de70:	0003      	movs	r3, r0
 800de72:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	2208      	movs	r2, #8
 800de7c:	4013      	ands	r3, r2
 800de7e:	2b08      	cmp	r3, #8
 800de80:	d10c      	bne.n	800de9c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	2280      	movs	r2, #128	; 0x80
 800de86:	0391      	lsls	r1, r2, #14
 800de88:	6878      	ldr	r0, [r7, #4]
 800de8a:	4a1a      	ldr	r2, [pc, #104]	; (800def4 <UART_CheckIdleState+0x98>)
 800de8c:	9200      	str	r2, [sp, #0]
 800de8e:	2200      	movs	r2, #0
 800de90:	f000 f832 	bl	800def8 <UART_WaitOnFlagUntilTimeout>
 800de94:	1e03      	subs	r3, r0, #0
 800de96:	d001      	beq.n	800de9c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800de98:	2303      	movs	r3, #3
 800de9a:	e026      	b.n	800deea <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	2204      	movs	r2, #4
 800dea4:	4013      	ands	r3, r2
 800dea6:	2b04      	cmp	r3, #4
 800dea8:	d10c      	bne.n	800dec4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	2280      	movs	r2, #128	; 0x80
 800deae:	03d1      	lsls	r1, r2, #15
 800deb0:	6878      	ldr	r0, [r7, #4]
 800deb2:	4a10      	ldr	r2, [pc, #64]	; (800def4 <UART_CheckIdleState+0x98>)
 800deb4:	9200      	str	r2, [sp, #0]
 800deb6:	2200      	movs	r2, #0
 800deb8:	f000 f81e 	bl	800def8 <UART_WaitOnFlagUntilTimeout>
 800debc:	1e03      	subs	r3, r0, #0
 800debe:	d001      	beq.n	800dec4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dec0:	2303      	movs	r3, #3
 800dec2:	e012      	b.n	800deea <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	2288      	movs	r2, #136	; 0x88
 800dec8:	2120      	movs	r1, #32
 800deca:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	228c      	movs	r2, #140	; 0x8c
 800ded0:	2120      	movs	r1, #32
 800ded2:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	2200      	movs	r2, #0
 800ded8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	2200      	movs	r2, #0
 800dede:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	2284      	movs	r2, #132	; 0x84
 800dee4:	2100      	movs	r1, #0
 800dee6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800dee8:	2300      	movs	r3, #0
}
 800deea:	0018      	movs	r0, r3
 800deec:	46bd      	mov	sp, r7
 800deee:	b004      	add	sp, #16
 800def0:	bd80      	pop	{r7, pc}
 800def2:	46c0      	nop			; (mov r8, r8)
 800def4:	01ffffff 	.word	0x01ffffff

0800def8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b094      	sub	sp, #80	; 0x50
 800defc:	af00      	add	r7, sp, #0
 800defe:	60f8      	str	r0, [r7, #12]
 800df00:	60b9      	str	r1, [r7, #8]
 800df02:	603b      	str	r3, [r7, #0]
 800df04:	1dfb      	adds	r3, r7, #7
 800df06:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800df08:	e0a7      	b.n	800e05a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800df0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800df0c:	3301      	adds	r3, #1
 800df0e:	d100      	bne.n	800df12 <UART_WaitOnFlagUntilTimeout+0x1a>
 800df10:	e0a3      	b.n	800e05a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800df12:	f7fb fed5 	bl	8009cc0 <HAL_GetTick>
 800df16:	0002      	movs	r2, r0
 800df18:	683b      	ldr	r3, [r7, #0]
 800df1a:	1ad3      	subs	r3, r2, r3
 800df1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800df1e:	429a      	cmp	r2, r3
 800df20:	d302      	bcc.n	800df28 <UART_WaitOnFlagUntilTimeout+0x30>
 800df22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800df24:	2b00      	cmp	r3, #0
 800df26:	d13f      	bne.n	800dfa8 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800df28:	f3ef 8310 	mrs	r3, PRIMASK
 800df2c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800df2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800df30:	647b      	str	r3, [r7, #68]	; 0x44
 800df32:	2301      	movs	r3, #1
 800df34:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df38:	f383 8810 	msr	PRIMASK, r3
}
 800df3c:	46c0      	nop			; (mov r8, r8)
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	681a      	ldr	r2, [r3, #0]
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	494e      	ldr	r1, [pc, #312]	; (800e084 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800df4a:	400a      	ands	r2, r1
 800df4c:	601a      	str	r2, [r3, #0]
 800df4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df50:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df54:	f383 8810 	msr	PRIMASK, r3
}
 800df58:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800df5a:	f3ef 8310 	mrs	r3, PRIMASK
 800df5e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800df60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800df62:	643b      	str	r3, [r7, #64]	; 0x40
 800df64:	2301      	movs	r3, #1
 800df66:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df6a:	f383 8810 	msr	PRIMASK, r3
}
 800df6e:	46c0      	nop			; (mov r8, r8)
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	689a      	ldr	r2, [r3, #8]
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	2101      	movs	r1, #1
 800df7c:	438a      	bics	r2, r1
 800df7e:	609a      	str	r2, [r3, #8]
 800df80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df82:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df86:	f383 8810 	msr	PRIMASK, r3
}
 800df8a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	2288      	movs	r2, #136	; 0x88
 800df90:	2120      	movs	r1, #32
 800df92:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	228c      	movs	r2, #140	; 0x8c
 800df98:	2120      	movs	r1, #32
 800df9a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	2284      	movs	r2, #132	; 0x84
 800dfa0:	2100      	movs	r1, #0
 800dfa2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800dfa4:	2303      	movs	r3, #3
 800dfa6:	e069      	b.n	800e07c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	2204      	movs	r2, #4
 800dfb0:	4013      	ands	r3, r2
 800dfb2:	d052      	beq.n	800e05a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	69da      	ldr	r2, [r3, #28]
 800dfba:	2380      	movs	r3, #128	; 0x80
 800dfbc:	011b      	lsls	r3, r3, #4
 800dfbe:	401a      	ands	r2, r3
 800dfc0:	2380      	movs	r3, #128	; 0x80
 800dfc2:	011b      	lsls	r3, r3, #4
 800dfc4:	429a      	cmp	r2, r3
 800dfc6:	d148      	bne.n	800e05a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	2280      	movs	r2, #128	; 0x80
 800dfce:	0112      	lsls	r2, r2, #4
 800dfd0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dfd2:	f3ef 8310 	mrs	r3, PRIMASK
 800dfd6:	613b      	str	r3, [r7, #16]
  return(result);
 800dfd8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800dfda:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dfdc:	2301      	movs	r3, #1
 800dfde:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dfe0:	697b      	ldr	r3, [r7, #20]
 800dfe2:	f383 8810 	msr	PRIMASK, r3
}
 800dfe6:	46c0      	nop			; (mov r8, r8)
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	681a      	ldr	r2, [r3, #0]
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	4924      	ldr	r1, [pc, #144]	; (800e084 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800dff4:	400a      	ands	r2, r1
 800dff6:	601a      	str	r2, [r3, #0]
 800dff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dffa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dffc:	69bb      	ldr	r3, [r7, #24]
 800dffe:	f383 8810 	msr	PRIMASK, r3
}
 800e002:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e004:	f3ef 8310 	mrs	r3, PRIMASK
 800e008:	61fb      	str	r3, [r7, #28]
  return(result);
 800e00a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e00c:	64bb      	str	r3, [r7, #72]	; 0x48
 800e00e:	2301      	movs	r3, #1
 800e010:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e012:	6a3b      	ldr	r3, [r7, #32]
 800e014:	f383 8810 	msr	PRIMASK, r3
}
 800e018:	46c0      	nop			; (mov r8, r8)
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	689a      	ldr	r2, [r3, #8]
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	2101      	movs	r1, #1
 800e026:	438a      	bics	r2, r1
 800e028:	609a      	str	r2, [r3, #8]
 800e02a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e02c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e030:	f383 8810 	msr	PRIMASK, r3
}
 800e034:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	2288      	movs	r2, #136	; 0x88
 800e03a:	2120      	movs	r1, #32
 800e03c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	228c      	movs	r2, #140	; 0x8c
 800e042:	2120      	movs	r1, #32
 800e044:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	2290      	movs	r2, #144	; 0x90
 800e04a:	2120      	movs	r1, #32
 800e04c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	2284      	movs	r2, #132	; 0x84
 800e052:	2100      	movs	r1, #0
 800e054:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800e056:	2303      	movs	r3, #3
 800e058:	e010      	b.n	800e07c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	69db      	ldr	r3, [r3, #28]
 800e060:	68ba      	ldr	r2, [r7, #8]
 800e062:	4013      	ands	r3, r2
 800e064:	68ba      	ldr	r2, [r7, #8]
 800e066:	1ad3      	subs	r3, r2, r3
 800e068:	425a      	negs	r2, r3
 800e06a:	4153      	adcs	r3, r2
 800e06c:	b2db      	uxtb	r3, r3
 800e06e:	001a      	movs	r2, r3
 800e070:	1dfb      	adds	r3, r7, #7
 800e072:	781b      	ldrb	r3, [r3, #0]
 800e074:	429a      	cmp	r2, r3
 800e076:	d100      	bne.n	800e07a <UART_WaitOnFlagUntilTimeout+0x182>
 800e078:	e747      	b.n	800df0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e07a:	2300      	movs	r3, #0
}
 800e07c:	0018      	movs	r0, r3
 800e07e:	46bd      	mov	sp, r7
 800e080:	b014      	add	sp, #80	; 0x50
 800e082:	bd80      	pop	{r7, pc}
 800e084:	fffffe5f 	.word	0xfffffe5f

0800e088 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b098      	sub	sp, #96	; 0x60
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	60f8      	str	r0, [r7, #12]
 800e090:	60b9      	str	r1, [r7, #8]
 800e092:	1dbb      	adds	r3, r7, #6
 800e094:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	68ba      	ldr	r2, [r7, #8]
 800e09a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	1dba      	adds	r2, r7, #6
 800e0a0:	215c      	movs	r1, #92	; 0x5c
 800e0a2:	8812      	ldrh	r2, [r2, #0]
 800e0a4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	1dba      	adds	r2, r7, #6
 800e0aa:	215e      	movs	r1, #94	; 0x5e
 800e0ac:	8812      	ldrh	r2, [r2, #0]
 800e0ae:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	689a      	ldr	r2, [r3, #8]
 800e0ba:	2380      	movs	r3, #128	; 0x80
 800e0bc:	015b      	lsls	r3, r3, #5
 800e0be:	429a      	cmp	r2, r3
 800e0c0:	d10d      	bne.n	800e0de <UART_Start_Receive_IT+0x56>
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	691b      	ldr	r3, [r3, #16]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d104      	bne.n	800e0d4 <UART_Start_Receive_IT+0x4c>
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	2260      	movs	r2, #96	; 0x60
 800e0ce:	497b      	ldr	r1, [pc, #492]	; (800e2bc <UART_Start_Receive_IT+0x234>)
 800e0d0:	5299      	strh	r1, [r3, r2]
 800e0d2:	e02e      	b.n	800e132 <UART_Start_Receive_IT+0xaa>
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	2260      	movs	r2, #96	; 0x60
 800e0d8:	21ff      	movs	r1, #255	; 0xff
 800e0da:	5299      	strh	r1, [r3, r2]
 800e0dc:	e029      	b.n	800e132 <UART_Start_Receive_IT+0xaa>
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	689b      	ldr	r3, [r3, #8]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d10d      	bne.n	800e102 <UART_Start_Receive_IT+0x7a>
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	691b      	ldr	r3, [r3, #16]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d104      	bne.n	800e0f8 <UART_Start_Receive_IT+0x70>
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	2260      	movs	r2, #96	; 0x60
 800e0f2:	21ff      	movs	r1, #255	; 0xff
 800e0f4:	5299      	strh	r1, [r3, r2]
 800e0f6:	e01c      	b.n	800e132 <UART_Start_Receive_IT+0xaa>
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	2260      	movs	r2, #96	; 0x60
 800e0fc:	217f      	movs	r1, #127	; 0x7f
 800e0fe:	5299      	strh	r1, [r3, r2]
 800e100:	e017      	b.n	800e132 <UART_Start_Receive_IT+0xaa>
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	689a      	ldr	r2, [r3, #8]
 800e106:	2380      	movs	r3, #128	; 0x80
 800e108:	055b      	lsls	r3, r3, #21
 800e10a:	429a      	cmp	r2, r3
 800e10c:	d10d      	bne.n	800e12a <UART_Start_Receive_IT+0xa2>
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	691b      	ldr	r3, [r3, #16]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d104      	bne.n	800e120 <UART_Start_Receive_IT+0x98>
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	2260      	movs	r2, #96	; 0x60
 800e11a:	217f      	movs	r1, #127	; 0x7f
 800e11c:	5299      	strh	r1, [r3, r2]
 800e11e:	e008      	b.n	800e132 <UART_Start_Receive_IT+0xaa>
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	2260      	movs	r2, #96	; 0x60
 800e124:	213f      	movs	r1, #63	; 0x3f
 800e126:	5299      	strh	r1, [r3, r2]
 800e128:	e003      	b.n	800e132 <UART_Start_Receive_IT+0xaa>
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	2260      	movs	r2, #96	; 0x60
 800e12e:	2100      	movs	r1, #0
 800e130:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	2290      	movs	r2, #144	; 0x90
 800e136:	2100      	movs	r1, #0
 800e138:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	228c      	movs	r2, #140	; 0x8c
 800e13e:	2122      	movs	r1, #34	; 0x22
 800e140:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e142:	f3ef 8310 	mrs	r3, PRIMASK
 800e146:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 800e148:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e14a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e14c:	2301      	movs	r3, #1
 800e14e:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e150:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e152:	f383 8810 	msr	PRIMASK, r3
}
 800e156:	46c0      	nop			; (mov r8, r8)
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	689a      	ldr	r2, [r3, #8]
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	2101      	movs	r1, #1
 800e164:	430a      	orrs	r2, r1
 800e166:	609a      	str	r2, [r3, #8]
 800e168:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e16a:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e16c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e16e:	f383 8810 	msr	PRIMASK, r3
}
 800e172:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800e178:	2380      	movs	r3, #128	; 0x80
 800e17a:	059b      	lsls	r3, r3, #22
 800e17c:	429a      	cmp	r2, r3
 800e17e:	d150      	bne.n	800e222 <UART_Start_Receive_IT+0x19a>
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	2268      	movs	r2, #104	; 0x68
 800e184:	5a9b      	ldrh	r3, [r3, r2]
 800e186:	1dba      	adds	r2, r7, #6
 800e188:	8812      	ldrh	r2, [r2, #0]
 800e18a:	429a      	cmp	r2, r3
 800e18c:	d349      	bcc.n	800e222 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	689a      	ldr	r2, [r3, #8]
 800e192:	2380      	movs	r3, #128	; 0x80
 800e194:	015b      	lsls	r3, r3, #5
 800e196:	429a      	cmp	r2, r3
 800e198:	d107      	bne.n	800e1aa <UART_Start_Receive_IT+0x122>
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	691b      	ldr	r3, [r3, #16]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d103      	bne.n	800e1aa <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	4a46      	ldr	r2, [pc, #280]	; (800e2c0 <UART_Start_Receive_IT+0x238>)
 800e1a6:	675a      	str	r2, [r3, #116]	; 0x74
 800e1a8:	e002      	b.n	800e1b0 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	4a45      	ldr	r2, [pc, #276]	; (800e2c4 <UART_Start_Receive_IT+0x23c>)
 800e1ae:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	691b      	ldr	r3, [r3, #16]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d019      	beq.n	800e1ec <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e1b8:	f3ef 8310 	mrs	r3, PRIMASK
 800e1bc:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800e1be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e1c0:	65bb      	str	r3, [r7, #88]	; 0x58
 800e1c2:	2301      	movs	r3, #1
 800e1c4:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e1c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1c8:	f383 8810 	msr	PRIMASK, r3
}
 800e1cc:	46c0      	nop			; (mov r8, r8)
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	681a      	ldr	r2, [r3, #0]
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	2180      	movs	r1, #128	; 0x80
 800e1da:	0049      	lsls	r1, r1, #1
 800e1dc:	430a      	orrs	r2, r1
 800e1de:	601a      	str	r2, [r3, #0]
 800e1e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e1e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e1e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1e6:	f383 8810 	msr	PRIMASK, r3
}
 800e1ea:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e1ec:	f3ef 8310 	mrs	r3, PRIMASK
 800e1f0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800e1f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e1f4:	657b      	str	r3, [r7, #84]	; 0x54
 800e1f6:	2301      	movs	r3, #1
 800e1f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e1fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1fc:	f383 8810 	msr	PRIMASK, r3
}
 800e200:	46c0      	nop			; (mov r8, r8)
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	689a      	ldr	r2, [r3, #8]
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	2180      	movs	r1, #128	; 0x80
 800e20e:	0549      	lsls	r1, r1, #21
 800e210:	430a      	orrs	r2, r1
 800e212:	609a      	str	r2, [r3, #8]
 800e214:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e216:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e21a:	f383 8810 	msr	PRIMASK, r3
}
 800e21e:	46c0      	nop			; (mov r8, r8)
 800e220:	e047      	b.n	800e2b2 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	689a      	ldr	r2, [r3, #8]
 800e226:	2380      	movs	r3, #128	; 0x80
 800e228:	015b      	lsls	r3, r3, #5
 800e22a:	429a      	cmp	r2, r3
 800e22c:	d107      	bne.n	800e23e <UART_Start_Receive_IT+0x1b6>
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	691b      	ldr	r3, [r3, #16]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d103      	bne.n	800e23e <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	4a23      	ldr	r2, [pc, #140]	; (800e2c8 <UART_Start_Receive_IT+0x240>)
 800e23a:	675a      	str	r2, [r3, #116]	; 0x74
 800e23c:	e002      	b.n	800e244 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	4a22      	ldr	r2, [pc, #136]	; (800e2cc <UART_Start_Receive_IT+0x244>)
 800e242:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	691b      	ldr	r3, [r3, #16]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d019      	beq.n	800e280 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e24c:	f3ef 8310 	mrs	r3, PRIMASK
 800e250:	61fb      	str	r3, [r7, #28]
  return(result);
 800e252:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800e254:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e256:	2301      	movs	r3, #1
 800e258:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e25a:	6a3b      	ldr	r3, [r7, #32]
 800e25c:	f383 8810 	msr	PRIMASK, r3
}
 800e260:	46c0      	nop			; (mov r8, r8)
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	681a      	ldr	r2, [r3, #0]
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	2190      	movs	r1, #144	; 0x90
 800e26e:	0049      	lsls	r1, r1, #1
 800e270:	430a      	orrs	r2, r1
 800e272:	601a      	str	r2, [r3, #0]
 800e274:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e276:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e27a:	f383 8810 	msr	PRIMASK, r3
}
 800e27e:	e018      	b.n	800e2b2 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e280:	f3ef 8310 	mrs	r3, PRIMASK
 800e284:	613b      	str	r3, [r7, #16]
  return(result);
 800e286:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e288:	653b      	str	r3, [r7, #80]	; 0x50
 800e28a:	2301      	movs	r3, #1
 800e28c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e28e:	697b      	ldr	r3, [r7, #20]
 800e290:	f383 8810 	msr	PRIMASK, r3
}
 800e294:	46c0      	nop			; (mov r8, r8)
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	681a      	ldr	r2, [r3, #0]
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	2120      	movs	r1, #32
 800e2a2:	430a      	orrs	r2, r1
 800e2a4:	601a      	str	r2, [r3, #0]
 800e2a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2a8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e2aa:	69bb      	ldr	r3, [r7, #24]
 800e2ac:	f383 8810 	msr	PRIMASK, r3
}
 800e2b0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 800e2b2:	2300      	movs	r3, #0
}
 800e2b4:	0018      	movs	r0, r3
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	b018      	add	sp, #96	; 0x60
 800e2ba:	bd80      	pop	{r7, pc}
 800e2bc:	000001ff 	.word	0x000001ff
 800e2c0:	0800e9f9 	.word	0x0800e9f9
 800e2c4:	0800e70d 	.word	0x0800e70d
 800e2c8:	0800e599 	.word	0x0800e599
 800e2cc:	0800e425 	.word	0x0800e425

0800e2d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b08e      	sub	sp, #56	; 0x38
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e2d8:	f3ef 8310 	mrs	r3, PRIMASK
 800e2dc:	617b      	str	r3, [r7, #20]
  return(result);
 800e2de:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e2e0:	637b      	str	r3, [r7, #52]	; 0x34
 800e2e2:	2301      	movs	r3, #1
 800e2e4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e2e6:	69bb      	ldr	r3, [r7, #24]
 800e2e8:	f383 8810 	msr	PRIMASK, r3
}
 800e2ec:	46c0      	nop			; (mov r8, r8)
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	681a      	ldr	r2, [r3, #0]
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	4926      	ldr	r1, [pc, #152]	; (800e394 <UART_EndRxTransfer+0xc4>)
 800e2fa:	400a      	ands	r2, r1
 800e2fc:	601a      	str	r2, [r3, #0]
 800e2fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e300:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e302:	69fb      	ldr	r3, [r7, #28]
 800e304:	f383 8810 	msr	PRIMASK, r3
}
 800e308:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e30a:	f3ef 8310 	mrs	r3, PRIMASK
 800e30e:	623b      	str	r3, [r7, #32]
  return(result);
 800e310:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e312:	633b      	str	r3, [r7, #48]	; 0x30
 800e314:	2301      	movs	r3, #1
 800e316:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e31a:	f383 8810 	msr	PRIMASK, r3
}
 800e31e:	46c0      	nop			; (mov r8, r8)
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	689a      	ldr	r2, [r3, #8]
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	491b      	ldr	r1, [pc, #108]	; (800e398 <UART_EndRxTransfer+0xc8>)
 800e32c:	400a      	ands	r2, r1
 800e32e:	609a      	str	r2, [r3, #8]
 800e330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e332:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e336:	f383 8810 	msr	PRIMASK, r3
}
 800e33a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e340:	2b01      	cmp	r3, #1
 800e342:	d118      	bne.n	800e376 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e344:	f3ef 8310 	mrs	r3, PRIMASK
 800e348:	60bb      	str	r3, [r7, #8]
  return(result);
 800e34a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e34c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e34e:	2301      	movs	r3, #1
 800e350:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	f383 8810 	msr	PRIMASK, r3
}
 800e358:	46c0      	nop			; (mov r8, r8)
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	681a      	ldr	r2, [r3, #0]
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	2110      	movs	r1, #16
 800e366:	438a      	bics	r2, r1
 800e368:	601a      	str	r2, [r3, #0]
 800e36a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e36c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e36e:	693b      	ldr	r3, [r7, #16]
 800e370:	f383 8810 	msr	PRIMASK, r3
}
 800e374:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	228c      	movs	r2, #140	; 0x8c
 800e37a:	2120      	movs	r1, #32
 800e37c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	2200      	movs	r2, #0
 800e382:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	2200      	movs	r2, #0
 800e388:	675a      	str	r2, [r3, #116]	; 0x74
}
 800e38a:	46c0      	nop			; (mov r8, r8)
 800e38c:	46bd      	mov	sp, r7
 800e38e:	b00e      	add	sp, #56	; 0x38
 800e390:	bd80      	pop	{r7, pc}
 800e392:	46c0      	nop			; (mov r8, r8)
 800e394:	fffffedf 	.word	0xfffffedf
 800e398:	effffffe 	.word	0xeffffffe

0800e39c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b084      	sub	sp, #16
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	225e      	movs	r2, #94	; 0x5e
 800e3ae:	2100      	movs	r1, #0
 800e3b0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	2256      	movs	r2, #86	; 0x56
 800e3b6:	2100      	movs	r1, #0
 800e3b8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	0018      	movs	r0, r3
 800e3be:	f7f6 f905 	bl	80045cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e3c2:	46c0      	nop			; (mov r8, r8)
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	b004      	add	sp, #16
 800e3c8:	bd80      	pop	{r7, pc}

0800e3ca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e3ca:	b580      	push	{r7, lr}
 800e3cc:	b086      	sub	sp, #24
 800e3ce:	af00      	add	r7, sp, #0
 800e3d0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e3d2:	f3ef 8310 	mrs	r3, PRIMASK
 800e3d6:	60bb      	str	r3, [r7, #8]
  return(result);
 800e3d8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e3da:	617b      	str	r3, [r7, #20]
 800e3dc:	2301      	movs	r3, #1
 800e3de:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	f383 8810 	msr	PRIMASK, r3
}
 800e3e6:	46c0      	nop			; (mov r8, r8)
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	681a      	ldr	r2, [r3, #0]
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	2140      	movs	r1, #64	; 0x40
 800e3f4:	438a      	bics	r2, r1
 800e3f6:	601a      	str	r2, [r3, #0]
 800e3f8:	697b      	ldr	r3, [r7, #20]
 800e3fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e3fc:	693b      	ldr	r3, [r7, #16]
 800e3fe:	f383 8810 	msr	PRIMASK, r3
}
 800e402:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	2288      	movs	r2, #136	; 0x88
 800e408:	2120      	movs	r1, #32
 800e40a:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	2200      	movs	r2, #0
 800e410:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	0018      	movs	r0, r3
 800e416:	f7ff fab5 	bl	800d984 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e41a:	46c0      	nop			; (mov r8, r8)
 800e41c:	46bd      	mov	sp, r7
 800e41e:	b006      	add	sp, #24
 800e420:	bd80      	pop	{r7, pc}
	...

0800e424 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e424:	b580      	push	{r7, lr}
 800e426:	b090      	sub	sp, #64	; 0x40
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800e42c:	203e      	movs	r0, #62	; 0x3e
 800e42e:	183b      	adds	r3, r7, r0
 800e430:	687a      	ldr	r2, [r7, #4]
 800e432:	2160      	movs	r1, #96	; 0x60
 800e434:	5a52      	ldrh	r2, [r2, r1]
 800e436:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	228c      	movs	r2, #140	; 0x8c
 800e43c:	589b      	ldr	r3, [r3, r2]
 800e43e:	2b22      	cmp	r3, #34	; 0x22
 800e440:	d000      	beq.n	800e444 <UART_RxISR_8BIT+0x20>
 800e442:	e09a      	b.n	800e57a <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e44a:	213c      	movs	r1, #60	; 0x3c
 800e44c:	187b      	adds	r3, r7, r1
 800e44e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e450:	187b      	adds	r3, r7, r1
 800e452:	881b      	ldrh	r3, [r3, #0]
 800e454:	b2da      	uxtb	r2, r3
 800e456:	183b      	adds	r3, r7, r0
 800e458:	881b      	ldrh	r3, [r3, #0]
 800e45a:	b2d9      	uxtb	r1, r3
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e460:	400a      	ands	r2, r1
 800e462:	b2d2      	uxtb	r2, r2
 800e464:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e46a:	1c5a      	adds	r2, r3, #1
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	225e      	movs	r2, #94	; 0x5e
 800e474:	5a9b      	ldrh	r3, [r3, r2]
 800e476:	b29b      	uxth	r3, r3
 800e478:	3b01      	subs	r3, #1
 800e47a:	b299      	uxth	r1, r3
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	225e      	movs	r2, #94	; 0x5e
 800e480:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	225e      	movs	r2, #94	; 0x5e
 800e486:	5a9b      	ldrh	r3, [r3, r2]
 800e488:	b29b      	uxth	r3, r3
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d000      	beq.n	800e490 <UART_RxISR_8BIT+0x6c>
 800e48e:	e07c      	b.n	800e58a <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e490:	f3ef 8310 	mrs	r3, PRIMASK
 800e494:	61bb      	str	r3, [r7, #24]
  return(result);
 800e496:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e498:	63bb      	str	r3, [r7, #56]	; 0x38
 800e49a:	2301      	movs	r3, #1
 800e49c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e49e:	69fb      	ldr	r3, [r7, #28]
 800e4a0:	f383 8810 	msr	PRIMASK, r3
}
 800e4a4:	46c0      	nop			; (mov r8, r8)
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	681a      	ldr	r2, [r3, #0]
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	4938      	ldr	r1, [pc, #224]	; (800e594 <UART_RxISR_8BIT+0x170>)
 800e4b2:	400a      	ands	r2, r1
 800e4b4:	601a      	str	r2, [r3, #0]
 800e4b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4b8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e4ba:	6a3b      	ldr	r3, [r7, #32]
 800e4bc:	f383 8810 	msr	PRIMASK, r3
}
 800e4c0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e4c2:	f3ef 8310 	mrs	r3, PRIMASK
 800e4c6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800e4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e4ca:	637b      	str	r3, [r7, #52]	; 0x34
 800e4cc:	2301      	movs	r3, #1
 800e4ce:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e4d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4d2:	f383 8810 	msr	PRIMASK, r3
}
 800e4d6:	46c0      	nop			; (mov r8, r8)
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	689a      	ldr	r2, [r3, #8]
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	2101      	movs	r1, #1
 800e4e4:	438a      	bics	r2, r1
 800e4e6:	609a      	str	r2, [r3, #8]
 800e4e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e4ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ee:	f383 8810 	msr	PRIMASK, r3
}
 800e4f2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	228c      	movs	r2, #140	; 0x8c
 800e4f8:	2120      	movs	r1, #32
 800e4fa:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	2200      	movs	r2, #0
 800e500:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	2200      	movs	r2, #0
 800e506:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e50c:	2b01      	cmp	r3, #1
 800e50e:	d12f      	bne.n	800e570 <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	2200      	movs	r2, #0
 800e514:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e516:	f3ef 8310 	mrs	r3, PRIMASK
 800e51a:	60fb      	str	r3, [r7, #12]
  return(result);
 800e51c:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e51e:	633b      	str	r3, [r7, #48]	; 0x30
 800e520:	2301      	movs	r3, #1
 800e522:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e524:	693b      	ldr	r3, [r7, #16]
 800e526:	f383 8810 	msr	PRIMASK, r3
}
 800e52a:	46c0      	nop			; (mov r8, r8)
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	681a      	ldr	r2, [r3, #0]
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	2110      	movs	r1, #16
 800e538:	438a      	bics	r2, r1
 800e53a:	601a      	str	r2, [r3, #0]
 800e53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e53e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e540:	697b      	ldr	r3, [r7, #20]
 800e542:	f383 8810 	msr	PRIMASK, r3
}
 800e546:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	69db      	ldr	r3, [r3, #28]
 800e54e:	2210      	movs	r2, #16
 800e550:	4013      	ands	r3, r2
 800e552:	2b10      	cmp	r3, #16
 800e554:	d103      	bne.n	800e55e <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	2210      	movs	r2, #16
 800e55c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	225c      	movs	r2, #92	; 0x5c
 800e562:	5a9a      	ldrh	r2, [r3, r2]
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	0011      	movs	r1, r2
 800e568:	0018      	movs	r0, r3
 800e56a:	f7ff fa13 	bl	800d994 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e56e:	e00c      	b.n	800e58a <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	0018      	movs	r0, r3
 800e574:	f7f6 f862 	bl	800463c <HAL_UART_RxCpltCallback>
}
 800e578:	e007      	b.n	800e58a <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	699a      	ldr	r2, [r3, #24]
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	2108      	movs	r1, #8
 800e586:	430a      	orrs	r2, r1
 800e588:	619a      	str	r2, [r3, #24]
}
 800e58a:	46c0      	nop			; (mov r8, r8)
 800e58c:	46bd      	mov	sp, r7
 800e58e:	b010      	add	sp, #64	; 0x40
 800e590:	bd80      	pop	{r7, pc}
 800e592:	46c0      	nop			; (mov r8, r8)
 800e594:	fffffedf 	.word	0xfffffedf

0800e598 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b090      	sub	sp, #64	; 0x40
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800e5a0:	203e      	movs	r0, #62	; 0x3e
 800e5a2:	183b      	adds	r3, r7, r0
 800e5a4:	687a      	ldr	r2, [r7, #4]
 800e5a6:	2160      	movs	r1, #96	; 0x60
 800e5a8:	5a52      	ldrh	r2, [r2, r1]
 800e5aa:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	228c      	movs	r2, #140	; 0x8c
 800e5b0:	589b      	ldr	r3, [r3, r2]
 800e5b2:	2b22      	cmp	r3, #34	; 0x22
 800e5b4:	d000      	beq.n	800e5b8 <UART_RxISR_16BIT+0x20>
 800e5b6:	e09a      	b.n	800e6ee <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e5be:	213c      	movs	r1, #60	; 0x3c
 800e5c0:	187b      	adds	r3, r7, r1
 800e5c2:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e5c8:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 800e5ca:	187b      	adds	r3, r7, r1
 800e5cc:	183a      	adds	r2, r7, r0
 800e5ce:	881b      	ldrh	r3, [r3, #0]
 800e5d0:	8812      	ldrh	r2, [r2, #0]
 800e5d2:	4013      	ands	r3, r2
 800e5d4:	b29a      	uxth	r2, r3
 800e5d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5d8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e5de:	1c9a      	adds	r2, r3, #2
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	225e      	movs	r2, #94	; 0x5e
 800e5e8:	5a9b      	ldrh	r3, [r3, r2]
 800e5ea:	b29b      	uxth	r3, r3
 800e5ec:	3b01      	subs	r3, #1
 800e5ee:	b299      	uxth	r1, r3
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	225e      	movs	r2, #94	; 0x5e
 800e5f4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	225e      	movs	r2, #94	; 0x5e
 800e5fa:	5a9b      	ldrh	r3, [r3, r2]
 800e5fc:	b29b      	uxth	r3, r3
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d000      	beq.n	800e604 <UART_RxISR_16BIT+0x6c>
 800e602:	e07c      	b.n	800e6fe <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e604:	f3ef 8310 	mrs	r3, PRIMASK
 800e608:	617b      	str	r3, [r7, #20]
  return(result);
 800e60a:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e60c:	637b      	str	r3, [r7, #52]	; 0x34
 800e60e:	2301      	movs	r3, #1
 800e610:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e612:	69bb      	ldr	r3, [r7, #24]
 800e614:	f383 8810 	msr	PRIMASK, r3
}
 800e618:	46c0      	nop			; (mov r8, r8)
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	681a      	ldr	r2, [r3, #0]
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	4938      	ldr	r1, [pc, #224]	; (800e708 <UART_RxISR_16BIT+0x170>)
 800e626:	400a      	ands	r2, r1
 800e628:	601a      	str	r2, [r3, #0]
 800e62a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e62c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e62e:	69fb      	ldr	r3, [r7, #28]
 800e630:	f383 8810 	msr	PRIMASK, r3
}
 800e634:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e636:	f3ef 8310 	mrs	r3, PRIMASK
 800e63a:	623b      	str	r3, [r7, #32]
  return(result);
 800e63c:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e63e:	633b      	str	r3, [r7, #48]	; 0x30
 800e640:	2301      	movs	r3, #1
 800e642:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e646:	f383 8810 	msr	PRIMASK, r3
}
 800e64a:	46c0      	nop			; (mov r8, r8)
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	689a      	ldr	r2, [r3, #8]
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	2101      	movs	r1, #1
 800e658:	438a      	bics	r2, r1
 800e65a:	609a      	str	r2, [r3, #8]
 800e65c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e65e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e662:	f383 8810 	msr	PRIMASK, r3
}
 800e666:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	228c      	movs	r2, #140	; 0x8c
 800e66c:	2120      	movs	r1, #32
 800e66e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	2200      	movs	r2, #0
 800e674:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	2200      	movs	r2, #0
 800e67a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e680:	2b01      	cmp	r3, #1
 800e682:	d12f      	bne.n	800e6e4 <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	2200      	movs	r2, #0
 800e688:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e68a:	f3ef 8310 	mrs	r3, PRIMASK
 800e68e:	60bb      	str	r3, [r7, #8]
  return(result);
 800e690:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e692:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e694:	2301      	movs	r3, #1
 800e696:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	f383 8810 	msr	PRIMASK, r3
}
 800e69e:	46c0      	nop			; (mov r8, r8)
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	681a      	ldr	r2, [r3, #0]
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	2110      	movs	r1, #16
 800e6ac:	438a      	bics	r2, r1
 800e6ae:	601a      	str	r2, [r3, #0]
 800e6b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e6b4:	693b      	ldr	r3, [r7, #16]
 800e6b6:	f383 8810 	msr	PRIMASK, r3
}
 800e6ba:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	69db      	ldr	r3, [r3, #28]
 800e6c2:	2210      	movs	r2, #16
 800e6c4:	4013      	ands	r3, r2
 800e6c6:	2b10      	cmp	r3, #16
 800e6c8:	d103      	bne.n	800e6d2 <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	2210      	movs	r2, #16
 800e6d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	225c      	movs	r2, #92	; 0x5c
 800e6d6:	5a9a      	ldrh	r2, [r3, r2]
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	0011      	movs	r1, r2
 800e6dc:	0018      	movs	r0, r3
 800e6de:	f7ff f959 	bl	800d994 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e6e2:	e00c      	b.n	800e6fe <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	0018      	movs	r0, r3
 800e6e8:	f7f5 ffa8 	bl	800463c <HAL_UART_RxCpltCallback>
}
 800e6ec:	e007      	b.n	800e6fe <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	699a      	ldr	r2, [r3, #24]
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	2108      	movs	r1, #8
 800e6fa:	430a      	orrs	r2, r1
 800e6fc:	619a      	str	r2, [r3, #24]
}
 800e6fe:	46c0      	nop			; (mov r8, r8)
 800e700:	46bd      	mov	sp, r7
 800e702:	b010      	add	sp, #64	; 0x40
 800e704:	bd80      	pop	{r7, pc}
 800e706:	46c0      	nop			; (mov r8, r8)
 800e708:	fffffedf 	.word	0xfffffedf

0800e70c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e70c:	b580      	push	{r7, lr}
 800e70e:	b09c      	sub	sp, #112	; 0x70
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800e714:	236a      	movs	r3, #106	; 0x6a
 800e716:	18fb      	adds	r3, r7, r3
 800e718:	687a      	ldr	r2, [r7, #4]
 800e71a:	2160      	movs	r1, #96	; 0x60
 800e71c:	5a52      	ldrh	r2, [r2, r1]
 800e71e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	69db      	ldr	r3, [r3, #28]
 800e726:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	689b      	ldr	r3, [r3, #8]
 800e736:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	228c      	movs	r2, #140	; 0x8c
 800e73c:	589b      	ldr	r3, [r3, r2]
 800e73e:	2b22      	cmp	r3, #34	; 0x22
 800e740:	d000      	beq.n	800e744 <UART_RxISR_8BIT_FIFOEN+0x38>
 800e742:	e144      	b.n	800e9ce <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e744:	235e      	movs	r3, #94	; 0x5e
 800e746:	18fb      	adds	r3, r7, r3
 800e748:	687a      	ldr	r2, [r7, #4]
 800e74a:	2168      	movs	r1, #104	; 0x68
 800e74c:	5a52      	ldrh	r2, [r2, r1]
 800e74e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e750:	e0eb      	b.n	800e92a <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e758:	215c      	movs	r1, #92	; 0x5c
 800e75a:	187b      	adds	r3, r7, r1
 800e75c:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e75e:	187b      	adds	r3, r7, r1
 800e760:	881b      	ldrh	r3, [r3, #0]
 800e762:	b2da      	uxtb	r2, r3
 800e764:	236a      	movs	r3, #106	; 0x6a
 800e766:	18fb      	adds	r3, r7, r3
 800e768:	881b      	ldrh	r3, [r3, #0]
 800e76a:	b2d9      	uxtb	r1, r3
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e770:	400a      	ands	r2, r1
 800e772:	b2d2      	uxtb	r2, r2
 800e774:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e77a:	1c5a      	adds	r2, r3, #1
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	225e      	movs	r2, #94	; 0x5e
 800e784:	5a9b      	ldrh	r3, [r3, r2]
 800e786:	b29b      	uxth	r3, r3
 800e788:	3b01      	subs	r3, #1
 800e78a:	b299      	uxth	r1, r3
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	225e      	movs	r2, #94	; 0x5e
 800e790:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	69db      	ldr	r3, [r3, #28]
 800e798:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e79a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e79c:	2207      	movs	r2, #7
 800e79e:	4013      	ands	r3, r2
 800e7a0:	d049      	beq.n	800e836 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e7a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7a4:	2201      	movs	r2, #1
 800e7a6:	4013      	ands	r3, r2
 800e7a8:	d010      	beq.n	800e7cc <UART_RxISR_8BIT_FIFOEN+0xc0>
 800e7aa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e7ac:	2380      	movs	r3, #128	; 0x80
 800e7ae:	005b      	lsls	r3, r3, #1
 800e7b0:	4013      	ands	r3, r2
 800e7b2:	d00b      	beq.n	800e7cc <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	2201      	movs	r2, #1
 800e7ba:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	2290      	movs	r2, #144	; 0x90
 800e7c0:	589b      	ldr	r3, [r3, r2]
 800e7c2:	2201      	movs	r2, #1
 800e7c4:	431a      	orrs	r2, r3
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	2190      	movs	r1, #144	; 0x90
 800e7ca:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e7cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7ce:	2202      	movs	r2, #2
 800e7d0:	4013      	ands	r3, r2
 800e7d2:	d00f      	beq.n	800e7f4 <UART_RxISR_8BIT_FIFOEN+0xe8>
 800e7d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e7d6:	2201      	movs	r2, #1
 800e7d8:	4013      	ands	r3, r2
 800e7da:	d00b      	beq.n	800e7f4 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	2202      	movs	r2, #2
 800e7e2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	2290      	movs	r2, #144	; 0x90
 800e7e8:	589b      	ldr	r3, [r3, r2]
 800e7ea:	2204      	movs	r2, #4
 800e7ec:	431a      	orrs	r2, r3
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	2190      	movs	r1, #144	; 0x90
 800e7f2:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e7f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7f6:	2204      	movs	r2, #4
 800e7f8:	4013      	ands	r3, r2
 800e7fa:	d00f      	beq.n	800e81c <UART_RxISR_8BIT_FIFOEN+0x110>
 800e7fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e7fe:	2201      	movs	r2, #1
 800e800:	4013      	ands	r3, r2
 800e802:	d00b      	beq.n	800e81c <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	2204      	movs	r2, #4
 800e80a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	2290      	movs	r2, #144	; 0x90
 800e810:	589b      	ldr	r3, [r3, r2]
 800e812:	2202      	movs	r2, #2
 800e814:	431a      	orrs	r2, r3
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	2190      	movs	r1, #144	; 0x90
 800e81a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	2290      	movs	r2, #144	; 0x90
 800e820:	589b      	ldr	r3, [r3, r2]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d007      	beq.n	800e836 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	0018      	movs	r0, r3
 800e82a:	f7f5 fecf 	bl	80045cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	2290      	movs	r2, #144	; 0x90
 800e832:	2100      	movs	r1, #0
 800e834:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	225e      	movs	r2, #94	; 0x5e
 800e83a:	5a9b      	ldrh	r3, [r3, r2]
 800e83c:	b29b      	uxth	r3, r3
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d173      	bne.n	800e92a <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e842:	f3ef 8310 	mrs	r3, PRIMASK
 800e846:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800e848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e84a:	65bb      	str	r3, [r7, #88]	; 0x58
 800e84c:	2301      	movs	r3, #1
 800e84e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e852:	f383 8810 	msr	PRIMASK, r3
}
 800e856:	46c0      	nop			; (mov r8, r8)
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	681a      	ldr	r2, [r3, #0]
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	4961      	ldr	r1, [pc, #388]	; (800e9e8 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 800e864:	400a      	ands	r2, r1
 800e866:	601a      	str	r2, [r3, #0]
 800e868:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e86a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e86c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e86e:	f383 8810 	msr	PRIMASK, r3
}
 800e872:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e874:	f3ef 8310 	mrs	r3, PRIMASK
 800e878:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 800e87a:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e87c:	657b      	str	r3, [r7, #84]	; 0x54
 800e87e:	2301      	movs	r3, #1
 800e880:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e884:	f383 8810 	msr	PRIMASK, r3
}
 800e888:	46c0      	nop			; (mov r8, r8)
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	689a      	ldr	r2, [r3, #8]
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	4955      	ldr	r1, [pc, #340]	; (800e9ec <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 800e896:	400a      	ands	r2, r1
 800e898:	609a      	str	r2, [r3, #8]
 800e89a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e89c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e89e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8a0:	f383 8810 	msr	PRIMASK, r3
}
 800e8a4:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	228c      	movs	r2, #140	; 0x8c
 800e8aa:	2120      	movs	r1, #32
 800e8ac:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	2200      	movs	r2, #0
 800e8b2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	2200      	movs	r2, #0
 800e8b8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8be:	2b01      	cmp	r3, #1
 800e8c0:	d12f      	bne.n	800e922 <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e8c8:	f3ef 8310 	mrs	r3, PRIMASK
 800e8cc:	623b      	str	r3, [r7, #32]
  return(result);
 800e8ce:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e8d0:	653b      	str	r3, [r7, #80]	; 0x50
 800e8d2:	2301      	movs	r3, #1
 800e8d4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e8d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8d8:	f383 8810 	msr	PRIMASK, r3
}
 800e8dc:	46c0      	nop			; (mov r8, r8)
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	681a      	ldr	r2, [r3, #0]
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	2110      	movs	r1, #16
 800e8ea:	438a      	bics	r2, r1
 800e8ec:	601a      	str	r2, [r3, #0]
 800e8ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8f0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e8f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8f4:	f383 8810 	msr	PRIMASK, r3
}
 800e8f8:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	69db      	ldr	r3, [r3, #28]
 800e900:	2210      	movs	r2, #16
 800e902:	4013      	ands	r3, r2
 800e904:	2b10      	cmp	r3, #16
 800e906:	d103      	bne.n	800e910 <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	2210      	movs	r2, #16
 800e90e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	225c      	movs	r2, #92	; 0x5c
 800e914:	5a9a      	ldrh	r2, [r3, r2]
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	0011      	movs	r1, r2
 800e91a:	0018      	movs	r0, r3
 800e91c:	f7ff f83a 	bl	800d994 <HAL_UARTEx_RxEventCallback>
 800e920:	e003      	b.n	800e92a <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	0018      	movs	r0, r3
 800e926:	f7f5 fe89 	bl	800463c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e92a:	235e      	movs	r3, #94	; 0x5e
 800e92c:	18fb      	adds	r3, r7, r3
 800e92e:	881b      	ldrh	r3, [r3, #0]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d004      	beq.n	800e93e <UART_RxISR_8BIT_FIFOEN+0x232>
 800e934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e936:	2220      	movs	r2, #32
 800e938:	4013      	ands	r3, r2
 800e93a:	d000      	beq.n	800e93e <UART_RxISR_8BIT_FIFOEN+0x232>
 800e93c:	e709      	b.n	800e752 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e93e:	204e      	movs	r0, #78	; 0x4e
 800e940:	183b      	adds	r3, r7, r0
 800e942:	687a      	ldr	r2, [r7, #4]
 800e944:	215e      	movs	r1, #94	; 0x5e
 800e946:	5a52      	ldrh	r2, [r2, r1]
 800e948:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e94a:	0001      	movs	r1, r0
 800e94c:	187b      	adds	r3, r7, r1
 800e94e:	881b      	ldrh	r3, [r3, #0]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d044      	beq.n	800e9de <UART_RxISR_8BIT_FIFOEN+0x2d2>
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	2268      	movs	r2, #104	; 0x68
 800e958:	5a9b      	ldrh	r3, [r3, r2]
 800e95a:	187a      	adds	r2, r7, r1
 800e95c:	8812      	ldrh	r2, [r2, #0]
 800e95e:	429a      	cmp	r2, r3
 800e960:	d23d      	bcs.n	800e9de <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e962:	f3ef 8310 	mrs	r3, PRIMASK
 800e966:	60bb      	str	r3, [r7, #8]
  return(result);
 800e968:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e96a:	64bb      	str	r3, [r7, #72]	; 0x48
 800e96c:	2301      	movs	r3, #1
 800e96e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	f383 8810 	msr	PRIMASK, r3
}
 800e976:	46c0      	nop			; (mov r8, r8)
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	689a      	ldr	r2, [r3, #8]
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	491b      	ldr	r1, [pc, #108]	; (800e9f0 <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 800e984:	400a      	ands	r2, r1
 800e986:	609a      	str	r2, [r3, #8]
 800e988:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e98a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e98c:	693b      	ldr	r3, [r7, #16]
 800e98e:	f383 8810 	msr	PRIMASK, r3
}
 800e992:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	4a17      	ldr	r2, [pc, #92]	; (800e9f4 <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 800e998:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e99a:	f3ef 8310 	mrs	r3, PRIMASK
 800e99e:	617b      	str	r3, [r7, #20]
  return(result);
 800e9a0:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e9a2:	647b      	str	r3, [r7, #68]	; 0x44
 800e9a4:	2301      	movs	r3, #1
 800e9a6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e9a8:	69bb      	ldr	r3, [r7, #24]
 800e9aa:	f383 8810 	msr	PRIMASK, r3
}
 800e9ae:	46c0      	nop			; (mov r8, r8)
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	681a      	ldr	r2, [r3, #0]
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	2120      	movs	r1, #32
 800e9bc:	430a      	orrs	r2, r1
 800e9be:	601a      	str	r2, [r3, #0]
 800e9c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e9c2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e9c4:	69fb      	ldr	r3, [r7, #28]
 800e9c6:	f383 8810 	msr	PRIMASK, r3
}
 800e9ca:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e9cc:	e007      	b.n	800e9de <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	699a      	ldr	r2, [r3, #24]
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	2108      	movs	r1, #8
 800e9da:	430a      	orrs	r2, r1
 800e9dc:	619a      	str	r2, [r3, #24]
}
 800e9de:	46c0      	nop			; (mov r8, r8)
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	b01c      	add	sp, #112	; 0x70
 800e9e4:	bd80      	pop	{r7, pc}
 800e9e6:	46c0      	nop			; (mov r8, r8)
 800e9e8:	fffffeff 	.word	0xfffffeff
 800e9ec:	effffffe 	.word	0xeffffffe
 800e9f0:	efffffff 	.word	0xefffffff
 800e9f4:	0800e425 	.word	0x0800e425

0800e9f8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b09e      	sub	sp, #120	; 0x78
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800ea00:	2372      	movs	r3, #114	; 0x72
 800ea02:	18fb      	adds	r3, r7, r3
 800ea04:	687a      	ldr	r2, [r7, #4]
 800ea06:	2160      	movs	r1, #96	; 0x60
 800ea08:	5a52      	ldrh	r2, [r2, r1]
 800ea0a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	69db      	ldr	r3, [r3, #28]
 800ea12:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	689b      	ldr	r3, [r3, #8]
 800ea22:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	228c      	movs	r2, #140	; 0x8c
 800ea28:	589b      	ldr	r3, [r3, r2]
 800ea2a:	2b22      	cmp	r3, #34	; 0x22
 800ea2c:	d000      	beq.n	800ea30 <UART_RxISR_16BIT_FIFOEN+0x38>
 800ea2e:	e144      	b.n	800ecba <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ea30:	2366      	movs	r3, #102	; 0x66
 800ea32:	18fb      	adds	r3, r7, r3
 800ea34:	687a      	ldr	r2, [r7, #4]
 800ea36:	2168      	movs	r1, #104	; 0x68
 800ea38:	5a52      	ldrh	r2, [r2, r1]
 800ea3a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ea3c:	e0eb      	b.n	800ec16 <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ea44:	2164      	movs	r1, #100	; 0x64
 800ea46:	187b      	adds	r3, r7, r1
 800ea48:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea4e:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 800ea50:	187b      	adds	r3, r7, r1
 800ea52:	2272      	movs	r2, #114	; 0x72
 800ea54:	18ba      	adds	r2, r7, r2
 800ea56:	881b      	ldrh	r3, [r3, #0]
 800ea58:	8812      	ldrh	r2, [r2, #0]
 800ea5a:	4013      	ands	r3, r2
 800ea5c:	b29a      	uxth	r2, r3
 800ea5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ea60:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea66:	1c9a      	adds	r2, r3, #2
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	225e      	movs	r2, #94	; 0x5e
 800ea70:	5a9b      	ldrh	r3, [r3, r2]
 800ea72:	b29b      	uxth	r3, r3
 800ea74:	3b01      	subs	r3, #1
 800ea76:	b299      	uxth	r1, r3
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	225e      	movs	r2, #94	; 0x5e
 800ea7c:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	69db      	ldr	r3, [r3, #28]
 800ea84:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ea86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ea88:	2207      	movs	r2, #7
 800ea8a:	4013      	ands	r3, r2
 800ea8c:	d049      	beq.n	800eb22 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ea8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ea90:	2201      	movs	r2, #1
 800ea92:	4013      	ands	r3, r2
 800ea94:	d010      	beq.n	800eab8 <UART_RxISR_16BIT_FIFOEN+0xc0>
 800ea96:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ea98:	2380      	movs	r3, #128	; 0x80
 800ea9a:	005b      	lsls	r3, r3, #1
 800ea9c:	4013      	ands	r3, r2
 800ea9e:	d00b      	beq.n	800eab8 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	2201      	movs	r2, #1
 800eaa6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	2290      	movs	r2, #144	; 0x90
 800eaac:	589b      	ldr	r3, [r3, r2]
 800eaae:	2201      	movs	r2, #1
 800eab0:	431a      	orrs	r2, r3
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	2190      	movs	r1, #144	; 0x90
 800eab6:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800eab8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800eaba:	2202      	movs	r2, #2
 800eabc:	4013      	ands	r3, r2
 800eabe:	d00f      	beq.n	800eae0 <UART_RxISR_16BIT_FIFOEN+0xe8>
 800eac0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800eac2:	2201      	movs	r2, #1
 800eac4:	4013      	ands	r3, r2
 800eac6:	d00b      	beq.n	800eae0 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	2202      	movs	r2, #2
 800eace:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	2290      	movs	r2, #144	; 0x90
 800ead4:	589b      	ldr	r3, [r3, r2]
 800ead6:	2204      	movs	r2, #4
 800ead8:	431a      	orrs	r2, r3
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	2190      	movs	r1, #144	; 0x90
 800eade:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800eae0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800eae2:	2204      	movs	r2, #4
 800eae4:	4013      	ands	r3, r2
 800eae6:	d00f      	beq.n	800eb08 <UART_RxISR_16BIT_FIFOEN+0x110>
 800eae8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800eaea:	2201      	movs	r2, #1
 800eaec:	4013      	ands	r3, r2
 800eaee:	d00b      	beq.n	800eb08 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	2204      	movs	r2, #4
 800eaf6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	2290      	movs	r2, #144	; 0x90
 800eafc:	589b      	ldr	r3, [r3, r2]
 800eafe:	2202      	movs	r2, #2
 800eb00:	431a      	orrs	r2, r3
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	2190      	movs	r1, #144	; 0x90
 800eb06:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	2290      	movs	r2, #144	; 0x90
 800eb0c:	589b      	ldr	r3, [r3, r2]
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d007      	beq.n	800eb22 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	0018      	movs	r0, r3
 800eb16:	f7f5 fd59 	bl	80045cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	2290      	movs	r2, #144	; 0x90
 800eb1e:	2100      	movs	r1, #0
 800eb20:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	225e      	movs	r2, #94	; 0x5e
 800eb26:	5a9b      	ldrh	r3, [r3, r2]
 800eb28:	b29b      	uxth	r3, r3
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d173      	bne.n	800ec16 <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eb2e:	f3ef 8310 	mrs	r3, PRIMASK
 800eb32:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800eb34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800eb36:	65fb      	str	r3, [r7, #92]	; 0x5c
 800eb38:	2301      	movs	r3, #1
 800eb3a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eb3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb3e:	f383 8810 	msr	PRIMASK, r3
}
 800eb42:	46c0      	nop			; (mov r8, r8)
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	681a      	ldr	r2, [r3, #0]
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	4961      	ldr	r1, [pc, #388]	; (800ecd4 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 800eb50:	400a      	ands	r2, r1
 800eb52:	601a      	str	r2, [r3, #0]
 800eb54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eb56:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eb58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb5a:	f383 8810 	msr	PRIMASK, r3
}
 800eb5e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eb60:	f3ef 8310 	mrs	r3, PRIMASK
 800eb64:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800eb66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800eb68:	65bb      	str	r3, [r7, #88]	; 0x58
 800eb6a:	2301      	movs	r3, #1
 800eb6c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eb6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb70:	f383 8810 	msr	PRIMASK, r3
}
 800eb74:	46c0      	nop			; (mov r8, r8)
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	689a      	ldr	r2, [r3, #8]
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	4955      	ldr	r1, [pc, #340]	; (800ecd8 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 800eb82:	400a      	ands	r2, r1
 800eb84:	609a      	str	r2, [r3, #8]
 800eb86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eb88:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eb8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb8c:	f383 8810 	msr	PRIMASK, r3
}
 800eb90:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	228c      	movs	r2, #140	; 0x8c
 800eb96:	2120      	movs	r1, #32
 800eb98:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	2200      	movs	r2, #0
 800eb9e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	2200      	movs	r2, #0
 800eba4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebaa:	2b01      	cmp	r3, #1
 800ebac:	d12f      	bne.n	800ec0e <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	2200      	movs	r2, #0
 800ebb2:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ebb4:	f3ef 8310 	mrs	r3, PRIMASK
 800ebb8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800ebba:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ebbc:	657b      	str	r3, [r7, #84]	; 0x54
 800ebbe:	2301      	movs	r3, #1
 800ebc0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ebc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebc4:	f383 8810 	msr	PRIMASK, r3
}
 800ebc8:	46c0      	nop			; (mov r8, r8)
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	681a      	ldr	r2, [r3, #0]
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	2110      	movs	r1, #16
 800ebd6:	438a      	bics	r2, r1
 800ebd8:	601a      	str	r2, [r3, #0]
 800ebda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ebdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ebde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebe0:	f383 8810 	msr	PRIMASK, r3
}
 800ebe4:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	69db      	ldr	r3, [r3, #28]
 800ebec:	2210      	movs	r2, #16
 800ebee:	4013      	ands	r3, r2
 800ebf0:	2b10      	cmp	r3, #16
 800ebf2:	d103      	bne.n	800ebfc <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	2210      	movs	r2, #16
 800ebfa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	225c      	movs	r2, #92	; 0x5c
 800ec00:	5a9a      	ldrh	r2, [r3, r2]
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	0011      	movs	r1, r2
 800ec06:	0018      	movs	r0, r3
 800ec08:	f7fe fec4 	bl	800d994 <HAL_UARTEx_RxEventCallback>
 800ec0c:	e003      	b.n	800ec16 <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	0018      	movs	r0, r3
 800ec12:	f7f5 fd13 	bl	800463c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ec16:	2366      	movs	r3, #102	; 0x66
 800ec18:	18fb      	adds	r3, r7, r3
 800ec1a:	881b      	ldrh	r3, [r3, #0]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d004      	beq.n	800ec2a <UART_RxISR_16BIT_FIFOEN+0x232>
 800ec20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ec22:	2220      	movs	r2, #32
 800ec24:	4013      	ands	r3, r2
 800ec26:	d000      	beq.n	800ec2a <UART_RxISR_16BIT_FIFOEN+0x232>
 800ec28:	e709      	b.n	800ea3e <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ec2a:	2052      	movs	r0, #82	; 0x52
 800ec2c:	183b      	adds	r3, r7, r0
 800ec2e:	687a      	ldr	r2, [r7, #4]
 800ec30:	215e      	movs	r1, #94	; 0x5e
 800ec32:	5a52      	ldrh	r2, [r2, r1]
 800ec34:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ec36:	0001      	movs	r1, r0
 800ec38:	187b      	adds	r3, r7, r1
 800ec3a:	881b      	ldrh	r3, [r3, #0]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d044      	beq.n	800ecca <UART_RxISR_16BIT_FIFOEN+0x2d2>
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	2268      	movs	r2, #104	; 0x68
 800ec44:	5a9b      	ldrh	r3, [r3, r2]
 800ec46:	187a      	adds	r2, r7, r1
 800ec48:	8812      	ldrh	r2, [r2, #0]
 800ec4a:	429a      	cmp	r2, r3
 800ec4c:	d23d      	bcs.n	800ecca <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ec4e:	f3ef 8310 	mrs	r3, PRIMASK
 800ec52:	60fb      	str	r3, [r7, #12]
  return(result);
 800ec54:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ec56:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ec58:	2301      	movs	r3, #1
 800ec5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ec5c:	693b      	ldr	r3, [r7, #16]
 800ec5e:	f383 8810 	msr	PRIMASK, r3
}
 800ec62:	46c0      	nop			; (mov r8, r8)
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	689a      	ldr	r2, [r3, #8]
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	491b      	ldr	r1, [pc, #108]	; (800ecdc <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 800ec70:	400a      	ands	r2, r1
 800ec72:	609a      	str	r2, [r3, #8]
 800ec74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec76:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ec78:	697b      	ldr	r3, [r7, #20]
 800ec7a:	f383 8810 	msr	PRIMASK, r3
}
 800ec7e:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	4a17      	ldr	r2, [pc, #92]	; (800ece0 <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 800ec84:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ec86:	f3ef 8310 	mrs	r3, PRIMASK
 800ec8a:	61bb      	str	r3, [r7, #24]
  return(result);
 800ec8c:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ec8e:	64bb      	str	r3, [r7, #72]	; 0x48
 800ec90:	2301      	movs	r3, #1
 800ec92:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ec94:	69fb      	ldr	r3, [r7, #28]
 800ec96:	f383 8810 	msr	PRIMASK, r3
}
 800ec9a:	46c0      	nop			; (mov r8, r8)
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	681a      	ldr	r2, [r3, #0]
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	2120      	movs	r1, #32
 800eca8:	430a      	orrs	r2, r1
 800ecaa:	601a      	str	r2, [r3, #0]
 800ecac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ecae:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ecb0:	6a3b      	ldr	r3, [r7, #32]
 800ecb2:	f383 8810 	msr	PRIMASK, r3
}
 800ecb6:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ecb8:	e007      	b.n	800ecca <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	699a      	ldr	r2, [r3, #24]
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	2108      	movs	r1, #8
 800ecc6:	430a      	orrs	r2, r1
 800ecc8:	619a      	str	r2, [r3, #24]
}
 800ecca:	46c0      	nop			; (mov r8, r8)
 800eccc:	46bd      	mov	sp, r7
 800ecce:	b01e      	add	sp, #120	; 0x78
 800ecd0:	bd80      	pop	{r7, pc}
 800ecd2:	46c0      	nop			; (mov r8, r8)
 800ecd4:	fffffeff 	.word	0xfffffeff
 800ecd8:	effffffe 	.word	0xeffffffe
 800ecdc:	efffffff 	.word	0xefffffff
 800ece0:	0800e599 	.word	0x0800e599

0800ece4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b082      	sub	sp, #8
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ecec:	46c0      	nop			; (mov r8, r8)
 800ecee:	46bd      	mov	sp, r7
 800ecf0:	b002      	add	sp, #8
 800ecf2:	bd80      	pop	{r7, pc}

0800ecf4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ecf4:	b580      	push	{r7, lr}
 800ecf6:	b082      	sub	sp, #8
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ecfc:	46c0      	nop			; (mov r8, r8)
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	b002      	add	sp, #8
 800ed02:	bd80      	pop	{r7, pc}

0800ed04 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ed04:	b580      	push	{r7, lr}
 800ed06:	b082      	sub	sp, #8
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ed0c:	46c0      	nop			; (mov r8, r8)
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	b002      	add	sp, #8
 800ed12:	bd80      	pop	{r7, pc}

0800ed14 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b084      	sub	sp, #16
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	2284      	movs	r2, #132	; 0x84
 800ed20:	5c9b      	ldrb	r3, [r3, r2]
 800ed22:	2b01      	cmp	r3, #1
 800ed24:	d101      	bne.n	800ed2a <HAL_UARTEx_DisableFifoMode+0x16>
 800ed26:	2302      	movs	r3, #2
 800ed28:	e027      	b.n	800ed7a <HAL_UARTEx_DisableFifoMode+0x66>
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	2284      	movs	r2, #132	; 0x84
 800ed2e:	2101      	movs	r1, #1
 800ed30:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	2288      	movs	r2, #136	; 0x88
 800ed36:	2124      	movs	r1, #36	; 0x24
 800ed38:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	681a      	ldr	r2, [r3, #0]
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	2101      	movs	r1, #1
 800ed4e:	438a      	bics	r2, r1
 800ed50:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	4a0b      	ldr	r2, [pc, #44]	; (800ed84 <HAL_UARTEx_DisableFifoMode+0x70>)
 800ed56:	4013      	ands	r3, r2
 800ed58:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	68fa      	ldr	r2, [r7, #12]
 800ed66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	2288      	movs	r2, #136	; 0x88
 800ed6c:	2120      	movs	r1, #32
 800ed6e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	2284      	movs	r2, #132	; 0x84
 800ed74:	2100      	movs	r1, #0
 800ed76:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ed78:	2300      	movs	r3, #0
}
 800ed7a:	0018      	movs	r0, r3
 800ed7c:	46bd      	mov	sp, r7
 800ed7e:	b004      	add	sp, #16
 800ed80:	bd80      	pop	{r7, pc}
 800ed82:	46c0      	nop			; (mov r8, r8)
 800ed84:	dfffffff 	.word	0xdfffffff

0800ed88 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	b084      	sub	sp, #16
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	6078      	str	r0, [r7, #4]
 800ed90:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	2284      	movs	r2, #132	; 0x84
 800ed96:	5c9b      	ldrb	r3, [r3, r2]
 800ed98:	2b01      	cmp	r3, #1
 800ed9a:	d101      	bne.n	800eda0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ed9c:	2302      	movs	r3, #2
 800ed9e:	e02e      	b.n	800edfe <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	2284      	movs	r2, #132	; 0x84
 800eda4:	2101      	movs	r1, #1
 800eda6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	2288      	movs	r2, #136	; 0x88
 800edac:	2124      	movs	r1, #36	; 0x24
 800edae:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	681a      	ldr	r2, [r3, #0]
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	2101      	movs	r1, #1
 800edc4:	438a      	bics	r2, r1
 800edc6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	689b      	ldr	r3, [r3, #8]
 800edce:	00db      	lsls	r3, r3, #3
 800edd0:	08d9      	lsrs	r1, r3, #3
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	683a      	ldr	r2, [r7, #0]
 800edd8:	430a      	orrs	r2, r1
 800edda:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	0018      	movs	r0, r3
 800ede0:	f000 f854 	bl	800ee8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	68fa      	ldr	r2, [r7, #12]
 800edea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	2288      	movs	r2, #136	; 0x88
 800edf0:	2120      	movs	r1, #32
 800edf2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	2284      	movs	r2, #132	; 0x84
 800edf8:	2100      	movs	r1, #0
 800edfa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800edfc:	2300      	movs	r3, #0
}
 800edfe:	0018      	movs	r0, r3
 800ee00:	46bd      	mov	sp, r7
 800ee02:	b004      	add	sp, #16
 800ee04:	bd80      	pop	{r7, pc}
	...

0800ee08 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ee08:	b580      	push	{r7, lr}
 800ee0a:	b084      	sub	sp, #16
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	6078      	str	r0, [r7, #4]
 800ee10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	2284      	movs	r2, #132	; 0x84
 800ee16:	5c9b      	ldrb	r3, [r3, r2]
 800ee18:	2b01      	cmp	r3, #1
 800ee1a:	d101      	bne.n	800ee20 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ee1c:	2302      	movs	r3, #2
 800ee1e:	e02f      	b.n	800ee80 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	2284      	movs	r2, #132	; 0x84
 800ee24:	2101      	movs	r1, #1
 800ee26:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	2288      	movs	r2, #136	; 0x88
 800ee2c:	2124      	movs	r1, #36	; 0x24
 800ee2e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	681a      	ldr	r2, [r3, #0]
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	2101      	movs	r1, #1
 800ee44:	438a      	bics	r2, r1
 800ee46:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	689b      	ldr	r3, [r3, #8]
 800ee4e:	4a0e      	ldr	r2, [pc, #56]	; (800ee88 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800ee50:	4013      	ands	r3, r2
 800ee52:	0019      	movs	r1, r3
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	683a      	ldr	r2, [r7, #0]
 800ee5a:	430a      	orrs	r2, r1
 800ee5c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	0018      	movs	r0, r3
 800ee62:	f000 f813 	bl	800ee8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	68fa      	ldr	r2, [r7, #12]
 800ee6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	2288      	movs	r2, #136	; 0x88
 800ee72:	2120      	movs	r1, #32
 800ee74:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	2284      	movs	r2, #132	; 0x84
 800ee7a:	2100      	movs	r1, #0
 800ee7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ee7e:	2300      	movs	r3, #0
}
 800ee80:	0018      	movs	r0, r3
 800ee82:	46bd      	mov	sp, r7
 800ee84:	b004      	add	sp, #16
 800ee86:	bd80      	pop	{r7, pc}
 800ee88:	f1ffffff 	.word	0xf1ffffff

0800ee8c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ee8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee8e:	b085      	sub	sp, #20
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d108      	bne.n	800eeae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	226a      	movs	r2, #106	; 0x6a
 800eea0:	2101      	movs	r1, #1
 800eea2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	2268      	movs	r2, #104	; 0x68
 800eea8:	2101      	movs	r1, #1
 800eeaa:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800eeac:	e043      	b.n	800ef36 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800eeae:	260f      	movs	r6, #15
 800eeb0:	19bb      	adds	r3, r7, r6
 800eeb2:	2208      	movs	r2, #8
 800eeb4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800eeb6:	200e      	movs	r0, #14
 800eeb8:	183b      	adds	r3, r7, r0
 800eeba:	2208      	movs	r2, #8
 800eebc:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	689b      	ldr	r3, [r3, #8]
 800eec4:	0e5b      	lsrs	r3, r3, #25
 800eec6:	b2da      	uxtb	r2, r3
 800eec8:	240d      	movs	r4, #13
 800eeca:	193b      	adds	r3, r7, r4
 800eecc:	2107      	movs	r1, #7
 800eece:	400a      	ands	r2, r1
 800eed0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	689b      	ldr	r3, [r3, #8]
 800eed8:	0f5b      	lsrs	r3, r3, #29
 800eeda:	b2da      	uxtb	r2, r3
 800eedc:	250c      	movs	r5, #12
 800eede:	197b      	adds	r3, r7, r5
 800eee0:	2107      	movs	r1, #7
 800eee2:	400a      	ands	r2, r1
 800eee4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800eee6:	183b      	adds	r3, r7, r0
 800eee8:	781b      	ldrb	r3, [r3, #0]
 800eeea:	197a      	adds	r2, r7, r5
 800eeec:	7812      	ldrb	r2, [r2, #0]
 800eeee:	4914      	ldr	r1, [pc, #80]	; (800ef40 <UARTEx_SetNbDataToProcess+0xb4>)
 800eef0:	5c8a      	ldrb	r2, [r1, r2]
 800eef2:	435a      	muls	r2, r3
 800eef4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800eef6:	197b      	adds	r3, r7, r5
 800eef8:	781b      	ldrb	r3, [r3, #0]
 800eefa:	4a12      	ldr	r2, [pc, #72]	; (800ef44 <UARTEx_SetNbDataToProcess+0xb8>)
 800eefc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800eefe:	0019      	movs	r1, r3
 800ef00:	f7f1 f9ae 	bl	8000260 <__divsi3>
 800ef04:	0003      	movs	r3, r0
 800ef06:	b299      	uxth	r1, r3
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	226a      	movs	r2, #106	; 0x6a
 800ef0c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ef0e:	19bb      	adds	r3, r7, r6
 800ef10:	781b      	ldrb	r3, [r3, #0]
 800ef12:	193a      	adds	r2, r7, r4
 800ef14:	7812      	ldrb	r2, [r2, #0]
 800ef16:	490a      	ldr	r1, [pc, #40]	; (800ef40 <UARTEx_SetNbDataToProcess+0xb4>)
 800ef18:	5c8a      	ldrb	r2, [r1, r2]
 800ef1a:	435a      	muls	r2, r3
 800ef1c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800ef1e:	193b      	adds	r3, r7, r4
 800ef20:	781b      	ldrb	r3, [r3, #0]
 800ef22:	4a08      	ldr	r2, [pc, #32]	; (800ef44 <UARTEx_SetNbDataToProcess+0xb8>)
 800ef24:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ef26:	0019      	movs	r1, r3
 800ef28:	f7f1 f99a 	bl	8000260 <__divsi3>
 800ef2c:	0003      	movs	r3, r0
 800ef2e:	b299      	uxth	r1, r3
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	2268      	movs	r2, #104	; 0x68
 800ef34:	5299      	strh	r1, [r3, r2]
}
 800ef36:	46c0      	nop			; (mov r8, r8)
 800ef38:	46bd      	mov	sp, r7
 800ef3a:	b005      	add	sp, #20
 800ef3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef3e:	46c0      	nop			; (mov r8, r8)
 800ef40:	08013a00 	.word	0x08013a00
 800ef44:	08013a08 	.word	0x08013a08

0800ef48 <atoi>:
 800ef48:	b510      	push	{r4, lr}
 800ef4a:	220a      	movs	r2, #10
 800ef4c:	2100      	movs	r1, #0
 800ef4e:	f000 ffd9 	bl	800ff04 <strtol>
 800ef52:	bd10      	pop	{r4, pc}

0800ef54 <gcvt>:
 800ef54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef56:	001c      	movs	r4, r3
 800ef58:	0015      	movs	r5, r2
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	2200      	movs	r2, #0
 800ef5e:	b085      	sub	sp, #20
 800ef60:	0006      	movs	r6, r0
 800ef62:	000f      	movs	r7, r1
 800ef64:	f7f1 fa7e 	bl	8000464 <__aeabi_dcmplt>
 800ef68:	0023      	movs	r3, r4
 800ef6a:	2800      	cmp	r0, #0
 800ef6c:	d003      	beq.n	800ef76 <gcvt+0x22>
 800ef6e:	232d      	movs	r3, #45	; 0x2d
 800ef70:	3d01      	subs	r5, #1
 800ef72:	7023      	strb	r3, [r4, #0]
 800ef74:	1c63      	adds	r3, r4, #1
 800ef76:	2200      	movs	r2, #0
 800ef78:	4908      	ldr	r1, [pc, #32]	; (800ef9c <gcvt+0x48>)
 800ef7a:	9203      	str	r2, [sp, #12]
 800ef7c:	3267      	adds	r2, #103	; 0x67
 800ef7e:	9202      	str	r2, [sp, #8]
 800ef80:	9301      	str	r3, [sp, #4]
 800ef82:	9500      	str	r5, [sp, #0]
 800ef84:	003b      	movs	r3, r7
 800ef86:	0032      	movs	r2, r6
 800ef88:	6808      	ldr	r0, [r1, #0]
 800ef8a:	f001 f849 	bl	8010020 <_gcvt>
 800ef8e:	1e43      	subs	r3, r0, #1
 800ef90:	4198      	sbcs	r0, r3
 800ef92:	4240      	negs	r0, r0
 800ef94:	4004      	ands	r4, r0
 800ef96:	0020      	movs	r0, r4
 800ef98:	b005      	add	sp, #20
 800ef9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef9c:	200000e4 	.word	0x200000e4

0800efa0 <__errno>:
 800efa0:	4b01      	ldr	r3, [pc, #4]	; (800efa8 <__errno+0x8>)
 800efa2:	6818      	ldr	r0, [r3, #0]
 800efa4:	4770      	bx	lr
 800efa6:	46c0      	nop			; (mov r8, r8)
 800efa8:	200000e4 	.word	0x200000e4

0800efac <__libc_init_array>:
 800efac:	b570      	push	{r4, r5, r6, lr}
 800efae:	2600      	movs	r6, #0
 800efb0:	4d0c      	ldr	r5, [pc, #48]	; (800efe4 <__libc_init_array+0x38>)
 800efb2:	4c0d      	ldr	r4, [pc, #52]	; (800efe8 <__libc_init_array+0x3c>)
 800efb4:	1b64      	subs	r4, r4, r5
 800efb6:	10a4      	asrs	r4, r4, #2
 800efb8:	42a6      	cmp	r6, r4
 800efba:	d109      	bne.n	800efd0 <__libc_init_array+0x24>
 800efbc:	2600      	movs	r6, #0
 800efbe:	f004 fa61 	bl	8013484 <_init>
 800efc2:	4d0a      	ldr	r5, [pc, #40]	; (800efec <__libc_init_array+0x40>)
 800efc4:	4c0a      	ldr	r4, [pc, #40]	; (800eff0 <__libc_init_array+0x44>)
 800efc6:	1b64      	subs	r4, r4, r5
 800efc8:	10a4      	asrs	r4, r4, #2
 800efca:	42a6      	cmp	r6, r4
 800efcc:	d105      	bne.n	800efda <__libc_init_array+0x2e>
 800efce:	bd70      	pop	{r4, r5, r6, pc}
 800efd0:	00b3      	lsls	r3, r6, #2
 800efd2:	58eb      	ldr	r3, [r5, r3]
 800efd4:	4798      	blx	r3
 800efd6:	3601      	adds	r6, #1
 800efd8:	e7ee      	b.n	800efb8 <__libc_init_array+0xc>
 800efda:	00b3      	lsls	r3, r6, #2
 800efdc:	58eb      	ldr	r3, [r5, r3]
 800efde:	4798      	blx	r3
 800efe0:	3601      	adds	r6, #1
 800efe2:	e7f2      	b.n	800efca <__libc_init_array+0x1e>
 800efe4:	08013ea8 	.word	0x08013ea8
 800efe8:	08013ea8 	.word	0x08013ea8
 800efec:	08013ea8 	.word	0x08013ea8
 800eff0:	08013eac 	.word	0x08013eac

0800eff4 <memcpy>:
 800eff4:	2300      	movs	r3, #0
 800eff6:	b510      	push	{r4, lr}
 800eff8:	429a      	cmp	r2, r3
 800effa:	d100      	bne.n	800effe <memcpy+0xa>
 800effc:	bd10      	pop	{r4, pc}
 800effe:	5ccc      	ldrb	r4, [r1, r3]
 800f000:	54c4      	strb	r4, [r0, r3]
 800f002:	3301      	adds	r3, #1
 800f004:	e7f8      	b.n	800eff8 <memcpy+0x4>

0800f006 <memset>:
 800f006:	0003      	movs	r3, r0
 800f008:	1882      	adds	r2, r0, r2
 800f00a:	4293      	cmp	r3, r2
 800f00c:	d100      	bne.n	800f010 <memset+0xa>
 800f00e:	4770      	bx	lr
 800f010:	7019      	strb	r1, [r3, #0]
 800f012:	3301      	adds	r3, #1
 800f014:	e7f9      	b.n	800f00a <memset+0x4>
	...

0800f018 <siprintf>:
 800f018:	b40e      	push	{r1, r2, r3}
 800f01a:	b500      	push	{lr}
 800f01c:	490b      	ldr	r1, [pc, #44]	; (800f04c <siprintf+0x34>)
 800f01e:	b09c      	sub	sp, #112	; 0x70
 800f020:	ab1d      	add	r3, sp, #116	; 0x74
 800f022:	9002      	str	r0, [sp, #8]
 800f024:	9006      	str	r0, [sp, #24]
 800f026:	9107      	str	r1, [sp, #28]
 800f028:	9104      	str	r1, [sp, #16]
 800f02a:	4809      	ldr	r0, [pc, #36]	; (800f050 <siprintf+0x38>)
 800f02c:	4909      	ldr	r1, [pc, #36]	; (800f054 <siprintf+0x3c>)
 800f02e:	cb04      	ldmia	r3!, {r2}
 800f030:	9105      	str	r1, [sp, #20]
 800f032:	6800      	ldr	r0, [r0, #0]
 800f034:	a902      	add	r1, sp, #8
 800f036:	9301      	str	r3, [sp, #4]
 800f038:	f002 fa82 	bl	8011540 <_svfiprintf_r>
 800f03c:	2300      	movs	r3, #0
 800f03e:	9a02      	ldr	r2, [sp, #8]
 800f040:	7013      	strb	r3, [r2, #0]
 800f042:	b01c      	add	sp, #112	; 0x70
 800f044:	bc08      	pop	{r3}
 800f046:	b003      	add	sp, #12
 800f048:	4718      	bx	r3
 800f04a:	46c0      	nop			; (mov r8, r8)
 800f04c:	7fffffff 	.word	0x7fffffff
 800f050:	200000e4 	.word	0x200000e4
 800f054:	ffff0208 	.word	0xffff0208

0800f058 <strcat>:
 800f058:	0002      	movs	r2, r0
 800f05a:	b510      	push	{r4, lr}
 800f05c:	7813      	ldrb	r3, [r2, #0]
 800f05e:	0014      	movs	r4, r2
 800f060:	3201      	adds	r2, #1
 800f062:	2b00      	cmp	r3, #0
 800f064:	d1fa      	bne.n	800f05c <strcat+0x4>
 800f066:	5cca      	ldrb	r2, [r1, r3]
 800f068:	54e2      	strb	r2, [r4, r3]
 800f06a:	3301      	adds	r3, #1
 800f06c:	2a00      	cmp	r2, #0
 800f06e:	d1fa      	bne.n	800f066 <strcat+0xe>
 800f070:	bd10      	pop	{r4, pc}

0800f072 <strchr>:
 800f072:	b2c9      	uxtb	r1, r1
 800f074:	7803      	ldrb	r3, [r0, #0]
 800f076:	2b00      	cmp	r3, #0
 800f078:	d004      	beq.n	800f084 <strchr+0x12>
 800f07a:	428b      	cmp	r3, r1
 800f07c:	d100      	bne.n	800f080 <strchr+0xe>
 800f07e:	4770      	bx	lr
 800f080:	3001      	adds	r0, #1
 800f082:	e7f7      	b.n	800f074 <strchr+0x2>
 800f084:	424b      	negs	r3, r1
 800f086:	4159      	adcs	r1, r3
 800f088:	4249      	negs	r1, r1
 800f08a:	4008      	ands	r0, r1
 800f08c:	e7f7      	b.n	800f07e <strchr+0xc>

0800f08e <strncpy>:
 800f08e:	0003      	movs	r3, r0
 800f090:	b530      	push	{r4, r5, lr}
 800f092:	001d      	movs	r5, r3
 800f094:	2a00      	cmp	r2, #0
 800f096:	d006      	beq.n	800f0a6 <strncpy+0x18>
 800f098:	780c      	ldrb	r4, [r1, #0]
 800f09a:	3a01      	subs	r2, #1
 800f09c:	3301      	adds	r3, #1
 800f09e:	702c      	strb	r4, [r5, #0]
 800f0a0:	3101      	adds	r1, #1
 800f0a2:	2c00      	cmp	r4, #0
 800f0a4:	d1f5      	bne.n	800f092 <strncpy+0x4>
 800f0a6:	2100      	movs	r1, #0
 800f0a8:	189a      	adds	r2, r3, r2
 800f0aa:	4293      	cmp	r3, r2
 800f0ac:	d100      	bne.n	800f0b0 <strncpy+0x22>
 800f0ae:	bd30      	pop	{r4, r5, pc}
 800f0b0:	7019      	strb	r1, [r3, #0]
 800f0b2:	3301      	adds	r3, #1
 800f0b4:	e7f9      	b.n	800f0aa <strncpy+0x1c>

0800f0b6 <strstr>:
 800f0b6:	780a      	ldrb	r2, [r1, #0]
 800f0b8:	b530      	push	{r4, r5, lr}
 800f0ba:	2a00      	cmp	r2, #0
 800f0bc:	d10c      	bne.n	800f0d8 <strstr+0x22>
 800f0be:	bd30      	pop	{r4, r5, pc}
 800f0c0:	429a      	cmp	r2, r3
 800f0c2:	d108      	bne.n	800f0d6 <strstr+0x20>
 800f0c4:	2301      	movs	r3, #1
 800f0c6:	5ccc      	ldrb	r4, [r1, r3]
 800f0c8:	2c00      	cmp	r4, #0
 800f0ca:	d0f8      	beq.n	800f0be <strstr+0x8>
 800f0cc:	5cc5      	ldrb	r5, [r0, r3]
 800f0ce:	42a5      	cmp	r5, r4
 800f0d0:	d101      	bne.n	800f0d6 <strstr+0x20>
 800f0d2:	3301      	adds	r3, #1
 800f0d4:	e7f7      	b.n	800f0c6 <strstr+0x10>
 800f0d6:	3001      	adds	r0, #1
 800f0d8:	7803      	ldrb	r3, [r0, #0]
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d1f0      	bne.n	800f0c0 <strstr+0xa>
 800f0de:	0018      	movs	r0, r3
 800f0e0:	e7ed      	b.n	800f0be <strstr+0x8>
	...

0800f0e4 <sulp>:
 800f0e4:	b570      	push	{r4, r5, r6, lr}
 800f0e6:	0016      	movs	r6, r2
 800f0e8:	000d      	movs	r5, r1
 800f0ea:	f001 ff73 	bl	8010fd4 <__ulp>
 800f0ee:	2e00      	cmp	r6, #0
 800f0f0:	d00d      	beq.n	800f10e <sulp+0x2a>
 800f0f2:	236b      	movs	r3, #107	; 0x6b
 800f0f4:	006a      	lsls	r2, r5, #1
 800f0f6:	0d52      	lsrs	r2, r2, #21
 800f0f8:	1a9b      	subs	r3, r3, r2
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	dd07      	ble.n	800f10e <sulp+0x2a>
 800f0fe:	2400      	movs	r4, #0
 800f100:	4a03      	ldr	r2, [pc, #12]	; (800f110 <sulp+0x2c>)
 800f102:	051b      	lsls	r3, r3, #20
 800f104:	189d      	adds	r5, r3, r2
 800f106:	002b      	movs	r3, r5
 800f108:	0022      	movs	r2, r4
 800f10a:	f7f2 fc8d 	bl	8001a28 <__aeabi_dmul>
 800f10e:	bd70      	pop	{r4, r5, r6, pc}
 800f110:	3ff00000 	.word	0x3ff00000

0800f114 <_strtod_l>:
 800f114:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f116:	001d      	movs	r5, r3
 800f118:	2300      	movs	r3, #0
 800f11a:	b0a5      	sub	sp, #148	; 0x94
 800f11c:	9320      	str	r3, [sp, #128]	; 0x80
 800f11e:	4bac      	ldr	r3, [pc, #688]	; (800f3d0 <_strtod_l+0x2bc>)
 800f120:	9005      	str	r0, [sp, #20]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	9108      	str	r1, [sp, #32]
 800f126:	0018      	movs	r0, r3
 800f128:	9307      	str	r3, [sp, #28]
 800f12a:	921b      	str	r2, [sp, #108]	; 0x6c
 800f12c:	f7f0 fff2 	bl	8000114 <strlen>
 800f130:	2600      	movs	r6, #0
 800f132:	0004      	movs	r4, r0
 800f134:	2700      	movs	r7, #0
 800f136:	9b08      	ldr	r3, [sp, #32]
 800f138:	931f      	str	r3, [sp, #124]	; 0x7c
 800f13a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800f13c:	7813      	ldrb	r3, [r2, #0]
 800f13e:	2b2b      	cmp	r3, #43	; 0x2b
 800f140:	d058      	beq.n	800f1f4 <_strtod_l+0xe0>
 800f142:	d844      	bhi.n	800f1ce <_strtod_l+0xba>
 800f144:	2b0d      	cmp	r3, #13
 800f146:	d83d      	bhi.n	800f1c4 <_strtod_l+0xb0>
 800f148:	2b08      	cmp	r3, #8
 800f14a:	d83d      	bhi.n	800f1c8 <_strtod_l+0xb4>
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d047      	beq.n	800f1e0 <_strtod_l+0xcc>
 800f150:	2300      	movs	r3, #0
 800f152:	930e      	str	r3, [sp, #56]	; 0x38
 800f154:	2200      	movs	r2, #0
 800f156:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f158:	920a      	str	r2, [sp, #40]	; 0x28
 800f15a:	9306      	str	r3, [sp, #24]
 800f15c:	781b      	ldrb	r3, [r3, #0]
 800f15e:	2b30      	cmp	r3, #48	; 0x30
 800f160:	d000      	beq.n	800f164 <_strtod_l+0x50>
 800f162:	e07f      	b.n	800f264 <_strtod_l+0x150>
 800f164:	9b06      	ldr	r3, [sp, #24]
 800f166:	3220      	adds	r2, #32
 800f168:	785b      	ldrb	r3, [r3, #1]
 800f16a:	4393      	bics	r3, r2
 800f16c:	2b58      	cmp	r3, #88	; 0x58
 800f16e:	d000      	beq.n	800f172 <_strtod_l+0x5e>
 800f170:	e06e      	b.n	800f250 <_strtod_l+0x13c>
 800f172:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f174:	9502      	str	r5, [sp, #8]
 800f176:	9301      	str	r3, [sp, #4]
 800f178:	ab20      	add	r3, sp, #128	; 0x80
 800f17a:	9300      	str	r3, [sp, #0]
 800f17c:	4a95      	ldr	r2, [pc, #596]	; (800f3d4 <_strtod_l+0x2c0>)
 800f17e:	ab21      	add	r3, sp, #132	; 0x84
 800f180:	9805      	ldr	r0, [sp, #20]
 800f182:	a91f      	add	r1, sp, #124	; 0x7c
 800f184:	f001 f886 	bl	8010294 <__gethex>
 800f188:	2307      	movs	r3, #7
 800f18a:	0005      	movs	r5, r0
 800f18c:	0004      	movs	r4, r0
 800f18e:	401d      	ands	r5, r3
 800f190:	4218      	tst	r0, r3
 800f192:	d006      	beq.n	800f1a2 <_strtod_l+0x8e>
 800f194:	2d06      	cmp	r5, #6
 800f196:	d12f      	bne.n	800f1f8 <_strtod_l+0xe4>
 800f198:	9b06      	ldr	r3, [sp, #24]
 800f19a:	3301      	adds	r3, #1
 800f19c:	931f      	str	r3, [sp, #124]	; 0x7c
 800f19e:	2300      	movs	r3, #0
 800f1a0:	930e      	str	r3, [sp, #56]	; 0x38
 800f1a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d002      	beq.n	800f1ae <_strtod_l+0x9a>
 800f1a8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f1aa:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800f1ac:	601a      	str	r2, [r3, #0]
 800f1ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d01c      	beq.n	800f1ee <_strtod_l+0xda>
 800f1b4:	2380      	movs	r3, #128	; 0x80
 800f1b6:	0032      	movs	r2, r6
 800f1b8:	061b      	lsls	r3, r3, #24
 800f1ba:	18fb      	adds	r3, r7, r3
 800f1bc:	0010      	movs	r0, r2
 800f1be:	0019      	movs	r1, r3
 800f1c0:	b025      	add	sp, #148	; 0x94
 800f1c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f1c4:	2b20      	cmp	r3, #32
 800f1c6:	d1c3      	bne.n	800f150 <_strtod_l+0x3c>
 800f1c8:	3201      	adds	r2, #1
 800f1ca:	921f      	str	r2, [sp, #124]	; 0x7c
 800f1cc:	e7b5      	b.n	800f13a <_strtod_l+0x26>
 800f1ce:	2b2d      	cmp	r3, #45	; 0x2d
 800f1d0:	d1be      	bne.n	800f150 <_strtod_l+0x3c>
 800f1d2:	3b2c      	subs	r3, #44	; 0x2c
 800f1d4:	930e      	str	r3, [sp, #56]	; 0x38
 800f1d6:	1c53      	adds	r3, r2, #1
 800f1d8:	931f      	str	r3, [sp, #124]	; 0x7c
 800f1da:	7853      	ldrb	r3, [r2, #1]
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d1b9      	bne.n	800f154 <_strtod_l+0x40>
 800f1e0:	9b08      	ldr	r3, [sp, #32]
 800f1e2:	931f      	str	r3, [sp, #124]	; 0x7c
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	930e      	str	r3, [sp, #56]	; 0x38
 800f1e8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d1dc      	bne.n	800f1a8 <_strtod_l+0x94>
 800f1ee:	0032      	movs	r2, r6
 800f1f0:	003b      	movs	r3, r7
 800f1f2:	e7e3      	b.n	800f1bc <_strtod_l+0xa8>
 800f1f4:	2300      	movs	r3, #0
 800f1f6:	e7ed      	b.n	800f1d4 <_strtod_l+0xc0>
 800f1f8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f1fa:	2a00      	cmp	r2, #0
 800f1fc:	d007      	beq.n	800f20e <_strtod_l+0xfa>
 800f1fe:	2135      	movs	r1, #53	; 0x35
 800f200:	a822      	add	r0, sp, #136	; 0x88
 800f202:	f002 f803 	bl	801120c <__copybits>
 800f206:	9920      	ldr	r1, [sp, #128]	; 0x80
 800f208:	9805      	ldr	r0, [sp, #20]
 800f20a:	f001 fba3 	bl	8010954 <_Bfree>
 800f20e:	1e68      	subs	r0, r5, #1
 800f210:	2804      	cmp	r0, #4
 800f212:	d806      	bhi.n	800f222 <_strtod_l+0x10e>
 800f214:	f7f0 ff86 	bl	8000124 <__gnu_thumb1_case_uqi>
 800f218:	1816030b 	.word	0x1816030b
 800f21c:	0b          	.byte	0x0b
 800f21d:	00          	.byte	0x00
 800f21e:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800f220:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 800f222:	0723      	lsls	r3, r4, #28
 800f224:	d5bd      	bpl.n	800f1a2 <_strtod_l+0x8e>
 800f226:	2380      	movs	r3, #128	; 0x80
 800f228:	061b      	lsls	r3, r3, #24
 800f22a:	431f      	orrs	r7, r3
 800f22c:	e7b9      	b.n	800f1a2 <_strtod_l+0x8e>
 800f22e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f230:	4a69      	ldr	r2, [pc, #420]	; (800f3d8 <_strtod_l+0x2c4>)
 800f232:	496a      	ldr	r1, [pc, #424]	; (800f3dc <_strtod_l+0x2c8>)
 800f234:	401a      	ands	r2, r3
 800f236:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f238:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800f23a:	185b      	adds	r3, r3, r1
 800f23c:	051b      	lsls	r3, r3, #20
 800f23e:	431a      	orrs	r2, r3
 800f240:	0017      	movs	r7, r2
 800f242:	e7ee      	b.n	800f222 <_strtod_l+0x10e>
 800f244:	4f66      	ldr	r7, [pc, #408]	; (800f3e0 <_strtod_l+0x2cc>)
 800f246:	e7ec      	b.n	800f222 <_strtod_l+0x10e>
 800f248:	2601      	movs	r6, #1
 800f24a:	4f66      	ldr	r7, [pc, #408]	; (800f3e4 <_strtod_l+0x2d0>)
 800f24c:	4276      	negs	r6, r6
 800f24e:	e7e8      	b.n	800f222 <_strtod_l+0x10e>
 800f250:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f252:	1c5a      	adds	r2, r3, #1
 800f254:	921f      	str	r2, [sp, #124]	; 0x7c
 800f256:	785b      	ldrb	r3, [r3, #1]
 800f258:	2b30      	cmp	r3, #48	; 0x30
 800f25a:	d0f9      	beq.n	800f250 <_strtod_l+0x13c>
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d0a0      	beq.n	800f1a2 <_strtod_l+0x8e>
 800f260:	2301      	movs	r3, #1
 800f262:	930a      	str	r3, [sp, #40]	; 0x28
 800f264:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f266:	220a      	movs	r2, #10
 800f268:	9310      	str	r3, [sp, #64]	; 0x40
 800f26a:	2300      	movs	r3, #0
 800f26c:	930f      	str	r3, [sp, #60]	; 0x3c
 800f26e:	930b      	str	r3, [sp, #44]	; 0x2c
 800f270:	9309      	str	r3, [sp, #36]	; 0x24
 800f272:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800f274:	7805      	ldrb	r5, [r0, #0]
 800f276:	002b      	movs	r3, r5
 800f278:	3b30      	subs	r3, #48	; 0x30
 800f27a:	b2d9      	uxtb	r1, r3
 800f27c:	2909      	cmp	r1, #9
 800f27e:	d927      	bls.n	800f2d0 <_strtod_l+0x1bc>
 800f280:	0022      	movs	r2, r4
 800f282:	9907      	ldr	r1, [sp, #28]
 800f284:	f002 fc02 	bl	8011a8c <strncmp>
 800f288:	2800      	cmp	r0, #0
 800f28a:	d033      	beq.n	800f2f4 <_strtod_l+0x1e0>
 800f28c:	2000      	movs	r0, #0
 800f28e:	002b      	movs	r3, r5
 800f290:	4684      	mov	ip, r0
 800f292:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f294:	900c      	str	r0, [sp, #48]	; 0x30
 800f296:	9206      	str	r2, [sp, #24]
 800f298:	2220      	movs	r2, #32
 800f29a:	0019      	movs	r1, r3
 800f29c:	4391      	bics	r1, r2
 800f29e:	000a      	movs	r2, r1
 800f2a0:	2100      	movs	r1, #0
 800f2a2:	9107      	str	r1, [sp, #28]
 800f2a4:	2a45      	cmp	r2, #69	; 0x45
 800f2a6:	d000      	beq.n	800f2aa <_strtod_l+0x196>
 800f2a8:	e0c5      	b.n	800f436 <_strtod_l+0x322>
 800f2aa:	9b06      	ldr	r3, [sp, #24]
 800f2ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f2ae:	4303      	orrs	r3, r0
 800f2b0:	4313      	orrs	r3, r2
 800f2b2:	428b      	cmp	r3, r1
 800f2b4:	d094      	beq.n	800f1e0 <_strtod_l+0xcc>
 800f2b6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f2b8:	9308      	str	r3, [sp, #32]
 800f2ba:	3301      	adds	r3, #1
 800f2bc:	931f      	str	r3, [sp, #124]	; 0x7c
 800f2be:	9b08      	ldr	r3, [sp, #32]
 800f2c0:	785b      	ldrb	r3, [r3, #1]
 800f2c2:	2b2b      	cmp	r3, #43	; 0x2b
 800f2c4:	d076      	beq.n	800f3b4 <_strtod_l+0x2a0>
 800f2c6:	000c      	movs	r4, r1
 800f2c8:	2b2d      	cmp	r3, #45	; 0x2d
 800f2ca:	d179      	bne.n	800f3c0 <_strtod_l+0x2ac>
 800f2cc:	2401      	movs	r4, #1
 800f2ce:	e072      	b.n	800f3b6 <_strtod_l+0x2a2>
 800f2d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f2d2:	2908      	cmp	r1, #8
 800f2d4:	dc09      	bgt.n	800f2ea <_strtod_l+0x1d6>
 800f2d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f2d8:	4351      	muls	r1, r2
 800f2da:	185b      	adds	r3, r3, r1
 800f2dc:	930b      	str	r3, [sp, #44]	; 0x2c
 800f2de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2e0:	3001      	adds	r0, #1
 800f2e2:	3301      	adds	r3, #1
 800f2e4:	9309      	str	r3, [sp, #36]	; 0x24
 800f2e6:	901f      	str	r0, [sp, #124]	; 0x7c
 800f2e8:	e7c3      	b.n	800f272 <_strtod_l+0x15e>
 800f2ea:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f2ec:	4351      	muls	r1, r2
 800f2ee:	185b      	adds	r3, r3, r1
 800f2f0:	930f      	str	r3, [sp, #60]	; 0x3c
 800f2f2:	e7f4      	b.n	800f2de <_strtod_l+0x1ca>
 800f2f4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f2f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f2f8:	191c      	adds	r4, r3, r4
 800f2fa:	941f      	str	r4, [sp, #124]	; 0x7c
 800f2fc:	7823      	ldrb	r3, [r4, #0]
 800f2fe:	2a00      	cmp	r2, #0
 800f300:	d039      	beq.n	800f376 <_strtod_l+0x262>
 800f302:	900c      	str	r0, [sp, #48]	; 0x30
 800f304:	9206      	str	r2, [sp, #24]
 800f306:	001a      	movs	r2, r3
 800f308:	3a30      	subs	r2, #48	; 0x30
 800f30a:	2a09      	cmp	r2, #9
 800f30c:	d912      	bls.n	800f334 <_strtod_l+0x220>
 800f30e:	2201      	movs	r2, #1
 800f310:	4694      	mov	ip, r2
 800f312:	e7c1      	b.n	800f298 <_strtod_l+0x184>
 800f314:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f316:	3001      	adds	r0, #1
 800f318:	1c5a      	adds	r2, r3, #1
 800f31a:	921f      	str	r2, [sp, #124]	; 0x7c
 800f31c:	785b      	ldrb	r3, [r3, #1]
 800f31e:	2b30      	cmp	r3, #48	; 0x30
 800f320:	d0f8      	beq.n	800f314 <_strtod_l+0x200>
 800f322:	001a      	movs	r2, r3
 800f324:	3a31      	subs	r2, #49	; 0x31
 800f326:	2a08      	cmp	r2, #8
 800f328:	d83f      	bhi.n	800f3aa <_strtod_l+0x296>
 800f32a:	900c      	str	r0, [sp, #48]	; 0x30
 800f32c:	2000      	movs	r0, #0
 800f32e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800f330:	9006      	str	r0, [sp, #24]
 800f332:	9210      	str	r2, [sp, #64]	; 0x40
 800f334:	001a      	movs	r2, r3
 800f336:	1c41      	adds	r1, r0, #1
 800f338:	3a30      	subs	r2, #48	; 0x30
 800f33a:	2b30      	cmp	r3, #48	; 0x30
 800f33c:	d015      	beq.n	800f36a <_strtod_l+0x256>
 800f33e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f340:	185b      	adds	r3, r3, r1
 800f342:	210a      	movs	r1, #10
 800f344:	930c      	str	r3, [sp, #48]	; 0x30
 800f346:	9b06      	ldr	r3, [sp, #24]
 800f348:	18c4      	adds	r4, r0, r3
 800f34a:	42a3      	cmp	r3, r4
 800f34c:	d115      	bne.n	800f37a <_strtod_l+0x266>
 800f34e:	9906      	ldr	r1, [sp, #24]
 800f350:	9b06      	ldr	r3, [sp, #24]
 800f352:	3101      	adds	r1, #1
 800f354:	1809      	adds	r1, r1, r0
 800f356:	181b      	adds	r3, r3, r0
 800f358:	9106      	str	r1, [sp, #24]
 800f35a:	2b08      	cmp	r3, #8
 800f35c:	dc1b      	bgt.n	800f396 <_strtod_l+0x282>
 800f35e:	230a      	movs	r3, #10
 800f360:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f362:	434b      	muls	r3, r1
 800f364:	2100      	movs	r1, #0
 800f366:	18d3      	adds	r3, r2, r3
 800f368:	930b      	str	r3, [sp, #44]	; 0x2c
 800f36a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f36c:	0008      	movs	r0, r1
 800f36e:	1c5a      	adds	r2, r3, #1
 800f370:	921f      	str	r2, [sp, #124]	; 0x7c
 800f372:	785b      	ldrb	r3, [r3, #1]
 800f374:	e7c7      	b.n	800f306 <_strtod_l+0x1f2>
 800f376:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f378:	e7d1      	b.n	800f31e <_strtod_l+0x20a>
 800f37a:	2b08      	cmp	r3, #8
 800f37c:	dc04      	bgt.n	800f388 <_strtod_l+0x274>
 800f37e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800f380:	434d      	muls	r5, r1
 800f382:	950b      	str	r5, [sp, #44]	; 0x2c
 800f384:	3301      	adds	r3, #1
 800f386:	e7e0      	b.n	800f34a <_strtod_l+0x236>
 800f388:	1c5d      	adds	r5, r3, #1
 800f38a:	2d10      	cmp	r5, #16
 800f38c:	dcfa      	bgt.n	800f384 <_strtod_l+0x270>
 800f38e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f390:	434d      	muls	r5, r1
 800f392:	950f      	str	r5, [sp, #60]	; 0x3c
 800f394:	e7f6      	b.n	800f384 <_strtod_l+0x270>
 800f396:	9b06      	ldr	r3, [sp, #24]
 800f398:	2100      	movs	r1, #0
 800f39a:	2b10      	cmp	r3, #16
 800f39c:	dce5      	bgt.n	800f36a <_strtod_l+0x256>
 800f39e:	230a      	movs	r3, #10
 800f3a0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800f3a2:	4343      	muls	r3, r0
 800f3a4:	18d3      	adds	r3, r2, r3
 800f3a6:	930f      	str	r3, [sp, #60]	; 0x3c
 800f3a8:	e7df      	b.n	800f36a <_strtod_l+0x256>
 800f3aa:	2200      	movs	r2, #0
 800f3ac:	920c      	str	r2, [sp, #48]	; 0x30
 800f3ae:	9206      	str	r2, [sp, #24]
 800f3b0:	3201      	adds	r2, #1
 800f3b2:	e7ad      	b.n	800f310 <_strtod_l+0x1fc>
 800f3b4:	2400      	movs	r4, #0
 800f3b6:	9b08      	ldr	r3, [sp, #32]
 800f3b8:	3302      	adds	r3, #2
 800f3ba:	931f      	str	r3, [sp, #124]	; 0x7c
 800f3bc:	9b08      	ldr	r3, [sp, #32]
 800f3be:	789b      	ldrb	r3, [r3, #2]
 800f3c0:	001a      	movs	r2, r3
 800f3c2:	3a30      	subs	r2, #48	; 0x30
 800f3c4:	2a09      	cmp	r2, #9
 800f3c6:	d913      	bls.n	800f3f0 <_strtod_l+0x2dc>
 800f3c8:	9a08      	ldr	r2, [sp, #32]
 800f3ca:	921f      	str	r2, [sp, #124]	; 0x7c
 800f3cc:	2200      	movs	r2, #0
 800f3ce:	e031      	b.n	800f434 <_strtod_l+0x320>
 800f3d0:	08013be8 	.word	0x08013be8
 800f3d4:	08013a1c 	.word	0x08013a1c
 800f3d8:	ffefffff 	.word	0xffefffff
 800f3dc:	00000433 	.word	0x00000433
 800f3e0:	7ff00000 	.word	0x7ff00000
 800f3e4:	7fffffff 	.word	0x7fffffff
 800f3e8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f3ea:	1c5a      	adds	r2, r3, #1
 800f3ec:	921f      	str	r2, [sp, #124]	; 0x7c
 800f3ee:	785b      	ldrb	r3, [r3, #1]
 800f3f0:	2b30      	cmp	r3, #48	; 0x30
 800f3f2:	d0f9      	beq.n	800f3e8 <_strtod_l+0x2d4>
 800f3f4:	2200      	movs	r2, #0
 800f3f6:	9207      	str	r2, [sp, #28]
 800f3f8:	001a      	movs	r2, r3
 800f3fa:	3a31      	subs	r2, #49	; 0x31
 800f3fc:	2a08      	cmp	r2, #8
 800f3fe:	d81a      	bhi.n	800f436 <_strtod_l+0x322>
 800f400:	3b30      	subs	r3, #48	; 0x30
 800f402:	001a      	movs	r2, r3
 800f404:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f406:	9307      	str	r3, [sp, #28]
 800f408:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f40a:	1c59      	adds	r1, r3, #1
 800f40c:	911f      	str	r1, [sp, #124]	; 0x7c
 800f40e:	785b      	ldrb	r3, [r3, #1]
 800f410:	001d      	movs	r5, r3
 800f412:	3d30      	subs	r5, #48	; 0x30
 800f414:	2d09      	cmp	r5, #9
 800f416:	d939      	bls.n	800f48c <_strtod_l+0x378>
 800f418:	9d07      	ldr	r5, [sp, #28]
 800f41a:	1b49      	subs	r1, r1, r5
 800f41c:	4db0      	ldr	r5, [pc, #704]	; (800f6e0 <_strtod_l+0x5cc>)
 800f41e:	9507      	str	r5, [sp, #28]
 800f420:	2908      	cmp	r1, #8
 800f422:	dc03      	bgt.n	800f42c <_strtod_l+0x318>
 800f424:	9207      	str	r2, [sp, #28]
 800f426:	42aa      	cmp	r2, r5
 800f428:	dd00      	ble.n	800f42c <_strtod_l+0x318>
 800f42a:	9507      	str	r5, [sp, #28]
 800f42c:	2c00      	cmp	r4, #0
 800f42e:	d002      	beq.n	800f436 <_strtod_l+0x322>
 800f430:	9a07      	ldr	r2, [sp, #28]
 800f432:	4252      	negs	r2, r2
 800f434:	9207      	str	r2, [sp, #28]
 800f436:	9a06      	ldr	r2, [sp, #24]
 800f438:	2a00      	cmp	r2, #0
 800f43a:	d14b      	bne.n	800f4d4 <_strtod_l+0x3c0>
 800f43c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f43e:	4310      	orrs	r0, r2
 800f440:	d000      	beq.n	800f444 <_strtod_l+0x330>
 800f442:	e6ae      	b.n	800f1a2 <_strtod_l+0x8e>
 800f444:	4662      	mov	r2, ip
 800f446:	2a00      	cmp	r2, #0
 800f448:	d000      	beq.n	800f44c <_strtod_l+0x338>
 800f44a:	e6c9      	b.n	800f1e0 <_strtod_l+0xcc>
 800f44c:	2b69      	cmp	r3, #105	; 0x69
 800f44e:	d025      	beq.n	800f49c <_strtod_l+0x388>
 800f450:	dc21      	bgt.n	800f496 <_strtod_l+0x382>
 800f452:	2b49      	cmp	r3, #73	; 0x49
 800f454:	d022      	beq.n	800f49c <_strtod_l+0x388>
 800f456:	2b4e      	cmp	r3, #78	; 0x4e
 800f458:	d000      	beq.n	800f45c <_strtod_l+0x348>
 800f45a:	e6c1      	b.n	800f1e0 <_strtod_l+0xcc>
 800f45c:	49a1      	ldr	r1, [pc, #644]	; (800f6e4 <_strtod_l+0x5d0>)
 800f45e:	a81f      	add	r0, sp, #124	; 0x7c
 800f460:	f001 f966 	bl	8010730 <__match>
 800f464:	2800      	cmp	r0, #0
 800f466:	d100      	bne.n	800f46a <_strtod_l+0x356>
 800f468:	e6ba      	b.n	800f1e0 <_strtod_l+0xcc>
 800f46a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f46c:	781b      	ldrb	r3, [r3, #0]
 800f46e:	2b28      	cmp	r3, #40	; 0x28
 800f470:	d12a      	bne.n	800f4c8 <_strtod_l+0x3b4>
 800f472:	499d      	ldr	r1, [pc, #628]	; (800f6e8 <_strtod_l+0x5d4>)
 800f474:	aa22      	add	r2, sp, #136	; 0x88
 800f476:	a81f      	add	r0, sp, #124	; 0x7c
 800f478:	f001 f96e 	bl	8010758 <__hexnan>
 800f47c:	2805      	cmp	r0, #5
 800f47e:	d123      	bne.n	800f4c8 <_strtod_l+0x3b4>
 800f480:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f482:	4a9a      	ldr	r2, [pc, #616]	; (800f6ec <_strtod_l+0x5d8>)
 800f484:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800f486:	431a      	orrs	r2, r3
 800f488:	0017      	movs	r7, r2
 800f48a:	e68a      	b.n	800f1a2 <_strtod_l+0x8e>
 800f48c:	210a      	movs	r1, #10
 800f48e:	434a      	muls	r2, r1
 800f490:	18d2      	adds	r2, r2, r3
 800f492:	3a30      	subs	r2, #48	; 0x30
 800f494:	e7b8      	b.n	800f408 <_strtod_l+0x2f4>
 800f496:	2b6e      	cmp	r3, #110	; 0x6e
 800f498:	d0e0      	beq.n	800f45c <_strtod_l+0x348>
 800f49a:	e6a1      	b.n	800f1e0 <_strtod_l+0xcc>
 800f49c:	4994      	ldr	r1, [pc, #592]	; (800f6f0 <_strtod_l+0x5dc>)
 800f49e:	a81f      	add	r0, sp, #124	; 0x7c
 800f4a0:	f001 f946 	bl	8010730 <__match>
 800f4a4:	2800      	cmp	r0, #0
 800f4a6:	d100      	bne.n	800f4aa <_strtod_l+0x396>
 800f4a8:	e69a      	b.n	800f1e0 <_strtod_l+0xcc>
 800f4aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f4ac:	4991      	ldr	r1, [pc, #580]	; (800f6f4 <_strtod_l+0x5e0>)
 800f4ae:	3b01      	subs	r3, #1
 800f4b0:	a81f      	add	r0, sp, #124	; 0x7c
 800f4b2:	931f      	str	r3, [sp, #124]	; 0x7c
 800f4b4:	f001 f93c 	bl	8010730 <__match>
 800f4b8:	2800      	cmp	r0, #0
 800f4ba:	d102      	bne.n	800f4c2 <_strtod_l+0x3ae>
 800f4bc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f4be:	3301      	adds	r3, #1
 800f4c0:	931f      	str	r3, [sp, #124]	; 0x7c
 800f4c2:	2600      	movs	r6, #0
 800f4c4:	4f89      	ldr	r7, [pc, #548]	; (800f6ec <_strtod_l+0x5d8>)
 800f4c6:	e66c      	b.n	800f1a2 <_strtod_l+0x8e>
 800f4c8:	488b      	ldr	r0, [pc, #556]	; (800f6f8 <_strtod_l+0x5e4>)
 800f4ca:	f002 fabb 	bl	8011a44 <nan>
 800f4ce:	0006      	movs	r6, r0
 800f4d0:	000f      	movs	r7, r1
 800f4d2:	e666      	b.n	800f1a2 <_strtod_l+0x8e>
 800f4d4:	9b07      	ldr	r3, [sp, #28]
 800f4d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f4d8:	1a9b      	subs	r3, r3, r2
 800f4da:	930a      	str	r3, [sp, #40]	; 0x28
 800f4dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d101      	bne.n	800f4e6 <_strtod_l+0x3d2>
 800f4e2:	9b06      	ldr	r3, [sp, #24]
 800f4e4:	9309      	str	r3, [sp, #36]	; 0x24
 800f4e6:	9c06      	ldr	r4, [sp, #24]
 800f4e8:	2c10      	cmp	r4, #16
 800f4ea:	dd00      	ble.n	800f4ee <_strtod_l+0x3da>
 800f4ec:	2410      	movs	r4, #16
 800f4ee:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f4f0:	f7f3 f91c 	bl	800272c <__aeabi_ui2d>
 800f4f4:	9b06      	ldr	r3, [sp, #24]
 800f4f6:	0006      	movs	r6, r0
 800f4f8:	000f      	movs	r7, r1
 800f4fa:	2b09      	cmp	r3, #9
 800f4fc:	dd15      	ble.n	800f52a <_strtod_l+0x416>
 800f4fe:	0022      	movs	r2, r4
 800f500:	4b7e      	ldr	r3, [pc, #504]	; (800f6fc <_strtod_l+0x5e8>)
 800f502:	3a09      	subs	r2, #9
 800f504:	00d2      	lsls	r2, r2, #3
 800f506:	189b      	adds	r3, r3, r2
 800f508:	681a      	ldr	r2, [r3, #0]
 800f50a:	685b      	ldr	r3, [r3, #4]
 800f50c:	f7f2 fa8c 	bl	8001a28 <__aeabi_dmul>
 800f510:	0006      	movs	r6, r0
 800f512:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800f514:	000f      	movs	r7, r1
 800f516:	f7f3 f909 	bl	800272c <__aeabi_ui2d>
 800f51a:	0002      	movs	r2, r0
 800f51c:	000b      	movs	r3, r1
 800f51e:	0030      	movs	r0, r6
 800f520:	0039      	movs	r1, r7
 800f522:	f7f1 fb43 	bl	8000bac <__aeabi_dadd>
 800f526:	0006      	movs	r6, r0
 800f528:	000f      	movs	r7, r1
 800f52a:	9b06      	ldr	r3, [sp, #24]
 800f52c:	2b0f      	cmp	r3, #15
 800f52e:	dc39      	bgt.n	800f5a4 <_strtod_l+0x490>
 800f530:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f532:	2b00      	cmp	r3, #0
 800f534:	d100      	bne.n	800f538 <_strtod_l+0x424>
 800f536:	e634      	b.n	800f1a2 <_strtod_l+0x8e>
 800f538:	dd24      	ble.n	800f584 <_strtod_l+0x470>
 800f53a:	2b16      	cmp	r3, #22
 800f53c:	dc09      	bgt.n	800f552 <_strtod_l+0x43e>
 800f53e:	496f      	ldr	r1, [pc, #444]	; (800f6fc <_strtod_l+0x5e8>)
 800f540:	00db      	lsls	r3, r3, #3
 800f542:	18c9      	adds	r1, r1, r3
 800f544:	0032      	movs	r2, r6
 800f546:	6808      	ldr	r0, [r1, #0]
 800f548:	6849      	ldr	r1, [r1, #4]
 800f54a:	003b      	movs	r3, r7
 800f54c:	f7f2 fa6c 	bl	8001a28 <__aeabi_dmul>
 800f550:	e7bd      	b.n	800f4ce <_strtod_l+0x3ba>
 800f552:	2325      	movs	r3, #37	; 0x25
 800f554:	9a06      	ldr	r2, [sp, #24]
 800f556:	1a9b      	subs	r3, r3, r2
 800f558:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f55a:	4293      	cmp	r3, r2
 800f55c:	db22      	blt.n	800f5a4 <_strtod_l+0x490>
 800f55e:	240f      	movs	r4, #15
 800f560:	9b06      	ldr	r3, [sp, #24]
 800f562:	4d66      	ldr	r5, [pc, #408]	; (800f6fc <_strtod_l+0x5e8>)
 800f564:	1ae4      	subs	r4, r4, r3
 800f566:	00e1      	lsls	r1, r4, #3
 800f568:	1869      	adds	r1, r5, r1
 800f56a:	0032      	movs	r2, r6
 800f56c:	6808      	ldr	r0, [r1, #0]
 800f56e:	6849      	ldr	r1, [r1, #4]
 800f570:	003b      	movs	r3, r7
 800f572:	f7f2 fa59 	bl	8001a28 <__aeabi_dmul>
 800f576:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f578:	1b1c      	subs	r4, r3, r4
 800f57a:	00e4      	lsls	r4, r4, #3
 800f57c:	192c      	adds	r4, r5, r4
 800f57e:	6822      	ldr	r2, [r4, #0]
 800f580:	6863      	ldr	r3, [r4, #4]
 800f582:	e7e3      	b.n	800f54c <_strtod_l+0x438>
 800f584:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f586:	3316      	adds	r3, #22
 800f588:	db0c      	blt.n	800f5a4 <_strtod_l+0x490>
 800f58a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f58c:	9a07      	ldr	r2, [sp, #28]
 800f58e:	0030      	movs	r0, r6
 800f590:	1a9a      	subs	r2, r3, r2
 800f592:	4b5a      	ldr	r3, [pc, #360]	; (800f6fc <_strtod_l+0x5e8>)
 800f594:	00d2      	lsls	r2, r2, #3
 800f596:	189b      	adds	r3, r3, r2
 800f598:	0039      	movs	r1, r7
 800f59a:	681a      	ldr	r2, [r3, #0]
 800f59c:	685b      	ldr	r3, [r3, #4]
 800f59e:	f7f1 fe41 	bl	8001224 <__aeabi_ddiv>
 800f5a2:	e794      	b.n	800f4ce <_strtod_l+0x3ba>
 800f5a4:	9b06      	ldr	r3, [sp, #24]
 800f5a6:	1b1c      	subs	r4, r3, r4
 800f5a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f5aa:	18e4      	adds	r4, r4, r3
 800f5ac:	2c00      	cmp	r4, #0
 800f5ae:	dd72      	ble.n	800f696 <_strtod_l+0x582>
 800f5b0:	230f      	movs	r3, #15
 800f5b2:	0021      	movs	r1, r4
 800f5b4:	4019      	ands	r1, r3
 800f5b6:	421c      	tst	r4, r3
 800f5b8:	d00a      	beq.n	800f5d0 <_strtod_l+0x4bc>
 800f5ba:	00cb      	lsls	r3, r1, #3
 800f5bc:	494f      	ldr	r1, [pc, #316]	; (800f6fc <_strtod_l+0x5e8>)
 800f5be:	0032      	movs	r2, r6
 800f5c0:	18c9      	adds	r1, r1, r3
 800f5c2:	6808      	ldr	r0, [r1, #0]
 800f5c4:	6849      	ldr	r1, [r1, #4]
 800f5c6:	003b      	movs	r3, r7
 800f5c8:	f7f2 fa2e 	bl	8001a28 <__aeabi_dmul>
 800f5cc:	0006      	movs	r6, r0
 800f5ce:	000f      	movs	r7, r1
 800f5d0:	230f      	movs	r3, #15
 800f5d2:	439c      	bics	r4, r3
 800f5d4:	d04a      	beq.n	800f66c <_strtod_l+0x558>
 800f5d6:	3326      	adds	r3, #38	; 0x26
 800f5d8:	33ff      	adds	r3, #255	; 0xff
 800f5da:	429c      	cmp	r4, r3
 800f5dc:	dd22      	ble.n	800f624 <_strtod_l+0x510>
 800f5de:	2300      	movs	r3, #0
 800f5e0:	9306      	str	r3, [sp, #24]
 800f5e2:	9307      	str	r3, [sp, #28]
 800f5e4:	930b      	str	r3, [sp, #44]	; 0x2c
 800f5e6:	9309      	str	r3, [sp, #36]	; 0x24
 800f5e8:	2322      	movs	r3, #34	; 0x22
 800f5ea:	2600      	movs	r6, #0
 800f5ec:	9a05      	ldr	r2, [sp, #20]
 800f5ee:	4f3f      	ldr	r7, [pc, #252]	; (800f6ec <_strtod_l+0x5d8>)
 800f5f0:	6013      	str	r3, [r2, #0]
 800f5f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f5f4:	42b3      	cmp	r3, r6
 800f5f6:	d100      	bne.n	800f5fa <_strtod_l+0x4e6>
 800f5f8:	e5d3      	b.n	800f1a2 <_strtod_l+0x8e>
 800f5fa:	9920      	ldr	r1, [sp, #128]	; 0x80
 800f5fc:	9805      	ldr	r0, [sp, #20]
 800f5fe:	f001 f9a9 	bl	8010954 <_Bfree>
 800f602:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f604:	9805      	ldr	r0, [sp, #20]
 800f606:	f001 f9a5 	bl	8010954 <_Bfree>
 800f60a:	9907      	ldr	r1, [sp, #28]
 800f60c:	9805      	ldr	r0, [sp, #20]
 800f60e:	f001 f9a1 	bl	8010954 <_Bfree>
 800f612:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f614:	9805      	ldr	r0, [sp, #20]
 800f616:	f001 f99d 	bl	8010954 <_Bfree>
 800f61a:	9906      	ldr	r1, [sp, #24]
 800f61c:	9805      	ldr	r0, [sp, #20]
 800f61e:	f001 f999 	bl	8010954 <_Bfree>
 800f622:	e5be      	b.n	800f1a2 <_strtod_l+0x8e>
 800f624:	2300      	movs	r3, #0
 800f626:	0030      	movs	r0, r6
 800f628:	0039      	movs	r1, r7
 800f62a:	4d35      	ldr	r5, [pc, #212]	; (800f700 <_strtod_l+0x5ec>)
 800f62c:	1124      	asrs	r4, r4, #4
 800f62e:	9308      	str	r3, [sp, #32]
 800f630:	2c01      	cmp	r4, #1
 800f632:	dc1e      	bgt.n	800f672 <_strtod_l+0x55e>
 800f634:	2b00      	cmp	r3, #0
 800f636:	d001      	beq.n	800f63c <_strtod_l+0x528>
 800f638:	0006      	movs	r6, r0
 800f63a:	000f      	movs	r7, r1
 800f63c:	4b31      	ldr	r3, [pc, #196]	; (800f704 <_strtod_l+0x5f0>)
 800f63e:	0032      	movs	r2, r6
 800f640:	18ff      	adds	r7, r7, r3
 800f642:	9b08      	ldr	r3, [sp, #32]
 800f644:	00dd      	lsls	r5, r3, #3
 800f646:	4b2e      	ldr	r3, [pc, #184]	; (800f700 <_strtod_l+0x5ec>)
 800f648:	195d      	adds	r5, r3, r5
 800f64a:	6828      	ldr	r0, [r5, #0]
 800f64c:	6869      	ldr	r1, [r5, #4]
 800f64e:	003b      	movs	r3, r7
 800f650:	f7f2 f9ea 	bl	8001a28 <__aeabi_dmul>
 800f654:	4b25      	ldr	r3, [pc, #148]	; (800f6ec <_strtod_l+0x5d8>)
 800f656:	4a2c      	ldr	r2, [pc, #176]	; (800f708 <_strtod_l+0x5f4>)
 800f658:	0006      	movs	r6, r0
 800f65a:	400b      	ands	r3, r1
 800f65c:	4293      	cmp	r3, r2
 800f65e:	d8be      	bhi.n	800f5de <_strtod_l+0x4ca>
 800f660:	4a2a      	ldr	r2, [pc, #168]	; (800f70c <_strtod_l+0x5f8>)
 800f662:	4293      	cmp	r3, r2
 800f664:	d913      	bls.n	800f68e <_strtod_l+0x57a>
 800f666:	2601      	movs	r6, #1
 800f668:	4f29      	ldr	r7, [pc, #164]	; (800f710 <_strtod_l+0x5fc>)
 800f66a:	4276      	negs	r6, r6
 800f66c:	2300      	movs	r3, #0
 800f66e:	9308      	str	r3, [sp, #32]
 800f670:	e087      	b.n	800f782 <_strtod_l+0x66e>
 800f672:	2201      	movs	r2, #1
 800f674:	4214      	tst	r4, r2
 800f676:	d004      	beq.n	800f682 <_strtod_l+0x56e>
 800f678:	682a      	ldr	r2, [r5, #0]
 800f67a:	686b      	ldr	r3, [r5, #4]
 800f67c:	f7f2 f9d4 	bl	8001a28 <__aeabi_dmul>
 800f680:	2301      	movs	r3, #1
 800f682:	9a08      	ldr	r2, [sp, #32]
 800f684:	1064      	asrs	r4, r4, #1
 800f686:	3201      	adds	r2, #1
 800f688:	9208      	str	r2, [sp, #32]
 800f68a:	3508      	adds	r5, #8
 800f68c:	e7d0      	b.n	800f630 <_strtod_l+0x51c>
 800f68e:	23d4      	movs	r3, #212	; 0xd4
 800f690:	049b      	lsls	r3, r3, #18
 800f692:	18cf      	adds	r7, r1, r3
 800f694:	e7ea      	b.n	800f66c <_strtod_l+0x558>
 800f696:	2c00      	cmp	r4, #0
 800f698:	d0e8      	beq.n	800f66c <_strtod_l+0x558>
 800f69a:	4264      	negs	r4, r4
 800f69c:	220f      	movs	r2, #15
 800f69e:	0023      	movs	r3, r4
 800f6a0:	4013      	ands	r3, r2
 800f6a2:	4214      	tst	r4, r2
 800f6a4:	d00a      	beq.n	800f6bc <_strtod_l+0x5a8>
 800f6a6:	00da      	lsls	r2, r3, #3
 800f6a8:	4b14      	ldr	r3, [pc, #80]	; (800f6fc <_strtod_l+0x5e8>)
 800f6aa:	0030      	movs	r0, r6
 800f6ac:	189b      	adds	r3, r3, r2
 800f6ae:	0039      	movs	r1, r7
 800f6b0:	681a      	ldr	r2, [r3, #0]
 800f6b2:	685b      	ldr	r3, [r3, #4]
 800f6b4:	f7f1 fdb6 	bl	8001224 <__aeabi_ddiv>
 800f6b8:	0006      	movs	r6, r0
 800f6ba:	000f      	movs	r7, r1
 800f6bc:	1124      	asrs	r4, r4, #4
 800f6be:	d0d5      	beq.n	800f66c <_strtod_l+0x558>
 800f6c0:	2c1f      	cmp	r4, #31
 800f6c2:	dd27      	ble.n	800f714 <_strtod_l+0x600>
 800f6c4:	2300      	movs	r3, #0
 800f6c6:	9306      	str	r3, [sp, #24]
 800f6c8:	9307      	str	r3, [sp, #28]
 800f6ca:	930b      	str	r3, [sp, #44]	; 0x2c
 800f6cc:	9309      	str	r3, [sp, #36]	; 0x24
 800f6ce:	2322      	movs	r3, #34	; 0x22
 800f6d0:	9a05      	ldr	r2, [sp, #20]
 800f6d2:	2600      	movs	r6, #0
 800f6d4:	6013      	str	r3, [r2, #0]
 800f6d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f6d8:	2700      	movs	r7, #0
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d18d      	bne.n	800f5fa <_strtod_l+0x4e6>
 800f6de:	e560      	b.n	800f1a2 <_strtod_l+0x8e>
 800f6e0:	00004e1f 	.word	0x00004e1f
 800f6e4:	08013a17 	.word	0x08013a17
 800f6e8:	08013a30 	.word	0x08013a30
 800f6ec:	7ff00000 	.word	0x7ff00000
 800f6f0:	08013a14 	.word	0x08013a14
 800f6f4:	08013dde 	.word	0x08013dde
 800f6f8:	08013dda 	.word	0x08013dda
 800f6fc:	08013c98 	.word	0x08013c98
 800f700:	08013c70 	.word	0x08013c70
 800f704:	fcb00000 	.word	0xfcb00000
 800f708:	7ca00000 	.word	0x7ca00000
 800f70c:	7c900000 	.word	0x7c900000
 800f710:	7fefffff 	.word	0x7fefffff
 800f714:	2310      	movs	r3, #16
 800f716:	0022      	movs	r2, r4
 800f718:	401a      	ands	r2, r3
 800f71a:	9208      	str	r2, [sp, #32]
 800f71c:	421c      	tst	r4, r3
 800f71e:	d001      	beq.n	800f724 <_strtod_l+0x610>
 800f720:	335a      	adds	r3, #90	; 0x5a
 800f722:	9308      	str	r3, [sp, #32]
 800f724:	0030      	movs	r0, r6
 800f726:	0039      	movs	r1, r7
 800f728:	2300      	movs	r3, #0
 800f72a:	4dc5      	ldr	r5, [pc, #788]	; (800fa40 <_strtod_l+0x92c>)
 800f72c:	2201      	movs	r2, #1
 800f72e:	4214      	tst	r4, r2
 800f730:	d004      	beq.n	800f73c <_strtod_l+0x628>
 800f732:	682a      	ldr	r2, [r5, #0]
 800f734:	686b      	ldr	r3, [r5, #4]
 800f736:	f7f2 f977 	bl	8001a28 <__aeabi_dmul>
 800f73a:	2301      	movs	r3, #1
 800f73c:	1064      	asrs	r4, r4, #1
 800f73e:	3508      	adds	r5, #8
 800f740:	2c00      	cmp	r4, #0
 800f742:	d1f3      	bne.n	800f72c <_strtod_l+0x618>
 800f744:	2b00      	cmp	r3, #0
 800f746:	d001      	beq.n	800f74c <_strtod_l+0x638>
 800f748:	0006      	movs	r6, r0
 800f74a:	000f      	movs	r7, r1
 800f74c:	9b08      	ldr	r3, [sp, #32]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d00f      	beq.n	800f772 <_strtod_l+0x65e>
 800f752:	236b      	movs	r3, #107	; 0x6b
 800f754:	007a      	lsls	r2, r7, #1
 800f756:	0d52      	lsrs	r2, r2, #21
 800f758:	0039      	movs	r1, r7
 800f75a:	1a9b      	subs	r3, r3, r2
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	dd08      	ble.n	800f772 <_strtod_l+0x65e>
 800f760:	2b1f      	cmp	r3, #31
 800f762:	dc00      	bgt.n	800f766 <_strtod_l+0x652>
 800f764:	e124      	b.n	800f9b0 <_strtod_l+0x89c>
 800f766:	2600      	movs	r6, #0
 800f768:	2b34      	cmp	r3, #52	; 0x34
 800f76a:	dc00      	bgt.n	800f76e <_strtod_l+0x65a>
 800f76c:	e119      	b.n	800f9a2 <_strtod_l+0x88e>
 800f76e:	27dc      	movs	r7, #220	; 0xdc
 800f770:	04bf      	lsls	r7, r7, #18
 800f772:	2200      	movs	r2, #0
 800f774:	2300      	movs	r3, #0
 800f776:	0030      	movs	r0, r6
 800f778:	0039      	movs	r1, r7
 800f77a:	f7f0 fe6d 	bl	8000458 <__aeabi_dcmpeq>
 800f77e:	2800      	cmp	r0, #0
 800f780:	d1a0      	bne.n	800f6c4 <_strtod_l+0x5b0>
 800f782:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f784:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f786:	9300      	str	r3, [sp, #0]
 800f788:	9910      	ldr	r1, [sp, #64]	; 0x40
 800f78a:	9b06      	ldr	r3, [sp, #24]
 800f78c:	9805      	ldr	r0, [sp, #20]
 800f78e:	f001 f949 	bl	8010a24 <__s2b>
 800f792:	900b      	str	r0, [sp, #44]	; 0x2c
 800f794:	2800      	cmp	r0, #0
 800f796:	d100      	bne.n	800f79a <_strtod_l+0x686>
 800f798:	e721      	b.n	800f5de <_strtod_l+0x4ca>
 800f79a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f79c:	9907      	ldr	r1, [sp, #28]
 800f79e:	17da      	asrs	r2, r3, #31
 800f7a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f7a2:	1a5b      	subs	r3, r3, r1
 800f7a4:	401a      	ands	r2, r3
 800f7a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f7a8:	9215      	str	r2, [sp, #84]	; 0x54
 800f7aa:	43db      	mvns	r3, r3
 800f7ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f7ae:	17db      	asrs	r3, r3, #31
 800f7b0:	401a      	ands	r2, r3
 800f7b2:	2300      	movs	r3, #0
 800f7b4:	921a      	str	r2, [sp, #104]	; 0x68
 800f7b6:	9306      	str	r3, [sp, #24]
 800f7b8:	9307      	str	r3, [sp, #28]
 800f7ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f7bc:	9805      	ldr	r0, [sp, #20]
 800f7be:	6859      	ldr	r1, [r3, #4]
 800f7c0:	f001 f884 	bl	80108cc <_Balloc>
 800f7c4:	9009      	str	r0, [sp, #36]	; 0x24
 800f7c6:	2800      	cmp	r0, #0
 800f7c8:	d100      	bne.n	800f7cc <_strtod_l+0x6b8>
 800f7ca:	e70d      	b.n	800f5e8 <_strtod_l+0x4d4>
 800f7cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f7ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f7d0:	691b      	ldr	r3, [r3, #16]
 800f7d2:	310c      	adds	r1, #12
 800f7d4:	1c9a      	adds	r2, r3, #2
 800f7d6:	0092      	lsls	r2, r2, #2
 800f7d8:	300c      	adds	r0, #12
 800f7da:	930c      	str	r3, [sp, #48]	; 0x30
 800f7dc:	f7ff fc0a 	bl	800eff4 <memcpy>
 800f7e0:	ab22      	add	r3, sp, #136	; 0x88
 800f7e2:	9301      	str	r3, [sp, #4]
 800f7e4:	ab21      	add	r3, sp, #132	; 0x84
 800f7e6:	9300      	str	r3, [sp, #0]
 800f7e8:	0032      	movs	r2, r6
 800f7ea:	003b      	movs	r3, r7
 800f7ec:	9805      	ldr	r0, [sp, #20]
 800f7ee:	9612      	str	r6, [sp, #72]	; 0x48
 800f7f0:	9713      	str	r7, [sp, #76]	; 0x4c
 800f7f2:	f001 fc63 	bl	80110bc <__d2b>
 800f7f6:	9020      	str	r0, [sp, #128]	; 0x80
 800f7f8:	2800      	cmp	r0, #0
 800f7fa:	d100      	bne.n	800f7fe <_strtod_l+0x6ea>
 800f7fc:	e6f4      	b.n	800f5e8 <_strtod_l+0x4d4>
 800f7fe:	2101      	movs	r1, #1
 800f800:	9805      	ldr	r0, [sp, #20]
 800f802:	f001 f9a3 	bl	8010b4c <__i2b>
 800f806:	9007      	str	r0, [sp, #28]
 800f808:	2800      	cmp	r0, #0
 800f80a:	d100      	bne.n	800f80e <_strtod_l+0x6fa>
 800f80c:	e6ec      	b.n	800f5e8 <_strtod_l+0x4d4>
 800f80e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f810:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f812:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800f814:	1ad4      	subs	r4, r2, r3
 800f816:	2b00      	cmp	r3, #0
 800f818:	db01      	blt.n	800f81e <_strtod_l+0x70a>
 800f81a:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800f81c:	195d      	adds	r5, r3, r5
 800f81e:	9908      	ldr	r1, [sp, #32]
 800f820:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800f822:	1a5b      	subs	r3, r3, r1
 800f824:	2136      	movs	r1, #54	; 0x36
 800f826:	189b      	adds	r3, r3, r2
 800f828:	1a8a      	subs	r2, r1, r2
 800f82a:	4986      	ldr	r1, [pc, #536]	; (800fa44 <_strtod_l+0x930>)
 800f82c:	2001      	movs	r0, #1
 800f82e:	468c      	mov	ip, r1
 800f830:	2100      	movs	r1, #0
 800f832:	3b01      	subs	r3, #1
 800f834:	9110      	str	r1, [sp, #64]	; 0x40
 800f836:	9014      	str	r0, [sp, #80]	; 0x50
 800f838:	4563      	cmp	r3, ip
 800f83a:	da07      	bge.n	800f84c <_strtod_l+0x738>
 800f83c:	4661      	mov	r1, ip
 800f83e:	1ac9      	subs	r1, r1, r3
 800f840:	1a52      	subs	r2, r2, r1
 800f842:	291f      	cmp	r1, #31
 800f844:	dd00      	ble.n	800f848 <_strtod_l+0x734>
 800f846:	e0b8      	b.n	800f9ba <_strtod_l+0x8a6>
 800f848:	4088      	lsls	r0, r1
 800f84a:	9014      	str	r0, [sp, #80]	; 0x50
 800f84c:	18ab      	adds	r3, r5, r2
 800f84e:	930c      	str	r3, [sp, #48]	; 0x30
 800f850:	18a4      	adds	r4, r4, r2
 800f852:	9b08      	ldr	r3, [sp, #32]
 800f854:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f856:	191c      	adds	r4, r3, r4
 800f858:	002b      	movs	r3, r5
 800f85a:	4295      	cmp	r5, r2
 800f85c:	dd00      	ble.n	800f860 <_strtod_l+0x74c>
 800f85e:	0013      	movs	r3, r2
 800f860:	42a3      	cmp	r3, r4
 800f862:	dd00      	ble.n	800f866 <_strtod_l+0x752>
 800f864:	0023      	movs	r3, r4
 800f866:	2b00      	cmp	r3, #0
 800f868:	dd04      	ble.n	800f874 <_strtod_l+0x760>
 800f86a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f86c:	1ae4      	subs	r4, r4, r3
 800f86e:	1ad2      	subs	r2, r2, r3
 800f870:	920c      	str	r2, [sp, #48]	; 0x30
 800f872:	1aed      	subs	r5, r5, r3
 800f874:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f876:	2b00      	cmp	r3, #0
 800f878:	dd17      	ble.n	800f8aa <_strtod_l+0x796>
 800f87a:	001a      	movs	r2, r3
 800f87c:	9907      	ldr	r1, [sp, #28]
 800f87e:	9805      	ldr	r0, [sp, #20]
 800f880:	f001 fa2a 	bl	8010cd8 <__pow5mult>
 800f884:	9007      	str	r0, [sp, #28]
 800f886:	2800      	cmp	r0, #0
 800f888:	d100      	bne.n	800f88c <_strtod_l+0x778>
 800f88a:	e6ad      	b.n	800f5e8 <_strtod_l+0x4d4>
 800f88c:	0001      	movs	r1, r0
 800f88e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f890:	9805      	ldr	r0, [sp, #20]
 800f892:	f001 f971 	bl	8010b78 <__multiply>
 800f896:	900f      	str	r0, [sp, #60]	; 0x3c
 800f898:	2800      	cmp	r0, #0
 800f89a:	d100      	bne.n	800f89e <_strtod_l+0x78a>
 800f89c:	e6a4      	b.n	800f5e8 <_strtod_l+0x4d4>
 800f89e:	9920      	ldr	r1, [sp, #128]	; 0x80
 800f8a0:	9805      	ldr	r0, [sp, #20]
 800f8a2:	f001 f857 	bl	8010954 <_Bfree>
 800f8a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f8a8:	9320      	str	r3, [sp, #128]	; 0x80
 800f8aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	dd00      	ble.n	800f8b2 <_strtod_l+0x79e>
 800f8b0:	e089      	b.n	800f9c6 <_strtod_l+0x8b2>
 800f8b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	dd08      	ble.n	800f8ca <_strtod_l+0x7b6>
 800f8b8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f8ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f8bc:	9805      	ldr	r0, [sp, #20]
 800f8be:	f001 fa0b 	bl	8010cd8 <__pow5mult>
 800f8c2:	9009      	str	r0, [sp, #36]	; 0x24
 800f8c4:	2800      	cmp	r0, #0
 800f8c6:	d100      	bne.n	800f8ca <_strtod_l+0x7b6>
 800f8c8:	e68e      	b.n	800f5e8 <_strtod_l+0x4d4>
 800f8ca:	2c00      	cmp	r4, #0
 800f8cc:	dd08      	ble.n	800f8e0 <_strtod_l+0x7cc>
 800f8ce:	0022      	movs	r2, r4
 800f8d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f8d2:	9805      	ldr	r0, [sp, #20]
 800f8d4:	f001 fa5c 	bl	8010d90 <__lshift>
 800f8d8:	9009      	str	r0, [sp, #36]	; 0x24
 800f8da:	2800      	cmp	r0, #0
 800f8dc:	d100      	bne.n	800f8e0 <_strtod_l+0x7cc>
 800f8de:	e683      	b.n	800f5e8 <_strtod_l+0x4d4>
 800f8e0:	2d00      	cmp	r5, #0
 800f8e2:	dd08      	ble.n	800f8f6 <_strtod_l+0x7e2>
 800f8e4:	002a      	movs	r2, r5
 800f8e6:	9907      	ldr	r1, [sp, #28]
 800f8e8:	9805      	ldr	r0, [sp, #20]
 800f8ea:	f001 fa51 	bl	8010d90 <__lshift>
 800f8ee:	9007      	str	r0, [sp, #28]
 800f8f0:	2800      	cmp	r0, #0
 800f8f2:	d100      	bne.n	800f8f6 <_strtod_l+0x7e2>
 800f8f4:	e678      	b.n	800f5e8 <_strtod_l+0x4d4>
 800f8f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f8f8:	9920      	ldr	r1, [sp, #128]	; 0x80
 800f8fa:	9805      	ldr	r0, [sp, #20]
 800f8fc:	f001 fad2 	bl	8010ea4 <__mdiff>
 800f900:	9006      	str	r0, [sp, #24]
 800f902:	2800      	cmp	r0, #0
 800f904:	d100      	bne.n	800f908 <_strtod_l+0x7f4>
 800f906:	e66f      	b.n	800f5e8 <_strtod_l+0x4d4>
 800f908:	2200      	movs	r2, #0
 800f90a:	68c3      	ldr	r3, [r0, #12]
 800f90c:	9907      	ldr	r1, [sp, #28]
 800f90e:	60c2      	str	r2, [r0, #12]
 800f910:	930f      	str	r3, [sp, #60]	; 0x3c
 800f912:	f001 faab 	bl	8010e6c <__mcmp>
 800f916:	2800      	cmp	r0, #0
 800f918:	da5f      	bge.n	800f9da <_strtod_l+0x8c6>
 800f91a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f91c:	4333      	orrs	r3, r6
 800f91e:	d000      	beq.n	800f922 <_strtod_l+0x80e>
 800f920:	e08a      	b.n	800fa38 <_strtod_l+0x924>
 800f922:	033b      	lsls	r3, r7, #12
 800f924:	d000      	beq.n	800f928 <_strtod_l+0x814>
 800f926:	e087      	b.n	800fa38 <_strtod_l+0x924>
 800f928:	22d6      	movs	r2, #214	; 0xd6
 800f92a:	4b47      	ldr	r3, [pc, #284]	; (800fa48 <_strtod_l+0x934>)
 800f92c:	04d2      	lsls	r2, r2, #19
 800f92e:	403b      	ands	r3, r7
 800f930:	4293      	cmp	r3, r2
 800f932:	d800      	bhi.n	800f936 <_strtod_l+0x822>
 800f934:	e080      	b.n	800fa38 <_strtod_l+0x924>
 800f936:	9b06      	ldr	r3, [sp, #24]
 800f938:	695b      	ldr	r3, [r3, #20]
 800f93a:	930a      	str	r3, [sp, #40]	; 0x28
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d104      	bne.n	800f94a <_strtod_l+0x836>
 800f940:	9b06      	ldr	r3, [sp, #24]
 800f942:	691b      	ldr	r3, [r3, #16]
 800f944:	930a      	str	r3, [sp, #40]	; 0x28
 800f946:	2b01      	cmp	r3, #1
 800f948:	dd76      	ble.n	800fa38 <_strtod_l+0x924>
 800f94a:	9906      	ldr	r1, [sp, #24]
 800f94c:	2201      	movs	r2, #1
 800f94e:	9805      	ldr	r0, [sp, #20]
 800f950:	f001 fa1e 	bl	8010d90 <__lshift>
 800f954:	9907      	ldr	r1, [sp, #28]
 800f956:	9006      	str	r0, [sp, #24]
 800f958:	f001 fa88 	bl	8010e6c <__mcmp>
 800f95c:	2800      	cmp	r0, #0
 800f95e:	dd6b      	ble.n	800fa38 <_strtod_l+0x924>
 800f960:	9908      	ldr	r1, [sp, #32]
 800f962:	003b      	movs	r3, r7
 800f964:	4a38      	ldr	r2, [pc, #224]	; (800fa48 <_strtod_l+0x934>)
 800f966:	2900      	cmp	r1, #0
 800f968:	d100      	bne.n	800f96c <_strtod_l+0x858>
 800f96a:	e092      	b.n	800fa92 <_strtod_l+0x97e>
 800f96c:	0011      	movs	r1, r2
 800f96e:	20d6      	movs	r0, #214	; 0xd6
 800f970:	4039      	ands	r1, r7
 800f972:	04c0      	lsls	r0, r0, #19
 800f974:	4281      	cmp	r1, r0
 800f976:	dd00      	ble.n	800f97a <_strtod_l+0x866>
 800f978:	e08b      	b.n	800fa92 <_strtod_l+0x97e>
 800f97a:	23dc      	movs	r3, #220	; 0xdc
 800f97c:	049b      	lsls	r3, r3, #18
 800f97e:	4299      	cmp	r1, r3
 800f980:	dc00      	bgt.n	800f984 <_strtod_l+0x870>
 800f982:	e6a4      	b.n	800f6ce <_strtod_l+0x5ba>
 800f984:	0030      	movs	r0, r6
 800f986:	0039      	movs	r1, r7
 800f988:	2200      	movs	r2, #0
 800f98a:	4b30      	ldr	r3, [pc, #192]	; (800fa4c <_strtod_l+0x938>)
 800f98c:	f7f2 f84c 	bl	8001a28 <__aeabi_dmul>
 800f990:	0006      	movs	r6, r0
 800f992:	000f      	movs	r7, r1
 800f994:	4308      	orrs	r0, r1
 800f996:	d000      	beq.n	800f99a <_strtod_l+0x886>
 800f998:	e62f      	b.n	800f5fa <_strtod_l+0x4e6>
 800f99a:	2322      	movs	r3, #34	; 0x22
 800f99c:	9a05      	ldr	r2, [sp, #20]
 800f99e:	6013      	str	r3, [r2, #0]
 800f9a0:	e62b      	b.n	800f5fa <_strtod_l+0x4e6>
 800f9a2:	234b      	movs	r3, #75	; 0x4b
 800f9a4:	1a9a      	subs	r2, r3, r2
 800f9a6:	3b4c      	subs	r3, #76	; 0x4c
 800f9a8:	4093      	lsls	r3, r2
 800f9aa:	4019      	ands	r1, r3
 800f9ac:	000f      	movs	r7, r1
 800f9ae:	e6e0      	b.n	800f772 <_strtod_l+0x65e>
 800f9b0:	2201      	movs	r2, #1
 800f9b2:	4252      	negs	r2, r2
 800f9b4:	409a      	lsls	r2, r3
 800f9b6:	4016      	ands	r6, r2
 800f9b8:	e6db      	b.n	800f772 <_strtod_l+0x65e>
 800f9ba:	4925      	ldr	r1, [pc, #148]	; (800fa50 <_strtod_l+0x93c>)
 800f9bc:	1acb      	subs	r3, r1, r3
 800f9be:	0001      	movs	r1, r0
 800f9c0:	4099      	lsls	r1, r3
 800f9c2:	9110      	str	r1, [sp, #64]	; 0x40
 800f9c4:	e741      	b.n	800f84a <_strtod_l+0x736>
 800f9c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f9c8:	9920      	ldr	r1, [sp, #128]	; 0x80
 800f9ca:	9805      	ldr	r0, [sp, #20]
 800f9cc:	f001 f9e0 	bl	8010d90 <__lshift>
 800f9d0:	9020      	str	r0, [sp, #128]	; 0x80
 800f9d2:	2800      	cmp	r0, #0
 800f9d4:	d000      	beq.n	800f9d8 <_strtod_l+0x8c4>
 800f9d6:	e76c      	b.n	800f8b2 <_strtod_l+0x79e>
 800f9d8:	e606      	b.n	800f5e8 <_strtod_l+0x4d4>
 800f9da:	970c      	str	r7, [sp, #48]	; 0x30
 800f9dc:	2800      	cmp	r0, #0
 800f9de:	d176      	bne.n	800face <_strtod_l+0x9ba>
 800f9e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f9e2:	033b      	lsls	r3, r7, #12
 800f9e4:	0b1b      	lsrs	r3, r3, #12
 800f9e6:	2a00      	cmp	r2, #0
 800f9e8:	d038      	beq.n	800fa5c <_strtod_l+0x948>
 800f9ea:	4a1a      	ldr	r2, [pc, #104]	; (800fa54 <_strtod_l+0x940>)
 800f9ec:	4293      	cmp	r3, r2
 800f9ee:	d138      	bne.n	800fa62 <_strtod_l+0x94e>
 800f9f0:	2201      	movs	r2, #1
 800f9f2:	9b08      	ldr	r3, [sp, #32]
 800f9f4:	4252      	negs	r2, r2
 800f9f6:	0031      	movs	r1, r6
 800f9f8:	0010      	movs	r0, r2
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d00b      	beq.n	800fa16 <_strtod_l+0x902>
 800f9fe:	24d4      	movs	r4, #212	; 0xd4
 800fa00:	4b11      	ldr	r3, [pc, #68]	; (800fa48 <_strtod_l+0x934>)
 800fa02:	0010      	movs	r0, r2
 800fa04:	403b      	ands	r3, r7
 800fa06:	04e4      	lsls	r4, r4, #19
 800fa08:	42a3      	cmp	r3, r4
 800fa0a:	d804      	bhi.n	800fa16 <_strtod_l+0x902>
 800fa0c:	306c      	adds	r0, #108	; 0x6c
 800fa0e:	0d1b      	lsrs	r3, r3, #20
 800fa10:	1ac3      	subs	r3, r0, r3
 800fa12:	409a      	lsls	r2, r3
 800fa14:	0010      	movs	r0, r2
 800fa16:	4281      	cmp	r1, r0
 800fa18:	d123      	bne.n	800fa62 <_strtod_l+0x94e>
 800fa1a:	4b0f      	ldr	r3, [pc, #60]	; (800fa58 <_strtod_l+0x944>)
 800fa1c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fa1e:	429a      	cmp	r2, r3
 800fa20:	d102      	bne.n	800fa28 <_strtod_l+0x914>
 800fa22:	1c4b      	adds	r3, r1, #1
 800fa24:	d100      	bne.n	800fa28 <_strtod_l+0x914>
 800fa26:	e5df      	b.n	800f5e8 <_strtod_l+0x4d4>
 800fa28:	4b07      	ldr	r3, [pc, #28]	; (800fa48 <_strtod_l+0x934>)
 800fa2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fa2c:	2600      	movs	r6, #0
 800fa2e:	401a      	ands	r2, r3
 800fa30:	0013      	movs	r3, r2
 800fa32:	2280      	movs	r2, #128	; 0x80
 800fa34:	0352      	lsls	r2, r2, #13
 800fa36:	189f      	adds	r7, r3, r2
 800fa38:	9b08      	ldr	r3, [sp, #32]
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d1a2      	bne.n	800f984 <_strtod_l+0x870>
 800fa3e:	e5dc      	b.n	800f5fa <_strtod_l+0x4e6>
 800fa40:	08013a48 	.word	0x08013a48
 800fa44:	fffffc02 	.word	0xfffffc02
 800fa48:	7ff00000 	.word	0x7ff00000
 800fa4c:	39500000 	.word	0x39500000
 800fa50:	fffffbe2 	.word	0xfffffbe2
 800fa54:	000fffff 	.word	0x000fffff
 800fa58:	7fefffff 	.word	0x7fefffff
 800fa5c:	4333      	orrs	r3, r6
 800fa5e:	d100      	bne.n	800fa62 <_strtod_l+0x94e>
 800fa60:	e77e      	b.n	800f960 <_strtod_l+0x84c>
 800fa62:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d01d      	beq.n	800faa4 <_strtod_l+0x990>
 800fa68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fa6a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800fa6c:	4213      	tst	r3, r2
 800fa6e:	d0e3      	beq.n	800fa38 <_strtod_l+0x924>
 800fa70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fa72:	0030      	movs	r0, r6
 800fa74:	0039      	movs	r1, r7
 800fa76:	9a08      	ldr	r2, [sp, #32]
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d017      	beq.n	800faac <_strtod_l+0x998>
 800fa7c:	f7ff fb32 	bl	800f0e4 <sulp>
 800fa80:	0002      	movs	r2, r0
 800fa82:	000b      	movs	r3, r1
 800fa84:	9812      	ldr	r0, [sp, #72]	; 0x48
 800fa86:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800fa88:	f7f1 f890 	bl	8000bac <__aeabi_dadd>
 800fa8c:	0006      	movs	r6, r0
 800fa8e:	000f      	movs	r7, r1
 800fa90:	e7d2      	b.n	800fa38 <_strtod_l+0x924>
 800fa92:	2601      	movs	r6, #1
 800fa94:	4013      	ands	r3, r2
 800fa96:	4a99      	ldr	r2, [pc, #612]	; (800fcfc <_strtod_l+0xbe8>)
 800fa98:	4276      	negs	r6, r6
 800fa9a:	189b      	adds	r3, r3, r2
 800fa9c:	4a98      	ldr	r2, [pc, #608]	; (800fd00 <_strtod_l+0xbec>)
 800fa9e:	431a      	orrs	r2, r3
 800faa0:	0017      	movs	r7, r2
 800faa2:	e7c9      	b.n	800fa38 <_strtod_l+0x924>
 800faa4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800faa6:	4233      	tst	r3, r6
 800faa8:	d0c6      	beq.n	800fa38 <_strtod_l+0x924>
 800faaa:	e7e1      	b.n	800fa70 <_strtod_l+0x95c>
 800faac:	f7ff fb1a 	bl	800f0e4 <sulp>
 800fab0:	0002      	movs	r2, r0
 800fab2:	000b      	movs	r3, r1
 800fab4:	9812      	ldr	r0, [sp, #72]	; 0x48
 800fab6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800fab8:	f7f2 fa22 	bl	8001f00 <__aeabi_dsub>
 800fabc:	2200      	movs	r2, #0
 800fabe:	2300      	movs	r3, #0
 800fac0:	0006      	movs	r6, r0
 800fac2:	000f      	movs	r7, r1
 800fac4:	f7f0 fcc8 	bl	8000458 <__aeabi_dcmpeq>
 800fac8:	2800      	cmp	r0, #0
 800faca:	d0b5      	beq.n	800fa38 <_strtod_l+0x924>
 800facc:	e5ff      	b.n	800f6ce <_strtod_l+0x5ba>
 800face:	9907      	ldr	r1, [sp, #28]
 800fad0:	9806      	ldr	r0, [sp, #24]
 800fad2:	f001 fb57 	bl	8011184 <__ratio>
 800fad6:	2380      	movs	r3, #128	; 0x80
 800fad8:	2200      	movs	r2, #0
 800fada:	05db      	lsls	r3, r3, #23
 800fadc:	0004      	movs	r4, r0
 800fade:	000d      	movs	r5, r1
 800fae0:	f7f0 fcca 	bl	8000478 <__aeabi_dcmple>
 800fae4:	2800      	cmp	r0, #0
 800fae6:	d075      	beq.n	800fbd4 <_strtod_l+0xac0>
 800fae8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800faea:	2b00      	cmp	r3, #0
 800faec:	d047      	beq.n	800fb7e <_strtod_l+0xa6a>
 800faee:	2300      	movs	r3, #0
 800faf0:	4c84      	ldr	r4, [pc, #528]	; (800fd04 <_strtod_l+0xbf0>)
 800faf2:	2500      	movs	r5, #0
 800faf4:	9310      	str	r3, [sp, #64]	; 0x40
 800faf6:	9411      	str	r4, [sp, #68]	; 0x44
 800faf8:	4c82      	ldr	r4, [pc, #520]	; (800fd04 <_strtod_l+0xbf0>)
 800fafa:	4a83      	ldr	r2, [pc, #524]	; (800fd08 <_strtod_l+0xbf4>)
 800fafc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fafe:	4013      	ands	r3, r2
 800fb00:	9314      	str	r3, [sp, #80]	; 0x50
 800fb02:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fb04:	4b81      	ldr	r3, [pc, #516]	; (800fd0c <_strtod_l+0xbf8>)
 800fb06:	429a      	cmp	r2, r3
 800fb08:	d000      	beq.n	800fb0c <_strtod_l+0x9f8>
 800fb0a:	e0ac      	b.n	800fc66 <_strtod_l+0xb52>
 800fb0c:	4a80      	ldr	r2, [pc, #512]	; (800fd10 <_strtod_l+0xbfc>)
 800fb0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fb10:	4694      	mov	ip, r2
 800fb12:	4463      	add	r3, ip
 800fb14:	001f      	movs	r7, r3
 800fb16:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800fb18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fb1a:	0030      	movs	r0, r6
 800fb1c:	0039      	movs	r1, r7
 800fb1e:	920c      	str	r2, [sp, #48]	; 0x30
 800fb20:	930d      	str	r3, [sp, #52]	; 0x34
 800fb22:	f001 fa57 	bl	8010fd4 <__ulp>
 800fb26:	0002      	movs	r2, r0
 800fb28:	000b      	movs	r3, r1
 800fb2a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800fb2c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800fb2e:	f7f1 ff7b 	bl	8001a28 <__aeabi_dmul>
 800fb32:	0032      	movs	r2, r6
 800fb34:	003b      	movs	r3, r7
 800fb36:	f7f1 f839 	bl	8000bac <__aeabi_dadd>
 800fb3a:	4a73      	ldr	r2, [pc, #460]	; (800fd08 <_strtod_l+0xbf4>)
 800fb3c:	4b75      	ldr	r3, [pc, #468]	; (800fd14 <_strtod_l+0xc00>)
 800fb3e:	0006      	movs	r6, r0
 800fb40:	400a      	ands	r2, r1
 800fb42:	429a      	cmp	r2, r3
 800fb44:	d95e      	bls.n	800fc04 <_strtod_l+0xaf0>
 800fb46:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800fb48:	4b73      	ldr	r3, [pc, #460]	; (800fd18 <_strtod_l+0xc04>)
 800fb4a:	429a      	cmp	r2, r3
 800fb4c:	d103      	bne.n	800fb56 <_strtod_l+0xa42>
 800fb4e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fb50:	3301      	adds	r3, #1
 800fb52:	d100      	bne.n	800fb56 <_strtod_l+0xa42>
 800fb54:	e548      	b.n	800f5e8 <_strtod_l+0x4d4>
 800fb56:	2601      	movs	r6, #1
 800fb58:	4f6f      	ldr	r7, [pc, #444]	; (800fd18 <_strtod_l+0xc04>)
 800fb5a:	4276      	negs	r6, r6
 800fb5c:	9920      	ldr	r1, [sp, #128]	; 0x80
 800fb5e:	9805      	ldr	r0, [sp, #20]
 800fb60:	f000 fef8 	bl	8010954 <_Bfree>
 800fb64:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fb66:	9805      	ldr	r0, [sp, #20]
 800fb68:	f000 fef4 	bl	8010954 <_Bfree>
 800fb6c:	9907      	ldr	r1, [sp, #28]
 800fb6e:	9805      	ldr	r0, [sp, #20]
 800fb70:	f000 fef0 	bl	8010954 <_Bfree>
 800fb74:	9906      	ldr	r1, [sp, #24]
 800fb76:	9805      	ldr	r0, [sp, #20]
 800fb78:	f000 feec 	bl	8010954 <_Bfree>
 800fb7c:	e61d      	b.n	800f7ba <_strtod_l+0x6a6>
 800fb7e:	2e00      	cmp	r6, #0
 800fb80:	d11c      	bne.n	800fbbc <_strtod_l+0xaa8>
 800fb82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fb84:	031b      	lsls	r3, r3, #12
 800fb86:	d11f      	bne.n	800fbc8 <_strtod_l+0xab4>
 800fb88:	2200      	movs	r2, #0
 800fb8a:	0020      	movs	r0, r4
 800fb8c:	0029      	movs	r1, r5
 800fb8e:	4b5d      	ldr	r3, [pc, #372]	; (800fd04 <_strtod_l+0xbf0>)
 800fb90:	f7f0 fc68 	bl	8000464 <__aeabi_dcmplt>
 800fb94:	2800      	cmp	r0, #0
 800fb96:	d11a      	bne.n	800fbce <_strtod_l+0xaba>
 800fb98:	0020      	movs	r0, r4
 800fb9a:	0029      	movs	r1, r5
 800fb9c:	2200      	movs	r2, #0
 800fb9e:	4b5f      	ldr	r3, [pc, #380]	; (800fd1c <_strtod_l+0xc08>)
 800fba0:	f7f1 ff42 	bl	8001a28 <__aeabi_dmul>
 800fba4:	0005      	movs	r5, r0
 800fba6:	000c      	movs	r4, r1
 800fba8:	2380      	movs	r3, #128	; 0x80
 800fbaa:	061b      	lsls	r3, r3, #24
 800fbac:	18e3      	adds	r3, r4, r3
 800fbae:	951c      	str	r5, [sp, #112]	; 0x70
 800fbb0:	931d      	str	r3, [sp, #116]	; 0x74
 800fbb2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800fbb4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fbb6:	9210      	str	r2, [sp, #64]	; 0x40
 800fbb8:	9311      	str	r3, [sp, #68]	; 0x44
 800fbba:	e79e      	b.n	800fafa <_strtod_l+0x9e6>
 800fbbc:	2e01      	cmp	r6, #1
 800fbbe:	d103      	bne.n	800fbc8 <_strtod_l+0xab4>
 800fbc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d100      	bne.n	800fbc8 <_strtod_l+0xab4>
 800fbc6:	e582      	b.n	800f6ce <_strtod_l+0x5ba>
 800fbc8:	2300      	movs	r3, #0
 800fbca:	4c55      	ldr	r4, [pc, #340]	; (800fd20 <_strtod_l+0xc0c>)
 800fbcc:	e791      	b.n	800faf2 <_strtod_l+0x9de>
 800fbce:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800fbd0:	4c52      	ldr	r4, [pc, #328]	; (800fd1c <_strtod_l+0xc08>)
 800fbd2:	e7e9      	b.n	800fba8 <_strtod_l+0xa94>
 800fbd4:	2200      	movs	r2, #0
 800fbd6:	0020      	movs	r0, r4
 800fbd8:	0029      	movs	r1, r5
 800fbda:	4b50      	ldr	r3, [pc, #320]	; (800fd1c <_strtod_l+0xc08>)
 800fbdc:	f7f1 ff24 	bl	8001a28 <__aeabi_dmul>
 800fbe0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fbe2:	0005      	movs	r5, r0
 800fbe4:	000b      	movs	r3, r1
 800fbe6:	000c      	movs	r4, r1
 800fbe8:	2a00      	cmp	r2, #0
 800fbea:	d107      	bne.n	800fbfc <_strtod_l+0xae8>
 800fbec:	2280      	movs	r2, #128	; 0x80
 800fbee:	0612      	lsls	r2, r2, #24
 800fbf0:	188b      	adds	r3, r1, r2
 800fbf2:	9016      	str	r0, [sp, #88]	; 0x58
 800fbf4:	9317      	str	r3, [sp, #92]	; 0x5c
 800fbf6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800fbf8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fbfa:	e7dc      	b.n	800fbb6 <_strtod_l+0xaa2>
 800fbfc:	0002      	movs	r2, r0
 800fbfe:	9216      	str	r2, [sp, #88]	; 0x58
 800fc00:	9317      	str	r3, [sp, #92]	; 0x5c
 800fc02:	e7f8      	b.n	800fbf6 <_strtod_l+0xae2>
 800fc04:	23d4      	movs	r3, #212	; 0xd4
 800fc06:	049b      	lsls	r3, r3, #18
 800fc08:	18cf      	adds	r7, r1, r3
 800fc0a:	9b08      	ldr	r3, [sp, #32]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d1a5      	bne.n	800fb5c <_strtod_l+0xa48>
 800fc10:	4b3d      	ldr	r3, [pc, #244]	; (800fd08 <_strtod_l+0xbf4>)
 800fc12:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fc14:	403b      	ands	r3, r7
 800fc16:	429a      	cmp	r2, r3
 800fc18:	d1a0      	bne.n	800fb5c <_strtod_l+0xa48>
 800fc1a:	0028      	movs	r0, r5
 800fc1c:	0021      	movs	r1, r4
 800fc1e:	f7f0 fca1 	bl	8000564 <__aeabi_d2lz>
 800fc22:	f7f0 fcdb 	bl	80005dc <__aeabi_l2d>
 800fc26:	0002      	movs	r2, r0
 800fc28:	000b      	movs	r3, r1
 800fc2a:	0028      	movs	r0, r5
 800fc2c:	0021      	movs	r1, r4
 800fc2e:	f7f2 f967 	bl	8001f00 <__aeabi_dsub>
 800fc32:	033b      	lsls	r3, r7, #12
 800fc34:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fc36:	0b1b      	lsrs	r3, r3, #12
 800fc38:	4333      	orrs	r3, r6
 800fc3a:	4313      	orrs	r3, r2
 800fc3c:	0004      	movs	r4, r0
 800fc3e:	000d      	movs	r5, r1
 800fc40:	4a38      	ldr	r2, [pc, #224]	; (800fd24 <_strtod_l+0xc10>)
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d055      	beq.n	800fcf2 <_strtod_l+0xbde>
 800fc46:	4b38      	ldr	r3, [pc, #224]	; (800fd28 <_strtod_l+0xc14>)
 800fc48:	f7f0 fc0c 	bl	8000464 <__aeabi_dcmplt>
 800fc4c:	2800      	cmp	r0, #0
 800fc4e:	d000      	beq.n	800fc52 <_strtod_l+0xb3e>
 800fc50:	e4d3      	b.n	800f5fa <_strtod_l+0x4e6>
 800fc52:	0020      	movs	r0, r4
 800fc54:	0029      	movs	r1, r5
 800fc56:	4a35      	ldr	r2, [pc, #212]	; (800fd2c <_strtod_l+0xc18>)
 800fc58:	4b30      	ldr	r3, [pc, #192]	; (800fd1c <_strtod_l+0xc08>)
 800fc5a:	f7f0 fc17 	bl	800048c <__aeabi_dcmpgt>
 800fc5e:	2800      	cmp	r0, #0
 800fc60:	d100      	bne.n	800fc64 <_strtod_l+0xb50>
 800fc62:	e77b      	b.n	800fb5c <_strtod_l+0xa48>
 800fc64:	e4c9      	b.n	800f5fa <_strtod_l+0x4e6>
 800fc66:	9b08      	ldr	r3, [sp, #32]
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d02b      	beq.n	800fcc4 <_strtod_l+0xbb0>
 800fc6c:	23d4      	movs	r3, #212	; 0xd4
 800fc6e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fc70:	04db      	lsls	r3, r3, #19
 800fc72:	429a      	cmp	r2, r3
 800fc74:	d826      	bhi.n	800fcc4 <_strtod_l+0xbb0>
 800fc76:	0028      	movs	r0, r5
 800fc78:	0021      	movs	r1, r4
 800fc7a:	4a2d      	ldr	r2, [pc, #180]	; (800fd30 <_strtod_l+0xc1c>)
 800fc7c:	4b2d      	ldr	r3, [pc, #180]	; (800fd34 <_strtod_l+0xc20>)
 800fc7e:	f7f0 fbfb 	bl	8000478 <__aeabi_dcmple>
 800fc82:	2800      	cmp	r0, #0
 800fc84:	d017      	beq.n	800fcb6 <_strtod_l+0xba2>
 800fc86:	0028      	movs	r0, r5
 800fc88:	0021      	movs	r1, r4
 800fc8a:	f7f0 fc4d 	bl	8000528 <__aeabi_d2uiz>
 800fc8e:	2800      	cmp	r0, #0
 800fc90:	d100      	bne.n	800fc94 <_strtod_l+0xb80>
 800fc92:	3001      	adds	r0, #1
 800fc94:	f7f2 fd4a 	bl	800272c <__aeabi_ui2d>
 800fc98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fc9a:	0005      	movs	r5, r0
 800fc9c:	000b      	movs	r3, r1
 800fc9e:	000c      	movs	r4, r1
 800fca0:	2a00      	cmp	r2, #0
 800fca2:	d122      	bne.n	800fcea <_strtod_l+0xbd6>
 800fca4:	2280      	movs	r2, #128	; 0x80
 800fca6:	0612      	lsls	r2, r2, #24
 800fca8:	188b      	adds	r3, r1, r2
 800fcaa:	9018      	str	r0, [sp, #96]	; 0x60
 800fcac:	9319      	str	r3, [sp, #100]	; 0x64
 800fcae:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800fcb0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fcb2:	9210      	str	r2, [sp, #64]	; 0x40
 800fcb4:	9311      	str	r3, [sp, #68]	; 0x44
 800fcb6:	22d6      	movs	r2, #214	; 0xd6
 800fcb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fcba:	04d2      	lsls	r2, r2, #19
 800fcbc:	189b      	adds	r3, r3, r2
 800fcbe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fcc0:	1a9b      	subs	r3, r3, r2
 800fcc2:	9311      	str	r3, [sp, #68]	; 0x44
 800fcc4:	9812      	ldr	r0, [sp, #72]	; 0x48
 800fcc6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800fcc8:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800fcca:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800fccc:	f001 f982 	bl	8010fd4 <__ulp>
 800fcd0:	0002      	movs	r2, r0
 800fcd2:	000b      	movs	r3, r1
 800fcd4:	0030      	movs	r0, r6
 800fcd6:	0039      	movs	r1, r7
 800fcd8:	f7f1 fea6 	bl	8001a28 <__aeabi_dmul>
 800fcdc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fcde:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fce0:	f7f0 ff64 	bl	8000bac <__aeabi_dadd>
 800fce4:	0006      	movs	r6, r0
 800fce6:	000f      	movs	r7, r1
 800fce8:	e78f      	b.n	800fc0a <_strtod_l+0xaf6>
 800fcea:	0002      	movs	r2, r0
 800fcec:	9218      	str	r2, [sp, #96]	; 0x60
 800fcee:	9319      	str	r3, [sp, #100]	; 0x64
 800fcf0:	e7dd      	b.n	800fcae <_strtod_l+0xb9a>
 800fcf2:	4b11      	ldr	r3, [pc, #68]	; (800fd38 <_strtod_l+0xc24>)
 800fcf4:	f7f0 fbb6 	bl	8000464 <__aeabi_dcmplt>
 800fcf8:	e7b1      	b.n	800fc5e <_strtod_l+0xb4a>
 800fcfa:	46c0      	nop			; (mov r8, r8)
 800fcfc:	fff00000 	.word	0xfff00000
 800fd00:	000fffff 	.word	0x000fffff
 800fd04:	3ff00000 	.word	0x3ff00000
 800fd08:	7ff00000 	.word	0x7ff00000
 800fd0c:	7fe00000 	.word	0x7fe00000
 800fd10:	fcb00000 	.word	0xfcb00000
 800fd14:	7c9fffff 	.word	0x7c9fffff
 800fd18:	7fefffff 	.word	0x7fefffff
 800fd1c:	3fe00000 	.word	0x3fe00000
 800fd20:	bff00000 	.word	0xbff00000
 800fd24:	94a03595 	.word	0x94a03595
 800fd28:	3fdfffff 	.word	0x3fdfffff
 800fd2c:	35afe535 	.word	0x35afe535
 800fd30:	ffc00000 	.word	0xffc00000
 800fd34:	41dfffff 	.word	0x41dfffff
 800fd38:	3fcfffff 	.word	0x3fcfffff

0800fd3c <strtof>:
 800fd3c:	000a      	movs	r2, r1
 800fd3e:	0001      	movs	r1, r0
 800fd40:	4824      	ldr	r0, [pc, #144]	; (800fdd4 <strtof+0x98>)
 800fd42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd44:	6800      	ldr	r0, [r0, #0]
 800fd46:	4b24      	ldr	r3, [pc, #144]	; (800fdd8 <strtof+0x9c>)
 800fd48:	f7ff f9e4 	bl	800f114 <_strtod_l>
 800fd4c:	0006      	movs	r6, r0
 800fd4e:	000c      	movs	r4, r1
 800fd50:	0002      	movs	r2, r0
 800fd52:	000b      	movs	r3, r1
 800fd54:	0030      	movs	r0, r6
 800fd56:	0021      	movs	r1, r4
 800fd58:	f7f2 fc64 	bl	8002624 <__aeabi_dcmpun>
 800fd5c:	2800      	cmp	r0, #0
 800fd5e:	d00d      	beq.n	800fd7c <strtof+0x40>
 800fd60:	481e      	ldr	r0, [pc, #120]	; (800fddc <strtof+0xa0>)
 800fd62:	2c00      	cmp	r4, #0
 800fd64:	da06      	bge.n	800fd74 <strtof+0x38>
 800fd66:	f001 fe85 	bl	8011a74 <nanf>
 800fd6a:	2380      	movs	r3, #128	; 0x80
 800fd6c:	061b      	lsls	r3, r3, #24
 800fd6e:	18c5      	adds	r5, r0, r3
 800fd70:	1c28      	adds	r0, r5, #0
 800fd72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd74:	f001 fe7e 	bl	8011a74 <nanf>
 800fd78:	1c05      	adds	r5, r0, #0
 800fd7a:	e7f9      	b.n	800fd70 <strtof+0x34>
 800fd7c:	0021      	movs	r1, r4
 800fd7e:	0030      	movs	r0, r6
 800fd80:	f7f2 fd42 	bl	8002808 <__aeabi_d2f>
 800fd84:	0047      	lsls	r7, r0, #1
 800fd86:	087f      	lsrs	r7, r7, #1
 800fd88:	1c05      	adds	r5, r0, #0
 800fd8a:	4915      	ldr	r1, [pc, #84]	; (800fde0 <strtof+0xa4>)
 800fd8c:	1c38      	adds	r0, r7, #0
 800fd8e:	f7f0 fe89 	bl	8000aa4 <__aeabi_fcmpun>
 800fd92:	2800      	cmp	r0, #0
 800fd94:	d1ec      	bne.n	800fd70 <strtof+0x34>
 800fd96:	4912      	ldr	r1, [pc, #72]	; (800fde0 <strtof+0xa4>)
 800fd98:	1c38      	adds	r0, r7, #0
 800fd9a:	f7f0 fba7 	bl	80004ec <__aeabi_fcmple>
 800fd9e:	2800      	cmp	r0, #0
 800fda0:	d1e6      	bne.n	800fd70 <strtof+0x34>
 800fda2:	2201      	movs	r2, #1
 800fda4:	0064      	lsls	r4, r4, #1
 800fda6:	0864      	lsrs	r4, r4, #1
 800fda8:	0030      	movs	r0, r6
 800fdaa:	0021      	movs	r1, r4
 800fdac:	4b0d      	ldr	r3, [pc, #52]	; (800fde4 <strtof+0xa8>)
 800fdae:	4252      	negs	r2, r2
 800fdb0:	f7f2 fc38 	bl	8002624 <__aeabi_dcmpun>
 800fdb4:	2800      	cmp	r0, #0
 800fdb6:	d108      	bne.n	800fdca <strtof+0x8e>
 800fdb8:	2201      	movs	r2, #1
 800fdba:	0030      	movs	r0, r6
 800fdbc:	0021      	movs	r1, r4
 800fdbe:	4b09      	ldr	r3, [pc, #36]	; (800fde4 <strtof+0xa8>)
 800fdc0:	4252      	negs	r2, r2
 800fdc2:	f7f0 fb59 	bl	8000478 <__aeabi_dcmple>
 800fdc6:	2800      	cmp	r0, #0
 800fdc8:	d0d2      	beq.n	800fd70 <strtof+0x34>
 800fdca:	2222      	movs	r2, #34	; 0x22
 800fdcc:	4b01      	ldr	r3, [pc, #4]	; (800fdd4 <strtof+0x98>)
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	601a      	str	r2, [r3, #0]
 800fdd2:	e7cd      	b.n	800fd70 <strtof+0x34>
 800fdd4:	200000e4 	.word	0x200000e4
 800fdd8:	2000014c 	.word	0x2000014c
 800fddc:	08013dda 	.word	0x08013dda
 800fde0:	7f7fffff 	.word	0x7f7fffff
 800fde4:	7fefffff 	.word	0x7fefffff

0800fde8 <_strtol_l.constprop.0>:
 800fde8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fdea:	b087      	sub	sp, #28
 800fdec:	001e      	movs	r6, r3
 800fdee:	9005      	str	r0, [sp, #20]
 800fdf0:	9101      	str	r1, [sp, #4]
 800fdf2:	9202      	str	r2, [sp, #8]
 800fdf4:	2b01      	cmp	r3, #1
 800fdf6:	d045      	beq.n	800fe84 <_strtol_l.constprop.0+0x9c>
 800fdf8:	000b      	movs	r3, r1
 800fdfa:	2e24      	cmp	r6, #36	; 0x24
 800fdfc:	d842      	bhi.n	800fe84 <_strtol_l.constprop.0+0x9c>
 800fdfe:	4a3f      	ldr	r2, [pc, #252]	; (800fefc <_strtol_l.constprop.0+0x114>)
 800fe00:	2108      	movs	r1, #8
 800fe02:	4694      	mov	ip, r2
 800fe04:	001a      	movs	r2, r3
 800fe06:	4660      	mov	r0, ip
 800fe08:	7814      	ldrb	r4, [r2, #0]
 800fe0a:	3301      	adds	r3, #1
 800fe0c:	5d00      	ldrb	r0, [r0, r4]
 800fe0e:	001d      	movs	r5, r3
 800fe10:	0007      	movs	r7, r0
 800fe12:	400f      	ands	r7, r1
 800fe14:	4208      	tst	r0, r1
 800fe16:	d1f5      	bne.n	800fe04 <_strtol_l.constprop.0+0x1c>
 800fe18:	2c2d      	cmp	r4, #45	; 0x2d
 800fe1a:	d13a      	bne.n	800fe92 <_strtol_l.constprop.0+0xaa>
 800fe1c:	2701      	movs	r7, #1
 800fe1e:	781c      	ldrb	r4, [r3, #0]
 800fe20:	1c95      	adds	r5, r2, #2
 800fe22:	2e00      	cmp	r6, #0
 800fe24:	d065      	beq.n	800fef2 <_strtol_l.constprop.0+0x10a>
 800fe26:	2e10      	cmp	r6, #16
 800fe28:	d109      	bne.n	800fe3e <_strtol_l.constprop.0+0x56>
 800fe2a:	2c30      	cmp	r4, #48	; 0x30
 800fe2c:	d107      	bne.n	800fe3e <_strtol_l.constprop.0+0x56>
 800fe2e:	2220      	movs	r2, #32
 800fe30:	782b      	ldrb	r3, [r5, #0]
 800fe32:	4393      	bics	r3, r2
 800fe34:	2b58      	cmp	r3, #88	; 0x58
 800fe36:	d157      	bne.n	800fee8 <_strtol_l.constprop.0+0x100>
 800fe38:	2610      	movs	r6, #16
 800fe3a:	786c      	ldrb	r4, [r5, #1]
 800fe3c:	3502      	adds	r5, #2
 800fe3e:	4b30      	ldr	r3, [pc, #192]	; (800ff00 <_strtol_l.constprop.0+0x118>)
 800fe40:	0031      	movs	r1, r6
 800fe42:	18fb      	adds	r3, r7, r3
 800fe44:	0018      	movs	r0, r3
 800fe46:	9303      	str	r3, [sp, #12]
 800fe48:	f7f0 fa06 	bl	8000258 <__aeabi_uidivmod>
 800fe4c:	2300      	movs	r3, #0
 800fe4e:	2201      	movs	r2, #1
 800fe50:	4684      	mov	ip, r0
 800fe52:	0018      	movs	r0, r3
 800fe54:	9104      	str	r1, [sp, #16]
 800fe56:	4252      	negs	r2, r2
 800fe58:	0021      	movs	r1, r4
 800fe5a:	3930      	subs	r1, #48	; 0x30
 800fe5c:	2909      	cmp	r1, #9
 800fe5e:	d81d      	bhi.n	800fe9c <_strtol_l.constprop.0+0xb4>
 800fe60:	000c      	movs	r4, r1
 800fe62:	42a6      	cmp	r6, r4
 800fe64:	dd28      	ble.n	800feb8 <_strtol_l.constprop.0+0xd0>
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	db24      	blt.n	800feb4 <_strtol_l.constprop.0+0xcc>
 800fe6a:	0013      	movs	r3, r2
 800fe6c:	4584      	cmp	ip, r0
 800fe6e:	d306      	bcc.n	800fe7e <_strtol_l.constprop.0+0x96>
 800fe70:	d102      	bne.n	800fe78 <_strtol_l.constprop.0+0x90>
 800fe72:	9904      	ldr	r1, [sp, #16]
 800fe74:	42a1      	cmp	r1, r4
 800fe76:	db02      	blt.n	800fe7e <_strtol_l.constprop.0+0x96>
 800fe78:	2301      	movs	r3, #1
 800fe7a:	4370      	muls	r0, r6
 800fe7c:	1820      	adds	r0, r4, r0
 800fe7e:	782c      	ldrb	r4, [r5, #0]
 800fe80:	3501      	adds	r5, #1
 800fe82:	e7e9      	b.n	800fe58 <_strtol_l.constprop.0+0x70>
 800fe84:	f7ff f88c 	bl	800efa0 <__errno>
 800fe88:	2316      	movs	r3, #22
 800fe8a:	6003      	str	r3, [r0, #0]
 800fe8c:	2000      	movs	r0, #0
 800fe8e:	b007      	add	sp, #28
 800fe90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe92:	2c2b      	cmp	r4, #43	; 0x2b
 800fe94:	d1c5      	bne.n	800fe22 <_strtol_l.constprop.0+0x3a>
 800fe96:	781c      	ldrb	r4, [r3, #0]
 800fe98:	1c95      	adds	r5, r2, #2
 800fe9a:	e7c2      	b.n	800fe22 <_strtol_l.constprop.0+0x3a>
 800fe9c:	0021      	movs	r1, r4
 800fe9e:	3941      	subs	r1, #65	; 0x41
 800fea0:	2919      	cmp	r1, #25
 800fea2:	d801      	bhi.n	800fea8 <_strtol_l.constprop.0+0xc0>
 800fea4:	3c37      	subs	r4, #55	; 0x37
 800fea6:	e7dc      	b.n	800fe62 <_strtol_l.constprop.0+0x7a>
 800fea8:	0021      	movs	r1, r4
 800feaa:	3961      	subs	r1, #97	; 0x61
 800feac:	2919      	cmp	r1, #25
 800feae:	d803      	bhi.n	800feb8 <_strtol_l.constprop.0+0xd0>
 800feb0:	3c57      	subs	r4, #87	; 0x57
 800feb2:	e7d6      	b.n	800fe62 <_strtol_l.constprop.0+0x7a>
 800feb4:	0013      	movs	r3, r2
 800feb6:	e7e2      	b.n	800fe7e <_strtol_l.constprop.0+0x96>
 800feb8:	2b00      	cmp	r3, #0
 800feba:	da09      	bge.n	800fed0 <_strtol_l.constprop.0+0xe8>
 800febc:	2322      	movs	r3, #34	; 0x22
 800febe:	9a05      	ldr	r2, [sp, #20]
 800fec0:	9803      	ldr	r0, [sp, #12]
 800fec2:	6013      	str	r3, [r2, #0]
 800fec4:	9b02      	ldr	r3, [sp, #8]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d0e1      	beq.n	800fe8e <_strtol_l.constprop.0+0xa6>
 800feca:	1e6b      	subs	r3, r5, #1
 800fecc:	9301      	str	r3, [sp, #4]
 800fece:	e007      	b.n	800fee0 <_strtol_l.constprop.0+0xf8>
 800fed0:	2f00      	cmp	r7, #0
 800fed2:	d000      	beq.n	800fed6 <_strtol_l.constprop.0+0xee>
 800fed4:	4240      	negs	r0, r0
 800fed6:	9a02      	ldr	r2, [sp, #8]
 800fed8:	2a00      	cmp	r2, #0
 800feda:	d0d8      	beq.n	800fe8e <_strtol_l.constprop.0+0xa6>
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d1f4      	bne.n	800feca <_strtol_l.constprop.0+0xe2>
 800fee0:	9b02      	ldr	r3, [sp, #8]
 800fee2:	9a01      	ldr	r2, [sp, #4]
 800fee4:	601a      	str	r2, [r3, #0]
 800fee6:	e7d2      	b.n	800fe8e <_strtol_l.constprop.0+0xa6>
 800fee8:	2430      	movs	r4, #48	; 0x30
 800feea:	2e00      	cmp	r6, #0
 800feec:	d1a7      	bne.n	800fe3e <_strtol_l.constprop.0+0x56>
 800feee:	3608      	adds	r6, #8
 800fef0:	e7a5      	b.n	800fe3e <_strtol_l.constprop.0+0x56>
 800fef2:	2c30      	cmp	r4, #48	; 0x30
 800fef4:	d09b      	beq.n	800fe2e <_strtol_l.constprop.0+0x46>
 800fef6:	260a      	movs	r6, #10
 800fef8:	e7a1      	b.n	800fe3e <_strtol_l.constprop.0+0x56>
 800fefa:	46c0      	nop			; (mov r8, r8)
 800fefc:	08013a71 	.word	0x08013a71
 800ff00:	7fffffff 	.word	0x7fffffff

0800ff04 <strtol>:
 800ff04:	b510      	push	{r4, lr}
 800ff06:	0013      	movs	r3, r2
 800ff08:	000a      	movs	r2, r1
 800ff0a:	0001      	movs	r1, r0
 800ff0c:	4802      	ldr	r0, [pc, #8]	; (800ff18 <strtol+0x14>)
 800ff0e:	6800      	ldr	r0, [r0, #0]
 800ff10:	f7ff ff6a 	bl	800fde8 <_strtol_l.constprop.0>
 800ff14:	bd10      	pop	{r4, pc}
 800ff16:	46c0      	nop			; (mov r8, r8)
 800ff18:	200000e4 	.word	0x200000e4

0800ff1c <print_e>:
 800ff1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff1e:	b08b      	sub	sp, #44	; 0x2c
 800ff20:	000f      	movs	r7, r1
 800ff22:	a910      	add	r1, sp, #64	; 0x40
 800ff24:	c920      	ldmia	r1!, {r5}
 800ff26:	780e      	ldrb	r6, [r1, #0]
 800ff28:	a908      	add	r1, sp, #32
 800ff2a:	9104      	str	r1, [sp, #16]
 800ff2c:	a907      	add	r1, sp, #28
 800ff2e:	9103      	str	r1, [sp, #12]
 800ff30:	a909      	add	r1, sp, #36	; 0x24
 800ff32:	9102      	str	r1, [sp, #8]
 800ff34:	1c69      	adds	r1, r5, #1
 800ff36:	9101      	str	r1, [sp, #4]
 800ff38:	2102      	movs	r1, #2
 800ff3a:	9100      	str	r1, [sp, #0]
 800ff3c:	f001 fe70 	bl	8011c20 <_dtoa_r>
 800ff40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ff42:	4b36      	ldr	r3, [pc, #216]	; (801001c <print_e+0x100>)
 800ff44:	0001      	movs	r1, r0
 800ff46:	429a      	cmp	r2, r3
 800ff48:	d104      	bne.n	800ff54 <print_e+0x38>
 800ff4a:	0038      	movs	r0, r7
 800ff4c:	f001 fd96 	bl	8011a7c <strcpy>
 800ff50:	b00b      	add	sp, #44	; 0x2c
 800ff52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff54:	7801      	ldrb	r1, [r0, #0]
 800ff56:	1c43      	adds	r3, r0, #1
 800ff58:	1c7c      	adds	r4, r7, #1
 800ff5a:	7039      	strb	r1, [r7, #0]
 800ff5c:	2d00      	cmp	r5, #0
 800ff5e:	dd01      	ble.n	800ff64 <print_e+0x48>
 800ff60:	2101      	movs	r1, #1
 800ff62:	9112      	str	r1, [sp, #72]	; 0x48
 800ff64:	212e      	movs	r1, #46	; 0x2e
 800ff66:	7818      	ldrb	r0, [r3, #0]
 800ff68:	2800      	cmp	r0, #0
 800ff6a:	d001      	beq.n	800ff70 <print_e+0x54>
 800ff6c:	2d00      	cmp	r5, #0
 800ff6e:	dc35      	bgt.n	800ffdc <print_e+0xc0>
 800ff70:	2e67      	cmp	r6, #103	; 0x67
 800ff72:	d04b      	beq.n	801000c <print_e+0xf0>
 800ff74:	2e47      	cmp	r6, #71	; 0x47
 800ff76:	d04b      	beq.n	8010010 <print_e+0xf4>
 800ff78:	232e      	movs	r3, #46	; 0x2e
 800ff7a:	2130      	movs	r1, #48	; 0x30
 800ff7c:	2d00      	cmp	r5, #0
 800ff7e:	dc3a      	bgt.n	800fff6 <print_e+0xda>
 800ff80:	1e53      	subs	r3, r2, #1
 800ff82:	7026      	strb	r6, [r4, #0]
 800ff84:	9309      	str	r3, [sp, #36]	; 0x24
 800ff86:	1ca5      	adds	r5, r4, #2
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	da43      	bge.n	8010014 <print_e+0xf8>
 800ff8c:	232d      	movs	r3, #45	; 0x2d
 800ff8e:	7063      	strb	r3, [r4, #1]
 800ff90:	3b2c      	subs	r3, #44	; 0x2c
 800ff92:	1a9b      	subs	r3, r3, r2
 800ff94:	9309      	str	r3, [sp, #36]	; 0x24
 800ff96:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800ff98:	2e63      	cmp	r6, #99	; 0x63
 800ff9a:	dd0d      	ble.n	800ffb8 <print_e+0x9c>
 800ff9c:	2164      	movs	r1, #100	; 0x64
 800ff9e:	0030      	movs	r0, r6
 800ffa0:	f7f0 f95e 	bl	8000260 <__divsi3>
 800ffa4:	0003      	movs	r3, r0
 800ffa6:	0002      	movs	r2, r0
 800ffa8:	2064      	movs	r0, #100	; 0x64
 800ffaa:	4240      	negs	r0, r0
 800ffac:	4358      	muls	r0, r3
 800ffae:	3230      	adds	r2, #48	; 0x30
 800ffb0:	1980      	adds	r0, r0, r6
 800ffb2:	1ce5      	adds	r5, r4, #3
 800ffb4:	70a2      	strb	r2, [r4, #2]
 800ffb6:	9009      	str	r0, [sp, #36]	; 0x24
 800ffb8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800ffba:	210a      	movs	r1, #10
 800ffbc:	0020      	movs	r0, r4
 800ffbe:	f7f0 f94f 	bl	8000260 <__divsi3>
 800ffc2:	0003      	movs	r3, r0
 800ffc4:	0002      	movs	r2, r0
 800ffc6:	200a      	movs	r0, #10
 800ffc8:	4240      	negs	r0, r0
 800ffca:	4358      	muls	r0, r3
 800ffcc:	2300      	movs	r3, #0
 800ffce:	1900      	adds	r0, r0, r4
 800ffd0:	3230      	adds	r2, #48	; 0x30
 800ffd2:	3030      	adds	r0, #48	; 0x30
 800ffd4:	702a      	strb	r2, [r5, #0]
 800ffd6:	7068      	strb	r0, [r5, #1]
 800ffd8:	70ab      	strb	r3, [r5, #2]
 800ffda:	e7b9      	b.n	800ff50 <print_e+0x34>
 800ffdc:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ffde:	2800      	cmp	r0, #0
 800ffe0:	d001      	beq.n	800ffe6 <print_e+0xca>
 800ffe2:	7021      	strb	r1, [r4, #0]
 800ffe4:	3401      	adds	r4, #1
 800ffe6:	7818      	ldrb	r0, [r3, #0]
 800ffe8:	3d01      	subs	r5, #1
 800ffea:	7020      	strb	r0, [r4, #0]
 800ffec:	2000      	movs	r0, #0
 800ffee:	3301      	adds	r3, #1
 800fff0:	3401      	adds	r4, #1
 800fff2:	9012      	str	r0, [sp, #72]	; 0x48
 800fff4:	e7b7      	b.n	800ff66 <print_e+0x4a>
 800fff6:	9812      	ldr	r0, [sp, #72]	; 0x48
 800fff8:	2800      	cmp	r0, #0
 800fffa:	d001      	beq.n	8010000 <print_e+0xe4>
 800fffc:	7023      	strb	r3, [r4, #0]
 800fffe:	3401      	adds	r4, #1
 8010000:	2000      	movs	r0, #0
 8010002:	7021      	strb	r1, [r4, #0]
 8010004:	3d01      	subs	r5, #1
 8010006:	3401      	adds	r4, #1
 8010008:	9012      	str	r0, [sp, #72]	; 0x48
 801000a:	e7b7      	b.n	800ff7c <print_e+0x60>
 801000c:	2665      	movs	r6, #101	; 0x65
 801000e:	e7b7      	b.n	800ff80 <print_e+0x64>
 8010010:	2645      	movs	r6, #69	; 0x45
 8010012:	e7b5      	b.n	800ff80 <print_e+0x64>
 8010014:	232b      	movs	r3, #43	; 0x2b
 8010016:	7063      	strb	r3, [r4, #1]
 8010018:	e7bd      	b.n	800ff96 <print_e+0x7a>
 801001a:	46c0      	nop			; (mov r8, r8)
 801001c:	0000270f 	.word	0x0000270f

08010020 <_gcvt>:
 8010020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010022:	0016      	movs	r6, r2
 8010024:	001d      	movs	r5, r3
 8010026:	b08d      	sub	sp, #52	; 0x34
 8010028:	ab14      	add	r3, sp, #80	; 0x50
 801002a:	781b      	ldrb	r3, [r3, #0]
 801002c:	0007      	movs	r7, r0
 801002e:	9307      	str	r3, [sp, #28]
 8010030:	2200      	movs	r2, #0
 8010032:	2300      	movs	r3, #0
 8010034:	0030      	movs	r0, r6
 8010036:	0029      	movs	r1, r5
 8010038:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801003a:	f7f0 fa13 	bl	8000464 <__aeabi_dcmplt>
 801003e:	2800      	cmp	r0, #0
 8010040:	d002      	beq.n	8010048 <_gcvt+0x28>
 8010042:	2380      	movs	r3, #128	; 0x80
 8010044:	061b      	lsls	r3, r3, #24
 8010046:	18ed      	adds	r5, r5, r3
 8010048:	2200      	movs	r2, #0
 801004a:	2300      	movs	r3, #0
 801004c:	0030      	movs	r0, r6
 801004e:	0029      	movs	r1, r5
 8010050:	f7f0 fa02 	bl	8000458 <__aeabi_dcmpeq>
 8010054:	2800      	cmp	r0, #0
 8010056:	d006      	beq.n	8010066 <_gcvt+0x46>
 8010058:	2330      	movs	r3, #48	; 0x30
 801005a:	7023      	strb	r3, [r4, #0]
 801005c:	2300      	movs	r3, #0
 801005e:	7063      	strb	r3, [r4, #1]
 8010060:	0020      	movs	r0, r4
 8010062:	b00d      	add	sp, #52	; 0x34
 8010064:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010066:	0030      	movs	r0, r6
 8010068:	0029      	movs	r1, r5
 801006a:	4a52      	ldr	r2, [pc, #328]	; (80101b4 <_gcvt+0x194>)
 801006c:	4b52      	ldr	r3, [pc, #328]	; (80101b8 <_gcvt+0x198>)
 801006e:	f7f0 fa03 	bl	8000478 <__aeabi_dcmple>
 8010072:	2800      	cmp	r0, #0
 8010074:	d00d      	beq.n	8010092 <_gcvt+0x72>
 8010076:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010078:	0032      	movs	r2, r6
 801007a:	9302      	str	r3, [sp, #8]
 801007c:	9b07      	ldr	r3, [sp, #28]
 801007e:	0021      	movs	r1, r4
 8010080:	9301      	str	r3, [sp, #4]
 8010082:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010084:	0038      	movs	r0, r7
 8010086:	3b01      	subs	r3, #1
 8010088:	9300      	str	r3, [sp, #0]
 801008a:	002b      	movs	r3, r5
 801008c:	f7ff ff46 	bl	800ff1c <print_e>
 8010090:	e7e6      	b.n	8010060 <_gcvt+0x40>
 8010092:	9812      	ldr	r0, [sp, #72]	; 0x48
 8010094:	f001 f8a0 	bl	80111d8 <_mprec_log10>
 8010098:	0032      	movs	r2, r6
 801009a:	002b      	movs	r3, r5
 801009c:	f7f0 f9ec 	bl	8000478 <__aeabi_dcmple>
 80100a0:	2800      	cmp	r0, #0
 80100a2:	d1e8      	bne.n	8010076 <_gcvt+0x56>
 80100a4:	ab0b      	add	r3, sp, #44	; 0x2c
 80100a6:	9304      	str	r3, [sp, #16]
 80100a8:	ab0a      	add	r3, sp, #40	; 0x28
 80100aa:	9303      	str	r3, [sp, #12]
 80100ac:	ab09      	add	r3, sp, #36	; 0x24
 80100ae:	9302      	str	r3, [sp, #8]
 80100b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80100b2:	0032      	movs	r2, r6
 80100b4:	9301      	str	r3, [sp, #4]
 80100b6:	2302      	movs	r3, #2
 80100b8:	0038      	movs	r0, r7
 80100ba:	9300      	str	r3, [sp, #0]
 80100bc:	002b      	movs	r3, r5
 80100be:	f001 fdaf 	bl	8011c20 <_dtoa_r>
 80100c2:	4b3e      	ldr	r3, [pc, #248]	; (80101bc <_gcvt+0x19c>)
 80100c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80100c6:	0001      	movs	r1, r0
 80100c8:	0020      	movs	r0, r4
 80100ca:	429a      	cmp	r2, r3
 80100cc:	d00c      	beq.n	80100e8 <_gcvt+0xc8>
 80100ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80100d0:	18e5      	adds	r5, r4, r3
 80100d2:	780e      	ldrb	r6, [r1, #0]
 80100d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80100d6:	1a2b      	subs	r3, r5, r0
 80100d8:	2e00      	cmp	r6, #0
 80100da:	d001      	beq.n	80100e0 <_gcvt+0xc0>
 80100dc:	2a00      	cmp	r2, #0
 80100de:	dc06      	bgt.n	80100ee <_gcvt+0xce>
 80100e0:	2501      	movs	r5, #1
 80100e2:	2600      	movs	r6, #0
 80100e4:	46ac      	mov	ip, r5
 80100e6:	e00d      	b.n	8010104 <_gcvt+0xe4>
 80100e8:	f001 fcc8 	bl	8011a7c <strcpy>
 80100ec:	e7b8      	b.n	8010060 <_gcvt+0x40>
 80100ee:	3a01      	subs	r2, #1
 80100f0:	7006      	strb	r6, [r0, #0]
 80100f2:	3101      	adds	r1, #1
 80100f4:	9209      	str	r2, [sp, #36]	; 0x24
 80100f6:	3001      	adds	r0, #1
 80100f8:	e7eb      	b.n	80100d2 <_gcvt+0xb2>
 80100fa:	2530      	movs	r5, #48	; 0x30
 80100fc:	4666      	mov	r6, ip
 80100fe:	7005      	strb	r5, [r0, #0]
 8010100:	3b01      	subs	r3, #1
 8010102:	3001      	adds	r0, #1
 8010104:	0005      	movs	r5, r0
 8010106:	1e17      	subs	r7, r2, #0
 8010108:	dc35      	bgt.n	8010176 <_gcvt+0x156>
 801010a:	2e00      	cmp	r6, #0
 801010c:	d000      	beq.n	8010110 <_gcvt+0xf0>
 801010e:	9209      	str	r2, [sp, #36]	; 0x24
 8010110:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010112:	2a00      	cmp	r2, #0
 8010114:	d102      	bne.n	801011c <_gcvt+0xfc>
 8010116:	780a      	ldrb	r2, [r1, #0]
 8010118:	2a00      	cmp	r2, #0
 801011a:	d029      	beq.n	8010170 <_gcvt+0x150>
 801011c:	4284      	cmp	r4, r0
 801011e:	d102      	bne.n	8010126 <_gcvt+0x106>
 8010120:	2230      	movs	r2, #48	; 0x30
 8010122:	1c65      	adds	r5, r4, #1
 8010124:	7022      	strb	r2, [r4, #0]
 8010126:	222e      	movs	r2, #46	; 0x2e
 8010128:	702a      	strb	r2, [r5, #0]
 801012a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801012c:	0028      	movs	r0, r5
 801012e:	1b57      	subs	r7, r2, r5
 8010130:	9707      	str	r7, [sp, #28]
 8010132:	2701      	movs	r7, #1
 8010134:	2600      	movs	r6, #0
 8010136:	46bc      	mov	ip, r7
 8010138:	9f07      	ldr	r7, [sp, #28]
 801013a:	42c7      	cmn	r7, r0
 801013c:	d422      	bmi.n	8010184 <_gcvt+0x164>
 801013e:	2000      	movs	r0, #0
 8010140:	4257      	negs	r7, r2
 8010142:	4282      	cmp	r2, r0
 8010144:	dc00      	bgt.n	8010148 <_gcvt+0x128>
 8010146:	0038      	movs	r0, r7
 8010148:	3001      	adds	r0, #1
 801014a:	182d      	adds	r5, r5, r0
 801014c:	2000      	movs	r0, #0
 801014e:	4282      	cmp	r2, r0
 8010150:	dc00      	bgt.n	8010154 <_gcvt+0x134>
 8010152:	0038      	movs	r0, r7
 8010154:	1810      	adds	r0, r2, r0
 8010156:	2e00      	cmp	r6, #0
 8010158:	d000      	beq.n	801015c <_gcvt+0x13c>
 801015a:	9009      	str	r0, [sp, #36]	; 0x24
 801015c:	002a      	movs	r2, r5
 801015e:	7808      	ldrb	r0, [r1, #0]
 8010160:	0015      	movs	r5, r2
 8010162:	2800      	cmp	r0, #0
 8010164:	d001      	beq.n	801016a <_gcvt+0x14a>
 8010166:	2b00      	cmp	r3, #0
 8010168:	dc11      	bgt.n	801018e <_gcvt+0x16e>
 801016a:	9915      	ldr	r1, [sp, #84]	; 0x54
 801016c:	2900      	cmp	r1, #0
 801016e:	d11d      	bne.n	80101ac <_gcvt+0x18c>
 8010170:	2300      	movs	r3, #0
 8010172:	702b      	strb	r3, [r5, #0]
 8010174:	e774      	b.n	8010060 <_gcvt+0x40>
 8010176:	3a01      	subs	r2, #1
 8010178:	2b00      	cmp	r3, #0
 801017a:	dcbe      	bgt.n	80100fa <_gcvt+0xda>
 801017c:	2e00      	cmp	r6, #0
 801017e:	d0c7      	beq.n	8010110 <_gcvt+0xf0>
 8010180:	9709      	str	r7, [sp, #36]	; 0x24
 8010182:	e7c5      	b.n	8010110 <_gcvt+0xf0>
 8010184:	2630      	movs	r6, #48	; 0x30
 8010186:	3001      	adds	r0, #1
 8010188:	7006      	strb	r6, [r0, #0]
 801018a:	4666      	mov	r6, ip
 801018c:	e7d4      	b.n	8010138 <_gcvt+0x118>
 801018e:	7010      	strb	r0, [r2, #0]
 8010190:	3101      	adds	r1, #1
 8010192:	3b01      	subs	r3, #1
 8010194:	3201      	adds	r2, #1
 8010196:	e7e2      	b.n	801015e <_gcvt+0x13e>
 8010198:	700e      	strb	r6, [r1, #0]
 801019a:	3101      	adds	r1, #1
 801019c:	1a68      	subs	r0, r5, r1
 801019e:	2800      	cmp	r0, #0
 80101a0:	dcfa      	bgt.n	8010198 <_gcvt+0x178>
 80101a2:	43dd      	mvns	r5, r3
 80101a4:	17ed      	asrs	r5, r5, #31
 80101a6:	401d      	ands	r5, r3
 80101a8:	1955      	adds	r5, r2, r5
 80101aa:	e7e1      	b.n	8010170 <_gcvt+0x150>
 80101ac:	0011      	movs	r1, r2
 80101ae:	2630      	movs	r6, #48	; 0x30
 80101b0:	189d      	adds	r5, r3, r2
 80101b2:	e7f3      	b.n	801019c <_gcvt+0x17c>
 80101b4:	eb1c432d 	.word	0xeb1c432d
 80101b8:	3f1a36e2 	.word	0x3f1a36e2
 80101bc:	0000270f 	.word	0x0000270f

080101c0 <rshift>:
 80101c0:	0002      	movs	r2, r0
 80101c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80101c4:	6904      	ldr	r4, [r0, #16]
 80101c6:	3214      	adds	r2, #20
 80101c8:	0013      	movs	r3, r2
 80101ca:	b085      	sub	sp, #20
 80101cc:	114f      	asrs	r7, r1, #5
 80101ce:	42bc      	cmp	r4, r7
 80101d0:	dd31      	ble.n	8010236 <rshift+0x76>
 80101d2:	00bb      	lsls	r3, r7, #2
 80101d4:	18d3      	adds	r3, r2, r3
 80101d6:	261f      	movs	r6, #31
 80101d8:	9301      	str	r3, [sp, #4]
 80101da:	000b      	movs	r3, r1
 80101dc:	00a5      	lsls	r5, r4, #2
 80101de:	4033      	ands	r3, r6
 80101e0:	1955      	adds	r5, r2, r5
 80101e2:	9302      	str	r3, [sp, #8]
 80101e4:	4231      	tst	r1, r6
 80101e6:	d10c      	bne.n	8010202 <rshift+0x42>
 80101e8:	0016      	movs	r6, r2
 80101ea:	9901      	ldr	r1, [sp, #4]
 80101ec:	428d      	cmp	r5, r1
 80101ee:	d838      	bhi.n	8010262 <rshift+0xa2>
 80101f0:	9901      	ldr	r1, [sp, #4]
 80101f2:	2300      	movs	r3, #0
 80101f4:	3903      	subs	r1, #3
 80101f6:	428d      	cmp	r5, r1
 80101f8:	d301      	bcc.n	80101fe <rshift+0x3e>
 80101fa:	1be3      	subs	r3, r4, r7
 80101fc:	009b      	lsls	r3, r3, #2
 80101fe:	18d3      	adds	r3, r2, r3
 8010200:	e019      	b.n	8010236 <rshift+0x76>
 8010202:	2120      	movs	r1, #32
 8010204:	9b02      	ldr	r3, [sp, #8]
 8010206:	9e01      	ldr	r6, [sp, #4]
 8010208:	1acb      	subs	r3, r1, r3
 801020a:	9303      	str	r3, [sp, #12]
 801020c:	ce02      	ldmia	r6!, {r1}
 801020e:	9b02      	ldr	r3, [sp, #8]
 8010210:	4694      	mov	ip, r2
 8010212:	40d9      	lsrs	r1, r3
 8010214:	9100      	str	r1, [sp, #0]
 8010216:	42b5      	cmp	r5, r6
 8010218:	d816      	bhi.n	8010248 <rshift+0x88>
 801021a:	9e01      	ldr	r6, [sp, #4]
 801021c:	2300      	movs	r3, #0
 801021e:	3601      	adds	r6, #1
 8010220:	42b5      	cmp	r5, r6
 8010222:	d302      	bcc.n	801022a <rshift+0x6a>
 8010224:	1be3      	subs	r3, r4, r7
 8010226:	009b      	lsls	r3, r3, #2
 8010228:	3b04      	subs	r3, #4
 801022a:	9900      	ldr	r1, [sp, #0]
 801022c:	18d3      	adds	r3, r2, r3
 801022e:	6019      	str	r1, [r3, #0]
 8010230:	2900      	cmp	r1, #0
 8010232:	d000      	beq.n	8010236 <rshift+0x76>
 8010234:	3304      	adds	r3, #4
 8010236:	1a99      	subs	r1, r3, r2
 8010238:	1089      	asrs	r1, r1, #2
 801023a:	6101      	str	r1, [r0, #16]
 801023c:	4293      	cmp	r3, r2
 801023e:	d101      	bne.n	8010244 <rshift+0x84>
 8010240:	2300      	movs	r3, #0
 8010242:	6143      	str	r3, [r0, #20]
 8010244:	b005      	add	sp, #20
 8010246:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010248:	6833      	ldr	r3, [r6, #0]
 801024a:	9903      	ldr	r1, [sp, #12]
 801024c:	408b      	lsls	r3, r1
 801024e:	9900      	ldr	r1, [sp, #0]
 8010250:	4319      	orrs	r1, r3
 8010252:	4663      	mov	r3, ip
 8010254:	c302      	stmia	r3!, {r1}
 8010256:	469c      	mov	ip, r3
 8010258:	ce02      	ldmia	r6!, {r1}
 801025a:	9b02      	ldr	r3, [sp, #8]
 801025c:	40d9      	lsrs	r1, r3
 801025e:	9100      	str	r1, [sp, #0]
 8010260:	e7d9      	b.n	8010216 <rshift+0x56>
 8010262:	c908      	ldmia	r1!, {r3}
 8010264:	c608      	stmia	r6!, {r3}
 8010266:	e7c1      	b.n	80101ec <rshift+0x2c>

08010268 <__hexdig_fun>:
 8010268:	0002      	movs	r2, r0
 801026a:	3a30      	subs	r2, #48	; 0x30
 801026c:	0003      	movs	r3, r0
 801026e:	2a09      	cmp	r2, #9
 8010270:	d802      	bhi.n	8010278 <__hexdig_fun+0x10>
 8010272:	3b20      	subs	r3, #32
 8010274:	b2d8      	uxtb	r0, r3
 8010276:	4770      	bx	lr
 8010278:	0002      	movs	r2, r0
 801027a:	3a61      	subs	r2, #97	; 0x61
 801027c:	2a05      	cmp	r2, #5
 801027e:	d801      	bhi.n	8010284 <__hexdig_fun+0x1c>
 8010280:	3b47      	subs	r3, #71	; 0x47
 8010282:	e7f7      	b.n	8010274 <__hexdig_fun+0xc>
 8010284:	001a      	movs	r2, r3
 8010286:	3a41      	subs	r2, #65	; 0x41
 8010288:	2000      	movs	r0, #0
 801028a:	2a05      	cmp	r2, #5
 801028c:	d8f3      	bhi.n	8010276 <__hexdig_fun+0xe>
 801028e:	3b27      	subs	r3, #39	; 0x27
 8010290:	e7f0      	b.n	8010274 <__hexdig_fun+0xc>
	...

08010294 <__gethex>:
 8010294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010296:	b08d      	sub	sp, #52	; 0x34
 8010298:	930a      	str	r3, [sp, #40]	; 0x28
 801029a:	4bbf      	ldr	r3, [pc, #764]	; (8010598 <__gethex+0x304>)
 801029c:	9005      	str	r0, [sp, #20]
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	9109      	str	r1, [sp, #36]	; 0x24
 80102a2:	0018      	movs	r0, r3
 80102a4:	9202      	str	r2, [sp, #8]
 80102a6:	9307      	str	r3, [sp, #28]
 80102a8:	f7ef ff34 	bl	8000114 <strlen>
 80102ac:	2202      	movs	r2, #2
 80102ae:	9b07      	ldr	r3, [sp, #28]
 80102b0:	4252      	negs	r2, r2
 80102b2:	181b      	adds	r3, r3, r0
 80102b4:	3b01      	subs	r3, #1
 80102b6:	781b      	ldrb	r3, [r3, #0]
 80102b8:	9003      	str	r0, [sp, #12]
 80102ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80102bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102be:	6819      	ldr	r1, [r3, #0]
 80102c0:	1c8b      	adds	r3, r1, #2
 80102c2:	1a52      	subs	r2, r2, r1
 80102c4:	18d1      	adds	r1, r2, r3
 80102c6:	9301      	str	r3, [sp, #4]
 80102c8:	9108      	str	r1, [sp, #32]
 80102ca:	9901      	ldr	r1, [sp, #4]
 80102cc:	3301      	adds	r3, #1
 80102ce:	7808      	ldrb	r0, [r1, #0]
 80102d0:	2830      	cmp	r0, #48	; 0x30
 80102d2:	d0f7      	beq.n	80102c4 <__gethex+0x30>
 80102d4:	f7ff ffc8 	bl	8010268 <__hexdig_fun>
 80102d8:	2300      	movs	r3, #0
 80102da:	001c      	movs	r4, r3
 80102dc:	9304      	str	r3, [sp, #16]
 80102de:	4298      	cmp	r0, r3
 80102e0:	d11f      	bne.n	8010322 <__gethex+0x8e>
 80102e2:	9a03      	ldr	r2, [sp, #12]
 80102e4:	9907      	ldr	r1, [sp, #28]
 80102e6:	9801      	ldr	r0, [sp, #4]
 80102e8:	f001 fbd0 	bl	8011a8c <strncmp>
 80102ec:	0007      	movs	r7, r0
 80102ee:	42a0      	cmp	r0, r4
 80102f0:	d000      	beq.n	80102f4 <__gethex+0x60>
 80102f2:	e06b      	b.n	80103cc <__gethex+0x138>
 80102f4:	9b01      	ldr	r3, [sp, #4]
 80102f6:	9a03      	ldr	r2, [sp, #12]
 80102f8:	5c98      	ldrb	r0, [r3, r2]
 80102fa:	189d      	adds	r5, r3, r2
 80102fc:	f7ff ffb4 	bl	8010268 <__hexdig_fun>
 8010300:	2301      	movs	r3, #1
 8010302:	9304      	str	r3, [sp, #16]
 8010304:	42a0      	cmp	r0, r4
 8010306:	d030      	beq.n	801036a <__gethex+0xd6>
 8010308:	9501      	str	r5, [sp, #4]
 801030a:	9b01      	ldr	r3, [sp, #4]
 801030c:	7818      	ldrb	r0, [r3, #0]
 801030e:	2830      	cmp	r0, #48	; 0x30
 8010310:	d009      	beq.n	8010326 <__gethex+0x92>
 8010312:	f7ff ffa9 	bl	8010268 <__hexdig_fun>
 8010316:	4242      	negs	r2, r0
 8010318:	4142      	adcs	r2, r0
 801031a:	2301      	movs	r3, #1
 801031c:	002c      	movs	r4, r5
 801031e:	9204      	str	r2, [sp, #16]
 8010320:	9308      	str	r3, [sp, #32]
 8010322:	9d01      	ldr	r5, [sp, #4]
 8010324:	e004      	b.n	8010330 <__gethex+0x9c>
 8010326:	9b01      	ldr	r3, [sp, #4]
 8010328:	3301      	adds	r3, #1
 801032a:	9301      	str	r3, [sp, #4]
 801032c:	e7ed      	b.n	801030a <__gethex+0x76>
 801032e:	3501      	adds	r5, #1
 8010330:	7828      	ldrb	r0, [r5, #0]
 8010332:	f7ff ff99 	bl	8010268 <__hexdig_fun>
 8010336:	1e07      	subs	r7, r0, #0
 8010338:	d1f9      	bne.n	801032e <__gethex+0x9a>
 801033a:	0028      	movs	r0, r5
 801033c:	9a03      	ldr	r2, [sp, #12]
 801033e:	9907      	ldr	r1, [sp, #28]
 8010340:	f001 fba4 	bl	8011a8c <strncmp>
 8010344:	2800      	cmp	r0, #0
 8010346:	d10e      	bne.n	8010366 <__gethex+0xd2>
 8010348:	2c00      	cmp	r4, #0
 801034a:	d107      	bne.n	801035c <__gethex+0xc8>
 801034c:	9b03      	ldr	r3, [sp, #12]
 801034e:	18ed      	adds	r5, r5, r3
 8010350:	002c      	movs	r4, r5
 8010352:	7828      	ldrb	r0, [r5, #0]
 8010354:	f7ff ff88 	bl	8010268 <__hexdig_fun>
 8010358:	2800      	cmp	r0, #0
 801035a:	d102      	bne.n	8010362 <__gethex+0xce>
 801035c:	1b64      	subs	r4, r4, r5
 801035e:	00a7      	lsls	r7, r4, #2
 8010360:	e003      	b.n	801036a <__gethex+0xd6>
 8010362:	3501      	adds	r5, #1
 8010364:	e7f5      	b.n	8010352 <__gethex+0xbe>
 8010366:	2c00      	cmp	r4, #0
 8010368:	d1f8      	bne.n	801035c <__gethex+0xc8>
 801036a:	2220      	movs	r2, #32
 801036c:	782b      	ldrb	r3, [r5, #0]
 801036e:	002e      	movs	r6, r5
 8010370:	4393      	bics	r3, r2
 8010372:	2b50      	cmp	r3, #80	; 0x50
 8010374:	d11d      	bne.n	80103b2 <__gethex+0x11e>
 8010376:	786b      	ldrb	r3, [r5, #1]
 8010378:	2b2b      	cmp	r3, #43	; 0x2b
 801037a:	d02c      	beq.n	80103d6 <__gethex+0x142>
 801037c:	2b2d      	cmp	r3, #45	; 0x2d
 801037e:	d02e      	beq.n	80103de <__gethex+0x14a>
 8010380:	2300      	movs	r3, #0
 8010382:	1c6e      	adds	r6, r5, #1
 8010384:	9306      	str	r3, [sp, #24]
 8010386:	7830      	ldrb	r0, [r6, #0]
 8010388:	f7ff ff6e 	bl	8010268 <__hexdig_fun>
 801038c:	1e43      	subs	r3, r0, #1
 801038e:	b2db      	uxtb	r3, r3
 8010390:	2b18      	cmp	r3, #24
 8010392:	d82b      	bhi.n	80103ec <__gethex+0x158>
 8010394:	3810      	subs	r0, #16
 8010396:	0004      	movs	r4, r0
 8010398:	7870      	ldrb	r0, [r6, #1]
 801039a:	f7ff ff65 	bl	8010268 <__hexdig_fun>
 801039e:	1e43      	subs	r3, r0, #1
 80103a0:	b2db      	uxtb	r3, r3
 80103a2:	3601      	adds	r6, #1
 80103a4:	2b18      	cmp	r3, #24
 80103a6:	d91c      	bls.n	80103e2 <__gethex+0x14e>
 80103a8:	9b06      	ldr	r3, [sp, #24]
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d000      	beq.n	80103b0 <__gethex+0x11c>
 80103ae:	4264      	negs	r4, r4
 80103b0:	193f      	adds	r7, r7, r4
 80103b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80103b4:	601e      	str	r6, [r3, #0]
 80103b6:	9b04      	ldr	r3, [sp, #16]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d019      	beq.n	80103f0 <__gethex+0x15c>
 80103bc:	2600      	movs	r6, #0
 80103be:	9b08      	ldr	r3, [sp, #32]
 80103c0:	42b3      	cmp	r3, r6
 80103c2:	d100      	bne.n	80103c6 <__gethex+0x132>
 80103c4:	3606      	adds	r6, #6
 80103c6:	0030      	movs	r0, r6
 80103c8:	b00d      	add	sp, #52	; 0x34
 80103ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80103cc:	2301      	movs	r3, #1
 80103ce:	2700      	movs	r7, #0
 80103d0:	9d01      	ldr	r5, [sp, #4]
 80103d2:	9304      	str	r3, [sp, #16]
 80103d4:	e7c9      	b.n	801036a <__gethex+0xd6>
 80103d6:	2300      	movs	r3, #0
 80103d8:	9306      	str	r3, [sp, #24]
 80103da:	1cae      	adds	r6, r5, #2
 80103dc:	e7d3      	b.n	8010386 <__gethex+0xf2>
 80103de:	2301      	movs	r3, #1
 80103e0:	e7fa      	b.n	80103d8 <__gethex+0x144>
 80103e2:	230a      	movs	r3, #10
 80103e4:	435c      	muls	r4, r3
 80103e6:	1824      	adds	r4, r4, r0
 80103e8:	3c10      	subs	r4, #16
 80103ea:	e7d5      	b.n	8010398 <__gethex+0x104>
 80103ec:	002e      	movs	r6, r5
 80103ee:	e7e0      	b.n	80103b2 <__gethex+0x11e>
 80103f0:	9b01      	ldr	r3, [sp, #4]
 80103f2:	9904      	ldr	r1, [sp, #16]
 80103f4:	1aeb      	subs	r3, r5, r3
 80103f6:	3b01      	subs	r3, #1
 80103f8:	2b07      	cmp	r3, #7
 80103fa:	dc0a      	bgt.n	8010412 <__gethex+0x17e>
 80103fc:	9805      	ldr	r0, [sp, #20]
 80103fe:	f000 fa65 	bl	80108cc <_Balloc>
 8010402:	1e04      	subs	r4, r0, #0
 8010404:	d108      	bne.n	8010418 <__gethex+0x184>
 8010406:	0002      	movs	r2, r0
 8010408:	21de      	movs	r1, #222	; 0xde
 801040a:	4b64      	ldr	r3, [pc, #400]	; (801059c <__gethex+0x308>)
 801040c:	4864      	ldr	r0, [pc, #400]	; (80105a0 <__gethex+0x30c>)
 801040e:	f001 fb5d 	bl	8011acc <__assert_func>
 8010412:	3101      	adds	r1, #1
 8010414:	105b      	asrs	r3, r3, #1
 8010416:	e7ef      	b.n	80103f8 <__gethex+0x164>
 8010418:	0003      	movs	r3, r0
 801041a:	3314      	adds	r3, #20
 801041c:	9304      	str	r3, [sp, #16]
 801041e:	9309      	str	r3, [sp, #36]	; 0x24
 8010420:	2300      	movs	r3, #0
 8010422:	001e      	movs	r6, r3
 8010424:	9306      	str	r3, [sp, #24]
 8010426:	9b01      	ldr	r3, [sp, #4]
 8010428:	42ab      	cmp	r3, r5
 801042a:	d340      	bcc.n	80104ae <__gethex+0x21a>
 801042c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801042e:	9b04      	ldr	r3, [sp, #16]
 8010430:	c540      	stmia	r5!, {r6}
 8010432:	1aed      	subs	r5, r5, r3
 8010434:	10ad      	asrs	r5, r5, #2
 8010436:	0030      	movs	r0, r6
 8010438:	6125      	str	r5, [r4, #16]
 801043a:	f000 fb3f 	bl	8010abc <__hi0bits>
 801043e:	9b02      	ldr	r3, [sp, #8]
 8010440:	016d      	lsls	r5, r5, #5
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	1a2e      	subs	r6, r5, r0
 8010446:	9301      	str	r3, [sp, #4]
 8010448:	429e      	cmp	r6, r3
 801044a:	dd5a      	ble.n	8010502 <__gethex+0x26e>
 801044c:	1af6      	subs	r6, r6, r3
 801044e:	0031      	movs	r1, r6
 8010450:	0020      	movs	r0, r4
 8010452:	f000 fefc 	bl	801124e <__any_on>
 8010456:	1e05      	subs	r5, r0, #0
 8010458:	d016      	beq.n	8010488 <__gethex+0x1f4>
 801045a:	2501      	movs	r5, #1
 801045c:	211f      	movs	r1, #31
 801045e:	0028      	movs	r0, r5
 8010460:	1e73      	subs	r3, r6, #1
 8010462:	4019      	ands	r1, r3
 8010464:	4088      	lsls	r0, r1
 8010466:	0001      	movs	r1, r0
 8010468:	115a      	asrs	r2, r3, #5
 801046a:	9804      	ldr	r0, [sp, #16]
 801046c:	0092      	lsls	r2, r2, #2
 801046e:	5812      	ldr	r2, [r2, r0]
 8010470:	420a      	tst	r2, r1
 8010472:	d009      	beq.n	8010488 <__gethex+0x1f4>
 8010474:	42ab      	cmp	r3, r5
 8010476:	dd06      	ble.n	8010486 <__gethex+0x1f2>
 8010478:	0020      	movs	r0, r4
 801047a:	1eb1      	subs	r1, r6, #2
 801047c:	f000 fee7 	bl	801124e <__any_on>
 8010480:	3502      	adds	r5, #2
 8010482:	2800      	cmp	r0, #0
 8010484:	d100      	bne.n	8010488 <__gethex+0x1f4>
 8010486:	2502      	movs	r5, #2
 8010488:	0031      	movs	r1, r6
 801048a:	0020      	movs	r0, r4
 801048c:	f7ff fe98 	bl	80101c0 <rshift>
 8010490:	19bf      	adds	r7, r7, r6
 8010492:	9b02      	ldr	r3, [sp, #8]
 8010494:	689b      	ldr	r3, [r3, #8]
 8010496:	9303      	str	r3, [sp, #12]
 8010498:	42bb      	cmp	r3, r7
 801049a:	da42      	bge.n	8010522 <__gethex+0x28e>
 801049c:	0021      	movs	r1, r4
 801049e:	9805      	ldr	r0, [sp, #20]
 80104a0:	f000 fa58 	bl	8010954 <_Bfree>
 80104a4:	2300      	movs	r3, #0
 80104a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80104a8:	26a3      	movs	r6, #163	; 0xa3
 80104aa:	6013      	str	r3, [r2, #0]
 80104ac:	e78b      	b.n	80103c6 <__gethex+0x132>
 80104ae:	1e6b      	subs	r3, r5, #1
 80104b0:	9308      	str	r3, [sp, #32]
 80104b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80104b4:	781b      	ldrb	r3, [r3, #0]
 80104b6:	4293      	cmp	r3, r2
 80104b8:	d014      	beq.n	80104e4 <__gethex+0x250>
 80104ba:	9b06      	ldr	r3, [sp, #24]
 80104bc:	2b20      	cmp	r3, #32
 80104be:	d104      	bne.n	80104ca <__gethex+0x236>
 80104c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104c2:	c340      	stmia	r3!, {r6}
 80104c4:	2600      	movs	r6, #0
 80104c6:	9309      	str	r3, [sp, #36]	; 0x24
 80104c8:	9606      	str	r6, [sp, #24]
 80104ca:	9b08      	ldr	r3, [sp, #32]
 80104cc:	7818      	ldrb	r0, [r3, #0]
 80104ce:	f7ff fecb 	bl	8010268 <__hexdig_fun>
 80104d2:	230f      	movs	r3, #15
 80104d4:	4018      	ands	r0, r3
 80104d6:	9b06      	ldr	r3, [sp, #24]
 80104d8:	9d08      	ldr	r5, [sp, #32]
 80104da:	4098      	lsls	r0, r3
 80104dc:	3304      	adds	r3, #4
 80104de:	4306      	orrs	r6, r0
 80104e0:	9306      	str	r3, [sp, #24]
 80104e2:	e7a0      	b.n	8010426 <__gethex+0x192>
 80104e4:	2301      	movs	r3, #1
 80104e6:	9a03      	ldr	r2, [sp, #12]
 80104e8:	1a9d      	subs	r5, r3, r2
 80104ea:	9b08      	ldr	r3, [sp, #32]
 80104ec:	195d      	adds	r5, r3, r5
 80104ee:	9b01      	ldr	r3, [sp, #4]
 80104f0:	429d      	cmp	r5, r3
 80104f2:	d3e2      	bcc.n	80104ba <__gethex+0x226>
 80104f4:	0028      	movs	r0, r5
 80104f6:	9907      	ldr	r1, [sp, #28]
 80104f8:	f001 fac8 	bl	8011a8c <strncmp>
 80104fc:	2800      	cmp	r0, #0
 80104fe:	d1dc      	bne.n	80104ba <__gethex+0x226>
 8010500:	e791      	b.n	8010426 <__gethex+0x192>
 8010502:	9b01      	ldr	r3, [sp, #4]
 8010504:	2500      	movs	r5, #0
 8010506:	429e      	cmp	r6, r3
 8010508:	dac3      	bge.n	8010492 <__gethex+0x1fe>
 801050a:	1b9e      	subs	r6, r3, r6
 801050c:	0021      	movs	r1, r4
 801050e:	0032      	movs	r2, r6
 8010510:	9805      	ldr	r0, [sp, #20]
 8010512:	f000 fc3d 	bl	8010d90 <__lshift>
 8010516:	0003      	movs	r3, r0
 8010518:	3314      	adds	r3, #20
 801051a:	0004      	movs	r4, r0
 801051c:	1bbf      	subs	r7, r7, r6
 801051e:	9304      	str	r3, [sp, #16]
 8010520:	e7b7      	b.n	8010492 <__gethex+0x1fe>
 8010522:	9b02      	ldr	r3, [sp, #8]
 8010524:	685e      	ldr	r6, [r3, #4]
 8010526:	42be      	cmp	r6, r7
 8010528:	dd71      	ble.n	801060e <__gethex+0x37a>
 801052a:	9b01      	ldr	r3, [sp, #4]
 801052c:	1bf6      	subs	r6, r6, r7
 801052e:	42b3      	cmp	r3, r6
 8010530:	dc38      	bgt.n	80105a4 <__gethex+0x310>
 8010532:	9b02      	ldr	r3, [sp, #8]
 8010534:	68db      	ldr	r3, [r3, #12]
 8010536:	2b02      	cmp	r3, #2
 8010538:	d026      	beq.n	8010588 <__gethex+0x2f4>
 801053a:	2b03      	cmp	r3, #3
 801053c:	d028      	beq.n	8010590 <__gethex+0x2fc>
 801053e:	2b01      	cmp	r3, #1
 8010540:	d119      	bne.n	8010576 <__gethex+0x2e2>
 8010542:	9b01      	ldr	r3, [sp, #4]
 8010544:	42b3      	cmp	r3, r6
 8010546:	d116      	bne.n	8010576 <__gethex+0x2e2>
 8010548:	2b01      	cmp	r3, #1
 801054a:	d10d      	bne.n	8010568 <__gethex+0x2d4>
 801054c:	9b02      	ldr	r3, [sp, #8]
 801054e:	2662      	movs	r6, #98	; 0x62
 8010550:	685b      	ldr	r3, [r3, #4]
 8010552:	9301      	str	r3, [sp, #4]
 8010554:	9a01      	ldr	r2, [sp, #4]
 8010556:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010558:	601a      	str	r2, [r3, #0]
 801055a:	2301      	movs	r3, #1
 801055c:	9a04      	ldr	r2, [sp, #16]
 801055e:	6123      	str	r3, [r4, #16]
 8010560:	6013      	str	r3, [r2, #0]
 8010562:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010564:	601c      	str	r4, [r3, #0]
 8010566:	e72e      	b.n	80103c6 <__gethex+0x132>
 8010568:	9901      	ldr	r1, [sp, #4]
 801056a:	0020      	movs	r0, r4
 801056c:	3901      	subs	r1, #1
 801056e:	f000 fe6e 	bl	801124e <__any_on>
 8010572:	2800      	cmp	r0, #0
 8010574:	d1ea      	bne.n	801054c <__gethex+0x2b8>
 8010576:	0021      	movs	r1, r4
 8010578:	9805      	ldr	r0, [sp, #20]
 801057a:	f000 f9eb 	bl	8010954 <_Bfree>
 801057e:	2300      	movs	r3, #0
 8010580:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010582:	2650      	movs	r6, #80	; 0x50
 8010584:	6013      	str	r3, [r2, #0]
 8010586:	e71e      	b.n	80103c6 <__gethex+0x132>
 8010588:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801058a:	2b00      	cmp	r3, #0
 801058c:	d1f3      	bne.n	8010576 <__gethex+0x2e2>
 801058e:	e7dd      	b.n	801054c <__gethex+0x2b8>
 8010590:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010592:	2b00      	cmp	r3, #0
 8010594:	d1da      	bne.n	801054c <__gethex+0x2b8>
 8010596:	e7ee      	b.n	8010576 <__gethex+0x2e2>
 8010598:	08013be8 	.word	0x08013be8
 801059c:	08013b71 	.word	0x08013b71
 80105a0:	08013b82 	.word	0x08013b82
 80105a4:	1e77      	subs	r7, r6, #1
 80105a6:	2d00      	cmp	r5, #0
 80105a8:	d12f      	bne.n	801060a <__gethex+0x376>
 80105aa:	2f00      	cmp	r7, #0
 80105ac:	d004      	beq.n	80105b8 <__gethex+0x324>
 80105ae:	0039      	movs	r1, r7
 80105b0:	0020      	movs	r0, r4
 80105b2:	f000 fe4c 	bl	801124e <__any_on>
 80105b6:	0005      	movs	r5, r0
 80105b8:	231f      	movs	r3, #31
 80105ba:	117a      	asrs	r2, r7, #5
 80105bc:	401f      	ands	r7, r3
 80105be:	3b1e      	subs	r3, #30
 80105c0:	40bb      	lsls	r3, r7
 80105c2:	9904      	ldr	r1, [sp, #16]
 80105c4:	0092      	lsls	r2, r2, #2
 80105c6:	5852      	ldr	r2, [r2, r1]
 80105c8:	421a      	tst	r2, r3
 80105ca:	d001      	beq.n	80105d0 <__gethex+0x33c>
 80105cc:	2302      	movs	r3, #2
 80105ce:	431d      	orrs	r5, r3
 80105d0:	9b01      	ldr	r3, [sp, #4]
 80105d2:	0031      	movs	r1, r6
 80105d4:	1b9b      	subs	r3, r3, r6
 80105d6:	2602      	movs	r6, #2
 80105d8:	0020      	movs	r0, r4
 80105da:	9301      	str	r3, [sp, #4]
 80105dc:	f7ff fdf0 	bl	80101c0 <rshift>
 80105e0:	9b02      	ldr	r3, [sp, #8]
 80105e2:	685f      	ldr	r7, [r3, #4]
 80105e4:	2d00      	cmp	r5, #0
 80105e6:	d041      	beq.n	801066c <__gethex+0x3d8>
 80105e8:	9b02      	ldr	r3, [sp, #8]
 80105ea:	68db      	ldr	r3, [r3, #12]
 80105ec:	2b02      	cmp	r3, #2
 80105ee:	d010      	beq.n	8010612 <__gethex+0x37e>
 80105f0:	2b03      	cmp	r3, #3
 80105f2:	d012      	beq.n	801061a <__gethex+0x386>
 80105f4:	2b01      	cmp	r3, #1
 80105f6:	d106      	bne.n	8010606 <__gethex+0x372>
 80105f8:	07aa      	lsls	r2, r5, #30
 80105fa:	d504      	bpl.n	8010606 <__gethex+0x372>
 80105fc:	9a04      	ldr	r2, [sp, #16]
 80105fe:	6810      	ldr	r0, [r2, #0]
 8010600:	4305      	orrs	r5, r0
 8010602:	421d      	tst	r5, r3
 8010604:	d10c      	bne.n	8010620 <__gethex+0x38c>
 8010606:	2310      	movs	r3, #16
 8010608:	e02f      	b.n	801066a <__gethex+0x3d6>
 801060a:	2501      	movs	r5, #1
 801060c:	e7d4      	b.n	80105b8 <__gethex+0x324>
 801060e:	2601      	movs	r6, #1
 8010610:	e7e8      	b.n	80105e4 <__gethex+0x350>
 8010612:	2301      	movs	r3, #1
 8010614:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010616:	1a9b      	subs	r3, r3, r2
 8010618:	9313      	str	r3, [sp, #76]	; 0x4c
 801061a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801061c:	2b00      	cmp	r3, #0
 801061e:	d0f2      	beq.n	8010606 <__gethex+0x372>
 8010620:	6923      	ldr	r3, [r4, #16]
 8010622:	2000      	movs	r0, #0
 8010624:	9303      	str	r3, [sp, #12]
 8010626:	009b      	lsls	r3, r3, #2
 8010628:	9304      	str	r3, [sp, #16]
 801062a:	0023      	movs	r3, r4
 801062c:	9a04      	ldr	r2, [sp, #16]
 801062e:	3314      	adds	r3, #20
 8010630:	1899      	adds	r1, r3, r2
 8010632:	681a      	ldr	r2, [r3, #0]
 8010634:	1c55      	adds	r5, r2, #1
 8010636:	d01e      	beq.n	8010676 <__gethex+0x3e2>
 8010638:	3201      	adds	r2, #1
 801063a:	601a      	str	r2, [r3, #0]
 801063c:	0023      	movs	r3, r4
 801063e:	3314      	adds	r3, #20
 8010640:	2e02      	cmp	r6, #2
 8010642:	d140      	bne.n	80106c6 <__gethex+0x432>
 8010644:	9a02      	ldr	r2, [sp, #8]
 8010646:	9901      	ldr	r1, [sp, #4]
 8010648:	6812      	ldr	r2, [r2, #0]
 801064a:	3a01      	subs	r2, #1
 801064c:	428a      	cmp	r2, r1
 801064e:	d10b      	bne.n	8010668 <__gethex+0x3d4>
 8010650:	114a      	asrs	r2, r1, #5
 8010652:	211f      	movs	r1, #31
 8010654:	9801      	ldr	r0, [sp, #4]
 8010656:	0092      	lsls	r2, r2, #2
 8010658:	4001      	ands	r1, r0
 801065a:	2001      	movs	r0, #1
 801065c:	0005      	movs	r5, r0
 801065e:	408d      	lsls	r5, r1
 8010660:	58d3      	ldr	r3, [r2, r3]
 8010662:	422b      	tst	r3, r5
 8010664:	d000      	beq.n	8010668 <__gethex+0x3d4>
 8010666:	2601      	movs	r6, #1
 8010668:	2320      	movs	r3, #32
 801066a:	431e      	orrs	r6, r3
 801066c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801066e:	601c      	str	r4, [r3, #0]
 8010670:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010672:	601f      	str	r7, [r3, #0]
 8010674:	e6a7      	b.n	80103c6 <__gethex+0x132>
 8010676:	c301      	stmia	r3!, {r0}
 8010678:	4299      	cmp	r1, r3
 801067a:	d8da      	bhi.n	8010632 <__gethex+0x39e>
 801067c:	9b03      	ldr	r3, [sp, #12]
 801067e:	68a2      	ldr	r2, [r4, #8]
 8010680:	4293      	cmp	r3, r2
 8010682:	db17      	blt.n	80106b4 <__gethex+0x420>
 8010684:	6863      	ldr	r3, [r4, #4]
 8010686:	9805      	ldr	r0, [sp, #20]
 8010688:	1c59      	adds	r1, r3, #1
 801068a:	f000 f91f 	bl	80108cc <_Balloc>
 801068e:	1e05      	subs	r5, r0, #0
 8010690:	d103      	bne.n	801069a <__gethex+0x406>
 8010692:	0002      	movs	r2, r0
 8010694:	2184      	movs	r1, #132	; 0x84
 8010696:	4b1c      	ldr	r3, [pc, #112]	; (8010708 <__gethex+0x474>)
 8010698:	e6b8      	b.n	801040c <__gethex+0x178>
 801069a:	0021      	movs	r1, r4
 801069c:	6923      	ldr	r3, [r4, #16]
 801069e:	310c      	adds	r1, #12
 80106a0:	1c9a      	adds	r2, r3, #2
 80106a2:	0092      	lsls	r2, r2, #2
 80106a4:	300c      	adds	r0, #12
 80106a6:	f7fe fca5 	bl	800eff4 <memcpy>
 80106aa:	0021      	movs	r1, r4
 80106ac:	9805      	ldr	r0, [sp, #20]
 80106ae:	f000 f951 	bl	8010954 <_Bfree>
 80106b2:	002c      	movs	r4, r5
 80106b4:	6923      	ldr	r3, [r4, #16]
 80106b6:	1c5a      	adds	r2, r3, #1
 80106b8:	6122      	str	r2, [r4, #16]
 80106ba:	2201      	movs	r2, #1
 80106bc:	3304      	adds	r3, #4
 80106be:	009b      	lsls	r3, r3, #2
 80106c0:	18e3      	adds	r3, r4, r3
 80106c2:	605a      	str	r2, [r3, #4]
 80106c4:	e7ba      	b.n	801063c <__gethex+0x3a8>
 80106c6:	6922      	ldr	r2, [r4, #16]
 80106c8:	9903      	ldr	r1, [sp, #12]
 80106ca:	428a      	cmp	r2, r1
 80106cc:	dd09      	ble.n	80106e2 <__gethex+0x44e>
 80106ce:	2101      	movs	r1, #1
 80106d0:	0020      	movs	r0, r4
 80106d2:	f7ff fd75 	bl	80101c0 <rshift>
 80106d6:	9b02      	ldr	r3, [sp, #8]
 80106d8:	3701      	adds	r7, #1
 80106da:	689b      	ldr	r3, [r3, #8]
 80106dc:	42bb      	cmp	r3, r7
 80106de:	dac2      	bge.n	8010666 <__gethex+0x3d2>
 80106e0:	e6dc      	b.n	801049c <__gethex+0x208>
 80106e2:	221f      	movs	r2, #31
 80106e4:	9d01      	ldr	r5, [sp, #4]
 80106e6:	9901      	ldr	r1, [sp, #4]
 80106e8:	2601      	movs	r6, #1
 80106ea:	4015      	ands	r5, r2
 80106ec:	4211      	tst	r1, r2
 80106ee:	d0bb      	beq.n	8010668 <__gethex+0x3d4>
 80106f0:	9a04      	ldr	r2, [sp, #16]
 80106f2:	189b      	adds	r3, r3, r2
 80106f4:	3b04      	subs	r3, #4
 80106f6:	6818      	ldr	r0, [r3, #0]
 80106f8:	f000 f9e0 	bl	8010abc <__hi0bits>
 80106fc:	2320      	movs	r3, #32
 80106fe:	1b5d      	subs	r5, r3, r5
 8010700:	42a8      	cmp	r0, r5
 8010702:	dbe4      	blt.n	80106ce <__gethex+0x43a>
 8010704:	e7b0      	b.n	8010668 <__gethex+0x3d4>
 8010706:	46c0      	nop			; (mov r8, r8)
 8010708:	08013b71 	.word	0x08013b71

0801070c <L_shift>:
 801070c:	2308      	movs	r3, #8
 801070e:	b570      	push	{r4, r5, r6, lr}
 8010710:	2520      	movs	r5, #32
 8010712:	1a9a      	subs	r2, r3, r2
 8010714:	0092      	lsls	r2, r2, #2
 8010716:	1aad      	subs	r5, r5, r2
 8010718:	6843      	ldr	r3, [r0, #4]
 801071a:	6806      	ldr	r6, [r0, #0]
 801071c:	001c      	movs	r4, r3
 801071e:	40ac      	lsls	r4, r5
 8010720:	40d3      	lsrs	r3, r2
 8010722:	4334      	orrs	r4, r6
 8010724:	6004      	str	r4, [r0, #0]
 8010726:	6043      	str	r3, [r0, #4]
 8010728:	3004      	adds	r0, #4
 801072a:	4288      	cmp	r0, r1
 801072c:	d3f4      	bcc.n	8010718 <L_shift+0xc>
 801072e:	bd70      	pop	{r4, r5, r6, pc}

08010730 <__match>:
 8010730:	b530      	push	{r4, r5, lr}
 8010732:	6803      	ldr	r3, [r0, #0]
 8010734:	780c      	ldrb	r4, [r1, #0]
 8010736:	3301      	adds	r3, #1
 8010738:	2c00      	cmp	r4, #0
 801073a:	d102      	bne.n	8010742 <__match+0x12>
 801073c:	6003      	str	r3, [r0, #0]
 801073e:	2001      	movs	r0, #1
 8010740:	bd30      	pop	{r4, r5, pc}
 8010742:	781a      	ldrb	r2, [r3, #0]
 8010744:	0015      	movs	r5, r2
 8010746:	3d41      	subs	r5, #65	; 0x41
 8010748:	2d19      	cmp	r5, #25
 801074a:	d800      	bhi.n	801074e <__match+0x1e>
 801074c:	3220      	adds	r2, #32
 801074e:	3101      	adds	r1, #1
 8010750:	42a2      	cmp	r2, r4
 8010752:	d0ef      	beq.n	8010734 <__match+0x4>
 8010754:	2000      	movs	r0, #0
 8010756:	e7f3      	b.n	8010740 <__match+0x10>

08010758 <__hexnan>:
 8010758:	b5f0      	push	{r4, r5, r6, r7, lr}
 801075a:	680b      	ldr	r3, [r1, #0]
 801075c:	b08b      	sub	sp, #44	; 0x2c
 801075e:	9201      	str	r2, [sp, #4]
 8010760:	9901      	ldr	r1, [sp, #4]
 8010762:	115a      	asrs	r2, r3, #5
 8010764:	0092      	lsls	r2, r2, #2
 8010766:	188a      	adds	r2, r1, r2
 8010768:	9202      	str	r2, [sp, #8]
 801076a:	0019      	movs	r1, r3
 801076c:	221f      	movs	r2, #31
 801076e:	4011      	ands	r1, r2
 8010770:	9008      	str	r0, [sp, #32]
 8010772:	9106      	str	r1, [sp, #24]
 8010774:	4213      	tst	r3, r2
 8010776:	d002      	beq.n	801077e <__hexnan+0x26>
 8010778:	9b02      	ldr	r3, [sp, #8]
 801077a:	3304      	adds	r3, #4
 801077c:	9302      	str	r3, [sp, #8]
 801077e:	9b02      	ldr	r3, [sp, #8]
 8010780:	2500      	movs	r5, #0
 8010782:	1f1e      	subs	r6, r3, #4
 8010784:	0037      	movs	r7, r6
 8010786:	0034      	movs	r4, r6
 8010788:	9b08      	ldr	r3, [sp, #32]
 801078a:	6035      	str	r5, [r6, #0]
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	9507      	str	r5, [sp, #28]
 8010790:	9305      	str	r3, [sp, #20]
 8010792:	9503      	str	r5, [sp, #12]
 8010794:	9b05      	ldr	r3, [sp, #20]
 8010796:	3301      	adds	r3, #1
 8010798:	9309      	str	r3, [sp, #36]	; 0x24
 801079a:	9b05      	ldr	r3, [sp, #20]
 801079c:	785b      	ldrb	r3, [r3, #1]
 801079e:	9304      	str	r3, [sp, #16]
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d028      	beq.n	80107f6 <__hexnan+0x9e>
 80107a4:	9804      	ldr	r0, [sp, #16]
 80107a6:	f7ff fd5f 	bl	8010268 <__hexdig_fun>
 80107aa:	2800      	cmp	r0, #0
 80107ac:	d154      	bne.n	8010858 <__hexnan+0x100>
 80107ae:	9b04      	ldr	r3, [sp, #16]
 80107b0:	2b20      	cmp	r3, #32
 80107b2:	d819      	bhi.n	80107e8 <__hexnan+0x90>
 80107b4:	9b03      	ldr	r3, [sp, #12]
 80107b6:	9a07      	ldr	r2, [sp, #28]
 80107b8:	4293      	cmp	r3, r2
 80107ba:	dd12      	ble.n	80107e2 <__hexnan+0x8a>
 80107bc:	42bc      	cmp	r4, r7
 80107be:	d206      	bcs.n	80107ce <__hexnan+0x76>
 80107c0:	2d07      	cmp	r5, #7
 80107c2:	dc04      	bgt.n	80107ce <__hexnan+0x76>
 80107c4:	002a      	movs	r2, r5
 80107c6:	0039      	movs	r1, r7
 80107c8:	0020      	movs	r0, r4
 80107ca:	f7ff ff9f 	bl	801070c <L_shift>
 80107ce:	9b01      	ldr	r3, [sp, #4]
 80107d0:	2508      	movs	r5, #8
 80107d2:	429c      	cmp	r4, r3
 80107d4:	d905      	bls.n	80107e2 <__hexnan+0x8a>
 80107d6:	1f27      	subs	r7, r4, #4
 80107d8:	2500      	movs	r5, #0
 80107da:	003c      	movs	r4, r7
 80107dc:	9b03      	ldr	r3, [sp, #12]
 80107de:	603d      	str	r5, [r7, #0]
 80107e0:	9307      	str	r3, [sp, #28]
 80107e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107e4:	9305      	str	r3, [sp, #20]
 80107e6:	e7d5      	b.n	8010794 <__hexnan+0x3c>
 80107e8:	9b04      	ldr	r3, [sp, #16]
 80107ea:	2b29      	cmp	r3, #41	; 0x29
 80107ec:	d159      	bne.n	80108a2 <__hexnan+0x14a>
 80107ee:	9b05      	ldr	r3, [sp, #20]
 80107f0:	9a08      	ldr	r2, [sp, #32]
 80107f2:	3302      	adds	r3, #2
 80107f4:	6013      	str	r3, [r2, #0]
 80107f6:	9b03      	ldr	r3, [sp, #12]
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d052      	beq.n	80108a2 <__hexnan+0x14a>
 80107fc:	42bc      	cmp	r4, r7
 80107fe:	d206      	bcs.n	801080e <__hexnan+0xb6>
 8010800:	2d07      	cmp	r5, #7
 8010802:	dc04      	bgt.n	801080e <__hexnan+0xb6>
 8010804:	002a      	movs	r2, r5
 8010806:	0039      	movs	r1, r7
 8010808:	0020      	movs	r0, r4
 801080a:	f7ff ff7f 	bl	801070c <L_shift>
 801080e:	9b01      	ldr	r3, [sp, #4]
 8010810:	429c      	cmp	r4, r3
 8010812:	d935      	bls.n	8010880 <__hexnan+0x128>
 8010814:	001a      	movs	r2, r3
 8010816:	0023      	movs	r3, r4
 8010818:	cb02      	ldmia	r3!, {r1}
 801081a:	c202      	stmia	r2!, {r1}
 801081c:	429e      	cmp	r6, r3
 801081e:	d2fb      	bcs.n	8010818 <__hexnan+0xc0>
 8010820:	9b02      	ldr	r3, [sp, #8]
 8010822:	1c61      	adds	r1, r4, #1
 8010824:	1eda      	subs	r2, r3, #3
 8010826:	2304      	movs	r3, #4
 8010828:	4291      	cmp	r1, r2
 801082a:	d805      	bhi.n	8010838 <__hexnan+0xe0>
 801082c:	9b02      	ldr	r3, [sp, #8]
 801082e:	3b04      	subs	r3, #4
 8010830:	1b1b      	subs	r3, r3, r4
 8010832:	089b      	lsrs	r3, r3, #2
 8010834:	3301      	adds	r3, #1
 8010836:	009b      	lsls	r3, r3, #2
 8010838:	9a01      	ldr	r2, [sp, #4]
 801083a:	18d3      	adds	r3, r2, r3
 801083c:	2200      	movs	r2, #0
 801083e:	c304      	stmia	r3!, {r2}
 8010840:	429e      	cmp	r6, r3
 8010842:	d2fc      	bcs.n	801083e <__hexnan+0xe6>
 8010844:	6833      	ldr	r3, [r6, #0]
 8010846:	2b00      	cmp	r3, #0
 8010848:	d104      	bne.n	8010854 <__hexnan+0xfc>
 801084a:	9b01      	ldr	r3, [sp, #4]
 801084c:	429e      	cmp	r6, r3
 801084e:	d126      	bne.n	801089e <__hexnan+0x146>
 8010850:	2301      	movs	r3, #1
 8010852:	6033      	str	r3, [r6, #0]
 8010854:	2005      	movs	r0, #5
 8010856:	e025      	b.n	80108a4 <__hexnan+0x14c>
 8010858:	9b03      	ldr	r3, [sp, #12]
 801085a:	3501      	adds	r5, #1
 801085c:	3301      	adds	r3, #1
 801085e:	9303      	str	r3, [sp, #12]
 8010860:	2d08      	cmp	r5, #8
 8010862:	dd06      	ble.n	8010872 <__hexnan+0x11a>
 8010864:	9b01      	ldr	r3, [sp, #4]
 8010866:	429c      	cmp	r4, r3
 8010868:	d9bb      	bls.n	80107e2 <__hexnan+0x8a>
 801086a:	2300      	movs	r3, #0
 801086c:	2501      	movs	r5, #1
 801086e:	3c04      	subs	r4, #4
 8010870:	6023      	str	r3, [r4, #0]
 8010872:	220f      	movs	r2, #15
 8010874:	6823      	ldr	r3, [r4, #0]
 8010876:	4010      	ands	r0, r2
 8010878:	011b      	lsls	r3, r3, #4
 801087a:	4318      	orrs	r0, r3
 801087c:	6020      	str	r0, [r4, #0]
 801087e:	e7b0      	b.n	80107e2 <__hexnan+0x8a>
 8010880:	9b06      	ldr	r3, [sp, #24]
 8010882:	2b00      	cmp	r3, #0
 8010884:	d0de      	beq.n	8010844 <__hexnan+0xec>
 8010886:	2120      	movs	r1, #32
 8010888:	9a06      	ldr	r2, [sp, #24]
 801088a:	9b02      	ldr	r3, [sp, #8]
 801088c:	1a89      	subs	r1, r1, r2
 801088e:	2201      	movs	r2, #1
 8010890:	4252      	negs	r2, r2
 8010892:	40ca      	lsrs	r2, r1
 8010894:	3b04      	subs	r3, #4
 8010896:	6819      	ldr	r1, [r3, #0]
 8010898:	400a      	ands	r2, r1
 801089a:	601a      	str	r2, [r3, #0]
 801089c:	e7d2      	b.n	8010844 <__hexnan+0xec>
 801089e:	3e04      	subs	r6, #4
 80108a0:	e7d0      	b.n	8010844 <__hexnan+0xec>
 80108a2:	2004      	movs	r0, #4
 80108a4:	b00b      	add	sp, #44	; 0x2c
 80108a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080108a8 <__ascii_mbtowc>:
 80108a8:	b082      	sub	sp, #8
 80108aa:	2900      	cmp	r1, #0
 80108ac:	d100      	bne.n	80108b0 <__ascii_mbtowc+0x8>
 80108ae:	a901      	add	r1, sp, #4
 80108b0:	1e10      	subs	r0, r2, #0
 80108b2:	d006      	beq.n	80108c2 <__ascii_mbtowc+0x1a>
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d006      	beq.n	80108c6 <__ascii_mbtowc+0x1e>
 80108b8:	7813      	ldrb	r3, [r2, #0]
 80108ba:	600b      	str	r3, [r1, #0]
 80108bc:	7810      	ldrb	r0, [r2, #0]
 80108be:	1e43      	subs	r3, r0, #1
 80108c0:	4198      	sbcs	r0, r3
 80108c2:	b002      	add	sp, #8
 80108c4:	4770      	bx	lr
 80108c6:	2002      	movs	r0, #2
 80108c8:	4240      	negs	r0, r0
 80108ca:	e7fa      	b.n	80108c2 <__ascii_mbtowc+0x1a>

080108cc <_Balloc>:
 80108cc:	b570      	push	{r4, r5, r6, lr}
 80108ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80108d0:	0006      	movs	r6, r0
 80108d2:	000c      	movs	r4, r1
 80108d4:	2d00      	cmp	r5, #0
 80108d6:	d10e      	bne.n	80108f6 <_Balloc+0x2a>
 80108d8:	2010      	movs	r0, #16
 80108da:	f001 ffcb 	bl	8012874 <malloc>
 80108de:	1e02      	subs	r2, r0, #0
 80108e0:	6270      	str	r0, [r6, #36]	; 0x24
 80108e2:	d104      	bne.n	80108ee <_Balloc+0x22>
 80108e4:	2166      	movs	r1, #102	; 0x66
 80108e6:	4b19      	ldr	r3, [pc, #100]	; (801094c <_Balloc+0x80>)
 80108e8:	4819      	ldr	r0, [pc, #100]	; (8010950 <_Balloc+0x84>)
 80108ea:	f001 f8ef 	bl	8011acc <__assert_func>
 80108ee:	6045      	str	r5, [r0, #4]
 80108f0:	6085      	str	r5, [r0, #8]
 80108f2:	6005      	str	r5, [r0, #0]
 80108f4:	60c5      	str	r5, [r0, #12]
 80108f6:	6a75      	ldr	r5, [r6, #36]	; 0x24
 80108f8:	68eb      	ldr	r3, [r5, #12]
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d013      	beq.n	8010926 <_Balloc+0x5a>
 80108fe:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8010900:	00a2      	lsls	r2, r4, #2
 8010902:	68db      	ldr	r3, [r3, #12]
 8010904:	189b      	adds	r3, r3, r2
 8010906:	6818      	ldr	r0, [r3, #0]
 8010908:	2800      	cmp	r0, #0
 801090a:	d118      	bne.n	801093e <_Balloc+0x72>
 801090c:	2101      	movs	r1, #1
 801090e:	000d      	movs	r5, r1
 8010910:	40a5      	lsls	r5, r4
 8010912:	1d6a      	adds	r2, r5, #5
 8010914:	0030      	movs	r0, r6
 8010916:	0092      	lsls	r2, r2, #2
 8010918:	f000 fcbc 	bl	8011294 <_calloc_r>
 801091c:	2800      	cmp	r0, #0
 801091e:	d00c      	beq.n	801093a <_Balloc+0x6e>
 8010920:	6044      	str	r4, [r0, #4]
 8010922:	6085      	str	r5, [r0, #8]
 8010924:	e00d      	b.n	8010942 <_Balloc+0x76>
 8010926:	2221      	movs	r2, #33	; 0x21
 8010928:	2104      	movs	r1, #4
 801092a:	0030      	movs	r0, r6
 801092c:	f000 fcb2 	bl	8011294 <_calloc_r>
 8010930:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8010932:	60e8      	str	r0, [r5, #12]
 8010934:	68db      	ldr	r3, [r3, #12]
 8010936:	2b00      	cmp	r3, #0
 8010938:	d1e1      	bne.n	80108fe <_Balloc+0x32>
 801093a:	2000      	movs	r0, #0
 801093c:	bd70      	pop	{r4, r5, r6, pc}
 801093e:	6802      	ldr	r2, [r0, #0]
 8010940:	601a      	str	r2, [r3, #0]
 8010942:	2300      	movs	r3, #0
 8010944:	6103      	str	r3, [r0, #16]
 8010946:	60c3      	str	r3, [r0, #12]
 8010948:	e7f8      	b.n	801093c <_Balloc+0x70>
 801094a:	46c0      	nop			; (mov r8, r8)
 801094c:	08013bfc 	.word	0x08013bfc
 8010950:	08013c13 	.word	0x08013c13

08010954 <_Bfree>:
 8010954:	b570      	push	{r4, r5, r6, lr}
 8010956:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010958:	0005      	movs	r5, r0
 801095a:	000c      	movs	r4, r1
 801095c:	2e00      	cmp	r6, #0
 801095e:	d10e      	bne.n	801097e <_Bfree+0x2a>
 8010960:	2010      	movs	r0, #16
 8010962:	f001 ff87 	bl	8012874 <malloc>
 8010966:	1e02      	subs	r2, r0, #0
 8010968:	6268      	str	r0, [r5, #36]	; 0x24
 801096a:	d104      	bne.n	8010976 <_Bfree+0x22>
 801096c:	218a      	movs	r1, #138	; 0x8a
 801096e:	4b09      	ldr	r3, [pc, #36]	; (8010994 <_Bfree+0x40>)
 8010970:	4809      	ldr	r0, [pc, #36]	; (8010998 <_Bfree+0x44>)
 8010972:	f001 f8ab 	bl	8011acc <__assert_func>
 8010976:	6046      	str	r6, [r0, #4]
 8010978:	6086      	str	r6, [r0, #8]
 801097a:	6006      	str	r6, [r0, #0]
 801097c:	60c6      	str	r6, [r0, #12]
 801097e:	2c00      	cmp	r4, #0
 8010980:	d007      	beq.n	8010992 <_Bfree+0x3e>
 8010982:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010984:	6862      	ldr	r2, [r4, #4]
 8010986:	68db      	ldr	r3, [r3, #12]
 8010988:	0092      	lsls	r2, r2, #2
 801098a:	189b      	adds	r3, r3, r2
 801098c:	681a      	ldr	r2, [r3, #0]
 801098e:	6022      	str	r2, [r4, #0]
 8010990:	601c      	str	r4, [r3, #0]
 8010992:	bd70      	pop	{r4, r5, r6, pc}
 8010994:	08013bfc 	.word	0x08013bfc
 8010998:	08013c13 	.word	0x08013c13

0801099c <__multadd>:
 801099c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801099e:	000e      	movs	r6, r1
 80109a0:	9001      	str	r0, [sp, #4]
 80109a2:	000c      	movs	r4, r1
 80109a4:	001d      	movs	r5, r3
 80109a6:	2000      	movs	r0, #0
 80109a8:	690f      	ldr	r7, [r1, #16]
 80109aa:	3614      	adds	r6, #20
 80109ac:	6833      	ldr	r3, [r6, #0]
 80109ae:	3001      	adds	r0, #1
 80109b0:	b299      	uxth	r1, r3
 80109b2:	4351      	muls	r1, r2
 80109b4:	0c1b      	lsrs	r3, r3, #16
 80109b6:	4353      	muls	r3, r2
 80109b8:	1949      	adds	r1, r1, r5
 80109ba:	0c0d      	lsrs	r5, r1, #16
 80109bc:	195b      	adds	r3, r3, r5
 80109be:	0c1d      	lsrs	r5, r3, #16
 80109c0:	b289      	uxth	r1, r1
 80109c2:	041b      	lsls	r3, r3, #16
 80109c4:	185b      	adds	r3, r3, r1
 80109c6:	c608      	stmia	r6!, {r3}
 80109c8:	4287      	cmp	r7, r0
 80109ca:	dcef      	bgt.n	80109ac <__multadd+0x10>
 80109cc:	2d00      	cmp	r5, #0
 80109ce:	d022      	beq.n	8010a16 <__multadd+0x7a>
 80109d0:	68a3      	ldr	r3, [r4, #8]
 80109d2:	42bb      	cmp	r3, r7
 80109d4:	dc19      	bgt.n	8010a0a <__multadd+0x6e>
 80109d6:	6863      	ldr	r3, [r4, #4]
 80109d8:	9801      	ldr	r0, [sp, #4]
 80109da:	1c59      	adds	r1, r3, #1
 80109dc:	f7ff ff76 	bl	80108cc <_Balloc>
 80109e0:	1e06      	subs	r6, r0, #0
 80109e2:	d105      	bne.n	80109f0 <__multadd+0x54>
 80109e4:	0002      	movs	r2, r0
 80109e6:	21b5      	movs	r1, #181	; 0xb5
 80109e8:	4b0c      	ldr	r3, [pc, #48]	; (8010a1c <__multadd+0x80>)
 80109ea:	480d      	ldr	r0, [pc, #52]	; (8010a20 <__multadd+0x84>)
 80109ec:	f001 f86e 	bl	8011acc <__assert_func>
 80109f0:	0021      	movs	r1, r4
 80109f2:	6923      	ldr	r3, [r4, #16]
 80109f4:	310c      	adds	r1, #12
 80109f6:	1c9a      	adds	r2, r3, #2
 80109f8:	0092      	lsls	r2, r2, #2
 80109fa:	300c      	adds	r0, #12
 80109fc:	f7fe fafa 	bl	800eff4 <memcpy>
 8010a00:	0021      	movs	r1, r4
 8010a02:	9801      	ldr	r0, [sp, #4]
 8010a04:	f7ff ffa6 	bl	8010954 <_Bfree>
 8010a08:	0034      	movs	r4, r6
 8010a0a:	1d3b      	adds	r3, r7, #4
 8010a0c:	009b      	lsls	r3, r3, #2
 8010a0e:	18e3      	adds	r3, r4, r3
 8010a10:	605d      	str	r5, [r3, #4]
 8010a12:	1c7b      	adds	r3, r7, #1
 8010a14:	6123      	str	r3, [r4, #16]
 8010a16:	0020      	movs	r0, r4
 8010a18:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010a1a:	46c0      	nop			; (mov r8, r8)
 8010a1c:	08013b71 	.word	0x08013b71
 8010a20:	08013c13 	.word	0x08013c13

08010a24 <__s2b>:
 8010a24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010a26:	0006      	movs	r6, r0
 8010a28:	0018      	movs	r0, r3
 8010a2a:	000c      	movs	r4, r1
 8010a2c:	3008      	adds	r0, #8
 8010a2e:	2109      	movs	r1, #9
 8010a30:	9301      	str	r3, [sp, #4]
 8010a32:	0015      	movs	r5, r2
 8010a34:	f7ef fc14 	bl	8000260 <__divsi3>
 8010a38:	2301      	movs	r3, #1
 8010a3a:	2100      	movs	r1, #0
 8010a3c:	4283      	cmp	r3, r0
 8010a3e:	db0a      	blt.n	8010a56 <__s2b+0x32>
 8010a40:	0030      	movs	r0, r6
 8010a42:	f7ff ff43 	bl	80108cc <_Balloc>
 8010a46:	1e01      	subs	r1, r0, #0
 8010a48:	d108      	bne.n	8010a5c <__s2b+0x38>
 8010a4a:	0002      	movs	r2, r0
 8010a4c:	4b19      	ldr	r3, [pc, #100]	; (8010ab4 <__s2b+0x90>)
 8010a4e:	481a      	ldr	r0, [pc, #104]	; (8010ab8 <__s2b+0x94>)
 8010a50:	31ce      	adds	r1, #206	; 0xce
 8010a52:	f001 f83b 	bl	8011acc <__assert_func>
 8010a56:	005b      	lsls	r3, r3, #1
 8010a58:	3101      	adds	r1, #1
 8010a5a:	e7ef      	b.n	8010a3c <__s2b+0x18>
 8010a5c:	9b08      	ldr	r3, [sp, #32]
 8010a5e:	6143      	str	r3, [r0, #20]
 8010a60:	2301      	movs	r3, #1
 8010a62:	6103      	str	r3, [r0, #16]
 8010a64:	2d09      	cmp	r5, #9
 8010a66:	dd18      	ble.n	8010a9a <__s2b+0x76>
 8010a68:	0023      	movs	r3, r4
 8010a6a:	3309      	adds	r3, #9
 8010a6c:	001f      	movs	r7, r3
 8010a6e:	9300      	str	r3, [sp, #0]
 8010a70:	1964      	adds	r4, r4, r5
 8010a72:	783b      	ldrb	r3, [r7, #0]
 8010a74:	220a      	movs	r2, #10
 8010a76:	0030      	movs	r0, r6
 8010a78:	3b30      	subs	r3, #48	; 0x30
 8010a7a:	f7ff ff8f 	bl	801099c <__multadd>
 8010a7e:	3701      	adds	r7, #1
 8010a80:	0001      	movs	r1, r0
 8010a82:	42a7      	cmp	r7, r4
 8010a84:	d1f5      	bne.n	8010a72 <__s2b+0x4e>
 8010a86:	002c      	movs	r4, r5
 8010a88:	9b00      	ldr	r3, [sp, #0]
 8010a8a:	3c08      	subs	r4, #8
 8010a8c:	191c      	adds	r4, r3, r4
 8010a8e:	002f      	movs	r7, r5
 8010a90:	9b01      	ldr	r3, [sp, #4]
 8010a92:	429f      	cmp	r7, r3
 8010a94:	db04      	blt.n	8010aa0 <__s2b+0x7c>
 8010a96:	0008      	movs	r0, r1
 8010a98:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010a9a:	2509      	movs	r5, #9
 8010a9c:	340a      	adds	r4, #10
 8010a9e:	e7f6      	b.n	8010a8e <__s2b+0x6a>
 8010aa0:	1b63      	subs	r3, r4, r5
 8010aa2:	5ddb      	ldrb	r3, [r3, r7]
 8010aa4:	220a      	movs	r2, #10
 8010aa6:	0030      	movs	r0, r6
 8010aa8:	3b30      	subs	r3, #48	; 0x30
 8010aaa:	f7ff ff77 	bl	801099c <__multadd>
 8010aae:	3701      	adds	r7, #1
 8010ab0:	0001      	movs	r1, r0
 8010ab2:	e7ed      	b.n	8010a90 <__s2b+0x6c>
 8010ab4:	08013b71 	.word	0x08013b71
 8010ab8:	08013c13 	.word	0x08013c13

08010abc <__hi0bits>:
 8010abc:	0003      	movs	r3, r0
 8010abe:	0c02      	lsrs	r2, r0, #16
 8010ac0:	2000      	movs	r0, #0
 8010ac2:	4282      	cmp	r2, r0
 8010ac4:	d101      	bne.n	8010aca <__hi0bits+0xe>
 8010ac6:	041b      	lsls	r3, r3, #16
 8010ac8:	3010      	adds	r0, #16
 8010aca:	0e1a      	lsrs	r2, r3, #24
 8010acc:	d101      	bne.n	8010ad2 <__hi0bits+0x16>
 8010ace:	3008      	adds	r0, #8
 8010ad0:	021b      	lsls	r3, r3, #8
 8010ad2:	0f1a      	lsrs	r2, r3, #28
 8010ad4:	d101      	bne.n	8010ada <__hi0bits+0x1e>
 8010ad6:	3004      	adds	r0, #4
 8010ad8:	011b      	lsls	r3, r3, #4
 8010ada:	0f9a      	lsrs	r2, r3, #30
 8010adc:	d101      	bne.n	8010ae2 <__hi0bits+0x26>
 8010ade:	3002      	adds	r0, #2
 8010ae0:	009b      	lsls	r3, r3, #2
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	db03      	blt.n	8010aee <__hi0bits+0x32>
 8010ae6:	3001      	adds	r0, #1
 8010ae8:	005b      	lsls	r3, r3, #1
 8010aea:	d400      	bmi.n	8010aee <__hi0bits+0x32>
 8010aec:	2020      	movs	r0, #32
 8010aee:	4770      	bx	lr

08010af0 <__lo0bits>:
 8010af0:	6803      	ldr	r3, [r0, #0]
 8010af2:	0002      	movs	r2, r0
 8010af4:	2107      	movs	r1, #7
 8010af6:	0018      	movs	r0, r3
 8010af8:	4008      	ands	r0, r1
 8010afa:	420b      	tst	r3, r1
 8010afc:	d00d      	beq.n	8010b1a <__lo0bits+0x2a>
 8010afe:	3906      	subs	r1, #6
 8010b00:	2000      	movs	r0, #0
 8010b02:	420b      	tst	r3, r1
 8010b04:	d105      	bne.n	8010b12 <__lo0bits+0x22>
 8010b06:	3002      	adds	r0, #2
 8010b08:	4203      	tst	r3, r0
 8010b0a:	d003      	beq.n	8010b14 <__lo0bits+0x24>
 8010b0c:	40cb      	lsrs	r3, r1
 8010b0e:	0008      	movs	r0, r1
 8010b10:	6013      	str	r3, [r2, #0]
 8010b12:	4770      	bx	lr
 8010b14:	089b      	lsrs	r3, r3, #2
 8010b16:	6013      	str	r3, [r2, #0]
 8010b18:	e7fb      	b.n	8010b12 <__lo0bits+0x22>
 8010b1a:	b299      	uxth	r1, r3
 8010b1c:	2900      	cmp	r1, #0
 8010b1e:	d101      	bne.n	8010b24 <__lo0bits+0x34>
 8010b20:	2010      	movs	r0, #16
 8010b22:	0c1b      	lsrs	r3, r3, #16
 8010b24:	b2d9      	uxtb	r1, r3
 8010b26:	2900      	cmp	r1, #0
 8010b28:	d101      	bne.n	8010b2e <__lo0bits+0x3e>
 8010b2a:	3008      	adds	r0, #8
 8010b2c:	0a1b      	lsrs	r3, r3, #8
 8010b2e:	0719      	lsls	r1, r3, #28
 8010b30:	d101      	bne.n	8010b36 <__lo0bits+0x46>
 8010b32:	3004      	adds	r0, #4
 8010b34:	091b      	lsrs	r3, r3, #4
 8010b36:	0799      	lsls	r1, r3, #30
 8010b38:	d101      	bne.n	8010b3e <__lo0bits+0x4e>
 8010b3a:	3002      	adds	r0, #2
 8010b3c:	089b      	lsrs	r3, r3, #2
 8010b3e:	07d9      	lsls	r1, r3, #31
 8010b40:	d4e9      	bmi.n	8010b16 <__lo0bits+0x26>
 8010b42:	3001      	adds	r0, #1
 8010b44:	085b      	lsrs	r3, r3, #1
 8010b46:	d1e6      	bne.n	8010b16 <__lo0bits+0x26>
 8010b48:	2020      	movs	r0, #32
 8010b4a:	e7e2      	b.n	8010b12 <__lo0bits+0x22>

08010b4c <__i2b>:
 8010b4c:	b510      	push	{r4, lr}
 8010b4e:	000c      	movs	r4, r1
 8010b50:	2101      	movs	r1, #1
 8010b52:	f7ff febb 	bl	80108cc <_Balloc>
 8010b56:	2800      	cmp	r0, #0
 8010b58:	d106      	bne.n	8010b68 <__i2b+0x1c>
 8010b5a:	21a0      	movs	r1, #160	; 0xa0
 8010b5c:	0002      	movs	r2, r0
 8010b5e:	4b04      	ldr	r3, [pc, #16]	; (8010b70 <__i2b+0x24>)
 8010b60:	4804      	ldr	r0, [pc, #16]	; (8010b74 <__i2b+0x28>)
 8010b62:	0049      	lsls	r1, r1, #1
 8010b64:	f000 ffb2 	bl	8011acc <__assert_func>
 8010b68:	2301      	movs	r3, #1
 8010b6a:	6144      	str	r4, [r0, #20]
 8010b6c:	6103      	str	r3, [r0, #16]
 8010b6e:	bd10      	pop	{r4, pc}
 8010b70:	08013b71 	.word	0x08013b71
 8010b74:	08013c13 	.word	0x08013c13

08010b78 <__multiply>:
 8010b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b7a:	690b      	ldr	r3, [r1, #16]
 8010b7c:	0014      	movs	r4, r2
 8010b7e:	6912      	ldr	r2, [r2, #16]
 8010b80:	000d      	movs	r5, r1
 8010b82:	b089      	sub	sp, #36	; 0x24
 8010b84:	4293      	cmp	r3, r2
 8010b86:	da01      	bge.n	8010b8c <__multiply+0x14>
 8010b88:	0025      	movs	r5, r4
 8010b8a:	000c      	movs	r4, r1
 8010b8c:	692f      	ldr	r7, [r5, #16]
 8010b8e:	6926      	ldr	r6, [r4, #16]
 8010b90:	6869      	ldr	r1, [r5, #4]
 8010b92:	19bb      	adds	r3, r7, r6
 8010b94:	9302      	str	r3, [sp, #8]
 8010b96:	68ab      	ldr	r3, [r5, #8]
 8010b98:	19ba      	adds	r2, r7, r6
 8010b9a:	4293      	cmp	r3, r2
 8010b9c:	da00      	bge.n	8010ba0 <__multiply+0x28>
 8010b9e:	3101      	adds	r1, #1
 8010ba0:	f7ff fe94 	bl	80108cc <_Balloc>
 8010ba4:	9001      	str	r0, [sp, #4]
 8010ba6:	2800      	cmp	r0, #0
 8010ba8:	d106      	bne.n	8010bb8 <__multiply+0x40>
 8010baa:	215e      	movs	r1, #94	; 0x5e
 8010bac:	0002      	movs	r2, r0
 8010bae:	4b48      	ldr	r3, [pc, #288]	; (8010cd0 <__multiply+0x158>)
 8010bb0:	4848      	ldr	r0, [pc, #288]	; (8010cd4 <__multiply+0x15c>)
 8010bb2:	31ff      	adds	r1, #255	; 0xff
 8010bb4:	f000 ff8a 	bl	8011acc <__assert_func>
 8010bb8:	9b01      	ldr	r3, [sp, #4]
 8010bba:	2200      	movs	r2, #0
 8010bbc:	3314      	adds	r3, #20
 8010bbe:	469c      	mov	ip, r3
 8010bc0:	19bb      	adds	r3, r7, r6
 8010bc2:	009b      	lsls	r3, r3, #2
 8010bc4:	4463      	add	r3, ip
 8010bc6:	9303      	str	r3, [sp, #12]
 8010bc8:	4663      	mov	r3, ip
 8010bca:	9903      	ldr	r1, [sp, #12]
 8010bcc:	428b      	cmp	r3, r1
 8010bce:	d32c      	bcc.n	8010c2a <__multiply+0xb2>
 8010bd0:	002b      	movs	r3, r5
 8010bd2:	0022      	movs	r2, r4
 8010bd4:	3314      	adds	r3, #20
 8010bd6:	00bf      	lsls	r7, r7, #2
 8010bd8:	3214      	adds	r2, #20
 8010bda:	9306      	str	r3, [sp, #24]
 8010bdc:	00b6      	lsls	r6, r6, #2
 8010bde:	19db      	adds	r3, r3, r7
 8010be0:	9304      	str	r3, [sp, #16]
 8010be2:	1993      	adds	r3, r2, r6
 8010be4:	9307      	str	r3, [sp, #28]
 8010be6:	2304      	movs	r3, #4
 8010be8:	9305      	str	r3, [sp, #20]
 8010bea:	002b      	movs	r3, r5
 8010bec:	9904      	ldr	r1, [sp, #16]
 8010bee:	3315      	adds	r3, #21
 8010bf0:	9200      	str	r2, [sp, #0]
 8010bf2:	4299      	cmp	r1, r3
 8010bf4:	d305      	bcc.n	8010c02 <__multiply+0x8a>
 8010bf6:	1b4b      	subs	r3, r1, r5
 8010bf8:	3b15      	subs	r3, #21
 8010bfa:	089b      	lsrs	r3, r3, #2
 8010bfc:	3301      	adds	r3, #1
 8010bfe:	009b      	lsls	r3, r3, #2
 8010c00:	9305      	str	r3, [sp, #20]
 8010c02:	9b07      	ldr	r3, [sp, #28]
 8010c04:	9a00      	ldr	r2, [sp, #0]
 8010c06:	429a      	cmp	r2, r3
 8010c08:	d311      	bcc.n	8010c2e <__multiply+0xb6>
 8010c0a:	9b02      	ldr	r3, [sp, #8]
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	dd06      	ble.n	8010c1e <__multiply+0xa6>
 8010c10:	9b03      	ldr	r3, [sp, #12]
 8010c12:	3b04      	subs	r3, #4
 8010c14:	9303      	str	r3, [sp, #12]
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	9300      	str	r3, [sp, #0]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d053      	beq.n	8010cc6 <__multiply+0x14e>
 8010c1e:	9b01      	ldr	r3, [sp, #4]
 8010c20:	9a02      	ldr	r2, [sp, #8]
 8010c22:	0018      	movs	r0, r3
 8010c24:	611a      	str	r2, [r3, #16]
 8010c26:	b009      	add	sp, #36	; 0x24
 8010c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c2a:	c304      	stmia	r3!, {r2}
 8010c2c:	e7cd      	b.n	8010bca <__multiply+0x52>
 8010c2e:	9b00      	ldr	r3, [sp, #0]
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	b298      	uxth	r0, r3
 8010c34:	2800      	cmp	r0, #0
 8010c36:	d01b      	beq.n	8010c70 <__multiply+0xf8>
 8010c38:	4667      	mov	r7, ip
 8010c3a:	2400      	movs	r4, #0
 8010c3c:	9e06      	ldr	r6, [sp, #24]
 8010c3e:	ce02      	ldmia	r6!, {r1}
 8010c40:	683a      	ldr	r2, [r7, #0]
 8010c42:	b28b      	uxth	r3, r1
 8010c44:	4343      	muls	r3, r0
 8010c46:	b292      	uxth	r2, r2
 8010c48:	189b      	adds	r3, r3, r2
 8010c4a:	191b      	adds	r3, r3, r4
 8010c4c:	0c0c      	lsrs	r4, r1, #16
 8010c4e:	4344      	muls	r4, r0
 8010c50:	683a      	ldr	r2, [r7, #0]
 8010c52:	0c11      	lsrs	r1, r2, #16
 8010c54:	1861      	adds	r1, r4, r1
 8010c56:	0c1c      	lsrs	r4, r3, #16
 8010c58:	1909      	adds	r1, r1, r4
 8010c5a:	0c0c      	lsrs	r4, r1, #16
 8010c5c:	b29b      	uxth	r3, r3
 8010c5e:	0409      	lsls	r1, r1, #16
 8010c60:	430b      	orrs	r3, r1
 8010c62:	c708      	stmia	r7!, {r3}
 8010c64:	9b04      	ldr	r3, [sp, #16]
 8010c66:	42b3      	cmp	r3, r6
 8010c68:	d8e9      	bhi.n	8010c3e <__multiply+0xc6>
 8010c6a:	4663      	mov	r3, ip
 8010c6c:	9a05      	ldr	r2, [sp, #20]
 8010c6e:	509c      	str	r4, [r3, r2]
 8010c70:	9b00      	ldr	r3, [sp, #0]
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	0c1e      	lsrs	r6, r3, #16
 8010c76:	d020      	beq.n	8010cba <__multiply+0x142>
 8010c78:	4663      	mov	r3, ip
 8010c7a:	002c      	movs	r4, r5
 8010c7c:	4660      	mov	r0, ip
 8010c7e:	2700      	movs	r7, #0
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	3414      	adds	r4, #20
 8010c84:	6822      	ldr	r2, [r4, #0]
 8010c86:	b29b      	uxth	r3, r3
 8010c88:	b291      	uxth	r1, r2
 8010c8a:	4371      	muls	r1, r6
 8010c8c:	6802      	ldr	r2, [r0, #0]
 8010c8e:	0c12      	lsrs	r2, r2, #16
 8010c90:	1889      	adds	r1, r1, r2
 8010c92:	19cf      	adds	r7, r1, r7
 8010c94:	0439      	lsls	r1, r7, #16
 8010c96:	430b      	orrs	r3, r1
 8010c98:	6003      	str	r3, [r0, #0]
 8010c9a:	cc02      	ldmia	r4!, {r1}
 8010c9c:	6843      	ldr	r3, [r0, #4]
 8010c9e:	0c09      	lsrs	r1, r1, #16
 8010ca0:	4371      	muls	r1, r6
 8010ca2:	b29b      	uxth	r3, r3
 8010ca4:	0c3f      	lsrs	r7, r7, #16
 8010ca6:	18cb      	adds	r3, r1, r3
 8010ca8:	9a04      	ldr	r2, [sp, #16]
 8010caa:	19db      	adds	r3, r3, r7
 8010cac:	0c1f      	lsrs	r7, r3, #16
 8010cae:	3004      	adds	r0, #4
 8010cb0:	42a2      	cmp	r2, r4
 8010cb2:	d8e7      	bhi.n	8010c84 <__multiply+0x10c>
 8010cb4:	4662      	mov	r2, ip
 8010cb6:	9905      	ldr	r1, [sp, #20]
 8010cb8:	5053      	str	r3, [r2, r1]
 8010cba:	9b00      	ldr	r3, [sp, #0]
 8010cbc:	3304      	adds	r3, #4
 8010cbe:	9300      	str	r3, [sp, #0]
 8010cc0:	2304      	movs	r3, #4
 8010cc2:	449c      	add	ip, r3
 8010cc4:	e79d      	b.n	8010c02 <__multiply+0x8a>
 8010cc6:	9b02      	ldr	r3, [sp, #8]
 8010cc8:	3b01      	subs	r3, #1
 8010cca:	9302      	str	r3, [sp, #8]
 8010ccc:	e79d      	b.n	8010c0a <__multiply+0x92>
 8010cce:	46c0      	nop			; (mov r8, r8)
 8010cd0:	08013b71 	.word	0x08013b71
 8010cd4:	08013c13 	.word	0x08013c13

08010cd8 <__pow5mult>:
 8010cd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010cda:	2303      	movs	r3, #3
 8010cdc:	0015      	movs	r5, r2
 8010cde:	0007      	movs	r7, r0
 8010ce0:	000e      	movs	r6, r1
 8010ce2:	401a      	ands	r2, r3
 8010ce4:	421d      	tst	r5, r3
 8010ce6:	d008      	beq.n	8010cfa <__pow5mult+0x22>
 8010ce8:	4925      	ldr	r1, [pc, #148]	; (8010d80 <__pow5mult+0xa8>)
 8010cea:	3a01      	subs	r2, #1
 8010cec:	0092      	lsls	r2, r2, #2
 8010cee:	5852      	ldr	r2, [r2, r1]
 8010cf0:	2300      	movs	r3, #0
 8010cf2:	0031      	movs	r1, r6
 8010cf4:	f7ff fe52 	bl	801099c <__multadd>
 8010cf8:	0006      	movs	r6, r0
 8010cfa:	10ad      	asrs	r5, r5, #2
 8010cfc:	d03d      	beq.n	8010d7a <__pow5mult+0xa2>
 8010cfe:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8010d00:	2c00      	cmp	r4, #0
 8010d02:	d10f      	bne.n	8010d24 <__pow5mult+0x4c>
 8010d04:	2010      	movs	r0, #16
 8010d06:	f001 fdb5 	bl	8012874 <malloc>
 8010d0a:	1e02      	subs	r2, r0, #0
 8010d0c:	6278      	str	r0, [r7, #36]	; 0x24
 8010d0e:	d105      	bne.n	8010d1c <__pow5mult+0x44>
 8010d10:	21d7      	movs	r1, #215	; 0xd7
 8010d12:	4b1c      	ldr	r3, [pc, #112]	; (8010d84 <__pow5mult+0xac>)
 8010d14:	481c      	ldr	r0, [pc, #112]	; (8010d88 <__pow5mult+0xb0>)
 8010d16:	0049      	lsls	r1, r1, #1
 8010d18:	f000 fed8 	bl	8011acc <__assert_func>
 8010d1c:	6044      	str	r4, [r0, #4]
 8010d1e:	6084      	str	r4, [r0, #8]
 8010d20:	6004      	str	r4, [r0, #0]
 8010d22:	60c4      	str	r4, [r0, #12]
 8010d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d26:	689c      	ldr	r4, [r3, #8]
 8010d28:	9301      	str	r3, [sp, #4]
 8010d2a:	2c00      	cmp	r4, #0
 8010d2c:	d108      	bne.n	8010d40 <__pow5mult+0x68>
 8010d2e:	0038      	movs	r0, r7
 8010d30:	4916      	ldr	r1, [pc, #88]	; (8010d8c <__pow5mult+0xb4>)
 8010d32:	f7ff ff0b 	bl	8010b4c <__i2b>
 8010d36:	9b01      	ldr	r3, [sp, #4]
 8010d38:	0004      	movs	r4, r0
 8010d3a:	6098      	str	r0, [r3, #8]
 8010d3c:	2300      	movs	r3, #0
 8010d3e:	6003      	str	r3, [r0, #0]
 8010d40:	2301      	movs	r3, #1
 8010d42:	421d      	tst	r5, r3
 8010d44:	d00a      	beq.n	8010d5c <__pow5mult+0x84>
 8010d46:	0031      	movs	r1, r6
 8010d48:	0022      	movs	r2, r4
 8010d4a:	0038      	movs	r0, r7
 8010d4c:	f7ff ff14 	bl	8010b78 <__multiply>
 8010d50:	0031      	movs	r1, r6
 8010d52:	9001      	str	r0, [sp, #4]
 8010d54:	0038      	movs	r0, r7
 8010d56:	f7ff fdfd 	bl	8010954 <_Bfree>
 8010d5a:	9e01      	ldr	r6, [sp, #4]
 8010d5c:	106d      	asrs	r5, r5, #1
 8010d5e:	d00c      	beq.n	8010d7a <__pow5mult+0xa2>
 8010d60:	6820      	ldr	r0, [r4, #0]
 8010d62:	2800      	cmp	r0, #0
 8010d64:	d107      	bne.n	8010d76 <__pow5mult+0x9e>
 8010d66:	0022      	movs	r2, r4
 8010d68:	0021      	movs	r1, r4
 8010d6a:	0038      	movs	r0, r7
 8010d6c:	f7ff ff04 	bl	8010b78 <__multiply>
 8010d70:	2300      	movs	r3, #0
 8010d72:	6020      	str	r0, [r4, #0]
 8010d74:	6003      	str	r3, [r0, #0]
 8010d76:	0004      	movs	r4, r0
 8010d78:	e7e2      	b.n	8010d40 <__pow5mult+0x68>
 8010d7a:	0030      	movs	r0, r6
 8010d7c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010d7e:	46c0      	nop			; (mov r8, r8)
 8010d80:	08013d60 	.word	0x08013d60
 8010d84:	08013bfc 	.word	0x08013bfc
 8010d88:	08013c13 	.word	0x08013c13
 8010d8c:	00000271 	.word	0x00000271

08010d90 <__lshift>:
 8010d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d92:	000c      	movs	r4, r1
 8010d94:	0017      	movs	r7, r2
 8010d96:	6923      	ldr	r3, [r4, #16]
 8010d98:	1155      	asrs	r5, r2, #5
 8010d9a:	b087      	sub	sp, #28
 8010d9c:	18eb      	adds	r3, r5, r3
 8010d9e:	9302      	str	r3, [sp, #8]
 8010da0:	3301      	adds	r3, #1
 8010da2:	9301      	str	r3, [sp, #4]
 8010da4:	6849      	ldr	r1, [r1, #4]
 8010da6:	68a3      	ldr	r3, [r4, #8]
 8010da8:	9004      	str	r0, [sp, #16]
 8010daa:	9a01      	ldr	r2, [sp, #4]
 8010dac:	4293      	cmp	r3, r2
 8010dae:	db10      	blt.n	8010dd2 <__lshift+0x42>
 8010db0:	9804      	ldr	r0, [sp, #16]
 8010db2:	f7ff fd8b 	bl	80108cc <_Balloc>
 8010db6:	2300      	movs	r3, #0
 8010db8:	0002      	movs	r2, r0
 8010dba:	0006      	movs	r6, r0
 8010dbc:	0019      	movs	r1, r3
 8010dbe:	3214      	adds	r2, #20
 8010dc0:	4298      	cmp	r0, r3
 8010dc2:	d10c      	bne.n	8010dde <__lshift+0x4e>
 8010dc4:	21da      	movs	r1, #218	; 0xda
 8010dc6:	0002      	movs	r2, r0
 8010dc8:	4b26      	ldr	r3, [pc, #152]	; (8010e64 <__lshift+0xd4>)
 8010dca:	4827      	ldr	r0, [pc, #156]	; (8010e68 <__lshift+0xd8>)
 8010dcc:	31ff      	adds	r1, #255	; 0xff
 8010dce:	f000 fe7d 	bl	8011acc <__assert_func>
 8010dd2:	3101      	adds	r1, #1
 8010dd4:	005b      	lsls	r3, r3, #1
 8010dd6:	e7e8      	b.n	8010daa <__lshift+0x1a>
 8010dd8:	0098      	lsls	r0, r3, #2
 8010dda:	5011      	str	r1, [r2, r0]
 8010ddc:	3301      	adds	r3, #1
 8010dde:	42ab      	cmp	r3, r5
 8010de0:	dbfa      	blt.n	8010dd8 <__lshift+0x48>
 8010de2:	43eb      	mvns	r3, r5
 8010de4:	17db      	asrs	r3, r3, #31
 8010de6:	401d      	ands	r5, r3
 8010de8:	211f      	movs	r1, #31
 8010dea:	0023      	movs	r3, r4
 8010dec:	0038      	movs	r0, r7
 8010dee:	00ad      	lsls	r5, r5, #2
 8010df0:	1955      	adds	r5, r2, r5
 8010df2:	6922      	ldr	r2, [r4, #16]
 8010df4:	3314      	adds	r3, #20
 8010df6:	0092      	lsls	r2, r2, #2
 8010df8:	4008      	ands	r0, r1
 8010dfa:	4684      	mov	ip, r0
 8010dfc:	189a      	adds	r2, r3, r2
 8010dfe:	420f      	tst	r7, r1
 8010e00:	d02a      	beq.n	8010e58 <__lshift+0xc8>
 8010e02:	3101      	adds	r1, #1
 8010e04:	1a09      	subs	r1, r1, r0
 8010e06:	9105      	str	r1, [sp, #20]
 8010e08:	2100      	movs	r1, #0
 8010e0a:	9503      	str	r5, [sp, #12]
 8010e0c:	4667      	mov	r7, ip
 8010e0e:	6818      	ldr	r0, [r3, #0]
 8010e10:	40b8      	lsls	r0, r7
 8010e12:	4301      	orrs	r1, r0
 8010e14:	9803      	ldr	r0, [sp, #12]
 8010e16:	c002      	stmia	r0!, {r1}
 8010e18:	cb02      	ldmia	r3!, {r1}
 8010e1a:	9003      	str	r0, [sp, #12]
 8010e1c:	9805      	ldr	r0, [sp, #20]
 8010e1e:	40c1      	lsrs	r1, r0
 8010e20:	429a      	cmp	r2, r3
 8010e22:	d8f3      	bhi.n	8010e0c <__lshift+0x7c>
 8010e24:	0020      	movs	r0, r4
 8010e26:	3015      	adds	r0, #21
 8010e28:	2304      	movs	r3, #4
 8010e2a:	4282      	cmp	r2, r0
 8010e2c:	d304      	bcc.n	8010e38 <__lshift+0xa8>
 8010e2e:	1b13      	subs	r3, r2, r4
 8010e30:	3b15      	subs	r3, #21
 8010e32:	089b      	lsrs	r3, r3, #2
 8010e34:	3301      	adds	r3, #1
 8010e36:	009b      	lsls	r3, r3, #2
 8010e38:	50e9      	str	r1, [r5, r3]
 8010e3a:	2900      	cmp	r1, #0
 8010e3c:	d002      	beq.n	8010e44 <__lshift+0xb4>
 8010e3e:	9b02      	ldr	r3, [sp, #8]
 8010e40:	3302      	adds	r3, #2
 8010e42:	9301      	str	r3, [sp, #4]
 8010e44:	9b01      	ldr	r3, [sp, #4]
 8010e46:	9804      	ldr	r0, [sp, #16]
 8010e48:	3b01      	subs	r3, #1
 8010e4a:	0021      	movs	r1, r4
 8010e4c:	6133      	str	r3, [r6, #16]
 8010e4e:	f7ff fd81 	bl	8010954 <_Bfree>
 8010e52:	0030      	movs	r0, r6
 8010e54:	b007      	add	sp, #28
 8010e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e58:	cb02      	ldmia	r3!, {r1}
 8010e5a:	c502      	stmia	r5!, {r1}
 8010e5c:	429a      	cmp	r2, r3
 8010e5e:	d8fb      	bhi.n	8010e58 <__lshift+0xc8>
 8010e60:	e7f0      	b.n	8010e44 <__lshift+0xb4>
 8010e62:	46c0      	nop			; (mov r8, r8)
 8010e64:	08013b71 	.word	0x08013b71
 8010e68:	08013c13 	.word	0x08013c13

08010e6c <__mcmp>:
 8010e6c:	6902      	ldr	r2, [r0, #16]
 8010e6e:	690b      	ldr	r3, [r1, #16]
 8010e70:	b530      	push	{r4, r5, lr}
 8010e72:	0004      	movs	r4, r0
 8010e74:	1ad0      	subs	r0, r2, r3
 8010e76:	429a      	cmp	r2, r3
 8010e78:	d10d      	bne.n	8010e96 <__mcmp+0x2a>
 8010e7a:	009b      	lsls	r3, r3, #2
 8010e7c:	3414      	adds	r4, #20
 8010e7e:	3114      	adds	r1, #20
 8010e80:	18e2      	adds	r2, r4, r3
 8010e82:	18c9      	adds	r1, r1, r3
 8010e84:	3a04      	subs	r2, #4
 8010e86:	3904      	subs	r1, #4
 8010e88:	6815      	ldr	r5, [r2, #0]
 8010e8a:	680b      	ldr	r3, [r1, #0]
 8010e8c:	429d      	cmp	r5, r3
 8010e8e:	d003      	beq.n	8010e98 <__mcmp+0x2c>
 8010e90:	2001      	movs	r0, #1
 8010e92:	429d      	cmp	r5, r3
 8010e94:	d303      	bcc.n	8010e9e <__mcmp+0x32>
 8010e96:	bd30      	pop	{r4, r5, pc}
 8010e98:	4294      	cmp	r4, r2
 8010e9a:	d3f3      	bcc.n	8010e84 <__mcmp+0x18>
 8010e9c:	e7fb      	b.n	8010e96 <__mcmp+0x2a>
 8010e9e:	4240      	negs	r0, r0
 8010ea0:	e7f9      	b.n	8010e96 <__mcmp+0x2a>
	...

08010ea4 <__mdiff>:
 8010ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010ea6:	000e      	movs	r6, r1
 8010ea8:	0007      	movs	r7, r0
 8010eaa:	0011      	movs	r1, r2
 8010eac:	0030      	movs	r0, r6
 8010eae:	b087      	sub	sp, #28
 8010eb0:	0014      	movs	r4, r2
 8010eb2:	f7ff ffdb 	bl	8010e6c <__mcmp>
 8010eb6:	1e05      	subs	r5, r0, #0
 8010eb8:	d110      	bne.n	8010edc <__mdiff+0x38>
 8010eba:	0001      	movs	r1, r0
 8010ebc:	0038      	movs	r0, r7
 8010ebe:	f7ff fd05 	bl	80108cc <_Balloc>
 8010ec2:	1e02      	subs	r2, r0, #0
 8010ec4:	d104      	bne.n	8010ed0 <__mdiff+0x2c>
 8010ec6:	4b40      	ldr	r3, [pc, #256]	; (8010fc8 <__mdiff+0x124>)
 8010ec8:	4940      	ldr	r1, [pc, #256]	; (8010fcc <__mdiff+0x128>)
 8010eca:	4841      	ldr	r0, [pc, #260]	; (8010fd0 <__mdiff+0x12c>)
 8010ecc:	f000 fdfe 	bl	8011acc <__assert_func>
 8010ed0:	2301      	movs	r3, #1
 8010ed2:	6145      	str	r5, [r0, #20]
 8010ed4:	6103      	str	r3, [r0, #16]
 8010ed6:	0010      	movs	r0, r2
 8010ed8:	b007      	add	sp, #28
 8010eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010edc:	2301      	movs	r3, #1
 8010ede:	9301      	str	r3, [sp, #4]
 8010ee0:	2800      	cmp	r0, #0
 8010ee2:	db04      	blt.n	8010eee <__mdiff+0x4a>
 8010ee4:	0023      	movs	r3, r4
 8010ee6:	0034      	movs	r4, r6
 8010ee8:	001e      	movs	r6, r3
 8010eea:	2300      	movs	r3, #0
 8010eec:	9301      	str	r3, [sp, #4]
 8010eee:	0038      	movs	r0, r7
 8010ef0:	6861      	ldr	r1, [r4, #4]
 8010ef2:	f7ff fceb 	bl	80108cc <_Balloc>
 8010ef6:	1e02      	subs	r2, r0, #0
 8010ef8:	d103      	bne.n	8010f02 <__mdiff+0x5e>
 8010efa:	2190      	movs	r1, #144	; 0x90
 8010efc:	4b32      	ldr	r3, [pc, #200]	; (8010fc8 <__mdiff+0x124>)
 8010efe:	0089      	lsls	r1, r1, #2
 8010f00:	e7e3      	b.n	8010eca <__mdiff+0x26>
 8010f02:	9b01      	ldr	r3, [sp, #4]
 8010f04:	2700      	movs	r7, #0
 8010f06:	60c3      	str	r3, [r0, #12]
 8010f08:	6920      	ldr	r0, [r4, #16]
 8010f0a:	3414      	adds	r4, #20
 8010f0c:	9401      	str	r4, [sp, #4]
 8010f0e:	9b01      	ldr	r3, [sp, #4]
 8010f10:	0084      	lsls	r4, r0, #2
 8010f12:	191b      	adds	r3, r3, r4
 8010f14:	0034      	movs	r4, r6
 8010f16:	9302      	str	r3, [sp, #8]
 8010f18:	6933      	ldr	r3, [r6, #16]
 8010f1a:	3414      	adds	r4, #20
 8010f1c:	0099      	lsls	r1, r3, #2
 8010f1e:	1863      	adds	r3, r4, r1
 8010f20:	9303      	str	r3, [sp, #12]
 8010f22:	0013      	movs	r3, r2
 8010f24:	3314      	adds	r3, #20
 8010f26:	469c      	mov	ip, r3
 8010f28:	9305      	str	r3, [sp, #20]
 8010f2a:	9b01      	ldr	r3, [sp, #4]
 8010f2c:	9304      	str	r3, [sp, #16]
 8010f2e:	9b04      	ldr	r3, [sp, #16]
 8010f30:	cc02      	ldmia	r4!, {r1}
 8010f32:	cb20      	ldmia	r3!, {r5}
 8010f34:	9304      	str	r3, [sp, #16]
 8010f36:	b2ab      	uxth	r3, r5
 8010f38:	19df      	adds	r7, r3, r7
 8010f3a:	b28b      	uxth	r3, r1
 8010f3c:	1afb      	subs	r3, r7, r3
 8010f3e:	0c09      	lsrs	r1, r1, #16
 8010f40:	0c2d      	lsrs	r5, r5, #16
 8010f42:	1a6d      	subs	r5, r5, r1
 8010f44:	1419      	asrs	r1, r3, #16
 8010f46:	186d      	adds	r5, r5, r1
 8010f48:	4661      	mov	r1, ip
 8010f4a:	142f      	asrs	r7, r5, #16
 8010f4c:	b29b      	uxth	r3, r3
 8010f4e:	042d      	lsls	r5, r5, #16
 8010f50:	432b      	orrs	r3, r5
 8010f52:	c108      	stmia	r1!, {r3}
 8010f54:	9b03      	ldr	r3, [sp, #12]
 8010f56:	468c      	mov	ip, r1
 8010f58:	42a3      	cmp	r3, r4
 8010f5a:	d8e8      	bhi.n	8010f2e <__mdiff+0x8a>
 8010f5c:	0031      	movs	r1, r6
 8010f5e:	9c03      	ldr	r4, [sp, #12]
 8010f60:	3115      	adds	r1, #21
 8010f62:	2304      	movs	r3, #4
 8010f64:	428c      	cmp	r4, r1
 8010f66:	d304      	bcc.n	8010f72 <__mdiff+0xce>
 8010f68:	1ba3      	subs	r3, r4, r6
 8010f6a:	3b15      	subs	r3, #21
 8010f6c:	089b      	lsrs	r3, r3, #2
 8010f6e:	3301      	adds	r3, #1
 8010f70:	009b      	lsls	r3, r3, #2
 8010f72:	9901      	ldr	r1, [sp, #4]
 8010f74:	18cc      	adds	r4, r1, r3
 8010f76:	9905      	ldr	r1, [sp, #20]
 8010f78:	0026      	movs	r6, r4
 8010f7a:	18cb      	adds	r3, r1, r3
 8010f7c:	469c      	mov	ip, r3
 8010f7e:	9902      	ldr	r1, [sp, #8]
 8010f80:	428e      	cmp	r6, r1
 8010f82:	d310      	bcc.n	8010fa6 <__mdiff+0x102>
 8010f84:	9e02      	ldr	r6, [sp, #8]
 8010f86:	1ee1      	subs	r1, r4, #3
 8010f88:	2500      	movs	r5, #0
 8010f8a:	428e      	cmp	r6, r1
 8010f8c:	d304      	bcc.n	8010f98 <__mdiff+0xf4>
 8010f8e:	0031      	movs	r1, r6
 8010f90:	3103      	adds	r1, #3
 8010f92:	1b0c      	subs	r4, r1, r4
 8010f94:	08a4      	lsrs	r4, r4, #2
 8010f96:	00a5      	lsls	r5, r4, #2
 8010f98:	195b      	adds	r3, r3, r5
 8010f9a:	3b04      	subs	r3, #4
 8010f9c:	6819      	ldr	r1, [r3, #0]
 8010f9e:	2900      	cmp	r1, #0
 8010fa0:	d00f      	beq.n	8010fc2 <__mdiff+0x11e>
 8010fa2:	6110      	str	r0, [r2, #16]
 8010fa4:	e797      	b.n	8010ed6 <__mdiff+0x32>
 8010fa6:	ce02      	ldmia	r6!, {r1}
 8010fa8:	b28d      	uxth	r5, r1
 8010faa:	19ed      	adds	r5, r5, r7
 8010fac:	0c0f      	lsrs	r7, r1, #16
 8010fae:	1429      	asrs	r1, r5, #16
 8010fb0:	1879      	adds	r1, r7, r1
 8010fb2:	140f      	asrs	r7, r1, #16
 8010fb4:	b2ad      	uxth	r5, r5
 8010fb6:	0409      	lsls	r1, r1, #16
 8010fb8:	430d      	orrs	r5, r1
 8010fba:	4661      	mov	r1, ip
 8010fbc:	c120      	stmia	r1!, {r5}
 8010fbe:	468c      	mov	ip, r1
 8010fc0:	e7dd      	b.n	8010f7e <__mdiff+0xda>
 8010fc2:	3801      	subs	r0, #1
 8010fc4:	e7e9      	b.n	8010f9a <__mdiff+0xf6>
 8010fc6:	46c0      	nop			; (mov r8, r8)
 8010fc8:	08013b71 	.word	0x08013b71
 8010fcc:	00000232 	.word	0x00000232
 8010fd0:	08013c13 	.word	0x08013c13

08010fd4 <__ulp>:
 8010fd4:	4b0f      	ldr	r3, [pc, #60]	; (8011014 <__ulp+0x40>)
 8010fd6:	4019      	ands	r1, r3
 8010fd8:	4b0f      	ldr	r3, [pc, #60]	; (8011018 <__ulp+0x44>)
 8010fda:	18c9      	adds	r1, r1, r3
 8010fdc:	2900      	cmp	r1, #0
 8010fde:	dd04      	ble.n	8010fea <__ulp+0x16>
 8010fe0:	2200      	movs	r2, #0
 8010fe2:	000b      	movs	r3, r1
 8010fe4:	0010      	movs	r0, r2
 8010fe6:	0019      	movs	r1, r3
 8010fe8:	4770      	bx	lr
 8010fea:	4249      	negs	r1, r1
 8010fec:	2200      	movs	r2, #0
 8010fee:	2300      	movs	r3, #0
 8010ff0:	1509      	asrs	r1, r1, #20
 8010ff2:	2913      	cmp	r1, #19
 8010ff4:	dc04      	bgt.n	8011000 <__ulp+0x2c>
 8010ff6:	2080      	movs	r0, #128	; 0x80
 8010ff8:	0300      	lsls	r0, r0, #12
 8010ffa:	4108      	asrs	r0, r1
 8010ffc:	0003      	movs	r3, r0
 8010ffe:	e7f1      	b.n	8010fe4 <__ulp+0x10>
 8011000:	3914      	subs	r1, #20
 8011002:	2001      	movs	r0, #1
 8011004:	291e      	cmp	r1, #30
 8011006:	dc02      	bgt.n	801100e <__ulp+0x3a>
 8011008:	2080      	movs	r0, #128	; 0x80
 801100a:	0600      	lsls	r0, r0, #24
 801100c:	40c8      	lsrs	r0, r1
 801100e:	0002      	movs	r2, r0
 8011010:	e7e8      	b.n	8010fe4 <__ulp+0x10>
 8011012:	46c0      	nop			; (mov r8, r8)
 8011014:	7ff00000 	.word	0x7ff00000
 8011018:	fcc00000 	.word	0xfcc00000

0801101c <__b2d>:
 801101c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801101e:	0006      	movs	r6, r0
 8011020:	6903      	ldr	r3, [r0, #16]
 8011022:	3614      	adds	r6, #20
 8011024:	009b      	lsls	r3, r3, #2
 8011026:	18f3      	adds	r3, r6, r3
 8011028:	1f1d      	subs	r5, r3, #4
 801102a:	682c      	ldr	r4, [r5, #0]
 801102c:	000f      	movs	r7, r1
 801102e:	0020      	movs	r0, r4
 8011030:	9301      	str	r3, [sp, #4]
 8011032:	f7ff fd43 	bl	8010abc <__hi0bits>
 8011036:	2320      	movs	r3, #32
 8011038:	1a1b      	subs	r3, r3, r0
 801103a:	491f      	ldr	r1, [pc, #124]	; (80110b8 <__b2d+0x9c>)
 801103c:	603b      	str	r3, [r7, #0]
 801103e:	280a      	cmp	r0, #10
 8011040:	dc16      	bgt.n	8011070 <__b2d+0x54>
 8011042:	230b      	movs	r3, #11
 8011044:	0027      	movs	r7, r4
 8011046:	1a1b      	subs	r3, r3, r0
 8011048:	40df      	lsrs	r7, r3
 801104a:	4339      	orrs	r1, r7
 801104c:	469c      	mov	ip, r3
 801104e:	000b      	movs	r3, r1
 8011050:	2100      	movs	r1, #0
 8011052:	42ae      	cmp	r6, r5
 8011054:	d202      	bcs.n	801105c <__b2d+0x40>
 8011056:	9901      	ldr	r1, [sp, #4]
 8011058:	3908      	subs	r1, #8
 801105a:	6809      	ldr	r1, [r1, #0]
 801105c:	3015      	adds	r0, #21
 801105e:	4084      	lsls	r4, r0
 8011060:	4660      	mov	r0, ip
 8011062:	40c1      	lsrs	r1, r0
 8011064:	430c      	orrs	r4, r1
 8011066:	0022      	movs	r2, r4
 8011068:	0010      	movs	r0, r2
 801106a:	0019      	movs	r1, r3
 801106c:	b003      	add	sp, #12
 801106e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011070:	2700      	movs	r7, #0
 8011072:	42ae      	cmp	r6, r5
 8011074:	d202      	bcs.n	801107c <__b2d+0x60>
 8011076:	9d01      	ldr	r5, [sp, #4]
 8011078:	3d08      	subs	r5, #8
 801107a:	682f      	ldr	r7, [r5, #0]
 801107c:	230b      	movs	r3, #11
 801107e:	425b      	negs	r3, r3
 8011080:	469c      	mov	ip, r3
 8011082:	4484      	add	ip, r0
 8011084:	280b      	cmp	r0, #11
 8011086:	d013      	beq.n	80110b0 <__b2d+0x94>
 8011088:	4663      	mov	r3, ip
 801108a:	2020      	movs	r0, #32
 801108c:	409c      	lsls	r4, r3
 801108e:	1ac0      	subs	r0, r0, r3
 8011090:	003b      	movs	r3, r7
 8011092:	40c3      	lsrs	r3, r0
 8011094:	431c      	orrs	r4, r3
 8011096:	4321      	orrs	r1, r4
 8011098:	000b      	movs	r3, r1
 801109a:	2100      	movs	r1, #0
 801109c:	42b5      	cmp	r5, r6
 801109e:	d901      	bls.n	80110a4 <__b2d+0x88>
 80110a0:	3d04      	subs	r5, #4
 80110a2:	6829      	ldr	r1, [r5, #0]
 80110a4:	4664      	mov	r4, ip
 80110a6:	40c1      	lsrs	r1, r0
 80110a8:	40a7      	lsls	r7, r4
 80110aa:	430f      	orrs	r7, r1
 80110ac:	003a      	movs	r2, r7
 80110ae:	e7db      	b.n	8011068 <__b2d+0x4c>
 80110b0:	4321      	orrs	r1, r4
 80110b2:	000b      	movs	r3, r1
 80110b4:	e7fa      	b.n	80110ac <__b2d+0x90>
 80110b6:	46c0      	nop			; (mov r8, r8)
 80110b8:	3ff00000 	.word	0x3ff00000

080110bc <__d2b>:
 80110bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80110be:	2101      	movs	r1, #1
 80110c0:	0014      	movs	r4, r2
 80110c2:	001e      	movs	r6, r3
 80110c4:	9f08      	ldr	r7, [sp, #32]
 80110c6:	f7ff fc01 	bl	80108cc <_Balloc>
 80110ca:	1e05      	subs	r5, r0, #0
 80110cc:	d105      	bne.n	80110da <__d2b+0x1e>
 80110ce:	0002      	movs	r2, r0
 80110d0:	4b26      	ldr	r3, [pc, #152]	; (801116c <__d2b+0xb0>)
 80110d2:	4927      	ldr	r1, [pc, #156]	; (8011170 <__d2b+0xb4>)
 80110d4:	4827      	ldr	r0, [pc, #156]	; (8011174 <__d2b+0xb8>)
 80110d6:	f000 fcf9 	bl	8011acc <__assert_func>
 80110da:	0333      	lsls	r3, r6, #12
 80110dc:	0076      	lsls	r6, r6, #1
 80110de:	0b1b      	lsrs	r3, r3, #12
 80110e0:	0d76      	lsrs	r6, r6, #21
 80110e2:	d124      	bne.n	801112e <__d2b+0x72>
 80110e4:	9301      	str	r3, [sp, #4]
 80110e6:	2c00      	cmp	r4, #0
 80110e8:	d027      	beq.n	801113a <__d2b+0x7e>
 80110ea:	4668      	mov	r0, sp
 80110ec:	9400      	str	r4, [sp, #0]
 80110ee:	f7ff fcff 	bl	8010af0 <__lo0bits>
 80110f2:	9c00      	ldr	r4, [sp, #0]
 80110f4:	2800      	cmp	r0, #0
 80110f6:	d01e      	beq.n	8011136 <__d2b+0x7a>
 80110f8:	9b01      	ldr	r3, [sp, #4]
 80110fa:	2120      	movs	r1, #32
 80110fc:	001a      	movs	r2, r3
 80110fe:	1a09      	subs	r1, r1, r0
 8011100:	408a      	lsls	r2, r1
 8011102:	40c3      	lsrs	r3, r0
 8011104:	4322      	orrs	r2, r4
 8011106:	616a      	str	r2, [r5, #20]
 8011108:	9301      	str	r3, [sp, #4]
 801110a:	9c01      	ldr	r4, [sp, #4]
 801110c:	61ac      	str	r4, [r5, #24]
 801110e:	1e63      	subs	r3, r4, #1
 8011110:	419c      	sbcs	r4, r3
 8011112:	3401      	adds	r4, #1
 8011114:	612c      	str	r4, [r5, #16]
 8011116:	2e00      	cmp	r6, #0
 8011118:	d018      	beq.n	801114c <__d2b+0x90>
 801111a:	4b17      	ldr	r3, [pc, #92]	; (8011178 <__d2b+0xbc>)
 801111c:	18f6      	adds	r6, r6, r3
 801111e:	2335      	movs	r3, #53	; 0x35
 8011120:	1836      	adds	r6, r6, r0
 8011122:	1a18      	subs	r0, r3, r0
 8011124:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011126:	603e      	str	r6, [r7, #0]
 8011128:	6018      	str	r0, [r3, #0]
 801112a:	0028      	movs	r0, r5
 801112c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801112e:	2280      	movs	r2, #128	; 0x80
 8011130:	0352      	lsls	r2, r2, #13
 8011132:	4313      	orrs	r3, r2
 8011134:	e7d6      	b.n	80110e4 <__d2b+0x28>
 8011136:	616c      	str	r4, [r5, #20]
 8011138:	e7e7      	b.n	801110a <__d2b+0x4e>
 801113a:	a801      	add	r0, sp, #4
 801113c:	f7ff fcd8 	bl	8010af0 <__lo0bits>
 8011140:	2401      	movs	r4, #1
 8011142:	9b01      	ldr	r3, [sp, #4]
 8011144:	612c      	str	r4, [r5, #16]
 8011146:	616b      	str	r3, [r5, #20]
 8011148:	3020      	adds	r0, #32
 801114a:	e7e4      	b.n	8011116 <__d2b+0x5a>
 801114c:	4b0b      	ldr	r3, [pc, #44]	; (801117c <__d2b+0xc0>)
 801114e:	18c0      	adds	r0, r0, r3
 8011150:	4b0b      	ldr	r3, [pc, #44]	; (8011180 <__d2b+0xc4>)
 8011152:	6038      	str	r0, [r7, #0]
 8011154:	18e3      	adds	r3, r4, r3
 8011156:	009b      	lsls	r3, r3, #2
 8011158:	18eb      	adds	r3, r5, r3
 801115a:	6958      	ldr	r0, [r3, #20]
 801115c:	f7ff fcae 	bl	8010abc <__hi0bits>
 8011160:	0164      	lsls	r4, r4, #5
 8011162:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011164:	1a24      	subs	r4, r4, r0
 8011166:	601c      	str	r4, [r3, #0]
 8011168:	e7df      	b.n	801112a <__d2b+0x6e>
 801116a:	46c0      	nop			; (mov r8, r8)
 801116c:	08013b71 	.word	0x08013b71
 8011170:	0000030a 	.word	0x0000030a
 8011174:	08013c13 	.word	0x08013c13
 8011178:	fffffbcd 	.word	0xfffffbcd
 801117c:	fffffbce 	.word	0xfffffbce
 8011180:	3fffffff 	.word	0x3fffffff

08011184 <__ratio>:
 8011184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011186:	b087      	sub	sp, #28
 8011188:	000f      	movs	r7, r1
 801118a:	a904      	add	r1, sp, #16
 801118c:	0006      	movs	r6, r0
 801118e:	f7ff ff45 	bl	801101c <__b2d>
 8011192:	9000      	str	r0, [sp, #0]
 8011194:	9101      	str	r1, [sp, #4]
 8011196:	9c00      	ldr	r4, [sp, #0]
 8011198:	9d01      	ldr	r5, [sp, #4]
 801119a:	0038      	movs	r0, r7
 801119c:	a905      	add	r1, sp, #20
 801119e:	f7ff ff3d 	bl	801101c <__b2d>
 80111a2:	9002      	str	r0, [sp, #8]
 80111a4:	9103      	str	r1, [sp, #12]
 80111a6:	9a02      	ldr	r2, [sp, #8]
 80111a8:	9b03      	ldr	r3, [sp, #12]
 80111aa:	6931      	ldr	r1, [r6, #16]
 80111ac:	6938      	ldr	r0, [r7, #16]
 80111ae:	9e05      	ldr	r6, [sp, #20]
 80111b0:	1a08      	subs	r0, r1, r0
 80111b2:	9904      	ldr	r1, [sp, #16]
 80111b4:	0140      	lsls	r0, r0, #5
 80111b6:	1b89      	subs	r1, r1, r6
 80111b8:	1841      	adds	r1, r0, r1
 80111ba:	0508      	lsls	r0, r1, #20
 80111bc:	2900      	cmp	r1, #0
 80111be:	dd07      	ble.n	80111d0 <__ratio+0x4c>
 80111c0:	9901      	ldr	r1, [sp, #4]
 80111c2:	1845      	adds	r5, r0, r1
 80111c4:	0020      	movs	r0, r4
 80111c6:	0029      	movs	r1, r5
 80111c8:	f7f0 f82c 	bl	8001224 <__aeabi_ddiv>
 80111cc:	b007      	add	sp, #28
 80111ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80111d0:	9903      	ldr	r1, [sp, #12]
 80111d2:	1a0b      	subs	r3, r1, r0
 80111d4:	e7f6      	b.n	80111c4 <__ratio+0x40>
	...

080111d8 <_mprec_log10>:
 80111d8:	b510      	push	{r4, lr}
 80111da:	0004      	movs	r4, r0
 80111dc:	2817      	cmp	r0, #23
 80111de:	dc05      	bgt.n	80111ec <_mprec_log10+0x14>
 80111e0:	4c07      	ldr	r4, [pc, #28]	; (8011200 <_mprec_log10+0x28>)
 80111e2:	00c0      	lsls	r0, r0, #3
 80111e4:	1824      	adds	r4, r4, r0
 80111e6:	6820      	ldr	r0, [r4, #0]
 80111e8:	6861      	ldr	r1, [r4, #4]
 80111ea:	bd10      	pop	{r4, pc}
 80111ec:	2000      	movs	r0, #0
 80111ee:	4905      	ldr	r1, [pc, #20]	; (8011204 <_mprec_log10+0x2c>)
 80111f0:	2200      	movs	r2, #0
 80111f2:	4b05      	ldr	r3, [pc, #20]	; (8011208 <_mprec_log10+0x30>)
 80111f4:	3c01      	subs	r4, #1
 80111f6:	f7f0 fc17 	bl	8001a28 <__aeabi_dmul>
 80111fa:	2c00      	cmp	r4, #0
 80111fc:	d1f8      	bne.n	80111f0 <_mprec_log10+0x18>
 80111fe:	e7f4      	b.n	80111ea <_mprec_log10+0x12>
 8011200:	08013c98 	.word	0x08013c98
 8011204:	3ff00000 	.word	0x3ff00000
 8011208:	40240000 	.word	0x40240000

0801120c <__copybits>:
 801120c:	b570      	push	{r4, r5, r6, lr}
 801120e:	0014      	movs	r4, r2
 8011210:	0005      	movs	r5, r0
 8011212:	3901      	subs	r1, #1
 8011214:	6913      	ldr	r3, [r2, #16]
 8011216:	1149      	asrs	r1, r1, #5
 8011218:	3101      	adds	r1, #1
 801121a:	0089      	lsls	r1, r1, #2
 801121c:	3414      	adds	r4, #20
 801121e:	009b      	lsls	r3, r3, #2
 8011220:	1841      	adds	r1, r0, r1
 8011222:	18e3      	adds	r3, r4, r3
 8011224:	42a3      	cmp	r3, r4
 8011226:	d80d      	bhi.n	8011244 <__copybits+0x38>
 8011228:	0014      	movs	r4, r2
 801122a:	3411      	adds	r4, #17
 801122c:	2500      	movs	r5, #0
 801122e:	429c      	cmp	r4, r3
 8011230:	d803      	bhi.n	801123a <__copybits+0x2e>
 8011232:	1a9b      	subs	r3, r3, r2
 8011234:	3b11      	subs	r3, #17
 8011236:	089b      	lsrs	r3, r3, #2
 8011238:	009d      	lsls	r5, r3, #2
 801123a:	2300      	movs	r3, #0
 801123c:	1940      	adds	r0, r0, r5
 801123e:	4281      	cmp	r1, r0
 8011240:	d803      	bhi.n	801124a <__copybits+0x3e>
 8011242:	bd70      	pop	{r4, r5, r6, pc}
 8011244:	cc40      	ldmia	r4!, {r6}
 8011246:	c540      	stmia	r5!, {r6}
 8011248:	e7ec      	b.n	8011224 <__copybits+0x18>
 801124a:	c008      	stmia	r0!, {r3}
 801124c:	e7f7      	b.n	801123e <__copybits+0x32>

0801124e <__any_on>:
 801124e:	0002      	movs	r2, r0
 8011250:	6900      	ldr	r0, [r0, #16]
 8011252:	b510      	push	{r4, lr}
 8011254:	3214      	adds	r2, #20
 8011256:	114b      	asrs	r3, r1, #5
 8011258:	4298      	cmp	r0, r3
 801125a:	db13      	blt.n	8011284 <__any_on+0x36>
 801125c:	dd0c      	ble.n	8011278 <__any_on+0x2a>
 801125e:	241f      	movs	r4, #31
 8011260:	0008      	movs	r0, r1
 8011262:	4020      	ands	r0, r4
 8011264:	4221      	tst	r1, r4
 8011266:	d007      	beq.n	8011278 <__any_on+0x2a>
 8011268:	0099      	lsls	r1, r3, #2
 801126a:	588c      	ldr	r4, [r1, r2]
 801126c:	0021      	movs	r1, r4
 801126e:	40c1      	lsrs	r1, r0
 8011270:	4081      	lsls	r1, r0
 8011272:	2001      	movs	r0, #1
 8011274:	428c      	cmp	r4, r1
 8011276:	d104      	bne.n	8011282 <__any_on+0x34>
 8011278:	009b      	lsls	r3, r3, #2
 801127a:	18d3      	adds	r3, r2, r3
 801127c:	4293      	cmp	r3, r2
 801127e:	d803      	bhi.n	8011288 <__any_on+0x3a>
 8011280:	2000      	movs	r0, #0
 8011282:	bd10      	pop	{r4, pc}
 8011284:	0003      	movs	r3, r0
 8011286:	e7f7      	b.n	8011278 <__any_on+0x2a>
 8011288:	3b04      	subs	r3, #4
 801128a:	6819      	ldr	r1, [r3, #0]
 801128c:	2900      	cmp	r1, #0
 801128e:	d0f5      	beq.n	801127c <__any_on+0x2e>
 8011290:	2001      	movs	r0, #1
 8011292:	e7f6      	b.n	8011282 <__any_on+0x34>

08011294 <_calloc_r>:
 8011294:	b570      	push	{r4, r5, r6, lr}
 8011296:	0c13      	lsrs	r3, r2, #16
 8011298:	0c0d      	lsrs	r5, r1, #16
 801129a:	d11e      	bne.n	80112da <_calloc_r+0x46>
 801129c:	2b00      	cmp	r3, #0
 801129e:	d10c      	bne.n	80112ba <_calloc_r+0x26>
 80112a0:	b289      	uxth	r1, r1
 80112a2:	b294      	uxth	r4, r2
 80112a4:	434c      	muls	r4, r1
 80112a6:	0021      	movs	r1, r4
 80112a8:	f000 f842 	bl	8011330 <_malloc_r>
 80112ac:	1e05      	subs	r5, r0, #0
 80112ae:	d01b      	beq.n	80112e8 <_calloc_r+0x54>
 80112b0:	0022      	movs	r2, r4
 80112b2:	2100      	movs	r1, #0
 80112b4:	f7fd fea7 	bl	800f006 <memset>
 80112b8:	e016      	b.n	80112e8 <_calloc_r+0x54>
 80112ba:	1c1d      	adds	r5, r3, #0
 80112bc:	1c0b      	adds	r3, r1, #0
 80112be:	b292      	uxth	r2, r2
 80112c0:	b289      	uxth	r1, r1
 80112c2:	b29c      	uxth	r4, r3
 80112c4:	4351      	muls	r1, r2
 80112c6:	b2ab      	uxth	r3, r5
 80112c8:	4363      	muls	r3, r4
 80112ca:	0c0c      	lsrs	r4, r1, #16
 80112cc:	191c      	adds	r4, r3, r4
 80112ce:	0c22      	lsrs	r2, r4, #16
 80112d0:	d107      	bne.n	80112e2 <_calloc_r+0x4e>
 80112d2:	0424      	lsls	r4, r4, #16
 80112d4:	b289      	uxth	r1, r1
 80112d6:	430c      	orrs	r4, r1
 80112d8:	e7e5      	b.n	80112a6 <_calloc_r+0x12>
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d101      	bne.n	80112e2 <_calloc_r+0x4e>
 80112de:	1c13      	adds	r3, r2, #0
 80112e0:	e7ed      	b.n	80112be <_calloc_r+0x2a>
 80112e2:	230c      	movs	r3, #12
 80112e4:	2500      	movs	r5, #0
 80112e6:	6003      	str	r3, [r0, #0]
 80112e8:	0028      	movs	r0, r5
 80112ea:	bd70      	pop	{r4, r5, r6, pc}

080112ec <sbrk_aligned>:
 80112ec:	b570      	push	{r4, r5, r6, lr}
 80112ee:	4e0f      	ldr	r6, [pc, #60]	; (801132c <sbrk_aligned+0x40>)
 80112f0:	000d      	movs	r5, r1
 80112f2:	6831      	ldr	r1, [r6, #0]
 80112f4:	0004      	movs	r4, r0
 80112f6:	2900      	cmp	r1, #0
 80112f8:	d102      	bne.n	8011300 <sbrk_aligned+0x14>
 80112fa:	f000 fba9 	bl	8011a50 <_sbrk_r>
 80112fe:	6030      	str	r0, [r6, #0]
 8011300:	0029      	movs	r1, r5
 8011302:	0020      	movs	r0, r4
 8011304:	f000 fba4 	bl	8011a50 <_sbrk_r>
 8011308:	1c43      	adds	r3, r0, #1
 801130a:	d00a      	beq.n	8011322 <sbrk_aligned+0x36>
 801130c:	2303      	movs	r3, #3
 801130e:	1cc5      	adds	r5, r0, #3
 8011310:	439d      	bics	r5, r3
 8011312:	42a8      	cmp	r0, r5
 8011314:	d007      	beq.n	8011326 <sbrk_aligned+0x3a>
 8011316:	1a29      	subs	r1, r5, r0
 8011318:	0020      	movs	r0, r4
 801131a:	f000 fb99 	bl	8011a50 <_sbrk_r>
 801131e:	1c43      	adds	r3, r0, #1
 8011320:	d101      	bne.n	8011326 <sbrk_aligned+0x3a>
 8011322:	2501      	movs	r5, #1
 8011324:	426d      	negs	r5, r5
 8011326:	0028      	movs	r0, r5
 8011328:	bd70      	pop	{r4, r5, r6, pc}
 801132a:	46c0      	nop			; (mov r8, r8)
 801132c:	20000da4 	.word	0x20000da4

08011330 <_malloc_r>:
 8011330:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011332:	2203      	movs	r2, #3
 8011334:	1ccb      	adds	r3, r1, #3
 8011336:	4393      	bics	r3, r2
 8011338:	3308      	adds	r3, #8
 801133a:	0006      	movs	r6, r0
 801133c:	001f      	movs	r7, r3
 801133e:	2b0c      	cmp	r3, #12
 8011340:	d232      	bcs.n	80113a8 <_malloc_r+0x78>
 8011342:	270c      	movs	r7, #12
 8011344:	42b9      	cmp	r1, r7
 8011346:	d831      	bhi.n	80113ac <_malloc_r+0x7c>
 8011348:	0030      	movs	r0, r6
 801134a:	f001 fabb 	bl	80128c4 <__malloc_lock>
 801134e:	4d32      	ldr	r5, [pc, #200]	; (8011418 <_malloc_r+0xe8>)
 8011350:	682b      	ldr	r3, [r5, #0]
 8011352:	001c      	movs	r4, r3
 8011354:	2c00      	cmp	r4, #0
 8011356:	d12e      	bne.n	80113b6 <_malloc_r+0x86>
 8011358:	0039      	movs	r1, r7
 801135a:	0030      	movs	r0, r6
 801135c:	f7ff ffc6 	bl	80112ec <sbrk_aligned>
 8011360:	0004      	movs	r4, r0
 8011362:	1c43      	adds	r3, r0, #1
 8011364:	d11e      	bne.n	80113a4 <_malloc_r+0x74>
 8011366:	682c      	ldr	r4, [r5, #0]
 8011368:	0025      	movs	r5, r4
 801136a:	2d00      	cmp	r5, #0
 801136c:	d14a      	bne.n	8011404 <_malloc_r+0xd4>
 801136e:	6823      	ldr	r3, [r4, #0]
 8011370:	0029      	movs	r1, r5
 8011372:	18e3      	adds	r3, r4, r3
 8011374:	0030      	movs	r0, r6
 8011376:	9301      	str	r3, [sp, #4]
 8011378:	f000 fb6a 	bl	8011a50 <_sbrk_r>
 801137c:	9b01      	ldr	r3, [sp, #4]
 801137e:	4283      	cmp	r3, r0
 8011380:	d143      	bne.n	801140a <_malloc_r+0xda>
 8011382:	6823      	ldr	r3, [r4, #0]
 8011384:	3703      	adds	r7, #3
 8011386:	1aff      	subs	r7, r7, r3
 8011388:	2303      	movs	r3, #3
 801138a:	439f      	bics	r7, r3
 801138c:	3708      	adds	r7, #8
 801138e:	2f0c      	cmp	r7, #12
 8011390:	d200      	bcs.n	8011394 <_malloc_r+0x64>
 8011392:	270c      	movs	r7, #12
 8011394:	0039      	movs	r1, r7
 8011396:	0030      	movs	r0, r6
 8011398:	f7ff ffa8 	bl	80112ec <sbrk_aligned>
 801139c:	1c43      	adds	r3, r0, #1
 801139e:	d034      	beq.n	801140a <_malloc_r+0xda>
 80113a0:	6823      	ldr	r3, [r4, #0]
 80113a2:	19df      	adds	r7, r3, r7
 80113a4:	6027      	str	r7, [r4, #0]
 80113a6:	e013      	b.n	80113d0 <_malloc_r+0xa0>
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	dacb      	bge.n	8011344 <_malloc_r+0x14>
 80113ac:	230c      	movs	r3, #12
 80113ae:	2500      	movs	r5, #0
 80113b0:	6033      	str	r3, [r6, #0]
 80113b2:	0028      	movs	r0, r5
 80113b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80113b6:	6822      	ldr	r2, [r4, #0]
 80113b8:	1bd1      	subs	r1, r2, r7
 80113ba:	d420      	bmi.n	80113fe <_malloc_r+0xce>
 80113bc:	290b      	cmp	r1, #11
 80113be:	d917      	bls.n	80113f0 <_malloc_r+0xc0>
 80113c0:	19e2      	adds	r2, r4, r7
 80113c2:	6027      	str	r7, [r4, #0]
 80113c4:	42a3      	cmp	r3, r4
 80113c6:	d111      	bne.n	80113ec <_malloc_r+0xbc>
 80113c8:	602a      	str	r2, [r5, #0]
 80113ca:	6863      	ldr	r3, [r4, #4]
 80113cc:	6011      	str	r1, [r2, #0]
 80113ce:	6053      	str	r3, [r2, #4]
 80113d0:	0030      	movs	r0, r6
 80113d2:	0025      	movs	r5, r4
 80113d4:	f001 fa7e 	bl	80128d4 <__malloc_unlock>
 80113d8:	2207      	movs	r2, #7
 80113da:	350b      	adds	r5, #11
 80113dc:	1d23      	adds	r3, r4, #4
 80113de:	4395      	bics	r5, r2
 80113e0:	1aea      	subs	r2, r5, r3
 80113e2:	429d      	cmp	r5, r3
 80113e4:	d0e5      	beq.n	80113b2 <_malloc_r+0x82>
 80113e6:	1b5b      	subs	r3, r3, r5
 80113e8:	50a3      	str	r3, [r4, r2]
 80113ea:	e7e2      	b.n	80113b2 <_malloc_r+0x82>
 80113ec:	605a      	str	r2, [r3, #4]
 80113ee:	e7ec      	b.n	80113ca <_malloc_r+0x9a>
 80113f0:	6862      	ldr	r2, [r4, #4]
 80113f2:	42a3      	cmp	r3, r4
 80113f4:	d101      	bne.n	80113fa <_malloc_r+0xca>
 80113f6:	602a      	str	r2, [r5, #0]
 80113f8:	e7ea      	b.n	80113d0 <_malloc_r+0xa0>
 80113fa:	605a      	str	r2, [r3, #4]
 80113fc:	e7e8      	b.n	80113d0 <_malloc_r+0xa0>
 80113fe:	0023      	movs	r3, r4
 8011400:	6864      	ldr	r4, [r4, #4]
 8011402:	e7a7      	b.n	8011354 <_malloc_r+0x24>
 8011404:	002c      	movs	r4, r5
 8011406:	686d      	ldr	r5, [r5, #4]
 8011408:	e7af      	b.n	801136a <_malloc_r+0x3a>
 801140a:	230c      	movs	r3, #12
 801140c:	0030      	movs	r0, r6
 801140e:	6033      	str	r3, [r6, #0]
 8011410:	f001 fa60 	bl	80128d4 <__malloc_unlock>
 8011414:	e7cd      	b.n	80113b2 <_malloc_r+0x82>
 8011416:	46c0      	nop			; (mov r8, r8)
 8011418:	20000da0 	.word	0x20000da0

0801141c <_realloc_r>:
 801141c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801141e:	0007      	movs	r7, r0
 8011420:	000e      	movs	r6, r1
 8011422:	0014      	movs	r4, r2
 8011424:	2900      	cmp	r1, #0
 8011426:	d105      	bne.n	8011434 <_realloc_r+0x18>
 8011428:	0011      	movs	r1, r2
 801142a:	f7ff ff81 	bl	8011330 <_malloc_r>
 801142e:	0005      	movs	r5, r0
 8011430:	0028      	movs	r0, r5
 8011432:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011434:	2a00      	cmp	r2, #0
 8011436:	d103      	bne.n	8011440 <_realloc_r+0x24>
 8011438:	f001 fa54 	bl	80128e4 <_free_r>
 801143c:	0025      	movs	r5, r4
 801143e:	e7f7      	b.n	8011430 <_realloc_r+0x14>
 8011440:	f001 fa9a 	bl	8012978 <_malloc_usable_size_r>
 8011444:	9001      	str	r0, [sp, #4]
 8011446:	4284      	cmp	r4, r0
 8011448:	d803      	bhi.n	8011452 <_realloc_r+0x36>
 801144a:	0035      	movs	r5, r6
 801144c:	0843      	lsrs	r3, r0, #1
 801144e:	42a3      	cmp	r3, r4
 8011450:	d3ee      	bcc.n	8011430 <_realloc_r+0x14>
 8011452:	0021      	movs	r1, r4
 8011454:	0038      	movs	r0, r7
 8011456:	f7ff ff6b 	bl	8011330 <_malloc_r>
 801145a:	1e05      	subs	r5, r0, #0
 801145c:	d0e8      	beq.n	8011430 <_realloc_r+0x14>
 801145e:	9b01      	ldr	r3, [sp, #4]
 8011460:	0022      	movs	r2, r4
 8011462:	429c      	cmp	r4, r3
 8011464:	d900      	bls.n	8011468 <_realloc_r+0x4c>
 8011466:	001a      	movs	r2, r3
 8011468:	0031      	movs	r1, r6
 801146a:	0028      	movs	r0, r5
 801146c:	f7fd fdc2 	bl	800eff4 <memcpy>
 8011470:	0031      	movs	r1, r6
 8011472:	0038      	movs	r0, r7
 8011474:	f001 fa36 	bl	80128e4 <_free_r>
 8011478:	e7da      	b.n	8011430 <_realloc_r+0x14>
	...

0801147c <__ssputs_r>:
 801147c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801147e:	688e      	ldr	r6, [r1, #8]
 8011480:	b085      	sub	sp, #20
 8011482:	0007      	movs	r7, r0
 8011484:	000c      	movs	r4, r1
 8011486:	9203      	str	r2, [sp, #12]
 8011488:	9301      	str	r3, [sp, #4]
 801148a:	429e      	cmp	r6, r3
 801148c:	d83c      	bhi.n	8011508 <__ssputs_r+0x8c>
 801148e:	2390      	movs	r3, #144	; 0x90
 8011490:	898a      	ldrh	r2, [r1, #12]
 8011492:	00db      	lsls	r3, r3, #3
 8011494:	421a      	tst	r2, r3
 8011496:	d034      	beq.n	8011502 <__ssputs_r+0x86>
 8011498:	6909      	ldr	r1, [r1, #16]
 801149a:	6823      	ldr	r3, [r4, #0]
 801149c:	6960      	ldr	r0, [r4, #20]
 801149e:	1a5b      	subs	r3, r3, r1
 80114a0:	9302      	str	r3, [sp, #8]
 80114a2:	2303      	movs	r3, #3
 80114a4:	4343      	muls	r3, r0
 80114a6:	0fdd      	lsrs	r5, r3, #31
 80114a8:	18ed      	adds	r5, r5, r3
 80114aa:	9b01      	ldr	r3, [sp, #4]
 80114ac:	9802      	ldr	r0, [sp, #8]
 80114ae:	3301      	adds	r3, #1
 80114b0:	181b      	adds	r3, r3, r0
 80114b2:	106d      	asrs	r5, r5, #1
 80114b4:	42ab      	cmp	r3, r5
 80114b6:	d900      	bls.n	80114ba <__ssputs_r+0x3e>
 80114b8:	001d      	movs	r5, r3
 80114ba:	0553      	lsls	r3, r2, #21
 80114bc:	d532      	bpl.n	8011524 <__ssputs_r+0xa8>
 80114be:	0029      	movs	r1, r5
 80114c0:	0038      	movs	r0, r7
 80114c2:	f7ff ff35 	bl	8011330 <_malloc_r>
 80114c6:	1e06      	subs	r6, r0, #0
 80114c8:	d109      	bne.n	80114de <__ssputs_r+0x62>
 80114ca:	230c      	movs	r3, #12
 80114cc:	603b      	str	r3, [r7, #0]
 80114ce:	2340      	movs	r3, #64	; 0x40
 80114d0:	2001      	movs	r0, #1
 80114d2:	89a2      	ldrh	r2, [r4, #12]
 80114d4:	4240      	negs	r0, r0
 80114d6:	4313      	orrs	r3, r2
 80114d8:	81a3      	strh	r3, [r4, #12]
 80114da:	b005      	add	sp, #20
 80114dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80114de:	9a02      	ldr	r2, [sp, #8]
 80114e0:	6921      	ldr	r1, [r4, #16]
 80114e2:	f7fd fd87 	bl	800eff4 <memcpy>
 80114e6:	89a3      	ldrh	r3, [r4, #12]
 80114e8:	4a14      	ldr	r2, [pc, #80]	; (801153c <__ssputs_r+0xc0>)
 80114ea:	401a      	ands	r2, r3
 80114ec:	2380      	movs	r3, #128	; 0x80
 80114ee:	4313      	orrs	r3, r2
 80114f0:	81a3      	strh	r3, [r4, #12]
 80114f2:	9b02      	ldr	r3, [sp, #8]
 80114f4:	6126      	str	r6, [r4, #16]
 80114f6:	18f6      	adds	r6, r6, r3
 80114f8:	6026      	str	r6, [r4, #0]
 80114fa:	6165      	str	r5, [r4, #20]
 80114fc:	9e01      	ldr	r6, [sp, #4]
 80114fe:	1aed      	subs	r5, r5, r3
 8011500:	60a5      	str	r5, [r4, #8]
 8011502:	9b01      	ldr	r3, [sp, #4]
 8011504:	429e      	cmp	r6, r3
 8011506:	d900      	bls.n	801150a <__ssputs_r+0x8e>
 8011508:	9e01      	ldr	r6, [sp, #4]
 801150a:	0032      	movs	r2, r6
 801150c:	9903      	ldr	r1, [sp, #12]
 801150e:	6820      	ldr	r0, [r4, #0]
 8011510:	f001 f9c5 	bl	801289e <memmove>
 8011514:	68a3      	ldr	r3, [r4, #8]
 8011516:	2000      	movs	r0, #0
 8011518:	1b9b      	subs	r3, r3, r6
 801151a:	60a3      	str	r3, [r4, #8]
 801151c:	6823      	ldr	r3, [r4, #0]
 801151e:	199e      	adds	r6, r3, r6
 8011520:	6026      	str	r6, [r4, #0]
 8011522:	e7da      	b.n	80114da <__ssputs_r+0x5e>
 8011524:	002a      	movs	r2, r5
 8011526:	0038      	movs	r0, r7
 8011528:	f7ff ff78 	bl	801141c <_realloc_r>
 801152c:	1e06      	subs	r6, r0, #0
 801152e:	d1e0      	bne.n	80114f2 <__ssputs_r+0x76>
 8011530:	0038      	movs	r0, r7
 8011532:	6921      	ldr	r1, [r4, #16]
 8011534:	f001 f9d6 	bl	80128e4 <_free_r>
 8011538:	e7c7      	b.n	80114ca <__ssputs_r+0x4e>
 801153a:	46c0      	nop			; (mov r8, r8)
 801153c:	fffffb7f 	.word	0xfffffb7f

08011540 <_svfiprintf_r>:
 8011540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011542:	b0a1      	sub	sp, #132	; 0x84
 8011544:	9003      	str	r0, [sp, #12]
 8011546:	001d      	movs	r5, r3
 8011548:	898b      	ldrh	r3, [r1, #12]
 801154a:	000f      	movs	r7, r1
 801154c:	0016      	movs	r6, r2
 801154e:	061b      	lsls	r3, r3, #24
 8011550:	d511      	bpl.n	8011576 <_svfiprintf_r+0x36>
 8011552:	690b      	ldr	r3, [r1, #16]
 8011554:	2b00      	cmp	r3, #0
 8011556:	d10e      	bne.n	8011576 <_svfiprintf_r+0x36>
 8011558:	2140      	movs	r1, #64	; 0x40
 801155a:	f7ff fee9 	bl	8011330 <_malloc_r>
 801155e:	6038      	str	r0, [r7, #0]
 8011560:	6138      	str	r0, [r7, #16]
 8011562:	2800      	cmp	r0, #0
 8011564:	d105      	bne.n	8011572 <_svfiprintf_r+0x32>
 8011566:	230c      	movs	r3, #12
 8011568:	9a03      	ldr	r2, [sp, #12]
 801156a:	3801      	subs	r0, #1
 801156c:	6013      	str	r3, [r2, #0]
 801156e:	b021      	add	sp, #132	; 0x84
 8011570:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011572:	2340      	movs	r3, #64	; 0x40
 8011574:	617b      	str	r3, [r7, #20]
 8011576:	2300      	movs	r3, #0
 8011578:	ac08      	add	r4, sp, #32
 801157a:	6163      	str	r3, [r4, #20]
 801157c:	3320      	adds	r3, #32
 801157e:	7663      	strb	r3, [r4, #25]
 8011580:	3310      	adds	r3, #16
 8011582:	76a3      	strb	r3, [r4, #26]
 8011584:	9507      	str	r5, [sp, #28]
 8011586:	0035      	movs	r5, r6
 8011588:	782b      	ldrb	r3, [r5, #0]
 801158a:	2b00      	cmp	r3, #0
 801158c:	d001      	beq.n	8011592 <_svfiprintf_r+0x52>
 801158e:	2b25      	cmp	r3, #37	; 0x25
 8011590:	d147      	bne.n	8011622 <_svfiprintf_r+0xe2>
 8011592:	1bab      	subs	r3, r5, r6
 8011594:	9305      	str	r3, [sp, #20]
 8011596:	42b5      	cmp	r5, r6
 8011598:	d00c      	beq.n	80115b4 <_svfiprintf_r+0x74>
 801159a:	0032      	movs	r2, r6
 801159c:	0039      	movs	r1, r7
 801159e:	9803      	ldr	r0, [sp, #12]
 80115a0:	f7ff ff6c 	bl	801147c <__ssputs_r>
 80115a4:	1c43      	adds	r3, r0, #1
 80115a6:	d100      	bne.n	80115aa <_svfiprintf_r+0x6a>
 80115a8:	e0ae      	b.n	8011708 <_svfiprintf_r+0x1c8>
 80115aa:	6962      	ldr	r2, [r4, #20]
 80115ac:	9b05      	ldr	r3, [sp, #20]
 80115ae:	4694      	mov	ip, r2
 80115b0:	4463      	add	r3, ip
 80115b2:	6163      	str	r3, [r4, #20]
 80115b4:	782b      	ldrb	r3, [r5, #0]
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d100      	bne.n	80115bc <_svfiprintf_r+0x7c>
 80115ba:	e0a5      	b.n	8011708 <_svfiprintf_r+0x1c8>
 80115bc:	2201      	movs	r2, #1
 80115be:	2300      	movs	r3, #0
 80115c0:	4252      	negs	r2, r2
 80115c2:	6062      	str	r2, [r4, #4]
 80115c4:	a904      	add	r1, sp, #16
 80115c6:	3254      	adds	r2, #84	; 0x54
 80115c8:	1852      	adds	r2, r2, r1
 80115ca:	1c6e      	adds	r6, r5, #1
 80115cc:	6023      	str	r3, [r4, #0]
 80115ce:	60e3      	str	r3, [r4, #12]
 80115d0:	60a3      	str	r3, [r4, #8]
 80115d2:	7013      	strb	r3, [r2, #0]
 80115d4:	65a3      	str	r3, [r4, #88]	; 0x58
 80115d6:	2205      	movs	r2, #5
 80115d8:	7831      	ldrb	r1, [r6, #0]
 80115da:	4854      	ldr	r0, [pc, #336]	; (801172c <_svfiprintf_r+0x1ec>)
 80115dc:	f001 f954 	bl	8012888 <memchr>
 80115e0:	1c75      	adds	r5, r6, #1
 80115e2:	2800      	cmp	r0, #0
 80115e4:	d11f      	bne.n	8011626 <_svfiprintf_r+0xe6>
 80115e6:	6822      	ldr	r2, [r4, #0]
 80115e8:	06d3      	lsls	r3, r2, #27
 80115ea:	d504      	bpl.n	80115f6 <_svfiprintf_r+0xb6>
 80115ec:	2353      	movs	r3, #83	; 0x53
 80115ee:	a904      	add	r1, sp, #16
 80115f0:	185b      	adds	r3, r3, r1
 80115f2:	2120      	movs	r1, #32
 80115f4:	7019      	strb	r1, [r3, #0]
 80115f6:	0713      	lsls	r3, r2, #28
 80115f8:	d504      	bpl.n	8011604 <_svfiprintf_r+0xc4>
 80115fa:	2353      	movs	r3, #83	; 0x53
 80115fc:	a904      	add	r1, sp, #16
 80115fe:	185b      	adds	r3, r3, r1
 8011600:	212b      	movs	r1, #43	; 0x2b
 8011602:	7019      	strb	r1, [r3, #0]
 8011604:	7833      	ldrb	r3, [r6, #0]
 8011606:	2b2a      	cmp	r3, #42	; 0x2a
 8011608:	d016      	beq.n	8011638 <_svfiprintf_r+0xf8>
 801160a:	0035      	movs	r5, r6
 801160c:	2100      	movs	r1, #0
 801160e:	200a      	movs	r0, #10
 8011610:	68e3      	ldr	r3, [r4, #12]
 8011612:	782a      	ldrb	r2, [r5, #0]
 8011614:	1c6e      	adds	r6, r5, #1
 8011616:	3a30      	subs	r2, #48	; 0x30
 8011618:	2a09      	cmp	r2, #9
 801161a:	d94e      	bls.n	80116ba <_svfiprintf_r+0x17a>
 801161c:	2900      	cmp	r1, #0
 801161e:	d111      	bne.n	8011644 <_svfiprintf_r+0x104>
 8011620:	e017      	b.n	8011652 <_svfiprintf_r+0x112>
 8011622:	3501      	adds	r5, #1
 8011624:	e7b0      	b.n	8011588 <_svfiprintf_r+0x48>
 8011626:	4b41      	ldr	r3, [pc, #260]	; (801172c <_svfiprintf_r+0x1ec>)
 8011628:	6822      	ldr	r2, [r4, #0]
 801162a:	1ac0      	subs	r0, r0, r3
 801162c:	2301      	movs	r3, #1
 801162e:	4083      	lsls	r3, r0
 8011630:	4313      	orrs	r3, r2
 8011632:	002e      	movs	r6, r5
 8011634:	6023      	str	r3, [r4, #0]
 8011636:	e7ce      	b.n	80115d6 <_svfiprintf_r+0x96>
 8011638:	9b07      	ldr	r3, [sp, #28]
 801163a:	1d19      	adds	r1, r3, #4
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	9107      	str	r1, [sp, #28]
 8011640:	2b00      	cmp	r3, #0
 8011642:	db01      	blt.n	8011648 <_svfiprintf_r+0x108>
 8011644:	930b      	str	r3, [sp, #44]	; 0x2c
 8011646:	e004      	b.n	8011652 <_svfiprintf_r+0x112>
 8011648:	425b      	negs	r3, r3
 801164a:	60e3      	str	r3, [r4, #12]
 801164c:	2302      	movs	r3, #2
 801164e:	4313      	orrs	r3, r2
 8011650:	6023      	str	r3, [r4, #0]
 8011652:	782b      	ldrb	r3, [r5, #0]
 8011654:	2b2e      	cmp	r3, #46	; 0x2e
 8011656:	d10a      	bne.n	801166e <_svfiprintf_r+0x12e>
 8011658:	786b      	ldrb	r3, [r5, #1]
 801165a:	2b2a      	cmp	r3, #42	; 0x2a
 801165c:	d135      	bne.n	80116ca <_svfiprintf_r+0x18a>
 801165e:	9b07      	ldr	r3, [sp, #28]
 8011660:	3502      	adds	r5, #2
 8011662:	1d1a      	adds	r2, r3, #4
 8011664:	681b      	ldr	r3, [r3, #0]
 8011666:	9207      	str	r2, [sp, #28]
 8011668:	2b00      	cmp	r3, #0
 801166a:	db2b      	blt.n	80116c4 <_svfiprintf_r+0x184>
 801166c:	9309      	str	r3, [sp, #36]	; 0x24
 801166e:	4e30      	ldr	r6, [pc, #192]	; (8011730 <_svfiprintf_r+0x1f0>)
 8011670:	2203      	movs	r2, #3
 8011672:	0030      	movs	r0, r6
 8011674:	7829      	ldrb	r1, [r5, #0]
 8011676:	f001 f907 	bl	8012888 <memchr>
 801167a:	2800      	cmp	r0, #0
 801167c:	d006      	beq.n	801168c <_svfiprintf_r+0x14c>
 801167e:	2340      	movs	r3, #64	; 0x40
 8011680:	1b80      	subs	r0, r0, r6
 8011682:	4083      	lsls	r3, r0
 8011684:	6822      	ldr	r2, [r4, #0]
 8011686:	3501      	adds	r5, #1
 8011688:	4313      	orrs	r3, r2
 801168a:	6023      	str	r3, [r4, #0]
 801168c:	7829      	ldrb	r1, [r5, #0]
 801168e:	2206      	movs	r2, #6
 8011690:	4828      	ldr	r0, [pc, #160]	; (8011734 <_svfiprintf_r+0x1f4>)
 8011692:	1c6e      	adds	r6, r5, #1
 8011694:	7621      	strb	r1, [r4, #24]
 8011696:	f001 f8f7 	bl	8012888 <memchr>
 801169a:	2800      	cmp	r0, #0
 801169c:	d03c      	beq.n	8011718 <_svfiprintf_r+0x1d8>
 801169e:	4b26      	ldr	r3, [pc, #152]	; (8011738 <_svfiprintf_r+0x1f8>)
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d125      	bne.n	80116f0 <_svfiprintf_r+0x1b0>
 80116a4:	2207      	movs	r2, #7
 80116a6:	9b07      	ldr	r3, [sp, #28]
 80116a8:	3307      	adds	r3, #7
 80116aa:	4393      	bics	r3, r2
 80116ac:	3308      	adds	r3, #8
 80116ae:	9307      	str	r3, [sp, #28]
 80116b0:	6963      	ldr	r3, [r4, #20]
 80116b2:	9a04      	ldr	r2, [sp, #16]
 80116b4:	189b      	adds	r3, r3, r2
 80116b6:	6163      	str	r3, [r4, #20]
 80116b8:	e765      	b.n	8011586 <_svfiprintf_r+0x46>
 80116ba:	4343      	muls	r3, r0
 80116bc:	0035      	movs	r5, r6
 80116be:	2101      	movs	r1, #1
 80116c0:	189b      	adds	r3, r3, r2
 80116c2:	e7a6      	b.n	8011612 <_svfiprintf_r+0xd2>
 80116c4:	2301      	movs	r3, #1
 80116c6:	425b      	negs	r3, r3
 80116c8:	e7d0      	b.n	801166c <_svfiprintf_r+0x12c>
 80116ca:	2300      	movs	r3, #0
 80116cc:	200a      	movs	r0, #10
 80116ce:	001a      	movs	r2, r3
 80116d0:	3501      	adds	r5, #1
 80116d2:	6063      	str	r3, [r4, #4]
 80116d4:	7829      	ldrb	r1, [r5, #0]
 80116d6:	1c6e      	adds	r6, r5, #1
 80116d8:	3930      	subs	r1, #48	; 0x30
 80116da:	2909      	cmp	r1, #9
 80116dc:	d903      	bls.n	80116e6 <_svfiprintf_r+0x1a6>
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d0c5      	beq.n	801166e <_svfiprintf_r+0x12e>
 80116e2:	9209      	str	r2, [sp, #36]	; 0x24
 80116e4:	e7c3      	b.n	801166e <_svfiprintf_r+0x12e>
 80116e6:	4342      	muls	r2, r0
 80116e8:	0035      	movs	r5, r6
 80116ea:	2301      	movs	r3, #1
 80116ec:	1852      	adds	r2, r2, r1
 80116ee:	e7f1      	b.n	80116d4 <_svfiprintf_r+0x194>
 80116f0:	ab07      	add	r3, sp, #28
 80116f2:	9300      	str	r3, [sp, #0]
 80116f4:	003a      	movs	r2, r7
 80116f6:	0021      	movs	r1, r4
 80116f8:	4b10      	ldr	r3, [pc, #64]	; (801173c <_svfiprintf_r+0x1fc>)
 80116fa:	9803      	ldr	r0, [sp, #12]
 80116fc:	e000      	b.n	8011700 <_svfiprintf_r+0x1c0>
 80116fe:	bf00      	nop
 8011700:	9004      	str	r0, [sp, #16]
 8011702:	9b04      	ldr	r3, [sp, #16]
 8011704:	3301      	adds	r3, #1
 8011706:	d1d3      	bne.n	80116b0 <_svfiprintf_r+0x170>
 8011708:	89bb      	ldrh	r3, [r7, #12]
 801170a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801170c:	065b      	lsls	r3, r3, #25
 801170e:	d400      	bmi.n	8011712 <_svfiprintf_r+0x1d2>
 8011710:	e72d      	b.n	801156e <_svfiprintf_r+0x2e>
 8011712:	2001      	movs	r0, #1
 8011714:	4240      	negs	r0, r0
 8011716:	e72a      	b.n	801156e <_svfiprintf_r+0x2e>
 8011718:	ab07      	add	r3, sp, #28
 801171a:	9300      	str	r3, [sp, #0]
 801171c:	003a      	movs	r2, r7
 801171e:	0021      	movs	r1, r4
 8011720:	4b06      	ldr	r3, [pc, #24]	; (801173c <_svfiprintf_r+0x1fc>)
 8011722:	9803      	ldr	r0, [sp, #12]
 8011724:	f000 f87c 	bl	8011820 <_printf_i>
 8011728:	e7ea      	b.n	8011700 <_svfiprintf_r+0x1c0>
 801172a:	46c0      	nop			; (mov r8, r8)
 801172c:	08013d6c 	.word	0x08013d6c
 8011730:	08013d72 	.word	0x08013d72
 8011734:	08013d76 	.word	0x08013d76
 8011738:	00000000 	.word	0x00000000
 801173c:	0801147d 	.word	0x0801147d

08011740 <_printf_common>:
 8011740:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011742:	0015      	movs	r5, r2
 8011744:	9301      	str	r3, [sp, #4]
 8011746:	688a      	ldr	r2, [r1, #8]
 8011748:	690b      	ldr	r3, [r1, #16]
 801174a:	000c      	movs	r4, r1
 801174c:	9000      	str	r0, [sp, #0]
 801174e:	4293      	cmp	r3, r2
 8011750:	da00      	bge.n	8011754 <_printf_common+0x14>
 8011752:	0013      	movs	r3, r2
 8011754:	0022      	movs	r2, r4
 8011756:	602b      	str	r3, [r5, #0]
 8011758:	3243      	adds	r2, #67	; 0x43
 801175a:	7812      	ldrb	r2, [r2, #0]
 801175c:	2a00      	cmp	r2, #0
 801175e:	d001      	beq.n	8011764 <_printf_common+0x24>
 8011760:	3301      	adds	r3, #1
 8011762:	602b      	str	r3, [r5, #0]
 8011764:	6823      	ldr	r3, [r4, #0]
 8011766:	069b      	lsls	r3, r3, #26
 8011768:	d502      	bpl.n	8011770 <_printf_common+0x30>
 801176a:	682b      	ldr	r3, [r5, #0]
 801176c:	3302      	adds	r3, #2
 801176e:	602b      	str	r3, [r5, #0]
 8011770:	6822      	ldr	r2, [r4, #0]
 8011772:	2306      	movs	r3, #6
 8011774:	0017      	movs	r7, r2
 8011776:	401f      	ands	r7, r3
 8011778:	421a      	tst	r2, r3
 801177a:	d027      	beq.n	80117cc <_printf_common+0x8c>
 801177c:	0023      	movs	r3, r4
 801177e:	3343      	adds	r3, #67	; 0x43
 8011780:	781b      	ldrb	r3, [r3, #0]
 8011782:	1e5a      	subs	r2, r3, #1
 8011784:	4193      	sbcs	r3, r2
 8011786:	6822      	ldr	r2, [r4, #0]
 8011788:	0692      	lsls	r2, r2, #26
 801178a:	d430      	bmi.n	80117ee <_printf_common+0xae>
 801178c:	0022      	movs	r2, r4
 801178e:	9901      	ldr	r1, [sp, #4]
 8011790:	9800      	ldr	r0, [sp, #0]
 8011792:	9e08      	ldr	r6, [sp, #32]
 8011794:	3243      	adds	r2, #67	; 0x43
 8011796:	47b0      	blx	r6
 8011798:	1c43      	adds	r3, r0, #1
 801179a:	d025      	beq.n	80117e8 <_printf_common+0xa8>
 801179c:	2306      	movs	r3, #6
 801179e:	6820      	ldr	r0, [r4, #0]
 80117a0:	682a      	ldr	r2, [r5, #0]
 80117a2:	68e1      	ldr	r1, [r4, #12]
 80117a4:	2500      	movs	r5, #0
 80117a6:	4003      	ands	r3, r0
 80117a8:	2b04      	cmp	r3, #4
 80117aa:	d103      	bne.n	80117b4 <_printf_common+0x74>
 80117ac:	1a8d      	subs	r5, r1, r2
 80117ae:	43eb      	mvns	r3, r5
 80117b0:	17db      	asrs	r3, r3, #31
 80117b2:	401d      	ands	r5, r3
 80117b4:	68a3      	ldr	r3, [r4, #8]
 80117b6:	6922      	ldr	r2, [r4, #16]
 80117b8:	4293      	cmp	r3, r2
 80117ba:	dd01      	ble.n	80117c0 <_printf_common+0x80>
 80117bc:	1a9b      	subs	r3, r3, r2
 80117be:	18ed      	adds	r5, r5, r3
 80117c0:	2700      	movs	r7, #0
 80117c2:	42bd      	cmp	r5, r7
 80117c4:	d120      	bne.n	8011808 <_printf_common+0xc8>
 80117c6:	2000      	movs	r0, #0
 80117c8:	e010      	b.n	80117ec <_printf_common+0xac>
 80117ca:	3701      	adds	r7, #1
 80117cc:	68e3      	ldr	r3, [r4, #12]
 80117ce:	682a      	ldr	r2, [r5, #0]
 80117d0:	1a9b      	subs	r3, r3, r2
 80117d2:	42bb      	cmp	r3, r7
 80117d4:	ddd2      	ble.n	801177c <_printf_common+0x3c>
 80117d6:	0022      	movs	r2, r4
 80117d8:	2301      	movs	r3, #1
 80117da:	9901      	ldr	r1, [sp, #4]
 80117dc:	9800      	ldr	r0, [sp, #0]
 80117de:	9e08      	ldr	r6, [sp, #32]
 80117e0:	3219      	adds	r2, #25
 80117e2:	47b0      	blx	r6
 80117e4:	1c43      	adds	r3, r0, #1
 80117e6:	d1f0      	bne.n	80117ca <_printf_common+0x8a>
 80117e8:	2001      	movs	r0, #1
 80117ea:	4240      	negs	r0, r0
 80117ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80117ee:	2030      	movs	r0, #48	; 0x30
 80117f0:	18e1      	adds	r1, r4, r3
 80117f2:	3143      	adds	r1, #67	; 0x43
 80117f4:	7008      	strb	r0, [r1, #0]
 80117f6:	0021      	movs	r1, r4
 80117f8:	1c5a      	adds	r2, r3, #1
 80117fa:	3145      	adds	r1, #69	; 0x45
 80117fc:	7809      	ldrb	r1, [r1, #0]
 80117fe:	18a2      	adds	r2, r4, r2
 8011800:	3243      	adds	r2, #67	; 0x43
 8011802:	3302      	adds	r3, #2
 8011804:	7011      	strb	r1, [r2, #0]
 8011806:	e7c1      	b.n	801178c <_printf_common+0x4c>
 8011808:	0022      	movs	r2, r4
 801180a:	2301      	movs	r3, #1
 801180c:	9901      	ldr	r1, [sp, #4]
 801180e:	9800      	ldr	r0, [sp, #0]
 8011810:	9e08      	ldr	r6, [sp, #32]
 8011812:	321a      	adds	r2, #26
 8011814:	47b0      	blx	r6
 8011816:	1c43      	adds	r3, r0, #1
 8011818:	d0e6      	beq.n	80117e8 <_printf_common+0xa8>
 801181a:	3701      	adds	r7, #1
 801181c:	e7d1      	b.n	80117c2 <_printf_common+0x82>
	...

08011820 <_printf_i>:
 8011820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011822:	b08b      	sub	sp, #44	; 0x2c
 8011824:	9206      	str	r2, [sp, #24]
 8011826:	000a      	movs	r2, r1
 8011828:	3243      	adds	r2, #67	; 0x43
 801182a:	9307      	str	r3, [sp, #28]
 801182c:	9005      	str	r0, [sp, #20]
 801182e:	9204      	str	r2, [sp, #16]
 8011830:	7e0a      	ldrb	r2, [r1, #24]
 8011832:	000c      	movs	r4, r1
 8011834:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011836:	2a78      	cmp	r2, #120	; 0x78
 8011838:	d807      	bhi.n	801184a <_printf_i+0x2a>
 801183a:	2a62      	cmp	r2, #98	; 0x62
 801183c:	d809      	bhi.n	8011852 <_printf_i+0x32>
 801183e:	2a00      	cmp	r2, #0
 8011840:	d100      	bne.n	8011844 <_printf_i+0x24>
 8011842:	e0c1      	b.n	80119c8 <_printf_i+0x1a8>
 8011844:	2a58      	cmp	r2, #88	; 0x58
 8011846:	d100      	bne.n	801184a <_printf_i+0x2a>
 8011848:	e08c      	b.n	8011964 <_printf_i+0x144>
 801184a:	0026      	movs	r6, r4
 801184c:	3642      	adds	r6, #66	; 0x42
 801184e:	7032      	strb	r2, [r6, #0]
 8011850:	e022      	b.n	8011898 <_printf_i+0x78>
 8011852:	0010      	movs	r0, r2
 8011854:	3863      	subs	r0, #99	; 0x63
 8011856:	2815      	cmp	r0, #21
 8011858:	d8f7      	bhi.n	801184a <_printf_i+0x2a>
 801185a:	f7ee fc6d 	bl	8000138 <__gnu_thumb1_case_shi>
 801185e:	0016      	.short	0x0016
 8011860:	fff6001f 	.word	0xfff6001f
 8011864:	fff6fff6 	.word	0xfff6fff6
 8011868:	001ffff6 	.word	0x001ffff6
 801186c:	fff6fff6 	.word	0xfff6fff6
 8011870:	fff6fff6 	.word	0xfff6fff6
 8011874:	003600a8 	.word	0x003600a8
 8011878:	fff6009a 	.word	0xfff6009a
 801187c:	00b9fff6 	.word	0x00b9fff6
 8011880:	0036fff6 	.word	0x0036fff6
 8011884:	fff6fff6 	.word	0xfff6fff6
 8011888:	009e      	.short	0x009e
 801188a:	0026      	movs	r6, r4
 801188c:	681a      	ldr	r2, [r3, #0]
 801188e:	3642      	adds	r6, #66	; 0x42
 8011890:	1d11      	adds	r1, r2, #4
 8011892:	6019      	str	r1, [r3, #0]
 8011894:	6813      	ldr	r3, [r2, #0]
 8011896:	7033      	strb	r3, [r6, #0]
 8011898:	2301      	movs	r3, #1
 801189a:	e0a7      	b.n	80119ec <_printf_i+0x1cc>
 801189c:	6808      	ldr	r0, [r1, #0]
 801189e:	6819      	ldr	r1, [r3, #0]
 80118a0:	1d0a      	adds	r2, r1, #4
 80118a2:	0605      	lsls	r5, r0, #24
 80118a4:	d50b      	bpl.n	80118be <_printf_i+0x9e>
 80118a6:	680d      	ldr	r5, [r1, #0]
 80118a8:	601a      	str	r2, [r3, #0]
 80118aa:	2d00      	cmp	r5, #0
 80118ac:	da03      	bge.n	80118b6 <_printf_i+0x96>
 80118ae:	232d      	movs	r3, #45	; 0x2d
 80118b0:	9a04      	ldr	r2, [sp, #16]
 80118b2:	426d      	negs	r5, r5
 80118b4:	7013      	strb	r3, [r2, #0]
 80118b6:	4b61      	ldr	r3, [pc, #388]	; (8011a3c <_printf_i+0x21c>)
 80118b8:	270a      	movs	r7, #10
 80118ba:	9303      	str	r3, [sp, #12]
 80118bc:	e01b      	b.n	80118f6 <_printf_i+0xd6>
 80118be:	680d      	ldr	r5, [r1, #0]
 80118c0:	601a      	str	r2, [r3, #0]
 80118c2:	0641      	lsls	r1, r0, #25
 80118c4:	d5f1      	bpl.n	80118aa <_printf_i+0x8a>
 80118c6:	b22d      	sxth	r5, r5
 80118c8:	e7ef      	b.n	80118aa <_printf_i+0x8a>
 80118ca:	680d      	ldr	r5, [r1, #0]
 80118cc:	6819      	ldr	r1, [r3, #0]
 80118ce:	1d08      	adds	r0, r1, #4
 80118d0:	6018      	str	r0, [r3, #0]
 80118d2:	062e      	lsls	r6, r5, #24
 80118d4:	d501      	bpl.n	80118da <_printf_i+0xba>
 80118d6:	680d      	ldr	r5, [r1, #0]
 80118d8:	e003      	b.n	80118e2 <_printf_i+0xc2>
 80118da:	066d      	lsls	r5, r5, #25
 80118dc:	d5fb      	bpl.n	80118d6 <_printf_i+0xb6>
 80118de:	680d      	ldr	r5, [r1, #0]
 80118e0:	b2ad      	uxth	r5, r5
 80118e2:	4b56      	ldr	r3, [pc, #344]	; (8011a3c <_printf_i+0x21c>)
 80118e4:	2708      	movs	r7, #8
 80118e6:	9303      	str	r3, [sp, #12]
 80118e8:	2a6f      	cmp	r2, #111	; 0x6f
 80118ea:	d000      	beq.n	80118ee <_printf_i+0xce>
 80118ec:	3702      	adds	r7, #2
 80118ee:	0023      	movs	r3, r4
 80118f0:	2200      	movs	r2, #0
 80118f2:	3343      	adds	r3, #67	; 0x43
 80118f4:	701a      	strb	r2, [r3, #0]
 80118f6:	6863      	ldr	r3, [r4, #4]
 80118f8:	60a3      	str	r3, [r4, #8]
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	db03      	blt.n	8011906 <_printf_i+0xe6>
 80118fe:	2204      	movs	r2, #4
 8011900:	6821      	ldr	r1, [r4, #0]
 8011902:	4391      	bics	r1, r2
 8011904:	6021      	str	r1, [r4, #0]
 8011906:	2d00      	cmp	r5, #0
 8011908:	d102      	bne.n	8011910 <_printf_i+0xf0>
 801190a:	9e04      	ldr	r6, [sp, #16]
 801190c:	2b00      	cmp	r3, #0
 801190e:	d00c      	beq.n	801192a <_printf_i+0x10a>
 8011910:	9e04      	ldr	r6, [sp, #16]
 8011912:	0028      	movs	r0, r5
 8011914:	0039      	movs	r1, r7
 8011916:	f7ee fc9f 	bl	8000258 <__aeabi_uidivmod>
 801191a:	9b03      	ldr	r3, [sp, #12]
 801191c:	3e01      	subs	r6, #1
 801191e:	5c5b      	ldrb	r3, [r3, r1]
 8011920:	7033      	strb	r3, [r6, #0]
 8011922:	002b      	movs	r3, r5
 8011924:	0005      	movs	r5, r0
 8011926:	429f      	cmp	r7, r3
 8011928:	d9f3      	bls.n	8011912 <_printf_i+0xf2>
 801192a:	2f08      	cmp	r7, #8
 801192c:	d109      	bne.n	8011942 <_printf_i+0x122>
 801192e:	6823      	ldr	r3, [r4, #0]
 8011930:	07db      	lsls	r3, r3, #31
 8011932:	d506      	bpl.n	8011942 <_printf_i+0x122>
 8011934:	6863      	ldr	r3, [r4, #4]
 8011936:	6922      	ldr	r2, [r4, #16]
 8011938:	4293      	cmp	r3, r2
 801193a:	dc02      	bgt.n	8011942 <_printf_i+0x122>
 801193c:	2330      	movs	r3, #48	; 0x30
 801193e:	3e01      	subs	r6, #1
 8011940:	7033      	strb	r3, [r6, #0]
 8011942:	9b04      	ldr	r3, [sp, #16]
 8011944:	1b9b      	subs	r3, r3, r6
 8011946:	6123      	str	r3, [r4, #16]
 8011948:	9b07      	ldr	r3, [sp, #28]
 801194a:	0021      	movs	r1, r4
 801194c:	9300      	str	r3, [sp, #0]
 801194e:	9805      	ldr	r0, [sp, #20]
 8011950:	9b06      	ldr	r3, [sp, #24]
 8011952:	aa09      	add	r2, sp, #36	; 0x24
 8011954:	f7ff fef4 	bl	8011740 <_printf_common>
 8011958:	1c43      	adds	r3, r0, #1
 801195a:	d14c      	bne.n	80119f6 <_printf_i+0x1d6>
 801195c:	2001      	movs	r0, #1
 801195e:	4240      	negs	r0, r0
 8011960:	b00b      	add	sp, #44	; 0x2c
 8011962:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011964:	3145      	adds	r1, #69	; 0x45
 8011966:	700a      	strb	r2, [r1, #0]
 8011968:	4a34      	ldr	r2, [pc, #208]	; (8011a3c <_printf_i+0x21c>)
 801196a:	9203      	str	r2, [sp, #12]
 801196c:	681a      	ldr	r2, [r3, #0]
 801196e:	6821      	ldr	r1, [r4, #0]
 8011970:	ca20      	ldmia	r2!, {r5}
 8011972:	601a      	str	r2, [r3, #0]
 8011974:	0608      	lsls	r0, r1, #24
 8011976:	d516      	bpl.n	80119a6 <_printf_i+0x186>
 8011978:	07cb      	lsls	r3, r1, #31
 801197a:	d502      	bpl.n	8011982 <_printf_i+0x162>
 801197c:	2320      	movs	r3, #32
 801197e:	4319      	orrs	r1, r3
 8011980:	6021      	str	r1, [r4, #0]
 8011982:	2710      	movs	r7, #16
 8011984:	2d00      	cmp	r5, #0
 8011986:	d1b2      	bne.n	80118ee <_printf_i+0xce>
 8011988:	2320      	movs	r3, #32
 801198a:	6822      	ldr	r2, [r4, #0]
 801198c:	439a      	bics	r2, r3
 801198e:	6022      	str	r2, [r4, #0]
 8011990:	e7ad      	b.n	80118ee <_printf_i+0xce>
 8011992:	2220      	movs	r2, #32
 8011994:	6809      	ldr	r1, [r1, #0]
 8011996:	430a      	orrs	r2, r1
 8011998:	6022      	str	r2, [r4, #0]
 801199a:	0022      	movs	r2, r4
 801199c:	2178      	movs	r1, #120	; 0x78
 801199e:	3245      	adds	r2, #69	; 0x45
 80119a0:	7011      	strb	r1, [r2, #0]
 80119a2:	4a27      	ldr	r2, [pc, #156]	; (8011a40 <_printf_i+0x220>)
 80119a4:	e7e1      	b.n	801196a <_printf_i+0x14a>
 80119a6:	0648      	lsls	r0, r1, #25
 80119a8:	d5e6      	bpl.n	8011978 <_printf_i+0x158>
 80119aa:	b2ad      	uxth	r5, r5
 80119ac:	e7e4      	b.n	8011978 <_printf_i+0x158>
 80119ae:	681a      	ldr	r2, [r3, #0]
 80119b0:	680d      	ldr	r5, [r1, #0]
 80119b2:	1d10      	adds	r0, r2, #4
 80119b4:	6949      	ldr	r1, [r1, #20]
 80119b6:	6018      	str	r0, [r3, #0]
 80119b8:	6813      	ldr	r3, [r2, #0]
 80119ba:	062e      	lsls	r6, r5, #24
 80119bc:	d501      	bpl.n	80119c2 <_printf_i+0x1a2>
 80119be:	6019      	str	r1, [r3, #0]
 80119c0:	e002      	b.n	80119c8 <_printf_i+0x1a8>
 80119c2:	066d      	lsls	r5, r5, #25
 80119c4:	d5fb      	bpl.n	80119be <_printf_i+0x19e>
 80119c6:	8019      	strh	r1, [r3, #0]
 80119c8:	2300      	movs	r3, #0
 80119ca:	9e04      	ldr	r6, [sp, #16]
 80119cc:	6123      	str	r3, [r4, #16]
 80119ce:	e7bb      	b.n	8011948 <_printf_i+0x128>
 80119d0:	681a      	ldr	r2, [r3, #0]
 80119d2:	1d11      	adds	r1, r2, #4
 80119d4:	6019      	str	r1, [r3, #0]
 80119d6:	6816      	ldr	r6, [r2, #0]
 80119d8:	2100      	movs	r1, #0
 80119da:	0030      	movs	r0, r6
 80119dc:	6862      	ldr	r2, [r4, #4]
 80119de:	f000 ff53 	bl	8012888 <memchr>
 80119e2:	2800      	cmp	r0, #0
 80119e4:	d001      	beq.n	80119ea <_printf_i+0x1ca>
 80119e6:	1b80      	subs	r0, r0, r6
 80119e8:	6060      	str	r0, [r4, #4]
 80119ea:	6863      	ldr	r3, [r4, #4]
 80119ec:	6123      	str	r3, [r4, #16]
 80119ee:	2300      	movs	r3, #0
 80119f0:	9a04      	ldr	r2, [sp, #16]
 80119f2:	7013      	strb	r3, [r2, #0]
 80119f4:	e7a8      	b.n	8011948 <_printf_i+0x128>
 80119f6:	6923      	ldr	r3, [r4, #16]
 80119f8:	0032      	movs	r2, r6
 80119fa:	9906      	ldr	r1, [sp, #24]
 80119fc:	9805      	ldr	r0, [sp, #20]
 80119fe:	9d07      	ldr	r5, [sp, #28]
 8011a00:	47a8      	blx	r5
 8011a02:	1c43      	adds	r3, r0, #1
 8011a04:	d0aa      	beq.n	801195c <_printf_i+0x13c>
 8011a06:	6823      	ldr	r3, [r4, #0]
 8011a08:	079b      	lsls	r3, r3, #30
 8011a0a:	d415      	bmi.n	8011a38 <_printf_i+0x218>
 8011a0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a0e:	68e0      	ldr	r0, [r4, #12]
 8011a10:	4298      	cmp	r0, r3
 8011a12:	daa5      	bge.n	8011960 <_printf_i+0x140>
 8011a14:	0018      	movs	r0, r3
 8011a16:	e7a3      	b.n	8011960 <_printf_i+0x140>
 8011a18:	0022      	movs	r2, r4
 8011a1a:	2301      	movs	r3, #1
 8011a1c:	9906      	ldr	r1, [sp, #24]
 8011a1e:	9805      	ldr	r0, [sp, #20]
 8011a20:	9e07      	ldr	r6, [sp, #28]
 8011a22:	3219      	adds	r2, #25
 8011a24:	47b0      	blx	r6
 8011a26:	1c43      	adds	r3, r0, #1
 8011a28:	d098      	beq.n	801195c <_printf_i+0x13c>
 8011a2a:	3501      	adds	r5, #1
 8011a2c:	68e3      	ldr	r3, [r4, #12]
 8011a2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011a30:	1a9b      	subs	r3, r3, r2
 8011a32:	42ab      	cmp	r3, r5
 8011a34:	dcf0      	bgt.n	8011a18 <_printf_i+0x1f8>
 8011a36:	e7e9      	b.n	8011a0c <_printf_i+0x1ec>
 8011a38:	2500      	movs	r5, #0
 8011a3a:	e7f7      	b.n	8011a2c <_printf_i+0x20c>
 8011a3c:	08013d7d 	.word	0x08013d7d
 8011a40:	08013d8e 	.word	0x08013d8e

08011a44 <nan>:
 8011a44:	2000      	movs	r0, #0
 8011a46:	4901      	ldr	r1, [pc, #4]	; (8011a4c <nan+0x8>)
 8011a48:	4770      	bx	lr
 8011a4a:	46c0      	nop			; (mov r8, r8)
 8011a4c:	7ff80000 	.word	0x7ff80000

08011a50 <_sbrk_r>:
 8011a50:	2300      	movs	r3, #0
 8011a52:	b570      	push	{r4, r5, r6, lr}
 8011a54:	4d06      	ldr	r5, [pc, #24]	; (8011a70 <_sbrk_r+0x20>)
 8011a56:	0004      	movs	r4, r0
 8011a58:	0008      	movs	r0, r1
 8011a5a:	602b      	str	r3, [r5, #0]
 8011a5c:	f7f7 fb72 	bl	8009144 <_sbrk>
 8011a60:	1c43      	adds	r3, r0, #1
 8011a62:	d103      	bne.n	8011a6c <_sbrk_r+0x1c>
 8011a64:	682b      	ldr	r3, [r5, #0]
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d000      	beq.n	8011a6c <_sbrk_r+0x1c>
 8011a6a:	6023      	str	r3, [r4, #0]
 8011a6c:	bd70      	pop	{r4, r5, r6, pc}
 8011a6e:	46c0      	nop			; (mov r8, r8)
 8011a70:	20000da8 	.word	0x20000da8

08011a74 <nanf>:
 8011a74:	4800      	ldr	r0, [pc, #0]	; (8011a78 <nanf+0x4>)
 8011a76:	4770      	bx	lr
 8011a78:	7fc00000 	.word	0x7fc00000

08011a7c <strcpy>:
 8011a7c:	0003      	movs	r3, r0
 8011a7e:	780a      	ldrb	r2, [r1, #0]
 8011a80:	3101      	adds	r1, #1
 8011a82:	701a      	strb	r2, [r3, #0]
 8011a84:	3301      	adds	r3, #1
 8011a86:	2a00      	cmp	r2, #0
 8011a88:	d1f9      	bne.n	8011a7e <strcpy+0x2>
 8011a8a:	4770      	bx	lr

08011a8c <strncmp>:
 8011a8c:	b530      	push	{r4, r5, lr}
 8011a8e:	0005      	movs	r5, r0
 8011a90:	1e10      	subs	r0, r2, #0
 8011a92:	d008      	beq.n	8011aa6 <strncmp+0x1a>
 8011a94:	2400      	movs	r4, #0
 8011a96:	3a01      	subs	r2, #1
 8011a98:	5d2b      	ldrb	r3, [r5, r4]
 8011a9a:	5d08      	ldrb	r0, [r1, r4]
 8011a9c:	4283      	cmp	r3, r0
 8011a9e:	d101      	bne.n	8011aa4 <strncmp+0x18>
 8011aa0:	4294      	cmp	r4, r2
 8011aa2:	d101      	bne.n	8011aa8 <strncmp+0x1c>
 8011aa4:	1a18      	subs	r0, r3, r0
 8011aa6:	bd30      	pop	{r4, r5, pc}
 8011aa8:	3401      	adds	r4, #1
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d1f4      	bne.n	8011a98 <strncmp+0xc>
 8011aae:	e7f9      	b.n	8011aa4 <strncmp+0x18>

08011ab0 <__ascii_wctomb>:
 8011ab0:	0003      	movs	r3, r0
 8011ab2:	1e08      	subs	r0, r1, #0
 8011ab4:	d005      	beq.n	8011ac2 <__ascii_wctomb+0x12>
 8011ab6:	2aff      	cmp	r2, #255	; 0xff
 8011ab8:	d904      	bls.n	8011ac4 <__ascii_wctomb+0x14>
 8011aba:	228a      	movs	r2, #138	; 0x8a
 8011abc:	2001      	movs	r0, #1
 8011abe:	601a      	str	r2, [r3, #0]
 8011ac0:	4240      	negs	r0, r0
 8011ac2:	4770      	bx	lr
 8011ac4:	2001      	movs	r0, #1
 8011ac6:	700a      	strb	r2, [r1, #0]
 8011ac8:	e7fb      	b.n	8011ac2 <__ascii_wctomb+0x12>
	...

08011acc <__assert_func>:
 8011acc:	b530      	push	{r4, r5, lr}
 8011ace:	0014      	movs	r4, r2
 8011ad0:	001a      	movs	r2, r3
 8011ad2:	4b09      	ldr	r3, [pc, #36]	; (8011af8 <__assert_func+0x2c>)
 8011ad4:	0005      	movs	r5, r0
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	b085      	sub	sp, #20
 8011ada:	68d8      	ldr	r0, [r3, #12]
 8011adc:	4b07      	ldr	r3, [pc, #28]	; (8011afc <__assert_func+0x30>)
 8011ade:	2c00      	cmp	r4, #0
 8011ae0:	d101      	bne.n	8011ae6 <__assert_func+0x1a>
 8011ae2:	4b07      	ldr	r3, [pc, #28]	; (8011b00 <__assert_func+0x34>)
 8011ae4:	001c      	movs	r4, r3
 8011ae6:	9301      	str	r3, [sp, #4]
 8011ae8:	9100      	str	r1, [sp, #0]
 8011aea:	002b      	movs	r3, r5
 8011aec:	4905      	ldr	r1, [pc, #20]	; (8011b04 <__assert_func+0x38>)
 8011aee:	9402      	str	r4, [sp, #8]
 8011af0:	f000 feb0 	bl	8012854 <fiprintf>
 8011af4:	f001 f978 	bl	8012de8 <abort>
 8011af8:	200000e4 	.word	0x200000e4
 8011afc:	08013d9f 	.word	0x08013d9f
 8011b00:	08013dda 	.word	0x08013dda
 8011b04:	08013dac 	.word	0x08013dac

08011b08 <quorem>:
 8011b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b0a:	0006      	movs	r6, r0
 8011b0c:	690b      	ldr	r3, [r1, #16]
 8011b0e:	6932      	ldr	r2, [r6, #16]
 8011b10:	b087      	sub	sp, #28
 8011b12:	2000      	movs	r0, #0
 8011b14:	9103      	str	r1, [sp, #12]
 8011b16:	429a      	cmp	r2, r3
 8011b18:	db65      	blt.n	8011be6 <quorem+0xde>
 8011b1a:	3b01      	subs	r3, #1
 8011b1c:	009c      	lsls	r4, r3, #2
 8011b1e:	9300      	str	r3, [sp, #0]
 8011b20:	000b      	movs	r3, r1
 8011b22:	3314      	adds	r3, #20
 8011b24:	9305      	str	r3, [sp, #20]
 8011b26:	191b      	adds	r3, r3, r4
 8011b28:	9304      	str	r3, [sp, #16]
 8011b2a:	0033      	movs	r3, r6
 8011b2c:	3314      	adds	r3, #20
 8011b2e:	9302      	str	r3, [sp, #8]
 8011b30:	191c      	adds	r4, r3, r4
 8011b32:	9b04      	ldr	r3, [sp, #16]
 8011b34:	6827      	ldr	r7, [r4, #0]
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	0038      	movs	r0, r7
 8011b3a:	1c5d      	adds	r5, r3, #1
 8011b3c:	0029      	movs	r1, r5
 8011b3e:	9301      	str	r3, [sp, #4]
 8011b40:	f7ee fb04 	bl	800014c <__udivsi3>
 8011b44:	9001      	str	r0, [sp, #4]
 8011b46:	42af      	cmp	r7, r5
 8011b48:	d324      	bcc.n	8011b94 <quorem+0x8c>
 8011b4a:	2500      	movs	r5, #0
 8011b4c:	46ac      	mov	ip, r5
 8011b4e:	9802      	ldr	r0, [sp, #8]
 8011b50:	9f05      	ldr	r7, [sp, #20]
 8011b52:	cf08      	ldmia	r7!, {r3}
 8011b54:	9a01      	ldr	r2, [sp, #4]
 8011b56:	b299      	uxth	r1, r3
 8011b58:	4351      	muls	r1, r2
 8011b5a:	0c1b      	lsrs	r3, r3, #16
 8011b5c:	4353      	muls	r3, r2
 8011b5e:	1949      	adds	r1, r1, r5
 8011b60:	0c0a      	lsrs	r2, r1, #16
 8011b62:	189b      	adds	r3, r3, r2
 8011b64:	6802      	ldr	r2, [r0, #0]
 8011b66:	b289      	uxth	r1, r1
 8011b68:	b292      	uxth	r2, r2
 8011b6a:	4462      	add	r2, ip
 8011b6c:	1a52      	subs	r2, r2, r1
 8011b6e:	6801      	ldr	r1, [r0, #0]
 8011b70:	0c1d      	lsrs	r5, r3, #16
 8011b72:	0c09      	lsrs	r1, r1, #16
 8011b74:	b29b      	uxth	r3, r3
 8011b76:	1acb      	subs	r3, r1, r3
 8011b78:	1411      	asrs	r1, r2, #16
 8011b7a:	185b      	adds	r3, r3, r1
 8011b7c:	1419      	asrs	r1, r3, #16
 8011b7e:	b292      	uxth	r2, r2
 8011b80:	041b      	lsls	r3, r3, #16
 8011b82:	431a      	orrs	r2, r3
 8011b84:	9b04      	ldr	r3, [sp, #16]
 8011b86:	468c      	mov	ip, r1
 8011b88:	c004      	stmia	r0!, {r2}
 8011b8a:	42bb      	cmp	r3, r7
 8011b8c:	d2e1      	bcs.n	8011b52 <quorem+0x4a>
 8011b8e:	6823      	ldr	r3, [r4, #0]
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d030      	beq.n	8011bf6 <quorem+0xee>
 8011b94:	0030      	movs	r0, r6
 8011b96:	9903      	ldr	r1, [sp, #12]
 8011b98:	f7ff f968 	bl	8010e6c <__mcmp>
 8011b9c:	2800      	cmp	r0, #0
 8011b9e:	db21      	blt.n	8011be4 <quorem+0xdc>
 8011ba0:	0030      	movs	r0, r6
 8011ba2:	2400      	movs	r4, #0
 8011ba4:	9b01      	ldr	r3, [sp, #4]
 8011ba6:	9903      	ldr	r1, [sp, #12]
 8011ba8:	3301      	adds	r3, #1
 8011baa:	9301      	str	r3, [sp, #4]
 8011bac:	3014      	adds	r0, #20
 8011bae:	3114      	adds	r1, #20
 8011bb0:	6803      	ldr	r3, [r0, #0]
 8011bb2:	c920      	ldmia	r1!, {r5}
 8011bb4:	b29a      	uxth	r2, r3
 8011bb6:	1914      	adds	r4, r2, r4
 8011bb8:	b2aa      	uxth	r2, r5
 8011bba:	1aa2      	subs	r2, r4, r2
 8011bbc:	0c1b      	lsrs	r3, r3, #16
 8011bbe:	0c2d      	lsrs	r5, r5, #16
 8011bc0:	1414      	asrs	r4, r2, #16
 8011bc2:	1b5b      	subs	r3, r3, r5
 8011bc4:	191b      	adds	r3, r3, r4
 8011bc6:	141c      	asrs	r4, r3, #16
 8011bc8:	b292      	uxth	r2, r2
 8011bca:	041b      	lsls	r3, r3, #16
 8011bcc:	4313      	orrs	r3, r2
 8011bce:	c008      	stmia	r0!, {r3}
 8011bd0:	9b04      	ldr	r3, [sp, #16]
 8011bd2:	428b      	cmp	r3, r1
 8011bd4:	d2ec      	bcs.n	8011bb0 <quorem+0xa8>
 8011bd6:	9b00      	ldr	r3, [sp, #0]
 8011bd8:	9a02      	ldr	r2, [sp, #8]
 8011bda:	009b      	lsls	r3, r3, #2
 8011bdc:	18d3      	adds	r3, r2, r3
 8011bde:	681a      	ldr	r2, [r3, #0]
 8011be0:	2a00      	cmp	r2, #0
 8011be2:	d015      	beq.n	8011c10 <quorem+0x108>
 8011be4:	9801      	ldr	r0, [sp, #4]
 8011be6:	b007      	add	sp, #28
 8011be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011bea:	6823      	ldr	r3, [r4, #0]
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d106      	bne.n	8011bfe <quorem+0xf6>
 8011bf0:	9b00      	ldr	r3, [sp, #0]
 8011bf2:	3b01      	subs	r3, #1
 8011bf4:	9300      	str	r3, [sp, #0]
 8011bf6:	9b02      	ldr	r3, [sp, #8]
 8011bf8:	3c04      	subs	r4, #4
 8011bfa:	42a3      	cmp	r3, r4
 8011bfc:	d3f5      	bcc.n	8011bea <quorem+0xe2>
 8011bfe:	9b00      	ldr	r3, [sp, #0]
 8011c00:	6133      	str	r3, [r6, #16]
 8011c02:	e7c7      	b.n	8011b94 <quorem+0x8c>
 8011c04:	681a      	ldr	r2, [r3, #0]
 8011c06:	2a00      	cmp	r2, #0
 8011c08:	d106      	bne.n	8011c18 <quorem+0x110>
 8011c0a:	9a00      	ldr	r2, [sp, #0]
 8011c0c:	3a01      	subs	r2, #1
 8011c0e:	9200      	str	r2, [sp, #0]
 8011c10:	9a02      	ldr	r2, [sp, #8]
 8011c12:	3b04      	subs	r3, #4
 8011c14:	429a      	cmp	r2, r3
 8011c16:	d3f5      	bcc.n	8011c04 <quorem+0xfc>
 8011c18:	9b00      	ldr	r3, [sp, #0]
 8011c1a:	6133      	str	r3, [r6, #16]
 8011c1c:	e7e2      	b.n	8011be4 <quorem+0xdc>
	...

08011c20 <_dtoa_r>:
 8011c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c22:	b09d      	sub	sp, #116	; 0x74
 8011c24:	9202      	str	r2, [sp, #8]
 8011c26:	9303      	str	r3, [sp, #12]
 8011c28:	9b02      	ldr	r3, [sp, #8]
 8011c2a:	9c03      	ldr	r4, [sp, #12]
 8011c2c:	9308      	str	r3, [sp, #32]
 8011c2e:	9409      	str	r4, [sp, #36]	; 0x24
 8011c30:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8011c32:	0007      	movs	r7, r0
 8011c34:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8011c36:	2c00      	cmp	r4, #0
 8011c38:	d10e      	bne.n	8011c58 <_dtoa_r+0x38>
 8011c3a:	2010      	movs	r0, #16
 8011c3c:	f000 fe1a 	bl	8012874 <malloc>
 8011c40:	1e02      	subs	r2, r0, #0
 8011c42:	6278      	str	r0, [r7, #36]	; 0x24
 8011c44:	d104      	bne.n	8011c50 <_dtoa_r+0x30>
 8011c46:	21ea      	movs	r1, #234	; 0xea
 8011c48:	4bc7      	ldr	r3, [pc, #796]	; (8011f68 <_dtoa_r+0x348>)
 8011c4a:	48c8      	ldr	r0, [pc, #800]	; (8011f6c <_dtoa_r+0x34c>)
 8011c4c:	f7ff ff3e 	bl	8011acc <__assert_func>
 8011c50:	6044      	str	r4, [r0, #4]
 8011c52:	6084      	str	r4, [r0, #8]
 8011c54:	6004      	str	r4, [r0, #0]
 8011c56:	60c4      	str	r4, [r0, #12]
 8011c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c5a:	6819      	ldr	r1, [r3, #0]
 8011c5c:	2900      	cmp	r1, #0
 8011c5e:	d00a      	beq.n	8011c76 <_dtoa_r+0x56>
 8011c60:	685a      	ldr	r2, [r3, #4]
 8011c62:	2301      	movs	r3, #1
 8011c64:	4093      	lsls	r3, r2
 8011c66:	604a      	str	r2, [r1, #4]
 8011c68:	608b      	str	r3, [r1, #8]
 8011c6a:	0038      	movs	r0, r7
 8011c6c:	f7fe fe72 	bl	8010954 <_Bfree>
 8011c70:	2200      	movs	r2, #0
 8011c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c74:	601a      	str	r2, [r3, #0]
 8011c76:	9b03      	ldr	r3, [sp, #12]
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	da20      	bge.n	8011cbe <_dtoa_r+0x9e>
 8011c7c:	2301      	movs	r3, #1
 8011c7e:	602b      	str	r3, [r5, #0]
 8011c80:	9b03      	ldr	r3, [sp, #12]
 8011c82:	005b      	lsls	r3, r3, #1
 8011c84:	085b      	lsrs	r3, r3, #1
 8011c86:	9309      	str	r3, [sp, #36]	; 0x24
 8011c88:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8011c8a:	4bb9      	ldr	r3, [pc, #740]	; (8011f70 <_dtoa_r+0x350>)
 8011c8c:	4ab8      	ldr	r2, [pc, #736]	; (8011f70 <_dtoa_r+0x350>)
 8011c8e:	402b      	ands	r3, r5
 8011c90:	4293      	cmp	r3, r2
 8011c92:	d117      	bne.n	8011cc4 <_dtoa_r+0xa4>
 8011c94:	4bb7      	ldr	r3, [pc, #732]	; (8011f74 <_dtoa_r+0x354>)
 8011c96:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8011c98:	0328      	lsls	r0, r5, #12
 8011c9a:	6013      	str	r3, [r2, #0]
 8011c9c:	9b02      	ldr	r3, [sp, #8]
 8011c9e:	0b00      	lsrs	r0, r0, #12
 8011ca0:	4318      	orrs	r0, r3
 8011ca2:	d101      	bne.n	8011ca8 <_dtoa_r+0x88>
 8011ca4:	f000 fdbf 	bl	8012826 <_dtoa_r+0xc06>
 8011ca8:	48b3      	ldr	r0, [pc, #716]	; (8011f78 <_dtoa_r+0x358>)
 8011caa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011cac:	9006      	str	r0, [sp, #24]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d002      	beq.n	8011cb8 <_dtoa_r+0x98>
 8011cb2:	4bb2      	ldr	r3, [pc, #712]	; (8011f7c <_dtoa_r+0x35c>)
 8011cb4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8011cb6:	6013      	str	r3, [r2, #0]
 8011cb8:	9806      	ldr	r0, [sp, #24]
 8011cba:	b01d      	add	sp, #116	; 0x74
 8011cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011cbe:	2300      	movs	r3, #0
 8011cc0:	602b      	str	r3, [r5, #0]
 8011cc2:	e7e1      	b.n	8011c88 <_dtoa_r+0x68>
 8011cc4:	9b08      	ldr	r3, [sp, #32]
 8011cc6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8011cc8:	9312      	str	r3, [sp, #72]	; 0x48
 8011cca:	9413      	str	r4, [sp, #76]	; 0x4c
 8011ccc:	9812      	ldr	r0, [sp, #72]	; 0x48
 8011cce:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8011cd0:	2200      	movs	r2, #0
 8011cd2:	2300      	movs	r3, #0
 8011cd4:	f7ee fbc0 	bl	8000458 <__aeabi_dcmpeq>
 8011cd8:	1e04      	subs	r4, r0, #0
 8011cda:	d009      	beq.n	8011cf0 <_dtoa_r+0xd0>
 8011cdc:	2301      	movs	r3, #1
 8011cde:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8011ce0:	6013      	str	r3, [r2, #0]
 8011ce2:	4ba7      	ldr	r3, [pc, #668]	; (8011f80 <_dtoa_r+0x360>)
 8011ce4:	9306      	str	r3, [sp, #24]
 8011ce6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d0e5      	beq.n	8011cb8 <_dtoa_r+0x98>
 8011cec:	4ba5      	ldr	r3, [pc, #660]	; (8011f84 <_dtoa_r+0x364>)
 8011cee:	e7e1      	b.n	8011cb4 <_dtoa_r+0x94>
 8011cf0:	ab1a      	add	r3, sp, #104	; 0x68
 8011cf2:	9301      	str	r3, [sp, #4]
 8011cf4:	ab1b      	add	r3, sp, #108	; 0x6c
 8011cf6:	9300      	str	r3, [sp, #0]
 8011cf8:	0038      	movs	r0, r7
 8011cfa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011cfc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011cfe:	f7ff f9dd 	bl	80110bc <__d2b>
 8011d02:	006e      	lsls	r6, r5, #1
 8011d04:	9005      	str	r0, [sp, #20]
 8011d06:	0d76      	lsrs	r6, r6, #21
 8011d08:	d100      	bne.n	8011d0c <_dtoa_r+0xec>
 8011d0a:	e07c      	b.n	8011e06 <_dtoa_r+0x1e6>
 8011d0c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8011d0e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8011d10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011d12:	4a9d      	ldr	r2, [pc, #628]	; (8011f88 <_dtoa_r+0x368>)
 8011d14:	031b      	lsls	r3, r3, #12
 8011d16:	0b1b      	lsrs	r3, r3, #12
 8011d18:	431a      	orrs	r2, r3
 8011d1a:	0011      	movs	r1, r2
 8011d1c:	4b9b      	ldr	r3, [pc, #620]	; (8011f8c <_dtoa_r+0x36c>)
 8011d1e:	9418      	str	r4, [sp, #96]	; 0x60
 8011d20:	18f6      	adds	r6, r6, r3
 8011d22:	2200      	movs	r2, #0
 8011d24:	4b9a      	ldr	r3, [pc, #616]	; (8011f90 <_dtoa_r+0x370>)
 8011d26:	f7f0 f8eb 	bl	8001f00 <__aeabi_dsub>
 8011d2a:	4a9a      	ldr	r2, [pc, #616]	; (8011f94 <_dtoa_r+0x374>)
 8011d2c:	4b9a      	ldr	r3, [pc, #616]	; (8011f98 <_dtoa_r+0x378>)
 8011d2e:	f7ef fe7b 	bl	8001a28 <__aeabi_dmul>
 8011d32:	4a9a      	ldr	r2, [pc, #616]	; (8011f9c <_dtoa_r+0x37c>)
 8011d34:	4b9a      	ldr	r3, [pc, #616]	; (8011fa0 <_dtoa_r+0x380>)
 8011d36:	f7ee ff39 	bl	8000bac <__aeabi_dadd>
 8011d3a:	0004      	movs	r4, r0
 8011d3c:	0030      	movs	r0, r6
 8011d3e:	000d      	movs	r5, r1
 8011d40:	f7f0 fcc4 	bl	80026cc <__aeabi_i2d>
 8011d44:	4a97      	ldr	r2, [pc, #604]	; (8011fa4 <_dtoa_r+0x384>)
 8011d46:	4b98      	ldr	r3, [pc, #608]	; (8011fa8 <_dtoa_r+0x388>)
 8011d48:	f7ef fe6e 	bl	8001a28 <__aeabi_dmul>
 8011d4c:	0002      	movs	r2, r0
 8011d4e:	000b      	movs	r3, r1
 8011d50:	0020      	movs	r0, r4
 8011d52:	0029      	movs	r1, r5
 8011d54:	f7ee ff2a 	bl	8000bac <__aeabi_dadd>
 8011d58:	0004      	movs	r4, r0
 8011d5a:	000d      	movs	r5, r1
 8011d5c:	f7f0 fc80 	bl	8002660 <__aeabi_d2iz>
 8011d60:	2200      	movs	r2, #0
 8011d62:	9002      	str	r0, [sp, #8]
 8011d64:	2300      	movs	r3, #0
 8011d66:	0020      	movs	r0, r4
 8011d68:	0029      	movs	r1, r5
 8011d6a:	f7ee fb7b 	bl	8000464 <__aeabi_dcmplt>
 8011d6e:	2800      	cmp	r0, #0
 8011d70:	d00b      	beq.n	8011d8a <_dtoa_r+0x16a>
 8011d72:	9802      	ldr	r0, [sp, #8]
 8011d74:	f7f0 fcaa 	bl	80026cc <__aeabi_i2d>
 8011d78:	002b      	movs	r3, r5
 8011d7a:	0022      	movs	r2, r4
 8011d7c:	f7ee fb6c 	bl	8000458 <__aeabi_dcmpeq>
 8011d80:	4243      	negs	r3, r0
 8011d82:	4158      	adcs	r0, r3
 8011d84:	9b02      	ldr	r3, [sp, #8]
 8011d86:	1a1b      	subs	r3, r3, r0
 8011d88:	9302      	str	r3, [sp, #8]
 8011d8a:	2301      	movs	r3, #1
 8011d8c:	9316      	str	r3, [sp, #88]	; 0x58
 8011d8e:	9b02      	ldr	r3, [sp, #8]
 8011d90:	2b16      	cmp	r3, #22
 8011d92:	d80f      	bhi.n	8011db4 <_dtoa_r+0x194>
 8011d94:	9812      	ldr	r0, [sp, #72]	; 0x48
 8011d96:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8011d98:	00da      	lsls	r2, r3, #3
 8011d9a:	4b84      	ldr	r3, [pc, #528]	; (8011fac <_dtoa_r+0x38c>)
 8011d9c:	189b      	adds	r3, r3, r2
 8011d9e:	681a      	ldr	r2, [r3, #0]
 8011da0:	685b      	ldr	r3, [r3, #4]
 8011da2:	f7ee fb5f 	bl	8000464 <__aeabi_dcmplt>
 8011da6:	2800      	cmp	r0, #0
 8011da8:	d049      	beq.n	8011e3e <_dtoa_r+0x21e>
 8011daa:	9b02      	ldr	r3, [sp, #8]
 8011dac:	3b01      	subs	r3, #1
 8011dae:	9302      	str	r3, [sp, #8]
 8011db0:	2300      	movs	r3, #0
 8011db2:	9316      	str	r3, [sp, #88]	; 0x58
 8011db4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8011db6:	1b9e      	subs	r6, r3, r6
 8011db8:	2300      	movs	r3, #0
 8011dba:	930a      	str	r3, [sp, #40]	; 0x28
 8011dbc:	0033      	movs	r3, r6
 8011dbe:	3b01      	subs	r3, #1
 8011dc0:	930d      	str	r3, [sp, #52]	; 0x34
 8011dc2:	d504      	bpl.n	8011dce <_dtoa_r+0x1ae>
 8011dc4:	2301      	movs	r3, #1
 8011dc6:	1b9b      	subs	r3, r3, r6
 8011dc8:	930a      	str	r3, [sp, #40]	; 0x28
 8011dca:	2300      	movs	r3, #0
 8011dcc:	930d      	str	r3, [sp, #52]	; 0x34
 8011dce:	9b02      	ldr	r3, [sp, #8]
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	db36      	blt.n	8011e42 <_dtoa_r+0x222>
 8011dd4:	9a02      	ldr	r2, [sp, #8]
 8011dd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011dd8:	4694      	mov	ip, r2
 8011dda:	4463      	add	r3, ip
 8011ddc:	930d      	str	r3, [sp, #52]	; 0x34
 8011dde:	2300      	movs	r3, #0
 8011de0:	9215      	str	r2, [sp, #84]	; 0x54
 8011de2:	930e      	str	r3, [sp, #56]	; 0x38
 8011de4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011de6:	2401      	movs	r4, #1
 8011de8:	2b09      	cmp	r3, #9
 8011dea:	d864      	bhi.n	8011eb6 <_dtoa_r+0x296>
 8011dec:	2b05      	cmp	r3, #5
 8011dee:	dd02      	ble.n	8011df6 <_dtoa_r+0x1d6>
 8011df0:	2400      	movs	r4, #0
 8011df2:	3b04      	subs	r3, #4
 8011df4:	9322      	str	r3, [sp, #136]	; 0x88
 8011df6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011df8:	1e98      	subs	r0, r3, #2
 8011dfa:	2803      	cmp	r0, #3
 8011dfc:	d864      	bhi.n	8011ec8 <_dtoa_r+0x2a8>
 8011dfe:	f7ee f991 	bl	8000124 <__gnu_thumb1_case_uqi>
 8011e02:	3829      	.short	0x3829
 8011e04:	5836      	.short	0x5836
 8011e06:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8011e08:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8011e0a:	189e      	adds	r6, r3, r2
 8011e0c:	4b68      	ldr	r3, [pc, #416]	; (8011fb0 <_dtoa_r+0x390>)
 8011e0e:	18f2      	adds	r2, r6, r3
 8011e10:	2a20      	cmp	r2, #32
 8011e12:	dd0f      	ble.n	8011e34 <_dtoa_r+0x214>
 8011e14:	2340      	movs	r3, #64	; 0x40
 8011e16:	1a9b      	subs	r3, r3, r2
 8011e18:	409d      	lsls	r5, r3
 8011e1a:	4b66      	ldr	r3, [pc, #408]	; (8011fb4 <_dtoa_r+0x394>)
 8011e1c:	9802      	ldr	r0, [sp, #8]
 8011e1e:	18f3      	adds	r3, r6, r3
 8011e20:	40d8      	lsrs	r0, r3
 8011e22:	4328      	orrs	r0, r5
 8011e24:	f7f0 fc82 	bl	800272c <__aeabi_ui2d>
 8011e28:	2301      	movs	r3, #1
 8011e2a:	4c63      	ldr	r4, [pc, #396]	; (8011fb8 <_dtoa_r+0x398>)
 8011e2c:	3e01      	subs	r6, #1
 8011e2e:	1909      	adds	r1, r1, r4
 8011e30:	9318      	str	r3, [sp, #96]	; 0x60
 8011e32:	e776      	b.n	8011d22 <_dtoa_r+0x102>
 8011e34:	2320      	movs	r3, #32
 8011e36:	9802      	ldr	r0, [sp, #8]
 8011e38:	1a9b      	subs	r3, r3, r2
 8011e3a:	4098      	lsls	r0, r3
 8011e3c:	e7f2      	b.n	8011e24 <_dtoa_r+0x204>
 8011e3e:	9016      	str	r0, [sp, #88]	; 0x58
 8011e40:	e7b8      	b.n	8011db4 <_dtoa_r+0x194>
 8011e42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011e44:	9a02      	ldr	r2, [sp, #8]
 8011e46:	1a9b      	subs	r3, r3, r2
 8011e48:	930a      	str	r3, [sp, #40]	; 0x28
 8011e4a:	4253      	negs	r3, r2
 8011e4c:	930e      	str	r3, [sp, #56]	; 0x38
 8011e4e:	2300      	movs	r3, #0
 8011e50:	9315      	str	r3, [sp, #84]	; 0x54
 8011e52:	e7c7      	b.n	8011de4 <_dtoa_r+0x1c4>
 8011e54:	2300      	movs	r3, #0
 8011e56:	930f      	str	r3, [sp, #60]	; 0x3c
 8011e58:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011e5a:	930c      	str	r3, [sp, #48]	; 0x30
 8011e5c:	9307      	str	r3, [sp, #28]
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	dc13      	bgt.n	8011e8a <_dtoa_r+0x26a>
 8011e62:	2301      	movs	r3, #1
 8011e64:	001a      	movs	r2, r3
 8011e66:	930c      	str	r3, [sp, #48]	; 0x30
 8011e68:	9307      	str	r3, [sp, #28]
 8011e6a:	9223      	str	r2, [sp, #140]	; 0x8c
 8011e6c:	e00d      	b.n	8011e8a <_dtoa_r+0x26a>
 8011e6e:	2301      	movs	r3, #1
 8011e70:	e7f1      	b.n	8011e56 <_dtoa_r+0x236>
 8011e72:	2300      	movs	r3, #0
 8011e74:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8011e76:	930f      	str	r3, [sp, #60]	; 0x3c
 8011e78:	4694      	mov	ip, r2
 8011e7a:	9b02      	ldr	r3, [sp, #8]
 8011e7c:	4463      	add	r3, ip
 8011e7e:	930c      	str	r3, [sp, #48]	; 0x30
 8011e80:	3301      	adds	r3, #1
 8011e82:	9307      	str	r3, [sp, #28]
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	dc00      	bgt.n	8011e8a <_dtoa_r+0x26a>
 8011e88:	2301      	movs	r3, #1
 8011e8a:	2200      	movs	r2, #0
 8011e8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011e8e:	6042      	str	r2, [r0, #4]
 8011e90:	3204      	adds	r2, #4
 8011e92:	0015      	movs	r5, r2
 8011e94:	3514      	adds	r5, #20
 8011e96:	6841      	ldr	r1, [r0, #4]
 8011e98:	429d      	cmp	r5, r3
 8011e9a:	d919      	bls.n	8011ed0 <_dtoa_r+0x2b0>
 8011e9c:	0038      	movs	r0, r7
 8011e9e:	f7fe fd15 	bl	80108cc <_Balloc>
 8011ea2:	9006      	str	r0, [sp, #24]
 8011ea4:	2800      	cmp	r0, #0
 8011ea6:	d117      	bne.n	8011ed8 <_dtoa_r+0x2b8>
 8011ea8:	21d5      	movs	r1, #213	; 0xd5
 8011eaa:	0002      	movs	r2, r0
 8011eac:	4b43      	ldr	r3, [pc, #268]	; (8011fbc <_dtoa_r+0x39c>)
 8011eae:	0049      	lsls	r1, r1, #1
 8011eb0:	e6cb      	b.n	8011c4a <_dtoa_r+0x2a>
 8011eb2:	2301      	movs	r3, #1
 8011eb4:	e7de      	b.n	8011e74 <_dtoa_r+0x254>
 8011eb6:	2300      	movs	r3, #0
 8011eb8:	940f      	str	r4, [sp, #60]	; 0x3c
 8011eba:	9322      	str	r3, [sp, #136]	; 0x88
 8011ebc:	3b01      	subs	r3, #1
 8011ebe:	930c      	str	r3, [sp, #48]	; 0x30
 8011ec0:	9307      	str	r3, [sp, #28]
 8011ec2:	2200      	movs	r2, #0
 8011ec4:	3313      	adds	r3, #19
 8011ec6:	e7d0      	b.n	8011e6a <_dtoa_r+0x24a>
 8011ec8:	2301      	movs	r3, #1
 8011eca:	930f      	str	r3, [sp, #60]	; 0x3c
 8011ecc:	3b02      	subs	r3, #2
 8011ece:	e7f6      	b.n	8011ebe <_dtoa_r+0x29e>
 8011ed0:	3101      	adds	r1, #1
 8011ed2:	6041      	str	r1, [r0, #4]
 8011ed4:	0052      	lsls	r2, r2, #1
 8011ed6:	e7dc      	b.n	8011e92 <_dtoa_r+0x272>
 8011ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eda:	9a06      	ldr	r2, [sp, #24]
 8011edc:	601a      	str	r2, [r3, #0]
 8011ede:	9b07      	ldr	r3, [sp, #28]
 8011ee0:	2b0e      	cmp	r3, #14
 8011ee2:	d900      	bls.n	8011ee6 <_dtoa_r+0x2c6>
 8011ee4:	e0eb      	b.n	80120be <_dtoa_r+0x49e>
 8011ee6:	2c00      	cmp	r4, #0
 8011ee8:	d100      	bne.n	8011eec <_dtoa_r+0x2cc>
 8011eea:	e0e8      	b.n	80120be <_dtoa_r+0x49e>
 8011eec:	9b02      	ldr	r3, [sp, #8]
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	dd68      	ble.n	8011fc4 <_dtoa_r+0x3a4>
 8011ef2:	001a      	movs	r2, r3
 8011ef4:	210f      	movs	r1, #15
 8011ef6:	4b2d      	ldr	r3, [pc, #180]	; (8011fac <_dtoa_r+0x38c>)
 8011ef8:	400a      	ands	r2, r1
 8011efa:	00d2      	lsls	r2, r2, #3
 8011efc:	189b      	adds	r3, r3, r2
 8011efe:	681d      	ldr	r5, [r3, #0]
 8011f00:	685e      	ldr	r6, [r3, #4]
 8011f02:	9b02      	ldr	r3, [sp, #8]
 8011f04:	111c      	asrs	r4, r3, #4
 8011f06:	2302      	movs	r3, #2
 8011f08:	9310      	str	r3, [sp, #64]	; 0x40
 8011f0a:	9b02      	ldr	r3, [sp, #8]
 8011f0c:	05db      	lsls	r3, r3, #23
 8011f0e:	d50b      	bpl.n	8011f28 <_dtoa_r+0x308>
 8011f10:	4b2b      	ldr	r3, [pc, #172]	; (8011fc0 <_dtoa_r+0x3a0>)
 8011f12:	400c      	ands	r4, r1
 8011f14:	6a1a      	ldr	r2, [r3, #32]
 8011f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f18:	9812      	ldr	r0, [sp, #72]	; 0x48
 8011f1a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8011f1c:	f7ef f982 	bl	8001224 <__aeabi_ddiv>
 8011f20:	2303      	movs	r3, #3
 8011f22:	9008      	str	r0, [sp, #32]
 8011f24:	9109      	str	r1, [sp, #36]	; 0x24
 8011f26:	9310      	str	r3, [sp, #64]	; 0x40
 8011f28:	4b25      	ldr	r3, [pc, #148]	; (8011fc0 <_dtoa_r+0x3a0>)
 8011f2a:	9314      	str	r3, [sp, #80]	; 0x50
 8011f2c:	2c00      	cmp	r4, #0
 8011f2e:	d108      	bne.n	8011f42 <_dtoa_r+0x322>
 8011f30:	9808      	ldr	r0, [sp, #32]
 8011f32:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011f34:	002a      	movs	r2, r5
 8011f36:	0033      	movs	r3, r6
 8011f38:	f7ef f974 	bl	8001224 <__aeabi_ddiv>
 8011f3c:	9008      	str	r0, [sp, #32]
 8011f3e:	9109      	str	r1, [sp, #36]	; 0x24
 8011f40:	e05c      	b.n	8011ffc <_dtoa_r+0x3dc>
 8011f42:	2301      	movs	r3, #1
 8011f44:	421c      	tst	r4, r3
 8011f46:	d00b      	beq.n	8011f60 <_dtoa_r+0x340>
 8011f48:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011f4a:	0028      	movs	r0, r5
 8011f4c:	3301      	adds	r3, #1
 8011f4e:	9310      	str	r3, [sp, #64]	; 0x40
 8011f50:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011f52:	0031      	movs	r1, r6
 8011f54:	681a      	ldr	r2, [r3, #0]
 8011f56:	685b      	ldr	r3, [r3, #4]
 8011f58:	f7ef fd66 	bl	8001a28 <__aeabi_dmul>
 8011f5c:	0005      	movs	r5, r0
 8011f5e:	000e      	movs	r6, r1
 8011f60:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011f62:	1064      	asrs	r4, r4, #1
 8011f64:	3308      	adds	r3, #8
 8011f66:	e7e0      	b.n	8011f2a <_dtoa_r+0x30a>
 8011f68:	08013bfc 	.word	0x08013bfc
 8011f6c:	08013dea 	.word	0x08013dea
 8011f70:	7ff00000 	.word	0x7ff00000
 8011f74:	0000270f 	.word	0x0000270f
 8011f78:	08013de4 	.word	0x08013de4
 8011f7c:	08013de7 	.word	0x08013de7
 8011f80:	08013de8 	.word	0x08013de8
 8011f84:	08013de9 	.word	0x08013de9
 8011f88:	3ff00000 	.word	0x3ff00000
 8011f8c:	fffffc01 	.word	0xfffffc01
 8011f90:	3ff80000 	.word	0x3ff80000
 8011f94:	636f4361 	.word	0x636f4361
 8011f98:	3fd287a7 	.word	0x3fd287a7
 8011f9c:	8b60c8b3 	.word	0x8b60c8b3
 8011fa0:	3fc68a28 	.word	0x3fc68a28
 8011fa4:	509f79fb 	.word	0x509f79fb
 8011fa8:	3fd34413 	.word	0x3fd34413
 8011fac:	08013c98 	.word	0x08013c98
 8011fb0:	00000432 	.word	0x00000432
 8011fb4:	00000412 	.word	0x00000412
 8011fb8:	fe100000 	.word	0xfe100000
 8011fbc:	08013b71 	.word	0x08013b71
 8011fc0:	08013c70 	.word	0x08013c70
 8011fc4:	2302      	movs	r3, #2
 8011fc6:	9310      	str	r3, [sp, #64]	; 0x40
 8011fc8:	9b02      	ldr	r3, [sp, #8]
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d016      	beq.n	8011ffc <_dtoa_r+0x3dc>
 8011fce:	9812      	ldr	r0, [sp, #72]	; 0x48
 8011fd0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8011fd2:	425c      	negs	r4, r3
 8011fd4:	230f      	movs	r3, #15
 8011fd6:	4ab6      	ldr	r2, [pc, #728]	; (80122b0 <_dtoa_r+0x690>)
 8011fd8:	4023      	ands	r3, r4
 8011fda:	00db      	lsls	r3, r3, #3
 8011fdc:	18d3      	adds	r3, r2, r3
 8011fde:	681a      	ldr	r2, [r3, #0]
 8011fe0:	685b      	ldr	r3, [r3, #4]
 8011fe2:	f7ef fd21 	bl	8001a28 <__aeabi_dmul>
 8011fe6:	2601      	movs	r6, #1
 8011fe8:	2300      	movs	r3, #0
 8011fea:	9008      	str	r0, [sp, #32]
 8011fec:	9109      	str	r1, [sp, #36]	; 0x24
 8011fee:	4db1      	ldr	r5, [pc, #708]	; (80122b4 <_dtoa_r+0x694>)
 8011ff0:	1124      	asrs	r4, r4, #4
 8011ff2:	2c00      	cmp	r4, #0
 8011ff4:	d000      	beq.n	8011ff8 <_dtoa_r+0x3d8>
 8011ff6:	e094      	b.n	8012122 <_dtoa_r+0x502>
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d19f      	bne.n	8011f3c <_dtoa_r+0x31c>
 8011ffc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d100      	bne.n	8012004 <_dtoa_r+0x3e4>
 8012002:	e09b      	b.n	801213c <_dtoa_r+0x51c>
 8012004:	9c08      	ldr	r4, [sp, #32]
 8012006:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8012008:	2200      	movs	r2, #0
 801200a:	0020      	movs	r0, r4
 801200c:	0029      	movs	r1, r5
 801200e:	4baa      	ldr	r3, [pc, #680]	; (80122b8 <_dtoa_r+0x698>)
 8012010:	f7ee fa28 	bl	8000464 <__aeabi_dcmplt>
 8012014:	2800      	cmp	r0, #0
 8012016:	d100      	bne.n	801201a <_dtoa_r+0x3fa>
 8012018:	e090      	b.n	801213c <_dtoa_r+0x51c>
 801201a:	9b07      	ldr	r3, [sp, #28]
 801201c:	2b00      	cmp	r3, #0
 801201e:	d100      	bne.n	8012022 <_dtoa_r+0x402>
 8012020:	e08c      	b.n	801213c <_dtoa_r+0x51c>
 8012022:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012024:	2b00      	cmp	r3, #0
 8012026:	dd46      	ble.n	80120b6 <_dtoa_r+0x496>
 8012028:	9b02      	ldr	r3, [sp, #8]
 801202a:	2200      	movs	r2, #0
 801202c:	0020      	movs	r0, r4
 801202e:	0029      	movs	r1, r5
 8012030:	1e5e      	subs	r6, r3, #1
 8012032:	4ba2      	ldr	r3, [pc, #648]	; (80122bc <_dtoa_r+0x69c>)
 8012034:	f7ef fcf8 	bl	8001a28 <__aeabi_dmul>
 8012038:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801203a:	9008      	str	r0, [sp, #32]
 801203c:	9109      	str	r1, [sp, #36]	; 0x24
 801203e:	3301      	adds	r3, #1
 8012040:	9310      	str	r3, [sp, #64]	; 0x40
 8012042:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012044:	9810      	ldr	r0, [sp, #64]	; 0x40
 8012046:	9c08      	ldr	r4, [sp, #32]
 8012048:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801204a:	9314      	str	r3, [sp, #80]	; 0x50
 801204c:	f7f0 fb3e 	bl	80026cc <__aeabi_i2d>
 8012050:	0022      	movs	r2, r4
 8012052:	002b      	movs	r3, r5
 8012054:	f7ef fce8 	bl	8001a28 <__aeabi_dmul>
 8012058:	2200      	movs	r2, #0
 801205a:	4b99      	ldr	r3, [pc, #612]	; (80122c0 <_dtoa_r+0x6a0>)
 801205c:	f7ee fda6 	bl	8000bac <__aeabi_dadd>
 8012060:	9010      	str	r0, [sp, #64]	; 0x40
 8012062:	9111      	str	r1, [sp, #68]	; 0x44
 8012064:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012066:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012068:	9208      	str	r2, [sp, #32]
 801206a:	9309      	str	r3, [sp, #36]	; 0x24
 801206c:	4a95      	ldr	r2, [pc, #596]	; (80122c4 <_dtoa_r+0x6a4>)
 801206e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012070:	4694      	mov	ip, r2
 8012072:	4463      	add	r3, ip
 8012074:	9317      	str	r3, [sp, #92]	; 0x5c
 8012076:	9309      	str	r3, [sp, #36]	; 0x24
 8012078:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801207a:	2b00      	cmp	r3, #0
 801207c:	d161      	bne.n	8012142 <_dtoa_r+0x522>
 801207e:	2200      	movs	r2, #0
 8012080:	0020      	movs	r0, r4
 8012082:	0029      	movs	r1, r5
 8012084:	4b90      	ldr	r3, [pc, #576]	; (80122c8 <_dtoa_r+0x6a8>)
 8012086:	f7ef ff3b 	bl	8001f00 <__aeabi_dsub>
 801208a:	9a08      	ldr	r2, [sp, #32]
 801208c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801208e:	0004      	movs	r4, r0
 8012090:	000d      	movs	r5, r1
 8012092:	f7ee f9fb 	bl	800048c <__aeabi_dcmpgt>
 8012096:	2800      	cmp	r0, #0
 8012098:	d000      	beq.n	801209c <_dtoa_r+0x47c>
 801209a:	e2af      	b.n	80125fc <_dtoa_r+0x9dc>
 801209c:	488b      	ldr	r0, [pc, #556]	; (80122cc <_dtoa_r+0x6ac>)
 801209e:	9911      	ldr	r1, [sp, #68]	; 0x44
 80120a0:	4684      	mov	ip, r0
 80120a2:	4461      	add	r1, ip
 80120a4:	000b      	movs	r3, r1
 80120a6:	0020      	movs	r0, r4
 80120a8:	0029      	movs	r1, r5
 80120aa:	9a08      	ldr	r2, [sp, #32]
 80120ac:	f7ee f9da 	bl	8000464 <__aeabi_dcmplt>
 80120b0:	2800      	cmp	r0, #0
 80120b2:	d000      	beq.n	80120b6 <_dtoa_r+0x496>
 80120b4:	e29f      	b.n	80125f6 <_dtoa_r+0x9d6>
 80120b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80120b8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80120ba:	9308      	str	r3, [sp, #32]
 80120bc:	9409      	str	r4, [sp, #36]	; 0x24
 80120be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	da00      	bge.n	80120c6 <_dtoa_r+0x4a6>
 80120c4:	e172      	b.n	80123ac <_dtoa_r+0x78c>
 80120c6:	9a02      	ldr	r2, [sp, #8]
 80120c8:	2a0e      	cmp	r2, #14
 80120ca:	dd00      	ble.n	80120ce <_dtoa_r+0x4ae>
 80120cc:	e16e      	b.n	80123ac <_dtoa_r+0x78c>
 80120ce:	4b78      	ldr	r3, [pc, #480]	; (80122b0 <_dtoa_r+0x690>)
 80120d0:	00d2      	lsls	r2, r2, #3
 80120d2:	189b      	adds	r3, r3, r2
 80120d4:	685c      	ldr	r4, [r3, #4]
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	930a      	str	r3, [sp, #40]	; 0x28
 80120da:	940b      	str	r4, [sp, #44]	; 0x2c
 80120dc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80120de:	2b00      	cmp	r3, #0
 80120e0:	db00      	blt.n	80120e4 <_dtoa_r+0x4c4>
 80120e2:	e0f7      	b.n	80122d4 <_dtoa_r+0x6b4>
 80120e4:	9b07      	ldr	r3, [sp, #28]
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	dd00      	ble.n	80120ec <_dtoa_r+0x4cc>
 80120ea:	e0f3      	b.n	80122d4 <_dtoa_r+0x6b4>
 80120ec:	d000      	beq.n	80120f0 <_dtoa_r+0x4d0>
 80120ee:	e282      	b.n	80125f6 <_dtoa_r+0x9d6>
 80120f0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80120f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80120f4:	2200      	movs	r2, #0
 80120f6:	4b74      	ldr	r3, [pc, #464]	; (80122c8 <_dtoa_r+0x6a8>)
 80120f8:	f7ef fc96 	bl	8001a28 <__aeabi_dmul>
 80120fc:	9a08      	ldr	r2, [sp, #32]
 80120fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012100:	f7ee f9ce 	bl	80004a0 <__aeabi_dcmpge>
 8012104:	9e07      	ldr	r6, [sp, #28]
 8012106:	0035      	movs	r5, r6
 8012108:	2800      	cmp	r0, #0
 801210a:	d000      	beq.n	801210e <_dtoa_r+0x4ee>
 801210c:	e259      	b.n	80125c2 <_dtoa_r+0x9a2>
 801210e:	9b06      	ldr	r3, [sp, #24]
 8012110:	9a06      	ldr	r2, [sp, #24]
 8012112:	3301      	adds	r3, #1
 8012114:	9308      	str	r3, [sp, #32]
 8012116:	2331      	movs	r3, #49	; 0x31
 8012118:	7013      	strb	r3, [r2, #0]
 801211a:	9b02      	ldr	r3, [sp, #8]
 801211c:	3301      	adds	r3, #1
 801211e:	9302      	str	r3, [sp, #8]
 8012120:	e254      	b.n	80125cc <_dtoa_r+0x9ac>
 8012122:	4234      	tst	r4, r6
 8012124:	d007      	beq.n	8012136 <_dtoa_r+0x516>
 8012126:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012128:	3301      	adds	r3, #1
 801212a:	9310      	str	r3, [sp, #64]	; 0x40
 801212c:	682a      	ldr	r2, [r5, #0]
 801212e:	686b      	ldr	r3, [r5, #4]
 8012130:	f7ef fc7a 	bl	8001a28 <__aeabi_dmul>
 8012134:	0033      	movs	r3, r6
 8012136:	1064      	asrs	r4, r4, #1
 8012138:	3508      	adds	r5, #8
 801213a:	e75a      	b.n	8011ff2 <_dtoa_r+0x3d2>
 801213c:	9e02      	ldr	r6, [sp, #8]
 801213e:	9b07      	ldr	r3, [sp, #28]
 8012140:	e780      	b.n	8012044 <_dtoa_r+0x424>
 8012142:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012144:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012146:	1e5a      	subs	r2, r3, #1
 8012148:	4b59      	ldr	r3, [pc, #356]	; (80122b0 <_dtoa_r+0x690>)
 801214a:	00d2      	lsls	r2, r2, #3
 801214c:	189b      	adds	r3, r3, r2
 801214e:	681a      	ldr	r2, [r3, #0]
 8012150:	685b      	ldr	r3, [r3, #4]
 8012152:	2900      	cmp	r1, #0
 8012154:	d051      	beq.n	80121fa <_dtoa_r+0x5da>
 8012156:	2000      	movs	r0, #0
 8012158:	495d      	ldr	r1, [pc, #372]	; (80122d0 <_dtoa_r+0x6b0>)
 801215a:	f7ef f863 	bl	8001224 <__aeabi_ddiv>
 801215e:	9a08      	ldr	r2, [sp, #32]
 8012160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012162:	f7ef fecd 	bl	8001f00 <__aeabi_dsub>
 8012166:	9a06      	ldr	r2, [sp, #24]
 8012168:	9b06      	ldr	r3, [sp, #24]
 801216a:	4694      	mov	ip, r2
 801216c:	9317      	str	r3, [sp, #92]	; 0x5c
 801216e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012170:	9010      	str	r0, [sp, #64]	; 0x40
 8012172:	9111      	str	r1, [sp, #68]	; 0x44
 8012174:	4463      	add	r3, ip
 8012176:	9319      	str	r3, [sp, #100]	; 0x64
 8012178:	0029      	movs	r1, r5
 801217a:	0020      	movs	r0, r4
 801217c:	f7f0 fa70 	bl	8002660 <__aeabi_d2iz>
 8012180:	9014      	str	r0, [sp, #80]	; 0x50
 8012182:	f7f0 faa3 	bl	80026cc <__aeabi_i2d>
 8012186:	0002      	movs	r2, r0
 8012188:	000b      	movs	r3, r1
 801218a:	0020      	movs	r0, r4
 801218c:	0029      	movs	r1, r5
 801218e:	f7ef feb7 	bl	8001f00 <__aeabi_dsub>
 8012192:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012194:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012196:	3301      	adds	r3, #1
 8012198:	9308      	str	r3, [sp, #32]
 801219a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801219c:	0004      	movs	r4, r0
 801219e:	3330      	adds	r3, #48	; 0x30
 80121a0:	7013      	strb	r3, [r2, #0]
 80121a2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80121a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80121a6:	000d      	movs	r5, r1
 80121a8:	f7ee f95c 	bl	8000464 <__aeabi_dcmplt>
 80121ac:	2800      	cmp	r0, #0
 80121ae:	d175      	bne.n	801229c <_dtoa_r+0x67c>
 80121b0:	0022      	movs	r2, r4
 80121b2:	002b      	movs	r3, r5
 80121b4:	2000      	movs	r0, #0
 80121b6:	4940      	ldr	r1, [pc, #256]	; (80122b8 <_dtoa_r+0x698>)
 80121b8:	f7ef fea2 	bl	8001f00 <__aeabi_dsub>
 80121bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80121be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80121c0:	f7ee f950 	bl	8000464 <__aeabi_dcmplt>
 80121c4:	2800      	cmp	r0, #0
 80121c6:	d000      	beq.n	80121ca <_dtoa_r+0x5aa>
 80121c8:	e0d2      	b.n	8012370 <_dtoa_r+0x750>
 80121ca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80121cc:	9a08      	ldr	r2, [sp, #32]
 80121ce:	4293      	cmp	r3, r2
 80121d0:	d100      	bne.n	80121d4 <_dtoa_r+0x5b4>
 80121d2:	e770      	b.n	80120b6 <_dtoa_r+0x496>
 80121d4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80121d6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80121d8:	2200      	movs	r2, #0
 80121da:	4b38      	ldr	r3, [pc, #224]	; (80122bc <_dtoa_r+0x69c>)
 80121dc:	f7ef fc24 	bl	8001a28 <__aeabi_dmul>
 80121e0:	4b36      	ldr	r3, [pc, #216]	; (80122bc <_dtoa_r+0x69c>)
 80121e2:	9010      	str	r0, [sp, #64]	; 0x40
 80121e4:	9111      	str	r1, [sp, #68]	; 0x44
 80121e6:	2200      	movs	r2, #0
 80121e8:	0020      	movs	r0, r4
 80121ea:	0029      	movs	r1, r5
 80121ec:	f7ef fc1c 	bl	8001a28 <__aeabi_dmul>
 80121f0:	9b08      	ldr	r3, [sp, #32]
 80121f2:	0004      	movs	r4, r0
 80121f4:	000d      	movs	r5, r1
 80121f6:	9317      	str	r3, [sp, #92]	; 0x5c
 80121f8:	e7be      	b.n	8012178 <_dtoa_r+0x558>
 80121fa:	9808      	ldr	r0, [sp, #32]
 80121fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80121fe:	f7ef fc13 	bl	8001a28 <__aeabi_dmul>
 8012202:	9a06      	ldr	r2, [sp, #24]
 8012204:	9b06      	ldr	r3, [sp, #24]
 8012206:	4694      	mov	ip, r2
 8012208:	9308      	str	r3, [sp, #32]
 801220a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801220c:	9010      	str	r0, [sp, #64]	; 0x40
 801220e:	9111      	str	r1, [sp, #68]	; 0x44
 8012210:	4463      	add	r3, ip
 8012212:	9319      	str	r3, [sp, #100]	; 0x64
 8012214:	0029      	movs	r1, r5
 8012216:	0020      	movs	r0, r4
 8012218:	f7f0 fa22 	bl	8002660 <__aeabi_d2iz>
 801221c:	9017      	str	r0, [sp, #92]	; 0x5c
 801221e:	f7f0 fa55 	bl	80026cc <__aeabi_i2d>
 8012222:	0002      	movs	r2, r0
 8012224:	000b      	movs	r3, r1
 8012226:	0020      	movs	r0, r4
 8012228:	0029      	movs	r1, r5
 801222a:	f7ef fe69 	bl	8001f00 <__aeabi_dsub>
 801222e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012230:	9a08      	ldr	r2, [sp, #32]
 8012232:	3330      	adds	r3, #48	; 0x30
 8012234:	7013      	strb	r3, [r2, #0]
 8012236:	0013      	movs	r3, r2
 8012238:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801223a:	3301      	adds	r3, #1
 801223c:	0004      	movs	r4, r0
 801223e:	000d      	movs	r5, r1
 8012240:	9308      	str	r3, [sp, #32]
 8012242:	4293      	cmp	r3, r2
 8012244:	d12c      	bne.n	80122a0 <_dtoa_r+0x680>
 8012246:	9810      	ldr	r0, [sp, #64]	; 0x40
 8012248:	9911      	ldr	r1, [sp, #68]	; 0x44
 801224a:	9a06      	ldr	r2, [sp, #24]
 801224c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801224e:	4694      	mov	ip, r2
 8012250:	4463      	add	r3, ip
 8012252:	2200      	movs	r2, #0
 8012254:	9308      	str	r3, [sp, #32]
 8012256:	4b1e      	ldr	r3, [pc, #120]	; (80122d0 <_dtoa_r+0x6b0>)
 8012258:	f7ee fca8 	bl	8000bac <__aeabi_dadd>
 801225c:	0002      	movs	r2, r0
 801225e:	000b      	movs	r3, r1
 8012260:	0020      	movs	r0, r4
 8012262:	0029      	movs	r1, r5
 8012264:	f7ee f912 	bl	800048c <__aeabi_dcmpgt>
 8012268:	2800      	cmp	r0, #0
 801226a:	d000      	beq.n	801226e <_dtoa_r+0x64e>
 801226c:	e080      	b.n	8012370 <_dtoa_r+0x750>
 801226e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012270:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012272:	2000      	movs	r0, #0
 8012274:	4916      	ldr	r1, [pc, #88]	; (80122d0 <_dtoa_r+0x6b0>)
 8012276:	f7ef fe43 	bl	8001f00 <__aeabi_dsub>
 801227a:	0002      	movs	r2, r0
 801227c:	000b      	movs	r3, r1
 801227e:	0020      	movs	r0, r4
 8012280:	0029      	movs	r1, r5
 8012282:	f7ee f8ef 	bl	8000464 <__aeabi_dcmplt>
 8012286:	2800      	cmp	r0, #0
 8012288:	d100      	bne.n	801228c <_dtoa_r+0x66c>
 801228a:	e714      	b.n	80120b6 <_dtoa_r+0x496>
 801228c:	9b08      	ldr	r3, [sp, #32]
 801228e:	001a      	movs	r2, r3
 8012290:	3a01      	subs	r2, #1
 8012292:	9208      	str	r2, [sp, #32]
 8012294:	7812      	ldrb	r2, [r2, #0]
 8012296:	2a30      	cmp	r2, #48	; 0x30
 8012298:	d0f8      	beq.n	801228c <_dtoa_r+0x66c>
 801229a:	9308      	str	r3, [sp, #32]
 801229c:	9602      	str	r6, [sp, #8]
 801229e:	e055      	b.n	801234c <_dtoa_r+0x72c>
 80122a0:	2200      	movs	r2, #0
 80122a2:	4b06      	ldr	r3, [pc, #24]	; (80122bc <_dtoa_r+0x69c>)
 80122a4:	f7ef fbc0 	bl	8001a28 <__aeabi_dmul>
 80122a8:	0004      	movs	r4, r0
 80122aa:	000d      	movs	r5, r1
 80122ac:	e7b2      	b.n	8012214 <_dtoa_r+0x5f4>
 80122ae:	46c0      	nop			; (mov r8, r8)
 80122b0:	08013c98 	.word	0x08013c98
 80122b4:	08013c70 	.word	0x08013c70
 80122b8:	3ff00000 	.word	0x3ff00000
 80122bc:	40240000 	.word	0x40240000
 80122c0:	401c0000 	.word	0x401c0000
 80122c4:	fcc00000 	.word	0xfcc00000
 80122c8:	40140000 	.word	0x40140000
 80122cc:	7cc00000 	.word	0x7cc00000
 80122d0:	3fe00000 	.word	0x3fe00000
 80122d4:	9b07      	ldr	r3, [sp, #28]
 80122d6:	9e06      	ldr	r6, [sp, #24]
 80122d8:	3b01      	subs	r3, #1
 80122da:	199b      	adds	r3, r3, r6
 80122dc:	930c      	str	r3, [sp, #48]	; 0x30
 80122de:	9c08      	ldr	r4, [sp, #32]
 80122e0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80122e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80122e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80122e6:	0020      	movs	r0, r4
 80122e8:	0029      	movs	r1, r5
 80122ea:	f7ee ff9b 	bl	8001224 <__aeabi_ddiv>
 80122ee:	f7f0 f9b7 	bl	8002660 <__aeabi_d2iz>
 80122f2:	9007      	str	r0, [sp, #28]
 80122f4:	f7f0 f9ea 	bl	80026cc <__aeabi_i2d>
 80122f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80122fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80122fc:	f7ef fb94 	bl	8001a28 <__aeabi_dmul>
 8012300:	0002      	movs	r2, r0
 8012302:	000b      	movs	r3, r1
 8012304:	0020      	movs	r0, r4
 8012306:	0029      	movs	r1, r5
 8012308:	f7ef fdfa 	bl	8001f00 <__aeabi_dsub>
 801230c:	0033      	movs	r3, r6
 801230e:	9a07      	ldr	r2, [sp, #28]
 8012310:	3601      	adds	r6, #1
 8012312:	3230      	adds	r2, #48	; 0x30
 8012314:	701a      	strb	r2, [r3, #0]
 8012316:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012318:	9608      	str	r6, [sp, #32]
 801231a:	429a      	cmp	r2, r3
 801231c:	d139      	bne.n	8012392 <_dtoa_r+0x772>
 801231e:	0002      	movs	r2, r0
 8012320:	000b      	movs	r3, r1
 8012322:	f7ee fc43 	bl	8000bac <__aeabi_dadd>
 8012326:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012328:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801232a:	0004      	movs	r4, r0
 801232c:	000d      	movs	r5, r1
 801232e:	f7ee f8ad 	bl	800048c <__aeabi_dcmpgt>
 8012332:	2800      	cmp	r0, #0
 8012334:	d11b      	bne.n	801236e <_dtoa_r+0x74e>
 8012336:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012338:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801233a:	0020      	movs	r0, r4
 801233c:	0029      	movs	r1, r5
 801233e:	f7ee f88b 	bl	8000458 <__aeabi_dcmpeq>
 8012342:	2800      	cmp	r0, #0
 8012344:	d002      	beq.n	801234c <_dtoa_r+0x72c>
 8012346:	9b07      	ldr	r3, [sp, #28]
 8012348:	07db      	lsls	r3, r3, #31
 801234a:	d410      	bmi.n	801236e <_dtoa_r+0x74e>
 801234c:	0038      	movs	r0, r7
 801234e:	9905      	ldr	r1, [sp, #20]
 8012350:	f7fe fb00 	bl	8010954 <_Bfree>
 8012354:	2300      	movs	r3, #0
 8012356:	9a08      	ldr	r2, [sp, #32]
 8012358:	9802      	ldr	r0, [sp, #8]
 801235a:	7013      	strb	r3, [r2, #0]
 801235c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801235e:	3001      	adds	r0, #1
 8012360:	6018      	str	r0, [r3, #0]
 8012362:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8012364:	2b00      	cmp	r3, #0
 8012366:	d100      	bne.n	801236a <_dtoa_r+0x74a>
 8012368:	e4a6      	b.n	8011cb8 <_dtoa_r+0x98>
 801236a:	601a      	str	r2, [r3, #0]
 801236c:	e4a4      	b.n	8011cb8 <_dtoa_r+0x98>
 801236e:	9e02      	ldr	r6, [sp, #8]
 8012370:	9b08      	ldr	r3, [sp, #32]
 8012372:	9308      	str	r3, [sp, #32]
 8012374:	3b01      	subs	r3, #1
 8012376:	781a      	ldrb	r2, [r3, #0]
 8012378:	2a39      	cmp	r2, #57	; 0x39
 801237a:	d106      	bne.n	801238a <_dtoa_r+0x76a>
 801237c:	9a06      	ldr	r2, [sp, #24]
 801237e:	429a      	cmp	r2, r3
 8012380:	d1f7      	bne.n	8012372 <_dtoa_r+0x752>
 8012382:	2230      	movs	r2, #48	; 0x30
 8012384:	9906      	ldr	r1, [sp, #24]
 8012386:	3601      	adds	r6, #1
 8012388:	700a      	strb	r2, [r1, #0]
 801238a:	781a      	ldrb	r2, [r3, #0]
 801238c:	3201      	adds	r2, #1
 801238e:	701a      	strb	r2, [r3, #0]
 8012390:	e784      	b.n	801229c <_dtoa_r+0x67c>
 8012392:	2200      	movs	r2, #0
 8012394:	4baa      	ldr	r3, [pc, #680]	; (8012640 <_dtoa_r+0xa20>)
 8012396:	f7ef fb47 	bl	8001a28 <__aeabi_dmul>
 801239a:	2200      	movs	r2, #0
 801239c:	2300      	movs	r3, #0
 801239e:	0004      	movs	r4, r0
 80123a0:	000d      	movs	r5, r1
 80123a2:	f7ee f859 	bl	8000458 <__aeabi_dcmpeq>
 80123a6:	2800      	cmp	r0, #0
 80123a8:	d09b      	beq.n	80122e2 <_dtoa_r+0x6c2>
 80123aa:	e7cf      	b.n	801234c <_dtoa_r+0x72c>
 80123ac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80123ae:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80123b0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80123b2:	2d00      	cmp	r5, #0
 80123b4:	d012      	beq.n	80123dc <_dtoa_r+0x7bc>
 80123b6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80123b8:	2a01      	cmp	r2, #1
 80123ba:	dc66      	bgt.n	801248a <_dtoa_r+0x86a>
 80123bc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80123be:	2a00      	cmp	r2, #0
 80123c0:	d05d      	beq.n	801247e <_dtoa_r+0x85e>
 80123c2:	4aa0      	ldr	r2, [pc, #640]	; (8012644 <_dtoa_r+0xa24>)
 80123c4:	189b      	adds	r3, r3, r2
 80123c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80123c8:	2101      	movs	r1, #1
 80123ca:	18d2      	adds	r2, r2, r3
 80123cc:	920a      	str	r2, [sp, #40]	; 0x28
 80123ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80123d0:	0038      	movs	r0, r7
 80123d2:	18d3      	adds	r3, r2, r3
 80123d4:	930d      	str	r3, [sp, #52]	; 0x34
 80123d6:	f7fe fbb9 	bl	8010b4c <__i2b>
 80123da:	0005      	movs	r5, r0
 80123dc:	2c00      	cmp	r4, #0
 80123de:	dd0e      	ble.n	80123fe <_dtoa_r+0x7de>
 80123e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	dd0b      	ble.n	80123fe <_dtoa_r+0x7de>
 80123e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80123e8:	0023      	movs	r3, r4
 80123ea:	4294      	cmp	r4, r2
 80123ec:	dd00      	ble.n	80123f0 <_dtoa_r+0x7d0>
 80123ee:	0013      	movs	r3, r2
 80123f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80123f2:	1ae4      	subs	r4, r4, r3
 80123f4:	1ad2      	subs	r2, r2, r3
 80123f6:	920a      	str	r2, [sp, #40]	; 0x28
 80123f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80123fa:	1ad3      	subs	r3, r2, r3
 80123fc:	930d      	str	r3, [sp, #52]	; 0x34
 80123fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012400:	2b00      	cmp	r3, #0
 8012402:	d01f      	beq.n	8012444 <_dtoa_r+0x824>
 8012404:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012406:	2b00      	cmp	r3, #0
 8012408:	d054      	beq.n	80124b4 <_dtoa_r+0x894>
 801240a:	2e00      	cmp	r6, #0
 801240c:	dd11      	ble.n	8012432 <_dtoa_r+0x812>
 801240e:	0029      	movs	r1, r5
 8012410:	0032      	movs	r2, r6
 8012412:	0038      	movs	r0, r7
 8012414:	f7fe fc60 	bl	8010cd8 <__pow5mult>
 8012418:	9a05      	ldr	r2, [sp, #20]
 801241a:	0001      	movs	r1, r0
 801241c:	0005      	movs	r5, r0
 801241e:	0038      	movs	r0, r7
 8012420:	f7fe fbaa 	bl	8010b78 <__multiply>
 8012424:	9905      	ldr	r1, [sp, #20]
 8012426:	9014      	str	r0, [sp, #80]	; 0x50
 8012428:	0038      	movs	r0, r7
 801242a:	f7fe fa93 	bl	8010954 <_Bfree>
 801242e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012430:	9305      	str	r3, [sp, #20]
 8012432:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012434:	1b9a      	subs	r2, r3, r6
 8012436:	42b3      	cmp	r3, r6
 8012438:	d004      	beq.n	8012444 <_dtoa_r+0x824>
 801243a:	0038      	movs	r0, r7
 801243c:	9905      	ldr	r1, [sp, #20]
 801243e:	f7fe fc4b 	bl	8010cd8 <__pow5mult>
 8012442:	9005      	str	r0, [sp, #20]
 8012444:	2101      	movs	r1, #1
 8012446:	0038      	movs	r0, r7
 8012448:	f7fe fb80 	bl	8010b4c <__i2b>
 801244c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801244e:	0006      	movs	r6, r0
 8012450:	2b00      	cmp	r3, #0
 8012452:	dd31      	ble.n	80124b8 <_dtoa_r+0x898>
 8012454:	001a      	movs	r2, r3
 8012456:	0001      	movs	r1, r0
 8012458:	0038      	movs	r0, r7
 801245a:	f7fe fc3d 	bl	8010cd8 <__pow5mult>
 801245e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012460:	0006      	movs	r6, r0
 8012462:	2b01      	cmp	r3, #1
 8012464:	dd2d      	ble.n	80124c2 <_dtoa_r+0x8a2>
 8012466:	2300      	movs	r3, #0
 8012468:	930e      	str	r3, [sp, #56]	; 0x38
 801246a:	6933      	ldr	r3, [r6, #16]
 801246c:	3303      	adds	r3, #3
 801246e:	009b      	lsls	r3, r3, #2
 8012470:	18f3      	adds	r3, r6, r3
 8012472:	6858      	ldr	r0, [r3, #4]
 8012474:	f7fe fb22 	bl	8010abc <__hi0bits>
 8012478:	2320      	movs	r3, #32
 801247a:	1a18      	subs	r0, r3, r0
 801247c:	e039      	b.n	80124f2 <_dtoa_r+0x8d2>
 801247e:	2336      	movs	r3, #54	; 0x36
 8012480:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8012482:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8012484:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8012486:	1a9b      	subs	r3, r3, r2
 8012488:	e79d      	b.n	80123c6 <_dtoa_r+0x7a6>
 801248a:	9b07      	ldr	r3, [sp, #28]
 801248c:	1e5e      	subs	r6, r3, #1
 801248e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012490:	42b3      	cmp	r3, r6
 8012492:	db07      	blt.n	80124a4 <_dtoa_r+0x884>
 8012494:	1b9e      	subs	r6, r3, r6
 8012496:	9b07      	ldr	r3, [sp, #28]
 8012498:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801249a:	2b00      	cmp	r3, #0
 801249c:	da93      	bge.n	80123c6 <_dtoa_r+0x7a6>
 801249e:	1ae4      	subs	r4, r4, r3
 80124a0:	2300      	movs	r3, #0
 80124a2:	e790      	b.n	80123c6 <_dtoa_r+0x7a6>
 80124a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80124a6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80124a8:	1af3      	subs	r3, r6, r3
 80124aa:	18d3      	adds	r3, r2, r3
 80124ac:	960e      	str	r6, [sp, #56]	; 0x38
 80124ae:	9315      	str	r3, [sp, #84]	; 0x54
 80124b0:	2600      	movs	r6, #0
 80124b2:	e7f0      	b.n	8012496 <_dtoa_r+0x876>
 80124b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80124b6:	e7c0      	b.n	801243a <_dtoa_r+0x81a>
 80124b8:	2300      	movs	r3, #0
 80124ba:	930e      	str	r3, [sp, #56]	; 0x38
 80124bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80124be:	2b01      	cmp	r3, #1
 80124c0:	dc13      	bgt.n	80124ea <_dtoa_r+0x8ca>
 80124c2:	2300      	movs	r3, #0
 80124c4:	930e      	str	r3, [sp, #56]	; 0x38
 80124c6:	9b08      	ldr	r3, [sp, #32]
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d10e      	bne.n	80124ea <_dtoa_r+0x8ca>
 80124cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80124ce:	031b      	lsls	r3, r3, #12
 80124d0:	d10b      	bne.n	80124ea <_dtoa_r+0x8ca>
 80124d2:	4b5d      	ldr	r3, [pc, #372]	; (8012648 <_dtoa_r+0xa28>)
 80124d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80124d6:	4213      	tst	r3, r2
 80124d8:	d007      	beq.n	80124ea <_dtoa_r+0x8ca>
 80124da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80124dc:	3301      	adds	r3, #1
 80124de:	930a      	str	r3, [sp, #40]	; 0x28
 80124e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80124e2:	3301      	adds	r3, #1
 80124e4:	930d      	str	r3, [sp, #52]	; 0x34
 80124e6:	2301      	movs	r3, #1
 80124e8:	930e      	str	r3, [sp, #56]	; 0x38
 80124ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80124ec:	2001      	movs	r0, #1
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d1bb      	bne.n	801246a <_dtoa_r+0x84a>
 80124f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80124f4:	221f      	movs	r2, #31
 80124f6:	1818      	adds	r0, r3, r0
 80124f8:	0003      	movs	r3, r0
 80124fa:	4013      	ands	r3, r2
 80124fc:	4210      	tst	r0, r2
 80124fe:	d046      	beq.n	801258e <_dtoa_r+0x96e>
 8012500:	3201      	adds	r2, #1
 8012502:	1ad2      	subs	r2, r2, r3
 8012504:	2a04      	cmp	r2, #4
 8012506:	dd3f      	ble.n	8012588 <_dtoa_r+0x968>
 8012508:	221c      	movs	r2, #28
 801250a:	1ad3      	subs	r3, r2, r3
 801250c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801250e:	18e4      	adds	r4, r4, r3
 8012510:	18d2      	adds	r2, r2, r3
 8012512:	920a      	str	r2, [sp, #40]	; 0x28
 8012514:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012516:	18d3      	adds	r3, r2, r3
 8012518:	930d      	str	r3, [sp, #52]	; 0x34
 801251a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801251c:	2b00      	cmp	r3, #0
 801251e:	dd05      	ble.n	801252c <_dtoa_r+0x90c>
 8012520:	001a      	movs	r2, r3
 8012522:	0038      	movs	r0, r7
 8012524:	9905      	ldr	r1, [sp, #20]
 8012526:	f7fe fc33 	bl	8010d90 <__lshift>
 801252a:	9005      	str	r0, [sp, #20]
 801252c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801252e:	2b00      	cmp	r3, #0
 8012530:	dd05      	ble.n	801253e <_dtoa_r+0x91e>
 8012532:	0031      	movs	r1, r6
 8012534:	001a      	movs	r2, r3
 8012536:	0038      	movs	r0, r7
 8012538:	f7fe fc2a 	bl	8010d90 <__lshift>
 801253c:	0006      	movs	r6, r0
 801253e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012540:	2b00      	cmp	r3, #0
 8012542:	d026      	beq.n	8012592 <_dtoa_r+0x972>
 8012544:	0031      	movs	r1, r6
 8012546:	9805      	ldr	r0, [sp, #20]
 8012548:	f7fe fc90 	bl	8010e6c <__mcmp>
 801254c:	2800      	cmp	r0, #0
 801254e:	da20      	bge.n	8012592 <_dtoa_r+0x972>
 8012550:	9b02      	ldr	r3, [sp, #8]
 8012552:	220a      	movs	r2, #10
 8012554:	3b01      	subs	r3, #1
 8012556:	9302      	str	r3, [sp, #8]
 8012558:	0038      	movs	r0, r7
 801255a:	2300      	movs	r3, #0
 801255c:	9905      	ldr	r1, [sp, #20]
 801255e:	f7fe fa1d 	bl	801099c <__multadd>
 8012562:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012564:	9005      	str	r0, [sp, #20]
 8012566:	2b00      	cmp	r3, #0
 8012568:	d100      	bne.n	801256c <_dtoa_r+0x94c>
 801256a:	e166      	b.n	801283a <_dtoa_r+0xc1a>
 801256c:	2300      	movs	r3, #0
 801256e:	0029      	movs	r1, r5
 8012570:	220a      	movs	r2, #10
 8012572:	0038      	movs	r0, r7
 8012574:	f7fe fa12 	bl	801099c <__multadd>
 8012578:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801257a:	0005      	movs	r5, r0
 801257c:	2b00      	cmp	r3, #0
 801257e:	dc47      	bgt.n	8012610 <_dtoa_r+0x9f0>
 8012580:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012582:	2b02      	cmp	r3, #2
 8012584:	dc0d      	bgt.n	80125a2 <_dtoa_r+0x982>
 8012586:	e043      	b.n	8012610 <_dtoa_r+0x9f0>
 8012588:	2a04      	cmp	r2, #4
 801258a:	d0c6      	beq.n	801251a <_dtoa_r+0x8fa>
 801258c:	0013      	movs	r3, r2
 801258e:	331c      	adds	r3, #28
 8012590:	e7bc      	b.n	801250c <_dtoa_r+0x8ec>
 8012592:	9b07      	ldr	r3, [sp, #28]
 8012594:	2b00      	cmp	r3, #0
 8012596:	dc35      	bgt.n	8012604 <_dtoa_r+0x9e4>
 8012598:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801259a:	2b02      	cmp	r3, #2
 801259c:	dd32      	ble.n	8012604 <_dtoa_r+0x9e4>
 801259e:	9b07      	ldr	r3, [sp, #28]
 80125a0:	930c      	str	r3, [sp, #48]	; 0x30
 80125a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d10c      	bne.n	80125c2 <_dtoa_r+0x9a2>
 80125a8:	0031      	movs	r1, r6
 80125aa:	2205      	movs	r2, #5
 80125ac:	0038      	movs	r0, r7
 80125ae:	f7fe f9f5 	bl	801099c <__multadd>
 80125b2:	0006      	movs	r6, r0
 80125b4:	0001      	movs	r1, r0
 80125b6:	9805      	ldr	r0, [sp, #20]
 80125b8:	f7fe fc58 	bl	8010e6c <__mcmp>
 80125bc:	2800      	cmp	r0, #0
 80125be:	dd00      	ble.n	80125c2 <_dtoa_r+0x9a2>
 80125c0:	e5a5      	b.n	801210e <_dtoa_r+0x4ee>
 80125c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80125c4:	43db      	mvns	r3, r3
 80125c6:	9302      	str	r3, [sp, #8]
 80125c8:	9b06      	ldr	r3, [sp, #24]
 80125ca:	9308      	str	r3, [sp, #32]
 80125cc:	2400      	movs	r4, #0
 80125ce:	0031      	movs	r1, r6
 80125d0:	0038      	movs	r0, r7
 80125d2:	f7fe f9bf 	bl	8010954 <_Bfree>
 80125d6:	2d00      	cmp	r5, #0
 80125d8:	d100      	bne.n	80125dc <_dtoa_r+0x9bc>
 80125da:	e6b7      	b.n	801234c <_dtoa_r+0x72c>
 80125dc:	2c00      	cmp	r4, #0
 80125de:	d005      	beq.n	80125ec <_dtoa_r+0x9cc>
 80125e0:	42ac      	cmp	r4, r5
 80125e2:	d003      	beq.n	80125ec <_dtoa_r+0x9cc>
 80125e4:	0021      	movs	r1, r4
 80125e6:	0038      	movs	r0, r7
 80125e8:	f7fe f9b4 	bl	8010954 <_Bfree>
 80125ec:	0029      	movs	r1, r5
 80125ee:	0038      	movs	r0, r7
 80125f0:	f7fe f9b0 	bl	8010954 <_Bfree>
 80125f4:	e6aa      	b.n	801234c <_dtoa_r+0x72c>
 80125f6:	2600      	movs	r6, #0
 80125f8:	0035      	movs	r5, r6
 80125fa:	e7e2      	b.n	80125c2 <_dtoa_r+0x9a2>
 80125fc:	9602      	str	r6, [sp, #8]
 80125fe:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8012600:	0035      	movs	r5, r6
 8012602:	e584      	b.n	801210e <_dtoa_r+0x4ee>
 8012604:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012606:	2b00      	cmp	r3, #0
 8012608:	d100      	bne.n	801260c <_dtoa_r+0x9ec>
 801260a:	e0ce      	b.n	80127aa <_dtoa_r+0xb8a>
 801260c:	9b07      	ldr	r3, [sp, #28]
 801260e:	930c      	str	r3, [sp, #48]	; 0x30
 8012610:	2c00      	cmp	r4, #0
 8012612:	dd05      	ble.n	8012620 <_dtoa_r+0xa00>
 8012614:	0029      	movs	r1, r5
 8012616:	0022      	movs	r2, r4
 8012618:	0038      	movs	r0, r7
 801261a:	f7fe fbb9 	bl	8010d90 <__lshift>
 801261e:	0005      	movs	r5, r0
 8012620:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012622:	0028      	movs	r0, r5
 8012624:	2b00      	cmp	r3, #0
 8012626:	d022      	beq.n	801266e <_dtoa_r+0xa4e>
 8012628:	0038      	movs	r0, r7
 801262a:	6869      	ldr	r1, [r5, #4]
 801262c:	f7fe f94e 	bl	80108cc <_Balloc>
 8012630:	1e04      	subs	r4, r0, #0
 8012632:	d10f      	bne.n	8012654 <_dtoa_r+0xa34>
 8012634:	0002      	movs	r2, r0
 8012636:	4b05      	ldr	r3, [pc, #20]	; (801264c <_dtoa_r+0xa2c>)
 8012638:	4905      	ldr	r1, [pc, #20]	; (8012650 <_dtoa_r+0xa30>)
 801263a:	f7ff fb06 	bl	8011c4a <_dtoa_r+0x2a>
 801263e:	46c0      	nop			; (mov r8, r8)
 8012640:	40240000 	.word	0x40240000
 8012644:	00000433 	.word	0x00000433
 8012648:	7ff00000 	.word	0x7ff00000
 801264c:	08013b71 	.word	0x08013b71
 8012650:	000002ea 	.word	0x000002ea
 8012654:	0029      	movs	r1, r5
 8012656:	692b      	ldr	r3, [r5, #16]
 8012658:	310c      	adds	r1, #12
 801265a:	1c9a      	adds	r2, r3, #2
 801265c:	0092      	lsls	r2, r2, #2
 801265e:	300c      	adds	r0, #12
 8012660:	f7fc fcc8 	bl	800eff4 <memcpy>
 8012664:	2201      	movs	r2, #1
 8012666:	0021      	movs	r1, r4
 8012668:	0038      	movs	r0, r7
 801266a:	f7fe fb91 	bl	8010d90 <__lshift>
 801266e:	9b06      	ldr	r3, [sp, #24]
 8012670:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012672:	930a      	str	r3, [sp, #40]	; 0x28
 8012674:	3b01      	subs	r3, #1
 8012676:	189b      	adds	r3, r3, r2
 8012678:	2201      	movs	r2, #1
 801267a:	002c      	movs	r4, r5
 801267c:	0005      	movs	r5, r0
 801267e:	9314      	str	r3, [sp, #80]	; 0x50
 8012680:	9b08      	ldr	r3, [sp, #32]
 8012682:	4013      	ands	r3, r2
 8012684:	930f      	str	r3, [sp, #60]	; 0x3c
 8012686:	0031      	movs	r1, r6
 8012688:	9805      	ldr	r0, [sp, #20]
 801268a:	f7ff fa3d 	bl	8011b08 <quorem>
 801268e:	0003      	movs	r3, r0
 8012690:	0021      	movs	r1, r4
 8012692:	3330      	adds	r3, #48	; 0x30
 8012694:	900d      	str	r0, [sp, #52]	; 0x34
 8012696:	9805      	ldr	r0, [sp, #20]
 8012698:	9307      	str	r3, [sp, #28]
 801269a:	f7fe fbe7 	bl	8010e6c <__mcmp>
 801269e:	002a      	movs	r2, r5
 80126a0:	900e      	str	r0, [sp, #56]	; 0x38
 80126a2:	0031      	movs	r1, r6
 80126a4:	0038      	movs	r0, r7
 80126a6:	f7fe fbfd 	bl	8010ea4 <__mdiff>
 80126aa:	68c3      	ldr	r3, [r0, #12]
 80126ac:	9008      	str	r0, [sp, #32]
 80126ae:	9310      	str	r3, [sp, #64]	; 0x40
 80126b0:	2301      	movs	r3, #1
 80126b2:	930c      	str	r3, [sp, #48]	; 0x30
 80126b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d104      	bne.n	80126c4 <_dtoa_r+0xaa4>
 80126ba:	0001      	movs	r1, r0
 80126bc:	9805      	ldr	r0, [sp, #20]
 80126be:	f7fe fbd5 	bl	8010e6c <__mcmp>
 80126c2:	900c      	str	r0, [sp, #48]	; 0x30
 80126c4:	0038      	movs	r0, r7
 80126c6:	9908      	ldr	r1, [sp, #32]
 80126c8:	f7fe f944 	bl	8010954 <_Bfree>
 80126cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80126ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80126d0:	3301      	adds	r3, #1
 80126d2:	9308      	str	r3, [sp, #32]
 80126d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80126d6:	4313      	orrs	r3, r2
 80126d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80126da:	4313      	orrs	r3, r2
 80126dc:	d10c      	bne.n	80126f8 <_dtoa_r+0xad8>
 80126de:	9b07      	ldr	r3, [sp, #28]
 80126e0:	2b39      	cmp	r3, #57	; 0x39
 80126e2:	d026      	beq.n	8012732 <_dtoa_r+0xb12>
 80126e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	dd02      	ble.n	80126f0 <_dtoa_r+0xad0>
 80126ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80126ec:	3331      	adds	r3, #49	; 0x31
 80126ee:	9307      	str	r3, [sp, #28]
 80126f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80126f2:	9a07      	ldr	r2, [sp, #28]
 80126f4:	701a      	strb	r2, [r3, #0]
 80126f6:	e76a      	b.n	80125ce <_dtoa_r+0x9ae>
 80126f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	db04      	blt.n	8012708 <_dtoa_r+0xae8>
 80126fe:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8012700:	4313      	orrs	r3, r2
 8012702:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012704:	4313      	orrs	r3, r2
 8012706:	d11f      	bne.n	8012748 <_dtoa_r+0xb28>
 8012708:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801270a:	2b00      	cmp	r3, #0
 801270c:	ddf0      	ble.n	80126f0 <_dtoa_r+0xad0>
 801270e:	9905      	ldr	r1, [sp, #20]
 8012710:	2201      	movs	r2, #1
 8012712:	0038      	movs	r0, r7
 8012714:	f7fe fb3c 	bl	8010d90 <__lshift>
 8012718:	0031      	movs	r1, r6
 801271a:	9005      	str	r0, [sp, #20]
 801271c:	f7fe fba6 	bl	8010e6c <__mcmp>
 8012720:	2800      	cmp	r0, #0
 8012722:	dc03      	bgt.n	801272c <_dtoa_r+0xb0c>
 8012724:	d1e4      	bne.n	80126f0 <_dtoa_r+0xad0>
 8012726:	9b07      	ldr	r3, [sp, #28]
 8012728:	07db      	lsls	r3, r3, #31
 801272a:	d5e1      	bpl.n	80126f0 <_dtoa_r+0xad0>
 801272c:	9b07      	ldr	r3, [sp, #28]
 801272e:	2b39      	cmp	r3, #57	; 0x39
 8012730:	d1db      	bne.n	80126ea <_dtoa_r+0xaca>
 8012732:	2339      	movs	r3, #57	; 0x39
 8012734:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012736:	7013      	strb	r3, [r2, #0]
 8012738:	9b08      	ldr	r3, [sp, #32]
 801273a:	9308      	str	r3, [sp, #32]
 801273c:	3b01      	subs	r3, #1
 801273e:	781a      	ldrb	r2, [r3, #0]
 8012740:	2a39      	cmp	r2, #57	; 0x39
 8012742:	d068      	beq.n	8012816 <_dtoa_r+0xbf6>
 8012744:	3201      	adds	r2, #1
 8012746:	e7d5      	b.n	80126f4 <_dtoa_r+0xad4>
 8012748:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801274a:	2b00      	cmp	r3, #0
 801274c:	dd07      	ble.n	801275e <_dtoa_r+0xb3e>
 801274e:	9b07      	ldr	r3, [sp, #28]
 8012750:	2b39      	cmp	r3, #57	; 0x39
 8012752:	d0ee      	beq.n	8012732 <_dtoa_r+0xb12>
 8012754:	9b07      	ldr	r3, [sp, #28]
 8012756:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012758:	3301      	adds	r3, #1
 801275a:	7013      	strb	r3, [r2, #0]
 801275c:	e737      	b.n	80125ce <_dtoa_r+0x9ae>
 801275e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012760:	9a07      	ldr	r2, [sp, #28]
 8012762:	701a      	strb	r2, [r3, #0]
 8012764:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012766:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012768:	4293      	cmp	r3, r2
 801276a:	d03e      	beq.n	80127ea <_dtoa_r+0xbca>
 801276c:	2300      	movs	r3, #0
 801276e:	220a      	movs	r2, #10
 8012770:	9905      	ldr	r1, [sp, #20]
 8012772:	0038      	movs	r0, r7
 8012774:	f7fe f912 	bl	801099c <__multadd>
 8012778:	2300      	movs	r3, #0
 801277a:	9005      	str	r0, [sp, #20]
 801277c:	220a      	movs	r2, #10
 801277e:	0021      	movs	r1, r4
 8012780:	0038      	movs	r0, r7
 8012782:	42ac      	cmp	r4, r5
 8012784:	d106      	bne.n	8012794 <_dtoa_r+0xb74>
 8012786:	f7fe f909 	bl	801099c <__multadd>
 801278a:	0004      	movs	r4, r0
 801278c:	0005      	movs	r5, r0
 801278e:	9b08      	ldr	r3, [sp, #32]
 8012790:	930a      	str	r3, [sp, #40]	; 0x28
 8012792:	e778      	b.n	8012686 <_dtoa_r+0xa66>
 8012794:	f7fe f902 	bl	801099c <__multadd>
 8012798:	0029      	movs	r1, r5
 801279a:	0004      	movs	r4, r0
 801279c:	2300      	movs	r3, #0
 801279e:	220a      	movs	r2, #10
 80127a0:	0038      	movs	r0, r7
 80127a2:	f7fe f8fb 	bl	801099c <__multadd>
 80127a6:	0005      	movs	r5, r0
 80127a8:	e7f1      	b.n	801278e <_dtoa_r+0xb6e>
 80127aa:	9b07      	ldr	r3, [sp, #28]
 80127ac:	930c      	str	r3, [sp, #48]	; 0x30
 80127ae:	2400      	movs	r4, #0
 80127b0:	0031      	movs	r1, r6
 80127b2:	9805      	ldr	r0, [sp, #20]
 80127b4:	f7ff f9a8 	bl	8011b08 <quorem>
 80127b8:	9b06      	ldr	r3, [sp, #24]
 80127ba:	3030      	adds	r0, #48	; 0x30
 80127bc:	5518      	strb	r0, [r3, r4]
 80127be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80127c0:	3401      	adds	r4, #1
 80127c2:	9007      	str	r0, [sp, #28]
 80127c4:	42a3      	cmp	r3, r4
 80127c6:	dd07      	ble.n	80127d8 <_dtoa_r+0xbb8>
 80127c8:	2300      	movs	r3, #0
 80127ca:	220a      	movs	r2, #10
 80127cc:	0038      	movs	r0, r7
 80127ce:	9905      	ldr	r1, [sp, #20]
 80127d0:	f7fe f8e4 	bl	801099c <__multadd>
 80127d4:	9005      	str	r0, [sp, #20]
 80127d6:	e7eb      	b.n	80127b0 <_dtoa_r+0xb90>
 80127d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80127da:	2001      	movs	r0, #1
 80127dc:	2b00      	cmp	r3, #0
 80127de:	dd00      	ble.n	80127e2 <_dtoa_r+0xbc2>
 80127e0:	0018      	movs	r0, r3
 80127e2:	2400      	movs	r4, #0
 80127e4:	9b06      	ldr	r3, [sp, #24]
 80127e6:	181b      	adds	r3, r3, r0
 80127e8:	9308      	str	r3, [sp, #32]
 80127ea:	9905      	ldr	r1, [sp, #20]
 80127ec:	2201      	movs	r2, #1
 80127ee:	0038      	movs	r0, r7
 80127f0:	f7fe face 	bl	8010d90 <__lshift>
 80127f4:	0031      	movs	r1, r6
 80127f6:	9005      	str	r0, [sp, #20]
 80127f8:	f7fe fb38 	bl	8010e6c <__mcmp>
 80127fc:	2800      	cmp	r0, #0
 80127fe:	dc9b      	bgt.n	8012738 <_dtoa_r+0xb18>
 8012800:	d102      	bne.n	8012808 <_dtoa_r+0xbe8>
 8012802:	9b07      	ldr	r3, [sp, #28]
 8012804:	07db      	lsls	r3, r3, #31
 8012806:	d497      	bmi.n	8012738 <_dtoa_r+0xb18>
 8012808:	9b08      	ldr	r3, [sp, #32]
 801280a:	9308      	str	r3, [sp, #32]
 801280c:	3b01      	subs	r3, #1
 801280e:	781a      	ldrb	r2, [r3, #0]
 8012810:	2a30      	cmp	r2, #48	; 0x30
 8012812:	d0fa      	beq.n	801280a <_dtoa_r+0xbea>
 8012814:	e6db      	b.n	80125ce <_dtoa_r+0x9ae>
 8012816:	9a06      	ldr	r2, [sp, #24]
 8012818:	429a      	cmp	r2, r3
 801281a:	d18e      	bne.n	801273a <_dtoa_r+0xb1a>
 801281c:	9b02      	ldr	r3, [sp, #8]
 801281e:	3301      	adds	r3, #1
 8012820:	9302      	str	r3, [sp, #8]
 8012822:	2331      	movs	r3, #49	; 0x31
 8012824:	e799      	b.n	801275a <_dtoa_r+0xb3a>
 8012826:	4b09      	ldr	r3, [pc, #36]	; (801284c <_dtoa_r+0xc2c>)
 8012828:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801282a:	9306      	str	r3, [sp, #24]
 801282c:	4b08      	ldr	r3, [pc, #32]	; (8012850 <_dtoa_r+0xc30>)
 801282e:	2a00      	cmp	r2, #0
 8012830:	d001      	beq.n	8012836 <_dtoa_r+0xc16>
 8012832:	f7ff fa3f 	bl	8011cb4 <_dtoa_r+0x94>
 8012836:	f7ff fa3f 	bl	8011cb8 <_dtoa_r+0x98>
 801283a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801283c:	2b00      	cmp	r3, #0
 801283e:	dcb6      	bgt.n	80127ae <_dtoa_r+0xb8e>
 8012840:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012842:	2b02      	cmp	r3, #2
 8012844:	dd00      	ble.n	8012848 <_dtoa_r+0xc28>
 8012846:	e6ac      	b.n	80125a2 <_dtoa_r+0x982>
 8012848:	e7b1      	b.n	80127ae <_dtoa_r+0xb8e>
 801284a:	46c0      	nop			; (mov r8, r8)
 801284c:	08013ddb 	.word	0x08013ddb
 8012850:	08013de3 	.word	0x08013de3

08012854 <fiprintf>:
 8012854:	b40e      	push	{r1, r2, r3}
 8012856:	b503      	push	{r0, r1, lr}
 8012858:	0001      	movs	r1, r0
 801285a:	ab03      	add	r3, sp, #12
 801285c:	4804      	ldr	r0, [pc, #16]	; (8012870 <fiprintf+0x1c>)
 801285e:	cb04      	ldmia	r3!, {r2}
 8012860:	6800      	ldr	r0, [r0, #0]
 8012862:	9301      	str	r3, [sp, #4]
 8012864:	f000 f8b8 	bl	80129d8 <_vfiprintf_r>
 8012868:	b002      	add	sp, #8
 801286a:	bc08      	pop	{r3}
 801286c:	b003      	add	sp, #12
 801286e:	4718      	bx	r3
 8012870:	200000e4 	.word	0x200000e4

08012874 <malloc>:
 8012874:	b510      	push	{r4, lr}
 8012876:	4b03      	ldr	r3, [pc, #12]	; (8012884 <malloc+0x10>)
 8012878:	0001      	movs	r1, r0
 801287a:	6818      	ldr	r0, [r3, #0]
 801287c:	f7fe fd58 	bl	8011330 <_malloc_r>
 8012880:	bd10      	pop	{r4, pc}
 8012882:	46c0      	nop			; (mov r8, r8)
 8012884:	200000e4 	.word	0x200000e4

08012888 <memchr>:
 8012888:	b2c9      	uxtb	r1, r1
 801288a:	1882      	adds	r2, r0, r2
 801288c:	4290      	cmp	r0, r2
 801288e:	d101      	bne.n	8012894 <memchr+0xc>
 8012890:	2000      	movs	r0, #0
 8012892:	4770      	bx	lr
 8012894:	7803      	ldrb	r3, [r0, #0]
 8012896:	428b      	cmp	r3, r1
 8012898:	d0fb      	beq.n	8012892 <memchr+0xa>
 801289a:	3001      	adds	r0, #1
 801289c:	e7f6      	b.n	801288c <memchr+0x4>

0801289e <memmove>:
 801289e:	b510      	push	{r4, lr}
 80128a0:	4288      	cmp	r0, r1
 80128a2:	d902      	bls.n	80128aa <memmove+0xc>
 80128a4:	188b      	adds	r3, r1, r2
 80128a6:	4298      	cmp	r0, r3
 80128a8:	d303      	bcc.n	80128b2 <memmove+0x14>
 80128aa:	2300      	movs	r3, #0
 80128ac:	e007      	b.n	80128be <memmove+0x20>
 80128ae:	5c8b      	ldrb	r3, [r1, r2]
 80128b0:	5483      	strb	r3, [r0, r2]
 80128b2:	3a01      	subs	r2, #1
 80128b4:	d2fb      	bcs.n	80128ae <memmove+0x10>
 80128b6:	bd10      	pop	{r4, pc}
 80128b8:	5ccc      	ldrb	r4, [r1, r3]
 80128ba:	54c4      	strb	r4, [r0, r3]
 80128bc:	3301      	adds	r3, #1
 80128be:	429a      	cmp	r2, r3
 80128c0:	d1fa      	bne.n	80128b8 <memmove+0x1a>
 80128c2:	e7f8      	b.n	80128b6 <memmove+0x18>

080128c4 <__malloc_lock>:
 80128c4:	b510      	push	{r4, lr}
 80128c6:	4802      	ldr	r0, [pc, #8]	; (80128d0 <__malloc_lock+0xc>)
 80128c8:	f000 fc65 	bl	8013196 <__retarget_lock_acquire_recursive>
 80128cc:	bd10      	pop	{r4, pc}
 80128ce:	46c0      	nop			; (mov r8, r8)
 80128d0:	20000dac 	.word	0x20000dac

080128d4 <__malloc_unlock>:
 80128d4:	b510      	push	{r4, lr}
 80128d6:	4802      	ldr	r0, [pc, #8]	; (80128e0 <__malloc_unlock+0xc>)
 80128d8:	f000 fc5e 	bl	8013198 <__retarget_lock_release_recursive>
 80128dc:	bd10      	pop	{r4, pc}
 80128de:	46c0      	nop			; (mov r8, r8)
 80128e0:	20000dac 	.word	0x20000dac

080128e4 <_free_r>:
 80128e4:	b570      	push	{r4, r5, r6, lr}
 80128e6:	0005      	movs	r5, r0
 80128e8:	2900      	cmp	r1, #0
 80128ea:	d010      	beq.n	801290e <_free_r+0x2a>
 80128ec:	1f0c      	subs	r4, r1, #4
 80128ee:	6823      	ldr	r3, [r4, #0]
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	da00      	bge.n	80128f6 <_free_r+0x12>
 80128f4:	18e4      	adds	r4, r4, r3
 80128f6:	0028      	movs	r0, r5
 80128f8:	f7ff ffe4 	bl	80128c4 <__malloc_lock>
 80128fc:	4a1d      	ldr	r2, [pc, #116]	; (8012974 <_free_r+0x90>)
 80128fe:	6813      	ldr	r3, [r2, #0]
 8012900:	2b00      	cmp	r3, #0
 8012902:	d105      	bne.n	8012910 <_free_r+0x2c>
 8012904:	6063      	str	r3, [r4, #4]
 8012906:	6014      	str	r4, [r2, #0]
 8012908:	0028      	movs	r0, r5
 801290a:	f7ff ffe3 	bl	80128d4 <__malloc_unlock>
 801290e:	bd70      	pop	{r4, r5, r6, pc}
 8012910:	42a3      	cmp	r3, r4
 8012912:	d908      	bls.n	8012926 <_free_r+0x42>
 8012914:	6821      	ldr	r1, [r4, #0]
 8012916:	1860      	adds	r0, r4, r1
 8012918:	4283      	cmp	r3, r0
 801291a:	d1f3      	bne.n	8012904 <_free_r+0x20>
 801291c:	6818      	ldr	r0, [r3, #0]
 801291e:	685b      	ldr	r3, [r3, #4]
 8012920:	1841      	adds	r1, r0, r1
 8012922:	6021      	str	r1, [r4, #0]
 8012924:	e7ee      	b.n	8012904 <_free_r+0x20>
 8012926:	001a      	movs	r2, r3
 8012928:	685b      	ldr	r3, [r3, #4]
 801292a:	2b00      	cmp	r3, #0
 801292c:	d001      	beq.n	8012932 <_free_r+0x4e>
 801292e:	42a3      	cmp	r3, r4
 8012930:	d9f9      	bls.n	8012926 <_free_r+0x42>
 8012932:	6811      	ldr	r1, [r2, #0]
 8012934:	1850      	adds	r0, r2, r1
 8012936:	42a0      	cmp	r0, r4
 8012938:	d10b      	bne.n	8012952 <_free_r+0x6e>
 801293a:	6820      	ldr	r0, [r4, #0]
 801293c:	1809      	adds	r1, r1, r0
 801293e:	1850      	adds	r0, r2, r1
 8012940:	6011      	str	r1, [r2, #0]
 8012942:	4283      	cmp	r3, r0
 8012944:	d1e0      	bne.n	8012908 <_free_r+0x24>
 8012946:	6818      	ldr	r0, [r3, #0]
 8012948:	685b      	ldr	r3, [r3, #4]
 801294a:	1841      	adds	r1, r0, r1
 801294c:	6011      	str	r1, [r2, #0]
 801294e:	6053      	str	r3, [r2, #4]
 8012950:	e7da      	b.n	8012908 <_free_r+0x24>
 8012952:	42a0      	cmp	r0, r4
 8012954:	d902      	bls.n	801295c <_free_r+0x78>
 8012956:	230c      	movs	r3, #12
 8012958:	602b      	str	r3, [r5, #0]
 801295a:	e7d5      	b.n	8012908 <_free_r+0x24>
 801295c:	6821      	ldr	r1, [r4, #0]
 801295e:	1860      	adds	r0, r4, r1
 8012960:	4283      	cmp	r3, r0
 8012962:	d103      	bne.n	801296c <_free_r+0x88>
 8012964:	6818      	ldr	r0, [r3, #0]
 8012966:	685b      	ldr	r3, [r3, #4]
 8012968:	1841      	adds	r1, r0, r1
 801296a:	6021      	str	r1, [r4, #0]
 801296c:	6063      	str	r3, [r4, #4]
 801296e:	6054      	str	r4, [r2, #4]
 8012970:	e7ca      	b.n	8012908 <_free_r+0x24>
 8012972:	46c0      	nop			; (mov r8, r8)
 8012974:	20000da0 	.word	0x20000da0

08012978 <_malloc_usable_size_r>:
 8012978:	1f0b      	subs	r3, r1, #4
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	1f18      	subs	r0, r3, #4
 801297e:	2b00      	cmp	r3, #0
 8012980:	da01      	bge.n	8012986 <_malloc_usable_size_r+0xe>
 8012982:	580b      	ldr	r3, [r1, r0]
 8012984:	18c0      	adds	r0, r0, r3
 8012986:	4770      	bx	lr

08012988 <__sfputc_r>:
 8012988:	6893      	ldr	r3, [r2, #8]
 801298a:	b510      	push	{r4, lr}
 801298c:	3b01      	subs	r3, #1
 801298e:	6093      	str	r3, [r2, #8]
 8012990:	2b00      	cmp	r3, #0
 8012992:	da04      	bge.n	801299e <__sfputc_r+0x16>
 8012994:	6994      	ldr	r4, [r2, #24]
 8012996:	42a3      	cmp	r3, r4
 8012998:	db07      	blt.n	80129aa <__sfputc_r+0x22>
 801299a:	290a      	cmp	r1, #10
 801299c:	d005      	beq.n	80129aa <__sfputc_r+0x22>
 801299e:	6813      	ldr	r3, [r2, #0]
 80129a0:	1c58      	adds	r0, r3, #1
 80129a2:	6010      	str	r0, [r2, #0]
 80129a4:	7019      	strb	r1, [r3, #0]
 80129a6:	0008      	movs	r0, r1
 80129a8:	bd10      	pop	{r4, pc}
 80129aa:	f000 f94f 	bl	8012c4c <__swbuf_r>
 80129ae:	0001      	movs	r1, r0
 80129b0:	e7f9      	b.n	80129a6 <__sfputc_r+0x1e>

080129b2 <__sfputs_r>:
 80129b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129b4:	0006      	movs	r6, r0
 80129b6:	000f      	movs	r7, r1
 80129b8:	0014      	movs	r4, r2
 80129ba:	18d5      	adds	r5, r2, r3
 80129bc:	42ac      	cmp	r4, r5
 80129be:	d101      	bne.n	80129c4 <__sfputs_r+0x12>
 80129c0:	2000      	movs	r0, #0
 80129c2:	e007      	b.n	80129d4 <__sfputs_r+0x22>
 80129c4:	7821      	ldrb	r1, [r4, #0]
 80129c6:	003a      	movs	r2, r7
 80129c8:	0030      	movs	r0, r6
 80129ca:	f7ff ffdd 	bl	8012988 <__sfputc_r>
 80129ce:	3401      	adds	r4, #1
 80129d0:	1c43      	adds	r3, r0, #1
 80129d2:	d1f3      	bne.n	80129bc <__sfputs_r+0xa>
 80129d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080129d8 <_vfiprintf_r>:
 80129d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80129da:	b0a1      	sub	sp, #132	; 0x84
 80129dc:	0006      	movs	r6, r0
 80129de:	000c      	movs	r4, r1
 80129e0:	001f      	movs	r7, r3
 80129e2:	9203      	str	r2, [sp, #12]
 80129e4:	2800      	cmp	r0, #0
 80129e6:	d004      	beq.n	80129f2 <_vfiprintf_r+0x1a>
 80129e8:	6983      	ldr	r3, [r0, #24]
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	d101      	bne.n	80129f2 <_vfiprintf_r+0x1a>
 80129ee:	f000 fb31 	bl	8013054 <__sinit>
 80129f2:	4b8e      	ldr	r3, [pc, #568]	; (8012c2c <_vfiprintf_r+0x254>)
 80129f4:	429c      	cmp	r4, r3
 80129f6:	d11c      	bne.n	8012a32 <_vfiprintf_r+0x5a>
 80129f8:	6874      	ldr	r4, [r6, #4]
 80129fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80129fc:	07db      	lsls	r3, r3, #31
 80129fe:	d405      	bmi.n	8012a0c <_vfiprintf_r+0x34>
 8012a00:	89a3      	ldrh	r3, [r4, #12]
 8012a02:	059b      	lsls	r3, r3, #22
 8012a04:	d402      	bmi.n	8012a0c <_vfiprintf_r+0x34>
 8012a06:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012a08:	f000 fbc5 	bl	8013196 <__retarget_lock_acquire_recursive>
 8012a0c:	89a3      	ldrh	r3, [r4, #12]
 8012a0e:	071b      	lsls	r3, r3, #28
 8012a10:	d502      	bpl.n	8012a18 <_vfiprintf_r+0x40>
 8012a12:	6923      	ldr	r3, [r4, #16]
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d11d      	bne.n	8012a54 <_vfiprintf_r+0x7c>
 8012a18:	0021      	movs	r1, r4
 8012a1a:	0030      	movs	r0, r6
 8012a1c:	f000 f96c 	bl	8012cf8 <__swsetup_r>
 8012a20:	2800      	cmp	r0, #0
 8012a22:	d017      	beq.n	8012a54 <_vfiprintf_r+0x7c>
 8012a24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012a26:	07db      	lsls	r3, r3, #31
 8012a28:	d50d      	bpl.n	8012a46 <_vfiprintf_r+0x6e>
 8012a2a:	2001      	movs	r0, #1
 8012a2c:	4240      	negs	r0, r0
 8012a2e:	b021      	add	sp, #132	; 0x84
 8012a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a32:	4b7f      	ldr	r3, [pc, #508]	; (8012c30 <_vfiprintf_r+0x258>)
 8012a34:	429c      	cmp	r4, r3
 8012a36:	d101      	bne.n	8012a3c <_vfiprintf_r+0x64>
 8012a38:	68b4      	ldr	r4, [r6, #8]
 8012a3a:	e7de      	b.n	80129fa <_vfiprintf_r+0x22>
 8012a3c:	4b7d      	ldr	r3, [pc, #500]	; (8012c34 <_vfiprintf_r+0x25c>)
 8012a3e:	429c      	cmp	r4, r3
 8012a40:	d1db      	bne.n	80129fa <_vfiprintf_r+0x22>
 8012a42:	68f4      	ldr	r4, [r6, #12]
 8012a44:	e7d9      	b.n	80129fa <_vfiprintf_r+0x22>
 8012a46:	89a3      	ldrh	r3, [r4, #12]
 8012a48:	059b      	lsls	r3, r3, #22
 8012a4a:	d4ee      	bmi.n	8012a2a <_vfiprintf_r+0x52>
 8012a4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012a4e:	f000 fba3 	bl	8013198 <__retarget_lock_release_recursive>
 8012a52:	e7ea      	b.n	8012a2a <_vfiprintf_r+0x52>
 8012a54:	2300      	movs	r3, #0
 8012a56:	ad08      	add	r5, sp, #32
 8012a58:	616b      	str	r3, [r5, #20]
 8012a5a:	3320      	adds	r3, #32
 8012a5c:	766b      	strb	r3, [r5, #25]
 8012a5e:	3310      	adds	r3, #16
 8012a60:	76ab      	strb	r3, [r5, #26]
 8012a62:	9707      	str	r7, [sp, #28]
 8012a64:	9f03      	ldr	r7, [sp, #12]
 8012a66:	783b      	ldrb	r3, [r7, #0]
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d001      	beq.n	8012a70 <_vfiprintf_r+0x98>
 8012a6c:	2b25      	cmp	r3, #37	; 0x25
 8012a6e:	d14e      	bne.n	8012b0e <_vfiprintf_r+0x136>
 8012a70:	9b03      	ldr	r3, [sp, #12]
 8012a72:	1afb      	subs	r3, r7, r3
 8012a74:	9305      	str	r3, [sp, #20]
 8012a76:	9b03      	ldr	r3, [sp, #12]
 8012a78:	429f      	cmp	r7, r3
 8012a7a:	d00d      	beq.n	8012a98 <_vfiprintf_r+0xc0>
 8012a7c:	9b05      	ldr	r3, [sp, #20]
 8012a7e:	0021      	movs	r1, r4
 8012a80:	0030      	movs	r0, r6
 8012a82:	9a03      	ldr	r2, [sp, #12]
 8012a84:	f7ff ff95 	bl	80129b2 <__sfputs_r>
 8012a88:	1c43      	adds	r3, r0, #1
 8012a8a:	d100      	bne.n	8012a8e <_vfiprintf_r+0xb6>
 8012a8c:	e0b5      	b.n	8012bfa <_vfiprintf_r+0x222>
 8012a8e:	696a      	ldr	r2, [r5, #20]
 8012a90:	9b05      	ldr	r3, [sp, #20]
 8012a92:	4694      	mov	ip, r2
 8012a94:	4463      	add	r3, ip
 8012a96:	616b      	str	r3, [r5, #20]
 8012a98:	783b      	ldrb	r3, [r7, #0]
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d100      	bne.n	8012aa0 <_vfiprintf_r+0xc8>
 8012a9e:	e0ac      	b.n	8012bfa <_vfiprintf_r+0x222>
 8012aa0:	2201      	movs	r2, #1
 8012aa2:	1c7b      	adds	r3, r7, #1
 8012aa4:	9303      	str	r3, [sp, #12]
 8012aa6:	2300      	movs	r3, #0
 8012aa8:	4252      	negs	r2, r2
 8012aaa:	606a      	str	r2, [r5, #4]
 8012aac:	a904      	add	r1, sp, #16
 8012aae:	3254      	adds	r2, #84	; 0x54
 8012ab0:	1852      	adds	r2, r2, r1
 8012ab2:	602b      	str	r3, [r5, #0]
 8012ab4:	60eb      	str	r3, [r5, #12]
 8012ab6:	60ab      	str	r3, [r5, #8]
 8012ab8:	7013      	strb	r3, [r2, #0]
 8012aba:	65ab      	str	r3, [r5, #88]	; 0x58
 8012abc:	9b03      	ldr	r3, [sp, #12]
 8012abe:	2205      	movs	r2, #5
 8012ac0:	7819      	ldrb	r1, [r3, #0]
 8012ac2:	485d      	ldr	r0, [pc, #372]	; (8012c38 <_vfiprintf_r+0x260>)
 8012ac4:	f7ff fee0 	bl	8012888 <memchr>
 8012ac8:	9b03      	ldr	r3, [sp, #12]
 8012aca:	1c5f      	adds	r7, r3, #1
 8012acc:	2800      	cmp	r0, #0
 8012ace:	d120      	bne.n	8012b12 <_vfiprintf_r+0x13a>
 8012ad0:	682a      	ldr	r2, [r5, #0]
 8012ad2:	06d3      	lsls	r3, r2, #27
 8012ad4:	d504      	bpl.n	8012ae0 <_vfiprintf_r+0x108>
 8012ad6:	2353      	movs	r3, #83	; 0x53
 8012ad8:	a904      	add	r1, sp, #16
 8012ada:	185b      	adds	r3, r3, r1
 8012adc:	2120      	movs	r1, #32
 8012ade:	7019      	strb	r1, [r3, #0]
 8012ae0:	0713      	lsls	r3, r2, #28
 8012ae2:	d504      	bpl.n	8012aee <_vfiprintf_r+0x116>
 8012ae4:	2353      	movs	r3, #83	; 0x53
 8012ae6:	a904      	add	r1, sp, #16
 8012ae8:	185b      	adds	r3, r3, r1
 8012aea:	212b      	movs	r1, #43	; 0x2b
 8012aec:	7019      	strb	r1, [r3, #0]
 8012aee:	9b03      	ldr	r3, [sp, #12]
 8012af0:	781b      	ldrb	r3, [r3, #0]
 8012af2:	2b2a      	cmp	r3, #42	; 0x2a
 8012af4:	d016      	beq.n	8012b24 <_vfiprintf_r+0x14c>
 8012af6:	2100      	movs	r1, #0
 8012af8:	68eb      	ldr	r3, [r5, #12]
 8012afa:	9f03      	ldr	r7, [sp, #12]
 8012afc:	783a      	ldrb	r2, [r7, #0]
 8012afe:	1c78      	adds	r0, r7, #1
 8012b00:	3a30      	subs	r2, #48	; 0x30
 8012b02:	4684      	mov	ip, r0
 8012b04:	2a09      	cmp	r2, #9
 8012b06:	d94f      	bls.n	8012ba8 <_vfiprintf_r+0x1d0>
 8012b08:	2900      	cmp	r1, #0
 8012b0a:	d111      	bne.n	8012b30 <_vfiprintf_r+0x158>
 8012b0c:	e017      	b.n	8012b3e <_vfiprintf_r+0x166>
 8012b0e:	3701      	adds	r7, #1
 8012b10:	e7a9      	b.n	8012a66 <_vfiprintf_r+0x8e>
 8012b12:	4b49      	ldr	r3, [pc, #292]	; (8012c38 <_vfiprintf_r+0x260>)
 8012b14:	682a      	ldr	r2, [r5, #0]
 8012b16:	1ac0      	subs	r0, r0, r3
 8012b18:	2301      	movs	r3, #1
 8012b1a:	4083      	lsls	r3, r0
 8012b1c:	4313      	orrs	r3, r2
 8012b1e:	602b      	str	r3, [r5, #0]
 8012b20:	9703      	str	r7, [sp, #12]
 8012b22:	e7cb      	b.n	8012abc <_vfiprintf_r+0xe4>
 8012b24:	9b07      	ldr	r3, [sp, #28]
 8012b26:	1d19      	adds	r1, r3, #4
 8012b28:	681b      	ldr	r3, [r3, #0]
 8012b2a:	9107      	str	r1, [sp, #28]
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	db01      	blt.n	8012b34 <_vfiprintf_r+0x15c>
 8012b30:	930b      	str	r3, [sp, #44]	; 0x2c
 8012b32:	e004      	b.n	8012b3e <_vfiprintf_r+0x166>
 8012b34:	425b      	negs	r3, r3
 8012b36:	60eb      	str	r3, [r5, #12]
 8012b38:	2302      	movs	r3, #2
 8012b3a:	4313      	orrs	r3, r2
 8012b3c:	602b      	str	r3, [r5, #0]
 8012b3e:	783b      	ldrb	r3, [r7, #0]
 8012b40:	2b2e      	cmp	r3, #46	; 0x2e
 8012b42:	d10a      	bne.n	8012b5a <_vfiprintf_r+0x182>
 8012b44:	787b      	ldrb	r3, [r7, #1]
 8012b46:	2b2a      	cmp	r3, #42	; 0x2a
 8012b48:	d137      	bne.n	8012bba <_vfiprintf_r+0x1e2>
 8012b4a:	9b07      	ldr	r3, [sp, #28]
 8012b4c:	3702      	adds	r7, #2
 8012b4e:	1d1a      	adds	r2, r3, #4
 8012b50:	681b      	ldr	r3, [r3, #0]
 8012b52:	9207      	str	r2, [sp, #28]
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	db2d      	blt.n	8012bb4 <_vfiprintf_r+0x1dc>
 8012b58:	9309      	str	r3, [sp, #36]	; 0x24
 8012b5a:	2203      	movs	r2, #3
 8012b5c:	7839      	ldrb	r1, [r7, #0]
 8012b5e:	4837      	ldr	r0, [pc, #220]	; (8012c3c <_vfiprintf_r+0x264>)
 8012b60:	f7ff fe92 	bl	8012888 <memchr>
 8012b64:	2800      	cmp	r0, #0
 8012b66:	d007      	beq.n	8012b78 <_vfiprintf_r+0x1a0>
 8012b68:	4b34      	ldr	r3, [pc, #208]	; (8012c3c <_vfiprintf_r+0x264>)
 8012b6a:	682a      	ldr	r2, [r5, #0]
 8012b6c:	1ac0      	subs	r0, r0, r3
 8012b6e:	2340      	movs	r3, #64	; 0x40
 8012b70:	4083      	lsls	r3, r0
 8012b72:	4313      	orrs	r3, r2
 8012b74:	3701      	adds	r7, #1
 8012b76:	602b      	str	r3, [r5, #0]
 8012b78:	7839      	ldrb	r1, [r7, #0]
 8012b7a:	1c7b      	adds	r3, r7, #1
 8012b7c:	2206      	movs	r2, #6
 8012b7e:	4830      	ldr	r0, [pc, #192]	; (8012c40 <_vfiprintf_r+0x268>)
 8012b80:	9303      	str	r3, [sp, #12]
 8012b82:	7629      	strb	r1, [r5, #24]
 8012b84:	f7ff fe80 	bl	8012888 <memchr>
 8012b88:	2800      	cmp	r0, #0
 8012b8a:	d045      	beq.n	8012c18 <_vfiprintf_r+0x240>
 8012b8c:	4b2d      	ldr	r3, [pc, #180]	; (8012c44 <_vfiprintf_r+0x26c>)
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d127      	bne.n	8012be2 <_vfiprintf_r+0x20a>
 8012b92:	2207      	movs	r2, #7
 8012b94:	9b07      	ldr	r3, [sp, #28]
 8012b96:	3307      	adds	r3, #7
 8012b98:	4393      	bics	r3, r2
 8012b9a:	3308      	adds	r3, #8
 8012b9c:	9307      	str	r3, [sp, #28]
 8012b9e:	696b      	ldr	r3, [r5, #20]
 8012ba0:	9a04      	ldr	r2, [sp, #16]
 8012ba2:	189b      	adds	r3, r3, r2
 8012ba4:	616b      	str	r3, [r5, #20]
 8012ba6:	e75d      	b.n	8012a64 <_vfiprintf_r+0x8c>
 8012ba8:	210a      	movs	r1, #10
 8012baa:	434b      	muls	r3, r1
 8012bac:	4667      	mov	r7, ip
 8012bae:	189b      	adds	r3, r3, r2
 8012bb0:	3909      	subs	r1, #9
 8012bb2:	e7a3      	b.n	8012afc <_vfiprintf_r+0x124>
 8012bb4:	2301      	movs	r3, #1
 8012bb6:	425b      	negs	r3, r3
 8012bb8:	e7ce      	b.n	8012b58 <_vfiprintf_r+0x180>
 8012bba:	2300      	movs	r3, #0
 8012bbc:	001a      	movs	r2, r3
 8012bbe:	3701      	adds	r7, #1
 8012bc0:	606b      	str	r3, [r5, #4]
 8012bc2:	7839      	ldrb	r1, [r7, #0]
 8012bc4:	1c78      	adds	r0, r7, #1
 8012bc6:	3930      	subs	r1, #48	; 0x30
 8012bc8:	4684      	mov	ip, r0
 8012bca:	2909      	cmp	r1, #9
 8012bcc:	d903      	bls.n	8012bd6 <_vfiprintf_r+0x1fe>
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d0c3      	beq.n	8012b5a <_vfiprintf_r+0x182>
 8012bd2:	9209      	str	r2, [sp, #36]	; 0x24
 8012bd4:	e7c1      	b.n	8012b5a <_vfiprintf_r+0x182>
 8012bd6:	230a      	movs	r3, #10
 8012bd8:	435a      	muls	r2, r3
 8012bda:	4667      	mov	r7, ip
 8012bdc:	1852      	adds	r2, r2, r1
 8012bde:	3b09      	subs	r3, #9
 8012be0:	e7ef      	b.n	8012bc2 <_vfiprintf_r+0x1ea>
 8012be2:	ab07      	add	r3, sp, #28
 8012be4:	9300      	str	r3, [sp, #0]
 8012be6:	0022      	movs	r2, r4
 8012be8:	0029      	movs	r1, r5
 8012bea:	0030      	movs	r0, r6
 8012bec:	4b16      	ldr	r3, [pc, #88]	; (8012c48 <_vfiprintf_r+0x270>)
 8012bee:	e000      	b.n	8012bf2 <_vfiprintf_r+0x21a>
 8012bf0:	bf00      	nop
 8012bf2:	9004      	str	r0, [sp, #16]
 8012bf4:	9b04      	ldr	r3, [sp, #16]
 8012bf6:	3301      	adds	r3, #1
 8012bf8:	d1d1      	bne.n	8012b9e <_vfiprintf_r+0x1c6>
 8012bfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012bfc:	07db      	lsls	r3, r3, #31
 8012bfe:	d405      	bmi.n	8012c0c <_vfiprintf_r+0x234>
 8012c00:	89a3      	ldrh	r3, [r4, #12]
 8012c02:	059b      	lsls	r3, r3, #22
 8012c04:	d402      	bmi.n	8012c0c <_vfiprintf_r+0x234>
 8012c06:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012c08:	f000 fac6 	bl	8013198 <__retarget_lock_release_recursive>
 8012c0c:	89a3      	ldrh	r3, [r4, #12]
 8012c0e:	065b      	lsls	r3, r3, #25
 8012c10:	d500      	bpl.n	8012c14 <_vfiprintf_r+0x23c>
 8012c12:	e70a      	b.n	8012a2a <_vfiprintf_r+0x52>
 8012c14:	980d      	ldr	r0, [sp, #52]	; 0x34
 8012c16:	e70a      	b.n	8012a2e <_vfiprintf_r+0x56>
 8012c18:	ab07      	add	r3, sp, #28
 8012c1a:	9300      	str	r3, [sp, #0]
 8012c1c:	0022      	movs	r2, r4
 8012c1e:	0029      	movs	r1, r5
 8012c20:	0030      	movs	r0, r6
 8012c22:	4b09      	ldr	r3, [pc, #36]	; (8012c48 <_vfiprintf_r+0x270>)
 8012c24:	f7fe fdfc 	bl	8011820 <_printf_i>
 8012c28:	e7e3      	b.n	8012bf2 <_vfiprintf_r+0x21a>
 8012c2a:	46c0      	nop			; (mov r8, r8)
 8012c2c:	08013e68 	.word	0x08013e68
 8012c30:	08013e88 	.word	0x08013e88
 8012c34:	08013e48 	.word	0x08013e48
 8012c38:	08013d6c 	.word	0x08013d6c
 8012c3c:	08013d72 	.word	0x08013d72
 8012c40:	08013d76 	.word	0x08013d76
 8012c44:	00000000 	.word	0x00000000
 8012c48:	080129b3 	.word	0x080129b3

08012c4c <__swbuf_r>:
 8012c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c4e:	0005      	movs	r5, r0
 8012c50:	000e      	movs	r6, r1
 8012c52:	0014      	movs	r4, r2
 8012c54:	2800      	cmp	r0, #0
 8012c56:	d004      	beq.n	8012c62 <__swbuf_r+0x16>
 8012c58:	6983      	ldr	r3, [r0, #24]
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d101      	bne.n	8012c62 <__swbuf_r+0x16>
 8012c5e:	f000 f9f9 	bl	8013054 <__sinit>
 8012c62:	4b22      	ldr	r3, [pc, #136]	; (8012cec <__swbuf_r+0xa0>)
 8012c64:	429c      	cmp	r4, r3
 8012c66:	d12e      	bne.n	8012cc6 <__swbuf_r+0x7a>
 8012c68:	686c      	ldr	r4, [r5, #4]
 8012c6a:	69a3      	ldr	r3, [r4, #24]
 8012c6c:	60a3      	str	r3, [r4, #8]
 8012c6e:	89a3      	ldrh	r3, [r4, #12]
 8012c70:	071b      	lsls	r3, r3, #28
 8012c72:	d532      	bpl.n	8012cda <__swbuf_r+0x8e>
 8012c74:	6923      	ldr	r3, [r4, #16]
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d02f      	beq.n	8012cda <__swbuf_r+0x8e>
 8012c7a:	6823      	ldr	r3, [r4, #0]
 8012c7c:	6922      	ldr	r2, [r4, #16]
 8012c7e:	b2f7      	uxtb	r7, r6
 8012c80:	1a98      	subs	r0, r3, r2
 8012c82:	6963      	ldr	r3, [r4, #20]
 8012c84:	b2f6      	uxtb	r6, r6
 8012c86:	4283      	cmp	r3, r0
 8012c88:	dc05      	bgt.n	8012c96 <__swbuf_r+0x4a>
 8012c8a:	0021      	movs	r1, r4
 8012c8c:	0028      	movs	r0, r5
 8012c8e:	f000 f93f 	bl	8012f10 <_fflush_r>
 8012c92:	2800      	cmp	r0, #0
 8012c94:	d127      	bne.n	8012ce6 <__swbuf_r+0x9a>
 8012c96:	68a3      	ldr	r3, [r4, #8]
 8012c98:	3001      	adds	r0, #1
 8012c9a:	3b01      	subs	r3, #1
 8012c9c:	60a3      	str	r3, [r4, #8]
 8012c9e:	6823      	ldr	r3, [r4, #0]
 8012ca0:	1c5a      	adds	r2, r3, #1
 8012ca2:	6022      	str	r2, [r4, #0]
 8012ca4:	701f      	strb	r7, [r3, #0]
 8012ca6:	6963      	ldr	r3, [r4, #20]
 8012ca8:	4283      	cmp	r3, r0
 8012caa:	d004      	beq.n	8012cb6 <__swbuf_r+0x6a>
 8012cac:	89a3      	ldrh	r3, [r4, #12]
 8012cae:	07db      	lsls	r3, r3, #31
 8012cb0:	d507      	bpl.n	8012cc2 <__swbuf_r+0x76>
 8012cb2:	2e0a      	cmp	r6, #10
 8012cb4:	d105      	bne.n	8012cc2 <__swbuf_r+0x76>
 8012cb6:	0021      	movs	r1, r4
 8012cb8:	0028      	movs	r0, r5
 8012cba:	f000 f929 	bl	8012f10 <_fflush_r>
 8012cbe:	2800      	cmp	r0, #0
 8012cc0:	d111      	bne.n	8012ce6 <__swbuf_r+0x9a>
 8012cc2:	0030      	movs	r0, r6
 8012cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012cc6:	4b0a      	ldr	r3, [pc, #40]	; (8012cf0 <__swbuf_r+0xa4>)
 8012cc8:	429c      	cmp	r4, r3
 8012cca:	d101      	bne.n	8012cd0 <__swbuf_r+0x84>
 8012ccc:	68ac      	ldr	r4, [r5, #8]
 8012cce:	e7cc      	b.n	8012c6a <__swbuf_r+0x1e>
 8012cd0:	4b08      	ldr	r3, [pc, #32]	; (8012cf4 <__swbuf_r+0xa8>)
 8012cd2:	429c      	cmp	r4, r3
 8012cd4:	d1c9      	bne.n	8012c6a <__swbuf_r+0x1e>
 8012cd6:	68ec      	ldr	r4, [r5, #12]
 8012cd8:	e7c7      	b.n	8012c6a <__swbuf_r+0x1e>
 8012cda:	0021      	movs	r1, r4
 8012cdc:	0028      	movs	r0, r5
 8012cde:	f000 f80b 	bl	8012cf8 <__swsetup_r>
 8012ce2:	2800      	cmp	r0, #0
 8012ce4:	d0c9      	beq.n	8012c7a <__swbuf_r+0x2e>
 8012ce6:	2601      	movs	r6, #1
 8012ce8:	4276      	negs	r6, r6
 8012cea:	e7ea      	b.n	8012cc2 <__swbuf_r+0x76>
 8012cec:	08013e68 	.word	0x08013e68
 8012cf0:	08013e88 	.word	0x08013e88
 8012cf4:	08013e48 	.word	0x08013e48

08012cf8 <__swsetup_r>:
 8012cf8:	4b37      	ldr	r3, [pc, #220]	; (8012dd8 <__swsetup_r+0xe0>)
 8012cfa:	b570      	push	{r4, r5, r6, lr}
 8012cfc:	681d      	ldr	r5, [r3, #0]
 8012cfe:	0006      	movs	r6, r0
 8012d00:	000c      	movs	r4, r1
 8012d02:	2d00      	cmp	r5, #0
 8012d04:	d005      	beq.n	8012d12 <__swsetup_r+0x1a>
 8012d06:	69ab      	ldr	r3, [r5, #24]
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d102      	bne.n	8012d12 <__swsetup_r+0x1a>
 8012d0c:	0028      	movs	r0, r5
 8012d0e:	f000 f9a1 	bl	8013054 <__sinit>
 8012d12:	4b32      	ldr	r3, [pc, #200]	; (8012ddc <__swsetup_r+0xe4>)
 8012d14:	429c      	cmp	r4, r3
 8012d16:	d10f      	bne.n	8012d38 <__swsetup_r+0x40>
 8012d18:	686c      	ldr	r4, [r5, #4]
 8012d1a:	230c      	movs	r3, #12
 8012d1c:	5ee2      	ldrsh	r2, [r4, r3]
 8012d1e:	b293      	uxth	r3, r2
 8012d20:	0711      	lsls	r1, r2, #28
 8012d22:	d42d      	bmi.n	8012d80 <__swsetup_r+0x88>
 8012d24:	06d9      	lsls	r1, r3, #27
 8012d26:	d411      	bmi.n	8012d4c <__swsetup_r+0x54>
 8012d28:	2309      	movs	r3, #9
 8012d2a:	2001      	movs	r0, #1
 8012d2c:	6033      	str	r3, [r6, #0]
 8012d2e:	3337      	adds	r3, #55	; 0x37
 8012d30:	4313      	orrs	r3, r2
 8012d32:	81a3      	strh	r3, [r4, #12]
 8012d34:	4240      	negs	r0, r0
 8012d36:	bd70      	pop	{r4, r5, r6, pc}
 8012d38:	4b29      	ldr	r3, [pc, #164]	; (8012de0 <__swsetup_r+0xe8>)
 8012d3a:	429c      	cmp	r4, r3
 8012d3c:	d101      	bne.n	8012d42 <__swsetup_r+0x4a>
 8012d3e:	68ac      	ldr	r4, [r5, #8]
 8012d40:	e7eb      	b.n	8012d1a <__swsetup_r+0x22>
 8012d42:	4b28      	ldr	r3, [pc, #160]	; (8012de4 <__swsetup_r+0xec>)
 8012d44:	429c      	cmp	r4, r3
 8012d46:	d1e8      	bne.n	8012d1a <__swsetup_r+0x22>
 8012d48:	68ec      	ldr	r4, [r5, #12]
 8012d4a:	e7e6      	b.n	8012d1a <__swsetup_r+0x22>
 8012d4c:	075b      	lsls	r3, r3, #29
 8012d4e:	d513      	bpl.n	8012d78 <__swsetup_r+0x80>
 8012d50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012d52:	2900      	cmp	r1, #0
 8012d54:	d008      	beq.n	8012d68 <__swsetup_r+0x70>
 8012d56:	0023      	movs	r3, r4
 8012d58:	3344      	adds	r3, #68	; 0x44
 8012d5a:	4299      	cmp	r1, r3
 8012d5c:	d002      	beq.n	8012d64 <__swsetup_r+0x6c>
 8012d5e:	0030      	movs	r0, r6
 8012d60:	f7ff fdc0 	bl	80128e4 <_free_r>
 8012d64:	2300      	movs	r3, #0
 8012d66:	6363      	str	r3, [r4, #52]	; 0x34
 8012d68:	2224      	movs	r2, #36	; 0x24
 8012d6a:	89a3      	ldrh	r3, [r4, #12]
 8012d6c:	4393      	bics	r3, r2
 8012d6e:	81a3      	strh	r3, [r4, #12]
 8012d70:	2300      	movs	r3, #0
 8012d72:	6063      	str	r3, [r4, #4]
 8012d74:	6923      	ldr	r3, [r4, #16]
 8012d76:	6023      	str	r3, [r4, #0]
 8012d78:	2308      	movs	r3, #8
 8012d7a:	89a2      	ldrh	r2, [r4, #12]
 8012d7c:	4313      	orrs	r3, r2
 8012d7e:	81a3      	strh	r3, [r4, #12]
 8012d80:	6923      	ldr	r3, [r4, #16]
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d10b      	bne.n	8012d9e <__swsetup_r+0xa6>
 8012d86:	21a0      	movs	r1, #160	; 0xa0
 8012d88:	2280      	movs	r2, #128	; 0x80
 8012d8a:	89a3      	ldrh	r3, [r4, #12]
 8012d8c:	0089      	lsls	r1, r1, #2
 8012d8e:	0092      	lsls	r2, r2, #2
 8012d90:	400b      	ands	r3, r1
 8012d92:	4293      	cmp	r3, r2
 8012d94:	d003      	beq.n	8012d9e <__swsetup_r+0xa6>
 8012d96:	0021      	movs	r1, r4
 8012d98:	0030      	movs	r0, r6
 8012d9a:	f000 fa27 	bl	80131ec <__smakebuf_r>
 8012d9e:	220c      	movs	r2, #12
 8012da0:	5ea3      	ldrsh	r3, [r4, r2]
 8012da2:	2001      	movs	r0, #1
 8012da4:	001a      	movs	r2, r3
 8012da6:	b299      	uxth	r1, r3
 8012da8:	4002      	ands	r2, r0
 8012daa:	4203      	tst	r3, r0
 8012dac:	d00f      	beq.n	8012dce <__swsetup_r+0xd6>
 8012dae:	2200      	movs	r2, #0
 8012db0:	60a2      	str	r2, [r4, #8]
 8012db2:	6962      	ldr	r2, [r4, #20]
 8012db4:	4252      	negs	r2, r2
 8012db6:	61a2      	str	r2, [r4, #24]
 8012db8:	2000      	movs	r0, #0
 8012dba:	6922      	ldr	r2, [r4, #16]
 8012dbc:	4282      	cmp	r2, r0
 8012dbe:	d1ba      	bne.n	8012d36 <__swsetup_r+0x3e>
 8012dc0:	060a      	lsls	r2, r1, #24
 8012dc2:	d5b8      	bpl.n	8012d36 <__swsetup_r+0x3e>
 8012dc4:	2240      	movs	r2, #64	; 0x40
 8012dc6:	4313      	orrs	r3, r2
 8012dc8:	81a3      	strh	r3, [r4, #12]
 8012dca:	3801      	subs	r0, #1
 8012dcc:	e7b3      	b.n	8012d36 <__swsetup_r+0x3e>
 8012dce:	0788      	lsls	r0, r1, #30
 8012dd0:	d400      	bmi.n	8012dd4 <__swsetup_r+0xdc>
 8012dd2:	6962      	ldr	r2, [r4, #20]
 8012dd4:	60a2      	str	r2, [r4, #8]
 8012dd6:	e7ef      	b.n	8012db8 <__swsetup_r+0xc0>
 8012dd8:	200000e4 	.word	0x200000e4
 8012ddc:	08013e68 	.word	0x08013e68
 8012de0:	08013e88 	.word	0x08013e88
 8012de4:	08013e48 	.word	0x08013e48

08012de8 <abort>:
 8012de8:	2006      	movs	r0, #6
 8012dea:	b510      	push	{r4, lr}
 8012dec:	f000 fa6c 	bl	80132c8 <raise>
 8012df0:	2001      	movs	r0, #1
 8012df2:	f7f6 f935 	bl	8009060 <_exit>
	...

08012df8 <__sflush_r>:
 8012df8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012dfa:	898b      	ldrh	r3, [r1, #12]
 8012dfc:	0005      	movs	r5, r0
 8012dfe:	000c      	movs	r4, r1
 8012e00:	071a      	lsls	r2, r3, #28
 8012e02:	d45f      	bmi.n	8012ec4 <__sflush_r+0xcc>
 8012e04:	684a      	ldr	r2, [r1, #4]
 8012e06:	2a00      	cmp	r2, #0
 8012e08:	dc04      	bgt.n	8012e14 <__sflush_r+0x1c>
 8012e0a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8012e0c:	2a00      	cmp	r2, #0
 8012e0e:	dc01      	bgt.n	8012e14 <__sflush_r+0x1c>
 8012e10:	2000      	movs	r0, #0
 8012e12:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012e14:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8012e16:	2f00      	cmp	r7, #0
 8012e18:	d0fa      	beq.n	8012e10 <__sflush_r+0x18>
 8012e1a:	2200      	movs	r2, #0
 8012e1c:	2180      	movs	r1, #128	; 0x80
 8012e1e:	682e      	ldr	r6, [r5, #0]
 8012e20:	602a      	str	r2, [r5, #0]
 8012e22:	001a      	movs	r2, r3
 8012e24:	0149      	lsls	r1, r1, #5
 8012e26:	400a      	ands	r2, r1
 8012e28:	420b      	tst	r3, r1
 8012e2a:	d034      	beq.n	8012e96 <__sflush_r+0x9e>
 8012e2c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012e2e:	89a3      	ldrh	r3, [r4, #12]
 8012e30:	075b      	lsls	r3, r3, #29
 8012e32:	d506      	bpl.n	8012e42 <__sflush_r+0x4a>
 8012e34:	6863      	ldr	r3, [r4, #4]
 8012e36:	1ac0      	subs	r0, r0, r3
 8012e38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d001      	beq.n	8012e42 <__sflush_r+0x4a>
 8012e3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012e40:	1ac0      	subs	r0, r0, r3
 8012e42:	0002      	movs	r2, r0
 8012e44:	6a21      	ldr	r1, [r4, #32]
 8012e46:	2300      	movs	r3, #0
 8012e48:	0028      	movs	r0, r5
 8012e4a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8012e4c:	47b8      	blx	r7
 8012e4e:	89a1      	ldrh	r1, [r4, #12]
 8012e50:	1c43      	adds	r3, r0, #1
 8012e52:	d106      	bne.n	8012e62 <__sflush_r+0x6a>
 8012e54:	682b      	ldr	r3, [r5, #0]
 8012e56:	2b1d      	cmp	r3, #29
 8012e58:	d831      	bhi.n	8012ebe <__sflush_r+0xc6>
 8012e5a:	4a2c      	ldr	r2, [pc, #176]	; (8012f0c <__sflush_r+0x114>)
 8012e5c:	40da      	lsrs	r2, r3
 8012e5e:	07d3      	lsls	r3, r2, #31
 8012e60:	d52d      	bpl.n	8012ebe <__sflush_r+0xc6>
 8012e62:	2300      	movs	r3, #0
 8012e64:	6063      	str	r3, [r4, #4]
 8012e66:	6923      	ldr	r3, [r4, #16]
 8012e68:	6023      	str	r3, [r4, #0]
 8012e6a:	04cb      	lsls	r3, r1, #19
 8012e6c:	d505      	bpl.n	8012e7a <__sflush_r+0x82>
 8012e6e:	1c43      	adds	r3, r0, #1
 8012e70:	d102      	bne.n	8012e78 <__sflush_r+0x80>
 8012e72:	682b      	ldr	r3, [r5, #0]
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d100      	bne.n	8012e7a <__sflush_r+0x82>
 8012e78:	6560      	str	r0, [r4, #84]	; 0x54
 8012e7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012e7c:	602e      	str	r6, [r5, #0]
 8012e7e:	2900      	cmp	r1, #0
 8012e80:	d0c6      	beq.n	8012e10 <__sflush_r+0x18>
 8012e82:	0023      	movs	r3, r4
 8012e84:	3344      	adds	r3, #68	; 0x44
 8012e86:	4299      	cmp	r1, r3
 8012e88:	d002      	beq.n	8012e90 <__sflush_r+0x98>
 8012e8a:	0028      	movs	r0, r5
 8012e8c:	f7ff fd2a 	bl	80128e4 <_free_r>
 8012e90:	2000      	movs	r0, #0
 8012e92:	6360      	str	r0, [r4, #52]	; 0x34
 8012e94:	e7bd      	b.n	8012e12 <__sflush_r+0x1a>
 8012e96:	2301      	movs	r3, #1
 8012e98:	0028      	movs	r0, r5
 8012e9a:	6a21      	ldr	r1, [r4, #32]
 8012e9c:	47b8      	blx	r7
 8012e9e:	1c43      	adds	r3, r0, #1
 8012ea0:	d1c5      	bne.n	8012e2e <__sflush_r+0x36>
 8012ea2:	682b      	ldr	r3, [r5, #0]
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d0c2      	beq.n	8012e2e <__sflush_r+0x36>
 8012ea8:	2b1d      	cmp	r3, #29
 8012eaa:	d001      	beq.n	8012eb0 <__sflush_r+0xb8>
 8012eac:	2b16      	cmp	r3, #22
 8012eae:	d101      	bne.n	8012eb4 <__sflush_r+0xbc>
 8012eb0:	602e      	str	r6, [r5, #0]
 8012eb2:	e7ad      	b.n	8012e10 <__sflush_r+0x18>
 8012eb4:	2340      	movs	r3, #64	; 0x40
 8012eb6:	89a2      	ldrh	r2, [r4, #12]
 8012eb8:	4313      	orrs	r3, r2
 8012eba:	81a3      	strh	r3, [r4, #12]
 8012ebc:	e7a9      	b.n	8012e12 <__sflush_r+0x1a>
 8012ebe:	2340      	movs	r3, #64	; 0x40
 8012ec0:	430b      	orrs	r3, r1
 8012ec2:	e7fa      	b.n	8012eba <__sflush_r+0xc2>
 8012ec4:	690f      	ldr	r7, [r1, #16]
 8012ec6:	2f00      	cmp	r7, #0
 8012ec8:	d0a2      	beq.n	8012e10 <__sflush_r+0x18>
 8012eca:	680a      	ldr	r2, [r1, #0]
 8012ecc:	600f      	str	r7, [r1, #0]
 8012ece:	1bd2      	subs	r2, r2, r7
 8012ed0:	9201      	str	r2, [sp, #4]
 8012ed2:	2200      	movs	r2, #0
 8012ed4:	079b      	lsls	r3, r3, #30
 8012ed6:	d100      	bne.n	8012eda <__sflush_r+0xe2>
 8012ed8:	694a      	ldr	r2, [r1, #20]
 8012eda:	60a2      	str	r2, [r4, #8]
 8012edc:	9b01      	ldr	r3, [sp, #4]
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	dc00      	bgt.n	8012ee4 <__sflush_r+0xec>
 8012ee2:	e795      	b.n	8012e10 <__sflush_r+0x18>
 8012ee4:	003a      	movs	r2, r7
 8012ee6:	0028      	movs	r0, r5
 8012ee8:	9b01      	ldr	r3, [sp, #4]
 8012eea:	6a21      	ldr	r1, [r4, #32]
 8012eec:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012eee:	47b0      	blx	r6
 8012ef0:	2800      	cmp	r0, #0
 8012ef2:	dc06      	bgt.n	8012f02 <__sflush_r+0x10a>
 8012ef4:	2340      	movs	r3, #64	; 0x40
 8012ef6:	2001      	movs	r0, #1
 8012ef8:	89a2      	ldrh	r2, [r4, #12]
 8012efa:	4240      	negs	r0, r0
 8012efc:	4313      	orrs	r3, r2
 8012efe:	81a3      	strh	r3, [r4, #12]
 8012f00:	e787      	b.n	8012e12 <__sflush_r+0x1a>
 8012f02:	9b01      	ldr	r3, [sp, #4]
 8012f04:	183f      	adds	r7, r7, r0
 8012f06:	1a1b      	subs	r3, r3, r0
 8012f08:	9301      	str	r3, [sp, #4]
 8012f0a:	e7e7      	b.n	8012edc <__sflush_r+0xe4>
 8012f0c:	20400001 	.word	0x20400001

08012f10 <_fflush_r>:
 8012f10:	690b      	ldr	r3, [r1, #16]
 8012f12:	b570      	push	{r4, r5, r6, lr}
 8012f14:	0005      	movs	r5, r0
 8012f16:	000c      	movs	r4, r1
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	d102      	bne.n	8012f22 <_fflush_r+0x12>
 8012f1c:	2500      	movs	r5, #0
 8012f1e:	0028      	movs	r0, r5
 8012f20:	bd70      	pop	{r4, r5, r6, pc}
 8012f22:	2800      	cmp	r0, #0
 8012f24:	d004      	beq.n	8012f30 <_fflush_r+0x20>
 8012f26:	6983      	ldr	r3, [r0, #24]
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d101      	bne.n	8012f30 <_fflush_r+0x20>
 8012f2c:	f000 f892 	bl	8013054 <__sinit>
 8012f30:	4b14      	ldr	r3, [pc, #80]	; (8012f84 <_fflush_r+0x74>)
 8012f32:	429c      	cmp	r4, r3
 8012f34:	d11b      	bne.n	8012f6e <_fflush_r+0x5e>
 8012f36:	686c      	ldr	r4, [r5, #4]
 8012f38:	220c      	movs	r2, #12
 8012f3a:	5ea3      	ldrsh	r3, [r4, r2]
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d0ed      	beq.n	8012f1c <_fflush_r+0xc>
 8012f40:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012f42:	07d2      	lsls	r2, r2, #31
 8012f44:	d404      	bmi.n	8012f50 <_fflush_r+0x40>
 8012f46:	059b      	lsls	r3, r3, #22
 8012f48:	d402      	bmi.n	8012f50 <_fflush_r+0x40>
 8012f4a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012f4c:	f000 f923 	bl	8013196 <__retarget_lock_acquire_recursive>
 8012f50:	0028      	movs	r0, r5
 8012f52:	0021      	movs	r1, r4
 8012f54:	f7ff ff50 	bl	8012df8 <__sflush_r>
 8012f58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012f5a:	0005      	movs	r5, r0
 8012f5c:	07db      	lsls	r3, r3, #31
 8012f5e:	d4de      	bmi.n	8012f1e <_fflush_r+0xe>
 8012f60:	89a3      	ldrh	r3, [r4, #12]
 8012f62:	059b      	lsls	r3, r3, #22
 8012f64:	d4db      	bmi.n	8012f1e <_fflush_r+0xe>
 8012f66:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012f68:	f000 f916 	bl	8013198 <__retarget_lock_release_recursive>
 8012f6c:	e7d7      	b.n	8012f1e <_fflush_r+0xe>
 8012f6e:	4b06      	ldr	r3, [pc, #24]	; (8012f88 <_fflush_r+0x78>)
 8012f70:	429c      	cmp	r4, r3
 8012f72:	d101      	bne.n	8012f78 <_fflush_r+0x68>
 8012f74:	68ac      	ldr	r4, [r5, #8]
 8012f76:	e7df      	b.n	8012f38 <_fflush_r+0x28>
 8012f78:	4b04      	ldr	r3, [pc, #16]	; (8012f8c <_fflush_r+0x7c>)
 8012f7a:	429c      	cmp	r4, r3
 8012f7c:	d1dc      	bne.n	8012f38 <_fflush_r+0x28>
 8012f7e:	68ec      	ldr	r4, [r5, #12]
 8012f80:	e7da      	b.n	8012f38 <_fflush_r+0x28>
 8012f82:	46c0      	nop			; (mov r8, r8)
 8012f84:	08013e68 	.word	0x08013e68
 8012f88:	08013e88 	.word	0x08013e88
 8012f8c:	08013e48 	.word	0x08013e48

08012f90 <std>:
 8012f90:	2300      	movs	r3, #0
 8012f92:	b510      	push	{r4, lr}
 8012f94:	0004      	movs	r4, r0
 8012f96:	6003      	str	r3, [r0, #0]
 8012f98:	6043      	str	r3, [r0, #4]
 8012f9a:	6083      	str	r3, [r0, #8]
 8012f9c:	8181      	strh	r1, [r0, #12]
 8012f9e:	6643      	str	r3, [r0, #100]	; 0x64
 8012fa0:	0019      	movs	r1, r3
 8012fa2:	81c2      	strh	r2, [r0, #14]
 8012fa4:	6103      	str	r3, [r0, #16]
 8012fa6:	6143      	str	r3, [r0, #20]
 8012fa8:	6183      	str	r3, [r0, #24]
 8012faa:	2208      	movs	r2, #8
 8012fac:	305c      	adds	r0, #92	; 0x5c
 8012fae:	f7fc f82a 	bl	800f006 <memset>
 8012fb2:	4b05      	ldr	r3, [pc, #20]	; (8012fc8 <std+0x38>)
 8012fb4:	6224      	str	r4, [r4, #32]
 8012fb6:	6263      	str	r3, [r4, #36]	; 0x24
 8012fb8:	4b04      	ldr	r3, [pc, #16]	; (8012fcc <std+0x3c>)
 8012fba:	62a3      	str	r3, [r4, #40]	; 0x28
 8012fbc:	4b04      	ldr	r3, [pc, #16]	; (8012fd0 <std+0x40>)
 8012fbe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012fc0:	4b04      	ldr	r3, [pc, #16]	; (8012fd4 <std+0x44>)
 8012fc2:	6323      	str	r3, [r4, #48]	; 0x30
 8012fc4:	bd10      	pop	{r4, pc}
 8012fc6:	46c0      	nop			; (mov r8, r8)
 8012fc8:	08013309 	.word	0x08013309
 8012fcc:	08013331 	.word	0x08013331
 8012fd0:	08013369 	.word	0x08013369
 8012fd4:	08013395 	.word	0x08013395

08012fd8 <_cleanup_r>:
 8012fd8:	b510      	push	{r4, lr}
 8012fda:	4902      	ldr	r1, [pc, #8]	; (8012fe4 <_cleanup_r+0xc>)
 8012fdc:	f000 f8ba 	bl	8013154 <_fwalk_reent>
 8012fe0:	bd10      	pop	{r4, pc}
 8012fe2:	46c0      	nop			; (mov r8, r8)
 8012fe4:	08012f11 	.word	0x08012f11

08012fe8 <__sfmoreglue>:
 8012fe8:	b570      	push	{r4, r5, r6, lr}
 8012fea:	2568      	movs	r5, #104	; 0x68
 8012fec:	1e4a      	subs	r2, r1, #1
 8012fee:	4355      	muls	r5, r2
 8012ff0:	000e      	movs	r6, r1
 8012ff2:	0029      	movs	r1, r5
 8012ff4:	3174      	adds	r1, #116	; 0x74
 8012ff6:	f7fe f99b 	bl	8011330 <_malloc_r>
 8012ffa:	1e04      	subs	r4, r0, #0
 8012ffc:	d008      	beq.n	8013010 <__sfmoreglue+0x28>
 8012ffe:	2100      	movs	r1, #0
 8013000:	002a      	movs	r2, r5
 8013002:	6001      	str	r1, [r0, #0]
 8013004:	6046      	str	r6, [r0, #4]
 8013006:	300c      	adds	r0, #12
 8013008:	60a0      	str	r0, [r4, #8]
 801300a:	3268      	adds	r2, #104	; 0x68
 801300c:	f7fb fffb 	bl	800f006 <memset>
 8013010:	0020      	movs	r0, r4
 8013012:	bd70      	pop	{r4, r5, r6, pc}

08013014 <__sfp_lock_acquire>:
 8013014:	b510      	push	{r4, lr}
 8013016:	4802      	ldr	r0, [pc, #8]	; (8013020 <__sfp_lock_acquire+0xc>)
 8013018:	f000 f8bd 	bl	8013196 <__retarget_lock_acquire_recursive>
 801301c:	bd10      	pop	{r4, pc}
 801301e:	46c0      	nop			; (mov r8, r8)
 8013020:	20000dad 	.word	0x20000dad

08013024 <__sfp_lock_release>:
 8013024:	b510      	push	{r4, lr}
 8013026:	4802      	ldr	r0, [pc, #8]	; (8013030 <__sfp_lock_release+0xc>)
 8013028:	f000 f8b6 	bl	8013198 <__retarget_lock_release_recursive>
 801302c:	bd10      	pop	{r4, pc}
 801302e:	46c0      	nop			; (mov r8, r8)
 8013030:	20000dad 	.word	0x20000dad

08013034 <__sinit_lock_acquire>:
 8013034:	b510      	push	{r4, lr}
 8013036:	4802      	ldr	r0, [pc, #8]	; (8013040 <__sinit_lock_acquire+0xc>)
 8013038:	f000 f8ad 	bl	8013196 <__retarget_lock_acquire_recursive>
 801303c:	bd10      	pop	{r4, pc}
 801303e:	46c0      	nop			; (mov r8, r8)
 8013040:	20000dae 	.word	0x20000dae

08013044 <__sinit_lock_release>:
 8013044:	b510      	push	{r4, lr}
 8013046:	4802      	ldr	r0, [pc, #8]	; (8013050 <__sinit_lock_release+0xc>)
 8013048:	f000 f8a6 	bl	8013198 <__retarget_lock_release_recursive>
 801304c:	bd10      	pop	{r4, pc}
 801304e:	46c0      	nop			; (mov r8, r8)
 8013050:	20000dae 	.word	0x20000dae

08013054 <__sinit>:
 8013054:	b513      	push	{r0, r1, r4, lr}
 8013056:	0004      	movs	r4, r0
 8013058:	f7ff ffec 	bl	8013034 <__sinit_lock_acquire>
 801305c:	69a3      	ldr	r3, [r4, #24]
 801305e:	2b00      	cmp	r3, #0
 8013060:	d002      	beq.n	8013068 <__sinit+0x14>
 8013062:	f7ff ffef 	bl	8013044 <__sinit_lock_release>
 8013066:	bd13      	pop	{r0, r1, r4, pc}
 8013068:	64a3      	str	r3, [r4, #72]	; 0x48
 801306a:	64e3      	str	r3, [r4, #76]	; 0x4c
 801306c:	6523      	str	r3, [r4, #80]	; 0x50
 801306e:	4b13      	ldr	r3, [pc, #76]	; (80130bc <__sinit+0x68>)
 8013070:	4a13      	ldr	r2, [pc, #76]	; (80130c0 <__sinit+0x6c>)
 8013072:	681b      	ldr	r3, [r3, #0]
 8013074:	62a2      	str	r2, [r4, #40]	; 0x28
 8013076:	9301      	str	r3, [sp, #4]
 8013078:	42a3      	cmp	r3, r4
 801307a:	d101      	bne.n	8013080 <__sinit+0x2c>
 801307c:	2301      	movs	r3, #1
 801307e:	61a3      	str	r3, [r4, #24]
 8013080:	0020      	movs	r0, r4
 8013082:	f000 f81f 	bl	80130c4 <__sfp>
 8013086:	6060      	str	r0, [r4, #4]
 8013088:	0020      	movs	r0, r4
 801308a:	f000 f81b 	bl	80130c4 <__sfp>
 801308e:	60a0      	str	r0, [r4, #8]
 8013090:	0020      	movs	r0, r4
 8013092:	f000 f817 	bl	80130c4 <__sfp>
 8013096:	2200      	movs	r2, #0
 8013098:	2104      	movs	r1, #4
 801309a:	60e0      	str	r0, [r4, #12]
 801309c:	6860      	ldr	r0, [r4, #4]
 801309e:	f7ff ff77 	bl	8012f90 <std>
 80130a2:	2201      	movs	r2, #1
 80130a4:	2109      	movs	r1, #9
 80130a6:	68a0      	ldr	r0, [r4, #8]
 80130a8:	f7ff ff72 	bl	8012f90 <std>
 80130ac:	2202      	movs	r2, #2
 80130ae:	2112      	movs	r1, #18
 80130b0:	68e0      	ldr	r0, [r4, #12]
 80130b2:	f7ff ff6d 	bl	8012f90 <std>
 80130b6:	2301      	movs	r3, #1
 80130b8:	61a3      	str	r3, [r4, #24]
 80130ba:	e7d2      	b.n	8013062 <__sinit+0xe>
 80130bc:	08013a10 	.word	0x08013a10
 80130c0:	08012fd9 	.word	0x08012fd9

080130c4 <__sfp>:
 80130c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130c6:	0007      	movs	r7, r0
 80130c8:	f7ff ffa4 	bl	8013014 <__sfp_lock_acquire>
 80130cc:	4b1f      	ldr	r3, [pc, #124]	; (801314c <__sfp+0x88>)
 80130ce:	681e      	ldr	r6, [r3, #0]
 80130d0:	69b3      	ldr	r3, [r6, #24]
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d102      	bne.n	80130dc <__sfp+0x18>
 80130d6:	0030      	movs	r0, r6
 80130d8:	f7ff ffbc 	bl	8013054 <__sinit>
 80130dc:	3648      	adds	r6, #72	; 0x48
 80130de:	68b4      	ldr	r4, [r6, #8]
 80130e0:	6873      	ldr	r3, [r6, #4]
 80130e2:	3b01      	subs	r3, #1
 80130e4:	d504      	bpl.n	80130f0 <__sfp+0x2c>
 80130e6:	6833      	ldr	r3, [r6, #0]
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d022      	beq.n	8013132 <__sfp+0x6e>
 80130ec:	6836      	ldr	r6, [r6, #0]
 80130ee:	e7f6      	b.n	80130de <__sfp+0x1a>
 80130f0:	220c      	movs	r2, #12
 80130f2:	5ea5      	ldrsh	r5, [r4, r2]
 80130f4:	2d00      	cmp	r5, #0
 80130f6:	d11a      	bne.n	801312e <__sfp+0x6a>
 80130f8:	0020      	movs	r0, r4
 80130fa:	4b15      	ldr	r3, [pc, #84]	; (8013150 <__sfp+0x8c>)
 80130fc:	3058      	adds	r0, #88	; 0x58
 80130fe:	60e3      	str	r3, [r4, #12]
 8013100:	6665      	str	r5, [r4, #100]	; 0x64
 8013102:	f000 f847 	bl	8013194 <__retarget_lock_init_recursive>
 8013106:	f7ff ff8d 	bl	8013024 <__sfp_lock_release>
 801310a:	0020      	movs	r0, r4
 801310c:	2208      	movs	r2, #8
 801310e:	0029      	movs	r1, r5
 8013110:	6025      	str	r5, [r4, #0]
 8013112:	60a5      	str	r5, [r4, #8]
 8013114:	6065      	str	r5, [r4, #4]
 8013116:	6125      	str	r5, [r4, #16]
 8013118:	6165      	str	r5, [r4, #20]
 801311a:	61a5      	str	r5, [r4, #24]
 801311c:	305c      	adds	r0, #92	; 0x5c
 801311e:	f7fb ff72 	bl	800f006 <memset>
 8013122:	6365      	str	r5, [r4, #52]	; 0x34
 8013124:	63a5      	str	r5, [r4, #56]	; 0x38
 8013126:	64a5      	str	r5, [r4, #72]	; 0x48
 8013128:	64e5      	str	r5, [r4, #76]	; 0x4c
 801312a:	0020      	movs	r0, r4
 801312c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801312e:	3468      	adds	r4, #104	; 0x68
 8013130:	e7d7      	b.n	80130e2 <__sfp+0x1e>
 8013132:	2104      	movs	r1, #4
 8013134:	0038      	movs	r0, r7
 8013136:	f7ff ff57 	bl	8012fe8 <__sfmoreglue>
 801313a:	1e04      	subs	r4, r0, #0
 801313c:	6030      	str	r0, [r6, #0]
 801313e:	d1d5      	bne.n	80130ec <__sfp+0x28>
 8013140:	f7ff ff70 	bl	8013024 <__sfp_lock_release>
 8013144:	230c      	movs	r3, #12
 8013146:	603b      	str	r3, [r7, #0]
 8013148:	e7ef      	b.n	801312a <__sfp+0x66>
 801314a:	46c0      	nop			; (mov r8, r8)
 801314c:	08013a10 	.word	0x08013a10
 8013150:	ffff0001 	.word	0xffff0001

08013154 <_fwalk_reent>:
 8013154:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013156:	0004      	movs	r4, r0
 8013158:	0006      	movs	r6, r0
 801315a:	2700      	movs	r7, #0
 801315c:	9101      	str	r1, [sp, #4]
 801315e:	3448      	adds	r4, #72	; 0x48
 8013160:	6863      	ldr	r3, [r4, #4]
 8013162:	68a5      	ldr	r5, [r4, #8]
 8013164:	9300      	str	r3, [sp, #0]
 8013166:	9b00      	ldr	r3, [sp, #0]
 8013168:	3b01      	subs	r3, #1
 801316a:	9300      	str	r3, [sp, #0]
 801316c:	d504      	bpl.n	8013178 <_fwalk_reent+0x24>
 801316e:	6824      	ldr	r4, [r4, #0]
 8013170:	2c00      	cmp	r4, #0
 8013172:	d1f5      	bne.n	8013160 <_fwalk_reent+0xc>
 8013174:	0038      	movs	r0, r7
 8013176:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8013178:	89ab      	ldrh	r3, [r5, #12]
 801317a:	2b01      	cmp	r3, #1
 801317c:	d908      	bls.n	8013190 <_fwalk_reent+0x3c>
 801317e:	220e      	movs	r2, #14
 8013180:	5eab      	ldrsh	r3, [r5, r2]
 8013182:	3301      	adds	r3, #1
 8013184:	d004      	beq.n	8013190 <_fwalk_reent+0x3c>
 8013186:	0029      	movs	r1, r5
 8013188:	0030      	movs	r0, r6
 801318a:	9b01      	ldr	r3, [sp, #4]
 801318c:	4798      	blx	r3
 801318e:	4307      	orrs	r7, r0
 8013190:	3568      	adds	r5, #104	; 0x68
 8013192:	e7e8      	b.n	8013166 <_fwalk_reent+0x12>

08013194 <__retarget_lock_init_recursive>:
 8013194:	4770      	bx	lr

08013196 <__retarget_lock_acquire_recursive>:
 8013196:	4770      	bx	lr

08013198 <__retarget_lock_release_recursive>:
 8013198:	4770      	bx	lr
	...

0801319c <__swhatbuf_r>:
 801319c:	b570      	push	{r4, r5, r6, lr}
 801319e:	000e      	movs	r6, r1
 80131a0:	001d      	movs	r5, r3
 80131a2:	230e      	movs	r3, #14
 80131a4:	5ec9      	ldrsh	r1, [r1, r3]
 80131a6:	0014      	movs	r4, r2
 80131a8:	b096      	sub	sp, #88	; 0x58
 80131aa:	2900      	cmp	r1, #0
 80131ac:	da08      	bge.n	80131c0 <__swhatbuf_r+0x24>
 80131ae:	220c      	movs	r2, #12
 80131b0:	5eb3      	ldrsh	r3, [r6, r2]
 80131b2:	2200      	movs	r2, #0
 80131b4:	602a      	str	r2, [r5, #0]
 80131b6:	061b      	lsls	r3, r3, #24
 80131b8:	d411      	bmi.n	80131de <__swhatbuf_r+0x42>
 80131ba:	2380      	movs	r3, #128	; 0x80
 80131bc:	00db      	lsls	r3, r3, #3
 80131be:	e00f      	b.n	80131e0 <__swhatbuf_r+0x44>
 80131c0:	466a      	mov	r2, sp
 80131c2:	f000 f913 	bl	80133ec <_fstat_r>
 80131c6:	2800      	cmp	r0, #0
 80131c8:	dbf1      	blt.n	80131ae <__swhatbuf_r+0x12>
 80131ca:	23f0      	movs	r3, #240	; 0xf0
 80131cc:	9901      	ldr	r1, [sp, #4]
 80131ce:	021b      	lsls	r3, r3, #8
 80131d0:	4019      	ands	r1, r3
 80131d2:	4b05      	ldr	r3, [pc, #20]	; (80131e8 <__swhatbuf_r+0x4c>)
 80131d4:	18c9      	adds	r1, r1, r3
 80131d6:	424b      	negs	r3, r1
 80131d8:	4159      	adcs	r1, r3
 80131da:	6029      	str	r1, [r5, #0]
 80131dc:	e7ed      	b.n	80131ba <__swhatbuf_r+0x1e>
 80131de:	2340      	movs	r3, #64	; 0x40
 80131e0:	2000      	movs	r0, #0
 80131e2:	6023      	str	r3, [r4, #0]
 80131e4:	b016      	add	sp, #88	; 0x58
 80131e6:	bd70      	pop	{r4, r5, r6, pc}
 80131e8:	ffffe000 	.word	0xffffe000

080131ec <__smakebuf_r>:
 80131ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80131ee:	2602      	movs	r6, #2
 80131f0:	898b      	ldrh	r3, [r1, #12]
 80131f2:	0005      	movs	r5, r0
 80131f4:	000c      	movs	r4, r1
 80131f6:	4233      	tst	r3, r6
 80131f8:	d006      	beq.n	8013208 <__smakebuf_r+0x1c>
 80131fa:	0023      	movs	r3, r4
 80131fc:	3347      	adds	r3, #71	; 0x47
 80131fe:	6023      	str	r3, [r4, #0]
 8013200:	6123      	str	r3, [r4, #16]
 8013202:	2301      	movs	r3, #1
 8013204:	6163      	str	r3, [r4, #20]
 8013206:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8013208:	466a      	mov	r2, sp
 801320a:	ab01      	add	r3, sp, #4
 801320c:	f7ff ffc6 	bl	801319c <__swhatbuf_r>
 8013210:	9900      	ldr	r1, [sp, #0]
 8013212:	0007      	movs	r7, r0
 8013214:	0028      	movs	r0, r5
 8013216:	f7fe f88b 	bl	8011330 <_malloc_r>
 801321a:	2800      	cmp	r0, #0
 801321c:	d108      	bne.n	8013230 <__smakebuf_r+0x44>
 801321e:	220c      	movs	r2, #12
 8013220:	5ea3      	ldrsh	r3, [r4, r2]
 8013222:	059a      	lsls	r2, r3, #22
 8013224:	d4ef      	bmi.n	8013206 <__smakebuf_r+0x1a>
 8013226:	2203      	movs	r2, #3
 8013228:	4393      	bics	r3, r2
 801322a:	431e      	orrs	r6, r3
 801322c:	81a6      	strh	r6, [r4, #12]
 801322e:	e7e4      	b.n	80131fa <__smakebuf_r+0xe>
 8013230:	4b0f      	ldr	r3, [pc, #60]	; (8013270 <__smakebuf_r+0x84>)
 8013232:	62ab      	str	r3, [r5, #40]	; 0x28
 8013234:	2380      	movs	r3, #128	; 0x80
 8013236:	89a2      	ldrh	r2, [r4, #12]
 8013238:	6020      	str	r0, [r4, #0]
 801323a:	4313      	orrs	r3, r2
 801323c:	81a3      	strh	r3, [r4, #12]
 801323e:	9b00      	ldr	r3, [sp, #0]
 8013240:	6120      	str	r0, [r4, #16]
 8013242:	6163      	str	r3, [r4, #20]
 8013244:	9b01      	ldr	r3, [sp, #4]
 8013246:	2b00      	cmp	r3, #0
 8013248:	d00d      	beq.n	8013266 <__smakebuf_r+0x7a>
 801324a:	0028      	movs	r0, r5
 801324c:	230e      	movs	r3, #14
 801324e:	5ee1      	ldrsh	r1, [r4, r3]
 8013250:	f000 f8de 	bl	8013410 <_isatty_r>
 8013254:	2800      	cmp	r0, #0
 8013256:	d006      	beq.n	8013266 <__smakebuf_r+0x7a>
 8013258:	2203      	movs	r2, #3
 801325a:	89a3      	ldrh	r3, [r4, #12]
 801325c:	4393      	bics	r3, r2
 801325e:	001a      	movs	r2, r3
 8013260:	2301      	movs	r3, #1
 8013262:	4313      	orrs	r3, r2
 8013264:	81a3      	strh	r3, [r4, #12]
 8013266:	89a0      	ldrh	r0, [r4, #12]
 8013268:	4307      	orrs	r7, r0
 801326a:	81a7      	strh	r7, [r4, #12]
 801326c:	e7cb      	b.n	8013206 <__smakebuf_r+0x1a>
 801326e:	46c0      	nop			; (mov r8, r8)
 8013270:	08012fd9 	.word	0x08012fd9

08013274 <_raise_r>:
 8013274:	b570      	push	{r4, r5, r6, lr}
 8013276:	0004      	movs	r4, r0
 8013278:	000d      	movs	r5, r1
 801327a:	291f      	cmp	r1, #31
 801327c:	d904      	bls.n	8013288 <_raise_r+0x14>
 801327e:	2316      	movs	r3, #22
 8013280:	6003      	str	r3, [r0, #0]
 8013282:	2001      	movs	r0, #1
 8013284:	4240      	negs	r0, r0
 8013286:	bd70      	pop	{r4, r5, r6, pc}
 8013288:	6c43      	ldr	r3, [r0, #68]	; 0x44
 801328a:	2b00      	cmp	r3, #0
 801328c:	d004      	beq.n	8013298 <_raise_r+0x24>
 801328e:	008a      	lsls	r2, r1, #2
 8013290:	189b      	adds	r3, r3, r2
 8013292:	681a      	ldr	r2, [r3, #0]
 8013294:	2a00      	cmp	r2, #0
 8013296:	d108      	bne.n	80132aa <_raise_r+0x36>
 8013298:	0020      	movs	r0, r4
 801329a:	f000 f831 	bl	8013300 <_getpid_r>
 801329e:	002a      	movs	r2, r5
 80132a0:	0001      	movs	r1, r0
 80132a2:	0020      	movs	r0, r4
 80132a4:	f000 f81a 	bl	80132dc <_kill_r>
 80132a8:	e7ed      	b.n	8013286 <_raise_r+0x12>
 80132aa:	2000      	movs	r0, #0
 80132ac:	2a01      	cmp	r2, #1
 80132ae:	d0ea      	beq.n	8013286 <_raise_r+0x12>
 80132b0:	1c51      	adds	r1, r2, #1
 80132b2:	d103      	bne.n	80132bc <_raise_r+0x48>
 80132b4:	2316      	movs	r3, #22
 80132b6:	3001      	adds	r0, #1
 80132b8:	6023      	str	r3, [r4, #0]
 80132ba:	e7e4      	b.n	8013286 <_raise_r+0x12>
 80132bc:	2400      	movs	r4, #0
 80132be:	0028      	movs	r0, r5
 80132c0:	601c      	str	r4, [r3, #0]
 80132c2:	4790      	blx	r2
 80132c4:	0020      	movs	r0, r4
 80132c6:	e7de      	b.n	8013286 <_raise_r+0x12>

080132c8 <raise>:
 80132c8:	b510      	push	{r4, lr}
 80132ca:	4b03      	ldr	r3, [pc, #12]	; (80132d8 <raise+0x10>)
 80132cc:	0001      	movs	r1, r0
 80132ce:	6818      	ldr	r0, [r3, #0]
 80132d0:	f7ff ffd0 	bl	8013274 <_raise_r>
 80132d4:	bd10      	pop	{r4, pc}
 80132d6:	46c0      	nop			; (mov r8, r8)
 80132d8:	200000e4 	.word	0x200000e4

080132dc <_kill_r>:
 80132dc:	2300      	movs	r3, #0
 80132de:	b570      	push	{r4, r5, r6, lr}
 80132e0:	4d06      	ldr	r5, [pc, #24]	; (80132fc <_kill_r+0x20>)
 80132e2:	0004      	movs	r4, r0
 80132e4:	0008      	movs	r0, r1
 80132e6:	0011      	movs	r1, r2
 80132e8:	602b      	str	r3, [r5, #0]
 80132ea:	f7f5 fea9 	bl	8009040 <_kill>
 80132ee:	1c43      	adds	r3, r0, #1
 80132f0:	d103      	bne.n	80132fa <_kill_r+0x1e>
 80132f2:	682b      	ldr	r3, [r5, #0]
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d000      	beq.n	80132fa <_kill_r+0x1e>
 80132f8:	6023      	str	r3, [r4, #0]
 80132fa:	bd70      	pop	{r4, r5, r6, pc}
 80132fc:	20000da8 	.word	0x20000da8

08013300 <_getpid_r>:
 8013300:	b510      	push	{r4, lr}
 8013302:	f7f5 fe97 	bl	8009034 <_getpid>
 8013306:	bd10      	pop	{r4, pc}

08013308 <__sread>:
 8013308:	b570      	push	{r4, r5, r6, lr}
 801330a:	000c      	movs	r4, r1
 801330c:	250e      	movs	r5, #14
 801330e:	5f49      	ldrsh	r1, [r1, r5]
 8013310:	f000 f8a4 	bl	801345c <_read_r>
 8013314:	2800      	cmp	r0, #0
 8013316:	db03      	blt.n	8013320 <__sread+0x18>
 8013318:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801331a:	181b      	adds	r3, r3, r0
 801331c:	6563      	str	r3, [r4, #84]	; 0x54
 801331e:	bd70      	pop	{r4, r5, r6, pc}
 8013320:	89a3      	ldrh	r3, [r4, #12]
 8013322:	4a02      	ldr	r2, [pc, #8]	; (801332c <__sread+0x24>)
 8013324:	4013      	ands	r3, r2
 8013326:	81a3      	strh	r3, [r4, #12]
 8013328:	e7f9      	b.n	801331e <__sread+0x16>
 801332a:	46c0      	nop			; (mov r8, r8)
 801332c:	ffffefff 	.word	0xffffefff

08013330 <__swrite>:
 8013330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013332:	001f      	movs	r7, r3
 8013334:	898b      	ldrh	r3, [r1, #12]
 8013336:	0005      	movs	r5, r0
 8013338:	000c      	movs	r4, r1
 801333a:	0016      	movs	r6, r2
 801333c:	05db      	lsls	r3, r3, #23
 801333e:	d505      	bpl.n	801334c <__swrite+0x1c>
 8013340:	230e      	movs	r3, #14
 8013342:	5ec9      	ldrsh	r1, [r1, r3]
 8013344:	2200      	movs	r2, #0
 8013346:	2302      	movs	r3, #2
 8013348:	f000 f874 	bl	8013434 <_lseek_r>
 801334c:	89a3      	ldrh	r3, [r4, #12]
 801334e:	4a05      	ldr	r2, [pc, #20]	; (8013364 <__swrite+0x34>)
 8013350:	0028      	movs	r0, r5
 8013352:	4013      	ands	r3, r2
 8013354:	81a3      	strh	r3, [r4, #12]
 8013356:	0032      	movs	r2, r6
 8013358:	230e      	movs	r3, #14
 801335a:	5ee1      	ldrsh	r1, [r4, r3]
 801335c:	003b      	movs	r3, r7
 801335e:	f000 f81f 	bl	80133a0 <_write_r>
 8013362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013364:	ffffefff 	.word	0xffffefff

08013368 <__sseek>:
 8013368:	b570      	push	{r4, r5, r6, lr}
 801336a:	000c      	movs	r4, r1
 801336c:	250e      	movs	r5, #14
 801336e:	5f49      	ldrsh	r1, [r1, r5]
 8013370:	f000 f860 	bl	8013434 <_lseek_r>
 8013374:	89a3      	ldrh	r3, [r4, #12]
 8013376:	1c42      	adds	r2, r0, #1
 8013378:	d103      	bne.n	8013382 <__sseek+0x1a>
 801337a:	4a05      	ldr	r2, [pc, #20]	; (8013390 <__sseek+0x28>)
 801337c:	4013      	ands	r3, r2
 801337e:	81a3      	strh	r3, [r4, #12]
 8013380:	bd70      	pop	{r4, r5, r6, pc}
 8013382:	2280      	movs	r2, #128	; 0x80
 8013384:	0152      	lsls	r2, r2, #5
 8013386:	4313      	orrs	r3, r2
 8013388:	81a3      	strh	r3, [r4, #12]
 801338a:	6560      	str	r0, [r4, #84]	; 0x54
 801338c:	e7f8      	b.n	8013380 <__sseek+0x18>
 801338e:	46c0      	nop			; (mov r8, r8)
 8013390:	ffffefff 	.word	0xffffefff

08013394 <__sclose>:
 8013394:	b510      	push	{r4, lr}
 8013396:	230e      	movs	r3, #14
 8013398:	5ec9      	ldrsh	r1, [r1, r3]
 801339a:	f000 f815 	bl	80133c8 <_close_r>
 801339e:	bd10      	pop	{r4, pc}

080133a0 <_write_r>:
 80133a0:	b570      	push	{r4, r5, r6, lr}
 80133a2:	0004      	movs	r4, r0
 80133a4:	0008      	movs	r0, r1
 80133a6:	0011      	movs	r1, r2
 80133a8:	001a      	movs	r2, r3
 80133aa:	2300      	movs	r3, #0
 80133ac:	4d05      	ldr	r5, [pc, #20]	; (80133c4 <_write_r+0x24>)
 80133ae:	602b      	str	r3, [r5, #0]
 80133b0:	f7f5 fe7f 	bl	80090b2 <_write>
 80133b4:	1c43      	adds	r3, r0, #1
 80133b6:	d103      	bne.n	80133c0 <_write_r+0x20>
 80133b8:	682b      	ldr	r3, [r5, #0]
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d000      	beq.n	80133c0 <_write_r+0x20>
 80133be:	6023      	str	r3, [r4, #0]
 80133c0:	bd70      	pop	{r4, r5, r6, pc}
 80133c2:	46c0      	nop			; (mov r8, r8)
 80133c4:	20000da8 	.word	0x20000da8

080133c8 <_close_r>:
 80133c8:	2300      	movs	r3, #0
 80133ca:	b570      	push	{r4, r5, r6, lr}
 80133cc:	4d06      	ldr	r5, [pc, #24]	; (80133e8 <_close_r+0x20>)
 80133ce:	0004      	movs	r4, r0
 80133d0:	0008      	movs	r0, r1
 80133d2:	602b      	str	r3, [r5, #0]
 80133d4:	f7f5 fe89 	bl	80090ea <_close>
 80133d8:	1c43      	adds	r3, r0, #1
 80133da:	d103      	bne.n	80133e4 <_close_r+0x1c>
 80133dc:	682b      	ldr	r3, [r5, #0]
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d000      	beq.n	80133e4 <_close_r+0x1c>
 80133e2:	6023      	str	r3, [r4, #0]
 80133e4:	bd70      	pop	{r4, r5, r6, pc}
 80133e6:	46c0      	nop			; (mov r8, r8)
 80133e8:	20000da8 	.word	0x20000da8

080133ec <_fstat_r>:
 80133ec:	2300      	movs	r3, #0
 80133ee:	b570      	push	{r4, r5, r6, lr}
 80133f0:	4d06      	ldr	r5, [pc, #24]	; (801340c <_fstat_r+0x20>)
 80133f2:	0004      	movs	r4, r0
 80133f4:	0008      	movs	r0, r1
 80133f6:	0011      	movs	r1, r2
 80133f8:	602b      	str	r3, [r5, #0]
 80133fa:	f7f5 fe80 	bl	80090fe <_fstat>
 80133fe:	1c43      	adds	r3, r0, #1
 8013400:	d103      	bne.n	801340a <_fstat_r+0x1e>
 8013402:	682b      	ldr	r3, [r5, #0]
 8013404:	2b00      	cmp	r3, #0
 8013406:	d000      	beq.n	801340a <_fstat_r+0x1e>
 8013408:	6023      	str	r3, [r4, #0]
 801340a:	bd70      	pop	{r4, r5, r6, pc}
 801340c:	20000da8 	.word	0x20000da8

08013410 <_isatty_r>:
 8013410:	2300      	movs	r3, #0
 8013412:	b570      	push	{r4, r5, r6, lr}
 8013414:	4d06      	ldr	r5, [pc, #24]	; (8013430 <_isatty_r+0x20>)
 8013416:	0004      	movs	r4, r0
 8013418:	0008      	movs	r0, r1
 801341a:	602b      	str	r3, [r5, #0]
 801341c:	f7f5 fe7d 	bl	800911a <_isatty>
 8013420:	1c43      	adds	r3, r0, #1
 8013422:	d103      	bne.n	801342c <_isatty_r+0x1c>
 8013424:	682b      	ldr	r3, [r5, #0]
 8013426:	2b00      	cmp	r3, #0
 8013428:	d000      	beq.n	801342c <_isatty_r+0x1c>
 801342a:	6023      	str	r3, [r4, #0]
 801342c:	bd70      	pop	{r4, r5, r6, pc}
 801342e:	46c0      	nop			; (mov r8, r8)
 8013430:	20000da8 	.word	0x20000da8

08013434 <_lseek_r>:
 8013434:	b570      	push	{r4, r5, r6, lr}
 8013436:	0004      	movs	r4, r0
 8013438:	0008      	movs	r0, r1
 801343a:	0011      	movs	r1, r2
 801343c:	001a      	movs	r2, r3
 801343e:	2300      	movs	r3, #0
 8013440:	4d05      	ldr	r5, [pc, #20]	; (8013458 <_lseek_r+0x24>)
 8013442:	602b      	str	r3, [r5, #0]
 8013444:	f7f5 fe72 	bl	800912c <_lseek>
 8013448:	1c43      	adds	r3, r0, #1
 801344a:	d103      	bne.n	8013454 <_lseek_r+0x20>
 801344c:	682b      	ldr	r3, [r5, #0]
 801344e:	2b00      	cmp	r3, #0
 8013450:	d000      	beq.n	8013454 <_lseek_r+0x20>
 8013452:	6023      	str	r3, [r4, #0]
 8013454:	bd70      	pop	{r4, r5, r6, pc}
 8013456:	46c0      	nop			; (mov r8, r8)
 8013458:	20000da8 	.word	0x20000da8

0801345c <_read_r>:
 801345c:	b570      	push	{r4, r5, r6, lr}
 801345e:	0004      	movs	r4, r0
 8013460:	0008      	movs	r0, r1
 8013462:	0011      	movs	r1, r2
 8013464:	001a      	movs	r2, r3
 8013466:	2300      	movs	r3, #0
 8013468:	4d05      	ldr	r5, [pc, #20]	; (8013480 <_read_r+0x24>)
 801346a:	602b      	str	r3, [r5, #0]
 801346c:	f7f5 fe04 	bl	8009078 <_read>
 8013470:	1c43      	adds	r3, r0, #1
 8013472:	d103      	bne.n	801347c <_read_r+0x20>
 8013474:	682b      	ldr	r3, [r5, #0]
 8013476:	2b00      	cmp	r3, #0
 8013478:	d000      	beq.n	801347c <_read_r+0x20>
 801347a:	6023      	str	r3, [r4, #0]
 801347c:	bd70      	pop	{r4, r5, r6, pc}
 801347e:	46c0      	nop			; (mov r8, r8)
 8013480:	20000da8 	.word	0x20000da8

08013484 <_init>:
 8013484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013486:	46c0      	nop			; (mov r8, r8)
 8013488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801348a:	bc08      	pop	{r3}
 801348c:	469e      	mov	lr, r3
 801348e:	4770      	bx	lr

08013490 <_fini>:
 8013490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013492:	46c0      	nop			; (mov r8, r8)
 8013494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013496:	bc08      	pop	{r3}
 8013498:	469e      	mov	lr, r3
 801349a:	4770      	bx	lr
