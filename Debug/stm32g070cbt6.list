
stm32g070cbt6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013214  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a08  080132d0  080132d0  000232d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013cd8  08013cd8  000302b8  2**0
                  CONTENTS
  4 .ARM          00000000  08013cd8  08013cd8  000302b8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08013cd8  08013cd8  000302b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013cd8  08013cd8  00023cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013cdc  08013cdc  00023cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b8  20000000  08013ce0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000aa8  200002b8  08013f98  000302b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d60  08013f98  00030d60  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000302b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000173ec  00000000  00000000  000302e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cc1  00000000  00000000  000476cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001328  00000000  00000000  0004a390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001338  00000000  00000000  0004b6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e10  00000000  00000000  0004c9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017d7a  00000000  00000000  00064800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093290  00000000  00000000  0007c57a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010f80a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005db8  00000000  00000000  0010f85c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200002b8 	.word	0x200002b8
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080132b4 	.word	0x080132b4

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200002bc 	.word	0x200002bc
 80000fc:	080132b4 	.word	0x080132b4

08000100 <strcmp>:
 8000100:	7802      	ldrb	r2, [r0, #0]
 8000102:	780b      	ldrb	r3, [r1, #0]
 8000104:	2a00      	cmp	r2, #0
 8000106:	d003      	beq.n	8000110 <strcmp+0x10>
 8000108:	3001      	adds	r0, #1
 800010a:	3101      	adds	r1, #1
 800010c:	429a      	cmp	r2, r3
 800010e:	d0f7      	beq.n	8000100 <strcmp>
 8000110:	1ad0      	subs	r0, r2, r3
 8000112:	4770      	bx	lr

08000114 <strlen>:
 8000114:	2300      	movs	r3, #0
 8000116:	5cc2      	ldrb	r2, [r0, r3]
 8000118:	3301      	adds	r3, #1
 800011a:	2a00      	cmp	r2, #0
 800011c:	d1fb      	bne.n	8000116 <strlen+0x2>
 800011e:	1e58      	subs	r0, r3, #1
 8000120:	4770      	bx	lr
	...

08000124 <__gnu_thumb1_case_uqi>:
 8000124:	b402      	push	{r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0049      	lsls	r1, r1, #1
 800012c:	5c09      	ldrb	r1, [r1, r0]
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	448e      	add	lr, r1
 8000132:	bc02      	pop	{r1}
 8000134:	4770      	bx	lr
 8000136:	46c0      	nop			; (mov r8, r8)

08000138 <__gnu_thumb1_case_shi>:
 8000138:	b403      	push	{r0, r1}
 800013a:	4671      	mov	r1, lr
 800013c:	0849      	lsrs	r1, r1, #1
 800013e:	0040      	lsls	r0, r0, #1
 8000140:	0049      	lsls	r1, r1, #1
 8000142:	5e09      	ldrsh	r1, [r1, r0]
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	448e      	add	lr, r1
 8000148:	bc03      	pop	{r0, r1}
 800014a:	4770      	bx	lr

0800014c <__udivsi3>:
 800014c:	2200      	movs	r2, #0
 800014e:	0843      	lsrs	r3, r0, #1
 8000150:	428b      	cmp	r3, r1
 8000152:	d374      	bcc.n	800023e <__udivsi3+0xf2>
 8000154:	0903      	lsrs	r3, r0, #4
 8000156:	428b      	cmp	r3, r1
 8000158:	d35f      	bcc.n	800021a <__udivsi3+0xce>
 800015a:	0a03      	lsrs	r3, r0, #8
 800015c:	428b      	cmp	r3, r1
 800015e:	d344      	bcc.n	80001ea <__udivsi3+0x9e>
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d328      	bcc.n	80001b8 <__udivsi3+0x6c>
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d30d      	bcc.n	8000188 <__udivsi3+0x3c>
 800016c:	22ff      	movs	r2, #255	; 0xff
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	ba12      	rev	r2, r2
 8000172:	0c03      	lsrs	r3, r0, #16
 8000174:	428b      	cmp	r3, r1
 8000176:	d302      	bcc.n	800017e <__udivsi3+0x32>
 8000178:	1212      	asrs	r2, r2, #8
 800017a:	0209      	lsls	r1, r1, #8
 800017c:	d065      	beq.n	800024a <__udivsi3+0xfe>
 800017e:	0b03      	lsrs	r3, r0, #12
 8000180:	428b      	cmp	r3, r1
 8000182:	d319      	bcc.n	80001b8 <__udivsi3+0x6c>
 8000184:	e000      	b.n	8000188 <__udivsi3+0x3c>
 8000186:	0a09      	lsrs	r1, r1, #8
 8000188:	0bc3      	lsrs	r3, r0, #15
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x46>
 800018e:	03cb      	lsls	r3, r1, #15
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b83      	lsrs	r3, r0, #14
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x52>
 800019a:	038b      	lsls	r3, r1, #14
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b43      	lsrs	r3, r0, #13
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x5e>
 80001a6:	034b      	lsls	r3, r1, #13
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0b03      	lsrs	r3, r0, #12
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x6a>
 80001b2:	030b      	lsls	r3, r1, #12
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0ac3      	lsrs	r3, r0, #11
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x76>
 80001be:	02cb      	lsls	r3, r1, #11
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a83      	lsrs	r3, r0, #10
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x82>
 80001ca:	028b      	lsls	r3, r1, #10
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a43      	lsrs	r3, r0, #9
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x8e>
 80001d6:	024b      	lsls	r3, r1, #9
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	0a03      	lsrs	r3, r0, #8
 80001de:	428b      	cmp	r3, r1
 80001e0:	d301      	bcc.n	80001e6 <__udivsi3+0x9a>
 80001e2:	020b      	lsls	r3, r1, #8
 80001e4:	1ac0      	subs	r0, r0, r3
 80001e6:	4152      	adcs	r2, r2
 80001e8:	d2cd      	bcs.n	8000186 <__udivsi3+0x3a>
 80001ea:	09c3      	lsrs	r3, r0, #7
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xa8>
 80001f0:	01cb      	lsls	r3, r1, #7
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0983      	lsrs	r3, r0, #6
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xb4>
 80001fc:	018b      	lsls	r3, r1, #6
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0943      	lsrs	r3, r0, #5
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xc0>
 8000208:	014b      	lsls	r3, r1, #5
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0903      	lsrs	r3, r0, #4
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xcc>
 8000214:	010b      	lsls	r3, r1, #4
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	08c3      	lsrs	r3, r0, #3
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xd8>
 8000220:	00cb      	lsls	r3, r1, #3
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0883      	lsrs	r3, r0, #2
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xe4>
 800022c:	008b      	lsls	r3, r1, #2
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	0843      	lsrs	r3, r0, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d301      	bcc.n	800023c <__udivsi3+0xf0>
 8000238:	004b      	lsls	r3, r1, #1
 800023a:	1ac0      	subs	r0, r0, r3
 800023c:	4152      	adcs	r2, r2
 800023e:	1a41      	subs	r1, r0, r1
 8000240:	d200      	bcs.n	8000244 <__udivsi3+0xf8>
 8000242:	4601      	mov	r1, r0
 8000244:	4152      	adcs	r2, r2
 8000246:	4610      	mov	r0, r2
 8000248:	4770      	bx	lr
 800024a:	e7ff      	b.n	800024c <__udivsi3+0x100>
 800024c:	b501      	push	{r0, lr}
 800024e:	2000      	movs	r0, #0
 8000250:	f000 f8f0 	bl	8000434 <__aeabi_idiv0>
 8000254:	bd02      	pop	{r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_uidivmod>:
 8000258:	2900      	cmp	r1, #0
 800025a:	d0f7      	beq.n	800024c <__udivsi3+0x100>
 800025c:	e776      	b.n	800014c <__udivsi3>
 800025e:	4770      	bx	lr

08000260 <__divsi3>:
 8000260:	4603      	mov	r3, r0
 8000262:	430b      	orrs	r3, r1
 8000264:	d47f      	bmi.n	8000366 <__divsi3+0x106>
 8000266:	2200      	movs	r2, #0
 8000268:	0843      	lsrs	r3, r0, #1
 800026a:	428b      	cmp	r3, r1
 800026c:	d374      	bcc.n	8000358 <__divsi3+0xf8>
 800026e:	0903      	lsrs	r3, r0, #4
 8000270:	428b      	cmp	r3, r1
 8000272:	d35f      	bcc.n	8000334 <__divsi3+0xd4>
 8000274:	0a03      	lsrs	r3, r0, #8
 8000276:	428b      	cmp	r3, r1
 8000278:	d344      	bcc.n	8000304 <__divsi3+0xa4>
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d328      	bcc.n	80002d2 <__divsi3+0x72>
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d30d      	bcc.n	80002a2 <__divsi3+0x42>
 8000286:	22ff      	movs	r2, #255	; 0xff
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	ba12      	rev	r2, r2
 800028c:	0c03      	lsrs	r3, r0, #16
 800028e:	428b      	cmp	r3, r1
 8000290:	d302      	bcc.n	8000298 <__divsi3+0x38>
 8000292:	1212      	asrs	r2, r2, #8
 8000294:	0209      	lsls	r1, r1, #8
 8000296:	d065      	beq.n	8000364 <__divsi3+0x104>
 8000298:	0b03      	lsrs	r3, r0, #12
 800029a:	428b      	cmp	r3, r1
 800029c:	d319      	bcc.n	80002d2 <__divsi3+0x72>
 800029e:	e000      	b.n	80002a2 <__divsi3+0x42>
 80002a0:	0a09      	lsrs	r1, r1, #8
 80002a2:	0bc3      	lsrs	r3, r0, #15
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x4c>
 80002a8:	03cb      	lsls	r3, r1, #15
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b83      	lsrs	r3, r0, #14
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x58>
 80002b4:	038b      	lsls	r3, r1, #14
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b43      	lsrs	r3, r0, #13
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x64>
 80002c0:	034b      	lsls	r3, r1, #13
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0b03      	lsrs	r3, r0, #12
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x70>
 80002cc:	030b      	lsls	r3, r1, #12
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0ac3      	lsrs	r3, r0, #11
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x7c>
 80002d8:	02cb      	lsls	r3, r1, #11
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a83      	lsrs	r3, r0, #10
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x88>
 80002e4:	028b      	lsls	r3, r1, #10
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a43      	lsrs	r3, r0, #9
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0x94>
 80002f0:	024b      	lsls	r3, r1, #9
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	0a03      	lsrs	r3, r0, #8
 80002f8:	428b      	cmp	r3, r1
 80002fa:	d301      	bcc.n	8000300 <__divsi3+0xa0>
 80002fc:	020b      	lsls	r3, r1, #8
 80002fe:	1ac0      	subs	r0, r0, r3
 8000300:	4152      	adcs	r2, r2
 8000302:	d2cd      	bcs.n	80002a0 <__divsi3+0x40>
 8000304:	09c3      	lsrs	r3, r0, #7
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xae>
 800030a:	01cb      	lsls	r3, r1, #7
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0983      	lsrs	r3, r0, #6
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xba>
 8000316:	018b      	lsls	r3, r1, #6
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0943      	lsrs	r3, r0, #5
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xc6>
 8000322:	014b      	lsls	r3, r1, #5
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0903      	lsrs	r3, r0, #4
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xd2>
 800032e:	010b      	lsls	r3, r1, #4
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	08c3      	lsrs	r3, r0, #3
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xde>
 800033a:	00cb      	lsls	r3, r1, #3
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0883      	lsrs	r3, r0, #2
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xea>
 8000346:	008b      	lsls	r3, r1, #2
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	0843      	lsrs	r3, r0, #1
 800034e:	428b      	cmp	r3, r1
 8000350:	d301      	bcc.n	8000356 <__divsi3+0xf6>
 8000352:	004b      	lsls	r3, r1, #1
 8000354:	1ac0      	subs	r0, r0, r3
 8000356:	4152      	adcs	r2, r2
 8000358:	1a41      	subs	r1, r0, r1
 800035a:	d200      	bcs.n	800035e <__divsi3+0xfe>
 800035c:	4601      	mov	r1, r0
 800035e:	4152      	adcs	r2, r2
 8000360:	4610      	mov	r0, r2
 8000362:	4770      	bx	lr
 8000364:	e05d      	b.n	8000422 <__divsi3+0x1c2>
 8000366:	0fca      	lsrs	r2, r1, #31
 8000368:	d000      	beq.n	800036c <__divsi3+0x10c>
 800036a:	4249      	negs	r1, r1
 800036c:	1003      	asrs	r3, r0, #32
 800036e:	d300      	bcc.n	8000372 <__divsi3+0x112>
 8000370:	4240      	negs	r0, r0
 8000372:	4053      	eors	r3, r2
 8000374:	2200      	movs	r2, #0
 8000376:	469c      	mov	ip, r3
 8000378:	0903      	lsrs	r3, r0, #4
 800037a:	428b      	cmp	r3, r1
 800037c:	d32d      	bcc.n	80003da <__divsi3+0x17a>
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d312      	bcc.n	80003aa <__divsi3+0x14a>
 8000384:	22fc      	movs	r2, #252	; 0xfc
 8000386:	0189      	lsls	r1, r1, #6
 8000388:	ba12      	rev	r2, r2
 800038a:	0a03      	lsrs	r3, r0, #8
 800038c:	428b      	cmp	r3, r1
 800038e:	d30c      	bcc.n	80003aa <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	1192      	asrs	r2, r2, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d308      	bcc.n	80003aa <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d304      	bcc.n	80003aa <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	d03a      	beq.n	800041a <__divsi3+0x1ba>
 80003a4:	1192      	asrs	r2, r2, #6
 80003a6:	e000      	b.n	80003aa <__divsi3+0x14a>
 80003a8:	0989      	lsrs	r1, r1, #6
 80003aa:	09c3      	lsrs	r3, r0, #7
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x154>
 80003b0:	01cb      	lsls	r3, r1, #7
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0983      	lsrs	r3, r0, #6
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x160>
 80003bc:	018b      	lsls	r3, r1, #6
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0943      	lsrs	r3, r0, #5
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x16c>
 80003c8:	014b      	lsls	r3, r1, #5
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	0903      	lsrs	r3, r0, #4
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x178>
 80003d4:	010b      	lsls	r3, r1, #4
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	08c3      	lsrs	r3, r0, #3
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x184>
 80003e0:	00cb      	lsls	r3, r1, #3
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	0883      	lsrs	r3, r0, #2
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x190>
 80003ec:	008b      	lsls	r3, r1, #2
 80003ee:	1ac0      	subs	r0, r0, r3
 80003f0:	4152      	adcs	r2, r2
 80003f2:	d2d9      	bcs.n	80003a8 <__divsi3+0x148>
 80003f4:	0843      	lsrs	r3, r0, #1
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d301      	bcc.n	80003fe <__divsi3+0x19e>
 80003fa:	004b      	lsls	r3, r1, #1
 80003fc:	1ac0      	subs	r0, r0, r3
 80003fe:	4152      	adcs	r2, r2
 8000400:	1a41      	subs	r1, r0, r1
 8000402:	d200      	bcs.n	8000406 <__divsi3+0x1a6>
 8000404:	4601      	mov	r1, r0
 8000406:	4663      	mov	r3, ip
 8000408:	4152      	adcs	r2, r2
 800040a:	105b      	asrs	r3, r3, #1
 800040c:	4610      	mov	r0, r2
 800040e:	d301      	bcc.n	8000414 <__divsi3+0x1b4>
 8000410:	4240      	negs	r0, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d500      	bpl.n	8000418 <__divsi3+0x1b8>
 8000416:	4249      	negs	r1, r1
 8000418:	4770      	bx	lr
 800041a:	4663      	mov	r3, ip
 800041c:	105b      	asrs	r3, r3, #1
 800041e:	d300      	bcc.n	8000422 <__divsi3+0x1c2>
 8000420:	4240      	negs	r0, r0
 8000422:	b501      	push	{r0, lr}
 8000424:	2000      	movs	r0, #0
 8000426:	f000 f805 	bl	8000434 <__aeabi_idiv0>
 800042a:	bd02      	pop	{r1, pc}

0800042c <__aeabi_idivmod>:
 800042c:	2900      	cmp	r1, #0
 800042e:	d0f8      	beq.n	8000422 <__divsi3+0x1c2>
 8000430:	e716      	b.n	8000260 <__divsi3>
 8000432:	4770      	bx	lr

08000434 <__aeabi_idiv0>:
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdrcmple>:
 8000438:	4684      	mov	ip, r0
 800043a:	0010      	movs	r0, r2
 800043c:	4662      	mov	r2, ip
 800043e:	468c      	mov	ip, r1
 8000440:	0019      	movs	r1, r3
 8000442:	4663      	mov	r3, ip
 8000444:	e000      	b.n	8000448 <__aeabi_cdcmpeq>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_cdcmpeq>:
 8000448:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044a:	f001 fa89 	bl	8001960 <__ledf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	d401      	bmi.n	8000456 <__aeabi_cdcmpeq+0xe>
 8000452:	2100      	movs	r1, #0
 8000454:	42c8      	cmn	r0, r1
 8000456:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000458 <__aeabi_dcmpeq>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f9d9 	bl	8001810 <__eqdf2>
 800045e:	4240      	negs	r0, r0
 8000460:	3001      	adds	r0, #1
 8000462:	bd10      	pop	{r4, pc}

08000464 <__aeabi_dcmplt>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f001 fa7b 	bl	8001960 <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	db01      	blt.n	8000472 <__aeabi_dcmplt+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__aeabi_dcmple>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f001 fa71 	bl	8001960 <__ledf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dd01      	ble.n	8000486 <__aeabi_dcmple+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			; (mov r8, r8)

0800048c <__aeabi_dcmpgt>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f001 fa01 	bl	8001894 <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	dc01      	bgt.n	800049a <__aeabi_dcmpgt+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			; (mov r8, r8)

080004a0 <__aeabi_dcmpge>:
 80004a0:	b510      	push	{r4, lr}
 80004a2:	f001 f9f7 	bl	8001894 <__gedf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	da01      	bge.n	80004ae <__aeabi_dcmpge+0xe>
 80004aa:	2000      	movs	r0, #0
 80004ac:	bd10      	pop	{r4, pc}
 80004ae:	2001      	movs	r0, #1
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	46c0      	nop			; (mov r8, r8)

080004b4 <__aeabi_cfrcmple>:
 80004b4:	4684      	mov	ip, r0
 80004b6:	0008      	movs	r0, r1
 80004b8:	4661      	mov	r1, ip
 80004ba:	e7ff      	b.n	80004bc <__aeabi_cfcmpeq>

080004bc <__aeabi_cfcmpeq>:
 80004bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004be:	f000 faad 	bl	8000a1c <__lesf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	d401      	bmi.n	80004ca <__aeabi_cfcmpeq+0xe>
 80004c6:	2100      	movs	r1, #0
 80004c8:	42c8      	cmn	r0, r1
 80004ca:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004cc <__aeabi_fcmpeq>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fa39 	bl	8000944 <__eqsf2>
 80004d2:	4240      	negs	r0, r0
 80004d4:	3001      	adds	r0, #1
 80004d6:	bd10      	pop	{r4, pc}

080004d8 <__aeabi_fcmplt>:
 80004d8:	b510      	push	{r4, lr}
 80004da:	f000 fa9f 	bl	8000a1c <__lesf2>
 80004de:	2800      	cmp	r0, #0
 80004e0:	db01      	blt.n	80004e6 <__aeabi_fcmplt+0xe>
 80004e2:	2000      	movs	r0, #0
 80004e4:	bd10      	pop	{r4, pc}
 80004e6:	2001      	movs	r0, #1
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	46c0      	nop			; (mov r8, r8)

080004ec <__aeabi_fcmple>:
 80004ec:	b510      	push	{r4, lr}
 80004ee:	f000 fa95 	bl	8000a1c <__lesf2>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	dd01      	ble.n	80004fa <__aeabi_fcmple+0xe>
 80004f6:	2000      	movs	r0, #0
 80004f8:	bd10      	pop	{r4, pc}
 80004fa:	2001      	movs	r0, #1
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	46c0      	nop			; (mov r8, r8)

08000500 <__aeabi_fcmpgt>:
 8000500:	b510      	push	{r4, lr}
 8000502:	f000 fa45 	bl	8000990 <__gesf2>
 8000506:	2800      	cmp	r0, #0
 8000508:	dc01      	bgt.n	800050e <__aeabi_fcmpgt+0xe>
 800050a:	2000      	movs	r0, #0
 800050c:	bd10      	pop	{r4, pc}
 800050e:	2001      	movs	r0, #1
 8000510:	bd10      	pop	{r4, pc}
 8000512:	46c0      	nop			; (mov r8, r8)

08000514 <__aeabi_fcmpge>:
 8000514:	b510      	push	{r4, lr}
 8000516:	f000 fa3b 	bl	8000990 <__gesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	da01      	bge.n	8000522 <__aeabi_fcmpge+0xe>
 800051e:	2000      	movs	r0, #0
 8000520:	bd10      	pop	{r4, pc}
 8000522:	2001      	movs	r0, #1
 8000524:	bd10      	pop	{r4, pc}
 8000526:	46c0      	nop			; (mov r8, r8)

08000528 <__aeabi_d2uiz>:
 8000528:	b570      	push	{r4, r5, r6, lr}
 800052a:	2200      	movs	r2, #0
 800052c:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <__aeabi_d2uiz+0x38>)
 800052e:	0004      	movs	r4, r0
 8000530:	000d      	movs	r5, r1
 8000532:	f7ff ffb5 	bl	80004a0 <__aeabi_dcmpge>
 8000536:	2800      	cmp	r0, #0
 8000538:	d104      	bne.n	8000544 <__aeabi_d2uiz+0x1c>
 800053a:	0020      	movs	r0, r4
 800053c:	0029      	movs	r1, r5
 800053e:	f002 f88f 	bl	8002660 <__aeabi_d2iz>
 8000542:	bd70      	pop	{r4, r5, r6, pc}
 8000544:	4b06      	ldr	r3, [pc, #24]	; (8000560 <__aeabi_d2uiz+0x38>)
 8000546:	2200      	movs	r2, #0
 8000548:	0020      	movs	r0, r4
 800054a:	0029      	movs	r1, r5
 800054c:	f001 fcd8 	bl	8001f00 <__aeabi_dsub>
 8000550:	f002 f886 	bl	8002660 <__aeabi_d2iz>
 8000554:	2380      	movs	r3, #128	; 0x80
 8000556:	061b      	lsls	r3, r3, #24
 8000558:	469c      	mov	ip, r3
 800055a:	4460      	add	r0, ip
 800055c:	e7f1      	b.n	8000542 <__aeabi_d2uiz+0x1a>
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	41e00000 	.word	0x41e00000

08000564 <__aeabi_d2lz>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	0005      	movs	r5, r0
 8000568:	000c      	movs	r4, r1
 800056a:	2200      	movs	r2, #0
 800056c:	2300      	movs	r3, #0
 800056e:	0028      	movs	r0, r5
 8000570:	0021      	movs	r1, r4
 8000572:	f7ff ff77 	bl	8000464 <__aeabi_dcmplt>
 8000576:	2800      	cmp	r0, #0
 8000578:	d108      	bne.n	800058c <__aeabi_d2lz+0x28>
 800057a:	0028      	movs	r0, r5
 800057c:	0021      	movs	r1, r4
 800057e:	f000 f80f 	bl	80005a0 <__aeabi_d2ulz>
 8000582:	0002      	movs	r2, r0
 8000584:	000b      	movs	r3, r1
 8000586:	0010      	movs	r0, r2
 8000588:	0019      	movs	r1, r3
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	2380      	movs	r3, #128	; 0x80
 800058e:	061b      	lsls	r3, r3, #24
 8000590:	18e1      	adds	r1, r4, r3
 8000592:	0028      	movs	r0, r5
 8000594:	f000 f804 	bl	80005a0 <__aeabi_d2ulz>
 8000598:	2300      	movs	r3, #0
 800059a:	4242      	negs	r2, r0
 800059c:	418b      	sbcs	r3, r1
 800059e:	e7f2      	b.n	8000586 <__aeabi_d2lz+0x22>

080005a0 <__aeabi_d2ulz>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	2200      	movs	r2, #0
 80005a4:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <__aeabi_d2ulz+0x34>)
 80005a6:	000d      	movs	r5, r1
 80005a8:	0004      	movs	r4, r0
 80005aa:	f001 fa3d 	bl	8001a28 <__aeabi_dmul>
 80005ae:	f7ff ffbb 	bl	8000528 <__aeabi_d2uiz>
 80005b2:	0006      	movs	r6, r0
 80005b4:	f002 f8ba 	bl	800272c <__aeabi_ui2d>
 80005b8:	2200      	movs	r2, #0
 80005ba:	4b07      	ldr	r3, [pc, #28]	; (80005d8 <__aeabi_d2ulz+0x38>)
 80005bc:	f001 fa34 	bl	8001a28 <__aeabi_dmul>
 80005c0:	0002      	movs	r2, r0
 80005c2:	000b      	movs	r3, r1
 80005c4:	0020      	movs	r0, r4
 80005c6:	0029      	movs	r1, r5
 80005c8:	f001 fc9a 	bl	8001f00 <__aeabi_dsub>
 80005cc:	f7ff ffac 	bl	8000528 <__aeabi_d2uiz>
 80005d0:	0031      	movs	r1, r6
 80005d2:	bd70      	pop	{r4, r5, r6, pc}
 80005d4:	3df00000 	.word	0x3df00000
 80005d8:	41f00000 	.word	0x41f00000

080005dc <__aeabi_l2d>:
 80005dc:	b570      	push	{r4, r5, r6, lr}
 80005de:	0006      	movs	r6, r0
 80005e0:	0008      	movs	r0, r1
 80005e2:	f002 f873 	bl	80026cc <__aeabi_i2d>
 80005e6:	2200      	movs	r2, #0
 80005e8:	4b06      	ldr	r3, [pc, #24]	; (8000604 <__aeabi_l2d+0x28>)
 80005ea:	f001 fa1d 	bl	8001a28 <__aeabi_dmul>
 80005ee:	000d      	movs	r5, r1
 80005f0:	0004      	movs	r4, r0
 80005f2:	0030      	movs	r0, r6
 80005f4:	f002 f89a 	bl	800272c <__aeabi_ui2d>
 80005f8:	002b      	movs	r3, r5
 80005fa:	0022      	movs	r2, r4
 80005fc:	f000 fad6 	bl	8000bac <__aeabi_dadd>
 8000600:	bd70      	pop	{r4, r5, r6, pc}
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	41f00000 	.word	0x41f00000

08000608 <__aeabi_fadd>:
 8000608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800060a:	46c6      	mov	lr, r8
 800060c:	0243      	lsls	r3, r0, #9
 800060e:	0a5b      	lsrs	r3, r3, #9
 8000610:	024e      	lsls	r6, r1, #9
 8000612:	0045      	lsls	r5, r0, #1
 8000614:	004f      	lsls	r7, r1, #1
 8000616:	00da      	lsls	r2, r3, #3
 8000618:	0fc4      	lsrs	r4, r0, #31
 800061a:	469c      	mov	ip, r3
 800061c:	0a70      	lsrs	r0, r6, #9
 800061e:	4690      	mov	r8, r2
 8000620:	b500      	push	{lr}
 8000622:	0e2d      	lsrs	r5, r5, #24
 8000624:	0e3f      	lsrs	r7, r7, #24
 8000626:	0fc9      	lsrs	r1, r1, #31
 8000628:	09b6      	lsrs	r6, r6, #6
 800062a:	428c      	cmp	r4, r1
 800062c:	d04b      	beq.n	80006c6 <__aeabi_fadd+0xbe>
 800062e:	1bea      	subs	r2, r5, r7
 8000630:	2a00      	cmp	r2, #0
 8000632:	dd36      	ble.n	80006a2 <__aeabi_fadd+0x9a>
 8000634:	2f00      	cmp	r7, #0
 8000636:	d061      	beq.n	80006fc <__aeabi_fadd+0xf4>
 8000638:	2dff      	cmp	r5, #255	; 0xff
 800063a:	d100      	bne.n	800063e <__aeabi_fadd+0x36>
 800063c:	e0ad      	b.n	800079a <__aeabi_fadd+0x192>
 800063e:	2380      	movs	r3, #128	; 0x80
 8000640:	04db      	lsls	r3, r3, #19
 8000642:	431e      	orrs	r6, r3
 8000644:	2a1b      	cmp	r2, #27
 8000646:	dc00      	bgt.n	800064a <__aeabi_fadd+0x42>
 8000648:	e0d3      	b.n	80007f2 <__aeabi_fadd+0x1ea>
 800064a:	2001      	movs	r0, #1
 800064c:	4643      	mov	r3, r8
 800064e:	1a18      	subs	r0, r3, r0
 8000650:	0143      	lsls	r3, r0, #5
 8000652:	d400      	bmi.n	8000656 <__aeabi_fadd+0x4e>
 8000654:	e08c      	b.n	8000770 <__aeabi_fadd+0x168>
 8000656:	0180      	lsls	r0, r0, #6
 8000658:	0987      	lsrs	r7, r0, #6
 800065a:	0038      	movs	r0, r7
 800065c:	f002 f95c 	bl	8002918 <__clzsi2>
 8000660:	3805      	subs	r0, #5
 8000662:	4087      	lsls	r7, r0
 8000664:	4285      	cmp	r5, r0
 8000666:	dc00      	bgt.n	800066a <__aeabi_fadd+0x62>
 8000668:	e0b6      	b.n	80007d8 <__aeabi_fadd+0x1d0>
 800066a:	1a2d      	subs	r5, r5, r0
 800066c:	48b3      	ldr	r0, [pc, #716]	; (800093c <__aeabi_fadd+0x334>)
 800066e:	4038      	ands	r0, r7
 8000670:	0743      	lsls	r3, r0, #29
 8000672:	d004      	beq.n	800067e <__aeabi_fadd+0x76>
 8000674:	230f      	movs	r3, #15
 8000676:	4003      	ands	r3, r0
 8000678:	2b04      	cmp	r3, #4
 800067a:	d000      	beq.n	800067e <__aeabi_fadd+0x76>
 800067c:	3004      	adds	r0, #4
 800067e:	0143      	lsls	r3, r0, #5
 8000680:	d400      	bmi.n	8000684 <__aeabi_fadd+0x7c>
 8000682:	e078      	b.n	8000776 <__aeabi_fadd+0x16e>
 8000684:	1c6a      	adds	r2, r5, #1
 8000686:	2dfe      	cmp	r5, #254	; 0xfe
 8000688:	d065      	beq.n	8000756 <__aeabi_fadd+0x14e>
 800068a:	0180      	lsls	r0, r0, #6
 800068c:	0a43      	lsrs	r3, r0, #9
 800068e:	469c      	mov	ip, r3
 8000690:	b2d2      	uxtb	r2, r2
 8000692:	4663      	mov	r3, ip
 8000694:	05d0      	lsls	r0, r2, #23
 8000696:	4318      	orrs	r0, r3
 8000698:	07e4      	lsls	r4, r4, #31
 800069a:	4320      	orrs	r0, r4
 800069c:	bc80      	pop	{r7}
 800069e:	46b8      	mov	r8, r7
 80006a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006a2:	2a00      	cmp	r2, #0
 80006a4:	d035      	beq.n	8000712 <__aeabi_fadd+0x10a>
 80006a6:	1b7a      	subs	r2, r7, r5
 80006a8:	2d00      	cmp	r5, #0
 80006aa:	d000      	beq.n	80006ae <__aeabi_fadd+0xa6>
 80006ac:	e0af      	b.n	800080e <__aeabi_fadd+0x206>
 80006ae:	4643      	mov	r3, r8
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d100      	bne.n	80006b6 <__aeabi_fadd+0xae>
 80006b4:	e0a7      	b.n	8000806 <__aeabi_fadd+0x1fe>
 80006b6:	1e53      	subs	r3, r2, #1
 80006b8:	2a01      	cmp	r2, #1
 80006ba:	d100      	bne.n	80006be <__aeabi_fadd+0xb6>
 80006bc:	e12f      	b.n	800091e <__aeabi_fadd+0x316>
 80006be:	2aff      	cmp	r2, #255	; 0xff
 80006c0:	d069      	beq.n	8000796 <__aeabi_fadd+0x18e>
 80006c2:	001a      	movs	r2, r3
 80006c4:	e0aa      	b.n	800081c <__aeabi_fadd+0x214>
 80006c6:	1be9      	subs	r1, r5, r7
 80006c8:	2900      	cmp	r1, #0
 80006ca:	dd70      	ble.n	80007ae <__aeabi_fadd+0x1a6>
 80006cc:	2f00      	cmp	r7, #0
 80006ce:	d037      	beq.n	8000740 <__aeabi_fadd+0x138>
 80006d0:	2dff      	cmp	r5, #255	; 0xff
 80006d2:	d062      	beq.n	800079a <__aeabi_fadd+0x192>
 80006d4:	2380      	movs	r3, #128	; 0x80
 80006d6:	04db      	lsls	r3, r3, #19
 80006d8:	431e      	orrs	r6, r3
 80006da:	291b      	cmp	r1, #27
 80006dc:	dc00      	bgt.n	80006e0 <__aeabi_fadd+0xd8>
 80006de:	e0b0      	b.n	8000842 <__aeabi_fadd+0x23a>
 80006e0:	2001      	movs	r0, #1
 80006e2:	4440      	add	r0, r8
 80006e4:	0143      	lsls	r3, r0, #5
 80006e6:	d543      	bpl.n	8000770 <__aeabi_fadd+0x168>
 80006e8:	3501      	adds	r5, #1
 80006ea:	2dff      	cmp	r5, #255	; 0xff
 80006ec:	d033      	beq.n	8000756 <__aeabi_fadd+0x14e>
 80006ee:	2301      	movs	r3, #1
 80006f0:	4a93      	ldr	r2, [pc, #588]	; (8000940 <__aeabi_fadd+0x338>)
 80006f2:	4003      	ands	r3, r0
 80006f4:	0840      	lsrs	r0, r0, #1
 80006f6:	4010      	ands	r0, r2
 80006f8:	4318      	orrs	r0, r3
 80006fa:	e7b9      	b.n	8000670 <__aeabi_fadd+0x68>
 80006fc:	2e00      	cmp	r6, #0
 80006fe:	d100      	bne.n	8000702 <__aeabi_fadd+0xfa>
 8000700:	e083      	b.n	800080a <__aeabi_fadd+0x202>
 8000702:	1e51      	subs	r1, r2, #1
 8000704:	2a01      	cmp	r2, #1
 8000706:	d100      	bne.n	800070a <__aeabi_fadd+0x102>
 8000708:	e0d8      	b.n	80008bc <__aeabi_fadd+0x2b4>
 800070a:	2aff      	cmp	r2, #255	; 0xff
 800070c:	d045      	beq.n	800079a <__aeabi_fadd+0x192>
 800070e:	000a      	movs	r2, r1
 8000710:	e798      	b.n	8000644 <__aeabi_fadd+0x3c>
 8000712:	27fe      	movs	r7, #254	; 0xfe
 8000714:	1c6a      	adds	r2, r5, #1
 8000716:	4217      	tst	r7, r2
 8000718:	d000      	beq.n	800071c <__aeabi_fadd+0x114>
 800071a:	e086      	b.n	800082a <__aeabi_fadd+0x222>
 800071c:	2d00      	cmp	r5, #0
 800071e:	d000      	beq.n	8000722 <__aeabi_fadd+0x11a>
 8000720:	e0b7      	b.n	8000892 <__aeabi_fadd+0x28a>
 8000722:	4643      	mov	r3, r8
 8000724:	2b00      	cmp	r3, #0
 8000726:	d100      	bne.n	800072a <__aeabi_fadd+0x122>
 8000728:	e0f3      	b.n	8000912 <__aeabi_fadd+0x30a>
 800072a:	2200      	movs	r2, #0
 800072c:	2e00      	cmp	r6, #0
 800072e:	d0b0      	beq.n	8000692 <__aeabi_fadd+0x8a>
 8000730:	1b98      	subs	r0, r3, r6
 8000732:	0143      	lsls	r3, r0, #5
 8000734:	d400      	bmi.n	8000738 <__aeabi_fadd+0x130>
 8000736:	e0fa      	b.n	800092e <__aeabi_fadd+0x326>
 8000738:	4643      	mov	r3, r8
 800073a:	000c      	movs	r4, r1
 800073c:	1af0      	subs	r0, r6, r3
 800073e:	e797      	b.n	8000670 <__aeabi_fadd+0x68>
 8000740:	2e00      	cmp	r6, #0
 8000742:	d100      	bne.n	8000746 <__aeabi_fadd+0x13e>
 8000744:	e0c8      	b.n	80008d8 <__aeabi_fadd+0x2d0>
 8000746:	1e4a      	subs	r2, r1, #1
 8000748:	2901      	cmp	r1, #1
 800074a:	d100      	bne.n	800074e <__aeabi_fadd+0x146>
 800074c:	e0ae      	b.n	80008ac <__aeabi_fadd+0x2a4>
 800074e:	29ff      	cmp	r1, #255	; 0xff
 8000750:	d023      	beq.n	800079a <__aeabi_fadd+0x192>
 8000752:	0011      	movs	r1, r2
 8000754:	e7c1      	b.n	80006da <__aeabi_fadd+0xd2>
 8000756:	2300      	movs	r3, #0
 8000758:	22ff      	movs	r2, #255	; 0xff
 800075a:	469c      	mov	ip, r3
 800075c:	e799      	b.n	8000692 <__aeabi_fadd+0x8a>
 800075e:	21fe      	movs	r1, #254	; 0xfe
 8000760:	1c6a      	adds	r2, r5, #1
 8000762:	4211      	tst	r1, r2
 8000764:	d077      	beq.n	8000856 <__aeabi_fadd+0x24e>
 8000766:	2aff      	cmp	r2, #255	; 0xff
 8000768:	d0f5      	beq.n	8000756 <__aeabi_fadd+0x14e>
 800076a:	0015      	movs	r5, r2
 800076c:	4446      	add	r6, r8
 800076e:	0870      	lsrs	r0, r6, #1
 8000770:	0743      	lsls	r3, r0, #29
 8000772:	d000      	beq.n	8000776 <__aeabi_fadd+0x16e>
 8000774:	e77e      	b.n	8000674 <__aeabi_fadd+0x6c>
 8000776:	08c3      	lsrs	r3, r0, #3
 8000778:	2dff      	cmp	r5, #255	; 0xff
 800077a:	d00e      	beq.n	800079a <__aeabi_fadd+0x192>
 800077c:	025b      	lsls	r3, r3, #9
 800077e:	0a5b      	lsrs	r3, r3, #9
 8000780:	469c      	mov	ip, r3
 8000782:	b2ea      	uxtb	r2, r5
 8000784:	e785      	b.n	8000692 <__aeabi_fadd+0x8a>
 8000786:	2e00      	cmp	r6, #0
 8000788:	d007      	beq.n	800079a <__aeabi_fadd+0x192>
 800078a:	2280      	movs	r2, #128	; 0x80
 800078c:	03d2      	lsls	r2, r2, #15
 800078e:	4213      	tst	r3, r2
 8000790:	d003      	beq.n	800079a <__aeabi_fadd+0x192>
 8000792:	4210      	tst	r0, r2
 8000794:	d101      	bne.n	800079a <__aeabi_fadd+0x192>
 8000796:	000c      	movs	r4, r1
 8000798:	0003      	movs	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d0db      	beq.n	8000756 <__aeabi_fadd+0x14e>
 800079e:	2080      	movs	r0, #128	; 0x80
 80007a0:	03c0      	lsls	r0, r0, #15
 80007a2:	4318      	orrs	r0, r3
 80007a4:	0240      	lsls	r0, r0, #9
 80007a6:	0a43      	lsrs	r3, r0, #9
 80007a8:	469c      	mov	ip, r3
 80007aa:	22ff      	movs	r2, #255	; 0xff
 80007ac:	e771      	b.n	8000692 <__aeabi_fadd+0x8a>
 80007ae:	2900      	cmp	r1, #0
 80007b0:	d0d5      	beq.n	800075e <__aeabi_fadd+0x156>
 80007b2:	1b7a      	subs	r2, r7, r5
 80007b4:	2d00      	cmp	r5, #0
 80007b6:	d160      	bne.n	800087a <__aeabi_fadd+0x272>
 80007b8:	4643      	mov	r3, r8
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d024      	beq.n	8000808 <__aeabi_fadd+0x200>
 80007be:	1e53      	subs	r3, r2, #1
 80007c0:	2a01      	cmp	r2, #1
 80007c2:	d073      	beq.n	80008ac <__aeabi_fadd+0x2a4>
 80007c4:	2aff      	cmp	r2, #255	; 0xff
 80007c6:	d0e7      	beq.n	8000798 <__aeabi_fadd+0x190>
 80007c8:	001a      	movs	r2, r3
 80007ca:	2a1b      	cmp	r2, #27
 80007cc:	dc00      	bgt.n	80007d0 <__aeabi_fadd+0x1c8>
 80007ce:	e085      	b.n	80008dc <__aeabi_fadd+0x2d4>
 80007d0:	2001      	movs	r0, #1
 80007d2:	003d      	movs	r5, r7
 80007d4:	1980      	adds	r0, r0, r6
 80007d6:	e785      	b.n	80006e4 <__aeabi_fadd+0xdc>
 80007d8:	2320      	movs	r3, #32
 80007da:	003a      	movs	r2, r7
 80007dc:	1b45      	subs	r5, r0, r5
 80007de:	0038      	movs	r0, r7
 80007e0:	3501      	adds	r5, #1
 80007e2:	40ea      	lsrs	r2, r5
 80007e4:	1b5d      	subs	r5, r3, r5
 80007e6:	40a8      	lsls	r0, r5
 80007e8:	1e43      	subs	r3, r0, #1
 80007ea:	4198      	sbcs	r0, r3
 80007ec:	2500      	movs	r5, #0
 80007ee:	4310      	orrs	r0, r2
 80007f0:	e73e      	b.n	8000670 <__aeabi_fadd+0x68>
 80007f2:	2320      	movs	r3, #32
 80007f4:	0030      	movs	r0, r6
 80007f6:	1a9b      	subs	r3, r3, r2
 80007f8:	0031      	movs	r1, r6
 80007fa:	4098      	lsls	r0, r3
 80007fc:	40d1      	lsrs	r1, r2
 80007fe:	1e43      	subs	r3, r0, #1
 8000800:	4198      	sbcs	r0, r3
 8000802:	4308      	orrs	r0, r1
 8000804:	e722      	b.n	800064c <__aeabi_fadd+0x44>
 8000806:	000c      	movs	r4, r1
 8000808:	0003      	movs	r3, r0
 800080a:	0015      	movs	r5, r2
 800080c:	e7b4      	b.n	8000778 <__aeabi_fadd+0x170>
 800080e:	2fff      	cmp	r7, #255	; 0xff
 8000810:	d0c1      	beq.n	8000796 <__aeabi_fadd+0x18e>
 8000812:	2380      	movs	r3, #128	; 0x80
 8000814:	4640      	mov	r0, r8
 8000816:	04db      	lsls	r3, r3, #19
 8000818:	4318      	orrs	r0, r3
 800081a:	4680      	mov	r8, r0
 800081c:	2a1b      	cmp	r2, #27
 800081e:	dd51      	ble.n	80008c4 <__aeabi_fadd+0x2bc>
 8000820:	2001      	movs	r0, #1
 8000822:	000c      	movs	r4, r1
 8000824:	003d      	movs	r5, r7
 8000826:	1a30      	subs	r0, r6, r0
 8000828:	e712      	b.n	8000650 <__aeabi_fadd+0x48>
 800082a:	4643      	mov	r3, r8
 800082c:	1b9f      	subs	r7, r3, r6
 800082e:	017b      	lsls	r3, r7, #5
 8000830:	d42b      	bmi.n	800088a <__aeabi_fadd+0x282>
 8000832:	2f00      	cmp	r7, #0
 8000834:	d000      	beq.n	8000838 <__aeabi_fadd+0x230>
 8000836:	e710      	b.n	800065a <__aeabi_fadd+0x52>
 8000838:	2300      	movs	r3, #0
 800083a:	2400      	movs	r4, #0
 800083c:	2200      	movs	r2, #0
 800083e:	469c      	mov	ip, r3
 8000840:	e727      	b.n	8000692 <__aeabi_fadd+0x8a>
 8000842:	2320      	movs	r3, #32
 8000844:	0032      	movs	r2, r6
 8000846:	0030      	movs	r0, r6
 8000848:	40ca      	lsrs	r2, r1
 800084a:	1a59      	subs	r1, r3, r1
 800084c:	4088      	lsls	r0, r1
 800084e:	1e43      	subs	r3, r0, #1
 8000850:	4198      	sbcs	r0, r3
 8000852:	4310      	orrs	r0, r2
 8000854:	e745      	b.n	80006e2 <__aeabi_fadd+0xda>
 8000856:	2d00      	cmp	r5, #0
 8000858:	d14a      	bne.n	80008f0 <__aeabi_fadd+0x2e8>
 800085a:	4643      	mov	r3, r8
 800085c:	2b00      	cmp	r3, #0
 800085e:	d063      	beq.n	8000928 <__aeabi_fadd+0x320>
 8000860:	2200      	movs	r2, #0
 8000862:	2e00      	cmp	r6, #0
 8000864:	d100      	bne.n	8000868 <__aeabi_fadd+0x260>
 8000866:	e714      	b.n	8000692 <__aeabi_fadd+0x8a>
 8000868:	0030      	movs	r0, r6
 800086a:	4440      	add	r0, r8
 800086c:	0143      	lsls	r3, r0, #5
 800086e:	d400      	bmi.n	8000872 <__aeabi_fadd+0x26a>
 8000870:	e77e      	b.n	8000770 <__aeabi_fadd+0x168>
 8000872:	4b32      	ldr	r3, [pc, #200]	; (800093c <__aeabi_fadd+0x334>)
 8000874:	3501      	adds	r5, #1
 8000876:	4018      	ands	r0, r3
 8000878:	e77a      	b.n	8000770 <__aeabi_fadd+0x168>
 800087a:	2fff      	cmp	r7, #255	; 0xff
 800087c:	d08c      	beq.n	8000798 <__aeabi_fadd+0x190>
 800087e:	2380      	movs	r3, #128	; 0x80
 8000880:	4641      	mov	r1, r8
 8000882:	04db      	lsls	r3, r3, #19
 8000884:	4319      	orrs	r1, r3
 8000886:	4688      	mov	r8, r1
 8000888:	e79f      	b.n	80007ca <__aeabi_fadd+0x1c2>
 800088a:	4643      	mov	r3, r8
 800088c:	000c      	movs	r4, r1
 800088e:	1af7      	subs	r7, r6, r3
 8000890:	e6e3      	b.n	800065a <__aeabi_fadd+0x52>
 8000892:	4642      	mov	r2, r8
 8000894:	2a00      	cmp	r2, #0
 8000896:	d000      	beq.n	800089a <__aeabi_fadd+0x292>
 8000898:	e775      	b.n	8000786 <__aeabi_fadd+0x17e>
 800089a:	2e00      	cmp	r6, #0
 800089c:	d000      	beq.n	80008a0 <__aeabi_fadd+0x298>
 800089e:	e77a      	b.n	8000796 <__aeabi_fadd+0x18e>
 80008a0:	2380      	movs	r3, #128	; 0x80
 80008a2:	03db      	lsls	r3, r3, #15
 80008a4:	2400      	movs	r4, #0
 80008a6:	469c      	mov	ip, r3
 80008a8:	22ff      	movs	r2, #255	; 0xff
 80008aa:	e6f2      	b.n	8000692 <__aeabi_fadd+0x8a>
 80008ac:	0030      	movs	r0, r6
 80008ae:	4440      	add	r0, r8
 80008b0:	2501      	movs	r5, #1
 80008b2:	0143      	lsls	r3, r0, #5
 80008b4:	d400      	bmi.n	80008b8 <__aeabi_fadd+0x2b0>
 80008b6:	e75b      	b.n	8000770 <__aeabi_fadd+0x168>
 80008b8:	2502      	movs	r5, #2
 80008ba:	e718      	b.n	80006ee <__aeabi_fadd+0xe6>
 80008bc:	4643      	mov	r3, r8
 80008be:	2501      	movs	r5, #1
 80008c0:	1b98      	subs	r0, r3, r6
 80008c2:	e6c5      	b.n	8000650 <__aeabi_fadd+0x48>
 80008c4:	2320      	movs	r3, #32
 80008c6:	4644      	mov	r4, r8
 80008c8:	4640      	mov	r0, r8
 80008ca:	40d4      	lsrs	r4, r2
 80008cc:	1a9a      	subs	r2, r3, r2
 80008ce:	4090      	lsls	r0, r2
 80008d0:	1e43      	subs	r3, r0, #1
 80008d2:	4198      	sbcs	r0, r3
 80008d4:	4320      	orrs	r0, r4
 80008d6:	e7a4      	b.n	8000822 <__aeabi_fadd+0x21a>
 80008d8:	000d      	movs	r5, r1
 80008da:	e74d      	b.n	8000778 <__aeabi_fadd+0x170>
 80008dc:	2320      	movs	r3, #32
 80008de:	4641      	mov	r1, r8
 80008e0:	4640      	mov	r0, r8
 80008e2:	40d1      	lsrs	r1, r2
 80008e4:	1a9a      	subs	r2, r3, r2
 80008e6:	4090      	lsls	r0, r2
 80008e8:	1e43      	subs	r3, r0, #1
 80008ea:	4198      	sbcs	r0, r3
 80008ec:	4308      	orrs	r0, r1
 80008ee:	e770      	b.n	80007d2 <__aeabi_fadd+0x1ca>
 80008f0:	4642      	mov	r2, r8
 80008f2:	2a00      	cmp	r2, #0
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fadd+0x2f0>
 80008f6:	e74f      	b.n	8000798 <__aeabi_fadd+0x190>
 80008f8:	2e00      	cmp	r6, #0
 80008fa:	d100      	bne.n	80008fe <__aeabi_fadd+0x2f6>
 80008fc:	e74d      	b.n	800079a <__aeabi_fadd+0x192>
 80008fe:	2280      	movs	r2, #128	; 0x80
 8000900:	03d2      	lsls	r2, r2, #15
 8000902:	4213      	tst	r3, r2
 8000904:	d100      	bne.n	8000908 <__aeabi_fadd+0x300>
 8000906:	e748      	b.n	800079a <__aeabi_fadd+0x192>
 8000908:	4210      	tst	r0, r2
 800090a:	d000      	beq.n	800090e <__aeabi_fadd+0x306>
 800090c:	e745      	b.n	800079a <__aeabi_fadd+0x192>
 800090e:	0003      	movs	r3, r0
 8000910:	e743      	b.n	800079a <__aeabi_fadd+0x192>
 8000912:	2e00      	cmp	r6, #0
 8000914:	d090      	beq.n	8000838 <__aeabi_fadd+0x230>
 8000916:	000c      	movs	r4, r1
 8000918:	4684      	mov	ip, r0
 800091a:	2200      	movs	r2, #0
 800091c:	e6b9      	b.n	8000692 <__aeabi_fadd+0x8a>
 800091e:	4643      	mov	r3, r8
 8000920:	000c      	movs	r4, r1
 8000922:	1af0      	subs	r0, r6, r3
 8000924:	3501      	adds	r5, #1
 8000926:	e693      	b.n	8000650 <__aeabi_fadd+0x48>
 8000928:	4684      	mov	ip, r0
 800092a:	2200      	movs	r2, #0
 800092c:	e6b1      	b.n	8000692 <__aeabi_fadd+0x8a>
 800092e:	2800      	cmp	r0, #0
 8000930:	d000      	beq.n	8000934 <__aeabi_fadd+0x32c>
 8000932:	e71d      	b.n	8000770 <__aeabi_fadd+0x168>
 8000934:	2300      	movs	r3, #0
 8000936:	2400      	movs	r4, #0
 8000938:	469c      	mov	ip, r3
 800093a:	e6aa      	b.n	8000692 <__aeabi_fadd+0x8a>
 800093c:	fbffffff 	.word	0xfbffffff
 8000940:	7dffffff 	.word	0x7dffffff

08000944 <__eqsf2>:
 8000944:	b570      	push	{r4, r5, r6, lr}
 8000946:	0042      	lsls	r2, r0, #1
 8000948:	0245      	lsls	r5, r0, #9
 800094a:	024e      	lsls	r6, r1, #9
 800094c:	004c      	lsls	r4, r1, #1
 800094e:	0fc3      	lsrs	r3, r0, #31
 8000950:	0a6d      	lsrs	r5, r5, #9
 8000952:	2001      	movs	r0, #1
 8000954:	0e12      	lsrs	r2, r2, #24
 8000956:	0a76      	lsrs	r6, r6, #9
 8000958:	0e24      	lsrs	r4, r4, #24
 800095a:	0fc9      	lsrs	r1, r1, #31
 800095c:	2aff      	cmp	r2, #255	; 0xff
 800095e:	d006      	beq.n	800096e <__eqsf2+0x2a>
 8000960:	2cff      	cmp	r4, #255	; 0xff
 8000962:	d003      	beq.n	800096c <__eqsf2+0x28>
 8000964:	42a2      	cmp	r2, r4
 8000966:	d101      	bne.n	800096c <__eqsf2+0x28>
 8000968:	42b5      	cmp	r5, r6
 800096a:	d006      	beq.n	800097a <__eqsf2+0x36>
 800096c:	bd70      	pop	{r4, r5, r6, pc}
 800096e:	2d00      	cmp	r5, #0
 8000970:	d1fc      	bne.n	800096c <__eqsf2+0x28>
 8000972:	2cff      	cmp	r4, #255	; 0xff
 8000974:	d1fa      	bne.n	800096c <__eqsf2+0x28>
 8000976:	2e00      	cmp	r6, #0
 8000978:	d1f8      	bne.n	800096c <__eqsf2+0x28>
 800097a:	428b      	cmp	r3, r1
 800097c:	d006      	beq.n	800098c <__eqsf2+0x48>
 800097e:	2001      	movs	r0, #1
 8000980:	2a00      	cmp	r2, #0
 8000982:	d1f3      	bne.n	800096c <__eqsf2+0x28>
 8000984:	0028      	movs	r0, r5
 8000986:	1e43      	subs	r3, r0, #1
 8000988:	4198      	sbcs	r0, r3
 800098a:	e7ef      	b.n	800096c <__eqsf2+0x28>
 800098c:	2000      	movs	r0, #0
 800098e:	e7ed      	b.n	800096c <__eqsf2+0x28>

08000990 <__gesf2>:
 8000990:	b570      	push	{r4, r5, r6, lr}
 8000992:	0042      	lsls	r2, r0, #1
 8000994:	0245      	lsls	r5, r0, #9
 8000996:	024e      	lsls	r6, r1, #9
 8000998:	004c      	lsls	r4, r1, #1
 800099a:	0fc3      	lsrs	r3, r0, #31
 800099c:	0a6d      	lsrs	r5, r5, #9
 800099e:	0e12      	lsrs	r2, r2, #24
 80009a0:	0a76      	lsrs	r6, r6, #9
 80009a2:	0e24      	lsrs	r4, r4, #24
 80009a4:	0fc8      	lsrs	r0, r1, #31
 80009a6:	2aff      	cmp	r2, #255	; 0xff
 80009a8:	d01b      	beq.n	80009e2 <__gesf2+0x52>
 80009aa:	2cff      	cmp	r4, #255	; 0xff
 80009ac:	d00e      	beq.n	80009cc <__gesf2+0x3c>
 80009ae:	2a00      	cmp	r2, #0
 80009b0:	d11b      	bne.n	80009ea <__gesf2+0x5a>
 80009b2:	2c00      	cmp	r4, #0
 80009b4:	d101      	bne.n	80009ba <__gesf2+0x2a>
 80009b6:	2e00      	cmp	r6, #0
 80009b8:	d01c      	beq.n	80009f4 <__gesf2+0x64>
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d00c      	beq.n	80009d8 <__gesf2+0x48>
 80009be:	4283      	cmp	r3, r0
 80009c0:	d01c      	beq.n	80009fc <__gesf2+0x6c>
 80009c2:	2102      	movs	r1, #2
 80009c4:	1e58      	subs	r0, r3, #1
 80009c6:	4008      	ands	r0, r1
 80009c8:	3801      	subs	r0, #1
 80009ca:	bd70      	pop	{r4, r5, r6, pc}
 80009cc:	2e00      	cmp	r6, #0
 80009ce:	d122      	bne.n	8000a16 <__gesf2+0x86>
 80009d0:	2a00      	cmp	r2, #0
 80009d2:	d1f4      	bne.n	80009be <__gesf2+0x2e>
 80009d4:	2d00      	cmp	r5, #0
 80009d6:	d1f2      	bne.n	80009be <__gesf2+0x2e>
 80009d8:	2800      	cmp	r0, #0
 80009da:	d1f6      	bne.n	80009ca <__gesf2+0x3a>
 80009dc:	2001      	movs	r0, #1
 80009de:	4240      	negs	r0, r0
 80009e0:	e7f3      	b.n	80009ca <__gesf2+0x3a>
 80009e2:	2d00      	cmp	r5, #0
 80009e4:	d117      	bne.n	8000a16 <__gesf2+0x86>
 80009e6:	2cff      	cmp	r4, #255	; 0xff
 80009e8:	d0f0      	beq.n	80009cc <__gesf2+0x3c>
 80009ea:	2c00      	cmp	r4, #0
 80009ec:	d1e7      	bne.n	80009be <__gesf2+0x2e>
 80009ee:	2e00      	cmp	r6, #0
 80009f0:	d1e5      	bne.n	80009be <__gesf2+0x2e>
 80009f2:	e7e6      	b.n	80009c2 <__gesf2+0x32>
 80009f4:	2000      	movs	r0, #0
 80009f6:	2d00      	cmp	r5, #0
 80009f8:	d0e7      	beq.n	80009ca <__gesf2+0x3a>
 80009fa:	e7e2      	b.n	80009c2 <__gesf2+0x32>
 80009fc:	42a2      	cmp	r2, r4
 80009fe:	dc05      	bgt.n	8000a0c <__gesf2+0x7c>
 8000a00:	dbea      	blt.n	80009d8 <__gesf2+0x48>
 8000a02:	42b5      	cmp	r5, r6
 8000a04:	d802      	bhi.n	8000a0c <__gesf2+0x7c>
 8000a06:	d3e7      	bcc.n	80009d8 <__gesf2+0x48>
 8000a08:	2000      	movs	r0, #0
 8000a0a:	e7de      	b.n	80009ca <__gesf2+0x3a>
 8000a0c:	4243      	negs	r3, r0
 8000a0e:	4158      	adcs	r0, r3
 8000a10:	0040      	lsls	r0, r0, #1
 8000a12:	3801      	subs	r0, #1
 8000a14:	e7d9      	b.n	80009ca <__gesf2+0x3a>
 8000a16:	2002      	movs	r0, #2
 8000a18:	4240      	negs	r0, r0
 8000a1a:	e7d6      	b.n	80009ca <__gesf2+0x3a>

08000a1c <__lesf2>:
 8000a1c:	b570      	push	{r4, r5, r6, lr}
 8000a1e:	0042      	lsls	r2, r0, #1
 8000a20:	0245      	lsls	r5, r0, #9
 8000a22:	024e      	lsls	r6, r1, #9
 8000a24:	004c      	lsls	r4, r1, #1
 8000a26:	0fc3      	lsrs	r3, r0, #31
 8000a28:	0a6d      	lsrs	r5, r5, #9
 8000a2a:	0e12      	lsrs	r2, r2, #24
 8000a2c:	0a76      	lsrs	r6, r6, #9
 8000a2e:	0e24      	lsrs	r4, r4, #24
 8000a30:	0fc8      	lsrs	r0, r1, #31
 8000a32:	2aff      	cmp	r2, #255	; 0xff
 8000a34:	d00b      	beq.n	8000a4e <__lesf2+0x32>
 8000a36:	2cff      	cmp	r4, #255	; 0xff
 8000a38:	d00d      	beq.n	8000a56 <__lesf2+0x3a>
 8000a3a:	2a00      	cmp	r2, #0
 8000a3c:	d11f      	bne.n	8000a7e <__lesf2+0x62>
 8000a3e:	2c00      	cmp	r4, #0
 8000a40:	d116      	bne.n	8000a70 <__lesf2+0x54>
 8000a42:	2e00      	cmp	r6, #0
 8000a44:	d114      	bne.n	8000a70 <__lesf2+0x54>
 8000a46:	2000      	movs	r0, #0
 8000a48:	2d00      	cmp	r5, #0
 8000a4a:	d010      	beq.n	8000a6e <__lesf2+0x52>
 8000a4c:	e009      	b.n	8000a62 <__lesf2+0x46>
 8000a4e:	2d00      	cmp	r5, #0
 8000a50:	d10c      	bne.n	8000a6c <__lesf2+0x50>
 8000a52:	2cff      	cmp	r4, #255	; 0xff
 8000a54:	d113      	bne.n	8000a7e <__lesf2+0x62>
 8000a56:	2e00      	cmp	r6, #0
 8000a58:	d108      	bne.n	8000a6c <__lesf2+0x50>
 8000a5a:	2a00      	cmp	r2, #0
 8000a5c:	d008      	beq.n	8000a70 <__lesf2+0x54>
 8000a5e:	4283      	cmp	r3, r0
 8000a60:	d012      	beq.n	8000a88 <__lesf2+0x6c>
 8000a62:	2102      	movs	r1, #2
 8000a64:	1e58      	subs	r0, r3, #1
 8000a66:	4008      	ands	r0, r1
 8000a68:	3801      	subs	r0, #1
 8000a6a:	e000      	b.n	8000a6e <__lesf2+0x52>
 8000a6c:	2002      	movs	r0, #2
 8000a6e:	bd70      	pop	{r4, r5, r6, pc}
 8000a70:	2d00      	cmp	r5, #0
 8000a72:	d1f4      	bne.n	8000a5e <__lesf2+0x42>
 8000a74:	2800      	cmp	r0, #0
 8000a76:	d1fa      	bne.n	8000a6e <__lesf2+0x52>
 8000a78:	2001      	movs	r0, #1
 8000a7a:	4240      	negs	r0, r0
 8000a7c:	e7f7      	b.n	8000a6e <__lesf2+0x52>
 8000a7e:	2c00      	cmp	r4, #0
 8000a80:	d1ed      	bne.n	8000a5e <__lesf2+0x42>
 8000a82:	2e00      	cmp	r6, #0
 8000a84:	d1eb      	bne.n	8000a5e <__lesf2+0x42>
 8000a86:	e7ec      	b.n	8000a62 <__lesf2+0x46>
 8000a88:	42a2      	cmp	r2, r4
 8000a8a:	dc05      	bgt.n	8000a98 <__lesf2+0x7c>
 8000a8c:	dbf2      	blt.n	8000a74 <__lesf2+0x58>
 8000a8e:	42b5      	cmp	r5, r6
 8000a90:	d802      	bhi.n	8000a98 <__lesf2+0x7c>
 8000a92:	d3ef      	bcc.n	8000a74 <__lesf2+0x58>
 8000a94:	2000      	movs	r0, #0
 8000a96:	e7ea      	b.n	8000a6e <__lesf2+0x52>
 8000a98:	4243      	negs	r3, r0
 8000a9a:	4158      	adcs	r0, r3
 8000a9c:	0040      	lsls	r0, r0, #1
 8000a9e:	3801      	subs	r0, #1
 8000aa0:	e7e5      	b.n	8000a6e <__lesf2+0x52>
 8000aa2:	46c0      	nop			; (mov r8, r8)

08000aa4 <__aeabi_fcmpun>:
 8000aa4:	0243      	lsls	r3, r0, #9
 8000aa6:	024a      	lsls	r2, r1, #9
 8000aa8:	0040      	lsls	r0, r0, #1
 8000aaa:	0049      	lsls	r1, r1, #1
 8000aac:	0a5b      	lsrs	r3, r3, #9
 8000aae:	0a52      	lsrs	r2, r2, #9
 8000ab0:	0e09      	lsrs	r1, r1, #24
 8000ab2:	0e00      	lsrs	r0, r0, #24
 8000ab4:	28ff      	cmp	r0, #255	; 0xff
 8000ab6:	d006      	beq.n	8000ac6 <__aeabi_fcmpun+0x22>
 8000ab8:	2000      	movs	r0, #0
 8000aba:	29ff      	cmp	r1, #255	; 0xff
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_fcmpun+0x20>
 8000abe:	1e53      	subs	r3, r2, #1
 8000ac0:	419a      	sbcs	r2, r3
 8000ac2:	0010      	movs	r0, r2
 8000ac4:	4770      	bx	lr
 8000ac6:	38fe      	subs	r0, #254	; 0xfe
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d1fb      	bne.n	8000ac4 <__aeabi_fcmpun+0x20>
 8000acc:	e7f4      	b.n	8000ab8 <__aeabi_fcmpun+0x14>
 8000ace:	46c0      	nop			; (mov r8, r8)

08000ad0 <__aeabi_f2iz>:
 8000ad0:	0241      	lsls	r1, r0, #9
 8000ad2:	0042      	lsls	r2, r0, #1
 8000ad4:	0fc3      	lsrs	r3, r0, #31
 8000ad6:	0a49      	lsrs	r1, r1, #9
 8000ad8:	2000      	movs	r0, #0
 8000ada:	0e12      	lsrs	r2, r2, #24
 8000adc:	2a7e      	cmp	r2, #126	; 0x7e
 8000ade:	dd03      	ble.n	8000ae8 <__aeabi_f2iz+0x18>
 8000ae0:	2a9d      	cmp	r2, #157	; 0x9d
 8000ae2:	dd02      	ble.n	8000aea <__aeabi_f2iz+0x1a>
 8000ae4:	4a09      	ldr	r2, [pc, #36]	; (8000b0c <__aeabi_f2iz+0x3c>)
 8000ae6:	1898      	adds	r0, r3, r2
 8000ae8:	4770      	bx	lr
 8000aea:	2080      	movs	r0, #128	; 0x80
 8000aec:	0400      	lsls	r0, r0, #16
 8000aee:	4301      	orrs	r1, r0
 8000af0:	2a95      	cmp	r2, #149	; 0x95
 8000af2:	dc07      	bgt.n	8000b04 <__aeabi_f2iz+0x34>
 8000af4:	2096      	movs	r0, #150	; 0x96
 8000af6:	1a82      	subs	r2, r0, r2
 8000af8:	40d1      	lsrs	r1, r2
 8000afa:	4248      	negs	r0, r1
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d1f3      	bne.n	8000ae8 <__aeabi_f2iz+0x18>
 8000b00:	0008      	movs	r0, r1
 8000b02:	e7f1      	b.n	8000ae8 <__aeabi_f2iz+0x18>
 8000b04:	3a96      	subs	r2, #150	; 0x96
 8000b06:	4091      	lsls	r1, r2
 8000b08:	e7f7      	b.n	8000afa <__aeabi_f2iz+0x2a>
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	7fffffff 	.word	0x7fffffff

08000b10 <__aeabi_i2f>:
 8000b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b12:	2800      	cmp	r0, #0
 8000b14:	d013      	beq.n	8000b3e <__aeabi_i2f+0x2e>
 8000b16:	17c3      	asrs	r3, r0, #31
 8000b18:	18c6      	adds	r6, r0, r3
 8000b1a:	405e      	eors	r6, r3
 8000b1c:	0fc4      	lsrs	r4, r0, #31
 8000b1e:	0030      	movs	r0, r6
 8000b20:	f001 fefa 	bl	8002918 <__clzsi2>
 8000b24:	239e      	movs	r3, #158	; 0x9e
 8000b26:	0005      	movs	r5, r0
 8000b28:	1a1b      	subs	r3, r3, r0
 8000b2a:	2b96      	cmp	r3, #150	; 0x96
 8000b2c:	dc0f      	bgt.n	8000b4e <__aeabi_i2f+0x3e>
 8000b2e:	2808      	cmp	r0, #8
 8000b30:	dd01      	ble.n	8000b36 <__aeabi_i2f+0x26>
 8000b32:	3d08      	subs	r5, #8
 8000b34:	40ae      	lsls	r6, r5
 8000b36:	0276      	lsls	r6, r6, #9
 8000b38:	0a76      	lsrs	r6, r6, #9
 8000b3a:	b2d8      	uxtb	r0, r3
 8000b3c:	e002      	b.n	8000b44 <__aeabi_i2f+0x34>
 8000b3e:	2400      	movs	r4, #0
 8000b40:	2000      	movs	r0, #0
 8000b42:	2600      	movs	r6, #0
 8000b44:	05c0      	lsls	r0, r0, #23
 8000b46:	4330      	orrs	r0, r6
 8000b48:	07e4      	lsls	r4, r4, #31
 8000b4a:	4320      	orrs	r0, r4
 8000b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b4e:	2b99      	cmp	r3, #153	; 0x99
 8000b50:	dd0c      	ble.n	8000b6c <__aeabi_i2f+0x5c>
 8000b52:	2205      	movs	r2, #5
 8000b54:	0031      	movs	r1, r6
 8000b56:	1a12      	subs	r2, r2, r0
 8000b58:	40d1      	lsrs	r1, r2
 8000b5a:	000a      	movs	r2, r1
 8000b5c:	0001      	movs	r1, r0
 8000b5e:	0030      	movs	r0, r6
 8000b60:	311b      	adds	r1, #27
 8000b62:	4088      	lsls	r0, r1
 8000b64:	1e41      	subs	r1, r0, #1
 8000b66:	4188      	sbcs	r0, r1
 8000b68:	4302      	orrs	r2, r0
 8000b6a:	0016      	movs	r6, r2
 8000b6c:	2d05      	cmp	r5, #5
 8000b6e:	dc12      	bgt.n	8000b96 <__aeabi_i2f+0x86>
 8000b70:	0031      	movs	r1, r6
 8000b72:	4f0d      	ldr	r7, [pc, #52]	; (8000ba8 <__aeabi_i2f+0x98>)
 8000b74:	4039      	ands	r1, r7
 8000b76:	0772      	lsls	r2, r6, #29
 8000b78:	d009      	beq.n	8000b8e <__aeabi_i2f+0x7e>
 8000b7a:	200f      	movs	r0, #15
 8000b7c:	4030      	ands	r0, r6
 8000b7e:	2804      	cmp	r0, #4
 8000b80:	d005      	beq.n	8000b8e <__aeabi_i2f+0x7e>
 8000b82:	3104      	adds	r1, #4
 8000b84:	014a      	lsls	r2, r1, #5
 8000b86:	d502      	bpl.n	8000b8e <__aeabi_i2f+0x7e>
 8000b88:	239f      	movs	r3, #159	; 0x9f
 8000b8a:	4039      	ands	r1, r7
 8000b8c:	1b5b      	subs	r3, r3, r5
 8000b8e:	0189      	lsls	r1, r1, #6
 8000b90:	0a4e      	lsrs	r6, r1, #9
 8000b92:	b2d8      	uxtb	r0, r3
 8000b94:	e7d6      	b.n	8000b44 <__aeabi_i2f+0x34>
 8000b96:	1f6a      	subs	r2, r5, #5
 8000b98:	4096      	lsls	r6, r2
 8000b9a:	0031      	movs	r1, r6
 8000b9c:	4f02      	ldr	r7, [pc, #8]	; (8000ba8 <__aeabi_i2f+0x98>)
 8000b9e:	4039      	ands	r1, r7
 8000ba0:	0772      	lsls	r2, r6, #29
 8000ba2:	d0f4      	beq.n	8000b8e <__aeabi_i2f+0x7e>
 8000ba4:	e7e9      	b.n	8000b7a <__aeabi_i2f+0x6a>
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	fbffffff 	.word	0xfbffffff

08000bac <__aeabi_dadd>:
 8000bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bae:	464f      	mov	r7, r9
 8000bb0:	4646      	mov	r6, r8
 8000bb2:	46d6      	mov	lr, sl
 8000bb4:	000d      	movs	r5, r1
 8000bb6:	0004      	movs	r4, r0
 8000bb8:	b5c0      	push	{r6, r7, lr}
 8000bba:	001f      	movs	r7, r3
 8000bbc:	0011      	movs	r1, r2
 8000bbe:	0328      	lsls	r0, r5, #12
 8000bc0:	0f62      	lsrs	r2, r4, #29
 8000bc2:	0a40      	lsrs	r0, r0, #9
 8000bc4:	4310      	orrs	r0, r2
 8000bc6:	007a      	lsls	r2, r7, #1
 8000bc8:	0d52      	lsrs	r2, r2, #21
 8000bca:	00e3      	lsls	r3, r4, #3
 8000bcc:	033c      	lsls	r4, r7, #12
 8000bce:	4691      	mov	r9, r2
 8000bd0:	0a64      	lsrs	r4, r4, #9
 8000bd2:	0ffa      	lsrs	r2, r7, #31
 8000bd4:	0f4f      	lsrs	r7, r1, #29
 8000bd6:	006e      	lsls	r6, r5, #1
 8000bd8:	4327      	orrs	r7, r4
 8000bda:	4692      	mov	sl, r2
 8000bdc:	46b8      	mov	r8, r7
 8000bde:	0d76      	lsrs	r6, r6, #21
 8000be0:	0fed      	lsrs	r5, r5, #31
 8000be2:	00c9      	lsls	r1, r1, #3
 8000be4:	4295      	cmp	r5, r2
 8000be6:	d100      	bne.n	8000bea <__aeabi_dadd+0x3e>
 8000be8:	e099      	b.n	8000d1e <__aeabi_dadd+0x172>
 8000bea:	464c      	mov	r4, r9
 8000bec:	1b34      	subs	r4, r6, r4
 8000bee:	46a4      	mov	ip, r4
 8000bf0:	2c00      	cmp	r4, #0
 8000bf2:	dc00      	bgt.n	8000bf6 <__aeabi_dadd+0x4a>
 8000bf4:	e07c      	b.n	8000cf0 <__aeabi_dadd+0x144>
 8000bf6:	464a      	mov	r2, r9
 8000bf8:	2a00      	cmp	r2, #0
 8000bfa:	d100      	bne.n	8000bfe <__aeabi_dadd+0x52>
 8000bfc:	e0b8      	b.n	8000d70 <__aeabi_dadd+0x1c4>
 8000bfe:	4ac5      	ldr	r2, [pc, #788]	; (8000f14 <__aeabi_dadd+0x368>)
 8000c00:	4296      	cmp	r6, r2
 8000c02:	d100      	bne.n	8000c06 <__aeabi_dadd+0x5a>
 8000c04:	e11c      	b.n	8000e40 <__aeabi_dadd+0x294>
 8000c06:	2280      	movs	r2, #128	; 0x80
 8000c08:	003c      	movs	r4, r7
 8000c0a:	0412      	lsls	r2, r2, #16
 8000c0c:	4314      	orrs	r4, r2
 8000c0e:	46a0      	mov	r8, r4
 8000c10:	4662      	mov	r2, ip
 8000c12:	2a38      	cmp	r2, #56	; 0x38
 8000c14:	dd00      	ble.n	8000c18 <__aeabi_dadd+0x6c>
 8000c16:	e161      	b.n	8000edc <__aeabi_dadd+0x330>
 8000c18:	2a1f      	cmp	r2, #31
 8000c1a:	dd00      	ble.n	8000c1e <__aeabi_dadd+0x72>
 8000c1c:	e1cc      	b.n	8000fb8 <__aeabi_dadd+0x40c>
 8000c1e:	4664      	mov	r4, ip
 8000c20:	2220      	movs	r2, #32
 8000c22:	1b12      	subs	r2, r2, r4
 8000c24:	4644      	mov	r4, r8
 8000c26:	4094      	lsls	r4, r2
 8000c28:	000f      	movs	r7, r1
 8000c2a:	46a1      	mov	r9, r4
 8000c2c:	4664      	mov	r4, ip
 8000c2e:	4091      	lsls	r1, r2
 8000c30:	40e7      	lsrs	r7, r4
 8000c32:	464c      	mov	r4, r9
 8000c34:	1e4a      	subs	r2, r1, #1
 8000c36:	4191      	sbcs	r1, r2
 8000c38:	433c      	orrs	r4, r7
 8000c3a:	4642      	mov	r2, r8
 8000c3c:	4321      	orrs	r1, r4
 8000c3e:	4664      	mov	r4, ip
 8000c40:	40e2      	lsrs	r2, r4
 8000c42:	1a80      	subs	r0, r0, r2
 8000c44:	1a5c      	subs	r4, r3, r1
 8000c46:	42a3      	cmp	r3, r4
 8000c48:	419b      	sbcs	r3, r3
 8000c4a:	425f      	negs	r7, r3
 8000c4c:	1bc7      	subs	r7, r0, r7
 8000c4e:	023b      	lsls	r3, r7, #8
 8000c50:	d400      	bmi.n	8000c54 <__aeabi_dadd+0xa8>
 8000c52:	e0d0      	b.n	8000df6 <__aeabi_dadd+0x24a>
 8000c54:	027f      	lsls	r7, r7, #9
 8000c56:	0a7f      	lsrs	r7, r7, #9
 8000c58:	2f00      	cmp	r7, #0
 8000c5a:	d100      	bne.n	8000c5e <__aeabi_dadd+0xb2>
 8000c5c:	e0ff      	b.n	8000e5e <__aeabi_dadd+0x2b2>
 8000c5e:	0038      	movs	r0, r7
 8000c60:	f001 fe5a 	bl	8002918 <__clzsi2>
 8000c64:	0001      	movs	r1, r0
 8000c66:	3908      	subs	r1, #8
 8000c68:	2320      	movs	r3, #32
 8000c6a:	0022      	movs	r2, r4
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	408f      	lsls	r7, r1
 8000c70:	40da      	lsrs	r2, r3
 8000c72:	408c      	lsls	r4, r1
 8000c74:	4317      	orrs	r7, r2
 8000c76:	42b1      	cmp	r1, r6
 8000c78:	da00      	bge.n	8000c7c <__aeabi_dadd+0xd0>
 8000c7a:	e0ff      	b.n	8000e7c <__aeabi_dadd+0x2d0>
 8000c7c:	1b89      	subs	r1, r1, r6
 8000c7e:	1c4b      	adds	r3, r1, #1
 8000c80:	2b1f      	cmp	r3, #31
 8000c82:	dd00      	ble.n	8000c86 <__aeabi_dadd+0xda>
 8000c84:	e0a8      	b.n	8000dd8 <__aeabi_dadd+0x22c>
 8000c86:	2220      	movs	r2, #32
 8000c88:	0039      	movs	r1, r7
 8000c8a:	1ad2      	subs	r2, r2, r3
 8000c8c:	0020      	movs	r0, r4
 8000c8e:	4094      	lsls	r4, r2
 8000c90:	4091      	lsls	r1, r2
 8000c92:	40d8      	lsrs	r0, r3
 8000c94:	1e62      	subs	r2, r4, #1
 8000c96:	4194      	sbcs	r4, r2
 8000c98:	40df      	lsrs	r7, r3
 8000c9a:	2600      	movs	r6, #0
 8000c9c:	4301      	orrs	r1, r0
 8000c9e:	430c      	orrs	r4, r1
 8000ca0:	0763      	lsls	r3, r4, #29
 8000ca2:	d009      	beq.n	8000cb8 <__aeabi_dadd+0x10c>
 8000ca4:	230f      	movs	r3, #15
 8000ca6:	4023      	ands	r3, r4
 8000ca8:	2b04      	cmp	r3, #4
 8000caa:	d005      	beq.n	8000cb8 <__aeabi_dadd+0x10c>
 8000cac:	1d23      	adds	r3, r4, #4
 8000cae:	42a3      	cmp	r3, r4
 8000cb0:	41a4      	sbcs	r4, r4
 8000cb2:	4264      	negs	r4, r4
 8000cb4:	193f      	adds	r7, r7, r4
 8000cb6:	001c      	movs	r4, r3
 8000cb8:	023b      	lsls	r3, r7, #8
 8000cba:	d400      	bmi.n	8000cbe <__aeabi_dadd+0x112>
 8000cbc:	e09e      	b.n	8000dfc <__aeabi_dadd+0x250>
 8000cbe:	4b95      	ldr	r3, [pc, #596]	; (8000f14 <__aeabi_dadd+0x368>)
 8000cc0:	3601      	adds	r6, #1
 8000cc2:	429e      	cmp	r6, r3
 8000cc4:	d100      	bne.n	8000cc8 <__aeabi_dadd+0x11c>
 8000cc6:	e0b7      	b.n	8000e38 <__aeabi_dadd+0x28c>
 8000cc8:	4a93      	ldr	r2, [pc, #588]	; (8000f18 <__aeabi_dadd+0x36c>)
 8000cca:	08e4      	lsrs	r4, r4, #3
 8000ccc:	4017      	ands	r7, r2
 8000cce:	077b      	lsls	r3, r7, #29
 8000cd0:	0571      	lsls	r1, r6, #21
 8000cd2:	027f      	lsls	r7, r7, #9
 8000cd4:	4323      	orrs	r3, r4
 8000cd6:	0b3f      	lsrs	r7, r7, #12
 8000cd8:	0d4a      	lsrs	r2, r1, #21
 8000cda:	0512      	lsls	r2, r2, #20
 8000cdc:	433a      	orrs	r2, r7
 8000cde:	07ed      	lsls	r5, r5, #31
 8000ce0:	432a      	orrs	r2, r5
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	0011      	movs	r1, r2
 8000ce6:	bce0      	pop	{r5, r6, r7}
 8000ce8:	46ba      	mov	sl, r7
 8000cea:	46b1      	mov	r9, r6
 8000cec:	46a8      	mov	r8, r5
 8000cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cf0:	2c00      	cmp	r4, #0
 8000cf2:	d04b      	beq.n	8000d8c <__aeabi_dadd+0x1e0>
 8000cf4:	464c      	mov	r4, r9
 8000cf6:	1ba4      	subs	r4, r4, r6
 8000cf8:	46a4      	mov	ip, r4
 8000cfa:	2e00      	cmp	r6, #0
 8000cfc:	d000      	beq.n	8000d00 <__aeabi_dadd+0x154>
 8000cfe:	e123      	b.n	8000f48 <__aeabi_dadd+0x39c>
 8000d00:	0004      	movs	r4, r0
 8000d02:	431c      	orrs	r4, r3
 8000d04:	d100      	bne.n	8000d08 <__aeabi_dadd+0x15c>
 8000d06:	e1af      	b.n	8001068 <__aeabi_dadd+0x4bc>
 8000d08:	4662      	mov	r2, ip
 8000d0a:	1e54      	subs	r4, r2, #1
 8000d0c:	2a01      	cmp	r2, #1
 8000d0e:	d100      	bne.n	8000d12 <__aeabi_dadd+0x166>
 8000d10:	e215      	b.n	800113e <__aeabi_dadd+0x592>
 8000d12:	4d80      	ldr	r5, [pc, #512]	; (8000f14 <__aeabi_dadd+0x368>)
 8000d14:	45ac      	cmp	ip, r5
 8000d16:	d100      	bne.n	8000d1a <__aeabi_dadd+0x16e>
 8000d18:	e1c8      	b.n	80010ac <__aeabi_dadd+0x500>
 8000d1a:	46a4      	mov	ip, r4
 8000d1c:	e11b      	b.n	8000f56 <__aeabi_dadd+0x3aa>
 8000d1e:	464a      	mov	r2, r9
 8000d20:	1ab2      	subs	r2, r6, r2
 8000d22:	4694      	mov	ip, r2
 8000d24:	2a00      	cmp	r2, #0
 8000d26:	dc00      	bgt.n	8000d2a <__aeabi_dadd+0x17e>
 8000d28:	e0ac      	b.n	8000e84 <__aeabi_dadd+0x2d8>
 8000d2a:	464a      	mov	r2, r9
 8000d2c:	2a00      	cmp	r2, #0
 8000d2e:	d043      	beq.n	8000db8 <__aeabi_dadd+0x20c>
 8000d30:	4a78      	ldr	r2, [pc, #480]	; (8000f14 <__aeabi_dadd+0x368>)
 8000d32:	4296      	cmp	r6, r2
 8000d34:	d100      	bne.n	8000d38 <__aeabi_dadd+0x18c>
 8000d36:	e1af      	b.n	8001098 <__aeabi_dadd+0x4ec>
 8000d38:	2280      	movs	r2, #128	; 0x80
 8000d3a:	003c      	movs	r4, r7
 8000d3c:	0412      	lsls	r2, r2, #16
 8000d3e:	4314      	orrs	r4, r2
 8000d40:	46a0      	mov	r8, r4
 8000d42:	4662      	mov	r2, ip
 8000d44:	2a38      	cmp	r2, #56	; 0x38
 8000d46:	dc67      	bgt.n	8000e18 <__aeabi_dadd+0x26c>
 8000d48:	2a1f      	cmp	r2, #31
 8000d4a:	dc00      	bgt.n	8000d4e <__aeabi_dadd+0x1a2>
 8000d4c:	e15f      	b.n	800100e <__aeabi_dadd+0x462>
 8000d4e:	4647      	mov	r7, r8
 8000d50:	3a20      	subs	r2, #32
 8000d52:	40d7      	lsrs	r7, r2
 8000d54:	4662      	mov	r2, ip
 8000d56:	2a20      	cmp	r2, #32
 8000d58:	d005      	beq.n	8000d66 <__aeabi_dadd+0x1ba>
 8000d5a:	4664      	mov	r4, ip
 8000d5c:	2240      	movs	r2, #64	; 0x40
 8000d5e:	1b12      	subs	r2, r2, r4
 8000d60:	4644      	mov	r4, r8
 8000d62:	4094      	lsls	r4, r2
 8000d64:	4321      	orrs	r1, r4
 8000d66:	1e4a      	subs	r2, r1, #1
 8000d68:	4191      	sbcs	r1, r2
 8000d6a:	000c      	movs	r4, r1
 8000d6c:	433c      	orrs	r4, r7
 8000d6e:	e057      	b.n	8000e20 <__aeabi_dadd+0x274>
 8000d70:	003a      	movs	r2, r7
 8000d72:	430a      	orrs	r2, r1
 8000d74:	d100      	bne.n	8000d78 <__aeabi_dadd+0x1cc>
 8000d76:	e105      	b.n	8000f84 <__aeabi_dadd+0x3d8>
 8000d78:	0022      	movs	r2, r4
 8000d7a:	3a01      	subs	r2, #1
 8000d7c:	2c01      	cmp	r4, #1
 8000d7e:	d100      	bne.n	8000d82 <__aeabi_dadd+0x1d6>
 8000d80:	e182      	b.n	8001088 <__aeabi_dadd+0x4dc>
 8000d82:	4c64      	ldr	r4, [pc, #400]	; (8000f14 <__aeabi_dadd+0x368>)
 8000d84:	45a4      	cmp	ip, r4
 8000d86:	d05b      	beq.n	8000e40 <__aeabi_dadd+0x294>
 8000d88:	4694      	mov	ip, r2
 8000d8a:	e741      	b.n	8000c10 <__aeabi_dadd+0x64>
 8000d8c:	4c63      	ldr	r4, [pc, #396]	; (8000f1c <__aeabi_dadd+0x370>)
 8000d8e:	1c77      	adds	r7, r6, #1
 8000d90:	4227      	tst	r7, r4
 8000d92:	d000      	beq.n	8000d96 <__aeabi_dadd+0x1ea>
 8000d94:	e0c4      	b.n	8000f20 <__aeabi_dadd+0x374>
 8000d96:	0004      	movs	r4, r0
 8000d98:	431c      	orrs	r4, r3
 8000d9a:	2e00      	cmp	r6, #0
 8000d9c:	d000      	beq.n	8000da0 <__aeabi_dadd+0x1f4>
 8000d9e:	e169      	b.n	8001074 <__aeabi_dadd+0x4c8>
 8000da0:	2c00      	cmp	r4, #0
 8000da2:	d100      	bne.n	8000da6 <__aeabi_dadd+0x1fa>
 8000da4:	e1bf      	b.n	8001126 <__aeabi_dadd+0x57a>
 8000da6:	4644      	mov	r4, r8
 8000da8:	430c      	orrs	r4, r1
 8000daa:	d000      	beq.n	8000dae <__aeabi_dadd+0x202>
 8000dac:	e1d0      	b.n	8001150 <__aeabi_dadd+0x5a4>
 8000dae:	0742      	lsls	r2, r0, #29
 8000db0:	08db      	lsrs	r3, r3, #3
 8000db2:	4313      	orrs	r3, r2
 8000db4:	08c0      	lsrs	r0, r0, #3
 8000db6:	e029      	b.n	8000e0c <__aeabi_dadd+0x260>
 8000db8:	003a      	movs	r2, r7
 8000dba:	430a      	orrs	r2, r1
 8000dbc:	d100      	bne.n	8000dc0 <__aeabi_dadd+0x214>
 8000dbe:	e170      	b.n	80010a2 <__aeabi_dadd+0x4f6>
 8000dc0:	4662      	mov	r2, ip
 8000dc2:	4664      	mov	r4, ip
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	2c01      	cmp	r4, #1
 8000dc8:	d100      	bne.n	8000dcc <__aeabi_dadd+0x220>
 8000dca:	e0e0      	b.n	8000f8e <__aeabi_dadd+0x3e2>
 8000dcc:	4c51      	ldr	r4, [pc, #324]	; (8000f14 <__aeabi_dadd+0x368>)
 8000dce:	45a4      	cmp	ip, r4
 8000dd0:	d100      	bne.n	8000dd4 <__aeabi_dadd+0x228>
 8000dd2:	e161      	b.n	8001098 <__aeabi_dadd+0x4ec>
 8000dd4:	4694      	mov	ip, r2
 8000dd6:	e7b4      	b.n	8000d42 <__aeabi_dadd+0x196>
 8000dd8:	003a      	movs	r2, r7
 8000dda:	391f      	subs	r1, #31
 8000ddc:	40ca      	lsrs	r2, r1
 8000dde:	0011      	movs	r1, r2
 8000de0:	2b20      	cmp	r3, #32
 8000de2:	d003      	beq.n	8000dec <__aeabi_dadd+0x240>
 8000de4:	2240      	movs	r2, #64	; 0x40
 8000de6:	1ad3      	subs	r3, r2, r3
 8000de8:	409f      	lsls	r7, r3
 8000dea:	433c      	orrs	r4, r7
 8000dec:	1e63      	subs	r3, r4, #1
 8000dee:	419c      	sbcs	r4, r3
 8000df0:	2700      	movs	r7, #0
 8000df2:	2600      	movs	r6, #0
 8000df4:	430c      	orrs	r4, r1
 8000df6:	0763      	lsls	r3, r4, #29
 8000df8:	d000      	beq.n	8000dfc <__aeabi_dadd+0x250>
 8000dfa:	e753      	b.n	8000ca4 <__aeabi_dadd+0xf8>
 8000dfc:	46b4      	mov	ip, r6
 8000dfe:	08e4      	lsrs	r4, r4, #3
 8000e00:	077b      	lsls	r3, r7, #29
 8000e02:	4323      	orrs	r3, r4
 8000e04:	08f8      	lsrs	r0, r7, #3
 8000e06:	4a43      	ldr	r2, [pc, #268]	; (8000f14 <__aeabi_dadd+0x368>)
 8000e08:	4594      	cmp	ip, r2
 8000e0a:	d01d      	beq.n	8000e48 <__aeabi_dadd+0x29c>
 8000e0c:	4662      	mov	r2, ip
 8000e0e:	0307      	lsls	r7, r0, #12
 8000e10:	0552      	lsls	r2, r2, #21
 8000e12:	0b3f      	lsrs	r7, r7, #12
 8000e14:	0d52      	lsrs	r2, r2, #21
 8000e16:	e760      	b.n	8000cda <__aeabi_dadd+0x12e>
 8000e18:	4644      	mov	r4, r8
 8000e1a:	430c      	orrs	r4, r1
 8000e1c:	1e62      	subs	r2, r4, #1
 8000e1e:	4194      	sbcs	r4, r2
 8000e20:	18e4      	adds	r4, r4, r3
 8000e22:	429c      	cmp	r4, r3
 8000e24:	419b      	sbcs	r3, r3
 8000e26:	425f      	negs	r7, r3
 8000e28:	183f      	adds	r7, r7, r0
 8000e2a:	023b      	lsls	r3, r7, #8
 8000e2c:	d5e3      	bpl.n	8000df6 <__aeabi_dadd+0x24a>
 8000e2e:	4b39      	ldr	r3, [pc, #228]	; (8000f14 <__aeabi_dadd+0x368>)
 8000e30:	3601      	adds	r6, #1
 8000e32:	429e      	cmp	r6, r3
 8000e34:	d000      	beq.n	8000e38 <__aeabi_dadd+0x28c>
 8000e36:	e0b5      	b.n	8000fa4 <__aeabi_dadd+0x3f8>
 8000e38:	0032      	movs	r2, r6
 8000e3a:	2700      	movs	r7, #0
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	e74c      	b.n	8000cda <__aeabi_dadd+0x12e>
 8000e40:	0742      	lsls	r2, r0, #29
 8000e42:	08db      	lsrs	r3, r3, #3
 8000e44:	4313      	orrs	r3, r2
 8000e46:	08c0      	lsrs	r0, r0, #3
 8000e48:	001a      	movs	r2, r3
 8000e4a:	4302      	orrs	r2, r0
 8000e4c:	d100      	bne.n	8000e50 <__aeabi_dadd+0x2a4>
 8000e4e:	e1e1      	b.n	8001214 <__aeabi_dadd+0x668>
 8000e50:	2780      	movs	r7, #128	; 0x80
 8000e52:	033f      	lsls	r7, r7, #12
 8000e54:	4307      	orrs	r7, r0
 8000e56:	033f      	lsls	r7, r7, #12
 8000e58:	4a2e      	ldr	r2, [pc, #184]	; (8000f14 <__aeabi_dadd+0x368>)
 8000e5a:	0b3f      	lsrs	r7, r7, #12
 8000e5c:	e73d      	b.n	8000cda <__aeabi_dadd+0x12e>
 8000e5e:	0020      	movs	r0, r4
 8000e60:	f001 fd5a 	bl	8002918 <__clzsi2>
 8000e64:	0001      	movs	r1, r0
 8000e66:	3118      	adds	r1, #24
 8000e68:	291f      	cmp	r1, #31
 8000e6a:	dc00      	bgt.n	8000e6e <__aeabi_dadd+0x2c2>
 8000e6c:	e6fc      	b.n	8000c68 <__aeabi_dadd+0xbc>
 8000e6e:	3808      	subs	r0, #8
 8000e70:	4084      	lsls	r4, r0
 8000e72:	0027      	movs	r7, r4
 8000e74:	2400      	movs	r4, #0
 8000e76:	42b1      	cmp	r1, r6
 8000e78:	db00      	blt.n	8000e7c <__aeabi_dadd+0x2d0>
 8000e7a:	e6ff      	b.n	8000c7c <__aeabi_dadd+0xd0>
 8000e7c:	4a26      	ldr	r2, [pc, #152]	; (8000f18 <__aeabi_dadd+0x36c>)
 8000e7e:	1a76      	subs	r6, r6, r1
 8000e80:	4017      	ands	r7, r2
 8000e82:	e70d      	b.n	8000ca0 <__aeabi_dadd+0xf4>
 8000e84:	2a00      	cmp	r2, #0
 8000e86:	d02f      	beq.n	8000ee8 <__aeabi_dadd+0x33c>
 8000e88:	464a      	mov	r2, r9
 8000e8a:	1b92      	subs	r2, r2, r6
 8000e8c:	4694      	mov	ip, r2
 8000e8e:	2e00      	cmp	r6, #0
 8000e90:	d100      	bne.n	8000e94 <__aeabi_dadd+0x2e8>
 8000e92:	e0ad      	b.n	8000ff0 <__aeabi_dadd+0x444>
 8000e94:	4a1f      	ldr	r2, [pc, #124]	; (8000f14 <__aeabi_dadd+0x368>)
 8000e96:	4591      	cmp	r9, r2
 8000e98:	d100      	bne.n	8000e9c <__aeabi_dadd+0x2f0>
 8000e9a:	e10f      	b.n	80010bc <__aeabi_dadd+0x510>
 8000e9c:	2280      	movs	r2, #128	; 0x80
 8000e9e:	0412      	lsls	r2, r2, #16
 8000ea0:	4310      	orrs	r0, r2
 8000ea2:	4662      	mov	r2, ip
 8000ea4:	2a38      	cmp	r2, #56	; 0x38
 8000ea6:	dd00      	ble.n	8000eaa <__aeabi_dadd+0x2fe>
 8000ea8:	e10f      	b.n	80010ca <__aeabi_dadd+0x51e>
 8000eaa:	2a1f      	cmp	r2, #31
 8000eac:	dd00      	ble.n	8000eb0 <__aeabi_dadd+0x304>
 8000eae:	e180      	b.n	80011b2 <__aeabi_dadd+0x606>
 8000eb0:	4664      	mov	r4, ip
 8000eb2:	2220      	movs	r2, #32
 8000eb4:	001e      	movs	r6, r3
 8000eb6:	1b12      	subs	r2, r2, r4
 8000eb8:	4667      	mov	r7, ip
 8000eba:	0004      	movs	r4, r0
 8000ebc:	4093      	lsls	r3, r2
 8000ebe:	4094      	lsls	r4, r2
 8000ec0:	40fe      	lsrs	r6, r7
 8000ec2:	1e5a      	subs	r2, r3, #1
 8000ec4:	4193      	sbcs	r3, r2
 8000ec6:	40f8      	lsrs	r0, r7
 8000ec8:	4334      	orrs	r4, r6
 8000eca:	431c      	orrs	r4, r3
 8000ecc:	4480      	add	r8, r0
 8000ece:	1864      	adds	r4, r4, r1
 8000ed0:	428c      	cmp	r4, r1
 8000ed2:	41bf      	sbcs	r7, r7
 8000ed4:	427f      	negs	r7, r7
 8000ed6:	464e      	mov	r6, r9
 8000ed8:	4447      	add	r7, r8
 8000eda:	e7a6      	b.n	8000e2a <__aeabi_dadd+0x27e>
 8000edc:	4642      	mov	r2, r8
 8000ede:	430a      	orrs	r2, r1
 8000ee0:	0011      	movs	r1, r2
 8000ee2:	1e4a      	subs	r2, r1, #1
 8000ee4:	4191      	sbcs	r1, r2
 8000ee6:	e6ad      	b.n	8000c44 <__aeabi_dadd+0x98>
 8000ee8:	4c0c      	ldr	r4, [pc, #48]	; (8000f1c <__aeabi_dadd+0x370>)
 8000eea:	1c72      	adds	r2, r6, #1
 8000eec:	4222      	tst	r2, r4
 8000eee:	d000      	beq.n	8000ef2 <__aeabi_dadd+0x346>
 8000ef0:	e0a1      	b.n	8001036 <__aeabi_dadd+0x48a>
 8000ef2:	0002      	movs	r2, r0
 8000ef4:	431a      	orrs	r2, r3
 8000ef6:	2e00      	cmp	r6, #0
 8000ef8:	d000      	beq.n	8000efc <__aeabi_dadd+0x350>
 8000efa:	e0fa      	b.n	80010f2 <__aeabi_dadd+0x546>
 8000efc:	2a00      	cmp	r2, #0
 8000efe:	d100      	bne.n	8000f02 <__aeabi_dadd+0x356>
 8000f00:	e145      	b.n	800118e <__aeabi_dadd+0x5e2>
 8000f02:	003a      	movs	r2, r7
 8000f04:	430a      	orrs	r2, r1
 8000f06:	d000      	beq.n	8000f0a <__aeabi_dadd+0x35e>
 8000f08:	e146      	b.n	8001198 <__aeabi_dadd+0x5ec>
 8000f0a:	0742      	lsls	r2, r0, #29
 8000f0c:	08db      	lsrs	r3, r3, #3
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	08c0      	lsrs	r0, r0, #3
 8000f12:	e77b      	b.n	8000e0c <__aeabi_dadd+0x260>
 8000f14:	000007ff 	.word	0x000007ff
 8000f18:	ff7fffff 	.word	0xff7fffff
 8000f1c:	000007fe 	.word	0x000007fe
 8000f20:	4647      	mov	r7, r8
 8000f22:	1a5c      	subs	r4, r3, r1
 8000f24:	1bc2      	subs	r2, r0, r7
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	41bf      	sbcs	r7, r7
 8000f2a:	427f      	negs	r7, r7
 8000f2c:	46b9      	mov	r9, r7
 8000f2e:	0017      	movs	r7, r2
 8000f30:	464a      	mov	r2, r9
 8000f32:	1abf      	subs	r7, r7, r2
 8000f34:	023a      	lsls	r2, r7, #8
 8000f36:	d500      	bpl.n	8000f3a <__aeabi_dadd+0x38e>
 8000f38:	e08d      	b.n	8001056 <__aeabi_dadd+0x4aa>
 8000f3a:	0023      	movs	r3, r4
 8000f3c:	433b      	orrs	r3, r7
 8000f3e:	d000      	beq.n	8000f42 <__aeabi_dadd+0x396>
 8000f40:	e68a      	b.n	8000c58 <__aeabi_dadd+0xac>
 8000f42:	2000      	movs	r0, #0
 8000f44:	2500      	movs	r5, #0
 8000f46:	e761      	b.n	8000e0c <__aeabi_dadd+0x260>
 8000f48:	4cb4      	ldr	r4, [pc, #720]	; (800121c <__aeabi_dadd+0x670>)
 8000f4a:	45a1      	cmp	r9, r4
 8000f4c:	d100      	bne.n	8000f50 <__aeabi_dadd+0x3a4>
 8000f4e:	e0ad      	b.n	80010ac <__aeabi_dadd+0x500>
 8000f50:	2480      	movs	r4, #128	; 0x80
 8000f52:	0424      	lsls	r4, r4, #16
 8000f54:	4320      	orrs	r0, r4
 8000f56:	4664      	mov	r4, ip
 8000f58:	2c38      	cmp	r4, #56	; 0x38
 8000f5a:	dc3d      	bgt.n	8000fd8 <__aeabi_dadd+0x42c>
 8000f5c:	4662      	mov	r2, ip
 8000f5e:	2c1f      	cmp	r4, #31
 8000f60:	dd00      	ble.n	8000f64 <__aeabi_dadd+0x3b8>
 8000f62:	e0b7      	b.n	80010d4 <__aeabi_dadd+0x528>
 8000f64:	2520      	movs	r5, #32
 8000f66:	001e      	movs	r6, r3
 8000f68:	1b2d      	subs	r5, r5, r4
 8000f6a:	0004      	movs	r4, r0
 8000f6c:	40ab      	lsls	r3, r5
 8000f6e:	40ac      	lsls	r4, r5
 8000f70:	40d6      	lsrs	r6, r2
 8000f72:	40d0      	lsrs	r0, r2
 8000f74:	4642      	mov	r2, r8
 8000f76:	1e5d      	subs	r5, r3, #1
 8000f78:	41ab      	sbcs	r3, r5
 8000f7a:	4334      	orrs	r4, r6
 8000f7c:	1a12      	subs	r2, r2, r0
 8000f7e:	4690      	mov	r8, r2
 8000f80:	4323      	orrs	r3, r4
 8000f82:	e02c      	b.n	8000fde <__aeabi_dadd+0x432>
 8000f84:	0742      	lsls	r2, r0, #29
 8000f86:	08db      	lsrs	r3, r3, #3
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	08c0      	lsrs	r0, r0, #3
 8000f8c:	e73b      	b.n	8000e06 <__aeabi_dadd+0x25a>
 8000f8e:	185c      	adds	r4, r3, r1
 8000f90:	429c      	cmp	r4, r3
 8000f92:	419b      	sbcs	r3, r3
 8000f94:	4440      	add	r0, r8
 8000f96:	425b      	negs	r3, r3
 8000f98:	18c7      	adds	r7, r0, r3
 8000f9a:	2601      	movs	r6, #1
 8000f9c:	023b      	lsls	r3, r7, #8
 8000f9e:	d400      	bmi.n	8000fa2 <__aeabi_dadd+0x3f6>
 8000fa0:	e729      	b.n	8000df6 <__aeabi_dadd+0x24a>
 8000fa2:	2602      	movs	r6, #2
 8000fa4:	4a9e      	ldr	r2, [pc, #632]	; (8001220 <__aeabi_dadd+0x674>)
 8000fa6:	0863      	lsrs	r3, r4, #1
 8000fa8:	4017      	ands	r7, r2
 8000faa:	2201      	movs	r2, #1
 8000fac:	4014      	ands	r4, r2
 8000fae:	431c      	orrs	r4, r3
 8000fb0:	07fb      	lsls	r3, r7, #31
 8000fb2:	431c      	orrs	r4, r3
 8000fb4:	087f      	lsrs	r7, r7, #1
 8000fb6:	e673      	b.n	8000ca0 <__aeabi_dadd+0xf4>
 8000fb8:	4644      	mov	r4, r8
 8000fba:	3a20      	subs	r2, #32
 8000fbc:	40d4      	lsrs	r4, r2
 8000fbe:	4662      	mov	r2, ip
 8000fc0:	2a20      	cmp	r2, #32
 8000fc2:	d005      	beq.n	8000fd0 <__aeabi_dadd+0x424>
 8000fc4:	4667      	mov	r7, ip
 8000fc6:	2240      	movs	r2, #64	; 0x40
 8000fc8:	1bd2      	subs	r2, r2, r7
 8000fca:	4647      	mov	r7, r8
 8000fcc:	4097      	lsls	r7, r2
 8000fce:	4339      	orrs	r1, r7
 8000fd0:	1e4a      	subs	r2, r1, #1
 8000fd2:	4191      	sbcs	r1, r2
 8000fd4:	4321      	orrs	r1, r4
 8000fd6:	e635      	b.n	8000c44 <__aeabi_dadd+0x98>
 8000fd8:	4303      	orrs	r3, r0
 8000fda:	1e58      	subs	r0, r3, #1
 8000fdc:	4183      	sbcs	r3, r0
 8000fde:	1acc      	subs	r4, r1, r3
 8000fe0:	42a1      	cmp	r1, r4
 8000fe2:	41bf      	sbcs	r7, r7
 8000fe4:	4643      	mov	r3, r8
 8000fe6:	427f      	negs	r7, r7
 8000fe8:	4655      	mov	r5, sl
 8000fea:	464e      	mov	r6, r9
 8000fec:	1bdf      	subs	r7, r3, r7
 8000fee:	e62e      	b.n	8000c4e <__aeabi_dadd+0xa2>
 8000ff0:	0002      	movs	r2, r0
 8000ff2:	431a      	orrs	r2, r3
 8000ff4:	d100      	bne.n	8000ff8 <__aeabi_dadd+0x44c>
 8000ff6:	e0bd      	b.n	8001174 <__aeabi_dadd+0x5c8>
 8000ff8:	4662      	mov	r2, ip
 8000ffa:	4664      	mov	r4, ip
 8000ffc:	3a01      	subs	r2, #1
 8000ffe:	2c01      	cmp	r4, #1
 8001000:	d100      	bne.n	8001004 <__aeabi_dadd+0x458>
 8001002:	e0e5      	b.n	80011d0 <__aeabi_dadd+0x624>
 8001004:	4c85      	ldr	r4, [pc, #532]	; (800121c <__aeabi_dadd+0x670>)
 8001006:	45a4      	cmp	ip, r4
 8001008:	d058      	beq.n	80010bc <__aeabi_dadd+0x510>
 800100a:	4694      	mov	ip, r2
 800100c:	e749      	b.n	8000ea2 <__aeabi_dadd+0x2f6>
 800100e:	4664      	mov	r4, ip
 8001010:	2220      	movs	r2, #32
 8001012:	1b12      	subs	r2, r2, r4
 8001014:	4644      	mov	r4, r8
 8001016:	4094      	lsls	r4, r2
 8001018:	000f      	movs	r7, r1
 800101a:	46a1      	mov	r9, r4
 800101c:	4664      	mov	r4, ip
 800101e:	4091      	lsls	r1, r2
 8001020:	40e7      	lsrs	r7, r4
 8001022:	464c      	mov	r4, r9
 8001024:	1e4a      	subs	r2, r1, #1
 8001026:	4191      	sbcs	r1, r2
 8001028:	433c      	orrs	r4, r7
 800102a:	4642      	mov	r2, r8
 800102c:	430c      	orrs	r4, r1
 800102e:	4661      	mov	r1, ip
 8001030:	40ca      	lsrs	r2, r1
 8001032:	1880      	adds	r0, r0, r2
 8001034:	e6f4      	b.n	8000e20 <__aeabi_dadd+0x274>
 8001036:	4c79      	ldr	r4, [pc, #484]	; (800121c <__aeabi_dadd+0x670>)
 8001038:	42a2      	cmp	r2, r4
 800103a:	d100      	bne.n	800103e <__aeabi_dadd+0x492>
 800103c:	e6fd      	b.n	8000e3a <__aeabi_dadd+0x28e>
 800103e:	1859      	adds	r1, r3, r1
 8001040:	4299      	cmp	r1, r3
 8001042:	419b      	sbcs	r3, r3
 8001044:	4440      	add	r0, r8
 8001046:	425f      	negs	r7, r3
 8001048:	19c7      	adds	r7, r0, r7
 800104a:	07fc      	lsls	r4, r7, #31
 800104c:	0849      	lsrs	r1, r1, #1
 800104e:	0016      	movs	r6, r2
 8001050:	430c      	orrs	r4, r1
 8001052:	087f      	lsrs	r7, r7, #1
 8001054:	e6cf      	b.n	8000df6 <__aeabi_dadd+0x24a>
 8001056:	1acc      	subs	r4, r1, r3
 8001058:	42a1      	cmp	r1, r4
 800105a:	41bf      	sbcs	r7, r7
 800105c:	4643      	mov	r3, r8
 800105e:	427f      	negs	r7, r7
 8001060:	1a18      	subs	r0, r3, r0
 8001062:	4655      	mov	r5, sl
 8001064:	1bc7      	subs	r7, r0, r7
 8001066:	e5f7      	b.n	8000c58 <__aeabi_dadd+0xac>
 8001068:	08c9      	lsrs	r1, r1, #3
 800106a:	077b      	lsls	r3, r7, #29
 800106c:	4655      	mov	r5, sl
 800106e:	430b      	orrs	r3, r1
 8001070:	08f8      	lsrs	r0, r7, #3
 8001072:	e6c8      	b.n	8000e06 <__aeabi_dadd+0x25a>
 8001074:	2c00      	cmp	r4, #0
 8001076:	d000      	beq.n	800107a <__aeabi_dadd+0x4ce>
 8001078:	e081      	b.n	800117e <__aeabi_dadd+0x5d2>
 800107a:	4643      	mov	r3, r8
 800107c:	430b      	orrs	r3, r1
 800107e:	d115      	bne.n	80010ac <__aeabi_dadd+0x500>
 8001080:	2080      	movs	r0, #128	; 0x80
 8001082:	2500      	movs	r5, #0
 8001084:	0300      	lsls	r0, r0, #12
 8001086:	e6e3      	b.n	8000e50 <__aeabi_dadd+0x2a4>
 8001088:	1a5c      	subs	r4, r3, r1
 800108a:	42a3      	cmp	r3, r4
 800108c:	419b      	sbcs	r3, r3
 800108e:	1bc7      	subs	r7, r0, r7
 8001090:	425b      	negs	r3, r3
 8001092:	2601      	movs	r6, #1
 8001094:	1aff      	subs	r7, r7, r3
 8001096:	e5da      	b.n	8000c4e <__aeabi_dadd+0xa2>
 8001098:	0742      	lsls	r2, r0, #29
 800109a:	08db      	lsrs	r3, r3, #3
 800109c:	4313      	orrs	r3, r2
 800109e:	08c0      	lsrs	r0, r0, #3
 80010a0:	e6d2      	b.n	8000e48 <__aeabi_dadd+0x29c>
 80010a2:	0742      	lsls	r2, r0, #29
 80010a4:	08db      	lsrs	r3, r3, #3
 80010a6:	4313      	orrs	r3, r2
 80010a8:	08c0      	lsrs	r0, r0, #3
 80010aa:	e6ac      	b.n	8000e06 <__aeabi_dadd+0x25a>
 80010ac:	4643      	mov	r3, r8
 80010ae:	4642      	mov	r2, r8
 80010b0:	08c9      	lsrs	r1, r1, #3
 80010b2:	075b      	lsls	r3, r3, #29
 80010b4:	4655      	mov	r5, sl
 80010b6:	430b      	orrs	r3, r1
 80010b8:	08d0      	lsrs	r0, r2, #3
 80010ba:	e6c5      	b.n	8000e48 <__aeabi_dadd+0x29c>
 80010bc:	4643      	mov	r3, r8
 80010be:	4642      	mov	r2, r8
 80010c0:	075b      	lsls	r3, r3, #29
 80010c2:	08c9      	lsrs	r1, r1, #3
 80010c4:	430b      	orrs	r3, r1
 80010c6:	08d0      	lsrs	r0, r2, #3
 80010c8:	e6be      	b.n	8000e48 <__aeabi_dadd+0x29c>
 80010ca:	4303      	orrs	r3, r0
 80010cc:	001c      	movs	r4, r3
 80010ce:	1e63      	subs	r3, r4, #1
 80010d0:	419c      	sbcs	r4, r3
 80010d2:	e6fc      	b.n	8000ece <__aeabi_dadd+0x322>
 80010d4:	0002      	movs	r2, r0
 80010d6:	3c20      	subs	r4, #32
 80010d8:	40e2      	lsrs	r2, r4
 80010da:	0014      	movs	r4, r2
 80010dc:	4662      	mov	r2, ip
 80010de:	2a20      	cmp	r2, #32
 80010e0:	d003      	beq.n	80010ea <__aeabi_dadd+0x53e>
 80010e2:	2540      	movs	r5, #64	; 0x40
 80010e4:	1aad      	subs	r5, r5, r2
 80010e6:	40a8      	lsls	r0, r5
 80010e8:	4303      	orrs	r3, r0
 80010ea:	1e58      	subs	r0, r3, #1
 80010ec:	4183      	sbcs	r3, r0
 80010ee:	4323      	orrs	r3, r4
 80010f0:	e775      	b.n	8000fde <__aeabi_dadd+0x432>
 80010f2:	2a00      	cmp	r2, #0
 80010f4:	d0e2      	beq.n	80010bc <__aeabi_dadd+0x510>
 80010f6:	003a      	movs	r2, r7
 80010f8:	430a      	orrs	r2, r1
 80010fa:	d0cd      	beq.n	8001098 <__aeabi_dadd+0x4ec>
 80010fc:	0742      	lsls	r2, r0, #29
 80010fe:	08db      	lsrs	r3, r3, #3
 8001100:	4313      	orrs	r3, r2
 8001102:	2280      	movs	r2, #128	; 0x80
 8001104:	08c0      	lsrs	r0, r0, #3
 8001106:	0312      	lsls	r2, r2, #12
 8001108:	4210      	tst	r0, r2
 800110a:	d006      	beq.n	800111a <__aeabi_dadd+0x56e>
 800110c:	08fc      	lsrs	r4, r7, #3
 800110e:	4214      	tst	r4, r2
 8001110:	d103      	bne.n	800111a <__aeabi_dadd+0x56e>
 8001112:	0020      	movs	r0, r4
 8001114:	08cb      	lsrs	r3, r1, #3
 8001116:	077a      	lsls	r2, r7, #29
 8001118:	4313      	orrs	r3, r2
 800111a:	0f5a      	lsrs	r2, r3, #29
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	0752      	lsls	r2, r2, #29
 8001120:	08db      	lsrs	r3, r3, #3
 8001122:	4313      	orrs	r3, r2
 8001124:	e690      	b.n	8000e48 <__aeabi_dadd+0x29c>
 8001126:	4643      	mov	r3, r8
 8001128:	430b      	orrs	r3, r1
 800112a:	d100      	bne.n	800112e <__aeabi_dadd+0x582>
 800112c:	e709      	b.n	8000f42 <__aeabi_dadd+0x396>
 800112e:	4643      	mov	r3, r8
 8001130:	4642      	mov	r2, r8
 8001132:	08c9      	lsrs	r1, r1, #3
 8001134:	075b      	lsls	r3, r3, #29
 8001136:	4655      	mov	r5, sl
 8001138:	430b      	orrs	r3, r1
 800113a:	08d0      	lsrs	r0, r2, #3
 800113c:	e666      	b.n	8000e0c <__aeabi_dadd+0x260>
 800113e:	1acc      	subs	r4, r1, r3
 8001140:	42a1      	cmp	r1, r4
 8001142:	4189      	sbcs	r1, r1
 8001144:	1a3f      	subs	r7, r7, r0
 8001146:	4249      	negs	r1, r1
 8001148:	4655      	mov	r5, sl
 800114a:	2601      	movs	r6, #1
 800114c:	1a7f      	subs	r7, r7, r1
 800114e:	e57e      	b.n	8000c4e <__aeabi_dadd+0xa2>
 8001150:	4642      	mov	r2, r8
 8001152:	1a5c      	subs	r4, r3, r1
 8001154:	1a87      	subs	r7, r0, r2
 8001156:	42a3      	cmp	r3, r4
 8001158:	4192      	sbcs	r2, r2
 800115a:	4252      	negs	r2, r2
 800115c:	1abf      	subs	r7, r7, r2
 800115e:	023a      	lsls	r2, r7, #8
 8001160:	d53d      	bpl.n	80011de <__aeabi_dadd+0x632>
 8001162:	1acc      	subs	r4, r1, r3
 8001164:	42a1      	cmp	r1, r4
 8001166:	4189      	sbcs	r1, r1
 8001168:	4643      	mov	r3, r8
 800116a:	4249      	negs	r1, r1
 800116c:	1a1f      	subs	r7, r3, r0
 800116e:	4655      	mov	r5, sl
 8001170:	1a7f      	subs	r7, r7, r1
 8001172:	e595      	b.n	8000ca0 <__aeabi_dadd+0xf4>
 8001174:	077b      	lsls	r3, r7, #29
 8001176:	08c9      	lsrs	r1, r1, #3
 8001178:	430b      	orrs	r3, r1
 800117a:	08f8      	lsrs	r0, r7, #3
 800117c:	e643      	b.n	8000e06 <__aeabi_dadd+0x25a>
 800117e:	4644      	mov	r4, r8
 8001180:	08db      	lsrs	r3, r3, #3
 8001182:	430c      	orrs	r4, r1
 8001184:	d130      	bne.n	80011e8 <__aeabi_dadd+0x63c>
 8001186:	0742      	lsls	r2, r0, #29
 8001188:	4313      	orrs	r3, r2
 800118a:	08c0      	lsrs	r0, r0, #3
 800118c:	e65c      	b.n	8000e48 <__aeabi_dadd+0x29c>
 800118e:	077b      	lsls	r3, r7, #29
 8001190:	08c9      	lsrs	r1, r1, #3
 8001192:	430b      	orrs	r3, r1
 8001194:	08f8      	lsrs	r0, r7, #3
 8001196:	e639      	b.n	8000e0c <__aeabi_dadd+0x260>
 8001198:	185c      	adds	r4, r3, r1
 800119a:	429c      	cmp	r4, r3
 800119c:	419b      	sbcs	r3, r3
 800119e:	4440      	add	r0, r8
 80011a0:	425b      	negs	r3, r3
 80011a2:	18c7      	adds	r7, r0, r3
 80011a4:	023b      	lsls	r3, r7, #8
 80011a6:	d400      	bmi.n	80011aa <__aeabi_dadd+0x5fe>
 80011a8:	e625      	b.n	8000df6 <__aeabi_dadd+0x24a>
 80011aa:	4b1d      	ldr	r3, [pc, #116]	; (8001220 <__aeabi_dadd+0x674>)
 80011ac:	2601      	movs	r6, #1
 80011ae:	401f      	ands	r7, r3
 80011b0:	e621      	b.n	8000df6 <__aeabi_dadd+0x24a>
 80011b2:	0004      	movs	r4, r0
 80011b4:	3a20      	subs	r2, #32
 80011b6:	40d4      	lsrs	r4, r2
 80011b8:	4662      	mov	r2, ip
 80011ba:	2a20      	cmp	r2, #32
 80011bc:	d004      	beq.n	80011c8 <__aeabi_dadd+0x61c>
 80011be:	2240      	movs	r2, #64	; 0x40
 80011c0:	4666      	mov	r6, ip
 80011c2:	1b92      	subs	r2, r2, r6
 80011c4:	4090      	lsls	r0, r2
 80011c6:	4303      	orrs	r3, r0
 80011c8:	1e5a      	subs	r2, r3, #1
 80011ca:	4193      	sbcs	r3, r2
 80011cc:	431c      	orrs	r4, r3
 80011ce:	e67e      	b.n	8000ece <__aeabi_dadd+0x322>
 80011d0:	185c      	adds	r4, r3, r1
 80011d2:	428c      	cmp	r4, r1
 80011d4:	4189      	sbcs	r1, r1
 80011d6:	4440      	add	r0, r8
 80011d8:	4249      	negs	r1, r1
 80011da:	1847      	adds	r7, r0, r1
 80011dc:	e6dd      	b.n	8000f9a <__aeabi_dadd+0x3ee>
 80011de:	0023      	movs	r3, r4
 80011e0:	433b      	orrs	r3, r7
 80011e2:	d100      	bne.n	80011e6 <__aeabi_dadd+0x63a>
 80011e4:	e6ad      	b.n	8000f42 <__aeabi_dadd+0x396>
 80011e6:	e606      	b.n	8000df6 <__aeabi_dadd+0x24a>
 80011e8:	0744      	lsls	r4, r0, #29
 80011ea:	4323      	orrs	r3, r4
 80011ec:	2480      	movs	r4, #128	; 0x80
 80011ee:	08c0      	lsrs	r0, r0, #3
 80011f0:	0324      	lsls	r4, r4, #12
 80011f2:	4220      	tst	r0, r4
 80011f4:	d008      	beq.n	8001208 <__aeabi_dadd+0x65c>
 80011f6:	4642      	mov	r2, r8
 80011f8:	08d6      	lsrs	r6, r2, #3
 80011fa:	4226      	tst	r6, r4
 80011fc:	d104      	bne.n	8001208 <__aeabi_dadd+0x65c>
 80011fe:	4655      	mov	r5, sl
 8001200:	0030      	movs	r0, r6
 8001202:	08cb      	lsrs	r3, r1, #3
 8001204:	0751      	lsls	r1, r2, #29
 8001206:	430b      	orrs	r3, r1
 8001208:	0f5a      	lsrs	r2, r3, #29
 800120a:	00db      	lsls	r3, r3, #3
 800120c:	08db      	lsrs	r3, r3, #3
 800120e:	0752      	lsls	r2, r2, #29
 8001210:	4313      	orrs	r3, r2
 8001212:	e619      	b.n	8000e48 <__aeabi_dadd+0x29c>
 8001214:	2300      	movs	r3, #0
 8001216:	4a01      	ldr	r2, [pc, #4]	; (800121c <__aeabi_dadd+0x670>)
 8001218:	001f      	movs	r7, r3
 800121a:	e55e      	b.n	8000cda <__aeabi_dadd+0x12e>
 800121c:	000007ff 	.word	0x000007ff
 8001220:	ff7fffff 	.word	0xff7fffff

08001224 <__aeabi_ddiv>:
 8001224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001226:	4657      	mov	r7, sl
 8001228:	464e      	mov	r6, r9
 800122a:	4645      	mov	r5, r8
 800122c:	46de      	mov	lr, fp
 800122e:	b5e0      	push	{r5, r6, r7, lr}
 8001230:	4681      	mov	r9, r0
 8001232:	0005      	movs	r5, r0
 8001234:	030c      	lsls	r4, r1, #12
 8001236:	0048      	lsls	r0, r1, #1
 8001238:	4692      	mov	sl, r2
 800123a:	001f      	movs	r7, r3
 800123c:	b085      	sub	sp, #20
 800123e:	0b24      	lsrs	r4, r4, #12
 8001240:	0d40      	lsrs	r0, r0, #21
 8001242:	0fce      	lsrs	r6, r1, #31
 8001244:	2800      	cmp	r0, #0
 8001246:	d100      	bne.n	800124a <__aeabi_ddiv+0x26>
 8001248:	e156      	b.n	80014f8 <__aeabi_ddiv+0x2d4>
 800124a:	4bd4      	ldr	r3, [pc, #848]	; (800159c <__aeabi_ddiv+0x378>)
 800124c:	4298      	cmp	r0, r3
 800124e:	d100      	bne.n	8001252 <__aeabi_ddiv+0x2e>
 8001250:	e172      	b.n	8001538 <__aeabi_ddiv+0x314>
 8001252:	0f6b      	lsrs	r3, r5, #29
 8001254:	00e4      	lsls	r4, r4, #3
 8001256:	431c      	orrs	r4, r3
 8001258:	2380      	movs	r3, #128	; 0x80
 800125a:	041b      	lsls	r3, r3, #16
 800125c:	4323      	orrs	r3, r4
 800125e:	4698      	mov	r8, r3
 8001260:	4bcf      	ldr	r3, [pc, #828]	; (80015a0 <__aeabi_ddiv+0x37c>)
 8001262:	00ed      	lsls	r5, r5, #3
 8001264:	469b      	mov	fp, r3
 8001266:	2300      	movs	r3, #0
 8001268:	4699      	mov	r9, r3
 800126a:	4483      	add	fp, r0
 800126c:	9300      	str	r3, [sp, #0]
 800126e:	033c      	lsls	r4, r7, #12
 8001270:	007b      	lsls	r3, r7, #1
 8001272:	4650      	mov	r0, sl
 8001274:	0b24      	lsrs	r4, r4, #12
 8001276:	0d5b      	lsrs	r3, r3, #21
 8001278:	0fff      	lsrs	r7, r7, #31
 800127a:	2b00      	cmp	r3, #0
 800127c:	d100      	bne.n	8001280 <__aeabi_ddiv+0x5c>
 800127e:	e11f      	b.n	80014c0 <__aeabi_ddiv+0x29c>
 8001280:	4ac6      	ldr	r2, [pc, #792]	; (800159c <__aeabi_ddiv+0x378>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d100      	bne.n	8001288 <__aeabi_ddiv+0x64>
 8001286:	e162      	b.n	800154e <__aeabi_ddiv+0x32a>
 8001288:	49c5      	ldr	r1, [pc, #788]	; (80015a0 <__aeabi_ddiv+0x37c>)
 800128a:	0f42      	lsrs	r2, r0, #29
 800128c:	468c      	mov	ip, r1
 800128e:	00e4      	lsls	r4, r4, #3
 8001290:	4659      	mov	r1, fp
 8001292:	4314      	orrs	r4, r2
 8001294:	2280      	movs	r2, #128	; 0x80
 8001296:	4463      	add	r3, ip
 8001298:	0412      	lsls	r2, r2, #16
 800129a:	1acb      	subs	r3, r1, r3
 800129c:	4314      	orrs	r4, r2
 800129e:	469b      	mov	fp, r3
 80012a0:	00c2      	lsls	r2, r0, #3
 80012a2:	2000      	movs	r0, #0
 80012a4:	0033      	movs	r3, r6
 80012a6:	407b      	eors	r3, r7
 80012a8:	469a      	mov	sl, r3
 80012aa:	464b      	mov	r3, r9
 80012ac:	2b0f      	cmp	r3, #15
 80012ae:	d827      	bhi.n	8001300 <__aeabi_ddiv+0xdc>
 80012b0:	49bc      	ldr	r1, [pc, #752]	; (80015a4 <__aeabi_ddiv+0x380>)
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	58cb      	ldr	r3, [r1, r3]
 80012b6:	469f      	mov	pc, r3
 80012b8:	46b2      	mov	sl, r6
 80012ba:	9b00      	ldr	r3, [sp, #0]
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d016      	beq.n	80012ee <__aeabi_ddiv+0xca>
 80012c0:	2b03      	cmp	r3, #3
 80012c2:	d100      	bne.n	80012c6 <__aeabi_ddiv+0xa2>
 80012c4:	e28e      	b.n	80017e4 <__aeabi_ddiv+0x5c0>
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d000      	beq.n	80012cc <__aeabi_ddiv+0xa8>
 80012ca:	e0d9      	b.n	8001480 <__aeabi_ddiv+0x25c>
 80012cc:	2300      	movs	r3, #0
 80012ce:	2400      	movs	r4, #0
 80012d0:	2500      	movs	r5, #0
 80012d2:	4652      	mov	r2, sl
 80012d4:	051b      	lsls	r3, r3, #20
 80012d6:	4323      	orrs	r3, r4
 80012d8:	07d2      	lsls	r2, r2, #31
 80012da:	4313      	orrs	r3, r2
 80012dc:	0028      	movs	r0, r5
 80012de:	0019      	movs	r1, r3
 80012e0:	b005      	add	sp, #20
 80012e2:	bcf0      	pop	{r4, r5, r6, r7}
 80012e4:	46bb      	mov	fp, r7
 80012e6:	46b2      	mov	sl, r6
 80012e8:	46a9      	mov	r9, r5
 80012ea:	46a0      	mov	r8, r4
 80012ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012ee:	2400      	movs	r4, #0
 80012f0:	2500      	movs	r5, #0
 80012f2:	4baa      	ldr	r3, [pc, #680]	; (800159c <__aeabi_ddiv+0x378>)
 80012f4:	e7ed      	b.n	80012d2 <__aeabi_ddiv+0xae>
 80012f6:	46ba      	mov	sl, r7
 80012f8:	46a0      	mov	r8, r4
 80012fa:	0015      	movs	r5, r2
 80012fc:	9000      	str	r0, [sp, #0]
 80012fe:	e7dc      	b.n	80012ba <__aeabi_ddiv+0x96>
 8001300:	4544      	cmp	r4, r8
 8001302:	d200      	bcs.n	8001306 <__aeabi_ddiv+0xe2>
 8001304:	e1c7      	b.n	8001696 <__aeabi_ddiv+0x472>
 8001306:	d100      	bne.n	800130a <__aeabi_ddiv+0xe6>
 8001308:	e1c2      	b.n	8001690 <__aeabi_ddiv+0x46c>
 800130a:	2301      	movs	r3, #1
 800130c:	425b      	negs	r3, r3
 800130e:	469c      	mov	ip, r3
 8001310:	002e      	movs	r6, r5
 8001312:	4640      	mov	r0, r8
 8001314:	2500      	movs	r5, #0
 8001316:	44e3      	add	fp, ip
 8001318:	0223      	lsls	r3, r4, #8
 800131a:	0e14      	lsrs	r4, r2, #24
 800131c:	431c      	orrs	r4, r3
 800131e:	0c1b      	lsrs	r3, r3, #16
 8001320:	4699      	mov	r9, r3
 8001322:	0423      	lsls	r3, r4, #16
 8001324:	0c1f      	lsrs	r7, r3, #16
 8001326:	0212      	lsls	r2, r2, #8
 8001328:	4649      	mov	r1, r9
 800132a:	9200      	str	r2, [sp, #0]
 800132c:	9701      	str	r7, [sp, #4]
 800132e:	f7fe ff93 	bl	8000258 <__aeabi_uidivmod>
 8001332:	0002      	movs	r2, r0
 8001334:	437a      	muls	r2, r7
 8001336:	040b      	lsls	r3, r1, #16
 8001338:	0c31      	lsrs	r1, r6, #16
 800133a:	4680      	mov	r8, r0
 800133c:	4319      	orrs	r1, r3
 800133e:	428a      	cmp	r2, r1
 8001340:	d907      	bls.n	8001352 <__aeabi_ddiv+0x12e>
 8001342:	2301      	movs	r3, #1
 8001344:	425b      	negs	r3, r3
 8001346:	469c      	mov	ip, r3
 8001348:	1909      	adds	r1, r1, r4
 800134a:	44e0      	add	r8, ip
 800134c:	428c      	cmp	r4, r1
 800134e:	d800      	bhi.n	8001352 <__aeabi_ddiv+0x12e>
 8001350:	e207      	b.n	8001762 <__aeabi_ddiv+0x53e>
 8001352:	1a88      	subs	r0, r1, r2
 8001354:	4649      	mov	r1, r9
 8001356:	f7fe ff7f 	bl	8000258 <__aeabi_uidivmod>
 800135a:	0409      	lsls	r1, r1, #16
 800135c:	468c      	mov	ip, r1
 800135e:	0431      	lsls	r1, r6, #16
 8001360:	4666      	mov	r6, ip
 8001362:	9a01      	ldr	r2, [sp, #4]
 8001364:	0c09      	lsrs	r1, r1, #16
 8001366:	4342      	muls	r2, r0
 8001368:	0003      	movs	r3, r0
 800136a:	4331      	orrs	r1, r6
 800136c:	428a      	cmp	r2, r1
 800136e:	d904      	bls.n	800137a <__aeabi_ddiv+0x156>
 8001370:	1909      	adds	r1, r1, r4
 8001372:	3b01      	subs	r3, #1
 8001374:	428c      	cmp	r4, r1
 8001376:	d800      	bhi.n	800137a <__aeabi_ddiv+0x156>
 8001378:	e1ed      	b.n	8001756 <__aeabi_ddiv+0x532>
 800137a:	1a88      	subs	r0, r1, r2
 800137c:	4642      	mov	r2, r8
 800137e:	0412      	lsls	r2, r2, #16
 8001380:	431a      	orrs	r2, r3
 8001382:	4690      	mov	r8, r2
 8001384:	4641      	mov	r1, r8
 8001386:	9b00      	ldr	r3, [sp, #0]
 8001388:	040e      	lsls	r6, r1, #16
 800138a:	0c1b      	lsrs	r3, r3, #16
 800138c:	001f      	movs	r7, r3
 800138e:	9302      	str	r3, [sp, #8]
 8001390:	9b00      	ldr	r3, [sp, #0]
 8001392:	0c36      	lsrs	r6, r6, #16
 8001394:	041b      	lsls	r3, r3, #16
 8001396:	0c19      	lsrs	r1, r3, #16
 8001398:	000b      	movs	r3, r1
 800139a:	4373      	muls	r3, r6
 800139c:	0c12      	lsrs	r2, r2, #16
 800139e:	437e      	muls	r6, r7
 80013a0:	9103      	str	r1, [sp, #12]
 80013a2:	4351      	muls	r1, r2
 80013a4:	437a      	muls	r2, r7
 80013a6:	0c1f      	lsrs	r7, r3, #16
 80013a8:	46bc      	mov	ip, r7
 80013aa:	1876      	adds	r6, r6, r1
 80013ac:	4466      	add	r6, ip
 80013ae:	42b1      	cmp	r1, r6
 80013b0:	d903      	bls.n	80013ba <__aeabi_ddiv+0x196>
 80013b2:	2180      	movs	r1, #128	; 0x80
 80013b4:	0249      	lsls	r1, r1, #9
 80013b6:	468c      	mov	ip, r1
 80013b8:	4462      	add	r2, ip
 80013ba:	0c31      	lsrs	r1, r6, #16
 80013bc:	188a      	adds	r2, r1, r2
 80013be:	0431      	lsls	r1, r6, #16
 80013c0:	041e      	lsls	r6, r3, #16
 80013c2:	0c36      	lsrs	r6, r6, #16
 80013c4:	198e      	adds	r6, r1, r6
 80013c6:	4290      	cmp	r0, r2
 80013c8:	d302      	bcc.n	80013d0 <__aeabi_ddiv+0x1ac>
 80013ca:	d112      	bne.n	80013f2 <__aeabi_ddiv+0x1ce>
 80013cc:	42b5      	cmp	r5, r6
 80013ce:	d210      	bcs.n	80013f2 <__aeabi_ddiv+0x1ce>
 80013d0:	4643      	mov	r3, r8
 80013d2:	1e59      	subs	r1, r3, #1
 80013d4:	9b00      	ldr	r3, [sp, #0]
 80013d6:	469c      	mov	ip, r3
 80013d8:	4465      	add	r5, ip
 80013da:	001f      	movs	r7, r3
 80013dc:	429d      	cmp	r5, r3
 80013de:	419b      	sbcs	r3, r3
 80013e0:	425b      	negs	r3, r3
 80013e2:	191b      	adds	r3, r3, r4
 80013e4:	18c0      	adds	r0, r0, r3
 80013e6:	4284      	cmp	r4, r0
 80013e8:	d200      	bcs.n	80013ec <__aeabi_ddiv+0x1c8>
 80013ea:	e1a0      	b.n	800172e <__aeabi_ddiv+0x50a>
 80013ec:	d100      	bne.n	80013f0 <__aeabi_ddiv+0x1cc>
 80013ee:	e19b      	b.n	8001728 <__aeabi_ddiv+0x504>
 80013f0:	4688      	mov	r8, r1
 80013f2:	1bae      	subs	r6, r5, r6
 80013f4:	42b5      	cmp	r5, r6
 80013f6:	41ad      	sbcs	r5, r5
 80013f8:	1a80      	subs	r0, r0, r2
 80013fa:	426d      	negs	r5, r5
 80013fc:	1b40      	subs	r0, r0, r5
 80013fe:	4284      	cmp	r4, r0
 8001400:	d100      	bne.n	8001404 <__aeabi_ddiv+0x1e0>
 8001402:	e1d5      	b.n	80017b0 <__aeabi_ddiv+0x58c>
 8001404:	4649      	mov	r1, r9
 8001406:	f7fe ff27 	bl	8000258 <__aeabi_uidivmod>
 800140a:	9a01      	ldr	r2, [sp, #4]
 800140c:	040b      	lsls	r3, r1, #16
 800140e:	4342      	muls	r2, r0
 8001410:	0c31      	lsrs	r1, r6, #16
 8001412:	0005      	movs	r5, r0
 8001414:	4319      	orrs	r1, r3
 8001416:	428a      	cmp	r2, r1
 8001418:	d900      	bls.n	800141c <__aeabi_ddiv+0x1f8>
 800141a:	e16c      	b.n	80016f6 <__aeabi_ddiv+0x4d2>
 800141c:	1a88      	subs	r0, r1, r2
 800141e:	4649      	mov	r1, r9
 8001420:	f7fe ff1a 	bl	8000258 <__aeabi_uidivmod>
 8001424:	9a01      	ldr	r2, [sp, #4]
 8001426:	0436      	lsls	r6, r6, #16
 8001428:	4342      	muls	r2, r0
 800142a:	0409      	lsls	r1, r1, #16
 800142c:	0c36      	lsrs	r6, r6, #16
 800142e:	0003      	movs	r3, r0
 8001430:	430e      	orrs	r6, r1
 8001432:	42b2      	cmp	r2, r6
 8001434:	d900      	bls.n	8001438 <__aeabi_ddiv+0x214>
 8001436:	e153      	b.n	80016e0 <__aeabi_ddiv+0x4bc>
 8001438:	9803      	ldr	r0, [sp, #12]
 800143a:	1ab6      	subs	r6, r6, r2
 800143c:	0002      	movs	r2, r0
 800143e:	042d      	lsls	r5, r5, #16
 8001440:	431d      	orrs	r5, r3
 8001442:	9f02      	ldr	r7, [sp, #8]
 8001444:	042b      	lsls	r3, r5, #16
 8001446:	0c1b      	lsrs	r3, r3, #16
 8001448:	435a      	muls	r2, r3
 800144a:	437b      	muls	r3, r7
 800144c:	469c      	mov	ip, r3
 800144e:	0c29      	lsrs	r1, r5, #16
 8001450:	4348      	muls	r0, r1
 8001452:	0c13      	lsrs	r3, r2, #16
 8001454:	4484      	add	ip, r0
 8001456:	4463      	add	r3, ip
 8001458:	4379      	muls	r1, r7
 800145a:	4298      	cmp	r0, r3
 800145c:	d903      	bls.n	8001466 <__aeabi_ddiv+0x242>
 800145e:	2080      	movs	r0, #128	; 0x80
 8001460:	0240      	lsls	r0, r0, #9
 8001462:	4684      	mov	ip, r0
 8001464:	4461      	add	r1, ip
 8001466:	0c18      	lsrs	r0, r3, #16
 8001468:	0412      	lsls	r2, r2, #16
 800146a:	041b      	lsls	r3, r3, #16
 800146c:	0c12      	lsrs	r2, r2, #16
 800146e:	1841      	adds	r1, r0, r1
 8001470:	189b      	adds	r3, r3, r2
 8001472:	428e      	cmp	r6, r1
 8001474:	d200      	bcs.n	8001478 <__aeabi_ddiv+0x254>
 8001476:	e0ff      	b.n	8001678 <__aeabi_ddiv+0x454>
 8001478:	d100      	bne.n	800147c <__aeabi_ddiv+0x258>
 800147a:	e0fa      	b.n	8001672 <__aeabi_ddiv+0x44e>
 800147c:	2301      	movs	r3, #1
 800147e:	431d      	orrs	r5, r3
 8001480:	4a49      	ldr	r2, [pc, #292]	; (80015a8 <__aeabi_ddiv+0x384>)
 8001482:	445a      	add	r2, fp
 8001484:	2a00      	cmp	r2, #0
 8001486:	dc00      	bgt.n	800148a <__aeabi_ddiv+0x266>
 8001488:	e0aa      	b.n	80015e0 <__aeabi_ddiv+0x3bc>
 800148a:	076b      	lsls	r3, r5, #29
 800148c:	d000      	beq.n	8001490 <__aeabi_ddiv+0x26c>
 800148e:	e13d      	b.n	800170c <__aeabi_ddiv+0x4e8>
 8001490:	08ed      	lsrs	r5, r5, #3
 8001492:	4643      	mov	r3, r8
 8001494:	01db      	lsls	r3, r3, #7
 8001496:	d506      	bpl.n	80014a6 <__aeabi_ddiv+0x282>
 8001498:	4642      	mov	r2, r8
 800149a:	4b44      	ldr	r3, [pc, #272]	; (80015ac <__aeabi_ddiv+0x388>)
 800149c:	401a      	ands	r2, r3
 800149e:	4690      	mov	r8, r2
 80014a0:	2280      	movs	r2, #128	; 0x80
 80014a2:	00d2      	lsls	r2, r2, #3
 80014a4:	445a      	add	r2, fp
 80014a6:	4b42      	ldr	r3, [pc, #264]	; (80015b0 <__aeabi_ddiv+0x38c>)
 80014a8:	429a      	cmp	r2, r3
 80014aa:	dd00      	ble.n	80014ae <__aeabi_ddiv+0x28a>
 80014ac:	e71f      	b.n	80012ee <__aeabi_ddiv+0xca>
 80014ae:	4643      	mov	r3, r8
 80014b0:	075b      	lsls	r3, r3, #29
 80014b2:	431d      	orrs	r5, r3
 80014b4:	4643      	mov	r3, r8
 80014b6:	0552      	lsls	r2, r2, #21
 80014b8:	025c      	lsls	r4, r3, #9
 80014ba:	0b24      	lsrs	r4, r4, #12
 80014bc:	0d53      	lsrs	r3, r2, #21
 80014be:	e708      	b.n	80012d2 <__aeabi_ddiv+0xae>
 80014c0:	4652      	mov	r2, sl
 80014c2:	4322      	orrs	r2, r4
 80014c4:	d100      	bne.n	80014c8 <__aeabi_ddiv+0x2a4>
 80014c6:	e07b      	b.n	80015c0 <__aeabi_ddiv+0x39c>
 80014c8:	2c00      	cmp	r4, #0
 80014ca:	d100      	bne.n	80014ce <__aeabi_ddiv+0x2aa>
 80014cc:	e0fa      	b.n	80016c4 <__aeabi_ddiv+0x4a0>
 80014ce:	0020      	movs	r0, r4
 80014d0:	f001 fa22 	bl	8002918 <__clzsi2>
 80014d4:	0002      	movs	r2, r0
 80014d6:	3a0b      	subs	r2, #11
 80014d8:	231d      	movs	r3, #29
 80014da:	0001      	movs	r1, r0
 80014dc:	1a9b      	subs	r3, r3, r2
 80014de:	4652      	mov	r2, sl
 80014e0:	3908      	subs	r1, #8
 80014e2:	40da      	lsrs	r2, r3
 80014e4:	408c      	lsls	r4, r1
 80014e6:	4314      	orrs	r4, r2
 80014e8:	4652      	mov	r2, sl
 80014ea:	408a      	lsls	r2, r1
 80014ec:	4b31      	ldr	r3, [pc, #196]	; (80015b4 <__aeabi_ddiv+0x390>)
 80014ee:	4458      	add	r0, fp
 80014f0:	469b      	mov	fp, r3
 80014f2:	4483      	add	fp, r0
 80014f4:	2000      	movs	r0, #0
 80014f6:	e6d5      	b.n	80012a4 <__aeabi_ddiv+0x80>
 80014f8:	464b      	mov	r3, r9
 80014fa:	4323      	orrs	r3, r4
 80014fc:	4698      	mov	r8, r3
 80014fe:	d044      	beq.n	800158a <__aeabi_ddiv+0x366>
 8001500:	2c00      	cmp	r4, #0
 8001502:	d100      	bne.n	8001506 <__aeabi_ddiv+0x2e2>
 8001504:	e0ce      	b.n	80016a4 <__aeabi_ddiv+0x480>
 8001506:	0020      	movs	r0, r4
 8001508:	f001 fa06 	bl	8002918 <__clzsi2>
 800150c:	0001      	movs	r1, r0
 800150e:	0002      	movs	r2, r0
 8001510:	390b      	subs	r1, #11
 8001512:	231d      	movs	r3, #29
 8001514:	1a5b      	subs	r3, r3, r1
 8001516:	4649      	mov	r1, r9
 8001518:	0010      	movs	r0, r2
 800151a:	40d9      	lsrs	r1, r3
 800151c:	3808      	subs	r0, #8
 800151e:	4084      	lsls	r4, r0
 8001520:	000b      	movs	r3, r1
 8001522:	464d      	mov	r5, r9
 8001524:	4323      	orrs	r3, r4
 8001526:	4698      	mov	r8, r3
 8001528:	4085      	lsls	r5, r0
 800152a:	4823      	ldr	r0, [pc, #140]	; (80015b8 <__aeabi_ddiv+0x394>)
 800152c:	1a83      	subs	r3, r0, r2
 800152e:	469b      	mov	fp, r3
 8001530:	2300      	movs	r3, #0
 8001532:	4699      	mov	r9, r3
 8001534:	9300      	str	r3, [sp, #0]
 8001536:	e69a      	b.n	800126e <__aeabi_ddiv+0x4a>
 8001538:	464b      	mov	r3, r9
 800153a:	4323      	orrs	r3, r4
 800153c:	4698      	mov	r8, r3
 800153e:	d11d      	bne.n	800157c <__aeabi_ddiv+0x358>
 8001540:	2308      	movs	r3, #8
 8001542:	4699      	mov	r9, r3
 8001544:	3b06      	subs	r3, #6
 8001546:	2500      	movs	r5, #0
 8001548:	4683      	mov	fp, r0
 800154a:	9300      	str	r3, [sp, #0]
 800154c:	e68f      	b.n	800126e <__aeabi_ddiv+0x4a>
 800154e:	4652      	mov	r2, sl
 8001550:	4322      	orrs	r2, r4
 8001552:	d109      	bne.n	8001568 <__aeabi_ddiv+0x344>
 8001554:	2302      	movs	r3, #2
 8001556:	4649      	mov	r1, r9
 8001558:	4319      	orrs	r1, r3
 800155a:	4b18      	ldr	r3, [pc, #96]	; (80015bc <__aeabi_ddiv+0x398>)
 800155c:	4689      	mov	r9, r1
 800155e:	469c      	mov	ip, r3
 8001560:	2400      	movs	r4, #0
 8001562:	2002      	movs	r0, #2
 8001564:	44e3      	add	fp, ip
 8001566:	e69d      	b.n	80012a4 <__aeabi_ddiv+0x80>
 8001568:	2303      	movs	r3, #3
 800156a:	464a      	mov	r2, r9
 800156c:	431a      	orrs	r2, r3
 800156e:	4b13      	ldr	r3, [pc, #76]	; (80015bc <__aeabi_ddiv+0x398>)
 8001570:	4691      	mov	r9, r2
 8001572:	469c      	mov	ip, r3
 8001574:	4652      	mov	r2, sl
 8001576:	2003      	movs	r0, #3
 8001578:	44e3      	add	fp, ip
 800157a:	e693      	b.n	80012a4 <__aeabi_ddiv+0x80>
 800157c:	230c      	movs	r3, #12
 800157e:	4699      	mov	r9, r3
 8001580:	3b09      	subs	r3, #9
 8001582:	46a0      	mov	r8, r4
 8001584:	4683      	mov	fp, r0
 8001586:	9300      	str	r3, [sp, #0]
 8001588:	e671      	b.n	800126e <__aeabi_ddiv+0x4a>
 800158a:	2304      	movs	r3, #4
 800158c:	4699      	mov	r9, r3
 800158e:	2300      	movs	r3, #0
 8001590:	469b      	mov	fp, r3
 8001592:	3301      	adds	r3, #1
 8001594:	2500      	movs	r5, #0
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	e669      	b.n	800126e <__aeabi_ddiv+0x4a>
 800159a:	46c0      	nop			; (mov r8, r8)
 800159c:	000007ff 	.word	0x000007ff
 80015a0:	fffffc01 	.word	0xfffffc01
 80015a4:	080134f8 	.word	0x080134f8
 80015a8:	000003ff 	.word	0x000003ff
 80015ac:	feffffff 	.word	0xfeffffff
 80015b0:	000007fe 	.word	0x000007fe
 80015b4:	000003f3 	.word	0x000003f3
 80015b8:	fffffc0d 	.word	0xfffffc0d
 80015bc:	fffff801 	.word	0xfffff801
 80015c0:	4649      	mov	r1, r9
 80015c2:	2301      	movs	r3, #1
 80015c4:	4319      	orrs	r1, r3
 80015c6:	4689      	mov	r9, r1
 80015c8:	2400      	movs	r4, #0
 80015ca:	2001      	movs	r0, #1
 80015cc:	e66a      	b.n	80012a4 <__aeabi_ddiv+0x80>
 80015ce:	2300      	movs	r3, #0
 80015d0:	2480      	movs	r4, #128	; 0x80
 80015d2:	469a      	mov	sl, r3
 80015d4:	2500      	movs	r5, #0
 80015d6:	4b8a      	ldr	r3, [pc, #552]	; (8001800 <__aeabi_ddiv+0x5dc>)
 80015d8:	0324      	lsls	r4, r4, #12
 80015da:	e67a      	b.n	80012d2 <__aeabi_ddiv+0xae>
 80015dc:	2501      	movs	r5, #1
 80015de:	426d      	negs	r5, r5
 80015e0:	2301      	movs	r3, #1
 80015e2:	1a9b      	subs	r3, r3, r2
 80015e4:	2b38      	cmp	r3, #56	; 0x38
 80015e6:	dd00      	ble.n	80015ea <__aeabi_ddiv+0x3c6>
 80015e8:	e670      	b.n	80012cc <__aeabi_ddiv+0xa8>
 80015ea:	2b1f      	cmp	r3, #31
 80015ec:	dc00      	bgt.n	80015f0 <__aeabi_ddiv+0x3cc>
 80015ee:	e0bf      	b.n	8001770 <__aeabi_ddiv+0x54c>
 80015f0:	211f      	movs	r1, #31
 80015f2:	4249      	negs	r1, r1
 80015f4:	1a8a      	subs	r2, r1, r2
 80015f6:	4641      	mov	r1, r8
 80015f8:	40d1      	lsrs	r1, r2
 80015fa:	000a      	movs	r2, r1
 80015fc:	2b20      	cmp	r3, #32
 80015fe:	d004      	beq.n	800160a <__aeabi_ddiv+0x3e6>
 8001600:	4641      	mov	r1, r8
 8001602:	4b80      	ldr	r3, [pc, #512]	; (8001804 <__aeabi_ddiv+0x5e0>)
 8001604:	445b      	add	r3, fp
 8001606:	4099      	lsls	r1, r3
 8001608:	430d      	orrs	r5, r1
 800160a:	1e6b      	subs	r3, r5, #1
 800160c:	419d      	sbcs	r5, r3
 800160e:	2307      	movs	r3, #7
 8001610:	432a      	orrs	r2, r5
 8001612:	001d      	movs	r5, r3
 8001614:	2400      	movs	r4, #0
 8001616:	4015      	ands	r5, r2
 8001618:	4213      	tst	r3, r2
 800161a:	d100      	bne.n	800161e <__aeabi_ddiv+0x3fa>
 800161c:	e0d4      	b.n	80017c8 <__aeabi_ddiv+0x5a4>
 800161e:	210f      	movs	r1, #15
 8001620:	2300      	movs	r3, #0
 8001622:	4011      	ands	r1, r2
 8001624:	2904      	cmp	r1, #4
 8001626:	d100      	bne.n	800162a <__aeabi_ddiv+0x406>
 8001628:	e0cb      	b.n	80017c2 <__aeabi_ddiv+0x59e>
 800162a:	1d11      	adds	r1, r2, #4
 800162c:	4291      	cmp	r1, r2
 800162e:	4192      	sbcs	r2, r2
 8001630:	4252      	negs	r2, r2
 8001632:	189b      	adds	r3, r3, r2
 8001634:	000a      	movs	r2, r1
 8001636:	0219      	lsls	r1, r3, #8
 8001638:	d400      	bmi.n	800163c <__aeabi_ddiv+0x418>
 800163a:	e0c2      	b.n	80017c2 <__aeabi_ddiv+0x59e>
 800163c:	2301      	movs	r3, #1
 800163e:	2400      	movs	r4, #0
 8001640:	2500      	movs	r5, #0
 8001642:	e646      	b.n	80012d2 <__aeabi_ddiv+0xae>
 8001644:	2380      	movs	r3, #128	; 0x80
 8001646:	4641      	mov	r1, r8
 8001648:	031b      	lsls	r3, r3, #12
 800164a:	4219      	tst	r1, r3
 800164c:	d008      	beq.n	8001660 <__aeabi_ddiv+0x43c>
 800164e:	421c      	tst	r4, r3
 8001650:	d106      	bne.n	8001660 <__aeabi_ddiv+0x43c>
 8001652:	431c      	orrs	r4, r3
 8001654:	0324      	lsls	r4, r4, #12
 8001656:	46ba      	mov	sl, r7
 8001658:	0015      	movs	r5, r2
 800165a:	4b69      	ldr	r3, [pc, #420]	; (8001800 <__aeabi_ddiv+0x5dc>)
 800165c:	0b24      	lsrs	r4, r4, #12
 800165e:	e638      	b.n	80012d2 <__aeabi_ddiv+0xae>
 8001660:	2480      	movs	r4, #128	; 0x80
 8001662:	4643      	mov	r3, r8
 8001664:	0324      	lsls	r4, r4, #12
 8001666:	431c      	orrs	r4, r3
 8001668:	0324      	lsls	r4, r4, #12
 800166a:	46b2      	mov	sl, r6
 800166c:	4b64      	ldr	r3, [pc, #400]	; (8001800 <__aeabi_ddiv+0x5dc>)
 800166e:	0b24      	lsrs	r4, r4, #12
 8001670:	e62f      	b.n	80012d2 <__aeabi_ddiv+0xae>
 8001672:	2b00      	cmp	r3, #0
 8001674:	d100      	bne.n	8001678 <__aeabi_ddiv+0x454>
 8001676:	e703      	b.n	8001480 <__aeabi_ddiv+0x25c>
 8001678:	19a6      	adds	r6, r4, r6
 800167a:	1e68      	subs	r0, r5, #1
 800167c:	42a6      	cmp	r6, r4
 800167e:	d200      	bcs.n	8001682 <__aeabi_ddiv+0x45e>
 8001680:	e08d      	b.n	800179e <__aeabi_ddiv+0x57a>
 8001682:	428e      	cmp	r6, r1
 8001684:	d200      	bcs.n	8001688 <__aeabi_ddiv+0x464>
 8001686:	e0a3      	b.n	80017d0 <__aeabi_ddiv+0x5ac>
 8001688:	d100      	bne.n	800168c <__aeabi_ddiv+0x468>
 800168a:	e0b3      	b.n	80017f4 <__aeabi_ddiv+0x5d0>
 800168c:	0005      	movs	r5, r0
 800168e:	e6f5      	b.n	800147c <__aeabi_ddiv+0x258>
 8001690:	42aa      	cmp	r2, r5
 8001692:	d900      	bls.n	8001696 <__aeabi_ddiv+0x472>
 8001694:	e639      	b.n	800130a <__aeabi_ddiv+0xe6>
 8001696:	4643      	mov	r3, r8
 8001698:	07de      	lsls	r6, r3, #31
 800169a:	0858      	lsrs	r0, r3, #1
 800169c:	086b      	lsrs	r3, r5, #1
 800169e:	431e      	orrs	r6, r3
 80016a0:	07ed      	lsls	r5, r5, #31
 80016a2:	e639      	b.n	8001318 <__aeabi_ddiv+0xf4>
 80016a4:	4648      	mov	r0, r9
 80016a6:	f001 f937 	bl	8002918 <__clzsi2>
 80016aa:	0001      	movs	r1, r0
 80016ac:	0002      	movs	r2, r0
 80016ae:	3115      	adds	r1, #21
 80016b0:	3220      	adds	r2, #32
 80016b2:	291c      	cmp	r1, #28
 80016b4:	dc00      	bgt.n	80016b8 <__aeabi_ddiv+0x494>
 80016b6:	e72c      	b.n	8001512 <__aeabi_ddiv+0x2ee>
 80016b8:	464b      	mov	r3, r9
 80016ba:	3808      	subs	r0, #8
 80016bc:	4083      	lsls	r3, r0
 80016be:	2500      	movs	r5, #0
 80016c0:	4698      	mov	r8, r3
 80016c2:	e732      	b.n	800152a <__aeabi_ddiv+0x306>
 80016c4:	f001 f928 	bl	8002918 <__clzsi2>
 80016c8:	0003      	movs	r3, r0
 80016ca:	001a      	movs	r2, r3
 80016cc:	3215      	adds	r2, #21
 80016ce:	3020      	adds	r0, #32
 80016d0:	2a1c      	cmp	r2, #28
 80016d2:	dc00      	bgt.n	80016d6 <__aeabi_ddiv+0x4b2>
 80016d4:	e700      	b.n	80014d8 <__aeabi_ddiv+0x2b4>
 80016d6:	4654      	mov	r4, sl
 80016d8:	3b08      	subs	r3, #8
 80016da:	2200      	movs	r2, #0
 80016dc:	409c      	lsls	r4, r3
 80016de:	e705      	b.n	80014ec <__aeabi_ddiv+0x2c8>
 80016e0:	1936      	adds	r6, r6, r4
 80016e2:	3b01      	subs	r3, #1
 80016e4:	42b4      	cmp	r4, r6
 80016e6:	d900      	bls.n	80016ea <__aeabi_ddiv+0x4c6>
 80016e8:	e6a6      	b.n	8001438 <__aeabi_ddiv+0x214>
 80016ea:	42b2      	cmp	r2, r6
 80016ec:	d800      	bhi.n	80016f0 <__aeabi_ddiv+0x4cc>
 80016ee:	e6a3      	b.n	8001438 <__aeabi_ddiv+0x214>
 80016f0:	1e83      	subs	r3, r0, #2
 80016f2:	1936      	adds	r6, r6, r4
 80016f4:	e6a0      	b.n	8001438 <__aeabi_ddiv+0x214>
 80016f6:	1909      	adds	r1, r1, r4
 80016f8:	3d01      	subs	r5, #1
 80016fa:	428c      	cmp	r4, r1
 80016fc:	d900      	bls.n	8001700 <__aeabi_ddiv+0x4dc>
 80016fe:	e68d      	b.n	800141c <__aeabi_ddiv+0x1f8>
 8001700:	428a      	cmp	r2, r1
 8001702:	d800      	bhi.n	8001706 <__aeabi_ddiv+0x4e2>
 8001704:	e68a      	b.n	800141c <__aeabi_ddiv+0x1f8>
 8001706:	1e85      	subs	r5, r0, #2
 8001708:	1909      	adds	r1, r1, r4
 800170a:	e687      	b.n	800141c <__aeabi_ddiv+0x1f8>
 800170c:	230f      	movs	r3, #15
 800170e:	402b      	ands	r3, r5
 8001710:	2b04      	cmp	r3, #4
 8001712:	d100      	bne.n	8001716 <__aeabi_ddiv+0x4f2>
 8001714:	e6bc      	b.n	8001490 <__aeabi_ddiv+0x26c>
 8001716:	2305      	movs	r3, #5
 8001718:	425b      	negs	r3, r3
 800171a:	42ab      	cmp	r3, r5
 800171c:	419b      	sbcs	r3, r3
 800171e:	3504      	adds	r5, #4
 8001720:	425b      	negs	r3, r3
 8001722:	08ed      	lsrs	r5, r5, #3
 8001724:	4498      	add	r8, r3
 8001726:	e6b4      	b.n	8001492 <__aeabi_ddiv+0x26e>
 8001728:	42af      	cmp	r7, r5
 800172a:	d900      	bls.n	800172e <__aeabi_ddiv+0x50a>
 800172c:	e660      	b.n	80013f0 <__aeabi_ddiv+0x1cc>
 800172e:	4282      	cmp	r2, r0
 8001730:	d804      	bhi.n	800173c <__aeabi_ddiv+0x518>
 8001732:	d000      	beq.n	8001736 <__aeabi_ddiv+0x512>
 8001734:	e65c      	b.n	80013f0 <__aeabi_ddiv+0x1cc>
 8001736:	42ae      	cmp	r6, r5
 8001738:	d800      	bhi.n	800173c <__aeabi_ddiv+0x518>
 800173a:	e659      	b.n	80013f0 <__aeabi_ddiv+0x1cc>
 800173c:	2302      	movs	r3, #2
 800173e:	425b      	negs	r3, r3
 8001740:	469c      	mov	ip, r3
 8001742:	9b00      	ldr	r3, [sp, #0]
 8001744:	44e0      	add	r8, ip
 8001746:	469c      	mov	ip, r3
 8001748:	4465      	add	r5, ip
 800174a:	429d      	cmp	r5, r3
 800174c:	419b      	sbcs	r3, r3
 800174e:	425b      	negs	r3, r3
 8001750:	191b      	adds	r3, r3, r4
 8001752:	18c0      	adds	r0, r0, r3
 8001754:	e64d      	b.n	80013f2 <__aeabi_ddiv+0x1ce>
 8001756:	428a      	cmp	r2, r1
 8001758:	d800      	bhi.n	800175c <__aeabi_ddiv+0x538>
 800175a:	e60e      	b.n	800137a <__aeabi_ddiv+0x156>
 800175c:	1e83      	subs	r3, r0, #2
 800175e:	1909      	adds	r1, r1, r4
 8001760:	e60b      	b.n	800137a <__aeabi_ddiv+0x156>
 8001762:	428a      	cmp	r2, r1
 8001764:	d800      	bhi.n	8001768 <__aeabi_ddiv+0x544>
 8001766:	e5f4      	b.n	8001352 <__aeabi_ddiv+0x12e>
 8001768:	1e83      	subs	r3, r0, #2
 800176a:	4698      	mov	r8, r3
 800176c:	1909      	adds	r1, r1, r4
 800176e:	e5f0      	b.n	8001352 <__aeabi_ddiv+0x12e>
 8001770:	4925      	ldr	r1, [pc, #148]	; (8001808 <__aeabi_ddiv+0x5e4>)
 8001772:	0028      	movs	r0, r5
 8001774:	4459      	add	r1, fp
 8001776:	408d      	lsls	r5, r1
 8001778:	4642      	mov	r2, r8
 800177a:	408a      	lsls	r2, r1
 800177c:	1e69      	subs	r1, r5, #1
 800177e:	418d      	sbcs	r5, r1
 8001780:	4641      	mov	r1, r8
 8001782:	40d8      	lsrs	r0, r3
 8001784:	40d9      	lsrs	r1, r3
 8001786:	4302      	orrs	r2, r0
 8001788:	432a      	orrs	r2, r5
 800178a:	000b      	movs	r3, r1
 800178c:	0751      	lsls	r1, r2, #29
 800178e:	d100      	bne.n	8001792 <__aeabi_ddiv+0x56e>
 8001790:	e751      	b.n	8001636 <__aeabi_ddiv+0x412>
 8001792:	210f      	movs	r1, #15
 8001794:	4011      	ands	r1, r2
 8001796:	2904      	cmp	r1, #4
 8001798:	d000      	beq.n	800179c <__aeabi_ddiv+0x578>
 800179a:	e746      	b.n	800162a <__aeabi_ddiv+0x406>
 800179c:	e74b      	b.n	8001636 <__aeabi_ddiv+0x412>
 800179e:	0005      	movs	r5, r0
 80017a0:	428e      	cmp	r6, r1
 80017a2:	d000      	beq.n	80017a6 <__aeabi_ddiv+0x582>
 80017a4:	e66a      	b.n	800147c <__aeabi_ddiv+0x258>
 80017a6:	9a00      	ldr	r2, [sp, #0]
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d000      	beq.n	80017ae <__aeabi_ddiv+0x58a>
 80017ac:	e666      	b.n	800147c <__aeabi_ddiv+0x258>
 80017ae:	e667      	b.n	8001480 <__aeabi_ddiv+0x25c>
 80017b0:	4a16      	ldr	r2, [pc, #88]	; (800180c <__aeabi_ddiv+0x5e8>)
 80017b2:	445a      	add	r2, fp
 80017b4:	2a00      	cmp	r2, #0
 80017b6:	dc00      	bgt.n	80017ba <__aeabi_ddiv+0x596>
 80017b8:	e710      	b.n	80015dc <__aeabi_ddiv+0x3b8>
 80017ba:	2301      	movs	r3, #1
 80017bc:	2500      	movs	r5, #0
 80017be:	4498      	add	r8, r3
 80017c0:	e667      	b.n	8001492 <__aeabi_ddiv+0x26e>
 80017c2:	075d      	lsls	r5, r3, #29
 80017c4:	025b      	lsls	r3, r3, #9
 80017c6:	0b1c      	lsrs	r4, r3, #12
 80017c8:	08d2      	lsrs	r2, r2, #3
 80017ca:	2300      	movs	r3, #0
 80017cc:	4315      	orrs	r5, r2
 80017ce:	e580      	b.n	80012d2 <__aeabi_ddiv+0xae>
 80017d0:	9800      	ldr	r0, [sp, #0]
 80017d2:	3d02      	subs	r5, #2
 80017d4:	0042      	lsls	r2, r0, #1
 80017d6:	4282      	cmp	r2, r0
 80017d8:	41bf      	sbcs	r7, r7
 80017da:	427f      	negs	r7, r7
 80017dc:	193c      	adds	r4, r7, r4
 80017de:	1936      	adds	r6, r6, r4
 80017e0:	9200      	str	r2, [sp, #0]
 80017e2:	e7dd      	b.n	80017a0 <__aeabi_ddiv+0x57c>
 80017e4:	2480      	movs	r4, #128	; 0x80
 80017e6:	4643      	mov	r3, r8
 80017e8:	0324      	lsls	r4, r4, #12
 80017ea:	431c      	orrs	r4, r3
 80017ec:	0324      	lsls	r4, r4, #12
 80017ee:	4b04      	ldr	r3, [pc, #16]	; (8001800 <__aeabi_ddiv+0x5dc>)
 80017f0:	0b24      	lsrs	r4, r4, #12
 80017f2:	e56e      	b.n	80012d2 <__aeabi_ddiv+0xae>
 80017f4:	9a00      	ldr	r2, [sp, #0]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d3ea      	bcc.n	80017d0 <__aeabi_ddiv+0x5ac>
 80017fa:	0005      	movs	r5, r0
 80017fc:	e7d3      	b.n	80017a6 <__aeabi_ddiv+0x582>
 80017fe:	46c0      	nop			; (mov r8, r8)
 8001800:	000007ff 	.word	0x000007ff
 8001804:	0000043e 	.word	0x0000043e
 8001808:	0000041e 	.word	0x0000041e
 800180c:	000003ff 	.word	0x000003ff

08001810 <__eqdf2>:
 8001810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001812:	464e      	mov	r6, r9
 8001814:	4645      	mov	r5, r8
 8001816:	46de      	mov	lr, fp
 8001818:	4657      	mov	r7, sl
 800181a:	4690      	mov	r8, r2
 800181c:	b5e0      	push	{r5, r6, r7, lr}
 800181e:	0017      	movs	r7, r2
 8001820:	031a      	lsls	r2, r3, #12
 8001822:	0b12      	lsrs	r2, r2, #12
 8001824:	0005      	movs	r5, r0
 8001826:	4684      	mov	ip, r0
 8001828:	4819      	ldr	r0, [pc, #100]	; (8001890 <__eqdf2+0x80>)
 800182a:	030e      	lsls	r6, r1, #12
 800182c:	004c      	lsls	r4, r1, #1
 800182e:	4691      	mov	r9, r2
 8001830:	005a      	lsls	r2, r3, #1
 8001832:	0fdb      	lsrs	r3, r3, #31
 8001834:	469b      	mov	fp, r3
 8001836:	0b36      	lsrs	r6, r6, #12
 8001838:	0d64      	lsrs	r4, r4, #21
 800183a:	0fc9      	lsrs	r1, r1, #31
 800183c:	0d52      	lsrs	r2, r2, #21
 800183e:	4284      	cmp	r4, r0
 8001840:	d019      	beq.n	8001876 <__eqdf2+0x66>
 8001842:	4282      	cmp	r2, r0
 8001844:	d010      	beq.n	8001868 <__eqdf2+0x58>
 8001846:	2001      	movs	r0, #1
 8001848:	4294      	cmp	r4, r2
 800184a:	d10e      	bne.n	800186a <__eqdf2+0x5a>
 800184c:	454e      	cmp	r6, r9
 800184e:	d10c      	bne.n	800186a <__eqdf2+0x5a>
 8001850:	2001      	movs	r0, #1
 8001852:	45c4      	cmp	ip, r8
 8001854:	d109      	bne.n	800186a <__eqdf2+0x5a>
 8001856:	4559      	cmp	r1, fp
 8001858:	d017      	beq.n	800188a <__eqdf2+0x7a>
 800185a:	2c00      	cmp	r4, #0
 800185c:	d105      	bne.n	800186a <__eqdf2+0x5a>
 800185e:	0030      	movs	r0, r6
 8001860:	4328      	orrs	r0, r5
 8001862:	1e43      	subs	r3, r0, #1
 8001864:	4198      	sbcs	r0, r3
 8001866:	e000      	b.n	800186a <__eqdf2+0x5a>
 8001868:	2001      	movs	r0, #1
 800186a:	bcf0      	pop	{r4, r5, r6, r7}
 800186c:	46bb      	mov	fp, r7
 800186e:	46b2      	mov	sl, r6
 8001870:	46a9      	mov	r9, r5
 8001872:	46a0      	mov	r8, r4
 8001874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001876:	0033      	movs	r3, r6
 8001878:	2001      	movs	r0, #1
 800187a:	432b      	orrs	r3, r5
 800187c:	d1f5      	bne.n	800186a <__eqdf2+0x5a>
 800187e:	42a2      	cmp	r2, r4
 8001880:	d1f3      	bne.n	800186a <__eqdf2+0x5a>
 8001882:	464b      	mov	r3, r9
 8001884:	433b      	orrs	r3, r7
 8001886:	d1f0      	bne.n	800186a <__eqdf2+0x5a>
 8001888:	e7e2      	b.n	8001850 <__eqdf2+0x40>
 800188a:	2000      	movs	r0, #0
 800188c:	e7ed      	b.n	800186a <__eqdf2+0x5a>
 800188e:	46c0      	nop			; (mov r8, r8)
 8001890:	000007ff 	.word	0x000007ff

08001894 <__gedf2>:
 8001894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001896:	4647      	mov	r7, r8
 8001898:	46ce      	mov	lr, r9
 800189a:	0004      	movs	r4, r0
 800189c:	0018      	movs	r0, r3
 800189e:	0016      	movs	r6, r2
 80018a0:	031b      	lsls	r3, r3, #12
 80018a2:	0b1b      	lsrs	r3, r3, #12
 80018a4:	4d2d      	ldr	r5, [pc, #180]	; (800195c <__gedf2+0xc8>)
 80018a6:	004a      	lsls	r2, r1, #1
 80018a8:	4699      	mov	r9, r3
 80018aa:	b580      	push	{r7, lr}
 80018ac:	0043      	lsls	r3, r0, #1
 80018ae:	030f      	lsls	r7, r1, #12
 80018b0:	46a4      	mov	ip, r4
 80018b2:	46b0      	mov	r8, r6
 80018b4:	0b3f      	lsrs	r7, r7, #12
 80018b6:	0d52      	lsrs	r2, r2, #21
 80018b8:	0fc9      	lsrs	r1, r1, #31
 80018ba:	0d5b      	lsrs	r3, r3, #21
 80018bc:	0fc0      	lsrs	r0, r0, #31
 80018be:	42aa      	cmp	r2, r5
 80018c0:	d021      	beq.n	8001906 <__gedf2+0x72>
 80018c2:	42ab      	cmp	r3, r5
 80018c4:	d013      	beq.n	80018ee <__gedf2+0x5a>
 80018c6:	2a00      	cmp	r2, #0
 80018c8:	d122      	bne.n	8001910 <__gedf2+0x7c>
 80018ca:	433c      	orrs	r4, r7
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d102      	bne.n	80018d6 <__gedf2+0x42>
 80018d0:	464d      	mov	r5, r9
 80018d2:	432e      	orrs	r6, r5
 80018d4:	d022      	beq.n	800191c <__gedf2+0x88>
 80018d6:	2c00      	cmp	r4, #0
 80018d8:	d010      	beq.n	80018fc <__gedf2+0x68>
 80018da:	4281      	cmp	r1, r0
 80018dc:	d022      	beq.n	8001924 <__gedf2+0x90>
 80018de:	2002      	movs	r0, #2
 80018e0:	3901      	subs	r1, #1
 80018e2:	4008      	ands	r0, r1
 80018e4:	3801      	subs	r0, #1
 80018e6:	bcc0      	pop	{r6, r7}
 80018e8:	46b9      	mov	r9, r7
 80018ea:	46b0      	mov	r8, r6
 80018ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018ee:	464d      	mov	r5, r9
 80018f0:	432e      	orrs	r6, r5
 80018f2:	d129      	bne.n	8001948 <__gedf2+0xb4>
 80018f4:	2a00      	cmp	r2, #0
 80018f6:	d1f0      	bne.n	80018da <__gedf2+0x46>
 80018f8:	433c      	orrs	r4, r7
 80018fa:	d1ee      	bne.n	80018da <__gedf2+0x46>
 80018fc:	2800      	cmp	r0, #0
 80018fe:	d1f2      	bne.n	80018e6 <__gedf2+0x52>
 8001900:	2001      	movs	r0, #1
 8001902:	4240      	negs	r0, r0
 8001904:	e7ef      	b.n	80018e6 <__gedf2+0x52>
 8001906:	003d      	movs	r5, r7
 8001908:	4325      	orrs	r5, r4
 800190a:	d11d      	bne.n	8001948 <__gedf2+0xb4>
 800190c:	4293      	cmp	r3, r2
 800190e:	d0ee      	beq.n	80018ee <__gedf2+0x5a>
 8001910:	2b00      	cmp	r3, #0
 8001912:	d1e2      	bne.n	80018da <__gedf2+0x46>
 8001914:	464c      	mov	r4, r9
 8001916:	4326      	orrs	r6, r4
 8001918:	d1df      	bne.n	80018da <__gedf2+0x46>
 800191a:	e7e0      	b.n	80018de <__gedf2+0x4a>
 800191c:	2000      	movs	r0, #0
 800191e:	2c00      	cmp	r4, #0
 8001920:	d0e1      	beq.n	80018e6 <__gedf2+0x52>
 8001922:	e7dc      	b.n	80018de <__gedf2+0x4a>
 8001924:	429a      	cmp	r2, r3
 8001926:	dc0a      	bgt.n	800193e <__gedf2+0xaa>
 8001928:	dbe8      	blt.n	80018fc <__gedf2+0x68>
 800192a:	454f      	cmp	r7, r9
 800192c:	d8d7      	bhi.n	80018de <__gedf2+0x4a>
 800192e:	d00e      	beq.n	800194e <__gedf2+0xba>
 8001930:	2000      	movs	r0, #0
 8001932:	454f      	cmp	r7, r9
 8001934:	d2d7      	bcs.n	80018e6 <__gedf2+0x52>
 8001936:	2900      	cmp	r1, #0
 8001938:	d0e2      	beq.n	8001900 <__gedf2+0x6c>
 800193a:	0008      	movs	r0, r1
 800193c:	e7d3      	b.n	80018e6 <__gedf2+0x52>
 800193e:	4243      	negs	r3, r0
 8001940:	4158      	adcs	r0, r3
 8001942:	0040      	lsls	r0, r0, #1
 8001944:	3801      	subs	r0, #1
 8001946:	e7ce      	b.n	80018e6 <__gedf2+0x52>
 8001948:	2002      	movs	r0, #2
 800194a:	4240      	negs	r0, r0
 800194c:	e7cb      	b.n	80018e6 <__gedf2+0x52>
 800194e:	45c4      	cmp	ip, r8
 8001950:	d8c5      	bhi.n	80018de <__gedf2+0x4a>
 8001952:	2000      	movs	r0, #0
 8001954:	45c4      	cmp	ip, r8
 8001956:	d2c6      	bcs.n	80018e6 <__gedf2+0x52>
 8001958:	e7ed      	b.n	8001936 <__gedf2+0xa2>
 800195a:	46c0      	nop			; (mov r8, r8)
 800195c:	000007ff 	.word	0x000007ff

08001960 <__ledf2>:
 8001960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001962:	4647      	mov	r7, r8
 8001964:	46ce      	mov	lr, r9
 8001966:	0004      	movs	r4, r0
 8001968:	0018      	movs	r0, r3
 800196a:	0016      	movs	r6, r2
 800196c:	031b      	lsls	r3, r3, #12
 800196e:	0b1b      	lsrs	r3, r3, #12
 8001970:	4d2c      	ldr	r5, [pc, #176]	; (8001a24 <__ledf2+0xc4>)
 8001972:	004a      	lsls	r2, r1, #1
 8001974:	4699      	mov	r9, r3
 8001976:	b580      	push	{r7, lr}
 8001978:	0043      	lsls	r3, r0, #1
 800197a:	030f      	lsls	r7, r1, #12
 800197c:	46a4      	mov	ip, r4
 800197e:	46b0      	mov	r8, r6
 8001980:	0b3f      	lsrs	r7, r7, #12
 8001982:	0d52      	lsrs	r2, r2, #21
 8001984:	0fc9      	lsrs	r1, r1, #31
 8001986:	0d5b      	lsrs	r3, r3, #21
 8001988:	0fc0      	lsrs	r0, r0, #31
 800198a:	42aa      	cmp	r2, r5
 800198c:	d00d      	beq.n	80019aa <__ledf2+0x4a>
 800198e:	42ab      	cmp	r3, r5
 8001990:	d010      	beq.n	80019b4 <__ledf2+0x54>
 8001992:	2a00      	cmp	r2, #0
 8001994:	d127      	bne.n	80019e6 <__ledf2+0x86>
 8001996:	433c      	orrs	r4, r7
 8001998:	2b00      	cmp	r3, #0
 800199a:	d111      	bne.n	80019c0 <__ledf2+0x60>
 800199c:	464d      	mov	r5, r9
 800199e:	432e      	orrs	r6, r5
 80019a0:	d10e      	bne.n	80019c0 <__ledf2+0x60>
 80019a2:	2000      	movs	r0, #0
 80019a4:	2c00      	cmp	r4, #0
 80019a6:	d015      	beq.n	80019d4 <__ledf2+0x74>
 80019a8:	e00e      	b.n	80019c8 <__ledf2+0x68>
 80019aa:	003d      	movs	r5, r7
 80019ac:	4325      	orrs	r5, r4
 80019ae:	d110      	bne.n	80019d2 <__ledf2+0x72>
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d118      	bne.n	80019e6 <__ledf2+0x86>
 80019b4:	464d      	mov	r5, r9
 80019b6:	432e      	orrs	r6, r5
 80019b8:	d10b      	bne.n	80019d2 <__ledf2+0x72>
 80019ba:	2a00      	cmp	r2, #0
 80019bc:	d102      	bne.n	80019c4 <__ledf2+0x64>
 80019be:	433c      	orrs	r4, r7
 80019c0:	2c00      	cmp	r4, #0
 80019c2:	d00b      	beq.n	80019dc <__ledf2+0x7c>
 80019c4:	4281      	cmp	r1, r0
 80019c6:	d014      	beq.n	80019f2 <__ledf2+0x92>
 80019c8:	2002      	movs	r0, #2
 80019ca:	3901      	subs	r1, #1
 80019cc:	4008      	ands	r0, r1
 80019ce:	3801      	subs	r0, #1
 80019d0:	e000      	b.n	80019d4 <__ledf2+0x74>
 80019d2:	2002      	movs	r0, #2
 80019d4:	bcc0      	pop	{r6, r7}
 80019d6:	46b9      	mov	r9, r7
 80019d8:	46b0      	mov	r8, r6
 80019da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019dc:	2800      	cmp	r0, #0
 80019de:	d1f9      	bne.n	80019d4 <__ledf2+0x74>
 80019e0:	2001      	movs	r0, #1
 80019e2:	4240      	negs	r0, r0
 80019e4:	e7f6      	b.n	80019d4 <__ledf2+0x74>
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1ec      	bne.n	80019c4 <__ledf2+0x64>
 80019ea:	464c      	mov	r4, r9
 80019ec:	4326      	orrs	r6, r4
 80019ee:	d1e9      	bne.n	80019c4 <__ledf2+0x64>
 80019f0:	e7ea      	b.n	80019c8 <__ledf2+0x68>
 80019f2:	429a      	cmp	r2, r3
 80019f4:	dd04      	ble.n	8001a00 <__ledf2+0xa0>
 80019f6:	4243      	negs	r3, r0
 80019f8:	4158      	adcs	r0, r3
 80019fa:	0040      	lsls	r0, r0, #1
 80019fc:	3801      	subs	r0, #1
 80019fe:	e7e9      	b.n	80019d4 <__ledf2+0x74>
 8001a00:	429a      	cmp	r2, r3
 8001a02:	dbeb      	blt.n	80019dc <__ledf2+0x7c>
 8001a04:	454f      	cmp	r7, r9
 8001a06:	d8df      	bhi.n	80019c8 <__ledf2+0x68>
 8001a08:	d006      	beq.n	8001a18 <__ledf2+0xb8>
 8001a0a:	2000      	movs	r0, #0
 8001a0c:	454f      	cmp	r7, r9
 8001a0e:	d2e1      	bcs.n	80019d4 <__ledf2+0x74>
 8001a10:	2900      	cmp	r1, #0
 8001a12:	d0e5      	beq.n	80019e0 <__ledf2+0x80>
 8001a14:	0008      	movs	r0, r1
 8001a16:	e7dd      	b.n	80019d4 <__ledf2+0x74>
 8001a18:	45c4      	cmp	ip, r8
 8001a1a:	d8d5      	bhi.n	80019c8 <__ledf2+0x68>
 8001a1c:	2000      	movs	r0, #0
 8001a1e:	45c4      	cmp	ip, r8
 8001a20:	d2d8      	bcs.n	80019d4 <__ledf2+0x74>
 8001a22:	e7f5      	b.n	8001a10 <__ledf2+0xb0>
 8001a24:	000007ff 	.word	0x000007ff

08001a28 <__aeabi_dmul>:
 8001a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a2a:	4657      	mov	r7, sl
 8001a2c:	464e      	mov	r6, r9
 8001a2e:	4645      	mov	r5, r8
 8001a30:	46de      	mov	lr, fp
 8001a32:	b5e0      	push	{r5, r6, r7, lr}
 8001a34:	4698      	mov	r8, r3
 8001a36:	030c      	lsls	r4, r1, #12
 8001a38:	004b      	lsls	r3, r1, #1
 8001a3a:	0006      	movs	r6, r0
 8001a3c:	4692      	mov	sl, r2
 8001a3e:	b087      	sub	sp, #28
 8001a40:	0b24      	lsrs	r4, r4, #12
 8001a42:	0d5b      	lsrs	r3, r3, #21
 8001a44:	0fcf      	lsrs	r7, r1, #31
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d100      	bne.n	8001a4c <__aeabi_dmul+0x24>
 8001a4a:	e15c      	b.n	8001d06 <__aeabi_dmul+0x2de>
 8001a4c:	4ad9      	ldr	r2, [pc, #868]	; (8001db4 <__aeabi_dmul+0x38c>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d100      	bne.n	8001a54 <__aeabi_dmul+0x2c>
 8001a52:	e175      	b.n	8001d40 <__aeabi_dmul+0x318>
 8001a54:	0f42      	lsrs	r2, r0, #29
 8001a56:	00e4      	lsls	r4, r4, #3
 8001a58:	4314      	orrs	r4, r2
 8001a5a:	2280      	movs	r2, #128	; 0x80
 8001a5c:	0412      	lsls	r2, r2, #16
 8001a5e:	4314      	orrs	r4, r2
 8001a60:	4ad5      	ldr	r2, [pc, #852]	; (8001db8 <__aeabi_dmul+0x390>)
 8001a62:	00c5      	lsls	r5, r0, #3
 8001a64:	4694      	mov	ip, r2
 8001a66:	4463      	add	r3, ip
 8001a68:	9300      	str	r3, [sp, #0]
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	4699      	mov	r9, r3
 8001a6e:	469b      	mov	fp, r3
 8001a70:	4643      	mov	r3, r8
 8001a72:	4642      	mov	r2, r8
 8001a74:	031e      	lsls	r6, r3, #12
 8001a76:	0fd2      	lsrs	r2, r2, #31
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	4650      	mov	r0, sl
 8001a7c:	4690      	mov	r8, r2
 8001a7e:	0b36      	lsrs	r6, r6, #12
 8001a80:	0d5b      	lsrs	r3, r3, #21
 8001a82:	d100      	bne.n	8001a86 <__aeabi_dmul+0x5e>
 8001a84:	e120      	b.n	8001cc8 <__aeabi_dmul+0x2a0>
 8001a86:	4acb      	ldr	r2, [pc, #812]	; (8001db4 <__aeabi_dmul+0x38c>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d100      	bne.n	8001a8e <__aeabi_dmul+0x66>
 8001a8c:	e162      	b.n	8001d54 <__aeabi_dmul+0x32c>
 8001a8e:	49ca      	ldr	r1, [pc, #808]	; (8001db8 <__aeabi_dmul+0x390>)
 8001a90:	0f42      	lsrs	r2, r0, #29
 8001a92:	468c      	mov	ip, r1
 8001a94:	9900      	ldr	r1, [sp, #0]
 8001a96:	4463      	add	r3, ip
 8001a98:	00f6      	lsls	r6, r6, #3
 8001a9a:	468c      	mov	ip, r1
 8001a9c:	4316      	orrs	r6, r2
 8001a9e:	2280      	movs	r2, #128	; 0x80
 8001aa0:	449c      	add	ip, r3
 8001aa2:	0412      	lsls	r2, r2, #16
 8001aa4:	4663      	mov	r3, ip
 8001aa6:	4316      	orrs	r6, r2
 8001aa8:	00c2      	lsls	r2, r0, #3
 8001aaa:	2000      	movs	r0, #0
 8001aac:	9300      	str	r3, [sp, #0]
 8001aae:	9900      	ldr	r1, [sp, #0]
 8001ab0:	4643      	mov	r3, r8
 8001ab2:	3101      	adds	r1, #1
 8001ab4:	468c      	mov	ip, r1
 8001ab6:	4649      	mov	r1, r9
 8001ab8:	407b      	eors	r3, r7
 8001aba:	9301      	str	r3, [sp, #4]
 8001abc:	290f      	cmp	r1, #15
 8001abe:	d826      	bhi.n	8001b0e <__aeabi_dmul+0xe6>
 8001ac0:	4bbe      	ldr	r3, [pc, #760]	; (8001dbc <__aeabi_dmul+0x394>)
 8001ac2:	0089      	lsls	r1, r1, #2
 8001ac4:	5859      	ldr	r1, [r3, r1]
 8001ac6:	468f      	mov	pc, r1
 8001ac8:	4643      	mov	r3, r8
 8001aca:	9301      	str	r3, [sp, #4]
 8001acc:	0034      	movs	r4, r6
 8001ace:	0015      	movs	r5, r2
 8001ad0:	4683      	mov	fp, r0
 8001ad2:	465b      	mov	r3, fp
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d016      	beq.n	8001b06 <__aeabi_dmul+0xde>
 8001ad8:	2b03      	cmp	r3, #3
 8001ada:	d100      	bne.n	8001ade <__aeabi_dmul+0xb6>
 8001adc:	e203      	b.n	8001ee6 <__aeabi_dmul+0x4be>
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d000      	beq.n	8001ae4 <__aeabi_dmul+0xbc>
 8001ae2:	e0cd      	b.n	8001c80 <__aeabi_dmul+0x258>
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	2400      	movs	r4, #0
 8001ae8:	2500      	movs	r5, #0
 8001aea:	9b01      	ldr	r3, [sp, #4]
 8001aec:	0512      	lsls	r2, r2, #20
 8001aee:	4322      	orrs	r2, r4
 8001af0:	07db      	lsls	r3, r3, #31
 8001af2:	431a      	orrs	r2, r3
 8001af4:	0028      	movs	r0, r5
 8001af6:	0011      	movs	r1, r2
 8001af8:	b007      	add	sp, #28
 8001afa:	bcf0      	pop	{r4, r5, r6, r7}
 8001afc:	46bb      	mov	fp, r7
 8001afe:	46b2      	mov	sl, r6
 8001b00:	46a9      	mov	r9, r5
 8001b02:	46a0      	mov	r8, r4
 8001b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b06:	2400      	movs	r4, #0
 8001b08:	2500      	movs	r5, #0
 8001b0a:	4aaa      	ldr	r2, [pc, #680]	; (8001db4 <__aeabi_dmul+0x38c>)
 8001b0c:	e7ed      	b.n	8001aea <__aeabi_dmul+0xc2>
 8001b0e:	0c28      	lsrs	r0, r5, #16
 8001b10:	042d      	lsls	r5, r5, #16
 8001b12:	0c2d      	lsrs	r5, r5, #16
 8001b14:	002b      	movs	r3, r5
 8001b16:	0c11      	lsrs	r1, r2, #16
 8001b18:	0412      	lsls	r2, r2, #16
 8001b1a:	0c12      	lsrs	r2, r2, #16
 8001b1c:	4353      	muls	r3, r2
 8001b1e:	4698      	mov	r8, r3
 8001b20:	0013      	movs	r3, r2
 8001b22:	002f      	movs	r7, r5
 8001b24:	4343      	muls	r3, r0
 8001b26:	4699      	mov	r9, r3
 8001b28:	434f      	muls	r7, r1
 8001b2a:	444f      	add	r7, r9
 8001b2c:	46bb      	mov	fp, r7
 8001b2e:	4647      	mov	r7, r8
 8001b30:	000b      	movs	r3, r1
 8001b32:	0c3f      	lsrs	r7, r7, #16
 8001b34:	46ba      	mov	sl, r7
 8001b36:	4343      	muls	r3, r0
 8001b38:	44da      	add	sl, fp
 8001b3a:	9302      	str	r3, [sp, #8]
 8001b3c:	45d1      	cmp	r9, sl
 8001b3e:	d904      	bls.n	8001b4a <__aeabi_dmul+0x122>
 8001b40:	2780      	movs	r7, #128	; 0x80
 8001b42:	027f      	lsls	r7, r7, #9
 8001b44:	46b9      	mov	r9, r7
 8001b46:	444b      	add	r3, r9
 8001b48:	9302      	str	r3, [sp, #8]
 8001b4a:	4653      	mov	r3, sl
 8001b4c:	0c1b      	lsrs	r3, r3, #16
 8001b4e:	469b      	mov	fp, r3
 8001b50:	4653      	mov	r3, sl
 8001b52:	041f      	lsls	r7, r3, #16
 8001b54:	4643      	mov	r3, r8
 8001b56:	041b      	lsls	r3, r3, #16
 8001b58:	0c1b      	lsrs	r3, r3, #16
 8001b5a:	4698      	mov	r8, r3
 8001b5c:	003b      	movs	r3, r7
 8001b5e:	4443      	add	r3, r8
 8001b60:	9304      	str	r3, [sp, #16]
 8001b62:	0c33      	lsrs	r3, r6, #16
 8001b64:	0436      	lsls	r6, r6, #16
 8001b66:	0c36      	lsrs	r6, r6, #16
 8001b68:	4698      	mov	r8, r3
 8001b6a:	0033      	movs	r3, r6
 8001b6c:	4343      	muls	r3, r0
 8001b6e:	4699      	mov	r9, r3
 8001b70:	4643      	mov	r3, r8
 8001b72:	4343      	muls	r3, r0
 8001b74:	002f      	movs	r7, r5
 8001b76:	469a      	mov	sl, r3
 8001b78:	4643      	mov	r3, r8
 8001b7a:	4377      	muls	r7, r6
 8001b7c:	435d      	muls	r5, r3
 8001b7e:	0c38      	lsrs	r0, r7, #16
 8001b80:	444d      	add	r5, r9
 8001b82:	1945      	adds	r5, r0, r5
 8001b84:	45a9      	cmp	r9, r5
 8001b86:	d903      	bls.n	8001b90 <__aeabi_dmul+0x168>
 8001b88:	2380      	movs	r3, #128	; 0x80
 8001b8a:	025b      	lsls	r3, r3, #9
 8001b8c:	4699      	mov	r9, r3
 8001b8e:	44ca      	add	sl, r9
 8001b90:	043f      	lsls	r7, r7, #16
 8001b92:	0c28      	lsrs	r0, r5, #16
 8001b94:	0c3f      	lsrs	r7, r7, #16
 8001b96:	042d      	lsls	r5, r5, #16
 8001b98:	19ed      	adds	r5, r5, r7
 8001b9a:	0c27      	lsrs	r7, r4, #16
 8001b9c:	0424      	lsls	r4, r4, #16
 8001b9e:	0c24      	lsrs	r4, r4, #16
 8001ba0:	0003      	movs	r3, r0
 8001ba2:	0020      	movs	r0, r4
 8001ba4:	4350      	muls	r0, r2
 8001ba6:	437a      	muls	r2, r7
 8001ba8:	4691      	mov	r9, r2
 8001baa:	003a      	movs	r2, r7
 8001bac:	4453      	add	r3, sl
 8001bae:	9305      	str	r3, [sp, #20]
 8001bb0:	0c03      	lsrs	r3, r0, #16
 8001bb2:	469a      	mov	sl, r3
 8001bb4:	434a      	muls	r2, r1
 8001bb6:	4361      	muls	r1, r4
 8001bb8:	4449      	add	r1, r9
 8001bba:	4451      	add	r1, sl
 8001bbc:	44ab      	add	fp, r5
 8001bbe:	4589      	cmp	r9, r1
 8001bc0:	d903      	bls.n	8001bca <__aeabi_dmul+0x1a2>
 8001bc2:	2380      	movs	r3, #128	; 0x80
 8001bc4:	025b      	lsls	r3, r3, #9
 8001bc6:	4699      	mov	r9, r3
 8001bc8:	444a      	add	r2, r9
 8001bca:	0400      	lsls	r0, r0, #16
 8001bcc:	0c0b      	lsrs	r3, r1, #16
 8001bce:	0c00      	lsrs	r0, r0, #16
 8001bd0:	0409      	lsls	r1, r1, #16
 8001bd2:	1809      	adds	r1, r1, r0
 8001bd4:	0020      	movs	r0, r4
 8001bd6:	4699      	mov	r9, r3
 8001bd8:	4643      	mov	r3, r8
 8001bda:	4370      	muls	r0, r6
 8001bdc:	435c      	muls	r4, r3
 8001bde:	437e      	muls	r6, r7
 8001be0:	435f      	muls	r7, r3
 8001be2:	0c03      	lsrs	r3, r0, #16
 8001be4:	4698      	mov	r8, r3
 8001be6:	19a4      	adds	r4, r4, r6
 8001be8:	4444      	add	r4, r8
 8001bea:	444a      	add	r2, r9
 8001bec:	9703      	str	r7, [sp, #12]
 8001bee:	42a6      	cmp	r6, r4
 8001bf0:	d904      	bls.n	8001bfc <__aeabi_dmul+0x1d4>
 8001bf2:	2380      	movs	r3, #128	; 0x80
 8001bf4:	025b      	lsls	r3, r3, #9
 8001bf6:	4698      	mov	r8, r3
 8001bf8:	4447      	add	r7, r8
 8001bfa:	9703      	str	r7, [sp, #12]
 8001bfc:	0423      	lsls	r3, r4, #16
 8001bfe:	9e02      	ldr	r6, [sp, #8]
 8001c00:	469a      	mov	sl, r3
 8001c02:	9b05      	ldr	r3, [sp, #20]
 8001c04:	445e      	add	r6, fp
 8001c06:	4698      	mov	r8, r3
 8001c08:	42ae      	cmp	r6, r5
 8001c0a:	41ad      	sbcs	r5, r5
 8001c0c:	1876      	adds	r6, r6, r1
 8001c0e:	428e      	cmp	r6, r1
 8001c10:	4189      	sbcs	r1, r1
 8001c12:	0400      	lsls	r0, r0, #16
 8001c14:	0c00      	lsrs	r0, r0, #16
 8001c16:	4450      	add	r0, sl
 8001c18:	4440      	add	r0, r8
 8001c1a:	426d      	negs	r5, r5
 8001c1c:	1947      	adds	r7, r0, r5
 8001c1e:	46b8      	mov	r8, r7
 8001c20:	4693      	mov	fp, r2
 8001c22:	4249      	negs	r1, r1
 8001c24:	4689      	mov	r9, r1
 8001c26:	44c3      	add	fp, r8
 8001c28:	44d9      	add	r9, fp
 8001c2a:	4298      	cmp	r0, r3
 8001c2c:	4180      	sbcs	r0, r0
 8001c2e:	45a8      	cmp	r8, r5
 8001c30:	41ad      	sbcs	r5, r5
 8001c32:	4593      	cmp	fp, r2
 8001c34:	4192      	sbcs	r2, r2
 8001c36:	4589      	cmp	r9, r1
 8001c38:	4189      	sbcs	r1, r1
 8001c3a:	426d      	negs	r5, r5
 8001c3c:	4240      	negs	r0, r0
 8001c3e:	4328      	orrs	r0, r5
 8001c40:	0c24      	lsrs	r4, r4, #16
 8001c42:	4252      	negs	r2, r2
 8001c44:	4249      	negs	r1, r1
 8001c46:	430a      	orrs	r2, r1
 8001c48:	9b03      	ldr	r3, [sp, #12]
 8001c4a:	1900      	adds	r0, r0, r4
 8001c4c:	1880      	adds	r0, r0, r2
 8001c4e:	18c7      	adds	r7, r0, r3
 8001c50:	464b      	mov	r3, r9
 8001c52:	0ddc      	lsrs	r4, r3, #23
 8001c54:	9b04      	ldr	r3, [sp, #16]
 8001c56:	0275      	lsls	r5, r6, #9
 8001c58:	431d      	orrs	r5, r3
 8001c5a:	1e6a      	subs	r2, r5, #1
 8001c5c:	4195      	sbcs	r5, r2
 8001c5e:	464b      	mov	r3, r9
 8001c60:	0df6      	lsrs	r6, r6, #23
 8001c62:	027f      	lsls	r7, r7, #9
 8001c64:	4335      	orrs	r5, r6
 8001c66:	025a      	lsls	r2, r3, #9
 8001c68:	433c      	orrs	r4, r7
 8001c6a:	4315      	orrs	r5, r2
 8001c6c:	01fb      	lsls	r3, r7, #7
 8001c6e:	d400      	bmi.n	8001c72 <__aeabi_dmul+0x24a>
 8001c70:	e11c      	b.n	8001eac <__aeabi_dmul+0x484>
 8001c72:	2101      	movs	r1, #1
 8001c74:	086a      	lsrs	r2, r5, #1
 8001c76:	400d      	ands	r5, r1
 8001c78:	4315      	orrs	r5, r2
 8001c7a:	07e2      	lsls	r2, r4, #31
 8001c7c:	4315      	orrs	r5, r2
 8001c7e:	0864      	lsrs	r4, r4, #1
 8001c80:	494f      	ldr	r1, [pc, #316]	; (8001dc0 <__aeabi_dmul+0x398>)
 8001c82:	4461      	add	r1, ip
 8001c84:	2900      	cmp	r1, #0
 8001c86:	dc00      	bgt.n	8001c8a <__aeabi_dmul+0x262>
 8001c88:	e0b0      	b.n	8001dec <__aeabi_dmul+0x3c4>
 8001c8a:	076b      	lsls	r3, r5, #29
 8001c8c:	d009      	beq.n	8001ca2 <__aeabi_dmul+0x27a>
 8001c8e:	220f      	movs	r2, #15
 8001c90:	402a      	ands	r2, r5
 8001c92:	2a04      	cmp	r2, #4
 8001c94:	d005      	beq.n	8001ca2 <__aeabi_dmul+0x27a>
 8001c96:	1d2a      	adds	r2, r5, #4
 8001c98:	42aa      	cmp	r2, r5
 8001c9a:	41ad      	sbcs	r5, r5
 8001c9c:	426d      	negs	r5, r5
 8001c9e:	1964      	adds	r4, r4, r5
 8001ca0:	0015      	movs	r5, r2
 8001ca2:	01e3      	lsls	r3, r4, #7
 8001ca4:	d504      	bpl.n	8001cb0 <__aeabi_dmul+0x288>
 8001ca6:	2180      	movs	r1, #128	; 0x80
 8001ca8:	4a46      	ldr	r2, [pc, #280]	; (8001dc4 <__aeabi_dmul+0x39c>)
 8001caa:	00c9      	lsls	r1, r1, #3
 8001cac:	4014      	ands	r4, r2
 8001cae:	4461      	add	r1, ip
 8001cb0:	4a45      	ldr	r2, [pc, #276]	; (8001dc8 <__aeabi_dmul+0x3a0>)
 8001cb2:	4291      	cmp	r1, r2
 8001cb4:	dd00      	ble.n	8001cb8 <__aeabi_dmul+0x290>
 8001cb6:	e726      	b.n	8001b06 <__aeabi_dmul+0xde>
 8001cb8:	0762      	lsls	r2, r4, #29
 8001cba:	08ed      	lsrs	r5, r5, #3
 8001cbc:	0264      	lsls	r4, r4, #9
 8001cbe:	0549      	lsls	r1, r1, #21
 8001cc0:	4315      	orrs	r5, r2
 8001cc2:	0b24      	lsrs	r4, r4, #12
 8001cc4:	0d4a      	lsrs	r2, r1, #21
 8001cc6:	e710      	b.n	8001aea <__aeabi_dmul+0xc2>
 8001cc8:	4652      	mov	r2, sl
 8001cca:	4332      	orrs	r2, r6
 8001ccc:	d100      	bne.n	8001cd0 <__aeabi_dmul+0x2a8>
 8001cce:	e07f      	b.n	8001dd0 <__aeabi_dmul+0x3a8>
 8001cd0:	2e00      	cmp	r6, #0
 8001cd2:	d100      	bne.n	8001cd6 <__aeabi_dmul+0x2ae>
 8001cd4:	e0dc      	b.n	8001e90 <__aeabi_dmul+0x468>
 8001cd6:	0030      	movs	r0, r6
 8001cd8:	f000 fe1e 	bl	8002918 <__clzsi2>
 8001cdc:	0002      	movs	r2, r0
 8001cde:	3a0b      	subs	r2, #11
 8001ce0:	231d      	movs	r3, #29
 8001ce2:	0001      	movs	r1, r0
 8001ce4:	1a9b      	subs	r3, r3, r2
 8001ce6:	4652      	mov	r2, sl
 8001ce8:	3908      	subs	r1, #8
 8001cea:	40da      	lsrs	r2, r3
 8001cec:	408e      	lsls	r6, r1
 8001cee:	4316      	orrs	r6, r2
 8001cf0:	4652      	mov	r2, sl
 8001cf2:	408a      	lsls	r2, r1
 8001cf4:	9b00      	ldr	r3, [sp, #0]
 8001cf6:	4935      	ldr	r1, [pc, #212]	; (8001dcc <__aeabi_dmul+0x3a4>)
 8001cf8:	1a18      	subs	r0, r3, r0
 8001cfa:	0003      	movs	r3, r0
 8001cfc:	468c      	mov	ip, r1
 8001cfe:	4463      	add	r3, ip
 8001d00:	2000      	movs	r0, #0
 8001d02:	9300      	str	r3, [sp, #0]
 8001d04:	e6d3      	b.n	8001aae <__aeabi_dmul+0x86>
 8001d06:	0025      	movs	r5, r4
 8001d08:	4305      	orrs	r5, r0
 8001d0a:	d04a      	beq.n	8001da2 <__aeabi_dmul+0x37a>
 8001d0c:	2c00      	cmp	r4, #0
 8001d0e:	d100      	bne.n	8001d12 <__aeabi_dmul+0x2ea>
 8001d10:	e0b0      	b.n	8001e74 <__aeabi_dmul+0x44c>
 8001d12:	0020      	movs	r0, r4
 8001d14:	f000 fe00 	bl	8002918 <__clzsi2>
 8001d18:	0001      	movs	r1, r0
 8001d1a:	0002      	movs	r2, r0
 8001d1c:	390b      	subs	r1, #11
 8001d1e:	231d      	movs	r3, #29
 8001d20:	0010      	movs	r0, r2
 8001d22:	1a5b      	subs	r3, r3, r1
 8001d24:	0031      	movs	r1, r6
 8001d26:	0035      	movs	r5, r6
 8001d28:	3808      	subs	r0, #8
 8001d2a:	4084      	lsls	r4, r0
 8001d2c:	40d9      	lsrs	r1, r3
 8001d2e:	4085      	lsls	r5, r0
 8001d30:	430c      	orrs	r4, r1
 8001d32:	4826      	ldr	r0, [pc, #152]	; (8001dcc <__aeabi_dmul+0x3a4>)
 8001d34:	1a83      	subs	r3, r0, r2
 8001d36:	9300      	str	r3, [sp, #0]
 8001d38:	2300      	movs	r3, #0
 8001d3a:	4699      	mov	r9, r3
 8001d3c:	469b      	mov	fp, r3
 8001d3e:	e697      	b.n	8001a70 <__aeabi_dmul+0x48>
 8001d40:	0005      	movs	r5, r0
 8001d42:	4325      	orrs	r5, r4
 8001d44:	d126      	bne.n	8001d94 <__aeabi_dmul+0x36c>
 8001d46:	2208      	movs	r2, #8
 8001d48:	9300      	str	r3, [sp, #0]
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	2400      	movs	r4, #0
 8001d4e:	4691      	mov	r9, r2
 8001d50:	469b      	mov	fp, r3
 8001d52:	e68d      	b.n	8001a70 <__aeabi_dmul+0x48>
 8001d54:	4652      	mov	r2, sl
 8001d56:	9b00      	ldr	r3, [sp, #0]
 8001d58:	4332      	orrs	r2, r6
 8001d5a:	d110      	bne.n	8001d7e <__aeabi_dmul+0x356>
 8001d5c:	4915      	ldr	r1, [pc, #84]	; (8001db4 <__aeabi_dmul+0x38c>)
 8001d5e:	2600      	movs	r6, #0
 8001d60:	468c      	mov	ip, r1
 8001d62:	4463      	add	r3, ip
 8001d64:	4649      	mov	r1, r9
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	2302      	movs	r3, #2
 8001d6a:	4319      	orrs	r1, r3
 8001d6c:	4689      	mov	r9, r1
 8001d6e:	2002      	movs	r0, #2
 8001d70:	e69d      	b.n	8001aae <__aeabi_dmul+0x86>
 8001d72:	465b      	mov	r3, fp
 8001d74:	9701      	str	r7, [sp, #4]
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d000      	beq.n	8001d7c <__aeabi_dmul+0x354>
 8001d7a:	e6ad      	b.n	8001ad8 <__aeabi_dmul+0xb0>
 8001d7c:	e6c3      	b.n	8001b06 <__aeabi_dmul+0xde>
 8001d7e:	4a0d      	ldr	r2, [pc, #52]	; (8001db4 <__aeabi_dmul+0x38c>)
 8001d80:	2003      	movs	r0, #3
 8001d82:	4694      	mov	ip, r2
 8001d84:	4463      	add	r3, ip
 8001d86:	464a      	mov	r2, r9
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	431a      	orrs	r2, r3
 8001d8e:	4691      	mov	r9, r2
 8001d90:	4652      	mov	r2, sl
 8001d92:	e68c      	b.n	8001aae <__aeabi_dmul+0x86>
 8001d94:	220c      	movs	r2, #12
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	2303      	movs	r3, #3
 8001d9a:	0005      	movs	r5, r0
 8001d9c:	4691      	mov	r9, r2
 8001d9e:	469b      	mov	fp, r3
 8001da0:	e666      	b.n	8001a70 <__aeabi_dmul+0x48>
 8001da2:	2304      	movs	r3, #4
 8001da4:	4699      	mov	r9, r3
 8001da6:	2300      	movs	r3, #0
 8001da8:	9300      	str	r3, [sp, #0]
 8001daa:	3301      	adds	r3, #1
 8001dac:	2400      	movs	r4, #0
 8001dae:	469b      	mov	fp, r3
 8001db0:	e65e      	b.n	8001a70 <__aeabi_dmul+0x48>
 8001db2:	46c0      	nop			; (mov r8, r8)
 8001db4:	000007ff 	.word	0x000007ff
 8001db8:	fffffc01 	.word	0xfffffc01
 8001dbc:	08013538 	.word	0x08013538
 8001dc0:	000003ff 	.word	0x000003ff
 8001dc4:	feffffff 	.word	0xfeffffff
 8001dc8:	000007fe 	.word	0x000007fe
 8001dcc:	fffffc0d 	.word	0xfffffc0d
 8001dd0:	4649      	mov	r1, r9
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	4319      	orrs	r1, r3
 8001dd6:	4689      	mov	r9, r1
 8001dd8:	2600      	movs	r6, #0
 8001dda:	2001      	movs	r0, #1
 8001ddc:	e667      	b.n	8001aae <__aeabi_dmul+0x86>
 8001dde:	2300      	movs	r3, #0
 8001de0:	2480      	movs	r4, #128	; 0x80
 8001de2:	2500      	movs	r5, #0
 8001de4:	4a43      	ldr	r2, [pc, #268]	; (8001ef4 <__aeabi_dmul+0x4cc>)
 8001de6:	9301      	str	r3, [sp, #4]
 8001de8:	0324      	lsls	r4, r4, #12
 8001dea:	e67e      	b.n	8001aea <__aeabi_dmul+0xc2>
 8001dec:	2001      	movs	r0, #1
 8001dee:	1a40      	subs	r0, r0, r1
 8001df0:	2838      	cmp	r0, #56	; 0x38
 8001df2:	dd00      	ble.n	8001df6 <__aeabi_dmul+0x3ce>
 8001df4:	e676      	b.n	8001ae4 <__aeabi_dmul+0xbc>
 8001df6:	281f      	cmp	r0, #31
 8001df8:	dd5b      	ble.n	8001eb2 <__aeabi_dmul+0x48a>
 8001dfa:	221f      	movs	r2, #31
 8001dfc:	0023      	movs	r3, r4
 8001dfe:	4252      	negs	r2, r2
 8001e00:	1a51      	subs	r1, r2, r1
 8001e02:	40cb      	lsrs	r3, r1
 8001e04:	0019      	movs	r1, r3
 8001e06:	2820      	cmp	r0, #32
 8001e08:	d003      	beq.n	8001e12 <__aeabi_dmul+0x3ea>
 8001e0a:	4a3b      	ldr	r2, [pc, #236]	; (8001ef8 <__aeabi_dmul+0x4d0>)
 8001e0c:	4462      	add	r2, ip
 8001e0e:	4094      	lsls	r4, r2
 8001e10:	4325      	orrs	r5, r4
 8001e12:	1e6a      	subs	r2, r5, #1
 8001e14:	4195      	sbcs	r5, r2
 8001e16:	002a      	movs	r2, r5
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	2107      	movs	r1, #7
 8001e1c:	000d      	movs	r5, r1
 8001e1e:	2400      	movs	r4, #0
 8001e20:	4015      	ands	r5, r2
 8001e22:	4211      	tst	r1, r2
 8001e24:	d05b      	beq.n	8001ede <__aeabi_dmul+0x4b6>
 8001e26:	210f      	movs	r1, #15
 8001e28:	2400      	movs	r4, #0
 8001e2a:	4011      	ands	r1, r2
 8001e2c:	2904      	cmp	r1, #4
 8001e2e:	d053      	beq.n	8001ed8 <__aeabi_dmul+0x4b0>
 8001e30:	1d11      	adds	r1, r2, #4
 8001e32:	4291      	cmp	r1, r2
 8001e34:	4192      	sbcs	r2, r2
 8001e36:	4252      	negs	r2, r2
 8001e38:	18a4      	adds	r4, r4, r2
 8001e3a:	000a      	movs	r2, r1
 8001e3c:	0223      	lsls	r3, r4, #8
 8001e3e:	d54b      	bpl.n	8001ed8 <__aeabi_dmul+0x4b0>
 8001e40:	2201      	movs	r2, #1
 8001e42:	2400      	movs	r4, #0
 8001e44:	2500      	movs	r5, #0
 8001e46:	e650      	b.n	8001aea <__aeabi_dmul+0xc2>
 8001e48:	2380      	movs	r3, #128	; 0x80
 8001e4a:	031b      	lsls	r3, r3, #12
 8001e4c:	421c      	tst	r4, r3
 8001e4e:	d009      	beq.n	8001e64 <__aeabi_dmul+0x43c>
 8001e50:	421e      	tst	r6, r3
 8001e52:	d107      	bne.n	8001e64 <__aeabi_dmul+0x43c>
 8001e54:	4333      	orrs	r3, r6
 8001e56:	031c      	lsls	r4, r3, #12
 8001e58:	4643      	mov	r3, r8
 8001e5a:	0015      	movs	r5, r2
 8001e5c:	0b24      	lsrs	r4, r4, #12
 8001e5e:	4a25      	ldr	r2, [pc, #148]	; (8001ef4 <__aeabi_dmul+0x4cc>)
 8001e60:	9301      	str	r3, [sp, #4]
 8001e62:	e642      	b.n	8001aea <__aeabi_dmul+0xc2>
 8001e64:	2280      	movs	r2, #128	; 0x80
 8001e66:	0312      	lsls	r2, r2, #12
 8001e68:	4314      	orrs	r4, r2
 8001e6a:	0324      	lsls	r4, r4, #12
 8001e6c:	4a21      	ldr	r2, [pc, #132]	; (8001ef4 <__aeabi_dmul+0x4cc>)
 8001e6e:	0b24      	lsrs	r4, r4, #12
 8001e70:	9701      	str	r7, [sp, #4]
 8001e72:	e63a      	b.n	8001aea <__aeabi_dmul+0xc2>
 8001e74:	f000 fd50 	bl	8002918 <__clzsi2>
 8001e78:	0001      	movs	r1, r0
 8001e7a:	0002      	movs	r2, r0
 8001e7c:	3115      	adds	r1, #21
 8001e7e:	3220      	adds	r2, #32
 8001e80:	291c      	cmp	r1, #28
 8001e82:	dc00      	bgt.n	8001e86 <__aeabi_dmul+0x45e>
 8001e84:	e74b      	b.n	8001d1e <__aeabi_dmul+0x2f6>
 8001e86:	0034      	movs	r4, r6
 8001e88:	3808      	subs	r0, #8
 8001e8a:	2500      	movs	r5, #0
 8001e8c:	4084      	lsls	r4, r0
 8001e8e:	e750      	b.n	8001d32 <__aeabi_dmul+0x30a>
 8001e90:	f000 fd42 	bl	8002918 <__clzsi2>
 8001e94:	0003      	movs	r3, r0
 8001e96:	001a      	movs	r2, r3
 8001e98:	3215      	adds	r2, #21
 8001e9a:	3020      	adds	r0, #32
 8001e9c:	2a1c      	cmp	r2, #28
 8001e9e:	dc00      	bgt.n	8001ea2 <__aeabi_dmul+0x47a>
 8001ea0:	e71e      	b.n	8001ce0 <__aeabi_dmul+0x2b8>
 8001ea2:	4656      	mov	r6, sl
 8001ea4:	3b08      	subs	r3, #8
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	409e      	lsls	r6, r3
 8001eaa:	e723      	b.n	8001cf4 <__aeabi_dmul+0x2cc>
 8001eac:	9b00      	ldr	r3, [sp, #0]
 8001eae:	469c      	mov	ip, r3
 8001eb0:	e6e6      	b.n	8001c80 <__aeabi_dmul+0x258>
 8001eb2:	4912      	ldr	r1, [pc, #72]	; (8001efc <__aeabi_dmul+0x4d4>)
 8001eb4:	0022      	movs	r2, r4
 8001eb6:	4461      	add	r1, ip
 8001eb8:	002e      	movs	r6, r5
 8001eba:	408d      	lsls	r5, r1
 8001ebc:	408a      	lsls	r2, r1
 8001ebe:	40c6      	lsrs	r6, r0
 8001ec0:	1e69      	subs	r1, r5, #1
 8001ec2:	418d      	sbcs	r5, r1
 8001ec4:	4332      	orrs	r2, r6
 8001ec6:	432a      	orrs	r2, r5
 8001ec8:	40c4      	lsrs	r4, r0
 8001eca:	0753      	lsls	r3, r2, #29
 8001ecc:	d0b6      	beq.n	8001e3c <__aeabi_dmul+0x414>
 8001ece:	210f      	movs	r1, #15
 8001ed0:	4011      	ands	r1, r2
 8001ed2:	2904      	cmp	r1, #4
 8001ed4:	d1ac      	bne.n	8001e30 <__aeabi_dmul+0x408>
 8001ed6:	e7b1      	b.n	8001e3c <__aeabi_dmul+0x414>
 8001ed8:	0765      	lsls	r5, r4, #29
 8001eda:	0264      	lsls	r4, r4, #9
 8001edc:	0b24      	lsrs	r4, r4, #12
 8001ede:	08d2      	lsrs	r2, r2, #3
 8001ee0:	4315      	orrs	r5, r2
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	e601      	b.n	8001aea <__aeabi_dmul+0xc2>
 8001ee6:	2280      	movs	r2, #128	; 0x80
 8001ee8:	0312      	lsls	r2, r2, #12
 8001eea:	4314      	orrs	r4, r2
 8001eec:	0324      	lsls	r4, r4, #12
 8001eee:	4a01      	ldr	r2, [pc, #4]	; (8001ef4 <__aeabi_dmul+0x4cc>)
 8001ef0:	0b24      	lsrs	r4, r4, #12
 8001ef2:	e5fa      	b.n	8001aea <__aeabi_dmul+0xc2>
 8001ef4:	000007ff 	.word	0x000007ff
 8001ef8:	0000043e 	.word	0x0000043e
 8001efc:	0000041e 	.word	0x0000041e

08001f00 <__aeabi_dsub>:
 8001f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f02:	4657      	mov	r7, sl
 8001f04:	464e      	mov	r6, r9
 8001f06:	4645      	mov	r5, r8
 8001f08:	46de      	mov	lr, fp
 8001f0a:	b5e0      	push	{r5, r6, r7, lr}
 8001f0c:	001e      	movs	r6, r3
 8001f0e:	0017      	movs	r7, r2
 8001f10:	004a      	lsls	r2, r1, #1
 8001f12:	030b      	lsls	r3, r1, #12
 8001f14:	0d52      	lsrs	r2, r2, #21
 8001f16:	0a5b      	lsrs	r3, r3, #9
 8001f18:	4690      	mov	r8, r2
 8001f1a:	0f42      	lsrs	r2, r0, #29
 8001f1c:	431a      	orrs	r2, r3
 8001f1e:	0fcd      	lsrs	r5, r1, #31
 8001f20:	4ccd      	ldr	r4, [pc, #820]	; (8002258 <__aeabi_dsub+0x358>)
 8001f22:	0331      	lsls	r1, r6, #12
 8001f24:	00c3      	lsls	r3, r0, #3
 8001f26:	4694      	mov	ip, r2
 8001f28:	0070      	lsls	r0, r6, #1
 8001f2a:	0f7a      	lsrs	r2, r7, #29
 8001f2c:	0a49      	lsrs	r1, r1, #9
 8001f2e:	00ff      	lsls	r7, r7, #3
 8001f30:	469a      	mov	sl, r3
 8001f32:	46b9      	mov	r9, r7
 8001f34:	0d40      	lsrs	r0, r0, #21
 8001f36:	0ff6      	lsrs	r6, r6, #31
 8001f38:	4311      	orrs	r1, r2
 8001f3a:	42a0      	cmp	r0, r4
 8001f3c:	d100      	bne.n	8001f40 <__aeabi_dsub+0x40>
 8001f3e:	e0b1      	b.n	80020a4 <__aeabi_dsub+0x1a4>
 8001f40:	2201      	movs	r2, #1
 8001f42:	4056      	eors	r6, r2
 8001f44:	46b3      	mov	fp, r6
 8001f46:	42b5      	cmp	r5, r6
 8001f48:	d100      	bne.n	8001f4c <__aeabi_dsub+0x4c>
 8001f4a:	e088      	b.n	800205e <__aeabi_dsub+0x15e>
 8001f4c:	4642      	mov	r2, r8
 8001f4e:	1a12      	subs	r2, r2, r0
 8001f50:	2a00      	cmp	r2, #0
 8001f52:	dc00      	bgt.n	8001f56 <__aeabi_dsub+0x56>
 8001f54:	e0ae      	b.n	80020b4 <__aeabi_dsub+0x1b4>
 8001f56:	2800      	cmp	r0, #0
 8001f58:	d100      	bne.n	8001f5c <__aeabi_dsub+0x5c>
 8001f5a:	e0c1      	b.n	80020e0 <__aeabi_dsub+0x1e0>
 8001f5c:	48be      	ldr	r0, [pc, #760]	; (8002258 <__aeabi_dsub+0x358>)
 8001f5e:	4580      	cmp	r8, r0
 8001f60:	d100      	bne.n	8001f64 <__aeabi_dsub+0x64>
 8001f62:	e151      	b.n	8002208 <__aeabi_dsub+0x308>
 8001f64:	2080      	movs	r0, #128	; 0x80
 8001f66:	0400      	lsls	r0, r0, #16
 8001f68:	4301      	orrs	r1, r0
 8001f6a:	2a38      	cmp	r2, #56	; 0x38
 8001f6c:	dd00      	ble.n	8001f70 <__aeabi_dsub+0x70>
 8001f6e:	e17b      	b.n	8002268 <__aeabi_dsub+0x368>
 8001f70:	2a1f      	cmp	r2, #31
 8001f72:	dd00      	ble.n	8001f76 <__aeabi_dsub+0x76>
 8001f74:	e1ee      	b.n	8002354 <__aeabi_dsub+0x454>
 8001f76:	2020      	movs	r0, #32
 8001f78:	003e      	movs	r6, r7
 8001f7a:	1a80      	subs	r0, r0, r2
 8001f7c:	000c      	movs	r4, r1
 8001f7e:	40d6      	lsrs	r6, r2
 8001f80:	40d1      	lsrs	r1, r2
 8001f82:	4087      	lsls	r7, r0
 8001f84:	4662      	mov	r2, ip
 8001f86:	4084      	lsls	r4, r0
 8001f88:	1a52      	subs	r2, r2, r1
 8001f8a:	1e78      	subs	r0, r7, #1
 8001f8c:	4187      	sbcs	r7, r0
 8001f8e:	4694      	mov	ip, r2
 8001f90:	4334      	orrs	r4, r6
 8001f92:	4327      	orrs	r7, r4
 8001f94:	1bdc      	subs	r4, r3, r7
 8001f96:	42a3      	cmp	r3, r4
 8001f98:	419b      	sbcs	r3, r3
 8001f9a:	4662      	mov	r2, ip
 8001f9c:	425b      	negs	r3, r3
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	4699      	mov	r9, r3
 8001fa2:	464b      	mov	r3, r9
 8001fa4:	021b      	lsls	r3, r3, #8
 8001fa6:	d400      	bmi.n	8001faa <__aeabi_dsub+0xaa>
 8001fa8:	e118      	b.n	80021dc <__aeabi_dsub+0x2dc>
 8001faa:	464b      	mov	r3, r9
 8001fac:	0258      	lsls	r0, r3, #9
 8001fae:	0a43      	lsrs	r3, r0, #9
 8001fb0:	4699      	mov	r9, r3
 8001fb2:	464b      	mov	r3, r9
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d100      	bne.n	8001fba <__aeabi_dsub+0xba>
 8001fb8:	e137      	b.n	800222a <__aeabi_dsub+0x32a>
 8001fba:	4648      	mov	r0, r9
 8001fbc:	f000 fcac 	bl	8002918 <__clzsi2>
 8001fc0:	0001      	movs	r1, r0
 8001fc2:	3908      	subs	r1, #8
 8001fc4:	2320      	movs	r3, #32
 8001fc6:	0022      	movs	r2, r4
 8001fc8:	4648      	mov	r0, r9
 8001fca:	1a5b      	subs	r3, r3, r1
 8001fcc:	40da      	lsrs	r2, r3
 8001fce:	4088      	lsls	r0, r1
 8001fd0:	408c      	lsls	r4, r1
 8001fd2:	4643      	mov	r3, r8
 8001fd4:	4310      	orrs	r0, r2
 8001fd6:	4588      	cmp	r8, r1
 8001fd8:	dd00      	ble.n	8001fdc <__aeabi_dsub+0xdc>
 8001fda:	e136      	b.n	800224a <__aeabi_dsub+0x34a>
 8001fdc:	1ac9      	subs	r1, r1, r3
 8001fde:	1c4b      	adds	r3, r1, #1
 8001fe0:	2b1f      	cmp	r3, #31
 8001fe2:	dd00      	ble.n	8001fe6 <__aeabi_dsub+0xe6>
 8001fe4:	e0ea      	b.n	80021bc <__aeabi_dsub+0x2bc>
 8001fe6:	2220      	movs	r2, #32
 8001fe8:	0026      	movs	r6, r4
 8001fea:	1ad2      	subs	r2, r2, r3
 8001fec:	0001      	movs	r1, r0
 8001fee:	4094      	lsls	r4, r2
 8001ff0:	40de      	lsrs	r6, r3
 8001ff2:	40d8      	lsrs	r0, r3
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	4091      	lsls	r1, r2
 8001ff8:	1e62      	subs	r2, r4, #1
 8001ffa:	4194      	sbcs	r4, r2
 8001ffc:	4681      	mov	r9, r0
 8001ffe:	4698      	mov	r8, r3
 8002000:	4331      	orrs	r1, r6
 8002002:	430c      	orrs	r4, r1
 8002004:	0763      	lsls	r3, r4, #29
 8002006:	d009      	beq.n	800201c <__aeabi_dsub+0x11c>
 8002008:	230f      	movs	r3, #15
 800200a:	4023      	ands	r3, r4
 800200c:	2b04      	cmp	r3, #4
 800200e:	d005      	beq.n	800201c <__aeabi_dsub+0x11c>
 8002010:	1d23      	adds	r3, r4, #4
 8002012:	42a3      	cmp	r3, r4
 8002014:	41a4      	sbcs	r4, r4
 8002016:	4264      	negs	r4, r4
 8002018:	44a1      	add	r9, r4
 800201a:	001c      	movs	r4, r3
 800201c:	464b      	mov	r3, r9
 800201e:	021b      	lsls	r3, r3, #8
 8002020:	d400      	bmi.n	8002024 <__aeabi_dsub+0x124>
 8002022:	e0de      	b.n	80021e2 <__aeabi_dsub+0x2e2>
 8002024:	4641      	mov	r1, r8
 8002026:	4b8c      	ldr	r3, [pc, #560]	; (8002258 <__aeabi_dsub+0x358>)
 8002028:	3101      	adds	r1, #1
 800202a:	4299      	cmp	r1, r3
 800202c:	d100      	bne.n	8002030 <__aeabi_dsub+0x130>
 800202e:	e0e7      	b.n	8002200 <__aeabi_dsub+0x300>
 8002030:	464b      	mov	r3, r9
 8002032:	488a      	ldr	r0, [pc, #552]	; (800225c <__aeabi_dsub+0x35c>)
 8002034:	08e4      	lsrs	r4, r4, #3
 8002036:	4003      	ands	r3, r0
 8002038:	0018      	movs	r0, r3
 800203a:	0549      	lsls	r1, r1, #21
 800203c:	075b      	lsls	r3, r3, #29
 800203e:	0240      	lsls	r0, r0, #9
 8002040:	4323      	orrs	r3, r4
 8002042:	0d4a      	lsrs	r2, r1, #21
 8002044:	0b04      	lsrs	r4, r0, #12
 8002046:	0512      	lsls	r2, r2, #20
 8002048:	07ed      	lsls	r5, r5, #31
 800204a:	4322      	orrs	r2, r4
 800204c:	432a      	orrs	r2, r5
 800204e:	0018      	movs	r0, r3
 8002050:	0011      	movs	r1, r2
 8002052:	bcf0      	pop	{r4, r5, r6, r7}
 8002054:	46bb      	mov	fp, r7
 8002056:	46b2      	mov	sl, r6
 8002058:	46a9      	mov	r9, r5
 800205a:	46a0      	mov	r8, r4
 800205c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800205e:	4642      	mov	r2, r8
 8002060:	1a12      	subs	r2, r2, r0
 8002062:	2a00      	cmp	r2, #0
 8002064:	dd52      	ble.n	800210c <__aeabi_dsub+0x20c>
 8002066:	2800      	cmp	r0, #0
 8002068:	d100      	bne.n	800206c <__aeabi_dsub+0x16c>
 800206a:	e09c      	b.n	80021a6 <__aeabi_dsub+0x2a6>
 800206c:	45a0      	cmp	r8, r4
 800206e:	d100      	bne.n	8002072 <__aeabi_dsub+0x172>
 8002070:	e0ca      	b.n	8002208 <__aeabi_dsub+0x308>
 8002072:	2080      	movs	r0, #128	; 0x80
 8002074:	0400      	lsls	r0, r0, #16
 8002076:	4301      	orrs	r1, r0
 8002078:	2a38      	cmp	r2, #56	; 0x38
 800207a:	dd00      	ble.n	800207e <__aeabi_dsub+0x17e>
 800207c:	e149      	b.n	8002312 <__aeabi_dsub+0x412>
 800207e:	2a1f      	cmp	r2, #31
 8002080:	dc00      	bgt.n	8002084 <__aeabi_dsub+0x184>
 8002082:	e197      	b.n	80023b4 <__aeabi_dsub+0x4b4>
 8002084:	0010      	movs	r0, r2
 8002086:	000e      	movs	r6, r1
 8002088:	3820      	subs	r0, #32
 800208a:	40c6      	lsrs	r6, r0
 800208c:	2a20      	cmp	r2, #32
 800208e:	d004      	beq.n	800209a <__aeabi_dsub+0x19a>
 8002090:	2040      	movs	r0, #64	; 0x40
 8002092:	1a82      	subs	r2, r0, r2
 8002094:	4091      	lsls	r1, r2
 8002096:	430f      	orrs	r7, r1
 8002098:	46b9      	mov	r9, r7
 800209a:	464c      	mov	r4, r9
 800209c:	1e62      	subs	r2, r4, #1
 800209e:	4194      	sbcs	r4, r2
 80020a0:	4334      	orrs	r4, r6
 80020a2:	e13a      	b.n	800231a <__aeabi_dsub+0x41a>
 80020a4:	000a      	movs	r2, r1
 80020a6:	433a      	orrs	r2, r7
 80020a8:	d028      	beq.n	80020fc <__aeabi_dsub+0x1fc>
 80020aa:	46b3      	mov	fp, r6
 80020ac:	42b5      	cmp	r5, r6
 80020ae:	d02b      	beq.n	8002108 <__aeabi_dsub+0x208>
 80020b0:	4a6b      	ldr	r2, [pc, #428]	; (8002260 <__aeabi_dsub+0x360>)
 80020b2:	4442      	add	r2, r8
 80020b4:	2a00      	cmp	r2, #0
 80020b6:	d05d      	beq.n	8002174 <__aeabi_dsub+0x274>
 80020b8:	4642      	mov	r2, r8
 80020ba:	4644      	mov	r4, r8
 80020bc:	1a82      	subs	r2, r0, r2
 80020be:	2c00      	cmp	r4, #0
 80020c0:	d000      	beq.n	80020c4 <__aeabi_dsub+0x1c4>
 80020c2:	e0f5      	b.n	80022b0 <__aeabi_dsub+0x3b0>
 80020c4:	4665      	mov	r5, ip
 80020c6:	431d      	orrs	r5, r3
 80020c8:	d100      	bne.n	80020cc <__aeabi_dsub+0x1cc>
 80020ca:	e19c      	b.n	8002406 <__aeabi_dsub+0x506>
 80020cc:	1e55      	subs	r5, r2, #1
 80020ce:	2a01      	cmp	r2, #1
 80020d0:	d100      	bne.n	80020d4 <__aeabi_dsub+0x1d4>
 80020d2:	e1fb      	b.n	80024cc <__aeabi_dsub+0x5cc>
 80020d4:	4c60      	ldr	r4, [pc, #384]	; (8002258 <__aeabi_dsub+0x358>)
 80020d6:	42a2      	cmp	r2, r4
 80020d8:	d100      	bne.n	80020dc <__aeabi_dsub+0x1dc>
 80020da:	e1bd      	b.n	8002458 <__aeabi_dsub+0x558>
 80020dc:	002a      	movs	r2, r5
 80020de:	e0f0      	b.n	80022c2 <__aeabi_dsub+0x3c2>
 80020e0:	0008      	movs	r0, r1
 80020e2:	4338      	orrs	r0, r7
 80020e4:	d100      	bne.n	80020e8 <__aeabi_dsub+0x1e8>
 80020e6:	e0c3      	b.n	8002270 <__aeabi_dsub+0x370>
 80020e8:	1e50      	subs	r0, r2, #1
 80020ea:	2a01      	cmp	r2, #1
 80020ec:	d100      	bne.n	80020f0 <__aeabi_dsub+0x1f0>
 80020ee:	e1a8      	b.n	8002442 <__aeabi_dsub+0x542>
 80020f0:	4c59      	ldr	r4, [pc, #356]	; (8002258 <__aeabi_dsub+0x358>)
 80020f2:	42a2      	cmp	r2, r4
 80020f4:	d100      	bne.n	80020f8 <__aeabi_dsub+0x1f8>
 80020f6:	e087      	b.n	8002208 <__aeabi_dsub+0x308>
 80020f8:	0002      	movs	r2, r0
 80020fa:	e736      	b.n	8001f6a <__aeabi_dsub+0x6a>
 80020fc:	2201      	movs	r2, #1
 80020fe:	4056      	eors	r6, r2
 8002100:	46b3      	mov	fp, r6
 8002102:	42b5      	cmp	r5, r6
 8002104:	d000      	beq.n	8002108 <__aeabi_dsub+0x208>
 8002106:	e721      	b.n	8001f4c <__aeabi_dsub+0x4c>
 8002108:	4a55      	ldr	r2, [pc, #340]	; (8002260 <__aeabi_dsub+0x360>)
 800210a:	4442      	add	r2, r8
 800210c:	2a00      	cmp	r2, #0
 800210e:	d100      	bne.n	8002112 <__aeabi_dsub+0x212>
 8002110:	e0b5      	b.n	800227e <__aeabi_dsub+0x37e>
 8002112:	4642      	mov	r2, r8
 8002114:	4644      	mov	r4, r8
 8002116:	1a82      	subs	r2, r0, r2
 8002118:	2c00      	cmp	r4, #0
 800211a:	d100      	bne.n	800211e <__aeabi_dsub+0x21e>
 800211c:	e138      	b.n	8002390 <__aeabi_dsub+0x490>
 800211e:	4e4e      	ldr	r6, [pc, #312]	; (8002258 <__aeabi_dsub+0x358>)
 8002120:	42b0      	cmp	r0, r6
 8002122:	d100      	bne.n	8002126 <__aeabi_dsub+0x226>
 8002124:	e1de      	b.n	80024e4 <__aeabi_dsub+0x5e4>
 8002126:	2680      	movs	r6, #128	; 0x80
 8002128:	4664      	mov	r4, ip
 800212a:	0436      	lsls	r6, r6, #16
 800212c:	4334      	orrs	r4, r6
 800212e:	46a4      	mov	ip, r4
 8002130:	2a38      	cmp	r2, #56	; 0x38
 8002132:	dd00      	ble.n	8002136 <__aeabi_dsub+0x236>
 8002134:	e196      	b.n	8002464 <__aeabi_dsub+0x564>
 8002136:	2a1f      	cmp	r2, #31
 8002138:	dd00      	ble.n	800213c <__aeabi_dsub+0x23c>
 800213a:	e224      	b.n	8002586 <__aeabi_dsub+0x686>
 800213c:	2620      	movs	r6, #32
 800213e:	1ab4      	subs	r4, r6, r2
 8002140:	46a2      	mov	sl, r4
 8002142:	4664      	mov	r4, ip
 8002144:	4656      	mov	r6, sl
 8002146:	40b4      	lsls	r4, r6
 8002148:	46a1      	mov	r9, r4
 800214a:	001c      	movs	r4, r3
 800214c:	464e      	mov	r6, r9
 800214e:	40d4      	lsrs	r4, r2
 8002150:	4326      	orrs	r6, r4
 8002152:	0034      	movs	r4, r6
 8002154:	4656      	mov	r6, sl
 8002156:	40b3      	lsls	r3, r6
 8002158:	1e5e      	subs	r6, r3, #1
 800215a:	41b3      	sbcs	r3, r6
 800215c:	431c      	orrs	r4, r3
 800215e:	4663      	mov	r3, ip
 8002160:	40d3      	lsrs	r3, r2
 8002162:	18c9      	adds	r1, r1, r3
 8002164:	19e4      	adds	r4, r4, r7
 8002166:	42bc      	cmp	r4, r7
 8002168:	41bf      	sbcs	r7, r7
 800216a:	427f      	negs	r7, r7
 800216c:	46b9      	mov	r9, r7
 800216e:	4680      	mov	r8, r0
 8002170:	4489      	add	r9, r1
 8002172:	e0d8      	b.n	8002326 <__aeabi_dsub+0x426>
 8002174:	4640      	mov	r0, r8
 8002176:	4c3b      	ldr	r4, [pc, #236]	; (8002264 <__aeabi_dsub+0x364>)
 8002178:	3001      	adds	r0, #1
 800217a:	4220      	tst	r0, r4
 800217c:	d000      	beq.n	8002180 <__aeabi_dsub+0x280>
 800217e:	e0b4      	b.n	80022ea <__aeabi_dsub+0x3ea>
 8002180:	4640      	mov	r0, r8
 8002182:	2800      	cmp	r0, #0
 8002184:	d000      	beq.n	8002188 <__aeabi_dsub+0x288>
 8002186:	e144      	b.n	8002412 <__aeabi_dsub+0x512>
 8002188:	4660      	mov	r0, ip
 800218a:	4318      	orrs	r0, r3
 800218c:	d100      	bne.n	8002190 <__aeabi_dsub+0x290>
 800218e:	e190      	b.n	80024b2 <__aeabi_dsub+0x5b2>
 8002190:	0008      	movs	r0, r1
 8002192:	4338      	orrs	r0, r7
 8002194:	d000      	beq.n	8002198 <__aeabi_dsub+0x298>
 8002196:	e1aa      	b.n	80024ee <__aeabi_dsub+0x5ee>
 8002198:	4661      	mov	r1, ip
 800219a:	08db      	lsrs	r3, r3, #3
 800219c:	0749      	lsls	r1, r1, #29
 800219e:	430b      	orrs	r3, r1
 80021a0:	4661      	mov	r1, ip
 80021a2:	08cc      	lsrs	r4, r1, #3
 80021a4:	e027      	b.n	80021f6 <__aeabi_dsub+0x2f6>
 80021a6:	0008      	movs	r0, r1
 80021a8:	4338      	orrs	r0, r7
 80021aa:	d061      	beq.n	8002270 <__aeabi_dsub+0x370>
 80021ac:	1e50      	subs	r0, r2, #1
 80021ae:	2a01      	cmp	r2, #1
 80021b0:	d100      	bne.n	80021b4 <__aeabi_dsub+0x2b4>
 80021b2:	e139      	b.n	8002428 <__aeabi_dsub+0x528>
 80021b4:	42a2      	cmp	r2, r4
 80021b6:	d027      	beq.n	8002208 <__aeabi_dsub+0x308>
 80021b8:	0002      	movs	r2, r0
 80021ba:	e75d      	b.n	8002078 <__aeabi_dsub+0x178>
 80021bc:	0002      	movs	r2, r0
 80021be:	391f      	subs	r1, #31
 80021c0:	40ca      	lsrs	r2, r1
 80021c2:	0011      	movs	r1, r2
 80021c4:	2b20      	cmp	r3, #32
 80021c6:	d003      	beq.n	80021d0 <__aeabi_dsub+0x2d0>
 80021c8:	2240      	movs	r2, #64	; 0x40
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	4098      	lsls	r0, r3
 80021ce:	4304      	orrs	r4, r0
 80021d0:	1e63      	subs	r3, r4, #1
 80021d2:	419c      	sbcs	r4, r3
 80021d4:	2300      	movs	r3, #0
 80021d6:	4699      	mov	r9, r3
 80021d8:	4698      	mov	r8, r3
 80021da:	430c      	orrs	r4, r1
 80021dc:	0763      	lsls	r3, r4, #29
 80021de:	d000      	beq.n	80021e2 <__aeabi_dsub+0x2e2>
 80021e0:	e712      	b.n	8002008 <__aeabi_dsub+0x108>
 80021e2:	464b      	mov	r3, r9
 80021e4:	464a      	mov	r2, r9
 80021e6:	08e4      	lsrs	r4, r4, #3
 80021e8:	075b      	lsls	r3, r3, #29
 80021ea:	4323      	orrs	r3, r4
 80021ec:	08d4      	lsrs	r4, r2, #3
 80021ee:	4642      	mov	r2, r8
 80021f0:	4919      	ldr	r1, [pc, #100]	; (8002258 <__aeabi_dsub+0x358>)
 80021f2:	428a      	cmp	r2, r1
 80021f4:	d00e      	beq.n	8002214 <__aeabi_dsub+0x314>
 80021f6:	0324      	lsls	r4, r4, #12
 80021f8:	0552      	lsls	r2, r2, #21
 80021fa:	0b24      	lsrs	r4, r4, #12
 80021fc:	0d52      	lsrs	r2, r2, #21
 80021fe:	e722      	b.n	8002046 <__aeabi_dsub+0x146>
 8002200:	000a      	movs	r2, r1
 8002202:	2400      	movs	r4, #0
 8002204:	2300      	movs	r3, #0
 8002206:	e71e      	b.n	8002046 <__aeabi_dsub+0x146>
 8002208:	08db      	lsrs	r3, r3, #3
 800220a:	4662      	mov	r2, ip
 800220c:	0752      	lsls	r2, r2, #29
 800220e:	4313      	orrs	r3, r2
 8002210:	4662      	mov	r2, ip
 8002212:	08d4      	lsrs	r4, r2, #3
 8002214:	001a      	movs	r2, r3
 8002216:	4322      	orrs	r2, r4
 8002218:	d100      	bne.n	800221c <__aeabi_dsub+0x31c>
 800221a:	e1fc      	b.n	8002616 <__aeabi_dsub+0x716>
 800221c:	2280      	movs	r2, #128	; 0x80
 800221e:	0312      	lsls	r2, r2, #12
 8002220:	4314      	orrs	r4, r2
 8002222:	0324      	lsls	r4, r4, #12
 8002224:	4a0c      	ldr	r2, [pc, #48]	; (8002258 <__aeabi_dsub+0x358>)
 8002226:	0b24      	lsrs	r4, r4, #12
 8002228:	e70d      	b.n	8002046 <__aeabi_dsub+0x146>
 800222a:	0020      	movs	r0, r4
 800222c:	f000 fb74 	bl	8002918 <__clzsi2>
 8002230:	0001      	movs	r1, r0
 8002232:	3118      	adds	r1, #24
 8002234:	291f      	cmp	r1, #31
 8002236:	dc00      	bgt.n	800223a <__aeabi_dsub+0x33a>
 8002238:	e6c4      	b.n	8001fc4 <__aeabi_dsub+0xc4>
 800223a:	3808      	subs	r0, #8
 800223c:	4084      	lsls	r4, r0
 800223e:	4643      	mov	r3, r8
 8002240:	0020      	movs	r0, r4
 8002242:	2400      	movs	r4, #0
 8002244:	4588      	cmp	r8, r1
 8002246:	dc00      	bgt.n	800224a <__aeabi_dsub+0x34a>
 8002248:	e6c8      	b.n	8001fdc <__aeabi_dsub+0xdc>
 800224a:	4a04      	ldr	r2, [pc, #16]	; (800225c <__aeabi_dsub+0x35c>)
 800224c:	1a5b      	subs	r3, r3, r1
 800224e:	4010      	ands	r0, r2
 8002250:	4698      	mov	r8, r3
 8002252:	4681      	mov	r9, r0
 8002254:	e6d6      	b.n	8002004 <__aeabi_dsub+0x104>
 8002256:	46c0      	nop			; (mov r8, r8)
 8002258:	000007ff 	.word	0x000007ff
 800225c:	ff7fffff 	.word	0xff7fffff
 8002260:	fffff801 	.word	0xfffff801
 8002264:	000007fe 	.word	0x000007fe
 8002268:	430f      	orrs	r7, r1
 800226a:	1e7a      	subs	r2, r7, #1
 800226c:	4197      	sbcs	r7, r2
 800226e:	e691      	b.n	8001f94 <__aeabi_dsub+0x94>
 8002270:	4661      	mov	r1, ip
 8002272:	08db      	lsrs	r3, r3, #3
 8002274:	0749      	lsls	r1, r1, #29
 8002276:	430b      	orrs	r3, r1
 8002278:	4661      	mov	r1, ip
 800227a:	08cc      	lsrs	r4, r1, #3
 800227c:	e7b8      	b.n	80021f0 <__aeabi_dsub+0x2f0>
 800227e:	4640      	mov	r0, r8
 8002280:	4cd3      	ldr	r4, [pc, #844]	; (80025d0 <__aeabi_dsub+0x6d0>)
 8002282:	3001      	adds	r0, #1
 8002284:	4220      	tst	r0, r4
 8002286:	d000      	beq.n	800228a <__aeabi_dsub+0x38a>
 8002288:	e0a2      	b.n	80023d0 <__aeabi_dsub+0x4d0>
 800228a:	4640      	mov	r0, r8
 800228c:	2800      	cmp	r0, #0
 800228e:	d000      	beq.n	8002292 <__aeabi_dsub+0x392>
 8002290:	e101      	b.n	8002496 <__aeabi_dsub+0x596>
 8002292:	4660      	mov	r0, ip
 8002294:	4318      	orrs	r0, r3
 8002296:	d100      	bne.n	800229a <__aeabi_dsub+0x39a>
 8002298:	e15e      	b.n	8002558 <__aeabi_dsub+0x658>
 800229a:	0008      	movs	r0, r1
 800229c:	4338      	orrs	r0, r7
 800229e:	d000      	beq.n	80022a2 <__aeabi_dsub+0x3a2>
 80022a0:	e15f      	b.n	8002562 <__aeabi_dsub+0x662>
 80022a2:	4661      	mov	r1, ip
 80022a4:	08db      	lsrs	r3, r3, #3
 80022a6:	0749      	lsls	r1, r1, #29
 80022a8:	430b      	orrs	r3, r1
 80022aa:	4661      	mov	r1, ip
 80022ac:	08cc      	lsrs	r4, r1, #3
 80022ae:	e7a2      	b.n	80021f6 <__aeabi_dsub+0x2f6>
 80022b0:	4dc8      	ldr	r5, [pc, #800]	; (80025d4 <__aeabi_dsub+0x6d4>)
 80022b2:	42a8      	cmp	r0, r5
 80022b4:	d100      	bne.n	80022b8 <__aeabi_dsub+0x3b8>
 80022b6:	e0cf      	b.n	8002458 <__aeabi_dsub+0x558>
 80022b8:	2580      	movs	r5, #128	; 0x80
 80022ba:	4664      	mov	r4, ip
 80022bc:	042d      	lsls	r5, r5, #16
 80022be:	432c      	orrs	r4, r5
 80022c0:	46a4      	mov	ip, r4
 80022c2:	2a38      	cmp	r2, #56	; 0x38
 80022c4:	dc56      	bgt.n	8002374 <__aeabi_dsub+0x474>
 80022c6:	2a1f      	cmp	r2, #31
 80022c8:	dd00      	ble.n	80022cc <__aeabi_dsub+0x3cc>
 80022ca:	e0d1      	b.n	8002470 <__aeabi_dsub+0x570>
 80022cc:	2520      	movs	r5, #32
 80022ce:	001e      	movs	r6, r3
 80022d0:	1aad      	subs	r5, r5, r2
 80022d2:	4664      	mov	r4, ip
 80022d4:	40ab      	lsls	r3, r5
 80022d6:	40ac      	lsls	r4, r5
 80022d8:	40d6      	lsrs	r6, r2
 80022da:	1e5d      	subs	r5, r3, #1
 80022dc:	41ab      	sbcs	r3, r5
 80022de:	4334      	orrs	r4, r6
 80022e0:	4323      	orrs	r3, r4
 80022e2:	4664      	mov	r4, ip
 80022e4:	40d4      	lsrs	r4, r2
 80022e6:	1b09      	subs	r1, r1, r4
 80022e8:	e049      	b.n	800237e <__aeabi_dsub+0x47e>
 80022ea:	4660      	mov	r0, ip
 80022ec:	1bdc      	subs	r4, r3, r7
 80022ee:	1a46      	subs	r6, r0, r1
 80022f0:	42a3      	cmp	r3, r4
 80022f2:	4180      	sbcs	r0, r0
 80022f4:	4240      	negs	r0, r0
 80022f6:	4681      	mov	r9, r0
 80022f8:	0030      	movs	r0, r6
 80022fa:	464e      	mov	r6, r9
 80022fc:	1b80      	subs	r0, r0, r6
 80022fe:	4681      	mov	r9, r0
 8002300:	0200      	lsls	r0, r0, #8
 8002302:	d476      	bmi.n	80023f2 <__aeabi_dsub+0x4f2>
 8002304:	464b      	mov	r3, r9
 8002306:	4323      	orrs	r3, r4
 8002308:	d000      	beq.n	800230c <__aeabi_dsub+0x40c>
 800230a:	e652      	b.n	8001fb2 <__aeabi_dsub+0xb2>
 800230c:	2400      	movs	r4, #0
 800230e:	2500      	movs	r5, #0
 8002310:	e771      	b.n	80021f6 <__aeabi_dsub+0x2f6>
 8002312:	4339      	orrs	r1, r7
 8002314:	000c      	movs	r4, r1
 8002316:	1e62      	subs	r2, r4, #1
 8002318:	4194      	sbcs	r4, r2
 800231a:	18e4      	adds	r4, r4, r3
 800231c:	429c      	cmp	r4, r3
 800231e:	419b      	sbcs	r3, r3
 8002320:	425b      	negs	r3, r3
 8002322:	4463      	add	r3, ip
 8002324:	4699      	mov	r9, r3
 8002326:	464b      	mov	r3, r9
 8002328:	021b      	lsls	r3, r3, #8
 800232a:	d400      	bmi.n	800232e <__aeabi_dsub+0x42e>
 800232c:	e756      	b.n	80021dc <__aeabi_dsub+0x2dc>
 800232e:	2301      	movs	r3, #1
 8002330:	469c      	mov	ip, r3
 8002332:	4ba8      	ldr	r3, [pc, #672]	; (80025d4 <__aeabi_dsub+0x6d4>)
 8002334:	44e0      	add	r8, ip
 8002336:	4598      	cmp	r8, r3
 8002338:	d038      	beq.n	80023ac <__aeabi_dsub+0x4ac>
 800233a:	464b      	mov	r3, r9
 800233c:	48a6      	ldr	r0, [pc, #664]	; (80025d8 <__aeabi_dsub+0x6d8>)
 800233e:	2201      	movs	r2, #1
 8002340:	4003      	ands	r3, r0
 8002342:	0018      	movs	r0, r3
 8002344:	0863      	lsrs	r3, r4, #1
 8002346:	4014      	ands	r4, r2
 8002348:	431c      	orrs	r4, r3
 800234a:	07c3      	lsls	r3, r0, #31
 800234c:	431c      	orrs	r4, r3
 800234e:	0843      	lsrs	r3, r0, #1
 8002350:	4699      	mov	r9, r3
 8002352:	e657      	b.n	8002004 <__aeabi_dsub+0x104>
 8002354:	0010      	movs	r0, r2
 8002356:	000e      	movs	r6, r1
 8002358:	3820      	subs	r0, #32
 800235a:	40c6      	lsrs	r6, r0
 800235c:	2a20      	cmp	r2, #32
 800235e:	d004      	beq.n	800236a <__aeabi_dsub+0x46a>
 8002360:	2040      	movs	r0, #64	; 0x40
 8002362:	1a82      	subs	r2, r0, r2
 8002364:	4091      	lsls	r1, r2
 8002366:	430f      	orrs	r7, r1
 8002368:	46b9      	mov	r9, r7
 800236a:	464f      	mov	r7, r9
 800236c:	1e7a      	subs	r2, r7, #1
 800236e:	4197      	sbcs	r7, r2
 8002370:	4337      	orrs	r7, r6
 8002372:	e60f      	b.n	8001f94 <__aeabi_dsub+0x94>
 8002374:	4662      	mov	r2, ip
 8002376:	431a      	orrs	r2, r3
 8002378:	0013      	movs	r3, r2
 800237a:	1e5a      	subs	r2, r3, #1
 800237c:	4193      	sbcs	r3, r2
 800237e:	1afc      	subs	r4, r7, r3
 8002380:	42a7      	cmp	r7, r4
 8002382:	41bf      	sbcs	r7, r7
 8002384:	427f      	negs	r7, r7
 8002386:	1bcb      	subs	r3, r1, r7
 8002388:	4699      	mov	r9, r3
 800238a:	465d      	mov	r5, fp
 800238c:	4680      	mov	r8, r0
 800238e:	e608      	b.n	8001fa2 <__aeabi_dsub+0xa2>
 8002390:	4666      	mov	r6, ip
 8002392:	431e      	orrs	r6, r3
 8002394:	d100      	bne.n	8002398 <__aeabi_dsub+0x498>
 8002396:	e0be      	b.n	8002516 <__aeabi_dsub+0x616>
 8002398:	1e56      	subs	r6, r2, #1
 800239a:	2a01      	cmp	r2, #1
 800239c:	d100      	bne.n	80023a0 <__aeabi_dsub+0x4a0>
 800239e:	e109      	b.n	80025b4 <__aeabi_dsub+0x6b4>
 80023a0:	4c8c      	ldr	r4, [pc, #560]	; (80025d4 <__aeabi_dsub+0x6d4>)
 80023a2:	42a2      	cmp	r2, r4
 80023a4:	d100      	bne.n	80023a8 <__aeabi_dsub+0x4a8>
 80023a6:	e119      	b.n	80025dc <__aeabi_dsub+0x6dc>
 80023a8:	0032      	movs	r2, r6
 80023aa:	e6c1      	b.n	8002130 <__aeabi_dsub+0x230>
 80023ac:	4642      	mov	r2, r8
 80023ae:	2400      	movs	r4, #0
 80023b0:	2300      	movs	r3, #0
 80023b2:	e648      	b.n	8002046 <__aeabi_dsub+0x146>
 80023b4:	2020      	movs	r0, #32
 80023b6:	000c      	movs	r4, r1
 80023b8:	1a80      	subs	r0, r0, r2
 80023ba:	003e      	movs	r6, r7
 80023bc:	4087      	lsls	r7, r0
 80023be:	4084      	lsls	r4, r0
 80023c0:	40d6      	lsrs	r6, r2
 80023c2:	1e78      	subs	r0, r7, #1
 80023c4:	4187      	sbcs	r7, r0
 80023c6:	40d1      	lsrs	r1, r2
 80023c8:	4334      	orrs	r4, r6
 80023ca:	433c      	orrs	r4, r7
 80023cc:	448c      	add	ip, r1
 80023ce:	e7a4      	b.n	800231a <__aeabi_dsub+0x41a>
 80023d0:	4a80      	ldr	r2, [pc, #512]	; (80025d4 <__aeabi_dsub+0x6d4>)
 80023d2:	4290      	cmp	r0, r2
 80023d4:	d100      	bne.n	80023d8 <__aeabi_dsub+0x4d8>
 80023d6:	e0e9      	b.n	80025ac <__aeabi_dsub+0x6ac>
 80023d8:	19df      	adds	r7, r3, r7
 80023da:	429f      	cmp	r7, r3
 80023dc:	419b      	sbcs	r3, r3
 80023de:	4461      	add	r1, ip
 80023e0:	425b      	negs	r3, r3
 80023e2:	18c9      	adds	r1, r1, r3
 80023e4:	07cc      	lsls	r4, r1, #31
 80023e6:	087f      	lsrs	r7, r7, #1
 80023e8:	084b      	lsrs	r3, r1, #1
 80023ea:	4699      	mov	r9, r3
 80023ec:	4680      	mov	r8, r0
 80023ee:	433c      	orrs	r4, r7
 80023f0:	e6f4      	b.n	80021dc <__aeabi_dsub+0x2dc>
 80023f2:	1afc      	subs	r4, r7, r3
 80023f4:	42a7      	cmp	r7, r4
 80023f6:	41bf      	sbcs	r7, r7
 80023f8:	4663      	mov	r3, ip
 80023fa:	427f      	negs	r7, r7
 80023fc:	1ac9      	subs	r1, r1, r3
 80023fe:	1bcb      	subs	r3, r1, r7
 8002400:	4699      	mov	r9, r3
 8002402:	465d      	mov	r5, fp
 8002404:	e5d5      	b.n	8001fb2 <__aeabi_dsub+0xb2>
 8002406:	08ff      	lsrs	r7, r7, #3
 8002408:	074b      	lsls	r3, r1, #29
 800240a:	465d      	mov	r5, fp
 800240c:	433b      	orrs	r3, r7
 800240e:	08cc      	lsrs	r4, r1, #3
 8002410:	e6ee      	b.n	80021f0 <__aeabi_dsub+0x2f0>
 8002412:	4662      	mov	r2, ip
 8002414:	431a      	orrs	r2, r3
 8002416:	d000      	beq.n	800241a <__aeabi_dsub+0x51a>
 8002418:	e082      	b.n	8002520 <__aeabi_dsub+0x620>
 800241a:	000b      	movs	r3, r1
 800241c:	433b      	orrs	r3, r7
 800241e:	d11b      	bne.n	8002458 <__aeabi_dsub+0x558>
 8002420:	2480      	movs	r4, #128	; 0x80
 8002422:	2500      	movs	r5, #0
 8002424:	0324      	lsls	r4, r4, #12
 8002426:	e6f9      	b.n	800221c <__aeabi_dsub+0x31c>
 8002428:	19dc      	adds	r4, r3, r7
 800242a:	429c      	cmp	r4, r3
 800242c:	419b      	sbcs	r3, r3
 800242e:	4461      	add	r1, ip
 8002430:	4689      	mov	r9, r1
 8002432:	425b      	negs	r3, r3
 8002434:	4499      	add	r9, r3
 8002436:	464b      	mov	r3, r9
 8002438:	021b      	lsls	r3, r3, #8
 800243a:	d444      	bmi.n	80024c6 <__aeabi_dsub+0x5c6>
 800243c:	2301      	movs	r3, #1
 800243e:	4698      	mov	r8, r3
 8002440:	e6cc      	b.n	80021dc <__aeabi_dsub+0x2dc>
 8002442:	1bdc      	subs	r4, r3, r7
 8002444:	4662      	mov	r2, ip
 8002446:	42a3      	cmp	r3, r4
 8002448:	419b      	sbcs	r3, r3
 800244a:	1a51      	subs	r1, r2, r1
 800244c:	425b      	negs	r3, r3
 800244e:	1acb      	subs	r3, r1, r3
 8002450:	4699      	mov	r9, r3
 8002452:	2301      	movs	r3, #1
 8002454:	4698      	mov	r8, r3
 8002456:	e5a4      	b.n	8001fa2 <__aeabi_dsub+0xa2>
 8002458:	08ff      	lsrs	r7, r7, #3
 800245a:	074b      	lsls	r3, r1, #29
 800245c:	465d      	mov	r5, fp
 800245e:	433b      	orrs	r3, r7
 8002460:	08cc      	lsrs	r4, r1, #3
 8002462:	e6d7      	b.n	8002214 <__aeabi_dsub+0x314>
 8002464:	4662      	mov	r2, ip
 8002466:	431a      	orrs	r2, r3
 8002468:	0014      	movs	r4, r2
 800246a:	1e63      	subs	r3, r4, #1
 800246c:	419c      	sbcs	r4, r3
 800246e:	e679      	b.n	8002164 <__aeabi_dsub+0x264>
 8002470:	0015      	movs	r5, r2
 8002472:	4664      	mov	r4, ip
 8002474:	3d20      	subs	r5, #32
 8002476:	40ec      	lsrs	r4, r5
 8002478:	46a0      	mov	r8, r4
 800247a:	2a20      	cmp	r2, #32
 800247c:	d005      	beq.n	800248a <__aeabi_dsub+0x58a>
 800247e:	2540      	movs	r5, #64	; 0x40
 8002480:	4664      	mov	r4, ip
 8002482:	1aaa      	subs	r2, r5, r2
 8002484:	4094      	lsls	r4, r2
 8002486:	4323      	orrs	r3, r4
 8002488:	469a      	mov	sl, r3
 800248a:	4654      	mov	r4, sl
 800248c:	1e63      	subs	r3, r4, #1
 800248e:	419c      	sbcs	r4, r3
 8002490:	4643      	mov	r3, r8
 8002492:	4323      	orrs	r3, r4
 8002494:	e773      	b.n	800237e <__aeabi_dsub+0x47e>
 8002496:	4662      	mov	r2, ip
 8002498:	431a      	orrs	r2, r3
 800249a:	d023      	beq.n	80024e4 <__aeabi_dsub+0x5e4>
 800249c:	000a      	movs	r2, r1
 800249e:	433a      	orrs	r2, r7
 80024a0:	d000      	beq.n	80024a4 <__aeabi_dsub+0x5a4>
 80024a2:	e0a0      	b.n	80025e6 <__aeabi_dsub+0x6e6>
 80024a4:	4662      	mov	r2, ip
 80024a6:	08db      	lsrs	r3, r3, #3
 80024a8:	0752      	lsls	r2, r2, #29
 80024aa:	4313      	orrs	r3, r2
 80024ac:	4662      	mov	r2, ip
 80024ae:	08d4      	lsrs	r4, r2, #3
 80024b0:	e6b0      	b.n	8002214 <__aeabi_dsub+0x314>
 80024b2:	000b      	movs	r3, r1
 80024b4:	433b      	orrs	r3, r7
 80024b6:	d100      	bne.n	80024ba <__aeabi_dsub+0x5ba>
 80024b8:	e728      	b.n	800230c <__aeabi_dsub+0x40c>
 80024ba:	08ff      	lsrs	r7, r7, #3
 80024bc:	074b      	lsls	r3, r1, #29
 80024be:	465d      	mov	r5, fp
 80024c0:	433b      	orrs	r3, r7
 80024c2:	08cc      	lsrs	r4, r1, #3
 80024c4:	e697      	b.n	80021f6 <__aeabi_dsub+0x2f6>
 80024c6:	2302      	movs	r3, #2
 80024c8:	4698      	mov	r8, r3
 80024ca:	e736      	b.n	800233a <__aeabi_dsub+0x43a>
 80024cc:	1afc      	subs	r4, r7, r3
 80024ce:	42a7      	cmp	r7, r4
 80024d0:	41bf      	sbcs	r7, r7
 80024d2:	4663      	mov	r3, ip
 80024d4:	427f      	negs	r7, r7
 80024d6:	1ac9      	subs	r1, r1, r3
 80024d8:	1bcb      	subs	r3, r1, r7
 80024da:	4699      	mov	r9, r3
 80024dc:	2301      	movs	r3, #1
 80024de:	465d      	mov	r5, fp
 80024e0:	4698      	mov	r8, r3
 80024e2:	e55e      	b.n	8001fa2 <__aeabi_dsub+0xa2>
 80024e4:	074b      	lsls	r3, r1, #29
 80024e6:	08ff      	lsrs	r7, r7, #3
 80024e8:	433b      	orrs	r3, r7
 80024ea:	08cc      	lsrs	r4, r1, #3
 80024ec:	e692      	b.n	8002214 <__aeabi_dsub+0x314>
 80024ee:	1bdc      	subs	r4, r3, r7
 80024f0:	4660      	mov	r0, ip
 80024f2:	42a3      	cmp	r3, r4
 80024f4:	41b6      	sbcs	r6, r6
 80024f6:	1a40      	subs	r0, r0, r1
 80024f8:	4276      	negs	r6, r6
 80024fa:	1b80      	subs	r0, r0, r6
 80024fc:	4681      	mov	r9, r0
 80024fe:	0200      	lsls	r0, r0, #8
 8002500:	d560      	bpl.n	80025c4 <__aeabi_dsub+0x6c4>
 8002502:	1afc      	subs	r4, r7, r3
 8002504:	42a7      	cmp	r7, r4
 8002506:	41bf      	sbcs	r7, r7
 8002508:	4663      	mov	r3, ip
 800250a:	427f      	negs	r7, r7
 800250c:	1ac9      	subs	r1, r1, r3
 800250e:	1bcb      	subs	r3, r1, r7
 8002510:	4699      	mov	r9, r3
 8002512:	465d      	mov	r5, fp
 8002514:	e576      	b.n	8002004 <__aeabi_dsub+0x104>
 8002516:	08ff      	lsrs	r7, r7, #3
 8002518:	074b      	lsls	r3, r1, #29
 800251a:	433b      	orrs	r3, r7
 800251c:	08cc      	lsrs	r4, r1, #3
 800251e:	e667      	b.n	80021f0 <__aeabi_dsub+0x2f0>
 8002520:	000a      	movs	r2, r1
 8002522:	08db      	lsrs	r3, r3, #3
 8002524:	433a      	orrs	r2, r7
 8002526:	d100      	bne.n	800252a <__aeabi_dsub+0x62a>
 8002528:	e66f      	b.n	800220a <__aeabi_dsub+0x30a>
 800252a:	4662      	mov	r2, ip
 800252c:	0752      	lsls	r2, r2, #29
 800252e:	4313      	orrs	r3, r2
 8002530:	4662      	mov	r2, ip
 8002532:	08d4      	lsrs	r4, r2, #3
 8002534:	2280      	movs	r2, #128	; 0x80
 8002536:	0312      	lsls	r2, r2, #12
 8002538:	4214      	tst	r4, r2
 800253a:	d007      	beq.n	800254c <__aeabi_dsub+0x64c>
 800253c:	08c8      	lsrs	r0, r1, #3
 800253e:	4210      	tst	r0, r2
 8002540:	d104      	bne.n	800254c <__aeabi_dsub+0x64c>
 8002542:	465d      	mov	r5, fp
 8002544:	0004      	movs	r4, r0
 8002546:	08fb      	lsrs	r3, r7, #3
 8002548:	0749      	lsls	r1, r1, #29
 800254a:	430b      	orrs	r3, r1
 800254c:	0f5a      	lsrs	r2, r3, #29
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	08db      	lsrs	r3, r3, #3
 8002552:	0752      	lsls	r2, r2, #29
 8002554:	4313      	orrs	r3, r2
 8002556:	e65d      	b.n	8002214 <__aeabi_dsub+0x314>
 8002558:	074b      	lsls	r3, r1, #29
 800255a:	08ff      	lsrs	r7, r7, #3
 800255c:	433b      	orrs	r3, r7
 800255e:	08cc      	lsrs	r4, r1, #3
 8002560:	e649      	b.n	80021f6 <__aeabi_dsub+0x2f6>
 8002562:	19dc      	adds	r4, r3, r7
 8002564:	429c      	cmp	r4, r3
 8002566:	419b      	sbcs	r3, r3
 8002568:	4461      	add	r1, ip
 800256a:	4689      	mov	r9, r1
 800256c:	425b      	negs	r3, r3
 800256e:	4499      	add	r9, r3
 8002570:	464b      	mov	r3, r9
 8002572:	021b      	lsls	r3, r3, #8
 8002574:	d400      	bmi.n	8002578 <__aeabi_dsub+0x678>
 8002576:	e631      	b.n	80021dc <__aeabi_dsub+0x2dc>
 8002578:	464a      	mov	r2, r9
 800257a:	4b17      	ldr	r3, [pc, #92]	; (80025d8 <__aeabi_dsub+0x6d8>)
 800257c:	401a      	ands	r2, r3
 800257e:	2301      	movs	r3, #1
 8002580:	4691      	mov	r9, r2
 8002582:	4698      	mov	r8, r3
 8002584:	e62a      	b.n	80021dc <__aeabi_dsub+0x2dc>
 8002586:	0016      	movs	r6, r2
 8002588:	4664      	mov	r4, ip
 800258a:	3e20      	subs	r6, #32
 800258c:	40f4      	lsrs	r4, r6
 800258e:	46a0      	mov	r8, r4
 8002590:	2a20      	cmp	r2, #32
 8002592:	d005      	beq.n	80025a0 <__aeabi_dsub+0x6a0>
 8002594:	2640      	movs	r6, #64	; 0x40
 8002596:	4664      	mov	r4, ip
 8002598:	1ab2      	subs	r2, r6, r2
 800259a:	4094      	lsls	r4, r2
 800259c:	4323      	orrs	r3, r4
 800259e:	469a      	mov	sl, r3
 80025a0:	4654      	mov	r4, sl
 80025a2:	1e63      	subs	r3, r4, #1
 80025a4:	419c      	sbcs	r4, r3
 80025a6:	4643      	mov	r3, r8
 80025a8:	431c      	orrs	r4, r3
 80025aa:	e5db      	b.n	8002164 <__aeabi_dsub+0x264>
 80025ac:	0002      	movs	r2, r0
 80025ae:	2400      	movs	r4, #0
 80025b0:	2300      	movs	r3, #0
 80025b2:	e548      	b.n	8002046 <__aeabi_dsub+0x146>
 80025b4:	19dc      	adds	r4, r3, r7
 80025b6:	42bc      	cmp	r4, r7
 80025b8:	41bf      	sbcs	r7, r7
 80025ba:	4461      	add	r1, ip
 80025bc:	4689      	mov	r9, r1
 80025be:	427f      	negs	r7, r7
 80025c0:	44b9      	add	r9, r7
 80025c2:	e738      	b.n	8002436 <__aeabi_dsub+0x536>
 80025c4:	464b      	mov	r3, r9
 80025c6:	4323      	orrs	r3, r4
 80025c8:	d100      	bne.n	80025cc <__aeabi_dsub+0x6cc>
 80025ca:	e69f      	b.n	800230c <__aeabi_dsub+0x40c>
 80025cc:	e606      	b.n	80021dc <__aeabi_dsub+0x2dc>
 80025ce:	46c0      	nop			; (mov r8, r8)
 80025d0:	000007fe 	.word	0x000007fe
 80025d4:	000007ff 	.word	0x000007ff
 80025d8:	ff7fffff 	.word	0xff7fffff
 80025dc:	08ff      	lsrs	r7, r7, #3
 80025de:	074b      	lsls	r3, r1, #29
 80025e0:	433b      	orrs	r3, r7
 80025e2:	08cc      	lsrs	r4, r1, #3
 80025e4:	e616      	b.n	8002214 <__aeabi_dsub+0x314>
 80025e6:	4662      	mov	r2, ip
 80025e8:	08db      	lsrs	r3, r3, #3
 80025ea:	0752      	lsls	r2, r2, #29
 80025ec:	4313      	orrs	r3, r2
 80025ee:	4662      	mov	r2, ip
 80025f0:	08d4      	lsrs	r4, r2, #3
 80025f2:	2280      	movs	r2, #128	; 0x80
 80025f4:	0312      	lsls	r2, r2, #12
 80025f6:	4214      	tst	r4, r2
 80025f8:	d007      	beq.n	800260a <__aeabi_dsub+0x70a>
 80025fa:	08c8      	lsrs	r0, r1, #3
 80025fc:	4210      	tst	r0, r2
 80025fe:	d104      	bne.n	800260a <__aeabi_dsub+0x70a>
 8002600:	465d      	mov	r5, fp
 8002602:	0004      	movs	r4, r0
 8002604:	08fb      	lsrs	r3, r7, #3
 8002606:	0749      	lsls	r1, r1, #29
 8002608:	430b      	orrs	r3, r1
 800260a:	0f5a      	lsrs	r2, r3, #29
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	0752      	lsls	r2, r2, #29
 8002610:	08db      	lsrs	r3, r3, #3
 8002612:	4313      	orrs	r3, r2
 8002614:	e5fe      	b.n	8002214 <__aeabi_dsub+0x314>
 8002616:	2300      	movs	r3, #0
 8002618:	4a01      	ldr	r2, [pc, #4]	; (8002620 <__aeabi_dsub+0x720>)
 800261a:	001c      	movs	r4, r3
 800261c:	e513      	b.n	8002046 <__aeabi_dsub+0x146>
 800261e:	46c0      	nop			; (mov r8, r8)
 8002620:	000007ff 	.word	0x000007ff

08002624 <__aeabi_dcmpun>:
 8002624:	b570      	push	{r4, r5, r6, lr}
 8002626:	0005      	movs	r5, r0
 8002628:	480c      	ldr	r0, [pc, #48]	; (800265c <__aeabi_dcmpun+0x38>)
 800262a:	031c      	lsls	r4, r3, #12
 800262c:	0016      	movs	r6, r2
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	030a      	lsls	r2, r1, #12
 8002632:	0049      	lsls	r1, r1, #1
 8002634:	0b12      	lsrs	r2, r2, #12
 8002636:	0d49      	lsrs	r1, r1, #21
 8002638:	0b24      	lsrs	r4, r4, #12
 800263a:	0d5b      	lsrs	r3, r3, #21
 800263c:	4281      	cmp	r1, r0
 800263e:	d008      	beq.n	8002652 <__aeabi_dcmpun+0x2e>
 8002640:	4a06      	ldr	r2, [pc, #24]	; (800265c <__aeabi_dcmpun+0x38>)
 8002642:	2000      	movs	r0, #0
 8002644:	4293      	cmp	r3, r2
 8002646:	d103      	bne.n	8002650 <__aeabi_dcmpun+0x2c>
 8002648:	0020      	movs	r0, r4
 800264a:	4330      	orrs	r0, r6
 800264c:	1e43      	subs	r3, r0, #1
 800264e:	4198      	sbcs	r0, r3
 8002650:	bd70      	pop	{r4, r5, r6, pc}
 8002652:	2001      	movs	r0, #1
 8002654:	432a      	orrs	r2, r5
 8002656:	d1fb      	bne.n	8002650 <__aeabi_dcmpun+0x2c>
 8002658:	e7f2      	b.n	8002640 <__aeabi_dcmpun+0x1c>
 800265a:	46c0      	nop			; (mov r8, r8)
 800265c:	000007ff 	.word	0x000007ff

08002660 <__aeabi_d2iz>:
 8002660:	000a      	movs	r2, r1
 8002662:	b530      	push	{r4, r5, lr}
 8002664:	4c13      	ldr	r4, [pc, #76]	; (80026b4 <__aeabi_d2iz+0x54>)
 8002666:	0053      	lsls	r3, r2, #1
 8002668:	0309      	lsls	r1, r1, #12
 800266a:	0005      	movs	r5, r0
 800266c:	0b09      	lsrs	r1, r1, #12
 800266e:	2000      	movs	r0, #0
 8002670:	0d5b      	lsrs	r3, r3, #21
 8002672:	0fd2      	lsrs	r2, r2, #31
 8002674:	42a3      	cmp	r3, r4
 8002676:	dd04      	ble.n	8002682 <__aeabi_d2iz+0x22>
 8002678:	480f      	ldr	r0, [pc, #60]	; (80026b8 <__aeabi_d2iz+0x58>)
 800267a:	4283      	cmp	r3, r0
 800267c:	dd02      	ble.n	8002684 <__aeabi_d2iz+0x24>
 800267e:	4b0f      	ldr	r3, [pc, #60]	; (80026bc <__aeabi_d2iz+0x5c>)
 8002680:	18d0      	adds	r0, r2, r3
 8002682:	bd30      	pop	{r4, r5, pc}
 8002684:	2080      	movs	r0, #128	; 0x80
 8002686:	0340      	lsls	r0, r0, #13
 8002688:	4301      	orrs	r1, r0
 800268a:	480d      	ldr	r0, [pc, #52]	; (80026c0 <__aeabi_d2iz+0x60>)
 800268c:	1ac0      	subs	r0, r0, r3
 800268e:	281f      	cmp	r0, #31
 8002690:	dd08      	ble.n	80026a4 <__aeabi_d2iz+0x44>
 8002692:	480c      	ldr	r0, [pc, #48]	; (80026c4 <__aeabi_d2iz+0x64>)
 8002694:	1ac3      	subs	r3, r0, r3
 8002696:	40d9      	lsrs	r1, r3
 8002698:	000b      	movs	r3, r1
 800269a:	4258      	negs	r0, r3
 800269c:	2a00      	cmp	r2, #0
 800269e:	d1f0      	bne.n	8002682 <__aeabi_d2iz+0x22>
 80026a0:	0018      	movs	r0, r3
 80026a2:	e7ee      	b.n	8002682 <__aeabi_d2iz+0x22>
 80026a4:	4c08      	ldr	r4, [pc, #32]	; (80026c8 <__aeabi_d2iz+0x68>)
 80026a6:	40c5      	lsrs	r5, r0
 80026a8:	46a4      	mov	ip, r4
 80026aa:	4463      	add	r3, ip
 80026ac:	4099      	lsls	r1, r3
 80026ae:	000b      	movs	r3, r1
 80026b0:	432b      	orrs	r3, r5
 80026b2:	e7f2      	b.n	800269a <__aeabi_d2iz+0x3a>
 80026b4:	000003fe 	.word	0x000003fe
 80026b8:	0000041d 	.word	0x0000041d
 80026bc:	7fffffff 	.word	0x7fffffff
 80026c0:	00000433 	.word	0x00000433
 80026c4:	00000413 	.word	0x00000413
 80026c8:	fffffbed 	.word	0xfffffbed

080026cc <__aeabi_i2d>:
 80026cc:	b570      	push	{r4, r5, r6, lr}
 80026ce:	2800      	cmp	r0, #0
 80026d0:	d016      	beq.n	8002700 <__aeabi_i2d+0x34>
 80026d2:	17c3      	asrs	r3, r0, #31
 80026d4:	18c5      	adds	r5, r0, r3
 80026d6:	405d      	eors	r5, r3
 80026d8:	0fc4      	lsrs	r4, r0, #31
 80026da:	0028      	movs	r0, r5
 80026dc:	f000 f91c 	bl	8002918 <__clzsi2>
 80026e0:	4a11      	ldr	r2, [pc, #68]	; (8002728 <__aeabi_i2d+0x5c>)
 80026e2:	1a12      	subs	r2, r2, r0
 80026e4:	280a      	cmp	r0, #10
 80026e6:	dc16      	bgt.n	8002716 <__aeabi_i2d+0x4a>
 80026e8:	0003      	movs	r3, r0
 80026ea:	002e      	movs	r6, r5
 80026ec:	3315      	adds	r3, #21
 80026ee:	409e      	lsls	r6, r3
 80026f0:	230b      	movs	r3, #11
 80026f2:	1a18      	subs	r0, r3, r0
 80026f4:	40c5      	lsrs	r5, r0
 80026f6:	0552      	lsls	r2, r2, #21
 80026f8:	032d      	lsls	r5, r5, #12
 80026fa:	0b2d      	lsrs	r5, r5, #12
 80026fc:	0d53      	lsrs	r3, r2, #21
 80026fe:	e003      	b.n	8002708 <__aeabi_i2d+0x3c>
 8002700:	2400      	movs	r4, #0
 8002702:	2300      	movs	r3, #0
 8002704:	2500      	movs	r5, #0
 8002706:	2600      	movs	r6, #0
 8002708:	051b      	lsls	r3, r3, #20
 800270a:	432b      	orrs	r3, r5
 800270c:	07e4      	lsls	r4, r4, #31
 800270e:	4323      	orrs	r3, r4
 8002710:	0030      	movs	r0, r6
 8002712:	0019      	movs	r1, r3
 8002714:	bd70      	pop	{r4, r5, r6, pc}
 8002716:	380b      	subs	r0, #11
 8002718:	4085      	lsls	r5, r0
 800271a:	0552      	lsls	r2, r2, #21
 800271c:	032d      	lsls	r5, r5, #12
 800271e:	2600      	movs	r6, #0
 8002720:	0b2d      	lsrs	r5, r5, #12
 8002722:	0d53      	lsrs	r3, r2, #21
 8002724:	e7f0      	b.n	8002708 <__aeabi_i2d+0x3c>
 8002726:	46c0      	nop			; (mov r8, r8)
 8002728:	0000041e 	.word	0x0000041e

0800272c <__aeabi_ui2d>:
 800272c:	b510      	push	{r4, lr}
 800272e:	1e04      	subs	r4, r0, #0
 8002730:	d010      	beq.n	8002754 <__aeabi_ui2d+0x28>
 8002732:	f000 f8f1 	bl	8002918 <__clzsi2>
 8002736:	4b0f      	ldr	r3, [pc, #60]	; (8002774 <__aeabi_ui2d+0x48>)
 8002738:	1a1b      	subs	r3, r3, r0
 800273a:	280a      	cmp	r0, #10
 800273c:	dc11      	bgt.n	8002762 <__aeabi_ui2d+0x36>
 800273e:	220b      	movs	r2, #11
 8002740:	0021      	movs	r1, r4
 8002742:	1a12      	subs	r2, r2, r0
 8002744:	40d1      	lsrs	r1, r2
 8002746:	3015      	adds	r0, #21
 8002748:	030a      	lsls	r2, r1, #12
 800274a:	055b      	lsls	r3, r3, #21
 800274c:	4084      	lsls	r4, r0
 800274e:	0b12      	lsrs	r2, r2, #12
 8002750:	0d5b      	lsrs	r3, r3, #21
 8002752:	e001      	b.n	8002758 <__aeabi_ui2d+0x2c>
 8002754:	2300      	movs	r3, #0
 8002756:	2200      	movs	r2, #0
 8002758:	051b      	lsls	r3, r3, #20
 800275a:	4313      	orrs	r3, r2
 800275c:	0020      	movs	r0, r4
 800275e:	0019      	movs	r1, r3
 8002760:	bd10      	pop	{r4, pc}
 8002762:	0022      	movs	r2, r4
 8002764:	380b      	subs	r0, #11
 8002766:	4082      	lsls	r2, r0
 8002768:	055b      	lsls	r3, r3, #21
 800276a:	0312      	lsls	r2, r2, #12
 800276c:	2400      	movs	r4, #0
 800276e:	0b12      	lsrs	r2, r2, #12
 8002770:	0d5b      	lsrs	r3, r3, #21
 8002772:	e7f1      	b.n	8002758 <__aeabi_ui2d+0x2c>
 8002774:	0000041e 	.word	0x0000041e

08002778 <__aeabi_f2d>:
 8002778:	b570      	push	{r4, r5, r6, lr}
 800277a:	0043      	lsls	r3, r0, #1
 800277c:	0246      	lsls	r6, r0, #9
 800277e:	0fc4      	lsrs	r4, r0, #31
 8002780:	20fe      	movs	r0, #254	; 0xfe
 8002782:	0e1b      	lsrs	r3, r3, #24
 8002784:	1c59      	adds	r1, r3, #1
 8002786:	0a75      	lsrs	r5, r6, #9
 8002788:	4208      	tst	r0, r1
 800278a:	d00c      	beq.n	80027a6 <__aeabi_f2d+0x2e>
 800278c:	22e0      	movs	r2, #224	; 0xe0
 800278e:	0092      	lsls	r2, r2, #2
 8002790:	4694      	mov	ip, r2
 8002792:	076d      	lsls	r5, r5, #29
 8002794:	0b36      	lsrs	r6, r6, #12
 8002796:	4463      	add	r3, ip
 8002798:	051b      	lsls	r3, r3, #20
 800279a:	4333      	orrs	r3, r6
 800279c:	07e4      	lsls	r4, r4, #31
 800279e:	4323      	orrs	r3, r4
 80027a0:	0028      	movs	r0, r5
 80027a2:	0019      	movs	r1, r3
 80027a4:	bd70      	pop	{r4, r5, r6, pc}
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d114      	bne.n	80027d4 <__aeabi_f2d+0x5c>
 80027aa:	2d00      	cmp	r5, #0
 80027ac:	d01b      	beq.n	80027e6 <__aeabi_f2d+0x6e>
 80027ae:	0028      	movs	r0, r5
 80027b0:	f000 f8b2 	bl	8002918 <__clzsi2>
 80027b4:	280a      	cmp	r0, #10
 80027b6:	dc1c      	bgt.n	80027f2 <__aeabi_f2d+0x7a>
 80027b8:	230b      	movs	r3, #11
 80027ba:	002e      	movs	r6, r5
 80027bc:	1a1b      	subs	r3, r3, r0
 80027be:	40de      	lsrs	r6, r3
 80027c0:	0003      	movs	r3, r0
 80027c2:	3315      	adds	r3, #21
 80027c4:	409d      	lsls	r5, r3
 80027c6:	4a0e      	ldr	r2, [pc, #56]	; (8002800 <__aeabi_f2d+0x88>)
 80027c8:	0336      	lsls	r6, r6, #12
 80027ca:	1a12      	subs	r2, r2, r0
 80027cc:	0552      	lsls	r2, r2, #21
 80027ce:	0b36      	lsrs	r6, r6, #12
 80027d0:	0d53      	lsrs	r3, r2, #21
 80027d2:	e7e1      	b.n	8002798 <__aeabi_f2d+0x20>
 80027d4:	2d00      	cmp	r5, #0
 80027d6:	d009      	beq.n	80027ec <__aeabi_f2d+0x74>
 80027d8:	2280      	movs	r2, #128	; 0x80
 80027da:	0b36      	lsrs	r6, r6, #12
 80027dc:	0312      	lsls	r2, r2, #12
 80027de:	4b09      	ldr	r3, [pc, #36]	; (8002804 <__aeabi_f2d+0x8c>)
 80027e0:	076d      	lsls	r5, r5, #29
 80027e2:	4316      	orrs	r6, r2
 80027e4:	e7d8      	b.n	8002798 <__aeabi_f2d+0x20>
 80027e6:	2300      	movs	r3, #0
 80027e8:	2600      	movs	r6, #0
 80027ea:	e7d5      	b.n	8002798 <__aeabi_f2d+0x20>
 80027ec:	2600      	movs	r6, #0
 80027ee:	4b05      	ldr	r3, [pc, #20]	; (8002804 <__aeabi_f2d+0x8c>)
 80027f0:	e7d2      	b.n	8002798 <__aeabi_f2d+0x20>
 80027f2:	0003      	movs	r3, r0
 80027f4:	3b0b      	subs	r3, #11
 80027f6:	409d      	lsls	r5, r3
 80027f8:	002e      	movs	r6, r5
 80027fa:	2500      	movs	r5, #0
 80027fc:	e7e3      	b.n	80027c6 <__aeabi_f2d+0x4e>
 80027fe:	46c0      	nop			; (mov r8, r8)
 8002800:	00000389 	.word	0x00000389
 8002804:	000007ff 	.word	0x000007ff

08002808 <__aeabi_d2f>:
 8002808:	0002      	movs	r2, r0
 800280a:	004b      	lsls	r3, r1, #1
 800280c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800280e:	0d5b      	lsrs	r3, r3, #21
 8002810:	030c      	lsls	r4, r1, #12
 8002812:	4e3d      	ldr	r6, [pc, #244]	; (8002908 <__aeabi_d2f+0x100>)
 8002814:	0a64      	lsrs	r4, r4, #9
 8002816:	0f40      	lsrs	r0, r0, #29
 8002818:	1c5f      	adds	r7, r3, #1
 800281a:	0fc9      	lsrs	r1, r1, #31
 800281c:	4304      	orrs	r4, r0
 800281e:	00d5      	lsls	r5, r2, #3
 8002820:	4237      	tst	r7, r6
 8002822:	d00a      	beq.n	800283a <__aeabi_d2f+0x32>
 8002824:	4839      	ldr	r0, [pc, #228]	; (800290c <__aeabi_d2f+0x104>)
 8002826:	181e      	adds	r6, r3, r0
 8002828:	2efe      	cmp	r6, #254	; 0xfe
 800282a:	dd16      	ble.n	800285a <__aeabi_d2f+0x52>
 800282c:	20ff      	movs	r0, #255	; 0xff
 800282e:	2400      	movs	r4, #0
 8002830:	05c0      	lsls	r0, r0, #23
 8002832:	4320      	orrs	r0, r4
 8002834:	07c9      	lsls	r1, r1, #31
 8002836:	4308      	orrs	r0, r1
 8002838:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800283a:	2b00      	cmp	r3, #0
 800283c:	d106      	bne.n	800284c <__aeabi_d2f+0x44>
 800283e:	432c      	orrs	r4, r5
 8002840:	d026      	beq.n	8002890 <__aeabi_d2f+0x88>
 8002842:	2205      	movs	r2, #5
 8002844:	0192      	lsls	r2, r2, #6
 8002846:	0a54      	lsrs	r4, r2, #9
 8002848:	b2d8      	uxtb	r0, r3
 800284a:	e7f1      	b.n	8002830 <__aeabi_d2f+0x28>
 800284c:	4325      	orrs	r5, r4
 800284e:	d0ed      	beq.n	800282c <__aeabi_d2f+0x24>
 8002850:	2080      	movs	r0, #128	; 0x80
 8002852:	03c0      	lsls	r0, r0, #15
 8002854:	4304      	orrs	r4, r0
 8002856:	20ff      	movs	r0, #255	; 0xff
 8002858:	e7ea      	b.n	8002830 <__aeabi_d2f+0x28>
 800285a:	2e00      	cmp	r6, #0
 800285c:	dd1b      	ble.n	8002896 <__aeabi_d2f+0x8e>
 800285e:	0192      	lsls	r2, r2, #6
 8002860:	1e53      	subs	r3, r2, #1
 8002862:	419a      	sbcs	r2, r3
 8002864:	00e4      	lsls	r4, r4, #3
 8002866:	0f6d      	lsrs	r5, r5, #29
 8002868:	4322      	orrs	r2, r4
 800286a:	432a      	orrs	r2, r5
 800286c:	0753      	lsls	r3, r2, #29
 800286e:	d048      	beq.n	8002902 <__aeabi_d2f+0xfa>
 8002870:	230f      	movs	r3, #15
 8002872:	4013      	ands	r3, r2
 8002874:	2b04      	cmp	r3, #4
 8002876:	d000      	beq.n	800287a <__aeabi_d2f+0x72>
 8002878:	3204      	adds	r2, #4
 800287a:	2380      	movs	r3, #128	; 0x80
 800287c:	04db      	lsls	r3, r3, #19
 800287e:	4013      	ands	r3, r2
 8002880:	d03f      	beq.n	8002902 <__aeabi_d2f+0xfa>
 8002882:	1c70      	adds	r0, r6, #1
 8002884:	2efe      	cmp	r6, #254	; 0xfe
 8002886:	d0d1      	beq.n	800282c <__aeabi_d2f+0x24>
 8002888:	0192      	lsls	r2, r2, #6
 800288a:	0a54      	lsrs	r4, r2, #9
 800288c:	b2c0      	uxtb	r0, r0
 800288e:	e7cf      	b.n	8002830 <__aeabi_d2f+0x28>
 8002890:	2000      	movs	r0, #0
 8002892:	2400      	movs	r4, #0
 8002894:	e7cc      	b.n	8002830 <__aeabi_d2f+0x28>
 8002896:	0032      	movs	r2, r6
 8002898:	3217      	adds	r2, #23
 800289a:	db22      	blt.n	80028e2 <__aeabi_d2f+0xda>
 800289c:	2080      	movs	r0, #128	; 0x80
 800289e:	0400      	lsls	r0, r0, #16
 80028a0:	4320      	orrs	r0, r4
 80028a2:	241e      	movs	r4, #30
 80028a4:	1ba4      	subs	r4, r4, r6
 80028a6:	2c1f      	cmp	r4, #31
 80028a8:	dd1d      	ble.n	80028e6 <__aeabi_d2f+0xde>
 80028aa:	2202      	movs	r2, #2
 80028ac:	4252      	negs	r2, r2
 80028ae:	1b96      	subs	r6, r2, r6
 80028b0:	0002      	movs	r2, r0
 80028b2:	40f2      	lsrs	r2, r6
 80028b4:	0016      	movs	r6, r2
 80028b6:	2c20      	cmp	r4, #32
 80028b8:	d004      	beq.n	80028c4 <__aeabi_d2f+0xbc>
 80028ba:	4a15      	ldr	r2, [pc, #84]	; (8002910 <__aeabi_d2f+0x108>)
 80028bc:	4694      	mov	ip, r2
 80028be:	4463      	add	r3, ip
 80028c0:	4098      	lsls	r0, r3
 80028c2:	4305      	orrs	r5, r0
 80028c4:	002a      	movs	r2, r5
 80028c6:	1e53      	subs	r3, r2, #1
 80028c8:	419a      	sbcs	r2, r3
 80028ca:	4332      	orrs	r2, r6
 80028cc:	2600      	movs	r6, #0
 80028ce:	0753      	lsls	r3, r2, #29
 80028d0:	d1ce      	bne.n	8002870 <__aeabi_d2f+0x68>
 80028d2:	2480      	movs	r4, #128	; 0x80
 80028d4:	0013      	movs	r3, r2
 80028d6:	04e4      	lsls	r4, r4, #19
 80028d8:	2001      	movs	r0, #1
 80028da:	4023      	ands	r3, r4
 80028dc:	4222      	tst	r2, r4
 80028de:	d1d3      	bne.n	8002888 <__aeabi_d2f+0x80>
 80028e0:	e7b0      	b.n	8002844 <__aeabi_d2f+0x3c>
 80028e2:	2300      	movs	r3, #0
 80028e4:	e7ad      	b.n	8002842 <__aeabi_d2f+0x3a>
 80028e6:	4a0b      	ldr	r2, [pc, #44]	; (8002914 <__aeabi_d2f+0x10c>)
 80028e8:	4694      	mov	ip, r2
 80028ea:	002a      	movs	r2, r5
 80028ec:	40e2      	lsrs	r2, r4
 80028ee:	0014      	movs	r4, r2
 80028f0:	002a      	movs	r2, r5
 80028f2:	4463      	add	r3, ip
 80028f4:	409a      	lsls	r2, r3
 80028f6:	4098      	lsls	r0, r3
 80028f8:	1e55      	subs	r5, r2, #1
 80028fa:	41aa      	sbcs	r2, r5
 80028fc:	4302      	orrs	r2, r0
 80028fe:	4322      	orrs	r2, r4
 8002900:	e7e4      	b.n	80028cc <__aeabi_d2f+0xc4>
 8002902:	0033      	movs	r3, r6
 8002904:	e79e      	b.n	8002844 <__aeabi_d2f+0x3c>
 8002906:	46c0      	nop			; (mov r8, r8)
 8002908:	000007fe 	.word	0x000007fe
 800290c:	fffffc80 	.word	0xfffffc80
 8002910:	fffffca2 	.word	0xfffffca2
 8002914:	fffffc82 	.word	0xfffffc82

08002918 <__clzsi2>:
 8002918:	211c      	movs	r1, #28
 800291a:	2301      	movs	r3, #1
 800291c:	041b      	lsls	r3, r3, #16
 800291e:	4298      	cmp	r0, r3
 8002920:	d301      	bcc.n	8002926 <__clzsi2+0xe>
 8002922:	0c00      	lsrs	r0, r0, #16
 8002924:	3910      	subs	r1, #16
 8002926:	0a1b      	lsrs	r3, r3, #8
 8002928:	4298      	cmp	r0, r3
 800292a:	d301      	bcc.n	8002930 <__clzsi2+0x18>
 800292c:	0a00      	lsrs	r0, r0, #8
 800292e:	3908      	subs	r1, #8
 8002930:	091b      	lsrs	r3, r3, #4
 8002932:	4298      	cmp	r0, r3
 8002934:	d301      	bcc.n	800293a <__clzsi2+0x22>
 8002936:	0900      	lsrs	r0, r0, #4
 8002938:	3904      	subs	r1, #4
 800293a:	a202      	add	r2, pc, #8	; (adr r2, 8002944 <__clzsi2+0x2c>)
 800293c:	5c10      	ldrb	r0, [r2, r0]
 800293e:	1840      	adds	r0, r0, r1
 8002940:	4770      	bx	lr
 8002942:	46c0      	nop			; (mov r8, r8)
 8002944:	02020304 	.word	0x02020304
 8002948:	01010101 	.word	0x01010101
	...

08002954 <hex2int>:
//}



uint8_t hex2int(char ch)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	0002      	movs	r2, r0
 800295c:	1dfb      	adds	r3, r7, #7
 800295e:	701a      	strb	r2, [r3, #0]
	if (ch >= '0' && ch <= '9')
 8002960:	1dfb      	adds	r3, r7, #7
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	2b2f      	cmp	r3, #47	; 0x2f
 8002966:	d908      	bls.n	800297a <hex2int+0x26>
 8002968:	1dfb      	adds	r3, r7, #7
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	2b39      	cmp	r3, #57	; 0x39
 800296e:	d804      	bhi.n	800297a <hex2int+0x26>
		return ch - '0';
 8002970:	1dfb      	adds	r3, r7, #7
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	3b30      	subs	r3, #48	; 0x30
 8002976:	b2db      	uxtb	r3, r3
 8002978:	e01a      	b.n	80029b0 <hex2int+0x5c>
	if (ch >= 'A' && ch <= 'F')
 800297a:	1dfb      	adds	r3, r7, #7
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	2b40      	cmp	r3, #64	; 0x40
 8002980:	d908      	bls.n	8002994 <hex2int+0x40>
 8002982:	1dfb      	adds	r3, r7, #7
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	2b46      	cmp	r3, #70	; 0x46
 8002988:	d804      	bhi.n	8002994 <hex2int+0x40>
		return ch - 'A' + 10;
 800298a:	1dfb      	adds	r3, r7, #7
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	3b37      	subs	r3, #55	; 0x37
 8002990:	b2db      	uxtb	r3, r3
 8002992:	e00d      	b.n	80029b0 <hex2int+0x5c>
	if (ch >= 'a' && ch <= 'f')
 8002994:	1dfb      	adds	r3, r7, #7
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	2b60      	cmp	r3, #96	; 0x60
 800299a:	d908      	bls.n	80029ae <hex2int+0x5a>
 800299c:	1dfb      	adds	r3, r7, #7
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	2b66      	cmp	r3, #102	; 0x66
 80029a2:	d804      	bhi.n	80029ae <hex2int+0x5a>
		return ch - 'a' + 10;
 80029a4:	1dfb      	adds	r3, r7, #7
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	3b57      	subs	r3, #87	; 0x57
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	e000      	b.n	80029b0 <hex2int+0x5c>
	return -1;
 80029ae:	23ff      	movs	r3, #255	; 0xff
}
 80029b0:	0018      	movs	r0, r3
 80029b2:	46bd      	mov	sp, r7
 80029b4:	b002      	add	sp, #8
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <nmea_parser>:
		crc ^= nmea_data[i];
	}
	return crc;
}
uint8_t* nmea_parser(char *NR,uint8_t responseLenght,uint8_t *checkSum ,uint8_t *rCheckSum)
{
 80029b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029ba:	b0c1      	sub	sp, #260	; 0x104
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6178      	str	r0, [r7, #20]
 80029c0:	60fa      	str	r2, [r7, #12]
 80029c2:	60bb      	str	r3, [r7, #8]
 80029c4:	200b      	movs	r0, #11
 80029c6:	2608      	movs	r6, #8
 80029c8:	1983      	adds	r3, r0, r6
 80029ca:	19db      	adds	r3, r3, r7
 80029cc:	1c0a      	adds	r2, r1, #0
 80029ce:	701a      	strb	r2, [r3, #0]
	char (*nmeaResponse)[responseLenght];
 80029d0:	0031      	movs	r1, r6
 80029d2:	1843      	adds	r3, r0, r1
 80029d4:	19db      	adds	r3, r3, r7
 80029d6:	781e      	ldrb	r6, [r3, #0]
 80029d8:	0033      	movs	r3, r6
 80029da:	3b01      	subs	r3, #1
 80029dc:	22d0      	movs	r2, #208	; 0xd0
 80029de:	1852      	adds	r2, r2, r1
 80029e0:	19d2      	adds	r2, r2, r7
 80029e2:	6013      	str	r3, [r2, #0]
 80029e4:	603e      	str	r6, [r7, #0]
 80029e6:	2300      	movs	r3, #0
 80029e8:	607b      	str	r3, [r7, #4]
 80029ea:	6839      	ldr	r1, [r7, #0]
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	000b      	movs	r3, r1
 80029f0:	0f5b      	lsrs	r3, r3, #29
 80029f2:	0010      	movs	r0, r2
 80029f4:	00c5      	lsls	r5, r0, #3
 80029f6:	431d      	orrs	r5, r3
 80029f8:	000b      	movs	r3, r1
 80029fa:	00dc      	lsls	r4, r3, #3
	uint8_t gnssCRC = 0;
 80029fc:	23f5      	movs	r3, #245	; 0xf5
 80029fe:	2008      	movs	r0, #8
 8002a00:	181b      	adds	r3, r3, r0
 8002a02:	19db      	adds	r3, r3, r7
 8002a04:	2200      	movs	r2, #0
 8002a06:	701a      	strb	r2, [r3, #0]
	nmeaResponse=NR;
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	21cc      	movs	r1, #204	; 0xcc
 8002a0c:	180a      	adds	r2, r1, r0
 8002a0e:	19d2      	adds	r2, r2, r7
 8002a10:	6013      	str	r3, [r2, #0]
	uint8_t QOG = 0xC0;
 8002a12:	23cb      	movs	r3, #203	; 0xcb
 8002a14:	181b      	adds	r3, r3, r0
 8002a16:	19db      	adds	r3, r3, r7
 8002a18:	22c0      	movs	r2, #192	; 0xc0
 8002a1a:	701a      	strb	r2, [r3, #0]
	uint16_t courseStatus = 0x0;
 8002a1c:	23f6      	movs	r3, #246	; 0xf6
 8002a1e:	181b      	adds	r3, r3, r0
 8002a20:	19db      	adds	r3, r3, r7
 8002a22:	2200      	movs	r2, #0
 8002a24:	801a      	strh	r2, [r3, #0]
	static uint8_t GPSInformation[18] = {0};


	char *p1;
	char *p2;
	p1 = strstr(nmeaResponse[GNGGA],"$GNGGA");
 8002a26:	0032      	movs	r2, r6
 8002a28:	000c      	movs	r4, r1
 8002a2a:	180b      	adds	r3, r1, r0
 8002a2c:	19db      	adds	r3, r3, r7
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	189b      	adds	r3, r3, r2
 8002a32:	4ad2      	ldr	r2, [pc, #840]	; (8002d7c <nmea_parser+0x3c4>)
 8002a34:	0011      	movs	r1, r2
 8002a36:	0018      	movs	r0, r3
 8002a38:	f00c fa55 	bl	800eee6 <strstr>
 8002a3c:	0003      	movs	r3, r0
 8002a3e:	25c4      	movs	r5, #196	; 0xc4
 8002a40:	2008      	movs	r0, #8
 8002a42:	182a      	adds	r2, r5, r0
 8002a44:	19d2      	adds	r2, r2, r7
 8002a46:	6013      	str	r3, [r2, #0]
	p2 = strstr(nmeaResponse[GNRMC],"$GNRMC");
 8002a48:	4acd      	ldr	r2, [pc, #820]	; (8002d80 <nmea_parser+0x3c8>)
 8002a4a:	1823      	adds	r3, r4, r0
 8002a4c:	19db      	adds	r3, r3, r7
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	0011      	movs	r1, r2
 8002a52:	0018      	movs	r0, r3
 8002a54:	f00c fa47 	bl	800eee6 <strstr>
 8002a58:	0003      	movs	r3, r0
 8002a5a:	22c0      	movs	r2, #192	; 0xc0
 8002a5c:	2008      	movs	r0, #8
 8002a5e:	1811      	adds	r1, r2, r0
 8002a60:	19c9      	adds	r1, r1, r7
 8002a62:	600b      	str	r3, [r1, #0]

	if(p1 != NULL && p2 != NULL){
 8002a64:	0001      	movs	r1, r0
 8002a66:	186b      	adds	r3, r5, r1
 8002a68:	19db      	adds	r3, r3, r7
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d101      	bne.n	8002a74 <nmea_parser+0xbc>
 8002a70:	f000 fe98 	bl	80037a4 <nmea_parser+0xdec>
 8002a74:	1853      	adds	r3, r2, r1
 8002a76:	19db      	adds	r3, r3, r7
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <nmea_parser+0xca>
 8002a7e:	f000 fe91 	bl	80037a4 <nmea_parser+0xdec>


		for(uint8_t sen=0;sen<2;sen++){
 8002a82:	23f4      	movs	r3, #244	; 0xf4
 8002a84:	185b      	adds	r3, r3, r1
 8002a86:	19db      	adds	r3, r3, r7
 8002a88:	2200      	movs	r2, #0
 8002a8a:	701a      	strb	r2, [r3, #0]
 8002a8c:	e0d9      	b.n	8002c42 <nmea_parser+0x28a>
			uint8_t recvCrc=0;
 8002a8e:	23bf      	movs	r3, #191	; 0xbf
 8002a90:	2108      	movs	r1, #8
 8002a92:	185b      	adds	r3, r3, r1
 8002a94:	19db      	adds	r3, r3, r7
 8002a96:	2200      	movs	r2, #0
 8002a98:	701a      	strb	r2, [r3, #0]
			char rawData[100];
			memset(rawData,0,sizeof(rawData));
 8002a9a:	2210      	movs	r2, #16
 8002a9c:	000c      	movs	r4, r1
 8002a9e:	1853      	adds	r3, r2, r1
 8002aa0:	19db      	adds	r3, r3, r7
 8002aa2:	2264      	movs	r2, #100	; 0x64
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	f00c f9c5 	bl	800ee36 <memset>

			char *ind1;
			char *ind2;
			ind1=strchr(nmeaResponse[sen],'$');
 8002aac:	25f4      	movs	r5, #244	; 0xf4
 8002aae:	0021      	movs	r1, r4
 8002ab0:	186b      	adds	r3, r5, r1
 8002ab2:	19db      	adds	r3, r3, r7
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	0032      	movs	r2, r6
 8002ab8:	4353      	muls	r3, r2
 8002aba:	22cc      	movs	r2, #204	; 0xcc
 8002abc:	1850      	adds	r0, r2, r1
 8002abe:	19c1      	adds	r1, r0, r7
 8002ac0:	680a      	ldr	r2, [r1, #0]
 8002ac2:	18d3      	adds	r3, r2, r3
 8002ac4:	2124      	movs	r1, #36	; 0x24
 8002ac6:	0018      	movs	r0, r3
 8002ac8:	f00c f9eb 	bl	800eea2 <strchr>
 8002acc:	0003      	movs	r3, r0
 8002ace:	24b8      	movs	r4, #184	; 0xb8
 8002ad0:	2208      	movs	r2, #8
 8002ad2:	18a1      	adds	r1, r4, r2
 8002ad4:	19c9      	adds	r1, r1, r7
 8002ad6:	600b      	str	r3, [r1, #0]
			ind2=strchr(nmeaResponse[sen],'*');
 8002ad8:	0011      	movs	r1, r2
 8002ada:	186b      	adds	r3, r5, r1
 8002adc:	19db      	adds	r3, r3, r7
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	0032      	movs	r2, r6
 8002ae2:	4353      	muls	r3, r2
 8002ae4:	22cc      	movs	r2, #204	; 0xcc
 8002ae6:	000d      	movs	r5, r1
 8002ae8:	1852      	adds	r2, r2, r1
 8002aea:	19d2      	adds	r2, r2, r7
 8002aec:	6812      	ldr	r2, [r2, #0]
 8002aee:	18d3      	adds	r3, r2, r3
 8002af0:	212a      	movs	r1, #42	; 0x2a
 8002af2:	0018      	movs	r0, r3
 8002af4:	f00c f9d5 	bl	800eea2 <strchr>
 8002af8:	0003      	movs	r3, r0
 8002afa:	21b4      	movs	r1, #180	; 0xb4
 8002afc:	194a      	adds	r2, r1, r5
 8002afe:	19d2      	adds	r2, r2, r7
 8002b00:	6013      	str	r3, [r2, #0]

			if(ind1!=NULL && ind2!=NULL){
 8002b02:	1963      	adds	r3, r4, r5
 8002b04:	19da      	adds	r2, r3, r7
 8002b06:	6813      	ldr	r3, [r2, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d100      	bne.n	8002b0e <nmea_parser+0x156>
 8002b0c:	e08a      	b.n	8002c24 <nmea_parser+0x26c>
 8002b0e:	194b      	adds	r3, r1, r5
 8002b10:	19da      	adds	r2, r3, r7
 8002b12:	6813      	ldr	r3, [r2, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d100      	bne.n	8002b1a <nmea_parser+0x162>
 8002b18:	e084      	b.n	8002c24 <nmea_parser+0x26c>
				uint8_t len = ind2-ind1;
 8002b1a:	194b      	adds	r3, r1, r5
 8002b1c:	19da      	adds	r2, r3, r7
 8002b1e:	6812      	ldr	r2, [r2, #0]
 8002b20:	1963      	adds	r3, r4, r5
 8002b22:	19d8      	adds	r0, r3, r7
 8002b24:	6803      	ldr	r3, [r0, #0]
 8002b26:	1ad2      	subs	r2, r2, r3
 8002b28:	20b3      	movs	r0, #179	; 0xb3
 8002b2a:	002c      	movs	r4, r5
 8002b2c:	1903      	adds	r3, r0, r4
 8002b2e:	19db      	adds	r3, r3, r7
 8002b30:	701a      	strb	r2, [r3, #0]
				gnssCRC = 0;
 8002b32:	22f5      	movs	r2, #245	; 0xf5
 8002b34:	0020      	movs	r0, r4
 8002b36:	1813      	adds	r3, r2, r0
 8002b38:	19db      	adds	r3, r3, r7
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	701a      	strb	r2, [r3, #0]
				recvCrc = hex2int(*(ind2+2)) | hex2int(*(ind2+1)) <<4;
 8002b3e:	000d      	movs	r5, r1
 8002b40:	180b      	adds	r3, r1, r0
 8002b42:	19da      	adds	r2, r3, r7
 8002b44:	6813      	ldr	r3, [r2, #0]
 8002b46:	3302      	adds	r3, #2
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	0018      	movs	r0, r3
 8002b4c:	f7ff ff02 	bl	8002954 <hex2int>
 8002b50:	0003      	movs	r3, r0
 8002b52:	b25c      	sxtb	r4, r3
 8002b54:	2108      	movs	r1, #8
 8002b56:	186b      	adds	r3, r5, r1
 8002b58:	19da      	adds	r2, r3, r7
 8002b5a:	6813      	ldr	r3, [r2, #0]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	0018      	movs	r0, r3
 8002b62:	f7ff fef7 	bl	8002954 <hex2int>
 8002b66:	0003      	movs	r3, r0
 8002b68:	011b      	lsls	r3, r3, #4
 8002b6a:	b25b      	sxtb	r3, r3
 8002b6c:	4323      	orrs	r3, r4
 8002b6e:	b25a      	sxtb	r2, r3
 8002b70:	23bf      	movs	r3, #191	; 0xbf
 8002b72:	2108      	movs	r1, #8
 8002b74:	185b      	adds	r3, r3, r1
 8002b76:	19db      	adds	r3, r3, r7
 8002b78:	701a      	strb	r2, [r3, #0]
				for(uint8_t i=0;i<len-1;i++){
 8002b7a:	23f3      	movs	r3, #243	; 0xf3
 8002b7c:	185b      	adds	r3, r3, r1
 8002b7e:	19db      	adds	r3, r3, r7
 8002b80:	2200      	movs	r2, #0
 8002b82:	701a      	strb	r2, [r3, #0]
 8002b84:	e02b      	b.n	8002bde <nmea_parser+0x226>
					rawData[i]=*(ind1+1+i);
 8002b86:	20f3      	movs	r0, #243	; 0xf3
 8002b88:	2108      	movs	r1, #8
 8002b8a:	1843      	adds	r3, r0, r1
 8002b8c:	19db      	adds	r3, r3, r7
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	3301      	adds	r3, #1
 8002b92:	22b8      	movs	r2, #184	; 0xb8
 8002b94:	1852      	adds	r2, r2, r1
 8002b96:	19d2      	adds	r2, r2, r7
 8002b98:	6812      	ldr	r2, [r2, #0]
 8002b9a:	18d2      	adds	r2, r2, r3
 8002b9c:	000d      	movs	r5, r1
 8002b9e:	1943      	adds	r3, r0, r5
 8002ba0:	19db      	adds	r3, r3, r7
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	7811      	ldrb	r1, [r2, #0]
 8002ba6:	2410      	movs	r4, #16
 8002ba8:	1962      	adds	r2, r4, r5
 8002baa:	19d2      	adds	r2, r2, r7
 8002bac:	54d1      	strb	r1, [r2, r3]
					gnssCRC ^= rawData[i];
 8002bae:	0029      	movs	r1, r5
 8002bb0:	1843      	adds	r3, r0, r1
 8002bb2:	19db      	adds	r3, r3, r7
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	000d      	movs	r5, r1
 8002bb8:	1862      	adds	r2, r4, r1
 8002bba:	19d2      	adds	r2, r2, r7
 8002bbc:	5cd1      	ldrb	r1, [r2, r3]
 8002bbe:	22f5      	movs	r2, #245	; 0xf5
 8002bc0:	002c      	movs	r4, r5
 8002bc2:	1913      	adds	r3, r2, r4
 8002bc4:	19db      	adds	r3, r3, r7
 8002bc6:	1912      	adds	r2, r2, r4
 8002bc8:	19d2      	adds	r2, r2, r7
 8002bca:	7812      	ldrb	r2, [r2, #0]
 8002bcc:	404a      	eors	r2, r1
 8002bce:	701a      	strb	r2, [r3, #0]
				for(uint8_t i=0;i<len-1;i++){
 8002bd0:	1903      	adds	r3, r0, r4
 8002bd2:	19db      	adds	r3, r3, r7
 8002bd4:	781a      	ldrb	r2, [r3, #0]
 8002bd6:	1903      	adds	r3, r0, r4
 8002bd8:	19db      	adds	r3, r3, r7
 8002bda:	3201      	adds	r2, #1
 8002bdc:	701a      	strb	r2, [r3, #0]
 8002bde:	23f3      	movs	r3, #243	; 0xf3
 8002be0:	2008      	movs	r0, #8
 8002be2:	181b      	adds	r3, r3, r0
 8002be4:	19db      	adds	r3, r3, r7
 8002be6:	781a      	ldrb	r2, [r3, #0]
 8002be8:	23b3      	movs	r3, #179	; 0xb3
 8002bea:	181b      	adds	r3, r3, r0
 8002bec:	19db      	adds	r3, r3, r7
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	dbc7      	blt.n	8002b86 <nmea_parser+0x1ce>

				}
				*checkSum = gnssCRC;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	21f5      	movs	r1, #245	; 0xf5
 8002bfa:	0004      	movs	r4, r0
 8002bfc:	190a      	adds	r2, r1, r4
 8002bfe:	19d2      	adds	r2, r2, r7
 8002c00:	7812      	ldrb	r2, [r2, #0]
 8002c02:	701a      	strb	r2, [r3, #0]
				*rCheckSum = recvCrc;
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	20bf      	movs	r0, #191	; 0xbf
 8002c08:	1902      	adds	r2, r0, r4
 8002c0a:	19d2      	adds	r2, r2, r7
 8002c0c:	7812      	ldrb	r2, [r2, #0]
 8002c0e:	701a      	strb	r2, [r3, #0]
			if(ind1!=NULL && ind2!=NULL){
 8002c10:	46c0      	nop			; (mov r8, r8)
			}
			else{
				return NULL;
			}
			if(recvCrc != gnssCRC){
 8002c12:	1903      	adds	r3, r0, r4
 8002c14:	19da      	adds	r2, r3, r7
 8002c16:	190b      	adds	r3, r1, r4
 8002c18:	19db      	adds	r3, r3, r7
 8002c1a:	7812      	ldrb	r2, [r2, #0]
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d006      	beq.n	8002c30 <nmea_parser+0x278>
 8002c22:	e002      	b.n	8002c2a <nmea_parser+0x272>
				return NULL;
 8002c24:	2300      	movs	r3, #0
 8002c26:	f000 fdc1 	bl	80037ac <nmea_parser+0xdf4>
				return NULL;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	f000 fdbe 	bl	80037ac <nmea_parser+0xdf4>
		for(uint8_t sen=0;sen<2;sen++){
 8002c30:	21f4      	movs	r1, #244	; 0xf4
 8002c32:	2008      	movs	r0, #8
 8002c34:	180b      	adds	r3, r1, r0
 8002c36:	19db      	adds	r3, r3, r7
 8002c38:	781a      	ldrb	r2, [r3, #0]
 8002c3a:	180b      	adds	r3, r1, r0
 8002c3c:	19db      	adds	r3, r3, r7
 8002c3e:	3201      	adds	r2, #1
 8002c40:	701a      	strb	r2, [r3, #0]
 8002c42:	23f4      	movs	r3, #244	; 0xf4
 8002c44:	2108      	movs	r1, #8
 8002c46:	185b      	adds	r3, r3, r1
 8002c48:	19db      	adds	r3, r3, r7
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d800      	bhi.n	8002c52 <nmea_parser+0x29a>
 8002c50:	e71d      	b.n	8002a8e <nmea_parser+0xd6>
		// }

		//data is valid. go on
		uint8_t GNGGAComma[15];
		uint8_t GNRMCComma[15];
		memset(GNGGAComma, 0, sizeof(GNGGAComma)); // for automatically-allocated arrays
 8002c52:	23a4      	movs	r3, #164	; 0xa4
 8002c54:	000c      	movs	r4, r1
 8002c56:	191b      	adds	r3, r3, r4
 8002c58:	19db      	adds	r3, r3, r7
 8002c5a:	220f      	movs	r2, #15
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	0018      	movs	r0, r3
 8002c60:	f00c f8e9 	bl	800ee36 <memset>
		memset(GNRMCComma, 0, sizeof(GNRMCComma)); // for automatically-allocated arrays
 8002c64:	2394      	movs	r3, #148	; 0x94
 8002c66:	191b      	adds	r3, r3, r4
 8002c68:	19db      	adds	r3, r3, r7
 8002c6a:	220f      	movs	r2, #15
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	0018      	movs	r0, r3
 8002c70:	f00c f8e1 	bl	800ee36 <memset>


		uint8_t GNGGACInd=0;
 8002c74:	23f2      	movs	r3, #242	; 0xf2
 8002c76:	0021      	movs	r1, r4
 8002c78:	185b      	adds	r3, r3, r1
 8002c7a:	19db      	adds	r3, r3, r7
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	701a      	strb	r2, [r3, #0]
		uint8_t GNRMCCInd=0;
 8002c80:	23f1      	movs	r3, #241	; 0xf1
 8002c82:	185b      	adds	r3, r3, r1
 8002c84:	19db      	adds	r3, r3, r7
 8002c86:	2200      	movs	r2, #0
 8002c88:	701a      	strb	r2, [r3, #0]
		uint32_t latitude;
		uint32_t longitude;
		uint8_t tempDataIndex = 0;
 8002c8a:	23e7      	movs	r3, #231	; 0xe7
 8002c8c:	185b      	adds	r3, r3, r1
 8002c8e:	19db      	adds	r3, r3, r7
 8002c90:	2200      	movs	r2, #0
 8002c92:	701a      	strb	r2, [r3, #0]




		//-------store all parameter's comma
		for(uint8_t i=0;i<responseLenght;i++ ){
 8002c94:	23e6      	movs	r3, #230	; 0xe6
 8002c96:	185b      	adds	r3, r3, r1
 8002c98:	19db      	adds	r3, r3, r7
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	701a      	strb	r2, [r3, #0]
 8002c9e:	e048      	b.n	8002d32 <nmea_parser+0x37a>
			if(nmeaResponse[GNGGA][i]==44){
 8002ca0:	0032      	movs	r2, r6
 8002ca2:	23cc      	movs	r3, #204	; 0xcc
 8002ca4:	2408      	movs	r4, #8
 8002ca6:	191b      	adds	r3, r3, r4
 8002ca8:	19db      	adds	r3, r3, r7
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	189a      	adds	r2, r3, r2
 8002cae:	21e6      	movs	r1, #230	; 0xe6
 8002cb0:	190b      	adds	r3, r1, r4
 8002cb2:	19db      	adds	r3, r3, r7
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	5cd3      	ldrb	r3, [r2, r3]
 8002cb8:	2b2c      	cmp	r3, #44	; 0x2c
 8002cba:	d112      	bne.n	8002ce2 <nmea_parser+0x32a>
				GNGGAComma[GNGGACInd]=i;
 8002cbc:	20f2      	movs	r0, #242	; 0xf2
 8002cbe:	1903      	adds	r3, r0, r4
 8002cc0:	19db      	adds	r3, r3, r7
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	22a4      	movs	r2, #164	; 0xa4
 8002cc6:	1912      	adds	r2, r2, r4
 8002cc8:	19d2      	adds	r2, r2, r7
 8002cca:	1909      	adds	r1, r1, r4
 8002ccc:	19c9      	adds	r1, r1, r7
 8002cce:	7809      	ldrb	r1, [r1, #0]
 8002cd0:	54d1      	strb	r1, [r2, r3]
				GNGGACInd++;
 8002cd2:	0021      	movs	r1, r4
 8002cd4:	1843      	adds	r3, r0, r1
 8002cd6:	19db      	adds	r3, r3, r7
 8002cd8:	781a      	ldrb	r2, [r3, #0]
 8002cda:	1843      	adds	r3, r0, r1
 8002cdc:	19db      	adds	r3, r3, r7
 8002cde:	3201      	adds	r2, #1
 8002ce0:	701a      	strb	r2, [r3, #0]
			}
			if(nmeaResponse[GNRMC][i]==44){
 8002ce2:	21e6      	movs	r1, #230	; 0xe6
 8002ce4:	2408      	movs	r4, #8
 8002ce6:	190b      	adds	r3, r1, r4
 8002ce8:	19db      	adds	r3, r3, r7
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	22cc      	movs	r2, #204	; 0xcc
 8002cee:	1912      	adds	r2, r2, r4
 8002cf0:	19d2      	adds	r2, r2, r7
 8002cf2:	6812      	ldr	r2, [r2, #0]
 8002cf4:	5cd3      	ldrb	r3, [r2, r3]
 8002cf6:	2b2c      	cmp	r3, #44	; 0x2c
 8002cf8:	d112      	bne.n	8002d20 <nmea_parser+0x368>
				GNRMCComma[GNRMCCInd]=i;
 8002cfa:	20f1      	movs	r0, #241	; 0xf1
 8002cfc:	1903      	adds	r3, r0, r4
 8002cfe:	19db      	adds	r3, r3, r7
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	2294      	movs	r2, #148	; 0x94
 8002d04:	1912      	adds	r2, r2, r4
 8002d06:	19d2      	adds	r2, r2, r7
 8002d08:	1909      	adds	r1, r1, r4
 8002d0a:	19c9      	adds	r1, r1, r7
 8002d0c:	7809      	ldrb	r1, [r1, #0]
 8002d0e:	54d1      	strb	r1, [r2, r3]
				GNRMCCInd++;
 8002d10:	0021      	movs	r1, r4
 8002d12:	1843      	adds	r3, r0, r1
 8002d14:	19db      	adds	r3, r3, r7
 8002d16:	781a      	ldrb	r2, [r3, #0]
 8002d18:	1843      	adds	r3, r0, r1
 8002d1a:	19db      	adds	r3, r3, r7
 8002d1c:	3201      	adds	r2, #1
 8002d1e:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0;i<responseLenght;i++ ){
 8002d20:	21e6      	movs	r1, #230	; 0xe6
 8002d22:	2008      	movs	r0, #8
 8002d24:	180b      	adds	r3, r1, r0
 8002d26:	19db      	adds	r3, r3, r7
 8002d28:	781a      	ldrb	r2, [r3, #0]
 8002d2a:	180b      	adds	r3, r1, r0
 8002d2c:	19db      	adds	r3, r3, r7
 8002d2e:	3201      	adds	r2, #1
 8002d30:	701a      	strb	r2, [r3, #0]
 8002d32:	23e6      	movs	r3, #230	; 0xe6
 8002d34:	2108      	movs	r1, #8
 8002d36:	185b      	adds	r3, r3, r1
 8002d38:	19da      	adds	r2, r3, r7
 8002d3a:	230b      	movs	r3, #11
 8002d3c:	185b      	adds	r3, r3, r1
 8002d3e:	19db      	adds	r3, r3, r7
 8002d40:	7812      	ldrb	r2, [r2, #0]
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d3ab      	bcc.n	8002ca0 <nmea_parser+0x2e8>
			}
		}

		//------------------------Time and date Stamp------------------------------------
		memset(tempData,0,sizeof(tempData));
 8002d48:	2384      	movs	r3, #132	; 0x84
 8002d4a:	000c      	movs	r4, r1
 8002d4c:	185b      	adds	r3, r3, r1
 8002d4e:	19db      	adds	r3, r3, r7
 8002d50:	220f      	movs	r2, #15
 8002d52:	2100      	movs	r1, #0
 8002d54:	0018      	movs	r0, r3
 8002d56:	f00c f86e 	bl	800ee36 <memset>
		tempDataIndex = 0;
 8002d5a:	23e7      	movs	r3, #231	; 0xe7
 8002d5c:	0021      	movs	r1, r4
 8002d5e:	185b      	adds	r3, r3, r1
 8002d60:	19db      	adds	r3, r3, r7
 8002d62:	2200      	movs	r2, #0
 8002d64:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[8]+1;x<GNRMCComma[9];x++){
 8002d66:	2394      	movs	r3, #148	; 0x94
 8002d68:	185b      	adds	r3, r3, r1
 8002d6a:	19db      	adds	r3, r3, r7
 8002d6c:	7a1a      	ldrb	r2, [r3, #8]
 8002d6e:	23e5      	movs	r3, #229	; 0xe5
 8002d70:	185b      	adds	r3, r3, r1
 8002d72:	19db      	adds	r3, r3, r7
 8002d74:	3201      	adds	r2, #1
 8002d76:	701a      	strb	r2, [r3, #0]
 8002d78:	e025      	b.n	8002dc6 <nmea_parser+0x40e>
 8002d7a:	46c0      	nop			; (mov r8, r8)
 8002d7c:	080132d0 	.word	0x080132d0
 8002d80:	080132d8 	.word	0x080132d8
			tempData[tempDataIndex]= nmeaResponse[GNRMC][x];
 8002d84:	20e5      	movs	r0, #229	; 0xe5
 8002d86:	2508      	movs	r5, #8
 8002d88:	1943      	adds	r3, r0, r5
 8002d8a:	19db      	adds	r3, r3, r7
 8002d8c:	781a      	ldrb	r2, [r3, #0]
 8002d8e:	24e7      	movs	r4, #231	; 0xe7
 8002d90:	1963      	adds	r3, r4, r5
 8002d92:	19db      	adds	r3, r3, r7
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	21cc      	movs	r1, #204	; 0xcc
 8002d98:	1949      	adds	r1, r1, r5
 8002d9a:	19c9      	adds	r1, r1, r7
 8002d9c:	6809      	ldr	r1, [r1, #0]
 8002d9e:	5c89      	ldrb	r1, [r1, r2]
 8002da0:	2284      	movs	r2, #132	; 0x84
 8002da2:	1952      	adds	r2, r2, r5
 8002da4:	19d2      	adds	r2, r2, r7
 8002da6:	54d1      	strb	r1, [r2, r3]
			tempDataIndex++;
 8002da8:	0029      	movs	r1, r5
 8002daa:	1863      	adds	r3, r4, r1
 8002dac:	19db      	adds	r3, r3, r7
 8002dae:	781a      	ldrb	r2, [r3, #0]
 8002db0:	1863      	adds	r3, r4, r1
 8002db2:	19db      	adds	r3, r3, r7
 8002db4:	3201      	adds	r2, #1
 8002db6:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[8]+1;x<GNRMCComma[9];x++){
 8002db8:	1843      	adds	r3, r0, r1
 8002dba:	19db      	adds	r3, r3, r7
 8002dbc:	781a      	ldrb	r2, [r3, #0]
 8002dbe:	1843      	adds	r3, r0, r1
 8002dc0:	19db      	adds	r3, r3, r7
 8002dc2:	3201      	adds	r2, #1
 8002dc4:	701a      	strb	r2, [r3, #0]
 8002dc6:	2394      	movs	r3, #148	; 0x94
 8002dc8:	2008      	movs	r0, #8
 8002dca:	181b      	adds	r3, r3, r0
 8002dcc:	19db      	adds	r3, r3, r7
 8002dce:	7a5b      	ldrb	r3, [r3, #9]
 8002dd0:	22e5      	movs	r2, #229	; 0xe5
 8002dd2:	1812      	adds	r2, r2, r0
 8002dd4:	19d2      	adds	r2, r2, r7
 8002dd6:	7812      	ldrb	r2, [r2, #0]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d3d3      	bcc.n	8002d84 <nmea_parser+0x3cc>
		}
		char tempData2[4];

		//Year (1 byte)
		memset(tempData2,0,sizeof(tempData2));
 8002ddc:	2480      	movs	r4, #128	; 0x80
 8002dde:	1823      	adds	r3, r4, r0
 8002de0:	19db      	adds	r3, r3, r7
 8002de2:	2204      	movs	r2, #4
 8002de4:	2100      	movs	r1, #0
 8002de6:	0018      	movs	r0, r3
 8002de8:	f00c f825 	bl	800ee36 <memset>
		tempData2[0]=tempData[4];
 8002dec:	2584      	movs	r5, #132	; 0x84
 8002dee:	2008      	movs	r0, #8
 8002df0:	182b      	adds	r3, r5, r0
 8002df2:	19db      	adds	r3, r3, r7
 8002df4:	791a      	ldrb	r2, [r3, #4]
 8002df6:	0021      	movs	r1, r4
 8002df8:	180b      	adds	r3, r1, r0
 8002dfa:	19db      	adds	r3, r3, r7
 8002dfc:	701a      	strb	r2, [r3, #0]
		tempData2[1]=tempData[5];
 8002dfe:	182b      	adds	r3, r5, r0
 8002e00:	19db      	adds	r3, r3, r7
 8002e02:	795a      	ldrb	r2, [r3, #5]
 8002e04:	000c      	movs	r4, r1
 8002e06:	1823      	adds	r3, r4, r0
 8002e08:	19db      	adds	r3, r3, r7
 8002e0a:	705a      	strb	r2, [r3, #1]
		GPSInformation[0] = (uint8_t)atoi(tempData2);
 8002e0c:	1823      	adds	r3, r4, r0
 8002e0e:	19db      	adds	r3, r3, r7
 8002e10:	0018      	movs	r0, r3
 8002e12:	f00b ffb1 	bl	800ed78 <atoi>
 8002e16:	0003      	movs	r3, r0
 8002e18:	b2da      	uxtb	r2, r3
 8002e1a:	4bd8      	ldr	r3, [pc, #864]	; (800317c <nmea_parser+0x7c4>)
 8002e1c:	701a      	strb	r2, [r3, #0]

		//month (1 byte)
		memset(tempData2,0,sizeof(tempData2));
 8002e1e:	2008      	movs	r0, #8
 8002e20:	1823      	adds	r3, r4, r0
 8002e22:	19db      	adds	r3, r3, r7
 8002e24:	2204      	movs	r2, #4
 8002e26:	2100      	movs	r1, #0
 8002e28:	0018      	movs	r0, r3
 8002e2a:	f00c f804 	bl	800ee36 <memset>
		tempData2[0]=tempData[2];
 8002e2e:	2008      	movs	r0, #8
 8002e30:	182b      	adds	r3, r5, r0
 8002e32:	19db      	adds	r3, r3, r7
 8002e34:	789a      	ldrb	r2, [r3, #2]
 8002e36:	0021      	movs	r1, r4
 8002e38:	180b      	adds	r3, r1, r0
 8002e3a:	19db      	adds	r3, r3, r7
 8002e3c:	701a      	strb	r2, [r3, #0]
		tempData2[1]=tempData[3];
 8002e3e:	182b      	adds	r3, r5, r0
 8002e40:	19db      	adds	r3, r3, r7
 8002e42:	78da      	ldrb	r2, [r3, #3]
 8002e44:	000c      	movs	r4, r1
 8002e46:	1823      	adds	r3, r4, r0
 8002e48:	19db      	adds	r3, r3, r7
 8002e4a:	705a      	strb	r2, [r3, #1]
		GPSInformation[1] = atoi(tempData2);
 8002e4c:	1823      	adds	r3, r4, r0
 8002e4e:	19db      	adds	r3, r3, r7
 8002e50:	0018      	movs	r0, r3
 8002e52:	f00b ff91 	bl	800ed78 <atoi>
 8002e56:	0003      	movs	r3, r0
 8002e58:	b2da      	uxtb	r2, r3
 8002e5a:	4bc8      	ldr	r3, [pc, #800]	; (800317c <nmea_parser+0x7c4>)
 8002e5c:	705a      	strb	r2, [r3, #1]
		//day (1 byte)
		memset(tempData2,0,sizeof(tempData2));
 8002e5e:	2008      	movs	r0, #8
 8002e60:	1823      	adds	r3, r4, r0
 8002e62:	19db      	adds	r3, r3, r7
 8002e64:	2204      	movs	r2, #4
 8002e66:	2100      	movs	r1, #0
 8002e68:	0018      	movs	r0, r3
 8002e6a:	f00b ffe4 	bl	800ee36 <memset>
		tempData2[0]=tempData[0];
 8002e6e:	2008      	movs	r0, #8
 8002e70:	182b      	adds	r3, r5, r0
 8002e72:	19db      	adds	r3, r3, r7
 8002e74:	781a      	ldrb	r2, [r3, #0]
 8002e76:	0021      	movs	r1, r4
 8002e78:	0004      	movs	r4, r0
 8002e7a:	190b      	adds	r3, r1, r4
 8002e7c:	19db      	adds	r3, r3, r7
 8002e7e:	701a      	strb	r2, [r3, #0]
		tempData2[1]=tempData[1];
 8002e80:	192b      	adds	r3, r5, r4
 8002e82:	19db      	adds	r3, r3, r7
 8002e84:	785a      	ldrb	r2, [r3, #1]
 8002e86:	190b      	adds	r3, r1, r4
 8002e88:	19db      	adds	r3, r3, r7
 8002e8a:	705a      	strb	r2, [r3, #1]
		GPSInformation[2] = atoi(tempData2);
 8002e8c:	190b      	adds	r3, r1, r4
 8002e8e:	19db      	adds	r3, r3, r7
 8002e90:	0018      	movs	r0, r3
 8002e92:	f00b ff71 	bl	800ed78 <atoi>
 8002e96:	0003      	movs	r3, r0
 8002e98:	b2da      	uxtb	r2, r3
 8002e9a:	4bb8      	ldr	r3, [pc, #736]	; (800317c <nmea_parser+0x7c4>)
 8002e9c:	709a      	strb	r2, [r3, #2]

		memset(tempData,0,sizeof(tempData));
 8002e9e:	192b      	adds	r3, r5, r4
 8002ea0:	19db      	adds	r3, r3, r7
 8002ea2:	220f      	movs	r2, #15
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	f00b ffc5 	bl	800ee36 <memset>
		tempDataIndex = 0;
 8002eac:	22e7      	movs	r2, #231	; 0xe7
 8002eae:	1913      	adds	r3, r2, r4
 8002eb0:	19db      	adds	r3, r3, r7
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[0]+1;x<GNRMCComma[1]-4;x++){
 8002eb6:	2394      	movs	r3, #148	; 0x94
 8002eb8:	191b      	adds	r3, r3, r4
 8002eba:	19db      	adds	r3, r3, r7
 8002ebc:	781a      	ldrb	r2, [r3, #0]
 8002ebe:	23e4      	movs	r3, #228	; 0xe4
 8002ec0:	191b      	adds	r3, r3, r4
 8002ec2:	19db      	adds	r3, r3, r7
 8002ec4:	3201      	adds	r2, #1
 8002ec6:	701a      	strb	r2, [r3, #0]
 8002ec8:	e020      	b.n	8002f0c <nmea_parser+0x554>
			tempData[tempDataIndex]= nmeaResponse[GNRMC][x];
 8002eca:	20e4      	movs	r0, #228	; 0xe4
 8002ecc:	2508      	movs	r5, #8
 8002ece:	1943      	adds	r3, r0, r5
 8002ed0:	19db      	adds	r3, r3, r7
 8002ed2:	781a      	ldrb	r2, [r3, #0]
 8002ed4:	24e7      	movs	r4, #231	; 0xe7
 8002ed6:	1963      	adds	r3, r4, r5
 8002ed8:	19db      	adds	r3, r3, r7
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	21cc      	movs	r1, #204	; 0xcc
 8002ede:	1949      	adds	r1, r1, r5
 8002ee0:	19c9      	adds	r1, r1, r7
 8002ee2:	6809      	ldr	r1, [r1, #0]
 8002ee4:	5c89      	ldrb	r1, [r1, r2]
 8002ee6:	2284      	movs	r2, #132	; 0x84
 8002ee8:	1952      	adds	r2, r2, r5
 8002eea:	19d2      	adds	r2, r2, r7
 8002eec:	54d1      	strb	r1, [r2, r3]
			tempDataIndex++;
 8002eee:	0029      	movs	r1, r5
 8002ef0:	1863      	adds	r3, r4, r1
 8002ef2:	19db      	adds	r3, r3, r7
 8002ef4:	781a      	ldrb	r2, [r3, #0]
 8002ef6:	1863      	adds	r3, r4, r1
 8002ef8:	19db      	adds	r3, r3, r7
 8002efa:	3201      	adds	r2, #1
 8002efc:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[0]+1;x<GNRMCComma[1]-4;x++){
 8002efe:	1843      	adds	r3, r0, r1
 8002f00:	19db      	adds	r3, r3, r7
 8002f02:	781a      	ldrb	r2, [r3, #0]
 8002f04:	1843      	adds	r3, r0, r1
 8002f06:	19db      	adds	r3, r3, r7
 8002f08:	3201      	adds	r2, #1
 8002f0a:	701a      	strb	r2, [r3, #0]
 8002f0c:	23e4      	movs	r3, #228	; 0xe4
 8002f0e:	2108      	movs	r1, #8
 8002f10:	185b      	adds	r3, r3, r1
 8002f12:	19db      	adds	r3, r3, r7
 8002f14:	781a      	ldrb	r2, [r3, #0]
 8002f16:	2394      	movs	r3, #148	; 0x94
 8002f18:	185b      	adds	r3, r3, r1
 8002f1a:	19db      	adds	r3, r3, r7
 8002f1c:	785b      	ldrb	r3, [r3, #1]
 8002f1e:	3b04      	subs	r3, #4
 8002f20:	429a      	cmp	r2, r3
 8002f22:	dbd2      	blt.n	8002eca <nmea_parser+0x512>
		}
		//hour(1 byte)
		memset(tempData2,0,sizeof(tempData2));
 8002f24:	2480      	movs	r4, #128	; 0x80
 8002f26:	1863      	adds	r3, r4, r1
 8002f28:	19db      	adds	r3, r3, r7
 8002f2a:	2204      	movs	r2, #4
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	0018      	movs	r0, r3
 8002f30:	f00b ff81 	bl	800ee36 <memset>
		tempData2[0]=tempData[0];
 8002f34:	2584      	movs	r5, #132	; 0x84
 8002f36:	2008      	movs	r0, #8
 8002f38:	182b      	adds	r3, r5, r0
 8002f3a:	19db      	adds	r3, r3, r7
 8002f3c:	781a      	ldrb	r2, [r3, #0]
 8002f3e:	0021      	movs	r1, r4
 8002f40:	180b      	adds	r3, r1, r0
 8002f42:	19db      	adds	r3, r3, r7
 8002f44:	701a      	strb	r2, [r3, #0]
		tempData2[1]=tempData[1];
 8002f46:	182b      	adds	r3, r5, r0
 8002f48:	19db      	adds	r3, r3, r7
 8002f4a:	785a      	ldrb	r2, [r3, #1]
 8002f4c:	000c      	movs	r4, r1
 8002f4e:	1823      	adds	r3, r4, r0
 8002f50:	19db      	adds	r3, r3, r7
 8002f52:	705a      	strb	r2, [r3, #1]
		GPSInformation[3] = (uint8_t)atoi(tempData2);
 8002f54:	1823      	adds	r3, r4, r0
 8002f56:	19db      	adds	r3, r3, r7
 8002f58:	0018      	movs	r0, r3
 8002f5a:	f00b ff0d 	bl	800ed78 <atoi>
 8002f5e:	0003      	movs	r3, r0
 8002f60:	b2da      	uxtb	r2, r3
 8002f62:	4b86      	ldr	r3, [pc, #536]	; (800317c <nmea_parser+0x7c4>)
 8002f64:	70da      	strb	r2, [r3, #3]
		//minutes(1 byte)
		memset(tempData2,0,sizeof(tempData2));
 8002f66:	2008      	movs	r0, #8
 8002f68:	1823      	adds	r3, r4, r0
 8002f6a:	19db      	adds	r3, r3, r7
 8002f6c:	2204      	movs	r2, #4
 8002f6e:	2100      	movs	r1, #0
 8002f70:	0018      	movs	r0, r3
 8002f72:	f00b ff60 	bl	800ee36 <memset>
		tempData2[0]=tempData[2];
 8002f76:	2008      	movs	r0, #8
 8002f78:	182b      	adds	r3, r5, r0
 8002f7a:	19db      	adds	r3, r3, r7
 8002f7c:	789a      	ldrb	r2, [r3, #2]
 8002f7e:	0021      	movs	r1, r4
 8002f80:	180b      	adds	r3, r1, r0
 8002f82:	19db      	adds	r3, r3, r7
 8002f84:	701a      	strb	r2, [r3, #0]
		tempData2[1]=tempData[3];
 8002f86:	182b      	adds	r3, r5, r0
 8002f88:	19db      	adds	r3, r3, r7
 8002f8a:	78da      	ldrb	r2, [r3, #3]
 8002f8c:	000c      	movs	r4, r1
 8002f8e:	1823      	adds	r3, r4, r0
 8002f90:	19db      	adds	r3, r3, r7
 8002f92:	705a      	strb	r2, [r3, #1]
		GPSInformation[4] = (uint8_t)atoi(tempData2);
 8002f94:	1823      	adds	r3, r4, r0
 8002f96:	19db      	adds	r3, r3, r7
 8002f98:	0018      	movs	r0, r3
 8002f9a:	f00b feed 	bl	800ed78 <atoi>
 8002f9e:	0003      	movs	r3, r0
 8002fa0:	b2da      	uxtb	r2, r3
 8002fa2:	4b76      	ldr	r3, [pc, #472]	; (800317c <nmea_parser+0x7c4>)
 8002fa4:	711a      	strb	r2, [r3, #4]
		//seconds(1 byte)
		memset(tempData2,0,sizeof(tempData2));
 8002fa6:	2008      	movs	r0, #8
 8002fa8:	1823      	adds	r3, r4, r0
 8002faa:	19db      	adds	r3, r3, r7
 8002fac:	2204      	movs	r2, #4
 8002fae:	2100      	movs	r1, #0
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	f00b ff40 	bl	800ee36 <memset>
		tempData2[0]=tempData[4];
 8002fb6:	2008      	movs	r0, #8
 8002fb8:	182b      	adds	r3, r5, r0
 8002fba:	19db      	adds	r3, r3, r7
 8002fbc:	791a      	ldrb	r2, [r3, #4]
 8002fbe:	0021      	movs	r1, r4
 8002fc0:	0004      	movs	r4, r0
 8002fc2:	190b      	adds	r3, r1, r4
 8002fc4:	19db      	adds	r3, r3, r7
 8002fc6:	701a      	strb	r2, [r3, #0]
		tempData2[1]=tempData[5];
 8002fc8:	192b      	adds	r3, r5, r4
 8002fca:	19db      	adds	r3, r3, r7
 8002fcc:	795a      	ldrb	r2, [r3, #5]
 8002fce:	190b      	adds	r3, r1, r4
 8002fd0:	19db      	adds	r3, r3, r7
 8002fd2:	705a      	strb	r2, [r3, #1]
		GPSInformation[5] = (uint8_t)atoi(tempData2);
 8002fd4:	190b      	adds	r3, r1, r4
 8002fd6:	19db      	adds	r3, r3, r7
 8002fd8:	0018      	movs	r0, r3
 8002fda:	f00b fecd 	bl	800ed78 <atoi>
 8002fde:	0003      	movs	r3, r0
 8002fe0:	b2da      	uxtb	r2, r3
 8002fe2:	4b66      	ldr	r3, [pc, #408]	; (800317c <nmea_parser+0x7c4>)
 8002fe4:	715a      	strb	r2, [r3, #5]
		//--------------------------------time/date stamp end-------------------------------------------------

		//-----Quantity of GPS information satellites(1 byte, left 4 bit for gps info len, right 4 bit for qty of sats)
		memset(tempData,0,sizeof(tempData));
 8002fe6:	192b      	adds	r3, r5, r4
 8002fe8:	19db      	adds	r3, r3, r7
 8002fea:	220f      	movs	r2, #15
 8002fec:	2100      	movs	r1, #0
 8002fee:	0018      	movs	r0, r3
 8002ff0:	f00b ff21 	bl	800ee36 <memset>
		tempDataIndex = 0;
 8002ff4:	23e7      	movs	r3, #231	; 0xe7
 8002ff6:	191b      	adds	r3, r3, r4
 8002ff8:	19db      	adds	r3, r3, r7
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNGGAComma[6]+1;x<GNGGAComma[7];x++){
 8002ffe:	23a4      	movs	r3, #164	; 0xa4
 8003000:	191b      	adds	r3, r3, r4
 8003002:	19db      	adds	r3, r3, r7
 8003004:	799a      	ldrb	r2, [r3, #6]
 8003006:	23e3      	movs	r3, #227	; 0xe3
 8003008:	191b      	adds	r3, r3, r4
 800300a:	19db      	adds	r3, r3, r7
 800300c:	3201      	adds	r2, #1
 800300e:	701a      	strb	r2, [r3, #0]
 8003010:	e022      	b.n	8003058 <nmea_parser+0x6a0>
			tempData[tempDataIndex] = nmeaResponse[GNGGA][x];
 8003012:	0032      	movs	r2, r6
 8003014:	23cc      	movs	r3, #204	; 0xcc
 8003016:	2508      	movs	r5, #8
 8003018:	195b      	adds	r3, r3, r5
 800301a:	19db      	adds	r3, r3, r7
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	1899      	adds	r1, r3, r2
 8003020:	20e3      	movs	r0, #227	; 0xe3
 8003022:	1943      	adds	r3, r0, r5
 8003024:	19db      	adds	r3, r3, r7
 8003026:	781a      	ldrb	r2, [r3, #0]
 8003028:	24e7      	movs	r4, #231	; 0xe7
 800302a:	1963      	adds	r3, r4, r5
 800302c:	19db      	adds	r3, r3, r7
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	5c89      	ldrb	r1, [r1, r2]
 8003032:	2284      	movs	r2, #132	; 0x84
 8003034:	1952      	adds	r2, r2, r5
 8003036:	19d2      	adds	r2, r2, r7
 8003038:	54d1      	strb	r1, [r2, r3]
			tempDataIndex++;
 800303a:	0029      	movs	r1, r5
 800303c:	1863      	adds	r3, r4, r1
 800303e:	19db      	adds	r3, r3, r7
 8003040:	781a      	ldrb	r2, [r3, #0]
 8003042:	1863      	adds	r3, r4, r1
 8003044:	19db      	adds	r3, r3, r7
 8003046:	3201      	adds	r2, #1
 8003048:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNGGAComma[6]+1;x<GNGGAComma[7];x++){
 800304a:	1843      	adds	r3, r0, r1
 800304c:	19db      	adds	r3, r3, r7
 800304e:	781a      	ldrb	r2, [r3, #0]
 8003050:	1843      	adds	r3, r0, r1
 8003052:	19db      	adds	r3, r3, r7
 8003054:	3201      	adds	r2, #1
 8003056:	701a      	strb	r2, [r3, #0]
 8003058:	23a4      	movs	r3, #164	; 0xa4
 800305a:	2508      	movs	r5, #8
 800305c:	195b      	adds	r3, r3, r5
 800305e:	19db      	adds	r3, r3, r7
 8003060:	79db      	ldrb	r3, [r3, #7]
 8003062:	22e3      	movs	r2, #227	; 0xe3
 8003064:	1952      	adds	r2, r2, r5
 8003066:	19d2      	adds	r2, r2, r7
 8003068:	7812      	ldrb	r2, [r2, #0]
 800306a:	429a      	cmp	r2, r3
 800306c:	d3d1      	bcc.n	8003012 <nmea_parser+0x65a>
		}
		QOG |= (atoi(tempData));
 800306e:	2484      	movs	r4, #132	; 0x84
 8003070:	1963      	adds	r3, r4, r5
 8003072:	19db      	adds	r3, r3, r7
 8003074:	0018      	movs	r0, r3
 8003076:	f00b fe7f 	bl	800ed78 <atoi>
 800307a:	0003      	movs	r3, r0
 800307c:	b25a      	sxtb	r2, r3
 800307e:	21cb      	movs	r1, #203	; 0xcb
 8003080:	0028      	movs	r0, r5
 8003082:	180b      	adds	r3, r1, r0
 8003084:	19db      	adds	r3, r3, r7
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	b25b      	sxtb	r3, r3
 800308a:	4313      	orrs	r3, r2
 800308c:	b25a      	sxtb	r2, r3
 800308e:	180b      	adds	r3, r1, r0
 8003090:	19db      	adds	r3, r3, r7
 8003092:	701a      	strb	r2, [r3, #0]
		GPSInformation[6] = QOG;
 8003094:	4b39      	ldr	r3, [pc, #228]	; (800317c <nmea_parser+0x7c4>)
 8003096:	180a      	adds	r2, r1, r0
 8003098:	19d2      	adds	r2, r2, r7
 800309a:	7812      	ldrb	r2, [r2, #0]
 800309c:	719a      	strb	r2, [r3, #6]
		//-------------------------------------QOG END------------------------------------------------------


		//------------------------------------latitude (4 bytes)--------------------------------------
		// char *ptr1;
		memset(tempData,0,sizeof(tempData));
 800309e:	0005      	movs	r5, r0
 80030a0:	1823      	adds	r3, r4, r0
 80030a2:	19db      	adds	r3, r3, r7
 80030a4:	220f      	movs	r2, #15
 80030a6:	2100      	movs	r1, #0
 80030a8:	0018      	movs	r0, r3
 80030aa:	f00b fec4 	bl	800ee36 <memset>
		memset(tempData2,0,sizeof(tempData2));
 80030ae:	2380      	movs	r3, #128	; 0x80
 80030b0:	002c      	movs	r4, r5
 80030b2:	191b      	adds	r3, r3, r4
 80030b4:	19db      	adds	r3, r3, r7
 80030b6:	2204      	movs	r2, #4
 80030b8:	2100      	movs	r1, #0
 80030ba:	0018      	movs	r0, r3
 80030bc:	f00b febb 	bl	800ee36 <memset>
		tempDataIndex = 0;
 80030c0:	23e7      	movs	r3, #231	; 0xe7
 80030c2:	0021      	movs	r1, r4
 80030c4:	185b      	adds	r3, r3, r1
 80030c6:	19db      	adds	r3, r3, r7
 80030c8:	2200      	movs	r2, #0
 80030ca:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[2]+1;x<GNRMCComma[3];x++){
 80030cc:	2394      	movs	r3, #148	; 0x94
 80030ce:	185b      	adds	r3, r3, r1
 80030d0:	19db      	adds	r3, r3, r7
 80030d2:	789a      	ldrb	r2, [r3, #2]
 80030d4:	23e2      	movs	r3, #226	; 0xe2
 80030d6:	185b      	adds	r3, r3, r1
 80030d8:	19db      	adds	r3, r3, r7
 80030da:	3201      	adds	r2, #1
 80030dc:	701a      	strb	r2, [r3, #0]
 80030de:	e020      	b.n	8003122 <nmea_parser+0x76a>
			tempData[tempDataIndex]= nmeaResponse[GNRMC][x];
 80030e0:	20e2      	movs	r0, #226	; 0xe2
 80030e2:	2508      	movs	r5, #8
 80030e4:	1943      	adds	r3, r0, r5
 80030e6:	19db      	adds	r3, r3, r7
 80030e8:	781a      	ldrb	r2, [r3, #0]
 80030ea:	24e7      	movs	r4, #231	; 0xe7
 80030ec:	1963      	adds	r3, r4, r5
 80030ee:	19db      	adds	r3, r3, r7
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	21cc      	movs	r1, #204	; 0xcc
 80030f4:	1949      	adds	r1, r1, r5
 80030f6:	19c9      	adds	r1, r1, r7
 80030f8:	6809      	ldr	r1, [r1, #0]
 80030fa:	5c89      	ldrb	r1, [r1, r2]
 80030fc:	2284      	movs	r2, #132	; 0x84
 80030fe:	1952      	adds	r2, r2, r5
 8003100:	19d2      	adds	r2, r2, r7
 8003102:	54d1      	strb	r1, [r2, r3]
			tempDataIndex++;
 8003104:	0029      	movs	r1, r5
 8003106:	1863      	adds	r3, r4, r1
 8003108:	19db      	adds	r3, r3, r7
 800310a:	781a      	ldrb	r2, [r3, #0]
 800310c:	1863      	adds	r3, r4, r1
 800310e:	19db      	adds	r3, r3, r7
 8003110:	3201      	adds	r2, #1
 8003112:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[2]+1;x<GNRMCComma[3];x++){
 8003114:	1843      	adds	r3, r0, r1
 8003116:	19db      	adds	r3, r3, r7
 8003118:	781a      	ldrb	r2, [r3, #0]
 800311a:	1843      	adds	r3, r0, r1
 800311c:	19db      	adds	r3, r3, r7
 800311e:	3201      	adds	r2, #1
 8003120:	701a      	strb	r2, [r3, #0]
 8003122:	2394      	movs	r3, #148	; 0x94
 8003124:	2408      	movs	r4, #8
 8003126:	191b      	adds	r3, r3, r4
 8003128:	19db      	adds	r3, r3, r7
 800312a:	78db      	ldrb	r3, [r3, #3]
 800312c:	22e2      	movs	r2, #226	; 0xe2
 800312e:	1912      	adds	r2, r2, r4
 8003130:	19d2      	adds	r2, r2, r7
 8003132:	7812      	ldrb	r2, [r2, #0]
 8003134:	429a      	cmp	r2, r3
 8003136:	d3d3      	bcc.n	80030e0 <nmea_parser+0x728>
		}
		tempData2[0]=tempData[0];
 8003138:	2184      	movs	r1, #132	; 0x84
 800313a:	190b      	adds	r3, r1, r4
 800313c:	19db      	adds	r3, r3, r7
 800313e:	781a      	ldrb	r2, [r3, #0]
 8003140:	2080      	movs	r0, #128	; 0x80
 8003142:	1903      	adds	r3, r0, r4
 8003144:	19db      	adds	r3, r3, r7
 8003146:	701a      	strb	r2, [r3, #0]
		tempData2[1]=tempData[1];
 8003148:	190b      	adds	r3, r1, r4
 800314a:	19db      	adds	r3, r3, r7
 800314c:	785a      	ldrb	r2, [r3, #1]
 800314e:	0021      	movs	r1, r4
 8003150:	1843      	adds	r3, r0, r1
 8003152:	19db      	adds	r3, r3, r7
 8003154:	705a      	strb	r2, [r3, #1]
		uint8_t t1=2;
 8003156:	23e1      	movs	r3, #225	; 0xe1
 8003158:	185b      	adds	r3, r3, r1
 800315a:	19db      	adds	r3, r3, r7
 800315c:	2202      	movs	r2, #2
 800315e:	701a      	strb	r2, [r3, #0]
		uint8_t t2=0;
 8003160:	23e0      	movs	r3, #224	; 0xe0
 8003162:	185b      	adds	r3, r3, r1
 8003164:	19db      	adds	r3, r3, r7
 8003166:	2200      	movs	r2, #0
 8003168:	701a      	strb	r2, [r3, #0]
		char tB[9];
		memset(tB,0,sizeof(tB));
 800316a:	2374      	movs	r3, #116	; 0x74
 800316c:	185b      	adds	r3, r3, r1
 800316e:	19db      	adds	r3, r3, r7
 8003170:	2209      	movs	r2, #9
 8003172:	2100      	movs	r1, #0
 8003174:	0018      	movs	r0, r3
 8003176:	f00b fe5e 	bl	800ee36 <memset>
		while(tempData[t1]!=NULL){
 800317a:	e02f      	b.n	80031dc <nmea_parser+0x824>
 800317c:	200002d4 	.word	0x200002d4
			if(tempData[t1]!='.'){
 8003180:	21e1      	movs	r1, #225	; 0xe1
 8003182:	2008      	movs	r0, #8
 8003184:	180b      	adds	r3, r1, r0
 8003186:	19db      	adds	r3, r3, r7
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	2484      	movs	r4, #132	; 0x84
 800318c:	1822      	adds	r2, r4, r0
 800318e:	19d2      	adds	r2, r2, r7
 8003190:	5cd3      	ldrb	r3, [r2, r3]
 8003192:	2b2e      	cmp	r3, #46	; 0x2e
 8003194:	d019      	beq.n	80031ca <nmea_parser+0x812>
				tB[t2]=tempData[t1];
 8003196:	0005      	movs	r5, r0
 8003198:	180b      	adds	r3, r1, r0
 800319a:	19db      	adds	r3, r3, r7
 800319c:	781a      	ldrb	r2, [r3, #0]
 800319e:	20e0      	movs	r0, #224	; 0xe0
 80031a0:	0029      	movs	r1, r5
 80031a2:	1843      	adds	r3, r0, r1
 80031a4:	19db      	adds	r3, r3, r7
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	000d      	movs	r5, r1
 80031aa:	1861      	adds	r1, r4, r1
 80031ac:	19c9      	adds	r1, r1, r7
 80031ae:	5c89      	ldrb	r1, [r1, r2]
 80031b0:	2274      	movs	r2, #116	; 0x74
 80031b2:	002c      	movs	r4, r5
 80031b4:	1912      	adds	r2, r2, r4
 80031b6:	19d2      	adds	r2, r2, r7
 80031b8:	54d1      	strb	r1, [r2, r3]
				t2++;
 80031ba:	0021      	movs	r1, r4
 80031bc:	1843      	adds	r3, r0, r1
 80031be:	19db      	adds	r3, r3, r7
 80031c0:	781a      	ldrb	r2, [r3, #0]
 80031c2:	1843      	adds	r3, r0, r1
 80031c4:	19db      	adds	r3, r3, r7
 80031c6:	3201      	adds	r2, #1
 80031c8:	701a      	strb	r2, [r3, #0]
			}
			t1++;
 80031ca:	21e1      	movs	r1, #225	; 0xe1
 80031cc:	2008      	movs	r0, #8
 80031ce:	180b      	adds	r3, r1, r0
 80031d0:	19db      	adds	r3, r3, r7
 80031d2:	781a      	ldrb	r2, [r3, #0]
 80031d4:	180b      	adds	r3, r1, r0
 80031d6:	19db      	adds	r3, r3, r7
 80031d8:	3201      	adds	r2, #1
 80031da:	701a      	strb	r2, [r3, #0]
		while(tempData[t1]!=NULL){
 80031dc:	23e1      	movs	r3, #225	; 0xe1
 80031de:	2008      	movs	r0, #8
 80031e0:	181b      	adds	r3, r3, r0
 80031e2:	19db      	adds	r3, r3, r7
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	2284      	movs	r2, #132	; 0x84
 80031e8:	1812      	adds	r2, r2, r0
 80031ea:	19d2      	adds	r2, r2, r7
 80031ec:	5cd3      	ldrb	r3, [r2, r3]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1c6      	bne.n	8003180 <nmea_parser+0x7c8>
		}
		latitude=atoi(tB);
 80031f2:	2374      	movs	r3, #116	; 0x74
 80031f4:	0004      	movs	r4, r0
 80031f6:	181b      	adds	r3, r3, r0
 80031f8:	19db      	adds	r3, r3, r7
 80031fa:	0018      	movs	r0, r3
 80031fc:	f00b fdbc 	bl	800ed78 <atoi>
 8003200:	0003      	movs	r3, r0
 8003202:	22ec      	movs	r2, #236	; 0xec
 8003204:	0020      	movs	r0, r4
 8003206:	1811      	adds	r1, r2, r0
 8003208:	19c9      	adds	r1, r1, r7
 800320a:	600b      	str	r3, [r1, #0]
		if(t2==4){
 800320c:	23e0      	movs	r3, #224	; 0xe0
 800320e:	181b      	adds	r3, r3, r0
 8003210:	19db      	adds	r3, r3, r7
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	2b04      	cmp	r3, #4
 8003216:	d109      	bne.n	800322c <nmea_parser+0x874>
			latitude*=100;
 8003218:	0011      	movs	r1, r2
 800321a:	1813      	adds	r3, r2, r0
 800321c:	19db      	adds	r3, r3, r7
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2264      	movs	r2, #100	; 0x64
 8003222:	4353      	muls	r3, r2
 8003224:	180a      	adds	r2, r1, r0
 8003226:	19d2      	adds	r2, r2, r7
 8003228:	6013      	str	r3, [r2, #0]
 800322a:	e011      	b.n	8003250 <nmea_parser+0x898>
		}
		else if(t2==5){
 800322c:	23e0      	movs	r3, #224	; 0xe0
 800322e:	2008      	movs	r0, #8
 8003230:	181b      	adds	r3, r3, r0
 8003232:	19db      	adds	r3, r3, r7
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	2b05      	cmp	r3, #5
 8003238:	d10a      	bne.n	8003250 <nmea_parser+0x898>
			latitude*=10;
 800323a:	21ec      	movs	r1, #236	; 0xec
 800323c:	180b      	adds	r3, r1, r0
 800323e:	19db      	adds	r3, r3, r7
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	0013      	movs	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	189b      	adds	r3, r3, r2
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	180a      	adds	r2, r1, r0
 800324c:	19d2      	adds	r2, r2, r7
 800324e:	6013      	str	r3, [r2, #0]
		}

		latitude=latitude*3;
 8003250:	24ec      	movs	r4, #236	; 0xec
 8003252:	2008      	movs	r0, #8
 8003254:	1823      	adds	r3, r4, r0
 8003256:	19db      	adds	r3, r3, r7
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	0013      	movs	r3, r2
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	189b      	adds	r3, r3, r2
 8003260:	1822      	adds	r2, r4, r0
 8003262:	19d2      	adds	r2, r2, r7
 8003264:	6013      	str	r3, [r2, #0]

		latitude+= (atoi(tempData2)*60*30000);
 8003266:	2580      	movs	r5, #128	; 0x80
 8003268:	182b      	adds	r3, r5, r0
 800326a:	19db      	adds	r3, r3, r7
 800326c:	0018      	movs	r0, r3
 800326e:	f00b fd83 	bl	800ed78 <atoi>
 8003272:	0003      	movs	r3, r0
 8003274:	4aae      	ldr	r2, [pc, #696]	; (8003530 <nmea_parser+0xb78>)
 8003276:	4353      	muls	r3, r2
 8003278:	001a      	movs	r2, r3
 800327a:	2008      	movs	r0, #8
 800327c:	1823      	adds	r3, r4, r0
 800327e:	19db      	adds	r3, r3, r7
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	189b      	adds	r3, r3, r2
 8003284:	0021      	movs	r1, r4
 8003286:	180a      	adds	r2, r1, r0
 8003288:	19d2      	adds	r2, r2, r7
 800328a:	6013      	str	r3, [r2, #0]

		GPSInformation[7] = latitude>>24;
 800328c:	180b      	adds	r3, r1, r0
 800328e:	19db      	adds	r3, r3, r7
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	0e1b      	lsrs	r3, r3, #24
 8003294:	b2da      	uxtb	r2, r3
 8003296:	4ba7      	ldr	r3, [pc, #668]	; (8003534 <nmea_parser+0xb7c>)
 8003298:	71da      	strb	r2, [r3, #7]
		GPSInformation[8] = latitude>>16;
 800329a:	180b      	adds	r3, r1, r0
 800329c:	19db      	adds	r3, r3, r7
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	0c1b      	lsrs	r3, r3, #16
 80032a2:	b2da      	uxtb	r2, r3
 80032a4:	4ba3      	ldr	r3, [pc, #652]	; (8003534 <nmea_parser+0xb7c>)
 80032a6:	721a      	strb	r2, [r3, #8]
		GPSInformation[9] = latitude>>8;
 80032a8:	180b      	adds	r3, r1, r0
 80032aa:	19db      	adds	r3, r3, r7
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	0a1b      	lsrs	r3, r3, #8
 80032b0:	b2da      	uxtb	r2, r3
 80032b2:	4ba0      	ldr	r3, [pc, #640]	; (8003534 <nmea_parser+0xb7c>)
 80032b4:	725a      	strb	r2, [r3, #9]
		GPSInformation[10] = latitude;
 80032b6:	180b      	adds	r3, r1, r0
 80032b8:	19db      	adds	r3, r3, r7
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	b2da      	uxtb	r2, r3
 80032be:	4b9d      	ldr	r3, [pc, #628]	; (8003534 <nmea_parser+0xb7c>)
 80032c0:	729a      	strb	r2, [r3, #10]



		//------------------------------------longitude (4 bytes)--------------------------------------
		// char *ptr2;
		memset(tempData,0,sizeof(tempData));
 80032c2:	2384      	movs	r3, #132	; 0x84
 80032c4:	0004      	movs	r4, r0
 80032c6:	191b      	adds	r3, r3, r4
 80032c8:	19db      	adds	r3, r3, r7
 80032ca:	220f      	movs	r2, #15
 80032cc:	2100      	movs	r1, #0
 80032ce:	0018      	movs	r0, r3
 80032d0:	f00b fdb1 	bl	800ee36 <memset>
		memset(tempData2,0,sizeof(tempData2));
 80032d4:	192b      	adds	r3, r5, r4
 80032d6:	19db      	adds	r3, r3, r7
 80032d8:	2204      	movs	r2, #4
 80032da:	2100      	movs	r1, #0
 80032dc:	0018      	movs	r0, r3
 80032de:	f00b fdaa 	bl	800ee36 <memset>
		tempDataIndex = 0;
 80032e2:	23e7      	movs	r3, #231	; 0xe7
 80032e4:	0020      	movs	r0, r4
 80032e6:	181b      	adds	r3, r3, r0
 80032e8:	19db      	adds	r3, r3, r7
 80032ea:	2200      	movs	r2, #0
 80032ec:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[4]+1;x<GNRMCComma[5];x++){
 80032ee:	2394      	movs	r3, #148	; 0x94
 80032f0:	181b      	adds	r3, r3, r0
 80032f2:	19db      	adds	r3, r3, r7
 80032f4:	791a      	ldrb	r2, [r3, #4]
 80032f6:	23df      	movs	r3, #223	; 0xdf
 80032f8:	181b      	adds	r3, r3, r0
 80032fa:	19db      	adds	r3, r3, r7
 80032fc:	3201      	adds	r2, #1
 80032fe:	701a      	strb	r2, [r3, #0]
 8003300:	e020      	b.n	8003344 <nmea_parser+0x98c>
			tempData[tempDataIndex]= nmeaResponse[GNRMC][x];
 8003302:	20df      	movs	r0, #223	; 0xdf
 8003304:	2508      	movs	r5, #8
 8003306:	1943      	adds	r3, r0, r5
 8003308:	19db      	adds	r3, r3, r7
 800330a:	781a      	ldrb	r2, [r3, #0]
 800330c:	24e7      	movs	r4, #231	; 0xe7
 800330e:	1963      	adds	r3, r4, r5
 8003310:	19db      	adds	r3, r3, r7
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	21cc      	movs	r1, #204	; 0xcc
 8003316:	1949      	adds	r1, r1, r5
 8003318:	19c9      	adds	r1, r1, r7
 800331a:	6809      	ldr	r1, [r1, #0]
 800331c:	5c89      	ldrb	r1, [r1, r2]
 800331e:	2284      	movs	r2, #132	; 0x84
 8003320:	1952      	adds	r2, r2, r5
 8003322:	19d2      	adds	r2, r2, r7
 8003324:	54d1      	strb	r1, [r2, r3]
			tempDataIndex++;
 8003326:	0029      	movs	r1, r5
 8003328:	1863      	adds	r3, r4, r1
 800332a:	19db      	adds	r3, r3, r7
 800332c:	781a      	ldrb	r2, [r3, #0]
 800332e:	1863      	adds	r3, r4, r1
 8003330:	19db      	adds	r3, r3, r7
 8003332:	3201      	adds	r2, #1
 8003334:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[4]+1;x<GNRMCComma[5];x++){
 8003336:	1843      	adds	r3, r0, r1
 8003338:	19db      	adds	r3, r3, r7
 800333a:	781a      	ldrb	r2, [r3, #0]
 800333c:	1843      	adds	r3, r0, r1
 800333e:	19db      	adds	r3, r3, r7
 8003340:	3201      	adds	r2, #1
 8003342:	701a      	strb	r2, [r3, #0]
 8003344:	2394      	movs	r3, #148	; 0x94
 8003346:	2408      	movs	r4, #8
 8003348:	191b      	adds	r3, r3, r4
 800334a:	19db      	adds	r3, r3, r7
 800334c:	795b      	ldrb	r3, [r3, #5]
 800334e:	22df      	movs	r2, #223	; 0xdf
 8003350:	1912      	adds	r2, r2, r4
 8003352:	19d2      	adds	r2, r2, r7
 8003354:	7812      	ldrb	r2, [r2, #0]
 8003356:	429a      	cmp	r2, r3
 8003358:	d3d3      	bcc.n	8003302 <nmea_parser+0x94a>
		}

		tempData2[0]=tempData[0];
 800335a:	2184      	movs	r1, #132	; 0x84
 800335c:	190b      	adds	r3, r1, r4
 800335e:	19db      	adds	r3, r3, r7
 8003360:	781a      	ldrb	r2, [r3, #0]
 8003362:	2080      	movs	r0, #128	; 0x80
 8003364:	1903      	adds	r3, r0, r4
 8003366:	19db      	adds	r3, r3, r7
 8003368:	701a      	strb	r2, [r3, #0]
		tempData2[1]=tempData[1];
 800336a:	190b      	adds	r3, r1, r4
 800336c:	19db      	adds	r3, r3, r7
 800336e:	785a      	ldrb	r2, [r3, #1]
 8003370:	1903      	adds	r3, r0, r4
 8003372:	19db      	adds	r3, r3, r7
 8003374:	705a      	strb	r2, [r3, #1]
		tempData2[2]=tempData[2];
 8003376:	190b      	adds	r3, r1, r4
 8003378:	19db      	adds	r3, r3, r7
 800337a:	789a      	ldrb	r2, [r3, #2]
 800337c:	0021      	movs	r1, r4
 800337e:	1843      	adds	r3, r0, r1
 8003380:	19db      	adds	r3, r3, r7
 8003382:	709a      	strb	r2, [r3, #2]
		memset(tB,0,sizeof(tB));
 8003384:	2374      	movs	r3, #116	; 0x74
 8003386:	000c      	movs	r4, r1
 8003388:	185b      	adds	r3, r3, r1
 800338a:	19db      	adds	r3, r3, r7
 800338c:	2209      	movs	r2, #9
 800338e:	2100      	movs	r1, #0
 8003390:	0018      	movs	r0, r3
 8003392:	f00b fd50 	bl	800ee36 <memset>
		t1=3;
 8003396:	23e1      	movs	r3, #225	; 0xe1
 8003398:	0021      	movs	r1, r4
 800339a:	185b      	adds	r3, r3, r1
 800339c:	19db      	adds	r3, r3, r7
 800339e:	2203      	movs	r2, #3
 80033a0:	701a      	strb	r2, [r3, #0]
		t2=0;
 80033a2:	23e0      	movs	r3, #224	; 0xe0
 80033a4:	185b      	adds	r3, r3, r1
 80033a6:	19db      	adds	r3, r3, r7
 80033a8:	2200      	movs	r2, #0
 80033aa:	701a      	strb	r2, [r3, #0]
		while(tempData[t1]!=NULL){
 80033ac:	e02d      	b.n	800340a <nmea_parser+0xa52>
			if(tempData[t1]!='.'){
 80033ae:	21e1      	movs	r1, #225	; 0xe1
 80033b0:	2008      	movs	r0, #8
 80033b2:	180b      	adds	r3, r1, r0
 80033b4:	19db      	adds	r3, r3, r7
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	2484      	movs	r4, #132	; 0x84
 80033ba:	1822      	adds	r2, r4, r0
 80033bc:	19d2      	adds	r2, r2, r7
 80033be:	5cd3      	ldrb	r3, [r2, r3]
 80033c0:	2b2e      	cmp	r3, #46	; 0x2e
 80033c2:	d019      	beq.n	80033f8 <nmea_parser+0xa40>
				tB[t2]=tempData[t1];
 80033c4:	0005      	movs	r5, r0
 80033c6:	180b      	adds	r3, r1, r0
 80033c8:	19db      	adds	r3, r3, r7
 80033ca:	781a      	ldrb	r2, [r3, #0]
 80033cc:	20e0      	movs	r0, #224	; 0xe0
 80033ce:	0029      	movs	r1, r5
 80033d0:	1843      	adds	r3, r0, r1
 80033d2:	19db      	adds	r3, r3, r7
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	000d      	movs	r5, r1
 80033d8:	1861      	adds	r1, r4, r1
 80033da:	19c9      	adds	r1, r1, r7
 80033dc:	5c89      	ldrb	r1, [r1, r2]
 80033de:	2274      	movs	r2, #116	; 0x74
 80033e0:	002c      	movs	r4, r5
 80033e2:	1912      	adds	r2, r2, r4
 80033e4:	19d2      	adds	r2, r2, r7
 80033e6:	54d1      	strb	r1, [r2, r3]
				t2++;
 80033e8:	0021      	movs	r1, r4
 80033ea:	1843      	adds	r3, r0, r1
 80033ec:	19db      	adds	r3, r3, r7
 80033ee:	781a      	ldrb	r2, [r3, #0]
 80033f0:	1843      	adds	r3, r0, r1
 80033f2:	19db      	adds	r3, r3, r7
 80033f4:	3201      	adds	r2, #1
 80033f6:	701a      	strb	r2, [r3, #0]
			}
			t1++;
 80033f8:	21e1      	movs	r1, #225	; 0xe1
 80033fa:	2008      	movs	r0, #8
 80033fc:	180b      	adds	r3, r1, r0
 80033fe:	19db      	adds	r3, r3, r7
 8003400:	781a      	ldrb	r2, [r3, #0]
 8003402:	180b      	adds	r3, r1, r0
 8003404:	19db      	adds	r3, r3, r7
 8003406:	3201      	adds	r2, #1
 8003408:	701a      	strb	r2, [r3, #0]
		while(tempData[t1]!=NULL){
 800340a:	23e1      	movs	r3, #225	; 0xe1
 800340c:	2008      	movs	r0, #8
 800340e:	181b      	adds	r3, r3, r0
 8003410:	19db      	adds	r3, r3, r7
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	2284      	movs	r2, #132	; 0x84
 8003416:	1812      	adds	r2, r2, r0
 8003418:	19d2      	adds	r2, r2, r7
 800341a:	5cd3      	ldrb	r3, [r2, r3]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1c6      	bne.n	80033ae <nmea_parser+0x9f6>
		}
		longitude=atoi(tB);
 8003420:	2374      	movs	r3, #116	; 0x74
 8003422:	0004      	movs	r4, r0
 8003424:	181b      	adds	r3, r3, r0
 8003426:	19db      	adds	r3, r3, r7
 8003428:	0018      	movs	r0, r3
 800342a:	f00b fca5 	bl	800ed78 <atoi>
 800342e:	0003      	movs	r3, r0
 8003430:	22e8      	movs	r2, #232	; 0xe8
 8003432:	0020      	movs	r0, r4
 8003434:	1811      	adds	r1, r2, r0
 8003436:	19c9      	adds	r1, r1, r7
 8003438:	600b      	str	r3, [r1, #0]
		if(t2==4){
 800343a:	23e0      	movs	r3, #224	; 0xe0
 800343c:	181b      	adds	r3, r3, r0
 800343e:	19db      	adds	r3, r3, r7
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	2b04      	cmp	r3, #4
 8003444:	d109      	bne.n	800345a <nmea_parser+0xaa2>
			longitude*=100;
 8003446:	0011      	movs	r1, r2
 8003448:	1813      	adds	r3, r2, r0
 800344a:	19db      	adds	r3, r3, r7
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2264      	movs	r2, #100	; 0x64
 8003450:	4353      	muls	r3, r2
 8003452:	180a      	adds	r2, r1, r0
 8003454:	19d2      	adds	r2, r2, r7
 8003456:	6013      	str	r3, [r2, #0]
 8003458:	e011      	b.n	800347e <nmea_parser+0xac6>
		}
		else if(t2==5){
 800345a:	23e0      	movs	r3, #224	; 0xe0
 800345c:	2008      	movs	r0, #8
 800345e:	181b      	adds	r3, r3, r0
 8003460:	19db      	adds	r3, r3, r7
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	2b05      	cmp	r3, #5
 8003466:	d10a      	bne.n	800347e <nmea_parser+0xac6>
			longitude*=10;
 8003468:	21e8      	movs	r1, #232	; 0xe8
 800346a:	180b      	adds	r3, r1, r0
 800346c:	19db      	adds	r3, r3, r7
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	0013      	movs	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	189b      	adds	r3, r3, r2
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	180a      	adds	r2, r1, r0
 800347a:	19d2      	adds	r2, r2, r7
 800347c:	6013      	str	r3, [r2, #0]
		}
		longitude=longitude*3;
 800347e:	24e8      	movs	r4, #232	; 0xe8
 8003480:	2008      	movs	r0, #8
 8003482:	1823      	adds	r3, r4, r0
 8003484:	19db      	adds	r3, r3, r7
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	0013      	movs	r3, r2
 800348a:	005b      	lsls	r3, r3, #1
 800348c:	189b      	adds	r3, r3, r2
 800348e:	1822      	adds	r2, r4, r0
 8003490:	19d2      	adds	r2, r2, r7
 8003492:	6013      	str	r3, [r2, #0]
		longitude+= (atoi(tempData2)*60*30000);
 8003494:	2580      	movs	r5, #128	; 0x80
 8003496:	182b      	adds	r3, r5, r0
 8003498:	19db      	adds	r3, r3, r7
 800349a:	0018      	movs	r0, r3
 800349c:	f00b fc6c 	bl	800ed78 <atoi>
 80034a0:	0003      	movs	r3, r0
 80034a2:	4a23      	ldr	r2, [pc, #140]	; (8003530 <nmea_parser+0xb78>)
 80034a4:	4353      	muls	r3, r2
 80034a6:	001a      	movs	r2, r3
 80034a8:	2008      	movs	r0, #8
 80034aa:	1823      	adds	r3, r4, r0
 80034ac:	19db      	adds	r3, r3, r7
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	189b      	adds	r3, r3, r2
 80034b2:	0021      	movs	r1, r4
 80034b4:	180a      	adds	r2, r1, r0
 80034b6:	19d2      	adds	r2, r2, r7
 80034b8:	6013      	str	r3, [r2, #0]
		GPSInformation[11] = longitude>>24;
 80034ba:	180b      	adds	r3, r1, r0
 80034bc:	19db      	adds	r3, r3, r7
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	0e1b      	lsrs	r3, r3, #24
 80034c2:	b2da      	uxtb	r2, r3
 80034c4:	4b1b      	ldr	r3, [pc, #108]	; (8003534 <nmea_parser+0xb7c>)
 80034c6:	72da      	strb	r2, [r3, #11]
		GPSInformation[12] = longitude>>16;
 80034c8:	180b      	adds	r3, r1, r0
 80034ca:	19db      	adds	r3, r3, r7
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	0c1b      	lsrs	r3, r3, #16
 80034d0:	b2da      	uxtb	r2, r3
 80034d2:	4b18      	ldr	r3, [pc, #96]	; (8003534 <nmea_parser+0xb7c>)
 80034d4:	731a      	strb	r2, [r3, #12]
		GPSInformation[13] = longitude>>8;
 80034d6:	180b      	adds	r3, r1, r0
 80034d8:	19db      	adds	r3, r3, r7
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	0a1b      	lsrs	r3, r3, #8
 80034de:	b2da      	uxtb	r2, r3
 80034e0:	4b14      	ldr	r3, [pc, #80]	; (8003534 <nmea_parser+0xb7c>)
 80034e2:	735a      	strb	r2, [r3, #13]
		GPSInformation[14] = longitude;
 80034e4:	180b      	adds	r3, r1, r0
 80034e6:	19db      	adds	r3, r3, r7
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	b2da      	uxtb	r2, r3
 80034ec:	4b11      	ldr	r3, [pc, #68]	; (8003534 <nmea_parser+0xb7c>)
 80034ee:	739a      	strb	r2, [r3, #14]
		//------------------------------------longitude end--------------------------------------



		//----------------------------------speed----------------------------------------------------
		memset(tempData,0,sizeof(tempData));
 80034f0:	2384      	movs	r3, #132	; 0x84
 80034f2:	0004      	movs	r4, r0
 80034f4:	191b      	adds	r3, r3, r4
 80034f6:	19db      	adds	r3, r3, r7
 80034f8:	220f      	movs	r2, #15
 80034fa:	2100      	movs	r1, #0
 80034fc:	0018      	movs	r0, r3
 80034fe:	f00b fc9a 	bl	800ee36 <memset>
		memset(tempData2,0,sizeof(tempData2));
 8003502:	192b      	adds	r3, r5, r4
 8003504:	19db      	adds	r3, r3, r7
 8003506:	2204      	movs	r2, #4
 8003508:	2100      	movs	r1, #0
 800350a:	0018      	movs	r0, r3
 800350c:	f00b fc93 	bl	800ee36 <memset>
		tempDataIndex = 0;
 8003510:	23e7      	movs	r3, #231	; 0xe7
 8003512:	0020      	movs	r0, r4
 8003514:	181b      	adds	r3, r3, r0
 8003516:	19db      	adds	r3, r3, r7
 8003518:	2200      	movs	r2, #0
 800351a:	701a      	strb	r2, [r3, #0]
		float speedinf;
		for(uint8_t x =GNRMCComma[6]+1;x<GNRMCComma[7];x++){
 800351c:	2394      	movs	r3, #148	; 0x94
 800351e:	181b      	adds	r3, r3, r0
 8003520:	19db      	adds	r3, r3, r7
 8003522:	799a      	ldrb	r2, [r3, #6]
 8003524:	23d7      	movs	r3, #215	; 0xd7
 8003526:	181b      	adds	r3, r3, r0
 8003528:	19db      	adds	r3, r3, r7
 800352a:	3201      	adds	r2, #1
 800352c:	701a      	strb	r2, [r3, #0]
 800352e:	e024      	b.n	800357a <nmea_parser+0xbc2>
 8003530:	001b7740 	.word	0x001b7740
 8003534:	200002d4 	.word	0x200002d4
			tempData[tempDataIndex]= nmeaResponse[GNRMC][x];
 8003538:	20d7      	movs	r0, #215	; 0xd7
 800353a:	2508      	movs	r5, #8
 800353c:	1943      	adds	r3, r0, r5
 800353e:	19db      	adds	r3, r3, r7
 8003540:	781a      	ldrb	r2, [r3, #0]
 8003542:	24e7      	movs	r4, #231	; 0xe7
 8003544:	1963      	adds	r3, r4, r5
 8003546:	19db      	adds	r3, r3, r7
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	21cc      	movs	r1, #204	; 0xcc
 800354c:	1949      	adds	r1, r1, r5
 800354e:	19c9      	adds	r1, r1, r7
 8003550:	6809      	ldr	r1, [r1, #0]
 8003552:	5c89      	ldrb	r1, [r1, r2]
 8003554:	2284      	movs	r2, #132	; 0x84
 8003556:	1952      	adds	r2, r2, r5
 8003558:	19d2      	adds	r2, r2, r7
 800355a:	54d1      	strb	r1, [r2, r3]
			tempDataIndex++;
 800355c:	0029      	movs	r1, r5
 800355e:	1863      	adds	r3, r4, r1
 8003560:	19db      	adds	r3, r3, r7
 8003562:	781a      	ldrb	r2, [r3, #0]
 8003564:	1863      	adds	r3, r4, r1
 8003566:	19db      	adds	r3, r3, r7
 8003568:	3201      	adds	r2, #1
 800356a:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[6]+1;x<GNRMCComma[7];x++){
 800356c:	1843      	adds	r3, r0, r1
 800356e:	19db      	adds	r3, r3, r7
 8003570:	781a      	ldrb	r2, [r3, #0]
 8003572:	1843      	adds	r3, r0, r1
 8003574:	19db      	adds	r3, r3, r7
 8003576:	3201      	adds	r2, #1
 8003578:	701a      	strb	r2, [r3, #0]
 800357a:	2394      	movs	r3, #148	; 0x94
 800357c:	2508      	movs	r5, #8
 800357e:	195b      	adds	r3, r3, r5
 8003580:	19db      	adds	r3, r3, r7
 8003582:	79db      	ldrb	r3, [r3, #7]
 8003584:	22d7      	movs	r2, #215	; 0xd7
 8003586:	1952      	adds	r2, r2, r5
 8003588:	19d2      	adds	r2, r2, r7
 800358a:	7812      	ldrb	r2, [r2, #0]
 800358c:	429a      	cmp	r2, r3
 800358e:	d3d3      	bcc.n	8003538 <nmea_parser+0xb80>
		}

		speedinf = strtof(tempData,NULL);
 8003590:	2384      	movs	r3, #132	; 0x84
 8003592:	195b      	adds	r3, r3, r5
 8003594:	19db      	adds	r3, r3, r7
 8003596:	2100      	movs	r1, #0
 8003598:	0018      	movs	r0, r3
 800359a:	f00c fae7 	bl	800fb6c <strtof>
 800359e:	1c03      	adds	r3, r0, #0
 80035a0:	24d8      	movs	r4, #216	; 0xd8
 80035a2:	1962      	adds	r2, r4, r5
 80035a4:	19d2      	adds	r2, r2, r7
 80035a6:	6013      	str	r3, [r2, #0]
		speedinf= speedinf * 1.85;
 80035a8:	1963      	adds	r3, r4, r5
 80035aa:	19db      	adds	r3, r3, r7
 80035ac:	6818      	ldr	r0, [r3, #0]
 80035ae:	f7ff f8e3 	bl	8002778 <__aeabi_f2d>
 80035b2:	4a80      	ldr	r2, [pc, #512]	; (80037b4 <nmea_parser+0xdfc>)
 80035b4:	4b80      	ldr	r3, [pc, #512]	; (80037b8 <nmea_parser+0xe00>)
 80035b6:	f7fe fa37 	bl	8001a28 <__aeabi_dmul>
 80035ba:	0002      	movs	r2, r0
 80035bc:	000b      	movs	r3, r1
 80035be:	0010      	movs	r0, r2
 80035c0:	0019      	movs	r1, r3
 80035c2:	f7ff f921 	bl	8002808 <__aeabi_d2f>
 80035c6:	1c03      	adds	r3, r0, #0
 80035c8:	1962      	adds	r2, r4, r5
 80035ca:	19d2      	adds	r2, r2, r7
 80035cc:	6013      	str	r3, [r2, #0]
		if(speedinf>255){
 80035ce:	497b      	ldr	r1, [pc, #492]	; (80037bc <nmea_parser+0xe04>)
 80035d0:	1963      	adds	r3, r4, r5
 80035d2:	19db      	adds	r3, r3, r7
 80035d4:	6818      	ldr	r0, [r3, #0]
 80035d6:	f7fc ff93 	bl	8000500 <__aeabi_fcmpgt>
 80035da:	1e03      	subs	r3, r0, #0
 80035dc:	d003      	beq.n	80035e6 <nmea_parser+0xc2e>
			speedinf=255;
 80035de:	4b77      	ldr	r3, [pc, #476]	; (80037bc <nmea_parser+0xe04>)
 80035e0:	1962      	adds	r2, r4, r5
 80035e2:	19d2      	adds	r2, r2, r7
 80035e4:	6013      	str	r3, [r2, #0]
		}
		if(speedinf<1){
 80035e6:	21fe      	movs	r1, #254	; 0xfe
 80035e8:	0589      	lsls	r1, r1, #22
 80035ea:	24d8      	movs	r4, #216	; 0xd8
 80035ec:	2508      	movs	r5, #8
 80035ee:	1963      	adds	r3, r4, r5
 80035f0:	19db      	adds	r3, r3, r7
 80035f2:	6818      	ldr	r0, [r3, #0]
 80035f4:	f7fc ff70 	bl	80004d8 <__aeabi_fcmplt>
 80035f8:	1e03      	subs	r3, r0, #0
 80035fa:	d003      	beq.n	8003604 <nmea_parser+0xc4c>
			speedinf=0;
 80035fc:	2300      	movs	r3, #0
 80035fe:	1962      	adds	r2, r4, r5
 8003600:	19d2      	adds	r2, r2, r7
 8003602:	6013      	str	r3, [r2, #0]

		}

		GPSInformation[15] = (int)speedinf;
 8003604:	23d8      	movs	r3, #216	; 0xd8
 8003606:	2408      	movs	r4, #8
 8003608:	191b      	adds	r3, r3, r4
 800360a:	19db      	adds	r3, r3, r7
 800360c:	6818      	ldr	r0, [r3, #0]
 800360e:	f7fd fa5f 	bl	8000ad0 <__aeabi_f2iz>
 8003612:	0003      	movs	r3, r0
 8003614:	b2da      	uxtb	r2, r3
 8003616:	4b6a      	ldr	r3, [pc, #424]	; (80037c0 <nmea_parser+0xe08>)
 8003618:	73da      	strb	r2, [r3, #15]



		//------------------------------Coursestatus block(2 byte)--------------------------------
		//Byte1, bit 4(gps position bit)
		if (nmeaResponse[GNRMC][GNRMCComma[1]+1] == 'A'){
 800361a:	2394      	movs	r3, #148	; 0x94
 800361c:	191b      	adds	r3, r3, r4
 800361e:	19db      	adds	r3, r3, r7
 8003620:	785b      	ldrb	r3, [r3, #1]
 8003622:	3301      	adds	r3, #1
 8003624:	22cc      	movs	r2, #204	; 0xcc
 8003626:	1912      	adds	r2, r2, r4
 8003628:	19d2      	adds	r2, r2, r7
 800362a:	6812      	ldr	r2, [r2, #0]
 800362c:	5cd3      	ldrb	r3, [r2, r3]
 800362e:	2b41      	cmp	r3, #65	; 0x41
 8003630:	d109      	bne.n	8003646 <nmea_parser+0xc8e>
			courseStatus |= 0x1000;
 8003632:	22f6      	movs	r2, #246	; 0xf6
 8003634:	1913      	adds	r3, r2, r4
 8003636:	19db      	adds	r3, r3, r7
 8003638:	1912      	adds	r2, r2, r4
 800363a:	19d2      	adds	r2, r2, r7
 800363c:	8812      	ldrh	r2, [r2, #0]
 800363e:	2180      	movs	r1, #128	; 0x80
 8003640:	0149      	lsls	r1, r1, #5
 8003642:	430a      	orrs	r2, r1
 8003644:	801a      	strh	r2, [r3, #0]
		}
		//Byte1, bit 5(realtime differential)
		if (nmeaResponse[GNGGA][GNGGAComma[5]+1] != '1'){
 8003646:	0032      	movs	r2, r6
 8003648:	23cc      	movs	r3, #204	; 0xcc
 800364a:	2108      	movs	r1, #8
 800364c:	185b      	adds	r3, r3, r1
 800364e:	19db      	adds	r3, r3, r7
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	189a      	adds	r2, r3, r2
 8003654:	23a4      	movs	r3, #164	; 0xa4
 8003656:	185b      	adds	r3, r3, r1
 8003658:	19db      	adds	r3, r3, r7
 800365a:	795b      	ldrb	r3, [r3, #5]
 800365c:	3301      	adds	r3, #1
 800365e:	5cd3      	ldrb	r3, [r2, r3]
 8003660:	2b31      	cmp	r3, #49	; 0x31
 8003662:	d009      	beq.n	8003678 <nmea_parser+0xcc0>
			courseStatus |= 0x2000;
 8003664:	22f6      	movs	r2, #246	; 0xf6
 8003666:	1853      	adds	r3, r2, r1
 8003668:	19db      	adds	r3, r3, r7
 800366a:	1852      	adds	r2, r2, r1
 800366c:	19d2      	adds	r2, r2, r7
 800366e:	8812      	ldrh	r2, [r2, #0]
 8003670:	2180      	movs	r1, #128	; 0x80
 8003672:	0189      	lsls	r1, r1, #6
 8003674:	430a      	orrs	r2, r1
 8003676:	801a      	strh	r2, [r3, #0]
		}
		//Byte1, bit 3(East/West bit)
		if(nmeaResponse[GNRMC][GNRMCComma[5]+1] == 'W' ){
 8003678:	2394      	movs	r3, #148	; 0x94
 800367a:	2108      	movs	r1, #8
 800367c:	185b      	adds	r3, r3, r1
 800367e:	19db      	adds	r3, r3, r7
 8003680:	795b      	ldrb	r3, [r3, #5]
 8003682:	3301      	adds	r3, #1
 8003684:	22cc      	movs	r2, #204	; 0xcc
 8003686:	1852      	adds	r2, r2, r1
 8003688:	19d2      	adds	r2, r2, r7
 800368a:	6812      	ldr	r2, [r2, #0]
 800368c:	5cd3      	ldrb	r3, [r2, r3]
 800368e:	2b57      	cmp	r3, #87	; 0x57
 8003690:	d109      	bne.n	80036a6 <nmea_parser+0xcee>
			courseStatus |= 0x800;
 8003692:	22f6      	movs	r2, #246	; 0xf6
 8003694:	1853      	adds	r3, r2, r1
 8003696:	19db      	adds	r3, r3, r7
 8003698:	1852      	adds	r2, r2, r1
 800369a:	19d2      	adds	r2, r2, r7
 800369c:	8812      	ldrh	r2, [r2, #0]
 800369e:	2180      	movs	r1, #128	; 0x80
 80036a0:	0109      	lsls	r1, r1, #4
 80036a2:	430a      	orrs	r2, r1
 80036a4:	801a      	strh	r2, [r3, #0]
		}
		//Byte1, bit 2(North/South bit)
		if(nmeaResponse[GNRMC][GNRMCComma[3]+1] == 'N' ){
 80036a6:	2394      	movs	r3, #148	; 0x94
 80036a8:	2108      	movs	r1, #8
 80036aa:	185b      	adds	r3, r3, r1
 80036ac:	19db      	adds	r3, r3, r7
 80036ae:	78db      	ldrb	r3, [r3, #3]
 80036b0:	3301      	adds	r3, #1
 80036b2:	22cc      	movs	r2, #204	; 0xcc
 80036b4:	1852      	adds	r2, r2, r1
 80036b6:	19d2      	adds	r2, r2, r7
 80036b8:	6812      	ldr	r2, [r2, #0]
 80036ba:	5cd3      	ldrb	r3, [r2, r3]
 80036bc:	2b4e      	cmp	r3, #78	; 0x4e
 80036be:	d109      	bne.n	80036d4 <nmea_parser+0xd1c>
			courseStatus |= 0x400;
 80036c0:	22f6      	movs	r2, #246	; 0xf6
 80036c2:	1853      	adds	r3, r2, r1
 80036c4:	19db      	adds	r3, r3, r7
 80036c6:	1852      	adds	r2, r2, r1
 80036c8:	19d2      	adds	r2, r2, r7
 80036ca:	8812      	ldrh	r2, [r2, #0]
 80036cc:	2180      	movs	r1, #128	; 0x80
 80036ce:	00c9      	lsls	r1, r1, #3
 80036d0:	430a      	orrs	r2, r1
 80036d2:	801a      	strh	r2, [r3, #0]
		}

		//Course
		memset(tempData,0,sizeof(tempData));
 80036d4:	2384      	movs	r3, #132	; 0x84
 80036d6:	2408      	movs	r4, #8
 80036d8:	191b      	adds	r3, r3, r4
 80036da:	19db      	adds	r3, r3, r7
 80036dc:	220f      	movs	r2, #15
 80036de:	2100      	movs	r1, #0
 80036e0:	0018      	movs	r0, r3
 80036e2:	f00b fba8 	bl	800ee36 <memset>
		tempDataIndex = 0;
 80036e6:	23e7      	movs	r3, #231	; 0xe7
 80036e8:	0021      	movs	r1, r4
 80036ea:	185b      	adds	r3, r3, r1
 80036ec:	19db      	adds	r3, r3, r7
 80036ee:	2200      	movs	r2, #0
 80036f0:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[7]+1;x<GNRMCComma[8];x++){
 80036f2:	2394      	movs	r3, #148	; 0x94
 80036f4:	185b      	adds	r3, r3, r1
 80036f6:	19db      	adds	r3, r3, r7
 80036f8:	79da      	ldrb	r2, [r3, #7]
 80036fa:	23d6      	movs	r3, #214	; 0xd6
 80036fc:	185b      	adds	r3, r3, r1
 80036fe:	19db      	adds	r3, r3, r7
 8003700:	3201      	adds	r2, #1
 8003702:	701a      	strb	r2, [r3, #0]
 8003704:	e020      	b.n	8003748 <nmea_parser+0xd90>
			tempData[tempDataIndex]= nmeaResponse[GNRMC][x];
 8003706:	20d6      	movs	r0, #214	; 0xd6
 8003708:	2508      	movs	r5, #8
 800370a:	1943      	adds	r3, r0, r5
 800370c:	19db      	adds	r3, r3, r7
 800370e:	781a      	ldrb	r2, [r3, #0]
 8003710:	24e7      	movs	r4, #231	; 0xe7
 8003712:	1963      	adds	r3, r4, r5
 8003714:	19db      	adds	r3, r3, r7
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	21cc      	movs	r1, #204	; 0xcc
 800371a:	1949      	adds	r1, r1, r5
 800371c:	19c9      	adds	r1, r1, r7
 800371e:	6809      	ldr	r1, [r1, #0]
 8003720:	5c89      	ldrb	r1, [r1, r2]
 8003722:	2284      	movs	r2, #132	; 0x84
 8003724:	1952      	adds	r2, r2, r5
 8003726:	19d2      	adds	r2, r2, r7
 8003728:	54d1      	strb	r1, [r2, r3]
			tempDataIndex++;
 800372a:	0029      	movs	r1, r5
 800372c:	1863      	adds	r3, r4, r1
 800372e:	19db      	adds	r3, r3, r7
 8003730:	781a      	ldrb	r2, [r3, #0]
 8003732:	1863      	adds	r3, r4, r1
 8003734:	19db      	adds	r3, r3, r7
 8003736:	3201      	adds	r2, #1
 8003738:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[7]+1;x<GNRMCComma[8];x++){
 800373a:	1843      	adds	r3, r0, r1
 800373c:	19db      	adds	r3, r3, r7
 800373e:	781a      	ldrb	r2, [r3, #0]
 8003740:	1843      	adds	r3, r0, r1
 8003742:	19db      	adds	r3, r3, r7
 8003744:	3201      	adds	r2, #1
 8003746:	701a      	strb	r2, [r3, #0]
 8003748:	2394      	movs	r3, #148	; 0x94
 800374a:	2408      	movs	r4, #8
 800374c:	191b      	adds	r3, r3, r4
 800374e:	19db      	adds	r3, r3, r7
 8003750:	7a1b      	ldrb	r3, [r3, #8]
 8003752:	22d6      	movs	r2, #214	; 0xd6
 8003754:	1912      	adds	r2, r2, r4
 8003756:	19d2      	adds	r2, r2, r7
 8003758:	7812      	ldrb	r2, [r2, #0]
 800375a:	429a      	cmp	r2, r3
 800375c:	d3d3      	bcc.n	8003706 <nmea_parser+0xd4e>
		}
		courseStatus |= atoi(tempData);
 800375e:	2384      	movs	r3, #132	; 0x84
 8003760:	191b      	adds	r3, r3, r4
 8003762:	19db      	adds	r3, r3, r7
 8003764:	0018      	movs	r0, r3
 8003766:	f00b fb07 	bl	800ed78 <atoi>
 800376a:	0003      	movs	r3, r0
 800376c:	b21a      	sxth	r2, r3
 800376e:	21f6      	movs	r1, #246	; 0xf6
 8003770:	190b      	adds	r3, r1, r4
 8003772:	19db      	adds	r3, r3, r7
 8003774:	2000      	movs	r0, #0
 8003776:	5e1b      	ldrsh	r3, [r3, r0]
 8003778:	4313      	orrs	r3, r2
 800377a:	b21a      	sxth	r2, r3
 800377c:	0020      	movs	r0, r4
 800377e:	180b      	adds	r3, r1, r0
 8003780:	19db      	adds	r3, r3, r7
 8003782:	801a      	strh	r2, [r3, #0]
		GPSInformation[16]= courseStatus>>8;
 8003784:	180b      	adds	r3, r1, r0
 8003786:	19db      	adds	r3, r3, r7
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	0a1b      	lsrs	r3, r3, #8
 800378c:	b29b      	uxth	r3, r3
 800378e:	b2da      	uxtb	r2, r3
 8003790:	4b0b      	ldr	r3, [pc, #44]	; (80037c0 <nmea_parser+0xe08>)
 8003792:	741a      	strb	r2, [r3, #16]
		GPSInformation[17]= courseStatus;
 8003794:	180b      	adds	r3, r1, r0
 8003796:	19db      	adds	r3, r3, r7
 8003798:	881b      	ldrh	r3, [r3, #0]
 800379a:	b2da      	uxtb	r2, r3
 800379c:	4b08      	ldr	r3, [pc, #32]	; (80037c0 <nmea_parser+0xe08>)
 800379e:	745a      	strb	r2, [r3, #17]
		//------------------------------Course Status Block END------------------------------------

		return GPSInformation;
 80037a0:	4b07      	ldr	r3, [pc, #28]	; (80037c0 <nmea_parser+0xe08>)
 80037a2:	e003      	b.n	80037ac <nmea_parser+0xdf4>
	}
	else{
		*checkSum = 55;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2237      	movs	r2, #55	; 0x37
 80037a8:	701a      	strb	r2, [r3, #0]
		return NULL;
 80037aa:	2300      	movs	r3, #0
	}

}
 80037ac:	0018      	movs	r0, r3
 80037ae:	46bd      	mov	sp, r7
 80037b0:	b041      	add	sp, #260	; 0x104
 80037b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037b4:	9999999a 	.word	0x9999999a
 80037b8:	3ffd9999 	.word	0x3ffd9999
 80037bc:	437f0000 	.word	0x437f0000
 80037c0:	200002d4 	.word	0x200002d4

080037c4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80037c8:	f3bf 8f4f 	dsb	sy
}
 80037cc:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037ce:	4b04      	ldr	r3, [pc, #16]	; (80037e0 <__NVIC_SystemReset+0x1c>)
 80037d0:	4a04      	ldr	r2, [pc, #16]	; (80037e4 <__NVIC_SystemReset+0x20>)
 80037d2:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80037d4:	f3bf 8f4f 	dsb	sy
}
 80037d8:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80037da:	46c0      	nop			; (mov r8, r8)
 80037dc:	e7fd      	b.n	80037da <__NVIC_SystemReset+0x16>
 80037de:	46c0      	nop			; (mov r8, r8)
 80037e0:	e000ed00 	.word	0xe000ed00
 80037e4:	05fa0004 	.word	0x05fa0004

080037e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b0c2      	sub	sp, #264	; 0x108
 80037ec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80037ee:	f006 f903 	bl	80099f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80037f2:	f000 fb09 	bl	8003e08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80037f6:	f000 fdd5 	bl	80043a4 <MX_GPIO_Init>
  MX_SPI1_Init();
 80037fa:	f000 fb5f 	bl	8003ebc <MX_SPI1_Init>
  MX_TIM3_Init();
 80037fe:	f000 fb9b 	bl	8003f38 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8003802:	f000 fccb 	bl	800419c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8003806:	f000 fd17 	bl	8004238 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800380a:	f000 fd63 	bl	80042d4 <MX_USART3_UART_Init>
  MX_USART4_UART_Init();
 800380e:	f000 fd95 	bl	800433c <MX_USART4_UART_Init>
  MX_TIM17_Init();
 8003812:	f000 fc99 	bl	8004148 <MX_TIM17_Init>
  MX_TIM14_Init();
 8003816:	f000 fc47 	bl	80040a8 <MX_TIM14_Init>
  MX_TIM6_Init();
 800381a:	f000 fc09 	bl	8004030 <MX_TIM6_Init>
  MX_TIM16_Init();
 800381e:	f000 fc69 	bl	80040f4 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim14);//watchDog Timer
 8003822:	4bde      	ldr	r3, [pc, #888]	; (8003b9c <main+0x3b4>)
 8003824:	0018      	movs	r0, r3
 8003826:	f008 fba5 	bl	800bf74 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim16);//tcp open checking timer
 800382a:	4bdd      	ldr	r3, [pc, #884]	; (8003ba0 <main+0x3b8>)
 800382c:	0018      	movs	r0, r3
 800382e:	f008 fba1 	bl	800bf74 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);//AT PORT
 8003832:	4bdc      	ldr	r3, [pc, #880]	; (8003ba4 <main+0x3bc>)
 8003834:	0018      	movs	r0, r3
 8003836:	f008 fb9d 	bl	800bf74 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, GNSS_BUFFER, 1);
 800383a:	49db      	ldr	r1, [pc, #876]	; (8003ba8 <main+0x3c0>)
 800383c:	4bdb      	ldr	r3, [pc, #876]	; (8003bac <main+0x3c4>)
 800383e:	2201      	movs	r2, #1
 8003840:	0018      	movs	r0, r3
 8003842:	f009 fc39 	bl	800d0b8 <HAL_UART_Receive_IT>
  W25qxx_Init();
 8003846:	f005 fd03 	bl	8009250 <W25qxx_Init>


	//INPUT CAPTURE--------------------------------------
  HAL_TIM_Base_Start_IT(&htim3);//input capture timer starts
 800384a:	4bd9      	ldr	r3, [pc, #868]	; (8003bb0 <main+0x3c8>)
 800384c:	0018      	movs	r0, r3
 800384e:	f008 fb91 	bl	800bf74 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim17);///GNS PORT
 8003852:	4bd8      	ldr	r3, [pc, #864]	; (8003bb4 <main+0x3cc>)
 8003854:	0018      	movs	r0, r3
 8003856:	f008 fb8d 	bl	800bf74 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&AT_PORT, AT_BUFFER, 1);
 800385a:	49d7      	ldr	r1, [pc, #860]	; (8003bb8 <main+0x3d0>)
 800385c:	4bd7      	ldr	r3, [pc, #860]	; (8003bbc <main+0x3d4>)
 800385e:	2201      	movs	r2, #1
 8003860:	0018      	movs	r0, r3
 8003862:	f009 fc29 	bl	800d0b8 <HAL_UART_Receive_IT>



  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 1);
 8003866:	4bd6      	ldr	r3, [pc, #856]	; (8003bc0 <main+0x3d8>)
 8003868:	2201      	movs	r2, #1
 800386a:	2104      	movs	r1, #4
 800386c:	0018      	movs	r0, r3
 800386e:	f006 fc98 	bl	800a1a2 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8003872:	23fa      	movs	r3, #250	; 0xfa
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	0018      	movs	r0, r3
 8003878:	f006 f944 	bl	8009b04 <HAL_Delay>
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 0);
 800387c:	4bd0      	ldr	r3, [pc, #832]	; (8003bc0 <main+0x3d8>)
 800387e:	2200      	movs	r2, #0
 8003880:	2104      	movs	r1, #4
 8003882:	0018      	movs	r0, r3
 8003884:	f006 fc8d 	bl	800a1a2 <HAL_GPIO_WritePin>


	//ROM INTEGRITY------------------------------------------------------------------------------------------------------------------------------
//	W25qxx_EraseSector(0);
//	W25qxx_EraseSector(1);
	W25qxx_ReadByte(&isFlash, 0);
 8003888:	4bce      	ldr	r3, [pc, #824]	; (8003bc4 <main+0x3dc>)
 800388a:	2100      	movs	r1, #0
 800388c:	0018      	movs	r0, r3
 800388e:	f005 fef3 	bl	8009678 <W25qxx_ReadByte>
	W25qxx_ReadByte(&isFlash1, LASTPAGE_ADD);
 8003892:	4bcd      	ldr	r3, [pc, #820]	; (8003bc8 <main+0x3e0>)
 8003894:	21fa      	movs	r1, #250	; 0xfa
 8003896:	0018      	movs	r0, r3
 8003898:	f005 feee 	bl	8009678 <W25qxx_ReadByte>
	if (isFlash != 1 || isFlash1 !=1 ) {
 800389c:	4bc9      	ldr	r3, [pc, #804]	; (8003bc4 <main+0x3dc>)
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d103      	bne.n	80038ac <main+0xc4>
 80038a4:	4bc8      	ldr	r3, [pc, #800]	; (8003bc8 <main+0x3e0>)
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d00f      	beq.n	80038cc <main+0xe4>
		StartN = 0;
 80038ac:	4bc7      	ldr	r3, [pc, #796]	; (8003bcc <main+0x3e4>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	801a      	strh	r2, [r3, #0]
		EndN = 0;
 80038b2:	4bc7      	ldr	r3, [pc, #796]	; (8003bd0 <main+0x3e8>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	801a      	strh	r2, [r3, #0]
		StartSec = 1;
 80038b8:	4bc6      	ldr	r3, [pc, #792]	; (8003bd4 <main+0x3ec>)
 80038ba:	2201      	movs	r2, #1
 80038bc:	801a      	strh	r2, [r3, #0]
		EndSec = 1;
 80038be:	4bc6      	ldr	r3, [pc, #792]	; (8003bd8 <main+0x3f0>)
 80038c0:	2201      	movs	r2, #1
 80038c2:	801a      	strh	r2, [r3, #0]
		W25qxx_EraseSector(1);
 80038c4:	2001      	movs	r0, #1
 80038c6:	f005 fd7d 	bl	80093c4 <W25qxx_EraseSector>
 80038ca:	e119      	b.n	8003b00 <main+0x318>

	} else {
		//reading from ROM
		uint8_t configPage[LASTPAGE_ADD+2];
		memset(configPage, 0, sizeof(configPage));
 80038cc:	003b      	movs	r3, r7
 80038ce:	22fc      	movs	r2, #252	; 0xfc
 80038d0:	2100      	movs	r1, #0
 80038d2:	0018      	movs	r0, r3
 80038d4:	f00b faaf 	bl	800ee36 <memset>
		W25qxx_ReadBytes(configPage, 0, LASTPAGE_ADD+2);
 80038d8:	003b      	movs	r3, r7
 80038da:	22fc      	movs	r2, #252	; 0xfc
 80038dc:	2100      	movs	r1, #0
 80038de:	0018      	movs	r0, r3
 80038e0:	f005 ff20 	bl	8009724 <W25qxx_ReadBytes>

		StartSec = configPage[1];
 80038e4:	4bbd      	ldr	r3, [pc, #756]	; (8003bdc <main+0x3f4>)
 80038e6:	3301      	adds	r3, #1
 80038e8:	33ff      	adds	r3, #255	; 0xff
 80038ea:	19db      	adds	r3, r3, r7
 80038ec:	785b      	ldrb	r3, [r3, #1]
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	4bb8      	ldr	r3, [pc, #736]	; (8003bd4 <main+0x3ec>)
 80038f2:	801a      	strh	r2, [r3, #0]
		StartSec = StartSec << 8 | configPage[2];
 80038f4:	4bb7      	ldr	r3, [pc, #732]	; (8003bd4 <main+0x3ec>)
 80038f6:	881b      	ldrh	r3, [r3, #0]
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	021b      	lsls	r3, r3, #8
 80038fc:	b21a      	sxth	r2, r3
 80038fe:	4bb7      	ldr	r3, [pc, #732]	; (8003bdc <main+0x3f4>)
 8003900:	3301      	adds	r3, #1
 8003902:	33ff      	adds	r3, #255	; 0xff
 8003904:	19db      	adds	r3, r3, r7
 8003906:	789b      	ldrb	r3, [r3, #2]
 8003908:	b21b      	sxth	r3, r3
 800390a:	4313      	orrs	r3, r2
 800390c:	b21b      	sxth	r3, r3
 800390e:	b29a      	uxth	r2, r3
 8003910:	4bb0      	ldr	r3, [pc, #704]	; (8003bd4 <main+0x3ec>)
 8003912:	801a      	strh	r2, [r3, #0]

		StartN = configPage[3];
 8003914:	4bb1      	ldr	r3, [pc, #708]	; (8003bdc <main+0x3f4>)
 8003916:	3301      	adds	r3, #1
 8003918:	33ff      	adds	r3, #255	; 0xff
 800391a:	19db      	adds	r3, r3, r7
 800391c:	78db      	ldrb	r3, [r3, #3]
 800391e:	b29a      	uxth	r2, r3
 8003920:	4baa      	ldr	r3, [pc, #680]	; (8003bcc <main+0x3e4>)
 8003922:	801a      	strh	r2, [r3, #0]
		StartN = StartN << 8 | configPage[4];
 8003924:	4ba9      	ldr	r3, [pc, #676]	; (8003bcc <main+0x3e4>)
 8003926:	881b      	ldrh	r3, [r3, #0]
 8003928:	b29b      	uxth	r3, r3
 800392a:	021b      	lsls	r3, r3, #8
 800392c:	b21a      	sxth	r2, r3
 800392e:	4bab      	ldr	r3, [pc, #684]	; (8003bdc <main+0x3f4>)
 8003930:	3301      	adds	r3, #1
 8003932:	33ff      	adds	r3, #255	; 0xff
 8003934:	19db      	adds	r3, r3, r7
 8003936:	791b      	ldrb	r3, [r3, #4]
 8003938:	b21b      	sxth	r3, r3
 800393a:	4313      	orrs	r3, r2
 800393c:	b21b      	sxth	r3, r3
 800393e:	b29a      	uxth	r2, r3
 8003940:	4ba2      	ldr	r3, [pc, #648]	; (8003bcc <main+0x3e4>)
 8003942:	801a      	strh	r2, [r3, #0]

		EndSec = configPage[5];
 8003944:	4ba5      	ldr	r3, [pc, #660]	; (8003bdc <main+0x3f4>)
 8003946:	3301      	adds	r3, #1
 8003948:	33ff      	adds	r3, #255	; 0xff
 800394a:	19db      	adds	r3, r3, r7
 800394c:	795b      	ldrb	r3, [r3, #5]
 800394e:	b29a      	uxth	r2, r3
 8003950:	4ba1      	ldr	r3, [pc, #644]	; (8003bd8 <main+0x3f0>)
 8003952:	801a      	strh	r2, [r3, #0]
		EndSec = EndSec << 8 | configPage[6];
 8003954:	4ba0      	ldr	r3, [pc, #640]	; (8003bd8 <main+0x3f0>)
 8003956:	881b      	ldrh	r3, [r3, #0]
 8003958:	b29b      	uxth	r3, r3
 800395a:	021b      	lsls	r3, r3, #8
 800395c:	b21a      	sxth	r2, r3
 800395e:	4b9f      	ldr	r3, [pc, #636]	; (8003bdc <main+0x3f4>)
 8003960:	3301      	adds	r3, #1
 8003962:	33ff      	adds	r3, #255	; 0xff
 8003964:	19db      	adds	r3, r3, r7
 8003966:	799b      	ldrb	r3, [r3, #6]
 8003968:	b21b      	sxth	r3, r3
 800396a:	4313      	orrs	r3, r2
 800396c:	b21b      	sxth	r3, r3
 800396e:	b29a      	uxth	r2, r3
 8003970:	4b99      	ldr	r3, [pc, #612]	; (8003bd8 <main+0x3f0>)
 8003972:	801a      	strh	r2, [r3, #0]

		EndN = configPage[7];
 8003974:	4b99      	ldr	r3, [pc, #612]	; (8003bdc <main+0x3f4>)
 8003976:	3301      	adds	r3, #1
 8003978:	33ff      	adds	r3, #255	; 0xff
 800397a:	19db      	adds	r3, r3, r7
 800397c:	79db      	ldrb	r3, [r3, #7]
 800397e:	b29a      	uxth	r2, r3
 8003980:	4b93      	ldr	r3, [pc, #588]	; (8003bd0 <main+0x3e8>)
 8003982:	801a      	strh	r2, [r3, #0]
		EndN = EndN << 8 | configPage[8];
 8003984:	4b92      	ldr	r3, [pc, #584]	; (8003bd0 <main+0x3e8>)
 8003986:	881b      	ldrh	r3, [r3, #0]
 8003988:	b29b      	uxth	r3, r3
 800398a:	021b      	lsls	r3, r3, #8
 800398c:	b21a      	sxth	r2, r3
 800398e:	4b93      	ldr	r3, [pc, #588]	; (8003bdc <main+0x3f4>)
 8003990:	3301      	adds	r3, #1
 8003992:	33ff      	adds	r3, #255	; 0xff
 8003994:	19db      	adds	r3, r3, r7
 8003996:	7a1b      	ldrb	r3, [r3, #8]
 8003998:	b21b      	sxth	r3, r3
 800399a:	4313      	orrs	r3, r2
 800399c:	b21b      	sxth	r3, r3
 800399e:	b29a      	uxth	r2, r3
 80039a0:	4b8b      	ldr	r3, [pc, #556]	; (8003bd0 <main+0x3e8>)
 80039a2:	801a      	strh	r2, [r3, #0]

		cPin[0] = configPage[CP1_ADD];
 80039a4:	4b8d      	ldr	r3, [pc, #564]	; (8003bdc <main+0x3f4>)
 80039a6:	3301      	adds	r3, #1
 80039a8:	33ff      	adds	r3, #255	; 0xff
 80039aa:	19db      	adds	r3, r3, r7
 80039ac:	7a5a      	ldrb	r2, [r3, #9]
 80039ae:	4b8c      	ldr	r3, [pc, #560]	; (8003be0 <main+0x3f8>)
 80039b0:	701a      	strb	r2, [r3, #0]
		cPin[1] = configPage[CP2_ADD];
 80039b2:	4b8a      	ldr	r3, [pc, #552]	; (8003bdc <main+0x3f4>)
 80039b4:	3301      	adds	r3, #1
 80039b6:	33ff      	adds	r3, #255	; 0xff
 80039b8:	19db      	adds	r3, r3, r7
 80039ba:	7a9a      	ldrb	r2, [r3, #10]
 80039bc:	4b88      	ldr	r3, [pc, #544]	; (8003be0 <main+0x3f8>)
 80039be:	705a      	strb	r2, [r3, #1]
		cPin[2] = configPage[CP3_ADD];
 80039c0:	4b86      	ldr	r3, [pc, #536]	; (8003bdc <main+0x3f4>)
 80039c2:	3301      	adds	r3, #1
 80039c4:	33ff      	adds	r3, #255	; 0xff
 80039c6:	19db      	adds	r3, r3, r7
 80039c8:	7ada      	ldrb	r2, [r3, #11]
 80039ca:	4b85      	ldr	r3, [pc, #532]	; (8003be0 <main+0x3f8>)
 80039cc:	709a      	strb	r2, [r3, #2]
		cPin[3] = configPage[CP4_ADD];
 80039ce:	4b83      	ldr	r3, [pc, #524]	; (8003bdc <main+0x3f4>)
 80039d0:	3301      	adds	r3, #1
 80039d2:	33ff      	adds	r3, #255	; 0xff
 80039d4:	19db      	adds	r3, r3, r7
 80039d6:	7b1a      	ldrb	r2, [r3, #12]
 80039d8:	4b81      	ldr	r3, [pc, #516]	; (8003be0 <main+0x3f8>)
 80039da:	70da      	strb	r2, [r3, #3]

		for (uint8_t te = 0; te < 10; te++) {
 80039dc:	23ff      	movs	r3, #255	; 0xff
 80039de:	18fb      	adds	r3, r7, r3
 80039e0:	2200      	movs	r2, #0
 80039e2:	701a      	strb	r2, [r3, #0]
 80039e4:	e012      	b.n	8003a0c <main+0x224>
			validSender[te] = configPage[te + VALIDSENSTART_ADD];
 80039e6:	20ff      	movs	r0, #255	; 0xff
 80039e8:	183b      	adds	r3, r7, r0
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	330d      	adds	r3, #13
 80039ee:	001a      	movs	r2, r3
 80039f0:	183b      	adds	r3, r7, r0
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	4979      	ldr	r1, [pc, #484]	; (8003bdc <main+0x3f4>)
 80039f6:	3101      	adds	r1, #1
 80039f8:	31ff      	adds	r1, #255	; 0xff
 80039fa:	19c9      	adds	r1, r1, r7
 80039fc:	5c89      	ldrb	r1, [r1, r2]
 80039fe:	4a79      	ldr	r2, [pc, #484]	; (8003be4 <main+0x3fc>)
 8003a00:	54d1      	strb	r1, [r2, r3]
		for (uint8_t te = 0; te < 10; te++) {
 8003a02:	183b      	adds	r3, r7, r0
 8003a04:	781a      	ldrb	r2, [r3, #0]
 8003a06:	183b      	adds	r3, r7, r0
 8003a08:	3201      	adds	r2, #1
 8003a0a:	701a      	strb	r2, [r3, #0]
 8003a0c:	23ff      	movs	r3, #255	; 0xff
 8003a0e:	18fb      	adds	r3, r7, r3
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	2b09      	cmp	r3, #9
 8003a14:	d9e7      	bls.n	80039e6 <main+0x1fe>
		}
		for (uint8_t te = 0; te < 50; te++) {
 8003a16:	23fe      	movs	r3, #254	; 0xfe
 8003a18:	18fb      	adds	r3, r7, r3
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	701a      	strb	r2, [r3, #0]
 8003a1e:	e012      	b.n	8003a46 <main+0x25e>
			domainAdd[te] = configPage[te + DOMAINSTART_ADD];
 8003a20:	20fe      	movs	r0, #254	; 0xfe
 8003a22:	183b      	adds	r3, r7, r0
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	3317      	adds	r3, #23
 8003a28:	001a      	movs	r2, r3
 8003a2a:	183b      	adds	r3, r7, r0
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	496b      	ldr	r1, [pc, #428]	; (8003bdc <main+0x3f4>)
 8003a30:	3101      	adds	r1, #1
 8003a32:	31ff      	adds	r1, #255	; 0xff
 8003a34:	19c9      	adds	r1, r1, r7
 8003a36:	5c89      	ldrb	r1, [r1, r2]
 8003a38:	4a6b      	ldr	r2, [pc, #428]	; (8003be8 <main+0x400>)
 8003a3a:	54d1      	strb	r1, [r2, r3]
		for (uint8_t te = 0; te < 50; te++) {
 8003a3c:	183b      	adds	r3, r7, r0
 8003a3e:	781a      	ldrb	r2, [r3, #0]
 8003a40:	183b      	adds	r3, r7, r0
 8003a42:	3201      	adds	r2, #1
 8003a44:	701a      	strb	r2, [r3, #0]
 8003a46:	23fe      	movs	r3, #254	; 0xfe
 8003a48:	18fb      	adds	r3, r7, r3
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	2b31      	cmp	r3, #49	; 0x31
 8003a4e:	d9e7      	bls.n	8003a20 <main+0x238>
		}
		for (uint8_t te = 0; te < 6; te++) {
 8003a50:	23fd      	movs	r3, #253	; 0xfd
 8003a52:	18fb      	adds	r3, r7, r3
 8003a54:	2200      	movs	r2, #0
 8003a56:	701a      	strb	r2, [r3, #0]
 8003a58:	e012      	b.n	8003a80 <main+0x298>
			portAdd[te] = configPage[te + PORTSTART_ADD];
 8003a5a:	20fd      	movs	r0, #253	; 0xfd
 8003a5c:	183b      	adds	r3, r7, r0
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	3349      	adds	r3, #73	; 0x49
 8003a62:	001a      	movs	r2, r3
 8003a64:	183b      	adds	r3, r7, r0
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	495c      	ldr	r1, [pc, #368]	; (8003bdc <main+0x3f4>)
 8003a6a:	3101      	adds	r1, #1
 8003a6c:	31ff      	adds	r1, #255	; 0xff
 8003a6e:	19c9      	adds	r1, r1, r7
 8003a70:	5c89      	ldrb	r1, [r1, r2]
 8003a72:	4a5e      	ldr	r2, [pc, #376]	; (8003bec <main+0x404>)
 8003a74:	54d1      	strb	r1, [r2, r3]
		for (uint8_t te = 0; te < 6; te++) {
 8003a76:	183b      	adds	r3, r7, r0
 8003a78:	781a      	ldrb	r2, [r3, #0]
 8003a7a:	183b      	adds	r3, r7, r0
 8003a7c:	3201      	adds	r2, #1
 8003a7e:	701a      	strb	r2, [r3, #0]
 8003a80:	23fd      	movs	r3, #253	; 0xfd
 8003a82:	18fb      	adds	r3, r7, r3
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	2b05      	cmp	r3, #5
 8003a88:	d9e7      	bls.n	8003a5a <main+0x272>
		}
		locationDataIntervalA = configPage[LDIA_ADD];
 8003a8a:	4b54      	ldr	r3, [pc, #336]	; (8003bdc <main+0x3f4>)
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	33ff      	adds	r3, #255	; 0xff
 8003a90:	19db      	adds	r3, r3, r7
 8003a92:	224f      	movs	r2, #79	; 0x4f
 8003a94:	5c9a      	ldrb	r2, [r3, r2]
 8003a96:	4b56      	ldr	r3, [pc, #344]	; (8003bf0 <main+0x408>)
 8003a98:	701a      	strb	r2, [r3, #0]
		locationDataIntervalB = configPage[LDIB_ADD];
 8003a9a:	4b50      	ldr	r3, [pc, #320]	; (8003bdc <main+0x3f4>)
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	33ff      	adds	r3, #255	; 0xff
 8003aa0:	19db      	adds	r3, r3, r7
 8003aa2:	2250      	movs	r2, #80	; 0x50
 8003aa4:	5c9a      	ldrb	r2, [r3, r2]
 8003aa6:	4b53      	ldr	r3, [pc, #332]	; (8003bf4 <main+0x40c>)
 8003aa8:	701a      	strb	r2, [r3, #0]
		isAutoRst = configPage[AUTORST_ADD];
 8003aaa:	4b4c      	ldr	r3, [pc, #304]	; (8003bdc <main+0x3f4>)
 8003aac:	3301      	adds	r3, #1
 8003aae:	33ff      	adds	r3, #255	; 0xff
 8003ab0:	19db      	adds	r3, r3, r7
 8003ab2:	2251      	movs	r2, #81	; 0x51
 8003ab4:	5c9a      	ldrb	r2, [r3, r2]
 8003ab6:	4b50      	ldr	r3, [pc, #320]	; (8003bf8 <main+0x410>)
 8003ab8:	701a      	strb	r2, [r3, #0]
		isSMSActive = configPage[SMSACTIVE_ADD];
 8003aba:	4b48      	ldr	r3, [pc, #288]	; (8003bdc <main+0x3f4>)
 8003abc:	3301      	adds	r3, #1
 8003abe:	33ff      	adds	r3, #255	; 0xff
 8003ac0:	19db      	adds	r3, r3, r7
 8003ac2:	2252      	movs	r2, #82	; 0x52
 8003ac4:	5c9a      	ldrb	r2, [r3, r2]
 8003ac6:	4b4d      	ldr	r3, [pc, #308]	; (8003bfc <main+0x414>)
 8003ac8:	701a      	strb	r2, [r3, #0]
		relayState = configPage[RELAYSTATE_ADD];
 8003aca:	4b44      	ldr	r3, [pc, #272]	; (8003bdc <main+0x3f4>)
 8003acc:	3301      	adds	r3, #1
 8003ace:	33ff      	adds	r3, #255	; 0xff
 8003ad0:	19db      	adds	r3, r3, r7
 8003ad2:	2253      	movs	r2, #83	; 0x53
 8003ad4:	5c9a      	ldrb	r2, [r3, r2]
 8003ad6:	4b4a      	ldr	r3, [pc, #296]	; (8003c00 <main+0x418>)
 8003ad8:	701a      	strb	r2, [r3, #0]
		if(isAutoRst==0){
 8003ada:	4b47      	ldr	r3, [pc, #284]	; (8003bf8 <main+0x410>)
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d10e      	bne.n	8003b00 <main+0x318>
			StartN = 0;
 8003ae2:	4b3a      	ldr	r3, [pc, #232]	; (8003bcc <main+0x3e4>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	801a      	strh	r2, [r3, #0]
			EndN = 0;
 8003ae8:	4b39      	ldr	r3, [pc, #228]	; (8003bd0 <main+0x3e8>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	801a      	strh	r2, [r3, #0]
			StartSec = 1;
 8003aee:	4b39      	ldr	r3, [pc, #228]	; (8003bd4 <main+0x3ec>)
 8003af0:	2201      	movs	r2, #1
 8003af2:	801a      	strh	r2, [r3, #0]
			EndSec = 1;
 8003af4:	4b38      	ldr	r3, [pc, #224]	; (8003bd8 <main+0x3f0>)
 8003af6:	2201      	movs	r2, #1
 8003af8:	801a      	strh	r2, [r3, #0]
			W25qxx_EraseSector(1);
 8003afa:	2001      	movs	r0, #1
 8003afc:	f005 fc62 	bl	80093c4 <W25qxx_EraseSector>
		}
	}
	save_to_flash(0);
 8003b00:	2000      	movs	r0, #0
 8003b02:	f002 fd33 	bl	800656c <save_to_flash>




	//-------------------check if tracker has registered any mobile number?-------------
	if(validSender[0] == '0' && validSender[1] == '0' && validSender[2] == '0'){
 8003b06:	4b37      	ldr	r3, [pc, #220]	; (8003be4 <main+0x3fc>)
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	2b30      	cmp	r3, #48	; 0x30
 8003b0c:	d10b      	bne.n	8003b26 <main+0x33e>
 8003b0e:	4b35      	ldr	r3, [pc, #212]	; (8003be4 <main+0x3fc>)
 8003b10:	785b      	ldrb	r3, [r3, #1]
 8003b12:	2b30      	cmp	r3, #48	; 0x30
 8003b14:	d107      	bne.n	8003b26 <main+0x33e>
 8003b16:	4b33      	ldr	r3, [pc, #204]	; (8003be4 <main+0x3fc>)
 8003b18:	789b      	ldrb	r3, [r3, #2]
 8003b1a:	2b30      	cmp	r3, #48	; 0x30
 8003b1c:	d103      	bne.n	8003b26 <main+0x33e>
		isNumValid=0;
 8003b1e:	4b39      	ldr	r3, [pc, #228]	; (8003c04 <main+0x41c>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	701a      	strb	r2, [r3, #0]
 8003b24:	e002      	b.n	8003b2c <main+0x344>
	}
	else{
		isNumValid=1;
 8003b26:	4b37      	ldr	r3, [pc, #220]	; (8003c04 <main+0x41c>)
 8003b28:	2201      	movs	r2, #1
 8003b2a:	701a      	strb	r2, [r3, #0]
	}
	//----------------------------------------------------------------------------------


	//-----------------------set car state--------------------------------
	if(relayState == 1){
 8003b2c:	4b34      	ldr	r3, [pc, #208]	; (8003c00 <main+0x418>)
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d106      	bne.n	8003b42 <main+0x35a>
		//switch off the car
		HAL_GPIO_WritePin(OUTPUT_1_GPIO_Port, OUTPUT_1_Pin, 1);
 8003b34:	4b22      	ldr	r3, [pc, #136]	; (8003bc0 <main+0x3d8>)
 8003b36:	2201      	movs	r2, #1
 8003b38:	2102      	movs	r1, #2
 8003b3a:	0018      	movs	r0, r3
 8003b3c:	f006 fb31 	bl	800a1a2 <HAL_GPIO_WritePin>
 8003b40:	e005      	b.n	8003b4e <main+0x366>
	}
	else{
		//switch on the car
		HAL_GPIO_WritePin(OUTPUT_1_GPIO_Port, OUTPUT_1_Pin, 0);
 8003b42:	4b1f      	ldr	r3, [pc, #124]	; (8003bc0 <main+0x3d8>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	2102      	movs	r1, #2
 8003b48:	0018      	movs	r0, r3
 8003b4a:	f006 fb2a 	bl	800a1a2 <HAL_GPIO_WritePin>
	}

	//---------------------------------------------------------------------

	HAL_GPIO_WritePin(PWR_KEY_GPIO_Port, PWR_KEY_Pin, 1);
 8003b4e:	2380      	movs	r3, #128	; 0x80
 8003b50:	019b      	lsls	r3, r3, #6
 8003b52:	481b      	ldr	r0, [pc, #108]	; (8003bc0 <main+0x3d8>)
 8003b54:	2201      	movs	r2, #1
 8003b56:	0019      	movs	r1, r3
 8003b58:	f006 fb23 	bl	800a1a2 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8003b5c:	23fa      	movs	r3, #250	; 0xfa
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	0018      	movs	r0, r3
 8003b62:	f005 ffcf 	bl	8009b04 <HAL_Delay>
	HAL_GPIO_WritePin(PWR_KEY_GPIO_Port, PWR_KEY_Pin, 0);
 8003b66:	2380      	movs	r3, #128	; 0x80
 8003b68:	019b      	lsls	r3, r3, #6
 8003b6a:	4815      	ldr	r0, [pc, #84]	; (8003bc0 <main+0x3d8>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	0019      	movs	r1, r3
 8003b70:	f006 fb17 	bl	800a1a2 <HAL_GPIO_WritePin>
	HAL_Delay(5000);
 8003b74:	4b24      	ldr	r3, [pc, #144]	; (8003c08 <main+0x420>)
 8003b76:	0018      	movs	r0, r3
 8003b78:	f005 ffc4 	bl	8009b04 <HAL_Delay>
	quectel_init();
 8003b7c:	f002 ff36 	bl	80069ec <quectel_init>

//	INPUT CAPTURE------
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8003b80:	4b0b      	ldr	r3, [pc, #44]	; (8003bb0 <main+0x3c8>)
 8003b82:	2100      	movs	r1, #0
 8003b84:	0018      	movs	r0, r3
 8003b86:	f008 fad9 	bl	800c13c <HAL_TIM_IC_Start_IT>
//	HAL_TIM_IC_Start_DMA(&htim3, TIM_CHANNEL_1, vals, NUMVAL);
	ab=1;
 8003b8a:	4b20      	ldr	r3, [pc, #128]	; (8003c0c <main+0x424>)
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		while (isTcpOpen == 0 && isLoggedIn == 0) {
 8003b90:	e0a4      	b.n	8003cdc <main+0x4f4>
			stats = 1;
 8003b92:	4b1f      	ldr	r3, [pc, #124]	; (8003c10 <main+0x428>)
 8003b94:	2201      	movs	r2, #1
 8003b96:	701a      	strb	r2, [r3, #0]
			while (isReg == 0) {
 8003b98:	e05e      	b.n	8003c58 <main+0x470>
 8003b9a:	46c0      	nop			; (mov r8, r8)
 8003b9c:	200003e4 	.word	0x200003e4
 8003ba0:	20000430 	.word	0x20000430
 8003ba4:	20000398 	.word	0x20000398
 8003ba8:	20000744 	.word	0x20000744
 8003bac:	2000055c 	.word	0x2000055c
 8003bb0:	2000034c 	.word	0x2000034c
 8003bb4:	2000047c 	.word	0x2000047c
 8003bb8:	20000740 	.word	0x20000740
 8003bbc:	200004c8 	.word	0x200004c8
 8003bc0:	50000400 	.word	0x50000400
 8003bc4:	20000738 	.word	0x20000738
 8003bc8:	20000739 	.word	0x20000739
 8003bcc:	20000d14 	.word	0x20000d14
 8003bd0:	20000d16 	.word	0x20000d16
 8003bd4:	20000d18 	.word	0x20000d18
 8003bd8:	20000d1a 	.word	0x20000d1a
 8003bdc:	ffffff00 	.word	0xffffff00
 8003be0:	20000014 	.word	0x20000014
 8003be4:	20000008 	.word	0x20000008
 8003be8:	20000038 	.word	0x20000038
 8003bec:	20000030 	.word	0x20000030
 8003bf0:	20000004 	.word	0x20000004
 8003bf4:	20000005 	.word	0x20000005
 8003bf8:	2000073a 	.word	0x2000073a
 8003bfc:	20000734 	.word	0x20000734
 8003c00:	20000724 	.word	0x20000724
 8003c04:	2000071e 	.word	0x2000071e
 8003c08:	00001388 	.word	0x00001388
 8003c0c:	20000d1e 	.word	0x20000d1e
 8003c10:	20000d1d 	.word	0x20000d1d
				stats = 2;
 8003c14:	4b6f      	ldr	r3, [pc, #444]	; (8003dd4 <main+0x5ec>)
 8003c16:	2202      	movs	r2, #2
 8003c18:	701a      	strb	r2, [r3, #0]
				// HAL_UART_Transmit(&huart4, "at+creg",
				// sizeof("at+creg"), 100);
				send_command("AT+CREG?\r\n", 3, 3, 5, 1);
 8003c1a:	486f      	ldr	r0, [pc, #444]	; (8003dd8 <main+0x5f0>)
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	2305      	movs	r3, #5
 8003c22:	2203      	movs	r2, #3
 8003c24:	2103      	movs	r1, #3
 8003c26:	f002 fe31 	bl	800688c <send_command>
				if (!isReg) {
 8003c2a:	4b6c      	ldr	r3, [pc, #432]	; (8003ddc <main+0x5f4>)
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d112      	bne.n	8003c58 <main+0x470>
					HAL_Delay(10000);
 8003c32:	4b6b      	ldr	r3, [pc, #428]	; (8003de0 <main+0x5f8>)
 8003c34:	0018      	movs	r0, r3
 8003c36:	f005 ff65 	bl	8009b04 <HAL_Delay>
					stats = 3;
 8003c3a:	4b66      	ldr	r3, [pc, #408]	; (8003dd4 <main+0x5ec>)
 8003c3c:	2203      	movs	r2, #3
 8003c3e:	701a      	strb	r2, [r3, #0]
					rebootCounter++;
 8003c40:	4b68      	ldr	r3, [pc, #416]	; (8003de4 <main+0x5fc>)
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	3301      	adds	r3, #1
 8003c46:	b2da      	uxtb	r2, r3
 8003c48:	4b66      	ldr	r3, [pc, #408]	; (8003de4 <main+0x5fc>)
 8003c4a:	701a      	strb	r2, [r3, #0]
					if (rebootCounter > mainCount) {
 8003c4c:	4b65      	ldr	r3, [pc, #404]	; (8003de4 <main+0x5fc>)
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	2b78      	cmp	r3, #120	; 0x78
 8003c52:	d901      	bls.n	8003c58 <main+0x470>
						rebootsystem();
 8003c54:	f002 fc82 	bl	800655c <rebootsystem>
			while (isReg == 0) {
 8003c58:	4b60      	ldr	r3, [pc, #384]	; (8003ddc <main+0x5f4>)
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d0d9      	beq.n	8003c14 <main+0x42c>
					}
				}
			}
			if (estabilish_tcp() == 1) {
 8003c60:	f002 ff1e 	bl	8006aa0 <estabilish_tcp>
 8003c64:	0003      	movs	r3, r0
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d11c      	bne.n	8003ca4 <main+0x4bc>
				stats = 4;
 8003c6a:	4b5a      	ldr	r3, [pc, #360]	; (8003dd4 <main+0x5ec>)
 8003c6c:	2204      	movs	r2, #4
 8003c6e:	701a      	strb	r2, [r3, #0]
				// HAL_UART_Transmit(&huart4, "Loginpacket sending",
				// sizeof("loginpacket sending"), 100);
				send_login_packet();
 8003c70:	f003 f900 	bl	8006e74 <send_login_packet>
				HAL_Delay(5000);
 8003c74:	4b5c      	ldr	r3, [pc, #368]	; (8003de8 <main+0x600>)
 8003c76:	0018      	movs	r0, r3
 8003c78:	f005 ff44 	bl	8009b04 <HAL_Delay>
				if (isLoggedIn == 0) {
 8003c7c:	4b5b      	ldr	r3, [pc, #364]	; (8003dec <main+0x604>)
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d12a      	bne.n	8003cdc <main+0x4f4>
					// HAL_UART_Transmit(&huart4, "Loginpacket sending",
					// sizeof("loginpacket sending"), 100);
					send_login_packet();
 8003c86:	f003 f8f5 	bl	8006e74 <send_login_packet>
					HAL_Delay(5000);
 8003c8a:	4b57      	ldr	r3, [pc, #348]	; (8003de8 <main+0x600>)
 8003c8c:	0018      	movs	r0, r3
 8003c8e:	f005 ff39 	bl	8009b04 <HAL_Delay>
					if (isLoggedIn == 0) {
 8003c92:	4b56      	ldr	r3, [pc, #344]	; (8003dec <main+0x604>)
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d11f      	bne.n	8003cdc <main+0x4f4>
						isTcpOpen = 0;
 8003c9c:	4b54      	ldr	r3, [pc, #336]	; (8003df0 <main+0x608>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	701a      	strb	r2, [r3, #0]
 8003ca2:	e01b      	b.n	8003cdc <main+0x4f4>
					}
				}
			}
			else {
				stats = 5;
 8003ca4:	4b4b      	ldr	r3, [pc, #300]	; (8003dd4 <main+0x5ec>)
 8003ca6:	2205      	movs	r2, #5
 8003ca8:	701a      	strb	r2, [r3, #0]
				recTimeA = 0;
 8003caa:	4b52      	ldr	r3, [pc, #328]	; (8003df4 <main+0x60c>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	701a      	strb	r2, [r3, #0]
				while (recTimeA < rTime) { //18 to 180
 8003cb0:	e00e      	b.n	8003cd0 <main+0x4e8>
					HAL_Delay(1000);
 8003cb2:	23fa      	movs	r3, #250	; 0xfa
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	0018      	movs	r0, r3
 8003cb8:	f005 ff24 	bl	8009b04 <HAL_Delay>
					recTimeA++;
 8003cbc:	4b4d      	ldr	r3, [pc, #308]	; (8003df4 <main+0x60c>)
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	b2da      	uxtb	r2, r3
 8003cc4:	4b4b      	ldr	r3, [pc, #300]	; (8003df4 <main+0x60c>)
 8003cc6:	701a      	strb	r2, [r3, #0]
					where_api_handler();
 8003cc8:	f002 ffe8 	bl	8006c9c <where_api_handler>
					alarm_sender();
 8003ccc:	f003 f820 	bl	8006d10 <alarm_sender>
				while (recTimeA < rTime) { //18 to 180
 8003cd0:	4b48      	ldr	r3, [pc, #288]	; (8003df4 <main+0x60c>)
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	2bb3      	cmp	r3, #179	; 0xb3
 8003cd6:	d9ec      	bls.n	8003cb2 <main+0x4ca>
				}
				//SEND LOCATION VIA SMS
				//--------------------------------------------------------------------------
				send_location_packet_via_sms();
 8003cd8:	f004 f95c 	bl	8007f94 <send_location_packet_via_sms>
		while (isTcpOpen == 0 && isLoggedIn == 0) {
 8003cdc:	4b44      	ldr	r3, [pc, #272]	; (8003df0 <main+0x608>)
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d15c      	bne.n	8003da0 <main+0x5b8>
 8003ce6:	4b41      	ldr	r3, [pc, #260]	; (8003dec <main+0x604>)
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d100      	bne.n	8003cf2 <main+0x50a>
 8003cf0:	e74f      	b.n	8003b92 <main+0x3aa>
				//--------------------------------------------------------
			}
		}
		while (isTcpOpen == 1 && isLoggedIn == 1 && isDataMode == 1) {
 8003cf2:	e055      	b.n	8003da0 <main+0x5b8>
			stats = 7;
 8003cf4:	4b37      	ldr	r3, [pc, #220]	; (8003dd4 <main+0x5ec>)
 8003cf6:	2207      	movs	r2, #7
 8003cf8:	701a      	strb	r2, [r3, #0]
			uint8_t tempDelayCounter=0;
 8003cfa:	23fc      	movs	r3, #252	; 0xfc
 8003cfc:	18fb      	adds	r3, r7, r3
 8003cfe:	2200      	movs	r2, #0
 8003d00:	701a      	strb	r2, [r3, #0]
			while(isAlarm == 0){
 8003d02:	e014      	b.n	8003d2e <main+0x546>
				tempDelayCounter++;
 8003d04:	21fc      	movs	r1, #252	; 0xfc
 8003d06:	187b      	adds	r3, r7, r1
 8003d08:	781a      	ldrb	r2, [r3, #0]
 8003d0a:	187b      	adds	r3, r7, r1
 8003d0c:	3201      	adds	r2, #1
 8003d0e:	701a      	strb	r2, [r3, #0]
				if(tempDelayCounter>locationDataIntervalA){
 8003d10:	4b39      	ldr	r3, [pc, #228]	; (8003df8 <main+0x610>)
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	187a      	adds	r2, r7, r1
 8003d16:	7812      	ldrb	r2, [r2, #0]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d903      	bls.n	8003d24 <main+0x53c>
					tempDelayCounter=0;
 8003d1c:	187b      	adds	r3, r7, r1
 8003d1e:	2200      	movs	r2, #0
 8003d20:	701a      	strb	r2, [r3, #0]
					break;
 8003d22:	e009      	b.n	8003d38 <main+0x550>
				}
				else{
					HAL_Delay(1000);
 8003d24:	23fa      	movs	r3, #250	; 0xfa
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	0018      	movs	r0, r3
 8003d2a:	f005 feeb 	bl	8009b04 <HAL_Delay>
			while(isAlarm == 0){
 8003d2e:	4b33      	ldr	r3, [pc, #204]	; (8003dfc <main+0x614>)
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d0e5      	beq.n	8003d04 <main+0x51c>
				}
			}
			HAL_Delay(1000);
 8003d38:	23fa      	movs	r3, #250	; 0xfa
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	0018      	movs	r0, r3
 8003d3e:	f005 fee1 	bl	8009b04 <HAL_Delay>
//			HAL_Delay(locationDataIntervalA*1000);
			heartBeatTimer++;
 8003d42:	4b2f      	ldr	r3, [pc, #188]	; (8003e00 <main+0x618>)
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	3301      	adds	r3, #1
 8003d48:	b2da      	uxtb	r2, r3
 8003d4a:	4b2d      	ldr	r3, [pc, #180]	; (8003e00 <main+0x618>)
 8003d4c:	701a      	strb	r2, [r3, #0]
			if (heartBeatTimer > 36) {
 8003d4e:	4b2c      	ldr	r3, [pc, #176]	; (8003e00 <main+0x618>)
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	2b24      	cmp	r3, #36	; 0x24
 8003d54:	d90e      	bls.n	8003d74 <main+0x58c>
				stats = 8;
 8003d56:	4b1f      	ldr	r3, [pc, #124]	; (8003dd4 <main+0x5ec>)
 8003d58:	2208      	movs	r2, #8
 8003d5a:	701a      	strb	r2, [r3, #0]
				isLoggedIn = 0;
 8003d5c:	4b23      	ldr	r3, [pc, #140]	; (8003dec <main+0x604>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	701a      	strb	r2, [r3, #0]
				send_hb_packet();
 8003d62:	f003 fce5 	bl	8007730 <send_hb_packet>
				HAL_Delay(10000);
 8003d66:	4b1e      	ldr	r3, [pc, #120]	; (8003de0 <main+0x5f8>)
 8003d68:	0018      	movs	r0, r3
 8003d6a:	f005 fecb 	bl	8009b04 <HAL_Delay>
				heartBeatTimer = 0;
 8003d6e:	4b24      	ldr	r3, [pc, #144]	; (8003e00 <main+0x618>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	701a      	strb	r2, [r3, #0]
			}
			if (isDataMode == 1 && isLoggedIn == 1 && isTcpOpen == 1) {
 8003d74:	4b23      	ldr	r3, [pc, #140]	; (8003e04 <main+0x61c>)
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d110      	bne.n	8003da0 <main+0x5b8>
 8003d7e:	4b1b      	ldr	r3, [pc, #108]	; (8003dec <main+0x604>)
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d10b      	bne.n	8003da0 <main+0x5b8>
 8003d88:	4b19      	ldr	r3, [pc, #100]	; (8003df0 <main+0x608>)
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d106      	bne.n	8003da0 <main+0x5b8>
				stats = 8;
 8003d92:	4b10      	ldr	r3, [pc, #64]	; (8003dd4 <main+0x5ec>)
 8003d94:	2208      	movs	r2, #8
 8003d96:	701a      	strb	r2, [r3, #0]
				incoming_msg_handler();
 8003d98:	f003 f808 	bl	8006dac <incoming_msg_handler>
				send_data_packet();
 8003d9c:	f003 f8ec 	bl	8006f78 <send_data_packet>
		while (isTcpOpen == 1 && isLoggedIn == 1 && isDataMode == 1) {
 8003da0:	4b13      	ldr	r3, [pc, #76]	; (8003df0 <main+0x608>)
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d109      	bne.n	8003dbe <main+0x5d6>
 8003daa:	4b10      	ldr	r3, [pc, #64]	; (8003dec <main+0x604>)
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d104      	bne.n	8003dbe <main+0x5d6>
 8003db4:	4b13      	ldr	r3, [pc, #76]	; (8003e04 <main+0x61c>)
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d09a      	beq.n	8003cf4 <main+0x50c>
			}

		}
		isTcpOpen = 0;
 8003dbe:	4b0c      	ldr	r3, [pc, #48]	; (8003df0 <main+0x608>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	701a      	strb	r2, [r3, #0]
		isLoggedIn = 0;
 8003dc4:	4b09      	ldr	r3, [pc, #36]	; (8003dec <main+0x604>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	701a      	strb	r2, [r3, #0]
		isDataMode = 0;
 8003dca:	4b0e      	ldr	r3, [pc, #56]	; (8003e04 <main+0x61c>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	701a      	strb	r2, [r3, #0]
		while (isTcpOpen == 0 && isLoggedIn == 0) {
 8003dd0:	e784      	b.n	8003cdc <main+0x4f4>
 8003dd2:	46c0      	nop			; (mov r8, r8)
 8003dd4:	20000d1d 	.word	0x20000d1d
 8003dd8:	080132e0 	.word	0x080132e0
 8003ddc:	20000a2d 	.word	0x20000a2d
 8003de0:	00002710 	.word	0x00002710
 8003de4:	2000073f 	.word	0x2000073f
 8003de8:	00001388 	.word	0x00001388
 8003dec:	20000a30 	.word	0x20000a30
 8003df0:	20000a2c 	.word	0x20000a2c
 8003df4:	2000073b 	.word	0x2000073b
 8003df8:	20000004 	.word	0x20000004
 8003dfc:	20000725 	.word	0x20000725
 8003e00:	2000073e 	.word	0x2000073e
 8003e04:	2000087a 	.word	0x2000087a

08003e08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003e08:	b590      	push	{r4, r7, lr}
 8003e0a:	b093      	sub	sp, #76	; 0x4c
 8003e0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003e0e:	2414      	movs	r4, #20
 8003e10:	193b      	adds	r3, r7, r4
 8003e12:	0018      	movs	r0, r3
 8003e14:	2334      	movs	r3, #52	; 0x34
 8003e16:	001a      	movs	r2, r3
 8003e18:	2100      	movs	r1, #0
 8003e1a:	f00b f80c 	bl	800ee36 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003e1e:	1d3b      	adds	r3, r7, #4
 8003e20:	0018      	movs	r0, r3
 8003e22:	2310      	movs	r3, #16
 8003e24:	001a      	movs	r2, r3
 8003e26:	2100      	movs	r1, #0
 8003e28:	f00b f805 	bl	800ee36 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e2c:	2380      	movs	r3, #128	; 0x80
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	0018      	movs	r0, r3
 8003e32:	f006 f9ef 	bl	800a214 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003e36:	193b      	adds	r3, r7, r4
 8003e38:	2202      	movs	r2, #2
 8003e3a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003e3c:	193b      	adds	r3, r7, r4
 8003e3e:	2280      	movs	r2, #128	; 0x80
 8003e40:	0052      	lsls	r2, r2, #1
 8003e42:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8003e44:	0021      	movs	r1, r4
 8003e46:	187b      	adds	r3, r7, r1
 8003e48:	2200      	movs	r2, #0
 8003e4a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003e4c:	187b      	adds	r3, r7, r1
 8003e4e:	2240      	movs	r2, #64	; 0x40
 8003e50:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e52:	187b      	adds	r3, r7, r1
 8003e54:	2202      	movs	r2, #2
 8003e56:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003e58:	187b      	adds	r3, r7, r1
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8003e5e:	187b      	adds	r3, r7, r1
 8003e60:	2200      	movs	r2, #0
 8003e62:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8003e64:	187b      	adds	r3, r7, r1
 8003e66:	2208      	movs	r2, #8
 8003e68:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003e6a:	187b      	adds	r3, r7, r1
 8003e6c:	2280      	movs	r2, #128	; 0x80
 8003e6e:	0292      	lsls	r2, r2, #10
 8003e70:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003e72:	187b      	adds	r3, r7, r1
 8003e74:	2280      	movs	r2, #128	; 0x80
 8003e76:	0592      	lsls	r2, r2, #22
 8003e78:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e7a:	187b      	adds	r3, r7, r1
 8003e7c:	0018      	movs	r0, r3
 8003e7e:	f006 fa15 	bl	800a2ac <HAL_RCC_OscConfig>
 8003e82:	1e03      	subs	r3, r0, #0
 8003e84:	d001      	beq.n	8003e8a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8003e86:	f004 fcad 	bl	80087e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e8a:	1d3b      	adds	r3, r7, #4
 8003e8c:	2207      	movs	r2, #7
 8003e8e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e90:	1d3b      	adds	r3, r7, #4
 8003e92:	2202      	movs	r2, #2
 8003e94:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e96:	1d3b      	adds	r3, r7, #4
 8003e98:	2200      	movs	r2, #0
 8003e9a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003e9c:	1d3b      	adds	r3, r7, #4
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003ea2:	1d3b      	adds	r3, r7, #4
 8003ea4:	2102      	movs	r1, #2
 8003ea6:	0018      	movs	r0, r3
 8003ea8:	f006 fd10 	bl	800a8cc <HAL_RCC_ClockConfig>
 8003eac:	1e03      	subs	r3, r0, #0
 8003eae:	d001      	beq.n	8003eb4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8003eb0:	f004 fc98 	bl	80087e4 <Error_Handler>
  }
}
 8003eb4:	46c0      	nop			; (mov r8, r8)
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	b013      	add	sp, #76	; 0x4c
 8003eba:	bd90      	pop	{r4, r7, pc}

08003ebc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003ec0:	4b1b      	ldr	r3, [pc, #108]	; (8003f30 <MX_SPI1_Init+0x74>)
 8003ec2:	4a1c      	ldr	r2, [pc, #112]	; (8003f34 <MX_SPI1_Init+0x78>)
 8003ec4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003ec6:	4b1a      	ldr	r3, [pc, #104]	; (8003f30 <MX_SPI1_Init+0x74>)
 8003ec8:	2282      	movs	r2, #130	; 0x82
 8003eca:	0052      	lsls	r2, r2, #1
 8003ecc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003ece:	4b18      	ldr	r3, [pc, #96]	; (8003f30 <MX_SPI1_Init+0x74>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003ed4:	4b16      	ldr	r3, [pc, #88]	; (8003f30 <MX_SPI1_Init+0x74>)
 8003ed6:	22e0      	movs	r2, #224	; 0xe0
 8003ed8:	00d2      	lsls	r2, r2, #3
 8003eda:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003edc:	4b14      	ldr	r3, [pc, #80]	; (8003f30 <MX_SPI1_Init+0x74>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003ee2:	4b13      	ldr	r3, [pc, #76]	; (8003f30 <MX_SPI1_Init+0x74>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003ee8:	4b11      	ldr	r3, [pc, #68]	; (8003f30 <MX_SPI1_Init+0x74>)
 8003eea:	2280      	movs	r2, #128	; 0x80
 8003eec:	0092      	lsls	r2, r2, #2
 8003eee:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003ef0:	4b0f      	ldr	r3, [pc, #60]	; (8003f30 <MX_SPI1_Init+0x74>)
 8003ef2:	2220      	movs	r2, #32
 8003ef4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003ef6:	4b0e      	ldr	r3, [pc, #56]	; (8003f30 <MX_SPI1_Init+0x74>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003efc:	4b0c      	ldr	r3, [pc, #48]	; (8003f30 <MX_SPI1_Init+0x74>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f02:	4b0b      	ldr	r3, [pc, #44]	; (8003f30 <MX_SPI1_Init+0x74>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003f08:	4b09      	ldr	r3, [pc, #36]	; (8003f30 <MX_SPI1_Init+0x74>)
 8003f0a:	2207      	movs	r2, #7
 8003f0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003f0e:	4b08      	ldr	r3, [pc, #32]	; (8003f30 <MX_SPI1_Init+0x74>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003f14:	4b06      	ldr	r3, [pc, #24]	; (8003f30 <MX_SPI1_Init+0x74>)
 8003f16:	2208      	movs	r2, #8
 8003f18:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003f1a:	4b05      	ldr	r3, [pc, #20]	; (8003f30 <MX_SPI1_Init+0x74>)
 8003f1c:	0018      	movs	r0, r3
 8003f1e:	f006 ffb3 	bl	800ae88 <HAL_SPI_Init>
 8003f22:	1e03      	subs	r3, r0, #0
 8003f24:	d001      	beq.n	8003f2a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003f26:	f004 fc5d 	bl	80087e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003f2a:	46c0      	nop			; (mov r8, r8)
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	200002e8 	.word	0x200002e8
 8003f34:	40013000 	.word	0x40013000

08003f38 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b08c      	sub	sp, #48	; 0x30
 8003f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f3e:	2320      	movs	r3, #32
 8003f40:	18fb      	adds	r3, r7, r3
 8003f42:	0018      	movs	r0, r3
 8003f44:	2310      	movs	r3, #16
 8003f46:	001a      	movs	r2, r3
 8003f48:	2100      	movs	r1, #0
 8003f4a:	f00a ff74 	bl	800ee36 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f4e:	2314      	movs	r3, #20
 8003f50:	18fb      	adds	r3, r7, r3
 8003f52:	0018      	movs	r0, r3
 8003f54:	230c      	movs	r3, #12
 8003f56:	001a      	movs	r2, r3
 8003f58:	2100      	movs	r1, #0
 8003f5a:	f00a ff6c 	bl	800ee36 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003f5e:	1d3b      	adds	r3, r7, #4
 8003f60:	0018      	movs	r0, r3
 8003f62:	2310      	movs	r3, #16
 8003f64:	001a      	movs	r2, r3
 8003f66:	2100      	movs	r1, #0
 8003f68:	f00a ff65 	bl	800ee36 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003f6c:	4b2e      	ldr	r3, [pc, #184]	; (8004028 <MX_TIM3_Init+0xf0>)
 8003f6e:	4a2f      	ldr	r2, [pc, #188]	; (800402c <MX_TIM3_Init+0xf4>)
 8003f70:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64000;
 8003f72:	4b2d      	ldr	r3, [pc, #180]	; (8004028 <MX_TIM3_Init+0xf0>)
 8003f74:	22fa      	movs	r2, #250	; 0xfa
 8003f76:	0212      	lsls	r2, r2, #8
 8003f78:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f7a:	4b2b      	ldr	r3, [pc, #172]	; (8004028 <MX_TIM3_Init+0xf0>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8003f80:	4b29      	ldr	r3, [pc, #164]	; (8004028 <MX_TIM3_Init+0xf0>)
 8003f82:	22fa      	movs	r2, #250	; 0xfa
 8003f84:	0092      	lsls	r2, r2, #2
 8003f86:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f88:	4b27      	ldr	r3, [pc, #156]	; (8004028 <MX_TIM3_Init+0xf0>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003f8e:	4b26      	ldr	r3, [pc, #152]	; (8004028 <MX_TIM3_Init+0xf0>)
 8003f90:	2280      	movs	r2, #128	; 0x80
 8003f92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003f94:	4b24      	ldr	r3, [pc, #144]	; (8004028 <MX_TIM3_Init+0xf0>)
 8003f96:	0018      	movs	r0, r3
 8003f98:	f007 ff94 	bl	800bec4 <HAL_TIM_Base_Init>
 8003f9c:	1e03      	subs	r3, r0, #0
 8003f9e:	d001      	beq.n	8003fa4 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8003fa0:	f004 fc20 	bl	80087e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003fa4:	2120      	movs	r1, #32
 8003fa6:	187b      	adds	r3, r7, r1
 8003fa8:	2280      	movs	r2, #128	; 0x80
 8003faa:	0152      	lsls	r2, r2, #5
 8003fac:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003fae:	187a      	adds	r2, r7, r1
 8003fb0:	4b1d      	ldr	r3, [pc, #116]	; (8004028 <MX_TIM3_Init+0xf0>)
 8003fb2:	0011      	movs	r1, r2
 8003fb4:	0018      	movs	r0, r3
 8003fb6:	f008 fbc9 	bl	800c74c <HAL_TIM_ConfigClockSource>
 8003fba:	1e03      	subs	r3, r0, #0
 8003fbc:	d001      	beq.n	8003fc2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8003fbe:	f004 fc11 	bl	80087e4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8003fc2:	4b19      	ldr	r3, [pc, #100]	; (8004028 <MX_TIM3_Init+0xf0>)
 8003fc4:	0018      	movs	r0, r3
 8003fc6:	f008 f859 	bl	800c07c <HAL_TIM_IC_Init>
 8003fca:	1e03      	subs	r3, r0, #0
 8003fcc:	d001      	beq.n	8003fd2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8003fce:	f004 fc09 	bl	80087e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fd2:	2114      	movs	r1, #20
 8003fd4:	187b      	adds	r3, r7, r1
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fda:	187b      	adds	r3, r7, r1
 8003fdc:	2200      	movs	r2, #0
 8003fde:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003fe0:	187a      	adds	r2, r7, r1
 8003fe2:	4b11      	ldr	r3, [pc, #68]	; (8004028 <MX_TIM3_Init+0xf0>)
 8003fe4:	0011      	movs	r1, r2
 8003fe6:	0018      	movs	r0, r3
 8003fe8:	f008 fef4 	bl	800cdd4 <HAL_TIMEx_MasterConfigSynchronization>
 8003fec:	1e03      	subs	r3, r0, #0
 8003fee:	d001      	beq.n	8003ff4 <MX_TIM3_Init+0xbc>
  {
    Error_Handler();
 8003ff0:	f004 fbf8 	bl	80087e4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8003ff4:	1d3b      	adds	r3, r7, #4
 8003ff6:	220a      	movs	r2, #10
 8003ff8:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003ffa:	1d3b      	adds	r3, r7, #4
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004000:	1d3b      	adds	r3, r7, #4
 8004002:	2200      	movs	r2, #0
 8004004:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8004006:	1d3b      	adds	r3, r7, #4
 8004008:	2200      	movs	r2, #0
 800400a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800400c:	1d39      	adds	r1, r7, #4
 800400e:	4b06      	ldr	r3, [pc, #24]	; (8004028 <MX_TIM3_Init+0xf0>)
 8004010:	2200      	movs	r2, #0
 8004012:	0018      	movs	r0, r3
 8004014:	f008 faf6 	bl	800c604 <HAL_TIM_IC_ConfigChannel>
 8004018:	1e03      	subs	r3, r0, #0
 800401a:	d001      	beq.n	8004020 <MX_TIM3_Init+0xe8>
  {
    Error_Handler();
 800401c:	f004 fbe2 	bl	80087e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004020:	46c0      	nop			; (mov r8, r8)
 8004022:	46bd      	mov	sp, r7
 8004024:	b00c      	add	sp, #48	; 0x30
 8004026:	bd80      	pop	{r7, pc}
 8004028:	2000034c 	.word	0x2000034c
 800402c:	40000400 	.word	0x40000400

08004030 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004036:	1d3b      	adds	r3, r7, #4
 8004038:	0018      	movs	r0, r3
 800403a:	230c      	movs	r3, #12
 800403c:	001a      	movs	r2, r3
 800403e:	2100      	movs	r1, #0
 8004040:	f00a fef9 	bl	800ee36 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004044:	4b15      	ldr	r3, [pc, #84]	; (800409c <MX_TIM6_Init+0x6c>)
 8004046:	4a16      	ldr	r2, [pc, #88]	; (80040a0 <MX_TIM6_Init+0x70>)
 8004048:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 6400;
 800404a:	4b14      	ldr	r3, [pc, #80]	; (800409c <MX_TIM6_Init+0x6c>)
 800404c:	22c8      	movs	r2, #200	; 0xc8
 800404e:	0152      	lsls	r2, r2, #5
 8004050:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004052:	4b12      	ldr	r3, [pc, #72]	; (800409c <MX_TIM6_Init+0x6c>)
 8004054:	2200      	movs	r2, #0
 8004056:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8004058:	4b10      	ldr	r3, [pc, #64]	; (800409c <MX_TIM6_Init+0x6c>)
 800405a:	4a12      	ldr	r2, [pc, #72]	; (80040a4 <MX_TIM6_Init+0x74>)
 800405c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800405e:	4b0f      	ldr	r3, [pc, #60]	; (800409c <MX_TIM6_Init+0x6c>)
 8004060:	2280      	movs	r2, #128	; 0x80
 8004062:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004064:	4b0d      	ldr	r3, [pc, #52]	; (800409c <MX_TIM6_Init+0x6c>)
 8004066:	0018      	movs	r0, r3
 8004068:	f007 ff2c 	bl	800bec4 <HAL_TIM_Base_Init>
 800406c:	1e03      	subs	r3, r0, #0
 800406e:	d001      	beq.n	8004074 <MX_TIM6_Init+0x44>
  {
    Error_Handler();
 8004070:	f004 fbb8 	bl	80087e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004074:	1d3b      	adds	r3, r7, #4
 8004076:	2200      	movs	r2, #0
 8004078:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800407a:	1d3b      	adds	r3, r7, #4
 800407c:	2200      	movs	r2, #0
 800407e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004080:	1d3a      	adds	r2, r7, #4
 8004082:	4b06      	ldr	r3, [pc, #24]	; (800409c <MX_TIM6_Init+0x6c>)
 8004084:	0011      	movs	r1, r2
 8004086:	0018      	movs	r0, r3
 8004088:	f008 fea4 	bl	800cdd4 <HAL_TIMEx_MasterConfigSynchronization>
 800408c:	1e03      	subs	r3, r0, #0
 800408e:	d001      	beq.n	8004094 <MX_TIM6_Init+0x64>
  {
    Error_Handler();
 8004090:	f004 fba8 	bl	80087e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004094:	46c0      	nop			; (mov r8, r8)
 8004096:	46bd      	mov	sp, r7
 8004098:	b004      	add	sp, #16
 800409a:	bd80      	pop	{r7, pc}
 800409c:	20000398 	.word	0x20000398
 80040a0:	40001000 	.word	0x40001000
 80040a4:	000003e7 	.word	0x000003e7

080040a8 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80040ac:	4b0e      	ldr	r3, [pc, #56]	; (80040e8 <MX_TIM14_Init+0x40>)
 80040ae:	4a0f      	ldr	r2, [pc, #60]	; (80040ec <MX_TIM14_Init+0x44>)
 80040b0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 6400;
 80040b2:	4b0d      	ldr	r3, [pc, #52]	; (80040e8 <MX_TIM14_Init+0x40>)
 80040b4:	22c8      	movs	r2, #200	; 0xc8
 80040b6:	0152      	lsls	r2, r2, #5
 80040b8:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040ba:	4b0b      	ldr	r3, [pc, #44]	; (80040e8 <MX_TIM14_Init+0x40>)
 80040bc:	2200      	movs	r2, #0
 80040be:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000-1;
 80040c0:	4b09      	ldr	r3, [pc, #36]	; (80040e8 <MX_TIM14_Init+0x40>)
 80040c2:	4a0b      	ldr	r2, [pc, #44]	; (80040f0 <MX_TIM14_Init+0x48>)
 80040c4:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040c6:	4b08      	ldr	r3, [pc, #32]	; (80040e8 <MX_TIM14_Init+0x40>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80040cc:	4b06      	ldr	r3, [pc, #24]	; (80040e8 <MX_TIM14_Init+0x40>)
 80040ce:	2280      	movs	r2, #128	; 0x80
 80040d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80040d2:	4b05      	ldr	r3, [pc, #20]	; (80040e8 <MX_TIM14_Init+0x40>)
 80040d4:	0018      	movs	r0, r3
 80040d6:	f007 fef5 	bl	800bec4 <HAL_TIM_Base_Init>
 80040da:	1e03      	subs	r3, r0, #0
 80040dc:	d001      	beq.n	80040e2 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 80040de:	f004 fb81 	bl	80087e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80040e2:	46c0      	nop			; (mov r8, r8)
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	200003e4 	.word	0x200003e4
 80040ec:	40002000 	.word	0x40002000
 80040f0:	0000270f 	.word	0x0000270f

080040f4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80040f8:	4b10      	ldr	r3, [pc, #64]	; (800413c <MX_TIM16_Init+0x48>)
 80040fa:	4a11      	ldr	r2, [pc, #68]	; (8004140 <MX_TIM16_Init+0x4c>)
 80040fc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 6400;
 80040fe:	4b0f      	ldr	r3, [pc, #60]	; (800413c <MX_TIM16_Init+0x48>)
 8004100:	22c8      	movs	r2, #200	; 0xc8
 8004102:	0152      	lsls	r2, r2, #5
 8004104:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004106:	4b0d      	ldr	r3, [pc, #52]	; (800413c <MX_TIM16_Init+0x48>)
 8004108:	2200      	movs	r2, #0
 800410a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000-1;
 800410c:	4b0b      	ldr	r3, [pc, #44]	; (800413c <MX_TIM16_Init+0x48>)
 800410e:	4a0d      	ldr	r2, [pc, #52]	; (8004144 <MX_TIM16_Init+0x50>)
 8004110:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004112:	4b0a      	ldr	r3, [pc, #40]	; (800413c <MX_TIM16_Init+0x48>)
 8004114:	2200      	movs	r2, #0
 8004116:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8004118:	4b08      	ldr	r3, [pc, #32]	; (800413c <MX_TIM16_Init+0x48>)
 800411a:	2200      	movs	r2, #0
 800411c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800411e:	4b07      	ldr	r3, [pc, #28]	; (800413c <MX_TIM16_Init+0x48>)
 8004120:	2280      	movs	r2, #128	; 0x80
 8004122:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8004124:	4b05      	ldr	r3, [pc, #20]	; (800413c <MX_TIM16_Init+0x48>)
 8004126:	0018      	movs	r0, r3
 8004128:	f007 fecc 	bl	800bec4 <HAL_TIM_Base_Init>
 800412c:	1e03      	subs	r3, r0, #0
 800412e:	d001      	beq.n	8004134 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8004130:	f004 fb58 	bl	80087e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8004134:	46c0      	nop			; (mov r8, r8)
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	46c0      	nop			; (mov r8, r8)
 800413c:	20000430 	.word	0x20000430
 8004140:	40014400 	.word	0x40014400
 8004144:	0000270f 	.word	0x0000270f

08004148 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800414c:	4b10      	ldr	r3, [pc, #64]	; (8004190 <MX_TIM17_Init+0x48>)
 800414e:	4a11      	ldr	r2, [pc, #68]	; (8004194 <MX_TIM17_Init+0x4c>)
 8004150:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 6400;
 8004152:	4b0f      	ldr	r3, [pc, #60]	; (8004190 <MX_TIM17_Init+0x48>)
 8004154:	22c8      	movs	r2, #200	; 0xc8
 8004156:	0152      	lsls	r2, r2, #5
 8004158:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800415a:	4b0d      	ldr	r3, [pc, #52]	; (8004190 <MX_TIM17_Init+0x48>)
 800415c:	2200      	movs	r2, #0
 800415e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 4000-1;
 8004160:	4b0b      	ldr	r3, [pc, #44]	; (8004190 <MX_TIM17_Init+0x48>)
 8004162:	4a0d      	ldr	r2, [pc, #52]	; (8004198 <MX_TIM17_Init+0x50>)
 8004164:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004166:	4b0a      	ldr	r3, [pc, #40]	; (8004190 <MX_TIM17_Init+0x48>)
 8004168:	2200      	movs	r2, #0
 800416a:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800416c:	4b08      	ldr	r3, [pc, #32]	; (8004190 <MX_TIM17_Init+0x48>)
 800416e:	2200      	movs	r2, #0
 8004170:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004172:	4b07      	ldr	r3, [pc, #28]	; (8004190 <MX_TIM17_Init+0x48>)
 8004174:	2280      	movs	r2, #128	; 0x80
 8004176:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8004178:	4b05      	ldr	r3, [pc, #20]	; (8004190 <MX_TIM17_Init+0x48>)
 800417a:	0018      	movs	r0, r3
 800417c:	f007 fea2 	bl	800bec4 <HAL_TIM_Base_Init>
 8004180:	1e03      	subs	r3, r0, #0
 8004182:	d001      	beq.n	8004188 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8004184:	f004 fb2e 	bl	80087e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8004188:	46c0      	nop			; (mov r8, r8)
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	46c0      	nop			; (mov r8, r8)
 8004190:	2000047c 	.word	0x2000047c
 8004194:	40014800 	.word	0x40014800
 8004198:	00000f9f 	.word	0x00000f9f

0800419c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80041a0:	4b23      	ldr	r3, [pc, #140]	; (8004230 <MX_USART1_UART_Init+0x94>)
 80041a2:	4a24      	ldr	r2, [pc, #144]	; (8004234 <MX_USART1_UART_Init+0x98>)
 80041a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80041a6:	4b22      	ldr	r3, [pc, #136]	; (8004230 <MX_USART1_UART_Init+0x94>)
 80041a8:	2296      	movs	r2, #150	; 0x96
 80041aa:	0192      	lsls	r2, r2, #6
 80041ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80041ae:	4b20      	ldr	r3, [pc, #128]	; (8004230 <MX_USART1_UART_Init+0x94>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80041b4:	4b1e      	ldr	r3, [pc, #120]	; (8004230 <MX_USART1_UART_Init+0x94>)
 80041b6:	2200      	movs	r2, #0
 80041b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80041ba:	4b1d      	ldr	r3, [pc, #116]	; (8004230 <MX_USART1_UART_Init+0x94>)
 80041bc:	2200      	movs	r2, #0
 80041be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80041c0:	4b1b      	ldr	r3, [pc, #108]	; (8004230 <MX_USART1_UART_Init+0x94>)
 80041c2:	220c      	movs	r2, #12
 80041c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80041c6:	4b1a      	ldr	r3, [pc, #104]	; (8004230 <MX_USART1_UART_Init+0x94>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80041cc:	4b18      	ldr	r3, [pc, #96]	; (8004230 <MX_USART1_UART_Init+0x94>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80041d2:	4b17      	ldr	r3, [pc, #92]	; (8004230 <MX_USART1_UART_Init+0x94>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80041d8:	4b15      	ldr	r3, [pc, #84]	; (8004230 <MX_USART1_UART_Init+0x94>)
 80041da:	2200      	movs	r2, #0
 80041dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80041de:	4b14      	ldr	r3, [pc, #80]	; (8004230 <MX_USART1_UART_Init+0x94>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80041e4:	4b12      	ldr	r3, [pc, #72]	; (8004230 <MX_USART1_UART_Init+0x94>)
 80041e6:	0018      	movs	r0, r3
 80041e8:	f008 fe74 	bl	800ced4 <HAL_UART_Init>
 80041ec:	1e03      	subs	r3, r0, #0
 80041ee:	d001      	beq.n	80041f4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80041f0:	f004 faf8 	bl	80087e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80041f4:	4b0e      	ldr	r3, [pc, #56]	; (8004230 <MX_USART1_UART_Init+0x94>)
 80041f6:	2100      	movs	r1, #0
 80041f8:	0018      	movs	r0, r3
 80041fa:	f00a fcdd 	bl	800ebb8 <HAL_UARTEx_SetTxFifoThreshold>
 80041fe:	1e03      	subs	r3, r0, #0
 8004200:	d001      	beq.n	8004206 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8004202:	f004 faef 	bl	80087e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004206:	4b0a      	ldr	r3, [pc, #40]	; (8004230 <MX_USART1_UART_Init+0x94>)
 8004208:	2100      	movs	r1, #0
 800420a:	0018      	movs	r0, r3
 800420c:	f00a fd14 	bl	800ec38 <HAL_UARTEx_SetRxFifoThreshold>
 8004210:	1e03      	subs	r3, r0, #0
 8004212:	d001      	beq.n	8004218 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004214:	f004 fae6 	bl	80087e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004218:	4b05      	ldr	r3, [pc, #20]	; (8004230 <MX_USART1_UART_Init+0x94>)
 800421a:	0018      	movs	r0, r3
 800421c:	f00a fc92 	bl	800eb44 <HAL_UARTEx_DisableFifoMode>
 8004220:	1e03      	subs	r3, r0, #0
 8004222:	d001      	beq.n	8004228 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004224:	f004 fade 	bl	80087e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004228:	46c0      	nop			; (mov r8, r8)
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	46c0      	nop			; (mov r8, r8)
 8004230:	200004c8 	.word	0x200004c8
 8004234:	40013800 	.word	0x40013800

08004238 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800423c:	4b23      	ldr	r3, [pc, #140]	; (80042cc <MX_USART2_UART_Init+0x94>)
 800423e:	4a24      	ldr	r2, [pc, #144]	; (80042d0 <MX_USART2_UART_Init+0x98>)
 8004240:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004242:	4b22      	ldr	r3, [pc, #136]	; (80042cc <MX_USART2_UART_Init+0x94>)
 8004244:	22e1      	movs	r2, #225	; 0xe1
 8004246:	0252      	lsls	r2, r2, #9
 8004248:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800424a:	4b20      	ldr	r3, [pc, #128]	; (80042cc <MX_USART2_UART_Init+0x94>)
 800424c:	2200      	movs	r2, #0
 800424e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004250:	4b1e      	ldr	r3, [pc, #120]	; (80042cc <MX_USART2_UART_Init+0x94>)
 8004252:	2200      	movs	r2, #0
 8004254:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004256:	4b1d      	ldr	r3, [pc, #116]	; (80042cc <MX_USART2_UART_Init+0x94>)
 8004258:	2200      	movs	r2, #0
 800425a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800425c:	4b1b      	ldr	r3, [pc, #108]	; (80042cc <MX_USART2_UART_Init+0x94>)
 800425e:	220c      	movs	r2, #12
 8004260:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004262:	4b1a      	ldr	r3, [pc, #104]	; (80042cc <MX_USART2_UART_Init+0x94>)
 8004264:	2200      	movs	r2, #0
 8004266:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004268:	4b18      	ldr	r3, [pc, #96]	; (80042cc <MX_USART2_UART_Init+0x94>)
 800426a:	2200      	movs	r2, #0
 800426c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800426e:	4b17      	ldr	r3, [pc, #92]	; (80042cc <MX_USART2_UART_Init+0x94>)
 8004270:	2200      	movs	r2, #0
 8004272:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004274:	4b15      	ldr	r3, [pc, #84]	; (80042cc <MX_USART2_UART_Init+0x94>)
 8004276:	2200      	movs	r2, #0
 8004278:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800427a:	4b14      	ldr	r3, [pc, #80]	; (80042cc <MX_USART2_UART_Init+0x94>)
 800427c:	2200      	movs	r2, #0
 800427e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004280:	4b12      	ldr	r3, [pc, #72]	; (80042cc <MX_USART2_UART_Init+0x94>)
 8004282:	0018      	movs	r0, r3
 8004284:	f008 fe26 	bl	800ced4 <HAL_UART_Init>
 8004288:	1e03      	subs	r3, r0, #0
 800428a:	d001      	beq.n	8004290 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800428c:	f004 faaa 	bl	80087e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004290:	4b0e      	ldr	r3, [pc, #56]	; (80042cc <MX_USART2_UART_Init+0x94>)
 8004292:	2100      	movs	r1, #0
 8004294:	0018      	movs	r0, r3
 8004296:	f00a fc8f 	bl	800ebb8 <HAL_UARTEx_SetTxFifoThreshold>
 800429a:	1e03      	subs	r3, r0, #0
 800429c:	d001      	beq.n	80042a2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800429e:	f004 faa1 	bl	80087e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80042a2:	4b0a      	ldr	r3, [pc, #40]	; (80042cc <MX_USART2_UART_Init+0x94>)
 80042a4:	2100      	movs	r1, #0
 80042a6:	0018      	movs	r0, r3
 80042a8:	f00a fcc6 	bl	800ec38 <HAL_UARTEx_SetRxFifoThreshold>
 80042ac:	1e03      	subs	r3, r0, #0
 80042ae:	d001      	beq.n	80042b4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80042b0:	f004 fa98 	bl	80087e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80042b4:	4b05      	ldr	r3, [pc, #20]	; (80042cc <MX_USART2_UART_Init+0x94>)
 80042b6:	0018      	movs	r0, r3
 80042b8:	f00a fc44 	bl	800eb44 <HAL_UARTEx_DisableFifoMode>
 80042bc:	1e03      	subs	r3, r0, #0
 80042be:	d001      	beq.n	80042c4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80042c0:	f004 fa90 	bl	80087e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80042c4:	46c0      	nop			; (mov r8, r8)
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	46c0      	nop			; (mov r8, r8)
 80042cc:	2000055c 	.word	0x2000055c
 80042d0:	40004400 	.word	0x40004400

080042d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80042d8:	4b16      	ldr	r3, [pc, #88]	; (8004334 <MX_USART3_UART_Init+0x60>)
 80042da:	4a17      	ldr	r2, [pc, #92]	; (8004338 <MX_USART3_UART_Init+0x64>)
 80042dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80042de:	4b15      	ldr	r3, [pc, #84]	; (8004334 <MX_USART3_UART_Init+0x60>)
 80042e0:	22e1      	movs	r2, #225	; 0xe1
 80042e2:	0252      	lsls	r2, r2, #9
 80042e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80042e6:	4b13      	ldr	r3, [pc, #76]	; (8004334 <MX_USART3_UART_Init+0x60>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80042ec:	4b11      	ldr	r3, [pc, #68]	; (8004334 <MX_USART3_UART_Init+0x60>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80042f2:	4b10      	ldr	r3, [pc, #64]	; (8004334 <MX_USART3_UART_Init+0x60>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80042f8:	4b0e      	ldr	r3, [pc, #56]	; (8004334 <MX_USART3_UART_Init+0x60>)
 80042fa:	220c      	movs	r2, #12
 80042fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042fe:	4b0d      	ldr	r3, [pc, #52]	; (8004334 <MX_USART3_UART_Init+0x60>)
 8004300:	2200      	movs	r2, #0
 8004302:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004304:	4b0b      	ldr	r3, [pc, #44]	; (8004334 <MX_USART3_UART_Init+0x60>)
 8004306:	2200      	movs	r2, #0
 8004308:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800430a:	4b0a      	ldr	r3, [pc, #40]	; (8004334 <MX_USART3_UART_Init+0x60>)
 800430c:	2200      	movs	r2, #0
 800430e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004310:	4b08      	ldr	r3, [pc, #32]	; (8004334 <MX_USART3_UART_Init+0x60>)
 8004312:	2200      	movs	r2, #0
 8004314:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004316:	4b07      	ldr	r3, [pc, #28]	; (8004334 <MX_USART3_UART_Init+0x60>)
 8004318:	2200      	movs	r2, #0
 800431a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800431c:	4b05      	ldr	r3, [pc, #20]	; (8004334 <MX_USART3_UART_Init+0x60>)
 800431e:	0018      	movs	r0, r3
 8004320:	f008 fdd8 	bl	800ced4 <HAL_UART_Init>
 8004324:	1e03      	subs	r3, r0, #0
 8004326:	d001      	beq.n	800432c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8004328:	f004 fa5c 	bl	80087e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800432c:	46c0      	nop			; (mov r8, r8)
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	46c0      	nop			; (mov r8, r8)
 8004334:	200005f0 	.word	0x200005f0
 8004338:	40004800 	.word	0x40004800

0800433c <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8004340:	4b16      	ldr	r3, [pc, #88]	; (800439c <MX_USART4_UART_Init+0x60>)
 8004342:	4a17      	ldr	r2, [pc, #92]	; (80043a0 <MX_USART4_UART_Init+0x64>)
 8004344:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8004346:	4b15      	ldr	r3, [pc, #84]	; (800439c <MX_USART4_UART_Init+0x60>)
 8004348:	22e1      	movs	r2, #225	; 0xe1
 800434a:	0252      	lsls	r2, r2, #9
 800434c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800434e:	4b13      	ldr	r3, [pc, #76]	; (800439c <MX_USART4_UART_Init+0x60>)
 8004350:	2200      	movs	r2, #0
 8004352:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004354:	4b11      	ldr	r3, [pc, #68]	; (800439c <MX_USART4_UART_Init+0x60>)
 8004356:	2200      	movs	r2, #0
 8004358:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800435a:	4b10      	ldr	r3, [pc, #64]	; (800439c <MX_USART4_UART_Init+0x60>)
 800435c:	2200      	movs	r2, #0
 800435e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004360:	4b0e      	ldr	r3, [pc, #56]	; (800439c <MX_USART4_UART_Init+0x60>)
 8004362:	220c      	movs	r2, #12
 8004364:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004366:	4b0d      	ldr	r3, [pc, #52]	; (800439c <MX_USART4_UART_Init+0x60>)
 8004368:	2200      	movs	r2, #0
 800436a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800436c:	4b0b      	ldr	r3, [pc, #44]	; (800439c <MX_USART4_UART_Init+0x60>)
 800436e:	2200      	movs	r2, #0
 8004370:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004372:	4b0a      	ldr	r3, [pc, #40]	; (800439c <MX_USART4_UART_Init+0x60>)
 8004374:	2200      	movs	r2, #0
 8004376:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004378:	4b08      	ldr	r3, [pc, #32]	; (800439c <MX_USART4_UART_Init+0x60>)
 800437a:	2200      	movs	r2, #0
 800437c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800437e:	4b07      	ldr	r3, [pc, #28]	; (800439c <MX_USART4_UART_Init+0x60>)
 8004380:	2200      	movs	r2, #0
 8004382:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004384:	4b05      	ldr	r3, [pc, #20]	; (800439c <MX_USART4_UART_Init+0x60>)
 8004386:	0018      	movs	r0, r3
 8004388:	f008 fda4 	bl	800ced4 <HAL_UART_Init>
 800438c:	1e03      	subs	r3, r0, #0
 800438e:	d001      	beq.n	8004394 <MX_USART4_UART_Init+0x58>
  {
    Error_Handler();
 8004390:	f004 fa28 	bl	80087e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8004394:	46c0      	nop			; (mov r8, r8)
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	46c0      	nop			; (mov r8, r8)
 800439c:	20000684 	.word	0x20000684
 80043a0:	40004c00 	.word	0x40004c00

080043a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80043a4:	b590      	push	{r4, r7, lr}
 80043a6:	b08b      	sub	sp, #44	; 0x2c
 80043a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043aa:	2414      	movs	r4, #20
 80043ac:	193b      	adds	r3, r7, r4
 80043ae:	0018      	movs	r0, r3
 80043b0:	2314      	movs	r3, #20
 80043b2:	001a      	movs	r2, r3
 80043b4:	2100      	movs	r1, #0
 80043b6:	f00a fd3e 	bl	800ee36 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80043ba:	4b59      	ldr	r3, [pc, #356]	; (8004520 <MX_GPIO_Init+0x17c>)
 80043bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043be:	4b58      	ldr	r3, [pc, #352]	; (8004520 <MX_GPIO_Init+0x17c>)
 80043c0:	2120      	movs	r1, #32
 80043c2:	430a      	orrs	r2, r1
 80043c4:	635a      	str	r2, [r3, #52]	; 0x34
 80043c6:	4b56      	ldr	r3, [pc, #344]	; (8004520 <MX_GPIO_Init+0x17c>)
 80043c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ca:	2220      	movs	r2, #32
 80043cc:	4013      	ands	r3, r2
 80043ce:	613b      	str	r3, [r7, #16]
 80043d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80043d2:	4b53      	ldr	r3, [pc, #332]	; (8004520 <MX_GPIO_Init+0x17c>)
 80043d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043d6:	4b52      	ldr	r3, [pc, #328]	; (8004520 <MX_GPIO_Init+0x17c>)
 80043d8:	2101      	movs	r1, #1
 80043da:	430a      	orrs	r2, r1
 80043dc:	635a      	str	r2, [r3, #52]	; 0x34
 80043de:	4b50      	ldr	r3, [pc, #320]	; (8004520 <MX_GPIO_Init+0x17c>)
 80043e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043e2:	2201      	movs	r2, #1
 80043e4:	4013      	ands	r3, r2
 80043e6:	60fb      	str	r3, [r7, #12]
 80043e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80043ea:	4b4d      	ldr	r3, [pc, #308]	; (8004520 <MX_GPIO_Init+0x17c>)
 80043ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043ee:	4b4c      	ldr	r3, [pc, #304]	; (8004520 <MX_GPIO_Init+0x17c>)
 80043f0:	2102      	movs	r1, #2
 80043f2:	430a      	orrs	r2, r1
 80043f4:	635a      	str	r2, [r3, #52]	; 0x34
 80043f6:	4b4a      	ldr	r3, [pc, #296]	; (8004520 <MX_GPIO_Init+0x17c>)
 80043f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043fa:	2202      	movs	r2, #2
 80043fc:	4013      	ands	r3, r2
 80043fe:	60bb      	str	r3, [r7, #8]
 8004400:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004402:	4b47      	ldr	r3, [pc, #284]	; (8004520 <MX_GPIO_Init+0x17c>)
 8004404:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004406:	4b46      	ldr	r3, [pc, #280]	; (8004520 <MX_GPIO_Init+0x17c>)
 8004408:	2104      	movs	r1, #4
 800440a:	430a      	orrs	r2, r1
 800440c:	635a      	str	r2, [r3, #52]	; 0x34
 800440e:	4b44      	ldr	r3, [pc, #272]	; (8004520 <MX_GPIO_Init+0x17c>)
 8004410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004412:	2204      	movs	r2, #4
 8004414:	4013      	ands	r3, r2
 8004416:	607b      	str	r3, [r7, #4]
 8004418:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800441a:	4b41      	ldr	r3, [pc, #260]	; (8004520 <MX_GPIO_Init+0x17c>)
 800441c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800441e:	4b40      	ldr	r3, [pc, #256]	; (8004520 <MX_GPIO_Init+0x17c>)
 8004420:	2108      	movs	r1, #8
 8004422:	430a      	orrs	r2, r1
 8004424:	635a      	str	r2, [r3, #52]	; 0x34
 8004426:	4b3e      	ldr	r3, [pc, #248]	; (8004520 <MX_GPIO_Init+0x17c>)
 8004428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800442a:	2208      	movs	r2, #8
 800442c:	4013      	ands	r3, r2
 800442e:	603b      	str	r3, [r7, #0]
 8004430:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WD_GPIO_Port, WD_Pin, GPIO_PIN_RESET);
 8004432:	23a0      	movs	r3, #160	; 0xa0
 8004434:	05db      	lsls	r3, r3, #23
 8004436:	2200      	movs	r2, #0
 8004438:	2110      	movs	r1, #16
 800443a:	0018      	movs	r0, r3
 800443c:	f005 feb1 	bl	800a1a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUTPUT_1_Pin|LED_2_Pin|DCD_Pin|LED_1_Pin
 8004440:	4938      	ldr	r1, [pc, #224]	; (8004524 <MX_GPIO_Init+0x180>)
 8004442:	4b39      	ldr	r3, [pc, #228]	; (8004528 <MX_GPIO_Init+0x184>)
 8004444:	2200      	movs	r2, #0
 8004446:	0018      	movs	r0, r3
 8004448:	f005 feab 	bl	800a1a2 <HAL_GPIO_WritePin>
                          |PWR_KEY_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(G_CTRL_GPIO_Port, G_CTRL_Pin, GPIO_PIN_SET);
 800444c:	4b37      	ldr	r3, [pc, #220]	; (800452c <MX_GPIO_Init+0x188>)
 800444e:	2201      	movs	r2, #1
 8004450:	2102      	movs	r1, #2
 8004452:	0018      	movs	r0, r3
 8004454:	f005 fea5 	bl	800a1a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Q_CTRL_Pin|FLASH_CS_Pin, GPIO_PIN_RESET);
 8004458:	4b34      	ldr	r3, [pc, #208]	; (800452c <MX_GPIO_Init+0x188>)
 800445a:	2200      	movs	r2, #0
 800445c:	210c      	movs	r1, #12
 800445e:	0018      	movs	r0, r3
 8004460:	f005 fe9f 	bl	800a1a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : WD_Pin */
  GPIO_InitStruct.Pin = WD_Pin;
 8004464:	193b      	adds	r3, r7, r4
 8004466:	2210      	movs	r2, #16
 8004468:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800446a:	193b      	adds	r3, r7, r4
 800446c:	2201      	movs	r2, #1
 800446e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004470:	193b      	adds	r3, r7, r4
 8004472:	2200      	movs	r2, #0
 8004474:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004476:	193b      	adds	r3, r7, r4
 8004478:	2200      	movs	r2, #0
 800447a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(WD_GPIO_Port, &GPIO_InitStruct);
 800447c:	193a      	adds	r2, r7, r4
 800447e:	23a0      	movs	r3, #160	; 0xa0
 8004480:	05db      	lsls	r3, r3, #23
 8004482:	0011      	movs	r1, r2
 8004484:	0018      	movs	r0, r3
 8004486:	f005 fd0b 	bl	8009ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUTPUT_1_Pin LED_2_Pin DCD_Pin LED_1_Pin
                           PWR_KEY_Pin */
  GPIO_InitStruct.Pin = OUTPUT_1_Pin|LED_2_Pin|DCD_Pin|LED_1_Pin
 800448a:	193b      	adds	r3, r7, r4
 800448c:	4a25      	ldr	r2, [pc, #148]	; (8004524 <MX_GPIO_Init+0x180>)
 800448e:	601a      	str	r2, [r3, #0]
                          |PWR_KEY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004490:	193b      	adds	r3, r7, r4
 8004492:	2201      	movs	r2, #1
 8004494:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004496:	193b      	adds	r3, r7, r4
 8004498:	2200      	movs	r2, #0
 800449a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800449c:	193b      	adds	r3, r7, r4
 800449e:	2200      	movs	r2, #0
 80044a0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044a2:	193b      	adds	r3, r7, r4
 80044a4:	4a20      	ldr	r2, [pc, #128]	; (8004528 <MX_GPIO_Init+0x184>)
 80044a6:	0019      	movs	r1, r3
 80044a8:	0010      	movs	r0, r2
 80044aa:	f005 fcf9 	bl	8009ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DTR_Pin */
  GPIO_InitStruct.Pin = DTR_Pin;
 80044ae:	0021      	movs	r1, r4
 80044b0:	187b      	adds	r3, r7, r1
 80044b2:	2280      	movs	r2, #128	; 0x80
 80044b4:	00d2      	lsls	r2, r2, #3
 80044b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044b8:	000c      	movs	r4, r1
 80044ba:	193b      	adds	r3, r7, r4
 80044bc:	2200      	movs	r2, #0
 80044be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c0:	193b      	adds	r3, r7, r4
 80044c2:	2200      	movs	r2, #0
 80044c4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DTR_GPIO_Port, &GPIO_InitStruct);
 80044c6:	193b      	adds	r3, r7, r4
 80044c8:	4a17      	ldr	r2, [pc, #92]	; (8004528 <MX_GPIO_Init+0x184>)
 80044ca:	0019      	movs	r1, r3
 80044cc:	0010      	movs	r0, r2
 80044ce:	f005 fce7 	bl	8009ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : INPUT_1_Pin */
  GPIO_InitStruct.Pin = INPUT_1_Pin;
 80044d2:	193b      	adds	r3, r7, r4
 80044d4:	2280      	movs	r2, #128	; 0x80
 80044d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044d8:	193b      	adds	r3, r7, r4
 80044da:	2200      	movs	r2, #0
 80044dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80044de:	193b      	adds	r3, r7, r4
 80044e0:	2201      	movs	r2, #1
 80044e2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(INPUT_1_GPIO_Port, &GPIO_InitStruct);
 80044e4:	193b      	adds	r3, r7, r4
 80044e6:	4a12      	ldr	r2, [pc, #72]	; (8004530 <MX_GPIO_Init+0x18c>)
 80044e8:	0019      	movs	r1, r3
 80044ea:	0010      	movs	r0, r2
 80044ec:	f005 fcd8 	bl	8009ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : G_CTRL_Pin Q_CTRL_Pin FLASH_CS_Pin */
  GPIO_InitStruct.Pin = G_CTRL_Pin|Q_CTRL_Pin|FLASH_CS_Pin;
 80044f0:	0021      	movs	r1, r4
 80044f2:	187b      	adds	r3, r7, r1
 80044f4:	220e      	movs	r2, #14
 80044f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044f8:	187b      	adds	r3, r7, r1
 80044fa:	2201      	movs	r2, #1
 80044fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044fe:	187b      	adds	r3, r7, r1
 8004500:	2200      	movs	r2, #0
 8004502:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004504:	187b      	adds	r3, r7, r1
 8004506:	2200      	movs	r2, #0
 8004508:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800450a:	187b      	adds	r3, r7, r1
 800450c:	4a07      	ldr	r2, [pc, #28]	; (800452c <MX_GPIO_Init+0x188>)
 800450e:	0019      	movs	r1, r3
 8004510:	0010      	movs	r0, r2
 8004512:	f005 fcc5 	bl	8009ea0 <HAL_GPIO_Init>

}
 8004516:	46c0      	nop			; (mov r8, r8)
 8004518:	46bd      	mov	sp, r7
 800451a:	b00b      	add	sp, #44	; 0x2c
 800451c:	bd90      	pop	{r4, r7, pc}
 800451e:	46c0      	nop			; (mov r8, r8)
 8004520:	40021000 	.word	0x40021000
 8004524:	00003806 	.word	0x00003806
 8004528:	50000400 	.word	0x50000400
 800452c:	50000c00 	.word	0x50000c00
 8004530:	50000800 	.word	0x50000800

08004534 <HAL_UART_ErrorCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a12      	ldr	r2, [pc, #72]	; (800458c <HAL_UART_ErrorCallback+0x58>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d10c      	bne.n	8004560 <HAL_UART_ErrorCallback+0x2c>
		if(huart->ErrorCode != HAL_UART_ERROR_NONE){
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2290      	movs	r2, #144	; 0x90
 800454a:	589b      	ldr	r3, [r3, r2]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d007      	beq.n	8004560 <HAL_UART_ErrorCallback+0x2c>
			MX_USART2_UART_Init();
 8004550:	f7ff fe72 	bl	8004238 <MX_USART2_UART_Init>
			HAL_UART_Receive_IT(&GNSS_PORT, GNSS_BUFFER, 1);
 8004554:	490e      	ldr	r1, [pc, #56]	; (8004590 <HAL_UART_ErrorCallback+0x5c>)
 8004556:	4b0f      	ldr	r3, [pc, #60]	; (8004594 <HAL_UART_ErrorCallback+0x60>)
 8004558:	2201      	movs	r2, #1
 800455a:	0018      	movs	r0, r3
 800455c:	f008 fdac 	bl	800d0b8 <HAL_UART_Receive_IT>
		}
	}
	if (huart->Instance == USART1) {
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a0c      	ldr	r2, [pc, #48]	; (8004598 <HAL_UART_ErrorCallback+0x64>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d10c      	bne.n	8004584 <HAL_UART_ErrorCallback+0x50>
		if(huart->ErrorCode != HAL_UART_ERROR_NONE){
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2290      	movs	r2, #144	; 0x90
 800456e:	589b      	ldr	r3, [r3, r2]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d007      	beq.n	8004584 <HAL_UART_ErrorCallback+0x50>
			MX_USART1_UART_Init();
 8004574:	f7ff fe12 	bl	800419c <MX_USART1_UART_Init>
			HAL_UART_Receive_IT(&AT_PORT, AT_BUFFER, 1);
 8004578:	4908      	ldr	r1, [pc, #32]	; (800459c <HAL_UART_ErrorCallback+0x68>)
 800457a:	4b09      	ldr	r3, [pc, #36]	; (80045a0 <HAL_UART_ErrorCallback+0x6c>)
 800457c:	2201      	movs	r2, #1
 800457e:	0018      	movs	r0, r3
 8004580:	f008 fd9a 	bl	800d0b8 <HAL_UART_Receive_IT>
		}
	}
}
 8004584:	46c0      	nop			; (mov r8, r8)
 8004586:	46bd      	mov	sp, r7
 8004588:	b002      	add	sp, #8
 800458a:	bd80      	pop	{r7, pc}
 800458c:	40004400 	.word	0x40004400
 8004590:	20000744 	.word	0x20000744
 8004594:	2000055c 	.word	0x2000055c
 8004598:	40013800 	.word	0x40013800
 800459c:	20000740 	.word	0x20000740
 80045a0:	200004c8 	.word	0x200004c8

080045a4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80045a4:	b590      	push	{r4, r7, lr}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]

	//------------------------------------------------------------------
	if (huart == &GNSS_PORT) {
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	4b5a      	ldr	r3, [pc, #360]	; (8004718 <HAL_UART_RxCpltCallback+0x174>)
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d152      	bne.n	800465a <HAL_UART_RxCpltCallback+0xb6>
		// Incoming data from GNSS, receiving single byte
		HAL_UART_Receive_IT(&GNSS_PORT, GNSS_BUFFER, 1);
 80045b4:	4959      	ldr	r1, [pc, #356]	; (800471c <HAL_UART_RxCpltCallback+0x178>)
 80045b6:	4b58      	ldr	r3, [pc, #352]	; (8004718 <HAL_UART_RxCpltCallback+0x174>)
 80045b8:	2201      	movs	r2, #1
 80045ba:	0018      	movs	r0, r3
 80045bc:	f008 fd7c 	bl	800d0b8 <HAL_UART_Receive_IT>
		if (isGNSSTimStart == 0) {
 80045c0:	4b57      	ldr	r3, [pc, #348]	; (8004720 <HAL_UART_RxCpltCallback+0x17c>)
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d106      	bne.n	80045d6 <HAL_UART_RxCpltCallback+0x32>
			isGNSSTimStart = 1;
 80045c8:	4b55      	ldr	r3, [pc, #340]	; (8004720 <HAL_UART_RxCpltCallback+0x17c>)
 80045ca:	2201      	movs	r2, #1
 80045cc:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim17);
 80045ce:	4b55      	ldr	r3, [pc, #340]	; (8004724 <HAL_UART_RxCpltCallback+0x180>)
 80045d0:	0018      	movs	r0, r3
 80045d2:	f007 fccf 	bl	800bf74 <HAL_TIM_Base_Start_IT>
		}
		TIM17->CNT &= 0x0;
 80045d6:	4b54      	ldr	r3, [pc, #336]	; (8004728 <HAL_UART_RxCpltCallback+0x184>)
 80045d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045da:	4b53      	ldr	r3, [pc, #332]	; (8004728 <HAL_UART_RxCpltCallback+0x184>)
 80045dc:	2200      	movs	r2, #0
 80045de:	625a      	str	r2, [r3, #36]	; 0x24
		if(GNSS_BUFFER[0] != NULL){
 80045e0:	4b4e      	ldr	r3, [pc, #312]	; (800471c <HAL_UART_RxCpltCallback+0x178>)
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d038      	beq.n	800465a <HAL_UART_RxCpltCallback+0xb6>
			nmeaResponse[nmeaLC][nmeaCC] = GNSS_BUFFER[0];
 80045e8:	4b50      	ldr	r3, [pc, #320]	; (800472c <HAL_UART_RxCpltCallback+0x188>)
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	0019      	movs	r1, r3
 80045f0:	4b4f      	ldr	r3, [pc, #316]	; (8004730 <HAL_UART_RxCpltCallback+0x18c>)
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	0018      	movs	r0, r3
 80045f8:	4b48      	ldr	r3, [pc, #288]	; (800471c <HAL_UART_RxCpltCallback+0x178>)
 80045fa:	781c      	ldrb	r4, [r3, #0]
 80045fc:	4a4d      	ldr	r2, [pc, #308]	; (8004734 <HAL_UART_RxCpltCallback+0x190>)
 80045fe:	000b      	movs	r3, r1
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	185b      	adds	r3, r3, r1
 8004604:	0119      	lsls	r1, r3, #4
 8004606:	185b      	adds	r3, r3, r1
 8004608:	18d3      	adds	r3, r2, r3
 800460a:	1c22      	adds	r2, r4, #0
 800460c:	541a      	strb	r2, [r3, r0]
			if (GNSS_BUFFER[0] == '\n') {
 800460e:	4b43      	ldr	r3, [pc, #268]	; (800471c <HAL_UART_RxCpltCallback+0x178>)
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	2b0a      	cmp	r3, #10
 8004614:	d112      	bne.n	800463c <HAL_UART_RxCpltCallback+0x98>
				nmeaLC++;
 8004616:	4b45      	ldr	r3, [pc, #276]	; (800472c <HAL_UART_RxCpltCallback+0x188>)
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	b2db      	uxtb	r3, r3
 800461c:	3301      	adds	r3, #1
 800461e:	b2da      	uxtb	r2, r3
 8004620:	4b42      	ldr	r3, [pc, #264]	; (800472c <HAL_UART_RxCpltCallback+0x188>)
 8004622:	701a      	strb	r2, [r3, #0]
				if (nmeaLC > NMEA_MAX_LINES - 1) {
 8004624:	4b41      	ldr	r3, [pc, #260]	; (800472c <HAL_UART_RxCpltCallback+0x188>)
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b03      	cmp	r3, #3
 800462c:	d902      	bls.n	8004634 <HAL_UART_RxCpltCallback+0x90>
					nmeaLC = NMEA_MAX_LINES -1;
 800462e:	4b3f      	ldr	r3, [pc, #252]	; (800472c <HAL_UART_RxCpltCallback+0x188>)
 8004630:	2203      	movs	r2, #3
 8004632:	701a      	strb	r2, [r3, #0]
				}
				nmeaCC = 0;
 8004634:	4b3e      	ldr	r3, [pc, #248]	; (8004730 <HAL_UART_RxCpltCallback+0x18c>)
 8004636:	2200      	movs	r2, #0
 8004638:	701a      	strb	r2, [r3, #0]
 800463a:	e00e      	b.n	800465a <HAL_UART_RxCpltCallback+0xb6>
			} else {
				nmeaCC++;
 800463c:	4b3c      	ldr	r3, [pc, #240]	; (8004730 <HAL_UART_RxCpltCallback+0x18c>)
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	b2db      	uxtb	r3, r3
 8004642:	3301      	adds	r3, #1
 8004644:	b2da      	uxtb	r2, r3
 8004646:	4b3a      	ldr	r3, [pc, #232]	; (8004730 <HAL_UART_RxCpltCallback+0x18c>)
 8004648:	701a      	strb	r2, [r3, #0]
				if (nmeaCC > NMEA_MAX_CHARS - 1) {
 800464a:	4b39      	ldr	r3, [pc, #228]	; (8004730 <HAL_UART_RxCpltCallback+0x18c>)
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	b2db      	uxtb	r3, r3
 8004650:	2b54      	cmp	r3, #84	; 0x54
 8004652:	d902      	bls.n	800465a <HAL_UART_RxCpltCallback+0xb6>
					nmeaCC = 0;
 8004654:	4b36      	ldr	r3, [pc, #216]	; (8004730 <HAL_UART_RxCpltCallback+0x18c>)
 8004656:	2200      	movs	r2, #0
 8004658:	701a      	strb	r2, [r3, #0]

		}
	}
	//------------------------------------------------------------------

	if (huart == &AT_PORT) {
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	4b36      	ldr	r3, [pc, #216]	; (8004738 <HAL_UART_RxCpltCallback+0x194>)
 800465e:	429a      	cmp	r2, r3
 8004660:	d155      	bne.n	800470e <HAL_UART_RxCpltCallback+0x16a>
		recResponse = 1;
 8004662:	4b36      	ldr	r3, [pc, #216]	; (800473c <HAL_UART_RxCpltCallback+0x198>)
 8004664:	2201      	movs	r2, #1
 8004666:	701a      	strb	r2, [r3, #0]
		if (isStart == 0) {
 8004668:	4b35      	ldr	r3, [pc, #212]	; (8004740 <HAL_UART_RxCpltCallback+0x19c>)
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d10b      	bne.n	800468a <HAL_UART_RxCpltCallback+0xe6>
			isStart = 1;
 8004672:	4b33      	ldr	r3, [pc, #204]	; (8004740 <HAL_UART_RxCpltCallback+0x19c>)
 8004674:	2201      	movs	r2, #1
 8004676:	701a      	strb	r2, [r3, #0]
			FIX_TIMER_TRIGGER(&htim6);
 8004678:	4b32      	ldr	r3, [pc, #200]	; (8004744 <HAL_UART_RxCpltCallback+0x1a0>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2202      	movs	r2, #2
 800467e:	4252      	negs	r2, r2
 8004680:	611a      	str	r2, [r3, #16]
			HAL_TIM_Base_Start_IT(&htim6);
 8004682:	4b30      	ldr	r3, [pc, #192]	; (8004744 <HAL_UART_RxCpltCallback+0x1a0>)
 8004684:	0018      	movs	r0, r3
 8004686:	f007 fc75 	bl	800bf74 <HAL_TIM_Base_Start_IT>
		}
		TIM6->CNT &= 0x0;
 800468a:	4b2f      	ldr	r3, [pc, #188]	; (8004748 <HAL_UART_RxCpltCallback+0x1a4>)
 800468c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468e:	4b2e      	ldr	r3, [pc, #184]	; (8004748 <HAL_UART_RxCpltCallback+0x1a4>)
 8004690:	2200      	movs	r2, #0
 8004692:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_UART_Receive_IT(&AT_PORT, AT_BUFFER, 1);
 8004694:	492d      	ldr	r1, [pc, #180]	; (800474c <HAL_UART_RxCpltCallback+0x1a8>)
 8004696:	4b28      	ldr	r3, [pc, #160]	; (8004738 <HAL_UART_RxCpltCallback+0x194>)
 8004698:	2201      	movs	r2, #1
 800469a:	0018      	movs	r0, r3
 800469c:	f008 fd0c 	bl	800d0b8 <HAL_UART_Receive_IT>
		if (AT_BUFFER[0] == '\n') {
 80046a0:	4b2a      	ldr	r3, [pc, #168]	; (800474c <HAL_UART_RxCpltCallback+0x1a8>)
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	2b0a      	cmp	r3, #10
 80046a6:	d113      	bne.n	80046d0 <HAL_UART_RxCpltCallback+0x12c>
			if (lineCount > RESPONSE_MAX_LINE - 2) {
 80046a8:	4b29      	ldr	r3, [pc, #164]	; (8004750 <HAL_UART_RxCpltCallback+0x1ac>)
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b04      	cmp	r3, #4
 80046b0:	d903      	bls.n	80046ba <HAL_UART_RxCpltCallback+0x116>
				lineCount = 0;
 80046b2:	4b27      	ldr	r3, [pc, #156]	; (8004750 <HAL_UART_RxCpltCallback+0x1ac>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	701a      	strb	r2, [r3, #0]
 80046b8:	e006      	b.n	80046c8 <HAL_UART_RxCpltCallback+0x124>
			} else {
				lineCount++;
 80046ba:	4b25      	ldr	r3, [pc, #148]	; (8004750 <HAL_UART_RxCpltCallback+0x1ac>)
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	3301      	adds	r3, #1
 80046c2:	b2da      	uxtb	r2, r3
 80046c4:	4b22      	ldr	r3, [pc, #136]	; (8004750 <HAL_UART_RxCpltCallback+0x1ac>)
 80046c6:	701a      	strb	r2, [r3, #0]
			}
			charCount = 0;
 80046c8:	4b22      	ldr	r3, [pc, #136]	; (8004754 <HAL_UART_RxCpltCallback+0x1b0>)
 80046ca:	2200      	movs	r2, #0
 80046cc:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	//-----------------------------------------------------------------------------

}
 80046ce:	e01e      	b.n	800470e <HAL_UART_RxCpltCallback+0x16a>
			responseBuffer[lineCount][charCount] = AT_BUFFER[0];
 80046d0:	4b1f      	ldr	r3, [pc, #124]	; (8004750 <HAL_UART_RxCpltCallback+0x1ac>)
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	001c      	movs	r4, r3
 80046d8:	4b1e      	ldr	r3, [pc, #120]	; (8004754 <HAL_UART_RxCpltCallback+0x1b0>)
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	0019      	movs	r1, r3
 80046e0:	4b1a      	ldr	r3, [pc, #104]	; (800474c <HAL_UART_RxCpltCallback+0x1a8>)
 80046e2:	7818      	ldrb	r0, [r3, #0]
 80046e4:	4a1c      	ldr	r2, [pc, #112]	; (8004758 <HAL_UART_RxCpltCallback+0x1b4>)
 80046e6:	2332      	movs	r3, #50	; 0x32
 80046e8:	4363      	muls	r3, r4
 80046ea:	18d3      	adds	r3, r2, r3
 80046ec:	1c02      	adds	r2, r0, #0
 80046ee:	545a      	strb	r2, [r3, r1]
			charCount++;
 80046f0:	4b18      	ldr	r3, [pc, #96]	; (8004754 <HAL_UART_RxCpltCallback+0x1b0>)
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	3301      	adds	r3, #1
 80046f8:	b2da      	uxtb	r2, r3
 80046fa:	4b16      	ldr	r3, [pc, #88]	; (8004754 <HAL_UART_RxCpltCallback+0x1b0>)
 80046fc:	701a      	strb	r2, [r3, #0]
			if (lineCount > RESPONSE_MAX_CHAR - 2) {
 80046fe:	4b14      	ldr	r3, [pc, #80]	; (8004750 <HAL_UART_RxCpltCallback+0x1ac>)
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	b2db      	uxtb	r3, r3
 8004704:	2b30      	cmp	r3, #48	; 0x30
 8004706:	d902      	bls.n	800470e <HAL_UART_RxCpltCallback+0x16a>
				charCount = 0;
 8004708:	4b12      	ldr	r3, [pc, #72]	; (8004754 <HAL_UART_RxCpltCallback+0x1b0>)
 800470a:	2200      	movs	r2, #0
 800470c:	701a      	strb	r2, [r3, #0]
}
 800470e:	46c0      	nop			; (mov r8, r8)
 8004710:	46bd      	mov	sp, r7
 8004712:	b003      	add	sp, #12
 8004714:	bd90      	pop	{r4, r7, pc}
 8004716:	46c0      	nop			; (mov r8, r8)
 8004718:	2000055c 	.word	0x2000055c
 800471c:	20000744 	.word	0x20000744
 8004720:	2000087e 	.word	0x2000087e
 8004724:	2000047c 	.word	0x2000047c
 8004728:	40014800 	.word	0x40014800
 800472c:	20000876 	.word	0x20000876
 8004730:	20000877 	.word	0x20000877
 8004734:	200008d8 	.word	0x200008d8
 8004738:	200004c8 	.word	0x200004c8
 800473c:	20000881 	.word	0x20000881
 8004740:	20000878 	.word	0x20000878
 8004744:	20000398 	.word	0x20000398
 8004748:	40001000 	.word	0x40001000
 800474c:	20000740 	.word	0x20000740
 8004750:	20000874 	.word	0x20000874
 8004754:	20000875 	.word	0x20000875
 8004758:	20000748 	.word	0x20000748

0800475c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800475c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800475e:	46c6      	mov	lr, r8
 8004760:	b500      	push	{lr}
 8004762:	b0d8      	sub	sp, #352	; 0x160
 8004764:	af00      	add	r7, sp, #0
 8004766:	61f8      	str	r0, [r7, #28]
	if (htim == &htim16) {
 8004768:	69fa      	ldr	r2, [r7, #28]
 800476a:	4bdf      	ldr	r3, [pc, #892]	; (8004ae8 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 800476c:	429a      	cmp	r2, r3
 800476e:	d118      	bne.n	80047a2 <HAL_TIM_PeriodElapsedCallback+0x46>
			//tcp open checking timer
		if(isTcpOpen == 0){
 8004770:	4bde      	ldr	r3, [pc, #888]	; (8004aec <HAL_TIM_PeriodElapsedCallback+0x390>)
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d107      	bne.n	800478a <HAL_TIM_PeriodElapsedCallback+0x2e>
			tcpOpenElapsedTime++;
 800477a:	4bdd      	ldr	r3, [pc, #884]	; (8004af0 <HAL_TIM_PeriodElapsedCallback+0x394>)
 800477c:	881b      	ldrh	r3, [r3, #0]
 800477e:	b29b      	uxth	r3, r3
 8004780:	3301      	adds	r3, #1
 8004782:	b29a      	uxth	r2, r3
 8004784:	4bda      	ldr	r3, [pc, #872]	; (8004af0 <HAL_TIM_PeriodElapsedCallback+0x394>)
 8004786:	801a      	strh	r2, [r3, #0]
 8004788:	e002      	b.n	8004790 <HAL_TIM_PeriodElapsedCallback+0x34>
		}
		else{
			tcpOpenElapsedTime=0;
 800478a:	4bd9      	ldr	r3, [pc, #868]	; (8004af0 <HAL_TIM_PeriodElapsedCallback+0x394>)
 800478c:	2200      	movs	r2, #0
 800478e:	801a      	strh	r2, [r3, #0]
		}
		if(tcpOpenElapsedTime > 1200){
 8004790:	4bd7      	ldr	r3, [pc, #860]	; (8004af0 <HAL_TIM_PeriodElapsedCallback+0x394>)
 8004792:	881b      	ldrh	r3, [r3, #0]
 8004794:	b29a      	uxth	r2, r3
 8004796:	2396      	movs	r3, #150	; 0x96
 8004798:	00db      	lsls	r3, r3, #3
 800479a:	429a      	cmp	r2, r3
 800479c:	d901      	bls.n	80047a2 <HAL_TIM_PeriodElapsedCallback+0x46>
			//more than 20 minutes
			rebootsystem();
 800479e:	f001 fedd 	bl	800655c <rebootsystem>
		}

	}
	if (htim == &htim14) {
 80047a2:	69fa      	ldr	r2, [r7, #28]
 80047a4:	4bd3      	ldr	r3, [pc, #844]	; (8004af4 <HAL_TIM_PeriodElapsedCallback+0x398>)
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d14c      	bne.n	8004844 <HAL_TIM_PeriodElapsedCallback+0xe8>
		//watchdog timer

		//check acc input for 2 seconds, and raise flag if its on otherwise off.
		if(HAL_GPIO_ReadPin(INPUT_1_GPIO_Port, INPUT_1_Pin)){
 80047aa:	4bd3      	ldr	r3, [pc, #844]	; (8004af8 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 80047ac:	2180      	movs	r1, #128	; 0x80
 80047ae:	0018      	movs	r0, r3
 80047b0:	f005 fcda 	bl	800a168 <HAL_GPIO_ReadPin>
 80047b4:	1e03      	subs	r3, r0, #0
 80047b6:	d015      	beq.n	80047e4 <HAL_TIM_PeriodElapsedCallback+0x88>
			accInputHigh++;
 80047b8:	4bd0      	ldr	r3, [pc, #832]	; (8004afc <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	3301      	adds	r3, #1
 80047c0:	b2da      	uxtb	r2, r3
 80047c2:	4bce      	ldr	r3, [pc, #824]	; (8004afc <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 80047c4:	701a      	strb	r2, [r3, #0]
			accInputLow=0;
 80047c6:	4bce      	ldr	r3, [pc, #824]	; (8004b00 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	701a      	strb	r2, [r3, #0]
			if(accInputHigh > MAX_INPUT_COUNTS){
 80047cc:	4bcb      	ldr	r3, [pc, #812]	; (8004afc <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d91b      	bls.n	800480e <HAL_TIM_PeriodElapsedCallback+0xb2>
				accInputHigh =0;
 80047d6:	4bc9      	ldr	r3, [pc, #804]	; (8004afc <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 80047d8:	2200      	movs	r2, #0
 80047da:	701a      	strb	r2, [r3, #0]
				accInputState = 1;
 80047dc:	4bc9      	ldr	r3, [pc, #804]	; (8004b04 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 80047de:	2201      	movs	r2, #1
 80047e0:	701a      	strb	r2, [r3, #0]
 80047e2:	e014      	b.n	800480e <HAL_TIM_PeriodElapsedCallback+0xb2>
				}
			}
		else{
			accInputLow++;
 80047e4:	4bc6      	ldr	r3, [pc, #792]	; (8004b00 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	3301      	adds	r3, #1
 80047ec:	b2da      	uxtb	r2, r3
 80047ee:	4bc4      	ldr	r3, [pc, #784]	; (8004b00 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 80047f0:	701a      	strb	r2, [r3, #0]
			accInputHigh=0;
 80047f2:	4bc2      	ldr	r3, [pc, #776]	; (8004afc <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 80047f4:	2200      	movs	r2, #0
 80047f6:	701a      	strb	r2, [r3, #0]
			if(accInputLow > MAX_INPUT_COUNTS){
 80047f8:	4bc1      	ldr	r3, [pc, #772]	; (8004b00 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d905      	bls.n	800480e <HAL_TIM_PeriodElapsedCallback+0xb2>
				accInputLow =0;
 8004802:	4bbf      	ldr	r3, [pc, #764]	; (8004b00 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8004804:	2200      	movs	r2, #0
 8004806:	701a      	strb	r2, [r3, #0]
				accInputState = 0;
 8004808:	4bbe      	ldr	r3, [pc, #760]	; (8004b04 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 800480a:	2200      	movs	r2, #0
 800480c:	701a      	strb	r2, [r3, #0]
			}
		}
		if(accInputState != accInputStatex){
 800480e:	4bbd      	ldr	r3, [pc, #756]	; (8004b04 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	b2da      	uxtb	r2, r3
 8004814:	4bbc      	ldr	r3, [pc, #752]	; (8004b08 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	b2db      	uxtb	r3, r3
 800481a:	429a      	cmp	r2, r3
 800481c:	d007      	beq.n	800482e <HAL_TIM_PeriodElapsedCallback+0xd2>
			isAlarm = 1;
 800481e:	4bbb      	ldr	r3, [pc, #748]	; (8004b0c <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8004820:	2201      	movs	r2, #1
 8004822:	701a      	strb	r2, [r3, #0]
			accInputStatex=accInputState;
 8004824:	4bb7      	ldr	r3, [pc, #732]	; (8004b04 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	b2da      	uxtb	r2, r3
 800482a:	4bb7      	ldr	r3, [pc, #732]	; (8004b08 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 800482c:	701a      	strb	r2, [r3, #0]
		}
		//---------------------------------------------------------------------------

		HAL_GPIO_TogglePin(WD_GPIO_Port, WD_Pin);
 800482e:	23a0      	movs	r3, #160	; 0xa0
 8004830:	05db      	lsls	r3, r3, #23
 8004832:	2110      	movs	r1, #16
 8004834:	0018      	movs	r0, r3
 8004836:	f005 fcd1 	bl	800a1dc <HAL_GPIO_TogglePin>
		hangCounter++;
 800483a:	4bb5      	ldr	r3, [pc, #724]	; (8004b10 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	1c5a      	adds	r2, r3, #1
 8004840:	4bb3      	ldr	r3, [pc, #716]	; (8004b10 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8004842:	601a      	str	r2, [r3, #0]
		if(hangCounter>25){
			//if system hangs for more than 10 seconds.
//			NVIC_SystemReset();
		}
	}
	if (htim == &htim6) {
 8004844:	69fa      	ldr	r2, [r7, #28]
 8004846:	4bb3      	ldr	r3, [pc, #716]	; (8004b14 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 8004848:	429a      	cmp	r2, r3
 800484a:	d001      	beq.n	8004850 <HAL_TIM_PeriodElapsedCallback+0xf4>
 800484c:	f001 fd23 	bl	8006296 <HAL_TIM_PeriodElapsedCallback+0x1b3a>
//		HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
//		HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 1);
		// AT PORT TIMER
		char tResponse = '0';
 8004850:	2348      	movs	r3, #72	; 0x48
 8004852:	33ff      	adds	r3, #255	; 0xff
 8004854:	2018      	movs	r0, #24
 8004856:	181b      	adds	r3, r3, r0
 8004858:	19db      	adds	r3, r3, r7
 800485a:	2230      	movs	r2, #48	; 0x30
 800485c:	701a      	strb	r2, [r3, #0]
		//todo
		//---- server response check
		if (responseBuffer[0][0] == 0x78 && responseBuffer[0][1] == 0x78) {
 800485e:	4bae      	ldr	r3, [pc, #696]	; (8004b18 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	2b78      	cmp	r3, #120	; 0x78
 8004864:	d000      	beq.n	8004868 <HAL_TIM_PeriodElapsedCallback+0x10c>
 8004866:	e0cf      	b.n	8004a08 <HAL_TIM_PeriodElapsedCallback+0x2ac>
 8004868:	4bab      	ldr	r3, [pc, #684]	; (8004b18 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 800486a:	785b      	ldrb	r3, [r3, #1]
 800486c:	2b78      	cmp	r3, #120	; 0x78
 800486e:	d000      	beq.n	8004872 <HAL_TIM_PeriodElapsedCallback+0x116>
 8004870:	e0ca      	b.n	8004a08 <HAL_TIM_PeriodElapsedCallback+0x2ac>
 8004872:	466b      	mov	r3, sp
 8004874:	4698      	mov	r8, r3
			// HAL_UART_Transmit(&huart4, "Res rec server",
			// sizeof("Res rec server"), 100);
			uint8_t c = responseBuffer[0][2];
 8004876:	2108      	movs	r1, #8
 8004878:	31ff      	adds	r1, #255	; 0xff
 800487a:	180b      	adds	r3, r1, r0
 800487c:	19db      	adds	r3, r3, r7
 800487e:	4aa6      	ldr	r2, [pc, #664]	; (8004b18 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8004880:	7892      	ldrb	r2, [r2, #2]
 8004882:	701a      	strb	r2, [r3, #0]
			uint8_t tempCrcData[c - 1];
 8004884:	180b      	adds	r3, r1, r0
 8004886:	19db      	adds	r3, r3, r7
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	3b01      	subs	r3, #1
 800488c:	1e5a      	subs	r2, r3, #1
 800488e:	218c      	movs	r1, #140	; 0x8c
 8004890:	0049      	lsls	r1, r1, #1
 8004892:	1879      	adds	r1, r7, r1
 8004894:	600a      	str	r2, [r1, #0]
 8004896:	001a      	movs	r2, r3
 8004898:	60ba      	str	r2, [r7, #8]
 800489a:	2200      	movs	r2, #0
 800489c:	60fa      	str	r2, [r7, #12]
 800489e:	68b8      	ldr	r0, [r7, #8]
 80048a0:	68f9      	ldr	r1, [r7, #12]
 80048a2:	0002      	movs	r2, r0
 80048a4:	0f52      	lsrs	r2, r2, #29
 80048a6:	000e      	movs	r6, r1
 80048a8:	00f6      	lsls	r6, r6, #3
 80048aa:	617e      	str	r6, [r7, #20]
 80048ac:	697e      	ldr	r6, [r7, #20]
 80048ae:	4316      	orrs	r6, r2
 80048b0:	617e      	str	r6, [r7, #20]
 80048b2:	0002      	movs	r2, r0
 80048b4:	00d2      	lsls	r2, r2, #3
 80048b6:	613a      	str	r2, [r7, #16]
 80048b8:	001a      	movs	r2, r3
 80048ba:	603a      	str	r2, [r7, #0]
 80048bc:	2200      	movs	r2, #0
 80048be:	607a      	str	r2, [r7, #4]
 80048c0:	6838      	ldr	r0, [r7, #0]
 80048c2:	6879      	ldr	r1, [r7, #4]
 80048c4:	0002      	movs	r2, r0
 80048c6:	0f52      	lsrs	r2, r2, #29
 80048c8:	000e      	movs	r6, r1
 80048ca:	00f5      	lsls	r5, r6, #3
 80048cc:	4315      	orrs	r5, r2
 80048ce:	0002      	movs	r2, r0
 80048d0:	00d4      	lsls	r4, r2, #3
 80048d2:	001a      	movs	r2, r3
 80048d4:	3207      	adds	r2, #7
 80048d6:	08d2      	lsrs	r2, r2, #3
 80048d8:	00d2      	lsls	r2, r2, #3
 80048da:	4669      	mov	r1, sp
 80048dc:	1a8a      	subs	r2, r1, r2
 80048de:	4695      	mov	sp, r2
 80048e0:	466a      	mov	r2, sp
 80048e2:	3200      	adds	r2, #0
 80048e4:	21fc      	movs	r1, #252	; 0xfc
 80048e6:	2018      	movs	r0, #24
 80048e8:	1809      	adds	r1, r1, r0
 80048ea:	19c9      	adds	r1, r1, r7
 80048ec:	600a      	str	r2, [r1, #0]
			uint16_t crcResult = 0;
 80048ee:	22fa      	movs	r2, #250	; 0xfa
 80048f0:	1812      	adds	r2, r2, r0
 80048f2:	19d2      	adds	r2, r2, r7
 80048f4:	2100      	movs	r1, #0
 80048f6:	8011      	strh	r1, [r2, #0]
			for (uint8_t i = 2; i < c + 1; i++) {
 80048f8:	22a3      	movs	r2, #163	; 0xa3
 80048fa:	0052      	lsls	r2, r2, #1
 80048fc:	1812      	adds	r2, r2, r0
 80048fe:	19d2      	adds	r2, r2, r7
 8004900:	2102      	movs	r1, #2
 8004902:	7011      	strb	r1, [r2, #0]
 8004904:	e017      	b.n	8004936 <HAL_TIM_PeriodElapsedCallback+0x1da>
				tempCrcData[i - 2] = responseBuffer[0][i];
 8004906:	24a3      	movs	r4, #163	; 0xa3
 8004908:	0064      	lsls	r4, r4, #1
 800490a:	2518      	movs	r5, #24
 800490c:	1962      	adds	r2, r4, r5
 800490e:	19d2      	adds	r2, r2, r7
 8004910:	7811      	ldrb	r1, [r2, #0]
 8004912:	1962      	adds	r2, r4, r5
 8004914:	19d2      	adds	r2, r2, r7
 8004916:	7812      	ldrb	r2, [r2, #0]
 8004918:	3a02      	subs	r2, #2
 800491a:	487f      	ldr	r0, [pc, #508]	; (8004b18 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 800491c:	5c40      	ldrb	r0, [r0, r1]
 800491e:	21fc      	movs	r1, #252	; 0xfc
 8004920:	1949      	adds	r1, r1, r5
 8004922:	19c9      	adds	r1, r1, r7
 8004924:	6809      	ldr	r1, [r1, #0]
 8004926:	5488      	strb	r0, [r1, r2]
			for (uint8_t i = 2; i < c + 1; i++) {
 8004928:	1962      	adds	r2, r4, r5
 800492a:	19d2      	adds	r2, r2, r7
 800492c:	7811      	ldrb	r1, [r2, #0]
 800492e:	1962      	adds	r2, r4, r5
 8004930:	19d2      	adds	r2, r2, r7
 8004932:	3101      	adds	r1, #1
 8004934:	7011      	strb	r1, [r2, #0]
 8004936:	2508      	movs	r5, #8
 8004938:	35ff      	adds	r5, #255	; 0xff
 800493a:	2018      	movs	r0, #24
 800493c:	182a      	adds	r2, r5, r0
 800493e:	19d1      	adds	r1, r2, r7
 8004940:	22a3      	movs	r2, #163	; 0xa3
 8004942:	0052      	lsls	r2, r2, #1
 8004944:	1812      	adds	r2, r2, r0
 8004946:	19d2      	adds	r2, r2, r7
 8004948:	7809      	ldrb	r1, [r1, #0]
 800494a:	7812      	ldrb	r2, [r2, #0]
 800494c:	4291      	cmp	r1, r2
 800494e:	d2da      	bcs.n	8004906 <HAL_TIM_PeriodElapsedCallback+0x1aa>
			}
			uint8_t *tempPtr = tempCrcData;
 8004950:	22fc      	movs	r2, #252	; 0xfc
 8004952:	1812      	adds	r2, r2, r0
 8004954:	19d2      	adds	r2, r2, r7
 8004956:	6812      	ldr	r2, [r2, #0]
 8004958:	21f4      	movs	r1, #244	; 0xf4
 800495a:	0004      	movs	r4, r0
 800495c:	1808      	adds	r0, r1, r0
 800495e:	19c0      	adds	r0, r0, r7
 8004960:	6002      	str	r2, [r0, #0]
			crcResult = GetCrc16(tempPtr,
 8004962:	26fa      	movs	r6, #250	; 0xfa
 8004964:	0020      	movs	r0, r4
 8004966:	1832      	adds	r2, r6, r0
 8004968:	19d4      	adds	r4, r2, r7
 800496a:	180a      	adds	r2, r1, r0
 800496c:	19d2      	adds	r2, r2, r7
 800496e:	6812      	ldr	r2, [r2, #0]
 8004970:	0019      	movs	r1, r3
 8004972:	0010      	movs	r0, r2
 8004974:	f002 f95c 	bl	8006c30 <GetCrc16>
 8004978:	0003      	movs	r3, r0
 800497a:	8023      	strh	r3, [r4, #0]
					sizeof(tempCrcData) / sizeof(tempCrcData[0]));
			uint16_t checker = responseBuffer[0][c + 1];
 800497c:	2418      	movs	r4, #24
 800497e:	192b      	adds	r3, r5, r4
 8004980:	19db      	adds	r3, r3, r7
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	3301      	adds	r3, #1
 8004986:	4a64      	ldr	r2, [pc, #400]	; (8004b18 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8004988:	5cd2      	ldrb	r2, [r2, r3]
 800498a:	20f2      	movs	r0, #242	; 0xf2
 800498c:	1903      	adds	r3, r0, r4
 800498e:	19db      	adds	r3, r3, r7
 8004990:	801a      	strh	r2, [r3, #0]
			checker = checker << 8 | responseBuffer[0][c + 2];
 8004992:	1903      	adds	r3, r0, r4
 8004994:	19db      	adds	r3, r3, r7
 8004996:	881b      	ldrh	r3, [r3, #0]
 8004998:	021b      	lsls	r3, r3, #8
 800499a:	b21a      	sxth	r2, r3
 800499c:	192b      	adds	r3, r5, r4
 800499e:	19db      	adds	r3, r3, r7
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	3302      	adds	r3, #2
 80049a4:	495c      	ldr	r1, [pc, #368]	; (8004b18 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 80049a6:	5ccb      	ldrb	r3, [r1, r3]
 80049a8:	b21b      	sxth	r3, r3
 80049aa:	4313      	orrs	r3, r2
 80049ac:	b21a      	sxth	r2, r3
 80049ae:	1903      	adds	r3, r0, r4
 80049b0:	19db      	adds	r3, r3, r7
 80049b2:	801a      	strh	r2, [r3, #0]
			if (crcResult == checker) {
 80049b4:	1933      	adds	r3, r6, r4
 80049b6:	19da      	adds	r2, r3, r7
 80049b8:	1903      	adds	r3, r0, r4
 80049ba:	19db      	adds	r3, r3, r7
 80049bc:	8812      	ldrh	r2, [r2, #0]
 80049be:	881b      	ldrh	r3, [r3, #0]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d10a      	bne.n	80049da <HAL_TIM_PeriodElapsedCallback+0x27e>
				if (responseBuffer[0][3] == 1 || responseBuffer[0][3] == 0x13) {
 80049c4:	4b54      	ldr	r3, [pc, #336]	; (8004b18 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 80049c6:	78db      	ldrb	r3, [r3, #3]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d003      	beq.n	80049d4 <HAL_TIM_PeriodElapsedCallback+0x278>
 80049cc:	4b52      	ldr	r3, [pc, #328]	; (8004b18 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 80049ce:	78db      	ldrb	r3, [r3, #3]
 80049d0:	2b13      	cmp	r3, #19
 80049d2:	d102      	bne.n	80049da <HAL_TIM_PeriodElapsedCallback+0x27e>
					isLoggedIn = 1;
 80049d4:	4b51      	ldr	r3, [pc, #324]	; (8004b1c <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 80049d6:	2201      	movs	r2, #1
 80049d8:	701a      	strb	r2, [r3, #0]
						// HAL_UART_Transmit(&huart4, "HB rec", sizeof("HB rec"),
						// 100);
					}
				}
			}
			HAL_TIM_Base_Stop_IT(&htim6);
 80049da:	4b4e      	ldr	r3, [pc, #312]	; (8004b14 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 80049dc:	0018      	movs	r0, r3
 80049de:	f007 fb1f 	bl	800c020 <HAL_TIM_Base_Stop_IT>
			memset(responseBuffer, 0, sizeof(responseBuffer));
 80049e2:	2396      	movs	r3, #150	; 0x96
 80049e4:	005a      	lsls	r2, r3, #1
 80049e6:	4b4c      	ldr	r3, [pc, #304]	; (8004b18 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 80049e8:	2100      	movs	r1, #0
 80049ea:	0018      	movs	r0, r3
 80049ec:	f00a fa23 	bl	800ee36 <memset>
			lineCount = 0;
 80049f0:	4b4b      	ldr	r3, [pc, #300]	; (8004b20 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 80049f2:	2200      	movs	r2, #0
 80049f4:	701a      	strb	r2, [r3, #0]
			charCount = 0;
 80049f6:	4b4b      	ldr	r3, [pc, #300]	; (8004b24 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 80049f8:	2200      	movs	r2, #0
 80049fa:	701a      	strb	r2, [r3, #0]
			isStart = 0;
 80049fc:	4b4a      	ldr	r3, [pc, #296]	; (8004b28 <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 80049fe:	2200      	movs	r2, #0
 8004a00:	701a      	strb	r2, [r3, #0]
 8004a02:	46c5      	mov	sp, r8
		if (responseBuffer[0][0] == 0x78 && responseBuffer[0][1] == 0x78) {
 8004a04:	f000 fcd6 	bl	80053b4 <HAL_TIM_PeriodElapsedCallback+0xc58>
		} else {
			uint8_t tLine = 99;
 8004a08:	2346      	movs	r3, #70	; 0x46
 8004a0a:	33ff      	adds	r3, #255	; 0xff
 8004a0c:	2118      	movs	r1, #24
 8004a0e:	185b      	adds	r3, r3, r1
 8004a10:	19db      	adds	r3, r3, r7
 8004a12:	2263      	movs	r2, #99	; 0x63
 8004a14:	701a      	strb	r2, [r3, #0]
			char *ptr;
			char *ptr2;
			char *ptr3;
			uint8_t tIndex;
			//message handling here------------------------------------------
			for (uint8_t i = 0; i <= RESPONSE_MAX_LINE; i++) {
 8004a16:	2338      	movs	r3, #56	; 0x38
 8004a18:	33ff      	adds	r3, #255	; 0xff
 8004a1a:	185b      	adds	r3, r3, r1
 8004a1c:	19db      	adds	r3, r3, r7
 8004a1e:	2200      	movs	r2, #0
 8004a20:	701a      	strb	r2, [r3, #0]
 8004a22:	e093      	b.n	8004b4c <HAL_TIM_PeriodElapsedCallback+0x3f0>
				ptr = strstr(responseBuffer[i], "+CMT:");
 8004a24:	2438      	movs	r4, #56	; 0x38
 8004a26:	34ff      	adds	r4, #255	; 0xff
 8004a28:	2618      	movs	r6, #24
 8004a2a:	19a3      	adds	r3, r4, r6
 8004a2c:	19db      	adds	r3, r3, r7
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	2232      	movs	r2, #50	; 0x32
 8004a32:	435a      	muls	r2, r3
 8004a34:	4b38      	ldr	r3, [pc, #224]	; (8004b18 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8004a36:	18d3      	adds	r3, r2, r3
 8004a38:	4a3c      	ldr	r2, [pc, #240]	; (8004b2c <HAL_TIM_PeriodElapsedCallback+0x3d0>)
 8004a3a:	0011      	movs	r1, r2
 8004a3c:	0018      	movs	r0, r3
 8004a3e:	f00a fa52 	bl	800eee6 <strstr>
 8004a42:	0003      	movs	r3, r0
 8004a44:	25a0      	movs	r5, #160	; 0xa0
 8004a46:	006d      	lsls	r5, r5, #1
 8004a48:	19aa      	adds	r2, r5, r6
 8004a4a:	19d2      	adds	r2, r2, r7
 8004a4c:	6013      	str	r3, [r2, #0]
				ptr2 = strstr(responseBuffer[i], "SMS Ready");
 8004a4e:	19a3      	adds	r3, r4, r6
 8004a50:	19db      	adds	r3, r3, r7
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	2232      	movs	r2, #50	; 0x32
 8004a56:	435a      	muls	r2, r3
 8004a58:	4b2f      	ldr	r3, [pc, #188]	; (8004b18 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8004a5a:	18d3      	adds	r3, r2, r3
 8004a5c:	4a34      	ldr	r2, [pc, #208]	; (8004b30 <HAL_TIM_PeriodElapsedCallback+0x3d4>)
 8004a5e:	0011      	movs	r1, r2
 8004a60:	0018      	movs	r0, r3
 8004a62:	f00a fa40 	bl	800eee6 <strstr>
 8004a66:	0003      	movs	r3, r0
 8004a68:	229e      	movs	r2, #158	; 0x9e
 8004a6a:	0052      	lsls	r2, r2, #1
 8004a6c:	1992      	adds	r2, r2, r6
 8004a6e:	19d2      	adds	r2, r2, r7
 8004a70:	6013      	str	r3, [r2, #0]
				ptr3 = strstr(responseBuffer[i], "Call Ready");
 8004a72:	19a3      	adds	r3, r4, r6
 8004a74:	19db      	adds	r3, r3, r7
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	2232      	movs	r2, #50	; 0x32
 8004a7a:	435a      	muls	r2, r3
 8004a7c:	4b26      	ldr	r3, [pc, #152]	; (8004b18 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8004a7e:	18d3      	adds	r3, r2, r3
 8004a80:	4a2c      	ldr	r2, [pc, #176]	; (8004b34 <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 8004a82:	0011      	movs	r1, r2
 8004a84:	0018      	movs	r0, r3
 8004a86:	f00a fa2e 	bl	800eee6 <strstr>
 8004a8a:	0003      	movs	r3, r0
 8004a8c:	229c      	movs	r2, #156	; 0x9c
 8004a8e:	0052      	lsls	r2, r2, #1
 8004a90:	1992      	adds	r2, r2, r6
 8004a92:	19d2      	adds	r2, r2, r7
 8004a94:	6013      	str	r3, [r2, #0]
				if (ptr != NULL) {
 8004a96:	19ab      	adds	r3, r5, r6
 8004a98:	19db      	adds	r3, r3, r7
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d008      	beq.n	8004ab2 <HAL_TIM_PeriodElapsedCallback+0x356>
					tLine = i;
 8004aa0:	2346      	movs	r3, #70	; 0x46
 8004aa2:	33ff      	adds	r3, #255	; 0xff
 8004aa4:	199b      	adds	r3, r3, r6
 8004aa6:	19db      	adds	r3, r3, r7
 8004aa8:	19a2      	adds	r2, r4, r6
 8004aaa:	19d2      	adds	r2, r2, r7
 8004aac:	7812      	ldrb	r2, [r2, #0]
 8004aae:	701a      	strb	r2, [r3, #0]
					break;
 8004ab0:	e055      	b.n	8004b5e <HAL_TIM_PeriodElapsedCallback+0x402>
				}else if (ptr2 != NULL || ptr3 != NULL) {
 8004ab2:	239e      	movs	r3, #158	; 0x9e
 8004ab4:	005b      	lsls	r3, r3, #1
 8004ab6:	2218      	movs	r2, #24
 8004ab8:	189b      	adds	r3, r3, r2
 8004aba:	19db      	adds	r3, r3, r7
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d106      	bne.n	8004ad0 <HAL_TIM_PeriodElapsedCallback+0x374>
 8004ac2:	239c      	movs	r3, #156	; 0x9c
 8004ac4:	005b      	lsls	r3, r3, #1
 8004ac6:	189b      	adds	r3, r3, r2
 8004ac8:	19db      	adds	r3, r3, r7
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d033      	beq.n	8004b38 <HAL_TIM_PeriodElapsedCallback+0x3dc>
					tLine = i;
 8004ad0:	2346      	movs	r3, #70	; 0x46
 8004ad2:	33ff      	adds	r3, #255	; 0xff
 8004ad4:	2118      	movs	r1, #24
 8004ad6:	185b      	adds	r3, r3, r1
 8004ad8:	19db      	adds	r3, r3, r7
 8004ada:	2238      	movs	r2, #56	; 0x38
 8004adc:	32ff      	adds	r2, #255	; 0xff
 8004ade:	1852      	adds	r2, r2, r1
 8004ae0:	19d2      	adds	r2, r2, r7
 8004ae2:	7812      	ldrb	r2, [r2, #0]
 8004ae4:	701a      	strb	r2, [r3, #0]
					break;
 8004ae6:	e03a      	b.n	8004b5e <HAL_TIM_PeriodElapsedCallback+0x402>
 8004ae8:	20000430 	.word	0x20000430
 8004aec:	20000a2c 	.word	0x20000a2c
 8004af0:	20000720 	.word	0x20000720
 8004af4:	200003e4 	.word	0x200003e4
 8004af8:	50000800 	.word	0x50000800
 8004afc:	20000728 	.word	0x20000728
 8004b00:	20000729 	.word	0x20000729
 8004b04:	20000726 	.word	0x20000726
 8004b08:	20000727 	.word	0x20000727
 8004b0c:	20000725 	.word	0x20000725
 8004b10:	20000730 	.word	0x20000730
 8004b14:	20000398 	.word	0x20000398
 8004b18:	20000748 	.word	0x20000748
 8004b1c:	20000a30 	.word	0x20000a30
 8004b20:	20000874 	.word	0x20000874
 8004b24:	20000875 	.word	0x20000875
 8004b28:	20000878 	.word	0x20000878
 8004b2c:	080132ec 	.word	0x080132ec
 8004b30:	080132f4 	.word	0x080132f4
 8004b34:	08013300 	.word	0x08013300
			for (uint8_t i = 0; i <= RESPONSE_MAX_LINE; i++) {
 8004b38:	2138      	movs	r1, #56	; 0x38
 8004b3a:	31ff      	adds	r1, #255	; 0xff
 8004b3c:	2018      	movs	r0, #24
 8004b3e:	180b      	adds	r3, r1, r0
 8004b40:	19db      	adds	r3, r3, r7
 8004b42:	781a      	ldrb	r2, [r3, #0]
 8004b44:	180b      	adds	r3, r1, r0
 8004b46:	19db      	adds	r3, r3, r7
 8004b48:	3201      	adds	r2, #1
 8004b4a:	701a      	strb	r2, [r3, #0]
 8004b4c:	2338      	movs	r3, #56	; 0x38
 8004b4e:	33ff      	adds	r3, #255	; 0xff
 8004b50:	2218      	movs	r2, #24
 8004b52:	189b      	adds	r3, r3, r2
 8004b54:	19db      	adds	r3, r3, r7
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	2b06      	cmp	r3, #6
 8004b5a:	d800      	bhi.n	8004b5e <HAL_TIM_PeriodElapsedCallback+0x402>
 8004b5c:	e762      	b.n	8004a24 <HAL_TIM_PeriodElapsedCallback+0x2c8>
				}
			}
			if (tLine != 99 && (ptr2 != NULL || ptr3 != NULL)){
 8004b5e:	2346      	movs	r3, #70	; 0x46
 8004b60:	33ff      	adds	r3, #255	; 0xff
 8004b62:	2218      	movs	r2, #24
 8004b64:	189b      	adds	r3, r3, r2
 8004b66:	19db      	adds	r3, r3, r7
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	2b63      	cmp	r3, #99	; 0x63
 8004b6c:	d011      	beq.n	8004b92 <HAL_TIM_PeriodElapsedCallback+0x436>
 8004b6e:	239e      	movs	r3, #158	; 0x9e
 8004b70:	005b      	lsls	r3, r3, #1
 8004b72:	189b      	adds	r3, r3, r2
 8004b74:	19db      	adds	r3, r3, r7
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d106      	bne.n	8004b8a <HAL_TIM_PeriodElapsedCallback+0x42e>
 8004b7c:	239c      	movs	r3, #156	; 0x9c
 8004b7e:	005b      	lsls	r3, r3, #1
 8004b80:	189b      	adds	r3, r3, r2
 8004b82:	19db      	adds	r3, r3, r7
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d003      	beq.n	8004b92 <HAL_TIM_PeriodElapsedCallback+0x436>
				//SMS Ready received
				clearit();
 8004b8a:	f002 f8e1 	bl	8006d50 <clearit>
 8004b8e:	f000 fc0f 	bl	80053b0 <HAL_TIM_PeriodElapsedCallback+0xc54>
			}
			else if (tLine != 99 && ptr != NULL) {
 8004b92:	2446      	movs	r4, #70	; 0x46
 8004b94:	34ff      	adds	r4, #255	; 0xff
 8004b96:	2218      	movs	r2, #24
 8004b98:	18a3      	adds	r3, r4, r2
 8004b9a:	19db      	adds	r3, r3, r7
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	2b63      	cmp	r3, #99	; 0x63
 8004ba0:	d101      	bne.n	8004ba6 <HAL_TIM_PeriodElapsedCallback+0x44a>
 8004ba2:	f000 fc05 	bl	80053b0 <HAL_TIM_PeriodElapsedCallback+0xc54>
 8004ba6:	26a0      	movs	r6, #160	; 0xa0
 8004ba8:	0076      	lsls	r6, r6, #1
 8004baa:	18b3      	adds	r3, r6, r2
 8004bac:	19db      	adds	r3, r3, r7
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d101      	bne.n	8004bb8 <HAL_TIM_PeriodElapsedCallback+0x45c>
 8004bb4:	f000 fbfc 	bl	80053b0 <HAL_TIM_PeriodElapsedCallback+0xc54>
				//some message is received!!!.
				//---check the sender's number.
				char sender[50];
				memset(sender, 0, sizeof(sender));
 8004bb8:	250c      	movs	r5, #12
 8004bba:	18ab      	adds	r3, r5, r2
 8004bbc:	19db      	adds	r3, r3, r7
 8004bbe:	2232      	movs	r2, #50	; 0x32
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	0018      	movs	r0, r3
 8004bc4:	f00a f937 	bl	800ee36 <memset>
				ptr = strchr(responseBuffer[tLine], '\"');
 8004bc8:	2018      	movs	r0, #24
 8004bca:	1823      	adds	r3, r4, r0
 8004bcc:	19db      	adds	r3, r3, r7
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	2232      	movs	r2, #50	; 0x32
 8004bd2:	435a      	muls	r2, r3
 8004bd4:	4bd9      	ldr	r3, [pc, #868]	; (8004f3c <HAL_TIM_PeriodElapsedCallback+0x7e0>)
 8004bd6:	18d3      	adds	r3, r2, r3
 8004bd8:	2122      	movs	r1, #34	; 0x22
 8004bda:	0018      	movs	r0, r3
 8004bdc:	f00a f961 	bl	800eea2 <strchr>
 8004be0:	0003      	movs	r3, r0
 8004be2:	0031      	movs	r1, r6
 8004be4:	2018      	movs	r0, #24
 8004be6:	180a      	adds	r2, r1, r0
 8004be8:	19d2      	adds	r2, r2, r7
 8004bea:	6013      	str	r3, [r2, #0]
				if (ptr != NULL) {
 8004bec:	180b      	adds	r3, r1, r0
 8004bee:	19db      	adds	r3, r3, r7
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d101      	bne.n	8004bfa <HAL_TIM_PeriodElapsedCallback+0x49e>
 8004bf6:	f000 fbdb 	bl	80053b0 <HAL_TIM_PeriodElapsedCallback+0xc54>
					tIndex = ptr - (char) responseBuffer[tLine];
 8004bfa:	1823      	adds	r3, r4, r0
 8004bfc:	19db      	adds	r3, r3, r7
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	2232      	movs	r2, #50	; 0x32
 8004c02:	435a      	muls	r2, r3
 8004c04:	4bcd      	ldr	r3, [pc, #820]	; (8004f3c <HAL_TIM_PeriodElapsedCallback+0x7e0>)
 8004c06:	18d3      	adds	r3, r2, r3
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	425b      	negs	r3, r3
 8004c0c:	0006      	movs	r6, r0
 8004c0e:	198a      	adds	r2, r1, r6
 8004c10:	19d2      	adds	r2, r2, r7
 8004c12:	6812      	ldr	r2, [r2, #0]
 8004c14:	18d3      	adds	r3, r2, r3
 8004c16:	001a      	movs	r2, r3
 8004c18:	20f1      	movs	r0, #241	; 0xf1
 8004c1a:	1983      	adds	r3, r0, r6
 8004c1c:	19db      	adds	r3, r3, r7
 8004c1e:	701a      	strb	r2, [r3, #0]
					substring(sender, responseBuffer[tLine], tIndex + 1, 13);
 8004c20:	19a3      	adds	r3, r4, r6
 8004c22:	19db      	adds	r3, r3, r7
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	2232      	movs	r2, #50	; 0x32
 8004c28:	435a      	muls	r2, r3
 8004c2a:	4bc4      	ldr	r3, [pc, #784]	; (8004f3c <HAL_TIM_PeriodElapsedCallback+0x7e0>)
 8004c2c:	18d1      	adds	r1, r2, r3
 8004c2e:	1983      	adds	r3, r0, r6
 8004c30:	19db      	adds	r3, r3, r7
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	3301      	adds	r3, #1
 8004c36:	b2da      	uxtb	r2, r3
 8004c38:	19ab      	adds	r3, r5, r6
 8004c3a:	19d8      	adds	r0, r3, r7
 8004c3c:	230d      	movs	r3, #13
 8004c3e:	f002 fe57 	bl	80078f0 <substring>
					substring(sender, sender, 3, 10);
 8004c42:	19ab      	adds	r3, r5, r6
 8004c44:	19d9      	adds	r1, r3, r7
 8004c46:	19ab      	adds	r3, r5, r6
 8004c48:	19d8      	adds	r0, r3, r7
 8004c4a:	230a      	movs	r3, #10
 8004c4c:	2203      	movs	r2, #3
 8004c4e:	f002 fe4f 	bl	80078f0 <substring>
					uint8_t isOwner = 0;
 8004c52:	26f0      	movs	r6, #240	; 0xf0
 8004c54:	2118      	movs	r1, #24
 8004c56:	1873      	adds	r3, r6, r1
 8004c58:	19db      	adds	r3, r3, r7
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	701a      	strb	r2, [r3, #0]
					isOwner = !strcmp(sender, validSender); //check if sender's number is an owner?
 8004c5e:	4ab8      	ldr	r2, [pc, #736]	; (8004f40 <HAL_TIM_PeriodElapsedCallback+0x7e4>)
 8004c60:	186b      	adds	r3, r5, r1
 8004c62:	19db      	adds	r3, r3, r7
 8004c64:	0011      	movs	r1, r2
 8004c66:	0018      	movs	r0, r3
 8004c68:	f7fb fa4a 	bl	8000100 <strcmp>
 8004c6c:	0003      	movs	r3, r0
 8004c6e:	425a      	negs	r2, r3
 8004c70:	4153      	adcs	r3, r2
 8004c72:	b2da      	uxtb	r2, r3
 8004c74:	2118      	movs	r1, #24
 8004c76:	1873      	adds	r3, r6, r1
 8004c78:	19db      	adds	r3, r3, r7
 8004c7a:	701a      	strb	r2, [r3, #0]
					//---check the message content for any command. (*auto# for example)
					uint8_t ind1;
					uint8_t ind2; //command length.
					char *x;
					char sCommand[MAX_COMMAND_LEN];
					memset(sCommand,0,sizeof(sCommand));//new line added
 8004c7c:	2640      	movs	r6, #64	; 0x40
 8004c7e:	000d      	movs	r5, r1
 8004c80:	1873      	adds	r3, r6, r1
 8004c82:	19db      	adds	r3, r3, r7
 8004c84:	2232      	movs	r2, #50	; 0x32
 8004c86:	2100      	movs	r1, #0
 8004c88:	0018      	movs	r0, r3
 8004c8a:	f00a f8d4 	bl	800ee36 <memset>
					x = strchr(responseBuffer[tLine + 1], '*');
 8004c8e:	0029      	movs	r1, r5
 8004c90:	1863      	adds	r3, r4, r1
 8004c92:	19db      	adds	r3, r3, r7
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	3301      	adds	r3, #1
 8004c98:	2232      	movs	r2, #50	; 0x32
 8004c9a:	435a      	muls	r2, r3
 8004c9c:	4ba7      	ldr	r3, [pc, #668]	; (8004f3c <HAL_TIM_PeriodElapsedCallback+0x7e0>)
 8004c9e:	18d3      	adds	r3, r2, r3
 8004ca0:	212a      	movs	r1, #42	; 0x2a
 8004ca2:	0018      	movs	r0, r3
 8004ca4:	f00a f8fd 	bl	800eea2 <strchr>
 8004ca8:	0003      	movs	r3, r0
 8004caa:	25ec      	movs	r5, #236	; 0xec
 8004cac:	2118      	movs	r1, #24
 8004cae:	186a      	adds	r2, r5, r1
 8004cb0:	19d2      	adds	r2, r2, r7
 8004cb2:	6013      	str	r3, [r2, #0]
					if (x != NULL) {
 8004cb4:	000a      	movs	r2, r1
 8004cb6:	18ab      	adds	r3, r5, r2
 8004cb8:	19db      	adds	r3, r3, r7
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d101      	bne.n	8004cc4 <HAL_TIM_PeriodElapsedCallback+0x568>
 8004cc0:	f000 fb76 	bl	80053b0 <HAL_TIM_PeriodElapsedCallback+0xc54>
						char *y;
						y = strchr(responseBuffer[tLine + 1], '#');
 8004cc4:	18a3      	adds	r3, r4, r2
 8004cc6:	19db      	adds	r3, r3, r7
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	3301      	adds	r3, #1
 8004ccc:	2232      	movs	r2, #50	; 0x32
 8004cce:	435a      	muls	r2, r3
 8004cd0:	4b9a      	ldr	r3, [pc, #616]	; (8004f3c <HAL_TIM_PeriodElapsedCallback+0x7e0>)
 8004cd2:	18d3      	adds	r3, r2, r3
 8004cd4:	2123      	movs	r1, #35	; 0x23
 8004cd6:	0018      	movs	r0, r3
 8004cd8:	f00a f8e3 	bl	800eea2 <strchr>
 8004cdc:	0003      	movs	r3, r0
 8004cde:	20e8      	movs	r0, #232	; 0xe8
 8004ce0:	2118      	movs	r1, #24
 8004ce2:	1842      	adds	r2, r0, r1
 8004ce4:	19d2      	adds	r2, r2, r7
 8004ce6:	6013      	str	r3, [r2, #0]
						if (y != NULL) {
 8004ce8:	000a      	movs	r2, r1
 8004cea:	1883      	adds	r3, r0, r2
 8004cec:	19db      	adds	r3, r3, r7
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d100      	bne.n	8004cf6 <HAL_TIM_PeriodElapsedCallback+0x59a>
 8004cf4:	e35c      	b.n	80053b0 <HAL_TIM_PeriodElapsedCallback+0xc54>
							//command found!!!
							//---extract the command.
							ind1 = x - (char) responseBuffer[tLine + 1] + 1;
 8004cf6:	0021      	movs	r1, r4
 8004cf8:	0014      	movs	r4, r2
 8004cfa:	188b      	adds	r3, r1, r2
 8004cfc:	19db      	adds	r3, r3, r7
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	3301      	adds	r3, #1
 8004d02:	2232      	movs	r2, #50	; 0x32
 8004d04:	435a      	muls	r2, r3
 8004d06:	4b8d      	ldr	r3, [pc, #564]	; (8004f3c <HAL_TIM_PeriodElapsedCallback+0x7e0>)
 8004d08:	18d3      	adds	r3, r2, r3
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	001a      	movs	r2, r3
 8004d0e:	2301      	movs	r3, #1
 8004d10:	1a9b      	subs	r3, r3, r2
 8004d12:	192a      	adds	r2, r5, r4
 8004d14:	19d2      	adds	r2, r2, r7
 8004d16:	6812      	ldr	r2, [r2, #0]
 8004d18:	18d3      	adds	r3, r2, r3
 8004d1a:	001a      	movs	r2, r3
 8004d1c:	23e7      	movs	r3, #231	; 0xe7
 8004d1e:	191b      	adds	r3, r3, r4
 8004d20:	19db      	adds	r3, r3, r7
 8004d22:	701a      	strb	r2, [r3, #0]
							ind2 = y - (char) responseBuffer[tLine + 1] - 1;
 8004d24:	190b      	adds	r3, r1, r4
 8004d26:	19db      	adds	r3, r3, r7
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	2232      	movs	r2, #50	; 0x32
 8004d2e:	435a      	muls	r2, r3
 8004d30:	4b82      	ldr	r3, [pc, #520]	; (8004f3c <HAL_TIM_PeriodElapsedCallback+0x7e0>)
 8004d32:	18d3      	adds	r3, r2, r3
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	43db      	mvns	r3, r3
 8004d38:	1902      	adds	r2, r0, r4
 8004d3a:	19d2      	adds	r2, r2, r7
 8004d3c:	6812      	ldr	r2, [r2, #0]
 8004d3e:	18d3      	adds	r3, r2, r3
 8004d40:	001a      	movs	r2, r3
 8004d42:	25e6      	movs	r5, #230	; 0xe6
 8004d44:	192b      	adds	r3, r5, r4
 8004d46:	19db      	adds	r3, r3, r7
 8004d48:	701a      	strb	r2, [r3, #0]
							substring(sCommand, responseBuffer[tLine + 1], ind1,ind2);
 8004d4a:	190b      	adds	r3, r1, r4
 8004d4c:	19db      	adds	r3, r3, r7
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	3301      	adds	r3, #1
 8004d52:	2232      	movs	r2, #50	; 0x32
 8004d54:	435a      	muls	r2, r3
 8004d56:	4b79      	ldr	r3, [pc, #484]	; (8004f3c <HAL_TIM_PeriodElapsedCallback+0x7e0>)
 8004d58:	18d1      	adds	r1, r2, r3
 8004d5a:	0020      	movs	r0, r4
 8004d5c:	182b      	adds	r3, r5, r0
 8004d5e:	19db      	adds	r3, r3, r7
 8004d60:	781c      	ldrb	r4, [r3, #0]
 8004d62:	23e7      	movs	r3, #231	; 0xe7
 8004d64:	181b      	adds	r3, r3, r0
 8004d66:	19db      	adds	r3, r3, r7
 8004d68:	781a      	ldrb	r2, [r3, #0]
 8004d6a:	1833      	adds	r3, r6, r0
 8004d6c:	19d8      	adds	r0, r3, r7
 8004d6e:	0023      	movs	r3, r4
 8004d70:	f002 fdbe 	bl	80078f0 <substring>
							//--->1)RES0 = reset user PIN and registered NUMBER
							//--->2)RNUM3322336979xxxx = register new owner's number
							//--->3)RPIN = set new pin
							//--->4)WHERE
							//--->5)SERVER,DNS,PORT (DNS<=50,PORT<=5)
							if(sCommand[0] == 'R'
 8004d74:	4b73      	ldr	r3, [pc, #460]	; (8004f44 <HAL_TIM_PeriodElapsedCallback+0x7e8>)
 8004d76:	22a4      	movs	r2, #164	; 0xa4
 8004d78:	0052      	lsls	r2, r2, #1
 8004d7a:	189b      	adds	r3, r3, r2
 8004d7c:	2118      	movs	r1, #24
 8004d7e:	468c      	mov	ip, r1
 8004d80:	44bc      	add	ip, r7
 8004d82:	4463      	add	r3, ip
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	2b52      	cmp	r3, #82	; 0x52
 8004d88:	d136      	bne.n	8004df8 <HAL_TIM_PeriodElapsedCallback+0x69c>
							&& sCommand[1] == 'E'
 8004d8a:	4b6e      	ldr	r3, [pc, #440]	; (8004f44 <HAL_TIM_PeriodElapsedCallback+0x7e8>)
 8004d8c:	189b      	adds	r3, r3, r2
 8004d8e:	2118      	movs	r1, #24
 8004d90:	468c      	mov	ip, r1
 8004d92:	44bc      	add	ip, r7
 8004d94:	4463      	add	r3, ip
 8004d96:	785b      	ldrb	r3, [r3, #1]
 8004d98:	2b45      	cmp	r3, #69	; 0x45
 8004d9a:	d12d      	bne.n	8004df8 <HAL_TIM_PeriodElapsedCallback+0x69c>
							&& sCommand[2] == 'S'
 8004d9c:	4b69      	ldr	r3, [pc, #420]	; (8004f44 <HAL_TIM_PeriodElapsedCallback+0x7e8>)
 8004d9e:	189b      	adds	r3, r3, r2
 8004da0:	2118      	movs	r1, #24
 8004da2:	468c      	mov	ip, r1
 8004da4:	44bc      	add	ip, r7
 8004da6:	4463      	add	r3, ip
 8004da8:	789b      	ldrb	r3, [r3, #2]
 8004daa:	2b53      	cmp	r3, #83	; 0x53
 8004dac:	d124      	bne.n	8004df8 <HAL_TIM_PeriodElapsedCallback+0x69c>
							&& sCommand[3] == '0'
 8004dae:	4b65      	ldr	r3, [pc, #404]	; (8004f44 <HAL_TIM_PeriodElapsedCallback+0x7e8>)
 8004db0:	189b      	adds	r3, r3, r2
 8004db2:	2218      	movs	r2, #24
 8004db4:	4694      	mov	ip, r2
 8004db6:	44bc      	add	ip, r7
 8004db8:	4463      	add	r3, ip
 8004dba:	78db      	ldrb	r3, [r3, #3]
 8004dbc:	2b30      	cmp	r3, #48	; 0x30
 8004dbe:	d11b      	bne.n	8004df8 <HAL_TIM_PeriodElapsedCallback+0x69c>
							&& ind2 == 4) {
 8004dc0:	2018      	movs	r0, #24
 8004dc2:	182b      	adds	r3, r5, r0
 8004dc4:	19db      	adds	r3, r3, r7
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	2b04      	cmp	r3, #4
 8004dca:	d115      	bne.n	8004df8 <HAL_TIM_PeriodElapsedCallback+0x69c>
								//--- reset command received.
								cPin[0] = '1';
 8004dcc:	4b5e      	ldr	r3, [pc, #376]	; (8004f48 <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 8004dce:	2231      	movs	r2, #49	; 0x31
 8004dd0:	701a      	strb	r2, [r3, #0]
								cPin[1] = '2';
 8004dd2:	4b5d      	ldr	r3, [pc, #372]	; (8004f48 <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 8004dd4:	2232      	movs	r2, #50	; 0x32
 8004dd6:	705a      	strb	r2, [r3, #1]
								cPin[2] = '3';
 8004dd8:	4b5b      	ldr	r3, [pc, #364]	; (8004f48 <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 8004dda:	2233      	movs	r2, #51	; 0x33
 8004ddc:	709a      	strb	r2, [r3, #2]
								cPin[3] = '4';
 8004dde:	4b5a      	ldr	r3, [pc, #360]	; (8004f48 <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 8004de0:	2234      	movs	r2, #52	; 0x34
 8004de2:	70da      	strb	r2, [r3, #3]
								locationDataIntervalA = 5;
 8004de4:	4b59      	ldr	r3, [pc, #356]	; (8004f4c <HAL_TIM_PeriodElapsedCallback+0x7f0>)
 8004de6:	2205      	movs	r2, #5
 8004de8:	701a      	strb	r2, [r3, #0]
								locationDataIntervalB = 5;
 8004dea:	4b59      	ldr	r3, [pc, #356]	; (8004f50 <HAL_TIM_PeriodElapsedCallback+0x7f4>)
 8004dec:	2205      	movs	r2, #5
 8004dee:	701a      	strb	r2, [r3, #0]
								//---saving to flash memory
								save_to_flash(0);
 8004df0:	2000      	movs	r0, #0
 8004df2:	f001 fbbb 	bl	800656c <save_to_flash>
 8004df6:	e2db      	b.n	80053b0 <HAL_TIM_PeriodElapsedCallback+0xc54>
								//printf("Reset Completed\n");
							} else if (sCommand[0] == 'R'
 8004df8:	4b52      	ldr	r3, [pc, #328]	; (8004f44 <HAL_TIM_PeriodElapsedCallback+0x7e8>)
 8004dfa:	22a4      	movs	r2, #164	; 0xa4
 8004dfc:	0052      	lsls	r2, r2, #1
 8004dfe:	189b      	adds	r3, r3, r2
 8004e00:	2118      	movs	r1, #24
 8004e02:	468c      	mov	ip, r1
 8004e04:	44bc      	add	ip, r7
 8004e06:	4463      	add	r3, ip
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	2b52      	cmp	r3, #82	; 0x52
 8004e0c:	d000      	beq.n	8004e10 <HAL_TIM_PeriodElapsedCallback+0x6b4>
 8004e0e:	e0a3      	b.n	8004f58 <HAL_TIM_PeriodElapsedCallback+0x7fc>
									&& sCommand[1] == 'N'
 8004e10:	4b4c      	ldr	r3, [pc, #304]	; (8004f44 <HAL_TIM_PeriodElapsedCallback+0x7e8>)
 8004e12:	189b      	adds	r3, r3, r2
 8004e14:	2118      	movs	r1, #24
 8004e16:	468c      	mov	ip, r1
 8004e18:	44bc      	add	ip, r7
 8004e1a:	4463      	add	r3, ip
 8004e1c:	785b      	ldrb	r3, [r3, #1]
 8004e1e:	2b4e      	cmp	r3, #78	; 0x4e
 8004e20:	d000      	beq.n	8004e24 <HAL_TIM_PeriodElapsedCallback+0x6c8>
 8004e22:	e099      	b.n	8004f58 <HAL_TIM_PeriodElapsedCallback+0x7fc>
									&& sCommand[2] == 'U'
 8004e24:	4b47      	ldr	r3, [pc, #284]	; (8004f44 <HAL_TIM_PeriodElapsedCallback+0x7e8>)
 8004e26:	189b      	adds	r3, r3, r2
 8004e28:	2118      	movs	r1, #24
 8004e2a:	468c      	mov	ip, r1
 8004e2c:	44bc      	add	ip, r7
 8004e2e:	4463      	add	r3, ip
 8004e30:	789b      	ldrb	r3, [r3, #2]
 8004e32:	2b55      	cmp	r3, #85	; 0x55
 8004e34:	d000      	beq.n	8004e38 <HAL_TIM_PeriodElapsedCallback+0x6dc>
 8004e36:	e08f      	b.n	8004f58 <HAL_TIM_PeriodElapsedCallback+0x7fc>
									&& sCommand[3] == 'M'
 8004e38:	4b42      	ldr	r3, [pc, #264]	; (8004f44 <HAL_TIM_PeriodElapsedCallback+0x7e8>)
 8004e3a:	189b      	adds	r3, r3, r2
 8004e3c:	2118      	movs	r1, #24
 8004e3e:	468c      	mov	ip, r1
 8004e40:	44bc      	add	ip, r7
 8004e42:	4463      	add	r3, ip
 8004e44:	78db      	ldrb	r3, [r3, #3]
 8004e46:	2b4d      	cmp	r3, #77	; 0x4d
 8004e48:	d000      	beq.n	8004e4c <HAL_TIM_PeriodElapsedCallback+0x6f0>
 8004e4a:	e085      	b.n	8004f58 <HAL_TIM_PeriodElapsedCallback+0x7fc>
									&& ind2 == 18) {
 8004e4c:	23e6      	movs	r3, #230	; 0xe6
 8004e4e:	2018      	movs	r0, #24
 8004e50:	181b      	adds	r3, r3, r0
 8004e52:	19db      	adds	r3, r3, r7
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	2b12      	cmp	r3, #18
 8004e58:	d000      	beq.n	8004e5c <HAL_TIM_PeriodElapsedCallback+0x700>
 8004e5a:	e07d      	b.n	8004f58 <HAL_TIM_PeriodElapsedCallback+0x7fc>
								//---owner number registration command received
								//printf("number registration command received\n");
								if(sCommand[14] == cPin[0]
 8004e5c:	4b39      	ldr	r3, [pc, #228]	; (8004f44 <HAL_TIM_PeriodElapsedCallback+0x7e8>)
 8004e5e:	0011      	movs	r1, r2
 8004e60:	185b      	adds	r3, r3, r1
 8004e62:	2218      	movs	r2, #24
 8004e64:	4694      	mov	ip, r2
 8004e66:	44bc      	add	ip, r7
 8004e68:	4463      	add	r3, ip
 8004e6a:	7b9a      	ldrb	r2, [r3, #14]
 8004e6c:	4b36      	ldr	r3, [pc, #216]	; (8004f48 <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d000      	beq.n	8004e76 <HAL_TIM_PeriodElapsedCallback+0x71a>
 8004e74:	e299      	b.n	80053aa <HAL_TIM_PeriodElapsedCallback+0xc4e>
								&& sCommand[15] == cPin[1]
 8004e76:	4b33      	ldr	r3, [pc, #204]	; (8004f44 <HAL_TIM_PeriodElapsedCallback+0x7e8>)
 8004e78:	185b      	adds	r3, r3, r1
 8004e7a:	2218      	movs	r2, #24
 8004e7c:	4694      	mov	ip, r2
 8004e7e:	44bc      	add	ip, r7
 8004e80:	4463      	add	r3, ip
 8004e82:	7bda      	ldrb	r2, [r3, #15]
 8004e84:	4b30      	ldr	r3, [pc, #192]	; (8004f48 <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 8004e86:	785b      	ldrb	r3, [r3, #1]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d000      	beq.n	8004e8e <HAL_TIM_PeriodElapsedCallback+0x732>
 8004e8c:	e28d      	b.n	80053aa <HAL_TIM_PeriodElapsedCallback+0xc4e>
								&& sCommand[16] == cPin[2]
 8004e8e:	4b2d      	ldr	r3, [pc, #180]	; (8004f44 <HAL_TIM_PeriodElapsedCallback+0x7e8>)
 8004e90:	185b      	adds	r3, r3, r1
 8004e92:	2218      	movs	r2, #24
 8004e94:	4694      	mov	ip, r2
 8004e96:	44bc      	add	ip, r7
 8004e98:	4463      	add	r3, ip
 8004e9a:	7c1a      	ldrb	r2, [r3, #16]
 8004e9c:	4b2a      	ldr	r3, [pc, #168]	; (8004f48 <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 8004e9e:	789b      	ldrb	r3, [r3, #2]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d000      	beq.n	8004ea6 <HAL_TIM_PeriodElapsedCallback+0x74a>
 8004ea4:	e281      	b.n	80053aa <HAL_TIM_PeriodElapsedCallback+0xc4e>
								&& sCommand[17] == cPin[3]) {
 8004ea6:	4b27      	ldr	r3, [pc, #156]	; (8004f44 <HAL_TIM_PeriodElapsedCallback+0x7e8>)
 8004ea8:	185b      	adds	r3, r3, r1
 8004eaa:	2218      	movs	r2, #24
 8004eac:	4694      	mov	ip, r2
 8004eae:	44bc      	add	ip, r7
 8004eb0:	4463      	add	r3, ip
 8004eb2:	7c5a      	ldrb	r2, [r3, #17]
 8004eb4:	4b24      	ldr	r3, [pc, #144]	; (8004f48 <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 8004eb6:	78db      	ldrb	r3, [r3, #3]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d000      	beq.n	8004ebe <HAL_TIM_PeriodElapsedCallback+0x762>
 8004ebc:	e275      	b.n	80053aa <HAL_TIM_PeriodElapsedCallback+0xc4e>
									//PIN is valid!!!
									//---register new number
									for (uint8_t m = 0; m < 10; m++) {
 8004ebe:	239b      	movs	r3, #155	; 0x9b
 8004ec0:	005b      	lsls	r3, r3, #1
 8004ec2:	181b      	adds	r3, r3, r0
 8004ec4:	19db      	adds	r3, r3, r7
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	701a      	strb	r2, [r3, #0]
 8004eca:	e01b      	b.n	8004f04 <HAL_TIM_PeriodElapsedCallback+0x7a8>
										validSender[m] = sCommand[m + 4];
 8004ecc:	209b      	movs	r0, #155	; 0x9b
 8004ece:	0040      	lsls	r0, r0, #1
 8004ed0:	2518      	movs	r5, #24
 8004ed2:	1943      	adds	r3, r0, r5
 8004ed4:	19db      	adds	r3, r3, r7
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	1d1a      	adds	r2, r3, #4
 8004eda:	1943      	adds	r3, r0, r5
 8004edc:	19db      	adds	r3, r3, r7
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	4918      	ldr	r1, [pc, #96]	; (8004f44 <HAL_TIM_PeriodElapsedCallback+0x7e8>)
 8004ee2:	24a4      	movs	r4, #164	; 0xa4
 8004ee4:	0064      	lsls	r4, r4, #1
 8004ee6:	1909      	adds	r1, r1, r4
 8004ee8:	2418      	movs	r4, #24
 8004eea:	46a4      	mov	ip, r4
 8004eec:	44bc      	add	ip, r7
 8004eee:	4461      	add	r1, ip
 8004ef0:	5c89      	ldrb	r1, [r1, r2]
 8004ef2:	4a13      	ldr	r2, [pc, #76]	; (8004f40 <HAL_TIM_PeriodElapsedCallback+0x7e4>)
 8004ef4:	54d1      	strb	r1, [r2, r3]
									for (uint8_t m = 0; m < 10; m++) {
 8004ef6:	1943      	adds	r3, r0, r5
 8004ef8:	19db      	adds	r3, r3, r7
 8004efa:	781a      	ldrb	r2, [r3, #0]
 8004efc:	1943      	adds	r3, r0, r5
 8004efe:	19db      	adds	r3, r3, r7
 8004f00:	3201      	adds	r2, #1
 8004f02:	701a      	strb	r2, [r3, #0]
 8004f04:	239b      	movs	r3, #155	; 0x9b
 8004f06:	005b      	lsls	r3, r3, #1
 8004f08:	2218      	movs	r2, #24
 8004f0a:	189b      	adds	r3, r3, r2
 8004f0c:	19db      	adds	r3, r3, r7
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	2b09      	cmp	r3, #9
 8004f12:	d9db      	bls.n	8004ecc <HAL_TIM_PeriodElapsedCallback+0x770>
									}
									if(validSender[0] == '0' && validSender[1] == '0' && validSender[2] == '0'){
 8004f14:	4b0a      	ldr	r3, [pc, #40]	; (8004f40 <HAL_TIM_PeriodElapsedCallback+0x7e4>)
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	2b30      	cmp	r3, #48	; 0x30
 8004f1a:	d10b      	bne.n	8004f34 <HAL_TIM_PeriodElapsedCallback+0x7d8>
 8004f1c:	4b08      	ldr	r3, [pc, #32]	; (8004f40 <HAL_TIM_PeriodElapsedCallback+0x7e4>)
 8004f1e:	785b      	ldrb	r3, [r3, #1]
 8004f20:	2b30      	cmp	r3, #48	; 0x30
 8004f22:	d107      	bne.n	8004f34 <HAL_TIM_PeriodElapsedCallback+0x7d8>
 8004f24:	4b06      	ldr	r3, [pc, #24]	; (8004f40 <HAL_TIM_PeriodElapsedCallback+0x7e4>)
 8004f26:	789b      	ldrb	r3, [r3, #2]
 8004f28:	2b30      	cmp	r3, #48	; 0x30
 8004f2a:	d103      	bne.n	8004f34 <HAL_TIM_PeriodElapsedCallback+0x7d8>
										isNumValid=0;
 8004f2c:	4b09      	ldr	r3, [pc, #36]	; (8004f54 <HAL_TIM_PeriodElapsedCallback+0x7f8>)
 8004f2e:	2200      	movs	r2, #0
 8004f30:	701a      	strb	r2, [r3, #0]
								if(sCommand[14] == cPin[0]
 8004f32:	e23a      	b.n	80053aa <HAL_TIM_PeriodElapsedCallback+0xc4e>
									}else{
										isNumValid=1;
 8004f34:	4b07      	ldr	r3, [pc, #28]	; (8004f54 <HAL_TIM_PeriodElapsedCallback+0x7f8>)
 8004f36:	2201      	movs	r2, #1
 8004f38:	701a      	strb	r2, [r3, #0]
								if(sCommand[14] == cPin[0]
 8004f3a:	e236      	b.n	80053aa <HAL_TIM_PeriodElapsedCallback+0xc4e>
 8004f3c:	20000748 	.word	0x20000748
 8004f40:	20000008 	.word	0x20000008
 8004f44:	fffffef8 	.word	0xfffffef8
 8004f48:	20000014 	.word	0x20000014
 8004f4c:	20000004 	.word	0x20000004
 8004f50:	20000005 	.word	0x20000005
 8004f54:	2000071e 	.word	0x2000071e
									//---send success message(todo)
								} else {
									// incorrect pin, send message (incoorect pin),(todo)
									// *future* stop sending message after 3 fails
								}
							} else if (sCommand[0] == 'R'
 8004f58:	4bd5      	ldr	r3, [pc, #852]	; (80052b0 <HAL_TIM_PeriodElapsedCallback+0xb54>)
 8004f5a:	22a4      	movs	r2, #164	; 0xa4
 8004f5c:	0052      	lsls	r2, r2, #1
 8004f5e:	189b      	adds	r3, r3, r2
 8004f60:	2118      	movs	r1, #24
 8004f62:	468c      	mov	ip, r1
 8004f64:	44bc      	add	ip, r7
 8004f66:	4463      	add	r3, ip
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	2b52      	cmp	r3, #82	; 0x52
 8004f6c:	d000      	beq.n	8004f70 <HAL_TIM_PeriodElapsedCallback+0x814>
 8004f6e:	e081      	b.n	8005074 <HAL_TIM_PeriodElapsedCallback+0x918>
									&& sCommand[1] == 'P'
 8004f70:	4bcf      	ldr	r3, [pc, #828]	; (80052b0 <HAL_TIM_PeriodElapsedCallback+0xb54>)
 8004f72:	189b      	adds	r3, r3, r2
 8004f74:	2118      	movs	r1, #24
 8004f76:	468c      	mov	ip, r1
 8004f78:	44bc      	add	ip, r7
 8004f7a:	4463      	add	r3, ip
 8004f7c:	785b      	ldrb	r3, [r3, #1]
 8004f7e:	2b50      	cmp	r3, #80	; 0x50
 8004f80:	d000      	beq.n	8004f84 <HAL_TIM_PeriodElapsedCallback+0x828>
 8004f82:	e077      	b.n	8005074 <HAL_TIM_PeriodElapsedCallback+0x918>
									&& sCommand[2] == 'I'
 8004f84:	4bca      	ldr	r3, [pc, #808]	; (80052b0 <HAL_TIM_PeriodElapsedCallback+0xb54>)
 8004f86:	189b      	adds	r3, r3, r2
 8004f88:	2118      	movs	r1, #24
 8004f8a:	468c      	mov	ip, r1
 8004f8c:	44bc      	add	ip, r7
 8004f8e:	4463      	add	r3, ip
 8004f90:	789b      	ldrb	r3, [r3, #2]
 8004f92:	2b49      	cmp	r3, #73	; 0x49
 8004f94:	d16e      	bne.n	8005074 <HAL_TIM_PeriodElapsedCallback+0x918>
									&& sCommand[3] == 'N'
 8004f96:	4bc6      	ldr	r3, [pc, #792]	; (80052b0 <HAL_TIM_PeriodElapsedCallback+0xb54>)
 8004f98:	189b      	adds	r3, r3, r2
 8004f9a:	2118      	movs	r1, #24
 8004f9c:	468c      	mov	ip, r1
 8004f9e:	44bc      	add	ip, r7
 8004fa0:	4463      	add	r3, ip
 8004fa2:	78db      	ldrb	r3, [r3, #3]
 8004fa4:	2b4e      	cmp	r3, #78	; 0x4e
 8004fa6:	d165      	bne.n	8005074 <HAL_TIM_PeriodElapsedCallback+0x918>
									&& ind2 == 12
 8004fa8:	23e6      	movs	r3, #230	; 0xe6
 8004faa:	2118      	movs	r1, #24
 8004fac:	185b      	adds	r3, r3, r1
 8004fae:	19db      	adds	r3, r3, r7
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	2b0c      	cmp	r3, #12
 8004fb4:	d15e      	bne.n	8005074 <HAL_TIM_PeriodElapsedCallback+0x918>
									&& isOwner == 1) {
 8004fb6:	23f0      	movs	r3, #240	; 0xf0
 8004fb8:	185b      	adds	r3, r3, r1
 8004fba:	19db      	adds	r3, r3, r7
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d158      	bne.n	8005074 <HAL_TIM_PeriodElapsedCallback+0x918>
								//---SET PIN command received from owner.
								// RPINxxxxNNNN
								//printf("set PIN command received\n");
								if (sCommand[4] == cPin[0]
 8004fc2:	4bbb      	ldr	r3, [pc, #748]	; (80052b0 <HAL_TIM_PeriodElapsedCallback+0xb54>)
 8004fc4:	0011      	movs	r1, r2
 8004fc6:	185b      	adds	r3, r3, r1
 8004fc8:	2218      	movs	r2, #24
 8004fca:	4694      	mov	ip, r2
 8004fcc:	44bc      	add	ip, r7
 8004fce:	4463      	add	r3, ip
 8004fd0:	791a      	ldrb	r2, [r3, #4]
 8004fd2:	4bb8      	ldr	r3, [pc, #736]	; (80052b4 <HAL_TIM_PeriodElapsedCallback+0xb58>)
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d000      	beq.n	8004fdc <HAL_TIM_PeriodElapsedCallback+0x880>
 8004fda:	e1e8      	b.n	80053ae <HAL_TIM_PeriodElapsedCallback+0xc52>
								&& sCommand[5] == cPin[1]
 8004fdc:	4bb4      	ldr	r3, [pc, #720]	; (80052b0 <HAL_TIM_PeriodElapsedCallback+0xb54>)
 8004fde:	185b      	adds	r3, r3, r1
 8004fe0:	2218      	movs	r2, #24
 8004fe2:	4694      	mov	ip, r2
 8004fe4:	44bc      	add	ip, r7
 8004fe6:	4463      	add	r3, ip
 8004fe8:	795a      	ldrb	r2, [r3, #5]
 8004fea:	4bb2      	ldr	r3, [pc, #712]	; (80052b4 <HAL_TIM_PeriodElapsedCallback+0xb58>)
 8004fec:	785b      	ldrb	r3, [r3, #1]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d000      	beq.n	8004ff4 <HAL_TIM_PeriodElapsedCallback+0x898>
 8004ff2:	e1dc      	b.n	80053ae <HAL_TIM_PeriodElapsedCallback+0xc52>
								&& sCommand[6] == cPin[2]
 8004ff4:	4bae      	ldr	r3, [pc, #696]	; (80052b0 <HAL_TIM_PeriodElapsedCallback+0xb54>)
 8004ff6:	185b      	adds	r3, r3, r1
 8004ff8:	2218      	movs	r2, #24
 8004ffa:	4694      	mov	ip, r2
 8004ffc:	44bc      	add	ip, r7
 8004ffe:	4463      	add	r3, ip
 8005000:	799a      	ldrb	r2, [r3, #6]
 8005002:	4bac      	ldr	r3, [pc, #688]	; (80052b4 <HAL_TIM_PeriodElapsedCallback+0xb58>)
 8005004:	789b      	ldrb	r3, [r3, #2]
 8005006:	429a      	cmp	r2, r3
 8005008:	d000      	beq.n	800500c <HAL_TIM_PeriodElapsedCallback+0x8b0>
 800500a:	e1d0      	b.n	80053ae <HAL_TIM_PeriodElapsedCallback+0xc52>
								&& sCommand[7] == cPin[3]) {
 800500c:	4ba8      	ldr	r3, [pc, #672]	; (80052b0 <HAL_TIM_PeriodElapsedCallback+0xb54>)
 800500e:	185b      	adds	r3, r3, r1
 8005010:	2218      	movs	r2, #24
 8005012:	4694      	mov	ip, r2
 8005014:	44bc      	add	ip, r7
 8005016:	4463      	add	r3, ip
 8005018:	79da      	ldrb	r2, [r3, #7]
 800501a:	4ba6      	ldr	r3, [pc, #664]	; (80052b4 <HAL_TIM_PeriodElapsedCallback+0xb58>)
 800501c:	78db      	ldrb	r3, [r3, #3]
 800501e:	429a      	cmp	r2, r3
 8005020:	d000      	beq.n	8005024 <HAL_TIM_PeriodElapsedCallback+0x8c8>
 8005022:	e1c4      	b.n	80053ae <HAL_TIM_PeriodElapsedCallback+0xc52>
									//old PIN is valid!!!
									//---set new pin
									cPin[0] = sCommand[8];
 8005024:	4ba2      	ldr	r3, [pc, #648]	; (80052b0 <HAL_TIM_PeriodElapsedCallback+0xb54>)
 8005026:	185b      	adds	r3, r3, r1
 8005028:	2218      	movs	r2, #24
 800502a:	4694      	mov	ip, r2
 800502c:	44bc      	add	ip, r7
 800502e:	4463      	add	r3, ip
 8005030:	7a1a      	ldrb	r2, [r3, #8]
 8005032:	4ba0      	ldr	r3, [pc, #640]	; (80052b4 <HAL_TIM_PeriodElapsedCallback+0xb58>)
 8005034:	701a      	strb	r2, [r3, #0]
									cPin[1] = sCommand[9];
 8005036:	4b9e      	ldr	r3, [pc, #632]	; (80052b0 <HAL_TIM_PeriodElapsedCallback+0xb54>)
 8005038:	185b      	adds	r3, r3, r1
 800503a:	2218      	movs	r2, #24
 800503c:	4694      	mov	ip, r2
 800503e:	44bc      	add	ip, r7
 8005040:	4463      	add	r3, ip
 8005042:	7a5a      	ldrb	r2, [r3, #9]
 8005044:	4b9b      	ldr	r3, [pc, #620]	; (80052b4 <HAL_TIM_PeriodElapsedCallback+0xb58>)
 8005046:	705a      	strb	r2, [r3, #1]
									cPin[2] = sCommand[10];
 8005048:	4b99      	ldr	r3, [pc, #612]	; (80052b0 <HAL_TIM_PeriodElapsedCallback+0xb54>)
 800504a:	185b      	adds	r3, r3, r1
 800504c:	2218      	movs	r2, #24
 800504e:	4694      	mov	ip, r2
 8005050:	44bc      	add	ip, r7
 8005052:	4463      	add	r3, ip
 8005054:	7a9a      	ldrb	r2, [r3, #10]
 8005056:	4b97      	ldr	r3, [pc, #604]	; (80052b4 <HAL_TIM_PeriodElapsedCallback+0xb58>)
 8005058:	709a      	strb	r2, [r3, #2]
									cPin[3] = sCommand[11];
 800505a:	4b95      	ldr	r3, [pc, #596]	; (80052b0 <HAL_TIM_PeriodElapsedCallback+0xb54>)
 800505c:	185b      	adds	r3, r3, r1
 800505e:	2218      	movs	r2, #24
 8005060:	4694      	mov	ip, r2
 8005062:	44bc      	add	ip, r7
 8005064:	4463      	add	r3, ip
 8005066:	7ada      	ldrb	r2, [r3, #11]
 8005068:	4b92      	ldr	r3, [pc, #584]	; (80052b4 <HAL_TIM_PeriodElapsedCallback+0xb58>)
 800506a:	70da      	strb	r2, [r3, #3]
									//---saving to flash memory
									save_to_flash(0);
 800506c:	2000      	movs	r0, #0
 800506e:	f001 fa7d 	bl	800656c <save_to_flash>
								if (sCommand[4] == cPin[0]
 8005072:	e19c      	b.n	80053ae <HAL_TIM_PeriodElapsedCallback+0xc52>
									//printf("NEW PIN set \n");
								}
							} else if (sCommand[0] == 'W'
 8005074:	4b8e      	ldr	r3, [pc, #568]	; (80052b0 <HAL_TIM_PeriodElapsedCallback+0xb54>)
 8005076:	22a4      	movs	r2, #164	; 0xa4
 8005078:	0052      	lsls	r2, r2, #1
 800507a:	189b      	adds	r3, r3, r2
 800507c:	2118      	movs	r1, #24
 800507e:	468c      	mov	ip, r1
 8005080:	44bc      	add	ip, r7
 8005082:	4463      	add	r3, ip
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	2b57      	cmp	r3, #87	; 0x57
 8005088:	d12e      	bne.n	80050e8 <HAL_TIM_PeriodElapsedCallback+0x98c>
									&& sCommand[1] == 'H'
 800508a:	4b89      	ldr	r3, [pc, #548]	; (80052b0 <HAL_TIM_PeriodElapsedCallback+0xb54>)
 800508c:	189b      	adds	r3, r3, r2
 800508e:	2118      	movs	r1, #24
 8005090:	468c      	mov	ip, r1
 8005092:	44bc      	add	ip, r7
 8005094:	4463      	add	r3, ip
 8005096:	785b      	ldrb	r3, [r3, #1]
 8005098:	2b48      	cmp	r3, #72	; 0x48
 800509a:	d125      	bne.n	80050e8 <HAL_TIM_PeriodElapsedCallback+0x98c>
									&& sCommand[2] == 'E'
 800509c:	4b84      	ldr	r3, [pc, #528]	; (80052b0 <HAL_TIM_PeriodElapsedCallback+0xb54>)
 800509e:	189b      	adds	r3, r3, r2
 80050a0:	2118      	movs	r1, #24
 80050a2:	468c      	mov	ip, r1
 80050a4:	44bc      	add	ip, r7
 80050a6:	4463      	add	r3, ip
 80050a8:	789b      	ldrb	r3, [r3, #2]
 80050aa:	2b45      	cmp	r3, #69	; 0x45
 80050ac:	d11c      	bne.n	80050e8 <HAL_TIM_PeriodElapsedCallback+0x98c>
									&& sCommand[3] == 'R'
 80050ae:	4b80      	ldr	r3, [pc, #512]	; (80052b0 <HAL_TIM_PeriodElapsedCallback+0xb54>)
 80050b0:	189b      	adds	r3, r3, r2
 80050b2:	2118      	movs	r1, #24
 80050b4:	468c      	mov	ip, r1
 80050b6:	44bc      	add	ip, r7
 80050b8:	4463      	add	r3, ip
 80050ba:	78db      	ldrb	r3, [r3, #3]
 80050bc:	2b52      	cmp	r3, #82	; 0x52
 80050be:	d113      	bne.n	80050e8 <HAL_TIM_PeriodElapsedCallback+0x98c>
									&& sCommand[4] == 'E'
 80050c0:	4b7b      	ldr	r3, [pc, #492]	; (80052b0 <HAL_TIM_PeriodElapsedCallback+0xb54>)
 80050c2:	189b      	adds	r3, r3, r2
 80050c4:	2218      	movs	r2, #24
 80050c6:	4694      	mov	ip, r2
 80050c8:	44bc      	add	ip, r7
 80050ca:	4463      	add	r3, ip
 80050cc:	791b      	ldrb	r3, [r3, #4]
 80050ce:	2b45      	cmp	r3, #69	; 0x45
 80050d0:	d10a      	bne.n	80050e8 <HAL_TIM_PeriodElapsedCallback+0x98c>
									&& isOwner == 1) {
 80050d2:	23f0      	movs	r3, #240	; 0xf0
 80050d4:	2218      	movs	r2, #24
 80050d6:	189b      	adds	r3, r3, r2
 80050d8:	19db      	adds	r3, r3, r7
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d103      	bne.n	80050e8 <HAL_TIM_PeriodElapsedCallback+0x98c>
								//WHERE API REQUEST RECEIVED
								isWhereApiCalled = 1;
 80050e0:	4b75      	ldr	r3, [pc, #468]	; (80052b8 <HAL_TIM_PeriodElapsedCallback+0xb5c>)
 80050e2:	2201      	movs	r2, #1
 80050e4:	701a      	strb	r2, [r3, #0]
 80050e6:	e163      	b.n	80053b0 <HAL_TIM_PeriodElapsedCallback+0xc54>
							} else if (sCommand[0] == 'S'
 80050e8:	4b71      	ldr	r3, [pc, #452]	; (80052b0 <HAL_TIM_PeriodElapsedCallback+0xb54>)
 80050ea:	22a4      	movs	r2, #164	; 0xa4
 80050ec:	0052      	lsls	r2, r2, #1
 80050ee:	189b      	adds	r3, r3, r2
 80050f0:	2118      	movs	r1, #24
 80050f2:	468c      	mov	ip, r1
 80050f4:	44bc      	add	ip, r7
 80050f6:	4463      	add	r3, ip
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	2b53      	cmp	r3, #83	; 0x53
 80050fc:	d143      	bne.n	8005186 <HAL_TIM_PeriodElapsedCallback+0xa2a>
									&& sCommand[1] == 'E'
 80050fe:	4b6c      	ldr	r3, [pc, #432]	; (80052b0 <HAL_TIM_PeriodElapsedCallback+0xb54>)
 8005100:	189b      	adds	r3, r3, r2
 8005102:	2118      	movs	r1, #24
 8005104:	468c      	mov	ip, r1
 8005106:	44bc      	add	ip, r7
 8005108:	4463      	add	r3, ip
 800510a:	785b      	ldrb	r3, [r3, #1]
 800510c:	2b45      	cmp	r3, #69	; 0x45
 800510e:	d13a      	bne.n	8005186 <HAL_TIM_PeriodElapsedCallback+0xa2a>
									&& sCommand[2] == 'R'
 8005110:	4b67      	ldr	r3, [pc, #412]	; (80052b0 <HAL_TIM_PeriodElapsedCallback+0xb54>)
 8005112:	189b      	adds	r3, r3, r2
 8005114:	2118      	movs	r1, #24
 8005116:	468c      	mov	ip, r1
 8005118:	44bc      	add	ip, r7
 800511a:	4463      	add	r3, ip
 800511c:	789b      	ldrb	r3, [r3, #2]
 800511e:	2b52      	cmp	r3, #82	; 0x52
 8005120:	d131      	bne.n	8005186 <HAL_TIM_PeriodElapsedCallback+0xa2a>
									&& sCommand[3] == 'V'
 8005122:	4b63      	ldr	r3, [pc, #396]	; (80052b0 <HAL_TIM_PeriodElapsedCallback+0xb54>)
 8005124:	189b      	adds	r3, r3, r2
 8005126:	2118      	movs	r1, #24
 8005128:	468c      	mov	ip, r1
 800512a:	44bc      	add	ip, r7
 800512c:	4463      	add	r3, ip
 800512e:	78db      	ldrb	r3, [r3, #3]
 8005130:	2b56      	cmp	r3, #86	; 0x56
 8005132:	d128      	bne.n	8005186 <HAL_TIM_PeriodElapsedCallback+0xa2a>
									&& sCommand[4] == 'E'
 8005134:	4b5e      	ldr	r3, [pc, #376]	; (80052b0 <HAL_TIM_PeriodElapsedCallback+0xb54>)
 8005136:	189b      	adds	r3, r3, r2
 8005138:	2118      	movs	r1, #24
 800513a:	468c      	mov	ip, r1
 800513c:	44bc      	add	ip, r7
 800513e:	4463      	add	r3, ip
 8005140:	791b      	ldrb	r3, [r3, #4]
 8005142:	2b45      	cmp	r3, #69	; 0x45
 8005144:	d11f      	bne.n	8005186 <HAL_TIM_PeriodElapsedCallback+0xa2a>
									&& sCommand[5] == 'R'
 8005146:	4b5a      	ldr	r3, [pc, #360]	; (80052b0 <HAL_TIM_PeriodElapsedCallback+0xb54>)
 8005148:	189b      	adds	r3, r3, r2
 800514a:	2118      	movs	r1, #24
 800514c:	468c      	mov	ip, r1
 800514e:	44bc      	add	ip, r7
 8005150:	4463      	add	r3, ip
 8005152:	795b      	ldrb	r3, [r3, #5]
 8005154:	2b52      	cmp	r3, #82	; 0x52
 8005156:	d116      	bne.n	8005186 <HAL_TIM_PeriodElapsedCallback+0xa2a>
									&& sCommand[6] == ','
 8005158:	4b55      	ldr	r3, [pc, #340]	; (80052b0 <HAL_TIM_PeriodElapsedCallback+0xb54>)
 800515a:	189b      	adds	r3, r3, r2
 800515c:	2218      	movs	r2, #24
 800515e:	4694      	mov	ip, r2
 8005160:	44bc      	add	ip, r7
 8005162:	4463      	add	r3, ip
 8005164:	799b      	ldrb	r3, [r3, #6]
 8005166:	2b2c      	cmp	r3, #44	; 0x2c
 8005168:	d10d      	bne.n	8005186 <HAL_TIM_PeriodElapsedCallback+0xa2a>
									&& isOwner == 1) {
 800516a:	23f0      	movs	r3, #240	; 0xf0
 800516c:	2218      	movs	r2, #24
 800516e:	189b      	adds	r3, r3, r2
 8005170:	19db      	adds	r3, r3, r7
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	2b01      	cmp	r3, #1
 8005176:	d106      	bne.n	8005186 <HAL_TIM_PeriodElapsedCallback+0xa2a>
								//SERVER CONFIG COMMAND RECEIVED
								check_command_SERVER(sCommand);///handle the SERVER CONFIG COMMAND
 8005178:	2340      	movs	r3, #64	; 0x40
 800517a:	189b      	adds	r3, r3, r2
 800517c:	19db      	adds	r3, r3, r7
 800517e:	0018      	movs	r0, r3
 8005180:	f003 f884 	bl	800828c <check_command_SERVER>
 8005184:	e114      	b.n	80053b0 <HAL_TIM_PeriodElapsedCallback+0xc54>

							} else if (sCommand[0] == 'T'
 8005186:	4b4a      	ldr	r3, [pc, #296]	; (80052b0 <HAL_TIM_PeriodElapsedCallback+0xb54>)
 8005188:	22a4      	movs	r2, #164	; 0xa4
 800518a:	0052      	lsls	r2, r2, #1
 800518c:	189b      	adds	r3, r3, r2
 800518e:	2118      	movs	r1, #24
 8005190:	468c      	mov	ip, r1
 8005192:	44bc      	add	ip, r7
 8005194:	4463      	add	r3, ip
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	2b54      	cmp	r3, #84	; 0x54
 800519a:	d13a      	bne.n	8005212 <HAL_TIM_PeriodElapsedCallback+0xab6>
									&& sCommand[1] == 'I'
 800519c:	4b44      	ldr	r3, [pc, #272]	; (80052b0 <HAL_TIM_PeriodElapsedCallback+0xb54>)
 800519e:	189b      	adds	r3, r3, r2
 80051a0:	2118      	movs	r1, #24
 80051a2:	468c      	mov	ip, r1
 80051a4:	44bc      	add	ip, r7
 80051a6:	4463      	add	r3, ip
 80051a8:	785b      	ldrb	r3, [r3, #1]
 80051aa:	2b49      	cmp	r3, #73	; 0x49
 80051ac:	d131      	bne.n	8005212 <HAL_TIM_PeriodElapsedCallback+0xab6>
									&& sCommand[2] == 'M'
 80051ae:	4b40      	ldr	r3, [pc, #256]	; (80052b0 <HAL_TIM_PeriodElapsedCallback+0xb54>)
 80051b0:	189b      	adds	r3, r3, r2
 80051b2:	2118      	movs	r1, #24
 80051b4:	468c      	mov	ip, r1
 80051b6:	44bc      	add	ip, r7
 80051b8:	4463      	add	r3, ip
 80051ba:	789b      	ldrb	r3, [r3, #2]
 80051bc:	2b4d      	cmp	r3, #77	; 0x4d
 80051be:	d128      	bne.n	8005212 <HAL_TIM_PeriodElapsedCallback+0xab6>
									&& sCommand[3] == 'E'
 80051c0:	4b3b      	ldr	r3, [pc, #236]	; (80052b0 <HAL_TIM_PeriodElapsedCallback+0xb54>)
 80051c2:	189b      	adds	r3, r3, r2
 80051c4:	2118      	movs	r1, #24
 80051c6:	468c      	mov	ip, r1
 80051c8:	44bc      	add	ip, r7
 80051ca:	4463      	add	r3, ip
 80051cc:	78db      	ldrb	r3, [r3, #3]
 80051ce:	2b45      	cmp	r3, #69	; 0x45
 80051d0:	d11f      	bne.n	8005212 <HAL_TIM_PeriodElapsedCallback+0xab6>
									&& sCommand[4] == 'R'
 80051d2:	4b37      	ldr	r3, [pc, #220]	; (80052b0 <HAL_TIM_PeriodElapsedCallback+0xb54>)
 80051d4:	189b      	adds	r3, r3, r2
 80051d6:	2118      	movs	r1, #24
 80051d8:	468c      	mov	ip, r1
 80051da:	44bc      	add	ip, r7
 80051dc:	4463      	add	r3, ip
 80051de:	791b      	ldrb	r3, [r3, #4]
 80051e0:	2b52      	cmp	r3, #82	; 0x52
 80051e2:	d116      	bne.n	8005212 <HAL_TIM_PeriodElapsedCallback+0xab6>
									&& sCommand[5] == ','
 80051e4:	4b32      	ldr	r3, [pc, #200]	; (80052b0 <HAL_TIM_PeriodElapsedCallback+0xb54>)
 80051e6:	189b      	adds	r3, r3, r2
 80051e8:	2218      	movs	r2, #24
 80051ea:	4694      	mov	ip, r2
 80051ec:	44bc      	add	ip, r7
 80051ee:	4463      	add	r3, ip
 80051f0:	795b      	ldrb	r3, [r3, #5]
 80051f2:	2b2c      	cmp	r3, #44	; 0x2c
 80051f4:	d10d      	bne.n	8005212 <HAL_TIM_PeriodElapsedCallback+0xab6>
									&& isOwner == 1) {
 80051f6:	23f0      	movs	r3, #240	; 0xf0
 80051f8:	2218      	movs	r2, #24
 80051fa:	189b      	adds	r3, r3, r2
 80051fc:	19db      	adds	r3, r3, r7
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d106      	bne.n	8005212 <HAL_TIM_PeriodElapsedCallback+0xab6>
								//TIMER CONFIG COMMAND RECEIVED
								check_command_TIMER(sCommand);///handle the TIMER CONFIG COMMAND
 8005204:	2340      	movs	r3, #64	; 0x40
 8005206:	189b      	adds	r3, r3, r2
 8005208:	19db      	adds	r3, r3, r7
 800520a:	0018      	movs	r0, r3
 800520c:	f003 f920 	bl	8008450 <check_command_TIMER>
 8005210:	e0ce      	b.n	80053b0 <HAL_TIM_PeriodElapsedCallback+0xc54>

							} else if (sCommand[0] == 'M'
 8005212:	4b27      	ldr	r3, [pc, #156]	; (80052b0 <HAL_TIM_PeriodElapsedCallback+0xb54>)
 8005214:	22a4      	movs	r2, #164	; 0xa4
 8005216:	0052      	lsls	r2, r2, #1
 8005218:	189b      	adds	r3, r3, r2
 800521a:	2118      	movs	r1, #24
 800521c:	468c      	mov	ip, r1
 800521e:	44bc      	add	ip, r7
 8005220:	4463      	add	r3, ip
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	2b4d      	cmp	r3, #77	; 0x4d
 8005226:	d149      	bne.n	80052bc <HAL_TIM_PeriodElapsedCallback+0xb60>
									&& sCommand[1] == 'S'
 8005228:	4b21      	ldr	r3, [pc, #132]	; (80052b0 <HAL_TIM_PeriodElapsedCallback+0xb54>)
 800522a:	189b      	adds	r3, r3, r2
 800522c:	2118      	movs	r1, #24
 800522e:	468c      	mov	ip, r1
 8005230:	44bc      	add	ip, r7
 8005232:	4463      	add	r3, ip
 8005234:	785b      	ldrb	r3, [r3, #1]
 8005236:	2b53      	cmp	r3, #83	; 0x53
 8005238:	d140      	bne.n	80052bc <HAL_TIM_PeriodElapsedCallback+0xb60>
									&& sCommand[2] == 'G'
 800523a:	4b1d      	ldr	r3, [pc, #116]	; (80052b0 <HAL_TIM_PeriodElapsedCallback+0xb54>)
 800523c:	189b      	adds	r3, r3, r2
 800523e:	2118      	movs	r1, #24
 8005240:	468c      	mov	ip, r1
 8005242:	44bc      	add	ip, r7
 8005244:	4463      	add	r3, ip
 8005246:	789b      	ldrb	r3, [r3, #2]
 8005248:	2b47      	cmp	r3, #71	; 0x47
 800524a:	d137      	bne.n	80052bc <HAL_TIM_PeriodElapsedCallback+0xb60>
									&& sCommand[3] == 'C'
 800524c:	4b18      	ldr	r3, [pc, #96]	; (80052b0 <HAL_TIM_PeriodElapsedCallback+0xb54>)
 800524e:	189b      	adds	r3, r3, r2
 8005250:	2118      	movs	r1, #24
 8005252:	468c      	mov	ip, r1
 8005254:	44bc      	add	ip, r7
 8005256:	4463      	add	r3, ip
 8005258:	78db      	ldrb	r3, [r3, #3]
 800525a:	2b43      	cmp	r3, #67	; 0x43
 800525c:	d12e      	bne.n	80052bc <HAL_TIM_PeriodElapsedCallback+0xb60>
									&& sCommand[4] == 'F'
 800525e:	4b14      	ldr	r3, [pc, #80]	; (80052b0 <HAL_TIM_PeriodElapsedCallback+0xb54>)
 8005260:	189b      	adds	r3, r3, r2
 8005262:	2118      	movs	r1, #24
 8005264:	468c      	mov	ip, r1
 8005266:	44bc      	add	ip, r7
 8005268:	4463      	add	r3, ip
 800526a:	791b      	ldrb	r3, [r3, #4]
 800526c:	2b46      	cmp	r3, #70	; 0x46
 800526e:	d125      	bne.n	80052bc <HAL_TIM_PeriodElapsedCallback+0xb60>
									&& sCommand[5] == 'G'
 8005270:	4b0f      	ldr	r3, [pc, #60]	; (80052b0 <HAL_TIM_PeriodElapsedCallback+0xb54>)
 8005272:	189b      	adds	r3, r3, r2
 8005274:	2118      	movs	r1, #24
 8005276:	468c      	mov	ip, r1
 8005278:	44bc      	add	ip, r7
 800527a:	4463      	add	r3, ip
 800527c:	795b      	ldrb	r3, [r3, #5]
 800527e:	2b47      	cmp	r3, #71	; 0x47
 8005280:	d11c      	bne.n	80052bc <HAL_TIM_PeriodElapsedCallback+0xb60>
									&& sCommand[6] == ','
 8005282:	4b0b      	ldr	r3, [pc, #44]	; (80052b0 <HAL_TIM_PeriodElapsedCallback+0xb54>)
 8005284:	189b      	adds	r3, r3, r2
 8005286:	2218      	movs	r2, #24
 8005288:	4694      	mov	ip, r2
 800528a:	44bc      	add	ip, r7
 800528c:	4463      	add	r3, ip
 800528e:	799b      	ldrb	r3, [r3, #6]
 8005290:	2b2c      	cmp	r3, #44	; 0x2c
 8005292:	d113      	bne.n	80052bc <HAL_TIM_PeriodElapsedCallback+0xb60>
									&& isOwner == 1) {
 8005294:	23f0      	movs	r3, #240	; 0xf0
 8005296:	2218      	movs	r2, #24
 8005298:	189b      	adds	r3, r3, r2
 800529a:	19db      	adds	r3, r3, r7
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d10c      	bne.n	80052bc <HAL_TIM_PeriodElapsedCallback+0xb60>
								//MSGCFG CONFIG COMMAND RECEIVED
								check_command_MSGCFG(sCommand);///handle the TIMER CONFIG COMMAND
 80052a2:	2340      	movs	r3, #64	; 0x40
 80052a4:	189b      	adds	r3, r3, r2
 80052a6:	19db      	adds	r3, r3, r7
 80052a8:	0018      	movs	r0, r3
 80052aa:	f003 f9d1 	bl	8008650 <check_command_MSGCFG>
 80052ae:	e07f      	b.n	80053b0 <HAL_TIM_PeriodElapsedCallback+0xc54>
 80052b0:	fffffef8 	.word	0xfffffef8
 80052b4:	20000014 	.word	0x20000014
 80052b8:	20000a2e 	.word	0x20000a2e
							} else if (sCommand[0] == 'R'
 80052bc:	4bd7      	ldr	r3, [pc, #860]	; (800561c <HAL_TIM_PeriodElapsedCallback+0xec0>)
 80052be:	22a4      	movs	r2, #164	; 0xa4
 80052c0:	0052      	lsls	r2, r2, #1
 80052c2:	189b      	adds	r3, r3, r2
 80052c4:	2118      	movs	r1, #24
 80052c6:	468c      	mov	ip, r1
 80052c8:	44bc      	add	ip, r7
 80052ca:	4463      	add	r3, ip
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	2b52      	cmp	r3, #82	; 0x52
 80052d0:	d13a      	bne.n	8005348 <HAL_TIM_PeriodElapsedCallback+0xbec>
									&& sCommand[1] == 'E'
 80052d2:	4bd2      	ldr	r3, [pc, #840]	; (800561c <HAL_TIM_PeriodElapsedCallback+0xec0>)
 80052d4:	189b      	adds	r3, r3, r2
 80052d6:	2118      	movs	r1, #24
 80052d8:	468c      	mov	ip, r1
 80052da:	44bc      	add	ip, r7
 80052dc:	4463      	add	r3, ip
 80052de:	785b      	ldrb	r3, [r3, #1]
 80052e0:	2b45      	cmp	r3, #69	; 0x45
 80052e2:	d131      	bne.n	8005348 <HAL_TIM_PeriodElapsedCallback+0xbec>
									&& sCommand[2] == 'L'
 80052e4:	4bcd      	ldr	r3, [pc, #820]	; (800561c <HAL_TIM_PeriodElapsedCallback+0xec0>)
 80052e6:	189b      	adds	r3, r3, r2
 80052e8:	2118      	movs	r1, #24
 80052ea:	468c      	mov	ip, r1
 80052ec:	44bc      	add	ip, r7
 80052ee:	4463      	add	r3, ip
 80052f0:	789b      	ldrb	r3, [r3, #2]
 80052f2:	2b4c      	cmp	r3, #76	; 0x4c
 80052f4:	d128      	bne.n	8005348 <HAL_TIM_PeriodElapsedCallback+0xbec>
									&& sCommand[3] == 'A'
 80052f6:	4bc9      	ldr	r3, [pc, #804]	; (800561c <HAL_TIM_PeriodElapsedCallback+0xec0>)
 80052f8:	189b      	adds	r3, r3, r2
 80052fa:	2118      	movs	r1, #24
 80052fc:	468c      	mov	ip, r1
 80052fe:	44bc      	add	ip, r7
 8005300:	4463      	add	r3, ip
 8005302:	78db      	ldrb	r3, [r3, #3]
 8005304:	2b41      	cmp	r3, #65	; 0x41
 8005306:	d11f      	bne.n	8005348 <HAL_TIM_PeriodElapsedCallback+0xbec>
									&& sCommand[4] == 'Y'
 8005308:	4bc4      	ldr	r3, [pc, #784]	; (800561c <HAL_TIM_PeriodElapsedCallback+0xec0>)
 800530a:	189b      	adds	r3, r3, r2
 800530c:	2118      	movs	r1, #24
 800530e:	468c      	mov	ip, r1
 8005310:	44bc      	add	ip, r7
 8005312:	4463      	add	r3, ip
 8005314:	791b      	ldrb	r3, [r3, #4]
 8005316:	2b59      	cmp	r3, #89	; 0x59
 8005318:	d116      	bne.n	8005348 <HAL_TIM_PeriodElapsedCallback+0xbec>
									&& sCommand[5] == ','
 800531a:	4bc0      	ldr	r3, [pc, #768]	; (800561c <HAL_TIM_PeriodElapsedCallback+0xec0>)
 800531c:	189b      	adds	r3, r3, r2
 800531e:	2218      	movs	r2, #24
 8005320:	4694      	mov	ip, r2
 8005322:	44bc      	add	ip, r7
 8005324:	4463      	add	r3, ip
 8005326:	795b      	ldrb	r3, [r3, #5]
 8005328:	2b2c      	cmp	r3, #44	; 0x2c
 800532a:	d10d      	bne.n	8005348 <HAL_TIM_PeriodElapsedCallback+0xbec>
									&& isOwner == 1) {
 800532c:	23f0      	movs	r3, #240	; 0xf0
 800532e:	2218      	movs	r2, #24
 8005330:	189b      	adds	r3, r3, r2
 8005332:	19db      	adds	r3, r3, r7
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	2b01      	cmp	r3, #1
 8005338:	d106      	bne.n	8005348 <HAL_TIM_PeriodElapsedCallback+0xbec>
								//TIMER CONFIG COMMAND RECEIVED
								check_command_RELAY(sCommand);///handle the TIMER CONFIG COMMAND
 800533a:	2340      	movs	r3, #64	; 0x40
 800533c:	189b      	adds	r3, r3, r2
 800533e:	19db      	adds	r3, r3, r7
 8005340:	0018      	movs	r0, r3
 8005342:	f003 f849 	bl	80083d8 <check_command_RELAY>
 8005346:	e033      	b.n	80053b0 <HAL_TIM_PeriodElapsedCallback+0xc54>
							} else if (sCommand[0] == 'I'
 8005348:	4bb4      	ldr	r3, [pc, #720]	; (800561c <HAL_TIM_PeriodElapsedCallback+0xec0>)
 800534a:	22a4      	movs	r2, #164	; 0xa4
 800534c:	0052      	lsls	r2, r2, #1
 800534e:	189b      	adds	r3, r3, r2
 8005350:	2118      	movs	r1, #24
 8005352:	468c      	mov	ip, r1
 8005354:	44bc      	add	ip, r7
 8005356:	4463      	add	r3, ip
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	2b49      	cmp	r3, #73	; 0x49
 800535c:	d128      	bne.n	80053b0 <HAL_TIM_PeriodElapsedCallback+0xc54>
									&& sCommand[1] == 'N'
 800535e:	4baf      	ldr	r3, [pc, #700]	; (800561c <HAL_TIM_PeriodElapsedCallback+0xec0>)
 8005360:	189b      	adds	r3, r3, r2
 8005362:	2118      	movs	r1, #24
 8005364:	468c      	mov	ip, r1
 8005366:	44bc      	add	ip, r7
 8005368:	4463      	add	r3, ip
 800536a:	785b      	ldrb	r3, [r3, #1]
 800536c:	2b4e      	cmp	r3, #78	; 0x4e
 800536e:	d11f      	bne.n	80053b0 <HAL_TIM_PeriodElapsedCallback+0xc54>
									&& sCommand[2] == 'F'
 8005370:	4baa      	ldr	r3, [pc, #680]	; (800561c <HAL_TIM_PeriodElapsedCallback+0xec0>)
 8005372:	189b      	adds	r3, r3, r2
 8005374:	2118      	movs	r1, #24
 8005376:	468c      	mov	ip, r1
 8005378:	44bc      	add	ip, r7
 800537a:	4463      	add	r3, ip
 800537c:	789b      	ldrb	r3, [r3, #2]
 800537e:	2b46      	cmp	r3, #70	; 0x46
 8005380:	d116      	bne.n	80053b0 <HAL_TIM_PeriodElapsedCallback+0xc54>
									&& sCommand[3] == 'O'
 8005382:	4ba6      	ldr	r3, [pc, #664]	; (800561c <HAL_TIM_PeriodElapsedCallback+0xec0>)
 8005384:	189b      	adds	r3, r3, r2
 8005386:	2218      	movs	r2, #24
 8005388:	4694      	mov	ip, r2
 800538a:	44bc      	add	ip, r7
 800538c:	4463      	add	r3, ip
 800538e:	78db      	ldrb	r3, [r3, #3]
 8005390:	2b4f      	cmp	r3, #79	; 0x4f
 8005392:	d10d      	bne.n	80053b0 <HAL_TIM_PeriodElapsedCallback+0xc54>
									&& isOwner == 1) {
 8005394:	23f0      	movs	r3, #240	; 0xf0
 8005396:	2218      	movs	r2, #24
 8005398:	189b      	adds	r3, r3, r2
 800539a:	19db      	adds	r3, r3, r7
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d106      	bne.n	80053b0 <HAL_TIM_PeriodElapsedCallback+0xc54>
								//INFO COMMAND RECEIVED
								isIMEIApiCalled = 1;
 80053a2:	4b9f      	ldr	r3, [pc, #636]	; (8005620 <HAL_TIM_PeriodElapsedCallback+0xec4>)
 80053a4:	2201      	movs	r2, #1
 80053a6:	701a      	strb	r2, [r3, #0]
 80053a8:	e002      	b.n	80053b0 <HAL_TIM_PeriodElapsedCallback+0xc54>
								if(sCommand[14] == cPin[0]
 80053aa:	46c0      	nop			; (mov r8, r8)
 80053ac:	e000      	b.n	80053b0 <HAL_TIM_PeriodElapsedCallback+0xc54>
								if (sCommand[4] == cPin[0]
 80053ae:	46c0      	nop			; (mov r8, r8)
							}
						}
					}
				}
			}
			clearit();
 80053b0:	f001 fcce 	bl	8006d50 <clearit>
		}
		if (commandCase == 0) {
 80053b4:	4b9b      	ldr	r3, [pc, #620]	; (8005624 <HAL_TIM_PeriodElapsedCallback+0xec8>)
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d172      	bne.n	80054a4 <HAL_TIM_PeriodElapsedCallback+0xd48>
			char *ptr;
			char *ptr2;
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 80053be:	2336      	movs	r3, #54	; 0x36
 80053c0:	33ff      	adds	r3, #255	; 0xff
 80053c2:	2218      	movs	r2, #24
 80053c4:	189b      	adds	r3, r3, r2
 80053c6:	19db      	adds	r3, r3, r7
 80053c8:	2200      	movs	r2, #0
 80053ca:	701a      	strb	r2, [r3, #0]
 80053cc:	e04e      	b.n	800546c <HAL_TIM_PeriodElapsedCallback+0xd10>
				ptr = strstr(responseBuffer[i], "CLOSED");
 80053ce:	2436      	movs	r4, #54	; 0x36
 80053d0:	34ff      	adds	r4, #255	; 0xff
 80053d2:	2618      	movs	r6, #24
 80053d4:	19a3      	adds	r3, r4, r6
 80053d6:	19db      	adds	r3, r3, r7
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	2232      	movs	r2, #50	; 0x32
 80053dc:	435a      	muls	r2, r3
 80053de:	4b92      	ldr	r3, [pc, #584]	; (8005628 <HAL_TIM_PeriodElapsedCallback+0xecc>)
 80053e0:	18d3      	adds	r3, r2, r3
 80053e2:	4a92      	ldr	r2, [pc, #584]	; (800562c <HAL_TIM_PeriodElapsedCallback+0xed0>)
 80053e4:	0011      	movs	r1, r2
 80053e6:	0018      	movs	r0, r3
 80053e8:	f009 fd7d 	bl	800eee6 <strstr>
 80053ec:	0003      	movs	r3, r0
 80053ee:	25e0      	movs	r5, #224	; 0xe0
 80053f0:	19aa      	adds	r2, r5, r6
 80053f2:	19d2      	adds	r2, r2, r7
 80053f4:	6013      	str	r3, [r2, #0]
				ptr2 = strstr(responseBuffer[i], "+PDP DEACT");
 80053f6:	19a3      	adds	r3, r4, r6
 80053f8:	19db      	adds	r3, r3, r7
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	2232      	movs	r2, #50	; 0x32
 80053fe:	435a      	muls	r2, r3
 8005400:	4b89      	ldr	r3, [pc, #548]	; (8005628 <HAL_TIM_PeriodElapsedCallback+0xecc>)
 8005402:	18d3      	adds	r3, r2, r3
 8005404:	4a8a      	ldr	r2, [pc, #552]	; (8005630 <HAL_TIM_PeriodElapsedCallback+0xed4>)
 8005406:	0011      	movs	r1, r2
 8005408:	0018      	movs	r0, r3
 800540a:	f009 fd6c 	bl	800eee6 <strstr>
 800540e:	0003      	movs	r3, r0
 8005410:	22dc      	movs	r2, #220	; 0xdc
 8005412:	1992      	adds	r2, r2, r6
 8005414:	19d2      	adds	r2, r2, r7
 8005416:	6013      	str	r3, [r2, #0]
				if (ptr != NULL) {
 8005418:	19ab      	adds	r3, r5, r6
 800541a:	19db      	adds	r3, r3, r7
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d009      	beq.n	8005436 <HAL_TIM_PeriodElapsedCallback+0xcda>
					// HAL_UART_Transmit(&huart4, "closed recv",
					// sizeof("closed recv"), 100);

					isLoggedIn = 0;
 8005422:	4b84      	ldr	r3, [pc, #528]	; (8005634 <HAL_TIM_PeriodElapsedCallback+0xed8>)
 8005424:	2200      	movs	r2, #0
 8005426:	701a      	strb	r2, [r3, #0]
					isDataMode = 0; //command mode activated
 8005428:	4b83      	ldr	r3, [pc, #524]	; (8005638 <HAL_TIM_PeriodElapsedCallback+0xedc>)
 800542a:	2200      	movs	r2, #0
 800542c:	701a      	strb	r2, [r3, #0]
					isTcpOpen = 0;
 800542e:	4b83      	ldr	r3, [pc, #524]	; (800563c <HAL_TIM_PeriodElapsedCallback+0xee0>)
 8005430:	2200      	movs	r2, #0
 8005432:	701a      	strb	r2, [r3, #0]
					break;
 8005434:	e022      	b.n	800547c <HAL_TIM_PeriodElapsedCallback+0xd20>
				}
				if (ptr2 != NULL) {
 8005436:	23dc      	movs	r3, #220	; 0xdc
 8005438:	2218      	movs	r2, #24
 800543a:	189b      	adds	r3, r3, r2
 800543c:	19db      	adds	r3, r3, r7
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d009      	beq.n	8005458 <HAL_TIM_PeriodElapsedCallback+0xcfc>
					// HAL_UART_Transmit(&huart4, "pdp deact recv",
					// sizeof("pdp deact"), 100);
					isLoggedIn = 0;
 8005444:	4b7b      	ldr	r3, [pc, #492]	; (8005634 <HAL_TIM_PeriodElapsedCallback+0xed8>)
 8005446:	2200      	movs	r2, #0
 8005448:	701a      	strb	r2, [r3, #0]
					isDataMode = 0; //command mode activated
 800544a:	4b7b      	ldr	r3, [pc, #492]	; (8005638 <HAL_TIM_PeriodElapsedCallback+0xedc>)
 800544c:	2200      	movs	r2, #0
 800544e:	701a      	strb	r2, [r3, #0]
					isTcpOpen = 0;
 8005450:	4b7a      	ldr	r3, [pc, #488]	; (800563c <HAL_TIM_PeriodElapsedCallback+0xee0>)
 8005452:	2200      	movs	r2, #0
 8005454:	701a      	strb	r2, [r3, #0]
					break;
 8005456:	e011      	b.n	800547c <HAL_TIM_PeriodElapsedCallback+0xd20>
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 8005458:	2136      	movs	r1, #54	; 0x36
 800545a:	31ff      	adds	r1, #255	; 0xff
 800545c:	2018      	movs	r0, #24
 800545e:	180b      	adds	r3, r1, r0
 8005460:	19db      	adds	r3, r3, r7
 8005462:	781a      	ldrb	r2, [r3, #0]
 8005464:	180b      	adds	r3, r1, r0
 8005466:	19db      	adds	r3, r3, r7
 8005468:	3201      	adds	r2, #1
 800546a:	701a      	strb	r2, [r3, #0]
 800546c:	2336      	movs	r3, #54	; 0x36
 800546e:	33ff      	adds	r3, #255	; 0xff
 8005470:	2218      	movs	r2, #24
 8005472:	189b      	adds	r3, r3, r2
 8005474:	19db      	adds	r3, r3, r7
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	2b05      	cmp	r3, #5
 800547a:	d9a8      	bls.n	80053ce <HAL_TIM_PeriodElapsedCallback+0xc72>
				}
			}
			HAL_TIM_Base_Stop_IT(&htim6);
 800547c:	4b70      	ldr	r3, [pc, #448]	; (8005640 <HAL_TIM_PeriodElapsedCallback+0xee4>)
 800547e:	0018      	movs	r0, r3
 8005480:	f006 fdce 	bl	800c020 <HAL_TIM_Base_Stop_IT>
			memset(responseBuffer, 0, sizeof(responseBuffer));
 8005484:	2396      	movs	r3, #150	; 0x96
 8005486:	005a      	lsls	r2, r3, #1
 8005488:	4b67      	ldr	r3, [pc, #412]	; (8005628 <HAL_TIM_PeriodElapsedCallback+0xecc>)
 800548a:	2100      	movs	r1, #0
 800548c:	0018      	movs	r0, r3
 800548e:	f009 fcd2 	bl	800ee36 <memset>
			lineCount = 0;
 8005492:	4b6c      	ldr	r3, [pc, #432]	; (8005644 <HAL_TIM_PeriodElapsedCallback+0xee8>)
 8005494:	2200      	movs	r2, #0
 8005496:	701a      	strb	r2, [r3, #0]
			charCount = 0;
 8005498:	4b6b      	ldr	r3, [pc, #428]	; (8005648 <HAL_TIM_PeriodElapsedCallback+0xeec>)
 800549a:	2200      	movs	r2, #0
 800549c:	701a      	strb	r2, [r3, #0]
			isStart = 0;
 800549e:	4b6b      	ldr	r3, [pc, #428]	; (800564c <HAL_TIM_PeriodElapsedCallback+0xef0>)
 80054a0:	2200      	movs	r2, #0
 80054a2:	701a      	strb	r2, [r3, #0]
		}

		// }
		if (commandCase == 1) {
 80054a4:	4b5f      	ldr	r3, [pc, #380]	; (8005624 <HAL_TIM_PeriodElapsedCallback+0xec8>)
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d000      	beq.n	80054b0 <HAL_TIM_PeriodElapsedCallback+0xd54>
 80054ae:	e0d9      	b.n	8005664 <HAL_TIM_PeriodElapsedCallback+0xf08>
			uint8_t tLine = 99;
 80054b0:	239a      	movs	r3, #154	; 0x9a
 80054b2:	005b      	lsls	r3, r3, #1
 80054b4:	2118      	movs	r1, #24
 80054b6:	185b      	adds	r3, r3, r1
 80054b8:	19db      	adds	r3, r3, r7
 80054ba:	2263      	movs	r2, #99	; 0x63
 80054bc:	701a      	strb	r2, [r3, #0]
			char *ptr;
			char *ptr2;
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 80054be:	2334      	movs	r3, #52	; 0x34
 80054c0:	33ff      	adds	r3, #255	; 0xff
 80054c2:	185b      	adds	r3, r3, r1
 80054c4:	19db      	adds	r3, r3, r7
 80054c6:	2200      	movs	r2, #0
 80054c8:	701a      	strb	r2, [r3, #0]
 80054ca:	e05b      	b.n	8005584 <HAL_TIM_PeriodElapsedCallback+0xe28>
				ptr = strstr(responseBuffer[i], "OK");
 80054cc:	2434      	movs	r4, #52	; 0x34
 80054ce:	34ff      	adds	r4, #255	; 0xff
 80054d0:	2618      	movs	r6, #24
 80054d2:	19a3      	adds	r3, r4, r6
 80054d4:	19db      	adds	r3, r3, r7
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	2232      	movs	r2, #50	; 0x32
 80054da:	435a      	muls	r2, r3
 80054dc:	4b52      	ldr	r3, [pc, #328]	; (8005628 <HAL_TIM_PeriodElapsedCallback+0xecc>)
 80054de:	18d3      	adds	r3, r2, r3
 80054e0:	4a5b      	ldr	r2, [pc, #364]	; (8005650 <HAL_TIM_PeriodElapsedCallback+0xef4>)
 80054e2:	0011      	movs	r1, r2
 80054e4:	0018      	movs	r0, r3
 80054e6:	f009 fcfe 	bl	800eee6 <strstr>
 80054ea:	0003      	movs	r3, r0
 80054ec:	25b4      	movs	r5, #180	; 0xb4
 80054ee:	19aa      	adds	r2, r5, r6
 80054f0:	19d2      	adds	r2, r2, r7
 80054f2:	6013      	str	r3, [r2, #0]
				ptr2 = strstr(responseBuffer[i], "ERROR");
 80054f4:	19a3      	adds	r3, r4, r6
 80054f6:	19db      	adds	r3, r3, r7
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	2232      	movs	r2, #50	; 0x32
 80054fc:	435a      	muls	r2, r3
 80054fe:	4b4a      	ldr	r3, [pc, #296]	; (8005628 <HAL_TIM_PeriodElapsedCallback+0xecc>)
 8005500:	18d3      	adds	r3, r2, r3
 8005502:	4a54      	ldr	r2, [pc, #336]	; (8005654 <HAL_TIM_PeriodElapsedCallback+0xef8>)
 8005504:	0011      	movs	r1, r2
 8005506:	0018      	movs	r0, r3
 8005508:	f009 fced 	bl	800eee6 <strstr>
 800550c:	0003      	movs	r3, r0
 800550e:	22b0      	movs	r2, #176	; 0xb0
 8005510:	0031      	movs	r1, r6
 8005512:	1852      	adds	r2, r2, r1
 8005514:	19d2      	adds	r2, r2, r7
 8005516:	6013      	str	r3, [r2, #0]

				if (ptr != NULL) {
 8005518:	186b      	adds	r3, r5, r1
 800551a:	19db      	adds	r3, r3, r7
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00e      	beq.n	8005540 <HAL_TIM_PeriodElapsedCallback+0xde4>
					tLine = i;
 8005522:	239a      	movs	r3, #154	; 0x9a
 8005524:	005b      	lsls	r3, r3, #1
 8005526:	185b      	adds	r3, r3, r1
 8005528:	19db      	adds	r3, r3, r7
 800552a:	1862      	adds	r2, r4, r1
 800552c:	19d2      	adds	r2, r2, r7
 800552e:	7812      	ldrb	r2, [r2, #0]
 8005530:	701a      	strb	r2, [r3, #0]
					tResponse = 'G';
 8005532:	2348      	movs	r3, #72	; 0x48
 8005534:	33ff      	adds	r3, #255	; 0xff
 8005536:	185b      	adds	r3, r3, r1
 8005538:	19db      	adds	r3, r3, r7
 800553a:	2247      	movs	r2, #71	; 0x47
 800553c:	701a      	strb	r2, [r3, #0]
					break;
 800553e:	e029      	b.n	8005594 <HAL_TIM_PeriodElapsedCallback+0xe38>
				}
				if (ptr2 != NULL) {
 8005540:	23b0      	movs	r3, #176	; 0xb0
 8005542:	2118      	movs	r1, #24
 8005544:	185b      	adds	r3, r3, r1
 8005546:	19db      	adds	r3, r3, r7
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d010      	beq.n	8005570 <HAL_TIM_PeriodElapsedCallback+0xe14>
					tLine = i;
 800554e:	239a      	movs	r3, #154	; 0x9a
 8005550:	005b      	lsls	r3, r3, #1
 8005552:	185b      	adds	r3, r3, r1
 8005554:	19db      	adds	r3, r3, r7
 8005556:	2234      	movs	r2, #52	; 0x34
 8005558:	32ff      	adds	r2, #255	; 0xff
 800555a:	1852      	adds	r2, r2, r1
 800555c:	19d2      	adds	r2, r2, r7
 800555e:	7812      	ldrb	r2, [r2, #0]
 8005560:	701a      	strb	r2, [r3, #0]
					tResponse = 'B';
 8005562:	2348      	movs	r3, #72	; 0x48
 8005564:	33ff      	adds	r3, #255	; 0xff
 8005566:	185b      	adds	r3, r3, r1
 8005568:	19db      	adds	r3, r3, r7
 800556a:	2242      	movs	r2, #66	; 0x42
 800556c:	701a      	strb	r2, [r3, #0]
					break;
 800556e:	e011      	b.n	8005594 <HAL_TIM_PeriodElapsedCallback+0xe38>
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 8005570:	2134      	movs	r1, #52	; 0x34
 8005572:	31ff      	adds	r1, #255	; 0xff
 8005574:	2018      	movs	r0, #24
 8005576:	180b      	adds	r3, r1, r0
 8005578:	19db      	adds	r3, r3, r7
 800557a:	781a      	ldrb	r2, [r3, #0]
 800557c:	180b      	adds	r3, r1, r0
 800557e:	19db      	adds	r3, r3, r7
 8005580:	3201      	adds	r2, #1
 8005582:	701a      	strb	r2, [r3, #0]
 8005584:	2334      	movs	r3, #52	; 0x34
 8005586:	33ff      	adds	r3, #255	; 0xff
 8005588:	2218      	movs	r2, #24
 800558a:	189b      	adds	r3, r3, r2
 800558c:	19db      	adds	r3, r3, r7
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	2b05      	cmp	r3, #5
 8005592:	d99b      	bls.n	80054cc <HAL_TIM_PeriodElapsedCallback+0xd70>
				}
			}
			if (tLine != 99) {
 8005594:	239a      	movs	r3, #154	; 0x9a
 8005596:	005b      	lsls	r3, r3, #1
 8005598:	2218      	movs	r2, #24
 800559a:	189b      	adds	r3, r3, r2
 800559c:	19db      	adds	r3, r3, r7
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	2b63      	cmp	r3, #99	; 0x63
 80055a2:	d021      	beq.n	80055e8 <HAL_TIM_PeriodElapsedCallback+0xe8c>
				if (tResponse == 'G') {
 80055a4:	2348      	movs	r3, #72	; 0x48
 80055a6:	33ff      	adds	r3, #255	; 0xff
 80055a8:	189b      	adds	r3, r3, r2
 80055aa:	19db      	adds	r3, r3, r7
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	2b47      	cmp	r3, #71	; 0x47
 80055b0:	d108      	bne.n	80055c4 <HAL_TIM_PeriodElapsedCallback+0xe68>
					isResponseOk = 1;
 80055b2:	4b29      	ldr	r3, [pc, #164]	; (8005658 <HAL_TIM_PeriodElapsedCallback+0xefc>)
 80055b4:	2201      	movs	r2, #1
 80055b6:	701a      	strb	r2, [r3, #0]
					clearit();
 80055b8:	f001 fbca 	bl	8006d50 <clearit>
					commandCase = 0;
 80055bc:	4b19      	ldr	r3, [pc, #100]	; (8005624 <HAL_TIM_PeriodElapsedCallback+0xec8>)
 80055be:	2200      	movs	r2, #0
 80055c0:	701a      	strb	r2, [r3, #0]
 80055c2:	e37c      	b.n	8005cbe <HAL_TIM_PeriodElapsedCallback+0x1562>

				} else if (tResponse == 'B') {
 80055c4:	2348      	movs	r3, #72	; 0x48
 80055c6:	33ff      	adds	r3, #255	; 0xff
 80055c8:	2218      	movs	r2, #24
 80055ca:	189b      	adds	r3, r3, r2
 80055cc:	19db      	adds	r3, r3, r7
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	2b42      	cmp	r3, #66	; 0x42
 80055d2:	d000      	beq.n	80055d6 <HAL_TIM_PeriodElapsedCallback+0xe7a>
 80055d4:	e373      	b.n	8005cbe <HAL_TIM_PeriodElapsedCallback+0x1562>
					isResponseOk = 0;
 80055d6:	4b20      	ldr	r3, [pc, #128]	; (8005658 <HAL_TIM_PeriodElapsedCallback+0xefc>)
 80055d8:	2200      	movs	r2, #0
 80055da:	701a      	strb	r2, [r3, #0]
					clearit();
 80055dc:	f001 fbb8 	bl	8006d50 <clearit>
					commandCase = 0;
 80055e0:	4b10      	ldr	r3, [pc, #64]	; (8005624 <HAL_TIM_PeriodElapsedCallback+0xec8>)
 80055e2:	2200      	movs	r2, #0
 80055e4:	701a      	strb	r2, [r3, #0]
 80055e6:	e36a      	b.n	8005cbe <HAL_TIM_PeriodElapsedCallback+0x1562>
				}
			} else {

				resTimeout--;
 80055e8:	4b1c      	ldr	r3, [pc, #112]	; (800565c <HAL_TIM_PeriodElapsedCallback+0xf00>)
 80055ea:	881b      	ldrh	r3, [r3, #0]
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	3b01      	subs	r3, #1
 80055f0:	b29a      	uxth	r2, r3
 80055f2:	4b1a      	ldr	r3, [pc, #104]	; (800565c <HAL_TIM_PeriodElapsedCallback+0xf00>)
 80055f4:	801a      	strh	r2, [r3, #0]
				if (resTimeout < 1) {
 80055f6:	4b19      	ldr	r3, [pc, #100]	; (800565c <HAL_TIM_PeriodElapsedCallback+0xf00>)
 80055f8:	881b      	ldrh	r3, [r3, #0]
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d000      	beq.n	8005602 <HAL_TIM_PeriodElapsedCallback+0xea6>
 8005600:	e35d      	b.n	8005cbe <HAL_TIM_PeriodElapsedCallback+0x1562>
					if (!recResponse) {
 8005602:	4b17      	ldr	r3, [pc, #92]	; (8005660 <HAL_TIM_PeriodElapsedCallback+0xf04>)
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	b2db      	uxtb	r3, r3
 8005608:	2b00      	cmp	r3, #0
 800560a:	d101      	bne.n	8005610 <HAL_TIM_PeriodElapsedCallback+0xeb4>
						//printf("TIMEOUT HASH TAG\n");
						rebootsystem();
 800560c:	f000 ffa6 	bl	800655c <rebootsystem>

					}
					clearit();
 8005610:	f001 fb9e 	bl	8006d50 <clearit>
					isResponseOk = 0;
 8005614:	4b10      	ldr	r3, [pc, #64]	; (8005658 <HAL_TIM_PeriodElapsedCallback+0xefc>)
 8005616:	2200      	movs	r2, #0
 8005618:	701a      	strb	r2, [r3, #0]
 800561a:	e350      	b.n	8005cbe <HAL_TIM_PeriodElapsedCallback+0x1562>
 800561c:	fffffef8 	.word	0xfffffef8
 8005620:	20000a2f 	.word	0x20000a2f
 8005624:	2000087f 	.word	0x2000087f
 8005628:	20000748 	.word	0x20000748
 800562c:	0801330c 	.word	0x0801330c
 8005630:	08013314 	.word	0x08013314
 8005634:	20000a30 	.word	0x20000a30
 8005638:	2000087a 	.word	0x2000087a
 800563c:	20000a2c 	.word	0x20000a2c
 8005640:	20000398 	.word	0x20000398
 8005644:	20000874 	.word	0x20000874
 8005648:	20000875 	.word	0x20000875
 800564c:	20000878 	.word	0x20000878
 8005650:	08013320 	.word	0x08013320
 8005654:	08013324 	.word	0x08013324
 8005658:	20000880 	.word	0x20000880
 800565c:	2000087c 	.word	0x2000087c
 8005660:	20000881 	.word	0x20000881

				}
			}
		} else if (commandCase == 2) {
 8005664:	4be3      	ldr	r3, [pc, #908]	; (80059f4 <HAL_TIM_PeriodElapsedCallback+0x1298>)
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	b2db      	uxtb	r3, r3
 800566a:	2b02      	cmp	r3, #2
 800566c:	d169      	bne.n	8005742 <HAL_TIM_PeriodElapsedCallback+0xfe6>
			//CPIN Case
			uint8_t tLine = 99;
 800566e:	2399      	movs	r3, #153	; 0x99
 8005670:	005b      	lsls	r3, r3, #1
 8005672:	2118      	movs	r1, #24
 8005674:	185b      	adds	r3, r3, r1
 8005676:	19db      	adds	r3, r3, r7
 8005678:	2263      	movs	r2, #99	; 0x63
 800567a:	701a      	strb	r2, [r3, #0]
			char *ptr;
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 800567c:	2332      	movs	r3, #50	; 0x32
 800567e:	33ff      	adds	r3, #255	; 0xff
 8005680:	185b      	adds	r3, r3, r1
 8005682:	19db      	adds	r3, r3, r7
 8005684:	2200      	movs	r2, #0
 8005686:	701a      	strb	r2, [r3, #0]
 8005688:	e02b      	b.n	80056e2 <HAL_TIM_PeriodElapsedCallback+0xf86>
				ptr = strstr(responseBuffer[i], "READY");
 800568a:	2432      	movs	r4, #50	; 0x32
 800568c:	34ff      	adds	r4, #255	; 0xff
 800568e:	2518      	movs	r5, #24
 8005690:	1963      	adds	r3, r4, r5
 8005692:	19db      	adds	r3, r3, r7
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	2232      	movs	r2, #50	; 0x32
 8005698:	435a      	muls	r2, r3
 800569a:	4bd7      	ldr	r3, [pc, #860]	; (80059f8 <HAL_TIM_PeriodElapsedCallback+0x129c>)
 800569c:	18d3      	adds	r3, r2, r3
 800569e:	4ad7      	ldr	r2, [pc, #860]	; (80059fc <HAL_TIM_PeriodElapsedCallback+0x12a0>)
 80056a0:	0011      	movs	r1, r2
 80056a2:	0018      	movs	r0, r3
 80056a4:	f009 fc1f 	bl	800eee6 <strstr>
 80056a8:	0003      	movs	r3, r0
 80056aa:	22b8      	movs	r2, #184	; 0xb8
 80056ac:	1951      	adds	r1, r2, r5
 80056ae:	19c9      	adds	r1, r1, r7
 80056b0:	600b      	str	r3, [r1, #0]
				if (ptr != NULL) {
 80056b2:	1953      	adds	r3, r2, r5
 80056b4:	19db      	adds	r3, r3, r7
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d008      	beq.n	80056ce <HAL_TIM_PeriodElapsedCallback+0xf72>
					tLine = i;
 80056bc:	2399      	movs	r3, #153	; 0x99
 80056be:	005b      	lsls	r3, r3, #1
 80056c0:	195b      	adds	r3, r3, r5
 80056c2:	19db      	adds	r3, r3, r7
 80056c4:	1962      	adds	r2, r4, r5
 80056c6:	19d2      	adds	r2, r2, r7
 80056c8:	7812      	ldrb	r2, [r2, #0]
 80056ca:	701a      	strb	r2, [r3, #0]
					break;
 80056cc:	e011      	b.n	80056f2 <HAL_TIM_PeriodElapsedCallback+0xf96>
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 80056ce:	2132      	movs	r1, #50	; 0x32
 80056d0:	31ff      	adds	r1, #255	; 0xff
 80056d2:	2018      	movs	r0, #24
 80056d4:	180b      	adds	r3, r1, r0
 80056d6:	19db      	adds	r3, r3, r7
 80056d8:	781a      	ldrb	r2, [r3, #0]
 80056da:	180b      	adds	r3, r1, r0
 80056dc:	19db      	adds	r3, r3, r7
 80056de:	3201      	adds	r2, #1
 80056e0:	701a      	strb	r2, [r3, #0]
 80056e2:	2332      	movs	r3, #50	; 0x32
 80056e4:	33ff      	adds	r3, #255	; 0xff
 80056e6:	2218      	movs	r2, #24
 80056e8:	189b      	adds	r3, r3, r2
 80056ea:	19db      	adds	r3, r3, r7
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	2b05      	cmp	r3, #5
 80056f0:	d9cb      	bls.n	800568a <HAL_TIM_PeriodElapsedCallback+0xf2e>
				}
			}
			if (tLine != 99) {
 80056f2:	2399      	movs	r3, #153	; 0x99
 80056f4:	005b      	lsls	r3, r3, #1
 80056f6:	2218      	movs	r2, #24
 80056f8:	189b      	adds	r3, r3, r2
 80056fa:	19db      	adds	r3, r3, r7
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	2b63      	cmp	r3, #99	; 0x63
 8005700:	d005      	beq.n	800570e <HAL_TIM_PeriodElapsedCallback+0xfb2>
				isResponseOk = 1;
 8005702:	4bbf      	ldr	r3, [pc, #764]	; (8005a00 <HAL_TIM_PeriodElapsedCallback+0x12a4>)
 8005704:	2201      	movs	r2, #1
 8005706:	701a      	strb	r2, [r3, #0]
				clearit();
 8005708:	f001 fb22 	bl	8006d50 <clearit>
 800570c:	e2d7      	b.n	8005cbe <HAL_TIM_PeriodElapsedCallback+0x1562>
			} else {
				resTimeout--;
 800570e:	4bbd      	ldr	r3, [pc, #756]	; (8005a04 <HAL_TIM_PeriodElapsedCallback+0x12a8>)
 8005710:	881b      	ldrh	r3, [r3, #0]
 8005712:	b29b      	uxth	r3, r3
 8005714:	3b01      	subs	r3, #1
 8005716:	b29a      	uxth	r2, r3
 8005718:	4bba      	ldr	r3, [pc, #744]	; (8005a04 <HAL_TIM_PeriodElapsedCallback+0x12a8>)
 800571a:	801a      	strh	r2, [r3, #0]
				if (resTimeout < 1) {
 800571c:	4bb9      	ldr	r3, [pc, #740]	; (8005a04 <HAL_TIM_PeriodElapsedCallback+0x12a8>)
 800571e:	881b      	ldrh	r3, [r3, #0]
 8005720:	b29b      	uxth	r3, r3
 8005722:	2b00      	cmp	r3, #0
 8005724:	d000      	beq.n	8005728 <HAL_TIM_PeriodElapsedCallback+0xfcc>
 8005726:	e2ca      	b.n	8005cbe <HAL_TIM_PeriodElapsedCallback+0x1562>
					if (!recResponse) {
 8005728:	4bb7      	ldr	r3, [pc, #732]	; (8005a08 <HAL_TIM_PeriodElapsedCallback+0x12ac>)
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	b2db      	uxtb	r3, r3
 800572e:	2b00      	cmp	r3, #0
 8005730:	d101      	bne.n	8005736 <HAL_TIM_PeriodElapsedCallback+0xfda>
						rebootsystem();
 8005732:	f000 ff13 	bl	800655c <rebootsystem>

					}
					clearit();
 8005736:	f001 fb0b 	bl	8006d50 <clearit>
					isResponseOk = 0;
 800573a:	4bb1      	ldr	r3, [pc, #708]	; (8005a00 <HAL_TIM_PeriodElapsedCallback+0x12a4>)
 800573c:	2200      	movs	r2, #0
 800573e:	701a      	strb	r2, [r3, #0]
 8005740:	e2bd      	b.n	8005cbe <HAL_TIM_PeriodElapsedCallback+0x1562>
				}
			}
		} else if (commandCase == 3) {
 8005742:	4bac      	ldr	r3, [pc, #688]	; (80059f4 <HAL_TIM_PeriodElapsedCallback+0x1298>)
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	b2db      	uxtb	r3, r3
 8005748:	2b03      	cmp	r3, #3
 800574a:	d000      	beq.n	800574e <HAL_TIM_PeriodElapsedCallback+0xff2>
 800574c:	e0b6      	b.n	80058bc <HAL_TIM_PeriodElapsedCallback+0x1160>
			// CREG? / CGREG? case
			uint8_t tLine = 99;
 800574e:	2398      	movs	r3, #152	; 0x98
 8005750:	005b      	lsls	r3, r3, #1
 8005752:	2118      	movs	r1, #24
 8005754:	185b      	adds	r3, r3, r1
 8005756:	19db      	adds	r3, r3, r7
 8005758:	2263      	movs	r2, #99	; 0x63
 800575a:	701a      	strb	r2, [r3, #0]
			char *ptr;
			char *ptr2;
			char *ptr3;
			char *ptr4;
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 800575c:	2330      	movs	r3, #48	; 0x30
 800575e:	33ff      	adds	r3, #255	; 0xff
 8005760:	185b      	adds	r3, r3, r1
 8005762:	19db      	adds	r3, r3, r7
 8005764:	2200      	movs	r2, #0
 8005766:	701a      	strb	r2, [r3, #0]
 8005768:	e075      	b.n	8005856 <HAL_TIM_PeriodElapsedCallback+0x10fa>
				ptr = strstr(responseBuffer[i], "+CREG: 0,1");
 800576a:	2430      	movs	r4, #48	; 0x30
 800576c:	34ff      	adds	r4, #255	; 0xff
 800576e:	2618      	movs	r6, #24
 8005770:	19a3      	adds	r3, r4, r6
 8005772:	19db      	adds	r3, r3, r7
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	2232      	movs	r2, #50	; 0x32
 8005778:	435a      	muls	r2, r3
 800577a:	4b9f      	ldr	r3, [pc, #636]	; (80059f8 <HAL_TIM_PeriodElapsedCallback+0x129c>)
 800577c:	18d3      	adds	r3, r2, r3
 800577e:	4aa3      	ldr	r2, [pc, #652]	; (8005a0c <HAL_TIM_PeriodElapsedCallback+0x12b0>)
 8005780:	0011      	movs	r1, r2
 8005782:	0018      	movs	r0, r3
 8005784:	f009 fbaf 	bl	800eee6 <strstr>
 8005788:	0003      	movs	r3, r0
 800578a:	25c8      	movs	r5, #200	; 0xc8
 800578c:	19aa      	adds	r2, r5, r6
 800578e:	19d2      	adds	r2, r2, r7
 8005790:	6013      	str	r3, [r2, #0]
				ptr2 = strstr(responseBuffer[i], "+CREG: 0,5");
 8005792:	19a3      	adds	r3, r4, r6
 8005794:	19db      	adds	r3, r3, r7
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	2232      	movs	r2, #50	; 0x32
 800579a:	435a      	muls	r2, r3
 800579c:	4b96      	ldr	r3, [pc, #600]	; (80059f8 <HAL_TIM_PeriodElapsedCallback+0x129c>)
 800579e:	18d3      	adds	r3, r2, r3
 80057a0:	4a9b      	ldr	r2, [pc, #620]	; (8005a10 <HAL_TIM_PeriodElapsedCallback+0x12b4>)
 80057a2:	0011      	movs	r1, r2
 80057a4:	0018      	movs	r0, r3
 80057a6:	f009 fb9e 	bl	800eee6 <strstr>
 80057aa:	0003      	movs	r3, r0
 80057ac:	26c4      	movs	r6, #196	; 0xc4
 80057ae:	2018      	movs	r0, #24
 80057b0:	1832      	adds	r2, r6, r0
 80057b2:	19d2      	adds	r2, r2, r7
 80057b4:	6013      	str	r3, [r2, #0]
				ptr3 = strstr(responseBuffer[i], "+CGREG: 0,1");
 80057b6:	1823      	adds	r3, r4, r0
 80057b8:	19db      	adds	r3, r3, r7
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	2232      	movs	r2, #50	; 0x32
 80057be:	435a      	muls	r2, r3
 80057c0:	4b8d      	ldr	r3, [pc, #564]	; (80059f8 <HAL_TIM_PeriodElapsedCallback+0x129c>)
 80057c2:	18d3      	adds	r3, r2, r3
 80057c4:	4a93      	ldr	r2, [pc, #588]	; (8005a14 <HAL_TIM_PeriodElapsedCallback+0x12b8>)
 80057c6:	0011      	movs	r1, r2
 80057c8:	0018      	movs	r0, r3
 80057ca:	f009 fb8c 	bl	800eee6 <strstr>
 80057ce:	0003      	movs	r3, r0
 80057d0:	22c0      	movs	r2, #192	; 0xc0
 80057d2:	2018      	movs	r0, #24
 80057d4:	1812      	adds	r2, r2, r0
 80057d6:	19d1      	adds	r1, r2, r7
 80057d8:	600b      	str	r3, [r1, #0]
				ptr4 = strstr(responseBuffer[i], "+CGREG: 0,5");
 80057da:	1823      	adds	r3, r4, r0
 80057dc:	19db      	adds	r3, r3, r7
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	2232      	movs	r2, #50	; 0x32
 80057e2:	435a      	muls	r2, r3
 80057e4:	4b84      	ldr	r3, [pc, #528]	; (80059f8 <HAL_TIM_PeriodElapsedCallback+0x129c>)
 80057e6:	18d3      	adds	r3, r2, r3
 80057e8:	4a8b      	ldr	r2, [pc, #556]	; (8005a18 <HAL_TIM_PeriodElapsedCallback+0x12bc>)
 80057ea:	0011      	movs	r1, r2
 80057ec:	0018      	movs	r0, r3
 80057ee:	f009 fb7a 	bl	800eee6 <strstr>
 80057f2:	0003      	movs	r3, r0
 80057f4:	21bc      	movs	r1, #188	; 0xbc
 80057f6:	2218      	movs	r2, #24
 80057f8:	1888      	adds	r0, r1, r2
 80057fa:	19c0      	adds	r0, r0, r7
 80057fc:	6003      	str	r3, [r0, #0]
				if (ptr != NULL || ptr2 != NULL || ptr3 != NULL || ptr4 != NULL) {
 80057fe:	0010      	movs	r0, r2
 8005800:	182b      	adds	r3, r5, r0
 8005802:	19db      	adds	r3, r3, r7
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d10f      	bne.n	800582a <HAL_TIM_PeriodElapsedCallback+0x10ce>
 800580a:	1833      	adds	r3, r6, r0
 800580c:	19db      	adds	r3, r3, r7
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d10a      	bne.n	800582a <HAL_TIM_PeriodElapsedCallback+0x10ce>
 8005814:	22c0      	movs	r2, #192	; 0xc0
 8005816:	1813      	adds	r3, r2, r0
 8005818:	19db      	adds	r3, r3, r7
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d104      	bne.n	800582a <HAL_TIM_PeriodElapsedCallback+0x10ce>
 8005820:	180b      	adds	r3, r1, r0
 8005822:	19db      	adds	r3, r3, r7
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00b      	beq.n	8005842 <HAL_TIM_PeriodElapsedCallback+0x10e6>
					tLine = i;
 800582a:	2398      	movs	r3, #152	; 0x98
 800582c:	005b      	lsls	r3, r3, #1
 800582e:	2118      	movs	r1, #24
 8005830:	185b      	adds	r3, r3, r1
 8005832:	19db      	adds	r3, r3, r7
 8005834:	2230      	movs	r2, #48	; 0x30
 8005836:	32ff      	adds	r2, #255	; 0xff
 8005838:	1852      	adds	r2, r2, r1
 800583a:	19d2      	adds	r2, r2, r7
 800583c:	7812      	ldrb	r2, [r2, #0]
 800583e:	701a      	strb	r2, [r3, #0]
					break;
 8005840:	e011      	b.n	8005866 <HAL_TIM_PeriodElapsedCallback+0x110a>
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 8005842:	2130      	movs	r1, #48	; 0x30
 8005844:	31ff      	adds	r1, #255	; 0xff
 8005846:	2018      	movs	r0, #24
 8005848:	180b      	adds	r3, r1, r0
 800584a:	19db      	adds	r3, r3, r7
 800584c:	781a      	ldrb	r2, [r3, #0]
 800584e:	180b      	adds	r3, r1, r0
 8005850:	19db      	adds	r3, r3, r7
 8005852:	3201      	adds	r2, #1
 8005854:	701a      	strb	r2, [r3, #0]
 8005856:	2330      	movs	r3, #48	; 0x30
 8005858:	33ff      	adds	r3, #255	; 0xff
 800585a:	2218      	movs	r2, #24
 800585c:	189b      	adds	r3, r3, r2
 800585e:	19db      	adds	r3, r3, r7
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	2b05      	cmp	r3, #5
 8005864:	d981      	bls.n	800576a <HAL_TIM_PeriodElapsedCallback+0x100e>
				}
			}
			if (tLine != 99) {
 8005866:	2398      	movs	r3, #152	; 0x98
 8005868:	005b      	lsls	r3, r3, #1
 800586a:	2218      	movs	r2, #24
 800586c:	189b      	adds	r3, r3, r2
 800586e:	19db      	adds	r3, r3, r7
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	2b63      	cmp	r3, #99	; 0x63
 8005874:	d008      	beq.n	8005888 <HAL_TIM_PeriodElapsedCallback+0x112c>
				isReg = 1;
 8005876:	4b69      	ldr	r3, [pc, #420]	; (8005a1c <HAL_TIM_PeriodElapsedCallback+0x12c0>)
 8005878:	2201      	movs	r2, #1
 800587a:	701a      	strb	r2, [r3, #0]
				isResponseOk = 1;
 800587c:	4b60      	ldr	r3, [pc, #384]	; (8005a00 <HAL_TIM_PeriodElapsedCallback+0x12a4>)
 800587e:	2201      	movs	r2, #1
 8005880:	701a      	strb	r2, [r3, #0]
				clearit();
 8005882:	f001 fa65 	bl	8006d50 <clearit>
 8005886:	e21a      	b.n	8005cbe <HAL_TIM_PeriodElapsedCallback+0x1562>

			} else {
				resTimeout--;
 8005888:	4b5e      	ldr	r3, [pc, #376]	; (8005a04 <HAL_TIM_PeriodElapsedCallback+0x12a8>)
 800588a:	881b      	ldrh	r3, [r3, #0]
 800588c:	b29b      	uxth	r3, r3
 800588e:	3b01      	subs	r3, #1
 8005890:	b29a      	uxth	r2, r3
 8005892:	4b5c      	ldr	r3, [pc, #368]	; (8005a04 <HAL_TIM_PeriodElapsedCallback+0x12a8>)
 8005894:	801a      	strh	r2, [r3, #0]
				if (resTimeout < 1) {
 8005896:	4b5b      	ldr	r3, [pc, #364]	; (8005a04 <HAL_TIM_PeriodElapsedCallback+0x12a8>)
 8005898:	881b      	ldrh	r3, [r3, #0]
 800589a:	b29b      	uxth	r3, r3
 800589c:	2b00      	cmp	r3, #0
 800589e:	d000      	beq.n	80058a2 <HAL_TIM_PeriodElapsedCallback+0x1146>
 80058a0:	e20d      	b.n	8005cbe <HAL_TIM_PeriodElapsedCallback+0x1562>
					if (!recResponse) {
 80058a2:	4b59      	ldr	r3, [pc, #356]	; (8005a08 <HAL_TIM_PeriodElapsedCallback+0x12ac>)
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d101      	bne.n	80058b0 <HAL_TIM_PeriodElapsedCallback+0x1154>
						rebootsystem();
 80058ac:	f000 fe56 	bl	800655c <rebootsystem>
					}
					clearit();
 80058b0:	f001 fa4e 	bl	8006d50 <clearit>
					isResponseOk = 0;
 80058b4:	4b52      	ldr	r3, [pc, #328]	; (8005a00 <HAL_TIM_PeriodElapsedCallback+0x12a4>)
 80058b6:	2200      	movs	r2, #0
 80058b8:	701a      	strb	r2, [r3, #0]
 80058ba:	e200      	b.n	8005cbe <HAL_TIM_PeriodElapsedCallback+0x1562>
				}
			}
		}

		else if (commandCase == 4) {
 80058bc:	4b4d      	ldr	r3, [pc, #308]	; (80059f4 <HAL_TIM_PeriodElapsedCallback+0x1298>)
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	2b04      	cmp	r3, #4
 80058c4:	d000      	beq.n	80058c8 <HAL_TIM_PeriodElapsedCallback+0x116c>
 80058c6:	e10b      	b.n	8005ae0 <HAL_TIM_PeriodElapsedCallback+0x1384>
			//CGSN (IMEI) case
			uint8_t tLine = 99;
 80058c8:	2397      	movs	r3, #151	; 0x97
 80058ca:	005b      	lsls	r3, r3, #1
 80058cc:	2118      	movs	r1, #24
 80058ce:	185b      	adds	r3, r3, r1
 80058d0:	19db      	adds	r3, r3, r7
 80058d2:	2263      	movs	r2, #99	; 0x63
 80058d4:	701a      	strb	r2, [r3, #0]
			char *ptr;
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 80058d6:	232e      	movs	r3, #46	; 0x2e
 80058d8:	33ff      	adds	r3, #255	; 0xff
 80058da:	185b      	adds	r3, r3, r1
 80058dc:	19db      	adds	r3, r3, r7
 80058de:	2200      	movs	r2, #0
 80058e0:	701a      	strb	r2, [r3, #0]
 80058e2:	e02b      	b.n	800593c <HAL_TIM_PeriodElapsedCallback+0x11e0>
				ptr = strstr(responseBuffer[i], "OK");
 80058e4:	242e      	movs	r4, #46	; 0x2e
 80058e6:	34ff      	adds	r4, #255	; 0xff
 80058e8:	2518      	movs	r5, #24
 80058ea:	1963      	adds	r3, r4, r5
 80058ec:	19db      	adds	r3, r3, r7
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	2232      	movs	r2, #50	; 0x32
 80058f2:	435a      	muls	r2, r3
 80058f4:	4b40      	ldr	r3, [pc, #256]	; (80059f8 <HAL_TIM_PeriodElapsedCallback+0x129c>)
 80058f6:	18d3      	adds	r3, r2, r3
 80058f8:	4a49      	ldr	r2, [pc, #292]	; (8005a20 <HAL_TIM_PeriodElapsedCallback+0x12c4>)
 80058fa:	0011      	movs	r1, r2
 80058fc:	0018      	movs	r0, r3
 80058fe:	f009 faf2 	bl	800eee6 <strstr>
 8005902:	0003      	movs	r3, r0
 8005904:	22cc      	movs	r2, #204	; 0xcc
 8005906:	1951      	adds	r1, r2, r5
 8005908:	19c9      	adds	r1, r1, r7
 800590a:	600b      	str	r3, [r1, #0]
				if (ptr != NULL) {
 800590c:	1953      	adds	r3, r2, r5
 800590e:	19db      	adds	r3, r3, r7
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d008      	beq.n	8005928 <HAL_TIM_PeriodElapsedCallback+0x11cc>
					tLine = i;
 8005916:	2397      	movs	r3, #151	; 0x97
 8005918:	005b      	lsls	r3, r3, #1
 800591a:	195b      	adds	r3, r3, r5
 800591c:	19db      	adds	r3, r3, r7
 800591e:	1962      	adds	r2, r4, r5
 8005920:	19d2      	adds	r2, r2, r7
 8005922:	7812      	ldrb	r2, [r2, #0]
 8005924:	701a      	strb	r2, [r3, #0]
					break;
 8005926:	e011      	b.n	800594c <HAL_TIM_PeriodElapsedCallback+0x11f0>
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 8005928:	212e      	movs	r1, #46	; 0x2e
 800592a:	31ff      	adds	r1, #255	; 0xff
 800592c:	2018      	movs	r0, #24
 800592e:	180b      	adds	r3, r1, r0
 8005930:	19db      	adds	r3, r3, r7
 8005932:	781a      	ldrb	r2, [r3, #0]
 8005934:	180b      	adds	r3, r1, r0
 8005936:	19db      	adds	r3, r3, r7
 8005938:	3201      	adds	r2, #1
 800593a:	701a      	strb	r2, [r3, #0]
 800593c:	232e      	movs	r3, #46	; 0x2e
 800593e:	33ff      	adds	r3, #255	; 0xff
 8005940:	2218      	movs	r2, #24
 8005942:	189b      	adds	r3, r3, r2
 8005944:	19db      	adds	r3, r3, r7
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	2b05      	cmp	r3, #5
 800594a:	d9cb      	bls.n	80058e4 <HAL_TIM_PeriodElapsedCallback+0x1188>
				}
			}
			if (tLine != 99) {
 800594c:	2497      	movs	r4, #151	; 0x97
 800594e:	0064      	lsls	r4, r4, #1
 8005950:	2118      	movs	r1, #24
 8005952:	1863      	adds	r3, r4, r1
 8005954:	19db      	adds	r3, r3, r7
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	2b63      	cmp	r3, #99	; 0x63
 800595a:	d100      	bne.n	800595e <HAL_TIM_PeriodElapsedCallback+0x1202>
 800595c:	e0a6      	b.n	8005aac <HAL_TIM_PeriodElapsedCallback+0x1350>
				isResponseOk = 1;
 800595e:	4b28      	ldr	r3, [pc, #160]	; (8005a00 <HAL_TIM_PeriodElapsedCallback+0x12a4>)
 8005960:	2201      	movs	r2, #1
 8005962:	701a      	strb	r2, [r3, #0]
				//to-do with that line
				char p[10];
				memset(p, 0, sizeof(p));
 8005964:	2588      	movs	r5, #136	; 0x88
 8005966:	000e      	movs	r6, r1
 8005968:	186b      	adds	r3, r5, r1
 800596a:	19db      	adds	r3, r3, r7
 800596c:	220a      	movs	r2, #10
 800596e:	2100      	movs	r1, #0
 8005970:	0018      	movs	r0, r3
 8005972:	f009 fa60 	bl	800ee36 <memset>
				char *myt;
				myt = responseBuffer[tLine - 2];
 8005976:	0031      	movs	r1, r6
 8005978:	1863      	adds	r3, r4, r1
 800597a:	19db      	adds	r3, r3, r7
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	3b02      	subs	r3, #2
 8005980:	2232      	movs	r2, #50	; 0x32
 8005982:	435a      	muls	r2, r3
 8005984:	4b1c      	ldr	r3, [pc, #112]	; (80059f8 <HAL_TIM_PeriodElapsedCallback+0x129c>)
 8005986:	18d3      	adds	r3, r2, r3
 8005988:	2494      	movs	r4, #148	; 0x94
 800598a:	0064      	lsls	r4, r4, #1
 800598c:	000e      	movs	r6, r1
 800598e:	19a2      	adds	r2, r4, r6
 8005990:	19d2      	adds	r2, r2, r7
 8005992:	6013      	str	r3, [r2, #0]

				//make a copy of text based imei
				memset(imeiChar,0,sizeof(imeiChar));
 8005994:	4b23      	ldr	r3, [pc, #140]	; (8005a24 <HAL_TIM_PeriodElapsedCallback+0x12c8>)
 8005996:	2214      	movs	r2, #20
 8005998:	2100      	movs	r1, #0
 800599a:	0018      	movs	r0, r3
 800599c:	f009 fa4b 	bl	800ee36 <memset>
				strncpy(imeiChar,myt,15);
 80059a0:	19a3      	adds	r3, r4, r6
 80059a2:	19db      	adds	r3, r3, r7
 80059a4:	6819      	ldr	r1, [r3, #0]
 80059a6:	4b1f      	ldr	r3, [pc, #124]	; (8005a24 <HAL_TIM_PeriodElapsedCallback+0x12c8>)
 80059a8:	220f      	movs	r2, #15
 80059aa:	0018      	movs	r0, r3
 80059ac:	f009 fa87 	bl	800eebe <strncpy>
				//-------------------------------------

				strncpy(p, myt, 1);
 80059b0:	19a3      	adds	r3, r4, r6
 80059b2:	19db      	adds	r3, r3, r7
 80059b4:	6819      	ldr	r1, [r3, #0]
 80059b6:	19ab      	adds	r3, r5, r6
 80059b8:	19db      	adds	r3, r3, r7
 80059ba:	2201      	movs	r2, #1
 80059bc:	0018      	movs	r0, r3
 80059be:	f009 fa7e 	bl	800eebe <strncpy>
				imei[0] = (int) strtol(p, NULL, 16);
 80059c2:	19ab      	adds	r3, r5, r6
 80059c4:	19db      	adds	r3, r3, r7
 80059c6:	2210      	movs	r2, #16
 80059c8:	2100      	movs	r1, #0
 80059ca:	0018      	movs	r0, r3
 80059cc:	f00a f9b2 	bl	800fd34 <strtol>
 80059d0:	0003      	movs	r3, r0
 80059d2:	b2da      	uxtb	r2, r3
 80059d4:	4b14      	ldr	r3, [pc, #80]	; (8005a28 <HAL_TIM_PeriodElapsedCallback+0x12cc>)
 80059d6:	701a      	strb	r2, [r3, #0]
				myt++;
 80059d8:	19a3      	adds	r3, r4, r6
 80059da:	19db      	adds	r3, r3, r7
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	3301      	adds	r3, #1
 80059e0:	19a2      	adds	r2, r4, r6
 80059e2:	19d2      	adds	r2, r2, r7
 80059e4:	6013      	str	r3, [r2, #0]
				for (int i = 1; i < 8; i++) {
 80059e6:	2301      	movs	r3, #1
 80059e8:	2292      	movs	r2, #146	; 0x92
 80059ea:	0052      	lsls	r2, r2, #1
 80059ec:	1992      	adds	r2, r2, r6
 80059ee:	19d2      	adds	r2, r2, r7
 80059f0:	6013      	str	r3, [r2, #0]
 80059f2:	e050      	b.n	8005a96 <HAL_TIM_PeriodElapsedCallback+0x133a>
 80059f4:	2000087f 	.word	0x2000087f
 80059f8:	20000748 	.word	0x20000748
 80059fc:	0801332c 	.word	0x0801332c
 8005a00:	20000880 	.word	0x20000880
 8005a04:	2000087c 	.word	0x2000087c
 8005a08:	20000881 	.word	0x20000881
 8005a0c:	08013334 	.word	0x08013334
 8005a10:	08013340 	.word	0x08013340
 8005a14:	0801334c 	.word	0x0801334c
 8005a18:	08013358 	.word	0x08013358
 8005a1c:	20000a2d 	.word	0x20000a2d
 8005a20:	08013320 	.word	0x08013320
 8005a24:	2000088c 	.word	0x2000088c
 8005a28:	20000884 	.word	0x20000884
					memset(p, 0, sizeof(p));
 8005a2c:	2488      	movs	r4, #136	; 0x88
 8005a2e:	2618      	movs	r6, #24
 8005a30:	19a3      	adds	r3, r4, r6
 8005a32:	19db      	adds	r3, r3, r7
 8005a34:	220a      	movs	r2, #10
 8005a36:	2100      	movs	r1, #0
 8005a38:	0018      	movs	r0, r3
 8005a3a:	f009 f9fc 	bl	800ee36 <memset>
					strncpy(p, myt, 2);
 8005a3e:	2594      	movs	r5, #148	; 0x94
 8005a40:	006d      	lsls	r5, r5, #1
 8005a42:	19ab      	adds	r3, r5, r6
 8005a44:	19db      	adds	r3, r3, r7
 8005a46:	6819      	ldr	r1, [r3, #0]
 8005a48:	19a3      	adds	r3, r4, r6
 8005a4a:	19db      	adds	r3, r3, r7
 8005a4c:	2202      	movs	r2, #2
 8005a4e:	0018      	movs	r0, r3
 8005a50:	f009 fa35 	bl	800eebe <strncpy>
					imei[i] = (int) strtol(p, NULL, 16);
 8005a54:	19a3      	adds	r3, r4, r6
 8005a56:	19db      	adds	r3, r3, r7
 8005a58:	2210      	movs	r2, #16
 8005a5a:	2100      	movs	r1, #0
 8005a5c:	0018      	movs	r0, r3
 8005a5e:	f00a f969 	bl	800fd34 <strtol>
 8005a62:	0003      	movs	r3, r0
 8005a64:	b2d9      	uxtb	r1, r3
 8005a66:	4add      	ldr	r2, [pc, #884]	; (8005ddc <HAL_TIM_PeriodElapsedCallback+0x1680>)
 8005a68:	2092      	movs	r0, #146	; 0x92
 8005a6a:	0040      	lsls	r0, r0, #1
 8005a6c:	0034      	movs	r4, r6
 8005a6e:	1903      	adds	r3, r0, r4
 8005a70:	19db      	adds	r3, r3, r7
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	18d3      	adds	r3, r2, r3
 8005a76:	1c0a      	adds	r2, r1, #0
 8005a78:	701a      	strb	r2, [r3, #0]
					myt += 2;
 8005a7a:	192b      	adds	r3, r5, r4
 8005a7c:	19db      	adds	r3, r3, r7
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	3302      	adds	r3, #2
 8005a82:	192a      	adds	r2, r5, r4
 8005a84:	19d2      	adds	r2, r2, r7
 8005a86:	6013      	str	r3, [r2, #0]
				for (int i = 1; i < 8; i++) {
 8005a88:	1903      	adds	r3, r0, r4
 8005a8a:	19db      	adds	r3, r3, r7
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	3301      	adds	r3, #1
 8005a90:	1902      	adds	r2, r0, r4
 8005a92:	19d2      	adds	r2, r2, r7
 8005a94:	6013      	str	r3, [r2, #0]
 8005a96:	2392      	movs	r3, #146	; 0x92
 8005a98:	005b      	lsls	r3, r3, #1
 8005a9a:	2218      	movs	r2, #24
 8005a9c:	189b      	adds	r3, r3, r2
 8005a9e:	19db      	adds	r3, r3, r7
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2b07      	cmp	r3, #7
 8005aa4:	ddc2      	ble.n	8005a2c <HAL_TIM_PeriodElapsedCallback+0x12d0>
				}
				clearit();
 8005aa6:	f001 f953 	bl	8006d50 <clearit>
 8005aaa:	e108      	b.n	8005cbe <HAL_TIM_PeriodElapsedCallback+0x1562>

			} else {
				resTimeout--;
 8005aac:	4bcc      	ldr	r3, [pc, #816]	; (8005de0 <HAL_TIM_PeriodElapsedCallback+0x1684>)
 8005aae:	881b      	ldrh	r3, [r3, #0]
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	b29a      	uxth	r2, r3
 8005ab6:	4bca      	ldr	r3, [pc, #808]	; (8005de0 <HAL_TIM_PeriodElapsedCallback+0x1684>)
 8005ab8:	801a      	strh	r2, [r3, #0]
				if (resTimeout < 1) {
 8005aba:	4bc9      	ldr	r3, [pc, #804]	; (8005de0 <HAL_TIM_PeriodElapsedCallback+0x1684>)
 8005abc:	881b      	ldrh	r3, [r3, #0]
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d000      	beq.n	8005ac6 <HAL_TIM_PeriodElapsedCallback+0x136a>
 8005ac4:	e0fb      	b.n	8005cbe <HAL_TIM_PeriodElapsedCallback+0x1562>
					if (!recResponse) {
 8005ac6:	4bc7      	ldr	r3, [pc, #796]	; (8005de4 <HAL_TIM_PeriodElapsedCallback+0x1688>)
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d101      	bne.n	8005ad4 <HAL_TIM_PeriodElapsedCallback+0x1378>
						rebootsystem();
 8005ad0:	f000 fd44 	bl	800655c <rebootsystem>
					}
					isResponseOk = 0;
 8005ad4:	4bc4      	ldr	r3, [pc, #784]	; (8005de8 <HAL_TIM_PeriodElapsedCallback+0x168c>)
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	701a      	strb	r2, [r3, #0]
					clearit();
 8005ada:	f001 f939 	bl	8006d50 <clearit>
 8005ade:	e0ee      	b.n	8005cbe <HAL_TIM_PeriodElapsedCallback+0x1562>

				}
			}
		} else if (commandCase == 5) {
 8005ae0:	4bc2      	ldr	r3, [pc, #776]	; (8005dec <HAL_TIM_PeriodElapsedCallback+0x1690>)
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	2b05      	cmp	r3, #5
 8005ae8:	d000      	beq.n	8005aec <HAL_TIM_PeriodElapsedCallback+0x1390>
 8005aea:	e0e8      	b.n	8005cbe <HAL_TIM_PeriodElapsedCallback+0x1562>
			//tcp open case
			uint8_t tLine = 99;
 8005aec:	2324      	movs	r3, #36	; 0x24
 8005aee:	33ff      	adds	r3, #255	; 0xff
 8005af0:	2118      	movs	r1, #24
 8005af2:	185b      	adds	r3, r3, r1
 8005af4:	19db      	adds	r3, r3, r7
 8005af6:	2263      	movs	r2, #99	; 0x63
 8005af8:	701a      	strb	r2, [r3, #0]
			char *ptr;
			char *ptr2;
			char *ptr3;
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 8005afa:	2391      	movs	r3, #145	; 0x91
 8005afc:	005b      	lsls	r3, r3, #1
 8005afe:	185b      	adds	r3, r3, r1
 8005b00:	19db      	adds	r3, r3, r7
 8005b02:	2200      	movs	r2, #0
 8005b04:	701a      	strb	r2, [r3, #0]
 8005b06:	e08d      	b.n	8005c24 <HAL_TIM_PeriodElapsedCallback+0x14c8>
				ptr = strstr(responseBuffer[i], "ALREADY CONNECT"); //todo check wether in data mode or not
 8005b08:	2491      	movs	r4, #145	; 0x91
 8005b0a:	0064      	lsls	r4, r4, #1
 8005b0c:	2618      	movs	r6, #24
 8005b0e:	19a3      	adds	r3, r4, r6
 8005b10:	19db      	adds	r3, r3, r7
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	2232      	movs	r2, #50	; 0x32
 8005b16:	435a      	muls	r2, r3
 8005b18:	4bb5      	ldr	r3, [pc, #724]	; (8005df0 <HAL_TIM_PeriodElapsedCallback+0x1694>)
 8005b1a:	18d3      	adds	r3, r2, r3
 8005b1c:	4ab5      	ldr	r2, [pc, #724]	; (8005df4 <HAL_TIM_PeriodElapsedCallback+0x1698>)
 8005b1e:	0011      	movs	r1, r2
 8005b20:	0018      	movs	r0, r3
 8005b22:	f009 f9e0 	bl	800eee6 <strstr>
 8005b26:	0003      	movs	r3, r0
 8005b28:	25d8      	movs	r5, #216	; 0xd8
 8005b2a:	19aa      	adds	r2, r5, r6
 8005b2c:	19d2      	adds	r2, r2, r7
 8005b2e:	6013      	str	r3, [r2, #0]
				ptr2 = strstr(responseBuffer[i], "CONNECT FAIL");
 8005b30:	19a3      	adds	r3, r4, r6
 8005b32:	19db      	adds	r3, r3, r7
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	2232      	movs	r2, #50	; 0x32
 8005b38:	435a      	muls	r2, r3
 8005b3a:	4bad      	ldr	r3, [pc, #692]	; (8005df0 <HAL_TIM_PeriodElapsedCallback+0x1694>)
 8005b3c:	18d3      	adds	r3, r2, r3
 8005b3e:	4aae      	ldr	r2, [pc, #696]	; (8005df8 <HAL_TIM_PeriodElapsedCallback+0x169c>)
 8005b40:	0011      	movs	r1, r2
 8005b42:	0018      	movs	r0, r3
 8005b44:	f009 f9cf 	bl	800eee6 <strstr>
 8005b48:	0003      	movs	r3, r0
 8005b4a:	22d4      	movs	r2, #212	; 0xd4
 8005b4c:	1992      	adds	r2, r2, r6
 8005b4e:	19d2      	adds	r2, r2, r7
 8005b50:	6013      	str	r3, [r2, #0]
				ptr3 = strstr(responseBuffer[i], "CONNECT");
 8005b52:	19a3      	adds	r3, r4, r6
 8005b54:	19db      	adds	r3, r3, r7
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	2232      	movs	r2, #50	; 0x32
 8005b5a:	435a      	muls	r2, r3
 8005b5c:	4ba4      	ldr	r3, [pc, #656]	; (8005df0 <HAL_TIM_PeriodElapsedCallback+0x1694>)
 8005b5e:	18d3      	adds	r3, r2, r3
 8005b60:	4aa6      	ldr	r2, [pc, #664]	; (8005dfc <HAL_TIM_PeriodElapsedCallback+0x16a0>)
 8005b62:	0011      	movs	r1, r2
 8005b64:	0018      	movs	r0, r3
 8005b66:	f009 f9be 	bl	800eee6 <strstr>
 8005b6a:	0003      	movs	r3, r0
 8005b6c:	22d0      	movs	r2, #208	; 0xd0
 8005b6e:	0031      	movs	r1, r6
 8005b70:	1852      	adds	r2, r2, r1
 8005b72:	19d2      	adds	r2, r2, r7
 8005b74:	6013      	str	r3, [r2, #0]

				if (ptr != NULL) {
 8005b76:	186b      	adds	r3, r5, r1
 8005b78:	19db      	adds	r3, r3, r7
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d011      	beq.n	8005ba4 <HAL_TIM_PeriodElapsedCallback+0x1448>
					tLine = i;
 8005b80:	2324      	movs	r3, #36	; 0x24
 8005b82:	33ff      	adds	r3, #255	; 0xff
 8005b84:	185b      	adds	r3, r3, r1
 8005b86:	19db      	adds	r3, r3, r7
 8005b88:	1862      	adds	r2, r4, r1
 8005b8a:	19d2      	adds	r2, r2, r7
 8005b8c:	7812      	ldrb	r2, [r2, #0]
 8005b8e:	701a      	strb	r2, [r3, #0]
					tResponse = 'G';
 8005b90:	2348      	movs	r3, #72	; 0x48
 8005b92:	33ff      	adds	r3, #255	; 0xff
 8005b94:	185b      	adds	r3, r3, r1
 8005b96:	19db      	adds	r3, r3, r7
 8005b98:	2247      	movs	r2, #71	; 0x47
 8005b9a:	701a      	strb	r2, [r3, #0]
					isDataMode = 0;
 8005b9c:	4b98      	ldr	r3, [pc, #608]	; (8005e00 <HAL_TIM_PeriodElapsedCallback+0x16a4>)
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	701a      	strb	r2, [r3, #0]
					break;
 8005ba2:	e048      	b.n	8005c36 <HAL_TIM_PeriodElapsedCallback+0x14da>
				} else if (ptr2 != NULL) {
 8005ba4:	23d4      	movs	r3, #212	; 0xd4
 8005ba6:	2118      	movs	r1, #24
 8005ba8:	185b      	adds	r3, r3, r1
 8005baa:	19db      	adds	r3, r3, r7
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d013      	beq.n	8005bda <HAL_TIM_PeriodElapsedCallback+0x147e>
					tLine = i;
 8005bb2:	2324      	movs	r3, #36	; 0x24
 8005bb4:	33ff      	adds	r3, #255	; 0xff
 8005bb6:	185b      	adds	r3, r3, r1
 8005bb8:	19db      	adds	r3, r3, r7
 8005bba:	2291      	movs	r2, #145	; 0x91
 8005bbc:	0052      	lsls	r2, r2, #1
 8005bbe:	1852      	adds	r2, r2, r1
 8005bc0:	19d2      	adds	r2, r2, r7
 8005bc2:	7812      	ldrb	r2, [r2, #0]
 8005bc4:	701a      	strb	r2, [r3, #0]
					tResponse = 'B';
 8005bc6:	2348      	movs	r3, #72	; 0x48
 8005bc8:	33ff      	adds	r3, #255	; 0xff
 8005bca:	185b      	adds	r3, r3, r1
 8005bcc:	19db      	adds	r3, r3, r7
 8005bce:	2242      	movs	r2, #66	; 0x42
 8005bd0:	701a      	strb	r2, [r3, #0]
					isDataMode = 0;
 8005bd2:	4b8b      	ldr	r3, [pc, #556]	; (8005e00 <HAL_TIM_PeriodElapsedCallback+0x16a4>)
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	701a      	strb	r2, [r3, #0]
					break;
 8005bd8:	e02d      	b.n	8005c36 <HAL_TIM_PeriodElapsedCallback+0x14da>
				} else if (ptr3 != NULL) {
 8005bda:	23d0      	movs	r3, #208	; 0xd0
 8005bdc:	2118      	movs	r1, #24
 8005bde:	185b      	adds	r3, r3, r1
 8005be0:	19db      	adds	r3, r3, r7
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d013      	beq.n	8005c10 <HAL_TIM_PeriodElapsedCallback+0x14b4>
					tLine = i;
 8005be8:	2324      	movs	r3, #36	; 0x24
 8005bea:	33ff      	adds	r3, #255	; 0xff
 8005bec:	185b      	adds	r3, r3, r1
 8005bee:	19db      	adds	r3, r3, r7
 8005bf0:	2291      	movs	r2, #145	; 0x91
 8005bf2:	0052      	lsls	r2, r2, #1
 8005bf4:	1852      	adds	r2, r2, r1
 8005bf6:	19d2      	adds	r2, r2, r7
 8005bf8:	7812      	ldrb	r2, [r2, #0]
 8005bfa:	701a      	strb	r2, [r3, #0]
					tResponse = 'G';
 8005bfc:	2348      	movs	r3, #72	; 0x48
 8005bfe:	33ff      	adds	r3, #255	; 0xff
 8005c00:	185b      	adds	r3, r3, r1
 8005c02:	19db      	adds	r3, r3, r7
 8005c04:	2247      	movs	r2, #71	; 0x47
 8005c06:	701a      	strb	r2, [r3, #0]
					isDataMode = 1;
 8005c08:	4b7d      	ldr	r3, [pc, #500]	; (8005e00 <HAL_TIM_PeriodElapsedCallback+0x16a4>)
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	701a      	strb	r2, [r3, #0]
					break;
 8005c0e:	e012      	b.n	8005c36 <HAL_TIM_PeriodElapsedCallback+0x14da>
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 8005c10:	2191      	movs	r1, #145	; 0x91
 8005c12:	0049      	lsls	r1, r1, #1
 8005c14:	2018      	movs	r0, #24
 8005c16:	180b      	adds	r3, r1, r0
 8005c18:	19db      	adds	r3, r3, r7
 8005c1a:	781a      	ldrb	r2, [r3, #0]
 8005c1c:	180b      	adds	r3, r1, r0
 8005c1e:	19db      	adds	r3, r3, r7
 8005c20:	3201      	adds	r2, #1
 8005c22:	701a      	strb	r2, [r3, #0]
 8005c24:	2391      	movs	r3, #145	; 0x91
 8005c26:	005b      	lsls	r3, r3, #1
 8005c28:	2218      	movs	r2, #24
 8005c2a:	189b      	adds	r3, r3, r2
 8005c2c:	19db      	adds	r3, r3, r7
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	2b05      	cmp	r3, #5
 8005c32:	d800      	bhi.n	8005c36 <HAL_TIM_PeriodElapsedCallback+0x14da>
 8005c34:	e768      	b.n	8005b08 <HAL_TIM_PeriodElapsedCallback+0x13ac>
				}
			}
			if (tLine != 99) {
 8005c36:	2324      	movs	r3, #36	; 0x24
 8005c38:	33ff      	adds	r3, #255	; 0xff
 8005c3a:	2218      	movs	r2, #24
 8005c3c:	189b      	adds	r3, r3, r2
 8005c3e:	19db      	adds	r3, r3, r7
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	2b63      	cmp	r3, #99	; 0x63
 8005c44:	d023      	beq.n	8005c8e <HAL_TIM_PeriodElapsedCallback+0x1532>
				if (tResponse == 'G') {
 8005c46:	2348      	movs	r3, #72	; 0x48
 8005c48:	33ff      	adds	r3, #255	; 0xff
 8005c4a:	189b      	adds	r3, r3, r2
 8005c4c:	19db      	adds	r3, r3, r7
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	2b47      	cmp	r3, #71	; 0x47
 8005c52:	d10b      	bne.n	8005c6c <HAL_TIM_PeriodElapsedCallback+0x1510>
					isResponseOk = 1;
 8005c54:	4b64      	ldr	r3, [pc, #400]	; (8005de8 <HAL_TIM_PeriodElapsedCallback+0x168c>)
 8005c56:	2201      	movs	r2, #1
 8005c58:	701a      	strb	r2, [r3, #0]
					//to-do with that line
					clearit();
 8005c5a:	f001 f879 	bl	8006d50 <clearit>
					isTcpOpen = 1;
 8005c5e:	4b69      	ldr	r3, [pc, #420]	; (8005e04 <HAL_TIM_PeriodElapsedCallback+0x16a8>)
 8005c60:	2201      	movs	r2, #1
 8005c62:	701a      	strb	r2, [r3, #0]
					isDataMode = 1;
 8005c64:	4b66      	ldr	r3, [pc, #408]	; (8005e00 <HAL_TIM_PeriodElapsedCallback+0x16a4>)
 8005c66:	2201      	movs	r2, #1
 8005c68:	701a      	strb	r2, [r3, #0]
 8005c6a:	e028      	b.n	8005cbe <HAL_TIM_PeriodElapsedCallback+0x1562>

				} else if (tResponse == 'B') {
 8005c6c:	2348      	movs	r3, #72	; 0x48
 8005c6e:	33ff      	adds	r3, #255	; 0xff
 8005c70:	2218      	movs	r2, #24
 8005c72:	189b      	adds	r3, r3, r2
 8005c74:	19db      	adds	r3, r3, r7
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	2b42      	cmp	r3, #66	; 0x42
 8005c7a:	d120      	bne.n	8005cbe <HAL_TIM_PeriodElapsedCallback+0x1562>
					isResponseOk = 0;
 8005c7c:	4b5a      	ldr	r3, [pc, #360]	; (8005de8 <HAL_TIM_PeriodElapsedCallback+0x168c>)
 8005c7e:	2200      	movs	r2, #0
 8005c80:	701a      	strb	r2, [r3, #0]
					clearit();
 8005c82:	f001 f865 	bl	8006d50 <clearit>
					isTcpOpen = 0;
 8005c86:	4b5f      	ldr	r3, [pc, #380]	; (8005e04 <HAL_TIM_PeriodElapsedCallback+0x16a8>)
 8005c88:	2200      	movs	r2, #0
 8005c8a:	701a      	strb	r2, [r3, #0]
 8005c8c:	e017      	b.n	8005cbe <HAL_TIM_PeriodElapsedCallback+0x1562>
				}
			} else {
				resTimeout--;
 8005c8e:	4b54      	ldr	r3, [pc, #336]	; (8005de0 <HAL_TIM_PeriodElapsedCallback+0x1684>)
 8005c90:	881b      	ldrh	r3, [r3, #0]
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	3b01      	subs	r3, #1
 8005c96:	b29a      	uxth	r2, r3
 8005c98:	4b51      	ldr	r3, [pc, #324]	; (8005de0 <HAL_TIM_PeriodElapsedCallback+0x1684>)
 8005c9a:	801a      	strh	r2, [r3, #0]
				if (resTimeout < 1) {
 8005c9c:	4b50      	ldr	r3, [pc, #320]	; (8005de0 <HAL_TIM_PeriodElapsedCallback+0x1684>)
 8005c9e:	881b      	ldrh	r3, [r3, #0]
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d10b      	bne.n	8005cbe <HAL_TIM_PeriodElapsedCallback+0x1562>
					if (!recResponse) {
 8005ca6:	4b4f      	ldr	r3, [pc, #316]	; (8005de4 <HAL_TIM_PeriodElapsedCallback+0x1688>)
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d101      	bne.n	8005cb4 <HAL_TIM_PeriodElapsedCallback+0x1558>
						rebootsystem();
 8005cb0:	f000 fc54 	bl	800655c <rebootsystem>
					}
					clearit();
 8005cb4:	f001 f84c 	bl	8006d50 <clearit>
					isResponseOk = 0;
 8005cb8:	4b4b      	ldr	r3, [pc, #300]	; (8005de8 <HAL_TIM_PeriodElapsedCallback+0x168c>)
 8005cba:	2200      	movs	r2, #0
 8005cbc:	701a      	strb	r2, [r3, #0]

				}
			}
		}
		if (commandCase == 6) {
 8005cbe:	4b4b      	ldr	r3, [pc, #300]	; (8005dec <HAL_TIM_PeriodElapsedCallback+0x1690>)
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	2b06      	cmp	r3, #6
 8005cc6:	d000      	beq.n	8005cca <HAL_TIM_PeriodElapsedCallback+0x156e>
 8005cc8:	e0f3      	b.n	8005eb2 <HAL_TIM_PeriodElapsedCallback+0x1756>
			uint8_t tLine = 99;
 8005cca:	2322      	movs	r3, #34	; 0x22
 8005ccc:	33ff      	adds	r3, #255	; 0xff
 8005cce:	2118      	movs	r1, #24
 8005cd0:	185b      	adds	r3, r3, r1
 8005cd2:	19db      	adds	r3, r3, r7
 8005cd4:	2263      	movs	r2, #99	; 0x63
 8005cd6:	701a      	strb	r2, [r3, #0]
			char *ptr;
			char *ptr2;
			char *ptr3;

			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 8005cd8:	2390      	movs	r3, #144	; 0x90
 8005cda:	005b      	lsls	r3, r3, #1
 8005cdc:	185b      	adds	r3, r3, r1
 8005cde:	19db      	adds	r3, r3, r7
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	701a      	strb	r2, [r3, #0]
 8005ce4:	e09e      	b.n	8005e24 <HAL_TIM_PeriodElapsedCallback+0x16c8>
				ptr = strstr(responseBuffer[i], "NO CARRIER");
 8005ce6:	2490      	movs	r4, #144	; 0x90
 8005ce8:	0064      	lsls	r4, r4, #1
 8005cea:	2618      	movs	r6, #24
 8005cec:	19a3      	adds	r3, r4, r6
 8005cee:	19db      	adds	r3, r3, r7
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	2232      	movs	r2, #50	; 0x32
 8005cf4:	435a      	muls	r2, r3
 8005cf6:	4b3e      	ldr	r3, [pc, #248]	; (8005df0 <HAL_TIM_PeriodElapsedCallback+0x1694>)
 8005cf8:	18d3      	adds	r3, r2, r3
 8005cfa:	4a43      	ldr	r2, [pc, #268]	; (8005e08 <HAL_TIM_PeriodElapsedCallback+0x16ac>)
 8005cfc:	0011      	movs	r1, r2
 8005cfe:	0018      	movs	r0, r3
 8005d00:	f009 f8f1 	bl	800eee6 <strstr>
 8005d04:	0003      	movs	r3, r0
 8005d06:	259c      	movs	r5, #156	; 0x9c
 8005d08:	19aa      	adds	r2, r5, r6
 8005d0a:	19d2      	adds	r2, r2, r7
 8005d0c:	6013      	str	r3, [r2, #0]
				ptr2 = strstr(responseBuffer[i], "ERROR");
 8005d0e:	19a3      	adds	r3, r4, r6
 8005d10:	19db      	adds	r3, r3, r7
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	2232      	movs	r2, #50	; 0x32
 8005d16:	435a      	muls	r2, r3
 8005d18:	4b35      	ldr	r3, [pc, #212]	; (8005df0 <HAL_TIM_PeriodElapsedCallback+0x1694>)
 8005d1a:	18d3      	adds	r3, r2, r3
 8005d1c:	4a3b      	ldr	r2, [pc, #236]	; (8005e0c <HAL_TIM_PeriodElapsedCallback+0x16b0>)
 8005d1e:	0011      	movs	r1, r2
 8005d20:	0018      	movs	r0, r3
 8005d22:	f009 f8e0 	bl	800eee6 <strstr>
 8005d26:	0003      	movs	r3, r0
 8005d28:	2298      	movs	r2, #152	; 0x98
 8005d2a:	1992      	adds	r2, r2, r6
 8005d2c:	19d2      	adds	r2, r2, r7
 8005d2e:	6013      	str	r3, [r2, #0]
				ptr3 = strstr(responseBuffer[i], "CONNECT");
 8005d30:	19a3      	adds	r3, r4, r6
 8005d32:	19db      	adds	r3, r3, r7
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	2232      	movs	r2, #50	; 0x32
 8005d38:	435a      	muls	r2, r3
 8005d3a:	4b2d      	ldr	r3, [pc, #180]	; (8005df0 <HAL_TIM_PeriodElapsedCallback+0x1694>)
 8005d3c:	18d3      	adds	r3, r2, r3
 8005d3e:	4a2f      	ldr	r2, [pc, #188]	; (8005dfc <HAL_TIM_PeriodElapsedCallback+0x16a0>)
 8005d40:	0011      	movs	r1, r2
 8005d42:	0018      	movs	r0, r3
 8005d44:	f009 f8cf 	bl	800eee6 <strstr>
 8005d48:	0003      	movs	r3, r0
 8005d4a:	2294      	movs	r2, #148	; 0x94
 8005d4c:	0031      	movs	r1, r6
 8005d4e:	1852      	adds	r2, r2, r1
 8005d50:	19d2      	adds	r2, r2, r7
 8005d52:	6013      	str	r3, [r2, #0]

				if (ptr != NULL) {
 8005d54:	186b      	adds	r3, r5, r1
 8005d56:	19db      	adds	r3, r3, r7
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d00e      	beq.n	8005d7c <HAL_TIM_PeriodElapsedCallback+0x1620>
					tLine = i;
 8005d5e:	2322      	movs	r3, #34	; 0x22
 8005d60:	33ff      	adds	r3, #255	; 0xff
 8005d62:	185b      	adds	r3, r3, r1
 8005d64:	19db      	adds	r3, r3, r7
 8005d66:	1862      	adds	r2, r4, r1
 8005d68:	19d2      	adds	r2, r2, r7
 8005d6a:	7812      	ldrb	r2, [r2, #0]
 8005d6c:	701a      	strb	r2, [r3, #0]
					tResponse = 'B';
 8005d6e:	2348      	movs	r3, #72	; 0x48
 8005d70:	33ff      	adds	r3, #255	; 0xff
 8005d72:	185b      	adds	r3, r3, r1
 8005d74:	19db      	adds	r3, r3, r7
 8005d76:	2242      	movs	r2, #66	; 0x42
 8005d78:	701a      	strb	r2, [r3, #0]
					break;
 8005d7a:	e05c      	b.n	8005e36 <HAL_TIM_PeriodElapsedCallback+0x16da>
				}
				if (ptr2 != NULL) {
 8005d7c:	2398      	movs	r3, #152	; 0x98
 8005d7e:	2118      	movs	r1, #24
 8005d80:	185b      	adds	r3, r3, r1
 8005d82:	19db      	adds	r3, r3, r7
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d010      	beq.n	8005dac <HAL_TIM_PeriodElapsedCallback+0x1650>
					tLine = i;
 8005d8a:	2322      	movs	r3, #34	; 0x22
 8005d8c:	33ff      	adds	r3, #255	; 0xff
 8005d8e:	185b      	adds	r3, r3, r1
 8005d90:	19db      	adds	r3, r3, r7
 8005d92:	2290      	movs	r2, #144	; 0x90
 8005d94:	0052      	lsls	r2, r2, #1
 8005d96:	1852      	adds	r2, r2, r1
 8005d98:	19d2      	adds	r2, r2, r7
 8005d9a:	7812      	ldrb	r2, [r2, #0]
 8005d9c:	701a      	strb	r2, [r3, #0]
					tResponse = 'B';
 8005d9e:	2348      	movs	r3, #72	; 0x48
 8005da0:	33ff      	adds	r3, #255	; 0xff
 8005da2:	185b      	adds	r3, r3, r1
 8005da4:	19db      	adds	r3, r3, r7
 8005da6:	2242      	movs	r2, #66	; 0x42
 8005da8:	701a      	strb	r2, [r3, #0]
					break;
 8005daa:	e044      	b.n	8005e36 <HAL_TIM_PeriodElapsedCallback+0x16da>
				}
				if (ptr3 != NULL) {
 8005dac:	2394      	movs	r3, #148	; 0x94
 8005dae:	2118      	movs	r1, #24
 8005db0:	185b      	adds	r3, r3, r1
 8005db2:	19db      	adds	r3, r3, r7
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d02a      	beq.n	8005e10 <HAL_TIM_PeriodElapsedCallback+0x16b4>
					tLine = i;
 8005dba:	2322      	movs	r3, #34	; 0x22
 8005dbc:	33ff      	adds	r3, #255	; 0xff
 8005dbe:	185b      	adds	r3, r3, r1
 8005dc0:	19db      	adds	r3, r3, r7
 8005dc2:	2290      	movs	r2, #144	; 0x90
 8005dc4:	0052      	lsls	r2, r2, #1
 8005dc6:	1852      	adds	r2, r2, r1
 8005dc8:	19d2      	adds	r2, r2, r7
 8005dca:	7812      	ldrb	r2, [r2, #0]
 8005dcc:	701a      	strb	r2, [r3, #0]
					tResponse = 'G';
 8005dce:	2348      	movs	r3, #72	; 0x48
 8005dd0:	33ff      	adds	r3, #255	; 0xff
 8005dd2:	185b      	adds	r3, r3, r1
 8005dd4:	19db      	adds	r3, r3, r7
 8005dd6:	2247      	movs	r2, #71	; 0x47
 8005dd8:	701a      	strb	r2, [r3, #0]
					break;
 8005dda:	e02c      	b.n	8005e36 <HAL_TIM_PeriodElapsedCallback+0x16da>
 8005ddc:	20000884 	.word	0x20000884
 8005de0:	2000087c 	.word	0x2000087c
 8005de4:	20000881 	.word	0x20000881
 8005de8:	20000880 	.word	0x20000880
 8005dec:	2000087f 	.word	0x2000087f
 8005df0:	20000748 	.word	0x20000748
 8005df4:	08013364 	.word	0x08013364
 8005df8:	08013374 	.word	0x08013374
 8005dfc:	08013384 	.word	0x08013384
 8005e00:	2000087a 	.word	0x2000087a
 8005e04:	20000a2c 	.word	0x20000a2c
 8005e08:	0801338c 	.word	0x0801338c
 8005e0c:	08013324 	.word	0x08013324
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 8005e10:	2190      	movs	r1, #144	; 0x90
 8005e12:	0049      	lsls	r1, r1, #1
 8005e14:	2018      	movs	r0, #24
 8005e16:	180b      	adds	r3, r1, r0
 8005e18:	19db      	adds	r3, r3, r7
 8005e1a:	781a      	ldrb	r2, [r3, #0]
 8005e1c:	180b      	adds	r3, r1, r0
 8005e1e:	19db      	adds	r3, r3, r7
 8005e20:	3201      	adds	r2, #1
 8005e22:	701a      	strb	r2, [r3, #0]
 8005e24:	2390      	movs	r3, #144	; 0x90
 8005e26:	005b      	lsls	r3, r3, #1
 8005e28:	2218      	movs	r2, #24
 8005e2a:	189b      	adds	r3, r3, r2
 8005e2c:	19db      	adds	r3, r3, r7
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	2b05      	cmp	r3, #5
 8005e32:	d800      	bhi.n	8005e36 <HAL_TIM_PeriodElapsedCallback+0x16da>
 8005e34:	e757      	b.n	8005ce6 <HAL_TIM_PeriodElapsedCallback+0x158a>
				}
			}
			if (tLine != 99) {
 8005e36:	2322      	movs	r3, #34	; 0x22
 8005e38:	33ff      	adds	r3, #255	; 0xff
 8005e3a:	2218      	movs	r2, #24
 8005e3c:	189b      	adds	r3, r3, r2
 8005e3e:	19db      	adds	r3, r3, r7
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	2b63      	cmp	r3, #99	; 0x63
 8005e44:	d01b      	beq.n	8005e7e <HAL_TIM_PeriodElapsedCallback+0x1722>
				if (tResponse == 'G') {
 8005e46:	2348      	movs	r3, #72	; 0x48
 8005e48:	33ff      	adds	r3, #255	; 0xff
 8005e4a:	189b      	adds	r3, r3, r2
 8005e4c:	19db      	adds	r3, r3, r7
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	2b47      	cmp	r3, #71	; 0x47
 8005e52:	d105      	bne.n	8005e60 <HAL_TIM_PeriodElapsedCallback+0x1704>
					isResponseOk = 1;
 8005e54:	4bde      	ldr	r3, [pc, #888]	; (80061d0 <HAL_TIM_PeriodElapsedCallback+0x1a74>)
 8005e56:	2201      	movs	r2, #1
 8005e58:	701a      	strb	r2, [r3, #0]
					//to-do with that line
					clearit();
 8005e5a:	f000 ff79 	bl	8006d50 <clearit>
		nmeaLC = 0;
		nmeaCC = 0;
		HAL_UART_Receive_IT(&GNSS_PORT, GNSS_BUFFER, 1);
		HAL_UART_Receive_IT(&GNSS_PORT, GNSS_BUFFER, 1);
	}
}
 8005e5e:	e33f      	b.n	80064e0 <HAL_TIM_PeriodElapsedCallback+0x1d84>
				} else if (tResponse == 'B') {
 8005e60:	2348      	movs	r3, #72	; 0x48
 8005e62:	33ff      	adds	r3, #255	; 0xff
 8005e64:	2218      	movs	r2, #24
 8005e66:	189b      	adds	r3, r3, r2
 8005e68:	19db      	adds	r3, r3, r7
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	2b42      	cmp	r3, #66	; 0x42
 8005e6e:	d000      	beq.n	8005e72 <HAL_TIM_PeriodElapsedCallback+0x1716>
 8005e70:	e336      	b.n	80064e0 <HAL_TIM_PeriodElapsedCallback+0x1d84>
					isResponseOk = 0;
 8005e72:	4bd7      	ldr	r3, [pc, #860]	; (80061d0 <HAL_TIM_PeriodElapsedCallback+0x1a74>)
 8005e74:	2200      	movs	r2, #0
 8005e76:	701a      	strb	r2, [r3, #0]
					clearit();
 8005e78:	f000 ff6a 	bl	8006d50 <clearit>
}
 8005e7c:	e330      	b.n	80064e0 <HAL_TIM_PeriodElapsedCallback+0x1d84>
				resTimeout--;
 8005e7e:	4bd5      	ldr	r3, [pc, #852]	; (80061d4 <HAL_TIM_PeriodElapsedCallback+0x1a78>)
 8005e80:	881b      	ldrh	r3, [r3, #0]
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	3b01      	subs	r3, #1
 8005e86:	b29a      	uxth	r2, r3
 8005e88:	4bd2      	ldr	r3, [pc, #840]	; (80061d4 <HAL_TIM_PeriodElapsedCallback+0x1a78>)
 8005e8a:	801a      	strh	r2, [r3, #0]
				if (resTimeout < 1) {
 8005e8c:	4bd1      	ldr	r3, [pc, #836]	; (80061d4 <HAL_TIM_PeriodElapsedCallback+0x1a78>)
 8005e8e:	881b      	ldrh	r3, [r3, #0]
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d000      	beq.n	8005e98 <HAL_TIM_PeriodElapsedCallback+0x173c>
 8005e96:	e323      	b.n	80064e0 <HAL_TIM_PeriodElapsedCallback+0x1d84>
					if (!recResponse) {
 8005e98:	4bcf      	ldr	r3, [pc, #828]	; (80061d8 <HAL_TIM_PeriodElapsedCallback+0x1a7c>)
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d101      	bne.n	8005ea6 <HAL_TIM_PeriodElapsedCallback+0x174a>
						rebootsystem();
 8005ea2:	f000 fb5b 	bl	800655c <rebootsystem>
					clearit();
 8005ea6:	f000 ff53 	bl	8006d50 <clearit>
					isResponseOk = 0;
 8005eaa:	4bc9      	ldr	r3, [pc, #804]	; (80061d0 <HAL_TIM_PeriodElapsedCallback+0x1a74>)
 8005eac:	2200      	movs	r2, #0
 8005eae:	701a      	strb	r2, [r3, #0]
}
 8005eb0:	e316      	b.n	80064e0 <HAL_TIM_PeriodElapsedCallback+0x1d84>
		} else if (commandCase == 7) { //cmgs response check
 8005eb2:	4bca      	ldr	r3, [pc, #808]	; (80061dc <HAL_TIM_PeriodElapsedCallback+0x1a80>)
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	2b07      	cmp	r3, #7
 8005eba:	d000      	beq.n	8005ebe <HAL_TIM_PeriodElapsedCallback+0x1762>
 8005ebc:	e0af      	b.n	800601e <HAL_TIM_PeriodElapsedCallback+0x18c2>
			uint8_t tLine = 99;
 8005ebe:	2320      	movs	r3, #32
 8005ec0:	33ff      	adds	r3, #255	; 0xff
 8005ec2:	2118      	movs	r1, #24
 8005ec4:	185b      	adds	r3, r3, r1
 8005ec6:	19db      	adds	r3, r3, r7
 8005ec8:	2263      	movs	r2, #99	; 0x63
 8005eca:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 8005ecc:	238f      	movs	r3, #143	; 0x8f
 8005ece:	005b      	lsls	r3, r3, #1
 8005ed0:	185b      	adds	r3, r3, r1
 8005ed2:	19db      	adds	r3, r3, r7
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	701a      	strb	r2, [r3, #0]
 8005ed8:	e05b      	b.n	8005f92 <HAL_TIM_PeriodElapsedCallback+0x1836>
				ptr = strstr(responseBuffer[i], "+CMGS:");
 8005eda:	248f      	movs	r4, #143	; 0x8f
 8005edc:	0064      	lsls	r4, r4, #1
 8005ede:	2618      	movs	r6, #24
 8005ee0:	19a3      	adds	r3, r4, r6
 8005ee2:	19db      	adds	r3, r3, r7
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	2232      	movs	r2, #50	; 0x32
 8005ee8:	435a      	muls	r2, r3
 8005eea:	4bbd      	ldr	r3, [pc, #756]	; (80061e0 <HAL_TIM_PeriodElapsedCallback+0x1a84>)
 8005eec:	18d3      	adds	r3, r2, r3
 8005eee:	4abd      	ldr	r2, [pc, #756]	; (80061e4 <HAL_TIM_PeriodElapsedCallback+0x1a88>)
 8005ef0:	0011      	movs	r1, r2
 8005ef2:	0018      	movs	r0, r3
 8005ef4:	f008 fff7 	bl	800eee6 <strstr>
 8005ef8:	0003      	movs	r3, r0
 8005efa:	25a4      	movs	r5, #164	; 0xa4
 8005efc:	19aa      	adds	r2, r5, r6
 8005efe:	19d2      	adds	r2, r2, r7
 8005f00:	6013      	str	r3, [r2, #0]
				ptr2 = strstr(responseBuffer[i], "ERROR");
 8005f02:	19a3      	adds	r3, r4, r6
 8005f04:	19db      	adds	r3, r3, r7
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	2232      	movs	r2, #50	; 0x32
 8005f0a:	435a      	muls	r2, r3
 8005f0c:	4bb4      	ldr	r3, [pc, #720]	; (80061e0 <HAL_TIM_PeriodElapsedCallback+0x1a84>)
 8005f0e:	18d3      	adds	r3, r2, r3
 8005f10:	4ab5      	ldr	r2, [pc, #724]	; (80061e8 <HAL_TIM_PeriodElapsedCallback+0x1a8c>)
 8005f12:	0011      	movs	r1, r2
 8005f14:	0018      	movs	r0, r3
 8005f16:	f008 ffe6 	bl	800eee6 <strstr>
 8005f1a:	0003      	movs	r3, r0
 8005f1c:	22a0      	movs	r2, #160	; 0xa0
 8005f1e:	0031      	movs	r1, r6
 8005f20:	1852      	adds	r2, r2, r1
 8005f22:	19d2      	adds	r2, r2, r7
 8005f24:	6013      	str	r3, [r2, #0]
				if (ptr != NULL) {
 8005f26:	186b      	adds	r3, r5, r1
 8005f28:	19db      	adds	r3, r3, r7
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d00e      	beq.n	8005f4e <HAL_TIM_PeriodElapsedCallback+0x17f2>
					tLine = i;
 8005f30:	2320      	movs	r3, #32
 8005f32:	33ff      	adds	r3, #255	; 0xff
 8005f34:	185b      	adds	r3, r3, r1
 8005f36:	19db      	adds	r3, r3, r7
 8005f38:	1862      	adds	r2, r4, r1
 8005f3a:	19d2      	adds	r2, r2, r7
 8005f3c:	7812      	ldrb	r2, [r2, #0]
 8005f3e:	701a      	strb	r2, [r3, #0]
					tResponse = 'G';
 8005f40:	2348      	movs	r3, #72	; 0x48
 8005f42:	33ff      	adds	r3, #255	; 0xff
 8005f44:	185b      	adds	r3, r3, r1
 8005f46:	19db      	adds	r3, r3, r7
 8005f48:	2247      	movs	r2, #71	; 0x47
 8005f4a:	701a      	strb	r2, [r3, #0]
					break;
 8005f4c:	e029      	b.n	8005fa2 <HAL_TIM_PeriodElapsedCallback+0x1846>
				if (ptr2 != NULL) {
 8005f4e:	23a0      	movs	r3, #160	; 0xa0
 8005f50:	2118      	movs	r1, #24
 8005f52:	185b      	adds	r3, r3, r1
 8005f54:	19db      	adds	r3, r3, r7
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d010      	beq.n	8005f7e <HAL_TIM_PeriodElapsedCallback+0x1822>
					tLine = i;
 8005f5c:	2320      	movs	r3, #32
 8005f5e:	33ff      	adds	r3, #255	; 0xff
 8005f60:	185b      	adds	r3, r3, r1
 8005f62:	19db      	adds	r3, r3, r7
 8005f64:	228f      	movs	r2, #143	; 0x8f
 8005f66:	0052      	lsls	r2, r2, #1
 8005f68:	1852      	adds	r2, r2, r1
 8005f6a:	19d2      	adds	r2, r2, r7
 8005f6c:	7812      	ldrb	r2, [r2, #0]
 8005f6e:	701a      	strb	r2, [r3, #0]
					tResponse = 'B';
 8005f70:	2348      	movs	r3, #72	; 0x48
 8005f72:	33ff      	adds	r3, #255	; 0xff
 8005f74:	185b      	adds	r3, r3, r1
 8005f76:	19db      	adds	r3, r3, r7
 8005f78:	2242      	movs	r2, #66	; 0x42
 8005f7a:	701a      	strb	r2, [r3, #0]
					break;
 8005f7c:	e011      	b.n	8005fa2 <HAL_TIM_PeriodElapsedCallback+0x1846>
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 8005f7e:	218f      	movs	r1, #143	; 0x8f
 8005f80:	0049      	lsls	r1, r1, #1
 8005f82:	2018      	movs	r0, #24
 8005f84:	180b      	adds	r3, r1, r0
 8005f86:	19db      	adds	r3, r3, r7
 8005f88:	781a      	ldrb	r2, [r3, #0]
 8005f8a:	180b      	adds	r3, r1, r0
 8005f8c:	19db      	adds	r3, r3, r7
 8005f8e:	3201      	adds	r2, #1
 8005f90:	701a      	strb	r2, [r3, #0]
 8005f92:	238f      	movs	r3, #143	; 0x8f
 8005f94:	005b      	lsls	r3, r3, #1
 8005f96:	2218      	movs	r2, #24
 8005f98:	189b      	adds	r3, r3, r2
 8005f9a:	19db      	adds	r3, r3, r7
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	2b05      	cmp	r3, #5
 8005fa0:	d99b      	bls.n	8005eda <HAL_TIM_PeriodElapsedCallback+0x177e>
			if (tLine != 99) {
 8005fa2:	2320      	movs	r3, #32
 8005fa4:	33ff      	adds	r3, #255	; 0xff
 8005fa6:	2218      	movs	r2, #24
 8005fa8:	189b      	adds	r3, r3, r2
 8005faa:	19db      	adds	r3, r3, r7
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	2b63      	cmp	r3, #99	; 0x63
 8005fb0:	d01b      	beq.n	8005fea <HAL_TIM_PeriodElapsedCallback+0x188e>
				if (tResponse == 'G') {
 8005fb2:	2348      	movs	r3, #72	; 0x48
 8005fb4:	33ff      	adds	r3, #255	; 0xff
 8005fb6:	189b      	adds	r3, r3, r2
 8005fb8:	19db      	adds	r3, r3, r7
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	2b47      	cmp	r3, #71	; 0x47
 8005fbe:	d105      	bne.n	8005fcc <HAL_TIM_PeriodElapsedCallback+0x1870>
					isResponseOk = 1;
 8005fc0:	4b83      	ldr	r3, [pc, #524]	; (80061d0 <HAL_TIM_PeriodElapsedCallback+0x1a74>)
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	701a      	strb	r2, [r3, #0]
					clearit();
 8005fc6:	f000 fec3 	bl	8006d50 <clearit>
}
 8005fca:	e289      	b.n	80064e0 <HAL_TIM_PeriodElapsedCallback+0x1d84>
				} else if (tResponse == 'B') {
 8005fcc:	2348      	movs	r3, #72	; 0x48
 8005fce:	33ff      	adds	r3, #255	; 0xff
 8005fd0:	2218      	movs	r2, #24
 8005fd2:	189b      	adds	r3, r3, r2
 8005fd4:	19db      	adds	r3, r3, r7
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	2b42      	cmp	r3, #66	; 0x42
 8005fda:	d000      	beq.n	8005fde <HAL_TIM_PeriodElapsedCallback+0x1882>
 8005fdc:	e280      	b.n	80064e0 <HAL_TIM_PeriodElapsedCallback+0x1d84>
					isResponseOk = 1;
 8005fde:	4b7c      	ldr	r3, [pc, #496]	; (80061d0 <HAL_TIM_PeriodElapsedCallback+0x1a74>)
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	701a      	strb	r2, [r3, #0]
					clearit();
 8005fe4:	f000 feb4 	bl	8006d50 <clearit>
}
 8005fe8:	e27a      	b.n	80064e0 <HAL_TIM_PeriodElapsedCallback+0x1d84>
				resTimeout--;
 8005fea:	4b7a      	ldr	r3, [pc, #488]	; (80061d4 <HAL_TIM_PeriodElapsedCallback+0x1a78>)
 8005fec:	881b      	ldrh	r3, [r3, #0]
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	b29a      	uxth	r2, r3
 8005ff4:	4b77      	ldr	r3, [pc, #476]	; (80061d4 <HAL_TIM_PeriodElapsedCallback+0x1a78>)
 8005ff6:	801a      	strh	r2, [r3, #0]
				if (resTimeout < 1) {
 8005ff8:	4b76      	ldr	r3, [pc, #472]	; (80061d4 <HAL_TIM_PeriodElapsedCallback+0x1a78>)
 8005ffa:	881b      	ldrh	r3, [r3, #0]
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d000      	beq.n	8006004 <HAL_TIM_PeriodElapsedCallback+0x18a8>
 8006002:	e26d      	b.n	80064e0 <HAL_TIM_PeriodElapsedCallback+0x1d84>
					if (!recResponse) {
 8006004:	4b74      	ldr	r3, [pc, #464]	; (80061d8 <HAL_TIM_PeriodElapsedCallback+0x1a7c>)
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	b2db      	uxtb	r3, r3
 800600a:	2b00      	cmp	r3, #0
 800600c:	d101      	bne.n	8006012 <HAL_TIM_PeriodElapsedCallback+0x18b6>
						rebootsystem();
 800600e:	f000 faa5 	bl	800655c <rebootsystem>
					isResponseOk = 0;
 8006012:	4b6f      	ldr	r3, [pc, #444]	; (80061d0 <HAL_TIM_PeriodElapsedCallback+0x1a74>)
 8006014:	2200      	movs	r2, #0
 8006016:	701a      	strb	r2, [r3, #0]
					clearit();
 8006018:	f000 fe9a 	bl	8006d50 <clearit>
}
 800601c:	e260      	b.n	80064e0 <HAL_TIM_PeriodElapsedCallback+0x1d84>
		} else if (commandCase == 8) { //battery voltage response check
 800601e:	4b6f      	ldr	r3, [pc, #444]	; (80061dc <HAL_TIM_PeriodElapsedCallback+0x1a80>)
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	b2db      	uxtb	r3, r3
 8006024:	2b08      	cmp	r3, #8
 8006026:	d000      	beq.n	800602a <HAL_TIM_PeriodElapsedCallback+0x18ce>
 8006028:	e25a      	b.n	80064e0 <HAL_TIM_PeriodElapsedCallback+0x1d84>
			uint8_t tLine = 99;
 800602a:	231e      	movs	r3, #30
 800602c:	33ff      	adds	r3, #255	; 0xff
 800602e:	2118      	movs	r1, #24
 8006030:	185b      	adds	r3, r3, r1
 8006032:	19db      	adds	r3, r3, r7
 8006034:	2263      	movs	r2, #99	; 0x63
 8006036:	701a      	strb	r2, [r3, #0]
			memset(vData,0,sizeof(vData));
 8006038:	2374      	movs	r3, #116	; 0x74
 800603a:	000c      	movs	r4, r1
 800603c:	185b      	adds	r3, r3, r1
 800603e:	19db      	adds	r3, r3, r7
 8006040:	2214      	movs	r2, #20
 8006042:	2100      	movs	r1, #0
 8006044:	0018      	movs	r0, r3
 8006046:	f008 fef6 	bl	800ee36 <memset>
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 800604a:	238e      	movs	r3, #142	; 0x8e
 800604c:	005b      	lsls	r3, r3, #1
 800604e:	191b      	adds	r3, r3, r4
 8006050:	19db      	adds	r3, r3, r7
 8006052:	2200      	movs	r2, #0
 8006054:	701a      	strb	r2, [r3, #0]
 8006056:	e05b      	b.n	8006110 <HAL_TIM_PeriodElapsedCallback+0x19b4>
				ptr = strstr(responseBuffer[i], "+CBC:");
 8006058:	248e      	movs	r4, #142	; 0x8e
 800605a:	0064      	lsls	r4, r4, #1
 800605c:	2618      	movs	r6, #24
 800605e:	19a3      	adds	r3, r4, r6
 8006060:	19db      	adds	r3, r3, r7
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	2232      	movs	r2, #50	; 0x32
 8006066:	435a      	muls	r2, r3
 8006068:	4b5d      	ldr	r3, [pc, #372]	; (80061e0 <HAL_TIM_PeriodElapsedCallback+0x1a84>)
 800606a:	18d3      	adds	r3, r2, r3
 800606c:	4a5f      	ldr	r2, [pc, #380]	; (80061ec <HAL_TIM_PeriodElapsedCallback+0x1a90>)
 800606e:	0011      	movs	r1, r2
 8006070:	0018      	movs	r0, r3
 8006072:	f008 ff38 	bl	800eee6 <strstr>
 8006076:	0003      	movs	r3, r0
 8006078:	25ac      	movs	r5, #172	; 0xac
 800607a:	19aa      	adds	r2, r5, r6
 800607c:	19d2      	adds	r2, r2, r7
 800607e:	6013      	str	r3, [r2, #0]
				ptr2 = strstr(responseBuffer[i], "ERROR");
 8006080:	19a3      	adds	r3, r4, r6
 8006082:	19db      	adds	r3, r3, r7
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	2232      	movs	r2, #50	; 0x32
 8006088:	435a      	muls	r2, r3
 800608a:	4b55      	ldr	r3, [pc, #340]	; (80061e0 <HAL_TIM_PeriodElapsedCallback+0x1a84>)
 800608c:	18d3      	adds	r3, r2, r3
 800608e:	4a56      	ldr	r2, [pc, #344]	; (80061e8 <HAL_TIM_PeriodElapsedCallback+0x1a8c>)
 8006090:	0011      	movs	r1, r2
 8006092:	0018      	movs	r0, r3
 8006094:	f008 ff27 	bl	800eee6 <strstr>
 8006098:	0003      	movs	r3, r0
 800609a:	22a8      	movs	r2, #168	; 0xa8
 800609c:	0031      	movs	r1, r6
 800609e:	1852      	adds	r2, r2, r1
 80060a0:	19d2      	adds	r2, r2, r7
 80060a2:	6013      	str	r3, [r2, #0]
				if (ptr != NULL) {
 80060a4:	186b      	adds	r3, r5, r1
 80060a6:	19db      	adds	r3, r3, r7
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00e      	beq.n	80060cc <HAL_TIM_PeriodElapsedCallback+0x1970>
					tLine = i;
 80060ae:	231e      	movs	r3, #30
 80060b0:	33ff      	adds	r3, #255	; 0xff
 80060b2:	185b      	adds	r3, r3, r1
 80060b4:	19db      	adds	r3, r3, r7
 80060b6:	1862      	adds	r2, r4, r1
 80060b8:	19d2      	adds	r2, r2, r7
 80060ba:	7812      	ldrb	r2, [r2, #0]
 80060bc:	701a      	strb	r2, [r3, #0]
					tResponse = 'G';
 80060be:	2348      	movs	r3, #72	; 0x48
 80060c0:	33ff      	adds	r3, #255	; 0xff
 80060c2:	185b      	adds	r3, r3, r1
 80060c4:	19db      	adds	r3, r3, r7
 80060c6:	2247      	movs	r2, #71	; 0x47
 80060c8:	701a      	strb	r2, [r3, #0]
					break;
 80060ca:	e029      	b.n	8006120 <HAL_TIM_PeriodElapsedCallback+0x19c4>
				if (ptr2 != NULL) {
 80060cc:	23a8      	movs	r3, #168	; 0xa8
 80060ce:	2118      	movs	r1, #24
 80060d0:	185b      	adds	r3, r3, r1
 80060d2:	19db      	adds	r3, r3, r7
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d010      	beq.n	80060fc <HAL_TIM_PeriodElapsedCallback+0x19a0>
					tLine = i;
 80060da:	231e      	movs	r3, #30
 80060dc:	33ff      	adds	r3, #255	; 0xff
 80060de:	185b      	adds	r3, r3, r1
 80060e0:	19db      	adds	r3, r3, r7
 80060e2:	228e      	movs	r2, #142	; 0x8e
 80060e4:	0052      	lsls	r2, r2, #1
 80060e6:	1852      	adds	r2, r2, r1
 80060e8:	19d2      	adds	r2, r2, r7
 80060ea:	7812      	ldrb	r2, [r2, #0]
 80060ec:	701a      	strb	r2, [r3, #0]
					tResponse = 'B';
 80060ee:	2348      	movs	r3, #72	; 0x48
 80060f0:	33ff      	adds	r3, #255	; 0xff
 80060f2:	185b      	adds	r3, r3, r1
 80060f4:	19db      	adds	r3, r3, r7
 80060f6:	2242      	movs	r2, #66	; 0x42
 80060f8:	701a      	strb	r2, [r3, #0]
					break;
 80060fa:	e011      	b.n	8006120 <HAL_TIM_PeriodElapsedCallback+0x19c4>
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 80060fc:	218e      	movs	r1, #142	; 0x8e
 80060fe:	0049      	lsls	r1, r1, #1
 8006100:	2018      	movs	r0, #24
 8006102:	180b      	adds	r3, r1, r0
 8006104:	19db      	adds	r3, r3, r7
 8006106:	781a      	ldrb	r2, [r3, #0]
 8006108:	180b      	adds	r3, r1, r0
 800610a:	19db      	adds	r3, r3, r7
 800610c:	3201      	adds	r2, #1
 800610e:	701a      	strb	r2, [r3, #0]
 8006110:	238e      	movs	r3, #142	; 0x8e
 8006112:	005b      	lsls	r3, r3, #1
 8006114:	2218      	movs	r2, #24
 8006116:	189b      	adds	r3, r3, r2
 8006118:	19db      	adds	r3, r3, r7
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	2b05      	cmp	r3, #5
 800611e:	d99b      	bls.n	8006058 <HAL_TIM_PeriodElapsedCallback+0x18fc>
			if (tLine != 99) {
 8006120:	231e      	movs	r3, #30
 8006122:	33ff      	adds	r3, #255	; 0xff
 8006124:	2118      	movs	r1, #24
 8006126:	185b      	adds	r3, r3, r1
 8006128:	19db      	adds	r3, r3, r7
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	2b63      	cmp	r3, #99	; 0x63
 800612e:	d100      	bne.n	8006132 <HAL_TIM_PeriodElapsedCallback+0x19d6>
 8006130:	e097      	b.n	8006262 <HAL_TIM_PeriodElapsedCallback+0x1b06>
				if (tResponse == 'G') {
 8006132:	2348      	movs	r3, #72	; 0x48
 8006134:	33ff      	adds	r3, #255	; 0xff
 8006136:	185b      	adds	r3, r3, r1
 8006138:	19db      	adds	r3, r3, r7
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	2b47      	cmp	r3, #71	; 0x47
 800613e:	d000      	beq.n	8006142 <HAL_TIM_PeriodElapsedCallback+0x19e6>
 8006140:	e080      	b.n	8006244 <HAL_TIM_PeriodElapsedCallback+0x1ae8>
					uint8_t totalCommas = 0;
 8006142:	231c      	movs	r3, #28
 8006144:	33ff      	adds	r3, #255	; 0xff
 8006146:	185b      	adds	r3, r3, r1
 8006148:	19db      	adds	r3, r3, r7
 800614a:	2200      	movs	r2, #0
 800614c:	701a      	strb	r2, [r3, #0]
					for(uint8_t coms=0;coms<15;coms++){
 800614e:	238d      	movs	r3, #141	; 0x8d
 8006150:	005b      	lsls	r3, r3, #1
 8006152:	185b      	adds	r3, r3, r1
 8006154:	19db      	adds	r3, r3, r7
 8006156:	2200      	movs	r2, #0
 8006158:	701a      	strb	r2, [r3, #0]
 800615a:	e053      	b.n	8006204 <HAL_TIM_PeriodElapsedCallback+0x1aa8>
						if(responseBuffer[tLine][coms]==','){
 800615c:	231e      	movs	r3, #30
 800615e:	33ff      	adds	r3, #255	; 0xff
 8006160:	2418      	movs	r4, #24
 8006162:	191b      	adds	r3, r3, r4
 8006164:	19db      	adds	r3, r3, r7
 8006166:	781a      	ldrb	r2, [r3, #0]
 8006168:	238d      	movs	r3, #141	; 0x8d
 800616a:	005b      	lsls	r3, r3, #1
 800616c:	191b      	adds	r3, r3, r4
 800616e:	19db      	adds	r3, r3, r7
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	491b      	ldr	r1, [pc, #108]	; (80061e0 <HAL_TIM_PeriodElapsedCallback+0x1a84>)
 8006174:	2032      	movs	r0, #50	; 0x32
 8006176:	4342      	muls	r2, r0
 8006178:	188a      	adds	r2, r1, r2
 800617a:	5cd3      	ldrb	r3, [r2, r3]
 800617c:	2b2c      	cmp	r3, #44	; 0x2c
 800617e:	d108      	bne.n	8006192 <HAL_TIM_PeriodElapsedCallback+0x1a36>
							totalCommas++;
 8006180:	211c      	movs	r1, #28
 8006182:	31ff      	adds	r1, #255	; 0xff
 8006184:	190b      	adds	r3, r1, r4
 8006186:	19db      	adds	r3, r3, r7
 8006188:	781a      	ldrb	r2, [r3, #0]
 800618a:	190b      	adds	r3, r1, r4
 800618c:	19db      	adds	r3, r3, r7
 800618e:	3201      	adds	r2, #1
 8006190:	701a      	strb	r2, [r3, #0]
						if(totalCommas==2){
 8006192:	231c      	movs	r3, #28
 8006194:	33ff      	adds	r3, #255	; 0xff
 8006196:	2018      	movs	r0, #24
 8006198:	181b      	adds	r3, r3, r0
 800619a:	19db      	adds	r3, r3, r7
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	2b02      	cmp	r3, #2
 80061a0:	d126      	bne.n	80061f0 <HAL_TIM_PeriodElapsedCallback+0x1a94>
							substring(vData,responseBuffer[tLine],coms+1,4);
 80061a2:	231e      	movs	r3, #30
 80061a4:	33ff      	adds	r3, #255	; 0xff
 80061a6:	181b      	adds	r3, r3, r0
 80061a8:	19db      	adds	r3, r3, r7
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	2232      	movs	r2, #50	; 0x32
 80061ae:	435a      	muls	r2, r3
 80061b0:	4b0b      	ldr	r3, [pc, #44]	; (80061e0 <HAL_TIM_PeriodElapsedCallback+0x1a84>)
 80061b2:	18d1      	adds	r1, r2, r3
 80061b4:	238d      	movs	r3, #141	; 0x8d
 80061b6:	005b      	lsls	r3, r3, #1
 80061b8:	181b      	adds	r3, r3, r0
 80061ba:	19db      	adds	r3, r3, r7
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	3301      	adds	r3, #1
 80061c0:	b2da      	uxtb	r2, r3
 80061c2:	2374      	movs	r3, #116	; 0x74
 80061c4:	181b      	adds	r3, r3, r0
 80061c6:	19d8      	adds	r0, r3, r7
 80061c8:	2304      	movs	r3, #4
 80061ca:	f001 fb91 	bl	80078f0 <substring>
							break;
 80061ce:	e021      	b.n	8006214 <HAL_TIM_PeriodElapsedCallback+0x1ab8>
 80061d0:	20000880 	.word	0x20000880
 80061d4:	2000087c 	.word	0x2000087c
 80061d8:	20000881 	.word	0x20000881
 80061dc:	2000087f 	.word	0x2000087f
 80061e0:	20000748 	.word	0x20000748
 80061e4:	08013398 	.word	0x08013398
 80061e8:	08013324 	.word	0x08013324
 80061ec:	080133a0 	.word	0x080133a0
					for(uint8_t coms=0;coms<15;coms++){
 80061f0:	218d      	movs	r1, #141	; 0x8d
 80061f2:	0049      	lsls	r1, r1, #1
 80061f4:	2018      	movs	r0, #24
 80061f6:	180b      	adds	r3, r1, r0
 80061f8:	19db      	adds	r3, r3, r7
 80061fa:	781a      	ldrb	r2, [r3, #0]
 80061fc:	180b      	adds	r3, r1, r0
 80061fe:	19db      	adds	r3, r3, r7
 8006200:	3201      	adds	r2, #1
 8006202:	701a      	strb	r2, [r3, #0]
 8006204:	238d      	movs	r3, #141	; 0x8d
 8006206:	005b      	lsls	r3, r3, #1
 8006208:	2218      	movs	r2, #24
 800620a:	189b      	adds	r3, r3, r2
 800620c:	19db      	adds	r3, r3, r7
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	2b0e      	cmp	r3, #14
 8006212:	d9a3      	bls.n	800615c <HAL_TIM_PeriodElapsedCallback+0x1a00>
					if(totalCommas==2){
 8006214:	231c      	movs	r3, #28
 8006216:	33ff      	adds	r3, #255	; 0xff
 8006218:	2218      	movs	r2, #24
 800621a:	189b      	adds	r3, r3, r2
 800621c:	19db      	adds	r3, r3, r7
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	2b02      	cmp	r3, #2
 8006222:	d109      	bne.n	8006238 <HAL_TIM_PeriodElapsedCallback+0x1adc>
						voltage = atoi(vData);
 8006224:	2374      	movs	r3, #116	; 0x74
 8006226:	189b      	adds	r3, r3, r2
 8006228:	19db      	adds	r3, r3, r7
 800622a:	0018      	movs	r0, r3
 800622c:	f008 fda4 	bl	800ed78 <atoi>
 8006230:	0003      	movs	r3, r0
 8006232:	b29a      	uxth	r2, r3
 8006234:	4bad      	ldr	r3, [pc, #692]	; (80064ec <HAL_TIM_PeriodElapsedCallback+0x1d90>)
 8006236:	801a      	strh	r2, [r3, #0]
					isResponseOk = 1;
 8006238:	4bad      	ldr	r3, [pc, #692]	; (80064f0 <HAL_TIM_PeriodElapsedCallback+0x1d94>)
 800623a:	2201      	movs	r2, #1
 800623c:	701a      	strb	r2, [r3, #0]
					clearit();
 800623e:	f000 fd87 	bl	8006d50 <clearit>
}
 8006242:	e14d      	b.n	80064e0 <HAL_TIM_PeriodElapsedCallback+0x1d84>
				} else if (tResponse == 'B') {
 8006244:	2348      	movs	r3, #72	; 0x48
 8006246:	33ff      	adds	r3, #255	; 0xff
 8006248:	2218      	movs	r2, #24
 800624a:	189b      	adds	r3, r3, r2
 800624c:	19db      	adds	r3, r3, r7
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	2b42      	cmp	r3, #66	; 0x42
 8006252:	d000      	beq.n	8006256 <HAL_TIM_PeriodElapsedCallback+0x1afa>
 8006254:	e144      	b.n	80064e0 <HAL_TIM_PeriodElapsedCallback+0x1d84>
					isResponseOk = 1;
 8006256:	4ba6      	ldr	r3, [pc, #664]	; (80064f0 <HAL_TIM_PeriodElapsedCallback+0x1d94>)
 8006258:	2201      	movs	r2, #1
 800625a:	701a      	strb	r2, [r3, #0]
					clearit();
 800625c:	f000 fd78 	bl	8006d50 <clearit>
}
 8006260:	e13e      	b.n	80064e0 <HAL_TIM_PeriodElapsedCallback+0x1d84>
				resTimeout--;
 8006262:	4ba4      	ldr	r3, [pc, #656]	; (80064f4 <HAL_TIM_PeriodElapsedCallback+0x1d98>)
 8006264:	881b      	ldrh	r3, [r3, #0]
 8006266:	b29b      	uxth	r3, r3
 8006268:	3b01      	subs	r3, #1
 800626a:	b29a      	uxth	r2, r3
 800626c:	4ba1      	ldr	r3, [pc, #644]	; (80064f4 <HAL_TIM_PeriodElapsedCallback+0x1d98>)
 800626e:	801a      	strh	r2, [r3, #0]
				if (resTimeout < 1) {
 8006270:	4ba0      	ldr	r3, [pc, #640]	; (80064f4 <HAL_TIM_PeriodElapsedCallback+0x1d98>)
 8006272:	881b      	ldrh	r3, [r3, #0]
 8006274:	b29b      	uxth	r3, r3
 8006276:	2b00      	cmp	r3, #0
 8006278:	d000      	beq.n	800627c <HAL_TIM_PeriodElapsedCallback+0x1b20>
 800627a:	e131      	b.n	80064e0 <HAL_TIM_PeriodElapsedCallback+0x1d84>
					if (!recResponse) {
 800627c:	4b9e      	ldr	r3, [pc, #632]	; (80064f8 <HAL_TIM_PeriodElapsedCallback+0x1d9c>)
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	b2db      	uxtb	r3, r3
 8006282:	2b00      	cmp	r3, #0
 8006284:	d101      	bne.n	800628a <HAL_TIM_PeriodElapsedCallback+0x1b2e>
						rebootsystem();
 8006286:	f000 f969 	bl	800655c <rebootsystem>
					isResponseOk = 0;
 800628a:	4b99      	ldr	r3, [pc, #612]	; (80064f0 <HAL_TIM_PeriodElapsedCallback+0x1d94>)
 800628c:	2200      	movs	r2, #0
 800628e:	701a      	strb	r2, [r3, #0]
					clearit();
 8006290:	f000 fd5e 	bl	8006d50 <clearit>
}
 8006294:	e124      	b.n	80064e0 <HAL_TIM_PeriodElapsedCallback+0x1d84>
	else if(htim == &htim3){
 8006296:	69fa      	ldr	r2, [r7, #28]
 8006298:	4b98      	ldr	r3, [pc, #608]	; (80064fc <HAL_TIM_PeriodElapsedCallback+0x1da0>)
 800629a:	429a      	cmp	r2, r3
 800629c:	d100      	bne.n	80062a0 <HAL_TIM_PeriodElapsedCallback+0x1b44>
 800629e:	e11f      	b.n	80064e0 <HAL_TIM_PeriodElapsedCallback+0x1d84>
	else if (htim == &htim17) {
 80062a0:	69fa      	ldr	r2, [r7, #28]
 80062a2:	4b97      	ldr	r3, [pc, #604]	; (8006500 <HAL_TIM_PeriodElapsedCallback+0x1da4>)
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d000      	beq.n	80062aa <HAL_TIM_PeriodElapsedCallback+0x1b4e>
 80062a8:	e11a      	b.n	80064e0 <HAL_TIM_PeriodElapsedCallback+0x1d84>
		hangCounter = 0;
 80062aa:	4b96      	ldr	r3, [pc, #600]	; (8006504 <HAL_TIM_PeriodElapsedCallback+0x1da8>)
 80062ac:	2200      	movs	r2, #0
 80062ae:	601a      	str	r2, [r3, #0]
		for(uint8_t tLine =0; tLine< nmeaLC; tLine++){
 80062b0:	231a      	movs	r3, #26
 80062b2:	33ff      	adds	r3, #255	; 0xff
 80062b4:	2218      	movs	r2, #24
 80062b6:	189b      	adds	r3, r3, r2
 80062b8:	19db      	adds	r3, r3, r7
 80062ba:	2200      	movs	r2, #0
 80062bc:	701a      	strb	r2, [r3, #0]
 80062be:	e071      	b.n	80063a4 <HAL_TIM_PeriodElapsedCallback+0x1c48>
			uint8_t commandSize = 0;
 80062c0:	238c      	movs	r3, #140	; 0x8c
 80062c2:	005b      	lsls	r3, r3, #1
 80062c4:	2418      	movs	r4, #24
 80062c6:	191b      	adds	r3, r3, r4
 80062c8:	19db      	adds	r3, r3, r7
 80062ca:	2200      	movs	r2, #0
 80062cc:	701a      	strb	r2, [r3, #0]
			tempSentenceCheck = strstr(nmeaResponse[tLine],"VTG");
 80062ce:	231a      	movs	r3, #26
 80062d0:	33ff      	adds	r3, #255	; 0xff
 80062d2:	191b      	adds	r3, r3, r4
 80062d4:	19db      	adds	r3, r3, r7
 80062d6:	781a      	ldrb	r2, [r3, #0]
 80062d8:	0013      	movs	r3, r2
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	189b      	adds	r3, r3, r2
 80062de:	011a      	lsls	r2, r3, #4
 80062e0:	189b      	adds	r3, r3, r2
 80062e2:	4a89      	ldr	r2, [pc, #548]	; (8006508 <HAL_TIM_PeriodElapsedCallback+0x1dac>)
 80062e4:	189b      	adds	r3, r3, r2
 80062e6:	4a89      	ldr	r2, [pc, #548]	; (800650c <HAL_TIM_PeriodElapsedCallback+0x1db0>)
 80062e8:	0011      	movs	r1, r2
 80062ea:	0018      	movs	r0, r3
 80062ec:	f008 fdfb 	bl	800eee6 <strstr>
 80062f0:	0003      	movs	r3, r0
 80062f2:	2284      	movs	r2, #132	; 0x84
 80062f4:	0052      	lsls	r2, r2, #1
 80062f6:	1911      	adds	r1, r2, r4
 80062f8:	19c9      	adds	r1, r1, r7
 80062fa:	600b      	str	r3, [r1, #0]
			if(tempSentenceCheck != NULL){
 80062fc:	1913      	adds	r3, r2, r4
 80062fe:	19db      	adds	r3, r3, r7
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d00d      	beq.n	8006322 <HAL_TIM_PeriodElapsedCallback+0x1bc6>
				HAL_UART_Transmit(&GNSS_PORT, "$PMTK314,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*28\r\n",51,2000);
 8006306:	23fa      	movs	r3, #250	; 0xfa
 8006308:	00db      	lsls	r3, r3, #3
 800630a:	4981      	ldr	r1, [pc, #516]	; (8006510 <HAL_TIM_PeriodElapsedCallback+0x1db4>)
 800630c:	4881      	ldr	r0, [pc, #516]	; (8006514 <HAL_TIM_PeriodElapsedCallback+0x1db8>)
 800630e:	2233      	movs	r2, #51	; 0x33
 8006310:	f006 fe36 	bl	800cf80 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart4, "GNS SET\r\n", 9, 500);
 8006314:	23fa      	movs	r3, #250	; 0xfa
 8006316:	005b      	lsls	r3, r3, #1
 8006318:	497f      	ldr	r1, [pc, #508]	; (8006518 <HAL_TIM_PeriodElapsedCallback+0x1dbc>)
 800631a:	4880      	ldr	r0, [pc, #512]	; (800651c <HAL_TIM_PeriodElapsedCallback+0x1dc0>)
 800631c:	2209      	movs	r2, #9
 800631e:	f006 fe2f 	bl	800cf80 <HAL_UART_Transmit>
			for(uint8_t tChar =0 ;tChar<NMEA_MAX_CHARS;tChar++) {
 8006322:	2318      	movs	r3, #24
 8006324:	33ff      	adds	r3, #255	; 0xff
 8006326:	2218      	movs	r2, #24
 8006328:	189b      	adds	r3, r3, r2
 800632a:	19db      	adds	r3, r3, r7
 800632c:	2200      	movs	r2, #0
 800632e:	701a      	strb	r2, [r3, #0]
 8006330:	e024      	b.n	800637c <HAL_TIM_PeriodElapsedCallback+0x1c20>
				if(nmeaResponse[tLine][tChar] != NULL){
 8006332:	231a      	movs	r3, #26
 8006334:	33ff      	adds	r3, #255	; 0xff
 8006336:	2518      	movs	r5, #24
 8006338:	195b      	adds	r3, r3, r5
 800633a:	19db      	adds	r3, r3, r7
 800633c:	781a      	ldrb	r2, [r3, #0]
 800633e:	2418      	movs	r4, #24
 8006340:	34ff      	adds	r4, #255	; 0xff
 8006342:	1963      	adds	r3, r4, r5
 8006344:	19db      	adds	r3, r3, r7
 8006346:	7819      	ldrb	r1, [r3, #0]
 8006348:	486f      	ldr	r0, [pc, #444]	; (8006508 <HAL_TIM_PeriodElapsedCallback+0x1dac>)
 800634a:	0013      	movs	r3, r2
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	189b      	adds	r3, r3, r2
 8006350:	011a      	lsls	r2, r3, #4
 8006352:	189b      	adds	r3, r3, r2
 8006354:	18c3      	adds	r3, r0, r3
 8006356:	5c5b      	ldrb	r3, [r3, r1]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d018      	beq.n	800638e <HAL_TIM_PeriodElapsedCallback+0x1c32>
					commandSize++;
 800635c:	218c      	movs	r1, #140	; 0x8c
 800635e:	0049      	lsls	r1, r1, #1
 8006360:	194b      	adds	r3, r1, r5
 8006362:	19db      	adds	r3, r3, r7
 8006364:	781a      	ldrb	r2, [r3, #0]
 8006366:	194b      	adds	r3, r1, r5
 8006368:	19db      	adds	r3, r3, r7
 800636a:	3201      	adds	r2, #1
 800636c:	701a      	strb	r2, [r3, #0]
			for(uint8_t tChar =0 ;tChar<NMEA_MAX_CHARS;tChar++) {
 800636e:	1963      	adds	r3, r4, r5
 8006370:	19db      	adds	r3, r3, r7
 8006372:	781a      	ldrb	r2, [r3, #0]
 8006374:	1963      	adds	r3, r4, r5
 8006376:	19db      	adds	r3, r3, r7
 8006378:	3201      	adds	r2, #1
 800637a:	701a      	strb	r2, [r3, #0]
 800637c:	2318      	movs	r3, #24
 800637e:	33ff      	adds	r3, #255	; 0xff
 8006380:	2218      	movs	r2, #24
 8006382:	189b      	adds	r3, r3, r2
 8006384:	19db      	adds	r3, r3, r7
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	2b54      	cmp	r3, #84	; 0x54
 800638a:	d9d2      	bls.n	8006332 <HAL_TIM_PeriodElapsedCallback+0x1bd6>
 800638c:	e000      	b.n	8006390 <HAL_TIM_PeriodElapsedCallback+0x1c34>
					break;
 800638e:	46c0      	nop			; (mov r8, r8)
		for(uint8_t tLine =0; tLine< nmeaLC; tLine++){
 8006390:	211a      	movs	r1, #26
 8006392:	31ff      	adds	r1, #255	; 0xff
 8006394:	2018      	movs	r0, #24
 8006396:	180b      	adds	r3, r1, r0
 8006398:	19db      	adds	r3, r3, r7
 800639a:	781a      	ldrb	r2, [r3, #0]
 800639c:	180b      	adds	r3, r1, r0
 800639e:	19db      	adds	r3, r3, r7
 80063a0:	3201      	adds	r2, #1
 80063a2:	701a      	strb	r2, [r3, #0]
 80063a4:	4b5e      	ldr	r3, [pc, #376]	; (8006520 <HAL_TIM_PeriodElapsedCallback+0x1dc4>)
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	221a      	movs	r2, #26
 80063ac:	32ff      	adds	r2, #255	; 0xff
 80063ae:	2418      	movs	r4, #24
 80063b0:	1912      	adds	r2, r2, r4
 80063b2:	19d2      	adds	r2, r2, r7
 80063b4:	7812      	ldrb	r2, [r2, #0]
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d382      	bcc.n	80062c0 <HAL_TIM_PeriodElapsedCallback+0x1b64>
		indicationCounter++;
 80063ba:	4b5a      	ldr	r3, [pc, #360]	; (8006524 <HAL_TIM_PeriodElapsedCallback+0x1dc8>)
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	3301      	adds	r3, #1
 80063c0:	b2da      	uxtb	r2, r3
 80063c2:	4b58      	ldr	r3, [pc, #352]	; (8006524 <HAL_TIM_PeriodElapsedCallback+0x1dc8>)
 80063c4:	701a      	strb	r2, [r3, #0]
		tempGps = nmea_parser(nmeaResponse, NMEA_MAX_CHARS,&crcc,&rCrc);
 80063c6:	4b58      	ldr	r3, [pc, #352]	; (8006528 <HAL_TIM_PeriodElapsedCallback+0x1dcc>)
 80063c8:	4a58      	ldr	r2, [pc, #352]	; (800652c <HAL_TIM_PeriodElapsedCallback+0x1dd0>)
 80063ca:	484f      	ldr	r0, [pc, #316]	; (8006508 <HAL_TIM_PeriodElapsedCallback+0x1dac>)
 80063cc:	2155      	movs	r1, #85	; 0x55
 80063ce:	f7fc faf3 	bl	80029b8 <nmea_parser>
 80063d2:	0003      	movs	r3, r0
 80063d4:	2288      	movs	r2, #136	; 0x88
 80063d6:	0052      	lsls	r2, r2, #1
 80063d8:	0020      	movs	r0, r4
 80063da:	1811      	adds	r1, r2, r0
 80063dc:	19c9      	adds	r1, r1, r7
 80063de:	600b      	str	r3, [r1, #0]
		if (tempGps != NULL) {
 80063e0:	1813      	adds	r3, r2, r0
 80063e2:	19db      	adds	r3, r3, r7
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d035      	beq.n	8006456 <HAL_TIM_PeriodElapsedCallback+0x1cfa>
			gps_info = tempGps;
 80063ea:	4b51      	ldr	r3, [pc, #324]	; (8006530 <HAL_TIM_PeriodElapsedCallback+0x1dd4>)
 80063ec:	1812      	adds	r2, r2, r0
 80063ee:	19d2      	adds	r2, r2, r7
 80063f0:	6812      	ldr	r2, [r2, #0]
 80063f2:	601a      	str	r2, [r3, #0]
			uint8_t vc = 0;
 80063f4:	2110      	movs	r1, #16
 80063f6:	31ff      	adds	r1, #255	; 0xff
 80063f8:	180b      	adds	r3, r1, r0
 80063fa:	19db      	adds	r3, r3, r7
 80063fc:	2200      	movs	r2, #0
 80063fe:	701a      	strb	r2, [r3, #0]
			vc=gps_info[16];
 8006400:	4b4b      	ldr	r3, [pc, #300]	; (8006530 <HAL_TIM_PeriodElapsedCallback+0x1dd4>)
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	180b      	adds	r3, r1, r0
 8006406:	19db      	adds	r3, r3, r7
 8006408:	7c12      	ldrb	r2, [r2, #16]
 800640a:	701a      	strb	r2, [r3, #0]
			gpsSpeed = gps_info[15];
 800640c:	4b48      	ldr	r3, [pc, #288]	; (8006530 <HAL_TIM_PeriodElapsedCallback+0x1dd4>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	7bda      	ldrb	r2, [r3, #15]
 8006412:	4b48      	ldr	r3, [pc, #288]	; (8006534 <HAL_TIM_PeriodElapsedCallback+0x1dd8>)
 8006414:	701a      	strb	r2, [r3, #0]
			vc&=0x10;
 8006416:	0004      	movs	r4, r0
 8006418:	190b      	adds	r3, r1, r4
 800641a:	19db      	adds	r3, r3, r7
 800641c:	0008      	movs	r0, r1
 800641e:	190a      	adds	r2, r1, r4
 8006420:	19d2      	adds	r2, r2, r7
 8006422:	7812      	ldrb	r2, [r2, #0]
 8006424:	2110      	movs	r1, #16
 8006426:	400a      	ands	r2, r1
 8006428:	701a      	strb	r2, [r3, #0]
			vc = vc<<3;
 800642a:	0001      	movs	r1, r0
 800642c:	0020      	movs	r0, r4
 800642e:	180b      	adds	r3, r1, r0
 8006430:	19db      	adds	r3, r3, r7
 8006432:	180a      	adds	r2, r1, r0
 8006434:	19d2      	adds	r2, r2, r7
 8006436:	7812      	ldrb	r2, [r2, #0]
 8006438:	00d2      	lsls	r2, r2, #3
 800643a:	701a      	strb	r2, [r3, #0]
			if(vc == 0x80){
 800643c:	180b      	adds	r3, r1, r0
 800643e:	19db      	adds	r3, r3, r7
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	2b80      	cmp	r3, #128	; 0x80
 8006444:	d103      	bne.n	800644e <HAL_TIM_PeriodElapsedCallback+0x1cf2>
				isGpsValid = 1;
 8006446:	4b3c      	ldr	r3, [pc, #240]	; (8006538 <HAL_TIM_PeriodElapsedCallback+0x1ddc>)
 8006448:	2201      	movs	r2, #1
 800644a:	701a      	strb	r2, [r3, #0]
 800644c:	e006      	b.n	800645c <HAL_TIM_PeriodElapsedCallback+0x1d00>
				isGpsValid = 0;
 800644e:	4b3a      	ldr	r3, [pc, #232]	; (8006538 <HAL_TIM_PeriodElapsedCallback+0x1ddc>)
 8006450:	2200      	movs	r2, #0
 8006452:	701a      	strb	r2, [r3, #0]
 8006454:	e002      	b.n	800645c <HAL_TIM_PeriodElapsedCallback+0x1d00>
			isGpsValid = 0;
 8006456:	4b38      	ldr	r3, [pc, #224]	; (8006538 <HAL_TIM_PeriodElapsedCallback+0x1ddc>)
 8006458:	2200      	movs	r2, #0
 800645a:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim17);
 800645c:	4b28      	ldr	r3, [pc, #160]	; (8006500 <HAL_TIM_PeriodElapsedCallback+0x1da4>)
 800645e:	0018      	movs	r0, r3
 8006460:	f005 fdde 	bl	800c020 <HAL_TIM_Base_Stop_IT>
		isGNSSTimStart = 0;
 8006464:	4b35      	ldr	r3, [pc, #212]	; (800653c <HAL_TIM_PeriodElapsedCallback+0x1de0>)
 8006466:	2200      	movs	r2, #0
 8006468:	701a      	strb	r2, [r3, #0]
		if (tim6Count > msgPacketSaveInterval) {
 800646a:	4b35      	ldr	r3, [pc, #212]	; (8006540 <HAL_TIM_PeriodElapsedCallback+0x1de4>)
 800646c:	781a      	ldrb	r2, [r3, #0]
 800646e:	4b35      	ldr	r3, [pc, #212]	; (8006544 <HAL_TIM_PeriodElapsedCallback+0x1de8>)
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	b2db      	uxtb	r3, r3
 8006474:	429a      	cmp	r2, r3
 8006476:	d914      	bls.n	80064a2 <HAL_TIM_PeriodElapsedCallback+0x1d46>
			if (isLoggedIn == 0 && isTcpOpen == 0 && flashready == 1) {
 8006478:	4b33      	ldr	r3, [pc, #204]	; (8006548 <HAL_TIM_PeriodElapsedCallback+0x1dec>)
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	b2db      	uxtb	r3, r3
 800647e:	2b00      	cmp	r3, #0
 8006480:	d10b      	bne.n	800649a <HAL_TIM_PeriodElapsedCallback+0x1d3e>
 8006482:	4b32      	ldr	r3, [pc, #200]	; (800654c <HAL_TIM_PeriodElapsedCallback+0x1df0>)
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	b2db      	uxtb	r3, r3
 8006488:	2b00      	cmp	r3, #0
 800648a:	d106      	bne.n	800649a <HAL_TIM_PeriodElapsedCallback+0x1d3e>
 800648c:	4b30      	ldr	r3, [pc, #192]	; (8006550 <HAL_TIM_PeriodElapsedCallback+0x1df4>)
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	b2db      	uxtb	r3, r3
 8006492:	2b01      	cmp	r3, #1
 8006494:	d101      	bne.n	800649a <HAL_TIM_PeriodElapsedCallback+0x1d3e>
				save_data_packet();
 8006496:	f000 ff49 	bl	800732c <save_data_packet>
			tim6Count = 0;
 800649a:	4b29      	ldr	r3, [pc, #164]	; (8006540 <HAL_TIM_PeriodElapsedCallback+0x1de4>)
 800649c:	2200      	movs	r2, #0
 800649e:	701a      	strb	r2, [r3, #0]
 80064a0:	e005      	b.n	80064ae <HAL_TIM_PeriodElapsedCallback+0x1d52>
			tim6Count++;
 80064a2:	4b27      	ldr	r3, [pc, #156]	; (8006540 <HAL_TIM_PeriodElapsedCallback+0x1de4>)
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	3301      	adds	r3, #1
 80064a8:	b2da      	uxtb	r2, r3
 80064aa:	4b25      	ldr	r3, [pc, #148]	; (8006540 <HAL_TIM_PeriodElapsedCallback+0x1de4>)
 80064ac:	701a      	strb	r2, [r3, #0]
		memset(nmeaResponse, 0, sizeof(nmeaResponse));
 80064ae:	23aa      	movs	r3, #170	; 0xaa
 80064b0:	005a      	lsls	r2, r3, #1
 80064b2:	4b15      	ldr	r3, [pc, #84]	; (8006508 <HAL_TIM_PeriodElapsedCallback+0x1dac>)
 80064b4:	2100      	movs	r1, #0
 80064b6:	0018      	movs	r0, r3
 80064b8:	f008 fcbd 	bl	800ee36 <memset>
		nmeaLC = 0;
 80064bc:	4b18      	ldr	r3, [pc, #96]	; (8006520 <HAL_TIM_PeriodElapsedCallback+0x1dc4>)
 80064be:	2200      	movs	r2, #0
 80064c0:	701a      	strb	r2, [r3, #0]
		nmeaCC = 0;
 80064c2:	4b24      	ldr	r3, [pc, #144]	; (8006554 <HAL_TIM_PeriodElapsedCallback+0x1df8>)
 80064c4:	2200      	movs	r2, #0
 80064c6:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&GNSS_PORT, GNSS_BUFFER, 1);
 80064c8:	4923      	ldr	r1, [pc, #140]	; (8006558 <HAL_TIM_PeriodElapsedCallback+0x1dfc>)
 80064ca:	4b12      	ldr	r3, [pc, #72]	; (8006514 <HAL_TIM_PeriodElapsedCallback+0x1db8>)
 80064cc:	2201      	movs	r2, #1
 80064ce:	0018      	movs	r0, r3
 80064d0:	f006 fdf2 	bl	800d0b8 <HAL_UART_Receive_IT>
		HAL_UART_Receive_IT(&GNSS_PORT, GNSS_BUFFER, 1);
 80064d4:	4920      	ldr	r1, [pc, #128]	; (8006558 <HAL_TIM_PeriodElapsedCallback+0x1dfc>)
 80064d6:	4b0f      	ldr	r3, [pc, #60]	; (8006514 <HAL_TIM_PeriodElapsedCallback+0x1db8>)
 80064d8:	2201      	movs	r2, #1
 80064da:	0018      	movs	r0, r3
 80064dc:	f006 fdec 	bl	800d0b8 <HAL_UART_Receive_IT>
}
 80064e0:	46c0      	nop			; (mov r8, r8)
 80064e2:	46bd      	mov	sp, r7
 80064e4:	b058      	add	sp, #352	; 0x160
 80064e6:	bc80      	pop	{r7}
 80064e8:	46b8      	mov	r8, r7
 80064ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064ec:	20000002 	.word	0x20000002
 80064f0:	20000880 	.word	0x20000880
 80064f4:	2000087c 	.word	0x2000087c
 80064f8:	20000881 	.word	0x20000881
 80064fc:	2000034c 	.word	0x2000034c
 8006500:	2000047c 	.word	0x2000047c
 8006504:	20000730 	.word	0x20000730
 8006508:	200008d8 	.word	0x200008d8
 800650c:	080133a8 	.word	0x080133a8
 8006510:	080133ac 	.word	0x080133ac
 8006514:	2000055c 	.word	0x2000055c
 8006518:	080133e0 	.word	0x080133e0
 800651c:	20000684 	.word	0x20000684
 8006520:	20000876 	.word	0x20000876
 8006524:	20000735 	.word	0x20000735
 8006528:	20000737 	.word	0x20000737
 800652c:	20000736 	.word	0x20000736
 8006530:	2000002c 	.word	0x2000002c
 8006534:	20000723 	.word	0x20000723
 8006538:	20000722 	.word	0x20000722
 800653c:	2000087e 	.word	0x2000087e
 8006540:	20000a31 	.word	0x20000a31
 8006544:	20000000 	.word	0x20000000
 8006548:	20000a30 	.word	0x20000a30
 800654c:	20000a2c 	.word	0x20000a2c
 8006550:	20000d1c 	.word	0x20000d1c
 8006554:	20000877 	.word	0x20000877
 8006558:	20000744 	.word	0x20000744

0800655c <rebootsystem>:

void rebootsystem() {
 800655c:	b580      	push	{r7, lr}
 800655e:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 1);
	save_to_flash(1);
 8006560:	2001      	movs	r0, #1
 8006562:	f000 f803 	bl	800656c <save_to_flash>
	NVIC_SystemReset();
 8006566:	f7fd f92d 	bl	80037c4 <__NVIC_SystemReset>
	...

0800656c <save_to_flash>:
	// todo save flash info
}
void save_to_flash(uint8_t autoRstValue) {
 800656c:	b590      	push	{r4, r7, lr}
 800656e:	b0c5      	sub	sp, #276	; 0x114
 8006570:	af00      	add	r7, sp, #0
 8006572:	0002      	movs	r2, r0
 8006574:	4bb2      	ldr	r3, [pc, #712]	; (8006840 <save_to_flash+0x2d4>)
 8006576:	2488      	movs	r4, #136	; 0x88
 8006578:	0064      	lsls	r4, r4, #1
 800657a:	191b      	adds	r3, r3, r4
 800657c:	19db      	adds	r3, r3, r7
 800657e:	701a      	strb	r2, [r3, #0]
	flashready = 0;
 8006580:	4bb0      	ldr	r3, [pc, #704]	; (8006844 <save_to_flash+0x2d8>)
 8006582:	2200      	movs	r2, #0
 8006584:	701a      	strb	r2, [r3, #0]

	uint8_t configPage[LASTPAGE_ADD+2];
	memset(configPage,0,sizeof(configPage));
 8006586:	2310      	movs	r3, #16
 8006588:	18fb      	adds	r3, r7, r3
 800658a:	22fc      	movs	r2, #252	; 0xfc
 800658c:	2100      	movs	r1, #0
 800658e:	0018      	movs	r0, r3
 8006590:	f008 fc51 	bl	800ee36 <memset>
	//First time
	W25qxx_EraseSector(0);
 8006594:	2000      	movs	r0, #0
 8006596:	f002 ff15 	bl	80093c4 <W25qxx_EraseSector>
	isFlash =1;
 800659a:	4bab      	ldr	r3, [pc, #684]	; (8006848 <save_to_flash+0x2dc>)
 800659c:	2201      	movs	r2, #1
 800659e:	701a      	strb	r2, [r3, #0]
	configPage[0] = isFlash; // isflash
 80065a0:	4ba9      	ldr	r3, [pc, #676]	; (8006848 <save_to_flash+0x2dc>)
 80065a2:	781a      	ldrb	r2, [r3, #0]
 80065a4:	4ba9      	ldr	r3, [pc, #676]	; (800684c <save_to_flash+0x2e0>)
 80065a6:	191b      	adds	r3, r3, r4
 80065a8:	19db      	adds	r3, r3, r7
 80065aa:	701a      	strb	r2, [r3, #0]

	uint8_t t[2];
	t[0] = StartSec >> 8;
 80065ac:	4ba8      	ldr	r3, [pc, #672]	; (8006850 <save_to_flash+0x2e4>)
 80065ae:	881b      	ldrh	r3, [r3, #0]
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	0a1b      	lsrs	r3, r3, #8
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	b2da      	uxtb	r2, r3
 80065b8:	4ba6      	ldr	r3, [pc, #664]	; (8006854 <save_to_flash+0x2e8>)
 80065ba:	191b      	adds	r3, r3, r4
 80065bc:	19db      	adds	r3, r3, r7
 80065be:	701a      	strb	r2, [r3, #0]
	t[1] = StartSec;
 80065c0:	4ba3      	ldr	r3, [pc, #652]	; (8006850 <save_to_flash+0x2e4>)
 80065c2:	881b      	ldrh	r3, [r3, #0]
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	b2da      	uxtb	r2, r3
 80065c8:	4ba2      	ldr	r3, [pc, #648]	; (8006854 <save_to_flash+0x2e8>)
 80065ca:	191b      	adds	r3, r3, r4
 80065cc:	19db      	adds	r3, r3, r7
 80065ce:	705a      	strb	r2, [r3, #1]
	configPage[MSBSS] = t[0]; //MSB StartSec
 80065d0:	4ba0      	ldr	r3, [pc, #640]	; (8006854 <save_to_flash+0x2e8>)
 80065d2:	191b      	adds	r3, r3, r4
 80065d4:	19db      	adds	r3, r3, r7
 80065d6:	781a      	ldrb	r2, [r3, #0]
 80065d8:	4b9c      	ldr	r3, [pc, #624]	; (800684c <save_to_flash+0x2e0>)
 80065da:	0021      	movs	r1, r4
 80065dc:	191b      	adds	r3, r3, r4
 80065de:	19db      	adds	r3, r3, r7
 80065e0:	705a      	strb	r2, [r3, #1]
	configPage[LSBSS] = t[1]; //LSB StartSec
 80065e2:	4b9c      	ldr	r3, [pc, #624]	; (8006854 <save_to_flash+0x2e8>)
 80065e4:	185b      	adds	r3, r3, r1
 80065e6:	19db      	adds	r3, r3, r7
 80065e8:	785a      	ldrb	r2, [r3, #1]
 80065ea:	4b98      	ldr	r3, [pc, #608]	; (800684c <save_to_flash+0x2e0>)
 80065ec:	185b      	adds	r3, r3, r1
 80065ee:	19db      	adds	r3, r3, r7
 80065f0:	709a      	strb	r2, [r3, #2]

	t[0] = StartN >> 8;
 80065f2:	4b99      	ldr	r3, [pc, #612]	; (8006858 <save_to_flash+0x2ec>)
 80065f4:	881b      	ldrh	r3, [r3, #0]
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	0a1b      	lsrs	r3, r3, #8
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	b2da      	uxtb	r2, r3
 80065fe:	4b95      	ldr	r3, [pc, #596]	; (8006854 <save_to_flash+0x2e8>)
 8006600:	185b      	adds	r3, r3, r1
 8006602:	19db      	adds	r3, r3, r7
 8006604:	701a      	strb	r2, [r3, #0]
	t[1] = StartN;
 8006606:	4b94      	ldr	r3, [pc, #592]	; (8006858 <save_to_flash+0x2ec>)
 8006608:	881b      	ldrh	r3, [r3, #0]
 800660a:	b29b      	uxth	r3, r3
 800660c:	b2da      	uxtb	r2, r3
 800660e:	4b91      	ldr	r3, [pc, #580]	; (8006854 <save_to_flash+0x2e8>)
 8006610:	185b      	adds	r3, r3, r1
 8006612:	19db      	adds	r3, r3, r7
 8006614:	705a      	strb	r2, [r3, #1]
	configPage[MSBSN] = t[0]; //MSB StartN
 8006616:	4b8f      	ldr	r3, [pc, #572]	; (8006854 <save_to_flash+0x2e8>)
 8006618:	185b      	adds	r3, r3, r1
 800661a:	19db      	adds	r3, r3, r7
 800661c:	781a      	ldrb	r2, [r3, #0]
 800661e:	4b8b      	ldr	r3, [pc, #556]	; (800684c <save_to_flash+0x2e0>)
 8006620:	185b      	adds	r3, r3, r1
 8006622:	19db      	adds	r3, r3, r7
 8006624:	70da      	strb	r2, [r3, #3]
	configPage[LSBSN] = t[1]; //LSB StartN
 8006626:	4b8b      	ldr	r3, [pc, #556]	; (8006854 <save_to_flash+0x2e8>)
 8006628:	185b      	adds	r3, r3, r1
 800662a:	19db      	adds	r3, r3, r7
 800662c:	785a      	ldrb	r2, [r3, #1]
 800662e:	4b87      	ldr	r3, [pc, #540]	; (800684c <save_to_flash+0x2e0>)
 8006630:	185b      	adds	r3, r3, r1
 8006632:	19db      	adds	r3, r3, r7
 8006634:	711a      	strb	r2, [r3, #4]

	t[0] = EndSec >> 8;
 8006636:	4b89      	ldr	r3, [pc, #548]	; (800685c <save_to_flash+0x2f0>)
 8006638:	881b      	ldrh	r3, [r3, #0]
 800663a:	b29b      	uxth	r3, r3
 800663c:	0a1b      	lsrs	r3, r3, #8
 800663e:	b29b      	uxth	r3, r3
 8006640:	b2da      	uxtb	r2, r3
 8006642:	4b84      	ldr	r3, [pc, #528]	; (8006854 <save_to_flash+0x2e8>)
 8006644:	185b      	adds	r3, r3, r1
 8006646:	19db      	adds	r3, r3, r7
 8006648:	701a      	strb	r2, [r3, #0]
	t[1] = EndSec;
 800664a:	4b84      	ldr	r3, [pc, #528]	; (800685c <save_to_flash+0x2f0>)
 800664c:	881b      	ldrh	r3, [r3, #0]
 800664e:	b29b      	uxth	r3, r3
 8006650:	b2da      	uxtb	r2, r3
 8006652:	4b80      	ldr	r3, [pc, #512]	; (8006854 <save_to_flash+0x2e8>)
 8006654:	185b      	adds	r3, r3, r1
 8006656:	19db      	adds	r3, r3, r7
 8006658:	705a      	strb	r2, [r3, #1]
	configPage[MSBES] = t[0]; //MSB EndSec
 800665a:	4b7e      	ldr	r3, [pc, #504]	; (8006854 <save_to_flash+0x2e8>)
 800665c:	185b      	adds	r3, r3, r1
 800665e:	19db      	adds	r3, r3, r7
 8006660:	781a      	ldrb	r2, [r3, #0]
 8006662:	4b7a      	ldr	r3, [pc, #488]	; (800684c <save_to_flash+0x2e0>)
 8006664:	185b      	adds	r3, r3, r1
 8006666:	19db      	adds	r3, r3, r7
 8006668:	715a      	strb	r2, [r3, #5]
	configPage[LSBES] = t[1]; //LSB EndSec
 800666a:	4b7a      	ldr	r3, [pc, #488]	; (8006854 <save_to_flash+0x2e8>)
 800666c:	185b      	adds	r3, r3, r1
 800666e:	19db      	adds	r3, r3, r7
 8006670:	785a      	ldrb	r2, [r3, #1]
 8006672:	4b76      	ldr	r3, [pc, #472]	; (800684c <save_to_flash+0x2e0>)
 8006674:	185b      	adds	r3, r3, r1
 8006676:	19db      	adds	r3, r3, r7
 8006678:	719a      	strb	r2, [r3, #6]

	t[0] = EndN >> 8;
 800667a:	4b79      	ldr	r3, [pc, #484]	; (8006860 <save_to_flash+0x2f4>)
 800667c:	881b      	ldrh	r3, [r3, #0]
 800667e:	b29b      	uxth	r3, r3
 8006680:	0a1b      	lsrs	r3, r3, #8
 8006682:	b29b      	uxth	r3, r3
 8006684:	b2da      	uxtb	r2, r3
 8006686:	4b73      	ldr	r3, [pc, #460]	; (8006854 <save_to_flash+0x2e8>)
 8006688:	185b      	adds	r3, r3, r1
 800668a:	19db      	adds	r3, r3, r7
 800668c:	701a      	strb	r2, [r3, #0]
	t[1] = EndN;
 800668e:	4b74      	ldr	r3, [pc, #464]	; (8006860 <save_to_flash+0x2f4>)
 8006690:	881b      	ldrh	r3, [r3, #0]
 8006692:	b29b      	uxth	r3, r3
 8006694:	b2da      	uxtb	r2, r3
 8006696:	4b6f      	ldr	r3, [pc, #444]	; (8006854 <save_to_flash+0x2e8>)
 8006698:	185b      	adds	r3, r3, r1
 800669a:	19db      	adds	r3, r3, r7
 800669c:	705a      	strb	r2, [r3, #1]
	configPage[MSBEN] = t[0]; //MSB EndN
 800669e:	4b6d      	ldr	r3, [pc, #436]	; (8006854 <save_to_flash+0x2e8>)
 80066a0:	185b      	adds	r3, r3, r1
 80066a2:	19db      	adds	r3, r3, r7
 80066a4:	781a      	ldrb	r2, [r3, #0]
 80066a6:	4b69      	ldr	r3, [pc, #420]	; (800684c <save_to_flash+0x2e0>)
 80066a8:	185b      	adds	r3, r3, r1
 80066aa:	19db      	adds	r3, r3, r7
 80066ac:	71da      	strb	r2, [r3, #7]
	configPage[LSBEN] = t[1]; //LSB EndN
 80066ae:	4b69      	ldr	r3, [pc, #420]	; (8006854 <save_to_flash+0x2e8>)
 80066b0:	185b      	adds	r3, r3, r1
 80066b2:	19db      	adds	r3, r3, r7
 80066b4:	785a      	ldrb	r2, [r3, #1]
 80066b6:	4b65      	ldr	r3, [pc, #404]	; (800684c <save_to_flash+0x2e0>)
 80066b8:	185b      	adds	r3, r3, r1
 80066ba:	19db      	adds	r3, r3, r7
 80066bc:	721a      	strb	r2, [r3, #8]

	configPage[CP1_ADD] = cPin[0];  //pin 1
 80066be:	4b69      	ldr	r3, [pc, #420]	; (8006864 <save_to_flash+0x2f8>)
 80066c0:	781a      	ldrb	r2, [r3, #0]
 80066c2:	4b62      	ldr	r3, [pc, #392]	; (800684c <save_to_flash+0x2e0>)
 80066c4:	185b      	adds	r3, r3, r1
 80066c6:	19db      	adds	r3, r3, r7
 80066c8:	725a      	strb	r2, [r3, #9]
	configPage[CP2_ADD] = cPin[1]; //pin 2
 80066ca:	4b66      	ldr	r3, [pc, #408]	; (8006864 <save_to_flash+0x2f8>)
 80066cc:	785a      	ldrb	r2, [r3, #1]
 80066ce:	4b5f      	ldr	r3, [pc, #380]	; (800684c <save_to_flash+0x2e0>)
 80066d0:	185b      	adds	r3, r3, r1
 80066d2:	19db      	adds	r3, r3, r7
 80066d4:	729a      	strb	r2, [r3, #10]
	configPage[CP3_ADD] = cPin[2]; //pin 3
 80066d6:	4b63      	ldr	r3, [pc, #396]	; (8006864 <save_to_flash+0x2f8>)
 80066d8:	789a      	ldrb	r2, [r3, #2]
 80066da:	4b5c      	ldr	r3, [pc, #368]	; (800684c <save_to_flash+0x2e0>)
 80066dc:	185b      	adds	r3, r3, r1
 80066de:	19db      	adds	r3, r3, r7
 80066e0:	72da      	strb	r2, [r3, #11]
	configPage[CP4_ADD] = cPin[3]; //pin 4
 80066e2:	4b60      	ldr	r3, [pc, #384]	; (8006864 <save_to_flash+0x2f8>)
 80066e4:	78da      	ldrb	r2, [r3, #3]
 80066e6:	4b59      	ldr	r3, [pc, #356]	; (800684c <save_to_flash+0x2e0>)
 80066e8:	185b      	adds	r3, r3, r1
 80066ea:	19db      	adds	r3, r3, r7
 80066ec:	731a      	strb	r2, [r3, #12]

	// saving valid sender
	for (uint8_t te = VALIDSENSTART_ADD; te < VALIDSENEND_ADD+1; te++) {
 80066ee:	2310      	movs	r3, #16
 80066f0:	33ff      	adds	r3, #255	; 0xff
 80066f2:	18fb      	adds	r3, r7, r3
 80066f4:	220d      	movs	r2, #13
 80066f6:	701a      	strb	r2, [r3, #0]
 80066f8:	e014      	b.n	8006724 <save_to_flash+0x1b8>
		configPage[te] = validSender[te - VALIDSENSTART_ADD];
 80066fa:	2010      	movs	r0, #16
 80066fc:	30ff      	adds	r0, #255	; 0xff
 80066fe:	183b      	adds	r3, r7, r0
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	3b0d      	subs	r3, #13
 8006704:	001a      	movs	r2, r3
 8006706:	183b      	adds	r3, r7, r0
 8006708:	781b      	ldrb	r3, [r3, #0]
 800670a:	4957      	ldr	r1, [pc, #348]	; (8006868 <save_to_flash+0x2fc>)
 800670c:	5c89      	ldrb	r1, [r1, r2]
 800670e:	4a4f      	ldr	r2, [pc, #316]	; (800684c <save_to_flash+0x2e0>)
 8006710:	2488      	movs	r4, #136	; 0x88
 8006712:	0064      	lsls	r4, r4, #1
 8006714:	1912      	adds	r2, r2, r4
 8006716:	19d2      	adds	r2, r2, r7
 8006718:	54d1      	strb	r1, [r2, r3]
	for (uint8_t te = VALIDSENSTART_ADD; te < VALIDSENEND_ADD+1; te++) {
 800671a:	183b      	adds	r3, r7, r0
 800671c:	781a      	ldrb	r2, [r3, #0]
 800671e:	183b      	adds	r3, r7, r0
 8006720:	3201      	adds	r2, #1
 8006722:	701a      	strb	r2, [r3, #0]
 8006724:	2310      	movs	r3, #16
 8006726:	33ff      	adds	r3, #255	; 0xff
 8006728:	18fb      	adds	r3, r7, r3
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	2b16      	cmp	r3, #22
 800672e:	d9e4      	bls.n	80066fa <save_to_flash+0x18e>
	}
	//------------------------------------


	//saving domain address from 23 - 72
	for (uint8_t te = DOMAINSTART_ADD; te < DOMAINEND_ADD+1; te++) {
 8006730:	2387      	movs	r3, #135	; 0x87
 8006732:	005b      	lsls	r3, r3, #1
 8006734:	18fb      	adds	r3, r7, r3
 8006736:	2217      	movs	r2, #23
 8006738:	701a      	strb	r2, [r3, #0]
 800673a:	e014      	b.n	8006766 <save_to_flash+0x1fa>
		configPage[te] = domainAdd[te - DOMAINSTART_ADD];
 800673c:	2087      	movs	r0, #135	; 0x87
 800673e:	0040      	lsls	r0, r0, #1
 8006740:	183b      	adds	r3, r7, r0
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	3b17      	subs	r3, #23
 8006746:	001a      	movs	r2, r3
 8006748:	183b      	adds	r3, r7, r0
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	4947      	ldr	r1, [pc, #284]	; (800686c <save_to_flash+0x300>)
 800674e:	5c89      	ldrb	r1, [r1, r2]
 8006750:	4a3e      	ldr	r2, [pc, #248]	; (800684c <save_to_flash+0x2e0>)
 8006752:	2488      	movs	r4, #136	; 0x88
 8006754:	0064      	lsls	r4, r4, #1
 8006756:	1912      	adds	r2, r2, r4
 8006758:	19d2      	adds	r2, r2, r7
 800675a:	54d1      	strb	r1, [r2, r3]
	for (uint8_t te = DOMAINSTART_ADD; te < DOMAINEND_ADD+1; te++) {
 800675c:	183b      	adds	r3, r7, r0
 800675e:	781a      	ldrb	r2, [r3, #0]
 8006760:	183b      	adds	r3, r7, r0
 8006762:	3201      	adds	r2, #1
 8006764:	701a      	strb	r2, [r3, #0]
 8006766:	2387      	movs	r3, #135	; 0x87
 8006768:	005b      	lsls	r3, r3, #1
 800676a:	18fb      	adds	r3, r7, r3
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	2b48      	cmp	r3, #72	; 0x48
 8006770:	d9e4      	bls.n	800673c <save_to_flash+0x1d0>
	}
	//----------------------------------------


	//saving port from 73 - 78
	for (uint8_t te = PORTSTART_ADD; te < PORTEND_ADD+1; te++) {
 8006772:	230e      	movs	r3, #14
 8006774:	33ff      	adds	r3, #255	; 0xff
 8006776:	18fb      	adds	r3, r7, r3
 8006778:	2249      	movs	r2, #73	; 0x49
 800677a:	701a      	strb	r2, [r3, #0]
 800677c:	e014      	b.n	80067a8 <save_to_flash+0x23c>
		configPage[te] = portAdd[te - PORTSTART_ADD];
 800677e:	200e      	movs	r0, #14
 8006780:	30ff      	adds	r0, #255	; 0xff
 8006782:	183b      	adds	r3, r7, r0
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	3b49      	subs	r3, #73	; 0x49
 8006788:	001a      	movs	r2, r3
 800678a:	183b      	adds	r3, r7, r0
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	4938      	ldr	r1, [pc, #224]	; (8006870 <save_to_flash+0x304>)
 8006790:	5c89      	ldrb	r1, [r1, r2]
 8006792:	4a2e      	ldr	r2, [pc, #184]	; (800684c <save_to_flash+0x2e0>)
 8006794:	2488      	movs	r4, #136	; 0x88
 8006796:	0064      	lsls	r4, r4, #1
 8006798:	1912      	adds	r2, r2, r4
 800679a:	19d2      	adds	r2, r2, r7
 800679c:	54d1      	strb	r1, [r2, r3]
	for (uint8_t te = PORTSTART_ADD; te < PORTEND_ADD+1; te++) {
 800679e:	183b      	adds	r3, r7, r0
 80067a0:	781a      	ldrb	r2, [r3, #0]
 80067a2:	183b      	adds	r3, r7, r0
 80067a4:	3201      	adds	r2, #1
 80067a6:	701a      	strb	r2, [r3, #0]
 80067a8:	230e      	movs	r3, #14
 80067aa:	33ff      	adds	r3, #255	; 0xff
 80067ac:	18fb      	adds	r3, r7, r3
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	2b4e      	cmp	r3, #78	; 0x4e
 80067b2:	d9e4      	bls.n	800677e <save_to_flash+0x212>
	}
	//-----------------------------------

	configPage[LDIA_ADD] = locationDataIntervalA;  //locationDataIntervalA = 5
 80067b4:	4b2f      	ldr	r3, [pc, #188]	; (8006874 <save_to_flash+0x308>)
 80067b6:	7819      	ldrb	r1, [r3, #0]
 80067b8:	4b24      	ldr	r3, [pc, #144]	; (800684c <save_to_flash+0x2e0>)
 80067ba:	2088      	movs	r0, #136	; 0x88
 80067bc:	0040      	lsls	r0, r0, #1
 80067be:	181b      	adds	r3, r3, r0
 80067c0:	19db      	adds	r3, r3, r7
 80067c2:	224f      	movs	r2, #79	; 0x4f
 80067c4:	5499      	strb	r1, [r3, r2]
	configPage[LDIB_ADD] = locationDataIntervalB;  //locationDataIntervalB = 5
 80067c6:	4b2c      	ldr	r3, [pc, #176]	; (8006878 <save_to_flash+0x30c>)
 80067c8:	7819      	ldrb	r1, [r3, #0]
 80067ca:	4b20      	ldr	r3, [pc, #128]	; (800684c <save_to_flash+0x2e0>)
 80067cc:	181b      	adds	r3, r3, r0
 80067ce:	19db      	adds	r3, r3, r7
 80067d0:	2250      	movs	r2, #80	; 0x50
 80067d2:	5499      	strb	r1, [r3, r2]
	isAutoRst = autoRstValue;
 80067d4:	4b29      	ldr	r3, [pc, #164]	; (800687c <save_to_flash+0x310>)
 80067d6:	4a1a      	ldr	r2, [pc, #104]	; (8006840 <save_to_flash+0x2d4>)
 80067d8:	1812      	adds	r2, r2, r0
 80067da:	19d2      	adds	r2, r2, r7
 80067dc:	7812      	ldrb	r2, [r2, #0]
 80067de:	701a      	strb	r2, [r3, #0]
	configPage[AUTORST_ADD] = isAutoRst; //isAutorst
 80067e0:	4b26      	ldr	r3, [pc, #152]	; (800687c <save_to_flash+0x310>)
 80067e2:	7819      	ldrb	r1, [r3, #0]
 80067e4:	4b19      	ldr	r3, [pc, #100]	; (800684c <save_to_flash+0x2e0>)
 80067e6:	181b      	adds	r3, r3, r0
 80067e8:	19db      	adds	r3, r3, r7
 80067ea:	2251      	movs	r2, #81	; 0x51
 80067ec:	5499      	strb	r1, [r3, r2]
	configPage[SMSACTIVE_ADD] = isSMSActive;
 80067ee:	4b24      	ldr	r3, [pc, #144]	; (8006880 <save_to_flash+0x314>)
 80067f0:	7819      	ldrb	r1, [r3, #0]
 80067f2:	4b16      	ldr	r3, [pc, #88]	; (800684c <save_to_flash+0x2e0>)
 80067f4:	181b      	adds	r3, r3, r0
 80067f6:	19db      	adds	r3, r3, r7
 80067f8:	2252      	movs	r2, #82	; 0x52
 80067fa:	5499      	strb	r1, [r3, r2]
	configPage[RELAYSTATE_ADD] = relayState;
 80067fc:	4b21      	ldr	r3, [pc, #132]	; (8006884 <save_to_flash+0x318>)
 80067fe:	7819      	ldrb	r1, [r3, #0]
 8006800:	4b12      	ldr	r3, [pc, #72]	; (800684c <save_to_flash+0x2e0>)
 8006802:	181b      	adds	r3, r3, r0
 8006804:	19db      	adds	r3, r3, r7
 8006806:	2253      	movs	r2, #83	; 0x53
 8006808:	5499      	strb	r1, [r3, r2]
	isFlash1 = 1;
 800680a:	4b1f      	ldr	r3, [pc, #124]	; (8006888 <save_to_flash+0x31c>)
 800680c:	2201      	movs	r2, #1
 800680e:	701a      	strb	r2, [r3, #0]
	configPage[LASTPAGE_ADD] = isFlash1; //isflash1
 8006810:	4b1d      	ldr	r3, [pc, #116]	; (8006888 <save_to_flash+0x31c>)
 8006812:	7819      	ldrb	r1, [r3, #0]
 8006814:	4b0d      	ldr	r3, [pc, #52]	; (800684c <save_to_flash+0x2e0>)
 8006816:	181b      	adds	r3, r3, r0
 8006818:	19db      	adds	r3, r3, r7
 800681a:	22fa      	movs	r2, #250	; 0xfa
 800681c:	5499      	strb	r1, [r3, r2]
	W25qxx_WritePage(configPage, 0, 0, LASTPAGE_ADD+2);
 800681e:	2310      	movs	r3, #16
 8006820:	18f8      	adds	r0, r7, r3
 8006822:	23fc      	movs	r3, #252	; 0xfc
 8006824:	2200      	movs	r2, #0
 8006826:	2100      	movs	r1, #0
 8006828:	f002 fe3c 	bl	80094a4 <W25qxx_WritePage>
	flashready = 1;
 800682c:	4b05      	ldr	r3, [pc, #20]	; (8006844 <save_to_flash+0x2d8>)
 800682e:	2201      	movs	r2, #1
 8006830:	701a      	strb	r2, [r3, #0]
	HAL_Delay(100);
 8006832:	2064      	movs	r0, #100	; 0x64
 8006834:	f003 f966 	bl	8009b04 <HAL_Delay>

}
 8006838:	46c0      	nop			; (mov r8, r8)
 800683a:	46bd      	mov	sp, r7
 800683c:	b045      	add	sp, #276	; 0x114
 800683e:	bd90      	pop	{r4, r7, pc}
 8006840:	fffffef7 	.word	0xfffffef7
 8006844:	20000d1c 	.word	0x20000d1c
 8006848:	20000738 	.word	0x20000738
 800684c:	ffffff00 	.word	0xffffff00
 8006850:	20000d18 	.word	0x20000d18
 8006854:	fffffefc 	.word	0xfffffefc
 8006858:	20000d14 	.word	0x20000d14
 800685c:	20000d1a 	.word	0x20000d1a
 8006860:	20000d16 	.word	0x20000d16
 8006864:	20000014 	.word	0x20000014
 8006868:	20000008 	.word	0x20000008
 800686c:	20000038 	.word	0x20000038
 8006870:	20000030 	.word	0x20000030
 8006874:	20000004 	.word	0x20000004
 8006878:	20000005 	.word	0x20000005
 800687c:	2000073a 	.word	0x2000073a
 8006880:	20000734 	.word	0x20000734
 8006884:	20000724 	.word	0x20000724
 8006888:	20000739 	.word	0x20000739

0800688c <send_command>:

void send_command(char *command, uint16_t timeout, uint8_t caseId,
		uint8_t retryCount, uint8_t isReset) {
 800688c:	b590      	push	{r4, r7, lr}
 800688e:	b085      	sub	sp, #20
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	000c      	movs	r4, r1
 8006896:	0010      	movs	r0, r2
 8006898:	0019      	movs	r1, r3
 800689a:	1cbb      	adds	r3, r7, #2
 800689c:	1c22      	adds	r2, r4, #0
 800689e:	801a      	strh	r2, [r3, #0]
 80068a0:	1c7b      	adds	r3, r7, #1
 80068a2:	1c02      	adds	r2, r0, #0
 80068a4:	701a      	strb	r2, [r3, #0]
 80068a6:	003b      	movs	r3, r7
 80068a8:	1c0a      	adds	r2, r1, #0
 80068aa:	701a      	strb	r2, [r3, #0]
	uint8_t processComplete = 0, processCount = 0;
 80068ac:	230f      	movs	r3, #15
 80068ae:	18fb      	adds	r3, r7, r3
 80068b0:	2200      	movs	r2, #0
 80068b2:	701a      	strb	r2, [r3, #0]
 80068b4:	230e      	movs	r3, #14
 80068b6:	18fb      	adds	r3, r7, r3
 80068b8:	2200      	movs	r2, #0
 80068ba:	701a      	strb	r2, [r3, #0]
	uint16_t commandSize = 0;
 80068bc:	230c      	movs	r3, #12
 80068be:	18fb      	adds	r3, r7, r3
 80068c0:	2200      	movs	r2, #0
 80068c2:	801a      	strh	r2, [r3, #0]
	uint16_t i = 0;
 80068c4:	230a      	movs	r3, #10
 80068c6:	18fb      	adds	r3, r7, r3
 80068c8:	2200      	movs	r2, #0
 80068ca:	801a      	strh	r2, [r3, #0]
	while (command[i] != NULL) {
 80068cc:	e00b      	b.n	80068e6 <send_command+0x5a>
		commandSize++;
 80068ce:	210c      	movs	r1, #12
 80068d0:	187b      	adds	r3, r7, r1
 80068d2:	881a      	ldrh	r2, [r3, #0]
 80068d4:	187b      	adds	r3, r7, r1
 80068d6:	3201      	adds	r2, #1
 80068d8:	801a      	strh	r2, [r3, #0]
		i++;
 80068da:	210a      	movs	r1, #10
 80068dc:	187b      	adds	r3, r7, r1
 80068de:	881a      	ldrh	r2, [r3, #0]
 80068e0:	187b      	adds	r3, r7, r1
 80068e2:	3201      	adds	r2, #1
 80068e4:	801a      	strh	r2, [r3, #0]
	while (command[i] != NULL) {
 80068e6:	230a      	movs	r3, #10
 80068e8:	18fb      	adds	r3, r7, r3
 80068ea:	881b      	ldrh	r3, [r3, #0]
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	18d3      	adds	r3, r2, r3
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d1eb      	bne.n	80068ce <send_command+0x42>
	}
	while (processComplete == 0) {
 80068f6:	e05a      	b.n	80069ae <send_command+0x122>
		while (isBusy)
 80068f8:	46c0      	nop			; (mov r8, r8)
 80068fa:	4b32      	ldr	r3, [pc, #200]	; (80069c4 <send_command+0x138>)
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	2b00      	cmp	r3, #0
 8006902:	d1fa      	bne.n	80068fa <send_command+0x6e>
			;
		isBusy = 1;
 8006904:	4b2f      	ldr	r3, [pc, #188]	; (80069c4 <send_command+0x138>)
 8006906:	2201      	movs	r2, #1
 8006908:	701a      	strb	r2, [r3, #0]
		isResponseOk = 0;
 800690a:	4b2f      	ldr	r3, [pc, #188]	; (80069c8 <send_command+0x13c>)
 800690c:	2200      	movs	r2, #0
 800690e:	701a      	strb	r2, [r3, #0]
		commandCase = caseId;
 8006910:	4b2e      	ldr	r3, [pc, #184]	; (80069cc <send_command+0x140>)
 8006912:	1c7a      	adds	r2, r7, #1
 8006914:	7812      	ldrb	r2, [r2, #0]
 8006916:	701a      	strb	r2, [r3, #0]
		isStart = 1;
 8006918:	4b2d      	ldr	r3, [pc, #180]	; (80069d0 <send_command+0x144>)
 800691a:	2201      	movs	r2, #1
 800691c:	701a      	strb	r2, [r3, #0]
		recResponse = 0;
 800691e:	4b2d      	ldr	r3, [pc, #180]	; (80069d4 <send_command+0x148>)
 8006920:	2200      	movs	r2, #0
 8006922:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&AT_PORT, command, commandSize, 1000);
 8006924:	23fa      	movs	r3, #250	; 0xfa
 8006926:	009c      	lsls	r4, r3, #2
 8006928:	230c      	movs	r3, #12
 800692a:	18fb      	adds	r3, r7, r3
 800692c:	881a      	ldrh	r2, [r3, #0]
 800692e:	6879      	ldr	r1, [r7, #4]
 8006930:	4829      	ldr	r0, [pc, #164]	; (80069d8 <send_command+0x14c>)
 8006932:	0023      	movs	r3, r4
 8006934:	f006 fb24 	bl	800cf80 <HAL_UART_Transmit>
		FIX_TIMER_TRIGGER(&htim6);
 8006938:	4b28      	ldr	r3, [pc, #160]	; (80069dc <send_command+0x150>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2202      	movs	r2, #2
 800693e:	4252      	negs	r2, r2
 8006940:	611a      	str	r2, [r3, #16]
		HAL_TIM_Base_Start_IT(&htim6);
 8006942:	4b26      	ldr	r3, [pc, #152]	; (80069dc <send_command+0x150>)
 8006944:	0018      	movs	r0, r3
 8006946:	f005 fb15 	bl	800bf74 <HAL_TIM_Base_Start_IT>
		resTimeout = timeout; //300 ms
 800694a:	4b25      	ldr	r3, [pc, #148]	; (80069e0 <send_command+0x154>)
 800694c:	1cba      	adds	r2, r7, #2
 800694e:	8812      	ldrh	r2, [r2, #0]
 8006950:	801a      	strh	r2, [r3, #0]
		ab=5;
 8006952:	4b24      	ldr	r3, [pc, #144]	; (80069e4 <send_command+0x158>)
 8006954:	2205      	movs	r2, #5
 8006956:	701a      	strb	r2, [r3, #0]
		while (isBusy)
 8006958:	46c0      	nop			; (mov r8, r8)
 800695a:	4b1a      	ldr	r3, [pc, #104]	; (80069c4 <send_command+0x138>)
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	b2db      	uxtb	r3, r3
 8006960:	2b00      	cmp	r3, #0
 8006962:	d1fa      	bne.n	800695a <send_command+0xce>
			;
		commandCase = 0;
 8006964:	4b19      	ldr	r3, [pc, #100]	; (80069cc <send_command+0x140>)
 8006966:	2200      	movs	r2, #0
 8006968:	701a      	strb	r2, [r3, #0]
		if (isResponseOk) {
 800696a:	4b17      	ldr	r3, [pc, #92]	; (80069c8 <send_command+0x13c>)
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	b2db      	uxtb	r3, r3
 8006970:	2b00      	cmp	r3, #0
 8006972:	d004      	beq.n	800697e <send_command+0xf2>
			processComplete = 1;
 8006974:	230f      	movs	r3, #15
 8006976:	18fb      	adds	r3, r7, r3
 8006978:	2201      	movs	r2, #1
 800697a:	701a      	strb	r2, [r3, #0]
 800697c:	e017      	b.n	80069ae <send_command+0x122>
		} else {
			//printf("failed\n");
			processCount++;
 800697e:	210e      	movs	r1, #14
 8006980:	187b      	adds	r3, r7, r1
 8006982:	781a      	ldrb	r2, [r3, #0]
 8006984:	187b      	adds	r3, r7, r1
 8006986:	3201      	adds	r2, #1
 8006988:	701a      	strb	r2, [r3, #0]
			if (processCount > retryCount) {
 800698a:	187a      	adds	r2, r7, r1
 800698c:	003b      	movs	r3, r7
 800698e:	7812      	ldrb	r2, [r2, #0]
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	429a      	cmp	r2, r3
 8006994:	d907      	bls.n	80069a6 <send_command+0x11a>
				if (isReset == 1) {
 8006996:	2320      	movs	r3, #32
 8006998:	18fb      	adds	r3, r7, r3
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	2b01      	cmp	r3, #1
 800699e:	d10c      	bne.n	80069ba <send_command+0x12e>
					rebootsystem();
 80069a0:	f7ff fddc 	bl	800655c <rebootsystem>
				}
				break;
 80069a4:	e009      	b.n	80069ba <send_command+0x12e>
			}
			HAL_Delay(5000);
 80069a6:	4b10      	ldr	r3, [pc, #64]	; (80069e8 <send_command+0x15c>)
 80069a8:	0018      	movs	r0, r3
 80069aa:	f003 f8ab 	bl	8009b04 <HAL_Delay>
	while (processComplete == 0) {
 80069ae:	230f      	movs	r3, #15
 80069b0:	18fb      	adds	r3, r7, r3
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d09f      	beq.n	80068f8 <send_command+0x6c>
		}
	}
}
 80069b8:	e000      	b.n	80069bc <send_command+0x130>
				break;
 80069ba:	46c0      	nop			; (mov r8, r8)
}
 80069bc:	46c0      	nop			; (mov r8, r8)
 80069be:	46bd      	mov	sp, r7
 80069c0:	b005      	add	sp, #20
 80069c2:	bd90      	pop	{r4, r7, pc}
 80069c4:	20000879 	.word	0x20000879
 80069c8:	20000880 	.word	0x20000880
 80069cc:	2000087f 	.word	0x2000087f
 80069d0:	20000878 	.word	0x20000878
 80069d4:	20000881 	.word	0x20000881
 80069d8:	200004c8 	.word	0x200004c8
 80069dc:	20000398 	.word	0x20000398
 80069e0:	2000087c 	.word	0x2000087c
 80069e4:	20000d1e 	.word	0x20000d1e
 80069e8:	00001388 	.word	0x00001388

080069ec <quectel_init>:
void quectel_init() {
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b082      	sub	sp, #8
 80069f0:	af02      	add	r7, sp, #8
	// printf("--Sending AT-- \n");
	send_command("AT\r\n", 3, 1, 1, 1);
 80069f2:	4823      	ldr	r0, [pc, #140]	; (8006a80 <quectel_init+0x94>)
 80069f4:	2301      	movs	r3, #1
 80069f6:	9300      	str	r3, [sp, #0]
 80069f8:	2301      	movs	r3, #1
 80069fa:	2201      	movs	r2, #1
 80069fc:	2103      	movs	r1, #3
 80069fe:	f7ff ff45 	bl	800688c <send_command>
	ab = 2;
 8006a02:	4b20      	ldr	r3, [pc, #128]	; (8006a84 <quectel_init+0x98>)
 8006a04:	2202      	movs	r2, #2
 8006a06:	701a      	strb	r2, [r3, #0]
	send_command("AT+CBC\r\n", 4, 8, 3, 1);//get voltage of vbatt
 8006a08:	481f      	ldr	r0, [pc, #124]	; (8006a88 <quectel_init+0x9c>)
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	9300      	str	r3, [sp, #0]
 8006a0e:	2303      	movs	r3, #3
 8006a10:	2208      	movs	r2, #8
 8006a12:	2104      	movs	r1, #4
 8006a14:	f7ff ff3a 	bl	800688c <send_command>


	// printf("--sending AT+QIURC=1--\n");
	// send_command("AT+QIURC=1\r\n", 3, 1, 1,1);
	// printf("--Sending AT+CPIN-- \n");
	send_command("AT+CPIN?\r\n", 51, 2, 2, 1);
 8006a18:	481c      	ldr	r0, [pc, #112]	; (8006a8c <quectel_init+0xa0>)
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	9300      	str	r3, [sp, #0]
 8006a1e:	2302      	movs	r3, #2
 8006a20:	2202      	movs	r2, #2
 8006a22:	2133      	movs	r1, #51	; 0x33
 8006a24:	f7ff ff32 	bl	800688c <send_command>
	ab = 3;
 8006a28:	4b16      	ldr	r3, [pc, #88]	; (8006a84 <quectel_init+0x98>)
 8006a2a:	2203      	movs	r2, #3
 8006a2c:	701a      	strb	r2, [r3, #0]
	// printf("--Sending AT+CREG?-- \n");
	// send_command("AT+CREG?\r\n",3,3,5,1);
	// printf("--Sending AT+CGREG?-- \n");
	// send_command("AT+CGREG?\r\n",3,3,3,1);
	// printf("--Sending AT+CMGF=1-- \n");
	send_command("AT+CMGF=1\r\n", 3, 1, 3, 1);
 8006a2e:	4818      	ldr	r0, [pc, #96]	; (8006a90 <quectel_init+0xa4>)
 8006a30:	2301      	movs	r3, #1
 8006a32:	9300      	str	r3, [sp, #0]
 8006a34:	2303      	movs	r3, #3
 8006a36:	2201      	movs	r2, #1
 8006a38:	2103      	movs	r1, #3
 8006a3a:	f7ff ff27 	bl	800688c <send_command>
	ab = 4;
 8006a3e:	4b11      	ldr	r3, [pc, #68]	; (8006a84 <quectel_init+0x98>)
 8006a40:	2204      	movs	r2, #4
 8006a42:	701a      	strb	r2, [r3, #0]

	// printf("--Sending AT+CNMI=2,2-- \n");
	send_command("AT+CNMI=2,2\r\n", 3, 1, 3, 1);
 8006a44:	4813      	ldr	r0, [pc, #76]	; (8006a94 <quectel_init+0xa8>)
 8006a46:	2301      	movs	r3, #1
 8006a48:	9300      	str	r3, [sp, #0]
 8006a4a:	2303      	movs	r3, #3
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	2103      	movs	r1, #3
 8006a50:	f7ff ff1c 	bl	800688c <send_command>
	ab = 5;
 8006a54:	4b0b      	ldr	r3, [pc, #44]	; (8006a84 <quectel_init+0x98>)
 8006a56:	2205      	movs	r2, #5
 8006a58:	701a      	strb	r2, [r3, #0]

	// printf("--Sending AT+CGSN--\r\n \n");
	send_command("AT+CGSN\r\n", 3, 4, 2, 1);
 8006a5a:	480f      	ldr	r0, [pc, #60]	; (8006a98 <quectel_init+0xac>)
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	9300      	str	r3, [sp, #0]
 8006a60:	2302      	movs	r3, #2
 8006a62:	2204      	movs	r2, #4
 8006a64:	2103      	movs	r1, #3
 8006a66:	f7ff ff11 	bl	800688c <send_command>
	send_command("AT+QMGDA=\"DEL ALL\"\r\n", 50, 1, 0, 0);
 8006a6a:	480c      	ldr	r0, [pc, #48]	; (8006a9c <quectel_init+0xb0>)
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	9300      	str	r3, [sp, #0]
 8006a70:	2300      	movs	r3, #0
 8006a72:	2201      	movs	r2, #1
 8006a74:	2132      	movs	r1, #50	; 0x32
 8006a76:	f7ff ff09 	bl	800688c <send_command>

}
 8006a7a:	46c0      	nop			; (mov r8, r8)
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	080133ec 	.word	0x080133ec
 8006a84:	20000d1e 	.word	0x20000d1e
 8006a88:	080133f4 	.word	0x080133f4
 8006a8c:	08013400 	.word	0x08013400
 8006a90:	0801340c 	.word	0x0801340c
 8006a94:	08013418 	.word	0x08013418
 8006a98:	08013428 	.word	0x08013428
 8006a9c:	08013434 	.word	0x08013434

08006aa0 <estabilish_tcp>:

uint8_t estabilish_tcp() {
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b082      	sub	sp, #8
 8006aa4:	af02      	add	r7, sp, #8
	// HAL_UART_Transmit(&huart4, "est tcp",
	// sizeof("est tcp"), 100);
	send_command("+++", 10, 1, 0, 0);
 8006aa6:	4853      	ldr	r0, [pc, #332]	; (8006bf4 <estabilish_tcp+0x154>)
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	9300      	str	r3, [sp, #0]
 8006aac:	2300      	movs	r3, #0
 8006aae:	2201      	movs	r2, #1
 8006ab0:	210a      	movs	r1, #10
 8006ab2:	f7ff feeb 	bl	800688c <send_command>
	memset(tcpCommand, 0, sizeof(tcpCommand));
 8006ab6:	4b50      	ldr	r3, [pc, #320]	; (8006bf8 <estabilish_tcp+0x158>)
 8006ab8:	2232      	movs	r2, #50	; 0x32
 8006aba:	2100      	movs	r1, #0
 8006abc:	0018      	movs	r0, r3
 8006abe:	f008 f9ba 	bl	800ee36 <memset>
	strcat(tcpCommand, "AT+QIOPEN=\"TCP\",\"");
 8006ac2:	4b4d      	ldr	r3, [pc, #308]	; (8006bf8 <estabilish_tcp+0x158>)
 8006ac4:	0018      	movs	r0, r3
 8006ac6:	f7f9 fb25 	bl	8000114 <strlen>
 8006aca:	0003      	movs	r3, r0
 8006acc:	001a      	movs	r2, r3
 8006ace:	4b4a      	ldr	r3, [pc, #296]	; (8006bf8 <estabilish_tcp+0x158>)
 8006ad0:	18d2      	adds	r2, r2, r3
 8006ad2:	4b4a      	ldr	r3, [pc, #296]	; (8006bfc <estabilish_tcp+0x15c>)
 8006ad4:	0010      	movs	r0, r2
 8006ad6:	0019      	movs	r1, r3
 8006ad8:	2312      	movs	r3, #18
 8006ada:	001a      	movs	r2, r3
 8006adc:	f008 f9a2 	bl	800ee24 <memcpy>
	strcat(tcpCommand, domainAdd);
 8006ae0:	4a47      	ldr	r2, [pc, #284]	; (8006c00 <estabilish_tcp+0x160>)
 8006ae2:	4b45      	ldr	r3, [pc, #276]	; (8006bf8 <estabilish_tcp+0x158>)
 8006ae4:	0011      	movs	r1, r2
 8006ae6:	0018      	movs	r0, r3
 8006ae8:	f008 f9ce 	bl	800ee88 <strcat>
	strcat(tcpCommand, "\",");
 8006aec:	4b42      	ldr	r3, [pc, #264]	; (8006bf8 <estabilish_tcp+0x158>)
 8006aee:	0018      	movs	r0, r3
 8006af0:	f7f9 fb10 	bl	8000114 <strlen>
 8006af4:	0003      	movs	r3, r0
 8006af6:	001a      	movs	r2, r3
 8006af8:	4b3f      	ldr	r3, [pc, #252]	; (8006bf8 <estabilish_tcp+0x158>)
 8006afa:	18d2      	adds	r2, r2, r3
 8006afc:	4b41      	ldr	r3, [pc, #260]	; (8006c04 <estabilish_tcp+0x164>)
 8006afe:	0010      	movs	r0, r2
 8006b00:	0019      	movs	r1, r3
 8006b02:	2303      	movs	r3, #3
 8006b04:	001a      	movs	r2, r3
 8006b06:	f008 f98d 	bl	800ee24 <memcpy>
	strcat(tcpCommand, portAdd);
 8006b0a:	4a3f      	ldr	r2, [pc, #252]	; (8006c08 <estabilish_tcp+0x168>)
 8006b0c:	4b3a      	ldr	r3, [pc, #232]	; (8006bf8 <estabilish_tcp+0x158>)
 8006b0e:	0011      	movs	r1, r2
 8006b10:	0018      	movs	r0, r3
 8006b12:	f008 f9b9 	bl	800ee88 <strcat>
	strcat(tcpCommand, "\r\n");
 8006b16:	4b38      	ldr	r3, [pc, #224]	; (8006bf8 <estabilish_tcp+0x158>)
 8006b18:	0018      	movs	r0, r3
 8006b1a:	f7f9 fafb 	bl	8000114 <strlen>
 8006b1e:	0003      	movs	r3, r0
 8006b20:	001a      	movs	r2, r3
 8006b22:	4b35      	ldr	r3, [pc, #212]	; (8006bf8 <estabilish_tcp+0x158>)
 8006b24:	18d2      	adds	r2, r2, r3
 8006b26:	4b39      	ldr	r3, [pc, #228]	; (8006c0c <estabilish_tcp+0x16c>)
 8006b28:	0010      	movs	r0, r2
 8006b2a:	0019      	movs	r1, r3
 8006b2c:	2303      	movs	r3, #3
 8006b2e:	001a      	movs	r2, r3
 8006b30:	f008 f978 	bl	800ee24 <memcpy>
	// printf("--Sent AT+QIDEACT \n");
	send_command("AT+QIDEACT\r\n", 401, 1, 2, 0);
 8006b34:	2392      	movs	r3, #146	; 0x92
 8006b36:	33ff      	adds	r3, #255	; 0xff
 8006b38:	0019      	movs	r1, r3
 8006b3a:	4835      	ldr	r0, [pc, #212]	; (8006c10 <estabilish_tcp+0x170>)
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	9300      	str	r3, [sp, #0]
 8006b40:	2302      	movs	r3, #2
 8006b42:	2201      	movs	r2, #1
 8006b44:	f7ff fea2 	bl	800688c <send_command>

	if (isResponseOk == 0) {
 8006b48:	4b32      	ldr	r3, [pc, #200]	; (8006c14 <estabilish_tcp+0x174>)
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d101      	bne.n	8006b56 <estabilish_tcp+0xb6>
		return 0;
 8006b52:	2300      	movs	r3, #0
 8006b54:	e04b      	b.n	8006bee <estabilish_tcp+0x14e>
	}
	send_command("AT+QIMODE=1\r\n", 3, 1, 3, 0);
 8006b56:	4830      	ldr	r0, [pc, #192]	; (8006c18 <estabilish_tcp+0x178>)
 8006b58:	2300      	movs	r3, #0
 8006b5a:	9300      	str	r3, [sp, #0]
 8006b5c:	2303      	movs	r3, #3
 8006b5e:	2201      	movs	r2, #1
 8006b60:	2103      	movs	r1, #3
 8006b62:	f7ff fe93 	bl	800688c <send_command>
	if (isResponseOk == 0) {
 8006b66:	4b2b      	ldr	r3, [pc, #172]	; (8006c14 <estabilish_tcp+0x174>)
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d101      	bne.n	8006b74 <estabilish_tcp+0xd4>
		return 0;
 8006b70:	2300      	movs	r3, #0
 8006b72:	e03c      	b.n	8006bee <estabilish_tcp+0x14e>
	}
	send_command("AT+QITCFG=3,2,512,1\r\n", 3, 1, 1, 0);
 8006b74:	4829      	ldr	r0, [pc, #164]	; (8006c1c <estabilish_tcp+0x17c>)
 8006b76:	2300      	movs	r3, #0
 8006b78:	9300      	str	r3, [sp, #0]
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	2103      	movs	r1, #3
 8006b80:	f7ff fe84 	bl	800688c <send_command>
	if (isResponseOk == 0) {
 8006b84:	4b23      	ldr	r3, [pc, #140]	; (8006c14 <estabilish_tcp+0x174>)
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d101      	bne.n	8006b92 <estabilish_tcp+0xf2>
		return 0;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	e02d      	b.n	8006bee <estabilish_tcp+0x14e>
	}
	send_command("AT+QIREGAPP=\"network\",\"\",\"\"\r\n", 3, 1, 1, 0);
 8006b92:	4823      	ldr	r0, [pc, #140]	; (8006c20 <estabilish_tcp+0x180>)
 8006b94:	2300      	movs	r3, #0
 8006b96:	9300      	str	r3, [sp, #0]
 8006b98:	2301      	movs	r3, #1
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	2103      	movs	r1, #3
 8006b9e:	f7ff fe75 	bl	800688c <send_command>
	if (isResponseOk == 0) {
 8006ba2:	4b1c      	ldr	r3, [pc, #112]	; (8006c14 <estabilish_tcp+0x174>)
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d101      	bne.n	8006bb0 <estabilish_tcp+0x110>
		return 0;
 8006bac:	2300      	movs	r3, #0
 8006bae:	e01e      	b.n	8006bee <estabilish_tcp+0x14e>
	}
	send_command("AT+QIACT\r\n", 1510, 1, 0, 0);
 8006bb0:	491c      	ldr	r1, [pc, #112]	; (8006c24 <estabilish_tcp+0x184>)
 8006bb2:	481d      	ldr	r0, [pc, #116]	; (8006c28 <estabilish_tcp+0x188>)
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	9300      	str	r3, [sp, #0]
 8006bb8:	2300      	movs	r3, #0
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f7ff fe66 	bl	800688c <send_command>
	if (isResponseOk == 0) {
 8006bc0:	4b14      	ldr	r3, [pc, #80]	; (8006c14 <estabilish_tcp+0x174>)
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d101      	bne.n	8006bce <estabilish_tcp+0x12e>
		return 0;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	e00f      	b.n	8006bee <estabilish_tcp+0x14e>
	}
	// HAL_UART_Transmit(&huart4, "S qiopen", sizeof("S qiopen"), 100);

	send_command(tcpCommand, 751, 5, 2, 0);
 8006bce:	4917      	ldr	r1, [pc, #92]	; (8006c2c <estabilish_tcp+0x18c>)
 8006bd0:	4809      	ldr	r0, [pc, #36]	; (8006bf8 <estabilish_tcp+0x158>)
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	9300      	str	r3, [sp, #0]
 8006bd6:	2302      	movs	r3, #2
 8006bd8:	2205      	movs	r2, #5
 8006bda:	f7ff fe57 	bl	800688c <send_command>
	if (isResponseOk == 1) {
 8006bde:	4b0d      	ldr	r3, [pc, #52]	; (8006c14 <estabilish_tcp+0x174>)
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d101      	bne.n	8006bec <estabilish_tcp+0x14c>
		return 1;
 8006be8:	2301      	movs	r3, #1
 8006bea:	e000      	b.n	8006bee <estabilish_tcp+0x14e>
	} else {
		return 0;
 8006bec:	2300      	movs	r3, #0
	}
}
 8006bee:	0018      	movs	r0, r3
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}
 8006bf4:	0801344c 	.word	0x0801344c
 8006bf8:	200008a4 	.word	0x200008a4
 8006bfc:	08013450 	.word	0x08013450
 8006c00:	20000038 	.word	0x20000038
 8006c04:	08013464 	.word	0x08013464
 8006c08:	20000030 	.word	0x20000030
 8006c0c:	08013468 	.word	0x08013468
 8006c10:	0801346c 	.word	0x0801346c
 8006c14:	20000880 	.word	0x20000880
 8006c18:	0801347c 	.word	0x0801347c
 8006c1c:	0801348c 	.word	0x0801348c
 8006c20:	080134a4 	.word	0x080134a4
 8006c24:	000005e6 	.word	0x000005e6
 8006c28:	080134c4 	.word	0x080134c4
 8006c2c:	000002ef 	.word	0x000002ef

08006c30 <GetCrc16>:

uint16_t GetCrc16(const uint8_t *pData, int nLength) {
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
	uint16_t fcs = 0xffff; // initialization
 8006c3a:	230e      	movs	r3, #14
 8006c3c:	18fb      	adds	r3, r7, r3
 8006c3e:	2201      	movs	r2, #1
 8006c40:	4252      	negs	r2, r2
 8006c42:	801a      	strh	r2, [r3, #0]
	int a = 0;
 8006c44:	2300      	movs	r3, #0
 8006c46:	60bb      	str	r3, [r7, #8]
	while (nLength > 0) {
 8006c48:	e019      	b.n	8006c7e <GetCrc16+0x4e>
		a = (fcs ^ *pData) & 0xff;
 8006c4a:	200e      	movs	r0, #14
 8006c4c:	183b      	adds	r3, r7, r0
 8006c4e:	881b      	ldrh	r3, [r3, #0]
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	7812      	ldrb	r2, [r2, #0]
 8006c54:	4053      	eors	r3, r2
 8006c56:	22ff      	movs	r2, #255	; 0xff
 8006c58:	4013      	ands	r3, r2
 8006c5a:	60bb      	str	r3, [r7, #8]
		fcs = (fcs >> 8) ^ crctab16[a];
 8006c5c:	183b      	adds	r3, r7, r0
 8006c5e:	881b      	ldrh	r3, [r3, #0]
 8006c60:	0a1b      	lsrs	r3, r3, #8
 8006c62:	b299      	uxth	r1, r3
 8006c64:	4b0c      	ldr	r3, [pc, #48]	; (8006c98 <GetCrc16+0x68>)
 8006c66:	68ba      	ldr	r2, [r7, #8]
 8006c68:	0052      	lsls	r2, r2, #1
 8006c6a:	5ad2      	ldrh	r2, [r2, r3]
 8006c6c:	183b      	adds	r3, r7, r0
 8006c6e:	404a      	eors	r2, r1
 8006c70:	801a      	strh	r2, [r3, #0]
		nLength--;
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	3b01      	subs	r3, #1
 8006c76:	603b      	str	r3, [r7, #0]
		pData++;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	607b      	str	r3, [r7, #4]
	while (nLength > 0) {
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	dce2      	bgt.n	8006c4a <GetCrc16+0x1a>
	}
	return ~fcs; // negated
 8006c84:	230e      	movs	r3, #14
 8006c86:	18fb      	adds	r3, r7, r3
 8006c88:	881b      	ldrh	r3, [r3, #0]
 8006c8a:	43db      	mvns	r3, r3
 8006c8c:	b29b      	uxth	r3, r3
}
 8006c8e:	0018      	movs	r0, r3
 8006c90:	46bd      	mov	sp, r7
 8006c92:	b004      	add	sp, #16
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	46c0      	nop			; (mov r8, r8)
 8006c98:	08013578 	.word	0x08013578

08006c9c <where_api_handler>:

void where_api_handler() {
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b082      	sub	sp, #8
 8006ca0:	af02      	add	r7, sp, #8
	if (isWhereApiCalled == 1) {
 8006ca2:	4b17      	ldr	r3, [pc, #92]	; (8006d00 <where_api_handler+0x64>)
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d111      	bne.n	8006cce <where_api_handler+0x32>
		// printf("--Sending AT+CREG?-- \n");
		// HAL_UART_Transmit(&huart4, "S creg in api", sizeof("S creg in api"),
		// 100);
		send_command("AT+CREG?\r\n", 3, 3, 3, 1);
 8006caa:	4816      	ldr	r0, [pc, #88]	; (8006d04 <where_api_handler+0x68>)
 8006cac:	2301      	movs	r3, #1
 8006cae:	9300      	str	r3, [sp, #0]
 8006cb0:	2303      	movs	r3, #3
 8006cb2:	2203      	movs	r2, #3
 8006cb4:	2103      	movs	r1, #3
 8006cb6:	f7ff fde9 	bl	800688c <send_command>
		if (isReg == 1) {
 8006cba:	4b13      	ldr	r3, [pc, #76]	; (8006d08 <where_api_handler+0x6c>)
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d11a      	bne.n	8006cf8 <where_api_handler+0x5c>
			send_current_location_via_sms(); //sending current location
 8006cc2:	f000 feb7 	bl	8007a34 <send_current_location_via_sms>
			isWhereApiCalled = 0;
 8006cc6:	4b0e      	ldr	r3, [pc, #56]	; (8006d00 <where_api_handler+0x64>)
 8006cc8:	2200      	movs	r2, #0
 8006cca:	701a      	strb	r2, [r3, #0]
		if (isReg == 1) {
			send_imei_via_sms(); //sending current location
			isIMEIApiCalled = 0;
		}
	}
}
 8006ccc:	e014      	b.n	8006cf8 <where_api_handler+0x5c>
	}else if (isIMEIApiCalled == 1) {
 8006cce:	4b0f      	ldr	r3, [pc, #60]	; (8006d0c <where_api_handler+0x70>)
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d110      	bne.n	8006cf8 <where_api_handler+0x5c>
		send_command("AT+CREG?\r\n", 3, 3, 3, 1);
 8006cd6:	480b      	ldr	r0, [pc, #44]	; (8006d04 <where_api_handler+0x68>)
 8006cd8:	2301      	movs	r3, #1
 8006cda:	9300      	str	r3, [sp, #0]
 8006cdc:	2303      	movs	r3, #3
 8006cde:	2203      	movs	r2, #3
 8006ce0:	2103      	movs	r1, #3
 8006ce2:	f7ff fdd3 	bl	800688c <send_command>
		if (isReg == 1) {
 8006ce6:	4b08      	ldr	r3, [pc, #32]	; (8006d08 <where_api_handler+0x6c>)
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d104      	bne.n	8006cf8 <where_api_handler+0x5c>
			send_imei_via_sms(); //sending current location
 8006cee:	f000 fe29 	bl	8007944 <send_imei_via_sms>
			isIMEIApiCalled = 0;
 8006cf2:	4b06      	ldr	r3, [pc, #24]	; (8006d0c <where_api_handler+0x70>)
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	701a      	strb	r2, [r3, #0]
}
 8006cf8:	46c0      	nop			; (mov r8, r8)
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	46c0      	nop			; (mov r8, r8)
 8006d00:	20000a2e 	.word	0x20000a2e
 8006d04:	080132e0 	.word	0x080132e0
 8006d08:	20000a2d 	.word	0x20000a2d
 8006d0c:	20000a2f 	.word	0x20000a2f

08006d10 <alarm_sender>:
void alarm_sender(){
 8006d10:	b580      	push	{r7, lr}
 8006d12:	af00      	add	r7, sp, #0
	if(isAlarm){
 8006d14:	4b0b      	ldr	r3, [pc, #44]	; (8006d44 <alarm_sender+0x34>)
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d00f      	beq.n	8006d3e <alarm_sender+0x2e>
		if (isReg == 1) {
 8006d1e:	4b0a      	ldr	r3, [pc, #40]	; (8006d48 <alarm_sender+0x38>)
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d105      	bne.n	8006d32 <alarm_sender+0x22>
			send_alarm_packet_via_sms();
 8006d26:	f001 f86d 	bl	8007e04 <send_alarm_packet_via_sms>
			isAlarm = 0;
 8006d2a:	4b06      	ldr	r3, [pc, #24]	; (8006d44 <alarm_sender+0x34>)
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	701a      	strb	r2, [r3, #0]
			saveAlarm=1;
			isAlarm=0;
		}

	}
}
 8006d30:	e005      	b.n	8006d3e <alarm_sender+0x2e>
			saveAlarm=1;
 8006d32:	4b06      	ldr	r3, [pc, #24]	; (8006d4c <alarm_sender+0x3c>)
 8006d34:	2201      	movs	r2, #1
 8006d36:	701a      	strb	r2, [r3, #0]
			isAlarm=0;
 8006d38:	4b02      	ldr	r3, [pc, #8]	; (8006d44 <alarm_sender+0x34>)
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	701a      	strb	r2, [r3, #0]
}
 8006d3e:	46c0      	nop			; (mov r8, r8)
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}
 8006d44:	20000725 	.word	0x20000725
 8006d48:	20000a2d 	.word	0x20000a2d
 8006d4c:	2000072a 	.word	0x2000072a

08006d50 <clearit>:

void clearit() {
 8006d50:	b580      	push	{r7, lr}
 8006d52:	af00      	add	r7, sp, #0
	resTimeout = 3;
 8006d54:	4b0e      	ldr	r3, [pc, #56]	; (8006d90 <clearit+0x40>)
 8006d56:	2203      	movs	r2, #3
 8006d58:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim6);
 8006d5a:	4b0e      	ldr	r3, [pc, #56]	; (8006d94 <clearit+0x44>)
 8006d5c:	0018      	movs	r0, r3
 8006d5e:	f005 f95f 	bl	800c020 <HAL_TIM_Base_Stop_IT>
	memset(responseBuffer, 0, sizeof(responseBuffer));
 8006d62:	2396      	movs	r3, #150	; 0x96
 8006d64:	005a      	lsls	r2, r3, #1
 8006d66:	4b0c      	ldr	r3, [pc, #48]	; (8006d98 <clearit+0x48>)
 8006d68:	2100      	movs	r1, #0
 8006d6a:	0018      	movs	r0, r3
 8006d6c:	f008 f863 	bl	800ee36 <memset>
	lineCount = 0;
 8006d70:	4b0a      	ldr	r3, [pc, #40]	; (8006d9c <clearit+0x4c>)
 8006d72:	2200      	movs	r2, #0
 8006d74:	701a      	strb	r2, [r3, #0]
	charCount = 0;
 8006d76:	4b0a      	ldr	r3, [pc, #40]	; (8006da0 <clearit+0x50>)
 8006d78:	2200      	movs	r2, #0
 8006d7a:	701a      	strb	r2, [r3, #0]
	isStart = 0;
 8006d7c:	4b09      	ldr	r3, [pc, #36]	; (8006da4 <clearit+0x54>)
 8006d7e:	2200      	movs	r2, #0
 8006d80:	701a      	strb	r2, [r3, #0]
	isBusy = 0;
 8006d82:	4b09      	ldr	r3, [pc, #36]	; (8006da8 <clearit+0x58>)
 8006d84:	2200      	movs	r2, #0
 8006d86:	701a      	strb	r2, [r3, #0]

}
 8006d88:	46c0      	nop			; (mov r8, r8)
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	46c0      	nop			; (mov r8, r8)
 8006d90:	2000087c 	.word	0x2000087c
 8006d94:	20000398 	.word	0x20000398
 8006d98:	20000748 	.word	0x20000748
 8006d9c:	20000874 	.word	0x20000874
 8006da0:	20000875 	.word	0x20000875
 8006da4:	20000878 	.word	0x20000878
 8006da8:	20000879 	.word	0x20000879

08006dac <incoming_msg_handler>:

void incoming_msg_handler() {
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	af02      	add	r7, sp, #8
	if (isPulse == 1) {
 8006db2:	4b26      	ldr	r3, [pc, #152]	; (8006e4c <incoming_msg_handler+0xa0>)
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d144      	bne.n	8006e46 <incoming_msg_handler+0x9a>
		isPulse = 0;
 8006dbc:	4b23      	ldr	r3, [pc, #140]	; (8006e4c <incoming_msg_handler+0xa0>)
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	701a      	strb	r2, [r3, #0]
		//printf("--Sending +++-- \n");
		//HAL_UART_Transmit(&huart4, "S +++ incom", sizeof("S +++ incom"), 100);
		send_command("+++", 10, 1, 0, 0);
 8006dc2:	4823      	ldr	r0, [pc, #140]	; (8006e50 <incoming_msg_handler+0xa4>)
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	9300      	str	r3, [sp, #0]
 8006dc8:	2300      	movs	r3, #0
 8006dca:	2201      	movs	r2, #1
 8006dcc:	210a      	movs	r1, #10
 8006dce:	f7ff fd5d 	bl	800688c <send_command>
		isDataMode = 0;
 8006dd2:	4b20      	ldr	r3, [pc, #128]	; (8006e54 <incoming_msg_handler+0xa8>)
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	701a      	strb	r2, [r3, #0]
		indicationCounter = 0;
 8006dd8:	4b1f      	ldr	r3, [pc, #124]	; (8006e58 <incoming_msg_handler+0xac>)
 8006dda:	2200      	movs	r2, #0
 8006ddc:	701a      	strb	r2, [r3, #0]
		while (indicationCounter < 5)
 8006dde:	46c0      	nop			; (mov r8, r8)
 8006de0:	4b1d      	ldr	r3, [pc, #116]	; (8006e58 <incoming_msg_handler+0xac>)
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	2b04      	cmp	r3, #4
 8006de6:	d9fb      	bls.n	8006de0 <incoming_msg_handler+0x34>
			;
		where_api_handler();
 8006de8:	f7ff ff58 	bl	8006c9c <where_api_handler>
		//HAL_UART_Transmit(&huart4, "S msg del", sizeof("S msg del"), 100);
		send_command("AT+QMGDA=\"DEL ALL\"\r\n", 50, 1, 0, 0);
 8006dec:	481b      	ldr	r0, [pc, #108]	; (8006e5c <incoming_msg_handler+0xb0>)
 8006dee:	2300      	movs	r3, #0
 8006df0:	9300      	str	r3, [sp, #0]
 8006df2:	2300      	movs	r3, #0
 8006df4:	2201      	movs	r2, #1
 8006df6:	2132      	movs	r1, #50	; 0x32
 8006df8:	f7ff fd48 	bl	800688c <send_command>
		msgcleared = 0;
 8006dfc:	4b18      	ldr	r3, [pc, #96]	; (8006e60 <incoming_msg_handler+0xb4>)
 8006dfe:	2200      	movs	r2, #0
 8006e00:	701a      	strb	r2, [r3, #0]
		if (isResponseOk == 1) {
 8006e02:	4b18      	ldr	r3, [pc, #96]	; (8006e64 <incoming_msg_handler+0xb8>)
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d102      	bne.n	8006e12 <incoming_msg_handler+0x66>
			msgcleared = 1;
 8006e0c:	4b14      	ldr	r3, [pc, #80]	; (8006e60 <incoming_msg_handler+0xb4>)
 8006e0e:	2201      	movs	r2, #1
 8006e10:	701a      	strb	r2, [r3, #0]
		}
		//printf("--Sending ATO-- \n");
		send_command("ATO\r\n", 10, 6, 0, 0);
 8006e12:	4815      	ldr	r0, [pc, #84]	; (8006e68 <incoming_msg_handler+0xbc>)
 8006e14:	2300      	movs	r3, #0
 8006e16:	9300      	str	r3, [sp, #0]
 8006e18:	2300      	movs	r3, #0
 8006e1a:	2206      	movs	r2, #6
 8006e1c:	210a      	movs	r1, #10
 8006e1e:	f7ff fd35 	bl	800688c <send_command>
		if (isResponseOk == 1) {
 8006e22:	4b10      	ldr	r3, [pc, #64]	; (8006e64 <incoming_msg_handler+0xb8>)
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d103      	bne.n	8006e34 <incoming_msg_handler+0x88>
			isDataMode = 1;
 8006e2c:	4b09      	ldr	r3, [pc, #36]	; (8006e54 <incoming_msg_handler+0xa8>)
 8006e2e:	2201      	movs	r2, #1
 8006e30:	701a      	strb	r2, [r3, #0]
			isDataMode = 0;
			isTcpOpen = 0;
		}
	}

}
 8006e32:	e008      	b.n	8006e46 <incoming_msg_handler+0x9a>
			isLoggedIn = 0;
 8006e34:	4b0d      	ldr	r3, [pc, #52]	; (8006e6c <incoming_msg_handler+0xc0>)
 8006e36:	2200      	movs	r2, #0
 8006e38:	701a      	strb	r2, [r3, #0]
			isDataMode = 0;
 8006e3a:	4b06      	ldr	r3, [pc, #24]	; (8006e54 <incoming_msg_handler+0xa8>)
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	701a      	strb	r2, [r3, #0]
			isTcpOpen = 0;
 8006e40:	4b0b      	ldr	r3, [pc, #44]	; (8006e70 <incoming_msg_handler+0xc4>)
 8006e42:	2200      	movs	r2, #0
 8006e44:	701a      	strb	r2, [r3, #0]
}
 8006e46:	46c0      	nop			; (mov r8, r8)
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}
 8006e4c:	2000073d 	.word	0x2000073d
 8006e50:	0801344c 	.word	0x0801344c
 8006e54:	2000087a 	.word	0x2000087a
 8006e58:	20000735 	.word	0x20000735
 8006e5c:	08013434 	.word	0x08013434
 8006e60:	200008a0 	.word	0x200008a0
 8006e64:	20000880 	.word	0x20000880
 8006e68:	080134d0 	.word	0x080134d0
 8006e6c:	20000a30 	.word	0x20000a30
 8006e70:	20000a2c 	.word	0x20000a2c

08006e74 <send_login_packet>:

void send_login_packet() {
 8006e74:	b5b0      	push	{r4, r5, r7, lr}
 8006e76:	b086      	sub	sp, #24
 8006e78:	af00      	add	r7, sp, #0
	if (isTcpOpen == 1 && isDataMode == 1) {
 8006e7a:	4b39      	ldr	r3, [pc, #228]	; (8006f60 <send_login_packet+0xec>)
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d169      	bne.n	8006f58 <send_login_packet+0xe4>
 8006e84:	4b37      	ldr	r3, [pc, #220]	; (8006f64 <send_login_packet+0xf0>)
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d164      	bne.n	8006f58 <send_login_packet+0xe4>
		for (uint8_t i = 0; i < 8; i++) {
 8006e8e:	2317      	movs	r3, #23
 8006e90:	18fb      	adds	r3, r7, r3
 8006e92:	2200      	movs	r2, #0
 8006e94:	701a      	strb	r2, [r3, #0]
 8006e96:	e00e      	b.n	8006eb6 <send_login_packet+0x42>
			loginPacket[i + 4] = imei[i];
 8006e98:	2017      	movs	r0, #23
 8006e9a:	183b      	adds	r3, r7, r0
 8006e9c:	781a      	ldrb	r2, [r3, #0]
 8006e9e:	183b      	adds	r3, r7, r0
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	3304      	adds	r3, #4
 8006ea4:	4930      	ldr	r1, [pc, #192]	; (8006f68 <send_login_packet+0xf4>)
 8006ea6:	5c89      	ldrb	r1, [r1, r2]
 8006ea8:	4a30      	ldr	r2, [pc, #192]	; (8006f6c <send_login_packet+0xf8>)
 8006eaa:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 8; i++) {
 8006eac:	183b      	adds	r3, r7, r0
 8006eae:	781a      	ldrb	r2, [r3, #0]
 8006eb0:	183b      	adds	r3, r7, r0
 8006eb2:	3201      	adds	r2, #1
 8006eb4:	701a      	strb	r2, [r3, #0]
 8006eb6:	2317      	movs	r3, #23
 8006eb8:	18fb      	adds	r3, r7, r3
 8006eba:	781b      	ldrb	r3, [r3, #0]
 8006ebc:	2b07      	cmp	r3, #7
 8006ebe:	d9eb      	bls.n	8006e98 <send_login_packet+0x24>
		}
		loginPacket[12] = infoSNo >> 8;
 8006ec0:	4b2b      	ldr	r3, [pc, #172]	; (8006f70 <send_login_packet+0xfc>)
 8006ec2:	881b      	ldrh	r3, [r3, #0]
 8006ec4:	0a1b      	lsrs	r3, r3, #8
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	b2da      	uxtb	r2, r3
 8006eca:	4b28      	ldr	r3, [pc, #160]	; (8006f6c <send_login_packet+0xf8>)
 8006ecc:	731a      	strb	r2, [r3, #12]
		loginPacket[13] = infoSNo;
 8006ece:	4b28      	ldr	r3, [pc, #160]	; (8006f70 <send_login_packet+0xfc>)
 8006ed0:	881b      	ldrh	r3, [r3, #0]
 8006ed2:	b2da      	uxtb	r2, r3
 8006ed4:	4b25      	ldr	r3, [pc, #148]	; (8006f6c <send_login_packet+0xf8>)
 8006ed6:	735a      	strb	r2, [r3, #13]
		uint8_t tempCrcData[12];
		for (uint8_t i = 0; i < 12; i++) {
 8006ed8:	2316      	movs	r3, #22
 8006eda:	18fb      	adds	r3, r7, r3
 8006edc:	2200      	movs	r2, #0
 8006ede:	701a      	strb	r2, [r3, #0]
 8006ee0:	e00e      	b.n	8006f00 <send_login_packet+0x8c>
			tempCrcData[i] = loginPacket[i + 2];
 8006ee2:	2016      	movs	r0, #22
 8006ee4:	183b      	adds	r3, r7, r0
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	1c9a      	adds	r2, r3, #2
 8006eea:	183b      	adds	r3, r7, r0
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	491f      	ldr	r1, [pc, #124]	; (8006f6c <send_login_packet+0xf8>)
 8006ef0:	5c89      	ldrb	r1, [r1, r2]
 8006ef2:	003a      	movs	r2, r7
 8006ef4:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 12; i++) {
 8006ef6:	183b      	adds	r3, r7, r0
 8006ef8:	781a      	ldrb	r2, [r3, #0]
 8006efa:	183b      	adds	r3, r7, r0
 8006efc:	3201      	adds	r2, #1
 8006efe:	701a      	strb	r2, [r3, #0]
 8006f00:	2316      	movs	r3, #22
 8006f02:	18fb      	adds	r3, r7, r3
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	2b0b      	cmp	r3, #11
 8006f08:	d9eb      	bls.n	8006ee2 <send_login_packet+0x6e>
		}
		uint8_t *tempPtr = tempCrcData;
 8006f0a:	003b      	movs	r3, r7
 8006f0c:	613b      	str	r3, [r7, #16]
		uint16_t crcResult = 0;
 8006f0e:	250e      	movs	r5, #14
 8006f10:	197b      	adds	r3, r7, r5
 8006f12:	2200      	movs	r2, #0
 8006f14:	801a      	strh	r2, [r3, #0]
		crcResult = GetCrc16(tempPtr,
 8006f16:	197c      	adds	r4, r7, r5
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	210c      	movs	r1, #12
 8006f1c:	0018      	movs	r0, r3
 8006f1e:	f7ff fe87 	bl	8006c30 <GetCrc16>
 8006f22:	0003      	movs	r3, r0
 8006f24:	8023      	strh	r3, [r4, #0]
				sizeof(tempCrcData) / sizeof(tempCrcData[0]));
		loginPacket[14] = crcResult >> 8;
 8006f26:	0029      	movs	r1, r5
 8006f28:	187b      	adds	r3, r7, r1
 8006f2a:	881b      	ldrh	r3, [r3, #0]
 8006f2c:	0a1b      	lsrs	r3, r3, #8
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	b2da      	uxtb	r2, r3
 8006f32:	4b0e      	ldr	r3, [pc, #56]	; (8006f6c <send_login_packet+0xf8>)
 8006f34:	739a      	strb	r2, [r3, #14]
		loginPacket[15] = crcResult;
 8006f36:	187b      	adds	r3, r7, r1
 8006f38:	881b      	ldrh	r3, [r3, #0]
 8006f3a:	b2da      	uxtb	r2, r3
 8006f3c:	4b0b      	ldr	r3, [pc, #44]	; (8006f6c <send_login_packet+0xf8>)
 8006f3e:	73da      	strb	r2, [r3, #15]
		HAL_UART_Transmit(&AT_PORT, loginPacket, 18, 100);
 8006f40:	490a      	ldr	r1, [pc, #40]	; (8006f6c <send_login_packet+0xf8>)
 8006f42:	480c      	ldr	r0, [pc, #48]	; (8006f74 <send_login_packet+0x100>)
 8006f44:	2364      	movs	r3, #100	; 0x64
 8006f46:	2212      	movs	r2, #18
 8006f48:	f006 f81a 	bl	800cf80 <HAL_UART_Transmit>
		//printf("SENT LOGING PACKET SUCCESSFULLY\n");
		infoSNo++;
 8006f4c:	4b08      	ldr	r3, [pc, #32]	; (8006f70 <send_login_packet+0xfc>)
 8006f4e:	881b      	ldrh	r3, [r3, #0]
 8006f50:	3301      	adds	r3, #1
 8006f52:	b29a      	uxth	r2, r3
 8006f54:	4b06      	ldr	r3, [pc, #24]	; (8006f70 <send_login_packet+0xfc>)
 8006f56:	801a      	strh	r2, [r3, #0]

	} else {
		//printf("TCP SESSION NOT OPENED\n");
	}
}
 8006f58:	46c0      	nop			; (mov r8, r8)
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	b006      	add	sp, #24
 8006f5e:	bdb0      	pop	{r4, r5, r7, pc}
 8006f60:	20000a2c 	.word	0x20000a2c
 8006f64:	2000087a 	.word	0x2000087a
 8006f68:	20000884 	.word	0x20000884
 8006f6c:	20000070 	.word	0x20000070
 8006f70:	2000006c 	.word	0x2000006c
 8006f74:	200004c8 	.word	0x200004c8

08006f78 <send_data_packet>:

void send_data_packet() {
 8006f78:	b5b0      	push	{r4, r5, r7, lr}
 8006f7a:	b0a0      	sub	sp, #128	; 0x80
 8006f7c:	af00      	add	r7, sp, #0
	infoSNo++;
 8006f7e:	4bbc      	ldr	r3, [pc, #752]	; (8007270 <send_data_packet+0x2f8>)
 8006f80:	881b      	ldrh	r3, [r3, #0]
 8006f82:	3301      	adds	r3, #1
 8006f84:	b29a      	uxth	r2, r3
 8006f86:	4bba      	ldr	r3, [pc, #744]	; (8007270 <send_data_packet+0x2f8>)
 8006f88:	801a      	strh	r2, [r3, #0]
	uint8_t sendCounter = 0;
 8006f8a:	237f      	movs	r3, #127	; 0x7f
 8006f8c:	18fb      	adds	r3, r7, r3
 8006f8e:	2200      	movs	r2, #0
 8006f90:	701a      	strb	r2, [r3, #0]
	while (read_data_packet() == 1 && sendCounter < 100 && isLoggedIn == 1
 8006f92:	e06d      	b.n	8007070 <send_data_packet+0xf8>
			&& isDataMode == 1 && isTcpOpen == 1) {
		for (uint8_t i = 0; i < 18; i++) {
 8006f94:	237e      	movs	r3, #126	; 0x7e
 8006f96:	18fb      	adds	r3, r7, r3
 8006f98:	2200      	movs	r2, #0
 8006f9a:	701a      	strb	r2, [r3, #0]
 8006f9c:	e00e      	b.n	8006fbc <send_data_packet+0x44>
			dataPacket[i + 4] = readPacket[i];
 8006f9e:	207e      	movs	r0, #126	; 0x7e
 8006fa0:	183b      	adds	r3, r7, r0
 8006fa2:	781a      	ldrb	r2, [r3, #0]
 8006fa4:	183b      	adds	r3, r7, r0
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	3304      	adds	r3, #4
 8006faa:	49b2      	ldr	r1, [pc, #712]	; (8007274 <send_data_packet+0x2fc>)
 8006fac:	5c89      	ldrb	r1, [r1, r2]
 8006fae:	4ab2      	ldr	r2, [pc, #712]	; (8007278 <send_data_packet+0x300>)
 8006fb0:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 18; i++) {
 8006fb2:	183b      	adds	r3, r7, r0
 8006fb4:	781a      	ldrb	r2, [r3, #0]
 8006fb6:	183b      	adds	r3, r7, r0
 8006fb8:	3201      	adds	r2, #1
 8006fba:	701a      	strb	r2, [r3, #0]
 8006fbc:	237e      	movs	r3, #126	; 0x7e
 8006fbe:	18fb      	adds	r3, r7, r3
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	2b11      	cmp	r3, #17
 8006fc4:	d9eb      	bls.n	8006f9e <send_data_packet+0x26>
		}

		dataPacket[30] = infoSNo >> 8;
 8006fc6:	4baa      	ldr	r3, [pc, #680]	; (8007270 <send_data_packet+0x2f8>)
 8006fc8:	881b      	ldrh	r3, [r3, #0]
 8006fca:	0a1b      	lsrs	r3, r3, #8
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	b2da      	uxtb	r2, r3
 8006fd0:	4ba9      	ldr	r3, [pc, #676]	; (8007278 <send_data_packet+0x300>)
 8006fd2:	779a      	strb	r2, [r3, #30]
		dataPacket[31] = infoSNo;
 8006fd4:	4ba6      	ldr	r3, [pc, #664]	; (8007270 <send_data_packet+0x2f8>)
 8006fd6:	881b      	ldrh	r3, [r3, #0]
 8006fd8:	b2da      	uxtb	r2, r3
 8006fda:	4ba7      	ldr	r3, [pc, #668]	; (8007278 <send_data_packet+0x300>)
 8006fdc:	77da      	strb	r2, [r3, #31]
		uint8_t tempCrcData[30];
		for (uint8_t i = 0; i < 29; i++) {
 8006fde:	237d      	movs	r3, #125	; 0x7d
 8006fe0:	18fb      	adds	r3, r7, r3
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	701a      	strb	r2, [r3, #0]
 8006fe6:	e00f      	b.n	8007008 <send_data_packet+0x90>
			tempCrcData[i] = dataPacket[i + 2];
 8006fe8:	207d      	movs	r0, #125	; 0x7d
 8006fea:	183b      	adds	r3, r7, r0
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	1c9a      	adds	r2, r3, #2
 8006ff0:	183b      	adds	r3, r7, r0
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	49a0      	ldr	r1, [pc, #640]	; (8007278 <send_data_packet+0x300>)
 8006ff6:	5c89      	ldrb	r1, [r1, r2]
 8006ff8:	2244      	movs	r2, #68	; 0x44
 8006ffa:	18ba      	adds	r2, r7, r2
 8006ffc:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 29; i++) {
 8006ffe:	183b      	adds	r3, r7, r0
 8007000:	781a      	ldrb	r2, [r3, #0]
 8007002:	183b      	adds	r3, r7, r0
 8007004:	3201      	adds	r2, #1
 8007006:	701a      	strb	r2, [r3, #0]
 8007008:	237d      	movs	r3, #125	; 0x7d
 800700a:	18fb      	adds	r3, r7, r3
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	2b1c      	cmp	r3, #28
 8007010:	d9ea      	bls.n	8006fe8 <send_data_packet+0x70>
		}
		uint8_t *tempPtr = tempCrcData;
 8007012:	2344      	movs	r3, #68	; 0x44
 8007014:	18fb      	adds	r3, r7, r3
 8007016:	677b      	str	r3, [r7, #116]	; 0x74
		uint16_t crcResult = 0;
 8007018:	2572      	movs	r5, #114	; 0x72
 800701a:	197b      	adds	r3, r7, r5
 800701c:	2200      	movs	r2, #0
 800701e:	801a      	strh	r2, [r3, #0]
		crcResult = GetCrc16(tempPtr,
 8007020:	197c      	adds	r4, r7, r5
 8007022:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007024:	211e      	movs	r1, #30
 8007026:	0018      	movs	r0, r3
 8007028:	f7ff fe02 	bl	8006c30 <GetCrc16>
 800702c:	0003      	movs	r3, r0
 800702e:	8023      	strh	r3, [r4, #0]
				sizeof(tempCrcData) / sizeof(tempCrcData[0]));
		dataPacket[32] = crcResult >> 8;
 8007030:	0028      	movs	r0, r5
 8007032:	183b      	adds	r3, r7, r0
 8007034:	881b      	ldrh	r3, [r3, #0]
 8007036:	0a1b      	lsrs	r3, r3, #8
 8007038:	b29b      	uxth	r3, r3
 800703a:	b2d9      	uxtb	r1, r3
 800703c:	4b8e      	ldr	r3, [pc, #568]	; (8007278 <send_data_packet+0x300>)
 800703e:	2220      	movs	r2, #32
 8007040:	5499      	strb	r1, [r3, r2]
		dataPacket[33] = crcResult;
 8007042:	183b      	adds	r3, r7, r0
 8007044:	881b      	ldrh	r3, [r3, #0]
 8007046:	b2d9      	uxtb	r1, r3
 8007048:	4b8b      	ldr	r3, [pc, #556]	; (8007278 <send_data_packet+0x300>)
 800704a:	2221      	movs	r2, #33	; 0x21
 800704c:	5499      	strb	r1, [r3, r2]
		HAL_UART_Transmit(&AT_PORT, dataPacket, 36, 100);
 800704e:	498a      	ldr	r1, [pc, #552]	; (8007278 <send_data_packet+0x300>)
 8007050:	488a      	ldr	r0, [pc, #552]	; (800727c <send_data_packet+0x304>)
 8007052:	2364      	movs	r3, #100	; 0x64
 8007054:	2224      	movs	r2, #36	; 0x24
 8007056:	f005 ff93 	bl	800cf80 <HAL_UART_Transmit>
		// HAL_UART_Transmit(&huart4, dataPacket, 36, 100);
		sendCounter++;
 800705a:	217f      	movs	r1, #127	; 0x7f
 800705c:	187b      	adds	r3, r7, r1
 800705e:	781a      	ldrb	r2, [r3, #0]
 8007060:	187b      	adds	r3, r7, r1
 8007062:	3201      	adds	r2, #1
 8007064:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1000);
 8007066:	23fa      	movs	r3, #250	; 0xfa
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	0018      	movs	r0, r3
 800706c:	f002 fd4a 	bl	8009b04 <HAL_Delay>
	while (read_data_packet() == 1 && sendCounter < 100 && isLoggedIn == 1
 8007070:	f000 f9ea 	bl	8007448 <read_data_packet>
 8007074:	0003      	movs	r3, r0
 8007076:	2b01      	cmp	r3, #1
 8007078:	d114      	bne.n	80070a4 <send_data_packet+0x12c>
 800707a:	237f      	movs	r3, #127	; 0x7f
 800707c:	18fb      	adds	r3, r7, r3
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	2b63      	cmp	r3, #99	; 0x63
 8007082:	d80f      	bhi.n	80070a4 <send_data_packet+0x12c>
 8007084:	4b7e      	ldr	r3, [pc, #504]	; (8007280 <send_data_packet+0x308>)
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	b2db      	uxtb	r3, r3
 800708a:	2b01      	cmp	r3, #1
 800708c:	d10a      	bne.n	80070a4 <send_data_packet+0x12c>
			&& isDataMode == 1 && isTcpOpen == 1) {
 800708e:	4b7d      	ldr	r3, [pc, #500]	; (8007284 <send_data_packet+0x30c>)
 8007090:	781b      	ldrb	r3, [r3, #0]
 8007092:	b2db      	uxtb	r3, r3
 8007094:	2b01      	cmp	r3, #1
 8007096:	d105      	bne.n	80070a4 <send_data_packet+0x12c>
 8007098:	4b7b      	ldr	r3, [pc, #492]	; (8007288 <send_data_packet+0x310>)
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	b2db      	uxtb	r3, r3
 800709e:	2b01      	cmp	r3, #1
 80070a0:	d100      	bne.n	80070a4 <send_data_packet+0x12c>
 80070a2:	e777      	b.n	8006f94 <send_data_packet+0x1c>
	}
	if (read_data_packet() == 0) {
 80070a4:	f000 f9d0 	bl	8007448 <read_data_packet>
 80070a8:	1e03      	subs	r3, r0, #0
 80070aa:	d000      	beq.n	80070ae <send_data_packet+0x136>
 80070ac:	e0dc      	b.n	8007268 <send_data_packet+0x2f0>
		if(isAlarm){
 80070ae:	4b77      	ldr	r3, [pc, #476]	; (800728c <send_data_packet+0x314>)
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d074      	beq.n	80071a2 <send_data_packet+0x22a>
			isAlarm=0;
 80070b8:	4b74      	ldr	r3, [pc, #464]	; (800728c <send_data_packet+0x314>)
 80070ba:	2200      	movs	r2, #0
 80070bc:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < 18; i++) {
 80070be:	237c      	movs	r3, #124	; 0x7c
 80070c0:	18fb      	adds	r3, r7, r3
 80070c2:	2200      	movs	r2, #0
 80070c4:	701a      	strb	r2, [r3, #0]
 80070c6:	e010      	b.n	80070ea <send_data_packet+0x172>
				alarmPacket[i + 4] = gps_info[i];
 80070c8:	4b71      	ldr	r3, [pc, #452]	; (8007290 <send_data_packet+0x318>)
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	207c      	movs	r0, #124	; 0x7c
 80070ce:	183b      	adds	r3, r7, r0
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	18d2      	adds	r2, r2, r3
 80070d4:	183b      	adds	r3, r7, r0
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	3304      	adds	r3, #4
 80070da:	7811      	ldrb	r1, [r2, #0]
 80070dc:	4a6d      	ldr	r2, [pc, #436]	; (8007294 <send_data_packet+0x31c>)
 80070de:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i = 0; i < 18; i++) {
 80070e0:	183b      	adds	r3, r7, r0
 80070e2:	781a      	ldrb	r2, [r3, #0]
 80070e4:	183b      	adds	r3, r7, r0
 80070e6:	3201      	adds	r2, #1
 80070e8:	701a      	strb	r2, [r3, #0]
 80070ea:	237c      	movs	r3, #124	; 0x7c
 80070ec:	18fb      	adds	r3, r7, r3
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	2b11      	cmp	r3, #17
 80070f2:	d9e9      	bls.n	80070c8 <send_data_packet+0x150>
			}
			create_status_info();
 80070f4:	f000 fa1e 	bl	8007534 <create_status_info>
			alarmPacket[22]=TermInfo;
 80070f8:	4b67      	ldr	r3, [pc, #412]	; (8007298 <send_data_packet+0x320>)
 80070fa:	781a      	ldrb	r2, [r3, #0]
 80070fc:	4b65      	ldr	r3, [pc, #404]	; (8007294 <send_data_packet+0x31c>)
 80070fe:	759a      	strb	r2, [r3, #22]
			alarmPacket[23]=VLvl;
 8007100:	4b66      	ldr	r3, [pc, #408]	; (800729c <send_data_packet+0x324>)
 8007102:	781a      	ldrb	r2, [r3, #0]
 8007104:	4b63      	ldr	r3, [pc, #396]	; (8007294 <send_data_packet+0x31c>)
 8007106:	75da      	strb	r2, [r3, #23]
			alarmPacket[24]=GSMSS;
 8007108:	4b65      	ldr	r3, [pc, #404]	; (80072a0 <send_data_packet+0x328>)
 800710a:	781a      	ldrb	r2, [r3, #0]
 800710c:	4b61      	ldr	r3, [pc, #388]	; (8007294 <send_data_packet+0x31c>)
 800710e:	761a      	strb	r2, [r3, #24]
			alarmPacket[26] = infoSNo >> 8;
 8007110:	4b57      	ldr	r3, [pc, #348]	; (8007270 <send_data_packet+0x2f8>)
 8007112:	881b      	ldrh	r3, [r3, #0]
 8007114:	0a1b      	lsrs	r3, r3, #8
 8007116:	b29b      	uxth	r3, r3
 8007118:	b2da      	uxtb	r2, r3
 800711a:	4b5e      	ldr	r3, [pc, #376]	; (8007294 <send_data_packet+0x31c>)
 800711c:	769a      	strb	r2, [r3, #26]
			alarmPacket[27] = infoSNo;
 800711e:	4b54      	ldr	r3, [pc, #336]	; (8007270 <send_data_packet+0x2f8>)
 8007120:	881b      	ldrh	r3, [r3, #0]
 8007122:	b2da      	uxtb	r2, r3
 8007124:	4b5b      	ldr	r3, [pc, #364]	; (8007294 <send_data_packet+0x31c>)
 8007126:	76da      	strb	r2, [r3, #27]
			uint8_t tempCrcData[30];
			for (uint8_t i = 0; i < 26; i++) {
 8007128:	237b      	movs	r3, #123	; 0x7b
 800712a:	18fb      	adds	r3, r7, r3
 800712c:	2200      	movs	r2, #0
 800712e:	701a      	strb	r2, [r3, #0]
 8007130:	e00f      	b.n	8007152 <send_data_packet+0x1da>
				tempCrcData[i] = alarmPacket[i + 2];
 8007132:	207b      	movs	r0, #123	; 0x7b
 8007134:	183b      	adds	r3, r7, r0
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	1c9a      	adds	r2, r3, #2
 800713a:	183b      	adds	r3, r7, r0
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	4955      	ldr	r1, [pc, #340]	; (8007294 <send_data_packet+0x31c>)
 8007140:	5c89      	ldrb	r1, [r1, r2]
 8007142:	2224      	movs	r2, #36	; 0x24
 8007144:	18ba      	adds	r2, r7, r2
 8007146:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i = 0; i < 26; i++) {
 8007148:	183b      	adds	r3, r7, r0
 800714a:	781a      	ldrb	r2, [r3, #0]
 800714c:	183b      	adds	r3, r7, r0
 800714e:	3201      	adds	r2, #1
 8007150:	701a      	strb	r2, [r3, #0]
 8007152:	237b      	movs	r3, #123	; 0x7b
 8007154:	18fb      	adds	r3, r7, r3
 8007156:	781b      	ldrb	r3, [r3, #0]
 8007158:	2b19      	cmp	r3, #25
 800715a:	d9ea      	bls.n	8007132 <send_data_packet+0x1ba>
			}
			uint8_t *tempPtr = tempCrcData;
 800715c:	2324      	movs	r3, #36	; 0x24
 800715e:	18fb      	adds	r3, r7, r3
 8007160:	667b      	str	r3, [r7, #100]	; 0x64
			uint16_t crcResult = 0;
 8007162:	2562      	movs	r5, #98	; 0x62
 8007164:	197b      	adds	r3, r7, r5
 8007166:	2200      	movs	r2, #0
 8007168:	801a      	strh	r2, [r3, #0]
			crcResult = GetCrc16(tempPtr,
 800716a:	197c      	adds	r4, r7, r5
 800716c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800716e:	211e      	movs	r1, #30
 8007170:	0018      	movs	r0, r3
 8007172:	f7ff fd5d 	bl	8006c30 <GetCrc16>
 8007176:	0003      	movs	r3, r0
 8007178:	8023      	strh	r3, [r4, #0]
					sizeof(tempCrcData) / sizeof(tempCrcData[0]));
			alarmPacket[28] = crcResult >> 8;
 800717a:	0029      	movs	r1, r5
 800717c:	187b      	adds	r3, r7, r1
 800717e:	881b      	ldrh	r3, [r3, #0]
 8007180:	0a1b      	lsrs	r3, r3, #8
 8007182:	b29b      	uxth	r3, r3
 8007184:	b2da      	uxtb	r2, r3
 8007186:	4b43      	ldr	r3, [pc, #268]	; (8007294 <send_data_packet+0x31c>)
 8007188:	771a      	strb	r2, [r3, #28]
			alarmPacket[29] = crcResult;
 800718a:	187b      	adds	r3, r7, r1
 800718c:	881b      	ldrh	r3, [r3, #0]
 800718e:	b2da      	uxtb	r2, r3
 8007190:	4b40      	ldr	r3, [pc, #256]	; (8007294 <send_data_packet+0x31c>)
 8007192:	775a      	strb	r2, [r3, #29]
			HAL_UART_Transmit(&AT_PORT, alarmPacket, 29, 100);
 8007194:	493f      	ldr	r1, [pc, #252]	; (8007294 <send_data_packet+0x31c>)
 8007196:	4839      	ldr	r0, [pc, #228]	; (800727c <send_data_packet+0x304>)
 8007198:	2364      	movs	r3, #100	; 0x64
 800719a:	221d      	movs	r2, #29
 800719c:	f005 fef0 	bl	800cf80 <HAL_UART_Transmit>

		}


	}
}
 80071a0:	e062      	b.n	8007268 <send_data_packet+0x2f0>
			for (uint8_t i = 0; i < 18; i++) {
 80071a2:	237a      	movs	r3, #122	; 0x7a
 80071a4:	18fb      	adds	r3, r7, r3
 80071a6:	2200      	movs	r2, #0
 80071a8:	701a      	strb	r2, [r3, #0]
 80071aa:	e010      	b.n	80071ce <send_data_packet+0x256>
				dataPacket[i + 4] = gps_info[i];
 80071ac:	4b38      	ldr	r3, [pc, #224]	; (8007290 <send_data_packet+0x318>)
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	207a      	movs	r0, #122	; 0x7a
 80071b2:	183b      	adds	r3, r7, r0
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	18d2      	adds	r2, r2, r3
 80071b8:	183b      	adds	r3, r7, r0
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	3304      	adds	r3, #4
 80071be:	7811      	ldrb	r1, [r2, #0]
 80071c0:	4a2d      	ldr	r2, [pc, #180]	; (8007278 <send_data_packet+0x300>)
 80071c2:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i = 0; i < 18; i++) {
 80071c4:	183b      	adds	r3, r7, r0
 80071c6:	781a      	ldrb	r2, [r3, #0]
 80071c8:	183b      	adds	r3, r7, r0
 80071ca:	3201      	adds	r2, #1
 80071cc:	701a      	strb	r2, [r3, #0]
 80071ce:	237a      	movs	r3, #122	; 0x7a
 80071d0:	18fb      	adds	r3, r7, r3
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	2b11      	cmp	r3, #17
 80071d6:	d9e9      	bls.n	80071ac <send_data_packet+0x234>
			dataPacket[30] = infoSNo >> 8;
 80071d8:	4b25      	ldr	r3, [pc, #148]	; (8007270 <send_data_packet+0x2f8>)
 80071da:	881b      	ldrh	r3, [r3, #0]
 80071dc:	0a1b      	lsrs	r3, r3, #8
 80071de:	b29b      	uxth	r3, r3
 80071e0:	b2da      	uxtb	r2, r3
 80071e2:	4b25      	ldr	r3, [pc, #148]	; (8007278 <send_data_packet+0x300>)
 80071e4:	779a      	strb	r2, [r3, #30]
			dataPacket[31] = infoSNo;
 80071e6:	4b22      	ldr	r3, [pc, #136]	; (8007270 <send_data_packet+0x2f8>)
 80071e8:	881b      	ldrh	r3, [r3, #0]
 80071ea:	b2da      	uxtb	r2, r3
 80071ec:	4b22      	ldr	r3, [pc, #136]	; (8007278 <send_data_packet+0x300>)
 80071ee:	77da      	strb	r2, [r3, #31]
			for (uint8_t i = 0; i < 29; i++) {
 80071f0:	2379      	movs	r3, #121	; 0x79
 80071f2:	18fb      	adds	r3, r7, r3
 80071f4:	2200      	movs	r2, #0
 80071f6:	701a      	strb	r2, [r3, #0]
 80071f8:	e00e      	b.n	8007218 <send_data_packet+0x2a0>
				tempCrcData[i] = dataPacket[i + 2];
 80071fa:	2079      	movs	r0, #121	; 0x79
 80071fc:	183b      	adds	r3, r7, r0
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	1c9a      	adds	r2, r3, #2
 8007202:	183b      	adds	r3, r7, r0
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	491c      	ldr	r1, [pc, #112]	; (8007278 <send_data_packet+0x300>)
 8007208:	5c89      	ldrb	r1, [r1, r2]
 800720a:	1d3a      	adds	r2, r7, #4
 800720c:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i = 0; i < 29; i++) {
 800720e:	183b      	adds	r3, r7, r0
 8007210:	781a      	ldrb	r2, [r3, #0]
 8007212:	183b      	adds	r3, r7, r0
 8007214:	3201      	adds	r2, #1
 8007216:	701a      	strb	r2, [r3, #0]
 8007218:	2379      	movs	r3, #121	; 0x79
 800721a:	18fb      	adds	r3, r7, r3
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	2b1c      	cmp	r3, #28
 8007220:	d9eb      	bls.n	80071fa <send_data_packet+0x282>
			uint8_t *tempPtr = tempCrcData;
 8007222:	1d3b      	adds	r3, r7, #4
 8007224:	66fb      	str	r3, [r7, #108]	; 0x6c
			uint16_t crcResult = 0;
 8007226:	256a      	movs	r5, #106	; 0x6a
 8007228:	197b      	adds	r3, r7, r5
 800722a:	2200      	movs	r2, #0
 800722c:	801a      	strh	r2, [r3, #0]
			crcResult = GetCrc16(tempPtr,
 800722e:	197c      	adds	r4, r7, r5
 8007230:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007232:	211e      	movs	r1, #30
 8007234:	0018      	movs	r0, r3
 8007236:	f7ff fcfb 	bl	8006c30 <GetCrc16>
 800723a:	0003      	movs	r3, r0
 800723c:	8023      	strh	r3, [r4, #0]
			dataPacket[32] = crcResult >> 8;
 800723e:	0028      	movs	r0, r5
 8007240:	183b      	adds	r3, r7, r0
 8007242:	881b      	ldrh	r3, [r3, #0]
 8007244:	0a1b      	lsrs	r3, r3, #8
 8007246:	b29b      	uxth	r3, r3
 8007248:	b2d9      	uxtb	r1, r3
 800724a:	4b0b      	ldr	r3, [pc, #44]	; (8007278 <send_data_packet+0x300>)
 800724c:	2220      	movs	r2, #32
 800724e:	5499      	strb	r1, [r3, r2]
			dataPacket[33] = crcResult;
 8007250:	183b      	adds	r3, r7, r0
 8007252:	881b      	ldrh	r3, [r3, #0]
 8007254:	b2d9      	uxtb	r1, r3
 8007256:	4b08      	ldr	r3, [pc, #32]	; (8007278 <send_data_packet+0x300>)
 8007258:	2221      	movs	r2, #33	; 0x21
 800725a:	5499      	strb	r1, [r3, r2]
			HAL_UART_Transmit(&AT_PORT, dataPacket, 36, 100);
 800725c:	4906      	ldr	r1, [pc, #24]	; (8007278 <send_data_packet+0x300>)
 800725e:	4807      	ldr	r0, [pc, #28]	; (800727c <send_data_packet+0x304>)
 8007260:	2364      	movs	r3, #100	; 0x64
 8007262:	2224      	movs	r2, #36	; 0x24
 8007264:	f005 fe8c 	bl	800cf80 <HAL_UART_Transmit>
}
 8007268:	46c0      	nop			; (mov r8, r8)
 800726a:	46bd      	mov	sp, r7
 800726c:	b020      	add	sp, #128	; 0x80
 800726e:	bdb0      	pop	{r4, r5, r7, pc}
 8007270:	2000006c 	.word	0x2000006c
 8007274:	20000a54 	.word	0x20000a54
 8007278:	20000084 	.word	0x20000084
 800727c:	200004c8 	.word	0x200004c8
 8007280:	20000a30 	.word	0x20000a30
 8007284:	2000087a 	.word	0x2000087a
 8007288:	20000a2c 	.word	0x20000a2c
 800728c:	20000725 	.word	0x20000725
 8007290:	2000002c 	.word	0x2000002c
 8007294:	200000a8 	.word	0x200000a8
 8007298:	2000072b 	.word	0x2000072b
 800729c:	2000072d 	.word	0x2000072d
 80072a0:	2000072c 	.word	0x2000072c

080072a4 <checkdatasize>:
uint8_t checkdatasize() {
 80072a4:	b580      	push	{r7, lr}
 80072a6:	af00      	add	r7, sp, #0
	if (StartSec == EndSec) {
 80072a8:	4b1c      	ldr	r3, [pc, #112]	; (800731c <checkdatasize+0x78>)
 80072aa:	881b      	ldrh	r3, [r3, #0]
 80072ac:	b29a      	uxth	r2, r3
 80072ae:	4b1c      	ldr	r3, [pc, #112]	; (8007320 <checkdatasize+0x7c>)
 80072b0:	881b      	ldrh	r3, [r3, #0]
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d10f      	bne.n	80072d8 <checkdatasize+0x34>
		if ((StartN - EndN) >= 672) {
 80072b8:	4b1a      	ldr	r3, [pc, #104]	; (8007324 <checkdatasize+0x80>)
 80072ba:	881b      	ldrh	r3, [r3, #0]
 80072bc:	b29b      	uxth	r3, r3
 80072be:	001a      	movs	r2, r3
 80072c0:	4b19      	ldr	r3, [pc, #100]	; (8007328 <checkdatasize+0x84>)
 80072c2:	881b      	ldrh	r3, [r3, #0]
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	1ad2      	subs	r2, r2, r3
 80072c8:	23a8      	movs	r3, #168	; 0xa8
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	429a      	cmp	r2, r3
 80072ce:	db01      	blt.n	80072d4 <checkdatasize+0x30>
			return 1;
 80072d0:	2301      	movs	r3, #1
 80072d2:	e01f      	b.n	8007314 <checkdatasize+0x70>
		} else {
			return 0;
 80072d4:	2300      	movs	r3, #0
 80072d6:	e01d      	b.n	8007314 <checkdatasize+0x70>
		}
	} else if ((StartSec - EndSec) == 1) {
 80072d8:	4b10      	ldr	r3, [pc, #64]	; (800731c <checkdatasize+0x78>)
 80072da:	881b      	ldrh	r3, [r3, #0]
 80072dc:	b29b      	uxth	r3, r3
 80072de:	001a      	movs	r2, r3
 80072e0:	4b0f      	ldr	r3, [pc, #60]	; (8007320 <checkdatasize+0x7c>)
 80072e2:	881b      	ldrh	r3, [r3, #0]
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	1ad3      	subs	r3, r2, r3
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d112      	bne.n	8007312 <checkdatasize+0x6e>
		if ((4096 - EndN + StartN) >= 672) {
 80072ec:	4b0e      	ldr	r3, [pc, #56]	; (8007328 <checkdatasize+0x84>)
 80072ee:	881b      	ldrh	r3, [r3, #0]
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	001a      	movs	r2, r3
 80072f4:	2380      	movs	r3, #128	; 0x80
 80072f6:	015b      	lsls	r3, r3, #5
 80072f8:	1a9b      	subs	r3, r3, r2
 80072fa:	4a0a      	ldr	r2, [pc, #40]	; (8007324 <checkdatasize+0x80>)
 80072fc:	8812      	ldrh	r2, [r2, #0]
 80072fe:	b292      	uxth	r2, r2
 8007300:	189a      	adds	r2, r3, r2
 8007302:	23a8      	movs	r3, #168	; 0xa8
 8007304:	009b      	lsls	r3, r3, #2
 8007306:	429a      	cmp	r2, r3
 8007308:	db01      	blt.n	800730e <checkdatasize+0x6a>
			return 1;
 800730a:	2301      	movs	r3, #1
 800730c:	e002      	b.n	8007314 <checkdatasize+0x70>
		} else {
			return 0;
 800730e:	2300      	movs	r3, #0
 8007310:	e000      	b.n	8007314 <checkdatasize+0x70>
		}
	} else {
		return 1;
 8007312:	2301      	movs	r3, #1
	}
}
 8007314:	0018      	movs	r0, r3
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
 800731a:	46c0      	nop			; (mov r8, r8)
 800731c:	20000d18 	.word	0x20000d18
 8007320:	20000d1a 	.word	0x20000d1a
 8007324:	20000d14 	.word	0x20000d14
 8007328:	20000d16 	.word	0x20000d16

0800732c <save_data_packet>:

void save_data_packet() {
 800732c:	b580      	push	{r7, lr}
 800732e:	b082      	sub	sp, #8
 8007330:	af00      	add	r7, sp, #0

	if(saveAlarm){
 8007332:	4b3c      	ldr	r3, [pc, #240]	; (8007424 <save_data_packet+0xf8>)
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	b2db      	uxtb	r3, r3
 8007338:	2b00      	cmp	r3, #0
 800733a:	d002      	beq.n	8007342 <save_data_packet+0x16>
		saveAlarm=0;
 800733c:	4b39      	ldr	r3, [pc, #228]	; (8007424 <save_data_packet+0xf8>)
 800733e:	2200      	movs	r2, #0
 8007340:	701a      	strb	r2, [r3, #0]
		//todo save packet
	}
	memset(savePacket, 0, sizeof(savePacket));
 8007342:	4b39      	ldr	r3, [pc, #228]	; (8007428 <save_data_packet+0xfc>)
 8007344:	2220      	movs	r2, #32
 8007346:	2100      	movs	r1, #0
 8007348:	0018      	movs	r0, r3
 800734a:	f007 fd74 	bl	800ee36 <memset>
	for (uint8_t i = 0; i < 18; i++) {
 800734e:	1dfb      	adds	r3, r7, #7
 8007350:	2200      	movs	r2, #0
 8007352:	701a      	strb	r2, [r3, #0]
 8007354:	e00e      	b.n	8007374 <save_data_packet+0x48>
		savePacket[i] = gps_info[i];
 8007356:	4b35      	ldr	r3, [pc, #212]	; (800742c <save_data_packet+0x100>)
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	1dfb      	adds	r3, r7, #7
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	18d2      	adds	r2, r2, r3
 8007360:	1dfb      	adds	r3, r7, #7
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	7811      	ldrb	r1, [r2, #0]
 8007366:	4a30      	ldr	r2, [pc, #192]	; (8007428 <save_data_packet+0xfc>)
 8007368:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 18; i++) {
 800736a:	1dfb      	adds	r3, r7, #7
 800736c:	781a      	ldrb	r2, [r3, #0]
 800736e:	1dfb      	adds	r3, r7, #7
 8007370:	3201      	adds	r2, #1
 8007372:	701a      	strb	r2, [r3, #0]
 8007374:	1dfb      	adds	r3, r7, #7
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	2b11      	cmp	r3, #17
 800737a:	d9ec      	bls.n	8007356 <save_data_packet+0x2a>
	}
	W25qxx_WriteSector(savePacket, StartSec, StartN, 32);
 800737c:	4b2c      	ldr	r3, [pc, #176]	; (8007430 <save_data_packet+0x104>)
 800737e:	881b      	ldrh	r3, [r3, #0]
 8007380:	b29b      	uxth	r3, r3
 8007382:	0019      	movs	r1, r3
 8007384:	4b2b      	ldr	r3, [pc, #172]	; (8007434 <save_data_packet+0x108>)
 8007386:	881b      	ldrh	r3, [r3, #0]
 8007388:	b29b      	uxth	r3, r3
 800738a:	001a      	movs	r2, r3
 800738c:	4826      	ldr	r0, [pc, #152]	; (8007428 <save_data_packet+0xfc>)
 800738e:	2320      	movs	r3, #32
 8007390:	f002 f90e 	bl	80095b0 <W25qxx_WriteSector>
	StartN = StartN + 32;
 8007394:	4b27      	ldr	r3, [pc, #156]	; (8007434 <save_data_packet+0x108>)
 8007396:	881b      	ldrh	r3, [r3, #0]
 8007398:	b29b      	uxth	r3, r3
 800739a:	3320      	adds	r3, #32
 800739c:	b29a      	uxth	r2, r3
 800739e:	4b25      	ldr	r3, [pc, #148]	; (8007434 <save_data_packet+0x108>)
 80073a0:	801a      	strh	r2, [r3, #0]
	if (StartN > 4090) {
 80073a2:	4b24      	ldr	r3, [pc, #144]	; (8007434 <save_data_packet+0x108>)
 80073a4:	881b      	ldrh	r3, [r3, #0]
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	4a23      	ldr	r2, [pc, #140]	; (8007438 <save_data_packet+0x10c>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d935      	bls.n	800741a <save_data_packet+0xee>
		StartN = 0;
 80073ae:	4b21      	ldr	r3, [pc, #132]	; (8007434 <save_data_packet+0x108>)
 80073b0:	2200      	movs	r2, #0
 80073b2:	801a      	strh	r2, [r3, #0]
		StartSec += 1;
 80073b4:	4b1e      	ldr	r3, [pc, #120]	; (8007430 <save_data_packet+0x104>)
 80073b6:	881b      	ldrh	r3, [r3, #0]
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	3301      	adds	r3, #1
 80073bc:	b29a      	uxth	r2, r3
 80073be:	4b1c      	ldr	r3, [pc, #112]	; (8007430 <save_data_packet+0x104>)
 80073c0:	801a      	strh	r2, [r3, #0]
		if (StartSec == 1024) {
 80073c2:	4b1b      	ldr	r3, [pc, #108]	; (8007430 <save_data_packet+0x104>)
 80073c4:	881b      	ldrh	r3, [r3, #0]
 80073c6:	b29a      	uxth	r2, r3
 80073c8:	2380      	movs	r3, #128	; 0x80
 80073ca:	00db      	lsls	r3, r3, #3
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d102      	bne.n	80073d6 <save_data_packet+0xaa>
			StartSec = 1;
 80073d0:	4b17      	ldr	r3, [pc, #92]	; (8007430 <save_data_packet+0x104>)
 80073d2:	2201      	movs	r2, #1
 80073d4:	801a      	strh	r2, [r3, #0]
		}
		W25qxx_EraseSector(StartSec);
 80073d6:	4b16      	ldr	r3, [pc, #88]	; (8007430 <save_data_packet+0x104>)
 80073d8:	881b      	ldrh	r3, [r3, #0]
 80073da:	b29b      	uxth	r3, r3
 80073dc:	0018      	movs	r0, r3
 80073de:	f001 fff1 	bl	80093c4 <W25qxx_EraseSector>
		if (StartSec == EndSec) {
 80073e2:	4b13      	ldr	r3, [pc, #76]	; (8007430 <save_data_packet+0x104>)
 80073e4:	881b      	ldrh	r3, [r3, #0]
 80073e6:	b29a      	uxth	r2, r3
 80073e8:	4b14      	ldr	r3, [pc, #80]	; (800743c <save_data_packet+0x110>)
 80073ea:	881b      	ldrh	r3, [r3, #0]
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d113      	bne.n	800741a <save_data_packet+0xee>
			EndN = 0;
 80073f2:	4b13      	ldr	r3, [pc, #76]	; (8007440 <save_data_packet+0x114>)
 80073f4:	2200      	movs	r2, #0
 80073f6:	801a      	strh	r2, [r3, #0]
			if (EndSec == 1023) {
 80073f8:	4b10      	ldr	r3, [pc, #64]	; (800743c <save_data_packet+0x110>)
 80073fa:	881b      	ldrh	r3, [r3, #0]
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	4a11      	ldr	r2, [pc, #68]	; (8007444 <save_data_packet+0x118>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d103      	bne.n	800740c <save_data_packet+0xe0>
				EndSec = 1;
 8007404:	4b0d      	ldr	r3, [pc, #52]	; (800743c <save_data_packet+0x110>)
 8007406:	2201      	movs	r2, #1
 8007408:	801a      	strh	r2, [r3, #0]
			} else {
				EndSec += 1;
			}
		}
	}
}
 800740a:	e006      	b.n	800741a <save_data_packet+0xee>
				EndSec += 1;
 800740c:	4b0b      	ldr	r3, [pc, #44]	; (800743c <save_data_packet+0x110>)
 800740e:	881b      	ldrh	r3, [r3, #0]
 8007410:	b29b      	uxth	r3, r3
 8007412:	3301      	adds	r3, #1
 8007414:	b29a      	uxth	r2, r3
 8007416:	4b09      	ldr	r3, [pc, #36]	; (800743c <save_data_packet+0x110>)
 8007418:	801a      	strh	r2, [r3, #0]
}
 800741a:	46c0      	nop			; (mov r8, r8)
 800741c:	46bd      	mov	sp, r7
 800741e:	b002      	add	sp, #8
 8007420:	bd80      	pop	{r7, pc}
 8007422:	46c0      	nop			; (mov r8, r8)
 8007424:	2000072a 	.word	0x2000072a
 8007428:	20000a34 	.word	0x20000a34
 800742c:	2000002c 	.word	0x2000002c
 8007430:	20000d18 	.word	0x20000d18
 8007434:	20000d14 	.word	0x20000d14
 8007438:	00000ffa 	.word	0x00000ffa
 800743c:	20000d1a 	.word	0x20000d1a
 8007440:	20000d16 	.word	0x20000d16
 8007444:	000003ff 	.word	0x000003ff

08007448 <read_data_packet>:
uint8_t read_data_packet() {
 8007448:	b580      	push	{r7, lr}
 800744a:	af00      	add	r7, sp, #0
	memset(readPacket, 0, sizeof(readPacket));
 800744c:	4b32      	ldr	r3, [pc, #200]	; (8007518 <read_data_packet+0xd0>)
 800744e:	2220      	movs	r2, #32
 8007450:	2100      	movs	r1, #0
 8007452:	0018      	movs	r0, r3
 8007454:	f007 fcef 	bl	800ee36 <memset>
	if ((EndSec == StartSec) && (EndN == StartN)) {
 8007458:	4b30      	ldr	r3, [pc, #192]	; (800751c <read_data_packet+0xd4>)
 800745a:	881b      	ldrh	r3, [r3, #0]
 800745c:	b29a      	uxth	r2, r3
 800745e:	4b30      	ldr	r3, [pc, #192]	; (8007520 <read_data_packet+0xd8>)
 8007460:	881b      	ldrh	r3, [r3, #0]
 8007462:	b29b      	uxth	r3, r3
 8007464:	429a      	cmp	r2, r3
 8007466:	d122      	bne.n	80074ae <read_data_packet+0x66>
 8007468:	4b2e      	ldr	r3, [pc, #184]	; (8007524 <read_data_packet+0xdc>)
 800746a:	881b      	ldrh	r3, [r3, #0]
 800746c:	b29a      	uxth	r2, r3
 800746e:	4b2e      	ldr	r3, [pc, #184]	; (8007528 <read_data_packet+0xe0>)
 8007470:	881b      	ldrh	r3, [r3, #0]
 8007472:	b29b      	uxth	r3, r3
 8007474:	429a      	cmp	r2, r3
 8007476:	d11a      	bne.n	80074ae <read_data_packet+0x66>
		if (EndN != 0 || EndSec != 1) {
 8007478:	4b2a      	ldr	r3, [pc, #168]	; (8007524 <read_data_packet+0xdc>)
 800747a:	881b      	ldrh	r3, [r3, #0]
 800747c:	b29b      	uxth	r3, r3
 800747e:	2b00      	cmp	r3, #0
 8007480:	d104      	bne.n	800748c <read_data_packet+0x44>
 8007482:	4b26      	ldr	r3, [pc, #152]	; (800751c <read_data_packet+0xd4>)
 8007484:	881b      	ldrh	r3, [r3, #0]
 8007486:	b29b      	uxth	r3, r3
 8007488:	2b01      	cmp	r3, #1
 800748a:	d00e      	beq.n	80074aa <read_data_packet+0x62>
			W25qxx_EraseSector(1);
 800748c:	2001      	movs	r0, #1
 800748e:	f001 ff99 	bl	80093c4 <W25qxx_EraseSector>
			StartN = 0;
 8007492:	4b25      	ldr	r3, [pc, #148]	; (8007528 <read_data_packet+0xe0>)
 8007494:	2200      	movs	r2, #0
 8007496:	801a      	strh	r2, [r3, #0]
			EndN = 0;
 8007498:	4b22      	ldr	r3, [pc, #136]	; (8007524 <read_data_packet+0xdc>)
 800749a:	2200      	movs	r2, #0
 800749c:	801a      	strh	r2, [r3, #0]
			StartSec = 1;
 800749e:	4b20      	ldr	r3, [pc, #128]	; (8007520 <read_data_packet+0xd8>)
 80074a0:	2201      	movs	r2, #1
 80074a2:	801a      	strh	r2, [r3, #0]
			EndSec = 1;
 80074a4:	4b1d      	ldr	r3, [pc, #116]	; (800751c <read_data_packet+0xd4>)
 80074a6:	2201      	movs	r2, #1
 80074a8:	801a      	strh	r2, [r3, #0]
		}
		return 0;
 80074aa:	2300      	movs	r3, #0
 80074ac:	e030      	b.n	8007510 <read_data_packet+0xc8>
	} else {
		W25qxx_ReadSector(readPacket, EndSec, EndN, 32);
 80074ae:	4b1b      	ldr	r3, [pc, #108]	; (800751c <read_data_packet+0xd4>)
 80074b0:	881b      	ldrh	r3, [r3, #0]
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	0019      	movs	r1, r3
 80074b6:	4b1b      	ldr	r3, [pc, #108]	; (8007524 <read_data_packet+0xdc>)
 80074b8:	881b      	ldrh	r3, [r3, #0]
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	001a      	movs	r2, r3
 80074be:	4816      	ldr	r0, [pc, #88]	; (8007518 <read_data_packet+0xd0>)
 80074c0:	2320      	movs	r3, #32
 80074c2:	f002 fa0b 	bl	80098dc <W25qxx_ReadSector>
		//reading data//
		EndN = EndN + 32;
 80074c6:	4b17      	ldr	r3, [pc, #92]	; (8007524 <read_data_packet+0xdc>)
 80074c8:	881b      	ldrh	r3, [r3, #0]
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	3320      	adds	r3, #32
 80074ce:	b29a      	uxth	r2, r3
 80074d0:	4b14      	ldr	r3, [pc, #80]	; (8007524 <read_data_packet+0xdc>)
 80074d2:	801a      	strh	r2, [r3, #0]
		if (EndN > 4090) {
 80074d4:	4b13      	ldr	r3, [pc, #76]	; (8007524 <read_data_packet+0xdc>)
 80074d6:	881b      	ldrh	r3, [r3, #0]
 80074d8:	b29b      	uxth	r3, r3
 80074da:	4a14      	ldr	r2, [pc, #80]	; (800752c <read_data_packet+0xe4>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d916      	bls.n	800750e <read_data_packet+0xc6>
			if (EndSec == 1023) {
 80074e0:	4b0e      	ldr	r3, [pc, #56]	; (800751c <read_data_packet+0xd4>)
 80074e2:	881b      	ldrh	r3, [r3, #0]
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	4a12      	ldr	r2, [pc, #72]	; (8007530 <read_data_packet+0xe8>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d106      	bne.n	80074fa <read_data_packet+0xb2>
				EndSec = 1;
 80074ec:	4b0b      	ldr	r3, [pc, #44]	; (800751c <read_data_packet+0xd4>)
 80074ee:	2201      	movs	r2, #1
 80074f0:	801a      	strh	r2, [r3, #0]
				EndN = 0;
 80074f2:	4b0c      	ldr	r3, [pc, #48]	; (8007524 <read_data_packet+0xdc>)
 80074f4:	2200      	movs	r2, #0
 80074f6:	801a      	strh	r2, [r3, #0]
 80074f8:	e009      	b.n	800750e <read_data_packet+0xc6>
			} else {
				EndSec = EndSec + 1;
 80074fa:	4b08      	ldr	r3, [pc, #32]	; (800751c <read_data_packet+0xd4>)
 80074fc:	881b      	ldrh	r3, [r3, #0]
 80074fe:	b29b      	uxth	r3, r3
 8007500:	3301      	adds	r3, #1
 8007502:	b29a      	uxth	r2, r3
 8007504:	4b05      	ldr	r3, [pc, #20]	; (800751c <read_data_packet+0xd4>)
 8007506:	801a      	strh	r2, [r3, #0]
				EndN = 0;
 8007508:	4b06      	ldr	r3, [pc, #24]	; (8007524 <read_data_packet+0xdc>)
 800750a:	2200      	movs	r2, #0
 800750c:	801a      	strh	r2, [r3, #0]
			}
		}
		return 1;
 800750e:	2301      	movs	r3, #1
	}
}
 8007510:	0018      	movs	r0, r3
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}
 8007516:	46c0      	nop			; (mov r8, r8)
 8007518:	20000a54 	.word	0x20000a54
 800751c:	20000d1a 	.word	0x20000d1a
 8007520:	20000d18 	.word	0x20000d18
 8007524:	20000d16 	.word	0x20000d16
 8007528:	20000d14 	.word	0x20000d14
 800752c:	00000ffa 	.word	0x00000ffa
 8007530:	000003ff 	.word	0x000003ff

08007534 <create_status_info>:


void create_status_info(){
 8007534:	b580      	push	{r7, lr}
 8007536:	b084      	sub	sp, #16
 8007538:	af02      	add	r7, sp, #8

	//----------get voltage of vbatt-----------------
	send_command("+++", 10, 1, 0, 0);
 800753a:	486a      	ldr	r0, [pc, #424]	; (80076e4 <create_status_info+0x1b0>)
 800753c:	2300      	movs	r3, #0
 800753e:	9300      	str	r3, [sp, #0]
 8007540:	2300      	movs	r3, #0
 8007542:	2201      	movs	r2, #1
 8007544:	210a      	movs	r1, #10
 8007546:	f7ff f9a1 	bl	800688c <send_command>
	isDataMode = 0;
 800754a:	4b67      	ldr	r3, [pc, #412]	; (80076e8 <create_status_info+0x1b4>)
 800754c:	2200      	movs	r2, #0
 800754e:	701a      	strb	r2, [r3, #0]
	send_command("AT+CBC\r\n", 4, 8, 3, 1);
 8007550:	4866      	ldr	r0, [pc, #408]	; (80076ec <create_status_info+0x1b8>)
 8007552:	2301      	movs	r3, #1
 8007554:	9300      	str	r3, [sp, #0]
 8007556:	2303      	movs	r3, #3
 8007558:	2208      	movs	r2, #8
 800755a:	2104      	movs	r1, #4
 800755c:	f7ff f996 	bl	800688c <send_command>
	//HAL_UART_Transmit(&huart4, "S msg del", sizeof("S msg del"), 100);
	send_command("AT+QMGDA=\"DEL ALL\"\r\n", 50, 1, 0, 0);
 8007560:	4863      	ldr	r0, [pc, #396]	; (80076f0 <create_status_info+0x1bc>)
 8007562:	2300      	movs	r3, #0
 8007564:	9300      	str	r3, [sp, #0]
 8007566:	2300      	movs	r3, #0
 8007568:	2201      	movs	r2, #1
 800756a:	2132      	movs	r1, #50	; 0x32
 800756c:	f7ff f98e 	bl	800688c <send_command>
	send_command("ATO\r\n", 10, 6, 0, 0);
 8007570:	4860      	ldr	r0, [pc, #384]	; (80076f4 <create_status_info+0x1c0>)
 8007572:	2300      	movs	r3, #0
 8007574:	9300      	str	r3, [sp, #0]
 8007576:	2300      	movs	r3, #0
 8007578:	2206      	movs	r2, #6
 800757a:	210a      	movs	r1, #10
 800757c:	f7ff f986 	bl	800688c <send_command>
	if (isResponseOk == 1) {
 8007580:	4b5d      	ldr	r3, [pc, #372]	; (80076f8 <create_status_info+0x1c4>)
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	b2db      	uxtb	r3, r3
 8007586:	2b01      	cmp	r3, #1
 8007588:	d103      	bne.n	8007592 <create_status_info+0x5e>
		isDataMode = 1;
 800758a:	4b57      	ldr	r3, [pc, #348]	; (80076e8 <create_status_info+0x1b4>)
 800758c:	2201      	movs	r2, #1
 800758e:	701a      	strb	r2, [r3, #0]
 8007590:	e008      	b.n	80075a4 <create_status_info+0x70>
		// HAL_UART_Transmit(&huart4, "conn resum",
		// sizeof("conn resum"), 100);
	} else {
		isLoggedIn = 0;
 8007592:	4b5a      	ldr	r3, [pc, #360]	; (80076fc <create_status_info+0x1c8>)
 8007594:	2200      	movs	r2, #0
 8007596:	701a      	strb	r2, [r3, #0]
		isDataMode = 0;
 8007598:	4b53      	ldr	r3, [pc, #332]	; (80076e8 <create_status_info+0x1b4>)
 800759a:	2200      	movs	r2, #0
 800759c:	701a      	strb	r2, [r3, #0]
		isTcpOpen = 0;
 800759e:	4b58      	ldr	r3, [pc, #352]	; (8007700 <create_status_info+0x1cc>)
 80075a0:	2200      	movs	r2, #0
 80075a2:	701a      	strb	r2, [r3, #0]
	}
	//-----------------------------------------------

	uint8_t SigStre = 20;
 80075a4:	1dfb      	adds	r3, r7, #7
 80075a6:	2214      	movs	r2, #20
 80075a8:	701a      	strb	r2, [r3, #0]
		TermInfo = TermInfo | 0x80;
	}
	//if gps tracking is on

	if (1) {
		TermInfo = TermInfo | 0x40;
 80075aa:	4b56      	ldr	r3, [pc, #344]	; (8007704 <create_status_info+0x1d0>)
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	2240      	movs	r2, #64	; 0x40
 80075b0:	4313      	orrs	r3, r2
 80075b2:	b2da      	uxtb	r2, r3
 80075b4:	4b53      	ldr	r3, [pc, #332]	; (8007704 <create_status_info+0x1d0>)
 80075b6:	701a      	strb	r2, [r3, #0]
	}
	//if SOS is on

	if (1) {
		TermInfo = TermInfo | 0x20;
 80075b8:	4b52      	ldr	r3, [pc, #328]	; (8007704 <create_status_info+0x1d0>)
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	2220      	movs	r2, #32
 80075be:	4313      	orrs	r3, r2
 80075c0:	b2da      	uxtb	r2, r3
 80075c2:	4b50      	ldr	r3, [pc, #320]	; (8007704 <create_status_info+0x1d0>)
 80075c4:	701a      	strb	r2, [r3, #0]
	}
	//if Low batt alarm is on

	if (1) {
		TermInfo = TermInfo | 0x18;
 80075c6:	4b4f      	ldr	r3, [pc, #316]	; (8007704 <create_status_info+0x1d0>)
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	2218      	movs	r2, #24
 80075cc:	4313      	orrs	r3, r2
 80075ce:	b2da      	uxtb	r2, r3
 80075d0:	4b4c      	ldr	r3, [pc, #304]	; (8007704 <create_status_info+0x1d0>)
 80075d2:	701a      	strb	r2, [r3, #0]
	}
	//if Power Cut alarm is on

	if (1) {
		TermInfo = TermInfo | 0x10;
 80075d4:	4b4b      	ldr	r3, [pc, #300]	; (8007704 <create_status_info+0x1d0>)
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	2210      	movs	r2, #16
 80075da:	4313      	orrs	r3, r2
 80075dc:	b2da      	uxtb	r2, r3
 80075de:	4b49      	ldr	r3, [pc, #292]	; (8007704 <create_status_info+0x1d0>)
 80075e0:	701a      	strb	r2, [r3, #0]
	}
	//if shock alarm is on
	if (1) {
		TermInfo = TermInfo | 0x8;
 80075e2:	4b48      	ldr	r3, [pc, #288]	; (8007704 <create_status_info+0x1d0>)
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	2208      	movs	r2, #8
 80075e8:	4313      	orrs	r3, r2
 80075ea:	b2da      	uxtb	r2, r3
 80075ec:	4b45      	ldr	r3, [pc, #276]	; (8007704 <create_status_info+0x1d0>)
 80075ee:	701a      	strb	r2, [r3, #0]
	}
	// 000 means normal
	//if charge is on
	if (1) {
		TermInfo = TermInfo | 0x4;
 80075f0:	4b44      	ldr	r3, [pc, #272]	; (8007704 <create_status_info+0x1d0>)
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	2204      	movs	r2, #4
 80075f6:	4313      	orrs	r3, r2
 80075f8:	b2da      	uxtb	r2, r3
 80075fa:	4b42      	ldr	r3, [pc, #264]	; (8007704 <create_status_info+0x1d0>)
 80075fc:	701a      	strb	r2, [r3, #0]
	}
	//if ACC is on
	if (accInputState) {
 80075fe:	4b42      	ldr	r3, [pc, #264]	; (8007708 <create_status_info+0x1d4>)
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	b2db      	uxtb	r3, r3
 8007604:	2b00      	cmp	r3, #0
 8007606:	d006      	beq.n	8007616 <create_status_info+0xe2>
		TermInfo = TermInfo | 0x2;
 8007608:	4b3e      	ldr	r3, [pc, #248]	; (8007704 <create_status_info+0x1d0>)
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	2202      	movs	r2, #2
 800760e:	4313      	orrs	r3, r2
 8007610:	b2da      	uxtb	r2, r3
 8007612:	4b3c      	ldr	r3, [pc, #240]	; (8007704 <create_status_info+0x1d0>)
 8007614:	701a      	strb	r2, [r3, #0]
	}
	//if Activated
	if (1) {
		TermInfo = TermInfo | 0x1;
 8007616:	4b3b      	ldr	r3, [pc, #236]	; (8007704 <create_status_info+0x1d0>)
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	2201      	movs	r2, #1
 800761c:	4313      	orrs	r3, r2
 800761e:	b2da      	uxtb	r2, r3
 8007620:	4b38      	ldr	r3, [pc, #224]	; (8007704 <create_status_info+0x1d0>)
 8007622:	701a      	strb	r2, [r3, #0]
	}
	if (voltage > 4110) {
 8007624:	4b39      	ldr	r3, [pc, #228]	; (800770c <create_status_info+0x1d8>)
 8007626:	881b      	ldrh	r3, [r3, #0]
 8007628:	4a39      	ldr	r2, [pc, #228]	; (8007710 <create_status_info+0x1dc>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d903      	bls.n	8007636 <create_status_info+0x102>
		VLvl = 6;
 800762e:	4b39      	ldr	r3, [pc, #228]	; (8007714 <create_status_info+0x1e0>)
 8007630:	2206      	movs	r2, #6
 8007632:	701a      	strb	r2, [r3, #0]
 8007634:	e02f      	b.n	8007696 <create_status_info+0x162>
	} else if (voltage > 4030) {
 8007636:	4b35      	ldr	r3, [pc, #212]	; (800770c <create_status_info+0x1d8>)
 8007638:	881b      	ldrh	r3, [r3, #0]
 800763a:	4a37      	ldr	r2, [pc, #220]	; (8007718 <create_status_info+0x1e4>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d903      	bls.n	8007648 <create_status_info+0x114>
		VLvl = 5;
 8007640:	4b34      	ldr	r3, [pc, #208]	; (8007714 <create_status_info+0x1e0>)
 8007642:	2205      	movs	r2, #5
 8007644:	701a      	strb	r2, [r3, #0]
 8007646:	e026      	b.n	8007696 <create_status_info+0x162>

	} else if (voltage > 3950) {
 8007648:	4b30      	ldr	r3, [pc, #192]	; (800770c <create_status_info+0x1d8>)
 800764a:	881b      	ldrh	r3, [r3, #0]
 800764c:	4a33      	ldr	r2, [pc, #204]	; (800771c <create_status_info+0x1e8>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d903      	bls.n	800765a <create_status_info+0x126>
		VLvl = 4;
 8007652:	4b30      	ldr	r3, [pc, #192]	; (8007714 <create_status_info+0x1e0>)
 8007654:	2204      	movs	r2, #4
 8007656:	701a      	strb	r2, [r3, #0]
 8007658:	e01d      	b.n	8007696 <create_status_info+0x162>

	} else if (voltage > 3870) {
 800765a:	4b2c      	ldr	r3, [pc, #176]	; (800770c <create_status_info+0x1d8>)
 800765c:	881b      	ldrh	r3, [r3, #0]
 800765e:	4a30      	ldr	r2, [pc, #192]	; (8007720 <create_status_info+0x1ec>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d903      	bls.n	800766c <create_status_info+0x138>
		VLvl = 3;
 8007664:	4b2b      	ldr	r3, [pc, #172]	; (8007714 <create_status_info+0x1e0>)
 8007666:	2203      	movs	r2, #3
 8007668:	701a      	strb	r2, [r3, #0]
 800766a:	e014      	b.n	8007696 <create_status_info+0x162>

	} else if (voltage > 3790) {
 800766c:	4b27      	ldr	r3, [pc, #156]	; (800770c <create_status_info+0x1d8>)
 800766e:	881b      	ldrh	r3, [r3, #0]
 8007670:	4a2c      	ldr	r2, [pc, #176]	; (8007724 <create_status_info+0x1f0>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d903      	bls.n	800767e <create_status_info+0x14a>
		VLvl = 2;
 8007676:	4b27      	ldr	r3, [pc, #156]	; (8007714 <create_status_info+0x1e0>)
 8007678:	2202      	movs	r2, #2
 800767a:	701a      	strb	r2, [r3, #0]
 800767c:	e00b      	b.n	8007696 <create_status_info+0x162>

	} else if (voltage > 3710) {
 800767e:	4b23      	ldr	r3, [pc, #140]	; (800770c <create_status_info+0x1d8>)
 8007680:	881b      	ldrh	r3, [r3, #0]
 8007682:	4a29      	ldr	r2, [pc, #164]	; (8007728 <create_status_info+0x1f4>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d903      	bls.n	8007690 <create_status_info+0x15c>
		VLvl = 1;
 8007688:	4b22      	ldr	r3, [pc, #136]	; (8007714 <create_status_info+0x1e0>)
 800768a:	2201      	movs	r2, #1
 800768c:	701a      	strb	r2, [r3, #0]
 800768e:	e002      	b.n	8007696 <create_status_info+0x162>

	} else {
		VLvl = 0;
 8007690:	4b20      	ldr	r3, [pc, #128]	; (8007714 <create_status_info+0x1e0>)
 8007692:	2200      	movs	r2, #0
 8007694:	701a      	strb	r2, [r3, #0]

	}
	if (SigStre > 19) {
 8007696:	1dfb      	adds	r3, r7, #7
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	2b13      	cmp	r3, #19
 800769c:	d903      	bls.n	80076a6 <create_status_info+0x172>
		GSMSS = 4;
 800769e:	4b23      	ldr	r3, [pc, #140]	; (800772c <create_status_info+0x1f8>)
 80076a0:	2204      	movs	r2, #4
 80076a2:	701a      	strb	r2, [r3, #0]
		GSMSS = 1;
	} else {
		GSMSS = 0;
	}

}
 80076a4:	e01a      	b.n	80076dc <create_status_info+0x1a8>
	} else if (SigStre > 14) {
 80076a6:	1dfb      	adds	r3, r7, #7
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	2b0e      	cmp	r3, #14
 80076ac:	d903      	bls.n	80076b6 <create_status_info+0x182>
		GSMSS = 3;
 80076ae:	4b1f      	ldr	r3, [pc, #124]	; (800772c <create_status_info+0x1f8>)
 80076b0:	2203      	movs	r2, #3
 80076b2:	701a      	strb	r2, [r3, #0]
}
 80076b4:	e012      	b.n	80076dc <create_status_info+0x1a8>
	} else if (SigStre > 9) {
 80076b6:	1dfb      	adds	r3, r7, #7
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	2b09      	cmp	r3, #9
 80076bc:	d903      	bls.n	80076c6 <create_status_info+0x192>
		GSMSS = 2;
 80076be:	4b1b      	ldr	r3, [pc, #108]	; (800772c <create_status_info+0x1f8>)
 80076c0:	2202      	movs	r2, #2
 80076c2:	701a      	strb	r2, [r3, #0]
}
 80076c4:	e00a      	b.n	80076dc <create_status_info+0x1a8>
	} else if (SigStre > 1) {
 80076c6:	1dfb      	adds	r3, r7, #7
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d903      	bls.n	80076d6 <create_status_info+0x1a2>
		GSMSS = 1;
 80076ce:	4b17      	ldr	r3, [pc, #92]	; (800772c <create_status_info+0x1f8>)
 80076d0:	2201      	movs	r2, #1
 80076d2:	701a      	strb	r2, [r3, #0]
}
 80076d4:	e002      	b.n	80076dc <create_status_info+0x1a8>
		GSMSS = 0;
 80076d6:	4b15      	ldr	r3, [pc, #84]	; (800772c <create_status_info+0x1f8>)
 80076d8:	2200      	movs	r2, #0
 80076da:	701a      	strb	r2, [r3, #0]
}
 80076dc:	46c0      	nop			; (mov r8, r8)
 80076de:	46bd      	mov	sp, r7
 80076e0:	b002      	add	sp, #8
 80076e2:	bd80      	pop	{r7, pc}
 80076e4:	0801344c 	.word	0x0801344c
 80076e8:	2000087a 	.word	0x2000087a
 80076ec:	080133f4 	.word	0x080133f4
 80076f0:	08013434 	.word	0x08013434
 80076f4:	080134d0 	.word	0x080134d0
 80076f8:	20000880 	.word	0x20000880
 80076fc:	20000a30 	.word	0x20000a30
 8007700:	20000a2c 	.word	0x20000a2c
 8007704:	2000072b 	.word	0x2000072b
 8007708:	20000726 	.word	0x20000726
 800770c:	20000002 	.word	0x20000002
 8007710:	0000100e 	.word	0x0000100e
 8007714:	2000072d 	.word	0x2000072d
 8007718:	00000fbe 	.word	0x00000fbe
 800771c:	00000f6e 	.word	0x00000f6e
 8007720:	00000f1e 	.word	0x00000f1e
 8007724:	00000ece 	.word	0x00000ece
 8007728:	00000e7e 	.word	0x00000e7e
 800772c:	2000072c 	.word	0x2000072c

08007730 <send_hb_packet>:

void send_hb_packet() {
 8007730:	b5b0      	push	{r4, r5, r7, lr}
 8007732:	b086      	sub	sp, #24
 8007734:	af00      	add	r7, sp, #0
	if (isTcpOpen == 1 && isDataMode == 1) {
 8007736:	4b37      	ldr	r3, [pc, #220]	; (8007814 <send_hb_packet+0xe4>)
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	b2db      	uxtb	r3, r3
 800773c:	2b01      	cmp	r3, #1
 800773e:	d164      	bne.n	800780a <send_hb_packet+0xda>
 8007740:	4b35      	ldr	r3, [pc, #212]	; (8007818 <send_hb_packet+0xe8>)
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	b2db      	uxtb	r3, r3
 8007746:	2b01      	cmp	r3, #1
 8007748:	d15f      	bne.n	800780a <send_hb_packet+0xda>

		create_status_info();
 800774a:	f7ff fef3 	bl	8007534 <create_status_info>
		heartbeatPacket[4] = TermInfo;
 800774e:	4b33      	ldr	r3, [pc, #204]	; (800781c <send_hb_packet+0xec>)
 8007750:	781a      	ldrb	r2, [r3, #0]
 8007752:	4b33      	ldr	r3, [pc, #204]	; (8007820 <send_hb_packet+0xf0>)
 8007754:	711a      	strb	r2, [r3, #4]
		heartbeatPacket[5] = VLvl;
 8007756:	4b33      	ldr	r3, [pc, #204]	; (8007824 <send_hb_packet+0xf4>)
 8007758:	781a      	ldrb	r2, [r3, #0]
 800775a:	4b31      	ldr	r3, [pc, #196]	; (8007820 <send_hb_packet+0xf0>)
 800775c:	715a      	strb	r2, [r3, #5]
		heartbeatPacket[6] = GSMSS;
 800775e:	4b32      	ldr	r3, [pc, #200]	; (8007828 <send_hb_packet+0xf8>)
 8007760:	781a      	ldrb	r2, [r3, #0]
 8007762:	4b2f      	ldr	r3, [pc, #188]	; (8007820 <send_hb_packet+0xf0>)
 8007764:	719a      	strb	r2, [r3, #6]
		heartbeatPacket[7] = 0;
 8007766:	4b2e      	ldr	r3, [pc, #184]	; (8007820 <send_hb_packet+0xf0>)
 8007768:	2200      	movs	r2, #0
 800776a:	71da      	strb	r2, [r3, #7]
		heartbeatPacket[8] = 2;
 800776c:	4b2c      	ldr	r3, [pc, #176]	; (8007820 <send_hb_packet+0xf0>)
 800776e:	2202      	movs	r2, #2
 8007770:	721a      	strb	r2, [r3, #8]
		heartbeatPacket[9] = infoSNo >> 8;
 8007772:	4b2e      	ldr	r3, [pc, #184]	; (800782c <send_hb_packet+0xfc>)
 8007774:	881b      	ldrh	r3, [r3, #0]
 8007776:	0a1b      	lsrs	r3, r3, #8
 8007778:	b29b      	uxth	r3, r3
 800777a:	b2da      	uxtb	r2, r3
 800777c:	4b28      	ldr	r3, [pc, #160]	; (8007820 <send_hb_packet+0xf0>)
 800777e:	725a      	strb	r2, [r3, #9]
		heartbeatPacket[10] = infoSNo;
 8007780:	4b2a      	ldr	r3, [pc, #168]	; (800782c <send_hb_packet+0xfc>)
 8007782:	881b      	ldrh	r3, [r3, #0]
 8007784:	b2da      	uxtb	r2, r3
 8007786:	4b26      	ldr	r3, [pc, #152]	; (8007820 <send_hb_packet+0xf0>)
 8007788:	729a      	strb	r2, [r3, #10]

		uint8_t tempCrcData[9];
		for (uint8_t i = 0; i < 10; i++) {
 800778a:	2317      	movs	r3, #23
 800778c:	18fb      	adds	r3, r7, r3
 800778e:	2200      	movs	r2, #0
 8007790:	701a      	strb	r2, [r3, #0]
 8007792:	e00e      	b.n	80077b2 <send_hb_packet+0x82>
			tempCrcData[i] = heartbeatPacket[i + 2];
 8007794:	2017      	movs	r0, #23
 8007796:	183b      	adds	r3, r7, r0
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	1c9a      	adds	r2, r3, #2
 800779c:	183b      	adds	r3, r7, r0
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	491f      	ldr	r1, [pc, #124]	; (8007820 <send_hb_packet+0xf0>)
 80077a2:	5c89      	ldrb	r1, [r1, r2]
 80077a4:	1d3a      	adds	r2, r7, #4
 80077a6:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 10; i++) {
 80077a8:	183b      	adds	r3, r7, r0
 80077aa:	781a      	ldrb	r2, [r3, #0]
 80077ac:	183b      	adds	r3, r7, r0
 80077ae:	3201      	adds	r2, #1
 80077b0:	701a      	strb	r2, [r3, #0]
 80077b2:	2317      	movs	r3, #23
 80077b4:	18fb      	adds	r3, r7, r3
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	2b09      	cmp	r3, #9
 80077ba:	d9eb      	bls.n	8007794 <send_hb_packet+0x64>
		}
		uint8_t *tempPtr = tempCrcData;
 80077bc:	1d3b      	adds	r3, r7, #4
 80077be:	613b      	str	r3, [r7, #16]
		uint16_t crcResult = 0;
 80077c0:	250e      	movs	r5, #14
 80077c2:	197b      	adds	r3, r7, r5
 80077c4:	2200      	movs	r2, #0
 80077c6:	801a      	strh	r2, [r3, #0]
		crcResult = GetCrc16(tempPtr,
 80077c8:	197c      	adds	r4, r7, r5
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	2109      	movs	r1, #9
 80077ce:	0018      	movs	r0, r3
 80077d0:	f7ff fa2e 	bl	8006c30 <GetCrc16>
 80077d4:	0003      	movs	r3, r0
 80077d6:	8023      	strh	r3, [r4, #0]
				sizeof(tempCrcData) / sizeof(tempCrcData[0]));
		heartbeatPacket[11] = crcResult >> 8;
 80077d8:	0029      	movs	r1, r5
 80077da:	187b      	adds	r3, r7, r1
 80077dc:	881b      	ldrh	r3, [r3, #0]
 80077de:	0a1b      	lsrs	r3, r3, #8
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	b2da      	uxtb	r2, r3
 80077e4:	4b0e      	ldr	r3, [pc, #56]	; (8007820 <send_hb_packet+0xf0>)
 80077e6:	72da      	strb	r2, [r3, #11]
		heartbeatPacket[12] = crcResult;
 80077e8:	187b      	adds	r3, r7, r1
 80077ea:	881b      	ldrh	r3, [r3, #0]
 80077ec:	b2da      	uxtb	r2, r3
 80077ee:	4b0c      	ldr	r3, [pc, #48]	; (8007820 <send_hb_packet+0xf0>)
 80077f0:	731a      	strb	r2, [r3, #12]
		HAL_UART_Transmit(&AT_PORT, heartbeatPacket, 15, 100);
 80077f2:	490b      	ldr	r1, [pc, #44]	; (8007820 <send_hb_packet+0xf0>)
 80077f4:	480e      	ldr	r0, [pc, #56]	; (8007830 <send_hb_packet+0x100>)
 80077f6:	2364      	movs	r3, #100	; 0x64
 80077f8:	220f      	movs	r2, #15
 80077fa:	f005 fbc1 	bl	800cf80 <HAL_UART_Transmit>
		infoSNo++;
 80077fe:	4b0b      	ldr	r3, [pc, #44]	; (800782c <send_hb_packet+0xfc>)
 8007800:	881b      	ldrh	r3, [r3, #0]
 8007802:	3301      	adds	r3, #1
 8007804:	b29a      	uxth	r2, r3
 8007806:	4b09      	ldr	r3, [pc, #36]	; (800782c <send_hb_packet+0xfc>)
 8007808:	801a      	strh	r2, [r3, #0]

	}
}
 800780a:	46c0      	nop			; (mov r8, r8)
 800780c:	46bd      	mov	sp, r7
 800780e:	b006      	add	sp, #24
 8007810:	bdb0      	pop	{r4, r5, r7, pc}
 8007812:	46c0      	nop			; (mov r8, r8)
 8007814:	20000a2c 	.word	0x20000a2c
 8007818:	2000087a 	.word	0x2000087a
 800781c:	2000072b 	.word	0x2000072b
 8007820:	200000c8 	.word	0x200000c8
 8007824:	2000072d 	.word	0x2000072d
 8007828:	2000072c 	.word	0x2000072c
 800782c:	2000006c 	.word	0x2000006c
 8007830:	200004c8 	.word	0x200004c8

08007834 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8007834:	b580      	push	{r7, lr}
 8007836:	b082      	sub	sp, #8
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]

	if(isDataMode == 1){
 800783c:	4b26      	ldr	r3, [pc, #152]	; (80078d8 <HAL_TIM_IC_CaptureCallback+0xa4>)
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	b2db      	uxtb	r3, r3
 8007842:	2b01      	cmp	r3, #1
 8007844:	d144      	bne.n	80078d0 <HAL_TIM_IC_CaptureCallback+0x9c>
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	7f1b      	ldrb	r3, [r3, #28]
 800784a:	2b01      	cmp	r3, #1
 800784c:	d140      	bne.n	80078d0 <HAL_TIM_IC_CaptureCallback+0x9c>
			currentValueIC = TIM3->CNT;
 800784e:	4b23      	ldr	r3, [pc, #140]	; (80078dc <HAL_TIM_IC_CaptureCallback+0xa8>)
 8007850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007852:	b29a      	uxth	r2, r3
 8007854:	4b22      	ldr	r3, [pc, #136]	; (80078e0 <HAL_TIM_IC_CaptureCallback+0xac>)
 8007856:	801a      	strh	r2, [r3, #0]

			if(currentValueIC>lastValueIC){
 8007858:	4b21      	ldr	r3, [pc, #132]	; (80078e0 <HAL_TIM_IC_CaptureCallback+0xac>)
 800785a:	881b      	ldrh	r3, [r3, #0]
 800785c:	b29a      	uxth	r2, r3
 800785e:	4b21      	ldr	r3, [pc, #132]	; (80078e4 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8007860:	881b      	ldrh	r3, [r3, #0]
 8007862:	b29b      	uxth	r3, r3
 8007864:	429a      	cmp	r2, r3
 8007866:	d90a      	bls.n	800787e <HAL_TIM_IC_CaptureCallback+0x4a>
				diff = currentValueIC - lastValueIC;
 8007868:	4b1d      	ldr	r3, [pc, #116]	; (80078e0 <HAL_TIM_IC_CaptureCallback+0xac>)
 800786a:	881b      	ldrh	r3, [r3, #0]
 800786c:	b29a      	uxth	r2, r3
 800786e:	4b1d      	ldr	r3, [pc, #116]	; (80078e4 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8007870:	881b      	ldrh	r3, [r3, #0]
 8007872:	b29b      	uxth	r3, r3
 8007874:	1ad3      	subs	r3, r2, r3
 8007876:	b29a      	uxth	r2, r3
 8007878:	4b1b      	ldr	r3, [pc, #108]	; (80078e8 <HAL_TIM_IC_CaptureCallback+0xb4>)
 800787a:	801a      	strh	r2, [r3, #0]
 800787c:	e016      	b.n	80078ac <HAL_TIM_IC_CaptureCallback+0x78>
			}
			else if(currentValueIC < lastValueIC)
 800787e:	4b18      	ldr	r3, [pc, #96]	; (80078e0 <HAL_TIM_IC_CaptureCallback+0xac>)
 8007880:	881b      	ldrh	r3, [r3, #0]
 8007882:	b29a      	uxth	r2, r3
 8007884:	4b17      	ldr	r3, [pc, #92]	; (80078e4 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8007886:	881b      	ldrh	r3, [r3, #0]
 8007888:	b29b      	uxth	r3, r3
 800788a:	429a      	cmp	r2, r3
 800788c:	d20e      	bcs.n	80078ac <HAL_TIM_IC_CaptureCallback+0x78>
			{
				diff = (1000 - lastValueIC) + currentValueIC;
 800788e:	4b14      	ldr	r3, [pc, #80]	; (80078e0 <HAL_TIM_IC_CaptureCallback+0xac>)
 8007890:	881b      	ldrh	r3, [r3, #0]
 8007892:	b29a      	uxth	r2, r3
 8007894:	4b13      	ldr	r3, [pc, #76]	; (80078e4 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8007896:	881b      	ldrh	r3, [r3, #0]
 8007898:	b29b      	uxth	r3, r3
 800789a:	1ad3      	subs	r3, r2, r3
 800789c:	b29b      	uxth	r3, r3
 800789e:	22fa      	movs	r2, #250	; 0xfa
 80078a0:	0092      	lsls	r2, r2, #2
 80078a2:	4694      	mov	ip, r2
 80078a4:	4463      	add	r3, ip
 80078a6:	b29a      	uxth	r2, r3
 80078a8:	4b0f      	ldr	r3, [pc, #60]	; (80078e8 <HAL_TIM_IC_CaptureCallback+0xb4>)
 80078aa:	801a      	strh	r2, [r3, #0]
			}
			if(diff > 100 && diff < 145){
 80078ac:	4b0e      	ldr	r3, [pc, #56]	; (80078e8 <HAL_TIM_IC_CaptureCallback+0xb4>)
 80078ae:	881b      	ldrh	r3, [r3, #0]
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	2b64      	cmp	r3, #100	; 0x64
 80078b4:	d907      	bls.n	80078c6 <HAL_TIM_IC_CaptureCallback+0x92>
 80078b6:	4b0c      	ldr	r3, [pc, #48]	; (80078e8 <HAL_TIM_IC_CaptureCallback+0xb4>)
 80078b8:	881b      	ldrh	r3, [r3, #0]
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	2b90      	cmp	r3, #144	; 0x90
 80078be:	d802      	bhi.n	80078c6 <HAL_TIM_IC_CaptureCallback+0x92>
				isPulse = 1;
 80078c0:	4b0a      	ldr	r3, [pc, #40]	; (80078ec <HAL_TIM_IC_CaptureCallback+0xb8>)
 80078c2:	2201      	movs	r2, #1
 80078c4:	701a      	strb	r2, [r3, #0]
			}
			lastValueIC = currentValueIC;
 80078c6:	4b06      	ldr	r3, [pc, #24]	; (80078e0 <HAL_TIM_IC_CaptureCallback+0xac>)
 80078c8:	881b      	ldrh	r3, [r3, #0]
 80078ca:	b29a      	uxth	r2, r3
 80078cc:	4b05      	ldr	r3, [pc, #20]	; (80078e4 <HAL_TIM_IC_CaptureCallback+0xb0>)
 80078ce:	801a      	strh	r2, [r3, #0]
		}
	}

}
 80078d0:	46c0      	nop			; (mov r8, r8)
 80078d2:	46bd      	mov	sp, r7
 80078d4:	b002      	add	sp, #8
 80078d6:	bd80      	pop	{r7, pc}
 80078d8:	2000087a 	.word	0x2000087a
 80078dc:	40000400 	.word	0x40000400
 80078e0:	2000071a 	.word	0x2000071a
 80078e4:	20000718 	.word	0x20000718
 80078e8:	2000071c 	.word	0x2000071c
 80078ec:	2000073d 	.word	0x2000073d

080078f0 <substring>:

char* substring(char *destination, const char *source, uint8_t beg, uint8_t n) {
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	60b9      	str	r1, [r7, #8]
 80078fa:	0019      	movs	r1, r3
 80078fc:	1dfb      	adds	r3, r7, #7
 80078fe:	701a      	strb	r2, [r3, #0]
 8007900:	1dbb      	adds	r3, r7, #6
 8007902:	1c0a      	adds	r2, r1, #0
 8007904:	701a      	strb	r2, [r3, #0]
	// extracts `n` characters from the source string starting from `beg` index
	// and copy them into the destination string
	while (n > 0) {
 8007906:	e011      	b.n	800792c <substring+0x3c>
		*destination = *(source + beg);
 8007908:	1dfb      	adds	r3, r7, #7
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	68ba      	ldr	r2, [r7, #8]
 800790e:	18d3      	adds	r3, r2, r3
 8007910:	781a      	ldrb	r2, [r3, #0]
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	701a      	strb	r2, [r3, #0]
		destination++;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	3301      	adds	r3, #1
 800791a:	60fb      	str	r3, [r7, #12]
		source++;
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	3301      	adds	r3, #1
 8007920:	60bb      	str	r3, [r7, #8]
		n--;
 8007922:	1dbb      	adds	r3, r7, #6
 8007924:	781a      	ldrb	r2, [r3, #0]
 8007926:	1dbb      	adds	r3, r7, #6
 8007928:	3a01      	subs	r2, #1
 800792a:	701a      	strb	r2, [r3, #0]
	while (n > 0) {
 800792c:	1dbb      	adds	r3, r7, #6
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d1e9      	bne.n	8007908 <substring+0x18>
	}

	// null terminate destination string
	*destination = '\0';
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2200      	movs	r2, #0
 8007938:	701a      	strb	r2, [r3, #0]

	// return the destination string
	return destination;
 800793a:	68fb      	ldr	r3, [r7, #12]
}
 800793c:	0018      	movs	r0, r3
 800793e:	46bd      	mov	sp, r7
 8007940:	b004      	add	sp, #16
 8007942:	bd80      	pop	{r7, pc}

08007944 <send_imei_via_sms>:

void send_imei_via_sms() {
 8007944:	b580      	push	{r7, lr}
 8007946:	b0a8      	sub	sp, #160	; 0xa0
 8007948:	af02      	add	r7, sp, #8
	if (isNumValid == 1) {
 800794a:	4b33      	ldr	r3, [pc, #204]	; (8007a18 <send_imei_via_sms+0xd4>)
 800794c:	781b      	ldrb	r3, [r3, #0]
 800794e:	2b01      	cmp	r3, #1
 8007950:	d15d      	bne.n	8007a0e <send_imei_via_sms+0xca>
		//printf("sending message(current location)\n");
		// send_command("AT+CMGS=\"3352093997\"\n\r", 10, 6, 0, 0);
		char tempMsg[150];
		memset(tempMsg, 0, sizeof(tempMsg));
 8007952:	003b      	movs	r3, r7
 8007954:	2296      	movs	r2, #150	; 0x96
 8007956:	2100      	movs	r1, #0
 8007958:	0018      	movs	r0, r3
 800795a:	f007 fa6c 	bl	800ee36 <memset>
		strcat(tempMsg,"AT+CMGS=\"");
 800795e:	003b      	movs	r3, r7
 8007960:	0018      	movs	r0, r3
 8007962:	f7f8 fbd7 	bl	8000114 <strlen>
 8007966:	0003      	movs	r3, r0
 8007968:	001a      	movs	r2, r3
 800796a:	003b      	movs	r3, r7
 800796c:	189a      	adds	r2, r3, r2
 800796e:	4b2b      	ldr	r3, [pc, #172]	; (8007a1c <send_imei_via_sms+0xd8>)
 8007970:	0010      	movs	r0, r2
 8007972:	0019      	movs	r1, r3
 8007974:	230a      	movs	r3, #10
 8007976:	001a      	movs	r2, r3
 8007978:	f007 fa54 	bl	800ee24 <memcpy>
		strcat(tempMsg,validSender);
 800797c:	4a28      	ldr	r2, [pc, #160]	; (8007a20 <send_imei_via_sms+0xdc>)
 800797e:	003b      	movs	r3, r7
 8007980:	0011      	movs	r1, r2
 8007982:	0018      	movs	r0, r3
 8007984:	f007 fa80 	bl	800ee88 <strcat>
		strcat(tempMsg,"\"\r");
 8007988:	003b      	movs	r3, r7
 800798a:	0018      	movs	r0, r3
 800798c:	f7f8 fbc2 	bl	8000114 <strlen>
 8007990:	0003      	movs	r3, r0
 8007992:	001a      	movs	r2, r3
 8007994:	003b      	movs	r3, r7
 8007996:	189a      	adds	r2, r3, r2
 8007998:	4b22      	ldr	r3, [pc, #136]	; (8007a24 <send_imei_via_sms+0xe0>)
 800799a:	0010      	movs	r0, r2
 800799c:	0019      	movs	r1, r3
 800799e:	2303      	movs	r3, #3
 80079a0:	001a      	movs	r2, r3
 80079a2:	f007 fa3f 	bl	800ee24 <memcpy>
//		strcat(tempMsg, "AT+CMGS=\"3322336979\"\r");
		strcat(tempMsg, "IMEI:");
 80079a6:	003b      	movs	r3, r7
 80079a8:	0018      	movs	r0, r3
 80079aa:	f7f8 fbb3 	bl	8000114 <strlen>
 80079ae:	0003      	movs	r3, r0
 80079b0:	001a      	movs	r2, r3
 80079b2:	003b      	movs	r3, r7
 80079b4:	189a      	adds	r2, r3, r2
 80079b6:	4b1c      	ldr	r3, [pc, #112]	; (8007a28 <send_imei_via_sms+0xe4>)
 80079b8:	0010      	movs	r0, r2
 80079ba:	0019      	movs	r1, r3
 80079bc:	2306      	movs	r3, #6
 80079be:	001a      	movs	r2, r3
 80079c0:	f007 fa30 	bl	800ee24 <memcpy>
		strcat(tempMsg, imeiChar);
 80079c4:	4a19      	ldr	r2, [pc, #100]	; (8007a2c <send_imei_via_sms+0xe8>)
 80079c6:	003b      	movs	r3, r7
 80079c8:	0011      	movs	r1, r2
 80079ca:	0018      	movs	r0, r3
 80079cc:	f007 fa5c 	bl	800ee88 <strcat>
		//todo replace while with for loop
		uint8_t tempCount = 0;
 80079d0:	2397      	movs	r3, #151	; 0x97
 80079d2:	18fb      	adds	r3, r7, r3
 80079d4:	2200      	movs	r2, #0
 80079d6:	701a      	strb	r2, [r3, #0]
		while (tempMsg[tempCount] != NULL) {
 80079d8:	e005      	b.n	80079e6 <send_imei_via_sms+0xa2>
			tempCount++;
 80079da:	2197      	movs	r1, #151	; 0x97
 80079dc:	187b      	adds	r3, r7, r1
 80079de:	781a      	ldrb	r2, [r3, #0]
 80079e0:	187b      	adds	r3, r7, r1
 80079e2:	3201      	adds	r2, #1
 80079e4:	701a      	strb	r2, [r3, #0]
		while (tempMsg[tempCount] != NULL) {
 80079e6:	2197      	movs	r1, #151	; 0x97
 80079e8:	187b      	adds	r3, r7, r1
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	003a      	movs	r2, r7
 80079ee:	5cd3      	ldrb	r3, [r2, r3]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d1f2      	bne.n	80079da <send_imei_via_sms+0x96>
		}
		tempMsg[tempCount] = 26;
 80079f4:	187b      	adds	r3, r7, r1
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	003a      	movs	r2, r7
 80079fa:	211a      	movs	r1, #26
 80079fc:	54d1      	strb	r1, [r2, r3]
		//printf("--Sending message to mobile \n");
		send_command(tempMsg, 12005, 7, 0, 0);
 80079fe:	490c      	ldr	r1, [pc, #48]	; (8007a30 <send_imei_via_sms+0xec>)
 8007a00:	0038      	movs	r0, r7
 8007a02:	2300      	movs	r3, #0
 8007a04:	9300      	str	r3, [sp, #0]
 8007a06:	2300      	movs	r3, #0
 8007a08:	2207      	movs	r2, #7
 8007a0a:	f7fe ff3f 	bl	800688c <send_command>
		// char tecMsg[] = {'A','T','+','C','M','G','S','=','\"','3','3','2','2','3','3','6','9','7','9','\"','\r','h','e','l','l','o',26,0};
		//    send_command(tecMsg, 12005, 7, 0, 0);
	}
}
 8007a0e:	46c0      	nop			; (mov r8, r8)
 8007a10:	46bd      	mov	sp, r7
 8007a12:	b026      	add	sp, #152	; 0x98
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	46c0      	nop			; (mov r8, r8)
 8007a18:	2000071e 	.word	0x2000071e
 8007a1c:	080134d8 	.word	0x080134d8
 8007a20:	20000008 	.word	0x20000008
 8007a24:	080134e4 	.word	0x080134e4
 8007a28:	080134e8 	.word	0x080134e8
 8007a2c:	2000088c 	.word	0x2000088c
 8007a30:	00002ee5 	.word	0x00002ee5

08007a34 <send_current_location_via_sms>:

void send_current_location_via_sms() {
 8007a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a36:	b0b9      	sub	sp, #228	; 0xe4
 8007a38:	af02      	add	r7, sp, #8
	if (isNumValid == 1) {
 8007a3a:	4be9      	ldr	r3, [pc, #932]	; (8007de0 <send_current_location_via_sms+0x3ac>)
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	d000      	beq.n	8007a44 <send_current_location_via_sms+0x10>
 8007a42:	e1c9      	b.n	8007dd8 <send_current_location_via_sms+0x3a4>
		//printf("sending message(current location)\n");
		// send_command("AT+CMGS=\"3352093997\"\n\r", 10, 6, 0, 0);
		char tempMsg[150];
		uint8_t speed = 0;
 8007a44:	21d6      	movs	r1, #214	; 0xd6
 8007a46:	187b      	adds	r3, r7, r1
 8007a48:	2200      	movs	r2, #0
 8007a4a:	701a      	strb	r2, [r3, #0]
		uint32_t lat = 0, lon = 0;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	20d0      	movs	r0, #208	; 0xd0
 8007a50:	183a      	adds	r2, r7, r0
 8007a52:	6013      	str	r3, [r2, #0]
 8007a54:	2300      	movs	r3, #0
 8007a56:	24cc      	movs	r4, #204	; 0xcc
 8007a58:	193a      	adds	r2, r7, r4
 8007a5a:	6013      	str	r3, [r2, #0]
		double tempFloat;
		double tempMin;
		uint8_t tempDeg;
		char buf[15];
		float latitude, longitude;
		lat = (gps_info[7] << 24) | (gps_info[8] << 16) | (gps_info[9] << 8)
 8007a5c:	4be1      	ldr	r3, [pc, #900]	; (8007de4 <send_current_location_via_sms+0x3b0>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	3307      	adds	r3, #7
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	061a      	lsls	r2, r3, #24
 8007a66:	4bdf      	ldr	r3, [pc, #892]	; (8007de4 <send_current_location_via_sms+0x3b0>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	3308      	adds	r3, #8
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	041b      	lsls	r3, r3, #16
 8007a70:	431a      	orrs	r2, r3
 8007a72:	4bdc      	ldr	r3, [pc, #880]	; (8007de4 <send_current_location_via_sms+0x3b0>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	3309      	adds	r3, #9
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	021b      	lsls	r3, r3, #8
 8007a7c:	431a      	orrs	r2, r3
		| gps_info[10];
 8007a7e:	4bd9      	ldr	r3, [pc, #868]	; (8007de4 <send_current_location_via_sms+0x3b0>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	330a      	adds	r3, #10
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	4313      	orrs	r3, r2
		lat = (gps_info[7] << 24) | (gps_info[8] << 16) | (gps_info[9] << 8)
 8007a88:	183a      	adds	r2, r7, r0
 8007a8a:	6013      	str	r3, [r2, #0]
		lon = (gps_info[11] << 24) | (gps_info[12] << 16) | (gps_info[13] << 8)
 8007a8c:	4bd5      	ldr	r3, [pc, #852]	; (8007de4 <send_current_location_via_sms+0x3b0>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	330b      	adds	r3, #11
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	061a      	lsls	r2, r3, #24
 8007a96:	4bd3      	ldr	r3, [pc, #844]	; (8007de4 <send_current_location_via_sms+0x3b0>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	330c      	adds	r3, #12
 8007a9c:	781b      	ldrb	r3, [r3, #0]
 8007a9e:	041b      	lsls	r3, r3, #16
 8007aa0:	431a      	orrs	r2, r3
 8007aa2:	4bd0      	ldr	r3, [pc, #832]	; (8007de4 <send_current_location_via_sms+0x3b0>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	330d      	adds	r3, #13
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	021b      	lsls	r3, r3, #8
 8007aac:	431a      	orrs	r2, r3
		| gps_info[14];
 8007aae:	4bcd      	ldr	r3, [pc, #820]	; (8007de4 <send_current_location_via_sms+0x3b0>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	330e      	adds	r3, #14
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	4313      	orrs	r3, r2
		lon = (gps_info[11] << 24) | (gps_info[12] << 16) | (gps_info[13] << 8)
 8007ab8:	193a      	adds	r2, r7, r4
 8007aba:	6013      	str	r3, [r2, #0]
		speed = gps_info[15];
 8007abc:	4bc9      	ldr	r3, [pc, #804]	; (8007de4 <send_current_location_via_sms+0x3b0>)
 8007abe:	681a      	ldr	r2, [r3, #0]
 8007ac0:	187b      	adds	r3, r7, r1
 8007ac2:	7bd2      	ldrb	r2, [r2, #15]
 8007ac4:	701a      	strb	r2, [r3, #0]
		tempFloat = lat / 30000.0;
 8007ac6:	183a      	adds	r2, r7, r0
 8007ac8:	6810      	ldr	r0, [r2, #0]
 8007aca:	f7fa fe2f 	bl	800272c <__aeabi_ui2d>
 8007ace:	2200      	movs	r2, #0
 8007ad0:	4bc5      	ldr	r3, [pc, #788]	; (8007de8 <send_current_location_via_sms+0x3b4>)
 8007ad2:	f7f9 fba7 	bl	8001224 <__aeabi_ddiv>
 8007ad6:	0002      	movs	r2, r0
 8007ad8:	000b      	movs	r3, r1
 8007ada:	24c0      	movs	r4, #192	; 0xc0
 8007adc:	1938      	adds	r0, r7, r4
 8007ade:	6002      	str	r2, [r0, #0]
 8007ae0:	6043      	str	r3, [r0, #4]
		tempDeg = (int) tempFloat / 60;
 8007ae2:	193a      	adds	r2, r7, r4
 8007ae4:	6810      	ldr	r0, [r2, #0]
 8007ae6:	6851      	ldr	r1, [r2, #4]
 8007ae8:	f7fa fdba 	bl	8002660 <__aeabi_d2iz>
 8007aec:	0003      	movs	r3, r0
 8007aee:	213c      	movs	r1, #60	; 0x3c
 8007af0:	0018      	movs	r0, r3
 8007af2:	f7f8 fbb5 	bl	8000260 <__divsi3>
 8007af6:	0003      	movs	r3, r0
 8007af8:	001a      	movs	r2, r3
 8007afa:	26bf      	movs	r6, #191	; 0xbf
 8007afc:	19bb      	adds	r3, r7, r6
 8007afe:	701a      	strb	r2, [r3, #0]
		tempMin = (int) tempFloat % 60;
 8007b00:	193a      	adds	r2, r7, r4
 8007b02:	6810      	ldr	r0, [r2, #0]
 8007b04:	6851      	ldr	r1, [r2, #4]
 8007b06:	f7fa fdab 	bl	8002660 <__aeabi_d2iz>
 8007b0a:	0003      	movs	r3, r0
 8007b0c:	213c      	movs	r1, #60	; 0x3c
 8007b0e:	0018      	movs	r0, r3
 8007b10:	f7f8 fc8c 	bl	800042c <__aeabi_idivmod>
 8007b14:	000b      	movs	r3, r1
 8007b16:	0018      	movs	r0, r3
 8007b18:	f7fa fdd8 	bl	80026cc <__aeabi_i2d>
 8007b1c:	0002      	movs	r2, r0
 8007b1e:	000b      	movs	r3, r1
 8007b20:	25b0      	movs	r5, #176	; 0xb0
 8007b22:	1978      	adds	r0, r7, r5
 8007b24:	6002      	str	r2, [r0, #0]
 8007b26:	6043      	str	r3, [r0, #4]
		tempFloat = tempFloat - (int) tempFloat;
 8007b28:	193a      	adds	r2, r7, r4
 8007b2a:	6810      	ldr	r0, [r2, #0]
 8007b2c:	6851      	ldr	r1, [r2, #4]
 8007b2e:	f7fa fd97 	bl	8002660 <__aeabi_d2iz>
 8007b32:	0003      	movs	r3, r0
 8007b34:	0018      	movs	r0, r3
 8007b36:	f7fa fdc9 	bl	80026cc <__aeabi_i2d>
 8007b3a:	0002      	movs	r2, r0
 8007b3c:	000b      	movs	r3, r1
 8007b3e:	1938      	adds	r0, r7, r4
 8007b40:	6841      	ldr	r1, [r0, #4]
 8007b42:	6800      	ldr	r0, [r0, #0]
 8007b44:	f7fa f9dc 	bl	8001f00 <__aeabi_dsub>
 8007b48:	0002      	movs	r2, r0
 8007b4a:	000b      	movs	r3, r1
 8007b4c:	1938      	adds	r0, r7, r4
 8007b4e:	6002      	str	r2, [r0, #0]
 8007b50:	6043      	str	r3, [r0, #4]
		tempMin = tempMin + tempFloat;
 8007b52:	193a      	adds	r2, r7, r4
 8007b54:	6853      	ldr	r3, [r2, #4]
 8007b56:	6812      	ldr	r2, [r2, #0]
 8007b58:	1978      	adds	r0, r7, r5
 8007b5a:	6841      	ldr	r1, [r0, #4]
 8007b5c:	6800      	ldr	r0, [r0, #0]
 8007b5e:	f7f9 f825 	bl	8000bac <__aeabi_dadd>
 8007b62:	0002      	movs	r2, r0
 8007b64:	000b      	movs	r3, r1
 8007b66:	1978      	adds	r0, r7, r5
 8007b68:	6002      	str	r2, [r0, #0]
 8007b6a:	6043      	str	r3, [r0, #4]
		latitude = tempMin / 60.0;
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	4b9f      	ldr	r3, [pc, #636]	; (8007dec <send_current_location_via_sms+0x3b8>)
 8007b70:	1978      	adds	r0, r7, r5
 8007b72:	6841      	ldr	r1, [r0, #4]
 8007b74:	6800      	ldr	r0, [r0, #0]
 8007b76:	f7f9 fb55 	bl	8001224 <__aeabi_ddiv>
 8007b7a:	0002      	movs	r2, r0
 8007b7c:	000b      	movs	r3, r1
 8007b7e:	0010      	movs	r0, r2
 8007b80:	0019      	movs	r1, r3
 8007b82:	f7fa fe41 	bl	8002808 <__aeabi_d2f>
 8007b86:	1c03      	adds	r3, r0, #0
 8007b88:	22ac      	movs	r2, #172	; 0xac
 8007b8a:	18b8      	adds	r0, r7, r2
 8007b8c:	6003      	str	r3, [r0, #0]
		latitude += tempDeg;
 8007b8e:	19bb      	adds	r3, r7, r6
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	0018      	movs	r0, r3
 8007b94:	f7f8 ffbc 	bl	8000b10 <__aeabi_i2f>
 8007b98:	1c03      	adds	r3, r0, #0
 8007b9a:	1c19      	adds	r1, r3, #0
 8007b9c:	22ac      	movs	r2, #172	; 0xac
 8007b9e:	18b8      	adds	r0, r7, r2
 8007ba0:	6800      	ldr	r0, [r0, #0]
 8007ba2:	f7f8 fd31 	bl	8000608 <__aeabi_fadd>
 8007ba6:	1c03      	adds	r3, r0, #0
 8007ba8:	22ac      	movs	r2, #172	; 0xac
 8007baa:	18b8      	adds	r0, r7, r2
 8007bac:	6003      	str	r3, [r0, #0]
		tempFloat = lon / 30000.0;
 8007bae:	23cc      	movs	r3, #204	; 0xcc
 8007bb0:	18fb      	adds	r3, r7, r3
 8007bb2:	6818      	ldr	r0, [r3, #0]
 8007bb4:	f7fa fdba 	bl	800272c <__aeabi_ui2d>
 8007bb8:	2200      	movs	r2, #0
 8007bba:	4b8b      	ldr	r3, [pc, #556]	; (8007de8 <send_current_location_via_sms+0x3b4>)
 8007bbc:	f7f9 fb32 	bl	8001224 <__aeabi_ddiv>
 8007bc0:	0002      	movs	r2, r0
 8007bc2:	000b      	movs	r3, r1
 8007bc4:	1938      	adds	r0, r7, r4
 8007bc6:	6002      	str	r2, [r0, #0]
 8007bc8:	6043      	str	r3, [r0, #4]
		tempDeg = (int) tempFloat / 60;
 8007bca:	193b      	adds	r3, r7, r4
 8007bcc:	6818      	ldr	r0, [r3, #0]
 8007bce:	6859      	ldr	r1, [r3, #4]
 8007bd0:	f7fa fd46 	bl	8002660 <__aeabi_d2iz>
 8007bd4:	0003      	movs	r3, r0
 8007bd6:	213c      	movs	r1, #60	; 0x3c
 8007bd8:	0018      	movs	r0, r3
 8007bda:	f7f8 fb41 	bl	8000260 <__divsi3>
 8007bde:	0003      	movs	r3, r0
 8007be0:	001a      	movs	r2, r3
 8007be2:	19bb      	adds	r3, r7, r6
 8007be4:	701a      	strb	r2, [r3, #0]
		tempMin = (int) tempFloat % 60;
 8007be6:	193b      	adds	r3, r7, r4
 8007be8:	6818      	ldr	r0, [r3, #0]
 8007bea:	6859      	ldr	r1, [r3, #4]
 8007bec:	f7fa fd38 	bl	8002660 <__aeabi_d2iz>
 8007bf0:	0003      	movs	r3, r0
 8007bf2:	213c      	movs	r1, #60	; 0x3c
 8007bf4:	0018      	movs	r0, r3
 8007bf6:	f7f8 fc19 	bl	800042c <__aeabi_idivmod>
 8007bfa:	000b      	movs	r3, r1
 8007bfc:	0018      	movs	r0, r3
 8007bfe:	f7fa fd65 	bl	80026cc <__aeabi_i2d>
 8007c02:	0002      	movs	r2, r0
 8007c04:	000b      	movs	r3, r1
 8007c06:	1978      	adds	r0, r7, r5
 8007c08:	6002      	str	r2, [r0, #0]
 8007c0a:	6043      	str	r3, [r0, #4]
		tempFloat = tempFloat - (int) tempFloat;
 8007c0c:	193b      	adds	r3, r7, r4
 8007c0e:	6818      	ldr	r0, [r3, #0]
 8007c10:	6859      	ldr	r1, [r3, #4]
 8007c12:	f7fa fd25 	bl	8002660 <__aeabi_d2iz>
 8007c16:	0003      	movs	r3, r0
 8007c18:	0018      	movs	r0, r3
 8007c1a:	f7fa fd57 	bl	80026cc <__aeabi_i2d>
 8007c1e:	0002      	movs	r2, r0
 8007c20:	000b      	movs	r3, r1
 8007c22:	1938      	adds	r0, r7, r4
 8007c24:	6841      	ldr	r1, [r0, #4]
 8007c26:	6800      	ldr	r0, [r0, #0]
 8007c28:	f7fa f96a 	bl	8001f00 <__aeabi_dsub>
 8007c2c:	0002      	movs	r2, r0
 8007c2e:	000b      	movs	r3, r1
 8007c30:	1938      	adds	r0, r7, r4
 8007c32:	6002      	str	r2, [r0, #0]
 8007c34:	6043      	str	r3, [r0, #4]
		tempMin = tempMin + tempFloat;
 8007c36:	193b      	adds	r3, r7, r4
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	1978      	adds	r0, r7, r5
 8007c3e:	6841      	ldr	r1, [r0, #4]
 8007c40:	6800      	ldr	r0, [r0, #0]
 8007c42:	f7f8 ffb3 	bl	8000bac <__aeabi_dadd>
 8007c46:	0002      	movs	r2, r0
 8007c48:	000b      	movs	r3, r1
 8007c4a:	1978      	adds	r0, r7, r5
 8007c4c:	6002      	str	r2, [r0, #0]
 8007c4e:	6043      	str	r3, [r0, #4]
		longitude = tempMin / 60.0;
 8007c50:	2200      	movs	r2, #0
 8007c52:	4b66      	ldr	r3, [pc, #408]	; (8007dec <send_current_location_via_sms+0x3b8>)
 8007c54:	1978      	adds	r0, r7, r5
 8007c56:	6841      	ldr	r1, [r0, #4]
 8007c58:	6800      	ldr	r0, [r0, #0]
 8007c5a:	f7f9 fae3 	bl	8001224 <__aeabi_ddiv>
 8007c5e:	0002      	movs	r2, r0
 8007c60:	000b      	movs	r3, r1
 8007c62:	0010      	movs	r0, r2
 8007c64:	0019      	movs	r1, r3
 8007c66:	f7fa fdcf 	bl	8002808 <__aeabi_d2f>
 8007c6a:	1c03      	adds	r3, r0, #0
 8007c6c:	25a8      	movs	r5, #168	; 0xa8
 8007c6e:	1978      	adds	r0, r7, r5
 8007c70:	6003      	str	r3, [r0, #0]
		longitude += tempDeg;
 8007c72:	19bb      	adds	r3, r7, r6
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	0018      	movs	r0, r3
 8007c78:	f7f8 ff4a 	bl	8000b10 <__aeabi_i2f>
 8007c7c:	1c03      	adds	r3, r0, #0
 8007c7e:	1c19      	adds	r1, r3, #0
 8007c80:	197b      	adds	r3, r7, r5
 8007c82:	6818      	ldr	r0, [r3, #0]
 8007c84:	f7f8 fcc0 	bl	8000608 <__aeabi_fadd>
 8007c88:	1c03      	adds	r3, r0, #0
 8007c8a:	1978      	adds	r0, r7, r5
 8007c8c:	6003      	str	r3, [r0, #0]
		memset(tempMsg, 0, sizeof(tempMsg));
 8007c8e:	003b      	movs	r3, r7
 8007c90:	2296      	movs	r2, #150	; 0x96
 8007c92:	2100      	movs	r1, #0
 8007c94:	0018      	movs	r0, r3
 8007c96:	f007 f8ce 	bl	800ee36 <memset>
		memset(buf, 0, sizeof(buf));
 8007c9a:	2498      	movs	r4, #152	; 0x98
 8007c9c:	193b      	adds	r3, r7, r4
 8007c9e:	220f      	movs	r2, #15
 8007ca0:	2100      	movs	r1, #0
 8007ca2:	0018      	movs	r0, r3
 8007ca4:	f007 f8c7 	bl	800ee36 <memset>
		gcvt(latitude, 8, buf);
 8007ca8:	22ac      	movs	r2, #172	; 0xac
 8007caa:	18bb      	adds	r3, r7, r2
 8007cac:	6818      	ldr	r0, [r3, #0]
 8007cae:	f7fa fd63 	bl	8002778 <__aeabi_f2d>
 8007cb2:	193b      	adds	r3, r7, r4
 8007cb4:	2208      	movs	r2, #8
 8007cb6:	f007 f865 	bl	800ed84 <gcvt>
		strcat(tempMsg,"AT+CMGS=\"");
 8007cba:	003b      	movs	r3, r7
 8007cbc:	0018      	movs	r0, r3
 8007cbe:	f7f8 fa29 	bl	8000114 <strlen>
 8007cc2:	0003      	movs	r3, r0
 8007cc4:	001a      	movs	r2, r3
 8007cc6:	003b      	movs	r3, r7
 8007cc8:	189a      	adds	r2, r3, r2
 8007cca:	4b49      	ldr	r3, [pc, #292]	; (8007df0 <send_current_location_via_sms+0x3bc>)
 8007ccc:	0010      	movs	r0, r2
 8007cce:	0019      	movs	r1, r3
 8007cd0:	230a      	movs	r3, #10
 8007cd2:	001a      	movs	r2, r3
 8007cd4:	f007 f8a6 	bl	800ee24 <memcpy>
		strcat(tempMsg,validSender);
 8007cd8:	4a46      	ldr	r2, [pc, #280]	; (8007df4 <send_current_location_via_sms+0x3c0>)
 8007cda:	003b      	movs	r3, r7
 8007cdc:	0011      	movs	r1, r2
 8007cde:	0018      	movs	r0, r3
 8007ce0:	f007 f8d2 	bl	800ee88 <strcat>
		strcat(tempMsg,"\"\r");
 8007ce4:	003b      	movs	r3, r7
 8007ce6:	0018      	movs	r0, r3
 8007ce8:	f7f8 fa14 	bl	8000114 <strlen>
 8007cec:	0003      	movs	r3, r0
 8007cee:	001a      	movs	r2, r3
 8007cf0:	003b      	movs	r3, r7
 8007cf2:	189a      	adds	r2, r3, r2
 8007cf4:	4b40      	ldr	r3, [pc, #256]	; (8007df8 <send_current_location_via_sms+0x3c4>)
 8007cf6:	0010      	movs	r0, r2
 8007cf8:	0019      	movs	r1, r3
 8007cfa:	2303      	movs	r3, #3
 8007cfc:	001a      	movs	r2, r3
 8007cfe:	f007 f891 	bl	800ee24 <memcpy>
//		strcat(tempMsg, "AT+CMGS=\"3322336979\"\r");
		strcat(tempMsg, buf);
 8007d02:	193a      	adds	r2, r7, r4
 8007d04:	003b      	movs	r3, r7
 8007d06:	0011      	movs	r1, r2
 8007d08:	0018      	movs	r0, r3
 8007d0a:	f007 f8bd 	bl	800ee88 <strcat>
		memset(buf, 0, sizeof(buf));
 8007d0e:	193b      	adds	r3, r7, r4
 8007d10:	220f      	movs	r2, #15
 8007d12:	2100      	movs	r1, #0
 8007d14:	0018      	movs	r0, r3
 8007d16:	f007 f88e 	bl	800ee36 <memset>
		gcvt(longitude, 8, buf);
 8007d1a:	197b      	adds	r3, r7, r5
 8007d1c:	6818      	ldr	r0, [r3, #0]
 8007d1e:	f7fa fd2b 	bl	8002778 <__aeabi_f2d>
 8007d22:	193b      	adds	r3, r7, r4
 8007d24:	2208      	movs	r2, #8
 8007d26:	f007 f82d 	bl	800ed84 <gcvt>
		strcat(tempMsg, ",");
 8007d2a:	003b      	movs	r3, r7
 8007d2c:	0018      	movs	r0, r3
 8007d2e:	f7f8 f9f1 	bl	8000114 <strlen>
 8007d32:	0003      	movs	r3, r0
 8007d34:	001a      	movs	r2, r3
 8007d36:	003b      	movs	r3, r7
 8007d38:	189a      	adds	r2, r3, r2
 8007d3a:	4b30      	ldr	r3, [pc, #192]	; (8007dfc <send_current_location_via_sms+0x3c8>)
 8007d3c:	0010      	movs	r0, r2
 8007d3e:	0019      	movs	r1, r3
 8007d40:	2302      	movs	r3, #2
 8007d42:	001a      	movs	r2, r3
 8007d44:	f007 f86e 	bl	800ee24 <memcpy>
		strcat(tempMsg, buf);
 8007d48:	193a      	adds	r2, r7, r4
 8007d4a:	003b      	movs	r3, r7
 8007d4c:	0011      	movs	r1, r2
 8007d4e:	0018      	movs	r0, r3
 8007d50:	f007 f89a 	bl	800ee88 <strcat>
		strcat(tempMsg, ",");
 8007d54:	003b      	movs	r3, r7
 8007d56:	0018      	movs	r0, r3
 8007d58:	f7f8 f9dc 	bl	8000114 <strlen>
 8007d5c:	0003      	movs	r3, r0
 8007d5e:	001a      	movs	r2, r3
 8007d60:	003b      	movs	r3, r7
 8007d62:	189a      	adds	r2, r3, r2
 8007d64:	4b25      	ldr	r3, [pc, #148]	; (8007dfc <send_current_location_via_sms+0x3c8>)
 8007d66:	0010      	movs	r0, r2
 8007d68:	0019      	movs	r1, r3
 8007d6a:	2302      	movs	r3, #2
 8007d6c:	001a      	movs	r2, r3
 8007d6e:	f007 f859 	bl	800ee24 <memcpy>
		memset(buf, 0, sizeof(buf));
 8007d72:	193b      	adds	r3, r7, r4
 8007d74:	220f      	movs	r2, #15
 8007d76:	2100      	movs	r1, #0
 8007d78:	0018      	movs	r0, r3
 8007d7a:	f007 f85c 	bl	800ee36 <memset>
		int2string(speed, buf);
 8007d7e:	21d6      	movs	r1, #214	; 0xd6
 8007d80:	187b      	adds	r3, r7, r1
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	193a      	adds	r2, r7, r4
 8007d86:	0011      	movs	r1, r2
 8007d88:	0018      	movs	r0, r3
 8007d8a:	f000 fa67 	bl	800825c <int2string>
		strcat(tempMsg, buf);
 8007d8e:	193a      	adds	r2, r7, r4
 8007d90:	003b      	movs	r3, r7
 8007d92:	0011      	movs	r1, r2
 8007d94:	0018      	movs	r0, r3
 8007d96:	f007 f877 	bl	800ee88 <strcat>

		uint8_t tempCount = 0;
 8007d9a:	23d7      	movs	r3, #215	; 0xd7
 8007d9c:	18fb      	adds	r3, r7, r3
 8007d9e:	2200      	movs	r2, #0
 8007da0:	701a      	strb	r2, [r3, #0]
		//todo replace while with for loop
		while (tempMsg[tempCount] != NULL) {
 8007da2:	e005      	b.n	8007db0 <send_current_location_via_sms+0x37c>
			tempCount++;
 8007da4:	21d7      	movs	r1, #215	; 0xd7
 8007da6:	187b      	adds	r3, r7, r1
 8007da8:	781a      	ldrb	r2, [r3, #0]
 8007daa:	187b      	adds	r3, r7, r1
 8007dac:	3201      	adds	r2, #1
 8007dae:	701a      	strb	r2, [r3, #0]
		while (tempMsg[tempCount] != NULL) {
 8007db0:	21d7      	movs	r1, #215	; 0xd7
 8007db2:	187b      	adds	r3, r7, r1
 8007db4:	781b      	ldrb	r3, [r3, #0]
 8007db6:	003a      	movs	r2, r7
 8007db8:	5cd3      	ldrb	r3, [r2, r3]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d1f2      	bne.n	8007da4 <send_current_location_via_sms+0x370>
		}

		tempMsg[tempCount] = 26;
 8007dbe:	187b      	adds	r3, r7, r1
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	003a      	movs	r2, r7
 8007dc4:	211a      	movs	r1, #26
 8007dc6:	54d1      	strb	r1, [r2, r3]
		//printf("--Sending message to mobile \n");

		send_command(tempMsg, 12005, 7, 0, 0);
 8007dc8:	490d      	ldr	r1, [pc, #52]	; (8007e00 <send_current_location_via_sms+0x3cc>)
 8007dca:	0038      	movs	r0, r7
 8007dcc:	2300      	movs	r3, #0
 8007dce:	9300      	str	r3, [sp, #0]
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	2207      	movs	r2, #7
 8007dd4:	f7fe fd5a 	bl	800688c <send_command>

		// char tecMsg[] = {'A','T','+','C','M','G','S','=','\"','3','3','2','2','3','3','6','9','7','9','\"','\r','h','e','l','l','o',26,0};

		//    send_command(tecMsg, 12005, 7, 0, 0);
	}
}
 8007dd8:	46c0      	nop			; (mov r8, r8)
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	b037      	add	sp, #220	; 0xdc
 8007dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007de0:	2000071e 	.word	0x2000071e
 8007de4:	2000002c 	.word	0x2000002c
 8007de8:	40dd4c00 	.word	0x40dd4c00
 8007dec:	404e0000 	.word	0x404e0000
 8007df0:	080134d8 	.word	0x080134d8
 8007df4:	20000008 	.word	0x20000008
 8007df8:	080134e4 	.word	0x080134e4
 8007dfc:	080134f0 	.word	0x080134f0
 8007e00:	00002ee5 	.word	0x00002ee5

08007e04 <send_alarm_packet_via_sms>:


void send_alarm_packet_via_sms(){
 8007e04:	b5b0      	push	{r4, r5, r7, lr}
 8007e06:	b0a2      	sub	sp, #136	; 0x88
 8007e08:	af02      	add	r7, sp, #8
	if(isSMSActive==1){
 8007e0a:	4b58      	ldr	r3, [pc, #352]	; (8007f6c <send_alarm_packet_via_sms+0x168>)
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	d000      	beq.n	8007e14 <send_alarm_packet_via_sms+0x10>
 8007e12:	e0a7      	b.n	8007f64 <send_alarm_packet_via_sms+0x160>
		uint8_t tempalarm[23];
		memset(tempalarm, 0, sizeof(tempalarm));
 8007e14:	2364      	movs	r3, #100	; 0x64
 8007e16:	18fb      	adds	r3, r7, r3
 8007e18:	2217      	movs	r2, #23
 8007e1a:	2100      	movs	r1, #0
 8007e1c:	0018      	movs	r0, r3
 8007e1e:	f007 f80a 	bl	800ee36 <memset>
		create_status_info();
 8007e22:	f7ff fb87 	bl	8007534 <create_status_info>
		char temMsg[100];
		uint8_t n = 21;
 8007e26:	237f      	movs	r3, #127	; 0x7f
 8007e28:	18fb      	adds	r3, r7, r3
 8007e2a:	2215      	movs	r2, #21
 8007e2c:	701a      	strb	r2, [r3, #0]
		uint8_t tempCt = 0;
 8007e2e:	237e      	movs	r3, #126	; 0x7e
 8007e30:	18fb      	adds	r3, r7, r3
 8007e32:	2200      	movs	r2, #0
 8007e34:	701a      	strb	r2, [r3, #0]
		memset(temMsg, 0, sizeof(temMsg));
 8007e36:	003b      	movs	r3, r7
 8007e38:	2264      	movs	r2, #100	; 0x64
 8007e3a:	2100      	movs	r1, #0
 8007e3c:	0018      	movs	r0, r3
 8007e3e:	f006 fffa 	bl	800ee36 <memset>
		strcat(temMsg,"AT+CMGS=\"");
 8007e42:	003b      	movs	r3, r7
 8007e44:	0018      	movs	r0, r3
 8007e46:	f7f8 f965 	bl	8000114 <strlen>
 8007e4a:	0003      	movs	r3, r0
 8007e4c:	001a      	movs	r2, r3
 8007e4e:	003b      	movs	r3, r7
 8007e50:	189a      	adds	r2, r3, r2
 8007e52:	4b47      	ldr	r3, [pc, #284]	; (8007f70 <send_alarm_packet_via_sms+0x16c>)
 8007e54:	0010      	movs	r0, r2
 8007e56:	0019      	movs	r1, r3
 8007e58:	230a      	movs	r3, #10
 8007e5a:	001a      	movs	r2, r3
 8007e5c:	f006 ffe2 	bl	800ee24 <memcpy>
		strcat(temMsg,validSender);
 8007e60:	4a44      	ldr	r2, [pc, #272]	; (8007f74 <send_alarm_packet_via_sms+0x170>)
 8007e62:	003b      	movs	r3, r7
 8007e64:	0011      	movs	r1, r2
 8007e66:	0018      	movs	r0, r3
 8007e68:	f007 f80e 	bl	800ee88 <strcat>
		strcat(temMsg,"\"\r");
 8007e6c:	003b      	movs	r3, r7
 8007e6e:	0018      	movs	r0, r3
 8007e70:	f7f8 f950 	bl	8000114 <strlen>
 8007e74:	0003      	movs	r3, r0
 8007e76:	001a      	movs	r2, r3
 8007e78:	003b      	movs	r3, r7
 8007e7a:	189a      	adds	r2, r3, r2
 8007e7c:	4b3e      	ldr	r3, [pc, #248]	; (8007f78 <send_alarm_packet_via_sms+0x174>)
 8007e7e:	0010      	movs	r0, r2
 8007e80:	0019      	movs	r1, r3
 8007e82:	2303      	movs	r3, #3
 8007e84:	001a      	movs	r2, r3
 8007e86:	f006 ffcd 	bl	800ee24 <memcpy>
//		create_status_info();
		for (uint8_t y = 0; y < 18; y++) {
 8007e8a:	237d      	movs	r3, #125	; 0x7d
 8007e8c:	18fb      	adds	r3, r7, r3
 8007e8e:	2200      	movs	r2, #0
 8007e90:	701a      	strb	r2, [r3, #0]
 8007e92:	e010      	b.n	8007eb6 <send_alarm_packet_via_sms+0xb2>
			tempalarm[y]  = gps_info[y];
 8007e94:	4b39      	ldr	r3, [pc, #228]	; (8007f7c <send_alarm_packet_via_sms+0x178>)
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	207d      	movs	r0, #125	; 0x7d
 8007e9a:	183b      	adds	r3, r7, r0
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	18d2      	adds	r2, r2, r3
 8007ea0:	183b      	adds	r3, r7, r0
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	7811      	ldrb	r1, [r2, #0]
 8007ea6:	2264      	movs	r2, #100	; 0x64
 8007ea8:	18ba      	adds	r2, r7, r2
 8007eaa:	54d1      	strb	r1, [r2, r3]
		for (uint8_t y = 0; y < 18; y++) {
 8007eac:	183b      	adds	r3, r7, r0
 8007eae:	781a      	ldrb	r2, [r3, #0]
 8007eb0:	183b      	adds	r3, r7, r0
 8007eb2:	3201      	adds	r2, #1
 8007eb4:	701a      	strb	r2, [r3, #0]
 8007eb6:	237d      	movs	r3, #125	; 0x7d
 8007eb8:	18fb      	adds	r3, r7, r3
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	2b11      	cmp	r3, #17
 8007ebe:	d9e9      	bls.n	8007e94 <send_alarm_packet_via_sms+0x90>
		}
		tempalarm[18]=TermInfo;
 8007ec0:	4b2f      	ldr	r3, [pc, #188]	; (8007f80 <send_alarm_packet_via_sms+0x17c>)
 8007ec2:	781a      	ldrb	r2, [r3, #0]
 8007ec4:	2164      	movs	r1, #100	; 0x64
 8007ec6:	187b      	adds	r3, r7, r1
 8007ec8:	749a      	strb	r2, [r3, #18]
		tempalarm[19]=VLvl;
 8007eca:	4b2e      	ldr	r3, [pc, #184]	; (8007f84 <send_alarm_packet_via_sms+0x180>)
 8007ecc:	781a      	ldrb	r2, [r3, #0]
 8007ece:	187b      	adds	r3, r7, r1
 8007ed0:	74da      	strb	r2, [r3, #19]
		tempalarm[20]=GSMSS;
 8007ed2:	4b2d      	ldr	r3, [pc, #180]	; (8007f88 <send_alarm_packet_via_sms+0x184>)
 8007ed4:	781a      	ldrb	r2, [r3, #0]
 8007ed6:	187b      	adds	r3, r7, r1
 8007ed8:	751a      	strb	r2, [r3, #20]
		for (uint8_t y = 0; y < 21; y++) {
 8007eda:	237c      	movs	r3, #124	; 0x7c
 8007edc:	18fb      	adds	r3, r7, r3
 8007ede:	2200      	movs	r2, #0
 8007ee0:	701a      	strb	r2, [r3, #0]
 8007ee2:	e01b      	b.n	8007f1c <send_alarm_packet_via_sms+0x118>
			n += sprintf(&temMsg[n], "%d", tempalarm[y]);
 8007ee4:	247f      	movs	r4, #127	; 0x7f
 8007ee6:	193b      	adds	r3, r7, r4
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	003a      	movs	r2, r7
 8007eec:	18d0      	adds	r0, r2, r3
 8007eee:	257c      	movs	r5, #124	; 0x7c
 8007ef0:	197b      	adds	r3, r7, r5
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	2264      	movs	r2, #100	; 0x64
 8007ef6:	18ba      	adds	r2, r7, r2
 8007ef8:	5cd3      	ldrb	r3, [r2, r3]
 8007efa:	001a      	movs	r2, r3
 8007efc:	4b23      	ldr	r3, [pc, #140]	; (8007f8c <send_alarm_packet_via_sms+0x188>)
 8007efe:	0019      	movs	r1, r3
 8007f00:	f006 ffa2 	bl	800ee48 <siprintf>
 8007f04:	0003      	movs	r3, r0
 8007f06:	b2d9      	uxtb	r1, r3
 8007f08:	193b      	adds	r3, r7, r4
 8007f0a:	193a      	adds	r2, r7, r4
 8007f0c:	7812      	ldrb	r2, [r2, #0]
 8007f0e:	188a      	adds	r2, r1, r2
 8007f10:	701a      	strb	r2, [r3, #0]
		for (uint8_t y = 0; y < 21; y++) {
 8007f12:	197b      	adds	r3, r7, r5
 8007f14:	781a      	ldrb	r2, [r3, #0]
 8007f16:	197b      	adds	r3, r7, r5
 8007f18:	3201      	adds	r2, #1
 8007f1a:	701a      	strb	r2, [r3, #0]
 8007f1c:	237c      	movs	r3, #124	; 0x7c
 8007f1e:	18fb      	adds	r3, r7, r3
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	2b14      	cmp	r3, #20
 8007f24:	d9de      	bls.n	8007ee4 <send_alarm_packet_via_sms+0xe0>
		}
		tempCt = 0;
 8007f26:	237e      	movs	r3, #126	; 0x7e
 8007f28:	18fb      	adds	r3, r7, r3
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	701a      	strb	r2, [r3, #0]
		while (temMsg[tempCt] != NULL) {
 8007f2e:	e005      	b.n	8007f3c <send_alarm_packet_via_sms+0x138>
			tempCt++;
 8007f30:	217e      	movs	r1, #126	; 0x7e
 8007f32:	187b      	adds	r3, r7, r1
 8007f34:	781a      	ldrb	r2, [r3, #0]
 8007f36:	187b      	adds	r3, r7, r1
 8007f38:	3201      	adds	r2, #1
 8007f3a:	701a      	strb	r2, [r3, #0]
		while (temMsg[tempCt] != NULL) {
 8007f3c:	217e      	movs	r1, #126	; 0x7e
 8007f3e:	187b      	adds	r3, r7, r1
 8007f40:	781b      	ldrb	r3, [r3, #0]
 8007f42:	003a      	movs	r2, r7
 8007f44:	5cd3      	ldrb	r3, [r2, r3]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d1f2      	bne.n	8007f30 <send_alarm_packet_via_sms+0x12c>
		}
		temMsg[tempCt] = 26;
 8007f4a:	187b      	adds	r3, r7, r1
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	003a      	movs	r2, r7
 8007f50:	211a      	movs	r1, #26
 8007f52:	54d1      	strb	r1, [r2, r3]
		send_command(temMsg, 12005, 7, 0, 0);
 8007f54:	490e      	ldr	r1, [pc, #56]	; (8007f90 <send_alarm_packet_via_sms+0x18c>)
 8007f56:	0038      	movs	r0, r7
 8007f58:	2300      	movs	r3, #0
 8007f5a:	9300      	str	r3, [sp, #0]
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	2207      	movs	r2, #7
 8007f60:	f7fe fc94 	bl	800688c <send_command>
	}
}
 8007f64:	46c0      	nop			; (mov r8, r8)
 8007f66:	46bd      	mov	sp, r7
 8007f68:	b020      	add	sp, #128	; 0x80
 8007f6a:	bdb0      	pop	{r4, r5, r7, pc}
 8007f6c:	20000734 	.word	0x20000734
 8007f70:	080134d8 	.word	0x080134d8
 8007f74:	20000008 	.word	0x20000008
 8007f78:	080134e4 	.word	0x080134e4
 8007f7c:	2000002c 	.word	0x2000002c
 8007f80:	2000072b 	.word	0x2000072b
 8007f84:	2000072d 	.word	0x2000072d
 8007f88:	2000072c 	.word	0x2000072c
 8007f8c:	080134f4 	.word	0x080134f4
 8007f90:	00002ee5 	.word	0x00002ee5

08007f94 <send_location_packet_via_sms>:

void send_location_packet_via_sms(){
 8007f94:	b5b0      	push	{r4, r5, r7, lr}
 8007f96:	4c9e      	ldr	r4, [pc, #632]	; (8008210 <send_location_packet_via_sms+0x27c>)
 8007f98:	44a5      	add	sp, r4
 8007f9a:	af02      	add	r7, sp, #8
	if(isSMSActive==1){
 8007f9c:	4b9d      	ldr	r3, [pc, #628]	; (8008214 <send_location_packet_via_sms+0x280>)
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d000      	beq.n	8007fa6 <send_location_packet_via_sms+0x12>
 8007fa4:	e12e      	b.n	8008204 <send_location_packet_via_sms+0x270>
		msgCounter = 0;
 8007fa6:	4b9c      	ldr	r3, [pc, #624]	; (8008218 <send_location_packet_via_sms+0x284>)
 8007fa8:	2200      	movs	r2, #0
 8007faa:	701a      	strb	r2, [r3, #0]
		uint8_t dataSize = 0;
 8007fac:	499b      	ldr	r1, [pc, #620]	; (800821c <send_location_packet_via_sms+0x288>)
 8007fae:	187b      	adds	r3, r7, r1
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	701a      	strb	r2, [r3, #0]
		dataSize = checkdatasize();
 8007fb4:	187c      	adds	r4, r7, r1
 8007fb6:	f7ff f975 	bl	80072a4 <checkdatasize>
 8007fba:	0003      	movs	r3, r0
 8007fbc:	7023      	strb	r3, [r4, #0]
		while (dataSize == 1 && msgCounter < msgCount) {
 8007fbe:	e115      	b.n	80081ec <send_location_packet_via_sms+0x258>
			stats = 6;
 8007fc0:	4b97      	ldr	r3, [pc, #604]	; (8008220 <send_location_packet_via_sms+0x28c>)
 8007fc2:	2206      	movs	r2, #6
 8007fc4:	701a      	strb	r2, [r3, #0]
			uint8_t loopCount = 0;
 8007fc6:	4b97      	ldr	r3, [pc, #604]	; (8008224 <send_location_packet_via_sms+0x290>)
 8007fc8:	18fb      	adds	r3, r7, r3
 8007fca:	2200      	movs	r2, #0
 8007fcc:	701a      	strb	r2, [r3, #0]
			memset(bunchdata, 0, sizeof(bunchdata));
 8007fce:	23a8      	movs	r3, #168	; 0xa8
 8007fd0:	009a      	lsls	r2, r3, #2
 8007fd2:	4b95      	ldr	r3, [pc, #596]	; (8008228 <send_location_packet_via_sms+0x294>)
 8007fd4:	2100      	movs	r1, #0
 8007fd6:	0018      	movs	r0, r3
 8007fd8:	f006 ff2d 	bl	800ee36 <memset>
			//printf("--Sending AT+CREG?-- \n");
			send_command("AT+CREG?\r\n", 3, 3, 3, 1);
 8007fdc:	4893      	ldr	r0, [pc, #588]	; (800822c <send_location_packet_via_sms+0x298>)
 8007fde:	2301      	movs	r3, #1
 8007fe0:	9300      	str	r3, [sp, #0]
 8007fe2:	2303      	movs	r3, #3
 8007fe4:	2203      	movs	r2, #3
 8007fe6:	2103      	movs	r1, #3
 8007fe8:	f7fe fc50 	bl	800688c <send_command>
			if (isReg == 1) {
 8007fec:	4b90      	ldr	r3, [pc, #576]	; (8008230 <send_location_packet_via_sms+0x29c>)
 8007fee:	781b      	ldrb	r3, [r3, #0]
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d000      	beq.n	8007ff6 <send_location_packet_via_sms+0x62>
 8007ff4:	e105      	b.n	8008202 <send_location_packet_via_sms+0x26e>
				while (read_data_packet() == 1 && loopCount < smsBunch) {
 8007ff6:	e023      	b.n	8008040 <send_location_packet_via_sms+0xac>
					//printf("readed the data \n");
					for (uint8_t i = 0; i < 18; i++) {
 8007ff8:	4b8e      	ldr	r3, [pc, #568]	; (8008234 <send_location_packet_via_sms+0x2a0>)
 8007ffa:	18fb      	adds	r3, r7, r3
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	701a      	strb	r2, [r3, #0]
 8008000:	e013      	b.n	800802a <send_location_packet_via_sms+0x96>
						bunchdata[loopCount][i] = readPacket[i];
 8008002:	4c8c      	ldr	r4, [pc, #560]	; (8008234 <send_location_packet_via_sms+0x2a0>)
 8008004:	193b      	adds	r3, r7, r4
 8008006:	7819      	ldrb	r1, [r3, #0]
 8008008:	4b86      	ldr	r3, [pc, #536]	; (8008224 <send_location_packet_via_sms+0x290>)
 800800a:	18fb      	adds	r3, r7, r3
 800800c:	781a      	ldrb	r2, [r3, #0]
 800800e:	193b      	adds	r3, r7, r4
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	4889      	ldr	r0, [pc, #548]	; (8008238 <send_location_packet_via_sms+0x2a4>)
 8008014:	5c40      	ldrb	r0, [r0, r1]
 8008016:	4984      	ldr	r1, [pc, #528]	; (8008228 <send_location_packet_via_sms+0x294>)
 8008018:	0152      	lsls	r2, r2, #5
 800801a:	188a      	adds	r2, r1, r2
 800801c:	1c01      	adds	r1, r0, #0
 800801e:	54d1      	strb	r1, [r2, r3]
					for (uint8_t i = 0; i < 18; i++) {
 8008020:	193b      	adds	r3, r7, r4
 8008022:	781a      	ldrb	r2, [r3, #0]
 8008024:	193b      	adds	r3, r7, r4
 8008026:	3201      	adds	r2, #1
 8008028:	701a      	strb	r2, [r3, #0]
 800802a:	4b82      	ldr	r3, [pc, #520]	; (8008234 <send_location_packet_via_sms+0x2a0>)
 800802c:	18fb      	adds	r3, r7, r3
 800802e:	781b      	ldrb	r3, [r3, #0]
 8008030:	2b11      	cmp	r3, #17
 8008032:	d9e6      	bls.n	8008002 <send_location_packet_via_sms+0x6e>
					}
					loopCount++;
 8008034:	497b      	ldr	r1, [pc, #492]	; (8008224 <send_location_packet_via_sms+0x290>)
 8008036:	187b      	adds	r3, r7, r1
 8008038:	781a      	ldrb	r2, [r3, #0]
 800803a:	187b      	adds	r3, r7, r1
 800803c:	3201      	adds	r2, #1
 800803e:	701a      	strb	r2, [r3, #0]
				while (read_data_packet() == 1 && loopCount < smsBunch) {
 8008040:	f7ff fa02 	bl	8007448 <read_data_packet>
 8008044:	0003      	movs	r3, r0
 8008046:	2b01      	cmp	r3, #1
 8008048:	d104      	bne.n	8008054 <send_location_packet_via_sms+0xc0>
 800804a:	4b76      	ldr	r3, [pc, #472]	; (8008224 <send_location_packet_via_sms+0x290>)
 800804c:	18fb      	adds	r3, r7, r3
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	2b09      	cmp	r3, #9
 8008052:	d9d1      	bls.n	8007ff8 <send_location_packet_via_sms+0x64>
				}
				char temMsg[1000];
				int n = 21;
 8008054:	2315      	movs	r3, #21
 8008056:	22fc      	movs	r2, #252	; 0xfc
 8008058:	0092      	lsls	r2, r2, #2
 800805a:	18ba      	adds	r2, r7, r2
 800805c:	6013      	str	r3, [r2, #0]
				int tempCt = 0;
 800805e:	2300      	movs	r3, #0
 8008060:	22fb      	movs	r2, #251	; 0xfb
 8008062:	0092      	lsls	r2, r2, #2
 8008064:	18ba      	adds	r2, r7, r2
 8008066:	6013      	str	r3, [r2, #0]
				memset(temMsg, 0, sizeof(temMsg));
 8008068:	23fa      	movs	r3, #250	; 0xfa
 800806a:	009a      	lsls	r2, r3, #2
 800806c:	003b      	movs	r3, r7
 800806e:	2100      	movs	r1, #0
 8008070:	0018      	movs	r0, r3
 8008072:	f006 fee0 	bl	800ee36 <memset>
				strcat(temMsg,"AT+CMGS=\"");
 8008076:	003b      	movs	r3, r7
 8008078:	0018      	movs	r0, r3
 800807a:	f7f8 f84b 	bl	8000114 <strlen>
 800807e:	0003      	movs	r3, r0
 8008080:	001a      	movs	r2, r3
 8008082:	003b      	movs	r3, r7
 8008084:	189a      	adds	r2, r3, r2
 8008086:	4b6d      	ldr	r3, [pc, #436]	; (800823c <send_location_packet_via_sms+0x2a8>)
 8008088:	0010      	movs	r0, r2
 800808a:	0019      	movs	r1, r3
 800808c:	230a      	movs	r3, #10
 800808e:	001a      	movs	r2, r3
 8008090:	f006 fec8 	bl	800ee24 <memcpy>
				strcat(temMsg,validSender);
 8008094:	4a6a      	ldr	r2, [pc, #424]	; (8008240 <send_location_packet_via_sms+0x2ac>)
 8008096:	003b      	movs	r3, r7
 8008098:	0011      	movs	r1, r2
 800809a:	0018      	movs	r0, r3
 800809c:	f006 fef4 	bl	800ee88 <strcat>
				strcat(temMsg,"\"\r");
 80080a0:	003b      	movs	r3, r7
 80080a2:	0018      	movs	r0, r3
 80080a4:	f7f8 f836 	bl	8000114 <strlen>
 80080a8:	0003      	movs	r3, r0
 80080aa:	001a      	movs	r2, r3
 80080ac:	003b      	movs	r3, r7
 80080ae:	189a      	adds	r2, r3, r2
 80080b0:	4b64      	ldr	r3, [pc, #400]	; (8008244 <send_location_packet_via_sms+0x2b0>)
 80080b2:	0010      	movs	r0, r2
 80080b4:	0019      	movs	r1, r3
 80080b6:	2303      	movs	r3, #3
 80080b8:	001a      	movs	r2, r3
 80080ba:	f006 feb3 	bl	800ee24 <memcpy>
	//			strcat(temMsg, "AT+CMGS=\"3322336979\"\r");
				// todo send 21 msg packet
				for (uint8_t i = 0; i < loopCount; i++) {
 80080be:	4b62      	ldr	r3, [pc, #392]	; (8008248 <send_location_packet_via_sms+0x2b4>)
 80080c0:	18fb      	adds	r3, r7, r3
 80080c2:	2200      	movs	r2, #0
 80080c4:	701a      	strb	r2, [r3, #0]
 80080c6:	e053      	b.n	8008170 <send_location_packet_via_sms+0x1dc>
					for (uint8_t y = 0; y < 18; y++) {
 80080c8:	4b60      	ldr	r3, [pc, #384]	; (800824c <send_location_packet_via_sms+0x2b8>)
 80080ca:	18fb      	adds	r3, r7, r3
 80080cc:	2200      	movs	r2, #0
 80080ce:	701a      	strb	r2, [r3, #0]
 80080d0:	e01f      	b.n	8008112 <send_location_packet_via_sms+0x17e>
						n += sprintf(&temMsg[n], "%d", bunchdata[i][y]);
 80080d2:	003a      	movs	r2, r7
 80080d4:	24fc      	movs	r4, #252	; 0xfc
 80080d6:	00a4      	lsls	r4, r4, #2
 80080d8:	193b      	adds	r3, r7, r4
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	18d0      	adds	r0, r2, r3
 80080de:	4b5a      	ldr	r3, [pc, #360]	; (8008248 <send_location_packet_via_sms+0x2b4>)
 80080e0:	18fb      	adds	r3, r7, r3
 80080e2:	781a      	ldrb	r2, [r3, #0]
 80080e4:	4d59      	ldr	r5, [pc, #356]	; (800824c <send_location_packet_via_sms+0x2b8>)
 80080e6:	197b      	adds	r3, r7, r5
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	494f      	ldr	r1, [pc, #316]	; (8008228 <send_location_packet_via_sms+0x294>)
 80080ec:	0152      	lsls	r2, r2, #5
 80080ee:	188a      	adds	r2, r1, r2
 80080f0:	5cd3      	ldrb	r3, [r2, r3]
 80080f2:	001a      	movs	r2, r3
 80080f4:	4b56      	ldr	r3, [pc, #344]	; (8008250 <send_location_packet_via_sms+0x2bc>)
 80080f6:	0019      	movs	r1, r3
 80080f8:	f006 fea6 	bl	800ee48 <siprintf>
 80080fc:	0002      	movs	r2, r0
 80080fe:	193b      	adds	r3, r7, r4
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	189b      	adds	r3, r3, r2
 8008104:	193a      	adds	r2, r7, r4
 8008106:	6013      	str	r3, [r2, #0]
					for (uint8_t y = 0; y < 18; y++) {
 8008108:	197b      	adds	r3, r7, r5
 800810a:	781a      	ldrb	r2, [r3, #0]
 800810c:	197b      	adds	r3, r7, r5
 800810e:	3201      	adds	r2, #1
 8008110:	701a      	strb	r2, [r3, #0]
 8008112:	4b4e      	ldr	r3, [pc, #312]	; (800824c <send_location_packet_via_sms+0x2b8>)
 8008114:	18fb      	adds	r3, r7, r3
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	2b11      	cmp	r3, #17
 800811a:	d9da      	bls.n	80080d2 <send_location_packet_via_sms+0x13e>
					}
					while (temMsg[tempCt] != NULL) {
 800811c:	e006      	b.n	800812c <send_location_packet_via_sms+0x198>
						tempCt++;
 800811e:	22fb      	movs	r2, #251	; 0xfb
 8008120:	0092      	lsls	r2, r2, #2
 8008122:	18bb      	adds	r3, r7, r2
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	3301      	adds	r3, #1
 8008128:	18ba      	adds	r2, r7, r2
 800812a:	6013      	str	r3, [r2, #0]
					while (temMsg[tempCt] != NULL) {
 800812c:	4b49      	ldr	r3, [pc, #292]	; (8008254 <send_location_packet_via_sms+0x2c0>)
 800812e:	21fe      	movs	r1, #254	; 0xfe
 8008130:	0089      	lsls	r1, r1, #2
 8008132:	185b      	adds	r3, r3, r1
 8008134:	19da      	adds	r2, r3, r7
 8008136:	20fb      	movs	r0, #251	; 0xfb
 8008138:	0080      	lsls	r0, r0, #2
 800813a:	183b      	adds	r3, r7, r0
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	18d3      	adds	r3, r2, r3
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d1eb      	bne.n	800811e <send_location_packet_via_sms+0x18a>
					}
					temMsg[tempCt] = ',';
 8008146:	4b43      	ldr	r3, [pc, #268]	; (8008254 <send_location_packet_via_sms+0x2c0>)
 8008148:	185b      	adds	r3, r3, r1
 800814a:	19da      	adds	r2, r3, r7
 800814c:	183b      	adds	r3, r7, r0
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	18d3      	adds	r3, r2, r3
 8008152:	222c      	movs	r2, #44	; 0x2c
 8008154:	701a      	strb	r2, [r3, #0]
					n++;
 8008156:	22fc      	movs	r2, #252	; 0xfc
 8008158:	0092      	lsls	r2, r2, #2
 800815a:	18bb      	adds	r3, r7, r2
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	3301      	adds	r3, #1
 8008160:	18ba      	adds	r2, r7, r2
 8008162:	6013      	str	r3, [r2, #0]
				for (uint8_t i = 0; i < loopCount; i++) {
 8008164:	4938      	ldr	r1, [pc, #224]	; (8008248 <send_location_packet_via_sms+0x2b4>)
 8008166:	187b      	adds	r3, r7, r1
 8008168:	781a      	ldrb	r2, [r3, #0]
 800816a:	187b      	adds	r3, r7, r1
 800816c:	3201      	adds	r2, #1
 800816e:	701a      	strb	r2, [r3, #0]
 8008170:	4b35      	ldr	r3, [pc, #212]	; (8008248 <send_location_packet_via_sms+0x2b4>)
 8008172:	18fa      	adds	r2, r7, r3
 8008174:	4b2b      	ldr	r3, [pc, #172]	; (8008224 <send_location_packet_via_sms+0x290>)
 8008176:	18fb      	adds	r3, r7, r3
 8008178:	7812      	ldrb	r2, [r2, #0]
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	429a      	cmp	r2, r3
 800817e:	d3a3      	bcc.n	80080c8 <send_location_packet_via_sms+0x134>
				}
				tempCt = 0;
 8008180:	2300      	movs	r3, #0
 8008182:	22fb      	movs	r2, #251	; 0xfb
 8008184:	0092      	lsls	r2, r2, #2
 8008186:	18ba      	adds	r2, r7, r2
 8008188:	6013      	str	r3, [r2, #0]
				while (temMsg[tempCt] != NULL) {
 800818a:	e006      	b.n	800819a <send_location_packet_via_sms+0x206>
					tempCt++;
 800818c:	22fb      	movs	r2, #251	; 0xfb
 800818e:	0092      	lsls	r2, r2, #2
 8008190:	18bb      	adds	r3, r7, r2
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	3301      	adds	r3, #1
 8008196:	18ba      	adds	r2, r7, r2
 8008198:	6013      	str	r3, [r2, #0]
				while (temMsg[tempCt] != NULL) {
 800819a:	4b2e      	ldr	r3, [pc, #184]	; (8008254 <send_location_packet_via_sms+0x2c0>)
 800819c:	21fe      	movs	r1, #254	; 0xfe
 800819e:	0089      	lsls	r1, r1, #2
 80081a0:	185b      	adds	r3, r3, r1
 80081a2:	19da      	adds	r2, r3, r7
 80081a4:	20fb      	movs	r0, #251	; 0xfb
 80081a6:	0080      	lsls	r0, r0, #2
 80081a8:	183b      	adds	r3, r7, r0
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	18d3      	adds	r3, r2, r3
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d1eb      	bne.n	800818c <send_location_packet_via_sms+0x1f8>
				}
				temMsg[tempCt] = 26;
 80081b4:	4b27      	ldr	r3, [pc, #156]	; (8008254 <send_location_packet_via_sms+0x2c0>)
 80081b6:	185b      	adds	r3, r3, r1
 80081b8:	19da      	adds	r2, r3, r7
 80081ba:	183b      	adds	r3, r7, r0
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	18d3      	adds	r3, r2, r3
 80081c0:	221a      	movs	r2, #26
 80081c2:	701a      	strb	r2, [r3, #0]
				send_command(temMsg, 12005, 7, 0, 0);
 80081c4:	4924      	ldr	r1, [pc, #144]	; (8008258 <send_location_packet_via_sms+0x2c4>)
 80081c6:	0038      	movs	r0, r7
 80081c8:	2300      	movs	r3, #0
 80081ca:	9300      	str	r3, [sp, #0]
 80081cc:	2300      	movs	r3, #0
 80081ce:	2207      	movs	r2, #7
 80081d0:	f7fe fb5c 	bl	800688c <send_command>
				dataSize = checkdatasize();
 80081d4:	4b11      	ldr	r3, [pc, #68]	; (800821c <send_location_packet_via_sms+0x288>)
 80081d6:	18fc      	adds	r4, r7, r3
 80081d8:	f7ff f864 	bl	80072a4 <checkdatasize>
 80081dc:	0003      	movs	r3, r0
 80081de:	7023      	strb	r3, [r4, #0]
				msgCounter++;
 80081e0:	4b0d      	ldr	r3, [pc, #52]	; (8008218 <send_location_packet_via_sms+0x284>)
 80081e2:	781b      	ldrb	r3, [r3, #0]
 80081e4:	3301      	adds	r3, #1
 80081e6:	b2da      	uxtb	r2, r3
 80081e8:	4b0b      	ldr	r3, [pc, #44]	; (8008218 <send_location_packet_via_sms+0x284>)
 80081ea:	701a      	strb	r2, [r3, #0]
		while (dataSize == 1 && msgCounter < msgCount) {
 80081ec:	4b0b      	ldr	r3, [pc, #44]	; (800821c <send_location_packet_via_sms+0x288>)
 80081ee:	18fb      	adds	r3, r7, r3
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	2b01      	cmp	r3, #1
 80081f4:	d106      	bne.n	8008204 <send_location_packet_via_sms+0x270>
 80081f6:	4b08      	ldr	r3, [pc, #32]	; (8008218 <send_location_packet_via_sms+0x284>)
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	2b09      	cmp	r3, #9
 80081fc:	d800      	bhi.n	8008200 <send_location_packet_via_sms+0x26c>
 80081fe:	e6df      	b.n	8007fc0 <send_location_packet_via_sms+0x2c>
			} else {
				break;
			}
		}
	}
}
 8008200:	e000      	b.n	8008204 <send_location_packet_via_sms+0x270>
				break;
 8008202:	46c0      	nop			; (mov r8, r8)
}
 8008204:	46c0      	nop			; (mov r8, r8)
 8008206:	46bd      	mov	sp, r7
 8008208:	23fe      	movs	r3, #254	; 0xfe
 800820a:	009b      	lsls	r3, r3, #2
 800820c:	449d      	add	sp, r3
 800820e:	bdb0      	pop	{r4, r5, r7, pc}
 8008210:	fffffc00 	.word	0xfffffc00
 8008214:	20000734 	.word	0x20000734
 8008218:	2000073c 	.word	0x2000073c
 800821c:	000003f7 	.word	0x000003f7
 8008220:	20000d1d 	.word	0x20000d1d
 8008224:	000003f6 	.word	0x000003f6
 8008228:	20000a74 	.word	0x20000a74
 800822c:	080132e0 	.word	0x080132e0
 8008230:	20000a2d 	.word	0x20000a2d
 8008234:	000003f5 	.word	0x000003f5
 8008238:	20000a54 	.word	0x20000a54
 800823c:	080134d8 	.word	0x080134d8
 8008240:	20000008 	.word	0x20000008
 8008244:	080134e4 	.word	0x080134e4
 8008248:	000003eb 	.word	0x000003eb
 800824c:	000003ea 	.word	0x000003ea
 8008250:	080134f4 	.word	0x080134f4
 8008254:	fffffc08 	.word	0xfffffc08
 8008258:	00002ee5 	.word	0x00002ee5

0800825c <int2string>:
char* int2string(int num, char *str) {
 800825c:	b580      	push	{r7, lr}
 800825e:	b082      	sub	sp, #8
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
	if (str == NULL) {
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d101      	bne.n	8008270 <int2string+0x14>
		return NULL;
 800826c:	2300      	movs	r3, #0
 800826e:	e006      	b.n	800827e <int2string+0x22>
	}
	sprintf(str, "%d", num);
 8008270:	687a      	ldr	r2, [r7, #4]
 8008272:	4905      	ldr	r1, [pc, #20]	; (8008288 <int2string+0x2c>)
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	0018      	movs	r0, r3
 8008278:	f006 fde6 	bl	800ee48 <siprintf>
	return str;
 800827c:	683b      	ldr	r3, [r7, #0]
}
 800827e:	0018      	movs	r0, r3
 8008280:	46bd      	mov	sp, r7
 8008282:	b002      	add	sp, #8
 8008284:	bd80      	pop	{r7, pc}
 8008286:	46c0      	nop			; (mov r8, r8)
 8008288:	080134f4 	.word	0x080134f4

0800828c <check_command_SERVER>:

void check_command_SERVER(char* command){
 800828c:	b590      	push	{r4, r7, lr}
 800828e:	b085      	sub	sp, #20
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
		    //check for data integrity by counting commas.
		    //there must be 2 commas in total.
		    uint8_t commaPosition[2]={0,0};
 8008294:	2308      	movs	r3, #8
 8008296:	18fb      	adds	r3, r7, r3
 8008298:	2200      	movs	r2, #0
 800829a:	801a      	strh	r2, [r3, #0]
		    uint8_t totalCommas=0;
 800829c:	230f      	movs	r3, #15
 800829e:	18fb      	adds	r3, r7, r3
 80082a0:	2200      	movs	r2, #0
 80082a2:	701a      	strb	r2, [r3, #0]
		    for (uint8_t a=0;a<MAX_COMMAND_LEN;a++){
 80082a4:	230e      	movs	r3, #14
 80082a6:	18fb      	adds	r3, r7, r3
 80082a8:	2200      	movs	r2, #0
 80082aa:	701a      	strb	r2, [r3, #0]
 80082ac:	e01f      	b.n	80082ee <check_command_SERVER+0x62>
		        if(command[a]==','){
 80082ae:	210e      	movs	r1, #14
 80082b0:	187b      	adds	r3, r7, r1
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	687a      	ldr	r2, [r7, #4]
 80082b6:	18d3      	adds	r3, r2, r3
 80082b8:	781b      	ldrb	r3, [r3, #0]
 80082ba:	2b2c      	cmp	r3, #44	; 0x2c
 80082bc:	d111      	bne.n	80082e2 <check_command_SERVER+0x56>
		            if(totalCommas<2){
 80082be:	220f      	movs	r2, #15
 80082c0:	18bb      	adds	r3, r7, r2
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d806      	bhi.n	80082d6 <check_command_SERVER+0x4a>
		                commaPosition[totalCommas]=a;
 80082c8:	18bb      	adds	r3, r7, r2
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	2208      	movs	r2, #8
 80082ce:	18ba      	adds	r2, r7, r2
 80082d0:	1879      	adds	r1, r7, r1
 80082d2:	7809      	ldrb	r1, [r1, #0]
 80082d4:	54d1      	strb	r1, [r2, r3]
		            }
		            totalCommas++;
 80082d6:	210f      	movs	r1, #15
 80082d8:	187b      	adds	r3, r7, r1
 80082da:	781a      	ldrb	r2, [r3, #0]
 80082dc:	187b      	adds	r3, r7, r1
 80082de:	3201      	adds	r2, #1
 80082e0:	701a      	strb	r2, [r3, #0]
		    for (uint8_t a=0;a<MAX_COMMAND_LEN;a++){
 80082e2:	210e      	movs	r1, #14
 80082e4:	187b      	adds	r3, r7, r1
 80082e6:	781a      	ldrb	r2, [r3, #0]
 80082e8:	187b      	adds	r3, r7, r1
 80082ea:	3201      	adds	r2, #1
 80082ec:	701a      	strb	r2, [r3, #0]
 80082ee:	230e      	movs	r3, #14
 80082f0:	18fb      	adds	r3, r7, r3
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	2b31      	cmp	r3, #49	; 0x31
 80082f6:	d9da      	bls.n	80082ae <check_command_SERVER+0x22>
		        }
		    }
		    if(totalCommas ==2 && commaPosition[0] == 6 ){
 80082f8:	230f      	movs	r3, #15
 80082fa:	18fb      	adds	r3, r7, r3
 80082fc:	781b      	ldrb	r3, [r3, #0]
 80082fe:	2b02      	cmp	r3, #2
 8008300:	d162      	bne.n	80083c8 <check_command_SERVER+0x13c>
 8008302:	2408      	movs	r4, #8
 8008304:	193b      	adds	r3, r7, r4
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	2b06      	cmp	r3, #6
 800830a:	d15d      	bne.n	80083c8 <check_command_SERVER+0x13c>
		        //two commas found, and first one is on 6th index.
		        //data is good.
		    	memset(portAdd,0,sizeof(portAdd));
 800830c:	4b30      	ldr	r3, [pc, #192]	; (80083d0 <check_command_SERVER+0x144>)
 800830e:	2206      	movs	r2, #6
 8008310:	2100      	movs	r1, #0
 8008312:	0018      	movs	r0, r3
 8008314:	f006 fd8f 	bl	800ee36 <memset>
		    	memset(domainAdd,0,sizeof(domainAdd));
 8008318:	4b2e      	ldr	r3, [pc, #184]	; (80083d4 <check_command_SERVER+0x148>)
 800831a:	2233      	movs	r2, #51	; 0x33
 800831c:	2100      	movs	r1, #0
 800831e:	0018      	movs	r0, r3
 8008320:	f006 fd89 	bl	800ee36 <memset>

		        //extract dns
	            for(uint8_t a=commaPosition[0]+1;a<commaPosition[1];a++){
 8008324:	193b      	adds	r3, r7, r4
 8008326:	781a      	ldrb	r2, [r3, #0]
 8008328:	230d      	movs	r3, #13
 800832a:	18fb      	adds	r3, r7, r3
 800832c:	3201      	adds	r2, #1
 800832e:	701a      	strb	r2, [r3, #0]
 8008330:	e013      	b.n	800835a <check_command_SERVER+0xce>
	                    domainAdd[a-(commaPosition[0]+1)]=command[a];
 8008332:	200d      	movs	r0, #13
 8008334:	183b      	adds	r3, r7, r0
 8008336:	781b      	ldrb	r3, [r3, #0]
 8008338:	687a      	ldr	r2, [r7, #4]
 800833a:	18d2      	adds	r2, r2, r3
 800833c:	183b      	adds	r3, r7, r0
 800833e:	7819      	ldrb	r1, [r3, #0]
 8008340:	2308      	movs	r3, #8
 8008342:	18fb      	adds	r3, r7, r3
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	3301      	adds	r3, #1
 8008348:	1acb      	subs	r3, r1, r3
 800834a:	7811      	ldrb	r1, [r2, #0]
 800834c:	4a21      	ldr	r2, [pc, #132]	; (80083d4 <check_command_SERVER+0x148>)
 800834e:	54d1      	strb	r1, [r2, r3]
	            for(uint8_t a=commaPosition[0]+1;a<commaPosition[1];a++){
 8008350:	183b      	adds	r3, r7, r0
 8008352:	781a      	ldrb	r2, [r3, #0]
 8008354:	183b      	adds	r3, r7, r0
 8008356:	3201      	adds	r2, #1
 8008358:	701a      	strb	r2, [r3, #0]
 800835a:	2108      	movs	r1, #8
 800835c:	187b      	adds	r3, r7, r1
 800835e:	785b      	ldrb	r3, [r3, #1]
 8008360:	220d      	movs	r2, #13
 8008362:	18ba      	adds	r2, r7, r2
 8008364:	7812      	ldrb	r2, [r2, #0]
 8008366:	429a      	cmp	r2, r3
 8008368:	d3e3      	bcc.n	8008332 <check_command_SERVER+0xa6>
	                }
	            //extract port
	    	    for(uint8_t a=commaPosition[1]+1;a<commaPosition[1]+7;a++){
 800836a:	187b      	adds	r3, r7, r1
 800836c:	785a      	ldrb	r2, [r3, #1]
 800836e:	230c      	movs	r3, #12
 8008370:	18fb      	adds	r3, r7, r3
 8008372:	3201      	adds	r2, #1
 8008374:	701a      	strb	r2, [r3, #0]
 8008376:	e01b      	b.n	80083b0 <check_command_SERVER+0x124>
	    	        if(command[a]!=NULL){
 8008378:	210c      	movs	r1, #12
 800837a:	187b      	adds	r3, r7, r1
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	18d3      	adds	r3, r2, r3
 8008382:	781b      	ldrb	r3, [r3, #0]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d00d      	beq.n	80083a4 <check_command_SERVER+0x118>
	    	            portAdd[a-(commaPosition[1]+1)] = command[a];
 8008388:	187b      	adds	r3, r7, r1
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	18d2      	adds	r2, r2, r3
 8008390:	187b      	adds	r3, r7, r1
 8008392:	7819      	ldrb	r1, [r3, #0]
 8008394:	2308      	movs	r3, #8
 8008396:	18fb      	adds	r3, r7, r3
 8008398:	785b      	ldrb	r3, [r3, #1]
 800839a:	3301      	adds	r3, #1
 800839c:	1acb      	subs	r3, r1, r3
 800839e:	7811      	ldrb	r1, [r2, #0]
 80083a0:	4a0b      	ldr	r2, [pc, #44]	; (80083d0 <check_command_SERVER+0x144>)
 80083a2:	54d1      	strb	r1, [r2, r3]
	    	    for(uint8_t a=commaPosition[1]+1;a<commaPosition[1]+7;a++){
 80083a4:	210c      	movs	r1, #12
 80083a6:	187b      	adds	r3, r7, r1
 80083a8:	781a      	ldrb	r2, [r3, #0]
 80083aa:	187b      	adds	r3, r7, r1
 80083ac:	3201      	adds	r2, #1
 80083ae:	701a      	strb	r2, [r3, #0]
 80083b0:	2308      	movs	r3, #8
 80083b2:	18fb      	adds	r3, r7, r3
 80083b4:	785b      	ldrb	r3, [r3, #1]
 80083b6:	1d9a      	adds	r2, r3, #6
 80083b8:	230c      	movs	r3, #12
 80083ba:	18fb      	adds	r3, r7, r3
 80083bc:	781b      	ldrb	r3, [r3, #0]
 80083be:	429a      	cmp	r2, r3
 80083c0:	dada      	bge.n	8008378 <check_command_SERVER+0xec>
	    	        }
	    	    }
	    	    save_to_flash(0);
 80083c2:	2000      	movs	r0, #0
 80083c4:	f7fe f8d2 	bl	800656c <save_to_flash>
	    	    //todo save to flash please.
		    }
		    else{
//		        printf("Data is bad");
		    }
}
 80083c8:	46c0      	nop			; (mov r8, r8)
 80083ca:	46bd      	mov	sp, r7
 80083cc:	b005      	add	sp, #20
 80083ce:	bd90      	pop	{r4, r7, pc}
 80083d0:	20000030 	.word	0x20000030
 80083d4:	20000038 	.word	0x20000038

080083d8 <check_command_RELAY>:
void check_command_RELAY(char* sCommand){
 80083d8:	b580      	push	{r7, lr}
 80083da:	b082      	sub	sp, #8
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
	if(sCommand[6]=='1'){
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	3306      	adds	r3, #6
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	2b31      	cmp	r3, #49	; 0x31
 80083e8:	d114      	bne.n	8008414 <check_command_RELAY+0x3c>
		if(isGpsValid == 1 && gpsSpeed < 20){
 80083ea:	4b15      	ldr	r3, [pc, #84]	; (8008440 <check_command_RELAY+0x68>)
 80083ec:	781b      	ldrb	r3, [r3, #0]
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	d121      	bne.n	8008436 <check_command_RELAY+0x5e>
 80083f2:	4b14      	ldr	r3, [pc, #80]	; (8008444 <check_command_RELAY+0x6c>)
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	2b13      	cmp	r3, #19
 80083f8:	d81d      	bhi.n	8008436 <check_command_RELAY+0x5e>
			//SWITCH OFF THE CAR
			HAL_GPIO_WritePin(OUTPUT_1_GPIO_Port, OUTPUT_1_Pin, 1);
 80083fa:	4b13      	ldr	r3, [pc, #76]	; (8008448 <check_command_RELAY+0x70>)
 80083fc:	2201      	movs	r2, #1
 80083fe:	2102      	movs	r1, #2
 8008400:	0018      	movs	r0, r3
 8008402:	f001 fece 	bl	800a1a2 <HAL_GPIO_WritePin>
			relayState = 1;
 8008406:	4b11      	ldr	r3, [pc, #68]	; (800844c <check_command_RELAY+0x74>)
 8008408:	2201      	movs	r2, #1
 800840a:	701a      	strb	r2, [r3, #0]
			save_to_flash(0);
 800840c:	2000      	movs	r0, #0
 800840e:	f7fe f8ad 	bl	800656c <save_to_flash>
		//SWITCH ON THE CAR
		HAL_GPIO_WritePin(OUTPUT_1_GPIO_Port, OUTPUT_1_Pin, 0);
		relayState = 0;
		save_to_flash(0);
	}
}
 8008412:	e010      	b.n	8008436 <check_command_RELAY+0x5e>
	else if(sCommand[6] == '0'){
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	3306      	adds	r3, #6
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	2b30      	cmp	r3, #48	; 0x30
 800841c:	d10b      	bne.n	8008436 <check_command_RELAY+0x5e>
		HAL_GPIO_WritePin(OUTPUT_1_GPIO_Port, OUTPUT_1_Pin, 0);
 800841e:	4b0a      	ldr	r3, [pc, #40]	; (8008448 <check_command_RELAY+0x70>)
 8008420:	2200      	movs	r2, #0
 8008422:	2102      	movs	r1, #2
 8008424:	0018      	movs	r0, r3
 8008426:	f001 febc 	bl	800a1a2 <HAL_GPIO_WritePin>
		relayState = 0;
 800842a:	4b08      	ldr	r3, [pc, #32]	; (800844c <check_command_RELAY+0x74>)
 800842c:	2200      	movs	r2, #0
 800842e:	701a      	strb	r2, [r3, #0]
		save_to_flash(0);
 8008430:	2000      	movs	r0, #0
 8008432:	f7fe f89b 	bl	800656c <save_to_flash>
}
 8008436:	46c0      	nop			; (mov r8, r8)
 8008438:	46bd      	mov	sp, r7
 800843a:	b002      	add	sp, #8
 800843c:	bd80      	pop	{r7, pc}
 800843e:	46c0      	nop			; (mov r8, r8)
 8008440:	20000722 	.word	0x20000722
 8008444:	20000723 	.word	0x20000723
 8008448:	50000400 	.word	0x50000400
 800844c:	20000724 	.word	0x20000724

08008450 <check_command_TIMER>:
void check_command_TIMER(char* command){
 8008450:	b590      	push	{r4, r7, lr}
 8008452:	b089      	sub	sp, #36	; 0x24
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]

    //check for data integrity by counting commas.
    //there must be 2 commas in total.
    //t1 and t2 both must no be greater than 3 chars.

    uint8_t commaPosition[2]={0,0};
 8008458:	230c      	movs	r3, #12
 800845a:	18fb      	adds	r3, r7, r3
 800845c:	2200      	movs	r2, #0
 800845e:	801a      	strh	r2, [r3, #0]
    uint8_t totalCommas=0;
 8008460:	231f      	movs	r3, #31
 8008462:	18fb      	adds	r3, r7, r3
 8008464:	2200      	movs	r2, #0
 8008466:	701a      	strb	r2, [r3, #0]
    for (uint8_t a=0;a<MAX_COMMAND_LEN;a++){
 8008468:	231e      	movs	r3, #30
 800846a:	18fb      	adds	r3, r7, r3
 800846c:	2200      	movs	r2, #0
 800846e:	701a      	strb	r2, [r3, #0]
 8008470:	e01f      	b.n	80084b2 <check_command_TIMER+0x62>
        if(command[a]==','){
 8008472:	211e      	movs	r1, #30
 8008474:	187b      	adds	r3, r7, r1
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	687a      	ldr	r2, [r7, #4]
 800847a:	18d3      	adds	r3, r2, r3
 800847c:	781b      	ldrb	r3, [r3, #0]
 800847e:	2b2c      	cmp	r3, #44	; 0x2c
 8008480:	d111      	bne.n	80084a6 <check_command_TIMER+0x56>
            if(totalCommas<2){
 8008482:	221f      	movs	r2, #31
 8008484:	18bb      	adds	r3, r7, r2
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	2b01      	cmp	r3, #1
 800848a:	d806      	bhi.n	800849a <check_command_TIMER+0x4a>
                commaPosition[totalCommas]=a;
 800848c:	18bb      	adds	r3, r7, r2
 800848e:	781b      	ldrb	r3, [r3, #0]
 8008490:	220c      	movs	r2, #12
 8008492:	18ba      	adds	r2, r7, r2
 8008494:	1879      	adds	r1, r7, r1
 8008496:	7809      	ldrb	r1, [r1, #0]
 8008498:	54d1      	strb	r1, [r2, r3]
            }
            totalCommas++;
 800849a:	211f      	movs	r1, #31
 800849c:	187b      	adds	r3, r7, r1
 800849e:	781a      	ldrb	r2, [r3, #0]
 80084a0:	187b      	adds	r3, r7, r1
 80084a2:	3201      	adds	r2, #1
 80084a4:	701a      	strb	r2, [r3, #0]
    for (uint8_t a=0;a<MAX_COMMAND_LEN;a++){
 80084a6:	211e      	movs	r1, #30
 80084a8:	187b      	adds	r3, r7, r1
 80084aa:	781a      	ldrb	r2, [r3, #0]
 80084ac:	187b      	adds	r3, r7, r1
 80084ae:	3201      	adds	r2, #1
 80084b0:	701a      	strb	r2, [r3, #0]
 80084b2:	231e      	movs	r3, #30
 80084b4:	18fb      	adds	r3, r7, r3
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	2b31      	cmp	r3, #49	; 0x31
 80084ba:	d9da      	bls.n	8008472 <check_command_TIMER+0x22>
        }
    }
    uint8_t comaDiff = 0;
 80084bc:	201b      	movs	r0, #27
 80084be:	183b      	adds	r3, r7, r0
 80084c0:	2200      	movs	r2, #0
 80084c2:	701a      	strb	r2, [r3, #0]
    comaDiff = commaPosition[1] - commaPosition[0];
 80084c4:	240c      	movs	r4, #12
 80084c6:	193b      	adds	r3, r7, r4
 80084c8:	7859      	ldrb	r1, [r3, #1]
 80084ca:	193b      	adds	r3, r7, r4
 80084cc:	781a      	ldrb	r2, [r3, #0]
 80084ce:	183b      	adds	r3, r7, r0
 80084d0:	1a8a      	subs	r2, r1, r2
 80084d2:	701a      	strb	r2, [r3, #0]
    if(totalCommas ==2
 80084d4:	231f      	movs	r3, #31
 80084d6:	18fb      	adds	r3, r7, r3
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	2b02      	cmp	r3, #2
 80084dc:	d000      	beq.n	80084e0 <check_command_TIMER+0x90>
 80084de:	e0af      	b.n	8008640 <check_command_TIMER+0x1f0>
    && commaPosition[0] == 5
 80084e0:	193b      	adds	r3, r7, r4
 80084e2:	781b      	ldrb	r3, [r3, #0]
 80084e4:	2b05      	cmp	r3, #5
 80084e6:	d000      	beq.n	80084ea <check_command_TIMER+0x9a>
 80084e8:	e0aa      	b.n	8008640 <check_command_TIMER+0x1f0>
    && comaDiff < 5
 80084ea:	183b      	adds	r3, r7, r0
 80084ec:	781b      	ldrb	r3, [r3, #0]
 80084ee:	2b04      	cmp	r3, #4
 80084f0:	d900      	bls.n	80084f4 <check_command_TIMER+0xa4>
 80084f2:	e0a5      	b.n	8008640 <check_command_TIMER+0x1f0>
    && comaDiff > 1){
 80084f4:	183b      	adds	r3, r7, r0
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d800      	bhi.n	80084fe <check_command_TIMER+0xae>
 80084fc:	e0a0      	b.n	8008640 <check_command_TIMER+0x1f0>
        //two commas found, and first one is on 5th index.
        //t1 has 1-3 chars
        //data is good.
    	memset(t1,0,sizeof(t1));
 80084fe:	2314      	movs	r3, #20
 8008500:	18fb      	adds	r3, r7, r3
 8008502:	2204      	movs	r2, #4
 8008504:	2100      	movs	r1, #0
 8008506:	0018      	movs	r0, r3
 8008508:	f006 fc95 	bl	800ee36 <memset>
    	memset(t2,0,sizeof(t2));
 800850c:	2310      	movs	r3, #16
 800850e:	18fb      	adds	r3, r7, r3
 8008510:	2204      	movs	r2, #4
 8008512:	2100      	movs	r1, #0
 8008514:	0018      	movs	r0, r3
 8008516:	f006 fc8e 	bl	800ee36 <memset>

        //extract t1
        for(uint8_t a=commaPosition[0]+1;a<commaPosition[1];a++){
 800851a:	193b      	adds	r3, r7, r4
 800851c:	781a      	ldrb	r2, [r3, #0]
 800851e:	231d      	movs	r3, #29
 8008520:	18fb      	adds	r3, r7, r3
 8008522:	3201      	adds	r2, #1
 8008524:	701a      	strb	r2, [r3, #0]
 8008526:	e014      	b.n	8008552 <check_command_TIMER+0x102>
                t1[a-(commaPosition[0]+1)]=command[a];
 8008528:	201d      	movs	r0, #29
 800852a:	183b      	adds	r3, r7, r0
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	18d2      	adds	r2, r2, r3
 8008532:	183b      	adds	r3, r7, r0
 8008534:	7819      	ldrb	r1, [r3, #0]
 8008536:	230c      	movs	r3, #12
 8008538:	18fb      	adds	r3, r7, r3
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	3301      	adds	r3, #1
 800853e:	1acb      	subs	r3, r1, r3
 8008540:	7811      	ldrb	r1, [r2, #0]
 8008542:	2214      	movs	r2, #20
 8008544:	18ba      	adds	r2, r7, r2
 8008546:	54d1      	strb	r1, [r2, r3]
        for(uint8_t a=commaPosition[0]+1;a<commaPosition[1];a++){
 8008548:	183b      	adds	r3, r7, r0
 800854a:	781a      	ldrb	r2, [r3, #0]
 800854c:	183b      	adds	r3, r7, r0
 800854e:	3201      	adds	r2, #1
 8008550:	701a      	strb	r2, [r3, #0]
 8008552:	210c      	movs	r1, #12
 8008554:	187b      	adds	r3, r7, r1
 8008556:	785b      	ldrb	r3, [r3, #1]
 8008558:	221d      	movs	r2, #29
 800855a:	18ba      	adds	r2, r7, r2
 800855c:	7812      	ldrb	r2, [r2, #0]
 800855e:	429a      	cmp	r2, r3
 8008560:	d3e2      	bcc.n	8008528 <check_command_TIMER+0xd8>
            }
        //extract t2
	    for(uint8_t a=commaPosition[1]+1;a<commaPosition[1]+4;a++){
 8008562:	187b      	adds	r3, r7, r1
 8008564:	785a      	ldrb	r2, [r3, #1]
 8008566:	231c      	movs	r3, #28
 8008568:	18fb      	adds	r3, r7, r3
 800856a:	3201      	adds	r2, #1
 800856c:	701a      	strb	r2, [r3, #0]
 800856e:	e01b      	b.n	80085a8 <check_command_TIMER+0x158>
	        if(command[a]!=NULL){
 8008570:	201c      	movs	r0, #28
 8008572:	183b      	adds	r3, r7, r0
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	687a      	ldr	r2, [r7, #4]
 8008578:	18d3      	adds	r3, r2, r3
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d01d      	beq.n	80085bc <check_command_TIMER+0x16c>
	            t2[a-(commaPosition[1]+1)] = command[a];
 8008580:	183b      	adds	r3, r7, r0
 8008582:	781b      	ldrb	r3, [r3, #0]
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	18d2      	adds	r2, r2, r3
 8008588:	183b      	adds	r3, r7, r0
 800858a:	7819      	ldrb	r1, [r3, #0]
 800858c:	230c      	movs	r3, #12
 800858e:	18fb      	adds	r3, r7, r3
 8008590:	785b      	ldrb	r3, [r3, #1]
 8008592:	3301      	adds	r3, #1
 8008594:	1acb      	subs	r3, r1, r3
 8008596:	7811      	ldrb	r1, [r2, #0]
 8008598:	2210      	movs	r2, #16
 800859a:	18ba      	adds	r2, r7, r2
 800859c:	54d1      	strb	r1, [r2, r3]
	    for(uint8_t a=commaPosition[1]+1;a<commaPosition[1]+4;a++){
 800859e:	183b      	adds	r3, r7, r0
 80085a0:	781a      	ldrb	r2, [r3, #0]
 80085a2:	183b      	adds	r3, r7, r0
 80085a4:	3201      	adds	r2, #1
 80085a6:	701a      	strb	r2, [r3, #0]
 80085a8:	230c      	movs	r3, #12
 80085aa:	18fb      	adds	r3, r7, r3
 80085ac:	785b      	ldrb	r3, [r3, #1]
 80085ae:	1cda      	adds	r2, r3, #3
 80085b0:	231c      	movs	r3, #28
 80085b2:	18fb      	adds	r3, r7, r3
 80085b4:	781b      	ldrb	r3, [r3, #0]
 80085b6:	429a      	cmp	r2, r3
 80085b8:	dada      	bge.n	8008570 <check_command_TIMER+0x120>
 80085ba:	e000      	b.n	80085be <check_command_TIMER+0x16e>
	        }
	        else{
	        	break;
 80085bc:	46c0      	nop			; (mov r8, r8)
	        }
	    }
	    locationDataIntervalA = atoi(t1);
 80085be:	2314      	movs	r3, #20
 80085c0:	18fb      	adds	r3, r7, r3
 80085c2:	0018      	movs	r0, r3
 80085c4:	f006 fbd8 	bl	800ed78 <atoi>
 80085c8:	0003      	movs	r3, r0
 80085ca:	b2da      	uxtb	r2, r3
 80085cc:	4b1e      	ldr	r3, [pc, #120]	; (8008648 <check_command_TIMER+0x1f8>)
 80085ce:	701a      	strb	r2, [r3, #0]
	    locationDataIntervalB = atoi(t2);
 80085d0:	2310      	movs	r3, #16
 80085d2:	18fb      	adds	r3, r7, r3
 80085d4:	0018      	movs	r0, r3
 80085d6:	f006 fbcf 	bl	800ed78 <atoi>
 80085da:	0003      	movs	r3, r0
 80085dc:	b2da      	uxtb	r2, r3
 80085de:	4b1b      	ldr	r3, [pc, #108]	; (800864c <check_command_TIMER+0x1fc>)
 80085e0:	701a      	strb	r2, [r3, #0]
	    locationDataIntervalA = locationDataIntervalA > 180 ? 180 : locationDataIntervalA;
 80085e2:	4b19      	ldr	r3, [pc, #100]	; (8008648 <check_command_TIMER+0x1f8>)
 80085e4:	781b      	ldrb	r3, [r3, #0]
 80085e6:	1c1a      	adds	r2, r3, #0
 80085e8:	b2d3      	uxtb	r3, r2
 80085ea:	2bb4      	cmp	r3, #180	; 0xb4
 80085ec:	d901      	bls.n	80085f2 <check_command_TIMER+0x1a2>
 80085ee:	23b4      	movs	r3, #180	; 0xb4
 80085f0:	1c1a      	adds	r2, r3, #0
 80085f2:	b2d2      	uxtb	r2, r2
 80085f4:	4b14      	ldr	r3, [pc, #80]	; (8008648 <check_command_TIMER+0x1f8>)
 80085f6:	701a      	strb	r2, [r3, #0]
	    locationDataIntervalA = locationDataIntervalA < 5 ? 5 : locationDataIntervalA;
 80085f8:	4b13      	ldr	r3, [pc, #76]	; (8008648 <check_command_TIMER+0x1f8>)
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	1c1a      	adds	r2, r3, #0
 80085fe:	b2d3      	uxtb	r3, r2
 8008600:	2b05      	cmp	r3, #5
 8008602:	d201      	bcs.n	8008608 <check_command_TIMER+0x1b8>
 8008604:	2305      	movs	r3, #5
 8008606:	1c1a      	adds	r2, r3, #0
 8008608:	b2d2      	uxtb	r2, r2
 800860a:	4b0f      	ldr	r3, [pc, #60]	; (8008648 <check_command_TIMER+0x1f8>)
 800860c:	701a      	strb	r2, [r3, #0]
	    locationDataIntervalB = locationDataIntervalB > 180 ? 180 : locationDataIntervalB;
 800860e:	4b0f      	ldr	r3, [pc, #60]	; (800864c <check_command_TIMER+0x1fc>)
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	1c1a      	adds	r2, r3, #0
 8008614:	b2d3      	uxtb	r3, r2
 8008616:	2bb4      	cmp	r3, #180	; 0xb4
 8008618:	d901      	bls.n	800861e <check_command_TIMER+0x1ce>
 800861a:	23b4      	movs	r3, #180	; 0xb4
 800861c:	1c1a      	adds	r2, r3, #0
 800861e:	b2d2      	uxtb	r2, r2
 8008620:	4b0a      	ldr	r3, [pc, #40]	; (800864c <check_command_TIMER+0x1fc>)
 8008622:	701a      	strb	r2, [r3, #0]
	    locationDataIntervalB = locationDataIntervalB < 5 ? 5 : locationDataIntervalB;
 8008624:	4b09      	ldr	r3, [pc, #36]	; (800864c <check_command_TIMER+0x1fc>)
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	1c1a      	adds	r2, r3, #0
 800862a:	b2d3      	uxtb	r3, r2
 800862c:	2b05      	cmp	r3, #5
 800862e:	d201      	bcs.n	8008634 <check_command_TIMER+0x1e4>
 8008630:	2305      	movs	r3, #5
 8008632:	1c1a      	adds	r2, r3, #0
 8008634:	b2d2      	uxtb	r2, r2
 8008636:	4b05      	ldr	r3, [pc, #20]	; (800864c <check_command_TIMER+0x1fc>)
 8008638:	701a      	strb	r2, [r3, #0]
	    //todo save to flash please.
	    save_to_flash(0);
 800863a:	2000      	movs	r0, #0
 800863c:	f7fd ff96 	bl	800656c <save_to_flash>
    }
    else{
//		        printf("Data is bad");
    }
}
 8008640:	46c0      	nop			; (mov r8, r8)
 8008642:	46bd      	mov	sp, r7
 8008644:	b009      	add	sp, #36	; 0x24
 8008646:	bd90      	pop	{r4, r7, pc}
 8008648:	20000004 	.word	0x20000004
 800864c:	20000005 	.word	0x20000005

08008650 <check_command_MSGCFG>:

void check_command_MSGCFG(char* command){
 8008650:	b5b0      	push	{r4, r5, r7, lr}
 8008652:	b088      	sub	sp, #32
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
    char t1[4],t2[4];
    uint8_t cfgCode = 0;
 8008658:	231c      	movs	r3, #28
 800865a:	18fb      	adds	r3, r7, r3
 800865c:	2200      	movs	r2, #0
 800865e:	701a      	strb	r2, [r3, #0]
    //check for data integrity by counting commas.
    //there must be 2 commas in total.
    //t1 and t2 both must not be greater than 3 chars.

    uint8_t commaPosition[2]={0,0};
 8008660:	230c      	movs	r3, #12
 8008662:	18fb      	adds	r3, r7, r3
 8008664:	2200      	movs	r2, #0
 8008666:	801a      	strh	r2, [r3, #0]
    uint8_t totalCommas=0;
 8008668:	231f      	movs	r3, #31
 800866a:	18fb      	adds	r3, r7, r3
 800866c:	2200      	movs	r2, #0
 800866e:	701a      	strb	r2, [r3, #0]
    for (uint8_t a=0;a<MAX_COMMAND_LEN;a++){
 8008670:	231e      	movs	r3, #30
 8008672:	18fb      	adds	r3, r7, r3
 8008674:	2200      	movs	r2, #0
 8008676:	701a      	strb	r2, [r3, #0]
 8008678:	e01f      	b.n	80086ba <check_command_MSGCFG+0x6a>
        if(command[a]==','){
 800867a:	211e      	movs	r1, #30
 800867c:	187b      	adds	r3, r7, r1
 800867e:	781b      	ldrb	r3, [r3, #0]
 8008680:	687a      	ldr	r2, [r7, #4]
 8008682:	18d3      	adds	r3, r2, r3
 8008684:	781b      	ldrb	r3, [r3, #0]
 8008686:	2b2c      	cmp	r3, #44	; 0x2c
 8008688:	d111      	bne.n	80086ae <check_command_MSGCFG+0x5e>
            if(totalCommas<2){
 800868a:	221f      	movs	r2, #31
 800868c:	18bb      	adds	r3, r7, r2
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	2b01      	cmp	r3, #1
 8008692:	d806      	bhi.n	80086a2 <check_command_MSGCFG+0x52>
                commaPosition[totalCommas]=a;
 8008694:	18bb      	adds	r3, r7, r2
 8008696:	781b      	ldrb	r3, [r3, #0]
 8008698:	220c      	movs	r2, #12
 800869a:	18ba      	adds	r2, r7, r2
 800869c:	1879      	adds	r1, r7, r1
 800869e:	7809      	ldrb	r1, [r1, #0]
 80086a0:	54d1      	strb	r1, [r2, r3]
            }
            totalCommas++;
 80086a2:	211f      	movs	r1, #31
 80086a4:	187b      	adds	r3, r7, r1
 80086a6:	781a      	ldrb	r2, [r3, #0]
 80086a8:	187b      	adds	r3, r7, r1
 80086aa:	3201      	adds	r2, #1
 80086ac:	701a      	strb	r2, [r3, #0]
    for (uint8_t a=0;a<MAX_COMMAND_LEN;a++){
 80086ae:	211e      	movs	r1, #30
 80086b0:	187b      	adds	r3, r7, r1
 80086b2:	781a      	ldrb	r2, [r3, #0]
 80086b4:	187b      	adds	r3, r7, r1
 80086b6:	3201      	adds	r2, #1
 80086b8:	701a      	strb	r2, [r3, #0]
 80086ba:	231e      	movs	r3, #30
 80086bc:	18fb      	adds	r3, r7, r3
 80086be:	781b      	ldrb	r3, [r3, #0]
 80086c0:	2b31      	cmp	r3, #49	; 0x31
 80086c2:	d9da      	bls.n	800867a <check_command_MSGCFG+0x2a>
        }
    }
    uint8_t comaDiff = 0;
 80086c4:	201b      	movs	r0, #27
 80086c6:	183b      	adds	r3, r7, r0
 80086c8:	2200      	movs	r2, #0
 80086ca:	701a      	strb	r2, [r3, #0]
    comaDiff = commaPosition[1] - commaPosition[0];
 80086cc:	240c      	movs	r4, #12
 80086ce:	193b      	adds	r3, r7, r4
 80086d0:	7859      	ldrb	r1, [r3, #1]
 80086d2:	193b      	adds	r3, r7, r4
 80086d4:	781a      	ldrb	r2, [r3, #0]
 80086d6:	183b      	adds	r3, r7, r0
 80086d8:	1a8a      	subs	r2, r1, r2
 80086da:	701a      	strb	r2, [r3, #0]
    if(totalCommas ==2
 80086dc:	231f      	movs	r3, #31
 80086de:	18fb      	adds	r3, r7, r3
 80086e0:	781b      	ldrb	r3, [r3, #0]
 80086e2:	2b02      	cmp	r3, #2
 80086e4:	d000      	beq.n	80086e8 <check_command_MSGCFG+0x98>
 80086e6:	e076      	b.n	80087d6 <check_command_MSGCFG+0x186>
    && commaPosition[0] == 6
 80086e8:	193b      	adds	r3, r7, r4
 80086ea:	781b      	ldrb	r3, [r3, #0]
 80086ec:	2b06      	cmp	r3, #6
 80086ee:	d000      	beq.n	80086f2 <check_command_MSGCFG+0xa2>
 80086f0:	e071      	b.n	80087d6 <check_command_MSGCFG+0x186>
    && comaDiff == 2){
 80086f2:	183b      	adds	r3, r7, r0
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	2b02      	cmp	r3, #2
 80086f8:	d16d      	bne.n	80087d6 <check_command_MSGCFG+0x186>
        //two commas found, and first one is on 6th index.
        //t1 has 1 char
        //data is good.
    	memset(t1,0,sizeof(t1));
 80086fa:	2514      	movs	r5, #20
 80086fc:	197b      	adds	r3, r7, r5
 80086fe:	2204      	movs	r2, #4
 8008700:	2100      	movs	r1, #0
 8008702:	0018      	movs	r0, r3
 8008704:	f006 fb97 	bl	800ee36 <memset>
    	memset(t2,0,sizeof(t2));
 8008708:	2310      	movs	r3, #16
 800870a:	18fb      	adds	r3, r7, r3
 800870c:	2204      	movs	r2, #4
 800870e:	2100      	movs	r1, #0
 8008710:	0018      	movs	r0, r3
 8008712:	f006 fb90 	bl	800ee36 <memset>

        //extract t1
         t1[0]=command[commaPosition[0]+1];
 8008716:	0021      	movs	r1, r4
 8008718:	187b      	adds	r3, r7, r1
 800871a:	781b      	ldrb	r3, [r3, #0]
 800871c:	3301      	adds	r3, #1
 800871e:	687a      	ldr	r2, [r7, #4]
 8008720:	18d3      	adds	r3, r2, r3
 8008722:	781a      	ldrb	r2, [r3, #0]
 8008724:	197b      	adds	r3, r7, r5
 8008726:	701a      	strb	r2, [r3, #0]
        //extract t2
	    for(uint8_t a=commaPosition[1]+1;a<commaPosition[1]+4;a++){
 8008728:	187b      	adds	r3, r7, r1
 800872a:	785a      	ldrb	r2, [r3, #1]
 800872c:	231d      	movs	r3, #29
 800872e:	18fb      	adds	r3, r7, r3
 8008730:	3201      	adds	r2, #1
 8008732:	701a      	strb	r2, [r3, #0]
 8008734:	e01b      	b.n	800876e <check_command_MSGCFG+0x11e>
	        if(command[a]!=NULL){
 8008736:	201d      	movs	r0, #29
 8008738:	183b      	adds	r3, r7, r0
 800873a:	781b      	ldrb	r3, [r3, #0]
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	18d3      	adds	r3, r2, r3
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d01d      	beq.n	8008782 <check_command_MSGCFG+0x132>
	            t2[a-(commaPosition[1]+1)] = command[a];
 8008746:	183b      	adds	r3, r7, r0
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	687a      	ldr	r2, [r7, #4]
 800874c:	18d2      	adds	r2, r2, r3
 800874e:	183b      	adds	r3, r7, r0
 8008750:	7819      	ldrb	r1, [r3, #0]
 8008752:	230c      	movs	r3, #12
 8008754:	18fb      	adds	r3, r7, r3
 8008756:	785b      	ldrb	r3, [r3, #1]
 8008758:	3301      	adds	r3, #1
 800875a:	1acb      	subs	r3, r1, r3
 800875c:	7811      	ldrb	r1, [r2, #0]
 800875e:	2210      	movs	r2, #16
 8008760:	18ba      	adds	r2, r7, r2
 8008762:	54d1      	strb	r1, [r2, r3]
	    for(uint8_t a=commaPosition[1]+1;a<commaPosition[1]+4;a++){
 8008764:	183b      	adds	r3, r7, r0
 8008766:	781a      	ldrb	r2, [r3, #0]
 8008768:	183b      	adds	r3, r7, r0
 800876a:	3201      	adds	r2, #1
 800876c:	701a      	strb	r2, [r3, #0]
 800876e:	230c      	movs	r3, #12
 8008770:	18fb      	adds	r3, r7, r3
 8008772:	785b      	ldrb	r3, [r3, #1]
 8008774:	1cda      	adds	r2, r3, #3
 8008776:	231d      	movs	r3, #29
 8008778:	18fb      	adds	r3, r7, r3
 800877a:	781b      	ldrb	r3, [r3, #0]
 800877c:	429a      	cmp	r2, r3
 800877e:	dada      	bge.n	8008736 <check_command_MSGCFG+0xe6>
 8008780:	e000      	b.n	8008784 <check_command_MSGCFG+0x134>
	        }
	        else{
	        	break;
 8008782:	46c0      	nop			; (mov r8, r8)
	        }
	    }
	    cfgCode = atoi(t1);
 8008784:	2314      	movs	r3, #20
 8008786:	18fb      	adds	r3, r7, r3
 8008788:	0018      	movs	r0, r3
 800878a:	f006 faf5 	bl	800ed78 <atoi>
 800878e:	0002      	movs	r2, r0
 8008790:	211c      	movs	r1, #28
 8008792:	187b      	adds	r3, r7, r1
 8008794:	701a      	strb	r2, [r3, #0]
	    /*cfgCode:
	    	1 = TURN ON/OFF SENDING LOCATION PACKETS
	    */
	    if(cfgCode == 1){
 8008796:	187b      	adds	r3, r7, r1
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	2b01      	cmp	r3, #1
 800879c:	d118      	bne.n	80087d0 <check_command_MSGCFG+0x180>
	    	uint8_t state = atoi(t2);
 800879e:	2310      	movs	r3, #16
 80087a0:	18fb      	adds	r3, r7, r3
 80087a2:	0018      	movs	r0, r3
 80087a4:	f006 fae8 	bl	800ed78 <atoi>
 80087a8:	0002      	movs	r2, r0
 80087aa:	211a      	movs	r1, #26
 80087ac:	187b      	adds	r3, r7, r1
 80087ae:	701a      	strb	r2, [r3, #0]
	    	if(state == 0){
 80087b0:	187b      	adds	r3, r7, r1
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d103      	bne.n	80087c0 <check_command_MSGCFG+0x170>
	    		isSMSActive = 0;
 80087b8:	4b09      	ldr	r3, [pc, #36]	; (80087e0 <check_command_MSGCFG+0x190>)
 80087ba:	2200      	movs	r2, #0
 80087bc:	701a      	strb	r2, [r3, #0]
 80087be:	e007      	b.n	80087d0 <check_command_MSGCFG+0x180>
	    	}
	    	else if(state == 1){
 80087c0:	231a      	movs	r3, #26
 80087c2:	18fb      	adds	r3, r7, r3
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	d102      	bne.n	80087d0 <check_command_MSGCFG+0x180>
	    		isSMSActive = 1;
 80087ca:	4b05      	ldr	r3, [pc, #20]	; (80087e0 <check_command_MSGCFG+0x190>)
 80087cc:	2201      	movs	r2, #1
 80087ce:	701a      	strb	r2, [r3, #0]
	    	}
	    }
	    save_to_flash(0);
 80087d0:	2000      	movs	r0, #0
 80087d2:	f7fd fecb 	bl	800656c <save_to_flash>
    }
    else{
//		        printf("Data is bad");
    }
}
 80087d6:	46c0      	nop			; (mov r8, r8)
 80087d8:	46bd      	mov	sp, r7
 80087da:	b008      	add	sp, #32
 80087dc:	bdb0      	pop	{r4, r5, r7, pc}
 80087de:	46c0      	nop			; (mov r8, r8)
 80087e0:	20000734 	.word	0x20000734

080087e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80087e8:	b672      	cpsid	i
}
 80087ea:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80087ec:	e7fe      	b.n	80087ec <Error_Handler+0x8>
	...

080087f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b082      	sub	sp, #8
 80087f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80087f6:	4b0f      	ldr	r3, [pc, #60]	; (8008834 <HAL_MspInit+0x44>)
 80087f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80087fa:	4b0e      	ldr	r3, [pc, #56]	; (8008834 <HAL_MspInit+0x44>)
 80087fc:	2101      	movs	r1, #1
 80087fe:	430a      	orrs	r2, r1
 8008800:	641a      	str	r2, [r3, #64]	; 0x40
 8008802:	4b0c      	ldr	r3, [pc, #48]	; (8008834 <HAL_MspInit+0x44>)
 8008804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008806:	2201      	movs	r2, #1
 8008808:	4013      	ands	r3, r2
 800880a:	607b      	str	r3, [r7, #4]
 800880c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800880e:	4b09      	ldr	r3, [pc, #36]	; (8008834 <HAL_MspInit+0x44>)
 8008810:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008812:	4b08      	ldr	r3, [pc, #32]	; (8008834 <HAL_MspInit+0x44>)
 8008814:	2180      	movs	r1, #128	; 0x80
 8008816:	0549      	lsls	r1, r1, #21
 8008818:	430a      	orrs	r2, r1
 800881a:	63da      	str	r2, [r3, #60]	; 0x3c
 800881c:	4b05      	ldr	r3, [pc, #20]	; (8008834 <HAL_MspInit+0x44>)
 800881e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008820:	2380      	movs	r3, #128	; 0x80
 8008822:	055b      	lsls	r3, r3, #21
 8008824:	4013      	ands	r3, r2
 8008826:	603b      	str	r3, [r7, #0]
 8008828:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800882a:	46c0      	nop			; (mov r8, r8)
 800882c:	46bd      	mov	sp, r7
 800882e:	b002      	add	sp, #8
 8008830:	bd80      	pop	{r7, pc}
 8008832:	46c0      	nop			; (mov r8, r8)
 8008834:	40021000 	.word	0x40021000

08008838 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008838:	b590      	push	{r4, r7, lr}
 800883a:	b08b      	sub	sp, #44	; 0x2c
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008840:	2414      	movs	r4, #20
 8008842:	193b      	adds	r3, r7, r4
 8008844:	0018      	movs	r0, r3
 8008846:	2314      	movs	r3, #20
 8008848:	001a      	movs	r2, r3
 800884a:	2100      	movs	r1, #0
 800884c:	f006 faf3 	bl	800ee36 <memset>
  if(hspi->Instance==SPI1)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4a1f      	ldr	r2, [pc, #124]	; (80088d4 <HAL_SPI_MspInit+0x9c>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d137      	bne.n	80088ca <HAL_SPI_MspInit+0x92>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800885a:	4b1f      	ldr	r3, [pc, #124]	; (80088d8 <HAL_SPI_MspInit+0xa0>)
 800885c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800885e:	4b1e      	ldr	r3, [pc, #120]	; (80088d8 <HAL_SPI_MspInit+0xa0>)
 8008860:	2180      	movs	r1, #128	; 0x80
 8008862:	0149      	lsls	r1, r1, #5
 8008864:	430a      	orrs	r2, r1
 8008866:	641a      	str	r2, [r3, #64]	; 0x40
 8008868:	4b1b      	ldr	r3, [pc, #108]	; (80088d8 <HAL_SPI_MspInit+0xa0>)
 800886a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800886c:	2380      	movs	r3, #128	; 0x80
 800886e:	015b      	lsls	r3, r3, #5
 8008870:	4013      	ands	r3, r2
 8008872:	613b      	str	r3, [r7, #16]
 8008874:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008876:	4b18      	ldr	r3, [pc, #96]	; (80088d8 <HAL_SPI_MspInit+0xa0>)
 8008878:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800887a:	4b17      	ldr	r3, [pc, #92]	; (80088d8 <HAL_SPI_MspInit+0xa0>)
 800887c:	2102      	movs	r1, #2
 800887e:	430a      	orrs	r2, r1
 8008880:	635a      	str	r2, [r3, #52]	; 0x34
 8008882:	4b15      	ldr	r3, [pc, #84]	; (80088d8 <HAL_SPI_MspInit+0xa0>)
 8008884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008886:	2202      	movs	r2, #2
 8008888:	4013      	ands	r3, r2
 800888a:	60fb      	str	r3, [r7, #12]
 800888c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800888e:	0021      	movs	r1, r4
 8008890:	187b      	adds	r3, r7, r1
 8008892:	2238      	movs	r2, #56	; 0x38
 8008894:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008896:	187b      	adds	r3, r7, r1
 8008898:	2202      	movs	r2, #2
 800889a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800889c:	187b      	adds	r3, r7, r1
 800889e:	2200      	movs	r2, #0
 80088a0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80088a2:	187b      	adds	r3, r7, r1
 80088a4:	2200      	movs	r2, #0
 80088a6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80088a8:	187b      	adds	r3, r7, r1
 80088aa:	2200      	movs	r2, #0
 80088ac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80088ae:	187b      	adds	r3, r7, r1
 80088b0:	4a0a      	ldr	r2, [pc, #40]	; (80088dc <HAL_SPI_MspInit+0xa4>)
 80088b2:	0019      	movs	r1, r3
 80088b4:	0010      	movs	r0, r2
 80088b6:	f001 faf3 	bl	8009ea0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 3, 0);
 80088ba:	2200      	movs	r2, #0
 80088bc:	2103      	movs	r1, #3
 80088be:	2019      	movs	r0, #25
 80088c0:	f001 f9f0 	bl	8009ca4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80088c4:	2019      	movs	r0, #25
 80088c6:	f001 fa02 	bl	8009cce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80088ca:	46c0      	nop			; (mov r8, r8)
 80088cc:	46bd      	mov	sp, r7
 80088ce:	b00b      	add	sp, #44	; 0x2c
 80088d0:	bd90      	pop	{r4, r7, pc}
 80088d2:	46c0      	nop			; (mov r8, r8)
 80088d4:	40013000 	.word	0x40013000
 80088d8:	40021000 	.word	0x40021000
 80088dc:	50000400 	.word	0x50000400

080088e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80088e0:	b590      	push	{r4, r7, lr}
 80088e2:	b08f      	sub	sp, #60	; 0x3c
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088e8:	2424      	movs	r4, #36	; 0x24
 80088ea:	193b      	adds	r3, r7, r4
 80088ec:	0018      	movs	r0, r3
 80088ee:	2314      	movs	r3, #20
 80088f0:	001a      	movs	r2, r3
 80088f2:	2100      	movs	r1, #0
 80088f4:	f006 fa9f 	bl	800ee36 <memset>
  if(htim_base->Instance==TIM3)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a55      	ldr	r2, [pc, #340]	; (8008a54 <HAL_TIM_Base_MspInit+0x174>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d137      	bne.n	8008972 <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008902:	4b55      	ldr	r3, [pc, #340]	; (8008a58 <HAL_TIM_Base_MspInit+0x178>)
 8008904:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008906:	4b54      	ldr	r3, [pc, #336]	; (8008a58 <HAL_TIM_Base_MspInit+0x178>)
 8008908:	2102      	movs	r1, #2
 800890a:	430a      	orrs	r2, r1
 800890c:	63da      	str	r2, [r3, #60]	; 0x3c
 800890e:	4b52      	ldr	r3, [pc, #328]	; (8008a58 <HAL_TIM_Base_MspInit+0x178>)
 8008910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008912:	2202      	movs	r2, #2
 8008914:	4013      	ands	r3, r2
 8008916:	623b      	str	r3, [r7, #32]
 8008918:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800891a:	4b4f      	ldr	r3, [pc, #316]	; (8008a58 <HAL_TIM_Base_MspInit+0x178>)
 800891c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800891e:	4b4e      	ldr	r3, [pc, #312]	; (8008a58 <HAL_TIM_Base_MspInit+0x178>)
 8008920:	2101      	movs	r1, #1
 8008922:	430a      	orrs	r2, r1
 8008924:	635a      	str	r2, [r3, #52]	; 0x34
 8008926:	4b4c      	ldr	r3, [pc, #304]	; (8008a58 <HAL_TIM_Base_MspInit+0x178>)
 8008928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800892a:	2201      	movs	r2, #1
 800892c:	4013      	ands	r3, r2
 800892e:	61fb      	str	r3, [r7, #28]
 8008930:	69fb      	ldr	r3, [r7, #28]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = RI_Pin;
 8008932:	0021      	movs	r1, r4
 8008934:	187b      	adds	r3, r7, r1
 8008936:	2240      	movs	r2, #64	; 0x40
 8008938:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800893a:	187b      	adds	r3, r7, r1
 800893c:	2202      	movs	r2, #2
 800893e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8008940:	187b      	adds	r3, r7, r1
 8008942:	2202      	movs	r2, #2
 8008944:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008946:	187b      	adds	r3, r7, r1
 8008948:	2200      	movs	r2, #0
 800894a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800894c:	187b      	adds	r3, r7, r1
 800894e:	2201      	movs	r2, #1
 8008950:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(RI_GPIO_Port, &GPIO_InitStruct);
 8008952:	187a      	adds	r2, r7, r1
 8008954:	23a0      	movs	r3, #160	; 0xa0
 8008956:	05db      	lsls	r3, r3, #23
 8008958:	0011      	movs	r1, r2
 800895a:	0018      	movs	r0, r3
 800895c:	f001 faa0 	bl	8009ea0 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 8008960:	2200      	movs	r2, #0
 8008962:	2103      	movs	r1, #3
 8008964:	2010      	movs	r0, #16
 8008966:	f001 f99d 	bl	8009ca4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800896a:	2010      	movs	r0, #16
 800896c:	f001 f9af 	bl	8009cce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8008970:	e06c      	b.n	8008a4c <HAL_TIM_Base_MspInit+0x16c>
  else if(htim_base->Instance==TIM6)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4a39      	ldr	r2, [pc, #228]	; (8008a5c <HAL_TIM_Base_MspInit+0x17c>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d114      	bne.n	80089a6 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800897c:	4b36      	ldr	r3, [pc, #216]	; (8008a58 <HAL_TIM_Base_MspInit+0x178>)
 800897e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008980:	4b35      	ldr	r3, [pc, #212]	; (8008a58 <HAL_TIM_Base_MspInit+0x178>)
 8008982:	2110      	movs	r1, #16
 8008984:	430a      	orrs	r2, r1
 8008986:	63da      	str	r2, [r3, #60]	; 0x3c
 8008988:	4b33      	ldr	r3, [pc, #204]	; (8008a58 <HAL_TIM_Base_MspInit+0x178>)
 800898a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800898c:	2210      	movs	r2, #16
 800898e:	4013      	ands	r3, r2
 8008990:	61bb      	str	r3, [r7, #24]
 8008992:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_IRQn, 3, 0);
 8008994:	2200      	movs	r2, #0
 8008996:	2103      	movs	r1, #3
 8008998:	2011      	movs	r0, #17
 800899a:	f001 f983 	bl	8009ca4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800899e:	2011      	movs	r0, #17
 80089a0:	f001 f995 	bl	8009cce <HAL_NVIC_EnableIRQ>
}
 80089a4:	e052      	b.n	8008a4c <HAL_TIM_Base_MspInit+0x16c>
  else if(htim_base->Instance==TIM14)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4a2d      	ldr	r2, [pc, #180]	; (8008a60 <HAL_TIM_Base_MspInit+0x180>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d116      	bne.n	80089de <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80089b0:	4b29      	ldr	r3, [pc, #164]	; (8008a58 <HAL_TIM_Base_MspInit+0x178>)
 80089b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80089b4:	4b28      	ldr	r3, [pc, #160]	; (8008a58 <HAL_TIM_Base_MspInit+0x178>)
 80089b6:	2180      	movs	r1, #128	; 0x80
 80089b8:	0209      	lsls	r1, r1, #8
 80089ba:	430a      	orrs	r2, r1
 80089bc:	641a      	str	r2, [r3, #64]	; 0x40
 80089be:	4b26      	ldr	r3, [pc, #152]	; (8008a58 <HAL_TIM_Base_MspInit+0x178>)
 80089c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80089c2:	2380      	movs	r3, #128	; 0x80
 80089c4:	021b      	lsls	r3, r3, #8
 80089c6:	4013      	ands	r3, r2
 80089c8:	617b      	str	r3, [r7, #20]
 80089ca:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM14_IRQn, 2, 0);
 80089cc:	2200      	movs	r2, #0
 80089ce:	2102      	movs	r1, #2
 80089d0:	2013      	movs	r0, #19
 80089d2:	f001 f967 	bl	8009ca4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80089d6:	2013      	movs	r0, #19
 80089d8:	f001 f979 	bl	8009cce <HAL_NVIC_EnableIRQ>
}
 80089dc:	e036      	b.n	8008a4c <HAL_TIM_Base_MspInit+0x16c>
  else if(htim_base->Instance==TIM16)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4a20      	ldr	r2, [pc, #128]	; (8008a64 <HAL_TIM_Base_MspInit+0x184>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d116      	bne.n	8008a16 <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80089e8:	4b1b      	ldr	r3, [pc, #108]	; (8008a58 <HAL_TIM_Base_MspInit+0x178>)
 80089ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80089ec:	4b1a      	ldr	r3, [pc, #104]	; (8008a58 <HAL_TIM_Base_MspInit+0x178>)
 80089ee:	2180      	movs	r1, #128	; 0x80
 80089f0:	0289      	lsls	r1, r1, #10
 80089f2:	430a      	orrs	r2, r1
 80089f4:	641a      	str	r2, [r3, #64]	; 0x40
 80089f6:	4b18      	ldr	r3, [pc, #96]	; (8008a58 <HAL_TIM_Base_MspInit+0x178>)
 80089f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80089fa:	2380      	movs	r3, #128	; 0x80
 80089fc:	029b      	lsls	r3, r3, #10
 80089fe:	4013      	ands	r3, r2
 8008a00:	613b      	str	r3, [r7, #16]
 8008a02:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8008a04:	2200      	movs	r2, #0
 8008a06:	2100      	movs	r1, #0
 8008a08:	2015      	movs	r0, #21
 8008a0a:	f001 f94b 	bl	8009ca4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8008a0e:	2015      	movs	r0, #21
 8008a10:	f001 f95d 	bl	8009cce <HAL_NVIC_EnableIRQ>
}
 8008a14:	e01a      	b.n	8008a4c <HAL_TIM_Base_MspInit+0x16c>
  else if(htim_base->Instance==TIM17)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a13      	ldr	r2, [pc, #76]	; (8008a68 <HAL_TIM_Base_MspInit+0x188>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d115      	bne.n	8008a4c <HAL_TIM_Base_MspInit+0x16c>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8008a20:	4b0d      	ldr	r3, [pc, #52]	; (8008a58 <HAL_TIM_Base_MspInit+0x178>)
 8008a22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008a24:	4b0c      	ldr	r3, [pc, #48]	; (8008a58 <HAL_TIM_Base_MspInit+0x178>)
 8008a26:	2180      	movs	r1, #128	; 0x80
 8008a28:	02c9      	lsls	r1, r1, #11
 8008a2a:	430a      	orrs	r2, r1
 8008a2c:	641a      	str	r2, [r3, #64]	; 0x40
 8008a2e:	4b0a      	ldr	r3, [pc, #40]	; (8008a58 <HAL_TIM_Base_MspInit+0x178>)
 8008a30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008a32:	2380      	movs	r3, #128	; 0x80
 8008a34:	02db      	lsls	r3, r3, #11
 8008a36:	4013      	ands	r3, r2
 8008a38:	60fb      	str	r3, [r7, #12]
 8008a3a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 3, 0);
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	2103      	movs	r1, #3
 8008a40:	2016      	movs	r0, #22
 8008a42:	f001 f92f 	bl	8009ca4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8008a46:	2016      	movs	r0, #22
 8008a48:	f001 f941 	bl	8009cce <HAL_NVIC_EnableIRQ>
}
 8008a4c:	46c0      	nop			; (mov r8, r8)
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	b00f      	add	sp, #60	; 0x3c
 8008a52:	bd90      	pop	{r4, r7, pc}
 8008a54:	40000400 	.word	0x40000400
 8008a58:	40021000 	.word	0x40021000
 8008a5c:	40001000 	.word	0x40001000
 8008a60:	40002000 	.word	0x40002000
 8008a64:	40014400 	.word	0x40014400
 8008a68:	40014800 	.word	0x40014800

08008a6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008a6c:	b590      	push	{r4, r7, lr}
 8008a6e:	b099      	sub	sp, #100	; 0x64
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a74:	234c      	movs	r3, #76	; 0x4c
 8008a76:	18fb      	adds	r3, r7, r3
 8008a78:	0018      	movs	r0, r3
 8008a7a:	2314      	movs	r3, #20
 8008a7c:	001a      	movs	r2, r3
 8008a7e:	2100      	movs	r1, #0
 8008a80:	f006 f9d9 	bl	800ee36 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008a84:	2430      	movs	r4, #48	; 0x30
 8008a86:	193b      	adds	r3, r7, r4
 8008a88:	0018      	movs	r0, r3
 8008a8a:	231c      	movs	r3, #28
 8008a8c:	001a      	movs	r2, r3
 8008a8e:	2100      	movs	r1, #0
 8008a90:	f006 f9d1 	bl	800ee36 <memset>
  if(huart->Instance==USART1)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4a9e      	ldr	r2, [pc, #632]	; (8008d14 <HAL_UART_MspInit+0x2a8>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d148      	bne.n	8008b30 <HAL_UART_MspInit+0xc4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8008a9e:	193b      	adds	r3, r7, r4
 8008aa0:	2201      	movs	r2, #1
 8008aa2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8008aa4:	193b      	adds	r3, r7, r4
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008aaa:	193b      	adds	r3, r7, r4
 8008aac:	0018      	movs	r0, r3
 8008aae:	f002 f8b7 	bl	800ac20 <HAL_RCCEx_PeriphCLKConfig>
 8008ab2:	1e03      	subs	r3, r0, #0
 8008ab4:	d001      	beq.n	8008aba <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8008ab6:	f7ff fe95 	bl	80087e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008aba:	4b97      	ldr	r3, [pc, #604]	; (8008d18 <HAL_UART_MspInit+0x2ac>)
 8008abc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008abe:	4b96      	ldr	r3, [pc, #600]	; (8008d18 <HAL_UART_MspInit+0x2ac>)
 8008ac0:	2180      	movs	r1, #128	; 0x80
 8008ac2:	01c9      	lsls	r1, r1, #7
 8008ac4:	430a      	orrs	r2, r1
 8008ac6:	641a      	str	r2, [r3, #64]	; 0x40
 8008ac8:	4b93      	ldr	r3, [pc, #588]	; (8008d18 <HAL_UART_MspInit+0x2ac>)
 8008aca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008acc:	2380      	movs	r3, #128	; 0x80
 8008ace:	01db      	lsls	r3, r3, #7
 8008ad0:	4013      	ands	r3, r2
 8008ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ad6:	4b90      	ldr	r3, [pc, #576]	; (8008d18 <HAL_UART_MspInit+0x2ac>)
 8008ad8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ada:	4b8f      	ldr	r3, [pc, #572]	; (8008d18 <HAL_UART_MspInit+0x2ac>)
 8008adc:	2101      	movs	r1, #1
 8008ade:	430a      	orrs	r2, r1
 8008ae0:	635a      	str	r2, [r3, #52]	; 0x34
 8008ae2:	4b8d      	ldr	r3, [pc, #564]	; (8008d18 <HAL_UART_MspInit+0x2ac>)
 8008ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	4013      	ands	r3, r2
 8008aea:	62bb      	str	r3, [r7, #40]	; 0x28
 8008aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8008aee:	214c      	movs	r1, #76	; 0x4c
 8008af0:	187b      	adds	r3, r7, r1
 8008af2:	22c0      	movs	r2, #192	; 0xc0
 8008af4:	00d2      	lsls	r2, r2, #3
 8008af6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008af8:	187b      	adds	r3, r7, r1
 8008afa:	2202      	movs	r2, #2
 8008afc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008afe:	187b      	adds	r3, r7, r1
 8008b00:	2200      	movs	r2, #0
 8008b02:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b04:	187b      	adds	r3, r7, r1
 8008b06:	2200      	movs	r2, #0
 8008b08:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8008b0a:	187b      	adds	r3, r7, r1
 8008b0c:	2201      	movs	r2, #1
 8008b0e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b10:	187a      	adds	r2, r7, r1
 8008b12:	23a0      	movs	r3, #160	; 0xa0
 8008b14:	05db      	lsls	r3, r3, #23
 8008b16:	0011      	movs	r1, r2
 8008b18:	0018      	movs	r0, r3
 8008b1a:	f001 f9c1 	bl	8009ea0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8008b1e:	2200      	movs	r2, #0
 8008b20:	2103      	movs	r1, #3
 8008b22:	201b      	movs	r0, #27
 8008b24:	f001 f8be 	bl	8009ca4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008b28:	201b      	movs	r0, #27
 8008b2a:	f001 f8d0 	bl	8009cce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }

}
 8008b2e:	e0ec      	b.n	8008d0a <HAL_UART_MspInit+0x29e>
  else if(huart->Instance==USART2)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4a79      	ldr	r2, [pc, #484]	; (8008d1c <HAL_UART_MspInit+0x2b0>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d148      	bne.n	8008bcc <HAL_UART_MspInit+0x160>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8008b3a:	2130      	movs	r1, #48	; 0x30
 8008b3c:	187b      	adds	r3, r7, r1
 8008b3e:	2202      	movs	r2, #2
 8008b40:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8008b42:	187b      	adds	r3, r7, r1
 8008b44:	2200      	movs	r2, #0
 8008b46:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008b48:	187b      	adds	r3, r7, r1
 8008b4a:	0018      	movs	r0, r3
 8008b4c:	f002 f868 	bl	800ac20 <HAL_RCCEx_PeriphCLKConfig>
 8008b50:	1e03      	subs	r3, r0, #0
 8008b52:	d001      	beq.n	8008b58 <HAL_UART_MspInit+0xec>
      Error_Handler();
 8008b54:	f7ff fe46 	bl	80087e4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8008b58:	4b6f      	ldr	r3, [pc, #444]	; (8008d18 <HAL_UART_MspInit+0x2ac>)
 8008b5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b5c:	4b6e      	ldr	r3, [pc, #440]	; (8008d18 <HAL_UART_MspInit+0x2ac>)
 8008b5e:	2180      	movs	r1, #128	; 0x80
 8008b60:	0289      	lsls	r1, r1, #10
 8008b62:	430a      	orrs	r2, r1
 8008b64:	63da      	str	r2, [r3, #60]	; 0x3c
 8008b66:	4b6c      	ldr	r3, [pc, #432]	; (8008d18 <HAL_UART_MspInit+0x2ac>)
 8008b68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b6a:	2380      	movs	r3, #128	; 0x80
 8008b6c:	029b      	lsls	r3, r3, #10
 8008b6e:	4013      	ands	r3, r2
 8008b70:	627b      	str	r3, [r7, #36]	; 0x24
 8008b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008b74:	4b68      	ldr	r3, [pc, #416]	; (8008d18 <HAL_UART_MspInit+0x2ac>)
 8008b76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b78:	4b67      	ldr	r3, [pc, #412]	; (8008d18 <HAL_UART_MspInit+0x2ac>)
 8008b7a:	2101      	movs	r1, #1
 8008b7c:	430a      	orrs	r2, r1
 8008b7e:	635a      	str	r2, [r3, #52]	; 0x34
 8008b80:	4b65      	ldr	r3, [pc, #404]	; (8008d18 <HAL_UART_MspInit+0x2ac>)
 8008b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b84:	2201      	movs	r2, #1
 8008b86:	4013      	ands	r3, r2
 8008b88:	623b      	str	r3, [r7, #32]
 8008b8a:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GNS_TX_Pin|GNS_RX_Pin;
 8008b8c:	214c      	movs	r1, #76	; 0x4c
 8008b8e:	187b      	adds	r3, r7, r1
 8008b90:	220c      	movs	r2, #12
 8008b92:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b94:	187b      	adds	r3, r7, r1
 8008b96:	2202      	movs	r2, #2
 8008b98:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b9a:	187b      	adds	r3, r7, r1
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ba0:	187b      	adds	r3, r7, r1
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8008ba6:	187b      	adds	r3, r7, r1
 8008ba8:	2201      	movs	r2, #1
 8008baa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008bac:	187a      	adds	r2, r7, r1
 8008bae:	23a0      	movs	r3, #160	; 0xa0
 8008bb0:	05db      	lsls	r3, r3, #23
 8008bb2:	0011      	movs	r1, r2
 8008bb4:	0018      	movs	r0, r3
 8008bb6:	f001 f973 	bl	8009ea0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8008bba:	2200      	movs	r2, #0
 8008bbc:	2103      	movs	r1, #3
 8008bbe:	201c      	movs	r0, #28
 8008bc0:	f001 f870 	bl	8009ca4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8008bc4:	201c      	movs	r0, #28
 8008bc6:	f001 f882 	bl	8009cce <HAL_NVIC_EnableIRQ>
}
 8008bca:	e09e      	b.n	8008d0a <HAL_UART_MspInit+0x29e>
  else if(huart->Instance==USART3)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4a53      	ldr	r2, [pc, #332]	; (8008d20 <HAL_UART_MspInit+0x2b4>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d15b      	bne.n	8008c8e <HAL_UART_MspInit+0x222>
    __HAL_RCC_USART3_CLK_ENABLE();
 8008bd6:	4b50      	ldr	r3, [pc, #320]	; (8008d18 <HAL_UART_MspInit+0x2ac>)
 8008bd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008bda:	4b4f      	ldr	r3, [pc, #316]	; (8008d18 <HAL_UART_MspInit+0x2ac>)
 8008bdc:	2180      	movs	r1, #128	; 0x80
 8008bde:	02c9      	lsls	r1, r1, #11
 8008be0:	430a      	orrs	r2, r1
 8008be2:	63da      	str	r2, [r3, #60]	; 0x3c
 8008be4:	4b4c      	ldr	r3, [pc, #304]	; (8008d18 <HAL_UART_MspInit+0x2ac>)
 8008be6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008be8:	2380      	movs	r3, #128	; 0x80
 8008bea:	02db      	lsls	r3, r3, #11
 8008bec:	4013      	ands	r3, r2
 8008bee:	61fb      	str	r3, [r7, #28]
 8008bf0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008bf2:	4b49      	ldr	r3, [pc, #292]	; (8008d18 <HAL_UART_MspInit+0x2ac>)
 8008bf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008bf6:	4b48      	ldr	r3, [pc, #288]	; (8008d18 <HAL_UART_MspInit+0x2ac>)
 8008bf8:	2101      	movs	r1, #1
 8008bfa:	430a      	orrs	r2, r1
 8008bfc:	635a      	str	r2, [r3, #52]	; 0x34
 8008bfe:	4b46      	ldr	r3, [pc, #280]	; (8008d18 <HAL_UART_MspInit+0x2ac>)
 8008c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c02:	2201      	movs	r2, #1
 8008c04:	4013      	ands	r3, r2
 8008c06:	61bb      	str	r3, [r7, #24]
 8008c08:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008c0a:	4b43      	ldr	r3, [pc, #268]	; (8008d18 <HAL_UART_MspInit+0x2ac>)
 8008c0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c0e:	4b42      	ldr	r3, [pc, #264]	; (8008d18 <HAL_UART_MspInit+0x2ac>)
 8008c10:	2102      	movs	r1, #2
 8008c12:	430a      	orrs	r2, r1
 8008c14:	635a      	str	r2, [r3, #52]	; 0x34
 8008c16:	4b40      	ldr	r3, [pc, #256]	; (8008d18 <HAL_UART_MspInit+0x2ac>)
 8008c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c1a:	2202      	movs	r2, #2
 8008c1c:	4013      	ands	r3, r2
 8008c1e:	617b      	str	r3, [r7, #20]
 8008c20:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8008c22:	244c      	movs	r4, #76	; 0x4c
 8008c24:	193b      	adds	r3, r7, r4
 8008c26:	2220      	movs	r2, #32
 8008c28:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c2a:	193b      	adds	r3, r7, r4
 8008c2c:	2202      	movs	r2, #2
 8008c2e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c30:	193b      	adds	r3, r7, r4
 8008c32:	2200      	movs	r2, #0
 8008c34:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c36:	193b      	adds	r3, r7, r4
 8008c38:	2200      	movs	r2, #0
 8008c3a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8008c3c:	193b      	adds	r3, r7, r4
 8008c3e:	2204      	movs	r2, #4
 8008c40:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c42:	193a      	adds	r2, r7, r4
 8008c44:	23a0      	movs	r3, #160	; 0xa0
 8008c46:	05db      	lsls	r3, r3, #23
 8008c48:	0011      	movs	r1, r2
 8008c4a:	0018      	movs	r0, r3
 8008c4c:	f001 f928 	bl	8009ea0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8008c50:	0021      	movs	r1, r4
 8008c52:	187b      	adds	r3, r7, r1
 8008c54:	2201      	movs	r2, #1
 8008c56:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c58:	187b      	adds	r3, r7, r1
 8008c5a:	2202      	movs	r2, #2
 8008c5c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c5e:	187b      	adds	r3, r7, r1
 8008c60:	2200      	movs	r2, #0
 8008c62:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c64:	187b      	adds	r3, r7, r1
 8008c66:	2200      	movs	r2, #0
 8008c68:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8008c6a:	187b      	adds	r3, r7, r1
 8008c6c:	2204      	movs	r2, #4
 8008c6e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008c70:	187b      	adds	r3, r7, r1
 8008c72:	4a2c      	ldr	r2, [pc, #176]	; (8008d24 <HAL_UART_MspInit+0x2b8>)
 8008c74:	0019      	movs	r1, r3
 8008c76:	0010      	movs	r0, r2
 8008c78:	f001 f912 	bl	8009ea0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 3, 0);
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	2103      	movs	r1, #3
 8008c80:	201d      	movs	r0, #29
 8008c82:	f001 f80f 	bl	8009ca4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8008c86:	201d      	movs	r0, #29
 8008c88:	f001 f821 	bl	8009cce <HAL_NVIC_EnableIRQ>
}
 8008c8c:	e03d      	b.n	8008d0a <HAL_UART_MspInit+0x29e>
  else if(huart->Instance==USART4)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a25      	ldr	r2, [pc, #148]	; (8008d28 <HAL_UART_MspInit+0x2bc>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d138      	bne.n	8008d0a <HAL_UART_MspInit+0x29e>
    __HAL_RCC_USART4_CLK_ENABLE();
 8008c98:	4b1f      	ldr	r3, [pc, #124]	; (8008d18 <HAL_UART_MspInit+0x2ac>)
 8008c9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c9c:	4b1e      	ldr	r3, [pc, #120]	; (8008d18 <HAL_UART_MspInit+0x2ac>)
 8008c9e:	2180      	movs	r1, #128	; 0x80
 8008ca0:	0309      	lsls	r1, r1, #12
 8008ca2:	430a      	orrs	r2, r1
 8008ca4:	63da      	str	r2, [r3, #60]	; 0x3c
 8008ca6:	4b1c      	ldr	r3, [pc, #112]	; (8008d18 <HAL_UART_MspInit+0x2ac>)
 8008ca8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008caa:	2380      	movs	r3, #128	; 0x80
 8008cac:	031b      	lsls	r3, r3, #12
 8008cae:	4013      	ands	r3, r2
 8008cb0:	613b      	str	r3, [r7, #16]
 8008cb2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008cb4:	4b18      	ldr	r3, [pc, #96]	; (8008d18 <HAL_UART_MspInit+0x2ac>)
 8008cb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cb8:	4b17      	ldr	r3, [pc, #92]	; (8008d18 <HAL_UART_MspInit+0x2ac>)
 8008cba:	2101      	movs	r1, #1
 8008cbc:	430a      	orrs	r2, r1
 8008cbe:	635a      	str	r2, [r3, #52]	; 0x34
 8008cc0:	4b15      	ldr	r3, [pc, #84]	; (8008d18 <HAL_UART_MspInit+0x2ac>)
 8008cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cc4:	2201      	movs	r2, #1
 8008cc6:	4013      	ands	r3, r2
 8008cc8:	60fb      	str	r3, [r7, #12]
 8008cca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DEBUG_TX_Pin|DEBUG_RX_Pin;
 8008ccc:	214c      	movs	r1, #76	; 0x4c
 8008cce:	187b      	adds	r3, r7, r1
 8008cd0:	2203      	movs	r2, #3
 8008cd2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008cd4:	187b      	adds	r3, r7, r1
 8008cd6:	2202      	movs	r2, #2
 8008cd8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cda:	187b      	adds	r3, r7, r1
 8008cdc:	2200      	movs	r2, #0
 8008cde:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ce0:	187b      	adds	r3, r7, r1
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 8008ce6:	187b      	adds	r3, r7, r1
 8008ce8:	2204      	movs	r2, #4
 8008cea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008cec:	187a      	adds	r2, r7, r1
 8008cee:	23a0      	movs	r3, #160	; 0xa0
 8008cf0:	05db      	lsls	r3, r3, #23
 8008cf2:	0011      	movs	r1, r2
 8008cf4:	0018      	movs	r0, r3
 8008cf6:	f001 f8d3 	bl	8009ea0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 3, 0);
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	2103      	movs	r1, #3
 8008cfe:	201d      	movs	r0, #29
 8008d00:	f000 ffd0 	bl	8009ca4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8008d04:	201d      	movs	r0, #29
 8008d06:	f000 ffe2 	bl	8009cce <HAL_NVIC_EnableIRQ>
}
 8008d0a:	46c0      	nop			; (mov r8, r8)
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	b019      	add	sp, #100	; 0x64
 8008d10:	bd90      	pop	{r4, r7, pc}
 8008d12:	46c0      	nop			; (mov r8, r8)
 8008d14:	40013800 	.word	0x40013800
 8008d18:	40021000 	.word	0x40021000
 8008d1c:	40004400 	.word	0x40004400
 8008d20:	40004800 	.word	0x40004800
 8008d24:	50000400 	.word	0x50000400
 8008d28:	40004c00 	.word	0x40004c00

08008d2c <__NVIC_SystemReset>:
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8008d30:	f3bf 8f4f 	dsb	sy
}
 8008d34:	46c0      	nop			; (mov r8, r8)
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008d36:	4b04      	ldr	r3, [pc, #16]	; (8008d48 <__NVIC_SystemReset+0x1c>)
 8008d38:	4a04      	ldr	r2, [pc, #16]	; (8008d4c <__NVIC_SystemReset+0x20>)
 8008d3a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8008d3c:	f3bf 8f4f 	dsb	sy
}
 8008d40:	46c0      	nop			; (mov r8, r8)
    __NOP();
 8008d42:	46c0      	nop			; (mov r8, r8)
 8008d44:	e7fd      	b.n	8008d42 <__NVIC_SystemReset+0x16>
 8008d46:	46c0      	nop			; (mov r8, r8)
 8008d48:	e000ed00 	.word	0xe000ed00
 8008d4c:	05fa0004 	.word	0x05fa0004

08008d50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008d54:	e7fe      	b.n	8008d54 <NMI_Handler+0x4>

08008d56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008d56:	b580      	push	{r7, lr}
 8008d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	 NVIC_SystemReset();
 8008d5a:	f7ff ffe7 	bl	8008d2c <__NVIC_SystemReset>

08008d5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008d5e:	b580      	push	{r7, lr}
 8008d60:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8008d62:	46c0      	nop			; (mov r8, r8)
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008d6c:	46c0      	nop			; (mov r8, r8)
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}

08008d72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008d72:	b580      	push	{r7, lr}
 8008d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008d76:	f000 fea9 	bl	8009acc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008d7a:	46c0      	nop			; (mov r8, r8)
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}

08008d80 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8008d84:	4b03      	ldr	r3, [pc, #12]	; (8008d94 <TIM3_IRQHandler+0x14>)
 8008d86:	0018      	movs	r0, r3
 8008d88:	f003 fb0a 	bl	800c3a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8008d8c:	46c0      	nop			; (mov r8, r8)
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
 8008d92:	46c0      	nop			; (mov r8, r8)
 8008d94:	2000034c 	.word	0x2000034c

08008d98 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8008d9c:	4b03      	ldr	r3, [pc, #12]	; (8008dac <TIM6_IRQHandler+0x14>)
 8008d9e:	0018      	movs	r0, r3
 8008da0:	f003 fafe 	bl	800c3a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8008da4:	46c0      	nop			; (mov r8, r8)
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}
 8008daa:	46c0      	nop			; (mov r8, r8)
 8008dac:	20000398 	.word	0x20000398

08008db0 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8008db4:	4b03      	ldr	r3, [pc, #12]	; (8008dc4 <TIM14_IRQHandler+0x14>)
 8008db6:	0018      	movs	r0, r3
 8008db8:	f003 faf2 	bl	800c3a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8008dbc:	46c0      	nop			; (mov r8, r8)
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
 8008dc2:	46c0      	nop			; (mov r8, r8)
 8008dc4:	200003e4 	.word	0x200003e4

08008dc8 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8008dcc:	4b03      	ldr	r3, [pc, #12]	; (8008ddc <TIM16_IRQHandler+0x14>)
 8008dce:	0018      	movs	r0, r3
 8008dd0:	f003 fae6 	bl	800c3a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8008dd4:	46c0      	nop			; (mov r8, r8)
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
 8008dda:	46c0      	nop			; (mov r8, r8)
 8008ddc:	20000430 	.word	0x20000430

08008de0 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8008de4:	4b03      	ldr	r3, [pc, #12]	; (8008df4 <TIM17_IRQHandler+0x14>)
 8008de6:	0018      	movs	r0, r3
 8008de8:	f003 fada 	bl	800c3a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8008dec:	46c0      	nop			; (mov r8, r8)
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}
 8008df2:	46c0      	nop			; (mov r8, r8)
 8008df4:	2000047c 	.word	0x2000047c

08008df8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8008dfc:	4b03      	ldr	r3, [pc, #12]	; (8008e0c <SPI1_IRQHandler+0x14>)
 8008dfe:	0018      	movs	r0, r3
 8008e00:	f002 fd70 	bl	800b8e4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8008e04:	46c0      	nop			; (mov r8, r8)
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}
 8008e0a:	46c0      	nop			; (mov r8, r8)
 8008e0c:	200002e8 	.word	0x200002e8

08008e10 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008e14:	4b03      	ldr	r3, [pc, #12]	; (8008e24 <USART1_IRQHandler+0x14>)
 8008e16:	0018      	movs	r0, r3
 8008e18:	f004 f9a6 	bl	800d168 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008e1c:	46c0      	nop			; (mov r8, r8)
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
 8008e22:	46c0      	nop			; (mov r8, r8)
 8008e24:	200004c8 	.word	0x200004c8

08008e28 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8008e2c:	4b03      	ldr	r3, [pc, #12]	; (8008e3c <USART2_IRQHandler+0x14>)
 8008e2e:	0018      	movs	r0, r3
 8008e30:	f004 f99a 	bl	800d168 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8008e34:	46c0      	nop			; (mov r8, r8)
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}
 8008e3a:	46c0      	nop			; (mov r8, r8)
 8008e3c:	2000055c 	.word	0x2000055c

08008e40 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8008e44:	4b05      	ldr	r3, [pc, #20]	; (8008e5c <USART3_4_IRQHandler+0x1c>)
 8008e46:	0018      	movs	r0, r3
 8008e48:	f004 f98e 	bl	800d168 <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart4);
 8008e4c:	4b04      	ldr	r3, [pc, #16]	; (8008e60 <USART3_4_IRQHandler+0x20>)
 8008e4e:	0018      	movs	r0, r3
 8008e50:	f004 f98a 	bl	800d168 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8008e54:	46c0      	nop			; (mov r8, r8)
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}
 8008e5a:	46c0      	nop			; (mov r8, r8)
 8008e5c:	200005f0 	.word	0x200005f0
 8008e60:	20000684 	.word	0x20000684

08008e64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	af00      	add	r7, sp, #0
	return 1;
 8008e68:	2301      	movs	r3, #1
}
 8008e6a:	0018      	movs	r0, r3
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <_kill>:

int _kill(int pid, int sig)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b082      	sub	sp, #8
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8008e7a:	f005 ffa9 	bl	800edd0 <__errno>
 8008e7e:	0003      	movs	r3, r0
 8008e80:	2216      	movs	r2, #22
 8008e82:	601a      	str	r2, [r3, #0]
	return -1;
 8008e84:	2301      	movs	r3, #1
 8008e86:	425b      	negs	r3, r3
}
 8008e88:	0018      	movs	r0, r3
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	b002      	add	sp, #8
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <_exit>:

void _exit (int status)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b082      	sub	sp, #8
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8008e98:	2301      	movs	r3, #1
 8008e9a:	425a      	negs	r2, r3
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	0011      	movs	r1, r2
 8008ea0:	0018      	movs	r0, r3
 8008ea2:	f7ff ffe5 	bl	8008e70 <_kill>
	while (1) {}		/* Make sure we hang here */
 8008ea6:	e7fe      	b.n	8008ea6 <_exit+0x16>

08008ea8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b086      	sub	sp, #24
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	60f8      	str	r0, [r7, #12]
 8008eb0:	60b9      	str	r1, [r7, #8]
 8008eb2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	617b      	str	r3, [r7, #20]
 8008eb8:	e00a      	b.n	8008ed0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8008eba:	e000      	b.n	8008ebe <_read+0x16>
 8008ebc:	bf00      	nop
 8008ebe:	0001      	movs	r1, r0
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	1c5a      	adds	r2, r3, #1
 8008ec4:	60ba      	str	r2, [r7, #8]
 8008ec6:	b2ca      	uxtb	r2, r1
 8008ec8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	3301      	adds	r3, #1
 8008ece:	617b      	str	r3, [r7, #20]
 8008ed0:	697a      	ldr	r2, [r7, #20]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	dbf0      	blt.n	8008eba <_read+0x12>
	}

return len;
 8008ed8:	687b      	ldr	r3, [r7, #4]
}
 8008eda:	0018      	movs	r0, r3
 8008edc:	46bd      	mov	sp, r7
 8008ede:	b006      	add	sp, #24
 8008ee0:	bd80      	pop	{r7, pc}

08008ee2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008ee2:	b580      	push	{r7, lr}
 8008ee4:	b086      	sub	sp, #24
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	60f8      	str	r0, [r7, #12]
 8008eea:	60b9      	str	r1, [r7, #8]
 8008eec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008eee:	2300      	movs	r3, #0
 8008ef0:	617b      	str	r3, [r7, #20]
 8008ef2:	e009      	b.n	8008f08 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	1c5a      	adds	r2, r3, #1
 8008ef8:	60ba      	str	r2, [r7, #8]
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	0018      	movs	r0, r3
 8008efe:	e000      	b.n	8008f02 <_write+0x20>
 8008f00:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	3301      	adds	r3, #1
 8008f06:	617b      	str	r3, [r7, #20]
 8008f08:	697a      	ldr	r2, [r7, #20]
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	429a      	cmp	r2, r3
 8008f0e:	dbf1      	blt.n	8008ef4 <_write+0x12>
	}
	return len;
 8008f10:	687b      	ldr	r3, [r7, #4]
}
 8008f12:	0018      	movs	r0, r3
 8008f14:	46bd      	mov	sp, r7
 8008f16:	b006      	add	sp, #24
 8008f18:	bd80      	pop	{r7, pc}

08008f1a <_close>:

int _close(int file)
{
 8008f1a:	b580      	push	{r7, lr}
 8008f1c:	b082      	sub	sp, #8
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	6078      	str	r0, [r7, #4]
	return -1;
 8008f22:	2301      	movs	r3, #1
 8008f24:	425b      	negs	r3, r3
}
 8008f26:	0018      	movs	r0, r3
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	b002      	add	sp, #8
 8008f2c:	bd80      	pop	{r7, pc}

08008f2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008f2e:	b580      	push	{r7, lr}
 8008f30:	b082      	sub	sp, #8
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	6078      	str	r0, [r7, #4]
 8008f36:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	2280      	movs	r2, #128	; 0x80
 8008f3c:	0192      	lsls	r2, r2, #6
 8008f3e:	605a      	str	r2, [r3, #4]
	return 0;
 8008f40:	2300      	movs	r3, #0
}
 8008f42:	0018      	movs	r0, r3
 8008f44:	46bd      	mov	sp, r7
 8008f46:	b002      	add	sp, #8
 8008f48:	bd80      	pop	{r7, pc}

08008f4a <_isatty>:

int _isatty(int file)
{
 8008f4a:	b580      	push	{r7, lr}
 8008f4c:	b082      	sub	sp, #8
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	6078      	str	r0, [r7, #4]
	return 1;
 8008f52:	2301      	movs	r3, #1
}
 8008f54:	0018      	movs	r0, r3
 8008f56:	46bd      	mov	sp, r7
 8008f58:	b002      	add	sp, #8
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b084      	sub	sp, #16
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	60f8      	str	r0, [r7, #12]
 8008f64:	60b9      	str	r1, [r7, #8]
 8008f66:	607a      	str	r2, [r7, #4]
	return 0;
 8008f68:	2300      	movs	r3, #0
}
 8008f6a:	0018      	movs	r0, r3
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	b004      	add	sp, #16
 8008f70:	bd80      	pop	{r7, pc}
	...

08008f74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b086      	sub	sp, #24
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008f7c:	4a14      	ldr	r2, [pc, #80]	; (8008fd0 <_sbrk+0x5c>)
 8008f7e:	4b15      	ldr	r3, [pc, #84]	; (8008fd4 <_sbrk+0x60>)
 8008f80:	1ad3      	subs	r3, r2, r3
 8008f82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008f88:	4b13      	ldr	r3, [pc, #76]	; (8008fd8 <_sbrk+0x64>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d102      	bne.n	8008f96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008f90:	4b11      	ldr	r3, [pc, #68]	; (8008fd8 <_sbrk+0x64>)
 8008f92:	4a12      	ldr	r2, [pc, #72]	; (8008fdc <_sbrk+0x68>)
 8008f94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008f96:	4b10      	ldr	r3, [pc, #64]	; (8008fd8 <_sbrk+0x64>)
 8008f98:	681a      	ldr	r2, [r3, #0]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	18d3      	adds	r3, r2, r3
 8008f9e:	693a      	ldr	r2, [r7, #16]
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d207      	bcs.n	8008fb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008fa4:	f005 ff14 	bl	800edd0 <__errno>
 8008fa8:	0003      	movs	r3, r0
 8008faa:	220c      	movs	r2, #12
 8008fac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008fae:	2301      	movs	r3, #1
 8008fb0:	425b      	negs	r3, r3
 8008fb2:	e009      	b.n	8008fc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008fb4:	4b08      	ldr	r3, [pc, #32]	; (8008fd8 <_sbrk+0x64>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008fba:	4b07      	ldr	r3, [pc, #28]	; (8008fd8 <_sbrk+0x64>)
 8008fbc:	681a      	ldr	r2, [r3, #0]
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	18d2      	adds	r2, r2, r3
 8008fc2:	4b05      	ldr	r3, [pc, #20]	; (8008fd8 <_sbrk+0x64>)
 8008fc4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
}
 8008fc8:	0018      	movs	r0, r3
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	b006      	add	sp, #24
 8008fce:	bd80      	pop	{r7, pc}
 8008fd0:	20009000 	.word	0x20009000
 8008fd4:	00000400 	.word	0x00000400
 8008fd8:	20000d20 	.word	0x20000d20
 8008fdc:	20000d60 	.word	0x20000d60

08008fe0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008fe4:	46c0      	nop			; (mov r8, r8)
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}
	...

08008fec <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8008fec:	b590      	push	{r4, r7, lr}
 8008fee:	b087      	sub	sp, #28
 8008ff0:	af02      	add	r7, sp, #8
 8008ff2:	0002      	movs	r2, r0
 8008ff4:	1dfb      	adds	r3, r7, #7
 8008ff6:	701a      	strb	r2, [r3, #0]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8008ff8:	240f      	movs	r4, #15
 8008ffa:	193a      	adds	r2, r7, r4
 8008ffc:	1df9      	adds	r1, r7, #7
 8008ffe:	4806      	ldr	r0, [pc, #24]	; (8009018 <W25qxx_Spi+0x2c>)
 8009000:	2364      	movs	r3, #100	; 0x64
 8009002:	9300      	str	r3, [sp, #0]
 8009004:	2301      	movs	r3, #1
 8009006:	f002 fa9b 	bl	800b540 <HAL_SPI_TransmitReceive>
	return ret;
 800900a:	193b      	adds	r3, r7, r4
 800900c:	781b      	ldrb	r3, [r3, #0]
}
 800900e:	0018      	movs	r0, r3
 8009010:	46bd      	mov	sp, r7
 8009012:	b005      	add	sp, #20
 8009014:	bd90      	pop	{r4, r7, pc}
 8009016:	46c0      	nop			; (mov r8, r8)
 8009018:	200002e8 	.word	0x200002e8

0800901c <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b084      	sub	sp, #16
 8009020:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8009022:	2300      	movs	r3, #0
 8009024:	60fb      	str	r3, [r7, #12]
 8009026:	2300      	movs	r3, #0
 8009028:	60bb      	str	r3, [r7, #8]
 800902a:	2300      	movs	r3, #0
 800902c:	607b      	str	r3, [r7, #4]
 800902e:	2300      	movs	r3, #0
 8009030:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8009032:	4b15      	ldr	r3, [pc, #84]	; (8009088 <W25qxx_ReadID+0x6c>)
 8009034:	2200      	movs	r2, #0
 8009036:	2108      	movs	r1, #8
 8009038:	0018      	movs	r0, r3
 800903a:	f001 f8b2 	bl	800a1a2 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 800903e:	209f      	movs	r0, #159	; 0x9f
 8009040:	f7ff ffd4 	bl	8008fec <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8009044:	20a5      	movs	r0, #165	; 0xa5
 8009046:	f7ff ffd1 	bl	8008fec <W25qxx_Spi>
 800904a:	0003      	movs	r3, r0
 800904c:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800904e:	20a5      	movs	r0, #165	; 0xa5
 8009050:	f7ff ffcc 	bl	8008fec <W25qxx_Spi>
 8009054:	0003      	movs	r3, r0
 8009056:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8009058:	20a5      	movs	r0, #165	; 0xa5
 800905a:	f7ff ffc7 	bl	8008fec <W25qxx_Spi>
 800905e:	0003      	movs	r3, r0
 8009060:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8009062:	4b09      	ldr	r3, [pc, #36]	; (8009088 <W25qxx_ReadID+0x6c>)
 8009064:	2201      	movs	r2, #1
 8009066:	2108      	movs	r1, #8
 8009068:	0018      	movs	r0, r3
 800906a:	f001 f89a 	bl	800a1a2 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	041a      	lsls	r2, r3, #16
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	021b      	lsls	r3, r3, #8
 8009076:	4313      	orrs	r3, r2
 8009078:	683a      	ldr	r2, [r7, #0]
 800907a:	4313      	orrs	r3, r2
 800907c:	60fb      	str	r3, [r7, #12]
	return Temp;
 800907e:	68fb      	ldr	r3, [r7, #12]
}
 8009080:	0018      	movs	r0, r3
 8009082:	46bd      	mov	sp, r7
 8009084:	b004      	add	sp, #16
 8009086:	bd80      	pop	{r7, pc}
 8009088:	50000c00 	.word	0x50000c00

0800908c <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 800908c:	b590      	push	{r4, r7, lr}
 800908e:	b083      	sub	sp, #12
 8009090:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8009092:	4b1d      	ldr	r3, [pc, #116]	; (8009108 <W25qxx_ReadUniqID+0x7c>)
 8009094:	2200      	movs	r2, #0
 8009096:	2108      	movs	r1, #8
 8009098:	0018      	movs	r0, r3
 800909a:	f001 f882 	bl	800a1a2 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 800909e:	204b      	movs	r0, #75	; 0x4b
 80090a0:	f7ff ffa4 	bl	8008fec <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 80090a4:	1dfb      	adds	r3, r7, #7
 80090a6:	2200      	movs	r2, #0
 80090a8:	701a      	strb	r2, [r3, #0]
 80090aa:	e007      	b.n	80090bc <W25qxx_ReadUniqID+0x30>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80090ac:	20a5      	movs	r0, #165	; 0xa5
 80090ae:	f7ff ff9d 	bl	8008fec <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 80090b2:	1dfb      	adds	r3, r7, #7
 80090b4:	781a      	ldrb	r2, [r3, #0]
 80090b6:	1dfb      	adds	r3, r7, #7
 80090b8:	3201      	adds	r2, #1
 80090ba:	701a      	strb	r2, [r3, #0]
 80090bc:	1dfb      	adds	r3, r7, #7
 80090be:	781b      	ldrb	r3, [r3, #0]
 80090c0:	2b03      	cmp	r3, #3
 80090c2:	d9f3      	bls.n	80090ac <W25qxx_ReadUniqID+0x20>
	for (uint8_t i = 0; i < 8; i++)
 80090c4:	1dbb      	adds	r3, r7, #6
 80090c6:	2200      	movs	r2, #0
 80090c8:	701a      	strb	r2, [r3, #0]
 80090ca:	e00e      	b.n	80090ea <W25qxx_ReadUniqID+0x5e>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80090cc:	1dbb      	adds	r3, r7, #6
 80090ce:	781c      	ldrb	r4, [r3, #0]
 80090d0:	20a5      	movs	r0, #165	; 0xa5
 80090d2:	f7ff ff8b 	bl	8008fec <W25qxx_Spi>
 80090d6:	0003      	movs	r3, r0
 80090d8:	001a      	movs	r2, r3
 80090da:	4b0c      	ldr	r3, [pc, #48]	; (800910c <W25qxx_ReadUniqID+0x80>)
 80090dc:	191b      	adds	r3, r3, r4
 80090de:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 80090e0:	1dbb      	adds	r3, r7, #6
 80090e2:	781a      	ldrb	r2, [r3, #0]
 80090e4:	1dbb      	adds	r3, r7, #6
 80090e6:	3201      	adds	r2, #1
 80090e8:	701a      	strb	r2, [r3, #0]
 80090ea:	1dbb      	adds	r3, r7, #6
 80090ec:	781b      	ldrb	r3, [r3, #0]
 80090ee:	2b07      	cmp	r3, #7
 80090f0:	d9ec      	bls.n	80090cc <W25qxx_ReadUniqID+0x40>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80090f2:	4b05      	ldr	r3, [pc, #20]	; (8009108 <W25qxx_ReadUniqID+0x7c>)
 80090f4:	2201      	movs	r2, #1
 80090f6:	2108      	movs	r1, #8
 80090f8:	0018      	movs	r0, r3
 80090fa:	f001 f852 	bl	800a1a2 <HAL_GPIO_WritePin>
}
 80090fe:	46c0      	nop			; (mov r8, r8)
 8009100:	46bd      	mov	sp, r7
 8009102:	b003      	add	sp, #12
 8009104:	bd90      	pop	{r4, r7, pc}
 8009106:	46c0      	nop			; (mov r8, r8)
 8009108:	50000c00 	.word	0x50000c00
 800910c:	20000d24 	.word	0x20000d24

08009110 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8009114:	4b0a      	ldr	r3, [pc, #40]	; (8009140 <W25qxx_WriteEnable+0x30>)
 8009116:	2200      	movs	r2, #0
 8009118:	2108      	movs	r1, #8
 800911a:	0018      	movs	r0, r3
 800911c:	f001 f841 	bl	800a1a2 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 8009120:	2006      	movs	r0, #6
 8009122:	f7ff ff63 	bl	8008fec <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8009126:	4b06      	ldr	r3, [pc, #24]	; (8009140 <W25qxx_WriteEnable+0x30>)
 8009128:	2201      	movs	r2, #1
 800912a:	2108      	movs	r1, #8
 800912c:	0018      	movs	r0, r3
 800912e:	f001 f838 	bl	800a1a2 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8009132:	2001      	movs	r0, #1
 8009134:	f000 fce6 	bl	8009b04 <HAL_Delay>
}
 8009138:	46c0      	nop			; (mov r8, r8)
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}
 800913e:	46c0      	nop			; (mov r8, r8)
 8009140:	50000c00 	.word	0x50000c00

08009144 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8009144:	b5b0      	push	{r4, r5, r7, lr}
 8009146:	b084      	sub	sp, #16
 8009148:	af00      	add	r7, sp, #0
 800914a:	0002      	movs	r2, r0
 800914c:	1dfb      	adds	r3, r7, #7
 800914e:	701a      	strb	r2, [r3, #0]
	uint8_t status = 0;
 8009150:	240f      	movs	r4, #15
 8009152:	193b      	adds	r3, r7, r4
 8009154:	2200      	movs	r2, #0
 8009156:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8009158:	4b24      	ldr	r3, [pc, #144]	; (80091ec <W25qxx_ReadStatusRegister+0xa8>)
 800915a:	2200      	movs	r2, #0
 800915c:	2108      	movs	r1, #8
 800915e:	0018      	movs	r0, r3
 8009160:	f001 f81f 	bl	800a1a2 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8009164:	1dfb      	adds	r3, r7, #7
 8009166:	781b      	ldrb	r3, [r3, #0]
 8009168:	2b01      	cmp	r3, #1
 800916a:	d10f      	bne.n	800918c <W25qxx_ReadStatusRegister+0x48>
	{
		W25qxx_Spi(0x05);
 800916c:	2005      	movs	r0, #5
 800916e:	f7ff ff3d 	bl	8008fec <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8009172:	0025      	movs	r5, r4
 8009174:	193c      	adds	r4, r7, r4
 8009176:	20a5      	movs	r0, #165	; 0xa5
 8009178:	f7ff ff38 	bl	8008fec <W25qxx_Spi>
 800917c:	0003      	movs	r3, r0
 800917e:	7023      	strb	r3, [r4, #0]
		w25qxx.StatusRegister1 = status;
 8009180:	4b1b      	ldr	r3, [pc, #108]	; (80091f0 <W25qxx_ReadStatusRegister+0xac>)
 8009182:	197a      	adds	r2, r7, r5
 8009184:	2124      	movs	r1, #36	; 0x24
 8009186:	7812      	ldrb	r2, [r2, #0]
 8009188:	545a      	strb	r2, [r3, r1]
 800918a:	e022      	b.n	80091d2 <W25qxx_ReadStatusRegister+0x8e>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 800918c:	1dfb      	adds	r3, r7, #7
 800918e:	781b      	ldrb	r3, [r3, #0]
 8009190:	2b02      	cmp	r3, #2
 8009192:	d10f      	bne.n	80091b4 <W25qxx_ReadStatusRegister+0x70>
	{
		W25qxx_Spi(0x35);
 8009194:	2035      	movs	r0, #53	; 0x35
 8009196:	f7ff ff29 	bl	8008fec <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800919a:	250f      	movs	r5, #15
 800919c:	197c      	adds	r4, r7, r5
 800919e:	20a5      	movs	r0, #165	; 0xa5
 80091a0:	f7ff ff24 	bl	8008fec <W25qxx_Spi>
 80091a4:	0003      	movs	r3, r0
 80091a6:	7023      	strb	r3, [r4, #0]
		w25qxx.StatusRegister2 = status;
 80091a8:	4b11      	ldr	r3, [pc, #68]	; (80091f0 <W25qxx_ReadStatusRegister+0xac>)
 80091aa:	197a      	adds	r2, r7, r5
 80091ac:	2125      	movs	r1, #37	; 0x25
 80091ae:	7812      	ldrb	r2, [r2, #0]
 80091b0:	545a      	strb	r2, [r3, r1]
 80091b2:	e00e      	b.n	80091d2 <W25qxx_ReadStatusRegister+0x8e>
	}
	else
	{
		W25qxx_Spi(0x15);
 80091b4:	2015      	movs	r0, #21
 80091b6:	f7ff ff19 	bl	8008fec <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80091ba:	250f      	movs	r5, #15
 80091bc:	197c      	adds	r4, r7, r5
 80091be:	20a5      	movs	r0, #165	; 0xa5
 80091c0:	f7ff ff14 	bl	8008fec <W25qxx_Spi>
 80091c4:	0003      	movs	r3, r0
 80091c6:	7023      	strb	r3, [r4, #0]
		w25qxx.StatusRegister3 = status;
 80091c8:	4b09      	ldr	r3, [pc, #36]	; (80091f0 <W25qxx_ReadStatusRegister+0xac>)
 80091ca:	197a      	adds	r2, r7, r5
 80091cc:	2126      	movs	r1, #38	; 0x26
 80091ce:	7812      	ldrb	r2, [r2, #0]
 80091d0:	545a      	strb	r2, [r3, r1]
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80091d2:	4b06      	ldr	r3, [pc, #24]	; (80091ec <W25qxx_ReadStatusRegister+0xa8>)
 80091d4:	2201      	movs	r2, #1
 80091d6:	2108      	movs	r1, #8
 80091d8:	0018      	movs	r0, r3
 80091da:	f000 ffe2 	bl	800a1a2 <HAL_GPIO_WritePin>
	return status;
 80091de:	230f      	movs	r3, #15
 80091e0:	18fb      	adds	r3, r7, r3
 80091e2:	781b      	ldrb	r3, [r3, #0]
}
 80091e4:	0018      	movs	r0, r3
 80091e6:	46bd      	mov	sp, r7
 80091e8:	b004      	add	sp, #16
 80091ea:	bdb0      	pop	{r4, r5, r7, pc}
 80091ec:	50000c00 	.word	0x50000c00
 80091f0:	20000d24 	.word	0x20000d24

080091f4 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 80091f8:	2001      	movs	r0, #1
 80091fa:	f000 fc83 	bl	8009b04 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80091fe:	4b12      	ldr	r3, [pc, #72]	; (8009248 <W25qxx_WaitForWriteEnd+0x54>)
 8009200:	2200      	movs	r2, #0
 8009202:	2108      	movs	r1, #8
 8009204:	0018      	movs	r0, r3
 8009206:	f000 ffcc 	bl	800a1a2 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 800920a:	2005      	movs	r0, #5
 800920c:	f7ff feee 	bl	8008fec <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8009210:	20a5      	movs	r0, #165	; 0xa5
 8009212:	f7ff feeb 	bl	8008fec <W25qxx_Spi>
 8009216:	0003      	movs	r3, r0
 8009218:	0019      	movs	r1, r3
 800921a:	4b0c      	ldr	r3, [pc, #48]	; (800924c <W25qxx_WaitForWriteEnd+0x58>)
 800921c:	2224      	movs	r2, #36	; 0x24
 800921e:	5499      	strb	r1, [r3, r2]
		W25qxx_Delay(1);
 8009220:	2001      	movs	r0, #1
 8009222:	f000 fc6f 	bl	8009b04 <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8009226:	4b09      	ldr	r3, [pc, #36]	; (800924c <W25qxx_WaitForWriteEnd+0x58>)
 8009228:	2224      	movs	r2, #36	; 0x24
 800922a:	5c9b      	ldrb	r3, [r3, r2]
 800922c:	001a      	movs	r2, r3
 800922e:	2301      	movs	r3, #1
 8009230:	4013      	ands	r3, r2
 8009232:	d1ed      	bne.n	8009210 <W25qxx_WaitForWriteEnd+0x1c>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8009234:	4b04      	ldr	r3, [pc, #16]	; (8009248 <W25qxx_WaitForWriteEnd+0x54>)
 8009236:	2201      	movs	r2, #1
 8009238:	2108      	movs	r1, #8
 800923a:	0018      	movs	r0, r3
 800923c:	f000 ffb1 	bl	800a1a2 <HAL_GPIO_WritePin>
}
 8009240:	46c0      	nop			; (mov r8, r8)
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}
 8009246:	46c0      	nop			; (mov r8, r8)
 8009248:	50000c00 	.word	0x50000c00
 800924c:	20000d24 	.word	0x20000d24

08009250 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b082      	sub	sp, #8
 8009254:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8009256:	4b58      	ldr	r3, [pc, #352]	; (80093b8 <W25qxx_Init+0x168>)
 8009258:	2227      	movs	r2, #39	; 0x27
 800925a:	2101      	movs	r1, #1
 800925c:	5499      	strb	r1, [r3, r2]
	while (HAL_GetTick() < 100)
 800925e:	e002      	b.n	8009266 <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8009260:	2001      	movs	r0, #1
 8009262:	f000 fc4f 	bl	8009b04 <HAL_Delay>
	while (HAL_GetTick() < 100)
 8009266:	f000 fc43 	bl	8009af0 <HAL_GetTick>
 800926a:	0003      	movs	r3, r0
 800926c:	2b63      	cmp	r3, #99	; 0x63
 800926e:	d9f7      	bls.n	8009260 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8009270:	4b52      	ldr	r3, [pc, #328]	; (80093bc <W25qxx_Init+0x16c>)
 8009272:	2201      	movs	r2, #1
 8009274:	2108      	movs	r1, #8
 8009276:	0018      	movs	r0, r3
 8009278:	f000 ff93 	bl	800a1a2 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 800927c:	2064      	movs	r0, #100	; 0x64
 800927e:	f000 fc41 	bl	8009b04 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 8009282:	f7ff fecb 	bl	800901c <W25qxx_ReadID>
 8009286:	0003      	movs	r3, r0
 8009288:	607b      	str	r3, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	22ff      	movs	r2, #255	; 0xff
 800928e:	4013      	ands	r3, r2
 8009290:	3b11      	subs	r3, #17
 8009292:	2b0f      	cmp	r3, #15
 8009294:	d84d      	bhi.n	8009332 <W25qxx_Init+0xe2>
 8009296:	009a      	lsls	r2, r3, #2
 8009298:	4b49      	ldr	r3, [pc, #292]	; (80093c0 <W25qxx_Init+0x170>)
 800929a:	18d3      	adds	r3, r2, r3
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	469f      	mov	pc, r3
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 80092a0:	4b45      	ldr	r3, [pc, #276]	; (80093b8 <W25qxx_Init+0x168>)
 80092a2:	220a      	movs	r2, #10
 80092a4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 80092a6:	4b44      	ldr	r3, [pc, #272]	; (80093b8 <W25qxx_Init+0x168>)
 80092a8:	2280      	movs	r2, #128	; 0x80
 80092aa:	00d2      	lsls	r2, r2, #3
 80092ac:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 80092ae:	e046      	b.n	800933e <W25qxx_Init+0xee>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 80092b0:	4b41      	ldr	r3, [pc, #260]	; (80093b8 <W25qxx_Init+0x168>)
 80092b2:	2209      	movs	r2, #9
 80092b4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 80092b6:	4b40      	ldr	r3, [pc, #256]	; (80093b8 <W25qxx_Init+0x168>)
 80092b8:	2280      	movs	r2, #128	; 0x80
 80092ba:	0092      	lsls	r2, r2, #2
 80092bc:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 80092be:	e03e      	b.n	800933e <W25qxx_Init+0xee>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 80092c0:	4b3d      	ldr	r3, [pc, #244]	; (80093b8 <W25qxx_Init+0x168>)
 80092c2:	2208      	movs	r2, #8
 80092c4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 80092c6:	4b3c      	ldr	r3, [pc, #240]	; (80093b8 <W25qxx_Init+0x168>)
 80092c8:	2280      	movs	r2, #128	; 0x80
 80092ca:	0052      	lsls	r2, r2, #1
 80092cc:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 80092ce:	e036      	b.n	800933e <W25qxx_Init+0xee>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 80092d0:	4b39      	ldr	r3, [pc, #228]	; (80093b8 <W25qxx_Init+0x168>)
 80092d2:	2207      	movs	r2, #7
 80092d4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 80092d6:	4b38      	ldr	r3, [pc, #224]	; (80093b8 <W25qxx_Init+0x168>)
 80092d8:	2280      	movs	r2, #128	; 0x80
 80092da:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 80092dc:	e02f      	b.n	800933e <W25qxx_Init+0xee>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 80092de:	4b36      	ldr	r3, [pc, #216]	; (80093b8 <W25qxx_Init+0x168>)
 80092e0:	2206      	movs	r2, #6
 80092e2:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 80092e4:	4b34      	ldr	r3, [pc, #208]	; (80093b8 <W25qxx_Init+0x168>)
 80092e6:	2240      	movs	r2, #64	; 0x40
 80092e8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 80092ea:	e028      	b.n	800933e <W25qxx_Init+0xee>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 80092ec:	4b32      	ldr	r3, [pc, #200]	; (80093b8 <W25qxx_Init+0x168>)
 80092ee:	2205      	movs	r2, #5
 80092f0:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 80092f2:	4b31      	ldr	r3, [pc, #196]	; (80093b8 <W25qxx_Init+0x168>)
 80092f4:	2220      	movs	r2, #32
 80092f6:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 80092f8:	e021      	b.n	800933e <W25qxx_Init+0xee>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 80092fa:	4b2f      	ldr	r3, [pc, #188]	; (80093b8 <W25qxx_Init+0x168>)
 80092fc:	2204      	movs	r2, #4
 80092fe:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8009300:	4b2d      	ldr	r3, [pc, #180]	; (80093b8 <W25qxx_Init+0x168>)
 8009302:	2210      	movs	r2, #16
 8009304:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 8009306:	e01a      	b.n	800933e <W25qxx_Init+0xee>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8009308:	4b2b      	ldr	r3, [pc, #172]	; (80093b8 <W25qxx_Init+0x168>)
 800930a:	2203      	movs	r2, #3
 800930c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 800930e:	4b2a      	ldr	r3, [pc, #168]	; (80093b8 <W25qxx_Init+0x168>)
 8009310:	2208      	movs	r2, #8
 8009312:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 8009314:	e013      	b.n	800933e <W25qxx_Init+0xee>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8009316:	4b28      	ldr	r3, [pc, #160]	; (80093b8 <W25qxx_Init+0x168>)
 8009318:	2202      	movs	r2, #2
 800931a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 800931c:	4b26      	ldr	r3, [pc, #152]	; (80093b8 <W25qxx_Init+0x168>)
 800931e:	2204      	movs	r2, #4
 8009320:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 8009322:	e00c      	b.n	800933e <W25qxx_Init+0xee>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8009324:	4b24      	ldr	r3, [pc, #144]	; (80093b8 <W25qxx_Init+0x168>)
 8009326:	2201      	movs	r2, #1
 8009328:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 800932a:	4b23      	ldr	r3, [pc, #140]	; (80093b8 <W25qxx_Init+0x168>)
 800932c:	2202      	movs	r2, #2
 800932e:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 8009330:	e005      	b.n	800933e <W25qxx_Init+0xee>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 8009332:	4b21      	ldr	r3, [pc, #132]	; (80093b8 <W25qxx_Init+0x168>)
 8009334:	2227      	movs	r2, #39	; 0x27
 8009336:	2100      	movs	r1, #0
 8009338:	5499      	strb	r1, [r3, r2]
		return false;
 800933a:	2300      	movs	r3, #0
 800933c:	e038      	b.n	80093b0 <W25qxx_Init+0x160>
	}
	w25qxx.PageSize = 256;
 800933e:	4b1e      	ldr	r3, [pc, #120]	; (80093b8 <W25qxx_Init+0x168>)
 8009340:	2280      	movs	r2, #128	; 0x80
 8009342:	0052      	lsls	r2, r2, #1
 8009344:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8009346:	4b1c      	ldr	r3, [pc, #112]	; (80093b8 <W25qxx_Init+0x168>)
 8009348:	2280      	movs	r2, #128	; 0x80
 800934a:	0152      	lsls	r2, r2, #5
 800934c:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 800934e:	4b1a      	ldr	r3, [pc, #104]	; (80093b8 <W25qxx_Init+0x168>)
 8009350:	69db      	ldr	r3, [r3, #28]
 8009352:	011a      	lsls	r2, r3, #4
 8009354:	4b18      	ldr	r3, [pc, #96]	; (80093b8 <W25qxx_Init+0x168>)
 8009356:	615a      	str	r2, [r3, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8009358:	4b17      	ldr	r3, [pc, #92]	; (80093b8 <W25qxx_Init+0x168>)
 800935a:	695a      	ldr	r2, [r3, #20]
 800935c:	4b16      	ldr	r3, [pc, #88]	; (80093b8 <W25qxx_Init+0x168>)
 800935e:	691b      	ldr	r3, [r3, #16]
 8009360:	435a      	muls	r2, r3
 8009362:	4b15      	ldr	r3, [pc, #84]	; (80093b8 <W25qxx_Init+0x168>)
 8009364:	895b      	ldrh	r3, [r3, #10]
 8009366:	0019      	movs	r1, r3
 8009368:	0010      	movs	r0, r2
 800936a:	f7f6 feef 	bl	800014c <__udivsi3>
 800936e:	0003      	movs	r3, r0
 8009370:	001a      	movs	r2, r3
 8009372:	4b11      	ldr	r3, [pc, #68]	; (80093b8 <W25qxx_Init+0x168>)
 8009374:	60da      	str	r2, [r3, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8009376:	4b10      	ldr	r3, [pc, #64]	; (80093b8 <W25qxx_Init+0x168>)
 8009378:	691b      	ldr	r3, [r3, #16]
 800937a:	011a      	lsls	r2, r3, #4
 800937c:	4b0e      	ldr	r3, [pc, #56]	; (80093b8 <W25qxx_Init+0x168>)
 800937e:	619a      	str	r2, [r3, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8009380:	4b0d      	ldr	r3, [pc, #52]	; (80093b8 <W25qxx_Init+0x168>)
 8009382:	695a      	ldr	r2, [r3, #20]
 8009384:	4b0c      	ldr	r3, [pc, #48]	; (80093b8 <W25qxx_Init+0x168>)
 8009386:	691b      	ldr	r3, [r3, #16]
 8009388:	4353      	muls	r3, r2
 800938a:	0a9a      	lsrs	r2, r3, #10
 800938c:	4b0a      	ldr	r3, [pc, #40]	; (80093b8 <W25qxx_Init+0x168>)
 800938e:	621a      	str	r2, [r3, #32]
	W25qxx_ReadUniqID();
 8009390:	f7ff fe7c 	bl	800908c <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8009394:	2001      	movs	r0, #1
 8009396:	f7ff fed5 	bl	8009144 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 800939a:	2002      	movs	r0, #2
 800939c:	f7ff fed2 	bl	8009144 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 80093a0:	2003      	movs	r0, #3
 80093a2:	f7ff fecf 	bl	8009144 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 80093a6:	4b04      	ldr	r3, [pc, #16]	; (80093b8 <W25qxx_Init+0x168>)
 80093a8:	2227      	movs	r2, #39	; 0x27
 80093aa:	2100      	movs	r1, #0
 80093ac:	5499      	strb	r1, [r3, r2]
	return true;
 80093ae:	2301      	movs	r3, #1
}
 80093b0:	0018      	movs	r0, r3
 80093b2:	46bd      	mov	sp, r7
 80093b4:	b002      	add	sp, #8
 80093b6:	bd80      	pop	{r7, pc}
 80093b8:	20000d24 	.word	0x20000d24
 80093bc:	50000c00 	.word	0x50000c00
 80093c0:	080137d8 	.word	0x080137d8

080093c4 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b082      	sub	sp, #8
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 80093cc:	e002      	b.n	80093d4 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 80093ce:	2001      	movs	r0, #1
 80093d0:	f000 fb98 	bl	8009b04 <HAL_Delay>
	while (w25qxx.Lock == 1)
 80093d4:	4b26      	ldr	r3, [pc, #152]	; (8009470 <W25qxx_EraseSector+0xac>)
 80093d6:	2227      	movs	r2, #39	; 0x27
 80093d8:	5c9b      	ldrb	r3, [r3, r2]
 80093da:	2b01      	cmp	r3, #1
 80093dc:	d0f7      	beq.n	80093ce <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 80093de:	4b24      	ldr	r3, [pc, #144]	; (8009470 <W25qxx_EraseSector+0xac>)
 80093e0:	2227      	movs	r2, #39	; 0x27
 80093e2:	2101      	movs	r1, #1
 80093e4:	5499      	strb	r1, [r3, r2]
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
#endif
	W25qxx_WaitForWriteEnd();
 80093e6:	f7ff ff05 	bl	80091f4 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 80093ea:	4b21      	ldr	r3, [pc, #132]	; (8009470 <W25qxx_EraseSector+0xac>)
 80093ec:	691a      	ldr	r2, [r3, #16]
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	4353      	muls	r3, r2
 80093f2:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 80093f4:	f7ff fe8c 	bl	8009110 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80093f8:	4b1e      	ldr	r3, [pc, #120]	; (8009474 <W25qxx_EraseSector+0xb0>)
 80093fa:	2200      	movs	r2, #0
 80093fc:	2108      	movs	r1, #8
 80093fe:	0018      	movs	r0, r3
 8009400:	f000 fecf 	bl	800a1a2 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8009404:	4b1a      	ldr	r3, [pc, #104]	; (8009470 <W25qxx_EraseSector+0xac>)
 8009406:	781b      	ldrb	r3, [r3, #0]
 8009408:	2b08      	cmp	r3, #8
 800940a:	d909      	bls.n	8009420 <W25qxx_EraseSector+0x5c>
	{
		W25qxx_Spi(0x21);
 800940c:	2021      	movs	r0, #33	; 0x21
 800940e:	f7ff fded 	bl	8008fec <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	0e1b      	lsrs	r3, r3, #24
 8009416:	b2db      	uxtb	r3, r3
 8009418:	0018      	movs	r0, r3
 800941a:	f7ff fde7 	bl	8008fec <W25qxx_Spi>
 800941e:	e002      	b.n	8009426 <W25qxx_EraseSector+0x62>
	}
	else
	{
		W25qxx_Spi(0x20);
 8009420:	2020      	movs	r0, #32
 8009422:	f7ff fde3 	bl	8008fec <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	0c1b      	lsrs	r3, r3, #16
 800942a:	b2db      	uxtb	r3, r3
 800942c:	0018      	movs	r0, r3
 800942e:	f7ff fddd 	bl	8008fec <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	0a1b      	lsrs	r3, r3, #8
 8009436:	b2db      	uxtb	r3, r3
 8009438:	0018      	movs	r0, r3
 800943a:	f7ff fdd7 	bl	8008fec <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	b2db      	uxtb	r3, r3
 8009442:	0018      	movs	r0, r3
 8009444:	f7ff fdd2 	bl	8008fec <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8009448:	4b0a      	ldr	r3, [pc, #40]	; (8009474 <W25qxx_EraseSector+0xb0>)
 800944a:	2201      	movs	r2, #1
 800944c:	2108      	movs	r1, #8
 800944e:	0018      	movs	r0, r3
 8009450:	f000 fea7 	bl	800a1a2 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8009454:	f7ff fece 	bl	80091f4 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
#endif
	W25qxx_Delay(1);
 8009458:	2001      	movs	r0, #1
 800945a:	f000 fb53 	bl	8009b04 <HAL_Delay>
	w25qxx.Lock = 0;
 800945e:	4b04      	ldr	r3, [pc, #16]	; (8009470 <W25qxx_EraseSector+0xac>)
 8009460:	2227      	movs	r2, #39	; 0x27
 8009462:	2100      	movs	r1, #0
 8009464:	5499      	strb	r1, [r3, r2]
}
 8009466:	46c0      	nop			; (mov r8, r8)
 8009468:	46bd      	mov	sp, r7
 800946a:	b002      	add	sp, #8
 800946c:	bd80      	pop	{r7, pc}
 800946e:	46c0      	nop			; (mov r8, r8)
 8009470:	20000d24 	.word	0x20000d24
 8009474:	50000c00 	.word	0x50000c00

08009478 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b082      	sub	sp, #8
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8009480:	4b07      	ldr	r3, [pc, #28]	; (80094a0 <W25qxx_SectorToPage+0x28>)
 8009482:	691b      	ldr	r3, [r3, #16]
 8009484:	687a      	ldr	r2, [r7, #4]
 8009486:	435a      	muls	r2, r3
 8009488:	4b05      	ldr	r3, [pc, #20]	; (80094a0 <W25qxx_SectorToPage+0x28>)
 800948a:	895b      	ldrh	r3, [r3, #10]
 800948c:	0019      	movs	r1, r3
 800948e:	0010      	movs	r0, r2
 8009490:	f7f6 fe5c 	bl	800014c <__udivsi3>
 8009494:	0003      	movs	r3, r0
}
 8009496:	0018      	movs	r0, r3
 8009498:	46bd      	mov	sp, r7
 800949a:	b002      	add	sp, #8
 800949c:	bd80      	pop	{r7, pc}
 800949e:	46c0      	nop			; (mov r8, r8)
 80094a0:	20000d24 	.word	0x20000d24

080094a4 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b084      	sub	sp, #16
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	60f8      	str	r0, [r7, #12]
 80094ac:	60b9      	str	r1, [r7, #8]
 80094ae:	607a      	str	r2, [r7, #4]
 80094b0:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 80094b2:	e002      	b.n	80094ba <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 80094b4:	2001      	movs	r0, #1
 80094b6:	f000 fb25 	bl	8009b04 <HAL_Delay>
	while (w25qxx.Lock == 1)
 80094ba:	4b3a      	ldr	r3, [pc, #232]	; (80095a4 <W25qxx_WritePage+0x100>)
 80094bc:	2227      	movs	r2, #39	; 0x27
 80094be:	5c9b      	ldrb	r3, [r3, r2]
 80094c0:	2b01      	cmp	r3, #1
 80094c2:	d0f7      	beq.n	80094b4 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 80094c4:	4b37      	ldr	r3, [pc, #220]	; (80095a4 <W25qxx_WritePage+0x100>)
 80094c6:	2227      	movs	r2, #39	; 0x27
 80094c8:	2101      	movs	r1, #1
 80094ca:	5499      	strb	r1, [r3, r2]
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 80094cc:	683a      	ldr	r2, [r7, #0]
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	18d3      	adds	r3, r2, r3
 80094d2:	4a34      	ldr	r2, [pc, #208]	; (80095a4 <W25qxx_WritePage+0x100>)
 80094d4:	8952      	ldrh	r2, [r2, #10]
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d802      	bhi.n	80094e0 <W25qxx_WritePage+0x3c>
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d105      	bne.n	80094ec <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80094e0:	4b30      	ldr	r3, [pc, #192]	; (80095a4 <W25qxx_WritePage+0x100>)
 80094e2:	895b      	ldrh	r3, [r3, #10]
 80094e4:	001a      	movs	r2, r3
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	1ad3      	subs	r3, r2, r3
 80094ea:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 80094ec:	687a      	ldr	r2, [r7, #4]
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	18d3      	adds	r3, r2, r3
 80094f2:	4a2c      	ldr	r2, [pc, #176]	; (80095a4 <W25qxx_WritePage+0x100>)
 80094f4:	8952      	ldrh	r2, [r2, #10]
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d905      	bls.n	8009506 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80094fa:	4b2a      	ldr	r3, [pc, #168]	; (80095a4 <W25qxx_WritePage+0x100>)
 80094fc:	895b      	ldrh	r3, [r3, #10]
 80094fe:	001a      	movs	r2, r3
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	1ad3      	subs	r3, r2, r3
 8009504:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	W25qxx_WaitForWriteEnd();
 8009506:	f7ff fe75 	bl	80091f4 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 800950a:	f7ff fe01 	bl	8009110 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800950e:	4b26      	ldr	r3, [pc, #152]	; (80095a8 <W25qxx_WritePage+0x104>)
 8009510:	2200      	movs	r2, #0
 8009512:	2108      	movs	r1, #8
 8009514:	0018      	movs	r0, r3
 8009516:	f000 fe44 	bl	800a1a2 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 800951a:	4b22      	ldr	r3, [pc, #136]	; (80095a4 <W25qxx_WritePage+0x100>)
 800951c:	895b      	ldrh	r3, [r3, #10]
 800951e:	001a      	movs	r2, r3
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	4353      	muls	r3, r2
 8009524:	687a      	ldr	r2, [r7, #4]
 8009526:	18d3      	adds	r3, r2, r3
 8009528:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 800952a:	4b1e      	ldr	r3, [pc, #120]	; (80095a4 <W25qxx_WritePage+0x100>)
 800952c:	781b      	ldrb	r3, [r3, #0]
 800952e:	2b08      	cmp	r3, #8
 8009530:	d909      	bls.n	8009546 <W25qxx_WritePage+0xa2>
	{
		W25qxx_Spi(0x12);
 8009532:	2012      	movs	r0, #18
 8009534:	f7ff fd5a 	bl	8008fec <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	0e1b      	lsrs	r3, r3, #24
 800953c:	b2db      	uxtb	r3, r3
 800953e:	0018      	movs	r0, r3
 8009540:	f7ff fd54 	bl	8008fec <W25qxx_Spi>
 8009544:	e002      	b.n	800954c <W25qxx_WritePage+0xa8>
	}
	else
	{
		W25qxx_Spi(0x02);
 8009546:	2002      	movs	r0, #2
 8009548:	f7ff fd50 	bl	8008fec <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	0c1b      	lsrs	r3, r3, #16
 8009550:	b2db      	uxtb	r3, r3
 8009552:	0018      	movs	r0, r3
 8009554:	f7ff fd4a 	bl	8008fec <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	0a1b      	lsrs	r3, r3, #8
 800955c:	b2db      	uxtb	r3, r3
 800955e:	0018      	movs	r0, r3
 8009560:	f7ff fd44 	bl	8008fec <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	b2db      	uxtb	r3, r3
 8009568:	0018      	movs	r0, r3
 800956a:	f7ff fd3f 	bl	8008fec <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	b29a      	uxth	r2, r3
 8009572:	68f9      	ldr	r1, [r7, #12]
 8009574:	480d      	ldr	r0, [pc, #52]	; (80095ac <W25qxx_WritePage+0x108>)
 8009576:	2364      	movs	r3, #100	; 0x64
 8009578:	f001 fd3e 	bl	800aff8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800957c:	4b0a      	ldr	r3, [pc, #40]	; (80095a8 <W25qxx_WritePage+0x104>)
 800957e:	2201      	movs	r2, #1
 8009580:	2108      	movs	r1, #8
 8009582:	0018      	movs	r0, r3
 8009584:	f000 fe0d 	bl	800a1a2 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8009588:	f7ff fe34 	bl	80091f4 <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 800958c:	2001      	movs	r0, #1
 800958e:	f000 fab9 	bl	8009b04 <HAL_Delay>
	w25qxx.Lock = 0;
 8009592:	4b04      	ldr	r3, [pc, #16]	; (80095a4 <W25qxx_WritePage+0x100>)
 8009594:	2227      	movs	r2, #39	; 0x27
 8009596:	2100      	movs	r1, #0
 8009598:	5499      	strb	r1, [r3, r2]
}
 800959a:	46c0      	nop			; (mov r8, r8)
 800959c:	46bd      	mov	sp, r7
 800959e:	b004      	add	sp, #16
 80095a0:	bd80      	pop	{r7, pc}
 80095a2:	46c0      	nop			; (mov r8, r8)
 80095a4:	20000d24 	.word	0x20000d24
 80095a8:	50000c00 	.word	0x50000c00
 80095ac:	200002e8 	.word	0x200002e8

080095b0 <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 80095b0:	b590      	push	{r4, r7, lr}
 80095b2:	b089      	sub	sp, #36	; 0x24
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	60f8      	str	r0, [r7, #12]
 80095b8:	60b9      	str	r1, [r7, #8]
 80095ba:	607a      	str	r2, [r7, #4]
 80095bc:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 80095be:	4b2d      	ldr	r3, [pc, #180]	; (8009674 <W25qxx_WriteSector+0xc4>)
 80095c0:	691b      	ldr	r3, [r3, #16]
 80095c2:	683a      	ldr	r2, [r7, #0]
 80095c4:	429a      	cmp	r2, r3
 80095c6:	d802      	bhi.n	80095ce <W25qxx_WriteSector+0x1e>
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d102      	bne.n	80095d4 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 80095ce:	4b29      	ldr	r3, [pc, #164]	; (8009674 <W25qxx_WriteSector+0xc4>)
 80095d0:	691b      	ldr	r3, [r3, #16]
 80095d2:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 80095d4:	4b27      	ldr	r3, [pc, #156]	; (8009674 <W25qxx_WriteSector+0xc4>)
 80095d6:	691b      	ldr	r3, [r3, #16]
 80095d8:	687a      	ldr	r2, [r7, #4]
 80095da:	429a      	cmp	r2, r3
 80095dc:	d245      	bcs.n	800966a <W25qxx_WriteSector+0xba>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 80095de:	687a      	ldr	r2, [r7, #4]
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	18d2      	adds	r2, r2, r3
 80095e4:	4b23      	ldr	r3, [pc, #140]	; (8009674 <W25qxx_WriteSector+0xc4>)
 80095e6:	691b      	ldr	r3, [r3, #16]
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d905      	bls.n	80095f8 <W25qxx_WriteSector+0x48>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 80095ec:	4b21      	ldr	r3, [pc, #132]	; (8009674 <W25qxx_WriteSector+0xc4>)
 80095ee:	691a      	ldr	r2, [r3, #16]
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	1ad3      	subs	r3, r2, r3
 80095f4:	61bb      	str	r3, [r7, #24]
 80095f6:	e001      	b.n	80095fc <W25qxx_WriteSector+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	0018      	movs	r0, r3
 8009600:	f7ff ff3a 	bl	8009478 <W25qxx_SectorToPage>
 8009604:	0004      	movs	r4, r0
 8009606:	4b1b      	ldr	r3, [pc, #108]	; (8009674 <W25qxx_WriteSector+0xc4>)
 8009608:	895b      	ldrh	r3, [r3, #10]
 800960a:	0019      	movs	r1, r3
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f7f6 fd9d 	bl	800014c <__udivsi3>
 8009612:	0003      	movs	r3, r0
 8009614:	18e3      	adds	r3, r4, r3
 8009616:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8009618:	4b16      	ldr	r3, [pc, #88]	; (8009674 <W25qxx_WriteSector+0xc4>)
 800961a:	895b      	ldrh	r3, [r3, #10]
 800961c:	001a      	movs	r2, r3
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	0011      	movs	r1, r2
 8009622:	0018      	movs	r0, r3
 8009624:	f7f6 fe18 	bl	8000258 <__aeabi_uidivmod>
 8009628:	000b      	movs	r3, r1
 800962a:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 800962c:	69bb      	ldr	r3, [r7, #24]
 800962e:	697a      	ldr	r2, [r7, #20]
 8009630:	69f9      	ldr	r1, [r7, #28]
 8009632:	68f8      	ldr	r0, [r7, #12]
 8009634:	f7ff ff36 	bl	80094a4 <W25qxx_WritePage>
		StartPage++;
 8009638:	69fb      	ldr	r3, [r7, #28]
 800963a:	3301      	adds	r3, #1
 800963c:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 800963e:	4b0d      	ldr	r3, [pc, #52]	; (8009674 <W25qxx_WriteSector+0xc4>)
 8009640:	895b      	ldrh	r3, [r3, #10]
 8009642:	001a      	movs	r2, r3
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	1a9a      	subs	r2, r3, r2
 8009648:	69bb      	ldr	r3, [r7, #24]
 800964a:	18d3      	adds	r3, r2, r3
 800964c:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 800964e:	4b09      	ldr	r3, [pc, #36]	; (8009674 <W25qxx_WriteSector+0xc4>)
 8009650:	895b      	ldrh	r3, [r3, #10]
 8009652:	001a      	movs	r2, r3
 8009654:	697b      	ldr	r3, [r7, #20]
 8009656:	1ad3      	subs	r3, r2, r3
 8009658:	68fa      	ldr	r2, [r7, #12]
 800965a:	18d3      	adds	r3, r2, r3
 800965c:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 800965e:	2300      	movs	r3, #0
 8009660:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 8009662:	69bb      	ldr	r3, [r7, #24]
 8009664:	2b00      	cmp	r3, #0
 8009666:	dce1      	bgt.n	800962c <W25qxx_WriteSector+0x7c>
 8009668:	e000      	b.n	800966c <W25qxx_WriteSector+0xbc>
		return;
 800966a:	46c0      	nop			; (mov r8, r8)
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 800966c:	46bd      	mov	sp, r7
 800966e:	b009      	add	sp, #36	; 0x24
 8009670:	bd90      	pop	{r4, r7, pc}
 8009672:	46c0      	nop			; (mov r8, r8)
 8009674:	20000d24 	.word	0x20000d24

08009678 <W25qxx_ReadByte>:
	W25qxx_Delay(100);
#endif
}
//###################################################################################################################
void W25qxx_ReadByte(uint8_t *pBuffer, uint32_t Bytes_Address)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b082      	sub	sp, #8
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	6039      	str	r1, [r7, #0]
	while (w25qxx.Lock == 1)
 8009682:	e002      	b.n	800968a <W25qxx_ReadByte+0x12>
		W25qxx_Delay(1);
 8009684:	2001      	movs	r0, #1
 8009686:	f000 fa3d 	bl	8009b04 <HAL_Delay>
	while (w25qxx.Lock == 1)
 800968a:	4b24      	ldr	r3, [pc, #144]	; (800971c <W25qxx_ReadByte+0xa4>)
 800968c:	2227      	movs	r2, #39	; 0x27
 800968e:	5c9b      	ldrb	r3, [r3, r2]
 8009690:	2b01      	cmp	r3, #1
 8009692:	d0f7      	beq.n	8009684 <W25qxx_ReadByte+0xc>
	w25qxx.Lock = 1;
 8009694:	4b21      	ldr	r3, [pc, #132]	; (800971c <W25qxx_ReadByte+0xa4>)
 8009696:	2227      	movs	r2, #39	; 0x27
 8009698:	2101      	movs	r1, #1
 800969a:	5499      	strb	r1, [r3, r2]
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx ReadByte at address %d begin...\r\n", Bytes_Address);
#endif
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800969c:	4b20      	ldr	r3, [pc, #128]	; (8009720 <W25qxx_ReadByte+0xa8>)
 800969e:	2200      	movs	r2, #0
 80096a0:	2108      	movs	r1, #8
 80096a2:	0018      	movs	r0, r3
 80096a4:	f000 fd7d 	bl	800a1a2 <HAL_GPIO_WritePin>

	if (w25qxx.ID >= W25Q256)
 80096a8:	4b1c      	ldr	r3, [pc, #112]	; (800971c <W25qxx_ReadByte+0xa4>)
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	2b08      	cmp	r3, #8
 80096ae:	d909      	bls.n	80096c4 <W25qxx_ReadByte+0x4c>
	{
		W25qxx_Spi(0x0C);
 80096b0:	200c      	movs	r0, #12
 80096b2:	f7ff fc9b 	bl	8008fec <W25qxx_Spi>
		W25qxx_Spi((Bytes_Address & 0xFF000000) >> 24);
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	0e1b      	lsrs	r3, r3, #24
 80096ba:	b2db      	uxtb	r3, r3
 80096bc:	0018      	movs	r0, r3
 80096be:	f7ff fc95 	bl	8008fec <W25qxx_Spi>
 80096c2:	e002      	b.n	80096ca <W25qxx_ReadByte+0x52>
	}
	else
	{
		W25qxx_Spi(0x0B);
 80096c4:	200b      	movs	r0, #11
 80096c6:	f7ff fc91 	bl	8008fec <W25qxx_Spi>
	}
	W25qxx_Spi((Bytes_Address & 0xFF0000) >> 16);
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	0c1b      	lsrs	r3, r3, #16
 80096ce:	b2db      	uxtb	r3, r3
 80096d0:	0018      	movs	r0, r3
 80096d2:	f7ff fc8b 	bl	8008fec <W25qxx_Spi>
	W25qxx_Spi((Bytes_Address & 0xFF00) >> 8);
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	0a1b      	lsrs	r3, r3, #8
 80096da:	b2db      	uxtb	r3, r3
 80096dc:	0018      	movs	r0, r3
 80096de:	f7ff fc85 	bl	8008fec <W25qxx_Spi>
	W25qxx_Spi(Bytes_Address & 0xFF);
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	b2db      	uxtb	r3, r3
 80096e6:	0018      	movs	r0, r3
 80096e8:	f7ff fc80 	bl	8008fec <W25qxx_Spi>
	W25qxx_Spi(0);
 80096ec:	2000      	movs	r0, #0
 80096ee:	f7ff fc7d 	bl	8008fec <W25qxx_Spi>
	*pBuffer = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80096f2:	20a5      	movs	r0, #165	; 0xa5
 80096f4:	f7ff fc7a 	bl	8008fec <W25qxx_Spi>
 80096f8:	0003      	movs	r3, r0
 80096fa:	001a      	movs	r2, r3
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8009700:	4b07      	ldr	r3, [pc, #28]	; (8009720 <W25qxx_ReadByte+0xa8>)
 8009702:	2201      	movs	r2, #1
 8009704:	2108      	movs	r1, #8
 8009706:	0018      	movs	r0, r3
 8009708:	f000 fd4b 	bl	800a1a2 <HAL_GPIO_WritePin>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadByte 0x%02X done after %d ms\r\n", *pBuffer, HAL_GetTick() - StartTime);
#endif
	w25qxx.Lock = 0;
 800970c:	4b03      	ldr	r3, [pc, #12]	; (800971c <W25qxx_ReadByte+0xa4>)
 800970e:	2227      	movs	r2, #39	; 0x27
 8009710:	2100      	movs	r1, #0
 8009712:	5499      	strb	r1, [r3, r2]
}
 8009714:	46c0      	nop			; (mov r8, r8)
 8009716:	46bd      	mov	sp, r7
 8009718:	b002      	add	sp, #8
 800971a:	bd80      	pop	{r7, pc}
 800971c:	20000d24 	.word	0x20000d24
 8009720:	50000c00 	.word	0x50000c00

08009724 <W25qxx_ReadBytes>:
//###################################################################################################################
void W25qxx_ReadBytes(uint8_t *pBuffer, uint32_t ReadAddr, uint32_t NumByteToRead)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b084      	sub	sp, #16
 8009728:	af00      	add	r7, sp, #0
 800972a:	60f8      	str	r0, [r7, #12]
 800972c:	60b9      	str	r1, [r7, #8]
 800972e:	607a      	str	r2, [r7, #4]
	while (w25qxx.Lock == 1)
 8009730:	e002      	b.n	8009738 <W25qxx_ReadBytes+0x14>
		W25qxx_Delay(1);
 8009732:	2001      	movs	r0, #1
 8009734:	f000 f9e6 	bl	8009b04 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8009738:	4b26      	ldr	r3, [pc, #152]	; (80097d4 <W25qxx_ReadBytes+0xb0>)
 800973a:	2227      	movs	r2, #39	; 0x27
 800973c:	5c9b      	ldrb	r3, [r3, r2]
 800973e:	2b01      	cmp	r3, #1
 8009740:	d0f7      	beq.n	8009732 <W25qxx_ReadBytes+0xe>
	w25qxx.Lock = 1;
 8009742:	4b24      	ldr	r3, [pc, #144]	; (80097d4 <W25qxx_ReadBytes+0xb0>)
 8009744:	2227      	movs	r2, #39	; 0x27
 8009746:	2101      	movs	r1, #1
 8009748:	5499      	strb	r1, [r3, r2]
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx ReadBytes at Address:%d, %d Bytes  begin...\r\n", ReadAddr, NumByteToRead);
#endif
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800974a:	4b23      	ldr	r3, [pc, #140]	; (80097d8 <W25qxx_ReadBytes+0xb4>)
 800974c:	2200      	movs	r2, #0
 800974e:	2108      	movs	r1, #8
 8009750:	0018      	movs	r0, r3
 8009752:	f000 fd26 	bl	800a1a2 <HAL_GPIO_WritePin>

	if (w25qxx.ID >= W25Q256)
 8009756:	4b1f      	ldr	r3, [pc, #124]	; (80097d4 <W25qxx_ReadBytes+0xb0>)
 8009758:	781b      	ldrb	r3, [r3, #0]
 800975a:	2b08      	cmp	r3, #8
 800975c:	d909      	bls.n	8009772 <W25qxx_ReadBytes+0x4e>
	{
		W25qxx_Spi(0x0C);
 800975e:	200c      	movs	r0, #12
 8009760:	f7ff fc44 	bl	8008fec <W25qxx_Spi>
		W25qxx_Spi((ReadAddr & 0xFF000000) >> 24);
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	0e1b      	lsrs	r3, r3, #24
 8009768:	b2db      	uxtb	r3, r3
 800976a:	0018      	movs	r0, r3
 800976c:	f7ff fc3e 	bl	8008fec <W25qxx_Spi>
 8009770:	e002      	b.n	8009778 <W25qxx_ReadBytes+0x54>
	}
	else
	{
		W25qxx_Spi(0x0B);
 8009772:	200b      	movs	r0, #11
 8009774:	f7ff fc3a 	bl	8008fec <W25qxx_Spi>
	}
	W25qxx_Spi((ReadAddr & 0xFF0000) >> 16);
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	0c1b      	lsrs	r3, r3, #16
 800977c:	b2db      	uxtb	r3, r3
 800977e:	0018      	movs	r0, r3
 8009780:	f7ff fc34 	bl	8008fec <W25qxx_Spi>
	W25qxx_Spi((ReadAddr & 0xFF00) >> 8);
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	0a1b      	lsrs	r3, r3, #8
 8009788:	b2db      	uxtb	r3, r3
 800978a:	0018      	movs	r0, r3
 800978c:	f7ff fc2e 	bl	8008fec <W25qxx_Spi>
	W25qxx_Spi(ReadAddr & 0xFF);
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	b2db      	uxtb	r3, r3
 8009794:	0018      	movs	r0, r3
 8009796:	f7ff fc29 	bl	8008fec <W25qxx_Spi>
	W25qxx_Spi(0);
 800979a:	2000      	movs	r0, #0
 800979c:	f7ff fc26 	bl	8008fec <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead, 2000);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	b29a      	uxth	r2, r3
 80097a4:	23fa      	movs	r3, #250	; 0xfa
 80097a6:	00db      	lsls	r3, r3, #3
 80097a8:	68f9      	ldr	r1, [r7, #12]
 80097aa:	480c      	ldr	r0, [pc, #48]	; (80097dc <W25qxx_ReadBytes+0xb8>)
 80097ac:	f001 fd7c 	bl	800b2a8 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80097b0:	4b09      	ldr	r3, [pc, #36]	; (80097d8 <W25qxx_ReadBytes+0xb4>)
 80097b2:	2201      	movs	r2, #1
 80097b4:	2108      	movs	r1, #8
 80097b6:	0018      	movs	r0, r3
 80097b8:	f000 fcf3 	bl	800a1a2 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadBytes done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 80097bc:	2001      	movs	r0, #1
 80097be:	f000 f9a1 	bl	8009b04 <HAL_Delay>
	w25qxx.Lock = 0;
 80097c2:	4b04      	ldr	r3, [pc, #16]	; (80097d4 <W25qxx_ReadBytes+0xb0>)
 80097c4:	2227      	movs	r2, #39	; 0x27
 80097c6:	2100      	movs	r1, #0
 80097c8:	5499      	strb	r1, [r3, r2]
}
 80097ca:	46c0      	nop			; (mov r8, r8)
 80097cc:	46bd      	mov	sp, r7
 80097ce:	b004      	add	sp, #16
 80097d0:	bd80      	pop	{r7, pc}
 80097d2:	46c0      	nop			; (mov r8, r8)
 80097d4:	20000d24 	.word	0x20000d24
 80097d8:	50000c00 	.word	0x50000c00
 80097dc:	200002e8 	.word	0x200002e8

080097e0 <W25qxx_ReadPage>:
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b084      	sub	sp, #16
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	60f8      	str	r0, [r7, #12]
 80097e8:	60b9      	str	r1, [r7, #8]
 80097ea:	607a      	str	r2, [r7, #4]
 80097ec:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 80097ee:	e002      	b.n	80097f6 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 80097f0:	2001      	movs	r0, #1
 80097f2:	f000 f987 	bl	8009b04 <HAL_Delay>
	while (w25qxx.Lock == 1)
 80097f6:	4b36      	ldr	r3, [pc, #216]	; (80098d0 <W25qxx_ReadPage+0xf0>)
 80097f8:	2227      	movs	r2, #39	; 0x27
 80097fa:	5c9b      	ldrb	r3, [r3, r2]
 80097fc:	2b01      	cmp	r3, #1
 80097fe:	d0f7      	beq.n	80097f0 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 8009800:	4b33      	ldr	r3, [pc, #204]	; (80098d0 <W25qxx_ReadPage+0xf0>)
 8009802:	2227      	movs	r2, #39	; 0x27
 8009804:	2101      	movs	r1, #1
 8009806:	5499      	strb	r1, [r3, r2]
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 8009808:	4b31      	ldr	r3, [pc, #196]	; (80098d0 <W25qxx_ReadPage+0xf0>)
 800980a:	895b      	ldrh	r3, [r3, #10]
 800980c:	001a      	movs	r2, r3
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	4293      	cmp	r3, r2
 8009812:	d802      	bhi.n	800981a <W25qxx_ReadPage+0x3a>
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d102      	bne.n	8009820 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 800981a:	4b2d      	ldr	r3, [pc, #180]	; (80098d0 <W25qxx_ReadPage+0xf0>)
 800981c:	895b      	ldrh	r3, [r3, #10]
 800981e:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8009820:	687a      	ldr	r2, [r7, #4]
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	18d3      	adds	r3, r2, r3
 8009826:	4a2a      	ldr	r2, [pc, #168]	; (80098d0 <W25qxx_ReadPage+0xf0>)
 8009828:	8952      	ldrh	r2, [r2, #10]
 800982a:	4293      	cmp	r3, r2
 800982c:	d905      	bls.n	800983a <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800982e:	4b28      	ldr	r3, [pc, #160]	; (80098d0 <W25qxx_ReadPage+0xf0>)
 8009830:	895b      	ldrh	r3, [r3, #10]
 8009832:	001a      	movs	r2, r3
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	1ad3      	subs	r3, r2, r3
 8009838:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 800983a:	4b25      	ldr	r3, [pc, #148]	; (80098d0 <W25qxx_ReadPage+0xf0>)
 800983c:	895b      	ldrh	r3, [r3, #10]
 800983e:	001a      	movs	r2, r3
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	4353      	muls	r3, r2
 8009844:	687a      	ldr	r2, [r7, #4]
 8009846:	18d3      	adds	r3, r2, r3
 8009848:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800984a:	4b22      	ldr	r3, [pc, #136]	; (80098d4 <W25qxx_ReadPage+0xf4>)
 800984c:	2200      	movs	r2, #0
 800984e:	2108      	movs	r1, #8
 8009850:	0018      	movs	r0, r3
 8009852:	f000 fca6 	bl	800a1a2 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8009856:	4b1e      	ldr	r3, [pc, #120]	; (80098d0 <W25qxx_ReadPage+0xf0>)
 8009858:	781b      	ldrb	r3, [r3, #0]
 800985a:	2b08      	cmp	r3, #8
 800985c:	d909      	bls.n	8009872 <W25qxx_ReadPage+0x92>
	{
		W25qxx_Spi(0x0C);
 800985e:	200c      	movs	r0, #12
 8009860:	f7ff fbc4 	bl	8008fec <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	0e1b      	lsrs	r3, r3, #24
 8009868:	b2db      	uxtb	r3, r3
 800986a:	0018      	movs	r0, r3
 800986c:	f7ff fbbe 	bl	8008fec <W25qxx_Spi>
 8009870:	e002      	b.n	8009878 <W25qxx_ReadPage+0x98>
	}
	else
	{
		W25qxx_Spi(0x0B);
 8009872:	200b      	movs	r0, #11
 8009874:	f7ff fbba 	bl	8008fec <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	0c1b      	lsrs	r3, r3, #16
 800987c:	b2db      	uxtb	r3, r3
 800987e:	0018      	movs	r0, r3
 8009880:	f7ff fbb4 	bl	8008fec <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	0a1b      	lsrs	r3, r3, #8
 8009888:	b2db      	uxtb	r3, r3
 800988a:	0018      	movs	r0, r3
 800988c:	f7ff fbae 	bl	8008fec <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	b2db      	uxtb	r3, r3
 8009894:	0018      	movs	r0, r3
 8009896:	f7ff fba9 	bl	8008fec <W25qxx_Spi>
	W25qxx_Spi(0);
 800989a:	2000      	movs	r0, #0
 800989c:	f7ff fba6 	bl	8008fec <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	b29a      	uxth	r2, r3
 80098a4:	68f9      	ldr	r1, [r7, #12]
 80098a6:	480c      	ldr	r0, [pc, #48]	; (80098d8 <W25qxx_ReadPage+0xf8>)
 80098a8:	2364      	movs	r3, #100	; 0x64
 80098aa:	f001 fcfd 	bl	800b2a8 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80098ae:	4b09      	ldr	r3, [pc, #36]	; (80098d4 <W25qxx_ReadPage+0xf4>)
 80098b0:	2201      	movs	r2, #1
 80098b2:	2108      	movs	r1, #8
 80098b4:	0018      	movs	r0, r3
 80098b6:	f000 fc74 	bl	800a1a2 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 80098ba:	2001      	movs	r0, #1
 80098bc:	f000 f922 	bl	8009b04 <HAL_Delay>
	w25qxx.Lock = 0;
 80098c0:	4b03      	ldr	r3, [pc, #12]	; (80098d0 <W25qxx_ReadPage+0xf0>)
 80098c2:	2227      	movs	r2, #39	; 0x27
 80098c4:	2100      	movs	r1, #0
 80098c6:	5499      	strb	r1, [r3, r2]
}
 80098c8:	46c0      	nop			; (mov r8, r8)
 80098ca:	46bd      	mov	sp, r7
 80098cc:	b004      	add	sp, #16
 80098ce:	bd80      	pop	{r7, pc}
 80098d0:	20000d24 	.word	0x20000d24
 80098d4:	50000c00 	.word	0x50000c00
 80098d8:	200002e8 	.word	0x200002e8

080098dc <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 80098dc:	b590      	push	{r4, r7, lr}
 80098de:	b089      	sub	sp, #36	; 0x24
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	60f8      	str	r0, [r7, #12]
 80098e4:	60b9      	str	r1, [r7, #8]
 80098e6:	607a      	str	r2, [r7, #4]
 80098e8:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 80098ea:	4b2d      	ldr	r3, [pc, #180]	; (80099a0 <W25qxx_ReadSector+0xc4>)
 80098ec:	691b      	ldr	r3, [r3, #16]
 80098ee:	683a      	ldr	r2, [r7, #0]
 80098f0:	429a      	cmp	r2, r3
 80098f2:	d802      	bhi.n	80098fa <W25qxx_ReadSector+0x1e>
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d102      	bne.n	8009900 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 80098fa:	4b29      	ldr	r3, [pc, #164]	; (80099a0 <W25qxx_ReadSector+0xc4>)
 80098fc:	691b      	ldr	r3, [r3, #16]
 80098fe:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8009900:	4b27      	ldr	r3, [pc, #156]	; (80099a0 <W25qxx_ReadSector+0xc4>)
 8009902:	691b      	ldr	r3, [r3, #16]
 8009904:	687a      	ldr	r2, [r7, #4]
 8009906:	429a      	cmp	r2, r3
 8009908:	d245      	bcs.n	8009996 <W25qxx_ReadSector+0xba>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 800990a:	687a      	ldr	r2, [r7, #4]
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	18d2      	adds	r2, r2, r3
 8009910:	4b23      	ldr	r3, [pc, #140]	; (80099a0 <W25qxx_ReadSector+0xc4>)
 8009912:	691b      	ldr	r3, [r3, #16]
 8009914:	429a      	cmp	r2, r3
 8009916:	d905      	bls.n	8009924 <W25qxx_ReadSector+0x48>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 8009918:	4b21      	ldr	r3, [pc, #132]	; (80099a0 <W25qxx_ReadSector+0xc4>)
 800991a:	691a      	ldr	r2, [r3, #16]
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	1ad3      	subs	r3, r2, r3
 8009920:	61bb      	str	r3, [r7, #24]
 8009922:	e001      	b.n	8009928 <W25qxx_ReadSector+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	0018      	movs	r0, r3
 800992c:	f7ff fda4 	bl	8009478 <W25qxx_SectorToPage>
 8009930:	0004      	movs	r4, r0
 8009932:	4b1b      	ldr	r3, [pc, #108]	; (80099a0 <W25qxx_ReadSector+0xc4>)
 8009934:	895b      	ldrh	r3, [r3, #10]
 8009936:	0019      	movs	r1, r3
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f7f6 fc07 	bl	800014c <__udivsi3>
 800993e:	0003      	movs	r3, r0
 8009940:	18e3      	adds	r3, r4, r3
 8009942:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8009944:	4b16      	ldr	r3, [pc, #88]	; (80099a0 <W25qxx_ReadSector+0xc4>)
 8009946:	895b      	ldrh	r3, [r3, #10]
 8009948:	001a      	movs	r2, r3
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	0011      	movs	r1, r2
 800994e:	0018      	movs	r0, r3
 8009950:	f7f6 fc82 	bl	8000258 <__aeabi_uidivmod>
 8009954:	000b      	movs	r3, r1
 8009956:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8009958:	69bb      	ldr	r3, [r7, #24]
 800995a:	697a      	ldr	r2, [r7, #20]
 800995c:	69f9      	ldr	r1, [r7, #28]
 800995e:	68f8      	ldr	r0, [r7, #12]
 8009960:	f7ff ff3e 	bl	80097e0 <W25qxx_ReadPage>
		StartPage++;
 8009964:	69fb      	ldr	r3, [r7, #28]
 8009966:	3301      	adds	r3, #1
 8009968:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 800996a:	4b0d      	ldr	r3, [pc, #52]	; (80099a0 <W25qxx_ReadSector+0xc4>)
 800996c:	895b      	ldrh	r3, [r3, #10]
 800996e:	001a      	movs	r2, r3
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	1a9a      	subs	r2, r3, r2
 8009974:	69bb      	ldr	r3, [r7, #24]
 8009976:	18d3      	adds	r3, r2, r3
 8009978:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 800997a:	4b09      	ldr	r3, [pc, #36]	; (80099a0 <W25qxx_ReadSector+0xc4>)
 800997c:	895b      	ldrh	r3, [r3, #10]
 800997e:	001a      	movs	r2, r3
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	1ad3      	subs	r3, r2, r3
 8009984:	68fa      	ldr	r2, [r7, #12]
 8009986:	18d3      	adds	r3, r2, r3
 8009988:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 800998a:	2300      	movs	r3, #0
 800998c:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 800998e:	69bb      	ldr	r3, [r7, #24]
 8009990:	2b00      	cmp	r3, #0
 8009992:	dce1      	bgt.n	8009958 <W25qxx_ReadSector+0x7c>
 8009994:	e000      	b.n	8009998 <W25qxx_ReadSector+0xbc>
		return;
 8009996:	46c0      	nop			; (mov r8, r8)
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
#endif

}
 8009998:	46bd      	mov	sp, r7
 800999a:	b009      	add	sp, #36	; 0x24
 800999c:	bd90      	pop	{r4, r7, pc}
 800999e:	46c0      	nop			; (mov r8, r8)
 80099a0:	20000d24 	.word	0x20000d24

080099a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80099a4:	480d      	ldr	r0, [pc, #52]	; (80099dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80099a6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80099a8:	f7ff fb1a 	bl	8008fe0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80099ac:	480c      	ldr	r0, [pc, #48]	; (80099e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80099ae:	490d      	ldr	r1, [pc, #52]	; (80099e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80099b0:	4a0d      	ldr	r2, [pc, #52]	; (80099e8 <LoopForever+0xe>)
  movs r3, #0
 80099b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80099b4:	e002      	b.n	80099bc <LoopCopyDataInit>

080099b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80099b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80099b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80099ba:	3304      	adds	r3, #4

080099bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80099bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80099be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80099c0:	d3f9      	bcc.n	80099b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80099c2:	4a0a      	ldr	r2, [pc, #40]	; (80099ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80099c4:	4c0a      	ldr	r4, [pc, #40]	; (80099f0 <LoopForever+0x16>)
  movs r3, #0
 80099c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80099c8:	e001      	b.n	80099ce <LoopFillZerobss>

080099ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80099ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80099cc:	3204      	adds	r2, #4

080099ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80099ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80099d0:	d3fb      	bcc.n	80099ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80099d2:	f005 fa03 	bl	800eddc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80099d6:	f7f9 ff07 	bl	80037e8 <main>

080099da <LoopForever>:

LoopForever:
  b LoopForever
 80099da:	e7fe      	b.n	80099da <LoopForever>
  ldr   r0, =_estack
 80099dc:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80099e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80099e4:	200002b8 	.word	0x200002b8
  ldr r2, =_sidata
 80099e8:	08013ce0 	.word	0x08013ce0
  ldr r2, =_sbss
 80099ec:	200002b8 	.word	0x200002b8
  ldr r4, =_ebss
 80099f0:	20000d60 	.word	0x20000d60

080099f4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80099f4:	e7fe      	b.n	80099f4 <ADC1_IRQHandler>
	...

080099f8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80099fe:	1dfb      	adds	r3, r7, #7
 8009a00:	2200      	movs	r2, #0
 8009a02:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009a04:	4b0b      	ldr	r3, [pc, #44]	; (8009a34 <HAL_Init+0x3c>)
 8009a06:	681a      	ldr	r2, [r3, #0]
 8009a08:	4b0a      	ldr	r3, [pc, #40]	; (8009a34 <HAL_Init+0x3c>)
 8009a0a:	2180      	movs	r1, #128	; 0x80
 8009a0c:	0049      	lsls	r1, r1, #1
 8009a0e:	430a      	orrs	r2, r1
 8009a10:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009a12:	2000      	movs	r0, #0
 8009a14:	f000 f810 	bl	8009a38 <HAL_InitTick>
 8009a18:	1e03      	subs	r3, r0, #0
 8009a1a:	d003      	beq.n	8009a24 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8009a1c:	1dfb      	adds	r3, r7, #7
 8009a1e:	2201      	movs	r2, #1
 8009a20:	701a      	strb	r2, [r3, #0]
 8009a22:	e001      	b.n	8009a28 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8009a24:	f7fe fee4 	bl	80087f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8009a28:	1dfb      	adds	r3, r7, #7
 8009a2a:	781b      	ldrb	r3, [r3, #0]
}
 8009a2c:	0018      	movs	r0, r3
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	b002      	add	sp, #8
 8009a32:	bd80      	pop	{r7, pc}
 8009a34:	40022000 	.word	0x40022000

08009a38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009a38:	b590      	push	{r4, r7, lr}
 8009a3a:	b085      	sub	sp, #20
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8009a40:	230f      	movs	r3, #15
 8009a42:	18fb      	adds	r3, r7, r3
 8009a44:	2200      	movs	r2, #0
 8009a46:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8009a48:	4b1d      	ldr	r3, [pc, #116]	; (8009ac0 <HAL_InitTick+0x88>)
 8009a4a:	781b      	ldrb	r3, [r3, #0]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d02b      	beq.n	8009aa8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8009a50:	4b1c      	ldr	r3, [pc, #112]	; (8009ac4 <HAL_InitTick+0x8c>)
 8009a52:	681c      	ldr	r4, [r3, #0]
 8009a54:	4b1a      	ldr	r3, [pc, #104]	; (8009ac0 <HAL_InitTick+0x88>)
 8009a56:	781b      	ldrb	r3, [r3, #0]
 8009a58:	0019      	movs	r1, r3
 8009a5a:	23fa      	movs	r3, #250	; 0xfa
 8009a5c:	0098      	lsls	r0, r3, #2
 8009a5e:	f7f6 fb75 	bl	800014c <__udivsi3>
 8009a62:	0003      	movs	r3, r0
 8009a64:	0019      	movs	r1, r3
 8009a66:	0020      	movs	r0, r4
 8009a68:	f7f6 fb70 	bl	800014c <__udivsi3>
 8009a6c:	0003      	movs	r3, r0
 8009a6e:	0018      	movs	r0, r3
 8009a70:	f000 f93d 	bl	8009cee <HAL_SYSTICK_Config>
 8009a74:	1e03      	subs	r3, r0, #0
 8009a76:	d112      	bne.n	8009a9e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2b03      	cmp	r3, #3
 8009a7c:	d80a      	bhi.n	8009a94 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009a7e:	6879      	ldr	r1, [r7, #4]
 8009a80:	2301      	movs	r3, #1
 8009a82:	425b      	negs	r3, r3
 8009a84:	2200      	movs	r2, #0
 8009a86:	0018      	movs	r0, r3
 8009a88:	f000 f90c 	bl	8009ca4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8009a8c:	4b0e      	ldr	r3, [pc, #56]	; (8009ac8 <HAL_InitTick+0x90>)
 8009a8e:	687a      	ldr	r2, [r7, #4]
 8009a90:	601a      	str	r2, [r3, #0]
 8009a92:	e00d      	b.n	8009ab0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8009a94:	230f      	movs	r3, #15
 8009a96:	18fb      	adds	r3, r7, r3
 8009a98:	2201      	movs	r2, #1
 8009a9a:	701a      	strb	r2, [r3, #0]
 8009a9c:	e008      	b.n	8009ab0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8009a9e:	230f      	movs	r3, #15
 8009aa0:	18fb      	adds	r3, r7, r3
 8009aa2:	2201      	movs	r2, #1
 8009aa4:	701a      	strb	r2, [r3, #0]
 8009aa6:	e003      	b.n	8009ab0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8009aa8:	230f      	movs	r3, #15
 8009aaa:	18fb      	adds	r3, r7, r3
 8009aac:	2201      	movs	r2, #1
 8009aae:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8009ab0:	230f      	movs	r3, #15
 8009ab2:	18fb      	adds	r3, r7, r3
 8009ab4:	781b      	ldrb	r3, [r3, #0]
}
 8009ab6:	0018      	movs	r0, r3
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	b005      	add	sp, #20
 8009abc:	bd90      	pop	{r4, r7, pc}
 8009abe:	46c0      	nop			; (mov r8, r8)
 8009ac0:	200000e0 	.word	0x200000e0
 8009ac4:	200000d8 	.word	0x200000d8
 8009ac8:	200000dc 	.word	0x200000dc

08009acc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8009ad0:	4b05      	ldr	r3, [pc, #20]	; (8009ae8 <HAL_IncTick+0x1c>)
 8009ad2:	781b      	ldrb	r3, [r3, #0]
 8009ad4:	001a      	movs	r2, r3
 8009ad6:	4b05      	ldr	r3, [pc, #20]	; (8009aec <HAL_IncTick+0x20>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	18d2      	adds	r2, r2, r3
 8009adc:	4b03      	ldr	r3, [pc, #12]	; (8009aec <HAL_IncTick+0x20>)
 8009ade:	601a      	str	r2, [r3, #0]
}
 8009ae0:	46c0      	nop			; (mov r8, r8)
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}
 8009ae6:	46c0      	nop			; (mov r8, r8)
 8009ae8:	200000e0 	.word	0x200000e0
 8009aec:	20000d4c 	.word	0x20000d4c

08009af0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	af00      	add	r7, sp, #0
  return uwTick;
 8009af4:	4b02      	ldr	r3, [pc, #8]	; (8009b00 <HAL_GetTick+0x10>)
 8009af6:	681b      	ldr	r3, [r3, #0]
}
 8009af8:	0018      	movs	r0, r3
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}
 8009afe:	46c0      	nop			; (mov r8, r8)
 8009b00:	20000d4c 	.word	0x20000d4c

08009b04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b084      	sub	sp, #16
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009b0c:	f7ff fff0 	bl	8009af0 <HAL_GetTick>
 8009b10:	0003      	movs	r3, r0
 8009b12:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	3301      	adds	r3, #1
 8009b1c:	d005      	beq.n	8009b2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009b1e:	4b0a      	ldr	r3, [pc, #40]	; (8009b48 <HAL_Delay+0x44>)
 8009b20:	781b      	ldrb	r3, [r3, #0]
 8009b22:	001a      	movs	r2, r3
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	189b      	adds	r3, r3, r2
 8009b28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009b2a:	46c0      	nop			; (mov r8, r8)
 8009b2c:	f7ff ffe0 	bl	8009af0 <HAL_GetTick>
 8009b30:	0002      	movs	r2, r0
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	1ad3      	subs	r3, r2, r3
 8009b36:	68fa      	ldr	r2, [r7, #12]
 8009b38:	429a      	cmp	r2, r3
 8009b3a:	d8f7      	bhi.n	8009b2c <HAL_Delay+0x28>
  {
  }
}
 8009b3c:	46c0      	nop			; (mov r8, r8)
 8009b3e:	46c0      	nop			; (mov r8, r8)
 8009b40:	46bd      	mov	sp, r7
 8009b42:	b004      	add	sp, #16
 8009b44:	bd80      	pop	{r7, pc}
 8009b46:	46c0      	nop			; (mov r8, r8)
 8009b48:	200000e0 	.word	0x200000e0

08009b4c <__NVIC_EnableIRQ>:
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b082      	sub	sp, #8
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	0002      	movs	r2, r0
 8009b54:	1dfb      	adds	r3, r7, #7
 8009b56:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8009b58:	1dfb      	adds	r3, r7, #7
 8009b5a:	781b      	ldrb	r3, [r3, #0]
 8009b5c:	2b7f      	cmp	r3, #127	; 0x7f
 8009b5e:	d809      	bhi.n	8009b74 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009b60:	1dfb      	adds	r3, r7, #7
 8009b62:	781b      	ldrb	r3, [r3, #0]
 8009b64:	001a      	movs	r2, r3
 8009b66:	231f      	movs	r3, #31
 8009b68:	401a      	ands	r2, r3
 8009b6a:	4b04      	ldr	r3, [pc, #16]	; (8009b7c <__NVIC_EnableIRQ+0x30>)
 8009b6c:	2101      	movs	r1, #1
 8009b6e:	4091      	lsls	r1, r2
 8009b70:	000a      	movs	r2, r1
 8009b72:	601a      	str	r2, [r3, #0]
}
 8009b74:	46c0      	nop			; (mov r8, r8)
 8009b76:	46bd      	mov	sp, r7
 8009b78:	b002      	add	sp, #8
 8009b7a:	bd80      	pop	{r7, pc}
 8009b7c:	e000e100 	.word	0xe000e100

08009b80 <__NVIC_SetPriority>:
{
 8009b80:	b590      	push	{r4, r7, lr}
 8009b82:	b083      	sub	sp, #12
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	0002      	movs	r2, r0
 8009b88:	6039      	str	r1, [r7, #0]
 8009b8a:	1dfb      	adds	r3, r7, #7
 8009b8c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8009b8e:	1dfb      	adds	r3, r7, #7
 8009b90:	781b      	ldrb	r3, [r3, #0]
 8009b92:	2b7f      	cmp	r3, #127	; 0x7f
 8009b94:	d828      	bhi.n	8009be8 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009b96:	4a2f      	ldr	r2, [pc, #188]	; (8009c54 <__NVIC_SetPriority+0xd4>)
 8009b98:	1dfb      	adds	r3, r7, #7
 8009b9a:	781b      	ldrb	r3, [r3, #0]
 8009b9c:	b25b      	sxtb	r3, r3
 8009b9e:	089b      	lsrs	r3, r3, #2
 8009ba0:	33c0      	adds	r3, #192	; 0xc0
 8009ba2:	009b      	lsls	r3, r3, #2
 8009ba4:	589b      	ldr	r3, [r3, r2]
 8009ba6:	1dfa      	adds	r2, r7, #7
 8009ba8:	7812      	ldrb	r2, [r2, #0]
 8009baa:	0011      	movs	r1, r2
 8009bac:	2203      	movs	r2, #3
 8009bae:	400a      	ands	r2, r1
 8009bb0:	00d2      	lsls	r2, r2, #3
 8009bb2:	21ff      	movs	r1, #255	; 0xff
 8009bb4:	4091      	lsls	r1, r2
 8009bb6:	000a      	movs	r2, r1
 8009bb8:	43d2      	mvns	r2, r2
 8009bba:	401a      	ands	r2, r3
 8009bbc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	019b      	lsls	r3, r3, #6
 8009bc2:	22ff      	movs	r2, #255	; 0xff
 8009bc4:	401a      	ands	r2, r3
 8009bc6:	1dfb      	adds	r3, r7, #7
 8009bc8:	781b      	ldrb	r3, [r3, #0]
 8009bca:	0018      	movs	r0, r3
 8009bcc:	2303      	movs	r3, #3
 8009bce:	4003      	ands	r3, r0
 8009bd0:	00db      	lsls	r3, r3, #3
 8009bd2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009bd4:	481f      	ldr	r0, [pc, #124]	; (8009c54 <__NVIC_SetPriority+0xd4>)
 8009bd6:	1dfb      	adds	r3, r7, #7
 8009bd8:	781b      	ldrb	r3, [r3, #0]
 8009bda:	b25b      	sxtb	r3, r3
 8009bdc:	089b      	lsrs	r3, r3, #2
 8009bde:	430a      	orrs	r2, r1
 8009be0:	33c0      	adds	r3, #192	; 0xc0
 8009be2:	009b      	lsls	r3, r3, #2
 8009be4:	501a      	str	r2, [r3, r0]
}
 8009be6:	e031      	b.n	8009c4c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009be8:	4a1b      	ldr	r2, [pc, #108]	; (8009c58 <__NVIC_SetPriority+0xd8>)
 8009bea:	1dfb      	adds	r3, r7, #7
 8009bec:	781b      	ldrb	r3, [r3, #0]
 8009bee:	0019      	movs	r1, r3
 8009bf0:	230f      	movs	r3, #15
 8009bf2:	400b      	ands	r3, r1
 8009bf4:	3b08      	subs	r3, #8
 8009bf6:	089b      	lsrs	r3, r3, #2
 8009bf8:	3306      	adds	r3, #6
 8009bfa:	009b      	lsls	r3, r3, #2
 8009bfc:	18d3      	adds	r3, r2, r3
 8009bfe:	3304      	adds	r3, #4
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	1dfa      	adds	r2, r7, #7
 8009c04:	7812      	ldrb	r2, [r2, #0]
 8009c06:	0011      	movs	r1, r2
 8009c08:	2203      	movs	r2, #3
 8009c0a:	400a      	ands	r2, r1
 8009c0c:	00d2      	lsls	r2, r2, #3
 8009c0e:	21ff      	movs	r1, #255	; 0xff
 8009c10:	4091      	lsls	r1, r2
 8009c12:	000a      	movs	r2, r1
 8009c14:	43d2      	mvns	r2, r2
 8009c16:	401a      	ands	r2, r3
 8009c18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	019b      	lsls	r3, r3, #6
 8009c1e:	22ff      	movs	r2, #255	; 0xff
 8009c20:	401a      	ands	r2, r3
 8009c22:	1dfb      	adds	r3, r7, #7
 8009c24:	781b      	ldrb	r3, [r3, #0]
 8009c26:	0018      	movs	r0, r3
 8009c28:	2303      	movs	r3, #3
 8009c2a:	4003      	ands	r3, r0
 8009c2c:	00db      	lsls	r3, r3, #3
 8009c2e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009c30:	4809      	ldr	r0, [pc, #36]	; (8009c58 <__NVIC_SetPriority+0xd8>)
 8009c32:	1dfb      	adds	r3, r7, #7
 8009c34:	781b      	ldrb	r3, [r3, #0]
 8009c36:	001c      	movs	r4, r3
 8009c38:	230f      	movs	r3, #15
 8009c3a:	4023      	ands	r3, r4
 8009c3c:	3b08      	subs	r3, #8
 8009c3e:	089b      	lsrs	r3, r3, #2
 8009c40:	430a      	orrs	r2, r1
 8009c42:	3306      	adds	r3, #6
 8009c44:	009b      	lsls	r3, r3, #2
 8009c46:	18c3      	adds	r3, r0, r3
 8009c48:	3304      	adds	r3, #4
 8009c4a:	601a      	str	r2, [r3, #0]
}
 8009c4c:	46c0      	nop			; (mov r8, r8)
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	b003      	add	sp, #12
 8009c52:	bd90      	pop	{r4, r7, pc}
 8009c54:	e000e100 	.word	0xe000e100
 8009c58:	e000ed00 	.word	0xe000ed00

08009c5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b082      	sub	sp, #8
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	1e5a      	subs	r2, r3, #1
 8009c68:	2380      	movs	r3, #128	; 0x80
 8009c6a:	045b      	lsls	r3, r3, #17
 8009c6c:	429a      	cmp	r2, r3
 8009c6e:	d301      	bcc.n	8009c74 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009c70:	2301      	movs	r3, #1
 8009c72:	e010      	b.n	8009c96 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009c74:	4b0a      	ldr	r3, [pc, #40]	; (8009ca0 <SysTick_Config+0x44>)
 8009c76:	687a      	ldr	r2, [r7, #4]
 8009c78:	3a01      	subs	r2, #1
 8009c7a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	425b      	negs	r3, r3
 8009c80:	2103      	movs	r1, #3
 8009c82:	0018      	movs	r0, r3
 8009c84:	f7ff ff7c 	bl	8009b80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009c88:	4b05      	ldr	r3, [pc, #20]	; (8009ca0 <SysTick_Config+0x44>)
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009c8e:	4b04      	ldr	r3, [pc, #16]	; (8009ca0 <SysTick_Config+0x44>)
 8009c90:	2207      	movs	r2, #7
 8009c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009c94:	2300      	movs	r3, #0
}
 8009c96:	0018      	movs	r0, r3
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	b002      	add	sp, #8
 8009c9c:	bd80      	pop	{r7, pc}
 8009c9e:	46c0      	nop			; (mov r8, r8)
 8009ca0:	e000e010 	.word	0xe000e010

08009ca4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b084      	sub	sp, #16
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	60b9      	str	r1, [r7, #8]
 8009cac:	607a      	str	r2, [r7, #4]
 8009cae:	210f      	movs	r1, #15
 8009cb0:	187b      	adds	r3, r7, r1
 8009cb2:	1c02      	adds	r2, r0, #0
 8009cb4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8009cb6:	68ba      	ldr	r2, [r7, #8]
 8009cb8:	187b      	adds	r3, r7, r1
 8009cba:	781b      	ldrb	r3, [r3, #0]
 8009cbc:	b25b      	sxtb	r3, r3
 8009cbe:	0011      	movs	r1, r2
 8009cc0:	0018      	movs	r0, r3
 8009cc2:	f7ff ff5d 	bl	8009b80 <__NVIC_SetPriority>
}
 8009cc6:	46c0      	nop			; (mov r8, r8)
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	b004      	add	sp, #16
 8009ccc:	bd80      	pop	{r7, pc}

08009cce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009cce:	b580      	push	{r7, lr}
 8009cd0:	b082      	sub	sp, #8
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	0002      	movs	r2, r0
 8009cd6:	1dfb      	adds	r3, r7, #7
 8009cd8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009cda:	1dfb      	adds	r3, r7, #7
 8009cdc:	781b      	ldrb	r3, [r3, #0]
 8009cde:	b25b      	sxtb	r3, r3
 8009ce0:	0018      	movs	r0, r3
 8009ce2:	f7ff ff33 	bl	8009b4c <__NVIC_EnableIRQ>
}
 8009ce6:	46c0      	nop			; (mov r8, r8)
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	b002      	add	sp, #8
 8009cec:	bd80      	pop	{r7, pc}

08009cee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009cee:	b580      	push	{r7, lr}
 8009cf0:	b082      	sub	sp, #8
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	0018      	movs	r0, r3
 8009cfa:	f7ff ffaf 	bl	8009c5c <SysTick_Config>
 8009cfe:	0003      	movs	r3, r0
}
 8009d00:	0018      	movs	r0, r3
 8009d02:	46bd      	mov	sp, r7
 8009d04:	b002      	add	sp, #8
 8009d06:	bd80      	pop	{r7, pc}

08009d08 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b082      	sub	sp, #8
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d101      	bne.n	8009d1a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8009d16:	2301      	movs	r3, #1
 8009d18:	e050      	b.n	8009dbc <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2225      	movs	r2, #37	; 0x25
 8009d1e:	5c9b      	ldrb	r3, [r3, r2]
 8009d20:	b2db      	uxtb	r3, r3
 8009d22:	2b02      	cmp	r3, #2
 8009d24:	d008      	beq.n	8009d38 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2204      	movs	r2, #4
 8009d2a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2224      	movs	r2, #36	; 0x24
 8009d30:	2100      	movs	r1, #0
 8009d32:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8009d34:	2301      	movs	r3, #1
 8009d36:	e041      	b.n	8009dbc <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	681a      	ldr	r2, [r3, #0]
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	210e      	movs	r1, #14
 8009d44:	438a      	bics	r2, r1
 8009d46:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d4c:	681a      	ldr	r2, [r3, #0]
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d52:	491c      	ldr	r1, [pc, #112]	; (8009dc4 <HAL_DMA_Abort+0xbc>)
 8009d54:	400a      	ands	r2, r1
 8009d56:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	681a      	ldr	r2, [r3, #0]
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	2101      	movs	r1, #1
 8009d64:	438a      	bics	r2, r1
 8009d66:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8009d68:	4b17      	ldr	r3, [pc, #92]	; (8009dc8 <HAL_DMA_Abort+0xc0>)
 8009d6a:	6859      	ldr	r1, [r3, #4]
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d70:	221c      	movs	r2, #28
 8009d72:	4013      	ands	r3, r2
 8009d74:	2201      	movs	r2, #1
 8009d76:	409a      	lsls	r2, r3
 8009d78:	4b13      	ldr	r3, [pc, #76]	; (8009dc8 <HAL_DMA_Abort+0xc0>)
 8009d7a:	430a      	orrs	r2, r1
 8009d7c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d82:	687a      	ldr	r2, [r7, #4]
 8009d84:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8009d86:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d00c      	beq.n	8009daa <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d94:	681a      	ldr	r2, [r3, #0]
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d9a:	490a      	ldr	r1, [pc, #40]	; (8009dc4 <HAL_DMA_Abort+0xbc>)
 8009d9c:	400a      	ands	r2, r1
 8009d9e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009da4:	687a      	ldr	r2, [r7, #4]
 8009da6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009da8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2225      	movs	r2, #37	; 0x25
 8009dae:	2101      	movs	r1, #1
 8009db0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2224      	movs	r2, #36	; 0x24
 8009db6:	2100      	movs	r1, #0
 8009db8:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8009dba:	2300      	movs	r3, #0
}
 8009dbc:	0018      	movs	r0, r3
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	b002      	add	sp, #8
 8009dc2:	bd80      	pop	{r7, pc}
 8009dc4:	fffffeff 	.word	0xfffffeff
 8009dc8:	40020000 	.word	0x40020000

08009dcc <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b084      	sub	sp, #16
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009dd4:	210f      	movs	r1, #15
 8009dd6:	187b      	adds	r3, r7, r1
 8009dd8:	2200      	movs	r2, #0
 8009dda:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2225      	movs	r2, #37	; 0x25
 8009de0:	5c9b      	ldrb	r3, [r3, r2]
 8009de2:	b2db      	uxtb	r3, r3
 8009de4:	2b02      	cmp	r3, #2
 8009de6:	d006      	beq.n	8009df6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2204      	movs	r2, #4
 8009dec:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8009dee:	187b      	adds	r3, r7, r1
 8009df0:	2201      	movs	r2, #1
 8009df2:	701a      	strb	r2, [r3, #0]
 8009df4:	e049      	b.n	8009e8a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	681a      	ldr	r2, [r3, #0]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	210e      	movs	r1, #14
 8009e02:	438a      	bics	r2, r1
 8009e04:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	681a      	ldr	r2, [r3, #0]
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	2101      	movs	r1, #1
 8009e12:	438a      	bics	r2, r1
 8009e14:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e1a:	681a      	ldr	r2, [r3, #0]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e20:	491d      	ldr	r1, [pc, #116]	; (8009e98 <HAL_DMA_Abort_IT+0xcc>)
 8009e22:	400a      	ands	r2, r1
 8009e24:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8009e26:	4b1d      	ldr	r3, [pc, #116]	; (8009e9c <HAL_DMA_Abort_IT+0xd0>)
 8009e28:	6859      	ldr	r1, [r3, #4]
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e2e:	221c      	movs	r2, #28
 8009e30:	4013      	ands	r3, r2
 8009e32:	2201      	movs	r2, #1
 8009e34:	409a      	lsls	r2, r3
 8009e36:	4b19      	ldr	r3, [pc, #100]	; (8009e9c <HAL_DMA_Abort_IT+0xd0>)
 8009e38:	430a      	orrs	r2, r1
 8009e3a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e40:	687a      	ldr	r2, [r7, #4]
 8009e42:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8009e44:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d00c      	beq.n	8009e68 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e52:	681a      	ldr	r2, [r3, #0]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e58:	490f      	ldr	r1, [pc, #60]	; (8009e98 <HAL_DMA_Abort_IT+0xcc>)
 8009e5a:	400a      	ands	r2, r1
 8009e5c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e62:	687a      	ldr	r2, [r7, #4]
 8009e64:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009e66:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2225      	movs	r2, #37	; 0x25
 8009e6c:	2101      	movs	r1, #1
 8009e6e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2224      	movs	r2, #36	; 0x24
 8009e74:	2100      	movs	r1, #0
 8009e76:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d004      	beq.n	8009e8a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e84:	687a      	ldr	r2, [r7, #4]
 8009e86:	0010      	movs	r0, r2
 8009e88:	4798      	blx	r3
    }
  }
  return status;
 8009e8a:	230f      	movs	r3, #15
 8009e8c:	18fb      	adds	r3, r7, r3
 8009e8e:	781b      	ldrb	r3, [r3, #0]
}
 8009e90:	0018      	movs	r0, r3
 8009e92:	46bd      	mov	sp, r7
 8009e94:	b004      	add	sp, #16
 8009e96:	bd80      	pop	{r7, pc}
 8009e98:	fffffeff 	.word	0xfffffeff
 8009e9c:	40020000 	.word	0x40020000

08009ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b086      	sub	sp, #24
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
 8009ea8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009eae:	e147      	b.n	800a140 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	2101      	movs	r1, #1
 8009eb6:	697a      	ldr	r2, [r7, #20]
 8009eb8:	4091      	lsls	r1, r2
 8009eba:	000a      	movs	r2, r1
 8009ebc:	4013      	ands	r3, r2
 8009ebe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d100      	bne.n	8009ec8 <HAL_GPIO_Init+0x28>
 8009ec6:	e138      	b.n	800a13a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	685b      	ldr	r3, [r3, #4]
 8009ecc:	2203      	movs	r2, #3
 8009ece:	4013      	ands	r3, r2
 8009ed0:	2b01      	cmp	r3, #1
 8009ed2:	d005      	beq.n	8009ee0 <HAL_GPIO_Init+0x40>
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	685b      	ldr	r3, [r3, #4]
 8009ed8:	2203      	movs	r2, #3
 8009eda:	4013      	ands	r3, r2
 8009edc:	2b02      	cmp	r3, #2
 8009ede:	d130      	bne.n	8009f42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	689b      	ldr	r3, [r3, #8]
 8009ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	005b      	lsls	r3, r3, #1
 8009eea:	2203      	movs	r2, #3
 8009eec:	409a      	lsls	r2, r3
 8009eee:	0013      	movs	r3, r2
 8009ef0:	43da      	mvns	r2, r3
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	4013      	ands	r3, r2
 8009ef6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	68da      	ldr	r2, [r3, #12]
 8009efc:	697b      	ldr	r3, [r7, #20]
 8009efe:	005b      	lsls	r3, r3, #1
 8009f00:	409a      	lsls	r2, r3
 8009f02:	0013      	movs	r3, r2
 8009f04:	693a      	ldr	r2, [r7, #16]
 8009f06:	4313      	orrs	r3, r2
 8009f08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	693a      	ldr	r2, [r7, #16]
 8009f0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009f16:	2201      	movs	r2, #1
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	409a      	lsls	r2, r3
 8009f1c:	0013      	movs	r3, r2
 8009f1e:	43da      	mvns	r2, r3
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	4013      	ands	r3, r2
 8009f24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	685b      	ldr	r3, [r3, #4]
 8009f2a:	091b      	lsrs	r3, r3, #4
 8009f2c:	2201      	movs	r2, #1
 8009f2e:	401a      	ands	r2, r3
 8009f30:	697b      	ldr	r3, [r7, #20]
 8009f32:	409a      	lsls	r2, r3
 8009f34:	0013      	movs	r3, r2
 8009f36:	693a      	ldr	r2, [r7, #16]
 8009f38:	4313      	orrs	r3, r2
 8009f3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	693a      	ldr	r2, [r7, #16]
 8009f40:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	685b      	ldr	r3, [r3, #4]
 8009f46:	2203      	movs	r2, #3
 8009f48:	4013      	ands	r3, r2
 8009f4a:	2b03      	cmp	r3, #3
 8009f4c:	d017      	beq.n	8009f7e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	68db      	ldr	r3, [r3, #12]
 8009f52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8009f54:	697b      	ldr	r3, [r7, #20]
 8009f56:	005b      	lsls	r3, r3, #1
 8009f58:	2203      	movs	r2, #3
 8009f5a:	409a      	lsls	r2, r3
 8009f5c:	0013      	movs	r3, r2
 8009f5e:	43da      	mvns	r2, r3
 8009f60:	693b      	ldr	r3, [r7, #16]
 8009f62:	4013      	ands	r3, r2
 8009f64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	689a      	ldr	r2, [r3, #8]
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	005b      	lsls	r3, r3, #1
 8009f6e:	409a      	lsls	r2, r3
 8009f70:	0013      	movs	r3, r2
 8009f72:	693a      	ldr	r2, [r7, #16]
 8009f74:	4313      	orrs	r3, r2
 8009f76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	693a      	ldr	r2, [r7, #16]
 8009f7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	685b      	ldr	r3, [r3, #4]
 8009f82:	2203      	movs	r2, #3
 8009f84:	4013      	ands	r3, r2
 8009f86:	2b02      	cmp	r3, #2
 8009f88:	d123      	bne.n	8009fd2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	08da      	lsrs	r2, r3, #3
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	3208      	adds	r2, #8
 8009f92:	0092      	lsls	r2, r2, #2
 8009f94:	58d3      	ldr	r3, [r2, r3]
 8009f96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	2207      	movs	r2, #7
 8009f9c:	4013      	ands	r3, r2
 8009f9e:	009b      	lsls	r3, r3, #2
 8009fa0:	220f      	movs	r2, #15
 8009fa2:	409a      	lsls	r2, r3
 8009fa4:	0013      	movs	r3, r2
 8009fa6:	43da      	mvns	r2, r3
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	4013      	ands	r3, r2
 8009fac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	691a      	ldr	r2, [r3, #16]
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	2107      	movs	r1, #7
 8009fb6:	400b      	ands	r3, r1
 8009fb8:	009b      	lsls	r3, r3, #2
 8009fba:	409a      	lsls	r2, r3
 8009fbc:	0013      	movs	r3, r2
 8009fbe:	693a      	ldr	r2, [r7, #16]
 8009fc0:	4313      	orrs	r3, r2
 8009fc2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	08da      	lsrs	r2, r3, #3
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	3208      	adds	r2, #8
 8009fcc:	0092      	lsls	r2, r2, #2
 8009fce:	6939      	ldr	r1, [r7, #16]
 8009fd0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	005b      	lsls	r3, r3, #1
 8009fdc:	2203      	movs	r2, #3
 8009fde:	409a      	lsls	r2, r3
 8009fe0:	0013      	movs	r3, r2
 8009fe2:	43da      	mvns	r2, r3
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	4013      	ands	r3, r2
 8009fe8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	685b      	ldr	r3, [r3, #4]
 8009fee:	2203      	movs	r2, #3
 8009ff0:	401a      	ands	r2, r3
 8009ff2:	697b      	ldr	r3, [r7, #20]
 8009ff4:	005b      	lsls	r3, r3, #1
 8009ff6:	409a      	lsls	r2, r3
 8009ff8:	0013      	movs	r3, r2
 8009ffa:	693a      	ldr	r2, [r7, #16]
 8009ffc:	4313      	orrs	r3, r2
 8009ffe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	693a      	ldr	r2, [r7, #16]
 800a004:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	685a      	ldr	r2, [r3, #4]
 800a00a:	23c0      	movs	r3, #192	; 0xc0
 800a00c:	029b      	lsls	r3, r3, #10
 800a00e:	4013      	ands	r3, r2
 800a010:	d100      	bne.n	800a014 <HAL_GPIO_Init+0x174>
 800a012:	e092      	b.n	800a13a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800a014:	4a50      	ldr	r2, [pc, #320]	; (800a158 <HAL_GPIO_Init+0x2b8>)
 800a016:	697b      	ldr	r3, [r7, #20]
 800a018:	089b      	lsrs	r3, r3, #2
 800a01a:	3318      	adds	r3, #24
 800a01c:	009b      	lsls	r3, r3, #2
 800a01e:	589b      	ldr	r3, [r3, r2]
 800a020:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	2203      	movs	r2, #3
 800a026:	4013      	ands	r3, r2
 800a028:	00db      	lsls	r3, r3, #3
 800a02a:	220f      	movs	r2, #15
 800a02c:	409a      	lsls	r2, r3
 800a02e:	0013      	movs	r3, r2
 800a030:	43da      	mvns	r2, r3
 800a032:	693b      	ldr	r3, [r7, #16]
 800a034:	4013      	ands	r3, r2
 800a036:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800a038:	687a      	ldr	r2, [r7, #4]
 800a03a:	23a0      	movs	r3, #160	; 0xa0
 800a03c:	05db      	lsls	r3, r3, #23
 800a03e:	429a      	cmp	r2, r3
 800a040:	d013      	beq.n	800a06a <HAL_GPIO_Init+0x1ca>
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	4a45      	ldr	r2, [pc, #276]	; (800a15c <HAL_GPIO_Init+0x2bc>)
 800a046:	4293      	cmp	r3, r2
 800a048:	d00d      	beq.n	800a066 <HAL_GPIO_Init+0x1c6>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	4a44      	ldr	r2, [pc, #272]	; (800a160 <HAL_GPIO_Init+0x2c0>)
 800a04e:	4293      	cmp	r3, r2
 800a050:	d007      	beq.n	800a062 <HAL_GPIO_Init+0x1c2>
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	4a43      	ldr	r2, [pc, #268]	; (800a164 <HAL_GPIO_Init+0x2c4>)
 800a056:	4293      	cmp	r3, r2
 800a058:	d101      	bne.n	800a05e <HAL_GPIO_Init+0x1be>
 800a05a:	2303      	movs	r3, #3
 800a05c:	e006      	b.n	800a06c <HAL_GPIO_Init+0x1cc>
 800a05e:	2305      	movs	r3, #5
 800a060:	e004      	b.n	800a06c <HAL_GPIO_Init+0x1cc>
 800a062:	2302      	movs	r3, #2
 800a064:	e002      	b.n	800a06c <HAL_GPIO_Init+0x1cc>
 800a066:	2301      	movs	r3, #1
 800a068:	e000      	b.n	800a06c <HAL_GPIO_Init+0x1cc>
 800a06a:	2300      	movs	r3, #0
 800a06c:	697a      	ldr	r2, [r7, #20]
 800a06e:	2103      	movs	r1, #3
 800a070:	400a      	ands	r2, r1
 800a072:	00d2      	lsls	r2, r2, #3
 800a074:	4093      	lsls	r3, r2
 800a076:	693a      	ldr	r2, [r7, #16]
 800a078:	4313      	orrs	r3, r2
 800a07a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800a07c:	4936      	ldr	r1, [pc, #216]	; (800a158 <HAL_GPIO_Init+0x2b8>)
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	089b      	lsrs	r3, r3, #2
 800a082:	3318      	adds	r3, #24
 800a084:	009b      	lsls	r3, r3, #2
 800a086:	693a      	ldr	r2, [r7, #16]
 800a088:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a08a:	4b33      	ldr	r3, [pc, #204]	; (800a158 <HAL_GPIO_Init+0x2b8>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	43da      	mvns	r2, r3
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	4013      	ands	r3, r2
 800a098:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	685a      	ldr	r2, [r3, #4]
 800a09e:	2380      	movs	r3, #128	; 0x80
 800a0a0:	035b      	lsls	r3, r3, #13
 800a0a2:	4013      	ands	r3, r2
 800a0a4:	d003      	beq.n	800a0ae <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800a0a6:	693a      	ldr	r2, [r7, #16]
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	4313      	orrs	r3, r2
 800a0ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a0ae:	4b2a      	ldr	r3, [pc, #168]	; (800a158 <HAL_GPIO_Init+0x2b8>)
 800a0b0:	693a      	ldr	r2, [r7, #16]
 800a0b2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800a0b4:	4b28      	ldr	r3, [pc, #160]	; (800a158 <HAL_GPIO_Init+0x2b8>)
 800a0b6:	685b      	ldr	r3, [r3, #4]
 800a0b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	43da      	mvns	r2, r3
 800a0be:	693b      	ldr	r3, [r7, #16]
 800a0c0:	4013      	ands	r3, r2
 800a0c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	685a      	ldr	r2, [r3, #4]
 800a0c8:	2380      	movs	r3, #128	; 0x80
 800a0ca:	039b      	lsls	r3, r3, #14
 800a0cc:	4013      	ands	r3, r2
 800a0ce:	d003      	beq.n	800a0d8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800a0d0:	693a      	ldr	r2, [r7, #16]
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	4313      	orrs	r3, r2
 800a0d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a0d8:	4b1f      	ldr	r3, [pc, #124]	; (800a158 <HAL_GPIO_Init+0x2b8>)
 800a0da:	693a      	ldr	r2, [r7, #16]
 800a0dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800a0de:	4a1e      	ldr	r2, [pc, #120]	; (800a158 <HAL_GPIO_Init+0x2b8>)
 800a0e0:	2384      	movs	r3, #132	; 0x84
 800a0e2:	58d3      	ldr	r3, [r2, r3]
 800a0e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	43da      	mvns	r2, r3
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	4013      	ands	r3, r2
 800a0ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	685a      	ldr	r2, [r3, #4]
 800a0f4:	2380      	movs	r3, #128	; 0x80
 800a0f6:	029b      	lsls	r3, r3, #10
 800a0f8:	4013      	ands	r3, r2
 800a0fa:	d003      	beq.n	800a104 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800a0fc:	693a      	ldr	r2, [r7, #16]
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	4313      	orrs	r3, r2
 800a102:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a104:	4914      	ldr	r1, [pc, #80]	; (800a158 <HAL_GPIO_Init+0x2b8>)
 800a106:	2284      	movs	r2, #132	; 0x84
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800a10c:	4a12      	ldr	r2, [pc, #72]	; (800a158 <HAL_GPIO_Init+0x2b8>)
 800a10e:	2380      	movs	r3, #128	; 0x80
 800a110:	58d3      	ldr	r3, [r2, r3]
 800a112:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	43da      	mvns	r2, r3
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	4013      	ands	r3, r2
 800a11c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	685a      	ldr	r2, [r3, #4]
 800a122:	2380      	movs	r3, #128	; 0x80
 800a124:	025b      	lsls	r3, r3, #9
 800a126:	4013      	ands	r3, r2
 800a128:	d003      	beq.n	800a132 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800a12a:	693a      	ldr	r2, [r7, #16]
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	4313      	orrs	r3, r2
 800a130:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a132:	4909      	ldr	r1, [pc, #36]	; (800a158 <HAL_GPIO_Init+0x2b8>)
 800a134:	2280      	movs	r2, #128	; 0x80
 800a136:	693b      	ldr	r3, [r7, #16]
 800a138:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	3301      	adds	r3, #1
 800a13e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	681a      	ldr	r2, [r3, #0]
 800a144:	697b      	ldr	r3, [r7, #20]
 800a146:	40da      	lsrs	r2, r3
 800a148:	1e13      	subs	r3, r2, #0
 800a14a:	d000      	beq.n	800a14e <HAL_GPIO_Init+0x2ae>
 800a14c:	e6b0      	b.n	8009eb0 <HAL_GPIO_Init+0x10>
  }
}
 800a14e:	46c0      	nop			; (mov r8, r8)
 800a150:	46c0      	nop			; (mov r8, r8)
 800a152:	46bd      	mov	sp, r7
 800a154:	b006      	add	sp, #24
 800a156:	bd80      	pop	{r7, pc}
 800a158:	40021800 	.word	0x40021800
 800a15c:	50000400 	.word	0x50000400
 800a160:	50000800 	.word	0x50000800
 800a164:	50000c00 	.word	0x50000c00

0800a168 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b084      	sub	sp, #16
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	000a      	movs	r2, r1
 800a172:	1cbb      	adds	r3, r7, #2
 800a174:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	691b      	ldr	r3, [r3, #16]
 800a17a:	1cba      	adds	r2, r7, #2
 800a17c:	8812      	ldrh	r2, [r2, #0]
 800a17e:	4013      	ands	r3, r2
 800a180:	d004      	beq.n	800a18c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800a182:	230f      	movs	r3, #15
 800a184:	18fb      	adds	r3, r7, r3
 800a186:	2201      	movs	r2, #1
 800a188:	701a      	strb	r2, [r3, #0]
 800a18a:	e003      	b.n	800a194 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a18c:	230f      	movs	r3, #15
 800a18e:	18fb      	adds	r3, r7, r3
 800a190:	2200      	movs	r2, #0
 800a192:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800a194:	230f      	movs	r3, #15
 800a196:	18fb      	adds	r3, r7, r3
 800a198:	781b      	ldrb	r3, [r3, #0]
}
 800a19a:	0018      	movs	r0, r3
 800a19c:	46bd      	mov	sp, r7
 800a19e:	b004      	add	sp, #16
 800a1a0:	bd80      	pop	{r7, pc}

0800a1a2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a1a2:	b580      	push	{r7, lr}
 800a1a4:	b082      	sub	sp, #8
 800a1a6:	af00      	add	r7, sp, #0
 800a1a8:	6078      	str	r0, [r7, #4]
 800a1aa:	0008      	movs	r0, r1
 800a1ac:	0011      	movs	r1, r2
 800a1ae:	1cbb      	adds	r3, r7, #2
 800a1b0:	1c02      	adds	r2, r0, #0
 800a1b2:	801a      	strh	r2, [r3, #0]
 800a1b4:	1c7b      	adds	r3, r7, #1
 800a1b6:	1c0a      	adds	r2, r1, #0
 800a1b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a1ba:	1c7b      	adds	r3, r7, #1
 800a1bc:	781b      	ldrb	r3, [r3, #0]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d004      	beq.n	800a1cc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a1c2:	1cbb      	adds	r3, r7, #2
 800a1c4:	881a      	ldrh	r2, [r3, #0]
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a1ca:	e003      	b.n	800a1d4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a1cc:	1cbb      	adds	r3, r7, #2
 800a1ce:	881a      	ldrh	r2, [r3, #0]
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a1d4:	46c0      	nop			; (mov r8, r8)
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	b002      	add	sp, #8
 800a1da:	bd80      	pop	{r7, pc}

0800a1dc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b084      	sub	sp, #16
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
 800a1e4:	000a      	movs	r2, r1
 800a1e6:	1cbb      	adds	r3, r7, #2
 800a1e8:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	695b      	ldr	r3, [r3, #20]
 800a1ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a1f0:	1cbb      	adds	r3, r7, #2
 800a1f2:	881b      	ldrh	r3, [r3, #0]
 800a1f4:	68fa      	ldr	r2, [r7, #12]
 800a1f6:	4013      	ands	r3, r2
 800a1f8:	041a      	lsls	r2, r3, #16
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	43db      	mvns	r3, r3
 800a1fe:	1cb9      	adds	r1, r7, #2
 800a200:	8809      	ldrh	r1, [r1, #0]
 800a202:	400b      	ands	r3, r1
 800a204:	431a      	orrs	r2, r3
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	619a      	str	r2, [r3, #24]
}
 800a20a:	46c0      	nop			; (mov r8, r8)
 800a20c:	46bd      	mov	sp, r7
 800a20e:	b004      	add	sp, #16
 800a210:	bd80      	pop	{r7, pc}
	...

0800a214 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b084      	sub	sp, #16
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800a21c:	4b19      	ldr	r3, [pc, #100]	; (800a284 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	4a19      	ldr	r2, [pc, #100]	; (800a288 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800a222:	4013      	ands	r3, r2
 800a224:	0019      	movs	r1, r3
 800a226:	4b17      	ldr	r3, [pc, #92]	; (800a284 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800a228:	687a      	ldr	r2, [r7, #4]
 800a22a:	430a      	orrs	r2, r1
 800a22c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a22e:	687a      	ldr	r2, [r7, #4]
 800a230:	2380      	movs	r3, #128	; 0x80
 800a232:	009b      	lsls	r3, r3, #2
 800a234:	429a      	cmp	r2, r3
 800a236:	d11f      	bne.n	800a278 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800a238:	4b14      	ldr	r3, [pc, #80]	; (800a28c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800a23a:	681a      	ldr	r2, [r3, #0]
 800a23c:	0013      	movs	r3, r2
 800a23e:	005b      	lsls	r3, r3, #1
 800a240:	189b      	adds	r3, r3, r2
 800a242:	005b      	lsls	r3, r3, #1
 800a244:	4912      	ldr	r1, [pc, #72]	; (800a290 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800a246:	0018      	movs	r0, r3
 800a248:	f7f5 ff80 	bl	800014c <__udivsi3>
 800a24c:	0003      	movs	r3, r0
 800a24e:	3301      	adds	r3, #1
 800a250:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a252:	e008      	b.n	800a266 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d003      	beq.n	800a262 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	3b01      	subs	r3, #1
 800a25e:	60fb      	str	r3, [r7, #12]
 800a260:	e001      	b.n	800a266 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800a262:	2303      	movs	r3, #3
 800a264:	e009      	b.n	800a27a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a266:	4b07      	ldr	r3, [pc, #28]	; (800a284 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800a268:	695a      	ldr	r2, [r3, #20]
 800a26a:	2380      	movs	r3, #128	; 0x80
 800a26c:	00db      	lsls	r3, r3, #3
 800a26e:	401a      	ands	r2, r3
 800a270:	2380      	movs	r3, #128	; 0x80
 800a272:	00db      	lsls	r3, r3, #3
 800a274:	429a      	cmp	r2, r3
 800a276:	d0ed      	beq.n	800a254 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800a278:	2300      	movs	r3, #0
}
 800a27a:	0018      	movs	r0, r3
 800a27c:	46bd      	mov	sp, r7
 800a27e:	b004      	add	sp, #16
 800a280:	bd80      	pop	{r7, pc}
 800a282:	46c0      	nop			; (mov r8, r8)
 800a284:	40007000 	.word	0x40007000
 800a288:	fffff9ff 	.word	0xfffff9ff
 800a28c:	200000d8 	.word	0x200000d8
 800a290:	000f4240 	.word	0x000f4240

0800a294 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800a298:	4b03      	ldr	r3, [pc, #12]	; (800a2a8 <LL_RCC_GetAPB1Prescaler+0x14>)
 800a29a:	689a      	ldr	r2, [r3, #8]
 800a29c:	23e0      	movs	r3, #224	; 0xe0
 800a29e:	01db      	lsls	r3, r3, #7
 800a2a0:	4013      	ands	r3, r2
}
 800a2a2:	0018      	movs	r0, r3
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}
 800a2a8:	40021000 	.word	0x40021000

0800a2ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b088      	sub	sp, #32
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d101      	bne.n	800a2be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	e2f3      	b.n	800a8a6 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	4013      	ands	r3, r2
 800a2c6:	d100      	bne.n	800a2ca <HAL_RCC_OscConfig+0x1e>
 800a2c8:	e07c      	b.n	800a3c4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a2ca:	4bc3      	ldr	r3, [pc, #780]	; (800a5d8 <HAL_RCC_OscConfig+0x32c>)
 800a2cc:	689b      	ldr	r3, [r3, #8]
 800a2ce:	2238      	movs	r2, #56	; 0x38
 800a2d0:	4013      	ands	r3, r2
 800a2d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a2d4:	4bc0      	ldr	r3, [pc, #768]	; (800a5d8 <HAL_RCC_OscConfig+0x32c>)
 800a2d6:	68db      	ldr	r3, [r3, #12]
 800a2d8:	2203      	movs	r2, #3
 800a2da:	4013      	ands	r3, r2
 800a2dc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800a2de:	69bb      	ldr	r3, [r7, #24]
 800a2e0:	2b10      	cmp	r3, #16
 800a2e2:	d102      	bne.n	800a2ea <HAL_RCC_OscConfig+0x3e>
 800a2e4:	697b      	ldr	r3, [r7, #20]
 800a2e6:	2b03      	cmp	r3, #3
 800a2e8:	d002      	beq.n	800a2f0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800a2ea:	69bb      	ldr	r3, [r7, #24]
 800a2ec:	2b08      	cmp	r3, #8
 800a2ee:	d10b      	bne.n	800a308 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a2f0:	4bb9      	ldr	r3, [pc, #740]	; (800a5d8 <HAL_RCC_OscConfig+0x32c>)
 800a2f2:	681a      	ldr	r2, [r3, #0]
 800a2f4:	2380      	movs	r3, #128	; 0x80
 800a2f6:	029b      	lsls	r3, r3, #10
 800a2f8:	4013      	ands	r3, r2
 800a2fa:	d062      	beq.n	800a3c2 <HAL_RCC_OscConfig+0x116>
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	685b      	ldr	r3, [r3, #4]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d15e      	bne.n	800a3c2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800a304:	2301      	movs	r3, #1
 800a306:	e2ce      	b.n	800a8a6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	685a      	ldr	r2, [r3, #4]
 800a30c:	2380      	movs	r3, #128	; 0x80
 800a30e:	025b      	lsls	r3, r3, #9
 800a310:	429a      	cmp	r2, r3
 800a312:	d107      	bne.n	800a324 <HAL_RCC_OscConfig+0x78>
 800a314:	4bb0      	ldr	r3, [pc, #704]	; (800a5d8 <HAL_RCC_OscConfig+0x32c>)
 800a316:	681a      	ldr	r2, [r3, #0]
 800a318:	4baf      	ldr	r3, [pc, #700]	; (800a5d8 <HAL_RCC_OscConfig+0x32c>)
 800a31a:	2180      	movs	r1, #128	; 0x80
 800a31c:	0249      	lsls	r1, r1, #9
 800a31e:	430a      	orrs	r2, r1
 800a320:	601a      	str	r2, [r3, #0]
 800a322:	e020      	b.n	800a366 <HAL_RCC_OscConfig+0xba>
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	685a      	ldr	r2, [r3, #4]
 800a328:	23a0      	movs	r3, #160	; 0xa0
 800a32a:	02db      	lsls	r3, r3, #11
 800a32c:	429a      	cmp	r2, r3
 800a32e:	d10e      	bne.n	800a34e <HAL_RCC_OscConfig+0xa2>
 800a330:	4ba9      	ldr	r3, [pc, #676]	; (800a5d8 <HAL_RCC_OscConfig+0x32c>)
 800a332:	681a      	ldr	r2, [r3, #0]
 800a334:	4ba8      	ldr	r3, [pc, #672]	; (800a5d8 <HAL_RCC_OscConfig+0x32c>)
 800a336:	2180      	movs	r1, #128	; 0x80
 800a338:	02c9      	lsls	r1, r1, #11
 800a33a:	430a      	orrs	r2, r1
 800a33c:	601a      	str	r2, [r3, #0]
 800a33e:	4ba6      	ldr	r3, [pc, #664]	; (800a5d8 <HAL_RCC_OscConfig+0x32c>)
 800a340:	681a      	ldr	r2, [r3, #0]
 800a342:	4ba5      	ldr	r3, [pc, #660]	; (800a5d8 <HAL_RCC_OscConfig+0x32c>)
 800a344:	2180      	movs	r1, #128	; 0x80
 800a346:	0249      	lsls	r1, r1, #9
 800a348:	430a      	orrs	r2, r1
 800a34a:	601a      	str	r2, [r3, #0]
 800a34c:	e00b      	b.n	800a366 <HAL_RCC_OscConfig+0xba>
 800a34e:	4ba2      	ldr	r3, [pc, #648]	; (800a5d8 <HAL_RCC_OscConfig+0x32c>)
 800a350:	681a      	ldr	r2, [r3, #0]
 800a352:	4ba1      	ldr	r3, [pc, #644]	; (800a5d8 <HAL_RCC_OscConfig+0x32c>)
 800a354:	49a1      	ldr	r1, [pc, #644]	; (800a5dc <HAL_RCC_OscConfig+0x330>)
 800a356:	400a      	ands	r2, r1
 800a358:	601a      	str	r2, [r3, #0]
 800a35a:	4b9f      	ldr	r3, [pc, #636]	; (800a5d8 <HAL_RCC_OscConfig+0x32c>)
 800a35c:	681a      	ldr	r2, [r3, #0]
 800a35e:	4b9e      	ldr	r3, [pc, #632]	; (800a5d8 <HAL_RCC_OscConfig+0x32c>)
 800a360:	499f      	ldr	r1, [pc, #636]	; (800a5e0 <HAL_RCC_OscConfig+0x334>)
 800a362:	400a      	ands	r2, r1
 800a364:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	685b      	ldr	r3, [r3, #4]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d014      	beq.n	800a398 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a36e:	f7ff fbbf 	bl	8009af0 <HAL_GetTick>
 800a372:	0003      	movs	r3, r0
 800a374:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a376:	e008      	b.n	800a38a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a378:	f7ff fbba 	bl	8009af0 <HAL_GetTick>
 800a37c:	0002      	movs	r2, r0
 800a37e:	693b      	ldr	r3, [r7, #16]
 800a380:	1ad3      	subs	r3, r2, r3
 800a382:	2b64      	cmp	r3, #100	; 0x64
 800a384:	d901      	bls.n	800a38a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800a386:	2303      	movs	r3, #3
 800a388:	e28d      	b.n	800a8a6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a38a:	4b93      	ldr	r3, [pc, #588]	; (800a5d8 <HAL_RCC_OscConfig+0x32c>)
 800a38c:	681a      	ldr	r2, [r3, #0]
 800a38e:	2380      	movs	r3, #128	; 0x80
 800a390:	029b      	lsls	r3, r3, #10
 800a392:	4013      	ands	r3, r2
 800a394:	d0f0      	beq.n	800a378 <HAL_RCC_OscConfig+0xcc>
 800a396:	e015      	b.n	800a3c4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a398:	f7ff fbaa 	bl	8009af0 <HAL_GetTick>
 800a39c:	0003      	movs	r3, r0
 800a39e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a3a0:	e008      	b.n	800a3b4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a3a2:	f7ff fba5 	bl	8009af0 <HAL_GetTick>
 800a3a6:	0002      	movs	r2, r0
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	1ad3      	subs	r3, r2, r3
 800a3ac:	2b64      	cmp	r3, #100	; 0x64
 800a3ae:	d901      	bls.n	800a3b4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800a3b0:	2303      	movs	r3, #3
 800a3b2:	e278      	b.n	800a8a6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a3b4:	4b88      	ldr	r3, [pc, #544]	; (800a5d8 <HAL_RCC_OscConfig+0x32c>)
 800a3b6:	681a      	ldr	r2, [r3, #0]
 800a3b8:	2380      	movs	r3, #128	; 0x80
 800a3ba:	029b      	lsls	r3, r3, #10
 800a3bc:	4013      	ands	r3, r2
 800a3be:	d1f0      	bne.n	800a3a2 <HAL_RCC_OscConfig+0xf6>
 800a3c0:	e000      	b.n	800a3c4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a3c2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	2202      	movs	r2, #2
 800a3ca:	4013      	ands	r3, r2
 800a3cc:	d100      	bne.n	800a3d0 <HAL_RCC_OscConfig+0x124>
 800a3ce:	e099      	b.n	800a504 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a3d0:	4b81      	ldr	r3, [pc, #516]	; (800a5d8 <HAL_RCC_OscConfig+0x32c>)
 800a3d2:	689b      	ldr	r3, [r3, #8]
 800a3d4:	2238      	movs	r2, #56	; 0x38
 800a3d6:	4013      	ands	r3, r2
 800a3d8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a3da:	4b7f      	ldr	r3, [pc, #508]	; (800a5d8 <HAL_RCC_OscConfig+0x32c>)
 800a3dc:	68db      	ldr	r3, [r3, #12]
 800a3de:	2203      	movs	r2, #3
 800a3e0:	4013      	ands	r3, r2
 800a3e2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800a3e4:	69bb      	ldr	r3, [r7, #24]
 800a3e6:	2b10      	cmp	r3, #16
 800a3e8:	d102      	bne.n	800a3f0 <HAL_RCC_OscConfig+0x144>
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	2b02      	cmp	r3, #2
 800a3ee:	d002      	beq.n	800a3f6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800a3f0:	69bb      	ldr	r3, [r7, #24]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d135      	bne.n	800a462 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a3f6:	4b78      	ldr	r3, [pc, #480]	; (800a5d8 <HAL_RCC_OscConfig+0x32c>)
 800a3f8:	681a      	ldr	r2, [r3, #0]
 800a3fa:	2380      	movs	r3, #128	; 0x80
 800a3fc:	00db      	lsls	r3, r3, #3
 800a3fe:	4013      	ands	r3, r2
 800a400:	d005      	beq.n	800a40e <HAL_RCC_OscConfig+0x162>
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	68db      	ldr	r3, [r3, #12]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d101      	bne.n	800a40e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800a40a:	2301      	movs	r3, #1
 800a40c:	e24b      	b.n	800a8a6 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a40e:	4b72      	ldr	r3, [pc, #456]	; (800a5d8 <HAL_RCC_OscConfig+0x32c>)
 800a410:	685b      	ldr	r3, [r3, #4]
 800a412:	4a74      	ldr	r2, [pc, #464]	; (800a5e4 <HAL_RCC_OscConfig+0x338>)
 800a414:	4013      	ands	r3, r2
 800a416:	0019      	movs	r1, r3
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	695b      	ldr	r3, [r3, #20]
 800a41c:	021a      	lsls	r2, r3, #8
 800a41e:	4b6e      	ldr	r3, [pc, #440]	; (800a5d8 <HAL_RCC_OscConfig+0x32c>)
 800a420:	430a      	orrs	r2, r1
 800a422:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a424:	69bb      	ldr	r3, [r7, #24]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d112      	bne.n	800a450 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800a42a:	4b6b      	ldr	r3, [pc, #428]	; (800a5d8 <HAL_RCC_OscConfig+0x32c>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	4a6e      	ldr	r2, [pc, #440]	; (800a5e8 <HAL_RCC_OscConfig+0x33c>)
 800a430:	4013      	ands	r3, r2
 800a432:	0019      	movs	r1, r3
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	691a      	ldr	r2, [r3, #16]
 800a438:	4b67      	ldr	r3, [pc, #412]	; (800a5d8 <HAL_RCC_OscConfig+0x32c>)
 800a43a:	430a      	orrs	r2, r1
 800a43c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800a43e:	4b66      	ldr	r3, [pc, #408]	; (800a5d8 <HAL_RCC_OscConfig+0x32c>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	0adb      	lsrs	r3, r3, #11
 800a444:	2207      	movs	r2, #7
 800a446:	4013      	ands	r3, r2
 800a448:	4a68      	ldr	r2, [pc, #416]	; (800a5ec <HAL_RCC_OscConfig+0x340>)
 800a44a:	40da      	lsrs	r2, r3
 800a44c:	4b68      	ldr	r3, [pc, #416]	; (800a5f0 <HAL_RCC_OscConfig+0x344>)
 800a44e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800a450:	4b68      	ldr	r3, [pc, #416]	; (800a5f4 <HAL_RCC_OscConfig+0x348>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	0018      	movs	r0, r3
 800a456:	f7ff faef 	bl	8009a38 <HAL_InitTick>
 800a45a:	1e03      	subs	r3, r0, #0
 800a45c:	d051      	beq.n	800a502 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800a45e:	2301      	movs	r3, #1
 800a460:	e221      	b.n	800a8a6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	68db      	ldr	r3, [r3, #12]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d030      	beq.n	800a4cc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800a46a:	4b5b      	ldr	r3, [pc, #364]	; (800a5d8 <HAL_RCC_OscConfig+0x32c>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4a5e      	ldr	r2, [pc, #376]	; (800a5e8 <HAL_RCC_OscConfig+0x33c>)
 800a470:	4013      	ands	r3, r2
 800a472:	0019      	movs	r1, r3
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	691a      	ldr	r2, [r3, #16]
 800a478:	4b57      	ldr	r3, [pc, #348]	; (800a5d8 <HAL_RCC_OscConfig+0x32c>)
 800a47a:	430a      	orrs	r2, r1
 800a47c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800a47e:	4b56      	ldr	r3, [pc, #344]	; (800a5d8 <HAL_RCC_OscConfig+0x32c>)
 800a480:	681a      	ldr	r2, [r3, #0]
 800a482:	4b55      	ldr	r3, [pc, #340]	; (800a5d8 <HAL_RCC_OscConfig+0x32c>)
 800a484:	2180      	movs	r1, #128	; 0x80
 800a486:	0049      	lsls	r1, r1, #1
 800a488:	430a      	orrs	r2, r1
 800a48a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a48c:	f7ff fb30 	bl	8009af0 <HAL_GetTick>
 800a490:	0003      	movs	r3, r0
 800a492:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a494:	e008      	b.n	800a4a8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a496:	f7ff fb2b 	bl	8009af0 <HAL_GetTick>
 800a49a:	0002      	movs	r2, r0
 800a49c:	693b      	ldr	r3, [r7, #16]
 800a49e:	1ad3      	subs	r3, r2, r3
 800a4a0:	2b02      	cmp	r3, #2
 800a4a2:	d901      	bls.n	800a4a8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800a4a4:	2303      	movs	r3, #3
 800a4a6:	e1fe      	b.n	800a8a6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a4a8:	4b4b      	ldr	r3, [pc, #300]	; (800a5d8 <HAL_RCC_OscConfig+0x32c>)
 800a4aa:	681a      	ldr	r2, [r3, #0]
 800a4ac:	2380      	movs	r3, #128	; 0x80
 800a4ae:	00db      	lsls	r3, r3, #3
 800a4b0:	4013      	ands	r3, r2
 800a4b2:	d0f0      	beq.n	800a496 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a4b4:	4b48      	ldr	r3, [pc, #288]	; (800a5d8 <HAL_RCC_OscConfig+0x32c>)
 800a4b6:	685b      	ldr	r3, [r3, #4]
 800a4b8:	4a4a      	ldr	r2, [pc, #296]	; (800a5e4 <HAL_RCC_OscConfig+0x338>)
 800a4ba:	4013      	ands	r3, r2
 800a4bc:	0019      	movs	r1, r3
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	695b      	ldr	r3, [r3, #20]
 800a4c2:	021a      	lsls	r2, r3, #8
 800a4c4:	4b44      	ldr	r3, [pc, #272]	; (800a5d8 <HAL_RCC_OscConfig+0x32c>)
 800a4c6:	430a      	orrs	r2, r1
 800a4c8:	605a      	str	r2, [r3, #4]
 800a4ca:	e01b      	b.n	800a504 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800a4cc:	4b42      	ldr	r3, [pc, #264]	; (800a5d8 <HAL_RCC_OscConfig+0x32c>)
 800a4ce:	681a      	ldr	r2, [r3, #0]
 800a4d0:	4b41      	ldr	r3, [pc, #260]	; (800a5d8 <HAL_RCC_OscConfig+0x32c>)
 800a4d2:	4949      	ldr	r1, [pc, #292]	; (800a5f8 <HAL_RCC_OscConfig+0x34c>)
 800a4d4:	400a      	ands	r2, r1
 800a4d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4d8:	f7ff fb0a 	bl	8009af0 <HAL_GetTick>
 800a4dc:	0003      	movs	r3, r0
 800a4de:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a4e0:	e008      	b.n	800a4f4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a4e2:	f7ff fb05 	bl	8009af0 <HAL_GetTick>
 800a4e6:	0002      	movs	r2, r0
 800a4e8:	693b      	ldr	r3, [r7, #16]
 800a4ea:	1ad3      	subs	r3, r2, r3
 800a4ec:	2b02      	cmp	r3, #2
 800a4ee:	d901      	bls.n	800a4f4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800a4f0:	2303      	movs	r3, #3
 800a4f2:	e1d8      	b.n	800a8a6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a4f4:	4b38      	ldr	r3, [pc, #224]	; (800a5d8 <HAL_RCC_OscConfig+0x32c>)
 800a4f6:	681a      	ldr	r2, [r3, #0]
 800a4f8:	2380      	movs	r3, #128	; 0x80
 800a4fa:	00db      	lsls	r3, r3, #3
 800a4fc:	4013      	ands	r3, r2
 800a4fe:	d1f0      	bne.n	800a4e2 <HAL_RCC_OscConfig+0x236>
 800a500:	e000      	b.n	800a504 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a502:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	2208      	movs	r2, #8
 800a50a:	4013      	ands	r3, r2
 800a50c:	d047      	beq.n	800a59e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800a50e:	4b32      	ldr	r3, [pc, #200]	; (800a5d8 <HAL_RCC_OscConfig+0x32c>)
 800a510:	689b      	ldr	r3, [r3, #8]
 800a512:	2238      	movs	r2, #56	; 0x38
 800a514:	4013      	ands	r3, r2
 800a516:	2b18      	cmp	r3, #24
 800a518:	d10a      	bne.n	800a530 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800a51a:	4b2f      	ldr	r3, [pc, #188]	; (800a5d8 <HAL_RCC_OscConfig+0x32c>)
 800a51c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a51e:	2202      	movs	r2, #2
 800a520:	4013      	ands	r3, r2
 800a522:	d03c      	beq.n	800a59e <HAL_RCC_OscConfig+0x2f2>
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	699b      	ldr	r3, [r3, #24]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d138      	bne.n	800a59e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800a52c:	2301      	movs	r3, #1
 800a52e:	e1ba      	b.n	800a8a6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	699b      	ldr	r3, [r3, #24]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d019      	beq.n	800a56c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800a538:	4b27      	ldr	r3, [pc, #156]	; (800a5d8 <HAL_RCC_OscConfig+0x32c>)
 800a53a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a53c:	4b26      	ldr	r3, [pc, #152]	; (800a5d8 <HAL_RCC_OscConfig+0x32c>)
 800a53e:	2101      	movs	r1, #1
 800a540:	430a      	orrs	r2, r1
 800a542:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a544:	f7ff fad4 	bl	8009af0 <HAL_GetTick>
 800a548:	0003      	movs	r3, r0
 800a54a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a54c:	e008      	b.n	800a560 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a54e:	f7ff facf 	bl	8009af0 <HAL_GetTick>
 800a552:	0002      	movs	r2, r0
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	1ad3      	subs	r3, r2, r3
 800a558:	2b02      	cmp	r3, #2
 800a55a:	d901      	bls.n	800a560 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800a55c:	2303      	movs	r3, #3
 800a55e:	e1a2      	b.n	800a8a6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a560:	4b1d      	ldr	r3, [pc, #116]	; (800a5d8 <HAL_RCC_OscConfig+0x32c>)
 800a562:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a564:	2202      	movs	r2, #2
 800a566:	4013      	ands	r3, r2
 800a568:	d0f1      	beq.n	800a54e <HAL_RCC_OscConfig+0x2a2>
 800a56a:	e018      	b.n	800a59e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800a56c:	4b1a      	ldr	r3, [pc, #104]	; (800a5d8 <HAL_RCC_OscConfig+0x32c>)
 800a56e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a570:	4b19      	ldr	r3, [pc, #100]	; (800a5d8 <HAL_RCC_OscConfig+0x32c>)
 800a572:	2101      	movs	r1, #1
 800a574:	438a      	bics	r2, r1
 800a576:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a578:	f7ff faba 	bl	8009af0 <HAL_GetTick>
 800a57c:	0003      	movs	r3, r0
 800a57e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a580:	e008      	b.n	800a594 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a582:	f7ff fab5 	bl	8009af0 <HAL_GetTick>
 800a586:	0002      	movs	r2, r0
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	1ad3      	subs	r3, r2, r3
 800a58c:	2b02      	cmp	r3, #2
 800a58e:	d901      	bls.n	800a594 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800a590:	2303      	movs	r3, #3
 800a592:	e188      	b.n	800a8a6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a594:	4b10      	ldr	r3, [pc, #64]	; (800a5d8 <HAL_RCC_OscConfig+0x32c>)
 800a596:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a598:	2202      	movs	r2, #2
 800a59a:	4013      	ands	r3, r2
 800a59c:	d1f1      	bne.n	800a582 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	2204      	movs	r2, #4
 800a5a4:	4013      	ands	r3, r2
 800a5a6:	d100      	bne.n	800a5aa <HAL_RCC_OscConfig+0x2fe>
 800a5a8:	e0c6      	b.n	800a738 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a5aa:	231f      	movs	r3, #31
 800a5ac:	18fb      	adds	r3, r7, r3
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800a5b2:	4b09      	ldr	r3, [pc, #36]	; (800a5d8 <HAL_RCC_OscConfig+0x32c>)
 800a5b4:	689b      	ldr	r3, [r3, #8]
 800a5b6:	2238      	movs	r2, #56	; 0x38
 800a5b8:	4013      	ands	r3, r2
 800a5ba:	2b20      	cmp	r3, #32
 800a5bc:	d11e      	bne.n	800a5fc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800a5be:	4b06      	ldr	r3, [pc, #24]	; (800a5d8 <HAL_RCC_OscConfig+0x32c>)
 800a5c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5c2:	2202      	movs	r2, #2
 800a5c4:	4013      	ands	r3, r2
 800a5c6:	d100      	bne.n	800a5ca <HAL_RCC_OscConfig+0x31e>
 800a5c8:	e0b6      	b.n	800a738 <HAL_RCC_OscConfig+0x48c>
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	689b      	ldr	r3, [r3, #8]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d000      	beq.n	800a5d4 <HAL_RCC_OscConfig+0x328>
 800a5d2:	e0b1      	b.n	800a738 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	e166      	b.n	800a8a6 <HAL_RCC_OscConfig+0x5fa>
 800a5d8:	40021000 	.word	0x40021000
 800a5dc:	fffeffff 	.word	0xfffeffff
 800a5e0:	fffbffff 	.word	0xfffbffff
 800a5e4:	ffff80ff 	.word	0xffff80ff
 800a5e8:	ffffc7ff 	.word	0xffffc7ff
 800a5ec:	00f42400 	.word	0x00f42400
 800a5f0:	200000d8 	.word	0x200000d8
 800a5f4:	200000dc 	.word	0x200000dc
 800a5f8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a5fc:	4bac      	ldr	r3, [pc, #688]	; (800a8b0 <HAL_RCC_OscConfig+0x604>)
 800a5fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a600:	2380      	movs	r3, #128	; 0x80
 800a602:	055b      	lsls	r3, r3, #21
 800a604:	4013      	ands	r3, r2
 800a606:	d101      	bne.n	800a60c <HAL_RCC_OscConfig+0x360>
 800a608:	2301      	movs	r3, #1
 800a60a:	e000      	b.n	800a60e <HAL_RCC_OscConfig+0x362>
 800a60c:	2300      	movs	r3, #0
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d011      	beq.n	800a636 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800a612:	4ba7      	ldr	r3, [pc, #668]	; (800a8b0 <HAL_RCC_OscConfig+0x604>)
 800a614:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a616:	4ba6      	ldr	r3, [pc, #664]	; (800a8b0 <HAL_RCC_OscConfig+0x604>)
 800a618:	2180      	movs	r1, #128	; 0x80
 800a61a:	0549      	lsls	r1, r1, #21
 800a61c:	430a      	orrs	r2, r1
 800a61e:	63da      	str	r2, [r3, #60]	; 0x3c
 800a620:	4ba3      	ldr	r3, [pc, #652]	; (800a8b0 <HAL_RCC_OscConfig+0x604>)
 800a622:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a624:	2380      	movs	r3, #128	; 0x80
 800a626:	055b      	lsls	r3, r3, #21
 800a628:	4013      	ands	r3, r2
 800a62a:	60fb      	str	r3, [r7, #12]
 800a62c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800a62e:	231f      	movs	r3, #31
 800a630:	18fb      	adds	r3, r7, r3
 800a632:	2201      	movs	r2, #1
 800a634:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a636:	4b9f      	ldr	r3, [pc, #636]	; (800a8b4 <HAL_RCC_OscConfig+0x608>)
 800a638:	681a      	ldr	r2, [r3, #0]
 800a63a:	2380      	movs	r3, #128	; 0x80
 800a63c:	005b      	lsls	r3, r3, #1
 800a63e:	4013      	ands	r3, r2
 800a640:	d11a      	bne.n	800a678 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a642:	4b9c      	ldr	r3, [pc, #624]	; (800a8b4 <HAL_RCC_OscConfig+0x608>)
 800a644:	681a      	ldr	r2, [r3, #0]
 800a646:	4b9b      	ldr	r3, [pc, #620]	; (800a8b4 <HAL_RCC_OscConfig+0x608>)
 800a648:	2180      	movs	r1, #128	; 0x80
 800a64a:	0049      	lsls	r1, r1, #1
 800a64c:	430a      	orrs	r2, r1
 800a64e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800a650:	f7ff fa4e 	bl	8009af0 <HAL_GetTick>
 800a654:	0003      	movs	r3, r0
 800a656:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a658:	e008      	b.n	800a66c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a65a:	f7ff fa49 	bl	8009af0 <HAL_GetTick>
 800a65e:	0002      	movs	r2, r0
 800a660:	693b      	ldr	r3, [r7, #16]
 800a662:	1ad3      	subs	r3, r2, r3
 800a664:	2b02      	cmp	r3, #2
 800a666:	d901      	bls.n	800a66c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800a668:	2303      	movs	r3, #3
 800a66a:	e11c      	b.n	800a8a6 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a66c:	4b91      	ldr	r3, [pc, #580]	; (800a8b4 <HAL_RCC_OscConfig+0x608>)
 800a66e:	681a      	ldr	r2, [r3, #0]
 800a670:	2380      	movs	r3, #128	; 0x80
 800a672:	005b      	lsls	r3, r3, #1
 800a674:	4013      	ands	r3, r2
 800a676:	d0f0      	beq.n	800a65a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	689b      	ldr	r3, [r3, #8]
 800a67c:	2b01      	cmp	r3, #1
 800a67e:	d106      	bne.n	800a68e <HAL_RCC_OscConfig+0x3e2>
 800a680:	4b8b      	ldr	r3, [pc, #556]	; (800a8b0 <HAL_RCC_OscConfig+0x604>)
 800a682:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a684:	4b8a      	ldr	r3, [pc, #552]	; (800a8b0 <HAL_RCC_OscConfig+0x604>)
 800a686:	2101      	movs	r1, #1
 800a688:	430a      	orrs	r2, r1
 800a68a:	65da      	str	r2, [r3, #92]	; 0x5c
 800a68c:	e01c      	b.n	800a6c8 <HAL_RCC_OscConfig+0x41c>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	689b      	ldr	r3, [r3, #8]
 800a692:	2b05      	cmp	r3, #5
 800a694:	d10c      	bne.n	800a6b0 <HAL_RCC_OscConfig+0x404>
 800a696:	4b86      	ldr	r3, [pc, #536]	; (800a8b0 <HAL_RCC_OscConfig+0x604>)
 800a698:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a69a:	4b85      	ldr	r3, [pc, #532]	; (800a8b0 <HAL_RCC_OscConfig+0x604>)
 800a69c:	2104      	movs	r1, #4
 800a69e:	430a      	orrs	r2, r1
 800a6a0:	65da      	str	r2, [r3, #92]	; 0x5c
 800a6a2:	4b83      	ldr	r3, [pc, #524]	; (800a8b0 <HAL_RCC_OscConfig+0x604>)
 800a6a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a6a6:	4b82      	ldr	r3, [pc, #520]	; (800a8b0 <HAL_RCC_OscConfig+0x604>)
 800a6a8:	2101      	movs	r1, #1
 800a6aa:	430a      	orrs	r2, r1
 800a6ac:	65da      	str	r2, [r3, #92]	; 0x5c
 800a6ae:	e00b      	b.n	800a6c8 <HAL_RCC_OscConfig+0x41c>
 800a6b0:	4b7f      	ldr	r3, [pc, #508]	; (800a8b0 <HAL_RCC_OscConfig+0x604>)
 800a6b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a6b4:	4b7e      	ldr	r3, [pc, #504]	; (800a8b0 <HAL_RCC_OscConfig+0x604>)
 800a6b6:	2101      	movs	r1, #1
 800a6b8:	438a      	bics	r2, r1
 800a6ba:	65da      	str	r2, [r3, #92]	; 0x5c
 800a6bc:	4b7c      	ldr	r3, [pc, #496]	; (800a8b0 <HAL_RCC_OscConfig+0x604>)
 800a6be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a6c0:	4b7b      	ldr	r3, [pc, #492]	; (800a8b0 <HAL_RCC_OscConfig+0x604>)
 800a6c2:	2104      	movs	r1, #4
 800a6c4:	438a      	bics	r2, r1
 800a6c6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	689b      	ldr	r3, [r3, #8]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d014      	beq.n	800a6fa <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6d0:	f7ff fa0e 	bl	8009af0 <HAL_GetTick>
 800a6d4:	0003      	movs	r3, r0
 800a6d6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a6d8:	e009      	b.n	800a6ee <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a6da:	f7ff fa09 	bl	8009af0 <HAL_GetTick>
 800a6de:	0002      	movs	r2, r0
 800a6e0:	693b      	ldr	r3, [r7, #16]
 800a6e2:	1ad3      	subs	r3, r2, r3
 800a6e4:	4a74      	ldr	r2, [pc, #464]	; (800a8b8 <HAL_RCC_OscConfig+0x60c>)
 800a6e6:	4293      	cmp	r3, r2
 800a6e8:	d901      	bls.n	800a6ee <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800a6ea:	2303      	movs	r3, #3
 800a6ec:	e0db      	b.n	800a8a6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a6ee:	4b70      	ldr	r3, [pc, #448]	; (800a8b0 <HAL_RCC_OscConfig+0x604>)
 800a6f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6f2:	2202      	movs	r2, #2
 800a6f4:	4013      	ands	r3, r2
 800a6f6:	d0f0      	beq.n	800a6da <HAL_RCC_OscConfig+0x42e>
 800a6f8:	e013      	b.n	800a722 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6fa:	f7ff f9f9 	bl	8009af0 <HAL_GetTick>
 800a6fe:	0003      	movs	r3, r0
 800a700:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a702:	e009      	b.n	800a718 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a704:	f7ff f9f4 	bl	8009af0 <HAL_GetTick>
 800a708:	0002      	movs	r2, r0
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	1ad3      	subs	r3, r2, r3
 800a70e:	4a6a      	ldr	r2, [pc, #424]	; (800a8b8 <HAL_RCC_OscConfig+0x60c>)
 800a710:	4293      	cmp	r3, r2
 800a712:	d901      	bls.n	800a718 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800a714:	2303      	movs	r3, #3
 800a716:	e0c6      	b.n	800a8a6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a718:	4b65      	ldr	r3, [pc, #404]	; (800a8b0 <HAL_RCC_OscConfig+0x604>)
 800a71a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a71c:	2202      	movs	r2, #2
 800a71e:	4013      	ands	r3, r2
 800a720:	d1f0      	bne.n	800a704 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800a722:	231f      	movs	r3, #31
 800a724:	18fb      	adds	r3, r7, r3
 800a726:	781b      	ldrb	r3, [r3, #0]
 800a728:	2b01      	cmp	r3, #1
 800a72a:	d105      	bne.n	800a738 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800a72c:	4b60      	ldr	r3, [pc, #384]	; (800a8b0 <HAL_RCC_OscConfig+0x604>)
 800a72e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a730:	4b5f      	ldr	r3, [pc, #380]	; (800a8b0 <HAL_RCC_OscConfig+0x604>)
 800a732:	4962      	ldr	r1, [pc, #392]	; (800a8bc <HAL_RCC_OscConfig+0x610>)
 800a734:	400a      	ands	r2, r1
 800a736:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	69db      	ldr	r3, [r3, #28]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d100      	bne.n	800a742 <HAL_RCC_OscConfig+0x496>
 800a740:	e0b0      	b.n	800a8a4 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a742:	4b5b      	ldr	r3, [pc, #364]	; (800a8b0 <HAL_RCC_OscConfig+0x604>)
 800a744:	689b      	ldr	r3, [r3, #8]
 800a746:	2238      	movs	r2, #56	; 0x38
 800a748:	4013      	ands	r3, r2
 800a74a:	2b10      	cmp	r3, #16
 800a74c:	d100      	bne.n	800a750 <HAL_RCC_OscConfig+0x4a4>
 800a74e:	e078      	b.n	800a842 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	69db      	ldr	r3, [r3, #28]
 800a754:	2b02      	cmp	r3, #2
 800a756:	d153      	bne.n	800a800 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a758:	4b55      	ldr	r3, [pc, #340]	; (800a8b0 <HAL_RCC_OscConfig+0x604>)
 800a75a:	681a      	ldr	r2, [r3, #0]
 800a75c:	4b54      	ldr	r3, [pc, #336]	; (800a8b0 <HAL_RCC_OscConfig+0x604>)
 800a75e:	4958      	ldr	r1, [pc, #352]	; (800a8c0 <HAL_RCC_OscConfig+0x614>)
 800a760:	400a      	ands	r2, r1
 800a762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a764:	f7ff f9c4 	bl	8009af0 <HAL_GetTick>
 800a768:	0003      	movs	r3, r0
 800a76a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a76c:	e008      	b.n	800a780 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a76e:	f7ff f9bf 	bl	8009af0 <HAL_GetTick>
 800a772:	0002      	movs	r2, r0
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	1ad3      	subs	r3, r2, r3
 800a778:	2b02      	cmp	r3, #2
 800a77a:	d901      	bls.n	800a780 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800a77c:	2303      	movs	r3, #3
 800a77e:	e092      	b.n	800a8a6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a780:	4b4b      	ldr	r3, [pc, #300]	; (800a8b0 <HAL_RCC_OscConfig+0x604>)
 800a782:	681a      	ldr	r2, [r3, #0]
 800a784:	2380      	movs	r3, #128	; 0x80
 800a786:	049b      	lsls	r3, r3, #18
 800a788:	4013      	ands	r3, r2
 800a78a:	d1f0      	bne.n	800a76e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a78c:	4b48      	ldr	r3, [pc, #288]	; (800a8b0 <HAL_RCC_OscConfig+0x604>)
 800a78e:	68db      	ldr	r3, [r3, #12]
 800a790:	4a4c      	ldr	r2, [pc, #304]	; (800a8c4 <HAL_RCC_OscConfig+0x618>)
 800a792:	4013      	ands	r3, r2
 800a794:	0019      	movs	r1, r3
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6a1a      	ldr	r2, [r3, #32]
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a79e:	431a      	orrs	r2, r3
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7a4:	021b      	lsls	r3, r3, #8
 800a7a6:	431a      	orrs	r2, r3
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ac:	431a      	orrs	r2, r3
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7b2:	431a      	orrs	r2, r3
 800a7b4:	4b3e      	ldr	r3, [pc, #248]	; (800a8b0 <HAL_RCC_OscConfig+0x604>)
 800a7b6:	430a      	orrs	r2, r1
 800a7b8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a7ba:	4b3d      	ldr	r3, [pc, #244]	; (800a8b0 <HAL_RCC_OscConfig+0x604>)
 800a7bc:	681a      	ldr	r2, [r3, #0]
 800a7be:	4b3c      	ldr	r3, [pc, #240]	; (800a8b0 <HAL_RCC_OscConfig+0x604>)
 800a7c0:	2180      	movs	r1, #128	; 0x80
 800a7c2:	0449      	lsls	r1, r1, #17
 800a7c4:	430a      	orrs	r2, r1
 800a7c6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800a7c8:	4b39      	ldr	r3, [pc, #228]	; (800a8b0 <HAL_RCC_OscConfig+0x604>)
 800a7ca:	68da      	ldr	r2, [r3, #12]
 800a7cc:	4b38      	ldr	r3, [pc, #224]	; (800a8b0 <HAL_RCC_OscConfig+0x604>)
 800a7ce:	2180      	movs	r1, #128	; 0x80
 800a7d0:	0549      	lsls	r1, r1, #21
 800a7d2:	430a      	orrs	r2, r1
 800a7d4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7d6:	f7ff f98b 	bl	8009af0 <HAL_GetTick>
 800a7da:	0003      	movs	r3, r0
 800a7dc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a7de:	e008      	b.n	800a7f2 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a7e0:	f7ff f986 	bl	8009af0 <HAL_GetTick>
 800a7e4:	0002      	movs	r2, r0
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	1ad3      	subs	r3, r2, r3
 800a7ea:	2b02      	cmp	r3, #2
 800a7ec:	d901      	bls.n	800a7f2 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800a7ee:	2303      	movs	r3, #3
 800a7f0:	e059      	b.n	800a8a6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a7f2:	4b2f      	ldr	r3, [pc, #188]	; (800a8b0 <HAL_RCC_OscConfig+0x604>)
 800a7f4:	681a      	ldr	r2, [r3, #0]
 800a7f6:	2380      	movs	r3, #128	; 0x80
 800a7f8:	049b      	lsls	r3, r3, #18
 800a7fa:	4013      	ands	r3, r2
 800a7fc:	d0f0      	beq.n	800a7e0 <HAL_RCC_OscConfig+0x534>
 800a7fe:	e051      	b.n	800a8a4 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a800:	4b2b      	ldr	r3, [pc, #172]	; (800a8b0 <HAL_RCC_OscConfig+0x604>)
 800a802:	681a      	ldr	r2, [r3, #0]
 800a804:	4b2a      	ldr	r3, [pc, #168]	; (800a8b0 <HAL_RCC_OscConfig+0x604>)
 800a806:	492e      	ldr	r1, [pc, #184]	; (800a8c0 <HAL_RCC_OscConfig+0x614>)
 800a808:	400a      	ands	r2, r1
 800a80a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a80c:	f7ff f970 	bl	8009af0 <HAL_GetTick>
 800a810:	0003      	movs	r3, r0
 800a812:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a814:	e008      	b.n	800a828 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a816:	f7ff f96b 	bl	8009af0 <HAL_GetTick>
 800a81a:	0002      	movs	r2, r0
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	1ad3      	subs	r3, r2, r3
 800a820:	2b02      	cmp	r3, #2
 800a822:	d901      	bls.n	800a828 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 800a824:	2303      	movs	r3, #3
 800a826:	e03e      	b.n	800a8a6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a828:	4b21      	ldr	r3, [pc, #132]	; (800a8b0 <HAL_RCC_OscConfig+0x604>)
 800a82a:	681a      	ldr	r2, [r3, #0]
 800a82c:	2380      	movs	r3, #128	; 0x80
 800a82e:	049b      	lsls	r3, r3, #18
 800a830:	4013      	ands	r3, r2
 800a832:	d1f0      	bne.n	800a816 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800a834:	4b1e      	ldr	r3, [pc, #120]	; (800a8b0 <HAL_RCC_OscConfig+0x604>)
 800a836:	68da      	ldr	r2, [r3, #12]
 800a838:	4b1d      	ldr	r3, [pc, #116]	; (800a8b0 <HAL_RCC_OscConfig+0x604>)
 800a83a:	4923      	ldr	r1, [pc, #140]	; (800a8c8 <HAL_RCC_OscConfig+0x61c>)
 800a83c:	400a      	ands	r2, r1
 800a83e:	60da      	str	r2, [r3, #12]
 800a840:	e030      	b.n	800a8a4 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	69db      	ldr	r3, [r3, #28]
 800a846:	2b01      	cmp	r3, #1
 800a848:	d101      	bne.n	800a84e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800a84a:	2301      	movs	r3, #1
 800a84c:	e02b      	b.n	800a8a6 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800a84e:	4b18      	ldr	r3, [pc, #96]	; (800a8b0 <HAL_RCC_OscConfig+0x604>)
 800a850:	68db      	ldr	r3, [r3, #12]
 800a852:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	2203      	movs	r2, #3
 800a858:	401a      	ands	r2, r3
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6a1b      	ldr	r3, [r3, #32]
 800a85e:	429a      	cmp	r2, r3
 800a860:	d11e      	bne.n	800a8a0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a862:	697b      	ldr	r3, [r7, #20]
 800a864:	2270      	movs	r2, #112	; 0x70
 800a866:	401a      	ands	r2, r3
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a86c:	429a      	cmp	r2, r3
 800a86e:	d117      	bne.n	800a8a0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a870:	697a      	ldr	r2, [r7, #20]
 800a872:	23fe      	movs	r3, #254	; 0xfe
 800a874:	01db      	lsls	r3, r3, #7
 800a876:	401a      	ands	r2, r3
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a87c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a87e:	429a      	cmp	r2, r3
 800a880:	d10e      	bne.n	800a8a0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a882:	697a      	ldr	r2, [r7, #20]
 800a884:	23f8      	movs	r3, #248	; 0xf8
 800a886:	039b      	lsls	r3, r3, #14
 800a888:	401a      	ands	r2, r3
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a88e:	429a      	cmp	r2, r3
 800a890:	d106      	bne.n	800a8a0 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800a892:	697b      	ldr	r3, [r7, #20]
 800a894:	0f5b      	lsrs	r3, r3, #29
 800a896:	075a      	lsls	r2, r3, #29
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a89c:	429a      	cmp	r2, r3
 800a89e:	d001      	beq.n	800a8a4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	e000      	b.n	800a8a6 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 800a8a4:	2300      	movs	r3, #0
}
 800a8a6:	0018      	movs	r0, r3
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	b008      	add	sp, #32
 800a8ac:	bd80      	pop	{r7, pc}
 800a8ae:	46c0      	nop			; (mov r8, r8)
 800a8b0:	40021000 	.word	0x40021000
 800a8b4:	40007000 	.word	0x40007000
 800a8b8:	00001388 	.word	0x00001388
 800a8bc:	efffffff 	.word	0xefffffff
 800a8c0:	feffffff 	.word	0xfeffffff
 800a8c4:	1fc1808c 	.word	0x1fc1808c
 800a8c8:	effefffc 	.word	0xeffefffc

0800a8cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b084      	sub	sp, #16
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
 800a8d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d101      	bne.n	800a8e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a8dc:	2301      	movs	r3, #1
 800a8de:	e0e9      	b.n	800aab4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a8e0:	4b76      	ldr	r3, [pc, #472]	; (800aabc <HAL_RCC_ClockConfig+0x1f0>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	2207      	movs	r2, #7
 800a8e6:	4013      	ands	r3, r2
 800a8e8:	683a      	ldr	r2, [r7, #0]
 800a8ea:	429a      	cmp	r2, r3
 800a8ec:	d91e      	bls.n	800a92c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a8ee:	4b73      	ldr	r3, [pc, #460]	; (800aabc <HAL_RCC_ClockConfig+0x1f0>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	2207      	movs	r2, #7
 800a8f4:	4393      	bics	r3, r2
 800a8f6:	0019      	movs	r1, r3
 800a8f8:	4b70      	ldr	r3, [pc, #448]	; (800aabc <HAL_RCC_ClockConfig+0x1f0>)
 800a8fa:	683a      	ldr	r2, [r7, #0]
 800a8fc:	430a      	orrs	r2, r1
 800a8fe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a900:	f7ff f8f6 	bl	8009af0 <HAL_GetTick>
 800a904:	0003      	movs	r3, r0
 800a906:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a908:	e009      	b.n	800a91e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a90a:	f7ff f8f1 	bl	8009af0 <HAL_GetTick>
 800a90e:	0002      	movs	r2, r0
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	1ad3      	subs	r3, r2, r3
 800a914:	4a6a      	ldr	r2, [pc, #424]	; (800aac0 <HAL_RCC_ClockConfig+0x1f4>)
 800a916:	4293      	cmp	r3, r2
 800a918:	d901      	bls.n	800a91e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800a91a:	2303      	movs	r3, #3
 800a91c:	e0ca      	b.n	800aab4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a91e:	4b67      	ldr	r3, [pc, #412]	; (800aabc <HAL_RCC_ClockConfig+0x1f0>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	2207      	movs	r2, #7
 800a924:	4013      	ands	r3, r2
 800a926:	683a      	ldr	r2, [r7, #0]
 800a928:	429a      	cmp	r2, r3
 800a92a:	d1ee      	bne.n	800a90a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	2202      	movs	r2, #2
 800a932:	4013      	ands	r3, r2
 800a934:	d015      	beq.n	800a962 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	2204      	movs	r2, #4
 800a93c:	4013      	ands	r3, r2
 800a93e:	d006      	beq.n	800a94e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800a940:	4b60      	ldr	r3, [pc, #384]	; (800aac4 <HAL_RCC_ClockConfig+0x1f8>)
 800a942:	689a      	ldr	r2, [r3, #8]
 800a944:	4b5f      	ldr	r3, [pc, #380]	; (800aac4 <HAL_RCC_ClockConfig+0x1f8>)
 800a946:	21e0      	movs	r1, #224	; 0xe0
 800a948:	01c9      	lsls	r1, r1, #7
 800a94a:	430a      	orrs	r2, r1
 800a94c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a94e:	4b5d      	ldr	r3, [pc, #372]	; (800aac4 <HAL_RCC_ClockConfig+0x1f8>)
 800a950:	689b      	ldr	r3, [r3, #8]
 800a952:	4a5d      	ldr	r2, [pc, #372]	; (800aac8 <HAL_RCC_ClockConfig+0x1fc>)
 800a954:	4013      	ands	r3, r2
 800a956:	0019      	movs	r1, r3
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	689a      	ldr	r2, [r3, #8]
 800a95c:	4b59      	ldr	r3, [pc, #356]	; (800aac4 <HAL_RCC_ClockConfig+0x1f8>)
 800a95e:	430a      	orrs	r2, r1
 800a960:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	2201      	movs	r2, #1
 800a968:	4013      	ands	r3, r2
 800a96a:	d057      	beq.n	800aa1c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	685b      	ldr	r3, [r3, #4]
 800a970:	2b01      	cmp	r3, #1
 800a972:	d107      	bne.n	800a984 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a974:	4b53      	ldr	r3, [pc, #332]	; (800aac4 <HAL_RCC_ClockConfig+0x1f8>)
 800a976:	681a      	ldr	r2, [r3, #0]
 800a978:	2380      	movs	r3, #128	; 0x80
 800a97a:	029b      	lsls	r3, r3, #10
 800a97c:	4013      	ands	r3, r2
 800a97e:	d12b      	bne.n	800a9d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a980:	2301      	movs	r3, #1
 800a982:	e097      	b.n	800aab4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	685b      	ldr	r3, [r3, #4]
 800a988:	2b02      	cmp	r3, #2
 800a98a:	d107      	bne.n	800a99c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a98c:	4b4d      	ldr	r3, [pc, #308]	; (800aac4 <HAL_RCC_ClockConfig+0x1f8>)
 800a98e:	681a      	ldr	r2, [r3, #0]
 800a990:	2380      	movs	r3, #128	; 0x80
 800a992:	049b      	lsls	r3, r3, #18
 800a994:	4013      	ands	r3, r2
 800a996:	d11f      	bne.n	800a9d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a998:	2301      	movs	r3, #1
 800a99a:	e08b      	b.n	800aab4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	685b      	ldr	r3, [r3, #4]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d107      	bne.n	800a9b4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a9a4:	4b47      	ldr	r3, [pc, #284]	; (800aac4 <HAL_RCC_ClockConfig+0x1f8>)
 800a9a6:	681a      	ldr	r2, [r3, #0]
 800a9a8:	2380      	movs	r3, #128	; 0x80
 800a9aa:	00db      	lsls	r3, r3, #3
 800a9ac:	4013      	ands	r3, r2
 800a9ae:	d113      	bne.n	800a9d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	e07f      	b.n	800aab4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	685b      	ldr	r3, [r3, #4]
 800a9b8:	2b03      	cmp	r3, #3
 800a9ba:	d106      	bne.n	800a9ca <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a9bc:	4b41      	ldr	r3, [pc, #260]	; (800aac4 <HAL_RCC_ClockConfig+0x1f8>)
 800a9be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a9c0:	2202      	movs	r2, #2
 800a9c2:	4013      	ands	r3, r2
 800a9c4:	d108      	bne.n	800a9d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	e074      	b.n	800aab4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a9ca:	4b3e      	ldr	r3, [pc, #248]	; (800aac4 <HAL_RCC_ClockConfig+0x1f8>)
 800a9cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9ce:	2202      	movs	r2, #2
 800a9d0:	4013      	ands	r3, r2
 800a9d2:	d101      	bne.n	800a9d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	e06d      	b.n	800aab4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a9d8:	4b3a      	ldr	r3, [pc, #232]	; (800aac4 <HAL_RCC_ClockConfig+0x1f8>)
 800a9da:	689b      	ldr	r3, [r3, #8]
 800a9dc:	2207      	movs	r2, #7
 800a9de:	4393      	bics	r3, r2
 800a9e0:	0019      	movs	r1, r3
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	685a      	ldr	r2, [r3, #4]
 800a9e6:	4b37      	ldr	r3, [pc, #220]	; (800aac4 <HAL_RCC_ClockConfig+0x1f8>)
 800a9e8:	430a      	orrs	r2, r1
 800a9ea:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a9ec:	f7ff f880 	bl	8009af0 <HAL_GetTick>
 800a9f0:	0003      	movs	r3, r0
 800a9f2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a9f4:	e009      	b.n	800aa0a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a9f6:	f7ff f87b 	bl	8009af0 <HAL_GetTick>
 800a9fa:	0002      	movs	r2, r0
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	1ad3      	subs	r3, r2, r3
 800aa00:	4a2f      	ldr	r2, [pc, #188]	; (800aac0 <HAL_RCC_ClockConfig+0x1f4>)
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d901      	bls.n	800aa0a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800aa06:	2303      	movs	r3, #3
 800aa08:	e054      	b.n	800aab4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aa0a:	4b2e      	ldr	r3, [pc, #184]	; (800aac4 <HAL_RCC_ClockConfig+0x1f8>)
 800aa0c:	689b      	ldr	r3, [r3, #8]
 800aa0e:	2238      	movs	r2, #56	; 0x38
 800aa10:	401a      	ands	r2, r3
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	685b      	ldr	r3, [r3, #4]
 800aa16:	00db      	lsls	r3, r3, #3
 800aa18:	429a      	cmp	r2, r3
 800aa1a:	d1ec      	bne.n	800a9f6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800aa1c:	4b27      	ldr	r3, [pc, #156]	; (800aabc <HAL_RCC_ClockConfig+0x1f0>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	2207      	movs	r2, #7
 800aa22:	4013      	ands	r3, r2
 800aa24:	683a      	ldr	r2, [r7, #0]
 800aa26:	429a      	cmp	r2, r3
 800aa28:	d21e      	bcs.n	800aa68 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aa2a:	4b24      	ldr	r3, [pc, #144]	; (800aabc <HAL_RCC_ClockConfig+0x1f0>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	2207      	movs	r2, #7
 800aa30:	4393      	bics	r3, r2
 800aa32:	0019      	movs	r1, r3
 800aa34:	4b21      	ldr	r3, [pc, #132]	; (800aabc <HAL_RCC_ClockConfig+0x1f0>)
 800aa36:	683a      	ldr	r2, [r7, #0]
 800aa38:	430a      	orrs	r2, r1
 800aa3a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800aa3c:	f7ff f858 	bl	8009af0 <HAL_GetTick>
 800aa40:	0003      	movs	r3, r0
 800aa42:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800aa44:	e009      	b.n	800aa5a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aa46:	f7ff f853 	bl	8009af0 <HAL_GetTick>
 800aa4a:	0002      	movs	r2, r0
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	1ad3      	subs	r3, r2, r3
 800aa50:	4a1b      	ldr	r2, [pc, #108]	; (800aac0 <HAL_RCC_ClockConfig+0x1f4>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d901      	bls.n	800aa5a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800aa56:	2303      	movs	r3, #3
 800aa58:	e02c      	b.n	800aab4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800aa5a:	4b18      	ldr	r3, [pc, #96]	; (800aabc <HAL_RCC_ClockConfig+0x1f0>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	2207      	movs	r2, #7
 800aa60:	4013      	ands	r3, r2
 800aa62:	683a      	ldr	r2, [r7, #0]
 800aa64:	429a      	cmp	r2, r3
 800aa66:	d1ee      	bne.n	800aa46 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	2204      	movs	r2, #4
 800aa6e:	4013      	ands	r3, r2
 800aa70:	d009      	beq.n	800aa86 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800aa72:	4b14      	ldr	r3, [pc, #80]	; (800aac4 <HAL_RCC_ClockConfig+0x1f8>)
 800aa74:	689b      	ldr	r3, [r3, #8]
 800aa76:	4a15      	ldr	r2, [pc, #84]	; (800aacc <HAL_RCC_ClockConfig+0x200>)
 800aa78:	4013      	ands	r3, r2
 800aa7a:	0019      	movs	r1, r3
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	68da      	ldr	r2, [r3, #12]
 800aa80:	4b10      	ldr	r3, [pc, #64]	; (800aac4 <HAL_RCC_ClockConfig+0x1f8>)
 800aa82:	430a      	orrs	r2, r1
 800aa84:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800aa86:	f000 f829 	bl	800aadc <HAL_RCC_GetSysClockFreq>
 800aa8a:	0001      	movs	r1, r0
 800aa8c:	4b0d      	ldr	r3, [pc, #52]	; (800aac4 <HAL_RCC_ClockConfig+0x1f8>)
 800aa8e:	689b      	ldr	r3, [r3, #8]
 800aa90:	0a1b      	lsrs	r3, r3, #8
 800aa92:	220f      	movs	r2, #15
 800aa94:	401a      	ands	r2, r3
 800aa96:	4b0e      	ldr	r3, [pc, #56]	; (800aad0 <HAL_RCC_ClockConfig+0x204>)
 800aa98:	0092      	lsls	r2, r2, #2
 800aa9a:	58d3      	ldr	r3, [r2, r3]
 800aa9c:	221f      	movs	r2, #31
 800aa9e:	4013      	ands	r3, r2
 800aaa0:	000a      	movs	r2, r1
 800aaa2:	40da      	lsrs	r2, r3
 800aaa4:	4b0b      	ldr	r3, [pc, #44]	; (800aad4 <HAL_RCC_ClockConfig+0x208>)
 800aaa6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800aaa8:	4b0b      	ldr	r3, [pc, #44]	; (800aad8 <HAL_RCC_ClockConfig+0x20c>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	0018      	movs	r0, r3
 800aaae:	f7fe ffc3 	bl	8009a38 <HAL_InitTick>
 800aab2:	0003      	movs	r3, r0
}
 800aab4:	0018      	movs	r0, r3
 800aab6:	46bd      	mov	sp, r7
 800aab8:	b004      	add	sp, #16
 800aaba:	bd80      	pop	{r7, pc}
 800aabc:	40022000 	.word	0x40022000
 800aac0:	00001388 	.word	0x00001388
 800aac4:	40021000 	.word	0x40021000
 800aac8:	fffff0ff 	.word	0xfffff0ff
 800aacc:	ffff8fff 	.word	0xffff8fff
 800aad0:	08013778 	.word	0x08013778
 800aad4:	200000d8 	.word	0x200000d8
 800aad8:	200000dc 	.word	0x200000dc

0800aadc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b086      	sub	sp, #24
 800aae0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800aae2:	4b3c      	ldr	r3, [pc, #240]	; (800abd4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800aae4:	689b      	ldr	r3, [r3, #8]
 800aae6:	2238      	movs	r2, #56	; 0x38
 800aae8:	4013      	ands	r3, r2
 800aaea:	d10f      	bne.n	800ab0c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800aaec:	4b39      	ldr	r3, [pc, #228]	; (800abd4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	0adb      	lsrs	r3, r3, #11
 800aaf2:	2207      	movs	r2, #7
 800aaf4:	4013      	ands	r3, r2
 800aaf6:	2201      	movs	r2, #1
 800aaf8:	409a      	lsls	r2, r3
 800aafa:	0013      	movs	r3, r2
 800aafc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800aafe:	6839      	ldr	r1, [r7, #0]
 800ab00:	4835      	ldr	r0, [pc, #212]	; (800abd8 <HAL_RCC_GetSysClockFreq+0xfc>)
 800ab02:	f7f5 fb23 	bl	800014c <__udivsi3>
 800ab06:	0003      	movs	r3, r0
 800ab08:	613b      	str	r3, [r7, #16]
 800ab0a:	e05d      	b.n	800abc8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ab0c:	4b31      	ldr	r3, [pc, #196]	; (800abd4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800ab0e:	689b      	ldr	r3, [r3, #8]
 800ab10:	2238      	movs	r2, #56	; 0x38
 800ab12:	4013      	ands	r3, r2
 800ab14:	2b08      	cmp	r3, #8
 800ab16:	d102      	bne.n	800ab1e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800ab18:	4b30      	ldr	r3, [pc, #192]	; (800abdc <HAL_RCC_GetSysClockFreq+0x100>)
 800ab1a:	613b      	str	r3, [r7, #16]
 800ab1c:	e054      	b.n	800abc8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ab1e:	4b2d      	ldr	r3, [pc, #180]	; (800abd4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800ab20:	689b      	ldr	r3, [r3, #8]
 800ab22:	2238      	movs	r2, #56	; 0x38
 800ab24:	4013      	ands	r3, r2
 800ab26:	2b10      	cmp	r3, #16
 800ab28:	d138      	bne.n	800ab9c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800ab2a:	4b2a      	ldr	r3, [pc, #168]	; (800abd4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800ab2c:	68db      	ldr	r3, [r3, #12]
 800ab2e:	2203      	movs	r2, #3
 800ab30:	4013      	ands	r3, r2
 800ab32:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ab34:	4b27      	ldr	r3, [pc, #156]	; (800abd4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800ab36:	68db      	ldr	r3, [r3, #12]
 800ab38:	091b      	lsrs	r3, r3, #4
 800ab3a:	2207      	movs	r2, #7
 800ab3c:	4013      	ands	r3, r2
 800ab3e:	3301      	adds	r3, #1
 800ab40:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	2b03      	cmp	r3, #3
 800ab46:	d10d      	bne.n	800ab64 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ab48:	68b9      	ldr	r1, [r7, #8]
 800ab4a:	4824      	ldr	r0, [pc, #144]	; (800abdc <HAL_RCC_GetSysClockFreq+0x100>)
 800ab4c:	f7f5 fafe 	bl	800014c <__udivsi3>
 800ab50:	0003      	movs	r3, r0
 800ab52:	0019      	movs	r1, r3
 800ab54:	4b1f      	ldr	r3, [pc, #124]	; (800abd4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800ab56:	68db      	ldr	r3, [r3, #12]
 800ab58:	0a1b      	lsrs	r3, r3, #8
 800ab5a:	227f      	movs	r2, #127	; 0x7f
 800ab5c:	4013      	ands	r3, r2
 800ab5e:	434b      	muls	r3, r1
 800ab60:	617b      	str	r3, [r7, #20]
        break;
 800ab62:	e00d      	b.n	800ab80 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800ab64:	68b9      	ldr	r1, [r7, #8]
 800ab66:	481c      	ldr	r0, [pc, #112]	; (800abd8 <HAL_RCC_GetSysClockFreq+0xfc>)
 800ab68:	f7f5 faf0 	bl	800014c <__udivsi3>
 800ab6c:	0003      	movs	r3, r0
 800ab6e:	0019      	movs	r1, r3
 800ab70:	4b18      	ldr	r3, [pc, #96]	; (800abd4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800ab72:	68db      	ldr	r3, [r3, #12]
 800ab74:	0a1b      	lsrs	r3, r3, #8
 800ab76:	227f      	movs	r2, #127	; 0x7f
 800ab78:	4013      	ands	r3, r2
 800ab7a:	434b      	muls	r3, r1
 800ab7c:	617b      	str	r3, [r7, #20]
        break;
 800ab7e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800ab80:	4b14      	ldr	r3, [pc, #80]	; (800abd4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800ab82:	68db      	ldr	r3, [r3, #12]
 800ab84:	0f5b      	lsrs	r3, r3, #29
 800ab86:	2207      	movs	r2, #7
 800ab88:	4013      	ands	r3, r2
 800ab8a:	3301      	adds	r3, #1
 800ab8c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800ab8e:	6879      	ldr	r1, [r7, #4]
 800ab90:	6978      	ldr	r0, [r7, #20]
 800ab92:	f7f5 fadb 	bl	800014c <__udivsi3>
 800ab96:	0003      	movs	r3, r0
 800ab98:	613b      	str	r3, [r7, #16]
 800ab9a:	e015      	b.n	800abc8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800ab9c:	4b0d      	ldr	r3, [pc, #52]	; (800abd4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800ab9e:	689b      	ldr	r3, [r3, #8]
 800aba0:	2238      	movs	r2, #56	; 0x38
 800aba2:	4013      	ands	r3, r2
 800aba4:	2b20      	cmp	r3, #32
 800aba6:	d103      	bne.n	800abb0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800aba8:	2380      	movs	r3, #128	; 0x80
 800abaa:	021b      	lsls	r3, r3, #8
 800abac:	613b      	str	r3, [r7, #16]
 800abae:	e00b      	b.n	800abc8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800abb0:	4b08      	ldr	r3, [pc, #32]	; (800abd4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800abb2:	689b      	ldr	r3, [r3, #8]
 800abb4:	2238      	movs	r2, #56	; 0x38
 800abb6:	4013      	ands	r3, r2
 800abb8:	2b18      	cmp	r3, #24
 800abba:	d103      	bne.n	800abc4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800abbc:	23fa      	movs	r3, #250	; 0xfa
 800abbe:	01db      	lsls	r3, r3, #7
 800abc0:	613b      	str	r3, [r7, #16]
 800abc2:	e001      	b.n	800abc8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800abc4:	2300      	movs	r3, #0
 800abc6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800abc8:	693b      	ldr	r3, [r7, #16]
}
 800abca:	0018      	movs	r0, r3
 800abcc:	46bd      	mov	sp, r7
 800abce:	b006      	add	sp, #24
 800abd0:	bd80      	pop	{r7, pc}
 800abd2:	46c0      	nop			; (mov r8, r8)
 800abd4:	40021000 	.word	0x40021000
 800abd8:	00f42400 	.word	0x00f42400
 800abdc:	007a1200 	.word	0x007a1200

0800abe0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800abe4:	4b02      	ldr	r3, [pc, #8]	; (800abf0 <HAL_RCC_GetHCLKFreq+0x10>)
 800abe6:	681b      	ldr	r3, [r3, #0]
}
 800abe8:	0018      	movs	r0, r3
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}
 800abee:	46c0      	nop			; (mov r8, r8)
 800abf0:	200000d8 	.word	0x200000d8

0800abf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800abf4:	b5b0      	push	{r4, r5, r7, lr}
 800abf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800abf8:	f7ff fff2 	bl	800abe0 <HAL_RCC_GetHCLKFreq>
 800abfc:	0004      	movs	r4, r0
 800abfe:	f7ff fb49 	bl	800a294 <LL_RCC_GetAPB1Prescaler>
 800ac02:	0003      	movs	r3, r0
 800ac04:	0b1a      	lsrs	r2, r3, #12
 800ac06:	4b05      	ldr	r3, [pc, #20]	; (800ac1c <HAL_RCC_GetPCLK1Freq+0x28>)
 800ac08:	0092      	lsls	r2, r2, #2
 800ac0a:	58d3      	ldr	r3, [r2, r3]
 800ac0c:	221f      	movs	r2, #31
 800ac0e:	4013      	ands	r3, r2
 800ac10:	40dc      	lsrs	r4, r3
 800ac12:	0023      	movs	r3, r4
}
 800ac14:	0018      	movs	r0, r3
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bdb0      	pop	{r4, r5, r7, pc}
 800ac1a:	46c0      	nop			; (mov r8, r8)
 800ac1c:	080137b8 	.word	0x080137b8

0800ac20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b086      	sub	sp, #24
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800ac28:	2313      	movs	r3, #19
 800ac2a:	18fb      	adds	r3, r7, r3
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ac30:	2312      	movs	r3, #18
 800ac32:	18fb      	adds	r3, r7, r3
 800ac34:	2200      	movs	r2, #0
 800ac36:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681a      	ldr	r2, [r3, #0]
 800ac3c:	2380      	movs	r3, #128	; 0x80
 800ac3e:	029b      	lsls	r3, r3, #10
 800ac40:	4013      	ands	r3, r2
 800ac42:	d100      	bne.n	800ac46 <HAL_RCCEx_PeriphCLKConfig+0x26>
 800ac44:	e0a3      	b.n	800ad8e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ac46:	2011      	movs	r0, #17
 800ac48:	183b      	adds	r3, r7, r0
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ac4e:	4b86      	ldr	r3, [pc, #536]	; (800ae68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800ac50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac52:	2380      	movs	r3, #128	; 0x80
 800ac54:	055b      	lsls	r3, r3, #21
 800ac56:	4013      	ands	r3, r2
 800ac58:	d110      	bne.n	800ac7c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ac5a:	4b83      	ldr	r3, [pc, #524]	; (800ae68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800ac5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac5e:	4b82      	ldr	r3, [pc, #520]	; (800ae68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800ac60:	2180      	movs	r1, #128	; 0x80
 800ac62:	0549      	lsls	r1, r1, #21
 800ac64:	430a      	orrs	r2, r1
 800ac66:	63da      	str	r2, [r3, #60]	; 0x3c
 800ac68:	4b7f      	ldr	r3, [pc, #508]	; (800ae68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800ac6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac6c:	2380      	movs	r3, #128	; 0x80
 800ac6e:	055b      	lsls	r3, r3, #21
 800ac70:	4013      	ands	r3, r2
 800ac72:	60bb      	str	r3, [r7, #8]
 800ac74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ac76:	183b      	adds	r3, r7, r0
 800ac78:	2201      	movs	r2, #1
 800ac7a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ac7c:	4b7b      	ldr	r3, [pc, #492]	; (800ae6c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800ac7e:	681a      	ldr	r2, [r3, #0]
 800ac80:	4b7a      	ldr	r3, [pc, #488]	; (800ae6c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800ac82:	2180      	movs	r1, #128	; 0x80
 800ac84:	0049      	lsls	r1, r1, #1
 800ac86:	430a      	orrs	r2, r1
 800ac88:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ac8a:	f7fe ff31 	bl	8009af0 <HAL_GetTick>
 800ac8e:	0003      	movs	r3, r0
 800ac90:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ac92:	e00b      	b.n	800acac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ac94:	f7fe ff2c 	bl	8009af0 <HAL_GetTick>
 800ac98:	0002      	movs	r2, r0
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	1ad3      	subs	r3, r2, r3
 800ac9e:	2b02      	cmp	r3, #2
 800aca0:	d904      	bls.n	800acac <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800aca2:	2313      	movs	r3, #19
 800aca4:	18fb      	adds	r3, r7, r3
 800aca6:	2203      	movs	r2, #3
 800aca8:	701a      	strb	r2, [r3, #0]
        break;
 800acaa:	e005      	b.n	800acb8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800acac:	4b6f      	ldr	r3, [pc, #444]	; (800ae6c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800acae:	681a      	ldr	r2, [r3, #0]
 800acb0:	2380      	movs	r3, #128	; 0x80
 800acb2:	005b      	lsls	r3, r3, #1
 800acb4:	4013      	ands	r3, r2
 800acb6:	d0ed      	beq.n	800ac94 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800acb8:	2313      	movs	r3, #19
 800acba:	18fb      	adds	r3, r7, r3
 800acbc:	781b      	ldrb	r3, [r3, #0]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d154      	bne.n	800ad6c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800acc2:	4b69      	ldr	r3, [pc, #420]	; (800ae68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800acc4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800acc6:	23c0      	movs	r3, #192	; 0xc0
 800acc8:	009b      	lsls	r3, r3, #2
 800acca:	4013      	ands	r3, r2
 800accc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800acce:	697b      	ldr	r3, [r7, #20]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d019      	beq.n	800ad08 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	699b      	ldr	r3, [r3, #24]
 800acd8:	697a      	ldr	r2, [r7, #20]
 800acda:	429a      	cmp	r2, r3
 800acdc:	d014      	beq.n	800ad08 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800acde:	4b62      	ldr	r3, [pc, #392]	; (800ae68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800ace0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ace2:	4a63      	ldr	r2, [pc, #396]	; (800ae70 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800ace4:	4013      	ands	r3, r2
 800ace6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ace8:	4b5f      	ldr	r3, [pc, #380]	; (800ae68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800acea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800acec:	4b5e      	ldr	r3, [pc, #376]	; (800ae68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800acee:	2180      	movs	r1, #128	; 0x80
 800acf0:	0249      	lsls	r1, r1, #9
 800acf2:	430a      	orrs	r2, r1
 800acf4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800acf6:	4b5c      	ldr	r3, [pc, #368]	; (800ae68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800acf8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800acfa:	4b5b      	ldr	r3, [pc, #364]	; (800ae68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800acfc:	495d      	ldr	r1, [pc, #372]	; (800ae74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800acfe:	400a      	ands	r2, r1
 800ad00:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800ad02:	4b59      	ldr	r3, [pc, #356]	; (800ae68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800ad04:	697a      	ldr	r2, [r7, #20]
 800ad06:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	2201      	movs	r2, #1
 800ad0c:	4013      	ands	r3, r2
 800ad0e:	d016      	beq.n	800ad3e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad10:	f7fe feee 	bl	8009af0 <HAL_GetTick>
 800ad14:	0003      	movs	r3, r0
 800ad16:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ad18:	e00c      	b.n	800ad34 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ad1a:	f7fe fee9 	bl	8009af0 <HAL_GetTick>
 800ad1e:	0002      	movs	r2, r0
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	1ad3      	subs	r3, r2, r3
 800ad24:	4a54      	ldr	r2, [pc, #336]	; (800ae78 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d904      	bls.n	800ad34 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800ad2a:	2313      	movs	r3, #19
 800ad2c:	18fb      	adds	r3, r7, r3
 800ad2e:	2203      	movs	r2, #3
 800ad30:	701a      	strb	r2, [r3, #0]
            break;
 800ad32:	e004      	b.n	800ad3e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ad34:	4b4c      	ldr	r3, [pc, #304]	; (800ae68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800ad36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad38:	2202      	movs	r2, #2
 800ad3a:	4013      	ands	r3, r2
 800ad3c:	d0ed      	beq.n	800ad1a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800ad3e:	2313      	movs	r3, #19
 800ad40:	18fb      	adds	r3, r7, r3
 800ad42:	781b      	ldrb	r3, [r3, #0]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d10a      	bne.n	800ad5e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ad48:	4b47      	ldr	r3, [pc, #284]	; (800ae68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800ad4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad4c:	4a48      	ldr	r2, [pc, #288]	; (800ae70 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800ad4e:	4013      	ands	r3, r2
 800ad50:	0019      	movs	r1, r3
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	699a      	ldr	r2, [r3, #24]
 800ad56:	4b44      	ldr	r3, [pc, #272]	; (800ae68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800ad58:	430a      	orrs	r2, r1
 800ad5a:	65da      	str	r2, [r3, #92]	; 0x5c
 800ad5c:	e00c      	b.n	800ad78 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ad5e:	2312      	movs	r3, #18
 800ad60:	18fb      	adds	r3, r7, r3
 800ad62:	2213      	movs	r2, #19
 800ad64:	18ba      	adds	r2, r7, r2
 800ad66:	7812      	ldrb	r2, [r2, #0]
 800ad68:	701a      	strb	r2, [r3, #0]
 800ad6a:	e005      	b.n	800ad78 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad6c:	2312      	movs	r3, #18
 800ad6e:	18fb      	adds	r3, r7, r3
 800ad70:	2213      	movs	r2, #19
 800ad72:	18ba      	adds	r2, r7, r2
 800ad74:	7812      	ldrb	r2, [r2, #0]
 800ad76:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800ad78:	2311      	movs	r3, #17
 800ad7a:	18fb      	adds	r3, r7, r3
 800ad7c:	781b      	ldrb	r3, [r3, #0]
 800ad7e:	2b01      	cmp	r3, #1
 800ad80:	d105      	bne.n	800ad8e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ad82:	4b39      	ldr	r3, [pc, #228]	; (800ae68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800ad84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ad86:	4b38      	ldr	r3, [pc, #224]	; (800ae68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800ad88:	493c      	ldr	r1, [pc, #240]	; (800ae7c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800ad8a:	400a      	ands	r2, r1
 800ad8c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	2201      	movs	r2, #1
 800ad94:	4013      	ands	r3, r2
 800ad96:	d009      	beq.n	800adac <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ad98:	4b33      	ldr	r3, [pc, #204]	; (800ae68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800ad9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad9c:	2203      	movs	r2, #3
 800ad9e:	4393      	bics	r3, r2
 800ada0:	0019      	movs	r1, r3
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	685a      	ldr	r2, [r3, #4]
 800ada6:	4b30      	ldr	r3, [pc, #192]	; (800ae68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800ada8:	430a      	orrs	r2, r1
 800adaa:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	2202      	movs	r2, #2
 800adb2:	4013      	ands	r3, r2
 800adb4:	d009      	beq.n	800adca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800adb6:	4b2c      	ldr	r3, [pc, #176]	; (800ae68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800adb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adba:	220c      	movs	r2, #12
 800adbc:	4393      	bics	r3, r2
 800adbe:	0019      	movs	r1, r3
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	689a      	ldr	r2, [r3, #8]
 800adc4:	4b28      	ldr	r3, [pc, #160]	; (800ae68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800adc6:	430a      	orrs	r2, r1
 800adc8:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	2220      	movs	r2, #32
 800add0:	4013      	ands	r3, r2
 800add2:	d009      	beq.n	800ade8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800add4:	4b24      	ldr	r3, [pc, #144]	; (800ae68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800add6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800add8:	4a29      	ldr	r2, [pc, #164]	; (800ae80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800adda:	4013      	ands	r3, r2
 800addc:	0019      	movs	r1, r3
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	68da      	ldr	r2, [r3, #12]
 800ade2:	4b21      	ldr	r3, [pc, #132]	; (800ae68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800ade4:	430a      	orrs	r2, r1
 800ade6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681a      	ldr	r2, [r3, #0]
 800adec:	2380      	movs	r3, #128	; 0x80
 800adee:	01db      	lsls	r3, r3, #7
 800adf0:	4013      	ands	r3, r2
 800adf2:	d015      	beq.n	800ae20 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800adf4:	4b1c      	ldr	r3, [pc, #112]	; (800ae68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800adf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adf8:	009b      	lsls	r3, r3, #2
 800adfa:	0899      	lsrs	r1, r3, #2
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	695a      	ldr	r2, [r3, #20]
 800ae00:	4b19      	ldr	r3, [pc, #100]	; (800ae68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800ae02:	430a      	orrs	r2, r1
 800ae04:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	695a      	ldr	r2, [r3, #20]
 800ae0a:	2380      	movs	r3, #128	; 0x80
 800ae0c:	05db      	lsls	r3, r3, #23
 800ae0e:	429a      	cmp	r2, r3
 800ae10:	d106      	bne.n	800ae20 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800ae12:	4b15      	ldr	r3, [pc, #84]	; (800ae68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800ae14:	68da      	ldr	r2, [r3, #12]
 800ae16:	4b14      	ldr	r3, [pc, #80]	; (800ae68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800ae18:	2180      	movs	r1, #128	; 0x80
 800ae1a:	0249      	lsls	r1, r1, #9
 800ae1c:	430a      	orrs	r2, r1
 800ae1e:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681a      	ldr	r2, [r3, #0]
 800ae24:	2380      	movs	r3, #128	; 0x80
 800ae26:	011b      	lsls	r3, r3, #4
 800ae28:	4013      	ands	r3, r2
 800ae2a:	d016      	beq.n	800ae5a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800ae2c:	4b0e      	ldr	r3, [pc, #56]	; (800ae68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800ae2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae30:	4a14      	ldr	r2, [pc, #80]	; (800ae84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800ae32:	4013      	ands	r3, r2
 800ae34:	0019      	movs	r1, r3
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	691a      	ldr	r2, [r3, #16]
 800ae3a:	4b0b      	ldr	r3, [pc, #44]	; (800ae68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800ae3c:	430a      	orrs	r2, r1
 800ae3e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	691a      	ldr	r2, [r3, #16]
 800ae44:	2380      	movs	r3, #128	; 0x80
 800ae46:	01db      	lsls	r3, r3, #7
 800ae48:	429a      	cmp	r2, r3
 800ae4a:	d106      	bne.n	800ae5a <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800ae4c:	4b06      	ldr	r3, [pc, #24]	; (800ae68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800ae4e:	68da      	ldr	r2, [r3, #12]
 800ae50:	4b05      	ldr	r3, [pc, #20]	; (800ae68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800ae52:	2180      	movs	r1, #128	; 0x80
 800ae54:	0249      	lsls	r1, r1, #9
 800ae56:	430a      	orrs	r2, r1
 800ae58:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800ae5a:	2312      	movs	r3, #18
 800ae5c:	18fb      	adds	r3, r7, r3
 800ae5e:	781b      	ldrb	r3, [r3, #0]
}
 800ae60:	0018      	movs	r0, r3
 800ae62:	46bd      	mov	sp, r7
 800ae64:	b006      	add	sp, #24
 800ae66:	bd80      	pop	{r7, pc}
 800ae68:	40021000 	.word	0x40021000
 800ae6c:	40007000 	.word	0x40007000
 800ae70:	fffffcff 	.word	0xfffffcff
 800ae74:	fffeffff 	.word	0xfffeffff
 800ae78:	00001388 	.word	0x00001388
 800ae7c:	efffffff 	.word	0xefffffff
 800ae80:	ffffcfff 	.word	0xffffcfff
 800ae84:	ffff3fff 	.word	0xffff3fff

0800ae88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b084      	sub	sp, #16
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d101      	bne.n	800ae9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ae96:	2301      	movs	r3, #1
 800ae98:	e0a8      	b.n	800afec <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d109      	bne.n	800aeb6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	685a      	ldr	r2, [r3, #4]
 800aea6:	2382      	movs	r3, #130	; 0x82
 800aea8:	005b      	lsls	r3, r3, #1
 800aeaa:	429a      	cmp	r2, r3
 800aeac:	d009      	beq.n	800aec2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	61da      	str	r2, [r3, #28]
 800aeb4:	e005      	b.n	800aec2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2200      	movs	r2, #0
 800aeba:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2200      	movs	r2, #0
 800aec0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2200      	movs	r2, #0
 800aec6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	225d      	movs	r2, #93	; 0x5d
 800aecc:	5c9b      	ldrb	r3, [r3, r2]
 800aece:	b2db      	uxtb	r3, r3
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d107      	bne.n	800aee4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	225c      	movs	r2, #92	; 0x5c
 800aed8:	2100      	movs	r1, #0
 800aeda:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	0018      	movs	r0, r3
 800aee0:	f7fd fcaa 	bl	8008838 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	225d      	movs	r2, #93	; 0x5d
 800aee8:	2102      	movs	r1, #2
 800aeea:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	681a      	ldr	r2, [r3, #0]
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	2140      	movs	r1, #64	; 0x40
 800aef8:	438a      	bics	r2, r1
 800aefa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	68da      	ldr	r2, [r3, #12]
 800af00:	23e0      	movs	r3, #224	; 0xe0
 800af02:	00db      	lsls	r3, r3, #3
 800af04:	429a      	cmp	r2, r3
 800af06:	d902      	bls.n	800af0e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800af08:	2300      	movs	r3, #0
 800af0a:	60fb      	str	r3, [r7, #12]
 800af0c:	e002      	b.n	800af14 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800af0e:	2380      	movs	r3, #128	; 0x80
 800af10:	015b      	lsls	r3, r3, #5
 800af12:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	68da      	ldr	r2, [r3, #12]
 800af18:	23f0      	movs	r3, #240	; 0xf0
 800af1a:	011b      	lsls	r3, r3, #4
 800af1c:	429a      	cmp	r2, r3
 800af1e:	d008      	beq.n	800af32 <HAL_SPI_Init+0xaa>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	68da      	ldr	r2, [r3, #12]
 800af24:	23e0      	movs	r3, #224	; 0xe0
 800af26:	00db      	lsls	r3, r3, #3
 800af28:	429a      	cmp	r2, r3
 800af2a:	d002      	beq.n	800af32 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2200      	movs	r2, #0
 800af30:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	685a      	ldr	r2, [r3, #4]
 800af36:	2382      	movs	r3, #130	; 0x82
 800af38:	005b      	lsls	r3, r3, #1
 800af3a:	401a      	ands	r2, r3
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6899      	ldr	r1, [r3, #8]
 800af40:	2384      	movs	r3, #132	; 0x84
 800af42:	021b      	lsls	r3, r3, #8
 800af44:	400b      	ands	r3, r1
 800af46:	431a      	orrs	r2, r3
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	691b      	ldr	r3, [r3, #16]
 800af4c:	2102      	movs	r1, #2
 800af4e:	400b      	ands	r3, r1
 800af50:	431a      	orrs	r2, r3
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	695b      	ldr	r3, [r3, #20]
 800af56:	2101      	movs	r1, #1
 800af58:	400b      	ands	r3, r1
 800af5a:	431a      	orrs	r2, r3
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	6999      	ldr	r1, [r3, #24]
 800af60:	2380      	movs	r3, #128	; 0x80
 800af62:	009b      	lsls	r3, r3, #2
 800af64:	400b      	ands	r3, r1
 800af66:	431a      	orrs	r2, r3
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	69db      	ldr	r3, [r3, #28]
 800af6c:	2138      	movs	r1, #56	; 0x38
 800af6e:	400b      	ands	r3, r1
 800af70:	431a      	orrs	r2, r3
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6a1b      	ldr	r3, [r3, #32]
 800af76:	2180      	movs	r1, #128	; 0x80
 800af78:	400b      	ands	r3, r1
 800af7a:	431a      	orrs	r2, r3
 800af7c:	0011      	movs	r1, r2
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800af82:	2380      	movs	r3, #128	; 0x80
 800af84:	019b      	lsls	r3, r3, #6
 800af86:	401a      	ands	r2, r3
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	430a      	orrs	r2, r1
 800af8e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	699b      	ldr	r3, [r3, #24]
 800af94:	0c1b      	lsrs	r3, r3, #16
 800af96:	2204      	movs	r2, #4
 800af98:	401a      	ands	r2, r3
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af9e:	2110      	movs	r1, #16
 800afa0:	400b      	ands	r3, r1
 800afa2:	431a      	orrs	r2, r3
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afa8:	2108      	movs	r1, #8
 800afaa:	400b      	ands	r3, r1
 800afac:	431a      	orrs	r2, r3
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	68d9      	ldr	r1, [r3, #12]
 800afb2:	23f0      	movs	r3, #240	; 0xf0
 800afb4:	011b      	lsls	r3, r3, #4
 800afb6:	400b      	ands	r3, r1
 800afb8:	431a      	orrs	r2, r3
 800afba:	0011      	movs	r1, r2
 800afbc:	68fa      	ldr	r2, [r7, #12]
 800afbe:	2380      	movs	r3, #128	; 0x80
 800afc0:	015b      	lsls	r3, r3, #5
 800afc2:	401a      	ands	r2, r3
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	430a      	orrs	r2, r1
 800afca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	69da      	ldr	r2, [r3, #28]
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	4907      	ldr	r1, [pc, #28]	; (800aff4 <HAL_SPI_Init+0x16c>)
 800afd8:	400a      	ands	r2, r1
 800afda:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2200      	movs	r2, #0
 800afe0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	225d      	movs	r2, #93	; 0x5d
 800afe6:	2101      	movs	r1, #1
 800afe8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800afea:	2300      	movs	r3, #0
}
 800afec:	0018      	movs	r0, r3
 800afee:	46bd      	mov	sp, r7
 800aff0:	b004      	add	sp, #16
 800aff2:	bd80      	pop	{r7, pc}
 800aff4:	fffff7ff 	.word	0xfffff7ff

0800aff8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b088      	sub	sp, #32
 800affc:	af00      	add	r7, sp, #0
 800affe:	60f8      	str	r0, [r7, #12]
 800b000:	60b9      	str	r1, [r7, #8]
 800b002:	603b      	str	r3, [r7, #0]
 800b004:	1dbb      	adds	r3, r7, #6
 800b006:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b008:	231f      	movs	r3, #31
 800b00a:	18fb      	adds	r3, r7, r3
 800b00c:	2200      	movs	r2, #0
 800b00e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	225c      	movs	r2, #92	; 0x5c
 800b014:	5c9b      	ldrb	r3, [r3, r2]
 800b016:	2b01      	cmp	r3, #1
 800b018:	d101      	bne.n	800b01e <HAL_SPI_Transmit+0x26>
 800b01a:	2302      	movs	r3, #2
 800b01c:	e140      	b.n	800b2a0 <HAL_SPI_Transmit+0x2a8>
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	225c      	movs	r2, #92	; 0x5c
 800b022:	2101      	movs	r1, #1
 800b024:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b026:	f7fe fd63 	bl	8009af0 <HAL_GetTick>
 800b02a:	0003      	movs	r3, r0
 800b02c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800b02e:	2316      	movs	r3, #22
 800b030:	18fb      	adds	r3, r7, r3
 800b032:	1dba      	adds	r2, r7, #6
 800b034:	8812      	ldrh	r2, [r2, #0]
 800b036:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	225d      	movs	r2, #93	; 0x5d
 800b03c:	5c9b      	ldrb	r3, [r3, r2]
 800b03e:	b2db      	uxtb	r3, r3
 800b040:	2b01      	cmp	r3, #1
 800b042:	d004      	beq.n	800b04e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800b044:	231f      	movs	r3, #31
 800b046:	18fb      	adds	r3, r7, r3
 800b048:	2202      	movs	r2, #2
 800b04a:	701a      	strb	r2, [r3, #0]
    goto error;
 800b04c:	e11d      	b.n	800b28a <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d003      	beq.n	800b05c <HAL_SPI_Transmit+0x64>
 800b054:	1dbb      	adds	r3, r7, #6
 800b056:	881b      	ldrh	r3, [r3, #0]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d104      	bne.n	800b066 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800b05c:	231f      	movs	r3, #31
 800b05e:	18fb      	adds	r3, r7, r3
 800b060:	2201      	movs	r2, #1
 800b062:	701a      	strb	r2, [r3, #0]
    goto error;
 800b064:	e111      	b.n	800b28a <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	225d      	movs	r2, #93	; 0x5d
 800b06a:	2103      	movs	r1, #3
 800b06c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	2200      	movs	r2, #0
 800b072:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	68ba      	ldr	r2, [r7, #8]
 800b078:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	1dba      	adds	r2, r7, #6
 800b07e:	8812      	ldrh	r2, [r2, #0]
 800b080:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	1dba      	adds	r2, r7, #6
 800b086:	8812      	ldrh	r2, [r2, #0]
 800b088:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	2200      	movs	r2, #0
 800b08e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	2244      	movs	r2, #68	; 0x44
 800b094:	2100      	movs	r1, #0
 800b096:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	2246      	movs	r2, #70	; 0x46
 800b09c:	2100      	movs	r1, #0
 800b09e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	689a      	ldr	r2, [r3, #8]
 800b0b0:	2380      	movs	r3, #128	; 0x80
 800b0b2:	021b      	lsls	r3, r3, #8
 800b0b4:	429a      	cmp	r2, r3
 800b0b6:	d110      	bne.n	800b0da <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	681a      	ldr	r2, [r3, #0]
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	2140      	movs	r1, #64	; 0x40
 800b0c4:	438a      	bics	r2, r1
 800b0c6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	681a      	ldr	r2, [r3, #0]
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	2180      	movs	r1, #128	; 0x80
 800b0d4:	01c9      	lsls	r1, r1, #7
 800b0d6:	430a      	orrs	r2, r1
 800b0d8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	2240      	movs	r2, #64	; 0x40
 800b0e2:	4013      	ands	r3, r2
 800b0e4:	2b40      	cmp	r3, #64	; 0x40
 800b0e6:	d007      	beq.n	800b0f8 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	681a      	ldr	r2, [r3, #0]
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	2140      	movs	r1, #64	; 0x40
 800b0f4:	430a      	orrs	r2, r1
 800b0f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	68da      	ldr	r2, [r3, #12]
 800b0fc:	23e0      	movs	r3, #224	; 0xe0
 800b0fe:	00db      	lsls	r3, r3, #3
 800b100:	429a      	cmp	r2, r3
 800b102:	d94e      	bls.n	800b1a2 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	685b      	ldr	r3, [r3, #4]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d004      	beq.n	800b116 <HAL_SPI_Transmit+0x11e>
 800b10c:	2316      	movs	r3, #22
 800b10e:	18fb      	adds	r3, r7, r3
 800b110:	881b      	ldrh	r3, [r3, #0]
 800b112:	2b01      	cmp	r3, #1
 800b114:	d13f      	bne.n	800b196 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b11a:	881a      	ldrh	r2, [r3, #0]
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b126:	1c9a      	adds	r2, r3, #2
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b130:	b29b      	uxth	r3, r3
 800b132:	3b01      	subs	r3, #1
 800b134:	b29a      	uxth	r2, r3
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b13a:	e02c      	b.n	800b196 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	689b      	ldr	r3, [r3, #8]
 800b142:	2202      	movs	r2, #2
 800b144:	4013      	ands	r3, r2
 800b146:	2b02      	cmp	r3, #2
 800b148:	d112      	bne.n	800b170 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b14e:	881a      	ldrh	r2, [r3, #0]
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b15a:	1c9a      	adds	r2, r3, #2
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b164:	b29b      	uxth	r3, r3
 800b166:	3b01      	subs	r3, #1
 800b168:	b29a      	uxth	r2, r3
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b16e:	e012      	b.n	800b196 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b170:	f7fe fcbe 	bl	8009af0 <HAL_GetTick>
 800b174:	0002      	movs	r2, r0
 800b176:	69bb      	ldr	r3, [r7, #24]
 800b178:	1ad3      	subs	r3, r2, r3
 800b17a:	683a      	ldr	r2, [r7, #0]
 800b17c:	429a      	cmp	r2, r3
 800b17e:	d802      	bhi.n	800b186 <HAL_SPI_Transmit+0x18e>
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	3301      	adds	r3, #1
 800b184:	d102      	bne.n	800b18c <HAL_SPI_Transmit+0x194>
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d104      	bne.n	800b196 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 800b18c:	231f      	movs	r3, #31
 800b18e:	18fb      	adds	r3, r7, r3
 800b190:	2203      	movs	r2, #3
 800b192:	701a      	strb	r2, [r3, #0]
          goto error;
 800b194:	e079      	b.n	800b28a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b19a:	b29b      	uxth	r3, r3
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d1cd      	bne.n	800b13c <HAL_SPI_Transmit+0x144>
 800b1a0:	e04f      	b.n	800b242 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	685b      	ldr	r3, [r3, #4]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d004      	beq.n	800b1b4 <HAL_SPI_Transmit+0x1bc>
 800b1aa:	2316      	movs	r3, #22
 800b1ac:	18fb      	adds	r3, r7, r3
 800b1ae:	881b      	ldrh	r3, [r3, #0]
 800b1b0:	2b01      	cmp	r3, #1
 800b1b2:	d141      	bne.n	800b238 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	330c      	adds	r3, #12
 800b1be:	7812      	ldrb	r2, [r2, #0]
 800b1c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1c6:	1c5a      	adds	r2, r3, #1
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b1d0:	b29b      	uxth	r3, r3
 800b1d2:	3b01      	subs	r3, #1
 800b1d4:	b29a      	uxth	r2, r3
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800b1da:	e02d      	b.n	800b238 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	689b      	ldr	r3, [r3, #8]
 800b1e2:	2202      	movs	r2, #2
 800b1e4:	4013      	ands	r3, r2
 800b1e6:	2b02      	cmp	r3, #2
 800b1e8:	d113      	bne.n	800b212 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	330c      	adds	r3, #12
 800b1f4:	7812      	ldrb	r2, [r2, #0]
 800b1f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1fc:	1c5a      	adds	r2, r3, #1
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b206:	b29b      	uxth	r3, r3
 800b208:	3b01      	subs	r3, #1
 800b20a:	b29a      	uxth	r2, r3
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b210:	e012      	b.n	800b238 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b212:	f7fe fc6d 	bl	8009af0 <HAL_GetTick>
 800b216:	0002      	movs	r2, r0
 800b218:	69bb      	ldr	r3, [r7, #24]
 800b21a:	1ad3      	subs	r3, r2, r3
 800b21c:	683a      	ldr	r2, [r7, #0]
 800b21e:	429a      	cmp	r2, r3
 800b220:	d802      	bhi.n	800b228 <HAL_SPI_Transmit+0x230>
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	3301      	adds	r3, #1
 800b226:	d102      	bne.n	800b22e <HAL_SPI_Transmit+0x236>
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d104      	bne.n	800b238 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800b22e:	231f      	movs	r3, #31
 800b230:	18fb      	adds	r3, r7, r3
 800b232:	2203      	movs	r2, #3
 800b234:	701a      	strb	r2, [r3, #0]
          goto error;
 800b236:	e028      	b.n	800b28a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b23c:	b29b      	uxth	r3, r3
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d1cc      	bne.n	800b1dc <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b242:	69ba      	ldr	r2, [r7, #24]
 800b244:	6839      	ldr	r1, [r7, #0]
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	0018      	movs	r0, r3
 800b24a:	f000 fdf5 	bl	800be38 <SPI_EndRxTxTransaction>
 800b24e:	1e03      	subs	r3, r0, #0
 800b250:	d002      	beq.n	800b258 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	2220      	movs	r2, #32
 800b256:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	689b      	ldr	r3, [r3, #8]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d10a      	bne.n	800b276 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b260:	2300      	movs	r3, #0
 800b262:	613b      	str	r3, [r7, #16]
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	68db      	ldr	r3, [r3, #12]
 800b26a:	613b      	str	r3, [r7, #16]
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	689b      	ldr	r3, [r3, #8]
 800b272:	613b      	str	r3, [r7, #16]
 800b274:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d004      	beq.n	800b288 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800b27e:	231f      	movs	r3, #31
 800b280:	18fb      	adds	r3, r7, r3
 800b282:	2201      	movs	r2, #1
 800b284:	701a      	strb	r2, [r3, #0]
 800b286:	e000      	b.n	800b28a <HAL_SPI_Transmit+0x292>
  }

error:
 800b288:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	225d      	movs	r2, #93	; 0x5d
 800b28e:	2101      	movs	r1, #1
 800b290:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	225c      	movs	r2, #92	; 0x5c
 800b296:	2100      	movs	r1, #0
 800b298:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800b29a:	231f      	movs	r3, #31
 800b29c:	18fb      	adds	r3, r7, r3
 800b29e:	781b      	ldrb	r3, [r3, #0]
}
 800b2a0:	0018      	movs	r0, r3
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	b008      	add	sp, #32
 800b2a6:	bd80      	pop	{r7, pc}

0800b2a8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b2a8:	b590      	push	{r4, r7, lr}
 800b2aa:	b089      	sub	sp, #36	; 0x24
 800b2ac:	af02      	add	r7, sp, #8
 800b2ae:	60f8      	str	r0, [r7, #12]
 800b2b0:	60b9      	str	r1, [r7, #8]
 800b2b2:	603b      	str	r3, [r7, #0]
 800b2b4:	1dbb      	adds	r3, r7, #6
 800b2b6:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b2b8:	2317      	movs	r3, #23
 800b2ba:	18fb      	adds	r3, r7, r3
 800b2bc:	2200      	movs	r2, #0
 800b2be:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	685a      	ldr	r2, [r3, #4]
 800b2c4:	2382      	movs	r3, #130	; 0x82
 800b2c6:	005b      	lsls	r3, r3, #1
 800b2c8:	429a      	cmp	r2, r3
 800b2ca:	d113      	bne.n	800b2f4 <HAL_SPI_Receive+0x4c>
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	689b      	ldr	r3, [r3, #8]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d10f      	bne.n	800b2f4 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	225d      	movs	r2, #93	; 0x5d
 800b2d8:	2104      	movs	r1, #4
 800b2da:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b2dc:	1dbb      	adds	r3, r7, #6
 800b2de:	881c      	ldrh	r4, [r3, #0]
 800b2e0:	68ba      	ldr	r2, [r7, #8]
 800b2e2:	68b9      	ldr	r1, [r7, #8]
 800b2e4:	68f8      	ldr	r0, [r7, #12]
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	9300      	str	r3, [sp, #0]
 800b2ea:	0023      	movs	r3, r4
 800b2ec:	f000 f928 	bl	800b540 <HAL_SPI_TransmitReceive>
 800b2f0:	0003      	movs	r3, r0
 800b2f2:	e11c      	b.n	800b52e <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	225c      	movs	r2, #92	; 0x5c
 800b2f8:	5c9b      	ldrb	r3, [r3, r2]
 800b2fa:	2b01      	cmp	r3, #1
 800b2fc:	d101      	bne.n	800b302 <HAL_SPI_Receive+0x5a>
 800b2fe:	2302      	movs	r3, #2
 800b300:	e115      	b.n	800b52e <HAL_SPI_Receive+0x286>
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	225c      	movs	r2, #92	; 0x5c
 800b306:	2101      	movs	r1, #1
 800b308:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b30a:	f7fe fbf1 	bl	8009af0 <HAL_GetTick>
 800b30e:	0003      	movs	r3, r0
 800b310:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	225d      	movs	r2, #93	; 0x5d
 800b316:	5c9b      	ldrb	r3, [r3, r2]
 800b318:	b2db      	uxtb	r3, r3
 800b31a:	2b01      	cmp	r3, #1
 800b31c:	d004      	beq.n	800b328 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 800b31e:	2317      	movs	r3, #23
 800b320:	18fb      	adds	r3, r7, r3
 800b322:	2202      	movs	r2, #2
 800b324:	701a      	strb	r2, [r3, #0]
    goto error;
 800b326:	e0f7      	b.n	800b518 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d003      	beq.n	800b336 <HAL_SPI_Receive+0x8e>
 800b32e:	1dbb      	adds	r3, r7, #6
 800b330:	881b      	ldrh	r3, [r3, #0]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d104      	bne.n	800b340 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 800b336:	2317      	movs	r3, #23
 800b338:	18fb      	adds	r3, r7, r3
 800b33a:	2201      	movs	r2, #1
 800b33c:	701a      	strb	r2, [r3, #0]
    goto error;
 800b33e:	e0eb      	b.n	800b518 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	225d      	movs	r2, #93	; 0x5d
 800b344:	2104      	movs	r1, #4
 800b346:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	2200      	movs	r2, #0
 800b34c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	68ba      	ldr	r2, [r7, #8]
 800b352:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	1dba      	adds	r2, r7, #6
 800b358:	2144      	movs	r1, #68	; 0x44
 800b35a:	8812      	ldrh	r2, [r2, #0]
 800b35c:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	1dba      	adds	r2, r7, #6
 800b362:	2146      	movs	r1, #70	; 0x46
 800b364:	8812      	ldrh	r2, [r2, #0]
 800b366:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	2200      	movs	r2, #0
 800b36c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	2200      	movs	r2, #0
 800b372:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	2200      	movs	r2, #0
 800b378:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	2200      	movs	r2, #0
 800b37e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	2200      	movs	r2, #0
 800b384:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	68da      	ldr	r2, [r3, #12]
 800b38a:	23e0      	movs	r3, #224	; 0xe0
 800b38c:	00db      	lsls	r3, r3, #3
 800b38e:	429a      	cmp	r2, r3
 800b390:	d908      	bls.n	800b3a4 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	685a      	ldr	r2, [r3, #4]
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	4966      	ldr	r1, [pc, #408]	; (800b538 <HAL_SPI_Receive+0x290>)
 800b39e:	400a      	ands	r2, r1
 800b3a0:	605a      	str	r2, [r3, #4]
 800b3a2:	e008      	b.n	800b3b6 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	685a      	ldr	r2, [r3, #4]
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	2180      	movs	r1, #128	; 0x80
 800b3b0:	0149      	lsls	r1, r1, #5
 800b3b2:	430a      	orrs	r2, r1
 800b3b4:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	689a      	ldr	r2, [r3, #8]
 800b3ba:	2380      	movs	r3, #128	; 0x80
 800b3bc:	021b      	lsls	r3, r3, #8
 800b3be:	429a      	cmp	r2, r3
 800b3c0:	d10f      	bne.n	800b3e2 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	681a      	ldr	r2, [r3, #0]
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	2140      	movs	r1, #64	; 0x40
 800b3ce:	438a      	bics	r2, r1
 800b3d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	681a      	ldr	r2, [r3, #0]
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	4957      	ldr	r1, [pc, #348]	; (800b53c <HAL_SPI_Receive+0x294>)
 800b3de:	400a      	ands	r2, r1
 800b3e0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	2240      	movs	r2, #64	; 0x40
 800b3ea:	4013      	ands	r3, r2
 800b3ec:	2b40      	cmp	r3, #64	; 0x40
 800b3ee:	d007      	beq.n	800b400 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	681a      	ldr	r2, [r3, #0]
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	2140      	movs	r1, #64	; 0x40
 800b3fc:	430a      	orrs	r2, r1
 800b3fe:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	68da      	ldr	r2, [r3, #12]
 800b404:	23e0      	movs	r3, #224	; 0xe0
 800b406:	00db      	lsls	r3, r3, #3
 800b408:	429a      	cmp	r2, r3
 800b40a:	d900      	bls.n	800b40e <HAL_SPI_Receive+0x166>
 800b40c:	e069      	b.n	800b4e2 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b40e:	e031      	b.n	800b474 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	689b      	ldr	r3, [r3, #8]
 800b416:	2201      	movs	r2, #1
 800b418:	4013      	ands	r3, r2
 800b41a:	2b01      	cmp	r3, #1
 800b41c:	d117      	bne.n	800b44e <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	330c      	adds	r3, #12
 800b424:	001a      	movs	r2, r3
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b42a:	7812      	ldrb	r2, [r2, #0]
 800b42c:	b2d2      	uxtb	r2, r2
 800b42e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b434:	1c5a      	adds	r2, r3, #1
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	2246      	movs	r2, #70	; 0x46
 800b43e:	5a9b      	ldrh	r3, [r3, r2]
 800b440:	b29b      	uxth	r3, r3
 800b442:	3b01      	subs	r3, #1
 800b444:	b299      	uxth	r1, r3
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	2246      	movs	r2, #70	; 0x46
 800b44a:	5299      	strh	r1, [r3, r2]
 800b44c:	e012      	b.n	800b474 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b44e:	f7fe fb4f 	bl	8009af0 <HAL_GetTick>
 800b452:	0002      	movs	r2, r0
 800b454:	693b      	ldr	r3, [r7, #16]
 800b456:	1ad3      	subs	r3, r2, r3
 800b458:	683a      	ldr	r2, [r7, #0]
 800b45a:	429a      	cmp	r2, r3
 800b45c:	d802      	bhi.n	800b464 <HAL_SPI_Receive+0x1bc>
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	3301      	adds	r3, #1
 800b462:	d102      	bne.n	800b46a <HAL_SPI_Receive+0x1c2>
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d104      	bne.n	800b474 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 800b46a:	2317      	movs	r3, #23
 800b46c:	18fb      	adds	r3, r7, r3
 800b46e:	2203      	movs	r2, #3
 800b470:	701a      	strb	r2, [r3, #0]
          goto error;
 800b472:	e051      	b.n	800b518 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	2246      	movs	r2, #70	; 0x46
 800b478:	5a9b      	ldrh	r3, [r3, r2]
 800b47a:	b29b      	uxth	r3, r3
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d1c7      	bne.n	800b410 <HAL_SPI_Receive+0x168>
 800b480:	e035      	b.n	800b4ee <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	689b      	ldr	r3, [r3, #8]
 800b488:	2201      	movs	r2, #1
 800b48a:	4013      	ands	r3, r2
 800b48c:	2b01      	cmp	r3, #1
 800b48e:	d115      	bne.n	800b4bc <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	68da      	ldr	r2, [r3, #12]
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b49a:	b292      	uxth	r2, r2
 800b49c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4a2:	1c9a      	adds	r2, r3, #2
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	2246      	movs	r2, #70	; 0x46
 800b4ac:	5a9b      	ldrh	r3, [r3, r2]
 800b4ae:	b29b      	uxth	r3, r3
 800b4b0:	3b01      	subs	r3, #1
 800b4b2:	b299      	uxth	r1, r3
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	2246      	movs	r2, #70	; 0x46
 800b4b8:	5299      	strh	r1, [r3, r2]
 800b4ba:	e012      	b.n	800b4e2 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b4bc:	f7fe fb18 	bl	8009af0 <HAL_GetTick>
 800b4c0:	0002      	movs	r2, r0
 800b4c2:	693b      	ldr	r3, [r7, #16]
 800b4c4:	1ad3      	subs	r3, r2, r3
 800b4c6:	683a      	ldr	r2, [r7, #0]
 800b4c8:	429a      	cmp	r2, r3
 800b4ca:	d802      	bhi.n	800b4d2 <HAL_SPI_Receive+0x22a>
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	3301      	adds	r3, #1
 800b4d0:	d102      	bne.n	800b4d8 <HAL_SPI_Receive+0x230>
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d104      	bne.n	800b4e2 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 800b4d8:	2317      	movs	r3, #23
 800b4da:	18fb      	adds	r3, r7, r3
 800b4dc:	2203      	movs	r2, #3
 800b4de:	701a      	strb	r2, [r3, #0]
          goto error;
 800b4e0:	e01a      	b.n	800b518 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	2246      	movs	r2, #70	; 0x46
 800b4e6:	5a9b      	ldrh	r3, [r3, r2]
 800b4e8:	b29b      	uxth	r3, r3
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d1c9      	bne.n	800b482 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b4ee:	693a      	ldr	r2, [r7, #16]
 800b4f0:	6839      	ldr	r1, [r7, #0]
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	0018      	movs	r0, r3
 800b4f6:	f000 fc41 	bl	800bd7c <SPI_EndRxTransaction>
 800b4fa:	1e03      	subs	r3, r0, #0
 800b4fc:	d002      	beq.n	800b504 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	2220      	movs	r2, #32
 800b502:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d004      	beq.n	800b516 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 800b50c:	2317      	movs	r3, #23
 800b50e:	18fb      	adds	r3, r7, r3
 800b510:	2201      	movs	r2, #1
 800b512:	701a      	strb	r2, [r3, #0]
 800b514:	e000      	b.n	800b518 <HAL_SPI_Receive+0x270>
  }

error :
 800b516:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	225d      	movs	r2, #93	; 0x5d
 800b51c:	2101      	movs	r1, #1
 800b51e:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	225c      	movs	r2, #92	; 0x5c
 800b524:	2100      	movs	r1, #0
 800b526:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800b528:	2317      	movs	r3, #23
 800b52a:	18fb      	adds	r3, r7, r3
 800b52c:	781b      	ldrb	r3, [r3, #0]
}
 800b52e:	0018      	movs	r0, r3
 800b530:	46bd      	mov	sp, r7
 800b532:	b007      	add	sp, #28
 800b534:	bd90      	pop	{r4, r7, pc}
 800b536:	46c0      	nop			; (mov r8, r8)
 800b538:	ffffefff 	.word	0xffffefff
 800b53c:	ffffbfff 	.word	0xffffbfff

0800b540 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b08a      	sub	sp, #40	; 0x28
 800b544:	af00      	add	r7, sp, #0
 800b546:	60f8      	str	r0, [r7, #12]
 800b548:	60b9      	str	r1, [r7, #8]
 800b54a:	607a      	str	r2, [r7, #4]
 800b54c:	001a      	movs	r2, r3
 800b54e:	1cbb      	adds	r3, r7, #2
 800b550:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b552:	2301      	movs	r3, #1
 800b554:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b556:	2323      	movs	r3, #35	; 0x23
 800b558:	18fb      	adds	r3, r7, r3
 800b55a:	2200      	movs	r2, #0
 800b55c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	225c      	movs	r2, #92	; 0x5c
 800b562:	5c9b      	ldrb	r3, [r3, r2]
 800b564:	2b01      	cmp	r3, #1
 800b566:	d101      	bne.n	800b56c <HAL_SPI_TransmitReceive+0x2c>
 800b568:	2302      	movs	r3, #2
 800b56a:	e1b5      	b.n	800b8d8 <HAL_SPI_TransmitReceive+0x398>
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	225c      	movs	r2, #92	; 0x5c
 800b570:	2101      	movs	r1, #1
 800b572:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b574:	f7fe fabc 	bl	8009af0 <HAL_GetTick>
 800b578:	0003      	movs	r3, r0
 800b57a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b57c:	201b      	movs	r0, #27
 800b57e:	183b      	adds	r3, r7, r0
 800b580:	68fa      	ldr	r2, [r7, #12]
 800b582:	215d      	movs	r1, #93	; 0x5d
 800b584:	5c52      	ldrb	r2, [r2, r1]
 800b586:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	685b      	ldr	r3, [r3, #4]
 800b58c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800b58e:	2312      	movs	r3, #18
 800b590:	18fb      	adds	r3, r7, r3
 800b592:	1cba      	adds	r2, r7, #2
 800b594:	8812      	ldrh	r2, [r2, #0]
 800b596:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b598:	183b      	adds	r3, r7, r0
 800b59a:	781b      	ldrb	r3, [r3, #0]
 800b59c:	2b01      	cmp	r3, #1
 800b59e:	d011      	beq.n	800b5c4 <HAL_SPI_TransmitReceive+0x84>
 800b5a0:	697a      	ldr	r2, [r7, #20]
 800b5a2:	2382      	movs	r3, #130	; 0x82
 800b5a4:	005b      	lsls	r3, r3, #1
 800b5a6:	429a      	cmp	r2, r3
 800b5a8:	d107      	bne.n	800b5ba <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	689b      	ldr	r3, [r3, #8]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d103      	bne.n	800b5ba <HAL_SPI_TransmitReceive+0x7a>
 800b5b2:	183b      	adds	r3, r7, r0
 800b5b4:	781b      	ldrb	r3, [r3, #0]
 800b5b6:	2b04      	cmp	r3, #4
 800b5b8:	d004      	beq.n	800b5c4 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800b5ba:	2323      	movs	r3, #35	; 0x23
 800b5bc:	18fb      	adds	r3, r7, r3
 800b5be:	2202      	movs	r2, #2
 800b5c0:	701a      	strb	r2, [r3, #0]
    goto error;
 800b5c2:	e17e      	b.n	800b8c2 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d006      	beq.n	800b5d8 <HAL_SPI_TransmitReceive+0x98>
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d003      	beq.n	800b5d8 <HAL_SPI_TransmitReceive+0x98>
 800b5d0:	1cbb      	adds	r3, r7, #2
 800b5d2:	881b      	ldrh	r3, [r3, #0]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d104      	bne.n	800b5e2 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800b5d8:	2323      	movs	r3, #35	; 0x23
 800b5da:	18fb      	adds	r3, r7, r3
 800b5dc:	2201      	movs	r2, #1
 800b5de:	701a      	strb	r2, [r3, #0]
    goto error;
 800b5e0:	e16f      	b.n	800b8c2 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	225d      	movs	r2, #93	; 0x5d
 800b5e6:	5c9b      	ldrb	r3, [r3, r2]
 800b5e8:	b2db      	uxtb	r3, r3
 800b5ea:	2b04      	cmp	r3, #4
 800b5ec:	d003      	beq.n	800b5f6 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	225d      	movs	r2, #93	; 0x5d
 800b5f2:	2105      	movs	r1, #5
 800b5f4:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	687a      	ldr	r2, [r7, #4]
 800b600:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	1cba      	adds	r2, r7, #2
 800b606:	2146      	movs	r1, #70	; 0x46
 800b608:	8812      	ldrh	r2, [r2, #0]
 800b60a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	1cba      	adds	r2, r7, #2
 800b610:	2144      	movs	r1, #68	; 0x44
 800b612:	8812      	ldrh	r2, [r2, #0]
 800b614:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	68ba      	ldr	r2, [r7, #8]
 800b61a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	1cba      	adds	r2, r7, #2
 800b620:	8812      	ldrh	r2, [r2, #0]
 800b622:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	1cba      	adds	r2, r7, #2
 800b628:	8812      	ldrh	r2, [r2, #0]
 800b62a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	2200      	movs	r2, #0
 800b630:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	2200      	movs	r2, #0
 800b636:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	68da      	ldr	r2, [r3, #12]
 800b63c:	23e0      	movs	r3, #224	; 0xe0
 800b63e:	00db      	lsls	r3, r3, #3
 800b640:	429a      	cmp	r2, r3
 800b642:	d908      	bls.n	800b656 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	685a      	ldr	r2, [r3, #4]
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	49a4      	ldr	r1, [pc, #656]	; (800b8e0 <HAL_SPI_TransmitReceive+0x3a0>)
 800b650:	400a      	ands	r2, r1
 800b652:	605a      	str	r2, [r3, #4]
 800b654:	e008      	b.n	800b668 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	685a      	ldr	r2, [r3, #4]
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	2180      	movs	r1, #128	; 0x80
 800b662:	0149      	lsls	r1, r1, #5
 800b664:	430a      	orrs	r2, r1
 800b666:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	2240      	movs	r2, #64	; 0x40
 800b670:	4013      	ands	r3, r2
 800b672:	2b40      	cmp	r3, #64	; 0x40
 800b674:	d007      	beq.n	800b686 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	681a      	ldr	r2, [r3, #0]
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	2140      	movs	r1, #64	; 0x40
 800b682:	430a      	orrs	r2, r1
 800b684:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	68da      	ldr	r2, [r3, #12]
 800b68a:	23e0      	movs	r3, #224	; 0xe0
 800b68c:	00db      	lsls	r3, r3, #3
 800b68e:	429a      	cmp	r2, r3
 800b690:	d800      	bhi.n	800b694 <HAL_SPI_TransmitReceive+0x154>
 800b692:	e07f      	b.n	800b794 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	685b      	ldr	r3, [r3, #4]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d005      	beq.n	800b6a8 <HAL_SPI_TransmitReceive+0x168>
 800b69c:	2312      	movs	r3, #18
 800b69e:	18fb      	adds	r3, r7, r3
 800b6a0:	881b      	ldrh	r3, [r3, #0]
 800b6a2:	2b01      	cmp	r3, #1
 800b6a4:	d000      	beq.n	800b6a8 <HAL_SPI_TransmitReceive+0x168>
 800b6a6:	e069      	b.n	800b77c <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6ac:	881a      	ldrh	r2, [r3, #0]
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6b8:	1c9a      	adds	r2, r3, #2
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b6c2:	b29b      	uxth	r3, r3
 800b6c4:	3b01      	subs	r3, #1
 800b6c6:	b29a      	uxth	r2, r3
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b6cc:	e056      	b.n	800b77c <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	689b      	ldr	r3, [r3, #8]
 800b6d4:	2202      	movs	r2, #2
 800b6d6:	4013      	ands	r3, r2
 800b6d8:	2b02      	cmp	r3, #2
 800b6da:	d11b      	bne.n	800b714 <HAL_SPI_TransmitReceive+0x1d4>
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b6e0:	b29b      	uxth	r3, r3
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d016      	beq.n	800b714 <HAL_SPI_TransmitReceive+0x1d4>
 800b6e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e8:	2b01      	cmp	r3, #1
 800b6ea:	d113      	bne.n	800b714 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6f0:	881a      	ldrh	r2, [r3, #0]
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6fc:	1c9a      	adds	r2, r3, #2
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b706:	b29b      	uxth	r3, r3
 800b708:	3b01      	subs	r3, #1
 800b70a:	b29a      	uxth	r2, r3
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b710:	2300      	movs	r3, #0
 800b712:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	689b      	ldr	r3, [r3, #8]
 800b71a:	2201      	movs	r2, #1
 800b71c:	4013      	ands	r3, r2
 800b71e:	2b01      	cmp	r3, #1
 800b720:	d11c      	bne.n	800b75c <HAL_SPI_TransmitReceive+0x21c>
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	2246      	movs	r2, #70	; 0x46
 800b726:	5a9b      	ldrh	r3, [r3, r2]
 800b728:	b29b      	uxth	r3, r3
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d016      	beq.n	800b75c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	68da      	ldr	r2, [r3, #12]
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b738:	b292      	uxth	r2, r2
 800b73a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b740:	1c9a      	adds	r2, r3, #2
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	2246      	movs	r2, #70	; 0x46
 800b74a:	5a9b      	ldrh	r3, [r3, r2]
 800b74c:	b29b      	uxth	r3, r3
 800b74e:	3b01      	subs	r3, #1
 800b750:	b299      	uxth	r1, r3
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	2246      	movs	r2, #70	; 0x46
 800b756:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b758:	2301      	movs	r3, #1
 800b75a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b75c:	f7fe f9c8 	bl	8009af0 <HAL_GetTick>
 800b760:	0002      	movs	r2, r0
 800b762:	69fb      	ldr	r3, [r7, #28]
 800b764:	1ad3      	subs	r3, r2, r3
 800b766:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b768:	429a      	cmp	r2, r3
 800b76a:	d807      	bhi.n	800b77c <HAL_SPI_TransmitReceive+0x23c>
 800b76c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b76e:	3301      	adds	r3, #1
 800b770:	d004      	beq.n	800b77c <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 800b772:	2323      	movs	r3, #35	; 0x23
 800b774:	18fb      	adds	r3, r7, r3
 800b776:	2203      	movs	r2, #3
 800b778:	701a      	strb	r2, [r3, #0]
        goto error;
 800b77a:	e0a2      	b.n	800b8c2 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b780:	b29b      	uxth	r3, r3
 800b782:	2b00      	cmp	r3, #0
 800b784:	d1a3      	bne.n	800b6ce <HAL_SPI_TransmitReceive+0x18e>
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	2246      	movs	r2, #70	; 0x46
 800b78a:	5a9b      	ldrh	r3, [r3, r2]
 800b78c:	b29b      	uxth	r3, r3
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d19d      	bne.n	800b6ce <HAL_SPI_TransmitReceive+0x18e>
 800b792:	e085      	b.n	800b8a0 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	685b      	ldr	r3, [r3, #4]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d005      	beq.n	800b7a8 <HAL_SPI_TransmitReceive+0x268>
 800b79c:	2312      	movs	r3, #18
 800b79e:	18fb      	adds	r3, r7, r3
 800b7a0:	881b      	ldrh	r3, [r3, #0]
 800b7a2:	2b01      	cmp	r3, #1
 800b7a4:	d000      	beq.n	800b7a8 <HAL_SPI_TransmitReceive+0x268>
 800b7a6:	e070      	b.n	800b88a <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	330c      	adds	r3, #12
 800b7b2:	7812      	ldrb	r2, [r2, #0]
 800b7b4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7ba:	1c5a      	adds	r2, r3, #1
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b7c4:	b29b      	uxth	r3, r3
 800b7c6:	3b01      	subs	r3, #1
 800b7c8:	b29a      	uxth	r2, r3
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b7ce:	e05c      	b.n	800b88a <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	689b      	ldr	r3, [r3, #8]
 800b7d6:	2202      	movs	r2, #2
 800b7d8:	4013      	ands	r3, r2
 800b7da:	2b02      	cmp	r3, #2
 800b7dc:	d11c      	bne.n	800b818 <HAL_SPI_TransmitReceive+0x2d8>
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b7e2:	b29b      	uxth	r3, r3
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d017      	beq.n	800b818 <HAL_SPI_TransmitReceive+0x2d8>
 800b7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ea:	2b01      	cmp	r3, #1
 800b7ec:	d114      	bne.n	800b818 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	330c      	adds	r3, #12
 800b7f8:	7812      	ldrb	r2, [r2, #0]
 800b7fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b800:	1c5a      	adds	r2, r3, #1
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b80a:	b29b      	uxth	r3, r3
 800b80c:	3b01      	subs	r3, #1
 800b80e:	b29a      	uxth	r2, r3
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b814:	2300      	movs	r3, #0
 800b816:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	689b      	ldr	r3, [r3, #8]
 800b81e:	2201      	movs	r2, #1
 800b820:	4013      	ands	r3, r2
 800b822:	2b01      	cmp	r3, #1
 800b824:	d11e      	bne.n	800b864 <HAL_SPI_TransmitReceive+0x324>
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	2246      	movs	r2, #70	; 0x46
 800b82a:	5a9b      	ldrh	r3, [r3, r2]
 800b82c:	b29b      	uxth	r3, r3
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d018      	beq.n	800b864 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	330c      	adds	r3, #12
 800b838:	001a      	movs	r2, r3
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b83e:	7812      	ldrb	r2, [r2, #0]
 800b840:	b2d2      	uxtb	r2, r2
 800b842:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b848:	1c5a      	adds	r2, r3, #1
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	2246      	movs	r2, #70	; 0x46
 800b852:	5a9b      	ldrh	r3, [r3, r2]
 800b854:	b29b      	uxth	r3, r3
 800b856:	3b01      	subs	r3, #1
 800b858:	b299      	uxth	r1, r3
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	2246      	movs	r2, #70	; 0x46
 800b85e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b860:	2301      	movs	r3, #1
 800b862:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b864:	f7fe f944 	bl	8009af0 <HAL_GetTick>
 800b868:	0002      	movs	r2, r0
 800b86a:	69fb      	ldr	r3, [r7, #28]
 800b86c:	1ad3      	subs	r3, r2, r3
 800b86e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b870:	429a      	cmp	r2, r3
 800b872:	d802      	bhi.n	800b87a <HAL_SPI_TransmitReceive+0x33a>
 800b874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b876:	3301      	adds	r3, #1
 800b878:	d102      	bne.n	800b880 <HAL_SPI_TransmitReceive+0x340>
 800b87a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d104      	bne.n	800b88a <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 800b880:	2323      	movs	r3, #35	; 0x23
 800b882:	18fb      	adds	r3, r7, r3
 800b884:	2203      	movs	r2, #3
 800b886:	701a      	strb	r2, [r3, #0]
        goto error;
 800b888:	e01b      	b.n	800b8c2 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b88e:	b29b      	uxth	r3, r3
 800b890:	2b00      	cmp	r3, #0
 800b892:	d19d      	bne.n	800b7d0 <HAL_SPI_TransmitReceive+0x290>
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	2246      	movs	r2, #70	; 0x46
 800b898:	5a9b      	ldrh	r3, [r3, r2]
 800b89a:	b29b      	uxth	r3, r3
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d197      	bne.n	800b7d0 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b8a0:	69fa      	ldr	r2, [r7, #28]
 800b8a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	0018      	movs	r0, r3
 800b8a8:	f000 fac6 	bl	800be38 <SPI_EndRxTxTransaction>
 800b8ac:	1e03      	subs	r3, r0, #0
 800b8ae:	d007      	beq.n	800b8c0 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 800b8b0:	2323      	movs	r3, #35	; 0x23
 800b8b2:	18fb      	adds	r3, r7, r3
 800b8b4:	2201      	movs	r2, #1
 800b8b6:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	2220      	movs	r2, #32
 800b8bc:	661a      	str	r2, [r3, #96]	; 0x60
 800b8be:	e000      	b.n	800b8c2 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 800b8c0:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	225d      	movs	r2, #93	; 0x5d
 800b8c6:	2101      	movs	r1, #1
 800b8c8:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	225c      	movs	r2, #92	; 0x5c
 800b8ce:	2100      	movs	r1, #0
 800b8d0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800b8d2:	2323      	movs	r3, #35	; 0x23
 800b8d4:	18fb      	adds	r3, r7, r3
 800b8d6:	781b      	ldrb	r3, [r3, #0]
}
 800b8d8:	0018      	movs	r0, r3
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	b00a      	add	sp, #40	; 0x28
 800b8de:	bd80      	pop	{r7, pc}
 800b8e0:	ffffefff 	.word	0xffffefff

0800b8e4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b088      	sub	sp, #32
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	685b      	ldr	r3, [r3, #4]
 800b8f2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	689b      	ldr	r3, [r3, #8]
 800b8fa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800b8fc:	69bb      	ldr	r3, [r7, #24]
 800b8fe:	099b      	lsrs	r3, r3, #6
 800b900:	001a      	movs	r2, r3
 800b902:	2301      	movs	r3, #1
 800b904:	4013      	ands	r3, r2
 800b906:	d10f      	bne.n	800b928 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800b908:	69bb      	ldr	r3, [r7, #24]
 800b90a:	2201      	movs	r2, #1
 800b90c:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800b90e:	d00b      	beq.n	800b928 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800b910:	69fb      	ldr	r3, [r7, #28]
 800b912:	099b      	lsrs	r3, r3, #6
 800b914:	001a      	movs	r2, r3
 800b916:	2301      	movs	r3, #1
 800b918:	4013      	ands	r3, r2
 800b91a:	d005      	beq.n	800b928 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b920:	687a      	ldr	r2, [r7, #4]
 800b922:	0010      	movs	r0, r2
 800b924:	4798      	blx	r3
    return;
 800b926:	e0d5      	b.n	800bad4 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800b928:	69bb      	ldr	r3, [r7, #24]
 800b92a:	085b      	lsrs	r3, r3, #1
 800b92c:	001a      	movs	r2, r3
 800b92e:	2301      	movs	r3, #1
 800b930:	4013      	ands	r3, r2
 800b932:	d00b      	beq.n	800b94c <HAL_SPI_IRQHandler+0x68>
 800b934:	69fb      	ldr	r3, [r7, #28]
 800b936:	09db      	lsrs	r3, r3, #7
 800b938:	001a      	movs	r2, r3
 800b93a:	2301      	movs	r3, #1
 800b93c:	4013      	ands	r3, r2
 800b93e:	d005      	beq.n	800b94c <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b944:	687a      	ldr	r2, [r7, #4]
 800b946:	0010      	movs	r0, r2
 800b948:	4798      	blx	r3
    return;
 800b94a:	e0c3      	b.n	800bad4 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800b94c:	69bb      	ldr	r3, [r7, #24]
 800b94e:	095b      	lsrs	r3, r3, #5
 800b950:	001a      	movs	r2, r3
 800b952:	2301      	movs	r3, #1
 800b954:	4013      	ands	r3, r2
 800b956:	d10c      	bne.n	800b972 <HAL_SPI_IRQHandler+0x8e>
 800b958:	69bb      	ldr	r3, [r7, #24]
 800b95a:	099b      	lsrs	r3, r3, #6
 800b95c:	001a      	movs	r2, r3
 800b95e:	2301      	movs	r3, #1
 800b960:	4013      	ands	r3, r2
 800b962:	d106      	bne.n	800b972 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800b964:	69bb      	ldr	r3, [r7, #24]
 800b966:	0a1b      	lsrs	r3, r3, #8
 800b968:	001a      	movs	r2, r3
 800b96a:	2301      	movs	r3, #1
 800b96c:	4013      	ands	r3, r2
 800b96e:	d100      	bne.n	800b972 <HAL_SPI_IRQHandler+0x8e>
 800b970:	e0b0      	b.n	800bad4 <HAL_SPI_IRQHandler+0x1f0>
 800b972:	69fb      	ldr	r3, [r7, #28]
 800b974:	095b      	lsrs	r3, r3, #5
 800b976:	001a      	movs	r2, r3
 800b978:	2301      	movs	r3, #1
 800b97a:	4013      	ands	r3, r2
 800b97c:	d100      	bne.n	800b980 <HAL_SPI_IRQHandler+0x9c>
 800b97e:	e0a9      	b.n	800bad4 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800b980:	69bb      	ldr	r3, [r7, #24]
 800b982:	099b      	lsrs	r3, r3, #6
 800b984:	001a      	movs	r2, r3
 800b986:	2301      	movs	r3, #1
 800b988:	4013      	ands	r3, r2
 800b98a:	d023      	beq.n	800b9d4 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	225d      	movs	r2, #93	; 0x5d
 800b990:	5c9b      	ldrb	r3, [r3, r2]
 800b992:	b2db      	uxtb	r3, r3
 800b994:	2b03      	cmp	r3, #3
 800b996:	d011      	beq.n	800b9bc <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b99c:	2204      	movs	r2, #4
 800b99e:	431a      	orrs	r2, r3
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	617b      	str	r3, [r7, #20]
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	68db      	ldr	r3, [r3, #12]
 800b9ae:	617b      	str	r3, [r7, #20]
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	689b      	ldr	r3, [r3, #8]
 800b9b6:	617b      	str	r3, [r7, #20]
 800b9b8:	697b      	ldr	r3, [r7, #20]
 800b9ba:	e00b      	b.n	800b9d4 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b9bc:	2300      	movs	r3, #0
 800b9be:	613b      	str	r3, [r7, #16]
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	68db      	ldr	r3, [r3, #12]
 800b9c6:	613b      	str	r3, [r7, #16]
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	689b      	ldr	r3, [r3, #8]
 800b9ce:	613b      	str	r3, [r7, #16]
 800b9d0:	693b      	ldr	r3, [r7, #16]
        return;
 800b9d2:	e07f      	b.n	800bad4 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800b9d4:	69bb      	ldr	r3, [r7, #24]
 800b9d6:	095b      	lsrs	r3, r3, #5
 800b9d8:	001a      	movs	r2, r3
 800b9da:	2301      	movs	r3, #1
 800b9dc:	4013      	ands	r3, r2
 800b9de:	d014      	beq.n	800ba0a <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b9e4:	2201      	movs	r2, #1
 800b9e6:	431a      	orrs	r2, r3
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	60fb      	str	r3, [r7, #12]
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	689b      	ldr	r3, [r3, #8]
 800b9f6:	60fb      	str	r3, [r7, #12]
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	681a      	ldr	r2, [r3, #0]
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	2140      	movs	r1, #64	; 0x40
 800ba04:	438a      	bics	r2, r1
 800ba06:	601a      	str	r2, [r3, #0]
 800ba08:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800ba0a:	69bb      	ldr	r3, [r7, #24]
 800ba0c:	0a1b      	lsrs	r3, r3, #8
 800ba0e:	001a      	movs	r2, r3
 800ba10:	2301      	movs	r3, #1
 800ba12:	4013      	ands	r3, r2
 800ba14:	d00c      	beq.n	800ba30 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ba1a:	2208      	movs	r2, #8
 800ba1c:	431a      	orrs	r2, r3
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ba22:	2300      	movs	r3, #0
 800ba24:	60bb      	str	r3, [r7, #8]
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	689b      	ldr	r3, [r3, #8]
 800ba2c:	60bb      	str	r3, [r7, #8]
 800ba2e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d04c      	beq.n	800bad2 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	685a      	ldr	r2, [r3, #4]
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	21e0      	movs	r1, #224	; 0xe0
 800ba44:	438a      	bics	r2, r1
 800ba46:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	225d      	movs	r2, #93	; 0x5d
 800ba4c:	2101      	movs	r1, #1
 800ba4e:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800ba50:	69fb      	ldr	r3, [r7, #28]
 800ba52:	2202      	movs	r2, #2
 800ba54:	4013      	ands	r3, r2
 800ba56:	d103      	bne.n	800ba60 <HAL_SPI_IRQHandler+0x17c>
 800ba58:	69fb      	ldr	r3, [r7, #28]
 800ba5a:	2201      	movs	r2, #1
 800ba5c:	4013      	ands	r3, r2
 800ba5e:	d032      	beq.n	800bac6 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	685a      	ldr	r2, [r3, #4]
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	2103      	movs	r1, #3
 800ba6c:	438a      	bics	r2, r1
 800ba6e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d010      	beq.n	800ba9a <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba7c:	4a17      	ldr	r2, [pc, #92]	; (800badc <HAL_SPI_IRQHandler+0x1f8>)
 800ba7e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba84:	0018      	movs	r0, r3
 800ba86:	f7fe f9a1 	bl	8009dcc <HAL_DMA_Abort_IT>
 800ba8a:	1e03      	subs	r3, r0, #0
 800ba8c:	d005      	beq.n	800ba9a <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ba92:	2240      	movs	r2, #64	; 0x40
 800ba94:	431a      	orrs	r2, r3
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d016      	beq.n	800bad0 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800baa6:	4a0d      	ldr	r2, [pc, #52]	; (800badc <HAL_SPI_IRQHandler+0x1f8>)
 800baa8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800baae:	0018      	movs	r0, r3
 800bab0:	f7fe f98c 	bl	8009dcc <HAL_DMA_Abort_IT>
 800bab4:	1e03      	subs	r3, r0, #0
 800bab6:	d00b      	beq.n	800bad0 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800babc:	2240      	movs	r2, #64	; 0x40
 800babe:	431a      	orrs	r2, r3
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800bac4:	e004      	b.n	800bad0 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	0018      	movs	r0, r3
 800baca:	f000 f809 	bl	800bae0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800bace:	e000      	b.n	800bad2 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 800bad0:	46c0      	nop			; (mov r8, r8)
    return;
 800bad2:	46c0      	nop			; (mov r8, r8)
  }
}
 800bad4:	46bd      	mov	sp, r7
 800bad6:	b008      	add	sp, #32
 800bad8:	bd80      	pop	{r7, pc}
 800bada:	46c0      	nop			; (mov r8, r8)
 800badc:	0800baf1 	.word	0x0800baf1

0800bae0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b082      	sub	sp, #8
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800bae8:	46c0      	nop			; (mov r8, r8)
 800baea:	46bd      	mov	sp, r7
 800baec:	b002      	add	sp, #8
 800baee:	bd80      	pop	{r7, pc}

0800baf0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b084      	sub	sp, #16
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bafc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	2246      	movs	r2, #70	; 0x46
 800bb02:	2100      	movs	r1, #0
 800bb04:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	2200      	movs	r2, #0
 800bb0a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	0018      	movs	r0, r3
 800bb10:	f7ff ffe6 	bl	800bae0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800bb14:	46c0      	nop			; (mov r8, r8)
 800bb16:	46bd      	mov	sp, r7
 800bb18:	b004      	add	sp, #16
 800bb1a:	bd80      	pop	{r7, pc}

0800bb1c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b088      	sub	sp, #32
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	60f8      	str	r0, [r7, #12]
 800bb24:	60b9      	str	r1, [r7, #8]
 800bb26:	603b      	str	r3, [r7, #0]
 800bb28:	1dfb      	adds	r3, r7, #7
 800bb2a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800bb2c:	f7fd ffe0 	bl	8009af0 <HAL_GetTick>
 800bb30:	0002      	movs	r2, r0
 800bb32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb34:	1a9b      	subs	r3, r3, r2
 800bb36:	683a      	ldr	r2, [r7, #0]
 800bb38:	18d3      	adds	r3, r2, r3
 800bb3a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800bb3c:	f7fd ffd8 	bl	8009af0 <HAL_GetTick>
 800bb40:	0003      	movs	r3, r0
 800bb42:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800bb44:	4b3a      	ldr	r3, [pc, #232]	; (800bc30 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	015b      	lsls	r3, r3, #5
 800bb4a:	0d1b      	lsrs	r3, r3, #20
 800bb4c:	69fa      	ldr	r2, [r7, #28]
 800bb4e:	4353      	muls	r3, r2
 800bb50:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bb52:	e058      	b.n	800bc06 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	3301      	adds	r3, #1
 800bb58:	d055      	beq.n	800bc06 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bb5a:	f7fd ffc9 	bl	8009af0 <HAL_GetTick>
 800bb5e:	0002      	movs	r2, r0
 800bb60:	69bb      	ldr	r3, [r7, #24]
 800bb62:	1ad3      	subs	r3, r2, r3
 800bb64:	69fa      	ldr	r2, [r7, #28]
 800bb66:	429a      	cmp	r2, r3
 800bb68:	d902      	bls.n	800bb70 <SPI_WaitFlagStateUntilTimeout+0x54>
 800bb6a:	69fb      	ldr	r3, [r7, #28]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d142      	bne.n	800bbf6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	685a      	ldr	r2, [r3, #4]
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	21e0      	movs	r1, #224	; 0xe0
 800bb7c:	438a      	bics	r2, r1
 800bb7e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	685a      	ldr	r2, [r3, #4]
 800bb84:	2382      	movs	r3, #130	; 0x82
 800bb86:	005b      	lsls	r3, r3, #1
 800bb88:	429a      	cmp	r2, r3
 800bb8a:	d113      	bne.n	800bbb4 <SPI_WaitFlagStateUntilTimeout+0x98>
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	689a      	ldr	r2, [r3, #8]
 800bb90:	2380      	movs	r3, #128	; 0x80
 800bb92:	021b      	lsls	r3, r3, #8
 800bb94:	429a      	cmp	r2, r3
 800bb96:	d005      	beq.n	800bba4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	689a      	ldr	r2, [r3, #8]
 800bb9c:	2380      	movs	r3, #128	; 0x80
 800bb9e:	00db      	lsls	r3, r3, #3
 800bba0:	429a      	cmp	r2, r3
 800bba2:	d107      	bne.n	800bbb4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	681a      	ldr	r2, [r3, #0]
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	2140      	movs	r1, #64	; 0x40
 800bbb0:	438a      	bics	r2, r1
 800bbb2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bbb8:	2380      	movs	r3, #128	; 0x80
 800bbba:	019b      	lsls	r3, r3, #6
 800bbbc:	429a      	cmp	r2, r3
 800bbbe:	d110      	bne.n	800bbe2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	681a      	ldr	r2, [r3, #0]
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	491a      	ldr	r1, [pc, #104]	; (800bc34 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800bbcc:	400a      	ands	r2, r1
 800bbce:	601a      	str	r2, [r3, #0]
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	681a      	ldr	r2, [r3, #0]
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	2180      	movs	r1, #128	; 0x80
 800bbdc:	0189      	lsls	r1, r1, #6
 800bbde:	430a      	orrs	r2, r1
 800bbe0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	225d      	movs	r2, #93	; 0x5d
 800bbe6:	2101      	movs	r1, #1
 800bbe8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	225c      	movs	r2, #92	; 0x5c
 800bbee:	2100      	movs	r1, #0
 800bbf0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800bbf2:	2303      	movs	r3, #3
 800bbf4:	e017      	b.n	800bc26 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800bbf6:	697b      	ldr	r3, [r7, #20]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d101      	bne.n	800bc00 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800bc00:	697b      	ldr	r3, [r7, #20]
 800bc02:	3b01      	subs	r3, #1
 800bc04:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	689b      	ldr	r3, [r3, #8]
 800bc0c:	68ba      	ldr	r2, [r7, #8]
 800bc0e:	4013      	ands	r3, r2
 800bc10:	68ba      	ldr	r2, [r7, #8]
 800bc12:	1ad3      	subs	r3, r2, r3
 800bc14:	425a      	negs	r2, r3
 800bc16:	4153      	adcs	r3, r2
 800bc18:	b2db      	uxtb	r3, r3
 800bc1a:	001a      	movs	r2, r3
 800bc1c:	1dfb      	adds	r3, r7, #7
 800bc1e:	781b      	ldrb	r3, [r3, #0]
 800bc20:	429a      	cmp	r2, r3
 800bc22:	d197      	bne.n	800bb54 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800bc24:	2300      	movs	r3, #0
}
 800bc26:	0018      	movs	r0, r3
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	b008      	add	sp, #32
 800bc2c:	bd80      	pop	{r7, pc}
 800bc2e:	46c0      	nop			; (mov r8, r8)
 800bc30:	200000d8 	.word	0x200000d8
 800bc34:	ffffdfff 	.word	0xffffdfff

0800bc38 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b08a      	sub	sp, #40	; 0x28
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	60f8      	str	r0, [r7, #12]
 800bc40:	60b9      	str	r1, [r7, #8]
 800bc42:	607a      	str	r2, [r7, #4]
 800bc44:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800bc46:	2317      	movs	r3, #23
 800bc48:	18fb      	adds	r3, r7, r3
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800bc4e:	f7fd ff4f 	bl	8009af0 <HAL_GetTick>
 800bc52:	0002      	movs	r2, r0
 800bc54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc56:	1a9b      	subs	r3, r3, r2
 800bc58:	683a      	ldr	r2, [r7, #0]
 800bc5a:	18d3      	adds	r3, r2, r3
 800bc5c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800bc5e:	f7fd ff47 	bl	8009af0 <HAL_GetTick>
 800bc62:	0003      	movs	r3, r0
 800bc64:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	330c      	adds	r3, #12
 800bc6c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800bc6e:	4b41      	ldr	r3, [pc, #260]	; (800bd74 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800bc70:	681a      	ldr	r2, [r3, #0]
 800bc72:	0013      	movs	r3, r2
 800bc74:	009b      	lsls	r3, r3, #2
 800bc76:	189b      	adds	r3, r3, r2
 800bc78:	00da      	lsls	r2, r3, #3
 800bc7a:	1ad3      	subs	r3, r2, r3
 800bc7c:	0d1b      	lsrs	r3, r3, #20
 800bc7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc80:	4353      	muls	r3, r2
 800bc82:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800bc84:	e068      	b.n	800bd58 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800bc86:	68ba      	ldr	r2, [r7, #8]
 800bc88:	23c0      	movs	r3, #192	; 0xc0
 800bc8a:	00db      	lsls	r3, r3, #3
 800bc8c:	429a      	cmp	r2, r3
 800bc8e:	d10a      	bne.n	800bca6 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d107      	bne.n	800bca6 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800bc96:	69fb      	ldr	r3, [r7, #28]
 800bc98:	781b      	ldrb	r3, [r3, #0]
 800bc9a:	b2da      	uxtb	r2, r3
 800bc9c:	2117      	movs	r1, #23
 800bc9e:	187b      	adds	r3, r7, r1
 800bca0:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800bca2:	187b      	adds	r3, r7, r1
 800bca4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800bca6:	683b      	ldr	r3, [r7, #0]
 800bca8:	3301      	adds	r3, #1
 800bcaa:	d055      	beq.n	800bd58 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bcac:	f7fd ff20 	bl	8009af0 <HAL_GetTick>
 800bcb0:	0002      	movs	r2, r0
 800bcb2:	6a3b      	ldr	r3, [r7, #32]
 800bcb4:	1ad3      	subs	r3, r2, r3
 800bcb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcb8:	429a      	cmp	r2, r3
 800bcba:	d902      	bls.n	800bcc2 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800bcbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d142      	bne.n	800bd48 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	685a      	ldr	r2, [r3, #4]
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	21e0      	movs	r1, #224	; 0xe0
 800bcce:	438a      	bics	r2, r1
 800bcd0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	685a      	ldr	r2, [r3, #4]
 800bcd6:	2382      	movs	r3, #130	; 0x82
 800bcd8:	005b      	lsls	r3, r3, #1
 800bcda:	429a      	cmp	r2, r3
 800bcdc:	d113      	bne.n	800bd06 <SPI_WaitFifoStateUntilTimeout+0xce>
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	689a      	ldr	r2, [r3, #8]
 800bce2:	2380      	movs	r3, #128	; 0x80
 800bce4:	021b      	lsls	r3, r3, #8
 800bce6:	429a      	cmp	r2, r3
 800bce8:	d005      	beq.n	800bcf6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	689a      	ldr	r2, [r3, #8]
 800bcee:	2380      	movs	r3, #128	; 0x80
 800bcf0:	00db      	lsls	r3, r3, #3
 800bcf2:	429a      	cmp	r2, r3
 800bcf4:	d107      	bne.n	800bd06 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	681a      	ldr	r2, [r3, #0]
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	2140      	movs	r1, #64	; 0x40
 800bd02:	438a      	bics	r2, r1
 800bd04:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bd0a:	2380      	movs	r3, #128	; 0x80
 800bd0c:	019b      	lsls	r3, r3, #6
 800bd0e:	429a      	cmp	r2, r3
 800bd10:	d110      	bne.n	800bd34 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	681a      	ldr	r2, [r3, #0]
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	4916      	ldr	r1, [pc, #88]	; (800bd78 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800bd1e:	400a      	ands	r2, r1
 800bd20:	601a      	str	r2, [r3, #0]
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	681a      	ldr	r2, [r3, #0]
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	2180      	movs	r1, #128	; 0x80
 800bd2e:	0189      	lsls	r1, r1, #6
 800bd30:	430a      	orrs	r2, r1
 800bd32:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	225d      	movs	r2, #93	; 0x5d
 800bd38:	2101      	movs	r1, #1
 800bd3a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	225c      	movs	r2, #92	; 0x5c
 800bd40:	2100      	movs	r1, #0
 800bd42:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800bd44:	2303      	movs	r3, #3
 800bd46:	e010      	b.n	800bd6a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800bd48:	69bb      	ldr	r3, [r7, #24]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d101      	bne.n	800bd52 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800bd4e:	2300      	movs	r3, #0
 800bd50:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800bd52:	69bb      	ldr	r3, [r7, #24]
 800bd54:	3b01      	subs	r3, #1
 800bd56:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	689b      	ldr	r3, [r3, #8]
 800bd5e:	68ba      	ldr	r2, [r7, #8]
 800bd60:	4013      	ands	r3, r2
 800bd62:	687a      	ldr	r2, [r7, #4]
 800bd64:	429a      	cmp	r2, r3
 800bd66:	d18e      	bne.n	800bc86 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800bd68:	2300      	movs	r3, #0
}
 800bd6a:	0018      	movs	r0, r3
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	b00a      	add	sp, #40	; 0x28
 800bd70:	bd80      	pop	{r7, pc}
 800bd72:	46c0      	nop			; (mov r8, r8)
 800bd74:	200000d8 	.word	0x200000d8
 800bd78:	ffffdfff 	.word	0xffffdfff

0800bd7c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b086      	sub	sp, #24
 800bd80:	af02      	add	r7, sp, #8
 800bd82:	60f8      	str	r0, [r7, #12]
 800bd84:	60b9      	str	r1, [r7, #8]
 800bd86:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	685a      	ldr	r2, [r3, #4]
 800bd8c:	2382      	movs	r3, #130	; 0x82
 800bd8e:	005b      	lsls	r3, r3, #1
 800bd90:	429a      	cmp	r2, r3
 800bd92:	d113      	bne.n	800bdbc <SPI_EndRxTransaction+0x40>
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	689a      	ldr	r2, [r3, #8]
 800bd98:	2380      	movs	r3, #128	; 0x80
 800bd9a:	021b      	lsls	r3, r3, #8
 800bd9c:	429a      	cmp	r2, r3
 800bd9e:	d005      	beq.n	800bdac <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	689a      	ldr	r2, [r3, #8]
 800bda4:	2380      	movs	r3, #128	; 0x80
 800bda6:	00db      	lsls	r3, r3, #3
 800bda8:	429a      	cmp	r2, r3
 800bdaa:	d107      	bne.n	800bdbc <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	681a      	ldr	r2, [r3, #0]
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	2140      	movs	r1, #64	; 0x40
 800bdb8:	438a      	bics	r2, r1
 800bdba:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bdbc:	68ba      	ldr	r2, [r7, #8]
 800bdbe:	68f8      	ldr	r0, [r7, #12]
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	9300      	str	r3, [sp, #0]
 800bdc4:	0013      	movs	r3, r2
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	2180      	movs	r1, #128	; 0x80
 800bdca:	f7ff fea7 	bl	800bb1c <SPI_WaitFlagStateUntilTimeout>
 800bdce:	1e03      	subs	r3, r0, #0
 800bdd0:	d007      	beq.n	800bde2 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bdd6:	2220      	movs	r2, #32
 800bdd8:	431a      	orrs	r2, r3
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800bdde:	2303      	movs	r3, #3
 800bde0:	e026      	b.n	800be30 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	685a      	ldr	r2, [r3, #4]
 800bde6:	2382      	movs	r3, #130	; 0x82
 800bde8:	005b      	lsls	r3, r3, #1
 800bdea:	429a      	cmp	r2, r3
 800bdec:	d11f      	bne.n	800be2e <SPI_EndRxTransaction+0xb2>
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	689a      	ldr	r2, [r3, #8]
 800bdf2:	2380      	movs	r3, #128	; 0x80
 800bdf4:	021b      	lsls	r3, r3, #8
 800bdf6:	429a      	cmp	r2, r3
 800bdf8:	d005      	beq.n	800be06 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	689a      	ldr	r2, [r3, #8]
 800bdfe:	2380      	movs	r3, #128	; 0x80
 800be00:	00db      	lsls	r3, r3, #3
 800be02:	429a      	cmp	r2, r3
 800be04:	d113      	bne.n	800be2e <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800be06:	68ba      	ldr	r2, [r7, #8]
 800be08:	23c0      	movs	r3, #192	; 0xc0
 800be0a:	00d9      	lsls	r1, r3, #3
 800be0c:	68f8      	ldr	r0, [r7, #12]
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	9300      	str	r3, [sp, #0]
 800be12:	0013      	movs	r3, r2
 800be14:	2200      	movs	r2, #0
 800be16:	f7ff ff0f 	bl	800bc38 <SPI_WaitFifoStateUntilTimeout>
 800be1a:	1e03      	subs	r3, r0, #0
 800be1c:	d007      	beq.n	800be2e <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be22:	2220      	movs	r2, #32
 800be24:	431a      	orrs	r2, r3
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800be2a:	2303      	movs	r3, #3
 800be2c:	e000      	b.n	800be30 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800be2e:	2300      	movs	r3, #0
}
 800be30:	0018      	movs	r0, r3
 800be32:	46bd      	mov	sp, r7
 800be34:	b004      	add	sp, #16
 800be36:	bd80      	pop	{r7, pc}

0800be38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b086      	sub	sp, #24
 800be3c:	af02      	add	r7, sp, #8
 800be3e:	60f8      	str	r0, [r7, #12]
 800be40:	60b9      	str	r1, [r7, #8]
 800be42:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800be44:	68ba      	ldr	r2, [r7, #8]
 800be46:	23c0      	movs	r3, #192	; 0xc0
 800be48:	0159      	lsls	r1, r3, #5
 800be4a:	68f8      	ldr	r0, [r7, #12]
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	9300      	str	r3, [sp, #0]
 800be50:	0013      	movs	r3, r2
 800be52:	2200      	movs	r2, #0
 800be54:	f7ff fef0 	bl	800bc38 <SPI_WaitFifoStateUntilTimeout>
 800be58:	1e03      	subs	r3, r0, #0
 800be5a:	d007      	beq.n	800be6c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be60:	2220      	movs	r2, #32
 800be62:	431a      	orrs	r2, r3
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800be68:	2303      	movs	r3, #3
 800be6a:	e027      	b.n	800bebc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800be6c:	68ba      	ldr	r2, [r7, #8]
 800be6e:	68f8      	ldr	r0, [r7, #12]
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	9300      	str	r3, [sp, #0]
 800be74:	0013      	movs	r3, r2
 800be76:	2200      	movs	r2, #0
 800be78:	2180      	movs	r1, #128	; 0x80
 800be7a:	f7ff fe4f 	bl	800bb1c <SPI_WaitFlagStateUntilTimeout>
 800be7e:	1e03      	subs	r3, r0, #0
 800be80:	d007      	beq.n	800be92 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be86:	2220      	movs	r2, #32
 800be88:	431a      	orrs	r2, r3
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800be8e:	2303      	movs	r3, #3
 800be90:	e014      	b.n	800bebc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800be92:	68ba      	ldr	r2, [r7, #8]
 800be94:	23c0      	movs	r3, #192	; 0xc0
 800be96:	00d9      	lsls	r1, r3, #3
 800be98:	68f8      	ldr	r0, [r7, #12]
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	9300      	str	r3, [sp, #0]
 800be9e:	0013      	movs	r3, r2
 800bea0:	2200      	movs	r2, #0
 800bea2:	f7ff fec9 	bl	800bc38 <SPI_WaitFifoStateUntilTimeout>
 800bea6:	1e03      	subs	r3, r0, #0
 800bea8:	d007      	beq.n	800beba <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800beae:	2220      	movs	r2, #32
 800beb0:	431a      	orrs	r2, r3
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800beb6:	2303      	movs	r3, #3
 800beb8:	e000      	b.n	800bebc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800beba:	2300      	movs	r3, #0
}
 800bebc:	0018      	movs	r0, r3
 800bebe:	46bd      	mov	sp, r7
 800bec0:	b004      	add	sp, #16
 800bec2:	bd80      	pop	{r7, pc}

0800bec4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b082      	sub	sp, #8
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d101      	bne.n	800bed6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bed2:	2301      	movs	r3, #1
 800bed4:	e04a      	b.n	800bf6c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	223d      	movs	r2, #61	; 0x3d
 800beda:	5c9b      	ldrb	r3, [r3, r2]
 800bedc:	b2db      	uxtb	r3, r3
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d107      	bne.n	800bef2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	223c      	movs	r2, #60	; 0x3c
 800bee6:	2100      	movs	r1, #0
 800bee8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	0018      	movs	r0, r3
 800beee:	f7fc fcf7 	bl	80088e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	223d      	movs	r2, #61	; 0x3d
 800bef6:	2102      	movs	r1, #2
 800bef8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681a      	ldr	r2, [r3, #0]
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	3304      	adds	r3, #4
 800bf02:	0019      	movs	r1, r3
 800bf04:	0010      	movs	r0, r2
 800bf06:	f000 fd0f 	bl	800c928 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	2248      	movs	r2, #72	; 0x48
 800bf0e:	2101      	movs	r1, #1
 800bf10:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	223e      	movs	r2, #62	; 0x3e
 800bf16:	2101      	movs	r1, #1
 800bf18:	5499      	strb	r1, [r3, r2]
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	223f      	movs	r2, #63	; 0x3f
 800bf1e:	2101      	movs	r1, #1
 800bf20:	5499      	strb	r1, [r3, r2]
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	2240      	movs	r2, #64	; 0x40
 800bf26:	2101      	movs	r1, #1
 800bf28:	5499      	strb	r1, [r3, r2]
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2241      	movs	r2, #65	; 0x41
 800bf2e:	2101      	movs	r1, #1
 800bf30:	5499      	strb	r1, [r3, r2]
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	2242      	movs	r2, #66	; 0x42
 800bf36:	2101      	movs	r1, #1
 800bf38:	5499      	strb	r1, [r3, r2]
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	2243      	movs	r2, #67	; 0x43
 800bf3e:	2101      	movs	r1, #1
 800bf40:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	2244      	movs	r2, #68	; 0x44
 800bf46:	2101      	movs	r1, #1
 800bf48:	5499      	strb	r1, [r3, r2]
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	2245      	movs	r2, #69	; 0x45
 800bf4e:	2101      	movs	r1, #1
 800bf50:	5499      	strb	r1, [r3, r2]
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	2246      	movs	r2, #70	; 0x46
 800bf56:	2101      	movs	r1, #1
 800bf58:	5499      	strb	r1, [r3, r2]
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	2247      	movs	r2, #71	; 0x47
 800bf5e:	2101      	movs	r1, #1
 800bf60:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	223d      	movs	r2, #61	; 0x3d
 800bf66:	2101      	movs	r1, #1
 800bf68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bf6a:	2300      	movs	r3, #0
}
 800bf6c:	0018      	movs	r0, r3
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	b002      	add	sp, #8
 800bf72:	bd80      	pop	{r7, pc}

0800bf74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b084      	sub	sp, #16
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	223d      	movs	r2, #61	; 0x3d
 800bf80:	5c9b      	ldrb	r3, [r3, r2]
 800bf82:	b2db      	uxtb	r3, r3
 800bf84:	2b01      	cmp	r3, #1
 800bf86:	d001      	beq.n	800bf8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bf88:	2301      	movs	r3, #1
 800bf8a:	e03c      	b.n	800c006 <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	223d      	movs	r2, #61	; 0x3d
 800bf90:	2102      	movs	r1, #2
 800bf92:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	68da      	ldr	r2, [r3, #12]
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	2101      	movs	r1, #1
 800bfa0:	430a      	orrs	r2, r1
 800bfa2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	4a19      	ldr	r2, [pc, #100]	; (800c010 <HAL_TIM_Base_Start_IT+0x9c>)
 800bfaa:	4293      	cmp	r3, r2
 800bfac:	d009      	beq.n	800bfc2 <HAL_TIM_Base_Start_IT+0x4e>
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	4a18      	ldr	r2, [pc, #96]	; (800c014 <HAL_TIM_Base_Start_IT+0xa0>)
 800bfb4:	4293      	cmp	r3, r2
 800bfb6:	d004      	beq.n	800bfc2 <HAL_TIM_Base_Start_IT+0x4e>
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	4a16      	ldr	r2, [pc, #88]	; (800c018 <HAL_TIM_Base_Start_IT+0xa4>)
 800bfbe:	4293      	cmp	r3, r2
 800bfc0:	d116      	bne.n	800bff0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	689b      	ldr	r3, [r3, #8]
 800bfc8:	4a14      	ldr	r2, [pc, #80]	; (800c01c <HAL_TIM_Base_Start_IT+0xa8>)
 800bfca:	4013      	ands	r3, r2
 800bfcc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	2b06      	cmp	r3, #6
 800bfd2:	d016      	beq.n	800c002 <HAL_TIM_Base_Start_IT+0x8e>
 800bfd4:	68fa      	ldr	r2, [r7, #12]
 800bfd6:	2380      	movs	r3, #128	; 0x80
 800bfd8:	025b      	lsls	r3, r3, #9
 800bfda:	429a      	cmp	r2, r3
 800bfdc:	d011      	beq.n	800c002 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	681a      	ldr	r2, [r3, #0]
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	2101      	movs	r1, #1
 800bfea:	430a      	orrs	r2, r1
 800bfec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bfee:	e008      	b.n	800c002 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	681a      	ldr	r2, [r3, #0]
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	2101      	movs	r1, #1
 800bffc:	430a      	orrs	r2, r1
 800bffe:	601a      	str	r2, [r3, #0]
 800c000:	e000      	b.n	800c004 <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c002:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800c004:	2300      	movs	r3, #0
}
 800c006:	0018      	movs	r0, r3
 800c008:	46bd      	mov	sp, r7
 800c00a:	b004      	add	sp, #16
 800c00c:	bd80      	pop	{r7, pc}
 800c00e:	46c0      	nop			; (mov r8, r8)
 800c010:	40012c00 	.word	0x40012c00
 800c014:	40000400 	.word	0x40000400
 800c018:	40014000 	.word	0x40014000
 800c01c:	00010007 	.word	0x00010007

0800c020 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b082      	sub	sp, #8
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	68da      	ldr	r2, [r3, #12]
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	2101      	movs	r1, #1
 800c034:	438a      	bics	r2, r1
 800c036:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	6a1b      	ldr	r3, [r3, #32]
 800c03e:	4a0d      	ldr	r2, [pc, #52]	; (800c074 <HAL_TIM_Base_Stop_IT+0x54>)
 800c040:	4013      	ands	r3, r2
 800c042:	d10d      	bne.n	800c060 <HAL_TIM_Base_Stop_IT+0x40>
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	6a1b      	ldr	r3, [r3, #32]
 800c04a:	4a0b      	ldr	r2, [pc, #44]	; (800c078 <HAL_TIM_Base_Stop_IT+0x58>)
 800c04c:	4013      	ands	r3, r2
 800c04e:	d107      	bne.n	800c060 <HAL_TIM_Base_Stop_IT+0x40>
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	681a      	ldr	r2, [r3, #0]
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	2101      	movs	r1, #1
 800c05c:	438a      	bics	r2, r1
 800c05e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	223d      	movs	r2, #61	; 0x3d
 800c064:	2101      	movs	r1, #1
 800c066:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800c068:	2300      	movs	r3, #0
}
 800c06a:	0018      	movs	r0, r3
 800c06c:	46bd      	mov	sp, r7
 800c06e:	b002      	add	sp, #8
 800c070:	bd80      	pop	{r7, pc}
 800c072:	46c0      	nop			; (mov r8, r8)
 800c074:	00001111 	.word	0x00001111
 800c078:	00000444 	.word	0x00000444

0800c07c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b082      	sub	sp, #8
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d101      	bne.n	800c08e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800c08a:	2301      	movs	r3, #1
 800c08c:	e04a      	b.n	800c124 <HAL_TIM_IC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	223d      	movs	r2, #61	; 0x3d
 800c092:	5c9b      	ldrb	r3, [r3, r2]
 800c094:	b2db      	uxtb	r3, r3
 800c096:	2b00      	cmp	r3, #0
 800c098:	d107      	bne.n	800c0aa <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	223c      	movs	r2, #60	; 0x3c
 800c09e:	2100      	movs	r1, #0
 800c0a0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	0018      	movs	r0, r3
 800c0a6:	f000 f841 	bl	800c12c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	223d      	movs	r2, #61	; 0x3d
 800c0ae:	2102      	movs	r1, #2
 800c0b0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681a      	ldr	r2, [r3, #0]
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	3304      	adds	r3, #4
 800c0ba:	0019      	movs	r1, r3
 800c0bc:	0010      	movs	r0, r2
 800c0be:	f000 fc33 	bl	800c928 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	2248      	movs	r2, #72	; 0x48
 800c0c6:	2101      	movs	r1, #1
 800c0c8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	223e      	movs	r2, #62	; 0x3e
 800c0ce:	2101      	movs	r1, #1
 800c0d0:	5499      	strb	r1, [r3, r2]
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	223f      	movs	r2, #63	; 0x3f
 800c0d6:	2101      	movs	r1, #1
 800c0d8:	5499      	strb	r1, [r3, r2]
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	2240      	movs	r2, #64	; 0x40
 800c0de:	2101      	movs	r1, #1
 800c0e0:	5499      	strb	r1, [r3, r2]
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	2241      	movs	r2, #65	; 0x41
 800c0e6:	2101      	movs	r1, #1
 800c0e8:	5499      	strb	r1, [r3, r2]
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	2242      	movs	r2, #66	; 0x42
 800c0ee:	2101      	movs	r1, #1
 800c0f0:	5499      	strb	r1, [r3, r2]
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	2243      	movs	r2, #67	; 0x43
 800c0f6:	2101      	movs	r1, #1
 800c0f8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	2244      	movs	r2, #68	; 0x44
 800c0fe:	2101      	movs	r1, #1
 800c100:	5499      	strb	r1, [r3, r2]
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2245      	movs	r2, #69	; 0x45
 800c106:	2101      	movs	r1, #1
 800c108:	5499      	strb	r1, [r3, r2]
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2246      	movs	r2, #70	; 0x46
 800c10e:	2101      	movs	r1, #1
 800c110:	5499      	strb	r1, [r3, r2]
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	2247      	movs	r2, #71	; 0x47
 800c116:	2101      	movs	r1, #1
 800c118:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	223d      	movs	r2, #61	; 0x3d
 800c11e:	2101      	movs	r1, #1
 800c120:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c122:	2300      	movs	r3, #0
}
 800c124:	0018      	movs	r0, r3
 800c126:	46bd      	mov	sp, r7
 800c128:	b002      	add	sp, #8
 800c12a:	bd80      	pop	{r7, pc}

0800c12c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b082      	sub	sp, #8
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800c134:	46c0      	nop			; (mov r8, r8)
 800c136:	46bd      	mov	sp, r7
 800c138:	b002      	add	sp, #8
 800c13a:	bd80      	pop	{r7, pc}

0800c13c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b084      	sub	sp, #16
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
 800c144:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c146:	230f      	movs	r3, #15
 800c148:	18fb      	adds	r3, r7, r3
 800c14a:	2200      	movs	r2, #0
 800c14c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d104      	bne.n	800c15e <HAL_TIM_IC_Start_IT+0x22>
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	223e      	movs	r2, #62	; 0x3e
 800c158:	5c9b      	ldrb	r3, [r3, r2]
 800c15a:	b2db      	uxtb	r3, r3
 800c15c:	e023      	b.n	800c1a6 <HAL_TIM_IC_Start_IT+0x6a>
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	2b04      	cmp	r3, #4
 800c162:	d104      	bne.n	800c16e <HAL_TIM_IC_Start_IT+0x32>
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	223f      	movs	r2, #63	; 0x3f
 800c168:	5c9b      	ldrb	r3, [r3, r2]
 800c16a:	b2db      	uxtb	r3, r3
 800c16c:	e01b      	b.n	800c1a6 <HAL_TIM_IC_Start_IT+0x6a>
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	2b08      	cmp	r3, #8
 800c172:	d104      	bne.n	800c17e <HAL_TIM_IC_Start_IT+0x42>
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2240      	movs	r2, #64	; 0x40
 800c178:	5c9b      	ldrb	r3, [r3, r2]
 800c17a:	b2db      	uxtb	r3, r3
 800c17c:	e013      	b.n	800c1a6 <HAL_TIM_IC_Start_IT+0x6a>
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	2b0c      	cmp	r3, #12
 800c182:	d104      	bne.n	800c18e <HAL_TIM_IC_Start_IT+0x52>
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2241      	movs	r2, #65	; 0x41
 800c188:	5c9b      	ldrb	r3, [r3, r2]
 800c18a:	b2db      	uxtb	r3, r3
 800c18c:	e00b      	b.n	800c1a6 <HAL_TIM_IC_Start_IT+0x6a>
 800c18e:	683b      	ldr	r3, [r7, #0]
 800c190:	2b10      	cmp	r3, #16
 800c192:	d104      	bne.n	800c19e <HAL_TIM_IC_Start_IT+0x62>
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2242      	movs	r2, #66	; 0x42
 800c198:	5c9b      	ldrb	r3, [r3, r2]
 800c19a:	b2db      	uxtb	r3, r3
 800c19c:	e003      	b.n	800c1a6 <HAL_TIM_IC_Start_IT+0x6a>
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2243      	movs	r2, #67	; 0x43
 800c1a2:	5c9b      	ldrb	r3, [r3, r2]
 800c1a4:	b2db      	uxtb	r3, r3
 800c1a6:	220e      	movs	r2, #14
 800c1a8:	18ba      	adds	r2, r7, r2
 800c1aa:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d104      	bne.n	800c1bc <HAL_TIM_IC_Start_IT+0x80>
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	2244      	movs	r2, #68	; 0x44
 800c1b6:	5c9b      	ldrb	r3, [r3, r2]
 800c1b8:	b2db      	uxtb	r3, r3
 800c1ba:	e013      	b.n	800c1e4 <HAL_TIM_IC_Start_IT+0xa8>
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	2b04      	cmp	r3, #4
 800c1c0:	d104      	bne.n	800c1cc <HAL_TIM_IC_Start_IT+0x90>
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	2245      	movs	r2, #69	; 0x45
 800c1c6:	5c9b      	ldrb	r3, [r3, r2]
 800c1c8:	b2db      	uxtb	r3, r3
 800c1ca:	e00b      	b.n	800c1e4 <HAL_TIM_IC_Start_IT+0xa8>
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	2b08      	cmp	r3, #8
 800c1d0:	d104      	bne.n	800c1dc <HAL_TIM_IC_Start_IT+0xa0>
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	2246      	movs	r2, #70	; 0x46
 800c1d6:	5c9b      	ldrb	r3, [r3, r2]
 800c1d8:	b2db      	uxtb	r3, r3
 800c1da:	e003      	b.n	800c1e4 <HAL_TIM_IC_Start_IT+0xa8>
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2247      	movs	r2, #71	; 0x47
 800c1e0:	5c9b      	ldrb	r3, [r3, r2]
 800c1e2:	b2db      	uxtb	r3, r3
 800c1e4:	210d      	movs	r1, #13
 800c1e6:	187a      	adds	r2, r7, r1
 800c1e8:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800c1ea:	230e      	movs	r3, #14
 800c1ec:	18fb      	adds	r3, r7, r3
 800c1ee:	781b      	ldrb	r3, [r3, #0]
 800c1f0:	2b01      	cmp	r3, #1
 800c1f2:	d103      	bne.n	800c1fc <HAL_TIM_IC_Start_IT+0xc0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800c1f4:	187b      	adds	r3, r7, r1
 800c1f6:	781b      	ldrb	r3, [r3, #0]
 800c1f8:	2b01      	cmp	r3, #1
 800c1fa:	d001      	beq.n	800c200 <HAL_TIM_IC_Start_IT+0xc4>
  {
    return HAL_ERROR;
 800c1fc:	2301      	movs	r3, #1
 800c1fe:	e0c2      	b.n	800c386 <HAL_TIM_IC_Start_IT+0x24a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c200:	683b      	ldr	r3, [r7, #0]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d104      	bne.n	800c210 <HAL_TIM_IC_Start_IT+0xd4>
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	223e      	movs	r2, #62	; 0x3e
 800c20a:	2102      	movs	r1, #2
 800c20c:	5499      	strb	r1, [r3, r2]
 800c20e:	e023      	b.n	800c258 <HAL_TIM_IC_Start_IT+0x11c>
 800c210:	683b      	ldr	r3, [r7, #0]
 800c212:	2b04      	cmp	r3, #4
 800c214:	d104      	bne.n	800c220 <HAL_TIM_IC_Start_IT+0xe4>
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	223f      	movs	r2, #63	; 0x3f
 800c21a:	2102      	movs	r1, #2
 800c21c:	5499      	strb	r1, [r3, r2]
 800c21e:	e01b      	b.n	800c258 <HAL_TIM_IC_Start_IT+0x11c>
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	2b08      	cmp	r3, #8
 800c224:	d104      	bne.n	800c230 <HAL_TIM_IC_Start_IT+0xf4>
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	2240      	movs	r2, #64	; 0x40
 800c22a:	2102      	movs	r1, #2
 800c22c:	5499      	strb	r1, [r3, r2]
 800c22e:	e013      	b.n	800c258 <HAL_TIM_IC_Start_IT+0x11c>
 800c230:	683b      	ldr	r3, [r7, #0]
 800c232:	2b0c      	cmp	r3, #12
 800c234:	d104      	bne.n	800c240 <HAL_TIM_IC_Start_IT+0x104>
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	2241      	movs	r2, #65	; 0x41
 800c23a:	2102      	movs	r1, #2
 800c23c:	5499      	strb	r1, [r3, r2]
 800c23e:	e00b      	b.n	800c258 <HAL_TIM_IC_Start_IT+0x11c>
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	2b10      	cmp	r3, #16
 800c244:	d104      	bne.n	800c250 <HAL_TIM_IC_Start_IT+0x114>
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	2242      	movs	r2, #66	; 0x42
 800c24a:	2102      	movs	r1, #2
 800c24c:	5499      	strb	r1, [r3, r2]
 800c24e:	e003      	b.n	800c258 <HAL_TIM_IC_Start_IT+0x11c>
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2243      	movs	r2, #67	; 0x43
 800c254:	2102      	movs	r1, #2
 800c256:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d104      	bne.n	800c268 <HAL_TIM_IC_Start_IT+0x12c>
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2244      	movs	r2, #68	; 0x44
 800c262:	2102      	movs	r1, #2
 800c264:	5499      	strb	r1, [r3, r2]
 800c266:	e013      	b.n	800c290 <HAL_TIM_IC_Start_IT+0x154>
 800c268:	683b      	ldr	r3, [r7, #0]
 800c26a:	2b04      	cmp	r3, #4
 800c26c:	d104      	bne.n	800c278 <HAL_TIM_IC_Start_IT+0x13c>
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2245      	movs	r2, #69	; 0x45
 800c272:	2102      	movs	r1, #2
 800c274:	5499      	strb	r1, [r3, r2]
 800c276:	e00b      	b.n	800c290 <HAL_TIM_IC_Start_IT+0x154>
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	2b08      	cmp	r3, #8
 800c27c:	d104      	bne.n	800c288 <HAL_TIM_IC_Start_IT+0x14c>
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	2246      	movs	r2, #70	; 0x46
 800c282:	2102      	movs	r1, #2
 800c284:	5499      	strb	r1, [r3, r2]
 800c286:	e003      	b.n	800c290 <HAL_TIM_IC_Start_IT+0x154>
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2247      	movs	r2, #71	; 0x47
 800c28c:	2102      	movs	r1, #2
 800c28e:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800c290:	683b      	ldr	r3, [r7, #0]
 800c292:	2b0c      	cmp	r3, #12
 800c294:	d02a      	beq.n	800c2ec <HAL_TIM_IC_Start_IT+0x1b0>
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	2b0c      	cmp	r3, #12
 800c29a:	d830      	bhi.n	800c2fe <HAL_TIM_IC_Start_IT+0x1c2>
 800c29c:	683b      	ldr	r3, [r7, #0]
 800c29e:	2b08      	cmp	r3, #8
 800c2a0:	d01b      	beq.n	800c2da <HAL_TIM_IC_Start_IT+0x19e>
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	2b08      	cmp	r3, #8
 800c2a6:	d82a      	bhi.n	800c2fe <HAL_TIM_IC_Start_IT+0x1c2>
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d003      	beq.n	800c2b6 <HAL_TIM_IC_Start_IT+0x17a>
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	2b04      	cmp	r3, #4
 800c2b2:	d009      	beq.n	800c2c8 <HAL_TIM_IC_Start_IT+0x18c>
 800c2b4:	e023      	b.n	800c2fe <HAL_TIM_IC_Start_IT+0x1c2>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	68da      	ldr	r2, [r3, #12]
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	2102      	movs	r1, #2
 800c2c2:	430a      	orrs	r2, r1
 800c2c4:	60da      	str	r2, [r3, #12]
      break;
 800c2c6:	e01f      	b.n	800c308 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	68da      	ldr	r2, [r3, #12]
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	2104      	movs	r1, #4
 800c2d4:	430a      	orrs	r2, r1
 800c2d6:	60da      	str	r2, [r3, #12]
      break;
 800c2d8:	e016      	b.n	800c308 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	68da      	ldr	r2, [r3, #12]
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	2108      	movs	r1, #8
 800c2e6:	430a      	orrs	r2, r1
 800c2e8:	60da      	str	r2, [r3, #12]
      break;
 800c2ea:	e00d      	b.n	800c308 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	68da      	ldr	r2, [r3, #12]
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	2110      	movs	r1, #16
 800c2f8:	430a      	orrs	r2, r1
 800c2fa:	60da      	str	r2, [r3, #12]
      break;
 800c2fc:	e004      	b.n	800c308 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    default:
      status = HAL_ERROR;
 800c2fe:	230f      	movs	r3, #15
 800c300:	18fb      	adds	r3, r7, r3
 800c302:	2201      	movs	r2, #1
 800c304:	701a      	strb	r2, [r3, #0]
      break;
 800c306:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 800c308:	230f      	movs	r3, #15
 800c30a:	18fb      	adds	r3, r7, r3
 800c30c:	781b      	ldrb	r3, [r3, #0]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d136      	bne.n	800c380 <HAL_TIM_IC_Start_IT+0x244>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	6839      	ldr	r1, [r7, #0]
 800c318:	2201      	movs	r2, #1
 800c31a:	0018      	movs	r0, r3
 800c31c:	f000 fd36 	bl	800cd8c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	4a1a      	ldr	r2, [pc, #104]	; (800c390 <HAL_TIM_IC_Start_IT+0x254>)
 800c326:	4293      	cmp	r3, r2
 800c328:	d009      	beq.n	800c33e <HAL_TIM_IC_Start_IT+0x202>
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	4a19      	ldr	r2, [pc, #100]	; (800c394 <HAL_TIM_IC_Start_IT+0x258>)
 800c330:	4293      	cmp	r3, r2
 800c332:	d004      	beq.n	800c33e <HAL_TIM_IC_Start_IT+0x202>
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	4a17      	ldr	r2, [pc, #92]	; (800c398 <HAL_TIM_IC_Start_IT+0x25c>)
 800c33a:	4293      	cmp	r3, r2
 800c33c:	d116      	bne.n	800c36c <HAL_TIM_IC_Start_IT+0x230>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	689b      	ldr	r3, [r3, #8]
 800c344:	4a15      	ldr	r2, [pc, #84]	; (800c39c <HAL_TIM_IC_Start_IT+0x260>)
 800c346:	4013      	ands	r3, r2
 800c348:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c34a:	68bb      	ldr	r3, [r7, #8]
 800c34c:	2b06      	cmp	r3, #6
 800c34e:	d016      	beq.n	800c37e <HAL_TIM_IC_Start_IT+0x242>
 800c350:	68ba      	ldr	r2, [r7, #8]
 800c352:	2380      	movs	r3, #128	; 0x80
 800c354:	025b      	lsls	r3, r3, #9
 800c356:	429a      	cmp	r2, r3
 800c358:	d011      	beq.n	800c37e <HAL_TIM_IC_Start_IT+0x242>
      {
        __HAL_TIM_ENABLE(htim);
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	681a      	ldr	r2, [r3, #0]
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	2101      	movs	r1, #1
 800c366:	430a      	orrs	r2, r1
 800c368:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c36a:	e008      	b.n	800c37e <HAL_TIM_IC_Start_IT+0x242>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	681a      	ldr	r2, [r3, #0]
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	2101      	movs	r1, #1
 800c378:	430a      	orrs	r2, r1
 800c37a:	601a      	str	r2, [r3, #0]
 800c37c:	e000      	b.n	800c380 <HAL_TIM_IC_Start_IT+0x244>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c37e:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 800c380:	230f      	movs	r3, #15
 800c382:	18fb      	adds	r3, r7, r3
 800c384:	781b      	ldrb	r3, [r3, #0]
}
 800c386:	0018      	movs	r0, r3
 800c388:	46bd      	mov	sp, r7
 800c38a:	b004      	add	sp, #16
 800c38c:	bd80      	pop	{r7, pc}
 800c38e:	46c0      	nop			; (mov r8, r8)
 800c390:	40012c00 	.word	0x40012c00
 800c394:	40000400 	.word	0x40000400
 800c398:	40014000 	.word	0x40014000
 800c39c:	00010007 	.word	0x00010007

0800c3a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b082      	sub	sp, #8
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	691b      	ldr	r3, [r3, #16]
 800c3ae:	2202      	movs	r2, #2
 800c3b0:	4013      	ands	r3, r2
 800c3b2:	2b02      	cmp	r3, #2
 800c3b4:	d124      	bne.n	800c400 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	68db      	ldr	r3, [r3, #12]
 800c3bc:	2202      	movs	r2, #2
 800c3be:	4013      	ands	r3, r2
 800c3c0:	2b02      	cmp	r3, #2
 800c3c2:	d11d      	bne.n	800c400 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	2203      	movs	r2, #3
 800c3ca:	4252      	negs	r2, r2
 800c3cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2201      	movs	r2, #1
 800c3d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	699b      	ldr	r3, [r3, #24]
 800c3da:	2203      	movs	r2, #3
 800c3dc:	4013      	ands	r3, r2
 800c3de:	d004      	beq.n	800c3ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	0018      	movs	r0, r3
 800c3e4:	f7fb fa26 	bl	8007834 <HAL_TIM_IC_CaptureCallback>
 800c3e8:	e007      	b.n	800c3fa <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	0018      	movs	r0, r3
 800c3ee:	f000 fa83 	bl	800c8f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	0018      	movs	r0, r3
 800c3f6:	f000 fa87 	bl	800c908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	691b      	ldr	r3, [r3, #16]
 800c406:	2204      	movs	r2, #4
 800c408:	4013      	ands	r3, r2
 800c40a:	2b04      	cmp	r3, #4
 800c40c:	d125      	bne.n	800c45a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	68db      	ldr	r3, [r3, #12]
 800c414:	2204      	movs	r2, #4
 800c416:	4013      	ands	r3, r2
 800c418:	2b04      	cmp	r3, #4
 800c41a:	d11e      	bne.n	800c45a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	2205      	movs	r2, #5
 800c422:	4252      	negs	r2, r2
 800c424:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2202      	movs	r2, #2
 800c42a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	699a      	ldr	r2, [r3, #24]
 800c432:	23c0      	movs	r3, #192	; 0xc0
 800c434:	009b      	lsls	r3, r3, #2
 800c436:	4013      	ands	r3, r2
 800c438:	d004      	beq.n	800c444 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	0018      	movs	r0, r3
 800c43e:	f7fb f9f9 	bl	8007834 <HAL_TIM_IC_CaptureCallback>
 800c442:	e007      	b.n	800c454 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	0018      	movs	r0, r3
 800c448:	f000 fa56 	bl	800c8f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	0018      	movs	r0, r3
 800c450:	f000 fa5a 	bl	800c908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2200      	movs	r2, #0
 800c458:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	691b      	ldr	r3, [r3, #16]
 800c460:	2208      	movs	r2, #8
 800c462:	4013      	ands	r3, r2
 800c464:	2b08      	cmp	r3, #8
 800c466:	d124      	bne.n	800c4b2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	68db      	ldr	r3, [r3, #12]
 800c46e:	2208      	movs	r2, #8
 800c470:	4013      	ands	r3, r2
 800c472:	2b08      	cmp	r3, #8
 800c474:	d11d      	bne.n	800c4b2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	2209      	movs	r2, #9
 800c47c:	4252      	negs	r2, r2
 800c47e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2204      	movs	r2, #4
 800c484:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	69db      	ldr	r3, [r3, #28]
 800c48c:	2203      	movs	r2, #3
 800c48e:	4013      	ands	r3, r2
 800c490:	d004      	beq.n	800c49c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	0018      	movs	r0, r3
 800c496:	f7fb f9cd 	bl	8007834 <HAL_TIM_IC_CaptureCallback>
 800c49a:	e007      	b.n	800c4ac <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	0018      	movs	r0, r3
 800c4a0:	f000 fa2a 	bl	800c8f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	0018      	movs	r0, r3
 800c4a8:	f000 fa2e 	bl	800c908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	691b      	ldr	r3, [r3, #16]
 800c4b8:	2210      	movs	r2, #16
 800c4ba:	4013      	ands	r3, r2
 800c4bc:	2b10      	cmp	r3, #16
 800c4be:	d125      	bne.n	800c50c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	68db      	ldr	r3, [r3, #12]
 800c4c6:	2210      	movs	r2, #16
 800c4c8:	4013      	ands	r3, r2
 800c4ca:	2b10      	cmp	r3, #16
 800c4cc:	d11e      	bne.n	800c50c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	2211      	movs	r2, #17
 800c4d4:	4252      	negs	r2, r2
 800c4d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	2208      	movs	r2, #8
 800c4dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	69da      	ldr	r2, [r3, #28]
 800c4e4:	23c0      	movs	r3, #192	; 0xc0
 800c4e6:	009b      	lsls	r3, r3, #2
 800c4e8:	4013      	ands	r3, r2
 800c4ea:	d004      	beq.n	800c4f6 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	0018      	movs	r0, r3
 800c4f0:	f7fb f9a0 	bl	8007834 <HAL_TIM_IC_CaptureCallback>
 800c4f4:	e007      	b.n	800c506 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	0018      	movs	r0, r3
 800c4fa:	f000 f9fd 	bl	800c8f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	0018      	movs	r0, r3
 800c502:	f000 fa01 	bl	800c908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	2200      	movs	r2, #0
 800c50a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	691b      	ldr	r3, [r3, #16]
 800c512:	2201      	movs	r2, #1
 800c514:	4013      	ands	r3, r2
 800c516:	2b01      	cmp	r3, #1
 800c518:	d10f      	bne.n	800c53a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	68db      	ldr	r3, [r3, #12]
 800c520:	2201      	movs	r2, #1
 800c522:	4013      	ands	r3, r2
 800c524:	2b01      	cmp	r3, #1
 800c526:	d108      	bne.n	800c53a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	2202      	movs	r2, #2
 800c52e:	4252      	negs	r2, r2
 800c530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	0018      	movs	r0, r3
 800c536:	f7f8 f911 	bl	800475c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	691b      	ldr	r3, [r3, #16]
 800c540:	2280      	movs	r2, #128	; 0x80
 800c542:	4013      	ands	r3, r2
 800c544:	2b80      	cmp	r3, #128	; 0x80
 800c546:	d10f      	bne.n	800c568 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	68db      	ldr	r3, [r3, #12]
 800c54e:	2280      	movs	r2, #128	; 0x80
 800c550:	4013      	ands	r3, r2
 800c552:	2b80      	cmp	r3, #128	; 0x80
 800c554:	d108      	bne.n	800c568 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	2281      	movs	r2, #129	; 0x81
 800c55c:	4252      	negs	r2, r2
 800c55e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	0018      	movs	r0, r3
 800c564:	f000 fca6 	bl	800ceb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	691a      	ldr	r2, [r3, #16]
 800c56e:	2380      	movs	r3, #128	; 0x80
 800c570:	005b      	lsls	r3, r3, #1
 800c572:	401a      	ands	r2, r3
 800c574:	2380      	movs	r3, #128	; 0x80
 800c576:	005b      	lsls	r3, r3, #1
 800c578:	429a      	cmp	r2, r3
 800c57a:	d10e      	bne.n	800c59a <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	68db      	ldr	r3, [r3, #12]
 800c582:	2280      	movs	r2, #128	; 0x80
 800c584:	4013      	ands	r3, r2
 800c586:	2b80      	cmp	r3, #128	; 0x80
 800c588:	d107      	bne.n	800c59a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	4a1c      	ldr	r2, [pc, #112]	; (800c600 <HAL_TIM_IRQHandler+0x260>)
 800c590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	0018      	movs	r0, r3
 800c596:	f000 fc95 	bl	800cec4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	691b      	ldr	r3, [r3, #16]
 800c5a0:	2240      	movs	r2, #64	; 0x40
 800c5a2:	4013      	ands	r3, r2
 800c5a4:	2b40      	cmp	r3, #64	; 0x40
 800c5a6:	d10f      	bne.n	800c5c8 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	68db      	ldr	r3, [r3, #12]
 800c5ae:	2240      	movs	r2, #64	; 0x40
 800c5b0:	4013      	ands	r3, r2
 800c5b2:	2b40      	cmp	r3, #64	; 0x40
 800c5b4:	d108      	bne.n	800c5c8 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	2241      	movs	r2, #65	; 0x41
 800c5bc:	4252      	negs	r2, r2
 800c5be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	0018      	movs	r0, r3
 800c5c4:	f000 f9a8 	bl	800c918 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	691b      	ldr	r3, [r3, #16]
 800c5ce:	2220      	movs	r2, #32
 800c5d0:	4013      	ands	r3, r2
 800c5d2:	2b20      	cmp	r3, #32
 800c5d4:	d10f      	bne.n	800c5f6 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	68db      	ldr	r3, [r3, #12]
 800c5dc:	2220      	movs	r2, #32
 800c5de:	4013      	ands	r3, r2
 800c5e0:	2b20      	cmp	r3, #32
 800c5e2:	d108      	bne.n	800c5f6 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	2221      	movs	r2, #33	; 0x21
 800c5ea:	4252      	negs	r2, r2
 800c5ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	0018      	movs	r0, r3
 800c5f2:	f000 fc57 	bl	800cea4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c5f6:	46c0      	nop			; (mov r8, r8)
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	b002      	add	sp, #8
 800c5fc:	bd80      	pop	{r7, pc}
 800c5fe:	46c0      	nop			; (mov r8, r8)
 800c600:	fffffeff 	.word	0xfffffeff

0800c604 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b086      	sub	sp, #24
 800c608:	af00      	add	r7, sp, #0
 800c60a:	60f8      	str	r0, [r7, #12]
 800c60c:	60b9      	str	r1, [r7, #8]
 800c60e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c610:	2317      	movs	r3, #23
 800c612:	18fb      	adds	r3, r7, r3
 800c614:	2200      	movs	r2, #0
 800c616:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	223c      	movs	r2, #60	; 0x3c
 800c61c:	5c9b      	ldrb	r3, [r3, r2]
 800c61e:	2b01      	cmp	r3, #1
 800c620:	d101      	bne.n	800c626 <HAL_TIM_IC_ConfigChannel+0x22>
 800c622:	2302      	movs	r3, #2
 800c624:	e08c      	b.n	800c740 <HAL_TIM_IC_ConfigChannel+0x13c>
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	223c      	movs	r2, #60	; 0x3c
 800c62a:	2101      	movs	r1, #1
 800c62c:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d11b      	bne.n	800c66c <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	6818      	ldr	r0, [r3, #0]
 800c638:	68bb      	ldr	r3, [r7, #8]
 800c63a:	6819      	ldr	r1, [r3, #0]
 800c63c:	68bb      	ldr	r3, [r7, #8]
 800c63e:	685a      	ldr	r2, [r3, #4]
 800c640:	68bb      	ldr	r3, [r7, #8]
 800c642:	68db      	ldr	r3, [r3, #12]
 800c644:	f000 f9e6 	bl	800ca14 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	699a      	ldr	r2, [r3, #24]
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	210c      	movs	r1, #12
 800c654:	438a      	bics	r2, r1
 800c656:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	6999      	ldr	r1, [r3, #24]
 800c65e:	68bb      	ldr	r3, [r7, #8]
 800c660:	689a      	ldr	r2, [r3, #8]
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	430a      	orrs	r2, r1
 800c668:	619a      	str	r2, [r3, #24]
 800c66a:	e062      	b.n	800c732 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2b04      	cmp	r3, #4
 800c670:	d11c      	bne.n	800c6ac <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	6818      	ldr	r0, [r3, #0]
 800c676:	68bb      	ldr	r3, [r7, #8]
 800c678:	6819      	ldr	r1, [r3, #0]
 800c67a:	68bb      	ldr	r3, [r7, #8]
 800c67c:	685a      	ldr	r2, [r3, #4]
 800c67e:	68bb      	ldr	r3, [r7, #8]
 800c680:	68db      	ldr	r3, [r3, #12]
 800c682:	f000 fa4d 	bl	800cb20 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	699a      	ldr	r2, [r3, #24]
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	492d      	ldr	r1, [pc, #180]	; (800c748 <HAL_TIM_IC_ConfigChannel+0x144>)
 800c692:	400a      	ands	r2, r1
 800c694:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	6999      	ldr	r1, [r3, #24]
 800c69c:	68bb      	ldr	r3, [r7, #8]
 800c69e:	689b      	ldr	r3, [r3, #8]
 800c6a0:	021a      	lsls	r2, r3, #8
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	430a      	orrs	r2, r1
 800c6a8:	619a      	str	r2, [r3, #24]
 800c6aa:	e042      	b.n	800c732 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	2b08      	cmp	r3, #8
 800c6b0:	d11b      	bne.n	800c6ea <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	6818      	ldr	r0, [r3, #0]
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	6819      	ldr	r1, [r3, #0]
 800c6ba:	68bb      	ldr	r3, [r7, #8]
 800c6bc:	685a      	ldr	r2, [r3, #4]
 800c6be:	68bb      	ldr	r3, [r7, #8]
 800c6c0:	68db      	ldr	r3, [r3, #12]
 800c6c2:	f000 faa1 	bl	800cc08 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	69da      	ldr	r2, [r3, #28]
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	210c      	movs	r1, #12
 800c6d2:	438a      	bics	r2, r1
 800c6d4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	69d9      	ldr	r1, [r3, #28]
 800c6dc:	68bb      	ldr	r3, [r7, #8]
 800c6de:	689a      	ldr	r2, [r3, #8]
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	430a      	orrs	r2, r1
 800c6e6:	61da      	str	r2, [r3, #28]
 800c6e8:	e023      	b.n	800c732 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	2b0c      	cmp	r3, #12
 800c6ee:	d11c      	bne.n	800c72a <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	6818      	ldr	r0, [r3, #0]
 800c6f4:	68bb      	ldr	r3, [r7, #8]
 800c6f6:	6819      	ldr	r1, [r3, #0]
 800c6f8:	68bb      	ldr	r3, [r7, #8]
 800c6fa:	685a      	ldr	r2, [r3, #4]
 800c6fc:	68bb      	ldr	r3, [r7, #8]
 800c6fe:	68db      	ldr	r3, [r3, #12]
 800c700:	f000 fac2 	bl	800cc88 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	69da      	ldr	r2, [r3, #28]
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	490e      	ldr	r1, [pc, #56]	; (800c748 <HAL_TIM_IC_ConfigChannel+0x144>)
 800c710:	400a      	ands	r2, r1
 800c712:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	69d9      	ldr	r1, [r3, #28]
 800c71a:	68bb      	ldr	r3, [r7, #8]
 800c71c:	689b      	ldr	r3, [r3, #8]
 800c71e:	021a      	lsls	r2, r3, #8
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	430a      	orrs	r2, r1
 800c726:	61da      	str	r2, [r3, #28]
 800c728:	e003      	b.n	800c732 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 800c72a:	2317      	movs	r3, #23
 800c72c:	18fb      	adds	r3, r7, r3
 800c72e:	2201      	movs	r2, #1
 800c730:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	223c      	movs	r2, #60	; 0x3c
 800c736:	2100      	movs	r1, #0
 800c738:	5499      	strb	r1, [r3, r2]

  return status;
 800c73a:	2317      	movs	r3, #23
 800c73c:	18fb      	adds	r3, r7, r3
 800c73e:	781b      	ldrb	r3, [r3, #0]
}
 800c740:	0018      	movs	r0, r3
 800c742:	46bd      	mov	sp, r7
 800c744:	b006      	add	sp, #24
 800c746:	bd80      	pop	{r7, pc}
 800c748:	fffff3ff 	.word	0xfffff3ff

0800c74c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b084      	sub	sp, #16
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
 800c754:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c756:	230f      	movs	r3, #15
 800c758:	18fb      	adds	r3, r7, r3
 800c75a:	2200      	movs	r2, #0
 800c75c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	223c      	movs	r2, #60	; 0x3c
 800c762:	5c9b      	ldrb	r3, [r3, r2]
 800c764:	2b01      	cmp	r3, #1
 800c766:	d101      	bne.n	800c76c <HAL_TIM_ConfigClockSource+0x20>
 800c768:	2302      	movs	r3, #2
 800c76a:	e0bc      	b.n	800c8e6 <HAL_TIM_ConfigClockSource+0x19a>
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	223c      	movs	r2, #60	; 0x3c
 800c770:	2101      	movs	r1, #1
 800c772:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	223d      	movs	r2, #61	; 0x3d
 800c778:	2102      	movs	r1, #2
 800c77a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	689b      	ldr	r3, [r3, #8]
 800c782:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c784:	68bb      	ldr	r3, [r7, #8]
 800c786:	4a5a      	ldr	r2, [pc, #360]	; (800c8f0 <HAL_TIM_ConfigClockSource+0x1a4>)
 800c788:	4013      	ands	r3, r2
 800c78a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c78c:	68bb      	ldr	r3, [r7, #8]
 800c78e:	4a59      	ldr	r2, [pc, #356]	; (800c8f4 <HAL_TIM_ConfigClockSource+0x1a8>)
 800c790:	4013      	ands	r3, r2
 800c792:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	68ba      	ldr	r2, [r7, #8]
 800c79a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c79c:	683b      	ldr	r3, [r7, #0]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	2280      	movs	r2, #128	; 0x80
 800c7a2:	0192      	lsls	r2, r2, #6
 800c7a4:	4293      	cmp	r3, r2
 800c7a6:	d040      	beq.n	800c82a <HAL_TIM_ConfigClockSource+0xde>
 800c7a8:	2280      	movs	r2, #128	; 0x80
 800c7aa:	0192      	lsls	r2, r2, #6
 800c7ac:	4293      	cmp	r3, r2
 800c7ae:	d900      	bls.n	800c7b2 <HAL_TIM_ConfigClockSource+0x66>
 800c7b0:	e088      	b.n	800c8c4 <HAL_TIM_ConfigClockSource+0x178>
 800c7b2:	2280      	movs	r2, #128	; 0x80
 800c7b4:	0152      	lsls	r2, r2, #5
 800c7b6:	4293      	cmp	r3, r2
 800c7b8:	d100      	bne.n	800c7bc <HAL_TIM_ConfigClockSource+0x70>
 800c7ba:	e088      	b.n	800c8ce <HAL_TIM_ConfigClockSource+0x182>
 800c7bc:	2280      	movs	r2, #128	; 0x80
 800c7be:	0152      	lsls	r2, r2, #5
 800c7c0:	4293      	cmp	r3, r2
 800c7c2:	d900      	bls.n	800c7c6 <HAL_TIM_ConfigClockSource+0x7a>
 800c7c4:	e07e      	b.n	800c8c4 <HAL_TIM_ConfigClockSource+0x178>
 800c7c6:	2b70      	cmp	r3, #112	; 0x70
 800c7c8:	d018      	beq.n	800c7fc <HAL_TIM_ConfigClockSource+0xb0>
 800c7ca:	d900      	bls.n	800c7ce <HAL_TIM_ConfigClockSource+0x82>
 800c7cc:	e07a      	b.n	800c8c4 <HAL_TIM_ConfigClockSource+0x178>
 800c7ce:	2b60      	cmp	r3, #96	; 0x60
 800c7d0:	d04f      	beq.n	800c872 <HAL_TIM_ConfigClockSource+0x126>
 800c7d2:	d900      	bls.n	800c7d6 <HAL_TIM_ConfigClockSource+0x8a>
 800c7d4:	e076      	b.n	800c8c4 <HAL_TIM_ConfigClockSource+0x178>
 800c7d6:	2b50      	cmp	r3, #80	; 0x50
 800c7d8:	d03b      	beq.n	800c852 <HAL_TIM_ConfigClockSource+0x106>
 800c7da:	d900      	bls.n	800c7de <HAL_TIM_ConfigClockSource+0x92>
 800c7dc:	e072      	b.n	800c8c4 <HAL_TIM_ConfigClockSource+0x178>
 800c7de:	2b40      	cmp	r3, #64	; 0x40
 800c7e0:	d057      	beq.n	800c892 <HAL_TIM_ConfigClockSource+0x146>
 800c7e2:	d900      	bls.n	800c7e6 <HAL_TIM_ConfigClockSource+0x9a>
 800c7e4:	e06e      	b.n	800c8c4 <HAL_TIM_ConfigClockSource+0x178>
 800c7e6:	2b30      	cmp	r3, #48	; 0x30
 800c7e8:	d063      	beq.n	800c8b2 <HAL_TIM_ConfigClockSource+0x166>
 800c7ea:	d86b      	bhi.n	800c8c4 <HAL_TIM_ConfigClockSource+0x178>
 800c7ec:	2b20      	cmp	r3, #32
 800c7ee:	d060      	beq.n	800c8b2 <HAL_TIM_ConfigClockSource+0x166>
 800c7f0:	d868      	bhi.n	800c8c4 <HAL_TIM_ConfigClockSource+0x178>
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d05d      	beq.n	800c8b2 <HAL_TIM_ConfigClockSource+0x166>
 800c7f6:	2b10      	cmp	r3, #16
 800c7f8:	d05b      	beq.n	800c8b2 <HAL_TIM_ConfigClockSource+0x166>
 800c7fa:	e063      	b.n	800c8c4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	6818      	ldr	r0, [r3, #0]
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	6899      	ldr	r1, [r3, #8]
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	685a      	ldr	r2, [r3, #4]
 800c808:	683b      	ldr	r3, [r7, #0]
 800c80a:	68db      	ldr	r3, [r3, #12]
 800c80c:	f000 fa9e 	bl	800cd4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	689b      	ldr	r3, [r3, #8]
 800c816:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	2277      	movs	r2, #119	; 0x77
 800c81c:	4313      	orrs	r3, r2
 800c81e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	68ba      	ldr	r2, [r7, #8]
 800c826:	609a      	str	r2, [r3, #8]
      break;
 800c828:	e052      	b.n	800c8d0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	6818      	ldr	r0, [r3, #0]
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	6899      	ldr	r1, [r3, #8]
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	685a      	ldr	r2, [r3, #4]
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	68db      	ldr	r3, [r3, #12]
 800c83a:	f000 fa87 	bl	800cd4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	689a      	ldr	r2, [r3, #8]
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	2180      	movs	r1, #128	; 0x80
 800c84a:	01c9      	lsls	r1, r1, #7
 800c84c:	430a      	orrs	r2, r1
 800c84e:	609a      	str	r2, [r3, #8]
      break;
 800c850:	e03e      	b.n	800c8d0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	6818      	ldr	r0, [r3, #0]
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	6859      	ldr	r1, [r3, #4]
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	68db      	ldr	r3, [r3, #12]
 800c85e:	001a      	movs	r2, r3
 800c860:	f000 f930 	bl	800cac4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	2150      	movs	r1, #80	; 0x50
 800c86a:	0018      	movs	r0, r3
 800c86c:	f000 fa52 	bl	800cd14 <TIM_ITRx_SetConfig>
      break;
 800c870:	e02e      	b.n	800c8d0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	6818      	ldr	r0, [r3, #0]
 800c876:	683b      	ldr	r3, [r7, #0]
 800c878:	6859      	ldr	r1, [r3, #4]
 800c87a:	683b      	ldr	r3, [r7, #0]
 800c87c:	68db      	ldr	r3, [r3, #12]
 800c87e:	001a      	movs	r2, r3
 800c880:	f000 f990 	bl	800cba4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	2160      	movs	r1, #96	; 0x60
 800c88a:	0018      	movs	r0, r3
 800c88c:	f000 fa42 	bl	800cd14 <TIM_ITRx_SetConfig>
      break;
 800c890:	e01e      	b.n	800c8d0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	6818      	ldr	r0, [r3, #0]
 800c896:	683b      	ldr	r3, [r7, #0]
 800c898:	6859      	ldr	r1, [r3, #4]
 800c89a:	683b      	ldr	r3, [r7, #0]
 800c89c:	68db      	ldr	r3, [r3, #12]
 800c89e:	001a      	movs	r2, r3
 800c8a0:	f000 f910 	bl	800cac4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	2140      	movs	r1, #64	; 0x40
 800c8aa:	0018      	movs	r0, r3
 800c8ac:	f000 fa32 	bl	800cd14 <TIM_ITRx_SetConfig>
      break;
 800c8b0:	e00e      	b.n	800c8d0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681a      	ldr	r2, [r3, #0]
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	0019      	movs	r1, r3
 800c8bc:	0010      	movs	r0, r2
 800c8be:	f000 fa29 	bl	800cd14 <TIM_ITRx_SetConfig>
      break;
 800c8c2:	e005      	b.n	800c8d0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800c8c4:	230f      	movs	r3, #15
 800c8c6:	18fb      	adds	r3, r7, r3
 800c8c8:	2201      	movs	r2, #1
 800c8ca:	701a      	strb	r2, [r3, #0]
      break;
 800c8cc:	e000      	b.n	800c8d0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800c8ce:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	223d      	movs	r2, #61	; 0x3d
 800c8d4:	2101      	movs	r1, #1
 800c8d6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	223c      	movs	r2, #60	; 0x3c
 800c8dc:	2100      	movs	r1, #0
 800c8de:	5499      	strb	r1, [r3, r2]

  return status;
 800c8e0:	230f      	movs	r3, #15
 800c8e2:	18fb      	adds	r3, r7, r3
 800c8e4:	781b      	ldrb	r3, [r3, #0]
}
 800c8e6:	0018      	movs	r0, r3
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	b004      	add	sp, #16
 800c8ec:	bd80      	pop	{r7, pc}
 800c8ee:	46c0      	nop			; (mov r8, r8)
 800c8f0:	ffceff88 	.word	0xffceff88
 800c8f4:	ffff00ff 	.word	0xffff00ff

0800c8f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b082      	sub	sp, #8
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c900:	46c0      	nop			; (mov r8, r8)
 800c902:	46bd      	mov	sp, r7
 800c904:	b002      	add	sp, #8
 800c906:	bd80      	pop	{r7, pc}

0800c908 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b082      	sub	sp, #8
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c910:	46c0      	nop			; (mov r8, r8)
 800c912:	46bd      	mov	sp, r7
 800c914:	b002      	add	sp, #8
 800c916:	bd80      	pop	{r7, pc}

0800c918 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b082      	sub	sp, #8
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c920:	46c0      	nop			; (mov r8, r8)
 800c922:	46bd      	mov	sp, r7
 800c924:	b002      	add	sp, #8
 800c926:	bd80      	pop	{r7, pc}

0800c928 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b084      	sub	sp, #16
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
 800c930:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	4a2f      	ldr	r2, [pc, #188]	; (800c9f8 <TIM_Base_SetConfig+0xd0>)
 800c93c:	4293      	cmp	r3, r2
 800c93e:	d003      	beq.n	800c948 <TIM_Base_SetConfig+0x20>
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	4a2e      	ldr	r2, [pc, #184]	; (800c9fc <TIM_Base_SetConfig+0xd4>)
 800c944:	4293      	cmp	r3, r2
 800c946:	d108      	bne.n	800c95a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	2270      	movs	r2, #112	; 0x70
 800c94c:	4393      	bics	r3, r2
 800c94e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c950:	683b      	ldr	r3, [r7, #0]
 800c952:	685b      	ldr	r3, [r3, #4]
 800c954:	68fa      	ldr	r2, [r7, #12]
 800c956:	4313      	orrs	r3, r2
 800c958:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	4a26      	ldr	r2, [pc, #152]	; (800c9f8 <TIM_Base_SetConfig+0xd0>)
 800c95e:	4293      	cmp	r3, r2
 800c960:	d013      	beq.n	800c98a <TIM_Base_SetConfig+0x62>
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	4a25      	ldr	r2, [pc, #148]	; (800c9fc <TIM_Base_SetConfig+0xd4>)
 800c966:	4293      	cmp	r3, r2
 800c968:	d00f      	beq.n	800c98a <TIM_Base_SetConfig+0x62>
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	4a24      	ldr	r2, [pc, #144]	; (800ca00 <TIM_Base_SetConfig+0xd8>)
 800c96e:	4293      	cmp	r3, r2
 800c970:	d00b      	beq.n	800c98a <TIM_Base_SetConfig+0x62>
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	4a23      	ldr	r2, [pc, #140]	; (800ca04 <TIM_Base_SetConfig+0xdc>)
 800c976:	4293      	cmp	r3, r2
 800c978:	d007      	beq.n	800c98a <TIM_Base_SetConfig+0x62>
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	4a22      	ldr	r2, [pc, #136]	; (800ca08 <TIM_Base_SetConfig+0xe0>)
 800c97e:	4293      	cmp	r3, r2
 800c980:	d003      	beq.n	800c98a <TIM_Base_SetConfig+0x62>
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	4a21      	ldr	r2, [pc, #132]	; (800ca0c <TIM_Base_SetConfig+0xe4>)
 800c986:	4293      	cmp	r3, r2
 800c988:	d108      	bne.n	800c99c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	4a20      	ldr	r2, [pc, #128]	; (800ca10 <TIM_Base_SetConfig+0xe8>)
 800c98e:	4013      	ands	r3, r2
 800c990:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	68db      	ldr	r3, [r3, #12]
 800c996:	68fa      	ldr	r2, [r7, #12]
 800c998:	4313      	orrs	r3, r2
 800c99a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	2280      	movs	r2, #128	; 0x80
 800c9a0:	4393      	bics	r3, r2
 800c9a2:	001a      	movs	r2, r3
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	695b      	ldr	r3, [r3, #20]
 800c9a8:	4313      	orrs	r3, r2
 800c9aa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	68fa      	ldr	r2, [r7, #12]
 800c9b0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c9b2:	683b      	ldr	r3, [r7, #0]
 800c9b4:	689a      	ldr	r2, [r3, #8]
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	681a      	ldr	r2, [r3, #0]
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	4a0c      	ldr	r2, [pc, #48]	; (800c9f8 <TIM_Base_SetConfig+0xd0>)
 800c9c6:	4293      	cmp	r3, r2
 800c9c8:	d00b      	beq.n	800c9e2 <TIM_Base_SetConfig+0xba>
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	4a0d      	ldr	r2, [pc, #52]	; (800ca04 <TIM_Base_SetConfig+0xdc>)
 800c9ce:	4293      	cmp	r3, r2
 800c9d0:	d007      	beq.n	800c9e2 <TIM_Base_SetConfig+0xba>
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	4a0c      	ldr	r2, [pc, #48]	; (800ca08 <TIM_Base_SetConfig+0xe0>)
 800c9d6:	4293      	cmp	r3, r2
 800c9d8:	d003      	beq.n	800c9e2 <TIM_Base_SetConfig+0xba>
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	4a0b      	ldr	r2, [pc, #44]	; (800ca0c <TIM_Base_SetConfig+0xe4>)
 800c9de:	4293      	cmp	r3, r2
 800c9e0:	d103      	bne.n	800c9ea <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	691a      	ldr	r2, [r3, #16]
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	2201      	movs	r2, #1
 800c9ee:	615a      	str	r2, [r3, #20]
}
 800c9f0:	46c0      	nop			; (mov r8, r8)
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	b004      	add	sp, #16
 800c9f6:	bd80      	pop	{r7, pc}
 800c9f8:	40012c00 	.word	0x40012c00
 800c9fc:	40000400 	.word	0x40000400
 800ca00:	40002000 	.word	0x40002000
 800ca04:	40014000 	.word	0x40014000
 800ca08:	40014400 	.word	0x40014400
 800ca0c:	40014800 	.word	0x40014800
 800ca10:	fffffcff 	.word	0xfffffcff

0800ca14 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	b086      	sub	sp, #24
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	60f8      	str	r0, [r7, #12]
 800ca1c:	60b9      	str	r1, [r7, #8]
 800ca1e:	607a      	str	r2, [r7, #4]
 800ca20:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	6a1b      	ldr	r3, [r3, #32]
 800ca26:	2201      	movs	r2, #1
 800ca28:	4393      	bics	r3, r2
 800ca2a:	001a      	movs	r2, r3
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	699b      	ldr	r3, [r3, #24]
 800ca34:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	6a1b      	ldr	r3, [r3, #32]
 800ca3a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	4a1e      	ldr	r2, [pc, #120]	; (800cab8 <TIM_TI1_SetConfig+0xa4>)
 800ca40:	4293      	cmp	r3, r2
 800ca42:	d007      	beq.n	800ca54 <TIM_TI1_SetConfig+0x40>
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	4a1d      	ldr	r2, [pc, #116]	; (800cabc <TIM_TI1_SetConfig+0xa8>)
 800ca48:	4293      	cmp	r3, r2
 800ca4a:	d003      	beq.n	800ca54 <TIM_TI1_SetConfig+0x40>
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	4a1c      	ldr	r2, [pc, #112]	; (800cac0 <TIM_TI1_SetConfig+0xac>)
 800ca50:	4293      	cmp	r3, r2
 800ca52:	d101      	bne.n	800ca58 <TIM_TI1_SetConfig+0x44>
 800ca54:	2301      	movs	r3, #1
 800ca56:	e000      	b.n	800ca5a <TIM_TI1_SetConfig+0x46>
 800ca58:	2300      	movs	r3, #0
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d008      	beq.n	800ca70 <TIM_TI1_SetConfig+0x5c>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800ca5e:	697b      	ldr	r3, [r7, #20]
 800ca60:	2203      	movs	r2, #3
 800ca62:	4393      	bics	r3, r2
 800ca64:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800ca66:	697a      	ldr	r2, [r7, #20]
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	4313      	orrs	r3, r2
 800ca6c:	617b      	str	r3, [r7, #20]
 800ca6e:	e003      	b.n	800ca78 <TIM_TI1_SetConfig+0x64>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800ca70:	697b      	ldr	r3, [r7, #20]
 800ca72:	2201      	movs	r2, #1
 800ca74:	4313      	orrs	r3, r2
 800ca76:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ca78:	697b      	ldr	r3, [r7, #20]
 800ca7a:	22f0      	movs	r2, #240	; 0xf0
 800ca7c:	4393      	bics	r3, r2
 800ca7e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800ca80:	683b      	ldr	r3, [r7, #0]
 800ca82:	011b      	lsls	r3, r3, #4
 800ca84:	22ff      	movs	r2, #255	; 0xff
 800ca86:	4013      	ands	r3, r2
 800ca88:	697a      	ldr	r2, [r7, #20]
 800ca8a:	4313      	orrs	r3, r2
 800ca8c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ca8e:	693b      	ldr	r3, [r7, #16]
 800ca90:	220a      	movs	r2, #10
 800ca92:	4393      	bics	r3, r2
 800ca94:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800ca96:	68bb      	ldr	r3, [r7, #8]
 800ca98:	220a      	movs	r2, #10
 800ca9a:	4013      	ands	r3, r2
 800ca9c:	693a      	ldr	r2, [r7, #16]
 800ca9e:	4313      	orrs	r3, r2
 800caa0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	697a      	ldr	r2, [r7, #20]
 800caa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	693a      	ldr	r2, [r7, #16]
 800caac:	621a      	str	r2, [r3, #32]
}
 800caae:	46c0      	nop			; (mov r8, r8)
 800cab0:	46bd      	mov	sp, r7
 800cab2:	b006      	add	sp, #24
 800cab4:	bd80      	pop	{r7, pc}
 800cab6:	46c0      	nop			; (mov r8, r8)
 800cab8:	40012c00 	.word	0x40012c00
 800cabc:	40000400 	.word	0x40000400
 800cac0:	40014000 	.word	0x40014000

0800cac4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b086      	sub	sp, #24
 800cac8:	af00      	add	r7, sp, #0
 800caca:	60f8      	str	r0, [r7, #12]
 800cacc:	60b9      	str	r1, [r7, #8]
 800cace:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	6a1b      	ldr	r3, [r3, #32]
 800cad4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	6a1b      	ldr	r3, [r3, #32]
 800cada:	2201      	movs	r2, #1
 800cadc:	4393      	bics	r3, r2
 800cade:	001a      	movs	r2, r3
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	699b      	ldr	r3, [r3, #24]
 800cae8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800caea:	693b      	ldr	r3, [r7, #16]
 800caec:	22f0      	movs	r2, #240	; 0xf0
 800caee:	4393      	bics	r3, r2
 800caf0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	011b      	lsls	r3, r3, #4
 800caf6:	693a      	ldr	r2, [r7, #16]
 800caf8:	4313      	orrs	r3, r2
 800cafa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cafc:	697b      	ldr	r3, [r7, #20]
 800cafe:	220a      	movs	r2, #10
 800cb00:	4393      	bics	r3, r2
 800cb02:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cb04:	697a      	ldr	r2, [r7, #20]
 800cb06:	68bb      	ldr	r3, [r7, #8]
 800cb08:	4313      	orrs	r3, r2
 800cb0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	693a      	ldr	r2, [r7, #16]
 800cb10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	697a      	ldr	r2, [r7, #20]
 800cb16:	621a      	str	r2, [r3, #32]
}
 800cb18:	46c0      	nop			; (mov r8, r8)
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	b006      	add	sp, #24
 800cb1e:	bd80      	pop	{r7, pc}

0800cb20 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b086      	sub	sp, #24
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	60f8      	str	r0, [r7, #12]
 800cb28:	60b9      	str	r1, [r7, #8]
 800cb2a:	607a      	str	r2, [r7, #4]
 800cb2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	6a1b      	ldr	r3, [r3, #32]
 800cb32:	2210      	movs	r2, #16
 800cb34:	4393      	bics	r3, r2
 800cb36:	001a      	movs	r2, r3
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	699b      	ldr	r3, [r3, #24]
 800cb40:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	6a1b      	ldr	r3, [r3, #32]
 800cb46:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800cb48:	697b      	ldr	r3, [r7, #20]
 800cb4a:	4a14      	ldr	r2, [pc, #80]	; (800cb9c <TIM_TI2_SetConfig+0x7c>)
 800cb4c:	4013      	ands	r3, r2
 800cb4e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	021b      	lsls	r3, r3, #8
 800cb54:	697a      	ldr	r2, [r7, #20]
 800cb56:	4313      	orrs	r3, r2
 800cb58:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cb5a:	697b      	ldr	r3, [r7, #20]
 800cb5c:	4a10      	ldr	r2, [pc, #64]	; (800cba0 <TIM_TI2_SetConfig+0x80>)
 800cb5e:	4013      	ands	r3, r2
 800cb60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	031b      	lsls	r3, r3, #12
 800cb66:	041b      	lsls	r3, r3, #16
 800cb68:	0c1b      	lsrs	r3, r3, #16
 800cb6a:	697a      	ldr	r2, [r7, #20]
 800cb6c:	4313      	orrs	r3, r2
 800cb6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cb70:	693b      	ldr	r3, [r7, #16]
 800cb72:	22a0      	movs	r2, #160	; 0xa0
 800cb74:	4393      	bics	r3, r2
 800cb76:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800cb78:	68bb      	ldr	r3, [r7, #8]
 800cb7a:	011b      	lsls	r3, r3, #4
 800cb7c:	22a0      	movs	r2, #160	; 0xa0
 800cb7e:	4013      	ands	r3, r2
 800cb80:	693a      	ldr	r2, [r7, #16]
 800cb82:	4313      	orrs	r3, r2
 800cb84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	697a      	ldr	r2, [r7, #20]
 800cb8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	693a      	ldr	r2, [r7, #16]
 800cb90:	621a      	str	r2, [r3, #32]
}
 800cb92:	46c0      	nop			; (mov r8, r8)
 800cb94:	46bd      	mov	sp, r7
 800cb96:	b006      	add	sp, #24
 800cb98:	bd80      	pop	{r7, pc}
 800cb9a:	46c0      	nop			; (mov r8, r8)
 800cb9c:	fffffcff 	.word	0xfffffcff
 800cba0:	ffff0fff 	.word	0xffff0fff

0800cba4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b086      	sub	sp, #24
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	60f8      	str	r0, [r7, #12]
 800cbac:	60b9      	str	r1, [r7, #8]
 800cbae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	6a1b      	ldr	r3, [r3, #32]
 800cbb4:	2210      	movs	r2, #16
 800cbb6:	4393      	bics	r3, r2
 800cbb8:	001a      	movs	r2, r3
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	699b      	ldr	r3, [r3, #24]
 800cbc2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	6a1b      	ldr	r3, [r3, #32]
 800cbc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cbca:	697b      	ldr	r3, [r7, #20]
 800cbcc:	4a0d      	ldr	r2, [pc, #52]	; (800cc04 <TIM_TI2_ConfigInputStage+0x60>)
 800cbce:	4013      	ands	r3, r2
 800cbd0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	031b      	lsls	r3, r3, #12
 800cbd6:	697a      	ldr	r2, [r7, #20]
 800cbd8:	4313      	orrs	r3, r2
 800cbda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cbdc:	693b      	ldr	r3, [r7, #16]
 800cbde:	22a0      	movs	r2, #160	; 0xa0
 800cbe0:	4393      	bics	r3, r2
 800cbe2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cbe4:	68bb      	ldr	r3, [r7, #8]
 800cbe6:	011b      	lsls	r3, r3, #4
 800cbe8:	693a      	ldr	r2, [r7, #16]
 800cbea:	4313      	orrs	r3, r2
 800cbec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	697a      	ldr	r2, [r7, #20]
 800cbf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	693a      	ldr	r2, [r7, #16]
 800cbf8:	621a      	str	r2, [r3, #32]
}
 800cbfa:	46c0      	nop			; (mov r8, r8)
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	b006      	add	sp, #24
 800cc00:	bd80      	pop	{r7, pc}
 800cc02:	46c0      	nop			; (mov r8, r8)
 800cc04:	ffff0fff 	.word	0xffff0fff

0800cc08 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b086      	sub	sp, #24
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	60f8      	str	r0, [r7, #12]
 800cc10:	60b9      	str	r1, [r7, #8]
 800cc12:	607a      	str	r2, [r7, #4]
 800cc14:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	6a1b      	ldr	r3, [r3, #32]
 800cc1a:	4a19      	ldr	r2, [pc, #100]	; (800cc80 <TIM_TI3_SetConfig+0x78>)
 800cc1c:	401a      	ands	r2, r3
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	69db      	ldr	r3, [r3, #28]
 800cc26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	6a1b      	ldr	r3, [r3, #32]
 800cc2c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800cc2e:	697b      	ldr	r3, [r7, #20]
 800cc30:	2203      	movs	r2, #3
 800cc32:	4393      	bics	r3, r2
 800cc34:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800cc36:	697a      	ldr	r2, [r7, #20]
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	4313      	orrs	r3, r2
 800cc3c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800cc3e:	697b      	ldr	r3, [r7, #20]
 800cc40:	22f0      	movs	r2, #240	; 0xf0
 800cc42:	4393      	bics	r3, r2
 800cc44:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	011b      	lsls	r3, r3, #4
 800cc4a:	22ff      	movs	r2, #255	; 0xff
 800cc4c:	4013      	ands	r3, r2
 800cc4e:	697a      	ldr	r2, [r7, #20]
 800cc50:	4313      	orrs	r3, r2
 800cc52:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800cc54:	693b      	ldr	r3, [r7, #16]
 800cc56:	4a0b      	ldr	r2, [pc, #44]	; (800cc84 <TIM_TI3_SetConfig+0x7c>)
 800cc58:	4013      	ands	r3, r2
 800cc5a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800cc5c:	68bb      	ldr	r3, [r7, #8]
 800cc5e:	021a      	lsls	r2, r3, #8
 800cc60:	23a0      	movs	r3, #160	; 0xa0
 800cc62:	011b      	lsls	r3, r3, #4
 800cc64:	4013      	ands	r3, r2
 800cc66:	693a      	ldr	r2, [r7, #16]
 800cc68:	4313      	orrs	r3, r2
 800cc6a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	697a      	ldr	r2, [r7, #20]
 800cc70:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	693a      	ldr	r2, [r7, #16]
 800cc76:	621a      	str	r2, [r3, #32]
}
 800cc78:	46c0      	nop			; (mov r8, r8)
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	b006      	add	sp, #24
 800cc7e:	bd80      	pop	{r7, pc}
 800cc80:	fffffeff 	.word	0xfffffeff
 800cc84:	fffff5ff 	.word	0xfffff5ff

0800cc88 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b086      	sub	sp, #24
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	60f8      	str	r0, [r7, #12]
 800cc90:	60b9      	str	r1, [r7, #8]
 800cc92:	607a      	str	r2, [r7, #4]
 800cc94:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	6a1b      	ldr	r3, [r3, #32]
 800cc9a:	4a1a      	ldr	r2, [pc, #104]	; (800cd04 <TIM_TI4_SetConfig+0x7c>)
 800cc9c:	401a      	ands	r2, r3
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	69db      	ldr	r3, [r3, #28]
 800cca6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	6a1b      	ldr	r3, [r3, #32]
 800ccac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800ccae:	697b      	ldr	r3, [r7, #20]
 800ccb0:	4a15      	ldr	r2, [pc, #84]	; (800cd08 <TIM_TI4_SetConfig+0x80>)
 800ccb2:	4013      	ands	r3, r2
 800ccb4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	021b      	lsls	r3, r3, #8
 800ccba:	697a      	ldr	r2, [r7, #20]
 800ccbc:	4313      	orrs	r3, r2
 800ccbe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800ccc0:	697b      	ldr	r3, [r7, #20]
 800ccc2:	4a12      	ldr	r2, [pc, #72]	; (800cd0c <TIM_TI4_SetConfig+0x84>)
 800ccc4:	4013      	ands	r3, r2
 800ccc6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	031b      	lsls	r3, r3, #12
 800cccc:	041b      	lsls	r3, r3, #16
 800ccce:	0c1b      	lsrs	r3, r3, #16
 800ccd0:	697a      	ldr	r2, [r7, #20]
 800ccd2:	4313      	orrs	r3, r2
 800ccd4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800ccd6:	693b      	ldr	r3, [r7, #16]
 800ccd8:	4a0d      	ldr	r2, [pc, #52]	; (800cd10 <TIM_TI4_SetConfig+0x88>)
 800ccda:	4013      	ands	r3, r2
 800ccdc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800ccde:	68bb      	ldr	r3, [r7, #8]
 800cce0:	031a      	lsls	r2, r3, #12
 800cce2:	23a0      	movs	r3, #160	; 0xa0
 800cce4:	021b      	lsls	r3, r3, #8
 800cce6:	4013      	ands	r3, r2
 800cce8:	693a      	ldr	r2, [r7, #16]
 800ccea:	4313      	orrs	r3, r2
 800ccec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	697a      	ldr	r2, [r7, #20]
 800ccf2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	693a      	ldr	r2, [r7, #16]
 800ccf8:	621a      	str	r2, [r3, #32]
}
 800ccfa:	46c0      	nop			; (mov r8, r8)
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	b006      	add	sp, #24
 800cd00:	bd80      	pop	{r7, pc}
 800cd02:	46c0      	nop			; (mov r8, r8)
 800cd04:	ffffefff 	.word	0xffffefff
 800cd08:	fffffcff 	.word	0xfffffcff
 800cd0c:	ffff0fff 	.word	0xffff0fff
 800cd10:	ffff5fff 	.word	0xffff5fff

0800cd14 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b084      	sub	sp, #16
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
 800cd1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	689b      	ldr	r3, [r3, #8]
 800cd22:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	4a08      	ldr	r2, [pc, #32]	; (800cd48 <TIM_ITRx_SetConfig+0x34>)
 800cd28:	4013      	ands	r3, r2
 800cd2a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cd2c:	683a      	ldr	r2, [r7, #0]
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	4313      	orrs	r3, r2
 800cd32:	2207      	movs	r2, #7
 800cd34:	4313      	orrs	r3, r2
 800cd36:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	68fa      	ldr	r2, [r7, #12]
 800cd3c:	609a      	str	r2, [r3, #8]
}
 800cd3e:	46c0      	nop			; (mov r8, r8)
 800cd40:	46bd      	mov	sp, r7
 800cd42:	b004      	add	sp, #16
 800cd44:	bd80      	pop	{r7, pc}
 800cd46:	46c0      	nop			; (mov r8, r8)
 800cd48:	ffcfff8f 	.word	0xffcfff8f

0800cd4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b086      	sub	sp, #24
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	60f8      	str	r0, [r7, #12]
 800cd54:	60b9      	str	r1, [r7, #8]
 800cd56:	607a      	str	r2, [r7, #4]
 800cd58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	689b      	ldr	r3, [r3, #8]
 800cd5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cd60:	697b      	ldr	r3, [r7, #20]
 800cd62:	4a09      	ldr	r2, [pc, #36]	; (800cd88 <TIM_ETR_SetConfig+0x3c>)
 800cd64:	4013      	ands	r3, r2
 800cd66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	021a      	lsls	r2, r3, #8
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	431a      	orrs	r2, r3
 800cd70:	68bb      	ldr	r3, [r7, #8]
 800cd72:	4313      	orrs	r3, r2
 800cd74:	697a      	ldr	r2, [r7, #20]
 800cd76:	4313      	orrs	r3, r2
 800cd78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	697a      	ldr	r2, [r7, #20]
 800cd7e:	609a      	str	r2, [r3, #8]
}
 800cd80:	46c0      	nop			; (mov r8, r8)
 800cd82:	46bd      	mov	sp, r7
 800cd84:	b006      	add	sp, #24
 800cd86:	bd80      	pop	{r7, pc}
 800cd88:	ffff00ff 	.word	0xffff00ff

0800cd8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b086      	sub	sp, #24
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	60f8      	str	r0, [r7, #12]
 800cd94:	60b9      	str	r1, [r7, #8]
 800cd96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cd98:	68bb      	ldr	r3, [r7, #8]
 800cd9a:	221f      	movs	r2, #31
 800cd9c:	4013      	ands	r3, r2
 800cd9e:	2201      	movs	r2, #1
 800cda0:	409a      	lsls	r2, r3
 800cda2:	0013      	movs	r3, r2
 800cda4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	6a1b      	ldr	r3, [r3, #32]
 800cdaa:	697a      	ldr	r2, [r7, #20]
 800cdac:	43d2      	mvns	r2, r2
 800cdae:	401a      	ands	r2, r3
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	6a1a      	ldr	r2, [r3, #32]
 800cdb8:	68bb      	ldr	r3, [r7, #8]
 800cdba:	211f      	movs	r1, #31
 800cdbc:	400b      	ands	r3, r1
 800cdbe:	6879      	ldr	r1, [r7, #4]
 800cdc0:	4099      	lsls	r1, r3
 800cdc2:	000b      	movs	r3, r1
 800cdc4:	431a      	orrs	r2, r3
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	621a      	str	r2, [r3, #32]
}
 800cdca:	46c0      	nop			; (mov r8, r8)
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	b006      	add	sp, #24
 800cdd0:	bd80      	pop	{r7, pc}
	...

0800cdd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b084      	sub	sp, #16
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
 800cddc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	223c      	movs	r2, #60	; 0x3c
 800cde2:	5c9b      	ldrb	r3, [r3, r2]
 800cde4:	2b01      	cmp	r3, #1
 800cde6:	d101      	bne.n	800cdec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cde8:	2302      	movs	r3, #2
 800cdea:	e04f      	b.n	800ce8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	223c      	movs	r2, #60	; 0x3c
 800cdf0:	2101      	movs	r1, #1
 800cdf2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	223d      	movs	r2, #61	; 0x3d
 800cdf8:	2102      	movs	r1, #2
 800cdfa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	685b      	ldr	r3, [r3, #4]
 800ce02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	689b      	ldr	r3, [r3, #8]
 800ce0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	4a20      	ldr	r2, [pc, #128]	; (800ce94 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800ce12:	4293      	cmp	r3, r2
 800ce14:	d108      	bne.n	800ce28 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	4a1f      	ldr	r2, [pc, #124]	; (800ce98 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800ce1a:	4013      	ands	r3, r2
 800ce1c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ce1e:	683b      	ldr	r3, [r7, #0]
 800ce20:	685b      	ldr	r3, [r3, #4]
 800ce22:	68fa      	ldr	r2, [r7, #12]
 800ce24:	4313      	orrs	r3, r2
 800ce26:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	2270      	movs	r2, #112	; 0x70
 800ce2c:	4393      	bics	r3, r2
 800ce2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	68fa      	ldr	r2, [r7, #12]
 800ce36:	4313      	orrs	r3, r2
 800ce38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	68fa      	ldr	r2, [r7, #12]
 800ce40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	4a13      	ldr	r2, [pc, #76]	; (800ce94 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800ce48:	4293      	cmp	r3, r2
 800ce4a:	d009      	beq.n	800ce60 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	4a12      	ldr	r2, [pc, #72]	; (800ce9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800ce52:	4293      	cmp	r3, r2
 800ce54:	d004      	beq.n	800ce60 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	4a11      	ldr	r2, [pc, #68]	; (800cea0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800ce5c:	4293      	cmp	r3, r2
 800ce5e:	d10c      	bne.n	800ce7a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ce60:	68bb      	ldr	r3, [r7, #8]
 800ce62:	2280      	movs	r2, #128	; 0x80
 800ce64:	4393      	bics	r3, r2
 800ce66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	689b      	ldr	r3, [r3, #8]
 800ce6c:	68ba      	ldr	r2, [r7, #8]
 800ce6e:	4313      	orrs	r3, r2
 800ce70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	68ba      	ldr	r2, [r7, #8]
 800ce78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	223d      	movs	r2, #61	; 0x3d
 800ce7e:	2101      	movs	r1, #1
 800ce80:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	223c      	movs	r2, #60	; 0x3c
 800ce86:	2100      	movs	r1, #0
 800ce88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ce8a:	2300      	movs	r3, #0
}
 800ce8c:	0018      	movs	r0, r3
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	b004      	add	sp, #16
 800ce92:	bd80      	pop	{r7, pc}
 800ce94:	40012c00 	.word	0x40012c00
 800ce98:	ff0fffff 	.word	0xff0fffff
 800ce9c:	40000400 	.word	0x40000400
 800cea0:	40014000 	.word	0x40014000

0800cea4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b082      	sub	sp, #8
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ceac:	46c0      	nop			; (mov r8, r8)
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	b002      	add	sp, #8
 800ceb2:	bd80      	pop	{r7, pc}

0800ceb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b082      	sub	sp, #8
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cebc:	46c0      	nop			; (mov r8, r8)
 800cebe:	46bd      	mov	sp, r7
 800cec0:	b002      	add	sp, #8
 800cec2:	bd80      	pop	{r7, pc}

0800cec4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b082      	sub	sp, #8
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cecc:	46c0      	nop			; (mov r8, r8)
 800cece:	46bd      	mov	sp, r7
 800ced0:	b002      	add	sp, #8
 800ced2:	bd80      	pop	{r7, pc}

0800ced4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b082      	sub	sp, #8
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d101      	bne.n	800cee6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cee2:	2301      	movs	r3, #1
 800cee4:	e046      	b.n	800cf74 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	2288      	movs	r2, #136	; 0x88
 800ceea:	589b      	ldr	r3, [r3, r2]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d107      	bne.n	800cf00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2284      	movs	r2, #132	; 0x84
 800cef4:	2100      	movs	r1, #0
 800cef6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	0018      	movs	r0, r3
 800cefc:	f7fb fdb6 	bl	8008a6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	2288      	movs	r2, #136	; 0x88
 800cf04:	2124      	movs	r1, #36	; 0x24
 800cf06:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	681a      	ldr	r2, [r3, #0]
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	2101      	movs	r1, #1
 800cf14:	438a      	bics	r2, r1
 800cf16:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	0018      	movs	r0, r3
 800cf1c:	f000 fc5e 	bl	800d7dc <UART_SetConfig>
 800cf20:	0003      	movs	r3, r0
 800cf22:	2b01      	cmp	r3, #1
 800cf24:	d101      	bne.n	800cf2a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800cf26:	2301      	movs	r3, #1
 800cf28:	e024      	b.n	800cf74 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d003      	beq.n	800cf3a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	0018      	movs	r0, r3
 800cf36:	f000 fdf5 	bl	800db24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	685a      	ldr	r2, [r3, #4]
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	490d      	ldr	r1, [pc, #52]	; (800cf7c <HAL_UART_Init+0xa8>)
 800cf46:	400a      	ands	r2, r1
 800cf48:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	689a      	ldr	r2, [r3, #8]
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	212a      	movs	r1, #42	; 0x2a
 800cf56:	438a      	bics	r2, r1
 800cf58:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	681a      	ldr	r2, [r3, #0]
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	2101      	movs	r1, #1
 800cf66:	430a      	orrs	r2, r1
 800cf68:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	0018      	movs	r0, r3
 800cf6e:	f000 fe8d 	bl	800dc8c <UART_CheckIdleState>
 800cf72:	0003      	movs	r3, r0
}
 800cf74:	0018      	movs	r0, r3
 800cf76:	46bd      	mov	sp, r7
 800cf78:	b002      	add	sp, #8
 800cf7a:	bd80      	pop	{r7, pc}
 800cf7c:	ffffb7ff 	.word	0xffffb7ff

0800cf80 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b08a      	sub	sp, #40	; 0x28
 800cf84:	af02      	add	r7, sp, #8
 800cf86:	60f8      	str	r0, [r7, #12]
 800cf88:	60b9      	str	r1, [r7, #8]
 800cf8a:	603b      	str	r3, [r7, #0]
 800cf8c:	1dbb      	adds	r3, r7, #6
 800cf8e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	2288      	movs	r2, #136	; 0x88
 800cf94:	589b      	ldr	r3, [r3, r2]
 800cf96:	2b20      	cmp	r3, #32
 800cf98:	d000      	beq.n	800cf9c <HAL_UART_Transmit+0x1c>
 800cf9a:	e088      	b.n	800d0ae <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 800cf9c:	68bb      	ldr	r3, [r7, #8]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d003      	beq.n	800cfaa <HAL_UART_Transmit+0x2a>
 800cfa2:	1dbb      	adds	r3, r7, #6
 800cfa4:	881b      	ldrh	r3, [r3, #0]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d101      	bne.n	800cfae <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800cfaa:	2301      	movs	r3, #1
 800cfac:	e080      	b.n	800d0b0 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	689a      	ldr	r2, [r3, #8]
 800cfb2:	2380      	movs	r3, #128	; 0x80
 800cfb4:	015b      	lsls	r3, r3, #5
 800cfb6:	429a      	cmp	r2, r3
 800cfb8:	d109      	bne.n	800cfce <HAL_UART_Transmit+0x4e>
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	691b      	ldr	r3, [r3, #16]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d105      	bne.n	800cfce <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800cfc2:	68bb      	ldr	r3, [r7, #8]
 800cfc4:	2201      	movs	r2, #1
 800cfc6:	4013      	ands	r3, r2
 800cfc8:	d001      	beq.n	800cfce <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800cfca:	2301      	movs	r3, #1
 800cfcc:	e070      	b.n	800d0b0 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	2290      	movs	r2, #144	; 0x90
 800cfd2:	2100      	movs	r1, #0
 800cfd4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	2288      	movs	r2, #136	; 0x88
 800cfda:	2121      	movs	r1, #33	; 0x21
 800cfdc:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cfde:	f7fc fd87 	bl	8009af0 <HAL_GetTick>
 800cfe2:	0003      	movs	r3, r0
 800cfe4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	1dba      	adds	r2, r7, #6
 800cfea:	2154      	movs	r1, #84	; 0x54
 800cfec:	8812      	ldrh	r2, [r2, #0]
 800cfee:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	1dba      	adds	r2, r7, #6
 800cff4:	2156      	movs	r1, #86	; 0x56
 800cff6:	8812      	ldrh	r2, [r2, #0]
 800cff8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	689a      	ldr	r2, [r3, #8]
 800cffe:	2380      	movs	r3, #128	; 0x80
 800d000:	015b      	lsls	r3, r3, #5
 800d002:	429a      	cmp	r2, r3
 800d004:	d108      	bne.n	800d018 <HAL_UART_Transmit+0x98>
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	691b      	ldr	r3, [r3, #16]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d104      	bne.n	800d018 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800d00e:	2300      	movs	r3, #0
 800d010:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d012:	68bb      	ldr	r3, [r7, #8]
 800d014:	61bb      	str	r3, [r7, #24]
 800d016:	e003      	b.n	800d020 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800d018:	68bb      	ldr	r3, [r7, #8]
 800d01a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d01c:	2300      	movs	r3, #0
 800d01e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d020:	e02c      	b.n	800d07c <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d022:	697a      	ldr	r2, [r7, #20]
 800d024:	68f8      	ldr	r0, [r7, #12]
 800d026:	683b      	ldr	r3, [r7, #0]
 800d028:	9300      	str	r3, [sp, #0]
 800d02a:	0013      	movs	r3, r2
 800d02c:	2200      	movs	r2, #0
 800d02e:	2180      	movs	r1, #128	; 0x80
 800d030:	f000 fe7a 	bl	800dd28 <UART_WaitOnFlagUntilTimeout>
 800d034:	1e03      	subs	r3, r0, #0
 800d036:	d001      	beq.n	800d03c <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 800d038:	2303      	movs	r3, #3
 800d03a:	e039      	b.n	800d0b0 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 800d03c:	69fb      	ldr	r3, [r7, #28]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d10b      	bne.n	800d05a <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d042:	69bb      	ldr	r3, [r7, #24]
 800d044:	881b      	ldrh	r3, [r3, #0]
 800d046:	001a      	movs	r2, r3
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	05d2      	lsls	r2, r2, #23
 800d04e:	0dd2      	lsrs	r2, r2, #23
 800d050:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d052:	69bb      	ldr	r3, [r7, #24]
 800d054:	3302      	adds	r3, #2
 800d056:	61bb      	str	r3, [r7, #24]
 800d058:	e007      	b.n	800d06a <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d05a:	69fb      	ldr	r3, [r7, #28]
 800d05c:	781a      	ldrb	r2, [r3, #0]
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d064:	69fb      	ldr	r3, [r7, #28]
 800d066:	3301      	adds	r3, #1
 800d068:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	2256      	movs	r2, #86	; 0x56
 800d06e:	5a9b      	ldrh	r3, [r3, r2]
 800d070:	b29b      	uxth	r3, r3
 800d072:	3b01      	subs	r3, #1
 800d074:	b299      	uxth	r1, r3
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	2256      	movs	r2, #86	; 0x56
 800d07a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	2256      	movs	r2, #86	; 0x56
 800d080:	5a9b      	ldrh	r3, [r3, r2]
 800d082:	b29b      	uxth	r3, r3
 800d084:	2b00      	cmp	r3, #0
 800d086:	d1cc      	bne.n	800d022 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d088:	697a      	ldr	r2, [r7, #20]
 800d08a:	68f8      	ldr	r0, [r7, #12]
 800d08c:	683b      	ldr	r3, [r7, #0]
 800d08e:	9300      	str	r3, [sp, #0]
 800d090:	0013      	movs	r3, r2
 800d092:	2200      	movs	r2, #0
 800d094:	2140      	movs	r1, #64	; 0x40
 800d096:	f000 fe47 	bl	800dd28 <UART_WaitOnFlagUntilTimeout>
 800d09a:	1e03      	subs	r3, r0, #0
 800d09c:	d001      	beq.n	800d0a2 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 800d09e:	2303      	movs	r3, #3
 800d0a0:	e006      	b.n	800d0b0 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	2288      	movs	r2, #136	; 0x88
 800d0a6:	2120      	movs	r1, #32
 800d0a8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	e000      	b.n	800d0b0 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 800d0ae:	2302      	movs	r3, #2
  }
}
 800d0b0:	0018      	movs	r0, r3
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	b008      	add	sp, #32
 800d0b6:	bd80      	pop	{r7, pc}

0800d0b8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b088      	sub	sp, #32
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	60f8      	str	r0, [r7, #12]
 800d0c0:	60b9      	str	r1, [r7, #8]
 800d0c2:	1dbb      	adds	r3, r7, #6
 800d0c4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	228c      	movs	r2, #140	; 0x8c
 800d0ca:	589b      	ldr	r3, [r3, r2]
 800d0cc:	2b20      	cmp	r3, #32
 800d0ce:	d145      	bne.n	800d15c <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 800d0d0:	68bb      	ldr	r3, [r7, #8]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d003      	beq.n	800d0de <HAL_UART_Receive_IT+0x26>
 800d0d6:	1dbb      	adds	r3, r7, #6
 800d0d8:	881b      	ldrh	r3, [r3, #0]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d101      	bne.n	800d0e2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800d0de:	2301      	movs	r3, #1
 800d0e0:	e03d      	b.n	800d15e <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	689a      	ldr	r2, [r3, #8]
 800d0e6:	2380      	movs	r3, #128	; 0x80
 800d0e8:	015b      	lsls	r3, r3, #5
 800d0ea:	429a      	cmp	r2, r3
 800d0ec:	d109      	bne.n	800d102 <HAL_UART_Receive_IT+0x4a>
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	691b      	ldr	r3, [r3, #16]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d105      	bne.n	800d102 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800d0f6:	68bb      	ldr	r3, [r7, #8]
 800d0f8:	2201      	movs	r2, #1
 800d0fa:	4013      	ands	r3, r2
 800d0fc:	d001      	beq.n	800d102 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800d0fe:	2301      	movs	r3, #1
 800d100:	e02d      	b.n	800d15e <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	2200      	movs	r2, #0
 800d106:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	685a      	ldr	r2, [r3, #4]
 800d10e:	2380      	movs	r3, #128	; 0x80
 800d110:	041b      	lsls	r3, r3, #16
 800d112:	4013      	ands	r3, r2
 800d114:	d019      	beq.n	800d14a <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d116:	f3ef 8310 	mrs	r3, PRIMASK
 800d11a:	613b      	str	r3, [r7, #16]
  return(result);
 800d11c:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d11e:	61fb      	str	r3, [r7, #28]
 800d120:	2301      	movs	r3, #1
 800d122:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d124:	697b      	ldr	r3, [r7, #20]
 800d126:	f383 8810 	msr	PRIMASK, r3
}
 800d12a:	46c0      	nop			; (mov r8, r8)
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	681a      	ldr	r2, [r3, #0]
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	2180      	movs	r1, #128	; 0x80
 800d138:	04c9      	lsls	r1, r1, #19
 800d13a:	430a      	orrs	r2, r1
 800d13c:	601a      	str	r2, [r3, #0]
 800d13e:	69fb      	ldr	r3, [r7, #28]
 800d140:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d142:	69bb      	ldr	r3, [r7, #24]
 800d144:	f383 8810 	msr	PRIMASK, r3
}
 800d148:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800d14a:	1dbb      	adds	r3, r7, #6
 800d14c:	881a      	ldrh	r2, [r3, #0]
 800d14e:	68b9      	ldr	r1, [r7, #8]
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	0018      	movs	r0, r3
 800d154:	f000 feb0 	bl	800deb8 <UART_Start_Receive_IT>
 800d158:	0003      	movs	r3, r0
 800d15a:	e000      	b.n	800d15e <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 800d15c:	2302      	movs	r3, #2
  }
}
 800d15e:	0018      	movs	r0, r3
 800d160:	46bd      	mov	sp, r7
 800d162:	b008      	add	sp, #32
 800d164:	bd80      	pop	{r7, pc}
	...

0800d168 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d168:	b5b0      	push	{r4, r5, r7, lr}
 800d16a:	b0aa      	sub	sp, #168	; 0xa8
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	69db      	ldr	r3, [r3, #28]
 800d176:	22a4      	movs	r2, #164	; 0xa4
 800d178:	18b9      	adds	r1, r7, r2
 800d17a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	20a0      	movs	r0, #160	; 0xa0
 800d184:	1839      	adds	r1, r7, r0
 800d186:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	689b      	ldr	r3, [r3, #8]
 800d18e:	249c      	movs	r4, #156	; 0x9c
 800d190:	1939      	adds	r1, r7, r4
 800d192:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d194:	0011      	movs	r1, r2
 800d196:	18bb      	adds	r3, r7, r2
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	4aa2      	ldr	r2, [pc, #648]	; (800d424 <HAL_UART_IRQHandler+0x2bc>)
 800d19c:	4013      	ands	r3, r2
 800d19e:	2298      	movs	r2, #152	; 0x98
 800d1a0:	18bd      	adds	r5, r7, r2
 800d1a2:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800d1a4:	18bb      	adds	r3, r7, r2
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d11a      	bne.n	800d1e2 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d1ac:	187b      	adds	r3, r7, r1
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	2220      	movs	r2, #32
 800d1b2:	4013      	ands	r3, r2
 800d1b4:	d015      	beq.n	800d1e2 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d1b6:	183b      	adds	r3, r7, r0
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	2220      	movs	r2, #32
 800d1bc:	4013      	ands	r3, r2
 800d1be:	d105      	bne.n	800d1cc <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d1c0:	193b      	adds	r3, r7, r4
 800d1c2:	681a      	ldr	r2, [r3, #0]
 800d1c4:	2380      	movs	r3, #128	; 0x80
 800d1c6:	055b      	lsls	r3, r3, #21
 800d1c8:	4013      	ands	r3, r2
 800d1ca:	d00a      	beq.n	800d1e2 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d100      	bne.n	800d1d6 <HAL_UART_IRQHandler+0x6e>
 800d1d4:	e2dc      	b.n	800d790 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d1da:	687a      	ldr	r2, [r7, #4]
 800d1dc:	0010      	movs	r0, r2
 800d1de:	4798      	blx	r3
      }
      return;
 800d1e0:	e2d6      	b.n	800d790 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d1e2:	2398      	movs	r3, #152	; 0x98
 800d1e4:	18fb      	adds	r3, r7, r3
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d100      	bne.n	800d1ee <HAL_UART_IRQHandler+0x86>
 800d1ec:	e122      	b.n	800d434 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d1ee:	239c      	movs	r3, #156	; 0x9c
 800d1f0:	18fb      	adds	r3, r7, r3
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	4a8c      	ldr	r2, [pc, #560]	; (800d428 <HAL_UART_IRQHandler+0x2c0>)
 800d1f6:	4013      	ands	r3, r2
 800d1f8:	d106      	bne.n	800d208 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d1fa:	23a0      	movs	r3, #160	; 0xa0
 800d1fc:	18fb      	adds	r3, r7, r3
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	4a8a      	ldr	r2, [pc, #552]	; (800d42c <HAL_UART_IRQHandler+0x2c4>)
 800d202:	4013      	ands	r3, r2
 800d204:	d100      	bne.n	800d208 <HAL_UART_IRQHandler+0xa0>
 800d206:	e115      	b.n	800d434 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d208:	23a4      	movs	r3, #164	; 0xa4
 800d20a:	18fb      	adds	r3, r7, r3
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	2201      	movs	r2, #1
 800d210:	4013      	ands	r3, r2
 800d212:	d012      	beq.n	800d23a <HAL_UART_IRQHandler+0xd2>
 800d214:	23a0      	movs	r3, #160	; 0xa0
 800d216:	18fb      	adds	r3, r7, r3
 800d218:	681a      	ldr	r2, [r3, #0]
 800d21a:	2380      	movs	r3, #128	; 0x80
 800d21c:	005b      	lsls	r3, r3, #1
 800d21e:	4013      	ands	r3, r2
 800d220:	d00b      	beq.n	800d23a <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	2201      	movs	r2, #1
 800d228:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	2290      	movs	r2, #144	; 0x90
 800d22e:	589b      	ldr	r3, [r3, r2]
 800d230:	2201      	movs	r2, #1
 800d232:	431a      	orrs	r2, r3
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	2190      	movs	r1, #144	; 0x90
 800d238:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d23a:	23a4      	movs	r3, #164	; 0xa4
 800d23c:	18fb      	adds	r3, r7, r3
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	2202      	movs	r2, #2
 800d242:	4013      	ands	r3, r2
 800d244:	d011      	beq.n	800d26a <HAL_UART_IRQHandler+0x102>
 800d246:	239c      	movs	r3, #156	; 0x9c
 800d248:	18fb      	adds	r3, r7, r3
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	2201      	movs	r2, #1
 800d24e:	4013      	ands	r3, r2
 800d250:	d00b      	beq.n	800d26a <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	2202      	movs	r2, #2
 800d258:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	2290      	movs	r2, #144	; 0x90
 800d25e:	589b      	ldr	r3, [r3, r2]
 800d260:	2204      	movs	r2, #4
 800d262:	431a      	orrs	r2, r3
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	2190      	movs	r1, #144	; 0x90
 800d268:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d26a:	23a4      	movs	r3, #164	; 0xa4
 800d26c:	18fb      	adds	r3, r7, r3
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	2204      	movs	r2, #4
 800d272:	4013      	ands	r3, r2
 800d274:	d011      	beq.n	800d29a <HAL_UART_IRQHandler+0x132>
 800d276:	239c      	movs	r3, #156	; 0x9c
 800d278:	18fb      	adds	r3, r7, r3
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	2201      	movs	r2, #1
 800d27e:	4013      	ands	r3, r2
 800d280:	d00b      	beq.n	800d29a <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	2204      	movs	r2, #4
 800d288:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	2290      	movs	r2, #144	; 0x90
 800d28e:	589b      	ldr	r3, [r3, r2]
 800d290:	2202      	movs	r2, #2
 800d292:	431a      	orrs	r2, r3
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	2190      	movs	r1, #144	; 0x90
 800d298:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d29a:	23a4      	movs	r3, #164	; 0xa4
 800d29c:	18fb      	adds	r3, r7, r3
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	2208      	movs	r2, #8
 800d2a2:	4013      	ands	r3, r2
 800d2a4:	d017      	beq.n	800d2d6 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d2a6:	23a0      	movs	r3, #160	; 0xa0
 800d2a8:	18fb      	adds	r3, r7, r3
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	2220      	movs	r2, #32
 800d2ae:	4013      	ands	r3, r2
 800d2b0:	d105      	bne.n	800d2be <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d2b2:	239c      	movs	r3, #156	; 0x9c
 800d2b4:	18fb      	adds	r3, r7, r3
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	4a5b      	ldr	r2, [pc, #364]	; (800d428 <HAL_UART_IRQHandler+0x2c0>)
 800d2ba:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d2bc:	d00b      	beq.n	800d2d6 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	2208      	movs	r2, #8
 800d2c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	2290      	movs	r2, #144	; 0x90
 800d2ca:	589b      	ldr	r3, [r3, r2]
 800d2cc:	2208      	movs	r2, #8
 800d2ce:	431a      	orrs	r2, r3
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	2190      	movs	r1, #144	; 0x90
 800d2d4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d2d6:	23a4      	movs	r3, #164	; 0xa4
 800d2d8:	18fb      	adds	r3, r7, r3
 800d2da:	681a      	ldr	r2, [r3, #0]
 800d2dc:	2380      	movs	r3, #128	; 0x80
 800d2de:	011b      	lsls	r3, r3, #4
 800d2e0:	4013      	ands	r3, r2
 800d2e2:	d013      	beq.n	800d30c <HAL_UART_IRQHandler+0x1a4>
 800d2e4:	23a0      	movs	r3, #160	; 0xa0
 800d2e6:	18fb      	adds	r3, r7, r3
 800d2e8:	681a      	ldr	r2, [r3, #0]
 800d2ea:	2380      	movs	r3, #128	; 0x80
 800d2ec:	04db      	lsls	r3, r3, #19
 800d2ee:	4013      	ands	r3, r2
 800d2f0:	d00c      	beq.n	800d30c <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	2280      	movs	r2, #128	; 0x80
 800d2f8:	0112      	lsls	r2, r2, #4
 800d2fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	2290      	movs	r2, #144	; 0x90
 800d300:	589b      	ldr	r3, [r3, r2]
 800d302:	2220      	movs	r2, #32
 800d304:	431a      	orrs	r2, r3
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	2190      	movs	r1, #144	; 0x90
 800d30a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	2290      	movs	r2, #144	; 0x90
 800d310:	589b      	ldr	r3, [r3, r2]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d100      	bne.n	800d318 <HAL_UART_IRQHandler+0x1b0>
 800d316:	e23d      	b.n	800d794 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d318:	23a4      	movs	r3, #164	; 0xa4
 800d31a:	18fb      	adds	r3, r7, r3
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	2220      	movs	r2, #32
 800d320:	4013      	ands	r3, r2
 800d322:	d015      	beq.n	800d350 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d324:	23a0      	movs	r3, #160	; 0xa0
 800d326:	18fb      	adds	r3, r7, r3
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	2220      	movs	r2, #32
 800d32c:	4013      	ands	r3, r2
 800d32e:	d106      	bne.n	800d33e <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d330:	239c      	movs	r3, #156	; 0x9c
 800d332:	18fb      	adds	r3, r7, r3
 800d334:	681a      	ldr	r2, [r3, #0]
 800d336:	2380      	movs	r3, #128	; 0x80
 800d338:	055b      	lsls	r3, r3, #21
 800d33a:	4013      	ands	r3, r2
 800d33c:	d008      	beq.n	800d350 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d342:	2b00      	cmp	r3, #0
 800d344:	d004      	beq.n	800d350 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d34a:	687a      	ldr	r2, [r7, #4]
 800d34c:	0010      	movs	r0, r2
 800d34e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	2290      	movs	r2, #144	; 0x90
 800d354:	589b      	ldr	r3, [r3, r2]
 800d356:	2194      	movs	r1, #148	; 0x94
 800d358:	187a      	adds	r2, r7, r1
 800d35a:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	689b      	ldr	r3, [r3, #8]
 800d362:	2240      	movs	r2, #64	; 0x40
 800d364:	4013      	ands	r3, r2
 800d366:	2b40      	cmp	r3, #64	; 0x40
 800d368:	d004      	beq.n	800d374 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d36a:	187b      	adds	r3, r7, r1
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	2228      	movs	r2, #40	; 0x28
 800d370:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d372:	d04c      	beq.n	800d40e <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	0018      	movs	r0, r3
 800d378:	f000 fec2 	bl	800e100 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	689b      	ldr	r3, [r3, #8]
 800d382:	2240      	movs	r2, #64	; 0x40
 800d384:	4013      	ands	r3, r2
 800d386:	2b40      	cmp	r3, #64	; 0x40
 800d388:	d13c      	bne.n	800d404 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d38a:	f3ef 8310 	mrs	r3, PRIMASK
 800d38e:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800d390:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d392:	2090      	movs	r0, #144	; 0x90
 800d394:	183a      	adds	r2, r7, r0
 800d396:	6013      	str	r3, [r2, #0]
 800d398:	2301      	movs	r3, #1
 800d39a:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d39c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d39e:	f383 8810 	msr	PRIMASK, r3
}
 800d3a2:	46c0      	nop			; (mov r8, r8)
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	689a      	ldr	r2, [r3, #8]
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	2140      	movs	r1, #64	; 0x40
 800d3b0:	438a      	bics	r2, r1
 800d3b2:	609a      	str	r2, [r3, #8]
 800d3b4:	183b      	adds	r3, r7, r0
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d3ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d3bc:	f383 8810 	msr	PRIMASK, r3
}
 800d3c0:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	2280      	movs	r2, #128	; 0x80
 800d3c6:	589b      	ldr	r3, [r3, r2]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d016      	beq.n	800d3fa <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	2280      	movs	r2, #128	; 0x80
 800d3d0:	589b      	ldr	r3, [r3, r2]
 800d3d2:	4a17      	ldr	r2, [pc, #92]	; (800d430 <HAL_UART_IRQHandler+0x2c8>)
 800d3d4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	2280      	movs	r2, #128	; 0x80
 800d3da:	589b      	ldr	r3, [r3, r2]
 800d3dc:	0018      	movs	r0, r3
 800d3de:	f7fc fcf5 	bl	8009dcc <HAL_DMA_Abort_IT>
 800d3e2:	1e03      	subs	r3, r0, #0
 800d3e4:	d01c      	beq.n	800d420 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	2280      	movs	r2, #128	; 0x80
 800d3ea:	589b      	ldr	r3, [r3, r2]
 800d3ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3ee:	687a      	ldr	r2, [r7, #4]
 800d3f0:	2180      	movs	r1, #128	; 0x80
 800d3f2:	5852      	ldr	r2, [r2, r1]
 800d3f4:	0010      	movs	r0, r2
 800d3f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d3f8:	e012      	b.n	800d420 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	0018      	movs	r0, r3
 800d3fe:	f7f7 f899 	bl	8004534 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d402:	e00d      	b.n	800d420 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	0018      	movs	r0, r3
 800d408:	f7f7 f894 	bl	8004534 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d40c:	e008      	b.n	800d420 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	0018      	movs	r0, r3
 800d412:	f7f7 f88f 	bl	8004534 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	2290      	movs	r2, #144	; 0x90
 800d41a:	2100      	movs	r1, #0
 800d41c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800d41e:	e1b9      	b.n	800d794 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d420:	46c0      	nop			; (mov r8, r8)
    return;
 800d422:	e1b7      	b.n	800d794 <HAL_UART_IRQHandler+0x62c>
 800d424:	0000080f 	.word	0x0000080f
 800d428:	10000001 	.word	0x10000001
 800d42c:	04000120 	.word	0x04000120
 800d430:	0800e1cd 	.word	0x0800e1cd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d438:	2b01      	cmp	r3, #1
 800d43a:	d000      	beq.n	800d43e <HAL_UART_IRQHandler+0x2d6>
 800d43c:	e13e      	b.n	800d6bc <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d43e:	23a4      	movs	r3, #164	; 0xa4
 800d440:	18fb      	adds	r3, r7, r3
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	2210      	movs	r2, #16
 800d446:	4013      	ands	r3, r2
 800d448:	d100      	bne.n	800d44c <HAL_UART_IRQHandler+0x2e4>
 800d44a:	e137      	b.n	800d6bc <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d44c:	23a0      	movs	r3, #160	; 0xa0
 800d44e:	18fb      	adds	r3, r7, r3
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	2210      	movs	r2, #16
 800d454:	4013      	ands	r3, r2
 800d456:	d100      	bne.n	800d45a <HAL_UART_IRQHandler+0x2f2>
 800d458:	e130      	b.n	800d6bc <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	2210      	movs	r2, #16
 800d460:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	689b      	ldr	r3, [r3, #8]
 800d468:	2240      	movs	r2, #64	; 0x40
 800d46a:	4013      	ands	r3, r2
 800d46c:	2b40      	cmp	r3, #64	; 0x40
 800d46e:	d000      	beq.n	800d472 <HAL_UART_IRQHandler+0x30a>
 800d470:	e0a4      	b.n	800d5bc <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	2280      	movs	r2, #128	; 0x80
 800d476:	589b      	ldr	r3, [r3, r2]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	685a      	ldr	r2, [r3, #4]
 800d47c:	217e      	movs	r1, #126	; 0x7e
 800d47e:	187b      	adds	r3, r7, r1
 800d480:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800d482:	187b      	adds	r3, r7, r1
 800d484:	881b      	ldrh	r3, [r3, #0]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d100      	bne.n	800d48c <HAL_UART_IRQHandler+0x324>
 800d48a:	e185      	b.n	800d798 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	225c      	movs	r2, #92	; 0x5c
 800d490:	5a9b      	ldrh	r3, [r3, r2]
 800d492:	187a      	adds	r2, r7, r1
 800d494:	8812      	ldrh	r2, [r2, #0]
 800d496:	429a      	cmp	r2, r3
 800d498:	d300      	bcc.n	800d49c <HAL_UART_IRQHandler+0x334>
 800d49a:	e17d      	b.n	800d798 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	187a      	adds	r2, r7, r1
 800d4a0:	215e      	movs	r1, #94	; 0x5e
 800d4a2:	8812      	ldrh	r2, [r2, #0]
 800d4a4:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	2280      	movs	r2, #128	; 0x80
 800d4aa:	589b      	ldr	r3, [r3, r2]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	2220      	movs	r2, #32
 800d4b2:	4013      	ands	r3, r2
 800d4b4:	d170      	bne.n	800d598 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d4b6:	f3ef 8310 	mrs	r3, PRIMASK
 800d4ba:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800d4bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d4be:	67bb      	str	r3, [r7, #120]	; 0x78
 800d4c0:	2301      	movs	r3, #1
 800d4c2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d4c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4c6:	f383 8810 	msr	PRIMASK, r3
}
 800d4ca:	46c0      	nop			; (mov r8, r8)
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	681a      	ldr	r2, [r3, #0]
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	49b4      	ldr	r1, [pc, #720]	; (800d7a8 <HAL_UART_IRQHandler+0x640>)
 800d4d8:	400a      	ands	r2, r1
 800d4da:	601a      	str	r2, [r3, #0]
 800d4dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d4de:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d4e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4e2:	f383 8810 	msr	PRIMASK, r3
}
 800d4e6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d4e8:	f3ef 8310 	mrs	r3, PRIMASK
 800d4ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800d4ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d4f0:	677b      	str	r3, [r7, #116]	; 0x74
 800d4f2:	2301      	movs	r3, #1
 800d4f4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d4f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4f8:	f383 8810 	msr	PRIMASK, r3
}
 800d4fc:	46c0      	nop			; (mov r8, r8)
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	689a      	ldr	r2, [r3, #8]
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	2101      	movs	r1, #1
 800d50a:	438a      	bics	r2, r1
 800d50c:	609a      	str	r2, [r3, #8]
 800d50e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d510:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d512:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d514:	f383 8810 	msr	PRIMASK, r3
}
 800d518:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d51a:	f3ef 8310 	mrs	r3, PRIMASK
 800d51e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800d520:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d522:	673b      	str	r3, [r7, #112]	; 0x70
 800d524:	2301      	movs	r3, #1
 800d526:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d528:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d52a:	f383 8810 	msr	PRIMASK, r3
}
 800d52e:	46c0      	nop			; (mov r8, r8)
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	689a      	ldr	r2, [r3, #8]
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	2140      	movs	r1, #64	; 0x40
 800d53c:	438a      	bics	r2, r1
 800d53e:	609a      	str	r2, [r3, #8]
 800d540:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d542:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d544:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d546:	f383 8810 	msr	PRIMASK, r3
}
 800d54a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	228c      	movs	r2, #140	; 0x8c
 800d550:	2120      	movs	r1, #32
 800d552:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	2200      	movs	r2, #0
 800d558:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d55a:	f3ef 8310 	mrs	r3, PRIMASK
 800d55e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800d560:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d562:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d564:	2301      	movs	r3, #1
 800d566:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d568:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d56a:	f383 8810 	msr	PRIMASK, r3
}
 800d56e:	46c0      	nop			; (mov r8, r8)
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	681a      	ldr	r2, [r3, #0]
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	2110      	movs	r1, #16
 800d57c:	438a      	bics	r2, r1
 800d57e:	601a      	str	r2, [r3, #0]
 800d580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d582:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d584:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d586:	f383 8810 	msr	PRIMASK, r3
}
 800d58a:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	2280      	movs	r2, #128	; 0x80
 800d590:	589b      	ldr	r3, [r3, r2]
 800d592:	0018      	movs	r0, r3
 800d594:	f7fc fbb8 	bl	8009d08 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	2202      	movs	r2, #2
 800d59c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	225c      	movs	r2, #92	; 0x5c
 800d5a2:	5a9a      	ldrh	r2, [r3, r2]
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	215e      	movs	r1, #94	; 0x5e
 800d5a8:	5a5b      	ldrh	r3, [r3, r1]
 800d5aa:	b29b      	uxth	r3, r3
 800d5ac:	1ad3      	subs	r3, r2, r3
 800d5ae:	b29a      	uxth	r2, r3
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	0011      	movs	r1, r2
 800d5b4:	0018      	movs	r0, r3
 800d5b6:	f000 f905 	bl	800d7c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d5ba:	e0ed      	b.n	800d798 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	225c      	movs	r2, #92	; 0x5c
 800d5c0:	5a99      	ldrh	r1, [r3, r2]
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	225e      	movs	r2, #94	; 0x5e
 800d5c6:	5a9b      	ldrh	r3, [r3, r2]
 800d5c8:	b29a      	uxth	r2, r3
 800d5ca:	208e      	movs	r0, #142	; 0x8e
 800d5cc:	183b      	adds	r3, r7, r0
 800d5ce:	1a8a      	subs	r2, r1, r2
 800d5d0:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	225e      	movs	r2, #94	; 0x5e
 800d5d6:	5a9b      	ldrh	r3, [r3, r2]
 800d5d8:	b29b      	uxth	r3, r3
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d100      	bne.n	800d5e0 <HAL_UART_IRQHandler+0x478>
 800d5de:	e0dd      	b.n	800d79c <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 800d5e0:	183b      	adds	r3, r7, r0
 800d5e2:	881b      	ldrh	r3, [r3, #0]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d100      	bne.n	800d5ea <HAL_UART_IRQHandler+0x482>
 800d5e8:	e0d8      	b.n	800d79c <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d5ea:	f3ef 8310 	mrs	r3, PRIMASK
 800d5ee:	60fb      	str	r3, [r7, #12]
  return(result);
 800d5f0:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d5f2:	2488      	movs	r4, #136	; 0x88
 800d5f4:	193a      	adds	r2, r7, r4
 800d5f6:	6013      	str	r3, [r2, #0]
 800d5f8:	2301      	movs	r3, #1
 800d5fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d5fc:	693b      	ldr	r3, [r7, #16]
 800d5fe:	f383 8810 	msr	PRIMASK, r3
}
 800d602:	46c0      	nop			; (mov r8, r8)
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	681a      	ldr	r2, [r3, #0]
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	4967      	ldr	r1, [pc, #412]	; (800d7ac <HAL_UART_IRQHandler+0x644>)
 800d610:	400a      	ands	r2, r1
 800d612:	601a      	str	r2, [r3, #0]
 800d614:	193b      	adds	r3, r7, r4
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d61a:	697b      	ldr	r3, [r7, #20]
 800d61c:	f383 8810 	msr	PRIMASK, r3
}
 800d620:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d622:	f3ef 8310 	mrs	r3, PRIMASK
 800d626:	61bb      	str	r3, [r7, #24]
  return(result);
 800d628:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d62a:	2484      	movs	r4, #132	; 0x84
 800d62c:	193a      	adds	r2, r7, r4
 800d62e:	6013      	str	r3, [r2, #0]
 800d630:	2301      	movs	r3, #1
 800d632:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d634:	69fb      	ldr	r3, [r7, #28]
 800d636:	f383 8810 	msr	PRIMASK, r3
}
 800d63a:	46c0      	nop			; (mov r8, r8)
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	689a      	ldr	r2, [r3, #8]
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	495a      	ldr	r1, [pc, #360]	; (800d7b0 <HAL_UART_IRQHandler+0x648>)
 800d648:	400a      	ands	r2, r1
 800d64a:	609a      	str	r2, [r3, #8]
 800d64c:	193b      	adds	r3, r7, r4
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d652:	6a3b      	ldr	r3, [r7, #32]
 800d654:	f383 8810 	msr	PRIMASK, r3
}
 800d658:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	228c      	movs	r2, #140	; 0x8c
 800d65e:	2120      	movs	r1, #32
 800d660:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	2200      	movs	r2, #0
 800d666:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	2200      	movs	r2, #0
 800d66c:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d66e:	f3ef 8310 	mrs	r3, PRIMASK
 800d672:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800d674:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d676:	2480      	movs	r4, #128	; 0x80
 800d678:	193a      	adds	r2, r7, r4
 800d67a:	6013      	str	r3, [r2, #0]
 800d67c:	2301      	movs	r3, #1
 800d67e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d682:	f383 8810 	msr	PRIMASK, r3
}
 800d686:	46c0      	nop			; (mov r8, r8)
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	681a      	ldr	r2, [r3, #0]
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	2110      	movs	r1, #16
 800d694:	438a      	bics	r2, r1
 800d696:	601a      	str	r2, [r3, #0]
 800d698:	193b      	adds	r3, r7, r4
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d69e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6a0:	f383 8810 	msr	PRIMASK, r3
}
 800d6a4:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	2202      	movs	r2, #2
 800d6aa:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d6ac:	183b      	adds	r3, r7, r0
 800d6ae:	881a      	ldrh	r2, [r3, #0]
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	0011      	movs	r1, r2
 800d6b4:	0018      	movs	r0, r3
 800d6b6:	f000 f885 	bl	800d7c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d6ba:	e06f      	b.n	800d79c <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d6bc:	23a4      	movs	r3, #164	; 0xa4
 800d6be:	18fb      	adds	r3, r7, r3
 800d6c0:	681a      	ldr	r2, [r3, #0]
 800d6c2:	2380      	movs	r3, #128	; 0x80
 800d6c4:	035b      	lsls	r3, r3, #13
 800d6c6:	4013      	ands	r3, r2
 800d6c8:	d010      	beq.n	800d6ec <HAL_UART_IRQHandler+0x584>
 800d6ca:	239c      	movs	r3, #156	; 0x9c
 800d6cc:	18fb      	adds	r3, r7, r3
 800d6ce:	681a      	ldr	r2, [r3, #0]
 800d6d0:	2380      	movs	r3, #128	; 0x80
 800d6d2:	03db      	lsls	r3, r3, #15
 800d6d4:	4013      	ands	r3, r2
 800d6d6:	d009      	beq.n	800d6ec <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	2280      	movs	r2, #128	; 0x80
 800d6de:	0352      	lsls	r2, r2, #13
 800d6e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	0018      	movs	r0, r3
 800d6e6:	f001 fa15 	bl	800eb14 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d6ea:	e05a      	b.n	800d7a2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d6ec:	23a4      	movs	r3, #164	; 0xa4
 800d6ee:	18fb      	adds	r3, r7, r3
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	2280      	movs	r2, #128	; 0x80
 800d6f4:	4013      	ands	r3, r2
 800d6f6:	d016      	beq.n	800d726 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d6f8:	23a0      	movs	r3, #160	; 0xa0
 800d6fa:	18fb      	adds	r3, r7, r3
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	2280      	movs	r2, #128	; 0x80
 800d700:	4013      	ands	r3, r2
 800d702:	d106      	bne.n	800d712 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d704:	239c      	movs	r3, #156	; 0x9c
 800d706:	18fb      	adds	r3, r7, r3
 800d708:	681a      	ldr	r2, [r3, #0]
 800d70a:	2380      	movs	r3, #128	; 0x80
 800d70c:	041b      	lsls	r3, r3, #16
 800d70e:	4013      	ands	r3, r2
 800d710:	d009      	beq.n	800d726 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d716:	2b00      	cmp	r3, #0
 800d718:	d042      	beq.n	800d7a0 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d71e:	687a      	ldr	r2, [r7, #4]
 800d720:	0010      	movs	r0, r2
 800d722:	4798      	blx	r3
    }
    return;
 800d724:	e03c      	b.n	800d7a0 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d726:	23a4      	movs	r3, #164	; 0xa4
 800d728:	18fb      	adds	r3, r7, r3
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	2240      	movs	r2, #64	; 0x40
 800d72e:	4013      	ands	r3, r2
 800d730:	d00a      	beq.n	800d748 <HAL_UART_IRQHandler+0x5e0>
 800d732:	23a0      	movs	r3, #160	; 0xa0
 800d734:	18fb      	adds	r3, r7, r3
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	2240      	movs	r2, #64	; 0x40
 800d73a:	4013      	ands	r3, r2
 800d73c:	d004      	beq.n	800d748 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	0018      	movs	r0, r3
 800d742:	f000 fd5a 	bl	800e1fa <UART_EndTransmit_IT>
    return;
 800d746:	e02c      	b.n	800d7a2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d748:	23a4      	movs	r3, #164	; 0xa4
 800d74a:	18fb      	adds	r3, r7, r3
 800d74c:	681a      	ldr	r2, [r3, #0]
 800d74e:	2380      	movs	r3, #128	; 0x80
 800d750:	041b      	lsls	r3, r3, #16
 800d752:	4013      	ands	r3, r2
 800d754:	d00b      	beq.n	800d76e <HAL_UART_IRQHandler+0x606>
 800d756:	23a0      	movs	r3, #160	; 0xa0
 800d758:	18fb      	adds	r3, r7, r3
 800d75a:	681a      	ldr	r2, [r3, #0]
 800d75c:	2380      	movs	r3, #128	; 0x80
 800d75e:	05db      	lsls	r3, r3, #23
 800d760:	4013      	ands	r3, r2
 800d762:	d004      	beq.n	800d76e <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	0018      	movs	r0, r3
 800d768:	f001 f9e4 	bl	800eb34 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d76c:	e019      	b.n	800d7a2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d76e:	23a4      	movs	r3, #164	; 0xa4
 800d770:	18fb      	adds	r3, r7, r3
 800d772:	681a      	ldr	r2, [r3, #0]
 800d774:	2380      	movs	r3, #128	; 0x80
 800d776:	045b      	lsls	r3, r3, #17
 800d778:	4013      	ands	r3, r2
 800d77a:	d012      	beq.n	800d7a2 <HAL_UART_IRQHandler+0x63a>
 800d77c:	23a0      	movs	r3, #160	; 0xa0
 800d77e:	18fb      	adds	r3, r7, r3
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	2b00      	cmp	r3, #0
 800d784:	da0d      	bge.n	800d7a2 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	0018      	movs	r0, r3
 800d78a:	f001 f9cb 	bl	800eb24 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d78e:	e008      	b.n	800d7a2 <HAL_UART_IRQHandler+0x63a>
      return;
 800d790:	46c0      	nop			; (mov r8, r8)
 800d792:	e006      	b.n	800d7a2 <HAL_UART_IRQHandler+0x63a>
    return;
 800d794:	46c0      	nop			; (mov r8, r8)
 800d796:	e004      	b.n	800d7a2 <HAL_UART_IRQHandler+0x63a>
      return;
 800d798:	46c0      	nop			; (mov r8, r8)
 800d79a:	e002      	b.n	800d7a2 <HAL_UART_IRQHandler+0x63a>
      return;
 800d79c:	46c0      	nop			; (mov r8, r8)
 800d79e:	e000      	b.n	800d7a2 <HAL_UART_IRQHandler+0x63a>
    return;
 800d7a0:	46c0      	nop			; (mov r8, r8)
  }
}
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	b02a      	add	sp, #168	; 0xa8
 800d7a6:	bdb0      	pop	{r4, r5, r7, pc}
 800d7a8:	fffffeff 	.word	0xfffffeff
 800d7ac:	fffffedf 	.word	0xfffffedf
 800d7b0:	effffffe 	.word	0xeffffffe

0800d7b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b082      	sub	sp, #8
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d7bc:	46c0      	nop			; (mov r8, r8)
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	b002      	add	sp, #8
 800d7c2:	bd80      	pop	{r7, pc}

0800d7c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b082      	sub	sp, #8
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
 800d7cc:	000a      	movs	r2, r1
 800d7ce:	1cbb      	adds	r3, r7, #2
 800d7d0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d7d2:	46c0      	nop			; (mov r8, r8)
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	b002      	add	sp, #8
 800d7d8:	bd80      	pop	{r7, pc}
	...

0800d7dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b088      	sub	sp, #32
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d7e4:	231a      	movs	r3, #26
 800d7e6:	18fb      	adds	r3, r7, r3
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	689a      	ldr	r2, [r3, #8]
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	691b      	ldr	r3, [r3, #16]
 800d7f4:	431a      	orrs	r2, r3
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	695b      	ldr	r3, [r3, #20]
 800d7fa:	431a      	orrs	r2, r3
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	69db      	ldr	r3, [r3, #28]
 800d800:	4313      	orrs	r3, r2
 800d802:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	4abc      	ldr	r2, [pc, #752]	; (800dafc <UART_SetConfig+0x320>)
 800d80c:	4013      	ands	r3, r2
 800d80e:	0019      	movs	r1, r3
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	69fa      	ldr	r2, [r7, #28]
 800d816:	430a      	orrs	r2, r1
 800d818:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	685b      	ldr	r3, [r3, #4]
 800d820:	4ab7      	ldr	r2, [pc, #732]	; (800db00 <UART_SetConfig+0x324>)
 800d822:	4013      	ands	r3, r2
 800d824:	0019      	movs	r1, r3
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	68da      	ldr	r2, [r3, #12]
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	430a      	orrs	r2, r1
 800d830:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	699b      	ldr	r3, [r3, #24]
 800d836:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	6a1b      	ldr	r3, [r3, #32]
 800d83c:	69fa      	ldr	r2, [r7, #28]
 800d83e:	4313      	orrs	r3, r2
 800d840:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	689b      	ldr	r3, [r3, #8]
 800d848:	4aae      	ldr	r2, [pc, #696]	; (800db04 <UART_SetConfig+0x328>)
 800d84a:	4013      	ands	r3, r2
 800d84c:	0019      	movs	r1, r3
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	69fa      	ldr	r2, [r7, #28]
 800d854:	430a      	orrs	r2, r1
 800d856:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d85e:	220f      	movs	r2, #15
 800d860:	4393      	bics	r3, r2
 800d862:	0019      	movs	r1, r3
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	430a      	orrs	r2, r1
 800d86e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	4aa4      	ldr	r2, [pc, #656]	; (800db08 <UART_SetConfig+0x32c>)
 800d876:	4293      	cmp	r3, r2
 800d878:	d127      	bne.n	800d8ca <UART_SetConfig+0xee>
 800d87a:	4ba4      	ldr	r3, [pc, #656]	; (800db0c <UART_SetConfig+0x330>)
 800d87c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d87e:	2203      	movs	r2, #3
 800d880:	4013      	ands	r3, r2
 800d882:	2b03      	cmp	r3, #3
 800d884:	d017      	beq.n	800d8b6 <UART_SetConfig+0xda>
 800d886:	d81b      	bhi.n	800d8c0 <UART_SetConfig+0xe4>
 800d888:	2b02      	cmp	r3, #2
 800d88a:	d00a      	beq.n	800d8a2 <UART_SetConfig+0xc6>
 800d88c:	d818      	bhi.n	800d8c0 <UART_SetConfig+0xe4>
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d002      	beq.n	800d898 <UART_SetConfig+0xbc>
 800d892:	2b01      	cmp	r3, #1
 800d894:	d00a      	beq.n	800d8ac <UART_SetConfig+0xd0>
 800d896:	e013      	b.n	800d8c0 <UART_SetConfig+0xe4>
 800d898:	231b      	movs	r3, #27
 800d89a:	18fb      	adds	r3, r7, r3
 800d89c:	2200      	movs	r2, #0
 800d89e:	701a      	strb	r2, [r3, #0]
 800d8a0:	e058      	b.n	800d954 <UART_SetConfig+0x178>
 800d8a2:	231b      	movs	r3, #27
 800d8a4:	18fb      	adds	r3, r7, r3
 800d8a6:	2202      	movs	r2, #2
 800d8a8:	701a      	strb	r2, [r3, #0]
 800d8aa:	e053      	b.n	800d954 <UART_SetConfig+0x178>
 800d8ac:	231b      	movs	r3, #27
 800d8ae:	18fb      	adds	r3, r7, r3
 800d8b0:	2204      	movs	r2, #4
 800d8b2:	701a      	strb	r2, [r3, #0]
 800d8b4:	e04e      	b.n	800d954 <UART_SetConfig+0x178>
 800d8b6:	231b      	movs	r3, #27
 800d8b8:	18fb      	adds	r3, r7, r3
 800d8ba:	2208      	movs	r2, #8
 800d8bc:	701a      	strb	r2, [r3, #0]
 800d8be:	e049      	b.n	800d954 <UART_SetConfig+0x178>
 800d8c0:	231b      	movs	r3, #27
 800d8c2:	18fb      	adds	r3, r7, r3
 800d8c4:	2210      	movs	r2, #16
 800d8c6:	701a      	strb	r2, [r3, #0]
 800d8c8:	e044      	b.n	800d954 <UART_SetConfig+0x178>
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	4a90      	ldr	r2, [pc, #576]	; (800db10 <UART_SetConfig+0x334>)
 800d8d0:	4293      	cmp	r3, r2
 800d8d2:	d127      	bne.n	800d924 <UART_SetConfig+0x148>
 800d8d4:	4b8d      	ldr	r3, [pc, #564]	; (800db0c <UART_SetConfig+0x330>)
 800d8d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8d8:	220c      	movs	r2, #12
 800d8da:	4013      	ands	r3, r2
 800d8dc:	2b0c      	cmp	r3, #12
 800d8de:	d017      	beq.n	800d910 <UART_SetConfig+0x134>
 800d8e0:	d81b      	bhi.n	800d91a <UART_SetConfig+0x13e>
 800d8e2:	2b08      	cmp	r3, #8
 800d8e4:	d00a      	beq.n	800d8fc <UART_SetConfig+0x120>
 800d8e6:	d818      	bhi.n	800d91a <UART_SetConfig+0x13e>
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d002      	beq.n	800d8f2 <UART_SetConfig+0x116>
 800d8ec:	2b04      	cmp	r3, #4
 800d8ee:	d00a      	beq.n	800d906 <UART_SetConfig+0x12a>
 800d8f0:	e013      	b.n	800d91a <UART_SetConfig+0x13e>
 800d8f2:	231b      	movs	r3, #27
 800d8f4:	18fb      	adds	r3, r7, r3
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	701a      	strb	r2, [r3, #0]
 800d8fa:	e02b      	b.n	800d954 <UART_SetConfig+0x178>
 800d8fc:	231b      	movs	r3, #27
 800d8fe:	18fb      	adds	r3, r7, r3
 800d900:	2202      	movs	r2, #2
 800d902:	701a      	strb	r2, [r3, #0]
 800d904:	e026      	b.n	800d954 <UART_SetConfig+0x178>
 800d906:	231b      	movs	r3, #27
 800d908:	18fb      	adds	r3, r7, r3
 800d90a:	2204      	movs	r2, #4
 800d90c:	701a      	strb	r2, [r3, #0]
 800d90e:	e021      	b.n	800d954 <UART_SetConfig+0x178>
 800d910:	231b      	movs	r3, #27
 800d912:	18fb      	adds	r3, r7, r3
 800d914:	2208      	movs	r2, #8
 800d916:	701a      	strb	r2, [r3, #0]
 800d918:	e01c      	b.n	800d954 <UART_SetConfig+0x178>
 800d91a:	231b      	movs	r3, #27
 800d91c:	18fb      	adds	r3, r7, r3
 800d91e:	2210      	movs	r2, #16
 800d920:	701a      	strb	r2, [r3, #0]
 800d922:	e017      	b.n	800d954 <UART_SetConfig+0x178>
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	4a7a      	ldr	r2, [pc, #488]	; (800db14 <UART_SetConfig+0x338>)
 800d92a:	4293      	cmp	r3, r2
 800d92c:	d104      	bne.n	800d938 <UART_SetConfig+0x15c>
 800d92e:	231b      	movs	r3, #27
 800d930:	18fb      	adds	r3, r7, r3
 800d932:	2200      	movs	r2, #0
 800d934:	701a      	strb	r2, [r3, #0]
 800d936:	e00d      	b.n	800d954 <UART_SetConfig+0x178>
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	4a76      	ldr	r2, [pc, #472]	; (800db18 <UART_SetConfig+0x33c>)
 800d93e:	4293      	cmp	r3, r2
 800d940:	d104      	bne.n	800d94c <UART_SetConfig+0x170>
 800d942:	231b      	movs	r3, #27
 800d944:	18fb      	adds	r3, r7, r3
 800d946:	2200      	movs	r2, #0
 800d948:	701a      	strb	r2, [r3, #0]
 800d94a:	e003      	b.n	800d954 <UART_SetConfig+0x178>
 800d94c:	231b      	movs	r3, #27
 800d94e:	18fb      	adds	r3, r7, r3
 800d950:	2210      	movs	r2, #16
 800d952:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	69da      	ldr	r2, [r3, #28]
 800d958:	2380      	movs	r3, #128	; 0x80
 800d95a:	021b      	lsls	r3, r3, #8
 800d95c:	429a      	cmp	r2, r3
 800d95e:	d000      	beq.n	800d962 <UART_SetConfig+0x186>
 800d960:	e065      	b.n	800da2e <UART_SetConfig+0x252>
  {
    switch (clocksource)
 800d962:	231b      	movs	r3, #27
 800d964:	18fb      	adds	r3, r7, r3
 800d966:	781b      	ldrb	r3, [r3, #0]
 800d968:	2b08      	cmp	r3, #8
 800d96a:	d015      	beq.n	800d998 <UART_SetConfig+0x1bc>
 800d96c:	dc18      	bgt.n	800d9a0 <UART_SetConfig+0x1c4>
 800d96e:	2b04      	cmp	r3, #4
 800d970:	d00d      	beq.n	800d98e <UART_SetConfig+0x1b2>
 800d972:	dc15      	bgt.n	800d9a0 <UART_SetConfig+0x1c4>
 800d974:	2b00      	cmp	r3, #0
 800d976:	d002      	beq.n	800d97e <UART_SetConfig+0x1a2>
 800d978:	2b02      	cmp	r3, #2
 800d97a:	d005      	beq.n	800d988 <UART_SetConfig+0x1ac>
 800d97c:	e010      	b.n	800d9a0 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d97e:	f7fd f939 	bl	800abf4 <HAL_RCC_GetPCLK1Freq>
 800d982:	0003      	movs	r3, r0
 800d984:	617b      	str	r3, [r7, #20]
        break;
 800d986:	e012      	b.n	800d9ae <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d988:	4b64      	ldr	r3, [pc, #400]	; (800db1c <UART_SetConfig+0x340>)
 800d98a:	617b      	str	r3, [r7, #20]
        break;
 800d98c:	e00f      	b.n	800d9ae <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d98e:	f7fd f8a5 	bl	800aadc <HAL_RCC_GetSysClockFreq>
 800d992:	0003      	movs	r3, r0
 800d994:	617b      	str	r3, [r7, #20]
        break;
 800d996:	e00a      	b.n	800d9ae <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d998:	2380      	movs	r3, #128	; 0x80
 800d99a:	021b      	lsls	r3, r3, #8
 800d99c:	617b      	str	r3, [r7, #20]
        break;
 800d99e:	e006      	b.n	800d9ae <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800d9a4:	231a      	movs	r3, #26
 800d9a6:	18fb      	adds	r3, r7, r3
 800d9a8:	2201      	movs	r2, #1
 800d9aa:	701a      	strb	r2, [r3, #0]
        break;
 800d9ac:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d9ae:	697b      	ldr	r3, [r7, #20]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d100      	bne.n	800d9b6 <UART_SetConfig+0x1da>
 800d9b4:	e08d      	b.n	800dad2 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d9ba:	4b59      	ldr	r3, [pc, #356]	; (800db20 <UART_SetConfig+0x344>)
 800d9bc:	0052      	lsls	r2, r2, #1
 800d9be:	5ad3      	ldrh	r3, [r2, r3]
 800d9c0:	0019      	movs	r1, r3
 800d9c2:	6978      	ldr	r0, [r7, #20]
 800d9c4:	f7f2 fbc2 	bl	800014c <__udivsi3>
 800d9c8:	0003      	movs	r3, r0
 800d9ca:	005a      	lsls	r2, r3, #1
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	685b      	ldr	r3, [r3, #4]
 800d9d0:	085b      	lsrs	r3, r3, #1
 800d9d2:	18d2      	adds	r2, r2, r3
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	685b      	ldr	r3, [r3, #4]
 800d9d8:	0019      	movs	r1, r3
 800d9da:	0010      	movs	r0, r2
 800d9dc:	f7f2 fbb6 	bl	800014c <__udivsi3>
 800d9e0:	0003      	movs	r3, r0
 800d9e2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d9e4:	693b      	ldr	r3, [r7, #16]
 800d9e6:	2b0f      	cmp	r3, #15
 800d9e8:	d91c      	bls.n	800da24 <UART_SetConfig+0x248>
 800d9ea:	693a      	ldr	r2, [r7, #16]
 800d9ec:	2380      	movs	r3, #128	; 0x80
 800d9ee:	025b      	lsls	r3, r3, #9
 800d9f0:	429a      	cmp	r2, r3
 800d9f2:	d217      	bcs.n	800da24 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d9f4:	693b      	ldr	r3, [r7, #16]
 800d9f6:	b29a      	uxth	r2, r3
 800d9f8:	200e      	movs	r0, #14
 800d9fa:	183b      	adds	r3, r7, r0
 800d9fc:	210f      	movs	r1, #15
 800d9fe:	438a      	bics	r2, r1
 800da00:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800da02:	693b      	ldr	r3, [r7, #16]
 800da04:	085b      	lsrs	r3, r3, #1
 800da06:	b29b      	uxth	r3, r3
 800da08:	2207      	movs	r2, #7
 800da0a:	4013      	ands	r3, r2
 800da0c:	b299      	uxth	r1, r3
 800da0e:	183b      	adds	r3, r7, r0
 800da10:	183a      	adds	r2, r7, r0
 800da12:	8812      	ldrh	r2, [r2, #0]
 800da14:	430a      	orrs	r2, r1
 800da16:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	183a      	adds	r2, r7, r0
 800da1e:	8812      	ldrh	r2, [r2, #0]
 800da20:	60da      	str	r2, [r3, #12]
 800da22:	e056      	b.n	800dad2 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800da24:	231a      	movs	r3, #26
 800da26:	18fb      	adds	r3, r7, r3
 800da28:	2201      	movs	r2, #1
 800da2a:	701a      	strb	r2, [r3, #0]
 800da2c:	e051      	b.n	800dad2 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800da2e:	231b      	movs	r3, #27
 800da30:	18fb      	adds	r3, r7, r3
 800da32:	781b      	ldrb	r3, [r3, #0]
 800da34:	2b08      	cmp	r3, #8
 800da36:	d015      	beq.n	800da64 <UART_SetConfig+0x288>
 800da38:	dc18      	bgt.n	800da6c <UART_SetConfig+0x290>
 800da3a:	2b04      	cmp	r3, #4
 800da3c:	d00d      	beq.n	800da5a <UART_SetConfig+0x27e>
 800da3e:	dc15      	bgt.n	800da6c <UART_SetConfig+0x290>
 800da40:	2b00      	cmp	r3, #0
 800da42:	d002      	beq.n	800da4a <UART_SetConfig+0x26e>
 800da44:	2b02      	cmp	r3, #2
 800da46:	d005      	beq.n	800da54 <UART_SetConfig+0x278>
 800da48:	e010      	b.n	800da6c <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800da4a:	f7fd f8d3 	bl	800abf4 <HAL_RCC_GetPCLK1Freq>
 800da4e:	0003      	movs	r3, r0
 800da50:	617b      	str	r3, [r7, #20]
        break;
 800da52:	e012      	b.n	800da7a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800da54:	4b31      	ldr	r3, [pc, #196]	; (800db1c <UART_SetConfig+0x340>)
 800da56:	617b      	str	r3, [r7, #20]
        break;
 800da58:	e00f      	b.n	800da7a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800da5a:	f7fd f83f 	bl	800aadc <HAL_RCC_GetSysClockFreq>
 800da5e:	0003      	movs	r3, r0
 800da60:	617b      	str	r3, [r7, #20]
        break;
 800da62:	e00a      	b.n	800da7a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800da64:	2380      	movs	r3, #128	; 0x80
 800da66:	021b      	lsls	r3, r3, #8
 800da68:	617b      	str	r3, [r7, #20]
        break;
 800da6a:	e006      	b.n	800da7a <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 800da6c:	2300      	movs	r3, #0
 800da6e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800da70:	231a      	movs	r3, #26
 800da72:	18fb      	adds	r3, r7, r3
 800da74:	2201      	movs	r2, #1
 800da76:	701a      	strb	r2, [r3, #0]
        break;
 800da78:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800da7a:	697b      	ldr	r3, [r7, #20]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d028      	beq.n	800dad2 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800da84:	4b26      	ldr	r3, [pc, #152]	; (800db20 <UART_SetConfig+0x344>)
 800da86:	0052      	lsls	r2, r2, #1
 800da88:	5ad3      	ldrh	r3, [r2, r3]
 800da8a:	0019      	movs	r1, r3
 800da8c:	6978      	ldr	r0, [r7, #20]
 800da8e:	f7f2 fb5d 	bl	800014c <__udivsi3>
 800da92:	0003      	movs	r3, r0
 800da94:	001a      	movs	r2, r3
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	685b      	ldr	r3, [r3, #4]
 800da9a:	085b      	lsrs	r3, r3, #1
 800da9c:	18d2      	adds	r2, r2, r3
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	685b      	ldr	r3, [r3, #4]
 800daa2:	0019      	movs	r1, r3
 800daa4:	0010      	movs	r0, r2
 800daa6:	f7f2 fb51 	bl	800014c <__udivsi3>
 800daaa:	0003      	movs	r3, r0
 800daac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800daae:	693b      	ldr	r3, [r7, #16]
 800dab0:	2b0f      	cmp	r3, #15
 800dab2:	d90a      	bls.n	800daca <UART_SetConfig+0x2ee>
 800dab4:	693a      	ldr	r2, [r7, #16]
 800dab6:	2380      	movs	r3, #128	; 0x80
 800dab8:	025b      	lsls	r3, r3, #9
 800daba:	429a      	cmp	r2, r3
 800dabc:	d205      	bcs.n	800daca <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800dabe:	693b      	ldr	r3, [r7, #16]
 800dac0:	b29a      	uxth	r2, r3
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	60da      	str	r2, [r3, #12]
 800dac8:	e003      	b.n	800dad2 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800daca:	231a      	movs	r3, #26
 800dacc:	18fb      	adds	r3, r7, r3
 800dace:	2201      	movs	r2, #1
 800dad0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	226a      	movs	r2, #106	; 0x6a
 800dad6:	2101      	movs	r1, #1
 800dad8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	2268      	movs	r2, #104	; 0x68
 800dade:	2101      	movs	r1, #1
 800dae0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	2200      	movs	r2, #0
 800dae6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	2200      	movs	r2, #0
 800daec:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800daee:	231a      	movs	r3, #26
 800daf0:	18fb      	adds	r3, r7, r3
 800daf2:	781b      	ldrb	r3, [r3, #0]
}
 800daf4:	0018      	movs	r0, r3
 800daf6:	46bd      	mov	sp, r7
 800daf8:	b008      	add	sp, #32
 800dafa:	bd80      	pop	{r7, pc}
 800dafc:	cfff69f3 	.word	0xcfff69f3
 800db00:	ffffcfff 	.word	0xffffcfff
 800db04:	11fff4ff 	.word	0x11fff4ff
 800db08:	40013800 	.word	0x40013800
 800db0c:	40021000 	.word	0x40021000
 800db10:	40004400 	.word	0x40004400
 800db14:	40004800 	.word	0x40004800
 800db18:	40004c00 	.word	0x40004c00
 800db1c:	00f42400 	.word	0x00f42400
 800db20:	08013818 	.word	0x08013818

0800db24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b082      	sub	sp, #8
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db30:	2201      	movs	r2, #1
 800db32:	4013      	ands	r3, r2
 800db34:	d00b      	beq.n	800db4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	685b      	ldr	r3, [r3, #4]
 800db3c:	4a4a      	ldr	r2, [pc, #296]	; (800dc68 <UART_AdvFeatureConfig+0x144>)
 800db3e:	4013      	ands	r3, r2
 800db40:	0019      	movs	r1, r3
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	430a      	orrs	r2, r1
 800db4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db52:	2202      	movs	r2, #2
 800db54:	4013      	ands	r3, r2
 800db56:	d00b      	beq.n	800db70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	685b      	ldr	r3, [r3, #4]
 800db5e:	4a43      	ldr	r2, [pc, #268]	; (800dc6c <UART_AdvFeatureConfig+0x148>)
 800db60:	4013      	ands	r3, r2
 800db62:	0019      	movs	r1, r3
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	430a      	orrs	r2, r1
 800db6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db74:	2204      	movs	r2, #4
 800db76:	4013      	ands	r3, r2
 800db78:	d00b      	beq.n	800db92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	685b      	ldr	r3, [r3, #4]
 800db80:	4a3b      	ldr	r2, [pc, #236]	; (800dc70 <UART_AdvFeatureConfig+0x14c>)
 800db82:	4013      	ands	r3, r2
 800db84:	0019      	movs	r1, r3
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	430a      	orrs	r2, r1
 800db90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db96:	2208      	movs	r2, #8
 800db98:	4013      	ands	r3, r2
 800db9a:	d00b      	beq.n	800dbb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	685b      	ldr	r3, [r3, #4]
 800dba2:	4a34      	ldr	r2, [pc, #208]	; (800dc74 <UART_AdvFeatureConfig+0x150>)
 800dba4:	4013      	ands	r3, r2
 800dba6:	0019      	movs	r1, r3
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	430a      	orrs	r2, r1
 800dbb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbb8:	2210      	movs	r2, #16
 800dbba:	4013      	ands	r3, r2
 800dbbc:	d00b      	beq.n	800dbd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	689b      	ldr	r3, [r3, #8]
 800dbc4:	4a2c      	ldr	r2, [pc, #176]	; (800dc78 <UART_AdvFeatureConfig+0x154>)
 800dbc6:	4013      	ands	r3, r2
 800dbc8:	0019      	movs	r1, r3
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	430a      	orrs	r2, r1
 800dbd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbda:	2220      	movs	r2, #32
 800dbdc:	4013      	ands	r3, r2
 800dbde:	d00b      	beq.n	800dbf8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	689b      	ldr	r3, [r3, #8]
 800dbe6:	4a25      	ldr	r2, [pc, #148]	; (800dc7c <UART_AdvFeatureConfig+0x158>)
 800dbe8:	4013      	ands	r3, r2
 800dbea:	0019      	movs	r1, r3
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	430a      	orrs	r2, r1
 800dbf6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbfc:	2240      	movs	r2, #64	; 0x40
 800dbfe:	4013      	ands	r3, r2
 800dc00:	d01d      	beq.n	800dc3e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	685b      	ldr	r3, [r3, #4]
 800dc08:	4a1d      	ldr	r2, [pc, #116]	; (800dc80 <UART_AdvFeatureConfig+0x15c>)
 800dc0a:	4013      	ands	r3, r2
 800dc0c:	0019      	movs	r1, r3
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	430a      	orrs	r2, r1
 800dc18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dc1e:	2380      	movs	r3, #128	; 0x80
 800dc20:	035b      	lsls	r3, r3, #13
 800dc22:	429a      	cmp	r2, r3
 800dc24:	d10b      	bne.n	800dc3e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	685b      	ldr	r3, [r3, #4]
 800dc2c:	4a15      	ldr	r2, [pc, #84]	; (800dc84 <UART_AdvFeatureConfig+0x160>)
 800dc2e:	4013      	ands	r3, r2
 800dc30:	0019      	movs	r1, r3
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	430a      	orrs	r2, r1
 800dc3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc42:	2280      	movs	r2, #128	; 0x80
 800dc44:	4013      	ands	r3, r2
 800dc46:	d00b      	beq.n	800dc60 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	685b      	ldr	r3, [r3, #4]
 800dc4e:	4a0e      	ldr	r2, [pc, #56]	; (800dc88 <UART_AdvFeatureConfig+0x164>)
 800dc50:	4013      	ands	r3, r2
 800dc52:	0019      	movs	r1, r3
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	430a      	orrs	r2, r1
 800dc5e:	605a      	str	r2, [r3, #4]
  }
}
 800dc60:	46c0      	nop			; (mov r8, r8)
 800dc62:	46bd      	mov	sp, r7
 800dc64:	b002      	add	sp, #8
 800dc66:	bd80      	pop	{r7, pc}
 800dc68:	fffdffff 	.word	0xfffdffff
 800dc6c:	fffeffff 	.word	0xfffeffff
 800dc70:	fffbffff 	.word	0xfffbffff
 800dc74:	ffff7fff 	.word	0xffff7fff
 800dc78:	ffffefff 	.word	0xffffefff
 800dc7c:	ffffdfff 	.word	0xffffdfff
 800dc80:	ffefffff 	.word	0xffefffff
 800dc84:	ff9fffff 	.word	0xff9fffff
 800dc88:	fff7ffff 	.word	0xfff7ffff

0800dc8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b086      	sub	sp, #24
 800dc90:	af02      	add	r7, sp, #8
 800dc92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	2290      	movs	r2, #144	; 0x90
 800dc98:	2100      	movs	r1, #0
 800dc9a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800dc9c:	f7fb ff28 	bl	8009af0 <HAL_GetTick>
 800dca0:	0003      	movs	r3, r0
 800dca2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	2208      	movs	r2, #8
 800dcac:	4013      	ands	r3, r2
 800dcae:	2b08      	cmp	r3, #8
 800dcb0:	d10c      	bne.n	800dccc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	2280      	movs	r2, #128	; 0x80
 800dcb6:	0391      	lsls	r1, r2, #14
 800dcb8:	6878      	ldr	r0, [r7, #4]
 800dcba:	4a1a      	ldr	r2, [pc, #104]	; (800dd24 <UART_CheckIdleState+0x98>)
 800dcbc:	9200      	str	r2, [sp, #0]
 800dcbe:	2200      	movs	r2, #0
 800dcc0:	f000 f832 	bl	800dd28 <UART_WaitOnFlagUntilTimeout>
 800dcc4:	1e03      	subs	r3, r0, #0
 800dcc6:	d001      	beq.n	800dccc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dcc8:	2303      	movs	r3, #3
 800dcca:	e026      	b.n	800dd1a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	2204      	movs	r2, #4
 800dcd4:	4013      	ands	r3, r2
 800dcd6:	2b04      	cmp	r3, #4
 800dcd8:	d10c      	bne.n	800dcf4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	2280      	movs	r2, #128	; 0x80
 800dcde:	03d1      	lsls	r1, r2, #15
 800dce0:	6878      	ldr	r0, [r7, #4]
 800dce2:	4a10      	ldr	r2, [pc, #64]	; (800dd24 <UART_CheckIdleState+0x98>)
 800dce4:	9200      	str	r2, [sp, #0]
 800dce6:	2200      	movs	r2, #0
 800dce8:	f000 f81e 	bl	800dd28 <UART_WaitOnFlagUntilTimeout>
 800dcec:	1e03      	subs	r3, r0, #0
 800dcee:	d001      	beq.n	800dcf4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dcf0:	2303      	movs	r3, #3
 800dcf2:	e012      	b.n	800dd1a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	2288      	movs	r2, #136	; 0x88
 800dcf8:	2120      	movs	r1, #32
 800dcfa:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	228c      	movs	r2, #140	; 0x8c
 800dd00:	2120      	movs	r1, #32
 800dd02:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	2200      	movs	r2, #0
 800dd08:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	2200      	movs	r2, #0
 800dd0e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	2284      	movs	r2, #132	; 0x84
 800dd14:	2100      	movs	r1, #0
 800dd16:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800dd18:	2300      	movs	r3, #0
}
 800dd1a:	0018      	movs	r0, r3
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	b004      	add	sp, #16
 800dd20:	bd80      	pop	{r7, pc}
 800dd22:	46c0      	nop			; (mov r8, r8)
 800dd24:	01ffffff 	.word	0x01ffffff

0800dd28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b094      	sub	sp, #80	; 0x50
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	60f8      	str	r0, [r7, #12]
 800dd30:	60b9      	str	r1, [r7, #8]
 800dd32:	603b      	str	r3, [r7, #0]
 800dd34:	1dfb      	adds	r3, r7, #7
 800dd36:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dd38:	e0a7      	b.n	800de8a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dd3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dd3c:	3301      	adds	r3, #1
 800dd3e:	d100      	bne.n	800dd42 <UART_WaitOnFlagUntilTimeout+0x1a>
 800dd40:	e0a3      	b.n	800de8a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dd42:	f7fb fed5 	bl	8009af0 <HAL_GetTick>
 800dd46:	0002      	movs	r2, r0
 800dd48:	683b      	ldr	r3, [r7, #0]
 800dd4a:	1ad3      	subs	r3, r2, r3
 800dd4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dd4e:	429a      	cmp	r2, r3
 800dd50:	d302      	bcc.n	800dd58 <UART_WaitOnFlagUntilTimeout+0x30>
 800dd52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d13f      	bne.n	800ddd8 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd58:	f3ef 8310 	mrs	r3, PRIMASK
 800dd5c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800dd5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800dd60:	647b      	str	r3, [r7, #68]	; 0x44
 800dd62:	2301      	movs	r3, #1
 800dd64:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd68:	f383 8810 	msr	PRIMASK, r3
}
 800dd6c:	46c0      	nop			; (mov r8, r8)
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	681a      	ldr	r2, [r3, #0]
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	494e      	ldr	r1, [pc, #312]	; (800deb4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800dd7a:	400a      	ands	r2, r1
 800dd7c:	601a      	str	r2, [r3, #0]
 800dd7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd80:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd84:	f383 8810 	msr	PRIMASK, r3
}
 800dd88:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd8a:	f3ef 8310 	mrs	r3, PRIMASK
 800dd8e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800dd90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dd92:	643b      	str	r3, [r7, #64]	; 0x40
 800dd94:	2301      	movs	r3, #1
 800dd96:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd9a:	f383 8810 	msr	PRIMASK, r3
}
 800dd9e:	46c0      	nop			; (mov r8, r8)
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	689a      	ldr	r2, [r3, #8]
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	2101      	movs	r1, #1
 800ddac:	438a      	bics	r2, r1
 800ddae:	609a      	str	r2, [r3, #8]
 800ddb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ddb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ddb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddb6:	f383 8810 	msr	PRIMASK, r3
}
 800ddba:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	2288      	movs	r2, #136	; 0x88
 800ddc0:	2120      	movs	r1, #32
 800ddc2:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	228c      	movs	r2, #140	; 0x8c
 800ddc8:	2120      	movs	r1, #32
 800ddca:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	2284      	movs	r2, #132	; 0x84
 800ddd0:	2100      	movs	r1, #0
 800ddd2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800ddd4:	2303      	movs	r3, #3
 800ddd6:	e069      	b.n	800deac <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	2204      	movs	r2, #4
 800dde0:	4013      	ands	r3, r2
 800dde2:	d052      	beq.n	800de8a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	69da      	ldr	r2, [r3, #28]
 800ddea:	2380      	movs	r3, #128	; 0x80
 800ddec:	011b      	lsls	r3, r3, #4
 800ddee:	401a      	ands	r2, r3
 800ddf0:	2380      	movs	r3, #128	; 0x80
 800ddf2:	011b      	lsls	r3, r3, #4
 800ddf4:	429a      	cmp	r2, r3
 800ddf6:	d148      	bne.n	800de8a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	2280      	movs	r2, #128	; 0x80
 800ddfe:	0112      	lsls	r2, r2, #4
 800de00:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de02:	f3ef 8310 	mrs	r3, PRIMASK
 800de06:	613b      	str	r3, [r7, #16]
  return(result);
 800de08:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800de0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800de0c:	2301      	movs	r3, #1
 800de0e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de10:	697b      	ldr	r3, [r7, #20]
 800de12:	f383 8810 	msr	PRIMASK, r3
}
 800de16:	46c0      	nop			; (mov r8, r8)
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	681a      	ldr	r2, [r3, #0]
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	4924      	ldr	r1, [pc, #144]	; (800deb4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800de24:	400a      	ands	r2, r1
 800de26:	601a      	str	r2, [r3, #0]
 800de28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de2a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de2c:	69bb      	ldr	r3, [r7, #24]
 800de2e:	f383 8810 	msr	PRIMASK, r3
}
 800de32:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de34:	f3ef 8310 	mrs	r3, PRIMASK
 800de38:	61fb      	str	r3, [r7, #28]
  return(result);
 800de3a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800de3c:	64bb      	str	r3, [r7, #72]	; 0x48
 800de3e:	2301      	movs	r3, #1
 800de40:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de42:	6a3b      	ldr	r3, [r7, #32]
 800de44:	f383 8810 	msr	PRIMASK, r3
}
 800de48:	46c0      	nop			; (mov r8, r8)
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	689a      	ldr	r2, [r3, #8]
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	2101      	movs	r1, #1
 800de56:	438a      	bics	r2, r1
 800de58:	609a      	str	r2, [r3, #8]
 800de5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de5c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de60:	f383 8810 	msr	PRIMASK, r3
}
 800de64:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	2288      	movs	r2, #136	; 0x88
 800de6a:	2120      	movs	r1, #32
 800de6c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	228c      	movs	r2, #140	; 0x8c
 800de72:	2120      	movs	r1, #32
 800de74:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	2290      	movs	r2, #144	; 0x90
 800de7a:	2120      	movs	r1, #32
 800de7c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	2284      	movs	r2, #132	; 0x84
 800de82:	2100      	movs	r1, #0
 800de84:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800de86:	2303      	movs	r3, #3
 800de88:	e010      	b.n	800deac <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	69db      	ldr	r3, [r3, #28]
 800de90:	68ba      	ldr	r2, [r7, #8]
 800de92:	4013      	ands	r3, r2
 800de94:	68ba      	ldr	r2, [r7, #8]
 800de96:	1ad3      	subs	r3, r2, r3
 800de98:	425a      	negs	r2, r3
 800de9a:	4153      	adcs	r3, r2
 800de9c:	b2db      	uxtb	r3, r3
 800de9e:	001a      	movs	r2, r3
 800dea0:	1dfb      	adds	r3, r7, #7
 800dea2:	781b      	ldrb	r3, [r3, #0]
 800dea4:	429a      	cmp	r2, r3
 800dea6:	d100      	bne.n	800deaa <UART_WaitOnFlagUntilTimeout+0x182>
 800dea8:	e747      	b.n	800dd3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800deaa:	2300      	movs	r3, #0
}
 800deac:	0018      	movs	r0, r3
 800deae:	46bd      	mov	sp, r7
 800deb0:	b014      	add	sp, #80	; 0x50
 800deb2:	bd80      	pop	{r7, pc}
 800deb4:	fffffe5f 	.word	0xfffffe5f

0800deb8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b098      	sub	sp, #96	; 0x60
 800debc:	af00      	add	r7, sp, #0
 800debe:	60f8      	str	r0, [r7, #12]
 800dec0:	60b9      	str	r1, [r7, #8]
 800dec2:	1dbb      	adds	r3, r7, #6
 800dec4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	68ba      	ldr	r2, [r7, #8]
 800deca:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	1dba      	adds	r2, r7, #6
 800ded0:	215c      	movs	r1, #92	; 0x5c
 800ded2:	8812      	ldrh	r2, [r2, #0]
 800ded4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	1dba      	adds	r2, r7, #6
 800deda:	215e      	movs	r1, #94	; 0x5e
 800dedc:	8812      	ldrh	r2, [r2, #0]
 800dede:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	2200      	movs	r2, #0
 800dee4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	689a      	ldr	r2, [r3, #8]
 800deea:	2380      	movs	r3, #128	; 0x80
 800deec:	015b      	lsls	r3, r3, #5
 800deee:	429a      	cmp	r2, r3
 800def0:	d10d      	bne.n	800df0e <UART_Start_Receive_IT+0x56>
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	691b      	ldr	r3, [r3, #16]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d104      	bne.n	800df04 <UART_Start_Receive_IT+0x4c>
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	2260      	movs	r2, #96	; 0x60
 800defe:	497b      	ldr	r1, [pc, #492]	; (800e0ec <UART_Start_Receive_IT+0x234>)
 800df00:	5299      	strh	r1, [r3, r2]
 800df02:	e02e      	b.n	800df62 <UART_Start_Receive_IT+0xaa>
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	2260      	movs	r2, #96	; 0x60
 800df08:	21ff      	movs	r1, #255	; 0xff
 800df0a:	5299      	strh	r1, [r3, r2]
 800df0c:	e029      	b.n	800df62 <UART_Start_Receive_IT+0xaa>
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	689b      	ldr	r3, [r3, #8]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d10d      	bne.n	800df32 <UART_Start_Receive_IT+0x7a>
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	691b      	ldr	r3, [r3, #16]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d104      	bne.n	800df28 <UART_Start_Receive_IT+0x70>
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	2260      	movs	r2, #96	; 0x60
 800df22:	21ff      	movs	r1, #255	; 0xff
 800df24:	5299      	strh	r1, [r3, r2]
 800df26:	e01c      	b.n	800df62 <UART_Start_Receive_IT+0xaa>
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	2260      	movs	r2, #96	; 0x60
 800df2c:	217f      	movs	r1, #127	; 0x7f
 800df2e:	5299      	strh	r1, [r3, r2]
 800df30:	e017      	b.n	800df62 <UART_Start_Receive_IT+0xaa>
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	689a      	ldr	r2, [r3, #8]
 800df36:	2380      	movs	r3, #128	; 0x80
 800df38:	055b      	lsls	r3, r3, #21
 800df3a:	429a      	cmp	r2, r3
 800df3c:	d10d      	bne.n	800df5a <UART_Start_Receive_IT+0xa2>
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	691b      	ldr	r3, [r3, #16]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d104      	bne.n	800df50 <UART_Start_Receive_IT+0x98>
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	2260      	movs	r2, #96	; 0x60
 800df4a:	217f      	movs	r1, #127	; 0x7f
 800df4c:	5299      	strh	r1, [r3, r2]
 800df4e:	e008      	b.n	800df62 <UART_Start_Receive_IT+0xaa>
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	2260      	movs	r2, #96	; 0x60
 800df54:	213f      	movs	r1, #63	; 0x3f
 800df56:	5299      	strh	r1, [r3, r2]
 800df58:	e003      	b.n	800df62 <UART_Start_Receive_IT+0xaa>
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	2260      	movs	r2, #96	; 0x60
 800df5e:	2100      	movs	r1, #0
 800df60:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	2290      	movs	r2, #144	; 0x90
 800df66:	2100      	movs	r1, #0
 800df68:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	228c      	movs	r2, #140	; 0x8c
 800df6e:	2122      	movs	r1, #34	; 0x22
 800df70:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800df72:	f3ef 8310 	mrs	r3, PRIMASK
 800df76:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 800df78:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800df7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800df7c:	2301      	movs	r3, #1
 800df7e:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df82:	f383 8810 	msr	PRIMASK, r3
}
 800df86:	46c0      	nop			; (mov r8, r8)
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	689a      	ldr	r2, [r3, #8]
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	2101      	movs	r1, #1
 800df94:	430a      	orrs	r2, r1
 800df96:	609a      	str	r2, [r3, #8]
 800df98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800df9a:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df9e:	f383 8810 	msr	PRIMASK, r3
}
 800dfa2:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800dfa8:	2380      	movs	r3, #128	; 0x80
 800dfaa:	059b      	lsls	r3, r3, #22
 800dfac:	429a      	cmp	r2, r3
 800dfae:	d150      	bne.n	800e052 <UART_Start_Receive_IT+0x19a>
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	2268      	movs	r2, #104	; 0x68
 800dfb4:	5a9b      	ldrh	r3, [r3, r2]
 800dfb6:	1dba      	adds	r2, r7, #6
 800dfb8:	8812      	ldrh	r2, [r2, #0]
 800dfba:	429a      	cmp	r2, r3
 800dfbc:	d349      	bcc.n	800e052 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	689a      	ldr	r2, [r3, #8]
 800dfc2:	2380      	movs	r3, #128	; 0x80
 800dfc4:	015b      	lsls	r3, r3, #5
 800dfc6:	429a      	cmp	r2, r3
 800dfc8:	d107      	bne.n	800dfda <UART_Start_Receive_IT+0x122>
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	691b      	ldr	r3, [r3, #16]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d103      	bne.n	800dfda <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	4a46      	ldr	r2, [pc, #280]	; (800e0f0 <UART_Start_Receive_IT+0x238>)
 800dfd6:	675a      	str	r2, [r3, #116]	; 0x74
 800dfd8:	e002      	b.n	800dfe0 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	4a45      	ldr	r2, [pc, #276]	; (800e0f4 <UART_Start_Receive_IT+0x23c>)
 800dfde:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	691b      	ldr	r3, [r3, #16]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d019      	beq.n	800e01c <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dfe8:	f3ef 8310 	mrs	r3, PRIMASK
 800dfec:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800dfee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dff0:	65bb      	str	r3, [r7, #88]	; 0x58
 800dff2:	2301      	movs	r3, #1
 800dff4:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dff8:	f383 8810 	msr	PRIMASK, r3
}
 800dffc:	46c0      	nop			; (mov r8, r8)
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	681a      	ldr	r2, [r3, #0]
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	2180      	movs	r1, #128	; 0x80
 800e00a:	0049      	lsls	r1, r1, #1
 800e00c:	430a      	orrs	r2, r1
 800e00e:	601a      	str	r2, [r3, #0]
 800e010:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e012:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e016:	f383 8810 	msr	PRIMASK, r3
}
 800e01a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e01c:	f3ef 8310 	mrs	r3, PRIMASK
 800e020:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800e022:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e024:	657b      	str	r3, [r7, #84]	; 0x54
 800e026:	2301      	movs	r3, #1
 800e028:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e02a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e02c:	f383 8810 	msr	PRIMASK, r3
}
 800e030:	46c0      	nop			; (mov r8, r8)
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	689a      	ldr	r2, [r3, #8]
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	2180      	movs	r1, #128	; 0x80
 800e03e:	0549      	lsls	r1, r1, #21
 800e040:	430a      	orrs	r2, r1
 800e042:	609a      	str	r2, [r3, #8]
 800e044:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e046:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e04a:	f383 8810 	msr	PRIMASK, r3
}
 800e04e:	46c0      	nop			; (mov r8, r8)
 800e050:	e047      	b.n	800e0e2 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	689a      	ldr	r2, [r3, #8]
 800e056:	2380      	movs	r3, #128	; 0x80
 800e058:	015b      	lsls	r3, r3, #5
 800e05a:	429a      	cmp	r2, r3
 800e05c:	d107      	bne.n	800e06e <UART_Start_Receive_IT+0x1b6>
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	691b      	ldr	r3, [r3, #16]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d103      	bne.n	800e06e <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	4a23      	ldr	r2, [pc, #140]	; (800e0f8 <UART_Start_Receive_IT+0x240>)
 800e06a:	675a      	str	r2, [r3, #116]	; 0x74
 800e06c:	e002      	b.n	800e074 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	4a22      	ldr	r2, [pc, #136]	; (800e0fc <UART_Start_Receive_IT+0x244>)
 800e072:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	691b      	ldr	r3, [r3, #16]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d019      	beq.n	800e0b0 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e07c:	f3ef 8310 	mrs	r3, PRIMASK
 800e080:	61fb      	str	r3, [r7, #28]
  return(result);
 800e082:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800e084:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e086:	2301      	movs	r3, #1
 800e088:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e08a:	6a3b      	ldr	r3, [r7, #32]
 800e08c:	f383 8810 	msr	PRIMASK, r3
}
 800e090:	46c0      	nop			; (mov r8, r8)
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	681a      	ldr	r2, [r3, #0]
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	2190      	movs	r1, #144	; 0x90
 800e09e:	0049      	lsls	r1, r1, #1
 800e0a0:	430a      	orrs	r2, r1
 800e0a2:	601a      	str	r2, [r3, #0]
 800e0a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0a6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0aa:	f383 8810 	msr	PRIMASK, r3
}
 800e0ae:	e018      	b.n	800e0e2 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e0b0:	f3ef 8310 	mrs	r3, PRIMASK
 800e0b4:	613b      	str	r3, [r7, #16]
  return(result);
 800e0b6:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e0b8:	653b      	str	r3, [r7, #80]	; 0x50
 800e0ba:	2301      	movs	r3, #1
 800e0bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e0be:	697b      	ldr	r3, [r7, #20]
 800e0c0:	f383 8810 	msr	PRIMASK, r3
}
 800e0c4:	46c0      	nop			; (mov r8, r8)
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	681a      	ldr	r2, [r3, #0]
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	2120      	movs	r1, #32
 800e0d2:	430a      	orrs	r2, r1
 800e0d4:	601a      	str	r2, [r3, #0]
 800e0d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0d8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e0da:	69bb      	ldr	r3, [r7, #24]
 800e0dc:	f383 8810 	msr	PRIMASK, r3
}
 800e0e0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 800e0e2:	2300      	movs	r3, #0
}
 800e0e4:	0018      	movs	r0, r3
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	b018      	add	sp, #96	; 0x60
 800e0ea:	bd80      	pop	{r7, pc}
 800e0ec:	000001ff 	.word	0x000001ff
 800e0f0:	0800e829 	.word	0x0800e829
 800e0f4:	0800e53d 	.word	0x0800e53d
 800e0f8:	0800e3c9 	.word	0x0800e3c9
 800e0fc:	0800e255 	.word	0x0800e255

0800e100 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b08e      	sub	sp, #56	; 0x38
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e108:	f3ef 8310 	mrs	r3, PRIMASK
 800e10c:	617b      	str	r3, [r7, #20]
  return(result);
 800e10e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e110:	637b      	str	r3, [r7, #52]	; 0x34
 800e112:	2301      	movs	r3, #1
 800e114:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e116:	69bb      	ldr	r3, [r7, #24]
 800e118:	f383 8810 	msr	PRIMASK, r3
}
 800e11c:	46c0      	nop			; (mov r8, r8)
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	681a      	ldr	r2, [r3, #0]
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	4926      	ldr	r1, [pc, #152]	; (800e1c4 <UART_EndRxTransfer+0xc4>)
 800e12a:	400a      	ands	r2, r1
 800e12c:	601a      	str	r2, [r3, #0]
 800e12e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e130:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e132:	69fb      	ldr	r3, [r7, #28]
 800e134:	f383 8810 	msr	PRIMASK, r3
}
 800e138:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e13a:	f3ef 8310 	mrs	r3, PRIMASK
 800e13e:	623b      	str	r3, [r7, #32]
  return(result);
 800e140:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e142:	633b      	str	r3, [r7, #48]	; 0x30
 800e144:	2301      	movs	r3, #1
 800e146:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e14a:	f383 8810 	msr	PRIMASK, r3
}
 800e14e:	46c0      	nop			; (mov r8, r8)
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	689a      	ldr	r2, [r3, #8]
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	491b      	ldr	r1, [pc, #108]	; (800e1c8 <UART_EndRxTransfer+0xc8>)
 800e15c:	400a      	ands	r2, r1
 800e15e:	609a      	str	r2, [r3, #8]
 800e160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e162:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e166:	f383 8810 	msr	PRIMASK, r3
}
 800e16a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e170:	2b01      	cmp	r3, #1
 800e172:	d118      	bne.n	800e1a6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e174:	f3ef 8310 	mrs	r3, PRIMASK
 800e178:	60bb      	str	r3, [r7, #8]
  return(result);
 800e17a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e17c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e17e:	2301      	movs	r3, #1
 800e180:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	f383 8810 	msr	PRIMASK, r3
}
 800e188:	46c0      	nop			; (mov r8, r8)
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	681a      	ldr	r2, [r3, #0]
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	2110      	movs	r1, #16
 800e196:	438a      	bics	r2, r1
 800e198:	601a      	str	r2, [r3, #0]
 800e19a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e19c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e19e:	693b      	ldr	r3, [r7, #16]
 800e1a0:	f383 8810 	msr	PRIMASK, r3
}
 800e1a4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	228c      	movs	r2, #140	; 0x8c
 800e1aa:	2120      	movs	r1, #32
 800e1ac:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	2200      	movs	r2, #0
 800e1b8:	675a      	str	r2, [r3, #116]	; 0x74
}
 800e1ba:	46c0      	nop			; (mov r8, r8)
 800e1bc:	46bd      	mov	sp, r7
 800e1be:	b00e      	add	sp, #56	; 0x38
 800e1c0:	bd80      	pop	{r7, pc}
 800e1c2:	46c0      	nop			; (mov r8, r8)
 800e1c4:	fffffedf 	.word	0xfffffedf
 800e1c8:	effffffe 	.word	0xeffffffe

0800e1cc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	b084      	sub	sp, #16
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	225e      	movs	r2, #94	; 0x5e
 800e1de:	2100      	movs	r1, #0
 800e1e0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	2256      	movs	r2, #86	; 0x56
 800e1e6:	2100      	movs	r1, #0
 800e1e8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	0018      	movs	r0, r3
 800e1ee:	f7f6 f9a1 	bl	8004534 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e1f2:	46c0      	nop			; (mov r8, r8)
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	b004      	add	sp, #16
 800e1f8:	bd80      	pop	{r7, pc}

0800e1fa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e1fa:	b580      	push	{r7, lr}
 800e1fc:	b086      	sub	sp, #24
 800e1fe:	af00      	add	r7, sp, #0
 800e200:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e202:	f3ef 8310 	mrs	r3, PRIMASK
 800e206:	60bb      	str	r3, [r7, #8]
  return(result);
 800e208:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e20a:	617b      	str	r3, [r7, #20]
 800e20c:	2301      	movs	r3, #1
 800e20e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	f383 8810 	msr	PRIMASK, r3
}
 800e216:	46c0      	nop			; (mov r8, r8)
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	681a      	ldr	r2, [r3, #0]
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	2140      	movs	r1, #64	; 0x40
 800e224:	438a      	bics	r2, r1
 800e226:	601a      	str	r2, [r3, #0]
 800e228:	697b      	ldr	r3, [r7, #20]
 800e22a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e22c:	693b      	ldr	r3, [r7, #16]
 800e22e:	f383 8810 	msr	PRIMASK, r3
}
 800e232:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	2288      	movs	r2, #136	; 0x88
 800e238:	2120      	movs	r1, #32
 800e23a:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	2200      	movs	r2, #0
 800e240:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	0018      	movs	r0, r3
 800e246:	f7ff fab5 	bl	800d7b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e24a:	46c0      	nop			; (mov r8, r8)
 800e24c:	46bd      	mov	sp, r7
 800e24e:	b006      	add	sp, #24
 800e250:	bd80      	pop	{r7, pc}
	...

0800e254 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b090      	sub	sp, #64	; 0x40
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800e25c:	203e      	movs	r0, #62	; 0x3e
 800e25e:	183b      	adds	r3, r7, r0
 800e260:	687a      	ldr	r2, [r7, #4]
 800e262:	2160      	movs	r1, #96	; 0x60
 800e264:	5a52      	ldrh	r2, [r2, r1]
 800e266:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	228c      	movs	r2, #140	; 0x8c
 800e26c:	589b      	ldr	r3, [r3, r2]
 800e26e:	2b22      	cmp	r3, #34	; 0x22
 800e270:	d000      	beq.n	800e274 <UART_RxISR_8BIT+0x20>
 800e272:	e09a      	b.n	800e3aa <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e27a:	213c      	movs	r1, #60	; 0x3c
 800e27c:	187b      	adds	r3, r7, r1
 800e27e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e280:	187b      	adds	r3, r7, r1
 800e282:	881b      	ldrh	r3, [r3, #0]
 800e284:	b2da      	uxtb	r2, r3
 800e286:	183b      	adds	r3, r7, r0
 800e288:	881b      	ldrh	r3, [r3, #0]
 800e28a:	b2d9      	uxtb	r1, r3
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e290:	400a      	ands	r2, r1
 800e292:	b2d2      	uxtb	r2, r2
 800e294:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e29a:	1c5a      	adds	r2, r3, #1
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	225e      	movs	r2, #94	; 0x5e
 800e2a4:	5a9b      	ldrh	r3, [r3, r2]
 800e2a6:	b29b      	uxth	r3, r3
 800e2a8:	3b01      	subs	r3, #1
 800e2aa:	b299      	uxth	r1, r3
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	225e      	movs	r2, #94	; 0x5e
 800e2b0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	225e      	movs	r2, #94	; 0x5e
 800e2b6:	5a9b      	ldrh	r3, [r3, r2]
 800e2b8:	b29b      	uxth	r3, r3
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d000      	beq.n	800e2c0 <UART_RxISR_8BIT+0x6c>
 800e2be:	e07c      	b.n	800e3ba <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e2c0:	f3ef 8310 	mrs	r3, PRIMASK
 800e2c4:	61bb      	str	r3, [r7, #24]
  return(result);
 800e2c6:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e2c8:	63bb      	str	r3, [r7, #56]	; 0x38
 800e2ca:	2301      	movs	r3, #1
 800e2cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e2ce:	69fb      	ldr	r3, [r7, #28]
 800e2d0:	f383 8810 	msr	PRIMASK, r3
}
 800e2d4:	46c0      	nop			; (mov r8, r8)
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	681a      	ldr	r2, [r3, #0]
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	4938      	ldr	r1, [pc, #224]	; (800e3c4 <UART_RxISR_8BIT+0x170>)
 800e2e2:	400a      	ands	r2, r1
 800e2e4:	601a      	str	r2, [r3, #0]
 800e2e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2e8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e2ea:	6a3b      	ldr	r3, [r7, #32]
 800e2ec:	f383 8810 	msr	PRIMASK, r3
}
 800e2f0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e2f2:	f3ef 8310 	mrs	r3, PRIMASK
 800e2f6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800e2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e2fa:	637b      	str	r3, [r7, #52]	; 0x34
 800e2fc:	2301      	movs	r3, #1
 800e2fe:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e302:	f383 8810 	msr	PRIMASK, r3
}
 800e306:	46c0      	nop			; (mov r8, r8)
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	689a      	ldr	r2, [r3, #8]
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	2101      	movs	r1, #1
 800e314:	438a      	bics	r2, r1
 800e316:	609a      	str	r2, [r3, #8]
 800e318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e31a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e31e:	f383 8810 	msr	PRIMASK, r3
}
 800e322:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	228c      	movs	r2, #140	; 0x8c
 800e328:	2120      	movs	r1, #32
 800e32a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	2200      	movs	r2, #0
 800e330:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	2200      	movs	r2, #0
 800e336:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e33c:	2b01      	cmp	r3, #1
 800e33e:	d12f      	bne.n	800e3a0 <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	2200      	movs	r2, #0
 800e344:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e346:	f3ef 8310 	mrs	r3, PRIMASK
 800e34a:	60fb      	str	r3, [r7, #12]
  return(result);
 800e34c:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e34e:	633b      	str	r3, [r7, #48]	; 0x30
 800e350:	2301      	movs	r3, #1
 800e352:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e354:	693b      	ldr	r3, [r7, #16]
 800e356:	f383 8810 	msr	PRIMASK, r3
}
 800e35a:	46c0      	nop			; (mov r8, r8)
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	681a      	ldr	r2, [r3, #0]
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	2110      	movs	r1, #16
 800e368:	438a      	bics	r2, r1
 800e36a:	601a      	str	r2, [r3, #0]
 800e36c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e36e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e370:	697b      	ldr	r3, [r7, #20]
 800e372:	f383 8810 	msr	PRIMASK, r3
}
 800e376:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	69db      	ldr	r3, [r3, #28]
 800e37e:	2210      	movs	r2, #16
 800e380:	4013      	ands	r3, r2
 800e382:	2b10      	cmp	r3, #16
 800e384:	d103      	bne.n	800e38e <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	2210      	movs	r2, #16
 800e38c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	225c      	movs	r2, #92	; 0x5c
 800e392:	5a9a      	ldrh	r2, [r3, r2]
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	0011      	movs	r1, r2
 800e398:	0018      	movs	r0, r3
 800e39a:	f7ff fa13 	bl	800d7c4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e39e:	e00c      	b.n	800e3ba <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	0018      	movs	r0, r3
 800e3a4:	f7f6 f8fe 	bl	80045a4 <HAL_UART_RxCpltCallback>
}
 800e3a8:	e007      	b.n	800e3ba <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	699a      	ldr	r2, [r3, #24]
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	2108      	movs	r1, #8
 800e3b6:	430a      	orrs	r2, r1
 800e3b8:	619a      	str	r2, [r3, #24]
}
 800e3ba:	46c0      	nop			; (mov r8, r8)
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	b010      	add	sp, #64	; 0x40
 800e3c0:	bd80      	pop	{r7, pc}
 800e3c2:	46c0      	nop			; (mov r8, r8)
 800e3c4:	fffffedf 	.word	0xfffffedf

0800e3c8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b090      	sub	sp, #64	; 0x40
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800e3d0:	203e      	movs	r0, #62	; 0x3e
 800e3d2:	183b      	adds	r3, r7, r0
 800e3d4:	687a      	ldr	r2, [r7, #4]
 800e3d6:	2160      	movs	r1, #96	; 0x60
 800e3d8:	5a52      	ldrh	r2, [r2, r1]
 800e3da:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	228c      	movs	r2, #140	; 0x8c
 800e3e0:	589b      	ldr	r3, [r3, r2]
 800e3e2:	2b22      	cmp	r3, #34	; 0x22
 800e3e4:	d000      	beq.n	800e3e8 <UART_RxISR_16BIT+0x20>
 800e3e6:	e09a      	b.n	800e51e <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e3ee:	213c      	movs	r1, #60	; 0x3c
 800e3f0:	187b      	adds	r3, r7, r1
 800e3f2:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e3f8:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 800e3fa:	187b      	adds	r3, r7, r1
 800e3fc:	183a      	adds	r2, r7, r0
 800e3fe:	881b      	ldrh	r3, [r3, #0]
 800e400:	8812      	ldrh	r2, [r2, #0]
 800e402:	4013      	ands	r3, r2
 800e404:	b29a      	uxth	r2, r3
 800e406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e408:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e40e:	1c9a      	adds	r2, r3, #2
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	225e      	movs	r2, #94	; 0x5e
 800e418:	5a9b      	ldrh	r3, [r3, r2]
 800e41a:	b29b      	uxth	r3, r3
 800e41c:	3b01      	subs	r3, #1
 800e41e:	b299      	uxth	r1, r3
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	225e      	movs	r2, #94	; 0x5e
 800e424:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	225e      	movs	r2, #94	; 0x5e
 800e42a:	5a9b      	ldrh	r3, [r3, r2]
 800e42c:	b29b      	uxth	r3, r3
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d000      	beq.n	800e434 <UART_RxISR_16BIT+0x6c>
 800e432:	e07c      	b.n	800e52e <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e434:	f3ef 8310 	mrs	r3, PRIMASK
 800e438:	617b      	str	r3, [r7, #20]
  return(result);
 800e43a:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e43c:	637b      	str	r3, [r7, #52]	; 0x34
 800e43e:	2301      	movs	r3, #1
 800e440:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e442:	69bb      	ldr	r3, [r7, #24]
 800e444:	f383 8810 	msr	PRIMASK, r3
}
 800e448:	46c0      	nop			; (mov r8, r8)
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	681a      	ldr	r2, [r3, #0]
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	4938      	ldr	r1, [pc, #224]	; (800e538 <UART_RxISR_16BIT+0x170>)
 800e456:	400a      	ands	r2, r1
 800e458:	601a      	str	r2, [r3, #0]
 800e45a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e45c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e45e:	69fb      	ldr	r3, [r7, #28]
 800e460:	f383 8810 	msr	PRIMASK, r3
}
 800e464:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e466:	f3ef 8310 	mrs	r3, PRIMASK
 800e46a:	623b      	str	r3, [r7, #32]
  return(result);
 800e46c:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e46e:	633b      	str	r3, [r7, #48]	; 0x30
 800e470:	2301      	movs	r3, #1
 800e472:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e476:	f383 8810 	msr	PRIMASK, r3
}
 800e47a:	46c0      	nop			; (mov r8, r8)
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	689a      	ldr	r2, [r3, #8]
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	2101      	movs	r1, #1
 800e488:	438a      	bics	r2, r1
 800e48a:	609a      	str	r2, [r3, #8]
 800e48c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e48e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e492:	f383 8810 	msr	PRIMASK, r3
}
 800e496:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	228c      	movs	r2, #140	; 0x8c
 800e49c:	2120      	movs	r1, #32
 800e49e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	2200      	movs	r2, #0
 800e4a4:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4b0:	2b01      	cmp	r3, #1
 800e4b2:	d12f      	bne.n	800e514 <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	2200      	movs	r2, #0
 800e4b8:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e4ba:	f3ef 8310 	mrs	r3, PRIMASK
 800e4be:	60bb      	str	r3, [r7, #8]
  return(result);
 800e4c0:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e4c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e4c4:	2301      	movs	r3, #1
 800e4c6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	f383 8810 	msr	PRIMASK, r3
}
 800e4ce:	46c0      	nop			; (mov r8, r8)
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	681a      	ldr	r2, [r3, #0]
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	2110      	movs	r1, #16
 800e4dc:	438a      	bics	r2, r1
 800e4de:	601a      	str	r2, [r3, #0]
 800e4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e4e4:	693b      	ldr	r3, [r7, #16]
 800e4e6:	f383 8810 	msr	PRIMASK, r3
}
 800e4ea:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	69db      	ldr	r3, [r3, #28]
 800e4f2:	2210      	movs	r2, #16
 800e4f4:	4013      	ands	r3, r2
 800e4f6:	2b10      	cmp	r3, #16
 800e4f8:	d103      	bne.n	800e502 <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	2210      	movs	r2, #16
 800e500:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	225c      	movs	r2, #92	; 0x5c
 800e506:	5a9a      	ldrh	r2, [r3, r2]
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	0011      	movs	r1, r2
 800e50c:	0018      	movs	r0, r3
 800e50e:	f7ff f959 	bl	800d7c4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e512:	e00c      	b.n	800e52e <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	0018      	movs	r0, r3
 800e518:	f7f6 f844 	bl	80045a4 <HAL_UART_RxCpltCallback>
}
 800e51c:	e007      	b.n	800e52e <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	699a      	ldr	r2, [r3, #24]
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	2108      	movs	r1, #8
 800e52a:	430a      	orrs	r2, r1
 800e52c:	619a      	str	r2, [r3, #24]
}
 800e52e:	46c0      	nop			; (mov r8, r8)
 800e530:	46bd      	mov	sp, r7
 800e532:	b010      	add	sp, #64	; 0x40
 800e534:	bd80      	pop	{r7, pc}
 800e536:	46c0      	nop			; (mov r8, r8)
 800e538:	fffffedf 	.word	0xfffffedf

0800e53c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b09c      	sub	sp, #112	; 0x70
 800e540:	af00      	add	r7, sp, #0
 800e542:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800e544:	236a      	movs	r3, #106	; 0x6a
 800e546:	18fb      	adds	r3, r7, r3
 800e548:	687a      	ldr	r2, [r7, #4]
 800e54a:	2160      	movs	r1, #96	; 0x60
 800e54c:	5a52      	ldrh	r2, [r2, r1]
 800e54e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	69db      	ldr	r3, [r3, #28]
 800e556:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	689b      	ldr	r3, [r3, #8]
 800e566:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	228c      	movs	r2, #140	; 0x8c
 800e56c:	589b      	ldr	r3, [r3, r2]
 800e56e:	2b22      	cmp	r3, #34	; 0x22
 800e570:	d000      	beq.n	800e574 <UART_RxISR_8BIT_FIFOEN+0x38>
 800e572:	e144      	b.n	800e7fe <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e574:	235e      	movs	r3, #94	; 0x5e
 800e576:	18fb      	adds	r3, r7, r3
 800e578:	687a      	ldr	r2, [r7, #4]
 800e57a:	2168      	movs	r1, #104	; 0x68
 800e57c:	5a52      	ldrh	r2, [r2, r1]
 800e57e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e580:	e0eb      	b.n	800e75a <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e588:	215c      	movs	r1, #92	; 0x5c
 800e58a:	187b      	adds	r3, r7, r1
 800e58c:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e58e:	187b      	adds	r3, r7, r1
 800e590:	881b      	ldrh	r3, [r3, #0]
 800e592:	b2da      	uxtb	r2, r3
 800e594:	236a      	movs	r3, #106	; 0x6a
 800e596:	18fb      	adds	r3, r7, r3
 800e598:	881b      	ldrh	r3, [r3, #0]
 800e59a:	b2d9      	uxtb	r1, r3
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e5a0:	400a      	ands	r2, r1
 800e5a2:	b2d2      	uxtb	r2, r2
 800e5a4:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e5aa:	1c5a      	adds	r2, r3, #1
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	225e      	movs	r2, #94	; 0x5e
 800e5b4:	5a9b      	ldrh	r3, [r3, r2]
 800e5b6:	b29b      	uxth	r3, r3
 800e5b8:	3b01      	subs	r3, #1
 800e5ba:	b299      	uxth	r1, r3
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	225e      	movs	r2, #94	; 0x5e
 800e5c0:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	69db      	ldr	r3, [r3, #28]
 800e5c8:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e5ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e5cc:	2207      	movs	r2, #7
 800e5ce:	4013      	ands	r3, r2
 800e5d0:	d049      	beq.n	800e666 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e5d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e5d4:	2201      	movs	r2, #1
 800e5d6:	4013      	ands	r3, r2
 800e5d8:	d010      	beq.n	800e5fc <UART_RxISR_8BIT_FIFOEN+0xc0>
 800e5da:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e5dc:	2380      	movs	r3, #128	; 0x80
 800e5de:	005b      	lsls	r3, r3, #1
 800e5e0:	4013      	ands	r3, r2
 800e5e2:	d00b      	beq.n	800e5fc <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	2201      	movs	r2, #1
 800e5ea:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	2290      	movs	r2, #144	; 0x90
 800e5f0:	589b      	ldr	r3, [r3, r2]
 800e5f2:	2201      	movs	r2, #1
 800e5f4:	431a      	orrs	r2, r3
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	2190      	movs	r1, #144	; 0x90
 800e5fa:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e5fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e5fe:	2202      	movs	r2, #2
 800e600:	4013      	ands	r3, r2
 800e602:	d00f      	beq.n	800e624 <UART_RxISR_8BIT_FIFOEN+0xe8>
 800e604:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e606:	2201      	movs	r2, #1
 800e608:	4013      	ands	r3, r2
 800e60a:	d00b      	beq.n	800e624 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	2202      	movs	r2, #2
 800e612:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	2290      	movs	r2, #144	; 0x90
 800e618:	589b      	ldr	r3, [r3, r2]
 800e61a:	2204      	movs	r2, #4
 800e61c:	431a      	orrs	r2, r3
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	2190      	movs	r1, #144	; 0x90
 800e622:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e624:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e626:	2204      	movs	r2, #4
 800e628:	4013      	ands	r3, r2
 800e62a:	d00f      	beq.n	800e64c <UART_RxISR_8BIT_FIFOEN+0x110>
 800e62c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e62e:	2201      	movs	r2, #1
 800e630:	4013      	ands	r3, r2
 800e632:	d00b      	beq.n	800e64c <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	2204      	movs	r2, #4
 800e63a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	2290      	movs	r2, #144	; 0x90
 800e640:	589b      	ldr	r3, [r3, r2]
 800e642:	2202      	movs	r2, #2
 800e644:	431a      	orrs	r2, r3
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	2190      	movs	r1, #144	; 0x90
 800e64a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	2290      	movs	r2, #144	; 0x90
 800e650:	589b      	ldr	r3, [r3, r2]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d007      	beq.n	800e666 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	0018      	movs	r0, r3
 800e65a:	f7f5 ff6b 	bl	8004534 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	2290      	movs	r2, #144	; 0x90
 800e662:	2100      	movs	r1, #0
 800e664:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	225e      	movs	r2, #94	; 0x5e
 800e66a:	5a9b      	ldrh	r3, [r3, r2]
 800e66c:	b29b      	uxth	r3, r3
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d173      	bne.n	800e75a <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e672:	f3ef 8310 	mrs	r3, PRIMASK
 800e676:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800e678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e67a:	65bb      	str	r3, [r7, #88]	; 0x58
 800e67c:	2301      	movs	r3, #1
 800e67e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e682:	f383 8810 	msr	PRIMASK, r3
}
 800e686:	46c0      	nop			; (mov r8, r8)
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	681a      	ldr	r2, [r3, #0]
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	4961      	ldr	r1, [pc, #388]	; (800e818 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 800e694:	400a      	ands	r2, r1
 800e696:	601a      	str	r2, [r3, #0]
 800e698:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e69a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e69c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e69e:	f383 8810 	msr	PRIMASK, r3
}
 800e6a2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e6a4:	f3ef 8310 	mrs	r3, PRIMASK
 800e6a8:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 800e6aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e6ac:	657b      	str	r3, [r7, #84]	; 0x54
 800e6ae:	2301      	movs	r3, #1
 800e6b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e6b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6b4:	f383 8810 	msr	PRIMASK, r3
}
 800e6b8:	46c0      	nop			; (mov r8, r8)
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	689a      	ldr	r2, [r3, #8]
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	4955      	ldr	r1, [pc, #340]	; (800e81c <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 800e6c6:	400a      	ands	r2, r1
 800e6c8:	609a      	str	r2, [r3, #8]
 800e6ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e6cc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e6ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6d0:	f383 8810 	msr	PRIMASK, r3
}
 800e6d4:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	228c      	movs	r2, #140	; 0x8c
 800e6da:	2120      	movs	r1, #32
 800e6dc:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	2200      	movs	r2, #0
 800e6e2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e6ee:	2b01      	cmp	r3, #1
 800e6f0:	d12f      	bne.n	800e752 <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	2200      	movs	r2, #0
 800e6f6:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e6f8:	f3ef 8310 	mrs	r3, PRIMASK
 800e6fc:	623b      	str	r3, [r7, #32]
  return(result);
 800e6fe:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e700:	653b      	str	r3, [r7, #80]	; 0x50
 800e702:	2301      	movs	r3, #1
 800e704:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e708:	f383 8810 	msr	PRIMASK, r3
}
 800e70c:	46c0      	nop			; (mov r8, r8)
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	681a      	ldr	r2, [r3, #0]
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	2110      	movs	r1, #16
 800e71a:	438a      	bics	r2, r1
 800e71c:	601a      	str	r2, [r3, #0]
 800e71e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e720:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e724:	f383 8810 	msr	PRIMASK, r3
}
 800e728:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	69db      	ldr	r3, [r3, #28]
 800e730:	2210      	movs	r2, #16
 800e732:	4013      	ands	r3, r2
 800e734:	2b10      	cmp	r3, #16
 800e736:	d103      	bne.n	800e740 <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	2210      	movs	r2, #16
 800e73e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	225c      	movs	r2, #92	; 0x5c
 800e744:	5a9a      	ldrh	r2, [r3, r2]
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	0011      	movs	r1, r2
 800e74a:	0018      	movs	r0, r3
 800e74c:	f7ff f83a 	bl	800d7c4 <HAL_UARTEx_RxEventCallback>
 800e750:	e003      	b.n	800e75a <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	0018      	movs	r0, r3
 800e756:	f7f5 ff25 	bl	80045a4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e75a:	235e      	movs	r3, #94	; 0x5e
 800e75c:	18fb      	adds	r3, r7, r3
 800e75e:	881b      	ldrh	r3, [r3, #0]
 800e760:	2b00      	cmp	r3, #0
 800e762:	d004      	beq.n	800e76e <UART_RxISR_8BIT_FIFOEN+0x232>
 800e764:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e766:	2220      	movs	r2, #32
 800e768:	4013      	ands	r3, r2
 800e76a:	d000      	beq.n	800e76e <UART_RxISR_8BIT_FIFOEN+0x232>
 800e76c:	e709      	b.n	800e582 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e76e:	204e      	movs	r0, #78	; 0x4e
 800e770:	183b      	adds	r3, r7, r0
 800e772:	687a      	ldr	r2, [r7, #4]
 800e774:	215e      	movs	r1, #94	; 0x5e
 800e776:	5a52      	ldrh	r2, [r2, r1]
 800e778:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e77a:	0001      	movs	r1, r0
 800e77c:	187b      	adds	r3, r7, r1
 800e77e:	881b      	ldrh	r3, [r3, #0]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d044      	beq.n	800e80e <UART_RxISR_8BIT_FIFOEN+0x2d2>
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	2268      	movs	r2, #104	; 0x68
 800e788:	5a9b      	ldrh	r3, [r3, r2]
 800e78a:	187a      	adds	r2, r7, r1
 800e78c:	8812      	ldrh	r2, [r2, #0]
 800e78e:	429a      	cmp	r2, r3
 800e790:	d23d      	bcs.n	800e80e <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e792:	f3ef 8310 	mrs	r3, PRIMASK
 800e796:	60bb      	str	r3, [r7, #8]
  return(result);
 800e798:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e79a:	64bb      	str	r3, [r7, #72]	; 0x48
 800e79c:	2301      	movs	r3, #1
 800e79e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	f383 8810 	msr	PRIMASK, r3
}
 800e7a6:	46c0      	nop			; (mov r8, r8)
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	689a      	ldr	r2, [r3, #8]
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	491b      	ldr	r1, [pc, #108]	; (800e820 <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 800e7b4:	400a      	ands	r2, r1
 800e7b6:	609a      	str	r2, [r3, #8]
 800e7b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e7ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e7bc:	693b      	ldr	r3, [r7, #16]
 800e7be:	f383 8810 	msr	PRIMASK, r3
}
 800e7c2:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	4a17      	ldr	r2, [pc, #92]	; (800e824 <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 800e7c8:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e7ca:	f3ef 8310 	mrs	r3, PRIMASK
 800e7ce:	617b      	str	r3, [r7, #20]
  return(result);
 800e7d0:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e7d2:	647b      	str	r3, [r7, #68]	; 0x44
 800e7d4:	2301      	movs	r3, #1
 800e7d6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e7d8:	69bb      	ldr	r3, [r7, #24]
 800e7da:	f383 8810 	msr	PRIMASK, r3
}
 800e7de:	46c0      	nop			; (mov r8, r8)
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	681a      	ldr	r2, [r3, #0]
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	2120      	movs	r1, #32
 800e7ec:	430a      	orrs	r2, r1
 800e7ee:	601a      	str	r2, [r3, #0]
 800e7f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e7f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e7f4:	69fb      	ldr	r3, [r7, #28]
 800e7f6:	f383 8810 	msr	PRIMASK, r3
}
 800e7fa:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e7fc:	e007      	b.n	800e80e <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	699a      	ldr	r2, [r3, #24]
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	2108      	movs	r1, #8
 800e80a:	430a      	orrs	r2, r1
 800e80c:	619a      	str	r2, [r3, #24]
}
 800e80e:	46c0      	nop			; (mov r8, r8)
 800e810:	46bd      	mov	sp, r7
 800e812:	b01c      	add	sp, #112	; 0x70
 800e814:	bd80      	pop	{r7, pc}
 800e816:	46c0      	nop			; (mov r8, r8)
 800e818:	fffffeff 	.word	0xfffffeff
 800e81c:	effffffe 	.word	0xeffffffe
 800e820:	efffffff 	.word	0xefffffff
 800e824:	0800e255 	.word	0x0800e255

0800e828 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e828:	b580      	push	{r7, lr}
 800e82a:	b09e      	sub	sp, #120	; 0x78
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800e830:	2372      	movs	r3, #114	; 0x72
 800e832:	18fb      	adds	r3, r7, r3
 800e834:	687a      	ldr	r2, [r7, #4]
 800e836:	2160      	movs	r1, #96	; 0x60
 800e838:	5a52      	ldrh	r2, [r2, r1]
 800e83a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	69db      	ldr	r3, [r3, #28]
 800e842:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	689b      	ldr	r3, [r3, #8]
 800e852:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	228c      	movs	r2, #140	; 0x8c
 800e858:	589b      	ldr	r3, [r3, r2]
 800e85a:	2b22      	cmp	r3, #34	; 0x22
 800e85c:	d000      	beq.n	800e860 <UART_RxISR_16BIT_FIFOEN+0x38>
 800e85e:	e144      	b.n	800eaea <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e860:	2366      	movs	r3, #102	; 0x66
 800e862:	18fb      	adds	r3, r7, r3
 800e864:	687a      	ldr	r2, [r7, #4]
 800e866:	2168      	movs	r1, #104	; 0x68
 800e868:	5a52      	ldrh	r2, [r2, r1]
 800e86a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e86c:	e0eb      	b.n	800ea46 <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e874:	2164      	movs	r1, #100	; 0x64
 800e876:	187b      	adds	r3, r7, r1
 800e878:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e87e:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 800e880:	187b      	adds	r3, r7, r1
 800e882:	2272      	movs	r2, #114	; 0x72
 800e884:	18ba      	adds	r2, r7, r2
 800e886:	881b      	ldrh	r3, [r3, #0]
 800e888:	8812      	ldrh	r2, [r2, #0]
 800e88a:	4013      	ands	r3, r2
 800e88c:	b29a      	uxth	r2, r3
 800e88e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e890:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e896:	1c9a      	adds	r2, r3, #2
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	225e      	movs	r2, #94	; 0x5e
 800e8a0:	5a9b      	ldrh	r3, [r3, r2]
 800e8a2:	b29b      	uxth	r3, r3
 800e8a4:	3b01      	subs	r3, #1
 800e8a6:	b299      	uxth	r1, r3
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	225e      	movs	r2, #94	; 0x5e
 800e8ac:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	69db      	ldr	r3, [r3, #28]
 800e8b4:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e8b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e8b8:	2207      	movs	r2, #7
 800e8ba:	4013      	ands	r3, r2
 800e8bc:	d049      	beq.n	800e952 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e8be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e8c0:	2201      	movs	r2, #1
 800e8c2:	4013      	ands	r3, r2
 800e8c4:	d010      	beq.n	800e8e8 <UART_RxISR_16BIT_FIFOEN+0xc0>
 800e8c6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e8c8:	2380      	movs	r3, #128	; 0x80
 800e8ca:	005b      	lsls	r3, r3, #1
 800e8cc:	4013      	ands	r3, r2
 800e8ce:	d00b      	beq.n	800e8e8 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	2201      	movs	r2, #1
 800e8d6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	2290      	movs	r2, #144	; 0x90
 800e8dc:	589b      	ldr	r3, [r3, r2]
 800e8de:	2201      	movs	r2, #1
 800e8e0:	431a      	orrs	r2, r3
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	2190      	movs	r1, #144	; 0x90
 800e8e6:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e8e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e8ea:	2202      	movs	r2, #2
 800e8ec:	4013      	ands	r3, r2
 800e8ee:	d00f      	beq.n	800e910 <UART_RxISR_16BIT_FIFOEN+0xe8>
 800e8f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e8f2:	2201      	movs	r2, #1
 800e8f4:	4013      	ands	r3, r2
 800e8f6:	d00b      	beq.n	800e910 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	2202      	movs	r2, #2
 800e8fe:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	2290      	movs	r2, #144	; 0x90
 800e904:	589b      	ldr	r3, [r3, r2]
 800e906:	2204      	movs	r2, #4
 800e908:	431a      	orrs	r2, r3
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	2190      	movs	r1, #144	; 0x90
 800e90e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e910:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e912:	2204      	movs	r2, #4
 800e914:	4013      	ands	r3, r2
 800e916:	d00f      	beq.n	800e938 <UART_RxISR_16BIT_FIFOEN+0x110>
 800e918:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e91a:	2201      	movs	r2, #1
 800e91c:	4013      	ands	r3, r2
 800e91e:	d00b      	beq.n	800e938 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	2204      	movs	r2, #4
 800e926:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	2290      	movs	r2, #144	; 0x90
 800e92c:	589b      	ldr	r3, [r3, r2]
 800e92e:	2202      	movs	r2, #2
 800e930:	431a      	orrs	r2, r3
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	2190      	movs	r1, #144	; 0x90
 800e936:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	2290      	movs	r2, #144	; 0x90
 800e93c:	589b      	ldr	r3, [r3, r2]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d007      	beq.n	800e952 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	0018      	movs	r0, r3
 800e946:	f7f5 fdf5 	bl	8004534 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	2290      	movs	r2, #144	; 0x90
 800e94e:	2100      	movs	r1, #0
 800e950:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	225e      	movs	r2, #94	; 0x5e
 800e956:	5a9b      	ldrh	r3, [r3, r2]
 800e958:	b29b      	uxth	r3, r3
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d173      	bne.n	800ea46 <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e95e:	f3ef 8310 	mrs	r3, PRIMASK
 800e962:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800e964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e966:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e968:	2301      	movs	r3, #1
 800e96a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e96c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e96e:	f383 8810 	msr	PRIMASK, r3
}
 800e972:	46c0      	nop			; (mov r8, r8)
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	681a      	ldr	r2, [r3, #0]
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	4961      	ldr	r1, [pc, #388]	; (800eb04 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 800e980:	400a      	ands	r2, r1
 800e982:	601a      	str	r2, [r3, #0]
 800e984:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e986:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e98a:	f383 8810 	msr	PRIMASK, r3
}
 800e98e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e990:	f3ef 8310 	mrs	r3, PRIMASK
 800e994:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800e996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e998:	65bb      	str	r3, [r7, #88]	; 0x58
 800e99a:	2301      	movs	r3, #1
 800e99c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e99e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9a0:	f383 8810 	msr	PRIMASK, r3
}
 800e9a4:	46c0      	nop			; (mov r8, r8)
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	689a      	ldr	r2, [r3, #8]
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	4955      	ldr	r1, [pc, #340]	; (800eb08 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 800e9b2:	400a      	ands	r2, r1
 800e9b4:	609a      	str	r2, [r3, #8]
 800e9b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e9b8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e9ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e9bc:	f383 8810 	msr	PRIMASK, r3
}
 800e9c0:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	228c      	movs	r2, #140	; 0x8c
 800e9c6:	2120      	movs	r1, #32
 800e9c8:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	2200      	movs	r2, #0
 800e9ce:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e9da:	2b01      	cmp	r3, #1
 800e9dc:	d12f      	bne.n	800ea3e <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	2200      	movs	r2, #0
 800e9e2:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e9e4:	f3ef 8310 	mrs	r3, PRIMASK
 800e9e8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800e9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e9ec:	657b      	str	r3, [r7, #84]	; 0x54
 800e9ee:	2301      	movs	r3, #1
 800e9f0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e9f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9f4:	f383 8810 	msr	PRIMASK, r3
}
 800e9f8:	46c0      	nop			; (mov r8, r8)
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	681a      	ldr	r2, [r3, #0]
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	2110      	movs	r1, #16
 800ea06:	438a      	bics	r2, r1
 800ea08:	601a      	str	r2, [r3, #0]
 800ea0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ea0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ea0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea10:	f383 8810 	msr	PRIMASK, r3
}
 800ea14:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	69db      	ldr	r3, [r3, #28]
 800ea1c:	2210      	movs	r2, #16
 800ea1e:	4013      	ands	r3, r2
 800ea20:	2b10      	cmp	r3, #16
 800ea22:	d103      	bne.n	800ea2c <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	2210      	movs	r2, #16
 800ea2a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	225c      	movs	r2, #92	; 0x5c
 800ea30:	5a9a      	ldrh	r2, [r3, r2]
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	0011      	movs	r1, r2
 800ea36:	0018      	movs	r0, r3
 800ea38:	f7fe fec4 	bl	800d7c4 <HAL_UARTEx_RxEventCallback>
 800ea3c:	e003      	b.n	800ea46 <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	0018      	movs	r0, r3
 800ea42:	f7f5 fdaf 	bl	80045a4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ea46:	2366      	movs	r3, #102	; 0x66
 800ea48:	18fb      	adds	r3, r7, r3
 800ea4a:	881b      	ldrh	r3, [r3, #0]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d004      	beq.n	800ea5a <UART_RxISR_16BIT_FIFOEN+0x232>
 800ea50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ea52:	2220      	movs	r2, #32
 800ea54:	4013      	ands	r3, r2
 800ea56:	d000      	beq.n	800ea5a <UART_RxISR_16BIT_FIFOEN+0x232>
 800ea58:	e709      	b.n	800e86e <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ea5a:	2052      	movs	r0, #82	; 0x52
 800ea5c:	183b      	adds	r3, r7, r0
 800ea5e:	687a      	ldr	r2, [r7, #4]
 800ea60:	215e      	movs	r1, #94	; 0x5e
 800ea62:	5a52      	ldrh	r2, [r2, r1]
 800ea64:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ea66:	0001      	movs	r1, r0
 800ea68:	187b      	adds	r3, r7, r1
 800ea6a:	881b      	ldrh	r3, [r3, #0]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d044      	beq.n	800eafa <UART_RxISR_16BIT_FIFOEN+0x2d2>
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	2268      	movs	r2, #104	; 0x68
 800ea74:	5a9b      	ldrh	r3, [r3, r2]
 800ea76:	187a      	adds	r2, r7, r1
 800ea78:	8812      	ldrh	r2, [r2, #0]
 800ea7a:	429a      	cmp	r2, r3
 800ea7c:	d23d      	bcs.n	800eafa <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ea7e:	f3ef 8310 	mrs	r3, PRIMASK
 800ea82:	60fb      	str	r3, [r7, #12]
  return(result);
 800ea84:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ea86:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ea88:	2301      	movs	r3, #1
 800ea8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ea8c:	693b      	ldr	r3, [r7, #16]
 800ea8e:	f383 8810 	msr	PRIMASK, r3
}
 800ea92:	46c0      	nop			; (mov r8, r8)
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	689a      	ldr	r2, [r3, #8]
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	491b      	ldr	r1, [pc, #108]	; (800eb0c <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 800eaa0:	400a      	ands	r2, r1
 800eaa2:	609a      	str	r2, [r3, #8]
 800eaa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eaa6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eaa8:	697b      	ldr	r3, [r7, #20]
 800eaaa:	f383 8810 	msr	PRIMASK, r3
}
 800eaae:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	4a17      	ldr	r2, [pc, #92]	; (800eb10 <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 800eab4:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eab6:	f3ef 8310 	mrs	r3, PRIMASK
 800eaba:	61bb      	str	r3, [r7, #24]
  return(result);
 800eabc:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800eabe:	64bb      	str	r3, [r7, #72]	; 0x48
 800eac0:	2301      	movs	r3, #1
 800eac2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eac4:	69fb      	ldr	r3, [r7, #28]
 800eac6:	f383 8810 	msr	PRIMASK, r3
}
 800eaca:	46c0      	nop			; (mov r8, r8)
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	681a      	ldr	r2, [r3, #0]
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	2120      	movs	r1, #32
 800ead8:	430a      	orrs	r2, r1
 800eada:	601a      	str	r2, [r3, #0]
 800eadc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eade:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eae0:	6a3b      	ldr	r3, [r7, #32]
 800eae2:	f383 8810 	msr	PRIMASK, r3
}
 800eae6:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800eae8:	e007      	b.n	800eafa <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	699a      	ldr	r2, [r3, #24]
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	2108      	movs	r1, #8
 800eaf6:	430a      	orrs	r2, r1
 800eaf8:	619a      	str	r2, [r3, #24]
}
 800eafa:	46c0      	nop			; (mov r8, r8)
 800eafc:	46bd      	mov	sp, r7
 800eafe:	b01e      	add	sp, #120	; 0x78
 800eb00:	bd80      	pop	{r7, pc}
 800eb02:	46c0      	nop			; (mov r8, r8)
 800eb04:	fffffeff 	.word	0xfffffeff
 800eb08:	effffffe 	.word	0xeffffffe
 800eb0c:	efffffff 	.word	0xefffffff
 800eb10:	0800e3c9 	.word	0x0800e3c9

0800eb14 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800eb14:	b580      	push	{r7, lr}
 800eb16:	b082      	sub	sp, #8
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800eb1c:	46c0      	nop			; (mov r8, r8)
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	b002      	add	sp, #8
 800eb22:	bd80      	pop	{r7, pc}

0800eb24 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b082      	sub	sp, #8
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800eb2c:	46c0      	nop			; (mov r8, r8)
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	b002      	add	sp, #8
 800eb32:	bd80      	pop	{r7, pc}

0800eb34 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b082      	sub	sp, #8
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800eb3c:	46c0      	nop			; (mov r8, r8)
 800eb3e:	46bd      	mov	sp, r7
 800eb40:	b002      	add	sp, #8
 800eb42:	bd80      	pop	{r7, pc}

0800eb44 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800eb44:	b580      	push	{r7, lr}
 800eb46:	b084      	sub	sp, #16
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	2284      	movs	r2, #132	; 0x84
 800eb50:	5c9b      	ldrb	r3, [r3, r2]
 800eb52:	2b01      	cmp	r3, #1
 800eb54:	d101      	bne.n	800eb5a <HAL_UARTEx_DisableFifoMode+0x16>
 800eb56:	2302      	movs	r3, #2
 800eb58:	e027      	b.n	800ebaa <HAL_UARTEx_DisableFifoMode+0x66>
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	2284      	movs	r2, #132	; 0x84
 800eb5e:	2101      	movs	r1, #1
 800eb60:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	2288      	movs	r2, #136	; 0x88
 800eb66:	2124      	movs	r1, #36	; 0x24
 800eb68:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	681a      	ldr	r2, [r3, #0]
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	2101      	movs	r1, #1
 800eb7e:	438a      	bics	r2, r1
 800eb80:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	4a0b      	ldr	r2, [pc, #44]	; (800ebb4 <HAL_UARTEx_DisableFifoMode+0x70>)
 800eb86:	4013      	ands	r3, r2
 800eb88:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	2200      	movs	r2, #0
 800eb8e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	68fa      	ldr	r2, [r7, #12]
 800eb96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	2288      	movs	r2, #136	; 0x88
 800eb9c:	2120      	movs	r1, #32
 800eb9e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	2284      	movs	r2, #132	; 0x84
 800eba4:	2100      	movs	r1, #0
 800eba6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800eba8:	2300      	movs	r3, #0
}
 800ebaa:	0018      	movs	r0, r3
 800ebac:	46bd      	mov	sp, r7
 800ebae:	b004      	add	sp, #16
 800ebb0:	bd80      	pop	{r7, pc}
 800ebb2:	46c0      	nop			; (mov r8, r8)
 800ebb4:	dfffffff 	.word	0xdfffffff

0800ebb8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	b084      	sub	sp, #16
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	6078      	str	r0, [r7, #4]
 800ebc0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	2284      	movs	r2, #132	; 0x84
 800ebc6:	5c9b      	ldrb	r3, [r3, r2]
 800ebc8:	2b01      	cmp	r3, #1
 800ebca:	d101      	bne.n	800ebd0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ebcc:	2302      	movs	r3, #2
 800ebce:	e02e      	b.n	800ec2e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	2284      	movs	r2, #132	; 0x84
 800ebd4:	2101      	movs	r1, #1
 800ebd6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	2288      	movs	r2, #136	; 0x88
 800ebdc:	2124      	movs	r1, #36	; 0x24
 800ebde:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	681a      	ldr	r2, [r3, #0]
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	2101      	movs	r1, #1
 800ebf4:	438a      	bics	r2, r1
 800ebf6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	689b      	ldr	r3, [r3, #8]
 800ebfe:	00db      	lsls	r3, r3, #3
 800ec00:	08d9      	lsrs	r1, r3, #3
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	683a      	ldr	r2, [r7, #0]
 800ec08:	430a      	orrs	r2, r1
 800ec0a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	0018      	movs	r0, r3
 800ec10:	f000 f854 	bl	800ecbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	68fa      	ldr	r2, [r7, #12]
 800ec1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	2288      	movs	r2, #136	; 0x88
 800ec20:	2120      	movs	r1, #32
 800ec22:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	2284      	movs	r2, #132	; 0x84
 800ec28:	2100      	movs	r1, #0
 800ec2a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ec2c:	2300      	movs	r3, #0
}
 800ec2e:	0018      	movs	r0, r3
 800ec30:	46bd      	mov	sp, r7
 800ec32:	b004      	add	sp, #16
 800ec34:	bd80      	pop	{r7, pc}
	...

0800ec38 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ec38:	b580      	push	{r7, lr}
 800ec3a:	b084      	sub	sp, #16
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	6078      	str	r0, [r7, #4]
 800ec40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	2284      	movs	r2, #132	; 0x84
 800ec46:	5c9b      	ldrb	r3, [r3, r2]
 800ec48:	2b01      	cmp	r3, #1
 800ec4a:	d101      	bne.n	800ec50 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ec4c:	2302      	movs	r3, #2
 800ec4e:	e02f      	b.n	800ecb0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	2284      	movs	r2, #132	; 0x84
 800ec54:	2101      	movs	r1, #1
 800ec56:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	2288      	movs	r2, #136	; 0x88
 800ec5c:	2124      	movs	r1, #36	; 0x24
 800ec5e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	681a      	ldr	r2, [r3, #0]
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	2101      	movs	r1, #1
 800ec74:	438a      	bics	r2, r1
 800ec76:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	689b      	ldr	r3, [r3, #8]
 800ec7e:	4a0e      	ldr	r2, [pc, #56]	; (800ecb8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800ec80:	4013      	ands	r3, r2
 800ec82:	0019      	movs	r1, r3
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	683a      	ldr	r2, [r7, #0]
 800ec8a:	430a      	orrs	r2, r1
 800ec8c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	0018      	movs	r0, r3
 800ec92:	f000 f813 	bl	800ecbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	68fa      	ldr	r2, [r7, #12]
 800ec9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	2288      	movs	r2, #136	; 0x88
 800eca2:	2120      	movs	r1, #32
 800eca4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	2284      	movs	r2, #132	; 0x84
 800ecaa:	2100      	movs	r1, #0
 800ecac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ecae:	2300      	movs	r3, #0
}
 800ecb0:	0018      	movs	r0, r3
 800ecb2:	46bd      	mov	sp, r7
 800ecb4:	b004      	add	sp, #16
 800ecb6:	bd80      	pop	{r7, pc}
 800ecb8:	f1ffffff 	.word	0xf1ffffff

0800ecbc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ecbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ecbe:	b085      	sub	sp, #20
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d108      	bne.n	800ecde <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	226a      	movs	r2, #106	; 0x6a
 800ecd0:	2101      	movs	r1, #1
 800ecd2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	2268      	movs	r2, #104	; 0x68
 800ecd8:	2101      	movs	r1, #1
 800ecda:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ecdc:	e043      	b.n	800ed66 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ecde:	260f      	movs	r6, #15
 800ece0:	19bb      	adds	r3, r7, r6
 800ece2:	2208      	movs	r2, #8
 800ece4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ece6:	200e      	movs	r0, #14
 800ece8:	183b      	adds	r3, r7, r0
 800ecea:	2208      	movs	r2, #8
 800ecec:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	689b      	ldr	r3, [r3, #8]
 800ecf4:	0e5b      	lsrs	r3, r3, #25
 800ecf6:	b2da      	uxtb	r2, r3
 800ecf8:	240d      	movs	r4, #13
 800ecfa:	193b      	adds	r3, r7, r4
 800ecfc:	2107      	movs	r1, #7
 800ecfe:	400a      	ands	r2, r1
 800ed00:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	689b      	ldr	r3, [r3, #8]
 800ed08:	0f5b      	lsrs	r3, r3, #29
 800ed0a:	b2da      	uxtb	r2, r3
 800ed0c:	250c      	movs	r5, #12
 800ed0e:	197b      	adds	r3, r7, r5
 800ed10:	2107      	movs	r1, #7
 800ed12:	400a      	ands	r2, r1
 800ed14:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ed16:	183b      	adds	r3, r7, r0
 800ed18:	781b      	ldrb	r3, [r3, #0]
 800ed1a:	197a      	adds	r2, r7, r5
 800ed1c:	7812      	ldrb	r2, [r2, #0]
 800ed1e:	4914      	ldr	r1, [pc, #80]	; (800ed70 <UARTEx_SetNbDataToProcess+0xb4>)
 800ed20:	5c8a      	ldrb	r2, [r1, r2]
 800ed22:	435a      	muls	r2, r3
 800ed24:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800ed26:	197b      	adds	r3, r7, r5
 800ed28:	781b      	ldrb	r3, [r3, #0]
 800ed2a:	4a12      	ldr	r2, [pc, #72]	; (800ed74 <UARTEx_SetNbDataToProcess+0xb8>)
 800ed2c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ed2e:	0019      	movs	r1, r3
 800ed30:	f7f1 fa96 	bl	8000260 <__divsi3>
 800ed34:	0003      	movs	r3, r0
 800ed36:	b299      	uxth	r1, r3
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	226a      	movs	r2, #106	; 0x6a
 800ed3c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ed3e:	19bb      	adds	r3, r7, r6
 800ed40:	781b      	ldrb	r3, [r3, #0]
 800ed42:	193a      	adds	r2, r7, r4
 800ed44:	7812      	ldrb	r2, [r2, #0]
 800ed46:	490a      	ldr	r1, [pc, #40]	; (800ed70 <UARTEx_SetNbDataToProcess+0xb4>)
 800ed48:	5c8a      	ldrb	r2, [r1, r2]
 800ed4a:	435a      	muls	r2, r3
 800ed4c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800ed4e:	193b      	adds	r3, r7, r4
 800ed50:	781b      	ldrb	r3, [r3, #0]
 800ed52:	4a08      	ldr	r2, [pc, #32]	; (800ed74 <UARTEx_SetNbDataToProcess+0xb8>)
 800ed54:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ed56:	0019      	movs	r1, r3
 800ed58:	f7f1 fa82 	bl	8000260 <__divsi3>
 800ed5c:	0003      	movs	r3, r0
 800ed5e:	b299      	uxth	r1, r3
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	2268      	movs	r2, #104	; 0x68
 800ed64:	5299      	strh	r1, [r3, r2]
}
 800ed66:	46c0      	nop			; (mov r8, r8)
 800ed68:	46bd      	mov	sp, r7
 800ed6a:	b005      	add	sp, #20
 800ed6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed6e:	46c0      	nop			; (mov r8, r8)
 800ed70:	08013830 	.word	0x08013830
 800ed74:	08013838 	.word	0x08013838

0800ed78 <atoi>:
 800ed78:	b510      	push	{r4, lr}
 800ed7a:	220a      	movs	r2, #10
 800ed7c:	2100      	movs	r1, #0
 800ed7e:	f000 ffd9 	bl	800fd34 <strtol>
 800ed82:	bd10      	pop	{r4, pc}

0800ed84 <gcvt>:
 800ed84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed86:	001c      	movs	r4, r3
 800ed88:	0015      	movs	r5, r2
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	b085      	sub	sp, #20
 800ed90:	0006      	movs	r6, r0
 800ed92:	000f      	movs	r7, r1
 800ed94:	f7f1 fb66 	bl	8000464 <__aeabi_dcmplt>
 800ed98:	0023      	movs	r3, r4
 800ed9a:	2800      	cmp	r0, #0
 800ed9c:	d003      	beq.n	800eda6 <gcvt+0x22>
 800ed9e:	232d      	movs	r3, #45	; 0x2d
 800eda0:	3d01      	subs	r5, #1
 800eda2:	7023      	strb	r3, [r4, #0]
 800eda4:	1c63      	adds	r3, r4, #1
 800eda6:	2200      	movs	r2, #0
 800eda8:	4908      	ldr	r1, [pc, #32]	; (800edcc <gcvt+0x48>)
 800edaa:	9203      	str	r2, [sp, #12]
 800edac:	3267      	adds	r2, #103	; 0x67
 800edae:	9202      	str	r2, [sp, #8]
 800edb0:	9301      	str	r3, [sp, #4]
 800edb2:	9500      	str	r5, [sp, #0]
 800edb4:	003b      	movs	r3, r7
 800edb6:	0032      	movs	r2, r6
 800edb8:	6808      	ldr	r0, [r1, #0]
 800edba:	f001 f849 	bl	800fe50 <_gcvt>
 800edbe:	1e43      	subs	r3, r0, #1
 800edc0:	4198      	sbcs	r0, r3
 800edc2:	4240      	negs	r0, r0
 800edc4:	4004      	ands	r4, r0
 800edc6:	0020      	movs	r0, r4
 800edc8:	b005      	add	sp, #20
 800edca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800edcc:	200000e4 	.word	0x200000e4

0800edd0 <__errno>:
 800edd0:	4b01      	ldr	r3, [pc, #4]	; (800edd8 <__errno+0x8>)
 800edd2:	6818      	ldr	r0, [r3, #0]
 800edd4:	4770      	bx	lr
 800edd6:	46c0      	nop			; (mov r8, r8)
 800edd8:	200000e4 	.word	0x200000e4

0800eddc <__libc_init_array>:
 800eddc:	b570      	push	{r4, r5, r6, lr}
 800edde:	2600      	movs	r6, #0
 800ede0:	4d0c      	ldr	r5, [pc, #48]	; (800ee14 <__libc_init_array+0x38>)
 800ede2:	4c0d      	ldr	r4, [pc, #52]	; (800ee18 <__libc_init_array+0x3c>)
 800ede4:	1b64      	subs	r4, r4, r5
 800ede6:	10a4      	asrs	r4, r4, #2
 800ede8:	42a6      	cmp	r6, r4
 800edea:	d109      	bne.n	800ee00 <__libc_init_array+0x24>
 800edec:	2600      	movs	r6, #0
 800edee:	f004 fa61 	bl	80132b4 <_init>
 800edf2:	4d0a      	ldr	r5, [pc, #40]	; (800ee1c <__libc_init_array+0x40>)
 800edf4:	4c0a      	ldr	r4, [pc, #40]	; (800ee20 <__libc_init_array+0x44>)
 800edf6:	1b64      	subs	r4, r4, r5
 800edf8:	10a4      	asrs	r4, r4, #2
 800edfa:	42a6      	cmp	r6, r4
 800edfc:	d105      	bne.n	800ee0a <__libc_init_array+0x2e>
 800edfe:	bd70      	pop	{r4, r5, r6, pc}
 800ee00:	00b3      	lsls	r3, r6, #2
 800ee02:	58eb      	ldr	r3, [r5, r3]
 800ee04:	4798      	blx	r3
 800ee06:	3601      	adds	r6, #1
 800ee08:	e7ee      	b.n	800ede8 <__libc_init_array+0xc>
 800ee0a:	00b3      	lsls	r3, r6, #2
 800ee0c:	58eb      	ldr	r3, [r5, r3]
 800ee0e:	4798      	blx	r3
 800ee10:	3601      	adds	r6, #1
 800ee12:	e7f2      	b.n	800edfa <__libc_init_array+0x1e>
 800ee14:	08013cd8 	.word	0x08013cd8
 800ee18:	08013cd8 	.word	0x08013cd8
 800ee1c:	08013cd8 	.word	0x08013cd8
 800ee20:	08013cdc 	.word	0x08013cdc

0800ee24 <memcpy>:
 800ee24:	2300      	movs	r3, #0
 800ee26:	b510      	push	{r4, lr}
 800ee28:	429a      	cmp	r2, r3
 800ee2a:	d100      	bne.n	800ee2e <memcpy+0xa>
 800ee2c:	bd10      	pop	{r4, pc}
 800ee2e:	5ccc      	ldrb	r4, [r1, r3]
 800ee30:	54c4      	strb	r4, [r0, r3]
 800ee32:	3301      	adds	r3, #1
 800ee34:	e7f8      	b.n	800ee28 <memcpy+0x4>

0800ee36 <memset>:
 800ee36:	0003      	movs	r3, r0
 800ee38:	1882      	adds	r2, r0, r2
 800ee3a:	4293      	cmp	r3, r2
 800ee3c:	d100      	bne.n	800ee40 <memset+0xa>
 800ee3e:	4770      	bx	lr
 800ee40:	7019      	strb	r1, [r3, #0]
 800ee42:	3301      	adds	r3, #1
 800ee44:	e7f9      	b.n	800ee3a <memset+0x4>
	...

0800ee48 <siprintf>:
 800ee48:	b40e      	push	{r1, r2, r3}
 800ee4a:	b500      	push	{lr}
 800ee4c:	490b      	ldr	r1, [pc, #44]	; (800ee7c <siprintf+0x34>)
 800ee4e:	b09c      	sub	sp, #112	; 0x70
 800ee50:	ab1d      	add	r3, sp, #116	; 0x74
 800ee52:	9002      	str	r0, [sp, #8]
 800ee54:	9006      	str	r0, [sp, #24]
 800ee56:	9107      	str	r1, [sp, #28]
 800ee58:	9104      	str	r1, [sp, #16]
 800ee5a:	4809      	ldr	r0, [pc, #36]	; (800ee80 <siprintf+0x38>)
 800ee5c:	4909      	ldr	r1, [pc, #36]	; (800ee84 <siprintf+0x3c>)
 800ee5e:	cb04      	ldmia	r3!, {r2}
 800ee60:	9105      	str	r1, [sp, #20]
 800ee62:	6800      	ldr	r0, [r0, #0]
 800ee64:	a902      	add	r1, sp, #8
 800ee66:	9301      	str	r3, [sp, #4]
 800ee68:	f002 fa82 	bl	8011370 <_svfiprintf_r>
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	9a02      	ldr	r2, [sp, #8]
 800ee70:	7013      	strb	r3, [r2, #0]
 800ee72:	b01c      	add	sp, #112	; 0x70
 800ee74:	bc08      	pop	{r3}
 800ee76:	b003      	add	sp, #12
 800ee78:	4718      	bx	r3
 800ee7a:	46c0      	nop			; (mov r8, r8)
 800ee7c:	7fffffff 	.word	0x7fffffff
 800ee80:	200000e4 	.word	0x200000e4
 800ee84:	ffff0208 	.word	0xffff0208

0800ee88 <strcat>:
 800ee88:	0002      	movs	r2, r0
 800ee8a:	b510      	push	{r4, lr}
 800ee8c:	7813      	ldrb	r3, [r2, #0]
 800ee8e:	0014      	movs	r4, r2
 800ee90:	3201      	adds	r2, #1
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d1fa      	bne.n	800ee8c <strcat+0x4>
 800ee96:	5cca      	ldrb	r2, [r1, r3]
 800ee98:	54e2      	strb	r2, [r4, r3]
 800ee9a:	3301      	adds	r3, #1
 800ee9c:	2a00      	cmp	r2, #0
 800ee9e:	d1fa      	bne.n	800ee96 <strcat+0xe>
 800eea0:	bd10      	pop	{r4, pc}

0800eea2 <strchr>:
 800eea2:	b2c9      	uxtb	r1, r1
 800eea4:	7803      	ldrb	r3, [r0, #0]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d004      	beq.n	800eeb4 <strchr+0x12>
 800eeaa:	428b      	cmp	r3, r1
 800eeac:	d100      	bne.n	800eeb0 <strchr+0xe>
 800eeae:	4770      	bx	lr
 800eeb0:	3001      	adds	r0, #1
 800eeb2:	e7f7      	b.n	800eea4 <strchr+0x2>
 800eeb4:	424b      	negs	r3, r1
 800eeb6:	4159      	adcs	r1, r3
 800eeb8:	4249      	negs	r1, r1
 800eeba:	4008      	ands	r0, r1
 800eebc:	e7f7      	b.n	800eeae <strchr+0xc>

0800eebe <strncpy>:
 800eebe:	0003      	movs	r3, r0
 800eec0:	b530      	push	{r4, r5, lr}
 800eec2:	001d      	movs	r5, r3
 800eec4:	2a00      	cmp	r2, #0
 800eec6:	d006      	beq.n	800eed6 <strncpy+0x18>
 800eec8:	780c      	ldrb	r4, [r1, #0]
 800eeca:	3a01      	subs	r2, #1
 800eecc:	3301      	adds	r3, #1
 800eece:	702c      	strb	r4, [r5, #0]
 800eed0:	3101      	adds	r1, #1
 800eed2:	2c00      	cmp	r4, #0
 800eed4:	d1f5      	bne.n	800eec2 <strncpy+0x4>
 800eed6:	2100      	movs	r1, #0
 800eed8:	189a      	adds	r2, r3, r2
 800eeda:	4293      	cmp	r3, r2
 800eedc:	d100      	bne.n	800eee0 <strncpy+0x22>
 800eede:	bd30      	pop	{r4, r5, pc}
 800eee0:	7019      	strb	r1, [r3, #0]
 800eee2:	3301      	adds	r3, #1
 800eee4:	e7f9      	b.n	800eeda <strncpy+0x1c>

0800eee6 <strstr>:
 800eee6:	780a      	ldrb	r2, [r1, #0]
 800eee8:	b530      	push	{r4, r5, lr}
 800eeea:	2a00      	cmp	r2, #0
 800eeec:	d10c      	bne.n	800ef08 <strstr+0x22>
 800eeee:	bd30      	pop	{r4, r5, pc}
 800eef0:	429a      	cmp	r2, r3
 800eef2:	d108      	bne.n	800ef06 <strstr+0x20>
 800eef4:	2301      	movs	r3, #1
 800eef6:	5ccc      	ldrb	r4, [r1, r3]
 800eef8:	2c00      	cmp	r4, #0
 800eefa:	d0f8      	beq.n	800eeee <strstr+0x8>
 800eefc:	5cc5      	ldrb	r5, [r0, r3]
 800eefe:	42a5      	cmp	r5, r4
 800ef00:	d101      	bne.n	800ef06 <strstr+0x20>
 800ef02:	3301      	adds	r3, #1
 800ef04:	e7f7      	b.n	800eef6 <strstr+0x10>
 800ef06:	3001      	adds	r0, #1
 800ef08:	7803      	ldrb	r3, [r0, #0]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d1f0      	bne.n	800eef0 <strstr+0xa>
 800ef0e:	0018      	movs	r0, r3
 800ef10:	e7ed      	b.n	800eeee <strstr+0x8>
	...

0800ef14 <sulp>:
 800ef14:	b570      	push	{r4, r5, r6, lr}
 800ef16:	0016      	movs	r6, r2
 800ef18:	000d      	movs	r5, r1
 800ef1a:	f001 ff73 	bl	8010e04 <__ulp>
 800ef1e:	2e00      	cmp	r6, #0
 800ef20:	d00d      	beq.n	800ef3e <sulp+0x2a>
 800ef22:	236b      	movs	r3, #107	; 0x6b
 800ef24:	006a      	lsls	r2, r5, #1
 800ef26:	0d52      	lsrs	r2, r2, #21
 800ef28:	1a9b      	subs	r3, r3, r2
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	dd07      	ble.n	800ef3e <sulp+0x2a>
 800ef2e:	2400      	movs	r4, #0
 800ef30:	4a03      	ldr	r2, [pc, #12]	; (800ef40 <sulp+0x2c>)
 800ef32:	051b      	lsls	r3, r3, #20
 800ef34:	189d      	adds	r5, r3, r2
 800ef36:	002b      	movs	r3, r5
 800ef38:	0022      	movs	r2, r4
 800ef3a:	f7f2 fd75 	bl	8001a28 <__aeabi_dmul>
 800ef3e:	bd70      	pop	{r4, r5, r6, pc}
 800ef40:	3ff00000 	.word	0x3ff00000

0800ef44 <_strtod_l>:
 800ef44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef46:	001d      	movs	r5, r3
 800ef48:	2300      	movs	r3, #0
 800ef4a:	b0a5      	sub	sp, #148	; 0x94
 800ef4c:	9320      	str	r3, [sp, #128]	; 0x80
 800ef4e:	4bac      	ldr	r3, [pc, #688]	; (800f200 <_strtod_l+0x2bc>)
 800ef50:	9005      	str	r0, [sp, #20]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	9108      	str	r1, [sp, #32]
 800ef56:	0018      	movs	r0, r3
 800ef58:	9307      	str	r3, [sp, #28]
 800ef5a:	921b      	str	r2, [sp, #108]	; 0x6c
 800ef5c:	f7f1 f8da 	bl	8000114 <strlen>
 800ef60:	2600      	movs	r6, #0
 800ef62:	0004      	movs	r4, r0
 800ef64:	2700      	movs	r7, #0
 800ef66:	9b08      	ldr	r3, [sp, #32]
 800ef68:	931f      	str	r3, [sp, #124]	; 0x7c
 800ef6a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800ef6c:	7813      	ldrb	r3, [r2, #0]
 800ef6e:	2b2b      	cmp	r3, #43	; 0x2b
 800ef70:	d058      	beq.n	800f024 <_strtod_l+0xe0>
 800ef72:	d844      	bhi.n	800effe <_strtod_l+0xba>
 800ef74:	2b0d      	cmp	r3, #13
 800ef76:	d83d      	bhi.n	800eff4 <_strtod_l+0xb0>
 800ef78:	2b08      	cmp	r3, #8
 800ef7a:	d83d      	bhi.n	800eff8 <_strtod_l+0xb4>
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d047      	beq.n	800f010 <_strtod_l+0xcc>
 800ef80:	2300      	movs	r3, #0
 800ef82:	930e      	str	r3, [sp, #56]	; 0x38
 800ef84:	2200      	movs	r2, #0
 800ef86:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ef88:	920a      	str	r2, [sp, #40]	; 0x28
 800ef8a:	9306      	str	r3, [sp, #24]
 800ef8c:	781b      	ldrb	r3, [r3, #0]
 800ef8e:	2b30      	cmp	r3, #48	; 0x30
 800ef90:	d000      	beq.n	800ef94 <_strtod_l+0x50>
 800ef92:	e07f      	b.n	800f094 <_strtod_l+0x150>
 800ef94:	9b06      	ldr	r3, [sp, #24]
 800ef96:	3220      	adds	r2, #32
 800ef98:	785b      	ldrb	r3, [r3, #1]
 800ef9a:	4393      	bics	r3, r2
 800ef9c:	2b58      	cmp	r3, #88	; 0x58
 800ef9e:	d000      	beq.n	800efa2 <_strtod_l+0x5e>
 800efa0:	e06e      	b.n	800f080 <_strtod_l+0x13c>
 800efa2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800efa4:	9502      	str	r5, [sp, #8]
 800efa6:	9301      	str	r3, [sp, #4]
 800efa8:	ab20      	add	r3, sp, #128	; 0x80
 800efaa:	9300      	str	r3, [sp, #0]
 800efac:	4a95      	ldr	r2, [pc, #596]	; (800f204 <_strtod_l+0x2c0>)
 800efae:	ab21      	add	r3, sp, #132	; 0x84
 800efb0:	9805      	ldr	r0, [sp, #20]
 800efb2:	a91f      	add	r1, sp, #124	; 0x7c
 800efb4:	f001 f886 	bl	80100c4 <__gethex>
 800efb8:	2307      	movs	r3, #7
 800efba:	0005      	movs	r5, r0
 800efbc:	0004      	movs	r4, r0
 800efbe:	401d      	ands	r5, r3
 800efc0:	4218      	tst	r0, r3
 800efc2:	d006      	beq.n	800efd2 <_strtod_l+0x8e>
 800efc4:	2d06      	cmp	r5, #6
 800efc6:	d12f      	bne.n	800f028 <_strtod_l+0xe4>
 800efc8:	9b06      	ldr	r3, [sp, #24]
 800efca:	3301      	adds	r3, #1
 800efcc:	931f      	str	r3, [sp, #124]	; 0x7c
 800efce:	2300      	movs	r3, #0
 800efd0:	930e      	str	r3, [sp, #56]	; 0x38
 800efd2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d002      	beq.n	800efde <_strtod_l+0x9a>
 800efd8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800efda:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800efdc:	601a      	str	r2, [r3, #0]
 800efde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d01c      	beq.n	800f01e <_strtod_l+0xda>
 800efe4:	2380      	movs	r3, #128	; 0x80
 800efe6:	0032      	movs	r2, r6
 800efe8:	061b      	lsls	r3, r3, #24
 800efea:	18fb      	adds	r3, r7, r3
 800efec:	0010      	movs	r0, r2
 800efee:	0019      	movs	r1, r3
 800eff0:	b025      	add	sp, #148	; 0x94
 800eff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eff4:	2b20      	cmp	r3, #32
 800eff6:	d1c3      	bne.n	800ef80 <_strtod_l+0x3c>
 800eff8:	3201      	adds	r2, #1
 800effa:	921f      	str	r2, [sp, #124]	; 0x7c
 800effc:	e7b5      	b.n	800ef6a <_strtod_l+0x26>
 800effe:	2b2d      	cmp	r3, #45	; 0x2d
 800f000:	d1be      	bne.n	800ef80 <_strtod_l+0x3c>
 800f002:	3b2c      	subs	r3, #44	; 0x2c
 800f004:	930e      	str	r3, [sp, #56]	; 0x38
 800f006:	1c53      	adds	r3, r2, #1
 800f008:	931f      	str	r3, [sp, #124]	; 0x7c
 800f00a:	7853      	ldrb	r3, [r2, #1]
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d1b9      	bne.n	800ef84 <_strtod_l+0x40>
 800f010:	9b08      	ldr	r3, [sp, #32]
 800f012:	931f      	str	r3, [sp, #124]	; 0x7c
 800f014:	2300      	movs	r3, #0
 800f016:	930e      	str	r3, [sp, #56]	; 0x38
 800f018:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d1dc      	bne.n	800efd8 <_strtod_l+0x94>
 800f01e:	0032      	movs	r2, r6
 800f020:	003b      	movs	r3, r7
 800f022:	e7e3      	b.n	800efec <_strtod_l+0xa8>
 800f024:	2300      	movs	r3, #0
 800f026:	e7ed      	b.n	800f004 <_strtod_l+0xc0>
 800f028:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f02a:	2a00      	cmp	r2, #0
 800f02c:	d007      	beq.n	800f03e <_strtod_l+0xfa>
 800f02e:	2135      	movs	r1, #53	; 0x35
 800f030:	a822      	add	r0, sp, #136	; 0x88
 800f032:	f002 f803 	bl	801103c <__copybits>
 800f036:	9920      	ldr	r1, [sp, #128]	; 0x80
 800f038:	9805      	ldr	r0, [sp, #20]
 800f03a:	f001 fba3 	bl	8010784 <_Bfree>
 800f03e:	1e68      	subs	r0, r5, #1
 800f040:	2804      	cmp	r0, #4
 800f042:	d806      	bhi.n	800f052 <_strtod_l+0x10e>
 800f044:	f7f1 f86e 	bl	8000124 <__gnu_thumb1_case_uqi>
 800f048:	1816030b 	.word	0x1816030b
 800f04c:	0b          	.byte	0x0b
 800f04d:	00          	.byte	0x00
 800f04e:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800f050:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 800f052:	0723      	lsls	r3, r4, #28
 800f054:	d5bd      	bpl.n	800efd2 <_strtod_l+0x8e>
 800f056:	2380      	movs	r3, #128	; 0x80
 800f058:	061b      	lsls	r3, r3, #24
 800f05a:	431f      	orrs	r7, r3
 800f05c:	e7b9      	b.n	800efd2 <_strtod_l+0x8e>
 800f05e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f060:	4a69      	ldr	r2, [pc, #420]	; (800f208 <_strtod_l+0x2c4>)
 800f062:	496a      	ldr	r1, [pc, #424]	; (800f20c <_strtod_l+0x2c8>)
 800f064:	401a      	ands	r2, r3
 800f066:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f068:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800f06a:	185b      	adds	r3, r3, r1
 800f06c:	051b      	lsls	r3, r3, #20
 800f06e:	431a      	orrs	r2, r3
 800f070:	0017      	movs	r7, r2
 800f072:	e7ee      	b.n	800f052 <_strtod_l+0x10e>
 800f074:	4f66      	ldr	r7, [pc, #408]	; (800f210 <_strtod_l+0x2cc>)
 800f076:	e7ec      	b.n	800f052 <_strtod_l+0x10e>
 800f078:	2601      	movs	r6, #1
 800f07a:	4f66      	ldr	r7, [pc, #408]	; (800f214 <_strtod_l+0x2d0>)
 800f07c:	4276      	negs	r6, r6
 800f07e:	e7e8      	b.n	800f052 <_strtod_l+0x10e>
 800f080:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f082:	1c5a      	adds	r2, r3, #1
 800f084:	921f      	str	r2, [sp, #124]	; 0x7c
 800f086:	785b      	ldrb	r3, [r3, #1]
 800f088:	2b30      	cmp	r3, #48	; 0x30
 800f08a:	d0f9      	beq.n	800f080 <_strtod_l+0x13c>
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d0a0      	beq.n	800efd2 <_strtod_l+0x8e>
 800f090:	2301      	movs	r3, #1
 800f092:	930a      	str	r3, [sp, #40]	; 0x28
 800f094:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f096:	220a      	movs	r2, #10
 800f098:	9310      	str	r3, [sp, #64]	; 0x40
 800f09a:	2300      	movs	r3, #0
 800f09c:	930f      	str	r3, [sp, #60]	; 0x3c
 800f09e:	930b      	str	r3, [sp, #44]	; 0x2c
 800f0a0:	9309      	str	r3, [sp, #36]	; 0x24
 800f0a2:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800f0a4:	7805      	ldrb	r5, [r0, #0]
 800f0a6:	002b      	movs	r3, r5
 800f0a8:	3b30      	subs	r3, #48	; 0x30
 800f0aa:	b2d9      	uxtb	r1, r3
 800f0ac:	2909      	cmp	r1, #9
 800f0ae:	d927      	bls.n	800f100 <_strtod_l+0x1bc>
 800f0b0:	0022      	movs	r2, r4
 800f0b2:	9907      	ldr	r1, [sp, #28]
 800f0b4:	f002 fc02 	bl	80118bc <strncmp>
 800f0b8:	2800      	cmp	r0, #0
 800f0ba:	d033      	beq.n	800f124 <_strtod_l+0x1e0>
 800f0bc:	2000      	movs	r0, #0
 800f0be:	002b      	movs	r3, r5
 800f0c0:	4684      	mov	ip, r0
 800f0c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f0c4:	900c      	str	r0, [sp, #48]	; 0x30
 800f0c6:	9206      	str	r2, [sp, #24]
 800f0c8:	2220      	movs	r2, #32
 800f0ca:	0019      	movs	r1, r3
 800f0cc:	4391      	bics	r1, r2
 800f0ce:	000a      	movs	r2, r1
 800f0d0:	2100      	movs	r1, #0
 800f0d2:	9107      	str	r1, [sp, #28]
 800f0d4:	2a45      	cmp	r2, #69	; 0x45
 800f0d6:	d000      	beq.n	800f0da <_strtod_l+0x196>
 800f0d8:	e0c5      	b.n	800f266 <_strtod_l+0x322>
 800f0da:	9b06      	ldr	r3, [sp, #24]
 800f0dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f0de:	4303      	orrs	r3, r0
 800f0e0:	4313      	orrs	r3, r2
 800f0e2:	428b      	cmp	r3, r1
 800f0e4:	d094      	beq.n	800f010 <_strtod_l+0xcc>
 800f0e6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f0e8:	9308      	str	r3, [sp, #32]
 800f0ea:	3301      	adds	r3, #1
 800f0ec:	931f      	str	r3, [sp, #124]	; 0x7c
 800f0ee:	9b08      	ldr	r3, [sp, #32]
 800f0f0:	785b      	ldrb	r3, [r3, #1]
 800f0f2:	2b2b      	cmp	r3, #43	; 0x2b
 800f0f4:	d076      	beq.n	800f1e4 <_strtod_l+0x2a0>
 800f0f6:	000c      	movs	r4, r1
 800f0f8:	2b2d      	cmp	r3, #45	; 0x2d
 800f0fa:	d179      	bne.n	800f1f0 <_strtod_l+0x2ac>
 800f0fc:	2401      	movs	r4, #1
 800f0fe:	e072      	b.n	800f1e6 <_strtod_l+0x2a2>
 800f100:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f102:	2908      	cmp	r1, #8
 800f104:	dc09      	bgt.n	800f11a <_strtod_l+0x1d6>
 800f106:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f108:	4351      	muls	r1, r2
 800f10a:	185b      	adds	r3, r3, r1
 800f10c:	930b      	str	r3, [sp, #44]	; 0x2c
 800f10e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f110:	3001      	adds	r0, #1
 800f112:	3301      	adds	r3, #1
 800f114:	9309      	str	r3, [sp, #36]	; 0x24
 800f116:	901f      	str	r0, [sp, #124]	; 0x7c
 800f118:	e7c3      	b.n	800f0a2 <_strtod_l+0x15e>
 800f11a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f11c:	4351      	muls	r1, r2
 800f11e:	185b      	adds	r3, r3, r1
 800f120:	930f      	str	r3, [sp, #60]	; 0x3c
 800f122:	e7f4      	b.n	800f10e <_strtod_l+0x1ca>
 800f124:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f126:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f128:	191c      	adds	r4, r3, r4
 800f12a:	941f      	str	r4, [sp, #124]	; 0x7c
 800f12c:	7823      	ldrb	r3, [r4, #0]
 800f12e:	2a00      	cmp	r2, #0
 800f130:	d039      	beq.n	800f1a6 <_strtod_l+0x262>
 800f132:	900c      	str	r0, [sp, #48]	; 0x30
 800f134:	9206      	str	r2, [sp, #24]
 800f136:	001a      	movs	r2, r3
 800f138:	3a30      	subs	r2, #48	; 0x30
 800f13a:	2a09      	cmp	r2, #9
 800f13c:	d912      	bls.n	800f164 <_strtod_l+0x220>
 800f13e:	2201      	movs	r2, #1
 800f140:	4694      	mov	ip, r2
 800f142:	e7c1      	b.n	800f0c8 <_strtod_l+0x184>
 800f144:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f146:	3001      	adds	r0, #1
 800f148:	1c5a      	adds	r2, r3, #1
 800f14a:	921f      	str	r2, [sp, #124]	; 0x7c
 800f14c:	785b      	ldrb	r3, [r3, #1]
 800f14e:	2b30      	cmp	r3, #48	; 0x30
 800f150:	d0f8      	beq.n	800f144 <_strtod_l+0x200>
 800f152:	001a      	movs	r2, r3
 800f154:	3a31      	subs	r2, #49	; 0x31
 800f156:	2a08      	cmp	r2, #8
 800f158:	d83f      	bhi.n	800f1da <_strtod_l+0x296>
 800f15a:	900c      	str	r0, [sp, #48]	; 0x30
 800f15c:	2000      	movs	r0, #0
 800f15e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800f160:	9006      	str	r0, [sp, #24]
 800f162:	9210      	str	r2, [sp, #64]	; 0x40
 800f164:	001a      	movs	r2, r3
 800f166:	1c41      	adds	r1, r0, #1
 800f168:	3a30      	subs	r2, #48	; 0x30
 800f16a:	2b30      	cmp	r3, #48	; 0x30
 800f16c:	d015      	beq.n	800f19a <_strtod_l+0x256>
 800f16e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f170:	185b      	adds	r3, r3, r1
 800f172:	210a      	movs	r1, #10
 800f174:	930c      	str	r3, [sp, #48]	; 0x30
 800f176:	9b06      	ldr	r3, [sp, #24]
 800f178:	18c4      	adds	r4, r0, r3
 800f17a:	42a3      	cmp	r3, r4
 800f17c:	d115      	bne.n	800f1aa <_strtod_l+0x266>
 800f17e:	9906      	ldr	r1, [sp, #24]
 800f180:	9b06      	ldr	r3, [sp, #24]
 800f182:	3101      	adds	r1, #1
 800f184:	1809      	adds	r1, r1, r0
 800f186:	181b      	adds	r3, r3, r0
 800f188:	9106      	str	r1, [sp, #24]
 800f18a:	2b08      	cmp	r3, #8
 800f18c:	dc1b      	bgt.n	800f1c6 <_strtod_l+0x282>
 800f18e:	230a      	movs	r3, #10
 800f190:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f192:	434b      	muls	r3, r1
 800f194:	2100      	movs	r1, #0
 800f196:	18d3      	adds	r3, r2, r3
 800f198:	930b      	str	r3, [sp, #44]	; 0x2c
 800f19a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f19c:	0008      	movs	r0, r1
 800f19e:	1c5a      	adds	r2, r3, #1
 800f1a0:	921f      	str	r2, [sp, #124]	; 0x7c
 800f1a2:	785b      	ldrb	r3, [r3, #1]
 800f1a4:	e7c7      	b.n	800f136 <_strtod_l+0x1f2>
 800f1a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f1a8:	e7d1      	b.n	800f14e <_strtod_l+0x20a>
 800f1aa:	2b08      	cmp	r3, #8
 800f1ac:	dc04      	bgt.n	800f1b8 <_strtod_l+0x274>
 800f1ae:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800f1b0:	434d      	muls	r5, r1
 800f1b2:	950b      	str	r5, [sp, #44]	; 0x2c
 800f1b4:	3301      	adds	r3, #1
 800f1b6:	e7e0      	b.n	800f17a <_strtod_l+0x236>
 800f1b8:	1c5d      	adds	r5, r3, #1
 800f1ba:	2d10      	cmp	r5, #16
 800f1bc:	dcfa      	bgt.n	800f1b4 <_strtod_l+0x270>
 800f1be:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f1c0:	434d      	muls	r5, r1
 800f1c2:	950f      	str	r5, [sp, #60]	; 0x3c
 800f1c4:	e7f6      	b.n	800f1b4 <_strtod_l+0x270>
 800f1c6:	9b06      	ldr	r3, [sp, #24]
 800f1c8:	2100      	movs	r1, #0
 800f1ca:	2b10      	cmp	r3, #16
 800f1cc:	dce5      	bgt.n	800f19a <_strtod_l+0x256>
 800f1ce:	230a      	movs	r3, #10
 800f1d0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800f1d2:	4343      	muls	r3, r0
 800f1d4:	18d3      	adds	r3, r2, r3
 800f1d6:	930f      	str	r3, [sp, #60]	; 0x3c
 800f1d8:	e7df      	b.n	800f19a <_strtod_l+0x256>
 800f1da:	2200      	movs	r2, #0
 800f1dc:	920c      	str	r2, [sp, #48]	; 0x30
 800f1de:	9206      	str	r2, [sp, #24]
 800f1e0:	3201      	adds	r2, #1
 800f1e2:	e7ad      	b.n	800f140 <_strtod_l+0x1fc>
 800f1e4:	2400      	movs	r4, #0
 800f1e6:	9b08      	ldr	r3, [sp, #32]
 800f1e8:	3302      	adds	r3, #2
 800f1ea:	931f      	str	r3, [sp, #124]	; 0x7c
 800f1ec:	9b08      	ldr	r3, [sp, #32]
 800f1ee:	789b      	ldrb	r3, [r3, #2]
 800f1f0:	001a      	movs	r2, r3
 800f1f2:	3a30      	subs	r2, #48	; 0x30
 800f1f4:	2a09      	cmp	r2, #9
 800f1f6:	d913      	bls.n	800f220 <_strtod_l+0x2dc>
 800f1f8:	9a08      	ldr	r2, [sp, #32]
 800f1fa:	921f      	str	r2, [sp, #124]	; 0x7c
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	e031      	b.n	800f264 <_strtod_l+0x320>
 800f200:	08013a18 	.word	0x08013a18
 800f204:	0801384c 	.word	0x0801384c
 800f208:	ffefffff 	.word	0xffefffff
 800f20c:	00000433 	.word	0x00000433
 800f210:	7ff00000 	.word	0x7ff00000
 800f214:	7fffffff 	.word	0x7fffffff
 800f218:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f21a:	1c5a      	adds	r2, r3, #1
 800f21c:	921f      	str	r2, [sp, #124]	; 0x7c
 800f21e:	785b      	ldrb	r3, [r3, #1]
 800f220:	2b30      	cmp	r3, #48	; 0x30
 800f222:	d0f9      	beq.n	800f218 <_strtod_l+0x2d4>
 800f224:	2200      	movs	r2, #0
 800f226:	9207      	str	r2, [sp, #28]
 800f228:	001a      	movs	r2, r3
 800f22a:	3a31      	subs	r2, #49	; 0x31
 800f22c:	2a08      	cmp	r2, #8
 800f22e:	d81a      	bhi.n	800f266 <_strtod_l+0x322>
 800f230:	3b30      	subs	r3, #48	; 0x30
 800f232:	001a      	movs	r2, r3
 800f234:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f236:	9307      	str	r3, [sp, #28]
 800f238:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f23a:	1c59      	adds	r1, r3, #1
 800f23c:	911f      	str	r1, [sp, #124]	; 0x7c
 800f23e:	785b      	ldrb	r3, [r3, #1]
 800f240:	001d      	movs	r5, r3
 800f242:	3d30      	subs	r5, #48	; 0x30
 800f244:	2d09      	cmp	r5, #9
 800f246:	d939      	bls.n	800f2bc <_strtod_l+0x378>
 800f248:	9d07      	ldr	r5, [sp, #28]
 800f24a:	1b49      	subs	r1, r1, r5
 800f24c:	4db0      	ldr	r5, [pc, #704]	; (800f510 <_strtod_l+0x5cc>)
 800f24e:	9507      	str	r5, [sp, #28]
 800f250:	2908      	cmp	r1, #8
 800f252:	dc03      	bgt.n	800f25c <_strtod_l+0x318>
 800f254:	9207      	str	r2, [sp, #28]
 800f256:	42aa      	cmp	r2, r5
 800f258:	dd00      	ble.n	800f25c <_strtod_l+0x318>
 800f25a:	9507      	str	r5, [sp, #28]
 800f25c:	2c00      	cmp	r4, #0
 800f25e:	d002      	beq.n	800f266 <_strtod_l+0x322>
 800f260:	9a07      	ldr	r2, [sp, #28]
 800f262:	4252      	negs	r2, r2
 800f264:	9207      	str	r2, [sp, #28]
 800f266:	9a06      	ldr	r2, [sp, #24]
 800f268:	2a00      	cmp	r2, #0
 800f26a:	d14b      	bne.n	800f304 <_strtod_l+0x3c0>
 800f26c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f26e:	4310      	orrs	r0, r2
 800f270:	d000      	beq.n	800f274 <_strtod_l+0x330>
 800f272:	e6ae      	b.n	800efd2 <_strtod_l+0x8e>
 800f274:	4662      	mov	r2, ip
 800f276:	2a00      	cmp	r2, #0
 800f278:	d000      	beq.n	800f27c <_strtod_l+0x338>
 800f27a:	e6c9      	b.n	800f010 <_strtod_l+0xcc>
 800f27c:	2b69      	cmp	r3, #105	; 0x69
 800f27e:	d025      	beq.n	800f2cc <_strtod_l+0x388>
 800f280:	dc21      	bgt.n	800f2c6 <_strtod_l+0x382>
 800f282:	2b49      	cmp	r3, #73	; 0x49
 800f284:	d022      	beq.n	800f2cc <_strtod_l+0x388>
 800f286:	2b4e      	cmp	r3, #78	; 0x4e
 800f288:	d000      	beq.n	800f28c <_strtod_l+0x348>
 800f28a:	e6c1      	b.n	800f010 <_strtod_l+0xcc>
 800f28c:	49a1      	ldr	r1, [pc, #644]	; (800f514 <_strtod_l+0x5d0>)
 800f28e:	a81f      	add	r0, sp, #124	; 0x7c
 800f290:	f001 f966 	bl	8010560 <__match>
 800f294:	2800      	cmp	r0, #0
 800f296:	d100      	bne.n	800f29a <_strtod_l+0x356>
 800f298:	e6ba      	b.n	800f010 <_strtod_l+0xcc>
 800f29a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f29c:	781b      	ldrb	r3, [r3, #0]
 800f29e:	2b28      	cmp	r3, #40	; 0x28
 800f2a0:	d12a      	bne.n	800f2f8 <_strtod_l+0x3b4>
 800f2a2:	499d      	ldr	r1, [pc, #628]	; (800f518 <_strtod_l+0x5d4>)
 800f2a4:	aa22      	add	r2, sp, #136	; 0x88
 800f2a6:	a81f      	add	r0, sp, #124	; 0x7c
 800f2a8:	f001 f96e 	bl	8010588 <__hexnan>
 800f2ac:	2805      	cmp	r0, #5
 800f2ae:	d123      	bne.n	800f2f8 <_strtod_l+0x3b4>
 800f2b0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f2b2:	4a9a      	ldr	r2, [pc, #616]	; (800f51c <_strtod_l+0x5d8>)
 800f2b4:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800f2b6:	431a      	orrs	r2, r3
 800f2b8:	0017      	movs	r7, r2
 800f2ba:	e68a      	b.n	800efd2 <_strtod_l+0x8e>
 800f2bc:	210a      	movs	r1, #10
 800f2be:	434a      	muls	r2, r1
 800f2c0:	18d2      	adds	r2, r2, r3
 800f2c2:	3a30      	subs	r2, #48	; 0x30
 800f2c4:	e7b8      	b.n	800f238 <_strtod_l+0x2f4>
 800f2c6:	2b6e      	cmp	r3, #110	; 0x6e
 800f2c8:	d0e0      	beq.n	800f28c <_strtod_l+0x348>
 800f2ca:	e6a1      	b.n	800f010 <_strtod_l+0xcc>
 800f2cc:	4994      	ldr	r1, [pc, #592]	; (800f520 <_strtod_l+0x5dc>)
 800f2ce:	a81f      	add	r0, sp, #124	; 0x7c
 800f2d0:	f001 f946 	bl	8010560 <__match>
 800f2d4:	2800      	cmp	r0, #0
 800f2d6:	d100      	bne.n	800f2da <_strtod_l+0x396>
 800f2d8:	e69a      	b.n	800f010 <_strtod_l+0xcc>
 800f2da:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f2dc:	4991      	ldr	r1, [pc, #580]	; (800f524 <_strtod_l+0x5e0>)
 800f2de:	3b01      	subs	r3, #1
 800f2e0:	a81f      	add	r0, sp, #124	; 0x7c
 800f2e2:	931f      	str	r3, [sp, #124]	; 0x7c
 800f2e4:	f001 f93c 	bl	8010560 <__match>
 800f2e8:	2800      	cmp	r0, #0
 800f2ea:	d102      	bne.n	800f2f2 <_strtod_l+0x3ae>
 800f2ec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f2ee:	3301      	adds	r3, #1
 800f2f0:	931f      	str	r3, [sp, #124]	; 0x7c
 800f2f2:	2600      	movs	r6, #0
 800f2f4:	4f89      	ldr	r7, [pc, #548]	; (800f51c <_strtod_l+0x5d8>)
 800f2f6:	e66c      	b.n	800efd2 <_strtod_l+0x8e>
 800f2f8:	488b      	ldr	r0, [pc, #556]	; (800f528 <_strtod_l+0x5e4>)
 800f2fa:	f002 fabb 	bl	8011874 <nan>
 800f2fe:	0006      	movs	r6, r0
 800f300:	000f      	movs	r7, r1
 800f302:	e666      	b.n	800efd2 <_strtod_l+0x8e>
 800f304:	9b07      	ldr	r3, [sp, #28]
 800f306:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f308:	1a9b      	subs	r3, r3, r2
 800f30a:	930a      	str	r3, [sp, #40]	; 0x28
 800f30c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d101      	bne.n	800f316 <_strtod_l+0x3d2>
 800f312:	9b06      	ldr	r3, [sp, #24]
 800f314:	9309      	str	r3, [sp, #36]	; 0x24
 800f316:	9c06      	ldr	r4, [sp, #24]
 800f318:	2c10      	cmp	r4, #16
 800f31a:	dd00      	ble.n	800f31e <_strtod_l+0x3da>
 800f31c:	2410      	movs	r4, #16
 800f31e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f320:	f7f3 fa04 	bl	800272c <__aeabi_ui2d>
 800f324:	9b06      	ldr	r3, [sp, #24]
 800f326:	0006      	movs	r6, r0
 800f328:	000f      	movs	r7, r1
 800f32a:	2b09      	cmp	r3, #9
 800f32c:	dd15      	ble.n	800f35a <_strtod_l+0x416>
 800f32e:	0022      	movs	r2, r4
 800f330:	4b7e      	ldr	r3, [pc, #504]	; (800f52c <_strtod_l+0x5e8>)
 800f332:	3a09      	subs	r2, #9
 800f334:	00d2      	lsls	r2, r2, #3
 800f336:	189b      	adds	r3, r3, r2
 800f338:	681a      	ldr	r2, [r3, #0]
 800f33a:	685b      	ldr	r3, [r3, #4]
 800f33c:	f7f2 fb74 	bl	8001a28 <__aeabi_dmul>
 800f340:	0006      	movs	r6, r0
 800f342:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800f344:	000f      	movs	r7, r1
 800f346:	f7f3 f9f1 	bl	800272c <__aeabi_ui2d>
 800f34a:	0002      	movs	r2, r0
 800f34c:	000b      	movs	r3, r1
 800f34e:	0030      	movs	r0, r6
 800f350:	0039      	movs	r1, r7
 800f352:	f7f1 fc2b 	bl	8000bac <__aeabi_dadd>
 800f356:	0006      	movs	r6, r0
 800f358:	000f      	movs	r7, r1
 800f35a:	9b06      	ldr	r3, [sp, #24]
 800f35c:	2b0f      	cmp	r3, #15
 800f35e:	dc39      	bgt.n	800f3d4 <_strtod_l+0x490>
 800f360:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f362:	2b00      	cmp	r3, #0
 800f364:	d100      	bne.n	800f368 <_strtod_l+0x424>
 800f366:	e634      	b.n	800efd2 <_strtod_l+0x8e>
 800f368:	dd24      	ble.n	800f3b4 <_strtod_l+0x470>
 800f36a:	2b16      	cmp	r3, #22
 800f36c:	dc09      	bgt.n	800f382 <_strtod_l+0x43e>
 800f36e:	496f      	ldr	r1, [pc, #444]	; (800f52c <_strtod_l+0x5e8>)
 800f370:	00db      	lsls	r3, r3, #3
 800f372:	18c9      	adds	r1, r1, r3
 800f374:	0032      	movs	r2, r6
 800f376:	6808      	ldr	r0, [r1, #0]
 800f378:	6849      	ldr	r1, [r1, #4]
 800f37a:	003b      	movs	r3, r7
 800f37c:	f7f2 fb54 	bl	8001a28 <__aeabi_dmul>
 800f380:	e7bd      	b.n	800f2fe <_strtod_l+0x3ba>
 800f382:	2325      	movs	r3, #37	; 0x25
 800f384:	9a06      	ldr	r2, [sp, #24]
 800f386:	1a9b      	subs	r3, r3, r2
 800f388:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f38a:	4293      	cmp	r3, r2
 800f38c:	db22      	blt.n	800f3d4 <_strtod_l+0x490>
 800f38e:	240f      	movs	r4, #15
 800f390:	9b06      	ldr	r3, [sp, #24]
 800f392:	4d66      	ldr	r5, [pc, #408]	; (800f52c <_strtod_l+0x5e8>)
 800f394:	1ae4      	subs	r4, r4, r3
 800f396:	00e1      	lsls	r1, r4, #3
 800f398:	1869      	adds	r1, r5, r1
 800f39a:	0032      	movs	r2, r6
 800f39c:	6808      	ldr	r0, [r1, #0]
 800f39e:	6849      	ldr	r1, [r1, #4]
 800f3a0:	003b      	movs	r3, r7
 800f3a2:	f7f2 fb41 	bl	8001a28 <__aeabi_dmul>
 800f3a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f3a8:	1b1c      	subs	r4, r3, r4
 800f3aa:	00e4      	lsls	r4, r4, #3
 800f3ac:	192c      	adds	r4, r5, r4
 800f3ae:	6822      	ldr	r2, [r4, #0]
 800f3b0:	6863      	ldr	r3, [r4, #4]
 800f3b2:	e7e3      	b.n	800f37c <_strtod_l+0x438>
 800f3b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f3b6:	3316      	adds	r3, #22
 800f3b8:	db0c      	blt.n	800f3d4 <_strtod_l+0x490>
 800f3ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f3bc:	9a07      	ldr	r2, [sp, #28]
 800f3be:	0030      	movs	r0, r6
 800f3c0:	1a9a      	subs	r2, r3, r2
 800f3c2:	4b5a      	ldr	r3, [pc, #360]	; (800f52c <_strtod_l+0x5e8>)
 800f3c4:	00d2      	lsls	r2, r2, #3
 800f3c6:	189b      	adds	r3, r3, r2
 800f3c8:	0039      	movs	r1, r7
 800f3ca:	681a      	ldr	r2, [r3, #0]
 800f3cc:	685b      	ldr	r3, [r3, #4]
 800f3ce:	f7f1 ff29 	bl	8001224 <__aeabi_ddiv>
 800f3d2:	e794      	b.n	800f2fe <_strtod_l+0x3ba>
 800f3d4:	9b06      	ldr	r3, [sp, #24]
 800f3d6:	1b1c      	subs	r4, r3, r4
 800f3d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f3da:	18e4      	adds	r4, r4, r3
 800f3dc:	2c00      	cmp	r4, #0
 800f3de:	dd72      	ble.n	800f4c6 <_strtod_l+0x582>
 800f3e0:	230f      	movs	r3, #15
 800f3e2:	0021      	movs	r1, r4
 800f3e4:	4019      	ands	r1, r3
 800f3e6:	421c      	tst	r4, r3
 800f3e8:	d00a      	beq.n	800f400 <_strtod_l+0x4bc>
 800f3ea:	00cb      	lsls	r3, r1, #3
 800f3ec:	494f      	ldr	r1, [pc, #316]	; (800f52c <_strtod_l+0x5e8>)
 800f3ee:	0032      	movs	r2, r6
 800f3f0:	18c9      	adds	r1, r1, r3
 800f3f2:	6808      	ldr	r0, [r1, #0]
 800f3f4:	6849      	ldr	r1, [r1, #4]
 800f3f6:	003b      	movs	r3, r7
 800f3f8:	f7f2 fb16 	bl	8001a28 <__aeabi_dmul>
 800f3fc:	0006      	movs	r6, r0
 800f3fe:	000f      	movs	r7, r1
 800f400:	230f      	movs	r3, #15
 800f402:	439c      	bics	r4, r3
 800f404:	d04a      	beq.n	800f49c <_strtod_l+0x558>
 800f406:	3326      	adds	r3, #38	; 0x26
 800f408:	33ff      	adds	r3, #255	; 0xff
 800f40a:	429c      	cmp	r4, r3
 800f40c:	dd22      	ble.n	800f454 <_strtod_l+0x510>
 800f40e:	2300      	movs	r3, #0
 800f410:	9306      	str	r3, [sp, #24]
 800f412:	9307      	str	r3, [sp, #28]
 800f414:	930b      	str	r3, [sp, #44]	; 0x2c
 800f416:	9309      	str	r3, [sp, #36]	; 0x24
 800f418:	2322      	movs	r3, #34	; 0x22
 800f41a:	2600      	movs	r6, #0
 800f41c:	9a05      	ldr	r2, [sp, #20]
 800f41e:	4f3f      	ldr	r7, [pc, #252]	; (800f51c <_strtod_l+0x5d8>)
 800f420:	6013      	str	r3, [r2, #0]
 800f422:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f424:	42b3      	cmp	r3, r6
 800f426:	d100      	bne.n	800f42a <_strtod_l+0x4e6>
 800f428:	e5d3      	b.n	800efd2 <_strtod_l+0x8e>
 800f42a:	9920      	ldr	r1, [sp, #128]	; 0x80
 800f42c:	9805      	ldr	r0, [sp, #20]
 800f42e:	f001 f9a9 	bl	8010784 <_Bfree>
 800f432:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f434:	9805      	ldr	r0, [sp, #20]
 800f436:	f001 f9a5 	bl	8010784 <_Bfree>
 800f43a:	9907      	ldr	r1, [sp, #28]
 800f43c:	9805      	ldr	r0, [sp, #20]
 800f43e:	f001 f9a1 	bl	8010784 <_Bfree>
 800f442:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f444:	9805      	ldr	r0, [sp, #20]
 800f446:	f001 f99d 	bl	8010784 <_Bfree>
 800f44a:	9906      	ldr	r1, [sp, #24]
 800f44c:	9805      	ldr	r0, [sp, #20]
 800f44e:	f001 f999 	bl	8010784 <_Bfree>
 800f452:	e5be      	b.n	800efd2 <_strtod_l+0x8e>
 800f454:	2300      	movs	r3, #0
 800f456:	0030      	movs	r0, r6
 800f458:	0039      	movs	r1, r7
 800f45a:	4d35      	ldr	r5, [pc, #212]	; (800f530 <_strtod_l+0x5ec>)
 800f45c:	1124      	asrs	r4, r4, #4
 800f45e:	9308      	str	r3, [sp, #32]
 800f460:	2c01      	cmp	r4, #1
 800f462:	dc1e      	bgt.n	800f4a2 <_strtod_l+0x55e>
 800f464:	2b00      	cmp	r3, #0
 800f466:	d001      	beq.n	800f46c <_strtod_l+0x528>
 800f468:	0006      	movs	r6, r0
 800f46a:	000f      	movs	r7, r1
 800f46c:	4b31      	ldr	r3, [pc, #196]	; (800f534 <_strtod_l+0x5f0>)
 800f46e:	0032      	movs	r2, r6
 800f470:	18ff      	adds	r7, r7, r3
 800f472:	9b08      	ldr	r3, [sp, #32]
 800f474:	00dd      	lsls	r5, r3, #3
 800f476:	4b2e      	ldr	r3, [pc, #184]	; (800f530 <_strtod_l+0x5ec>)
 800f478:	195d      	adds	r5, r3, r5
 800f47a:	6828      	ldr	r0, [r5, #0]
 800f47c:	6869      	ldr	r1, [r5, #4]
 800f47e:	003b      	movs	r3, r7
 800f480:	f7f2 fad2 	bl	8001a28 <__aeabi_dmul>
 800f484:	4b25      	ldr	r3, [pc, #148]	; (800f51c <_strtod_l+0x5d8>)
 800f486:	4a2c      	ldr	r2, [pc, #176]	; (800f538 <_strtod_l+0x5f4>)
 800f488:	0006      	movs	r6, r0
 800f48a:	400b      	ands	r3, r1
 800f48c:	4293      	cmp	r3, r2
 800f48e:	d8be      	bhi.n	800f40e <_strtod_l+0x4ca>
 800f490:	4a2a      	ldr	r2, [pc, #168]	; (800f53c <_strtod_l+0x5f8>)
 800f492:	4293      	cmp	r3, r2
 800f494:	d913      	bls.n	800f4be <_strtod_l+0x57a>
 800f496:	2601      	movs	r6, #1
 800f498:	4f29      	ldr	r7, [pc, #164]	; (800f540 <_strtod_l+0x5fc>)
 800f49a:	4276      	negs	r6, r6
 800f49c:	2300      	movs	r3, #0
 800f49e:	9308      	str	r3, [sp, #32]
 800f4a0:	e087      	b.n	800f5b2 <_strtod_l+0x66e>
 800f4a2:	2201      	movs	r2, #1
 800f4a4:	4214      	tst	r4, r2
 800f4a6:	d004      	beq.n	800f4b2 <_strtod_l+0x56e>
 800f4a8:	682a      	ldr	r2, [r5, #0]
 800f4aa:	686b      	ldr	r3, [r5, #4]
 800f4ac:	f7f2 fabc 	bl	8001a28 <__aeabi_dmul>
 800f4b0:	2301      	movs	r3, #1
 800f4b2:	9a08      	ldr	r2, [sp, #32]
 800f4b4:	1064      	asrs	r4, r4, #1
 800f4b6:	3201      	adds	r2, #1
 800f4b8:	9208      	str	r2, [sp, #32]
 800f4ba:	3508      	adds	r5, #8
 800f4bc:	e7d0      	b.n	800f460 <_strtod_l+0x51c>
 800f4be:	23d4      	movs	r3, #212	; 0xd4
 800f4c0:	049b      	lsls	r3, r3, #18
 800f4c2:	18cf      	adds	r7, r1, r3
 800f4c4:	e7ea      	b.n	800f49c <_strtod_l+0x558>
 800f4c6:	2c00      	cmp	r4, #0
 800f4c8:	d0e8      	beq.n	800f49c <_strtod_l+0x558>
 800f4ca:	4264      	negs	r4, r4
 800f4cc:	220f      	movs	r2, #15
 800f4ce:	0023      	movs	r3, r4
 800f4d0:	4013      	ands	r3, r2
 800f4d2:	4214      	tst	r4, r2
 800f4d4:	d00a      	beq.n	800f4ec <_strtod_l+0x5a8>
 800f4d6:	00da      	lsls	r2, r3, #3
 800f4d8:	4b14      	ldr	r3, [pc, #80]	; (800f52c <_strtod_l+0x5e8>)
 800f4da:	0030      	movs	r0, r6
 800f4dc:	189b      	adds	r3, r3, r2
 800f4de:	0039      	movs	r1, r7
 800f4e0:	681a      	ldr	r2, [r3, #0]
 800f4e2:	685b      	ldr	r3, [r3, #4]
 800f4e4:	f7f1 fe9e 	bl	8001224 <__aeabi_ddiv>
 800f4e8:	0006      	movs	r6, r0
 800f4ea:	000f      	movs	r7, r1
 800f4ec:	1124      	asrs	r4, r4, #4
 800f4ee:	d0d5      	beq.n	800f49c <_strtod_l+0x558>
 800f4f0:	2c1f      	cmp	r4, #31
 800f4f2:	dd27      	ble.n	800f544 <_strtod_l+0x600>
 800f4f4:	2300      	movs	r3, #0
 800f4f6:	9306      	str	r3, [sp, #24]
 800f4f8:	9307      	str	r3, [sp, #28]
 800f4fa:	930b      	str	r3, [sp, #44]	; 0x2c
 800f4fc:	9309      	str	r3, [sp, #36]	; 0x24
 800f4fe:	2322      	movs	r3, #34	; 0x22
 800f500:	9a05      	ldr	r2, [sp, #20]
 800f502:	2600      	movs	r6, #0
 800f504:	6013      	str	r3, [r2, #0]
 800f506:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f508:	2700      	movs	r7, #0
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d18d      	bne.n	800f42a <_strtod_l+0x4e6>
 800f50e:	e560      	b.n	800efd2 <_strtod_l+0x8e>
 800f510:	00004e1f 	.word	0x00004e1f
 800f514:	08013847 	.word	0x08013847
 800f518:	08013860 	.word	0x08013860
 800f51c:	7ff00000 	.word	0x7ff00000
 800f520:	08013844 	.word	0x08013844
 800f524:	08013c0e 	.word	0x08013c0e
 800f528:	08013c0a 	.word	0x08013c0a
 800f52c:	08013ac8 	.word	0x08013ac8
 800f530:	08013aa0 	.word	0x08013aa0
 800f534:	fcb00000 	.word	0xfcb00000
 800f538:	7ca00000 	.word	0x7ca00000
 800f53c:	7c900000 	.word	0x7c900000
 800f540:	7fefffff 	.word	0x7fefffff
 800f544:	2310      	movs	r3, #16
 800f546:	0022      	movs	r2, r4
 800f548:	401a      	ands	r2, r3
 800f54a:	9208      	str	r2, [sp, #32]
 800f54c:	421c      	tst	r4, r3
 800f54e:	d001      	beq.n	800f554 <_strtod_l+0x610>
 800f550:	335a      	adds	r3, #90	; 0x5a
 800f552:	9308      	str	r3, [sp, #32]
 800f554:	0030      	movs	r0, r6
 800f556:	0039      	movs	r1, r7
 800f558:	2300      	movs	r3, #0
 800f55a:	4dc5      	ldr	r5, [pc, #788]	; (800f870 <_strtod_l+0x92c>)
 800f55c:	2201      	movs	r2, #1
 800f55e:	4214      	tst	r4, r2
 800f560:	d004      	beq.n	800f56c <_strtod_l+0x628>
 800f562:	682a      	ldr	r2, [r5, #0]
 800f564:	686b      	ldr	r3, [r5, #4]
 800f566:	f7f2 fa5f 	bl	8001a28 <__aeabi_dmul>
 800f56a:	2301      	movs	r3, #1
 800f56c:	1064      	asrs	r4, r4, #1
 800f56e:	3508      	adds	r5, #8
 800f570:	2c00      	cmp	r4, #0
 800f572:	d1f3      	bne.n	800f55c <_strtod_l+0x618>
 800f574:	2b00      	cmp	r3, #0
 800f576:	d001      	beq.n	800f57c <_strtod_l+0x638>
 800f578:	0006      	movs	r6, r0
 800f57a:	000f      	movs	r7, r1
 800f57c:	9b08      	ldr	r3, [sp, #32]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d00f      	beq.n	800f5a2 <_strtod_l+0x65e>
 800f582:	236b      	movs	r3, #107	; 0x6b
 800f584:	007a      	lsls	r2, r7, #1
 800f586:	0d52      	lsrs	r2, r2, #21
 800f588:	0039      	movs	r1, r7
 800f58a:	1a9b      	subs	r3, r3, r2
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	dd08      	ble.n	800f5a2 <_strtod_l+0x65e>
 800f590:	2b1f      	cmp	r3, #31
 800f592:	dc00      	bgt.n	800f596 <_strtod_l+0x652>
 800f594:	e124      	b.n	800f7e0 <_strtod_l+0x89c>
 800f596:	2600      	movs	r6, #0
 800f598:	2b34      	cmp	r3, #52	; 0x34
 800f59a:	dc00      	bgt.n	800f59e <_strtod_l+0x65a>
 800f59c:	e119      	b.n	800f7d2 <_strtod_l+0x88e>
 800f59e:	27dc      	movs	r7, #220	; 0xdc
 800f5a0:	04bf      	lsls	r7, r7, #18
 800f5a2:	2200      	movs	r2, #0
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	0030      	movs	r0, r6
 800f5a8:	0039      	movs	r1, r7
 800f5aa:	f7f0 ff55 	bl	8000458 <__aeabi_dcmpeq>
 800f5ae:	2800      	cmp	r0, #0
 800f5b0:	d1a0      	bne.n	800f4f4 <_strtod_l+0x5b0>
 800f5b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f5b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f5b6:	9300      	str	r3, [sp, #0]
 800f5b8:	9910      	ldr	r1, [sp, #64]	; 0x40
 800f5ba:	9b06      	ldr	r3, [sp, #24]
 800f5bc:	9805      	ldr	r0, [sp, #20]
 800f5be:	f001 f949 	bl	8010854 <__s2b>
 800f5c2:	900b      	str	r0, [sp, #44]	; 0x2c
 800f5c4:	2800      	cmp	r0, #0
 800f5c6:	d100      	bne.n	800f5ca <_strtod_l+0x686>
 800f5c8:	e721      	b.n	800f40e <_strtod_l+0x4ca>
 800f5ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f5cc:	9907      	ldr	r1, [sp, #28]
 800f5ce:	17da      	asrs	r2, r3, #31
 800f5d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f5d2:	1a5b      	subs	r3, r3, r1
 800f5d4:	401a      	ands	r2, r3
 800f5d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f5d8:	9215      	str	r2, [sp, #84]	; 0x54
 800f5da:	43db      	mvns	r3, r3
 800f5dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f5de:	17db      	asrs	r3, r3, #31
 800f5e0:	401a      	ands	r2, r3
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	921a      	str	r2, [sp, #104]	; 0x68
 800f5e6:	9306      	str	r3, [sp, #24]
 800f5e8:	9307      	str	r3, [sp, #28]
 800f5ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f5ec:	9805      	ldr	r0, [sp, #20]
 800f5ee:	6859      	ldr	r1, [r3, #4]
 800f5f0:	f001 f884 	bl	80106fc <_Balloc>
 800f5f4:	9009      	str	r0, [sp, #36]	; 0x24
 800f5f6:	2800      	cmp	r0, #0
 800f5f8:	d100      	bne.n	800f5fc <_strtod_l+0x6b8>
 800f5fa:	e70d      	b.n	800f418 <_strtod_l+0x4d4>
 800f5fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f5fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f600:	691b      	ldr	r3, [r3, #16]
 800f602:	310c      	adds	r1, #12
 800f604:	1c9a      	adds	r2, r3, #2
 800f606:	0092      	lsls	r2, r2, #2
 800f608:	300c      	adds	r0, #12
 800f60a:	930c      	str	r3, [sp, #48]	; 0x30
 800f60c:	f7ff fc0a 	bl	800ee24 <memcpy>
 800f610:	ab22      	add	r3, sp, #136	; 0x88
 800f612:	9301      	str	r3, [sp, #4]
 800f614:	ab21      	add	r3, sp, #132	; 0x84
 800f616:	9300      	str	r3, [sp, #0]
 800f618:	0032      	movs	r2, r6
 800f61a:	003b      	movs	r3, r7
 800f61c:	9805      	ldr	r0, [sp, #20]
 800f61e:	9612      	str	r6, [sp, #72]	; 0x48
 800f620:	9713      	str	r7, [sp, #76]	; 0x4c
 800f622:	f001 fc63 	bl	8010eec <__d2b>
 800f626:	9020      	str	r0, [sp, #128]	; 0x80
 800f628:	2800      	cmp	r0, #0
 800f62a:	d100      	bne.n	800f62e <_strtod_l+0x6ea>
 800f62c:	e6f4      	b.n	800f418 <_strtod_l+0x4d4>
 800f62e:	2101      	movs	r1, #1
 800f630:	9805      	ldr	r0, [sp, #20]
 800f632:	f001 f9a3 	bl	801097c <__i2b>
 800f636:	9007      	str	r0, [sp, #28]
 800f638:	2800      	cmp	r0, #0
 800f63a:	d100      	bne.n	800f63e <_strtod_l+0x6fa>
 800f63c:	e6ec      	b.n	800f418 <_strtod_l+0x4d4>
 800f63e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f640:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f642:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800f644:	1ad4      	subs	r4, r2, r3
 800f646:	2b00      	cmp	r3, #0
 800f648:	db01      	blt.n	800f64e <_strtod_l+0x70a>
 800f64a:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800f64c:	195d      	adds	r5, r3, r5
 800f64e:	9908      	ldr	r1, [sp, #32]
 800f650:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800f652:	1a5b      	subs	r3, r3, r1
 800f654:	2136      	movs	r1, #54	; 0x36
 800f656:	189b      	adds	r3, r3, r2
 800f658:	1a8a      	subs	r2, r1, r2
 800f65a:	4986      	ldr	r1, [pc, #536]	; (800f874 <_strtod_l+0x930>)
 800f65c:	2001      	movs	r0, #1
 800f65e:	468c      	mov	ip, r1
 800f660:	2100      	movs	r1, #0
 800f662:	3b01      	subs	r3, #1
 800f664:	9110      	str	r1, [sp, #64]	; 0x40
 800f666:	9014      	str	r0, [sp, #80]	; 0x50
 800f668:	4563      	cmp	r3, ip
 800f66a:	da07      	bge.n	800f67c <_strtod_l+0x738>
 800f66c:	4661      	mov	r1, ip
 800f66e:	1ac9      	subs	r1, r1, r3
 800f670:	1a52      	subs	r2, r2, r1
 800f672:	291f      	cmp	r1, #31
 800f674:	dd00      	ble.n	800f678 <_strtod_l+0x734>
 800f676:	e0b8      	b.n	800f7ea <_strtod_l+0x8a6>
 800f678:	4088      	lsls	r0, r1
 800f67a:	9014      	str	r0, [sp, #80]	; 0x50
 800f67c:	18ab      	adds	r3, r5, r2
 800f67e:	930c      	str	r3, [sp, #48]	; 0x30
 800f680:	18a4      	adds	r4, r4, r2
 800f682:	9b08      	ldr	r3, [sp, #32]
 800f684:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f686:	191c      	adds	r4, r3, r4
 800f688:	002b      	movs	r3, r5
 800f68a:	4295      	cmp	r5, r2
 800f68c:	dd00      	ble.n	800f690 <_strtod_l+0x74c>
 800f68e:	0013      	movs	r3, r2
 800f690:	42a3      	cmp	r3, r4
 800f692:	dd00      	ble.n	800f696 <_strtod_l+0x752>
 800f694:	0023      	movs	r3, r4
 800f696:	2b00      	cmp	r3, #0
 800f698:	dd04      	ble.n	800f6a4 <_strtod_l+0x760>
 800f69a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f69c:	1ae4      	subs	r4, r4, r3
 800f69e:	1ad2      	subs	r2, r2, r3
 800f6a0:	920c      	str	r2, [sp, #48]	; 0x30
 800f6a2:	1aed      	subs	r5, r5, r3
 800f6a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	dd17      	ble.n	800f6da <_strtod_l+0x796>
 800f6aa:	001a      	movs	r2, r3
 800f6ac:	9907      	ldr	r1, [sp, #28]
 800f6ae:	9805      	ldr	r0, [sp, #20]
 800f6b0:	f001 fa2a 	bl	8010b08 <__pow5mult>
 800f6b4:	9007      	str	r0, [sp, #28]
 800f6b6:	2800      	cmp	r0, #0
 800f6b8:	d100      	bne.n	800f6bc <_strtod_l+0x778>
 800f6ba:	e6ad      	b.n	800f418 <_strtod_l+0x4d4>
 800f6bc:	0001      	movs	r1, r0
 800f6be:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f6c0:	9805      	ldr	r0, [sp, #20]
 800f6c2:	f001 f971 	bl	80109a8 <__multiply>
 800f6c6:	900f      	str	r0, [sp, #60]	; 0x3c
 800f6c8:	2800      	cmp	r0, #0
 800f6ca:	d100      	bne.n	800f6ce <_strtod_l+0x78a>
 800f6cc:	e6a4      	b.n	800f418 <_strtod_l+0x4d4>
 800f6ce:	9920      	ldr	r1, [sp, #128]	; 0x80
 800f6d0:	9805      	ldr	r0, [sp, #20]
 800f6d2:	f001 f857 	bl	8010784 <_Bfree>
 800f6d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f6d8:	9320      	str	r3, [sp, #128]	; 0x80
 800f6da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	dd00      	ble.n	800f6e2 <_strtod_l+0x79e>
 800f6e0:	e089      	b.n	800f7f6 <_strtod_l+0x8b2>
 800f6e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	dd08      	ble.n	800f6fa <_strtod_l+0x7b6>
 800f6e8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f6ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f6ec:	9805      	ldr	r0, [sp, #20]
 800f6ee:	f001 fa0b 	bl	8010b08 <__pow5mult>
 800f6f2:	9009      	str	r0, [sp, #36]	; 0x24
 800f6f4:	2800      	cmp	r0, #0
 800f6f6:	d100      	bne.n	800f6fa <_strtod_l+0x7b6>
 800f6f8:	e68e      	b.n	800f418 <_strtod_l+0x4d4>
 800f6fa:	2c00      	cmp	r4, #0
 800f6fc:	dd08      	ble.n	800f710 <_strtod_l+0x7cc>
 800f6fe:	0022      	movs	r2, r4
 800f700:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f702:	9805      	ldr	r0, [sp, #20]
 800f704:	f001 fa5c 	bl	8010bc0 <__lshift>
 800f708:	9009      	str	r0, [sp, #36]	; 0x24
 800f70a:	2800      	cmp	r0, #0
 800f70c:	d100      	bne.n	800f710 <_strtod_l+0x7cc>
 800f70e:	e683      	b.n	800f418 <_strtod_l+0x4d4>
 800f710:	2d00      	cmp	r5, #0
 800f712:	dd08      	ble.n	800f726 <_strtod_l+0x7e2>
 800f714:	002a      	movs	r2, r5
 800f716:	9907      	ldr	r1, [sp, #28]
 800f718:	9805      	ldr	r0, [sp, #20]
 800f71a:	f001 fa51 	bl	8010bc0 <__lshift>
 800f71e:	9007      	str	r0, [sp, #28]
 800f720:	2800      	cmp	r0, #0
 800f722:	d100      	bne.n	800f726 <_strtod_l+0x7e2>
 800f724:	e678      	b.n	800f418 <_strtod_l+0x4d4>
 800f726:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f728:	9920      	ldr	r1, [sp, #128]	; 0x80
 800f72a:	9805      	ldr	r0, [sp, #20]
 800f72c:	f001 fad2 	bl	8010cd4 <__mdiff>
 800f730:	9006      	str	r0, [sp, #24]
 800f732:	2800      	cmp	r0, #0
 800f734:	d100      	bne.n	800f738 <_strtod_l+0x7f4>
 800f736:	e66f      	b.n	800f418 <_strtod_l+0x4d4>
 800f738:	2200      	movs	r2, #0
 800f73a:	68c3      	ldr	r3, [r0, #12]
 800f73c:	9907      	ldr	r1, [sp, #28]
 800f73e:	60c2      	str	r2, [r0, #12]
 800f740:	930f      	str	r3, [sp, #60]	; 0x3c
 800f742:	f001 faab 	bl	8010c9c <__mcmp>
 800f746:	2800      	cmp	r0, #0
 800f748:	da5f      	bge.n	800f80a <_strtod_l+0x8c6>
 800f74a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f74c:	4333      	orrs	r3, r6
 800f74e:	d000      	beq.n	800f752 <_strtod_l+0x80e>
 800f750:	e08a      	b.n	800f868 <_strtod_l+0x924>
 800f752:	033b      	lsls	r3, r7, #12
 800f754:	d000      	beq.n	800f758 <_strtod_l+0x814>
 800f756:	e087      	b.n	800f868 <_strtod_l+0x924>
 800f758:	22d6      	movs	r2, #214	; 0xd6
 800f75a:	4b47      	ldr	r3, [pc, #284]	; (800f878 <_strtod_l+0x934>)
 800f75c:	04d2      	lsls	r2, r2, #19
 800f75e:	403b      	ands	r3, r7
 800f760:	4293      	cmp	r3, r2
 800f762:	d800      	bhi.n	800f766 <_strtod_l+0x822>
 800f764:	e080      	b.n	800f868 <_strtod_l+0x924>
 800f766:	9b06      	ldr	r3, [sp, #24]
 800f768:	695b      	ldr	r3, [r3, #20]
 800f76a:	930a      	str	r3, [sp, #40]	; 0x28
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d104      	bne.n	800f77a <_strtod_l+0x836>
 800f770:	9b06      	ldr	r3, [sp, #24]
 800f772:	691b      	ldr	r3, [r3, #16]
 800f774:	930a      	str	r3, [sp, #40]	; 0x28
 800f776:	2b01      	cmp	r3, #1
 800f778:	dd76      	ble.n	800f868 <_strtod_l+0x924>
 800f77a:	9906      	ldr	r1, [sp, #24]
 800f77c:	2201      	movs	r2, #1
 800f77e:	9805      	ldr	r0, [sp, #20]
 800f780:	f001 fa1e 	bl	8010bc0 <__lshift>
 800f784:	9907      	ldr	r1, [sp, #28]
 800f786:	9006      	str	r0, [sp, #24]
 800f788:	f001 fa88 	bl	8010c9c <__mcmp>
 800f78c:	2800      	cmp	r0, #0
 800f78e:	dd6b      	ble.n	800f868 <_strtod_l+0x924>
 800f790:	9908      	ldr	r1, [sp, #32]
 800f792:	003b      	movs	r3, r7
 800f794:	4a38      	ldr	r2, [pc, #224]	; (800f878 <_strtod_l+0x934>)
 800f796:	2900      	cmp	r1, #0
 800f798:	d100      	bne.n	800f79c <_strtod_l+0x858>
 800f79a:	e092      	b.n	800f8c2 <_strtod_l+0x97e>
 800f79c:	0011      	movs	r1, r2
 800f79e:	20d6      	movs	r0, #214	; 0xd6
 800f7a0:	4039      	ands	r1, r7
 800f7a2:	04c0      	lsls	r0, r0, #19
 800f7a4:	4281      	cmp	r1, r0
 800f7a6:	dd00      	ble.n	800f7aa <_strtod_l+0x866>
 800f7a8:	e08b      	b.n	800f8c2 <_strtod_l+0x97e>
 800f7aa:	23dc      	movs	r3, #220	; 0xdc
 800f7ac:	049b      	lsls	r3, r3, #18
 800f7ae:	4299      	cmp	r1, r3
 800f7b0:	dc00      	bgt.n	800f7b4 <_strtod_l+0x870>
 800f7b2:	e6a4      	b.n	800f4fe <_strtod_l+0x5ba>
 800f7b4:	0030      	movs	r0, r6
 800f7b6:	0039      	movs	r1, r7
 800f7b8:	2200      	movs	r2, #0
 800f7ba:	4b30      	ldr	r3, [pc, #192]	; (800f87c <_strtod_l+0x938>)
 800f7bc:	f7f2 f934 	bl	8001a28 <__aeabi_dmul>
 800f7c0:	0006      	movs	r6, r0
 800f7c2:	000f      	movs	r7, r1
 800f7c4:	4308      	orrs	r0, r1
 800f7c6:	d000      	beq.n	800f7ca <_strtod_l+0x886>
 800f7c8:	e62f      	b.n	800f42a <_strtod_l+0x4e6>
 800f7ca:	2322      	movs	r3, #34	; 0x22
 800f7cc:	9a05      	ldr	r2, [sp, #20]
 800f7ce:	6013      	str	r3, [r2, #0]
 800f7d0:	e62b      	b.n	800f42a <_strtod_l+0x4e6>
 800f7d2:	234b      	movs	r3, #75	; 0x4b
 800f7d4:	1a9a      	subs	r2, r3, r2
 800f7d6:	3b4c      	subs	r3, #76	; 0x4c
 800f7d8:	4093      	lsls	r3, r2
 800f7da:	4019      	ands	r1, r3
 800f7dc:	000f      	movs	r7, r1
 800f7de:	e6e0      	b.n	800f5a2 <_strtod_l+0x65e>
 800f7e0:	2201      	movs	r2, #1
 800f7e2:	4252      	negs	r2, r2
 800f7e4:	409a      	lsls	r2, r3
 800f7e6:	4016      	ands	r6, r2
 800f7e8:	e6db      	b.n	800f5a2 <_strtod_l+0x65e>
 800f7ea:	4925      	ldr	r1, [pc, #148]	; (800f880 <_strtod_l+0x93c>)
 800f7ec:	1acb      	subs	r3, r1, r3
 800f7ee:	0001      	movs	r1, r0
 800f7f0:	4099      	lsls	r1, r3
 800f7f2:	9110      	str	r1, [sp, #64]	; 0x40
 800f7f4:	e741      	b.n	800f67a <_strtod_l+0x736>
 800f7f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f7f8:	9920      	ldr	r1, [sp, #128]	; 0x80
 800f7fa:	9805      	ldr	r0, [sp, #20]
 800f7fc:	f001 f9e0 	bl	8010bc0 <__lshift>
 800f800:	9020      	str	r0, [sp, #128]	; 0x80
 800f802:	2800      	cmp	r0, #0
 800f804:	d000      	beq.n	800f808 <_strtod_l+0x8c4>
 800f806:	e76c      	b.n	800f6e2 <_strtod_l+0x79e>
 800f808:	e606      	b.n	800f418 <_strtod_l+0x4d4>
 800f80a:	970c      	str	r7, [sp, #48]	; 0x30
 800f80c:	2800      	cmp	r0, #0
 800f80e:	d176      	bne.n	800f8fe <_strtod_l+0x9ba>
 800f810:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f812:	033b      	lsls	r3, r7, #12
 800f814:	0b1b      	lsrs	r3, r3, #12
 800f816:	2a00      	cmp	r2, #0
 800f818:	d038      	beq.n	800f88c <_strtod_l+0x948>
 800f81a:	4a1a      	ldr	r2, [pc, #104]	; (800f884 <_strtod_l+0x940>)
 800f81c:	4293      	cmp	r3, r2
 800f81e:	d138      	bne.n	800f892 <_strtod_l+0x94e>
 800f820:	2201      	movs	r2, #1
 800f822:	9b08      	ldr	r3, [sp, #32]
 800f824:	4252      	negs	r2, r2
 800f826:	0031      	movs	r1, r6
 800f828:	0010      	movs	r0, r2
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d00b      	beq.n	800f846 <_strtod_l+0x902>
 800f82e:	24d4      	movs	r4, #212	; 0xd4
 800f830:	4b11      	ldr	r3, [pc, #68]	; (800f878 <_strtod_l+0x934>)
 800f832:	0010      	movs	r0, r2
 800f834:	403b      	ands	r3, r7
 800f836:	04e4      	lsls	r4, r4, #19
 800f838:	42a3      	cmp	r3, r4
 800f83a:	d804      	bhi.n	800f846 <_strtod_l+0x902>
 800f83c:	306c      	adds	r0, #108	; 0x6c
 800f83e:	0d1b      	lsrs	r3, r3, #20
 800f840:	1ac3      	subs	r3, r0, r3
 800f842:	409a      	lsls	r2, r3
 800f844:	0010      	movs	r0, r2
 800f846:	4281      	cmp	r1, r0
 800f848:	d123      	bne.n	800f892 <_strtod_l+0x94e>
 800f84a:	4b0f      	ldr	r3, [pc, #60]	; (800f888 <_strtod_l+0x944>)
 800f84c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f84e:	429a      	cmp	r2, r3
 800f850:	d102      	bne.n	800f858 <_strtod_l+0x914>
 800f852:	1c4b      	adds	r3, r1, #1
 800f854:	d100      	bne.n	800f858 <_strtod_l+0x914>
 800f856:	e5df      	b.n	800f418 <_strtod_l+0x4d4>
 800f858:	4b07      	ldr	r3, [pc, #28]	; (800f878 <_strtod_l+0x934>)
 800f85a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f85c:	2600      	movs	r6, #0
 800f85e:	401a      	ands	r2, r3
 800f860:	0013      	movs	r3, r2
 800f862:	2280      	movs	r2, #128	; 0x80
 800f864:	0352      	lsls	r2, r2, #13
 800f866:	189f      	adds	r7, r3, r2
 800f868:	9b08      	ldr	r3, [sp, #32]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d1a2      	bne.n	800f7b4 <_strtod_l+0x870>
 800f86e:	e5dc      	b.n	800f42a <_strtod_l+0x4e6>
 800f870:	08013878 	.word	0x08013878
 800f874:	fffffc02 	.word	0xfffffc02
 800f878:	7ff00000 	.word	0x7ff00000
 800f87c:	39500000 	.word	0x39500000
 800f880:	fffffbe2 	.word	0xfffffbe2
 800f884:	000fffff 	.word	0x000fffff
 800f888:	7fefffff 	.word	0x7fefffff
 800f88c:	4333      	orrs	r3, r6
 800f88e:	d100      	bne.n	800f892 <_strtod_l+0x94e>
 800f890:	e77e      	b.n	800f790 <_strtod_l+0x84c>
 800f892:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f894:	2b00      	cmp	r3, #0
 800f896:	d01d      	beq.n	800f8d4 <_strtod_l+0x990>
 800f898:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f89a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f89c:	4213      	tst	r3, r2
 800f89e:	d0e3      	beq.n	800f868 <_strtod_l+0x924>
 800f8a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f8a2:	0030      	movs	r0, r6
 800f8a4:	0039      	movs	r1, r7
 800f8a6:	9a08      	ldr	r2, [sp, #32]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d017      	beq.n	800f8dc <_strtod_l+0x998>
 800f8ac:	f7ff fb32 	bl	800ef14 <sulp>
 800f8b0:	0002      	movs	r2, r0
 800f8b2:	000b      	movs	r3, r1
 800f8b4:	9812      	ldr	r0, [sp, #72]	; 0x48
 800f8b6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800f8b8:	f7f1 f978 	bl	8000bac <__aeabi_dadd>
 800f8bc:	0006      	movs	r6, r0
 800f8be:	000f      	movs	r7, r1
 800f8c0:	e7d2      	b.n	800f868 <_strtod_l+0x924>
 800f8c2:	2601      	movs	r6, #1
 800f8c4:	4013      	ands	r3, r2
 800f8c6:	4a99      	ldr	r2, [pc, #612]	; (800fb2c <_strtod_l+0xbe8>)
 800f8c8:	4276      	negs	r6, r6
 800f8ca:	189b      	adds	r3, r3, r2
 800f8cc:	4a98      	ldr	r2, [pc, #608]	; (800fb30 <_strtod_l+0xbec>)
 800f8ce:	431a      	orrs	r2, r3
 800f8d0:	0017      	movs	r7, r2
 800f8d2:	e7c9      	b.n	800f868 <_strtod_l+0x924>
 800f8d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f8d6:	4233      	tst	r3, r6
 800f8d8:	d0c6      	beq.n	800f868 <_strtod_l+0x924>
 800f8da:	e7e1      	b.n	800f8a0 <_strtod_l+0x95c>
 800f8dc:	f7ff fb1a 	bl	800ef14 <sulp>
 800f8e0:	0002      	movs	r2, r0
 800f8e2:	000b      	movs	r3, r1
 800f8e4:	9812      	ldr	r0, [sp, #72]	; 0x48
 800f8e6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800f8e8:	f7f2 fb0a 	bl	8001f00 <__aeabi_dsub>
 800f8ec:	2200      	movs	r2, #0
 800f8ee:	2300      	movs	r3, #0
 800f8f0:	0006      	movs	r6, r0
 800f8f2:	000f      	movs	r7, r1
 800f8f4:	f7f0 fdb0 	bl	8000458 <__aeabi_dcmpeq>
 800f8f8:	2800      	cmp	r0, #0
 800f8fa:	d0b5      	beq.n	800f868 <_strtod_l+0x924>
 800f8fc:	e5ff      	b.n	800f4fe <_strtod_l+0x5ba>
 800f8fe:	9907      	ldr	r1, [sp, #28]
 800f900:	9806      	ldr	r0, [sp, #24]
 800f902:	f001 fb57 	bl	8010fb4 <__ratio>
 800f906:	2380      	movs	r3, #128	; 0x80
 800f908:	2200      	movs	r2, #0
 800f90a:	05db      	lsls	r3, r3, #23
 800f90c:	0004      	movs	r4, r0
 800f90e:	000d      	movs	r5, r1
 800f910:	f7f0 fdb2 	bl	8000478 <__aeabi_dcmple>
 800f914:	2800      	cmp	r0, #0
 800f916:	d075      	beq.n	800fa04 <_strtod_l+0xac0>
 800f918:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d047      	beq.n	800f9ae <_strtod_l+0xa6a>
 800f91e:	2300      	movs	r3, #0
 800f920:	4c84      	ldr	r4, [pc, #528]	; (800fb34 <_strtod_l+0xbf0>)
 800f922:	2500      	movs	r5, #0
 800f924:	9310      	str	r3, [sp, #64]	; 0x40
 800f926:	9411      	str	r4, [sp, #68]	; 0x44
 800f928:	4c82      	ldr	r4, [pc, #520]	; (800fb34 <_strtod_l+0xbf0>)
 800f92a:	4a83      	ldr	r2, [pc, #524]	; (800fb38 <_strtod_l+0xbf4>)
 800f92c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f92e:	4013      	ands	r3, r2
 800f930:	9314      	str	r3, [sp, #80]	; 0x50
 800f932:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f934:	4b81      	ldr	r3, [pc, #516]	; (800fb3c <_strtod_l+0xbf8>)
 800f936:	429a      	cmp	r2, r3
 800f938:	d000      	beq.n	800f93c <_strtod_l+0x9f8>
 800f93a:	e0ac      	b.n	800fa96 <_strtod_l+0xb52>
 800f93c:	4a80      	ldr	r2, [pc, #512]	; (800fb40 <_strtod_l+0xbfc>)
 800f93e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f940:	4694      	mov	ip, r2
 800f942:	4463      	add	r3, ip
 800f944:	001f      	movs	r7, r3
 800f946:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f948:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f94a:	0030      	movs	r0, r6
 800f94c:	0039      	movs	r1, r7
 800f94e:	920c      	str	r2, [sp, #48]	; 0x30
 800f950:	930d      	str	r3, [sp, #52]	; 0x34
 800f952:	f001 fa57 	bl	8010e04 <__ulp>
 800f956:	0002      	movs	r2, r0
 800f958:	000b      	movs	r3, r1
 800f95a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f95c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800f95e:	f7f2 f863 	bl	8001a28 <__aeabi_dmul>
 800f962:	0032      	movs	r2, r6
 800f964:	003b      	movs	r3, r7
 800f966:	f7f1 f921 	bl	8000bac <__aeabi_dadd>
 800f96a:	4a73      	ldr	r2, [pc, #460]	; (800fb38 <_strtod_l+0xbf4>)
 800f96c:	4b75      	ldr	r3, [pc, #468]	; (800fb44 <_strtod_l+0xc00>)
 800f96e:	0006      	movs	r6, r0
 800f970:	400a      	ands	r2, r1
 800f972:	429a      	cmp	r2, r3
 800f974:	d95e      	bls.n	800fa34 <_strtod_l+0xaf0>
 800f976:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f978:	4b73      	ldr	r3, [pc, #460]	; (800fb48 <_strtod_l+0xc04>)
 800f97a:	429a      	cmp	r2, r3
 800f97c:	d103      	bne.n	800f986 <_strtod_l+0xa42>
 800f97e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f980:	3301      	adds	r3, #1
 800f982:	d100      	bne.n	800f986 <_strtod_l+0xa42>
 800f984:	e548      	b.n	800f418 <_strtod_l+0x4d4>
 800f986:	2601      	movs	r6, #1
 800f988:	4f6f      	ldr	r7, [pc, #444]	; (800fb48 <_strtod_l+0xc04>)
 800f98a:	4276      	negs	r6, r6
 800f98c:	9920      	ldr	r1, [sp, #128]	; 0x80
 800f98e:	9805      	ldr	r0, [sp, #20]
 800f990:	f000 fef8 	bl	8010784 <_Bfree>
 800f994:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f996:	9805      	ldr	r0, [sp, #20]
 800f998:	f000 fef4 	bl	8010784 <_Bfree>
 800f99c:	9907      	ldr	r1, [sp, #28]
 800f99e:	9805      	ldr	r0, [sp, #20]
 800f9a0:	f000 fef0 	bl	8010784 <_Bfree>
 800f9a4:	9906      	ldr	r1, [sp, #24]
 800f9a6:	9805      	ldr	r0, [sp, #20]
 800f9a8:	f000 feec 	bl	8010784 <_Bfree>
 800f9ac:	e61d      	b.n	800f5ea <_strtod_l+0x6a6>
 800f9ae:	2e00      	cmp	r6, #0
 800f9b0:	d11c      	bne.n	800f9ec <_strtod_l+0xaa8>
 800f9b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f9b4:	031b      	lsls	r3, r3, #12
 800f9b6:	d11f      	bne.n	800f9f8 <_strtod_l+0xab4>
 800f9b8:	2200      	movs	r2, #0
 800f9ba:	0020      	movs	r0, r4
 800f9bc:	0029      	movs	r1, r5
 800f9be:	4b5d      	ldr	r3, [pc, #372]	; (800fb34 <_strtod_l+0xbf0>)
 800f9c0:	f7f0 fd50 	bl	8000464 <__aeabi_dcmplt>
 800f9c4:	2800      	cmp	r0, #0
 800f9c6:	d11a      	bne.n	800f9fe <_strtod_l+0xaba>
 800f9c8:	0020      	movs	r0, r4
 800f9ca:	0029      	movs	r1, r5
 800f9cc:	2200      	movs	r2, #0
 800f9ce:	4b5f      	ldr	r3, [pc, #380]	; (800fb4c <_strtod_l+0xc08>)
 800f9d0:	f7f2 f82a 	bl	8001a28 <__aeabi_dmul>
 800f9d4:	0005      	movs	r5, r0
 800f9d6:	000c      	movs	r4, r1
 800f9d8:	2380      	movs	r3, #128	; 0x80
 800f9da:	061b      	lsls	r3, r3, #24
 800f9dc:	18e3      	adds	r3, r4, r3
 800f9de:	951c      	str	r5, [sp, #112]	; 0x70
 800f9e0:	931d      	str	r3, [sp, #116]	; 0x74
 800f9e2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800f9e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f9e6:	9210      	str	r2, [sp, #64]	; 0x40
 800f9e8:	9311      	str	r3, [sp, #68]	; 0x44
 800f9ea:	e79e      	b.n	800f92a <_strtod_l+0x9e6>
 800f9ec:	2e01      	cmp	r6, #1
 800f9ee:	d103      	bne.n	800f9f8 <_strtod_l+0xab4>
 800f9f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d100      	bne.n	800f9f8 <_strtod_l+0xab4>
 800f9f6:	e582      	b.n	800f4fe <_strtod_l+0x5ba>
 800f9f8:	2300      	movs	r3, #0
 800f9fa:	4c55      	ldr	r4, [pc, #340]	; (800fb50 <_strtod_l+0xc0c>)
 800f9fc:	e791      	b.n	800f922 <_strtod_l+0x9de>
 800f9fe:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800fa00:	4c52      	ldr	r4, [pc, #328]	; (800fb4c <_strtod_l+0xc08>)
 800fa02:	e7e9      	b.n	800f9d8 <_strtod_l+0xa94>
 800fa04:	2200      	movs	r2, #0
 800fa06:	0020      	movs	r0, r4
 800fa08:	0029      	movs	r1, r5
 800fa0a:	4b50      	ldr	r3, [pc, #320]	; (800fb4c <_strtod_l+0xc08>)
 800fa0c:	f7f2 f80c 	bl	8001a28 <__aeabi_dmul>
 800fa10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fa12:	0005      	movs	r5, r0
 800fa14:	000b      	movs	r3, r1
 800fa16:	000c      	movs	r4, r1
 800fa18:	2a00      	cmp	r2, #0
 800fa1a:	d107      	bne.n	800fa2c <_strtod_l+0xae8>
 800fa1c:	2280      	movs	r2, #128	; 0x80
 800fa1e:	0612      	lsls	r2, r2, #24
 800fa20:	188b      	adds	r3, r1, r2
 800fa22:	9016      	str	r0, [sp, #88]	; 0x58
 800fa24:	9317      	str	r3, [sp, #92]	; 0x5c
 800fa26:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800fa28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fa2a:	e7dc      	b.n	800f9e6 <_strtod_l+0xaa2>
 800fa2c:	0002      	movs	r2, r0
 800fa2e:	9216      	str	r2, [sp, #88]	; 0x58
 800fa30:	9317      	str	r3, [sp, #92]	; 0x5c
 800fa32:	e7f8      	b.n	800fa26 <_strtod_l+0xae2>
 800fa34:	23d4      	movs	r3, #212	; 0xd4
 800fa36:	049b      	lsls	r3, r3, #18
 800fa38:	18cf      	adds	r7, r1, r3
 800fa3a:	9b08      	ldr	r3, [sp, #32]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d1a5      	bne.n	800f98c <_strtod_l+0xa48>
 800fa40:	4b3d      	ldr	r3, [pc, #244]	; (800fb38 <_strtod_l+0xbf4>)
 800fa42:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fa44:	403b      	ands	r3, r7
 800fa46:	429a      	cmp	r2, r3
 800fa48:	d1a0      	bne.n	800f98c <_strtod_l+0xa48>
 800fa4a:	0028      	movs	r0, r5
 800fa4c:	0021      	movs	r1, r4
 800fa4e:	f7f0 fd89 	bl	8000564 <__aeabi_d2lz>
 800fa52:	f7f0 fdc3 	bl	80005dc <__aeabi_l2d>
 800fa56:	0002      	movs	r2, r0
 800fa58:	000b      	movs	r3, r1
 800fa5a:	0028      	movs	r0, r5
 800fa5c:	0021      	movs	r1, r4
 800fa5e:	f7f2 fa4f 	bl	8001f00 <__aeabi_dsub>
 800fa62:	033b      	lsls	r3, r7, #12
 800fa64:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fa66:	0b1b      	lsrs	r3, r3, #12
 800fa68:	4333      	orrs	r3, r6
 800fa6a:	4313      	orrs	r3, r2
 800fa6c:	0004      	movs	r4, r0
 800fa6e:	000d      	movs	r5, r1
 800fa70:	4a38      	ldr	r2, [pc, #224]	; (800fb54 <_strtod_l+0xc10>)
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d055      	beq.n	800fb22 <_strtod_l+0xbde>
 800fa76:	4b38      	ldr	r3, [pc, #224]	; (800fb58 <_strtod_l+0xc14>)
 800fa78:	f7f0 fcf4 	bl	8000464 <__aeabi_dcmplt>
 800fa7c:	2800      	cmp	r0, #0
 800fa7e:	d000      	beq.n	800fa82 <_strtod_l+0xb3e>
 800fa80:	e4d3      	b.n	800f42a <_strtod_l+0x4e6>
 800fa82:	0020      	movs	r0, r4
 800fa84:	0029      	movs	r1, r5
 800fa86:	4a35      	ldr	r2, [pc, #212]	; (800fb5c <_strtod_l+0xc18>)
 800fa88:	4b30      	ldr	r3, [pc, #192]	; (800fb4c <_strtod_l+0xc08>)
 800fa8a:	f7f0 fcff 	bl	800048c <__aeabi_dcmpgt>
 800fa8e:	2800      	cmp	r0, #0
 800fa90:	d100      	bne.n	800fa94 <_strtod_l+0xb50>
 800fa92:	e77b      	b.n	800f98c <_strtod_l+0xa48>
 800fa94:	e4c9      	b.n	800f42a <_strtod_l+0x4e6>
 800fa96:	9b08      	ldr	r3, [sp, #32]
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d02b      	beq.n	800faf4 <_strtod_l+0xbb0>
 800fa9c:	23d4      	movs	r3, #212	; 0xd4
 800fa9e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800faa0:	04db      	lsls	r3, r3, #19
 800faa2:	429a      	cmp	r2, r3
 800faa4:	d826      	bhi.n	800faf4 <_strtod_l+0xbb0>
 800faa6:	0028      	movs	r0, r5
 800faa8:	0021      	movs	r1, r4
 800faaa:	4a2d      	ldr	r2, [pc, #180]	; (800fb60 <_strtod_l+0xc1c>)
 800faac:	4b2d      	ldr	r3, [pc, #180]	; (800fb64 <_strtod_l+0xc20>)
 800faae:	f7f0 fce3 	bl	8000478 <__aeabi_dcmple>
 800fab2:	2800      	cmp	r0, #0
 800fab4:	d017      	beq.n	800fae6 <_strtod_l+0xba2>
 800fab6:	0028      	movs	r0, r5
 800fab8:	0021      	movs	r1, r4
 800faba:	f7f0 fd35 	bl	8000528 <__aeabi_d2uiz>
 800fabe:	2800      	cmp	r0, #0
 800fac0:	d100      	bne.n	800fac4 <_strtod_l+0xb80>
 800fac2:	3001      	adds	r0, #1
 800fac4:	f7f2 fe32 	bl	800272c <__aeabi_ui2d>
 800fac8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800faca:	0005      	movs	r5, r0
 800facc:	000b      	movs	r3, r1
 800face:	000c      	movs	r4, r1
 800fad0:	2a00      	cmp	r2, #0
 800fad2:	d122      	bne.n	800fb1a <_strtod_l+0xbd6>
 800fad4:	2280      	movs	r2, #128	; 0x80
 800fad6:	0612      	lsls	r2, r2, #24
 800fad8:	188b      	adds	r3, r1, r2
 800fada:	9018      	str	r0, [sp, #96]	; 0x60
 800fadc:	9319      	str	r3, [sp, #100]	; 0x64
 800fade:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800fae0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fae2:	9210      	str	r2, [sp, #64]	; 0x40
 800fae4:	9311      	str	r3, [sp, #68]	; 0x44
 800fae6:	22d6      	movs	r2, #214	; 0xd6
 800fae8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800faea:	04d2      	lsls	r2, r2, #19
 800faec:	189b      	adds	r3, r3, r2
 800faee:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800faf0:	1a9b      	subs	r3, r3, r2
 800faf2:	9311      	str	r3, [sp, #68]	; 0x44
 800faf4:	9812      	ldr	r0, [sp, #72]	; 0x48
 800faf6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800faf8:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800fafa:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800fafc:	f001 f982 	bl	8010e04 <__ulp>
 800fb00:	0002      	movs	r2, r0
 800fb02:	000b      	movs	r3, r1
 800fb04:	0030      	movs	r0, r6
 800fb06:	0039      	movs	r1, r7
 800fb08:	f7f1 ff8e 	bl	8001a28 <__aeabi_dmul>
 800fb0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fb0e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fb10:	f7f1 f84c 	bl	8000bac <__aeabi_dadd>
 800fb14:	0006      	movs	r6, r0
 800fb16:	000f      	movs	r7, r1
 800fb18:	e78f      	b.n	800fa3a <_strtod_l+0xaf6>
 800fb1a:	0002      	movs	r2, r0
 800fb1c:	9218      	str	r2, [sp, #96]	; 0x60
 800fb1e:	9319      	str	r3, [sp, #100]	; 0x64
 800fb20:	e7dd      	b.n	800fade <_strtod_l+0xb9a>
 800fb22:	4b11      	ldr	r3, [pc, #68]	; (800fb68 <_strtod_l+0xc24>)
 800fb24:	f7f0 fc9e 	bl	8000464 <__aeabi_dcmplt>
 800fb28:	e7b1      	b.n	800fa8e <_strtod_l+0xb4a>
 800fb2a:	46c0      	nop			; (mov r8, r8)
 800fb2c:	fff00000 	.word	0xfff00000
 800fb30:	000fffff 	.word	0x000fffff
 800fb34:	3ff00000 	.word	0x3ff00000
 800fb38:	7ff00000 	.word	0x7ff00000
 800fb3c:	7fe00000 	.word	0x7fe00000
 800fb40:	fcb00000 	.word	0xfcb00000
 800fb44:	7c9fffff 	.word	0x7c9fffff
 800fb48:	7fefffff 	.word	0x7fefffff
 800fb4c:	3fe00000 	.word	0x3fe00000
 800fb50:	bff00000 	.word	0xbff00000
 800fb54:	94a03595 	.word	0x94a03595
 800fb58:	3fdfffff 	.word	0x3fdfffff
 800fb5c:	35afe535 	.word	0x35afe535
 800fb60:	ffc00000 	.word	0xffc00000
 800fb64:	41dfffff 	.word	0x41dfffff
 800fb68:	3fcfffff 	.word	0x3fcfffff

0800fb6c <strtof>:
 800fb6c:	000a      	movs	r2, r1
 800fb6e:	0001      	movs	r1, r0
 800fb70:	4824      	ldr	r0, [pc, #144]	; (800fc04 <strtof+0x98>)
 800fb72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb74:	6800      	ldr	r0, [r0, #0]
 800fb76:	4b24      	ldr	r3, [pc, #144]	; (800fc08 <strtof+0x9c>)
 800fb78:	f7ff f9e4 	bl	800ef44 <_strtod_l>
 800fb7c:	0006      	movs	r6, r0
 800fb7e:	000c      	movs	r4, r1
 800fb80:	0002      	movs	r2, r0
 800fb82:	000b      	movs	r3, r1
 800fb84:	0030      	movs	r0, r6
 800fb86:	0021      	movs	r1, r4
 800fb88:	f7f2 fd4c 	bl	8002624 <__aeabi_dcmpun>
 800fb8c:	2800      	cmp	r0, #0
 800fb8e:	d00d      	beq.n	800fbac <strtof+0x40>
 800fb90:	481e      	ldr	r0, [pc, #120]	; (800fc0c <strtof+0xa0>)
 800fb92:	2c00      	cmp	r4, #0
 800fb94:	da06      	bge.n	800fba4 <strtof+0x38>
 800fb96:	f001 fe85 	bl	80118a4 <nanf>
 800fb9a:	2380      	movs	r3, #128	; 0x80
 800fb9c:	061b      	lsls	r3, r3, #24
 800fb9e:	18c5      	adds	r5, r0, r3
 800fba0:	1c28      	adds	r0, r5, #0
 800fba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fba4:	f001 fe7e 	bl	80118a4 <nanf>
 800fba8:	1c05      	adds	r5, r0, #0
 800fbaa:	e7f9      	b.n	800fba0 <strtof+0x34>
 800fbac:	0021      	movs	r1, r4
 800fbae:	0030      	movs	r0, r6
 800fbb0:	f7f2 fe2a 	bl	8002808 <__aeabi_d2f>
 800fbb4:	0047      	lsls	r7, r0, #1
 800fbb6:	087f      	lsrs	r7, r7, #1
 800fbb8:	1c05      	adds	r5, r0, #0
 800fbba:	4915      	ldr	r1, [pc, #84]	; (800fc10 <strtof+0xa4>)
 800fbbc:	1c38      	adds	r0, r7, #0
 800fbbe:	f7f0 ff71 	bl	8000aa4 <__aeabi_fcmpun>
 800fbc2:	2800      	cmp	r0, #0
 800fbc4:	d1ec      	bne.n	800fba0 <strtof+0x34>
 800fbc6:	4912      	ldr	r1, [pc, #72]	; (800fc10 <strtof+0xa4>)
 800fbc8:	1c38      	adds	r0, r7, #0
 800fbca:	f7f0 fc8f 	bl	80004ec <__aeabi_fcmple>
 800fbce:	2800      	cmp	r0, #0
 800fbd0:	d1e6      	bne.n	800fba0 <strtof+0x34>
 800fbd2:	2201      	movs	r2, #1
 800fbd4:	0064      	lsls	r4, r4, #1
 800fbd6:	0864      	lsrs	r4, r4, #1
 800fbd8:	0030      	movs	r0, r6
 800fbda:	0021      	movs	r1, r4
 800fbdc:	4b0d      	ldr	r3, [pc, #52]	; (800fc14 <strtof+0xa8>)
 800fbde:	4252      	negs	r2, r2
 800fbe0:	f7f2 fd20 	bl	8002624 <__aeabi_dcmpun>
 800fbe4:	2800      	cmp	r0, #0
 800fbe6:	d108      	bne.n	800fbfa <strtof+0x8e>
 800fbe8:	2201      	movs	r2, #1
 800fbea:	0030      	movs	r0, r6
 800fbec:	0021      	movs	r1, r4
 800fbee:	4b09      	ldr	r3, [pc, #36]	; (800fc14 <strtof+0xa8>)
 800fbf0:	4252      	negs	r2, r2
 800fbf2:	f7f0 fc41 	bl	8000478 <__aeabi_dcmple>
 800fbf6:	2800      	cmp	r0, #0
 800fbf8:	d0d2      	beq.n	800fba0 <strtof+0x34>
 800fbfa:	2222      	movs	r2, #34	; 0x22
 800fbfc:	4b01      	ldr	r3, [pc, #4]	; (800fc04 <strtof+0x98>)
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	601a      	str	r2, [r3, #0]
 800fc02:	e7cd      	b.n	800fba0 <strtof+0x34>
 800fc04:	200000e4 	.word	0x200000e4
 800fc08:	2000014c 	.word	0x2000014c
 800fc0c:	08013c0a 	.word	0x08013c0a
 800fc10:	7f7fffff 	.word	0x7f7fffff
 800fc14:	7fefffff 	.word	0x7fefffff

0800fc18 <_strtol_l.constprop.0>:
 800fc18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc1a:	b087      	sub	sp, #28
 800fc1c:	001e      	movs	r6, r3
 800fc1e:	9005      	str	r0, [sp, #20]
 800fc20:	9101      	str	r1, [sp, #4]
 800fc22:	9202      	str	r2, [sp, #8]
 800fc24:	2b01      	cmp	r3, #1
 800fc26:	d045      	beq.n	800fcb4 <_strtol_l.constprop.0+0x9c>
 800fc28:	000b      	movs	r3, r1
 800fc2a:	2e24      	cmp	r6, #36	; 0x24
 800fc2c:	d842      	bhi.n	800fcb4 <_strtol_l.constprop.0+0x9c>
 800fc2e:	4a3f      	ldr	r2, [pc, #252]	; (800fd2c <_strtol_l.constprop.0+0x114>)
 800fc30:	2108      	movs	r1, #8
 800fc32:	4694      	mov	ip, r2
 800fc34:	001a      	movs	r2, r3
 800fc36:	4660      	mov	r0, ip
 800fc38:	7814      	ldrb	r4, [r2, #0]
 800fc3a:	3301      	adds	r3, #1
 800fc3c:	5d00      	ldrb	r0, [r0, r4]
 800fc3e:	001d      	movs	r5, r3
 800fc40:	0007      	movs	r7, r0
 800fc42:	400f      	ands	r7, r1
 800fc44:	4208      	tst	r0, r1
 800fc46:	d1f5      	bne.n	800fc34 <_strtol_l.constprop.0+0x1c>
 800fc48:	2c2d      	cmp	r4, #45	; 0x2d
 800fc4a:	d13a      	bne.n	800fcc2 <_strtol_l.constprop.0+0xaa>
 800fc4c:	2701      	movs	r7, #1
 800fc4e:	781c      	ldrb	r4, [r3, #0]
 800fc50:	1c95      	adds	r5, r2, #2
 800fc52:	2e00      	cmp	r6, #0
 800fc54:	d065      	beq.n	800fd22 <_strtol_l.constprop.0+0x10a>
 800fc56:	2e10      	cmp	r6, #16
 800fc58:	d109      	bne.n	800fc6e <_strtol_l.constprop.0+0x56>
 800fc5a:	2c30      	cmp	r4, #48	; 0x30
 800fc5c:	d107      	bne.n	800fc6e <_strtol_l.constprop.0+0x56>
 800fc5e:	2220      	movs	r2, #32
 800fc60:	782b      	ldrb	r3, [r5, #0]
 800fc62:	4393      	bics	r3, r2
 800fc64:	2b58      	cmp	r3, #88	; 0x58
 800fc66:	d157      	bne.n	800fd18 <_strtol_l.constprop.0+0x100>
 800fc68:	2610      	movs	r6, #16
 800fc6a:	786c      	ldrb	r4, [r5, #1]
 800fc6c:	3502      	adds	r5, #2
 800fc6e:	4b30      	ldr	r3, [pc, #192]	; (800fd30 <_strtol_l.constprop.0+0x118>)
 800fc70:	0031      	movs	r1, r6
 800fc72:	18fb      	adds	r3, r7, r3
 800fc74:	0018      	movs	r0, r3
 800fc76:	9303      	str	r3, [sp, #12]
 800fc78:	f7f0 faee 	bl	8000258 <__aeabi_uidivmod>
 800fc7c:	2300      	movs	r3, #0
 800fc7e:	2201      	movs	r2, #1
 800fc80:	4684      	mov	ip, r0
 800fc82:	0018      	movs	r0, r3
 800fc84:	9104      	str	r1, [sp, #16]
 800fc86:	4252      	negs	r2, r2
 800fc88:	0021      	movs	r1, r4
 800fc8a:	3930      	subs	r1, #48	; 0x30
 800fc8c:	2909      	cmp	r1, #9
 800fc8e:	d81d      	bhi.n	800fccc <_strtol_l.constprop.0+0xb4>
 800fc90:	000c      	movs	r4, r1
 800fc92:	42a6      	cmp	r6, r4
 800fc94:	dd28      	ble.n	800fce8 <_strtol_l.constprop.0+0xd0>
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	db24      	blt.n	800fce4 <_strtol_l.constprop.0+0xcc>
 800fc9a:	0013      	movs	r3, r2
 800fc9c:	4584      	cmp	ip, r0
 800fc9e:	d306      	bcc.n	800fcae <_strtol_l.constprop.0+0x96>
 800fca0:	d102      	bne.n	800fca8 <_strtol_l.constprop.0+0x90>
 800fca2:	9904      	ldr	r1, [sp, #16]
 800fca4:	42a1      	cmp	r1, r4
 800fca6:	db02      	blt.n	800fcae <_strtol_l.constprop.0+0x96>
 800fca8:	2301      	movs	r3, #1
 800fcaa:	4370      	muls	r0, r6
 800fcac:	1820      	adds	r0, r4, r0
 800fcae:	782c      	ldrb	r4, [r5, #0]
 800fcb0:	3501      	adds	r5, #1
 800fcb2:	e7e9      	b.n	800fc88 <_strtol_l.constprop.0+0x70>
 800fcb4:	f7ff f88c 	bl	800edd0 <__errno>
 800fcb8:	2316      	movs	r3, #22
 800fcba:	6003      	str	r3, [r0, #0]
 800fcbc:	2000      	movs	r0, #0
 800fcbe:	b007      	add	sp, #28
 800fcc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fcc2:	2c2b      	cmp	r4, #43	; 0x2b
 800fcc4:	d1c5      	bne.n	800fc52 <_strtol_l.constprop.0+0x3a>
 800fcc6:	781c      	ldrb	r4, [r3, #0]
 800fcc8:	1c95      	adds	r5, r2, #2
 800fcca:	e7c2      	b.n	800fc52 <_strtol_l.constprop.0+0x3a>
 800fccc:	0021      	movs	r1, r4
 800fcce:	3941      	subs	r1, #65	; 0x41
 800fcd0:	2919      	cmp	r1, #25
 800fcd2:	d801      	bhi.n	800fcd8 <_strtol_l.constprop.0+0xc0>
 800fcd4:	3c37      	subs	r4, #55	; 0x37
 800fcd6:	e7dc      	b.n	800fc92 <_strtol_l.constprop.0+0x7a>
 800fcd8:	0021      	movs	r1, r4
 800fcda:	3961      	subs	r1, #97	; 0x61
 800fcdc:	2919      	cmp	r1, #25
 800fcde:	d803      	bhi.n	800fce8 <_strtol_l.constprop.0+0xd0>
 800fce0:	3c57      	subs	r4, #87	; 0x57
 800fce2:	e7d6      	b.n	800fc92 <_strtol_l.constprop.0+0x7a>
 800fce4:	0013      	movs	r3, r2
 800fce6:	e7e2      	b.n	800fcae <_strtol_l.constprop.0+0x96>
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	da09      	bge.n	800fd00 <_strtol_l.constprop.0+0xe8>
 800fcec:	2322      	movs	r3, #34	; 0x22
 800fcee:	9a05      	ldr	r2, [sp, #20]
 800fcf0:	9803      	ldr	r0, [sp, #12]
 800fcf2:	6013      	str	r3, [r2, #0]
 800fcf4:	9b02      	ldr	r3, [sp, #8]
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d0e1      	beq.n	800fcbe <_strtol_l.constprop.0+0xa6>
 800fcfa:	1e6b      	subs	r3, r5, #1
 800fcfc:	9301      	str	r3, [sp, #4]
 800fcfe:	e007      	b.n	800fd10 <_strtol_l.constprop.0+0xf8>
 800fd00:	2f00      	cmp	r7, #0
 800fd02:	d000      	beq.n	800fd06 <_strtol_l.constprop.0+0xee>
 800fd04:	4240      	negs	r0, r0
 800fd06:	9a02      	ldr	r2, [sp, #8]
 800fd08:	2a00      	cmp	r2, #0
 800fd0a:	d0d8      	beq.n	800fcbe <_strtol_l.constprop.0+0xa6>
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d1f4      	bne.n	800fcfa <_strtol_l.constprop.0+0xe2>
 800fd10:	9b02      	ldr	r3, [sp, #8]
 800fd12:	9a01      	ldr	r2, [sp, #4]
 800fd14:	601a      	str	r2, [r3, #0]
 800fd16:	e7d2      	b.n	800fcbe <_strtol_l.constprop.0+0xa6>
 800fd18:	2430      	movs	r4, #48	; 0x30
 800fd1a:	2e00      	cmp	r6, #0
 800fd1c:	d1a7      	bne.n	800fc6e <_strtol_l.constprop.0+0x56>
 800fd1e:	3608      	adds	r6, #8
 800fd20:	e7a5      	b.n	800fc6e <_strtol_l.constprop.0+0x56>
 800fd22:	2c30      	cmp	r4, #48	; 0x30
 800fd24:	d09b      	beq.n	800fc5e <_strtol_l.constprop.0+0x46>
 800fd26:	260a      	movs	r6, #10
 800fd28:	e7a1      	b.n	800fc6e <_strtol_l.constprop.0+0x56>
 800fd2a:	46c0      	nop			; (mov r8, r8)
 800fd2c:	080138a1 	.word	0x080138a1
 800fd30:	7fffffff 	.word	0x7fffffff

0800fd34 <strtol>:
 800fd34:	b510      	push	{r4, lr}
 800fd36:	0013      	movs	r3, r2
 800fd38:	000a      	movs	r2, r1
 800fd3a:	0001      	movs	r1, r0
 800fd3c:	4802      	ldr	r0, [pc, #8]	; (800fd48 <strtol+0x14>)
 800fd3e:	6800      	ldr	r0, [r0, #0]
 800fd40:	f7ff ff6a 	bl	800fc18 <_strtol_l.constprop.0>
 800fd44:	bd10      	pop	{r4, pc}
 800fd46:	46c0      	nop			; (mov r8, r8)
 800fd48:	200000e4 	.word	0x200000e4

0800fd4c <print_e>:
 800fd4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd4e:	b08b      	sub	sp, #44	; 0x2c
 800fd50:	000f      	movs	r7, r1
 800fd52:	a910      	add	r1, sp, #64	; 0x40
 800fd54:	c920      	ldmia	r1!, {r5}
 800fd56:	780e      	ldrb	r6, [r1, #0]
 800fd58:	a908      	add	r1, sp, #32
 800fd5a:	9104      	str	r1, [sp, #16]
 800fd5c:	a907      	add	r1, sp, #28
 800fd5e:	9103      	str	r1, [sp, #12]
 800fd60:	a909      	add	r1, sp, #36	; 0x24
 800fd62:	9102      	str	r1, [sp, #8]
 800fd64:	1c69      	adds	r1, r5, #1
 800fd66:	9101      	str	r1, [sp, #4]
 800fd68:	2102      	movs	r1, #2
 800fd6a:	9100      	str	r1, [sp, #0]
 800fd6c:	f001 fe70 	bl	8011a50 <_dtoa_r>
 800fd70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fd72:	4b36      	ldr	r3, [pc, #216]	; (800fe4c <print_e+0x100>)
 800fd74:	0001      	movs	r1, r0
 800fd76:	429a      	cmp	r2, r3
 800fd78:	d104      	bne.n	800fd84 <print_e+0x38>
 800fd7a:	0038      	movs	r0, r7
 800fd7c:	f001 fd96 	bl	80118ac <strcpy>
 800fd80:	b00b      	add	sp, #44	; 0x2c
 800fd82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd84:	7801      	ldrb	r1, [r0, #0]
 800fd86:	1c43      	adds	r3, r0, #1
 800fd88:	1c7c      	adds	r4, r7, #1
 800fd8a:	7039      	strb	r1, [r7, #0]
 800fd8c:	2d00      	cmp	r5, #0
 800fd8e:	dd01      	ble.n	800fd94 <print_e+0x48>
 800fd90:	2101      	movs	r1, #1
 800fd92:	9112      	str	r1, [sp, #72]	; 0x48
 800fd94:	212e      	movs	r1, #46	; 0x2e
 800fd96:	7818      	ldrb	r0, [r3, #0]
 800fd98:	2800      	cmp	r0, #0
 800fd9a:	d001      	beq.n	800fda0 <print_e+0x54>
 800fd9c:	2d00      	cmp	r5, #0
 800fd9e:	dc35      	bgt.n	800fe0c <print_e+0xc0>
 800fda0:	2e67      	cmp	r6, #103	; 0x67
 800fda2:	d04b      	beq.n	800fe3c <print_e+0xf0>
 800fda4:	2e47      	cmp	r6, #71	; 0x47
 800fda6:	d04b      	beq.n	800fe40 <print_e+0xf4>
 800fda8:	232e      	movs	r3, #46	; 0x2e
 800fdaa:	2130      	movs	r1, #48	; 0x30
 800fdac:	2d00      	cmp	r5, #0
 800fdae:	dc3a      	bgt.n	800fe26 <print_e+0xda>
 800fdb0:	1e53      	subs	r3, r2, #1
 800fdb2:	7026      	strb	r6, [r4, #0]
 800fdb4:	9309      	str	r3, [sp, #36]	; 0x24
 800fdb6:	1ca5      	adds	r5, r4, #2
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	da43      	bge.n	800fe44 <print_e+0xf8>
 800fdbc:	232d      	movs	r3, #45	; 0x2d
 800fdbe:	7063      	strb	r3, [r4, #1]
 800fdc0:	3b2c      	subs	r3, #44	; 0x2c
 800fdc2:	1a9b      	subs	r3, r3, r2
 800fdc4:	9309      	str	r3, [sp, #36]	; 0x24
 800fdc6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800fdc8:	2e63      	cmp	r6, #99	; 0x63
 800fdca:	dd0d      	ble.n	800fde8 <print_e+0x9c>
 800fdcc:	2164      	movs	r1, #100	; 0x64
 800fdce:	0030      	movs	r0, r6
 800fdd0:	f7f0 fa46 	bl	8000260 <__divsi3>
 800fdd4:	0003      	movs	r3, r0
 800fdd6:	0002      	movs	r2, r0
 800fdd8:	2064      	movs	r0, #100	; 0x64
 800fdda:	4240      	negs	r0, r0
 800fddc:	4358      	muls	r0, r3
 800fdde:	3230      	adds	r2, #48	; 0x30
 800fde0:	1980      	adds	r0, r0, r6
 800fde2:	1ce5      	adds	r5, r4, #3
 800fde4:	70a2      	strb	r2, [r4, #2]
 800fde6:	9009      	str	r0, [sp, #36]	; 0x24
 800fde8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800fdea:	210a      	movs	r1, #10
 800fdec:	0020      	movs	r0, r4
 800fdee:	f7f0 fa37 	bl	8000260 <__divsi3>
 800fdf2:	0003      	movs	r3, r0
 800fdf4:	0002      	movs	r2, r0
 800fdf6:	200a      	movs	r0, #10
 800fdf8:	4240      	negs	r0, r0
 800fdfa:	4358      	muls	r0, r3
 800fdfc:	2300      	movs	r3, #0
 800fdfe:	1900      	adds	r0, r0, r4
 800fe00:	3230      	adds	r2, #48	; 0x30
 800fe02:	3030      	adds	r0, #48	; 0x30
 800fe04:	702a      	strb	r2, [r5, #0]
 800fe06:	7068      	strb	r0, [r5, #1]
 800fe08:	70ab      	strb	r3, [r5, #2]
 800fe0a:	e7b9      	b.n	800fd80 <print_e+0x34>
 800fe0c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800fe0e:	2800      	cmp	r0, #0
 800fe10:	d001      	beq.n	800fe16 <print_e+0xca>
 800fe12:	7021      	strb	r1, [r4, #0]
 800fe14:	3401      	adds	r4, #1
 800fe16:	7818      	ldrb	r0, [r3, #0]
 800fe18:	3d01      	subs	r5, #1
 800fe1a:	7020      	strb	r0, [r4, #0]
 800fe1c:	2000      	movs	r0, #0
 800fe1e:	3301      	adds	r3, #1
 800fe20:	3401      	adds	r4, #1
 800fe22:	9012      	str	r0, [sp, #72]	; 0x48
 800fe24:	e7b7      	b.n	800fd96 <print_e+0x4a>
 800fe26:	9812      	ldr	r0, [sp, #72]	; 0x48
 800fe28:	2800      	cmp	r0, #0
 800fe2a:	d001      	beq.n	800fe30 <print_e+0xe4>
 800fe2c:	7023      	strb	r3, [r4, #0]
 800fe2e:	3401      	adds	r4, #1
 800fe30:	2000      	movs	r0, #0
 800fe32:	7021      	strb	r1, [r4, #0]
 800fe34:	3d01      	subs	r5, #1
 800fe36:	3401      	adds	r4, #1
 800fe38:	9012      	str	r0, [sp, #72]	; 0x48
 800fe3a:	e7b7      	b.n	800fdac <print_e+0x60>
 800fe3c:	2665      	movs	r6, #101	; 0x65
 800fe3e:	e7b7      	b.n	800fdb0 <print_e+0x64>
 800fe40:	2645      	movs	r6, #69	; 0x45
 800fe42:	e7b5      	b.n	800fdb0 <print_e+0x64>
 800fe44:	232b      	movs	r3, #43	; 0x2b
 800fe46:	7063      	strb	r3, [r4, #1]
 800fe48:	e7bd      	b.n	800fdc6 <print_e+0x7a>
 800fe4a:	46c0      	nop			; (mov r8, r8)
 800fe4c:	0000270f 	.word	0x0000270f

0800fe50 <_gcvt>:
 800fe50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe52:	0016      	movs	r6, r2
 800fe54:	001d      	movs	r5, r3
 800fe56:	b08d      	sub	sp, #52	; 0x34
 800fe58:	ab14      	add	r3, sp, #80	; 0x50
 800fe5a:	781b      	ldrb	r3, [r3, #0]
 800fe5c:	0007      	movs	r7, r0
 800fe5e:	9307      	str	r3, [sp, #28]
 800fe60:	2200      	movs	r2, #0
 800fe62:	2300      	movs	r3, #0
 800fe64:	0030      	movs	r0, r6
 800fe66:	0029      	movs	r1, r5
 800fe68:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800fe6a:	f7f0 fafb 	bl	8000464 <__aeabi_dcmplt>
 800fe6e:	2800      	cmp	r0, #0
 800fe70:	d002      	beq.n	800fe78 <_gcvt+0x28>
 800fe72:	2380      	movs	r3, #128	; 0x80
 800fe74:	061b      	lsls	r3, r3, #24
 800fe76:	18ed      	adds	r5, r5, r3
 800fe78:	2200      	movs	r2, #0
 800fe7a:	2300      	movs	r3, #0
 800fe7c:	0030      	movs	r0, r6
 800fe7e:	0029      	movs	r1, r5
 800fe80:	f7f0 faea 	bl	8000458 <__aeabi_dcmpeq>
 800fe84:	2800      	cmp	r0, #0
 800fe86:	d006      	beq.n	800fe96 <_gcvt+0x46>
 800fe88:	2330      	movs	r3, #48	; 0x30
 800fe8a:	7023      	strb	r3, [r4, #0]
 800fe8c:	2300      	movs	r3, #0
 800fe8e:	7063      	strb	r3, [r4, #1]
 800fe90:	0020      	movs	r0, r4
 800fe92:	b00d      	add	sp, #52	; 0x34
 800fe94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe96:	0030      	movs	r0, r6
 800fe98:	0029      	movs	r1, r5
 800fe9a:	4a52      	ldr	r2, [pc, #328]	; (800ffe4 <_gcvt+0x194>)
 800fe9c:	4b52      	ldr	r3, [pc, #328]	; (800ffe8 <_gcvt+0x198>)
 800fe9e:	f7f0 faeb 	bl	8000478 <__aeabi_dcmple>
 800fea2:	2800      	cmp	r0, #0
 800fea4:	d00d      	beq.n	800fec2 <_gcvt+0x72>
 800fea6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fea8:	0032      	movs	r2, r6
 800feaa:	9302      	str	r3, [sp, #8]
 800feac:	9b07      	ldr	r3, [sp, #28]
 800feae:	0021      	movs	r1, r4
 800feb0:	9301      	str	r3, [sp, #4]
 800feb2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800feb4:	0038      	movs	r0, r7
 800feb6:	3b01      	subs	r3, #1
 800feb8:	9300      	str	r3, [sp, #0]
 800feba:	002b      	movs	r3, r5
 800febc:	f7ff ff46 	bl	800fd4c <print_e>
 800fec0:	e7e6      	b.n	800fe90 <_gcvt+0x40>
 800fec2:	9812      	ldr	r0, [sp, #72]	; 0x48
 800fec4:	f001 f8a0 	bl	8011008 <_mprec_log10>
 800fec8:	0032      	movs	r2, r6
 800feca:	002b      	movs	r3, r5
 800fecc:	f7f0 fad4 	bl	8000478 <__aeabi_dcmple>
 800fed0:	2800      	cmp	r0, #0
 800fed2:	d1e8      	bne.n	800fea6 <_gcvt+0x56>
 800fed4:	ab0b      	add	r3, sp, #44	; 0x2c
 800fed6:	9304      	str	r3, [sp, #16]
 800fed8:	ab0a      	add	r3, sp, #40	; 0x28
 800feda:	9303      	str	r3, [sp, #12]
 800fedc:	ab09      	add	r3, sp, #36	; 0x24
 800fede:	9302      	str	r3, [sp, #8]
 800fee0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fee2:	0032      	movs	r2, r6
 800fee4:	9301      	str	r3, [sp, #4]
 800fee6:	2302      	movs	r3, #2
 800fee8:	0038      	movs	r0, r7
 800feea:	9300      	str	r3, [sp, #0]
 800feec:	002b      	movs	r3, r5
 800feee:	f001 fdaf 	bl	8011a50 <_dtoa_r>
 800fef2:	4b3e      	ldr	r3, [pc, #248]	; (800ffec <_gcvt+0x19c>)
 800fef4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fef6:	0001      	movs	r1, r0
 800fef8:	0020      	movs	r0, r4
 800fefa:	429a      	cmp	r2, r3
 800fefc:	d00c      	beq.n	800ff18 <_gcvt+0xc8>
 800fefe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ff00:	18e5      	adds	r5, r4, r3
 800ff02:	780e      	ldrb	r6, [r1, #0]
 800ff04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ff06:	1a2b      	subs	r3, r5, r0
 800ff08:	2e00      	cmp	r6, #0
 800ff0a:	d001      	beq.n	800ff10 <_gcvt+0xc0>
 800ff0c:	2a00      	cmp	r2, #0
 800ff0e:	dc06      	bgt.n	800ff1e <_gcvt+0xce>
 800ff10:	2501      	movs	r5, #1
 800ff12:	2600      	movs	r6, #0
 800ff14:	46ac      	mov	ip, r5
 800ff16:	e00d      	b.n	800ff34 <_gcvt+0xe4>
 800ff18:	f001 fcc8 	bl	80118ac <strcpy>
 800ff1c:	e7b8      	b.n	800fe90 <_gcvt+0x40>
 800ff1e:	3a01      	subs	r2, #1
 800ff20:	7006      	strb	r6, [r0, #0]
 800ff22:	3101      	adds	r1, #1
 800ff24:	9209      	str	r2, [sp, #36]	; 0x24
 800ff26:	3001      	adds	r0, #1
 800ff28:	e7eb      	b.n	800ff02 <_gcvt+0xb2>
 800ff2a:	2530      	movs	r5, #48	; 0x30
 800ff2c:	4666      	mov	r6, ip
 800ff2e:	7005      	strb	r5, [r0, #0]
 800ff30:	3b01      	subs	r3, #1
 800ff32:	3001      	adds	r0, #1
 800ff34:	0005      	movs	r5, r0
 800ff36:	1e17      	subs	r7, r2, #0
 800ff38:	dc35      	bgt.n	800ffa6 <_gcvt+0x156>
 800ff3a:	2e00      	cmp	r6, #0
 800ff3c:	d000      	beq.n	800ff40 <_gcvt+0xf0>
 800ff3e:	9209      	str	r2, [sp, #36]	; 0x24
 800ff40:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ff42:	2a00      	cmp	r2, #0
 800ff44:	d102      	bne.n	800ff4c <_gcvt+0xfc>
 800ff46:	780a      	ldrb	r2, [r1, #0]
 800ff48:	2a00      	cmp	r2, #0
 800ff4a:	d029      	beq.n	800ffa0 <_gcvt+0x150>
 800ff4c:	4284      	cmp	r4, r0
 800ff4e:	d102      	bne.n	800ff56 <_gcvt+0x106>
 800ff50:	2230      	movs	r2, #48	; 0x30
 800ff52:	1c65      	adds	r5, r4, #1
 800ff54:	7022      	strb	r2, [r4, #0]
 800ff56:	222e      	movs	r2, #46	; 0x2e
 800ff58:	702a      	strb	r2, [r5, #0]
 800ff5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ff5c:	0028      	movs	r0, r5
 800ff5e:	1b57      	subs	r7, r2, r5
 800ff60:	9707      	str	r7, [sp, #28]
 800ff62:	2701      	movs	r7, #1
 800ff64:	2600      	movs	r6, #0
 800ff66:	46bc      	mov	ip, r7
 800ff68:	9f07      	ldr	r7, [sp, #28]
 800ff6a:	42c7      	cmn	r7, r0
 800ff6c:	d422      	bmi.n	800ffb4 <_gcvt+0x164>
 800ff6e:	2000      	movs	r0, #0
 800ff70:	4257      	negs	r7, r2
 800ff72:	4282      	cmp	r2, r0
 800ff74:	dc00      	bgt.n	800ff78 <_gcvt+0x128>
 800ff76:	0038      	movs	r0, r7
 800ff78:	3001      	adds	r0, #1
 800ff7a:	182d      	adds	r5, r5, r0
 800ff7c:	2000      	movs	r0, #0
 800ff7e:	4282      	cmp	r2, r0
 800ff80:	dc00      	bgt.n	800ff84 <_gcvt+0x134>
 800ff82:	0038      	movs	r0, r7
 800ff84:	1810      	adds	r0, r2, r0
 800ff86:	2e00      	cmp	r6, #0
 800ff88:	d000      	beq.n	800ff8c <_gcvt+0x13c>
 800ff8a:	9009      	str	r0, [sp, #36]	; 0x24
 800ff8c:	002a      	movs	r2, r5
 800ff8e:	7808      	ldrb	r0, [r1, #0]
 800ff90:	0015      	movs	r5, r2
 800ff92:	2800      	cmp	r0, #0
 800ff94:	d001      	beq.n	800ff9a <_gcvt+0x14a>
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	dc11      	bgt.n	800ffbe <_gcvt+0x16e>
 800ff9a:	9915      	ldr	r1, [sp, #84]	; 0x54
 800ff9c:	2900      	cmp	r1, #0
 800ff9e:	d11d      	bne.n	800ffdc <_gcvt+0x18c>
 800ffa0:	2300      	movs	r3, #0
 800ffa2:	702b      	strb	r3, [r5, #0]
 800ffa4:	e774      	b.n	800fe90 <_gcvt+0x40>
 800ffa6:	3a01      	subs	r2, #1
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	dcbe      	bgt.n	800ff2a <_gcvt+0xda>
 800ffac:	2e00      	cmp	r6, #0
 800ffae:	d0c7      	beq.n	800ff40 <_gcvt+0xf0>
 800ffb0:	9709      	str	r7, [sp, #36]	; 0x24
 800ffb2:	e7c5      	b.n	800ff40 <_gcvt+0xf0>
 800ffb4:	2630      	movs	r6, #48	; 0x30
 800ffb6:	3001      	adds	r0, #1
 800ffb8:	7006      	strb	r6, [r0, #0]
 800ffba:	4666      	mov	r6, ip
 800ffbc:	e7d4      	b.n	800ff68 <_gcvt+0x118>
 800ffbe:	7010      	strb	r0, [r2, #0]
 800ffc0:	3101      	adds	r1, #1
 800ffc2:	3b01      	subs	r3, #1
 800ffc4:	3201      	adds	r2, #1
 800ffc6:	e7e2      	b.n	800ff8e <_gcvt+0x13e>
 800ffc8:	700e      	strb	r6, [r1, #0]
 800ffca:	3101      	adds	r1, #1
 800ffcc:	1a68      	subs	r0, r5, r1
 800ffce:	2800      	cmp	r0, #0
 800ffd0:	dcfa      	bgt.n	800ffc8 <_gcvt+0x178>
 800ffd2:	43dd      	mvns	r5, r3
 800ffd4:	17ed      	asrs	r5, r5, #31
 800ffd6:	401d      	ands	r5, r3
 800ffd8:	1955      	adds	r5, r2, r5
 800ffda:	e7e1      	b.n	800ffa0 <_gcvt+0x150>
 800ffdc:	0011      	movs	r1, r2
 800ffde:	2630      	movs	r6, #48	; 0x30
 800ffe0:	189d      	adds	r5, r3, r2
 800ffe2:	e7f3      	b.n	800ffcc <_gcvt+0x17c>
 800ffe4:	eb1c432d 	.word	0xeb1c432d
 800ffe8:	3f1a36e2 	.word	0x3f1a36e2
 800ffec:	0000270f 	.word	0x0000270f

0800fff0 <rshift>:
 800fff0:	0002      	movs	r2, r0
 800fff2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fff4:	6904      	ldr	r4, [r0, #16]
 800fff6:	3214      	adds	r2, #20
 800fff8:	0013      	movs	r3, r2
 800fffa:	b085      	sub	sp, #20
 800fffc:	114f      	asrs	r7, r1, #5
 800fffe:	42bc      	cmp	r4, r7
 8010000:	dd31      	ble.n	8010066 <rshift+0x76>
 8010002:	00bb      	lsls	r3, r7, #2
 8010004:	18d3      	adds	r3, r2, r3
 8010006:	261f      	movs	r6, #31
 8010008:	9301      	str	r3, [sp, #4]
 801000a:	000b      	movs	r3, r1
 801000c:	00a5      	lsls	r5, r4, #2
 801000e:	4033      	ands	r3, r6
 8010010:	1955      	adds	r5, r2, r5
 8010012:	9302      	str	r3, [sp, #8]
 8010014:	4231      	tst	r1, r6
 8010016:	d10c      	bne.n	8010032 <rshift+0x42>
 8010018:	0016      	movs	r6, r2
 801001a:	9901      	ldr	r1, [sp, #4]
 801001c:	428d      	cmp	r5, r1
 801001e:	d838      	bhi.n	8010092 <rshift+0xa2>
 8010020:	9901      	ldr	r1, [sp, #4]
 8010022:	2300      	movs	r3, #0
 8010024:	3903      	subs	r1, #3
 8010026:	428d      	cmp	r5, r1
 8010028:	d301      	bcc.n	801002e <rshift+0x3e>
 801002a:	1be3      	subs	r3, r4, r7
 801002c:	009b      	lsls	r3, r3, #2
 801002e:	18d3      	adds	r3, r2, r3
 8010030:	e019      	b.n	8010066 <rshift+0x76>
 8010032:	2120      	movs	r1, #32
 8010034:	9b02      	ldr	r3, [sp, #8]
 8010036:	9e01      	ldr	r6, [sp, #4]
 8010038:	1acb      	subs	r3, r1, r3
 801003a:	9303      	str	r3, [sp, #12]
 801003c:	ce02      	ldmia	r6!, {r1}
 801003e:	9b02      	ldr	r3, [sp, #8]
 8010040:	4694      	mov	ip, r2
 8010042:	40d9      	lsrs	r1, r3
 8010044:	9100      	str	r1, [sp, #0]
 8010046:	42b5      	cmp	r5, r6
 8010048:	d816      	bhi.n	8010078 <rshift+0x88>
 801004a:	9e01      	ldr	r6, [sp, #4]
 801004c:	2300      	movs	r3, #0
 801004e:	3601      	adds	r6, #1
 8010050:	42b5      	cmp	r5, r6
 8010052:	d302      	bcc.n	801005a <rshift+0x6a>
 8010054:	1be3      	subs	r3, r4, r7
 8010056:	009b      	lsls	r3, r3, #2
 8010058:	3b04      	subs	r3, #4
 801005a:	9900      	ldr	r1, [sp, #0]
 801005c:	18d3      	adds	r3, r2, r3
 801005e:	6019      	str	r1, [r3, #0]
 8010060:	2900      	cmp	r1, #0
 8010062:	d000      	beq.n	8010066 <rshift+0x76>
 8010064:	3304      	adds	r3, #4
 8010066:	1a99      	subs	r1, r3, r2
 8010068:	1089      	asrs	r1, r1, #2
 801006a:	6101      	str	r1, [r0, #16]
 801006c:	4293      	cmp	r3, r2
 801006e:	d101      	bne.n	8010074 <rshift+0x84>
 8010070:	2300      	movs	r3, #0
 8010072:	6143      	str	r3, [r0, #20]
 8010074:	b005      	add	sp, #20
 8010076:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010078:	6833      	ldr	r3, [r6, #0]
 801007a:	9903      	ldr	r1, [sp, #12]
 801007c:	408b      	lsls	r3, r1
 801007e:	9900      	ldr	r1, [sp, #0]
 8010080:	4319      	orrs	r1, r3
 8010082:	4663      	mov	r3, ip
 8010084:	c302      	stmia	r3!, {r1}
 8010086:	469c      	mov	ip, r3
 8010088:	ce02      	ldmia	r6!, {r1}
 801008a:	9b02      	ldr	r3, [sp, #8]
 801008c:	40d9      	lsrs	r1, r3
 801008e:	9100      	str	r1, [sp, #0]
 8010090:	e7d9      	b.n	8010046 <rshift+0x56>
 8010092:	c908      	ldmia	r1!, {r3}
 8010094:	c608      	stmia	r6!, {r3}
 8010096:	e7c1      	b.n	801001c <rshift+0x2c>

08010098 <__hexdig_fun>:
 8010098:	0002      	movs	r2, r0
 801009a:	3a30      	subs	r2, #48	; 0x30
 801009c:	0003      	movs	r3, r0
 801009e:	2a09      	cmp	r2, #9
 80100a0:	d802      	bhi.n	80100a8 <__hexdig_fun+0x10>
 80100a2:	3b20      	subs	r3, #32
 80100a4:	b2d8      	uxtb	r0, r3
 80100a6:	4770      	bx	lr
 80100a8:	0002      	movs	r2, r0
 80100aa:	3a61      	subs	r2, #97	; 0x61
 80100ac:	2a05      	cmp	r2, #5
 80100ae:	d801      	bhi.n	80100b4 <__hexdig_fun+0x1c>
 80100b0:	3b47      	subs	r3, #71	; 0x47
 80100b2:	e7f7      	b.n	80100a4 <__hexdig_fun+0xc>
 80100b4:	001a      	movs	r2, r3
 80100b6:	3a41      	subs	r2, #65	; 0x41
 80100b8:	2000      	movs	r0, #0
 80100ba:	2a05      	cmp	r2, #5
 80100bc:	d8f3      	bhi.n	80100a6 <__hexdig_fun+0xe>
 80100be:	3b27      	subs	r3, #39	; 0x27
 80100c0:	e7f0      	b.n	80100a4 <__hexdig_fun+0xc>
	...

080100c4 <__gethex>:
 80100c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80100c6:	b08d      	sub	sp, #52	; 0x34
 80100c8:	930a      	str	r3, [sp, #40]	; 0x28
 80100ca:	4bbf      	ldr	r3, [pc, #764]	; (80103c8 <__gethex+0x304>)
 80100cc:	9005      	str	r0, [sp, #20]
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	9109      	str	r1, [sp, #36]	; 0x24
 80100d2:	0018      	movs	r0, r3
 80100d4:	9202      	str	r2, [sp, #8]
 80100d6:	9307      	str	r3, [sp, #28]
 80100d8:	f7f0 f81c 	bl	8000114 <strlen>
 80100dc:	2202      	movs	r2, #2
 80100de:	9b07      	ldr	r3, [sp, #28]
 80100e0:	4252      	negs	r2, r2
 80100e2:	181b      	adds	r3, r3, r0
 80100e4:	3b01      	subs	r3, #1
 80100e6:	781b      	ldrb	r3, [r3, #0]
 80100e8:	9003      	str	r0, [sp, #12]
 80100ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80100ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80100ee:	6819      	ldr	r1, [r3, #0]
 80100f0:	1c8b      	adds	r3, r1, #2
 80100f2:	1a52      	subs	r2, r2, r1
 80100f4:	18d1      	adds	r1, r2, r3
 80100f6:	9301      	str	r3, [sp, #4]
 80100f8:	9108      	str	r1, [sp, #32]
 80100fa:	9901      	ldr	r1, [sp, #4]
 80100fc:	3301      	adds	r3, #1
 80100fe:	7808      	ldrb	r0, [r1, #0]
 8010100:	2830      	cmp	r0, #48	; 0x30
 8010102:	d0f7      	beq.n	80100f4 <__gethex+0x30>
 8010104:	f7ff ffc8 	bl	8010098 <__hexdig_fun>
 8010108:	2300      	movs	r3, #0
 801010a:	001c      	movs	r4, r3
 801010c:	9304      	str	r3, [sp, #16]
 801010e:	4298      	cmp	r0, r3
 8010110:	d11f      	bne.n	8010152 <__gethex+0x8e>
 8010112:	9a03      	ldr	r2, [sp, #12]
 8010114:	9907      	ldr	r1, [sp, #28]
 8010116:	9801      	ldr	r0, [sp, #4]
 8010118:	f001 fbd0 	bl	80118bc <strncmp>
 801011c:	0007      	movs	r7, r0
 801011e:	42a0      	cmp	r0, r4
 8010120:	d000      	beq.n	8010124 <__gethex+0x60>
 8010122:	e06b      	b.n	80101fc <__gethex+0x138>
 8010124:	9b01      	ldr	r3, [sp, #4]
 8010126:	9a03      	ldr	r2, [sp, #12]
 8010128:	5c98      	ldrb	r0, [r3, r2]
 801012a:	189d      	adds	r5, r3, r2
 801012c:	f7ff ffb4 	bl	8010098 <__hexdig_fun>
 8010130:	2301      	movs	r3, #1
 8010132:	9304      	str	r3, [sp, #16]
 8010134:	42a0      	cmp	r0, r4
 8010136:	d030      	beq.n	801019a <__gethex+0xd6>
 8010138:	9501      	str	r5, [sp, #4]
 801013a:	9b01      	ldr	r3, [sp, #4]
 801013c:	7818      	ldrb	r0, [r3, #0]
 801013e:	2830      	cmp	r0, #48	; 0x30
 8010140:	d009      	beq.n	8010156 <__gethex+0x92>
 8010142:	f7ff ffa9 	bl	8010098 <__hexdig_fun>
 8010146:	4242      	negs	r2, r0
 8010148:	4142      	adcs	r2, r0
 801014a:	2301      	movs	r3, #1
 801014c:	002c      	movs	r4, r5
 801014e:	9204      	str	r2, [sp, #16]
 8010150:	9308      	str	r3, [sp, #32]
 8010152:	9d01      	ldr	r5, [sp, #4]
 8010154:	e004      	b.n	8010160 <__gethex+0x9c>
 8010156:	9b01      	ldr	r3, [sp, #4]
 8010158:	3301      	adds	r3, #1
 801015a:	9301      	str	r3, [sp, #4]
 801015c:	e7ed      	b.n	801013a <__gethex+0x76>
 801015e:	3501      	adds	r5, #1
 8010160:	7828      	ldrb	r0, [r5, #0]
 8010162:	f7ff ff99 	bl	8010098 <__hexdig_fun>
 8010166:	1e07      	subs	r7, r0, #0
 8010168:	d1f9      	bne.n	801015e <__gethex+0x9a>
 801016a:	0028      	movs	r0, r5
 801016c:	9a03      	ldr	r2, [sp, #12]
 801016e:	9907      	ldr	r1, [sp, #28]
 8010170:	f001 fba4 	bl	80118bc <strncmp>
 8010174:	2800      	cmp	r0, #0
 8010176:	d10e      	bne.n	8010196 <__gethex+0xd2>
 8010178:	2c00      	cmp	r4, #0
 801017a:	d107      	bne.n	801018c <__gethex+0xc8>
 801017c:	9b03      	ldr	r3, [sp, #12]
 801017e:	18ed      	adds	r5, r5, r3
 8010180:	002c      	movs	r4, r5
 8010182:	7828      	ldrb	r0, [r5, #0]
 8010184:	f7ff ff88 	bl	8010098 <__hexdig_fun>
 8010188:	2800      	cmp	r0, #0
 801018a:	d102      	bne.n	8010192 <__gethex+0xce>
 801018c:	1b64      	subs	r4, r4, r5
 801018e:	00a7      	lsls	r7, r4, #2
 8010190:	e003      	b.n	801019a <__gethex+0xd6>
 8010192:	3501      	adds	r5, #1
 8010194:	e7f5      	b.n	8010182 <__gethex+0xbe>
 8010196:	2c00      	cmp	r4, #0
 8010198:	d1f8      	bne.n	801018c <__gethex+0xc8>
 801019a:	2220      	movs	r2, #32
 801019c:	782b      	ldrb	r3, [r5, #0]
 801019e:	002e      	movs	r6, r5
 80101a0:	4393      	bics	r3, r2
 80101a2:	2b50      	cmp	r3, #80	; 0x50
 80101a4:	d11d      	bne.n	80101e2 <__gethex+0x11e>
 80101a6:	786b      	ldrb	r3, [r5, #1]
 80101a8:	2b2b      	cmp	r3, #43	; 0x2b
 80101aa:	d02c      	beq.n	8010206 <__gethex+0x142>
 80101ac:	2b2d      	cmp	r3, #45	; 0x2d
 80101ae:	d02e      	beq.n	801020e <__gethex+0x14a>
 80101b0:	2300      	movs	r3, #0
 80101b2:	1c6e      	adds	r6, r5, #1
 80101b4:	9306      	str	r3, [sp, #24]
 80101b6:	7830      	ldrb	r0, [r6, #0]
 80101b8:	f7ff ff6e 	bl	8010098 <__hexdig_fun>
 80101bc:	1e43      	subs	r3, r0, #1
 80101be:	b2db      	uxtb	r3, r3
 80101c0:	2b18      	cmp	r3, #24
 80101c2:	d82b      	bhi.n	801021c <__gethex+0x158>
 80101c4:	3810      	subs	r0, #16
 80101c6:	0004      	movs	r4, r0
 80101c8:	7870      	ldrb	r0, [r6, #1]
 80101ca:	f7ff ff65 	bl	8010098 <__hexdig_fun>
 80101ce:	1e43      	subs	r3, r0, #1
 80101d0:	b2db      	uxtb	r3, r3
 80101d2:	3601      	adds	r6, #1
 80101d4:	2b18      	cmp	r3, #24
 80101d6:	d91c      	bls.n	8010212 <__gethex+0x14e>
 80101d8:	9b06      	ldr	r3, [sp, #24]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d000      	beq.n	80101e0 <__gethex+0x11c>
 80101de:	4264      	negs	r4, r4
 80101e0:	193f      	adds	r7, r7, r4
 80101e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80101e4:	601e      	str	r6, [r3, #0]
 80101e6:	9b04      	ldr	r3, [sp, #16]
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d019      	beq.n	8010220 <__gethex+0x15c>
 80101ec:	2600      	movs	r6, #0
 80101ee:	9b08      	ldr	r3, [sp, #32]
 80101f0:	42b3      	cmp	r3, r6
 80101f2:	d100      	bne.n	80101f6 <__gethex+0x132>
 80101f4:	3606      	adds	r6, #6
 80101f6:	0030      	movs	r0, r6
 80101f8:	b00d      	add	sp, #52	; 0x34
 80101fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80101fc:	2301      	movs	r3, #1
 80101fe:	2700      	movs	r7, #0
 8010200:	9d01      	ldr	r5, [sp, #4]
 8010202:	9304      	str	r3, [sp, #16]
 8010204:	e7c9      	b.n	801019a <__gethex+0xd6>
 8010206:	2300      	movs	r3, #0
 8010208:	9306      	str	r3, [sp, #24]
 801020a:	1cae      	adds	r6, r5, #2
 801020c:	e7d3      	b.n	80101b6 <__gethex+0xf2>
 801020e:	2301      	movs	r3, #1
 8010210:	e7fa      	b.n	8010208 <__gethex+0x144>
 8010212:	230a      	movs	r3, #10
 8010214:	435c      	muls	r4, r3
 8010216:	1824      	adds	r4, r4, r0
 8010218:	3c10      	subs	r4, #16
 801021a:	e7d5      	b.n	80101c8 <__gethex+0x104>
 801021c:	002e      	movs	r6, r5
 801021e:	e7e0      	b.n	80101e2 <__gethex+0x11e>
 8010220:	9b01      	ldr	r3, [sp, #4]
 8010222:	9904      	ldr	r1, [sp, #16]
 8010224:	1aeb      	subs	r3, r5, r3
 8010226:	3b01      	subs	r3, #1
 8010228:	2b07      	cmp	r3, #7
 801022a:	dc0a      	bgt.n	8010242 <__gethex+0x17e>
 801022c:	9805      	ldr	r0, [sp, #20]
 801022e:	f000 fa65 	bl	80106fc <_Balloc>
 8010232:	1e04      	subs	r4, r0, #0
 8010234:	d108      	bne.n	8010248 <__gethex+0x184>
 8010236:	0002      	movs	r2, r0
 8010238:	21de      	movs	r1, #222	; 0xde
 801023a:	4b64      	ldr	r3, [pc, #400]	; (80103cc <__gethex+0x308>)
 801023c:	4864      	ldr	r0, [pc, #400]	; (80103d0 <__gethex+0x30c>)
 801023e:	f001 fb5d 	bl	80118fc <__assert_func>
 8010242:	3101      	adds	r1, #1
 8010244:	105b      	asrs	r3, r3, #1
 8010246:	e7ef      	b.n	8010228 <__gethex+0x164>
 8010248:	0003      	movs	r3, r0
 801024a:	3314      	adds	r3, #20
 801024c:	9304      	str	r3, [sp, #16]
 801024e:	9309      	str	r3, [sp, #36]	; 0x24
 8010250:	2300      	movs	r3, #0
 8010252:	001e      	movs	r6, r3
 8010254:	9306      	str	r3, [sp, #24]
 8010256:	9b01      	ldr	r3, [sp, #4]
 8010258:	42ab      	cmp	r3, r5
 801025a:	d340      	bcc.n	80102de <__gethex+0x21a>
 801025c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801025e:	9b04      	ldr	r3, [sp, #16]
 8010260:	c540      	stmia	r5!, {r6}
 8010262:	1aed      	subs	r5, r5, r3
 8010264:	10ad      	asrs	r5, r5, #2
 8010266:	0030      	movs	r0, r6
 8010268:	6125      	str	r5, [r4, #16]
 801026a:	f000 fb3f 	bl	80108ec <__hi0bits>
 801026e:	9b02      	ldr	r3, [sp, #8]
 8010270:	016d      	lsls	r5, r5, #5
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	1a2e      	subs	r6, r5, r0
 8010276:	9301      	str	r3, [sp, #4]
 8010278:	429e      	cmp	r6, r3
 801027a:	dd5a      	ble.n	8010332 <__gethex+0x26e>
 801027c:	1af6      	subs	r6, r6, r3
 801027e:	0031      	movs	r1, r6
 8010280:	0020      	movs	r0, r4
 8010282:	f000 fefc 	bl	801107e <__any_on>
 8010286:	1e05      	subs	r5, r0, #0
 8010288:	d016      	beq.n	80102b8 <__gethex+0x1f4>
 801028a:	2501      	movs	r5, #1
 801028c:	211f      	movs	r1, #31
 801028e:	0028      	movs	r0, r5
 8010290:	1e73      	subs	r3, r6, #1
 8010292:	4019      	ands	r1, r3
 8010294:	4088      	lsls	r0, r1
 8010296:	0001      	movs	r1, r0
 8010298:	115a      	asrs	r2, r3, #5
 801029a:	9804      	ldr	r0, [sp, #16]
 801029c:	0092      	lsls	r2, r2, #2
 801029e:	5812      	ldr	r2, [r2, r0]
 80102a0:	420a      	tst	r2, r1
 80102a2:	d009      	beq.n	80102b8 <__gethex+0x1f4>
 80102a4:	42ab      	cmp	r3, r5
 80102a6:	dd06      	ble.n	80102b6 <__gethex+0x1f2>
 80102a8:	0020      	movs	r0, r4
 80102aa:	1eb1      	subs	r1, r6, #2
 80102ac:	f000 fee7 	bl	801107e <__any_on>
 80102b0:	3502      	adds	r5, #2
 80102b2:	2800      	cmp	r0, #0
 80102b4:	d100      	bne.n	80102b8 <__gethex+0x1f4>
 80102b6:	2502      	movs	r5, #2
 80102b8:	0031      	movs	r1, r6
 80102ba:	0020      	movs	r0, r4
 80102bc:	f7ff fe98 	bl	800fff0 <rshift>
 80102c0:	19bf      	adds	r7, r7, r6
 80102c2:	9b02      	ldr	r3, [sp, #8]
 80102c4:	689b      	ldr	r3, [r3, #8]
 80102c6:	9303      	str	r3, [sp, #12]
 80102c8:	42bb      	cmp	r3, r7
 80102ca:	da42      	bge.n	8010352 <__gethex+0x28e>
 80102cc:	0021      	movs	r1, r4
 80102ce:	9805      	ldr	r0, [sp, #20]
 80102d0:	f000 fa58 	bl	8010784 <_Bfree>
 80102d4:	2300      	movs	r3, #0
 80102d6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80102d8:	26a3      	movs	r6, #163	; 0xa3
 80102da:	6013      	str	r3, [r2, #0]
 80102dc:	e78b      	b.n	80101f6 <__gethex+0x132>
 80102de:	1e6b      	subs	r3, r5, #1
 80102e0:	9308      	str	r3, [sp, #32]
 80102e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80102e4:	781b      	ldrb	r3, [r3, #0]
 80102e6:	4293      	cmp	r3, r2
 80102e8:	d014      	beq.n	8010314 <__gethex+0x250>
 80102ea:	9b06      	ldr	r3, [sp, #24]
 80102ec:	2b20      	cmp	r3, #32
 80102ee:	d104      	bne.n	80102fa <__gethex+0x236>
 80102f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102f2:	c340      	stmia	r3!, {r6}
 80102f4:	2600      	movs	r6, #0
 80102f6:	9309      	str	r3, [sp, #36]	; 0x24
 80102f8:	9606      	str	r6, [sp, #24]
 80102fa:	9b08      	ldr	r3, [sp, #32]
 80102fc:	7818      	ldrb	r0, [r3, #0]
 80102fe:	f7ff fecb 	bl	8010098 <__hexdig_fun>
 8010302:	230f      	movs	r3, #15
 8010304:	4018      	ands	r0, r3
 8010306:	9b06      	ldr	r3, [sp, #24]
 8010308:	9d08      	ldr	r5, [sp, #32]
 801030a:	4098      	lsls	r0, r3
 801030c:	3304      	adds	r3, #4
 801030e:	4306      	orrs	r6, r0
 8010310:	9306      	str	r3, [sp, #24]
 8010312:	e7a0      	b.n	8010256 <__gethex+0x192>
 8010314:	2301      	movs	r3, #1
 8010316:	9a03      	ldr	r2, [sp, #12]
 8010318:	1a9d      	subs	r5, r3, r2
 801031a:	9b08      	ldr	r3, [sp, #32]
 801031c:	195d      	adds	r5, r3, r5
 801031e:	9b01      	ldr	r3, [sp, #4]
 8010320:	429d      	cmp	r5, r3
 8010322:	d3e2      	bcc.n	80102ea <__gethex+0x226>
 8010324:	0028      	movs	r0, r5
 8010326:	9907      	ldr	r1, [sp, #28]
 8010328:	f001 fac8 	bl	80118bc <strncmp>
 801032c:	2800      	cmp	r0, #0
 801032e:	d1dc      	bne.n	80102ea <__gethex+0x226>
 8010330:	e791      	b.n	8010256 <__gethex+0x192>
 8010332:	9b01      	ldr	r3, [sp, #4]
 8010334:	2500      	movs	r5, #0
 8010336:	429e      	cmp	r6, r3
 8010338:	dac3      	bge.n	80102c2 <__gethex+0x1fe>
 801033a:	1b9e      	subs	r6, r3, r6
 801033c:	0021      	movs	r1, r4
 801033e:	0032      	movs	r2, r6
 8010340:	9805      	ldr	r0, [sp, #20]
 8010342:	f000 fc3d 	bl	8010bc0 <__lshift>
 8010346:	0003      	movs	r3, r0
 8010348:	3314      	adds	r3, #20
 801034a:	0004      	movs	r4, r0
 801034c:	1bbf      	subs	r7, r7, r6
 801034e:	9304      	str	r3, [sp, #16]
 8010350:	e7b7      	b.n	80102c2 <__gethex+0x1fe>
 8010352:	9b02      	ldr	r3, [sp, #8]
 8010354:	685e      	ldr	r6, [r3, #4]
 8010356:	42be      	cmp	r6, r7
 8010358:	dd71      	ble.n	801043e <__gethex+0x37a>
 801035a:	9b01      	ldr	r3, [sp, #4]
 801035c:	1bf6      	subs	r6, r6, r7
 801035e:	42b3      	cmp	r3, r6
 8010360:	dc38      	bgt.n	80103d4 <__gethex+0x310>
 8010362:	9b02      	ldr	r3, [sp, #8]
 8010364:	68db      	ldr	r3, [r3, #12]
 8010366:	2b02      	cmp	r3, #2
 8010368:	d026      	beq.n	80103b8 <__gethex+0x2f4>
 801036a:	2b03      	cmp	r3, #3
 801036c:	d028      	beq.n	80103c0 <__gethex+0x2fc>
 801036e:	2b01      	cmp	r3, #1
 8010370:	d119      	bne.n	80103a6 <__gethex+0x2e2>
 8010372:	9b01      	ldr	r3, [sp, #4]
 8010374:	42b3      	cmp	r3, r6
 8010376:	d116      	bne.n	80103a6 <__gethex+0x2e2>
 8010378:	2b01      	cmp	r3, #1
 801037a:	d10d      	bne.n	8010398 <__gethex+0x2d4>
 801037c:	9b02      	ldr	r3, [sp, #8]
 801037e:	2662      	movs	r6, #98	; 0x62
 8010380:	685b      	ldr	r3, [r3, #4]
 8010382:	9301      	str	r3, [sp, #4]
 8010384:	9a01      	ldr	r2, [sp, #4]
 8010386:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010388:	601a      	str	r2, [r3, #0]
 801038a:	2301      	movs	r3, #1
 801038c:	9a04      	ldr	r2, [sp, #16]
 801038e:	6123      	str	r3, [r4, #16]
 8010390:	6013      	str	r3, [r2, #0]
 8010392:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010394:	601c      	str	r4, [r3, #0]
 8010396:	e72e      	b.n	80101f6 <__gethex+0x132>
 8010398:	9901      	ldr	r1, [sp, #4]
 801039a:	0020      	movs	r0, r4
 801039c:	3901      	subs	r1, #1
 801039e:	f000 fe6e 	bl	801107e <__any_on>
 80103a2:	2800      	cmp	r0, #0
 80103a4:	d1ea      	bne.n	801037c <__gethex+0x2b8>
 80103a6:	0021      	movs	r1, r4
 80103a8:	9805      	ldr	r0, [sp, #20]
 80103aa:	f000 f9eb 	bl	8010784 <_Bfree>
 80103ae:	2300      	movs	r3, #0
 80103b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80103b2:	2650      	movs	r6, #80	; 0x50
 80103b4:	6013      	str	r3, [r2, #0]
 80103b6:	e71e      	b.n	80101f6 <__gethex+0x132>
 80103b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d1f3      	bne.n	80103a6 <__gethex+0x2e2>
 80103be:	e7dd      	b.n	801037c <__gethex+0x2b8>
 80103c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d1da      	bne.n	801037c <__gethex+0x2b8>
 80103c6:	e7ee      	b.n	80103a6 <__gethex+0x2e2>
 80103c8:	08013a18 	.word	0x08013a18
 80103cc:	080139a1 	.word	0x080139a1
 80103d0:	080139b2 	.word	0x080139b2
 80103d4:	1e77      	subs	r7, r6, #1
 80103d6:	2d00      	cmp	r5, #0
 80103d8:	d12f      	bne.n	801043a <__gethex+0x376>
 80103da:	2f00      	cmp	r7, #0
 80103dc:	d004      	beq.n	80103e8 <__gethex+0x324>
 80103de:	0039      	movs	r1, r7
 80103e0:	0020      	movs	r0, r4
 80103e2:	f000 fe4c 	bl	801107e <__any_on>
 80103e6:	0005      	movs	r5, r0
 80103e8:	231f      	movs	r3, #31
 80103ea:	117a      	asrs	r2, r7, #5
 80103ec:	401f      	ands	r7, r3
 80103ee:	3b1e      	subs	r3, #30
 80103f0:	40bb      	lsls	r3, r7
 80103f2:	9904      	ldr	r1, [sp, #16]
 80103f4:	0092      	lsls	r2, r2, #2
 80103f6:	5852      	ldr	r2, [r2, r1]
 80103f8:	421a      	tst	r2, r3
 80103fa:	d001      	beq.n	8010400 <__gethex+0x33c>
 80103fc:	2302      	movs	r3, #2
 80103fe:	431d      	orrs	r5, r3
 8010400:	9b01      	ldr	r3, [sp, #4]
 8010402:	0031      	movs	r1, r6
 8010404:	1b9b      	subs	r3, r3, r6
 8010406:	2602      	movs	r6, #2
 8010408:	0020      	movs	r0, r4
 801040a:	9301      	str	r3, [sp, #4]
 801040c:	f7ff fdf0 	bl	800fff0 <rshift>
 8010410:	9b02      	ldr	r3, [sp, #8]
 8010412:	685f      	ldr	r7, [r3, #4]
 8010414:	2d00      	cmp	r5, #0
 8010416:	d041      	beq.n	801049c <__gethex+0x3d8>
 8010418:	9b02      	ldr	r3, [sp, #8]
 801041a:	68db      	ldr	r3, [r3, #12]
 801041c:	2b02      	cmp	r3, #2
 801041e:	d010      	beq.n	8010442 <__gethex+0x37e>
 8010420:	2b03      	cmp	r3, #3
 8010422:	d012      	beq.n	801044a <__gethex+0x386>
 8010424:	2b01      	cmp	r3, #1
 8010426:	d106      	bne.n	8010436 <__gethex+0x372>
 8010428:	07aa      	lsls	r2, r5, #30
 801042a:	d504      	bpl.n	8010436 <__gethex+0x372>
 801042c:	9a04      	ldr	r2, [sp, #16]
 801042e:	6810      	ldr	r0, [r2, #0]
 8010430:	4305      	orrs	r5, r0
 8010432:	421d      	tst	r5, r3
 8010434:	d10c      	bne.n	8010450 <__gethex+0x38c>
 8010436:	2310      	movs	r3, #16
 8010438:	e02f      	b.n	801049a <__gethex+0x3d6>
 801043a:	2501      	movs	r5, #1
 801043c:	e7d4      	b.n	80103e8 <__gethex+0x324>
 801043e:	2601      	movs	r6, #1
 8010440:	e7e8      	b.n	8010414 <__gethex+0x350>
 8010442:	2301      	movs	r3, #1
 8010444:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010446:	1a9b      	subs	r3, r3, r2
 8010448:	9313      	str	r3, [sp, #76]	; 0x4c
 801044a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801044c:	2b00      	cmp	r3, #0
 801044e:	d0f2      	beq.n	8010436 <__gethex+0x372>
 8010450:	6923      	ldr	r3, [r4, #16]
 8010452:	2000      	movs	r0, #0
 8010454:	9303      	str	r3, [sp, #12]
 8010456:	009b      	lsls	r3, r3, #2
 8010458:	9304      	str	r3, [sp, #16]
 801045a:	0023      	movs	r3, r4
 801045c:	9a04      	ldr	r2, [sp, #16]
 801045e:	3314      	adds	r3, #20
 8010460:	1899      	adds	r1, r3, r2
 8010462:	681a      	ldr	r2, [r3, #0]
 8010464:	1c55      	adds	r5, r2, #1
 8010466:	d01e      	beq.n	80104a6 <__gethex+0x3e2>
 8010468:	3201      	adds	r2, #1
 801046a:	601a      	str	r2, [r3, #0]
 801046c:	0023      	movs	r3, r4
 801046e:	3314      	adds	r3, #20
 8010470:	2e02      	cmp	r6, #2
 8010472:	d140      	bne.n	80104f6 <__gethex+0x432>
 8010474:	9a02      	ldr	r2, [sp, #8]
 8010476:	9901      	ldr	r1, [sp, #4]
 8010478:	6812      	ldr	r2, [r2, #0]
 801047a:	3a01      	subs	r2, #1
 801047c:	428a      	cmp	r2, r1
 801047e:	d10b      	bne.n	8010498 <__gethex+0x3d4>
 8010480:	114a      	asrs	r2, r1, #5
 8010482:	211f      	movs	r1, #31
 8010484:	9801      	ldr	r0, [sp, #4]
 8010486:	0092      	lsls	r2, r2, #2
 8010488:	4001      	ands	r1, r0
 801048a:	2001      	movs	r0, #1
 801048c:	0005      	movs	r5, r0
 801048e:	408d      	lsls	r5, r1
 8010490:	58d3      	ldr	r3, [r2, r3]
 8010492:	422b      	tst	r3, r5
 8010494:	d000      	beq.n	8010498 <__gethex+0x3d4>
 8010496:	2601      	movs	r6, #1
 8010498:	2320      	movs	r3, #32
 801049a:	431e      	orrs	r6, r3
 801049c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801049e:	601c      	str	r4, [r3, #0]
 80104a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80104a2:	601f      	str	r7, [r3, #0]
 80104a4:	e6a7      	b.n	80101f6 <__gethex+0x132>
 80104a6:	c301      	stmia	r3!, {r0}
 80104a8:	4299      	cmp	r1, r3
 80104aa:	d8da      	bhi.n	8010462 <__gethex+0x39e>
 80104ac:	9b03      	ldr	r3, [sp, #12]
 80104ae:	68a2      	ldr	r2, [r4, #8]
 80104b0:	4293      	cmp	r3, r2
 80104b2:	db17      	blt.n	80104e4 <__gethex+0x420>
 80104b4:	6863      	ldr	r3, [r4, #4]
 80104b6:	9805      	ldr	r0, [sp, #20]
 80104b8:	1c59      	adds	r1, r3, #1
 80104ba:	f000 f91f 	bl	80106fc <_Balloc>
 80104be:	1e05      	subs	r5, r0, #0
 80104c0:	d103      	bne.n	80104ca <__gethex+0x406>
 80104c2:	0002      	movs	r2, r0
 80104c4:	2184      	movs	r1, #132	; 0x84
 80104c6:	4b1c      	ldr	r3, [pc, #112]	; (8010538 <__gethex+0x474>)
 80104c8:	e6b8      	b.n	801023c <__gethex+0x178>
 80104ca:	0021      	movs	r1, r4
 80104cc:	6923      	ldr	r3, [r4, #16]
 80104ce:	310c      	adds	r1, #12
 80104d0:	1c9a      	adds	r2, r3, #2
 80104d2:	0092      	lsls	r2, r2, #2
 80104d4:	300c      	adds	r0, #12
 80104d6:	f7fe fca5 	bl	800ee24 <memcpy>
 80104da:	0021      	movs	r1, r4
 80104dc:	9805      	ldr	r0, [sp, #20]
 80104de:	f000 f951 	bl	8010784 <_Bfree>
 80104e2:	002c      	movs	r4, r5
 80104e4:	6923      	ldr	r3, [r4, #16]
 80104e6:	1c5a      	adds	r2, r3, #1
 80104e8:	6122      	str	r2, [r4, #16]
 80104ea:	2201      	movs	r2, #1
 80104ec:	3304      	adds	r3, #4
 80104ee:	009b      	lsls	r3, r3, #2
 80104f0:	18e3      	adds	r3, r4, r3
 80104f2:	605a      	str	r2, [r3, #4]
 80104f4:	e7ba      	b.n	801046c <__gethex+0x3a8>
 80104f6:	6922      	ldr	r2, [r4, #16]
 80104f8:	9903      	ldr	r1, [sp, #12]
 80104fa:	428a      	cmp	r2, r1
 80104fc:	dd09      	ble.n	8010512 <__gethex+0x44e>
 80104fe:	2101      	movs	r1, #1
 8010500:	0020      	movs	r0, r4
 8010502:	f7ff fd75 	bl	800fff0 <rshift>
 8010506:	9b02      	ldr	r3, [sp, #8]
 8010508:	3701      	adds	r7, #1
 801050a:	689b      	ldr	r3, [r3, #8]
 801050c:	42bb      	cmp	r3, r7
 801050e:	dac2      	bge.n	8010496 <__gethex+0x3d2>
 8010510:	e6dc      	b.n	80102cc <__gethex+0x208>
 8010512:	221f      	movs	r2, #31
 8010514:	9d01      	ldr	r5, [sp, #4]
 8010516:	9901      	ldr	r1, [sp, #4]
 8010518:	2601      	movs	r6, #1
 801051a:	4015      	ands	r5, r2
 801051c:	4211      	tst	r1, r2
 801051e:	d0bb      	beq.n	8010498 <__gethex+0x3d4>
 8010520:	9a04      	ldr	r2, [sp, #16]
 8010522:	189b      	adds	r3, r3, r2
 8010524:	3b04      	subs	r3, #4
 8010526:	6818      	ldr	r0, [r3, #0]
 8010528:	f000 f9e0 	bl	80108ec <__hi0bits>
 801052c:	2320      	movs	r3, #32
 801052e:	1b5d      	subs	r5, r3, r5
 8010530:	42a8      	cmp	r0, r5
 8010532:	dbe4      	blt.n	80104fe <__gethex+0x43a>
 8010534:	e7b0      	b.n	8010498 <__gethex+0x3d4>
 8010536:	46c0      	nop			; (mov r8, r8)
 8010538:	080139a1 	.word	0x080139a1

0801053c <L_shift>:
 801053c:	2308      	movs	r3, #8
 801053e:	b570      	push	{r4, r5, r6, lr}
 8010540:	2520      	movs	r5, #32
 8010542:	1a9a      	subs	r2, r3, r2
 8010544:	0092      	lsls	r2, r2, #2
 8010546:	1aad      	subs	r5, r5, r2
 8010548:	6843      	ldr	r3, [r0, #4]
 801054a:	6806      	ldr	r6, [r0, #0]
 801054c:	001c      	movs	r4, r3
 801054e:	40ac      	lsls	r4, r5
 8010550:	40d3      	lsrs	r3, r2
 8010552:	4334      	orrs	r4, r6
 8010554:	6004      	str	r4, [r0, #0]
 8010556:	6043      	str	r3, [r0, #4]
 8010558:	3004      	adds	r0, #4
 801055a:	4288      	cmp	r0, r1
 801055c:	d3f4      	bcc.n	8010548 <L_shift+0xc>
 801055e:	bd70      	pop	{r4, r5, r6, pc}

08010560 <__match>:
 8010560:	b530      	push	{r4, r5, lr}
 8010562:	6803      	ldr	r3, [r0, #0]
 8010564:	780c      	ldrb	r4, [r1, #0]
 8010566:	3301      	adds	r3, #1
 8010568:	2c00      	cmp	r4, #0
 801056a:	d102      	bne.n	8010572 <__match+0x12>
 801056c:	6003      	str	r3, [r0, #0]
 801056e:	2001      	movs	r0, #1
 8010570:	bd30      	pop	{r4, r5, pc}
 8010572:	781a      	ldrb	r2, [r3, #0]
 8010574:	0015      	movs	r5, r2
 8010576:	3d41      	subs	r5, #65	; 0x41
 8010578:	2d19      	cmp	r5, #25
 801057a:	d800      	bhi.n	801057e <__match+0x1e>
 801057c:	3220      	adds	r2, #32
 801057e:	3101      	adds	r1, #1
 8010580:	42a2      	cmp	r2, r4
 8010582:	d0ef      	beq.n	8010564 <__match+0x4>
 8010584:	2000      	movs	r0, #0
 8010586:	e7f3      	b.n	8010570 <__match+0x10>

08010588 <__hexnan>:
 8010588:	b5f0      	push	{r4, r5, r6, r7, lr}
 801058a:	680b      	ldr	r3, [r1, #0]
 801058c:	b08b      	sub	sp, #44	; 0x2c
 801058e:	9201      	str	r2, [sp, #4]
 8010590:	9901      	ldr	r1, [sp, #4]
 8010592:	115a      	asrs	r2, r3, #5
 8010594:	0092      	lsls	r2, r2, #2
 8010596:	188a      	adds	r2, r1, r2
 8010598:	9202      	str	r2, [sp, #8]
 801059a:	0019      	movs	r1, r3
 801059c:	221f      	movs	r2, #31
 801059e:	4011      	ands	r1, r2
 80105a0:	9008      	str	r0, [sp, #32]
 80105a2:	9106      	str	r1, [sp, #24]
 80105a4:	4213      	tst	r3, r2
 80105a6:	d002      	beq.n	80105ae <__hexnan+0x26>
 80105a8:	9b02      	ldr	r3, [sp, #8]
 80105aa:	3304      	adds	r3, #4
 80105ac:	9302      	str	r3, [sp, #8]
 80105ae:	9b02      	ldr	r3, [sp, #8]
 80105b0:	2500      	movs	r5, #0
 80105b2:	1f1e      	subs	r6, r3, #4
 80105b4:	0037      	movs	r7, r6
 80105b6:	0034      	movs	r4, r6
 80105b8:	9b08      	ldr	r3, [sp, #32]
 80105ba:	6035      	str	r5, [r6, #0]
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	9507      	str	r5, [sp, #28]
 80105c0:	9305      	str	r3, [sp, #20]
 80105c2:	9503      	str	r5, [sp, #12]
 80105c4:	9b05      	ldr	r3, [sp, #20]
 80105c6:	3301      	adds	r3, #1
 80105c8:	9309      	str	r3, [sp, #36]	; 0x24
 80105ca:	9b05      	ldr	r3, [sp, #20]
 80105cc:	785b      	ldrb	r3, [r3, #1]
 80105ce:	9304      	str	r3, [sp, #16]
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d028      	beq.n	8010626 <__hexnan+0x9e>
 80105d4:	9804      	ldr	r0, [sp, #16]
 80105d6:	f7ff fd5f 	bl	8010098 <__hexdig_fun>
 80105da:	2800      	cmp	r0, #0
 80105dc:	d154      	bne.n	8010688 <__hexnan+0x100>
 80105de:	9b04      	ldr	r3, [sp, #16]
 80105e0:	2b20      	cmp	r3, #32
 80105e2:	d819      	bhi.n	8010618 <__hexnan+0x90>
 80105e4:	9b03      	ldr	r3, [sp, #12]
 80105e6:	9a07      	ldr	r2, [sp, #28]
 80105e8:	4293      	cmp	r3, r2
 80105ea:	dd12      	ble.n	8010612 <__hexnan+0x8a>
 80105ec:	42bc      	cmp	r4, r7
 80105ee:	d206      	bcs.n	80105fe <__hexnan+0x76>
 80105f0:	2d07      	cmp	r5, #7
 80105f2:	dc04      	bgt.n	80105fe <__hexnan+0x76>
 80105f4:	002a      	movs	r2, r5
 80105f6:	0039      	movs	r1, r7
 80105f8:	0020      	movs	r0, r4
 80105fa:	f7ff ff9f 	bl	801053c <L_shift>
 80105fe:	9b01      	ldr	r3, [sp, #4]
 8010600:	2508      	movs	r5, #8
 8010602:	429c      	cmp	r4, r3
 8010604:	d905      	bls.n	8010612 <__hexnan+0x8a>
 8010606:	1f27      	subs	r7, r4, #4
 8010608:	2500      	movs	r5, #0
 801060a:	003c      	movs	r4, r7
 801060c:	9b03      	ldr	r3, [sp, #12]
 801060e:	603d      	str	r5, [r7, #0]
 8010610:	9307      	str	r3, [sp, #28]
 8010612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010614:	9305      	str	r3, [sp, #20]
 8010616:	e7d5      	b.n	80105c4 <__hexnan+0x3c>
 8010618:	9b04      	ldr	r3, [sp, #16]
 801061a:	2b29      	cmp	r3, #41	; 0x29
 801061c:	d159      	bne.n	80106d2 <__hexnan+0x14a>
 801061e:	9b05      	ldr	r3, [sp, #20]
 8010620:	9a08      	ldr	r2, [sp, #32]
 8010622:	3302      	adds	r3, #2
 8010624:	6013      	str	r3, [r2, #0]
 8010626:	9b03      	ldr	r3, [sp, #12]
 8010628:	2b00      	cmp	r3, #0
 801062a:	d052      	beq.n	80106d2 <__hexnan+0x14a>
 801062c:	42bc      	cmp	r4, r7
 801062e:	d206      	bcs.n	801063e <__hexnan+0xb6>
 8010630:	2d07      	cmp	r5, #7
 8010632:	dc04      	bgt.n	801063e <__hexnan+0xb6>
 8010634:	002a      	movs	r2, r5
 8010636:	0039      	movs	r1, r7
 8010638:	0020      	movs	r0, r4
 801063a:	f7ff ff7f 	bl	801053c <L_shift>
 801063e:	9b01      	ldr	r3, [sp, #4]
 8010640:	429c      	cmp	r4, r3
 8010642:	d935      	bls.n	80106b0 <__hexnan+0x128>
 8010644:	001a      	movs	r2, r3
 8010646:	0023      	movs	r3, r4
 8010648:	cb02      	ldmia	r3!, {r1}
 801064a:	c202      	stmia	r2!, {r1}
 801064c:	429e      	cmp	r6, r3
 801064e:	d2fb      	bcs.n	8010648 <__hexnan+0xc0>
 8010650:	9b02      	ldr	r3, [sp, #8]
 8010652:	1c61      	adds	r1, r4, #1
 8010654:	1eda      	subs	r2, r3, #3
 8010656:	2304      	movs	r3, #4
 8010658:	4291      	cmp	r1, r2
 801065a:	d805      	bhi.n	8010668 <__hexnan+0xe0>
 801065c:	9b02      	ldr	r3, [sp, #8]
 801065e:	3b04      	subs	r3, #4
 8010660:	1b1b      	subs	r3, r3, r4
 8010662:	089b      	lsrs	r3, r3, #2
 8010664:	3301      	adds	r3, #1
 8010666:	009b      	lsls	r3, r3, #2
 8010668:	9a01      	ldr	r2, [sp, #4]
 801066a:	18d3      	adds	r3, r2, r3
 801066c:	2200      	movs	r2, #0
 801066e:	c304      	stmia	r3!, {r2}
 8010670:	429e      	cmp	r6, r3
 8010672:	d2fc      	bcs.n	801066e <__hexnan+0xe6>
 8010674:	6833      	ldr	r3, [r6, #0]
 8010676:	2b00      	cmp	r3, #0
 8010678:	d104      	bne.n	8010684 <__hexnan+0xfc>
 801067a:	9b01      	ldr	r3, [sp, #4]
 801067c:	429e      	cmp	r6, r3
 801067e:	d126      	bne.n	80106ce <__hexnan+0x146>
 8010680:	2301      	movs	r3, #1
 8010682:	6033      	str	r3, [r6, #0]
 8010684:	2005      	movs	r0, #5
 8010686:	e025      	b.n	80106d4 <__hexnan+0x14c>
 8010688:	9b03      	ldr	r3, [sp, #12]
 801068a:	3501      	adds	r5, #1
 801068c:	3301      	adds	r3, #1
 801068e:	9303      	str	r3, [sp, #12]
 8010690:	2d08      	cmp	r5, #8
 8010692:	dd06      	ble.n	80106a2 <__hexnan+0x11a>
 8010694:	9b01      	ldr	r3, [sp, #4]
 8010696:	429c      	cmp	r4, r3
 8010698:	d9bb      	bls.n	8010612 <__hexnan+0x8a>
 801069a:	2300      	movs	r3, #0
 801069c:	2501      	movs	r5, #1
 801069e:	3c04      	subs	r4, #4
 80106a0:	6023      	str	r3, [r4, #0]
 80106a2:	220f      	movs	r2, #15
 80106a4:	6823      	ldr	r3, [r4, #0]
 80106a6:	4010      	ands	r0, r2
 80106a8:	011b      	lsls	r3, r3, #4
 80106aa:	4318      	orrs	r0, r3
 80106ac:	6020      	str	r0, [r4, #0]
 80106ae:	e7b0      	b.n	8010612 <__hexnan+0x8a>
 80106b0:	9b06      	ldr	r3, [sp, #24]
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d0de      	beq.n	8010674 <__hexnan+0xec>
 80106b6:	2120      	movs	r1, #32
 80106b8:	9a06      	ldr	r2, [sp, #24]
 80106ba:	9b02      	ldr	r3, [sp, #8]
 80106bc:	1a89      	subs	r1, r1, r2
 80106be:	2201      	movs	r2, #1
 80106c0:	4252      	negs	r2, r2
 80106c2:	40ca      	lsrs	r2, r1
 80106c4:	3b04      	subs	r3, #4
 80106c6:	6819      	ldr	r1, [r3, #0]
 80106c8:	400a      	ands	r2, r1
 80106ca:	601a      	str	r2, [r3, #0]
 80106cc:	e7d2      	b.n	8010674 <__hexnan+0xec>
 80106ce:	3e04      	subs	r6, #4
 80106d0:	e7d0      	b.n	8010674 <__hexnan+0xec>
 80106d2:	2004      	movs	r0, #4
 80106d4:	b00b      	add	sp, #44	; 0x2c
 80106d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080106d8 <__ascii_mbtowc>:
 80106d8:	b082      	sub	sp, #8
 80106da:	2900      	cmp	r1, #0
 80106dc:	d100      	bne.n	80106e0 <__ascii_mbtowc+0x8>
 80106de:	a901      	add	r1, sp, #4
 80106e0:	1e10      	subs	r0, r2, #0
 80106e2:	d006      	beq.n	80106f2 <__ascii_mbtowc+0x1a>
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d006      	beq.n	80106f6 <__ascii_mbtowc+0x1e>
 80106e8:	7813      	ldrb	r3, [r2, #0]
 80106ea:	600b      	str	r3, [r1, #0]
 80106ec:	7810      	ldrb	r0, [r2, #0]
 80106ee:	1e43      	subs	r3, r0, #1
 80106f0:	4198      	sbcs	r0, r3
 80106f2:	b002      	add	sp, #8
 80106f4:	4770      	bx	lr
 80106f6:	2002      	movs	r0, #2
 80106f8:	4240      	negs	r0, r0
 80106fa:	e7fa      	b.n	80106f2 <__ascii_mbtowc+0x1a>

080106fc <_Balloc>:
 80106fc:	b570      	push	{r4, r5, r6, lr}
 80106fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010700:	0006      	movs	r6, r0
 8010702:	000c      	movs	r4, r1
 8010704:	2d00      	cmp	r5, #0
 8010706:	d10e      	bne.n	8010726 <_Balloc+0x2a>
 8010708:	2010      	movs	r0, #16
 801070a:	f001 ffcb 	bl	80126a4 <malloc>
 801070e:	1e02      	subs	r2, r0, #0
 8010710:	6270      	str	r0, [r6, #36]	; 0x24
 8010712:	d104      	bne.n	801071e <_Balloc+0x22>
 8010714:	2166      	movs	r1, #102	; 0x66
 8010716:	4b19      	ldr	r3, [pc, #100]	; (801077c <_Balloc+0x80>)
 8010718:	4819      	ldr	r0, [pc, #100]	; (8010780 <_Balloc+0x84>)
 801071a:	f001 f8ef 	bl	80118fc <__assert_func>
 801071e:	6045      	str	r5, [r0, #4]
 8010720:	6085      	str	r5, [r0, #8]
 8010722:	6005      	str	r5, [r0, #0]
 8010724:	60c5      	str	r5, [r0, #12]
 8010726:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8010728:	68eb      	ldr	r3, [r5, #12]
 801072a:	2b00      	cmp	r3, #0
 801072c:	d013      	beq.n	8010756 <_Balloc+0x5a>
 801072e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8010730:	00a2      	lsls	r2, r4, #2
 8010732:	68db      	ldr	r3, [r3, #12]
 8010734:	189b      	adds	r3, r3, r2
 8010736:	6818      	ldr	r0, [r3, #0]
 8010738:	2800      	cmp	r0, #0
 801073a:	d118      	bne.n	801076e <_Balloc+0x72>
 801073c:	2101      	movs	r1, #1
 801073e:	000d      	movs	r5, r1
 8010740:	40a5      	lsls	r5, r4
 8010742:	1d6a      	adds	r2, r5, #5
 8010744:	0030      	movs	r0, r6
 8010746:	0092      	lsls	r2, r2, #2
 8010748:	f000 fcbc 	bl	80110c4 <_calloc_r>
 801074c:	2800      	cmp	r0, #0
 801074e:	d00c      	beq.n	801076a <_Balloc+0x6e>
 8010750:	6044      	str	r4, [r0, #4]
 8010752:	6085      	str	r5, [r0, #8]
 8010754:	e00d      	b.n	8010772 <_Balloc+0x76>
 8010756:	2221      	movs	r2, #33	; 0x21
 8010758:	2104      	movs	r1, #4
 801075a:	0030      	movs	r0, r6
 801075c:	f000 fcb2 	bl	80110c4 <_calloc_r>
 8010760:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8010762:	60e8      	str	r0, [r5, #12]
 8010764:	68db      	ldr	r3, [r3, #12]
 8010766:	2b00      	cmp	r3, #0
 8010768:	d1e1      	bne.n	801072e <_Balloc+0x32>
 801076a:	2000      	movs	r0, #0
 801076c:	bd70      	pop	{r4, r5, r6, pc}
 801076e:	6802      	ldr	r2, [r0, #0]
 8010770:	601a      	str	r2, [r3, #0]
 8010772:	2300      	movs	r3, #0
 8010774:	6103      	str	r3, [r0, #16]
 8010776:	60c3      	str	r3, [r0, #12]
 8010778:	e7f8      	b.n	801076c <_Balloc+0x70>
 801077a:	46c0      	nop			; (mov r8, r8)
 801077c:	08013a2c 	.word	0x08013a2c
 8010780:	08013a43 	.word	0x08013a43

08010784 <_Bfree>:
 8010784:	b570      	push	{r4, r5, r6, lr}
 8010786:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010788:	0005      	movs	r5, r0
 801078a:	000c      	movs	r4, r1
 801078c:	2e00      	cmp	r6, #0
 801078e:	d10e      	bne.n	80107ae <_Bfree+0x2a>
 8010790:	2010      	movs	r0, #16
 8010792:	f001 ff87 	bl	80126a4 <malloc>
 8010796:	1e02      	subs	r2, r0, #0
 8010798:	6268      	str	r0, [r5, #36]	; 0x24
 801079a:	d104      	bne.n	80107a6 <_Bfree+0x22>
 801079c:	218a      	movs	r1, #138	; 0x8a
 801079e:	4b09      	ldr	r3, [pc, #36]	; (80107c4 <_Bfree+0x40>)
 80107a0:	4809      	ldr	r0, [pc, #36]	; (80107c8 <_Bfree+0x44>)
 80107a2:	f001 f8ab 	bl	80118fc <__assert_func>
 80107a6:	6046      	str	r6, [r0, #4]
 80107a8:	6086      	str	r6, [r0, #8]
 80107aa:	6006      	str	r6, [r0, #0]
 80107ac:	60c6      	str	r6, [r0, #12]
 80107ae:	2c00      	cmp	r4, #0
 80107b0:	d007      	beq.n	80107c2 <_Bfree+0x3e>
 80107b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80107b4:	6862      	ldr	r2, [r4, #4]
 80107b6:	68db      	ldr	r3, [r3, #12]
 80107b8:	0092      	lsls	r2, r2, #2
 80107ba:	189b      	adds	r3, r3, r2
 80107bc:	681a      	ldr	r2, [r3, #0]
 80107be:	6022      	str	r2, [r4, #0]
 80107c0:	601c      	str	r4, [r3, #0]
 80107c2:	bd70      	pop	{r4, r5, r6, pc}
 80107c4:	08013a2c 	.word	0x08013a2c
 80107c8:	08013a43 	.word	0x08013a43

080107cc <__multadd>:
 80107cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80107ce:	000e      	movs	r6, r1
 80107d0:	9001      	str	r0, [sp, #4]
 80107d2:	000c      	movs	r4, r1
 80107d4:	001d      	movs	r5, r3
 80107d6:	2000      	movs	r0, #0
 80107d8:	690f      	ldr	r7, [r1, #16]
 80107da:	3614      	adds	r6, #20
 80107dc:	6833      	ldr	r3, [r6, #0]
 80107de:	3001      	adds	r0, #1
 80107e0:	b299      	uxth	r1, r3
 80107e2:	4351      	muls	r1, r2
 80107e4:	0c1b      	lsrs	r3, r3, #16
 80107e6:	4353      	muls	r3, r2
 80107e8:	1949      	adds	r1, r1, r5
 80107ea:	0c0d      	lsrs	r5, r1, #16
 80107ec:	195b      	adds	r3, r3, r5
 80107ee:	0c1d      	lsrs	r5, r3, #16
 80107f0:	b289      	uxth	r1, r1
 80107f2:	041b      	lsls	r3, r3, #16
 80107f4:	185b      	adds	r3, r3, r1
 80107f6:	c608      	stmia	r6!, {r3}
 80107f8:	4287      	cmp	r7, r0
 80107fa:	dcef      	bgt.n	80107dc <__multadd+0x10>
 80107fc:	2d00      	cmp	r5, #0
 80107fe:	d022      	beq.n	8010846 <__multadd+0x7a>
 8010800:	68a3      	ldr	r3, [r4, #8]
 8010802:	42bb      	cmp	r3, r7
 8010804:	dc19      	bgt.n	801083a <__multadd+0x6e>
 8010806:	6863      	ldr	r3, [r4, #4]
 8010808:	9801      	ldr	r0, [sp, #4]
 801080a:	1c59      	adds	r1, r3, #1
 801080c:	f7ff ff76 	bl	80106fc <_Balloc>
 8010810:	1e06      	subs	r6, r0, #0
 8010812:	d105      	bne.n	8010820 <__multadd+0x54>
 8010814:	0002      	movs	r2, r0
 8010816:	21b5      	movs	r1, #181	; 0xb5
 8010818:	4b0c      	ldr	r3, [pc, #48]	; (801084c <__multadd+0x80>)
 801081a:	480d      	ldr	r0, [pc, #52]	; (8010850 <__multadd+0x84>)
 801081c:	f001 f86e 	bl	80118fc <__assert_func>
 8010820:	0021      	movs	r1, r4
 8010822:	6923      	ldr	r3, [r4, #16]
 8010824:	310c      	adds	r1, #12
 8010826:	1c9a      	adds	r2, r3, #2
 8010828:	0092      	lsls	r2, r2, #2
 801082a:	300c      	adds	r0, #12
 801082c:	f7fe fafa 	bl	800ee24 <memcpy>
 8010830:	0021      	movs	r1, r4
 8010832:	9801      	ldr	r0, [sp, #4]
 8010834:	f7ff ffa6 	bl	8010784 <_Bfree>
 8010838:	0034      	movs	r4, r6
 801083a:	1d3b      	adds	r3, r7, #4
 801083c:	009b      	lsls	r3, r3, #2
 801083e:	18e3      	adds	r3, r4, r3
 8010840:	605d      	str	r5, [r3, #4]
 8010842:	1c7b      	adds	r3, r7, #1
 8010844:	6123      	str	r3, [r4, #16]
 8010846:	0020      	movs	r0, r4
 8010848:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801084a:	46c0      	nop			; (mov r8, r8)
 801084c:	080139a1 	.word	0x080139a1
 8010850:	08013a43 	.word	0x08013a43

08010854 <__s2b>:
 8010854:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010856:	0006      	movs	r6, r0
 8010858:	0018      	movs	r0, r3
 801085a:	000c      	movs	r4, r1
 801085c:	3008      	adds	r0, #8
 801085e:	2109      	movs	r1, #9
 8010860:	9301      	str	r3, [sp, #4]
 8010862:	0015      	movs	r5, r2
 8010864:	f7ef fcfc 	bl	8000260 <__divsi3>
 8010868:	2301      	movs	r3, #1
 801086a:	2100      	movs	r1, #0
 801086c:	4283      	cmp	r3, r0
 801086e:	db0a      	blt.n	8010886 <__s2b+0x32>
 8010870:	0030      	movs	r0, r6
 8010872:	f7ff ff43 	bl	80106fc <_Balloc>
 8010876:	1e01      	subs	r1, r0, #0
 8010878:	d108      	bne.n	801088c <__s2b+0x38>
 801087a:	0002      	movs	r2, r0
 801087c:	4b19      	ldr	r3, [pc, #100]	; (80108e4 <__s2b+0x90>)
 801087e:	481a      	ldr	r0, [pc, #104]	; (80108e8 <__s2b+0x94>)
 8010880:	31ce      	adds	r1, #206	; 0xce
 8010882:	f001 f83b 	bl	80118fc <__assert_func>
 8010886:	005b      	lsls	r3, r3, #1
 8010888:	3101      	adds	r1, #1
 801088a:	e7ef      	b.n	801086c <__s2b+0x18>
 801088c:	9b08      	ldr	r3, [sp, #32]
 801088e:	6143      	str	r3, [r0, #20]
 8010890:	2301      	movs	r3, #1
 8010892:	6103      	str	r3, [r0, #16]
 8010894:	2d09      	cmp	r5, #9
 8010896:	dd18      	ble.n	80108ca <__s2b+0x76>
 8010898:	0023      	movs	r3, r4
 801089a:	3309      	adds	r3, #9
 801089c:	001f      	movs	r7, r3
 801089e:	9300      	str	r3, [sp, #0]
 80108a0:	1964      	adds	r4, r4, r5
 80108a2:	783b      	ldrb	r3, [r7, #0]
 80108a4:	220a      	movs	r2, #10
 80108a6:	0030      	movs	r0, r6
 80108a8:	3b30      	subs	r3, #48	; 0x30
 80108aa:	f7ff ff8f 	bl	80107cc <__multadd>
 80108ae:	3701      	adds	r7, #1
 80108b0:	0001      	movs	r1, r0
 80108b2:	42a7      	cmp	r7, r4
 80108b4:	d1f5      	bne.n	80108a2 <__s2b+0x4e>
 80108b6:	002c      	movs	r4, r5
 80108b8:	9b00      	ldr	r3, [sp, #0]
 80108ba:	3c08      	subs	r4, #8
 80108bc:	191c      	adds	r4, r3, r4
 80108be:	002f      	movs	r7, r5
 80108c0:	9b01      	ldr	r3, [sp, #4]
 80108c2:	429f      	cmp	r7, r3
 80108c4:	db04      	blt.n	80108d0 <__s2b+0x7c>
 80108c6:	0008      	movs	r0, r1
 80108c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80108ca:	2509      	movs	r5, #9
 80108cc:	340a      	adds	r4, #10
 80108ce:	e7f6      	b.n	80108be <__s2b+0x6a>
 80108d0:	1b63      	subs	r3, r4, r5
 80108d2:	5ddb      	ldrb	r3, [r3, r7]
 80108d4:	220a      	movs	r2, #10
 80108d6:	0030      	movs	r0, r6
 80108d8:	3b30      	subs	r3, #48	; 0x30
 80108da:	f7ff ff77 	bl	80107cc <__multadd>
 80108de:	3701      	adds	r7, #1
 80108e0:	0001      	movs	r1, r0
 80108e2:	e7ed      	b.n	80108c0 <__s2b+0x6c>
 80108e4:	080139a1 	.word	0x080139a1
 80108e8:	08013a43 	.word	0x08013a43

080108ec <__hi0bits>:
 80108ec:	0003      	movs	r3, r0
 80108ee:	0c02      	lsrs	r2, r0, #16
 80108f0:	2000      	movs	r0, #0
 80108f2:	4282      	cmp	r2, r0
 80108f4:	d101      	bne.n	80108fa <__hi0bits+0xe>
 80108f6:	041b      	lsls	r3, r3, #16
 80108f8:	3010      	adds	r0, #16
 80108fa:	0e1a      	lsrs	r2, r3, #24
 80108fc:	d101      	bne.n	8010902 <__hi0bits+0x16>
 80108fe:	3008      	adds	r0, #8
 8010900:	021b      	lsls	r3, r3, #8
 8010902:	0f1a      	lsrs	r2, r3, #28
 8010904:	d101      	bne.n	801090a <__hi0bits+0x1e>
 8010906:	3004      	adds	r0, #4
 8010908:	011b      	lsls	r3, r3, #4
 801090a:	0f9a      	lsrs	r2, r3, #30
 801090c:	d101      	bne.n	8010912 <__hi0bits+0x26>
 801090e:	3002      	adds	r0, #2
 8010910:	009b      	lsls	r3, r3, #2
 8010912:	2b00      	cmp	r3, #0
 8010914:	db03      	blt.n	801091e <__hi0bits+0x32>
 8010916:	3001      	adds	r0, #1
 8010918:	005b      	lsls	r3, r3, #1
 801091a:	d400      	bmi.n	801091e <__hi0bits+0x32>
 801091c:	2020      	movs	r0, #32
 801091e:	4770      	bx	lr

08010920 <__lo0bits>:
 8010920:	6803      	ldr	r3, [r0, #0]
 8010922:	0002      	movs	r2, r0
 8010924:	2107      	movs	r1, #7
 8010926:	0018      	movs	r0, r3
 8010928:	4008      	ands	r0, r1
 801092a:	420b      	tst	r3, r1
 801092c:	d00d      	beq.n	801094a <__lo0bits+0x2a>
 801092e:	3906      	subs	r1, #6
 8010930:	2000      	movs	r0, #0
 8010932:	420b      	tst	r3, r1
 8010934:	d105      	bne.n	8010942 <__lo0bits+0x22>
 8010936:	3002      	adds	r0, #2
 8010938:	4203      	tst	r3, r0
 801093a:	d003      	beq.n	8010944 <__lo0bits+0x24>
 801093c:	40cb      	lsrs	r3, r1
 801093e:	0008      	movs	r0, r1
 8010940:	6013      	str	r3, [r2, #0]
 8010942:	4770      	bx	lr
 8010944:	089b      	lsrs	r3, r3, #2
 8010946:	6013      	str	r3, [r2, #0]
 8010948:	e7fb      	b.n	8010942 <__lo0bits+0x22>
 801094a:	b299      	uxth	r1, r3
 801094c:	2900      	cmp	r1, #0
 801094e:	d101      	bne.n	8010954 <__lo0bits+0x34>
 8010950:	2010      	movs	r0, #16
 8010952:	0c1b      	lsrs	r3, r3, #16
 8010954:	b2d9      	uxtb	r1, r3
 8010956:	2900      	cmp	r1, #0
 8010958:	d101      	bne.n	801095e <__lo0bits+0x3e>
 801095a:	3008      	adds	r0, #8
 801095c:	0a1b      	lsrs	r3, r3, #8
 801095e:	0719      	lsls	r1, r3, #28
 8010960:	d101      	bne.n	8010966 <__lo0bits+0x46>
 8010962:	3004      	adds	r0, #4
 8010964:	091b      	lsrs	r3, r3, #4
 8010966:	0799      	lsls	r1, r3, #30
 8010968:	d101      	bne.n	801096e <__lo0bits+0x4e>
 801096a:	3002      	adds	r0, #2
 801096c:	089b      	lsrs	r3, r3, #2
 801096e:	07d9      	lsls	r1, r3, #31
 8010970:	d4e9      	bmi.n	8010946 <__lo0bits+0x26>
 8010972:	3001      	adds	r0, #1
 8010974:	085b      	lsrs	r3, r3, #1
 8010976:	d1e6      	bne.n	8010946 <__lo0bits+0x26>
 8010978:	2020      	movs	r0, #32
 801097a:	e7e2      	b.n	8010942 <__lo0bits+0x22>

0801097c <__i2b>:
 801097c:	b510      	push	{r4, lr}
 801097e:	000c      	movs	r4, r1
 8010980:	2101      	movs	r1, #1
 8010982:	f7ff febb 	bl	80106fc <_Balloc>
 8010986:	2800      	cmp	r0, #0
 8010988:	d106      	bne.n	8010998 <__i2b+0x1c>
 801098a:	21a0      	movs	r1, #160	; 0xa0
 801098c:	0002      	movs	r2, r0
 801098e:	4b04      	ldr	r3, [pc, #16]	; (80109a0 <__i2b+0x24>)
 8010990:	4804      	ldr	r0, [pc, #16]	; (80109a4 <__i2b+0x28>)
 8010992:	0049      	lsls	r1, r1, #1
 8010994:	f000 ffb2 	bl	80118fc <__assert_func>
 8010998:	2301      	movs	r3, #1
 801099a:	6144      	str	r4, [r0, #20]
 801099c:	6103      	str	r3, [r0, #16]
 801099e:	bd10      	pop	{r4, pc}
 80109a0:	080139a1 	.word	0x080139a1
 80109a4:	08013a43 	.word	0x08013a43

080109a8 <__multiply>:
 80109a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80109aa:	690b      	ldr	r3, [r1, #16]
 80109ac:	0014      	movs	r4, r2
 80109ae:	6912      	ldr	r2, [r2, #16]
 80109b0:	000d      	movs	r5, r1
 80109b2:	b089      	sub	sp, #36	; 0x24
 80109b4:	4293      	cmp	r3, r2
 80109b6:	da01      	bge.n	80109bc <__multiply+0x14>
 80109b8:	0025      	movs	r5, r4
 80109ba:	000c      	movs	r4, r1
 80109bc:	692f      	ldr	r7, [r5, #16]
 80109be:	6926      	ldr	r6, [r4, #16]
 80109c0:	6869      	ldr	r1, [r5, #4]
 80109c2:	19bb      	adds	r3, r7, r6
 80109c4:	9302      	str	r3, [sp, #8]
 80109c6:	68ab      	ldr	r3, [r5, #8]
 80109c8:	19ba      	adds	r2, r7, r6
 80109ca:	4293      	cmp	r3, r2
 80109cc:	da00      	bge.n	80109d0 <__multiply+0x28>
 80109ce:	3101      	adds	r1, #1
 80109d0:	f7ff fe94 	bl	80106fc <_Balloc>
 80109d4:	9001      	str	r0, [sp, #4]
 80109d6:	2800      	cmp	r0, #0
 80109d8:	d106      	bne.n	80109e8 <__multiply+0x40>
 80109da:	215e      	movs	r1, #94	; 0x5e
 80109dc:	0002      	movs	r2, r0
 80109de:	4b48      	ldr	r3, [pc, #288]	; (8010b00 <__multiply+0x158>)
 80109e0:	4848      	ldr	r0, [pc, #288]	; (8010b04 <__multiply+0x15c>)
 80109e2:	31ff      	adds	r1, #255	; 0xff
 80109e4:	f000 ff8a 	bl	80118fc <__assert_func>
 80109e8:	9b01      	ldr	r3, [sp, #4]
 80109ea:	2200      	movs	r2, #0
 80109ec:	3314      	adds	r3, #20
 80109ee:	469c      	mov	ip, r3
 80109f0:	19bb      	adds	r3, r7, r6
 80109f2:	009b      	lsls	r3, r3, #2
 80109f4:	4463      	add	r3, ip
 80109f6:	9303      	str	r3, [sp, #12]
 80109f8:	4663      	mov	r3, ip
 80109fa:	9903      	ldr	r1, [sp, #12]
 80109fc:	428b      	cmp	r3, r1
 80109fe:	d32c      	bcc.n	8010a5a <__multiply+0xb2>
 8010a00:	002b      	movs	r3, r5
 8010a02:	0022      	movs	r2, r4
 8010a04:	3314      	adds	r3, #20
 8010a06:	00bf      	lsls	r7, r7, #2
 8010a08:	3214      	adds	r2, #20
 8010a0a:	9306      	str	r3, [sp, #24]
 8010a0c:	00b6      	lsls	r6, r6, #2
 8010a0e:	19db      	adds	r3, r3, r7
 8010a10:	9304      	str	r3, [sp, #16]
 8010a12:	1993      	adds	r3, r2, r6
 8010a14:	9307      	str	r3, [sp, #28]
 8010a16:	2304      	movs	r3, #4
 8010a18:	9305      	str	r3, [sp, #20]
 8010a1a:	002b      	movs	r3, r5
 8010a1c:	9904      	ldr	r1, [sp, #16]
 8010a1e:	3315      	adds	r3, #21
 8010a20:	9200      	str	r2, [sp, #0]
 8010a22:	4299      	cmp	r1, r3
 8010a24:	d305      	bcc.n	8010a32 <__multiply+0x8a>
 8010a26:	1b4b      	subs	r3, r1, r5
 8010a28:	3b15      	subs	r3, #21
 8010a2a:	089b      	lsrs	r3, r3, #2
 8010a2c:	3301      	adds	r3, #1
 8010a2e:	009b      	lsls	r3, r3, #2
 8010a30:	9305      	str	r3, [sp, #20]
 8010a32:	9b07      	ldr	r3, [sp, #28]
 8010a34:	9a00      	ldr	r2, [sp, #0]
 8010a36:	429a      	cmp	r2, r3
 8010a38:	d311      	bcc.n	8010a5e <__multiply+0xb6>
 8010a3a:	9b02      	ldr	r3, [sp, #8]
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	dd06      	ble.n	8010a4e <__multiply+0xa6>
 8010a40:	9b03      	ldr	r3, [sp, #12]
 8010a42:	3b04      	subs	r3, #4
 8010a44:	9303      	str	r3, [sp, #12]
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	9300      	str	r3, [sp, #0]
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d053      	beq.n	8010af6 <__multiply+0x14e>
 8010a4e:	9b01      	ldr	r3, [sp, #4]
 8010a50:	9a02      	ldr	r2, [sp, #8]
 8010a52:	0018      	movs	r0, r3
 8010a54:	611a      	str	r2, [r3, #16]
 8010a56:	b009      	add	sp, #36	; 0x24
 8010a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a5a:	c304      	stmia	r3!, {r2}
 8010a5c:	e7cd      	b.n	80109fa <__multiply+0x52>
 8010a5e:	9b00      	ldr	r3, [sp, #0]
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	b298      	uxth	r0, r3
 8010a64:	2800      	cmp	r0, #0
 8010a66:	d01b      	beq.n	8010aa0 <__multiply+0xf8>
 8010a68:	4667      	mov	r7, ip
 8010a6a:	2400      	movs	r4, #0
 8010a6c:	9e06      	ldr	r6, [sp, #24]
 8010a6e:	ce02      	ldmia	r6!, {r1}
 8010a70:	683a      	ldr	r2, [r7, #0]
 8010a72:	b28b      	uxth	r3, r1
 8010a74:	4343      	muls	r3, r0
 8010a76:	b292      	uxth	r2, r2
 8010a78:	189b      	adds	r3, r3, r2
 8010a7a:	191b      	adds	r3, r3, r4
 8010a7c:	0c0c      	lsrs	r4, r1, #16
 8010a7e:	4344      	muls	r4, r0
 8010a80:	683a      	ldr	r2, [r7, #0]
 8010a82:	0c11      	lsrs	r1, r2, #16
 8010a84:	1861      	adds	r1, r4, r1
 8010a86:	0c1c      	lsrs	r4, r3, #16
 8010a88:	1909      	adds	r1, r1, r4
 8010a8a:	0c0c      	lsrs	r4, r1, #16
 8010a8c:	b29b      	uxth	r3, r3
 8010a8e:	0409      	lsls	r1, r1, #16
 8010a90:	430b      	orrs	r3, r1
 8010a92:	c708      	stmia	r7!, {r3}
 8010a94:	9b04      	ldr	r3, [sp, #16]
 8010a96:	42b3      	cmp	r3, r6
 8010a98:	d8e9      	bhi.n	8010a6e <__multiply+0xc6>
 8010a9a:	4663      	mov	r3, ip
 8010a9c:	9a05      	ldr	r2, [sp, #20]
 8010a9e:	509c      	str	r4, [r3, r2]
 8010aa0:	9b00      	ldr	r3, [sp, #0]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	0c1e      	lsrs	r6, r3, #16
 8010aa6:	d020      	beq.n	8010aea <__multiply+0x142>
 8010aa8:	4663      	mov	r3, ip
 8010aaa:	002c      	movs	r4, r5
 8010aac:	4660      	mov	r0, ip
 8010aae:	2700      	movs	r7, #0
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	3414      	adds	r4, #20
 8010ab4:	6822      	ldr	r2, [r4, #0]
 8010ab6:	b29b      	uxth	r3, r3
 8010ab8:	b291      	uxth	r1, r2
 8010aba:	4371      	muls	r1, r6
 8010abc:	6802      	ldr	r2, [r0, #0]
 8010abe:	0c12      	lsrs	r2, r2, #16
 8010ac0:	1889      	adds	r1, r1, r2
 8010ac2:	19cf      	adds	r7, r1, r7
 8010ac4:	0439      	lsls	r1, r7, #16
 8010ac6:	430b      	orrs	r3, r1
 8010ac8:	6003      	str	r3, [r0, #0]
 8010aca:	cc02      	ldmia	r4!, {r1}
 8010acc:	6843      	ldr	r3, [r0, #4]
 8010ace:	0c09      	lsrs	r1, r1, #16
 8010ad0:	4371      	muls	r1, r6
 8010ad2:	b29b      	uxth	r3, r3
 8010ad4:	0c3f      	lsrs	r7, r7, #16
 8010ad6:	18cb      	adds	r3, r1, r3
 8010ad8:	9a04      	ldr	r2, [sp, #16]
 8010ada:	19db      	adds	r3, r3, r7
 8010adc:	0c1f      	lsrs	r7, r3, #16
 8010ade:	3004      	adds	r0, #4
 8010ae0:	42a2      	cmp	r2, r4
 8010ae2:	d8e7      	bhi.n	8010ab4 <__multiply+0x10c>
 8010ae4:	4662      	mov	r2, ip
 8010ae6:	9905      	ldr	r1, [sp, #20]
 8010ae8:	5053      	str	r3, [r2, r1]
 8010aea:	9b00      	ldr	r3, [sp, #0]
 8010aec:	3304      	adds	r3, #4
 8010aee:	9300      	str	r3, [sp, #0]
 8010af0:	2304      	movs	r3, #4
 8010af2:	449c      	add	ip, r3
 8010af4:	e79d      	b.n	8010a32 <__multiply+0x8a>
 8010af6:	9b02      	ldr	r3, [sp, #8]
 8010af8:	3b01      	subs	r3, #1
 8010afa:	9302      	str	r3, [sp, #8]
 8010afc:	e79d      	b.n	8010a3a <__multiply+0x92>
 8010afe:	46c0      	nop			; (mov r8, r8)
 8010b00:	080139a1 	.word	0x080139a1
 8010b04:	08013a43 	.word	0x08013a43

08010b08 <__pow5mult>:
 8010b08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010b0a:	2303      	movs	r3, #3
 8010b0c:	0015      	movs	r5, r2
 8010b0e:	0007      	movs	r7, r0
 8010b10:	000e      	movs	r6, r1
 8010b12:	401a      	ands	r2, r3
 8010b14:	421d      	tst	r5, r3
 8010b16:	d008      	beq.n	8010b2a <__pow5mult+0x22>
 8010b18:	4925      	ldr	r1, [pc, #148]	; (8010bb0 <__pow5mult+0xa8>)
 8010b1a:	3a01      	subs	r2, #1
 8010b1c:	0092      	lsls	r2, r2, #2
 8010b1e:	5852      	ldr	r2, [r2, r1]
 8010b20:	2300      	movs	r3, #0
 8010b22:	0031      	movs	r1, r6
 8010b24:	f7ff fe52 	bl	80107cc <__multadd>
 8010b28:	0006      	movs	r6, r0
 8010b2a:	10ad      	asrs	r5, r5, #2
 8010b2c:	d03d      	beq.n	8010baa <__pow5mult+0xa2>
 8010b2e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8010b30:	2c00      	cmp	r4, #0
 8010b32:	d10f      	bne.n	8010b54 <__pow5mult+0x4c>
 8010b34:	2010      	movs	r0, #16
 8010b36:	f001 fdb5 	bl	80126a4 <malloc>
 8010b3a:	1e02      	subs	r2, r0, #0
 8010b3c:	6278      	str	r0, [r7, #36]	; 0x24
 8010b3e:	d105      	bne.n	8010b4c <__pow5mult+0x44>
 8010b40:	21d7      	movs	r1, #215	; 0xd7
 8010b42:	4b1c      	ldr	r3, [pc, #112]	; (8010bb4 <__pow5mult+0xac>)
 8010b44:	481c      	ldr	r0, [pc, #112]	; (8010bb8 <__pow5mult+0xb0>)
 8010b46:	0049      	lsls	r1, r1, #1
 8010b48:	f000 fed8 	bl	80118fc <__assert_func>
 8010b4c:	6044      	str	r4, [r0, #4]
 8010b4e:	6084      	str	r4, [r0, #8]
 8010b50:	6004      	str	r4, [r0, #0]
 8010b52:	60c4      	str	r4, [r0, #12]
 8010b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b56:	689c      	ldr	r4, [r3, #8]
 8010b58:	9301      	str	r3, [sp, #4]
 8010b5a:	2c00      	cmp	r4, #0
 8010b5c:	d108      	bne.n	8010b70 <__pow5mult+0x68>
 8010b5e:	0038      	movs	r0, r7
 8010b60:	4916      	ldr	r1, [pc, #88]	; (8010bbc <__pow5mult+0xb4>)
 8010b62:	f7ff ff0b 	bl	801097c <__i2b>
 8010b66:	9b01      	ldr	r3, [sp, #4]
 8010b68:	0004      	movs	r4, r0
 8010b6a:	6098      	str	r0, [r3, #8]
 8010b6c:	2300      	movs	r3, #0
 8010b6e:	6003      	str	r3, [r0, #0]
 8010b70:	2301      	movs	r3, #1
 8010b72:	421d      	tst	r5, r3
 8010b74:	d00a      	beq.n	8010b8c <__pow5mult+0x84>
 8010b76:	0031      	movs	r1, r6
 8010b78:	0022      	movs	r2, r4
 8010b7a:	0038      	movs	r0, r7
 8010b7c:	f7ff ff14 	bl	80109a8 <__multiply>
 8010b80:	0031      	movs	r1, r6
 8010b82:	9001      	str	r0, [sp, #4]
 8010b84:	0038      	movs	r0, r7
 8010b86:	f7ff fdfd 	bl	8010784 <_Bfree>
 8010b8a:	9e01      	ldr	r6, [sp, #4]
 8010b8c:	106d      	asrs	r5, r5, #1
 8010b8e:	d00c      	beq.n	8010baa <__pow5mult+0xa2>
 8010b90:	6820      	ldr	r0, [r4, #0]
 8010b92:	2800      	cmp	r0, #0
 8010b94:	d107      	bne.n	8010ba6 <__pow5mult+0x9e>
 8010b96:	0022      	movs	r2, r4
 8010b98:	0021      	movs	r1, r4
 8010b9a:	0038      	movs	r0, r7
 8010b9c:	f7ff ff04 	bl	80109a8 <__multiply>
 8010ba0:	2300      	movs	r3, #0
 8010ba2:	6020      	str	r0, [r4, #0]
 8010ba4:	6003      	str	r3, [r0, #0]
 8010ba6:	0004      	movs	r4, r0
 8010ba8:	e7e2      	b.n	8010b70 <__pow5mult+0x68>
 8010baa:	0030      	movs	r0, r6
 8010bac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010bae:	46c0      	nop			; (mov r8, r8)
 8010bb0:	08013b90 	.word	0x08013b90
 8010bb4:	08013a2c 	.word	0x08013a2c
 8010bb8:	08013a43 	.word	0x08013a43
 8010bbc:	00000271 	.word	0x00000271

08010bc0 <__lshift>:
 8010bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010bc2:	000c      	movs	r4, r1
 8010bc4:	0017      	movs	r7, r2
 8010bc6:	6923      	ldr	r3, [r4, #16]
 8010bc8:	1155      	asrs	r5, r2, #5
 8010bca:	b087      	sub	sp, #28
 8010bcc:	18eb      	adds	r3, r5, r3
 8010bce:	9302      	str	r3, [sp, #8]
 8010bd0:	3301      	adds	r3, #1
 8010bd2:	9301      	str	r3, [sp, #4]
 8010bd4:	6849      	ldr	r1, [r1, #4]
 8010bd6:	68a3      	ldr	r3, [r4, #8]
 8010bd8:	9004      	str	r0, [sp, #16]
 8010bda:	9a01      	ldr	r2, [sp, #4]
 8010bdc:	4293      	cmp	r3, r2
 8010bde:	db10      	blt.n	8010c02 <__lshift+0x42>
 8010be0:	9804      	ldr	r0, [sp, #16]
 8010be2:	f7ff fd8b 	bl	80106fc <_Balloc>
 8010be6:	2300      	movs	r3, #0
 8010be8:	0002      	movs	r2, r0
 8010bea:	0006      	movs	r6, r0
 8010bec:	0019      	movs	r1, r3
 8010bee:	3214      	adds	r2, #20
 8010bf0:	4298      	cmp	r0, r3
 8010bf2:	d10c      	bne.n	8010c0e <__lshift+0x4e>
 8010bf4:	21da      	movs	r1, #218	; 0xda
 8010bf6:	0002      	movs	r2, r0
 8010bf8:	4b26      	ldr	r3, [pc, #152]	; (8010c94 <__lshift+0xd4>)
 8010bfa:	4827      	ldr	r0, [pc, #156]	; (8010c98 <__lshift+0xd8>)
 8010bfc:	31ff      	adds	r1, #255	; 0xff
 8010bfe:	f000 fe7d 	bl	80118fc <__assert_func>
 8010c02:	3101      	adds	r1, #1
 8010c04:	005b      	lsls	r3, r3, #1
 8010c06:	e7e8      	b.n	8010bda <__lshift+0x1a>
 8010c08:	0098      	lsls	r0, r3, #2
 8010c0a:	5011      	str	r1, [r2, r0]
 8010c0c:	3301      	adds	r3, #1
 8010c0e:	42ab      	cmp	r3, r5
 8010c10:	dbfa      	blt.n	8010c08 <__lshift+0x48>
 8010c12:	43eb      	mvns	r3, r5
 8010c14:	17db      	asrs	r3, r3, #31
 8010c16:	401d      	ands	r5, r3
 8010c18:	211f      	movs	r1, #31
 8010c1a:	0023      	movs	r3, r4
 8010c1c:	0038      	movs	r0, r7
 8010c1e:	00ad      	lsls	r5, r5, #2
 8010c20:	1955      	adds	r5, r2, r5
 8010c22:	6922      	ldr	r2, [r4, #16]
 8010c24:	3314      	adds	r3, #20
 8010c26:	0092      	lsls	r2, r2, #2
 8010c28:	4008      	ands	r0, r1
 8010c2a:	4684      	mov	ip, r0
 8010c2c:	189a      	adds	r2, r3, r2
 8010c2e:	420f      	tst	r7, r1
 8010c30:	d02a      	beq.n	8010c88 <__lshift+0xc8>
 8010c32:	3101      	adds	r1, #1
 8010c34:	1a09      	subs	r1, r1, r0
 8010c36:	9105      	str	r1, [sp, #20]
 8010c38:	2100      	movs	r1, #0
 8010c3a:	9503      	str	r5, [sp, #12]
 8010c3c:	4667      	mov	r7, ip
 8010c3e:	6818      	ldr	r0, [r3, #0]
 8010c40:	40b8      	lsls	r0, r7
 8010c42:	4301      	orrs	r1, r0
 8010c44:	9803      	ldr	r0, [sp, #12]
 8010c46:	c002      	stmia	r0!, {r1}
 8010c48:	cb02      	ldmia	r3!, {r1}
 8010c4a:	9003      	str	r0, [sp, #12]
 8010c4c:	9805      	ldr	r0, [sp, #20]
 8010c4e:	40c1      	lsrs	r1, r0
 8010c50:	429a      	cmp	r2, r3
 8010c52:	d8f3      	bhi.n	8010c3c <__lshift+0x7c>
 8010c54:	0020      	movs	r0, r4
 8010c56:	3015      	adds	r0, #21
 8010c58:	2304      	movs	r3, #4
 8010c5a:	4282      	cmp	r2, r0
 8010c5c:	d304      	bcc.n	8010c68 <__lshift+0xa8>
 8010c5e:	1b13      	subs	r3, r2, r4
 8010c60:	3b15      	subs	r3, #21
 8010c62:	089b      	lsrs	r3, r3, #2
 8010c64:	3301      	adds	r3, #1
 8010c66:	009b      	lsls	r3, r3, #2
 8010c68:	50e9      	str	r1, [r5, r3]
 8010c6a:	2900      	cmp	r1, #0
 8010c6c:	d002      	beq.n	8010c74 <__lshift+0xb4>
 8010c6e:	9b02      	ldr	r3, [sp, #8]
 8010c70:	3302      	adds	r3, #2
 8010c72:	9301      	str	r3, [sp, #4]
 8010c74:	9b01      	ldr	r3, [sp, #4]
 8010c76:	9804      	ldr	r0, [sp, #16]
 8010c78:	3b01      	subs	r3, #1
 8010c7a:	0021      	movs	r1, r4
 8010c7c:	6133      	str	r3, [r6, #16]
 8010c7e:	f7ff fd81 	bl	8010784 <_Bfree>
 8010c82:	0030      	movs	r0, r6
 8010c84:	b007      	add	sp, #28
 8010c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c88:	cb02      	ldmia	r3!, {r1}
 8010c8a:	c502      	stmia	r5!, {r1}
 8010c8c:	429a      	cmp	r2, r3
 8010c8e:	d8fb      	bhi.n	8010c88 <__lshift+0xc8>
 8010c90:	e7f0      	b.n	8010c74 <__lshift+0xb4>
 8010c92:	46c0      	nop			; (mov r8, r8)
 8010c94:	080139a1 	.word	0x080139a1
 8010c98:	08013a43 	.word	0x08013a43

08010c9c <__mcmp>:
 8010c9c:	6902      	ldr	r2, [r0, #16]
 8010c9e:	690b      	ldr	r3, [r1, #16]
 8010ca0:	b530      	push	{r4, r5, lr}
 8010ca2:	0004      	movs	r4, r0
 8010ca4:	1ad0      	subs	r0, r2, r3
 8010ca6:	429a      	cmp	r2, r3
 8010ca8:	d10d      	bne.n	8010cc6 <__mcmp+0x2a>
 8010caa:	009b      	lsls	r3, r3, #2
 8010cac:	3414      	adds	r4, #20
 8010cae:	3114      	adds	r1, #20
 8010cb0:	18e2      	adds	r2, r4, r3
 8010cb2:	18c9      	adds	r1, r1, r3
 8010cb4:	3a04      	subs	r2, #4
 8010cb6:	3904      	subs	r1, #4
 8010cb8:	6815      	ldr	r5, [r2, #0]
 8010cba:	680b      	ldr	r3, [r1, #0]
 8010cbc:	429d      	cmp	r5, r3
 8010cbe:	d003      	beq.n	8010cc8 <__mcmp+0x2c>
 8010cc0:	2001      	movs	r0, #1
 8010cc2:	429d      	cmp	r5, r3
 8010cc4:	d303      	bcc.n	8010cce <__mcmp+0x32>
 8010cc6:	bd30      	pop	{r4, r5, pc}
 8010cc8:	4294      	cmp	r4, r2
 8010cca:	d3f3      	bcc.n	8010cb4 <__mcmp+0x18>
 8010ccc:	e7fb      	b.n	8010cc6 <__mcmp+0x2a>
 8010cce:	4240      	negs	r0, r0
 8010cd0:	e7f9      	b.n	8010cc6 <__mcmp+0x2a>
	...

08010cd4 <__mdiff>:
 8010cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010cd6:	000e      	movs	r6, r1
 8010cd8:	0007      	movs	r7, r0
 8010cda:	0011      	movs	r1, r2
 8010cdc:	0030      	movs	r0, r6
 8010cde:	b087      	sub	sp, #28
 8010ce0:	0014      	movs	r4, r2
 8010ce2:	f7ff ffdb 	bl	8010c9c <__mcmp>
 8010ce6:	1e05      	subs	r5, r0, #0
 8010ce8:	d110      	bne.n	8010d0c <__mdiff+0x38>
 8010cea:	0001      	movs	r1, r0
 8010cec:	0038      	movs	r0, r7
 8010cee:	f7ff fd05 	bl	80106fc <_Balloc>
 8010cf2:	1e02      	subs	r2, r0, #0
 8010cf4:	d104      	bne.n	8010d00 <__mdiff+0x2c>
 8010cf6:	4b40      	ldr	r3, [pc, #256]	; (8010df8 <__mdiff+0x124>)
 8010cf8:	4940      	ldr	r1, [pc, #256]	; (8010dfc <__mdiff+0x128>)
 8010cfa:	4841      	ldr	r0, [pc, #260]	; (8010e00 <__mdiff+0x12c>)
 8010cfc:	f000 fdfe 	bl	80118fc <__assert_func>
 8010d00:	2301      	movs	r3, #1
 8010d02:	6145      	str	r5, [r0, #20]
 8010d04:	6103      	str	r3, [r0, #16]
 8010d06:	0010      	movs	r0, r2
 8010d08:	b007      	add	sp, #28
 8010d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d0c:	2301      	movs	r3, #1
 8010d0e:	9301      	str	r3, [sp, #4]
 8010d10:	2800      	cmp	r0, #0
 8010d12:	db04      	blt.n	8010d1e <__mdiff+0x4a>
 8010d14:	0023      	movs	r3, r4
 8010d16:	0034      	movs	r4, r6
 8010d18:	001e      	movs	r6, r3
 8010d1a:	2300      	movs	r3, #0
 8010d1c:	9301      	str	r3, [sp, #4]
 8010d1e:	0038      	movs	r0, r7
 8010d20:	6861      	ldr	r1, [r4, #4]
 8010d22:	f7ff fceb 	bl	80106fc <_Balloc>
 8010d26:	1e02      	subs	r2, r0, #0
 8010d28:	d103      	bne.n	8010d32 <__mdiff+0x5e>
 8010d2a:	2190      	movs	r1, #144	; 0x90
 8010d2c:	4b32      	ldr	r3, [pc, #200]	; (8010df8 <__mdiff+0x124>)
 8010d2e:	0089      	lsls	r1, r1, #2
 8010d30:	e7e3      	b.n	8010cfa <__mdiff+0x26>
 8010d32:	9b01      	ldr	r3, [sp, #4]
 8010d34:	2700      	movs	r7, #0
 8010d36:	60c3      	str	r3, [r0, #12]
 8010d38:	6920      	ldr	r0, [r4, #16]
 8010d3a:	3414      	adds	r4, #20
 8010d3c:	9401      	str	r4, [sp, #4]
 8010d3e:	9b01      	ldr	r3, [sp, #4]
 8010d40:	0084      	lsls	r4, r0, #2
 8010d42:	191b      	adds	r3, r3, r4
 8010d44:	0034      	movs	r4, r6
 8010d46:	9302      	str	r3, [sp, #8]
 8010d48:	6933      	ldr	r3, [r6, #16]
 8010d4a:	3414      	adds	r4, #20
 8010d4c:	0099      	lsls	r1, r3, #2
 8010d4e:	1863      	adds	r3, r4, r1
 8010d50:	9303      	str	r3, [sp, #12]
 8010d52:	0013      	movs	r3, r2
 8010d54:	3314      	adds	r3, #20
 8010d56:	469c      	mov	ip, r3
 8010d58:	9305      	str	r3, [sp, #20]
 8010d5a:	9b01      	ldr	r3, [sp, #4]
 8010d5c:	9304      	str	r3, [sp, #16]
 8010d5e:	9b04      	ldr	r3, [sp, #16]
 8010d60:	cc02      	ldmia	r4!, {r1}
 8010d62:	cb20      	ldmia	r3!, {r5}
 8010d64:	9304      	str	r3, [sp, #16]
 8010d66:	b2ab      	uxth	r3, r5
 8010d68:	19df      	adds	r7, r3, r7
 8010d6a:	b28b      	uxth	r3, r1
 8010d6c:	1afb      	subs	r3, r7, r3
 8010d6e:	0c09      	lsrs	r1, r1, #16
 8010d70:	0c2d      	lsrs	r5, r5, #16
 8010d72:	1a6d      	subs	r5, r5, r1
 8010d74:	1419      	asrs	r1, r3, #16
 8010d76:	186d      	adds	r5, r5, r1
 8010d78:	4661      	mov	r1, ip
 8010d7a:	142f      	asrs	r7, r5, #16
 8010d7c:	b29b      	uxth	r3, r3
 8010d7e:	042d      	lsls	r5, r5, #16
 8010d80:	432b      	orrs	r3, r5
 8010d82:	c108      	stmia	r1!, {r3}
 8010d84:	9b03      	ldr	r3, [sp, #12]
 8010d86:	468c      	mov	ip, r1
 8010d88:	42a3      	cmp	r3, r4
 8010d8a:	d8e8      	bhi.n	8010d5e <__mdiff+0x8a>
 8010d8c:	0031      	movs	r1, r6
 8010d8e:	9c03      	ldr	r4, [sp, #12]
 8010d90:	3115      	adds	r1, #21
 8010d92:	2304      	movs	r3, #4
 8010d94:	428c      	cmp	r4, r1
 8010d96:	d304      	bcc.n	8010da2 <__mdiff+0xce>
 8010d98:	1ba3      	subs	r3, r4, r6
 8010d9a:	3b15      	subs	r3, #21
 8010d9c:	089b      	lsrs	r3, r3, #2
 8010d9e:	3301      	adds	r3, #1
 8010da0:	009b      	lsls	r3, r3, #2
 8010da2:	9901      	ldr	r1, [sp, #4]
 8010da4:	18cc      	adds	r4, r1, r3
 8010da6:	9905      	ldr	r1, [sp, #20]
 8010da8:	0026      	movs	r6, r4
 8010daa:	18cb      	adds	r3, r1, r3
 8010dac:	469c      	mov	ip, r3
 8010dae:	9902      	ldr	r1, [sp, #8]
 8010db0:	428e      	cmp	r6, r1
 8010db2:	d310      	bcc.n	8010dd6 <__mdiff+0x102>
 8010db4:	9e02      	ldr	r6, [sp, #8]
 8010db6:	1ee1      	subs	r1, r4, #3
 8010db8:	2500      	movs	r5, #0
 8010dba:	428e      	cmp	r6, r1
 8010dbc:	d304      	bcc.n	8010dc8 <__mdiff+0xf4>
 8010dbe:	0031      	movs	r1, r6
 8010dc0:	3103      	adds	r1, #3
 8010dc2:	1b0c      	subs	r4, r1, r4
 8010dc4:	08a4      	lsrs	r4, r4, #2
 8010dc6:	00a5      	lsls	r5, r4, #2
 8010dc8:	195b      	adds	r3, r3, r5
 8010dca:	3b04      	subs	r3, #4
 8010dcc:	6819      	ldr	r1, [r3, #0]
 8010dce:	2900      	cmp	r1, #0
 8010dd0:	d00f      	beq.n	8010df2 <__mdiff+0x11e>
 8010dd2:	6110      	str	r0, [r2, #16]
 8010dd4:	e797      	b.n	8010d06 <__mdiff+0x32>
 8010dd6:	ce02      	ldmia	r6!, {r1}
 8010dd8:	b28d      	uxth	r5, r1
 8010dda:	19ed      	adds	r5, r5, r7
 8010ddc:	0c0f      	lsrs	r7, r1, #16
 8010dde:	1429      	asrs	r1, r5, #16
 8010de0:	1879      	adds	r1, r7, r1
 8010de2:	140f      	asrs	r7, r1, #16
 8010de4:	b2ad      	uxth	r5, r5
 8010de6:	0409      	lsls	r1, r1, #16
 8010de8:	430d      	orrs	r5, r1
 8010dea:	4661      	mov	r1, ip
 8010dec:	c120      	stmia	r1!, {r5}
 8010dee:	468c      	mov	ip, r1
 8010df0:	e7dd      	b.n	8010dae <__mdiff+0xda>
 8010df2:	3801      	subs	r0, #1
 8010df4:	e7e9      	b.n	8010dca <__mdiff+0xf6>
 8010df6:	46c0      	nop			; (mov r8, r8)
 8010df8:	080139a1 	.word	0x080139a1
 8010dfc:	00000232 	.word	0x00000232
 8010e00:	08013a43 	.word	0x08013a43

08010e04 <__ulp>:
 8010e04:	4b0f      	ldr	r3, [pc, #60]	; (8010e44 <__ulp+0x40>)
 8010e06:	4019      	ands	r1, r3
 8010e08:	4b0f      	ldr	r3, [pc, #60]	; (8010e48 <__ulp+0x44>)
 8010e0a:	18c9      	adds	r1, r1, r3
 8010e0c:	2900      	cmp	r1, #0
 8010e0e:	dd04      	ble.n	8010e1a <__ulp+0x16>
 8010e10:	2200      	movs	r2, #0
 8010e12:	000b      	movs	r3, r1
 8010e14:	0010      	movs	r0, r2
 8010e16:	0019      	movs	r1, r3
 8010e18:	4770      	bx	lr
 8010e1a:	4249      	negs	r1, r1
 8010e1c:	2200      	movs	r2, #0
 8010e1e:	2300      	movs	r3, #0
 8010e20:	1509      	asrs	r1, r1, #20
 8010e22:	2913      	cmp	r1, #19
 8010e24:	dc04      	bgt.n	8010e30 <__ulp+0x2c>
 8010e26:	2080      	movs	r0, #128	; 0x80
 8010e28:	0300      	lsls	r0, r0, #12
 8010e2a:	4108      	asrs	r0, r1
 8010e2c:	0003      	movs	r3, r0
 8010e2e:	e7f1      	b.n	8010e14 <__ulp+0x10>
 8010e30:	3914      	subs	r1, #20
 8010e32:	2001      	movs	r0, #1
 8010e34:	291e      	cmp	r1, #30
 8010e36:	dc02      	bgt.n	8010e3e <__ulp+0x3a>
 8010e38:	2080      	movs	r0, #128	; 0x80
 8010e3a:	0600      	lsls	r0, r0, #24
 8010e3c:	40c8      	lsrs	r0, r1
 8010e3e:	0002      	movs	r2, r0
 8010e40:	e7e8      	b.n	8010e14 <__ulp+0x10>
 8010e42:	46c0      	nop			; (mov r8, r8)
 8010e44:	7ff00000 	.word	0x7ff00000
 8010e48:	fcc00000 	.word	0xfcc00000

08010e4c <__b2d>:
 8010e4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010e4e:	0006      	movs	r6, r0
 8010e50:	6903      	ldr	r3, [r0, #16]
 8010e52:	3614      	adds	r6, #20
 8010e54:	009b      	lsls	r3, r3, #2
 8010e56:	18f3      	adds	r3, r6, r3
 8010e58:	1f1d      	subs	r5, r3, #4
 8010e5a:	682c      	ldr	r4, [r5, #0]
 8010e5c:	000f      	movs	r7, r1
 8010e5e:	0020      	movs	r0, r4
 8010e60:	9301      	str	r3, [sp, #4]
 8010e62:	f7ff fd43 	bl	80108ec <__hi0bits>
 8010e66:	2320      	movs	r3, #32
 8010e68:	1a1b      	subs	r3, r3, r0
 8010e6a:	491f      	ldr	r1, [pc, #124]	; (8010ee8 <__b2d+0x9c>)
 8010e6c:	603b      	str	r3, [r7, #0]
 8010e6e:	280a      	cmp	r0, #10
 8010e70:	dc16      	bgt.n	8010ea0 <__b2d+0x54>
 8010e72:	230b      	movs	r3, #11
 8010e74:	0027      	movs	r7, r4
 8010e76:	1a1b      	subs	r3, r3, r0
 8010e78:	40df      	lsrs	r7, r3
 8010e7a:	4339      	orrs	r1, r7
 8010e7c:	469c      	mov	ip, r3
 8010e7e:	000b      	movs	r3, r1
 8010e80:	2100      	movs	r1, #0
 8010e82:	42ae      	cmp	r6, r5
 8010e84:	d202      	bcs.n	8010e8c <__b2d+0x40>
 8010e86:	9901      	ldr	r1, [sp, #4]
 8010e88:	3908      	subs	r1, #8
 8010e8a:	6809      	ldr	r1, [r1, #0]
 8010e8c:	3015      	adds	r0, #21
 8010e8e:	4084      	lsls	r4, r0
 8010e90:	4660      	mov	r0, ip
 8010e92:	40c1      	lsrs	r1, r0
 8010e94:	430c      	orrs	r4, r1
 8010e96:	0022      	movs	r2, r4
 8010e98:	0010      	movs	r0, r2
 8010e9a:	0019      	movs	r1, r3
 8010e9c:	b003      	add	sp, #12
 8010e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ea0:	2700      	movs	r7, #0
 8010ea2:	42ae      	cmp	r6, r5
 8010ea4:	d202      	bcs.n	8010eac <__b2d+0x60>
 8010ea6:	9d01      	ldr	r5, [sp, #4]
 8010ea8:	3d08      	subs	r5, #8
 8010eaa:	682f      	ldr	r7, [r5, #0]
 8010eac:	230b      	movs	r3, #11
 8010eae:	425b      	negs	r3, r3
 8010eb0:	469c      	mov	ip, r3
 8010eb2:	4484      	add	ip, r0
 8010eb4:	280b      	cmp	r0, #11
 8010eb6:	d013      	beq.n	8010ee0 <__b2d+0x94>
 8010eb8:	4663      	mov	r3, ip
 8010eba:	2020      	movs	r0, #32
 8010ebc:	409c      	lsls	r4, r3
 8010ebe:	1ac0      	subs	r0, r0, r3
 8010ec0:	003b      	movs	r3, r7
 8010ec2:	40c3      	lsrs	r3, r0
 8010ec4:	431c      	orrs	r4, r3
 8010ec6:	4321      	orrs	r1, r4
 8010ec8:	000b      	movs	r3, r1
 8010eca:	2100      	movs	r1, #0
 8010ecc:	42b5      	cmp	r5, r6
 8010ece:	d901      	bls.n	8010ed4 <__b2d+0x88>
 8010ed0:	3d04      	subs	r5, #4
 8010ed2:	6829      	ldr	r1, [r5, #0]
 8010ed4:	4664      	mov	r4, ip
 8010ed6:	40c1      	lsrs	r1, r0
 8010ed8:	40a7      	lsls	r7, r4
 8010eda:	430f      	orrs	r7, r1
 8010edc:	003a      	movs	r2, r7
 8010ede:	e7db      	b.n	8010e98 <__b2d+0x4c>
 8010ee0:	4321      	orrs	r1, r4
 8010ee2:	000b      	movs	r3, r1
 8010ee4:	e7fa      	b.n	8010edc <__b2d+0x90>
 8010ee6:	46c0      	nop			; (mov r8, r8)
 8010ee8:	3ff00000 	.word	0x3ff00000

08010eec <__d2b>:
 8010eec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010eee:	2101      	movs	r1, #1
 8010ef0:	0014      	movs	r4, r2
 8010ef2:	001e      	movs	r6, r3
 8010ef4:	9f08      	ldr	r7, [sp, #32]
 8010ef6:	f7ff fc01 	bl	80106fc <_Balloc>
 8010efa:	1e05      	subs	r5, r0, #0
 8010efc:	d105      	bne.n	8010f0a <__d2b+0x1e>
 8010efe:	0002      	movs	r2, r0
 8010f00:	4b26      	ldr	r3, [pc, #152]	; (8010f9c <__d2b+0xb0>)
 8010f02:	4927      	ldr	r1, [pc, #156]	; (8010fa0 <__d2b+0xb4>)
 8010f04:	4827      	ldr	r0, [pc, #156]	; (8010fa4 <__d2b+0xb8>)
 8010f06:	f000 fcf9 	bl	80118fc <__assert_func>
 8010f0a:	0333      	lsls	r3, r6, #12
 8010f0c:	0076      	lsls	r6, r6, #1
 8010f0e:	0b1b      	lsrs	r3, r3, #12
 8010f10:	0d76      	lsrs	r6, r6, #21
 8010f12:	d124      	bne.n	8010f5e <__d2b+0x72>
 8010f14:	9301      	str	r3, [sp, #4]
 8010f16:	2c00      	cmp	r4, #0
 8010f18:	d027      	beq.n	8010f6a <__d2b+0x7e>
 8010f1a:	4668      	mov	r0, sp
 8010f1c:	9400      	str	r4, [sp, #0]
 8010f1e:	f7ff fcff 	bl	8010920 <__lo0bits>
 8010f22:	9c00      	ldr	r4, [sp, #0]
 8010f24:	2800      	cmp	r0, #0
 8010f26:	d01e      	beq.n	8010f66 <__d2b+0x7a>
 8010f28:	9b01      	ldr	r3, [sp, #4]
 8010f2a:	2120      	movs	r1, #32
 8010f2c:	001a      	movs	r2, r3
 8010f2e:	1a09      	subs	r1, r1, r0
 8010f30:	408a      	lsls	r2, r1
 8010f32:	40c3      	lsrs	r3, r0
 8010f34:	4322      	orrs	r2, r4
 8010f36:	616a      	str	r2, [r5, #20]
 8010f38:	9301      	str	r3, [sp, #4]
 8010f3a:	9c01      	ldr	r4, [sp, #4]
 8010f3c:	61ac      	str	r4, [r5, #24]
 8010f3e:	1e63      	subs	r3, r4, #1
 8010f40:	419c      	sbcs	r4, r3
 8010f42:	3401      	adds	r4, #1
 8010f44:	612c      	str	r4, [r5, #16]
 8010f46:	2e00      	cmp	r6, #0
 8010f48:	d018      	beq.n	8010f7c <__d2b+0x90>
 8010f4a:	4b17      	ldr	r3, [pc, #92]	; (8010fa8 <__d2b+0xbc>)
 8010f4c:	18f6      	adds	r6, r6, r3
 8010f4e:	2335      	movs	r3, #53	; 0x35
 8010f50:	1836      	adds	r6, r6, r0
 8010f52:	1a18      	subs	r0, r3, r0
 8010f54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f56:	603e      	str	r6, [r7, #0]
 8010f58:	6018      	str	r0, [r3, #0]
 8010f5a:	0028      	movs	r0, r5
 8010f5c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010f5e:	2280      	movs	r2, #128	; 0x80
 8010f60:	0352      	lsls	r2, r2, #13
 8010f62:	4313      	orrs	r3, r2
 8010f64:	e7d6      	b.n	8010f14 <__d2b+0x28>
 8010f66:	616c      	str	r4, [r5, #20]
 8010f68:	e7e7      	b.n	8010f3a <__d2b+0x4e>
 8010f6a:	a801      	add	r0, sp, #4
 8010f6c:	f7ff fcd8 	bl	8010920 <__lo0bits>
 8010f70:	2401      	movs	r4, #1
 8010f72:	9b01      	ldr	r3, [sp, #4]
 8010f74:	612c      	str	r4, [r5, #16]
 8010f76:	616b      	str	r3, [r5, #20]
 8010f78:	3020      	adds	r0, #32
 8010f7a:	e7e4      	b.n	8010f46 <__d2b+0x5a>
 8010f7c:	4b0b      	ldr	r3, [pc, #44]	; (8010fac <__d2b+0xc0>)
 8010f7e:	18c0      	adds	r0, r0, r3
 8010f80:	4b0b      	ldr	r3, [pc, #44]	; (8010fb0 <__d2b+0xc4>)
 8010f82:	6038      	str	r0, [r7, #0]
 8010f84:	18e3      	adds	r3, r4, r3
 8010f86:	009b      	lsls	r3, r3, #2
 8010f88:	18eb      	adds	r3, r5, r3
 8010f8a:	6958      	ldr	r0, [r3, #20]
 8010f8c:	f7ff fcae 	bl	80108ec <__hi0bits>
 8010f90:	0164      	lsls	r4, r4, #5
 8010f92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f94:	1a24      	subs	r4, r4, r0
 8010f96:	601c      	str	r4, [r3, #0]
 8010f98:	e7df      	b.n	8010f5a <__d2b+0x6e>
 8010f9a:	46c0      	nop			; (mov r8, r8)
 8010f9c:	080139a1 	.word	0x080139a1
 8010fa0:	0000030a 	.word	0x0000030a
 8010fa4:	08013a43 	.word	0x08013a43
 8010fa8:	fffffbcd 	.word	0xfffffbcd
 8010fac:	fffffbce 	.word	0xfffffbce
 8010fb0:	3fffffff 	.word	0x3fffffff

08010fb4 <__ratio>:
 8010fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010fb6:	b087      	sub	sp, #28
 8010fb8:	000f      	movs	r7, r1
 8010fba:	a904      	add	r1, sp, #16
 8010fbc:	0006      	movs	r6, r0
 8010fbe:	f7ff ff45 	bl	8010e4c <__b2d>
 8010fc2:	9000      	str	r0, [sp, #0]
 8010fc4:	9101      	str	r1, [sp, #4]
 8010fc6:	9c00      	ldr	r4, [sp, #0]
 8010fc8:	9d01      	ldr	r5, [sp, #4]
 8010fca:	0038      	movs	r0, r7
 8010fcc:	a905      	add	r1, sp, #20
 8010fce:	f7ff ff3d 	bl	8010e4c <__b2d>
 8010fd2:	9002      	str	r0, [sp, #8]
 8010fd4:	9103      	str	r1, [sp, #12]
 8010fd6:	9a02      	ldr	r2, [sp, #8]
 8010fd8:	9b03      	ldr	r3, [sp, #12]
 8010fda:	6931      	ldr	r1, [r6, #16]
 8010fdc:	6938      	ldr	r0, [r7, #16]
 8010fde:	9e05      	ldr	r6, [sp, #20]
 8010fe0:	1a08      	subs	r0, r1, r0
 8010fe2:	9904      	ldr	r1, [sp, #16]
 8010fe4:	0140      	lsls	r0, r0, #5
 8010fe6:	1b89      	subs	r1, r1, r6
 8010fe8:	1841      	adds	r1, r0, r1
 8010fea:	0508      	lsls	r0, r1, #20
 8010fec:	2900      	cmp	r1, #0
 8010fee:	dd07      	ble.n	8011000 <__ratio+0x4c>
 8010ff0:	9901      	ldr	r1, [sp, #4]
 8010ff2:	1845      	adds	r5, r0, r1
 8010ff4:	0020      	movs	r0, r4
 8010ff6:	0029      	movs	r1, r5
 8010ff8:	f7f0 f914 	bl	8001224 <__aeabi_ddiv>
 8010ffc:	b007      	add	sp, #28
 8010ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011000:	9903      	ldr	r1, [sp, #12]
 8011002:	1a0b      	subs	r3, r1, r0
 8011004:	e7f6      	b.n	8010ff4 <__ratio+0x40>
	...

08011008 <_mprec_log10>:
 8011008:	b510      	push	{r4, lr}
 801100a:	0004      	movs	r4, r0
 801100c:	2817      	cmp	r0, #23
 801100e:	dc05      	bgt.n	801101c <_mprec_log10+0x14>
 8011010:	4c07      	ldr	r4, [pc, #28]	; (8011030 <_mprec_log10+0x28>)
 8011012:	00c0      	lsls	r0, r0, #3
 8011014:	1824      	adds	r4, r4, r0
 8011016:	6820      	ldr	r0, [r4, #0]
 8011018:	6861      	ldr	r1, [r4, #4]
 801101a:	bd10      	pop	{r4, pc}
 801101c:	2000      	movs	r0, #0
 801101e:	4905      	ldr	r1, [pc, #20]	; (8011034 <_mprec_log10+0x2c>)
 8011020:	2200      	movs	r2, #0
 8011022:	4b05      	ldr	r3, [pc, #20]	; (8011038 <_mprec_log10+0x30>)
 8011024:	3c01      	subs	r4, #1
 8011026:	f7f0 fcff 	bl	8001a28 <__aeabi_dmul>
 801102a:	2c00      	cmp	r4, #0
 801102c:	d1f8      	bne.n	8011020 <_mprec_log10+0x18>
 801102e:	e7f4      	b.n	801101a <_mprec_log10+0x12>
 8011030:	08013ac8 	.word	0x08013ac8
 8011034:	3ff00000 	.word	0x3ff00000
 8011038:	40240000 	.word	0x40240000

0801103c <__copybits>:
 801103c:	b570      	push	{r4, r5, r6, lr}
 801103e:	0014      	movs	r4, r2
 8011040:	0005      	movs	r5, r0
 8011042:	3901      	subs	r1, #1
 8011044:	6913      	ldr	r3, [r2, #16]
 8011046:	1149      	asrs	r1, r1, #5
 8011048:	3101      	adds	r1, #1
 801104a:	0089      	lsls	r1, r1, #2
 801104c:	3414      	adds	r4, #20
 801104e:	009b      	lsls	r3, r3, #2
 8011050:	1841      	adds	r1, r0, r1
 8011052:	18e3      	adds	r3, r4, r3
 8011054:	42a3      	cmp	r3, r4
 8011056:	d80d      	bhi.n	8011074 <__copybits+0x38>
 8011058:	0014      	movs	r4, r2
 801105a:	3411      	adds	r4, #17
 801105c:	2500      	movs	r5, #0
 801105e:	429c      	cmp	r4, r3
 8011060:	d803      	bhi.n	801106a <__copybits+0x2e>
 8011062:	1a9b      	subs	r3, r3, r2
 8011064:	3b11      	subs	r3, #17
 8011066:	089b      	lsrs	r3, r3, #2
 8011068:	009d      	lsls	r5, r3, #2
 801106a:	2300      	movs	r3, #0
 801106c:	1940      	adds	r0, r0, r5
 801106e:	4281      	cmp	r1, r0
 8011070:	d803      	bhi.n	801107a <__copybits+0x3e>
 8011072:	bd70      	pop	{r4, r5, r6, pc}
 8011074:	cc40      	ldmia	r4!, {r6}
 8011076:	c540      	stmia	r5!, {r6}
 8011078:	e7ec      	b.n	8011054 <__copybits+0x18>
 801107a:	c008      	stmia	r0!, {r3}
 801107c:	e7f7      	b.n	801106e <__copybits+0x32>

0801107e <__any_on>:
 801107e:	0002      	movs	r2, r0
 8011080:	6900      	ldr	r0, [r0, #16]
 8011082:	b510      	push	{r4, lr}
 8011084:	3214      	adds	r2, #20
 8011086:	114b      	asrs	r3, r1, #5
 8011088:	4298      	cmp	r0, r3
 801108a:	db13      	blt.n	80110b4 <__any_on+0x36>
 801108c:	dd0c      	ble.n	80110a8 <__any_on+0x2a>
 801108e:	241f      	movs	r4, #31
 8011090:	0008      	movs	r0, r1
 8011092:	4020      	ands	r0, r4
 8011094:	4221      	tst	r1, r4
 8011096:	d007      	beq.n	80110a8 <__any_on+0x2a>
 8011098:	0099      	lsls	r1, r3, #2
 801109a:	588c      	ldr	r4, [r1, r2]
 801109c:	0021      	movs	r1, r4
 801109e:	40c1      	lsrs	r1, r0
 80110a0:	4081      	lsls	r1, r0
 80110a2:	2001      	movs	r0, #1
 80110a4:	428c      	cmp	r4, r1
 80110a6:	d104      	bne.n	80110b2 <__any_on+0x34>
 80110a8:	009b      	lsls	r3, r3, #2
 80110aa:	18d3      	adds	r3, r2, r3
 80110ac:	4293      	cmp	r3, r2
 80110ae:	d803      	bhi.n	80110b8 <__any_on+0x3a>
 80110b0:	2000      	movs	r0, #0
 80110b2:	bd10      	pop	{r4, pc}
 80110b4:	0003      	movs	r3, r0
 80110b6:	e7f7      	b.n	80110a8 <__any_on+0x2a>
 80110b8:	3b04      	subs	r3, #4
 80110ba:	6819      	ldr	r1, [r3, #0]
 80110bc:	2900      	cmp	r1, #0
 80110be:	d0f5      	beq.n	80110ac <__any_on+0x2e>
 80110c0:	2001      	movs	r0, #1
 80110c2:	e7f6      	b.n	80110b2 <__any_on+0x34>

080110c4 <_calloc_r>:
 80110c4:	b570      	push	{r4, r5, r6, lr}
 80110c6:	0c13      	lsrs	r3, r2, #16
 80110c8:	0c0d      	lsrs	r5, r1, #16
 80110ca:	d11e      	bne.n	801110a <_calloc_r+0x46>
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d10c      	bne.n	80110ea <_calloc_r+0x26>
 80110d0:	b289      	uxth	r1, r1
 80110d2:	b294      	uxth	r4, r2
 80110d4:	434c      	muls	r4, r1
 80110d6:	0021      	movs	r1, r4
 80110d8:	f000 f842 	bl	8011160 <_malloc_r>
 80110dc:	1e05      	subs	r5, r0, #0
 80110de:	d01b      	beq.n	8011118 <_calloc_r+0x54>
 80110e0:	0022      	movs	r2, r4
 80110e2:	2100      	movs	r1, #0
 80110e4:	f7fd fea7 	bl	800ee36 <memset>
 80110e8:	e016      	b.n	8011118 <_calloc_r+0x54>
 80110ea:	1c1d      	adds	r5, r3, #0
 80110ec:	1c0b      	adds	r3, r1, #0
 80110ee:	b292      	uxth	r2, r2
 80110f0:	b289      	uxth	r1, r1
 80110f2:	b29c      	uxth	r4, r3
 80110f4:	4351      	muls	r1, r2
 80110f6:	b2ab      	uxth	r3, r5
 80110f8:	4363      	muls	r3, r4
 80110fa:	0c0c      	lsrs	r4, r1, #16
 80110fc:	191c      	adds	r4, r3, r4
 80110fe:	0c22      	lsrs	r2, r4, #16
 8011100:	d107      	bne.n	8011112 <_calloc_r+0x4e>
 8011102:	0424      	lsls	r4, r4, #16
 8011104:	b289      	uxth	r1, r1
 8011106:	430c      	orrs	r4, r1
 8011108:	e7e5      	b.n	80110d6 <_calloc_r+0x12>
 801110a:	2b00      	cmp	r3, #0
 801110c:	d101      	bne.n	8011112 <_calloc_r+0x4e>
 801110e:	1c13      	adds	r3, r2, #0
 8011110:	e7ed      	b.n	80110ee <_calloc_r+0x2a>
 8011112:	230c      	movs	r3, #12
 8011114:	2500      	movs	r5, #0
 8011116:	6003      	str	r3, [r0, #0]
 8011118:	0028      	movs	r0, r5
 801111a:	bd70      	pop	{r4, r5, r6, pc}

0801111c <sbrk_aligned>:
 801111c:	b570      	push	{r4, r5, r6, lr}
 801111e:	4e0f      	ldr	r6, [pc, #60]	; (801115c <sbrk_aligned+0x40>)
 8011120:	000d      	movs	r5, r1
 8011122:	6831      	ldr	r1, [r6, #0]
 8011124:	0004      	movs	r4, r0
 8011126:	2900      	cmp	r1, #0
 8011128:	d102      	bne.n	8011130 <sbrk_aligned+0x14>
 801112a:	f000 fba9 	bl	8011880 <_sbrk_r>
 801112e:	6030      	str	r0, [r6, #0]
 8011130:	0029      	movs	r1, r5
 8011132:	0020      	movs	r0, r4
 8011134:	f000 fba4 	bl	8011880 <_sbrk_r>
 8011138:	1c43      	adds	r3, r0, #1
 801113a:	d00a      	beq.n	8011152 <sbrk_aligned+0x36>
 801113c:	2303      	movs	r3, #3
 801113e:	1cc5      	adds	r5, r0, #3
 8011140:	439d      	bics	r5, r3
 8011142:	42a8      	cmp	r0, r5
 8011144:	d007      	beq.n	8011156 <sbrk_aligned+0x3a>
 8011146:	1a29      	subs	r1, r5, r0
 8011148:	0020      	movs	r0, r4
 801114a:	f000 fb99 	bl	8011880 <_sbrk_r>
 801114e:	1c43      	adds	r3, r0, #1
 8011150:	d101      	bne.n	8011156 <sbrk_aligned+0x3a>
 8011152:	2501      	movs	r5, #1
 8011154:	426d      	negs	r5, r5
 8011156:	0028      	movs	r0, r5
 8011158:	bd70      	pop	{r4, r5, r6, pc}
 801115a:	46c0      	nop			; (mov r8, r8)
 801115c:	20000d54 	.word	0x20000d54

08011160 <_malloc_r>:
 8011160:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011162:	2203      	movs	r2, #3
 8011164:	1ccb      	adds	r3, r1, #3
 8011166:	4393      	bics	r3, r2
 8011168:	3308      	adds	r3, #8
 801116a:	0006      	movs	r6, r0
 801116c:	001f      	movs	r7, r3
 801116e:	2b0c      	cmp	r3, #12
 8011170:	d232      	bcs.n	80111d8 <_malloc_r+0x78>
 8011172:	270c      	movs	r7, #12
 8011174:	42b9      	cmp	r1, r7
 8011176:	d831      	bhi.n	80111dc <_malloc_r+0x7c>
 8011178:	0030      	movs	r0, r6
 801117a:	f001 fabb 	bl	80126f4 <__malloc_lock>
 801117e:	4d32      	ldr	r5, [pc, #200]	; (8011248 <_malloc_r+0xe8>)
 8011180:	682b      	ldr	r3, [r5, #0]
 8011182:	001c      	movs	r4, r3
 8011184:	2c00      	cmp	r4, #0
 8011186:	d12e      	bne.n	80111e6 <_malloc_r+0x86>
 8011188:	0039      	movs	r1, r7
 801118a:	0030      	movs	r0, r6
 801118c:	f7ff ffc6 	bl	801111c <sbrk_aligned>
 8011190:	0004      	movs	r4, r0
 8011192:	1c43      	adds	r3, r0, #1
 8011194:	d11e      	bne.n	80111d4 <_malloc_r+0x74>
 8011196:	682c      	ldr	r4, [r5, #0]
 8011198:	0025      	movs	r5, r4
 801119a:	2d00      	cmp	r5, #0
 801119c:	d14a      	bne.n	8011234 <_malloc_r+0xd4>
 801119e:	6823      	ldr	r3, [r4, #0]
 80111a0:	0029      	movs	r1, r5
 80111a2:	18e3      	adds	r3, r4, r3
 80111a4:	0030      	movs	r0, r6
 80111a6:	9301      	str	r3, [sp, #4]
 80111a8:	f000 fb6a 	bl	8011880 <_sbrk_r>
 80111ac:	9b01      	ldr	r3, [sp, #4]
 80111ae:	4283      	cmp	r3, r0
 80111b0:	d143      	bne.n	801123a <_malloc_r+0xda>
 80111b2:	6823      	ldr	r3, [r4, #0]
 80111b4:	3703      	adds	r7, #3
 80111b6:	1aff      	subs	r7, r7, r3
 80111b8:	2303      	movs	r3, #3
 80111ba:	439f      	bics	r7, r3
 80111bc:	3708      	adds	r7, #8
 80111be:	2f0c      	cmp	r7, #12
 80111c0:	d200      	bcs.n	80111c4 <_malloc_r+0x64>
 80111c2:	270c      	movs	r7, #12
 80111c4:	0039      	movs	r1, r7
 80111c6:	0030      	movs	r0, r6
 80111c8:	f7ff ffa8 	bl	801111c <sbrk_aligned>
 80111cc:	1c43      	adds	r3, r0, #1
 80111ce:	d034      	beq.n	801123a <_malloc_r+0xda>
 80111d0:	6823      	ldr	r3, [r4, #0]
 80111d2:	19df      	adds	r7, r3, r7
 80111d4:	6027      	str	r7, [r4, #0]
 80111d6:	e013      	b.n	8011200 <_malloc_r+0xa0>
 80111d8:	2b00      	cmp	r3, #0
 80111da:	dacb      	bge.n	8011174 <_malloc_r+0x14>
 80111dc:	230c      	movs	r3, #12
 80111de:	2500      	movs	r5, #0
 80111e0:	6033      	str	r3, [r6, #0]
 80111e2:	0028      	movs	r0, r5
 80111e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80111e6:	6822      	ldr	r2, [r4, #0]
 80111e8:	1bd1      	subs	r1, r2, r7
 80111ea:	d420      	bmi.n	801122e <_malloc_r+0xce>
 80111ec:	290b      	cmp	r1, #11
 80111ee:	d917      	bls.n	8011220 <_malloc_r+0xc0>
 80111f0:	19e2      	adds	r2, r4, r7
 80111f2:	6027      	str	r7, [r4, #0]
 80111f4:	42a3      	cmp	r3, r4
 80111f6:	d111      	bne.n	801121c <_malloc_r+0xbc>
 80111f8:	602a      	str	r2, [r5, #0]
 80111fa:	6863      	ldr	r3, [r4, #4]
 80111fc:	6011      	str	r1, [r2, #0]
 80111fe:	6053      	str	r3, [r2, #4]
 8011200:	0030      	movs	r0, r6
 8011202:	0025      	movs	r5, r4
 8011204:	f001 fa7e 	bl	8012704 <__malloc_unlock>
 8011208:	2207      	movs	r2, #7
 801120a:	350b      	adds	r5, #11
 801120c:	1d23      	adds	r3, r4, #4
 801120e:	4395      	bics	r5, r2
 8011210:	1aea      	subs	r2, r5, r3
 8011212:	429d      	cmp	r5, r3
 8011214:	d0e5      	beq.n	80111e2 <_malloc_r+0x82>
 8011216:	1b5b      	subs	r3, r3, r5
 8011218:	50a3      	str	r3, [r4, r2]
 801121a:	e7e2      	b.n	80111e2 <_malloc_r+0x82>
 801121c:	605a      	str	r2, [r3, #4]
 801121e:	e7ec      	b.n	80111fa <_malloc_r+0x9a>
 8011220:	6862      	ldr	r2, [r4, #4]
 8011222:	42a3      	cmp	r3, r4
 8011224:	d101      	bne.n	801122a <_malloc_r+0xca>
 8011226:	602a      	str	r2, [r5, #0]
 8011228:	e7ea      	b.n	8011200 <_malloc_r+0xa0>
 801122a:	605a      	str	r2, [r3, #4]
 801122c:	e7e8      	b.n	8011200 <_malloc_r+0xa0>
 801122e:	0023      	movs	r3, r4
 8011230:	6864      	ldr	r4, [r4, #4]
 8011232:	e7a7      	b.n	8011184 <_malloc_r+0x24>
 8011234:	002c      	movs	r4, r5
 8011236:	686d      	ldr	r5, [r5, #4]
 8011238:	e7af      	b.n	801119a <_malloc_r+0x3a>
 801123a:	230c      	movs	r3, #12
 801123c:	0030      	movs	r0, r6
 801123e:	6033      	str	r3, [r6, #0]
 8011240:	f001 fa60 	bl	8012704 <__malloc_unlock>
 8011244:	e7cd      	b.n	80111e2 <_malloc_r+0x82>
 8011246:	46c0      	nop			; (mov r8, r8)
 8011248:	20000d50 	.word	0x20000d50

0801124c <_realloc_r>:
 801124c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801124e:	0007      	movs	r7, r0
 8011250:	000e      	movs	r6, r1
 8011252:	0014      	movs	r4, r2
 8011254:	2900      	cmp	r1, #0
 8011256:	d105      	bne.n	8011264 <_realloc_r+0x18>
 8011258:	0011      	movs	r1, r2
 801125a:	f7ff ff81 	bl	8011160 <_malloc_r>
 801125e:	0005      	movs	r5, r0
 8011260:	0028      	movs	r0, r5
 8011262:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011264:	2a00      	cmp	r2, #0
 8011266:	d103      	bne.n	8011270 <_realloc_r+0x24>
 8011268:	f001 fa54 	bl	8012714 <_free_r>
 801126c:	0025      	movs	r5, r4
 801126e:	e7f7      	b.n	8011260 <_realloc_r+0x14>
 8011270:	f001 fa9a 	bl	80127a8 <_malloc_usable_size_r>
 8011274:	9001      	str	r0, [sp, #4]
 8011276:	4284      	cmp	r4, r0
 8011278:	d803      	bhi.n	8011282 <_realloc_r+0x36>
 801127a:	0035      	movs	r5, r6
 801127c:	0843      	lsrs	r3, r0, #1
 801127e:	42a3      	cmp	r3, r4
 8011280:	d3ee      	bcc.n	8011260 <_realloc_r+0x14>
 8011282:	0021      	movs	r1, r4
 8011284:	0038      	movs	r0, r7
 8011286:	f7ff ff6b 	bl	8011160 <_malloc_r>
 801128a:	1e05      	subs	r5, r0, #0
 801128c:	d0e8      	beq.n	8011260 <_realloc_r+0x14>
 801128e:	9b01      	ldr	r3, [sp, #4]
 8011290:	0022      	movs	r2, r4
 8011292:	429c      	cmp	r4, r3
 8011294:	d900      	bls.n	8011298 <_realloc_r+0x4c>
 8011296:	001a      	movs	r2, r3
 8011298:	0031      	movs	r1, r6
 801129a:	0028      	movs	r0, r5
 801129c:	f7fd fdc2 	bl	800ee24 <memcpy>
 80112a0:	0031      	movs	r1, r6
 80112a2:	0038      	movs	r0, r7
 80112a4:	f001 fa36 	bl	8012714 <_free_r>
 80112a8:	e7da      	b.n	8011260 <_realloc_r+0x14>
	...

080112ac <__ssputs_r>:
 80112ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80112ae:	688e      	ldr	r6, [r1, #8]
 80112b0:	b085      	sub	sp, #20
 80112b2:	0007      	movs	r7, r0
 80112b4:	000c      	movs	r4, r1
 80112b6:	9203      	str	r2, [sp, #12]
 80112b8:	9301      	str	r3, [sp, #4]
 80112ba:	429e      	cmp	r6, r3
 80112bc:	d83c      	bhi.n	8011338 <__ssputs_r+0x8c>
 80112be:	2390      	movs	r3, #144	; 0x90
 80112c0:	898a      	ldrh	r2, [r1, #12]
 80112c2:	00db      	lsls	r3, r3, #3
 80112c4:	421a      	tst	r2, r3
 80112c6:	d034      	beq.n	8011332 <__ssputs_r+0x86>
 80112c8:	6909      	ldr	r1, [r1, #16]
 80112ca:	6823      	ldr	r3, [r4, #0]
 80112cc:	6960      	ldr	r0, [r4, #20]
 80112ce:	1a5b      	subs	r3, r3, r1
 80112d0:	9302      	str	r3, [sp, #8]
 80112d2:	2303      	movs	r3, #3
 80112d4:	4343      	muls	r3, r0
 80112d6:	0fdd      	lsrs	r5, r3, #31
 80112d8:	18ed      	adds	r5, r5, r3
 80112da:	9b01      	ldr	r3, [sp, #4]
 80112dc:	9802      	ldr	r0, [sp, #8]
 80112de:	3301      	adds	r3, #1
 80112e0:	181b      	adds	r3, r3, r0
 80112e2:	106d      	asrs	r5, r5, #1
 80112e4:	42ab      	cmp	r3, r5
 80112e6:	d900      	bls.n	80112ea <__ssputs_r+0x3e>
 80112e8:	001d      	movs	r5, r3
 80112ea:	0553      	lsls	r3, r2, #21
 80112ec:	d532      	bpl.n	8011354 <__ssputs_r+0xa8>
 80112ee:	0029      	movs	r1, r5
 80112f0:	0038      	movs	r0, r7
 80112f2:	f7ff ff35 	bl	8011160 <_malloc_r>
 80112f6:	1e06      	subs	r6, r0, #0
 80112f8:	d109      	bne.n	801130e <__ssputs_r+0x62>
 80112fa:	230c      	movs	r3, #12
 80112fc:	603b      	str	r3, [r7, #0]
 80112fe:	2340      	movs	r3, #64	; 0x40
 8011300:	2001      	movs	r0, #1
 8011302:	89a2      	ldrh	r2, [r4, #12]
 8011304:	4240      	negs	r0, r0
 8011306:	4313      	orrs	r3, r2
 8011308:	81a3      	strh	r3, [r4, #12]
 801130a:	b005      	add	sp, #20
 801130c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801130e:	9a02      	ldr	r2, [sp, #8]
 8011310:	6921      	ldr	r1, [r4, #16]
 8011312:	f7fd fd87 	bl	800ee24 <memcpy>
 8011316:	89a3      	ldrh	r3, [r4, #12]
 8011318:	4a14      	ldr	r2, [pc, #80]	; (801136c <__ssputs_r+0xc0>)
 801131a:	401a      	ands	r2, r3
 801131c:	2380      	movs	r3, #128	; 0x80
 801131e:	4313      	orrs	r3, r2
 8011320:	81a3      	strh	r3, [r4, #12]
 8011322:	9b02      	ldr	r3, [sp, #8]
 8011324:	6126      	str	r6, [r4, #16]
 8011326:	18f6      	adds	r6, r6, r3
 8011328:	6026      	str	r6, [r4, #0]
 801132a:	6165      	str	r5, [r4, #20]
 801132c:	9e01      	ldr	r6, [sp, #4]
 801132e:	1aed      	subs	r5, r5, r3
 8011330:	60a5      	str	r5, [r4, #8]
 8011332:	9b01      	ldr	r3, [sp, #4]
 8011334:	429e      	cmp	r6, r3
 8011336:	d900      	bls.n	801133a <__ssputs_r+0x8e>
 8011338:	9e01      	ldr	r6, [sp, #4]
 801133a:	0032      	movs	r2, r6
 801133c:	9903      	ldr	r1, [sp, #12]
 801133e:	6820      	ldr	r0, [r4, #0]
 8011340:	f001 f9c5 	bl	80126ce <memmove>
 8011344:	68a3      	ldr	r3, [r4, #8]
 8011346:	2000      	movs	r0, #0
 8011348:	1b9b      	subs	r3, r3, r6
 801134a:	60a3      	str	r3, [r4, #8]
 801134c:	6823      	ldr	r3, [r4, #0]
 801134e:	199e      	adds	r6, r3, r6
 8011350:	6026      	str	r6, [r4, #0]
 8011352:	e7da      	b.n	801130a <__ssputs_r+0x5e>
 8011354:	002a      	movs	r2, r5
 8011356:	0038      	movs	r0, r7
 8011358:	f7ff ff78 	bl	801124c <_realloc_r>
 801135c:	1e06      	subs	r6, r0, #0
 801135e:	d1e0      	bne.n	8011322 <__ssputs_r+0x76>
 8011360:	0038      	movs	r0, r7
 8011362:	6921      	ldr	r1, [r4, #16]
 8011364:	f001 f9d6 	bl	8012714 <_free_r>
 8011368:	e7c7      	b.n	80112fa <__ssputs_r+0x4e>
 801136a:	46c0      	nop			; (mov r8, r8)
 801136c:	fffffb7f 	.word	0xfffffb7f

08011370 <_svfiprintf_r>:
 8011370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011372:	b0a1      	sub	sp, #132	; 0x84
 8011374:	9003      	str	r0, [sp, #12]
 8011376:	001d      	movs	r5, r3
 8011378:	898b      	ldrh	r3, [r1, #12]
 801137a:	000f      	movs	r7, r1
 801137c:	0016      	movs	r6, r2
 801137e:	061b      	lsls	r3, r3, #24
 8011380:	d511      	bpl.n	80113a6 <_svfiprintf_r+0x36>
 8011382:	690b      	ldr	r3, [r1, #16]
 8011384:	2b00      	cmp	r3, #0
 8011386:	d10e      	bne.n	80113a6 <_svfiprintf_r+0x36>
 8011388:	2140      	movs	r1, #64	; 0x40
 801138a:	f7ff fee9 	bl	8011160 <_malloc_r>
 801138e:	6038      	str	r0, [r7, #0]
 8011390:	6138      	str	r0, [r7, #16]
 8011392:	2800      	cmp	r0, #0
 8011394:	d105      	bne.n	80113a2 <_svfiprintf_r+0x32>
 8011396:	230c      	movs	r3, #12
 8011398:	9a03      	ldr	r2, [sp, #12]
 801139a:	3801      	subs	r0, #1
 801139c:	6013      	str	r3, [r2, #0]
 801139e:	b021      	add	sp, #132	; 0x84
 80113a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113a2:	2340      	movs	r3, #64	; 0x40
 80113a4:	617b      	str	r3, [r7, #20]
 80113a6:	2300      	movs	r3, #0
 80113a8:	ac08      	add	r4, sp, #32
 80113aa:	6163      	str	r3, [r4, #20]
 80113ac:	3320      	adds	r3, #32
 80113ae:	7663      	strb	r3, [r4, #25]
 80113b0:	3310      	adds	r3, #16
 80113b2:	76a3      	strb	r3, [r4, #26]
 80113b4:	9507      	str	r5, [sp, #28]
 80113b6:	0035      	movs	r5, r6
 80113b8:	782b      	ldrb	r3, [r5, #0]
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d001      	beq.n	80113c2 <_svfiprintf_r+0x52>
 80113be:	2b25      	cmp	r3, #37	; 0x25
 80113c0:	d147      	bne.n	8011452 <_svfiprintf_r+0xe2>
 80113c2:	1bab      	subs	r3, r5, r6
 80113c4:	9305      	str	r3, [sp, #20]
 80113c6:	42b5      	cmp	r5, r6
 80113c8:	d00c      	beq.n	80113e4 <_svfiprintf_r+0x74>
 80113ca:	0032      	movs	r2, r6
 80113cc:	0039      	movs	r1, r7
 80113ce:	9803      	ldr	r0, [sp, #12]
 80113d0:	f7ff ff6c 	bl	80112ac <__ssputs_r>
 80113d4:	1c43      	adds	r3, r0, #1
 80113d6:	d100      	bne.n	80113da <_svfiprintf_r+0x6a>
 80113d8:	e0ae      	b.n	8011538 <_svfiprintf_r+0x1c8>
 80113da:	6962      	ldr	r2, [r4, #20]
 80113dc:	9b05      	ldr	r3, [sp, #20]
 80113de:	4694      	mov	ip, r2
 80113e0:	4463      	add	r3, ip
 80113e2:	6163      	str	r3, [r4, #20]
 80113e4:	782b      	ldrb	r3, [r5, #0]
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d100      	bne.n	80113ec <_svfiprintf_r+0x7c>
 80113ea:	e0a5      	b.n	8011538 <_svfiprintf_r+0x1c8>
 80113ec:	2201      	movs	r2, #1
 80113ee:	2300      	movs	r3, #0
 80113f0:	4252      	negs	r2, r2
 80113f2:	6062      	str	r2, [r4, #4]
 80113f4:	a904      	add	r1, sp, #16
 80113f6:	3254      	adds	r2, #84	; 0x54
 80113f8:	1852      	adds	r2, r2, r1
 80113fa:	1c6e      	adds	r6, r5, #1
 80113fc:	6023      	str	r3, [r4, #0]
 80113fe:	60e3      	str	r3, [r4, #12]
 8011400:	60a3      	str	r3, [r4, #8]
 8011402:	7013      	strb	r3, [r2, #0]
 8011404:	65a3      	str	r3, [r4, #88]	; 0x58
 8011406:	2205      	movs	r2, #5
 8011408:	7831      	ldrb	r1, [r6, #0]
 801140a:	4854      	ldr	r0, [pc, #336]	; (801155c <_svfiprintf_r+0x1ec>)
 801140c:	f001 f954 	bl	80126b8 <memchr>
 8011410:	1c75      	adds	r5, r6, #1
 8011412:	2800      	cmp	r0, #0
 8011414:	d11f      	bne.n	8011456 <_svfiprintf_r+0xe6>
 8011416:	6822      	ldr	r2, [r4, #0]
 8011418:	06d3      	lsls	r3, r2, #27
 801141a:	d504      	bpl.n	8011426 <_svfiprintf_r+0xb6>
 801141c:	2353      	movs	r3, #83	; 0x53
 801141e:	a904      	add	r1, sp, #16
 8011420:	185b      	adds	r3, r3, r1
 8011422:	2120      	movs	r1, #32
 8011424:	7019      	strb	r1, [r3, #0]
 8011426:	0713      	lsls	r3, r2, #28
 8011428:	d504      	bpl.n	8011434 <_svfiprintf_r+0xc4>
 801142a:	2353      	movs	r3, #83	; 0x53
 801142c:	a904      	add	r1, sp, #16
 801142e:	185b      	adds	r3, r3, r1
 8011430:	212b      	movs	r1, #43	; 0x2b
 8011432:	7019      	strb	r1, [r3, #0]
 8011434:	7833      	ldrb	r3, [r6, #0]
 8011436:	2b2a      	cmp	r3, #42	; 0x2a
 8011438:	d016      	beq.n	8011468 <_svfiprintf_r+0xf8>
 801143a:	0035      	movs	r5, r6
 801143c:	2100      	movs	r1, #0
 801143e:	200a      	movs	r0, #10
 8011440:	68e3      	ldr	r3, [r4, #12]
 8011442:	782a      	ldrb	r2, [r5, #0]
 8011444:	1c6e      	adds	r6, r5, #1
 8011446:	3a30      	subs	r2, #48	; 0x30
 8011448:	2a09      	cmp	r2, #9
 801144a:	d94e      	bls.n	80114ea <_svfiprintf_r+0x17a>
 801144c:	2900      	cmp	r1, #0
 801144e:	d111      	bne.n	8011474 <_svfiprintf_r+0x104>
 8011450:	e017      	b.n	8011482 <_svfiprintf_r+0x112>
 8011452:	3501      	adds	r5, #1
 8011454:	e7b0      	b.n	80113b8 <_svfiprintf_r+0x48>
 8011456:	4b41      	ldr	r3, [pc, #260]	; (801155c <_svfiprintf_r+0x1ec>)
 8011458:	6822      	ldr	r2, [r4, #0]
 801145a:	1ac0      	subs	r0, r0, r3
 801145c:	2301      	movs	r3, #1
 801145e:	4083      	lsls	r3, r0
 8011460:	4313      	orrs	r3, r2
 8011462:	002e      	movs	r6, r5
 8011464:	6023      	str	r3, [r4, #0]
 8011466:	e7ce      	b.n	8011406 <_svfiprintf_r+0x96>
 8011468:	9b07      	ldr	r3, [sp, #28]
 801146a:	1d19      	adds	r1, r3, #4
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	9107      	str	r1, [sp, #28]
 8011470:	2b00      	cmp	r3, #0
 8011472:	db01      	blt.n	8011478 <_svfiprintf_r+0x108>
 8011474:	930b      	str	r3, [sp, #44]	; 0x2c
 8011476:	e004      	b.n	8011482 <_svfiprintf_r+0x112>
 8011478:	425b      	negs	r3, r3
 801147a:	60e3      	str	r3, [r4, #12]
 801147c:	2302      	movs	r3, #2
 801147e:	4313      	orrs	r3, r2
 8011480:	6023      	str	r3, [r4, #0]
 8011482:	782b      	ldrb	r3, [r5, #0]
 8011484:	2b2e      	cmp	r3, #46	; 0x2e
 8011486:	d10a      	bne.n	801149e <_svfiprintf_r+0x12e>
 8011488:	786b      	ldrb	r3, [r5, #1]
 801148a:	2b2a      	cmp	r3, #42	; 0x2a
 801148c:	d135      	bne.n	80114fa <_svfiprintf_r+0x18a>
 801148e:	9b07      	ldr	r3, [sp, #28]
 8011490:	3502      	adds	r5, #2
 8011492:	1d1a      	adds	r2, r3, #4
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	9207      	str	r2, [sp, #28]
 8011498:	2b00      	cmp	r3, #0
 801149a:	db2b      	blt.n	80114f4 <_svfiprintf_r+0x184>
 801149c:	9309      	str	r3, [sp, #36]	; 0x24
 801149e:	4e30      	ldr	r6, [pc, #192]	; (8011560 <_svfiprintf_r+0x1f0>)
 80114a0:	2203      	movs	r2, #3
 80114a2:	0030      	movs	r0, r6
 80114a4:	7829      	ldrb	r1, [r5, #0]
 80114a6:	f001 f907 	bl	80126b8 <memchr>
 80114aa:	2800      	cmp	r0, #0
 80114ac:	d006      	beq.n	80114bc <_svfiprintf_r+0x14c>
 80114ae:	2340      	movs	r3, #64	; 0x40
 80114b0:	1b80      	subs	r0, r0, r6
 80114b2:	4083      	lsls	r3, r0
 80114b4:	6822      	ldr	r2, [r4, #0]
 80114b6:	3501      	adds	r5, #1
 80114b8:	4313      	orrs	r3, r2
 80114ba:	6023      	str	r3, [r4, #0]
 80114bc:	7829      	ldrb	r1, [r5, #0]
 80114be:	2206      	movs	r2, #6
 80114c0:	4828      	ldr	r0, [pc, #160]	; (8011564 <_svfiprintf_r+0x1f4>)
 80114c2:	1c6e      	adds	r6, r5, #1
 80114c4:	7621      	strb	r1, [r4, #24]
 80114c6:	f001 f8f7 	bl	80126b8 <memchr>
 80114ca:	2800      	cmp	r0, #0
 80114cc:	d03c      	beq.n	8011548 <_svfiprintf_r+0x1d8>
 80114ce:	4b26      	ldr	r3, [pc, #152]	; (8011568 <_svfiprintf_r+0x1f8>)
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d125      	bne.n	8011520 <_svfiprintf_r+0x1b0>
 80114d4:	2207      	movs	r2, #7
 80114d6:	9b07      	ldr	r3, [sp, #28]
 80114d8:	3307      	adds	r3, #7
 80114da:	4393      	bics	r3, r2
 80114dc:	3308      	adds	r3, #8
 80114de:	9307      	str	r3, [sp, #28]
 80114e0:	6963      	ldr	r3, [r4, #20]
 80114e2:	9a04      	ldr	r2, [sp, #16]
 80114e4:	189b      	adds	r3, r3, r2
 80114e6:	6163      	str	r3, [r4, #20]
 80114e8:	e765      	b.n	80113b6 <_svfiprintf_r+0x46>
 80114ea:	4343      	muls	r3, r0
 80114ec:	0035      	movs	r5, r6
 80114ee:	2101      	movs	r1, #1
 80114f0:	189b      	adds	r3, r3, r2
 80114f2:	e7a6      	b.n	8011442 <_svfiprintf_r+0xd2>
 80114f4:	2301      	movs	r3, #1
 80114f6:	425b      	negs	r3, r3
 80114f8:	e7d0      	b.n	801149c <_svfiprintf_r+0x12c>
 80114fa:	2300      	movs	r3, #0
 80114fc:	200a      	movs	r0, #10
 80114fe:	001a      	movs	r2, r3
 8011500:	3501      	adds	r5, #1
 8011502:	6063      	str	r3, [r4, #4]
 8011504:	7829      	ldrb	r1, [r5, #0]
 8011506:	1c6e      	adds	r6, r5, #1
 8011508:	3930      	subs	r1, #48	; 0x30
 801150a:	2909      	cmp	r1, #9
 801150c:	d903      	bls.n	8011516 <_svfiprintf_r+0x1a6>
 801150e:	2b00      	cmp	r3, #0
 8011510:	d0c5      	beq.n	801149e <_svfiprintf_r+0x12e>
 8011512:	9209      	str	r2, [sp, #36]	; 0x24
 8011514:	e7c3      	b.n	801149e <_svfiprintf_r+0x12e>
 8011516:	4342      	muls	r2, r0
 8011518:	0035      	movs	r5, r6
 801151a:	2301      	movs	r3, #1
 801151c:	1852      	adds	r2, r2, r1
 801151e:	e7f1      	b.n	8011504 <_svfiprintf_r+0x194>
 8011520:	ab07      	add	r3, sp, #28
 8011522:	9300      	str	r3, [sp, #0]
 8011524:	003a      	movs	r2, r7
 8011526:	0021      	movs	r1, r4
 8011528:	4b10      	ldr	r3, [pc, #64]	; (801156c <_svfiprintf_r+0x1fc>)
 801152a:	9803      	ldr	r0, [sp, #12]
 801152c:	e000      	b.n	8011530 <_svfiprintf_r+0x1c0>
 801152e:	bf00      	nop
 8011530:	9004      	str	r0, [sp, #16]
 8011532:	9b04      	ldr	r3, [sp, #16]
 8011534:	3301      	adds	r3, #1
 8011536:	d1d3      	bne.n	80114e0 <_svfiprintf_r+0x170>
 8011538:	89bb      	ldrh	r3, [r7, #12]
 801153a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801153c:	065b      	lsls	r3, r3, #25
 801153e:	d400      	bmi.n	8011542 <_svfiprintf_r+0x1d2>
 8011540:	e72d      	b.n	801139e <_svfiprintf_r+0x2e>
 8011542:	2001      	movs	r0, #1
 8011544:	4240      	negs	r0, r0
 8011546:	e72a      	b.n	801139e <_svfiprintf_r+0x2e>
 8011548:	ab07      	add	r3, sp, #28
 801154a:	9300      	str	r3, [sp, #0]
 801154c:	003a      	movs	r2, r7
 801154e:	0021      	movs	r1, r4
 8011550:	4b06      	ldr	r3, [pc, #24]	; (801156c <_svfiprintf_r+0x1fc>)
 8011552:	9803      	ldr	r0, [sp, #12]
 8011554:	f000 f87c 	bl	8011650 <_printf_i>
 8011558:	e7ea      	b.n	8011530 <_svfiprintf_r+0x1c0>
 801155a:	46c0      	nop			; (mov r8, r8)
 801155c:	08013b9c 	.word	0x08013b9c
 8011560:	08013ba2 	.word	0x08013ba2
 8011564:	08013ba6 	.word	0x08013ba6
 8011568:	00000000 	.word	0x00000000
 801156c:	080112ad 	.word	0x080112ad

08011570 <_printf_common>:
 8011570:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011572:	0015      	movs	r5, r2
 8011574:	9301      	str	r3, [sp, #4]
 8011576:	688a      	ldr	r2, [r1, #8]
 8011578:	690b      	ldr	r3, [r1, #16]
 801157a:	000c      	movs	r4, r1
 801157c:	9000      	str	r0, [sp, #0]
 801157e:	4293      	cmp	r3, r2
 8011580:	da00      	bge.n	8011584 <_printf_common+0x14>
 8011582:	0013      	movs	r3, r2
 8011584:	0022      	movs	r2, r4
 8011586:	602b      	str	r3, [r5, #0]
 8011588:	3243      	adds	r2, #67	; 0x43
 801158a:	7812      	ldrb	r2, [r2, #0]
 801158c:	2a00      	cmp	r2, #0
 801158e:	d001      	beq.n	8011594 <_printf_common+0x24>
 8011590:	3301      	adds	r3, #1
 8011592:	602b      	str	r3, [r5, #0]
 8011594:	6823      	ldr	r3, [r4, #0]
 8011596:	069b      	lsls	r3, r3, #26
 8011598:	d502      	bpl.n	80115a0 <_printf_common+0x30>
 801159a:	682b      	ldr	r3, [r5, #0]
 801159c:	3302      	adds	r3, #2
 801159e:	602b      	str	r3, [r5, #0]
 80115a0:	6822      	ldr	r2, [r4, #0]
 80115a2:	2306      	movs	r3, #6
 80115a4:	0017      	movs	r7, r2
 80115a6:	401f      	ands	r7, r3
 80115a8:	421a      	tst	r2, r3
 80115aa:	d027      	beq.n	80115fc <_printf_common+0x8c>
 80115ac:	0023      	movs	r3, r4
 80115ae:	3343      	adds	r3, #67	; 0x43
 80115b0:	781b      	ldrb	r3, [r3, #0]
 80115b2:	1e5a      	subs	r2, r3, #1
 80115b4:	4193      	sbcs	r3, r2
 80115b6:	6822      	ldr	r2, [r4, #0]
 80115b8:	0692      	lsls	r2, r2, #26
 80115ba:	d430      	bmi.n	801161e <_printf_common+0xae>
 80115bc:	0022      	movs	r2, r4
 80115be:	9901      	ldr	r1, [sp, #4]
 80115c0:	9800      	ldr	r0, [sp, #0]
 80115c2:	9e08      	ldr	r6, [sp, #32]
 80115c4:	3243      	adds	r2, #67	; 0x43
 80115c6:	47b0      	blx	r6
 80115c8:	1c43      	adds	r3, r0, #1
 80115ca:	d025      	beq.n	8011618 <_printf_common+0xa8>
 80115cc:	2306      	movs	r3, #6
 80115ce:	6820      	ldr	r0, [r4, #0]
 80115d0:	682a      	ldr	r2, [r5, #0]
 80115d2:	68e1      	ldr	r1, [r4, #12]
 80115d4:	2500      	movs	r5, #0
 80115d6:	4003      	ands	r3, r0
 80115d8:	2b04      	cmp	r3, #4
 80115da:	d103      	bne.n	80115e4 <_printf_common+0x74>
 80115dc:	1a8d      	subs	r5, r1, r2
 80115de:	43eb      	mvns	r3, r5
 80115e0:	17db      	asrs	r3, r3, #31
 80115e2:	401d      	ands	r5, r3
 80115e4:	68a3      	ldr	r3, [r4, #8]
 80115e6:	6922      	ldr	r2, [r4, #16]
 80115e8:	4293      	cmp	r3, r2
 80115ea:	dd01      	ble.n	80115f0 <_printf_common+0x80>
 80115ec:	1a9b      	subs	r3, r3, r2
 80115ee:	18ed      	adds	r5, r5, r3
 80115f0:	2700      	movs	r7, #0
 80115f2:	42bd      	cmp	r5, r7
 80115f4:	d120      	bne.n	8011638 <_printf_common+0xc8>
 80115f6:	2000      	movs	r0, #0
 80115f8:	e010      	b.n	801161c <_printf_common+0xac>
 80115fa:	3701      	adds	r7, #1
 80115fc:	68e3      	ldr	r3, [r4, #12]
 80115fe:	682a      	ldr	r2, [r5, #0]
 8011600:	1a9b      	subs	r3, r3, r2
 8011602:	42bb      	cmp	r3, r7
 8011604:	ddd2      	ble.n	80115ac <_printf_common+0x3c>
 8011606:	0022      	movs	r2, r4
 8011608:	2301      	movs	r3, #1
 801160a:	9901      	ldr	r1, [sp, #4]
 801160c:	9800      	ldr	r0, [sp, #0]
 801160e:	9e08      	ldr	r6, [sp, #32]
 8011610:	3219      	adds	r2, #25
 8011612:	47b0      	blx	r6
 8011614:	1c43      	adds	r3, r0, #1
 8011616:	d1f0      	bne.n	80115fa <_printf_common+0x8a>
 8011618:	2001      	movs	r0, #1
 801161a:	4240      	negs	r0, r0
 801161c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801161e:	2030      	movs	r0, #48	; 0x30
 8011620:	18e1      	adds	r1, r4, r3
 8011622:	3143      	adds	r1, #67	; 0x43
 8011624:	7008      	strb	r0, [r1, #0]
 8011626:	0021      	movs	r1, r4
 8011628:	1c5a      	adds	r2, r3, #1
 801162a:	3145      	adds	r1, #69	; 0x45
 801162c:	7809      	ldrb	r1, [r1, #0]
 801162e:	18a2      	adds	r2, r4, r2
 8011630:	3243      	adds	r2, #67	; 0x43
 8011632:	3302      	adds	r3, #2
 8011634:	7011      	strb	r1, [r2, #0]
 8011636:	e7c1      	b.n	80115bc <_printf_common+0x4c>
 8011638:	0022      	movs	r2, r4
 801163a:	2301      	movs	r3, #1
 801163c:	9901      	ldr	r1, [sp, #4]
 801163e:	9800      	ldr	r0, [sp, #0]
 8011640:	9e08      	ldr	r6, [sp, #32]
 8011642:	321a      	adds	r2, #26
 8011644:	47b0      	blx	r6
 8011646:	1c43      	adds	r3, r0, #1
 8011648:	d0e6      	beq.n	8011618 <_printf_common+0xa8>
 801164a:	3701      	adds	r7, #1
 801164c:	e7d1      	b.n	80115f2 <_printf_common+0x82>
	...

08011650 <_printf_i>:
 8011650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011652:	b08b      	sub	sp, #44	; 0x2c
 8011654:	9206      	str	r2, [sp, #24]
 8011656:	000a      	movs	r2, r1
 8011658:	3243      	adds	r2, #67	; 0x43
 801165a:	9307      	str	r3, [sp, #28]
 801165c:	9005      	str	r0, [sp, #20]
 801165e:	9204      	str	r2, [sp, #16]
 8011660:	7e0a      	ldrb	r2, [r1, #24]
 8011662:	000c      	movs	r4, r1
 8011664:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011666:	2a78      	cmp	r2, #120	; 0x78
 8011668:	d807      	bhi.n	801167a <_printf_i+0x2a>
 801166a:	2a62      	cmp	r2, #98	; 0x62
 801166c:	d809      	bhi.n	8011682 <_printf_i+0x32>
 801166e:	2a00      	cmp	r2, #0
 8011670:	d100      	bne.n	8011674 <_printf_i+0x24>
 8011672:	e0c1      	b.n	80117f8 <_printf_i+0x1a8>
 8011674:	2a58      	cmp	r2, #88	; 0x58
 8011676:	d100      	bne.n	801167a <_printf_i+0x2a>
 8011678:	e08c      	b.n	8011794 <_printf_i+0x144>
 801167a:	0026      	movs	r6, r4
 801167c:	3642      	adds	r6, #66	; 0x42
 801167e:	7032      	strb	r2, [r6, #0]
 8011680:	e022      	b.n	80116c8 <_printf_i+0x78>
 8011682:	0010      	movs	r0, r2
 8011684:	3863      	subs	r0, #99	; 0x63
 8011686:	2815      	cmp	r0, #21
 8011688:	d8f7      	bhi.n	801167a <_printf_i+0x2a>
 801168a:	f7ee fd55 	bl	8000138 <__gnu_thumb1_case_shi>
 801168e:	0016      	.short	0x0016
 8011690:	fff6001f 	.word	0xfff6001f
 8011694:	fff6fff6 	.word	0xfff6fff6
 8011698:	001ffff6 	.word	0x001ffff6
 801169c:	fff6fff6 	.word	0xfff6fff6
 80116a0:	fff6fff6 	.word	0xfff6fff6
 80116a4:	003600a8 	.word	0x003600a8
 80116a8:	fff6009a 	.word	0xfff6009a
 80116ac:	00b9fff6 	.word	0x00b9fff6
 80116b0:	0036fff6 	.word	0x0036fff6
 80116b4:	fff6fff6 	.word	0xfff6fff6
 80116b8:	009e      	.short	0x009e
 80116ba:	0026      	movs	r6, r4
 80116bc:	681a      	ldr	r2, [r3, #0]
 80116be:	3642      	adds	r6, #66	; 0x42
 80116c0:	1d11      	adds	r1, r2, #4
 80116c2:	6019      	str	r1, [r3, #0]
 80116c4:	6813      	ldr	r3, [r2, #0]
 80116c6:	7033      	strb	r3, [r6, #0]
 80116c8:	2301      	movs	r3, #1
 80116ca:	e0a7      	b.n	801181c <_printf_i+0x1cc>
 80116cc:	6808      	ldr	r0, [r1, #0]
 80116ce:	6819      	ldr	r1, [r3, #0]
 80116d0:	1d0a      	adds	r2, r1, #4
 80116d2:	0605      	lsls	r5, r0, #24
 80116d4:	d50b      	bpl.n	80116ee <_printf_i+0x9e>
 80116d6:	680d      	ldr	r5, [r1, #0]
 80116d8:	601a      	str	r2, [r3, #0]
 80116da:	2d00      	cmp	r5, #0
 80116dc:	da03      	bge.n	80116e6 <_printf_i+0x96>
 80116de:	232d      	movs	r3, #45	; 0x2d
 80116e0:	9a04      	ldr	r2, [sp, #16]
 80116e2:	426d      	negs	r5, r5
 80116e4:	7013      	strb	r3, [r2, #0]
 80116e6:	4b61      	ldr	r3, [pc, #388]	; (801186c <_printf_i+0x21c>)
 80116e8:	270a      	movs	r7, #10
 80116ea:	9303      	str	r3, [sp, #12]
 80116ec:	e01b      	b.n	8011726 <_printf_i+0xd6>
 80116ee:	680d      	ldr	r5, [r1, #0]
 80116f0:	601a      	str	r2, [r3, #0]
 80116f2:	0641      	lsls	r1, r0, #25
 80116f4:	d5f1      	bpl.n	80116da <_printf_i+0x8a>
 80116f6:	b22d      	sxth	r5, r5
 80116f8:	e7ef      	b.n	80116da <_printf_i+0x8a>
 80116fa:	680d      	ldr	r5, [r1, #0]
 80116fc:	6819      	ldr	r1, [r3, #0]
 80116fe:	1d08      	adds	r0, r1, #4
 8011700:	6018      	str	r0, [r3, #0]
 8011702:	062e      	lsls	r6, r5, #24
 8011704:	d501      	bpl.n	801170a <_printf_i+0xba>
 8011706:	680d      	ldr	r5, [r1, #0]
 8011708:	e003      	b.n	8011712 <_printf_i+0xc2>
 801170a:	066d      	lsls	r5, r5, #25
 801170c:	d5fb      	bpl.n	8011706 <_printf_i+0xb6>
 801170e:	680d      	ldr	r5, [r1, #0]
 8011710:	b2ad      	uxth	r5, r5
 8011712:	4b56      	ldr	r3, [pc, #344]	; (801186c <_printf_i+0x21c>)
 8011714:	2708      	movs	r7, #8
 8011716:	9303      	str	r3, [sp, #12]
 8011718:	2a6f      	cmp	r2, #111	; 0x6f
 801171a:	d000      	beq.n	801171e <_printf_i+0xce>
 801171c:	3702      	adds	r7, #2
 801171e:	0023      	movs	r3, r4
 8011720:	2200      	movs	r2, #0
 8011722:	3343      	adds	r3, #67	; 0x43
 8011724:	701a      	strb	r2, [r3, #0]
 8011726:	6863      	ldr	r3, [r4, #4]
 8011728:	60a3      	str	r3, [r4, #8]
 801172a:	2b00      	cmp	r3, #0
 801172c:	db03      	blt.n	8011736 <_printf_i+0xe6>
 801172e:	2204      	movs	r2, #4
 8011730:	6821      	ldr	r1, [r4, #0]
 8011732:	4391      	bics	r1, r2
 8011734:	6021      	str	r1, [r4, #0]
 8011736:	2d00      	cmp	r5, #0
 8011738:	d102      	bne.n	8011740 <_printf_i+0xf0>
 801173a:	9e04      	ldr	r6, [sp, #16]
 801173c:	2b00      	cmp	r3, #0
 801173e:	d00c      	beq.n	801175a <_printf_i+0x10a>
 8011740:	9e04      	ldr	r6, [sp, #16]
 8011742:	0028      	movs	r0, r5
 8011744:	0039      	movs	r1, r7
 8011746:	f7ee fd87 	bl	8000258 <__aeabi_uidivmod>
 801174a:	9b03      	ldr	r3, [sp, #12]
 801174c:	3e01      	subs	r6, #1
 801174e:	5c5b      	ldrb	r3, [r3, r1]
 8011750:	7033      	strb	r3, [r6, #0]
 8011752:	002b      	movs	r3, r5
 8011754:	0005      	movs	r5, r0
 8011756:	429f      	cmp	r7, r3
 8011758:	d9f3      	bls.n	8011742 <_printf_i+0xf2>
 801175a:	2f08      	cmp	r7, #8
 801175c:	d109      	bne.n	8011772 <_printf_i+0x122>
 801175e:	6823      	ldr	r3, [r4, #0]
 8011760:	07db      	lsls	r3, r3, #31
 8011762:	d506      	bpl.n	8011772 <_printf_i+0x122>
 8011764:	6863      	ldr	r3, [r4, #4]
 8011766:	6922      	ldr	r2, [r4, #16]
 8011768:	4293      	cmp	r3, r2
 801176a:	dc02      	bgt.n	8011772 <_printf_i+0x122>
 801176c:	2330      	movs	r3, #48	; 0x30
 801176e:	3e01      	subs	r6, #1
 8011770:	7033      	strb	r3, [r6, #0]
 8011772:	9b04      	ldr	r3, [sp, #16]
 8011774:	1b9b      	subs	r3, r3, r6
 8011776:	6123      	str	r3, [r4, #16]
 8011778:	9b07      	ldr	r3, [sp, #28]
 801177a:	0021      	movs	r1, r4
 801177c:	9300      	str	r3, [sp, #0]
 801177e:	9805      	ldr	r0, [sp, #20]
 8011780:	9b06      	ldr	r3, [sp, #24]
 8011782:	aa09      	add	r2, sp, #36	; 0x24
 8011784:	f7ff fef4 	bl	8011570 <_printf_common>
 8011788:	1c43      	adds	r3, r0, #1
 801178a:	d14c      	bne.n	8011826 <_printf_i+0x1d6>
 801178c:	2001      	movs	r0, #1
 801178e:	4240      	negs	r0, r0
 8011790:	b00b      	add	sp, #44	; 0x2c
 8011792:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011794:	3145      	adds	r1, #69	; 0x45
 8011796:	700a      	strb	r2, [r1, #0]
 8011798:	4a34      	ldr	r2, [pc, #208]	; (801186c <_printf_i+0x21c>)
 801179a:	9203      	str	r2, [sp, #12]
 801179c:	681a      	ldr	r2, [r3, #0]
 801179e:	6821      	ldr	r1, [r4, #0]
 80117a0:	ca20      	ldmia	r2!, {r5}
 80117a2:	601a      	str	r2, [r3, #0]
 80117a4:	0608      	lsls	r0, r1, #24
 80117a6:	d516      	bpl.n	80117d6 <_printf_i+0x186>
 80117a8:	07cb      	lsls	r3, r1, #31
 80117aa:	d502      	bpl.n	80117b2 <_printf_i+0x162>
 80117ac:	2320      	movs	r3, #32
 80117ae:	4319      	orrs	r1, r3
 80117b0:	6021      	str	r1, [r4, #0]
 80117b2:	2710      	movs	r7, #16
 80117b4:	2d00      	cmp	r5, #0
 80117b6:	d1b2      	bne.n	801171e <_printf_i+0xce>
 80117b8:	2320      	movs	r3, #32
 80117ba:	6822      	ldr	r2, [r4, #0]
 80117bc:	439a      	bics	r2, r3
 80117be:	6022      	str	r2, [r4, #0]
 80117c0:	e7ad      	b.n	801171e <_printf_i+0xce>
 80117c2:	2220      	movs	r2, #32
 80117c4:	6809      	ldr	r1, [r1, #0]
 80117c6:	430a      	orrs	r2, r1
 80117c8:	6022      	str	r2, [r4, #0]
 80117ca:	0022      	movs	r2, r4
 80117cc:	2178      	movs	r1, #120	; 0x78
 80117ce:	3245      	adds	r2, #69	; 0x45
 80117d0:	7011      	strb	r1, [r2, #0]
 80117d2:	4a27      	ldr	r2, [pc, #156]	; (8011870 <_printf_i+0x220>)
 80117d4:	e7e1      	b.n	801179a <_printf_i+0x14a>
 80117d6:	0648      	lsls	r0, r1, #25
 80117d8:	d5e6      	bpl.n	80117a8 <_printf_i+0x158>
 80117da:	b2ad      	uxth	r5, r5
 80117dc:	e7e4      	b.n	80117a8 <_printf_i+0x158>
 80117de:	681a      	ldr	r2, [r3, #0]
 80117e0:	680d      	ldr	r5, [r1, #0]
 80117e2:	1d10      	adds	r0, r2, #4
 80117e4:	6949      	ldr	r1, [r1, #20]
 80117e6:	6018      	str	r0, [r3, #0]
 80117e8:	6813      	ldr	r3, [r2, #0]
 80117ea:	062e      	lsls	r6, r5, #24
 80117ec:	d501      	bpl.n	80117f2 <_printf_i+0x1a2>
 80117ee:	6019      	str	r1, [r3, #0]
 80117f0:	e002      	b.n	80117f8 <_printf_i+0x1a8>
 80117f2:	066d      	lsls	r5, r5, #25
 80117f4:	d5fb      	bpl.n	80117ee <_printf_i+0x19e>
 80117f6:	8019      	strh	r1, [r3, #0]
 80117f8:	2300      	movs	r3, #0
 80117fa:	9e04      	ldr	r6, [sp, #16]
 80117fc:	6123      	str	r3, [r4, #16]
 80117fe:	e7bb      	b.n	8011778 <_printf_i+0x128>
 8011800:	681a      	ldr	r2, [r3, #0]
 8011802:	1d11      	adds	r1, r2, #4
 8011804:	6019      	str	r1, [r3, #0]
 8011806:	6816      	ldr	r6, [r2, #0]
 8011808:	2100      	movs	r1, #0
 801180a:	0030      	movs	r0, r6
 801180c:	6862      	ldr	r2, [r4, #4]
 801180e:	f000 ff53 	bl	80126b8 <memchr>
 8011812:	2800      	cmp	r0, #0
 8011814:	d001      	beq.n	801181a <_printf_i+0x1ca>
 8011816:	1b80      	subs	r0, r0, r6
 8011818:	6060      	str	r0, [r4, #4]
 801181a:	6863      	ldr	r3, [r4, #4]
 801181c:	6123      	str	r3, [r4, #16]
 801181e:	2300      	movs	r3, #0
 8011820:	9a04      	ldr	r2, [sp, #16]
 8011822:	7013      	strb	r3, [r2, #0]
 8011824:	e7a8      	b.n	8011778 <_printf_i+0x128>
 8011826:	6923      	ldr	r3, [r4, #16]
 8011828:	0032      	movs	r2, r6
 801182a:	9906      	ldr	r1, [sp, #24]
 801182c:	9805      	ldr	r0, [sp, #20]
 801182e:	9d07      	ldr	r5, [sp, #28]
 8011830:	47a8      	blx	r5
 8011832:	1c43      	adds	r3, r0, #1
 8011834:	d0aa      	beq.n	801178c <_printf_i+0x13c>
 8011836:	6823      	ldr	r3, [r4, #0]
 8011838:	079b      	lsls	r3, r3, #30
 801183a:	d415      	bmi.n	8011868 <_printf_i+0x218>
 801183c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801183e:	68e0      	ldr	r0, [r4, #12]
 8011840:	4298      	cmp	r0, r3
 8011842:	daa5      	bge.n	8011790 <_printf_i+0x140>
 8011844:	0018      	movs	r0, r3
 8011846:	e7a3      	b.n	8011790 <_printf_i+0x140>
 8011848:	0022      	movs	r2, r4
 801184a:	2301      	movs	r3, #1
 801184c:	9906      	ldr	r1, [sp, #24]
 801184e:	9805      	ldr	r0, [sp, #20]
 8011850:	9e07      	ldr	r6, [sp, #28]
 8011852:	3219      	adds	r2, #25
 8011854:	47b0      	blx	r6
 8011856:	1c43      	adds	r3, r0, #1
 8011858:	d098      	beq.n	801178c <_printf_i+0x13c>
 801185a:	3501      	adds	r5, #1
 801185c:	68e3      	ldr	r3, [r4, #12]
 801185e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011860:	1a9b      	subs	r3, r3, r2
 8011862:	42ab      	cmp	r3, r5
 8011864:	dcf0      	bgt.n	8011848 <_printf_i+0x1f8>
 8011866:	e7e9      	b.n	801183c <_printf_i+0x1ec>
 8011868:	2500      	movs	r5, #0
 801186a:	e7f7      	b.n	801185c <_printf_i+0x20c>
 801186c:	08013bad 	.word	0x08013bad
 8011870:	08013bbe 	.word	0x08013bbe

08011874 <nan>:
 8011874:	2000      	movs	r0, #0
 8011876:	4901      	ldr	r1, [pc, #4]	; (801187c <nan+0x8>)
 8011878:	4770      	bx	lr
 801187a:	46c0      	nop			; (mov r8, r8)
 801187c:	7ff80000 	.word	0x7ff80000

08011880 <_sbrk_r>:
 8011880:	2300      	movs	r3, #0
 8011882:	b570      	push	{r4, r5, r6, lr}
 8011884:	4d06      	ldr	r5, [pc, #24]	; (80118a0 <_sbrk_r+0x20>)
 8011886:	0004      	movs	r4, r0
 8011888:	0008      	movs	r0, r1
 801188a:	602b      	str	r3, [r5, #0]
 801188c:	f7f7 fb72 	bl	8008f74 <_sbrk>
 8011890:	1c43      	adds	r3, r0, #1
 8011892:	d103      	bne.n	801189c <_sbrk_r+0x1c>
 8011894:	682b      	ldr	r3, [r5, #0]
 8011896:	2b00      	cmp	r3, #0
 8011898:	d000      	beq.n	801189c <_sbrk_r+0x1c>
 801189a:	6023      	str	r3, [r4, #0]
 801189c:	bd70      	pop	{r4, r5, r6, pc}
 801189e:	46c0      	nop			; (mov r8, r8)
 80118a0:	20000d58 	.word	0x20000d58

080118a4 <nanf>:
 80118a4:	4800      	ldr	r0, [pc, #0]	; (80118a8 <nanf+0x4>)
 80118a6:	4770      	bx	lr
 80118a8:	7fc00000 	.word	0x7fc00000

080118ac <strcpy>:
 80118ac:	0003      	movs	r3, r0
 80118ae:	780a      	ldrb	r2, [r1, #0]
 80118b0:	3101      	adds	r1, #1
 80118b2:	701a      	strb	r2, [r3, #0]
 80118b4:	3301      	adds	r3, #1
 80118b6:	2a00      	cmp	r2, #0
 80118b8:	d1f9      	bne.n	80118ae <strcpy+0x2>
 80118ba:	4770      	bx	lr

080118bc <strncmp>:
 80118bc:	b530      	push	{r4, r5, lr}
 80118be:	0005      	movs	r5, r0
 80118c0:	1e10      	subs	r0, r2, #0
 80118c2:	d008      	beq.n	80118d6 <strncmp+0x1a>
 80118c4:	2400      	movs	r4, #0
 80118c6:	3a01      	subs	r2, #1
 80118c8:	5d2b      	ldrb	r3, [r5, r4]
 80118ca:	5d08      	ldrb	r0, [r1, r4]
 80118cc:	4283      	cmp	r3, r0
 80118ce:	d101      	bne.n	80118d4 <strncmp+0x18>
 80118d0:	4294      	cmp	r4, r2
 80118d2:	d101      	bne.n	80118d8 <strncmp+0x1c>
 80118d4:	1a18      	subs	r0, r3, r0
 80118d6:	bd30      	pop	{r4, r5, pc}
 80118d8:	3401      	adds	r4, #1
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d1f4      	bne.n	80118c8 <strncmp+0xc>
 80118de:	e7f9      	b.n	80118d4 <strncmp+0x18>

080118e0 <__ascii_wctomb>:
 80118e0:	0003      	movs	r3, r0
 80118e2:	1e08      	subs	r0, r1, #0
 80118e4:	d005      	beq.n	80118f2 <__ascii_wctomb+0x12>
 80118e6:	2aff      	cmp	r2, #255	; 0xff
 80118e8:	d904      	bls.n	80118f4 <__ascii_wctomb+0x14>
 80118ea:	228a      	movs	r2, #138	; 0x8a
 80118ec:	2001      	movs	r0, #1
 80118ee:	601a      	str	r2, [r3, #0]
 80118f0:	4240      	negs	r0, r0
 80118f2:	4770      	bx	lr
 80118f4:	2001      	movs	r0, #1
 80118f6:	700a      	strb	r2, [r1, #0]
 80118f8:	e7fb      	b.n	80118f2 <__ascii_wctomb+0x12>
	...

080118fc <__assert_func>:
 80118fc:	b530      	push	{r4, r5, lr}
 80118fe:	0014      	movs	r4, r2
 8011900:	001a      	movs	r2, r3
 8011902:	4b09      	ldr	r3, [pc, #36]	; (8011928 <__assert_func+0x2c>)
 8011904:	0005      	movs	r5, r0
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	b085      	sub	sp, #20
 801190a:	68d8      	ldr	r0, [r3, #12]
 801190c:	4b07      	ldr	r3, [pc, #28]	; (801192c <__assert_func+0x30>)
 801190e:	2c00      	cmp	r4, #0
 8011910:	d101      	bne.n	8011916 <__assert_func+0x1a>
 8011912:	4b07      	ldr	r3, [pc, #28]	; (8011930 <__assert_func+0x34>)
 8011914:	001c      	movs	r4, r3
 8011916:	9301      	str	r3, [sp, #4]
 8011918:	9100      	str	r1, [sp, #0]
 801191a:	002b      	movs	r3, r5
 801191c:	4905      	ldr	r1, [pc, #20]	; (8011934 <__assert_func+0x38>)
 801191e:	9402      	str	r4, [sp, #8]
 8011920:	f000 feb0 	bl	8012684 <fiprintf>
 8011924:	f001 f978 	bl	8012c18 <abort>
 8011928:	200000e4 	.word	0x200000e4
 801192c:	08013bcf 	.word	0x08013bcf
 8011930:	08013c0a 	.word	0x08013c0a
 8011934:	08013bdc 	.word	0x08013bdc

08011938 <quorem>:
 8011938:	b5f0      	push	{r4, r5, r6, r7, lr}
 801193a:	0006      	movs	r6, r0
 801193c:	690b      	ldr	r3, [r1, #16]
 801193e:	6932      	ldr	r2, [r6, #16]
 8011940:	b087      	sub	sp, #28
 8011942:	2000      	movs	r0, #0
 8011944:	9103      	str	r1, [sp, #12]
 8011946:	429a      	cmp	r2, r3
 8011948:	db65      	blt.n	8011a16 <quorem+0xde>
 801194a:	3b01      	subs	r3, #1
 801194c:	009c      	lsls	r4, r3, #2
 801194e:	9300      	str	r3, [sp, #0]
 8011950:	000b      	movs	r3, r1
 8011952:	3314      	adds	r3, #20
 8011954:	9305      	str	r3, [sp, #20]
 8011956:	191b      	adds	r3, r3, r4
 8011958:	9304      	str	r3, [sp, #16]
 801195a:	0033      	movs	r3, r6
 801195c:	3314      	adds	r3, #20
 801195e:	9302      	str	r3, [sp, #8]
 8011960:	191c      	adds	r4, r3, r4
 8011962:	9b04      	ldr	r3, [sp, #16]
 8011964:	6827      	ldr	r7, [r4, #0]
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	0038      	movs	r0, r7
 801196a:	1c5d      	adds	r5, r3, #1
 801196c:	0029      	movs	r1, r5
 801196e:	9301      	str	r3, [sp, #4]
 8011970:	f7ee fbec 	bl	800014c <__udivsi3>
 8011974:	9001      	str	r0, [sp, #4]
 8011976:	42af      	cmp	r7, r5
 8011978:	d324      	bcc.n	80119c4 <quorem+0x8c>
 801197a:	2500      	movs	r5, #0
 801197c:	46ac      	mov	ip, r5
 801197e:	9802      	ldr	r0, [sp, #8]
 8011980:	9f05      	ldr	r7, [sp, #20]
 8011982:	cf08      	ldmia	r7!, {r3}
 8011984:	9a01      	ldr	r2, [sp, #4]
 8011986:	b299      	uxth	r1, r3
 8011988:	4351      	muls	r1, r2
 801198a:	0c1b      	lsrs	r3, r3, #16
 801198c:	4353      	muls	r3, r2
 801198e:	1949      	adds	r1, r1, r5
 8011990:	0c0a      	lsrs	r2, r1, #16
 8011992:	189b      	adds	r3, r3, r2
 8011994:	6802      	ldr	r2, [r0, #0]
 8011996:	b289      	uxth	r1, r1
 8011998:	b292      	uxth	r2, r2
 801199a:	4462      	add	r2, ip
 801199c:	1a52      	subs	r2, r2, r1
 801199e:	6801      	ldr	r1, [r0, #0]
 80119a0:	0c1d      	lsrs	r5, r3, #16
 80119a2:	0c09      	lsrs	r1, r1, #16
 80119a4:	b29b      	uxth	r3, r3
 80119a6:	1acb      	subs	r3, r1, r3
 80119a8:	1411      	asrs	r1, r2, #16
 80119aa:	185b      	adds	r3, r3, r1
 80119ac:	1419      	asrs	r1, r3, #16
 80119ae:	b292      	uxth	r2, r2
 80119b0:	041b      	lsls	r3, r3, #16
 80119b2:	431a      	orrs	r2, r3
 80119b4:	9b04      	ldr	r3, [sp, #16]
 80119b6:	468c      	mov	ip, r1
 80119b8:	c004      	stmia	r0!, {r2}
 80119ba:	42bb      	cmp	r3, r7
 80119bc:	d2e1      	bcs.n	8011982 <quorem+0x4a>
 80119be:	6823      	ldr	r3, [r4, #0]
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d030      	beq.n	8011a26 <quorem+0xee>
 80119c4:	0030      	movs	r0, r6
 80119c6:	9903      	ldr	r1, [sp, #12]
 80119c8:	f7ff f968 	bl	8010c9c <__mcmp>
 80119cc:	2800      	cmp	r0, #0
 80119ce:	db21      	blt.n	8011a14 <quorem+0xdc>
 80119d0:	0030      	movs	r0, r6
 80119d2:	2400      	movs	r4, #0
 80119d4:	9b01      	ldr	r3, [sp, #4]
 80119d6:	9903      	ldr	r1, [sp, #12]
 80119d8:	3301      	adds	r3, #1
 80119da:	9301      	str	r3, [sp, #4]
 80119dc:	3014      	adds	r0, #20
 80119de:	3114      	adds	r1, #20
 80119e0:	6803      	ldr	r3, [r0, #0]
 80119e2:	c920      	ldmia	r1!, {r5}
 80119e4:	b29a      	uxth	r2, r3
 80119e6:	1914      	adds	r4, r2, r4
 80119e8:	b2aa      	uxth	r2, r5
 80119ea:	1aa2      	subs	r2, r4, r2
 80119ec:	0c1b      	lsrs	r3, r3, #16
 80119ee:	0c2d      	lsrs	r5, r5, #16
 80119f0:	1414      	asrs	r4, r2, #16
 80119f2:	1b5b      	subs	r3, r3, r5
 80119f4:	191b      	adds	r3, r3, r4
 80119f6:	141c      	asrs	r4, r3, #16
 80119f8:	b292      	uxth	r2, r2
 80119fa:	041b      	lsls	r3, r3, #16
 80119fc:	4313      	orrs	r3, r2
 80119fe:	c008      	stmia	r0!, {r3}
 8011a00:	9b04      	ldr	r3, [sp, #16]
 8011a02:	428b      	cmp	r3, r1
 8011a04:	d2ec      	bcs.n	80119e0 <quorem+0xa8>
 8011a06:	9b00      	ldr	r3, [sp, #0]
 8011a08:	9a02      	ldr	r2, [sp, #8]
 8011a0a:	009b      	lsls	r3, r3, #2
 8011a0c:	18d3      	adds	r3, r2, r3
 8011a0e:	681a      	ldr	r2, [r3, #0]
 8011a10:	2a00      	cmp	r2, #0
 8011a12:	d015      	beq.n	8011a40 <quorem+0x108>
 8011a14:	9801      	ldr	r0, [sp, #4]
 8011a16:	b007      	add	sp, #28
 8011a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a1a:	6823      	ldr	r3, [r4, #0]
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d106      	bne.n	8011a2e <quorem+0xf6>
 8011a20:	9b00      	ldr	r3, [sp, #0]
 8011a22:	3b01      	subs	r3, #1
 8011a24:	9300      	str	r3, [sp, #0]
 8011a26:	9b02      	ldr	r3, [sp, #8]
 8011a28:	3c04      	subs	r4, #4
 8011a2a:	42a3      	cmp	r3, r4
 8011a2c:	d3f5      	bcc.n	8011a1a <quorem+0xe2>
 8011a2e:	9b00      	ldr	r3, [sp, #0]
 8011a30:	6133      	str	r3, [r6, #16]
 8011a32:	e7c7      	b.n	80119c4 <quorem+0x8c>
 8011a34:	681a      	ldr	r2, [r3, #0]
 8011a36:	2a00      	cmp	r2, #0
 8011a38:	d106      	bne.n	8011a48 <quorem+0x110>
 8011a3a:	9a00      	ldr	r2, [sp, #0]
 8011a3c:	3a01      	subs	r2, #1
 8011a3e:	9200      	str	r2, [sp, #0]
 8011a40:	9a02      	ldr	r2, [sp, #8]
 8011a42:	3b04      	subs	r3, #4
 8011a44:	429a      	cmp	r2, r3
 8011a46:	d3f5      	bcc.n	8011a34 <quorem+0xfc>
 8011a48:	9b00      	ldr	r3, [sp, #0]
 8011a4a:	6133      	str	r3, [r6, #16]
 8011a4c:	e7e2      	b.n	8011a14 <quorem+0xdc>
	...

08011a50 <_dtoa_r>:
 8011a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a52:	b09d      	sub	sp, #116	; 0x74
 8011a54:	9202      	str	r2, [sp, #8]
 8011a56:	9303      	str	r3, [sp, #12]
 8011a58:	9b02      	ldr	r3, [sp, #8]
 8011a5a:	9c03      	ldr	r4, [sp, #12]
 8011a5c:	9308      	str	r3, [sp, #32]
 8011a5e:	9409      	str	r4, [sp, #36]	; 0x24
 8011a60:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8011a62:	0007      	movs	r7, r0
 8011a64:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8011a66:	2c00      	cmp	r4, #0
 8011a68:	d10e      	bne.n	8011a88 <_dtoa_r+0x38>
 8011a6a:	2010      	movs	r0, #16
 8011a6c:	f000 fe1a 	bl	80126a4 <malloc>
 8011a70:	1e02      	subs	r2, r0, #0
 8011a72:	6278      	str	r0, [r7, #36]	; 0x24
 8011a74:	d104      	bne.n	8011a80 <_dtoa_r+0x30>
 8011a76:	21ea      	movs	r1, #234	; 0xea
 8011a78:	4bc7      	ldr	r3, [pc, #796]	; (8011d98 <_dtoa_r+0x348>)
 8011a7a:	48c8      	ldr	r0, [pc, #800]	; (8011d9c <_dtoa_r+0x34c>)
 8011a7c:	f7ff ff3e 	bl	80118fc <__assert_func>
 8011a80:	6044      	str	r4, [r0, #4]
 8011a82:	6084      	str	r4, [r0, #8]
 8011a84:	6004      	str	r4, [r0, #0]
 8011a86:	60c4      	str	r4, [r0, #12]
 8011a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a8a:	6819      	ldr	r1, [r3, #0]
 8011a8c:	2900      	cmp	r1, #0
 8011a8e:	d00a      	beq.n	8011aa6 <_dtoa_r+0x56>
 8011a90:	685a      	ldr	r2, [r3, #4]
 8011a92:	2301      	movs	r3, #1
 8011a94:	4093      	lsls	r3, r2
 8011a96:	604a      	str	r2, [r1, #4]
 8011a98:	608b      	str	r3, [r1, #8]
 8011a9a:	0038      	movs	r0, r7
 8011a9c:	f7fe fe72 	bl	8010784 <_Bfree>
 8011aa0:	2200      	movs	r2, #0
 8011aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011aa4:	601a      	str	r2, [r3, #0]
 8011aa6:	9b03      	ldr	r3, [sp, #12]
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	da20      	bge.n	8011aee <_dtoa_r+0x9e>
 8011aac:	2301      	movs	r3, #1
 8011aae:	602b      	str	r3, [r5, #0]
 8011ab0:	9b03      	ldr	r3, [sp, #12]
 8011ab2:	005b      	lsls	r3, r3, #1
 8011ab4:	085b      	lsrs	r3, r3, #1
 8011ab6:	9309      	str	r3, [sp, #36]	; 0x24
 8011ab8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8011aba:	4bb9      	ldr	r3, [pc, #740]	; (8011da0 <_dtoa_r+0x350>)
 8011abc:	4ab8      	ldr	r2, [pc, #736]	; (8011da0 <_dtoa_r+0x350>)
 8011abe:	402b      	ands	r3, r5
 8011ac0:	4293      	cmp	r3, r2
 8011ac2:	d117      	bne.n	8011af4 <_dtoa_r+0xa4>
 8011ac4:	4bb7      	ldr	r3, [pc, #732]	; (8011da4 <_dtoa_r+0x354>)
 8011ac6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8011ac8:	0328      	lsls	r0, r5, #12
 8011aca:	6013      	str	r3, [r2, #0]
 8011acc:	9b02      	ldr	r3, [sp, #8]
 8011ace:	0b00      	lsrs	r0, r0, #12
 8011ad0:	4318      	orrs	r0, r3
 8011ad2:	d101      	bne.n	8011ad8 <_dtoa_r+0x88>
 8011ad4:	f000 fdbf 	bl	8012656 <_dtoa_r+0xc06>
 8011ad8:	48b3      	ldr	r0, [pc, #716]	; (8011da8 <_dtoa_r+0x358>)
 8011ada:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011adc:	9006      	str	r0, [sp, #24]
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d002      	beq.n	8011ae8 <_dtoa_r+0x98>
 8011ae2:	4bb2      	ldr	r3, [pc, #712]	; (8011dac <_dtoa_r+0x35c>)
 8011ae4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8011ae6:	6013      	str	r3, [r2, #0]
 8011ae8:	9806      	ldr	r0, [sp, #24]
 8011aea:	b01d      	add	sp, #116	; 0x74
 8011aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011aee:	2300      	movs	r3, #0
 8011af0:	602b      	str	r3, [r5, #0]
 8011af2:	e7e1      	b.n	8011ab8 <_dtoa_r+0x68>
 8011af4:	9b08      	ldr	r3, [sp, #32]
 8011af6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8011af8:	9312      	str	r3, [sp, #72]	; 0x48
 8011afa:	9413      	str	r4, [sp, #76]	; 0x4c
 8011afc:	9812      	ldr	r0, [sp, #72]	; 0x48
 8011afe:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8011b00:	2200      	movs	r2, #0
 8011b02:	2300      	movs	r3, #0
 8011b04:	f7ee fca8 	bl	8000458 <__aeabi_dcmpeq>
 8011b08:	1e04      	subs	r4, r0, #0
 8011b0a:	d009      	beq.n	8011b20 <_dtoa_r+0xd0>
 8011b0c:	2301      	movs	r3, #1
 8011b0e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8011b10:	6013      	str	r3, [r2, #0]
 8011b12:	4ba7      	ldr	r3, [pc, #668]	; (8011db0 <_dtoa_r+0x360>)
 8011b14:	9306      	str	r3, [sp, #24]
 8011b16:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d0e5      	beq.n	8011ae8 <_dtoa_r+0x98>
 8011b1c:	4ba5      	ldr	r3, [pc, #660]	; (8011db4 <_dtoa_r+0x364>)
 8011b1e:	e7e1      	b.n	8011ae4 <_dtoa_r+0x94>
 8011b20:	ab1a      	add	r3, sp, #104	; 0x68
 8011b22:	9301      	str	r3, [sp, #4]
 8011b24:	ab1b      	add	r3, sp, #108	; 0x6c
 8011b26:	9300      	str	r3, [sp, #0]
 8011b28:	0038      	movs	r0, r7
 8011b2a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011b2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011b2e:	f7ff f9dd 	bl	8010eec <__d2b>
 8011b32:	006e      	lsls	r6, r5, #1
 8011b34:	9005      	str	r0, [sp, #20]
 8011b36:	0d76      	lsrs	r6, r6, #21
 8011b38:	d100      	bne.n	8011b3c <_dtoa_r+0xec>
 8011b3a:	e07c      	b.n	8011c36 <_dtoa_r+0x1e6>
 8011b3c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8011b3e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8011b40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011b42:	4a9d      	ldr	r2, [pc, #628]	; (8011db8 <_dtoa_r+0x368>)
 8011b44:	031b      	lsls	r3, r3, #12
 8011b46:	0b1b      	lsrs	r3, r3, #12
 8011b48:	431a      	orrs	r2, r3
 8011b4a:	0011      	movs	r1, r2
 8011b4c:	4b9b      	ldr	r3, [pc, #620]	; (8011dbc <_dtoa_r+0x36c>)
 8011b4e:	9418      	str	r4, [sp, #96]	; 0x60
 8011b50:	18f6      	adds	r6, r6, r3
 8011b52:	2200      	movs	r2, #0
 8011b54:	4b9a      	ldr	r3, [pc, #616]	; (8011dc0 <_dtoa_r+0x370>)
 8011b56:	f7f0 f9d3 	bl	8001f00 <__aeabi_dsub>
 8011b5a:	4a9a      	ldr	r2, [pc, #616]	; (8011dc4 <_dtoa_r+0x374>)
 8011b5c:	4b9a      	ldr	r3, [pc, #616]	; (8011dc8 <_dtoa_r+0x378>)
 8011b5e:	f7ef ff63 	bl	8001a28 <__aeabi_dmul>
 8011b62:	4a9a      	ldr	r2, [pc, #616]	; (8011dcc <_dtoa_r+0x37c>)
 8011b64:	4b9a      	ldr	r3, [pc, #616]	; (8011dd0 <_dtoa_r+0x380>)
 8011b66:	f7ef f821 	bl	8000bac <__aeabi_dadd>
 8011b6a:	0004      	movs	r4, r0
 8011b6c:	0030      	movs	r0, r6
 8011b6e:	000d      	movs	r5, r1
 8011b70:	f7f0 fdac 	bl	80026cc <__aeabi_i2d>
 8011b74:	4a97      	ldr	r2, [pc, #604]	; (8011dd4 <_dtoa_r+0x384>)
 8011b76:	4b98      	ldr	r3, [pc, #608]	; (8011dd8 <_dtoa_r+0x388>)
 8011b78:	f7ef ff56 	bl	8001a28 <__aeabi_dmul>
 8011b7c:	0002      	movs	r2, r0
 8011b7e:	000b      	movs	r3, r1
 8011b80:	0020      	movs	r0, r4
 8011b82:	0029      	movs	r1, r5
 8011b84:	f7ef f812 	bl	8000bac <__aeabi_dadd>
 8011b88:	0004      	movs	r4, r0
 8011b8a:	000d      	movs	r5, r1
 8011b8c:	f7f0 fd68 	bl	8002660 <__aeabi_d2iz>
 8011b90:	2200      	movs	r2, #0
 8011b92:	9002      	str	r0, [sp, #8]
 8011b94:	2300      	movs	r3, #0
 8011b96:	0020      	movs	r0, r4
 8011b98:	0029      	movs	r1, r5
 8011b9a:	f7ee fc63 	bl	8000464 <__aeabi_dcmplt>
 8011b9e:	2800      	cmp	r0, #0
 8011ba0:	d00b      	beq.n	8011bba <_dtoa_r+0x16a>
 8011ba2:	9802      	ldr	r0, [sp, #8]
 8011ba4:	f7f0 fd92 	bl	80026cc <__aeabi_i2d>
 8011ba8:	002b      	movs	r3, r5
 8011baa:	0022      	movs	r2, r4
 8011bac:	f7ee fc54 	bl	8000458 <__aeabi_dcmpeq>
 8011bb0:	4243      	negs	r3, r0
 8011bb2:	4158      	adcs	r0, r3
 8011bb4:	9b02      	ldr	r3, [sp, #8]
 8011bb6:	1a1b      	subs	r3, r3, r0
 8011bb8:	9302      	str	r3, [sp, #8]
 8011bba:	2301      	movs	r3, #1
 8011bbc:	9316      	str	r3, [sp, #88]	; 0x58
 8011bbe:	9b02      	ldr	r3, [sp, #8]
 8011bc0:	2b16      	cmp	r3, #22
 8011bc2:	d80f      	bhi.n	8011be4 <_dtoa_r+0x194>
 8011bc4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8011bc6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8011bc8:	00da      	lsls	r2, r3, #3
 8011bca:	4b84      	ldr	r3, [pc, #528]	; (8011ddc <_dtoa_r+0x38c>)
 8011bcc:	189b      	adds	r3, r3, r2
 8011bce:	681a      	ldr	r2, [r3, #0]
 8011bd0:	685b      	ldr	r3, [r3, #4]
 8011bd2:	f7ee fc47 	bl	8000464 <__aeabi_dcmplt>
 8011bd6:	2800      	cmp	r0, #0
 8011bd8:	d049      	beq.n	8011c6e <_dtoa_r+0x21e>
 8011bda:	9b02      	ldr	r3, [sp, #8]
 8011bdc:	3b01      	subs	r3, #1
 8011bde:	9302      	str	r3, [sp, #8]
 8011be0:	2300      	movs	r3, #0
 8011be2:	9316      	str	r3, [sp, #88]	; 0x58
 8011be4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8011be6:	1b9e      	subs	r6, r3, r6
 8011be8:	2300      	movs	r3, #0
 8011bea:	930a      	str	r3, [sp, #40]	; 0x28
 8011bec:	0033      	movs	r3, r6
 8011bee:	3b01      	subs	r3, #1
 8011bf0:	930d      	str	r3, [sp, #52]	; 0x34
 8011bf2:	d504      	bpl.n	8011bfe <_dtoa_r+0x1ae>
 8011bf4:	2301      	movs	r3, #1
 8011bf6:	1b9b      	subs	r3, r3, r6
 8011bf8:	930a      	str	r3, [sp, #40]	; 0x28
 8011bfa:	2300      	movs	r3, #0
 8011bfc:	930d      	str	r3, [sp, #52]	; 0x34
 8011bfe:	9b02      	ldr	r3, [sp, #8]
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	db36      	blt.n	8011c72 <_dtoa_r+0x222>
 8011c04:	9a02      	ldr	r2, [sp, #8]
 8011c06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011c08:	4694      	mov	ip, r2
 8011c0a:	4463      	add	r3, ip
 8011c0c:	930d      	str	r3, [sp, #52]	; 0x34
 8011c0e:	2300      	movs	r3, #0
 8011c10:	9215      	str	r2, [sp, #84]	; 0x54
 8011c12:	930e      	str	r3, [sp, #56]	; 0x38
 8011c14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011c16:	2401      	movs	r4, #1
 8011c18:	2b09      	cmp	r3, #9
 8011c1a:	d864      	bhi.n	8011ce6 <_dtoa_r+0x296>
 8011c1c:	2b05      	cmp	r3, #5
 8011c1e:	dd02      	ble.n	8011c26 <_dtoa_r+0x1d6>
 8011c20:	2400      	movs	r4, #0
 8011c22:	3b04      	subs	r3, #4
 8011c24:	9322      	str	r3, [sp, #136]	; 0x88
 8011c26:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011c28:	1e98      	subs	r0, r3, #2
 8011c2a:	2803      	cmp	r0, #3
 8011c2c:	d864      	bhi.n	8011cf8 <_dtoa_r+0x2a8>
 8011c2e:	f7ee fa79 	bl	8000124 <__gnu_thumb1_case_uqi>
 8011c32:	3829      	.short	0x3829
 8011c34:	5836      	.short	0x5836
 8011c36:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8011c38:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8011c3a:	189e      	adds	r6, r3, r2
 8011c3c:	4b68      	ldr	r3, [pc, #416]	; (8011de0 <_dtoa_r+0x390>)
 8011c3e:	18f2      	adds	r2, r6, r3
 8011c40:	2a20      	cmp	r2, #32
 8011c42:	dd0f      	ble.n	8011c64 <_dtoa_r+0x214>
 8011c44:	2340      	movs	r3, #64	; 0x40
 8011c46:	1a9b      	subs	r3, r3, r2
 8011c48:	409d      	lsls	r5, r3
 8011c4a:	4b66      	ldr	r3, [pc, #408]	; (8011de4 <_dtoa_r+0x394>)
 8011c4c:	9802      	ldr	r0, [sp, #8]
 8011c4e:	18f3      	adds	r3, r6, r3
 8011c50:	40d8      	lsrs	r0, r3
 8011c52:	4328      	orrs	r0, r5
 8011c54:	f7f0 fd6a 	bl	800272c <__aeabi_ui2d>
 8011c58:	2301      	movs	r3, #1
 8011c5a:	4c63      	ldr	r4, [pc, #396]	; (8011de8 <_dtoa_r+0x398>)
 8011c5c:	3e01      	subs	r6, #1
 8011c5e:	1909      	adds	r1, r1, r4
 8011c60:	9318      	str	r3, [sp, #96]	; 0x60
 8011c62:	e776      	b.n	8011b52 <_dtoa_r+0x102>
 8011c64:	2320      	movs	r3, #32
 8011c66:	9802      	ldr	r0, [sp, #8]
 8011c68:	1a9b      	subs	r3, r3, r2
 8011c6a:	4098      	lsls	r0, r3
 8011c6c:	e7f2      	b.n	8011c54 <_dtoa_r+0x204>
 8011c6e:	9016      	str	r0, [sp, #88]	; 0x58
 8011c70:	e7b8      	b.n	8011be4 <_dtoa_r+0x194>
 8011c72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c74:	9a02      	ldr	r2, [sp, #8]
 8011c76:	1a9b      	subs	r3, r3, r2
 8011c78:	930a      	str	r3, [sp, #40]	; 0x28
 8011c7a:	4253      	negs	r3, r2
 8011c7c:	930e      	str	r3, [sp, #56]	; 0x38
 8011c7e:	2300      	movs	r3, #0
 8011c80:	9315      	str	r3, [sp, #84]	; 0x54
 8011c82:	e7c7      	b.n	8011c14 <_dtoa_r+0x1c4>
 8011c84:	2300      	movs	r3, #0
 8011c86:	930f      	str	r3, [sp, #60]	; 0x3c
 8011c88:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011c8a:	930c      	str	r3, [sp, #48]	; 0x30
 8011c8c:	9307      	str	r3, [sp, #28]
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	dc13      	bgt.n	8011cba <_dtoa_r+0x26a>
 8011c92:	2301      	movs	r3, #1
 8011c94:	001a      	movs	r2, r3
 8011c96:	930c      	str	r3, [sp, #48]	; 0x30
 8011c98:	9307      	str	r3, [sp, #28]
 8011c9a:	9223      	str	r2, [sp, #140]	; 0x8c
 8011c9c:	e00d      	b.n	8011cba <_dtoa_r+0x26a>
 8011c9e:	2301      	movs	r3, #1
 8011ca0:	e7f1      	b.n	8011c86 <_dtoa_r+0x236>
 8011ca2:	2300      	movs	r3, #0
 8011ca4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8011ca6:	930f      	str	r3, [sp, #60]	; 0x3c
 8011ca8:	4694      	mov	ip, r2
 8011caa:	9b02      	ldr	r3, [sp, #8]
 8011cac:	4463      	add	r3, ip
 8011cae:	930c      	str	r3, [sp, #48]	; 0x30
 8011cb0:	3301      	adds	r3, #1
 8011cb2:	9307      	str	r3, [sp, #28]
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	dc00      	bgt.n	8011cba <_dtoa_r+0x26a>
 8011cb8:	2301      	movs	r3, #1
 8011cba:	2200      	movs	r2, #0
 8011cbc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011cbe:	6042      	str	r2, [r0, #4]
 8011cc0:	3204      	adds	r2, #4
 8011cc2:	0015      	movs	r5, r2
 8011cc4:	3514      	adds	r5, #20
 8011cc6:	6841      	ldr	r1, [r0, #4]
 8011cc8:	429d      	cmp	r5, r3
 8011cca:	d919      	bls.n	8011d00 <_dtoa_r+0x2b0>
 8011ccc:	0038      	movs	r0, r7
 8011cce:	f7fe fd15 	bl	80106fc <_Balloc>
 8011cd2:	9006      	str	r0, [sp, #24]
 8011cd4:	2800      	cmp	r0, #0
 8011cd6:	d117      	bne.n	8011d08 <_dtoa_r+0x2b8>
 8011cd8:	21d5      	movs	r1, #213	; 0xd5
 8011cda:	0002      	movs	r2, r0
 8011cdc:	4b43      	ldr	r3, [pc, #268]	; (8011dec <_dtoa_r+0x39c>)
 8011cde:	0049      	lsls	r1, r1, #1
 8011ce0:	e6cb      	b.n	8011a7a <_dtoa_r+0x2a>
 8011ce2:	2301      	movs	r3, #1
 8011ce4:	e7de      	b.n	8011ca4 <_dtoa_r+0x254>
 8011ce6:	2300      	movs	r3, #0
 8011ce8:	940f      	str	r4, [sp, #60]	; 0x3c
 8011cea:	9322      	str	r3, [sp, #136]	; 0x88
 8011cec:	3b01      	subs	r3, #1
 8011cee:	930c      	str	r3, [sp, #48]	; 0x30
 8011cf0:	9307      	str	r3, [sp, #28]
 8011cf2:	2200      	movs	r2, #0
 8011cf4:	3313      	adds	r3, #19
 8011cf6:	e7d0      	b.n	8011c9a <_dtoa_r+0x24a>
 8011cf8:	2301      	movs	r3, #1
 8011cfa:	930f      	str	r3, [sp, #60]	; 0x3c
 8011cfc:	3b02      	subs	r3, #2
 8011cfe:	e7f6      	b.n	8011cee <_dtoa_r+0x29e>
 8011d00:	3101      	adds	r1, #1
 8011d02:	6041      	str	r1, [r0, #4]
 8011d04:	0052      	lsls	r2, r2, #1
 8011d06:	e7dc      	b.n	8011cc2 <_dtoa_r+0x272>
 8011d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d0a:	9a06      	ldr	r2, [sp, #24]
 8011d0c:	601a      	str	r2, [r3, #0]
 8011d0e:	9b07      	ldr	r3, [sp, #28]
 8011d10:	2b0e      	cmp	r3, #14
 8011d12:	d900      	bls.n	8011d16 <_dtoa_r+0x2c6>
 8011d14:	e0eb      	b.n	8011eee <_dtoa_r+0x49e>
 8011d16:	2c00      	cmp	r4, #0
 8011d18:	d100      	bne.n	8011d1c <_dtoa_r+0x2cc>
 8011d1a:	e0e8      	b.n	8011eee <_dtoa_r+0x49e>
 8011d1c:	9b02      	ldr	r3, [sp, #8]
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	dd68      	ble.n	8011df4 <_dtoa_r+0x3a4>
 8011d22:	001a      	movs	r2, r3
 8011d24:	210f      	movs	r1, #15
 8011d26:	4b2d      	ldr	r3, [pc, #180]	; (8011ddc <_dtoa_r+0x38c>)
 8011d28:	400a      	ands	r2, r1
 8011d2a:	00d2      	lsls	r2, r2, #3
 8011d2c:	189b      	adds	r3, r3, r2
 8011d2e:	681d      	ldr	r5, [r3, #0]
 8011d30:	685e      	ldr	r6, [r3, #4]
 8011d32:	9b02      	ldr	r3, [sp, #8]
 8011d34:	111c      	asrs	r4, r3, #4
 8011d36:	2302      	movs	r3, #2
 8011d38:	9310      	str	r3, [sp, #64]	; 0x40
 8011d3a:	9b02      	ldr	r3, [sp, #8]
 8011d3c:	05db      	lsls	r3, r3, #23
 8011d3e:	d50b      	bpl.n	8011d58 <_dtoa_r+0x308>
 8011d40:	4b2b      	ldr	r3, [pc, #172]	; (8011df0 <_dtoa_r+0x3a0>)
 8011d42:	400c      	ands	r4, r1
 8011d44:	6a1a      	ldr	r2, [r3, #32]
 8011d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d48:	9812      	ldr	r0, [sp, #72]	; 0x48
 8011d4a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8011d4c:	f7ef fa6a 	bl	8001224 <__aeabi_ddiv>
 8011d50:	2303      	movs	r3, #3
 8011d52:	9008      	str	r0, [sp, #32]
 8011d54:	9109      	str	r1, [sp, #36]	; 0x24
 8011d56:	9310      	str	r3, [sp, #64]	; 0x40
 8011d58:	4b25      	ldr	r3, [pc, #148]	; (8011df0 <_dtoa_r+0x3a0>)
 8011d5a:	9314      	str	r3, [sp, #80]	; 0x50
 8011d5c:	2c00      	cmp	r4, #0
 8011d5e:	d108      	bne.n	8011d72 <_dtoa_r+0x322>
 8011d60:	9808      	ldr	r0, [sp, #32]
 8011d62:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011d64:	002a      	movs	r2, r5
 8011d66:	0033      	movs	r3, r6
 8011d68:	f7ef fa5c 	bl	8001224 <__aeabi_ddiv>
 8011d6c:	9008      	str	r0, [sp, #32]
 8011d6e:	9109      	str	r1, [sp, #36]	; 0x24
 8011d70:	e05c      	b.n	8011e2c <_dtoa_r+0x3dc>
 8011d72:	2301      	movs	r3, #1
 8011d74:	421c      	tst	r4, r3
 8011d76:	d00b      	beq.n	8011d90 <_dtoa_r+0x340>
 8011d78:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011d7a:	0028      	movs	r0, r5
 8011d7c:	3301      	adds	r3, #1
 8011d7e:	9310      	str	r3, [sp, #64]	; 0x40
 8011d80:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011d82:	0031      	movs	r1, r6
 8011d84:	681a      	ldr	r2, [r3, #0]
 8011d86:	685b      	ldr	r3, [r3, #4]
 8011d88:	f7ef fe4e 	bl	8001a28 <__aeabi_dmul>
 8011d8c:	0005      	movs	r5, r0
 8011d8e:	000e      	movs	r6, r1
 8011d90:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011d92:	1064      	asrs	r4, r4, #1
 8011d94:	3308      	adds	r3, #8
 8011d96:	e7e0      	b.n	8011d5a <_dtoa_r+0x30a>
 8011d98:	08013a2c 	.word	0x08013a2c
 8011d9c:	08013c1a 	.word	0x08013c1a
 8011da0:	7ff00000 	.word	0x7ff00000
 8011da4:	0000270f 	.word	0x0000270f
 8011da8:	08013c14 	.word	0x08013c14
 8011dac:	08013c17 	.word	0x08013c17
 8011db0:	08013c18 	.word	0x08013c18
 8011db4:	08013c19 	.word	0x08013c19
 8011db8:	3ff00000 	.word	0x3ff00000
 8011dbc:	fffffc01 	.word	0xfffffc01
 8011dc0:	3ff80000 	.word	0x3ff80000
 8011dc4:	636f4361 	.word	0x636f4361
 8011dc8:	3fd287a7 	.word	0x3fd287a7
 8011dcc:	8b60c8b3 	.word	0x8b60c8b3
 8011dd0:	3fc68a28 	.word	0x3fc68a28
 8011dd4:	509f79fb 	.word	0x509f79fb
 8011dd8:	3fd34413 	.word	0x3fd34413
 8011ddc:	08013ac8 	.word	0x08013ac8
 8011de0:	00000432 	.word	0x00000432
 8011de4:	00000412 	.word	0x00000412
 8011de8:	fe100000 	.word	0xfe100000
 8011dec:	080139a1 	.word	0x080139a1
 8011df0:	08013aa0 	.word	0x08013aa0
 8011df4:	2302      	movs	r3, #2
 8011df6:	9310      	str	r3, [sp, #64]	; 0x40
 8011df8:	9b02      	ldr	r3, [sp, #8]
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d016      	beq.n	8011e2c <_dtoa_r+0x3dc>
 8011dfe:	9812      	ldr	r0, [sp, #72]	; 0x48
 8011e00:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8011e02:	425c      	negs	r4, r3
 8011e04:	230f      	movs	r3, #15
 8011e06:	4ab6      	ldr	r2, [pc, #728]	; (80120e0 <_dtoa_r+0x690>)
 8011e08:	4023      	ands	r3, r4
 8011e0a:	00db      	lsls	r3, r3, #3
 8011e0c:	18d3      	adds	r3, r2, r3
 8011e0e:	681a      	ldr	r2, [r3, #0]
 8011e10:	685b      	ldr	r3, [r3, #4]
 8011e12:	f7ef fe09 	bl	8001a28 <__aeabi_dmul>
 8011e16:	2601      	movs	r6, #1
 8011e18:	2300      	movs	r3, #0
 8011e1a:	9008      	str	r0, [sp, #32]
 8011e1c:	9109      	str	r1, [sp, #36]	; 0x24
 8011e1e:	4db1      	ldr	r5, [pc, #708]	; (80120e4 <_dtoa_r+0x694>)
 8011e20:	1124      	asrs	r4, r4, #4
 8011e22:	2c00      	cmp	r4, #0
 8011e24:	d000      	beq.n	8011e28 <_dtoa_r+0x3d8>
 8011e26:	e094      	b.n	8011f52 <_dtoa_r+0x502>
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d19f      	bne.n	8011d6c <_dtoa_r+0x31c>
 8011e2c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d100      	bne.n	8011e34 <_dtoa_r+0x3e4>
 8011e32:	e09b      	b.n	8011f6c <_dtoa_r+0x51c>
 8011e34:	9c08      	ldr	r4, [sp, #32]
 8011e36:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8011e38:	2200      	movs	r2, #0
 8011e3a:	0020      	movs	r0, r4
 8011e3c:	0029      	movs	r1, r5
 8011e3e:	4baa      	ldr	r3, [pc, #680]	; (80120e8 <_dtoa_r+0x698>)
 8011e40:	f7ee fb10 	bl	8000464 <__aeabi_dcmplt>
 8011e44:	2800      	cmp	r0, #0
 8011e46:	d100      	bne.n	8011e4a <_dtoa_r+0x3fa>
 8011e48:	e090      	b.n	8011f6c <_dtoa_r+0x51c>
 8011e4a:	9b07      	ldr	r3, [sp, #28]
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d100      	bne.n	8011e52 <_dtoa_r+0x402>
 8011e50:	e08c      	b.n	8011f6c <_dtoa_r+0x51c>
 8011e52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	dd46      	ble.n	8011ee6 <_dtoa_r+0x496>
 8011e58:	9b02      	ldr	r3, [sp, #8]
 8011e5a:	2200      	movs	r2, #0
 8011e5c:	0020      	movs	r0, r4
 8011e5e:	0029      	movs	r1, r5
 8011e60:	1e5e      	subs	r6, r3, #1
 8011e62:	4ba2      	ldr	r3, [pc, #648]	; (80120ec <_dtoa_r+0x69c>)
 8011e64:	f7ef fde0 	bl	8001a28 <__aeabi_dmul>
 8011e68:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011e6a:	9008      	str	r0, [sp, #32]
 8011e6c:	9109      	str	r1, [sp, #36]	; 0x24
 8011e6e:	3301      	adds	r3, #1
 8011e70:	9310      	str	r3, [sp, #64]	; 0x40
 8011e72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011e74:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011e76:	9c08      	ldr	r4, [sp, #32]
 8011e78:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8011e7a:	9314      	str	r3, [sp, #80]	; 0x50
 8011e7c:	f7f0 fc26 	bl	80026cc <__aeabi_i2d>
 8011e80:	0022      	movs	r2, r4
 8011e82:	002b      	movs	r3, r5
 8011e84:	f7ef fdd0 	bl	8001a28 <__aeabi_dmul>
 8011e88:	2200      	movs	r2, #0
 8011e8a:	4b99      	ldr	r3, [pc, #612]	; (80120f0 <_dtoa_r+0x6a0>)
 8011e8c:	f7ee fe8e 	bl	8000bac <__aeabi_dadd>
 8011e90:	9010      	str	r0, [sp, #64]	; 0x40
 8011e92:	9111      	str	r1, [sp, #68]	; 0x44
 8011e94:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011e96:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011e98:	9208      	str	r2, [sp, #32]
 8011e9a:	9309      	str	r3, [sp, #36]	; 0x24
 8011e9c:	4a95      	ldr	r2, [pc, #596]	; (80120f4 <_dtoa_r+0x6a4>)
 8011e9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011ea0:	4694      	mov	ip, r2
 8011ea2:	4463      	add	r3, ip
 8011ea4:	9317      	str	r3, [sp, #92]	; 0x5c
 8011ea6:	9309      	str	r3, [sp, #36]	; 0x24
 8011ea8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d161      	bne.n	8011f72 <_dtoa_r+0x522>
 8011eae:	2200      	movs	r2, #0
 8011eb0:	0020      	movs	r0, r4
 8011eb2:	0029      	movs	r1, r5
 8011eb4:	4b90      	ldr	r3, [pc, #576]	; (80120f8 <_dtoa_r+0x6a8>)
 8011eb6:	f7f0 f823 	bl	8001f00 <__aeabi_dsub>
 8011eba:	9a08      	ldr	r2, [sp, #32]
 8011ebc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011ebe:	0004      	movs	r4, r0
 8011ec0:	000d      	movs	r5, r1
 8011ec2:	f7ee fae3 	bl	800048c <__aeabi_dcmpgt>
 8011ec6:	2800      	cmp	r0, #0
 8011ec8:	d000      	beq.n	8011ecc <_dtoa_r+0x47c>
 8011eca:	e2af      	b.n	801242c <_dtoa_r+0x9dc>
 8011ecc:	488b      	ldr	r0, [pc, #556]	; (80120fc <_dtoa_r+0x6ac>)
 8011ece:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011ed0:	4684      	mov	ip, r0
 8011ed2:	4461      	add	r1, ip
 8011ed4:	000b      	movs	r3, r1
 8011ed6:	0020      	movs	r0, r4
 8011ed8:	0029      	movs	r1, r5
 8011eda:	9a08      	ldr	r2, [sp, #32]
 8011edc:	f7ee fac2 	bl	8000464 <__aeabi_dcmplt>
 8011ee0:	2800      	cmp	r0, #0
 8011ee2:	d000      	beq.n	8011ee6 <_dtoa_r+0x496>
 8011ee4:	e29f      	b.n	8012426 <_dtoa_r+0x9d6>
 8011ee6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011ee8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8011eea:	9308      	str	r3, [sp, #32]
 8011eec:	9409      	str	r4, [sp, #36]	; 0x24
 8011eee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	da00      	bge.n	8011ef6 <_dtoa_r+0x4a6>
 8011ef4:	e172      	b.n	80121dc <_dtoa_r+0x78c>
 8011ef6:	9a02      	ldr	r2, [sp, #8]
 8011ef8:	2a0e      	cmp	r2, #14
 8011efa:	dd00      	ble.n	8011efe <_dtoa_r+0x4ae>
 8011efc:	e16e      	b.n	80121dc <_dtoa_r+0x78c>
 8011efe:	4b78      	ldr	r3, [pc, #480]	; (80120e0 <_dtoa_r+0x690>)
 8011f00:	00d2      	lsls	r2, r2, #3
 8011f02:	189b      	adds	r3, r3, r2
 8011f04:	685c      	ldr	r4, [r3, #4]
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	930a      	str	r3, [sp, #40]	; 0x28
 8011f0a:	940b      	str	r4, [sp, #44]	; 0x2c
 8011f0c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	db00      	blt.n	8011f14 <_dtoa_r+0x4c4>
 8011f12:	e0f7      	b.n	8012104 <_dtoa_r+0x6b4>
 8011f14:	9b07      	ldr	r3, [sp, #28]
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	dd00      	ble.n	8011f1c <_dtoa_r+0x4cc>
 8011f1a:	e0f3      	b.n	8012104 <_dtoa_r+0x6b4>
 8011f1c:	d000      	beq.n	8011f20 <_dtoa_r+0x4d0>
 8011f1e:	e282      	b.n	8012426 <_dtoa_r+0x9d6>
 8011f20:	980a      	ldr	r0, [sp, #40]	; 0x28
 8011f22:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011f24:	2200      	movs	r2, #0
 8011f26:	4b74      	ldr	r3, [pc, #464]	; (80120f8 <_dtoa_r+0x6a8>)
 8011f28:	f7ef fd7e 	bl	8001a28 <__aeabi_dmul>
 8011f2c:	9a08      	ldr	r2, [sp, #32]
 8011f2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f30:	f7ee fab6 	bl	80004a0 <__aeabi_dcmpge>
 8011f34:	9e07      	ldr	r6, [sp, #28]
 8011f36:	0035      	movs	r5, r6
 8011f38:	2800      	cmp	r0, #0
 8011f3a:	d000      	beq.n	8011f3e <_dtoa_r+0x4ee>
 8011f3c:	e259      	b.n	80123f2 <_dtoa_r+0x9a2>
 8011f3e:	9b06      	ldr	r3, [sp, #24]
 8011f40:	9a06      	ldr	r2, [sp, #24]
 8011f42:	3301      	adds	r3, #1
 8011f44:	9308      	str	r3, [sp, #32]
 8011f46:	2331      	movs	r3, #49	; 0x31
 8011f48:	7013      	strb	r3, [r2, #0]
 8011f4a:	9b02      	ldr	r3, [sp, #8]
 8011f4c:	3301      	adds	r3, #1
 8011f4e:	9302      	str	r3, [sp, #8]
 8011f50:	e254      	b.n	80123fc <_dtoa_r+0x9ac>
 8011f52:	4234      	tst	r4, r6
 8011f54:	d007      	beq.n	8011f66 <_dtoa_r+0x516>
 8011f56:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011f58:	3301      	adds	r3, #1
 8011f5a:	9310      	str	r3, [sp, #64]	; 0x40
 8011f5c:	682a      	ldr	r2, [r5, #0]
 8011f5e:	686b      	ldr	r3, [r5, #4]
 8011f60:	f7ef fd62 	bl	8001a28 <__aeabi_dmul>
 8011f64:	0033      	movs	r3, r6
 8011f66:	1064      	asrs	r4, r4, #1
 8011f68:	3508      	adds	r5, #8
 8011f6a:	e75a      	b.n	8011e22 <_dtoa_r+0x3d2>
 8011f6c:	9e02      	ldr	r6, [sp, #8]
 8011f6e:	9b07      	ldr	r3, [sp, #28]
 8011f70:	e780      	b.n	8011e74 <_dtoa_r+0x424>
 8011f72:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011f74:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011f76:	1e5a      	subs	r2, r3, #1
 8011f78:	4b59      	ldr	r3, [pc, #356]	; (80120e0 <_dtoa_r+0x690>)
 8011f7a:	00d2      	lsls	r2, r2, #3
 8011f7c:	189b      	adds	r3, r3, r2
 8011f7e:	681a      	ldr	r2, [r3, #0]
 8011f80:	685b      	ldr	r3, [r3, #4]
 8011f82:	2900      	cmp	r1, #0
 8011f84:	d051      	beq.n	801202a <_dtoa_r+0x5da>
 8011f86:	2000      	movs	r0, #0
 8011f88:	495d      	ldr	r1, [pc, #372]	; (8012100 <_dtoa_r+0x6b0>)
 8011f8a:	f7ef f94b 	bl	8001224 <__aeabi_ddiv>
 8011f8e:	9a08      	ldr	r2, [sp, #32]
 8011f90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f92:	f7ef ffb5 	bl	8001f00 <__aeabi_dsub>
 8011f96:	9a06      	ldr	r2, [sp, #24]
 8011f98:	9b06      	ldr	r3, [sp, #24]
 8011f9a:	4694      	mov	ip, r2
 8011f9c:	9317      	str	r3, [sp, #92]	; 0x5c
 8011f9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011fa0:	9010      	str	r0, [sp, #64]	; 0x40
 8011fa2:	9111      	str	r1, [sp, #68]	; 0x44
 8011fa4:	4463      	add	r3, ip
 8011fa6:	9319      	str	r3, [sp, #100]	; 0x64
 8011fa8:	0029      	movs	r1, r5
 8011faa:	0020      	movs	r0, r4
 8011fac:	f7f0 fb58 	bl	8002660 <__aeabi_d2iz>
 8011fb0:	9014      	str	r0, [sp, #80]	; 0x50
 8011fb2:	f7f0 fb8b 	bl	80026cc <__aeabi_i2d>
 8011fb6:	0002      	movs	r2, r0
 8011fb8:	000b      	movs	r3, r1
 8011fba:	0020      	movs	r0, r4
 8011fbc:	0029      	movs	r1, r5
 8011fbe:	f7ef ff9f 	bl	8001f00 <__aeabi_dsub>
 8011fc2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011fc4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011fc6:	3301      	adds	r3, #1
 8011fc8:	9308      	str	r3, [sp, #32]
 8011fca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011fcc:	0004      	movs	r4, r0
 8011fce:	3330      	adds	r3, #48	; 0x30
 8011fd0:	7013      	strb	r3, [r2, #0]
 8011fd2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011fd4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011fd6:	000d      	movs	r5, r1
 8011fd8:	f7ee fa44 	bl	8000464 <__aeabi_dcmplt>
 8011fdc:	2800      	cmp	r0, #0
 8011fde:	d175      	bne.n	80120cc <_dtoa_r+0x67c>
 8011fe0:	0022      	movs	r2, r4
 8011fe2:	002b      	movs	r3, r5
 8011fe4:	2000      	movs	r0, #0
 8011fe6:	4940      	ldr	r1, [pc, #256]	; (80120e8 <_dtoa_r+0x698>)
 8011fe8:	f7ef ff8a 	bl	8001f00 <__aeabi_dsub>
 8011fec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011fee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011ff0:	f7ee fa38 	bl	8000464 <__aeabi_dcmplt>
 8011ff4:	2800      	cmp	r0, #0
 8011ff6:	d000      	beq.n	8011ffa <_dtoa_r+0x5aa>
 8011ff8:	e0d2      	b.n	80121a0 <_dtoa_r+0x750>
 8011ffa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011ffc:	9a08      	ldr	r2, [sp, #32]
 8011ffe:	4293      	cmp	r3, r2
 8012000:	d100      	bne.n	8012004 <_dtoa_r+0x5b4>
 8012002:	e770      	b.n	8011ee6 <_dtoa_r+0x496>
 8012004:	9810      	ldr	r0, [sp, #64]	; 0x40
 8012006:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012008:	2200      	movs	r2, #0
 801200a:	4b38      	ldr	r3, [pc, #224]	; (80120ec <_dtoa_r+0x69c>)
 801200c:	f7ef fd0c 	bl	8001a28 <__aeabi_dmul>
 8012010:	4b36      	ldr	r3, [pc, #216]	; (80120ec <_dtoa_r+0x69c>)
 8012012:	9010      	str	r0, [sp, #64]	; 0x40
 8012014:	9111      	str	r1, [sp, #68]	; 0x44
 8012016:	2200      	movs	r2, #0
 8012018:	0020      	movs	r0, r4
 801201a:	0029      	movs	r1, r5
 801201c:	f7ef fd04 	bl	8001a28 <__aeabi_dmul>
 8012020:	9b08      	ldr	r3, [sp, #32]
 8012022:	0004      	movs	r4, r0
 8012024:	000d      	movs	r5, r1
 8012026:	9317      	str	r3, [sp, #92]	; 0x5c
 8012028:	e7be      	b.n	8011fa8 <_dtoa_r+0x558>
 801202a:	9808      	ldr	r0, [sp, #32]
 801202c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801202e:	f7ef fcfb 	bl	8001a28 <__aeabi_dmul>
 8012032:	9a06      	ldr	r2, [sp, #24]
 8012034:	9b06      	ldr	r3, [sp, #24]
 8012036:	4694      	mov	ip, r2
 8012038:	9308      	str	r3, [sp, #32]
 801203a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801203c:	9010      	str	r0, [sp, #64]	; 0x40
 801203e:	9111      	str	r1, [sp, #68]	; 0x44
 8012040:	4463      	add	r3, ip
 8012042:	9319      	str	r3, [sp, #100]	; 0x64
 8012044:	0029      	movs	r1, r5
 8012046:	0020      	movs	r0, r4
 8012048:	f7f0 fb0a 	bl	8002660 <__aeabi_d2iz>
 801204c:	9017      	str	r0, [sp, #92]	; 0x5c
 801204e:	f7f0 fb3d 	bl	80026cc <__aeabi_i2d>
 8012052:	0002      	movs	r2, r0
 8012054:	000b      	movs	r3, r1
 8012056:	0020      	movs	r0, r4
 8012058:	0029      	movs	r1, r5
 801205a:	f7ef ff51 	bl	8001f00 <__aeabi_dsub>
 801205e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012060:	9a08      	ldr	r2, [sp, #32]
 8012062:	3330      	adds	r3, #48	; 0x30
 8012064:	7013      	strb	r3, [r2, #0]
 8012066:	0013      	movs	r3, r2
 8012068:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801206a:	3301      	adds	r3, #1
 801206c:	0004      	movs	r4, r0
 801206e:	000d      	movs	r5, r1
 8012070:	9308      	str	r3, [sp, #32]
 8012072:	4293      	cmp	r3, r2
 8012074:	d12c      	bne.n	80120d0 <_dtoa_r+0x680>
 8012076:	9810      	ldr	r0, [sp, #64]	; 0x40
 8012078:	9911      	ldr	r1, [sp, #68]	; 0x44
 801207a:	9a06      	ldr	r2, [sp, #24]
 801207c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801207e:	4694      	mov	ip, r2
 8012080:	4463      	add	r3, ip
 8012082:	2200      	movs	r2, #0
 8012084:	9308      	str	r3, [sp, #32]
 8012086:	4b1e      	ldr	r3, [pc, #120]	; (8012100 <_dtoa_r+0x6b0>)
 8012088:	f7ee fd90 	bl	8000bac <__aeabi_dadd>
 801208c:	0002      	movs	r2, r0
 801208e:	000b      	movs	r3, r1
 8012090:	0020      	movs	r0, r4
 8012092:	0029      	movs	r1, r5
 8012094:	f7ee f9fa 	bl	800048c <__aeabi_dcmpgt>
 8012098:	2800      	cmp	r0, #0
 801209a:	d000      	beq.n	801209e <_dtoa_r+0x64e>
 801209c:	e080      	b.n	80121a0 <_dtoa_r+0x750>
 801209e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80120a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80120a2:	2000      	movs	r0, #0
 80120a4:	4916      	ldr	r1, [pc, #88]	; (8012100 <_dtoa_r+0x6b0>)
 80120a6:	f7ef ff2b 	bl	8001f00 <__aeabi_dsub>
 80120aa:	0002      	movs	r2, r0
 80120ac:	000b      	movs	r3, r1
 80120ae:	0020      	movs	r0, r4
 80120b0:	0029      	movs	r1, r5
 80120b2:	f7ee f9d7 	bl	8000464 <__aeabi_dcmplt>
 80120b6:	2800      	cmp	r0, #0
 80120b8:	d100      	bne.n	80120bc <_dtoa_r+0x66c>
 80120ba:	e714      	b.n	8011ee6 <_dtoa_r+0x496>
 80120bc:	9b08      	ldr	r3, [sp, #32]
 80120be:	001a      	movs	r2, r3
 80120c0:	3a01      	subs	r2, #1
 80120c2:	9208      	str	r2, [sp, #32]
 80120c4:	7812      	ldrb	r2, [r2, #0]
 80120c6:	2a30      	cmp	r2, #48	; 0x30
 80120c8:	d0f8      	beq.n	80120bc <_dtoa_r+0x66c>
 80120ca:	9308      	str	r3, [sp, #32]
 80120cc:	9602      	str	r6, [sp, #8]
 80120ce:	e055      	b.n	801217c <_dtoa_r+0x72c>
 80120d0:	2200      	movs	r2, #0
 80120d2:	4b06      	ldr	r3, [pc, #24]	; (80120ec <_dtoa_r+0x69c>)
 80120d4:	f7ef fca8 	bl	8001a28 <__aeabi_dmul>
 80120d8:	0004      	movs	r4, r0
 80120da:	000d      	movs	r5, r1
 80120dc:	e7b2      	b.n	8012044 <_dtoa_r+0x5f4>
 80120de:	46c0      	nop			; (mov r8, r8)
 80120e0:	08013ac8 	.word	0x08013ac8
 80120e4:	08013aa0 	.word	0x08013aa0
 80120e8:	3ff00000 	.word	0x3ff00000
 80120ec:	40240000 	.word	0x40240000
 80120f0:	401c0000 	.word	0x401c0000
 80120f4:	fcc00000 	.word	0xfcc00000
 80120f8:	40140000 	.word	0x40140000
 80120fc:	7cc00000 	.word	0x7cc00000
 8012100:	3fe00000 	.word	0x3fe00000
 8012104:	9b07      	ldr	r3, [sp, #28]
 8012106:	9e06      	ldr	r6, [sp, #24]
 8012108:	3b01      	subs	r3, #1
 801210a:	199b      	adds	r3, r3, r6
 801210c:	930c      	str	r3, [sp, #48]	; 0x30
 801210e:	9c08      	ldr	r4, [sp, #32]
 8012110:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8012112:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012114:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012116:	0020      	movs	r0, r4
 8012118:	0029      	movs	r1, r5
 801211a:	f7ef f883 	bl	8001224 <__aeabi_ddiv>
 801211e:	f7f0 fa9f 	bl	8002660 <__aeabi_d2iz>
 8012122:	9007      	str	r0, [sp, #28]
 8012124:	f7f0 fad2 	bl	80026cc <__aeabi_i2d>
 8012128:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801212a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801212c:	f7ef fc7c 	bl	8001a28 <__aeabi_dmul>
 8012130:	0002      	movs	r2, r0
 8012132:	000b      	movs	r3, r1
 8012134:	0020      	movs	r0, r4
 8012136:	0029      	movs	r1, r5
 8012138:	f7ef fee2 	bl	8001f00 <__aeabi_dsub>
 801213c:	0033      	movs	r3, r6
 801213e:	9a07      	ldr	r2, [sp, #28]
 8012140:	3601      	adds	r6, #1
 8012142:	3230      	adds	r2, #48	; 0x30
 8012144:	701a      	strb	r2, [r3, #0]
 8012146:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012148:	9608      	str	r6, [sp, #32]
 801214a:	429a      	cmp	r2, r3
 801214c:	d139      	bne.n	80121c2 <_dtoa_r+0x772>
 801214e:	0002      	movs	r2, r0
 8012150:	000b      	movs	r3, r1
 8012152:	f7ee fd2b 	bl	8000bac <__aeabi_dadd>
 8012156:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012158:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801215a:	0004      	movs	r4, r0
 801215c:	000d      	movs	r5, r1
 801215e:	f7ee f995 	bl	800048c <__aeabi_dcmpgt>
 8012162:	2800      	cmp	r0, #0
 8012164:	d11b      	bne.n	801219e <_dtoa_r+0x74e>
 8012166:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012168:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801216a:	0020      	movs	r0, r4
 801216c:	0029      	movs	r1, r5
 801216e:	f7ee f973 	bl	8000458 <__aeabi_dcmpeq>
 8012172:	2800      	cmp	r0, #0
 8012174:	d002      	beq.n	801217c <_dtoa_r+0x72c>
 8012176:	9b07      	ldr	r3, [sp, #28]
 8012178:	07db      	lsls	r3, r3, #31
 801217a:	d410      	bmi.n	801219e <_dtoa_r+0x74e>
 801217c:	0038      	movs	r0, r7
 801217e:	9905      	ldr	r1, [sp, #20]
 8012180:	f7fe fb00 	bl	8010784 <_Bfree>
 8012184:	2300      	movs	r3, #0
 8012186:	9a08      	ldr	r2, [sp, #32]
 8012188:	9802      	ldr	r0, [sp, #8]
 801218a:	7013      	strb	r3, [r2, #0]
 801218c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801218e:	3001      	adds	r0, #1
 8012190:	6018      	str	r0, [r3, #0]
 8012192:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8012194:	2b00      	cmp	r3, #0
 8012196:	d100      	bne.n	801219a <_dtoa_r+0x74a>
 8012198:	e4a6      	b.n	8011ae8 <_dtoa_r+0x98>
 801219a:	601a      	str	r2, [r3, #0]
 801219c:	e4a4      	b.n	8011ae8 <_dtoa_r+0x98>
 801219e:	9e02      	ldr	r6, [sp, #8]
 80121a0:	9b08      	ldr	r3, [sp, #32]
 80121a2:	9308      	str	r3, [sp, #32]
 80121a4:	3b01      	subs	r3, #1
 80121a6:	781a      	ldrb	r2, [r3, #0]
 80121a8:	2a39      	cmp	r2, #57	; 0x39
 80121aa:	d106      	bne.n	80121ba <_dtoa_r+0x76a>
 80121ac:	9a06      	ldr	r2, [sp, #24]
 80121ae:	429a      	cmp	r2, r3
 80121b0:	d1f7      	bne.n	80121a2 <_dtoa_r+0x752>
 80121b2:	2230      	movs	r2, #48	; 0x30
 80121b4:	9906      	ldr	r1, [sp, #24]
 80121b6:	3601      	adds	r6, #1
 80121b8:	700a      	strb	r2, [r1, #0]
 80121ba:	781a      	ldrb	r2, [r3, #0]
 80121bc:	3201      	adds	r2, #1
 80121be:	701a      	strb	r2, [r3, #0]
 80121c0:	e784      	b.n	80120cc <_dtoa_r+0x67c>
 80121c2:	2200      	movs	r2, #0
 80121c4:	4baa      	ldr	r3, [pc, #680]	; (8012470 <_dtoa_r+0xa20>)
 80121c6:	f7ef fc2f 	bl	8001a28 <__aeabi_dmul>
 80121ca:	2200      	movs	r2, #0
 80121cc:	2300      	movs	r3, #0
 80121ce:	0004      	movs	r4, r0
 80121d0:	000d      	movs	r5, r1
 80121d2:	f7ee f941 	bl	8000458 <__aeabi_dcmpeq>
 80121d6:	2800      	cmp	r0, #0
 80121d8:	d09b      	beq.n	8012112 <_dtoa_r+0x6c2>
 80121da:	e7cf      	b.n	801217c <_dtoa_r+0x72c>
 80121dc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80121de:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80121e0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80121e2:	2d00      	cmp	r5, #0
 80121e4:	d012      	beq.n	801220c <_dtoa_r+0x7bc>
 80121e6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80121e8:	2a01      	cmp	r2, #1
 80121ea:	dc66      	bgt.n	80122ba <_dtoa_r+0x86a>
 80121ec:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80121ee:	2a00      	cmp	r2, #0
 80121f0:	d05d      	beq.n	80122ae <_dtoa_r+0x85e>
 80121f2:	4aa0      	ldr	r2, [pc, #640]	; (8012474 <_dtoa_r+0xa24>)
 80121f4:	189b      	adds	r3, r3, r2
 80121f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80121f8:	2101      	movs	r1, #1
 80121fa:	18d2      	adds	r2, r2, r3
 80121fc:	920a      	str	r2, [sp, #40]	; 0x28
 80121fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012200:	0038      	movs	r0, r7
 8012202:	18d3      	adds	r3, r2, r3
 8012204:	930d      	str	r3, [sp, #52]	; 0x34
 8012206:	f7fe fbb9 	bl	801097c <__i2b>
 801220a:	0005      	movs	r5, r0
 801220c:	2c00      	cmp	r4, #0
 801220e:	dd0e      	ble.n	801222e <_dtoa_r+0x7de>
 8012210:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012212:	2b00      	cmp	r3, #0
 8012214:	dd0b      	ble.n	801222e <_dtoa_r+0x7de>
 8012216:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012218:	0023      	movs	r3, r4
 801221a:	4294      	cmp	r4, r2
 801221c:	dd00      	ble.n	8012220 <_dtoa_r+0x7d0>
 801221e:	0013      	movs	r3, r2
 8012220:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012222:	1ae4      	subs	r4, r4, r3
 8012224:	1ad2      	subs	r2, r2, r3
 8012226:	920a      	str	r2, [sp, #40]	; 0x28
 8012228:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801222a:	1ad3      	subs	r3, r2, r3
 801222c:	930d      	str	r3, [sp, #52]	; 0x34
 801222e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012230:	2b00      	cmp	r3, #0
 8012232:	d01f      	beq.n	8012274 <_dtoa_r+0x824>
 8012234:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012236:	2b00      	cmp	r3, #0
 8012238:	d054      	beq.n	80122e4 <_dtoa_r+0x894>
 801223a:	2e00      	cmp	r6, #0
 801223c:	dd11      	ble.n	8012262 <_dtoa_r+0x812>
 801223e:	0029      	movs	r1, r5
 8012240:	0032      	movs	r2, r6
 8012242:	0038      	movs	r0, r7
 8012244:	f7fe fc60 	bl	8010b08 <__pow5mult>
 8012248:	9a05      	ldr	r2, [sp, #20]
 801224a:	0001      	movs	r1, r0
 801224c:	0005      	movs	r5, r0
 801224e:	0038      	movs	r0, r7
 8012250:	f7fe fbaa 	bl	80109a8 <__multiply>
 8012254:	9905      	ldr	r1, [sp, #20]
 8012256:	9014      	str	r0, [sp, #80]	; 0x50
 8012258:	0038      	movs	r0, r7
 801225a:	f7fe fa93 	bl	8010784 <_Bfree>
 801225e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012260:	9305      	str	r3, [sp, #20]
 8012262:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012264:	1b9a      	subs	r2, r3, r6
 8012266:	42b3      	cmp	r3, r6
 8012268:	d004      	beq.n	8012274 <_dtoa_r+0x824>
 801226a:	0038      	movs	r0, r7
 801226c:	9905      	ldr	r1, [sp, #20]
 801226e:	f7fe fc4b 	bl	8010b08 <__pow5mult>
 8012272:	9005      	str	r0, [sp, #20]
 8012274:	2101      	movs	r1, #1
 8012276:	0038      	movs	r0, r7
 8012278:	f7fe fb80 	bl	801097c <__i2b>
 801227c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801227e:	0006      	movs	r6, r0
 8012280:	2b00      	cmp	r3, #0
 8012282:	dd31      	ble.n	80122e8 <_dtoa_r+0x898>
 8012284:	001a      	movs	r2, r3
 8012286:	0001      	movs	r1, r0
 8012288:	0038      	movs	r0, r7
 801228a:	f7fe fc3d 	bl	8010b08 <__pow5mult>
 801228e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012290:	0006      	movs	r6, r0
 8012292:	2b01      	cmp	r3, #1
 8012294:	dd2d      	ble.n	80122f2 <_dtoa_r+0x8a2>
 8012296:	2300      	movs	r3, #0
 8012298:	930e      	str	r3, [sp, #56]	; 0x38
 801229a:	6933      	ldr	r3, [r6, #16]
 801229c:	3303      	adds	r3, #3
 801229e:	009b      	lsls	r3, r3, #2
 80122a0:	18f3      	adds	r3, r6, r3
 80122a2:	6858      	ldr	r0, [r3, #4]
 80122a4:	f7fe fb22 	bl	80108ec <__hi0bits>
 80122a8:	2320      	movs	r3, #32
 80122aa:	1a18      	subs	r0, r3, r0
 80122ac:	e039      	b.n	8012322 <_dtoa_r+0x8d2>
 80122ae:	2336      	movs	r3, #54	; 0x36
 80122b0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80122b2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80122b4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80122b6:	1a9b      	subs	r3, r3, r2
 80122b8:	e79d      	b.n	80121f6 <_dtoa_r+0x7a6>
 80122ba:	9b07      	ldr	r3, [sp, #28]
 80122bc:	1e5e      	subs	r6, r3, #1
 80122be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80122c0:	42b3      	cmp	r3, r6
 80122c2:	db07      	blt.n	80122d4 <_dtoa_r+0x884>
 80122c4:	1b9e      	subs	r6, r3, r6
 80122c6:	9b07      	ldr	r3, [sp, #28]
 80122c8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	da93      	bge.n	80121f6 <_dtoa_r+0x7a6>
 80122ce:	1ae4      	subs	r4, r4, r3
 80122d0:	2300      	movs	r3, #0
 80122d2:	e790      	b.n	80121f6 <_dtoa_r+0x7a6>
 80122d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80122d6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80122d8:	1af3      	subs	r3, r6, r3
 80122da:	18d3      	adds	r3, r2, r3
 80122dc:	960e      	str	r6, [sp, #56]	; 0x38
 80122de:	9315      	str	r3, [sp, #84]	; 0x54
 80122e0:	2600      	movs	r6, #0
 80122e2:	e7f0      	b.n	80122c6 <_dtoa_r+0x876>
 80122e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80122e6:	e7c0      	b.n	801226a <_dtoa_r+0x81a>
 80122e8:	2300      	movs	r3, #0
 80122ea:	930e      	str	r3, [sp, #56]	; 0x38
 80122ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80122ee:	2b01      	cmp	r3, #1
 80122f0:	dc13      	bgt.n	801231a <_dtoa_r+0x8ca>
 80122f2:	2300      	movs	r3, #0
 80122f4:	930e      	str	r3, [sp, #56]	; 0x38
 80122f6:	9b08      	ldr	r3, [sp, #32]
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d10e      	bne.n	801231a <_dtoa_r+0x8ca>
 80122fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122fe:	031b      	lsls	r3, r3, #12
 8012300:	d10b      	bne.n	801231a <_dtoa_r+0x8ca>
 8012302:	4b5d      	ldr	r3, [pc, #372]	; (8012478 <_dtoa_r+0xa28>)
 8012304:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012306:	4213      	tst	r3, r2
 8012308:	d007      	beq.n	801231a <_dtoa_r+0x8ca>
 801230a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801230c:	3301      	adds	r3, #1
 801230e:	930a      	str	r3, [sp, #40]	; 0x28
 8012310:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012312:	3301      	adds	r3, #1
 8012314:	930d      	str	r3, [sp, #52]	; 0x34
 8012316:	2301      	movs	r3, #1
 8012318:	930e      	str	r3, [sp, #56]	; 0x38
 801231a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801231c:	2001      	movs	r0, #1
 801231e:	2b00      	cmp	r3, #0
 8012320:	d1bb      	bne.n	801229a <_dtoa_r+0x84a>
 8012322:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012324:	221f      	movs	r2, #31
 8012326:	1818      	adds	r0, r3, r0
 8012328:	0003      	movs	r3, r0
 801232a:	4013      	ands	r3, r2
 801232c:	4210      	tst	r0, r2
 801232e:	d046      	beq.n	80123be <_dtoa_r+0x96e>
 8012330:	3201      	adds	r2, #1
 8012332:	1ad2      	subs	r2, r2, r3
 8012334:	2a04      	cmp	r2, #4
 8012336:	dd3f      	ble.n	80123b8 <_dtoa_r+0x968>
 8012338:	221c      	movs	r2, #28
 801233a:	1ad3      	subs	r3, r2, r3
 801233c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801233e:	18e4      	adds	r4, r4, r3
 8012340:	18d2      	adds	r2, r2, r3
 8012342:	920a      	str	r2, [sp, #40]	; 0x28
 8012344:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012346:	18d3      	adds	r3, r2, r3
 8012348:	930d      	str	r3, [sp, #52]	; 0x34
 801234a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801234c:	2b00      	cmp	r3, #0
 801234e:	dd05      	ble.n	801235c <_dtoa_r+0x90c>
 8012350:	001a      	movs	r2, r3
 8012352:	0038      	movs	r0, r7
 8012354:	9905      	ldr	r1, [sp, #20]
 8012356:	f7fe fc33 	bl	8010bc0 <__lshift>
 801235a:	9005      	str	r0, [sp, #20]
 801235c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801235e:	2b00      	cmp	r3, #0
 8012360:	dd05      	ble.n	801236e <_dtoa_r+0x91e>
 8012362:	0031      	movs	r1, r6
 8012364:	001a      	movs	r2, r3
 8012366:	0038      	movs	r0, r7
 8012368:	f7fe fc2a 	bl	8010bc0 <__lshift>
 801236c:	0006      	movs	r6, r0
 801236e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012370:	2b00      	cmp	r3, #0
 8012372:	d026      	beq.n	80123c2 <_dtoa_r+0x972>
 8012374:	0031      	movs	r1, r6
 8012376:	9805      	ldr	r0, [sp, #20]
 8012378:	f7fe fc90 	bl	8010c9c <__mcmp>
 801237c:	2800      	cmp	r0, #0
 801237e:	da20      	bge.n	80123c2 <_dtoa_r+0x972>
 8012380:	9b02      	ldr	r3, [sp, #8]
 8012382:	220a      	movs	r2, #10
 8012384:	3b01      	subs	r3, #1
 8012386:	9302      	str	r3, [sp, #8]
 8012388:	0038      	movs	r0, r7
 801238a:	2300      	movs	r3, #0
 801238c:	9905      	ldr	r1, [sp, #20]
 801238e:	f7fe fa1d 	bl	80107cc <__multadd>
 8012392:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012394:	9005      	str	r0, [sp, #20]
 8012396:	2b00      	cmp	r3, #0
 8012398:	d100      	bne.n	801239c <_dtoa_r+0x94c>
 801239a:	e166      	b.n	801266a <_dtoa_r+0xc1a>
 801239c:	2300      	movs	r3, #0
 801239e:	0029      	movs	r1, r5
 80123a0:	220a      	movs	r2, #10
 80123a2:	0038      	movs	r0, r7
 80123a4:	f7fe fa12 	bl	80107cc <__multadd>
 80123a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80123aa:	0005      	movs	r5, r0
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	dc47      	bgt.n	8012440 <_dtoa_r+0x9f0>
 80123b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80123b2:	2b02      	cmp	r3, #2
 80123b4:	dc0d      	bgt.n	80123d2 <_dtoa_r+0x982>
 80123b6:	e043      	b.n	8012440 <_dtoa_r+0x9f0>
 80123b8:	2a04      	cmp	r2, #4
 80123ba:	d0c6      	beq.n	801234a <_dtoa_r+0x8fa>
 80123bc:	0013      	movs	r3, r2
 80123be:	331c      	adds	r3, #28
 80123c0:	e7bc      	b.n	801233c <_dtoa_r+0x8ec>
 80123c2:	9b07      	ldr	r3, [sp, #28]
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	dc35      	bgt.n	8012434 <_dtoa_r+0x9e4>
 80123c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80123ca:	2b02      	cmp	r3, #2
 80123cc:	dd32      	ble.n	8012434 <_dtoa_r+0x9e4>
 80123ce:	9b07      	ldr	r3, [sp, #28]
 80123d0:	930c      	str	r3, [sp, #48]	; 0x30
 80123d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d10c      	bne.n	80123f2 <_dtoa_r+0x9a2>
 80123d8:	0031      	movs	r1, r6
 80123da:	2205      	movs	r2, #5
 80123dc:	0038      	movs	r0, r7
 80123de:	f7fe f9f5 	bl	80107cc <__multadd>
 80123e2:	0006      	movs	r6, r0
 80123e4:	0001      	movs	r1, r0
 80123e6:	9805      	ldr	r0, [sp, #20]
 80123e8:	f7fe fc58 	bl	8010c9c <__mcmp>
 80123ec:	2800      	cmp	r0, #0
 80123ee:	dd00      	ble.n	80123f2 <_dtoa_r+0x9a2>
 80123f0:	e5a5      	b.n	8011f3e <_dtoa_r+0x4ee>
 80123f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80123f4:	43db      	mvns	r3, r3
 80123f6:	9302      	str	r3, [sp, #8]
 80123f8:	9b06      	ldr	r3, [sp, #24]
 80123fa:	9308      	str	r3, [sp, #32]
 80123fc:	2400      	movs	r4, #0
 80123fe:	0031      	movs	r1, r6
 8012400:	0038      	movs	r0, r7
 8012402:	f7fe f9bf 	bl	8010784 <_Bfree>
 8012406:	2d00      	cmp	r5, #0
 8012408:	d100      	bne.n	801240c <_dtoa_r+0x9bc>
 801240a:	e6b7      	b.n	801217c <_dtoa_r+0x72c>
 801240c:	2c00      	cmp	r4, #0
 801240e:	d005      	beq.n	801241c <_dtoa_r+0x9cc>
 8012410:	42ac      	cmp	r4, r5
 8012412:	d003      	beq.n	801241c <_dtoa_r+0x9cc>
 8012414:	0021      	movs	r1, r4
 8012416:	0038      	movs	r0, r7
 8012418:	f7fe f9b4 	bl	8010784 <_Bfree>
 801241c:	0029      	movs	r1, r5
 801241e:	0038      	movs	r0, r7
 8012420:	f7fe f9b0 	bl	8010784 <_Bfree>
 8012424:	e6aa      	b.n	801217c <_dtoa_r+0x72c>
 8012426:	2600      	movs	r6, #0
 8012428:	0035      	movs	r5, r6
 801242a:	e7e2      	b.n	80123f2 <_dtoa_r+0x9a2>
 801242c:	9602      	str	r6, [sp, #8]
 801242e:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8012430:	0035      	movs	r5, r6
 8012432:	e584      	b.n	8011f3e <_dtoa_r+0x4ee>
 8012434:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012436:	2b00      	cmp	r3, #0
 8012438:	d100      	bne.n	801243c <_dtoa_r+0x9ec>
 801243a:	e0ce      	b.n	80125da <_dtoa_r+0xb8a>
 801243c:	9b07      	ldr	r3, [sp, #28]
 801243e:	930c      	str	r3, [sp, #48]	; 0x30
 8012440:	2c00      	cmp	r4, #0
 8012442:	dd05      	ble.n	8012450 <_dtoa_r+0xa00>
 8012444:	0029      	movs	r1, r5
 8012446:	0022      	movs	r2, r4
 8012448:	0038      	movs	r0, r7
 801244a:	f7fe fbb9 	bl	8010bc0 <__lshift>
 801244e:	0005      	movs	r5, r0
 8012450:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012452:	0028      	movs	r0, r5
 8012454:	2b00      	cmp	r3, #0
 8012456:	d022      	beq.n	801249e <_dtoa_r+0xa4e>
 8012458:	0038      	movs	r0, r7
 801245a:	6869      	ldr	r1, [r5, #4]
 801245c:	f7fe f94e 	bl	80106fc <_Balloc>
 8012460:	1e04      	subs	r4, r0, #0
 8012462:	d10f      	bne.n	8012484 <_dtoa_r+0xa34>
 8012464:	0002      	movs	r2, r0
 8012466:	4b05      	ldr	r3, [pc, #20]	; (801247c <_dtoa_r+0xa2c>)
 8012468:	4905      	ldr	r1, [pc, #20]	; (8012480 <_dtoa_r+0xa30>)
 801246a:	f7ff fb06 	bl	8011a7a <_dtoa_r+0x2a>
 801246e:	46c0      	nop			; (mov r8, r8)
 8012470:	40240000 	.word	0x40240000
 8012474:	00000433 	.word	0x00000433
 8012478:	7ff00000 	.word	0x7ff00000
 801247c:	080139a1 	.word	0x080139a1
 8012480:	000002ea 	.word	0x000002ea
 8012484:	0029      	movs	r1, r5
 8012486:	692b      	ldr	r3, [r5, #16]
 8012488:	310c      	adds	r1, #12
 801248a:	1c9a      	adds	r2, r3, #2
 801248c:	0092      	lsls	r2, r2, #2
 801248e:	300c      	adds	r0, #12
 8012490:	f7fc fcc8 	bl	800ee24 <memcpy>
 8012494:	2201      	movs	r2, #1
 8012496:	0021      	movs	r1, r4
 8012498:	0038      	movs	r0, r7
 801249a:	f7fe fb91 	bl	8010bc0 <__lshift>
 801249e:	9b06      	ldr	r3, [sp, #24]
 80124a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80124a2:	930a      	str	r3, [sp, #40]	; 0x28
 80124a4:	3b01      	subs	r3, #1
 80124a6:	189b      	adds	r3, r3, r2
 80124a8:	2201      	movs	r2, #1
 80124aa:	002c      	movs	r4, r5
 80124ac:	0005      	movs	r5, r0
 80124ae:	9314      	str	r3, [sp, #80]	; 0x50
 80124b0:	9b08      	ldr	r3, [sp, #32]
 80124b2:	4013      	ands	r3, r2
 80124b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80124b6:	0031      	movs	r1, r6
 80124b8:	9805      	ldr	r0, [sp, #20]
 80124ba:	f7ff fa3d 	bl	8011938 <quorem>
 80124be:	0003      	movs	r3, r0
 80124c0:	0021      	movs	r1, r4
 80124c2:	3330      	adds	r3, #48	; 0x30
 80124c4:	900d      	str	r0, [sp, #52]	; 0x34
 80124c6:	9805      	ldr	r0, [sp, #20]
 80124c8:	9307      	str	r3, [sp, #28]
 80124ca:	f7fe fbe7 	bl	8010c9c <__mcmp>
 80124ce:	002a      	movs	r2, r5
 80124d0:	900e      	str	r0, [sp, #56]	; 0x38
 80124d2:	0031      	movs	r1, r6
 80124d4:	0038      	movs	r0, r7
 80124d6:	f7fe fbfd 	bl	8010cd4 <__mdiff>
 80124da:	68c3      	ldr	r3, [r0, #12]
 80124dc:	9008      	str	r0, [sp, #32]
 80124de:	9310      	str	r3, [sp, #64]	; 0x40
 80124e0:	2301      	movs	r3, #1
 80124e2:	930c      	str	r3, [sp, #48]	; 0x30
 80124e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d104      	bne.n	80124f4 <_dtoa_r+0xaa4>
 80124ea:	0001      	movs	r1, r0
 80124ec:	9805      	ldr	r0, [sp, #20]
 80124ee:	f7fe fbd5 	bl	8010c9c <__mcmp>
 80124f2:	900c      	str	r0, [sp, #48]	; 0x30
 80124f4:	0038      	movs	r0, r7
 80124f6:	9908      	ldr	r1, [sp, #32]
 80124f8:	f7fe f944 	bl	8010784 <_Bfree>
 80124fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80124fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012500:	3301      	adds	r3, #1
 8012502:	9308      	str	r3, [sp, #32]
 8012504:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012506:	4313      	orrs	r3, r2
 8012508:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801250a:	4313      	orrs	r3, r2
 801250c:	d10c      	bne.n	8012528 <_dtoa_r+0xad8>
 801250e:	9b07      	ldr	r3, [sp, #28]
 8012510:	2b39      	cmp	r3, #57	; 0x39
 8012512:	d026      	beq.n	8012562 <_dtoa_r+0xb12>
 8012514:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012516:	2b00      	cmp	r3, #0
 8012518:	dd02      	ble.n	8012520 <_dtoa_r+0xad0>
 801251a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801251c:	3331      	adds	r3, #49	; 0x31
 801251e:	9307      	str	r3, [sp, #28]
 8012520:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012522:	9a07      	ldr	r2, [sp, #28]
 8012524:	701a      	strb	r2, [r3, #0]
 8012526:	e76a      	b.n	80123fe <_dtoa_r+0x9ae>
 8012528:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801252a:	2b00      	cmp	r3, #0
 801252c:	db04      	blt.n	8012538 <_dtoa_r+0xae8>
 801252e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8012530:	4313      	orrs	r3, r2
 8012532:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012534:	4313      	orrs	r3, r2
 8012536:	d11f      	bne.n	8012578 <_dtoa_r+0xb28>
 8012538:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801253a:	2b00      	cmp	r3, #0
 801253c:	ddf0      	ble.n	8012520 <_dtoa_r+0xad0>
 801253e:	9905      	ldr	r1, [sp, #20]
 8012540:	2201      	movs	r2, #1
 8012542:	0038      	movs	r0, r7
 8012544:	f7fe fb3c 	bl	8010bc0 <__lshift>
 8012548:	0031      	movs	r1, r6
 801254a:	9005      	str	r0, [sp, #20]
 801254c:	f7fe fba6 	bl	8010c9c <__mcmp>
 8012550:	2800      	cmp	r0, #0
 8012552:	dc03      	bgt.n	801255c <_dtoa_r+0xb0c>
 8012554:	d1e4      	bne.n	8012520 <_dtoa_r+0xad0>
 8012556:	9b07      	ldr	r3, [sp, #28]
 8012558:	07db      	lsls	r3, r3, #31
 801255a:	d5e1      	bpl.n	8012520 <_dtoa_r+0xad0>
 801255c:	9b07      	ldr	r3, [sp, #28]
 801255e:	2b39      	cmp	r3, #57	; 0x39
 8012560:	d1db      	bne.n	801251a <_dtoa_r+0xaca>
 8012562:	2339      	movs	r3, #57	; 0x39
 8012564:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012566:	7013      	strb	r3, [r2, #0]
 8012568:	9b08      	ldr	r3, [sp, #32]
 801256a:	9308      	str	r3, [sp, #32]
 801256c:	3b01      	subs	r3, #1
 801256e:	781a      	ldrb	r2, [r3, #0]
 8012570:	2a39      	cmp	r2, #57	; 0x39
 8012572:	d068      	beq.n	8012646 <_dtoa_r+0xbf6>
 8012574:	3201      	adds	r2, #1
 8012576:	e7d5      	b.n	8012524 <_dtoa_r+0xad4>
 8012578:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801257a:	2b00      	cmp	r3, #0
 801257c:	dd07      	ble.n	801258e <_dtoa_r+0xb3e>
 801257e:	9b07      	ldr	r3, [sp, #28]
 8012580:	2b39      	cmp	r3, #57	; 0x39
 8012582:	d0ee      	beq.n	8012562 <_dtoa_r+0xb12>
 8012584:	9b07      	ldr	r3, [sp, #28]
 8012586:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012588:	3301      	adds	r3, #1
 801258a:	7013      	strb	r3, [r2, #0]
 801258c:	e737      	b.n	80123fe <_dtoa_r+0x9ae>
 801258e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012590:	9a07      	ldr	r2, [sp, #28]
 8012592:	701a      	strb	r2, [r3, #0]
 8012594:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012596:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012598:	4293      	cmp	r3, r2
 801259a:	d03e      	beq.n	801261a <_dtoa_r+0xbca>
 801259c:	2300      	movs	r3, #0
 801259e:	220a      	movs	r2, #10
 80125a0:	9905      	ldr	r1, [sp, #20]
 80125a2:	0038      	movs	r0, r7
 80125a4:	f7fe f912 	bl	80107cc <__multadd>
 80125a8:	2300      	movs	r3, #0
 80125aa:	9005      	str	r0, [sp, #20]
 80125ac:	220a      	movs	r2, #10
 80125ae:	0021      	movs	r1, r4
 80125b0:	0038      	movs	r0, r7
 80125b2:	42ac      	cmp	r4, r5
 80125b4:	d106      	bne.n	80125c4 <_dtoa_r+0xb74>
 80125b6:	f7fe f909 	bl	80107cc <__multadd>
 80125ba:	0004      	movs	r4, r0
 80125bc:	0005      	movs	r5, r0
 80125be:	9b08      	ldr	r3, [sp, #32]
 80125c0:	930a      	str	r3, [sp, #40]	; 0x28
 80125c2:	e778      	b.n	80124b6 <_dtoa_r+0xa66>
 80125c4:	f7fe f902 	bl	80107cc <__multadd>
 80125c8:	0029      	movs	r1, r5
 80125ca:	0004      	movs	r4, r0
 80125cc:	2300      	movs	r3, #0
 80125ce:	220a      	movs	r2, #10
 80125d0:	0038      	movs	r0, r7
 80125d2:	f7fe f8fb 	bl	80107cc <__multadd>
 80125d6:	0005      	movs	r5, r0
 80125d8:	e7f1      	b.n	80125be <_dtoa_r+0xb6e>
 80125da:	9b07      	ldr	r3, [sp, #28]
 80125dc:	930c      	str	r3, [sp, #48]	; 0x30
 80125de:	2400      	movs	r4, #0
 80125e0:	0031      	movs	r1, r6
 80125e2:	9805      	ldr	r0, [sp, #20]
 80125e4:	f7ff f9a8 	bl	8011938 <quorem>
 80125e8:	9b06      	ldr	r3, [sp, #24]
 80125ea:	3030      	adds	r0, #48	; 0x30
 80125ec:	5518      	strb	r0, [r3, r4]
 80125ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80125f0:	3401      	adds	r4, #1
 80125f2:	9007      	str	r0, [sp, #28]
 80125f4:	42a3      	cmp	r3, r4
 80125f6:	dd07      	ble.n	8012608 <_dtoa_r+0xbb8>
 80125f8:	2300      	movs	r3, #0
 80125fa:	220a      	movs	r2, #10
 80125fc:	0038      	movs	r0, r7
 80125fe:	9905      	ldr	r1, [sp, #20]
 8012600:	f7fe f8e4 	bl	80107cc <__multadd>
 8012604:	9005      	str	r0, [sp, #20]
 8012606:	e7eb      	b.n	80125e0 <_dtoa_r+0xb90>
 8012608:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801260a:	2001      	movs	r0, #1
 801260c:	2b00      	cmp	r3, #0
 801260e:	dd00      	ble.n	8012612 <_dtoa_r+0xbc2>
 8012610:	0018      	movs	r0, r3
 8012612:	2400      	movs	r4, #0
 8012614:	9b06      	ldr	r3, [sp, #24]
 8012616:	181b      	adds	r3, r3, r0
 8012618:	9308      	str	r3, [sp, #32]
 801261a:	9905      	ldr	r1, [sp, #20]
 801261c:	2201      	movs	r2, #1
 801261e:	0038      	movs	r0, r7
 8012620:	f7fe face 	bl	8010bc0 <__lshift>
 8012624:	0031      	movs	r1, r6
 8012626:	9005      	str	r0, [sp, #20]
 8012628:	f7fe fb38 	bl	8010c9c <__mcmp>
 801262c:	2800      	cmp	r0, #0
 801262e:	dc9b      	bgt.n	8012568 <_dtoa_r+0xb18>
 8012630:	d102      	bne.n	8012638 <_dtoa_r+0xbe8>
 8012632:	9b07      	ldr	r3, [sp, #28]
 8012634:	07db      	lsls	r3, r3, #31
 8012636:	d497      	bmi.n	8012568 <_dtoa_r+0xb18>
 8012638:	9b08      	ldr	r3, [sp, #32]
 801263a:	9308      	str	r3, [sp, #32]
 801263c:	3b01      	subs	r3, #1
 801263e:	781a      	ldrb	r2, [r3, #0]
 8012640:	2a30      	cmp	r2, #48	; 0x30
 8012642:	d0fa      	beq.n	801263a <_dtoa_r+0xbea>
 8012644:	e6db      	b.n	80123fe <_dtoa_r+0x9ae>
 8012646:	9a06      	ldr	r2, [sp, #24]
 8012648:	429a      	cmp	r2, r3
 801264a:	d18e      	bne.n	801256a <_dtoa_r+0xb1a>
 801264c:	9b02      	ldr	r3, [sp, #8]
 801264e:	3301      	adds	r3, #1
 8012650:	9302      	str	r3, [sp, #8]
 8012652:	2331      	movs	r3, #49	; 0x31
 8012654:	e799      	b.n	801258a <_dtoa_r+0xb3a>
 8012656:	4b09      	ldr	r3, [pc, #36]	; (801267c <_dtoa_r+0xc2c>)
 8012658:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801265a:	9306      	str	r3, [sp, #24]
 801265c:	4b08      	ldr	r3, [pc, #32]	; (8012680 <_dtoa_r+0xc30>)
 801265e:	2a00      	cmp	r2, #0
 8012660:	d001      	beq.n	8012666 <_dtoa_r+0xc16>
 8012662:	f7ff fa3f 	bl	8011ae4 <_dtoa_r+0x94>
 8012666:	f7ff fa3f 	bl	8011ae8 <_dtoa_r+0x98>
 801266a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801266c:	2b00      	cmp	r3, #0
 801266e:	dcb6      	bgt.n	80125de <_dtoa_r+0xb8e>
 8012670:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012672:	2b02      	cmp	r3, #2
 8012674:	dd00      	ble.n	8012678 <_dtoa_r+0xc28>
 8012676:	e6ac      	b.n	80123d2 <_dtoa_r+0x982>
 8012678:	e7b1      	b.n	80125de <_dtoa_r+0xb8e>
 801267a:	46c0      	nop			; (mov r8, r8)
 801267c:	08013c0b 	.word	0x08013c0b
 8012680:	08013c13 	.word	0x08013c13

08012684 <fiprintf>:
 8012684:	b40e      	push	{r1, r2, r3}
 8012686:	b503      	push	{r0, r1, lr}
 8012688:	0001      	movs	r1, r0
 801268a:	ab03      	add	r3, sp, #12
 801268c:	4804      	ldr	r0, [pc, #16]	; (80126a0 <fiprintf+0x1c>)
 801268e:	cb04      	ldmia	r3!, {r2}
 8012690:	6800      	ldr	r0, [r0, #0]
 8012692:	9301      	str	r3, [sp, #4]
 8012694:	f000 f8b8 	bl	8012808 <_vfiprintf_r>
 8012698:	b002      	add	sp, #8
 801269a:	bc08      	pop	{r3}
 801269c:	b003      	add	sp, #12
 801269e:	4718      	bx	r3
 80126a0:	200000e4 	.word	0x200000e4

080126a4 <malloc>:
 80126a4:	b510      	push	{r4, lr}
 80126a6:	4b03      	ldr	r3, [pc, #12]	; (80126b4 <malloc+0x10>)
 80126a8:	0001      	movs	r1, r0
 80126aa:	6818      	ldr	r0, [r3, #0]
 80126ac:	f7fe fd58 	bl	8011160 <_malloc_r>
 80126b0:	bd10      	pop	{r4, pc}
 80126b2:	46c0      	nop			; (mov r8, r8)
 80126b4:	200000e4 	.word	0x200000e4

080126b8 <memchr>:
 80126b8:	b2c9      	uxtb	r1, r1
 80126ba:	1882      	adds	r2, r0, r2
 80126bc:	4290      	cmp	r0, r2
 80126be:	d101      	bne.n	80126c4 <memchr+0xc>
 80126c0:	2000      	movs	r0, #0
 80126c2:	4770      	bx	lr
 80126c4:	7803      	ldrb	r3, [r0, #0]
 80126c6:	428b      	cmp	r3, r1
 80126c8:	d0fb      	beq.n	80126c2 <memchr+0xa>
 80126ca:	3001      	adds	r0, #1
 80126cc:	e7f6      	b.n	80126bc <memchr+0x4>

080126ce <memmove>:
 80126ce:	b510      	push	{r4, lr}
 80126d0:	4288      	cmp	r0, r1
 80126d2:	d902      	bls.n	80126da <memmove+0xc>
 80126d4:	188b      	adds	r3, r1, r2
 80126d6:	4298      	cmp	r0, r3
 80126d8:	d303      	bcc.n	80126e2 <memmove+0x14>
 80126da:	2300      	movs	r3, #0
 80126dc:	e007      	b.n	80126ee <memmove+0x20>
 80126de:	5c8b      	ldrb	r3, [r1, r2]
 80126e0:	5483      	strb	r3, [r0, r2]
 80126e2:	3a01      	subs	r2, #1
 80126e4:	d2fb      	bcs.n	80126de <memmove+0x10>
 80126e6:	bd10      	pop	{r4, pc}
 80126e8:	5ccc      	ldrb	r4, [r1, r3]
 80126ea:	54c4      	strb	r4, [r0, r3]
 80126ec:	3301      	adds	r3, #1
 80126ee:	429a      	cmp	r2, r3
 80126f0:	d1fa      	bne.n	80126e8 <memmove+0x1a>
 80126f2:	e7f8      	b.n	80126e6 <memmove+0x18>

080126f4 <__malloc_lock>:
 80126f4:	b510      	push	{r4, lr}
 80126f6:	4802      	ldr	r0, [pc, #8]	; (8012700 <__malloc_lock+0xc>)
 80126f8:	f000 fc65 	bl	8012fc6 <__retarget_lock_acquire_recursive>
 80126fc:	bd10      	pop	{r4, pc}
 80126fe:	46c0      	nop			; (mov r8, r8)
 8012700:	20000d5c 	.word	0x20000d5c

08012704 <__malloc_unlock>:
 8012704:	b510      	push	{r4, lr}
 8012706:	4802      	ldr	r0, [pc, #8]	; (8012710 <__malloc_unlock+0xc>)
 8012708:	f000 fc5e 	bl	8012fc8 <__retarget_lock_release_recursive>
 801270c:	bd10      	pop	{r4, pc}
 801270e:	46c0      	nop			; (mov r8, r8)
 8012710:	20000d5c 	.word	0x20000d5c

08012714 <_free_r>:
 8012714:	b570      	push	{r4, r5, r6, lr}
 8012716:	0005      	movs	r5, r0
 8012718:	2900      	cmp	r1, #0
 801271a:	d010      	beq.n	801273e <_free_r+0x2a>
 801271c:	1f0c      	subs	r4, r1, #4
 801271e:	6823      	ldr	r3, [r4, #0]
 8012720:	2b00      	cmp	r3, #0
 8012722:	da00      	bge.n	8012726 <_free_r+0x12>
 8012724:	18e4      	adds	r4, r4, r3
 8012726:	0028      	movs	r0, r5
 8012728:	f7ff ffe4 	bl	80126f4 <__malloc_lock>
 801272c:	4a1d      	ldr	r2, [pc, #116]	; (80127a4 <_free_r+0x90>)
 801272e:	6813      	ldr	r3, [r2, #0]
 8012730:	2b00      	cmp	r3, #0
 8012732:	d105      	bne.n	8012740 <_free_r+0x2c>
 8012734:	6063      	str	r3, [r4, #4]
 8012736:	6014      	str	r4, [r2, #0]
 8012738:	0028      	movs	r0, r5
 801273a:	f7ff ffe3 	bl	8012704 <__malloc_unlock>
 801273e:	bd70      	pop	{r4, r5, r6, pc}
 8012740:	42a3      	cmp	r3, r4
 8012742:	d908      	bls.n	8012756 <_free_r+0x42>
 8012744:	6821      	ldr	r1, [r4, #0]
 8012746:	1860      	adds	r0, r4, r1
 8012748:	4283      	cmp	r3, r0
 801274a:	d1f3      	bne.n	8012734 <_free_r+0x20>
 801274c:	6818      	ldr	r0, [r3, #0]
 801274e:	685b      	ldr	r3, [r3, #4]
 8012750:	1841      	adds	r1, r0, r1
 8012752:	6021      	str	r1, [r4, #0]
 8012754:	e7ee      	b.n	8012734 <_free_r+0x20>
 8012756:	001a      	movs	r2, r3
 8012758:	685b      	ldr	r3, [r3, #4]
 801275a:	2b00      	cmp	r3, #0
 801275c:	d001      	beq.n	8012762 <_free_r+0x4e>
 801275e:	42a3      	cmp	r3, r4
 8012760:	d9f9      	bls.n	8012756 <_free_r+0x42>
 8012762:	6811      	ldr	r1, [r2, #0]
 8012764:	1850      	adds	r0, r2, r1
 8012766:	42a0      	cmp	r0, r4
 8012768:	d10b      	bne.n	8012782 <_free_r+0x6e>
 801276a:	6820      	ldr	r0, [r4, #0]
 801276c:	1809      	adds	r1, r1, r0
 801276e:	1850      	adds	r0, r2, r1
 8012770:	6011      	str	r1, [r2, #0]
 8012772:	4283      	cmp	r3, r0
 8012774:	d1e0      	bne.n	8012738 <_free_r+0x24>
 8012776:	6818      	ldr	r0, [r3, #0]
 8012778:	685b      	ldr	r3, [r3, #4]
 801277a:	1841      	adds	r1, r0, r1
 801277c:	6011      	str	r1, [r2, #0]
 801277e:	6053      	str	r3, [r2, #4]
 8012780:	e7da      	b.n	8012738 <_free_r+0x24>
 8012782:	42a0      	cmp	r0, r4
 8012784:	d902      	bls.n	801278c <_free_r+0x78>
 8012786:	230c      	movs	r3, #12
 8012788:	602b      	str	r3, [r5, #0]
 801278a:	e7d5      	b.n	8012738 <_free_r+0x24>
 801278c:	6821      	ldr	r1, [r4, #0]
 801278e:	1860      	adds	r0, r4, r1
 8012790:	4283      	cmp	r3, r0
 8012792:	d103      	bne.n	801279c <_free_r+0x88>
 8012794:	6818      	ldr	r0, [r3, #0]
 8012796:	685b      	ldr	r3, [r3, #4]
 8012798:	1841      	adds	r1, r0, r1
 801279a:	6021      	str	r1, [r4, #0]
 801279c:	6063      	str	r3, [r4, #4]
 801279e:	6054      	str	r4, [r2, #4]
 80127a0:	e7ca      	b.n	8012738 <_free_r+0x24>
 80127a2:	46c0      	nop			; (mov r8, r8)
 80127a4:	20000d50 	.word	0x20000d50

080127a8 <_malloc_usable_size_r>:
 80127a8:	1f0b      	subs	r3, r1, #4
 80127aa:	681b      	ldr	r3, [r3, #0]
 80127ac:	1f18      	subs	r0, r3, #4
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	da01      	bge.n	80127b6 <_malloc_usable_size_r+0xe>
 80127b2:	580b      	ldr	r3, [r1, r0]
 80127b4:	18c0      	adds	r0, r0, r3
 80127b6:	4770      	bx	lr

080127b8 <__sfputc_r>:
 80127b8:	6893      	ldr	r3, [r2, #8]
 80127ba:	b510      	push	{r4, lr}
 80127bc:	3b01      	subs	r3, #1
 80127be:	6093      	str	r3, [r2, #8]
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	da04      	bge.n	80127ce <__sfputc_r+0x16>
 80127c4:	6994      	ldr	r4, [r2, #24]
 80127c6:	42a3      	cmp	r3, r4
 80127c8:	db07      	blt.n	80127da <__sfputc_r+0x22>
 80127ca:	290a      	cmp	r1, #10
 80127cc:	d005      	beq.n	80127da <__sfputc_r+0x22>
 80127ce:	6813      	ldr	r3, [r2, #0]
 80127d0:	1c58      	adds	r0, r3, #1
 80127d2:	6010      	str	r0, [r2, #0]
 80127d4:	7019      	strb	r1, [r3, #0]
 80127d6:	0008      	movs	r0, r1
 80127d8:	bd10      	pop	{r4, pc}
 80127da:	f000 f94f 	bl	8012a7c <__swbuf_r>
 80127de:	0001      	movs	r1, r0
 80127e0:	e7f9      	b.n	80127d6 <__sfputc_r+0x1e>

080127e2 <__sfputs_r>:
 80127e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127e4:	0006      	movs	r6, r0
 80127e6:	000f      	movs	r7, r1
 80127e8:	0014      	movs	r4, r2
 80127ea:	18d5      	adds	r5, r2, r3
 80127ec:	42ac      	cmp	r4, r5
 80127ee:	d101      	bne.n	80127f4 <__sfputs_r+0x12>
 80127f0:	2000      	movs	r0, #0
 80127f2:	e007      	b.n	8012804 <__sfputs_r+0x22>
 80127f4:	7821      	ldrb	r1, [r4, #0]
 80127f6:	003a      	movs	r2, r7
 80127f8:	0030      	movs	r0, r6
 80127fa:	f7ff ffdd 	bl	80127b8 <__sfputc_r>
 80127fe:	3401      	adds	r4, #1
 8012800:	1c43      	adds	r3, r0, #1
 8012802:	d1f3      	bne.n	80127ec <__sfputs_r+0xa>
 8012804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012808 <_vfiprintf_r>:
 8012808:	b5f0      	push	{r4, r5, r6, r7, lr}
 801280a:	b0a1      	sub	sp, #132	; 0x84
 801280c:	0006      	movs	r6, r0
 801280e:	000c      	movs	r4, r1
 8012810:	001f      	movs	r7, r3
 8012812:	9203      	str	r2, [sp, #12]
 8012814:	2800      	cmp	r0, #0
 8012816:	d004      	beq.n	8012822 <_vfiprintf_r+0x1a>
 8012818:	6983      	ldr	r3, [r0, #24]
 801281a:	2b00      	cmp	r3, #0
 801281c:	d101      	bne.n	8012822 <_vfiprintf_r+0x1a>
 801281e:	f000 fb31 	bl	8012e84 <__sinit>
 8012822:	4b8e      	ldr	r3, [pc, #568]	; (8012a5c <_vfiprintf_r+0x254>)
 8012824:	429c      	cmp	r4, r3
 8012826:	d11c      	bne.n	8012862 <_vfiprintf_r+0x5a>
 8012828:	6874      	ldr	r4, [r6, #4]
 801282a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801282c:	07db      	lsls	r3, r3, #31
 801282e:	d405      	bmi.n	801283c <_vfiprintf_r+0x34>
 8012830:	89a3      	ldrh	r3, [r4, #12]
 8012832:	059b      	lsls	r3, r3, #22
 8012834:	d402      	bmi.n	801283c <_vfiprintf_r+0x34>
 8012836:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012838:	f000 fbc5 	bl	8012fc6 <__retarget_lock_acquire_recursive>
 801283c:	89a3      	ldrh	r3, [r4, #12]
 801283e:	071b      	lsls	r3, r3, #28
 8012840:	d502      	bpl.n	8012848 <_vfiprintf_r+0x40>
 8012842:	6923      	ldr	r3, [r4, #16]
 8012844:	2b00      	cmp	r3, #0
 8012846:	d11d      	bne.n	8012884 <_vfiprintf_r+0x7c>
 8012848:	0021      	movs	r1, r4
 801284a:	0030      	movs	r0, r6
 801284c:	f000 f96c 	bl	8012b28 <__swsetup_r>
 8012850:	2800      	cmp	r0, #0
 8012852:	d017      	beq.n	8012884 <_vfiprintf_r+0x7c>
 8012854:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012856:	07db      	lsls	r3, r3, #31
 8012858:	d50d      	bpl.n	8012876 <_vfiprintf_r+0x6e>
 801285a:	2001      	movs	r0, #1
 801285c:	4240      	negs	r0, r0
 801285e:	b021      	add	sp, #132	; 0x84
 8012860:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012862:	4b7f      	ldr	r3, [pc, #508]	; (8012a60 <_vfiprintf_r+0x258>)
 8012864:	429c      	cmp	r4, r3
 8012866:	d101      	bne.n	801286c <_vfiprintf_r+0x64>
 8012868:	68b4      	ldr	r4, [r6, #8]
 801286a:	e7de      	b.n	801282a <_vfiprintf_r+0x22>
 801286c:	4b7d      	ldr	r3, [pc, #500]	; (8012a64 <_vfiprintf_r+0x25c>)
 801286e:	429c      	cmp	r4, r3
 8012870:	d1db      	bne.n	801282a <_vfiprintf_r+0x22>
 8012872:	68f4      	ldr	r4, [r6, #12]
 8012874:	e7d9      	b.n	801282a <_vfiprintf_r+0x22>
 8012876:	89a3      	ldrh	r3, [r4, #12]
 8012878:	059b      	lsls	r3, r3, #22
 801287a:	d4ee      	bmi.n	801285a <_vfiprintf_r+0x52>
 801287c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801287e:	f000 fba3 	bl	8012fc8 <__retarget_lock_release_recursive>
 8012882:	e7ea      	b.n	801285a <_vfiprintf_r+0x52>
 8012884:	2300      	movs	r3, #0
 8012886:	ad08      	add	r5, sp, #32
 8012888:	616b      	str	r3, [r5, #20]
 801288a:	3320      	adds	r3, #32
 801288c:	766b      	strb	r3, [r5, #25]
 801288e:	3310      	adds	r3, #16
 8012890:	76ab      	strb	r3, [r5, #26]
 8012892:	9707      	str	r7, [sp, #28]
 8012894:	9f03      	ldr	r7, [sp, #12]
 8012896:	783b      	ldrb	r3, [r7, #0]
 8012898:	2b00      	cmp	r3, #0
 801289a:	d001      	beq.n	80128a0 <_vfiprintf_r+0x98>
 801289c:	2b25      	cmp	r3, #37	; 0x25
 801289e:	d14e      	bne.n	801293e <_vfiprintf_r+0x136>
 80128a0:	9b03      	ldr	r3, [sp, #12]
 80128a2:	1afb      	subs	r3, r7, r3
 80128a4:	9305      	str	r3, [sp, #20]
 80128a6:	9b03      	ldr	r3, [sp, #12]
 80128a8:	429f      	cmp	r7, r3
 80128aa:	d00d      	beq.n	80128c8 <_vfiprintf_r+0xc0>
 80128ac:	9b05      	ldr	r3, [sp, #20]
 80128ae:	0021      	movs	r1, r4
 80128b0:	0030      	movs	r0, r6
 80128b2:	9a03      	ldr	r2, [sp, #12]
 80128b4:	f7ff ff95 	bl	80127e2 <__sfputs_r>
 80128b8:	1c43      	adds	r3, r0, #1
 80128ba:	d100      	bne.n	80128be <_vfiprintf_r+0xb6>
 80128bc:	e0b5      	b.n	8012a2a <_vfiprintf_r+0x222>
 80128be:	696a      	ldr	r2, [r5, #20]
 80128c0:	9b05      	ldr	r3, [sp, #20]
 80128c2:	4694      	mov	ip, r2
 80128c4:	4463      	add	r3, ip
 80128c6:	616b      	str	r3, [r5, #20]
 80128c8:	783b      	ldrb	r3, [r7, #0]
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d100      	bne.n	80128d0 <_vfiprintf_r+0xc8>
 80128ce:	e0ac      	b.n	8012a2a <_vfiprintf_r+0x222>
 80128d0:	2201      	movs	r2, #1
 80128d2:	1c7b      	adds	r3, r7, #1
 80128d4:	9303      	str	r3, [sp, #12]
 80128d6:	2300      	movs	r3, #0
 80128d8:	4252      	negs	r2, r2
 80128da:	606a      	str	r2, [r5, #4]
 80128dc:	a904      	add	r1, sp, #16
 80128de:	3254      	adds	r2, #84	; 0x54
 80128e0:	1852      	adds	r2, r2, r1
 80128e2:	602b      	str	r3, [r5, #0]
 80128e4:	60eb      	str	r3, [r5, #12]
 80128e6:	60ab      	str	r3, [r5, #8]
 80128e8:	7013      	strb	r3, [r2, #0]
 80128ea:	65ab      	str	r3, [r5, #88]	; 0x58
 80128ec:	9b03      	ldr	r3, [sp, #12]
 80128ee:	2205      	movs	r2, #5
 80128f0:	7819      	ldrb	r1, [r3, #0]
 80128f2:	485d      	ldr	r0, [pc, #372]	; (8012a68 <_vfiprintf_r+0x260>)
 80128f4:	f7ff fee0 	bl	80126b8 <memchr>
 80128f8:	9b03      	ldr	r3, [sp, #12]
 80128fa:	1c5f      	adds	r7, r3, #1
 80128fc:	2800      	cmp	r0, #0
 80128fe:	d120      	bne.n	8012942 <_vfiprintf_r+0x13a>
 8012900:	682a      	ldr	r2, [r5, #0]
 8012902:	06d3      	lsls	r3, r2, #27
 8012904:	d504      	bpl.n	8012910 <_vfiprintf_r+0x108>
 8012906:	2353      	movs	r3, #83	; 0x53
 8012908:	a904      	add	r1, sp, #16
 801290a:	185b      	adds	r3, r3, r1
 801290c:	2120      	movs	r1, #32
 801290e:	7019      	strb	r1, [r3, #0]
 8012910:	0713      	lsls	r3, r2, #28
 8012912:	d504      	bpl.n	801291e <_vfiprintf_r+0x116>
 8012914:	2353      	movs	r3, #83	; 0x53
 8012916:	a904      	add	r1, sp, #16
 8012918:	185b      	adds	r3, r3, r1
 801291a:	212b      	movs	r1, #43	; 0x2b
 801291c:	7019      	strb	r1, [r3, #0]
 801291e:	9b03      	ldr	r3, [sp, #12]
 8012920:	781b      	ldrb	r3, [r3, #0]
 8012922:	2b2a      	cmp	r3, #42	; 0x2a
 8012924:	d016      	beq.n	8012954 <_vfiprintf_r+0x14c>
 8012926:	2100      	movs	r1, #0
 8012928:	68eb      	ldr	r3, [r5, #12]
 801292a:	9f03      	ldr	r7, [sp, #12]
 801292c:	783a      	ldrb	r2, [r7, #0]
 801292e:	1c78      	adds	r0, r7, #1
 8012930:	3a30      	subs	r2, #48	; 0x30
 8012932:	4684      	mov	ip, r0
 8012934:	2a09      	cmp	r2, #9
 8012936:	d94f      	bls.n	80129d8 <_vfiprintf_r+0x1d0>
 8012938:	2900      	cmp	r1, #0
 801293a:	d111      	bne.n	8012960 <_vfiprintf_r+0x158>
 801293c:	e017      	b.n	801296e <_vfiprintf_r+0x166>
 801293e:	3701      	adds	r7, #1
 8012940:	e7a9      	b.n	8012896 <_vfiprintf_r+0x8e>
 8012942:	4b49      	ldr	r3, [pc, #292]	; (8012a68 <_vfiprintf_r+0x260>)
 8012944:	682a      	ldr	r2, [r5, #0]
 8012946:	1ac0      	subs	r0, r0, r3
 8012948:	2301      	movs	r3, #1
 801294a:	4083      	lsls	r3, r0
 801294c:	4313      	orrs	r3, r2
 801294e:	602b      	str	r3, [r5, #0]
 8012950:	9703      	str	r7, [sp, #12]
 8012952:	e7cb      	b.n	80128ec <_vfiprintf_r+0xe4>
 8012954:	9b07      	ldr	r3, [sp, #28]
 8012956:	1d19      	adds	r1, r3, #4
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	9107      	str	r1, [sp, #28]
 801295c:	2b00      	cmp	r3, #0
 801295e:	db01      	blt.n	8012964 <_vfiprintf_r+0x15c>
 8012960:	930b      	str	r3, [sp, #44]	; 0x2c
 8012962:	e004      	b.n	801296e <_vfiprintf_r+0x166>
 8012964:	425b      	negs	r3, r3
 8012966:	60eb      	str	r3, [r5, #12]
 8012968:	2302      	movs	r3, #2
 801296a:	4313      	orrs	r3, r2
 801296c:	602b      	str	r3, [r5, #0]
 801296e:	783b      	ldrb	r3, [r7, #0]
 8012970:	2b2e      	cmp	r3, #46	; 0x2e
 8012972:	d10a      	bne.n	801298a <_vfiprintf_r+0x182>
 8012974:	787b      	ldrb	r3, [r7, #1]
 8012976:	2b2a      	cmp	r3, #42	; 0x2a
 8012978:	d137      	bne.n	80129ea <_vfiprintf_r+0x1e2>
 801297a:	9b07      	ldr	r3, [sp, #28]
 801297c:	3702      	adds	r7, #2
 801297e:	1d1a      	adds	r2, r3, #4
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	9207      	str	r2, [sp, #28]
 8012984:	2b00      	cmp	r3, #0
 8012986:	db2d      	blt.n	80129e4 <_vfiprintf_r+0x1dc>
 8012988:	9309      	str	r3, [sp, #36]	; 0x24
 801298a:	2203      	movs	r2, #3
 801298c:	7839      	ldrb	r1, [r7, #0]
 801298e:	4837      	ldr	r0, [pc, #220]	; (8012a6c <_vfiprintf_r+0x264>)
 8012990:	f7ff fe92 	bl	80126b8 <memchr>
 8012994:	2800      	cmp	r0, #0
 8012996:	d007      	beq.n	80129a8 <_vfiprintf_r+0x1a0>
 8012998:	4b34      	ldr	r3, [pc, #208]	; (8012a6c <_vfiprintf_r+0x264>)
 801299a:	682a      	ldr	r2, [r5, #0]
 801299c:	1ac0      	subs	r0, r0, r3
 801299e:	2340      	movs	r3, #64	; 0x40
 80129a0:	4083      	lsls	r3, r0
 80129a2:	4313      	orrs	r3, r2
 80129a4:	3701      	adds	r7, #1
 80129a6:	602b      	str	r3, [r5, #0]
 80129a8:	7839      	ldrb	r1, [r7, #0]
 80129aa:	1c7b      	adds	r3, r7, #1
 80129ac:	2206      	movs	r2, #6
 80129ae:	4830      	ldr	r0, [pc, #192]	; (8012a70 <_vfiprintf_r+0x268>)
 80129b0:	9303      	str	r3, [sp, #12]
 80129b2:	7629      	strb	r1, [r5, #24]
 80129b4:	f7ff fe80 	bl	80126b8 <memchr>
 80129b8:	2800      	cmp	r0, #0
 80129ba:	d045      	beq.n	8012a48 <_vfiprintf_r+0x240>
 80129bc:	4b2d      	ldr	r3, [pc, #180]	; (8012a74 <_vfiprintf_r+0x26c>)
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d127      	bne.n	8012a12 <_vfiprintf_r+0x20a>
 80129c2:	2207      	movs	r2, #7
 80129c4:	9b07      	ldr	r3, [sp, #28]
 80129c6:	3307      	adds	r3, #7
 80129c8:	4393      	bics	r3, r2
 80129ca:	3308      	adds	r3, #8
 80129cc:	9307      	str	r3, [sp, #28]
 80129ce:	696b      	ldr	r3, [r5, #20]
 80129d0:	9a04      	ldr	r2, [sp, #16]
 80129d2:	189b      	adds	r3, r3, r2
 80129d4:	616b      	str	r3, [r5, #20]
 80129d6:	e75d      	b.n	8012894 <_vfiprintf_r+0x8c>
 80129d8:	210a      	movs	r1, #10
 80129da:	434b      	muls	r3, r1
 80129dc:	4667      	mov	r7, ip
 80129de:	189b      	adds	r3, r3, r2
 80129e0:	3909      	subs	r1, #9
 80129e2:	e7a3      	b.n	801292c <_vfiprintf_r+0x124>
 80129e4:	2301      	movs	r3, #1
 80129e6:	425b      	negs	r3, r3
 80129e8:	e7ce      	b.n	8012988 <_vfiprintf_r+0x180>
 80129ea:	2300      	movs	r3, #0
 80129ec:	001a      	movs	r2, r3
 80129ee:	3701      	adds	r7, #1
 80129f0:	606b      	str	r3, [r5, #4]
 80129f2:	7839      	ldrb	r1, [r7, #0]
 80129f4:	1c78      	adds	r0, r7, #1
 80129f6:	3930      	subs	r1, #48	; 0x30
 80129f8:	4684      	mov	ip, r0
 80129fa:	2909      	cmp	r1, #9
 80129fc:	d903      	bls.n	8012a06 <_vfiprintf_r+0x1fe>
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d0c3      	beq.n	801298a <_vfiprintf_r+0x182>
 8012a02:	9209      	str	r2, [sp, #36]	; 0x24
 8012a04:	e7c1      	b.n	801298a <_vfiprintf_r+0x182>
 8012a06:	230a      	movs	r3, #10
 8012a08:	435a      	muls	r2, r3
 8012a0a:	4667      	mov	r7, ip
 8012a0c:	1852      	adds	r2, r2, r1
 8012a0e:	3b09      	subs	r3, #9
 8012a10:	e7ef      	b.n	80129f2 <_vfiprintf_r+0x1ea>
 8012a12:	ab07      	add	r3, sp, #28
 8012a14:	9300      	str	r3, [sp, #0]
 8012a16:	0022      	movs	r2, r4
 8012a18:	0029      	movs	r1, r5
 8012a1a:	0030      	movs	r0, r6
 8012a1c:	4b16      	ldr	r3, [pc, #88]	; (8012a78 <_vfiprintf_r+0x270>)
 8012a1e:	e000      	b.n	8012a22 <_vfiprintf_r+0x21a>
 8012a20:	bf00      	nop
 8012a22:	9004      	str	r0, [sp, #16]
 8012a24:	9b04      	ldr	r3, [sp, #16]
 8012a26:	3301      	adds	r3, #1
 8012a28:	d1d1      	bne.n	80129ce <_vfiprintf_r+0x1c6>
 8012a2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012a2c:	07db      	lsls	r3, r3, #31
 8012a2e:	d405      	bmi.n	8012a3c <_vfiprintf_r+0x234>
 8012a30:	89a3      	ldrh	r3, [r4, #12]
 8012a32:	059b      	lsls	r3, r3, #22
 8012a34:	d402      	bmi.n	8012a3c <_vfiprintf_r+0x234>
 8012a36:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012a38:	f000 fac6 	bl	8012fc8 <__retarget_lock_release_recursive>
 8012a3c:	89a3      	ldrh	r3, [r4, #12]
 8012a3e:	065b      	lsls	r3, r3, #25
 8012a40:	d500      	bpl.n	8012a44 <_vfiprintf_r+0x23c>
 8012a42:	e70a      	b.n	801285a <_vfiprintf_r+0x52>
 8012a44:	980d      	ldr	r0, [sp, #52]	; 0x34
 8012a46:	e70a      	b.n	801285e <_vfiprintf_r+0x56>
 8012a48:	ab07      	add	r3, sp, #28
 8012a4a:	9300      	str	r3, [sp, #0]
 8012a4c:	0022      	movs	r2, r4
 8012a4e:	0029      	movs	r1, r5
 8012a50:	0030      	movs	r0, r6
 8012a52:	4b09      	ldr	r3, [pc, #36]	; (8012a78 <_vfiprintf_r+0x270>)
 8012a54:	f7fe fdfc 	bl	8011650 <_printf_i>
 8012a58:	e7e3      	b.n	8012a22 <_vfiprintf_r+0x21a>
 8012a5a:	46c0      	nop			; (mov r8, r8)
 8012a5c:	08013c98 	.word	0x08013c98
 8012a60:	08013cb8 	.word	0x08013cb8
 8012a64:	08013c78 	.word	0x08013c78
 8012a68:	08013b9c 	.word	0x08013b9c
 8012a6c:	08013ba2 	.word	0x08013ba2
 8012a70:	08013ba6 	.word	0x08013ba6
 8012a74:	00000000 	.word	0x00000000
 8012a78:	080127e3 	.word	0x080127e3

08012a7c <__swbuf_r>:
 8012a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a7e:	0005      	movs	r5, r0
 8012a80:	000e      	movs	r6, r1
 8012a82:	0014      	movs	r4, r2
 8012a84:	2800      	cmp	r0, #0
 8012a86:	d004      	beq.n	8012a92 <__swbuf_r+0x16>
 8012a88:	6983      	ldr	r3, [r0, #24]
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d101      	bne.n	8012a92 <__swbuf_r+0x16>
 8012a8e:	f000 f9f9 	bl	8012e84 <__sinit>
 8012a92:	4b22      	ldr	r3, [pc, #136]	; (8012b1c <__swbuf_r+0xa0>)
 8012a94:	429c      	cmp	r4, r3
 8012a96:	d12e      	bne.n	8012af6 <__swbuf_r+0x7a>
 8012a98:	686c      	ldr	r4, [r5, #4]
 8012a9a:	69a3      	ldr	r3, [r4, #24]
 8012a9c:	60a3      	str	r3, [r4, #8]
 8012a9e:	89a3      	ldrh	r3, [r4, #12]
 8012aa0:	071b      	lsls	r3, r3, #28
 8012aa2:	d532      	bpl.n	8012b0a <__swbuf_r+0x8e>
 8012aa4:	6923      	ldr	r3, [r4, #16]
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d02f      	beq.n	8012b0a <__swbuf_r+0x8e>
 8012aaa:	6823      	ldr	r3, [r4, #0]
 8012aac:	6922      	ldr	r2, [r4, #16]
 8012aae:	b2f7      	uxtb	r7, r6
 8012ab0:	1a98      	subs	r0, r3, r2
 8012ab2:	6963      	ldr	r3, [r4, #20]
 8012ab4:	b2f6      	uxtb	r6, r6
 8012ab6:	4283      	cmp	r3, r0
 8012ab8:	dc05      	bgt.n	8012ac6 <__swbuf_r+0x4a>
 8012aba:	0021      	movs	r1, r4
 8012abc:	0028      	movs	r0, r5
 8012abe:	f000 f93f 	bl	8012d40 <_fflush_r>
 8012ac2:	2800      	cmp	r0, #0
 8012ac4:	d127      	bne.n	8012b16 <__swbuf_r+0x9a>
 8012ac6:	68a3      	ldr	r3, [r4, #8]
 8012ac8:	3001      	adds	r0, #1
 8012aca:	3b01      	subs	r3, #1
 8012acc:	60a3      	str	r3, [r4, #8]
 8012ace:	6823      	ldr	r3, [r4, #0]
 8012ad0:	1c5a      	adds	r2, r3, #1
 8012ad2:	6022      	str	r2, [r4, #0]
 8012ad4:	701f      	strb	r7, [r3, #0]
 8012ad6:	6963      	ldr	r3, [r4, #20]
 8012ad8:	4283      	cmp	r3, r0
 8012ada:	d004      	beq.n	8012ae6 <__swbuf_r+0x6a>
 8012adc:	89a3      	ldrh	r3, [r4, #12]
 8012ade:	07db      	lsls	r3, r3, #31
 8012ae0:	d507      	bpl.n	8012af2 <__swbuf_r+0x76>
 8012ae2:	2e0a      	cmp	r6, #10
 8012ae4:	d105      	bne.n	8012af2 <__swbuf_r+0x76>
 8012ae6:	0021      	movs	r1, r4
 8012ae8:	0028      	movs	r0, r5
 8012aea:	f000 f929 	bl	8012d40 <_fflush_r>
 8012aee:	2800      	cmp	r0, #0
 8012af0:	d111      	bne.n	8012b16 <__swbuf_r+0x9a>
 8012af2:	0030      	movs	r0, r6
 8012af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012af6:	4b0a      	ldr	r3, [pc, #40]	; (8012b20 <__swbuf_r+0xa4>)
 8012af8:	429c      	cmp	r4, r3
 8012afa:	d101      	bne.n	8012b00 <__swbuf_r+0x84>
 8012afc:	68ac      	ldr	r4, [r5, #8]
 8012afe:	e7cc      	b.n	8012a9a <__swbuf_r+0x1e>
 8012b00:	4b08      	ldr	r3, [pc, #32]	; (8012b24 <__swbuf_r+0xa8>)
 8012b02:	429c      	cmp	r4, r3
 8012b04:	d1c9      	bne.n	8012a9a <__swbuf_r+0x1e>
 8012b06:	68ec      	ldr	r4, [r5, #12]
 8012b08:	e7c7      	b.n	8012a9a <__swbuf_r+0x1e>
 8012b0a:	0021      	movs	r1, r4
 8012b0c:	0028      	movs	r0, r5
 8012b0e:	f000 f80b 	bl	8012b28 <__swsetup_r>
 8012b12:	2800      	cmp	r0, #0
 8012b14:	d0c9      	beq.n	8012aaa <__swbuf_r+0x2e>
 8012b16:	2601      	movs	r6, #1
 8012b18:	4276      	negs	r6, r6
 8012b1a:	e7ea      	b.n	8012af2 <__swbuf_r+0x76>
 8012b1c:	08013c98 	.word	0x08013c98
 8012b20:	08013cb8 	.word	0x08013cb8
 8012b24:	08013c78 	.word	0x08013c78

08012b28 <__swsetup_r>:
 8012b28:	4b37      	ldr	r3, [pc, #220]	; (8012c08 <__swsetup_r+0xe0>)
 8012b2a:	b570      	push	{r4, r5, r6, lr}
 8012b2c:	681d      	ldr	r5, [r3, #0]
 8012b2e:	0006      	movs	r6, r0
 8012b30:	000c      	movs	r4, r1
 8012b32:	2d00      	cmp	r5, #0
 8012b34:	d005      	beq.n	8012b42 <__swsetup_r+0x1a>
 8012b36:	69ab      	ldr	r3, [r5, #24]
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d102      	bne.n	8012b42 <__swsetup_r+0x1a>
 8012b3c:	0028      	movs	r0, r5
 8012b3e:	f000 f9a1 	bl	8012e84 <__sinit>
 8012b42:	4b32      	ldr	r3, [pc, #200]	; (8012c0c <__swsetup_r+0xe4>)
 8012b44:	429c      	cmp	r4, r3
 8012b46:	d10f      	bne.n	8012b68 <__swsetup_r+0x40>
 8012b48:	686c      	ldr	r4, [r5, #4]
 8012b4a:	230c      	movs	r3, #12
 8012b4c:	5ee2      	ldrsh	r2, [r4, r3]
 8012b4e:	b293      	uxth	r3, r2
 8012b50:	0711      	lsls	r1, r2, #28
 8012b52:	d42d      	bmi.n	8012bb0 <__swsetup_r+0x88>
 8012b54:	06d9      	lsls	r1, r3, #27
 8012b56:	d411      	bmi.n	8012b7c <__swsetup_r+0x54>
 8012b58:	2309      	movs	r3, #9
 8012b5a:	2001      	movs	r0, #1
 8012b5c:	6033      	str	r3, [r6, #0]
 8012b5e:	3337      	adds	r3, #55	; 0x37
 8012b60:	4313      	orrs	r3, r2
 8012b62:	81a3      	strh	r3, [r4, #12]
 8012b64:	4240      	negs	r0, r0
 8012b66:	bd70      	pop	{r4, r5, r6, pc}
 8012b68:	4b29      	ldr	r3, [pc, #164]	; (8012c10 <__swsetup_r+0xe8>)
 8012b6a:	429c      	cmp	r4, r3
 8012b6c:	d101      	bne.n	8012b72 <__swsetup_r+0x4a>
 8012b6e:	68ac      	ldr	r4, [r5, #8]
 8012b70:	e7eb      	b.n	8012b4a <__swsetup_r+0x22>
 8012b72:	4b28      	ldr	r3, [pc, #160]	; (8012c14 <__swsetup_r+0xec>)
 8012b74:	429c      	cmp	r4, r3
 8012b76:	d1e8      	bne.n	8012b4a <__swsetup_r+0x22>
 8012b78:	68ec      	ldr	r4, [r5, #12]
 8012b7a:	e7e6      	b.n	8012b4a <__swsetup_r+0x22>
 8012b7c:	075b      	lsls	r3, r3, #29
 8012b7e:	d513      	bpl.n	8012ba8 <__swsetup_r+0x80>
 8012b80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012b82:	2900      	cmp	r1, #0
 8012b84:	d008      	beq.n	8012b98 <__swsetup_r+0x70>
 8012b86:	0023      	movs	r3, r4
 8012b88:	3344      	adds	r3, #68	; 0x44
 8012b8a:	4299      	cmp	r1, r3
 8012b8c:	d002      	beq.n	8012b94 <__swsetup_r+0x6c>
 8012b8e:	0030      	movs	r0, r6
 8012b90:	f7ff fdc0 	bl	8012714 <_free_r>
 8012b94:	2300      	movs	r3, #0
 8012b96:	6363      	str	r3, [r4, #52]	; 0x34
 8012b98:	2224      	movs	r2, #36	; 0x24
 8012b9a:	89a3      	ldrh	r3, [r4, #12]
 8012b9c:	4393      	bics	r3, r2
 8012b9e:	81a3      	strh	r3, [r4, #12]
 8012ba0:	2300      	movs	r3, #0
 8012ba2:	6063      	str	r3, [r4, #4]
 8012ba4:	6923      	ldr	r3, [r4, #16]
 8012ba6:	6023      	str	r3, [r4, #0]
 8012ba8:	2308      	movs	r3, #8
 8012baa:	89a2      	ldrh	r2, [r4, #12]
 8012bac:	4313      	orrs	r3, r2
 8012bae:	81a3      	strh	r3, [r4, #12]
 8012bb0:	6923      	ldr	r3, [r4, #16]
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d10b      	bne.n	8012bce <__swsetup_r+0xa6>
 8012bb6:	21a0      	movs	r1, #160	; 0xa0
 8012bb8:	2280      	movs	r2, #128	; 0x80
 8012bba:	89a3      	ldrh	r3, [r4, #12]
 8012bbc:	0089      	lsls	r1, r1, #2
 8012bbe:	0092      	lsls	r2, r2, #2
 8012bc0:	400b      	ands	r3, r1
 8012bc2:	4293      	cmp	r3, r2
 8012bc4:	d003      	beq.n	8012bce <__swsetup_r+0xa6>
 8012bc6:	0021      	movs	r1, r4
 8012bc8:	0030      	movs	r0, r6
 8012bca:	f000 fa27 	bl	801301c <__smakebuf_r>
 8012bce:	220c      	movs	r2, #12
 8012bd0:	5ea3      	ldrsh	r3, [r4, r2]
 8012bd2:	2001      	movs	r0, #1
 8012bd4:	001a      	movs	r2, r3
 8012bd6:	b299      	uxth	r1, r3
 8012bd8:	4002      	ands	r2, r0
 8012bda:	4203      	tst	r3, r0
 8012bdc:	d00f      	beq.n	8012bfe <__swsetup_r+0xd6>
 8012bde:	2200      	movs	r2, #0
 8012be0:	60a2      	str	r2, [r4, #8]
 8012be2:	6962      	ldr	r2, [r4, #20]
 8012be4:	4252      	negs	r2, r2
 8012be6:	61a2      	str	r2, [r4, #24]
 8012be8:	2000      	movs	r0, #0
 8012bea:	6922      	ldr	r2, [r4, #16]
 8012bec:	4282      	cmp	r2, r0
 8012bee:	d1ba      	bne.n	8012b66 <__swsetup_r+0x3e>
 8012bf0:	060a      	lsls	r2, r1, #24
 8012bf2:	d5b8      	bpl.n	8012b66 <__swsetup_r+0x3e>
 8012bf4:	2240      	movs	r2, #64	; 0x40
 8012bf6:	4313      	orrs	r3, r2
 8012bf8:	81a3      	strh	r3, [r4, #12]
 8012bfa:	3801      	subs	r0, #1
 8012bfc:	e7b3      	b.n	8012b66 <__swsetup_r+0x3e>
 8012bfe:	0788      	lsls	r0, r1, #30
 8012c00:	d400      	bmi.n	8012c04 <__swsetup_r+0xdc>
 8012c02:	6962      	ldr	r2, [r4, #20]
 8012c04:	60a2      	str	r2, [r4, #8]
 8012c06:	e7ef      	b.n	8012be8 <__swsetup_r+0xc0>
 8012c08:	200000e4 	.word	0x200000e4
 8012c0c:	08013c98 	.word	0x08013c98
 8012c10:	08013cb8 	.word	0x08013cb8
 8012c14:	08013c78 	.word	0x08013c78

08012c18 <abort>:
 8012c18:	2006      	movs	r0, #6
 8012c1a:	b510      	push	{r4, lr}
 8012c1c:	f000 fa6c 	bl	80130f8 <raise>
 8012c20:	2001      	movs	r0, #1
 8012c22:	f7f6 f935 	bl	8008e90 <_exit>
	...

08012c28 <__sflush_r>:
 8012c28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012c2a:	898b      	ldrh	r3, [r1, #12]
 8012c2c:	0005      	movs	r5, r0
 8012c2e:	000c      	movs	r4, r1
 8012c30:	071a      	lsls	r2, r3, #28
 8012c32:	d45f      	bmi.n	8012cf4 <__sflush_r+0xcc>
 8012c34:	684a      	ldr	r2, [r1, #4]
 8012c36:	2a00      	cmp	r2, #0
 8012c38:	dc04      	bgt.n	8012c44 <__sflush_r+0x1c>
 8012c3a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8012c3c:	2a00      	cmp	r2, #0
 8012c3e:	dc01      	bgt.n	8012c44 <__sflush_r+0x1c>
 8012c40:	2000      	movs	r0, #0
 8012c42:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012c44:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8012c46:	2f00      	cmp	r7, #0
 8012c48:	d0fa      	beq.n	8012c40 <__sflush_r+0x18>
 8012c4a:	2200      	movs	r2, #0
 8012c4c:	2180      	movs	r1, #128	; 0x80
 8012c4e:	682e      	ldr	r6, [r5, #0]
 8012c50:	602a      	str	r2, [r5, #0]
 8012c52:	001a      	movs	r2, r3
 8012c54:	0149      	lsls	r1, r1, #5
 8012c56:	400a      	ands	r2, r1
 8012c58:	420b      	tst	r3, r1
 8012c5a:	d034      	beq.n	8012cc6 <__sflush_r+0x9e>
 8012c5c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012c5e:	89a3      	ldrh	r3, [r4, #12]
 8012c60:	075b      	lsls	r3, r3, #29
 8012c62:	d506      	bpl.n	8012c72 <__sflush_r+0x4a>
 8012c64:	6863      	ldr	r3, [r4, #4]
 8012c66:	1ac0      	subs	r0, r0, r3
 8012c68:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d001      	beq.n	8012c72 <__sflush_r+0x4a>
 8012c6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012c70:	1ac0      	subs	r0, r0, r3
 8012c72:	0002      	movs	r2, r0
 8012c74:	6a21      	ldr	r1, [r4, #32]
 8012c76:	2300      	movs	r3, #0
 8012c78:	0028      	movs	r0, r5
 8012c7a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8012c7c:	47b8      	blx	r7
 8012c7e:	89a1      	ldrh	r1, [r4, #12]
 8012c80:	1c43      	adds	r3, r0, #1
 8012c82:	d106      	bne.n	8012c92 <__sflush_r+0x6a>
 8012c84:	682b      	ldr	r3, [r5, #0]
 8012c86:	2b1d      	cmp	r3, #29
 8012c88:	d831      	bhi.n	8012cee <__sflush_r+0xc6>
 8012c8a:	4a2c      	ldr	r2, [pc, #176]	; (8012d3c <__sflush_r+0x114>)
 8012c8c:	40da      	lsrs	r2, r3
 8012c8e:	07d3      	lsls	r3, r2, #31
 8012c90:	d52d      	bpl.n	8012cee <__sflush_r+0xc6>
 8012c92:	2300      	movs	r3, #0
 8012c94:	6063      	str	r3, [r4, #4]
 8012c96:	6923      	ldr	r3, [r4, #16]
 8012c98:	6023      	str	r3, [r4, #0]
 8012c9a:	04cb      	lsls	r3, r1, #19
 8012c9c:	d505      	bpl.n	8012caa <__sflush_r+0x82>
 8012c9e:	1c43      	adds	r3, r0, #1
 8012ca0:	d102      	bne.n	8012ca8 <__sflush_r+0x80>
 8012ca2:	682b      	ldr	r3, [r5, #0]
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	d100      	bne.n	8012caa <__sflush_r+0x82>
 8012ca8:	6560      	str	r0, [r4, #84]	; 0x54
 8012caa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012cac:	602e      	str	r6, [r5, #0]
 8012cae:	2900      	cmp	r1, #0
 8012cb0:	d0c6      	beq.n	8012c40 <__sflush_r+0x18>
 8012cb2:	0023      	movs	r3, r4
 8012cb4:	3344      	adds	r3, #68	; 0x44
 8012cb6:	4299      	cmp	r1, r3
 8012cb8:	d002      	beq.n	8012cc0 <__sflush_r+0x98>
 8012cba:	0028      	movs	r0, r5
 8012cbc:	f7ff fd2a 	bl	8012714 <_free_r>
 8012cc0:	2000      	movs	r0, #0
 8012cc2:	6360      	str	r0, [r4, #52]	; 0x34
 8012cc4:	e7bd      	b.n	8012c42 <__sflush_r+0x1a>
 8012cc6:	2301      	movs	r3, #1
 8012cc8:	0028      	movs	r0, r5
 8012cca:	6a21      	ldr	r1, [r4, #32]
 8012ccc:	47b8      	blx	r7
 8012cce:	1c43      	adds	r3, r0, #1
 8012cd0:	d1c5      	bne.n	8012c5e <__sflush_r+0x36>
 8012cd2:	682b      	ldr	r3, [r5, #0]
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d0c2      	beq.n	8012c5e <__sflush_r+0x36>
 8012cd8:	2b1d      	cmp	r3, #29
 8012cda:	d001      	beq.n	8012ce0 <__sflush_r+0xb8>
 8012cdc:	2b16      	cmp	r3, #22
 8012cde:	d101      	bne.n	8012ce4 <__sflush_r+0xbc>
 8012ce0:	602e      	str	r6, [r5, #0]
 8012ce2:	e7ad      	b.n	8012c40 <__sflush_r+0x18>
 8012ce4:	2340      	movs	r3, #64	; 0x40
 8012ce6:	89a2      	ldrh	r2, [r4, #12]
 8012ce8:	4313      	orrs	r3, r2
 8012cea:	81a3      	strh	r3, [r4, #12]
 8012cec:	e7a9      	b.n	8012c42 <__sflush_r+0x1a>
 8012cee:	2340      	movs	r3, #64	; 0x40
 8012cf0:	430b      	orrs	r3, r1
 8012cf2:	e7fa      	b.n	8012cea <__sflush_r+0xc2>
 8012cf4:	690f      	ldr	r7, [r1, #16]
 8012cf6:	2f00      	cmp	r7, #0
 8012cf8:	d0a2      	beq.n	8012c40 <__sflush_r+0x18>
 8012cfa:	680a      	ldr	r2, [r1, #0]
 8012cfc:	600f      	str	r7, [r1, #0]
 8012cfe:	1bd2      	subs	r2, r2, r7
 8012d00:	9201      	str	r2, [sp, #4]
 8012d02:	2200      	movs	r2, #0
 8012d04:	079b      	lsls	r3, r3, #30
 8012d06:	d100      	bne.n	8012d0a <__sflush_r+0xe2>
 8012d08:	694a      	ldr	r2, [r1, #20]
 8012d0a:	60a2      	str	r2, [r4, #8]
 8012d0c:	9b01      	ldr	r3, [sp, #4]
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	dc00      	bgt.n	8012d14 <__sflush_r+0xec>
 8012d12:	e795      	b.n	8012c40 <__sflush_r+0x18>
 8012d14:	003a      	movs	r2, r7
 8012d16:	0028      	movs	r0, r5
 8012d18:	9b01      	ldr	r3, [sp, #4]
 8012d1a:	6a21      	ldr	r1, [r4, #32]
 8012d1c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012d1e:	47b0      	blx	r6
 8012d20:	2800      	cmp	r0, #0
 8012d22:	dc06      	bgt.n	8012d32 <__sflush_r+0x10a>
 8012d24:	2340      	movs	r3, #64	; 0x40
 8012d26:	2001      	movs	r0, #1
 8012d28:	89a2      	ldrh	r2, [r4, #12]
 8012d2a:	4240      	negs	r0, r0
 8012d2c:	4313      	orrs	r3, r2
 8012d2e:	81a3      	strh	r3, [r4, #12]
 8012d30:	e787      	b.n	8012c42 <__sflush_r+0x1a>
 8012d32:	9b01      	ldr	r3, [sp, #4]
 8012d34:	183f      	adds	r7, r7, r0
 8012d36:	1a1b      	subs	r3, r3, r0
 8012d38:	9301      	str	r3, [sp, #4]
 8012d3a:	e7e7      	b.n	8012d0c <__sflush_r+0xe4>
 8012d3c:	20400001 	.word	0x20400001

08012d40 <_fflush_r>:
 8012d40:	690b      	ldr	r3, [r1, #16]
 8012d42:	b570      	push	{r4, r5, r6, lr}
 8012d44:	0005      	movs	r5, r0
 8012d46:	000c      	movs	r4, r1
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d102      	bne.n	8012d52 <_fflush_r+0x12>
 8012d4c:	2500      	movs	r5, #0
 8012d4e:	0028      	movs	r0, r5
 8012d50:	bd70      	pop	{r4, r5, r6, pc}
 8012d52:	2800      	cmp	r0, #0
 8012d54:	d004      	beq.n	8012d60 <_fflush_r+0x20>
 8012d56:	6983      	ldr	r3, [r0, #24]
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d101      	bne.n	8012d60 <_fflush_r+0x20>
 8012d5c:	f000 f892 	bl	8012e84 <__sinit>
 8012d60:	4b14      	ldr	r3, [pc, #80]	; (8012db4 <_fflush_r+0x74>)
 8012d62:	429c      	cmp	r4, r3
 8012d64:	d11b      	bne.n	8012d9e <_fflush_r+0x5e>
 8012d66:	686c      	ldr	r4, [r5, #4]
 8012d68:	220c      	movs	r2, #12
 8012d6a:	5ea3      	ldrsh	r3, [r4, r2]
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d0ed      	beq.n	8012d4c <_fflush_r+0xc>
 8012d70:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012d72:	07d2      	lsls	r2, r2, #31
 8012d74:	d404      	bmi.n	8012d80 <_fflush_r+0x40>
 8012d76:	059b      	lsls	r3, r3, #22
 8012d78:	d402      	bmi.n	8012d80 <_fflush_r+0x40>
 8012d7a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012d7c:	f000 f923 	bl	8012fc6 <__retarget_lock_acquire_recursive>
 8012d80:	0028      	movs	r0, r5
 8012d82:	0021      	movs	r1, r4
 8012d84:	f7ff ff50 	bl	8012c28 <__sflush_r>
 8012d88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012d8a:	0005      	movs	r5, r0
 8012d8c:	07db      	lsls	r3, r3, #31
 8012d8e:	d4de      	bmi.n	8012d4e <_fflush_r+0xe>
 8012d90:	89a3      	ldrh	r3, [r4, #12]
 8012d92:	059b      	lsls	r3, r3, #22
 8012d94:	d4db      	bmi.n	8012d4e <_fflush_r+0xe>
 8012d96:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012d98:	f000 f916 	bl	8012fc8 <__retarget_lock_release_recursive>
 8012d9c:	e7d7      	b.n	8012d4e <_fflush_r+0xe>
 8012d9e:	4b06      	ldr	r3, [pc, #24]	; (8012db8 <_fflush_r+0x78>)
 8012da0:	429c      	cmp	r4, r3
 8012da2:	d101      	bne.n	8012da8 <_fflush_r+0x68>
 8012da4:	68ac      	ldr	r4, [r5, #8]
 8012da6:	e7df      	b.n	8012d68 <_fflush_r+0x28>
 8012da8:	4b04      	ldr	r3, [pc, #16]	; (8012dbc <_fflush_r+0x7c>)
 8012daa:	429c      	cmp	r4, r3
 8012dac:	d1dc      	bne.n	8012d68 <_fflush_r+0x28>
 8012dae:	68ec      	ldr	r4, [r5, #12]
 8012db0:	e7da      	b.n	8012d68 <_fflush_r+0x28>
 8012db2:	46c0      	nop			; (mov r8, r8)
 8012db4:	08013c98 	.word	0x08013c98
 8012db8:	08013cb8 	.word	0x08013cb8
 8012dbc:	08013c78 	.word	0x08013c78

08012dc0 <std>:
 8012dc0:	2300      	movs	r3, #0
 8012dc2:	b510      	push	{r4, lr}
 8012dc4:	0004      	movs	r4, r0
 8012dc6:	6003      	str	r3, [r0, #0]
 8012dc8:	6043      	str	r3, [r0, #4]
 8012dca:	6083      	str	r3, [r0, #8]
 8012dcc:	8181      	strh	r1, [r0, #12]
 8012dce:	6643      	str	r3, [r0, #100]	; 0x64
 8012dd0:	0019      	movs	r1, r3
 8012dd2:	81c2      	strh	r2, [r0, #14]
 8012dd4:	6103      	str	r3, [r0, #16]
 8012dd6:	6143      	str	r3, [r0, #20]
 8012dd8:	6183      	str	r3, [r0, #24]
 8012dda:	2208      	movs	r2, #8
 8012ddc:	305c      	adds	r0, #92	; 0x5c
 8012dde:	f7fc f82a 	bl	800ee36 <memset>
 8012de2:	4b05      	ldr	r3, [pc, #20]	; (8012df8 <std+0x38>)
 8012de4:	6224      	str	r4, [r4, #32]
 8012de6:	6263      	str	r3, [r4, #36]	; 0x24
 8012de8:	4b04      	ldr	r3, [pc, #16]	; (8012dfc <std+0x3c>)
 8012dea:	62a3      	str	r3, [r4, #40]	; 0x28
 8012dec:	4b04      	ldr	r3, [pc, #16]	; (8012e00 <std+0x40>)
 8012dee:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012df0:	4b04      	ldr	r3, [pc, #16]	; (8012e04 <std+0x44>)
 8012df2:	6323      	str	r3, [r4, #48]	; 0x30
 8012df4:	bd10      	pop	{r4, pc}
 8012df6:	46c0      	nop			; (mov r8, r8)
 8012df8:	08013139 	.word	0x08013139
 8012dfc:	08013161 	.word	0x08013161
 8012e00:	08013199 	.word	0x08013199
 8012e04:	080131c5 	.word	0x080131c5

08012e08 <_cleanup_r>:
 8012e08:	b510      	push	{r4, lr}
 8012e0a:	4902      	ldr	r1, [pc, #8]	; (8012e14 <_cleanup_r+0xc>)
 8012e0c:	f000 f8ba 	bl	8012f84 <_fwalk_reent>
 8012e10:	bd10      	pop	{r4, pc}
 8012e12:	46c0      	nop			; (mov r8, r8)
 8012e14:	08012d41 	.word	0x08012d41

08012e18 <__sfmoreglue>:
 8012e18:	b570      	push	{r4, r5, r6, lr}
 8012e1a:	2568      	movs	r5, #104	; 0x68
 8012e1c:	1e4a      	subs	r2, r1, #1
 8012e1e:	4355      	muls	r5, r2
 8012e20:	000e      	movs	r6, r1
 8012e22:	0029      	movs	r1, r5
 8012e24:	3174      	adds	r1, #116	; 0x74
 8012e26:	f7fe f99b 	bl	8011160 <_malloc_r>
 8012e2a:	1e04      	subs	r4, r0, #0
 8012e2c:	d008      	beq.n	8012e40 <__sfmoreglue+0x28>
 8012e2e:	2100      	movs	r1, #0
 8012e30:	002a      	movs	r2, r5
 8012e32:	6001      	str	r1, [r0, #0]
 8012e34:	6046      	str	r6, [r0, #4]
 8012e36:	300c      	adds	r0, #12
 8012e38:	60a0      	str	r0, [r4, #8]
 8012e3a:	3268      	adds	r2, #104	; 0x68
 8012e3c:	f7fb fffb 	bl	800ee36 <memset>
 8012e40:	0020      	movs	r0, r4
 8012e42:	bd70      	pop	{r4, r5, r6, pc}

08012e44 <__sfp_lock_acquire>:
 8012e44:	b510      	push	{r4, lr}
 8012e46:	4802      	ldr	r0, [pc, #8]	; (8012e50 <__sfp_lock_acquire+0xc>)
 8012e48:	f000 f8bd 	bl	8012fc6 <__retarget_lock_acquire_recursive>
 8012e4c:	bd10      	pop	{r4, pc}
 8012e4e:	46c0      	nop			; (mov r8, r8)
 8012e50:	20000d5d 	.word	0x20000d5d

08012e54 <__sfp_lock_release>:
 8012e54:	b510      	push	{r4, lr}
 8012e56:	4802      	ldr	r0, [pc, #8]	; (8012e60 <__sfp_lock_release+0xc>)
 8012e58:	f000 f8b6 	bl	8012fc8 <__retarget_lock_release_recursive>
 8012e5c:	bd10      	pop	{r4, pc}
 8012e5e:	46c0      	nop			; (mov r8, r8)
 8012e60:	20000d5d 	.word	0x20000d5d

08012e64 <__sinit_lock_acquire>:
 8012e64:	b510      	push	{r4, lr}
 8012e66:	4802      	ldr	r0, [pc, #8]	; (8012e70 <__sinit_lock_acquire+0xc>)
 8012e68:	f000 f8ad 	bl	8012fc6 <__retarget_lock_acquire_recursive>
 8012e6c:	bd10      	pop	{r4, pc}
 8012e6e:	46c0      	nop			; (mov r8, r8)
 8012e70:	20000d5e 	.word	0x20000d5e

08012e74 <__sinit_lock_release>:
 8012e74:	b510      	push	{r4, lr}
 8012e76:	4802      	ldr	r0, [pc, #8]	; (8012e80 <__sinit_lock_release+0xc>)
 8012e78:	f000 f8a6 	bl	8012fc8 <__retarget_lock_release_recursive>
 8012e7c:	bd10      	pop	{r4, pc}
 8012e7e:	46c0      	nop			; (mov r8, r8)
 8012e80:	20000d5e 	.word	0x20000d5e

08012e84 <__sinit>:
 8012e84:	b513      	push	{r0, r1, r4, lr}
 8012e86:	0004      	movs	r4, r0
 8012e88:	f7ff ffec 	bl	8012e64 <__sinit_lock_acquire>
 8012e8c:	69a3      	ldr	r3, [r4, #24]
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d002      	beq.n	8012e98 <__sinit+0x14>
 8012e92:	f7ff ffef 	bl	8012e74 <__sinit_lock_release>
 8012e96:	bd13      	pop	{r0, r1, r4, pc}
 8012e98:	64a3      	str	r3, [r4, #72]	; 0x48
 8012e9a:	64e3      	str	r3, [r4, #76]	; 0x4c
 8012e9c:	6523      	str	r3, [r4, #80]	; 0x50
 8012e9e:	4b13      	ldr	r3, [pc, #76]	; (8012eec <__sinit+0x68>)
 8012ea0:	4a13      	ldr	r2, [pc, #76]	; (8012ef0 <__sinit+0x6c>)
 8012ea2:	681b      	ldr	r3, [r3, #0]
 8012ea4:	62a2      	str	r2, [r4, #40]	; 0x28
 8012ea6:	9301      	str	r3, [sp, #4]
 8012ea8:	42a3      	cmp	r3, r4
 8012eaa:	d101      	bne.n	8012eb0 <__sinit+0x2c>
 8012eac:	2301      	movs	r3, #1
 8012eae:	61a3      	str	r3, [r4, #24]
 8012eb0:	0020      	movs	r0, r4
 8012eb2:	f000 f81f 	bl	8012ef4 <__sfp>
 8012eb6:	6060      	str	r0, [r4, #4]
 8012eb8:	0020      	movs	r0, r4
 8012eba:	f000 f81b 	bl	8012ef4 <__sfp>
 8012ebe:	60a0      	str	r0, [r4, #8]
 8012ec0:	0020      	movs	r0, r4
 8012ec2:	f000 f817 	bl	8012ef4 <__sfp>
 8012ec6:	2200      	movs	r2, #0
 8012ec8:	2104      	movs	r1, #4
 8012eca:	60e0      	str	r0, [r4, #12]
 8012ecc:	6860      	ldr	r0, [r4, #4]
 8012ece:	f7ff ff77 	bl	8012dc0 <std>
 8012ed2:	2201      	movs	r2, #1
 8012ed4:	2109      	movs	r1, #9
 8012ed6:	68a0      	ldr	r0, [r4, #8]
 8012ed8:	f7ff ff72 	bl	8012dc0 <std>
 8012edc:	2202      	movs	r2, #2
 8012ede:	2112      	movs	r1, #18
 8012ee0:	68e0      	ldr	r0, [r4, #12]
 8012ee2:	f7ff ff6d 	bl	8012dc0 <std>
 8012ee6:	2301      	movs	r3, #1
 8012ee8:	61a3      	str	r3, [r4, #24]
 8012eea:	e7d2      	b.n	8012e92 <__sinit+0xe>
 8012eec:	08013840 	.word	0x08013840
 8012ef0:	08012e09 	.word	0x08012e09

08012ef4 <__sfp>:
 8012ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ef6:	0007      	movs	r7, r0
 8012ef8:	f7ff ffa4 	bl	8012e44 <__sfp_lock_acquire>
 8012efc:	4b1f      	ldr	r3, [pc, #124]	; (8012f7c <__sfp+0x88>)
 8012efe:	681e      	ldr	r6, [r3, #0]
 8012f00:	69b3      	ldr	r3, [r6, #24]
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d102      	bne.n	8012f0c <__sfp+0x18>
 8012f06:	0030      	movs	r0, r6
 8012f08:	f7ff ffbc 	bl	8012e84 <__sinit>
 8012f0c:	3648      	adds	r6, #72	; 0x48
 8012f0e:	68b4      	ldr	r4, [r6, #8]
 8012f10:	6873      	ldr	r3, [r6, #4]
 8012f12:	3b01      	subs	r3, #1
 8012f14:	d504      	bpl.n	8012f20 <__sfp+0x2c>
 8012f16:	6833      	ldr	r3, [r6, #0]
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	d022      	beq.n	8012f62 <__sfp+0x6e>
 8012f1c:	6836      	ldr	r6, [r6, #0]
 8012f1e:	e7f6      	b.n	8012f0e <__sfp+0x1a>
 8012f20:	220c      	movs	r2, #12
 8012f22:	5ea5      	ldrsh	r5, [r4, r2]
 8012f24:	2d00      	cmp	r5, #0
 8012f26:	d11a      	bne.n	8012f5e <__sfp+0x6a>
 8012f28:	0020      	movs	r0, r4
 8012f2a:	4b15      	ldr	r3, [pc, #84]	; (8012f80 <__sfp+0x8c>)
 8012f2c:	3058      	adds	r0, #88	; 0x58
 8012f2e:	60e3      	str	r3, [r4, #12]
 8012f30:	6665      	str	r5, [r4, #100]	; 0x64
 8012f32:	f000 f847 	bl	8012fc4 <__retarget_lock_init_recursive>
 8012f36:	f7ff ff8d 	bl	8012e54 <__sfp_lock_release>
 8012f3a:	0020      	movs	r0, r4
 8012f3c:	2208      	movs	r2, #8
 8012f3e:	0029      	movs	r1, r5
 8012f40:	6025      	str	r5, [r4, #0]
 8012f42:	60a5      	str	r5, [r4, #8]
 8012f44:	6065      	str	r5, [r4, #4]
 8012f46:	6125      	str	r5, [r4, #16]
 8012f48:	6165      	str	r5, [r4, #20]
 8012f4a:	61a5      	str	r5, [r4, #24]
 8012f4c:	305c      	adds	r0, #92	; 0x5c
 8012f4e:	f7fb ff72 	bl	800ee36 <memset>
 8012f52:	6365      	str	r5, [r4, #52]	; 0x34
 8012f54:	63a5      	str	r5, [r4, #56]	; 0x38
 8012f56:	64a5      	str	r5, [r4, #72]	; 0x48
 8012f58:	64e5      	str	r5, [r4, #76]	; 0x4c
 8012f5a:	0020      	movs	r0, r4
 8012f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f5e:	3468      	adds	r4, #104	; 0x68
 8012f60:	e7d7      	b.n	8012f12 <__sfp+0x1e>
 8012f62:	2104      	movs	r1, #4
 8012f64:	0038      	movs	r0, r7
 8012f66:	f7ff ff57 	bl	8012e18 <__sfmoreglue>
 8012f6a:	1e04      	subs	r4, r0, #0
 8012f6c:	6030      	str	r0, [r6, #0]
 8012f6e:	d1d5      	bne.n	8012f1c <__sfp+0x28>
 8012f70:	f7ff ff70 	bl	8012e54 <__sfp_lock_release>
 8012f74:	230c      	movs	r3, #12
 8012f76:	603b      	str	r3, [r7, #0]
 8012f78:	e7ef      	b.n	8012f5a <__sfp+0x66>
 8012f7a:	46c0      	nop			; (mov r8, r8)
 8012f7c:	08013840 	.word	0x08013840
 8012f80:	ffff0001 	.word	0xffff0001

08012f84 <_fwalk_reent>:
 8012f84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012f86:	0004      	movs	r4, r0
 8012f88:	0006      	movs	r6, r0
 8012f8a:	2700      	movs	r7, #0
 8012f8c:	9101      	str	r1, [sp, #4]
 8012f8e:	3448      	adds	r4, #72	; 0x48
 8012f90:	6863      	ldr	r3, [r4, #4]
 8012f92:	68a5      	ldr	r5, [r4, #8]
 8012f94:	9300      	str	r3, [sp, #0]
 8012f96:	9b00      	ldr	r3, [sp, #0]
 8012f98:	3b01      	subs	r3, #1
 8012f9a:	9300      	str	r3, [sp, #0]
 8012f9c:	d504      	bpl.n	8012fa8 <_fwalk_reent+0x24>
 8012f9e:	6824      	ldr	r4, [r4, #0]
 8012fa0:	2c00      	cmp	r4, #0
 8012fa2:	d1f5      	bne.n	8012f90 <_fwalk_reent+0xc>
 8012fa4:	0038      	movs	r0, r7
 8012fa6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012fa8:	89ab      	ldrh	r3, [r5, #12]
 8012faa:	2b01      	cmp	r3, #1
 8012fac:	d908      	bls.n	8012fc0 <_fwalk_reent+0x3c>
 8012fae:	220e      	movs	r2, #14
 8012fb0:	5eab      	ldrsh	r3, [r5, r2]
 8012fb2:	3301      	adds	r3, #1
 8012fb4:	d004      	beq.n	8012fc0 <_fwalk_reent+0x3c>
 8012fb6:	0029      	movs	r1, r5
 8012fb8:	0030      	movs	r0, r6
 8012fba:	9b01      	ldr	r3, [sp, #4]
 8012fbc:	4798      	blx	r3
 8012fbe:	4307      	orrs	r7, r0
 8012fc0:	3568      	adds	r5, #104	; 0x68
 8012fc2:	e7e8      	b.n	8012f96 <_fwalk_reent+0x12>

08012fc4 <__retarget_lock_init_recursive>:
 8012fc4:	4770      	bx	lr

08012fc6 <__retarget_lock_acquire_recursive>:
 8012fc6:	4770      	bx	lr

08012fc8 <__retarget_lock_release_recursive>:
 8012fc8:	4770      	bx	lr
	...

08012fcc <__swhatbuf_r>:
 8012fcc:	b570      	push	{r4, r5, r6, lr}
 8012fce:	000e      	movs	r6, r1
 8012fd0:	001d      	movs	r5, r3
 8012fd2:	230e      	movs	r3, #14
 8012fd4:	5ec9      	ldrsh	r1, [r1, r3]
 8012fd6:	0014      	movs	r4, r2
 8012fd8:	b096      	sub	sp, #88	; 0x58
 8012fda:	2900      	cmp	r1, #0
 8012fdc:	da08      	bge.n	8012ff0 <__swhatbuf_r+0x24>
 8012fde:	220c      	movs	r2, #12
 8012fe0:	5eb3      	ldrsh	r3, [r6, r2]
 8012fe2:	2200      	movs	r2, #0
 8012fe4:	602a      	str	r2, [r5, #0]
 8012fe6:	061b      	lsls	r3, r3, #24
 8012fe8:	d411      	bmi.n	801300e <__swhatbuf_r+0x42>
 8012fea:	2380      	movs	r3, #128	; 0x80
 8012fec:	00db      	lsls	r3, r3, #3
 8012fee:	e00f      	b.n	8013010 <__swhatbuf_r+0x44>
 8012ff0:	466a      	mov	r2, sp
 8012ff2:	f000 f913 	bl	801321c <_fstat_r>
 8012ff6:	2800      	cmp	r0, #0
 8012ff8:	dbf1      	blt.n	8012fde <__swhatbuf_r+0x12>
 8012ffa:	23f0      	movs	r3, #240	; 0xf0
 8012ffc:	9901      	ldr	r1, [sp, #4]
 8012ffe:	021b      	lsls	r3, r3, #8
 8013000:	4019      	ands	r1, r3
 8013002:	4b05      	ldr	r3, [pc, #20]	; (8013018 <__swhatbuf_r+0x4c>)
 8013004:	18c9      	adds	r1, r1, r3
 8013006:	424b      	negs	r3, r1
 8013008:	4159      	adcs	r1, r3
 801300a:	6029      	str	r1, [r5, #0]
 801300c:	e7ed      	b.n	8012fea <__swhatbuf_r+0x1e>
 801300e:	2340      	movs	r3, #64	; 0x40
 8013010:	2000      	movs	r0, #0
 8013012:	6023      	str	r3, [r4, #0]
 8013014:	b016      	add	sp, #88	; 0x58
 8013016:	bd70      	pop	{r4, r5, r6, pc}
 8013018:	ffffe000 	.word	0xffffe000

0801301c <__smakebuf_r>:
 801301c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801301e:	2602      	movs	r6, #2
 8013020:	898b      	ldrh	r3, [r1, #12]
 8013022:	0005      	movs	r5, r0
 8013024:	000c      	movs	r4, r1
 8013026:	4233      	tst	r3, r6
 8013028:	d006      	beq.n	8013038 <__smakebuf_r+0x1c>
 801302a:	0023      	movs	r3, r4
 801302c:	3347      	adds	r3, #71	; 0x47
 801302e:	6023      	str	r3, [r4, #0]
 8013030:	6123      	str	r3, [r4, #16]
 8013032:	2301      	movs	r3, #1
 8013034:	6163      	str	r3, [r4, #20]
 8013036:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8013038:	466a      	mov	r2, sp
 801303a:	ab01      	add	r3, sp, #4
 801303c:	f7ff ffc6 	bl	8012fcc <__swhatbuf_r>
 8013040:	9900      	ldr	r1, [sp, #0]
 8013042:	0007      	movs	r7, r0
 8013044:	0028      	movs	r0, r5
 8013046:	f7fe f88b 	bl	8011160 <_malloc_r>
 801304a:	2800      	cmp	r0, #0
 801304c:	d108      	bne.n	8013060 <__smakebuf_r+0x44>
 801304e:	220c      	movs	r2, #12
 8013050:	5ea3      	ldrsh	r3, [r4, r2]
 8013052:	059a      	lsls	r2, r3, #22
 8013054:	d4ef      	bmi.n	8013036 <__smakebuf_r+0x1a>
 8013056:	2203      	movs	r2, #3
 8013058:	4393      	bics	r3, r2
 801305a:	431e      	orrs	r6, r3
 801305c:	81a6      	strh	r6, [r4, #12]
 801305e:	e7e4      	b.n	801302a <__smakebuf_r+0xe>
 8013060:	4b0f      	ldr	r3, [pc, #60]	; (80130a0 <__smakebuf_r+0x84>)
 8013062:	62ab      	str	r3, [r5, #40]	; 0x28
 8013064:	2380      	movs	r3, #128	; 0x80
 8013066:	89a2      	ldrh	r2, [r4, #12]
 8013068:	6020      	str	r0, [r4, #0]
 801306a:	4313      	orrs	r3, r2
 801306c:	81a3      	strh	r3, [r4, #12]
 801306e:	9b00      	ldr	r3, [sp, #0]
 8013070:	6120      	str	r0, [r4, #16]
 8013072:	6163      	str	r3, [r4, #20]
 8013074:	9b01      	ldr	r3, [sp, #4]
 8013076:	2b00      	cmp	r3, #0
 8013078:	d00d      	beq.n	8013096 <__smakebuf_r+0x7a>
 801307a:	0028      	movs	r0, r5
 801307c:	230e      	movs	r3, #14
 801307e:	5ee1      	ldrsh	r1, [r4, r3]
 8013080:	f000 f8de 	bl	8013240 <_isatty_r>
 8013084:	2800      	cmp	r0, #0
 8013086:	d006      	beq.n	8013096 <__smakebuf_r+0x7a>
 8013088:	2203      	movs	r2, #3
 801308a:	89a3      	ldrh	r3, [r4, #12]
 801308c:	4393      	bics	r3, r2
 801308e:	001a      	movs	r2, r3
 8013090:	2301      	movs	r3, #1
 8013092:	4313      	orrs	r3, r2
 8013094:	81a3      	strh	r3, [r4, #12]
 8013096:	89a0      	ldrh	r0, [r4, #12]
 8013098:	4307      	orrs	r7, r0
 801309a:	81a7      	strh	r7, [r4, #12]
 801309c:	e7cb      	b.n	8013036 <__smakebuf_r+0x1a>
 801309e:	46c0      	nop			; (mov r8, r8)
 80130a0:	08012e09 	.word	0x08012e09

080130a4 <_raise_r>:
 80130a4:	b570      	push	{r4, r5, r6, lr}
 80130a6:	0004      	movs	r4, r0
 80130a8:	000d      	movs	r5, r1
 80130aa:	291f      	cmp	r1, #31
 80130ac:	d904      	bls.n	80130b8 <_raise_r+0x14>
 80130ae:	2316      	movs	r3, #22
 80130b0:	6003      	str	r3, [r0, #0]
 80130b2:	2001      	movs	r0, #1
 80130b4:	4240      	negs	r0, r0
 80130b6:	bd70      	pop	{r4, r5, r6, pc}
 80130b8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d004      	beq.n	80130c8 <_raise_r+0x24>
 80130be:	008a      	lsls	r2, r1, #2
 80130c0:	189b      	adds	r3, r3, r2
 80130c2:	681a      	ldr	r2, [r3, #0]
 80130c4:	2a00      	cmp	r2, #0
 80130c6:	d108      	bne.n	80130da <_raise_r+0x36>
 80130c8:	0020      	movs	r0, r4
 80130ca:	f000 f831 	bl	8013130 <_getpid_r>
 80130ce:	002a      	movs	r2, r5
 80130d0:	0001      	movs	r1, r0
 80130d2:	0020      	movs	r0, r4
 80130d4:	f000 f81a 	bl	801310c <_kill_r>
 80130d8:	e7ed      	b.n	80130b6 <_raise_r+0x12>
 80130da:	2000      	movs	r0, #0
 80130dc:	2a01      	cmp	r2, #1
 80130de:	d0ea      	beq.n	80130b6 <_raise_r+0x12>
 80130e0:	1c51      	adds	r1, r2, #1
 80130e2:	d103      	bne.n	80130ec <_raise_r+0x48>
 80130e4:	2316      	movs	r3, #22
 80130e6:	3001      	adds	r0, #1
 80130e8:	6023      	str	r3, [r4, #0]
 80130ea:	e7e4      	b.n	80130b6 <_raise_r+0x12>
 80130ec:	2400      	movs	r4, #0
 80130ee:	0028      	movs	r0, r5
 80130f0:	601c      	str	r4, [r3, #0]
 80130f2:	4790      	blx	r2
 80130f4:	0020      	movs	r0, r4
 80130f6:	e7de      	b.n	80130b6 <_raise_r+0x12>

080130f8 <raise>:
 80130f8:	b510      	push	{r4, lr}
 80130fa:	4b03      	ldr	r3, [pc, #12]	; (8013108 <raise+0x10>)
 80130fc:	0001      	movs	r1, r0
 80130fe:	6818      	ldr	r0, [r3, #0]
 8013100:	f7ff ffd0 	bl	80130a4 <_raise_r>
 8013104:	bd10      	pop	{r4, pc}
 8013106:	46c0      	nop			; (mov r8, r8)
 8013108:	200000e4 	.word	0x200000e4

0801310c <_kill_r>:
 801310c:	2300      	movs	r3, #0
 801310e:	b570      	push	{r4, r5, r6, lr}
 8013110:	4d06      	ldr	r5, [pc, #24]	; (801312c <_kill_r+0x20>)
 8013112:	0004      	movs	r4, r0
 8013114:	0008      	movs	r0, r1
 8013116:	0011      	movs	r1, r2
 8013118:	602b      	str	r3, [r5, #0]
 801311a:	f7f5 fea9 	bl	8008e70 <_kill>
 801311e:	1c43      	adds	r3, r0, #1
 8013120:	d103      	bne.n	801312a <_kill_r+0x1e>
 8013122:	682b      	ldr	r3, [r5, #0]
 8013124:	2b00      	cmp	r3, #0
 8013126:	d000      	beq.n	801312a <_kill_r+0x1e>
 8013128:	6023      	str	r3, [r4, #0]
 801312a:	bd70      	pop	{r4, r5, r6, pc}
 801312c:	20000d58 	.word	0x20000d58

08013130 <_getpid_r>:
 8013130:	b510      	push	{r4, lr}
 8013132:	f7f5 fe97 	bl	8008e64 <_getpid>
 8013136:	bd10      	pop	{r4, pc}

08013138 <__sread>:
 8013138:	b570      	push	{r4, r5, r6, lr}
 801313a:	000c      	movs	r4, r1
 801313c:	250e      	movs	r5, #14
 801313e:	5f49      	ldrsh	r1, [r1, r5]
 8013140:	f000 f8a4 	bl	801328c <_read_r>
 8013144:	2800      	cmp	r0, #0
 8013146:	db03      	blt.n	8013150 <__sread+0x18>
 8013148:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801314a:	181b      	adds	r3, r3, r0
 801314c:	6563      	str	r3, [r4, #84]	; 0x54
 801314e:	bd70      	pop	{r4, r5, r6, pc}
 8013150:	89a3      	ldrh	r3, [r4, #12]
 8013152:	4a02      	ldr	r2, [pc, #8]	; (801315c <__sread+0x24>)
 8013154:	4013      	ands	r3, r2
 8013156:	81a3      	strh	r3, [r4, #12]
 8013158:	e7f9      	b.n	801314e <__sread+0x16>
 801315a:	46c0      	nop			; (mov r8, r8)
 801315c:	ffffefff 	.word	0xffffefff

08013160 <__swrite>:
 8013160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013162:	001f      	movs	r7, r3
 8013164:	898b      	ldrh	r3, [r1, #12]
 8013166:	0005      	movs	r5, r0
 8013168:	000c      	movs	r4, r1
 801316a:	0016      	movs	r6, r2
 801316c:	05db      	lsls	r3, r3, #23
 801316e:	d505      	bpl.n	801317c <__swrite+0x1c>
 8013170:	230e      	movs	r3, #14
 8013172:	5ec9      	ldrsh	r1, [r1, r3]
 8013174:	2200      	movs	r2, #0
 8013176:	2302      	movs	r3, #2
 8013178:	f000 f874 	bl	8013264 <_lseek_r>
 801317c:	89a3      	ldrh	r3, [r4, #12]
 801317e:	4a05      	ldr	r2, [pc, #20]	; (8013194 <__swrite+0x34>)
 8013180:	0028      	movs	r0, r5
 8013182:	4013      	ands	r3, r2
 8013184:	81a3      	strh	r3, [r4, #12]
 8013186:	0032      	movs	r2, r6
 8013188:	230e      	movs	r3, #14
 801318a:	5ee1      	ldrsh	r1, [r4, r3]
 801318c:	003b      	movs	r3, r7
 801318e:	f000 f81f 	bl	80131d0 <_write_r>
 8013192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013194:	ffffefff 	.word	0xffffefff

08013198 <__sseek>:
 8013198:	b570      	push	{r4, r5, r6, lr}
 801319a:	000c      	movs	r4, r1
 801319c:	250e      	movs	r5, #14
 801319e:	5f49      	ldrsh	r1, [r1, r5]
 80131a0:	f000 f860 	bl	8013264 <_lseek_r>
 80131a4:	89a3      	ldrh	r3, [r4, #12]
 80131a6:	1c42      	adds	r2, r0, #1
 80131a8:	d103      	bne.n	80131b2 <__sseek+0x1a>
 80131aa:	4a05      	ldr	r2, [pc, #20]	; (80131c0 <__sseek+0x28>)
 80131ac:	4013      	ands	r3, r2
 80131ae:	81a3      	strh	r3, [r4, #12]
 80131b0:	bd70      	pop	{r4, r5, r6, pc}
 80131b2:	2280      	movs	r2, #128	; 0x80
 80131b4:	0152      	lsls	r2, r2, #5
 80131b6:	4313      	orrs	r3, r2
 80131b8:	81a3      	strh	r3, [r4, #12]
 80131ba:	6560      	str	r0, [r4, #84]	; 0x54
 80131bc:	e7f8      	b.n	80131b0 <__sseek+0x18>
 80131be:	46c0      	nop			; (mov r8, r8)
 80131c0:	ffffefff 	.word	0xffffefff

080131c4 <__sclose>:
 80131c4:	b510      	push	{r4, lr}
 80131c6:	230e      	movs	r3, #14
 80131c8:	5ec9      	ldrsh	r1, [r1, r3]
 80131ca:	f000 f815 	bl	80131f8 <_close_r>
 80131ce:	bd10      	pop	{r4, pc}

080131d0 <_write_r>:
 80131d0:	b570      	push	{r4, r5, r6, lr}
 80131d2:	0004      	movs	r4, r0
 80131d4:	0008      	movs	r0, r1
 80131d6:	0011      	movs	r1, r2
 80131d8:	001a      	movs	r2, r3
 80131da:	2300      	movs	r3, #0
 80131dc:	4d05      	ldr	r5, [pc, #20]	; (80131f4 <_write_r+0x24>)
 80131de:	602b      	str	r3, [r5, #0]
 80131e0:	f7f5 fe7f 	bl	8008ee2 <_write>
 80131e4:	1c43      	adds	r3, r0, #1
 80131e6:	d103      	bne.n	80131f0 <_write_r+0x20>
 80131e8:	682b      	ldr	r3, [r5, #0]
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d000      	beq.n	80131f0 <_write_r+0x20>
 80131ee:	6023      	str	r3, [r4, #0]
 80131f0:	bd70      	pop	{r4, r5, r6, pc}
 80131f2:	46c0      	nop			; (mov r8, r8)
 80131f4:	20000d58 	.word	0x20000d58

080131f8 <_close_r>:
 80131f8:	2300      	movs	r3, #0
 80131fa:	b570      	push	{r4, r5, r6, lr}
 80131fc:	4d06      	ldr	r5, [pc, #24]	; (8013218 <_close_r+0x20>)
 80131fe:	0004      	movs	r4, r0
 8013200:	0008      	movs	r0, r1
 8013202:	602b      	str	r3, [r5, #0]
 8013204:	f7f5 fe89 	bl	8008f1a <_close>
 8013208:	1c43      	adds	r3, r0, #1
 801320a:	d103      	bne.n	8013214 <_close_r+0x1c>
 801320c:	682b      	ldr	r3, [r5, #0]
 801320e:	2b00      	cmp	r3, #0
 8013210:	d000      	beq.n	8013214 <_close_r+0x1c>
 8013212:	6023      	str	r3, [r4, #0]
 8013214:	bd70      	pop	{r4, r5, r6, pc}
 8013216:	46c0      	nop			; (mov r8, r8)
 8013218:	20000d58 	.word	0x20000d58

0801321c <_fstat_r>:
 801321c:	2300      	movs	r3, #0
 801321e:	b570      	push	{r4, r5, r6, lr}
 8013220:	4d06      	ldr	r5, [pc, #24]	; (801323c <_fstat_r+0x20>)
 8013222:	0004      	movs	r4, r0
 8013224:	0008      	movs	r0, r1
 8013226:	0011      	movs	r1, r2
 8013228:	602b      	str	r3, [r5, #0]
 801322a:	f7f5 fe80 	bl	8008f2e <_fstat>
 801322e:	1c43      	adds	r3, r0, #1
 8013230:	d103      	bne.n	801323a <_fstat_r+0x1e>
 8013232:	682b      	ldr	r3, [r5, #0]
 8013234:	2b00      	cmp	r3, #0
 8013236:	d000      	beq.n	801323a <_fstat_r+0x1e>
 8013238:	6023      	str	r3, [r4, #0]
 801323a:	bd70      	pop	{r4, r5, r6, pc}
 801323c:	20000d58 	.word	0x20000d58

08013240 <_isatty_r>:
 8013240:	2300      	movs	r3, #0
 8013242:	b570      	push	{r4, r5, r6, lr}
 8013244:	4d06      	ldr	r5, [pc, #24]	; (8013260 <_isatty_r+0x20>)
 8013246:	0004      	movs	r4, r0
 8013248:	0008      	movs	r0, r1
 801324a:	602b      	str	r3, [r5, #0]
 801324c:	f7f5 fe7d 	bl	8008f4a <_isatty>
 8013250:	1c43      	adds	r3, r0, #1
 8013252:	d103      	bne.n	801325c <_isatty_r+0x1c>
 8013254:	682b      	ldr	r3, [r5, #0]
 8013256:	2b00      	cmp	r3, #0
 8013258:	d000      	beq.n	801325c <_isatty_r+0x1c>
 801325a:	6023      	str	r3, [r4, #0]
 801325c:	bd70      	pop	{r4, r5, r6, pc}
 801325e:	46c0      	nop			; (mov r8, r8)
 8013260:	20000d58 	.word	0x20000d58

08013264 <_lseek_r>:
 8013264:	b570      	push	{r4, r5, r6, lr}
 8013266:	0004      	movs	r4, r0
 8013268:	0008      	movs	r0, r1
 801326a:	0011      	movs	r1, r2
 801326c:	001a      	movs	r2, r3
 801326e:	2300      	movs	r3, #0
 8013270:	4d05      	ldr	r5, [pc, #20]	; (8013288 <_lseek_r+0x24>)
 8013272:	602b      	str	r3, [r5, #0]
 8013274:	f7f5 fe72 	bl	8008f5c <_lseek>
 8013278:	1c43      	adds	r3, r0, #1
 801327a:	d103      	bne.n	8013284 <_lseek_r+0x20>
 801327c:	682b      	ldr	r3, [r5, #0]
 801327e:	2b00      	cmp	r3, #0
 8013280:	d000      	beq.n	8013284 <_lseek_r+0x20>
 8013282:	6023      	str	r3, [r4, #0]
 8013284:	bd70      	pop	{r4, r5, r6, pc}
 8013286:	46c0      	nop			; (mov r8, r8)
 8013288:	20000d58 	.word	0x20000d58

0801328c <_read_r>:
 801328c:	b570      	push	{r4, r5, r6, lr}
 801328e:	0004      	movs	r4, r0
 8013290:	0008      	movs	r0, r1
 8013292:	0011      	movs	r1, r2
 8013294:	001a      	movs	r2, r3
 8013296:	2300      	movs	r3, #0
 8013298:	4d05      	ldr	r5, [pc, #20]	; (80132b0 <_read_r+0x24>)
 801329a:	602b      	str	r3, [r5, #0]
 801329c:	f7f5 fe04 	bl	8008ea8 <_read>
 80132a0:	1c43      	adds	r3, r0, #1
 80132a2:	d103      	bne.n	80132ac <_read_r+0x20>
 80132a4:	682b      	ldr	r3, [r5, #0]
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d000      	beq.n	80132ac <_read_r+0x20>
 80132aa:	6023      	str	r3, [r4, #0]
 80132ac:	bd70      	pop	{r4, r5, r6, pc}
 80132ae:	46c0      	nop			; (mov r8, r8)
 80132b0:	20000d58 	.word	0x20000d58

080132b4 <_init>:
 80132b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132b6:	46c0      	nop			; (mov r8, r8)
 80132b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80132ba:	bc08      	pop	{r3}
 80132bc:	469e      	mov	lr, r3
 80132be:	4770      	bx	lr

080132c0 <_fini>:
 80132c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132c2:	46c0      	nop			; (mov r8, r8)
 80132c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80132c6:	bc08      	pop	{r3}
 80132c8:	469e      	mov	lr, r3
 80132ca:	4770      	bx	lr
