
stm32g070cbt6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012dc4  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ab0  08012e80  08012e80  00022e80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013930  08013930  00030290  2**0
                  CONTENTS
  4 .ARM          00000000  08013930  08013930  00030290  2**0
                  CONTENTS
  5 .preinit_array 00000000  08013930  08013930  00030290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013930  08013930  00023930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013934  08013934  00023934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000290  20000000  08013938  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a98  20000290  08013bc8  00030290  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d28  08013bc8  00030d28  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030290  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016f73  00000000  00000000  000302b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cbc  00000000  00000000  0004722b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001300  00000000  00000000  00049ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012d8  00000000  00000000  0004b1e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d8c  00000000  00000000  0004c4c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017727  00000000  00000000  0006424c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093003  00000000  00000000  0007b973  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010e976  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005de8  00000000  00000000  0010e9c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000290 	.word	0x20000290
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08012e64 	.word	0x08012e64

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000294 	.word	0x20000294
 80000fc:	08012e64 	.word	0x08012e64

08000100 <strcmp>:
 8000100:	7802      	ldrb	r2, [r0, #0]
 8000102:	780b      	ldrb	r3, [r1, #0]
 8000104:	2a00      	cmp	r2, #0
 8000106:	d003      	beq.n	8000110 <strcmp+0x10>
 8000108:	3001      	adds	r0, #1
 800010a:	3101      	adds	r1, #1
 800010c:	429a      	cmp	r2, r3
 800010e:	d0f7      	beq.n	8000100 <strcmp>
 8000110:	1ad0      	subs	r0, r2, r3
 8000112:	4770      	bx	lr

08000114 <strlen>:
 8000114:	2300      	movs	r3, #0
 8000116:	5cc2      	ldrb	r2, [r0, r3]
 8000118:	3301      	adds	r3, #1
 800011a:	2a00      	cmp	r2, #0
 800011c:	d1fb      	bne.n	8000116 <strlen+0x2>
 800011e:	1e58      	subs	r0, r3, #1
 8000120:	4770      	bx	lr
	...

08000124 <__gnu_thumb1_case_uqi>:
 8000124:	b402      	push	{r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0049      	lsls	r1, r1, #1
 800012c:	5c09      	ldrb	r1, [r1, r0]
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	448e      	add	lr, r1
 8000132:	bc02      	pop	{r1}
 8000134:	4770      	bx	lr
 8000136:	46c0      	nop			; (mov r8, r8)

08000138 <__gnu_thumb1_case_shi>:
 8000138:	b403      	push	{r0, r1}
 800013a:	4671      	mov	r1, lr
 800013c:	0849      	lsrs	r1, r1, #1
 800013e:	0040      	lsls	r0, r0, #1
 8000140:	0049      	lsls	r1, r1, #1
 8000142:	5e09      	ldrsh	r1, [r1, r0]
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	448e      	add	lr, r1
 8000148:	bc03      	pop	{r0, r1}
 800014a:	4770      	bx	lr

0800014c <__udivsi3>:
 800014c:	2200      	movs	r2, #0
 800014e:	0843      	lsrs	r3, r0, #1
 8000150:	428b      	cmp	r3, r1
 8000152:	d374      	bcc.n	800023e <__udivsi3+0xf2>
 8000154:	0903      	lsrs	r3, r0, #4
 8000156:	428b      	cmp	r3, r1
 8000158:	d35f      	bcc.n	800021a <__udivsi3+0xce>
 800015a:	0a03      	lsrs	r3, r0, #8
 800015c:	428b      	cmp	r3, r1
 800015e:	d344      	bcc.n	80001ea <__udivsi3+0x9e>
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d328      	bcc.n	80001b8 <__udivsi3+0x6c>
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d30d      	bcc.n	8000188 <__udivsi3+0x3c>
 800016c:	22ff      	movs	r2, #255	; 0xff
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	ba12      	rev	r2, r2
 8000172:	0c03      	lsrs	r3, r0, #16
 8000174:	428b      	cmp	r3, r1
 8000176:	d302      	bcc.n	800017e <__udivsi3+0x32>
 8000178:	1212      	asrs	r2, r2, #8
 800017a:	0209      	lsls	r1, r1, #8
 800017c:	d065      	beq.n	800024a <__udivsi3+0xfe>
 800017e:	0b03      	lsrs	r3, r0, #12
 8000180:	428b      	cmp	r3, r1
 8000182:	d319      	bcc.n	80001b8 <__udivsi3+0x6c>
 8000184:	e000      	b.n	8000188 <__udivsi3+0x3c>
 8000186:	0a09      	lsrs	r1, r1, #8
 8000188:	0bc3      	lsrs	r3, r0, #15
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x46>
 800018e:	03cb      	lsls	r3, r1, #15
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b83      	lsrs	r3, r0, #14
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x52>
 800019a:	038b      	lsls	r3, r1, #14
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b43      	lsrs	r3, r0, #13
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x5e>
 80001a6:	034b      	lsls	r3, r1, #13
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0b03      	lsrs	r3, r0, #12
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x6a>
 80001b2:	030b      	lsls	r3, r1, #12
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0ac3      	lsrs	r3, r0, #11
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x76>
 80001be:	02cb      	lsls	r3, r1, #11
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a83      	lsrs	r3, r0, #10
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x82>
 80001ca:	028b      	lsls	r3, r1, #10
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a43      	lsrs	r3, r0, #9
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x8e>
 80001d6:	024b      	lsls	r3, r1, #9
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	0a03      	lsrs	r3, r0, #8
 80001de:	428b      	cmp	r3, r1
 80001e0:	d301      	bcc.n	80001e6 <__udivsi3+0x9a>
 80001e2:	020b      	lsls	r3, r1, #8
 80001e4:	1ac0      	subs	r0, r0, r3
 80001e6:	4152      	adcs	r2, r2
 80001e8:	d2cd      	bcs.n	8000186 <__udivsi3+0x3a>
 80001ea:	09c3      	lsrs	r3, r0, #7
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xa8>
 80001f0:	01cb      	lsls	r3, r1, #7
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0983      	lsrs	r3, r0, #6
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xb4>
 80001fc:	018b      	lsls	r3, r1, #6
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0943      	lsrs	r3, r0, #5
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xc0>
 8000208:	014b      	lsls	r3, r1, #5
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0903      	lsrs	r3, r0, #4
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xcc>
 8000214:	010b      	lsls	r3, r1, #4
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	08c3      	lsrs	r3, r0, #3
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xd8>
 8000220:	00cb      	lsls	r3, r1, #3
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0883      	lsrs	r3, r0, #2
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xe4>
 800022c:	008b      	lsls	r3, r1, #2
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	0843      	lsrs	r3, r0, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d301      	bcc.n	800023c <__udivsi3+0xf0>
 8000238:	004b      	lsls	r3, r1, #1
 800023a:	1ac0      	subs	r0, r0, r3
 800023c:	4152      	adcs	r2, r2
 800023e:	1a41      	subs	r1, r0, r1
 8000240:	d200      	bcs.n	8000244 <__udivsi3+0xf8>
 8000242:	4601      	mov	r1, r0
 8000244:	4152      	adcs	r2, r2
 8000246:	4610      	mov	r0, r2
 8000248:	4770      	bx	lr
 800024a:	e7ff      	b.n	800024c <__udivsi3+0x100>
 800024c:	b501      	push	{r0, lr}
 800024e:	2000      	movs	r0, #0
 8000250:	f000 f8f0 	bl	8000434 <__aeabi_idiv0>
 8000254:	bd02      	pop	{r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_uidivmod>:
 8000258:	2900      	cmp	r1, #0
 800025a:	d0f7      	beq.n	800024c <__udivsi3+0x100>
 800025c:	e776      	b.n	800014c <__udivsi3>
 800025e:	4770      	bx	lr

08000260 <__divsi3>:
 8000260:	4603      	mov	r3, r0
 8000262:	430b      	orrs	r3, r1
 8000264:	d47f      	bmi.n	8000366 <__divsi3+0x106>
 8000266:	2200      	movs	r2, #0
 8000268:	0843      	lsrs	r3, r0, #1
 800026a:	428b      	cmp	r3, r1
 800026c:	d374      	bcc.n	8000358 <__divsi3+0xf8>
 800026e:	0903      	lsrs	r3, r0, #4
 8000270:	428b      	cmp	r3, r1
 8000272:	d35f      	bcc.n	8000334 <__divsi3+0xd4>
 8000274:	0a03      	lsrs	r3, r0, #8
 8000276:	428b      	cmp	r3, r1
 8000278:	d344      	bcc.n	8000304 <__divsi3+0xa4>
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d328      	bcc.n	80002d2 <__divsi3+0x72>
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d30d      	bcc.n	80002a2 <__divsi3+0x42>
 8000286:	22ff      	movs	r2, #255	; 0xff
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	ba12      	rev	r2, r2
 800028c:	0c03      	lsrs	r3, r0, #16
 800028e:	428b      	cmp	r3, r1
 8000290:	d302      	bcc.n	8000298 <__divsi3+0x38>
 8000292:	1212      	asrs	r2, r2, #8
 8000294:	0209      	lsls	r1, r1, #8
 8000296:	d065      	beq.n	8000364 <__divsi3+0x104>
 8000298:	0b03      	lsrs	r3, r0, #12
 800029a:	428b      	cmp	r3, r1
 800029c:	d319      	bcc.n	80002d2 <__divsi3+0x72>
 800029e:	e000      	b.n	80002a2 <__divsi3+0x42>
 80002a0:	0a09      	lsrs	r1, r1, #8
 80002a2:	0bc3      	lsrs	r3, r0, #15
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x4c>
 80002a8:	03cb      	lsls	r3, r1, #15
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b83      	lsrs	r3, r0, #14
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x58>
 80002b4:	038b      	lsls	r3, r1, #14
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b43      	lsrs	r3, r0, #13
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x64>
 80002c0:	034b      	lsls	r3, r1, #13
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0b03      	lsrs	r3, r0, #12
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x70>
 80002cc:	030b      	lsls	r3, r1, #12
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0ac3      	lsrs	r3, r0, #11
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x7c>
 80002d8:	02cb      	lsls	r3, r1, #11
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a83      	lsrs	r3, r0, #10
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x88>
 80002e4:	028b      	lsls	r3, r1, #10
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a43      	lsrs	r3, r0, #9
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0x94>
 80002f0:	024b      	lsls	r3, r1, #9
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	0a03      	lsrs	r3, r0, #8
 80002f8:	428b      	cmp	r3, r1
 80002fa:	d301      	bcc.n	8000300 <__divsi3+0xa0>
 80002fc:	020b      	lsls	r3, r1, #8
 80002fe:	1ac0      	subs	r0, r0, r3
 8000300:	4152      	adcs	r2, r2
 8000302:	d2cd      	bcs.n	80002a0 <__divsi3+0x40>
 8000304:	09c3      	lsrs	r3, r0, #7
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xae>
 800030a:	01cb      	lsls	r3, r1, #7
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0983      	lsrs	r3, r0, #6
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xba>
 8000316:	018b      	lsls	r3, r1, #6
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0943      	lsrs	r3, r0, #5
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xc6>
 8000322:	014b      	lsls	r3, r1, #5
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0903      	lsrs	r3, r0, #4
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xd2>
 800032e:	010b      	lsls	r3, r1, #4
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	08c3      	lsrs	r3, r0, #3
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xde>
 800033a:	00cb      	lsls	r3, r1, #3
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0883      	lsrs	r3, r0, #2
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xea>
 8000346:	008b      	lsls	r3, r1, #2
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	0843      	lsrs	r3, r0, #1
 800034e:	428b      	cmp	r3, r1
 8000350:	d301      	bcc.n	8000356 <__divsi3+0xf6>
 8000352:	004b      	lsls	r3, r1, #1
 8000354:	1ac0      	subs	r0, r0, r3
 8000356:	4152      	adcs	r2, r2
 8000358:	1a41      	subs	r1, r0, r1
 800035a:	d200      	bcs.n	800035e <__divsi3+0xfe>
 800035c:	4601      	mov	r1, r0
 800035e:	4152      	adcs	r2, r2
 8000360:	4610      	mov	r0, r2
 8000362:	4770      	bx	lr
 8000364:	e05d      	b.n	8000422 <__divsi3+0x1c2>
 8000366:	0fca      	lsrs	r2, r1, #31
 8000368:	d000      	beq.n	800036c <__divsi3+0x10c>
 800036a:	4249      	negs	r1, r1
 800036c:	1003      	asrs	r3, r0, #32
 800036e:	d300      	bcc.n	8000372 <__divsi3+0x112>
 8000370:	4240      	negs	r0, r0
 8000372:	4053      	eors	r3, r2
 8000374:	2200      	movs	r2, #0
 8000376:	469c      	mov	ip, r3
 8000378:	0903      	lsrs	r3, r0, #4
 800037a:	428b      	cmp	r3, r1
 800037c:	d32d      	bcc.n	80003da <__divsi3+0x17a>
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d312      	bcc.n	80003aa <__divsi3+0x14a>
 8000384:	22fc      	movs	r2, #252	; 0xfc
 8000386:	0189      	lsls	r1, r1, #6
 8000388:	ba12      	rev	r2, r2
 800038a:	0a03      	lsrs	r3, r0, #8
 800038c:	428b      	cmp	r3, r1
 800038e:	d30c      	bcc.n	80003aa <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	1192      	asrs	r2, r2, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d308      	bcc.n	80003aa <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d304      	bcc.n	80003aa <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	d03a      	beq.n	800041a <__divsi3+0x1ba>
 80003a4:	1192      	asrs	r2, r2, #6
 80003a6:	e000      	b.n	80003aa <__divsi3+0x14a>
 80003a8:	0989      	lsrs	r1, r1, #6
 80003aa:	09c3      	lsrs	r3, r0, #7
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x154>
 80003b0:	01cb      	lsls	r3, r1, #7
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0983      	lsrs	r3, r0, #6
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x160>
 80003bc:	018b      	lsls	r3, r1, #6
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0943      	lsrs	r3, r0, #5
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x16c>
 80003c8:	014b      	lsls	r3, r1, #5
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	0903      	lsrs	r3, r0, #4
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x178>
 80003d4:	010b      	lsls	r3, r1, #4
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	08c3      	lsrs	r3, r0, #3
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x184>
 80003e0:	00cb      	lsls	r3, r1, #3
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	0883      	lsrs	r3, r0, #2
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x190>
 80003ec:	008b      	lsls	r3, r1, #2
 80003ee:	1ac0      	subs	r0, r0, r3
 80003f0:	4152      	adcs	r2, r2
 80003f2:	d2d9      	bcs.n	80003a8 <__divsi3+0x148>
 80003f4:	0843      	lsrs	r3, r0, #1
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d301      	bcc.n	80003fe <__divsi3+0x19e>
 80003fa:	004b      	lsls	r3, r1, #1
 80003fc:	1ac0      	subs	r0, r0, r3
 80003fe:	4152      	adcs	r2, r2
 8000400:	1a41      	subs	r1, r0, r1
 8000402:	d200      	bcs.n	8000406 <__divsi3+0x1a6>
 8000404:	4601      	mov	r1, r0
 8000406:	4663      	mov	r3, ip
 8000408:	4152      	adcs	r2, r2
 800040a:	105b      	asrs	r3, r3, #1
 800040c:	4610      	mov	r0, r2
 800040e:	d301      	bcc.n	8000414 <__divsi3+0x1b4>
 8000410:	4240      	negs	r0, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d500      	bpl.n	8000418 <__divsi3+0x1b8>
 8000416:	4249      	negs	r1, r1
 8000418:	4770      	bx	lr
 800041a:	4663      	mov	r3, ip
 800041c:	105b      	asrs	r3, r3, #1
 800041e:	d300      	bcc.n	8000422 <__divsi3+0x1c2>
 8000420:	4240      	negs	r0, r0
 8000422:	b501      	push	{r0, lr}
 8000424:	2000      	movs	r0, #0
 8000426:	f000 f805 	bl	8000434 <__aeabi_idiv0>
 800042a:	bd02      	pop	{r1, pc}

0800042c <__aeabi_idivmod>:
 800042c:	2900      	cmp	r1, #0
 800042e:	d0f8      	beq.n	8000422 <__divsi3+0x1c2>
 8000430:	e716      	b.n	8000260 <__divsi3>
 8000432:	4770      	bx	lr

08000434 <__aeabi_idiv0>:
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdrcmple>:
 8000438:	4684      	mov	ip, r0
 800043a:	0010      	movs	r0, r2
 800043c:	4662      	mov	r2, ip
 800043e:	468c      	mov	ip, r1
 8000440:	0019      	movs	r1, r3
 8000442:	4663      	mov	r3, ip
 8000444:	e000      	b.n	8000448 <__aeabi_cdcmpeq>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_cdcmpeq>:
 8000448:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044a:	f001 fe8d 	bl	8002168 <__ledf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	d401      	bmi.n	8000456 <__aeabi_cdcmpeq+0xe>
 8000452:	2100      	movs	r1, #0
 8000454:	42c8      	cmn	r0, r1
 8000456:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000458 <__aeabi_dcmpeq>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fddd 	bl	8002018 <__eqdf2>
 800045e:	4240      	negs	r0, r0
 8000460:	3001      	adds	r0, #1
 8000462:	bd10      	pop	{r4, pc}

08000464 <__aeabi_dcmplt>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f001 fe7f 	bl	8002168 <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	db01      	blt.n	8000472 <__aeabi_dcmplt+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__aeabi_dcmple>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f001 fe75 	bl	8002168 <__ledf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dd01      	ble.n	8000486 <__aeabi_dcmple+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			; (mov r8, r8)

0800048c <__aeabi_dcmpgt>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f001 fe05 	bl	800209c <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	dc01      	bgt.n	800049a <__aeabi_dcmpgt+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			; (mov r8, r8)

080004a0 <__aeabi_dcmpge>:
 80004a0:	b510      	push	{r4, lr}
 80004a2:	f001 fdfb 	bl	800209c <__gedf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	da01      	bge.n	80004ae <__aeabi_dcmpge+0xe>
 80004aa:	2000      	movs	r0, #0
 80004ac:	bd10      	pop	{r4, pc}
 80004ae:	2001      	movs	r0, #1
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	46c0      	nop			; (mov r8, r8)

080004b4 <__aeabi_cfrcmple>:
 80004b4:	4684      	mov	ip, r0
 80004b6:	0008      	movs	r0, r1
 80004b8:	4661      	mov	r1, ip
 80004ba:	e7ff      	b.n	80004bc <__aeabi_cfcmpeq>

080004bc <__aeabi_cfcmpeq>:
 80004bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004be:	f000 fbdd 	bl	8000c7c <__lesf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	d401      	bmi.n	80004ca <__aeabi_cfcmpeq+0xe>
 80004c6:	2100      	movs	r1, #0
 80004c8:	42c8      	cmn	r0, r1
 80004ca:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004cc <__aeabi_fcmpeq>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fb69 	bl	8000ba4 <__eqsf2>
 80004d2:	4240      	negs	r0, r0
 80004d4:	3001      	adds	r0, #1
 80004d6:	bd10      	pop	{r4, pc}

080004d8 <__aeabi_fcmplt>:
 80004d8:	b510      	push	{r4, lr}
 80004da:	f000 fbcf 	bl	8000c7c <__lesf2>
 80004de:	2800      	cmp	r0, #0
 80004e0:	db01      	blt.n	80004e6 <__aeabi_fcmplt+0xe>
 80004e2:	2000      	movs	r0, #0
 80004e4:	bd10      	pop	{r4, pc}
 80004e6:	2001      	movs	r0, #1
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	46c0      	nop			; (mov r8, r8)

080004ec <__aeabi_fcmple>:
 80004ec:	b510      	push	{r4, lr}
 80004ee:	f000 fbc5 	bl	8000c7c <__lesf2>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	dd01      	ble.n	80004fa <__aeabi_fcmple+0xe>
 80004f6:	2000      	movs	r0, #0
 80004f8:	bd10      	pop	{r4, pc}
 80004fa:	2001      	movs	r0, #1
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	46c0      	nop			; (mov r8, r8)

08000500 <__aeabi_fcmpgt>:
 8000500:	b510      	push	{r4, lr}
 8000502:	f000 fb75 	bl	8000bf0 <__gesf2>
 8000506:	2800      	cmp	r0, #0
 8000508:	dc01      	bgt.n	800050e <__aeabi_fcmpgt+0xe>
 800050a:	2000      	movs	r0, #0
 800050c:	bd10      	pop	{r4, pc}
 800050e:	2001      	movs	r0, #1
 8000510:	bd10      	pop	{r4, pc}
 8000512:	46c0      	nop			; (mov r8, r8)

08000514 <__aeabi_fcmpge>:
 8000514:	b510      	push	{r4, lr}
 8000516:	f000 fb6b 	bl	8000bf0 <__gesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	da01      	bge.n	8000522 <__aeabi_fcmpge+0xe>
 800051e:	2000      	movs	r0, #0
 8000520:	bd10      	pop	{r4, pc}
 8000522:	2001      	movs	r0, #1
 8000524:	bd10      	pop	{r4, pc}
 8000526:	46c0      	nop			; (mov r8, r8)

08000528 <__aeabi_f2uiz>:
 8000528:	219e      	movs	r1, #158	; 0x9e
 800052a:	b510      	push	{r4, lr}
 800052c:	05c9      	lsls	r1, r1, #23
 800052e:	1c04      	adds	r4, r0, #0
 8000530:	f7ff fff0 	bl	8000514 <__aeabi_fcmpge>
 8000534:	2800      	cmp	r0, #0
 8000536:	d103      	bne.n	8000540 <__aeabi_f2uiz+0x18>
 8000538:	1c20      	adds	r0, r4, #0
 800053a:	f000 fecd 	bl	80012d8 <__aeabi_f2iz>
 800053e:	bd10      	pop	{r4, pc}
 8000540:	219e      	movs	r1, #158	; 0x9e
 8000542:	1c20      	adds	r0, r4, #0
 8000544:	05c9      	lsls	r1, r1, #23
 8000546:	f000 fd03 	bl	8000f50 <__aeabi_fsub>
 800054a:	f000 fec5 	bl	80012d8 <__aeabi_f2iz>
 800054e:	2380      	movs	r3, #128	; 0x80
 8000550:	061b      	lsls	r3, r3, #24
 8000552:	469c      	mov	ip, r3
 8000554:	4460      	add	r0, ip
 8000556:	e7f2      	b.n	800053e <__aeabi_f2uiz+0x16>

08000558 <__aeabi_d2uiz>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	2200      	movs	r2, #0
 800055c:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <__aeabi_d2uiz+0x38>)
 800055e:	0004      	movs	r4, r0
 8000560:	000d      	movs	r5, r1
 8000562:	f7ff ff9d 	bl	80004a0 <__aeabi_dcmpge>
 8000566:	2800      	cmp	r0, #0
 8000568:	d104      	bne.n	8000574 <__aeabi_d2uiz+0x1c>
 800056a:	0020      	movs	r0, r4
 800056c:	0029      	movs	r1, r5
 800056e:	f002 fc7b 	bl	8002e68 <__aeabi_d2iz>
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <__aeabi_d2uiz+0x38>)
 8000576:	2200      	movs	r2, #0
 8000578:	0020      	movs	r0, r4
 800057a:	0029      	movs	r1, r5
 800057c:	f002 f8c4 	bl	8002708 <__aeabi_dsub>
 8000580:	f002 fc72 	bl	8002e68 <__aeabi_d2iz>
 8000584:	2380      	movs	r3, #128	; 0x80
 8000586:	061b      	lsls	r3, r3, #24
 8000588:	469c      	mov	ip, r3
 800058a:	4460      	add	r0, ip
 800058c:	e7f1      	b.n	8000572 <__aeabi_d2uiz+0x1a>
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	41e00000 	.word	0x41e00000

08000594 <__aeabi_d2lz>:
 8000594:	b570      	push	{r4, r5, r6, lr}
 8000596:	0005      	movs	r5, r0
 8000598:	000c      	movs	r4, r1
 800059a:	2200      	movs	r2, #0
 800059c:	2300      	movs	r3, #0
 800059e:	0028      	movs	r0, r5
 80005a0:	0021      	movs	r1, r4
 80005a2:	f7ff ff5f 	bl	8000464 <__aeabi_dcmplt>
 80005a6:	2800      	cmp	r0, #0
 80005a8:	d108      	bne.n	80005bc <__aeabi_d2lz+0x28>
 80005aa:	0028      	movs	r0, r5
 80005ac:	0021      	movs	r1, r4
 80005ae:	f000 f80f 	bl	80005d0 <__aeabi_d2ulz>
 80005b2:	0002      	movs	r2, r0
 80005b4:	000b      	movs	r3, r1
 80005b6:	0010      	movs	r0, r2
 80005b8:	0019      	movs	r1, r3
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	2380      	movs	r3, #128	; 0x80
 80005be:	061b      	lsls	r3, r3, #24
 80005c0:	18e1      	adds	r1, r4, r3
 80005c2:	0028      	movs	r0, r5
 80005c4:	f000 f804 	bl	80005d0 <__aeabi_d2ulz>
 80005c8:	2300      	movs	r3, #0
 80005ca:	4242      	negs	r2, r0
 80005cc:	418b      	sbcs	r3, r1
 80005ce:	e7f2      	b.n	80005b6 <__aeabi_d2lz+0x22>

080005d0 <__aeabi_d2ulz>:
 80005d0:	b570      	push	{r4, r5, r6, lr}
 80005d2:	2200      	movs	r2, #0
 80005d4:	4b0b      	ldr	r3, [pc, #44]	; (8000604 <__aeabi_d2ulz+0x34>)
 80005d6:	000d      	movs	r5, r1
 80005d8:	0004      	movs	r4, r0
 80005da:	f001 fe29 	bl	8002230 <__aeabi_dmul>
 80005de:	f7ff ffbb 	bl	8000558 <__aeabi_d2uiz>
 80005e2:	0006      	movs	r6, r0
 80005e4:	f002 fca6 	bl	8002f34 <__aeabi_ui2d>
 80005e8:	2200      	movs	r2, #0
 80005ea:	4b07      	ldr	r3, [pc, #28]	; (8000608 <__aeabi_d2ulz+0x38>)
 80005ec:	f001 fe20 	bl	8002230 <__aeabi_dmul>
 80005f0:	0002      	movs	r2, r0
 80005f2:	000b      	movs	r3, r1
 80005f4:	0020      	movs	r0, r4
 80005f6:	0029      	movs	r1, r5
 80005f8:	f002 f886 	bl	8002708 <__aeabi_dsub>
 80005fc:	f7ff ffac 	bl	8000558 <__aeabi_d2uiz>
 8000600:	0031      	movs	r1, r6
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	3df00000 	.word	0x3df00000
 8000608:	41f00000 	.word	0x41f00000

0800060c <__aeabi_l2d>:
 800060c:	b570      	push	{r4, r5, r6, lr}
 800060e:	0006      	movs	r6, r0
 8000610:	0008      	movs	r0, r1
 8000612:	f002 fc5f 	bl	8002ed4 <__aeabi_i2d>
 8000616:	2200      	movs	r2, #0
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <__aeabi_l2d+0x28>)
 800061a:	f001 fe09 	bl	8002230 <__aeabi_dmul>
 800061e:	000d      	movs	r5, r1
 8000620:	0004      	movs	r4, r0
 8000622:	0030      	movs	r0, r6
 8000624:	f002 fc86 	bl	8002f34 <__aeabi_ui2d>
 8000628:	002b      	movs	r3, r5
 800062a:	0022      	movs	r2, r4
 800062c:	f000 fec2 	bl	80013b4 <__aeabi_dadd>
 8000630:	bd70      	pop	{r4, r5, r6, pc}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	41f00000 	.word	0x41f00000

08000638 <__aeabi_fadd>:
 8000638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800063a:	46c6      	mov	lr, r8
 800063c:	0243      	lsls	r3, r0, #9
 800063e:	0a5b      	lsrs	r3, r3, #9
 8000640:	024e      	lsls	r6, r1, #9
 8000642:	0045      	lsls	r5, r0, #1
 8000644:	004f      	lsls	r7, r1, #1
 8000646:	00da      	lsls	r2, r3, #3
 8000648:	0fc4      	lsrs	r4, r0, #31
 800064a:	469c      	mov	ip, r3
 800064c:	0a70      	lsrs	r0, r6, #9
 800064e:	4690      	mov	r8, r2
 8000650:	b500      	push	{lr}
 8000652:	0e2d      	lsrs	r5, r5, #24
 8000654:	0e3f      	lsrs	r7, r7, #24
 8000656:	0fc9      	lsrs	r1, r1, #31
 8000658:	09b6      	lsrs	r6, r6, #6
 800065a:	428c      	cmp	r4, r1
 800065c:	d04b      	beq.n	80006f6 <__aeabi_fadd+0xbe>
 800065e:	1bea      	subs	r2, r5, r7
 8000660:	2a00      	cmp	r2, #0
 8000662:	dd36      	ble.n	80006d2 <__aeabi_fadd+0x9a>
 8000664:	2f00      	cmp	r7, #0
 8000666:	d061      	beq.n	800072c <__aeabi_fadd+0xf4>
 8000668:	2dff      	cmp	r5, #255	; 0xff
 800066a:	d100      	bne.n	800066e <__aeabi_fadd+0x36>
 800066c:	e0ad      	b.n	80007ca <__aeabi_fadd+0x192>
 800066e:	2380      	movs	r3, #128	; 0x80
 8000670:	04db      	lsls	r3, r3, #19
 8000672:	431e      	orrs	r6, r3
 8000674:	2a1b      	cmp	r2, #27
 8000676:	dc00      	bgt.n	800067a <__aeabi_fadd+0x42>
 8000678:	e0d3      	b.n	8000822 <__aeabi_fadd+0x1ea>
 800067a:	2001      	movs	r0, #1
 800067c:	4643      	mov	r3, r8
 800067e:	1a18      	subs	r0, r3, r0
 8000680:	0143      	lsls	r3, r0, #5
 8000682:	d400      	bmi.n	8000686 <__aeabi_fadd+0x4e>
 8000684:	e08c      	b.n	80007a0 <__aeabi_fadd+0x168>
 8000686:	0180      	lsls	r0, r0, #6
 8000688:	0987      	lsrs	r7, r0, #6
 800068a:	0038      	movs	r0, r7
 800068c:	f002 fd48 	bl	8003120 <__clzsi2>
 8000690:	3805      	subs	r0, #5
 8000692:	4087      	lsls	r7, r0
 8000694:	4285      	cmp	r5, r0
 8000696:	dc00      	bgt.n	800069a <__aeabi_fadd+0x62>
 8000698:	e0b6      	b.n	8000808 <__aeabi_fadd+0x1d0>
 800069a:	1a2d      	subs	r5, r5, r0
 800069c:	48b3      	ldr	r0, [pc, #716]	; (800096c <__aeabi_fadd+0x334>)
 800069e:	4038      	ands	r0, r7
 80006a0:	0743      	lsls	r3, r0, #29
 80006a2:	d004      	beq.n	80006ae <__aeabi_fadd+0x76>
 80006a4:	230f      	movs	r3, #15
 80006a6:	4003      	ands	r3, r0
 80006a8:	2b04      	cmp	r3, #4
 80006aa:	d000      	beq.n	80006ae <__aeabi_fadd+0x76>
 80006ac:	3004      	adds	r0, #4
 80006ae:	0143      	lsls	r3, r0, #5
 80006b0:	d400      	bmi.n	80006b4 <__aeabi_fadd+0x7c>
 80006b2:	e078      	b.n	80007a6 <__aeabi_fadd+0x16e>
 80006b4:	1c6a      	adds	r2, r5, #1
 80006b6:	2dfe      	cmp	r5, #254	; 0xfe
 80006b8:	d065      	beq.n	8000786 <__aeabi_fadd+0x14e>
 80006ba:	0180      	lsls	r0, r0, #6
 80006bc:	0a43      	lsrs	r3, r0, #9
 80006be:	469c      	mov	ip, r3
 80006c0:	b2d2      	uxtb	r2, r2
 80006c2:	4663      	mov	r3, ip
 80006c4:	05d0      	lsls	r0, r2, #23
 80006c6:	4318      	orrs	r0, r3
 80006c8:	07e4      	lsls	r4, r4, #31
 80006ca:	4320      	orrs	r0, r4
 80006cc:	bc80      	pop	{r7}
 80006ce:	46b8      	mov	r8, r7
 80006d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006d2:	2a00      	cmp	r2, #0
 80006d4:	d035      	beq.n	8000742 <__aeabi_fadd+0x10a>
 80006d6:	1b7a      	subs	r2, r7, r5
 80006d8:	2d00      	cmp	r5, #0
 80006da:	d000      	beq.n	80006de <__aeabi_fadd+0xa6>
 80006dc:	e0af      	b.n	800083e <__aeabi_fadd+0x206>
 80006de:	4643      	mov	r3, r8
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d100      	bne.n	80006e6 <__aeabi_fadd+0xae>
 80006e4:	e0a7      	b.n	8000836 <__aeabi_fadd+0x1fe>
 80006e6:	1e53      	subs	r3, r2, #1
 80006e8:	2a01      	cmp	r2, #1
 80006ea:	d100      	bne.n	80006ee <__aeabi_fadd+0xb6>
 80006ec:	e12f      	b.n	800094e <__aeabi_fadd+0x316>
 80006ee:	2aff      	cmp	r2, #255	; 0xff
 80006f0:	d069      	beq.n	80007c6 <__aeabi_fadd+0x18e>
 80006f2:	001a      	movs	r2, r3
 80006f4:	e0aa      	b.n	800084c <__aeabi_fadd+0x214>
 80006f6:	1be9      	subs	r1, r5, r7
 80006f8:	2900      	cmp	r1, #0
 80006fa:	dd70      	ble.n	80007de <__aeabi_fadd+0x1a6>
 80006fc:	2f00      	cmp	r7, #0
 80006fe:	d037      	beq.n	8000770 <__aeabi_fadd+0x138>
 8000700:	2dff      	cmp	r5, #255	; 0xff
 8000702:	d062      	beq.n	80007ca <__aeabi_fadd+0x192>
 8000704:	2380      	movs	r3, #128	; 0x80
 8000706:	04db      	lsls	r3, r3, #19
 8000708:	431e      	orrs	r6, r3
 800070a:	291b      	cmp	r1, #27
 800070c:	dc00      	bgt.n	8000710 <__aeabi_fadd+0xd8>
 800070e:	e0b0      	b.n	8000872 <__aeabi_fadd+0x23a>
 8000710:	2001      	movs	r0, #1
 8000712:	4440      	add	r0, r8
 8000714:	0143      	lsls	r3, r0, #5
 8000716:	d543      	bpl.n	80007a0 <__aeabi_fadd+0x168>
 8000718:	3501      	adds	r5, #1
 800071a:	2dff      	cmp	r5, #255	; 0xff
 800071c:	d033      	beq.n	8000786 <__aeabi_fadd+0x14e>
 800071e:	2301      	movs	r3, #1
 8000720:	4a93      	ldr	r2, [pc, #588]	; (8000970 <__aeabi_fadd+0x338>)
 8000722:	4003      	ands	r3, r0
 8000724:	0840      	lsrs	r0, r0, #1
 8000726:	4010      	ands	r0, r2
 8000728:	4318      	orrs	r0, r3
 800072a:	e7b9      	b.n	80006a0 <__aeabi_fadd+0x68>
 800072c:	2e00      	cmp	r6, #0
 800072e:	d100      	bne.n	8000732 <__aeabi_fadd+0xfa>
 8000730:	e083      	b.n	800083a <__aeabi_fadd+0x202>
 8000732:	1e51      	subs	r1, r2, #1
 8000734:	2a01      	cmp	r2, #1
 8000736:	d100      	bne.n	800073a <__aeabi_fadd+0x102>
 8000738:	e0d8      	b.n	80008ec <__aeabi_fadd+0x2b4>
 800073a:	2aff      	cmp	r2, #255	; 0xff
 800073c:	d045      	beq.n	80007ca <__aeabi_fadd+0x192>
 800073e:	000a      	movs	r2, r1
 8000740:	e798      	b.n	8000674 <__aeabi_fadd+0x3c>
 8000742:	27fe      	movs	r7, #254	; 0xfe
 8000744:	1c6a      	adds	r2, r5, #1
 8000746:	4217      	tst	r7, r2
 8000748:	d000      	beq.n	800074c <__aeabi_fadd+0x114>
 800074a:	e086      	b.n	800085a <__aeabi_fadd+0x222>
 800074c:	2d00      	cmp	r5, #0
 800074e:	d000      	beq.n	8000752 <__aeabi_fadd+0x11a>
 8000750:	e0b7      	b.n	80008c2 <__aeabi_fadd+0x28a>
 8000752:	4643      	mov	r3, r8
 8000754:	2b00      	cmp	r3, #0
 8000756:	d100      	bne.n	800075a <__aeabi_fadd+0x122>
 8000758:	e0f3      	b.n	8000942 <__aeabi_fadd+0x30a>
 800075a:	2200      	movs	r2, #0
 800075c:	2e00      	cmp	r6, #0
 800075e:	d0b0      	beq.n	80006c2 <__aeabi_fadd+0x8a>
 8000760:	1b98      	subs	r0, r3, r6
 8000762:	0143      	lsls	r3, r0, #5
 8000764:	d400      	bmi.n	8000768 <__aeabi_fadd+0x130>
 8000766:	e0fa      	b.n	800095e <__aeabi_fadd+0x326>
 8000768:	4643      	mov	r3, r8
 800076a:	000c      	movs	r4, r1
 800076c:	1af0      	subs	r0, r6, r3
 800076e:	e797      	b.n	80006a0 <__aeabi_fadd+0x68>
 8000770:	2e00      	cmp	r6, #0
 8000772:	d100      	bne.n	8000776 <__aeabi_fadd+0x13e>
 8000774:	e0c8      	b.n	8000908 <__aeabi_fadd+0x2d0>
 8000776:	1e4a      	subs	r2, r1, #1
 8000778:	2901      	cmp	r1, #1
 800077a:	d100      	bne.n	800077e <__aeabi_fadd+0x146>
 800077c:	e0ae      	b.n	80008dc <__aeabi_fadd+0x2a4>
 800077e:	29ff      	cmp	r1, #255	; 0xff
 8000780:	d023      	beq.n	80007ca <__aeabi_fadd+0x192>
 8000782:	0011      	movs	r1, r2
 8000784:	e7c1      	b.n	800070a <__aeabi_fadd+0xd2>
 8000786:	2300      	movs	r3, #0
 8000788:	22ff      	movs	r2, #255	; 0xff
 800078a:	469c      	mov	ip, r3
 800078c:	e799      	b.n	80006c2 <__aeabi_fadd+0x8a>
 800078e:	21fe      	movs	r1, #254	; 0xfe
 8000790:	1c6a      	adds	r2, r5, #1
 8000792:	4211      	tst	r1, r2
 8000794:	d077      	beq.n	8000886 <__aeabi_fadd+0x24e>
 8000796:	2aff      	cmp	r2, #255	; 0xff
 8000798:	d0f5      	beq.n	8000786 <__aeabi_fadd+0x14e>
 800079a:	0015      	movs	r5, r2
 800079c:	4446      	add	r6, r8
 800079e:	0870      	lsrs	r0, r6, #1
 80007a0:	0743      	lsls	r3, r0, #29
 80007a2:	d000      	beq.n	80007a6 <__aeabi_fadd+0x16e>
 80007a4:	e77e      	b.n	80006a4 <__aeabi_fadd+0x6c>
 80007a6:	08c3      	lsrs	r3, r0, #3
 80007a8:	2dff      	cmp	r5, #255	; 0xff
 80007aa:	d00e      	beq.n	80007ca <__aeabi_fadd+0x192>
 80007ac:	025b      	lsls	r3, r3, #9
 80007ae:	0a5b      	lsrs	r3, r3, #9
 80007b0:	469c      	mov	ip, r3
 80007b2:	b2ea      	uxtb	r2, r5
 80007b4:	e785      	b.n	80006c2 <__aeabi_fadd+0x8a>
 80007b6:	2e00      	cmp	r6, #0
 80007b8:	d007      	beq.n	80007ca <__aeabi_fadd+0x192>
 80007ba:	2280      	movs	r2, #128	; 0x80
 80007bc:	03d2      	lsls	r2, r2, #15
 80007be:	4213      	tst	r3, r2
 80007c0:	d003      	beq.n	80007ca <__aeabi_fadd+0x192>
 80007c2:	4210      	tst	r0, r2
 80007c4:	d101      	bne.n	80007ca <__aeabi_fadd+0x192>
 80007c6:	000c      	movs	r4, r1
 80007c8:	0003      	movs	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d0db      	beq.n	8000786 <__aeabi_fadd+0x14e>
 80007ce:	2080      	movs	r0, #128	; 0x80
 80007d0:	03c0      	lsls	r0, r0, #15
 80007d2:	4318      	orrs	r0, r3
 80007d4:	0240      	lsls	r0, r0, #9
 80007d6:	0a43      	lsrs	r3, r0, #9
 80007d8:	469c      	mov	ip, r3
 80007da:	22ff      	movs	r2, #255	; 0xff
 80007dc:	e771      	b.n	80006c2 <__aeabi_fadd+0x8a>
 80007de:	2900      	cmp	r1, #0
 80007e0:	d0d5      	beq.n	800078e <__aeabi_fadd+0x156>
 80007e2:	1b7a      	subs	r2, r7, r5
 80007e4:	2d00      	cmp	r5, #0
 80007e6:	d160      	bne.n	80008aa <__aeabi_fadd+0x272>
 80007e8:	4643      	mov	r3, r8
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d024      	beq.n	8000838 <__aeabi_fadd+0x200>
 80007ee:	1e53      	subs	r3, r2, #1
 80007f0:	2a01      	cmp	r2, #1
 80007f2:	d073      	beq.n	80008dc <__aeabi_fadd+0x2a4>
 80007f4:	2aff      	cmp	r2, #255	; 0xff
 80007f6:	d0e7      	beq.n	80007c8 <__aeabi_fadd+0x190>
 80007f8:	001a      	movs	r2, r3
 80007fa:	2a1b      	cmp	r2, #27
 80007fc:	dc00      	bgt.n	8000800 <__aeabi_fadd+0x1c8>
 80007fe:	e085      	b.n	800090c <__aeabi_fadd+0x2d4>
 8000800:	2001      	movs	r0, #1
 8000802:	003d      	movs	r5, r7
 8000804:	1980      	adds	r0, r0, r6
 8000806:	e785      	b.n	8000714 <__aeabi_fadd+0xdc>
 8000808:	2320      	movs	r3, #32
 800080a:	003a      	movs	r2, r7
 800080c:	1b45      	subs	r5, r0, r5
 800080e:	0038      	movs	r0, r7
 8000810:	3501      	adds	r5, #1
 8000812:	40ea      	lsrs	r2, r5
 8000814:	1b5d      	subs	r5, r3, r5
 8000816:	40a8      	lsls	r0, r5
 8000818:	1e43      	subs	r3, r0, #1
 800081a:	4198      	sbcs	r0, r3
 800081c:	2500      	movs	r5, #0
 800081e:	4310      	orrs	r0, r2
 8000820:	e73e      	b.n	80006a0 <__aeabi_fadd+0x68>
 8000822:	2320      	movs	r3, #32
 8000824:	0030      	movs	r0, r6
 8000826:	1a9b      	subs	r3, r3, r2
 8000828:	0031      	movs	r1, r6
 800082a:	4098      	lsls	r0, r3
 800082c:	40d1      	lsrs	r1, r2
 800082e:	1e43      	subs	r3, r0, #1
 8000830:	4198      	sbcs	r0, r3
 8000832:	4308      	orrs	r0, r1
 8000834:	e722      	b.n	800067c <__aeabi_fadd+0x44>
 8000836:	000c      	movs	r4, r1
 8000838:	0003      	movs	r3, r0
 800083a:	0015      	movs	r5, r2
 800083c:	e7b4      	b.n	80007a8 <__aeabi_fadd+0x170>
 800083e:	2fff      	cmp	r7, #255	; 0xff
 8000840:	d0c1      	beq.n	80007c6 <__aeabi_fadd+0x18e>
 8000842:	2380      	movs	r3, #128	; 0x80
 8000844:	4640      	mov	r0, r8
 8000846:	04db      	lsls	r3, r3, #19
 8000848:	4318      	orrs	r0, r3
 800084a:	4680      	mov	r8, r0
 800084c:	2a1b      	cmp	r2, #27
 800084e:	dd51      	ble.n	80008f4 <__aeabi_fadd+0x2bc>
 8000850:	2001      	movs	r0, #1
 8000852:	000c      	movs	r4, r1
 8000854:	003d      	movs	r5, r7
 8000856:	1a30      	subs	r0, r6, r0
 8000858:	e712      	b.n	8000680 <__aeabi_fadd+0x48>
 800085a:	4643      	mov	r3, r8
 800085c:	1b9f      	subs	r7, r3, r6
 800085e:	017b      	lsls	r3, r7, #5
 8000860:	d42b      	bmi.n	80008ba <__aeabi_fadd+0x282>
 8000862:	2f00      	cmp	r7, #0
 8000864:	d000      	beq.n	8000868 <__aeabi_fadd+0x230>
 8000866:	e710      	b.n	800068a <__aeabi_fadd+0x52>
 8000868:	2300      	movs	r3, #0
 800086a:	2400      	movs	r4, #0
 800086c:	2200      	movs	r2, #0
 800086e:	469c      	mov	ip, r3
 8000870:	e727      	b.n	80006c2 <__aeabi_fadd+0x8a>
 8000872:	2320      	movs	r3, #32
 8000874:	0032      	movs	r2, r6
 8000876:	0030      	movs	r0, r6
 8000878:	40ca      	lsrs	r2, r1
 800087a:	1a59      	subs	r1, r3, r1
 800087c:	4088      	lsls	r0, r1
 800087e:	1e43      	subs	r3, r0, #1
 8000880:	4198      	sbcs	r0, r3
 8000882:	4310      	orrs	r0, r2
 8000884:	e745      	b.n	8000712 <__aeabi_fadd+0xda>
 8000886:	2d00      	cmp	r5, #0
 8000888:	d14a      	bne.n	8000920 <__aeabi_fadd+0x2e8>
 800088a:	4643      	mov	r3, r8
 800088c:	2b00      	cmp	r3, #0
 800088e:	d063      	beq.n	8000958 <__aeabi_fadd+0x320>
 8000890:	2200      	movs	r2, #0
 8000892:	2e00      	cmp	r6, #0
 8000894:	d100      	bne.n	8000898 <__aeabi_fadd+0x260>
 8000896:	e714      	b.n	80006c2 <__aeabi_fadd+0x8a>
 8000898:	0030      	movs	r0, r6
 800089a:	4440      	add	r0, r8
 800089c:	0143      	lsls	r3, r0, #5
 800089e:	d400      	bmi.n	80008a2 <__aeabi_fadd+0x26a>
 80008a0:	e77e      	b.n	80007a0 <__aeabi_fadd+0x168>
 80008a2:	4b32      	ldr	r3, [pc, #200]	; (800096c <__aeabi_fadd+0x334>)
 80008a4:	3501      	adds	r5, #1
 80008a6:	4018      	ands	r0, r3
 80008a8:	e77a      	b.n	80007a0 <__aeabi_fadd+0x168>
 80008aa:	2fff      	cmp	r7, #255	; 0xff
 80008ac:	d08c      	beq.n	80007c8 <__aeabi_fadd+0x190>
 80008ae:	2380      	movs	r3, #128	; 0x80
 80008b0:	4641      	mov	r1, r8
 80008b2:	04db      	lsls	r3, r3, #19
 80008b4:	4319      	orrs	r1, r3
 80008b6:	4688      	mov	r8, r1
 80008b8:	e79f      	b.n	80007fa <__aeabi_fadd+0x1c2>
 80008ba:	4643      	mov	r3, r8
 80008bc:	000c      	movs	r4, r1
 80008be:	1af7      	subs	r7, r6, r3
 80008c0:	e6e3      	b.n	800068a <__aeabi_fadd+0x52>
 80008c2:	4642      	mov	r2, r8
 80008c4:	2a00      	cmp	r2, #0
 80008c6:	d000      	beq.n	80008ca <__aeabi_fadd+0x292>
 80008c8:	e775      	b.n	80007b6 <__aeabi_fadd+0x17e>
 80008ca:	2e00      	cmp	r6, #0
 80008cc:	d000      	beq.n	80008d0 <__aeabi_fadd+0x298>
 80008ce:	e77a      	b.n	80007c6 <__aeabi_fadd+0x18e>
 80008d0:	2380      	movs	r3, #128	; 0x80
 80008d2:	03db      	lsls	r3, r3, #15
 80008d4:	2400      	movs	r4, #0
 80008d6:	469c      	mov	ip, r3
 80008d8:	22ff      	movs	r2, #255	; 0xff
 80008da:	e6f2      	b.n	80006c2 <__aeabi_fadd+0x8a>
 80008dc:	0030      	movs	r0, r6
 80008de:	4440      	add	r0, r8
 80008e0:	2501      	movs	r5, #1
 80008e2:	0143      	lsls	r3, r0, #5
 80008e4:	d400      	bmi.n	80008e8 <__aeabi_fadd+0x2b0>
 80008e6:	e75b      	b.n	80007a0 <__aeabi_fadd+0x168>
 80008e8:	2502      	movs	r5, #2
 80008ea:	e718      	b.n	800071e <__aeabi_fadd+0xe6>
 80008ec:	4643      	mov	r3, r8
 80008ee:	2501      	movs	r5, #1
 80008f0:	1b98      	subs	r0, r3, r6
 80008f2:	e6c5      	b.n	8000680 <__aeabi_fadd+0x48>
 80008f4:	2320      	movs	r3, #32
 80008f6:	4644      	mov	r4, r8
 80008f8:	4640      	mov	r0, r8
 80008fa:	40d4      	lsrs	r4, r2
 80008fc:	1a9a      	subs	r2, r3, r2
 80008fe:	4090      	lsls	r0, r2
 8000900:	1e43      	subs	r3, r0, #1
 8000902:	4198      	sbcs	r0, r3
 8000904:	4320      	orrs	r0, r4
 8000906:	e7a4      	b.n	8000852 <__aeabi_fadd+0x21a>
 8000908:	000d      	movs	r5, r1
 800090a:	e74d      	b.n	80007a8 <__aeabi_fadd+0x170>
 800090c:	2320      	movs	r3, #32
 800090e:	4641      	mov	r1, r8
 8000910:	4640      	mov	r0, r8
 8000912:	40d1      	lsrs	r1, r2
 8000914:	1a9a      	subs	r2, r3, r2
 8000916:	4090      	lsls	r0, r2
 8000918:	1e43      	subs	r3, r0, #1
 800091a:	4198      	sbcs	r0, r3
 800091c:	4308      	orrs	r0, r1
 800091e:	e770      	b.n	8000802 <__aeabi_fadd+0x1ca>
 8000920:	4642      	mov	r2, r8
 8000922:	2a00      	cmp	r2, #0
 8000924:	d100      	bne.n	8000928 <__aeabi_fadd+0x2f0>
 8000926:	e74f      	b.n	80007c8 <__aeabi_fadd+0x190>
 8000928:	2e00      	cmp	r6, #0
 800092a:	d100      	bne.n	800092e <__aeabi_fadd+0x2f6>
 800092c:	e74d      	b.n	80007ca <__aeabi_fadd+0x192>
 800092e:	2280      	movs	r2, #128	; 0x80
 8000930:	03d2      	lsls	r2, r2, #15
 8000932:	4213      	tst	r3, r2
 8000934:	d100      	bne.n	8000938 <__aeabi_fadd+0x300>
 8000936:	e748      	b.n	80007ca <__aeabi_fadd+0x192>
 8000938:	4210      	tst	r0, r2
 800093a:	d000      	beq.n	800093e <__aeabi_fadd+0x306>
 800093c:	e745      	b.n	80007ca <__aeabi_fadd+0x192>
 800093e:	0003      	movs	r3, r0
 8000940:	e743      	b.n	80007ca <__aeabi_fadd+0x192>
 8000942:	2e00      	cmp	r6, #0
 8000944:	d090      	beq.n	8000868 <__aeabi_fadd+0x230>
 8000946:	000c      	movs	r4, r1
 8000948:	4684      	mov	ip, r0
 800094a:	2200      	movs	r2, #0
 800094c:	e6b9      	b.n	80006c2 <__aeabi_fadd+0x8a>
 800094e:	4643      	mov	r3, r8
 8000950:	000c      	movs	r4, r1
 8000952:	1af0      	subs	r0, r6, r3
 8000954:	3501      	adds	r5, #1
 8000956:	e693      	b.n	8000680 <__aeabi_fadd+0x48>
 8000958:	4684      	mov	ip, r0
 800095a:	2200      	movs	r2, #0
 800095c:	e6b1      	b.n	80006c2 <__aeabi_fadd+0x8a>
 800095e:	2800      	cmp	r0, #0
 8000960:	d000      	beq.n	8000964 <__aeabi_fadd+0x32c>
 8000962:	e71d      	b.n	80007a0 <__aeabi_fadd+0x168>
 8000964:	2300      	movs	r3, #0
 8000966:	2400      	movs	r4, #0
 8000968:	469c      	mov	ip, r3
 800096a:	e6aa      	b.n	80006c2 <__aeabi_fadd+0x8a>
 800096c:	fbffffff 	.word	0xfbffffff
 8000970:	7dffffff 	.word	0x7dffffff

08000974 <__aeabi_fdiv>:
 8000974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000976:	464f      	mov	r7, r9
 8000978:	4646      	mov	r6, r8
 800097a:	46d6      	mov	lr, sl
 800097c:	0245      	lsls	r5, r0, #9
 800097e:	b5c0      	push	{r6, r7, lr}
 8000980:	0047      	lsls	r7, r0, #1
 8000982:	1c0c      	adds	r4, r1, #0
 8000984:	0a6d      	lsrs	r5, r5, #9
 8000986:	0e3f      	lsrs	r7, r7, #24
 8000988:	0fc6      	lsrs	r6, r0, #31
 800098a:	2f00      	cmp	r7, #0
 800098c:	d100      	bne.n	8000990 <__aeabi_fdiv+0x1c>
 800098e:	e070      	b.n	8000a72 <__aeabi_fdiv+0xfe>
 8000990:	2fff      	cmp	r7, #255	; 0xff
 8000992:	d100      	bne.n	8000996 <__aeabi_fdiv+0x22>
 8000994:	e075      	b.n	8000a82 <__aeabi_fdiv+0x10e>
 8000996:	00eb      	lsls	r3, r5, #3
 8000998:	2580      	movs	r5, #128	; 0x80
 800099a:	04ed      	lsls	r5, r5, #19
 800099c:	431d      	orrs	r5, r3
 800099e:	2300      	movs	r3, #0
 80009a0:	4699      	mov	r9, r3
 80009a2:	469a      	mov	sl, r3
 80009a4:	3f7f      	subs	r7, #127	; 0x7f
 80009a6:	0260      	lsls	r0, r4, #9
 80009a8:	0a43      	lsrs	r3, r0, #9
 80009aa:	4698      	mov	r8, r3
 80009ac:	0063      	lsls	r3, r4, #1
 80009ae:	0e1b      	lsrs	r3, r3, #24
 80009b0:	0fe4      	lsrs	r4, r4, #31
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d04e      	beq.n	8000a54 <__aeabi_fdiv+0xe0>
 80009b6:	2bff      	cmp	r3, #255	; 0xff
 80009b8:	d046      	beq.n	8000a48 <__aeabi_fdiv+0xd4>
 80009ba:	4642      	mov	r2, r8
 80009bc:	00d0      	lsls	r0, r2, #3
 80009be:	2280      	movs	r2, #128	; 0x80
 80009c0:	04d2      	lsls	r2, r2, #19
 80009c2:	4302      	orrs	r2, r0
 80009c4:	4690      	mov	r8, r2
 80009c6:	2200      	movs	r2, #0
 80009c8:	3b7f      	subs	r3, #127	; 0x7f
 80009ca:	0031      	movs	r1, r6
 80009cc:	1aff      	subs	r7, r7, r3
 80009ce:	464b      	mov	r3, r9
 80009d0:	4061      	eors	r1, r4
 80009d2:	b2c9      	uxtb	r1, r1
 80009d4:	4313      	orrs	r3, r2
 80009d6:	2b0f      	cmp	r3, #15
 80009d8:	d900      	bls.n	80009dc <__aeabi_fdiv+0x68>
 80009da:	e0b5      	b.n	8000b48 <__aeabi_fdiv+0x1d4>
 80009dc:	486e      	ldr	r0, [pc, #440]	; (8000b98 <__aeabi_fdiv+0x224>)
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	58c3      	ldr	r3, [r0, r3]
 80009e2:	469f      	mov	pc, r3
 80009e4:	2300      	movs	r3, #0
 80009e6:	4698      	mov	r8, r3
 80009e8:	0026      	movs	r6, r4
 80009ea:	4645      	mov	r5, r8
 80009ec:	4692      	mov	sl, r2
 80009ee:	4653      	mov	r3, sl
 80009f0:	2b02      	cmp	r3, #2
 80009f2:	d100      	bne.n	80009f6 <__aeabi_fdiv+0x82>
 80009f4:	e089      	b.n	8000b0a <__aeabi_fdiv+0x196>
 80009f6:	2b03      	cmp	r3, #3
 80009f8:	d100      	bne.n	80009fc <__aeabi_fdiv+0x88>
 80009fa:	e09e      	b.n	8000b3a <__aeabi_fdiv+0x1c6>
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d018      	beq.n	8000a32 <__aeabi_fdiv+0xbe>
 8000a00:	003b      	movs	r3, r7
 8000a02:	337f      	adds	r3, #127	; 0x7f
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	dd69      	ble.n	8000adc <__aeabi_fdiv+0x168>
 8000a08:	076a      	lsls	r2, r5, #29
 8000a0a:	d004      	beq.n	8000a16 <__aeabi_fdiv+0xa2>
 8000a0c:	220f      	movs	r2, #15
 8000a0e:	402a      	ands	r2, r5
 8000a10:	2a04      	cmp	r2, #4
 8000a12:	d000      	beq.n	8000a16 <__aeabi_fdiv+0xa2>
 8000a14:	3504      	adds	r5, #4
 8000a16:	012a      	lsls	r2, r5, #4
 8000a18:	d503      	bpl.n	8000a22 <__aeabi_fdiv+0xae>
 8000a1a:	4b60      	ldr	r3, [pc, #384]	; (8000b9c <__aeabi_fdiv+0x228>)
 8000a1c:	401d      	ands	r5, r3
 8000a1e:	003b      	movs	r3, r7
 8000a20:	3380      	adds	r3, #128	; 0x80
 8000a22:	2bfe      	cmp	r3, #254	; 0xfe
 8000a24:	dd00      	ble.n	8000a28 <__aeabi_fdiv+0xb4>
 8000a26:	e070      	b.n	8000b0a <__aeabi_fdiv+0x196>
 8000a28:	01ad      	lsls	r5, r5, #6
 8000a2a:	0a6d      	lsrs	r5, r5, #9
 8000a2c:	b2d8      	uxtb	r0, r3
 8000a2e:	e002      	b.n	8000a36 <__aeabi_fdiv+0xc2>
 8000a30:	000e      	movs	r6, r1
 8000a32:	2000      	movs	r0, #0
 8000a34:	2500      	movs	r5, #0
 8000a36:	05c0      	lsls	r0, r0, #23
 8000a38:	4328      	orrs	r0, r5
 8000a3a:	07f6      	lsls	r6, r6, #31
 8000a3c:	4330      	orrs	r0, r6
 8000a3e:	bce0      	pop	{r5, r6, r7}
 8000a40:	46ba      	mov	sl, r7
 8000a42:	46b1      	mov	r9, r6
 8000a44:	46a8      	mov	r8, r5
 8000a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a48:	4643      	mov	r3, r8
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d13f      	bne.n	8000ace <__aeabi_fdiv+0x15a>
 8000a4e:	2202      	movs	r2, #2
 8000a50:	3fff      	subs	r7, #255	; 0xff
 8000a52:	e003      	b.n	8000a5c <__aeabi_fdiv+0xe8>
 8000a54:	4643      	mov	r3, r8
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d12d      	bne.n	8000ab6 <__aeabi_fdiv+0x142>
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	0031      	movs	r1, r6
 8000a5e:	464b      	mov	r3, r9
 8000a60:	4061      	eors	r1, r4
 8000a62:	b2c9      	uxtb	r1, r1
 8000a64:	4313      	orrs	r3, r2
 8000a66:	2b0f      	cmp	r3, #15
 8000a68:	d834      	bhi.n	8000ad4 <__aeabi_fdiv+0x160>
 8000a6a:	484d      	ldr	r0, [pc, #308]	; (8000ba0 <__aeabi_fdiv+0x22c>)
 8000a6c:	009b      	lsls	r3, r3, #2
 8000a6e:	58c3      	ldr	r3, [r0, r3]
 8000a70:	469f      	mov	pc, r3
 8000a72:	2d00      	cmp	r5, #0
 8000a74:	d113      	bne.n	8000a9e <__aeabi_fdiv+0x12a>
 8000a76:	2304      	movs	r3, #4
 8000a78:	4699      	mov	r9, r3
 8000a7a:	3b03      	subs	r3, #3
 8000a7c:	2700      	movs	r7, #0
 8000a7e:	469a      	mov	sl, r3
 8000a80:	e791      	b.n	80009a6 <__aeabi_fdiv+0x32>
 8000a82:	2d00      	cmp	r5, #0
 8000a84:	d105      	bne.n	8000a92 <__aeabi_fdiv+0x11e>
 8000a86:	2308      	movs	r3, #8
 8000a88:	4699      	mov	r9, r3
 8000a8a:	3b06      	subs	r3, #6
 8000a8c:	27ff      	movs	r7, #255	; 0xff
 8000a8e:	469a      	mov	sl, r3
 8000a90:	e789      	b.n	80009a6 <__aeabi_fdiv+0x32>
 8000a92:	230c      	movs	r3, #12
 8000a94:	4699      	mov	r9, r3
 8000a96:	3b09      	subs	r3, #9
 8000a98:	27ff      	movs	r7, #255	; 0xff
 8000a9a:	469a      	mov	sl, r3
 8000a9c:	e783      	b.n	80009a6 <__aeabi_fdiv+0x32>
 8000a9e:	0028      	movs	r0, r5
 8000aa0:	f002 fb3e 	bl	8003120 <__clzsi2>
 8000aa4:	2776      	movs	r7, #118	; 0x76
 8000aa6:	1f43      	subs	r3, r0, #5
 8000aa8:	409d      	lsls	r5, r3
 8000aaa:	2300      	movs	r3, #0
 8000aac:	427f      	negs	r7, r7
 8000aae:	4699      	mov	r9, r3
 8000ab0:	469a      	mov	sl, r3
 8000ab2:	1a3f      	subs	r7, r7, r0
 8000ab4:	e777      	b.n	80009a6 <__aeabi_fdiv+0x32>
 8000ab6:	4640      	mov	r0, r8
 8000ab8:	f002 fb32 	bl	8003120 <__clzsi2>
 8000abc:	4642      	mov	r2, r8
 8000abe:	1f43      	subs	r3, r0, #5
 8000ac0:	409a      	lsls	r2, r3
 8000ac2:	2376      	movs	r3, #118	; 0x76
 8000ac4:	425b      	negs	r3, r3
 8000ac6:	4690      	mov	r8, r2
 8000ac8:	1a1b      	subs	r3, r3, r0
 8000aca:	2200      	movs	r2, #0
 8000acc:	e77d      	b.n	80009ca <__aeabi_fdiv+0x56>
 8000ace:	23ff      	movs	r3, #255	; 0xff
 8000ad0:	2203      	movs	r2, #3
 8000ad2:	e77a      	b.n	80009ca <__aeabi_fdiv+0x56>
 8000ad4:	000e      	movs	r6, r1
 8000ad6:	20ff      	movs	r0, #255	; 0xff
 8000ad8:	2500      	movs	r5, #0
 8000ada:	e7ac      	b.n	8000a36 <__aeabi_fdiv+0xc2>
 8000adc:	2001      	movs	r0, #1
 8000ade:	1ac0      	subs	r0, r0, r3
 8000ae0:	281b      	cmp	r0, #27
 8000ae2:	dca6      	bgt.n	8000a32 <__aeabi_fdiv+0xbe>
 8000ae4:	379e      	adds	r7, #158	; 0x9e
 8000ae6:	002a      	movs	r2, r5
 8000ae8:	40bd      	lsls	r5, r7
 8000aea:	40c2      	lsrs	r2, r0
 8000aec:	1e6b      	subs	r3, r5, #1
 8000aee:	419d      	sbcs	r5, r3
 8000af0:	4315      	orrs	r5, r2
 8000af2:	076b      	lsls	r3, r5, #29
 8000af4:	d004      	beq.n	8000b00 <__aeabi_fdiv+0x18c>
 8000af6:	230f      	movs	r3, #15
 8000af8:	402b      	ands	r3, r5
 8000afa:	2b04      	cmp	r3, #4
 8000afc:	d000      	beq.n	8000b00 <__aeabi_fdiv+0x18c>
 8000afe:	3504      	adds	r5, #4
 8000b00:	016b      	lsls	r3, r5, #5
 8000b02:	d544      	bpl.n	8000b8e <__aeabi_fdiv+0x21a>
 8000b04:	2001      	movs	r0, #1
 8000b06:	2500      	movs	r5, #0
 8000b08:	e795      	b.n	8000a36 <__aeabi_fdiv+0xc2>
 8000b0a:	20ff      	movs	r0, #255	; 0xff
 8000b0c:	2500      	movs	r5, #0
 8000b0e:	e792      	b.n	8000a36 <__aeabi_fdiv+0xc2>
 8000b10:	2580      	movs	r5, #128	; 0x80
 8000b12:	2600      	movs	r6, #0
 8000b14:	20ff      	movs	r0, #255	; 0xff
 8000b16:	03ed      	lsls	r5, r5, #15
 8000b18:	e78d      	b.n	8000a36 <__aeabi_fdiv+0xc2>
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	4698      	mov	r8, r3
 8000b1e:	2080      	movs	r0, #128	; 0x80
 8000b20:	03c0      	lsls	r0, r0, #15
 8000b22:	4205      	tst	r5, r0
 8000b24:	d009      	beq.n	8000b3a <__aeabi_fdiv+0x1c6>
 8000b26:	4643      	mov	r3, r8
 8000b28:	4203      	tst	r3, r0
 8000b2a:	d106      	bne.n	8000b3a <__aeabi_fdiv+0x1c6>
 8000b2c:	4645      	mov	r5, r8
 8000b2e:	4305      	orrs	r5, r0
 8000b30:	026d      	lsls	r5, r5, #9
 8000b32:	0026      	movs	r6, r4
 8000b34:	20ff      	movs	r0, #255	; 0xff
 8000b36:	0a6d      	lsrs	r5, r5, #9
 8000b38:	e77d      	b.n	8000a36 <__aeabi_fdiv+0xc2>
 8000b3a:	2080      	movs	r0, #128	; 0x80
 8000b3c:	03c0      	lsls	r0, r0, #15
 8000b3e:	4305      	orrs	r5, r0
 8000b40:	026d      	lsls	r5, r5, #9
 8000b42:	20ff      	movs	r0, #255	; 0xff
 8000b44:	0a6d      	lsrs	r5, r5, #9
 8000b46:	e776      	b.n	8000a36 <__aeabi_fdiv+0xc2>
 8000b48:	4642      	mov	r2, r8
 8000b4a:	016b      	lsls	r3, r5, #5
 8000b4c:	0150      	lsls	r0, r2, #5
 8000b4e:	4283      	cmp	r3, r0
 8000b50:	d219      	bcs.n	8000b86 <__aeabi_fdiv+0x212>
 8000b52:	221b      	movs	r2, #27
 8000b54:	2500      	movs	r5, #0
 8000b56:	3f01      	subs	r7, #1
 8000b58:	2601      	movs	r6, #1
 8000b5a:	001c      	movs	r4, r3
 8000b5c:	006d      	lsls	r5, r5, #1
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	2c00      	cmp	r4, #0
 8000b62:	db01      	blt.n	8000b68 <__aeabi_fdiv+0x1f4>
 8000b64:	4298      	cmp	r0, r3
 8000b66:	d801      	bhi.n	8000b6c <__aeabi_fdiv+0x1f8>
 8000b68:	1a1b      	subs	r3, r3, r0
 8000b6a:	4335      	orrs	r5, r6
 8000b6c:	3a01      	subs	r2, #1
 8000b6e:	2a00      	cmp	r2, #0
 8000b70:	d1f3      	bne.n	8000b5a <__aeabi_fdiv+0x1e6>
 8000b72:	1e5a      	subs	r2, r3, #1
 8000b74:	4193      	sbcs	r3, r2
 8000b76:	431d      	orrs	r5, r3
 8000b78:	003b      	movs	r3, r7
 8000b7a:	337f      	adds	r3, #127	; 0x7f
 8000b7c:	000e      	movs	r6, r1
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	dd00      	ble.n	8000b84 <__aeabi_fdiv+0x210>
 8000b82:	e741      	b.n	8000a08 <__aeabi_fdiv+0x94>
 8000b84:	e7aa      	b.n	8000adc <__aeabi_fdiv+0x168>
 8000b86:	221a      	movs	r2, #26
 8000b88:	2501      	movs	r5, #1
 8000b8a:	1a1b      	subs	r3, r3, r0
 8000b8c:	e7e4      	b.n	8000b58 <__aeabi_fdiv+0x1e4>
 8000b8e:	01ad      	lsls	r5, r5, #6
 8000b90:	2000      	movs	r0, #0
 8000b92:	0a6d      	lsrs	r5, r5, #9
 8000b94:	e74f      	b.n	8000a36 <__aeabi_fdiv+0xc2>
 8000b96:	46c0      	nop			; (mov r8, r8)
 8000b98:	08013094 	.word	0x08013094
 8000b9c:	f7ffffff 	.word	0xf7ffffff
 8000ba0:	080130d4 	.word	0x080130d4

08000ba4 <__eqsf2>:
 8000ba4:	b570      	push	{r4, r5, r6, lr}
 8000ba6:	0042      	lsls	r2, r0, #1
 8000ba8:	0245      	lsls	r5, r0, #9
 8000baa:	024e      	lsls	r6, r1, #9
 8000bac:	004c      	lsls	r4, r1, #1
 8000bae:	0fc3      	lsrs	r3, r0, #31
 8000bb0:	0a6d      	lsrs	r5, r5, #9
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	0e12      	lsrs	r2, r2, #24
 8000bb6:	0a76      	lsrs	r6, r6, #9
 8000bb8:	0e24      	lsrs	r4, r4, #24
 8000bba:	0fc9      	lsrs	r1, r1, #31
 8000bbc:	2aff      	cmp	r2, #255	; 0xff
 8000bbe:	d006      	beq.n	8000bce <__eqsf2+0x2a>
 8000bc0:	2cff      	cmp	r4, #255	; 0xff
 8000bc2:	d003      	beq.n	8000bcc <__eqsf2+0x28>
 8000bc4:	42a2      	cmp	r2, r4
 8000bc6:	d101      	bne.n	8000bcc <__eqsf2+0x28>
 8000bc8:	42b5      	cmp	r5, r6
 8000bca:	d006      	beq.n	8000bda <__eqsf2+0x36>
 8000bcc:	bd70      	pop	{r4, r5, r6, pc}
 8000bce:	2d00      	cmp	r5, #0
 8000bd0:	d1fc      	bne.n	8000bcc <__eqsf2+0x28>
 8000bd2:	2cff      	cmp	r4, #255	; 0xff
 8000bd4:	d1fa      	bne.n	8000bcc <__eqsf2+0x28>
 8000bd6:	2e00      	cmp	r6, #0
 8000bd8:	d1f8      	bne.n	8000bcc <__eqsf2+0x28>
 8000bda:	428b      	cmp	r3, r1
 8000bdc:	d006      	beq.n	8000bec <__eqsf2+0x48>
 8000bde:	2001      	movs	r0, #1
 8000be0:	2a00      	cmp	r2, #0
 8000be2:	d1f3      	bne.n	8000bcc <__eqsf2+0x28>
 8000be4:	0028      	movs	r0, r5
 8000be6:	1e43      	subs	r3, r0, #1
 8000be8:	4198      	sbcs	r0, r3
 8000bea:	e7ef      	b.n	8000bcc <__eqsf2+0x28>
 8000bec:	2000      	movs	r0, #0
 8000bee:	e7ed      	b.n	8000bcc <__eqsf2+0x28>

08000bf0 <__gesf2>:
 8000bf0:	b570      	push	{r4, r5, r6, lr}
 8000bf2:	0042      	lsls	r2, r0, #1
 8000bf4:	0245      	lsls	r5, r0, #9
 8000bf6:	024e      	lsls	r6, r1, #9
 8000bf8:	004c      	lsls	r4, r1, #1
 8000bfa:	0fc3      	lsrs	r3, r0, #31
 8000bfc:	0a6d      	lsrs	r5, r5, #9
 8000bfe:	0e12      	lsrs	r2, r2, #24
 8000c00:	0a76      	lsrs	r6, r6, #9
 8000c02:	0e24      	lsrs	r4, r4, #24
 8000c04:	0fc8      	lsrs	r0, r1, #31
 8000c06:	2aff      	cmp	r2, #255	; 0xff
 8000c08:	d01b      	beq.n	8000c42 <__gesf2+0x52>
 8000c0a:	2cff      	cmp	r4, #255	; 0xff
 8000c0c:	d00e      	beq.n	8000c2c <__gesf2+0x3c>
 8000c0e:	2a00      	cmp	r2, #0
 8000c10:	d11b      	bne.n	8000c4a <__gesf2+0x5a>
 8000c12:	2c00      	cmp	r4, #0
 8000c14:	d101      	bne.n	8000c1a <__gesf2+0x2a>
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	d01c      	beq.n	8000c54 <__gesf2+0x64>
 8000c1a:	2d00      	cmp	r5, #0
 8000c1c:	d00c      	beq.n	8000c38 <__gesf2+0x48>
 8000c1e:	4283      	cmp	r3, r0
 8000c20:	d01c      	beq.n	8000c5c <__gesf2+0x6c>
 8000c22:	2102      	movs	r1, #2
 8000c24:	1e58      	subs	r0, r3, #1
 8000c26:	4008      	ands	r0, r1
 8000c28:	3801      	subs	r0, #1
 8000c2a:	bd70      	pop	{r4, r5, r6, pc}
 8000c2c:	2e00      	cmp	r6, #0
 8000c2e:	d122      	bne.n	8000c76 <__gesf2+0x86>
 8000c30:	2a00      	cmp	r2, #0
 8000c32:	d1f4      	bne.n	8000c1e <__gesf2+0x2e>
 8000c34:	2d00      	cmp	r5, #0
 8000c36:	d1f2      	bne.n	8000c1e <__gesf2+0x2e>
 8000c38:	2800      	cmp	r0, #0
 8000c3a:	d1f6      	bne.n	8000c2a <__gesf2+0x3a>
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	4240      	negs	r0, r0
 8000c40:	e7f3      	b.n	8000c2a <__gesf2+0x3a>
 8000c42:	2d00      	cmp	r5, #0
 8000c44:	d117      	bne.n	8000c76 <__gesf2+0x86>
 8000c46:	2cff      	cmp	r4, #255	; 0xff
 8000c48:	d0f0      	beq.n	8000c2c <__gesf2+0x3c>
 8000c4a:	2c00      	cmp	r4, #0
 8000c4c:	d1e7      	bne.n	8000c1e <__gesf2+0x2e>
 8000c4e:	2e00      	cmp	r6, #0
 8000c50:	d1e5      	bne.n	8000c1e <__gesf2+0x2e>
 8000c52:	e7e6      	b.n	8000c22 <__gesf2+0x32>
 8000c54:	2000      	movs	r0, #0
 8000c56:	2d00      	cmp	r5, #0
 8000c58:	d0e7      	beq.n	8000c2a <__gesf2+0x3a>
 8000c5a:	e7e2      	b.n	8000c22 <__gesf2+0x32>
 8000c5c:	42a2      	cmp	r2, r4
 8000c5e:	dc05      	bgt.n	8000c6c <__gesf2+0x7c>
 8000c60:	dbea      	blt.n	8000c38 <__gesf2+0x48>
 8000c62:	42b5      	cmp	r5, r6
 8000c64:	d802      	bhi.n	8000c6c <__gesf2+0x7c>
 8000c66:	d3e7      	bcc.n	8000c38 <__gesf2+0x48>
 8000c68:	2000      	movs	r0, #0
 8000c6a:	e7de      	b.n	8000c2a <__gesf2+0x3a>
 8000c6c:	4243      	negs	r3, r0
 8000c6e:	4158      	adcs	r0, r3
 8000c70:	0040      	lsls	r0, r0, #1
 8000c72:	3801      	subs	r0, #1
 8000c74:	e7d9      	b.n	8000c2a <__gesf2+0x3a>
 8000c76:	2002      	movs	r0, #2
 8000c78:	4240      	negs	r0, r0
 8000c7a:	e7d6      	b.n	8000c2a <__gesf2+0x3a>

08000c7c <__lesf2>:
 8000c7c:	b570      	push	{r4, r5, r6, lr}
 8000c7e:	0042      	lsls	r2, r0, #1
 8000c80:	0245      	lsls	r5, r0, #9
 8000c82:	024e      	lsls	r6, r1, #9
 8000c84:	004c      	lsls	r4, r1, #1
 8000c86:	0fc3      	lsrs	r3, r0, #31
 8000c88:	0a6d      	lsrs	r5, r5, #9
 8000c8a:	0e12      	lsrs	r2, r2, #24
 8000c8c:	0a76      	lsrs	r6, r6, #9
 8000c8e:	0e24      	lsrs	r4, r4, #24
 8000c90:	0fc8      	lsrs	r0, r1, #31
 8000c92:	2aff      	cmp	r2, #255	; 0xff
 8000c94:	d00b      	beq.n	8000cae <__lesf2+0x32>
 8000c96:	2cff      	cmp	r4, #255	; 0xff
 8000c98:	d00d      	beq.n	8000cb6 <__lesf2+0x3a>
 8000c9a:	2a00      	cmp	r2, #0
 8000c9c:	d11f      	bne.n	8000cde <__lesf2+0x62>
 8000c9e:	2c00      	cmp	r4, #0
 8000ca0:	d116      	bne.n	8000cd0 <__lesf2+0x54>
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	d114      	bne.n	8000cd0 <__lesf2+0x54>
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	2d00      	cmp	r5, #0
 8000caa:	d010      	beq.n	8000cce <__lesf2+0x52>
 8000cac:	e009      	b.n	8000cc2 <__lesf2+0x46>
 8000cae:	2d00      	cmp	r5, #0
 8000cb0:	d10c      	bne.n	8000ccc <__lesf2+0x50>
 8000cb2:	2cff      	cmp	r4, #255	; 0xff
 8000cb4:	d113      	bne.n	8000cde <__lesf2+0x62>
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	d108      	bne.n	8000ccc <__lesf2+0x50>
 8000cba:	2a00      	cmp	r2, #0
 8000cbc:	d008      	beq.n	8000cd0 <__lesf2+0x54>
 8000cbe:	4283      	cmp	r3, r0
 8000cc0:	d012      	beq.n	8000ce8 <__lesf2+0x6c>
 8000cc2:	2102      	movs	r1, #2
 8000cc4:	1e58      	subs	r0, r3, #1
 8000cc6:	4008      	ands	r0, r1
 8000cc8:	3801      	subs	r0, #1
 8000cca:	e000      	b.n	8000cce <__lesf2+0x52>
 8000ccc:	2002      	movs	r0, #2
 8000cce:	bd70      	pop	{r4, r5, r6, pc}
 8000cd0:	2d00      	cmp	r5, #0
 8000cd2:	d1f4      	bne.n	8000cbe <__lesf2+0x42>
 8000cd4:	2800      	cmp	r0, #0
 8000cd6:	d1fa      	bne.n	8000cce <__lesf2+0x52>
 8000cd8:	2001      	movs	r0, #1
 8000cda:	4240      	negs	r0, r0
 8000cdc:	e7f7      	b.n	8000cce <__lesf2+0x52>
 8000cde:	2c00      	cmp	r4, #0
 8000ce0:	d1ed      	bne.n	8000cbe <__lesf2+0x42>
 8000ce2:	2e00      	cmp	r6, #0
 8000ce4:	d1eb      	bne.n	8000cbe <__lesf2+0x42>
 8000ce6:	e7ec      	b.n	8000cc2 <__lesf2+0x46>
 8000ce8:	42a2      	cmp	r2, r4
 8000cea:	dc05      	bgt.n	8000cf8 <__lesf2+0x7c>
 8000cec:	dbf2      	blt.n	8000cd4 <__lesf2+0x58>
 8000cee:	42b5      	cmp	r5, r6
 8000cf0:	d802      	bhi.n	8000cf8 <__lesf2+0x7c>
 8000cf2:	d3ef      	bcc.n	8000cd4 <__lesf2+0x58>
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	e7ea      	b.n	8000cce <__lesf2+0x52>
 8000cf8:	4243      	negs	r3, r0
 8000cfa:	4158      	adcs	r0, r3
 8000cfc:	0040      	lsls	r0, r0, #1
 8000cfe:	3801      	subs	r0, #1
 8000d00:	e7e5      	b.n	8000cce <__lesf2+0x52>
 8000d02:	46c0      	nop			; (mov r8, r8)

08000d04 <__aeabi_fmul>:
 8000d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d06:	464f      	mov	r7, r9
 8000d08:	4646      	mov	r6, r8
 8000d0a:	46d6      	mov	lr, sl
 8000d0c:	0244      	lsls	r4, r0, #9
 8000d0e:	0045      	lsls	r5, r0, #1
 8000d10:	b5c0      	push	{r6, r7, lr}
 8000d12:	0a64      	lsrs	r4, r4, #9
 8000d14:	1c0f      	adds	r7, r1, #0
 8000d16:	0e2d      	lsrs	r5, r5, #24
 8000d18:	0fc6      	lsrs	r6, r0, #31
 8000d1a:	2d00      	cmp	r5, #0
 8000d1c:	d100      	bne.n	8000d20 <__aeabi_fmul+0x1c>
 8000d1e:	e08d      	b.n	8000e3c <__aeabi_fmul+0x138>
 8000d20:	2dff      	cmp	r5, #255	; 0xff
 8000d22:	d100      	bne.n	8000d26 <__aeabi_fmul+0x22>
 8000d24:	e092      	b.n	8000e4c <__aeabi_fmul+0x148>
 8000d26:	2300      	movs	r3, #0
 8000d28:	2080      	movs	r0, #128	; 0x80
 8000d2a:	4699      	mov	r9, r3
 8000d2c:	469a      	mov	sl, r3
 8000d2e:	00e4      	lsls	r4, r4, #3
 8000d30:	04c0      	lsls	r0, r0, #19
 8000d32:	4304      	orrs	r4, r0
 8000d34:	3d7f      	subs	r5, #127	; 0x7f
 8000d36:	0278      	lsls	r0, r7, #9
 8000d38:	0a43      	lsrs	r3, r0, #9
 8000d3a:	4698      	mov	r8, r3
 8000d3c:	007b      	lsls	r3, r7, #1
 8000d3e:	0e1b      	lsrs	r3, r3, #24
 8000d40:	0fff      	lsrs	r7, r7, #31
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d100      	bne.n	8000d48 <__aeabi_fmul+0x44>
 8000d46:	e070      	b.n	8000e2a <__aeabi_fmul+0x126>
 8000d48:	2bff      	cmp	r3, #255	; 0xff
 8000d4a:	d100      	bne.n	8000d4e <__aeabi_fmul+0x4a>
 8000d4c:	e086      	b.n	8000e5c <__aeabi_fmul+0x158>
 8000d4e:	4642      	mov	r2, r8
 8000d50:	00d0      	lsls	r0, r2, #3
 8000d52:	2280      	movs	r2, #128	; 0x80
 8000d54:	3b7f      	subs	r3, #127	; 0x7f
 8000d56:	18ed      	adds	r5, r5, r3
 8000d58:	2300      	movs	r3, #0
 8000d5a:	04d2      	lsls	r2, r2, #19
 8000d5c:	4302      	orrs	r2, r0
 8000d5e:	4690      	mov	r8, r2
 8000d60:	469c      	mov	ip, r3
 8000d62:	0031      	movs	r1, r6
 8000d64:	464b      	mov	r3, r9
 8000d66:	4079      	eors	r1, r7
 8000d68:	1c68      	adds	r0, r5, #1
 8000d6a:	2b0f      	cmp	r3, #15
 8000d6c:	d81c      	bhi.n	8000da8 <__aeabi_fmul+0xa4>
 8000d6e:	4a76      	ldr	r2, [pc, #472]	; (8000f48 <__aeabi_fmul+0x244>)
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	58d3      	ldr	r3, [r2, r3]
 8000d74:	469f      	mov	pc, r3
 8000d76:	0039      	movs	r1, r7
 8000d78:	4644      	mov	r4, r8
 8000d7a:	46e2      	mov	sl, ip
 8000d7c:	4653      	mov	r3, sl
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d00f      	beq.n	8000da2 <__aeabi_fmul+0x9e>
 8000d82:	2b03      	cmp	r3, #3
 8000d84:	d100      	bne.n	8000d88 <__aeabi_fmul+0x84>
 8000d86:	e0d7      	b.n	8000f38 <__aeabi_fmul+0x234>
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d137      	bne.n	8000dfc <__aeabi_fmul+0xf8>
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	2400      	movs	r4, #0
 8000d90:	05c0      	lsls	r0, r0, #23
 8000d92:	4320      	orrs	r0, r4
 8000d94:	07c9      	lsls	r1, r1, #31
 8000d96:	4308      	orrs	r0, r1
 8000d98:	bce0      	pop	{r5, r6, r7}
 8000d9a:	46ba      	mov	sl, r7
 8000d9c:	46b1      	mov	r9, r6
 8000d9e:	46a8      	mov	r8, r5
 8000da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000da2:	20ff      	movs	r0, #255	; 0xff
 8000da4:	2400      	movs	r4, #0
 8000da6:	e7f3      	b.n	8000d90 <__aeabi_fmul+0x8c>
 8000da8:	0c26      	lsrs	r6, r4, #16
 8000daa:	0424      	lsls	r4, r4, #16
 8000dac:	0c22      	lsrs	r2, r4, #16
 8000dae:	4644      	mov	r4, r8
 8000db0:	0424      	lsls	r4, r4, #16
 8000db2:	0c24      	lsrs	r4, r4, #16
 8000db4:	4643      	mov	r3, r8
 8000db6:	0027      	movs	r7, r4
 8000db8:	0c1b      	lsrs	r3, r3, #16
 8000dba:	4357      	muls	r7, r2
 8000dbc:	4374      	muls	r4, r6
 8000dbe:	435a      	muls	r2, r3
 8000dc0:	435e      	muls	r6, r3
 8000dc2:	1912      	adds	r2, r2, r4
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	189b      	adds	r3, r3, r2
 8000dc8:	429c      	cmp	r4, r3
 8000dca:	d903      	bls.n	8000dd4 <__aeabi_fmul+0xd0>
 8000dcc:	2280      	movs	r2, #128	; 0x80
 8000dce:	0252      	lsls	r2, r2, #9
 8000dd0:	4694      	mov	ip, r2
 8000dd2:	4466      	add	r6, ip
 8000dd4:	043f      	lsls	r7, r7, #16
 8000dd6:	041a      	lsls	r2, r3, #16
 8000dd8:	0c3f      	lsrs	r7, r7, #16
 8000dda:	19d2      	adds	r2, r2, r7
 8000ddc:	0194      	lsls	r4, r2, #6
 8000dde:	1e67      	subs	r7, r4, #1
 8000de0:	41bc      	sbcs	r4, r7
 8000de2:	0c1b      	lsrs	r3, r3, #16
 8000de4:	0e92      	lsrs	r2, r2, #26
 8000de6:	199b      	adds	r3, r3, r6
 8000de8:	4314      	orrs	r4, r2
 8000dea:	019b      	lsls	r3, r3, #6
 8000dec:	431c      	orrs	r4, r3
 8000dee:	011b      	lsls	r3, r3, #4
 8000df0:	d400      	bmi.n	8000df4 <__aeabi_fmul+0xf0>
 8000df2:	e09b      	b.n	8000f2c <__aeabi_fmul+0x228>
 8000df4:	2301      	movs	r3, #1
 8000df6:	0862      	lsrs	r2, r4, #1
 8000df8:	401c      	ands	r4, r3
 8000dfa:	4314      	orrs	r4, r2
 8000dfc:	0002      	movs	r2, r0
 8000dfe:	327f      	adds	r2, #127	; 0x7f
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	dd64      	ble.n	8000ece <__aeabi_fmul+0x1ca>
 8000e04:	0763      	lsls	r3, r4, #29
 8000e06:	d004      	beq.n	8000e12 <__aeabi_fmul+0x10e>
 8000e08:	230f      	movs	r3, #15
 8000e0a:	4023      	ands	r3, r4
 8000e0c:	2b04      	cmp	r3, #4
 8000e0e:	d000      	beq.n	8000e12 <__aeabi_fmul+0x10e>
 8000e10:	3404      	adds	r4, #4
 8000e12:	0123      	lsls	r3, r4, #4
 8000e14:	d503      	bpl.n	8000e1e <__aeabi_fmul+0x11a>
 8000e16:	0002      	movs	r2, r0
 8000e18:	4b4c      	ldr	r3, [pc, #304]	; (8000f4c <__aeabi_fmul+0x248>)
 8000e1a:	3280      	adds	r2, #128	; 0x80
 8000e1c:	401c      	ands	r4, r3
 8000e1e:	2afe      	cmp	r2, #254	; 0xfe
 8000e20:	dcbf      	bgt.n	8000da2 <__aeabi_fmul+0x9e>
 8000e22:	01a4      	lsls	r4, r4, #6
 8000e24:	0a64      	lsrs	r4, r4, #9
 8000e26:	b2d0      	uxtb	r0, r2
 8000e28:	e7b2      	b.n	8000d90 <__aeabi_fmul+0x8c>
 8000e2a:	4643      	mov	r3, r8
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d13d      	bne.n	8000eac <__aeabi_fmul+0x1a8>
 8000e30:	464a      	mov	r2, r9
 8000e32:	3301      	adds	r3, #1
 8000e34:	431a      	orrs	r2, r3
 8000e36:	4691      	mov	r9, r2
 8000e38:	469c      	mov	ip, r3
 8000e3a:	e792      	b.n	8000d62 <__aeabi_fmul+0x5e>
 8000e3c:	2c00      	cmp	r4, #0
 8000e3e:	d129      	bne.n	8000e94 <__aeabi_fmul+0x190>
 8000e40:	2304      	movs	r3, #4
 8000e42:	4699      	mov	r9, r3
 8000e44:	3b03      	subs	r3, #3
 8000e46:	2500      	movs	r5, #0
 8000e48:	469a      	mov	sl, r3
 8000e4a:	e774      	b.n	8000d36 <__aeabi_fmul+0x32>
 8000e4c:	2c00      	cmp	r4, #0
 8000e4e:	d11b      	bne.n	8000e88 <__aeabi_fmul+0x184>
 8000e50:	2308      	movs	r3, #8
 8000e52:	4699      	mov	r9, r3
 8000e54:	3b06      	subs	r3, #6
 8000e56:	25ff      	movs	r5, #255	; 0xff
 8000e58:	469a      	mov	sl, r3
 8000e5a:	e76c      	b.n	8000d36 <__aeabi_fmul+0x32>
 8000e5c:	4643      	mov	r3, r8
 8000e5e:	35ff      	adds	r5, #255	; 0xff
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d10b      	bne.n	8000e7c <__aeabi_fmul+0x178>
 8000e64:	2302      	movs	r3, #2
 8000e66:	464a      	mov	r2, r9
 8000e68:	431a      	orrs	r2, r3
 8000e6a:	4691      	mov	r9, r2
 8000e6c:	469c      	mov	ip, r3
 8000e6e:	e778      	b.n	8000d62 <__aeabi_fmul+0x5e>
 8000e70:	4653      	mov	r3, sl
 8000e72:	0031      	movs	r1, r6
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d000      	beq.n	8000e7a <__aeabi_fmul+0x176>
 8000e78:	e783      	b.n	8000d82 <__aeabi_fmul+0x7e>
 8000e7a:	e792      	b.n	8000da2 <__aeabi_fmul+0x9e>
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	464a      	mov	r2, r9
 8000e80:	431a      	orrs	r2, r3
 8000e82:	4691      	mov	r9, r2
 8000e84:	469c      	mov	ip, r3
 8000e86:	e76c      	b.n	8000d62 <__aeabi_fmul+0x5e>
 8000e88:	230c      	movs	r3, #12
 8000e8a:	4699      	mov	r9, r3
 8000e8c:	3b09      	subs	r3, #9
 8000e8e:	25ff      	movs	r5, #255	; 0xff
 8000e90:	469a      	mov	sl, r3
 8000e92:	e750      	b.n	8000d36 <__aeabi_fmul+0x32>
 8000e94:	0020      	movs	r0, r4
 8000e96:	f002 f943 	bl	8003120 <__clzsi2>
 8000e9a:	2576      	movs	r5, #118	; 0x76
 8000e9c:	1f43      	subs	r3, r0, #5
 8000e9e:	409c      	lsls	r4, r3
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	426d      	negs	r5, r5
 8000ea4:	4699      	mov	r9, r3
 8000ea6:	469a      	mov	sl, r3
 8000ea8:	1a2d      	subs	r5, r5, r0
 8000eaa:	e744      	b.n	8000d36 <__aeabi_fmul+0x32>
 8000eac:	4640      	mov	r0, r8
 8000eae:	f002 f937 	bl	8003120 <__clzsi2>
 8000eb2:	4642      	mov	r2, r8
 8000eb4:	1f43      	subs	r3, r0, #5
 8000eb6:	409a      	lsls	r2, r3
 8000eb8:	2300      	movs	r3, #0
 8000eba:	1a2d      	subs	r5, r5, r0
 8000ebc:	4690      	mov	r8, r2
 8000ebe:	469c      	mov	ip, r3
 8000ec0:	3d76      	subs	r5, #118	; 0x76
 8000ec2:	e74e      	b.n	8000d62 <__aeabi_fmul+0x5e>
 8000ec4:	2480      	movs	r4, #128	; 0x80
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	20ff      	movs	r0, #255	; 0xff
 8000eca:	03e4      	lsls	r4, r4, #15
 8000ecc:	e760      	b.n	8000d90 <__aeabi_fmul+0x8c>
 8000ece:	2301      	movs	r3, #1
 8000ed0:	1a9b      	subs	r3, r3, r2
 8000ed2:	2b1b      	cmp	r3, #27
 8000ed4:	dd00      	ble.n	8000ed8 <__aeabi_fmul+0x1d4>
 8000ed6:	e759      	b.n	8000d8c <__aeabi_fmul+0x88>
 8000ed8:	0022      	movs	r2, r4
 8000eda:	309e      	adds	r0, #158	; 0x9e
 8000edc:	40da      	lsrs	r2, r3
 8000ede:	4084      	lsls	r4, r0
 8000ee0:	0013      	movs	r3, r2
 8000ee2:	1e62      	subs	r2, r4, #1
 8000ee4:	4194      	sbcs	r4, r2
 8000ee6:	431c      	orrs	r4, r3
 8000ee8:	0763      	lsls	r3, r4, #29
 8000eea:	d004      	beq.n	8000ef6 <__aeabi_fmul+0x1f2>
 8000eec:	230f      	movs	r3, #15
 8000eee:	4023      	ands	r3, r4
 8000ef0:	2b04      	cmp	r3, #4
 8000ef2:	d000      	beq.n	8000ef6 <__aeabi_fmul+0x1f2>
 8000ef4:	3404      	adds	r4, #4
 8000ef6:	0163      	lsls	r3, r4, #5
 8000ef8:	d51a      	bpl.n	8000f30 <__aeabi_fmul+0x22c>
 8000efa:	2001      	movs	r0, #1
 8000efc:	2400      	movs	r4, #0
 8000efe:	e747      	b.n	8000d90 <__aeabi_fmul+0x8c>
 8000f00:	2080      	movs	r0, #128	; 0x80
 8000f02:	03c0      	lsls	r0, r0, #15
 8000f04:	4204      	tst	r4, r0
 8000f06:	d009      	beq.n	8000f1c <__aeabi_fmul+0x218>
 8000f08:	4643      	mov	r3, r8
 8000f0a:	4203      	tst	r3, r0
 8000f0c:	d106      	bne.n	8000f1c <__aeabi_fmul+0x218>
 8000f0e:	4644      	mov	r4, r8
 8000f10:	4304      	orrs	r4, r0
 8000f12:	0264      	lsls	r4, r4, #9
 8000f14:	0039      	movs	r1, r7
 8000f16:	20ff      	movs	r0, #255	; 0xff
 8000f18:	0a64      	lsrs	r4, r4, #9
 8000f1a:	e739      	b.n	8000d90 <__aeabi_fmul+0x8c>
 8000f1c:	2080      	movs	r0, #128	; 0x80
 8000f1e:	03c0      	lsls	r0, r0, #15
 8000f20:	4304      	orrs	r4, r0
 8000f22:	0264      	lsls	r4, r4, #9
 8000f24:	0031      	movs	r1, r6
 8000f26:	20ff      	movs	r0, #255	; 0xff
 8000f28:	0a64      	lsrs	r4, r4, #9
 8000f2a:	e731      	b.n	8000d90 <__aeabi_fmul+0x8c>
 8000f2c:	0028      	movs	r0, r5
 8000f2e:	e765      	b.n	8000dfc <__aeabi_fmul+0xf8>
 8000f30:	01a4      	lsls	r4, r4, #6
 8000f32:	2000      	movs	r0, #0
 8000f34:	0a64      	lsrs	r4, r4, #9
 8000f36:	e72b      	b.n	8000d90 <__aeabi_fmul+0x8c>
 8000f38:	2080      	movs	r0, #128	; 0x80
 8000f3a:	03c0      	lsls	r0, r0, #15
 8000f3c:	4304      	orrs	r4, r0
 8000f3e:	0264      	lsls	r4, r4, #9
 8000f40:	20ff      	movs	r0, #255	; 0xff
 8000f42:	0a64      	lsrs	r4, r4, #9
 8000f44:	e724      	b.n	8000d90 <__aeabi_fmul+0x8c>
 8000f46:	46c0      	nop			; (mov r8, r8)
 8000f48:	08013114 	.word	0x08013114
 8000f4c:	f7ffffff 	.word	0xf7ffffff

08000f50 <__aeabi_fsub>:
 8000f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f52:	46ce      	mov	lr, r9
 8000f54:	4647      	mov	r7, r8
 8000f56:	0243      	lsls	r3, r0, #9
 8000f58:	0a5b      	lsrs	r3, r3, #9
 8000f5a:	024e      	lsls	r6, r1, #9
 8000f5c:	00da      	lsls	r2, r3, #3
 8000f5e:	4694      	mov	ip, r2
 8000f60:	0a72      	lsrs	r2, r6, #9
 8000f62:	4691      	mov	r9, r2
 8000f64:	0045      	lsls	r5, r0, #1
 8000f66:	004a      	lsls	r2, r1, #1
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	0e2d      	lsrs	r5, r5, #24
 8000f6c:	001f      	movs	r7, r3
 8000f6e:	0fc4      	lsrs	r4, r0, #31
 8000f70:	0e12      	lsrs	r2, r2, #24
 8000f72:	0fc9      	lsrs	r1, r1, #31
 8000f74:	09b6      	lsrs	r6, r6, #6
 8000f76:	2aff      	cmp	r2, #255	; 0xff
 8000f78:	d05b      	beq.n	8001032 <__aeabi_fsub+0xe2>
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	4041      	eors	r1, r0
 8000f7e:	428c      	cmp	r4, r1
 8000f80:	d039      	beq.n	8000ff6 <__aeabi_fsub+0xa6>
 8000f82:	1aa8      	subs	r0, r5, r2
 8000f84:	2800      	cmp	r0, #0
 8000f86:	dd5a      	ble.n	800103e <__aeabi_fsub+0xee>
 8000f88:	2a00      	cmp	r2, #0
 8000f8a:	d06a      	beq.n	8001062 <__aeabi_fsub+0x112>
 8000f8c:	2dff      	cmp	r5, #255	; 0xff
 8000f8e:	d100      	bne.n	8000f92 <__aeabi_fsub+0x42>
 8000f90:	e0d9      	b.n	8001146 <__aeabi_fsub+0x1f6>
 8000f92:	2280      	movs	r2, #128	; 0x80
 8000f94:	04d2      	lsls	r2, r2, #19
 8000f96:	4316      	orrs	r6, r2
 8000f98:	281b      	cmp	r0, #27
 8000f9a:	dc00      	bgt.n	8000f9e <__aeabi_fsub+0x4e>
 8000f9c:	e0e9      	b.n	8001172 <__aeabi_fsub+0x222>
 8000f9e:	2001      	movs	r0, #1
 8000fa0:	4663      	mov	r3, ip
 8000fa2:	1a18      	subs	r0, r3, r0
 8000fa4:	0143      	lsls	r3, r0, #5
 8000fa6:	d400      	bmi.n	8000faa <__aeabi_fsub+0x5a>
 8000fa8:	e0b4      	b.n	8001114 <__aeabi_fsub+0x1c4>
 8000faa:	0180      	lsls	r0, r0, #6
 8000fac:	0987      	lsrs	r7, r0, #6
 8000fae:	0038      	movs	r0, r7
 8000fb0:	f002 f8b6 	bl	8003120 <__clzsi2>
 8000fb4:	3805      	subs	r0, #5
 8000fb6:	4087      	lsls	r7, r0
 8000fb8:	4285      	cmp	r5, r0
 8000fba:	dc00      	bgt.n	8000fbe <__aeabi_fsub+0x6e>
 8000fbc:	e0cc      	b.n	8001158 <__aeabi_fsub+0x208>
 8000fbe:	1a2d      	subs	r5, r5, r0
 8000fc0:	48b5      	ldr	r0, [pc, #724]	; (8001298 <__aeabi_fsub+0x348>)
 8000fc2:	4038      	ands	r0, r7
 8000fc4:	0743      	lsls	r3, r0, #29
 8000fc6:	d004      	beq.n	8000fd2 <__aeabi_fsub+0x82>
 8000fc8:	230f      	movs	r3, #15
 8000fca:	4003      	ands	r3, r0
 8000fcc:	2b04      	cmp	r3, #4
 8000fce:	d000      	beq.n	8000fd2 <__aeabi_fsub+0x82>
 8000fd0:	3004      	adds	r0, #4
 8000fd2:	0143      	lsls	r3, r0, #5
 8000fd4:	d400      	bmi.n	8000fd8 <__aeabi_fsub+0x88>
 8000fd6:	e0a0      	b.n	800111a <__aeabi_fsub+0x1ca>
 8000fd8:	1c6a      	adds	r2, r5, #1
 8000fda:	2dfe      	cmp	r5, #254	; 0xfe
 8000fdc:	d100      	bne.n	8000fe0 <__aeabi_fsub+0x90>
 8000fde:	e08d      	b.n	80010fc <__aeabi_fsub+0x1ac>
 8000fe0:	0180      	lsls	r0, r0, #6
 8000fe2:	0a47      	lsrs	r7, r0, #9
 8000fe4:	b2d2      	uxtb	r2, r2
 8000fe6:	05d0      	lsls	r0, r2, #23
 8000fe8:	4338      	orrs	r0, r7
 8000fea:	07e4      	lsls	r4, r4, #31
 8000fec:	4320      	orrs	r0, r4
 8000fee:	bcc0      	pop	{r6, r7}
 8000ff0:	46b9      	mov	r9, r7
 8000ff2:	46b0      	mov	r8, r6
 8000ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ff6:	1aa8      	subs	r0, r5, r2
 8000ff8:	4680      	mov	r8, r0
 8000ffa:	2800      	cmp	r0, #0
 8000ffc:	dd45      	ble.n	800108a <__aeabi_fsub+0x13a>
 8000ffe:	2a00      	cmp	r2, #0
 8001000:	d070      	beq.n	80010e4 <__aeabi_fsub+0x194>
 8001002:	2dff      	cmp	r5, #255	; 0xff
 8001004:	d100      	bne.n	8001008 <__aeabi_fsub+0xb8>
 8001006:	e09e      	b.n	8001146 <__aeabi_fsub+0x1f6>
 8001008:	2380      	movs	r3, #128	; 0x80
 800100a:	04db      	lsls	r3, r3, #19
 800100c:	431e      	orrs	r6, r3
 800100e:	4643      	mov	r3, r8
 8001010:	2b1b      	cmp	r3, #27
 8001012:	dc00      	bgt.n	8001016 <__aeabi_fsub+0xc6>
 8001014:	e0d2      	b.n	80011bc <__aeabi_fsub+0x26c>
 8001016:	2001      	movs	r0, #1
 8001018:	4460      	add	r0, ip
 800101a:	0143      	lsls	r3, r0, #5
 800101c:	d57a      	bpl.n	8001114 <__aeabi_fsub+0x1c4>
 800101e:	3501      	adds	r5, #1
 8001020:	2dff      	cmp	r5, #255	; 0xff
 8001022:	d06b      	beq.n	80010fc <__aeabi_fsub+0x1ac>
 8001024:	2301      	movs	r3, #1
 8001026:	4a9d      	ldr	r2, [pc, #628]	; (800129c <__aeabi_fsub+0x34c>)
 8001028:	4003      	ands	r3, r0
 800102a:	0840      	lsrs	r0, r0, #1
 800102c:	4010      	ands	r0, r2
 800102e:	4318      	orrs	r0, r3
 8001030:	e7c8      	b.n	8000fc4 <__aeabi_fsub+0x74>
 8001032:	2e00      	cmp	r6, #0
 8001034:	d020      	beq.n	8001078 <__aeabi_fsub+0x128>
 8001036:	428c      	cmp	r4, r1
 8001038:	d023      	beq.n	8001082 <__aeabi_fsub+0x132>
 800103a:	0028      	movs	r0, r5
 800103c:	38ff      	subs	r0, #255	; 0xff
 800103e:	2800      	cmp	r0, #0
 8001040:	d039      	beq.n	80010b6 <__aeabi_fsub+0x166>
 8001042:	1b57      	subs	r7, r2, r5
 8001044:	2d00      	cmp	r5, #0
 8001046:	d000      	beq.n	800104a <__aeabi_fsub+0xfa>
 8001048:	e09d      	b.n	8001186 <__aeabi_fsub+0x236>
 800104a:	4663      	mov	r3, ip
 800104c:	2b00      	cmp	r3, #0
 800104e:	d100      	bne.n	8001052 <__aeabi_fsub+0x102>
 8001050:	e0db      	b.n	800120a <__aeabi_fsub+0x2ba>
 8001052:	1e7b      	subs	r3, r7, #1
 8001054:	2f01      	cmp	r7, #1
 8001056:	d100      	bne.n	800105a <__aeabi_fsub+0x10a>
 8001058:	e10d      	b.n	8001276 <__aeabi_fsub+0x326>
 800105a:	2fff      	cmp	r7, #255	; 0xff
 800105c:	d071      	beq.n	8001142 <__aeabi_fsub+0x1f2>
 800105e:	001f      	movs	r7, r3
 8001060:	e098      	b.n	8001194 <__aeabi_fsub+0x244>
 8001062:	2e00      	cmp	r6, #0
 8001064:	d100      	bne.n	8001068 <__aeabi_fsub+0x118>
 8001066:	e0a7      	b.n	80011b8 <__aeabi_fsub+0x268>
 8001068:	1e42      	subs	r2, r0, #1
 800106a:	2801      	cmp	r0, #1
 800106c:	d100      	bne.n	8001070 <__aeabi_fsub+0x120>
 800106e:	e0e6      	b.n	800123e <__aeabi_fsub+0x2ee>
 8001070:	28ff      	cmp	r0, #255	; 0xff
 8001072:	d068      	beq.n	8001146 <__aeabi_fsub+0x1f6>
 8001074:	0010      	movs	r0, r2
 8001076:	e78f      	b.n	8000f98 <__aeabi_fsub+0x48>
 8001078:	2001      	movs	r0, #1
 800107a:	4041      	eors	r1, r0
 800107c:	42a1      	cmp	r1, r4
 800107e:	d000      	beq.n	8001082 <__aeabi_fsub+0x132>
 8001080:	e77f      	b.n	8000f82 <__aeabi_fsub+0x32>
 8001082:	20ff      	movs	r0, #255	; 0xff
 8001084:	4240      	negs	r0, r0
 8001086:	4680      	mov	r8, r0
 8001088:	44a8      	add	r8, r5
 800108a:	4640      	mov	r0, r8
 800108c:	2800      	cmp	r0, #0
 800108e:	d038      	beq.n	8001102 <__aeabi_fsub+0x1b2>
 8001090:	1b51      	subs	r1, r2, r5
 8001092:	2d00      	cmp	r5, #0
 8001094:	d100      	bne.n	8001098 <__aeabi_fsub+0x148>
 8001096:	e0ae      	b.n	80011f6 <__aeabi_fsub+0x2a6>
 8001098:	2aff      	cmp	r2, #255	; 0xff
 800109a:	d100      	bne.n	800109e <__aeabi_fsub+0x14e>
 800109c:	e0df      	b.n	800125e <__aeabi_fsub+0x30e>
 800109e:	2380      	movs	r3, #128	; 0x80
 80010a0:	4660      	mov	r0, ip
 80010a2:	04db      	lsls	r3, r3, #19
 80010a4:	4318      	orrs	r0, r3
 80010a6:	4684      	mov	ip, r0
 80010a8:	291b      	cmp	r1, #27
 80010aa:	dc00      	bgt.n	80010ae <__aeabi_fsub+0x15e>
 80010ac:	e0d9      	b.n	8001262 <__aeabi_fsub+0x312>
 80010ae:	2001      	movs	r0, #1
 80010b0:	0015      	movs	r5, r2
 80010b2:	1980      	adds	r0, r0, r6
 80010b4:	e7b1      	b.n	800101a <__aeabi_fsub+0xca>
 80010b6:	20fe      	movs	r0, #254	; 0xfe
 80010b8:	1c6a      	adds	r2, r5, #1
 80010ba:	4210      	tst	r0, r2
 80010bc:	d171      	bne.n	80011a2 <__aeabi_fsub+0x252>
 80010be:	2d00      	cmp	r5, #0
 80010c0:	d000      	beq.n	80010c4 <__aeabi_fsub+0x174>
 80010c2:	e0a6      	b.n	8001212 <__aeabi_fsub+0x2c2>
 80010c4:	4663      	mov	r3, ip
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d100      	bne.n	80010cc <__aeabi_fsub+0x17c>
 80010ca:	e0d9      	b.n	8001280 <__aeabi_fsub+0x330>
 80010cc:	2200      	movs	r2, #0
 80010ce:	2e00      	cmp	r6, #0
 80010d0:	d100      	bne.n	80010d4 <__aeabi_fsub+0x184>
 80010d2:	e788      	b.n	8000fe6 <__aeabi_fsub+0x96>
 80010d4:	1b98      	subs	r0, r3, r6
 80010d6:	0143      	lsls	r3, r0, #5
 80010d8:	d400      	bmi.n	80010dc <__aeabi_fsub+0x18c>
 80010da:	e0e1      	b.n	80012a0 <__aeabi_fsub+0x350>
 80010dc:	4663      	mov	r3, ip
 80010de:	000c      	movs	r4, r1
 80010e0:	1af0      	subs	r0, r6, r3
 80010e2:	e76f      	b.n	8000fc4 <__aeabi_fsub+0x74>
 80010e4:	2e00      	cmp	r6, #0
 80010e6:	d100      	bne.n	80010ea <__aeabi_fsub+0x19a>
 80010e8:	e0b7      	b.n	800125a <__aeabi_fsub+0x30a>
 80010ea:	0002      	movs	r2, r0
 80010ec:	3a01      	subs	r2, #1
 80010ee:	2801      	cmp	r0, #1
 80010f0:	d100      	bne.n	80010f4 <__aeabi_fsub+0x1a4>
 80010f2:	e09c      	b.n	800122e <__aeabi_fsub+0x2de>
 80010f4:	28ff      	cmp	r0, #255	; 0xff
 80010f6:	d026      	beq.n	8001146 <__aeabi_fsub+0x1f6>
 80010f8:	4690      	mov	r8, r2
 80010fa:	e788      	b.n	800100e <__aeabi_fsub+0xbe>
 80010fc:	22ff      	movs	r2, #255	; 0xff
 80010fe:	2700      	movs	r7, #0
 8001100:	e771      	b.n	8000fe6 <__aeabi_fsub+0x96>
 8001102:	20fe      	movs	r0, #254	; 0xfe
 8001104:	1c6a      	adds	r2, r5, #1
 8001106:	4210      	tst	r0, r2
 8001108:	d064      	beq.n	80011d4 <__aeabi_fsub+0x284>
 800110a:	2aff      	cmp	r2, #255	; 0xff
 800110c:	d0f6      	beq.n	80010fc <__aeabi_fsub+0x1ac>
 800110e:	0015      	movs	r5, r2
 8001110:	4466      	add	r6, ip
 8001112:	0870      	lsrs	r0, r6, #1
 8001114:	0743      	lsls	r3, r0, #29
 8001116:	d000      	beq.n	800111a <__aeabi_fsub+0x1ca>
 8001118:	e756      	b.n	8000fc8 <__aeabi_fsub+0x78>
 800111a:	08c3      	lsrs	r3, r0, #3
 800111c:	2dff      	cmp	r5, #255	; 0xff
 800111e:	d012      	beq.n	8001146 <__aeabi_fsub+0x1f6>
 8001120:	025b      	lsls	r3, r3, #9
 8001122:	0a5f      	lsrs	r7, r3, #9
 8001124:	b2ea      	uxtb	r2, r5
 8001126:	e75e      	b.n	8000fe6 <__aeabi_fsub+0x96>
 8001128:	4662      	mov	r2, ip
 800112a:	2a00      	cmp	r2, #0
 800112c:	d100      	bne.n	8001130 <__aeabi_fsub+0x1e0>
 800112e:	e096      	b.n	800125e <__aeabi_fsub+0x30e>
 8001130:	2e00      	cmp	r6, #0
 8001132:	d008      	beq.n	8001146 <__aeabi_fsub+0x1f6>
 8001134:	2280      	movs	r2, #128	; 0x80
 8001136:	03d2      	lsls	r2, r2, #15
 8001138:	4213      	tst	r3, r2
 800113a:	d004      	beq.n	8001146 <__aeabi_fsub+0x1f6>
 800113c:	4648      	mov	r0, r9
 800113e:	4210      	tst	r0, r2
 8001140:	d101      	bne.n	8001146 <__aeabi_fsub+0x1f6>
 8001142:	000c      	movs	r4, r1
 8001144:	464b      	mov	r3, r9
 8001146:	2b00      	cmp	r3, #0
 8001148:	d0d8      	beq.n	80010fc <__aeabi_fsub+0x1ac>
 800114a:	2780      	movs	r7, #128	; 0x80
 800114c:	03ff      	lsls	r7, r7, #15
 800114e:	431f      	orrs	r7, r3
 8001150:	027f      	lsls	r7, r7, #9
 8001152:	22ff      	movs	r2, #255	; 0xff
 8001154:	0a7f      	lsrs	r7, r7, #9
 8001156:	e746      	b.n	8000fe6 <__aeabi_fsub+0x96>
 8001158:	2320      	movs	r3, #32
 800115a:	003a      	movs	r2, r7
 800115c:	1b45      	subs	r5, r0, r5
 800115e:	0038      	movs	r0, r7
 8001160:	3501      	adds	r5, #1
 8001162:	40ea      	lsrs	r2, r5
 8001164:	1b5d      	subs	r5, r3, r5
 8001166:	40a8      	lsls	r0, r5
 8001168:	1e43      	subs	r3, r0, #1
 800116a:	4198      	sbcs	r0, r3
 800116c:	2500      	movs	r5, #0
 800116e:	4310      	orrs	r0, r2
 8001170:	e728      	b.n	8000fc4 <__aeabi_fsub+0x74>
 8001172:	2320      	movs	r3, #32
 8001174:	1a1b      	subs	r3, r3, r0
 8001176:	0032      	movs	r2, r6
 8001178:	409e      	lsls	r6, r3
 800117a:	40c2      	lsrs	r2, r0
 800117c:	0030      	movs	r0, r6
 800117e:	1e43      	subs	r3, r0, #1
 8001180:	4198      	sbcs	r0, r3
 8001182:	4310      	orrs	r0, r2
 8001184:	e70c      	b.n	8000fa0 <__aeabi_fsub+0x50>
 8001186:	2aff      	cmp	r2, #255	; 0xff
 8001188:	d0db      	beq.n	8001142 <__aeabi_fsub+0x1f2>
 800118a:	2380      	movs	r3, #128	; 0x80
 800118c:	4660      	mov	r0, ip
 800118e:	04db      	lsls	r3, r3, #19
 8001190:	4318      	orrs	r0, r3
 8001192:	4684      	mov	ip, r0
 8001194:	2f1b      	cmp	r7, #27
 8001196:	dd56      	ble.n	8001246 <__aeabi_fsub+0x2f6>
 8001198:	2001      	movs	r0, #1
 800119a:	000c      	movs	r4, r1
 800119c:	0015      	movs	r5, r2
 800119e:	1a30      	subs	r0, r6, r0
 80011a0:	e700      	b.n	8000fa4 <__aeabi_fsub+0x54>
 80011a2:	4663      	mov	r3, ip
 80011a4:	1b9f      	subs	r7, r3, r6
 80011a6:	017b      	lsls	r3, r7, #5
 80011a8:	d43d      	bmi.n	8001226 <__aeabi_fsub+0x2d6>
 80011aa:	2f00      	cmp	r7, #0
 80011ac:	d000      	beq.n	80011b0 <__aeabi_fsub+0x260>
 80011ae:	e6fe      	b.n	8000fae <__aeabi_fsub+0x5e>
 80011b0:	2400      	movs	r4, #0
 80011b2:	2200      	movs	r2, #0
 80011b4:	2700      	movs	r7, #0
 80011b6:	e716      	b.n	8000fe6 <__aeabi_fsub+0x96>
 80011b8:	0005      	movs	r5, r0
 80011ba:	e7af      	b.n	800111c <__aeabi_fsub+0x1cc>
 80011bc:	0032      	movs	r2, r6
 80011be:	4643      	mov	r3, r8
 80011c0:	4641      	mov	r1, r8
 80011c2:	40da      	lsrs	r2, r3
 80011c4:	2320      	movs	r3, #32
 80011c6:	1a5b      	subs	r3, r3, r1
 80011c8:	409e      	lsls	r6, r3
 80011ca:	0030      	movs	r0, r6
 80011cc:	1e43      	subs	r3, r0, #1
 80011ce:	4198      	sbcs	r0, r3
 80011d0:	4310      	orrs	r0, r2
 80011d2:	e721      	b.n	8001018 <__aeabi_fsub+0xc8>
 80011d4:	2d00      	cmp	r5, #0
 80011d6:	d1a7      	bne.n	8001128 <__aeabi_fsub+0x1d8>
 80011d8:	4663      	mov	r3, ip
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d059      	beq.n	8001292 <__aeabi_fsub+0x342>
 80011de:	2200      	movs	r2, #0
 80011e0:	2e00      	cmp	r6, #0
 80011e2:	d100      	bne.n	80011e6 <__aeabi_fsub+0x296>
 80011e4:	e6ff      	b.n	8000fe6 <__aeabi_fsub+0x96>
 80011e6:	0030      	movs	r0, r6
 80011e8:	4460      	add	r0, ip
 80011ea:	0143      	lsls	r3, r0, #5
 80011ec:	d592      	bpl.n	8001114 <__aeabi_fsub+0x1c4>
 80011ee:	4b2a      	ldr	r3, [pc, #168]	; (8001298 <__aeabi_fsub+0x348>)
 80011f0:	3501      	adds	r5, #1
 80011f2:	4018      	ands	r0, r3
 80011f4:	e78e      	b.n	8001114 <__aeabi_fsub+0x1c4>
 80011f6:	4663      	mov	r3, ip
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d047      	beq.n	800128c <__aeabi_fsub+0x33c>
 80011fc:	1e4b      	subs	r3, r1, #1
 80011fe:	2901      	cmp	r1, #1
 8001200:	d015      	beq.n	800122e <__aeabi_fsub+0x2de>
 8001202:	29ff      	cmp	r1, #255	; 0xff
 8001204:	d02b      	beq.n	800125e <__aeabi_fsub+0x30e>
 8001206:	0019      	movs	r1, r3
 8001208:	e74e      	b.n	80010a8 <__aeabi_fsub+0x158>
 800120a:	000c      	movs	r4, r1
 800120c:	464b      	mov	r3, r9
 800120e:	003d      	movs	r5, r7
 8001210:	e784      	b.n	800111c <__aeabi_fsub+0x1cc>
 8001212:	4662      	mov	r2, ip
 8001214:	2a00      	cmp	r2, #0
 8001216:	d18b      	bne.n	8001130 <__aeabi_fsub+0x1e0>
 8001218:	2e00      	cmp	r6, #0
 800121a:	d192      	bne.n	8001142 <__aeabi_fsub+0x1f2>
 800121c:	2780      	movs	r7, #128	; 0x80
 800121e:	2400      	movs	r4, #0
 8001220:	22ff      	movs	r2, #255	; 0xff
 8001222:	03ff      	lsls	r7, r7, #15
 8001224:	e6df      	b.n	8000fe6 <__aeabi_fsub+0x96>
 8001226:	4663      	mov	r3, ip
 8001228:	000c      	movs	r4, r1
 800122a:	1af7      	subs	r7, r6, r3
 800122c:	e6bf      	b.n	8000fae <__aeabi_fsub+0x5e>
 800122e:	0030      	movs	r0, r6
 8001230:	4460      	add	r0, ip
 8001232:	2501      	movs	r5, #1
 8001234:	0143      	lsls	r3, r0, #5
 8001236:	d400      	bmi.n	800123a <__aeabi_fsub+0x2ea>
 8001238:	e76c      	b.n	8001114 <__aeabi_fsub+0x1c4>
 800123a:	2502      	movs	r5, #2
 800123c:	e6f2      	b.n	8001024 <__aeabi_fsub+0xd4>
 800123e:	4663      	mov	r3, ip
 8001240:	2501      	movs	r5, #1
 8001242:	1b98      	subs	r0, r3, r6
 8001244:	e6ae      	b.n	8000fa4 <__aeabi_fsub+0x54>
 8001246:	2320      	movs	r3, #32
 8001248:	4664      	mov	r4, ip
 800124a:	4660      	mov	r0, ip
 800124c:	40fc      	lsrs	r4, r7
 800124e:	1bdf      	subs	r7, r3, r7
 8001250:	40b8      	lsls	r0, r7
 8001252:	1e43      	subs	r3, r0, #1
 8001254:	4198      	sbcs	r0, r3
 8001256:	4320      	orrs	r0, r4
 8001258:	e79f      	b.n	800119a <__aeabi_fsub+0x24a>
 800125a:	0005      	movs	r5, r0
 800125c:	e75e      	b.n	800111c <__aeabi_fsub+0x1cc>
 800125e:	464b      	mov	r3, r9
 8001260:	e771      	b.n	8001146 <__aeabi_fsub+0x1f6>
 8001262:	2320      	movs	r3, #32
 8001264:	4665      	mov	r5, ip
 8001266:	4660      	mov	r0, ip
 8001268:	40cd      	lsrs	r5, r1
 800126a:	1a59      	subs	r1, r3, r1
 800126c:	4088      	lsls	r0, r1
 800126e:	1e43      	subs	r3, r0, #1
 8001270:	4198      	sbcs	r0, r3
 8001272:	4328      	orrs	r0, r5
 8001274:	e71c      	b.n	80010b0 <__aeabi_fsub+0x160>
 8001276:	4663      	mov	r3, ip
 8001278:	000c      	movs	r4, r1
 800127a:	2501      	movs	r5, #1
 800127c:	1af0      	subs	r0, r6, r3
 800127e:	e691      	b.n	8000fa4 <__aeabi_fsub+0x54>
 8001280:	2e00      	cmp	r6, #0
 8001282:	d095      	beq.n	80011b0 <__aeabi_fsub+0x260>
 8001284:	000c      	movs	r4, r1
 8001286:	464f      	mov	r7, r9
 8001288:	2200      	movs	r2, #0
 800128a:	e6ac      	b.n	8000fe6 <__aeabi_fsub+0x96>
 800128c:	464b      	mov	r3, r9
 800128e:	000d      	movs	r5, r1
 8001290:	e744      	b.n	800111c <__aeabi_fsub+0x1cc>
 8001292:	464f      	mov	r7, r9
 8001294:	2200      	movs	r2, #0
 8001296:	e6a6      	b.n	8000fe6 <__aeabi_fsub+0x96>
 8001298:	fbffffff 	.word	0xfbffffff
 800129c:	7dffffff 	.word	0x7dffffff
 80012a0:	2800      	cmp	r0, #0
 80012a2:	d000      	beq.n	80012a6 <__aeabi_fsub+0x356>
 80012a4:	e736      	b.n	8001114 <__aeabi_fsub+0x1c4>
 80012a6:	2400      	movs	r4, #0
 80012a8:	2700      	movs	r7, #0
 80012aa:	e69c      	b.n	8000fe6 <__aeabi_fsub+0x96>

080012ac <__aeabi_fcmpun>:
 80012ac:	0243      	lsls	r3, r0, #9
 80012ae:	024a      	lsls	r2, r1, #9
 80012b0:	0040      	lsls	r0, r0, #1
 80012b2:	0049      	lsls	r1, r1, #1
 80012b4:	0a5b      	lsrs	r3, r3, #9
 80012b6:	0a52      	lsrs	r2, r2, #9
 80012b8:	0e09      	lsrs	r1, r1, #24
 80012ba:	0e00      	lsrs	r0, r0, #24
 80012bc:	28ff      	cmp	r0, #255	; 0xff
 80012be:	d006      	beq.n	80012ce <__aeabi_fcmpun+0x22>
 80012c0:	2000      	movs	r0, #0
 80012c2:	29ff      	cmp	r1, #255	; 0xff
 80012c4:	d102      	bne.n	80012cc <__aeabi_fcmpun+0x20>
 80012c6:	1e53      	subs	r3, r2, #1
 80012c8:	419a      	sbcs	r2, r3
 80012ca:	0010      	movs	r0, r2
 80012cc:	4770      	bx	lr
 80012ce:	38fe      	subs	r0, #254	; 0xfe
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d1fb      	bne.n	80012cc <__aeabi_fcmpun+0x20>
 80012d4:	e7f4      	b.n	80012c0 <__aeabi_fcmpun+0x14>
 80012d6:	46c0      	nop			; (mov r8, r8)

080012d8 <__aeabi_f2iz>:
 80012d8:	0241      	lsls	r1, r0, #9
 80012da:	0042      	lsls	r2, r0, #1
 80012dc:	0fc3      	lsrs	r3, r0, #31
 80012de:	0a49      	lsrs	r1, r1, #9
 80012e0:	2000      	movs	r0, #0
 80012e2:	0e12      	lsrs	r2, r2, #24
 80012e4:	2a7e      	cmp	r2, #126	; 0x7e
 80012e6:	dd03      	ble.n	80012f0 <__aeabi_f2iz+0x18>
 80012e8:	2a9d      	cmp	r2, #157	; 0x9d
 80012ea:	dd02      	ble.n	80012f2 <__aeabi_f2iz+0x1a>
 80012ec:	4a09      	ldr	r2, [pc, #36]	; (8001314 <__aeabi_f2iz+0x3c>)
 80012ee:	1898      	adds	r0, r3, r2
 80012f0:	4770      	bx	lr
 80012f2:	2080      	movs	r0, #128	; 0x80
 80012f4:	0400      	lsls	r0, r0, #16
 80012f6:	4301      	orrs	r1, r0
 80012f8:	2a95      	cmp	r2, #149	; 0x95
 80012fa:	dc07      	bgt.n	800130c <__aeabi_f2iz+0x34>
 80012fc:	2096      	movs	r0, #150	; 0x96
 80012fe:	1a82      	subs	r2, r0, r2
 8001300:	40d1      	lsrs	r1, r2
 8001302:	4248      	negs	r0, r1
 8001304:	2b00      	cmp	r3, #0
 8001306:	d1f3      	bne.n	80012f0 <__aeabi_f2iz+0x18>
 8001308:	0008      	movs	r0, r1
 800130a:	e7f1      	b.n	80012f0 <__aeabi_f2iz+0x18>
 800130c:	3a96      	subs	r2, #150	; 0x96
 800130e:	4091      	lsls	r1, r2
 8001310:	e7f7      	b.n	8001302 <__aeabi_f2iz+0x2a>
 8001312:	46c0      	nop			; (mov r8, r8)
 8001314:	7fffffff 	.word	0x7fffffff

08001318 <__aeabi_i2f>:
 8001318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800131a:	2800      	cmp	r0, #0
 800131c:	d013      	beq.n	8001346 <__aeabi_i2f+0x2e>
 800131e:	17c3      	asrs	r3, r0, #31
 8001320:	18c6      	adds	r6, r0, r3
 8001322:	405e      	eors	r6, r3
 8001324:	0fc4      	lsrs	r4, r0, #31
 8001326:	0030      	movs	r0, r6
 8001328:	f001 fefa 	bl	8003120 <__clzsi2>
 800132c:	239e      	movs	r3, #158	; 0x9e
 800132e:	0005      	movs	r5, r0
 8001330:	1a1b      	subs	r3, r3, r0
 8001332:	2b96      	cmp	r3, #150	; 0x96
 8001334:	dc0f      	bgt.n	8001356 <__aeabi_i2f+0x3e>
 8001336:	2808      	cmp	r0, #8
 8001338:	dd01      	ble.n	800133e <__aeabi_i2f+0x26>
 800133a:	3d08      	subs	r5, #8
 800133c:	40ae      	lsls	r6, r5
 800133e:	0276      	lsls	r6, r6, #9
 8001340:	0a76      	lsrs	r6, r6, #9
 8001342:	b2d8      	uxtb	r0, r3
 8001344:	e002      	b.n	800134c <__aeabi_i2f+0x34>
 8001346:	2400      	movs	r4, #0
 8001348:	2000      	movs	r0, #0
 800134a:	2600      	movs	r6, #0
 800134c:	05c0      	lsls	r0, r0, #23
 800134e:	4330      	orrs	r0, r6
 8001350:	07e4      	lsls	r4, r4, #31
 8001352:	4320      	orrs	r0, r4
 8001354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001356:	2b99      	cmp	r3, #153	; 0x99
 8001358:	dd0c      	ble.n	8001374 <__aeabi_i2f+0x5c>
 800135a:	2205      	movs	r2, #5
 800135c:	0031      	movs	r1, r6
 800135e:	1a12      	subs	r2, r2, r0
 8001360:	40d1      	lsrs	r1, r2
 8001362:	000a      	movs	r2, r1
 8001364:	0001      	movs	r1, r0
 8001366:	0030      	movs	r0, r6
 8001368:	311b      	adds	r1, #27
 800136a:	4088      	lsls	r0, r1
 800136c:	1e41      	subs	r1, r0, #1
 800136e:	4188      	sbcs	r0, r1
 8001370:	4302      	orrs	r2, r0
 8001372:	0016      	movs	r6, r2
 8001374:	2d05      	cmp	r5, #5
 8001376:	dc12      	bgt.n	800139e <__aeabi_i2f+0x86>
 8001378:	0031      	movs	r1, r6
 800137a:	4f0d      	ldr	r7, [pc, #52]	; (80013b0 <__aeabi_i2f+0x98>)
 800137c:	4039      	ands	r1, r7
 800137e:	0772      	lsls	r2, r6, #29
 8001380:	d009      	beq.n	8001396 <__aeabi_i2f+0x7e>
 8001382:	200f      	movs	r0, #15
 8001384:	4030      	ands	r0, r6
 8001386:	2804      	cmp	r0, #4
 8001388:	d005      	beq.n	8001396 <__aeabi_i2f+0x7e>
 800138a:	3104      	adds	r1, #4
 800138c:	014a      	lsls	r2, r1, #5
 800138e:	d502      	bpl.n	8001396 <__aeabi_i2f+0x7e>
 8001390:	239f      	movs	r3, #159	; 0x9f
 8001392:	4039      	ands	r1, r7
 8001394:	1b5b      	subs	r3, r3, r5
 8001396:	0189      	lsls	r1, r1, #6
 8001398:	0a4e      	lsrs	r6, r1, #9
 800139a:	b2d8      	uxtb	r0, r3
 800139c:	e7d6      	b.n	800134c <__aeabi_i2f+0x34>
 800139e:	1f6a      	subs	r2, r5, #5
 80013a0:	4096      	lsls	r6, r2
 80013a2:	0031      	movs	r1, r6
 80013a4:	4f02      	ldr	r7, [pc, #8]	; (80013b0 <__aeabi_i2f+0x98>)
 80013a6:	4039      	ands	r1, r7
 80013a8:	0772      	lsls	r2, r6, #29
 80013aa:	d0f4      	beq.n	8001396 <__aeabi_i2f+0x7e>
 80013ac:	e7e9      	b.n	8001382 <__aeabi_i2f+0x6a>
 80013ae:	46c0      	nop			; (mov r8, r8)
 80013b0:	fbffffff 	.word	0xfbffffff

080013b4 <__aeabi_dadd>:
 80013b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013b6:	464f      	mov	r7, r9
 80013b8:	4646      	mov	r6, r8
 80013ba:	46d6      	mov	lr, sl
 80013bc:	000d      	movs	r5, r1
 80013be:	0004      	movs	r4, r0
 80013c0:	b5c0      	push	{r6, r7, lr}
 80013c2:	001f      	movs	r7, r3
 80013c4:	0011      	movs	r1, r2
 80013c6:	0328      	lsls	r0, r5, #12
 80013c8:	0f62      	lsrs	r2, r4, #29
 80013ca:	0a40      	lsrs	r0, r0, #9
 80013cc:	4310      	orrs	r0, r2
 80013ce:	007a      	lsls	r2, r7, #1
 80013d0:	0d52      	lsrs	r2, r2, #21
 80013d2:	00e3      	lsls	r3, r4, #3
 80013d4:	033c      	lsls	r4, r7, #12
 80013d6:	4691      	mov	r9, r2
 80013d8:	0a64      	lsrs	r4, r4, #9
 80013da:	0ffa      	lsrs	r2, r7, #31
 80013dc:	0f4f      	lsrs	r7, r1, #29
 80013de:	006e      	lsls	r6, r5, #1
 80013e0:	4327      	orrs	r7, r4
 80013e2:	4692      	mov	sl, r2
 80013e4:	46b8      	mov	r8, r7
 80013e6:	0d76      	lsrs	r6, r6, #21
 80013e8:	0fed      	lsrs	r5, r5, #31
 80013ea:	00c9      	lsls	r1, r1, #3
 80013ec:	4295      	cmp	r5, r2
 80013ee:	d100      	bne.n	80013f2 <__aeabi_dadd+0x3e>
 80013f0:	e099      	b.n	8001526 <__aeabi_dadd+0x172>
 80013f2:	464c      	mov	r4, r9
 80013f4:	1b34      	subs	r4, r6, r4
 80013f6:	46a4      	mov	ip, r4
 80013f8:	2c00      	cmp	r4, #0
 80013fa:	dc00      	bgt.n	80013fe <__aeabi_dadd+0x4a>
 80013fc:	e07c      	b.n	80014f8 <__aeabi_dadd+0x144>
 80013fe:	464a      	mov	r2, r9
 8001400:	2a00      	cmp	r2, #0
 8001402:	d100      	bne.n	8001406 <__aeabi_dadd+0x52>
 8001404:	e0b8      	b.n	8001578 <__aeabi_dadd+0x1c4>
 8001406:	4ac5      	ldr	r2, [pc, #788]	; (800171c <__aeabi_dadd+0x368>)
 8001408:	4296      	cmp	r6, r2
 800140a:	d100      	bne.n	800140e <__aeabi_dadd+0x5a>
 800140c:	e11c      	b.n	8001648 <__aeabi_dadd+0x294>
 800140e:	2280      	movs	r2, #128	; 0x80
 8001410:	003c      	movs	r4, r7
 8001412:	0412      	lsls	r2, r2, #16
 8001414:	4314      	orrs	r4, r2
 8001416:	46a0      	mov	r8, r4
 8001418:	4662      	mov	r2, ip
 800141a:	2a38      	cmp	r2, #56	; 0x38
 800141c:	dd00      	ble.n	8001420 <__aeabi_dadd+0x6c>
 800141e:	e161      	b.n	80016e4 <__aeabi_dadd+0x330>
 8001420:	2a1f      	cmp	r2, #31
 8001422:	dd00      	ble.n	8001426 <__aeabi_dadd+0x72>
 8001424:	e1cc      	b.n	80017c0 <__aeabi_dadd+0x40c>
 8001426:	4664      	mov	r4, ip
 8001428:	2220      	movs	r2, #32
 800142a:	1b12      	subs	r2, r2, r4
 800142c:	4644      	mov	r4, r8
 800142e:	4094      	lsls	r4, r2
 8001430:	000f      	movs	r7, r1
 8001432:	46a1      	mov	r9, r4
 8001434:	4664      	mov	r4, ip
 8001436:	4091      	lsls	r1, r2
 8001438:	40e7      	lsrs	r7, r4
 800143a:	464c      	mov	r4, r9
 800143c:	1e4a      	subs	r2, r1, #1
 800143e:	4191      	sbcs	r1, r2
 8001440:	433c      	orrs	r4, r7
 8001442:	4642      	mov	r2, r8
 8001444:	4321      	orrs	r1, r4
 8001446:	4664      	mov	r4, ip
 8001448:	40e2      	lsrs	r2, r4
 800144a:	1a80      	subs	r0, r0, r2
 800144c:	1a5c      	subs	r4, r3, r1
 800144e:	42a3      	cmp	r3, r4
 8001450:	419b      	sbcs	r3, r3
 8001452:	425f      	negs	r7, r3
 8001454:	1bc7      	subs	r7, r0, r7
 8001456:	023b      	lsls	r3, r7, #8
 8001458:	d400      	bmi.n	800145c <__aeabi_dadd+0xa8>
 800145a:	e0d0      	b.n	80015fe <__aeabi_dadd+0x24a>
 800145c:	027f      	lsls	r7, r7, #9
 800145e:	0a7f      	lsrs	r7, r7, #9
 8001460:	2f00      	cmp	r7, #0
 8001462:	d100      	bne.n	8001466 <__aeabi_dadd+0xb2>
 8001464:	e0ff      	b.n	8001666 <__aeabi_dadd+0x2b2>
 8001466:	0038      	movs	r0, r7
 8001468:	f001 fe5a 	bl	8003120 <__clzsi2>
 800146c:	0001      	movs	r1, r0
 800146e:	3908      	subs	r1, #8
 8001470:	2320      	movs	r3, #32
 8001472:	0022      	movs	r2, r4
 8001474:	1a5b      	subs	r3, r3, r1
 8001476:	408f      	lsls	r7, r1
 8001478:	40da      	lsrs	r2, r3
 800147a:	408c      	lsls	r4, r1
 800147c:	4317      	orrs	r7, r2
 800147e:	42b1      	cmp	r1, r6
 8001480:	da00      	bge.n	8001484 <__aeabi_dadd+0xd0>
 8001482:	e0ff      	b.n	8001684 <__aeabi_dadd+0x2d0>
 8001484:	1b89      	subs	r1, r1, r6
 8001486:	1c4b      	adds	r3, r1, #1
 8001488:	2b1f      	cmp	r3, #31
 800148a:	dd00      	ble.n	800148e <__aeabi_dadd+0xda>
 800148c:	e0a8      	b.n	80015e0 <__aeabi_dadd+0x22c>
 800148e:	2220      	movs	r2, #32
 8001490:	0039      	movs	r1, r7
 8001492:	1ad2      	subs	r2, r2, r3
 8001494:	0020      	movs	r0, r4
 8001496:	4094      	lsls	r4, r2
 8001498:	4091      	lsls	r1, r2
 800149a:	40d8      	lsrs	r0, r3
 800149c:	1e62      	subs	r2, r4, #1
 800149e:	4194      	sbcs	r4, r2
 80014a0:	40df      	lsrs	r7, r3
 80014a2:	2600      	movs	r6, #0
 80014a4:	4301      	orrs	r1, r0
 80014a6:	430c      	orrs	r4, r1
 80014a8:	0763      	lsls	r3, r4, #29
 80014aa:	d009      	beq.n	80014c0 <__aeabi_dadd+0x10c>
 80014ac:	230f      	movs	r3, #15
 80014ae:	4023      	ands	r3, r4
 80014b0:	2b04      	cmp	r3, #4
 80014b2:	d005      	beq.n	80014c0 <__aeabi_dadd+0x10c>
 80014b4:	1d23      	adds	r3, r4, #4
 80014b6:	42a3      	cmp	r3, r4
 80014b8:	41a4      	sbcs	r4, r4
 80014ba:	4264      	negs	r4, r4
 80014bc:	193f      	adds	r7, r7, r4
 80014be:	001c      	movs	r4, r3
 80014c0:	023b      	lsls	r3, r7, #8
 80014c2:	d400      	bmi.n	80014c6 <__aeabi_dadd+0x112>
 80014c4:	e09e      	b.n	8001604 <__aeabi_dadd+0x250>
 80014c6:	4b95      	ldr	r3, [pc, #596]	; (800171c <__aeabi_dadd+0x368>)
 80014c8:	3601      	adds	r6, #1
 80014ca:	429e      	cmp	r6, r3
 80014cc:	d100      	bne.n	80014d0 <__aeabi_dadd+0x11c>
 80014ce:	e0b7      	b.n	8001640 <__aeabi_dadd+0x28c>
 80014d0:	4a93      	ldr	r2, [pc, #588]	; (8001720 <__aeabi_dadd+0x36c>)
 80014d2:	08e4      	lsrs	r4, r4, #3
 80014d4:	4017      	ands	r7, r2
 80014d6:	077b      	lsls	r3, r7, #29
 80014d8:	0571      	lsls	r1, r6, #21
 80014da:	027f      	lsls	r7, r7, #9
 80014dc:	4323      	orrs	r3, r4
 80014de:	0b3f      	lsrs	r7, r7, #12
 80014e0:	0d4a      	lsrs	r2, r1, #21
 80014e2:	0512      	lsls	r2, r2, #20
 80014e4:	433a      	orrs	r2, r7
 80014e6:	07ed      	lsls	r5, r5, #31
 80014e8:	432a      	orrs	r2, r5
 80014ea:	0018      	movs	r0, r3
 80014ec:	0011      	movs	r1, r2
 80014ee:	bce0      	pop	{r5, r6, r7}
 80014f0:	46ba      	mov	sl, r7
 80014f2:	46b1      	mov	r9, r6
 80014f4:	46a8      	mov	r8, r5
 80014f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014f8:	2c00      	cmp	r4, #0
 80014fa:	d04b      	beq.n	8001594 <__aeabi_dadd+0x1e0>
 80014fc:	464c      	mov	r4, r9
 80014fe:	1ba4      	subs	r4, r4, r6
 8001500:	46a4      	mov	ip, r4
 8001502:	2e00      	cmp	r6, #0
 8001504:	d000      	beq.n	8001508 <__aeabi_dadd+0x154>
 8001506:	e123      	b.n	8001750 <__aeabi_dadd+0x39c>
 8001508:	0004      	movs	r4, r0
 800150a:	431c      	orrs	r4, r3
 800150c:	d100      	bne.n	8001510 <__aeabi_dadd+0x15c>
 800150e:	e1af      	b.n	8001870 <__aeabi_dadd+0x4bc>
 8001510:	4662      	mov	r2, ip
 8001512:	1e54      	subs	r4, r2, #1
 8001514:	2a01      	cmp	r2, #1
 8001516:	d100      	bne.n	800151a <__aeabi_dadd+0x166>
 8001518:	e215      	b.n	8001946 <__aeabi_dadd+0x592>
 800151a:	4d80      	ldr	r5, [pc, #512]	; (800171c <__aeabi_dadd+0x368>)
 800151c:	45ac      	cmp	ip, r5
 800151e:	d100      	bne.n	8001522 <__aeabi_dadd+0x16e>
 8001520:	e1c8      	b.n	80018b4 <__aeabi_dadd+0x500>
 8001522:	46a4      	mov	ip, r4
 8001524:	e11b      	b.n	800175e <__aeabi_dadd+0x3aa>
 8001526:	464a      	mov	r2, r9
 8001528:	1ab2      	subs	r2, r6, r2
 800152a:	4694      	mov	ip, r2
 800152c:	2a00      	cmp	r2, #0
 800152e:	dc00      	bgt.n	8001532 <__aeabi_dadd+0x17e>
 8001530:	e0ac      	b.n	800168c <__aeabi_dadd+0x2d8>
 8001532:	464a      	mov	r2, r9
 8001534:	2a00      	cmp	r2, #0
 8001536:	d043      	beq.n	80015c0 <__aeabi_dadd+0x20c>
 8001538:	4a78      	ldr	r2, [pc, #480]	; (800171c <__aeabi_dadd+0x368>)
 800153a:	4296      	cmp	r6, r2
 800153c:	d100      	bne.n	8001540 <__aeabi_dadd+0x18c>
 800153e:	e1af      	b.n	80018a0 <__aeabi_dadd+0x4ec>
 8001540:	2280      	movs	r2, #128	; 0x80
 8001542:	003c      	movs	r4, r7
 8001544:	0412      	lsls	r2, r2, #16
 8001546:	4314      	orrs	r4, r2
 8001548:	46a0      	mov	r8, r4
 800154a:	4662      	mov	r2, ip
 800154c:	2a38      	cmp	r2, #56	; 0x38
 800154e:	dc67      	bgt.n	8001620 <__aeabi_dadd+0x26c>
 8001550:	2a1f      	cmp	r2, #31
 8001552:	dc00      	bgt.n	8001556 <__aeabi_dadd+0x1a2>
 8001554:	e15f      	b.n	8001816 <__aeabi_dadd+0x462>
 8001556:	4647      	mov	r7, r8
 8001558:	3a20      	subs	r2, #32
 800155a:	40d7      	lsrs	r7, r2
 800155c:	4662      	mov	r2, ip
 800155e:	2a20      	cmp	r2, #32
 8001560:	d005      	beq.n	800156e <__aeabi_dadd+0x1ba>
 8001562:	4664      	mov	r4, ip
 8001564:	2240      	movs	r2, #64	; 0x40
 8001566:	1b12      	subs	r2, r2, r4
 8001568:	4644      	mov	r4, r8
 800156a:	4094      	lsls	r4, r2
 800156c:	4321      	orrs	r1, r4
 800156e:	1e4a      	subs	r2, r1, #1
 8001570:	4191      	sbcs	r1, r2
 8001572:	000c      	movs	r4, r1
 8001574:	433c      	orrs	r4, r7
 8001576:	e057      	b.n	8001628 <__aeabi_dadd+0x274>
 8001578:	003a      	movs	r2, r7
 800157a:	430a      	orrs	r2, r1
 800157c:	d100      	bne.n	8001580 <__aeabi_dadd+0x1cc>
 800157e:	e105      	b.n	800178c <__aeabi_dadd+0x3d8>
 8001580:	0022      	movs	r2, r4
 8001582:	3a01      	subs	r2, #1
 8001584:	2c01      	cmp	r4, #1
 8001586:	d100      	bne.n	800158a <__aeabi_dadd+0x1d6>
 8001588:	e182      	b.n	8001890 <__aeabi_dadd+0x4dc>
 800158a:	4c64      	ldr	r4, [pc, #400]	; (800171c <__aeabi_dadd+0x368>)
 800158c:	45a4      	cmp	ip, r4
 800158e:	d05b      	beq.n	8001648 <__aeabi_dadd+0x294>
 8001590:	4694      	mov	ip, r2
 8001592:	e741      	b.n	8001418 <__aeabi_dadd+0x64>
 8001594:	4c63      	ldr	r4, [pc, #396]	; (8001724 <__aeabi_dadd+0x370>)
 8001596:	1c77      	adds	r7, r6, #1
 8001598:	4227      	tst	r7, r4
 800159a:	d000      	beq.n	800159e <__aeabi_dadd+0x1ea>
 800159c:	e0c4      	b.n	8001728 <__aeabi_dadd+0x374>
 800159e:	0004      	movs	r4, r0
 80015a0:	431c      	orrs	r4, r3
 80015a2:	2e00      	cmp	r6, #0
 80015a4:	d000      	beq.n	80015a8 <__aeabi_dadd+0x1f4>
 80015a6:	e169      	b.n	800187c <__aeabi_dadd+0x4c8>
 80015a8:	2c00      	cmp	r4, #0
 80015aa:	d100      	bne.n	80015ae <__aeabi_dadd+0x1fa>
 80015ac:	e1bf      	b.n	800192e <__aeabi_dadd+0x57a>
 80015ae:	4644      	mov	r4, r8
 80015b0:	430c      	orrs	r4, r1
 80015b2:	d000      	beq.n	80015b6 <__aeabi_dadd+0x202>
 80015b4:	e1d0      	b.n	8001958 <__aeabi_dadd+0x5a4>
 80015b6:	0742      	lsls	r2, r0, #29
 80015b8:	08db      	lsrs	r3, r3, #3
 80015ba:	4313      	orrs	r3, r2
 80015bc:	08c0      	lsrs	r0, r0, #3
 80015be:	e029      	b.n	8001614 <__aeabi_dadd+0x260>
 80015c0:	003a      	movs	r2, r7
 80015c2:	430a      	orrs	r2, r1
 80015c4:	d100      	bne.n	80015c8 <__aeabi_dadd+0x214>
 80015c6:	e170      	b.n	80018aa <__aeabi_dadd+0x4f6>
 80015c8:	4662      	mov	r2, ip
 80015ca:	4664      	mov	r4, ip
 80015cc:	3a01      	subs	r2, #1
 80015ce:	2c01      	cmp	r4, #1
 80015d0:	d100      	bne.n	80015d4 <__aeabi_dadd+0x220>
 80015d2:	e0e0      	b.n	8001796 <__aeabi_dadd+0x3e2>
 80015d4:	4c51      	ldr	r4, [pc, #324]	; (800171c <__aeabi_dadd+0x368>)
 80015d6:	45a4      	cmp	ip, r4
 80015d8:	d100      	bne.n	80015dc <__aeabi_dadd+0x228>
 80015da:	e161      	b.n	80018a0 <__aeabi_dadd+0x4ec>
 80015dc:	4694      	mov	ip, r2
 80015de:	e7b4      	b.n	800154a <__aeabi_dadd+0x196>
 80015e0:	003a      	movs	r2, r7
 80015e2:	391f      	subs	r1, #31
 80015e4:	40ca      	lsrs	r2, r1
 80015e6:	0011      	movs	r1, r2
 80015e8:	2b20      	cmp	r3, #32
 80015ea:	d003      	beq.n	80015f4 <__aeabi_dadd+0x240>
 80015ec:	2240      	movs	r2, #64	; 0x40
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	409f      	lsls	r7, r3
 80015f2:	433c      	orrs	r4, r7
 80015f4:	1e63      	subs	r3, r4, #1
 80015f6:	419c      	sbcs	r4, r3
 80015f8:	2700      	movs	r7, #0
 80015fa:	2600      	movs	r6, #0
 80015fc:	430c      	orrs	r4, r1
 80015fe:	0763      	lsls	r3, r4, #29
 8001600:	d000      	beq.n	8001604 <__aeabi_dadd+0x250>
 8001602:	e753      	b.n	80014ac <__aeabi_dadd+0xf8>
 8001604:	46b4      	mov	ip, r6
 8001606:	08e4      	lsrs	r4, r4, #3
 8001608:	077b      	lsls	r3, r7, #29
 800160a:	4323      	orrs	r3, r4
 800160c:	08f8      	lsrs	r0, r7, #3
 800160e:	4a43      	ldr	r2, [pc, #268]	; (800171c <__aeabi_dadd+0x368>)
 8001610:	4594      	cmp	ip, r2
 8001612:	d01d      	beq.n	8001650 <__aeabi_dadd+0x29c>
 8001614:	4662      	mov	r2, ip
 8001616:	0307      	lsls	r7, r0, #12
 8001618:	0552      	lsls	r2, r2, #21
 800161a:	0b3f      	lsrs	r7, r7, #12
 800161c:	0d52      	lsrs	r2, r2, #21
 800161e:	e760      	b.n	80014e2 <__aeabi_dadd+0x12e>
 8001620:	4644      	mov	r4, r8
 8001622:	430c      	orrs	r4, r1
 8001624:	1e62      	subs	r2, r4, #1
 8001626:	4194      	sbcs	r4, r2
 8001628:	18e4      	adds	r4, r4, r3
 800162a:	429c      	cmp	r4, r3
 800162c:	419b      	sbcs	r3, r3
 800162e:	425f      	negs	r7, r3
 8001630:	183f      	adds	r7, r7, r0
 8001632:	023b      	lsls	r3, r7, #8
 8001634:	d5e3      	bpl.n	80015fe <__aeabi_dadd+0x24a>
 8001636:	4b39      	ldr	r3, [pc, #228]	; (800171c <__aeabi_dadd+0x368>)
 8001638:	3601      	adds	r6, #1
 800163a:	429e      	cmp	r6, r3
 800163c:	d000      	beq.n	8001640 <__aeabi_dadd+0x28c>
 800163e:	e0b5      	b.n	80017ac <__aeabi_dadd+0x3f8>
 8001640:	0032      	movs	r2, r6
 8001642:	2700      	movs	r7, #0
 8001644:	2300      	movs	r3, #0
 8001646:	e74c      	b.n	80014e2 <__aeabi_dadd+0x12e>
 8001648:	0742      	lsls	r2, r0, #29
 800164a:	08db      	lsrs	r3, r3, #3
 800164c:	4313      	orrs	r3, r2
 800164e:	08c0      	lsrs	r0, r0, #3
 8001650:	001a      	movs	r2, r3
 8001652:	4302      	orrs	r2, r0
 8001654:	d100      	bne.n	8001658 <__aeabi_dadd+0x2a4>
 8001656:	e1e1      	b.n	8001a1c <__aeabi_dadd+0x668>
 8001658:	2780      	movs	r7, #128	; 0x80
 800165a:	033f      	lsls	r7, r7, #12
 800165c:	4307      	orrs	r7, r0
 800165e:	033f      	lsls	r7, r7, #12
 8001660:	4a2e      	ldr	r2, [pc, #184]	; (800171c <__aeabi_dadd+0x368>)
 8001662:	0b3f      	lsrs	r7, r7, #12
 8001664:	e73d      	b.n	80014e2 <__aeabi_dadd+0x12e>
 8001666:	0020      	movs	r0, r4
 8001668:	f001 fd5a 	bl	8003120 <__clzsi2>
 800166c:	0001      	movs	r1, r0
 800166e:	3118      	adds	r1, #24
 8001670:	291f      	cmp	r1, #31
 8001672:	dc00      	bgt.n	8001676 <__aeabi_dadd+0x2c2>
 8001674:	e6fc      	b.n	8001470 <__aeabi_dadd+0xbc>
 8001676:	3808      	subs	r0, #8
 8001678:	4084      	lsls	r4, r0
 800167a:	0027      	movs	r7, r4
 800167c:	2400      	movs	r4, #0
 800167e:	42b1      	cmp	r1, r6
 8001680:	db00      	blt.n	8001684 <__aeabi_dadd+0x2d0>
 8001682:	e6ff      	b.n	8001484 <__aeabi_dadd+0xd0>
 8001684:	4a26      	ldr	r2, [pc, #152]	; (8001720 <__aeabi_dadd+0x36c>)
 8001686:	1a76      	subs	r6, r6, r1
 8001688:	4017      	ands	r7, r2
 800168a:	e70d      	b.n	80014a8 <__aeabi_dadd+0xf4>
 800168c:	2a00      	cmp	r2, #0
 800168e:	d02f      	beq.n	80016f0 <__aeabi_dadd+0x33c>
 8001690:	464a      	mov	r2, r9
 8001692:	1b92      	subs	r2, r2, r6
 8001694:	4694      	mov	ip, r2
 8001696:	2e00      	cmp	r6, #0
 8001698:	d100      	bne.n	800169c <__aeabi_dadd+0x2e8>
 800169a:	e0ad      	b.n	80017f8 <__aeabi_dadd+0x444>
 800169c:	4a1f      	ldr	r2, [pc, #124]	; (800171c <__aeabi_dadd+0x368>)
 800169e:	4591      	cmp	r9, r2
 80016a0:	d100      	bne.n	80016a4 <__aeabi_dadd+0x2f0>
 80016a2:	e10f      	b.n	80018c4 <__aeabi_dadd+0x510>
 80016a4:	2280      	movs	r2, #128	; 0x80
 80016a6:	0412      	lsls	r2, r2, #16
 80016a8:	4310      	orrs	r0, r2
 80016aa:	4662      	mov	r2, ip
 80016ac:	2a38      	cmp	r2, #56	; 0x38
 80016ae:	dd00      	ble.n	80016b2 <__aeabi_dadd+0x2fe>
 80016b0:	e10f      	b.n	80018d2 <__aeabi_dadd+0x51e>
 80016b2:	2a1f      	cmp	r2, #31
 80016b4:	dd00      	ble.n	80016b8 <__aeabi_dadd+0x304>
 80016b6:	e180      	b.n	80019ba <__aeabi_dadd+0x606>
 80016b8:	4664      	mov	r4, ip
 80016ba:	2220      	movs	r2, #32
 80016bc:	001e      	movs	r6, r3
 80016be:	1b12      	subs	r2, r2, r4
 80016c0:	4667      	mov	r7, ip
 80016c2:	0004      	movs	r4, r0
 80016c4:	4093      	lsls	r3, r2
 80016c6:	4094      	lsls	r4, r2
 80016c8:	40fe      	lsrs	r6, r7
 80016ca:	1e5a      	subs	r2, r3, #1
 80016cc:	4193      	sbcs	r3, r2
 80016ce:	40f8      	lsrs	r0, r7
 80016d0:	4334      	orrs	r4, r6
 80016d2:	431c      	orrs	r4, r3
 80016d4:	4480      	add	r8, r0
 80016d6:	1864      	adds	r4, r4, r1
 80016d8:	428c      	cmp	r4, r1
 80016da:	41bf      	sbcs	r7, r7
 80016dc:	427f      	negs	r7, r7
 80016de:	464e      	mov	r6, r9
 80016e0:	4447      	add	r7, r8
 80016e2:	e7a6      	b.n	8001632 <__aeabi_dadd+0x27e>
 80016e4:	4642      	mov	r2, r8
 80016e6:	430a      	orrs	r2, r1
 80016e8:	0011      	movs	r1, r2
 80016ea:	1e4a      	subs	r2, r1, #1
 80016ec:	4191      	sbcs	r1, r2
 80016ee:	e6ad      	b.n	800144c <__aeabi_dadd+0x98>
 80016f0:	4c0c      	ldr	r4, [pc, #48]	; (8001724 <__aeabi_dadd+0x370>)
 80016f2:	1c72      	adds	r2, r6, #1
 80016f4:	4222      	tst	r2, r4
 80016f6:	d000      	beq.n	80016fa <__aeabi_dadd+0x346>
 80016f8:	e0a1      	b.n	800183e <__aeabi_dadd+0x48a>
 80016fa:	0002      	movs	r2, r0
 80016fc:	431a      	orrs	r2, r3
 80016fe:	2e00      	cmp	r6, #0
 8001700:	d000      	beq.n	8001704 <__aeabi_dadd+0x350>
 8001702:	e0fa      	b.n	80018fa <__aeabi_dadd+0x546>
 8001704:	2a00      	cmp	r2, #0
 8001706:	d100      	bne.n	800170a <__aeabi_dadd+0x356>
 8001708:	e145      	b.n	8001996 <__aeabi_dadd+0x5e2>
 800170a:	003a      	movs	r2, r7
 800170c:	430a      	orrs	r2, r1
 800170e:	d000      	beq.n	8001712 <__aeabi_dadd+0x35e>
 8001710:	e146      	b.n	80019a0 <__aeabi_dadd+0x5ec>
 8001712:	0742      	lsls	r2, r0, #29
 8001714:	08db      	lsrs	r3, r3, #3
 8001716:	4313      	orrs	r3, r2
 8001718:	08c0      	lsrs	r0, r0, #3
 800171a:	e77b      	b.n	8001614 <__aeabi_dadd+0x260>
 800171c:	000007ff 	.word	0x000007ff
 8001720:	ff7fffff 	.word	0xff7fffff
 8001724:	000007fe 	.word	0x000007fe
 8001728:	4647      	mov	r7, r8
 800172a:	1a5c      	subs	r4, r3, r1
 800172c:	1bc2      	subs	r2, r0, r7
 800172e:	42a3      	cmp	r3, r4
 8001730:	41bf      	sbcs	r7, r7
 8001732:	427f      	negs	r7, r7
 8001734:	46b9      	mov	r9, r7
 8001736:	0017      	movs	r7, r2
 8001738:	464a      	mov	r2, r9
 800173a:	1abf      	subs	r7, r7, r2
 800173c:	023a      	lsls	r2, r7, #8
 800173e:	d500      	bpl.n	8001742 <__aeabi_dadd+0x38e>
 8001740:	e08d      	b.n	800185e <__aeabi_dadd+0x4aa>
 8001742:	0023      	movs	r3, r4
 8001744:	433b      	orrs	r3, r7
 8001746:	d000      	beq.n	800174a <__aeabi_dadd+0x396>
 8001748:	e68a      	b.n	8001460 <__aeabi_dadd+0xac>
 800174a:	2000      	movs	r0, #0
 800174c:	2500      	movs	r5, #0
 800174e:	e761      	b.n	8001614 <__aeabi_dadd+0x260>
 8001750:	4cb4      	ldr	r4, [pc, #720]	; (8001a24 <__aeabi_dadd+0x670>)
 8001752:	45a1      	cmp	r9, r4
 8001754:	d100      	bne.n	8001758 <__aeabi_dadd+0x3a4>
 8001756:	e0ad      	b.n	80018b4 <__aeabi_dadd+0x500>
 8001758:	2480      	movs	r4, #128	; 0x80
 800175a:	0424      	lsls	r4, r4, #16
 800175c:	4320      	orrs	r0, r4
 800175e:	4664      	mov	r4, ip
 8001760:	2c38      	cmp	r4, #56	; 0x38
 8001762:	dc3d      	bgt.n	80017e0 <__aeabi_dadd+0x42c>
 8001764:	4662      	mov	r2, ip
 8001766:	2c1f      	cmp	r4, #31
 8001768:	dd00      	ble.n	800176c <__aeabi_dadd+0x3b8>
 800176a:	e0b7      	b.n	80018dc <__aeabi_dadd+0x528>
 800176c:	2520      	movs	r5, #32
 800176e:	001e      	movs	r6, r3
 8001770:	1b2d      	subs	r5, r5, r4
 8001772:	0004      	movs	r4, r0
 8001774:	40ab      	lsls	r3, r5
 8001776:	40ac      	lsls	r4, r5
 8001778:	40d6      	lsrs	r6, r2
 800177a:	40d0      	lsrs	r0, r2
 800177c:	4642      	mov	r2, r8
 800177e:	1e5d      	subs	r5, r3, #1
 8001780:	41ab      	sbcs	r3, r5
 8001782:	4334      	orrs	r4, r6
 8001784:	1a12      	subs	r2, r2, r0
 8001786:	4690      	mov	r8, r2
 8001788:	4323      	orrs	r3, r4
 800178a:	e02c      	b.n	80017e6 <__aeabi_dadd+0x432>
 800178c:	0742      	lsls	r2, r0, #29
 800178e:	08db      	lsrs	r3, r3, #3
 8001790:	4313      	orrs	r3, r2
 8001792:	08c0      	lsrs	r0, r0, #3
 8001794:	e73b      	b.n	800160e <__aeabi_dadd+0x25a>
 8001796:	185c      	adds	r4, r3, r1
 8001798:	429c      	cmp	r4, r3
 800179a:	419b      	sbcs	r3, r3
 800179c:	4440      	add	r0, r8
 800179e:	425b      	negs	r3, r3
 80017a0:	18c7      	adds	r7, r0, r3
 80017a2:	2601      	movs	r6, #1
 80017a4:	023b      	lsls	r3, r7, #8
 80017a6:	d400      	bmi.n	80017aa <__aeabi_dadd+0x3f6>
 80017a8:	e729      	b.n	80015fe <__aeabi_dadd+0x24a>
 80017aa:	2602      	movs	r6, #2
 80017ac:	4a9e      	ldr	r2, [pc, #632]	; (8001a28 <__aeabi_dadd+0x674>)
 80017ae:	0863      	lsrs	r3, r4, #1
 80017b0:	4017      	ands	r7, r2
 80017b2:	2201      	movs	r2, #1
 80017b4:	4014      	ands	r4, r2
 80017b6:	431c      	orrs	r4, r3
 80017b8:	07fb      	lsls	r3, r7, #31
 80017ba:	431c      	orrs	r4, r3
 80017bc:	087f      	lsrs	r7, r7, #1
 80017be:	e673      	b.n	80014a8 <__aeabi_dadd+0xf4>
 80017c0:	4644      	mov	r4, r8
 80017c2:	3a20      	subs	r2, #32
 80017c4:	40d4      	lsrs	r4, r2
 80017c6:	4662      	mov	r2, ip
 80017c8:	2a20      	cmp	r2, #32
 80017ca:	d005      	beq.n	80017d8 <__aeabi_dadd+0x424>
 80017cc:	4667      	mov	r7, ip
 80017ce:	2240      	movs	r2, #64	; 0x40
 80017d0:	1bd2      	subs	r2, r2, r7
 80017d2:	4647      	mov	r7, r8
 80017d4:	4097      	lsls	r7, r2
 80017d6:	4339      	orrs	r1, r7
 80017d8:	1e4a      	subs	r2, r1, #1
 80017da:	4191      	sbcs	r1, r2
 80017dc:	4321      	orrs	r1, r4
 80017de:	e635      	b.n	800144c <__aeabi_dadd+0x98>
 80017e0:	4303      	orrs	r3, r0
 80017e2:	1e58      	subs	r0, r3, #1
 80017e4:	4183      	sbcs	r3, r0
 80017e6:	1acc      	subs	r4, r1, r3
 80017e8:	42a1      	cmp	r1, r4
 80017ea:	41bf      	sbcs	r7, r7
 80017ec:	4643      	mov	r3, r8
 80017ee:	427f      	negs	r7, r7
 80017f0:	4655      	mov	r5, sl
 80017f2:	464e      	mov	r6, r9
 80017f4:	1bdf      	subs	r7, r3, r7
 80017f6:	e62e      	b.n	8001456 <__aeabi_dadd+0xa2>
 80017f8:	0002      	movs	r2, r0
 80017fa:	431a      	orrs	r2, r3
 80017fc:	d100      	bne.n	8001800 <__aeabi_dadd+0x44c>
 80017fe:	e0bd      	b.n	800197c <__aeabi_dadd+0x5c8>
 8001800:	4662      	mov	r2, ip
 8001802:	4664      	mov	r4, ip
 8001804:	3a01      	subs	r2, #1
 8001806:	2c01      	cmp	r4, #1
 8001808:	d100      	bne.n	800180c <__aeabi_dadd+0x458>
 800180a:	e0e5      	b.n	80019d8 <__aeabi_dadd+0x624>
 800180c:	4c85      	ldr	r4, [pc, #532]	; (8001a24 <__aeabi_dadd+0x670>)
 800180e:	45a4      	cmp	ip, r4
 8001810:	d058      	beq.n	80018c4 <__aeabi_dadd+0x510>
 8001812:	4694      	mov	ip, r2
 8001814:	e749      	b.n	80016aa <__aeabi_dadd+0x2f6>
 8001816:	4664      	mov	r4, ip
 8001818:	2220      	movs	r2, #32
 800181a:	1b12      	subs	r2, r2, r4
 800181c:	4644      	mov	r4, r8
 800181e:	4094      	lsls	r4, r2
 8001820:	000f      	movs	r7, r1
 8001822:	46a1      	mov	r9, r4
 8001824:	4664      	mov	r4, ip
 8001826:	4091      	lsls	r1, r2
 8001828:	40e7      	lsrs	r7, r4
 800182a:	464c      	mov	r4, r9
 800182c:	1e4a      	subs	r2, r1, #1
 800182e:	4191      	sbcs	r1, r2
 8001830:	433c      	orrs	r4, r7
 8001832:	4642      	mov	r2, r8
 8001834:	430c      	orrs	r4, r1
 8001836:	4661      	mov	r1, ip
 8001838:	40ca      	lsrs	r2, r1
 800183a:	1880      	adds	r0, r0, r2
 800183c:	e6f4      	b.n	8001628 <__aeabi_dadd+0x274>
 800183e:	4c79      	ldr	r4, [pc, #484]	; (8001a24 <__aeabi_dadd+0x670>)
 8001840:	42a2      	cmp	r2, r4
 8001842:	d100      	bne.n	8001846 <__aeabi_dadd+0x492>
 8001844:	e6fd      	b.n	8001642 <__aeabi_dadd+0x28e>
 8001846:	1859      	adds	r1, r3, r1
 8001848:	4299      	cmp	r1, r3
 800184a:	419b      	sbcs	r3, r3
 800184c:	4440      	add	r0, r8
 800184e:	425f      	negs	r7, r3
 8001850:	19c7      	adds	r7, r0, r7
 8001852:	07fc      	lsls	r4, r7, #31
 8001854:	0849      	lsrs	r1, r1, #1
 8001856:	0016      	movs	r6, r2
 8001858:	430c      	orrs	r4, r1
 800185a:	087f      	lsrs	r7, r7, #1
 800185c:	e6cf      	b.n	80015fe <__aeabi_dadd+0x24a>
 800185e:	1acc      	subs	r4, r1, r3
 8001860:	42a1      	cmp	r1, r4
 8001862:	41bf      	sbcs	r7, r7
 8001864:	4643      	mov	r3, r8
 8001866:	427f      	negs	r7, r7
 8001868:	1a18      	subs	r0, r3, r0
 800186a:	4655      	mov	r5, sl
 800186c:	1bc7      	subs	r7, r0, r7
 800186e:	e5f7      	b.n	8001460 <__aeabi_dadd+0xac>
 8001870:	08c9      	lsrs	r1, r1, #3
 8001872:	077b      	lsls	r3, r7, #29
 8001874:	4655      	mov	r5, sl
 8001876:	430b      	orrs	r3, r1
 8001878:	08f8      	lsrs	r0, r7, #3
 800187a:	e6c8      	b.n	800160e <__aeabi_dadd+0x25a>
 800187c:	2c00      	cmp	r4, #0
 800187e:	d000      	beq.n	8001882 <__aeabi_dadd+0x4ce>
 8001880:	e081      	b.n	8001986 <__aeabi_dadd+0x5d2>
 8001882:	4643      	mov	r3, r8
 8001884:	430b      	orrs	r3, r1
 8001886:	d115      	bne.n	80018b4 <__aeabi_dadd+0x500>
 8001888:	2080      	movs	r0, #128	; 0x80
 800188a:	2500      	movs	r5, #0
 800188c:	0300      	lsls	r0, r0, #12
 800188e:	e6e3      	b.n	8001658 <__aeabi_dadd+0x2a4>
 8001890:	1a5c      	subs	r4, r3, r1
 8001892:	42a3      	cmp	r3, r4
 8001894:	419b      	sbcs	r3, r3
 8001896:	1bc7      	subs	r7, r0, r7
 8001898:	425b      	negs	r3, r3
 800189a:	2601      	movs	r6, #1
 800189c:	1aff      	subs	r7, r7, r3
 800189e:	e5da      	b.n	8001456 <__aeabi_dadd+0xa2>
 80018a0:	0742      	lsls	r2, r0, #29
 80018a2:	08db      	lsrs	r3, r3, #3
 80018a4:	4313      	orrs	r3, r2
 80018a6:	08c0      	lsrs	r0, r0, #3
 80018a8:	e6d2      	b.n	8001650 <__aeabi_dadd+0x29c>
 80018aa:	0742      	lsls	r2, r0, #29
 80018ac:	08db      	lsrs	r3, r3, #3
 80018ae:	4313      	orrs	r3, r2
 80018b0:	08c0      	lsrs	r0, r0, #3
 80018b2:	e6ac      	b.n	800160e <__aeabi_dadd+0x25a>
 80018b4:	4643      	mov	r3, r8
 80018b6:	4642      	mov	r2, r8
 80018b8:	08c9      	lsrs	r1, r1, #3
 80018ba:	075b      	lsls	r3, r3, #29
 80018bc:	4655      	mov	r5, sl
 80018be:	430b      	orrs	r3, r1
 80018c0:	08d0      	lsrs	r0, r2, #3
 80018c2:	e6c5      	b.n	8001650 <__aeabi_dadd+0x29c>
 80018c4:	4643      	mov	r3, r8
 80018c6:	4642      	mov	r2, r8
 80018c8:	075b      	lsls	r3, r3, #29
 80018ca:	08c9      	lsrs	r1, r1, #3
 80018cc:	430b      	orrs	r3, r1
 80018ce:	08d0      	lsrs	r0, r2, #3
 80018d0:	e6be      	b.n	8001650 <__aeabi_dadd+0x29c>
 80018d2:	4303      	orrs	r3, r0
 80018d4:	001c      	movs	r4, r3
 80018d6:	1e63      	subs	r3, r4, #1
 80018d8:	419c      	sbcs	r4, r3
 80018da:	e6fc      	b.n	80016d6 <__aeabi_dadd+0x322>
 80018dc:	0002      	movs	r2, r0
 80018de:	3c20      	subs	r4, #32
 80018e0:	40e2      	lsrs	r2, r4
 80018e2:	0014      	movs	r4, r2
 80018e4:	4662      	mov	r2, ip
 80018e6:	2a20      	cmp	r2, #32
 80018e8:	d003      	beq.n	80018f2 <__aeabi_dadd+0x53e>
 80018ea:	2540      	movs	r5, #64	; 0x40
 80018ec:	1aad      	subs	r5, r5, r2
 80018ee:	40a8      	lsls	r0, r5
 80018f0:	4303      	orrs	r3, r0
 80018f2:	1e58      	subs	r0, r3, #1
 80018f4:	4183      	sbcs	r3, r0
 80018f6:	4323      	orrs	r3, r4
 80018f8:	e775      	b.n	80017e6 <__aeabi_dadd+0x432>
 80018fa:	2a00      	cmp	r2, #0
 80018fc:	d0e2      	beq.n	80018c4 <__aeabi_dadd+0x510>
 80018fe:	003a      	movs	r2, r7
 8001900:	430a      	orrs	r2, r1
 8001902:	d0cd      	beq.n	80018a0 <__aeabi_dadd+0x4ec>
 8001904:	0742      	lsls	r2, r0, #29
 8001906:	08db      	lsrs	r3, r3, #3
 8001908:	4313      	orrs	r3, r2
 800190a:	2280      	movs	r2, #128	; 0x80
 800190c:	08c0      	lsrs	r0, r0, #3
 800190e:	0312      	lsls	r2, r2, #12
 8001910:	4210      	tst	r0, r2
 8001912:	d006      	beq.n	8001922 <__aeabi_dadd+0x56e>
 8001914:	08fc      	lsrs	r4, r7, #3
 8001916:	4214      	tst	r4, r2
 8001918:	d103      	bne.n	8001922 <__aeabi_dadd+0x56e>
 800191a:	0020      	movs	r0, r4
 800191c:	08cb      	lsrs	r3, r1, #3
 800191e:	077a      	lsls	r2, r7, #29
 8001920:	4313      	orrs	r3, r2
 8001922:	0f5a      	lsrs	r2, r3, #29
 8001924:	00db      	lsls	r3, r3, #3
 8001926:	0752      	lsls	r2, r2, #29
 8001928:	08db      	lsrs	r3, r3, #3
 800192a:	4313      	orrs	r3, r2
 800192c:	e690      	b.n	8001650 <__aeabi_dadd+0x29c>
 800192e:	4643      	mov	r3, r8
 8001930:	430b      	orrs	r3, r1
 8001932:	d100      	bne.n	8001936 <__aeabi_dadd+0x582>
 8001934:	e709      	b.n	800174a <__aeabi_dadd+0x396>
 8001936:	4643      	mov	r3, r8
 8001938:	4642      	mov	r2, r8
 800193a:	08c9      	lsrs	r1, r1, #3
 800193c:	075b      	lsls	r3, r3, #29
 800193e:	4655      	mov	r5, sl
 8001940:	430b      	orrs	r3, r1
 8001942:	08d0      	lsrs	r0, r2, #3
 8001944:	e666      	b.n	8001614 <__aeabi_dadd+0x260>
 8001946:	1acc      	subs	r4, r1, r3
 8001948:	42a1      	cmp	r1, r4
 800194a:	4189      	sbcs	r1, r1
 800194c:	1a3f      	subs	r7, r7, r0
 800194e:	4249      	negs	r1, r1
 8001950:	4655      	mov	r5, sl
 8001952:	2601      	movs	r6, #1
 8001954:	1a7f      	subs	r7, r7, r1
 8001956:	e57e      	b.n	8001456 <__aeabi_dadd+0xa2>
 8001958:	4642      	mov	r2, r8
 800195a:	1a5c      	subs	r4, r3, r1
 800195c:	1a87      	subs	r7, r0, r2
 800195e:	42a3      	cmp	r3, r4
 8001960:	4192      	sbcs	r2, r2
 8001962:	4252      	negs	r2, r2
 8001964:	1abf      	subs	r7, r7, r2
 8001966:	023a      	lsls	r2, r7, #8
 8001968:	d53d      	bpl.n	80019e6 <__aeabi_dadd+0x632>
 800196a:	1acc      	subs	r4, r1, r3
 800196c:	42a1      	cmp	r1, r4
 800196e:	4189      	sbcs	r1, r1
 8001970:	4643      	mov	r3, r8
 8001972:	4249      	negs	r1, r1
 8001974:	1a1f      	subs	r7, r3, r0
 8001976:	4655      	mov	r5, sl
 8001978:	1a7f      	subs	r7, r7, r1
 800197a:	e595      	b.n	80014a8 <__aeabi_dadd+0xf4>
 800197c:	077b      	lsls	r3, r7, #29
 800197e:	08c9      	lsrs	r1, r1, #3
 8001980:	430b      	orrs	r3, r1
 8001982:	08f8      	lsrs	r0, r7, #3
 8001984:	e643      	b.n	800160e <__aeabi_dadd+0x25a>
 8001986:	4644      	mov	r4, r8
 8001988:	08db      	lsrs	r3, r3, #3
 800198a:	430c      	orrs	r4, r1
 800198c:	d130      	bne.n	80019f0 <__aeabi_dadd+0x63c>
 800198e:	0742      	lsls	r2, r0, #29
 8001990:	4313      	orrs	r3, r2
 8001992:	08c0      	lsrs	r0, r0, #3
 8001994:	e65c      	b.n	8001650 <__aeabi_dadd+0x29c>
 8001996:	077b      	lsls	r3, r7, #29
 8001998:	08c9      	lsrs	r1, r1, #3
 800199a:	430b      	orrs	r3, r1
 800199c:	08f8      	lsrs	r0, r7, #3
 800199e:	e639      	b.n	8001614 <__aeabi_dadd+0x260>
 80019a0:	185c      	adds	r4, r3, r1
 80019a2:	429c      	cmp	r4, r3
 80019a4:	419b      	sbcs	r3, r3
 80019a6:	4440      	add	r0, r8
 80019a8:	425b      	negs	r3, r3
 80019aa:	18c7      	adds	r7, r0, r3
 80019ac:	023b      	lsls	r3, r7, #8
 80019ae:	d400      	bmi.n	80019b2 <__aeabi_dadd+0x5fe>
 80019b0:	e625      	b.n	80015fe <__aeabi_dadd+0x24a>
 80019b2:	4b1d      	ldr	r3, [pc, #116]	; (8001a28 <__aeabi_dadd+0x674>)
 80019b4:	2601      	movs	r6, #1
 80019b6:	401f      	ands	r7, r3
 80019b8:	e621      	b.n	80015fe <__aeabi_dadd+0x24a>
 80019ba:	0004      	movs	r4, r0
 80019bc:	3a20      	subs	r2, #32
 80019be:	40d4      	lsrs	r4, r2
 80019c0:	4662      	mov	r2, ip
 80019c2:	2a20      	cmp	r2, #32
 80019c4:	d004      	beq.n	80019d0 <__aeabi_dadd+0x61c>
 80019c6:	2240      	movs	r2, #64	; 0x40
 80019c8:	4666      	mov	r6, ip
 80019ca:	1b92      	subs	r2, r2, r6
 80019cc:	4090      	lsls	r0, r2
 80019ce:	4303      	orrs	r3, r0
 80019d0:	1e5a      	subs	r2, r3, #1
 80019d2:	4193      	sbcs	r3, r2
 80019d4:	431c      	orrs	r4, r3
 80019d6:	e67e      	b.n	80016d6 <__aeabi_dadd+0x322>
 80019d8:	185c      	adds	r4, r3, r1
 80019da:	428c      	cmp	r4, r1
 80019dc:	4189      	sbcs	r1, r1
 80019de:	4440      	add	r0, r8
 80019e0:	4249      	negs	r1, r1
 80019e2:	1847      	adds	r7, r0, r1
 80019e4:	e6dd      	b.n	80017a2 <__aeabi_dadd+0x3ee>
 80019e6:	0023      	movs	r3, r4
 80019e8:	433b      	orrs	r3, r7
 80019ea:	d100      	bne.n	80019ee <__aeabi_dadd+0x63a>
 80019ec:	e6ad      	b.n	800174a <__aeabi_dadd+0x396>
 80019ee:	e606      	b.n	80015fe <__aeabi_dadd+0x24a>
 80019f0:	0744      	lsls	r4, r0, #29
 80019f2:	4323      	orrs	r3, r4
 80019f4:	2480      	movs	r4, #128	; 0x80
 80019f6:	08c0      	lsrs	r0, r0, #3
 80019f8:	0324      	lsls	r4, r4, #12
 80019fa:	4220      	tst	r0, r4
 80019fc:	d008      	beq.n	8001a10 <__aeabi_dadd+0x65c>
 80019fe:	4642      	mov	r2, r8
 8001a00:	08d6      	lsrs	r6, r2, #3
 8001a02:	4226      	tst	r6, r4
 8001a04:	d104      	bne.n	8001a10 <__aeabi_dadd+0x65c>
 8001a06:	4655      	mov	r5, sl
 8001a08:	0030      	movs	r0, r6
 8001a0a:	08cb      	lsrs	r3, r1, #3
 8001a0c:	0751      	lsls	r1, r2, #29
 8001a0e:	430b      	orrs	r3, r1
 8001a10:	0f5a      	lsrs	r2, r3, #29
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	08db      	lsrs	r3, r3, #3
 8001a16:	0752      	lsls	r2, r2, #29
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	e619      	b.n	8001650 <__aeabi_dadd+0x29c>
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	4a01      	ldr	r2, [pc, #4]	; (8001a24 <__aeabi_dadd+0x670>)
 8001a20:	001f      	movs	r7, r3
 8001a22:	e55e      	b.n	80014e2 <__aeabi_dadd+0x12e>
 8001a24:	000007ff 	.word	0x000007ff
 8001a28:	ff7fffff 	.word	0xff7fffff

08001a2c <__aeabi_ddiv>:
 8001a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a2e:	4657      	mov	r7, sl
 8001a30:	464e      	mov	r6, r9
 8001a32:	4645      	mov	r5, r8
 8001a34:	46de      	mov	lr, fp
 8001a36:	b5e0      	push	{r5, r6, r7, lr}
 8001a38:	4681      	mov	r9, r0
 8001a3a:	0005      	movs	r5, r0
 8001a3c:	030c      	lsls	r4, r1, #12
 8001a3e:	0048      	lsls	r0, r1, #1
 8001a40:	4692      	mov	sl, r2
 8001a42:	001f      	movs	r7, r3
 8001a44:	b085      	sub	sp, #20
 8001a46:	0b24      	lsrs	r4, r4, #12
 8001a48:	0d40      	lsrs	r0, r0, #21
 8001a4a:	0fce      	lsrs	r6, r1, #31
 8001a4c:	2800      	cmp	r0, #0
 8001a4e:	d100      	bne.n	8001a52 <__aeabi_ddiv+0x26>
 8001a50:	e156      	b.n	8001d00 <__aeabi_ddiv+0x2d4>
 8001a52:	4bd4      	ldr	r3, [pc, #848]	; (8001da4 <__aeabi_ddiv+0x378>)
 8001a54:	4298      	cmp	r0, r3
 8001a56:	d100      	bne.n	8001a5a <__aeabi_ddiv+0x2e>
 8001a58:	e172      	b.n	8001d40 <__aeabi_ddiv+0x314>
 8001a5a:	0f6b      	lsrs	r3, r5, #29
 8001a5c:	00e4      	lsls	r4, r4, #3
 8001a5e:	431c      	orrs	r4, r3
 8001a60:	2380      	movs	r3, #128	; 0x80
 8001a62:	041b      	lsls	r3, r3, #16
 8001a64:	4323      	orrs	r3, r4
 8001a66:	4698      	mov	r8, r3
 8001a68:	4bcf      	ldr	r3, [pc, #828]	; (8001da8 <__aeabi_ddiv+0x37c>)
 8001a6a:	00ed      	lsls	r5, r5, #3
 8001a6c:	469b      	mov	fp, r3
 8001a6e:	2300      	movs	r3, #0
 8001a70:	4699      	mov	r9, r3
 8001a72:	4483      	add	fp, r0
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	033c      	lsls	r4, r7, #12
 8001a78:	007b      	lsls	r3, r7, #1
 8001a7a:	4650      	mov	r0, sl
 8001a7c:	0b24      	lsrs	r4, r4, #12
 8001a7e:	0d5b      	lsrs	r3, r3, #21
 8001a80:	0fff      	lsrs	r7, r7, #31
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d100      	bne.n	8001a88 <__aeabi_ddiv+0x5c>
 8001a86:	e11f      	b.n	8001cc8 <__aeabi_ddiv+0x29c>
 8001a88:	4ac6      	ldr	r2, [pc, #792]	; (8001da4 <__aeabi_ddiv+0x378>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_ddiv+0x64>
 8001a8e:	e162      	b.n	8001d56 <__aeabi_ddiv+0x32a>
 8001a90:	49c5      	ldr	r1, [pc, #788]	; (8001da8 <__aeabi_ddiv+0x37c>)
 8001a92:	0f42      	lsrs	r2, r0, #29
 8001a94:	468c      	mov	ip, r1
 8001a96:	00e4      	lsls	r4, r4, #3
 8001a98:	4659      	mov	r1, fp
 8001a9a:	4314      	orrs	r4, r2
 8001a9c:	2280      	movs	r2, #128	; 0x80
 8001a9e:	4463      	add	r3, ip
 8001aa0:	0412      	lsls	r2, r2, #16
 8001aa2:	1acb      	subs	r3, r1, r3
 8001aa4:	4314      	orrs	r4, r2
 8001aa6:	469b      	mov	fp, r3
 8001aa8:	00c2      	lsls	r2, r0, #3
 8001aaa:	2000      	movs	r0, #0
 8001aac:	0033      	movs	r3, r6
 8001aae:	407b      	eors	r3, r7
 8001ab0:	469a      	mov	sl, r3
 8001ab2:	464b      	mov	r3, r9
 8001ab4:	2b0f      	cmp	r3, #15
 8001ab6:	d827      	bhi.n	8001b08 <__aeabi_ddiv+0xdc>
 8001ab8:	49bc      	ldr	r1, [pc, #752]	; (8001dac <__aeabi_ddiv+0x380>)
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	58cb      	ldr	r3, [r1, r3]
 8001abe:	469f      	mov	pc, r3
 8001ac0:	46b2      	mov	sl, r6
 8001ac2:	9b00      	ldr	r3, [sp, #0]
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d016      	beq.n	8001af6 <__aeabi_ddiv+0xca>
 8001ac8:	2b03      	cmp	r3, #3
 8001aca:	d100      	bne.n	8001ace <__aeabi_ddiv+0xa2>
 8001acc:	e28e      	b.n	8001fec <__aeabi_ddiv+0x5c0>
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d000      	beq.n	8001ad4 <__aeabi_ddiv+0xa8>
 8001ad2:	e0d9      	b.n	8001c88 <__aeabi_ddiv+0x25c>
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	2400      	movs	r4, #0
 8001ad8:	2500      	movs	r5, #0
 8001ada:	4652      	mov	r2, sl
 8001adc:	051b      	lsls	r3, r3, #20
 8001ade:	4323      	orrs	r3, r4
 8001ae0:	07d2      	lsls	r2, r2, #31
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	0028      	movs	r0, r5
 8001ae6:	0019      	movs	r1, r3
 8001ae8:	b005      	add	sp, #20
 8001aea:	bcf0      	pop	{r4, r5, r6, r7}
 8001aec:	46bb      	mov	fp, r7
 8001aee:	46b2      	mov	sl, r6
 8001af0:	46a9      	mov	r9, r5
 8001af2:	46a0      	mov	r8, r4
 8001af4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001af6:	2400      	movs	r4, #0
 8001af8:	2500      	movs	r5, #0
 8001afa:	4baa      	ldr	r3, [pc, #680]	; (8001da4 <__aeabi_ddiv+0x378>)
 8001afc:	e7ed      	b.n	8001ada <__aeabi_ddiv+0xae>
 8001afe:	46ba      	mov	sl, r7
 8001b00:	46a0      	mov	r8, r4
 8001b02:	0015      	movs	r5, r2
 8001b04:	9000      	str	r0, [sp, #0]
 8001b06:	e7dc      	b.n	8001ac2 <__aeabi_ddiv+0x96>
 8001b08:	4544      	cmp	r4, r8
 8001b0a:	d200      	bcs.n	8001b0e <__aeabi_ddiv+0xe2>
 8001b0c:	e1c7      	b.n	8001e9e <__aeabi_ddiv+0x472>
 8001b0e:	d100      	bne.n	8001b12 <__aeabi_ddiv+0xe6>
 8001b10:	e1c2      	b.n	8001e98 <__aeabi_ddiv+0x46c>
 8001b12:	2301      	movs	r3, #1
 8001b14:	425b      	negs	r3, r3
 8001b16:	469c      	mov	ip, r3
 8001b18:	002e      	movs	r6, r5
 8001b1a:	4640      	mov	r0, r8
 8001b1c:	2500      	movs	r5, #0
 8001b1e:	44e3      	add	fp, ip
 8001b20:	0223      	lsls	r3, r4, #8
 8001b22:	0e14      	lsrs	r4, r2, #24
 8001b24:	431c      	orrs	r4, r3
 8001b26:	0c1b      	lsrs	r3, r3, #16
 8001b28:	4699      	mov	r9, r3
 8001b2a:	0423      	lsls	r3, r4, #16
 8001b2c:	0c1f      	lsrs	r7, r3, #16
 8001b2e:	0212      	lsls	r2, r2, #8
 8001b30:	4649      	mov	r1, r9
 8001b32:	9200      	str	r2, [sp, #0]
 8001b34:	9701      	str	r7, [sp, #4]
 8001b36:	f7fe fb8f 	bl	8000258 <__aeabi_uidivmod>
 8001b3a:	0002      	movs	r2, r0
 8001b3c:	437a      	muls	r2, r7
 8001b3e:	040b      	lsls	r3, r1, #16
 8001b40:	0c31      	lsrs	r1, r6, #16
 8001b42:	4680      	mov	r8, r0
 8001b44:	4319      	orrs	r1, r3
 8001b46:	428a      	cmp	r2, r1
 8001b48:	d907      	bls.n	8001b5a <__aeabi_ddiv+0x12e>
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	425b      	negs	r3, r3
 8001b4e:	469c      	mov	ip, r3
 8001b50:	1909      	adds	r1, r1, r4
 8001b52:	44e0      	add	r8, ip
 8001b54:	428c      	cmp	r4, r1
 8001b56:	d800      	bhi.n	8001b5a <__aeabi_ddiv+0x12e>
 8001b58:	e207      	b.n	8001f6a <__aeabi_ddiv+0x53e>
 8001b5a:	1a88      	subs	r0, r1, r2
 8001b5c:	4649      	mov	r1, r9
 8001b5e:	f7fe fb7b 	bl	8000258 <__aeabi_uidivmod>
 8001b62:	0409      	lsls	r1, r1, #16
 8001b64:	468c      	mov	ip, r1
 8001b66:	0431      	lsls	r1, r6, #16
 8001b68:	4666      	mov	r6, ip
 8001b6a:	9a01      	ldr	r2, [sp, #4]
 8001b6c:	0c09      	lsrs	r1, r1, #16
 8001b6e:	4342      	muls	r2, r0
 8001b70:	0003      	movs	r3, r0
 8001b72:	4331      	orrs	r1, r6
 8001b74:	428a      	cmp	r2, r1
 8001b76:	d904      	bls.n	8001b82 <__aeabi_ddiv+0x156>
 8001b78:	1909      	adds	r1, r1, r4
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	428c      	cmp	r4, r1
 8001b7e:	d800      	bhi.n	8001b82 <__aeabi_ddiv+0x156>
 8001b80:	e1ed      	b.n	8001f5e <__aeabi_ddiv+0x532>
 8001b82:	1a88      	subs	r0, r1, r2
 8001b84:	4642      	mov	r2, r8
 8001b86:	0412      	lsls	r2, r2, #16
 8001b88:	431a      	orrs	r2, r3
 8001b8a:	4690      	mov	r8, r2
 8001b8c:	4641      	mov	r1, r8
 8001b8e:	9b00      	ldr	r3, [sp, #0]
 8001b90:	040e      	lsls	r6, r1, #16
 8001b92:	0c1b      	lsrs	r3, r3, #16
 8001b94:	001f      	movs	r7, r3
 8001b96:	9302      	str	r3, [sp, #8]
 8001b98:	9b00      	ldr	r3, [sp, #0]
 8001b9a:	0c36      	lsrs	r6, r6, #16
 8001b9c:	041b      	lsls	r3, r3, #16
 8001b9e:	0c19      	lsrs	r1, r3, #16
 8001ba0:	000b      	movs	r3, r1
 8001ba2:	4373      	muls	r3, r6
 8001ba4:	0c12      	lsrs	r2, r2, #16
 8001ba6:	437e      	muls	r6, r7
 8001ba8:	9103      	str	r1, [sp, #12]
 8001baa:	4351      	muls	r1, r2
 8001bac:	437a      	muls	r2, r7
 8001bae:	0c1f      	lsrs	r7, r3, #16
 8001bb0:	46bc      	mov	ip, r7
 8001bb2:	1876      	adds	r6, r6, r1
 8001bb4:	4466      	add	r6, ip
 8001bb6:	42b1      	cmp	r1, r6
 8001bb8:	d903      	bls.n	8001bc2 <__aeabi_ddiv+0x196>
 8001bba:	2180      	movs	r1, #128	; 0x80
 8001bbc:	0249      	lsls	r1, r1, #9
 8001bbe:	468c      	mov	ip, r1
 8001bc0:	4462      	add	r2, ip
 8001bc2:	0c31      	lsrs	r1, r6, #16
 8001bc4:	188a      	adds	r2, r1, r2
 8001bc6:	0431      	lsls	r1, r6, #16
 8001bc8:	041e      	lsls	r6, r3, #16
 8001bca:	0c36      	lsrs	r6, r6, #16
 8001bcc:	198e      	adds	r6, r1, r6
 8001bce:	4290      	cmp	r0, r2
 8001bd0:	d302      	bcc.n	8001bd8 <__aeabi_ddiv+0x1ac>
 8001bd2:	d112      	bne.n	8001bfa <__aeabi_ddiv+0x1ce>
 8001bd4:	42b5      	cmp	r5, r6
 8001bd6:	d210      	bcs.n	8001bfa <__aeabi_ddiv+0x1ce>
 8001bd8:	4643      	mov	r3, r8
 8001bda:	1e59      	subs	r1, r3, #1
 8001bdc:	9b00      	ldr	r3, [sp, #0]
 8001bde:	469c      	mov	ip, r3
 8001be0:	4465      	add	r5, ip
 8001be2:	001f      	movs	r7, r3
 8001be4:	429d      	cmp	r5, r3
 8001be6:	419b      	sbcs	r3, r3
 8001be8:	425b      	negs	r3, r3
 8001bea:	191b      	adds	r3, r3, r4
 8001bec:	18c0      	adds	r0, r0, r3
 8001bee:	4284      	cmp	r4, r0
 8001bf0:	d200      	bcs.n	8001bf4 <__aeabi_ddiv+0x1c8>
 8001bf2:	e1a0      	b.n	8001f36 <__aeabi_ddiv+0x50a>
 8001bf4:	d100      	bne.n	8001bf8 <__aeabi_ddiv+0x1cc>
 8001bf6:	e19b      	b.n	8001f30 <__aeabi_ddiv+0x504>
 8001bf8:	4688      	mov	r8, r1
 8001bfa:	1bae      	subs	r6, r5, r6
 8001bfc:	42b5      	cmp	r5, r6
 8001bfe:	41ad      	sbcs	r5, r5
 8001c00:	1a80      	subs	r0, r0, r2
 8001c02:	426d      	negs	r5, r5
 8001c04:	1b40      	subs	r0, r0, r5
 8001c06:	4284      	cmp	r4, r0
 8001c08:	d100      	bne.n	8001c0c <__aeabi_ddiv+0x1e0>
 8001c0a:	e1d5      	b.n	8001fb8 <__aeabi_ddiv+0x58c>
 8001c0c:	4649      	mov	r1, r9
 8001c0e:	f7fe fb23 	bl	8000258 <__aeabi_uidivmod>
 8001c12:	9a01      	ldr	r2, [sp, #4]
 8001c14:	040b      	lsls	r3, r1, #16
 8001c16:	4342      	muls	r2, r0
 8001c18:	0c31      	lsrs	r1, r6, #16
 8001c1a:	0005      	movs	r5, r0
 8001c1c:	4319      	orrs	r1, r3
 8001c1e:	428a      	cmp	r2, r1
 8001c20:	d900      	bls.n	8001c24 <__aeabi_ddiv+0x1f8>
 8001c22:	e16c      	b.n	8001efe <__aeabi_ddiv+0x4d2>
 8001c24:	1a88      	subs	r0, r1, r2
 8001c26:	4649      	mov	r1, r9
 8001c28:	f7fe fb16 	bl	8000258 <__aeabi_uidivmod>
 8001c2c:	9a01      	ldr	r2, [sp, #4]
 8001c2e:	0436      	lsls	r6, r6, #16
 8001c30:	4342      	muls	r2, r0
 8001c32:	0409      	lsls	r1, r1, #16
 8001c34:	0c36      	lsrs	r6, r6, #16
 8001c36:	0003      	movs	r3, r0
 8001c38:	430e      	orrs	r6, r1
 8001c3a:	42b2      	cmp	r2, r6
 8001c3c:	d900      	bls.n	8001c40 <__aeabi_ddiv+0x214>
 8001c3e:	e153      	b.n	8001ee8 <__aeabi_ddiv+0x4bc>
 8001c40:	9803      	ldr	r0, [sp, #12]
 8001c42:	1ab6      	subs	r6, r6, r2
 8001c44:	0002      	movs	r2, r0
 8001c46:	042d      	lsls	r5, r5, #16
 8001c48:	431d      	orrs	r5, r3
 8001c4a:	9f02      	ldr	r7, [sp, #8]
 8001c4c:	042b      	lsls	r3, r5, #16
 8001c4e:	0c1b      	lsrs	r3, r3, #16
 8001c50:	435a      	muls	r2, r3
 8001c52:	437b      	muls	r3, r7
 8001c54:	469c      	mov	ip, r3
 8001c56:	0c29      	lsrs	r1, r5, #16
 8001c58:	4348      	muls	r0, r1
 8001c5a:	0c13      	lsrs	r3, r2, #16
 8001c5c:	4484      	add	ip, r0
 8001c5e:	4463      	add	r3, ip
 8001c60:	4379      	muls	r1, r7
 8001c62:	4298      	cmp	r0, r3
 8001c64:	d903      	bls.n	8001c6e <__aeabi_ddiv+0x242>
 8001c66:	2080      	movs	r0, #128	; 0x80
 8001c68:	0240      	lsls	r0, r0, #9
 8001c6a:	4684      	mov	ip, r0
 8001c6c:	4461      	add	r1, ip
 8001c6e:	0c18      	lsrs	r0, r3, #16
 8001c70:	0412      	lsls	r2, r2, #16
 8001c72:	041b      	lsls	r3, r3, #16
 8001c74:	0c12      	lsrs	r2, r2, #16
 8001c76:	1841      	adds	r1, r0, r1
 8001c78:	189b      	adds	r3, r3, r2
 8001c7a:	428e      	cmp	r6, r1
 8001c7c:	d200      	bcs.n	8001c80 <__aeabi_ddiv+0x254>
 8001c7e:	e0ff      	b.n	8001e80 <__aeabi_ddiv+0x454>
 8001c80:	d100      	bne.n	8001c84 <__aeabi_ddiv+0x258>
 8001c82:	e0fa      	b.n	8001e7a <__aeabi_ddiv+0x44e>
 8001c84:	2301      	movs	r3, #1
 8001c86:	431d      	orrs	r5, r3
 8001c88:	4a49      	ldr	r2, [pc, #292]	; (8001db0 <__aeabi_ddiv+0x384>)
 8001c8a:	445a      	add	r2, fp
 8001c8c:	2a00      	cmp	r2, #0
 8001c8e:	dc00      	bgt.n	8001c92 <__aeabi_ddiv+0x266>
 8001c90:	e0aa      	b.n	8001de8 <__aeabi_ddiv+0x3bc>
 8001c92:	076b      	lsls	r3, r5, #29
 8001c94:	d000      	beq.n	8001c98 <__aeabi_ddiv+0x26c>
 8001c96:	e13d      	b.n	8001f14 <__aeabi_ddiv+0x4e8>
 8001c98:	08ed      	lsrs	r5, r5, #3
 8001c9a:	4643      	mov	r3, r8
 8001c9c:	01db      	lsls	r3, r3, #7
 8001c9e:	d506      	bpl.n	8001cae <__aeabi_ddiv+0x282>
 8001ca0:	4642      	mov	r2, r8
 8001ca2:	4b44      	ldr	r3, [pc, #272]	; (8001db4 <__aeabi_ddiv+0x388>)
 8001ca4:	401a      	ands	r2, r3
 8001ca6:	4690      	mov	r8, r2
 8001ca8:	2280      	movs	r2, #128	; 0x80
 8001caa:	00d2      	lsls	r2, r2, #3
 8001cac:	445a      	add	r2, fp
 8001cae:	4b42      	ldr	r3, [pc, #264]	; (8001db8 <__aeabi_ddiv+0x38c>)
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	dd00      	ble.n	8001cb6 <__aeabi_ddiv+0x28a>
 8001cb4:	e71f      	b.n	8001af6 <__aeabi_ddiv+0xca>
 8001cb6:	4643      	mov	r3, r8
 8001cb8:	075b      	lsls	r3, r3, #29
 8001cba:	431d      	orrs	r5, r3
 8001cbc:	4643      	mov	r3, r8
 8001cbe:	0552      	lsls	r2, r2, #21
 8001cc0:	025c      	lsls	r4, r3, #9
 8001cc2:	0b24      	lsrs	r4, r4, #12
 8001cc4:	0d53      	lsrs	r3, r2, #21
 8001cc6:	e708      	b.n	8001ada <__aeabi_ddiv+0xae>
 8001cc8:	4652      	mov	r2, sl
 8001cca:	4322      	orrs	r2, r4
 8001ccc:	d100      	bne.n	8001cd0 <__aeabi_ddiv+0x2a4>
 8001cce:	e07b      	b.n	8001dc8 <__aeabi_ddiv+0x39c>
 8001cd0:	2c00      	cmp	r4, #0
 8001cd2:	d100      	bne.n	8001cd6 <__aeabi_ddiv+0x2aa>
 8001cd4:	e0fa      	b.n	8001ecc <__aeabi_ddiv+0x4a0>
 8001cd6:	0020      	movs	r0, r4
 8001cd8:	f001 fa22 	bl	8003120 <__clzsi2>
 8001cdc:	0002      	movs	r2, r0
 8001cde:	3a0b      	subs	r2, #11
 8001ce0:	231d      	movs	r3, #29
 8001ce2:	0001      	movs	r1, r0
 8001ce4:	1a9b      	subs	r3, r3, r2
 8001ce6:	4652      	mov	r2, sl
 8001ce8:	3908      	subs	r1, #8
 8001cea:	40da      	lsrs	r2, r3
 8001cec:	408c      	lsls	r4, r1
 8001cee:	4314      	orrs	r4, r2
 8001cf0:	4652      	mov	r2, sl
 8001cf2:	408a      	lsls	r2, r1
 8001cf4:	4b31      	ldr	r3, [pc, #196]	; (8001dbc <__aeabi_ddiv+0x390>)
 8001cf6:	4458      	add	r0, fp
 8001cf8:	469b      	mov	fp, r3
 8001cfa:	4483      	add	fp, r0
 8001cfc:	2000      	movs	r0, #0
 8001cfe:	e6d5      	b.n	8001aac <__aeabi_ddiv+0x80>
 8001d00:	464b      	mov	r3, r9
 8001d02:	4323      	orrs	r3, r4
 8001d04:	4698      	mov	r8, r3
 8001d06:	d044      	beq.n	8001d92 <__aeabi_ddiv+0x366>
 8001d08:	2c00      	cmp	r4, #0
 8001d0a:	d100      	bne.n	8001d0e <__aeabi_ddiv+0x2e2>
 8001d0c:	e0ce      	b.n	8001eac <__aeabi_ddiv+0x480>
 8001d0e:	0020      	movs	r0, r4
 8001d10:	f001 fa06 	bl	8003120 <__clzsi2>
 8001d14:	0001      	movs	r1, r0
 8001d16:	0002      	movs	r2, r0
 8001d18:	390b      	subs	r1, #11
 8001d1a:	231d      	movs	r3, #29
 8001d1c:	1a5b      	subs	r3, r3, r1
 8001d1e:	4649      	mov	r1, r9
 8001d20:	0010      	movs	r0, r2
 8001d22:	40d9      	lsrs	r1, r3
 8001d24:	3808      	subs	r0, #8
 8001d26:	4084      	lsls	r4, r0
 8001d28:	000b      	movs	r3, r1
 8001d2a:	464d      	mov	r5, r9
 8001d2c:	4323      	orrs	r3, r4
 8001d2e:	4698      	mov	r8, r3
 8001d30:	4085      	lsls	r5, r0
 8001d32:	4823      	ldr	r0, [pc, #140]	; (8001dc0 <__aeabi_ddiv+0x394>)
 8001d34:	1a83      	subs	r3, r0, r2
 8001d36:	469b      	mov	fp, r3
 8001d38:	2300      	movs	r3, #0
 8001d3a:	4699      	mov	r9, r3
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	e69a      	b.n	8001a76 <__aeabi_ddiv+0x4a>
 8001d40:	464b      	mov	r3, r9
 8001d42:	4323      	orrs	r3, r4
 8001d44:	4698      	mov	r8, r3
 8001d46:	d11d      	bne.n	8001d84 <__aeabi_ddiv+0x358>
 8001d48:	2308      	movs	r3, #8
 8001d4a:	4699      	mov	r9, r3
 8001d4c:	3b06      	subs	r3, #6
 8001d4e:	2500      	movs	r5, #0
 8001d50:	4683      	mov	fp, r0
 8001d52:	9300      	str	r3, [sp, #0]
 8001d54:	e68f      	b.n	8001a76 <__aeabi_ddiv+0x4a>
 8001d56:	4652      	mov	r2, sl
 8001d58:	4322      	orrs	r2, r4
 8001d5a:	d109      	bne.n	8001d70 <__aeabi_ddiv+0x344>
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	4649      	mov	r1, r9
 8001d60:	4319      	orrs	r1, r3
 8001d62:	4b18      	ldr	r3, [pc, #96]	; (8001dc4 <__aeabi_ddiv+0x398>)
 8001d64:	4689      	mov	r9, r1
 8001d66:	469c      	mov	ip, r3
 8001d68:	2400      	movs	r4, #0
 8001d6a:	2002      	movs	r0, #2
 8001d6c:	44e3      	add	fp, ip
 8001d6e:	e69d      	b.n	8001aac <__aeabi_ddiv+0x80>
 8001d70:	2303      	movs	r3, #3
 8001d72:	464a      	mov	r2, r9
 8001d74:	431a      	orrs	r2, r3
 8001d76:	4b13      	ldr	r3, [pc, #76]	; (8001dc4 <__aeabi_ddiv+0x398>)
 8001d78:	4691      	mov	r9, r2
 8001d7a:	469c      	mov	ip, r3
 8001d7c:	4652      	mov	r2, sl
 8001d7e:	2003      	movs	r0, #3
 8001d80:	44e3      	add	fp, ip
 8001d82:	e693      	b.n	8001aac <__aeabi_ddiv+0x80>
 8001d84:	230c      	movs	r3, #12
 8001d86:	4699      	mov	r9, r3
 8001d88:	3b09      	subs	r3, #9
 8001d8a:	46a0      	mov	r8, r4
 8001d8c:	4683      	mov	fp, r0
 8001d8e:	9300      	str	r3, [sp, #0]
 8001d90:	e671      	b.n	8001a76 <__aeabi_ddiv+0x4a>
 8001d92:	2304      	movs	r3, #4
 8001d94:	4699      	mov	r9, r3
 8001d96:	2300      	movs	r3, #0
 8001d98:	469b      	mov	fp, r3
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	2500      	movs	r5, #0
 8001d9e:	9300      	str	r3, [sp, #0]
 8001da0:	e669      	b.n	8001a76 <__aeabi_ddiv+0x4a>
 8001da2:	46c0      	nop			; (mov r8, r8)
 8001da4:	000007ff 	.word	0x000007ff
 8001da8:	fffffc01 	.word	0xfffffc01
 8001dac:	08013154 	.word	0x08013154
 8001db0:	000003ff 	.word	0x000003ff
 8001db4:	feffffff 	.word	0xfeffffff
 8001db8:	000007fe 	.word	0x000007fe
 8001dbc:	000003f3 	.word	0x000003f3
 8001dc0:	fffffc0d 	.word	0xfffffc0d
 8001dc4:	fffff801 	.word	0xfffff801
 8001dc8:	4649      	mov	r1, r9
 8001dca:	2301      	movs	r3, #1
 8001dcc:	4319      	orrs	r1, r3
 8001dce:	4689      	mov	r9, r1
 8001dd0:	2400      	movs	r4, #0
 8001dd2:	2001      	movs	r0, #1
 8001dd4:	e66a      	b.n	8001aac <__aeabi_ddiv+0x80>
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	2480      	movs	r4, #128	; 0x80
 8001dda:	469a      	mov	sl, r3
 8001ddc:	2500      	movs	r5, #0
 8001dde:	4b8a      	ldr	r3, [pc, #552]	; (8002008 <__aeabi_ddiv+0x5dc>)
 8001de0:	0324      	lsls	r4, r4, #12
 8001de2:	e67a      	b.n	8001ada <__aeabi_ddiv+0xae>
 8001de4:	2501      	movs	r5, #1
 8001de6:	426d      	negs	r5, r5
 8001de8:	2301      	movs	r3, #1
 8001dea:	1a9b      	subs	r3, r3, r2
 8001dec:	2b38      	cmp	r3, #56	; 0x38
 8001dee:	dd00      	ble.n	8001df2 <__aeabi_ddiv+0x3c6>
 8001df0:	e670      	b.n	8001ad4 <__aeabi_ddiv+0xa8>
 8001df2:	2b1f      	cmp	r3, #31
 8001df4:	dc00      	bgt.n	8001df8 <__aeabi_ddiv+0x3cc>
 8001df6:	e0bf      	b.n	8001f78 <__aeabi_ddiv+0x54c>
 8001df8:	211f      	movs	r1, #31
 8001dfa:	4249      	negs	r1, r1
 8001dfc:	1a8a      	subs	r2, r1, r2
 8001dfe:	4641      	mov	r1, r8
 8001e00:	40d1      	lsrs	r1, r2
 8001e02:	000a      	movs	r2, r1
 8001e04:	2b20      	cmp	r3, #32
 8001e06:	d004      	beq.n	8001e12 <__aeabi_ddiv+0x3e6>
 8001e08:	4641      	mov	r1, r8
 8001e0a:	4b80      	ldr	r3, [pc, #512]	; (800200c <__aeabi_ddiv+0x5e0>)
 8001e0c:	445b      	add	r3, fp
 8001e0e:	4099      	lsls	r1, r3
 8001e10:	430d      	orrs	r5, r1
 8001e12:	1e6b      	subs	r3, r5, #1
 8001e14:	419d      	sbcs	r5, r3
 8001e16:	2307      	movs	r3, #7
 8001e18:	432a      	orrs	r2, r5
 8001e1a:	001d      	movs	r5, r3
 8001e1c:	2400      	movs	r4, #0
 8001e1e:	4015      	ands	r5, r2
 8001e20:	4213      	tst	r3, r2
 8001e22:	d100      	bne.n	8001e26 <__aeabi_ddiv+0x3fa>
 8001e24:	e0d4      	b.n	8001fd0 <__aeabi_ddiv+0x5a4>
 8001e26:	210f      	movs	r1, #15
 8001e28:	2300      	movs	r3, #0
 8001e2a:	4011      	ands	r1, r2
 8001e2c:	2904      	cmp	r1, #4
 8001e2e:	d100      	bne.n	8001e32 <__aeabi_ddiv+0x406>
 8001e30:	e0cb      	b.n	8001fca <__aeabi_ddiv+0x59e>
 8001e32:	1d11      	adds	r1, r2, #4
 8001e34:	4291      	cmp	r1, r2
 8001e36:	4192      	sbcs	r2, r2
 8001e38:	4252      	negs	r2, r2
 8001e3a:	189b      	adds	r3, r3, r2
 8001e3c:	000a      	movs	r2, r1
 8001e3e:	0219      	lsls	r1, r3, #8
 8001e40:	d400      	bmi.n	8001e44 <__aeabi_ddiv+0x418>
 8001e42:	e0c2      	b.n	8001fca <__aeabi_ddiv+0x59e>
 8001e44:	2301      	movs	r3, #1
 8001e46:	2400      	movs	r4, #0
 8001e48:	2500      	movs	r5, #0
 8001e4a:	e646      	b.n	8001ada <__aeabi_ddiv+0xae>
 8001e4c:	2380      	movs	r3, #128	; 0x80
 8001e4e:	4641      	mov	r1, r8
 8001e50:	031b      	lsls	r3, r3, #12
 8001e52:	4219      	tst	r1, r3
 8001e54:	d008      	beq.n	8001e68 <__aeabi_ddiv+0x43c>
 8001e56:	421c      	tst	r4, r3
 8001e58:	d106      	bne.n	8001e68 <__aeabi_ddiv+0x43c>
 8001e5a:	431c      	orrs	r4, r3
 8001e5c:	0324      	lsls	r4, r4, #12
 8001e5e:	46ba      	mov	sl, r7
 8001e60:	0015      	movs	r5, r2
 8001e62:	4b69      	ldr	r3, [pc, #420]	; (8002008 <__aeabi_ddiv+0x5dc>)
 8001e64:	0b24      	lsrs	r4, r4, #12
 8001e66:	e638      	b.n	8001ada <__aeabi_ddiv+0xae>
 8001e68:	2480      	movs	r4, #128	; 0x80
 8001e6a:	4643      	mov	r3, r8
 8001e6c:	0324      	lsls	r4, r4, #12
 8001e6e:	431c      	orrs	r4, r3
 8001e70:	0324      	lsls	r4, r4, #12
 8001e72:	46b2      	mov	sl, r6
 8001e74:	4b64      	ldr	r3, [pc, #400]	; (8002008 <__aeabi_ddiv+0x5dc>)
 8001e76:	0b24      	lsrs	r4, r4, #12
 8001e78:	e62f      	b.n	8001ada <__aeabi_ddiv+0xae>
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d100      	bne.n	8001e80 <__aeabi_ddiv+0x454>
 8001e7e:	e703      	b.n	8001c88 <__aeabi_ddiv+0x25c>
 8001e80:	19a6      	adds	r6, r4, r6
 8001e82:	1e68      	subs	r0, r5, #1
 8001e84:	42a6      	cmp	r6, r4
 8001e86:	d200      	bcs.n	8001e8a <__aeabi_ddiv+0x45e>
 8001e88:	e08d      	b.n	8001fa6 <__aeabi_ddiv+0x57a>
 8001e8a:	428e      	cmp	r6, r1
 8001e8c:	d200      	bcs.n	8001e90 <__aeabi_ddiv+0x464>
 8001e8e:	e0a3      	b.n	8001fd8 <__aeabi_ddiv+0x5ac>
 8001e90:	d100      	bne.n	8001e94 <__aeabi_ddiv+0x468>
 8001e92:	e0b3      	b.n	8001ffc <__aeabi_ddiv+0x5d0>
 8001e94:	0005      	movs	r5, r0
 8001e96:	e6f5      	b.n	8001c84 <__aeabi_ddiv+0x258>
 8001e98:	42aa      	cmp	r2, r5
 8001e9a:	d900      	bls.n	8001e9e <__aeabi_ddiv+0x472>
 8001e9c:	e639      	b.n	8001b12 <__aeabi_ddiv+0xe6>
 8001e9e:	4643      	mov	r3, r8
 8001ea0:	07de      	lsls	r6, r3, #31
 8001ea2:	0858      	lsrs	r0, r3, #1
 8001ea4:	086b      	lsrs	r3, r5, #1
 8001ea6:	431e      	orrs	r6, r3
 8001ea8:	07ed      	lsls	r5, r5, #31
 8001eaa:	e639      	b.n	8001b20 <__aeabi_ddiv+0xf4>
 8001eac:	4648      	mov	r0, r9
 8001eae:	f001 f937 	bl	8003120 <__clzsi2>
 8001eb2:	0001      	movs	r1, r0
 8001eb4:	0002      	movs	r2, r0
 8001eb6:	3115      	adds	r1, #21
 8001eb8:	3220      	adds	r2, #32
 8001eba:	291c      	cmp	r1, #28
 8001ebc:	dc00      	bgt.n	8001ec0 <__aeabi_ddiv+0x494>
 8001ebe:	e72c      	b.n	8001d1a <__aeabi_ddiv+0x2ee>
 8001ec0:	464b      	mov	r3, r9
 8001ec2:	3808      	subs	r0, #8
 8001ec4:	4083      	lsls	r3, r0
 8001ec6:	2500      	movs	r5, #0
 8001ec8:	4698      	mov	r8, r3
 8001eca:	e732      	b.n	8001d32 <__aeabi_ddiv+0x306>
 8001ecc:	f001 f928 	bl	8003120 <__clzsi2>
 8001ed0:	0003      	movs	r3, r0
 8001ed2:	001a      	movs	r2, r3
 8001ed4:	3215      	adds	r2, #21
 8001ed6:	3020      	adds	r0, #32
 8001ed8:	2a1c      	cmp	r2, #28
 8001eda:	dc00      	bgt.n	8001ede <__aeabi_ddiv+0x4b2>
 8001edc:	e700      	b.n	8001ce0 <__aeabi_ddiv+0x2b4>
 8001ede:	4654      	mov	r4, sl
 8001ee0:	3b08      	subs	r3, #8
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	409c      	lsls	r4, r3
 8001ee6:	e705      	b.n	8001cf4 <__aeabi_ddiv+0x2c8>
 8001ee8:	1936      	adds	r6, r6, r4
 8001eea:	3b01      	subs	r3, #1
 8001eec:	42b4      	cmp	r4, r6
 8001eee:	d900      	bls.n	8001ef2 <__aeabi_ddiv+0x4c6>
 8001ef0:	e6a6      	b.n	8001c40 <__aeabi_ddiv+0x214>
 8001ef2:	42b2      	cmp	r2, r6
 8001ef4:	d800      	bhi.n	8001ef8 <__aeabi_ddiv+0x4cc>
 8001ef6:	e6a3      	b.n	8001c40 <__aeabi_ddiv+0x214>
 8001ef8:	1e83      	subs	r3, r0, #2
 8001efa:	1936      	adds	r6, r6, r4
 8001efc:	e6a0      	b.n	8001c40 <__aeabi_ddiv+0x214>
 8001efe:	1909      	adds	r1, r1, r4
 8001f00:	3d01      	subs	r5, #1
 8001f02:	428c      	cmp	r4, r1
 8001f04:	d900      	bls.n	8001f08 <__aeabi_ddiv+0x4dc>
 8001f06:	e68d      	b.n	8001c24 <__aeabi_ddiv+0x1f8>
 8001f08:	428a      	cmp	r2, r1
 8001f0a:	d800      	bhi.n	8001f0e <__aeabi_ddiv+0x4e2>
 8001f0c:	e68a      	b.n	8001c24 <__aeabi_ddiv+0x1f8>
 8001f0e:	1e85      	subs	r5, r0, #2
 8001f10:	1909      	adds	r1, r1, r4
 8001f12:	e687      	b.n	8001c24 <__aeabi_ddiv+0x1f8>
 8001f14:	230f      	movs	r3, #15
 8001f16:	402b      	ands	r3, r5
 8001f18:	2b04      	cmp	r3, #4
 8001f1a:	d100      	bne.n	8001f1e <__aeabi_ddiv+0x4f2>
 8001f1c:	e6bc      	b.n	8001c98 <__aeabi_ddiv+0x26c>
 8001f1e:	2305      	movs	r3, #5
 8001f20:	425b      	negs	r3, r3
 8001f22:	42ab      	cmp	r3, r5
 8001f24:	419b      	sbcs	r3, r3
 8001f26:	3504      	adds	r5, #4
 8001f28:	425b      	negs	r3, r3
 8001f2a:	08ed      	lsrs	r5, r5, #3
 8001f2c:	4498      	add	r8, r3
 8001f2e:	e6b4      	b.n	8001c9a <__aeabi_ddiv+0x26e>
 8001f30:	42af      	cmp	r7, r5
 8001f32:	d900      	bls.n	8001f36 <__aeabi_ddiv+0x50a>
 8001f34:	e660      	b.n	8001bf8 <__aeabi_ddiv+0x1cc>
 8001f36:	4282      	cmp	r2, r0
 8001f38:	d804      	bhi.n	8001f44 <__aeabi_ddiv+0x518>
 8001f3a:	d000      	beq.n	8001f3e <__aeabi_ddiv+0x512>
 8001f3c:	e65c      	b.n	8001bf8 <__aeabi_ddiv+0x1cc>
 8001f3e:	42ae      	cmp	r6, r5
 8001f40:	d800      	bhi.n	8001f44 <__aeabi_ddiv+0x518>
 8001f42:	e659      	b.n	8001bf8 <__aeabi_ddiv+0x1cc>
 8001f44:	2302      	movs	r3, #2
 8001f46:	425b      	negs	r3, r3
 8001f48:	469c      	mov	ip, r3
 8001f4a:	9b00      	ldr	r3, [sp, #0]
 8001f4c:	44e0      	add	r8, ip
 8001f4e:	469c      	mov	ip, r3
 8001f50:	4465      	add	r5, ip
 8001f52:	429d      	cmp	r5, r3
 8001f54:	419b      	sbcs	r3, r3
 8001f56:	425b      	negs	r3, r3
 8001f58:	191b      	adds	r3, r3, r4
 8001f5a:	18c0      	adds	r0, r0, r3
 8001f5c:	e64d      	b.n	8001bfa <__aeabi_ddiv+0x1ce>
 8001f5e:	428a      	cmp	r2, r1
 8001f60:	d800      	bhi.n	8001f64 <__aeabi_ddiv+0x538>
 8001f62:	e60e      	b.n	8001b82 <__aeabi_ddiv+0x156>
 8001f64:	1e83      	subs	r3, r0, #2
 8001f66:	1909      	adds	r1, r1, r4
 8001f68:	e60b      	b.n	8001b82 <__aeabi_ddiv+0x156>
 8001f6a:	428a      	cmp	r2, r1
 8001f6c:	d800      	bhi.n	8001f70 <__aeabi_ddiv+0x544>
 8001f6e:	e5f4      	b.n	8001b5a <__aeabi_ddiv+0x12e>
 8001f70:	1e83      	subs	r3, r0, #2
 8001f72:	4698      	mov	r8, r3
 8001f74:	1909      	adds	r1, r1, r4
 8001f76:	e5f0      	b.n	8001b5a <__aeabi_ddiv+0x12e>
 8001f78:	4925      	ldr	r1, [pc, #148]	; (8002010 <__aeabi_ddiv+0x5e4>)
 8001f7a:	0028      	movs	r0, r5
 8001f7c:	4459      	add	r1, fp
 8001f7e:	408d      	lsls	r5, r1
 8001f80:	4642      	mov	r2, r8
 8001f82:	408a      	lsls	r2, r1
 8001f84:	1e69      	subs	r1, r5, #1
 8001f86:	418d      	sbcs	r5, r1
 8001f88:	4641      	mov	r1, r8
 8001f8a:	40d8      	lsrs	r0, r3
 8001f8c:	40d9      	lsrs	r1, r3
 8001f8e:	4302      	orrs	r2, r0
 8001f90:	432a      	orrs	r2, r5
 8001f92:	000b      	movs	r3, r1
 8001f94:	0751      	lsls	r1, r2, #29
 8001f96:	d100      	bne.n	8001f9a <__aeabi_ddiv+0x56e>
 8001f98:	e751      	b.n	8001e3e <__aeabi_ddiv+0x412>
 8001f9a:	210f      	movs	r1, #15
 8001f9c:	4011      	ands	r1, r2
 8001f9e:	2904      	cmp	r1, #4
 8001fa0:	d000      	beq.n	8001fa4 <__aeabi_ddiv+0x578>
 8001fa2:	e746      	b.n	8001e32 <__aeabi_ddiv+0x406>
 8001fa4:	e74b      	b.n	8001e3e <__aeabi_ddiv+0x412>
 8001fa6:	0005      	movs	r5, r0
 8001fa8:	428e      	cmp	r6, r1
 8001faa:	d000      	beq.n	8001fae <__aeabi_ddiv+0x582>
 8001fac:	e66a      	b.n	8001c84 <__aeabi_ddiv+0x258>
 8001fae:	9a00      	ldr	r2, [sp, #0]
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d000      	beq.n	8001fb6 <__aeabi_ddiv+0x58a>
 8001fb4:	e666      	b.n	8001c84 <__aeabi_ddiv+0x258>
 8001fb6:	e667      	b.n	8001c88 <__aeabi_ddiv+0x25c>
 8001fb8:	4a16      	ldr	r2, [pc, #88]	; (8002014 <__aeabi_ddiv+0x5e8>)
 8001fba:	445a      	add	r2, fp
 8001fbc:	2a00      	cmp	r2, #0
 8001fbe:	dc00      	bgt.n	8001fc2 <__aeabi_ddiv+0x596>
 8001fc0:	e710      	b.n	8001de4 <__aeabi_ddiv+0x3b8>
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	2500      	movs	r5, #0
 8001fc6:	4498      	add	r8, r3
 8001fc8:	e667      	b.n	8001c9a <__aeabi_ddiv+0x26e>
 8001fca:	075d      	lsls	r5, r3, #29
 8001fcc:	025b      	lsls	r3, r3, #9
 8001fce:	0b1c      	lsrs	r4, r3, #12
 8001fd0:	08d2      	lsrs	r2, r2, #3
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	4315      	orrs	r5, r2
 8001fd6:	e580      	b.n	8001ada <__aeabi_ddiv+0xae>
 8001fd8:	9800      	ldr	r0, [sp, #0]
 8001fda:	3d02      	subs	r5, #2
 8001fdc:	0042      	lsls	r2, r0, #1
 8001fde:	4282      	cmp	r2, r0
 8001fe0:	41bf      	sbcs	r7, r7
 8001fe2:	427f      	negs	r7, r7
 8001fe4:	193c      	adds	r4, r7, r4
 8001fe6:	1936      	adds	r6, r6, r4
 8001fe8:	9200      	str	r2, [sp, #0]
 8001fea:	e7dd      	b.n	8001fa8 <__aeabi_ddiv+0x57c>
 8001fec:	2480      	movs	r4, #128	; 0x80
 8001fee:	4643      	mov	r3, r8
 8001ff0:	0324      	lsls	r4, r4, #12
 8001ff2:	431c      	orrs	r4, r3
 8001ff4:	0324      	lsls	r4, r4, #12
 8001ff6:	4b04      	ldr	r3, [pc, #16]	; (8002008 <__aeabi_ddiv+0x5dc>)
 8001ff8:	0b24      	lsrs	r4, r4, #12
 8001ffa:	e56e      	b.n	8001ada <__aeabi_ddiv+0xae>
 8001ffc:	9a00      	ldr	r2, [sp, #0]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d3ea      	bcc.n	8001fd8 <__aeabi_ddiv+0x5ac>
 8002002:	0005      	movs	r5, r0
 8002004:	e7d3      	b.n	8001fae <__aeabi_ddiv+0x582>
 8002006:	46c0      	nop			; (mov r8, r8)
 8002008:	000007ff 	.word	0x000007ff
 800200c:	0000043e 	.word	0x0000043e
 8002010:	0000041e 	.word	0x0000041e
 8002014:	000003ff 	.word	0x000003ff

08002018 <__eqdf2>:
 8002018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800201a:	464e      	mov	r6, r9
 800201c:	4645      	mov	r5, r8
 800201e:	46de      	mov	lr, fp
 8002020:	4657      	mov	r7, sl
 8002022:	4690      	mov	r8, r2
 8002024:	b5e0      	push	{r5, r6, r7, lr}
 8002026:	0017      	movs	r7, r2
 8002028:	031a      	lsls	r2, r3, #12
 800202a:	0b12      	lsrs	r2, r2, #12
 800202c:	0005      	movs	r5, r0
 800202e:	4684      	mov	ip, r0
 8002030:	4819      	ldr	r0, [pc, #100]	; (8002098 <__eqdf2+0x80>)
 8002032:	030e      	lsls	r6, r1, #12
 8002034:	004c      	lsls	r4, r1, #1
 8002036:	4691      	mov	r9, r2
 8002038:	005a      	lsls	r2, r3, #1
 800203a:	0fdb      	lsrs	r3, r3, #31
 800203c:	469b      	mov	fp, r3
 800203e:	0b36      	lsrs	r6, r6, #12
 8002040:	0d64      	lsrs	r4, r4, #21
 8002042:	0fc9      	lsrs	r1, r1, #31
 8002044:	0d52      	lsrs	r2, r2, #21
 8002046:	4284      	cmp	r4, r0
 8002048:	d019      	beq.n	800207e <__eqdf2+0x66>
 800204a:	4282      	cmp	r2, r0
 800204c:	d010      	beq.n	8002070 <__eqdf2+0x58>
 800204e:	2001      	movs	r0, #1
 8002050:	4294      	cmp	r4, r2
 8002052:	d10e      	bne.n	8002072 <__eqdf2+0x5a>
 8002054:	454e      	cmp	r6, r9
 8002056:	d10c      	bne.n	8002072 <__eqdf2+0x5a>
 8002058:	2001      	movs	r0, #1
 800205a:	45c4      	cmp	ip, r8
 800205c:	d109      	bne.n	8002072 <__eqdf2+0x5a>
 800205e:	4559      	cmp	r1, fp
 8002060:	d017      	beq.n	8002092 <__eqdf2+0x7a>
 8002062:	2c00      	cmp	r4, #0
 8002064:	d105      	bne.n	8002072 <__eqdf2+0x5a>
 8002066:	0030      	movs	r0, r6
 8002068:	4328      	orrs	r0, r5
 800206a:	1e43      	subs	r3, r0, #1
 800206c:	4198      	sbcs	r0, r3
 800206e:	e000      	b.n	8002072 <__eqdf2+0x5a>
 8002070:	2001      	movs	r0, #1
 8002072:	bcf0      	pop	{r4, r5, r6, r7}
 8002074:	46bb      	mov	fp, r7
 8002076:	46b2      	mov	sl, r6
 8002078:	46a9      	mov	r9, r5
 800207a:	46a0      	mov	r8, r4
 800207c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800207e:	0033      	movs	r3, r6
 8002080:	2001      	movs	r0, #1
 8002082:	432b      	orrs	r3, r5
 8002084:	d1f5      	bne.n	8002072 <__eqdf2+0x5a>
 8002086:	42a2      	cmp	r2, r4
 8002088:	d1f3      	bne.n	8002072 <__eqdf2+0x5a>
 800208a:	464b      	mov	r3, r9
 800208c:	433b      	orrs	r3, r7
 800208e:	d1f0      	bne.n	8002072 <__eqdf2+0x5a>
 8002090:	e7e2      	b.n	8002058 <__eqdf2+0x40>
 8002092:	2000      	movs	r0, #0
 8002094:	e7ed      	b.n	8002072 <__eqdf2+0x5a>
 8002096:	46c0      	nop			; (mov r8, r8)
 8002098:	000007ff 	.word	0x000007ff

0800209c <__gedf2>:
 800209c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800209e:	4647      	mov	r7, r8
 80020a0:	46ce      	mov	lr, r9
 80020a2:	0004      	movs	r4, r0
 80020a4:	0018      	movs	r0, r3
 80020a6:	0016      	movs	r6, r2
 80020a8:	031b      	lsls	r3, r3, #12
 80020aa:	0b1b      	lsrs	r3, r3, #12
 80020ac:	4d2d      	ldr	r5, [pc, #180]	; (8002164 <__gedf2+0xc8>)
 80020ae:	004a      	lsls	r2, r1, #1
 80020b0:	4699      	mov	r9, r3
 80020b2:	b580      	push	{r7, lr}
 80020b4:	0043      	lsls	r3, r0, #1
 80020b6:	030f      	lsls	r7, r1, #12
 80020b8:	46a4      	mov	ip, r4
 80020ba:	46b0      	mov	r8, r6
 80020bc:	0b3f      	lsrs	r7, r7, #12
 80020be:	0d52      	lsrs	r2, r2, #21
 80020c0:	0fc9      	lsrs	r1, r1, #31
 80020c2:	0d5b      	lsrs	r3, r3, #21
 80020c4:	0fc0      	lsrs	r0, r0, #31
 80020c6:	42aa      	cmp	r2, r5
 80020c8:	d021      	beq.n	800210e <__gedf2+0x72>
 80020ca:	42ab      	cmp	r3, r5
 80020cc:	d013      	beq.n	80020f6 <__gedf2+0x5a>
 80020ce:	2a00      	cmp	r2, #0
 80020d0:	d122      	bne.n	8002118 <__gedf2+0x7c>
 80020d2:	433c      	orrs	r4, r7
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d102      	bne.n	80020de <__gedf2+0x42>
 80020d8:	464d      	mov	r5, r9
 80020da:	432e      	orrs	r6, r5
 80020dc:	d022      	beq.n	8002124 <__gedf2+0x88>
 80020de:	2c00      	cmp	r4, #0
 80020e0:	d010      	beq.n	8002104 <__gedf2+0x68>
 80020e2:	4281      	cmp	r1, r0
 80020e4:	d022      	beq.n	800212c <__gedf2+0x90>
 80020e6:	2002      	movs	r0, #2
 80020e8:	3901      	subs	r1, #1
 80020ea:	4008      	ands	r0, r1
 80020ec:	3801      	subs	r0, #1
 80020ee:	bcc0      	pop	{r6, r7}
 80020f0:	46b9      	mov	r9, r7
 80020f2:	46b0      	mov	r8, r6
 80020f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020f6:	464d      	mov	r5, r9
 80020f8:	432e      	orrs	r6, r5
 80020fa:	d129      	bne.n	8002150 <__gedf2+0xb4>
 80020fc:	2a00      	cmp	r2, #0
 80020fe:	d1f0      	bne.n	80020e2 <__gedf2+0x46>
 8002100:	433c      	orrs	r4, r7
 8002102:	d1ee      	bne.n	80020e2 <__gedf2+0x46>
 8002104:	2800      	cmp	r0, #0
 8002106:	d1f2      	bne.n	80020ee <__gedf2+0x52>
 8002108:	2001      	movs	r0, #1
 800210a:	4240      	negs	r0, r0
 800210c:	e7ef      	b.n	80020ee <__gedf2+0x52>
 800210e:	003d      	movs	r5, r7
 8002110:	4325      	orrs	r5, r4
 8002112:	d11d      	bne.n	8002150 <__gedf2+0xb4>
 8002114:	4293      	cmp	r3, r2
 8002116:	d0ee      	beq.n	80020f6 <__gedf2+0x5a>
 8002118:	2b00      	cmp	r3, #0
 800211a:	d1e2      	bne.n	80020e2 <__gedf2+0x46>
 800211c:	464c      	mov	r4, r9
 800211e:	4326      	orrs	r6, r4
 8002120:	d1df      	bne.n	80020e2 <__gedf2+0x46>
 8002122:	e7e0      	b.n	80020e6 <__gedf2+0x4a>
 8002124:	2000      	movs	r0, #0
 8002126:	2c00      	cmp	r4, #0
 8002128:	d0e1      	beq.n	80020ee <__gedf2+0x52>
 800212a:	e7dc      	b.n	80020e6 <__gedf2+0x4a>
 800212c:	429a      	cmp	r2, r3
 800212e:	dc0a      	bgt.n	8002146 <__gedf2+0xaa>
 8002130:	dbe8      	blt.n	8002104 <__gedf2+0x68>
 8002132:	454f      	cmp	r7, r9
 8002134:	d8d7      	bhi.n	80020e6 <__gedf2+0x4a>
 8002136:	d00e      	beq.n	8002156 <__gedf2+0xba>
 8002138:	2000      	movs	r0, #0
 800213a:	454f      	cmp	r7, r9
 800213c:	d2d7      	bcs.n	80020ee <__gedf2+0x52>
 800213e:	2900      	cmp	r1, #0
 8002140:	d0e2      	beq.n	8002108 <__gedf2+0x6c>
 8002142:	0008      	movs	r0, r1
 8002144:	e7d3      	b.n	80020ee <__gedf2+0x52>
 8002146:	4243      	negs	r3, r0
 8002148:	4158      	adcs	r0, r3
 800214a:	0040      	lsls	r0, r0, #1
 800214c:	3801      	subs	r0, #1
 800214e:	e7ce      	b.n	80020ee <__gedf2+0x52>
 8002150:	2002      	movs	r0, #2
 8002152:	4240      	negs	r0, r0
 8002154:	e7cb      	b.n	80020ee <__gedf2+0x52>
 8002156:	45c4      	cmp	ip, r8
 8002158:	d8c5      	bhi.n	80020e6 <__gedf2+0x4a>
 800215a:	2000      	movs	r0, #0
 800215c:	45c4      	cmp	ip, r8
 800215e:	d2c6      	bcs.n	80020ee <__gedf2+0x52>
 8002160:	e7ed      	b.n	800213e <__gedf2+0xa2>
 8002162:	46c0      	nop			; (mov r8, r8)
 8002164:	000007ff 	.word	0x000007ff

08002168 <__ledf2>:
 8002168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800216a:	4647      	mov	r7, r8
 800216c:	46ce      	mov	lr, r9
 800216e:	0004      	movs	r4, r0
 8002170:	0018      	movs	r0, r3
 8002172:	0016      	movs	r6, r2
 8002174:	031b      	lsls	r3, r3, #12
 8002176:	0b1b      	lsrs	r3, r3, #12
 8002178:	4d2c      	ldr	r5, [pc, #176]	; (800222c <__ledf2+0xc4>)
 800217a:	004a      	lsls	r2, r1, #1
 800217c:	4699      	mov	r9, r3
 800217e:	b580      	push	{r7, lr}
 8002180:	0043      	lsls	r3, r0, #1
 8002182:	030f      	lsls	r7, r1, #12
 8002184:	46a4      	mov	ip, r4
 8002186:	46b0      	mov	r8, r6
 8002188:	0b3f      	lsrs	r7, r7, #12
 800218a:	0d52      	lsrs	r2, r2, #21
 800218c:	0fc9      	lsrs	r1, r1, #31
 800218e:	0d5b      	lsrs	r3, r3, #21
 8002190:	0fc0      	lsrs	r0, r0, #31
 8002192:	42aa      	cmp	r2, r5
 8002194:	d00d      	beq.n	80021b2 <__ledf2+0x4a>
 8002196:	42ab      	cmp	r3, r5
 8002198:	d010      	beq.n	80021bc <__ledf2+0x54>
 800219a:	2a00      	cmp	r2, #0
 800219c:	d127      	bne.n	80021ee <__ledf2+0x86>
 800219e:	433c      	orrs	r4, r7
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d111      	bne.n	80021c8 <__ledf2+0x60>
 80021a4:	464d      	mov	r5, r9
 80021a6:	432e      	orrs	r6, r5
 80021a8:	d10e      	bne.n	80021c8 <__ledf2+0x60>
 80021aa:	2000      	movs	r0, #0
 80021ac:	2c00      	cmp	r4, #0
 80021ae:	d015      	beq.n	80021dc <__ledf2+0x74>
 80021b0:	e00e      	b.n	80021d0 <__ledf2+0x68>
 80021b2:	003d      	movs	r5, r7
 80021b4:	4325      	orrs	r5, r4
 80021b6:	d110      	bne.n	80021da <__ledf2+0x72>
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d118      	bne.n	80021ee <__ledf2+0x86>
 80021bc:	464d      	mov	r5, r9
 80021be:	432e      	orrs	r6, r5
 80021c0:	d10b      	bne.n	80021da <__ledf2+0x72>
 80021c2:	2a00      	cmp	r2, #0
 80021c4:	d102      	bne.n	80021cc <__ledf2+0x64>
 80021c6:	433c      	orrs	r4, r7
 80021c8:	2c00      	cmp	r4, #0
 80021ca:	d00b      	beq.n	80021e4 <__ledf2+0x7c>
 80021cc:	4281      	cmp	r1, r0
 80021ce:	d014      	beq.n	80021fa <__ledf2+0x92>
 80021d0:	2002      	movs	r0, #2
 80021d2:	3901      	subs	r1, #1
 80021d4:	4008      	ands	r0, r1
 80021d6:	3801      	subs	r0, #1
 80021d8:	e000      	b.n	80021dc <__ledf2+0x74>
 80021da:	2002      	movs	r0, #2
 80021dc:	bcc0      	pop	{r6, r7}
 80021de:	46b9      	mov	r9, r7
 80021e0:	46b0      	mov	r8, r6
 80021e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021e4:	2800      	cmp	r0, #0
 80021e6:	d1f9      	bne.n	80021dc <__ledf2+0x74>
 80021e8:	2001      	movs	r0, #1
 80021ea:	4240      	negs	r0, r0
 80021ec:	e7f6      	b.n	80021dc <__ledf2+0x74>
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d1ec      	bne.n	80021cc <__ledf2+0x64>
 80021f2:	464c      	mov	r4, r9
 80021f4:	4326      	orrs	r6, r4
 80021f6:	d1e9      	bne.n	80021cc <__ledf2+0x64>
 80021f8:	e7ea      	b.n	80021d0 <__ledf2+0x68>
 80021fa:	429a      	cmp	r2, r3
 80021fc:	dd04      	ble.n	8002208 <__ledf2+0xa0>
 80021fe:	4243      	negs	r3, r0
 8002200:	4158      	adcs	r0, r3
 8002202:	0040      	lsls	r0, r0, #1
 8002204:	3801      	subs	r0, #1
 8002206:	e7e9      	b.n	80021dc <__ledf2+0x74>
 8002208:	429a      	cmp	r2, r3
 800220a:	dbeb      	blt.n	80021e4 <__ledf2+0x7c>
 800220c:	454f      	cmp	r7, r9
 800220e:	d8df      	bhi.n	80021d0 <__ledf2+0x68>
 8002210:	d006      	beq.n	8002220 <__ledf2+0xb8>
 8002212:	2000      	movs	r0, #0
 8002214:	454f      	cmp	r7, r9
 8002216:	d2e1      	bcs.n	80021dc <__ledf2+0x74>
 8002218:	2900      	cmp	r1, #0
 800221a:	d0e5      	beq.n	80021e8 <__ledf2+0x80>
 800221c:	0008      	movs	r0, r1
 800221e:	e7dd      	b.n	80021dc <__ledf2+0x74>
 8002220:	45c4      	cmp	ip, r8
 8002222:	d8d5      	bhi.n	80021d0 <__ledf2+0x68>
 8002224:	2000      	movs	r0, #0
 8002226:	45c4      	cmp	ip, r8
 8002228:	d2d8      	bcs.n	80021dc <__ledf2+0x74>
 800222a:	e7f5      	b.n	8002218 <__ledf2+0xb0>
 800222c:	000007ff 	.word	0x000007ff

08002230 <__aeabi_dmul>:
 8002230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002232:	4657      	mov	r7, sl
 8002234:	464e      	mov	r6, r9
 8002236:	4645      	mov	r5, r8
 8002238:	46de      	mov	lr, fp
 800223a:	b5e0      	push	{r5, r6, r7, lr}
 800223c:	4698      	mov	r8, r3
 800223e:	030c      	lsls	r4, r1, #12
 8002240:	004b      	lsls	r3, r1, #1
 8002242:	0006      	movs	r6, r0
 8002244:	4692      	mov	sl, r2
 8002246:	b087      	sub	sp, #28
 8002248:	0b24      	lsrs	r4, r4, #12
 800224a:	0d5b      	lsrs	r3, r3, #21
 800224c:	0fcf      	lsrs	r7, r1, #31
 800224e:	2b00      	cmp	r3, #0
 8002250:	d100      	bne.n	8002254 <__aeabi_dmul+0x24>
 8002252:	e15c      	b.n	800250e <__aeabi_dmul+0x2de>
 8002254:	4ad9      	ldr	r2, [pc, #868]	; (80025bc <__aeabi_dmul+0x38c>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d100      	bne.n	800225c <__aeabi_dmul+0x2c>
 800225a:	e175      	b.n	8002548 <__aeabi_dmul+0x318>
 800225c:	0f42      	lsrs	r2, r0, #29
 800225e:	00e4      	lsls	r4, r4, #3
 8002260:	4314      	orrs	r4, r2
 8002262:	2280      	movs	r2, #128	; 0x80
 8002264:	0412      	lsls	r2, r2, #16
 8002266:	4314      	orrs	r4, r2
 8002268:	4ad5      	ldr	r2, [pc, #852]	; (80025c0 <__aeabi_dmul+0x390>)
 800226a:	00c5      	lsls	r5, r0, #3
 800226c:	4694      	mov	ip, r2
 800226e:	4463      	add	r3, ip
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	2300      	movs	r3, #0
 8002274:	4699      	mov	r9, r3
 8002276:	469b      	mov	fp, r3
 8002278:	4643      	mov	r3, r8
 800227a:	4642      	mov	r2, r8
 800227c:	031e      	lsls	r6, r3, #12
 800227e:	0fd2      	lsrs	r2, r2, #31
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	4650      	mov	r0, sl
 8002284:	4690      	mov	r8, r2
 8002286:	0b36      	lsrs	r6, r6, #12
 8002288:	0d5b      	lsrs	r3, r3, #21
 800228a:	d100      	bne.n	800228e <__aeabi_dmul+0x5e>
 800228c:	e120      	b.n	80024d0 <__aeabi_dmul+0x2a0>
 800228e:	4acb      	ldr	r2, [pc, #812]	; (80025bc <__aeabi_dmul+0x38c>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d100      	bne.n	8002296 <__aeabi_dmul+0x66>
 8002294:	e162      	b.n	800255c <__aeabi_dmul+0x32c>
 8002296:	49ca      	ldr	r1, [pc, #808]	; (80025c0 <__aeabi_dmul+0x390>)
 8002298:	0f42      	lsrs	r2, r0, #29
 800229a:	468c      	mov	ip, r1
 800229c:	9900      	ldr	r1, [sp, #0]
 800229e:	4463      	add	r3, ip
 80022a0:	00f6      	lsls	r6, r6, #3
 80022a2:	468c      	mov	ip, r1
 80022a4:	4316      	orrs	r6, r2
 80022a6:	2280      	movs	r2, #128	; 0x80
 80022a8:	449c      	add	ip, r3
 80022aa:	0412      	lsls	r2, r2, #16
 80022ac:	4663      	mov	r3, ip
 80022ae:	4316      	orrs	r6, r2
 80022b0:	00c2      	lsls	r2, r0, #3
 80022b2:	2000      	movs	r0, #0
 80022b4:	9300      	str	r3, [sp, #0]
 80022b6:	9900      	ldr	r1, [sp, #0]
 80022b8:	4643      	mov	r3, r8
 80022ba:	3101      	adds	r1, #1
 80022bc:	468c      	mov	ip, r1
 80022be:	4649      	mov	r1, r9
 80022c0:	407b      	eors	r3, r7
 80022c2:	9301      	str	r3, [sp, #4]
 80022c4:	290f      	cmp	r1, #15
 80022c6:	d826      	bhi.n	8002316 <__aeabi_dmul+0xe6>
 80022c8:	4bbe      	ldr	r3, [pc, #760]	; (80025c4 <__aeabi_dmul+0x394>)
 80022ca:	0089      	lsls	r1, r1, #2
 80022cc:	5859      	ldr	r1, [r3, r1]
 80022ce:	468f      	mov	pc, r1
 80022d0:	4643      	mov	r3, r8
 80022d2:	9301      	str	r3, [sp, #4]
 80022d4:	0034      	movs	r4, r6
 80022d6:	0015      	movs	r5, r2
 80022d8:	4683      	mov	fp, r0
 80022da:	465b      	mov	r3, fp
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d016      	beq.n	800230e <__aeabi_dmul+0xde>
 80022e0:	2b03      	cmp	r3, #3
 80022e2:	d100      	bne.n	80022e6 <__aeabi_dmul+0xb6>
 80022e4:	e203      	b.n	80026ee <__aeabi_dmul+0x4be>
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d000      	beq.n	80022ec <__aeabi_dmul+0xbc>
 80022ea:	e0cd      	b.n	8002488 <__aeabi_dmul+0x258>
 80022ec:	2200      	movs	r2, #0
 80022ee:	2400      	movs	r4, #0
 80022f0:	2500      	movs	r5, #0
 80022f2:	9b01      	ldr	r3, [sp, #4]
 80022f4:	0512      	lsls	r2, r2, #20
 80022f6:	4322      	orrs	r2, r4
 80022f8:	07db      	lsls	r3, r3, #31
 80022fa:	431a      	orrs	r2, r3
 80022fc:	0028      	movs	r0, r5
 80022fe:	0011      	movs	r1, r2
 8002300:	b007      	add	sp, #28
 8002302:	bcf0      	pop	{r4, r5, r6, r7}
 8002304:	46bb      	mov	fp, r7
 8002306:	46b2      	mov	sl, r6
 8002308:	46a9      	mov	r9, r5
 800230a:	46a0      	mov	r8, r4
 800230c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800230e:	2400      	movs	r4, #0
 8002310:	2500      	movs	r5, #0
 8002312:	4aaa      	ldr	r2, [pc, #680]	; (80025bc <__aeabi_dmul+0x38c>)
 8002314:	e7ed      	b.n	80022f2 <__aeabi_dmul+0xc2>
 8002316:	0c28      	lsrs	r0, r5, #16
 8002318:	042d      	lsls	r5, r5, #16
 800231a:	0c2d      	lsrs	r5, r5, #16
 800231c:	002b      	movs	r3, r5
 800231e:	0c11      	lsrs	r1, r2, #16
 8002320:	0412      	lsls	r2, r2, #16
 8002322:	0c12      	lsrs	r2, r2, #16
 8002324:	4353      	muls	r3, r2
 8002326:	4698      	mov	r8, r3
 8002328:	0013      	movs	r3, r2
 800232a:	002f      	movs	r7, r5
 800232c:	4343      	muls	r3, r0
 800232e:	4699      	mov	r9, r3
 8002330:	434f      	muls	r7, r1
 8002332:	444f      	add	r7, r9
 8002334:	46bb      	mov	fp, r7
 8002336:	4647      	mov	r7, r8
 8002338:	000b      	movs	r3, r1
 800233a:	0c3f      	lsrs	r7, r7, #16
 800233c:	46ba      	mov	sl, r7
 800233e:	4343      	muls	r3, r0
 8002340:	44da      	add	sl, fp
 8002342:	9302      	str	r3, [sp, #8]
 8002344:	45d1      	cmp	r9, sl
 8002346:	d904      	bls.n	8002352 <__aeabi_dmul+0x122>
 8002348:	2780      	movs	r7, #128	; 0x80
 800234a:	027f      	lsls	r7, r7, #9
 800234c:	46b9      	mov	r9, r7
 800234e:	444b      	add	r3, r9
 8002350:	9302      	str	r3, [sp, #8]
 8002352:	4653      	mov	r3, sl
 8002354:	0c1b      	lsrs	r3, r3, #16
 8002356:	469b      	mov	fp, r3
 8002358:	4653      	mov	r3, sl
 800235a:	041f      	lsls	r7, r3, #16
 800235c:	4643      	mov	r3, r8
 800235e:	041b      	lsls	r3, r3, #16
 8002360:	0c1b      	lsrs	r3, r3, #16
 8002362:	4698      	mov	r8, r3
 8002364:	003b      	movs	r3, r7
 8002366:	4443      	add	r3, r8
 8002368:	9304      	str	r3, [sp, #16]
 800236a:	0c33      	lsrs	r3, r6, #16
 800236c:	0436      	lsls	r6, r6, #16
 800236e:	0c36      	lsrs	r6, r6, #16
 8002370:	4698      	mov	r8, r3
 8002372:	0033      	movs	r3, r6
 8002374:	4343      	muls	r3, r0
 8002376:	4699      	mov	r9, r3
 8002378:	4643      	mov	r3, r8
 800237a:	4343      	muls	r3, r0
 800237c:	002f      	movs	r7, r5
 800237e:	469a      	mov	sl, r3
 8002380:	4643      	mov	r3, r8
 8002382:	4377      	muls	r7, r6
 8002384:	435d      	muls	r5, r3
 8002386:	0c38      	lsrs	r0, r7, #16
 8002388:	444d      	add	r5, r9
 800238a:	1945      	adds	r5, r0, r5
 800238c:	45a9      	cmp	r9, r5
 800238e:	d903      	bls.n	8002398 <__aeabi_dmul+0x168>
 8002390:	2380      	movs	r3, #128	; 0x80
 8002392:	025b      	lsls	r3, r3, #9
 8002394:	4699      	mov	r9, r3
 8002396:	44ca      	add	sl, r9
 8002398:	043f      	lsls	r7, r7, #16
 800239a:	0c28      	lsrs	r0, r5, #16
 800239c:	0c3f      	lsrs	r7, r7, #16
 800239e:	042d      	lsls	r5, r5, #16
 80023a0:	19ed      	adds	r5, r5, r7
 80023a2:	0c27      	lsrs	r7, r4, #16
 80023a4:	0424      	lsls	r4, r4, #16
 80023a6:	0c24      	lsrs	r4, r4, #16
 80023a8:	0003      	movs	r3, r0
 80023aa:	0020      	movs	r0, r4
 80023ac:	4350      	muls	r0, r2
 80023ae:	437a      	muls	r2, r7
 80023b0:	4691      	mov	r9, r2
 80023b2:	003a      	movs	r2, r7
 80023b4:	4453      	add	r3, sl
 80023b6:	9305      	str	r3, [sp, #20]
 80023b8:	0c03      	lsrs	r3, r0, #16
 80023ba:	469a      	mov	sl, r3
 80023bc:	434a      	muls	r2, r1
 80023be:	4361      	muls	r1, r4
 80023c0:	4449      	add	r1, r9
 80023c2:	4451      	add	r1, sl
 80023c4:	44ab      	add	fp, r5
 80023c6:	4589      	cmp	r9, r1
 80023c8:	d903      	bls.n	80023d2 <__aeabi_dmul+0x1a2>
 80023ca:	2380      	movs	r3, #128	; 0x80
 80023cc:	025b      	lsls	r3, r3, #9
 80023ce:	4699      	mov	r9, r3
 80023d0:	444a      	add	r2, r9
 80023d2:	0400      	lsls	r0, r0, #16
 80023d4:	0c0b      	lsrs	r3, r1, #16
 80023d6:	0c00      	lsrs	r0, r0, #16
 80023d8:	0409      	lsls	r1, r1, #16
 80023da:	1809      	adds	r1, r1, r0
 80023dc:	0020      	movs	r0, r4
 80023de:	4699      	mov	r9, r3
 80023e0:	4643      	mov	r3, r8
 80023e2:	4370      	muls	r0, r6
 80023e4:	435c      	muls	r4, r3
 80023e6:	437e      	muls	r6, r7
 80023e8:	435f      	muls	r7, r3
 80023ea:	0c03      	lsrs	r3, r0, #16
 80023ec:	4698      	mov	r8, r3
 80023ee:	19a4      	adds	r4, r4, r6
 80023f0:	4444      	add	r4, r8
 80023f2:	444a      	add	r2, r9
 80023f4:	9703      	str	r7, [sp, #12]
 80023f6:	42a6      	cmp	r6, r4
 80023f8:	d904      	bls.n	8002404 <__aeabi_dmul+0x1d4>
 80023fa:	2380      	movs	r3, #128	; 0x80
 80023fc:	025b      	lsls	r3, r3, #9
 80023fe:	4698      	mov	r8, r3
 8002400:	4447      	add	r7, r8
 8002402:	9703      	str	r7, [sp, #12]
 8002404:	0423      	lsls	r3, r4, #16
 8002406:	9e02      	ldr	r6, [sp, #8]
 8002408:	469a      	mov	sl, r3
 800240a:	9b05      	ldr	r3, [sp, #20]
 800240c:	445e      	add	r6, fp
 800240e:	4698      	mov	r8, r3
 8002410:	42ae      	cmp	r6, r5
 8002412:	41ad      	sbcs	r5, r5
 8002414:	1876      	adds	r6, r6, r1
 8002416:	428e      	cmp	r6, r1
 8002418:	4189      	sbcs	r1, r1
 800241a:	0400      	lsls	r0, r0, #16
 800241c:	0c00      	lsrs	r0, r0, #16
 800241e:	4450      	add	r0, sl
 8002420:	4440      	add	r0, r8
 8002422:	426d      	negs	r5, r5
 8002424:	1947      	adds	r7, r0, r5
 8002426:	46b8      	mov	r8, r7
 8002428:	4693      	mov	fp, r2
 800242a:	4249      	negs	r1, r1
 800242c:	4689      	mov	r9, r1
 800242e:	44c3      	add	fp, r8
 8002430:	44d9      	add	r9, fp
 8002432:	4298      	cmp	r0, r3
 8002434:	4180      	sbcs	r0, r0
 8002436:	45a8      	cmp	r8, r5
 8002438:	41ad      	sbcs	r5, r5
 800243a:	4593      	cmp	fp, r2
 800243c:	4192      	sbcs	r2, r2
 800243e:	4589      	cmp	r9, r1
 8002440:	4189      	sbcs	r1, r1
 8002442:	426d      	negs	r5, r5
 8002444:	4240      	negs	r0, r0
 8002446:	4328      	orrs	r0, r5
 8002448:	0c24      	lsrs	r4, r4, #16
 800244a:	4252      	negs	r2, r2
 800244c:	4249      	negs	r1, r1
 800244e:	430a      	orrs	r2, r1
 8002450:	9b03      	ldr	r3, [sp, #12]
 8002452:	1900      	adds	r0, r0, r4
 8002454:	1880      	adds	r0, r0, r2
 8002456:	18c7      	adds	r7, r0, r3
 8002458:	464b      	mov	r3, r9
 800245a:	0ddc      	lsrs	r4, r3, #23
 800245c:	9b04      	ldr	r3, [sp, #16]
 800245e:	0275      	lsls	r5, r6, #9
 8002460:	431d      	orrs	r5, r3
 8002462:	1e6a      	subs	r2, r5, #1
 8002464:	4195      	sbcs	r5, r2
 8002466:	464b      	mov	r3, r9
 8002468:	0df6      	lsrs	r6, r6, #23
 800246a:	027f      	lsls	r7, r7, #9
 800246c:	4335      	orrs	r5, r6
 800246e:	025a      	lsls	r2, r3, #9
 8002470:	433c      	orrs	r4, r7
 8002472:	4315      	orrs	r5, r2
 8002474:	01fb      	lsls	r3, r7, #7
 8002476:	d400      	bmi.n	800247a <__aeabi_dmul+0x24a>
 8002478:	e11c      	b.n	80026b4 <__aeabi_dmul+0x484>
 800247a:	2101      	movs	r1, #1
 800247c:	086a      	lsrs	r2, r5, #1
 800247e:	400d      	ands	r5, r1
 8002480:	4315      	orrs	r5, r2
 8002482:	07e2      	lsls	r2, r4, #31
 8002484:	4315      	orrs	r5, r2
 8002486:	0864      	lsrs	r4, r4, #1
 8002488:	494f      	ldr	r1, [pc, #316]	; (80025c8 <__aeabi_dmul+0x398>)
 800248a:	4461      	add	r1, ip
 800248c:	2900      	cmp	r1, #0
 800248e:	dc00      	bgt.n	8002492 <__aeabi_dmul+0x262>
 8002490:	e0b0      	b.n	80025f4 <__aeabi_dmul+0x3c4>
 8002492:	076b      	lsls	r3, r5, #29
 8002494:	d009      	beq.n	80024aa <__aeabi_dmul+0x27a>
 8002496:	220f      	movs	r2, #15
 8002498:	402a      	ands	r2, r5
 800249a:	2a04      	cmp	r2, #4
 800249c:	d005      	beq.n	80024aa <__aeabi_dmul+0x27a>
 800249e:	1d2a      	adds	r2, r5, #4
 80024a0:	42aa      	cmp	r2, r5
 80024a2:	41ad      	sbcs	r5, r5
 80024a4:	426d      	negs	r5, r5
 80024a6:	1964      	adds	r4, r4, r5
 80024a8:	0015      	movs	r5, r2
 80024aa:	01e3      	lsls	r3, r4, #7
 80024ac:	d504      	bpl.n	80024b8 <__aeabi_dmul+0x288>
 80024ae:	2180      	movs	r1, #128	; 0x80
 80024b0:	4a46      	ldr	r2, [pc, #280]	; (80025cc <__aeabi_dmul+0x39c>)
 80024b2:	00c9      	lsls	r1, r1, #3
 80024b4:	4014      	ands	r4, r2
 80024b6:	4461      	add	r1, ip
 80024b8:	4a45      	ldr	r2, [pc, #276]	; (80025d0 <__aeabi_dmul+0x3a0>)
 80024ba:	4291      	cmp	r1, r2
 80024bc:	dd00      	ble.n	80024c0 <__aeabi_dmul+0x290>
 80024be:	e726      	b.n	800230e <__aeabi_dmul+0xde>
 80024c0:	0762      	lsls	r2, r4, #29
 80024c2:	08ed      	lsrs	r5, r5, #3
 80024c4:	0264      	lsls	r4, r4, #9
 80024c6:	0549      	lsls	r1, r1, #21
 80024c8:	4315      	orrs	r5, r2
 80024ca:	0b24      	lsrs	r4, r4, #12
 80024cc:	0d4a      	lsrs	r2, r1, #21
 80024ce:	e710      	b.n	80022f2 <__aeabi_dmul+0xc2>
 80024d0:	4652      	mov	r2, sl
 80024d2:	4332      	orrs	r2, r6
 80024d4:	d100      	bne.n	80024d8 <__aeabi_dmul+0x2a8>
 80024d6:	e07f      	b.n	80025d8 <__aeabi_dmul+0x3a8>
 80024d8:	2e00      	cmp	r6, #0
 80024da:	d100      	bne.n	80024de <__aeabi_dmul+0x2ae>
 80024dc:	e0dc      	b.n	8002698 <__aeabi_dmul+0x468>
 80024de:	0030      	movs	r0, r6
 80024e0:	f000 fe1e 	bl	8003120 <__clzsi2>
 80024e4:	0002      	movs	r2, r0
 80024e6:	3a0b      	subs	r2, #11
 80024e8:	231d      	movs	r3, #29
 80024ea:	0001      	movs	r1, r0
 80024ec:	1a9b      	subs	r3, r3, r2
 80024ee:	4652      	mov	r2, sl
 80024f0:	3908      	subs	r1, #8
 80024f2:	40da      	lsrs	r2, r3
 80024f4:	408e      	lsls	r6, r1
 80024f6:	4316      	orrs	r6, r2
 80024f8:	4652      	mov	r2, sl
 80024fa:	408a      	lsls	r2, r1
 80024fc:	9b00      	ldr	r3, [sp, #0]
 80024fe:	4935      	ldr	r1, [pc, #212]	; (80025d4 <__aeabi_dmul+0x3a4>)
 8002500:	1a18      	subs	r0, r3, r0
 8002502:	0003      	movs	r3, r0
 8002504:	468c      	mov	ip, r1
 8002506:	4463      	add	r3, ip
 8002508:	2000      	movs	r0, #0
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	e6d3      	b.n	80022b6 <__aeabi_dmul+0x86>
 800250e:	0025      	movs	r5, r4
 8002510:	4305      	orrs	r5, r0
 8002512:	d04a      	beq.n	80025aa <__aeabi_dmul+0x37a>
 8002514:	2c00      	cmp	r4, #0
 8002516:	d100      	bne.n	800251a <__aeabi_dmul+0x2ea>
 8002518:	e0b0      	b.n	800267c <__aeabi_dmul+0x44c>
 800251a:	0020      	movs	r0, r4
 800251c:	f000 fe00 	bl	8003120 <__clzsi2>
 8002520:	0001      	movs	r1, r0
 8002522:	0002      	movs	r2, r0
 8002524:	390b      	subs	r1, #11
 8002526:	231d      	movs	r3, #29
 8002528:	0010      	movs	r0, r2
 800252a:	1a5b      	subs	r3, r3, r1
 800252c:	0031      	movs	r1, r6
 800252e:	0035      	movs	r5, r6
 8002530:	3808      	subs	r0, #8
 8002532:	4084      	lsls	r4, r0
 8002534:	40d9      	lsrs	r1, r3
 8002536:	4085      	lsls	r5, r0
 8002538:	430c      	orrs	r4, r1
 800253a:	4826      	ldr	r0, [pc, #152]	; (80025d4 <__aeabi_dmul+0x3a4>)
 800253c:	1a83      	subs	r3, r0, r2
 800253e:	9300      	str	r3, [sp, #0]
 8002540:	2300      	movs	r3, #0
 8002542:	4699      	mov	r9, r3
 8002544:	469b      	mov	fp, r3
 8002546:	e697      	b.n	8002278 <__aeabi_dmul+0x48>
 8002548:	0005      	movs	r5, r0
 800254a:	4325      	orrs	r5, r4
 800254c:	d126      	bne.n	800259c <__aeabi_dmul+0x36c>
 800254e:	2208      	movs	r2, #8
 8002550:	9300      	str	r3, [sp, #0]
 8002552:	2302      	movs	r3, #2
 8002554:	2400      	movs	r4, #0
 8002556:	4691      	mov	r9, r2
 8002558:	469b      	mov	fp, r3
 800255a:	e68d      	b.n	8002278 <__aeabi_dmul+0x48>
 800255c:	4652      	mov	r2, sl
 800255e:	9b00      	ldr	r3, [sp, #0]
 8002560:	4332      	orrs	r2, r6
 8002562:	d110      	bne.n	8002586 <__aeabi_dmul+0x356>
 8002564:	4915      	ldr	r1, [pc, #84]	; (80025bc <__aeabi_dmul+0x38c>)
 8002566:	2600      	movs	r6, #0
 8002568:	468c      	mov	ip, r1
 800256a:	4463      	add	r3, ip
 800256c:	4649      	mov	r1, r9
 800256e:	9300      	str	r3, [sp, #0]
 8002570:	2302      	movs	r3, #2
 8002572:	4319      	orrs	r1, r3
 8002574:	4689      	mov	r9, r1
 8002576:	2002      	movs	r0, #2
 8002578:	e69d      	b.n	80022b6 <__aeabi_dmul+0x86>
 800257a:	465b      	mov	r3, fp
 800257c:	9701      	str	r7, [sp, #4]
 800257e:	2b02      	cmp	r3, #2
 8002580:	d000      	beq.n	8002584 <__aeabi_dmul+0x354>
 8002582:	e6ad      	b.n	80022e0 <__aeabi_dmul+0xb0>
 8002584:	e6c3      	b.n	800230e <__aeabi_dmul+0xde>
 8002586:	4a0d      	ldr	r2, [pc, #52]	; (80025bc <__aeabi_dmul+0x38c>)
 8002588:	2003      	movs	r0, #3
 800258a:	4694      	mov	ip, r2
 800258c:	4463      	add	r3, ip
 800258e:	464a      	mov	r2, r9
 8002590:	9300      	str	r3, [sp, #0]
 8002592:	2303      	movs	r3, #3
 8002594:	431a      	orrs	r2, r3
 8002596:	4691      	mov	r9, r2
 8002598:	4652      	mov	r2, sl
 800259a:	e68c      	b.n	80022b6 <__aeabi_dmul+0x86>
 800259c:	220c      	movs	r2, #12
 800259e:	9300      	str	r3, [sp, #0]
 80025a0:	2303      	movs	r3, #3
 80025a2:	0005      	movs	r5, r0
 80025a4:	4691      	mov	r9, r2
 80025a6:	469b      	mov	fp, r3
 80025a8:	e666      	b.n	8002278 <__aeabi_dmul+0x48>
 80025aa:	2304      	movs	r3, #4
 80025ac:	4699      	mov	r9, r3
 80025ae:	2300      	movs	r3, #0
 80025b0:	9300      	str	r3, [sp, #0]
 80025b2:	3301      	adds	r3, #1
 80025b4:	2400      	movs	r4, #0
 80025b6:	469b      	mov	fp, r3
 80025b8:	e65e      	b.n	8002278 <__aeabi_dmul+0x48>
 80025ba:	46c0      	nop			; (mov r8, r8)
 80025bc:	000007ff 	.word	0x000007ff
 80025c0:	fffffc01 	.word	0xfffffc01
 80025c4:	08013194 	.word	0x08013194
 80025c8:	000003ff 	.word	0x000003ff
 80025cc:	feffffff 	.word	0xfeffffff
 80025d0:	000007fe 	.word	0x000007fe
 80025d4:	fffffc0d 	.word	0xfffffc0d
 80025d8:	4649      	mov	r1, r9
 80025da:	2301      	movs	r3, #1
 80025dc:	4319      	orrs	r1, r3
 80025de:	4689      	mov	r9, r1
 80025e0:	2600      	movs	r6, #0
 80025e2:	2001      	movs	r0, #1
 80025e4:	e667      	b.n	80022b6 <__aeabi_dmul+0x86>
 80025e6:	2300      	movs	r3, #0
 80025e8:	2480      	movs	r4, #128	; 0x80
 80025ea:	2500      	movs	r5, #0
 80025ec:	4a43      	ldr	r2, [pc, #268]	; (80026fc <__aeabi_dmul+0x4cc>)
 80025ee:	9301      	str	r3, [sp, #4]
 80025f0:	0324      	lsls	r4, r4, #12
 80025f2:	e67e      	b.n	80022f2 <__aeabi_dmul+0xc2>
 80025f4:	2001      	movs	r0, #1
 80025f6:	1a40      	subs	r0, r0, r1
 80025f8:	2838      	cmp	r0, #56	; 0x38
 80025fa:	dd00      	ble.n	80025fe <__aeabi_dmul+0x3ce>
 80025fc:	e676      	b.n	80022ec <__aeabi_dmul+0xbc>
 80025fe:	281f      	cmp	r0, #31
 8002600:	dd5b      	ble.n	80026ba <__aeabi_dmul+0x48a>
 8002602:	221f      	movs	r2, #31
 8002604:	0023      	movs	r3, r4
 8002606:	4252      	negs	r2, r2
 8002608:	1a51      	subs	r1, r2, r1
 800260a:	40cb      	lsrs	r3, r1
 800260c:	0019      	movs	r1, r3
 800260e:	2820      	cmp	r0, #32
 8002610:	d003      	beq.n	800261a <__aeabi_dmul+0x3ea>
 8002612:	4a3b      	ldr	r2, [pc, #236]	; (8002700 <__aeabi_dmul+0x4d0>)
 8002614:	4462      	add	r2, ip
 8002616:	4094      	lsls	r4, r2
 8002618:	4325      	orrs	r5, r4
 800261a:	1e6a      	subs	r2, r5, #1
 800261c:	4195      	sbcs	r5, r2
 800261e:	002a      	movs	r2, r5
 8002620:	430a      	orrs	r2, r1
 8002622:	2107      	movs	r1, #7
 8002624:	000d      	movs	r5, r1
 8002626:	2400      	movs	r4, #0
 8002628:	4015      	ands	r5, r2
 800262a:	4211      	tst	r1, r2
 800262c:	d05b      	beq.n	80026e6 <__aeabi_dmul+0x4b6>
 800262e:	210f      	movs	r1, #15
 8002630:	2400      	movs	r4, #0
 8002632:	4011      	ands	r1, r2
 8002634:	2904      	cmp	r1, #4
 8002636:	d053      	beq.n	80026e0 <__aeabi_dmul+0x4b0>
 8002638:	1d11      	adds	r1, r2, #4
 800263a:	4291      	cmp	r1, r2
 800263c:	4192      	sbcs	r2, r2
 800263e:	4252      	negs	r2, r2
 8002640:	18a4      	adds	r4, r4, r2
 8002642:	000a      	movs	r2, r1
 8002644:	0223      	lsls	r3, r4, #8
 8002646:	d54b      	bpl.n	80026e0 <__aeabi_dmul+0x4b0>
 8002648:	2201      	movs	r2, #1
 800264a:	2400      	movs	r4, #0
 800264c:	2500      	movs	r5, #0
 800264e:	e650      	b.n	80022f2 <__aeabi_dmul+0xc2>
 8002650:	2380      	movs	r3, #128	; 0x80
 8002652:	031b      	lsls	r3, r3, #12
 8002654:	421c      	tst	r4, r3
 8002656:	d009      	beq.n	800266c <__aeabi_dmul+0x43c>
 8002658:	421e      	tst	r6, r3
 800265a:	d107      	bne.n	800266c <__aeabi_dmul+0x43c>
 800265c:	4333      	orrs	r3, r6
 800265e:	031c      	lsls	r4, r3, #12
 8002660:	4643      	mov	r3, r8
 8002662:	0015      	movs	r5, r2
 8002664:	0b24      	lsrs	r4, r4, #12
 8002666:	4a25      	ldr	r2, [pc, #148]	; (80026fc <__aeabi_dmul+0x4cc>)
 8002668:	9301      	str	r3, [sp, #4]
 800266a:	e642      	b.n	80022f2 <__aeabi_dmul+0xc2>
 800266c:	2280      	movs	r2, #128	; 0x80
 800266e:	0312      	lsls	r2, r2, #12
 8002670:	4314      	orrs	r4, r2
 8002672:	0324      	lsls	r4, r4, #12
 8002674:	4a21      	ldr	r2, [pc, #132]	; (80026fc <__aeabi_dmul+0x4cc>)
 8002676:	0b24      	lsrs	r4, r4, #12
 8002678:	9701      	str	r7, [sp, #4]
 800267a:	e63a      	b.n	80022f2 <__aeabi_dmul+0xc2>
 800267c:	f000 fd50 	bl	8003120 <__clzsi2>
 8002680:	0001      	movs	r1, r0
 8002682:	0002      	movs	r2, r0
 8002684:	3115      	adds	r1, #21
 8002686:	3220      	adds	r2, #32
 8002688:	291c      	cmp	r1, #28
 800268a:	dc00      	bgt.n	800268e <__aeabi_dmul+0x45e>
 800268c:	e74b      	b.n	8002526 <__aeabi_dmul+0x2f6>
 800268e:	0034      	movs	r4, r6
 8002690:	3808      	subs	r0, #8
 8002692:	2500      	movs	r5, #0
 8002694:	4084      	lsls	r4, r0
 8002696:	e750      	b.n	800253a <__aeabi_dmul+0x30a>
 8002698:	f000 fd42 	bl	8003120 <__clzsi2>
 800269c:	0003      	movs	r3, r0
 800269e:	001a      	movs	r2, r3
 80026a0:	3215      	adds	r2, #21
 80026a2:	3020      	adds	r0, #32
 80026a4:	2a1c      	cmp	r2, #28
 80026a6:	dc00      	bgt.n	80026aa <__aeabi_dmul+0x47a>
 80026a8:	e71e      	b.n	80024e8 <__aeabi_dmul+0x2b8>
 80026aa:	4656      	mov	r6, sl
 80026ac:	3b08      	subs	r3, #8
 80026ae:	2200      	movs	r2, #0
 80026b0:	409e      	lsls	r6, r3
 80026b2:	e723      	b.n	80024fc <__aeabi_dmul+0x2cc>
 80026b4:	9b00      	ldr	r3, [sp, #0]
 80026b6:	469c      	mov	ip, r3
 80026b8:	e6e6      	b.n	8002488 <__aeabi_dmul+0x258>
 80026ba:	4912      	ldr	r1, [pc, #72]	; (8002704 <__aeabi_dmul+0x4d4>)
 80026bc:	0022      	movs	r2, r4
 80026be:	4461      	add	r1, ip
 80026c0:	002e      	movs	r6, r5
 80026c2:	408d      	lsls	r5, r1
 80026c4:	408a      	lsls	r2, r1
 80026c6:	40c6      	lsrs	r6, r0
 80026c8:	1e69      	subs	r1, r5, #1
 80026ca:	418d      	sbcs	r5, r1
 80026cc:	4332      	orrs	r2, r6
 80026ce:	432a      	orrs	r2, r5
 80026d0:	40c4      	lsrs	r4, r0
 80026d2:	0753      	lsls	r3, r2, #29
 80026d4:	d0b6      	beq.n	8002644 <__aeabi_dmul+0x414>
 80026d6:	210f      	movs	r1, #15
 80026d8:	4011      	ands	r1, r2
 80026da:	2904      	cmp	r1, #4
 80026dc:	d1ac      	bne.n	8002638 <__aeabi_dmul+0x408>
 80026de:	e7b1      	b.n	8002644 <__aeabi_dmul+0x414>
 80026e0:	0765      	lsls	r5, r4, #29
 80026e2:	0264      	lsls	r4, r4, #9
 80026e4:	0b24      	lsrs	r4, r4, #12
 80026e6:	08d2      	lsrs	r2, r2, #3
 80026e8:	4315      	orrs	r5, r2
 80026ea:	2200      	movs	r2, #0
 80026ec:	e601      	b.n	80022f2 <__aeabi_dmul+0xc2>
 80026ee:	2280      	movs	r2, #128	; 0x80
 80026f0:	0312      	lsls	r2, r2, #12
 80026f2:	4314      	orrs	r4, r2
 80026f4:	0324      	lsls	r4, r4, #12
 80026f6:	4a01      	ldr	r2, [pc, #4]	; (80026fc <__aeabi_dmul+0x4cc>)
 80026f8:	0b24      	lsrs	r4, r4, #12
 80026fa:	e5fa      	b.n	80022f2 <__aeabi_dmul+0xc2>
 80026fc:	000007ff 	.word	0x000007ff
 8002700:	0000043e 	.word	0x0000043e
 8002704:	0000041e 	.word	0x0000041e

08002708 <__aeabi_dsub>:
 8002708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800270a:	4657      	mov	r7, sl
 800270c:	464e      	mov	r6, r9
 800270e:	4645      	mov	r5, r8
 8002710:	46de      	mov	lr, fp
 8002712:	b5e0      	push	{r5, r6, r7, lr}
 8002714:	001e      	movs	r6, r3
 8002716:	0017      	movs	r7, r2
 8002718:	004a      	lsls	r2, r1, #1
 800271a:	030b      	lsls	r3, r1, #12
 800271c:	0d52      	lsrs	r2, r2, #21
 800271e:	0a5b      	lsrs	r3, r3, #9
 8002720:	4690      	mov	r8, r2
 8002722:	0f42      	lsrs	r2, r0, #29
 8002724:	431a      	orrs	r2, r3
 8002726:	0fcd      	lsrs	r5, r1, #31
 8002728:	4ccd      	ldr	r4, [pc, #820]	; (8002a60 <__aeabi_dsub+0x358>)
 800272a:	0331      	lsls	r1, r6, #12
 800272c:	00c3      	lsls	r3, r0, #3
 800272e:	4694      	mov	ip, r2
 8002730:	0070      	lsls	r0, r6, #1
 8002732:	0f7a      	lsrs	r2, r7, #29
 8002734:	0a49      	lsrs	r1, r1, #9
 8002736:	00ff      	lsls	r7, r7, #3
 8002738:	469a      	mov	sl, r3
 800273a:	46b9      	mov	r9, r7
 800273c:	0d40      	lsrs	r0, r0, #21
 800273e:	0ff6      	lsrs	r6, r6, #31
 8002740:	4311      	orrs	r1, r2
 8002742:	42a0      	cmp	r0, r4
 8002744:	d100      	bne.n	8002748 <__aeabi_dsub+0x40>
 8002746:	e0b1      	b.n	80028ac <__aeabi_dsub+0x1a4>
 8002748:	2201      	movs	r2, #1
 800274a:	4056      	eors	r6, r2
 800274c:	46b3      	mov	fp, r6
 800274e:	42b5      	cmp	r5, r6
 8002750:	d100      	bne.n	8002754 <__aeabi_dsub+0x4c>
 8002752:	e088      	b.n	8002866 <__aeabi_dsub+0x15e>
 8002754:	4642      	mov	r2, r8
 8002756:	1a12      	subs	r2, r2, r0
 8002758:	2a00      	cmp	r2, #0
 800275a:	dc00      	bgt.n	800275e <__aeabi_dsub+0x56>
 800275c:	e0ae      	b.n	80028bc <__aeabi_dsub+0x1b4>
 800275e:	2800      	cmp	r0, #0
 8002760:	d100      	bne.n	8002764 <__aeabi_dsub+0x5c>
 8002762:	e0c1      	b.n	80028e8 <__aeabi_dsub+0x1e0>
 8002764:	48be      	ldr	r0, [pc, #760]	; (8002a60 <__aeabi_dsub+0x358>)
 8002766:	4580      	cmp	r8, r0
 8002768:	d100      	bne.n	800276c <__aeabi_dsub+0x64>
 800276a:	e151      	b.n	8002a10 <__aeabi_dsub+0x308>
 800276c:	2080      	movs	r0, #128	; 0x80
 800276e:	0400      	lsls	r0, r0, #16
 8002770:	4301      	orrs	r1, r0
 8002772:	2a38      	cmp	r2, #56	; 0x38
 8002774:	dd00      	ble.n	8002778 <__aeabi_dsub+0x70>
 8002776:	e17b      	b.n	8002a70 <__aeabi_dsub+0x368>
 8002778:	2a1f      	cmp	r2, #31
 800277a:	dd00      	ble.n	800277e <__aeabi_dsub+0x76>
 800277c:	e1ee      	b.n	8002b5c <__aeabi_dsub+0x454>
 800277e:	2020      	movs	r0, #32
 8002780:	003e      	movs	r6, r7
 8002782:	1a80      	subs	r0, r0, r2
 8002784:	000c      	movs	r4, r1
 8002786:	40d6      	lsrs	r6, r2
 8002788:	40d1      	lsrs	r1, r2
 800278a:	4087      	lsls	r7, r0
 800278c:	4662      	mov	r2, ip
 800278e:	4084      	lsls	r4, r0
 8002790:	1a52      	subs	r2, r2, r1
 8002792:	1e78      	subs	r0, r7, #1
 8002794:	4187      	sbcs	r7, r0
 8002796:	4694      	mov	ip, r2
 8002798:	4334      	orrs	r4, r6
 800279a:	4327      	orrs	r7, r4
 800279c:	1bdc      	subs	r4, r3, r7
 800279e:	42a3      	cmp	r3, r4
 80027a0:	419b      	sbcs	r3, r3
 80027a2:	4662      	mov	r2, ip
 80027a4:	425b      	negs	r3, r3
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	4699      	mov	r9, r3
 80027aa:	464b      	mov	r3, r9
 80027ac:	021b      	lsls	r3, r3, #8
 80027ae:	d400      	bmi.n	80027b2 <__aeabi_dsub+0xaa>
 80027b0:	e118      	b.n	80029e4 <__aeabi_dsub+0x2dc>
 80027b2:	464b      	mov	r3, r9
 80027b4:	0258      	lsls	r0, r3, #9
 80027b6:	0a43      	lsrs	r3, r0, #9
 80027b8:	4699      	mov	r9, r3
 80027ba:	464b      	mov	r3, r9
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d100      	bne.n	80027c2 <__aeabi_dsub+0xba>
 80027c0:	e137      	b.n	8002a32 <__aeabi_dsub+0x32a>
 80027c2:	4648      	mov	r0, r9
 80027c4:	f000 fcac 	bl	8003120 <__clzsi2>
 80027c8:	0001      	movs	r1, r0
 80027ca:	3908      	subs	r1, #8
 80027cc:	2320      	movs	r3, #32
 80027ce:	0022      	movs	r2, r4
 80027d0:	4648      	mov	r0, r9
 80027d2:	1a5b      	subs	r3, r3, r1
 80027d4:	40da      	lsrs	r2, r3
 80027d6:	4088      	lsls	r0, r1
 80027d8:	408c      	lsls	r4, r1
 80027da:	4643      	mov	r3, r8
 80027dc:	4310      	orrs	r0, r2
 80027de:	4588      	cmp	r8, r1
 80027e0:	dd00      	ble.n	80027e4 <__aeabi_dsub+0xdc>
 80027e2:	e136      	b.n	8002a52 <__aeabi_dsub+0x34a>
 80027e4:	1ac9      	subs	r1, r1, r3
 80027e6:	1c4b      	adds	r3, r1, #1
 80027e8:	2b1f      	cmp	r3, #31
 80027ea:	dd00      	ble.n	80027ee <__aeabi_dsub+0xe6>
 80027ec:	e0ea      	b.n	80029c4 <__aeabi_dsub+0x2bc>
 80027ee:	2220      	movs	r2, #32
 80027f0:	0026      	movs	r6, r4
 80027f2:	1ad2      	subs	r2, r2, r3
 80027f4:	0001      	movs	r1, r0
 80027f6:	4094      	lsls	r4, r2
 80027f8:	40de      	lsrs	r6, r3
 80027fa:	40d8      	lsrs	r0, r3
 80027fc:	2300      	movs	r3, #0
 80027fe:	4091      	lsls	r1, r2
 8002800:	1e62      	subs	r2, r4, #1
 8002802:	4194      	sbcs	r4, r2
 8002804:	4681      	mov	r9, r0
 8002806:	4698      	mov	r8, r3
 8002808:	4331      	orrs	r1, r6
 800280a:	430c      	orrs	r4, r1
 800280c:	0763      	lsls	r3, r4, #29
 800280e:	d009      	beq.n	8002824 <__aeabi_dsub+0x11c>
 8002810:	230f      	movs	r3, #15
 8002812:	4023      	ands	r3, r4
 8002814:	2b04      	cmp	r3, #4
 8002816:	d005      	beq.n	8002824 <__aeabi_dsub+0x11c>
 8002818:	1d23      	adds	r3, r4, #4
 800281a:	42a3      	cmp	r3, r4
 800281c:	41a4      	sbcs	r4, r4
 800281e:	4264      	negs	r4, r4
 8002820:	44a1      	add	r9, r4
 8002822:	001c      	movs	r4, r3
 8002824:	464b      	mov	r3, r9
 8002826:	021b      	lsls	r3, r3, #8
 8002828:	d400      	bmi.n	800282c <__aeabi_dsub+0x124>
 800282a:	e0de      	b.n	80029ea <__aeabi_dsub+0x2e2>
 800282c:	4641      	mov	r1, r8
 800282e:	4b8c      	ldr	r3, [pc, #560]	; (8002a60 <__aeabi_dsub+0x358>)
 8002830:	3101      	adds	r1, #1
 8002832:	4299      	cmp	r1, r3
 8002834:	d100      	bne.n	8002838 <__aeabi_dsub+0x130>
 8002836:	e0e7      	b.n	8002a08 <__aeabi_dsub+0x300>
 8002838:	464b      	mov	r3, r9
 800283a:	488a      	ldr	r0, [pc, #552]	; (8002a64 <__aeabi_dsub+0x35c>)
 800283c:	08e4      	lsrs	r4, r4, #3
 800283e:	4003      	ands	r3, r0
 8002840:	0018      	movs	r0, r3
 8002842:	0549      	lsls	r1, r1, #21
 8002844:	075b      	lsls	r3, r3, #29
 8002846:	0240      	lsls	r0, r0, #9
 8002848:	4323      	orrs	r3, r4
 800284a:	0d4a      	lsrs	r2, r1, #21
 800284c:	0b04      	lsrs	r4, r0, #12
 800284e:	0512      	lsls	r2, r2, #20
 8002850:	07ed      	lsls	r5, r5, #31
 8002852:	4322      	orrs	r2, r4
 8002854:	432a      	orrs	r2, r5
 8002856:	0018      	movs	r0, r3
 8002858:	0011      	movs	r1, r2
 800285a:	bcf0      	pop	{r4, r5, r6, r7}
 800285c:	46bb      	mov	fp, r7
 800285e:	46b2      	mov	sl, r6
 8002860:	46a9      	mov	r9, r5
 8002862:	46a0      	mov	r8, r4
 8002864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002866:	4642      	mov	r2, r8
 8002868:	1a12      	subs	r2, r2, r0
 800286a:	2a00      	cmp	r2, #0
 800286c:	dd52      	ble.n	8002914 <__aeabi_dsub+0x20c>
 800286e:	2800      	cmp	r0, #0
 8002870:	d100      	bne.n	8002874 <__aeabi_dsub+0x16c>
 8002872:	e09c      	b.n	80029ae <__aeabi_dsub+0x2a6>
 8002874:	45a0      	cmp	r8, r4
 8002876:	d100      	bne.n	800287a <__aeabi_dsub+0x172>
 8002878:	e0ca      	b.n	8002a10 <__aeabi_dsub+0x308>
 800287a:	2080      	movs	r0, #128	; 0x80
 800287c:	0400      	lsls	r0, r0, #16
 800287e:	4301      	orrs	r1, r0
 8002880:	2a38      	cmp	r2, #56	; 0x38
 8002882:	dd00      	ble.n	8002886 <__aeabi_dsub+0x17e>
 8002884:	e149      	b.n	8002b1a <__aeabi_dsub+0x412>
 8002886:	2a1f      	cmp	r2, #31
 8002888:	dc00      	bgt.n	800288c <__aeabi_dsub+0x184>
 800288a:	e197      	b.n	8002bbc <__aeabi_dsub+0x4b4>
 800288c:	0010      	movs	r0, r2
 800288e:	000e      	movs	r6, r1
 8002890:	3820      	subs	r0, #32
 8002892:	40c6      	lsrs	r6, r0
 8002894:	2a20      	cmp	r2, #32
 8002896:	d004      	beq.n	80028a2 <__aeabi_dsub+0x19a>
 8002898:	2040      	movs	r0, #64	; 0x40
 800289a:	1a82      	subs	r2, r0, r2
 800289c:	4091      	lsls	r1, r2
 800289e:	430f      	orrs	r7, r1
 80028a0:	46b9      	mov	r9, r7
 80028a2:	464c      	mov	r4, r9
 80028a4:	1e62      	subs	r2, r4, #1
 80028a6:	4194      	sbcs	r4, r2
 80028a8:	4334      	orrs	r4, r6
 80028aa:	e13a      	b.n	8002b22 <__aeabi_dsub+0x41a>
 80028ac:	000a      	movs	r2, r1
 80028ae:	433a      	orrs	r2, r7
 80028b0:	d028      	beq.n	8002904 <__aeabi_dsub+0x1fc>
 80028b2:	46b3      	mov	fp, r6
 80028b4:	42b5      	cmp	r5, r6
 80028b6:	d02b      	beq.n	8002910 <__aeabi_dsub+0x208>
 80028b8:	4a6b      	ldr	r2, [pc, #428]	; (8002a68 <__aeabi_dsub+0x360>)
 80028ba:	4442      	add	r2, r8
 80028bc:	2a00      	cmp	r2, #0
 80028be:	d05d      	beq.n	800297c <__aeabi_dsub+0x274>
 80028c0:	4642      	mov	r2, r8
 80028c2:	4644      	mov	r4, r8
 80028c4:	1a82      	subs	r2, r0, r2
 80028c6:	2c00      	cmp	r4, #0
 80028c8:	d000      	beq.n	80028cc <__aeabi_dsub+0x1c4>
 80028ca:	e0f5      	b.n	8002ab8 <__aeabi_dsub+0x3b0>
 80028cc:	4665      	mov	r5, ip
 80028ce:	431d      	orrs	r5, r3
 80028d0:	d100      	bne.n	80028d4 <__aeabi_dsub+0x1cc>
 80028d2:	e19c      	b.n	8002c0e <__aeabi_dsub+0x506>
 80028d4:	1e55      	subs	r5, r2, #1
 80028d6:	2a01      	cmp	r2, #1
 80028d8:	d100      	bne.n	80028dc <__aeabi_dsub+0x1d4>
 80028da:	e1fb      	b.n	8002cd4 <__aeabi_dsub+0x5cc>
 80028dc:	4c60      	ldr	r4, [pc, #384]	; (8002a60 <__aeabi_dsub+0x358>)
 80028de:	42a2      	cmp	r2, r4
 80028e0:	d100      	bne.n	80028e4 <__aeabi_dsub+0x1dc>
 80028e2:	e1bd      	b.n	8002c60 <__aeabi_dsub+0x558>
 80028e4:	002a      	movs	r2, r5
 80028e6:	e0f0      	b.n	8002aca <__aeabi_dsub+0x3c2>
 80028e8:	0008      	movs	r0, r1
 80028ea:	4338      	orrs	r0, r7
 80028ec:	d100      	bne.n	80028f0 <__aeabi_dsub+0x1e8>
 80028ee:	e0c3      	b.n	8002a78 <__aeabi_dsub+0x370>
 80028f0:	1e50      	subs	r0, r2, #1
 80028f2:	2a01      	cmp	r2, #1
 80028f4:	d100      	bne.n	80028f8 <__aeabi_dsub+0x1f0>
 80028f6:	e1a8      	b.n	8002c4a <__aeabi_dsub+0x542>
 80028f8:	4c59      	ldr	r4, [pc, #356]	; (8002a60 <__aeabi_dsub+0x358>)
 80028fa:	42a2      	cmp	r2, r4
 80028fc:	d100      	bne.n	8002900 <__aeabi_dsub+0x1f8>
 80028fe:	e087      	b.n	8002a10 <__aeabi_dsub+0x308>
 8002900:	0002      	movs	r2, r0
 8002902:	e736      	b.n	8002772 <__aeabi_dsub+0x6a>
 8002904:	2201      	movs	r2, #1
 8002906:	4056      	eors	r6, r2
 8002908:	46b3      	mov	fp, r6
 800290a:	42b5      	cmp	r5, r6
 800290c:	d000      	beq.n	8002910 <__aeabi_dsub+0x208>
 800290e:	e721      	b.n	8002754 <__aeabi_dsub+0x4c>
 8002910:	4a55      	ldr	r2, [pc, #340]	; (8002a68 <__aeabi_dsub+0x360>)
 8002912:	4442      	add	r2, r8
 8002914:	2a00      	cmp	r2, #0
 8002916:	d100      	bne.n	800291a <__aeabi_dsub+0x212>
 8002918:	e0b5      	b.n	8002a86 <__aeabi_dsub+0x37e>
 800291a:	4642      	mov	r2, r8
 800291c:	4644      	mov	r4, r8
 800291e:	1a82      	subs	r2, r0, r2
 8002920:	2c00      	cmp	r4, #0
 8002922:	d100      	bne.n	8002926 <__aeabi_dsub+0x21e>
 8002924:	e138      	b.n	8002b98 <__aeabi_dsub+0x490>
 8002926:	4e4e      	ldr	r6, [pc, #312]	; (8002a60 <__aeabi_dsub+0x358>)
 8002928:	42b0      	cmp	r0, r6
 800292a:	d100      	bne.n	800292e <__aeabi_dsub+0x226>
 800292c:	e1de      	b.n	8002cec <__aeabi_dsub+0x5e4>
 800292e:	2680      	movs	r6, #128	; 0x80
 8002930:	4664      	mov	r4, ip
 8002932:	0436      	lsls	r6, r6, #16
 8002934:	4334      	orrs	r4, r6
 8002936:	46a4      	mov	ip, r4
 8002938:	2a38      	cmp	r2, #56	; 0x38
 800293a:	dd00      	ble.n	800293e <__aeabi_dsub+0x236>
 800293c:	e196      	b.n	8002c6c <__aeabi_dsub+0x564>
 800293e:	2a1f      	cmp	r2, #31
 8002940:	dd00      	ble.n	8002944 <__aeabi_dsub+0x23c>
 8002942:	e224      	b.n	8002d8e <__aeabi_dsub+0x686>
 8002944:	2620      	movs	r6, #32
 8002946:	1ab4      	subs	r4, r6, r2
 8002948:	46a2      	mov	sl, r4
 800294a:	4664      	mov	r4, ip
 800294c:	4656      	mov	r6, sl
 800294e:	40b4      	lsls	r4, r6
 8002950:	46a1      	mov	r9, r4
 8002952:	001c      	movs	r4, r3
 8002954:	464e      	mov	r6, r9
 8002956:	40d4      	lsrs	r4, r2
 8002958:	4326      	orrs	r6, r4
 800295a:	0034      	movs	r4, r6
 800295c:	4656      	mov	r6, sl
 800295e:	40b3      	lsls	r3, r6
 8002960:	1e5e      	subs	r6, r3, #1
 8002962:	41b3      	sbcs	r3, r6
 8002964:	431c      	orrs	r4, r3
 8002966:	4663      	mov	r3, ip
 8002968:	40d3      	lsrs	r3, r2
 800296a:	18c9      	adds	r1, r1, r3
 800296c:	19e4      	adds	r4, r4, r7
 800296e:	42bc      	cmp	r4, r7
 8002970:	41bf      	sbcs	r7, r7
 8002972:	427f      	negs	r7, r7
 8002974:	46b9      	mov	r9, r7
 8002976:	4680      	mov	r8, r0
 8002978:	4489      	add	r9, r1
 800297a:	e0d8      	b.n	8002b2e <__aeabi_dsub+0x426>
 800297c:	4640      	mov	r0, r8
 800297e:	4c3b      	ldr	r4, [pc, #236]	; (8002a6c <__aeabi_dsub+0x364>)
 8002980:	3001      	adds	r0, #1
 8002982:	4220      	tst	r0, r4
 8002984:	d000      	beq.n	8002988 <__aeabi_dsub+0x280>
 8002986:	e0b4      	b.n	8002af2 <__aeabi_dsub+0x3ea>
 8002988:	4640      	mov	r0, r8
 800298a:	2800      	cmp	r0, #0
 800298c:	d000      	beq.n	8002990 <__aeabi_dsub+0x288>
 800298e:	e144      	b.n	8002c1a <__aeabi_dsub+0x512>
 8002990:	4660      	mov	r0, ip
 8002992:	4318      	orrs	r0, r3
 8002994:	d100      	bne.n	8002998 <__aeabi_dsub+0x290>
 8002996:	e190      	b.n	8002cba <__aeabi_dsub+0x5b2>
 8002998:	0008      	movs	r0, r1
 800299a:	4338      	orrs	r0, r7
 800299c:	d000      	beq.n	80029a0 <__aeabi_dsub+0x298>
 800299e:	e1aa      	b.n	8002cf6 <__aeabi_dsub+0x5ee>
 80029a0:	4661      	mov	r1, ip
 80029a2:	08db      	lsrs	r3, r3, #3
 80029a4:	0749      	lsls	r1, r1, #29
 80029a6:	430b      	orrs	r3, r1
 80029a8:	4661      	mov	r1, ip
 80029aa:	08cc      	lsrs	r4, r1, #3
 80029ac:	e027      	b.n	80029fe <__aeabi_dsub+0x2f6>
 80029ae:	0008      	movs	r0, r1
 80029b0:	4338      	orrs	r0, r7
 80029b2:	d061      	beq.n	8002a78 <__aeabi_dsub+0x370>
 80029b4:	1e50      	subs	r0, r2, #1
 80029b6:	2a01      	cmp	r2, #1
 80029b8:	d100      	bne.n	80029bc <__aeabi_dsub+0x2b4>
 80029ba:	e139      	b.n	8002c30 <__aeabi_dsub+0x528>
 80029bc:	42a2      	cmp	r2, r4
 80029be:	d027      	beq.n	8002a10 <__aeabi_dsub+0x308>
 80029c0:	0002      	movs	r2, r0
 80029c2:	e75d      	b.n	8002880 <__aeabi_dsub+0x178>
 80029c4:	0002      	movs	r2, r0
 80029c6:	391f      	subs	r1, #31
 80029c8:	40ca      	lsrs	r2, r1
 80029ca:	0011      	movs	r1, r2
 80029cc:	2b20      	cmp	r3, #32
 80029ce:	d003      	beq.n	80029d8 <__aeabi_dsub+0x2d0>
 80029d0:	2240      	movs	r2, #64	; 0x40
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	4098      	lsls	r0, r3
 80029d6:	4304      	orrs	r4, r0
 80029d8:	1e63      	subs	r3, r4, #1
 80029da:	419c      	sbcs	r4, r3
 80029dc:	2300      	movs	r3, #0
 80029de:	4699      	mov	r9, r3
 80029e0:	4698      	mov	r8, r3
 80029e2:	430c      	orrs	r4, r1
 80029e4:	0763      	lsls	r3, r4, #29
 80029e6:	d000      	beq.n	80029ea <__aeabi_dsub+0x2e2>
 80029e8:	e712      	b.n	8002810 <__aeabi_dsub+0x108>
 80029ea:	464b      	mov	r3, r9
 80029ec:	464a      	mov	r2, r9
 80029ee:	08e4      	lsrs	r4, r4, #3
 80029f0:	075b      	lsls	r3, r3, #29
 80029f2:	4323      	orrs	r3, r4
 80029f4:	08d4      	lsrs	r4, r2, #3
 80029f6:	4642      	mov	r2, r8
 80029f8:	4919      	ldr	r1, [pc, #100]	; (8002a60 <__aeabi_dsub+0x358>)
 80029fa:	428a      	cmp	r2, r1
 80029fc:	d00e      	beq.n	8002a1c <__aeabi_dsub+0x314>
 80029fe:	0324      	lsls	r4, r4, #12
 8002a00:	0552      	lsls	r2, r2, #21
 8002a02:	0b24      	lsrs	r4, r4, #12
 8002a04:	0d52      	lsrs	r2, r2, #21
 8002a06:	e722      	b.n	800284e <__aeabi_dsub+0x146>
 8002a08:	000a      	movs	r2, r1
 8002a0a:	2400      	movs	r4, #0
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	e71e      	b.n	800284e <__aeabi_dsub+0x146>
 8002a10:	08db      	lsrs	r3, r3, #3
 8002a12:	4662      	mov	r2, ip
 8002a14:	0752      	lsls	r2, r2, #29
 8002a16:	4313      	orrs	r3, r2
 8002a18:	4662      	mov	r2, ip
 8002a1a:	08d4      	lsrs	r4, r2, #3
 8002a1c:	001a      	movs	r2, r3
 8002a1e:	4322      	orrs	r2, r4
 8002a20:	d100      	bne.n	8002a24 <__aeabi_dsub+0x31c>
 8002a22:	e1fc      	b.n	8002e1e <__aeabi_dsub+0x716>
 8002a24:	2280      	movs	r2, #128	; 0x80
 8002a26:	0312      	lsls	r2, r2, #12
 8002a28:	4314      	orrs	r4, r2
 8002a2a:	0324      	lsls	r4, r4, #12
 8002a2c:	4a0c      	ldr	r2, [pc, #48]	; (8002a60 <__aeabi_dsub+0x358>)
 8002a2e:	0b24      	lsrs	r4, r4, #12
 8002a30:	e70d      	b.n	800284e <__aeabi_dsub+0x146>
 8002a32:	0020      	movs	r0, r4
 8002a34:	f000 fb74 	bl	8003120 <__clzsi2>
 8002a38:	0001      	movs	r1, r0
 8002a3a:	3118      	adds	r1, #24
 8002a3c:	291f      	cmp	r1, #31
 8002a3e:	dc00      	bgt.n	8002a42 <__aeabi_dsub+0x33a>
 8002a40:	e6c4      	b.n	80027cc <__aeabi_dsub+0xc4>
 8002a42:	3808      	subs	r0, #8
 8002a44:	4084      	lsls	r4, r0
 8002a46:	4643      	mov	r3, r8
 8002a48:	0020      	movs	r0, r4
 8002a4a:	2400      	movs	r4, #0
 8002a4c:	4588      	cmp	r8, r1
 8002a4e:	dc00      	bgt.n	8002a52 <__aeabi_dsub+0x34a>
 8002a50:	e6c8      	b.n	80027e4 <__aeabi_dsub+0xdc>
 8002a52:	4a04      	ldr	r2, [pc, #16]	; (8002a64 <__aeabi_dsub+0x35c>)
 8002a54:	1a5b      	subs	r3, r3, r1
 8002a56:	4010      	ands	r0, r2
 8002a58:	4698      	mov	r8, r3
 8002a5a:	4681      	mov	r9, r0
 8002a5c:	e6d6      	b.n	800280c <__aeabi_dsub+0x104>
 8002a5e:	46c0      	nop			; (mov r8, r8)
 8002a60:	000007ff 	.word	0x000007ff
 8002a64:	ff7fffff 	.word	0xff7fffff
 8002a68:	fffff801 	.word	0xfffff801
 8002a6c:	000007fe 	.word	0x000007fe
 8002a70:	430f      	orrs	r7, r1
 8002a72:	1e7a      	subs	r2, r7, #1
 8002a74:	4197      	sbcs	r7, r2
 8002a76:	e691      	b.n	800279c <__aeabi_dsub+0x94>
 8002a78:	4661      	mov	r1, ip
 8002a7a:	08db      	lsrs	r3, r3, #3
 8002a7c:	0749      	lsls	r1, r1, #29
 8002a7e:	430b      	orrs	r3, r1
 8002a80:	4661      	mov	r1, ip
 8002a82:	08cc      	lsrs	r4, r1, #3
 8002a84:	e7b8      	b.n	80029f8 <__aeabi_dsub+0x2f0>
 8002a86:	4640      	mov	r0, r8
 8002a88:	4cd3      	ldr	r4, [pc, #844]	; (8002dd8 <__aeabi_dsub+0x6d0>)
 8002a8a:	3001      	adds	r0, #1
 8002a8c:	4220      	tst	r0, r4
 8002a8e:	d000      	beq.n	8002a92 <__aeabi_dsub+0x38a>
 8002a90:	e0a2      	b.n	8002bd8 <__aeabi_dsub+0x4d0>
 8002a92:	4640      	mov	r0, r8
 8002a94:	2800      	cmp	r0, #0
 8002a96:	d000      	beq.n	8002a9a <__aeabi_dsub+0x392>
 8002a98:	e101      	b.n	8002c9e <__aeabi_dsub+0x596>
 8002a9a:	4660      	mov	r0, ip
 8002a9c:	4318      	orrs	r0, r3
 8002a9e:	d100      	bne.n	8002aa2 <__aeabi_dsub+0x39a>
 8002aa0:	e15e      	b.n	8002d60 <__aeabi_dsub+0x658>
 8002aa2:	0008      	movs	r0, r1
 8002aa4:	4338      	orrs	r0, r7
 8002aa6:	d000      	beq.n	8002aaa <__aeabi_dsub+0x3a2>
 8002aa8:	e15f      	b.n	8002d6a <__aeabi_dsub+0x662>
 8002aaa:	4661      	mov	r1, ip
 8002aac:	08db      	lsrs	r3, r3, #3
 8002aae:	0749      	lsls	r1, r1, #29
 8002ab0:	430b      	orrs	r3, r1
 8002ab2:	4661      	mov	r1, ip
 8002ab4:	08cc      	lsrs	r4, r1, #3
 8002ab6:	e7a2      	b.n	80029fe <__aeabi_dsub+0x2f6>
 8002ab8:	4dc8      	ldr	r5, [pc, #800]	; (8002ddc <__aeabi_dsub+0x6d4>)
 8002aba:	42a8      	cmp	r0, r5
 8002abc:	d100      	bne.n	8002ac0 <__aeabi_dsub+0x3b8>
 8002abe:	e0cf      	b.n	8002c60 <__aeabi_dsub+0x558>
 8002ac0:	2580      	movs	r5, #128	; 0x80
 8002ac2:	4664      	mov	r4, ip
 8002ac4:	042d      	lsls	r5, r5, #16
 8002ac6:	432c      	orrs	r4, r5
 8002ac8:	46a4      	mov	ip, r4
 8002aca:	2a38      	cmp	r2, #56	; 0x38
 8002acc:	dc56      	bgt.n	8002b7c <__aeabi_dsub+0x474>
 8002ace:	2a1f      	cmp	r2, #31
 8002ad0:	dd00      	ble.n	8002ad4 <__aeabi_dsub+0x3cc>
 8002ad2:	e0d1      	b.n	8002c78 <__aeabi_dsub+0x570>
 8002ad4:	2520      	movs	r5, #32
 8002ad6:	001e      	movs	r6, r3
 8002ad8:	1aad      	subs	r5, r5, r2
 8002ada:	4664      	mov	r4, ip
 8002adc:	40ab      	lsls	r3, r5
 8002ade:	40ac      	lsls	r4, r5
 8002ae0:	40d6      	lsrs	r6, r2
 8002ae2:	1e5d      	subs	r5, r3, #1
 8002ae4:	41ab      	sbcs	r3, r5
 8002ae6:	4334      	orrs	r4, r6
 8002ae8:	4323      	orrs	r3, r4
 8002aea:	4664      	mov	r4, ip
 8002aec:	40d4      	lsrs	r4, r2
 8002aee:	1b09      	subs	r1, r1, r4
 8002af0:	e049      	b.n	8002b86 <__aeabi_dsub+0x47e>
 8002af2:	4660      	mov	r0, ip
 8002af4:	1bdc      	subs	r4, r3, r7
 8002af6:	1a46      	subs	r6, r0, r1
 8002af8:	42a3      	cmp	r3, r4
 8002afa:	4180      	sbcs	r0, r0
 8002afc:	4240      	negs	r0, r0
 8002afe:	4681      	mov	r9, r0
 8002b00:	0030      	movs	r0, r6
 8002b02:	464e      	mov	r6, r9
 8002b04:	1b80      	subs	r0, r0, r6
 8002b06:	4681      	mov	r9, r0
 8002b08:	0200      	lsls	r0, r0, #8
 8002b0a:	d476      	bmi.n	8002bfa <__aeabi_dsub+0x4f2>
 8002b0c:	464b      	mov	r3, r9
 8002b0e:	4323      	orrs	r3, r4
 8002b10:	d000      	beq.n	8002b14 <__aeabi_dsub+0x40c>
 8002b12:	e652      	b.n	80027ba <__aeabi_dsub+0xb2>
 8002b14:	2400      	movs	r4, #0
 8002b16:	2500      	movs	r5, #0
 8002b18:	e771      	b.n	80029fe <__aeabi_dsub+0x2f6>
 8002b1a:	4339      	orrs	r1, r7
 8002b1c:	000c      	movs	r4, r1
 8002b1e:	1e62      	subs	r2, r4, #1
 8002b20:	4194      	sbcs	r4, r2
 8002b22:	18e4      	adds	r4, r4, r3
 8002b24:	429c      	cmp	r4, r3
 8002b26:	419b      	sbcs	r3, r3
 8002b28:	425b      	negs	r3, r3
 8002b2a:	4463      	add	r3, ip
 8002b2c:	4699      	mov	r9, r3
 8002b2e:	464b      	mov	r3, r9
 8002b30:	021b      	lsls	r3, r3, #8
 8002b32:	d400      	bmi.n	8002b36 <__aeabi_dsub+0x42e>
 8002b34:	e756      	b.n	80029e4 <__aeabi_dsub+0x2dc>
 8002b36:	2301      	movs	r3, #1
 8002b38:	469c      	mov	ip, r3
 8002b3a:	4ba8      	ldr	r3, [pc, #672]	; (8002ddc <__aeabi_dsub+0x6d4>)
 8002b3c:	44e0      	add	r8, ip
 8002b3e:	4598      	cmp	r8, r3
 8002b40:	d038      	beq.n	8002bb4 <__aeabi_dsub+0x4ac>
 8002b42:	464b      	mov	r3, r9
 8002b44:	48a6      	ldr	r0, [pc, #664]	; (8002de0 <__aeabi_dsub+0x6d8>)
 8002b46:	2201      	movs	r2, #1
 8002b48:	4003      	ands	r3, r0
 8002b4a:	0018      	movs	r0, r3
 8002b4c:	0863      	lsrs	r3, r4, #1
 8002b4e:	4014      	ands	r4, r2
 8002b50:	431c      	orrs	r4, r3
 8002b52:	07c3      	lsls	r3, r0, #31
 8002b54:	431c      	orrs	r4, r3
 8002b56:	0843      	lsrs	r3, r0, #1
 8002b58:	4699      	mov	r9, r3
 8002b5a:	e657      	b.n	800280c <__aeabi_dsub+0x104>
 8002b5c:	0010      	movs	r0, r2
 8002b5e:	000e      	movs	r6, r1
 8002b60:	3820      	subs	r0, #32
 8002b62:	40c6      	lsrs	r6, r0
 8002b64:	2a20      	cmp	r2, #32
 8002b66:	d004      	beq.n	8002b72 <__aeabi_dsub+0x46a>
 8002b68:	2040      	movs	r0, #64	; 0x40
 8002b6a:	1a82      	subs	r2, r0, r2
 8002b6c:	4091      	lsls	r1, r2
 8002b6e:	430f      	orrs	r7, r1
 8002b70:	46b9      	mov	r9, r7
 8002b72:	464f      	mov	r7, r9
 8002b74:	1e7a      	subs	r2, r7, #1
 8002b76:	4197      	sbcs	r7, r2
 8002b78:	4337      	orrs	r7, r6
 8002b7a:	e60f      	b.n	800279c <__aeabi_dsub+0x94>
 8002b7c:	4662      	mov	r2, ip
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	0013      	movs	r3, r2
 8002b82:	1e5a      	subs	r2, r3, #1
 8002b84:	4193      	sbcs	r3, r2
 8002b86:	1afc      	subs	r4, r7, r3
 8002b88:	42a7      	cmp	r7, r4
 8002b8a:	41bf      	sbcs	r7, r7
 8002b8c:	427f      	negs	r7, r7
 8002b8e:	1bcb      	subs	r3, r1, r7
 8002b90:	4699      	mov	r9, r3
 8002b92:	465d      	mov	r5, fp
 8002b94:	4680      	mov	r8, r0
 8002b96:	e608      	b.n	80027aa <__aeabi_dsub+0xa2>
 8002b98:	4666      	mov	r6, ip
 8002b9a:	431e      	orrs	r6, r3
 8002b9c:	d100      	bne.n	8002ba0 <__aeabi_dsub+0x498>
 8002b9e:	e0be      	b.n	8002d1e <__aeabi_dsub+0x616>
 8002ba0:	1e56      	subs	r6, r2, #1
 8002ba2:	2a01      	cmp	r2, #1
 8002ba4:	d100      	bne.n	8002ba8 <__aeabi_dsub+0x4a0>
 8002ba6:	e109      	b.n	8002dbc <__aeabi_dsub+0x6b4>
 8002ba8:	4c8c      	ldr	r4, [pc, #560]	; (8002ddc <__aeabi_dsub+0x6d4>)
 8002baa:	42a2      	cmp	r2, r4
 8002bac:	d100      	bne.n	8002bb0 <__aeabi_dsub+0x4a8>
 8002bae:	e119      	b.n	8002de4 <__aeabi_dsub+0x6dc>
 8002bb0:	0032      	movs	r2, r6
 8002bb2:	e6c1      	b.n	8002938 <__aeabi_dsub+0x230>
 8002bb4:	4642      	mov	r2, r8
 8002bb6:	2400      	movs	r4, #0
 8002bb8:	2300      	movs	r3, #0
 8002bba:	e648      	b.n	800284e <__aeabi_dsub+0x146>
 8002bbc:	2020      	movs	r0, #32
 8002bbe:	000c      	movs	r4, r1
 8002bc0:	1a80      	subs	r0, r0, r2
 8002bc2:	003e      	movs	r6, r7
 8002bc4:	4087      	lsls	r7, r0
 8002bc6:	4084      	lsls	r4, r0
 8002bc8:	40d6      	lsrs	r6, r2
 8002bca:	1e78      	subs	r0, r7, #1
 8002bcc:	4187      	sbcs	r7, r0
 8002bce:	40d1      	lsrs	r1, r2
 8002bd0:	4334      	orrs	r4, r6
 8002bd2:	433c      	orrs	r4, r7
 8002bd4:	448c      	add	ip, r1
 8002bd6:	e7a4      	b.n	8002b22 <__aeabi_dsub+0x41a>
 8002bd8:	4a80      	ldr	r2, [pc, #512]	; (8002ddc <__aeabi_dsub+0x6d4>)
 8002bda:	4290      	cmp	r0, r2
 8002bdc:	d100      	bne.n	8002be0 <__aeabi_dsub+0x4d8>
 8002bde:	e0e9      	b.n	8002db4 <__aeabi_dsub+0x6ac>
 8002be0:	19df      	adds	r7, r3, r7
 8002be2:	429f      	cmp	r7, r3
 8002be4:	419b      	sbcs	r3, r3
 8002be6:	4461      	add	r1, ip
 8002be8:	425b      	negs	r3, r3
 8002bea:	18c9      	adds	r1, r1, r3
 8002bec:	07cc      	lsls	r4, r1, #31
 8002bee:	087f      	lsrs	r7, r7, #1
 8002bf0:	084b      	lsrs	r3, r1, #1
 8002bf2:	4699      	mov	r9, r3
 8002bf4:	4680      	mov	r8, r0
 8002bf6:	433c      	orrs	r4, r7
 8002bf8:	e6f4      	b.n	80029e4 <__aeabi_dsub+0x2dc>
 8002bfa:	1afc      	subs	r4, r7, r3
 8002bfc:	42a7      	cmp	r7, r4
 8002bfe:	41bf      	sbcs	r7, r7
 8002c00:	4663      	mov	r3, ip
 8002c02:	427f      	negs	r7, r7
 8002c04:	1ac9      	subs	r1, r1, r3
 8002c06:	1bcb      	subs	r3, r1, r7
 8002c08:	4699      	mov	r9, r3
 8002c0a:	465d      	mov	r5, fp
 8002c0c:	e5d5      	b.n	80027ba <__aeabi_dsub+0xb2>
 8002c0e:	08ff      	lsrs	r7, r7, #3
 8002c10:	074b      	lsls	r3, r1, #29
 8002c12:	465d      	mov	r5, fp
 8002c14:	433b      	orrs	r3, r7
 8002c16:	08cc      	lsrs	r4, r1, #3
 8002c18:	e6ee      	b.n	80029f8 <__aeabi_dsub+0x2f0>
 8002c1a:	4662      	mov	r2, ip
 8002c1c:	431a      	orrs	r2, r3
 8002c1e:	d000      	beq.n	8002c22 <__aeabi_dsub+0x51a>
 8002c20:	e082      	b.n	8002d28 <__aeabi_dsub+0x620>
 8002c22:	000b      	movs	r3, r1
 8002c24:	433b      	orrs	r3, r7
 8002c26:	d11b      	bne.n	8002c60 <__aeabi_dsub+0x558>
 8002c28:	2480      	movs	r4, #128	; 0x80
 8002c2a:	2500      	movs	r5, #0
 8002c2c:	0324      	lsls	r4, r4, #12
 8002c2e:	e6f9      	b.n	8002a24 <__aeabi_dsub+0x31c>
 8002c30:	19dc      	adds	r4, r3, r7
 8002c32:	429c      	cmp	r4, r3
 8002c34:	419b      	sbcs	r3, r3
 8002c36:	4461      	add	r1, ip
 8002c38:	4689      	mov	r9, r1
 8002c3a:	425b      	negs	r3, r3
 8002c3c:	4499      	add	r9, r3
 8002c3e:	464b      	mov	r3, r9
 8002c40:	021b      	lsls	r3, r3, #8
 8002c42:	d444      	bmi.n	8002cce <__aeabi_dsub+0x5c6>
 8002c44:	2301      	movs	r3, #1
 8002c46:	4698      	mov	r8, r3
 8002c48:	e6cc      	b.n	80029e4 <__aeabi_dsub+0x2dc>
 8002c4a:	1bdc      	subs	r4, r3, r7
 8002c4c:	4662      	mov	r2, ip
 8002c4e:	42a3      	cmp	r3, r4
 8002c50:	419b      	sbcs	r3, r3
 8002c52:	1a51      	subs	r1, r2, r1
 8002c54:	425b      	negs	r3, r3
 8002c56:	1acb      	subs	r3, r1, r3
 8002c58:	4699      	mov	r9, r3
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	4698      	mov	r8, r3
 8002c5e:	e5a4      	b.n	80027aa <__aeabi_dsub+0xa2>
 8002c60:	08ff      	lsrs	r7, r7, #3
 8002c62:	074b      	lsls	r3, r1, #29
 8002c64:	465d      	mov	r5, fp
 8002c66:	433b      	orrs	r3, r7
 8002c68:	08cc      	lsrs	r4, r1, #3
 8002c6a:	e6d7      	b.n	8002a1c <__aeabi_dsub+0x314>
 8002c6c:	4662      	mov	r2, ip
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	0014      	movs	r4, r2
 8002c72:	1e63      	subs	r3, r4, #1
 8002c74:	419c      	sbcs	r4, r3
 8002c76:	e679      	b.n	800296c <__aeabi_dsub+0x264>
 8002c78:	0015      	movs	r5, r2
 8002c7a:	4664      	mov	r4, ip
 8002c7c:	3d20      	subs	r5, #32
 8002c7e:	40ec      	lsrs	r4, r5
 8002c80:	46a0      	mov	r8, r4
 8002c82:	2a20      	cmp	r2, #32
 8002c84:	d005      	beq.n	8002c92 <__aeabi_dsub+0x58a>
 8002c86:	2540      	movs	r5, #64	; 0x40
 8002c88:	4664      	mov	r4, ip
 8002c8a:	1aaa      	subs	r2, r5, r2
 8002c8c:	4094      	lsls	r4, r2
 8002c8e:	4323      	orrs	r3, r4
 8002c90:	469a      	mov	sl, r3
 8002c92:	4654      	mov	r4, sl
 8002c94:	1e63      	subs	r3, r4, #1
 8002c96:	419c      	sbcs	r4, r3
 8002c98:	4643      	mov	r3, r8
 8002c9a:	4323      	orrs	r3, r4
 8002c9c:	e773      	b.n	8002b86 <__aeabi_dsub+0x47e>
 8002c9e:	4662      	mov	r2, ip
 8002ca0:	431a      	orrs	r2, r3
 8002ca2:	d023      	beq.n	8002cec <__aeabi_dsub+0x5e4>
 8002ca4:	000a      	movs	r2, r1
 8002ca6:	433a      	orrs	r2, r7
 8002ca8:	d000      	beq.n	8002cac <__aeabi_dsub+0x5a4>
 8002caa:	e0a0      	b.n	8002dee <__aeabi_dsub+0x6e6>
 8002cac:	4662      	mov	r2, ip
 8002cae:	08db      	lsrs	r3, r3, #3
 8002cb0:	0752      	lsls	r2, r2, #29
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	4662      	mov	r2, ip
 8002cb6:	08d4      	lsrs	r4, r2, #3
 8002cb8:	e6b0      	b.n	8002a1c <__aeabi_dsub+0x314>
 8002cba:	000b      	movs	r3, r1
 8002cbc:	433b      	orrs	r3, r7
 8002cbe:	d100      	bne.n	8002cc2 <__aeabi_dsub+0x5ba>
 8002cc0:	e728      	b.n	8002b14 <__aeabi_dsub+0x40c>
 8002cc2:	08ff      	lsrs	r7, r7, #3
 8002cc4:	074b      	lsls	r3, r1, #29
 8002cc6:	465d      	mov	r5, fp
 8002cc8:	433b      	orrs	r3, r7
 8002cca:	08cc      	lsrs	r4, r1, #3
 8002ccc:	e697      	b.n	80029fe <__aeabi_dsub+0x2f6>
 8002cce:	2302      	movs	r3, #2
 8002cd0:	4698      	mov	r8, r3
 8002cd2:	e736      	b.n	8002b42 <__aeabi_dsub+0x43a>
 8002cd4:	1afc      	subs	r4, r7, r3
 8002cd6:	42a7      	cmp	r7, r4
 8002cd8:	41bf      	sbcs	r7, r7
 8002cda:	4663      	mov	r3, ip
 8002cdc:	427f      	negs	r7, r7
 8002cde:	1ac9      	subs	r1, r1, r3
 8002ce0:	1bcb      	subs	r3, r1, r7
 8002ce2:	4699      	mov	r9, r3
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	465d      	mov	r5, fp
 8002ce8:	4698      	mov	r8, r3
 8002cea:	e55e      	b.n	80027aa <__aeabi_dsub+0xa2>
 8002cec:	074b      	lsls	r3, r1, #29
 8002cee:	08ff      	lsrs	r7, r7, #3
 8002cf0:	433b      	orrs	r3, r7
 8002cf2:	08cc      	lsrs	r4, r1, #3
 8002cf4:	e692      	b.n	8002a1c <__aeabi_dsub+0x314>
 8002cf6:	1bdc      	subs	r4, r3, r7
 8002cf8:	4660      	mov	r0, ip
 8002cfa:	42a3      	cmp	r3, r4
 8002cfc:	41b6      	sbcs	r6, r6
 8002cfe:	1a40      	subs	r0, r0, r1
 8002d00:	4276      	negs	r6, r6
 8002d02:	1b80      	subs	r0, r0, r6
 8002d04:	4681      	mov	r9, r0
 8002d06:	0200      	lsls	r0, r0, #8
 8002d08:	d560      	bpl.n	8002dcc <__aeabi_dsub+0x6c4>
 8002d0a:	1afc      	subs	r4, r7, r3
 8002d0c:	42a7      	cmp	r7, r4
 8002d0e:	41bf      	sbcs	r7, r7
 8002d10:	4663      	mov	r3, ip
 8002d12:	427f      	negs	r7, r7
 8002d14:	1ac9      	subs	r1, r1, r3
 8002d16:	1bcb      	subs	r3, r1, r7
 8002d18:	4699      	mov	r9, r3
 8002d1a:	465d      	mov	r5, fp
 8002d1c:	e576      	b.n	800280c <__aeabi_dsub+0x104>
 8002d1e:	08ff      	lsrs	r7, r7, #3
 8002d20:	074b      	lsls	r3, r1, #29
 8002d22:	433b      	orrs	r3, r7
 8002d24:	08cc      	lsrs	r4, r1, #3
 8002d26:	e667      	b.n	80029f8 <__aeabi_dsub+0x2f0>
 8002d28:	000a      	movs	r2, r1
 8002d2a:	08db      	lsrs	r3, r3, #3
 8002d2c:	433a      	orrs	r2, r7
 8002d2e:	d100      	bne.n	8002d32 <__aeabi_dsub+0x62a>
 8002d30:	e66f      	b.n	8002a12 <__aeabi_dsub+0x30a>
 8002d32:	4662      	mov	r2, ip
 8002d34:	0752      	lsls	r2, r2, #29
 8002d36:	4313      	orrs	r3, r2
 8002d38:	4662      	mov	r2, ip
 8002d3a:	08d4      	lsrs	r4, r2, #3
 8002d3c:	2280      	movs	r2, #128	; 0x80
 8002d3e:	0312      	lsls	r2, r2, #12
 8002d40:	4214      	tst	r4, r2
 8002d42:	d007      	beq.n	8002d54 <__aeabi_dsub+0x64c>
 8002d44:	08c8      	lsrs	r0, r1, #3
 8002d46:	4210      	tst	r0, r2
 8002d48:	d104      	bne.n	8002d54 <__aeabi_dsub+0x64c>
 8002d4a:	465d      	mov	r5, fp
 8002d4c:	0004      	movs	r4, r0
 8002d4e:	08fb      	lsrs	r3, r7, #3
 8002d50:	0749      	lsls	r1, r1, #29
 8002d52:	430b      	orrs	r3, r1
 8002d54:	0f5a      	lsrs	r2, r3, #29
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	08db      	lsrs	r3, r3, #3
 8002d5a:	0752      	lsls	r2, r2, #29
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	e65d      	b.n	8002a1c <__aeabi_dsub+0x314>
 8002d60:	074b      	lsls	r3, r1, #29
 8002d62:	08ff      	lsrs	r7, r7, #3
 8002d64:	433b      	orrs	r3, r7
 8002d66:	08cc      	lsrs	r4, r1, #3
 8002d68:	e649      	b.n	80029fe <__aeabi_dsub+0x2f6>
 8002d6a:	19dc      	adds	r4, r3, r7
 8002d6c:	429c      	cmp	r4, r3
 8002d6e:	419b      	sbcs	r3, r3
 8002d70:	4461      	add	r1, ip
 8002d72:	4689      	mov	r9, r1
 8002d74:	425b      	negs	r3, r3
 8002d76:	4499      	add	r9, r3
 8002d78:	464b      	mov	r3, r9
 8002d7a:	021b      	lsls	r3, r3, #8
 8002d7c:	d400      	bmi.n	8002d80 <__aeabi_dsub+0x678>
 8002d7e:	e631      	b.n	80029e4 <__aeabi_dsub+0x2dc>
 8002d80:	464a      	mov	r2, r9
 8002d82:	4b17      	ldr	r3, [pc, #92]	; (8002de0 <__aeabi_dsub+0x6d8>)
 8002d84:	401a      	ands	r2, r3
 8002d86:	2301      	movs	r3, #1
 8002d88:	4691      	mov	r9, r2
 8002d8a:	4698      	mov	r8, r3
 8002d8c:	e62a      	b.n	80029e4 <__aeabi_dsub+0x2dc>
 8002d8e:	0016      	movs	r6, r2
 8002d90:	4664      	mov	r4, ip
 8002d92:	3e20      	subs	r6, #32
 8002d94:	40f4      	lsrs	r4, r6
 8002d96:	46a0      	mov	r8, r4
 8002d98:	2a20      	cmp	r2, #32
 8002d9a:	d005      	beq.n	8002da8 <__aeabi_dsub+0x6a0>
 8002d9c:	2640      	movs	r6, #64	; 0x40
 8002d9e:	4664      	mov	r4, ip
 8002da0:	1ab2      	subs	r2, r6, r2
 8002da2:	4094      	lsls	r4, r2
 8002da4:	4323      	orrs	r3, r4
 8002da6:	469a      	mov	sl, r3
 8002da8:	4654      	mov	r4, sl
 8002daa:	1e63      	subs	r3, r4, #1
 8002dac:	419c      	sbcs	r4, r3
 8002dae:	4643      	mov	r3, r8
 8002db0:	431c      	orrs	r4, r3
 8002db2:	e5db      	b.n	800296c <__aeabi_dsub+0x264>
 8002db4:	0002      	movs	r2, r0
 8002db6:	2400      	movs	r4, #0
 8002db8:	2300      	movs	r3, #0
 8002dba:	e548      	b.n	800284e <__aeabi_dsub+0x146>
 8002dbc:	19dc      	adds	r4, r3, r7
 8002dbe:	42bc      	cmp	r4, r7
 8002dc0:	41bf      	sbcs	r7, r7
 8002dc2:	4461      	add	r1, ip
 8002dc4:	4689      	mov	r9, r1
 8002dc6:	427f      	negs	r7, r7
 8002dc8:	44b9      	add	r9, r7
 8002dca:	e738      	b.n	8002c3e <__aeabi_dsub+0x536>
 8002dcc:	464b      	mov	r3, r9
 8002dce:	4323      	orrs	r3, r4
 8002dd0:	d100      	bne.n	8002dd4 <__aeabi_dsub+0x6cc>
 8002dd2:	e69f      	b.n	8002b14 <__aeabi_dsub+0x40c>
 8002dd4:	e606      	b.n	80029e4 <__aeabi_dsub+0x2dc>
 8002dd6:	46c0      	nop			; (mov r8, r8)
 8002dd8:	000007fe 	.word	0x000007fe
 8002ddc:	000007ff 	.word	0x000007ff
 8002de0:	ff7fffff 	.word	0xff7fffff
 8002de4:	08ff      	lsrs	r7, r7, #3
 8002de6:	074b      	lsls	r3, r1, #29
 8002de8:	433b      	orrs	r3, r7
 8002dea:	08cc      	lsrs	r4, r1, #3
 8002dec:	e616      	b.n	8002a1c <__aeabi_dsub+0x314>
 8002dee:	4662      	mov	r2, ip
 8002df0:	08db      	lsrs	r3, r3, #3
 8002df2:	0752      	lsls	r2, r2, #29
 8002df4:	4313      	orrs	r3, r2
 8002df6:	4662      	mov	r2, ip
 8002df8:	08d4      	lsrs	r4, r2, #3
 8002dfa:	2280      	movs	r2, #128	; 0x80
 8002dfc:	0312      	lsls	r2, r2, #12
 8002dfe:	4214      	tst	r4, r2
 8002e00:	d007      	beq.n	8002e12 <__aeabi_dsub+0x70a>
 8002e02:	08c8      	lsrs	r0, r1, #3
 8002e04:	4210      	tst	r0, r2
 8002e06:	d104      	bne.n	8002e12 <__aeabi_dsub+0x70a>
 8002e08:	465d      	mov	r5, fp
 8002e0a:	0004      	movs	r4, r0
 8002e0c:	08fb      	lsrs	r3, r7, #3
 8002e0e:	0749      	lsls	r1, r1, #29
 8002e10:	430b      	orrs	r3, r1
 8002e12:	0f5a      	lsrs	r2, r3, #29
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	0752      	lsls	r2, r2, #29
 8002e18:	08db      	lsrs	r3, r3, #3
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	e5fe      	b.n	8002a1c <__aeabi_dsub+0x314>
 8002e1e:	2300      	movs	r3, #0
 8002e20:	4a01      	ldr	r2, [pc, #4]	; (8002e28 <__aeabi_dsub+0x720>)
 8002e22:	001c      	movs	r4, r3
 8002e24:	e513      	b.n	800284e <__aeabi_dsub+0x146>
 8002e26:	46c0      	nop			; (mov r8, r8)
 8002e28:	000007ff 	.word	0x000007ff

08002e2c <__aeabi_dcmpun>:
 8002e2c:	b570      	push	{r4, r5, r6, lr}
 8002e2e:	0005      	movs	r5, r0
 8002e30:	480c      	ldr	r0, [pc, #48]	; (8002e64 <__aeabi_dcmpun+0x38>)
 8002e32:	031c      	lsls	r4, r3, #12
 8002e34:	0016      	movs	r6, r2
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	030a      	lsls	r2, r1, #12
 8002e3a:	0049      	lsls	r1, r1, #1
 8002e3c:	0b12      	lsrs	r2, r2, #12
 8002e3e:	0d49      	lsrs	r1, r1, #21
 8002e40:	0b24      	lsrs	r4, r4, #12
 8002e42:	0d5b      	lsrs	r3, r3, #21
 8002e44:	4281      	cmp	r1, r0
 8002e46:	d008      	beq.n	8002e5a <__aeabi_dcmpun+0x2e>
 8002e48:	4a06      	ldr	r2, [pc, #24]	; (8002e64 <__aeabi_dcmpun+0x38>)
 8002e4a:	2000      	movs	r0, #0
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d103      	bne.n	8002e58 <__aeabi_dcmpun+0x2c>
 8002e50:	0020      	movs	r0, r4
 8002e52:	4330      	orrs	r0, r6
 8002e54:	1e43      	subs	r3, r0, #1
 8002e56:	4198      	sbcs	r0, r3
 8002e58:	bd70      	pop	{r4, r5, r6, pc}
 8002e5a:	2001      	movs	r0, #1
 8002e5c:	432a      	orrs	r2, r5
 8002e5e:	d1fb      	bne.n	8002e58 <__aeabi_dcmpun+0x2c>
 8002e60:	e7f2      	b.n	8002e48 <__aeabi_dcmpun+0x1c>
 8002e62:	46c0      	nop			; (mov r8, r8)
 8002e64:	000007ff 	.word	0x000007ff

08002e68 <__aeabi_d2iz>:
 8002e68:	000a      	movs	r2, r1
 8002e6a:	b530      	push	{r4, r5, lr}
 8002e6c:	4c13      	ldr	r4, [pc, #76]	; (8002ebc <__aeabi_d2iz+0x54>)
 8002e6e:	0053      	lsls	r3, r2, #1
 8002e70:	0309      	lsls	r1, r1, #12
 8002e72:	0005      	movs	r5, r0
 8002e74:	0b09      	lsrs	r1, r1, #12
 8002e76:	2000      	movs	r0, #0
 8002e78:	0d5b      	lsrs	r3, r3, #21
 8002e7a:	0fd2      	lsrs	r2, r2, #31
 8002e7c:	42a3      	cmp	r3, r4
 8002e7e:	dd04      	ble.n	8002e8a <__aeabi_d2iz+0x22>
 8002e80:	480f      	ldr	r0, [pc, #60]	; (8002ec0 <__aeabi_d2iz+0x58>)
 8002e82:	4283      	cmp	r3, r0
 8002e84:	dd02      	ble.n	8002e8c <__aeabi_d2iz+0x24>
 8002e86:	4b0f      	ldr	r3, [pc, #60]	; (8002ec4 <__aeabi_d2iz+0x5c>)
 8002e88:	18d0      	adds	r0, r2, r3
 8002e8a:	bd30      	pop	{r4, r5, pc}
 8002e8c:	2080      	movs	r0, #128	; 0x80
 8002e8e:	0340      	lsls	r0, r0, #13
 8002e90:	4301      	orrs	r1, r0
 8002e92:	480d      	ldr	r0, [pc, #52]	; (8002ec8 <__aeabi_d2iz+0x60>)
 8002e94:	1ac0      	subs	r0, r0, r3
 8002e96:	281f      	cmp	r0, #31
 8002e98:	dd08      	ble.n	8002eac <__aeabi_d2iz+0x44>
 8002e9a:	480c      	ldr	r0, [pc, #48]	; (8002ecc <__aeabi_d2iz+0x64>)
 8002e9c:	1ac3      	subs	r3, r0, r3
 8002e9e:	40d9      	lsrs	r1, r3
 8002ea0:	000b      	movs	r3, r1
 8002ea2:	4258      	negs	r0, r3
 8002ea4:	2a00      	cmp	r2, #0
 8002ea6:	d1f0      	bne.n	8002e8a <__aeabi_d2iz+0x22>
 8002ea8:	0018      	movs	r0, r3
 8002eaa:	e7ee      	b.n	8002e8a <__aeabi_d2iz+0x22>
 8002eac:	4c08      	ldr	r4, [pc, #32]	; (8002ed0 <__aeabi_d2iz+0x68>)
 8002eae:	40c5      	lsrs	r5, r0
 8002eb0:	46a4      	mov	ip, r4
 8002eb2:	4463      	add	r3, ip
 8002eb4:	4099      	lsls	r1, r3
 8002eb6:	000b      	movs	r3, r1
 8002eb8:	432b      	orrs	r3, r5
 8002eba:	e7f2      	b.n	8002ea2 <__aeabi_d2iz+0x3a>
 8002ebc:	000003fe 	.word	0x000003fe
 8002ec0:	0000041d 	.word	0x0000041d
 8002ec4:	7fffffff 	.word	0x7fffffff
 8002ec8:	00000433 	.word	0x00000433
 8002ecc:	00000413 	.word	0x00000413
 8002ed0:	fffffbed 	.word	0xfffffbed

08002ed4 <__aeabi_i2d>:
 8002ed4:	b570      	push	{r4, r5, r6, lr}
 8002ed6:	2800      	cmp	r0, #0
 8002ed8:	d016      	beq.n	8002f08 <__aeabi_i2d+0x34>
 8002eda:	17c3      	asrs	r3, r0, #31
 8002edc:	18c5      	adds	r5, r0, r3
 8002ede:	405d      	eors	r5, r3
 8002ee0:	0fc4      	lsrs	r4, r0, #31
 8002ee2:	0028      	movs	r0, r5
 8002ee4:	f000 f91c 	bl	8003120 <__clzsi2>
 8002ee8:	4a11      	ldr	r2, [pc, #68]	; (8002f30 <__aeabi_i2d+0x5c>)
 8002eea:	1a12      	subs	r2, r2, r0
 8002eec:	280a      	cmp	r0, #10
 8002eee:	dc16      	bgt.n	8002f1e <__aeabi_i2d+0x4a>
 8002ef0:	0003      	movs	r3, r0
 8002ef2:	002e      	movs	r6, r5
 8002ef4:	3315      	adds	r3, #21
 8002ef6:	409e      	lsls	r6, r3
 8002ef8:	230b      	movs	r3, #11
 8002efa:	1a18      	subs	r0, r3, r0
 8002efc:	40c5      	lsrs	r5, r0
 8002efe:	0552      	lsls	r2, r2, #21
 8002f00:	032d      	lsls	r5, r5, #12
 8002f02:	0b2d      	lsrs	r5, r5, #12
 8002f04:	0d53      	lsrs	r3, r2, #21
 8002f06:	e003      	b.n	8002f10 <__aeabi_i2d+0x3c>
 8002f08:	2400      	movs	r4, #0
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	2500      	movs	r5, #0
 8002f0e:	2600      	movs	r6, #0
 8002f10:	051b      	lsls	r3, r3, #20
 8002f12:	432b      	orrs	r3, r5
 8002f14:	07e4      	lsls	r4, r4, #31
 8002f16:	4323      	orrs	r3, r4
 8002f18:	0030      	movs	r0, r6
 8002f1a:	0019      	movs	r1, r3
 8002f1c:	bd70      	pop	{r4, r5, r6, pc}
 8002f1e:	380b      	subs	r0, #11
 8002f20:	4085      	lsls	r5, r0
 8002f22:	0552      	lsls	r2, r2, #21
 8002f24:	032d      	lsls	r5, r5, #12
 8002f26:	2600      	movs	r6, #0
 8002f28:	0b2d      	lsrs	r5, r5, #12
 8002f2a:	0d53      	lsrs	r3, r2, #21
 8002f2c:	e7f0      	b.n	8002f10 <__aeabi_i2d+0x3c>
 8002f2e:	46c0      	nop			; (mov r8, r8)
 8002f30:	0000041e 	.word	0x0000041e

08002f34 <__aeabi_ui2d>:
 8002f34:	b510      	push	{r4, lr}
 8002f36:	1e04      	subs	r4, r0, #0
 8002f38:	d010      	beq.n	8002f5c <__aeabi_ui2d+0x28>
 8002f3a:	f000 f8f1 	bl	8003120 <__clzsi2>
 8002f3e:	4b0f      	ldr	r3, [pc, #60]	; (8002f7c <__aeabi_ui2d+0x48>)
 8002f40:	1a1b      	subs	r3, r3, r0
 8002f42:	280a      	cmp	r0, #10
 8002f44:	dc11      	bgt.n	8002f6a <__aeabi_ui2d+0x36>
 8002f46:	220b      	movs	r2, #11
 8002f48:	0021      	movs	r1, r4
 8002f4a:	1a12      	subs	r2, r2, r0
 8002f4c:	40d1      	lsrs	r1, r2
 8002f4e:	3015      	adds	r0, #21
 8002f50:	030a      	lsls	r2, r1, #12
 8002f52:	055b      	lsls	r3, r3, #21
 8002f54:	4084      	lsls	r4, r0
 8002f56:	0b12      	lsrs	r2, r2, #12
 8002f58:	0d5b      	lsrs	r3, r3, #21
 8002f5a:	e001      	b.n	8002f60 <__aeabi_ui2d+0x2c>
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	2200      	movs	r2, #0
 8002f60:	051b      	lsls	r3, r3, #20
 8002f62:	4313      	orrs	r3, r2
 8002f64:	0020      	movs	r0, r4
 8002f66:	0019      	movs	r1, r3
 8002f68:	bd10      	pop	{r4, pc}
 8002f6a:	0022      	movs	r2, r4
 8002f6c:	380b      	subs	r0, #11
 8002f6e:	4082      	lsls	r2, r0
 8002f70:	055b      	lsls	r3, r3, #21
 8002f72:	0312      	lsls	r2, r2, #12
 8002f74:	2400      	movs	r4, #0
 8002f76:	0b12      	lsrs	r2, r2, #12
 8002f78:	0d5b      	lsrs	r3, r3, #21
 8002f7a:	e7f1      	b.n	8002f60 <__aeabi_ui2d+0x2c>
 8002f7c:	0000041e 	.word	0x0000041e

08002f80 <__aeabi_f2d>:
 8002f80:	b570      	push	{r4, r5, r6, lr}
 8002f82:	0043      	lsls	r3, r0, #1
 8002f84:	0246      	lsls	r6, r0, #9
 8002f86:	0fc4      	lsrs	r4, r0, #31
 8002f88:	20fe      	movs	r0, #254	; 0xfe
 8002f8a:	0e1b      	lsrs	r3, r3, #24
 8002f8c:	1c59      	adds	r1, r3, #1
 8002f8e:	0a75      	lsrs	r5, r6, #9
 8002f90:	4208      	tst	r0, r1
 8002f92:	d00c      	beq.n	8002fae <__aeabi_f2d+0x2e>
 8002f94:	22e0      	movs	r2, #224	; 0xe0
 8002f96:	0092      	lsls	r2, r2, #2
 8002f98:	4694      	mov	ip, r2
 8002f9a:	076d      	lsls	r5, r5, #29
 8002f9c:	0b36      	lsrs	r6, r6, #12
 8002f9e:	4463      	add	r3, ip
 8002fa0:	051b      	lsls	r3, r3, #20
 8002fa2:	4333      	orrs	r3, r6
 8002fa4:	07e4      	lsls	r4, r4, #31
 8002fa6:	4323      	orrs	r3, r4
 8002fa8:	0028      	movs	r0, r5
 8002faa:	0019      	movs	r1, r3
 8002fac:	bd70      	pop	{r4, r5, r6, pc}
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d114      	bne.n	8002fdc <__aeabi_f2d+0x5c>
 8002fb2:	2d00      	cmp	r5, #0
 8002fb4:	d01b      	beq.n	8002fee <__aeabi_f2d+0x6e>
 8002fb6:	0028      	movs	r0, r5
 8002fb8:	f000 f8b2 	bl	8003120 <__clzsi2>
 8002fbc:	280a      	cmp	r0, #10
 8002fbe:	dc1c      	bgt.n	8002ffa <__aeabi_f2d+0x7a>
 8002fc0:	230b      	movs	r3, #11
 8002fc2:	002e      	movs	r6, r5
 8002fc4:	1a1b      	subs	r3, r3, r0
 8002fc6:	40de      	lsrs	r6, r3
 8002fc8:	0003      	movs	r3, r0
 8002fca:	3315      	adds	r3, #21
 8002fcc:	409d      	lsls	r5, r3
 8002fce:	4a0e      	ldr	r2, [pc, #56]	; (8003008 <__aeabi_f2d+0x88>)
 8002fd0:	0336      	lsls	r6, r6, #12
 8002fd2:	1a12      	subs	r2, r2, r0
 8002fd4:	0552      	lsls	r2, r2, #21
 8002fd6:	0b36      	lsrs	r6, r6, #12
 8002fd8:	0d53      	lsrs	r3, r2, #21
 8002fda:	e7e1      	b.n	8002fa0 <__aeabi_f2d+0x20>
 8002fdc:	2d00      	cmp	r5, #0
 8002fde:	d009      	beq.n	8002ff4 <__aeabi_f2d+0x74>
 8002fe0:	2280      	movs	r2, #128	; 0x80
 8002fe2:	0b36      	lsrs	r6, r6, #12
 8002fe4:	0312      	lsls	r2, r2, #12
 8002fe6:	4b09      	ldr	r3, [pc, #36]	; (800300c <__aeabi_f2d+0x8c>)
 8002fe8:	076d      	lsls	r5, r5, #29
 8002fea:	4316      	orrs	r6, r2
 8002fec:	e7d8      	b.n	8002fa0 <__aeabi_f2d+0x20>
 8002fee:	2300      	movs	r3, #0
 8002ff0:	2600      	movs	r6, #0
 8002ff2:	e7d5      	b.n	8002fa0 <__aeabi_f2d+0x20>
 8002ff4:	2600      	movs	r6, #0
 8002ff6:	4b05      	ldr	r3, [pc, #20]	; (800300c <__aeabi_f2d+0x8c>)
 8002ff8:	e7d2      	b.n	8002fa0 <__aeabi_f2d+0x20>
 8002ffa:	0003      	movs	r3, r0
 8002ffc:	3b0b      	subs	r3, #11
 8002ffe:	409d      	lsls	r5, r3
 8003000:	002e      	movs	r6, r5
 8003002:	2500      	movs	r5, #0
 8003004:	e7e3      	b.n	8002fce <__aeabi_f2d+0x4e>
 8003006:	46c0      	nop			; (mov r8, r8)
 8003008:	00000389 	.word	0x00000389
 800300c:	000007ff 	.word	0x000007ff

08003010 <__aeabi_d2f>:
 8003010:	0002      	movs	r2, r0
 8003012:	004b      	lsls	r3, r1, #1
 8003014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003016:	0d5b      	lsrs	r3, r3, #21
 8003018:	030c      	lsls	r4, r1, #12
 800301a:	4e3d      	ldr	r6, [pc, #244]	; (8003110 <__aeabi_d2f+0x100>)
 800301c:	0a64      	lsrs	r4, r4, #9
 800301e:	0f40      	lsrs	r0, r0, #29
 8003020:	1c5f      	adds	r7, r3, #1
 8003022:	0fc9      	lsrs	r1, r1, #31
 8003024:	4304      	orrs	r4, r0
 8003026:	00d5      	lsls	r5, r2, #3
 8003028:	4237      	tst	r7, r6
 800302a:	d00a      	beq.n	8003042 <__aeabi_d2f+0x32>
 800302c:	4839      	ldr	r0, [pc, #228]	; (8003114 <__aeabi_d2f+0x104>)
 800302e:	181e      	adds	r6, r3, r0
 8003030:	2efe      	cmp	r6, #254	; 0xfe
 8003032:	dd16      	ble.n	8003062 <__aeabi_d2f+0x52>
 8003034:	20ff      	movs	r0, #255	; 0xff
 8003036:	2400      	movs	r4, #0
 8003038:	05c0      	lsls	r0, r0, #23
 800303a:	4320      	orrs	r0, r4
 800303c:	07c9      	lsls	r1, r1, #31
 800303e:	4308      	orrs	r0, r1
 8003040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003042:	2b00      	cmp	r3, #0
 8003044:	d106      	bne.n	8003054 <__aeabi_d2f+0x44>
 8003046:	432c      	orrs	r4, r5
 8003048:	d026      	beq.n	8003098 <__aeabi_d2f+0x88>
 800304a:	2205      	movs	r2, #5
 800304c:	0192      	lsls	r2, r2, #6
 800304e:	0a54      	lsrs	r4, r2, #9
 8003050:	b2d8      	uxtb	r0, r3
 8003052:	e7f1      	b.n	8003038 <__aeabi_d2f+0x28>
 8003054:	4325      	orrs	r5, r4
 8003056:	d0ed      	beq.n	8003034 <__aeabi_d2f+0x24>
 8003058:	2080      	movs	r0, #128	; 0x80
 800305a:	03c0      	lsls	r0, r0, #15
 800305c:	4304      	orrs	r4, r0
 800305e:	20ff      	movs	r0, #255	; 0xff
 8003060:	e7ea      	b.n	8003038 <__aeabi_d2f+0x28>
 8003062:	2e00      	cmp	r6, #0
 8003064:	dd1b      	ble.n	800309e <__aeabi_d2f+0x8e>
 8003066:	0192      	lsls	r2, r2, #6
 8003068:	1e53      	subs	r3, r2, #1
 800306a:	419a      	sbcs	r2, r3
 800306c:	00e4      	lsls	r4, r4, #3
 800306e:	0f6d      	lsrs	r5, r5, #29
 8003070:	4322      	orrs	r2, r4
 8003072:	432a      	orrs	r2, r5
 8003074:	0753      	lsls	r3, r2, #29
 8003076:	d048      	beq.n	800310a <__aeabi_d2f+0xfa>
 8003078:	230f      	movs	r3, #15
 800307a:	4013      	ands	r3, r2
 800307c:	2b04      	cmp	r3, #4
 800307e:	d000      	beq.n	8003082 <__aeabi_d2f+0x72>
 8003080:	3204      	adds	r2, #4
 8003082:	2380      	movs	r3, #128	; 0x80
 8003084:	04db      	lsls	r3, r3, #19
 8003086:	4013      	ands	r3, r2
 8003088:	d03f      	beq.n	800310a <__aeabi_d2f+0xfa>
 800308a:	1c70      	adds	r0, r6, #1
 800308c:	2efe      	cmp	r6, #254	; 0xfe
 800308e:	d0d1      	beq.n	8003034 <__aeabi_d2f+0x24>
 8003090:	0192      	lsls	r2, r2, #6
 8003092:	0a54      	lsrs	r4, r2, #9
 8003094:	b2c0      	uxtb	r0, r0
 8003096:	e7cf      	b.n	8003038 <__aeabi_d2f+0x28>
 8003098:	2000      	movs	r0, #0
 800309a:	2400      	movs	r4, #0
 800309c:	e7cc      	b.n	8003038 <__aeabi_d2f+0x28>
 800309e:	0032      	movs	r2, r6
 80030a0:	3217      	adds	r2, #23
 80030a2:	db22      	blt.n	80030ea <__aeabi_d2f+0xda>
 80030a4:	2080      	movs	r0, #128	; 0x80
 80030a6:	0400      	lsls	r0, r0, #16
 80030a8:	4320      	orrs	r0, r4
 80030aa:	241e      	movs	r4, #30
 80030ac:	1ba4      	subs	r4, r4, r6
 80030ae:	2c1f      	cmp	r4, #31
 80030b0:	dd1d      	ble.n	80030ee <__aeabi_d2f+0xde>
 80030b2:	2202      	movs	r2, #2
 80030b4:	4252      	negs	r2, r2
 80030b6:	1b96      	subs	r6, r2, r6
 80030b8:	0002      	movs	r2, r0
 80030ba:	40f2      	lsrs	r2, r6
 80030bc:	0016      	movs	r6, r2
 80030be:	2c20      	cmp	r4, #32
 80030c0:	d004      	beq.n	80030cc <__aeabi_d2f+0xbc>
 80030c2:	4a15      	ldr	r2, [pc, #84]	; (8003118 <__aeabi_d2f+0x108>)
 80030c4:	4694      	mov	ip, r2
 80030c6:	4463      	add	r3, ip
 80030c8:	4098      	lsls	r0, r3
 80030ca:	4305      	orrs	r5, r0
 80030cc:	002a      	movs	r2, r5
 80030ce:	1e53      	subs	r3, r2, #1
 80030d0:	419a      	sbcs	r2, r3
 80030d2:	4332      	orrs	r2, r6
 80030d4:	2600      	movs	r6, #0
 80030d6:	0753      	lsls	r3, r2, #29
 80030d8:	d1ce      	bne.n	8003078 <__aeabi_d2f+0x68>
 80030da:	2480      	movs	r4, #128	; 0x80
 80030dc:	0013      	movs	r3, r2
 80030de:	04e4      	lsls	r4, r4, #19
 80030e0:	2001      	movs	r0, #1
 80030e2:	4023      	ands	r3, r4
 80030e4:	4222      	tst	r2, r4
 80030e6:	d1d3      	bne.n	8003090 <__aeabi_d2f+0x80>
 80030e8:	e7b0      	b.n	800304c <__aeabi_d2f+0x3c>
 80030ea:	2300      	movs	r3, #0
 80030ec:	e7ad      	b.n	800304a <__aeabi_d2f+0x3a>
 80030ee:	4a0b      	ldr	r2, [pc, #44]	; (800311c <__aeabi_d2f+0x10c>)
 80030f0:	4694      	mov	ip, r2
 80030f2:	002a      	movs	r2, r5
 80030f4:	40e2      	lsrs	r2, r4
 80030f6:	0014      	movs	r4, r2
 80030f8:	002a      	movs	r2, r5
 80030fa:	4463      	add	r3, ip
 80030fc:	409a      	lsls	r2, r3
 80030fe:	4098      	lsls	r0, r3
 8003100:	1e55      	subs	r5, r2, #1
 8003102:	41aa      	sbcs	r2, r5
 8003104:	4302      	orrs	r2, r0
 8003106:	4322      	orrs	r2, r4
 8003108:	e7e4      	b.n	80030d4 <__aeabi_d2f+0xc4>
 800310a:	0033      	movs	r3, r6
 800310c:	e79e      	b.n	800304c <__aeabi_d2f+0x3c>
 800310e:	46c0      	nop			; (mov r8, r8)
 8003110:	000007fe 	.word	0x000007fe
 8003114:	fffffc80 	.word	0xfffffc80
 8003118:	fffffca2 	.word	0xfffffca2
 800311c:	fffffc82 	.word	0xfffffc82

08003120 <__clzsi2>:
 8003120:	211c      	movs	r1, #28
 8003122:	2301      	movs	r3, #1
 8003124:	041b      	lsls	r3, r3, #16
 8003126:	4298      	cmp	r0, r3
 8003128:	d301      	bcc.n	800312e <__clzsi2+0xe>
 800312a:	0c00      	lsrs	r0, r0, #16
 800312c:	3910      	subs	r1, #16
 800312e:	0a1b      	lsrs	r3, r3, #8
 8003130:	4298      	cmp	r0, r3
 8003132:	d301      	bcc.n	8003138 <__clzsi2+0x18>
 8003134:	0a00      	lsrs	r0, r0, #8
 8003136:	3908      	subs	r1, #8
 8003138:	091b      	lsrs	r3, r3, #4
 800313a:	4298      	cmp	r0, r3
 800313c:	d301      	bcc.n	8003142 <__clzsi2+0x22>
 800313e:	0900      	lsrs	r0, r0, #4
 8003140:	3904      	subs	r1, #4
 8003142:	a202      	add	r2, pc, #8	; (adr r2, 800314c <__clzsi2+0x2c>)
 8003144:	5c10      	ldrb	r0, [r2, r0]
 8003146:	1840      	adds	r0, r0, r1
 8003148:	4770      	bx	lr
 800314a:	46c0      	nop			; (mov r8, r8)
 800314c:	02020304 	.word	0x02020304
 8003150:	01010101 	.word	0x01010101
	...

0800315c <hex2int>:
//}



uint8_t hex2int(char ch)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	0002      	movs	r2, r0
 8003164:	1dfb      	adds	r3, r7, #7
 8003166:	701a      	strb	r2, [r3, #0]
	if (ch >= '0' && ch <= '9')
 8003168:	1dfb      	adds	r3, r7, #7
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	2b2f      	cmp	r3, #47	; 0x2f
 800316e:	d908      	bls.n	8003182 <hex2int+0x26>
 8003170:	1dfb      	adds	r3, r7, #7
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	2b39      	cmp	r3, #57	; 0x39
 8003176:	d804      	bhi.n	8003182 <hex2int+0x26>
		return ch - '0';
 8003178:	1dfb      	adds	r3, r7, #7
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	3b30      	subs	r3, #48	; 0x30
 800317e:	b2db      	uxtb	r3, r3
 8003180:	e01a      	b.n	80031b8 <hex2int+0x5c>
	if (ch >= 'A' && ch <= 'F')
 8003182:	1dfb      	adds	r3, r7, #7
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	2b40      	cmp	r3, #64	; 0x40
 8003188:	d908      	bls.n	800319c <hex2int+0x40>
 800318a:	1dfb      	adds	r3, r7, #7
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	2b46      	cmp	r3, #70	; 0x46
 8003190:	d804      	bhi.n	800319c <hex2int+0x40>
		return ch - 'A' + 10;
 8003192:	1dfb      	adds	r3, r7, #7
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	3b37      	subs	r3, #55	; 0x37
 8003198:	b2db      	uxtb	r3, r3
 800319a:	e00d      	b.n	80031b8 <hex2int+0x5c>
	if (ch >= 'a' && ch <= 'f')
 800319c:	1dfb      	adds	r3, r7, #7
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	2b60      	cmp	r3, #96	; 0x60
 80031a2:	d908      	bls.n	80031b6 <hex2int+0x5a>
 80031a4:	1dfb      	adds	r3, r7, #7
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	2b66      	cmp	r3, #102	; 0x66
 80031aa:	d804      	bhi.n	80031b6 <hex2int+0x5a>
		return ch - 'a' + 10;
 80031ac:	1dfb      	adds	r3, r7, #7
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	3b57      	subs	r3, #87	; 0x57
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	e000      	b.n	80031b8 <hex2int+0x5c>
	return -1;
 80031b6:	23ff      	movs	r3, #255	; 0xff
}
 80031b8:	0018      	movs	r0, r3
 80031ba:	46bd      	mov	sp, r7
 80031bc:	b002      	add	sp, #8
 80031be:	bd80      	pop	{r7, pc}

080031c0 <nmea_parser>:
		crc ^= nmea_data[i];
	}
	return crc;
}
uint8_t* nmea_parser(char *NR,uint8_t responseLenght,uint8_t *checkSum ,uint8_t *rCheckSum)
{
 80031c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031c2:	b0c1      	sub	sp, #260	; 0x104
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6178      	str	r0, [r7, #20]
 80031c8:	60fa      	str	r2, [r7, #12]
 80031ca:	60bb      	str	r3, [r7, #8]
 80031cc:	200b      	movs	r0, #11
 80031ce:	2608      	movs	r6, #8
 80031d0:	1983      	adds	r3, r0, r6
 80031d2:	19db      	adds	r3, r3, r7
 80031d4:	1c0a      	adds	r2, r1, #0
 80031d6:	701a      	strb	r2, [r3, #0]
	char (*nmeaResponse)[responseLenght];
 80031d8:	0031      	movs	r1, r6
 80031da:	1843      	adds	r3, r0, r1
 80031dc:	19db      	adds	r3, r3, r7
 80031de:	781e      	ldrb	r6, [r3, #0]
 80031e0:	0033      	movs	r3, r6
 80031e2:	3b01      	subs	r3, #1
 80031e4:	22d0      	movs	r2, #208	; 0xd0
 80031e6:	1852      	adds	r2, r2, r1
 80031e8:	19d2      	adds	r2, r2, r7
 80031ea:	6013      	str	r3, [r2, #0]
 80031ec:	603e      	str	r6, [r7, #0]
 80031ee:	2300      	movs	r3, #0
 80031f0:	607b      	str	r3, [r7, #4]
 80031f2:	6839      	ldr	r1, [r7, #0]
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	000b      	movs	r3, r1
 80031f8:	0f5b      	lsrs	r3, r3, #29
 80031fa:	0010      	movs	r0, r2
 80031fc:	00c5      	lsls	r5, r0, #3
 80031fe:	431d      	orrs	r5, r3
 8003200:	000b      	movs	r3, r1
 8003202:	00dc      	lsls	r4, r3, #3
	uint8_t gnssCRC = 0;
 8003204:	23f5      	movs	r3, #245	; 0xf5
 8003206:	2008      	movs	r0, #8
 8003208:	181b      	adds	r3, r3, r0
 800320a:	19db      	adds	r3, r3, r7
 800320c:	2200      	movs	r2, #0
 800320e:	701a      	strb	r2, [r3, #0]
	nmeaResponse=NR;
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	21cc      	movs	r1, #204	; 0xcc
 8003214:	180a      	adds	r2, r1, r0
 8003216:	19d2      	adds	r2, r2, r7
 8003218:	6013      	str	r3, [r2, #0]
	uint8_t QOG = 0xC0;
 800321a:	23cb      	movs	r3, #203	; 0xcb
 800321c:	181b      	adds	r3, r3, r0
 800321e:	19db      	adds	r3, r3, r7
 8003220:	22c0      	movs	r2, #192	; 0xc0
 8003222:	701a      	strb	r2, [r3, #0]
	uint16_t courseStatus = 0x0;
 8003224:	23f6      	movs	r3, #246	; 0xf6
 8003226:	181b      	adds	r3, r3, r0
 8003228:	19db      	adds	r3, r3, r7
 800322a:	2200      	movs	r2, #0
 800322c:	801a      	strh	r2, [r3, #0]
	static uint8_t GPSInformation[18] = {0};


	char *p1;
	char *p2;
	p1 = strstr(nmeaResponse[GNGGA],"$GNGGA");
 800322e:	0032      	movs	r2, r6
 8003230:	000c      	movs	r4, r1
 8003232:	180b      	adds	r3, r1, r0
 8003234:	19db      	adds	r3, r3, r7
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	189b      	adds	r3, r3, r2
 800323a:	4ad2      	ldr	r2, [pc, #840]	; (8003584 <nmea_parser+0x3c4>)
 800323c:	0011      	movs	r1, r2
 800323e:	0018      	movs	r0, r3
 8003240:	f00b fc29 	bl	800ea96 <strstr>
 8003244:	0003      	movs	r3, r0
 8003246:	25c4      	movs	r5, #196	; 0xc4
 8003248:	2008      	movs	r0, #8
 800324a:	182a      	adds	r2, r5, r0
 800324c:	19d2      	adds	r2, r2, r7
 800324e:	6013      	str	r3, [r2, #0]
	p2 = strstr(nmeaResponse[GNRMC],"$GNRMC");
 8003250:	4acd      	ldr	r2, [pc, #820]	; (8003588 <nmea_parser+0x3c8>)
 8003252:	1823      	adds	r3, r4, r0
 8003254:	19db      	adds	r3, r3, r7
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	0011      	movs	r1, r2
 800325a:	0018      	movs	r0, r3
 800325c:	f00b fc1b 	bl	800ea96 <strstr>
 8003260:	0003      	movs	r3, r0
 8003262:	22c0      	movs	r2, #192	; 0xc0
 8003264:	2008      	movs	r0, #8
 8003266:	1811      	adds	r1, r2, r0
 8003268:	19c9      	adds	r1, r1, r7
 800326a:	600b      	str	r3, [r1, #0]

	if(p1 != NULL && p2 != NULL){
 800326c:	0001      	movs	r1, r0
 800326e:	186b      	adds	r3, r5, r1
 8003270:	19db      	adds	r3, r3, r7
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d101      	bne.n	800327c <nmea_parser+0xbc>
 8003278:	f000 fe90 	bl	8003f9c <nmea_parser+0xddc>
 800327c:	1853      	adds	r3, r2, r1
 800327e:	19db      	adds	r3, r3, r7
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <nmea_parser+0xca>
 8003286:	f000 fe89 	bl	8003f9c <nmea_parser+0xddc>


		for(uint8_t sen=0;sen<2;sen++){
 800328a:	23f4      	movs	r3, #244	; 0xf4
 800328c:	185b      	adds	r3, r3, r1
 800328e:	19db      	adds	r3, r3, r7
 8003290:	2200      	movs	r2, #0
 8003292:	701a      	strb	r2, [r3, #0]
 8003294:	e0d9      	b.n	800344a <nmea_parser+0x28a>
			uint8_t recvCrc=0;
 8003296:	23bf      	movs	r3, #191	; 0xbf
 8003298:	2108      	movs	r1, #8
 800329a:	185b      	adds	r3, r3, r1
 800329c:	19db      	adds	r3, r3, r7
 800329e:	2200      	movs	r2, #0
 80032a0:	701a      	strb	r2, [r3, #0]
			char rawData[100];
			memset(rawData,0,sizeof(rawData));
 80032a2:	2214      	movs	r2, #20
 80032a4:	000c      	movs	r4, r1
 80032a6:	1853      	adds	r3, r2, r1
 80032a8:	19db      	adds	r3, r3, r7
 80032aa:	2264      	movs	r2, #100	; 0x64
 80032ac:	2100      	movs	r1, #0
 80032ae:	0018      	movs	r0, r3
 80032b0:	f00b fb99 	bl	800e9e6 <memset>

			char *ind1;
			char *ind2;
			ind1=strchr(nmeaResponse[sen],'$');
 80032b4:	25f4      	movs	r5, #244	; 0xf4
 80032b6:	0021      	movs	r1, r4
 80032b8:	186b      	adds	r3, r5, r1
 80032ba:	19db      	adds	r3, r3, r7
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	0032      	movs	r2, r6
 80032c0:	4353      	muls	r3, r2
 80032c2:	22cc      	movs	r2, #204	; 0xcc
 80032c4:	1850      	adds	r0, r2, r1
 80032c6:	19c1      	adds	r1, r0, r7
 80032c8:	680a      	ldr	r2, [r1, #0]
 80032ca:	18d3      	adds	r3, r2, r3
 80032cc:	2124      	movs	r1, #36	; 0x24
 80032ce:	0018      	movs	r0, r3
 80032d0:	f00b fbbf 	bl	800ea52 <strchr>
 80032d4:	0003      	movs	r3, r0
 80032d6:	24b8      	movs	r4, #184	; 0xb8
 80032d8:	2208      	movs	r2, #8
 80032da:	18a1      	adds	r1, r4, r2
 80032dc:	19c9      	adds	r1, r1, r7
 80032de:	600b      	str	r3, [r1, #0]
			ind2=strchr(nmeaResponse[sen],'*');
 80032e0:	0011      	movs	r1, r2
 80032e2:	186b      	adds	r3, r5, r1
 80032e4:	19db      	adds	r3, r3, r7
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	0032      	movs	r2, r6
 80032ea:	4353      	muls	r3, r2
 80032ec:	22cc      	movs	r2, #204	; 0xcc
 80032ee:	000d      	movs	r5, r1
 80032f0:	1852      	adds	r2, r2, r1
 80032f2:	19d2      	adds	r2, r2, r7
 80032f4:	6812      	ldr	r2, [r2, #0]
 80032f6:	18d3      	adds	r3, r2, r3
 80032f8:	212a      	movs	r1, #42	; 0x2a
 80032fa:	0018      	movs	r0, r3
 80032fc:	f00b fba9 	bl	800ea52 <strchr>
 8003300:	0003      	movs	r3, r0
 8003302:	21b4      	movs	r1, #180	; 0xb4
 8003304:	194a      	adds	r2, r1, r5
 8003306:	19d2      	adds	r2, r2, r7
 8003308:	6013      	str	r3, [r2, #0]

			if(ind1!=NULL && ind2!=NULL){
 800330a:	1963      	adds	r3, r4, r5
 800330c:	19da      	adds	r2, r3, r7
 800330e:	6813      	ldr	r3, [r2, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d100      	bne.n	8003316 <nmea_parser+0x156>
 8003314:	e08a      	b.n	800342c <nmea_parser+0x26c>
 8003316:	194b      	adds	r3, r1, r5
 8003318:	19da      	adds	r2, r3, r7
 800331a:	6813      	ldr	r3, [r2, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d100      	bne.n	8003322 <nmea_parser+0x162>
 8003320:	e084      	b.n	800342c <nmea_parser+0x26c>
				uint8_t len = ind2-ind1;
 8003322:	194b      	adds	r3, r1, r5
 8003324:	19da      	adds	r2, r3, r7
 8003326:	6812      	ldr	r2, [r2, #0]
 8003328:	1963      	adds	r3, r4, r5
 800332a:	19d8      	adds	r0, r3, r7
 800332c:	6803      	ldr	r3, [r0, #0]
 800332e:	1ad2      	subs	r2, r2, r3
 8003330:	20b3      	movs	r0, #179	; 0xb3
 8003332:	002c      	movs	r4, r5
 8003334:	1903      	adds	r3, r0, r4
 8003336:	19db      	adds	r3, r3, r7
 8003338:	701a      	strb	r2, [r3, #0]
				gnssCRC = 0;
 800333a:	22f5      	movs	r2, #245	; 0xf5
 800333c:	0020      	movs	r0, r4
 800333e:	1813      	adds	r3, r2, r0
 8003340:	19db      	adds	r3, r3, r7
 8003342:	2200      	movs	r2, #0
 8003344:	701a      	strb	r2, [r3, #0]
				recvCrc = hex2int(*(ind2+2)) | hex2int(*(ind2+1)) <<4;
 8003346:	000d      	movs	r5, r1
 8003348:	180b      	adds	r3, r1, r0
 800334a:	19da      	adds	r2, r3, r7
 800334c:	6813      	ldr	r3, [r2, #0]
 800334e:	3302      	adds	r3, #2
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	0018      	movs	r0, r3
 8003354:	f7ff ff02 	bl	800315c <hex2int>
 8003358:	0003      	movs	r3, r0
 800335a:	b25c      	sxtb	r4, r3
 800335c:	2108      	movs	r1, #8
 800335e:	186b      	adds	r3, r5, r1
 8003360:	19da      	adds	r2, r3, r7
 8003362:	6813      	ldr	r3, [r2, #0]
 8003364:	3301      	adds	r3, #1
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	0018      	movs	r0, r3
 800336a:	f7ff fef7 	bl	800315c <hex2int>
 800336e:	0003      	movs	r3, r0
 8003370:	011b      	lsls	r3, r3, #4
 8003372:	b25b      	sxtb	r3, r3
 8003374:	4323      	orrs	r3, r4
 8003376:	b25a      	sxtb	r2, r3
 8003378:	23bf      	movs	r3, #191	; 0xbf
 800337a:	2108      	movs	r1, #8
 800337c:	185b      	adds	r3, r3, r1
 800337e:	19db      	adds	r3, r3, r7
 8003380:	701a      	strb	r2, [r3, #0]
				for(uint8_t i=0;i<len-1;i++){
 8003382:	23f3      	movs	r3, #243	; 0xf3
 8003384:	185b      	adds	r3, r3, r1
 8003386:	19db      	adds	r3, r3, r7
 8003388:	2200      	movs	r2, #0
 800338a:	701a      	strb	r2, [r3, #0]
 800338c:	e02b      	b.n	80033e6 <nmea_parser+0x226>
					rawData[i]=*(ind1+1+i);
 800338e:	20f3      	movs	r0, #243	; 0xf3
 8003390:	2108      	movs	r1, #8
 8003392:	1843      	adds	r3, r0, r1
 8003394:	19db      	adds	r3, r3, r7
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	3301      	adds	r3, #1
 800339a:	22b8      	movs	r2, #184	; 0xb8
 800339c:	1852      	adds	r2, r2, r1
 800339e:	19d2      	adds	r2, r2, r7
 80033a0:	6812      	ldr	r2, [r2, #0]
 80033a2:	18d2      	adds	r2, r2, r3
 80033a4:	000d      	movs	r5, r1
 80033a6:	1943      	adds	r3, r0, r5
 80033a8:	19db      	adds	r3, r3, r7
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	7811      	ldrb	r1, [r2, #0]
 80033ae:	2414      	movs	r4, #20
 80033b0:	1962      	adds	r2, r4, r5
 80033b2:	19d2      	adds	r2, r2, r7
 80033b4:	54d1      	strb	r1, [r2, r3]
					gnssCRC ^= rawData[i];
 80033b6:	0029      	movs	r1, r5
 80033b8:	1843      	adds	r3, r0, r1
 80033ba:	19db      	adds	r3, r3, r7
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	000d      	movs	r5, r1
 80033c0:	1862      	adds	r2, r4, r1
 80033c2:	19d2      	adds	r2, r2, r7
 80033c4:	5cd1      	ldrb	r1, [r2, r3]
 80033c6:	22f5      	movs	r2, #245	; 0xf5
 80033c8:	002c      	movs	r4, r5
 80033ca:	1913      	adds	r3, r2, r4
 80033cc:	19db      	adds	r3, r3, r7
 80033ce:	1912      	adds	r2, r2, r4
 80033d0:	19d2      	adds	r2, r2, r7
 80033d2:	7812      	ldrb	r2, [r2, #0]
 80033d4:	404a      	eors	r2, r1
 80033d6:	701a      	strb	r2, [r3, #0]
				for(uint8_t i=0;i<len-1;i++){
 80033d8:	1903      	adds	r3, r0, r4
 80033da:	19db      	adds	r3, r3, r7
 80033dc:	781a      	ldrb	r2, [r3, #0]
 80033de:	1903      	adds	r3, r0, r4
 80033e0:	19db      	adds	r3, r3, r7
 80033e2:	3201      	adds	r2, #1
 80033e4:	701a      	strb	r2, [r3, #0]
 80033e6:	23f3      	movs	r3, #243	; 0xf3
 80033e8:	2008      	movs	r0, #8
 80033ea:	181b      	adds	r3, r3, r0
 80033ec:	19db      	adds	r3, r3, r7
 80033ee:	781a      	ldrb	r2, [r3, #0]
 80033f0:	23b3      	movs	r3, #179	; 0xb3
 80033f2:	181b      	adds	r3, r3, r0
 80033f4:	19db      	adds	r3, r3, r7
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	3b01      	subs	r3, #1
 80033fa:	429a      	cmp	r2, r3
 80033fc:	dbc7      	blt.n	800338e <nmea_parser+0x1ce>

				}
				*checkSum = gnssCRC;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	21f5      	movs	r1, #245	; 0xf5
 8003402:	0004      	movs	r4, r0
 8003404:	190a      	adds	r2, r1, r4
 8003406:	19d2      	adds	r2, r2, r7
 8003408:	7812      	ldrb	r2, [r2, #0]
 800340a:	701a      	strb	r2, [r3, #0]
				*rCheckSum = recvCrc;
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	20bf      	movs	r0, #191	; 0xbf
 8003410:	1902      	adds	r2, r0, r4
 8003412:	19d2      	adds	r2, r2, r7
 8003414:	7812      	ldrb	r2, [r2, #0]
 8003416:	701a      	strb	r2, [r3, #0]
			if(ind1!=NULL && ind2!=NULL){
 8003418:	46c0      	nop			; (mov r8, r8)
			}
			else{
				return NULL;
			}
			if(recvCrc != gnssCRC){
 800341a:	1903      	adds	r3, r0, r4
 800341c:	19da      	adds	r2, r3, r7
 800341e:	190b      	adds	r3, r1, r4
 8003420:	19db      	adds	r3, r3, r7
 8003422:	7812      	ldrb	r2, [r2, #0]
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	429a      	cmp	r2, r3
 8003428:	d006      	beq.n	8003438 <nmea_parser+0x278>
 800342a:	e002      	b.n	8003432 <nmea_parser+0x272>
				return NULL;
 800342c:	2300      	movs	r3, #0
 800342e:	f000 fdb9 	bl	8003fa4 <nmea_parser+0xde4>
				return NULL;
 8003432:	2300      	movs	r3, #0
 8003434:	f000 fdb6 	bl	8003fa4 <nmea_parser+0xde4>
		for(uint8_t sen=0;sen<2;sen++){
 8003438:	21f4      	movs	r1, #244	; 0xf4
 800343a:	2008      	movs	r0, #8
 800343c:	180b      	adds	r3, r1, r0
 800343e:	19db      	adds	r3, r3, r7
 8003440:	781a      	ldrb	r2, [r3, #0]
 8003442:	180b      	adds	r3, r1, r0
 8003444:	19db      	adds	r3, r3, r7
 8003446:	3201      	adds	r2, #1
 8003448:	701a      	strb	r2, [r3, #0]
 800344a:	23f4      	movs	r3, #244	; 0xf4
 800344c:	2108      	movs	r1, #8
 800344e:	185b      	adds	r3, r3, r1
 8003450:	19db      	adds	r3, r3, r7
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d800      	bhi.n	800345a <nmea_parser+0x29a>
 8003458:	e71d      	b.n	8003296 <nmea_parser+0xd6>
		// }

		//data is valid. go on
		uint8_t GNGGAComma[15];
		uint8_t GNRMCComma[15];
		memset(GNGGAComma, 0, sizeof(GNGGAComma)); // for automatically-allocated arrays
 800345a:	23a4      	movs	r3, #164	; 0xa4
 800345c:	000c      	movs	r4, r1
 800345e:	191b      	adds	r3, r3, r4
 8003460:	19db      	adds	r3, r3, r7
 8003462:	220f      	movs	r2, #15
 8003464:	2100      	movs	r1, #0
 8003466:	0018      	movs	r0, r3
 8003468:	f00b fabd 	bl	800e9e6 <memset>
		memset(GNRMCComma, 0, sizeof(GNRMCComma)); // for automatically-allocated arrays
 800346c:	2394      	movs	r3, #148	; 0x94
 800346e:	191b      	adds	r3, r3, r4
 8003470:	19db      	adds	r3, r3, r7
 8003472:	220f      	movs	r2, #15
 8003474:	2100      	movs	r1, #0
 8003476:	0018      	movs	r0, r3
 8003478:	f00b fab5 	bl	800e9e6 <memset>


		uint8_t GNGGACInd=0;
 800347c:	23f2      	movs	r3, #242	; 0xf2
 800347e:	0021      	movs	r1, r4
 8003480:	185b      	adds	r3, r3, r1
 8003482:	19db      	adds	r3, r3, r7
 8003484:	2200      	movs	r2, #0
 8003486:	701a      	strb	r2, [r3, #0]
		uint8_t GNRMCCInd=0;
 8003488:	23f1      	movs	r3, #241	; 0xf1
 800348a:	185b      	adds	r3, r3, r1
 800348c:	19db      	adds	r3, r3, r7
 800348e:	2200      	movs	r2, #0
 8003490:	701a      	strb	r2, [r3, #0]
		uint32_t latitude;
		uint32_t longitude;
		uint8_t tempDataIndex = 0;
 8003492:	23e7      	movs	r3, #231	; 0xe7
 8003494:	185b      	adds	r3, r3, r1
 8003496:	19db      	adds	r3, r3, r7
 8003498:	2200      	movs	r2, #0
 800349a:	701a      	strb	r2, [r3, #0]




		//-------store all parameter's comma
		for(uint8_t i=0;i<responseLenght;i++ ){
 800349c:	23e6      	movs	r3, #230	; 0xe6
 800349e:	185b      	adds	r3, r3, r1
 80034a0:	19db      	adds	r3, r3, r7
 80034a2:	2200      	movs	r2, #0
 80034a4:	701a      	strb	r2, [r3, #0]
 80034a6:	e048      	b.n	800353a <nmea_parser+0x37a>
			if(nmeaResponse[GNGGA][i]==44){
 80034a8:	0032      	movs	r2, r6
 80034aa:	23cc      	movs	r3, #204	; 0xcc
 80034ac:	2408      	movs	r4, #8
 80034ae:	191b      	adds	r3, r3, r4
 80034b0:	19db      	adds	r3, r3, r7
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	189a      	adds	r2, r3, r2
 80034b6:	21e6      	movs	r1, #230	; 0xe6
 80034b8:	190b      	adds	r3, r1, r4
 80034ba:	19db      	adds	r3, r3, r7
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	5cd3      	ldrb	r3, [r2, r3]
 80034c0:	2b2c      	cmp	r3, #44	; 0x2c
 80034c2:	d112      	bne.n	80034ea <nmea_parser+0x32a>
				GNGGAComma[GNGGACInd]=i;
 80034c4:	20f2      	movs	r0, #242	; 0xf2
 80034c6:	1903      	adds	r3, r0, r4
 80034c8:	19db      	adds	r3, r3, r7
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	22a4      	movs	r2, #164	; 0xa4
 80034ce:	1912      	adds	r2, r2, r4
 80034d0:	19d2      	adds	r2, r2, r7
 80034d2:	1909      	adds	r1, r1, r4
 80034d4:	19c9      	adds	r1, r1, r7
 80034d6:	7809      	ldrb	r1, [r1, #0]
 80034d8:	54d1      	strb	r1, [r2, r3]
				GNGGACInd++;
 80034da:	0021      	movs	r1, r4
 80034dc:	1843      	adds	r3, r0, r1
 80034de:	19db      	adds	r3, r3, r7
 80034e0:	781a      	ldrb	r2, [r3, #0]
 80034e2:	1843      	adds	r3, r0, r1
 80034e4:	19db      	adds	r3, r3, r7
 80034e6:	3201      	adds	r2, #1
 80034e8:	701a      	strb	r2, [r3, #0]
			}
			if(nmeaResponse[GNRMC][i]==44){
 80034ea:	21e6      	movs	r1, #230	; 0xe6
 80034ec:	2408      	movs	r4, #8
 80034ee:	190b      	adds	r3, r1, r4
 80034f0:	19db      	adds	r3, r3, r7
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	22cc      	movs	r2, #204	; 0xcc
 80034f6:	1912      	adds	r2, r2, r4
 80034f8:	19d2      	adds	r2, r2, r7
 80034fa:	6812      	ldr	r2, [r2, #0]
 80034fc:	5cd3      	ldrb	r3, [r2, r3]
 80034fe:	2b2c      	cmp	r3, #44	; 0x2c
 8003500:	d112      	bne.n	8003528 <nmea_parser+0x368>
				GNRMCComma[GNRMCCInd]=i;
 8003502:	20f1      	movs	r0, #241	; 0xf1
 8003504:	1903      	adds	r3, r0, r4
 8003506:	19db      	adds	r3, r3, r7
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	2294      	movs	r2, #148	; 0x94
 800350c:	1912      	adds	r2, r2, r4
 800350e:	19d2      	adds	r2, r2, r7
 8003510:	1909      	adds	r1, r1, r4
 8003512:	19c9      	adds	r1, r1, r7
 8003514:	7809      	ldrb	r1, [r1, #0]
 8003516:	54d1      	strb	r1, [r2, r3]
				GNRMCCInd++;
 8003518:	0021      	movs	r1, r4
 800351a:	1843      	adds	r3, r0, r1
 800351c:	19db      	adds	r3, r3, r7
 800351e:	781a      	ldrb	r2, [r3, #0]
 8003520:	1843      	adds	r3, r0, r1
 8003522:	19db      	adds	r3, r3, r7
 8003524:	3201      	adds	r2, #1
 8003526:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0;i<responseLenght;i++ ){
 8003528:	21e6      	movs	r1, #230	; 0xe6
 800352a:	2008      	movs	r0, #8
 800352c:	180b      	adds	r3, r1, r0
 800352e:	19db      	adds	r3, r3, r7
 8003530:	781a      	ldrb	r2, [r3, #0]
 8003532:	180b      	adds	r3, r1, r0
 8003534:	19db      	adds	r3, r3, r7
 8003536:	3201      	adds	r2, #1
 8003538:	701a      	strb	r2, [r3, #0]
 800353a:	23e6      	movs	r3, #230	; 0xe6
 800353c:	2108      	movs	r1, #8
 800353e:	185b      	adds	r3, r3, r1
 8003540:	19da      	adds	r2, r3, r7
 8003542:	230b      	movs	r3, #11
 8003544:	185b      	adds	r3, r3, r1
 8003546:	19db      	adds	r3, r3, r7
 8003548:	7812      	ldrb	r2, [r2, #0]
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	429a      	cmp	r2, r3
 800354e:	d3ab      	bcc.n	80034a8 <nmea_parser+0x2e8>
			}
		}

		//------------------------Time and date Stamp------------------------------------
		memset(tempData,0,sizeof(tempData));
 8003550:	2384      	movs	r3, #132	; 0x84
 8003552:	000c      	movs	r4, r1
 8003554:	185b      	adds	r3, r3, r1
 8003556:	19db      	adds	r3, r3, r7
 8003558:	220f      	movs	r2, #15
 800355a:	2100      	movs	r1, #0
 800355c:	0018      	movs	r0, r3
 800355e:	f00b fa42 	bl	800e9e6 <memset>
		tempDataIndex = 0;
 8003562:	23e7      	movs	r3, #231	; 0xe7
 8003564:	0021      	movs	r1, r4
 8003566:	185b      	adds	r3, r3, r1
 8003568:	19db      	adds	r3, r3, r7
 800356a:	2200      	movs	r2, #0
 800356c:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[8]+1;x<GNRMCComma[9];x++){
 800356e:	2394      	movs	r3, #148	; 0x94
 8003570:	185b      	adds	r3, r3, r1
 8003572:	19db      	adds	r3, r3, r7
 8003574:	7a1a      	ldrb	r2, [r3, #8]
 8003576:	23e5      	movs	r3, #229	; 0xe5
 8003578:	185b      	adds	r3, r3, r1
 800357a:	19db      	adds	r3, r3, r7
 800357c:	3201      	adds	r2, #1
 800357e:	701a      	strb	r2, [r3, #0]
 8003580:	e025      	b.n	80035ce <nmea_parser+0x40e>
 8003582:	46c0      	nop			; (mov r8, r8)
 8003584:	08012e80 	.word	0x08012e80
 8003588:	08012e88 	.word	0x08012e88
			tempData[tempDataIndex]= nmeaResponse[GNRMC][x];
 800358c:	20e5      	movs	r0, #229	; 0xe5
 800358e:	2508      	movs	r5, #8
 8003590:	1943      	adds	r3, r0, r5
 8003592:	19db      	adds	r3, r3, r7
 8003594:	781a      	ldrb	r2, [r3, #0]
 8003596:	24e7      	movs	r4, #231	; 0xe7
 8003598:	1963      	adds	r3, r4, r5
 800359a:	19db      	adds	r3, r3, r7
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	21cc      	movs	r1, #204	; 0xcc
 80035a0:	1949      	adds	r1, r1, r5
 80035a2:	19c9      	adds	r1, r1, r7
 80035a4:	6809      	ldr	r1, [r1, #0]
 80035a6:	5c89      	ldrb	r1, [r1, r2]
 80035a8:	2284      	movs	r2, #132	; 0x84
 80035aa:	1952      	adds	r2, r2, r5
 80035ac:	19d2      	adds	r2, r2, r7
 80035ae:	54d1      	strb	r1, [r2, r3]
			tempDataIndex++;
 80035b0:	0029      	movs	r1, r5
 80035b2:	1863      	adds	r3, r4, r1
 80035b4:	19db      	adds	r3, r3, r7
 80035b6:	781a      	ldrb	r2, [r3, #0]
 80035b8:	1863      	adds	r3, r4, r1
 80035ba:	19db      	adds	r3, r3, r7
 80035bc:	3201      	adds	r2, #1
 80035be:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[8]+1;x<GNRMCComma[9];x++){
 80035c0:	1843      	adds	r3, r0, r1
 80035c2:	19db      	adds	r3, r3, r7
 80035c4:	781a      	ldrb	r2, [r3, #0]
 80035c6:	1843      	adds	r3, r0, r1
 80035c8:	19db      	adds	r3, r3, r7
 80035ca:	3201      	adds	r2, #1
 80035cc:	701a      	strb	r2, [r3, #0]
 80035ce:	2394      	movs	r3, #148	; 0x94
 80035d0:	2008      	movs	r0, #8
 80035d2:	181b      	adds	r3, r3, r0
 80035d4:	19db      	adds	r3, r3, r7
 80035d6:	7a5b      	ldrb	r3, [r3, #9]
 80035d8:	22e5      	movs	r2, #229	; 0xe5
 80035da:	1812      	adds	r2, r2, r0
 80035dc:	19d2      	adds	r2, r2, r7
 80035de:	7812      	ldrb	r2, [r2, #0]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d3d3      	bcc.n	800358c <nmea_parser+0x3cc>
		}
		char tempData2[4];

		//Year (1 byte)
		memset(tempData2,0,sizeof(tempData2));
 80035e4:	2480      	movs	r4, #128	; 0x80
 80035e6:	1823      	adds	r3, r4, r0
 80035e8:	19db      	adds	r3, r3, r7
 80035ea:	2204      	movs	r2, #4
 80035ec:	2100      	movs	r1, #0
 80035ee:	0018      	movs	r0, r3
 80035f0:	f00b f9f9 	bl	800e9e6 <memset>
		tempData2[0]=tempData[4];
 80035f4:	2584      	movs	r5, #132	; 0x84
 80035f6:	2008      	movs	r0, #8
 80035f8:	182b      	adds	r3, r5, r0
 80035fa:	19db      	adds	r3, r3, r7
 80035fc:	791a      	ldrb	r2, [r3, #4]
 80035fe:	0021      	movs	r1, r4
 8003600:	180b      	adds	r3, r1, r0
 8003602:	19db      	adds	r3, r3, r7
 8003604:	701a      	strb	r2, [r3, #0]
		tempData2[1]=tempData[5];
 8003606:	182b      	adds	r3, r5, r0
 8003608:	19db      	adds	r3, r3, r7
 800360a:	795a      	ldrb	r2, [r3, #5]
 800360c:	000c      	movs	r4, r1
 800360e:	1823      	adds	r3, r4, r0
 8003610:	19db      	adds	r3, r3, r7
 8003612:	705a      	strb	r2, [r3, #1]
		GPSInformation[0] = (uint8_t)atoi(tempData2);
 8003614:	1823      	adds	r3, r4, r0
 8003616:	19db      	adds	r3, r3, r7
 8003618:	0018      	movs	r0, r3
 800361a:	f00b f985 	bl	800e928 <atoi>
 800361e:	0003      	movs	r3, r0
 8003620:	b2da      	uxtb	r2, r3
 8003622:	4bd4      	ldr	r3, [pc, #848]	; (8003974 <nmea_parser+0x7b4>)
 8003624:	701a      	strb	r2, [r3, #0]

		//month (1 byte)
		memset(tempData2,0,sizeof(tempData2));
 8003626:	2008      	movs	r0, #8
 8003628:	1823      	adds	r3, r4, r0
 800362a:	19db      	adds	r3, r3, r7
 800362c:	2204      	movs	r2, #4
 800362e:	2100      	movs	r1, #0
 8003630:	0018      	movs	r0, r3
 8003632:	f00b f9d8 	bl	800e9e6 <memset>
		tempData2[0]=tempData[2];
 8003636:	2008      	movs	r0, #8
 8003638:	182b      	adds	r3, r5, r0
 800363a:	19db      	adds	r3, r3, r7
 800363c:	789a      	ldrb	r2, [r3, #2]
 800363e:	0021      	movs	r1, r4
 8003640:	180b      	adds	r3, r1, r0
 8003642:	19db      	adds	r3, r3, r7
 8003644:	701a      	strb	r2, [r3, #0]
		tempData2[1]=tempData[3];
 8003646:	182b      	adds	r3, r5, r0
 8003648:	19db      	adds	r3, r3, r7
 800364a:	78da      	ldrb	r2, [r3, #3]
 800364c:	000c      	movs	r4, r1
 800364e:	1823      	adds	r3, r4, r0
 8003650:	19db      	adds	r3, r3, r7
 8003652:	705a      	strb	r2, [r3, #1]
		GPSInformation[1] = atoi(tempData2);
 8003654:	1823      	adds	r3, r4, r0
 8003656:	19db      	adds	r3, r3, r7
 8003658:	0018      	movs	r0, r3
 800365a:	f00b f965 	bl	800e928 <atoi>
 800365e:	0003      	movs	r3, r0
 8003660:	b2da      	uxtb	r2, r3
 8003662:	4bc4      	ldr	r3, [pc, #784]	; (8003974 <nmea_parser+0x7b4>)
 8003664:	705a      	strb	r2, [r3, #1]
		//day (1 byte)
		memset(tempData2,0,sizeof(tempData2));
 8003666:	2008      	movs	r0, #8
 8003668:	1823      	adds	r3, r4, r0
 800366a:	19db      	adds	r3, r3, r7
 800366c:	2204      	movs	r2, #4
 800366e:	2100      	movs	r1, #0
 8003670:	0018      	movs	r0, r3
 8003672:	f00b f9b8 	bl	800e9e6 <memset>
		tempData2[0]=tempData[0];
 8003676:	2008      	movs	r0, #8
 8003678:	182b      	adds	r3, r5, r0
 800367a:	19db      	adds	r3, r3, r7
 800367c:	781a      	ldrb	r2, [r3, #0]
 800367e:	0021      	movs	r1, r4
 8003680:	0004      	movs	r4, r0
 8003682:	190b      	adds	r3, r1, r4
 8003684:	19db      	adds	r3, r3, r7
 8003686:	701a      	strb	r2, [r3, #0]
		tempData2[1]=tempData[1];
 8003688:	192b      	adds	r3, r5, r4
 800368a:	19db      	adds	r3, r3, r7
 800368c:	785a      	ldrb	r2, [r3, #1]
 800368e:	190b      	adds	r3, r1, r4
 8003690:	19db      	adds	r3, r3, r7
 8003692:	705a      	strb	r2, [r3, #1]
		GPSInformation[2] = atoi(tempData2);
 8003694:	190b      	adds	r3, r1, r4
 8003696:	19db      	adds	r3, r3, r7
 8003698:	0018      	movs	r0, r3
 800369a:	f00b f945 	bl	800e928 <atoi>
 800369e:	0003      	movs	r3, r0
 80036a0:	b2da      	uxtb	r2, r3
 80036a2:	4bb4      	ldr	r3, [pc, #720]	; (8003974 <nmea_parser+0x7b4>)
 80036a4:	709a      	strb	r2, [r3, #2]

		memset(tempData,0,sizeof(tempData));
 80036a6:	192b      	adds	r3, r5, r4
 80036a8:	19db      	adds	r3, r3, r7
 80036aa:	220f      	movs	r2, #15
 80036ac:	2100      	movs	r1, #0
 80036ae:	0018      	movs	r0, r3
 80036b0:	f00b f999 	bl	800e9e6 <memset>
		tempDataIndex = 0;
 80036b4:	22e7      	movs	r2, #231	; 0xe7
 80036b6:	1913      	adds	r3, r2, r4
 80036b8:	19db      	adds	r3, r3, r7
 80036ba:	2200      	movs	r2, #0
 80036bc:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[0]+1;x<GNRMCComma[1]-4;x++){
 80036be:	2394      	movs	r3, #148	; 0x94
 80036c0:	191b      	adds	r3, r3, r4
 80036c2:	19db      	adds	r3, r3, r7
 80036c4:	781a      	ldrb	r2, [r3, #0]
 80036c6:	23e4      	movs	r3, #228	; 0xe4
 80036c8:	191b      	adds	r3, r3, r4
 80036ca:	19db      	adds	r3, r3, r7
 80036cc:	3201      	adds	r2, #1
 80036ce:	701a      	strb	r2, [r3, #0]
 80036d0:	e020      	b.n	8003714 <nmea_parser+0x554>
			tempData[tempDataIndex]= nmeaResponse[GNRMC][x];
 80036d2:	20e4      	movs	r0, #228	; 0xe4
 80036d4:	2508      	movs	r5, #8
 80036d6:	1943      	adds	r3, r0, r5
 80036d8:	19db      	adds	r3, r3, r7
 80036da:	781a      	ldrb	r2, [r3, #0]
 80036dc:	24e7      	movs	r4, #231	; 0xe7
 80036de:	1963      	adds	r3, r4, r5
 80036e0:	19db      	adds	r3, r3, r7
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	21cc      	movs	r1, #204	; 0xcc
 80036e6:	1949      	adds	r1, r1, r5
 80036e8:	19c9      	adds	r1, r1, r7
 80036ea:	6809      	ldr	r1, [r1, #0]
 80036ec:	5c89      	ldrb	r1, [r1, r2]
 80036ee:	2284      	movs	r2, #132	; 0x84
 80036f0:	1952      	adds	r2, r2, r5
 80036f2:	19d2      	adds	r2, r2, r7
 80036f4:	54d1      	strb	r1, [r2, r3]
			tempDataIndex++;
 80036f6:	0029      	movs	r1, r5
 80036f8:	1863      	adds	r3, r4, r1
 80036fa:	19db      	adds	r3, r3, r7
 80036fc:	781a      	ldrb	r2, [r3, #0]
 80036fe:	1863      	adds	r3, r4, r1
 8003700:	19db      	adds	r3, r3, r7
 8003702:	3201      	adds	r2, #1
 8003704:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[0]+1;x<GNRMCComma[1]-4;x++){
 8003706:	1843      	adds	r3, r0, r1
 8003708:	19db      	adds	r3, r3, r7
 800370a:	781a      	ldrb	r2, [r3, #0]
 800370c:	1843      	adds	r3, r0, r1
 800370e:	19db      	adds	r3, r3, r7
 8003710:	3201      	adds	r2, #1
 8003712:	701a      	strb	r2, [r3, #0]
 8003714:	23e4      	movs	r3, #228	; 0xe4
 8003716:	2108      	movs	r1, #8
 8003718:	185b      	adds	r3, r3, r1
 800371a:	19db      	adds	r3, r3, r7
 800371c:	781a      	ldrb	r2, [r3, #0]
 800371e:	2394      	movs	r3, #148	; 0x94
 8003720:	185b      	adds	r3, r3, r1
 8003722:	19db      	adds	r3, r3, r7
 8003724:	785b      	ldrb	r3, [r3, #1]
 8003726:	3b04      	subs	r3, #4
 8003728:	429a      	cmp	r2, r3
 800372a:	dbd2      	blt.n	80036d2 <nmea_parser+0x512>
		}
		//hour(1 byte)
		memset(tempData2,0,sizeof(tempData2));
 800372c:	2480      	movs	r4, #128	; 0x80
 800372e:	1863      	adds	r3, r4, r1
 8003730:	19db      	adds	r3, r3, r7
 8003732:	2204      	movs	r2, #4
 8003734:	2100      	movs	r1, #0
 8003736:	0018      	movs	r0, r3
 8003738:	f00b f955 	bl	800e9e6 <memset>
		tempData2[0]=tempData[0];
 800373c:	2584      	movs	r5, #132	; 0x84
 800373e:	2008      	movs	r0, #8
 8003740:	182b      	adds	r3, r5, r0
 8003742:	19db      	adds	r3, r3, r7
 8003744:	781a      	ldrb	r2, [r3, #0]
 8003746:	0021      	movs	r1, r4
 8003748:	180b      	adds	r3, r1, r0
 800374a:	19db      	adds	r3, r3, r7
 800374c:	701a      	strb	r2, [r3, #0]
		tempData2[1]=tempData[1];
 800374e:	182b      	adds	r3, r5, r0
 8003750:	19db      	adds	r3, r3, r7
 8003752:	785a      	ldrb	r2, [r3, #1]
 8003754:	000c      	movs	r4, r1
 8003756:	1823      	adds	r3, r4, r0
 8003758:	19db      	adds	r3, r3, r7
 800375a:	705a      	strb	r2, [r3, #1]
		GPSInformation[3] = (uint8_t)atoi(tempData2);
 800375c:	1823      	adds	r3, r4, r0
 800375e:	19db      	adds	r3, r3, r7
 8003760:	0018      	movs	r0, r3
 8003762:	f00b f8e1 	bl	800e928 <atoi>
 8003766:	0003      	movs	r3, r0
 8003768:	b2da      	uxtb	r2, r3
 800376a:	4b82      	ldr	r3, [pc, #520]	; (8003974 <nmea_parser+0x7b4>)
 800376c:	70da      	strb	r2, [r3, #3]
		//minutes(1 byte)
		memset(tempData2,0,sizeof(tempData2));
 800376e:	2008      	movs	r0, #8
 8003770:	1823      	adds	r3, r4, r0
 8003772:	19db      	adds	r3, r3, r7
 8003774:	2204      	movs	r2, #4
 8003776:	2100      	movs	r1, #0
 8003778:	0018      	movs	r0, r3
 800377a:	f00b f934 	bl	800e9e6 <memset>
		tempData2[0]=tempData[2];
 800377e:	2008      	movs	r0, #8
 8003780:	182b      	adds	r3, r5, r0
 8003782:	19db      	adds	r3, r3, r7
 8003784:	789a      	ldrb	r2, [r3, #2]
 8003786:	0021      	movs	r1, r4
 8003788:	180b      	adds	r3, r1, r0
 800378a:	19db      	adds	r3, r3, r7
 800378c:	701a      	strb	r2, [r3, #0]
		tempData2[1]=tempData[3];
 800378e:	182b      	adds	r3, r5, r0
 8003790:	19db      	adds	r3, r3, r7
 8003792:	78da      	ldrb	r2, [r3, #3]
 8003794:	000c      	movs	r4, r1
 8003796:	1823      	adds	r3, r4, r0
 8003798:	19db      	adds	r3, r3, r7
 800379a:	705a      	strb	r2, [r3, #1]
		GPSInformation[4] = (uint8_t)atoi(tempData2);
 800379c:	1823      	adds	r3, r4, r0
 800379e:	19db      	adds	r3, r3, r7
 80037a0:	0018      	movs	r0, r3
 80037a2:	f00b f8c1 	bl	800e928 <atoi>
 80037a6:	0003      	movs	r3, r0
 80037a8:	b2da      	uxtb	r2, r3
 80037aa:	4b72      	ldr	r3, [pc, #456]	; (8003974 <nmea_parser+0x7b4>)
 80037ac:	711a      	strb	r2, [r3, #4]
		//seconds(1 byte)
		memset(tempData2,0,sizeof(tempData2));
 80037ae:	2008      	movs	r0, #8
 80037b0:	1823      	adds	r3, r4, r0
 80037b2:	19db      	adds	r3, r3, r7
 80037b4:	2204      	movs	r2, #4
 80037b6:	2100      	movs	r1, #0
 80037b8:	0018      	movs	r0, r3
 80037ba:	f00b f914 	bl	800e9e6 <memset>
		tempData2[0]=tempData[4];
 80037be:	2008      	movs	r0, #8
 80037c0:	182b      	adds	r3, r5, r0
 80037c2:	19db      	adds	r3, r3, r7
 80037c4:	791a      	ldrb	r2, [r3, #4]
 80037c6:	0021      	movs	r1, r4
 80037c8:	0004      	movs	r4, r0
 80037ca:	190b      	adds	r3, r1, r4
 80037cc:	19db      	adds	r3, r3, r7
 80037ce:	701a      	strb	r2, [r3, #0]
		tempData2[1]=tempData[5];
 80037d0:	192b      	adds	r3, r5, r4
 80037d2:	19db      	adds	r3, r3, r7
 80037d4:	795a      	ldrb	r2, [r3, #5]
 80037d6:	190b      	adds	r3, r1, r4
 80037d8:	19db      	adds	r3, r3, r7
 80037da:	705a      	strb	r2, [r3, #1]
		GPSInformation[5] = (uint8_t)atoi(tempData2);
 80037dc:	190b      	adds	r3, r1, r4
 80037de:	19db      	adds	r3, r3, r7
 80037e0:	0018      	movs	r0, r3
 80037e2:	f00b f8a1 	bl	800e928 <atoi>
 80037e6:	0003      	movs	r3, r0
 80037e8:	b2da      	uxtb	r2, r3
 80037ea:	4b62      	ldr	r3, [pc, #392]	; (8003974 <nmea_parser+0x7b4>)
 80037ec:	715a      	strb	r2, [r3, #5]
		//--------------------------------time/date stamp end-------------------------------------------------

		//-----Quantity of GPS information satellites(1 byte, left 4 bit for gps info len, right 4 bit for qty of sats)
		memset(tempData,0,sizeof(tempData));
 80037ee:	192b      	adds	r3, r5, r4
 80037f0:	19db      	adds	r3, r3, r7
 80037f2:	220f      	movs	r2, #15
 80037f4:	2100      	movs	r1, #0
 80037f6:	0018      	movs	r0, r3
 80037f8:	f00b f8f5 	bl	800e9e6 <memset>
		tempDataIndex = 0;
 80037fc:	23e7      	movs	r3, #231	; 0xe7
 80037fe:	191b      	adds	r3, r3, r4
 8003800:	19db      	adds	r3, r3, r7
 8003802:	2200      	movs	r2, #0
 8003804:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNGGAComma[6]+1;x<GNGGAComma[7];x++){
 8003806:	23a4      	movs	r3, #164	; 0xa4
 8003808:	191b      	adds	r3, r3, r4
 800380a:	19db      	adds	r3, r3, r7
 800380c:	799a      	ldrb	r2, [r3, #6]
 800380e:	23e3      	movs	r3, #227	; 0xe3
 8003810:	191b      	adds	r3, r3, r4
 8003812:	19db      	adds	r3, r3, r7
 8003814:	3201      	adds	r2, #1
 8003816:	701a      	strb	r2, [r3, #0]
 8003818:	e022      	b.n	8003860 <nmea_parser+0x6a0>
			tempData[tempDataIndex] = nmeaResponse[GNGGA][x];
 800381a:	0032      	movs	r2, r6
 800381c:	23cc      	movs	r3, #204	; 0xcc
 800381e:	2508      	movs	r5, #8
 8003820:	195b      	adds	r3, r3, r5
 8003822:	19db      	adds	r3, r3, r7
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	1899      	adds	r1, r3, r2
 8003828:	20e3      	movs	r0, #227	; 0xe3
 800382a:	1943      	adds	r3, r0, r5
 800382c:	19db      	adds	r3, r3, r7
 800382e:	781a      	ldrb	r2, [r3, #0]
 8003830:	24e7      	movs	r4, #231	; 0xe7
 8003832:	1963      	adds	r3, r4, r5
 8003834:	19db      	adds	r3, r3, r7
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	5c89      	ldrb	r1, [r1, r2]
 800383a:	2284      	movs	r2, #132	; 0x84
 800383c:	1952      	adds	r2, r2, r5
 800383e:	19d2      	adds	r2, r2, r7
 8003840:	54d1      	strb	r1, [r2, r3]
			tempDataIndex++;
 8003842:	0029      	movs	r1, r5
 8003844:	1863      	adds	r3, r4, r1
 8003846:	19db      	adds	r3, r3, r7
 8003848:	781a      	ldrb	r2, [r3, #0]
 800384a:	1863      	adds	r3, r4, r1
 800384c:	19db      	adds	r3, r3, r7
 800384e:	3201      	adds	r2, #1
 8003850:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNGGAComma[6]+1;x<GNGGAComma[7];x++){
 8003852:	1843      	adds	r3, r0, r1
 8003854:	19db      	adds	r3, r3, r7
 8003856:	781a      	ldrb	r2, [r3, #0]
 8003858:	1843      	adds	r3, r0, r1
 800385a:	19db      	adds	r3, r3, r7
 800385c:	3201      	adds	r2, #1
 800385e:	701a      	strb	r2, [r3, #0]
 8003860:	23a4      	movs	r3, #164	; 0xa4
 8003862:	2508      	movs	r5, #8
 8003864:	195b      	adds	r3, r3, r5
 8003866:	19db      	adds	r3, r3, r7
 8003868:	79db      	ldrb	r3, [r3, #7]
 800386a:	22e3      	movs	r2, #227	; 0xe3
 800386c:	1952      	adds	r2, r2, r5
 800386e:	19d2      	adds	r2, r2, r7
 8003870:	7812      	ldrb	r2, [r2, #0]
 8003872:	429a      	cmp	r2, r3
 8003874:	d3d1      	bcc.n	800381a <nmea_parser+0x65a>
		}
		QOG |= (atoi(tempData));
 8003876:	2484      	movs	r4, #132	; 0x84
 8003878:	1963      	adds	r3, r4, r5
 800387a:	19db      	adds	r3, r3, r7
 800387c:	0018      	movs	r0, r3
 800387e:	f00b f853 	bl	800e928 <atoi>
 8003882:	0003      	movs	r3, r0
 8003884:	b25a      	sxtb	r2, r3
 8003886:	21cb      	movs	r1, #203	; 0xcb
 8003888:	0028      	movs	r0, r5
 800388a:	180b      	adds	r3, r1, r0
 800388c:	19db      	adds	r3, r3, r7
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	b25b      	sxtb	r3, r3
 8003892:	4313      	orrs	r3, r2
 8003894:	b25a      	sxtb	r2, r3
 8003896:	180b      	adds	r3, r1, r0
 8003898:	19db      	adds	r3, r3, r7
 800389a:	701a      	strb	r2, [r3, #0]
		GPSInformation[6] = QOG;
 800389c:	4b35      	ldr	r3, [pc, #212]	; (8003974 <nmea_parser+0x7b4>)
 800389e:	180a      	adds	r2, r1, r0
 80038a0:	19d2      	adds	r2, r2, r7
 80038a2:	7812      	ldrb	r2, [r2, #0]
 80038a4:	719a      	strb	r2, [r3, #6]
		//-------------------------------------QOG END------------------------------------------------------


		//------------------------------------latitude (4 bytes)--------------------------------------
		// char *ptr1;
		memset(tempData,0,sizeof(tempData));
 80038a6:	0005      	movs	r5, r0
 80038a8:	1823      	adds	r3, r4, r0
 80038aa:	19db      	adds	r3, r3, r7
 80038ac:	220f      	movs	r2, #15
 80038ae:	2100      	movs	r1, #0
 80038b0:	0018      	movs	r0, r3
 80038b2:	f00b f898 	bl	800e9e6 <memset>
		memset(tempData2,0,sizeof(tempData2));
 80038b6:	2380      	movs	r3, #128	; 0x80
 80038b8:	002c      	movs	r4, r5
 80038ba:	191b      	adds	r3, r3, r4
 80038bc:	19db      	adds	r3, r3, r7
 80038be:	2204      	movs	r2, #4
 80038c0:	2100      	movs	r1, #0
 80038c2:	0018      	movs	r0, r3
 80038c4:	f00b f88f 	bl	800e9e6 <memset>
		tempDataIndex = 0;
 80038c8:	23e7      	movs	r3, #231	; 0xe7
 80038ca:	0021      	movs	r1, r4
 80038cc:	185b      	adds	r3, r3, r1
 80038ce:	19db      	adds	r3, r3, r7
 80038d0:	2200      	movs	r2, #0
 80038d2:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[2]+1;x<GNRMCComma[3];x++){
 80038d4:	2394      	movs	r3, #148	; 0x94
 80038d6:	185b      	adds	r3, r3, r1
 80038d8:	19db      	adds	r3, r3, r7
 80038da:	789a      	ldrb	r2, [r3, #2]
 80038dc:	23e2      	movs	r3, #226	; 0xe2
 80038de:	185b      	adds	r3, r3, r1
 80038e0:	19db      	adds	r3, r3, r7
 80038e2:	3201      	adds	r2, #1
 80038e4:	701a      	strb	r2, [r3, #0]
 80038e6:	e020      	b.n	800392a <nmea_parser+0x76a>
			tempData[tempDataIndex]= nmeaResponse[GNRMC][x];
 80038e8:	20e2      	movs	r0, #226	; 0xe2
 80038ea:	2508      	movs	r5, #8
 80038ec:	1943      	adds	r3, r0, r5
 80038ee:	19db      	adds	r3, r3, r7
 80038f0:	781a      	ldrb	r2, [r3, #0]
 80038f2:	24e7      	movs	r4, #231	; 0xe7
 80038f4:	1963      	adds	r3, r4, r5
 80038f6:	19db      	adds	r3, r3, r7
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	21cc      	movs	r1, #204	; 0xcc
 80038fc:	1949      	adds	r1, r1, r5
 80038fe:	19c9      	adds	r1, r1, r7
 8003900:	6809      	ldr	r1, [r1, #0]
 8003902:	5c89      	ldrb	r1, [r1, r2]
 8003904:	2284      	movs	r2, #132	; 0x84
 8003906:	1952      	adds	r2, r2, r5
 8003908:	19d2      	adds	r2, r2, r7
 800390a:	54d1      	strb	r1, [r2, r3]
			tempDataIndex++;
 800390c:	0029      	movs	r1, r5
 800390e:	1863      	adds	r3, r4, r1
 8003910:	19db      	adds	r3, r3, r7
 8003912:	781a      	ldrb	r2, [r3, #0]
 8003914:	1863      	adds	r3, r4, r1
 8003916:	19db      	adds	r3, r3, r7
 8003918:	3201      	adds	r2, #1
 800391a:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[2]+1;x<GNRMCComma[3];x++){
 800391c:	1843      	adds	r3, r0, r1
 800391e:	19db      	adds	r3, r3, r7
 8003920:	781a      	ldrb	r2, [r3, #0]
 8003922:	1843      	adds	r3, r0, r1
 8003924:	19db      	adds	r3, r3, r7
 8003926:	3201      	adds	r2, #1
 8003928:	701a      	strb	r2, [r3, #0]
 800392a:	2394      	movs	r3, #148	; 0x94
 800392c:	2408      	movs	r4, #8
 800392e:	191b      	adds	r3, r3, r4
 8003930:	19db      	adds	r3, r3, r7
 8003932:	78db      	ldrb	r3, [r3, #3]
 8003934:	22e2      	movs	r2, #226	; 0xe2
 8003936:	1912      	adds	r2, r2, r4
 8003938:	19d2      	adds	r2, r2, r7
 800393a:	7812      	ldrb	r2, [r2, #0]
 800393c:	429a      	cmp	r2, r3
 800393e:	d3d3      	bcc.n	80038e8 <nmea_parser+0x728>
		}
		tempData2[0]=tempData[0];
 8003940:	2184      	movs	r1, #132	; 0x84
 8003942:	190b      	adds	r3, r1, r4
 8003944:	19db      	adds	r3, r3, r7
 8003946:	781a      	ldrb	r2, [r3, #0]
 8003948:	2080      	movs	r0, #128	; 0x80
 800394a:	1903      	adds	r3, r0, r4
 800394c:	19db      	adds	r3, r3, r7
 800394e:	701a      	strb	r2, [r3, #0]
		tempData2[1]=tempData[1];
 8003950:	190b      	adds	r3, r1, r4
 8003952:	19db      	adds	r3, r3, r7
 8003954:	785a      	ldrb	r2, [r3, #1]
 8003956:	0021      	movs	r1, r4
 8003958:	1843      	adds	r3, r0, r1
 800395a:	19db      	adds	r3, r3, r7
 800395c:	705a      	strb	r2, [r3, #1]
		uint8_t t1=2;
 800395e:	23e1      	movs	r3, #225	; 0xe1
 8003960:	185b      	adds	r3, r3, r1
 8003962:	19db      	adds	r3, r3, r7
 8003964:	2202      	movs	r2, #2
 8003966:	701a      	strb	r2, [r3, #0]
		uint8_t t2=0;
 8003968:	23e0      	movs	r3, #224	; 0xe0
 800396a:	185b      	adds	r3, r3, r1
 800396c:	19db      	adds	r3, r3, r7
 800396e:	2200      	movs	r2, #0
 8003970:	701a      	strb	r2, [r3, #0]
		char tB[8];
		while(tempData[t1]!=NULL){
 8003972:	e02f      	b.n	80039d4 <nmea_parser+0x814>
 8003974:	200002ac 	.word	0x200002ac
			if(tempData[t1]!='.'){
 8003978:	21e1      	movs	r1, #225	; 0xe1
 800397a:	2008      	movs	r0, #8
 800397c:	180b      	adds	r3, r1, r0
 800397e:	19db      	adds	r3, r3, r7
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	2484      	movs	r4, #132	; 0x84
 8003984:	1822      	adds	r2, r4, r0
 8003986:	19d2      	adds	r2, r2, r7
 8003988:	5cd3      	ldrb	r3, [r2, r3]
 800398a:	2b2e      	cmp	r3, #46	; 0x2e
 800398c:	d019      	beq.n	80039c2 <nmea_parser+0x802>
				tB[t2]=tempData[t1];
 800398e:	0005      	movs	r5, r0
 8003990:	180b      	adds	r3, r1, r0
 8003992:	19db      	adds	r3, r3, r7
 8003994:	781a      	ldrb	r2, [r3, #0]
 8003996:	20e0      	movs	r0, #224	; 0xe0
 8003998:	0029      	movs	r1, r5
 800399a:	1843      	adds	r3, r0, r1
 800399c:	19db      	adds	r3, r3, r7
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	000d      	movs	r5, r1
 80039a2:	1861      	adds	r1, r4, r1
 80039a4:	19c9      	adds	r1, r1, r7
 80039a6:	5c89      	ldrb	r1, [r1, r2]
 80039a8:	2278      	movs	r2, #120	; 0x78
 80039aa:	002c      	movs	r4, r5
 80039ac:	1912      	adds	r2, r2, r4
 80039ae:	19d2      	adds	r2, r2, r7
 80039b0:	54d1      	strb	r1, [r2, r3]
				t2++;
 80039b2:	0021      	movs	r1, r4
 80039b4:	1843      	adds	r3, r0, r1
 80039b6:	19db      	adds	r3, r3, r7
 80039b8:	781a      	ldrb	r2, [r3, #0]
 80039ba:	1843      	adds	r3, r0, r1
 80039bc:	19db      	adds	r3, r3, r7
 80039be:	3201      	adds	r2, #1
 80039c0:	701a      	strb	r2, [r3, #0]
			}
			t1++;
 80039c2:	21e1      	movs	r1, #225	; 0xe1
 80039c4:	2008      	movs	r0, #8
 80039c6:	180b      	adds	r3, r1, r0
 80039c8:	19db      	adds	r3, r3, r7
 80039ca:	781a      	ldrb	r2, [r3, #0]
 80039cc:	180b      	adds	r3, r1, r0
 80039ce:	19db      	adds	r3, r3, r7
 80039d0:	3201      	adds	r2, #1
 80039d2:	701a      	strb	r2, [r3, #0]
		while(tempData[t1]!=NULL){
 80039d4:	23e1      	movs	r3, #225	; 0xe1
 80039d6:	2008      	movs	r0, #8
 80039d8:	181b      	adds	r3, r3, r0
 80039da:	19db      	adds	r3, r3, r7
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	2284      	movs	r2, #132	; 0x84
 80039e0:	1812      	adds	r2, r2, r0
 80039e2:	19d2      	adds	r2, r2, r7
 80039e4:	5cd3      	ldrb	r3, [r2, r3]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1c6      	bne.n	8003978 <nmea_parser+0x7b8>
		}
		latitude=atoi(tB);
 80039ea:	2378      	movs	r3, #120	; 0x78
 80039ec:	0004      	movs	r4, r0
 80039ee:	181b      	adds	r3, r3, r0
 80039f0:	19db      	adds	r3, r3, r7
 80039f2:	0018      	movs	r0, r3
 80039f4:	f00a ff98 	bl	800e928 <atoi>
 80039f8:	0003      	movs	r3, r0
 80039fa:	22ec      	movs	r2, #236	; 0xec
 80039fc:	0020      	movs	r0, r4
 80039fe:	1811      	adds	r1, r2, r0
 8003a00:	19c9      	adds	r1, r1, r7
 8003a02:	600b      	str	r3, [r1, #0]
		if(t2==4){
 8003a04:	23e0      	movs	r3, #224	; 0xe0
 8003a06:	181b      	adds	r3, r3, r0
 8003a08:	19db      	adds	r3, r3, r7
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	2b04      	cmp	r3, #4
 8003a0e:	d109      	bne.n	8003a24 <nmea_parser+0x864>
			latitude*=100;
 8003a10:	0011      	movs	r1, r2
 8003a12:	1813      	adds	r3, r2, r0
 8003a14:	19db      	adds	r3, r3, r7
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2264      	movs	r2, #100	; 0x64
 8003a1a:	4353      	muls	r3, r2
 8003a1c:	180a      	adds	r2, r1, r0
 8003a1e:	19d2      	adds	r2, r2, r7
 8003a20:	6013      	str	r3, [r2, #0]
 8003a22:	e011      	b.n	8003a48 <nmea_parser+0x888>
		}
		else if(t2==5){
 8003a24:	23e0      	movs	r3, #224	; 0xe0
 8003a26:	2008      	movs	r0, #8
 8003a28:	181b      	adds	r3, r3, r0
 8003a2a:	19db      	adds	r3, r3, r7
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	2b05      	cmp	r3, #5
 8003a30:	d10a      	bne.n	8003a48 <nmea_parser+0x888>
			latitude*=10;
 8003a32:	21ec      	movs	r1, #236	; 0xec
 8003a34:	180b      	adds	r3, r1, r0
 8003a36:	19db      	adds	r3, r3, r7
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	0013      	movs	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	189b      	adds	r3, r3, r2
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	180a      	adds	r2, r1, r0
 8003a44:	19d2      	adds	r2, r2, r7
 8003a46:	6013      	str	r3, [r2, #0]
		}
		latitude=latitude*3;
 8003a48:	24ec      	movs	r4, #236	; 0xec
 8003a4a:	2008      	movs	r0, #8
 8003a4c:	1823      	adds	r3, r4, r0
 8003a4e:	19db      	adds	r3, r3, r7
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	0013      	movs	r3, r2
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	189b      	adds	r3, r3, r2
 8003a58:	1822      	adds	r2, r4, r0
 8003a5a:	19d2      	adds	r2, r2, r7
 8003a5c:	6013      	str	r3, [r2, #0]
		latitude+= (atoi(tempData2)*60*30000);
 8003a5e:	2580      	movs	r5, #128	; 0x80
 8003a60:	182b      	adds	r3, r5, r0
 8003a62:	19db      	adds	r3, r3, r7
 8003a64:	0018      	movs	r0, r3
 8003a66:	f00a ff5f 	bl	800e928 <atoi>
 8003a6a:	0003      	movs	r3, r0
 8003a6c:	4aae      	ldr	r2, [pc, #696]	; (8003d28 <nmea_parser+0xb68>)
 8003a6e:	4353      	muls	r3, r2
 8003a70:	001a      	movs	r2, r3
 8003a72:	2008      	movs	r0, #8
 8003a74:	1823      	adds	r3, r4, r0
 8003a76:	19db      	adds	r3, r3, r7
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	189b      	adds	r3, r3, r2
 8003a7c:	0021      	movs	r1, r4
 8003a7e:	180a      	adds	r2, r1, r0
 8003a80:	19d2      	adds	r2, r2, r7
 8003a82:	6013      	str	r3, [r2, #0]
		GPSInformation[7] = latitude>>24;
 8003a84:	180b      	adds	r3, r1, r0
 8003a86:	19db      	adds	r3, r3, r7
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	0e1b      	lsrs	r3, r3, #24
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	4ba7      	ldr	r3, [pc, #668]	; (8003d2c <nmea_parser+0xb6c>)
 8003a90:	71da      	strb	r2, [r3, #7]
		GPSInformation[8] = latitude>>16;
 8003a92:	180b      	adds	r3, r1, r0
 8003a94:	19db      	adds	r3, r3, r7
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	0c1b      	lsrs	r3, r3, #16
 8003a9a:	b2da      	uxtb	r2, r3
 8003a9c:	4ba3      	ldr	r3, [pc, #652]	; (8003d2c <nmea_parser+0xb6c>)
 8003a9e:	721a      	strb	r2, [r3, #8]
		GPSInformation[9] = latitude>>8;
 8003aa0:	180b      	adds	r3, r1, r0
 8003aa2:	19db      	adds	r3, r3, r7
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	0a1b      	lsrs	r3, r3, #8
 8003aa8:	b2da      	uxtb	r2, r3
 8003aaa:	4ba0      	ldr	r3, [pc, #640]	; (8003d2c <nmea_parser+0xb6c>)
 8003aac:	725a      	strb	r2, [r3, #9]
		GPSInformation[10] = latitude;
 8003aae:	180b      	adds	r3, r1, r0
 8003ab0:	19db      	adds	r3, r3, r7
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	b2da      	uxtb	r2, r3
 8003ab6:	4b9d      	ldr	r3, [pc, #628]	; (8003d2c <nmea_parser+0xb6c>)
 8003ab8:	729a      	strb	r2, [r3, #10]



		//------------------------------------longitude (4 bytes)--------------------------------------
		// char *ptr2;
		memset(tempData,0,sizeof(tempData));
 8003aba:	2384      	movs	r3, #132	; 0x84
 8003abc:	0004      	movs	r4, r0
 8003abe:	191b      	adds	r3, r3, r4
 8003ac0:	19db      	adds	r3, r3, r7
 8003ac2:	220f      	movs	r2, #15
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	0018      	movs	r0, r3
 8003ac8:	f00a ff8d 	bl	800e9e6 <memset>
		memset(tempData2,0,sizeof(tempData2));
 8003acc:	192b      	adds	r3, r5, r4
 8003ace:	19db      	adds	r3, r3, r7
 8003ad0:	2204      	movs	r2, #4
 8003ad2:	2100      	movs	r1, #0
 8003ad4:	0018      	movs	r0, r3
 8003ad6:	f00a ff86 	bl	800e9e6 <memset>
		tempDataIndex = 0;
 8003ada:	23e7      	movs	r3, #231	; 0xe7
 8003adc:	0020      	movs	r0, r4
 8003ade:	181b      	adds	r3, r3, r0
 8003ae0:	19db      	adds	r3, r3, r7
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[4]+1;x<GNRMCComma[5];x++){
 8003ae6:	2394      	movs	r3, #148	; 0x94
 8003ae8:	181b      	adds	r3, r3, r0
 8003aea:	19db      	adds	r3, r3, r7
 8003aec:	791a      	ldrb	r2, [r3, #4]
 8003aee:	23df      	movs	r3, #223	; 0xdf
 8003af0:	181b      	adds	r3, r3, r0
 8003af2:	19db      	adds	r3, r3, r7
 8003af4:	3201      	adds	r2, #1
 8003af6:	701a      	strb	r2, [r3, #0]
 8003af8:	e020      	b.n	8003b3c <nmea_parser+0x97c>
			tempData[tempDataIndex]= nmeaResponse[GNRMC][x];
 8003afa:	20df      	movs	r0, #223	; 0xdf
 8003afc:	2508      	movs	r5, #8
 8003afe:	1943      	adds	r3, r0, r5
 8003b00:	19db      	adds	r3, r3, r7
 8003b02:	781a      	ldrb	r2, [r3, #0]
 8003b04:	24e7      	movs	r4, #231	; 0xe7
 8003b06:	1963      	adds	r3, r4, r5
 8003b08:	19db      	adds	r3, r3, r7
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	21cc      	movs	r1, #204	; 0xcc
 8003b0e:	1949      	adds	r1, r1, r5
 8003b10:	19c9      	adds	r1, r1, r7
 8003b12:	6809      	ldr	r1, [r1, #0]
 8003b14:	5c89      	ldrb	r1, [r1, r2]
 8003b16:	2284      	movs	r2, #132	; 0x84
 8003b18:	1952      	adds	r2, r2, r5
 8003b1a:	19d2      	adds	r2, r2, r7
 8003b1c:	54d1      	strb	r1, [r2, r3]
			tempDataIndex++;
 8003b1e:	0029      	movs	r1, r5
 8003b20:	1863      	adds	r3, r4, r1
 8003b22:	19db      	adds	r3, r3, r7
 8003b24:	781a      	ldrb	r2, [r3, #0]
 8003b26:	1863      	adds	r3, r4, r1
 8003b28:	19db      	adds	r3, r3, r7
 8003b2a:	3201      	adds	r2, #1
 8003b2c:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[4]+1;x<GNRMCComma[5];x++){
 8003b2e:	1843      	adds	r3, r0, r1
 8003b30:	19db      	adds	r3, r3, r7
 8003b32:	781a      	ldrb	r2, [r3, #0]
 8003b34:	1843      	adds	r3, r0, r1
 8003b36:	19db      	adds	r3, r3, r7
 8003b38:	3201      	adds	r2, #1
 8003b3a:	701a      	strb	r2, [r3, #0]
 8003b3c:	2394      	movs	r3, #148	; 0x94
 8003b3e:	2408      	movs	r4, #8
 8003b40:	191b      	adds	r3, r3, r4
 8003b42:	19db      	adds	r3, r3, r7
 8003b44:	795b      	ldrb	r3, [r3, #5]
 8003b46:	22df      	movs	r2, #223	; 0xdf
 8003b48:	1912      	adds	r2, r2, r4
 8003b4a:	19d2      	adds	r2, r2, r7
 8003b4c:	7812      	ldrb	r2, [r2, #0]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d3d3      	bcc.n	8003afa <nmea_parser+0x93a>
		}

		tempData2[0]=tempData[0];
 8003b52:	2184      	movs	r1, #132	; 0x84
 8003b54:	190b      	adds	r3, r1, r4
 8003b56:	19db      	adds	r3, r3, r7
 8003b58:	781a      	ldrb	r2, [r3, #0]
 8003b5a:	2080      	movs	r0, #128	; 0x80
 8003b5c:	1903      	adds	r3, r0, r4
 8003b5e:	19db      	adds	r3, r3, r7
 8003b60:	701a      	strb	r2, [r3, #0]
		tempData2[1]=tempData[1];
 8003b62:	190b      	adds	r3, r1, r4
 8003b64:	19db      	adds	r3, r3, r7
 8003b66:	785a      	ldrb	r2, [r3, #1]
 8003b68:	1903      	adds	r3, r0, r4
 8003b6a:	19db      	adds	r3, r3, r7
 8003b6c:	705a      	strb	r2, [r3, #1]
		tempData2[2]=tempData[2];
 8003b6e:	190b      	adds	r3, r1, r4
 8003b70:	19db      	adds	r3, r3, r7
 8003b72:	789a      	ldrb	r2, [r3, #2]
 8003b74:	0021      	movs	r1, r4
 8003b76:	1843      	adds	r3, r0, r1
 8003b78:	19db      	adds	r3, r3, r7
 8003b7a:	709a      	strb	r2, [r3, #2]
		memset(tB,0,sizeof(tB));
 8003b7c:	2378      	movs	r3, #120	; 0x78
 8003b7e:	000c      	movs	r4, r1
 8003b80:	185b      	adds	r3, r3, r1
 8003b82:	19db      	adds	r3, r3, r7
 8003b84:	2208      	movs	r2, #8
 8003b86:	2100      	movs	r1, #0
 8003b88:	0018      	movs	r0, r3
 8003b8a:	f00a ff2c 	bl	800e9e6 <memset>
		t1=3;
 8003b8e:	23e1      	movs	r3, #225	; 0xe1
 8003b90:	0021      	movs	r1, r4
 8003b92:	185b      	adds	r3, r3, r1
 8003b94:	19db      	adds	r3, r3, r7
 8003b96:	2203      	movs	r2, #3
 8003b98:	701a      	strb	r2, [r3, #0]
		t2=0;
 8003b9a:	23e0      	movs	r3, #224	; 0xe0
 8003b9c:	185b      	adds	r3, r3, r1
 8003b9e:	19db      	adds	r3, r3, r7
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	701a      	strb	r2, [r3, #0]
		while(tempData[t1]!=NULL){
 8003ba4:	e02d      	b.n	8003c02 <nmea_parser+0xa42>
			if(tempData[t1]!='.'){
 8003ba6:	21e1      	movs	r1, #225	; 0xe1
 8003ba8:	2008      	movs	r0, #8
 8003baa:	180b      	adds	r3, r1, r0
 8003bac:	19db      	adds	r3, r3, r7
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	2484      	movs	r4, #132	; 0x84
 8003bb2:	1822      	adds	r2, r4, r0
 8003bb4:	19d2      	adds	r2, r2, r7
 8003bb6:	5cd3      	ldrb	r3, [r2, r3]
 8003bb8:	2b2e      	cmp	r3, #46	; 0x2e
 8003bba:	d019      	beq.n	8003bf0 <nmea_parser+0xa30>
				tB[t2]=tempData[t1];
 8003bbc:	0005      	movs	r5, r0
 8003bbe:	180b      	adds	r3, r1, r0
 8003bc0:	19db      	adds	r3, r3, r7
 8003bc2:	781a      	ldrb	r2, [r3, #0]
 8003bc4:	20e0      	movs	r0, #224	; 0xe0
 8003bc6:	0029      	movs	r1, r5
 8003bc8:	1843      	adds	r3, r0, r1
 8003bca:	19db      	adds	r3, r3, r7
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	000d      	movs	r5, r1
 8003bd0:	1861      	adds	r1, r4, r1
 8003bd2:	19c9      	adds	r1, r1, r7
 8003bd4:	5c89      	ldrb	r1, [r1, r2]
 8003bd6:	2278      	movs	r2, #120	; 0x78
 8003bd8:	002c      	movs	r4, r5
 8003bda:	1912      	adds	r2, r2, r4
 8003bdc:	19d2      	adds	r2, r2, r7
 8003bde:	54d1      	strb	r1, [r2, r3]
				t2++;
 8003be0:	0021      	movs	r1, r4
 8003be2:	1843      	adds	r3, r0, r1
 8003be4:	19db      	adds	r3, r3, r7
 8003be6:	781a      	ldrb	r2, [r3, #0]
 8003be8:	1843      	adds	r3, r0, r1
 8003bea:	19db      	adds	r3, r3, r7
 8003bec:	3201      	adds	r2, #1
 8003bee:	701a      	strb	r2, [r3, #0]
			}
			t1++;
 8003bf0:	21e1      	movs	r1, #225	; 0xe1
 8003bf2:	2008      	movs	r0, #8
 8003bf4:	180b      	adds	r3, r1, r0
 8003bf6:	19db      	adds	r3, r3, r7
 8003bf8:	781a      	ldrb	r2, [r3, #0]
 8003bfa:	180b      	adds	r3, r1, r0
 8003bfc:	19db      	adds	r3, r3, r7
 8003bfe:	3201      	adds	r2, #1
 8003c00:	701a      	strb	r2, [r3, #0]
		while(tempData[t1]!=NULL){
 8003c02:	23e1      	movs	r3, #225	; 0xe1
 8003c04:	2008      	movs	r0, #8
 8003c06:	181b      	adds	r3, r3, r0
 8003c08:	19db      	adds	r3, r3, r7
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	2284      	movs	r2, #132	; 0x84
 8003c0e:	1812      	adds	r2, r2, r0
 8003c10:	19d2      	adds	r2, r2, r7
 8003c12:	5cd3      	ldrb	r3, [r2, r3]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d1c6      	bne.n	8003ba6 <nmea_parser+0x9e6>
		}
		longitude=atoi(tB);
 8003c18:	2378      	movs	r3, #120	; 0x78
 8003c1a:	0004      	movs	r4, r0
 8003c1c:	181b      	adds	r3, r3, r0
 8003c1e:	19db      	adds	r3, r3, r7
 8003c20:	0018      	movs	r0, r3
 8003c22:	f00a fe81 	bl	800e928 <atoi>
 8003c26:	0003      	movs	r3, r0
 8003c28:	22e8      	movs	r2, #232	; 0xe8
 8003c2a:	0020      	movs	r0, r4
 8003c2c:	1811      	adds	r1, r2, r0
 8003c2e:	19c9      	adds	r1, r1, r7
 8003c30:	600b      	str	r3, [r1, #0]
		if(t2==4){
 8003c32:	23e0      	movs	r3, #224	; 0xe0
 8003c34:	181b      	adds	r3, r3, r0
 8003c36:	19db      	adds	r3, r3, r7
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	2b04      	cmp	r3, #4
 8003c3c:	d109      	bne.n	8003c52 <nmea_parser+0xa92>
			longitude*=100;
 8003c3e:	0011      	movs	r1, r2
 8003c40:	1813      	adds	r3, r2, r0
 8003c42:	19db      	adds	r3, r3, r7
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2264      	movs	r2, #100	; 0x64
 8003c48:	4353      	muls	r3, r2
 8003c4a:	180a      	adds	r2, r1, r0
 8003c4c:	19d2      	adds	r2, r2, r7
 8003c4e:	6013      	str	r3, [r2, #0]
 8003c50:	e011      	b.n	8003c76 <nmea_parser+0xab6>
		}
		else if(t2==5){
 8003c52:	23e0      	movs	r3, #224	; 0xe0
 8003c54:	2008      	movs	r0, #8
 8003c56:	181b      	adds	r3, r3, r0
 8003c58:	19db      	adds	r3, r3, r7
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	2b05      	cmp	r3, #5
 8003c5e:	d10a      	bne.n	8003c76 <nmea_parser+0xab6>
			longitude*=10;
 8003c60:	21e8      	movs	r1, #232	; 0xe8
 8003c62:	180b      	adds	r3, r1, r0
 8003c64:	19db      	adds	r3, r3, r7
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	0013      	movs	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	189b      	adds	r3, r3, r2
 8003c6e:	005b      	lsls	r3, r3, #1
 8003c70:	180a      	adds	r2, r1, r0
 8003c72:	19d2      	adds	r2, r2, r7
 8003c74:	6013      	str	r3, [r2, #0]
		}
		longitude=longitude*3;
 8003c76:	24e8      	movs	r4, #232	; 0xe8
 8003c78:	2008      	movs	r0, #8
 8003c7a:	1823      	adds	r3, r4, r0
 8003c7c:	19db      	adds	r3, r3, r7
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	0013      	movs	r3, r2
 8003c82:	005b      	lsls	r3, r3, #1
 8003c84:	189b      	adds	r3, r3, r2
 8003c86:	1822      	adds	r2, r4, r0
 8003c88:	19d2      	adds	r2, r2, r7
 8003c8a:	6013      	str	r3, [r2, #0]
		longitude+= (atoi(tempData2)*60*30000);
 8003c8c:	2580      	movs	r5, #128	; 0x80
 8003c8e:	182b      	adds	r3, r5, r0
 8003c90:	19db      	adds	r3, r3, r7
 8003c92:	0018      	movs	r0, r3
 8003c94:	f00a fe48 	bl	800e928 <atoi>
 8003c98:	0003      	movs	r3, r0
 8003c9a:	4a23      	ldr	r2, [pc, #140]	; (8003d28 <nmea_parser+0xb68>)
 8003c9c:	4353      	muls	r3, r2
 8003c9e:	001a      	movs	r2, r3
 8003ca0:	2008      	movs	r0, #8
 8003ca2:	1823      	adds	r3, r4, r0
 8003ca4:	19db      	adds	r3, r3, r7
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	189b      	adds	r3, r3, r2
 8003caa:	0021      	movs	r1, r4
 8003cac:	180a      	adds	r2, r1, r0
 8003cae:	19d2      	adds	r2, r2, r7
 8003cb0:	6013      	str	r3, [r2, #0]
		GPSInformation[11] = longitude>>24;
 8003cb2:	180b      	adds	r3, r1, r0
 8003cb4:	19db      	adds	r3, r3, r7
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	0e1b      	lsrs	r3, r3, #24
 8003cba:	b2da      	uxtb	r2, r3
 8003cbc:	4b1b      	ldr	r3, [pc, #108]	; (8003d2c <nmea_parser+0xb6c>)
 8003cbe:	72da      	strb	r2, [r3, #11]
		GPSInformation[12] = longitude>>16;
 8003cc0:	180b      	adds	r3, r1, r0
 8003cc2:	19db      	adds	r3, r3, r7
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	0c1b      	lsrs	r3, r3, #16
 8003cc8:	b2da      	uxtb	r2, r3
 8003cca:	4b18      	ldr	r3, [pc, #96]	; (8003d2c <nmea_parser+0xb6c>)
 8003ccc:	731a      	strb	r2, [r3, #12]
		GPSInformation[13] = longitude>>8;
 8003cce:	180b      	adds	r3, r1, r0
 8003cd0:	19db      	adds	r3, r3, r7
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	0a1b      	lsrs	r3, r3, #8
 8003cd6:	b2da      	uxtb	r2, r3
 8003cd8:	4b14      	ldr	r3, [pc, #80]	; (8003d2c <nmea_parser+0xb6c>)
 8003cda:	735a      	strb	r2, [r3, #13]
		GPSInformation[14] = longitude;
 8003cdc:	180b      	adds	r3, r1, r0
 8003cde:	19db      	adds	r3, r3, r7
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	b2da      	uxtb	r2, r3
 8003ce4:	4b11      	ldr	r3, [pc, #68]	; (8003d2c <nmea_parser+0xb6c>)
 8003ce6:	739a      	strb	r2, [r3, #14]
		//------------------------------------longitude end--------------------------------------



		//----------------------------------speed----------------------------------------------------
		memset(tempData,0,sizeof(tempData));
 8003ce8:	2384      	movs	r3, #132	; 0x84
 8003cea:	0004      	movs	r4, r0
 8003cec:	191b      	adds	r3, r3, r4
 8003cee:	19db      	adds	r3, r3, r7
 8003cf0:	220f      	movs	r2, #15
 8003cf2:	2100      	movs	r1, #0
 8003cf4:	0018      	movs	r0, r3
 8003cf6:	f00a fe76 	bl	800e9e6 <memset>
		memset(tempData2,0,sizeof(tempData2));
 8003cfa:	192b      	adds	r3, r5, r4
 8003cfc:	19db      	adds	r3, r3, r7
 8003cfe:	2204      	movs	r2, #4
 8003d00:	2100      	movs	r1, #0
 8003d02:	0018      	movs	r0, r3
 8003d04:	f00a fe6f 	bl	800e9e6 <memset>
		tempDataIndex = 0;
 8003d08:	23e7      	movs	r3, #231	; 0xe7
 8003d0a:	0020      	movs	r0, r4
 8003d0c:	181b      	adds	r3, r3, r0
 8003d0e:	19db      	adds	r3, r3, r7
 8003d10:	2200      	movs	r2, #0
 8003d12:	701a      	strb	r2, [r3, #0]
		float speedinf;
		for(uint8_t x =GNRMCComma[6]+1;x<GNRMCComma[7];x++){
 8003d14:	2394      	movs	r3, #148	; 0x94
 8003d16:	181b      	adds	r3, r3, r0
 8003d18:	19db      	adds	r3, r3, r7
 8003d1a:	799a      	ldrb	r2, [r3, #6]
 8003d1c:	23d7      	movs	r3, #215	; 0xd7
 8003d1e:	181b      	adds	r3, r3, r0
 8003d20:	19db      	adds	r3, r3, r7
 8003d22:	3201      	adds	r2, #1
 8003d24:	701a      	strb	r2, [r3, #0]
 8003d26:	e024      	b.n	8003d72 <nmea_parser+0xbb2>
 8003d28:	001b7740 	.word	0x001b7740
 8003d2c:	200002ac 	.word	0x200002ac
			tempData[tempDataIndex]= nmeaResponse[GNRMC][x];
 8003d30:	20d7      	movs	r0, #215	; 0xd7
 8003d32:	2508      	movs	r5, #8
 8003d34:	1943      	adds	r3, r0, r5
 8003d36:	19db      	adds	r3, r3, r7
 8003d38:	781a      	ldrb	r2, [r3, #0]
 8003d3a:	24e7      	movs	r4, #231	; 0xe7
 8003d3c:	1963      	adds	r3, r4, r5
 8003d3e:	19db      	adds	r3, r3, r7
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	21cc      	movs	r1, #204	; 0xcc
 8003d44:	1949      	adds	r1, r1, r5
 8003d46:	19c9      	adds	r1, r1, r7
 8003d48:	6809      	ldr	r1, [r1, #0]
 8003d4a:	5c89      	ldrb	r1, [r1, r2]
 8003d4c:	2284      	movs	r2, #132	; 0x84
 8003d4e:	1952      	adds	r2, r2, r5
 8003d50:	19d2      	adds	r2, r2, r7
 8003d52:	54d1      	strb	r1, [r2, r3]
			tempDataIndex++;
 8003d54:	0029      	movs	r1, r5
 8003d56:	1863      	adds	r3, r4, r1
 8003d58:	19db      	adds	r3, r3, r7
 8003d5a:	781a      	ldrb	r2, [r3, #0]
 8003d5c:	1863      	adds	r3, r4, r1
 8003d5e:	19db      	adds	r3, r3, r7
 8003d60:	3201      	adds	r2, #1
 8003d62:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[6]+1;x<GNRMCComma[7];x++){
 8003d64:	1843      	adds	r3, r0, r1
 8003d66:	19db      	adds	r3, r3, r7
 8003d68:	781a      	ldrb	r2, [r3, #0]
 8003d6a:	1843      	adds	r3, r0, r1
 8003d6c:	19db      	adds	r3, r3, r7
 8003d6e:	3201      	adds	r2, #1
 8003d70:	701a      	strb	r2, [r3, #0]
 8003d72:	2394      	movs	r3, #148	; 0x94
 8003d74:	2508      	movs	r5, #8
 8003d76:	195b      	adds	r3, r3, r5
 8003d78:	19db      	adds	r3, r3, r7
 8003d7a:	79db      	ldrb	r3, [r3, #7]
 8003d7c:	22d7      	movs	r2, #215	; 0xd7
 8003d7e:	1952      	adds	r2, r2, r5
 8003d80:	19d2      	adds	r2, r2, r7
 8003d82:	7812      	ldrb	r2, [r2, #0]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d3d3      	bcc.n	8003d30 <nmea_parser+0xb70>
		}

		speedinf = strtof(tempData,NULL);
 8003d88:	2384      	movs	r3, #132	; 0x84
 8003d8a:	195b      	adds	r3, r3, r5
 8003d8c:	19db      	adds	r3, r3, r7
 8003d8e:	2100      	movs	r1, #0
 8003d90:	0018      	movs	r0, r3
 8003d92:	f00b fcc3 	bl	800f71c <strtof>
 8003d96:	1c03      	adds	r3, r0, #0
 8003d98:	24d8      	movs	r4, #216	; 0xd8
 8003d9a:	1962      	adds	r2, r4, r5
 8003d9c:	19d2      	adds	r2, r2, r7
 8003d9e:	6013      	str	r3, [r2, #0]
		speedinf= speedinf * 1.85;
 8003da0:	1963      	adds	r3, r4, r5
 8003da2:	19db      	adds	r3, r3, r7
 8003da4:	6818      	ldr	r0, [r3, #0]
 8003da6:	f7ff f8eb 	bl	8002f80 <__aeabi_f2d>
 8003daa:	4a80      	ldr	r2, [pc, #512]	; (8003fac <nmea_parser+0xdec>)
 8003dac:	4b80      	ldr	r3, [pc, #512]	; (8003fb0 <nmea_parser+0xdf0>)
 8003dae:	f7fe fa3f 	bl	8002230 <__aeabi_dmul>
 8003db2:	0002      	movs	r2, r0
 8003db4:	000b      	movs	r3, r1
 8003db6:	0010      	movs	r0, r2
 8003db8:	0019      	movs	r1, r3
 8003dba:	f7ff f929 	bl	8003010 <__aeabi_d2f>
 8003dbe:	1c03      	adds	r3, r0, #0
 8003dc0:	1962      	adds	r2, r4, r5
 8003dc2:	19d2      	adds	r2, r2, r7
 8003dc4:	6013      	str	r3, [r2, #0]
		if(speedinf>255){
 8003dc6:	497b      	ldr	r1, [pc, #492]	; (8003fb4 <nmea_parser+0xdf4>)
 8003dc8:	1963      	adds	r3, r4, r5
 8003dca:	19db      	adds	r3, r3, r7
 8003dcc:	6818      	ldr	r0, [r3, #0]
 8003dce:	f7fc fb97 	bl	8000500 <__aeabi_fcmpgt>
 8003dd2:	1e03      	subs	r3, r0, #0
 8003dd4:	d003      	beq.n	8003dde <nmea_parser+0xc1e>
			speedinf=255;
 8003dd6:	4b77      	ldr	r3, [pc, #476]	; (8003fb4 <nmea_parser+0xdf4>)
 8003dd8:	1962      	adds	r2, r4, r5
 8003dda:	19d2      	adds	r2, r2, r7
 8003ddc:	6013      	str	r3, [r2, #0]
		}
		if(speedinf<1){
 8003dde:	21fe      	movs	r1, #254	; 0xfe
 8003de0:	0589      	lsls	r1, r1, #22
 8003de2:	24d8      	movs	r4, #216	; 0xd8
 8003de4:	2508      	movs	r5, #8
 8003de6:	1963      	adds	r3, r4, r5
 8003de8:	19db      	adds	r3, r3, r7
 8003dea:	6818      	ldr	r0, [r3, #0]
 8003dec:	f7fc fb74 	bl	80004d8 <__aeabi_fcmplt>
 8003df0:	1e03      	subs	r3, r0, #0
 8003df2:	d003      	beq.n	8003dfc <nmea_parser+0xc3c>
			speedinf=0;
 8003df4:	2300      	movs	r3, #0
 8003df6:	1962      	adds	r2, r4, r5
 8003df8:	19d2      	adds	r2, r2, r7
 8003dfa:	6013      	str	r3, [r2, #0]

		}

		GPSInformation[15] = (int)speedinf;
 8003dfc:	23d8      	movs	r3, #216	; 0xd8
 8003dfe:	2408      	movs	r4, #8
 8003e00:	191b      	adds	r3, r3, r4
 8003e02:	19db      	adds	r3, r3, r7
 8003e04:	6818      	ldr	r0, [r3, #0]
 8003e06:	f7fd fa67 	bl	80012d8 <__aeabi_f2iz>
 8003e0a:	0003      	movs	r3, r0
 8003e0c:	b2da      	uxtb	r2, r3
 8003e0e:	4b6a      	ldr	r3, [pc, #424]	; (8003fb8 <nmea_parser+0xdf8>)
 8003e10:	73da      	strb	r2, [r3, #15]



		//------------------------------Coursestatus block(2 byte)--------------------------------
		//Byte1, bit 4(gps position bit)
		if (nmeaResponse[GNRMC][GNRMCComma[1]+1] == 'A'){
 8003e12:	2394      	movs	r3, #148	; 0x94
 8003e14:	191b      	adds	r3, r3, r4
 8003e16:	19db      	adds	r3, r3, r7
 8003e18:	785b      	ldrb	r3, [r3, #1]
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	22cc      	movs	r2, #204	; 0xcc
 8003e1e:	1912      	adds	r2, r2, r4
 8003e20:	19d2      	adds	r2, r2, r7
 8003e22:	6812      	ldr	r2, [r2, #0]
 8003e24:	5cd3      	ldrb	r3, [r2, r3]
 8003e26:	2b41      	cmp	r3, #65	; 0x41
 8003e28:	d109      	bne.n	8003e3e <nmea_parser+0xc7e>
			courseStatus |= 0x1000;
 8003e2a:	22f6      	movs	r2, #246	; 0xf6
 8003e2c:	1913      	adds	r3, r2, r4
 8003e2e:	19db      	adds	r3, r3, r7
 8003e30:	1912      	adds	r2, r2, r4
 8003e32:	19d2      	adds	r2, r2, r7
 8003e34:	8812      	ldrh	r2, [r2, #0]
 8003e36:	2180      	movs	r1, #128	; 0x80
 8003e38:	0149      	lsls	r1, r1, #5
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	801a      	strh	r2, [r3, #0]
		}
		//Byte1, bit 5(realtime differential)
		if (nmeaResponse[GNGGA][GNGGAComma[5]+1] != '1'){
 8003e3e:	0032      	movs	r2, r6
 8003e40:	23cc      	movs	r3, #204	; 0xcc
 8003e42:	2108      	movs	r1, #8
 8003e44:	185b      	adds	r3, r3, r1
 8003e46:	19db      	adds	r3, r3, r7
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	189a      	adds	r2, r3, r2
 8003e4c:	23a4      	movs	r3, #164	; 0xa4
 8003e4e:	185b      	adds	r3, r3, r1
 8003e50:	19db      	adds	r3, r3, r7
 8003e52:	795b      	ldrb	r3, [r3, #5]
 8003e54:	3301      	adds	r3, #1
 8003e56:	5cd3      	ldrb	r3, [r2, r3]
 8003e58:	2b31      	cmp	r3, #49	; 0x31
 8003e5a:	d009      	beq.n	8003e70 <nmea_parser+0xcb0>
			courseStatus |= 0x2000;
 8003e5c:	22f6      	movs	r2, #246	; 0xf6
 8003e5e:	1853      	adds	r3, r2, r1
 8003e60:	19db      	adds	r3, r3, r7
 8003e62:	1852      	adds	r2, r2, r1
 8003e64:	19d2      	adds	r2, r2, r7
 8003e66:	8812      	ldrh	r2, [r2, #0]
 8003e68:	2180      	movs	r1, #128	; 0x80
 8003e6a:	0189      	lsls	r1, r1, #6
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	801a      	strh	r2, [r3, #0]
		}
		//Byte1, bit 3(East/West bit)
		if(nmeaResponse[GNRMC][GNRMCComma[5]+1] == 'W' ){
 8003e70:	2394      	movs	r3, #148	; 0x94
 8003e72:	2108      	movs	r1, #8
 8003e74:	185b      	adds	r3, r3, r1
 8003e76:	19db      	adds	r3, r3, r7
 8003e78:	795b      	ldrb	r3, [r3, #5]
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	22cc      	movs	r2, #204	; 0xcc
 8003e7e:	1852      	adds	r2, r2, r1
 8003e80:	19d2      	adds	r2, r2, r7
 8003e82:	6812      	ldr	r2, [r2, #0]
 8003e84:	5cd3      	ldrb	r3, [r2, r3]
 8003e86:	2b57      	cmp	r3, #87	; 0x57
 8003e88:	d109      	bne.n	8003e9e <nmea_parser+0xcde>
			courseStatus |= 0x800;
 8003e8a:	22f6      	movs	r2, #246	; 0xf6
 8003e8c:	1853      	adds	r3, r2, r1
 8003e8e:	19db      	adds	r3, r3, r7
 8003e90:	1852      	adds	r2, r2, r1
 8003e92:	19d2      	adds	r2, r2, r7
 8003e94:	8812      	ldrh	r2, [r2, #0]
 8003e96:	2180      	movs	r1, #128	; 0x80
 8003e98:	0109      	lsls	r1, r1, #4
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	801a      	strh	r2, [r3, #0]
		}
		//Byte1, bit 2(North/South bit)
		if(nmeaResponse[GNRMC][GNRMCComma[3]+1] == 'N' ){
 8003e9e:	2394      	movs	r3, #148	; 0x94
 8003ea0:	2108      	movs	r1, #8
 8003ea2:	185b      	adds	r3, r3, r1
 8003ea4:	19db      	adds	r3, r3, r7
 8003ea6:	78db      	ldrb	r3, [r3, #3]
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	22cc      	movs	r2, #204	; 0xcc
 8003eac:	1852      	adds	r2, r2, r1
 8003eae:	19d2      	adds	r2, r2, r7
 8003eb0:	6812      	ldr	r2, [r2, #0]
 8003eb2:	5cd3      	ldrb	r3, [r2, r3]
 8003eb4:	2b4e      	cmp	r3, #78	; 0x4e
 8003eb6:	d109      	bne.n	8003ecc <nmea_parser+0xd0c>
			courseStatus |= 0x400;
 8003eb8:	22f6      	movs	r2, #246	; 0xf6
 8003eba:	1853      	adds	r3, r2, r1
 8003ebc:	19db      	adds	r3, r3, r7
 8003ebe:	1852      	adds	r2, r2, r1
 8003ec0:	19d2      	adds	r2, r2, r7
 8003ec2:	8812      	ldrh	r2, [r2, #0]
 8003ec4:	2180      	movs	r1, #128	; 0x80
 8003ec6:	00c9      	lsls	r1, r1, #3
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	801a      	strh	r2, [r3, #0]
		}

		//Course
		memset(tempData,0,sizeof(tempData));
 8003ecc:	2384      	movs	r3, #132	; 0x84
 8003ece:	2408      	movs	r4, #8
 8003ed0:	191b      	adds	r3, r3, r4
 8003ed2:	19db      	adds	r3, r3, r7
 8003ed4:	220f      	movs	r2, #15
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	0018      	movs	r0, r3
 8003eda:	f00a fd84 	bl	800e9e6 <memset>
		tempDataIndex = 0;
 8003ede:	23e7      	movs	r3, #231	; 0xe7
 8003ee0:	0021      	movs	r1, r4
 8003ee2:	185b      	adds	r3, r3, r1
 8003ee4:	19db      	adds	r3, r3, r7
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[7]+1;x<GNRMCComma[8];x++){
 8003eea:	2394      	movs	r3, #148	; 0x94
 8003eec:	185b      	adds	r3, r3, r1
 8003eee:	19db      	adds	r3, r3, r7
 8003ef0:	79da      	ldrb	r2, [r3, #7]
 8003ef2:	23d6      	movs	r3, #214	; 0xd6
 8003ef4:	185b      	adds	r3, r3, r1
 8003ef6:	19db      	adds	r3, r3, r7
 8003ef8:	3201      	adds	r2, #1
 8003efa:	701a      	strb	r2, [r3, #0]
 8003efc:	e020      	b.n	8003f40 <nmea_parser+0xd80>
			tempData[tempDataIndex]= nmeaResponse[GNRMC][x];
 8003efe:	20d6      	movs	r0, #214	; 0xd6
 8003f00:	2508      	movs	r5, #8
 8003f02:	1943      	adds	r3, r0, r5
 8003f04:	19db      	adds	r3, r3, r7
 8003f06:	781a      	ldrb	r2, [r3, #0]
 8003f08:	24e7      	movs	r4, #231	; 0xe7
 8003f0a:	1963      	adds	r3, r4, r5
 8003f0c:	19db      	adds	r3, r3, r7
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	21cc      	movs	r1, #204	; 0xcc
 8003f12:	1949      	adds	r1, r1, r5
 8003f14:	19c9      	adds	r1, r1, r7
 8003f16:	6809      	ldr	r1, [r1, #0]
 8003f18:	5c89      	ldrb	r1, [r1, r2]
 8003f1a:	2284      	movs	r2, #132	; 0x84
 8003f1c:	1952      	adds	r2, r2, r5
 8003f1e:	19d2      	adds	r2, r2, r7
 8003f20:	54d1      	strb	r1, [r2, r3]
			tempDataIndex++;
 8003f22:	0029      	movs	r1, r5
 8003f24:	1863      	adds	r3, r4, r1
 8003f26:	19db      	adds	r3, r3, r7
 8003f28:	781a      	ldrb	r2, [r3, #0]
 8003f2a:	1863      	adds	r3, r4, r1
 8003f2c:	19db      	adds	r3, r3, r7
 8003f2e:	3201      	adds	r2, #1
 8003f30:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[7]+1;x<GNRMCComma[8];x++){
 8003f32:	1843      	adds	r3, r0, r1
 8003f34:	19db      	adds	r3, r3, r7
 8003f36:	781a      	ldrb	r2, [r3, #0]
 8003f38:	1843      	adds	r3, r0, r1
 8003f3a:	19db      	adds	r3, r3, r7
 8003f3c:	3201      	adds	r2, #1
 8003f3e:	701a      	strb	r2, [r3, #0]
 8003f40:	2394      	movs	r3, #148	; 0x94
 8003f42:	2408      	movs	r4, #8
 8003f44:	191b      	adds	r3, r3, r4
 8003f46:	19db      	adds	r3, r3, r7
 8003f48:	7a1b      	ldrb	r3, [r3, #8]
 8003f4a:	22d6      	movs	r2, #214	; 0xd6
 8003f4c:	1912      	adds	r2, r2, r4
 8003f4e:	19d2      	adds	r2, r2, r7
 8003f50:	7812      	ldrb	r2, [r2, #0]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d3d3      	bcc.n	8003efe <nmea_parser+0xd3e>
		}
		courseStatus |= atoi(tempData);
 8003f56:	2384      	movs	r3, #132	; 0x84
 8003f58:	191b      	adds	r3, r3, r4
 8003f5a:	19db      	adds	r3, r3, r7
 8003f5c:	0018      	movs	r0, r3
 8003f5e:	f00a fce3 	bl	800e928 <atoi>
 8003f62:	0003      	movs	r3, r0
 8003f64:	b21a      	sxth	r2, r3
 8003f66:	21f6      	movs	r1, #246	; 0xf6
 8003f68:	190b      	adds	r3, r1, r4
 8003f6a:	19db      	adds	r3, r3, r7
 8003f6c:	2000      	movs	r0, #0
 8003f6e:	5e1b      	ldrsh	r3, [r3, r0]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	b21a      	sxth	r2, r3
 8003f74:	0020      	movs	r0, r4
 8003f76:	180b      	adds	r3, r1, r0
 8003f78:	19db      	adds	r3, r3, r7
 8003f7a:	801a      	strh	r2, [r3, #0]
		GPSInformation[16]= courseStatus>>8;
 8003f7c:	180b      	adds	r3, r1, r0
 8003f7e:	19db      	adds	r3, r3, r7
 8003f80:	881b      	ldrh	r3, [r3, #0]
 8003f82:	0a1b      	lsrs	r3, r3, #8
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	b2da      	uxtb	r2, r3
 8003f88:	4b0b      	ldr	r3, [pc, #44]	; (8003fb8 <nmea_parser+0xdf8>)
 8003f8a:	741a      	strb	r2, [r3, #16]
		GPSInformation[17]= courseStatus;
 8003f8c:	180b      	adds	r3, r1, r0
 8003f8e:	19db      	adds	r3, r3, r7
 8003f90:	881b      	ldrh	r3, [r3, #0]
 8003f92:	b2da      	uxtb	r2, r3
 8003f94:	4b08      	ldr	r3, [pc, #32]	; (8003fb8 <nmea_parser+0xdf8>)
 8003f96:	745a      	strb	r2, [r3, #17]
		//------------------------------Course Status Block END------------------------------------

		return GPSInformation;
 8003f98:	4b07      	ldr	r3, [pc, #28]	; (8003fb8 <nmea_parser+0xdf8>)
 8003f9a:	e003      	b.n	8003fa4 <nmea_parser+0xde4>
	}
	else{
		*checkSum = 55;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2237      	movs	r2, #55	; 0x37
 8003fa0:	701a      	strb	r2, [r3, #0]
		return NULL;
 8003fa2:	2300      	movs	r3, #0
	}

}
 8003fa4:	0018      	movs	r0, r3
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	b041      	add	sp, #260	; 0x104
 8003faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fac:	9999999a 	.word	0x9999999a
 8003fb0:	3ffd9999 	.word	0x3ffd9999
 8003fb4:	437f0000 	.word	0x437f0000
 8003fb8:	200002ac 	.word	0x200002ac

08003fbc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003fc0:	f3bf 8f4f 	dsb	sy
}
 8003fc4:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fc6:	4b04      	ldr	r3, [pc, #16]	; (8003fd8 <__NVIC_SystemReset+0x1c>)
 8003fc8:	4a04      	ldr	r2, [pc, #16]	; (8003fdc <__NVIC_SystemReset+0x20>)
 8003fca:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003fcc:	f3bf 8f4f 	dsb	sy
}
 8003fd0:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003fd2:	46c0      	nop			; (mov r8, r8)
 8003fd4:	e7fd      	b.n	8003fd2 <__NVIC_SystemReset+0x16>
 8003fd6:	46c0      	nop			; (mov r8, r8)
 8003fd8:	e000ed00 	.word	0xe000ed00
 8003fdc:	05fa0004 	.word	0x05fa0004

08003fe0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003fe0:	b590      	push	{r4, r7, lr}
 8003fe2:	b099      	sub	sp, #100	; 0x64
 8003fe4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003fe6:	f005 f8a3 	bl	8009130 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003fea:	f000 fb07 	bl	80045fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003fee:	f000 fd95 	bl	8004b1c <MX_GPIO_Init>
  MX_DMA_Init();
 8003ff2:	f000 fd75 	bl	8004ae0 <MX_DMA_Init>
  MX_SPI1_Init();
 8003ff6:	f000 fb5b 	bl	80046b0 <MX_SPI1_Init>
  MX_TIM3_Init();
 8003ffa:	f000 fb97 	bl	800472c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8003ffe:	f000 fc6b 	bl	80048d8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8004002:	f000 fcb7 	bl	8004974 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8004006:	f000 fd03 	bl	8004a10 <MX_USART3_UART_Init>
  MX_USART4_UART_Init();
 800400a:	f000 fd35 	bl	8004a78 <MX_USART4_UART_Init>
  MX_TIM17_Init();
 800400e:	f000 fc3b 	bl	8004888 <MX_TIM17_Init>
  MX_TIM16_Init();
 8004012:	f000 fc0f 	bl	8004834 <MX_TIM16_Init>
  MX_TIM14_Init();
 8004016:	f000 fbe7 	bl	80047e8 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&AT_PORT, AT_BUFFER, 1);
 800401a:	49d9      	ldr	r1, [pc, #868]	; (8004380 <main+0x3a0>)
 800401c:	4bd9      	ldr	r3, [pc, #868]	; (8004384 <main+0x3a4>)
 800401e:	2201      	movs	r2, #1
 8004020:	0018      	movs	r0, r3
 8004022:	f008 fe21 	bl	800cc68 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart2, GNSS_BUFFER, 1);
 8004026:	49d8      	ldr	r1, [pc, #864]	; (8004388 <main+0x3a8>)
 8004028:	4bd8      	ldr	r3, [pc, #864]	; (800438c <main+0x3ac>)
 800402a:	2201      	movs	r2, #1
 800402c:	0018      	movs	r0, r3
 800402e:	f008 fe1b 	bl	800cc68 <HAL_UART_Receive_IT>
	W25qxx_Init();
 8004032:	f004 fc4f 	bl	80088d4 <W25qxx_Init>
	//INPUT CAPTURE------
	HAL_TIM_Base_Start_IT(&htim3);
 8004036:	4bd6      	ldr	r3, [pc, #856]	; (8004390 <main+0x3b0>)
 8004038:	0018      	movs	r0, r3
 800403a:	f007 fd6b 	bl	800bb14 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim14);
 800403e:	4bd5      	ldr	r3, [pc, #852]	; (8004394 <main+0x3b4>)
 8004040:	0018      	movs	r0, r3
 8004042:	f007 fd67 	bl	800bb14 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim16);
 8004046:	4bd4      	ldr	r3, [pc, #848]	; (8004398 <main+0x3b8>)
 8004048:	0018      	movs	r0, r3
 800404a:	f007 fd63 	bl	800bb14 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim17);
 800404e:	4bd3      	ldr	r3, [pc, #844]	; (800439c <main+0x3bc>)
 8004050:	0018      	movs	r0, r3
 8004052:	f007 fd5f 	bl	800bb14 <HAL_TIM_Base_Start_IT>
	W25qxx_EraseSector(0);
 8004056:	2000      	movs	r0, #0
 8004058:	f004 fcf6 	bl	8008a48 <W25qxx_EraseSector>
	W25qxx_EraseSector(1);
 800405c:	2001      	movs	r0, #1
 800405e:	f004 fcf3 	bl	8008a48 <W25qxx_EraseSector>
	W25qxx_ReadByte(&isFlash, 0);
 8004062:	4bcf      	ldr	r3, [pc, #828]	; (80043a0 <main+0x3c0>)
 8004064:	2100      	movs	r1, #0
 8004066:	0018      	movs	r0, r3
 8004068:	f004 fea2 	bl	8008db0 <W25qxx_ReadByte>
	if (isFlash != 1) {
 800406c:	4bcc      	ldr	r3, [pc, #816]	; (80043a0 <main+0x3c0>)
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d100      	bne.n	8004076 <main+0x96>
 8004074:	e0b2      	b.n	80041dc <main+0x1fc>
		HAL_UART_Transmit(&huart4, "first time", sizeof("first time"),
 8004076:	49cb      	ldr	r1, [pc, #812]	; (80043a4 <main+0x3c4>)
 8004078:	48cb      	ldr	r0, [pc, #812]	; (80043a8 <main+0x3c8>)
 800407a:	2364      	movs	r3, #100	; 0x64
 800407c:	220b      	movs	r2, #11
 800407e:	f008 fd57 	bl	800cb30 <HAL_UART_Transmit>
				100);
		W25qxx_EraseSector(0);
 8004082:	2000      	movs	r0, #0
 8004084:	f004 fce0 	bl	8008a48 <W25qxx_EraseSector>
		W25qxx_EraseSector(1);
 8004088:	2001      	movs	r0, #1
 800408a:	f004 fcdd 	bl	8008a48 <W25qxx_EraseSector>
		W25qxx_WriteByte(1, 0);
 800408e:	2100      	movs	r1, #0
 8004090:	2001      	movs	r0, #1
 8004092:	f004 fd49 	bl	8008b28 <W25qxx_WriteByte>
		//printf("chip erased/n");
		StartN = 0;
 8004096:	4bc5      	ldr	r3, [pc, #788]	; (80043ac <main+0x3cc>)
 8004098:	2200      	movs	r2, #0
 800409a:	801a      	strh	r2, [r3, #0]
		EndN = 0;
 800409c:	4bc4      	ldr	r3, [pc, #784]	; (80043b0 <main+0x3d0>)
 800409e:	2200      	movs	r2, #0
 80040a0:	801a      	strh	r2, [r3, #0]
		StartSec = 1;
 80040a2:	4bc4      	ldr	r3, [pc, #784]	; (80043b4 <main+0x3d4>)
 80040a4:	2201      	movs	r2, #1
 80040a6:	801a      	strh	r2, [r3, #0]
		EndSec = 1;
 80040a8:	4bc3      	ldr	r3, [pc, #780]	; (80043b8 <main+0x3d8>)
 80040aa:	2201      	movs	r2, #1
 80040ac:	801a      	strh	r2, [r3, #0]
		flashready = 1;
 80040ae:	4bc3      	ldr	r3, [pc, #780]	; (80043bc <main+0x3dc>)
 80040b0:	2201      	movs	r2, #1
 80040b2:	701a      	strb	r2, [r3, #0]
		W25qxx_WriteByte('1', 9);
 80040b4:	2109      	movs	r1, #9
 80040b6:	2031      	movs	r0, #49	; 0x31
 80040b8:	f004 fd36 	bl	8008b28 <W25qxx_WriteByte>
		W25qxx_WriteByte('2', 10);
 80040bc:	210a      	movs	r1, #10
 80040be:	2032      	movs	r0, #50	; 0x32
 80040c0:	f004 fd32 	bl	8008b28 <W25qxx_WriteByte>
		W25qxx_WriteByte('3', 11);
 80040c4:	210b      	movs	r1, #11
 80040c6:	2033      	movs	r0, #51	; 0x33
 80040c8:	f004 fd2e 	bl	8008b28 <W25qxx_WriteByte>
		W25qxx_WriteByte('4', 12);
 80040cc:	210c      	movs	r1, #12
 80040ce:	2034      	movs	r0, #52	; 0x34
 80040d0:	f004 fd2a 	bl	8008b28 <W25qxx_WriteByte>
		W25qxx_WriteByte(0, 1);
 80040d4:	2101      	movs	r1, #1
 80040d6:	2000      	movs	r0, #0
 80040d8:	f004 fd26 	bl	8008b28 <W25qxx_WriteByte>
		W25qxx_WriteByte(1, 2);
 80040dc:	2102      	movs	r1, #2
 80040de:	2001      	movs	r0, #1
 80040e0:	f004 fd22 	bl	8008b28 <W25qxx_WriteByte>
		W25qxx_WriteByte(0, 3);
 80040e4:	2103      	movs	r1, #3
 80040e6:	2000      	movs	r0, #0
 80040e8:	f004 fd1e 	bl	8008b28 <W25qxx_WriteByte>
		W25qxx_WriteByte(0, 4);
 80040ec:	2104      	movs	r1, #4
 80040ee:	2000      	movs	r0, #0
 80040f0:	f004 fd1a 	bl	8008b28 <W25qxx_WriteByte>
		W25qxx_WriteByte(0, 5);
 80040f4:	2105      	movs	r1, #5
 80040f6:	2000      	movs	r0, #0
 80040f8:	f004 fd16 	bl	8008b28 <W25qxx_WriteByte>
		W25qxx_WriteByte(1, 6);
 80040fc:	2106      	movs	r1, #6
 80040fe:	2001      	movs	r0, #1
 8004100:	f004 fd12 	bl	8008b28 <W25qxx_WriteByte>
		W25qxx_WriteByte(0, 7);
 8004104:	2107      	movs	r1, #7
 8004106:	2000      	movs	r0, #0
 8004108:	f004 fd0e 	bl	8008b28 <W25qxx_WriteByte>
		W25qxx_WriteByte(0, 8);
 800410c:	2108      	movs	r1, #8
 800410e:	2000      	movs	r0, #0
 8004110:	f004 fd0a 	bl	8008b28 <W25qxx_WriteByte>
		cPin[0] = '1';
 8004114:	4baa      	ldr	r3, [pc, #680]	; (80043c0 <main+0x3e0>)
 8004116:	2231      	movs	r2, #49	; 0x31
 8004118:	701a      	strb	r2, [r3, #0]
		cPin[1] = '2';
 800411a:	4ba9      	ldr	r3, [pc, #676]	; (80043c0 <main+0x3e0>)
 800411c:	2232      	movs	r2, #50	; 0x32
 800411e:	705a      	strb	r2, [r3, #1]
		cPin[2] = '3';
 8004120:	4ba7      	ldr	r3, [pc, #668]	; (80043c0 <main+0x3e0>)
 8004122:	2233      	movs	r2, #51	; 0x33
 8004124:	709a      	strb	r2, [r3, #2]
		cPin[3] = '4';
 8004126:	4ba6      	ldr	r3, [pc, #664]	; (80043c0 <main+0x3e0>)
 8004128:	2234      	movs	r2, #52	; 0x34
 800412a:	70da      	strb	r2, [r3, #3]
		for (uint8_t te = 13; te < 23; te++) {
 800412c:	2357      	movs	r3, #87	; 0x57
 800412e:	18fb      	adds	r3, r7, r3
 8004130:	220d      	movs	r2, #13
 8004132:	701a      	strb	r2, [r3, #0]
 8004134:	e012      	b.n	800415c <main+0x17c>
			W25qxx_WriteByte(0, te);
 8004136:	2457      	movs	r4, #87	; 0x57
 8004138:	193b      	adds	r3, r7, r4
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	0019      	movs	r1, r3
 800413e:	2000      	movs	r0, #0
 8004140:	f004 fcf2 	bl	8008b28 <W25qxx_WriteByte>
			validSender[te - 13] = 0;
 8004144:	0020      	movs	r0, r4
 8004146:	183b      	adds	r3, r7, r0
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	3b0d      	subs	r3, #13
 800414c:	4a9d      	ldr	r2, [pc, #628]	; (80043c4 <main+0x3e4>)
 800414e:	2100      	movs	r1, #0
 8004150:	54d1      	strb	r1, [r2, r3]
		for (uint8_t te = 13; te < 23; te++) {
 8004152:	183b      	adds	r3, r7, r0
 8004154:	781a      	ldrb	r2, [r3, #0]
 8004156:	183b      	adds	r3, r7, r0
 8004158:	3201      	adds	r2, #1
 800415a:	701a      	strb	r2, [r3, #0]
 800415c:	2357      	movs	r3, #87	; 0x57
 800415e:	18fb      	adds	r3, r7, r3
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	2b16      	cmp	r3, #22
 8004164:	d9e7      	bls.n	8004136 <main+0x156>
		}
		for (uint8_t te = 23; te < 73; te++) {
 8004166:	2356      	movs	r3, #86	; 0x56
 8004168:	18fb      	adds	r3, r7, r3
 800416a:	2217      	movs	r2, #23
 800416c:	701a      	strb	r2, [r3, #0]
 800416e:	e012      	b.n	8004196 <main+0x1b6>
			W25qxx_WriteByte(domainAdd[te - 23], te);
 8004170:	2156      	movs	r1, #86	; 0x56
 8004172:	187b      	adds	r3, r7, r1
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	3b17      	subs	r3, #23
 8004178:	4a93      	ldr	r2, [pc, #588]	; (80043c8 <main+0x3e8>)
 800417a:	5cd2      	ldrb	r2, [r2, r3]
 800417c:	000c      	movs	r4, r1
 800417e:	187b      	adds	r3, r7, r1
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	0019      	movs	r1, r3
 8004184:	0010      	movs	r0, r2
 8004186:	f004 fccf 	bl	8008b28 <W25qxx_WriteByte>
		for (uint8_t te = 23; te < 73; te++) {
 800418a:	0021      	movs	r1, r4
 800418c:	187b      	adds	r3, r7, r1
 800418e:	781a      	ldrb	r2, [r3, #0]
 8004190:	187b      	adds	r3, r7, r1
 8004192:	3201      	adds	r2, #1
 8004194:	701a      	strb	r2, [r3, #0]
 8004196:	2356      	movs	r3, #86	; 0x56
 8004198:	18fb      	adds	r3, r7, r3
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	2b48      	cmp	r3, #72	; 0x48
 800419e:	d9e7      	bls.n	8004170 <main+0x190>
		}
		for (uint8_t te = 73; te < 79; te++) {
 80041a0:	2355      	movs	r3, #85	; 0x55
 80041a2:	18fb      	adds	r3, r7, r3
 80041a4:	2249      	movs	r2, #73	; 0x49
 80041a6:	701a      	strb	r2, [r3, #0]
 80041a8:	e012      	b.n	80041d0 <main+0x1f0>
			W25qxx_WriteByte(portAdd[te - 73], te);
 80041aa:	2155      	movs	r1, #85	; 0x55
 80041ac:	187b      	adds	r3, r7, r1
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	3b49      	subs	r3, #73	; 0x49
 80041b2:	4a86      	ldr	r2, [pc, #536]	; (80043cc <main+0x3ec>)
 80041b4:	5cd2      	ldrb	r2, [r2, r3]
 80041b6:	000c      	movs	r4, r1
 80041b8:	187b      	adds	r3, r7, r1
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	0019      	movs	r1, r3
 80041be:	0010      	movs	r0, r2
 80041c0:	f004 fcb2 	bl	8008b28 <W25qxx_WriteByte>
		for (uint8_t te = 73; te < 79; te++) {
 80041c4:	0021      	movs	r1, r4
 80041c6:	187b      	adds	r3, r7, r1
 80041c8:	781a      	ldrb	r2, [r3, #0]
 80041ca:	187b      	adds	r3, r7, r1
 80041cc:	3201      	adds	r2, #1
 80041ce:	701a      	strb	r2, [r3, #0]
 80041d0:	2355      	movs	r3, #85	; 0x55
 80041d2:	18fb      	adds	r3, r7, r3
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	2b4e      	cmp	r3, #78	; 0x4e
 80041d8:	d9e7      	bls.n	80041aa <main+0x1ca>
 80041da:	e0bd      	b.n	8004358 <main+0x378>
		}
	} else {
		HAL_UART_Transmit(&huart4, "reading from rom",
 80041dc:	497c      	ldr	r1, [pc, #496]	; (80043d0 <main+0x3f0>)
 80041de:	4872      	ldr	r0, [pc, #456]	; (80043a8 <main+0x3c8>)
 80041e0:	2364      	movs	r3, #100	; 0x64
 80041e2:	2211      	movs	r2, #17
 80041e4:	f008 fca4 	bl	800cb30 <HAL_UART_Transmit>
				sizeof("reading from rom"), 100);

		uint8_t myread[78];
		memset(myread, 0, sizeof(myread));
 80041e8:	003b      	movs	r3, r7
 80041ea:	224e      	movs	r2, #78	; 0x4e
 80041ec:	2100      	movs	r1, #0
 80041ee:	0018      	movs	r0, r3
 80041f0:	f00a fbf9 	bl	800e9e6 <memset>
		//printf("already flashed once/n");
		W25qxx_ReadBytes(myread, 1, 78);
 80041f4:	003b      	movs	r3, r7
 80041f6:	224e      	movs	r2, #78	; 0x4e
 80041f8:	2101      	movs	r1, #1
 80041fa:	0018      	movs	r0, r3
 80041fc:	f004 fe2e 	bl	8008e5c <W25qxx_ReadBytes>
		StartSec = myread[0];
 8004200:	003b      	movs	r3, r7
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	b29a      	uxth	r2, r3
 8004206:	4b6b      	ldr	r3, [pc, #428]	; (80043b4 <main+0x3d4>)
 8004208:	801a      	strh	r2, [r3, #0]
		StartSec = StartSec << 8 | myread[1];
 800420a:	4b6a      	ldr	r3, [pc, #424]	; (80043b4 <main+0x3d4>)
 800420c:	881b      	ldrh	r3, [r3, #0]
 800420e:	b29b      	uxth	r3, r3
 8004210:	021b      	lsls	r3, r3, #8
 8004212:	b21a      	sxth	r2, r3
 8004214:	003b      	movs	r3, r7
 8004216:	785b      	ldrb	r3, [r3, #1]
 8004218:	b21b      	sxth	r3, r3
 800421a:	4313      	orrs	r3, r2
 800421c:	b21b      	sxth	r3, r3
 800421e:	b29a      	uxth	r2, r3
 8004220:	4b64      	ldr	r3, [pc, #400]	; (80043b4 <main+0x3d4>)
 8004222:	801a      	strh	r2, [r3, #0]

		StartN = myread[2];
 8004224:	003b      	movs	r3, r7
 8004226:	789b      	ldrb	r3, [r3, #2]
 8004228:	b29a      	uxth	r2, r3
 800422a:	4b60      	ldr	r3, [pc, #384]	; (80043ac <main+0x3cc>)
 800422c:	801a      	strh	r2, [r3, #0]
		StartN = StartN << 8 | myread[3];
 800422e:	4b5f      	ldr	r3, [pc, #380]	; (80043ac <main+0x3cc>)
 8004230:	881b      	ldrh	r3, [r3, #0]
 8004232:	b29b      	uxth	r3, r3
 8004234:	021b      	lsls	r3, r3, #8
 8004236:	b21a      	sxth	r2, r3
 8004238:	003b      	movs	r3, r7
 800423a:	78db      	ldrb	r3, [r3, #3]
 800423c:	b21b      	sxth	r3, r3
 800423e:	4313      	orrs	r3, r2
 8004240:	b21b      	sxth	r3, r3
 8004242:	b29a      	uxth	r2, r3
 8004244:	4b59      	ldr	r3, [pc, #356]	; (80043ac <main+0x3cc>)
 8004246:	801a      	strh	r2, [r3, #0]

		EndSec = myread[4];
 8004248:	003b      	movs	r3, r7
 800424a:	791b      	ldrb	r3, [r3, #4]
 800424c:	b29a      	uxth	r2, r3
 800424e:	4b5a      	ldr	r3, [pc, #360]	; (80043b8 <main+0x3d8>)
 8004250:	801a      	strh	r2, [r3, #0]
		EndSec = EndSec << 8 | myread[5];
 8004252:	4b59      	ldr	r3, [pc, #356]	; (80043b8 <main+0x3d8>)
 8004254:	881b      	ldrh	r3, [r3, #0]
 8004256:	b29b      	uxth	r3, r3
 8004258:	021b      	lsls	r3, r3, #8
 800425a:	b21a      	sxth	r2, r3
 800425c:	003b      	movs	r3, r7
 800425e:	795b      	ldrb	r3, [r3, #5]
 8004260:	b21b      	sxth	r3, r3
 8004262:	4313      	orrs	r3, r2
 8004264:	b21b      	sxth	r3, r3
 8004266:	b29a      	uxth	r2, r3
 8004268:	4b53      	ldr	r3, [pc, #332]	; (80043b8 <main+0x3d8>)
 800426a:	801a      	strh	r2, [r3, #0]

		EndN = myread[6];
 800426c:	003b      	movs	r3, r7
 800426e:	799b      	ldrb	r3, [r3, #6]
 8004270:	b29a      	uxth	r2, r3
 8004272:	4b4f      	ldr	r3, [pc, #316]	; (80043b0 <main+0x3d0>)
 8004274:	801a      	strh	r2, [r3, #0]
		EndN = EndN << 8 | myread[7];
 8004276:	4b4e      	ldr	r3, [pc, #312]	; (80043b0 <main+0x3d0>)
 8004278:	881b      	ldrh	r3, [r3, #0]
 800427a:	b29b      	uxth	r3, r3
 800427c:	021b      	lsls	r3, r3, #8
 800427e:	b21a      	sxth	r2, r3
 8004280:	003b      	movs	r3, r7
 8004282:	79db      	ldrb	r3, [r3, #7]
 8004284:	b21b      	sxth	r3, r3
 8004286:	4313      	orrs	r3, r2
 8004288:	b21b      	sxth	r3, r3
 800428a:	b29a      	uxth	r2, r3
 800428c:	4b48      	ldr	r3, [pc, #288]	; (80043b0 <main+0x3d0>)
 800428e:	801a      	strh	r2, [r3, #0]

		cPin[0] = myread[8];
 8004290:	003b      	movs	r3, r7
 8004292:	7a1a      	ldrb	r2, [r3, #8]
 8004294:	4b4a      	ldr	r3, [pc, #296]	; (80043c0 <main+0x3e0>)
 8004296:	701a      	strb	r2, [r3, #0]
		cPin[1] = myread[9];
 8004298:	003b      	movs	r3, r7
 800429a:	7a5a      	ldrb	r2, [r3, #9]
 800429c:	4b48      	ldr	r3, [pc, #288]	; (80043c0 <main+0x3e0>)
 800429e:	705a      	strb	r2, [r3, #1]
		cPin[2] = myread[10];
 80042a0:	003b      	movs	r3, r7
 80042a2:	7a9a      	ldrb	r2, [r3, #10]
 80042a4:	4b46      	ldr	r3, [pc, #280]	; (80043c0 <main+0x3e0>)
 80042a6:	709a      	strb	r2, [r3, #2]
		cPin[3] = myread[11];
 80042a8:	003b      	movs	r3, r7
 80042aa:	7ada      	ldrb	r2, [r3, #11]
 80042ac:	4b44      	ldr	r3, [pc, #272]	; (80043c0 <main+0x3e0>)
 80042ae:	70da      	strb	r2, [r3, #3]
		for (uint8_t te = 0; te < 10; te++) {
 80042b0:	2354      	movs	r3, #84	; 0x54
 80042b2:	18fb      	adds	r3, r7, r3
 80042b4:	2200      	movs	r2, #0
 80042b6:	701a      	strb	r2, [r3, #0]
 80042b8:	e00f      	b.n	80042da <main+0x2fa>
			validSender[te] = myread[te + 12];
 80042ba:	2054      	movs	r0, #84	; 0x54
 80042bc:	183b      	adds	r3, r7, r0
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	330c      	adds	r3, #12
 80042c2:	001a      	movs	r2, r3
 80042c4:	183b      	adds	r3, r7, r0
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	0039      	movs	r1, r7
 80042ca:	5c89      	ldrb	r1, [r1, r2]
 80042cc:	4a3d      	ldr	r2, [pc, #244]	; (80043c4 <main+0x3e4>)
 80042ce:	54d1      	strb	r1, [r2, r3]
		for (uint8_t te = 0; te < 10; te++) {
 80042d0:	183b      	adds	r3, r7, r0
 80042d2:	781a      	ldrb	r2, [r3, #0]
 80042d4:	183b      	adds	r3, r7, r0
 80042d6:	3201      	adds	r2, #1
 80042d8:	701a      	strb	r2, [r3, #0]
 80042da:	2354      	movs	r3, #84	; 0x54
 80042dc:	18fb      	adds	r3, r7, r3
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	2b09      	cmp	r3, #9
 80042e2:	d9ea      	bls.n	80042ba <main+0x2da>
		}
		for (uint8_t te = 0; te < 50; te++) {
 80042e4:	2353      	movs	r3, #83	; 0x53
 80042e6:	18fb      	adds	r3, r7, r3
 80042e8:	2200      	movs	r2, #0
 80042ea:	701a      	strb	r2, [r3, #0]
 80042ec:	e00f      	b.n	800430e <main+0x32e>
			domainAdd[te] = myread[te + 22];
 80042ee:	2053      	movs	r0, #83	; 0x53
 80042f0:	183b      	adds	r3, r7, r0
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	3316      	adds	r3, #22
 80042f6:	001a      	movs	r2, r3
 80042f8:	183b      	adds	r3, r7, r0
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	0039      	movs	r1, r7
 80042fe:	5c89      	ldrb	r1, [r1, r2]
 8004300:	4a31      	ldr	r2, [pc, #196]	; (80043c8 <main+0x3e8>)
 8004302:	54d1      	strb	r1, [r2, r3]
		for (uint8_t te = 0; te < 50; te++) {
 8004304:	183b      	adds	r3, r7, r0
 8004306:	781a      	ldrb	r2, [r3, #0]
 8004308:	183b      	adds	r3, r7, r0
 800430a:	3201      	adds	r2, #1
 800430c:	701a      	strb	r2, [r3, #0]
 800430e:	2353      	movs	r3, #83	; 0x53
 8004310:	18fb      	adds	r3, r7, r3
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	2b31      	cmp	r3, #49	; 0x31
 8004316:	d9ea      	bls.n	80042ee <main+0x30e>
		}
		for (uint8_t te = 0; te < 6; te++) {
 8004318:	2352      	movs	r3, #82	; 0x52
 800431a:	18fb      	adds	r3, r7, r3
 800431c:	2200      	movs	r2, #0
 800431e:	701a      	strb	r2, [r3, #0]
 8004320:	e00f      	b.n	8004342 <main+0x362>
			portAdd[te] = myread[te + 72];
 8004322:	2052      	movs	r0, #82	; 0x52
 8004324:	183b      	adds	r3, r7, r0
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	3348      	adds	r3, #72	; 0x48
 800432a:	001a      	movs	r2, r3
 800432c:	183b      	adds	r3, r7, r0
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	0039      	movs	r1, r7
 8004332:	5c89      	ldrb	r1, [r1, r2]
 8004334:	4a25      	ldr	r2, [pc, #148]	; (80043cc <main+0x3ec>)
 8004336:	54d1      	strb	r1, [r2, r3]
		for (uint8_t te = 0; te < 6; te++) {
 8004338:	183b      	adds	r3, r7, r0
 800433a:	781a      	ldrb	r2, [r3, #0]
 800433c:	183b      	adds	r3, r7, r0
 800433e:	3201      	adds	r2, #1
 8004340:	701a      	strb	r2, [r3, #0]
 8004342:	2352      	movs	r3, #82	; 0x52
 8004344:	18fb      	adds	r3, r7, r3
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	2b05      	cmp	r3, #5
 800434a:	d9ea      	bls.n	8004322 <main+0x342>
		}

		HAL_Delay(100);
 800434c:	2064      	movs	r0, #100	; 0x64
 800434e:	f004 ff75 	bl	800923c <HAL_Delay>
		flashready = 1;
 8004352:	4b1a      	ldr	r3, [pc, #104]	; (80043bc <main+0x3dc>)
 8004354:	2201      	movs	r2, #1
 8004356:	701a      	strb	r2, [r3, #0]
	}

	//-------------------check if tracker has registered any mobile number?-------------
	isSMSActive=0;
 8004358:	4b1e      	ldr	r3, [pc, #120]	; (80043d4 <main+0x3f4>)
 800435a:	2200      	movs	r2, #0
 800435c:	701a      	strb	r2, [r3, #0]
	for(uint8_t a=0;a<6;a++){
 800435e:	2351      	movs	r3, #81	; 0x51
 8004360:	18fb      	adds	r3, r7, r3
 8004362:	2200      	movs	r2, #0
 8004364:	701a      	strb	r2, [r3, #0]
 8004366:	e03d      	b.n	80043e4 <main+0x404>
		if(validSender[a]!=0){
 8004368:	2351      	movs	r3, #81	; 0x51
 800436a:	18fb      	adds	r3, r7, r3
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	4a15      	ldr	r2, [pc, #84]	; (80043c4 <main+0x3e4>)
 8004370:	5cd3      	ldrb	r3, [r2, r3]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d030      	beq.n	80043d8 <main+0x3f8>
			isSMSActive=1;
 8004376:	4b17      	ldr	r3, [pc, #92]	; (80043d4 <main+0x3f4>)
 8004378:	2201      	movs	r2, #1
 800437a:	701a      	strb	r2, [r3, #0]
			break;
 800437c:	e037      	b.n	80043ee <main+0x40e>
 800437e:	46c0      	nop			; (mov r8, r8)
 8004380:	2000071c 	.word	0x2000071c
 8004384:	200004b0 	.word	0x200004b0
 8004388:	20000720 	.word	0x20000720
 800438c:	20000544 	.word	0x20000544
 8004390:	20000324 	.word	0x20000324
 8004394:	20000370 	.word	0x20000370
 8004398:	200003bc 	.word	0x200003bc
 800439c:	20000408 	.word	0x20000408
 80043a0:	2000070c 	.word	0x2000070c
 80043a4:	08012e90 	.word	0x08012e90
 80043a8:	2000066c 	.word	0x2000066c
 80043ac:	20000cdc 	.word	0x20000cdc
 80043b0:	20000cde 	.word	0x20000cde
 80043b4:	20000ce0 	.word	0x20000ce0
 80043b8:	20000ce2 	.word	0x20000ce2
 80043bc:	20000ce4 	.word	0x20000ce4
 80043c0:	20000710 	.word	0x20000710
 80043c4:	20000004 	.word	0x20000004
 80043c8:	20000030 	.word	0x20000030
 80043cc:	20000028 	.word	0x20000028
 80043d0:	08012e9c 	.word	0x08012e9c
 80043d4:	20000708 	.word	0x20000708
	for(uint8_t a=0;a<6;a++){
 80043d8:	2151      	movs	r1, #81	; 0x51
 80043da:	187b      	adds	r3, r7, r1
 80043dc:	781a      	ldrb	r2, [r3, #0]
 80043de:	187b      	adds	r3, r7, r1
 80043e0:	3201      	adds	r2, #1
 80043e2:	701a      	strb	r2, [r3, #0]
 80043e4:	2351      	movs	r3, #81	; 0x51
 80043e6:	18fb      	adds	r3, r7, r3
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	2b05      	cmp	r3, #5
 80043ec:	d9bc      	bls.n	8004368 <main+0x388>
	}
	//----------------------------------------------------------------------------------



	HAL_GPIO_WritePin(PWR_KEY_GPIO_Port, PWR_KEY_Pin, 1);
 80043ee:	2380      	movs	r3, #128	; 0x80
 80043f0:	01db      	lsls	r3, r3, #7
 80043f2:	4873      	ldr	r0, [pc, #460]	; (80045c0 <main+0x5e0>)
 80043f4:	2201      	movs	r2, #1
 80043f6:	0019      	movs	r1, r3
 80043f8:	f005 fca4 	bl	8009d44 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80043fc:	23fa      	movs	r3, #250	; 0xfa
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	0018      	movs	r0, r3
 8004402:	f004 ff1b 	bl	800923c <HAL_Delay>
	HAL_GPIO_WritePin(PWR_KEY_GPIO_Port, PWR_KEY_Pin, 0);
 8004406:	2380      	movs	r3, #128	; 0x80
 8004408:	01db      	lsls	r3, r3, #7
 800440a:	486d      	ldr	r0, [pc, #436]	; (80045c0 <main+0x5e0>)
 800440c:	2200      	movs	r2, #0
 800440e:	0019      	movs	r1, r3
 8004410:	f005 fc98 	bl	8009d44 <HAL_GPIO_WritePin>
	HAL_Delay(5000);
 8004414:	4b6b      	ldr	r3, [pc, #428]	; (80045c4 <main+0x5e4>)
 8004416:	0018      	movs	r0, r3
 8004418:	f004 ff10 	bl	800923c <HAL_Delay>
	quectel_init();
 800441c:	f002 f9a0 	bl	8006760 <quectel_init>

	//INPUT CAPTURE------
	HAL_TIM_IC_Start_DMA(&htim3, TIM_CHANNEL_1, vals, NUMVAL);
 8004420:	4a69      	ldr	r2, [pc, #420]	; (80045c8 <main+0x5e8>)
 8004422:	486a      	ldr	r0, [pc, #424]	; (80045cc <main+0x5ec>)
 8004424:	2302      	movs	r3, #2
 8004426:	2100      	movs	r1, #0
 8004428:	f007 fc50 	bl	800bccc <HAL_TIM_IC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		while (isTcpOpen == 0 && isLoggedIn == 0) {
 800442c:	e065      	b.n	80044fa <main+0x51a>
			stats = 1;
 800442e:	4b68      	ldr	r3, [pc, #416]	; (80045d0 <main+0x5f0>)
 8004430:	2201      	movs	r2, #1
 8004432:	701a      	strb	r2, [r3, #0]
			while (isReg == 0) {
 8004434:	e021      	b.n	800447a <main+0x49a>
				stats = 2;
 8004436:	4b66      	ldr	r3, [pc, #408]	; (80045d0 <main+0x5f0>)
 8004438:	2202      	movs	r2, #2
 800443a:	701a      	strb	r2, [r3, #0]
				// HAL_UART_Transmit(&huart4, "at+creg",
				// sizeof("at+creg"), 100);
				send_command("AT+CREG?\r\n", 3, 3, 5, 1);
 800443c:	4865      	ldr	r0, [pc, #404]	; (80045d4 <main+0x5f4>)
 800443e:	2301      	movs	r3, #1
 8004440:	9300      	str	r3, [sp, #0]
 8004442:	2305      	movs	r3, #5
 8004444:	2203      	movs	r2, #3
 8004446:	2103      	movs	r1, #3
 8004448:	f002 f8de 	bl	8006608 <send_command>
				if (!isReg) {
 800444c:	4b62      	ldr	r3, [pc, #392]	; (80045d8 <main+0x5f8>)
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d112      	bne.n	800447a <main+0x49a>
					HAL_Delay(10000);
 8004454:	4b61      	ldr	r3, [pc, #388]	; (80045dc <main+0x5fc>)
 8004456:	0018      	movs	r0, r3
 8004458:	f004 fef0 	bl	800923c <HAL_Delay>
					stats = 3;
 800445c:	4b5c      	ldr	r3, [pc, #368]	; (80045d0 <main+0x5f0>)
 800445e:	2203      	movs	r2, #3
 8004460:	701a      	strb	r2, [r3, #0]
					rebootCounter++;
 8004462:	4b5f      	ldr	r3, [pc, #380]	; (80045e0 <main+0x600>)
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	3301      	adds	r3, #1
 8004468:	b2da      	uxtb	r2, r3
 800446a:	4b5d      	ldr	r3, [pc, #372]	; (80045e0 <main+0x600>)
 800446c:	701a      	strb	r2, [r3, #0]
					if (rebootCounter > mainCount) {
 800446e:	4b5c      	ldr	r3, [pc, #368]	; (80045e0 <main+0x600>)
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	2b78      	cmp	r3, #120	; 0x78
 8004474:	d901      	bls.n	800447a <main+0x49a>
						rebootsystem();
 8004476:	f001 ffd7 	bl	8006428 <rebootsystem>
			while (isReg == 0) {
 800447a:	4b57      	ldr	r3, [pc, #348]	; (80045d8 <main+0x5f8>)
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d0d9      	beq.n	8004436 <main+0x456>
					}
				}
			}
			if (estabilish_tcp() == 1) {
 8004482:	f002 f9af 	bl	80067e4 <estabilish_tcp>
 8004486:	0003      	movs	r3, r0
 8004488:	2b01      	cmp	r3, #1
 800448a:	d11c      	bne.n	80044c6 <main+0x4e6>
				stats = 4;
 800448c:	4b50      	ldr	r3, [pc, #320]	; (80045d0 <main+0x5f0>)
 800448e:	2204      	movs	r2, #4
 8004490:	701a      	strb	r2, [r3, #0]
				// HAL_UART_Transmit(&huart4, "Loginpacket sending",
				// sizeof("loginpacket sending"), 100);
				send_login_packet();
 8004492:	f002 fb59 	bl	8006b48 <send_login_packet>
				HAL_Delay(5000);
 8004496:	4b4b      	ldr	r3, [pc, #300]	; (80045c4 <main+0x5e4>)
 8004498:	0018      	movs	r0, r3
 800449a:	f004 fecf 	bl	800923c <HAL_Delay>
				if (isLoggedIn == 0) {
 800449e:	4b51      	ldr	r3, [pc, #324]	; (80045e4 <main+0x604>)
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d128      	bne.n	80044fa <main+0x51a>
					// HAL_UART_Transmit(&huart4, "Loginpacket sending",
					// sizeof("loginpacket sending"), 100);
					send_login_packet();
 80044a8:	f002 fb4e 	bl	8006b48 <send_login_packet>
					HAL_Delay(5000);
 80044ac:	4b45      	ldr	r3, [pc, #276]	; (80045c4 <main+0x5e4>)
 80044ae:	0018      	movs	r0, r3
 80044b0:	f004 fec4 	bl	800923c <HAL_Delay>
					if (isLoggedIn == 0) {
 80044b4:	4b4b      	ldr	r3, [pc, #300]	; (80045e4 <main+0x604>)
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d11d      	bne.n	80044fa <main+0x51a>
						isTcpOpen = 0;
 80044be:	4b4a      	ldr	r3, [pc, #296]	; (80045e8 <main+0x608>)
 80044c0:	2200      	movs	r2, #0
 80044c2:	701a      	strb	r2, [r3, #0]
 80044c4:	e019      	b.n	80044fa <main+0x51a>
					}
				}
			}
			else {
				stats = 5;
 80044c6:	4b42      	ldr	r3, [pc, #264]	; (80045d0 <main+0x5f0>)
 80044c8:	2205      	movs	r2, #5
 80044ca:	701a      	strb	r2, [r3, #0]
				recTimeA = 0;
 80044cc:	4b47      	ldr	r3, [pc, #284]	; (80045ec <main+0x60c>)
 80044ce:	2200      	movs	r2, #0
 80044d0:	701a      	strb	r2, [r3, #0]
				while (recTimeA < rTime) { //18 to 180
 80044d2:	e00c      	b.n	80044ee <main+0x50e>
					HAL_Delay(1000);
 80044d4:	23fa      	movs	r3, #250	; 0xfa
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	0018      	movs	r0, r3
 80044da:	f004 feaf 	bl	800923c <HAL_Delay>
					recTimeA++;
 80044de:	4b43      	ldr	r3, [pc, #268]	; (80045ec <main+0x60c>)
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	3301      	adds	r3, #1
 80044e4:	b2da      	uxtb	r2, r3
 80044e6:	4b41      	ldr	r3, [pc, #260]	; (80045ec <main+0x60c>)
 80044e8:	701a      	strb	r2, [r3, #0]
					where_api_handler();
 80044ea:	f002 fa79 	bl	80069e0 <where_api_handler>
				while (recTimeA < rTime) { //18 to 180
 80044ee:	4b3f      	ldr	r3, [pc, #252]	; (80045ec <main+0x60c>)
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	2bb3      	cmp	r3, #179	; 0xb3
 80044f4:	d9ee      	bls.n	80044d4 <main+0x4f4>
				}
				//SEND LOCATION VIA SMS
				//--------------------------------------------------------------------------
				send_location_packet_via_sms();
 80044f6:	f003 f9a5 	bl	8007844 <send_location_packet_via_sms>
		while (isTcpOpen == 0 && isLoggedIn == 0) {
 80044fa:	4b3b      	ldr	r3, [pc, #236]	; (80045e8 <main+0x608>)
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	2b00      	cmp	r3, #0
 8004502:	d143      	bne.n	800458c <main+0x5ac>
 8004504:	4b37      	ldr	r3, [pc, #220]	; (80045e4 <main+0x604>)
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d08f      	beq.n	800442e <main+0x44e>
				//--------------------------------------------------------
			}
		}
		while (isTcpOpen == 1 && isLoggedIn == 1 && isDataMode == 1) {
 800450e:	e03d      	b.n	800458c <main+0x5ac>
			stats = 7;
 8004510:	4b2f      	ldr	r3, [pc, #188]	; (80045d0 <main+0x5f0>)
 8004512:	2207      	movs	r2, #7
 8004514:	701a      	strb	r2, [r3, #0]
			HAL_Delay(locationDataIntervalA*1000);
 8004516:	4b36      	ldr	r3, [pc, #216]	; (80045f0 <main+0x610>)
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	001a      	movs	r2, r3
 800451c:	0013      	movs	r3, r2
 800451e:	015b      	lsls	r3, r3, #5
 8004520:	1a9b      	subs	r3, r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	189b      	adds	r3, r3, r2
 8004526:	00db      	lsls	r3, r3, #3
 8004528:	0018      	movs	r0, r3
 800452a:	f004 fe87 	bl	800923c <HAL_Delay>
			heartBeatTimer++;
 800452e:	4b31      	ldr	r3, [pc, #196]	; (80045f4 <main+0x614>)
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	3301      	adds	r3, #1
 8004534:	b2da      	uxtb	r2, r3
 8004536:	4b2f      	ldr	r3, [pc, #188]	; (80045f4 <main+0x614>)
 8004538:	701a      	strb	r2, [r3, #0]
			if (heartBeatTimer > 36) {
 800453a:	4b2e      	ldr	r3, [pc, #184]	; (80045f4 <main+0x614>)
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	2b24      	cmp	r3, #36	; 0x24
 8004540:	d90e      	bls.n	8004560 <main+0x580>
				stats = 8;
 8004542:	4b23      	ldr	r3, [pc, #140]	; (80045d0 <main+0x5f0>)
 8004544:	2208      	movs	r2, #8
 8004546:	701a      	strb	r2, [r3, #0]
				isLoggedIn = 0;
 8004548:	4b26      	ldr	r3, [pc, #152]	; (80045e4 <main+0x604>)
 800454a:	2200      	movs	r2, #0
 800454c:	701a      	strb	r2, [r3, #0]
				send_hb_packet();
 800454e:	f002 fdcd 	bl	80070ec <send_hb_packet>
				HAL_Delay(10000);
 8004552:	4b22      	ldr	r3, [pc, #136]	; (80045dc <main+0x5fc>)
 8004554:	0018      	movs	r0, r3
 8004556:	f004 fe71 	bl	800923c <HAL_Delay>
				heartBeatTimer = 0;
 800455a:	4b26      	ldr	r3, [pc, #152]	; (80045f4 <main+0x614>)
 800455c:	2200      	movs	r2, #0
 800455e:	701a      	strb	r2, [r3, #0]
			}
			if (isDataMode == 1 && isLoggedIn == 1 && isTcpOpen == 1) {
 8004560:	4b25      	ldr	r3, [pc, #148]	; (80045f8 <main+0x618>)
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b01      	cmp	r3, #1
 8004568:	d110      	bne.n	800458c <main+0x5ac>
 800456a:	4b1e      	ldr	r3, [pc, #120]	; (80045e4 <main+0x604>)
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	b2db      	uxtb	r3, r3
 8004570:	2b01      	cmp	r3, #1
 8004572:	d10b      	bne.n	800458c <main+0x5ac>
 8004574:	4b1c      	ldr	r3, [pc, #112]	; (80045e8 <main+0x608>)
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2b01      	cmp	r3, #1
 800457c:	d106      	bne.n	800458c <main+0x5ac>
				stats = 8;
 800457e:	4b14      	ldr	r3, [pc, #80]	; (80045d0 <main+0x5f0>)
 8004580:	2208      	movs	r2, #8
 8004582:	701a      	strb	r2, [r3, #0]
				incoming_msg_handler();
 8004584:	f002 fa7c 	bl	8006a80 <incoming_msg_handler>
				send_data_packet();
 8004588:	f002 fb60 	bl	8006c4c <send_data_packet>
		while (isTcpOpen == 1 && isLoggedIn == 1 && isDataMode == 1) {
 800458c:	4b16      	ldr	r3, [pc, #88]	; (80045e8 <main+0x608>)
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	b2db      	uxtb	r3, r3
 8004592:	2b01      	cmp	r3, #1
 8004594:	d109      	bne.n	80045aa <main+0x5ca>
 8004596:	4b13      	ldr	r3, [pc, #76]	; (80045e4 <main+0x604>)
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	b2db      	uxtb	r3, r3
 800459c:	2b01      	cmp	r3, #1
 800459e:	d104      	bne.n	80045aa <main+0x5ca>
 80045a0:	4b15      	ldr	r3, [pc, #84]	; (80045f8 <main+0x618>)
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d0b2      	beq.n	8004510 <main+0x530>
			}

		}
		isTcpOpen = 0;
 80045aa:	4b0f      	ldr	r3, [pc, #60]	; (80045e8 <main+0x608>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	701a      	strb	r2, [r3, #0]
		isLoggedIn = 0;
 80045b0:	4b0c      	ldr	r3, [pc, #48]	; (80045e4 <main+0x604>)
 80045b2:	2200      	movs	r2, #0
 80045b4:	701a      	strb	r2, [r3, #0]
		isDataMode = 0;
 80045b6:	4b10      	ldr	r3, [pc, #64]	; (80045f8 <main+0x618>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	701a      	strb	r2, [r3, #0]
		while (isTcpOpen == 0 && isLoggedIn == 0) {
 80045bc:	e79d      	b.n	80044fa <main+0x51a>
 80045be:	46c0      	nop			; (mov r8, r8)
 80045c0:	50000400 	.word	0x50000400
 80045c4:	00001388 	.word	0x00001388
 80045c8:	20000704 	.word	0x20000704
 80045cc:	20000324 	.word	0x20000324
 80045d0:	20000ce5 	.word	0x20000ce5
 80045d4:	08012eb0 	.word	0x08012eb0
 80045d8:	200009f5 	.word	0x200009f5
 80045dc:	00002710 	.word	0x00002710
 80045e0:	20000718 	.word	0x20000718
 80045e4:	200009f7 	.word	0x200009f7
 80045e8:	200009f4 	.word	0x200009f4
 80045ec:	20000714 	.word	0x20000714
 80045f0:	20000000 	.word	0x20000000
 80045f4:	20000717 	.word	0x20000717
 80045f8:	20000856 	.word	0x20000856

080045fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80045fc:	b590      	push	{r4, r7, lr}
 80045fe:	b093      	sub	sp, #76	; 0x4c
 8004600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004602:	2414      	movs	r4, #20
 8004604:	193b      	adds	r3, r7, r4
 8004606:	0018      	movs	r0, r3
 8004608:	2334      	movs	r3, #52	; 0x34
 800460a:	001a      	movs	r2, r3
 800460c:	2100      	movs	r1, #0
 800460e:	f00a f9ea 	bl	800e9e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004612:	1d3b      	adds	r3, r7, #4
 8004614:	0018      	movs	r0, r3
 8004616:	2310      	movs	r3, #16
 8004618:	001a      	movs	r2, r3
 800461a:	2100      	movs	r1, #0
 800461c:	f00a f9e3 	bl	800e9e6 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004620:	2380      	movs	r3, #128	; 0x80
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	0018      	movs	r0, r3
 8004626:	f005 fbc5 	bl	8009db4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800462a:	193b      	adds	r3, r7, r4
 800462c:	2202      	movs	r2, #2
 800462e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004630:	193b      	adds	r3, r7, r4
 8004632:	2280      	movs	r2, #128	; 0x80
 8004634:	0052      	lsls	r2, r2, #1
 8004636:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8004638:	0021      	movs	r1, r4
 800463a:	187b      	adds	r3, r7, r1
 800463c:	2200      	movs	r2, #0
 800463e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004640:	187b      	adds	r3, r7, r1
 8004642:	2240      	movs	r2, #64	; 0x40
 8004644:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004646:	187b      	adds	r3, r7, r1
 8004648:	2202      	movs	r2, #2
 800464a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800464c:	187b      	adds	r3, r7, r1
 800464e:	2202      	movs	r2, #2
 8004650:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8004652:	187b      	adds	r3, r7, r1
 8004654:	2200      	movs	r2, #0
 8004656:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8004658:	187b      	adds	r3, r7, r1
 800465a:	2208      	movs	r2, #8
 800465c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800465e:	187b      	adds	r3, r7, r1
 8004660:	2280      	movs	r2, #128	; 0x80
 8004662:	0292      	lsls	r2, r2, #10
 8004664:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004666:	187b      	adds	r3, r7, r1
 8004668:	2280      	movs	r2, #128	; 0x80
 800466a:	0592      	lsls	r2, r2, #22
 800466c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800466e:	187b      	adds	r3, r7, r1
 8004670:	0018      	movs	r0, r3
 8004672:	f005 fbeb 	bl	8009e4c <HAL_RCC_OscConfig>
 8004676:	1e03      	subs	r3, r0, #0
 8004678:	d001      	beq.n	800467e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800467a:	f003 fbe9 	bl	8007e50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800467e:	1d3b      	adds	r3, r7, #4
 8004680:	2207      	movs	r2, #7
 8004682:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004684:	1d3b      	adds	r3, r7, #4
 8004686:	2202      	movs	r2, #2
 8004688:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800468a:	1d3b      	adds	r3, r7, #4
 800468c:	2200      	movs	r2, #0
 800468e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004690:	1d3b      	adds	r3, r7, #4
 8004692:	2200      	movs	r2, #0
 8004694:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004696:	1d3b      	adds	r3, r7, #4
 8004698:	2102      	movs	r1, #2
 800469a:	0018      	movs	r0, r3
 800469c:	f005 fee6 	bl	800a46c <HAL_RCC_ClockConfig>
 80046a0:	1e03      	subs	r3, r0, #0
 80046a2:	d001      	beq.n	80046a8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80046a4:	f003 fbd4 	bl	8007e50 <Error_Handler>
  }
}
 80046a8:	46c0      	nop			; (mov r8, r8)
 80046aa:	46bd      	mov	sp, r7
 80046ac:	b013      	add	sp, #76	; 0x4c
 80046ae:	bd90      	pop	{r4, r7, pc}

080046b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80046b4:	4b1b      	ldr	r3, [pc, #108]	; (8004724 <MX_SPI1_Init+0x74>)
 80046b6:	4a1c      	ldr	r2, [pc, #112]	; (8004728 <MX_SPI1_Init+0x78>)
 80046b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80046ba:	4b1a      	ldr	r3, [pc, #104]	; (8004724 <MX_SPI1_Init+0x74>)
 80046bc:	2282      	movs	r2, #130	; 0x82
 80046be:	0052      	lsls	r2, r2, #1
 80046c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80046c2:	4b18      	ldr	r3, [pc, #96]	; (8004724 <MX_SPI1_Init+0x74>)
 80046c4:	2200      	movs	r2, #0
 80046c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80046c8:	4b16      	ldr	r3, [pc, #88]	; (8004724 <MX_SPI1_Init+0x74>)
 80046ca:	22e0      	movs	r2, #224	; 0xe0
 80046cc:	00d2      	lsls	r2, r2, #3
 80046ce:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80046d0:	4b14      	ldr	r3, [pc, #80]	; (8004724 <MX_SPI1_Init+0x74>)
 80046d2:	2200      	movs	r2, #0
 80046d4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80046d6:	4b13      	ldr	r3, [pc, #76]	; (8004724 <MX_SPI1_Init+0x74>)
 80046d8:	2200      	movs	r2, #0
 80046da:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80046dc:	4b11      	ldr	r3, [pc, #68]	; (8004724 <MX_SPI1_Init+0x74>)
 80046de:	2280      	movs	r2, #128	; 0x80
 80046e0:	0092      	lsls	r2, r2, #2
 80046e2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80046e4:	4b0f      	ldr	r3, [pc, #60]	; (8004724 <MX_SPI1_Init+0x74>)
 80046e6:	2220      	movs	r2, #32
 80046e8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80046ea:	4b0e      	ldr	r3, [pc, #56]	; (8004724 <MX_SPI1_Init+0x74>)
 80046ec:	2200      	movs	r2, #0
 80046ee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80046f0:	4b0c      	ldr	r3, [pc, #48]	; (8004724 <MX_SPI1_Init+0x74>)
 80046f2:	2200      	movs	r2, #0
 80046f4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046f6:	4b0b      	ldr	r3, [pc, #44]	; (8004724 <MX_SPI1_Init+0x74>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80046fc:	4b09      	ldr	r3, [pc, #36]	; (8004724 <MX_SPI1_Init+0x74>)
 80046fe:	2207      	movs	r2, #7
 8004700:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004702:	4b08      	ldr	r3, [pc, #32]	; (8004724 <MX_SPI1_Init+0x74>)
 8004704:	2200      	movs	r2, #0
 8004706:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004708:	4b06      	ldr	r3, [pc, #24]	; (8004724 <MX_SPI1_Init+0x74>)
 800470a:	2208      	movs	r2, #8
 800470c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800470e:	4b05      	ldr	r3, [pc, #20]	; (8004724 <MX_SPI1_Init+0x74>)
 8004710:	0018      	movs	r0, r3
 8004712:	f006 f989 	bl	800aa28 <HAL_SPI_Init>
 8004716:	1e03      	subs	r3, r0, #0
 8004718:	d001      	beq.n	800471e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800471a:	f003 fb99 	bl	8007e50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800471e:	46c0      	nop			; (mov r8, r8)
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	200002c0 	.word	0x200002c0
 8004728:	40013000 	.word	0x40013000

0800472c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b088      	sub	sp, #32
 8004730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004732:	2314      	movs	r3, #20
 8004734:	18fb      	adds	r3, r7, r3
 8004736:	0018      	movs	r0, r3
 8004738:	230c      	movs	r3, #12
 800473a:	001a      	movs	r2, r3
 800473c:	2100      	movs	r1, #0
 800473e:	f00a f952 	bl	800e9e6 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004742:	1d3b      	adds	r3, r7, #4
 8004744:	0018      	movs	r0, r3
 8004746:	2310      	movs	r3, #16
 8004748:	001a      	movs	r2, r3
 800474a:	2100      	movs	r1, #0
 800474c:	f00a f94b 	bl	800e9e6 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004750:	4b22      	ldr	r3, [pc, #136]	; (80047dc <MX_TIM3_Init+0xb0>)
 8004752:	4a23      	ldr	r2, [pc, #140]	; (80047e0 <MX_TIM3_Init+0xb4>)
 8004754:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 640;
 8004756:	4b21      	ldr	r3, [pc, #132]	; (80047dc <MX_TIM3_Init+0xb0>)
 8004758:	22a0      	movs	r2, #160	; 0xa0
 800475a:	0092      	lsls	r2, r2, #2
 800475c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800475e:	4b1f      	ldr	r3, [pc, #124]	; (80047dc <MX_TIM3_Init+0xb0>)
 8004760:	2200      	movs	r2, #0
 8004762:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004764:	4b1d      	ldr	r3, [pc, #116]	; (80047dc <MX_TIM3_Init+0xb0>)
 8004766:	4a1f      	ldr	r2, [pc, #124]	; (80047e4 <MX_TIM3_Init+0xb8>)
 8004768:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800476a:	4b1c      	ldr	r3, [pc, #112]	; (80047dc <MX_TIM3_Init+0xb0>)
 800476c:	2200      	movs	r2, #0
 800476e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004770:	4b1a      	ldr	r3, [pc, #104]	; (80047dc <MX_TIM3_Init+0xb0>)
 8004772:	2280      	movs	r2, #128	; 0x80
 8004774:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8004776:	4b19      	ldr	r3, [pc, #100]	; (80047dc <MX_TIM3_Init+0xb0>)
 8004778:	0018      	movs	r0, r3
 800477a:	f007 fa4f 	bl	800bc1c <HAL_TIM_IC_Init>
 800477e:	1e03      	subs	r3, r0, #0
 8004780:	d001      	beq.n	8004786 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8004782:	f003 fb65 	bl	8007e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004786:	2114      	movs	r1, #20
 8004788:	187b      	adds	r3, r7, r1
 800478a:	2200      	movs	r2, #0
 800478c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800478e:	187b      	adds	r3, r7, r1
 8004790:	2200      	movs	r2, #0
 8004792:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004794:	187a      	adds	r2, r7, r1
 8004796:	4b11      	ldr	r3, [pc, #68]	; (80047dc <MX_TIM3_Init+0xb0>)
 8004798:	0011      	movs	r1, r2
 800479a:	0018      	movs	r0, r3
 800479c:	f008 f8f2 	bl	800c984 <HAL_TIMEx_MasterConfigSynchronization>
 80047a0:	1e03      	subs	r3, r0, #0
 80047a2:	d001      	beq.n	80047a8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80047a4:	f003 fb54 	bl	8007e50 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80047a8:	1d3b      	adds	r3, r7, #4
 80047aa:	220a      	movs	r2, #10
 80047ac:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80047ae:	1d3b      	adds	r3, r7, #4
 80047b0:	2201      	movs	r2, #1
 80047b2:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80047b4:	1d3b      	adds	r3, r7, #4
 80047b6:	2200      	movs	r2, #0
 80047b8:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 80047ba:	1d3b      	adds	r3, r7, #4
 80047bc:	2200      	movs	r2, #0
 80047be:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80047c0:	1d39      	adds	r1, r7, #4
 80047c2:	4b06      	ldr	r3, [pc, #24]	; (80047dc <MX_TIM3_Init+0xb0>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	0018      	movs	r0, r3
 80047c8:	f007 fd72 	bl	800c2b0 <HAL_TIM_IC_ConfigChannel>
 80047cc:	1e03      	subs	r3, r0, #0
 80047ce:	d001      	beq.n	80047d4 <MX_TIM3_Init+0xa8>
  {
    Error_Handler();
 80047d0:	f003 fb3e 	bl	8007e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80047d4:	46c0      	nop			; (mov r8, r8)
 80047d6:	46bd      	mov	sp, r7
 80047d8:	b008      	add	sp, #32
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	20000324 	.word	0x20000324
 80047e0:	40000400 	.word	0x40000400
 80047e4:	0000ffff 	.word	0x0000ffff

080047e8 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80047ec:	4b0f      	ldr	r3, [pc, #60]	; (800482c <MX_TIM14_Init+0x44>)
 80047ee:	4a10      	ldr	r2, [pc, #64]	; (8004830 <MX_TIM14_Init+0x48>)
 80047f0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 7200;
 80047f2:	4b0e      	ldr	r3, [pc, #56]	; (800482c <MX_TIM14_Init+0x44>)
 80047f4:	22e1      	movs	r2, #225	; 0xe1
 80047f6:	0152      	lsls	r2, r2, #5
 80047f8:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047fa:	4b0c      	ldr	r3, [pc, #48]	; (800482c <MX_TIM14_Init+0x44>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000;
 8004800:	4b0a      	ldr	r3, [pc, #40]	; (800482c <MX_TIM14_Init+0x44>)
 8004802:	22fa      	movs	r2, #250	; 0xfa
 8004804:	0092      	lsls	r2, r2, #2
 8004806:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004808:	4b08      	ldr	r3, [pc, #32]	; (800482c <MX_TIM14_Init+0x44>)
 800480a:	2200      	movs	r2, #0
 800480c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800480e:	4b07      	ldr	r3, [pc, #28]	; (800482c <MX_TIM14_Init+0x44>)
 8004810:	2200      	movs	r2, #0
 8004812:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8004814:	4b05      	ldr	r3, [pc, #20]	; (800482c <MX_TIM14_Init+0x44>)
 8004816:	0018      	movs	r0, r3
 8004818:	f007 f924 	bl	800ba64 <HAL_TIM_Base_Init>
 800481c:	1e03      	subs	r3, r0, #0
 800481e:	d001      	beq.n	8004824 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8004820:	f003 fb16 	bl	8007e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8004824:	46c0      	nop			; (mov r8, r8)
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	46c0      	nop			; (mov r8, r8)
 800482c:	20000370 	.word	0x20000370
 8004830:	40002000 	.word	0x40002000

08004834 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8004838:	4b10      	ldr	r3, [pc, #64]	; (800487c <MX_TIM16_Init+0x48>)
 800483a:	4a11      	ldr	r2, [pc, #68]	; (8004880 <MX_TIM16_Init+0x4c>)
 800483c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 7200;
 800483e:	4b0f      	ldr	r3, [pc, #60]	; (800487c <MX_TIM16_Init+0x48>)
 8004840:	22e1      	movs	r2, #225	; 0xe1
 8004842:	0152      	lsls	r2, r2, #5
 8004844:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004846:	4b0d      	ldr	r3, [pc, #52]	; (800487c <MX_TIM16_Init+0x48>)
 8004848:	2200      	movs	r2, #0
 800484a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 800484c:	4b0b      	ldr	r3, [pc, #44]	; (800487c <MX_TIM16_Init+0x48>)
 800484e:	4a0d      	ldr	r2, [pc, #52]	; (8004884 <MX_TIM16_Init+0x50>)
 8004850:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004852:	4b0a      	ldr	r3, [pc, #40]	; (800487c <MX_TIM16_Init+0x48>)
 8004854:	2200      	movs	r2, #0
 8004856:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8004858:	4b08      	ldr	r3, [pc, #32]	; (800487c <MX_TIM16_Init+0x48>)
 800485a:	2200      	movs	r2, #0
 800485c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800485e:	4b07      	ldr	r3, [pc, #28]	; (800487c <MX_TIM16_Init+0x48>)
 8004860:	2200      	movs	r2, #0
 8004862:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8004864:	4b05      	ldr	r3, [pc, #20]	; (800487c <MX_TIM16_Init+0x48>)
 8004866:	0018      	movs	r0, r3
 8004868:	f007 f8fc 	bl	800ba64 <HAL_TIM_Base_Init>
 800486c:	1e03      	subs	r3, r0, #0
 800486e:	d001      	beq.n	8004874 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8004870:	f003 faee 	bl	8007e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8004874:	46c0      	nop			; (mov r8, r8)
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	46c0      	nop			; (mov r8, r8)
 800487c:	200003bc 	.word	0x200003bc
 8004880:	40014400 	.word	0x40014400
 8004884:	000003e7 	.word	0x000003e7

08004888 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800488c:	4b10      	ldr	r3, [pc, #64]	; (80048d0 <MX_TIM17_Init+0x48>)
 800488e:	4a11      	ldr	r2, [pc, #68]	; (80048d4 <MX_TIM17_Init+0x4c>)
 8004890:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 7200;
 8004892:	4b0f      	ldr	r3, [pc, #60]	; (80048d0 <MX_TIM17_Init+0x48>)
 8004894:	22e1      	movs	r2, #225	; 0xe1
 8004896:	0152      	lsls	r2, r2, #5
 8004898:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800489a:	4b0d      	ldr	r3, [pc, #52]	; (80048d0 <MX_TIM17_Init+0x48>)
 800489c:	2200      	movs	r2, #0
 800489e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 4000;
 80048a0:	4b0b      	ldr	r3, [pc, #44]	; (80048d0 <MX_TIM17_Init+0x48>)
 80048a2:	22fa      	movs	r2, #250	; 0xfa
 80048a4:	0112      	lsls	r2, r2, #4
 80048a6:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048a8:	4b09      	ldr	r3, [pc, #36]	; (80048d0 <MX_TIM17_Init+0x48>)
 80048aa:	2200      	movs	r2, #0
 80048ac:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80048ae:	4b08      	ldr	r3, [pc, #32]	; (80048d0 <MX_TIM17_Init+0x48>)
 80048b0:	2200      	movs	r2, #0
 80048b2:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80048b4:	4b06      	ldr	r3, [pc, #24]	; (80048d0 <MX_TIM17_Init+0x48>)
 80048b6:	2280      	movs	r2, #128	; 0x80
 80048b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80048ba:	4b05      	ldr	r3, [pc, #20]	; (80048d0 <MX_TIM17_Init+0x48>)
 80048bc:	0018      	movs	r0, r3
 80048be:	f007 f8d1 	bl	800ba64 <HAL_TIM_Base_Init>
 80048c2:	1e03      	subs	r3, r0, #0
 80048c4:	d001      	beq.n	80048ca <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 80048c6:	f003 fac3 	bl	8007e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80048ca:	46c0      	nop			; (mov r8, r8)
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	20000408 	.word	0x20000408
 80048d4:	40014800 	.word	0x40014800

080048d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80048dc:	4b23      	ldr	r3, [pc, #140]	; (800496c <MX_USART1_UART_Init+0x94>)
 80048de:	4a24      	ldr	r2, [pc, #144]	; (8004970 <MX_USART1_UART_Init+0x98>)
 80048e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80048e2:	4b22      	ldr	r3, [pc, #136]	; (800496c <MX_USART1_UART_Init+0x94>)
 80048e4:	2296      	movs	r2, #150	; 0x96
 80048e6:	0192      	lsls	r2, r2, #6
 80048e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80048ea:	4b20      	ldr	r3, [pc, #128]	; (800496c <MX_USART1_UART_Init+0x94>)
 80048ec:	2200      	movs	r2, #0
 80048ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80048f0:	4b1e      	ldr	r3, [pc, #120]	; (800496c <MX_USART1_UART_Init+0x94>)
 80048f2:	2200      	movs	r2, #0
 80048f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80048f6:	4b1d      	ldr	r3, [pc, #116]	; (800496c <MX_USART1_UART_Init+0x94>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80048fc:	4b1b      	ldr	r3, [pc, #108]	; (800496c <MX_USART1_UART_Init+0x94>)
 80048fe:	220c      	movs	r2, #12
 8004900:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004902:	4b1a      	ldr	r3, [pc, #104]	; (800496c <MX_USART1_UART_Init+0x94>)
 8004904:	2200      	movs	r2, #0
 8004906:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004908:	4b18      	ldr	r3, [pc, #96]	; (800496c <MX_USART1_UART_Init+0x94>)
 800490a:	2200      	movs	r2, #0
 800490c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800490e:	4b17      	ldr	r3, [pc, #92]	; (800496c <MX_USART1_UART_Init+0x94>)
 8004910:	2200      	movs	r2, #0
 8004912:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004914:	4b15      	ldr	r3, [pc, #84]	; (800496c <MX_USART1_UART_Init+0x94>)
 8004916:	2200      	movs	r2, #0
 8004918:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800491a:	4b14      	ldr	r3, [pc, #80]	; (800496c <MX_USART1_UART_Init+0x94>)
 800491c:	2200      	movs	r2, #0
 800491e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004920:	4b12      	ldr	r3, [pc, #72]	; (800496c <MX_USART1_UART_Init+0x94>)
 8004922:	0018      	movs	r0, r3
 8004924:	f008 f8ae 	bl	800ca84 <HAL_UART_Init>
 8004928:	1e03      	subs	r3, r0, #0
 800492a:	d001      	beq.n	8004930 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800492c:	f003 fa90 	bl	8007e50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004930:	4b0e      	ldr	r3, [pc, #56]	; (800496c <MX_USART1_UART_Init+0x94>)
 8004932:	2100      	movs	r1, #0
 8004934:	0018      	movs	r0, r3
 8004936:	f009 ff17 	bl	800e768 <HAL_UARTEx_SetTxFifoThreshold>
 800493a:	1e03      	subs	r3, r0, #0
 800493c:	d001      	beq.n	8004942 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800493e:	f003 fa87 	bl	8007e50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004942:	4b0a      	ldr	r3, [pc, #40]	; (800496c <MX_USART1_UART_Init+0x94>)
 8004944:	2100      	movs	r1, #0
 8004946:	0018      	movs	r0, r3
 8004948:	f009 ff4e 	bl	800e7e8 <HAL_UARTEx_SetRxFifoThreshold>
 800494c:	1e03      	subs	r3, r0, #0
 800494e:	d001      	beq.n	8004954 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004950:	f003 fa7e 	bl	8007e50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004954:	4b05      	ldr	r3, [pc, #20]	; (800496c <MX_USART1_UART_Init+0x94>)
 8004956:	0018      	movs	r0, r3
 8004958:	f009 fecc 	bl	800e6f4 <HAL_UARTEx_DisableFifoMode>
 800495c:	1e03      	subs	r3, r0, #0
 800495e:	d001      	beq.n	8004964 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004960:	f003 fa76 	bl	8007e50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004964:	46c0      	nop			; (mov r8, r8)
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	46c0      	nop			; (mov r8, r8)
 800496c:	200004b0 	.word	0x200004b0
 8004970:	40013800 	.word	0x40013800

08004974 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004978:	4b23      	ldr	r3, [pc, #140]	; (8004a08 <MX_USART2_UART_Init+0x94>)
 800497a:	4a24      	ldr	r2, [pc, #144]	; (8004a0c <MX_USART2_UART_Init+0x98>)
 800497c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800497e:	4b22      	ldr	r3, [pc, #136]	; (8004a08 <MX_USART2_UART_Init+0x94>)
 8004980:	22e1      	movs	r2, #225	; 0xe1
 8004982:	0252      	lsls	r2, r2, #9
 8004984:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004986:	4b20      	ldr	r3, [pc, #128]	; (8004a08 <MX_USART2_UART_Init+0x94>)
 8004988:	2200      	movs	r2, #0
 800498a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800498c:	4b1e      	ldr	r3, [pc, #120]	; (8004a08 <MX_USART2_UART_Init+0x94>)
 800498e:	2200      	movs	r2, #0
 8004990:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004992:	4b1d      	ldr	r3, [pc, #116]	; (8004a08 <MX_USART2_UART_Init+0x94>)
 8004994:	2200      	movs	r2, #0
 8004996:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004998:	4b1b      	ldr	r3, [pc, #108]	; (8004a08 <MX_USART2_UART_Init+0x94>)
 800499a:	220c      	movs	r2, #12
 800499c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800499e:	4b1a      	ldr	r3, [pc, #104]	; (8004a08 <MX_USART2_UART_Init+0x94>)
 80049a0:	2200      	movs	r2, #0
 80049a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80049a4:	4b18      	ldr	r3, [pc, #96]	; (8004a08 <MX_USART2_UART_Init+0x94>)
 80049a6:	2200      	movs	r2, #0
 80049a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80049aa:	4b17      	ldr	r3, [pc, #92]	; (8004a08 <MX_USART2_UART_Init+0x94>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80049b0:	4b15      	ldr	r3, [pc, #84]	; (8004a08 <MX_USART2_UART_Init+0x94>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80049b6:	4b14      	ldr	r3, [pc, #80]	; (8004a08 <MX_USART2_UART_Init+0x94>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80049bc:	4b12      	ldr	r3, [pc, #72]	; (8004a08 <MX_USART2_UART_Init+0x94>)
 80049be:	0018      	movs	r0, r3
 80049c0:	f008 f860 	bl	800ca84 <HAL_UART_Init>
 80049c4:	1e03      	subs	r3, r0, #0
 80049c6:	d001      	beq.n	80049cc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80049c8:	f003 fa42 	bl	8007e50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80049cc:	4b0e      	ldr	r3, [pc, #56]	; (8004a08 <MX_USART2_UART_Init+0x94>)
 80049ce:	2100      	movs	r1, #0
 80049d0:	0018      	movs	r0, r3
 80049d2:	f009 fec9 	bl	800e768 <HAL_UARTEx_SetTxFifoThreshold>
 80049d6:	1e03      	subs	r3, r0, #0
 80049d8:	d001      	beq.n	80049de <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80049da:	f003 fa39 	bl	8007e50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80049de:	4b0a      	ldr	r3, [pc, #40]	; (8004a08 <MX_USART2_UART_Init+0x94>)
 80049e0:	2100      	movs	r1, #0
 80049e2:	0018      	movs	r0, r3
 80049e4:	f009 ff00 	bl	800e7e8 <HAL_UARTEx_SetRxFifoThreshold>
 80049e8:	1e03      	subs	r3, r0, #0
 80049ea:	d001      	beq.n	80049f0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80049ec:	f003 fa30 	bl	8007e50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80049f0:	4b05      	ldr	r3, [pc, #20]	; (8004a08 <MX_USART2_UART_Init+0x94>)
 80049f2:	0018      	movs	r0, r3
 80049f4:	f009 fe7e 	bl	800e6f4 <HAL_UARTEx_DisableFifoMode>
 80049f8:	1e03      	subs	r3, r0, #0
 80049fa:	d001      	beq.n	8004a00 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80049fc:	f003 fa28 	bl	8007e50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004a00:	46c0      	nop			; (mov r8, r8)
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	46c0      	nop			; (mov r8, r8)
 8004a08:	20000544 	.word	0x20000544
 8004a0c:	40004400 	.word	0x40004400

08004a10 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004a14:	4b16      	ldr	r3, [pc, #88]	; (8004a70 <MX_USART3_UART_Init+0x60>)
 8004a16:	4a17      	ldr	r2, [pc, #92]	; (8004a74 <MX_USART3_UART_Init+0x64>)
 8004a18:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004a1a:	4b15      	ldr	r3, [pc, #84]	; (8004a70 <MX_USART3_UART_Init+0x60>)
 8004a1c:	22e1      	movs	r2, #225	; 0xe1
 8004a1e:	0252      	lsls	r2, r2, #9
 8004a20:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004a22:	4b13      	ldr	r3, [pc, #76]	; (8004a70 <MX_USART3_UART_Init+0x60>)
 8004a24:	2200      	movs	r2, #0
 8004a26:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004a28:	4b11      	ldr	r3, [pc, #68]	; (8004a70 <MX_USART3_UART_Init+0x60>)
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004a2e:	4b10      	ldr	r3, [pc, #64]	; (8004a70 <MX_USART3_UART_Init+0x60>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004a34:	4b0e      	ldr	r3, [pc, #56]	; (8004a70 <MX_USART3_UART_Init+0x60>)
 8004a36:	220c      	movs	r2, #12
 8004a38:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a3a:	4b0d      	ldr	r3, [pc, #52]	; (8004a70 <MX_USART3_UART_Init+0x60>)
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a40:	4b0b      	ldr	r3, [pc, #44]	; (8004a70 <MX_USART3_UART_Init+0x60>)
 8004a42:	2200      	movs	r2, #0
 8004a44:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004a46:	4b0a      	ldr	r3, [pc, #40]	; (8004a70 <MX_USART3_UART_Init+0x60>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004a4c:	4b08      	ldr	r3, [pc, #32]	; (8004a70 <MX_USART3_UART_Init+0x60>)
 8004a4e:	2200      	movs	r2, #0
 8004a50:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004a52:	4b07      	ldr	r3, [pc, #28]	; (8004a70 <MX_USART3_UART_Init+0x60>)
 8004a54:	2200      	movs	r2, #0
 8004a56:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004a58:	4b05      	ldr	r3, [pc, #20]	; (8004a70 <MX_USART3_UART_Init+0x60>)
 8004a5a:	0018      	movs	r0, r3
 8004a5c:	f008 f812 	bl	800ca84 <HAL_UART_Init>
 8004a60:	1e03      	subs	r3, r0, #0
 8004a62:	d001      	beq.n	8004a68 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8004a64:	f003 f9f4 	bl	8007e50 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004a68:	46c0      	nop			; (mov r8, r8)
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	46c0      	nop			; (mov r8, r8)
 8004a70:	200005d8 	.word	0x200005d8
 8004a74:	40004800 	.word	0x40004800

08004a78 <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8004a7c:	4b16      	ldr	r3, [pc, #88]	; (8004ad8 <MX_USART4_UART_Init+0x60>)
 8004a7e:	4a17      	ldr	r2, [pc, #92]	; (8004adc <MX_USART4_UART_Init+0x64>)
 8004a80:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8004a82:	4b15      	ldr	r3, [pc, #84]	; (8004ad8 <MX_USART4_UART_Init+0x60>)
 8004a84:	22e1      	movs	r2, #225	; 0xe1
 8004a86:	0252      	lsls	r2, r2, #9
 8004a88:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004a8a:	4b13      	ldr	r3, [pc, #76]	; (8004ad8 <MX_USART4_UART_Init+0x60>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004a90:	4b11      	ldr	r3, [pc, #68]	; (8004ad8 <MX_USART4_UART_Init+0x60>)
 8004a92:	2200      	movs	r2, #0
 8004a94:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004a96:	4b10      	ldr	r3, [pc, #64]	; (8004ad8 <MX_USART4_UART_Init+0x60>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004a9c:	4b0e      	ldr	r3, [pc, #56]	; (8004ad8 <MX_USART4_UART_Init+0x60>)
 8004a9e:	220c      	movs	r2, #12
 8004aa0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004aa2:	4b0d      	ldr	r3, [pc, #52]	; (8004ad8 <MX_USART4_UART_Init+0x60>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004aa8:	4b0b      	ldr	r3, [pc, #44]	; (8004ad8 <MX_USART4_UART_Init+0x60>)
 8004aaa:	2200      	movs	r2, #0
 8004aac:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004aae:	4b0a      	ldr	r3, [pc, #40]	; (8004ad8 <MX_USART4_UART_Init+0x60>)
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004ab4:	4b08      	ldr	r3, [pc, #32]	; (8004ad8 <MX_USART4_UART_Init+0x60>)
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004aba:	4b07      	ldr	r3, [pc, #28]	; (8004ad8 <MX_USART4_UART_Init+0x60>)
 8004abc:	2200      	movs	r2, #0
 8004abe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004ac0:	4b05      	ldr	r3, [pc, #20]	; (8004ad8 <MX_USART4_UART_Init+0x60>)
 8004ac2:	0018      	movs	r0, r3
 8004ac4:	f007 ffde 	bl	800ca84 <HAL_UART_Init>
 8004ac8:	1e03      	subs	r3, r0, #0
 8004aca:	d001      	beq.n	8004ad0 <MX_USART4_UART_Init+0x58>
  {
    Error_Handler();
 8004acc:	f003 f9c0 	bl	8007e50 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8004ad0:	46c0      	nop			; (mov r8, r8)
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	46c0      	nop			; (mov r8, r8)
 8004ad8:	2000066c 	.word	0x2000066c
 8004adc:	40004c00 	.word	0x40004c00

08004ae0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004ae6:	4b0c      	ldr	r3, [pc, #48]	; (8004b18 <MX_DMA_Init+0x38>)
 8004ae8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004aea:	4b0b      	ldr	r3, [pc, #44]	; (8004b18 <MX_DMA_Init+0x38>)
 8004aec:	2101      	movs	r1, #1
 8004aee:	430a      	orrs	r2, r1
 8004af0:	639a      	str	r2, [r3, #56]	; 0x38
 8004af2:	4b09      	ldr	r3, [pc, #36]	; (8004b18 <MX_DMA_Init+0x38>)
 8004af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af6:	2201      	movs	r2, #1
 8004af8:	4013      	ands	r3, r2
 8004afa:	607b      	str	r3, [r7, #4]
 8004afc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 8004afe:	2200      	movs	r2, #0
 8004b00:	2103      	movs	r1, #3
 8004b02:	2009      	movs	r0, #9
 8004b04:	f004 fc6a 	bl	80093dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004b08:	2009      	movs	r0, #9
 8004b0a:	f004 fc7c 	bl	8009406 <HAL_NVIC_EnableIRQ>

}
 8004b0e:	46c0      	nop			; (mov r8, r8)
 8004b10:	46bd      	mov	sp, r7
 8004b12:	b002      	add	sp, #8
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	46c0      	nop			; (mov r8, r8)
 8004b18:	40021000 	.word	0x40021000

08004b1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004b1c:	b590      	push	{r4, r7, lr}
 8004b1e:	b08b      	sub	sp, #44	; 0x2c
 8004b20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b22:	2414      	movs	r4, #20
 8004b24:	193b      	adds	r3, r7, r4
 8004b26:	0018      	movs	r0, r3
 8004b28:	2314      	movs	r3, #20
 8004b2a:	001a      	movs	r2, r3
 8004b2c:	2100      	movs	r1, #0
 8004b2e:	f009 ff5a 	bl	800e9e6 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004b32:	4b60      	ldr	r3, [pc, #384]	; (8004cb4 <MX_GPIO_Init+0x198>)
 8004b34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b36:	4b5f      	ldr	r3, [pc, #380]	; (8004cb4 <MX_GPIO_Init+0x198>)
 8004b38:	2120      	movs	r1, #32
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	635a      	str	r2, [r3, #52]	; 0x34
 8004b3e:	4b5d      	ldr	r3, [pc, #372]	; (8004cb4 <MX_GPIO_Init+0x198>)
 8004b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b42:	2220      	movs	r2, #32
 8004b44:	4013      	ands	r3, r2
 8004b46:	613b      	str	r3, [r7, #16]
 8004b48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b4a:	4b5a      	ldr	r3, [pc, #360]	; (8004cb4 <MX_GPIO_Init+0x198>)
 8004b4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b4e:	4b59      	ldr	r3, [pc, #356]	; (8004cb4 <MX_GPIO_Init+0x198>)
 8004b50:	2101      	movs	r1, #1
 8004b52:	430a      	orrs	r2, r1
 8004b54:	635a      	str	r2, [r3, #52]	; 0x34
 8004b56:	4b57      	ldr	r3, [pc, #348]	; (8004cb4 <MX_GPIO_Init+0x198>)
 8004b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	60fb      	str	r3, [r7, #12]
 8004b60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b62:	4b54      	ldr	r3, [pc, #336]	; (8004cb4 <MX_GPIO_Init+0x198>)
 8004b64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b66:	4b53      	ldr	r3, [pc, #332]	; (8004cb4 <MX_GPIO_Init+0x198>)
 8004b68:	2102      	movs	r1, #2
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	635a      	str	r2, [r3, #52]	; 0x34
 8004b6e:	4b51      	ldr	r3, [pc, #324]	; (8004cb4 <MX_GPIO_Init+0x198>)
 8004b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b72:	2202      	movs	r2, #2
 8004b74:	4013      	ands	r3, r2
 8004b76:	60bb      	str	r3, [r7, #8]
 8004b78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b7a:	4b4e      	ldr	r3, [pc, #312]	; (8004cb4 <MX_GPIO_Init+0x198>)
 8004b7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b7e:	4b4d      	ldr	r3, [pc, #308]	; (8004cb4 <MX_GPIO_Init+0x198>)
 8004b80:	2104      	movs	r1, #4
 8004b82:	430a      	orrs	r2, r1
 8004b84:	635a      	str	r2, [r3, #52]	; 0x34
 8004b86:	4b4b      	ldr	r3, [pc, #300]	; (8004cb4 <MX_GPIO_Init+0x198>)
 8004b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b8a:	2204      	movs	r2, #4
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	607b      	str	r3, [r7, #4]
 8004b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004b92:	4b48      	ldr	r3, [pc, #288]	; (8004cb4 <MX_GPIO_Init+0x198>)
 8004b94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b96:	4b47      	ldr	r3, [pc, #284]	; (8004cb4 <MX_GPIO_Init+0x198>)
 8004b98:	2108      	movs	r1, #8
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	635a      	str	r2, [r3, #52]	; 0x34
 8004b9e:	4b45      	ldr	r3, [pc, #276]	; (8004cb4 <MX_GPIO_Init+0x198>)
 8004ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ba2:	2208      	movs	r2, #8
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	603b      	str	r3, [r7, #0]
 8004ba8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WD_GPIO_Port, WD_Pin, GPIO_PIN_RESET);
 8004baa:	23a0      	movs	r3, #160	; 0xa0
 8004bac:	05db      	lsls	r3, r3, #23
 8004bae:	2200      	movs	r2, #0
 8004bb0:	2110      	movs	r1, #16
 8004bb2:	0018      	movs	r0, r3
 8004bb4:	f005 f8c6 	bl	8009d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CTS_Pin|DCD_Pin|LED_1_Pin|LED_2_Pin
 8004bb8:	493f      	ldr	r1, [pc, #252]	; (8004cb8 <MX_GPIO_Init+0x19c>)
 8004bba:	4b40      	ldr	r3, [pc, #256]	; (8004cbc <MX_GPIO_Init+0x1a0>)
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	0018      	movs	r0, r3
 8004bc0:	f005 f8c0 	bl	8009d44 <HAL_GPIO_WritePin>
                          |PWR_KEY_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUTPUT_1_GPIO_Port, OUTPUT_1_Pin, GPIO_PIN_RESET);
 8004bc4:	4b3e      	ldr	r3, [pc, #248]	; (8004cc0 <MX_GPIO_Init+0x1a4>)
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	2140      	movs	r1, #64	; 0x40
 8004bca:	0018      	movs	r0, r3
 8004bcc:	f005 f8ba 	bl	8009d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Q_CTRL_Pin|FLASH_CS_Pin, GPIO_PIN_RESET);
 8004bd0:	4b3c      	ldr	r3, [pc, #240]	; (8004cc4 <MX_GPIO_Init+0x1a8>)
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	210c      	movs	r1, #12
 8004bd6:	0018      	movs	r0, r3
 8004bd8:	f005 f8b4 	bl	8009d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : WD_Pin */
  GPIO_InitStruct.Pin = WD_Pin;
 8004bdc:	193b      	adds	r3, r7, r4
 8004bde:	2210      	movs	r2, #16
 8004be0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004be2:	193b      	adds	r3, r7, r4
 8004be4:	2201      	movs	r2, #1
 8004be6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004be8:	193b      	adds	r3, r7, r4
 8004bea:	2200      	movs	r2, #0
 8004bec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bee:	193b      	adds	r3, r7, r4
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(WD_GPIO_Port, &GPIO_InitStruct);
 8004bf4:	193a      	adds	r2, r7, r4
 8004bf6:	23a0      	movs	r3, #160	; 0xa0
 8004bf8:	05db      	lsls	r3, r3, #23
 8004bfa:	0011      	movs	r1, r2
 8004bfc:	0018      	movs	r0, r3
 8004bfe:	f004 ff3d 	bl	8009a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : RTS_Pin DTR_Pin */
  GPIO_InitStruct.Pin = RTS_Pin|DTR_Pin;
 8004c02:	193b      	adds	r3, r7, r4
 8004c04:	4a30      	ldr	r2, [pc, #192]	; (8004cc8 <MX_GPIO_Init+0x1ac>)
 8004c06:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c08:	193b      	adds	r3, r7, r4
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c0e:	193b      	adds	r3, r7, r4
 8004c10:	2200      	movs	r2, #0
 8004c12:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c14:	193b      	adds	r3, r7, r4
 8004c16:	4a29      	ldr	r2, [pc, #164]	; (8004cbc <MX_GPIO_Init+0x1a0>)
 8004c18:	0019      	movs	r1, r3
 8004c1a:	0010      	movs	r0, r2
 8004c1c:	f004 ff2e 	bl	8009a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : CTS_Pin DCD_Pin LED_1_Pin LED_2_Pin
                           PWR_KEY_Pin */
  GPIO_InitStruct.Pin = CTS_Pin|DCD_Pin|LED_1_Pin|LED_2_Pin
 8004c20:	193b      	adds	r3, r7, r4
 8004c22:	4a25      	ldr	r2, [pc, #148]	; (8004cb8 <MX_GPIO_Init+0x19c>)
 8004c24:	601a      	str	r2, [r3, #0]
                          |PWR_KEY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c26:	193b      	adds	r3, r7, r4
 8004c28:	2201      	movs	r2, #1
 8004c2a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c2c:	193b      	adds	r3, r7, r4
 8004c2e:	2200      	movs	r2, #0
 8004c30:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c32:	193b      	adds	r3, r7, r4
 8004c34:	2200      	movs	r2, #0
 8004c36:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c38:	193b      	adds	r3, r7, r4
 8004c3a:	4a20      	ldr	r2, [pc, #128]	; (8004cbc <MX_GPIO_Init+0x1a0>)
 8004c3c:	0019      	movs	r1, r3
 8004c3e:	0010      	movs	r0, r2
 8004c40:	f004 ff1c 	bl	8009a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : OUTPUT_1_Pin */
  GPIO_InitStruct.Pin = OUTPUT_1_Pin;
 8004c44:	193b      	adds	r3, r7, r4
 8004c46:	2240      	movs	r2, #64	; 0x40
 8004c48:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c4a:	193b      	adds	r3, r7, r4
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c50:	193b      	adds	r3, r7, r4
 8004c52:	2200      	movs	r2, #0
 8004c54:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c56:	193b      	adds	r3, r7, r4
 8004c58:	2200      	movs	r2, #0
 8004c5a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(OUTPUT_1_GPIO_Port, &GPIO_InitStruct);
 8004c5c:	193b      	adds	r3, r7, r4
 8004c5e:	4a18      	ldr	r2, [pc, #96]	; (8004cc0 <MX_GPIO_Init+0x1a4>)
 8004c60:	0019      	movs	r1, r3
 8004c62:	0010      	movs	r0, r2
 8004c64:	f004 ff0a 	bl	8009a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : INPUT_1_Pin */
  GPIO_InitStruct.Pin = INPUT_1_Pin;
 8004c68:	193b      	adds	r3, r7, r4
 8004c6a:	2280      	movs	r2, #128	; 0x80
 8004c6c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c6e:	193b      	adds	r3, r7, r4
 8004c70:	2200      	movs	r2, #0
 8004c72:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c74:	193b      	adds	r3, r7, r4
 8004c76:	2200      	movs	r2, #0
 8004c78:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(INPUT_1_GPIO_Port, &GPIO_InitStruct);
 8004c7a:	193b      	adds	r3, r7, r4
 8004c7c:	4a10      	ldr	r2, [pc, #64]	; (8004cc0 <MX_GPIO_Init+0x1a4>)
 8004c7e:	0019      	movs	r1, r3
 8004c80:	0010      	movs	r0, r2
 8004c82:	f004 fefb 	bl	8009a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : Q_CTRL_Pin FLASH_CS_Pin */
  GPIO_InitStruct.Pin = Q_CTRL_Pin|FLASH_CS_Pin;
 8004c86:	0021      	movs	r1, r4
 8004c88:	187b      	adds	r3, r7, r1
 8004c8a:	220c      	movs	r2, #12
 8004c8c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c8e:	187b      	adds	r3, r7, r1
 8004c90:	2201      	movs	r2, #1
 8004c92:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c94:	187b      	adds	r3, r7, r1
 8004c96:	2200      	movs	r2, #0
 8004c98:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c9a:	187b      	adds	r3, r7, r1
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004ca0:	187b      	adds	r3, r7, r1
 8004ca2:	4a08      	ldr	r2, [pc, #32]	; (8004cc4 <MX_GPIO_Init+0x1a8>)
 8004ca4:	0019      	movs	r1, r3
 8004ca6:	0010      	movs	r0, r2
 8004ca8:	f004 fee8 	bl	8009a7c <HAL_GPIO_Init>

}
 8004cac:	46c0      	nop			; (mov r8, r8)
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	b00b      	add	sp, #44	; 0x2c
 8004cb2:	bd90      	pop	{r4, r7, pc}
 8004cb4:	40021000 	.word	0x40021000
 8004cb8:	00007804 	.word	0x00007804
 8004cbc:	50000400 	.word	0x50000400
 8004cc0:	50000800 	.word	0x50000800
 8004cc4:	50000c00 	.word	0x50000c00
 8004cc8:	00000402 	.word	0x00000402

08004ccc <HAL_UART_ErrorCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b082      	sub	sp, #8
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a0d      	ldr	r2, [pc, #52]	; (8004d10 <HAL_UART_ErrorCallback+0x44>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d107      	bne.n	8004cee <HAL_UART_ErrorCallback+0x22>
		MX_USART2_UART_Init();
 8004cde:	f7ff fe49 	bl	8004974 <MX_USART2_UART_Init>
		HAL_UART_Receive_IT(&GNSS_PORT, GNSS_BUFFER, 1);
 8004ce2:	490c      	ldr	r1, [pc, #48]	; (8004d14 <HAL_UART_ErrorCallback+0x48>)
 8004ce4:	4b0c      	ldr	r3, [pc, #48]	; (8004d18 <HAL_UART_ErrorCallback+0x4c>)
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	0018      	movs	r0, r3
 8004cea:	f007 ffbd 	bl	800cc68 <HAL_UART_Receive_IT>
	}
	if (huart->Instance == USART1) {
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a0a      	ldr	r2, [pc, #40]	; (8004d1c <HAL_UART_ErrorCallback+0x50>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d107      	bne.n	8004d08 <HAL_UART_ErrorCallback+0x3c>
		MX_USART1_UART_Init();
 8004cf8:	f7ff fdee 	bl	80048d8 <MX_USART1_UART_Init>
		HAL_UART_Receive_IT(&AT_PORT, AT_BUFFER, 1);
 8004cfc:	4908      	ldr	r1, [pc, #32]	; (8004d20 <HAL_UART_ErrorCallback+0x54>)
 8004cfe:	4b09      	ldr	r3, [pc, #36]	; (8004d24 <HAL_UART_ErrorCallback+0x58>)
 8004d00:	2201      	movs	r2, #1
 8004d02:	0018      	movs	r0, r3
 8004d04:	f007 ffb0 	bl	800cc68 <HAL_UART_Receive_IT>
	}
}
 8004d08:	46c0      	nop			; (mov r8, r8)
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	b002      	add	sp, #8
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	40004400 	.word	0x40004400
 8004d14:	20000720 	.word	0x20000720
 8004d18:	20000544 	.word	0x20000544
 8004d1c:	40013800 	.word	0x40013800
 8004d20:	2000071c 	.word	0x2000071c
 8004d24:	200004b0 	.word	0x200004b0

08004d28 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8004d28:	b590      	push	{r4, r7, lr}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]

	//------------------------------------------------------------------
	if (huart == &GNSS_PORT) {
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	4b5a      	ldr	r3, [pc, #360]	; (8004e9c <HAL_UART_RxCpltCallback+0x174>)
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d152      	bne.n	8004dde <HAL_UART_RxCpltCallback+0xb6>
		// Incoming data from GNSS, receiving single byte
		HAL_UART_Receive_IT(&GNSS_PORT, GNSS_BUFFER, 1);
 8004d38:	4959      	ldr	r1, [pc, #356]	; (8004ea0 <HAL_UART_RxCpltCallback+0x178>)
 8004d3a:	4b58      	ldr	r3, [pc, #352]	; (8004e9c <HAL_UART_RxCpltCallback+0x174>)
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	0018      	movs	r0, r3
 8004d40:	f007 ff92 	bl	800cc68 <HAL_UART_Receive_IT>
		if (isGNSSTimStart == 0) {
 8004d44:	4b57      	ldr	r3, [pc, #348]	; (8004ea4 <HAL_UART_RxCpltCallback+0x17c>)
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d106      	bne.n	8004d5a <HAL_UART_RxCpltCallback+0x32>
			isGNSSTimStart = 1;
 8004d4c:	4b55      	ldr	r3, [pc, #340]	; (8004ea4 <HAL_UART_RxCpltCallback+0x17c>)
 8004d4e:	2201      	movs	r2, #1
 8004d50:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim17);
 8004d52:	4b55      	ldr	r3, [pc, #340]	; (8004ea8 <HAL_UART_RxCpltCallback+0x180>)
 8004d54:	0018      	movs	r0, r3
 8004d56:	f006 fedd 	bl	800bb14 <HAL_TIM_Base_Start_IT>
		}
		TIM17->CNT &= 0x0;
 8004d5a:	4b54      	ldr	r3, [pc, #336]	; (8004eac <HAL_UART_RxCpltCallback+0x184>)
 8004d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5e:	4b53      	ldr	r3, [pc, #332]	; (8004eac <HAL_UART_RxCpltCallback+0x184>)
 8004d60:	2200      	movs	r2, #0
 8004d62:	625a      	str	r2, [r3, #36]	; 0x24
		if(GNSS_BUFFER[0] != NULL){
 8004d64:	4b4e      	ldr	r3, [pc, #312]	; (8004ea0 <HAL_UART_RxCpltCallback+0x178>)
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d038      	beq.n	8004dde <HAL_UART_RxCpltCallback+0xb6>
			nmeaResponse[nmeaLC][nmeaCC] = GNSS_BUFFER[0];
 8004d6c:	4b50      	ldr	r3, [pc, #320]	; (8004eb0 <HAL_UART_RxCpltCallback+0x188>)
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	0019      	movs	r1, r3
 8004d74:	4b4f      	ldr	r3, [pc, #316]	; (8004eb4 <HAL_UART_RxCpltCallback+0x18c>)
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	0018      	movs	r0, r3
 8004d7c:	4b48      	ldr	r3, [pc, #288]	; (8004ea0 <HAL_UART_RxCpltCallback+0x178>)
 8004d7e:	781c      	ldrb	r4, [r3, #0]
 8004d80:	4a4d      	ldr	r2, [pc, #308]	; (8004eb8 <HAL_UART_RxCpltCallback+0x190>)
 8004d82:	000b      	movs	r3, r1
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	185b      	adds	r3, r3, r1
 8004d88:	0119      	lsls	r1, r3, #4
 8004d8a:	185b      	adds	r3, r3, r1
 8004d8c:	18d3      	adds	r3, r2, r3
 8004d8e:	1c22      	adds	r2, r4, #0
 8004d90:	541a      	strb	r2, [r3, r0]
			if (GNSS_BUFFER[0] == '\n') {
 8004d92:	4b43      	ldr	r3, [pc, #268]	; (8004ea0 <HAL_UART_RxCpltCallback+0x178>)
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	2b0a      	cmp	r3, #10
 8004d98:	d112      	bne.n	8004dc0 <HAL_UART_RxCpltCallback+0x98>
				nmeaLC++;
 8004d9a:	4b45      	ldr	r3, [pc, #276]	; (8004eb0 <HAL_UART_RxCpltCallback+0x188>)
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	3301      	adds	r3, #1
 8004da2:	b2da      	uxtb	r2, r3
 8004da4:	4b42      	ldr	r3, [pc, #264]	; (8004eb0 <HAL_UART_RxCpltCallback+0x188>)
 8004da6:	701a      	strb	r2, [r3, #0]
				if (nmeaLC > NMEA_MAX_LINES - 1) {
 8004da8:	4b41      	ldr	r3, [pc, #260]	; (8004eb0 <HAL_UART_RxCpltCallback+0x188>)
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	2b03      	cmp	r3, #3
 8004db0:	d902      	bls.n	8004db8 <HAL_UART_RxCpltCallback+0x90>
					nmeaLC = NMEA_MAX_LINES -1;
 8004db2:	4b3f      	ldr	r3, [pc, #252]	; (8004eb0 <HAL_UART_RxCpltCallback+0x188>)
 8004db4:	2203      	movs	r2, #3
 8004db6:	701a      	strb	r2, [r3, #0]
				}
				nmeaCC = 0;
 8004db8:	4b3e      	ldr	r3, [pc, #248]	; (8004eb4 <HAL_UART_RxCpltCallback+0x18c>)
 8004dba:	2200      	movs	r2, #0
 8004dbc:	701a      	strb	r2, [r3, #0]
 8004dbe:	e00e      	b.n	8004dde <HAL_UART_RxCpltCallback+0xb6>
			} else {
				nmeaCC++;
 8004dc0:	4b3c      	ldr	r3, [pc, #240]	; (8004eb4 <HAL_UART_RxCpltCallback+0x18c>)
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	b2da      	uxtb	r2, r3
 8004dca:	4b3a      	ldr	r3, [pc, #232]	; (8004eb4 <HAL_UART_RxCpltCallback+0x18c>)
 8004dcc:	701a      	strb	r2, [r3, #0]
				if (nmeaCC > NMEA_MAX_CHARS - 1) {
 8004dce:	4b39      	ldr	r3, [pc, #228]	; (8004eb4 <HAL_UART_RxCpltCallback+0x18c>)
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	2b54      	cmp	r3, #84	; 0x54
 8004dd6:	d902      	bls.n	8004dde <HAL_UART_RxCpltCallback+0xb6>
					nmeaCC = 0;
 8004dd8:	4b36      	ldr	r3, [pc, #216]	; (8004eb4 <HAL_UART_RxCpltCallback+0x18c>)
 8004dda:	2200      	movs	r2, #0
 8004ddc:	701a      	strb	r2, [r3, #0]

		}
	}
	//------------------------------------------------------------------

	if (huart == &AT_PORT) {
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	4b36      	ldr	r3, [pc, #216]	; (8004ebc <HAL_UART_RxCpltCallback+0x194>)
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d155      	bne.n	8004e92 <HAL_UART_RxCpltCallback+0x16a>
		recResponse = 1;
 8004de6:	4b36      	ldr	r3, [pc, #216]	; (8004ec0 <HAL_UART_RxCpltCallback+0x198>)
 8004de8:	2201      	movs	r2, #1
 8004dea:	701a      	strb	r2, [r3, #0]
		if (isStart == 0) {
 8004dec:	4b35      	ldr	r3, [pc, #212]	; (8004ec4 <HAL_UART_RxCpltCallback+0x19c>)
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d10b      	bne.n	8004e0e <HAL_UART_RxCpltCallback+0xe6>
			isStart = 1;
 8004df6:	4b33      	ldr	r3, [pc, #204]	; (8004ec4 <HAL_UART_RxCpltCallback+0x19c>)
 8004df8:	2201      	movs	r2, #1
 8004dfa:	701a      	strb	r2, [r3, #0]
			FIX_TIMER_TRIGGER(&htim16);
 8004dfc:	4b32      	ldr	r3, [pc, #200]	; (8004ec8 <HAL_UART_RxCpltCallback+0x1a0>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2202      	movs	r2, #2
 8004e02:	4252      	negs	r2, r2
 8004e04:	611a      	str	r2, [r3, #16]
			HAL_TIM_Base_Start_IT(&htim16);
 8004e06:	4b30      	ldr	r3, [pc, #192]	; (8004ec8 <HAL_UART_RxCpltCallback+0x1a0>)
 8004e08:	0018      	movs	r0, r3
 8004e0a:	f006 fe83 	bl	800bb14 <HAL_TIM_Base_Start_IT>
		}
		TIM16->CNT &= 0x0;
 8004e0e:	4b2f      	ldr	r3, [pc, #188]	; (8004ecc <HAL_UART_RxCpltCallback+0x1a4>)
 8004e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e12:	4b2e      	ldr	r3, [pc, #184]	; (8004ecc <HAL_UART_RxCpltCallback+0x1a4>)
 8004e14:	2200      	movs	r2, #0
 8004e16:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_UART_Receive_IT(&AT_PORT, AT_BUFFER, 1);
 8004e18:	492d      	ldr	r1, [pc, #180]	; (8004ed0 <HAL_UART_RxCpltCallback+0x1a8>)
 8004e1a:	4b28      	ldr	r3, [pc, #160]	; (8004ebc <HAL_UART_RxCpltCallback+0x194>)
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	0018      	movs	r0, r3
 8004e20:	f007 ff22 	bl	800cc68 <HAL_UART_Receive_IT>
		if (AT_BUFFER[0] == '\n') {
 8004e24:	4b2a      	ldr	r3, [pc, #168]	; (8004ed0 <HAL_UART_RxCpltCallback+0x1a8>)
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	2b0a      	cmp	r3, #10
 8004e2a:	d113      	bne.n	8004e54 <HAL_UART_RxCpltCallback+0x12c>
			if (lineCount > RESPONSE_MAX_LINE - 2) {
 8004e2c:	4b29      	ldr	r3, [pc, #164]	; (8004ed4 <HAL_UART_RxCpltCallback+0x1ac>)
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	2b04      	cmp	r3, #4
 8004e34:	d903      	bls.n	8004e3e <HAL_UART_RxCpltCallback+0x116>
				lineCount = 0;
 8004e36:	4b27      	ldr	r3, [pc, #156]	; (8004ed4 <HAL_UART_RxCpltCallback+0x1ac>)
 8004e38:	2200      	movs	r2, #0
 8004e3a:	701a      	strb	r2, [r3, #0]
 8004e3c:	e006      	b.n	8004e4c <HAL_UART_RxCpltCallback+0x124>
			} else {
				lineCount++;
 8004e3e:	4b25      	ldr	r3, [pc, #148]	; (8004ed4 <HAL_UART_RxCpltCallback+0x1ac>)
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	3301      	adds	r3, #1
 8004e46:	b2da      	uxtb	r2, r3
 8004e48:	4b22      	ldr	r3, [pc, #136]	; (8004ed4 <HAL_UART_RxCpltCallback+0x1ac>)
 8004e4a:	701a      	strb	r2, [r3, #0]
			}
			charCount = 0;
 8004e4c:	4b22      	ldr	r3, [pc, #136]	; (8004ed8 <HAL_UART_RxCpltCallback+0x1b0>)
 8004e4e:	2200      	movs	r2, #0
 8004e50:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	//-----------------------------------------------------------------------------

}
 8004e52:	e01e      	b.n	8004e92 <HAL_UART_RxCpltCallback+0x16a>
			responseBuffer[lineCount][charCount] = AT_BUFFER[0];
 8004e54:	4b1f      	ldr	r3, [pc, #124]	; (8004ed4 <HAL_UART_RxCpltCallback+0x1ac>)
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	001c      	movs	r4, r3
 8004e5c:	4b1e      	ldr	r3, [pc, #120]	; (8004ed8 <HAL_UART_RxCpltCallback+0x1b0>)
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	0019      	movs	r1, r3
 8004e64:	4b1a      	ldr	r3, [pc, #104]	; (8004ed0 <HAL_UART_RxCpltCallback+0x1a8>)
 8004e66:	7818      	ldrb	r0, [r3, #0]
 8004e68:	4a1c      	ldr	r2, [pc, #112]	; (8004edc <HAL_UART_RxCpltCallback+0x1b4>)
 8004e6a:	2332      	movs	r3, #50	; 0x32
 8004e6c:	4363      	muls	r3, r4
 8004e6e:	18d3      	adds	r3, r2, r3
 8004e70:	1c02      	adds	r2, r0, #0
 8004e72:	545a      	strb	r2, [r3, r1]
			charCount++;
 8004e74:	4b18      	ldr	r3, [pc, #96]	; (8004ed8 <HAL_UART_RxCpltCallback+0x1b0>)
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	b2da      	uxtb	r2, r3
 8004e7e:	4b16      	ldr	r3, [pc, #88]	; (8004ed8 <HAL_UART_RxCpltCallback+0x1b0>)
 8004e80:	701a      	strb	r2, [r3, #0]
			if (lineCount > RESPONSE_MAX_CHAR - 2) {
 8004e82:	4b14      	ldr	r3, [pc, #80]	; (8004ed4 <HAL_UART_RxCpltCallback+0x1ac>)
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	2b30      	cmp	r3, #48	; 0x30
 8004e8a:	d902      	bls.n	8004e92 <HAL_UART_RxCpltCallback+0x16a>
				charCount = 0;
 8004e8c:	4b12      	ldr	r3, [pc, #72]	; (8004ed8 <HAL_UART_RxCpltCallback+0x1b0>)
 8004e8e:	2200      	movs	r2, #0
 8004e90:	701a      	strb	r2, [r3, #0]
}
 8004e92:	46c0      	nop			; (mov r8, r8)
 8004e94:	46bd      	mov	sp, r7
 8004e96:	b003      	add	sp, #12
 8004e98:	bd90      	pop	{r4, r7, pc}
 8004e9a:	46c0      	nop			; (mov r8, r8)
 8004e9c:	20000544 	.word	0x20000544
 8004ea0:	20000720 	.word	0x20000720
 8004ea4:	2000085a 	.word	0x2000085a
 8004ea8:	20000408 	.word	0x20000408
 8004eac:	40014800 	.word	0x40014800
 8004eb0:	20000852 	.word	0x20000852
 8004eb4:	20000853 	.word	0x20000853
 8004eb8:	200008a0 	.word	0x200008a0
 8004ebc:	200004b0 	.word	0x200004b0
 8004ec0:	2000085d 	.word	0x2000085d
 8004ec4:	20000854 	.word	0x20000854
 8004ec8:	200003bc 	.word	0x200003bc
 8004ecc:	40014400 	.word	0x40014400
 8004ed0:	2000071c 	.word	0x2000071c
 8004ed4:	20000850 	.word	0x20000850
 8004ed8:	20000851 	.word	0x20000851
 8004edc:	20000724 	.word	0x20000724

08004ee0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ee2:	46c6      	mov	lr, r8
 8004ee4:	b500      	push	{lr}
 8004ee6:	b0ce      	sub	sp, #312	; 0x138
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	61f8      	str	r0, [r7, #28]

	if (htim == &htim14) {
 8004eec:	69fa      	ldr	r2, [r7, #28]
 8004eee:	4b8f      	ldr	r3, [pc, #572]	; (800512c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d10c      	bne.n	8004f0e <HAL_TIM_PeriodElapsedCallback+0x2e>
		HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 8004ef4:	2380      	movs	r3, #128	; 0x80
 8004ef6:	015b      	lsls	r3, r3, #5
 8004ef8:	4a8d      	ldr	r2, [pc, #564]	; (8005130 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8004efa:	0019      	movs	r1, r3
 8004efc:	0010      	movs	r0, r2
 8004efe:	f004 ff3e 	bl	8009d7e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(WD_GPIO_Port, WD_Pin);
 8004f02:	23a0      	movs	r3, #160	; 0xa0
 8004f04:	05db      	lsls	r3, r3, #23
 8004f06:	2110      	movs	r1, #16
 8004f08:	0018      	movs	r0, r3
 8004f0a:	f004 ff38 	bl	8009d7e <HAL_GPIO_TogglePin>
	}
	if (htim == &htim16) {
 8004f0e:	69fa      	ldr	r2, [r7, #28]
 8004f10:	4b88      	ldr	r3, [pc, #544]	; (8005134 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d001      	beq.n	8004f1a <HAL_TIM_PeriodElapsedCallback+0x3a>
 8004f16:	f001 f977 	bl	8006208 <HAL_TIM_PeriodElapsedCallback+0x1328>
		char tResponse = '0';
 8004f1a:	2320      	movs	r3, #32
 8004f1c:	33ff      	adds	r3, #255	; 0xff
 8004f1e:	2018      	movs	r0, #24
 8004f20:	181b      	adds	r3, r3, r0
 8004f22:	19db      	adds	r3, r3, r7
 8004f24:	2230      	movs	r2, #48	; 0x30
 8004f26:	701a      	strb	r2, [r3, #0]
		//todo
		//---- server response check
		if (responseBuffer[0][0] == 0x78 && responseBuffer[0][1] == 0x78) {
 8004f28:	4b83      	ldr	r3, [pc, #524]	; (8005138 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	2b78      	cmp	r3, #120	; 0x78
 8004f2e:	d000      	beq.n	8004f32 <HAL_TIM_PeriodElapsedCallback+0x52>
 8004f30:	e0cc      	b.n	80050cc <HAL_TIM_PeriodElapsedCallback+0x1ec>
 8004f32:	4b81      	ldr	r3, [pc, #516]	; (8005138 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8004f34:	785b      	ldrb	r3, [r3, #1]
 8004f36:	2b78      	cmp	r3, #120	; 0x78
 8004f38:	d000      	beq.n	8004f3c <HAL_TIM_PeriodElapsedCallback+0x5c>
 8004f3a:	e0c7      	b.n	80050cc <HAL_TIM_PeriodElapsedCallback+0x1ec>
 8004f3c:	466b      	mov	r3, sp
 8004f3e:	4698      	mov	r8, r3
			// HAL_UART_Transmit(&huart4, "Res rec server",
			// sizeof("Res rec server"), 100);
			uint8_t c = responseBuffer[0][2];
 8004f40:	21f3      	movs	r1, #243	; 0xf3
 8004f42:	180b      	adds	r3, r1, r0
 8004f44:	19db      	adds	r3, r3, r7
 8004f46:	4a7c      	ldr	r2, [pc, #496]	; (8005138 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8004f48:	7892      	ldrb	r2, [r2, #2]
 8004f4a:	701a      	strb	r2, [r3, #0]
			uint8_t tempCrcData[c - 1];
 8004f4c:	180b      	adds	r3, r1, r0
 8004f4e:	19db      	adds	r3, r3, r7
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	3b01      	subs	r3, #1
 8004f54:	1e5a      	subs	r2, r3, #1
 8004f56:	21ec      	movs	r1, #236	; 0xec
 8004f58:	1809      	adds	r1, r1, r0
 8004f5a:	19c9      	adds	r1, r1, r7
 8004f5c:	600a      	str	r2, [r1, #0]
 8004f5e:	001a      	movs	r2, r3
 8004f60:	60ba      	str	r2, [r7, #8]
 8004f62:	2200      	movs	r2, #0
 8004f64:	60fa      	str	r2, [r7, #12]
 8004f66:	68b8      	ldr	r0, [r7, #8]
 8004f68:	68f9      	ldr	r1, [r7, #12]
 8004f6a:	0002      	movs	r2, r0
 8004f6c:	0f52      	lsrs	r2, r2, #29
 8004f6e:	000e      	movs	r6, r1
 8004f70:	00f6      	lsls	r6, r6, #3
 8004f72:	617e      	str	r6, [r7, #20]
 8004f74:	697e      	ldr	r6, [r7, #20]
 8004f76:	4316      	orrs	r6, r2
 8004f78:	617e      	str	r6, [r7, #20]
 8004f7a:	0002      	movs	r2, r0
 8004f7c:	00d2      	lsls	r2, r2, #3
 8004f7e:	613a      	str	r2, [r7, #16]
 8004f80:	001a      	movs	r2, r3
 8004f82:	603a      	str	r2, [r7, #0]
 8004f84:	2200      	movs	r2, #0
 8004f86:	607a      	str	r2, [r7, #4]
 8004f88:	6838      	ldr	r0, [r7, #0]
 8004f8a:	6879      	ldr	r1, [r7, #4]
 8004f8c:	0002      	movs	r2, r0
 8004f8e:	0f52      	lsrs	r2, r2, #29
 8004f90:	000e      	movs	r6, r1
 8004f92:	00f5      	lsls	r5, r6, #3
 8004f94:	4315      	orrs	r5, r2
 8004f96:	0002      	movs	r2, r0
 8004f98:	00d4      	lsls	r4, r2, #3
 8004f9a:	001a      	movs	r2, r3
 8004f9c:	3207      	adds	r2, #7
 8004f9e:	08d2      	lsrs	r2, r2, #3
 8004fa0:	00d2      	lsls	r2, r2, #3
 8004fa2:	4669      	mov	r1, sp
 8004fa4:	1a8a      	subs	r2, r1, r2
 8004fa6:	4695      	mov	sp, r2
 8004fa8:	466a      	mov	r2, sp
 8004faa:	3200      	adds	r2, #0
 8004fac:	21e8      	movs	r1, #232	; 0xe8
 8004fae:	2018      	movs	r0, #24
 8004fb0:	1809      	adds	r1, r1, r0
 8004fb2:	19c9      	adds	r1, r1, r7
 8004fb4:	600a      	str	r2, [r1, #0]
			uint16_t crcResult = 0;
 8004fb6:	22e6      	movs	r2, #230	; 0xe6
 8004fb8:	1812      	adds	r2, r2, r0
 8004fba:	19d2      	adds	r2, r2, r7
 8004fbc:	2100      	movs	r1, #0
 8004fbe:	8011      	strh	r1, [r2, #0]
			for (uint8_t i = 2; i < c + 1; i++) {
 8004fc0:	228f      	movs	r2, #143	; 0x8f
 8004fc2:	0052      	lsls	r2, r2, #1
 8004fc4:	1812      	adds	r2, r2, r0
 8004fc6:	19d2      	adds	r2, r2, r7
 8004fc8:	2102      	movs	r1, #2
 8004fca:	7011      	strb	r1, [r2, #0]
 8004fcc:	e017      	b.n	8004ffe <HAL_TIM_PeriodElapsedCallback+0x11e>
				tempCrcData[i - 2] = responseBuffer[0][i];
 8004fce:	248f      	movs	r4, #143	; 0x8f
 8004fd0:	0064      	lsls	r4, r4, #1
 8004fd2:	2518      	movs	r5, #24
 8004fd4:	1962      	adds	r2, r4, r5
 8004fd6:	19d2      	adds	r2, r2, r7
 8004fd8:	7811      	ldrb	r1, [r2, #0]
 8004fda:	1962      	adds	r2, r4, r5
 8004fdc:	19d2      	adds	r2, r2, r7
 8004fde:	7812      	ldrb	r2, [r2, #0]
 8004fe0:	3a02      	subs	r2, #2
 8004fe2:	4855      	ldr	r0, [pc, #340]	; (8005138 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8004fe4:	5c40      	ldrb	r0, [r0, r1]
 8004fe6:	21e8      	movs	r1, #232	; 0xe8
 8004fe8:	1949      	adds	r1, r1, r5
 8004fea:	19c9      	adds	r1, r1, r7
 8004fec:	6809      	ldr	r1, [r1, #0]
 8004fee:	5488      	strb	r0, [r1, r2]
			for (uint8_t i = 2; i < c + 1; i++) {
 8004ff0:	1962      	adds	r2, r4, r5
 8004ff2:	19d2      	adds	r2, r2, r7
 8004ff4:	7811      	ldrb	r1, [r2, #0]
 8004ff6:	1962      	adds	r2, r4, r5
 8004ff8:	19d2      	adds	r2, r2, r7
 8004ffa:	3101      	adds	r1, #1
 8004ffc:	7011      	strb	r1, [r2, #0]
 8004ffe:	25f3      	movs	r5, #243	; 0xf3
 8005000:	2018      	movs	r0, #24
 8005002:	182a      	adds	r2, r5, r0
 8005004:	19d1      	adds	r1, r2, r7
 8005006:	228f      	movs	r2, #143	; 0x8f
 8005008:	0052      	lsls	r2, r2, #1
 800500a:	1812      	adds	r2, r2, r0
 800500c:	19d2      	adds	r2, r2, r7
 800500e:	7809      	ldrb	r1, [r1, #0]
 8005010:	7812      	ldrb	r2, [r2, #0]
 8005012:	4291      	cmp	r1, r2
 8005014:	d2db      	bcs.n	8004fce <HAL_TIM_PeriodElapsedCallback+0xee>
			}
			uint8_t *tempPtr = tempCrcData;
 8005016:	22e8      	movs	r2, #232	; 0xe8
 8005018:	1812      	adds	r2, r2, r0
 800501a:	19d2      	adds	r2, r2, r7
 800501c:	6812      	ldr	r2, [r2, #0]
 800501e:	21e0      	movs	r1, #224	; 0xe0
 8005020:	0004      	movs	r4, r0
 8005022:	1808      	adds	r0, r1, r0
 8005024:	19c0      	adds	r0, r0, r7
 8005026:	6002      	str	r2, [r0, #0]
			crcResult = GetCrc16(tempPtr,
 8005028:	26e6      	movs	r6, #230	; 0xe6
 800502a:	0020      	movs	r0, r4
 800502c:	1832      	adds	r2, r6, r0
 800502e:	19d4      	adds	r4, r2, r7
 8005030:	180a      	adds	r2, r1, r0
 8005032:	19d2      	adds	r2, r2, r7
 8005034:	6812      	ldr	r2, [r2, #0]
 8005036:	0019      	movs	r1, r3
 8005038:	0010      	movs	r0, r2
 800503a:	f001 fc9b 	bl	8006974 <GetCrc16>
 800503e:	0003      	movs	r3, r0
 8005040:	8023      	strh	r3, [r4, #0]
					sizeof(tempCrcData) / sizeof(tempCrcData[0]));
			uint16_t checker = responseBuffer[0][c + 1];
 8005042:	2418      	movs	r4, #24
 8005044:	192b      	adds	r3, r5, r4
 8005046:	19db      	adds	r3, r3, r7
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	3301      	adds	r3, #1
 800504c:	4a3a      	ldr	r2, [pc, #232]	; (8005138 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800504e:	5cd2      	ldrb	r2, [r2, r3]
 8005050:	20de      	movs	r0, #222	; 0xde
 8005052:	1903      	adds	r3, r0, r4
 8005054:	19db      	adds	r3, r3, r7
 8005056:	801a      	strh	r2, [r3, #0]
			checker = checker << 8 | responseBuffer[0][c + 2];
 8005058:	1903      	adds	r3, r0, r4
 800505a:	19db      	adds	r3, r3, r7
 800505c:	881b      	ldrh	r3, [r3, #0]
 800505e:	021b      	lsls	r3, r3, #8
 8005060:	b21a      	sxth	r2, r3
 8005062:	192b      	adds	r3, r5, r4
 8005064:	19db      	adds	r3, r3, r7
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	3302      	adds	r3, #2
 800506a:	4933      	ldr	r1, [pc, #204]	; (8005138 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800506c:	5ccb      	ldrb	r3, [r1, r3]
 800506e:	b21b      	sxth	r3, r3
 8005070:	4313      	orrs	r3, r2
 8005072:	b21a      	sxth	r2, r3
 8005074:	1903      	adds	r3, r0, r4
 8005076:	19db      	adds	r3, r3, r7
 8005078:	801a      	strh	r2, [r3, #0]
			if (crcResult == checker) {
 800507a:	1933      	adds	r3, r6, r4
 800507c:	19da      	adds	r2, r3, r7
 800507e:	1903      	adds	r3, r0, r4
 8005080:	19db      	adds	r3, r3, r7
 8005082:	8812      	ldrh	r2, [r2, #0]
 8005084:	881b      	ldrh	r3, [r3, #0]
 8005086:	429a      	cmp	r2, r3
 8005088:	d10a      	bne.n	80050a0 <HAL_TIM_PeriodElapsedCallback+0x1c0>
				if (responseBuffer[0][3] == 1 || responseBuffer[0][3] == 0x13) {
 800508a:	4b2b      	ldr	r3, [pc, #172]	; (8005138 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800508c:	78db      	ldrb	r3, [r3, #3]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d003      	beq.n	800509a <HAL_TIM_PeriodElapsedCallback+0x1ba>
 8005092:	4b29      	ldr	r3, [pc, #164]	; (8005138 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8005094:	78db      	ldrb	r3, [r3, #3]
 8005096:	2b13      	cmp	r3, #19
 8005098:	d102      	bne.n	80050a0 <HAL_TIM_PeriodElapsedCallback+0x1c0>
					isLoggedIn = 1;
 800509a:	4b28      	ldr	r3, [pc, #160]	; (800513c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800509c:	2201      	movs	r2, #1
 800509e:	701a      	strb	r2, [r3, #0]
						// HAL_UART_Transmit(&huart4, "HB rec", sizeof("HB rec"),
						// 100);
					}
				}
			}
			HAL_TIM_Base_Stop_IT(&htim16);
 80050a0:	4b24      	ldr	r3, [pc, #144]	; (8005134 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80050a2:	0018      	movs	r0, r3
 80050a4:	f006 fd8c 	bl	800bbc0 <HAL_TIM_Base_Stop_IT>
			memset(responseBuffer, 0, sizeof(responseBuffer));
 80050a8:	2396      	movs	r3, #150	; 0x96
 80050aa:	005a      	lsls	r2, r3, #1
 80050ac:	4b22      	ldr	r3, [pc, #136]	; (8005138 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80050ae:	2100      	movs	r1, #0
 80050b0:	0018      	movs	r0, r3
 80050b2:	f009 fc98 	bl	800e9e6 <memset>
			lineCount = 0;
 80050b6:	4b22      	ldr	r3, [pc, #136]	; (8005140 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	701a      	strb	r2, [r3, #0]
			charCount = 0;
 80050bc:	4b21      	ldr	r3, [pc, #132]	; (8005144 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80050be:	2200      	movs	r2, #0
 80050c0:	701a      	strb	r2, [r3, #0]
			isStart = 0;
 80050c2:	4b21      	ldr	r3, [pc, #132]	; (8005148 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	701a      	strb	r2, [r3, #0]
 80050c8:	46c5      	mov	sp, r8
		if (responseBuffer[0][0] == 0x78 && responseBuffer[0][1] == 0x78) {
 80050ca:	e2a6      	b.n	800561a <HAL_TIM_PeriodElapsedCallback+0x73a>
		} else {
			uint8_t tLine = 99;
 80050cc:	231e      	movs	r3, #30
 80050ce:	33ff      	adds	r3, #255	; 0xff
 80050d0:	2118      	movs	r1, #24
 80050d2:	185b      	adds	r3, r3, r1
 80050d4:	19db      	adds	r3, r3, r7
 80050d6:	2263      	movs	r2, #99	; 0x63
 80050d8:	701a      	strb	r2, [r3, #0]
			char *ptr;
			uint8_t tIndex;
			//message handling here------------------------------------------
			for (uint8_t i = 0; i <= RESPONSE_MAX_LINE; i++) {
 80050da:	238e      	movs	r3, #142	; 0x8e
 80050dc:	005b      	lsls	r3, r3, #1
 80050de:	185b      	adds	r3, r3, r1
 80050e0:	19db      	adds	r3, r3, r7
 80050e2:	2200      	movs	r2, #0
 80050e4:	701a      	strb	r2, [r3, #0]
 80050e6:	e03d      	b.n	8005164 <HAL_TIM_PeriodElapsedCallback+0x284>
				ptr = strstr(responseBuffer[i], "+CMT:");
 80050e8:	248e      	movs	r4, #142	; 0x8e
 80050ea:	0064      	lsls	r4, r4, #1
 80050ec:	2518      	movs	r5, #24
 80050ee:	1963      	adds	r3, r4, r5
 80050f0:	19db      	adds	r3, r3, r7
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	2232      	movs	r2, #50	; 0x32
 80050f6:	435a      	muls	r2, r3
 80050f8:	4b0f      	ldr	r3, [pc, #60]	; (8005138 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80050fa:	18d3      	adds	r3, r2, r3
 80050fc:	4a13      	ldr	r2, [pc, #76]	; (800514c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80050fe:	0011      	movs	r1, r2
 8005100:	0018      	movs	r0, r3
 8005102:	f009 fcc8 	bl	800ea96 <strstr>
 8005106:	0003      	movs	r3, r0
 8005108:	22d8      	movs	r2, #216	; 0xd8
 800510a:	1951      	adds	r1, r2, r5
 800510c:	19c9      	adds	r1, r1, r7
 800510e:	600b      	str	r3, [r1, #0]
				if (ptr != NULL) {
 8005110:	1953      	adds	r3, r2, r5
 8005112:	19db      	adds	r3, r3, r7
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d01a      	beq.n	8005150 <HAL_TIM_PeriodElapsedCallback+0x270>
					tLine = i;
 800511a:	231e      	movs	r3, #30
 800511c:	33ff      	adds	r3, #255	; 0xff
 800511e:	195b      	adds	r3, r3, r5
 8005120:	19db      	adds	r3, r3, r7
 8005122:	1962      	adds	r2, r4, r5
 8005124:	19d2      	adds	r2, r2, r7
 8005126:	7812      	ldrb	r2, [r2, #0]
 8005128:	701a      	strb	r2, [r3, #0]
					break;
 800512a:	e023      	b.n	8005174 <HAL_TIM_PeriodElapsedCallback+0x294>
 800512c:	20000370 	.word	0x20000370
 8005130:	50000400 	.word	0x50000400
 8005134:	200003bc 	.word	0x200003bc
 8005138:	20000724 	.word	0x20000724
 800513c:	200009f7 	.word	0x200009f7
 8005140:	20000850 	.word	0x20000850
 8005144:	20000851 	.word	0x20000851
 8005148:	20000854 	.word	0x20000854
 800514c:	08012ebc 	.word	0x08012ebc
			for (uint8_t i = 0; i <= RESPONSE_MAX_LINE; i++) {
 8005150:	218e      	movs	r1, #142	; 0x8e
 8005152:	0049      	lsls	r1, r1, #1
 8005154:	2018      	movs	r0, #24
 8005156:	180b      	adds	r3, r1, r0
 8005158:	19db      	adds	r3, r3, r7
 800515a:	781a      	ldrb	r2, [r3, #0]
 800515c:	180b      	adds	r3, r1, r0
 800515e:	19db      	adds	r3, r3, r7
 8005160:	3201      	adds	r2, #1
 8005162:	701a      	strb	r2, [r3, #0]
 8005164:	238e      	movs	r3, #142	; 0x8e
 8005166:	005b      	lsls	r3, r3, #1
 8005168:	2218      	movs	r2, #24
 800516a:	189b      	adds	r3, r3, r2
 800516c:	19db      	adds	r3, r3, r7
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	2b06      	cmp	r3, #6
 8005172:	d9b9      	bls.n	80050e8 <HAL_TIM_PeriodElapsedCallback+0x208>
				}
			}
			if (tLine != 99) {
 8005174:	241e      	movs	r4, #30
 8005176:	34ff      	adds	r4, #255	; 0xff
 8005178:	2618      	movs	r6, #24
 800517a:	19a3      	adds	r3, r4, r6
 800517c:	19db      	adds	r3, r3, r7
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	2b63      	cmp	r3, #99	; 0x63
 8005182:	d100      	bne.n	8005186 <HAL_TIM_PeriodElapsedCallback+0x2a6>
 8005184:	e249      	b.n	800561a <HAL_TIM_PeriodElapsedCallback+0x73a>
				//some message is received!!!.
				//---check the sender's number.
				char sender[50];
				memset(sender, 0, sizeof(sender));
 8005186:	250c      	movs	r5, #12
 8005188:	19ab      	adds	r3, r5, r6
 800518a:	19db      	adds	r3, r3, r7
 800518c:	2232      	movs	r2, #50	; 0x32
 800518e:	2100      	movs	r1, #0
 8005190:	0018      	movs	r0, r3
 8005192:	f009 fc28 	bl	800e9e6 <memset>
				ptr = strchr(responseBuffer[tLine], '\"');
 8005196:	19a3      	adds	r3, r4, r6
 8005198:	19db      	adds	r3, r3, r7
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	2232      	movs	r2, #50	; 0x32
 800519e:	435a      	muls	r2, r3
 80051a0:	4bd7      	ldr	r3, [pc, #860]	; (8005500 <HAL_TIM_PeriodElapsedCallback+0x620>)
 80051a2:	18d3      	adds	r3, r2, r3
 80051a4:	2122      	movs	r1, #34	; 0x22
 80051a6:	0018      	movs	r0, r3
 80051a8:	f009 fc53 	bl	800ea52 <strchr>
 80051ac:	0003      	movs	r3, r0
 80051ae:	21d8      	movs	r1, #216	; 0xd8
 80051b0:	0030      	movs	r0, r6
 80051b2:	180a      	adds	r2, r1, r0
 80051b4:	19d2      	adds	r2, r2, r7
 80051b6:	6013      	str	r3, [r2, #0]
				if (ptr != NULL) {
 80051b8:	180b      	adds	r3, r1, r0
 80051ba:	19db      	adds	r3, r3, r7
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d100      	bne.n	80051c4 <HAL_TIM_PeriodElapsedCallback+0x2e4>
 80051c2:	e22a      	b.n	800561a <HAL_TIM_PeriodElapsedCallback+0x73a>
					tIndex = ptr - (char) responseBuffer[tLine];
 80051c4:	1823      	adds	r3, r4, r0
 80051c6:	19db      	adds	r3, r3, r7
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	2232      	movs	r2, #50	; 0x32
 80051cc:	435a      	muls	r2, r3
 80051ce:	4bcc      	ldr	r3, [pc, #816]	; (8005500 <HAL_TIM_PeriodElapsedCallback+0x620>)
 80051d0:	18d3      	adds	r3, r2, r3
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	425b      	negs	r3, r3
 80051d6:	0006      	movs	r6, r0
 80051d8:	198a      	adds	r2, r1, r6
 80051da:	19d2      	adds	r2, r2, r7
 80051dc:	6812      	ldr	r2, [r2, #0]
 80051de:	18d3      	adds	r3, r2, r3
 80051e0:	001a      	movs	r2, r3
 80051e2:	20d7      	movs	r0, #215	; 0xd7
 80051e4:	1983      	adds	r3, r0, r6
 80051e6:	19db      	adds	r3, r3, r7
 80051e8:	701a      	strb	r2, [r3, #0]
					substring(sender, responseBuffer[tLine], tIndex + 1, 13);
 80051ea:	19a3      	adds	r3, r4, r6
 80051ec:	19db      	adds	r3, r3, r7
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	2232      	movs	r2, #50	; 0x32
 80051f2:	435a      	muls	r2, r3
 80051f4:	4bc2      	ldr	r3, [pc, #776]	; (8005500 <HAL_TIM_PeriodElapsedCallback+0x620>)
 80051f6:	18d1      	adds	r1, r2, r3
 80051f8:	1983      	adds	r3, r0, r6
 80051fa:	19db      	adds	r3, r3, r7
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	3301      	adds	r3, #1
 8005200:	b2da      	uxtb	r2, r3
 8005202:	19ab      	adds	r3, r5, r6
 8005204:	19d8      	adds	r0, r3, r7
 8005206:	230d      	movs	r3, #13
 8005208:	f002 f90a 	bl	8007420 <substring>
					substring(sender, sender, 3, 10);
 800520c:	19ab      	adds	r3, r5, r6
 800520e:	19d9      	adds	r1, r3, r7
 8005210:	19ab      	adds	r3, r5, r6
 8005212:	19d8      	adds	r0, r3, r7
 8005214:	230a      	movs	r3, #10
 8005216:	2203      	movs	r2, #3
 8005218:	f002 f902 	bl	8007420 <substring>
					uint8_t isOwner = 0;
 800521c:	26d6      	movs	r6, #214	; 0xd6
 800521e:	2118      	movs	r1, #24
 8005220:	1873      	adds	r3, r6, r1
 8005222:	19db      	adds	r3, r3, r7
 8005224:	2200      	movs	r2, #0
 8005226:	701a      	strb	r2, [r3, #0]
					isOwner = !strcmp(sender, validSender); //check if sender's number is an owner?
 8005228:	4ab6      	ldr	r2, [pc, #728]	; (8005504 <HAL_TIM_PeriodElapsedCallback+0x624>)
 800522a:	186b      	adds	r3, r5, r1
 800522c:	19db      	adds	r3, r3, r7
 800522e:	0011      	movs	r1, r2
 8005230:	0018      	movs	r0, r3
 8005232:	f7fa ff65 	bl	8000100 <strcmp>
 8005236:	0003      	movs	r3, r0
 8005238:	425a      	negs	r2, r3
 800523a:	4153      	adcs	r3, r2
 800523c:	b2da      	uxtb	r2, r3
 800523e:	2118      	movs	r1, #24
 8005240:	1873      	adds	r3, r6, r1
 8005242:	19db      	adds	r3, r3, r7
 8005244:	701a      	strb	r2, [r3, #0]
					//---check the message content for any command. (*auto# for example)
					uint8_t ind1;
					uint8_t ind2; //command length.
					char *x;
					char sCommand[MAX_COMMAND_LEN];
					x = strchr(responseBuffer[tLine + 1], '*');
 8005246:	000e      	movs	r6, r1
 8005248:	1863      	adds	r3, r4, r1
 800524a:	19db      	adds	r3, r3, r7
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	3301      	adds	r3, #1
 8005250:	2232      	movs	r2, #50	; 0x32
 8005252:	435a      	muls	r2, r3
 8005254:	4baa      	ldr	r3, [pc, #680]	; (8005500 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8005256:	18d3      	adds	r3, r2, r3
 8005258:	212a      	movs	r1, #42	; 0x2a
 800525a:	0018      	movs	r0, r3
 800525c:	f009 fbf9 	bl	800ea52 <strchr>
 8005260:	0003      	movs	r3, r0
 8005262:	25d0      	movs	r5, #208	; 0xd0
 8005264:	19aa      	adds	r2, r5, r6
 8005266:	19d2      	adds	r2, r2, r7
 8005268:	6013      	str	r3, [r2, #0]
					if (x != NULL) {
 800526a:	19ab      	adds	r3, r5, r6
 800526c:	19db      	adds	r3, r3, r7
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d100      	bne.n	8005276 <HAL_TIM_PeriodElapsedCallback+0x396>
 8005274:	e1d1      	b.n	800561a <HAL_TIM_PeriodElapsedCallback+0x73a>
						char *y;
						y = strchr(responseBuffer[tLine + 1], '#');
 8005276:	19a3      	adds	r3, r4, r6
 8005278:	19db      	adds	r3, r3, r7
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	3301      	adds	r3, #1
 800527e:	2232      	movs	r2, #50	; 0x32
 8005280:	435a      	muls	r2, r3
 8005282:	4b9f      	ldr	r3, [pc, #636]	; (8005500 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8005284:	18d3      	adds	r3, r2, r3
 8005286:	2123      	movs	r1, #35	; 0x23
 8005288:	0018      	movs	r0, r3
 800528a:	f009 fbe2 	bl	800ea52 <strchr>
 800528e:	0003      	movs	r3, r0
 8005290:	20cc      	movs	r0, #204	; 0xcc
 8005292:	1982      	adds	r2, r0, r6
 8005294:	19d2      	adds	r2, r2, r7
 8005296:	6013      	str	r3, [r2, #0]
						if (y != NULL) {
 8005298:	1983      	adds	r3, r0, r6
 800529a:	19db      	adds	r3, r3, r7
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d100      	bne.n	80052a4 <HAL_TIM_PeriodElapsedCallback+0x3c4>
 80052a2:	e1ba      	b.n	800561a <HAL_TIM_PeriodElapsedCallback+0x73a>
							//command found!!!
							//---extract the command.
							ind1 = x - (char) responseBuffer[tLine + 1] + 1;
 80052a4:	0021      	movs	r1, r4
 80052a6:	0034      	movs	r4, r6
 80052a8:	198b      	adds	r3, r1, r6
 80052aa:	19db      	adds	r3, r3, r7
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	3301      	adds	r3, #1
 80052b0:	2232      	movs	r2, #50	; 0x32
 80052b2:	435a      	muls	r2, r3
 80052b4:	4b92      	ldr	r3, [pc, #584]	; (8005500 <HAL_TIM_PeriodElapsedCallback+0x620>)
 80052b6:	18d3      	adds	r3, r2, r3
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	001a      	movs	r2, r3
 80052bc:	2301      	movs	r3, #1
 80052be:	1a9b      	subs	r3, r3, r2
 80052c0:	192a      	adds	r2, r5, r4
 80052c2:	19d2      	adds	r2, r2, r7
 80052c4:	6812      	ldr	r2, [r2, #0]
 80052c6:	18d3      	adds	r3, r2, r3
 80052c8:	001a      	movs	r2, r3
 80052ca:	25cb      	movs	r5, #203	; 0xcb
 80052cc:	192b      	adds	r3, r5, r4
 80052ce:	19db      	adds	r3, r3, r7
 80052d0:	701a      	strb	r2, [r3, #0]
							ind2 = y - (char) responseBuffer[tLine + 1] - 1;
 80052d2:	190b      	adds	r3, r1, r4
 80052d4:	19db      	adds	r3, r3, r7
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	3301      	adds	r3, #1
 80052da:	2232      	movs	r2, #50	; 0x32
 80052dc:	435a      	muls	r2, r3
 80052de:	4b88      	ldr	r3, [pc, #544]	; (8005500 <HAL_TIM_PeriodElapsedCallback+0x620>)
 80052e0:	18d3      	adds	r3, r2, r3
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	43db      	mvns	r3, r3
 80052e6:	1902      	adds	r2, r0, r4
 80052e8:	19d2      	adds	r2, r2, r7
 80052ea:	6812      	ldr	r2, [r2, #0]
 80052ec:	18d3      	adds	r3, r2, r3
 80052ee:	001a      	movs	r2, r3
 80052f0:	26ca      	movs	r6, #202	; 0xca
 80052f2:	1933      	adds	r3, r6, r4
 80052f4:	19db      	adds	r3, r3, r7
 80052f6:	701a      	strb	r2, [r3, #0]
							substring(sCommand, responseBuffer[tLine + 1], ind1,ind2);
 80052f8:	190b      	adds	r3, r1, r4
 80052fa:	19db      	adds	r3, r3, r7
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	3301      	adds	r3, #1
 8005300:	2232      	movs	r2, #50	; 0x32
 8005302:	435a      	muls	r2, r3
 8005304:	4b7e      	ldr	r3, [pc, #504]	; (8005500 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8005306:	18d1      	adds	r1, r2, r3
 8005308:	0022      	movs	r2, r4
 800530a:	18b3      	adds	r3, r6, r2
 800530c:	19db      	adds	r3, r3, r7
 800530e:	781c      	ldrb	r4, [r3, #0]
 8005310:	0010      	movs	r0, r2
 8005312:	18ab      	adds	r3, r5, r2
 8005314:	19db      	adds	r3, r3, r7
 8005316:	781a      	ldrb	r2, [r3, #0]
 8005318:	2540      	movs	r5, #64	; 0x40
 800531a:	182b      	adds	r3, r5, r0
 800531c:	19d8      	adds	r0, r3, r7
 800531e:	0023      	movs	r3, r4
 8005320:	f002 f87e 	bl	8007420 <substring>
							//--->1)RES0 = reset user PIN and registered NUMBER
							//--->2)RNUM3322336979xxxx = register new owner's number
							//--->3)RPIN = set new pin
							//--->4)WHERE
							//--->5)SERVER,DNS,PORT (DNS<=50,PORT<=5)
							if(sCommand[0] == 'R'
 8005324:	002a      	movs	r2, r5
 8005326:	2118      	movs	r1, #24
 8005328:	1853      	adds	r3, r2, r1
 800532a:	19db      	adds	r3, r3, r7
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	2b52      	cmp	r3, #82	; 0x52
 8005330:	d122      	bne.n	8005378 <HAL_TIM_PeriodElapsedCallback+0x498>
							&& sCommand[1] == 'E'
 8005332:	1853      	adds	r3, r2, r1
 8005334:	19db      	adds	r3, r3, r7
 8005336:	785b      	ldrb	r3, [r3, #1]
 8005338:	2b45      	cmp	r3, #69	; 0x45
 800533a:	d11d      	bne.n	8005378 <HAL_TIM_PeriodElapsedCallback+0x498>
							&& sCommand[2] == 'S'
 800533c:	1853      	adds	r3, r2, r1
 800533e:	19db      	adds	r3, r3, r7
 8005340:	789b      	ldrb	r3, [r3, #2]
 8005342:	2b53      	cmp	r3, #83	; 0x53
 8005344:	d118      	bne.n	8005378 <HAL_TIM_PeriodElapsedCallback+0x498>
							&& sCommand[3] == '0'
 8005346:	1853      	adds	r3, r2, r1
 8005348:	19db      	adds	r3, r3, r7
 800534a:	78db      	ldrb	r3, [r3, #3]
 800534c:	2b30      	cmp	r3, #48	; 0x30
 800534e:	d113      	bne.n	8005378 <HAL_TIM_PeriodElapsedCallback+0x498>
							&& ind2 == 4) {
 8005350:	1873      	adds	r3, r6, r1
 8005352:	19db      	adds	r3, r3, r7
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	2b04      	cmp	r3, #4
 8005358:	d10e      	bne.n	8005378 <HAL_TIM_PeriodElapsedCallback+0x498>
								//--- reset command received.
								cPin[0] = '1';
 800535a:	4b6b      	ldr	r3, [pc, #428]	; (8005508 <HAL_TIM_PeriodElapsedCallback+0x628>)
 800535c:	2231      	movs	r2, #49	; 0x31
 800535e:	701a      	strb	r2, [r3, #0]
								cPin[1] = '2';
 8005360:	4b69      	ldr	r3, [pc, #420]	; (8005508 <HAL_TIM_PeriodElapsedCallback+0x628>)
 8005362:	2232      	movs	r2, #50	; 0x32
 8005364:	705a      	strb	r2, [r3, #1]
								cPin[2] = '3';
 8005366:	4b68      	ldr	r3, [pc, #416]	; (8005508 <HAL_TIM_PeriodElapsedCallback+0x628>)
 8005368:	2233      	movs	r2, #51	; 0x33
 800536a:	709a      	strb	r2, [r3, #2]
								cPin[3] = '4';
 800536c:	4b66      	ldr	r3, [pc, #408]	; (8005508 <HAL_TIM_PeriodElapsedCallback+0x628>)
 800536e:	2234      	movs	r2, #52	; 0x34
 8005370:	70da      	strb	r2, [r3, #3]
								//---saving to flash memory
								save_to_flash();
 8005372:	f001 f85f 	bl	8006434 <save_to_flash>
							&& ind2 == 4) {
 8005376:	e150      	b.n	800561a <HAL_TIM_PeriodElapsedCallback+0x73a>
								//printf("Reset Completed\n");
							} else if (sCommand[0] == 'R'
 8005378:	2240      	movs	r2, #64	; 0x40
 800537a:	2018      	movs	r0, #24
 800537c:	1813      	adds	r3, r2, r0
 800537e:	19db      	adds	r3, r3, r7
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	2b52      	cmp	r3, #82	; 0x52
 8005384:	d161      	bne.n	800544a <HAL_TIM_PeriodElapsedCallback+0x56a>
									&& sCommand[1] == 'N'
 8005386:	1813      	adds	r3, r2, r0
 8005388:	19db      	adds	r3, r3, r7
 800538a:	785b      	ldrb	r3, [r3, #1]
 800538c:	2b4e      	cmp	r3, #78	; 0x4e
 800538e:	d15c      	bne.n	800544a <HAL_TIM_PeriodElapsedCallback+0x56a>
									&& sCommand[2] == 'U'
 8005390:	1813      	adds	r3, r2, r0
 8005392:	19db      	adds	r3, r3, r7
 8005394:	789b      	ldrb	r3, [r3, #2]
 8005396:	2b55      	cmp	r3, #85	; 0x55
 8005398:	d157      	bne.n	800544a <HAL_TIM_PeriodElapsedCallback+0x56a>
									&& sCommand[3] == 'M'
 800539a:	1813      	adds	r3, r2, r0
 800539c:	19db      	adds	r3, r3, r7
 800539e:	78db      	ldrb	r3, [r3, #3]
 80053a0:	2b4d      	cmp	r3, #77	; 0x4d
 80053a2:	d152      	bne.n	800544a <HAL_TIM_PeriodElapsedCallback+0x56a>
									&& ind2 == 18) {
 80053a4:	23ca      	movs	r3, #202	; 0xca
 80053a6:	181b      	adds	r3, r3, r0
 80053a8:	19db      	adds	r3, r3, r7
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	2b12      	cmp	r3, #18
 80053ae:	d14c      	bne.n	800544a <HAL_TIM_PeriodElapsedCallback+0x56a>
								//---owner number registration command received
								//printf("number registration command received\n");
								if(sCommand[14] == cPin[0]
 80053b0:	0011      	movs	r1, r2
 80053b2:	180b      	adds	r3, r1, r0
 80053b4:	19db      	adds	r3, r3, r7
 80053b6:	7b9a      	ldrb	r2, [r3, #14]
 80053b8:	4b53      	ldr	r3, [pc, #332]	; (8005508 <HAL_TIM_PeriodElapsedCallback+0x628>)
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d000      	beq.n	80053c2 <HAL_TIM_PeriodElapsedCallback+0x4e2>
 80053c0:	e128      	b.n	8005614 <HAL_TIM_PeriodElapsedCallback+0x734>
								&& sCommand[15] == cPin[1]
 80053c2:	180b      	adds	r3, r1, r0
 80053c4:	19db      	adds	r3, r3, r7
 80053c6:	7bda      	ldrb	r2, [r3, #15]
 80053c8:	4b4f      	ldr	r3, [pc, #316]	; (8005508 <HAL_TIM_PeriodElapsedCallback+0x628>)
 80053ca:	785b      	ldrb	r3, [r3, #1]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d000      	beq.n	80053d2 <HAL_TIM_PeriodElapsedCallback+0x4f2>
 80053d0:	e120      	b.n	8005614 <HAL_TIM_PeriodElapsedCallback+0x734>
								&& sCommand[16] == cPin[2]
 80053d2:	180b      	adds	r3, r1, r0
 80053d4:	19db      	adds	r3, r3, r7
 80053d6:	7c1a      	ldrb	r2, [r3, #16]
 80053d8:	4b4b      	ldr	r3, [pc, #300]	; (8005508 <HAL_TIM_PeriodElapsedCallback+0x628>)
 80053da:	789b      	ldrb	r3, [r3, #2]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d000      	beq.n	80053e2 <HAL_TIM_PeriodElapsedCallback+0x502>
 80053e0:	e118      	b.n	8005614 <HAL_TIM_PeriodElapsedCallback+0x734>
								&& sCommand[17] == cPin[3]) {
 80053e2:	180b      	adds	r3, r1, r0
 80053e4:	19db      	adds	r3, r3, r7
 80053e6:	7c5a      	ldrb	r2, [r3, #17]
 80053e8:	4b47      	ldr	r3, [pc, #284]	; (8005508 <HAL_TIM_PeriodElapsedCallback+0x628>)
 80053ea:	78db      	ldrb	r3, [r3, #3]
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d000      	beq.n	80053f2 <HAL_TIM_PeriodElapsedCallback+0x512>
 80053f0:	e110      	b.n	8005614 <HAL_TIM_PeriodElapsedCallback+0x734>
									//PIN is valid!!!
									//---register new number
									for (uint8_t m = 0; m < 10; m++) {
 80053f2:	231c      	movs	r3, #28
 80053f4:	33ff      	adds	r3, #255	; 0xff
 80053f6:	181b      	adds	r3, r3, r0
 80053f8:	19db      	adds	r3, r3, r7
 80053fa:	2200      	movs	r2, #0
 80053fc:	701a      	strb	r2, [r3, #0]
 80053fe:	e016      	b.n	800542e <HAL_TIM_PeriodElapsedCallback+0x54e>
										validSender[m] = sCommand[m + 4];
 8005400:	201c      	movs	r0, #28
 8005402:	30ff      	adds	r0, #255	; 0xff
 8005404:	2418      	movs	r4, #24
 8005406:	1903      	adds	r3, r0, r4
 8005408:	19db      	adds	r3, r3, r7
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	1d1a      	adds	r2, r3, #4
 800540e:	1903      	adds	r3, r0, r4
 8005410:	19db      	adds	r3, r3, r7
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	2140      	movs	r1, #64	; 0x40
 8005416:	1909      	adds	r1, r1, r4
 8005418:	19c9      	adds	r1, r1, r7
 800541a:	5c89      	ldrb	r1, [r1, r2]
 800541c:	4a39      	ldr	r2, [pc, #228]	; (8005504 <HAL_TIM_PeriodElapsedCallback+0x624>)
 800541e:	54d1      	strb	r1, [r2, r3]
									for (uint8_t m = 0; m < 10; m++) {
 8005420:	1903      	adds	r3, r0, r4
 8005422:	19db      	adds	r3, r3, r7
 8005424:	781a      	ldrb	r2, [r3, #0]
 8005426:	1903      	adds	r3, r0, r4
 8005428:	19db      	adds	r3, r3, r7
 800542a:	3201      	adds	r2, #1
 800542c:	701a      	strb	r2, [r3, #0]
 800542e:	231c      	movs	r3, #28
 8005430:	33ff      	adds	r3, #255	; 0xff
 8005432:	2218      	movs	r2, #24
 8005434:	189b      	adds	r3, r3, r2
 8005436:	19db      	adds	r3, r3, r7
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	2b09      	cmp	r3, #9
 800543c:	d9e0      	bls.n	8005400 <HAL_TIM_PeriodElapsedCallback+0x520>
									}
									save_to_flash();
 800543e:	f000 fff9 	bl	8006434 <save_to_flash>
									isSMSActive=1;
 8005442:	4b32      	ldr	r3, [pc, #200]	; (800550c <HAL_TIM_PeriodElapsedCallback+0x62c>)
 8005444:	2201      	movs	r2, #1
 8005446:	701a      	strb	r2, [r3, #0]
								if(sCommand[14] == cPin[0]
 8005448:	e0e4      	b.n	8005614 <HAL_TIM_PeriodElapsedCallback+0x734>
									//---send success message(todo)
								} else {
									// incorrect pin, send message (incoorect pin),(todo)
									// *future* stop sending message after 3 fails
								}
							} else if (sCommand[0] == 'R'
 800544a:	2240      	movs	r2, #64	; 0x40
 800544c:	2018      	movs	r0, #24
 800544e:	1813      	adds	r3, r2, r0
 8005450:	19db      	adds	r3, r3, r7
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	2b52      	cmp	r3, #82	; 0x52
 8005456:	d15b      	bne.n	8005510 <HAL_TIM_PeriodElapsedCallback+0x630>
									&& sCommand[1] == 'P'
 8005458:	1813      	adds	r3, r2, r0
 800545a:	19db      	adds	r3, r3, r7
 800545c:	785b      	ldrb	r3, [r3, #1]
 800545e:	2b50      	cmp	r3, #80	; 0x50
 8005460:	d156      	bne.n	8005510 <HAL_TIM_PeriodElapsedCallback+0x630>
									&& sCommand[2] == 'I'
 8005462:	1813      	adds	r3, r2, r0
 8005464:	19db      	adds	r3, r3, r7
 8005466:	789b      	ldrb	r3, [r3, #2]
 8005468:	2b49      	cmp	r3, #73	; 0x49
 800546a:	d151      	bne.n	8005510 <HAL_TIM_PeriodElapsedCallback+0x630>
									&& sCommand[3] == 'N'
 800546c:	1813      	adds	r3, r2, r0
 800546e:	19db      	adds	r3, r3, r7
 8005470:	78db      	ldrb	r3, [r3, #3]
 8005472:	2b4e      	cmp	r3, #78	; 0x4e
 8005474:	d14c      	bne.n	8005510 <HAL_TIM_PeriodElapsedCallback+0x630>
									&& ind2 == 12
 8005476:	23ca      	movs	r3, #202	; 0xca
 8005478:	181b      	adds	r3, r3, r0
 800547a:	19db      	adds	r3, r3, r7
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	2b0c      	cmp	r3, #12
 8005480:	d146      	bne.n	8005510 <HAL_TIM_PeriodElapsedCallback+0x630>
									&& isOwner == 1) {
 8005482:	23d6      	movs	r3, #214	; 0xd6
 8005484:	181b      	adds	r3, r3, r0
 8005486:	19db      	adds	r3, r3, r7
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	2b01      	cmp	r3, #1
 800548c:	d140      	bne.n	8005510 <HAL_TIM_PeriodElapsedCallback+0x630>
								//---SET PIN command received from owner.
								// RPINxxxxNNNN
								//printf("set PIN command received\n");
								if (sCommand[4] == cPin[0]
 800548e:	0011      	movs	r1, r2
 8005490:	180b      	adds	r3, r1, r0
 8005492:	19db      	adds	r3, r3, r7
 8005494:	791a      	ldrb	r2, [r3, #4]
 8005496:	4b1c      	ldr	r3, [pc, #112]	; (8005508 <HAL_TIM_PeriodElapsedCallback+0x628>)
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	429a      	cmp	r2, r3
 800549c:	d000      	beq.n	80054a0 <HAL_TIM_PeriodElapsedCallback+0x5c0>
 800549e:	e0bb      	b.n	8005618 <HAL_TIM_PeriodElapsedCallback+0x738>
								&& sCommand[5] == cPin[1]
 80054a0:	180b      	adds	r3, r1, r0
 80054a2:	19db      	adds	r3, r3, r7
 80054a4:	795a      	ldrb	r2, [r3, #5]
 80054a6:	4b18      	ldr	r3, [pc, #96]	; (8005508 <HAL_TIM_PeriodElapsedCallback+0x628>)
 80054a8:	785b      	ldrb	r3, [r3, #1]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d000      	beq.n	80054b0 <HAL_TIM_PeriodElapsedCallback+0x5d0>
 80054ae:	e0b3      	b.n	8005618 <HAL_TIM_PeriodElapsedCallback+0x738>
								&& sCommand[6] == cPin[2]
 80054b0:	180b      	adds	r3, r1, r0
 80054b2:	19db      	adds	r3, r3, r7
 80054b4:	799a      	ldrb	r2, [r3, #6]
 80054b6:	4b14      	ldr	r3, [pc, #80]	; (8005508 <HAL_TIM_PeriodElapsedCallback+0x628>)
 80054b8:	789b      	ldrb	r3, [r3, #2]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d000      	beq.n	80054c0 <HAL_TIM_PeriodElapsedCallback+0x5e0>
 80054be:	e0ab      	b.n	8005618 <HAL_TIM_PeriodElapsedCallback+0x738>
								&& sCommand[7] == cPin[3]) {
 80054c0:	180b      	adds	r3, r1, r0
 80054c2:	19db      	adds	r3, r3, r7
 80054c4:	79da      	ldrb	r2, [r3, #7]
 80054c6:	4b10      	ldr	r3, [pc, #64]	; (8005508 <HAL_TIM_PeriodElapsedCallback+0x628>)
 80054c8:	78db      	ldrb	r3, [r3, #3]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d000      	beq.n	80054d0 <HAL_TIM_PeriodElapsedCallback+0x5f0>
 80054ce:	e0a3      	b.n	8005618 <HAL_TIM_PeriodElapsedCallback+0x738>
									//old PIN is valid!!!
									//---set new pin
									cPin[0] = sCommand[8];
 80054d0:	180b      	adds	r3, r1, r0
 80054d2:	19db      	adds	r3, r3, r7
 80054d4:	7a1a      	ldrb	r2, [r3, #8]
 80054d6:	4b0c      	ldr	r3, [pc, #48]	; (8005508 <HAL_TIM_PeriodElapsedCallback+0x628>)
 80054d8:	701a      	strb	r2, [r3, #0]
									cPin[1] = sCommand[9];
 80054da:	180b      	adds	r3, r1, r0
 80054dc:	19db      	adds	r3, r3, r7
 80054de:	7a5a      	ldrb	r2, [r3, #9]
 80054e0:	4b09      	ldr	r3, [pc, #36]	; (8005508 <HAL_TIM_PeriodElapsedCallback+0x628>)
 80054e2:	705a      	strb	r2, [r3, #1]
									cPin[2] = sCommand[10];
 80054e4:	180b      	adds	r3, r1, r0
 80054e6:	19db      	adds	r3, r3, r7
 80054e8:	7a9a      	ldrb	r2, [r3, #10]
 80054ea:	4b07      	ldr	r3, [pc, #28]	; (8005508 <HAL_TIM_PeriodElapsedCallback+0x628>)
 80054ec:	709a      	strb	r2, [r3, #2]
									cPin[3] = sCommand[11];
 80054ee:	180b      	adds	r3, r1, r0
 80054f0:	19db      	adds	r3, r3, r7
 80054f2:	7ada      	ldrb	r2, [r3, #11]
 80054f4:	4b04      	ldr	r3, [pc, #16]	; (8005508 <HAL_TIM_PeriodElapsedCallback+0x628>)
 80054f6:	70da      	strb	r2, [r3, #3]
									//---saving to flash memory
									save_to_flash();
 80054f8:	f000 ff9c 	bl	8006434 <save_to_flash>
								if (sCommand[4] == cPin[0]
 80054fc:	e08c      	b.n	8005618 <HAL_TIM_PeriodElapsedCallback+0x738>
 80054fe:	46c0      	nop			; (mov r8, r8)
 8005500:	20000724 	.word	0x20000724
 8005504:	20000004 	.word	0x20000004
 8005508:	20000710 	.word	0x20000710
 800550c:	20000708 	.word	0x20000708
									//printf("NEW PIN set \n");
								}
							} else if (sCommand[0] == 'W'
 8005510:	2240      	movs	r2, #64	; 0x40
 8005512:	2118      	movs	r1, #24
 8005514:	1853      	adds	r3, r2, r1
 8005516:	19db      	adds	r3, r3, r7
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	2b57      	cmp	r3, #87	; 0x57
 800551c:	d11d      	bne.n	800555a <HAL_TIM_PeriodElapsedCallback+0x67a>
									&& sCommand[1] == 'H'
 800551e:	1853      	adds	r3, r2, r1
 8005520:	19db      	adds	r3, r3, r7
 8005522:	785b      	ldrb	r3, [r3, #1]
 8005524:	2b48      	cmp	r3, #72	; 0x48
 8005526:	d118      	bne.n	800555a <HAL_TIM_PeriodElapsedCallback+0x67a>
									&& sCommand[2] == 'E'
 8005528:	1853      	adds	r3, r2, r1
 800552a:	19db      	adds	r3, r3, r7
 800552c:	789b      	ldrb	r3, [r3, #2]
 800552e:	2b45      	cmp	r3, #69	; 0x45
 8005530:	d113      	bne.n	800555a <HAL_TIM_PeriodElapsedCallback+0x67a>
									&& sCommand[3] == 'R'
 8005532:	1853      	adds	r3, r2, r1
 8005534:	19db      	adds	r3, r3, r7
 8005536:	78db      	ldrb	r3, [r3, #3]
 8005538:	2b52      	cmp	r3, #82	; 0x52
 800553a:	d10e      	bne.n	800555a <HAL_TIM_PeriodElapsedCallback+0x67a>
									&& sCommand[4] == 'E'
 800553c:	1853      	adds	r3, r2, r1
 800553e:	19db      	adds	r3, r3, r7
 8005540:	791b      	ldrb	r3, [r3, #4]
 8005542:	2b45      	cmp	r3, #69	; 0x45
 8005544:	d109      	bne.n	800555a <HAL_TIM_PeriodElapsedCallback+0x67a>
									&& isOwner == 1) {
 8005546:	23d6      	movs	r3, #214	; 0xd6
 8005548:	185b      	adds	r3, r3, r1
 800554a:	19db      	adds	r3, r3, r7
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	2b01      	cmp	r3, #1
 8005550:	d103      	bne.n	800555a <HAL_TIM_PeriodElapsedCallback+0x67a>
								//WHERE API REQUEST RECEIVED
								isWhereApiCalled = 1;
 8005552:	4bd6      	ldr	r3, [pc, #856]	; (80058ac <HAL_TIM_PeriodElapsedCallback+0x9cc>)
 8005554:	2201      	movs	r2, #1
 8005556:	701a      	strb	r2, [r3, #0]
 8005558:	e05f      	b.n	800561a <HAL_TIM_PeriodElapsedCallback+0x73a>
							} else if (sCommand[0] == 'S'
 800555a:	2240      	movs	r2, #64	; 0x40
 800555c:	2118      	movs	r1, #24
 800555e:	1853      	adds	r3, r2, r1
 8005560:	19db      	adds	r3, r3, r7
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	2b53      	cmp	r3, #83	; 0x53
 8005566:	d129      	bne.n	80055bc <HAL_TIM_PeriodElapsedCallback+0x6dc>
									&& sCommand[1] == 'E'
 8005568:	1853      	adds	r3, r2, r1
 800556a:	19db      	adds	r3, r3, r7
 800556c:	785b      	ldrb	r3, [r3, #1]
 800556e:	2b45      	cmp	r3, #69	; 0x45
 8005570:	d124      	bne.n	80055bc <HAL_TIM_PeriodElapsedCallback+0x6dc>
									&& sCommand[2] == 'R'
 8005572:	1853      	adds	r3, r2, r1
 8005574:	19db      	adds	r3, r3, r7
 8005576:	789b      	ldrb	r3, [r3, #2]
 8005578:	2b52      	cmp	r3, #82	; 0x52
 800557a:	d11f      	bne.n	80055bc <HAL_TIM_PeriodElapsedCallback+0x6dc>
									&& sCommand[3] == 'V'
 800557c:	1853      	adds	r3, r2, r1
 800557e:	19db      	adds	r3, r3, r7
 8005580:	78db      	ldrb	r3, [r3, #3]
 8005582:	2b56      	cmp	r3, #86	; 0x56
 8005584:	d11a      	bne.n	80055bc <HAL_TIM_PeriodElapsedCallback+0x6dc>
									&& sCommand[4] == 'E'
 8005586:	1853      	adds	r3, r2, r1
 8005588:	19db      	adds	r3, r3, r7
 800558a:	791b      	ldrb	r3, [r3, #4]
 800558c:	2b45      	cmp	r3, #69	; 0x45
 800558e:	d115      	bne.n	80055bc <HAL_TIM_PeriodElapsedCallback+0x6dc>
									&& sCommand[5] == 'R'
 8005590:	1853      	adds	r3, r2, r1
 8005592:	19db      	adds	r3, r3, r7
 8005594:	795b      	ldrb	r3, [r3, #5]
 8005596:	2b52      	cmp	r3, #82	; 0x52
 8005598:	d110      	bne.n	80055bc <HAL_TIM_PeriodElapsedCallback+0x6dc>
									&& sCommand[6] == ','
 800559a:	1853      	adds	r3, r2, r1
 800559c:	19db      	adds	r3, r3, r7
 800559e:	799b      	ldrb	r3, [r3, #6]
 80055a0:	2b2c      	cmp	r3, #44	; 0x2c
 80055a2:	d10b      	bne.n	80055bc <HAL_TIM_PeriodElapsedCallback+0x6dc>
									&& isOwner == 1) {
 80055a4:	23d6      	movs	r3, #214	; 0xd6
 80055a6:	185b      	adds	r3, r3, r1
 80055a8:	19db      	adds	r3, r3, r7
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d105      	bne.n	80055bc <HAL_TIM_PeriodElapsedCallback+0x6dc>
								//SERVER CONFIG COMMAND RECEIVED
								check_command_SERVER(sCommand);///handle the SERVER CONFIG COMMAND
 80055b0:	1853      	adds	r3, r2, r1
 80055b2:	19db      	adds	r3, r3, r7
 80055b4:	0018      	movs	r0, r3
 80055b6:	f002 fac1 	bl	8007b3c <check_command_SERVER>
 80055ba:	e02e      	b.n	800561a <HAL_TIM_PeriodElapsedCallback+0x73a>

							} else if (sCommand[0] == 'T'
 80055bc:	2240      	movs	r2, #64	; 0x40
 80055be:	2118      	movs	r1, #24
 80055c0:	1853      	adds	r3, r2, r1
 80055c2:	19db      	adds	r3, r3, r7
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	2b54      	cmp	r3, #84	; 0x54
 80055c8:	d127      	bne.n	800561a <HAL_TIM_PeriodElapsedCallback+0x73a>
									&& sCommand[1] == 'I'
 80055ca:	1853      	adds	r3, r2, r1
 80055cc:	19db      	adds	r3, r3, r7
 80055ce:	785b      	ldrb	r3, [r3, #1]
 80055d0:	2b49      	cmp	r3, #73	; 0x49
 80055d2:	d122      	bne.n	800561a <HAL_TIM_PeriodElapsedCallback+0x73a>
									&& sCommand[2] == 'M'
 80055d4:	1853      	adds	r3, r2, r1
 80055d6:	19db      	adds	r3, r3, r7
 80055d8:	789b      	ldrb	r3, [r3, #2]
 80055da:	2b4d      	cmp	r3, #77	; 0x4d
 80055dc:	d11d      	bne.n	800561a <HAL_TIM_PeriodElapsedCallback+0x73a>
									&& sCommand[3] == 'E'
 80055de:	1853      	adds	r3, r2, r1
 80055e0:	19db      	adds	r3, r3, r7
 80055e2:	78db      	ldrb	r3, [r3, #3]
 80055e4:	2b45      	cmp	r3, #69	; 0x45
 80055e6:	d118      	bne.n	800561a <HAL_TIM_PeriodElapsedCallback+0x73a>
									&& sCommand[4] == 'R'
 80055e8:	1853      	adds	r3, r2, r1
 80055ea:	19db      	adds	r3, r3, r7
 80055ec:	791b      	ldrb	r3, [r3, #4]
 80055ee:	2b52      	cmp	r3, #82	; 0x52
 80055f0:	d113      	bne.n	800561a <HAL_TIM_PeriodElapsedCallback+0x73a>
									&& sCommand[5] == ','
 80055f2:	1853      	adds	r3, r2, r1
 80055f4:	19db      	adds	r3, r3, r7
 80055f6:	795b      	ldrb	r3, [r3, #5]
 80055f8:	2b2c      	cmp	r3, #44	; 0x2c
 80055fa:	d10e      	bne.n	800561a <HAL_TIM_PeriodElapsedCallback+0x73a>
									&& isOwner == 1) {
 80055fc:	23d6      	movs	r3, #214	; 0xd6
 80055fe:	185b      	adds	r3, r3, r1
 8005600:	19db      	adds	r3, r3, r7
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	2b01      	cmp	r3, #1
 8005606:	d108      	bne.n	800561a <HAL_TIM_PeriodElapsedCallback+0x73a>
								//TIMER CONFIG COMMAND RECEIVED
								check_command_TIMER(sCommand);///handle the TIMER CONFIG COMMAND
 8005608:	1853      	adds	r3, r2, r1
 800560a:	19db      	adds	r3, r3, r7
 800560c:	0018      	movs	r0, r3
 800560e:	f002 fb39 	bl	8007c84 <check_command_TIMER>
 8005612:	e002      	b.n	800561a <HAL_TIM_PeriodElapsedCallback+0x73a>
								if(sCommand[14] == cPin[0]
 8005614:	46c0      	nop			; (mov r8, r8)
 8005616:	e000      	b.n	800561a <HAL_TIM_PeriodElapsedCallback+0x73a>
								if (sCommand[4] == cPin[0]
 8005618:	46c0      	nop			; (mov r8, r8)

				}

			}
		}
		if (commandCase == 0) {
 800561a:	4ba5      	ldr	r3, [pc, #660]	; (80058b0 <HAL_TIM_PeriodElapsedCallback+0x9d0>)
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	b2db      	uxtb	r3, r3
 8005620:	2b00      	cmp	r3, #0
 8005622:	d172      	bne.n	800570a <HAL_TIM_PeriodElapsedCallback+0x82a>
			char *ptr;
			char *ptr2;
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 8005624:	238d      	movs	r3, #141	; 0x8d
 8005626:	005b      	lsls	r3, r3, #1
 8005628:	2218      	movs	r2, #24
 800562a:	189b      	adds	r3, r3, r2
 800562c:	19db      	adds	r3, r3, r7
 800562e:	2200      	movs	r2, #0
 8005630:	701a      	strb	r2, [r3, #0]
 8005632:	e04e      	b.n	80056d2 <HAL_TIM_PeriodElapsedCallback+0x7f2>
				ptr = strstr(responseBuffer[i], "CLOSED");
 8005634:	248d      	movs	r4, #141	; 0x8d
 8005636:	0064      	lsls	r4, r4, #1
 8005638:	2618      	movs	r6, #24
 800563a:	19a3      	adds	r3, r4, r6
 800563c:	19db      	adds	r3, r3, r7
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	2232      	movs	r2, #50	; 0x32
 8005642:	435a      	muls	r2, r3
 8005644:	4b9b      	ldr	r3, [pc, #620]	; (80058b4 <HAL_TIM_PeriodElapsedCallback+0x9d4>)
 8005646:	18d3      	adds	r3, r2, r3
 8005648:	4a9b      	ldr	r2, [pc, #620]	; (80058b8 <HAL_TIM_PeriodElapsedCallback+0x9d8>)
 800564a:	0011      	movs	r1, r2
 800564c:	0018      	movs	r0, r3
 800564e:	f009 fa22 	bl	800ea96 <strstr>
 8005652:	0003      	movs	r3, r0
 8005654:	25c4      	movs	r5, #196	; 0xc4
 8005656:	19aa      	adds	r2, r5, r6
 8005658:	19d2      	adds	r2, r2, r7
 800565a:	6013      	str	r3, [r2, #0]
				ptr2 = strstr(responseBuffer[i], "+PDP DEACT");
 800565c:	19a3      	adds	r3, r4, r6
 800565e:	19db      	adds	r3, r3, r7
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	2232      	movs	r2, #50	; 0x32
 8005664:	435a      	muls	r2, r3
 8005666:	4b93      	ldr	r3, [pc, #588]	; (80058b4 <HAL_TIM_PeriodElapsedCallback+0x9d4>)
 8005668:	18d3      	adds	r3, r2, r3
 800566a:	4a94      	ldr	r2, [pc, #592]	; (80058bc <HAL_TIM_PeriodElapsedCallback+0x9dc>)
 800566c:	0011      	movs	r1, r2
 800566e:	0018      	movs	r0, r3
 8005670:	f009 fa11 	bl	800ea96 <strstr>
 8005674:	0003      	movs	r3, r0
 8005676:	22c0      	movs	r2, #192	; 0xc0
 8005678:	1992      	adds	r2, r2, r6
 800567a:	19d2      	adds	r2, r2, r7
 800567c:	6013      	str	r3, [r2, #0]
				if (ptr != NULL) {
 800567e:	19ab      	adds	r3, r5, r6
 8005680:	19db      	adds	r3, r3, r7
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d009      	beq.n	800569c <HAL_TIM_PeriodElapsedCallback+0x7bc>
					// HAL_UART_Transmit(&huart4, "closed recv",
					// sizeof("closed recv"), 100);

					isLoggedIn = 0;
 8005688:	4b8d      	ldr	r3, [pc, #564]	; (80058c0 <HAL_TIM_PeriodElapsedCallback+0x9e0>)
 800568a:	2200      	movs	r2, #0
 800568c:	701a      	strb	r2, [r3, #0]
					isDataMode = 0; //command mode activated
 800568e:	4b8d      	ldr	r3, [pc, #564]	; (80058c4 <HAL_TIM_PeriodElapsedCallback+0x9e4>)
 8005690:	2200      	movs	r2, #0
 8005692:	701a      	strb	r2, [r3, #0]
					isTcpOpen = 0;
 8005694:	4b8c      	ldr	r3, [pc, #560]	; (80058c8 <HAL_TIM_PeriodElapsedCallback+0x9e8>)
 8005696:	2200      	movs	r2, #0
 8005698:	701a      	strb	r2, [r3, #0]
					break;
 800569a:	e022      	b.n	80056e2 <HAL_TIM_PeriodElapsedCallback+0x802>
				}
				if (ptr2 != NULL) {
 800569c:	23c0      	movs	r3, #192	; 0xc0
 800569e:	2218      	movs	r2, #24
 80056a0:	189b      	adds	r3, r3, r2
 80056a2:	19db      	adds	r3, r3, r7
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d009      	beq.n	80056be <HAL_TIM_PeriodElapsedCallback+0x7de>
					// HAL_UART_Transmit(&huart4, "pdp deact recv",
					// sizeof("pdp deact"), 100);
					isLoggedIn = 0;
 80056aa:	4b85      	ldr	r3, [pc, #532]	; (80058c0 <HAL_TIM_PeriodElapsedCallback+0x9e0>)
 80056ac:	2200      	movs	r2, #0
 80056ae:	701a      	strb	r2, [r3, #0]
					isDataMode = 0; //command mode activated
 80056b0:	4b84      	ldr	r3, [pc, #528]	; (80058c4 <HAL_TIM_PeriodElapsedCallback+0x9e4>)
 80056b2:	2200      	movs	r2, #0
 80056b4:	701a      	strb	r2, [r3, #0]
					isTcpOpen = 0;
 80056b6:	4b84      	ldr	r3, [pc, #528]	; (80058c8 <HAL_TIM_PeriodElapsedCallback+0x9e8>)
 80056b8:	2200      	movs	r2, #0
 80056ba:	701a      	strb	r2, [r3, #0]
					break;
 80056bc:	e011      	b.n	80056e2 <HAL_TIM_PeriodElapsedCallback+0x802>
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 80056be:	218d      	movs	r1, #141	; 0x8d
 80056c0:	0049      	lsls	r1, r1, #1
 80056c2:	2018      	movs	r0, #24
 80056c4:	180b      	adds	r3, r1, r0
 80056c6:	19db      	adds	r3, r3, r7
 80056c8:	781a      	ldrb	r2, [r3, #0]
 80056ca:	180b      	adds	r3, r1, r0
 80056cc:	19db      	adds	r3, r3, r7
 80056ce:	3201      	adds	r2, #1
 80056d0:	701a      	strb	r2, [r3, #0]
 80056d2:	238d      	movs	r3, #141	; 0x8d
 80056d4:	005b      	lsls	r3, r3, #1
 80056d6:	2218      	movs	r2, #24
 80056d8:	189b      	adds	r3, r3, r2
 80056da:	19db      	adds	r3, r3, r7
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	2b05      	cmp	r3, #5
 80056e0:	d9a8      	bls.n	8005634 <HAL_TIM_PeriodElapsedCallback+0x754>
				}
			}
			HAL_TIM_Base_Stop_IT(&htim16);
 80056e2:	4b7a      	ldr	r3, [pc, #488]	; (80058cc <HAL_TIM_PeriodElapsedCallback+0x9ec>)
 80056e4:	0018      	movs	r0, r3
 80056e6:	f006 fa6b 	bl	800bbc0 <HAL_TIM_Base_Stop_IT>
			memset(responseBuffer, 0, sizeof(responseBuffer));
 80056ea:	2396      	movs	r3, #150	; 0x96
 80056ec:	005a      	lsls	r2, r3, #1
 80056ee:	4b71      	ldr	r3, [pc, #452]	; (80058b4 <HAL_TIM_PeriodElapsedCallback+0x9d4>)
 80056f0:	2100      	movs	r1, #0
 80056f2:	0018      	movs	r0, r3
 80056f4:	f009 f977 	bl	800e9e6 <memset>
			lineCount = 0;
 80056f8:	4b75      	ldr	r3, [pc, #468]	; (80058d0 <HAL_TIM_PeriodElapsedCallback+0x9f0>)
 80056fa:	2200      	movs	r2, #0
 80056fc:	701a      	strb	r2, [r3, #0]
			charCount = 0;
 80056fe:	4b75      	ldr	r3, [pc, #468]	; (80058d4 <HAL_TIM_PeriodElapsedCallback+0x9f4>)
 8005700:	2200      	movs	r2, #0
 8005702:	701a      	strb	r2, [r3, #0]
			isStart = 0;
 8005704:	4b74      	ldr	r3, [pc, #464]	; (80058d8 <HAL_TIM_PeriodElapsedCallback+0x9f8>)
 8005706:	2200      	movs	r2, #0
 8005708:	701a      	strb	r2, [r3, #0]
		}

		// }
		if (commandCase == 1) {
 800570a:	4b69      	ldr	r3, [pc, #420]	; (80058b0 <HAL_TIM_PeriodElapsedCallback+0x9d0>)
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	b2db      	uxtb	r3, r3
 8005710:	2b01      	cmp	r3, #1
 8005712:	d000      	beq.n	8005716 <HAL_TIM_PeriodElapsedCallback+0x836>
 8005714:	e0b5      	b.n	8005882 <HAL_TIM_PeriodElapsedCallback+0x9a2>
			uint8_t tLine = 99;
 8005716:	231a      	movs	r3, #26
 8005718:	33ff      	adds	r3, #255	; 0xff
 800571a:	2118      	movs	r1, #24
 800571c:	185b      	adds	r3, r3, r1
 800571e:	19db      	adds	r3, r3, r7
 8005720:	2263      	movs	r2, #99	; 0x63
 8005722:	701a      	strb	r2, [r3, #0]
			char *ptr;
			char *ptr2;
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 8005724:	238c      	movs	r3, #140	; 0x8c
 8005726:	005b      	lsls	r3, r3, #1
 8005728:	185b      	adds	r3, r3, r1
 800572a:	19db      	adds	r3, r3, r7
 800572c:	2200      	movs	r2, #0
 800572e:	701a      	strb	r2, [r3, #0]
 8005730:	e05b      	b.n	80057ea <HAL_TIM_PeriodElapsedCallback+0x90a>
				ptr = strstr(responseBuffer[i], "OK");
 8005732:	248c      	movs	r4, #140	; 0x8c
 8005734:	0064      	lsls	r4, r4, #1
 8005736:	2618      	movs	r6, #24
 8005738:	19a3      	adds	r3, r4, r6
 800573a:	19db      	adds	r3, r3, r7
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	2232      	movs	r2, #50	; 0x32
 8005740:	435a      	muls	r2, r3
 8005742:	4b5c      	ldr	r3, [pc, #368]	; (80058b4 <HAL_TIM_PeriodElapsedCallback+0x9d4>)
 8005744:	18d3      	adds	r3, r2, r3
 8005746:	4a65      	ldr	r2, [pc, #404]	; (80058dc <HAL_TIM_PeriodElapsedCallback+0x9fc>)
 8005748:	0011      	movs	r1, r2
 800574a:	0018      	movs	r0, r3
 800574c:	f009 f9a3 	bl	800ea96 <strstr>
 8005750:	0003      	movs	r3, r0
 8005752:	2598      	movs	r5, #152	; 0x98
 8005754:	19aa      	adds	r2, r5, r6
 8005756:	19d2      	adds	r2, r2, r7
 8005758:	6013      	str	r3, [r2, #0]
				ptr2 = strstr(responseBuffer[i], "ERROR");
 800575a:	19a3      	adds	r3, r4, r6
 800575c:	19db      	adds	r3, r3, r7
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	2232      	movs	r2, #50	; 0x32
 8005762:	435a      	muls	r2, r3
 8005764:	4b53      	ldr	r3, [pc, #332]	; (80058b4 <HAL_TIM_PeriodElapsedCallback+0x9d4>)
 8005766:	18d3      	adds	r3, r2, r3
 8005768:	4a5d      	ldr	r2, [pc, #372]	; (80058e0 <HAL_TIM_PeriodElapsedCallback+0xa00>)
 800576a:	0011      	movs	r1, r2
 800576c:	0018      	movs	r0, r3
 800576e:	f009 f992 	bl	800ea96 <strstr>
 8005772:	0003      	movs	r3, r0
 8005774:	2294      	movs	r2, #148	; 0x94
 8005776:	0031      	movs	r1, r6
 8005778:	1852      	adds	r2, r2, r1
 800577a:	19d2      	adds	r2, r2, r7
 800577c:	6013      	str	r3, [r2, #0]

				if (ptr != NULL) {
 800577e:	186b      	adds	r3, r5, r1
 8005780:	19db      	adds	r3, r3, r7
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d00e      	beq.n	80057a6 <HAL_TIM_PeriodElapsedCallback+0x8c6>
					tLine = i;
 8005788:	231a      	movs	r3, #26
 800578a:	33ff      	adds	r3, #255	; 0xff
 800578c:	185b      	adds	r3, r3, r1
 800578e:	19db      	adds	r3, r3, r7
 8005790:	1862      	adds	r2, r4, r1
 8005792:	19d2      	adds	r2, r2, r7
 8005794:	7812      	ldrb	r2, [r2, #0]
 8005796:	701a      	strb	r2, [r3, #0]
					tResponse = 'G';
 8005798:	2320      	movs	r3, #32
 800579a:	33ff      	adds	r3, #255	; 0xff
 800579c:	185b      	adds	r3, r3, r1
 800579e:	19db      	adds	r3, r3, r7
 80057a0:	2247      	movs	r2, #71	; 0x47
 80057a2:	701a      	strb	r2, [r3, #0]
					break;
 80057a4:	e029      	b.n	80057fa <HAL_TIM_PeriodElapsedCallback+0x91a>
				}
				if (ptr2 != NULL) {
 80057a6:	2394      	movs	r3, #148	; 0x94
 80057a8:	2118      	movs	r1, #24
 80057aa:	185b      	adds	r3, r3, r1
 80057ac:	19db      	adds	r3, r3, r7
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d010      	beq.n	80057d6 <HAL_TIM_PeriodElapsedCallback+0x8f6>
					tLine = i;
 80057b4:	231a      	movs	r3, #26
 80057b6:	33ff      	adds	r3, #255	; 0xff
 80057b8:	185b      	adds	r3, r3, r1
 80057ba:	19db      	adds	r3, r3, r7
 80057bc:	228c      	movs	r2, #140	; 0x8c
 80057be:	0052      	lsls	r2, r2, #1
 80057c0:	1852      	adds	r2, r2, r1
 80057c2:	19d2      	adds	r2, r2, r7
 80057c4:	7812      	ldrb	r2, [r2, #0]
 80057c6:	701a      	strb	r2, [r3, #0]
					tResponse = 'B';
 80057c8:	2320      	movs	r3, #32
 80057ca:	33ff      	adds	r3, #255	; 0xff
 80057cc:	185b      	adds	r3, r3, r1
 80057ce:	19db      	adds	r3, r3, r7
 80057d0:	2242      	movs	r2, #66	; 0x42
 80057d2:	701a      	strb	r2, [r3, #0]
					break;
 80057d4:	e011      	b.n	80057fa <HAL_TIM_PeriodElapsedCallback+0x91a>
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 80057d6:	218c      	movs	r1, #140	; 0x8c
 80057d8:	0049      	lsls	r1, r1, #1
 80057da:	2018      	movs	r0, #24
 80057dc:	180b      	adds	r3, r1, r0
 80057de:	19db      	adds	r3, r3, r7
 80057e0:	781a      	ldrb	r2, [r3, #0]
 80057e2:	180b      	adds	r3, r1, r0
 80057e4:	19db      	adds	r3, r3, r7
 80057e6:	3201      	adds	r2, #1
 80057e8:	701a      	strb	r2, [r3, #0]
 80057ea:	238c      	movs	r3, #140	; 0x8c
 80057ec:	005b      	lsls	r3, r3, #1
 80057ee:	2218      	movs	r2, #24
 80057f0:	189b      	adds	r3, r3, r2
 80057f2:	19db      	adds	r3, r3, r7
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	2b05      	cmp	r3, #5
 80057f8:	d99b      	bls.n	8005732 <HAL_TIM_PeriodElapsedCallback+0x852>
				}
			}
			if (tLine != 99) {
 80057fa:	231a      	movs	r3, #26
 80057fc:	33ff      	adds	r3, #255	; 0xff
 80057fe:	2218      	movs	r2, #24
 8005800:	189b      	adds	r3, r3, r2
 8005802:	19db      	adds	r3, r3, r7
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	2b63      	cmp	r3, #99	; 0x63
 8005808:	d021      	beq.n	800584e <HAL_TIM_PeriodElapsedCallback+0x96e>
				if (tResponse == 'G') {
 800580a:	2320      	movs	r3, #32
 800580c:	33ff      	adds	r3, #255	; 0xff
 800580e:	189b      	adds	r3, r3, r2
 8005810:	19db      	adds	r3, r3, r7
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	2b47      	cmp	r3, #71	; 0x47
 8005816:	d108      	bne.n	800582a <HAL_TIM_PeriodElapsedCallback+0x94a>
					isResponseOk = 1;
 8005818:	4b32      	ldr	r3, [pc, #200]	; (80058e4 <HAL_TIM_PeriodElapsedCallback+0xa04>)
 800581a:	2201      	movs	r2, #1
 800581c:	701a      	strb	r2, [r3, #0]
					clearit();
 800581e:	f001 f901 	bl	8006a24 <clearit>
					commandCase = 0;
 8005822:	4b23      	ldr	r3, [pc, #140]	; (80058b0 <HAL_TIM_PeriodElapsedCallback+0x9d0>)
 8005824:	2200      	movs	r2, #0
 8005826:	701a      	strb	r2, [r3, #0]
 8005828:	e360      	b.n	8005eec <HAL_TIM_PeriodElapsedCallback+0x100c>

				} else if (tResponse == 'B') {
 800582a:	2320      	movs	r3, #32
 800582c:	33ff      	adds	r3, #255	; 0xff
 800582e:	2218      	movs	r2, #24
 8005830:	189b      	adds	r3, r3, r2
 8005832:	19db      	adds	r3, r3, r7
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	2b42      	cmp	r3, #66	; 0x42
 8005838:	d000      	beq.n	800583c <HAL_TIM_PeriodElapsedCallback+0x95c>
 800583a:	e357      	b.n	8005eec <HAL_TIM_PeriodElapsedCallback+0x100c>
					isResponseOk = 0;
 800583c:	4b29      	ldr	r3, [pc, #164]	; (80058e4 <HAL_TIM_PeriodElapsedCallback+0xa04>)
 800583e:	2200      	movs	r2, #0
 8005840:	701a      	strb	r2, [r3, #0]
					clearit();
 8005842:	f001 f8ef 	bl	8006a24 <clearit>
					commandCase = 0;
 8005846:	4b1a      	ldr	r3, [pc, #104]	; (80058b0 <HAL_TIM_PeriodElapsedCallback+0x9d0>)
 8005848:	2200      	movs	r2, #0
 800584a:	701a      	strb	r2, [r3, #0]
 800584c:	e34e      	b.n	8005eec <HAL_TIM_PeriodElapsedCallback+0x100c>
				}
			} else {

				resTimeout--;
 800584e:	4b26      	ldr	r3, [pc, #152]	; (80058e8 <HAL_TIM_PeriodElapsedCallback+0xa08>)
 8005850:	881b      	ldrh	r3, [r3, #0]
 8005852:	b29b      	uxth	r3, r3
 8005854:	3b01      	subs	r3, #1
 8005856:	b29a      	uxth	r2, r3
 8005858:	4b23      	ldr	r3, [pc, #140]	; (80058e8 <HAL_TIM_PeriodElapsedCallback+0xa08>)
 800585a:	801a      	strh	r2, [r3, #0]
				if (resTimeout < 1) {
 800585c:	4b22      	ldr	r3, [pc, #136]	; (80058e8 <HAL_TIM_PeriodElapsedCallback+0xa08>)
 800585e:	881b      	ldrh	r3, [r3, #0]
 8005860:	b29b      	uxth	r3, r3
 8005862:	2b00      	cmp	r3, #0
 8005864:	d000      	beq.n	8005868 <HAL_TIM_PeriodElapsedCallback+0x988>
 8005866:	e341      	b.n	8005eec <HAL_TIM_PeriodElapsedCallback+0x100c>
					if (!recResponse) {
 8005868:	4b20      	ldr	r3, [pc, #128]	; (80058ec <HAL_TIM_PeriodElapsedCallback+0xa0c>)
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b00      	cmp	r3, #0
 8005870:	d101      	bne.n	8005876 <HAL_TIM_PeriodElapsedCallback+0x996>
						//printf("TIMEOUT HASH TAG\n");
						rebootsystem();
 8005872:	f000 fdd9 	bl	8006428 <rebootsystem>

					}
					clearit();
 8005876:	f001 f8d5 	bl	8006a24 <clearit>
					isResponseOk = 0;
 800587a:	4b1a      	ldr	r3, [pc, #104]	; (80058e4 <HAL_TIM_PeriodElapsedCallback+0xa04>)
 800587c:	2200      	movs	r2, #0
 800587e:	701a      	strb	r2, [r3, #0]
 8005880:	e334      	b.n	8005eec <HAL_TIM_PeriodElapsedCallback+0x100c>

				}
			}
		} else if (commandCase == 2) {
 8005882:	4b0b      	ldr	r3, [pc, #44]	; (80058b0 <HAL_TIM_PeriodElapsedCallback+0x9d0>)
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	b2db      	uxtb	r3, r3
 8005888:	2b02      	cmp	r3, #2
 800588a:	d000      	beq.n	800588e <HAL_TIM_PeriodElapsedCallback+0x9ae>
 800588c:	e08c      	b.n	80059a8 <HAL_TIM_PeriodElapsedCallback+0xac8>
			//CPIN Case
			uint8_t tLine = 99;
 800588e:	2318      	movs	r3, #24
 8005890:	33ff      	adds	r3, #255	; 0xff
 8005892:	2118      	movs	r1, #24
 8005894:	185b      	adds	r3, r3, r1
 8005896:	19db      	adds	r3, r3, r7
 8005898:	2263      	movs	r2, #99	; 0x63
 800589a:	701a      	strb	r2, [r3, #0]
			char *ptr;
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 800589c:	238b      	movs	r3, #139	; 0x8b
 800589e:	005b      	lsls	r3, r3, #1
 80058a0:	185b      	adds	r3, r3, r1
 80058a2:	19db      	adds	r3, r3, r7
 80058a4:	2200      	movs	r2, #0
 80058a6:	701a      	strb	r2, [r3, #0]
 80058a8:	e04e      	b.n	8005948 <HAL_TIM_PeriodElapsedCallback+0xa68>
 80058aa:	46c0      	nop			; (mov r8, r8)
 80058ac:	200009f6 	.word	0x200009f6
 80058b0:	2000085b 	.word	0x2000085b
 80058b4:	20000724 	.word	0x20000724
 80058b8:	08012ec4 	.word	0x08012ec4
 80058bc:	08012ecc 	.word	0x08012ecc
 80058c0:	200009f7 	.word	0x200009f7
 80058c4:	20000856 	.word	0x20000856
 80058c8:	200009f4 	.word	0x200009f4
 80058cc:	200003bc 	.word	0x200003bc
 80058d0:	20000850 	.word	0x20000850
 80058d4:	20000851 	.word	0x20000851
 80058d8:	20000854 	.word	0x20000854
 80058dc:	08012ed8 	.word	0x08012ed8
 80058e0:	08012edc 	.word	0x08012edc
 80058e4:	2000085c 	.word	0x2000085c
 80058e8:	20000858 	.word	0x20000858
 80058ec:	2000085d 	.word	0x2000085d
				ptr = strstr(responseBuffer[i], "READY");
 80058f0:	248b      	movs	r4, #139	; 0x8b
 80058f2:	0064      	lsls	r4, r4, #1
 80058f4:	2518      	movs	r5, #24
 80058f6:	1963      	adds	r3, r4, r5
 80058f8:	19db      	adds	r3, r3, r7
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	2232      	movs	r2, #50	; 0x32
 80058fe:	435a      	muls	r2, r3
 8005900:	4bcf      	ldr	r3, [pc, #828]	; (8005c40 <HAL_TIM_PeriodElapsedCallback+0xd60>)
 8005902:	18d3      	adds	r3, r2, r3
 8005904:	4acf      	ldr	r2, [pc, #828]	; (8005c44 <HAL_TIM_PeriodElapsedCallback+0xd64>)
 8005906:	0011      	movs	r1, r2
 8005908:	0018      	movs	r0, r3
 800590a:	f009 f8c4 	bl	800ea96 <strstr>
 800590e:	0003      	movs	r3, r0
 8005910:	229c      	movs	r2, #156	; 0x9c
 8005912:	1951      	adds	r1, r2, r5
 8005914:	19c9      	adds	r1, r1, r7
 8005916:	600b      	str	r3, [r1, #0]
				if (ptr != NULL) {
 8005918:	1953      	adds	r3, r2, r5
 800591a:	19db      	adds	r3, r3, r7
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d008      	beq.n	8005934 <HAL_TIM_PeriodElapsedCallback+0xa54>
					tLine = i;
 8005922:	2318      	movs	r3, #24
 8005924:	33ff      	adds	r3, #255	; 0xff
 8005926:	195b      	adds	r3, r3, r5
 8005928:	19db      	adds	r3, r3, r7
 800592a:	1962      	adds	r2, r4, r5
 800592c:	19d2      	adds	r2, r2, r7
 800592e:	7812      	ldrb	r2, [r2, #0]
 8005930:	701a      	strb	r2, [r3, #0]
					break;
 8005932:	e011      	b.n	8005958 <HAL_TIM_PeriodElapsedCallback+0xa78>
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 8005934:	218b      	movs	r1, #139	; 0x8b
 8005936:	0049      	lsls	r1, r1, #1
 8005938:	2018      	movs	r0, #24
 800593a:	180b      	adds	r3, r1, r0
 800593c:	19db      	adds	r3, r3, r7
 800593e:	781a      	ldrb	r2, [r3, #0]
 8005940:	180b      	adds	r3, r1, r0
 8005942:	19db      	adds	r3, r3, r7
 8005944:	3201      	adds	r2, #1
 8005946:	701a      	strb	r2, [r3, #0]
 8005948:	238b      	movs	r3, #139	; 0x8b
 800594a:	005b      	lsls	r3, r3, #1
 800594c:	2218      	movs	r2, #24
 800594e:	189b      	adds	r3, r3, r2
 8005950:	19db      	adds	r3, r3, r7
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	2b05      	cmp	r3, #5
 8005956:	d9cb      	bls.n	80058f0 <HAL_TIM_PeriodElapsedCallback+0xa10>
				}
			}
			if (tLine != 99) {
 8005958:	2318      	movs	r3, #24
 800595a:	33ff      	adds	r3, #255	; 0xff
 800595c:	2218      	movs	r2, #24
 800595e:	189b      	adds	r3, r3, r2
 8005960:	19db      	adds	r3, r3, r7
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	2b63      	cmp	r3, #99	; 0x63
 8005966:	d005      	beq.n	8005974 <HAL_TIM_PeriodElapsedCallback+0xa94>
				isResponseOk = 1;
 8005968:	4bb7      	ldr	r3, [pc, #732]	; (8005c48 <HAL_TIM_PeriodElapsedCallback+0xd68>)
 800596a:	2201      	movs	r2, #1
 800596c:	701a      	strb	r2, [r3, #0]
				clearit();
 800596e:	f001 f859 	bl	8006a24 <clearit>
 8005972:	e2bb      	b.n	8005eec <HAL_TIM_PeriodElapsedCallback+0x100c>
			} else {
				resTimeout--;
 8005974:	4bb5      	ldr	r3, [pc, #724]	; (8005c4c <HAL_TIM_PeriodElapsedCallback+0xd6c>)
 8005976:	881b      	ldrh	r3, [r3, #0]
 8005978:	b29b      	uxth	r3, r3
 800597a:	3b01      	subs	r3, #1
 800597c:	b29a      	uxth	r2, r3
 800597e:	4bb3      	ldr	r3, [pc, #716]	; (8005c4c <HAL_TIM_PeriodElapsedCallback+0xd6c>)
 8005980:	801a      	strh	r2, [r3, #0]
				if (resTimeout < 1) {
 8005982:	4bb2      	ldr	r3, [pc, #712]	; (8005c4c <HAL_TIM_PeriodElapsedCallback+0xd6c>)
 8005984:	881b      	ldrh	r3, [r3, #0]
 8005986:	b29b      	uxth	r3, r3
 8005988:	2b00      	cmp	r3, #0
 800598a:	d000      	beq.n	800598e <HAL_TIM_PeriodElapsedCallback+0xaae>
 800598c:	e2ae      	b.n	8005eec <HAL_TIM_PeriodElapsedCallback+0x100c>
					if (!recResponse) {
 800598e:	4bb0      	ldr	r3, [pc, #704]	; (8005c50 <HAL_TIM_PeriodElapsedCallback+0xd70>)
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	b2db      	uxtb	r3, r3
 8005994:	2b00      	cmp	r3, #0
 8005996:	d101      	bne.n	800599c <HAL_TIM_PeriodElapsedCallback+0xabc>
						rebootsystem();
 8005998:	f000 fd46 	bl	8006428 <rebootsystem>

					}
					clearit();
 800599c:	f001 f842 	bl	8006a24 <clearit>
					isResponseOk = 0;
 80059a0:	4ba9      	ldr	r3, [pc, #676]	; (8005c48 <HAL_TIM_PeriodElapsedCallback+0xd68>)
 80059a2:	2200      	movs	r2, #0
 80059a4:	701a      	strb	r2, [r3, #0]
 80059a6:	e2a1      	b.n	8005eec <HAL_TIM_PeriodElapsedCallback+0x100c>
				}
			}
		} else if (commandCase == 3) {
 80059a8:	4baa      	ldr	r3, [pc, #680]	; (8005c54 <HAL_TIM_PeriodElapsedCallback+0xd74>)
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	2b03      	cmp	r3, #3
 80059b0:	d000      	beq.n	80059b4 <HAL_TIM_PeriodElapsedCallback+0xad4>
 80059b2:	e0b6      	b.n	8005b22 <HAL_TIM_PeriodElapsedCallback+0xc42>
			// CREG? / CGREG? case
			uint8_t tLine = 99;
 80059b4:	2316      	movs	r3, #22
 80059b6:	33ff      	adds	r3, #255	; 0xff
 80059b8:	2118      	movs	r1, #24
 80059ba:	185b      	adds	r3, r3, r1
 80059bc:	19db      	adds	r3, r3, r7
 80059be:	2263      	movs	r2, #99	; 0x63
 80059c0:	701a      	strb	r2, [r3, #0]
			char *ptr;
			char *ptr2;
			char *ptr3;
			char *ptr4;
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 80059c2:	238a      	movs	r3, #138	; 0x8a
 80059c4:	005b      	lsls	r3, r3, #1
 80059c6:	185b      	adds	r3, r3, r1
 80059c8:	19db      	adds	r3, r3, r7
 80059ca:	2200      	movs	r2, #0
 80059cc:	701a      	strb	r2, [r3, #0]
 80059ce:	e075      	b.n	8005abc <HAL_TIM_PeriodElapsedCallback+0xbdc>
				ptr = strstr(responseBuffer[i], "+CREG: 0,1");
 80059d0:	248a      	movs	r4, #138	; 0x8a
 80059d2:	0064      	lsls	r4, r4, #1
 80059d4:	2618      	movs	r6, #24
 80059d6:	19a3      	adds	r3, r4, r6
 80059d8:	19db      	adds	r3, r3, r7
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	2232      	movs	r2, #50	; 0x32
 80059de:	435a      	muls	r2, r3
 80059e0:	4b97      	ldr	r3, [pc, #604]	; (8005c40 <HAL_TIM_PeriodElapsedCallback+0xd60>)
 80059e2:	18d3      	adds	r3, r2, r3
 80059e4:	4a9c      	ldr	r2, [pc, #624]	; (8005c58 <HAL_TIM_PeriodElapsedCallback+0xd78>)
 80059e6:	0011      	movs	r1, r2
 80059e8:	0018      	movs	r0, r3
 80059ea:	f009 f854 	bl	800ea96 <strstr>
 80059ee:	0003      	movs	r3, r0
 80059f0:	25ac      	movs	r5, #172	; 0xac
 80059f2:	19aa      	adds	r2, r5, r6
 80059f4:	19d2      	adds	r2, r2, r7
 80059f6:	6013      	str	r3, [r2, #0]
				ptr2 = strstr(responseBuffer[i], "+CREG: 0,5");
 80059f8:	19a3      	adds	r3, r4, r6
 80059fa:	19db      	adds	r3, r3, r7
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	2232      	movs	r2, #50	; 0x32
 8005a00:	435a      	muls	r2, r3
 8005a02:	4b8f      	ldr	r3, [pc, #572]	; (8005c40 <HAL_TIM_PeriodElapsedCallback+0xd60>)
 8005a04:	18d3      	adds	r3, r2, r3
 8005a06:	4a95      	ldr	r2, [pc, #596]	; (8005c5c <HAL_TIM_PeriodElapsedCallback+0xd7c>)
 8005a08:	0011      	movs	r1, r2
 8005a0a:	0018      	movs	r0, r3
 8005a0c:	f009 f843 	bl	800ea96 <strstr>
 8005a10:	0003      	movs	r3, r0
 8005a12:	26a8      	movs	r6, #168	; 0xa8
 8005a14:	2018      	movs	r0, #24
 8005a16:	1832      	adds	r2, r6, r0
 8005a18:	19d2      	adds	r2, r2, r7
 8005a1a:	6013      	str	r3, [r2, #0]
				ptr3 = strstr(responseBuffer[i], "+CGREG: 0,1");
 8005a1c:	1823      	adds	r3, r4, r0
 8005a1e:	19db      	adds	r3, r3, r7
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	2232      	movs	r2, #50	; 0x32
 8005a24:	435a      	muls	r2, r3
 8005a26:	4b86      	ldr	r3, [pc, #536]	; (8005c40 <HAL_TIM_PeriodElapsedCallback+0xd60>)
 8005a28:	18d3      	adds	r3, r2, r3
 8005a2a:	4a8d      	ldr	r2, [pc, #564]	; (8005c60 <HAL_TIM_PeriodElapsedCallback+0xd80>)
 8005a2c:	0011      	movs	r1, r2
 8005a2e:	0018      	movs	r0, r3
 8005a30:	f009 f831 	bl	800ea96 <strstr>
 8005a34:	0003      	movs	r3, r0
 8005a36:	22a4      	movs	r2, #164	; 0xa4
 8005a38:	2018      	movs	r0, #24
 8005a3a:	1812      	adds	r2, r2, r0
 8005a3c:	19d1      	adds	r1, r2, r7
 8005a3e:	600b      	str	r3, [r1, #0]
				ptr4 = strstr(responseBuffer[i], "+CGREG: 0,5");
 8005a40:	1823      	adds	r3, r4, r0
 8005a42:	19db      	adds	r3, r3, r7
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	2232      	movs	r2, #50	; 0x32
 8005a48:	435a      	muls	r2, r3
 8005a4a:	4b7d      	ldr	r3, [pc, #500]	; (8005c40 <HAL_TIM_PeriodElapsedCallback+0xd60>)
 8005a4c:	18d3      	adds	r3, r2, r3
 8005a4e:	4a85      	ldr	r2, [pc, #532]	; (8005c64 <HAL_TIM_PeriodElapsedCallback+0xd84>)
 8005a50:	0011      	movs	r1, r2
 8005a52:	0018      	movs	r0, r3
 8005a54:	f009 f81f 	bl	800ea96 <strstr>
 8005a58:	0003      	movs	r3, r0
 8005a5a:	21a0      	movs	r1, #160	; 0xa0
 8005a5c:	2218      	movs	r2, #24
 8005a5e:	1888      	adds	r0, r1, r2
 8005a60:	19c0      	adds	r0, r0, r7
 8005a62:	6003      	str	r3, [r0, #0]
				if (ptr != NULL || ptr2 != NULL || ptr3 != NULL || ptr4 != NULL) {
 8005a64:	0010      	movs	r0, r2
 8005a66:	182b      	adds	r3, r5, r0
 8005a68:	19db      	adds	r3, r3, r7
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d10f      	bne.n	8005a90 <HAL_TIM_PeriodElapsedCallback+0xbb0>
 8005a70:	1833      	adds	r3, r6, r0
 8005a72:	19db      	adds	r3, r3, r7
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d10a      	bne.n	8005a90 <HAL_TIM_PeriodElapsedCallback+0xbb0>
 8005a7a:	22a4      	movs	r2, #164	; 0xa4
 8005a7c:	1813      	adds	r3, r2, r0
 8005a7e:	19db      	adds	r3, r3, r7
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d104      	bne.n	8005a90 <HAL_TIM_PeriodElapsedCallback+0xbb0>
 8005a86:	180b      	adds	r3, r1, r0
 8005a88:	19db      	adds	r3, r3, r7
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00b      	beq.n	8005aa8 <HAL_TIM_PeriodElapsedCallback+0xbc8>
					tLine = i;
 8005a90:	2316      	movs	r3, #22
 8005a92:	33ff      	adds	r3, #255	; 0xff
 8005a94:	2118      	movs	r1, #24
 8005a96:	185b      	adds	r3, r3, r1
 8005a98:	19db      	adds	r3, r3, r7
 8005a9a:	228a      	movs	r2, #138	; 0x8a
 8005a9c:	0052      	lsls	r2, r2, #1
 8005a9e:	1852      	adds	r2, r2, r1
 8005aa0:	19d2      	adds	r2, r2, r7
 8005aa2:	7812      	ldrb	r2, [r2, #0]
 8005aa4:	701a      	strb	r2, [r3, #0]
					break;
 8005aa6:	e011      	b.n	8005acc <HAL_TIM_PeriodElapsedCallback+0xbec>
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 8005aa8:	218a      	movs	r1, #138	; 0x8a
 8005aaa:	0049      	lsls	r1, r1, #1
 8005aac:	2018      	movs	r0, #24
 8005aae:	180b      	adds	r3, r1, r0
 8005ab0:	19db      	adds	r3, r3, r7
 8005ab2:	781a      	ldrb	r2, [r3, #0]
 8005ab4:	180b      	adds	r3, r1, r0
 8005ab6:	19db      	adds	r3, r3, r7
 8005ab8:	3201      	adds	r2, #1
 8005aba:	701a      	strb	r2, [r3, #0]
 8005abc:	238a      	movs	r3, #138	; 0x8a
 8005abe:	005b      	lsls	r3, r3, #1
 8005ac0:	2218      	movs	r2, #24
 8005ac2:	189b      	adds	r3, r3, r2
 8005ac4:	19db      	adds	r3, r3, r7
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	2b05      	cmp	r3, #5
 8005aca:	d981      	bls.n	80059d0 <HAL_TIM_PeriodElapsedCallback+0xaf0>
				}
			}
			if (tLine != 99) {
 8005acc:	2316      	movs	r3, #22
 8005ace:	33ff      	adds	r3, #255	; 0xff
 8005ad0:	2218      	movs	r2, #24
 8005ad2:	189b      	adds	r3, r3, r2
 8005ad4:	19db      	adds	r3, r3, r7
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	2b63      	cmp	r3, #99	; 0x63
 8005ada:	d008      	beq.n	8005aee <HAL_TIM_PeriodElapsedCallback+0xc0e>
				isReg = 1;
 8005adc:	4b62      	ldr	r3, [pc, #392]	; (8005c68 <HAL_TIM_PeriodElapsedCallback+0xd88>)
 8005ade:	2201      	movs	r2, #1
 8005ae0:	701a      	strb	r2, [r3, #0]
				isResponseOk = 1;
 8005ae2:	4b59      	ldr	r3, [pc, #356]	; (8005c48 <HAL_TIM_PeriodElapsedCallback+0xd68>)
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	701a      	strb	r2, [r3, #0]
				clearit();
 8005ae8:	f000 ff9c 	bl	8006a24 <clearit>
 8005aec:	e1fe      	b.n	8005eec <HAL_TIM_PeriodElapsedCallback+0x100c>

			} else {
				resTimeout--;
 8005aee:	4b57      	ldr	r3, [pc, #348]	; (8005c4c <HAL_TIM_PeriodElapsedCallback+0xd6c>)
 8005af0:	881b      	ldrh	r3, [r3, #0]
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	3b01      	subs	r3, #1
 8005af6:	b29a      	uxth	r2, r3
 8005af8:	4b54      	ldr	r3, [pc, #336]	; (8005c4c <HAL_TIM_PeriodElapsedCallback+0xd6c>)
 8005afa:	801a      	strh	r2, [r3, #0]
				if (resTimeout < 1) {
 8005afc:	4b53      	ldr	r3, [pc, #332]	; (8005c4c <HAL_TIM_PeriodElapsedCallback+0xd6c>)
 8005afe:	881b      	ldrh	r3, [r3, #0]
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d000      	beq.n	8005b08 <HAL_TIM_PeriodElapsedCallback+0xc28>
 8005b06:	e1f1      	b.n	8005eec <HAL_TIM_PeriodElapsedCallback+0x100c>
					if (!recResponse) {
 8005b08:	4b51      	ldr	r3, [pc, #324]	; (8005c50 <HAL_TIM_PeriodElapsedCallback+0xd70>)
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d101      	bne.n	8005b16 <HAL_TIM_PeriodElapsedCallback+0xc36>
						rebootsystem();
 8005b12:	f000 fc89 	bl	8006428 <rebootsystem>
					}
					clearit();
 8005b16:	f000 ff85 	bl	8006a24 <clearit>
					isResponseOk = 0;
 8005b1a:	4b4b      	ldr	r3, [pc, #300]	; (8005c48 <HAL_TIM_PeriodElapsedCallback+0xd68>)
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	701a      	strb	r2, [r3, #0]
 8005b20:	e1e4      	b.n	8005eec <HAL_TIM_PeriodElapsedCallback+0x100c>
				}
			}
		}

		else if (commandCase == 4) {
 8005b22:	4b4c      	ldr	r3, [pc, #304]	; (8005c54 <HAL_TIM_PeriodElapsedCallback+0xd74>)
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	2b04      	cmp	r3, #4
 8005b2a:	d000      	beq.n	8005b2e <HAL_TIM_PeriodElapsedCallback+0xc4e>
 8005b2c:	e0fc      	b.n	8005d28 <HAL_TIM_PeriodElapsedCallback+0xe48>
			//CGSN (IMEI) case
			uint8_t tLine = 99;
 8005b2e:	2314      	movs	r3, #20
 8005b30:	33ff      	adds	r3, #255	; 0xff
 8005b32:	2118      	movs	r1, #24
 8005b34:	185b      	adds	r3, r3, r1
 8005b36:	19db      	adds	r3, r3, r7
 8005b38:	2263      	movs	r2, #99	; 0x63
 8005b3a:	701a      	strb	r2, [r3, #0]
			char *ptr;
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 8005b3c:	2389      	movs	r3, #137	; 0x89
 8005b3e:	005b      	lsls	r3, r3, #1
 8005b40:	185b      	adds	r3, r3, r1
 8005b42:	19db      	adds	r3, r3, r7
 8005b44:	2200      	movs	r2, #0
 8005b46:	701a      	strb	r2, [r3, #0]
 8005b48:	e02b      	b.n	8005ba2 <HAL_TIM_PeriodElapsedCallback+0xcc2>
				ptr = strstr(responseBuffer[i], "OK");
 8005b4a:	2489      	movs	r4, #137	; 0x89
 8005b4c:	0064      	lsls	r4, r4, #1
 8005b4e:	2518      	movs	r5, #24
 8005b50:	1963      	adds	r3, r4, r5
 8005b52:	19db      	adds	r3, r3, r7
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	2232      	movs	r2, #50	; 0x32
 8005b58:	435a      	muls	r2, r3
 8005b5a:	4b39      	ldr	r3, [pc, #228]	; (8005c40 <HAL_TIM_PeriodElapsedCallback+0xd60>)
 8005b5c:	18d3      	adds	r3, r2, r3
 8005b5e:	4a43      	ldr	r2, [pc, #268]	; (8005c6c <HAL_TIM_PeriodElapsedCallback+0xd8c>)
 8005b60:	0011      	movs	r1, r2
 8005b62:	0018      	movs	r0, r3
 8005b64:	f008 ff97 	bl	800ea96 <strstr>
 8005b68:	0003      	movs	r3, r0
 8005b6a:	22b0      	movs	r2, #176	; 0xb0
 8005b6c:	1951      	adds	r1, r2, r5
 8005b6e:	19c9      	adds	r1, r1, r7
 8005b70:	600b      	str	r3, [r1, #0]
				if (ptr != NULL) {
 8005b72:	1953      	adds	r3, r2, r5
 8005b74:	19db      	adds	r3, r3, r7
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d008      	beq.n	8005b8e <HAL_TIM_PeriodElapsedCallback+0xcae>
					tLine = i;
 8005b7c:	2314      	movs	r3, #20
 8005b7e:	33ff      	adds	r3, #255	; 0xff
 8005b80:	195b      	adds	r3, r3, r5
 8005b82:	19db      	adds	r3, r3, r7
 8005b84:	1962      	adds	r2, r4, r5
 8005b86:	19d2      	adds	r2, r2, r7
 8005b88:	7812      	ldrb	r2, [r2, #0]
 8005b8a:	701a      	strb	r2, [r3, #0]
					break;
 8005b8c:	e011      	b.n	8005bb2 <HAL_TIM_PeriodElapsedCallback+0xcd2>
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 8005b8e:	2189      	movs	r1, #137	; 0x89
 8005b90:	0049      	lsls	r1, r1, #1
 8005b92:	2018      	movs	r0, #24
 8005b94:	180b      	adds	r3, r1, r0
 8005b96:	19db      	adds	r3, r3, r7
 8005b98:	781a      	ldrb	r2, [r3, #0]
 8005b9a:	180b      	adds	r3, r1, r0
 8005b9c:	19db      	adds	r3, r3, r7
 8005b9e:	3201      	adds	r2, #1
 8005ba0:	701a      	strb	r2, [r3, #0]
 8005ba2:	2389      	movs	r3, #137	; 0x89
 8005ba4:	005b      	lsls	r3, r3, #1
 8005ba6:	2218      	movs	r2, #24
 8005ba8:	189b      	adds	r3, r3, r2
 8005baa:	19db      	adds	r3, r3, r7
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	2b05      	cmp	r3, #5
 8005bb0:	d9cb      	bls.n	8005b4a <HAL_TIM_PeriodElapsedCallback+0xc6a>
				}
			}
			if (tLine != 99) {
 8005bb2:	2414      	movs	r4, #20
 8005bb4:	34ff      	adds	r4, #255	; 0xff
 8005bb6:	2118      	movs	r1, #24
 8005bb8:	1863      	adds	r3, r4, r1
 8005bba:	19db      	adds	r3, r3, r7
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	2b63      	cmp	r3, #99	; 0x63
 8005bc0:	d100      	bne.n	8005bc4 <HAL_TIM_PeriodElapsedCallback+0xce4>
 8005bc2:	e097      	b.n	8005cf4 <HAL_TIM_PeriodElapsedCallback+0xe14>
				isResponseOk = 1;
 8005bc4:	4b20      	ldr	r3, [pc, #128]	; (8005c48 <HAL_TIM_PeriodElapsedCallback+0xd68>)
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	701a      	strb	r2, [r3, #0]
				//to-do with that line
				char p[10];
				memset(p, 0, sizeof(p));
 8005bca:	2574      	movs	r5, #116	; 0x74
 8005bcc:	000e      	movs	r6, r1
 8005bce:	186b      	adds	r3, r5, r1
 8005bd0:	19db      	adds	r3, r3, r7
 8005bd2:	220a      	movs	r2, #10
 8005bd4:	2100      	movs	r1, #0
 8005bd6:	0018      	movs	r0, r3
 8005bd8:	f008 ff05 	bl	800e9e6 <memset>
				char *myt;
				myt = responseBuffer[tLine - 2];
 8005bdc:	0031      	movs	r1, r6
 8005bde:	1863      	adds	r3, r4, r1
 8005be0:	19db      	adds	r3, r3, r7
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	3b02      	subs	r3, #2
 8005be6:	2232      	movs	r2, #50	; 0x32
 8005be8:	435a      	muls	r2, r3
 8005bea:	4b15      	ldr	r3, [pc, #84]	; (8005c40 <HAL_TIM_PeriodElapsedCallback+0xd60>)
 8005bec:	18d3      	adds	r3, r2, r3
 8005bee:	2486      	movs	r4, #134	; 0x86
 8005bf0:	0064      	lsls	r4, r4, #1
 8005bf2:	000e      	movs	r6, r1
 8005bf4:	19a2      	adds	r2, r4, r6
 8005bf6:	19d2      	adds	r2, r2, r7
 8005bf8:	6013      	str	r3, [r2, #0]
				strncpy(p, myt, 1);
 8005bfa:	19a3      	adds	r3, r4, r6
 8005bfc:	19db      	adds	r3, r3, r7
 8005bfe:	6819      	ldr	r1, [r3, #0]
 8005c00:	19ab      	adds	r3, r5, r6
 8005c02:	19db      	adds	r3, r3, r7
 8005c04:	2201      	movs	r2, #1
 8005c06:	0018      	movs	r0, r3
 8005c08:	f008 ff31 	bl	800ea6e <strncpy>
				imei[0] = (int) strtol(p, NULL, 16);
 8005c0c:	19ab      	adds	r3, r5, r6
 8005c0e:	19db      	adds	r3, r3, r7
 8005c10:	2210      	movs	r2, #16
 8005c12:	2100      	movs	r1, #0
 8005c14:	0018      	movs	r0, r3
 8005c16:	f009 fe65 	bl	800f8e4 <strtol>
 8005c1a:	0003      	movs	r3, r0
 8005c1c:	b2da      	uxtb	r2, r3
 8005c1e:	4b14      	ldr	r3, [pc, #80]	; (8005c70 <HAL_TIM_PeriodElapsedCallback+0xd90>)
 8005c20:	701a      	strb	r2, [r3, #0]
				myt++;
 8005c22:	19a3      	adds	r3, r4, r6
 8005c24:	19db      	adds	r3, r3, r7
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	3301      	adds	r3, #1
 8005c2a:	19a2      	adds	r2, r4, r6
 8005c2c:	19d2      	adds	r2, r2, r7
 8005c2e:	6013      	str	r3, [r2, #0]
				for (int i = 1; i < 8; i++) {
 8005c30:	2301      	movs	r3, #1
 8005c32:	2284      	movs	r2, #132	; 0x84
 8005c34:	0052      	lsls	r2, r2, #1
 8005c36:	1992      	adds	r2, r2, r6
 8005c38:	19d2      	adds	r2, r2, r7
 8005c3a:	6013      	str	r3, [r2, #0]
 8005c3c:	e04f      	b.n	8005cde <HAL_TIM_PeriodElapsedCallback+0xdfe>
 8005c3e:	46c0      	nop			; (mov r8, r8)
 8005c40:	20000724 	.word	0x20000724
 8005c44:	08012ee4 	.word	0x08012ee4
 8005c48:	2000085c 	.word	0x2000085c
 8005c4c:	20000858 	.word	0x20000858
 8005c50:	2000085d 	.word	0x2000085d
 8005c54:	2000085b 	.word	0x2000085b
 8005c58:	08012eec 	.word	0x08012eec
 8005c5c:	08012ef8 	.word	0x08012ef8
 8005c60:	08012f04 	.word	0x08012f04
 8005c64:	08012f10 	.word	0x08012f10
 8005c68:	200009f5 	.word	0x200009f5
 8005c6c:	08012ed8 	.word	0x08012ed8
 8005c70:	20000860 	.word	0x20000860
					memset(p, 0, sizeof(p));
 8005c74:	2474      	movs	r4, #116	; 0x74
 8005c76:	2618      	movs	r6, #24
 8005c78:	19a3      	adds	r3, r4, r6
 8005c7a:	19db      	adds	r3, r3, r7
 8005c7c:	220a      	movs	r2, #10
 8005c7e:	2100      	movs	r1, #0
 8005c80:	0018      	movs	r0, r3
 8005c82:	f008 feb0 	bl	800e9e6 <memset>
					strncpy(p, myt, 2);
 8005c86:	2586      	movs	r5, #134	; 0x86
 8005c88:	006d      	lsls	r5, r5, #1
 8005c8a:	19ab      	adds	r3, r5, r6
 8005c8c:	19db      	adds	r3, r3, r7
 8005c8e:	6819      	ldr	r1, [r3, #0]
 8005c90:	19a3      	adds	r3, r4, r6
 8005c92:	19db      	adds	r3, r3, r7
 8005c94:	2202      	movs	r2, #2
 8005c96:	0018      	movs	r0, r3
 8005c98:	f008 fee9 	bl	800ea6e <strncpy>
					imei[i] = (int) strtol(p, NULL, 16);
 8005c9c:	19a3      	adds	r3, r4, r6
 8005c9e:	19db      	adds	r3, r3, r7
 8005ca0:	2210      	movs	r2, #16
 8005ca2:	2100      	movs	r1, #0
 8005ca4:	0018      	movs	r0, r3
 8005ca6:	f009 fe1d 	bl	800f8e4 <strtol>
 8005caa:	0003      	movs	r3, r0
 8005cac:	b2d9      	uxtb	r1, r3
 8005cae:	4ae1      	ldr	r2, [pc, #900]	; (8006034 <HAL_TIM_PeriodElapsedCallback+0x1154>)
 8005cb0:	2084      	movs	r0, #132	; 0x84
 8005cb2:	0040      	lsls	r0, r0, #1
 8005cb4:	0034      	movs	r4, r6
 8005cb6:	1903      	adds	r3, r0, r4
 8005cb8:	19db      	adds	r3, r3, r7
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	18d3      	adds	r3, r2, r3
 8005cbe:	1c0a      	adds	r2, r1, #0
 8005cc0:	701a      	strb	r2, [r3, #0]
					myt += 2;
 8005cc2:	192b      	adds	r3, r5, r4
 8005cc4:	19db      	adds	r3, r3, r7
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	3302      	adds	r3, #2
 8005cca:	192a      	adds	r2, r5, r4
 8005ccc:	19d2      	adds	r2, r2, r7
 8005cce:	6013      	str	r3, [r2, #0]
				for (int i = 1; i < 8; i++) {
 8005cd0:	1903      	adds	r3, r0, r4
 8005cd2:	19db      	adds	r3, r3, r7
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	1902      	adds	r2, r0, r4
 8005cda:	19d2      	adds	r2, r2, r7
 8005cdc:	6013      	str	r3, [r2, #0]
 8005cde:	2384      	movs	r3, #132	; 0x84
 8005ce0:	005b      	lsls	r3, r3, #1
 8005ce2:	2218      	movs	r2, #24
 8005ce4:	189b      	adds	r3, r3, r2
 8005ce6:	19db      	adds	r3, r3, r7
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2b07      	cmp	r3, #7
 8005cec:	ddc2      	ble.n	8005c74 <HAL_TIM_PeriodElapsedCallback+0xd94>
				}
				clearit();
 8005cee:	f000 fe99 	bl	8006a24 <clearit>
 8005cf2:	e0fb      	b.n	8005eec <HAL_TIM_PeriodElapsedCallback+0x100c>

			} else {
				resTimeout--;
 8005cf4:	4bd0      	ldr	r3, [pc, #832]	; (8006038 <HAL_TIM_PeriodElapsedCallback+0x1158>)
 8005cf6:	881b      	ldrh	r3, [r3, #0]
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	b29a      	uxth	r2, r3
 8005cfe:	4bce      	ldr	r3, [pc, #824]	; (8006038 <HAL_TIM_PeriodElapsedCallback+0x1158>)
 8005d00:	801a      	strh	r2, [r3, #0]
				if (resTimeout < 1) {
 8005d02:	4bcd      	ldr	r3, [pc, #820]	; (8006038 <HAL_TIM_PeriodElapsedCallback+0x1158>)
 8005d04:	881b      	ldrh	r3, [r3, #0]
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d000      	beq.n	8005d0e <HAL_TIM_PeriodElapsedCallback+0xe2e>
 8005d0c:	e0ee      	b.n	8005eec <HAL_TIM_PeriodElapsedCallback+0x100c>
					if (!recResponse) {
 8005d0e:	4bcb      	ldr	r3, [pc, #812]	; (800603c <HAL_TIM_PeriodElapsedCallback+0x115c>)
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d101      	bne.n	8005d1c <HAL_TIM_PeriodElapsedCallback+0xe3c>
						rebootsystem();
 8005d18:	f000 fb86 	bl	8006428 <rebootsystem>
					}
					isResponseOk = 0;
 8005d1c:	4bc8      	ldr	r3, [pc, #800]	; (8006040 <HAL_TIM_PeriodElapsedCallback+0x1160>)
 8005d1e:	2200      	movs	r2, #0
 8005d20:	701a      	strb	r2, [r3, #0]
					clearit();
 8005d22:	f000 fe7f 	bl	8006a24 <clearit>
 8005d26:	e0e1      	b.n	8005eec <HAL_TIM_PeriodElapsedCallback+0x100c>

				}
			}
		} else if (commandCase == 5) {
 8005d28:	4bc6      	ldr	r3, [pc, #792]	; (8006044 <HAL_TIM_PeriodElapsedCallback+0x1164>)
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	2b05      	cmp	r3, #5
 8005d30:	d000      	beq.n	8005d34 <HAL_TIM_PeriodElapsedCallback+0xe54>
 8005d32:	e0db      	b.n	8005eec <HAL_TIM_PeriodElapsedCallback+0x100c>
			//tcp open case
			uint8_t tLine = 99;
 8005d34:	2308      	movs	r3, #8
 8005d36:	33ff      	adds	r3, #255	; 0xff
 8005d38:	2218      	movs	r2, #24
 8005d3a:	189b      	adds	r3, r3, r2
 8005d3c:	19db      	adds	r3, r3, r7
 8005d3e:	2263      	movs	r2, #99	; 0x63
 8005d40:	701a      	strb	r2, [r3, #0]
			char *ptr;
			char *ptr2;
			char *ptr3;
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 8005d42:	238f      	movs	r3, #143	; 0x8f
 8005d44:	005b      	lsls	r3, r3, #1
 8005d46:	18fb      	adds	r3, r7, r3
 8005d48:	2200      	movs	r2, #0
 8005d4a:	701a      	strb	r2, [r3, #0]
 8005d4c:	e083      	b.n	8005e56 <HAL_TIM_PeriodElapsedCallback+0xf76>
				ptr = strstr(responseBuffer[i], "ALREADY CONNECT"); //todo check wether in data mode or not
 8005d4e:	268f      	movs	r6, #143	; 0x8f
 8005d50:	0076      	lsls	r6, r6, #1
 8005d52:	19bb      	adds	r3, r7, r6
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	2232      	movs	r2, #50	; 0x32
 8005d58:	435a      	muls	r2, r3
 8005d5a:	4bbb      	ldr	r3, [pc, #748]	; (8006048 <HAL_TIM_PeriodElapsedCallback+0x1168>)
 8005d5c:	18d3      	adds	r3, r2, r3
 8005d5e:	4abb      	ldr	r2, [pc, #748]	; (800604c <HAL_TIM_PeriodElapsedCallback+0x116c>)
 8005d60:	0011      	movs	r1, r2
 8005d62:	0018      	movs	r0, r3
 8005d64:	f008 fe97 	bl	800ea96 <strstr>
 8005d68:	0003      	movs	r3, r0
 8005d6a:	24bc      	movs	r4, #188	; 0xbc
 8005d6c:	2518      	movs	r5, #24
 8005d6e:	1962      	adds	r2, r4, r5
 8005d70:	19d2      	adds	r2, r2, r7
 8005d72:	6013      	str	r3, [r2, #0]
				ptr2 = strstr(responseBuffer[i], "CONNECT FAIL");
 8005d74:	19bb      	adds	r3, r7, r6
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	2232      	movs	r2, #50	; 0x32
 8005d7a:	435a      	muls	r2, r3
 8005d7c:	4bb2      	ldr	r3, [pc, #712]	; (8006048 <HAL_TIM_PeriodElapsedCallback+0x1168>)
 8005d7e:	18d3      	adds	r3, r2, r3
 8005d80:	4ab3      	ldr	r2, [pc, #716]	; (8006050 <HAL_TIM_PeriodElapsedCallback+0x1170>)
 8005d82:	0011      	movs	r1, r2
 8005d84:	0018      	movs	r0, r3
 8005d86:	f008 fe86 	bl	800ea96 <strstr>
 8005d8a:	0003      	movs	r3, r0
 8005d8c:	22b8      	movs	r2, #184	; 0xb8
 8005d8e:	1952      	adds	r2, r2, r5
 8005d90:	19d2      	adds	r2, r2, r7
 8005d92:	6013      	str	r3, [r2, #0]
				ptr3 = strstr(responseBuffer[i], "CONNECT");
 8005d94:	19bb      	adds	r3, r7, r6
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	2232      	movs	r2, #50	; 0x32
 8005d9a:	435a      	muls	r2, r3
 8005d9c:	4baa      	ldr	r3, [pc, #680]	; (8006048 <HAL_TIM_PeriodElapsedCallback+0x1168>)
 8005d9e:	18d3      	adds	r3, r2, r3
 8005da0:	4aac      	ldr	r2, [pc, #688]	; (8006054 <HAL_TIM_PeriodElapsedCallback+0x1174>)
 8005da2:	0011      	movs	r1, r2
 8005da4:	0018      	movs	r0, r3
 8005da6:	f008 fe76 	bl	800ea96 <strstr>
 8005daa:	0003      	movs	r3, r0
 8005dac:	22b4      	movs	r2, #180	; 0xb4
 8005dae:	1952      	adds	r2, r2, r5
 8005db0:	19d2      	adds	r2, r2, r7
 8005db2:	6013      	str	r3, [r2, #0]

				if (ptr != NULL) {
 8005db4:	1963      	adds	r3, r4, r5
 8005db6:	19db      	adds	r3, r3, r7
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d010      	beq.n	8005de0 <HAL_TIM_PeriodElapsedCallback+0xf00>
					tLine = i;
 8005dbe:	2308      	movs	r3, #8
 8005dc0:	33ff      	adds	r3, #255	; 0xff
 8005dc2:	195b      	adds	r3, r3, r5
 8005dc4:	19db      	adds	r3, r3, r7
 8005dc6:	19ba      	adds	r2, r7, r6
 8005dc8:	7812      	ldrb	r2, [r2, #0]
 8005dca:	701a      	strb	r2, [r3, #0]
					tResponse = 'G';
 8005dcc:	2320      	movs	r3, #32
 8005dce:	33ff      	adds	r3, #255	; 0xff
 8005dd0:	195b      	adds	r3, r3, r5
 8005dd2:	19db      	adds	r3, r3, r7
 8005dd4:	2247      	movs	r2, #71	; 0x47
 8005dd6:	701a      	strb	r2, [r3, #0]
					isDataMode = 0;
 8005dd8:	4b9f      	ldr	r3, [pc, #636]	; (8006058 <HAL_TIM_PeriodElapsedCallback+0x1178>)
 8005dda:	2200      	movs	r2, #0
 8005ddc:	701a      	strb	r2, [r3, #0]
					break;
 8005dde:	e041      	b.n	8005e64 <HAL_TIM_PeriodElapsedCallback+0xf84>
				} else if (ptr2 != NULL) {
 8005de0:	23b8      	movs	r3, #184	; 0xb8
 8005de2:	2118      	movs	r1, #24
 8005de4:	185b      	adds	r3, r3, r1
 8005de6:	19db      	adds	r3, r3, r7
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d012      	beq.n	8005e14 <HAL_TIM_PeriodElapsedCallback+0xf34>
					tLine = i;
 8005dee:	2308      	movs	r3, #8
 8005df0:	33ff      	adds	r3, #255	; 0xff
 8005df2:	185b      	adds	r3, r3, r1
 8005df4:	19db      	adds	r3, r3, r7
 8005df6:	228f      	movs	r2, #143	; 0x8f
 8005df8:	0052      	lsls	r2, r2, #1
 8005dfa:	18ba      	adds	r2, r7, r2
 8005dfc:	7812      	ldrb	r2, [r2, #0]
 8005dfe:	701a      	strb	r2, [r3, #0]
					tResponse = 'B';
 8005e00:	2320      	movs	r3, #32
 8005e02:	33ff      	adds	r3, #255	; 0xff
 8005e04:	185b      	adds	r3, r3, r1
 8005e06:	19db      	adds	r3, r3, r7
 8005e08:	2242      	movs	r2, #66	; 0x42
 8005e0a:	701a      	strb	r2, [r3, #0]
					isDataMode = 0;
 8005e0c:	4b92      	ldr	r3, [pc, #584]	; (8006058 <HAL_TIM_PeriodElapsedCallback+0x1178>)
 8005e0e:	2200      	movs	r2, #0
 8005e10:	701a      	strb	r2, [r3, #0]
					break;
 8005e12:	e027      	b.n	8005e64 <HAL_TIM_PeriodElapsedCallback+0xf84>
				} else if (ptr3 != NULL) {
 8005e14:	23b4      	movs	r3, #180	; 0xb4
 8005e16:	2118      	movs	r1, #24
 8005e18:	185b      	adds	r3, r3, r1
 8005e1a:	19db      	adds	r3, r3, r7
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d012      	beq.n	8005e48 <HAL_TIM_PeriodElapsedCallback+0xf68>
					tLine = i;
 8005e22:	2308      	movs	r3, #8
 8005e24:	33ff      	adds	r3, #255	; 0xff
 8005e26:	185b      	adds	r3, r3, r1
 8005e28:	19db      	adds	r3, r3, r7
 8005e2a:	228f      	movs	r2, #143	; 0x8f
 8005e2c:	0052      	lsls	r2, r2, #1
 8005e2e:	18ba      	adds	r2, r7, r2
 8005e30:	7812      	ldrb	r2, [r2, #0]
 8005e32:	701a      	strb	r2, [r3, #0]
					tResponse = 'G';
 8005e34:	2320      	movs	r3, #32
 8005e36:	33ff      	adds	r3, #255	; 0xff
 8005e38:	185b      	adds	r3, r3, r1
 8005e3a:	19db      	adds	r3, r3, r7
 8005e3c:	2247      	movs	r2, #71	; 0x47
 8005e3e:	701a      	strb	r2, [r3, #0]
					isDataMode = 1;
 8005e40:	4b85      	ldr	r3, [pc, #532]	; (8006058 <HAL_TIM_PeriodElapsedCallback+0x1178>)
 8005e42:	2201      	movs	r2, #1
 8005e44:	701a      	strb	r2, [r3, #0]
					break;
 8005e46:	e00d      	b.n	8005e64 <HAL_TIM_PeriodElapsedCallback+0xf84>
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 8005e48:	218f      	movs	r1, #143	; 0x8f
 8005e4a:	0049      	lsls	r1, r1, #1
 8005e4c:	187b      	adds	r3, r7, r1
 8005e4e:	781a      	ldrb	r2, [r3, #0]
 8005e50:	187b      	adds	r3, r7, r1
 8005e52:	3201      	adds	r2, #1
 8005e54:	701a      	strb	r2, [r3, #0]
 8005e56:	238f      	movs	r3, #143	; 0x8f
 8005e58:	005b      	lsls	r3, r3, #1
 8005e5a:	18fb      	adds	r3, r7, r3
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	2b05      	cmp	r3, #5
 8005e60:	d800      	bhi.n	8005e64 <HAL_TIM_PeriodElapsedCallback+0xf84>
 8005e62:	e774      	b.n	8005d4e <HAL_TIM_PeriodElapsedCallback+0xe6e>
				}
			}
			if (tLine != 99) {
 8005e64:	2308      	movs	r3, #8
 8005e66:	33ff      	adds	r3, #255	; 0xff
 8005e68:	2218      	movs	r2, #24
 8005e6a:	189b      	adds	r3, r3, r2
 8005e6c:	19db      	adds	r3, r3, r7
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	2b63      	cmp	r3, #99	; 0x63
 8005e72:	d023      	beq.n	8005ebc <HAL_TIM_PeriodElapsedCallback+0xfdc>
				if (tResponse == 'G') {
 8005e74:	2320      	movs	r3, #32
 8005e76:	33ff      	adds	r3, #255	; 0xff
 8005e78:	189b      	adds	r3, r3, r2
 8005e7a:	19db      	adds	r3, r3, r7
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	2b47      	cmp	r3, #71	; 0x47
 8005e80:	d10b      	bne.n	8005e9a <HAL_TIM_PeriodElapsedCallback+0xfba>
					isResponseOk = 1;
 8005e82:	4b6f      	ldr	r3, [pc, #444]	; (8006040 <HAL_TIM_PeriodElapsedCallback+0x1160>)
 8005e84:	2201      	movs	r2, #1
 8005e86:	701a      	strb	r2, [r3, #0]
					//to-do with that line
					clearit();
 8005e88:	f000 fdcc 	bl	8006a24 <clearit>
					isTcpOpen = 1;
 8005e8c:	4b73      	ldr	r3, [pc, #460]	; (800605c <HAL_TIM_PeriodElapsedCallback+0x117c>)
 8005e8e:	2201      	movs	r2, #1
 8005e90:	701a      	strb	r2, [r3, #0]
					isDataMode = 1;
 8005e92:	4b71      	ldr	r3, [pc, #452]	; (8006058 <HAL_TIM_PeriodElapsedCallback+0x1178>)
 8005e94:	2201      	movs	r2, #1
 8005e96:	701a      	strb	r2, [r3, #0]
 8005e98:	e028      	b.n	8005eec <HAL_TIM_PeriodElapsedCallback+0x100c>

				} else if (tResponse == 'B') {
 8005e9a:	2320      	movs	r3, #32
 8005e9c:	33ff      	adds	r3, #255	; 0xff
 8005e9e:	2218      	movs	r2, #24
 8005ea0:	189b      	adds	r3, r3, r2
 8005ea2:	19db      	adds	r3, r3, r7
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	2b42      	cmp	r3, #66	; 0x42
 8005ea8:	d120      	bne.n	8005eec <HAL_TIM_PeriodElapsedCallback+0x100c>
					isResponseOk = 0;
 8005eaa:	4b65      	ldr	r3, [pc, #404]	; (8006040 <HAL_TIM_PeriodElapsedCallback+0x1160>)
 8005eac:	2200      	movs	r2, #0
 8005eae:	701a      	strb	r2, [r3, #0]
					clearit();
 8005eb0:	f000 fdb8 	bl	8006a24 <clearit>
					isTcpOpen = 0;
 8005eb4:	4b69      	ldr	r3, [pc, #420]	; (800605c <HAL_TIM_PeriodElapsedCallback+0x117c>)
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	701a      	strb	r2, [r3, #0]
 8005eba:	e017      	b.n	8005eec <HAL_TIM_PeriodElapsedCallback+0x100c>
				}
			} else {
				resTimeout--;
 8005ebc:	4b5e      	ldr	r3, [pc, #376]	; (8006038 <HAL_TIM_PeriodElapsedCallback+0x1158>)
 8005ebe:	881b      	ldrh	r3, [r3, #0]
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	4b5c      	ldr	r3, [pc, #368]	; (8006038 <HAL_TIM_PeriodElapsedCallback+0x1158>)
 8005ec8:	801a      	strh	r2, [r3, #0]
				if (resTimeout < 1) {
 8005eca:	4b5b      	ldr	r3, [pc, #364]	; (8006038 <HAL_TIM_PeriodElapsedCallback+0x1158>)
 8005ecc:	881b      	ldrh	r3, [r3, #0]
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d10b      	bne.n	8005eec <HAL_TIM_PeriodElapsedCallback+0x100c>
					if (!recResponse) {
 8005ed4:	4b59      	ldr	r3, [pc, #356]	; (800603c <HAL_TIM_PeriodElapsedCallback+0x115c>)
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d101      	bne.n	8005ee2 <HAL_TIM_PeriodElapsedCallback+0x1002>
						rebootsystem();
 8005ede:	f000 faa3 	bl	8006428 <rebootsystem>
					}
					clearit();
 8005ee2:	f000 fd9f 	bl	8006a24 <clearit>
					isResponseOk = 0;
 8005ee6:	4b56      	ldr	r3, [pc, #344]	; (8006040 <HAL_TIM_PeriodElapsedCallback+0x1160>)
 8005ee8:	2200      	movs	r2, #0
 8005eea:	701a      	strb	r2, [r3, #0]

				}
			}
		}
		if (commandCase == 6) {
 8005eec:	4b55      	ldr	r3, [pc, #340]	; (8006044 <HAL_TIM_PeriodElapsedCallback+0x1164>)
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	2b06      	cmp	r3, #6
 8005ef4:	d000      	beq.n	8005ef8 <HAL_TIM_PeriodElapsedCallback+0x1018>
 8005ef6:	e0e0      	b.n	80060ba <HAL_TIM_PeriodElapsedCallback+0x11da>
			uint8_t tLine = 99;
 8005ef8:	231e      	movs	r3, #30
 8005efa:	33ff      	adds	r3, #255	; 0xff
 8005efc:	18fb      	adds	r3, r7, r3
 8005efe:	2263      	movs	r2, #99	; 0x63
 8005f00:	701a      	strb	r2, [r3, #0]
			char *ptr;
			char *ptr2;
			char *ptr3;

			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 8005f02:	238e      	movs	r3, #142	; 0x8e
 8005f04:	005b      	lsls	r3, r3, #1
 8005f06:	18fb      	adds	r3, r7, r3
 8005f08:	2200      	movs	r2, #0
 8005f0a:	701a      	strb	r2, [r3, #0]
 8005f0c:	e078      	b.n	8006000 <HAL_TIM_PeriodElapsedCallback+0x1120>
				ptr = strstr(responseBuffer[i], "NO CARRIER");
 8005f0e:	268e      	movs	r6, #142	; 0x8e
 8005f10:	0076      	lsls	r6, r6, #1
 8005f12:	19bb      	adds	r3, r7, r6
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	2232      	movs	r2, #50	; 0x32
 8005f18:	435a      	muls	r2, r3
 8005f1a:	4b4b      	ldr	r3, [pc, #300]	; (8006048 <HAL_TIM_PeriodElapsedCallback+0x1168>)
 8005f1c:	18d3      	adds	r3, r2, r3
 8005f1e:	4a50      	ldr	r2, [pc, #320]	; (8006060 <HAL_TIM_PeriodElapsedCallback+0x1180>)
 8005f20:	0011      	movs	r1, r2
 8005f22:	0018      	movs	r0, r3
 8005f24:	f008 fdb7 	bl	800ea96 <strstr>
 8005f28:	0003      	movs	r3, r0
 8005f2a:	2488      	movs	r4, #136	; 0x88
 8005f2c:	2518      	movs	r5, #24
 8005f2e:	1962      	adds	r2, r4, r5
 8005f30:	19d2      	adds	r2, r2, r7
 8005f32:	6013      	str	r3, [r2, #0]
				ptr2 = strstr(responseBuffer[i], "ERROR");
 8005f34:	19bb      	adds	r3, r7, r6
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	2232      	movs	r2, #50	; 0x32
 8005f3a:	435a      	muls	r2, r3
 8005f3c:	4b42      	ldr	r3, [pc, #264]	; (8006048 <HAL_TIM_PeriodElapsedCallback+0x1168>)
 8005f3e:	18d3      	adds	r3, r2, r3
 8005f40:	4a48      	ldr	r2, [pc, #288]	; (8006064 <HAL_TIM_PeriodElapsedCallback+0x1184>)
 8005f42:	0011      	movs	r1, r2
 8005f44:	0018      	movs	r0, r3
 8005f46:	f008 fda6 	bl	800ea96 <strstr>
 8005f4a:	0003      	movs	r3, r0
 8005f4c:	2284      	movs	r2, #132	; 0x84
 8005f4e:	1952      	adds	r2, r2, r5
 8005f50:	19d2      	adds	r2, r2, r7
 8005f52:	6013      	str	r3, [r2, #0]
				ptr3 = strstr(responseBuffer[i], "CONNECT");
 8005f54:	19bb      	adds	r3, r7, r6
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	2232      	movs	r2, #50	; 0x32
 8005f5a:	435a      	muls	r2, r3
 8005f5c:	4b3a      	ldr	r3, [pc, #232]	; (8006048 <HAL_TIM_PeriodElapsedCallback+0x1168>)
 8005f5e:	18d3      	adds	r3, r2, r3
 8005f60:	4a3c      	ldr	r2, [pc, #240]	; (8006054 <HAL_TIM_PeriodElapsedCallback+0x1174>)
 8005f62:	0011      	movs	r1, r2
 8005f64:	0018      	movs	r0, r3
 8005f66:	f008 fd96 	bl	800ea96 <strstr>
 8005f6a:	0003      	movs	r3, r0
 8005f6c:	2280      	movs	r2, #128	; 0x80
 8005f6e:	0029      	movs	r1, r5
 8005f70:	1852      	adds	r2, r2, r1
 8005f72:	19d2      	adds	r2, r2, r7
 8005f74:	6013      	str	r3, [r2, #0]

				if (ptr != NULL) {
 8005f76:	1863      	adds	r3, r4, r1
 8005f78:	19db      	adds	r3, r3, r7
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d00c      	beq.n	8005f9a <HAL_TIM_PeriodElapsedCallback+0x10ba>
					tLine = i;
 8005f80:	231e      	movs	r3, #30
 8005f82:	33ff      	adds	r3, #255	; 0xff
 8005f84:	18fb      	adds	r3, r7, r3
 8005f86:	19ba      	adds	r2, r7, r6
 8005f88:	7812      	ldrb	r2, [r2, #0]
 8005f8a:	701a      	strb	r2, [r3, #0]
					tResponse = 'B';
 8005f8c:	2320      	movs	r3, #32
 8005f8e:	33ff      	adds	r3, #255	; 0xff
 8005f90:	185b      	adds	r3, r3, r1
 8005f92:	19db      	adds	r3, r3, r7
 8005f94:	2242      	movs	r2, #66	; 0x42
 8005f96:	701a      	strb	r2, [r3, #0]
					break;
 8005f98:	e038      	b.n	800600c <HAL_TIM_PeriodElapsedCallback+0x112c>
				}
				if (ptr2 != NULL) {
 8005f9a:	2384      	movs	r3, #132	; 0x84
 8005f9c:	2118      	movs	r1, #24
 8005f9e:	185b      	adds	r3, r3, r1
 8005fa0:	19db      	adds	r3, r3, r7
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d00e      	beq.n	8005fc6 <HAL_TIM_PeriodElapsedCallback+0x10e6>
					tLine = i;
 8005fa8:	231e      	movs	r3, #30
 8005faa:	33ff      	adds	r3, #255	; 0xff
 8005fac:	18fb      	adds	r3, r7, r3
 8005fae:	228e      	movs	r2, #142	; 0x8e
 8005fb0:	0052      	lsls	r2, r2, #1
 8005fb2:	18ba      	adds	r2, r7, r2
 8005fb4:	7812      	ldrb	r2, [r2, #0]
 8005fb6:	701a      	strb	r2, [r3, #0]
					tResponse = 'B';
 8005fb8:	2320      	movs	r3, #32
 8005fba:	33ff      	adds	r3, #255	; 0xff
 8005fbc:	185b      	adds	r3, r3, r1
 8005fbe:	19db      	adds	r3, r3, r7
 8005fc0:	2242      	movs	r2, #66	; 0x42
 8005fc2:	701a      	strb	r2, [r3, #0]
					break;
 8005fc4:	e022      	b.n	800600c <HAL_TIM_PeriodElapsedCallback+0x112c>
				}
				if (ptr3 != NULL) {
 8005fc6:	2380      	movs	r3, #128	; 0x80
 8005fc8:	2118      	movs	r1, #24
 8005fca:	185b      	adds	r3, r3, r1
 8005fcc:	19db      	adds	r3, r3, r7
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d00e      	beq.n	8005ff2 <HAL_TIM_PeriodElapsedCallback+0x1112>
					tLine = i;
 8005fd4:	231e      	movs	r3, #30
 8005fd6:	33ff      	adds	r3, #255	; 0xff
 8005fd8:	18fb      	adds	r3, r7, r3
 8005fda:	228e      	movs	r2, #142	; 0x8e
 8005fdc:	0052      	lsls	r2, r2, #1
 8005fde:	18ba      	adds	r2, r7, r2
 8005fe0:	7812      	ldrb	r2, [r2, #0]
 8005fe2:	701a      	strb	r2, [r3, #0]
					tResponse = 'G';
 8005fe4:	2320      	movs	r3, #32
 8005fe6:	33ff      	adds	r3, #255	; 0xff
 8005fe8:	185b      	adds	r3, r3, r1
 8005fea:	19db      	adds	r3, r3, r7
 8005fec:	2247      	movs	r2, #71	; 0x47
 8005fee:	701a      	strb	r2, [r3, #0]
					break;
 8005ff0:	e00c      	b.n	800600c <HAL_TIM_PeriodElapsedCallback+0x112c>
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 8005ff2:	218e      	movs	r1, #142	; 0x8e
 8005ff4:	0049      	lsls	r1, r1, #1
 8005ff6:	187b      	adds	r3, r7, r1
 8005ff8:	781a      	ldrb	r2, [r3, #0]
 8005ffa:	187b      	adds	r3, r7, r1
 8005ffc:	3201      	adds	r2, #1
 8005ffe:	701a      	strb	r2, [r3, #0]
 8006000:	238e      	movs	r3, #142	; 0x8e
 8006002:	005b      	lsls	r3, r3, #1
 8006004:	18fb      	adds	r3, r7, r3
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	2b05      	cmp	r3, #5
 800600a:	d980      	bls.n	8005f0e <HAL_TIM_PeriodElapsedCallback+0x102e>
				}
			}
			if (tLine != 99) {
 800600c:	231e      	movs	r3, #30
 800600e:	33ff      	adds	r3, #255	; 0xff
 8006010:	18fb      	adds	r3, r7, r3
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	2b63      	cmp	r3, #99	; 0x63
 8006016:	d036      	beq.n	8006086 <HAL_TIM_PeriodElapsedCallback+0x11a6>
				if (tResponse == 'G') {
 8006018:	2320      	movs	r3, #32
 800601a:	33ff      	adds	r3, #255	; 0xff
 800601c:	2218      	movs	r2, #24
 800601e:	189b      	adds	r3, r3, r2
 8006020:	19db      	adds	r3, r3, r7
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	2b47      	cmp	r3, #71	; 0x47
 8006026:	d11f      	bne.n	8006068 <HAL_TIM_PeriodElapsedCallback+0x1188>
					isResponseOk = 1;
 8006028:	4b05      	ldr	r3, [pc, #20]	; (8006040 <HAL_TIM_PeriodElapsedCallback+0x1160>)
 800602a:	2201      	movs	r2, #1
 800602c:	701a      	strb	r2, [r3, #0]
					//to-do with that line
					clearit();
 800602e:	f000 fcf9 	bl	8006a24 <clearit>
		nmeaLC = 0;
		nmeaCC = 0;
		HAL_UART_Receive_IT(&GNSS_PORT, GNSS_BUFFER, 1);
		HAL_UART_Receive_IT(&GNSS_PORT, GNSS_BUFFER, 1);
	}
}
 8006032:	e1bf      	b.n	80063b4 <HAL_TIM_PeriodElapsedCallback+0x14d4>
 8006034:	20000860 	.word	0x20000860
 8006038:	20000858 	.word	0x20000858
 800603c:	2000085d 	.word	0x2000085d
 8006040:	2000085c 	.word	0x2000085c
 8006044:	2000085b 	.word	0x2000085b
 8006048:	20000724 	.word	0x20000724
 800604c:	08012f1c 	.word	0x08012f1c
 8006050:	08012f2c 	.word	0x08012f2c
 8006054:	08012f3c 	.word	0x08012f3c
 8006058:	20000856 	.word	0x20000856
 800605c:	200009f4 	.word	0x200009f4
 8006060:	08012f44 	.word	0x08012f44
 8006064:	08012edc 	.word	0x08012edc
				} else if (tResponse == 'B') {
 8006068:	2320      	movs	r3, #32
 800606a:	33ff      	adds	r3, #255	; 0xff
 800606c:	2218      	movs	r2, #24
 800606e:	189b      	adds	r3, r3, r2
 8006070:	19db      	adds	r3, r3, r7
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	2b42      	cmp	r3, #66	; 0x42
 8006076:	d000      	beq.n	800607a <HAL_TIM_PeriodElapsedCallback+0x119a>
 8006078:	e19c      	b.n	80063b4 <HAL_TIM_PeriodElapsedCallback+0x14d4>
					isResponseOk = 0;
 800607a:	4bd1      	ldr	r3, [pc, #836]	; (80063c0 <HAL_TIM_PeriodElapsedCallback+0x14e0>)
 800607c:	2200      	movs	r2, #0
 800607e:	701a      	strb	r2, [r3, #0]
					clearit();
 8006080:	f000 fcd0 	bl	8006a24 <clearit>
}
 8006084:	e196      	b.n	80063b4 <HAL_TIM_PeriodElapsedCallback+0x14d4>
				resTimeout--;
 8006086:	4bcf      	ldr	r3, [pc, #828]	; (80063c4 <HAL_TIM_PeriodElapsedCallback+0x14e4>)
 8006088:	881b      	ldrh	r3, [r3, #0]
 800608a:	b29b      	uxth	r3, r3
 800608c:	3b01      	subs	r3, #1
 800608e:	b29a      	uxth	r2, r3
 8006090:	4bcc      	ldr	r3, [pc, #816]	; (80063c4 <HAL_TIM_PeriodElapsedCallback+0x14e4>)
 8006092:	801a      	strh	r2, [r3, #0]
				if (resTimeout < 1) {
 8006094:	4bcb      	ldr	r3, [pc, #812]	; (80063c4 <HAL_TIM_PeriodElapsedCallback+0x14e4>)
 8006096:	881b      	ldrh	r3, [r3, #0]
 8006098:	b29b      	uxth	r3, r3
 800609a:	2b00      	cmp	r3, #0
 800609c:	d000      	beq.n	80060a0 <HAL_TIM_PeriodElapsedCallback+0x11c0>
 800609e:	e189      	b.n	80063b4 <HAL_TIM_PeriodElapsedCallback+0x14d4>
					if (!recResponse) {
 80060a0:	4bc9      	ldr	r3, [pc, #804]	; (80063c8 <HAL_TIM_PeriodElapsedCallback+0x14e8>)
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d101      	bne.n	80060ae <HAL_TIM_PeriodElapsedCallback+0x11ce>
						rebootsystem();
 80060aa:	f000 f9bd 	bl	8006428 <rebootsystem>
					clearit();
 80060ae:	f000 fcb9 	bl	8006a24 <clearit>
					isResponseOk = 0;
 80060b2:	4bc3      	ldr	r3, [pc, #780]	; (80063c0 <HAL_TIM_PeriodElapsedCallback+0x14e0>)
 80060b4:	2200      	movs	r2, #0
 80060b6:	701a      	strb	r2, [r3, #0]
}
 80060b8:	e17c      	b.n	80063b4 <HAL_TIM_PeriodElapsedCallback+0x14d4>
		} else if (commandCase == 7) { //cmgs response check
 80060ba:	4bc4      	ldr	r3, [pc, #784]	; (80063cc <HAL_TIM_PeriodElapsedCallback+0x14ec>)
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	2b07      	cmp	r3, #7
 80060c2:	d000      	beq.n	80060c6 <HAL_TIM_PeriodElapsedCallback+0x11e6>
 80060c4:	e176      	b.n	80063b4 <HAL_TIM_PeriodElapsedCallback+0x14d4>
			uint8_t tLine = 99;
 80060c6:	231c      	movs	r3, #28
 80060c8:	33ff      	adds	r3, #255	; 0xff
 80060ca:	18fb      	adds	r3, r7, r3
 80060cc:	2263      	movs	r2, #99	; 0x63
 80060ce:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 80060d0:	238d      	movs	r3, #141	; 0x8d
 80060d2:	005b      	lsls	r3, r3, #1
 80060d4:	18fb      	adds	r3, r7, r3
 80060d6:	2200      	movs	r2, #0
 80060d8:	701a      	strb	r2, [r3, #0]
 80060da:	e052      	b.n	8006182 <HAL_TIM_PeriodElapsedCallback+0x12a2>
				ptr = strstr(responseBuffer[i], "+CMGS:");
 80060dc:	268d      	movs	r6, #141	; 0x8d
 80060de:	0076      	lsls	r6, r6, #1
 80060e0:	19bb      	adds	r3, r7, r6
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	2232      	movs	r2, #50	; 0x32
 80060e6:	435a      	muls	r2, r3
 80060e8:	4bb9      	ldr	r3, [pc, #740]	; (80063d0 <HAL_TIM_PeriodElapsedCallback+0x14f0>)
 80060ea:	18d3      	adds	r3, r2, r3
 80060ec:	4ab9      	ldr	r2, [pc, #740]	; (80063d4 <HAL_TIM_PeriodElapsedCallback+0x14f4>)
 80060ee:	0011      	movs	r1, r2
 80060f0:	0018      	movs	r0, r3
 80060f2:	f008 fcd0 	bl	800ea96 <strstr>
 80060f6:	0003      	movs	r3, r0
 80060f8:	2490      	movs	r4, #144	; 0x90
 80060fa:	2518      	movs	r5, #24
 80060fc:	1962      	adds	r2, r4, r5
 80060fe:	19d2      	adds	r2, r2, r7
 8006100:	6013      	str	r3, [r2, #0]
				ptr2 = strstr(responseBuffer[i], "ERROR");
 8006102:	19bb      	adds	r3, r7, r6
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	2232      	movs	r2, #50	; 0x32
 8006108:	435a      	muls	r2, r3
 800610a:	4bb1      	ldr	r3, [pc, #708]	; (80063d0 <HAL_TIM_PeriodElapsedCallback+0x14f0>)
 800610c:	18d3      	adds	r3, r2, r3
 800610e:	4ab2      	ldr	r2, [pc, #712]	; (80063d8 <HAL_TIM_PeriodElapsedCallback+0x14f8>)
 8006110:	0011      	movs	r1, r2
 8006112:	0018      	movs	r0, r3
 8006114:	f008 fcbf 	bl	800ea96 <strstr>
 8006118:	0003      	movs	r3, r0
 800611a:	228c      	movs	r2, #140	; 0x8c
 800611c:	0029      	movs	r1, r5
 800611e:	1852      	adds	r2, r2, r1
 8006120:	19d2      	adds	r2, r2, r7
 8006122:	6013      	str	r3, [r2, #0]
				if (ptr != NULL) {
 8006124:	1863      	adds	r3, r4, r1
 8006126:	19db      	adds	r3, r3, r7
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00c      	beq.n	8006148 <HAL_TIM_PeriodElapsedCallback+0x1268>
					tLine = i;
 800612e:	231c      	movs	r3, #28
 8006130:	33ff      	adds	r3, #255	; 0xff
 8006132:	18fb      	adds	r3, r7, r3
 8006134:	19ba      	adds	r2, r7, r6
 8006136:	7812      	ldrb	r2, [r2, #0]
 8006138:	701a      	strb	r2, [r3, #0]
					tResponse = 'G';
 800613a:	2320      	movs	r3, #32
 800613c:	33ff      	adds	r3, #255	; 0xff
 800613e:	185b      	adds	r3, r3, r1
 8006140:	19db      	adds	r3, r3, r7
 8006142:	2247      	movs	r2, #71	; 0x47
 8006144:	701a      	strb	r2, [r3, #0]
					break;
 8006146:	e022      	b.n	800618e <HAL_TIM_PeriodElapsedCallback+0x12ae>
				if (ptr2 != NULL) {
 8006148:	238c      	movs	r3, #140	; 0x8c
 800614a:	2118      	movs	r1, #24
 800614c:	185b      	adds	r3, r3, r1
 800614e:	19db      	adds	r3, r3, r7
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d00e      	beq.n	8006174 <HAL_TIM_PeriodElapsedCallback+0x1294>
					tLine = i;
 8006156:	231c      	movs	r3, #28
 8006158:	33ff      	adds	r3, #255	; 0xff
 800615a:	18fb      	adds	r3, r7, r3
 800615c:	228d      	movs	r2, #141	; 0x8d
 800615e:	0052      	lsls	r2, r2, #1
 8006160:	18ba      	adds	r2, r7, r2
 8006162:	7812      	ldrb	r2, [r2, #0]
 8006164:	701a      	strb	r2, [r3, #0]
					tResponse = 'B';
 8006166:	2320      	movs	r3, #32
 8006168:	33ff      	adds	r3, #255	; 0xff
 800616a:	185b      	adds	r3, r3, r1
 800616c:	19db      	adds	r3, r3, r7
 800616e:	2242      	movs	r2, #66	; 0x42
 8006170:	701a      	strb	r2, [r3, #0]
					break;
 8006172:	e00c      	b.n	800618e <HAL_TIM_PeriodElapsedCallback+0x12ae>
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 8006174:	218d      	movs	r1, #141	; 0x8d
 8006176:	0049      	lsls	r1, r1, #1
 8006178:	187b      	adds	r3, r7, r1
 800617a:	781a      	ldrb	r2, [r3, #0]
 800617c:	187b      	adds	r3, r7, r1
 800617e:	3201      	adds	r2, #1
 8006180:	701a      	strb	r2, [r3, #0]
 8006182:	238d      	movs	r3, #141	; 0x8d
 8006184:	005b      	lsls	r3, r3, #1
 8006186:	18fb      	adds	r3, r7, r3
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	2b05      	cmp	r3, #5
 800618c:	d9a6      	bls.n	80060dc <HAL_TIM_PeriodElapsedCallback+0x11fc>
			if (tLine != 99) {
 800618e:	231c      	movs	r3, #28
 8006190:	33ff      	adds	r3, #255	; 0xff
 8006192:	18fb      	adds	r3, r7, r3
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	2b63      	cmp	r3, #99	; 0x63
 8006198:	d01c      	beq.n	80061d4 <HAL_TIM_PeriodElapsedCallback+0x12f4>
				if (tResponse == 'G') {
 800619a:	2320      	movs	r3, #32
 800619c:	33ff      	adds	r3, #255	; 0xff
 800619e:	2218      	movs	r2, #24
 80061a0:	189b      	adds	r3, r3, r2
 80061a2:	19db      	adds	r3, r3, r7
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	2b47      	cmp	r3, #71	; 0x47
 80061a8:	d105      	bne.n	80061b6 <HAL_TIM_PeriodElapsedCallback+0x12d6>
					isResponseOk = 1;
 80061aa:	4b85      	ldr	r3, [pc, #532]	; (80063c0 <HAL_TIM_PeriodElapsedCallback+0x14e0>)
 80061ac:	2201      	movs	r2, #1
 80061ae:	701a      	strb	r2, [r3, #0]
					clearit();
 80061b0:	f000 fc38 	bl	8006a24 <clearit>
}
 80061b4:	e0fe      	b.n	80063b4 <HAL_TIM_PeriodElapsedCallback+0x14d4>
				} else if (tResponse == 'B') {
 80061b6:	2320      	movs	r3, #32
 80061b8:	33ff      	adds	r3, #255	; 0xff
 80061ba:	2218      	movs	r2, #24
 80061bc:	189b      	adds	r3, r3, r2
 80061be:	19db      	adds	r3, r3, r7
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	2b42      	cmp	r3, #66	; 0x42
 80061c4:	d000      	beq.n	80061c8 <HAL_TIM_PeriodElapsedCallback+0x12e8>
 80061c6:	e0f5      	b.n	80063b4 <HAL_TIM_PeriodElapsedCallback+0x14d4>
					isResponseOk = 1;
 80061c8:	4b7d      	ldr	r3, [pc, #500]	; (80063c0 <HAL_TIM_PeriodElapsedCallback+0x14e0>)
 80061ca:	2201      	movs	r2, #1
 80061cc:	701a      	strb	r2, [r3, #0]
					clearit();
 80061ce:	f000 fc29 	bl	8006a24 <clearit>
}
 80061d2:	e0ef      	b.n	80063b4 <HAL_TIM_PeriodElapsedCallback+0x14d4>
				resTimeout--;
 80061d4:	4b7b      	ldr	r3, [pc, #492]	; (80063c4 <HAL_TIM_PeriodElapsedCallback+0x14e4>)
 80061d6:	881b      	ldrh	r3, [r3, #0]
 80061d8:	b29b      	uxth	r3, r3
 80061da:	3b01      	subs	r3, #1
 80061dc:	b29a      	uxth	r2, r3
 80061de:	4b79      	ldr	r3, [pc, #484]	; (80063c4 <HAL_TIM_PeriodElapsedCallback+0x14e4>)
 80061e0:	801a      	strh	r2, [r3, #0]
				if (resTimeout < 1) {
 80061e2:	4b78      	ldr	r3, [pc, #480]	; (80063c4 <HAL_TIM_PeriodElapsedCallback+0x14e4>)
 80061e4:	881b      	ldrh	r3, [r3, #0]
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d000      	beq.n	80061ee <HAL_TIM_PeriodElapsedCallback+0x130e>
 80061ec:	e0e2      	b.n	80063b4 <HAL_TIM_PeriodElapsedCallback+0x14d4>
					if (!recResponse) {
 80061ee:	4b76      	ldr	r3, [pc, #472]	; (80063c8 <HAL_TIM_PeriodElapsedCallback+0x14e8>)
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d101      	bne.n	80061fc <HAL_TIM_PeriodElapsedCallback+0x131c>
						rebootsystem();
 80061f8:	f000 f916 	bl	8006428 <rebootsystem>
					isResponseOk = 0;
 80061fc:	4b70      	ldr	r3, [pc, #448]	; (80063c0 <HAL_TIM_PeriodElapsedCallback+0x14e0>)
 80061fe:	2200      	movs	r2, #0
 8006200:	701a      	strb	r2, [r3, #0]
					clearit();
 8006202:	f000 fc0f 	bl	8006a24 <clearit>
}
 8006206:	e0d5      	b.n	80063b4 <HAL_TIM_PeriodElapsedCallback+0x14d4>
	} else if (htim == &htim17) {
 8006208:	69fa      	ldr	r2, [r7, #28]
 800620a:	4b74      	ldr	r3, [pc, #464]	; (80063dc <HAL_TIM_PeriodElapsedCallback+0x14fc>)
 800620c:	429a      	cmp	r2, r3
 800620e:	d000      	beq.n	8006212 <HAL_TIM_PeriodElapsedCallback+0x1332>
 8006210:	e0d0      	b.n	80063b4 <HAL_TIM_PeriodElapsedCallback+0x14d4>
		for(uint8_t tLine =0; tLine< nmeaLC; tLine++){
 8006212:	231a      	movs	r3, #26
 8006214:	33ff      	adds	r3, #255	; 0xff
 8006216:	18fb      	adds	r3, r7, r3
 8006218:	2200      	movs	r2, #0
 800621a:	701a      	strb	r2, [r3, #0]
 800621c:	e065      	b.n	80062ea <HAL_TIM_PeriodElapsedCallback+0x140a>
			uint8_t commandSize = 0;
 800621e:	238c      	movs	r3, #140	; 0x8c
 8006220:	005b      	lsls	r3, r3, #1
 8006222:	18fb      	adds	r3, r7, r3
 8006224:	2200      	movs	r2, #0
 8006226:	701a      	strb	r2, [r3, #0]
			tempSentenceCheck = strstr(nmeaResponse[tLine],"VTG");
 8006228:	231a      	movs	r3, #26
 800622a:	33ff      	adds	r3, #255	; 0xff
 800622c:	18fb      	adds	r3, r7, r3
 800622e:	781a      	ldrb	r2, [r3, #0]
 8006230:	0013      	movs	r3, r2
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	189b      	adds	r3, r3, r2
 8006236:	011a      	lsls	r2, r3, #4
 8006238:	189b      	adds	r3, r3, r2
 800623a:	4a69      	ldr	r2, [pc, #420]	; (80063e0 <HAL_TIM_PeriodElapsedCallback+0x1500>)
 800623c:	189b      	adds	r3, r3, r2
 800623e:	4a69      	ldr	r2, [pc, #420]	; (80063e4 <HAL_TIM_PeriodElapsedCallback+0x1504>)
 8006240:	0011      	movs	r1, r2
 8006242:	0018      	movs	r0, r3
 8006244:	f008 fc27 	bl	800ea96 <strstr>
 8006248:	0003      	movs	r3, r0
 800624a:	22f4      	movs	r2, #244	; 0xf4
 800624c:	2018      	movs	r0, #24
 800624e:	1811      	adds	r1, r2, r0
 8006250:	19c9      	adds	r1, r1, r7
 8006252:	600b      	str	r3, [r1, #0]
			if(tempSentenceCheck != NULL){
 8006254:	1813      	adds	r3, r2, r0
 8006256:	19db      	adds	r3, r3, r7
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d00d      	beq.n	800627a <HAL_TIM_PeriodElapsedCallback+0x139a>
				HAL_UART_Transmit(&GNSS_PORT, "$PMTK314,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*28\r\n",51,2000);
 800625e:	23fa      	movs	r3, #250	; 0xfa
 8006260:	00db      	lsls	r3, r3, #3
 8006262:	4961      	ldr	r1, [pc, #388]	; (80063e8 <HAL_TIM_PeriodElapsedCallback+0x1508>)
 8006264:	4861      	ldr	r0, [pc, #388]	; (80063ec <HAL_TIM_PeriodElapsedCallback+0x150c>)
 8006266:	2233      	movs	r2, #51	; 0x33
 8006268:	f006 fc62 	bl	800cb30 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart4, "GNS SET\r\n", 9, 500);
 800626c:	23fa      	movs	r3, #250	; 0xfa
 800626e:	005b      	lsls	r3, r3, #1
 8006270:	495f      	ldr	r1, [pc, #380]	; (80063f0 <HAL_TIM_PeriodElapsedCallback+0x1510>)
 8006272:	4860      	ldr	r0, [pc, #384]	; (80063f4 <HAL_TIM_PeriodElapsedCallback+0x1514>)
 8006274:	2209      	movs	r2, #9
 8006276:	f006 fc5b 	bl	800cb30 <HAL_UART_Transmit>
			for(uint8_t tChar =0 ;tChar<NMEA_MAX_CHARS;tChar++) {
 800627a:	23ff      	movs	r3, #255	; 0xff
 800627c:	2218      	movs	r2, #24
 800627e:	189b      	adds	r3, r3, r2
 8006280:	19db      	adds	r3, r3, r7
 8006282:	2200      	movs	r2, #0
 8006284:	701a      	strb	r2, [r3, #0]
 8006286:	e020      	b.n	80062ca <HAL_TIM_PeriodElapsedCallback+0x13ea>
				if(nmeaResponse[tLine][tChar] != NULL){
 8006288:	231a      	movs	r3, #26
 800628a:	33ff      	adds	r3, #255	; 0xff
 800628c:	18fb      	adds	r3, r7, r3
 800628e:	781a      	ldrb	r2, [r3, #0]
 8006290:	24ff      	movs	r4, #255	; 0xff
 8006292:	2518      	movs	r5, #24
 8006294:	1963      	adds	r3, r4, r5
 8006296:	19db      	adds	r3, r3, r7
 8006298:	7819      	ldrb	r1, [r3, #0]
 800629a:	4851      	ldr	r0, [pc, #324]	; (80063e0 <HAL_TIM_PeriodElapsedCallback+0x1500>)
 800629c:	0013      	movs	r3, r2
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	189b      	adds	r3, r3, r2
 80062a2:	011a      	lsls	r2, r3, #4
 80062a4:	189b      	adds	r3, r3, r2
 80062a6:	18c3      	adds	r3, r0, r3
 80062a8:	5c5b      	ldrb	r3, [r3, r1]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d015      	beq.n	80062da <HAL_TIM_PeriodElapsedCallback+0x13fa>
					commandSize++;
 80062ae:	218c      	movs	r1, #140	; 0x8c
 80062b0:	0049      	lsls	r1, r1, #1
 80062b2:	187b      	adds	r3, r7, r1
 80062b4:	781a      	ldrb	r2, [r3, #0]
 80062b6:	187b      	adds	r3, r7, r1
 80062b8:	3201      	adds	r2, #1
 80062ba:	701a      	strb	r2, [r3, #0]
			for(uint8_t tChar =0 ;tChar<NMEA_MAX_CHARS;tChar++) {
 80062bc:	1963      	adds	r3, r4, r5
 80062be:	19db      	adds	r3, r3, r7
 80062c0:	781a      	ldrb	r2, [r3, #0]
 80062c2:	1963      	adds	r3, r4, r5
 80062c4:	19db      	adds	r3, r3, r7
 80062c6:	3201      	adds	r2, #1
 80062c8:	701a      	strb	r2, [r3, #0]
 80062ca:	23ff      	movs	r3, #255	; 0xff
 80062cc:	2218      	movs	r2, #24
 80062ce:	189b      	adds	r3, r3, r2
 80062d0:	19db      	adds	r3, r3, r7
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	2b54      	cmp	r3, #84	; 0x54
 80062d6:	d9d7      	bls.n	8006288 <HAL_TIM_PeriodElapsedCallback+0x13a8>
 80062d8:	e000      	b.n	80062dc <HAL_TIM_PeriodElapsedCallback+0x13fc>
					break;
 80062da:	46c0      	nop			; (mov r8, r8)
		for(uint8_t tLine =0; tLine< nmeaLC; tLine++){
 80062dc:	211a      	movs	r1, #26
 80062de:	31ff      	adds	r1, #255	; 0xff
 80062e0:	187b      	adds	r3, r7, r1
 80062e2:	781a      	ldrb	r2, [r3, #0]
 80062e4:	187b      	adds	r3, r7, r1
 80062e6:	3201      	adds	r2, #1
 80062e8:	701a      	strb	r2, [r3, #0]
 80062ea:	4b43      	ldr	r3, [pc, #268]	; (80063f8 <HAL_TIM_PeriodElapsedCallback+0x1518>)
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	221a      	movs	r2, #26
 80062f2:	32ff      	adds	r2, #255	; 0xff
 80062f4:	18ba      	adds	r2, r7, r2
 80062f6:	7812      	ldrb	r2, [r2, #0]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d390      	bcc.n	800621e <HAL_TIM_PeriodElapsedCallback+0x133e>
		indicationCounter++;
 80062fc:	4b3f      	ldr	r3, [pc, #252]	; (80063fc <HAL_TIM_PeriodElapsedCallback+0x151c>)
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	3301      	adds	r3, #1
 8006302:	b2da      	uxtb	r2, r3
 8006304:	4b3d      	ldr	r3, [pc, #244]	; (80063fc <HAL_TIM_PeriodElapsedCallback+0x151c>)
 8006306:	701a      	strb	r2, [r3, #0]
		tempGps = nmea_parser(nmeaResponse, NMEA_MAX_CHARS,&crcc,&rCrc);
 8006308:	4b3d      	ldr	r3, [pc, #244]	; (8006400 <HAL_TIM_PeriodElapsedCallback+0x1520>)
 800630a:	4a3e      	ldr	r2, [pc, #248]	; (8006404 <HAL_TIM_PeriodElapsedCallback+0x1524>)
 800630c:	4834      	ldr	r0, [pc, #208]	; (80063e0 <HAL_TIM_PeriodElapsedCallback+0x1500>)
 800630e:	2155      	movs	r1, #85	; 0x55
 8006310:	f7fc ff56 	bl	80031c0 <nmea_parser>
 8006314:	0003      	movs	r3, r0
 8006316:	22f8      	movs	r2, #248	; 0xf8
 8006318:	2018      	movs	r0, #24
 800631a:	1811      	adds	r1, r2, r0
 800631c:	19c9      	adds	r1, r1, r7
 800631e:	600b      	str	r3, [r1, #0]
		if (tempGps != NULL) {
 8006320:	0001      	movs	r1, r0
 8006322:	1853      	adds	r3, r2, r1
 8006324:	19db      	adds	r3, r3, r7
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d004      	beq.n	8006336 <HAL_TIM_PeriodElapsedCallback+0x1456>
			gps_info = tempGps;
 800632c:	4b36      	ldr	r3, [pc, #216]	; (8006408 <HAL_TIM_PeriodElapsedCallback+0x1528>)
 800632e:	1852      	adds	r2, r2, r1
 8006330:	19d2      	adds	r2, r2, r7
 8006332:	6812      	ldr	r2, [r2, #0]
 8006334:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim17);
 8006336:	4b29      	ldr	r3, [pc, #164]	; (80063dc <HAL_TIM_PeriodElapsedCallback+0x14fc>)
 8006338:	0018      	movs	r0, r3
 800633a:	f005 fc41 	bl	800bbc0 <HAL_TIM_Base_Stop_IT>
		isGNSSTimStart = 0;
 800633e:	4b33      	ldr	r3, [pc, #204]	; (800640c <HAL_TIM_PeriodElapsedCallback+0x152c>)
 8006340:	2200      	movs	r2, #0
 8006342:	701a      	strb	r2, [r3, #0]
		if (tim6Count > 5) {
 8006344:	4b32      	ldr	r3, [pc, #200]	; (8006410 <HAL_TIM_PeriodElapsedCallback+0x1530>)
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	2b05      	cmp	r3, #5
 800634a:	d914      	bls.n	8006376 <HAL_TIM_PeriodElapsedCallback+0x1496>
			if (isLoggedIn == 0 && isTcpOpen == 0 && flashready == 1) {
 800634c:	4b31      	ldr	r3, [pc, #196]	; (8006414 <HAL_TIM_PeriodElapsedCallback+0x1534>)
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	b2db      	uxtb	r3, r3
 8006352:	2b00      	cmp	r3, #0
 8006354:	d10b      	bne.n	800636e <HAL_TIM_PeriodElapsedCallback+0x148e>
 8006356:	4b30      	ldr	r3, [pc, #192]	; (8006418 <HAL_TIM_PeriodElapsedCallback+0x1538>)
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	b2db      	uxtb	r3, r3
 800635c:	2b00      	cmp	r3, #0
 800635e:	d106      	bne.n	800636e <HAL_TIM_PeriodElapsedCallback+0x148e>
 8006360:	4b2e      	ldr	r3, [pc, #184]	; (800641c <HAL_TIM_PeriodElapsedCallback+0x153c>)
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	b2db      	uxtb	r3, r3
 8006366:	2b01      	cmp	r3, #1
 8006368:	d101      	bne.n	800636e <HAL_TIM_PeriodElapsedCallback+0x148e>
				save_data_packet();
 800636a:	f000 fdc5 	bl	8006ef8 <save_data_packet>
			tim6Count = 0;
 800636e:	4b28      	ldr	r3, [pc, #160]	; (8006410 <HAL_TIM_PeriodElapsedCallback+0x1530>)
 8006370:	2200      	movs	r2, #0
 8006372:	701a      	strb	r2, [r3, #0]
 8006374:	e005      	b.n	8006382 <HAL_TIM_PeriodElapsedCallback+0x14a2>
			tim6Count++;
 8006376:	4b26      	ldr	r3, [pc, #152]	; (8006410 <HAL_TIM_PeriodElapsedCallback+0x1530>)
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	3301      	adds	r3, #1
 800637c:	b2da      	uxtb	r2, r3
 800637e:	4b24      	ldr	r3, [pc, #144]	; (8006410 <HAL_TIM_PeriodElapsedCallback+0x1530>)
 8006380:	701a      	strb	r2, [r3, #0]
		memset(nmeaResponse, 0, sizeof(nmeaResponse));
 8006382:	23aa      	movs	r3, #170	; 0xaa
 8006384:	005a      	lsls	r2, r3, #1
 8006386:	4b16      	ldr	r3, [pc, #88]	; (80063e0 <HAL_TIM_PeriodElapsedCallback+0x1500>)
 8006388:	2100      	movs	r1, #0
 800638a:	0018      	movs	r0, r3
 800638c:	f008 fb2b 	bl	800e9e6 <memset>
		nmeaLC = 0;
 8006390:	4b19      	ldr	r3, [pc, #100]	; (80063f8 <HAL_TIM_PeriodElapsedCallback+0x1518>)
 8006392:	2200      	movs	r2, #0
 8006394:	701a      	strb	r2, [r3, #0]
		nmeaCC = 0;
 8006396:	4b22      	ldr	r3, [pc, #136]	; (8006420 <HAL_TIM_PeriodElapsedCallback+0x1540>)
 8006398:	2200      	movs	r2, #0
 800639a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&GNSS_PORT, GNSS_BUFFER, 1);
 800639c:	4921      	ldr	r1, [pc, #132]	; (8006424 <HAL_TIM_PeriodElapsedCallback+0x1544>)
 800639e:	4b13      	ldr	r3, [pc, #76]	; (80063ec <HAL_TIM_PeriodElapsedCallback+0x150c>)
 80063a0:	2201      	movs	r2, #1
 80063a2:	0018      	movs	r0, r3
 80063a4:	f006 fc60 	bl	800cc68 <HAL_UART_Receive_IT>
		HAL_UART_Receive_IT(&GNSS_PORT, GNSS_BUFFER, 1);
 80063a8:	491e      	ldr	r1, [pc, #120]	; (8006424 <HAL_TIM_PeriodElapsedCallback+0x1544>)
 80063aa:	4b10      	ldr	r3, [pc, #64]	; (80063ec <HAL_TIM_PeriodElapsedCallback+0x150c>)
 80063ac:	2201      	movs	r2, #1
 80063ae:	0018      	movs	r0, r3
 80063b0:	f006 fc5a 	bl	800cc68 <HAL_UART_Receive_IT>
}
 80063b4:	46c0      	nop			; (mov r8, r8)
 80063b6:	46bd      	mov	sp, r7
 80063b8:	b04e      	add	sp, #312	; 0x138
 80063ba:	bc80      	pop	{r7}
 80063bc:	46b8      	mov	r8, r7
 80063be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063c0:	2000085c 	.word	0x2000085c
 80063c4:	20000858 	.word	0x20000858
 80063c8:	2000085d 	.word	0x2000085d
 80063cc:	2000085b 	.word	0x2000085b
 80063d0:	20000724 	.word	0x20000724
 80063d4:	08012f50 	.word	0x08012f50
 80063d8:	08012edc 	.word	0x08012edc
 80063dc:	20000408 	.word	0x20000408
 80063e0:	200008a0 	.word	0x200008a0
 80063e4:	08012f58 	.word	0x08012f58
 80063e8:	08012f5c 	.word	0x08012f5c
 80063ec:	20000544 	.word	0x20000544
 80063f0:	08012f90 	.word	0x08012f90
 80063f4:	2000066c 	.word	0x2000066c
 80063f8:	20000852 	.word	0x20000852
 80063fc:	20000709 	.word	0x20000709
 8006400:	2000070b 	.word	0x2000070b
 8006404:	2000070a 	.word	0x2000070a
 8006408:	20000024 	.word	0x20000024
 800640c:	2000085a 	.word	0x2000085a
 8006410:	200009f8 	.word	0x200009f8
 8006414:	200009f7 	.word	0x200009f7
 8006418:	200009f4 	.word	0x200009f4
 800641c:	20000ce4 	.word	0x20000ce4
 8006420:	20000853 	.word	0x20000853
 8006424:	20000720 	.word	0x20000720

08006428 <rebootsystem>:

void rebootsystem() {
 8006428:	b580      	push	{r7, lr}
 800642a:	af00      	add	r7, sp, #0
	save_to_flash();
 800642c:	f000 f802 	bl	8006434 <save_to_flash>
	// printf("rebooting system \n");
	NVIC_SystemReset();
 8006430:	f7fd fdc4 	bl	8003fbc <__NVIC_SystemReset>

08006434 <save_to_flash>:

	// todo save flash info
}
void save_to_flash() {
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
	W25qxx_EraseSector(0);
 800643a:	2000      	movs	r0, #0
 800643c:	f002 fb04 	bl	8008a48 <W25qxx_EraseSector>
	W25qxx_WriteByte(1, 0);
 8006440:	2100      	movs	r1, #0
 8006442:	2001      	movs	r0, #1
 8006444:	f002 fb70 	bl	8008b28 <W25qxx_WriteByte>
	uint8_t t[2];
	t[0] = StartSec >> 8;
 8006448:	4b67      	ldr	r3, [pc, #412]	; (80065e8 <save_to_flash+0x1b4>)
 800644a:	881b      	ldrh	r3, [r3, #0]
 800644c:	b29b      	uxth	r3, r3
 800644e:	0a1b      	lsrs	r3, r3, #8
 8006450:	b29b      	uxth	r3, r3
 8006452:	b2da      	uxtb	r2, r3
 8006454:	003b      	movs	r3, r7
 8006456:	701a      	strb	r2, [r3, #0]
	t[1] = StartSec;
 8006458:	4b63      	ldr	r3, [pc, #396]	; (80065e8 <save_to_flash+0x1b4>)
 800645a:	881b      	ldrh	r3, [r3, #0]
 800645c:	b29b      	uxth	r3, r3
 800645e:	b2da      	uxtb	r2, r3
 8006460:	003b      	movs	r3, r7
 8006462:	705a      	strb	r2, [r3, #1]
	W25qxx_WriteByte(t[0], 1);
 8006464:	003b      	movs	r3, r7
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	2101      	movs	r1, #1
 800646a:	0018      	movs	r0, r3
 800646c:	f002 fb5c 	bl	8008b28 <W25qxx_WriteByte>
	W25qxx_WriteByte(t[1], 2);
 8006470:	003b      	movs	r3, r7
 8006472:	785b      	ldrb	r3, [r3, #1]
 8006474:	2102      	movs	r1, #2
 8006476:	0018      	movs	r0, r3
 8006478:	f002 fb56 	bl	8008b28 <W25qxx_WriteByte>
	t[0] = StartN >> 8;
 800647c:	4b5b      	ldr	r3, [pc, #364]	; (80065ec <save_to_flash+0x1b8>)
 800647e:	881b      	ldrh	r3, [r3, #0]
 8006480:	b29b      	uxth	r3, r3
 8006482:	0a1b      	lsrs	r3, r3, #8
 8006484:	b29b      	uxth	r3, r3
 8006486:	b2da      	uxtb	r2, r3
 8006488:	003b      	movs	r3, r7
 800648a:	701a      	strb	r2, [r3, #0]
	t[1] = StartN;
 800648c:	4b57      	ldr	r3, [pc, #348]	; (80065ec <save_to_flash+0x1b8>)
 800648e:	881b      	ldrh	r3, [r3, #0]
 8006490:	b29b      	uxth	r3, r3
 8006492:	b2da      	uxtb	r2, r3
 8006494:	003b      	movs	r3, r7
 8006496:	705a      	strb	r2, [r3, #1]
	W25qxx_WriteByte(t[0], 3);
 8006498:	003b      	movs	r3, r7
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	2103      	movs	r1, #3
 800649e:	0018      	movs	r0, r3
 80064a0:	f002 fb42 	bl	8008b28 <W25qxx_WriteByte>
	W25qxx_WriteByte(t[1], 4);
 80064a4:	003b      	movs	r3, r7
 80064a6:	785b      	ldrb	r3, [r3, #1]
 80064a8:	2104      	movs	r1, #4
 80064aa:	0018      	movs	r0, r3
 80064ac:	f002 fb3c 	bl	8008b28 <W25qxx_WriteByte>
	t[0] = EndSec >> 8;
 80064b0:	4b4f      	ldr	r3, [pc, #316]	; (80065f0 <save_to_flash+0x1bc>)
 80064b2:	881b      	ldrh	r3, [r3, #0]
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	0a1b      	lsrs	r3, r3, #8
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	b2da      	uxtb	r2, r3
 80064bc:	003b      	movs	r3, r7
 80064be:	701a      	strb	r2, [r3, #0]
	t[1] = EndSec;
 80064c0:	4b4b      	ldr	r3, [pc, #300]	; (80065f0 <save_to_flash+0x1bc>)
 80064c2:	881b      	ldrh	r3, [r3, #0]
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	b2da      	uxtb	r2, r3
 80064c8:	003b      	movs	r3, r7
 80064ca:	705a      	strb	r2, [r3, #1]
	W25qxx_WriteByte(t[0], 5);
 80064cc:	003b      	movs	r3, r7
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	2105      	movs	r1, #5
 80064d2:	0018      	movs	r0, r3
 80064d4:	f002 fb28 	bl	8008b28 <W25qxx_WriteByte>
	W25qxx_WriteByte(t[1], 6);
 80064d8:	003b      	movs	r3, r7
 80064da:	785b      	ldrb	r3, [r3, #1]
 80064dc:	2106      	movs	r1, #6
 80064de:	0018      	movs	r0, r3
 80064e0:	f002 fb22 	bl	8008b28 <W25qxx_WriteByte>
	t[0] = EndN >> 8;
 80064e4:	4b43      	ldr	r3, [pc, #268]	; (80065f4 <save_to_flash+0x1c0>)
 80064e6:	881b      	ldrh	r3, [r3, #0]
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	0a1b      	lsrs	r3, r3, #8
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	b2da      	uxtb	r2, r3
 80064f0:	003b      	movs	r3, r7
 80064f2:	701a      	strb	r2, [r3, #0]
	t[1] = EndN;
 80064f4:	4b3f      	ldr	r3, [pc, #252]	; (80065f4 <save_to_flash+0x1c0>)
 80064f6:	881b      	ldrh	r3, [r3, #0]
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	b2da      	uxtb	r2, r3
 80064fc:	003b      	movs	r3, r7
 80064fe:	705a      	strb	r2, [r3, #1]
	W25qxx_WriteByte(t[0], 7);
 8006500:	003b      	movs	r3, r7
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	2107      	movs	r1, #7
 8006506:	0018      	movs	r0, r3
 8006508:	f002 fb0e 	bl	8008b28 <W25qxx_WriteByte>
	W25qxx_WriteByte(t[1], 8);
 800650c:	003b      	movs	r3, r7
 800650e:	785b      	ldrb	r3, [r3, #1]
 8006510:	2108      	movs	r1, #8
 8006512:	0018      	movs	r0, r3
 8006514:	f002 fb08 	bl	8008b28 <W25qxx_WriteByte>

	W25qxx_WriteByte(cPin[0], 9);
 8006518:	4b37      	ldr	r3, [pc, #220]	; (80065f8 <save_to_flash+0x1c4>)
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	2109      	movs	r1, #9
 800651e:	0018      	movs	r0, r3
 8006520:	f002 fb02 	bl	8008b28 <W25qxx_WriteByte>
	W25qxx_WriteByte(cPin[1], 10);
 8006524:	4b34      	ldr	r3, [pc, #208]	; (80065f8 <save_to_flash+0x1c4>)
 8006526:	785b      	ldrb	r3, [r3, #1]
 8006528:	210a      	movs	r1, #10
 800652a:	0018      	movs	r0, r3
 800652c:	f002 fafc 	bl	8008b28 <W25qxx_WriteByte>
	W25qxx_WriteByte(cPin[2], 11);
 8006530:	4b31      	ldr	r3, [pc, #196]	; (80065f8 <save_to_flash+0x1c4>)
 8006532:	789b      	ldrb	r3, [r3, #2]
 8006534:	210b      	movs	r1, #11
 8006536:	0018      	movs	r0, r3
 8006538:	f002 faf6 	bl	8008b28 <W25qxx_WriteByte>
	W25qxx_WriteByte(cPin[3], 12);
 800653c:	4b2e      	ldr	r3, [pc, #184]	; (80065f8 <save_to_flash+0x1c4>)
 800653e:	78db      	ldrb	r3, [r3, #3]
 8006540:	210c      	movs	r1, #12
 8006542:	0018      	movs	r0, r3
 8006544:	f002 faf0 	bl	8008b28 <W25qxx_WriteByte>

	for (uint8_t te = 13; te < 23; te++) {
 8006548:	1dfb      	adds	r3, r7, #7
 800654a:	220d      	movs	r2, #13
 800654c:	701a      	strb	r2, [r3, #0]
 800654e:	e00f      	b.n	8006570 <save_to_flash+0x13c>
		W25qxx_WriteByte(validSender[te - 13], te);
 8006550:	1dfb      	adds	r3, r7, #7
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	3b0d      	subs	r3, #13
 8006556:	4a29      	ldr	r2, [pc, #164]	; (80065fc <save_to_flash+0x1c8>)
 8006558:	5cd2      	ldrb	r2, [r2, r3]
 800655a:	1dfb      	adds	r3, r7, #7
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	0019      	movs	r1, r3
 8006560:	0010      	movs	r0, r2
 8006562:	f002 fae1 	bl	8008b28 <W25qxx_WriteByte>
	for (uint8_t te = 13; te < 23; te++) {
 8006566:	1dfb      	adds	r3, r7, #7
 8006568:	781a      	ldrb	r2, [r3, #0]
 800656a:	1dfb      	adds	r3, r7, #7
 800656c:	3201      	adds	r2, #1
 800656e:	701a      	strb	r2, [r3, #0]
 8006570:	1dfb      	adds	r3, r7, #7
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	2b16      	cmp	r3, #22
 8006576:	d9eb      	bls.n	8006550 <save_to_flash+0x11c>
	}

	for (uint8_t te = 23; te < 73; te++) {
 8006578:	1dbb      	adds	r3, r7, #6
 800657a:	2217      	movs	r2, #23
 800657c:	701a      	strb	r2, [r3, #0]
 800657e:	e00f      	b.n	80065a0 <save_to_flash+0x16c>
		W25qxx_WriteByte(domainAdd[te - 23], te);
 8006580:	1dbb      	adds	r3, r7, #6
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	3b17      	subs	r3, #23
 8006586:	4a1e      	ldr	r2, [pc, #120]	; (8006600 <save_to_flash+0x1cc>)
 8006588:	5cd2      	ldrb	r2, [r2, r3]
 800658a:	1dbb      	adds	r3, r7, #6
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	0019      	movs	r1, r3
 8006590:	0010      	movs	r0, r2
 8006592:	f002 fac9 	bl	8008b28 <W25qxx_WriteByte>
	for (uint8_t te = 23; te < 73; te++) {
 8006596:	1dbb      	adds	r3, r7, #6
 8006598:	781a      	ldrb	r2, [r3, #0]
 800659a:	1dbb      	adds	r3, r7, #6
 800659c:	3201      	adds	r2, #1
 800659e:	701a      	strb	r2, [r3, #0]
 80065a0:	1dbb      	adds	r3, r7, #6
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	2b48      	cmp	r3, #72	; 0x48
 80065a6:	d9eb      	bls.n	8006580 <save_to_flash+0x14c>
	}

	for (uint8_t te = 73; te < 79; te++) {
 80065a8:	1d7b      	adds	r3, r7, #5
 80065aa:	2249      	movs	r2, #73	; 0x49
 80065ac:	701a      	strb	r2, [r3, #0]
 80065ae:	e00f      	b.n	80065d0 <save_to_flash+0x19c>
		W25qxx_WriteByte(portAdd[te - 73], te);
 80065b0:	1d7b      	adds	r3, r7, #5
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	3b49      	subs	r3, #73	; 0x49
 80065b6:	4a13      	ldr	r2, [pc, #76]	; (8006604 <save_to_flash+0x1d0>)
 80065b8:	5cd2      	ldrb	r2, [r2, r3]
 80065ba:	1d7b      	adds	r3, r7, #5
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	0019      	movs	r1, r3
 80065c0:	0010      	movs	r0, r2
 80065c2:	f002 fab1 	bl	8008b28 <W25qxx_WriteByte>
	for (uint8_t te = 73; te < 79; te++) {
 80065c6:	1d7b      	adds	r3, r7, #5
 80065c8:	781a      	ldrb	r2, [r3, #0]
 80065ca:	1d7b      	adds	r3, r7, #5
 80065cc:	3201      	adds	r2, #1
 80065ce:	701a      	strb	r2, [r3, #0]
 80065d0:	1d7b      	adds	r3, r7, #5
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	2b4e      	cmp	r3, #78	; 0x4e
 80065d6:	d9eb      	bls.n	80065b0 <save_to_flash+0x17c>
	}
	HAL_Delay(100);
 80065d8:	2064      	movs	r0, #100	; 0x64
 80065da:	f002 fe2f 	bl	800923c <HAL_Delay>
	// HAL_UART_Transmit(&huart4, "saved to flash",
	// sizeof("saved to flash"), 100);

}
 80065de:	46c0      	nop			; (mov r8, r8)
 80065e0:	46bd      	mov	sp, r7
 80065e2:	b002      	add	sp, #8
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	46c0      	nop			; (mov r8, r8)
 80065e8:	20000ce0 	.word	0x20000ce0
 80065ec:	20000cdc 	.word	0x20000cdc
 80065f0:	20000ce2 	.word	0x20000ce2
 80065f4:	20000cde 	.word	0x20000cde
 80065f8:	20000710 	.word	0x20000710
 80065fc:	20000004 	.word	0x20000004
 8006600:	20000030 	.word	0x20000030
 8006604:	20000028 	.word	0x20000028

08006608 <send_command>:

void send_command(char *command, uint16_t timeout, uint8_t caseId,
		uint8_t retryCount, uint8_t isReset) {
 8006608:	b590      	push	{r4, r7, lr}
 800660a:	b085      	sub	sp, #20
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	000c      	movs	r4, r1
 8006612:	0010      	movs	r0, r2
 8006614:	0019      	movs	r1, r3
 8006616:	1cbb      	adds	r3, r7, #2
 8006618:	1c22      	adds	r2, r4, #0
 800661a:	801a      	strh	r2, [r3, #0]
 800661c:	1c7b      	adds	r3, r7, #1
 800661e:	1c02      	adds	r2, r0, #0
 8006620:	701a      	strb	r2, [r3, #0]
 8006622:	003b      	movs	r3, r7
 8006624:	1c0a      	adds	r2, r1, #0
 8006626:	701a      	strb	r2, [r3, #0]
	uint8_t processComplete = 0, processCount = 0;
 8006628:	230f      	movs	r3, #15
 800662a:	18fb      	adds	r3, r7, r3
 800662c:	2200      	movs	r2, #0
 800662e:	701a      	strb	r2, [r3, #0]
 8006630:	230e      	movs	r3, #14
 8006632:	18fb      	adds	r3, r7, r3
 8006634:	2200      	movs	r2, #0
 8006636:	701a      	strb	r2, [r3, #0]
	uint16_t commandSize = 0;
 8006638:	230c      	movs	r3, #12
 800663a:	18fb      	adds	r3, r7, r3
 800663c:	2200      	movs	r2, #0
 800663e:	801a      	strh	r2, [r3, #0]
	uint16_t i = 0;
 8006640:	230a      	movs	r3, #10
 8006642:	18fb      	adds	r3, r7, r3
 8006644:	2200      	movs	r2, #0
 8006646:	801a      	strh	r2, [r3, #0]
	while (command[i] != NULL) {
 8006648:	e00b      	b.n	8006662 <send_command+0x5a>
		commandSize++;
 800664a:	210c      	movs	r1, #12
 800664c:	187b      	adds	r3, r7, r1
 800664e:	881a      	ldrh	r2, [r3, #0]
 8006650:	187b      	adds	r3, r7, r1
 8006652:	3201      	adds	r2, #1
 8006654:	801a      	strh	r2, [r3, #0]
		i++;
 8006656:	210a      	movs	r1, #10
 8006658:	187b      	adds	r3, r7, r1
 800665a:	881a      	ldrh	r2, [r3, #0]
 800665c:	187b      	adds	r3, r7, r1
 800665e:	3201      	adds	r2, #1
 8006660:	801a      	strh	r2, [r3, #0]
	while (command[i] != NULL) {
 8006662:	230a      	movs	r3, #10
 8006664:	18fb      	adds	r3, r7, r3
 8006666:	881b      	ldrh	r3, [r3, #0]
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	18d3      	adds	r3, r2, r3
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d1eb      	bne.n	800664a <send_command+0x42>
	}
	while (processComplete == 0) {
 8006672:	e057      	b.n	8006724 <send_command+0x11c>
		while (isBusy)
 8006674:	46c0      	nop			; (mov r8, r8)
 8006676:	4b31      	ldr	r3, [pc, #196]	; (800673c <send_command+0x134>)
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	b2db      	uxtb	r3, r3
 800667c:	2b00      	cmp	r3, #0
 800667e:	d1fa      	bne.n	8006676 <send_command+0x6e>
			;
		isBusy = 1;
 8006680:	4b2e      	ldr	r3, [pc, #184]	; (800673c <send_command+0x134>)
 8006682:	2201      	movs	r2, #1
 8006684:	701a      	strb	r2, [r3, #0]
		isResponseOk = 0;
 8006686:	4b2e      	ldr	r3, [pc, #184]	; (8006740 <send_command+0x138>)
 8006688:	2200      	movs	r2, #0
 800668a:	701a      	strb	r2, [r3, #0]
		commandCase = caseId;
 800668c:	4b2d      	ldr	r3, [pc, #180]	; (8006744 <send_command+0x13c>)
 800668e:	1c7a      	adds	r2, r7, #1
 8006690:	7812      	ldrb	r2, [r2, #0]
 8006692:	701a      	strb	r2, [r3, #0]
		isStart = 1;
 8006694:	4b2c      	ldr	r3, [pc, #176]	; (8006748 <send_command+0x140>)
 8006696:	2201      	movs	r2, #1
 8006698:	701a      	strb	r2, [r3, #0]
		recResponse = 0;
 800669a:	4b2c      	ldr	r3, [pc, #176]	; (800674c <send_command+0x144>)
 800669c:	2200      	movs	r2, #0
 800669e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&AT_PORT, command, commandSize, 1000);
 80066a0:	23fa      	movs	r3, #250	; 0xfa
 80066a2:	009c      	lsls	r4, r3, #2
 80066a4:	230c      	movs	r3, #12
 80066a6:	18fb      	adds	r3, r7, r3
 80066a8:	881a      	ldrh	r2, [r3, #0]
 80066aa:	6879      	ldr	r1, [r7, #4]
 80066ac:	4828      	ldr	r0, [pc, #160]	; (8006750 <send_command+0x148>)
 80066ae:	0023      	movs	r3, r4
 80066b0:	f006 fa3e 	bl	800cb30 <HAL_UART_Transmit>
		FIX_TIMER_TRIGGER(&htim16);
 80066b4:	4b27      	ldr	r3, [pc, #156]	; (8006754 <send_command+0x14c>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2202      	movs	r2, #2
 80066ba:	4252      	negs	r2, r2
 80066bc:	611a      	str	r2, [r3, #16]
		HAL_TIM_Base_Start_IT(&htim16);
 80066be:	4b25      	ldr	r3, [pc, #148]	; (8006754 <send_command+0x14c>)
 80066c0:	0018      	movs	r0, r3
 80066c2:	f005 fa27 	bl	800bb14 <HAL_TIM_Base_Start_IT>
		resTimeout = timeout; //300 ms
 80066c6:	4b24      	ldr	r3, [pc, #144]	; (8006758 <send_command+0x150>)
 80066c8:	1cba      	adds	r2, r7, #2
 80066ca:	8812      	ldrh	r2, [r2, #0]
 80066cc:	801a      	strh	r2, [r3, #0]
		while (isBusy)
 80066ce:	46c0      	nop			; (mov r8, r8)
 80066d0:	4b1a      	ldr	r3, [pc, #104]	; (800673c <send_command+0x134>)
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d1fa      	bne.n	80066d0 <send_command+0xc8>
			;
		commandCase = 0;
 80066da:	4b1a      	ldr	r3, [pc, #104]	; (8006744 <send_command+0x13c>)
 80066dc:	2200      	movs	r2, #0
 80066de:	701a      	strb	r2, [r3, #0]
		if (isResponseOk) {
 80066e0:	4b17      	ldr	r3, [pc, #92]	; (8006740 <send_command+0x138>)
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d004      	beq.n	80066f4 <send_command+0xec>
			processComplete = 1;
 80066ea:	230f      	movs	r3, #15
 80066ec:	18fb      	adds	r3, r7, r3
 80066ee:	2201      	movs	r2, #1
 80066f0:	701a      	strb	r2, [r3, #0]
 80066f2:	e017      	b.n	8006724 <send_command+0x11c>
		} else {
			//printf("failed\n");
			processCount++;
 80066f4:	210e      	movs	r1, #14
 80066f6:	187b      	adds	r3, r7, r1
 80066f8:	781a      	ldrb	r2, [r3, #0]
 80066fa:	187b      	adds	r3, r7, r1
 80066fc:	3201      	adds	r2, #1
 80066fe:	701a      	strb	r2, [r3, #0]
			if (processCount > retryCount) {
 8006700:	187a      	adds	r2, r7, r1
 8006702:	003b      	movs	r3, r7
 8006704:	7812      	ldrb	r2, [r2, #0]
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	429a      	cmp	r2, r3
 800670a:	d907      	bls.n	800671c <send_command+0x114>
				if (isReset == 1) {
 800670c:	2320      	movs	r3, #32
 800670e:	18fb      	adds	r3, r7, r3
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	2b01      	cmp	r3, #1
 8006714:	d10c      	bne.n	8006730 <send_command+0x128>
					rebootsystem();
 8006716:	f7ff fe87 	bl	8006428 <rebootsystem>
				}
				break;
 800671a:	e009      	b.n	8006730 <send_command+0x128>
			}
			HAL_Delay(5000);
 800671c:	4b0f      	ldr	r3, [pc, #60]	; (800675c <send_command+0x154>)
 800671e:	0018      	movs	r0, r3
 8006720:	f002 fd8c 	bl	800923c <HAL_Delay>
	while (processComplete == 0) {
 8006724:	230f      	movs	r3, #15
 8006726:	18fb      	adds	r3, r7, r3
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d0a2      	beq.n	8006674 <send_command+0x6c>
		}
	}
}
 800672e:	e000      	b.n	8006732 <send_command+0x12a>
				break;
 8006730:	46c0      	nop			; (mov r8, r8)
}
 8006732:	46c0      	nop			; (mov r8, r8)
 8006734:	46bd      	mov	sp, r7
 8006736:	b005      	add	sp, #20
 8006738:	bd90      	pop	{r4, r7, pc}
 800673a:	46c0      	nop			; (mov r8, r8)
 800673c:	20000855 	.word	0x20000855
 8006740:	2000085c 	.word	0x2000085c
 8006744:	2000085b 	.word	0x2000085b
 8006748:	20000854 	.word	0x20000854
 800674c:	2000085d 	.word	0x2000085d
 8006750:	200004b0 	.word	0x200004b0
 8006754:	200003bc 	.word	0x200003bc
 8006758:	20000858 	.word	0x20000858
 800675c:	00001388 	.word	0x00001388

08006760 <quectel_init>:
void quectel_init() {
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af02      	add	r7, sp, #8
	// printf("--Sending AT-- \n");
	send_command("AT\r\n", 3, 1, 1, 1);
 8006766:	4819      	ldr	r0, [pc, #100]	; (80067cc <quectel_init+0x6c>)
 8006768:	2301      	movs	r3, #1
 800676a:	9300      	str	r3, [sp, #0]
 800676c:	2301      	movs	r3, #1
 800676e:	2201      	movs	r2, #1
 8006770:	2103      	movs	r1, #3
 8006772:	f7ff ff49 	bl	8006608 <send_command>
	// printf("--sending AT+QIURC=1--\n");
	// send_command("AT+QIURC=1\r\n", 3, 1, 1,1);
	// printf("--Sending AT+CPIN-- \n");
	send_command("AT+CPIN?\r\n", 51, 2, 2, 1);
 8006776:	4816      	ldr	r0, [pc, #88]	; (80067d0 <quectel_init+0x70>)
 8006778:	2301      	movs	r3, #1
 800677a:	9300      	str	r3, [sp, #0]
 800677c:	2302      	movs	r3, #2
 800677e:	2202      	movs	r2, #2
 8006780:	2133      	movs	r1, #51	; 0x33
 8006782:	f7ff ff41 	bl	8006608 <send_command>
	// printf("--Sending AT+CREG?-- \n");
	// send_command("AT+CREG?\r\n",3,3,5,1);
	// printf("--Sending AT+CGREG?-- \n");
	// send_command("AT+CGREG?\r\n",3,3,3,1);
	// printf("--Sending AT+CMGF=1-- \n");
	send_command("AT+CMGF=1\r\n", 3, 1, 3, 1);
 8006786:	4813      	ldr	r0, [pc, #76]	; (80067d4 <quectel_init+0x74>)
 8006788:	2301      	movs	r3, #1
 800678a:	9300      	str	r3, [sp, #0]
 800678c:	2303      	movs	r3, #3
 800678e:	2201      	movs	r2, #1
 8006790:	2103      	movs	r1, #3
 8006792:	f7ff ff39 	bl	8006608 <send_command>
	// printf("--Sending AT+CNMI=2,2-- \n");
	send_command("AT+CNMI=2,2\r\n", 3, 1, 3, 1);
 8006796:	4810      	ldr	r0, [pc, #64]	; (80067d8 <quectel_init+0x78>)
 8006798:	2301      	movs	r3, #1
 800679a:	9300      	str	r3, [sp, #0]
 800679c:	2303      	movs	r3, #3
 800679e:	2201      	movs	r2, #1
 80067a0:	2103      	movs	r1, #3
 80067a2:	f7ff ff31 	bl	8006608 <send_command>
	// printf("--Sending AT+CGSN--\r\n \n");
	send_command("AT+CGSN\r\n", 3, 4, 2, 1);
 80067a6:	480d      	ldr	r0, [pc, #52]	; (80067dc <quectel_init+0x7c>)
 80067a8:	2301      	movs	r3, #1
 80067aa:	9300      	str	r3, [sp, #0]
 80067ac:	2302      	movs	r3, #2
 80067ae:	2204      	movs	r2, #4
 80067b0:	2103      	movs	r1, #3
 80067b2:	f7ff ff29 	bl	8006608 <send_command>
	send_command("AT+QMGDA=\"DEL ALL\"\r\n", 50, 1, 0, 0);
 80067b6:	480a      	ldr	r0, [pc, #40]	; (80067e0 <quectel_init+0x80>)
 80067b8:	2300      	movs	r3, #0
 80067ba:	9300      	str	r3, [sp, #0]
 80067bc:	2300      	movs	r3, #0
 80067be:	2201      	movs	r2, #1
 80067c0:	2132      	movs	r1, #50	; 0x32
 80067c2:	f7ff ff21 	bl	8006608 <send_command>

}
 80067c6:	46c0      	nop			; (mov r8, r8)
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	08012f9c 	.word	0x08012f9c
 80067d0:	08012fa4 	.word	0x08012fa4
 80067d4:	08012fb0 	.word	0x08012fb0
 80067d8:	08012fbc 	.word	0x08012fbc
 80067dc:	08012fcc 	.word	0x08012fcc
 80067e0:	08012fd8 	.word	0x08012fd8

080067e4 <estabilish_tcp>:

uint8_t estabilish_tcp() {
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af02      	add	r7, sp, #8
	// HAL_UART_Transmit(&huart4, "est tcp",
	// sizeof("est tcp"), 100);
	send_command("+++", 10, 1, 0, 0);
 80067ea:	4853      	ldr	r0, [pc, #332]	; (8006938 <estabilish_tcp+0x154>)
 80067ec:	2300      	movs	r3, #0
 80067ee:	9300      	str	r3, [sp, #0]
 80067f0:	2300      	movs	r3, #0
 80067f2:	2201      	movs	r2, #1
 80067f4:	210a      	movs	r1, #10
 80067f6:	f7ff ff07 	bl	8006608 <send_command>
	memset(tcpCommand, 0, sizeof(tcpCommand));
 80067fa:	4b50      	ldr	r3, [pc, #320]	; (800693c <estabilish_tcp+0x158>)
 80067fc:	2232      	movs	r2, #50	; 0x32
 80067fe:	2100      	movs	r1, #0
 8006800:	0018      	movs	r0, r3
 8006802:	f008 f8f0 	bl	800e9e6 <memset>
	strcat(tcpCommand, "AT+QIOPEN=\"TCP\",\"");
 8006806:	4b4d      	ldr	r3, [pc, #308]	; (800693c <estabilish_tcp+0x158>)
 8006808:	0018      	movs	r0, r3
 800680a:	f7f9 fc83 	bl	8000114 <strlen>
 800680e:	0003      	movs	r3, r0
 8006810:	001a      	movs	r2, r3
 8006812:	4b4a      	ldr	r3, [pc, #296]	; (800693c <estabilish_tcp+0x158>)
 8006814:	18d2      	adds	r2, r2, r3
 8006816:	4b4a      	ldr	r3, [pc, #296]	; (8006940 <estabilish_tcp+0x15c>)
 8006818:	0010      	movs	r0, r2
 800681a:	0019      	movs	r1, r3
 800681c:	2312      	movs	r3, #18
 800681e:	001a      	movs	r2, r3
 8006820:	f008 f8d8 	bl	800e9d4 <memcpy>
	strcat(tcpCommand, domainAdd);
 8006824:	4a47      	ldr	r2, [pc, #284]	; (8006944 <estabilish_tcp+0x160>)
 8006826:	4b45      	ldr	r3, [pc, #276]	; (800693c <estabilish_tcp+0x158>)
 8006828:	0011      	movs	r1, r2
 800682a:	0018      	movs	r0, r3
 800682c:	f008 f904 	bl	800ea38 <strcat>
	strcat(tcpCommand, "\",");
 8006830:	4b42      	ldr	r3, [pc, #264]	; (800693c <estabilish_tcp+0x158>)
 8006832:	0018      	movs	r0, r3
 8006834:	f7f9 fc6e 	bl	8000114 <strlen>
 8006838:	0003      	movs	r3, r0
 800683a:	001a      	movs	r2, r3
 800683c:	4b3f      	ldr	r3, [pc, #252]	; (800693c <estabilish_tcp+0x158>)
 800683e:	18d2      	adds	r2, r2, r3
 8006840:	4b41      	ldr	r3, [pc, #260]	; (8006948 <estabilish_tcp+0x164>)
 8006842:	0010      	movs	r0, r2
 8006844:	0019      	movs	r1, r3
 8006846:	2303      	movs	r3, #3
 8006848:	001a      	movs	r2, r3
 800684a:	f008 f8c3 	bl	800e9d4 <memcpy>
	strcat(tcpCommand, portAdd);
 800684e:	4a3f      	ldr	r2, [pc, #252]	; (800694c <estabilish_tcp+0x168>)
 8006850:	4b3a      	ldr	r3, [pc, #232]	; (800693c <estabilish_tcp+0x158>)
 8006852:	0011      	movs	r1, r2
 8006854:	0018      	movs	r0, r3
 8006856:	f008 f8ef 	bl	800ea38 <strcat>
	strcat(tcpCommand, "\r\n");
 800685a:	4b38      	ldr	r3, [pc, #224]	; (800693c <estabilish_tcp+0x158>)
 800685c:	0018      	movs	r0, r3
 800685e:	f7f9 fc59 	bl	8000114 <strlen>
 8006862:	0003      	movs	r3, r0
 8006864:	001a      	movs	r2, r3
 8006866:	4b35      	ldr	r3, [pc, #212]	; (800693c <estabilish_tcp+0x158>)
 8006868:	18d2      	adds	r2, r2, r3
 800686a:	4b39      	ldr	r3, [pc, #228]	; (8006950 <estabilish_tcp+0x16c>)
 800686c:	0010      	movs	r0, r2
 800686e:	0019      	movs	r1, r3
 8006870:	2303      	movs	r3, #3
 8006872:	001a      	movs	r2, r3
 8006874:	f008 f8ae 	bl	800e9d4 <memcpy>
	// printf("--Sent AT+QIDEACT \n");
	send_command("AT+QIDEACT\r\n", 401, 1, 2, 0);
 8006878:	2392      	movs	r3, #146	; 0x92
 800687a:	33ff      	adds	r3, #255	; 0xff
 800687c:	0019      	movs	r1, r3
 800687e:	4835      	ldr	r0, [pc, #212]	; (8006954 <estabilish_tcp+0x170>)
 8006880:	2300      	movs	r3, #0
 8006882:	9300      	str	r3, [sp, #0]
 8006884:	2302      	movs	r3, #2
 8006886:	2201      	movs	r2, #1
 8006888:	f7ff febe 	bl	8006608 <send_command>

	if (isResponseOk == 0) {
 800688c:	4b32      	ldr	r3, [pc, #200]	; (8006958 <estabilish_tcp+0x174>)
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	b2db      	uxtb	r3, r3
 8006892:	2b00      	cmp	r3, #0
 8006894:	d101      	bne.n	800689a <estabilish_tcp+0xb6>
		return 0;
 8006896:	2300      	movs	r3, #0
 8006898:	e04b      	b.n	8006932 <estabilish_tcp+0x14e>
	}
	send_command("AT+QIMODE=1\r\n", 3, 1, 3, 0);
 800689a:	4830      	ldr	r0, [pc, #192]	; (800695c <estabilish_tcp+0x178>)
 800689c:	2300      	movs	r3, #0
 800689e:	9300      	str	r3, [sp, #0]
 80068a0:	2303      	movs	r3, #3
 80068a2:	2201      	movs	r2, #1
 80068a4:	2103      	movs	r1, #3
 80068a6:	f7ff feaf 	bl	8006608 <send_command>
	if (isResponseOk == 0) {
 80068aa:	4b2b      	ldr	r3, [pc, #172]	; (8006958 <estabilish_tcp+0x174>)
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d101      	bne.n	80068b8 <estabilish_tcp+0xd4>
		return 0;
 80068b4:	2300      	movs	r3, #0
 80068b6:	e03c      	b.n	8006932 <estabilish_tcp+0x14e>
	}
	send_command("AT+QITCFG=3,2,512,1\r\n", 3, 1, 1, 0);
 80068b8:	4829      	ldr	r0, [pc, #164]	; (8006960 <estabilish_tcp+0x17c>)
 80068ba:	2300      	movs	r3, #0
 80068bc:	9300      	str	r3, [sp, #0]
 80068be:	2301      	movs	r3, #1
 80068c0:	2201      	movs	r2, #1
 80068c2:	2103      	movs	r1, #3
 80068c4:	f7ff fea0 	bl	8006608 <send_command>
	if (isResponseOk == 0) {
 80068c8:	4b23      	ldr	r3, [pc, #140]	; (8006958 <estabilish_tcp+0x174>)
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d101      	bne.n	80068d6 <estabilish_tcp+0xf2>
		return 0;
 80068d2:	2300      	movs	r3, #0
 80068d4:	e02d      	b.n	8006932 <estabilish_tcp+0x14e>
	}
	send_command("AT+QIREGAPP=\"network\",\"\",\"\"\r\n", 3, 1, 1, 0);
 80068d6:	4823      	ldr	r0, [pc, #140]	; (8006964 <estabilish_tcp+0x180>)
 80068d8:	2300      	movs	r3, #0
 80068da:	9300      	str	r3, [sp, #0]
 80068dc:	2301      	movs	r3, #1
 80068de:	2201      	movs	r2, #1
 80068e0:	2103      	movs	r1, #3
 80068e2:	f7ff fe91 	bl	8006608 <send_command>
	if (isResponseOk == 0) {
 80068e6:	4b1c      	ldr	r3, [pc, #112]	; (8006958 <estabilish_tcp+0x174>)
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d101      	bne.n	80068f4 <estabilish_tcp+0x110>
		return 0;
 80068f0:	2300      	movs	r3, #0
 80068f2:	e01e      	b.n	8006932 <estabilish_tcp+0x14e>
	}
	send_command("AT+QIACT\r\n", 15100, 1, 0, 0);
 80068f4:	491c      	ldr	r1, [pc, #112]	; (8006968 <estabilish_tcp+0x184>)
 80068f6:	481d      	ldr	r0, [pc, #116]	; (800696c <estabilish_tcp+0x188>)
 80068f8:	2300      	movs	r3, #0
 80068fa:	9300      	str	r3, [sp, #0]
 80068fc:	2300      	movs	r3, #0
 80068fe:	2201      	movs	r2, #1
 8006900:	f7ff fe82 	bl	8006608 <send_command>
	if (isResponseOk == 0) {
 8006904:	4b14      	ldr	r3, [pc, #80]	; (8006958 <estabilish_tcp+0x174>)
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	b2db      	uxtb	r3, r3
 800690a:	2b00      	cmp	r3, #0
 800690c:	d101      	bne.n	8006912 <estabilish_tcp+0x12e>
		return 0;
 800690e:	2300      	movs	r3, #0
 8006910:	e00f      	b.n	8006932 <estabilish_tcp+0x14e>
	}
	// HAL_UART_Transmit(&huart4, "S qiopen", sizeof("S qiopen"), 100);

	send_command(tcpCommand, 7510, 5, 2, 0);
 8006912:	4917      	ldr	r1, [pc, #92]	; (8006970 <estabilish_tcp+0x18c>)
 8006914:	4809      	ldr	r0, [pc, #36]	; (800693c <estabilish_tcp+0x158>)
 8006916:	2300      	movs	r3, #0
 8006918:	9300      	str	r3, [sp, #0]
 800691a:	2302      	movs	r3, #2
 800691c:	2205      	movs	r2, #5
 800691e:	f7ff fe73 	bl	8006608 <send_command>
	if (isResponseOk == 1) {
 8006922:	4b0d      	ldr	r3, [pc, #52]	; (8006958 <estabilish_tcp+0x174>)
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	b2db      	uxtb	r3, r3
 8006928:	2b01      	cmp	r3, #1
 800692a:	d101      	bne.n	8006930 <estabilish_tcp+0x14c>
		return 1;
 800692c:	2301      	movs	r3, #1
 800692e:	e000      	b.n	8006932 <estabilish_tcp+0x14e>
	} else {
		return 0;
 8006930:	2300      	movs	r3, #0
	}
}
 8006932:	0018      	movs	r0, r3
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}
 8006938:	08012ff0 	.word	0x08012ff0
 800693c:	2000086c 	.word	0x2000086c
 8006940:	08012ff4 	.word	0x08012ff4
 8006944:	20000030 	.word	0x20000030
 8006948:	08013008 	.word	0x08013008
 800694c:	20000028 	.word	0x20000028
 8006950:	0801300c 	.word	0x0801300c
 8006954:	08013010 	.word	0x08013010
 8006958:	2000085c 	.word	0x2000085c
 800695c:	08013020 	.word	0x08013020
 8006960:	08013030 	.word	0x08013030
 8006964:	08013048 	.word	0x08013048
 8006968:	00003afc 	.word	0x00003afc
 800696c:	08013068 	.word	0x08013068
 8006970:	00001d56 	.word	0x00001d56

08006974 <GetCrc16>:

uint16_t GetCrc16(const uint8_t *pData, int nLength) {
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	6039      	str	r1, [r7, #0]
	uint16_t fcs = 0xffff; // initialization
 800697e:	230e      	movs	r3, #14
 8006980:	18fb      	adds	r3, r7, r3
 8006982:	2201      	movs	r2, #1
 8006984:	4252      	negs	r2, r2
 8006986:	801a      	strh	r2, [r3, #0]
	int a = 0;
 8006988:	2300      	movs	r3, #0
 800698a:	60bb      	str	r3, [r7, #8]
	while (nLength > 0) {
 800698c:	e019      	b.n	80069c2 <GetCrc16+0x4e>
		a = (fcs ^ *pData) & 0xff;
 800698e:	200e      	movs	r0, #14
 8006990:	183b      	adds	r3, r7, r0
 8006992:	881b      	ldrh	r3, [r3, #0]
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	7812      	ldrb	r2, [r2, #0]
 8006998:	4053      	eors	r3, r2
 800699a:	22ff      	movs	r2, #255	; 0xff
 800699c:	4013      	ands	r3, r2
 800699e:	60bb      	str	r3, [r7, #8]
		fcs = (fcs >> 8) ^ crctab16[a];
 80069a0:	183b      	adds	r3, r7, r0
 80069a2:	881b      	ldrh	r3, [r3, #0]
 80069a4:	0a1b      	lsrs	r3, r3, #8
 80069a6:	b299      	uxth	r1, r3
 80069a8:	4b0c      	ldr	r3, [pc, #48]	; (80069dc <GetCrc16+0x68>)
 80069aa:	68ba      	ldr	r2, [r7, #8]
 80069ac:	0052      	lsls	r2, r2, #1
 80069ae:	5ad2      	ldrh	r2, [r2, r3]
 80069b0:	183b      	adds	r3, r7, r0
 80069b2:	404a      	eors	r2, r1
 80069b4:	801a      	strh	r2, [r3, #0]
		nLength--;
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	3b01      	subs	r3, #1
 80069ba:	603b      	str	r3, [r7, #0]
		pData++;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	3301      	adds	r3, #1
 80069c0:	607b      	str	r3, [r7, #4]
	while (nLength > 0) {
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	dce2      	bgt.n	800698e <GetCrc16+0x1a>
	}
	return ~fcs; // negated
 80069c8:	230e      	movs	r3, #14
 80069ca:	18fb      	adds	r3, r7, r3
 80069cc:	881b      	ldrh	r3, [r3, #0]
 80069ce:	43db      	mvns	r3, r3
 80069d0:	b29b      	uxth	r3, r3
}
 80069d2:	0018      	movs	r0, r3
 80069d4:	46bd      	mov	sp, r7
 80069d6:	b004      	add	sp, #16
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	46c0      	nop			; (mov r8, r8)
 80069dc:	080131d4 	.word	0x080131d4

080069e0 <where_api_handler>:

void where_api_handler() {
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b082      	sub	sp, #8
 80069e4:	af02      	add	r7, sp, #8
	if (isWhereApiCalled == 1) {
 80069e6:	4b0c      	ldr	r3, [pc, #48]	; (8006a18 <where_api_handler+0x38>)
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d110      	bne.n	8006a10 <where_api_handler+0x30>
		// printf("--Sending AT+CREG?-- \n");
		// HAL_UART_Transmit(&huart4, "S creg in api", sizeof("S creg in api"),
		// 100);
		send_command("AT+CREG?\r\n", 3, 3, 3, 1);
 80069ee:	480b      	ldr	r0, [pc, #44]	; (8006a1c <where_api_handler+0x3c>)
 80069f0:	2301      	movs	r3, #1
 80069f2:	9300      	str	r3, [sp, #0]
 80069f4:	2303      	movs	r3, #3
 80069f6:	2203      	movs	r2, #3
 80069f8:	2103      	movs	r1, #3
 80069fa:	f7ff fe05 	bl	8006608 <send_command>
		if (isReg == 1) {
 80069fe:	4b08      	ldr	r3, [pc, #32]	; (8006a20 <where_api_handler+0x40>)
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d104      	bne.n	8006a10 <where_api_handler+0x30>
			send_current_location_via_sms(); //sending current location
 8006a06:	f000 fd35 	bl	8007474 <send_current_location_via_sms>
			isWhereApiCalled = 0;
 8006a0a:	4b03      	ldr	r3, [pc, #12]	; (8006a18 <where_api_handler+0x38>)
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8006a10:	46c0      	nop			; (mov r8, r8)
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	46c0      	nop			; (mov r8, r8)
 8006a18:	200009f6 	.word	0x200009f6
 8006a1c:	08012eb0 	.word	0x08012eb0
 8006a20:	200009f5 	.word	0x200009f5

08006a24 <clearit>:

void clearit() {
 8006a24:	b580      	push	{r7, lr}
 8006a26:	af00      	add	r7, sp, #0
	resTimeout = 3;
 8006a28:	4b0e      	ldr	r3, [pc, #56]	; (8006a64 <clearit+0x40>)
 8006a2a:	2203      	movs	r2, #3
 8006a2c:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim16);
 8006a2e:	4b0e      	ldr	r3, [pc, #56]	; (8006a68 <clearit+0x44>)
 8006a30:	0018      	movs	r0, r3
 8006a32:	f005 f8c5 	bl	800bbc0 <HAL_TIM_Base_Stop_IT>
	memset(responseBuffer, 0, sizeof(responseBuffer));
 8006a36:	2396      	movs	r3, #150	; 0x96
 8006a38:	005a      	lsls	r2, r3, #1
 8006a3a:	4b0c      	ldr	r3, [pc, #48]	; (8006a6c <clearit+0x48>)
 8006a3c:	2100      	movs	r1, #0
 8006a3e:	0018      	movs	r0, r3
 8006a40:	f007 ffd1 	bl	800e9e6 <memset>
	lineCount = 0;
 8006a44:	4b0a      	ldr	r3, [pc, #40]	; (8006a70 <clearit+0x4c>)
 8006a46:	2200      	movs	r2, #0
 8006a48:	701a      	strb	r2, [r3, #0]
	charCount = 0;
 8006a4a:	4b0a      	ldr	r3, [pc, #40]	; (8006a74 <clearit+0x50>)
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	701a      	strb	r2, [r3, #0]
	isStart = 0;
 8006a50:	4b09      	ldr	r3, [pc, #36]	; (8006a78 <clearit+0x54>)
 8006a52:	2200      	movs	r2, #0
 8006a54:	701a      	strb	r2, [r3, #0]
	isBusy = 0;
 8006a56:	4b09      	ldr	r3, [pc, #36]	; (8006a7c <clearit+0x58>)
 8006a58:	2200      	movs	r2, #0
 8006a5a:	701a      	strb	r2, [r3, #0]

}
 8006a5c:	46c0      	nop			; (mov r8, r8)
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	46c0      	nop			; (mov r8, r8)
 8006a64:	20000858 	.word	0x20000858
 8006a68:	200003bc 	.word	0x200003bc
 8006a6c:	20000724 	.word	0x20000724
 8006a70:	20000850 	.word	0x20000850
 8006a74:	20000851 	.word	0x20000851
 8006a78:	20000854 	.word	0x20000854
 8006a7c:	20000855 	.word	0x20000855

08006a80 <incoming_msg_handler>:

void incoming_msg_handler() {
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b082      	sub	sp, #8
 8006a84:	af02      	add	r7, sp, #8
	if (isPulse == 1) {
 8006a86:	4b26      	ldr	r3, [pc, #152]	; (8006b20 <incoming_msg_handler+0xa0>)
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d144      	bne.n	8006b1a <incoming_msg_handler+0x9a>
		isPulse = 0;
 8006a90:	4b23      	ldr	r3, [pc, #140]	; (8006b20 <incoming_msg_handler+0xa0>)
 8006a92:	2200      	movs	r2, #0
 8006a94:	701a      	strb	r2, [r3, #0]
		//printf("--Sending +++-- \n");
		//HAL_UART_Transmit(&huart4, "S +++ incom", sizeof("S +++ incom"), 100);
		send_command("+++", 10, 1, 0, 0);
 8006a96:	4823      	ldr	r0, [pc, #140]	; (8006b24 <incoming_msg_handler+0xa4>)
 8006a98:	2300      	movs	r3, #0
 8006a9a:	9300      	str	r3, [sp, #0]
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	210a      	movs	r1, #10
 8006aa2:	f7ff fdb1 	bl	8006608 <send_command>
		isDataMode = 0;
 8006aa6:	4b20      	ldr	r3, [pc, #128]	; (8006b28 <incoming_msg_handler+0xa8>)
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	701a      	strb	r2, [r3, #0]
		indicationCounter = 0;
 8006aac:	4b1f      	ldr	r3, [pc, #124]	; (8006b2c <incoming_msg_handler+0xac>)
 8006aae:	2200      	movs	r2, #0
 8006ab0:	701a      	strb	r2, [r3, #0]
		while (indicationCounter < 5)
 8006ab2:	46c0      	nop			; (mov r8, r8)
 8006ab4:	4b1d      	ldr	r3, [pc, #116]	; (8006b2c <incoming_msg_handler+0xac>)
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	2b04      	cmp	r3, #4
 8006aba:	d9fb      	bls.n	8006ab4 <incoming_msg_handler+0x34>
			;
		where_api_handler();
 8006abc:	f7ff ff90 	bl	80069e0 <where_api_handler>
		//HAL_UART_Transmit(&huart4, "S msg del", sizeof("S msg del"), 100);
		send_command("AT+QMGDA=\"DEL ALL\"\r\n", 50, 1, 0, 0);
 8006ac0:	481b      	ldr	r0, [pc, #108]	; (8006b30 <incoming_msg_handler+0xb0>)
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	9300      	str	r3, [sp, #0]
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	2201      	movs	r2, #1
 8006aca:	2132      	movs	r1, #50	; 0x32
 8006acc:	f7ff fd9c 	bl	8006608 <send_command>
		msgcleared = 0;
 8006ad0:	4b18      	ldr	r3, [pc, #96]	; (8006b34 <incoming_msg_handler+0xb4>)
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	701a      	strb	r2, [r3, #0]
		if (isResponseOk == 1) {
 8006ad6:	4b18      	ldr	r3, [pc, #96]	; (8006b38 <incoming_msg_handler+0xb8>)
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d102      	bne.n	8006ae6 <incoming_msg_handler+0x66>
			msgcleared = 1;
 8006ae0:	4b14      	ldr	r3, [pc, #80]	; (8006b34 <incoming_msg_handler+0xb4>)
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	701a      	strb	r2, [r3, #0]
		}
		//printf("--Sending ATO-- \n");
		send_command("ATO\r\n", 10, 6, 0, 0);
 8006ae6:	4815      	ldr	r0, [pc, #84]	; (8006b3c <incoming_msg_handler+0xbc>)
 8006ae8:	2300      	movs	r3, #0
 8006aea:	9300      	str	r3, [sp, #0]
 8006aec:	2300      	movs	r3, #0
 8006aee:	2206      	movs	r2, #6
 8006af0:	210a      	movs	r1, #10
 8006af2:	f7ff fd89 	bl	8006608 <send_command>
		if (isResponseOk == 1) {
 8006af6:	4b10      	ldr	r3, [pc, #64]	; (8006b38 <incoming_msg_handler+0xb8>)
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d103      	bne.n	8006b08 <incoming_msg_handler+0x88>
			isDataMode = 1;
 8006b00:	4b09      	ldr	r3, [pc, #36]	; (8006b28 <incoming_msg_handler+0xa8>)
 8006b02:	2201      	movs	r2, #1
 8006b04:	701a      	strb	r2, [r3, #0]
			isDataMode = 0;
			isTcpOpen = 0;
		}
	}

}
 8006b06:	e008      	b.n	8006b1a <incoming_msg_handler+0x9a>
			isLoggedIn = 0;
 8006b08:	4b0d      	ldr	r3, [pc, #52]	; (8006b40 <incoming_msg_handler+0xc0>)
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	701a      	strb	r2, [r3, #0]
			isDataMode = 0;
 8006b0e:	4b06      	ldr	r3, [pc, #24]	; (8006b28 <incoming_msg_handler+0xa8>)
 8006b10:	2200      	movs	r2, #0
 8006b12:	701a      	strb	r2, [r3, #0]
			isTcpOpen = 0;
 8006b14:	4b0b      	ldr	r3, [pc, #44]	; (8006b44 <incoming_msg_handler+0xc4>)
 8006b16:	2200      	movs	r2, #0
 8006b18:	701a      	strb	r2, [r3, #0]
}
 8006b1a:	46c0      	nop			; (mov r8, r8)
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	20000716 	.word	0x20000716
 8006b24:	08012ff0 	.word	0x08012ff0
 8006b28:	20000856 	.word	0x20000856
 8006b2c:	20000709 	.word	0x20000709
 8006b30:	08012fd8 	.word	0x08012fd8
 8006b34:	20000868 	.word	0x20000868
 8006b38:	2000085c 	.word	0x2000085c
 8006b3c:	08013074 	.word	0x08013074
 8006b40:	200009f7 	.word	0x200009f7
 8006b44:	200009f4 	.word	0x200009f4

08006b48 <send_login_packet>:

void send_login_packet() {
 8006b48:	b5b0      	push	{r4, r5, r7, lr}
 8006b4a:	b086      	sub	sp, #24
 8006b4c:	af00      	add	r7, sp, #0
	if (isTcpOpen == 1 && isDataMode == 1) {
 8006b4e:	4b39      	ldr	r3, [pc, #228]	; (8006c34 <send_login_packet+0xec>)
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d169      	bne.n	8006c2c <send_login_packet+0xe4>
 8006b58:	4b37      	ldr	r3, [pc, #220]	; (8006c38 <send_login_packet+0xf0>)
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d164      	bne.n	8006c2c <send_login_packet+0xe4>
		for (uint8_t i = 0; i < 8; i++) {
 8006b62:	2317      	movs	r3, #23
 8006b64:	18fb      	adds	r3, r7, r3
 8006b66:	2200      	movs	r2, #0
 8006b68:	701a      	strb	r2, [r3, #0]
 8006b6a:	e00e      	b.n	8006b8a <send_login_packet+0x42>
			loginPacket[i + 4] = imei[i];
 8006b6c:	2017      	movs	r0, #23
 8006b6e:	183b      	adds	r3, r7, r0
 8006b70:	781a      	ldrb	r2, [r3, #0]
 8006b72:	183b      	adds	r3, r7, r0
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	3304      	adds	r3, #4
 8006b78:	4930      	ldr	r1, [pc, #192]	; (8006c3c <send_login_packet+0xf4>)
 8006b7a:	5c89      	ldrb	r1, [r1, r2]
 8006b7c:	4a30      	ldr	r2, [pc, #192]	; (8006c40 <send_login_packet+0xf8>)
 8006b7e:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 8; i++) {
 8006b80:	183b      	adds	r3, r7, r0
 8006b82:	781a      	ldrb	r2, [r3, #0]
 8006b84:	183b      	adds	r3, r7, r0
 8006b86:	3201      	adds	r2, #1
 8006b88:	701a      	strb	r2, [r3, #0]
 8006b8a:	2317      	movs	r3, #23
 8006b8c:	18fb      	adds	r3, r7, r3
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	2b07      	cmp	r3, #7
 8006b92:	d9eb      	bls.n	8006b6c <send_login_packet+0x24>
		}
		loginPacket[12] = infoSNo >> 8;
 8006b94:	4b2b      	ldr	r3, [pc, #172]	; (8006c44 <send_login_packet+0xfc>)
 8006b96:	881b      	ldrh	r3, [r3, #0]
 8006b98:	0a1b      	lsrs	r3, r3, #8
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	b2da      	uxtb	r2, r3
 8006b9e:	4b28      	ldr	r3, [pc, #160]	; (8006c40 <send_login_packet+0xf8>)
 8006ba0:	731a      	strb	r2, [r3, #12]
		loginPacket[13] = infoSNo;
 8006ba2:	4b28      	ldr	r3, [pc, #160]	; (8006c44 <send_login_packet+0xfc>)
 8006ba4:	881b      	ldrh	r3, [r3, #0]
 8006ba6:	b2da      	uxtb	r2, r3
 8006ba8:	4b25      	ldr	r3, [pc, #148]	; (8006c40 <send_login_packet+0xf8>)
 8006baa:	735a      	strb	r2, [r3, #13]
		uint8_t tempCrcData[12];
		for (uint8_t i = 0; i < 12; i++) {
 8006bac:	2316      	movs	r3, #22
 8006bae:	18fb      	adds	r3, r7, r3
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	701a      	strb	r2, [r3, #0]
 8006bb4:	e00e      	b.n	8006bd4 <send_login_packet+0x8c>
			tempCrcData[i] = loginPacket[i + 2];
 8006bb6:	2016      	movs	r0, #22
 8006bb8:	183b      	adds	r3, r7, r0
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	1c9a      	adds	r2, r3, #2
 8006bbe:	183b      	adds	r3, r7, r0
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	491f      	ldr	r1, [pc, #124]	; (8006c40 <send_login_packet+0xf8>)
 8006bc4:	5c89      	ldrb	r1, [r1, r2]
 8006bc6:	003a      	movs	r2, r7
 8006bc8:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 12; i++) {
 8006bca:	183b      	adds	r3, r7, r0
 8006bcc:	781a      	ldrb	r2, [r3, #0]
 8006bce:	183b      	adds	r3, r7, r0
 8006bd0:	3201      	adds	r2, #1
 8006bd2:	701a      	strb	r2, [r3, #0]
 8006bd4:	2316      	movs	r3, #22
 8006bd6:	18fb      	adds	r3, r7, r3
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	2b0b      	cmp	r3, #11
 8006bdc:	d9eb      	bls.n	8006bb6 <send_login_packet+0x6e>
		}
		uint8_t *tempPtr = tempCrcData;
 8006bde:	003b      	movs	r3, r7
 8006be0:	613b      	str	r3, [r7, #16]
		uint16_t crcResult = 0;
 8006be2:	250e      	movs	r5, #14
 8006be4:	197b      	adds	r3, r7, r5
 8006be6:	2200      	movs	r2, #0
 8006be8:	801a      	strh	r2, [r3, #0]
		crcResult = GetCrc16(tempPtr,
 8006bea:	197c      	adds	r4, r7, r5
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	210c      	movs	r1, #12
 8006bf0:	0018      	movs	r0, r3
 8006bf2:	f7ff febf 	bl	8006974 <GetCrc16>
 8006bf6:	0003      	movs	r3, r0
 8006bf8:	8023      	strh	r3, [r4, #0]
				sizeof(tempCrcData) / sizeof(tempCrcData[0]));
		loginPacket[14] = crcResult >> 8;
 8006bfa:	0029      	movs	r1, r5
 8006bfc:	187b      	adds	r3, r7, r1
 8006bfe:	881b      	ldrh	r3, [r3, #0]
 8006c00:	0a1b      	lsrs	r3, r3, #8
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	b2da      	uxtb	r2, r3
 8006c06:	4b0e      	ldr	r3, [pc, #56]	; (8006c40 <send_login_packet+0xf8>)
 8006c08:	739a      	strb	r2, [r3, #14]
		loginPacket[15] = crcResult;
 8006c0a:	187b      	adds	r3, r7, r1
 8006c0c:	881b      	ldrh	r3, [r3, #0]
 8006c0e:	b2da      	uxtb	r2, r3
 8006c10:	4b0b      	ldr	r3, [pc, #44]	; (8006c40 <send_login_packet+0xf8>)
 8006c12:	73da      	strb	r2, [r3, #15]
		HAL_UART_Transmit(&AT_PORT, loginPacket, 18, 100);
 8006c14:	490a      	ldr	r1, [pc, #40]	; (8006c40 <send_login_packet+0xf8>)
 8006c16:	480c      	ldr	r0, [pc, #48]	; (8006c48 <send_login_packet+0x100>)
 8006c18:	2364      	movs	r3, #100	; 0x64
 8006c1a:	2212      	movs	r2, #18
 8006c1c:	f005 ff88 	bl	800cb30 <HAL_UART_Transmit>
		//printf("SENT LOGING PACKET SUCCESSFULLY\n");
		infoSNo++;
 8006c20:	4b08      	ldr	r3, [pc, #32]	; (8006c44 <send_login_packet+0xfc>)
 8006c22:	881b      	ldrh	r3, [r3, #0]
 8006c24:	3301      	adds	r3, #1
 8006c26:	b29a      	uxth	r2, r3
 8006c28:	4b06      	ldr	r3, [pc, #24]	; (8006c44 <send_login_packet+0xfc>)
 8006c2a:	801a      	strh	r2, [r3, #0]

	} else {
		//printf("TCP SESSION NOT OPENED\n");
	}
}
 8006c2c:	46c0      	nop			; (mov r8, r8)
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	b006      	add	sp, #24
 8006c32:	bdb0      	pop	{r4, r5, r7, pc}
 8006c34:	200009f4 	.word	0x200009f4
 8006c38:	20000856 	.word	0x20000856
 8006c3c:	20000860 	.word	0x20000860
 8006c40:	20000068 	.word	0x20000068
 8006c44:	20000064 	.word	0x20000064
 8006c48:	200004b0 	.word	0x200004b0

08006c4c <send_data_packet>:

void send_data_packet() {
 8006c4c:	b5b0      	push	{r4, r5, r7, lr}
 8006c4e:	b096      	sub	sp, #88	; 0x58
 8006c50:	af00      	add	r7, sp, #0
	infoSNo++;
 8006c52:	4b7f      	ldr	r3, [pc, #508]	; (8006e50 <send_data_packet+0x204>)
 8006c54:	881b      	ldrh	r3, [r3, #0]
 8006c56:	3301      	adds	r3, #1
 8006c58:	b29a      	uxth	r2, r3
 8006c5a:	4b7d      	ldr	r3, [pc, #500]	; (8006e50 <send_data_packet+0x204>)
 8006c5c:	801a      	strh	r2, [r3, #0]
	uint8_t sendCounter = 0;
 8006c5e:	2357      	movs	r3, #87	; 0x57
 8006c60:	18fb      	adds	r3, r7, r3
 8006c62:	2200      	movs	r2, #0
 8006c64:	701a      	strb	r2, [r3, #0]
	while (read_data_packet() == 1 && sendCounter < 100 && isLoggedIn == 1
 8006c66:	e06d      	b.n	8006d44 <send_data_packet+0xf8>
			&& isDataMode == 1 && isTcpOpen == 1) {
		for (uint8_t i = 0; i < 18; i++) {
 8006c68:	2356      	movs	r3, #86	; 0x56
 8006c6a:	18fb      	adds	r3, r7, r3
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	701a      	strb	r2, [r3, #0]
 8006c70:	e00e      	b.n	8006c90 <send_data_packet+0x44>
			dataPacket[i + 4] = readPacket[i];
 8006c72:	2056      	movs	r0, #86	; 0x56
 8006c74:	183b      	adds	r3, r7, r0
 8006c76:	781a      	ldrb	r2, [r3, #0]
 8006c78:	183b      	adds	r3, r7, r0
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	3304      	adds	r3, #4
 8006c7e:	4975      	ldr	r1, [pc, #468]	; (8006e54 <send_data_packet+0x208>)
 8006c80:	5c89      	ldrb	r1, [r1, r2]
 8006c82:	4a75      	ldr	r2, [pc, #468]	; (8006e58 <send_data_packet+0x20c>)
 8006c84:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 18; i++) {
 8006c86:	183b      	adds	r3, r7, r0
 8006c88:	781a      	ldrb	r2, [r3, #0]
 8006c8a:	183b      	adds	r3, r7, r0
 8006c8c:	3201      	adds	r2, #1
 8006c8e:	701a      	strb	r2, [r3, #0]
 8006c90:	2356      	movs	r3, #86	; 0x56
 8006c92:	18fb      	adds	r3, r7, r3
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	2b11      	cmp	r3, #17
 8006c98:	d9eb      	bls.n	8006c72 <send_data_packet+0x26>
		}
		dataPacket[30] = infoSNo >> 8;
 8006c9a:	4b6d      	ldr	r3, [pc, #436]	; (8006e50 <send_data_packet+0x204>)
 8006c9c:	881b      	ldrh	r3, [r3, #0]
 8006c9e:	0a1b      	lsrs	r3, r3, #8
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	b2da      	uxtb	r2, r3
 8006ca4:	4b6c      	ldr	r3, [pc, #432]	; (8006e58 <send_data_packet+0x20c>)
 8006ca6:	779a      	strb	r2, [r3, #30]
		dataPacket[31] = infoSNo;
 8006ca8:	4b69      	ldr	r3, [pc, #420]	; (8006e50 <send_data_packet+0x204>)
 8006caa:	881b      	ldrh	r3, [r3, #0]
 8006cac:	b2da      	uxtb	r2, r3
 8006cae:	4b6a      	ldr	r3, [pc, #424]	; (8006e58 <send_data_packet+0x20c>)
 8006cb0:	77da      	strb	r2, [r3, #31]
		uint8_t tempCrcData[30];
		for (uint8_t i = 0; i < 29; i++) {
 8006cb2:	2355      	movs	r3, #85	; 0x55
 8006cb4:	18fb      	adds	r3, r7, r3
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	701a      	strb	r2, [r3, #0]
 8006cba:	e00f      	b.n	8006cdc <send_data_packet+0x90>
			tempCrcData[i] = dataPacket[i + 2];
 8006cbc:	2055      	movs	r0, #85	; 0x55
 8006cbe:	183b      	adds	r3, r7, r0
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	1c9a      	adds	r2, r3, #2
 8006cc4:	183b      	adds	r3, r7, r0
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	4963      	ldr	r1, [pc, #396]	; (8006e58 <send_data_packet+0x20c>)
 8006cca:	5c89      	ldrb	r1, [r1, r2]
 8006ccc:	2224      	movs	r2, #36	; 0x24
 8006cce:	18ba      	adds	r2, r7, r2
 8006cd0:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 29; i++) {
 8006cd2:	183b      	adds	r3, r7, r0
 8006cd4:	781a      	ldrb	r2, [r3, #0]
 8006cd6:	183b      	adds	r3, r7, r0
 8006cd8:	3201      	adds	r2, #1
 8006cda:	701a      	strb	r2, [r3, #0]
 8006cdc:	2355      	movs	r3, #85	; 0x55
 8006cde:	18fb      	adds	r3, r7, r3
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	2b1c      	cmp	r3, #28
 8006ce4:	d9ea      	bls.n	8006cbc <send_data_packet+0x70>
		}
		uint8_t *tempPtr = tempCrcData;
 8006ce6:	2324      	movs	r3, #36	; 0x24
 8006ce8:	18fb      	adds	r3, r7, r3
 8006cea:	64fb      	str	r3, [r7, #76]	; 0x4c
		uint16_t crcResult = 0;
 8006cec:	254a      	movs	r5, #74	; 0x4a
 8006cee:	197b      	adds	r3, r7, r5
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	801a      	strh	r2, [r3, #0]
		crcResult = GetCrc16(tempPtr,
 8006cf4:	197c      	adds	r4, r7, r5
 8006cf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cf8:	211e      	movs	r1, #30
 8006cfa:	0018      	movs	r0, r3
 8006cfc:	f7ff fe3a 	bl	8006974 <GetCrc16>
 8006d00:	0003      	movs	r3, r0
 8006d02:	8023      	strh	r3, [r4, #0]
				sizeof(tempCrcData) / sizeof(tempCrcData[0]));
		dataPacket[32] = crcResult >> 8;
 8006d04:	0028      	movs	r0, r5
 8006d06:	183b      	adds	r3, r7, r0
 8006d08:	881b      	ldrh	r3, [r3, #0]
 8006d0a:	0a1b      	lsrs	r3, r3, #8
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	b2d9      	uxtb	r1, r3
 8006d10:	4b51      	ldr	r3, [pc, #324]	; (8006e58 <send_data_packet+0x20c>)
 8006d12:	2220      	movs	r2, #32
 8006d14:	5499      	strb	r1, [r3, r2]
		dataPacket[33] = crcResult;
 8006d16:	183b      	adds	r3, r7, r0
 8006d18:	881b      	ldrh	r3, [r3, #0]
 8006d1a:	b2d9      	uxtb	r1, r3
 8006d1c:	4b4e      	ldr	r3, [pc, #312]	; (8006e58 <send_data_packet+0x20c>)
 8006d1e:	2221      	movs	r2, #33	; 0x21
 8006d20:	5499      	strb	r1, [r3, r2]
		HAL_UART_Transmit(&AT_PORT, dataPacket, 36, 100);
 8006d22:	494d      	ldr	r1, [pc, #308]	; (8006e58 <send_data_packet+0x20c>)
 8006d24:	484d      	ldr	r0, [pc, #308]	; (8006e5c <send_data_packet+0x210>)
 8006d26:	2364      	movs	r3, #100	; 0x64
 8006d28:	2224      	movs	r2, #36	; 0x24
 8006d2a:	f005 ff01 	bl	800cb30 <HAL_UART_Transmit>
		// HAL_UART_Transmit(&huart4, dataPacket, 36, 100);
		sendCounter++;
 8006d2e:	2157      	movs	r1, #87	; 0x57
 8006d30:	187b      	adds	r3, r7, r1
 8006d32:	781a      	ldrb	r2, [r3, #0]
 8006d34:	187b      	adds	r3, r7, r1
 8006d36:	3201      	adds	r2, #1
 8006d38:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1000);
 8006d3a:	23fa      	movs	r3, #250	; 0xfa
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	0018      	movs	r0, r3
 8006d40:	f002 fa7c 	bl	800923c <HAL_Delay>
	while (read_data_packet() == 1 && sendCounter < 100 && isLoggedIn == 1
 8006d44:	f000 f95c 	bl	8007000 <read_data_packet>
 8006d48:	0003      	movs	r3, r0
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d114      	bne.n	8006d78 <send_data_packet+0x12c>
 8006d4e:	2357      	movs	r3, #87	; 0x57
 8006d50:	18fb      	adds	r3, r7, r3
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	2b63      	cmp	r3, #99	; 0x63
 8006d56:	d80f      	bhi.n	8006d78 <send_data_packet+0x12c>
 8006d58:	4b41      	ldr	r3, [pc, #260]	; (8006e60 <send_data_packet+0x214>)
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d10a      	bne.n	8006d78 <send_data_packet+0x12c>
			&& isDataMode == 1 && isTcpOpen == 1) {
 8006d62:	4b40      	ldr	r3, [pc, #256]	; (8006e64 <send_data_packet+0x218>)
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d105      	bne.n	8006d78 <send_data_packet+0x12c>
 8006d6c:	4b3e      	ldr	r3, [pc, #248]	; (8006e68 <send_data_packet+0x21c>)
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d100      	bne.n	8006d78 <send_data_packet+0x12c>
 8006d76:	e777      	b.n	8006c68 <send_data_packet+0x1c>
	}
	if (read_data_packet() == 0) {
 8006d78:	f000 f942 	bl	8007000 <read_data_packet>
 8006d7c:	1e03      	subs	r3, r0, #0
 8006d7e:	d162      	bne.n	8006e46 <send_data_packet+0x1fa>
		for (uint8_t i = 0; i < 18; i++) {
 8006d80:	2354      	movs	r3, #84	; 0x54
 8006d82:	18fb      	adds	r3, r7, r3
 8006d84:	2200      	movs	r2, #0
 8006d86:	701a      	strb	r2, [r3, #0]
 8006d88:	e010      	b.n	8006dac <send_data_packet+0x160>
			dataPacket[i + 4] = gps_info[i];
 8006d8a:	4b38      	ldr	r3, [pc, #224]	; (8006e6c <send_data_packet+0x220>)
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	2054      	movs	r0, #84	; 0x54
 8006d90:	183b      	adds	r3, r7, r0
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	18d2      	adds	r2, r2, r3
 8006d96:	183b      	adds	r3, r7, r0
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	3304      	adds	r3, #4
 8006d9c:	7811      	ldrb	r1, [r2, #0]
 8006d9e:	4a2e      	ldr	r2, [pc, #184]	; (8006e58 <send_data_packet+0x20c>)
 8006da0:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 18; i++) {
 8006da2:	183b      	adds	r3, r7, r0
 8006da4:	781a      	ldrb	r2, [r3, #0]
 8006da6:	183b      	adds	r3, r7, r0
 8006da8:	3201      	adds	r2, #1
 8006daa:	701a      	strb	r2, [r3, #0]
 8006dac:	2354      	movs	r3, #84	; 0x54
 8006dae:	18fb      	adds	r3, r7, r3
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	2b11      	cmp	r3, #17
 8006db4:	d9e9      	bls.n	8006d8a <send_data_packet+0x13e>
		}
		dataPacket[30] = infoSNo >> 8;
 8006db6:	4b26      	ldr	r3, [pc, #152]	; (8006e50 <send_data_packet+0x204>)
 8006db8:	881b      	ldrh	r3, [r3, #0]
 8006dba:	0a1b      	lsrs	r3, r3, #8
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	b2da      	uxtb	r2, r3
 8006dc0:	4b25      	ldr	r3, [pc, #148]	; (8006e58 <send_data_packet+0x20c>)
 8006dc2:	779a      	strb	r2, [r3, #30]
		dataPacket[31] = infoSNo;
 8006dc4:	4b22      	ldr	r3, [pc, #136]	; (8006e50 <send_data_packet+0x204>)
 8006dc6:	881b      	ldrh	r3, [r3, #0]
 8006dc8:	b2da      	uxtb	r2, r3
 8006dca:	4b23      	ldr	r3, [pc, #140]	; (8006e58 <send_data_packet+0x20c>)
 8006dcc:	77da      	strb	r2, [r3, #31]
		uint8_t tempCrcData[30];
		for (uint8_t i = 0; i < 29; i++) {
 8006dce:	2353      	movs	r3, #83	; 0x53
 8006dd0:	18fb      	adds	r3, r7, r3
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	701a      	strb	r2, [r3, #0]
 8006dd6:	e00e      	b.n	8006df6 <send_data_packet+0x1aa>
			tempCrcData[i] = dataPacket[i + 2];
 8006dd8:	2053      	movs	r0, #83	; 0x53
 8006dda:	183b      	adds	r3, r7, r0
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	1c9a      	adds	r2, r3, #2
 8006de0:	183b      	adds	r3, r7, r0
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	491c      	ldr	r1, [pc, #112]	; (8006e58 <send_data_packet+0x20c>)
 8006de6:	5c89      	ldrb	r1, [r1, r2]
 8006de8:	1d3a      	adds	r2, r7, #4
 8006dea:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 29; i++) {
 8006dec:	183b      	adds	r3, r7, r0
 8006dee:	781a      	ldrb	r2, [r3, #0]
 8006df0:	183b      	adds	r3, r7, r0
 8006df2:	3201      	adds	r2, #1
 8006df4:	701a      	strb	r2, [r3, #0]
 8006df6:	2353      	movs	r3, #83	; 0x53
 8006df8:	18fb      	adds	r3, r7, r3
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	2b1c      	cmp	r3, #28
 8006dfe:	d9eb      	bls.n	8006dd8 <send_data_packet+0x18c>
		}
		uint8_t *tempPtr = tempCrcData;
 8006e00:	1d3b      	adds	r3, r7, #4
 8006e02:	647b      	str	r3, [r7, #68]	; 0x44
		uint16_t crcResult = 0;
 8006e04:	2542      	movs	r5, #66	; 0x42
 8006e06:	197b      	adds	r3, r7, r5
 8006e08:	2200      	movs	r2, #0
 8006e0a:	801a      	strh	r2, [r3, #0]
		crcResult = GetCrc16(tempPtr,
 8006e0c:	197c      	adds	r4, r7, r5
 8006e0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e10:	211e      	movs	r1, #30
 8006e12:	0018      	movs	r0, r3
 8006e14:	f7ff fdae 	bl	8006974 <GetCrc16>
 8006e18:	0003      	movs	r3, r0
 8006e1a:	8023      	strh	r3, [r4, #0]
				sizeof(tempCrcData) / sizeof(tempCrcData[0]));
		dataPacket[32] = crcResult >> 8;
 8006e1c:	0028      	movs	r0, r5
 8006e1e:	183b      	adds	r3, r7, r0
 8006e20:	881b      	ldrh	r3, [r3, #0]
 8006e22:	0a1b      	lsrs	r3, r3, #8
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	b2d9      	uxtb	r1, r3
 8006e28:	4b0b      	ldr	r3, [pc, #44]	; (8006e58 <send_data_packet+0x20c>)
 8006e2a:	2220      	movs	r2, #32
 8006e2c:	5499      	strb	r1, [r3, r2]
		dataPacket[33] = crcResult;
 8006e2e:	183b      	adds	r3, r7, r0
 8006e30:	881b      	ldrh	r3, [r3, #0]
 8006e32:	b2d9      	uxtb	r1, r3
 8006e34:	4b08      	ldr	r3, [pc, #32]	; (8006e58 <send_data_packet+0x20c>)
 8006e36:	2221      	movs	r2, #33	; 0x21
 8006e38:	5499      	strb	r1, [r3, r2]
		HAL_UART_Transmit(&AT_PORT, dataPacket, 36, 100);
 8006e3a:	4907      	ldr	r1, [pc, #28]	; (8006e58 <send_data_packet+0x20c>)
 8006e3c:	4807      	ldr	r0, [pc, #28]	; (8006e5c <send_data_packet+0x210>)
 8006e3e:	2364      	movs	r3, #100	; 0x64
 8006e40:	2224      	movs	r2, #36	; 0x24
 8006e42:	f005 fe75 	bl	800cb30 <HAL_UART_Transmit>

		// HAL_UART_Transmit(&huart4, dataPacket, 36, 100);

	}
}
 8006e46:	46c0      	nop			; (mov r8, r8)
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	b016      	add	sp, #88	; 0x58
 8006e4c:	bdb0      	pop	{r4, r5, r7, pc}
 8006e4e:	46c0      	nop			; (mov r8, r8)
 8006e50:	20000064 	.word	0x20000064
 8006e54:	20000a1c 	.word	0x20000a1c
 8006e58:	2000007c 	.word	0x2000007c
 8006e5c:	200004b0 	.word	0x200004b0
 8006e60:	200009f7 	.word	0x200009f7
 8006e64:	20000856 	.word	0x20000856
 8006e68:	200009f4 	.word	0x200009f4
 8006e6c:	20000024 	.word	0x20000024

08006e70 <checkdatasize>:
uint8_t checkdatasize() {
 8006e70:	b580      	push	{r7, lr}
 8006e72:	af00      	add	r7, sp, #0
	if (StartSec == EndSec) {
 8006e74:	4b1c      	ldr	r3, [pc, #112]	; (8006ee8 <checkdatasize+0x78>)
 8006e76:	881b      	ldrh	r3, [r3, #0]
 8006e78:	b29a      	uxth	r2, r3
 8006e7a:	4b1c      	ldr	r3, [pc, #112]	; (8006eec <checkdatasize+0x7c>)
 8006e7c:	881b      	ldrh	r3, [r3, #0]
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d10f      	bne.n	8006ea4 <checkdatasize+0x34>
		if ((StartN - EndN) >= 672) {
 8006e84:	4b1a      	ldr	r3, [pc, #104]	; (8006ef0 <checkdatasize+0x80>)
 8006e86:	881b      	ldrh	r3, [r3, #0]
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	001a      	movs	r2, r3
 8006e8c:	4b19      	ldr	r3, [pc, #100]	; (8006ef4 <checkdatasize+0x84>)
 8006e8e:	881b      	ldrh	r3, [r3, #0]
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	1ad2      	subs	r2, r2, r3
 8006e94:	23a8      	movs	r3, #168	; 0xa8
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	db01      	blt.n	8006ea0 <checkdatasize+0x30>
			return 1;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	e01f      	b.n	8006ee0 <checkdatasize+0x70>
		} else {
			return 0;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	e01d      	b.n	8006ee0 <checkdatasize+0x70>
		}
	} else if ((StartSec - EndSec) == 1) {
 8006ea4:	4b10      	ldr	r3, [pc, #64]	; (8006ee8 <checkdatasize+0x78>)
 8006ea6:	881b      	ldrh	r3, [r3, #0]
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	001a      	movs	r2, r3
 8006eac:	4b0f      	ldr	r3, [pc, #60]	; (8006eec <checkdatasize+0x7c>)
 8006eae:	881b      	ldrh	r3, [r3, #0]
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	1ad3      	subs	r3, r2, r3
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d112      	bne.n	8006ede <checkdatasize+0x6e>
		if ((4096 - EndN + StartN) >= 672) {
 8006eb8:	4b0e      	ldr	r3, [pc, #56]	; (8006ef4 <checkdatasize+0x84>)
 8006eba:	881b      	ldrh	r3, [r3, #0]
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	001a      	movs	r2, r3
 8006ec0:	2380      	movs	r3, #128	; 0x80
 8006ec2:	015b      	lsls	r3, r3, #5
 8006ec4:	1a9b      	subs	r3, r3, r2
 8006ec6:	4a0a      	ldr	r2, [pc, #40]	; (8006ef0 <checkdatasize+0x80>)
 8006ec8:	8812      	ldrh	r2, [r2, #0]
 8006eca:	b292      	uxth	r2, r2
 8006ecc:	189a      	adds	r2, r3, r2
 8006ece:	23a8      	movs	r3, #168	; 0xa8
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	db01      	blt.n	8006eda <checkdatasize+0x6a>
			return 1;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e002      	b.n	8006ee0 <checkdatasize+0x70>
		} else {
			return 0;
 8006eda:	2300      	movs	r3, #0
 8006edc:	e000      	b.n	8006ee0 <checkdatasize+0x70>
		}
	} else {
		return 1;
 8006ede:	2301      	movs	r3, #1
	}
}
 8006ee0:	0018      	movs	r0, r3
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
 8006ee6:	46c0      	nop			; (mov r8, r8)
 8006ee8:	20000ce0 	.word	0x20000ce0
 8006eec:	20000ce2 	.word	0x20000ce2
 8006ef0:	20000cdc 	.word	0x20000cdc
 8006ef4:	20000cde 	.word	0x20000cde

08006ef8 <save_data_packet>:

void save_data_packet() {
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b082      	sub	sp, #8
 8006efc:	af00      	add	r7, sp, #0
	memset(savePacket, 0, sizeof(savePacket));
 8006efe:	4b38      	ldr	r3, [pc, #224]	; (8006fe0 <save_data_packet+0xe8>)
 8006f00:	2220      	movs	r2, #32
 8006f02:	2100      	movs	r1, #0
 8006f04:	0018      	movs	r0, r3
 8006f06:	f007 fd6e 	bl	800e9e6 <memset>
	for (uint8_t i = 0; i < 18; i++) {
 8006f0a:	1dfb      	adds	r3, r7, #7
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	701a      	strb	r2, [r3, #0]
 8006f10:	e00e      	b.n	8006f30 <save_data_packet+0x38>
		savePacket[i] = gps_info[i];
 8006f12:	4b34      	ldr	r3, [pc, #208]	; (8006fe4 <save_data_packet+0xec>)
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	1dfb      	adds	r3, r7, #7
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	18d2      	adds	r2, r2, r3
 8006f1c:	1dfb      	adds	r3, r7, #7
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	7811      	ldrb	r1, [r2, #0]
 8006f22:	4a2f      	ldr	r2, [pc, #188]	; (8006fe0 <save_data_packet+0xe8>)
 8006f24:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 18; i++) {
 8006f26:	1dfb      	adds	r3, r7, #7
 8006f28:	781a      	ldrb	r2, [r3, #0]
 8006f2a:	1dfb      	adds	r3, r7, #7
 8006f2c:	3201      	adds	r2, #1
 8006f2e:	701a      	strb	r2, [r3, #0]
 8006f30:	1dfb      	adds	r3, r7, #7
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	2b11      	cmp	r3, #17
 8006f36:	d9ec      	bls.n	8006f12 <save_data_packet+0x1a>
	}
	W25qxx_WriteSector(savePacket, StartSec, StartN, 32);
 8006f38:	4b2b      	ldr	r3, [pc, #172]	; (8006fe8 <save_data_packet+0xf0>)
 8006f3a:	881b      	ldrh	r3, [r3, #0]
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	0019      	movs	r1, r3
 8006f40:	4b2a      	ldr	r3, [pc, #168]	; (8006fec <save_data_packet+0xf4>)
 8006f42:	881b      	ldrh	r3, [r3, #0]
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	001a      	movs	r2, r3
 8006f48:	4825      	ldr	r0, [pc, #148]	; (8006fe0 <save_data_packet+0xe8>)
 8006f4a:	2320      	movs	r3, #32
 8006f4c:	f001 fecc 	bl	8008ce8 <W25qxx_WriteSector>
	StartN = StartN + 32;
 8006f50:	4b26      	ldr	r3, [pc, #152]	; (8006fec <save_data_packet+0xf4>)
 8006f52:	881b      	ldrh	r3, [r3, #0]
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	3320      	adds	r3, #32
 8006f58:	b29a      	uxth	r2, r3
 8006f5a:	4b24      	ldr	r3, [pc, #144]	; (8006fec <save_data_packet+0xf4>)
 8006f5c:	801a      	strh	r2, [r3, #0]
	if (StartN > 4090) {
 8006f5e:	4b23      	ldr	r3, [pc, #140]	; (8006fec <save_data_packet+0xf4>)
 8006f60:	881b      	ldrh	r3, [r3, #0]
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	4a22      	ldr	r2, [pc, #136]	; (8006ff0 <save_data_packet+0xf8>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d935      	bls.n	8006fd6 <save_data_packet+0xde>
		StartN = 0;
 8006f6a:	4b20      	ldr	r3, [pc, #128]	; (8006fec <save_data_packet+0xf4>)
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	801a      	strh	r2, [r3, #0]
		StartSec += 1;
 8006f70:	4b1d      	ldr	r3, [pc, #116]	; (8006fe8 <save_data_packet+0xf0>)
 8006f72:	881b      	ldrh	r3, [r3, #0]
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	3301      	adds	r3, #1
 8006f78:	b29a      	uxth	r2, r3
 8006f7a:	4b1b      	ldr	r3, [pc, #108]	; (8006fe8 <save_data_packet+0xf0>)
 8006f7c:	801a      	strh	r2, [r3, #0]
		if (StartSec == 1024) {
 8006f7e:	4b1a      	ldr	r3, [pc, #104]	; (8006fe8 <save_data_packet+0xf0>)
 8006f80:	881b      	ldrh	r3, [r3, #0]
 8006f82:	b29a      	uxth	r2, r3
 8006f84:	2380      	movs	r3, #128	; 0x80
 8006f86:	00db      	lsls	r3, r3, #3
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d102      	bne.n	8006f92 <save_data_packet+0x9a>
			StartSec = 1;
 8006f8c:	4b16      	ldr	r3, [pc, #88]	; (8006fe8 <save_data_packet+0xf0>)
 8006f8e:	2201      	movs	r2, #1
 8006f90:	801a      	strh	r2, [r3, #0]
		}
		W25qxx_EraseSector(StartSec);
 8006f92:	4b15      	ldr	r3, [pc, #84]	; (8006fe8 <save_data_packet+0xf0>)
 8006f94:	881b      	ldrh	r3, [r3, #0]
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	0018      	movs	r0, r3
 8006f9a:	f001 fd55 	bl	8008a48 <W25qxx_EraseSector>
		if (StartSec == EndSec) {
 8006f9e:	4b12      	ldr	r3, [pc, #72]	; (8006fe8 <save_data_packet+0xf0>)
 8006fa0:	881b      	ldrh	r3, [r3, #0]
 8006fa2:	b29a      	uxth	r2, r3
 8006fa4:	4b13      	ldr	r3, [pc, #76]	; (8006ff4 <save_data_packet+0xfc>)
 8006fa6:	881b      	ldrh	r3, [r3, #0]
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d113      	bne.n	8006fd6 <save_data_packet+0xde>
			EndN = 0;
 8006fae:	4b12      	ldr	r3, [pc, #72]	; (8006ff8 <save_data_packet+0x100>)
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	801a      	strh	r2, [r3, #0]
			if (EndSec == 1023) {
 8006fb4:	4b0f      	ldr	r3, [pc, #60]	; (8006ff4 <save_data_packet+0xfc>)
 8006fb6:	881b      	ldrh	r3, [r3, #0]
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	4a10      	ldr	r2, [pc, #64]	; (8006ffc <save_data_packet+0x104>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d103      	bne.n	8006fc8 <save_data_packet+0xd0>
				EndSec = 1;
 8006fc0:	4b0c      	ldr	r3, [pc, #48]	; (8006ff4 <save_data_packet+0xfc>)
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	801a      	strh	r2, [r3, #0]
			} else {
				EndSec += 1;
			}
		}
	}
}
 8006fc6:	e006      	b.n	8006fd6 <save_data_packet+0xde>
				EndSec += 1;
 8006fc8:	4b0a      	ldr	r3, [pc, #40]	; (8006ff4 <save_data_packet+0xfc>)
 8006fca:	881b      	ldrh	r3, [r3, #0]
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	3301      	adds	r3, #1
 8006fd0:	b29a      	uxth	r2, r3
 8006fd2:	4b08      	ldr	r3, [pc, #32]	; (8006ff4 <save_data_packet+0xfc>)
 8006fd4:	801a      	strh	r2, [r3, #0]
}
 8006fd6:	46c0      	nop			; (mov r8, r8)
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	b002      	add	sp, #8
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	46c0      	nop			; (mov r8, r8)
 8006fe0:	200009fc 	.word	0x200009fc
 8006fe4:	20000024 	.word	0x20000024
 8006fe8:	20000ce0 	.word	0x20000ce0
 8006fec:	20000cdc 	.word	0x20000cdc
 8006ff0:	00000ffa 	.word	0x00000ffa
 8006ff4:	20000ce2 	.word	0x20000ce2
 8006ff8:	20000cde 	.word	0x20000cde
 8006ffc:	000003ff 	.word	0x000003ff

08007000 <read_data_packet>:
uint8_t read_data_packet() {
 8007000:	b580      	push	{r7, lr}
 8007002:	af00      	add	r7, sp, #0
	memset(readPacket, 0, sizeof(readPacket));
 8007004:	4b32      	ldr	r3, [pc, #200]	; (80070d0 <read_data_packet+0xd0>)
 8007006:	2220      	movs	r2, #32
 8007008:	2100      	movs	r1, #0
 800700a:	0018      	movs	r0, r3
 800700c:	f007 fceb 	bl	800e9e6 <memset>
	if ((EndSec == StartSec) && (EndN == StartN)) {
 8007010:	4b30      	ldr	r3, [pc, #192]	; (80070d4 <read_data_packet+0xd4>)
 8007012:	881b      	ldrh	r3, [r3, #0]
 8007014:	b29a      	uxth	r2, r3
 8007016:	4b30      	ldr	r3, [pc, #192]	; (80070d8 <read_data_packet+0xd8>)
 8007018:	881b      	ldrh	r3, [r3, #0]
 800701a:	b29b      	uxth	r3, r3
 800701c:	429a      	cmp	r2, r3
 800701e:	d122      	bne.n	8007066 <read_data_packet+0x66>
 8007020:	4b2e      	ldr	r3, [pc, #184]	; (80070dc <read_data_packet+0xdc>)
 8007022:	881b      	ldrh	r3, [r3, #0]
 8007024:	b29a      	uxth	r2, r3
 8007026:	4b2e      	ldr	r3, [pc, #184]	; (80070e0 <read_data_packet+0xe0>)
 8007028:	881b      	ldrh	r3, [r3, #0]
 800702a:	b29b      	uxth	r3, r3
 800702c:	429a      	cmp	r2, r3
 800702e:	d11a      	bne.n	8007066 <read_data_packet+0x66>
		if (EndN != 0 || EndSec != 1) {
 8007030:	4b2a      	ldr	r3, [pc, #168]	; (80070dc <read_data_packet+0xdc>)
 8007032:	881b      	ldrh	r3, [r3, #0]
 8007034:	b29b      	uxth	r3, r3
 8007036:	2b00      	cmp	r3, #0
 8007038:	d104      	bne.n	8007044 <read_data_packet+0x44>
 800703a:	4b26      	ldr	r3, [pc, #152]	; (80070d4 <read_data_packet+0xd4>)
 800703c:	881b      	ldrh	r3, [r3, #0]
 800703e:	b29b      	uxth	r3, r3
 8007040:	2b01      	cmp	r3, #1
 8007042:	d00e      	beq.n	8007062 <read_data_packet+0x62>
			W25qxx_EraseSector(1);
 8007044:	2001      	movs	r0, #1
 8007046:	f001 fcff 	bl	8008a48 <W25qxx_EraseSector>
			StartN = 0;
 800704a:	4b25      	ldr	r3, [pc, #148]	; (80070e0 <read_data_packet+0xe0>)
 800704c:	2200      	movs	r2, #0
 800704e:	801a      	strh	r2, [r3, #0]
			EndN = 0;
 8007050:	4b22      	ldr	r3, [pc, #136]	; (80070dc <read_data_packet+0xdc>)
 8007052:	2200      	movs	r2, #0
 8007054:	801a      	strh	r2, [r3, #0]
			StartSec = 1;
 8007056:	4b20      	ldr	r3, [pc, #128]	; (80070d8 <read_data_packet+0xd8>)
 8007058:	2201      	movs	r2, #1
 800705a:	801a      	strh	r2, [r3, #0]
			EndSec = 1;
 800705c:	4b1d      	ldr	r3, [pc, #116]	; (80070d4 <read_data_packet+0xd4>)
 800705e:	2201      	movs	r2, #1
 8007060:	801a      	strh	r2, [r3, #0]
		}
		return 0;
 8007062:	2300      	movs	r3, #0
 8007064:	e030      	b.n	80070c8 <read_data_packet+0xc8>
	} else {
		W25qxx_ReadSector(readPacket, EndSec, EndN, 32);
 8007066:	4b1b      	ldr	r3, [pc, #108]	; (80070d4 <read_data_packet+0xd4>)
 8007068:	881b      	ldrh	r3, [r3, #0]
 800706a:	b29b      	uxth	r3, r3
 800706c:	0019      	movs	r1, r3
 800706e:	4b1b      	ldr	r3, [pc, #108]	; (80070dc <read_data_packet+0xdc>)
 8007070:	881b      	ldrh	r3, [r3, #0]
 8007072:	b29b      	uxth	r3, r3
 8007074:	001a      	movs	r2, r3
 8007076:	4816      	ldr	r0, [pc, #88]	; (80070d0 <read_data_packet+0xd0>)
 8007078:	2320      	movs	r3, #32
 800707a:	f001 ffcb 	bl	8009014 <W25qxx_ReadSector>
		//reading data//
		EndN = EndN + 32;
 800707e:	4b17      	ldr	r3, [pc, #92]	; (80070dc <read_data_packet+0xdc>)
 8007080:	881b      	ldrh	r3, [r3, #0]
 8007082:	b29b      	uxth	r3, r3
 8007084:	3320      	adds	r3, #32
 8007086:	b29a      	uxth	r2, r3
 8007088:	4b14      	ldr	r3, [pc, #80]	; (80070dc <read_data_packet+0xdc>)
 800708a:	801a      	strh	r2, [r3, #0]
		if (EndN > 4090) {
 800708c:	4b13      	ldr	r3, [pc, #76]	; (80070dc <read_data_packet+0xdc>)
 800708e:	881b      	ldrh	r3, [r3, #0]
 8007090:	b29b      	uxth	r3, r3
 8007092:	4a14      	ldr	r2, [pc, #80]	; (80070e4 <read_data_packet+0xe4>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d916      	bls.n	80070c6 <read_data_packet+0xc6>
			if (EndSec == 1023) {
 8007098:	4b0e      	ldr	r3, [pc, #56]	; (80070d4 <read_data_packet+0xd4>)
 800709a:	881b      	ldrh	r3, [r3, #0]
 800709c:	b29b      	uxth	r3, r3
 800709e:	4a12      	ldr	r2, [pc, #72]	; (80070e8 <read_data_packet+0xe8>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d106      	bne.n	80070b2 <read_data_packet+0xb2>
				EndSec = 1;
 80070a4:	4b0b      	ldr	r3, [pc, #44]	; (80070d4 <read_data_packet+0xd4>)
 80070a6:	2201      	movs	r2, #1
 80070a8:	801a      	strh	r2, [r3, #0]
				EndN = 0;
 80070aa:	4b0c      	ldr	r3, [pc, #48]	; (80070dc <read_data_packet+0xdc>)
 80070ac:	2200      	movs	r2, #0
 80070ae:	801a      	strh	r2, [r3, #0]
 80070b0:	e009      	b.n	80070c6 <read_data_packet+0xc6>
			} else {
				EndSec = EndSec + 1;
 80070b2:	4b08      	ldr	r3, [pc, #32]	; (80070d4 <read_data_packet+0xd4>)
 80070b4:	881b      	ldrh	r3, [r3, #0]
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	3301      	adds	r3, #1
 80070ba:	b29a      	uxth	r2, r3
 80070bc:	4b05      	ldr	r3, [pc, #20]	; (80070d4 <read_data_packet+0xd4>)
 80070be:	801a      	strh	r2, [r3, #0]
				EndN = 0;
 80070c0:	4b06      	ldr	r3, [pc, #24]	; (80070dc <read_data_packet+0xdc>)
 80070c2:	2200      	movs	r2, #0
 80070c4:	801a      	strh	r2, [r3, #0]
			}
		}
		return 1;
 80070c6:	2301      	movs	r3, #1
	}
}
 80070c8:	0018      	movs	r0, r3
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
 80070ce:	46c0      	nop			; (mov r8, r8)
 80070d0:	20000a1c 	.word	0x20000a1c
 80070d4:	20000ce2 	.word	0x20000ce2
 80070d8:	20000ce0 	.word	0x20000ce0
 80070dc:	20000cde 	.word	0x20000cde
 80070e0:	20000cdc 	.word	0x20000cdc
 80070e4:	00000ffa 	.word	0x00000ffa
 80070e8:	000003ff 	.word	0x000003ff

080070ec <send_hb_packet>:

void send_hb_packet() {
 80070ec:	b5b0      	push	{r4, r5, r7, lr}
 80070ee:	b088      	sub	sp, #32
 80070f0:	af00      	add	r7, sp, #0
	if (isTcpOpen == 1 && isDataMode == 1) {
 80070f2:	4b89      	ldr	r3, [pc, #548]	; (8007318 <send_hb_packet+0x22c>)
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d000      	beq.n	80070fe <send_hb_packet+0x12>
 80070fc:	e108      	b.n	8007310 <send_hb_packet+0x224>
 80070fe:	4b87      	ldr	r3, [pc, #540]	; (800731c <send_hb_packet+0x230>)
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	b2db      	uxtb	r3, r3
 8007104:	2b01      	cmp	r3, #1
 8007106:	d000      	beq.n	800710a <send_hb_packet+0x1e>
 8007108:	e102      	b.n	8007310 <send_hb_packet+0x224>
		uint8_t TermInfo = 0;
 800710a:	211c      	movs	r1, #28
 800710c:	187b      	adds	r3, r7, r1
 800710e:	2200      	movs	r2, #0
 8007110:	701a      	strb	r2, [r3, #0]
		uint8_t VLvl;
		uint8_t SigStre = 20;
 8007112:	231b      	movs	r3, #27
 8007114:	18fb      	adds	r3, r7, r3
 8007116:	2214      	movs	r2, #20
 8007118:	701a      	strb	r2, [r3, #0]
		uint8_t GSMSS;

		int voltage = 4400;
 800711a:	4b81      	ldr	r3, [pc, #516]	; (8007320 <send_hb_packet+0x234>)
 800711c:	617b      	str	r3, [r7, #20]
			TermInfo = TermInfo | 0x80;
		}
		//if gps tracking is on

		if (1) {
			TermInfo = TermInfo | 0x40;
 800711e:	0008      	movs	r0, r1
 8007120:	183b      	adds	r3, r7, r0
 8007122:	183a      	adds	r2, r7, r0
 8007124:	7812      	ldrb	r2, [r2, #0]
 8007126:	2140      	movs	r1, #64	; 0x40
 8007128:	430a      	orrs	r2, r1
 800712a:	701a      	strb	r2, [r3, #0]
		}
		//if SOS is on

		if (1) {
			TermInfo = TermInfo | 0x20;
 800712c:	183b      	adds	r3, r7, r0
 800712e:	183a      	adds	r2, r7, r0
 8007130:	7812      	ldrb	r2, [r2, #0]
 8007132:	2120      	movs	r1, #32
 8007134:	430a      	orrs	r2, r1
 8007136:	701a      	strb	r2, [r3, #0]
		}
		//if Low batt alarm is on

		if (1) {
			TermInfo = TermInfo | 0x18;
 8007138:	183b      	adds	r3, r7, r0
 800713a:	183a      	adds	r2, r7, r0
 800713c:	7812      	ldrb	r2, [r2, #0]
 800713e:	2118      	movs	r1, #24
 8007140:	430a      	orrs	r2, r1
 8007142:	701a      	strb	r2, [r3, #0]
		}
		//if Power Cut alarm is on

		if (1) {
			TermInfo = TermInfo | 0x10;
 8007144:	183b      	adds	r3, r7, r0
 8007146:	183a      	adds	r2, r7, r0
 8007148:	7812      	ldrb	r2, [r2, #0]
 800714a:	2110      	movs	r1, #16
 800714c:	430a      	orrs	r2, r1
 800714e:	701a      	strb	r2, [r3, #0]
		}
		//if shock alarm is on
		if (1) {
			TermInfo = TermInfo | 0x8;
 8007150:	183b      	adds	r3, r7, r0
 8007152:	183a      	adds	r2, r7, r0
 8007154:	7812      	ldrb	r2, [r2, #0]
 8007156:	2108      	movs	r1, #8
 8007158:	430a      	orrs	r2, r1
 800715a:	701a      	strb	r2, [r3, #0]
		}
		// 000 means normal
		//if charge is on
		if (1) {
			TermInfo = TermInfo | 0x4;
 800715c:	183b      	adds	r3, r7, r0
 800715e:	183a      	adds	r2, r7, r0
 8007160:	7812      	ldrb	r2, [r2, #0]
 8007162:	2104      	movs	r1, #4
 8007164:	430a      	orrs	r2, r1
 8007166:	701a      	strb	r2, [r3, #0]
		}
		//if ACC is on
		if (1) {
			TermInfo = TermInfo | 0x2;
 8007168:	183b      	adds	r3, r7, r0
 800716a:	183a      	adds	r2, r7, r0
 800716c:	7812      	ldrb	r2, [r2, #0]
 800716e:	2102      	movs	r1, #2
 8007170:	430a      	orrs	r2, r1
 8007172:	701a      	strb	r2, [r3, #0]
		}
		//if Activated
		if (1) {
			TermInfo = TermInfo | 0x1;
 8007174:	183b      	adds	r3, r7, r0
 8007176:	183a      	adds	r2, r7, r0
 8007178:	7812      	ldrb	r2, [r2, #0]
 800717a:	2101      	movs	r1, #1
 800717c:	430a      	orrs	r2, r1
 800717e:	701a      	strb	r2, [r3, #0]
		}
		if (voltage > 4400) {
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	4a67      	ldr	r2, [pc, #412]	; (8007320 <send_hb_packet+0x234>)
 8007184:	4293      	cmp	r3, r2
 8007186:	dd04      	ble.n	8007192 <send_hb_packet+0xa6>
			VLvl = 6;
 8007188:	231f      	movs	r3, #31
 800718a:	18fb      	adds	r3, r7, r3
 800718c:	2206      	movs	r2, #6
 800718e:	701a      	strb	r2, [r3, #0]
 8007190:	e031      	b.n	80071f6 <send_hb_packet+0x10a>
		} else if (voltage > 4100) {
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	4a63      	ldr	r2, [pc, #396]	; (8007324 <send_hb_packet+0x238>)
 8007196:	4293      	cmp	r3, r2
 8007198:	dd04      	ble.n	80071a4 <send_hb_packet+0xb8>
			VLvl = 5;
 800719a:	231f      	movs	r3, #31
 800719c:	18fb      	adds	r3, r7, r3
 800719e:	2205      	movs	r2, #5
 80071a0:	701a      	strb	r2, [r3, #0]
 80071a2:	e028      	b.n	80071f6 <send_hb_packet+0x10a>

		} else if (voltage > 4000) {
 80071a4:	697a      	ldr	r2, [r7, #20]
 80071a6:	23fa      	movs	r3, #250	; 0xfa
 80071a8:	011b      	lsls	r3, r3, #4
 80071aa:	429a      	cmp	r2, r3
 80071ac:	dd04      	ble.n	80071b8 <send_hb_packet+0xcc>
			VLvl = 4;
 80071ae:	231f      	movs	r3, #31
 80071b0:	18fb      	adds	r3, r7, r3
 80071b2:	2204      	movs	r2, #4
 80071b4:	701a      	strb	r2, [r3, #0]
 80071b6:	e01e      	b.n	80071f6 <send_hb_packet+0x10a>

		} else if (voltage > 3900) {
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	4a5b      	ldr	r2, [pc, #364]	; (8007328 <send_hb_packet+0x23c>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	dd04      	ble.n	80071ca <send_hb_packet+0xde>
			VLvl = 3;
 80071c0:	231f      	movs	r3, #31
 80071c2:	18fb      	adds	r3, r7, r3
 80071c4:	2203      	movs	r2, #3
 80071c6:	701a      	strb	r2, [r3, #0]
 80071c8:	e015      	b.n	80071f6 <send_hb_packet+0x10a>

		} else if (voltage > 3800) {
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	4a57      	ldr	r2, [pc, #348]	; (800732c <send_hb_packet+0x240>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	dd04      	ble.n	80071dc <send_hb_packet+0xf0>
			VLvl = 2;
 80071d2:	231f      	movs	r3, #31
 80071d4:	18fb      	adds	r3, r7, r3
 80071d6:	2202      	movs	r2, #2
 80071d8:	701a      	strb	r2, [r3, #0]
 80071da:	e00c      	b.n	80071f6 <send_hb_packet+0x10a>

		} else if (voltage > 3700) {
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	4a54      	ldr	r2, [pc, #336]	; (8007330 <send_hb_packet+0x244>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	dd04      	ble.n	80071ee <send_hb_packet+0x102>
			VLvl = 1;
 80071e4:	231f      	movs	r3, #31
 80071e6:	18fb      	adds	r3, r7, r3
 80071e8:	2201      	movs	r2, #1
 80071ea:	701a      	strb	r2, [r3, #0]
 80071ec:	e003      	b.n	80071f6 <send_hb_packet+0x10a>

		} else {
			VLvl = 0;
 80071ee:	231f      	movs	r3, #31
 80071f0:	18fb      	adds	r3, r7, r3
 80071f2:	2200      	movs	r2, #0
 80071f4:	701a      	strb	r2, [r3, #0]

		}
		if (SigStre > 19) {
 80071f6:	231b      	movs	r3, #27
 80071f8:	18fb      	adds	r3, r7, r3
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	2b13      	cmp	r3, #19
 80071fe:	d904      	bls.n	800720a <send_hb_packet+0x11e>
			GSMSS = 4;
 8007200:	231e      	movs	r3, #30
 8007202:	18fb      	adds	r3, r7, r3
 8007204:	2204      	movs	r2, #4
 8007206:	701a      	strb	r2, [r3, #0]
 8007208:	e021      	b.n	800724e <send_hb_packet+0x162>
		} else if (SigStre > 14) {
 800720a:	231b      	movs	r3, #27
 800720c:	18fb      	adds	r3, r7, r3
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	2b0e      	cmp	r3, #14
 8007212:	d904      	bls.n	800721e <send_hb_packet+0x132>
			GSMSS = 3;
 8007214:	231e      	movs	r3, #30
 8007216:	18fb      	adds	r3, r7, r3
 8007218:	2203      	movs	r2, #3
 800721a:	701a      	strb	r2, [r3, #0]
 800721c:	e017      	b.n	800724e <send_hb_packet+0x162>
		} else if (SigStre > 9) {
 800721e:	231b      	movs	r3, #27
 8007220:	18fb      	adds	r3, r7, r3
 8007222:	781b      	ldrb	r3, [r3, #0]
 8007224:	2b09      	cmp	r3, #9
 8007226:	d904      	bls.n	8007232 <send_hb_packet+0x146>
			GSMSS = 2;
 8007228:	231e      	movs	r3, #30
 800722a:	18fb      	adds	r3, r7, r3
 800722c:	2202      	movs	r2, #2
 800722e:	701a      	strb	r2, [r3, #0]
 8007230:	e00d      	b.n	800724e <send_hb_packet+0x162>
		} else if (SigStre > 1) {
 8007232:	231b      	movs	r3, #27
 8007234:	18fb      	adds	r3, r7, r3
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	2b01      	cmp	r3, #1
 800723a:	d904      	bls.n	8007246 <send_hb_packet+0x15a>
			GSMSS = 1;
 800723c:	231e      	movs	r3, #30
 800723e:	18fb      	adds	r3, r7, r3
 8007240:	2201      	movs	r2, #1
 8007242:	701a      	strb	r2, [r3, #0]
 8007244:	e003      	b.n	800724e <send_hb_packet+0x162>
		} else {
			GSMSS = 0;
 8007246:	231e      	movs	r3, #30
 8007248:	18fb      	adds	r3, r7, r3
 800724a:	2200      	movs	r2, #0
 800724c:	701a      	strb	r2, [r3, #0]
		}

		heartbeatPacket[4] = TermInfo;
 800724e:	4b39      	ldr	r3, [pc, #228]	; (8007334 <send_hb_packet+0x248>)
 8007250:	221c      	movs	r2, #28
 8007252:	18ba      	adds	r2, r7, r2
 8007254:	7812      	ldrb	r2, [r2, #0]
 8007256:	711a      	strb	r2, [r3, #4]
		heartbeatPacket[5] = VLvl;
 8007258:	4b36      	ldr	r3, [pc, #216]	; (8007334 <send_hb_packet+0x248>)
 800725a:	221f      	movs	r2, #31
 800725c:	18ba      	adds	r2, r7, r2
 800725e:	7812      	ldrb	r2, [r2, #0]
 8007260:	715a      	strb	r2, [r3, #5]
		heartbeatPacket[6] = GSMSS;
 8007262:	4b34      	ldr	r3, [pc, #208]	; (8007334 <send_hb_packet+0x248>)
 8007264:	221e      	movs	r2, #30
 8007266:	18ba      	adds	r2, r7, r2
 8007268:	7812      	ldrb	r2, [r2, #0]
 800726a:	719a      	strb	r2, [r3, #6]
		heartbeatPacket[7] = 0;
 800726c:	4b31      	ldr	r3, [pc, #196]	; (8007334 <send_hb_packet+0x248>)
 800726e:	2200      	movs	r2, #0
 8007270:	71da      	strb	r2, [r3, #7]
		heartbeatPacket[8] = 2;
 8007272:	4b30      	ldr	r3, [pc, #192]	; (8007334 <send_hb_packet+0x248>)
 8007274:	2202      	movs	r2, #2
 8007276:	721a      	strb	r2, [r3, #8]
		heartbeatPacket[9] = infoSNo >> 8;
 8007278:	4b2f      	ldr	r3, [pc, #188]	; (8007338 <send_hb_packet+0x24c>)
 800727a:	881b      	ldrh	r3, [r3, #0]
 800727c:	0a1b      	lsrs	r3, r3, #8
 800727e:	b29b      	uxth	r3, r3
 8007280:	b2da      	uxtb	r2, r3
 8007282:	4b2c      	ldr	r3, [pc, #176]	; (8007334 <send_hb_packet+0x248>)
 8007284:	725a      	strb	r2, [r3, #9]
		heartbeatPacket[10] = infoSNo;
 8007286:	4b2c      	ldr	r3, [pc, #176]	; (8007338 <send_hb_packet+0x24c>)
 8007288:	881b      	ldrh	r3, [r3, #0]
 800728a:	b2da      	uxtb	r2, r3
 800728c:	4b29      	ldr	r3, [pc, #164]	; (8007334 <send_hb_packet+0x248>)
 800728e:	729a      	strb	r2, [r3, #10]

		uint8_t tempCrcData[9];
		for (uint8_t i = 0; i < 10; i++) {
 8007290:	231d      	movs	r3, #29
 8007292:	18fb      	adds	r3, r7, r3
 8007294:	2200      	movs	r2, #0
 8007296:	701a      	strb	r2, [r3, #0]
 8007298:	e00e      	b.n	80072b8 <send_hb_packet+0x1cc>
			tempCrcData[i] = heartbeatPacket[i + 2];
 800729a:	201d      	movs	r0, #29
 800729c:	183b      	adds	r3, r7, r0
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	1c9a      	adds	r2, r3, #2
 80072a2:	183b      	adds	r3, r7, r0
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	4923      	ldr	r1, [pc, #140]	; (8007334 <send_hb_packet+0x248>)
 80072a8:	5c89      	ldrb	r1, [r1, r2]
 80072aa:	1d3a      	adds	r2, r7, #4
 80072ac:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 10; i++) {
 80072ae:	183b      	adds	r3, r7, r0
 80072b0:	781a      	ldrb	r2, [r3, #0]
 80072b2:	183b      	adds	r3, r7, r0
 80072b4:	3201      	adds	r2, #1
 80072b6:	701a      	strb	r2, [r3, #0]
 80072b8:	231d      	movs	r3, #29
 80072ba:	18fb      	adds	r3, r7, r3
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	2b09      	cmp	r3, #9
 80072c0:	d9eb      	bls.n	800729a <send_hb_packet+0x1ae>
		}
		uint8_t *tempPtr = tempCrcData;
 80072c2:	1d3b      	adds	r3, r7, #4
 80072c4:	613b      	str	r3, [r7, #16]
		uint16_t crcResult = 0;
 80072c6:	250e      	movs	r5, #14
 80072c8:	197b      	adds	r3, r7, r5
 80072ca:	2200      	movs	r2, #0
 80072cc:	801a      	strh	r2, [r3, #0]
		crcResult = GetCrc16(tempPtr,
 80072ce:	197c      	adds	r4, r7, r5
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	2109      	movs	r1, #9
 80072d4:	0018      	movs	r0, r3
 80072d6:	f7ff fb4d 	bl	8006974 <GetCrc16>
 80072da:	0003      	movs	r3, r0
 80072dc:	8023      	strh	r3, [r4, #0]
				sizeof(tempCrcData) / sizeof(tempCrcData[0]));
		heartbeatPacket[11] = crcResult >> 8;
 80072de:	0029      	movs	r1, r5
 80072e0:	187b      	adds	r3, r7, r1
 80072e2:	881b      	ldrh	r3, [r3, #0]
 80072e4:	0a1b      	lsrs	r3, r3, #8
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	b2da      	uxtb	r2, r3
 80072ea:	4b12      	ldr	r3, [pc, #72]	; (8007334 <send_hb_packet+0x248>)
 80072ec:	72da      	strb	r2, [r3, #11]
		heartbeatPacket[12] = crcResult;
 80072ee:	187b      	adds	r3, r7, r1
 80072f0:	881b      	ldrh	r3, [r3, #0]
 80072f2:	b2da      	uxtb	r2, r3
 80072f4:	4b0f      	ldr	r3, [pc, #60]	; (8007334 <send_hb_packet+0x248>)
 80072f6:	731a      	strb	r2, [r3, #12]
		HAL_UART_Transmit(&AT_PORT, heartbeatPacket, 15, 100);
 80072f8:	490e      	ldr	r1, [pc, #56]	; (8007334 <send_hb_packet+0x248>)
 80072fa:	4810      	ldr	r0, [pc, #64]	; (800733c <send_hb_packet+0x250>)
 80072fc:	2364      	movs	r3, #100	; 0x64
 80072fe:	220f      	movs	r2, #15
 8007300:	f005 fc16 	bl	800cb30 <HAL_UART_Transmit>
		infoSNo++;
 8007304:	4b0c      	ldr	r3, [pc, #48]	; (8007338 <send_hb_packet+0x24c>)
 8007306:	881b      	ldrh	r3, [r3, #0]
 8007308:	3301      	adds	r3, #1
 800730a:	b29a      	uxth	r2, r3
 800730c:	4b0a      	ldr	r3, [pc, #40]	; (8007338 <send_hb_packet+0x24c>)
 800730e:	801a      	strh	r2, [r3, #0]

	}
}
 8007310:	46c0      	nop			; (mov r8, r8)
 8007312:	46bd      	mov	sp, r7
 8007314:	b008      	add	sp, #32
 8007316:	bdb0      	pop	{r4, r5, r7, pc}
 8007318:	200009f4 	.word	0x200009f4
 800731c:	20000856 	.word	0x20000856
 8007320:	00001130 	.word	0x00001130
 8007324:	00001004 	.word	0x00001004
 8007328:	00000f3c 	.word	0x00000f3c
 800732c:	00000ed8 	.word	0x00000ed8
 8007330:	00000e74 	.word	0x00000e74
 8007334:	200000a0 	.word	0x200000a0
 8007338:	20000064 	.word	0x20000064
 800733c:	200004b0 	.word	0x200004b0

08007340 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8007340:	b580      	push	{r7, lr}
 8007342:	b086      	sub	sp, #24
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
	if (isDataMode == 1) {
 8007348:	4b2e      	ldr	r3, [pc, #184]	; (8007404 <HAL_TIM_IC_CaptureCallback+0xc4>)
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	b2db      	uxtb	r3, r3
 800734e:	2b01      	cmp	r3, #1
 8007350:	d153      	bne.n	80073fa <HAL_TIM_IC_CaptureCallback+0xba>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) { // if the interrupt source is channel1
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	7f1b      	ldrb	r3, [r3, #28]
 8007356:	2b01      	cmp	r3, #1
 8007358:	d14f      	bne.n	80073fa <HAL_TIM_IC_CaptureCallback+0xba>
			uint16_t IC_Val1, IC_Val2;
			IC_Val1 = vals[0];
 800735a:	2116      	movs	r1, #22
 800735c:	187b      	adds	r3, r7, r1
 800735e:	4a2a      	ldr	r2, [pc, #168]	; (8007408 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8007360:	8812      	ldrh	r2, [r2, #0]
 8007362:	801a      	strh	r2, [r3, #0]
			IC_Val2 = vals[1];
 8007364:	2014      	movs	r0, #20
 8007366:	183b      	adds	r3, r7, r0
 8007368:	4a27      	ldr	r2, [pc, #156]	; (8007408 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800736a:	8852      	ldrh	r2, [r2, #2]
 800736c:	801a      	strh	r2, [r3, #0]
			if (IC_Val2 > IC_Val1) {
 800736e:	183a      	adds	r2, r7, r0
 8007370:	187b      	adds	r3, r7, r1
 8007372:	8812      	ldrh	r2, [r2, #0]
 8007374:	881b      	ldrh	r3, [r3, #0]
 8007376:	429a      	cmp	r2, r3
 8007378:	d908      	bls.n	800738c <HAL_TIM_IC_CaptureCallback+0x4c>
				Difference = IC_Val2 - IC_Val1;
 800737a:	183a      	adds	r2, r7, r0
 800737c:	187b      	adds	r3, r7, r1
 800737e:	8812      	ldrh	r2, [r2, #0]
 8007380:	881b      	ldrh	r3, [r3, #0]
 8007382:	1ad3      	subs	r3, r2, r3
 8007384:	b29a      	uxth	r2, r3
 8007386:	4b21      	ldr	r3, [pc, #132]	; (800740c <HAL_TIM_IC_CaptureCallback+0xcc>)
 8007388:	801a      	strh	r2, [r3, #0]
 800738a:	e011      	b.n	80073b0 <HAL_TIM_IC_CaptureCallback+0x70>
			} else if (IC_Val1 > IC_Val2) {
 800738c:	2116      	movs	r1, #22
 800738e:	187a      	adds	r2, r7, r1
 8007390:	2014      	movs	r0, #20
 8007392:	183b      	adds	r3, r7, r0
 8007394:	8812      	ldrh	r2, [r2, #0]
 8007396:	881b      	ldrh	r3, [r3, #0]
 8007398:	429a      	cmp	r2, r3
 800739a:	d909      	bls.n	80073b0 <HAL_TIM_IC_CaptureCallback+0x70>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 800739c:	183a      	adds	r2, r7, r0
 800739e:	187b      	adds	r3, r7, r1
 80073a0:	8812      	ldrh	r2, [r2, #0]
 80073a2:	881b      	ldrh	r3, [r3, #0]
 80073a4:	1ad3      	subs	r3, r2, r3
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	3b01      	subs	r3, #1
 80073aa:	b29a      	uxth	r2, r3
 80073ac:	4b17      	ldr	r3, [pc, #92]	; (800740c <HAL_TIM_IC_CaptureCallback+0xcc>)
 80073ae:	801a      	strh	r2, [r3, #0]
			}
			float refClock = TIMCLOCK / (PRESCALAR);
 80073b0:	4b17      	ldr	r3, [pc, #92]	; (8007410 <HAL_TIM_IC_CaptureCallback+0xd0>)
 80073b2:	613b      	str	r3, [r7, #16]
			float mFactor = 1000 / refClock;
 80073b4:	6939      	ldr	r1, [r7, #16]
 80073b6:	4817      	ldr	r0, [pc, #92]	; (8007414 <HAL_TIM_IC_CaptureCallback+0xd4>)
 80073b8:	f7f9 fadc 	bl	8000974 <__aeabi_fdiv>
 80073bc:	1c03      	adds	r3, r0, #0
 80073be:	60fb      	str	r3, [r7, #12]
			usWidth = Difference * mFactor;
 80073c0:	4b12      	ldr	r3, [pc, #72]	; (800740c <HAL_TIM_IC_CaptureCallback+0xcc>)
 80073c2:	881b      	ldrh	r3, [r3, #0]
 80073c4:	0018      	movs	r0, r3
 80073c6:	f7f9 ffa7 	bl	8001318 <__aeabi_i2f>
 80073ca:	1c03      	adds	r3, r0, #0
 80073cc:	68f9      	ldr	r1, [r7, #12]
 80073ce:	1c18      	adds	r0, r3, #0
 80073d0:	f7f9 fc98 	bl	8000d04 <__aeabi_fmul>
 80073d4:	1c03      	adds	r3, r0, #0
 80073d6:	1c18      	adds	r0, r3, #0
 80073d8:	f7f9 f8a6 	bl	8000528 <__aeabi_f2uiz>
 80073dc:	0003      	movs	r3, r0
 80073de:	b29a      	uxth	r2, r3
 80073e0:	4b0d      	ldr	r3, [pc, #52]	; (8007418 <HAL_TIM_IC_CaptureCallback+0xd8>)
 80073e2:	801a      	strh	r2, [r3, #0]
			if (usWidth > 100 && usWidth < 200) {
 80073e4:	4b0c      	ldr	r3, [pc, #48]	; (8007418 <HAL_TIM_IC_CaptureCallback+0xd8>)
 80073e6:	881b      	ldrh	r3, [r3, #0]
 80073e8:	2b64      	cmp	r3, #100	; 0x64
 80073ea:	d906      	bls.n	80073fa <HAL_TIM_IC_CaptureCallback+0xba>
 80073ec:	4b0a      	ldr	r3, [pc, #40]	; (8007418 <HAL_TIM_IC_CaptureCallback+0xd8>)
 80073ee:	881b      	ldrh	r3, [r3, #0]
 80073f0:	2bc7      	cmp	r3, #199	; 0xc7
 80073f2:	d802      	bhi.n	80073fa <HAL_TIM_IC_CaptureCallback+0xba>
				//printf("Got message indication\n");
				isPulse = 1;
 80073f4:	4b09      	ldr	r3, [pc, #36]	; (800741c <HAL_TIM_IC_CaptureCallback+0xdc>)
 80073f6:	2201      	movs	r2, #1
 80073f8:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 80073fa:	46c0      	nop			; (mov r8, r8)
 80073fc:	46bd      	mov	sp, r7
 80073fe:	b006      	add	sp, #24
 8007400:	bd80      	pop	{r7, pc}
 8007402:	46c0      	nop			; (mov r8, r8)
 8007404:	20000856 	.word	0x20000856
 8007408:	20000704 	.word	0x20000704
 800740c:	20000700 	.word	0x20000700
 8007410:	47c35000 	.word	0x47c35000
 8007414:	447a0000 	.word	0x447a0000
 8007418:	20000702 	.word	0x20000702
 800741c:	20000716 	.word	0x20000716

08007420 <substring>:

char* substring(char *destination, const char *source, uint8_t beg, uint8_t n) {
 8007420:	b580      	push	{r7, lr}
 8007422:	b084      	sub	sp, #16
 8007424:	af00      	add	r7, sp, #0
 8007426:	60f8      	str	r0, [r7, #12]
 8007428:	60b9      	str	r1, [r7, #8]
 800742a:	0019      	movs	r1, r3
 800742c:	1dfb      	adds	r3, r7, #7
 800742e:	701a      	strb	r2, [r3, #0]
 8007430:	1dbb      	adds	r3, r7, #6
 8007432:	1c0a      	adds	r2, r1, #0
 8007434:	701a      	strb	r2, [r3, #0]
	// extracts `n` characters from the source string starting from `beg` index
	// and copy them into the destination string
	while (n > 0) {
 8007436:	e011      	b.n	800745c <substring+0x3c>
		*destination = *(source + beg);
 8007438:	1dfb      	adds	r3, r7, #7
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	68ba      	ldr	r2, [r7, #8]
 800743e:	18d3      	adds	r3, r2, r3
 8007440:	781a      	ldrb	r2, [r3, #0]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	701a      	strb	r2, [r3, #0]
		destination++;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	3301      	adds	r3, #1
 800744a:	60fb      	str	r3, [r7, #12]
		source++;
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	3301      	adds	r3, #1
 8007450:	60bb      	str	r3, [r7, #8]
		n--;
 8007452:	1dbb      	adds	r3, r7, #6
 8007454:	781a      	ldrb	r2, [r3, #0]
 8007456:	1dbb      	adds	r3, r7, #6
 8007458:	3a01      	subs	r2, #1
 800745a:	701a      	strb	r2, [r3, #0]
	while (n > 0) {
 800745c:	1dbb      	adds	r3, r7, #6
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d1e9      	bne.n	8007438 <substring+0x18>
	}

	// null terminate destination string
	*destination = '\0';
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2200      	movs	r2, #0
 8007468:	701a      	strb	r2, [r3, #0]

	// return the destination string
	return destination;
 800746a:	68fb      	ldr	r3, [r7, #12]
}
 800746c:	0018      	movs	r0, r3
 800746e:	46bd      	mov	sp, r7
 8007470:	b004      	add	sp, #16
 8007472:	bd80      	pop	{r7, pc}

08007474 <send_current_location_via_sms>:

void send_current_location_via_sms() {
 8007474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007476:	b0b9      	sub	sp, #228	; 0xe4
 8007478:	af02      	add	r7, sp, #8
	if (isSMSActive == 1) {
 800747a:	4be9      	ldr	r3, [pc, #932]	; (8007820 <send_current_location_via_sms+0x3ac>)
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	2b01      	cmp	r3, #1
 8007480:	d000      	beq.n	8007484 <send_current_location_via_sms+0x10>
 8007482:	e1c9      	b.n	8007818 <send_current_location_via_sms+0x3a4>
		//printf("sending message(current location)\n");
		// send_command("AT+CMGS=\"3352093997\"\n\r", 10, 6, 0, 0);
		char tempMsg[150];
		uint8_t speed = 0;
 8007484:	21d6      	movs	r1, #214	; 0xd6
 8007486:	187b      	adds	r3, r7, r1
 8007488:	2200      	movs	r2, #0
 800748a:	701a      	strb	r2, [r3, #0]
		uint32_t lat = 0, lon = 0;
 800748c:	2300      	movs	r3, #0
 800748e:	20d0      	movs	r0, #208	; 0xd0
 8007490:	183a      	adds	r2, r7, r0
 8007492:	6013      	str	r3, [r2, #0]
 8007494:	2300      	movs	r3, #0
 8007496:	24cc      	movs	r4, #204	; 0xcc
 8007498:	193a      	adds	r2, r7, r4
 800749a:	6013      	str	r3, [r2, #0]
		double tempFloat;
		double tempMin;
		uint8_t tempDeg;
		char buf[15];
		float latitude, longitude;
		lat = (gps_info[7] << 24) | (gps_info[8] << 16) | (gps_info[9] << 8)
 800749c:	4be1      	ldr	r3, [pc, #900]	; (8007824 <send_current_location_via_sms+0x3b0>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	3307      	adds	r3, #7
 80074a2:	781b      	ldrb	r3, [r3, #0]
 80074a4:	061a      	lsls	r2, r3, #24
 80074a6:	4bdf      	ldr	r3, [pc, #892]	; (8007824 <send_current_location_via_sms+0x3b0>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	3308      	adds	r3, #8
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	041b      	lsls	r3, r3, #16
 80074b0:	431a      	orrs	r2, r3
 80074b2:	4bdc      	ldr	r3, [pc, #880]	; (8007824 <send_current_location_via_sms+0x3b0>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	3309      	adds	r3, #9
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	021b      	lsls	r3, r3, #8
 80074bc:	431a      	orrs	r2, r3
		| gps_info[10];
 80074be:	4bd9      	ldr	r3, [pc, #868]	; (8007824 <send_current_location_via_sms+0x3b0>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	330a      	adds	r3, #10
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	4313      	orrs	r3, r2
		lat = (gps_info[7] << 24) | (gps_info[8] << 16) | (gps_info[9] << 8)
 80074c8:	183a      	adds	r2, r7, r0
 80074ca:	6013      	str	r3, [r2, #0]
		lon = (gps_info[11] << 24) | (gps_info[12] << 16) | (gps_info[13] << 8)
 80074cc:	4bd5      	ldr	r3, [pc, #852]	; (8007824 <send_current_location_via_sms+0x3b0>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	330b      	adds	r3, #11
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	061a      	lsls	r2, r3, #24
 80074d6:	4bd3      	ldr	r3, [pc, #844]	; (8007824 <send_current_location_via_sms+0x3b0>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	330c      	adds	r3, #12
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	041b      	lsls	r3, r3, #16
 80074e0:	431a      	orrs	r2, r3
 80074e2:	4bd0      	ldr	r3, [pc, #832]	; (8007824 <send_current_location_via_sms+0x3b0>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	330d      	adds	r3, #13
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	021b      	lsls	r3, r3, #8
 80074ec:	431a      	orrs	r2, r3
		| gps_info[14];
 80074ee:	4bcd      	ldr	r3, [pc, #820]	; (8007824 <send_current_location_via_sms+0x3b0>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	330e      	adds	r3, #14
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	4313      	orrs	r3, r2
		lon = (gps_info[11] << 24) | (gps_info[12] << 16) | (gps_info[13] << 8)
 80074f8:	193a      	adds	r2, r7, r4
 80074fa:	6013      	str	r3, [r2, #0]
		speed = gps_info[15];
 80074fc:	4bc9      	ldr	r3, [pc, #804]	; (8007824 <send_current_location_via_sms+0x3b0>)
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	187b      	adds	r3, r7, r1
 8007502:	7bd2      	ldrb	r2, [r2, #15]
 8007504:	701a      	strb	r2, [r3, #0]
		tempFloat = lat / 30000.0;
 8007506:	183a      	adds	r2, r7, r0
 8007508:	6810      	ldr	r0, [r2, #0]
 800750a:	f7fb fd13 	bl	8002f34 <__aeabi_ui2d>
 800750e:	2200      	movs	r2, #0
 8007510:	4bc5      	ldr	r3, [pc, #788]	; (8007828 <send_current_location_via_sms+0x3b4>)
 8007512:	f7fa fa8b 	bl	8001a2c <__aeabi_ddiv>
 8007516:	0002      	movs	r2, r0
 8007518:	000b      	movs	r3, r1
 800751a:	24c0      	movs	r4, #192	; 0xc0
 800751c:	1938      	adds	r0, r7, r4
 800751e:	6002      	str	r2, [r0, #0]
 8007520:	6043      	str	r3, [r0, #4]
		tempDeg = (int) tempFloat / 60;
 8007522:	193a      	adds	r2, r7, r4
 8007524:	6810      	ldr	r0, [r2, #0]
 8007526:	6851      	ldr	r1, [r2, #4]
 8007528:	f7fb fc9e 	bl	8002e68 <__aeabi_d2iz>
 800752c:	0003      	movs	r3, r0
 800752e:	213c      	movs	r1, #60	; 0x3c
 8007530:	0018      	movs	r0, r3
 8007532:	f7f8 fe95 	bl	8000260 <__divsi3>
 8007536:	0003      	movs	r3, r0
 8007538:	001a      	movs	r2, r3
 800753a:	26bf      	movs	r6, #191	; 0xbf
 800753c:	19bb      	adds	r3, r7, r6
 800753e:	701a      	strb	r2, [r3, #0]
		tempMin = (int) tempFloat % 60;
 8007540:	193a      	adds	r2, r7, r4
 8007542:	6810      	ldr	r0, [r2, #0]
 8007544:	6851      	ldr	r1, [r2, #4]
 8007546:	f7fb fc8f 	bl	8002e68 <__aeabi_d2iz>
 800754a:	0003      	movs	r3, r0
 800754c:	213c      	movs	r1, #60	; 0x3c
 800754e:	0018      	movs	r0, r3
 8007550:	f7f8 ff6c 	bl	800042c <__aeabi_idivmod>
 8007554:	000b      	movs	r3, r1
 8007556:	0018      	movs	r0, r3
 8007558:	f7fb fcbc 	bl	8002ed4 <__aeabi_i2d>
 800755c:	0002      	movs	r2, r0
 800755e:	000b      	movs	r3, r1
 8007560:	25b0      	movs	r5, #176	; 0xb0
 8007562:	1978      	adds	r0, r7, r5
 8007564:	6002      	str	r2, [r0, #0]
 8007566:	6043      	str	r3, [r0, #4]
		tempFloat = tempFloat - (int) tempFloat;
 8007568:	193a      	adds	r2, r7, r4
 800756a:	6810      	ldr	r0, [r2, #0]
 800756c:	6851      	ldr	r1, [r2, #4]
 800756e:	f7fb fc7b 	bl	8002e68 <__aeabi_d2iz>
 8007572:	0003      	movs	r3, r0
 8007574:	0018      	movs	r0, r3
 8007576:	f7fb fcad 	bl	8002ed4 <__aeabi_i2d>
 800757a:	0002      	movs	r2, r0
 800757c:	000b      	movs	r3, r1
 800757e:	1938      	adds	r0, r7, r4
 8007580:	6841      	ldr	r1, [r0, #4]
 8007582:	6800      	ldr	r0, [r0, #0]
 8007584:	f7fb f8c0 	bl	8002708 <__aeabi_dsub>
 8007588:	0002      	movs	r2, r0
 800758a:	000b      	movs	r3, r1
 800758c:	1938      	adds	r0, r7, r4
 800758e:	6002      	str	r2, [r0, #0]
 8007590:	6043      	str	r3, [r0, #4]
		tempMin = tempMin + tempFloat;
 8007592:	193a      	adds	r2, r7, r4
 8007594:	6853      	ldr	r3, [r2, #4]
 8007596:	6812      	ldr	r2, [r2, #0]
 8007598:	1978      	adds	r0, r7, r5
 800759a:	6841      	ldr	r1, [r0, #4]
 800759c:	6800      	ldr	r0, [r0, #0]
 800759e:	f7f9 ff09 	bl	80013b4 <__aeabi_dadd>
 80075a2:	0002      	movs	r2, r0
 80075a4:	000b      	movs	r3, r1
 80075a6:	1978      	adds	r0, r7, r5
 80075a8:	6002      	str	r2, [r0, #0]
 80075aa:	6043      	str	r3, [r0, #4]
		latitude = tempMin / 60.0;
 80075ac:	2200      	movs	r2, #0
 80075ae:	4b9f      	ldr	r3, [pc, #636]	; (800782c <send_current_location_via_sms+0x3b8>)
 80075b0:	1978      	adds	r0, r7, r5
 80075b2:	6841      	ldr	r1, [r0, #4]
 80075b4:	6800      	ldr	r0, [r0, #0]
 80075b6:	f7fa fa39 	bl	8001a2c <__aeabi_ddiv>
 80075ba:	0002      	movs	r2, r0
 80075bc:	000b      	movs	r3, r1
 80075be:	0010      	movs	r0, r2
 80075c0:	0019      	movs	r1, r3
 80075c2:	f7fb fd25 	bl	8003010 <__aeabi_d2f>
 80075c6:	1c03      	adds	r3, r0, #0
 80075c8:	22ac      	movs	r2, #172	; 0xac
 80075ca:	18b8      	adds	r0, r7, r2
 80075cc:	6003      	str	r3, [r0, #0]
		latitude += tempDeg;
 80075ce:	19bb      	adds	r3, r7, r6
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	0018      	movs	r0, r3
 80075d4:	f7f9 fea0 	bl	8001318 <__aeabi_i2f>
 80075d8:	1c03      	adds	r3, r0, #0
 80075da:	1c19      	adds	r1, r3, #0
 80075dc:	22ac      	movs	r2, #172	; 0xac
 80075de:	18b8      	adds	r0, r7, r2
 80075e0:	6800      	ldr	r0, [r0, #0]
 80075e2:	f7f9 f829 	bl	8000638 <__aeabi_fadd>
 80075e6:	1c03      	adds	r3, r0, #0
 80075e8:	22ac      	movs	r2, #172	; 0xac
 80075ea:	18b8      	adds	r0, r7, r2
 80075ec:	6003      	str	r3, [r0, #0]
		tempFloat = lon / 30000.0;
 80075ee:	23cc      	movs	r3, #204	; 0xcc
 80075f0:	18fb      	adds	r3, r7, r3
 80075f2:	6818      	ldr	r0, [r3, #0]
 80075f4:	f7fb fc9e 	bl	8002f34 <__aeabi_ui2d>
 80075f8:	2200      	movs	r2, #0
 80075fa:	4b8b      	ldr	r3, [pc, #556]	; (8007828 <send_current_location_via_sms+0x3b4>)
 80075fc:	f7fa fa16 	bl	8001a2c <__aeabi_ddiv>
 8007600:	0002      	movs	r2, r0
 8007602:	000b      	movs	r3, r1
 8007604:	1938      	adds	r0, r7, r4
 8007606:	6002      	str	r2, [r0, #0]
 8007608:	6043      	str	r3, [r0, #4]
		tempDeg = (int) tempFloat / 60;
 800760a:	193b      	adds	r3, r7, r4
 800760c:	6818      	ldr	r0, [r3, #0]
 800760e:	6859      	ldr	r1, [r3, #4]
 8007610:	f7fb fc2a 	bl	8002e68 <__aeabi_d2iz>
 8007614:	0003      	movs	r3, r0
 8007616:	213c      	movs	r1, #60	; 0x3c
 8007618:	0018      	movs	r0, r3
 800761a:	f7f8 fe21 	bl	8000260 <__divsi3>
 800761e:	0003      	movs	r3, r0
 8007620:	001a      	movs	r2, r3
 8007622:	19bb      	adds	r3, r7, r6
 8007624:	701a      	strb	r2, [r3, #0]
		tempMin = (int) tempFloat % 60;
 8007626:	193b      	adds	r3, r7, r4
 8007628:	6818      	ldr	r0, [r3, #0]
 800762a:	6859      	ldr	r1, [r3, #4]
 800762c:	f7fb fc1c 	bl	8002e68 <__aeabi_d2iz>
 8007630:	0003      	movs	r3, r0
 8007632:	213c      	movs	r1, #60	; 0x3c
 8007634:	0018      	movs	r0, r3
 8007636:	f7f8 fef9 	bl	800042c <__aeabi_idivmod>
 800763a:	000b      	movs	r3, r1
 800763c:	0018      	movs	r0, r3
 800763e:	f7fb fc49 	bl	8002ed4 <__aeabi_i2d>
 8007642:	0002      	movs	r2, r0
 8007644:	000b      	movs	r3, r1
 8007646:	1978      	adds	r0, r7, r5
 8007648:	6002      	str	r2, [r0, #0]
 800764a:	6043      	str	r3, [r0, #4]
		tempFloat = tempFloat - (int) tempFloat;
 800764c:	193b      	adds	r3, r7, r4
 800764e:	6818      	ldr	r0, [r3, #0]
 8007650:	6859      	ldr	r1, [r3, #4]
 8007652:	f7fb fc09 	bl	8002e68 <__aeabi_d2iz>
 8007656:	0003      	movs	r3, r0
 8007658:	0018      	movs	r0, r3
 800765a:	f7fb fc3b 	bl	8002ed4 <__aeabi_i2d>
 800765e:	0002      	movs	r2, r0
 8007660:	000b      	movs	r3, r1
 8007662:	1938      	adds	r0, r7, r4
 8007664:	6841      	ldr	r1, [r0, #4]
 8007666:	6800      	ldr	r0, [r0, #0]
 8007668:	f7fb f84e 	bl	8002708 <__aeabi_dsub>
 800766c:	0002      	movs	r2, r0
 800766e:	000b      	movs	r3, r1
 8007670:	1938      	adds	r0, r7, r4
 8007672:	6002      	str	r2, [r0, #0]
 8007674:	6043      	str	r3, [r0, #4]
		tempMin = tempMin + tempFloat;
 8007676:	193b      	adds	r3, r7, r4
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	1978      	adds	r0, r7, r5
 800767e:	6841      	ldr	r1, [r0, #4]
 8007680:	6800      	ldr	r0, [r0, #0]
 8007682:	f7f9 fe97 	bl	80013b4 <__aeabi_dadd>
 8007686:	0002      	movs	r2, r0
 8007688:	000b      	movs	r3, r1
 800768a:	1978      	adds	r0, r7, r5
 800768c:	6002      	str	r2, [r0, #0]
 800768e:	6043      	str	r3, [r0, #4]
		longitude = tempMin / 60.0;
 8007690:	2200      	movs	r2, #0
 8007692:	4b66      	ldr	r3, [pc, #408]	; (800782c <send_current_location_via_sms+0x3b8>)
 8007694:	1978      	adds	r0, r7, r5
 8007696:	6841      	ldr	r1, [r0, #4]
 8007698:	6800      	ldr	r0, [r0, #0]
 800769a:	f7fa f9c7 	bl	8001a2c <__aeabi_ddiv>
 800769e:	0002      	movs	r2, r0
 80076a0:	000b      	movs	r3, r1
 80076a2:	0010      	movs	r0, r2
 80076a4:	0019      	movs	r1, r3
 80076a6:	f7fb fcb3 	bl	8003010 <__aeabi_d2f>
 80076aa:	1c03      	adds	r3, r0, #0
 80076ac:	25a8      	movs	r5, #168	; 0xa8
 80076ae:	1978      	adds	r0, r7, r5
 80076b0:	6003      	str	r3, [r0, #0]
		longitude += tempDeg;
 80076b2:	19bb      	adds	r3, r7, r6
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	0018      	movs	r0, r3
 80076b8:	f7f9 fe2e 	bl	8001318 <__aeabi_i2f>
 80076bc:	1c03      	adds	r3, r0, #0
 80076be:	1c19      	adds	r1, r3, #0
 80076c0:	197b      	adds	r3, r7, r5
 80076c2:	6818      	ldr	r0, [r3, #0]
 80076c4:	f7f8 ffb8 	bl	8000638 <__aeabi_fadd>
 80076c8:	1c03      	adds	r3, r0, #0
 80076ca:	1978      	adds	r0, r7, r5
 80076cc:	6003      	str	r3, [r0, #0]
		memset(tempMsg, 0, sizeof(tempMsg));
 80076ce:	003b      	movs	r3, r7
 80076d0:	2296      	movs	r2, #150	; 0x96
 80076d2:	2100      	movs	r1, #0
 80076d4:	0018      	movs	r0, r3
 80076d6:	f007 f986 	bl	800e9e6 <memset>
		memset(buf, 0, sizeof(buf));
 80076da:	2498      	movs	r4, #152	; 0x98
 80076dc:	193b      	adds	r3, r7, r4
 80076de:	220f      	movs	r2, #15
 80076e0:	2100      	movs	r1, #0
 80076e2:	0018      	movs	r0, r3
 80076e4:	f007 f97f 	bl	800e9e6 <memset>
		gcvt(latitude, 8, buf);
 80076e8:	22ac      	movs	r2, #172	; 0xac
 80076ea:	18bb      	adds	r3, r7, r2
 80076ec:	6818      	ldr	r0, [r3, #0]
 80076ee:	f7fb fc47 	bl	8002f80 <__aeabi_f2d>
 80076f2:	193b      	adds	r3, r7, r4
 80076f4:	2208      	movs	r2, #8
 80076f6:	f007 f91d 	bl	800e934 <gcvt>
		strcat(tempMsg,"AT+CMGS=\"");
 80076fa:	003b      	movs	r3, r7
 80076fc:	0018      	movs	r0, r3
 80076fe:	f7f8 fd09 	bl	8000114 <strlen>
 8007702:	0003      	movs	r3, r0
 8007704:	001a      	movs	r2, r3
 8007706:	003b      	movs	r3, r7
 8007708:	189a      	adds	r2, r3, r2
 800770a:	4b49      	ldr	r3, [pc, #292]	; (8007830 <send_current_location_via_sms+0x3bc>)
 800770c:	0010      	movs	r0, r2
 800770e:	0019      	movs	r1, r3
 8007710:	230a      	movs	r3, #10
 8007712:	001a      	movs	r2, r3
 8007714:	f007 f95e 	bl	800e9d4 <memcpy>
		strcat(tempMsg,validSender);
 8007718:	4a46      	ldr	r2, [pc, #280]	; (8007834 <send_current_location_via_sms+0x3c0>)
 800771a:	003b      	movs	r3, r7
 800771c:	0011      	movs	r1, r2
 800771e:	0018      	movs	r0, r3
 8007720:	f007 f98a 	bl	800ea38 <strcat>
		strcat(tempMsg,"\"\r");
 8007724:	003b      	movs	r3, r7
 8007726:	0018      	movs	r0, r3
 8007728:	f7f8 fcf4 	bl	8000114 <strlen>
 800772c:	0003      	movs	r3, r0
 800772e:	001a      	movs	r2, r3
 8007730:	003b      	movs	r3, r7
 8007732:	189a      	adds	r2, r3, r2
 8007734:	4b40      	ldr	r3, [pc, #256]	; (8007838 <send_current_location_via_sms+0x3c4>)
 8007736:	0010      	movs	r0, r2
 8007738:	0019      	movs	r1, r3
 800773a:	2303      	movs	r3, #3
 800773c:	001a      	movs	r2, r3
 800773e:	f007 f949 	bl	800e9d4 <memcpy>
//		strcat(tempMsg, "AT+CMGS=\"3322336979\"\r");
		strcat(tempMsg, buf);
 8007742:	193a      	adds	r2, r7, r4
 8007744:	003b      	movs	r3, r7
 8007746:	0011      	movs	r1, r2
 8007748:	0018      	movs	r0, r3
 800774a:	f007 f975 	bl	800ea38 <strcat>
		memset(buf, 0, sizeof(buf));
 800774e:	193b      	adds	r3, r7, r4
 8007750:	220f      	movs	r2, #15
 8007752:	2100      	movs	r1, #0
 8007754:	0018      	movs	r0, r3
 8007756:	f007 f946 	bl	800e9e6 <memset>
		gcvt(longitude, 8, buf);
 800775a:	197b      	adds	r3, r7, r5
 800775c:	6818      	ldr	r0, [r3, #0]
 800775e:	f7fb fc0f 	bl	8002f80 <__aeabi_f2d>
 8007762:	193b      	adds	r3, r7, r4
 8007764:	2208      	movs	r2, #8
 8007766:	f007 f8e5 	bl	800e934 <gcvt>
		strcat(tempMsg, ",");
 800776a:	003b      	movs	r3, r7
 800776c:	0018      	movs	r0, r3
 800776e:	f7f8 fcd1 	bl	8000114 <strlen>
 8007772:	0003      	movs	r3, r0
 8007774:	001a      	movs	r2, r3
 8007776:	003b      	movs	r3, r7
 8007778:	189a      	adds	r2, r3, r2
 800777a:	4b30      	ldr	r3, [pc, #192]	; (800783c <send_current_location_via_sms+0x3c8>)
 800777c:	0010      	movs	r0, r2
 800777e:	0019      	movs	r1, r3
 8007780:	2302      	movs	r3, #2
 8007782:	001a      	movs	r2, r3
 8007784:	f007 f926 	bl	800e9d4 <memcpy>
		strcat(tempMsg, buf);
 8007788:	193a      	adds	r2, r7, r4
 800778a:	003b      	movs	r3, r7
 800778c:	0011      	movs	r1, r2
 800778e:	0018      	movs	r0, r3
 8007790:	f007 f952 	bl	800ea38 <strcat>
		strcat(tempMsg, ",");
 8007794:	003b      	movs	r3, r7
 8007796:	0018      	movs	r0, r3
 8007798:	f7f8 fcbc 	bl	8000114 <strlen>
 800779c:	0003      	movs	r3, r0
 800779e:	001a      	movs	r2, r3
 80077a0:	003b      	movs	r3, r7
 80077a2:	189a      	adds	r2, r3, r2
 80077a4:	4b25      	ldr	r3, [pc, #148]	; (800783c <send_current_location_via_sms+0x3c8>)
 80077a6:	0010      	movs	r0, r2
 80077a8:	0019      	movs	r1, r3
 80077aa:	2302      	movs	r3, #2
 80077ac:	001a      	movs	r2, r3
 80077ae:	f007 f911 	bl	800e9d4 <memcpy>
		memset(buf, 0, sizeof(buf));
 80077b2:	193b      	adds	r3, r7, r4
 80077b4:	220f      	movs	r2, #15
 80077b6:	2100      	movs	r1, #0
 80077b8:	0018      	movs	r0, r3
 80077ba:	f007 f914 	bl	800e9e6 <memset>
		int2string(speed, buf);
 80077be:	21d6      	movs	r1, #214	; 0xd6
 80077c0:	187b      	adds	r3, r7, r1
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	193a      	adds	r2, r7, r4
 80077c6:	0011      	movs	r1, r2
 80077c8:	0018      	movs	r0, r3
 80077ca:	f000 f99f 	bl	8007b0c <int2string>
		strcat(tempMsg, buf);
 80077ce:	193a      	adds	r2, r7, r4
 80077d0:	003b      	movs	r3, r7
 80077d2:	0011      	movs	r1, r2
 80077d4:	0018      	movs	r0, r3
 80077d6:	f007 f92f 	bl	800ea38 <strcat>
		uint8_t tempCount = 0;
 80077da:	23d7      	movs	r3, #215	; 0xd7
 80077dc:	18fb      	adds	r3, r7, r3
 80077de:	2200      	movs	r2, #0
 80077e0:	701a      	strb	r2, [r3, #0]

		//todo replace while with for loop
		while (tempMsg[tempCount] != NULL) {
 80077e2:	e005      	b.n	80077f0 <send_current_location_via_sms+0x37c>
			tempCount++;
 80077e4:	21d7      	movs	r1, #215	; 0xd7
 80077e6:	187b      	adds	r3, r7, r1
 80077e8:	781a      	ldrb	r2, [r3, #0]
 80077ea:	187b      	adds	r3, r7, r1
 80077ec:	3201      	adds	r2, #1
 80077ee:	701a      	strb	r2, [r3, #0]
		while (tempMsg[tempCount] != NULL) {
 80077f0:	21d7      	movs	r1, #215	; 0xd7
 80077f2:	187b      	adds	r3, r7, r1
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	003a      	movs	r2, r7
 80077f8:	5cd3      	ldrb	r3, [r2, r3]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d1f2      	bne.n	80077e4 <send_current_location_via_sms+0x370>
		}

		tempMsg[tempCount] = 26;
 80077fe:	187b      	adds	r3, r7, r1
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	003a      	movs	r2, r7
 8007804:	211a      	movs	r1, #26
 8007806:	54d1      	strb	r1, [r2, r3]
		//printf("--Sending message to mobile \n");

		send_command(tempMsg, 12005, 7, 0, 0);
 8007808:	490d      	ldr	r1, [pc, #52]	; (8007840 <send_current_location_via_sms+0x3cc>)
 800780a:	0038      	movs	r0, r7
 800780c:	2300      	movs	r3, #0
 800780e:	9300      	str	r3, [sp, #0]
 8007810:	2300      	movs	r3, #0
 8007812:	2207      	movs	r2, #7
 8007814:	f7fe fef8 	bl	8006608 <send_command>

		// char tecMsg[] = {'A','T','+','C','M','G','S','=','\"','3','3','2','2','3','3','6','9','7','9','\"','\r','h','e','l','l','o',26,0};

		//    send_command(tecMsg, 12005, 7, 0, 0);
	}
}
 8007818:	46c0      	nop			; (mov r8, r8)
 800781a:	46bd      	mov	sp, r7
 800781c:	b037      	add	sp, #220	; 0xdc
 800781e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007820:	20000708 	.word	0x20000708
 8007824:	20000024 	.word	0x20000024
 8007828:	40dd4c00 	.word	0x40dd4c00
 800782c:	404e0000 	.word	0x404e0000
 8007830:	0801307c 	.word	0x0801307c
 8007834:	20000004 	.word	0x20000004
 8007838:	08013088 	.word	0x08013088
 800783c:	0801308c 	.word	0x0801308c
 8007840:	00002ee5 	.word	0x00002ee5

08007844 <send_location_packet_via_sms>:
void send_location_packet_via_sms(){
 8007844:	b5b0      	push	{r4, r5, r7, lr}
 8007846:	4c9e      	ldr	r4, [pc, #632]	; (8007ac0 <send_location_packet_via_sms+0x27c>)
 8007848:	44a5      	add	sp, r4
 800784a:	af02      	add	r7, sp, #8
	if(isSMSActive==1){
 800784c:	4b9d      	ldr	r3, [pc, #628]	; (8007ac4 <send_location_packet_via_sms+0x280>)
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	2b01      	cmp	r3, #1
 8007852:	d000      	beq.n	8007856 <send_location_packet_via_sms+0x12>
 8007854:	e12e      	b.n	8007ab4 <send_location_packet_via_sms+0x270>
		msgCounter = 0;
 8007856:	4b9c      	ldr	r3, [pc, #624]	; (8007ac8 <send_location_packet_via_sms+0x284>)
 8007858:	2200      	movs	r2, #0
 800785a:	701a      	strb	r2, [r3, #0]
		uint8_t dataSize = 0;
 800785c:	499b      	ldr	r1, [pc, #620]	; (8007acc <send_location_packet_via_sms+0x288>)
 800785e:	187b      	adds	r3, r7, r1
 8007860:	2200      	movs	r2, #0
 8007862:	701a      	strb	r2, [r3, #0]
		dataSize = checkdatasize();
 8007864:	187c      	adds	r4, r7, r1
 8007866:	f7ff fb03 	bl	8006e70 <checkdatasize>
 800786a:	0003      	movs	r3, r0
 800786c:	7023      	strb	r3, [r4, #0]
		while (dataSize == 1 && msgCounter < msgCount) {
 800786e:	e115      	b.n	8007a9c <send_location_packet_via_sms+0x258>
			stats = 6;
 8007870:	4b97      	ldr	r3, [pc, #604]	; (8007ad0 <send_location_packet_via_sms+0x28c>)
 8007872:	2206      	movs	r2, #6
 8007874:	701a      	strb	r2, [r3, #0]
			uint8_t loopCount = 0;
 8007876:	4b97      	ldr	r3, [pc, #604]	; (8007ad4 <send_location_packet_via_sms+0x290>)
 8007878:	18fb      	adds	r3, r7, r3
 800787a:	2200      	movs	r2, #0
 800787c:	701a      	strb	r2, [r3, #0]
			memset(bunchdata, 0, sizeof(bunchdata));
 800787e:	23a8      	movs	r3, #168	; 0xa8
 8007880:	009a      	lsls	r2, r3, #2
 8007882:	4b95      	ldr	r3, [pc, #596]	; (8007ad8 <send_location_packet_via_sms+0x294>)
 8007884:	2100      	movs	r1, #0
 8007886:	0018      	movs	r0, r3
 8007888:	f007 f8ad 	bl	800e9e6 <memset>
			//printf("--Sending AT+CREG?-- \n");
			send_command("AT+CREG?\r\n", 3, 3, 3, 1);
 800788c:	4893      	ldr	r0, [pc, #588]	; (8007adc <send_location_packet_via_sms+0x298>)
 800788e:	2301      	movs	r3, #1
 8007890:	9300      	str	r3, [sp, #0]
 8007892:	2303      	movs	r3, #3
 8007894:	2203      	movs	r2, #3
 8007896:	2103      	movs	r1, #3
 8007898:	f7fe feb6 	bl	8006608 <send_command>
			if (isReg == 1) {
 800789c:	4b90      	ldr	r3, [pc, #576]	; (8007ae0 <send_location_packet_via_sms+0x29c>)
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d000      	beq.n	80078a6 <send_location_packet_via_sms+0x62>
 80078a4:	e105      	b.n	8007ab2 <send_location_packet_via_sms+0x26e>
				while (read_data_packet() == 1 && loopCount < smsBunch) {
 80078a6:	e023      	b.n	80078f0 <send_location_packet_via_sms+0xac>
					//printf("readed the data \n");
					for (uint8_t i = 0; i < 18; i++) {
 80078a8:	4b8e      	ldr	r3, [pc, #568]	; (8007ae4 <send_location_packet_via_sms+0x2a0>)
 80078aa:	18fb      	adds	r3, r7, r3
 80078ac:	2200      	movs	r2, #0
 80078ae:	701a      	strb	r2, [r3, #0]
 80078b0:	e013      	b.n	80078da <send_location_packet_via_sms+0x96>
						bunchdata[loopCount][i] = readPacket[i];
 80078b2:	4c8c      	ldr	r4, [pc, #560]	; (8007ae4 <send_location_packet_via_sms+0x2a0>)
 80078b4:	193b      	adds	r3, r7, r4
 80078b6:	7819      	ldrb	r1, [r3, #0]
 80078b8:	4b86      	ldr	r3, [pc, #536]	; (8007ad4 <send_location_packet_via_sms+0x290>)
 80078ba:	18fb      	adds	r3, r7, r3
 80078bc:	781a      	ldrb	r2, [r3, #0]
 80078be:	193b      	adds	r3, r7, r4
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	4889      	ldr	r0, [pc, #548]	; (8007ae8 <send_location_packet_via_sms+0x2a4>)
 80078c4:	5c40      	ldrb	r0, [r0, r1]
 80078c6:	4984      	ldr	r1, [pc, #528]	; (8007ad8 <send_location_packet_via_sms+0x294>)
 80078c8:	0152      	lsls	r2, r2, #5
 80078ca:	188a      	adds	r2, r1, r2
 80078cc:	1c01      	adds	r1, r0, #0
 80078ce:	54d1      	strb	r1, [r2, r3]
					for (uint8_t i = 0; i < 18; i++) {
 80078d0:	193b      	adds	r3, r7, r4
 80078d2:	781a      	ldrb	r2, [r3, #0]
 80078d4:	193b      	adds	r3, r7, r4
 80078d6:	3201      	adds	r2, #1
 80078d8:	701a      	strb	r2, [r3, #0]
 80078da:	4b82      	ldr	r3, [pc, #520]	; (8007ae4 <send_location_packet_via_sms+0x2a0>)
 80078dc:	18fb      	adds	r3, r7, r3
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	2b11      	cmp	r3, #17
 80078e2:	d9e6      	bls.n	80078b2 <send_location_packet_via_sms+0x6e>
					}
					loopCount++;
 80078e4:	497b      	ldr	r1, [pc, #492]	; (8007ad4 <send_location_packet_via_sms+0x290>)
 80078e6:	187b      	adds	r3, r7, r1
 80078e8:	781a      	ldrb	r2, [r3, #0]
 80078ea:	187b      	adds	r3, r7, r1
 80078ec:	3201      	adds	r2, #1
 80078ee:	701a      	strb	r2, [r3, #0]
				while (read_data_packet() == 1 && loopCount < smsBunch) {
 80078f0:	f7ff fb86 	bl	8007000 <read_data_packet>
 80078f4:	0003      	movs	r3, r0
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d104      	bne.n	8007904 <send_location_packet_via_sms+0xc0>
 80078fa:	4b76      	ldr	r3, [pc, #472]	; (8007ad4 <send_location_packet_via_sms+0x290>)
 80078fc:	18fb      	adds	r3, r7, r3
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	2b09      	cmp	r3, #9
 8007902:	d9d1      	bls.n	80078a8 <send_location_packet_via_sms+0x64>
				}
				char temMsg[1000];
				int n = 21;
 8007904:	2315      	movs	r3, #21
 8007906:	22fc      	movs	r2, #252	; 0xfc
 8007908:	0092      	lsls	r2, r2, #2
 800790a:	18ba      	adds	r2, r7, r2
 800790c:	6013      	str	r3, [r2, #0]
				int tempCt = 0;
 800790e:	2300      	movs	r3, #0
 8007910:	22fb      	movs	r2, #251	; 0xfb
 8007912:	0092      	lsls	r2, r2, #2
 8007914:	18ba      	adds	r2, r7, r2
 8007916:	6013      	str	r3, [r2, #0]
				memset(temMsg, 0, sizeof(temMsg));
 8007918:	23fa      	movs	r3, #250	; 0xfa
 800791a:	009a      	lsls	r2, r3, #2
 800791c:	003b      	movs	r3, r7
 800791e:	2100      	movs	r1, #0
 8007920:	0018      	movs	r0, r3
 8007922:	f007 f860 	bl	800e9e6 <memset>
				strcat(temMsg,"AT+CMGS=\"");
 8007926:	003b      	movs	r3, r7
 8007928:	0018      	movs	r0, r3
 800792a:	f7f8 fbf3 	bl	8000114 <strlen>
 800792e:	0003      	movs	r3, r0
 8007930:	001a      	movs	r2, r3
 8007932:	003b      	movs	r3, r7
 8007934:	189a      	adds	r2, r3, r2
 8007936:	4b6d      	ldr	r3, [pc, #436]	; (8007aec <send_location_packet_via_sms+0x2a8>)
 8007938:	0010      	movs	r0, r2
 800793a:	0019      	movs	r1, r3
 800793c:	230a      	movs	r3, #10
 800793e:	001a      	movs	r2, r3
 8007940:	f007 f848 	bl	800e9d4 <memcpy>
				strcat(temMsg,validSender);
 8007944:	4a6a      	ldr	r2, [pc, #424]	; (8007af0 <send_location_packet_via_sms+0x2ac>)
 8007946:	003b      	movs	r3, r7
 8007948:	0011      	movs	r1, r2
 800794a:	0018      	movs	r0, r3
 800794c:	f007 f874 	bl	800ea38 <strcat>
				strcat(temMsg,"\"\r");
 8007950:	003b      	movs	r3, r7
 8007952:	0018      	movs	r0, r3
 8007954:	f7f8 fbde 	bl	8000114 <strlen>
 8007958:	0003      	movs	r3, r0
 800795a:	001a      	movs	r2, r3
 800795c:	003b      	movs	r3, r7
 800795e:	189a      	adds	r2, r3, r2
 8007960:	4b64      	ldr	r3, [pc, #400]	; (8007af4 <send_location_packet_via_sms+0x2b0>)
 8007962:	0010      	movs	r0, r2
 8007964:	0019      	movs	r1, r3
 8007966:	2303      	movs	r3, #3
 8007968:	001a      	movs	r2, r3
 800796a:	f007 f833 	bl	800e9d4 <memcpy>
	//			strcat(temMsg, "AT+CMGS=\"3322336979\"\r");
				// todo send 21 msg packet
				for (uint8_t i = 0; i < loopCount; i++) {
 800796e:	4b62      	ldr	r3, [pc, #392]	; (8007af8 <send_location_packet_via_sms+0x2b4>)
 8007970:	18fb      	adds	r3, r7, r3
 8007972:	2200      	movs	r2, #0
 8007974:	701a      	strb	r2, [r3, #0]
 8007976:	e053      	b.n	8007a20 <send_location_packet_via_sms+0x1dc>
					for (uint8_t y = 0; y < 18; y++) {
 8007978:	4b60      	ldr	r3, [pc, #384]	; (8007afc <send_location_packet_via_sms+0x2b8>)
 800797a:	18fb      	adds	r3, r7, r3
 800797c:	2200      	movs	r2, #0
 800797e:	701a      	strb	r2, [r3, #0]
 8007980:	e01f      	b.n	80079c2 <send_location_packet_via_sms+0x17e>
						n += sprintf(&temMsg[n], "%d", bunchdata[i][y]);
 8007982:	003a      	movs	r2, r7
 8007984:	24fc      	movs	r4, #252	; 0xfc
 8007986:	00a4      	lsls	r4, r4, #2
 8007988:	193b      	adds	r3, r7, r4
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	18d0      	adds	r0, r2, r3
 800798e:	4b5a      	ldr	r3, [pc, #360]	; (8007af8 <send_location_packet_via_sms+0x2b4>)
 8007990:	18fb      	adds	r3, r7, r3
 8007992:	781a      	ldrb	r2, [r3, #0]
 8007994:	4d59      	ldr	r5, [pc, #356]	; (8007afc <send_location_packet_via_sms+0x2b8>)
 8007996:	197b      	adds	r3, r7, r5
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	494f      	ldr	r1, [pc, #316]	; (8007ad8 <send_location_packet_via_sms+0x294>)
 800799c:	0152      	lsls	r2, r2, #5
 800799e:	188a      	adds	r2, r1, r2
 80079a0:	5cd3      	ldrb	r3, [r2, r3]
 80079a2:	001a      	movs	r2, r3
 80079a4:	4b56      	ldr	r3, [pc, #344]	; (8007b00 <send_location_packet_via_sms+0x2bc>)
 80079a6:	0019      	movs	r1, r3
 80079a8:	f007 f826 	bl	800e9f8 <siprintf>
 80079ac:	0002      	movs	r2, r0
 80079ae:	193b      	adds	r3, r7, r4
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	189b      	adds	r3, r3, r2
 80079b4:	193a      	adds	r2, r7, r4
 80079b6:	6013      	str	r3, [r2, #0]
					for (uint8_t y = 0; y < 18; y++) {
 80079b8:	197b      	adds	r3, r7, r5
 80079ba:	781a      	ldrb	r2, [r3, #0]
 80079bc:	197b      	adds	r3, r7, r5
 80079be:	3201      	adds	r2, #1
 80079c0:	701a      	strb	r2, [r3, #0]
 80079c2:	4b4e      	ldr	r3, [pc, #312]	; (8007afc <send_location_packet_via_sms+0x2b8>)
 80079c4:	18fb      	adds	r3, r7, r3
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	2b11      	cmp	r3, #17
 80079ca:	d9da      	bls.n	8007982 <send_location_packet_via_sms+0x13e>
					}
					while (temMsg[tempCt] != NULL) {
 80079cc:	e006      	b.n	80079dc <send_location_packet_via_sms+0x198>
						tempCt++;
 80079ce:	22fb      	movs	r2, #251	; 0xfb
 80079d0:	0092      	lsls	r2, r2, #2
 80079d2:	18bb      	adds	r3, r7, r2
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	3301      	adds	r3, #1
 80079d8:	18ba      	adds	r2, r7, r2
 80079da:	6013      	str	r3, [r2, #0]
					while (temMsg[tempCt] != NULL) {
 80079dc:	4b49      	ldr	r3, [pc, #292]	; (8007b04 <send_location_packet_via_sms+0x2c0>)
 80079de:	21fe      	movs	r1, #254	; 0xfe
 80079e0:	0089      	lsls	r1, r1, #2
 80079e2:	185b      	adds	r3, r3, r1
 80079e4:	19da      	adds	r2, r3, r7
 80079e6:	20fb      	movs	r0, #251	; 0xfb
 80079e8:	0080      	lsls	r0, r0, #2
 80079ea:	183b      	adds	r3, r7, r0
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	18d3      	adds	r3, r2, r3
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d1eb      	bne.n	80079ce <send_location_packet_via_sms+0x18a>
					}
					temMsg[tempCt] = ',';
 80079f6:	4b43      	ldr	r3, [pc, #268]	; (8007b04 <send_location_packet_via_sms+0x2c0>)
 80079f8:	185b      	adds	r3, r3, r1
 80079fa:	19da      	adds	r2, r3, r7
 80079fc:	183b      	adds	r3, r7, r0
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	18d3      	adds	r3, r2, r3
 8007a02:	222c      	movs	r2, #44	; 0x2c
 8007a04:	701a      	strb	r2, [r3, #0]
					n++;
 8007a06:	22fc      	movs	r2, #252	; 0xfc
 8007a08:	0092      	lsls	r2, r2, #2
 8007a0a:	18bb      	adds	r3, r7, r2
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	3301      	adds	r3, #1
 8007a10:	18ba      	adds	r2, r7, r2
 8007a12:	6013      	str	r3, [r2, #0]
				for (uint8_t i = 0; i < loopCount; i++) {
 8007a14:	4938      	ldr	r1, [pc, #224]	; (8007af8 <send_location_packet_via_sms+0x2b4>)
 8007a16:	187b      	adds	r3, r7, r1
 8007a18:	781a      	ldrb	r2, [r3, #0]
 8007a1a:	187b      	adds	r3, r7, r1
 8007a1c:	3201      	adds	r2, #1
 8007a1e:	701a      	strb	r2, [r3, #0]
 8007a20:	4b35      	ldr	r3, [pc, #212]	; (8007af8 <send_location_packet_via_sms+0x2b4>)
 8007a22:	18fa      	adds	r2, r7, r3
 8007a24:	4b2b      	ldr	r3, [pc, #172]	; (8007ad4 <send_location_packet_via_sms+0x290>)
 8007a26:	18fb      	adds	r3, r7, r3
 8007a28:	7812      	ldrb	r2, [r2, #0]
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d3a3      	bcc.n	8007978 <send_location_packet_via_sms+0x134>
				}
				tempCt = 0;
 8007a30:	2300      	movs	r3, #0
 8007a32:	22fb      	movs	r2, #251	; 0xfb
 8007a34:	0092      	lsls	r2, r2, #2
 8007a36:	18ba      	adds	r2, r7, r2
 8007a38:	6013      	str	r3, [r2, #0]
				while (temMsg[tempCt] != NULL) {
 8007a3a:	e006      	b.n	8007a4a <send_location_packet_via_sms+0x206>
					tempCt++;
 8007a3c:	22fb      	movs	r2, #251	; 0xfb
 8007a3e:	0092      	lsls	r2, r2, #2
 8007a40:	18bb      	adds	r3, r7, r2
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	3301      	adds	r3, #1
 8007a46:	18ba      	adds	r2, r7, r2
 8007a48:	6013      	str	r3, [r2, #0]
				while (temMsg[tempCt] != NULL) {
 8007a4a:	4b2e      	ldr	r3, [pc, #184]	; (8007b04 <send_location_packet_via_sms+0x2c0>)
 8007a4c:	21fe      	movs	r1, #254	; 0xfe
 8007a4e:	0089      	lsls	r1, r1, #2
 8007a50:	185b      	adds	r3, r3, r1
 8007a52:	19da      	adds	r2, r3, r7
 8007a54:	20fb      	movs	r0, #251	; 0xfb
 8007a56:	0080      	lsls	r0, r0, #2
 8007a58:	183b      	adds	r3, r7, r0
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	18d3      	adds	r3, r2, r3
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d1eb      	bne.n	8007a3c <send_location_packet_via_sms+0x1f8>
				}
				temMsg[tempCt] = 26;
 8007a64:	4b27      	ldr	r3, [pc, #156]	; (8007b04 <send_location_packet_via_sms+0x2c0>)
 8007a66:	185b      	adds	r3, r3, r1
 8007a68:	19da      	adds	r2, r3, r7
 8007a6a:	183b      	adds	r3, r7, r0
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	18d3      	adds	r3, r2, r3
 8007a70:	221a      	movs	r2, #26
 8007a72:	701a      	strb	r2, [r3, #0]
				send_command(temMsg, 12005, 7, 0, 0);
 8007a74:	4924      	ldr	r1, [pc, #144]	; (8007b08 <send_location_packet_via_sms+0x2c4>)
 8007a76:	0038      	movs	r0, r7
 8007a78:	2300      	movs	r3, #0
 8007a7a:	9300      	str	r3, [sp, #0]
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	2207      	movs	r2, #7
 8007a80:	f7fe fdc2 	bl	8006608 <send_command>
				dataSize = checkdatasize();
 8007a84:	4b11      	ldr	r3, [pc, #68]	; (8007acc <send_location_packet_via_sms+0x288>)
 8007a86:	18fc      	adds	r4, r7, r3
 8007a88:	f7ff f9f2 	bl	8006e70 <checkdatasize>
 8007a8c:	0003      	movs	r3, r0
 8007a8e:	7023      	strb	r3, [r4, #0]
				msgCounter++;
 8007a90:	4b0d      	ldr	r3, [pc, #52]	; (8007ac8 <send_location_packet_via_sms+0x284>)
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	3301      	adds	r3, #1
 8007a96:	b2da      	uxtb	r2, r3
 8007a98:	4b0b      	ldr	r3, [pc, #44]	; (8007ac8 <send_location_packet_via_sms+0x284>)
 8007a9a:	701a      	strb	r2, [r3, #0]
		while (dataSize == 1 && msgCounter < msgCount) {
 8007a9c:	4b0b      	ldr	r3, [pc, #44]	; (8007acc <send_location_packet_via_sms+0x288>)
 8007a9e:	18fb      	adds	r3, r7, r3
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d106      	bne.n	8007ab4 <send_location_packet_via_sms+0x270>
 8007aa6:	4b08      	ldr	r3, [pc, #32]	; (8007ac8 <send_location_packet_via_sms+0x284>)
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	2b09      	cmp	r3, #9
 8007aac:	d800      	bhi.n	8007ab0 <send_location_packet_via_sms+0x26c>
 8007aae:	e6df      	b.n	8007870 <send_location_packet_via_sms+0x2c>
			} else {
				break;
			}
		}
	}
}
 8007ab0:	e000      	b.n	8007ab4 <send_location_packet_via_sms+0x270>
				break;
 8007ab2:	46c0      	nop			; (mov r8, r8)
}
 8007ab4:	46c0      	nop			; (mov r8, r8)
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	23fe      	movs	r3, #254	; 0xfe
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	449d      	add	sp, r3
 8007abe:	bdb0      	pop	{r4, r5, r7, pc}
 8007ac0:	fffffc00 	.word	0xfffffc00
 8007ac4:	20000708 	.word	0x20000708
 8007ac8:	20000715 	.word	0x20000715
 8007acc:	000003f7 	.word	0x000003f7
 8007ad0:	20000ce5 	.word	0x20000ce5
 8007ad4:	000003f6 	.word	0x000003f6
 8007ad8:	20000a3c 	.word	0x20000a3c
 8007adc:	08012eb0 	.word	0x08012eb0
 8007ae0:	200009f5 	.word	0x200009f5
 8007ae4:	000003f5 	.word	0x000003f5
 8007ae8:	20000a1c 	.word	0x20000a1c
 8007aec:	0801307c 	.word	0x0801307c
 8007af0:	20000004 	.word	0x20000004
 8007af4:	08013088 	.word	0x08013088
 8007af8:	000003eb 	.word	0x000003eb
 8007afc:	000003ea 	.word	0x000003ea
 8007b00:	08013090 	.word	0x08013090
 8007b04:	fffffc08 	.word	0xfffffc08
 8007b08:	00002ee5 	.word	0x00002ee5

08007b0c <int2string>:
char* int2string(int num, char *str) {
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b082      	sub	sp, #8
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	6039      	str	r1, [r7, #0]
	if (str == NULL) {
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d101      	bne.n	8007b20 <int2string+0x14>
		return NULL;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	e006      	b.n	8007b2e <int2string+0x22>
	}
	sprintf(str, "%d", num);
 8007b20:	687a      	ldr	r2, [r7, #4]
 8007b22:	4905      	ldr	r1, [pc, #20]	; (8007b38 <int2string+0x2c>)
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	0018      	movs	r0, r3
 8007b28:	f006 ff66 	bl	800e9f8 <siprintf>
	return str;
 8007b2c:	683b      	ldr	r3, [r7, #0]
}
 8007b2e:	0018      	movs	r0, r3
 8007b30:	46bd      	mov	sp, r7
 8007b32:	b002      	add	sp, #8
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	46c0      	nop			; (mov r8, r8)
 8007b38:	08013090 	.word	0x08013090

08007b3c <check_command_SERVER>:

void check_command_SERVER(char* command){
 8007b3c:	b590      	push	{r4, r7, lr}
 8007b3e:	b085      	sub	sp, #20
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
		    //check for data integrity by counting commas.
		    //there must be 2 commas in total.
		    uint8_t commaPosition[2]={0,0};
 8007b44:	2308      	movs	r3, #8
 8007b46:	18fb      	adds	r3, r7, r3
 8007b48:	2200      	movs	r2, #0
 8007b4a:	801a      	strh	r2, [r3, #0]
		    uint8_t totalCommas=0;
 8007b4c:	230f      	movs	r3, #15
 8007b4e:	18fb      	adds	r3, r7, r3
 8007b50:	2200      	movs	r2, #0
 8007b52:	701a      	strb	r2, [r3, #0]
		    for (uint8_t a=0;a<MAX_COMMAND_LEN;a++){
 8007b54:	230e      	movs	r3, #14
 8007b56:	18fb      	adds	r3, r7, r3
 8007b58:	2200      	movs	r2, #0
 8007b5a:	701a      	strb	r2, [r3, #0]
 8007b5c:	e01f      	b.n	8007b9e <check_command_SERVER+0x62>
		        if(command[a]==','){
 8007b5e:	210e      	movs	r1, #14
 8007b60:	187b      	adds	r3, r7, r1
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	18d3      	adds	r3, r2, r3
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	2b2c      	cmp	r3, #44	; 0x2c
 8007b6c:	d111      	bne.n	8007b92 <check_command_SERVER+0x56>
		            if(totalCommas<2){
 8007b6e:	220f      	movs	r2, #15
 8007b70:	18bb      	adds	r3, r7, r2
 8007b72:	781b      	ldrb	r3, [r3, #0]
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d806      	bhi.n	8007b86 <check_command_SERVER+0x4a>
		                commaPosition[totalCommas]=a;
 8007b78:	18bb      	adds	r3, r7, r2
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	2208      	movs	r2, #8
 8007b7e:	18ba      	adds	r2, r7, r2
 8007b80:	1879      	adds	r1, r7, r1
 8007b82:	7809      	ldrb	r1, [r1, #0]
 8007b84:	54d1      	strb	r1, [r2, r3]
		            }
		            totalCommas++;
 8007b86:	210f      	movs	r1, #15
 8007b88:	187b      	adds	r3, r7, r1
 8007b8a:	781a      	ldrb	r2, [r3, #0]
 8007b8c:	187b      	adds	r3, r7, r1
 8007b8e:	3201      	adds	r2, #1
 8007b90:	701a      	strb	r2, [r3, #0]
		    for (uint8_t a=0;a<MAX_COMMAND_LEN;a++){
 8007b92:	210e      	movs	r1, #14
 8007b94:	187b      	adds	r3, r7, r1
 8007b96:	781a      	ldrb	r2, [r3, #0]
 8007b98:	187b      	adds	r3, r7, r1
 8007b9a:	3201      	adds	r2, #1
 8007b9c:	701a      	strb	r2, [r3, #0]
 8007b9e:	230e      	movs	r3, #14
 8007ba0:	18fb      	adds	r3, r7, r3
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	2b31      	cmp	r3, #49	; 0x31
 8007ba6:	d9da      	bls.n	8007b5e <check_command_SERVER+0x22>
		        }
		    }
		    if(totalCommas ==2 && commaPosition[0] == 6 ){
 8007ba8:	230f      	movs	r3, #15
 8007baa:	18fb      	adds	r3, r7, r3
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	2b02      	cmp	r3, #2
 8007bb0:	d15f      	bne.n	8007c72 <check_command_SERVER+0x136>
 8007bb2:	2408      	movs	r4, #8
 8007bb4:	193b      	adds	r3, r7, r4
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	2b06      	cmp	r3, #6
 8007bba:	d15a      	bne.n	8007c72 <check_command_SERVER+0x136>
		        //two commas found, and first one is on 6th index.
		        //data is good.
		    	memset(portAdd,0,sizeof(portAdd));
 8007bbc:	4b2f      	ldr	r3, [pc, #188]	; (8007c7c <check_command_SERVER+0x140>)
 8007bbe:	2206      	movs	r2, #6
 8007bc0:	2100      	movs	r1, #0
 8007bc2:	0018      	movs	r0, r3
 8007bc4:	f006 ff0f 	bl	800e9e6 <memset>
		    	memset(domainAdd,0,sizeof(domainAdd));
 8007bc8:	4b2d      	ldr	r3, [pc, #180]	; (8007c80 <check_command_SERVER+0x144>)
 8007bca:	2233      	movs	r2, #51	; 0x33
 8007bcc:	2100      	movs	r1, #0
 8007bce:	0018      	movs	r0, r3
 8007bd0:	f006 ff09 	bl	800e9e6 <memset>

		        //extract dns
	            for(uint8_t a=commaPosition[0]+1;a<commaPosition[1];a++){
 8007bd4:	193b      	adds	r3, r7, r4
 8007bd6:	781a      	ldrb	r2, [r3, #0]
 8007bd8:	230d      	movs	r3, #13
 8007bda:	18fb      	adds	r3, r7, r3
 8007bdc:	3201      	adds	r2, #1
 8007bde:	701a      	strb	r2, [r3, #0]
 8007be0:	e013      	b.n	8007c0a <check_command_SERVER+0xce>
	                    domainAdd[a-(commaPosition[0]+1)]=command[a];
 8007be2:	200d      	movs	r0, #13
 8007be4:	183b      	adds	r3, r7, r0
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	18d2      	adds	r2, r2, r3
 8007bec:	183b      	adds	r3, r7, r0
 8007bee:	7819      	ldrb	r1, [r3, #0]
 8007bf0:	2308      	movs	r3, #8
 8007bf2:	18fb      	adds	r3, r7, r3
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	1acb      	subs	r3, r1, r3
 8007bfa:	7811      	ldrb	r1, [r2, #0]
 8007bfc:	4a20      	ldr	r2, [pc, #128]	; (8007c80 <check_command_SERVER+0x144>)
 8007bfe:	54d1      	strb	r1, [r2, r3]
	            for(uint8_t a=commaPosition[0]+1;a<commaPosition[1];a++){
 8007c00:	183b      	adds	r3, r7, r0
 8007c02:	781a      	ldrb	r2, [r3, #0]
 8007c04:	183b      	adds	r3, r7, r0
 8007c06:	3201      	adds	r2, #1
 8007c08:	701a      	strb	r2, [r3, #0]
 8007c0a:	2108      	movs	r1, #8
 8007c0c:	187b      	adds	r3, r7, r1
 8007c0e:	785b      	ldrb	r3, [r3, #1]
 8007c10:	220d      	movs	r2, #13
 8007c12:	18ba      	adds	r2, r7, r2
 8007c14:	7812      	ldrb	r2, [r2, #0]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d3e3      	bcc.n	8007be2 <check_command_SERVER+0xa6>
	                }
	            //extract port
	    	    for(uint8_t a=commaPosition[1]+1;a<commaPosition[1]+7;a++){
 8007c1a:	187b      	adds	r3, r7, r1
 8007c1c:	785a      	ldrb	r2, [r3, #1]
 8007c1e:	230c      	movs	r3, #12
 8007c20:	18fb      	adds	r3, r7, r3
 8007c22:	3201      	adds	r2, #1
 8007c24:	701a      	strb	r2, [r3, #0]
 8007c26:	e01b      	b.n	8007c60 <check_command_SERVER+0x124>
	    	        if(command[a]!=NULL){
 8007c28:	210c      	movs	r1, #12
 8007c2a:	187b      	adds	r3, r7, r1
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	18d3      	adds	r3, r2, r3
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d00d      	beq.n	8007c54 <check_command_SERVER+0x118>
	    	            portAdd[a-(commaPosition[1]+1)] = command[a];
 8007c38:	187b      	adds	r3, r7, r1
 8007c3a:	781b      	ldrb	r3, [r3, #0]
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	18d2      	adds	r2, r2, r3
 8007c40:	187b      	adds	r3, r7, r1
 8007c42:	7819      	ldrb	r1, [r3, #0]
 8007c44:	2308      	movs	r3, #8
 8007c46:	18fb      	adds	r3, r7, r3
 8007c48:	785b      	ldrb	r3, [r3, #1]
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	1acb      	subs	r3, r1, r3
 8007c4e:	7811      	ldrb	r1, [r2, #0]
 8007c50:	4a0a      	ldr	r2, [pc, #40]	; (8007c7c <check_command_SERVER+0x140>)
 8007c52:	54d1      	strb	r1, [r2, r3]
	    	    for(uint8_t a=commaPosition[1]+1;a<commaPosition[1]+7;a++){
 8007c54:	210c      	movs	r1, #12
 8007c56:	187b      	adds	r3, r7, r1
 8007c58:	781a      	ldrb	r2, [r3, #0]
 8007c5a:	187b      	adds	r3, r7, r1
 8007c5c:	3201      	adds	r2, #1
 8007c5e:	701a      	strb	r2, [r3, #0]
 8007c60:	2308      	movs	r3, #8
 8007c62:	18fb      	adds	r3, r7, r3
 8007c64:	785b      	ldrb	r3, [r3, #1]
 8007c66:	1d9a      	adds	r2, r3, #6
 8007c68:	230c      	movs	r3, #12
 8007c6a:	18fb      	adds	r3, r7, r3
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	dada      	bge.n	8007c28 <check_command_SERVER+0xec>
	    	    //todo save to flash please.
		    }
		    else{
//		        printf("Data is bad");
		    }
}
 8007c72:	46c0      	nop			; (mov r8, r8)
 8007c74:	46bd      	mov	sp, r7
 8007c76:	b005      	add	sp, #20
 8007c78:	bd90      	pop	{r4, r7, pc}
 8007c7a:	46c0      	nop			; (mov r8, r8)
 8007c7c:	20000028 	.word	0x20000028
 8007c80:	20000030 	.word	0x20000030

08007c84 <check_command_TIMER>:
void check_command_TIMER(char* command){
 8007c84:	b590      	push	{r4, r7, lr}
 8007c86:	b089      	sub	sp, #36	; 0x24
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]

    //check for data integrity by counting commas.
    //there must be 2 commas in total.
    //t1 and t2 both must no be greater than 3 chars.

    uint8_t commaPosition[2]={0,0};
 8007c8c:	230c      	movs	r3, #12
 8007c8e:	18fb      	adds	r3, r7, r3
 8007c90:	2200      	movs	r2, #0
 8007c92:	801a      	strh	r2, [r3, #0]
    uint8_t totalCommas=0;
 8007c94:	231f      	movs	r3, #31
 8007c96:	18fb      	adds	r3, r7, r3
 8007c98:	2200      	movs	r2, #0
 8007c9a:	701a      	strb	r2, [r3, #0]
    for (uint8_t a=0;a<MAX_COMMAND_LEN;a++){
 8007c9c:	231e      	movs	r3, #30
 8007c9e:	18fb      	adds	r3, r7, r3
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	701a      	strb	r2, [r3, #0]
 8007ca4:	e01f      	b.n	8007ce6 <check_command_TIMER+0x62>
        if(command[a]==','){
 8007ca6:	211e      	movs	r1, #30
 8007ca8:	187b      	adds	r3, r7, r1
 8007caa:	781b      	ldrb	r3, [r3, #0]
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	18d3      	adds	r3, r2, r3
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	2b2c      	cmp	r3, #44	; 0x2c
 8007cb4:	d111      	bne.n	8007cda <check_command_TIMER+0x56>
            if(totalCommas<2){
 8007cb6:	221f      	movs	r2, #31
 8007cb8:	18bb      	adds	r3, r7, r2
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d806      	bhi.n	8007cce <check_command_TIMER+0x4a>
                commaPosition[totalCommas]=a;
 8007cc0:	18bb      	adds	r3, r7, r2
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	220c      	movs	r2, #12
 8007cc6:	18ba      	adds	r2, r7, r2
 8007cc8:	1879      	adds	r1, r7, r1
 8007cca:	7809      	ldrb	r1, [r1, #0]
 8007ccc:	54d1      	strb	r1, [r2, r3]
            }
            totalCommas++;
 8007cce:	211f      	movs	r1, #31
 8007cd0:	187b      	adds	r3, r7, r1
 8007cd2:	781a      	ldrb	r2, [r3, #0]
 8007cd4:	187b      	adds	r3, r7, r1
 8007cd6:	3201      	adds	r2, #1
 8007cd8:	701a      	strb	r2, [r3, #0]
    for (uint8_t a=0;a<MAX_COMMAND_LEN;a++){
 8007cda:	211e      	movs	r1, #30
 8007cdc:	187b      	adds	r3, r7, r1
 8007cde:	781a      	ldrb	r2, [r3, #0]
 8007ce0:	187b      	adds	r3, r7, r1
 8007ce2:	3201      	adds	r2, #1
 8007ce4:	701a      	strb	r2, [r3, #0]
 8007ce6:	231e      	movs	r3, #30
 8007ce8:	18fb      	adds	r3, r7, r3
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	2b31      	cmp	r3, #49	; 0x31
 8007cee:	d9da      	bls.n	8007ca6 <check_command_TIMER+0x22>
        }
    }
    uint8_t comaDiff = 0;
 8007cf0:	201b      	movs	r0, #27
 8007cf2:	183b      	adds	r3, r7, r0
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	701a      	strb	r2, [r3, #0]
    comaDiff = commaPosition[1] - commaPosition[0];
 8007cf8:	240c      	movs	r4, #12
 8007cfa:	193b      	adds	r3, r7, r4
 8007cfc:	7859      	ldrb	r1, [r3, #1]
 8007cfe:	193b      	adds	r3, r7, r4
 8007d00:	781a      	ldrb	r2, [r3, #0]
 8007d02:	183b      	adds	r3, r7, r0
 8007d04:	1a8a      	subs	r2, r1, r2
 8007d06:	701a      	strb	r2, [r3, #0]
    if(totalCommas ==2
 8007d08:	231f      	movs	r3, #31
 8007d0a:	18fb      	adds	r3, r7, r3
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	2b02      	cmp	r3, #2
 8007d10:	d000      	beq.n	8007d14 <check_command_TIMER+0x90>
 8007d12:	e095      	b.n	8007e40 <check_command_TIMER+0x1bc>
    && commaPosition[0] == 5
 8007d14:	193b      	adds	r3, r7, r4
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	2b05      	cmp	r3, #5
 8007d1a:	d000      	beq.n	8007d1e <check_command_TIMER+0x9a>
 8007d1c:	e090      	b.n	8007e40 <check_command_TIMER+0x1bc>
    && comaDiff < 5
 8007d1e:	183b      	adds	r3, r7, r0
 8007d20:	781b      	ldrb	r3, [r3, #0]
 8007d22:	2b04      	cmp	r3, #4
 8007d24:	d900      	bls.n	8007d28 <check_command_TIMER+0xa4>
 8007d26:	e08b      	b.n	8007e40 <check_command_TIMER+0x1bc>
    && comaDiff > 1){
 8007d28:	183b      	adds	r3, r7, r0
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d800      	bhi.n	8007d32 <check_command_TIMER+0xae>
 8007d30:	e086      	b.n	8007e40 <check_command_TIMER+0x1bc>
        //two commas found, and first one is on 5th index.
        //t1 has 1-3 chars
        //data is good.
    	memset(t1,0,sizeof(t1));
 8007d32:	2314      	movs	r3, #20
 8007d34:	18fb      	adds	r3, r7, r3
 8007d36:	2204      	movs	r2, #4
 8007d38:	2100      	movs	r1, #0
 8007d3a:	0018      	movs	r0, r3
 8007d3c:	f006 fe53 	bl	800e9e6 <memset>
    	memset(t2,0,sizeof(t2));
 8007d40:	2310      	movs	r3, #16
 8007d42:	18fb      	adds	r3, r7, r3
 8007d44:	2204      	movs	r2, #4
 8007d46:	2100      	movs	r1, #0
 8007d48:	0018      	movs	r0, r3
 8007d4a:	f006 fe4c 	bl	800e9e6 <memset>

        //extract t1
        for(uint8_t a=commaPosition[0]+1;a<commaPosition[1];a++){
 8007d4e:	193b      	adds	r3, r7, r4
 8007d50:	781a      	ldrb	r2, [r3, #0]
 8007d52:	231d      	movs	r3, #29
 8007d54:	18fb      	adds	r3, r7, r3
 8007d56:	3201      	adds	r2, #1
 8007d58:	701a      	strb	r2, [r3, #0]
 8007d5a:	e014      	b.n	8007d86 <check_command_TIMER+0x102>
                t1[a-(commaPosition[0]+1)]=command[a];
 8007d5c:	201d      	movs	r0, #29
 8007d5e:	183b      	adds	r3, r7, r0
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	18d2      	adds	r2, r2, r3
 8007d66:	183b      	adds	r3, r7, r0
 8007d68:	7819      	ldrb	r1, [r3, #0]
 8007d6a:	230c      	movs	r3, #12
 8007d6c:	18fb      	adds	r3, r7, r3
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	3301      	adds	r3, #1
 8007d72:	1acb      	subs	r3, r1, r3
 8007d74:	7811      	ldrb	r1, [r2, #0]
 8007d76:	2214      	movs	r2, #20
 8007d78:	18ba      	adds	r2, r7, r2
 8007d7a:	54d1      	strb	r1, [r2, r3]
        for(uint8_t a=commaPosition[0]+1;a<commaPosition[1];a++){
 8007d7c:	183b      	adds	r3, r7, r0
 8007d7e:	781a      	ldrb	r2, [r3, #0]
 8007d80:	183b      	adds	r3, r7, r0
 8007d82:	3201      	adds	r2, #1
 8007d84:	701a      	strb	r2, [r3, #0]
 8007d86:	210c      	movs	r1, #12
 8007d88:	187b      	adds	r3, r7, r1
 8007d8a:	785b      	ldrb	r3, [r3, #1]
 8007d8c:	221d      	movs	r2, #29
 8007d8e:	18ba      	adds	r2, r7, r2
 8007d90:	7812      	ldrb	r2, [r2, #0]
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d3e2      	bcc.n	8007d5c <check_command_TIMER+0xd8>
            }
        //extract t2
	    for(uint8_t a=commaPosition[1]+1;a<commaPosition[1]+4;a++){
 8007d96:	187b      	adds	r3, r7, r1
 8007d98:	785a      	ldrb	r2, [r3, #1]
 8007d9a:	231c      	movs	r3, #28
 8007d9c:	18fb      	adds	r3, r7, r3
 8007d9e:	3201      	adds	r2, #1
 8007da0:	701a      	strb	r2, [r3, #0]
 8007da2:	e01c      	b.n	8007dde <check_command_TIMER+0x15a>
	        if(command[a]!=NULL){
 8007da4:	211c      	movs	r1, #28
 8007da6:	187b      	adds	r3, r7, r1
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	687a      	ldr	r2, [r7, #4]
 8007dac:	18d3      	adds	r3, r2, r3
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d00e      	beq.n	8007dd2 <check_command_TIMER+0x14e>
	            t2[a-(commaPosition[1]+1)] = command[a];
 8007db4:	187b      	adds	r3, r7, r1
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	18d2      	adds	r2, r2, r3
 8007dbc:	187b      	adds	r3, r7, r1
 8007dbe:	7819      	ldrb	r1, [r3, #0]
 8007dc0:	230c      	movs	r3, #12
 8007dc2:	18fb      	adds	r3, r7, r3
 8007dc4:	785b      	ldrb	r3, [r3, #1]
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	1acb      	subs	r3, r1, r3
 8007dca:	7811      	ldrb	r1, [r2, #0]
 8007dcc:	2210      	movs	r2, #16
 8007dce:	18ba      	adds	r2, r7, r2
 8007dd0:	54d1      	strb	r1, [r2, r3]
	    for(uint8_t a=commaPosition[1]+1;a<commaPosition[1]+4;a++){
 8007dd2:	211c      	movs	r1, #28
 8007dd4:	187b      	adds	r3, r7, r1
 8007dd6:	781a      	ldrb	r2, [r3, #0]
 8007dd8:	187b      	adds	r3, r7, r1
 8007dda:	3201      	adds	r2, #1
 8007ddc:	701a      	strb	r2, [r3, #0]
 8007dde:	230c      	movs	r3, #12
 8007de0:	18fb      	adds	r3, r7, r3
 8007de2:	785b      	ldrb	r3, [r3, #1]
 8007de4:	1cda      	adds	r2, r3, #3
 8007de6:	231c      	movs	r3, #28
 8007de8:	18fb      	adds	r3, r7, r3
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	429a      	cmp	r2, r3
 8007dee:	dad9      	bge.n	8007da4 <check_command_TIMER+0x120>
	        }
	    }
	    locationDataIntervalA = atoi(t1);
 8007df0:	2314      	movs	r3, #20
 8007df2:	18fb      	adds	r3, r7, r3
 8007df4:	0018      	movs	r0, r3
 8007df6:	f006 fd97 	bl	800e928 <atoi>
 8007dfa:	0003      	movs	r3, r0
 8007dfc:	b2da      	uxtb	r2, r3
 8007dfe:	4b12      	ldr	r3, [pc, #72]	; (8007e48 <check_command_TIMER+0x1c4>)
 8007e00:	701a      	strb	r2, [r3, #0]
	    locationDataIntervalB = atoi(t2);
 8007e02:	2310      	movs	r3, #16
 8007e04:	18fb      	adds	r3, r7, r3
 8007e06:	0018      	movs	r0, r3
 8007e08:	f006 fd8e 	bl	800e928 <atoi>
 8007e0c:	0003      	movs	r3, r0
 8007e0e:	b2da      	uxtb	r2, r3
 8007e10:	4b0e      	ldr	r3, [pc, #56]	; (8007e4c <check_command_TIMER+0x1c8>)
 8007e12:	701a      	strb	r2, [r3, #0]
	    locationDataIntervalA = locationDataIntervalA > 180 ? 180 : locationDataIntervalA;
 8007e14:	4b0c      	ldr	r3, [pc, #48]	; (8007e48 <check_command_TIMER+0x1c4>)
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	1c1a      	adds	r2, r3, #0
 8007e1a:	b2d3      	uxtb	r3, r2
 8007e1c:	2bb4      	cmp	r3, #180	; 0xb4
 8007e1e:	d901      	bls.n	8007e24 <check_command_TIMER+0x1a0>
 8007e20:	23b4      	movs	r3, #180	; 0xb4
 8007e22:	1c1a      	adds	r2, r3, #0
 8007e24:	b2d2      	uxtb	r2, r2
 8007e26:	4b08      	ldr	r3, [pc, #32]	; (8007e48 <check_command_TIMER+0x1c4>)
 8007e28:	701a      	strb	r2, [r3, #0]
	    locationDataIntervalB = locationDataIntervalB > 180 ? 180 : locationDataIntervalB;
 8007e2a:	4b08      	ldr	r3, [pc, #32]	; (8007e4c <check_command_TIMER+0x1c8>)
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	1c1a      	adds	r2, r3, #0
 8007e30:	b2d3      	uxtb	r3, r2
 8007e32:	2bb4      	cmp	r3, #180	; 0xb4
 8007e34:	d901      	bls.n	8007e3a <check_command_TIMER+0x1b6>
 8007e36:	23b4      	movs	r3, #180	; 0xb4
 8007e38:	1c1a      	adds	r2, r3, #0
 8007e3a:	b2d2      	uxtb	r2, r2
 8007e3c:	4b03      	ldr	r3, [pc, #12]	; (8007e4c <check_command_TIMER+0x1c8>)
 8007e3e:	701a      	strb	r2, [r3, #0]
    }
    else{
//		        printf("Data is bad");
    }

}
 8007e40:	46c0      	nop			; (mov r8, r8)
 8007e42:	46bd      	mov	sp, r7
 8007e44:	b009      	add	sp, #36	; 0x24
 8007e46:	bd90      	pop	{r4, r7, pc}
 8007e48:	20000000 	.word	0x20000000
 8007e4c:	20000001 	.word	0x20000001

08007e50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007e54:	b672      	cpsid	i
}
 8007e56:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8007e58:	e7fe      	b.n	8007e58 <Error_Handler+0x8>
	...

08007e5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e62:	4b0f      	ldr	r3, [pc, #60]	; (8007ea0 <HAL_MspInit+0x44>)
 8007e64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e66:	4b0e      	ldr	r3, [pc, #56]	; (8007ea0 <HAL_MspInit+0x44>)
 8007e68:	2101      	movs	r1, #1
 8007e6a:	430a      	orrs	r2, r1
 8007e6c:	641a      	str	r2, [r3, #64]	; 0x40
 8007e6e:	4b0c      	ldr	r3, [pc, #48]	; (8007ea0 <HAL_MspInit+0x44>)
 8007e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e72:	2201      	movs	r2, #1
 8007e74:	4013      	ands	r3, r2
 8007e76:	607b      	str	r3, [r7, #4]
 8007e78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007e7a:	4b09      	ldr	r3, [pc, #36]	; (8007ea0 <HAL_MspInit+0x44>)
 8007e7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e7e:	4b08      	ldr	r3, [pc, #32]	; (8007ea0 <HAL_MspInit+0x44>)
 8007e80:	2180      	movs	r1, #128	; 0x80
 8007e82:	0549      	lsls	r1, r1, #21
 8007e84:	430a      	orrs	r2, r1
 8007e86:	63da      	str	r2, [r3, #60]	; 0x3c
 8007e88:	4b05      	ldr	r3, [pc, #20]	; (8007ea0 <HAL_MspInit+0x44>)
 8007e8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e8c:	2380      	movs	r3, #128	; 0x80
 8007e8e:	055b      	lsls	r3, r3, #21
 8007e90:	4013      	ands	r3, r2
 8007e92:	603b      	str	r3, [r7, #0]
 8007e94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007e96:	46c0      	nop			; (mov r8, r8)
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	b002      	add	sp, #8
 8007e9c:	bd80      	pop	{r7, pc}
 8007e9e:	46c0      	nop			; (mov r8, r8)
 8007ea0:	40021000 	.word	0x40021000

08007ea4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007ea4:	b590      	push	{r4, r7, lr}
 8007ea6:	b08b      	sub	sp, #44	; 0x2c
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007eac:	2414      	movs	r4, #20
 8007eae:	193b      	adds	r3, r7, r4
 8007eb0:	0018      	movs	r0, r3
 8007eb2:	2314      	movs	r3, #20
 8007eb4:	001a      	movs	r2, r3
 8007eb6:	2100      	movs	r1, #0
 8007eb8:	f006 fd95 	bl	800e9e6 <memset>
  if(hspi->Instance==SPI1)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a1f      	ldr	r2, [pc, #124]	; (8007f40 <HAL_SPI_MspInit+0x9c>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d137      	bne.n	8007f36 <HAL_SPI_MspInit+0x92>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007ec6:	4b1f      	ldr	r3, [pc, #124]	; (8007f44 <HAL_SPI_MspInit+0xa0>)
 8007ec8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007eca:	4b1e      	ldr	r3, [pc, #120]	; (8007f44 <HAL_SPI_MspInit+0xa0>)
 8007ecc:	2180      	movs	r1, #128	; 0x80
 8007ece:	0149      	lsls	r1, r1, #5
 8007ed0:	430a      	orrs	r2, r1
 8007ed2:	641a      	str	r2, [r3, #64]	; 0x40
 8007ed4:	4b1b      	ldr	r3, [pc, #108]	; (8007f44 <HAL_SPI_MspInit+0xa0>)
 8007ed6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ed8:	2380      	movs	r3, #128	; 0x80
 8007eda:	015b      	lsls	r3, r3, #5
 8007edc:	4013      	ands	r3, r2
 8007ede:	613b      	str	r3, [r7, #16]
 8007ee0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ee2:	4b18      	ldr	r3, [pc, #96]	; (8007f44 <HAL_SPI_MspInit+0xa0>)
 8007ee4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ee6:	4b17      	ldr	r3, [pc, #92]	; (8007f44 <HAL_SPI_MspInit+0xa0>)
 8007ee8:	2102      	movs	r1, #2
 8007eea:	430a      	orrs	r2, r1
 8007eec:	635a      	str	r2, [r3, #52]	; 0x34
 8007eee:	4b15      	ldr	r3, [pc, #84]	; (8007f44 <HAL_SPI_MspInit+0xa0>)
 8007ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ef2:	2202      	movs	r2, #2
 8007ef4:	4013      	ands	r3, r2
 8007ef6:	60fb      	str	r3, [r7, #12]
 8007ef8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8007efa:	0021      	movs	r1, r4
 8007efc:	187b      	adds	r3, r7, r1
 8007efe:	2238      	movs	r2, #56	; 0x38
 8007f00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f02:	187b      	adds	r3, r7, r1
 8007f04:	2202      	movs	r2, #2
 8007f06:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f08:	187b      	adds	r3, r7, r1
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f0e:	187b      	adds	r3, r7, r1
 8007f10:	2200      	movs	r2, #0
 8007f12:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8007f14:	187b      	adds	r3, r7, r1
 8007f16:	2200      	movs	r2, #0
 8007f18:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007f1a:	187b      	adds	r3, r7, r1
 8007f1c:	4a0a      	ldr	r2, [pc, #40]	; (8007f48 <HAL_SPI_MspInit+0xa4>)
 8007f1e:	0019      	movs	r1, r3
 8007f20:	0010      	movs	r0, r2
 8007f22:	f001 fdab 	bl	8009a7c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 3, 0);
 8007f26:	2200      	movs	r2, #0
 8007f28:	2103      	movs	r1, #3
 8007f2a:	2019      	movs	r0, #25
 8007f2c:	f001 fa56 	bl	80093dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8007f30:	2019      	movs	r0, #25
 8007f32:	f001 fa68 	bl	8009406 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8007f36:	46c0      	nop			; (mov r8, r8)
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	b00b      	add	sp, #44	; 0x2c
 8007f3c:	bd90      	pop	{r4, r7, pc}
 8007f3e:	46c0      	nop			; (mov r8, r8)
 8007f40:	40013000 	.word	0x40013000
 8007f44:	40021000 	.word	0x40021000
 8007f48:	50000400 	.word	0x50000400

08007f4c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8007f4c:	b590      	push	{r4, r7, lr}
 8007f4e:	b08b      	sub	sp, #44	; 0x2c
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f54:	2414      	movs	r4, #20
 8007f56:	193b      	adds	r3, r7, r4
 8007f58:	0018      	movs	r0, r3
 8007f5a:	2314      	movs	r3, #20
 8007f5c:	001a      	movs	r2, r3
 8007f5e:	2100      	movs	r1, #0
 8007f60:	f006 fd41 	bl	800e9e6 <memset>
  if(htim_ic->Instance==TIM3)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a34      	ldr	r2, [pc, #208]	; (800803c <HAL_TIM_IC_MspInit+0xf0>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d161      	bne.n	8008032 <HAL_TIM_IC_MspInit+0xe6>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007f6e:	4b34      	ldr	r3, [pc, #208]	; (8008040 <HAL_TIM_IC_MspInit+0xf4>)
 8007f70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f72:	4b33      	ldr	r3, [pc, #204]	; (8008040 <HAL_TIM_IC_MspInit+0xf4>)
 8007f74:	2102      	movs	r1, #2
 8007f76:	430a      	orrs	r2, r1
 8007f78:	63da      	str	r2, [r3, #60]	; 0x3c
 8007f7a:	4b31      	ldr	r3, [pc, #196]	; (8008040 <HAL_TIM_IC_MspInit+0xf4>)
 8007f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f7e:	2202      	movs	r2, #2
 8007f80:	4013      	ands	r3, r2
 8007f82:	613b      	str	r3, [r7, #16]
 8007f84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f86:	4b2e      	ldr	r3, [pc, #184]	; (8008040 <HAL_TIM_IC_MspInit+0xf4>)
 8007f88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f8a:	4b2d      	ldr	r3, [pc, #180]	; (8008040 <HAL_TIM_IC_MspInit+0xf4>)
 8007f8c:	2101      	movs	r1, #1
 8007f8e:	430a      	orrs	r2, r1
 8007f90:	635a      	str	r2, [r3, #52]	; 0x34
 8007f92:	4b2b      	ldr	r3, [pc, #172]	; (8008040 <HAL_TIM_IC_MspInit+0xf4>)
 8007f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f96:	2201      	movs	r2, #1
 8007f98:	4013      	ands	r3, r2
 8007f9a:	60fb      	str	r3, [r7, #12]
 8007f9c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = RI_Pin;
 8007f9e:	0021      	movs	r1, r4
 8007fa0:	187b      	adds	r3, r7, r1
 8007fa2:	2240      	movs	r2, #64	; 0x40
 8007fa4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007fa6:	187b      	adds	r3, r7, r1
 8007fa8:	2202      	movs	r2, #2
 8007faa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007fac:	187b      	adds	r3, r7, r1
 8007fae:	2202      	movs	r2, #2
 8007fb0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007fb2:	187b      	adds	r3, r7, r1
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8007fb8:	187b      	adds	r3, r7, r1
 8007fba:	2201      	movs	r2, #1
 8007fbc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(RI_GPIO_Port, &GPIO_InitStruct);
 8007fbe:	187a      	adds	r2, r7, r1
 8007fc0:	23a0      	movs	r3, #160	; 0xa0
 8007fc2:	05db      	lsls	r3, r3, #23
 8007fc4:	0011      	movs	r1, r2
 8007fc6:	0018      	movs	r0, r3
 8007fc8:	f001 fd58 	bl	8009a7c <HAL_GPIO_Init>

    /* TIM3 DMA Init */
    /* TIM3_CH1 Init */
    hdma_tim3_ch1.Instance = DMA1_Channel1;
 8007fcc:	4b1d      	ldr	r3, [pc, #116]	; (8008044 <HAL_TIM_IC_MspInit+0xf8>)
 8007fce:	4a1e      	ldr	r2, [pc, #120]	; (8008048 <HAL_TIM_IC_MspInit+0xfc>)
 8007fd0:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8007fd2:	4b1c      	ldr	r3, [pc, #112]	; (8008044 <HAL_TIM_IC_MspInit+0xf8>)
 8007fd4:	2220      	movs	r2, #32
 8007fd6:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007fd8:	4b1a      	ldr	r3, [pc, #104]	; (8008044 <HAL_TIM_IC_MspInit+0xf8>)
 8007fda:	2200      	movs	r2, #0
 8007fdc:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007fde:	4b19      	ldr	r3, [pc, #100]	; (8008044 <HAL_TIM_IC_MspInit+0xf8>)
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8007fe4:	4b17      	ldr	r3, [pc, #92]	; (8008044 <HAL_TIM_IC_MspInit+0xf8>)
 8007fe6:	2280      	movs	r2, #128	; 0x80
 8007fe8:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007fea:	4b16      	ldr	r3, [pc, #88]	; (8008044 <HAL_TIM_IC_MspInit+0xf8>)
 8007fec:	2280      	movs	r2, #128	; 0x80
 8007fee:	0052      	lsls	r2, r2, #1
 8007ff0:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007ff2:	4b14      	ldr	r3, [pc, #80]	; (8008044 <HAL_TIM_IC_MspInit+0xf8>)
 8007ff4:	2280      	movs	r2, #128	; 0x80
 8007ff6:	00d2      	lsls	r2, r2, #3
 8007ff8:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_CIRCULAR;
 8007ffa:	4b12      	ldr	r3, [pc, #72]	; (8008044 <HAL_TIM_IC_MspInit+0xf8>)
 8007ffc:	2220      	movs	r2, #32
 8007ffe:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8008000:	4b10      	ldr	r3, [pc, #64]	; (8008044 <HAL_TIM_IC_MspInit+0xf8>)
 8008002:	2200      	movs	r2, #0
 8008004:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 8008006:	4b0f      	ldr	r3, [pc, #60]	; (8008044 <HAL_TIM_IC_MspInit+0xf8>)
 8008008:	0018      	movs	r0, r3
 800800a:	f001 fa19 	bl	8009440 <HAL_DMA_Init>
 800800e:	1e03      	subs	r3, r0, #0
 8008010:	d001      	beq.n	8008016 <HAL_TIM_IC_MspInit+0xca>
    {
      Error_Handler();
 8008012:	f7ff ff1d 	bl	8007e50 <Error_Handler>
    }

    __HAL_LINKDMA(htim_ic,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	4a0a      	ldr	r2, [pc, #40]	; (8008044 <HAL_TIM_IC_MspInit+0xf8>)
 800801a:	625a      	str	r2, [r3, #36]	; 0x24
 800801c:	4b09      	ldr	r3, [pc, #36]	; (8008044 <HAL_TIM_IC_MspInit+0xf8>)
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	629a      	str	r2, [r3, #40]	; 0x28

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 8008022:	2200      	movs	r2, #0
 8008024:	2103      	movs	r1, #3
 8008026:	2010      	movs	r0, #16
 8008028:	f001 f9d8 	bl	80093dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800802c:	2010      	movs	r0, #16
 800802e:	f001 f9ea 	bl	8009406 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8008032:	46c0      	nop			; (mov r8, r8)
 8008034:	46bd      	mov	sp, r7
 8008036:	b00b      	add	sp, #44	; 0x2c
 8008038:	bd90      	pop	{r4, r7, pc}
 800803a:	46c0      	nop			; (mov r8, r8)
 800803c:	40000400 	.word	0x40000400
 8008040:	40021000 	.word	0x40021000
 8008044:	20000454 	.word	0x20000454
 8008048:	40020008 	.word	0x40020008

0800804c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b086      	sub	sp, #24
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a2a      	ldr	r2, [pc, #168]	; (8008104 <HAL_TIM_Base_MspInit+0xb8>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d116      	bne.n	800808c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800805e:	4b2a      	ldr	r3, [pc, #168]	; (8008108 <HAL_TIM_Base_MspInit+0xbc>)
 8008060:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008062:	4b29      	ldr	r3, [pc, #164]	; (8008108 <HAL_TIM_Base_MspInit+0xbc>)
 8008064:	2180      	movs	r1, #128	; 0x80
 8008066:	0209      	lsls	r1, r1, #8
 8008068:	430a      	orrs	r2, r1
 800806a:	641a      	str	r2, [r3, #64]	; 0x40
 800806c:	4b26      	ldr	r3, [pc, #152]	; (8008108 <HAL_TIM_Base_MspInit+0xbc>)
 800806e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008070:	2380      	movs	r3, #128	; 0x80
 8008072:	021b      	lsls	r3, r3, #8
 8008074:	4013      	ands	r3, r2
 8008076:	617b      	str	r3, [r7, #20]
 8008078:	697b      	ldr	r3, [r7, #20]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 3, 0);
 800807a:	2200      	movs	r2, #0
 800807c:	2103      	movs	r1, #3
 800807e:	2013      	movs	r0, #19
 8008080:	f001 f9ac 	bl	80093dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8008084:	2013      	movs	r0, #19
 8008086:	f001 f9be 	bl	8009406 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800808a:	e036      	b.n	80080fa <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM16)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a1e      	ldr	r2, [pc, #120]	; (800810c <HAL_TIM_Base_MspInit+0xc0>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d116      	bne.n	80080c4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8008096:	4b1c      	ldr	r3, [pc, #112]	; (8008108 <HAL_TIM_Base_MspInit+0xbc>)
 8008098:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800809a:	4b1b      	ldr	r3, [pc, #108]	; (8008108 <HAL_TIM_Base_MspInit+0xbc>)
 800809c:	2180      	movs	r1, #128	; 0x80
 800809e:	0289      	lsls	r1, r1, #10
 80080a0:	430a      	orrs	r2, r1
 80080a2:	641a      	str	r2, [r3, #64]	; 0x40
 80080a4:	4b18      	ldr	r3, [pc, #96]	; (8008108 <HAL_TIM_Base_MspInit+0xbc>)
 80080a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80080a8:	2380      	movs	r3, #128	; 0x80
 80080aa:	029b      	lsls	r3, r3, #10
 80080ac:	4013      	ands	r3, r2
 80080ae:	613b      	str	r3, [r7, #16]
 80080b0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 3, 0);
 80080b2:	2200      	movs	r2, #0
 80080b4:	2103      	movs	r1, #3
 80080b6:	2015      	movs	r0, #21
 80080b8:	f001 f990 	bl	80093dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80080bc:	2015      	movs	r0, #21
 80080be:	f001 f9a2 	bl	8009406 <HAL_NVIC_EnableIRQ>
}
 80080c2:	e01a      	b.n	80080fa <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM17)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a11      	ldr	r2, [pc, #68]	; (8008110 <HAL_TIM_Base_MspInit+0xc4>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d115      	bne.n	80080fa <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80080ce:	4b0e      	ldr	r3, [pc, #56]	; (8008108 <HAL_TIM_Base_MspInit+0xbc>)
 80080d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80080d2:	4b0d      	ldr	r3, [pc, #52]	; (8008108 <HAL_TIM_Base_MspInit+0xbc>)
 80080d4:	2180      	movs	r1, #128	; 0x80
 80080d6:	02c9      	lsls	r1, r1, #11
 80080d8:	430a      	orrs	r2, r1
 80080da:	641a      	str	r2, [r3, #64]	; 0x40
 80080dc:	4b0a      	ldr	r3, [pc, #40]	; (8008108 <HAL_TIM_Base_MspInit+0xbc>)
 80080de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80080e0:	2380      	movs	r3, #128	; 0x80
 80080e2:	02db      	lsls	r3, r3, #11
 80080e4:	4013      	ands	r3, r2
 80080e6:	60fb      	str	r3, [r7, #12]
 80080e8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 3, 0);
 80080ea:	2200      	movs	r2, #0
 80080ec:	2103      	movs	r1, #3
 80080ee:	2016      	movs	r0, #22
 80080f0:	f001 f974 	bl	80093dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80080f4:	2016      	movs	r0, #22
 80080f6:	f001 f986 	bl	8009406 <HAL_NVIC_EnableIRQ>
}
 80080fa:	46c0      	nop			; (mov r8, r8)
 80080fc:	46bd      	mov	sp, r7
 80080fe:	b006      	add	sp, #24
 8008100:	bd80      	pop	{r7, pc}
 8008102:	46c0      	nop			; (mov r8, r8)
 8008104:	40002000 	.word	0x40002000
 8008108:	40021000 	.word	0x40021000
 800810c:	40014400 	.word	0x40014400
 8008110:	40014800 	.word	0x40014800

08008114 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008114:	b590      	push	{r4, r7, lr}
 8008116:	b099      	sub	sp, #100	; 0x64
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800811c:	234c      	movs	r3, #76	; 0x4c
 800811e:	18fb      	adds	r3, r7, r3
 8008120:	0018      	movs	r0, r3
 8008122:	2314      	movs	r3, #20
 8008124:	001a      	movs	r2, r3
 8008126:	2100      	movs	r1, #0
 8008128:	f006 fc5d 	bl	800e9e6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800812c:	2430      	movs	r4, #48	; 0x30
 800812e:	193b      	adds	r3, r7, r4
 8008130:	0018      	movs	r0, r3
 8008132:	231c      	movs	r3, #28
 8008134:	001a      	movs	r2, r3
 8008136:	2100      	movs	r1, #0
 8008138:	f006 fc55 	bl	800e9e6 <memset>
  if(huart->Instance==USART1)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a9e      	ldr	r2, [pc, #632]	; (80083bc <HAL_UART_MspInit+0x2a8>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d148      	bne.n	80081d8 <HAL_UART_MspInit+0xc4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8008146:	193b      	adds	r3, r7, r4
 8008148:	2201      	movs	r2, #1
 800814a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800814c:	193b      	adds	r3, r7, r4
 800814e:	2200      	movs	r2, #0
 8008150:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008152:	193b      	adds	r3, r7, r4
 8008154:	0018      	movs	r0, r3
 8008156:	f002 fb33 	bl	800a7c0 <HAL_RCCEx_PeriphCLKConfig>
 800815a:	1e03      	subs	r3, r0, #0
 800815c:	d001      	beq.n	8008162 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800815e:	f7ff fe77 	bl	8007e50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008162:	4b97      	ldr	r3, [pc, #604]	; (80083c0 <HAL_UART_MspInit+0x2ac>)
 8008164:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008166:	4b96      	ldr	r3, [pc, #600]	; (80083c0 <HAL_UART_MspInit+0x2ac>)
 8008168:	2180      	movs	r1, #128	; 0x80
 800816a:	01c9      	lsls	r1, r1, #7
 800816c:	430a      	orrs	r2, r1
 800816e:	641a      	str	r2, [r3, #64]	; 0x40
 8008170:	4b93      	ldr	r3, [pc, #588]	; (80083c0 <HAL_UART_MspInit+0x2ac>)
 8008172:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008174:	2380      	movs	r3, #128	; 0x80
 8008176:	01db      	lsls	r3, r3, #7
 8008178:	4013      	ands	r3, r2
 800817a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800817c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800817e:	4b90      	ldr	r3, [pc, #576]	; (80083c0 <HAL_UART_MspInit+0x2ac>)
 8008180:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008182:	4b8f      	ldr	r3, [pc, #572]	; (80083c0 <HAL_UART_MspInit+0x2ac>)
 8008184:	2101      	movs	r1, #1
 8008186:	430a      	orrs	r2, r1
 8008188:	635a      	str	r2, [r3, #52]	; 0x34
 800818a:	4b8d      	ldr	r3, [pc, #564]	; (80083c0 <HAL_UART_MspInit+0x2ac>)
 800818c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800818e:	2201      	movs	r2, #1
 8008190:	4013      	ands	r3, r2
 8008192:	62bb      	str	r3, [r7, #40]	; 0x28
 8008194:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8008196:	214c      	movs	r1, #76	; 0x4c
 8008198:	187b      	adds	r3, r7, r1
 800819a:	22c0      	movs	r2, #192	; 0xc0
 800819c:	00d2      	lsls	r2, r2, #3
 800819e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081a0:	187b      	adds	r3, r7, r1
 80081a2:	2202      	movs	r2, #2
 80081a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081a6:	187b      	adds	r3, r7, r1
 80081a8:	2200      	movs	r2, #0
 80081aa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80081ac:	187b      	adds	r3, r7, r1
 80081ae:	2200      	movs	r2, #0
 80081b0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80081b2:	187b      	adds	r3, r7, r1
 80081b4:	2201      	movs	r2, #1
 80081b6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80081b8:	187a      	adds	r2, r7, r1
 80081ba:	23a0      	movs	r3, #160	; 0xa0
 80081bc:	05db      	lsls	r3, r3, #23
 80081be:	0011      	movs	r1, r2
 80081c0:	0018      	movs	r0, r3
 80081c2:	f001 fc5b 	bl	8009a7c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 80081c6:	2200      	movs	r2, #0
 80081c8:	2103      	movs	r1, #3
 80081ca:	201b      	movs	r0, #27
 80081cc:	f001 f906 	bl	80093dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80081d0:	201b      	movs	r0, #27
 80081d2:	f001 f918 	bl	8009406 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }

}
 80081d6:	e0ec      	b.n	80083b2 <HAL_UART_MspInit+0x29e>
  else if(huart->Instance==USART2)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a79      	ldr	r2, [pc, #484]	; (80083c4 <HAL_UART_MspInit+0x2b0>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d148      	bne.n	8008274 <HAL_UART_MspInit+0x160>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80081e2:	2130      	movs	r1, #48	; 0x30
 80081e4:	187b      	adds	r3, r7, r1
 80081e6:	2202      	movs	r2, #2
 80081e8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80081ea:	187b      	adds	r3, r7, r1
 80081ec:	2200      	movs	r2, #0
 80081ee:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80081f0:	187b      	adds	r3, r7, r1
 80081f2:	0018      	movs	r0, r3
 80081f4:	f002 fae4 	bl	800a7c0 <HAL_RCCEx_PeriphCLKConfig>
 80081f8:	1e03      	subs	r3, r0, #0
 80081fa:	d001      	beq.n	8008200 <HAL_UART_MspInit+0xec>
      Error_Handler();
 80081fc:	f7ff fe28 	bl	8007e50 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8008200:	4b6f      	ldr	r3, [pc, #444]	; (80083c0 <HAL_UART_MspInit+0x2ac>)
 8008202:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008204:	4b6e      	ldr	r3, [pc, #440]	; (80083c0 <HAL_UART_MspInit+0x2ac>)
 8008206:	2180      	movs	r1, #128	; 0x80
 8008208:	0289      	lsls	r1, r1, #10
 800820a:	430a      	orrs	r2, r1
 800820c:	63da      	str	r2, [r3, #60]	; 0x3c
 800820e:	4b6c      	ldr	r3, [pc, #432]	; (80083c0 <HAL_UART_MspInit+0x2ac>)
 8008210:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008212:	2380      	movs	r3, #128	; 0x80
 8008214:	029b      	lsls	r3, r3, #10
 8008216:	4013      	ands	r3, r2
 8008218:	627b      	str	r3, [r7, #36]	; 0x24
 800821a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800821c:	4b68      	ldr	r3, [pc, #416]	; (80083c0 <HAL_UART_MspInit+0x2ac>)
 800821e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008220:	4b67      	ldr	r3, [pc, #412]	; (80083c0 <HAL_UART_MspInit+0x2ac>)
 8008222:	2101      	movs	r1, #1
 8008224:	430a      	orrs	r2, r1
 8008226:	635a      	str	r2, [r3, #52]	; 0x34
 8008228:	4b65      	ldr	r3, [pc, #404]	; (80083c0 <HAL_UART_MspInit+0x2ac>)
 800822a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800822c:	2201      	movs	r2, #1
 800822e:	4013      	ands	r3, r2
 8008230:	623b      	str	r3, [r7, #32]
 8008232:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GNS_TX_Pin|GNS_RX_Pin;
 8008234:	214c      	movs	r1, #76	; 0x4c
 8008236:	187b      	adds	r3, r7, r1
 8008238:	220c      	movs	r2, #12
 800823a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800823c:	187b      	adds	r3, r7, r1
 800823e:	2202      	movs	r2, #2
 8008240:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008242:	187b      	adds	r3, r7, r1
 8008244:	2200      	movs	r2, #0
 8008246:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008248:	187b      	adds	r3, r7, r1
 800824a:	2200      	movs	r2, #0
 800824c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800824e:	187b      	adds	r3, r7, r1
 8008250:	2201      	movs	r2, #1
 8008252:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008254:	187a      	adds	r2, r7, r1
 8008256:	23a0      	movs	r3, #160	; 0xa0
 8008258:	05db      	lsls	r3, r3, #23
 800825a:	0011      	movs	r1, r2
 800825c:	0018      	movs	r0, r3
 800825e:	f001 fc0d 	bl	8009a7c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8008262:	2200      	movs	r2, #0
 8008264:	2103      	movs	r1, #3
 8008266:	201c      	movs	r0, #28
 8008268:	f001 f8b8 	bl	80093dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800826c:	201c      	movs	r0, #28
 800826e:	f001 f8ca 	bl	8009406 <HAL_NVIC_EnableIRQ>
}
 8008272:	e09e      	b.n	80083b2 <HAL_UART_MspInit+0x29e>
  else if(huart->Instance==USART3)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a53      	ldr	r2, [pc, #332]	; (80083c8 <HAL_UART_MspInit+0x2b4>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d15b      	bne.n	8008336 <HAL_UART_MspInit+0x222>
    __HAL_RCC_USART3_CLK_ENABLE();
 800827e:	4b50      	ldr	r3, [pc, #320]	; (80083c0 <HAL_UART_MspInit+0x2ac>)
 8008280:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008282:	4b4f      	ldr	r3, [pc, #316]	; (80083c0 <HAL_UART_MspInit+0x2ac>)
 8008284:	2180      	movs	r1, #128	; 0x80
 8008286:	02c9      	lsls	r1, r1, #11
 8008288:	430a      	orrs	r2, r1
 800828a:	63da      	str	r2, [r3, #60]	; 0x3c
 800828c:	4b4c      	ldr	r3, [pc, #304]	; (80083c0 <HAL_UART_MspInit+0x2ac>)
 800828e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008290:	2380      	movs	r3, #128	; 0x80
 8008292:	02db      	lsls	r3, r3, #11
 8008294:	4013      	ands	r3, r2
 8008296:	61fb      	str	r3, [r7, #28]
 8008298:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800829a:	4b49      	ldr	r3, [pc, #292]	; (80083c0 <HAL_UART_MspInit+0x2ac>)
 800829c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800829e:	4b48      	ldr	r3, [pc, #288]	; (80083c0 <HAL_UART_MspInit+0x2ac>)
 80082a0:	2101      	movs	r1, #1
 80082a2:	430a      	orrs	r2, r1
 80082a4:	635a      	str	r2, [r3, #52]	; 0x34
 80082a6:	4b46      	ldr	r3, [pc, #280]	; (80083c0 <HAL_UART_MspInit+0x2ac>)
 80082a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082aa:	2201      	movs	r2, #1
 80082ac:	4013      	ands	r3, r2
 80082ae:	61bb      	str	r3, [r7, #24]
 80082b0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80082b2:	4b43      	ldr	r3, [pc, #268]	; (80083c0 <HAL_UART_MspInit+0x2ac>)
 80082b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082b6:	4b42      	ldr	r3, [pc, #264]	; (80083c0 <HAL_UART_MspInit+0x2ac>)
 80082b8:	2102      	movs	r1, #2
 80082ba:	430a      	orrs	r2, r1
 80082bc:	635a      	str	r2, [r3, #52]	; 0x34
 80082be:	4b40      	ldr	r3, [pc, #256]	; (80083c0 <HAL_UART_MspInit+0x2ac>)
 80082c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082c2:	2202      	movs	r2, #2
 80082c4:	4013      	ands	r3, r2
 80082c6:	617b      	str	r3, [r7, #20]
 80082c8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80082ca:	244c      	movs	r4, #76	; 0x4c
 80082cc:	193b      	adds	r3, r7, r4
 80082ce:	2220      	movs	r2, #32
 80082d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082d2:	193b      	adds	r3, r7, r4
 80082d4:	2202      	movs	r2, #2
 80082d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082d8:	193b      	adds	r3, r7, r4
 80082da:	2200      	movs	r2, #0
 80082dc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082de:	193b      	adds	r3, r7, r4
 80082e0:	2200      	movs	r2, #0
 80082e2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 80082e4:	193b      	adds	r3, r7, r4
 80082e6:	2204      	movs	r2, #4
 80082e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082ea:	193a      	adds	r2, r7, r4
 80082ec:	23a0      	movs	r3, #160	; 0xa0
 80082ee:	05db      	lsls	r3, r3, #23
 80082f0:	0011      	movs	r1, r2
 80082f2:	0018      	movs	r0, r3
 80082f4:	f001 fbc2 	bl	8009a7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80082f8:	0021      	movs	r1, r4
 80082fa:	187b      	adds	r3, r7, r1
 80082fc:	2201      	movs	r2, #1
 80082fe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008300:	187b      	adds	r3, r7, r1
 8008302:	2202      	movs	r2, #2
 8008304:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008306:	187b      	adds	r3, r7, r1
 8008308:	2200      	movs	r2, #0
 800830a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800830c:	187b      	adds	r3, r7, r1
 800830e:	2200      	movs	r2, #0
 8008310:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8008312:	187b      	adds	r3, r7, r1
 8008314:	2204      	movs	r2, #4
 8008316:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008318:	187b      	adds	r3, r7, r1
 800831a:	4a2c      	ldr	r2, [pc, #176]	; (80083cc <HAL_UART_MspInit+0x2b8>)
 800831c:	0019      	movs	r1, r3
 800831e:	0010      	movs	r0, r2
 8008320:	f001 fbac 	bl	8009a7c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 3, 0);
 8008324:	2200      	movs	r2, #0
 8008326:	2103      	movs	r1, #3
 8008328:	201d      	movs	r0, #29
 800832a:	f001 f857 	bl	80093dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 800832e:	201d      	movs	r0, #29
 8008330:	f001 f869 	bl	8009406 <HAL_NVIC_EnableIRQ>
}
 8008334:	e03d      	b.n	80083b2 <HAL_UART_MspInit+0x29e>
  else if(huart->Instance==USART4)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a25      	ldr	r2, [pc, #148]	; (80083d0 <HAL_UART_MspInit+0x2bc>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d138      	bne.n	80083b2 <HAL_UART_MspInit+0x29e>
    __HAL_RCC_USART4_CLK_ENABLE();
 8008340:	4b1f      	ldr	r3, [pc, #124]	; (80083c0 <HAL_UART_MspInit+0x2ac>)
 8008342:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008344:	4b1e      	ldr	r3, [pc, #120]	; (80083c0 <HAL_UART_MspInit+0x2ac>)
 8008346:	2180      	movs	r1, #128	; 0x80
 8008348:	0309      	lsls	r1, r1, #12
 800834a:	430a      	orrs	r2, r1
 800834c:	63da      	str	r2, [r3, #60]	; 0x3c
 800834e:	4b1c      	ldr	r3, [pc, #112]	; (80083c0 <HAL_UART_MspInit+0x2ac>)
 8008350:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008352:	2380      	movs	r3, #128	; 0x80
 8008354:	031b      	lsls	r3, r3, #12
 8008356:	4013      	ands	r3, r2
 8008358:	613b      	str	r3, [r7, #16]
 800835a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800835c:	4b18      	ldr	r3, [pc, #96]	; (80083c0 <HAL_UART_MspInit+0x2ac>)
 800835e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008360:	4b17      	ldr	r3, [pc, #92]	; (80083c0 <HAL_UART_MspInit+0x2ac>)
 8008362:	2101      	movs	r1, #1
 8008364:	430a      	orrs	r2, r1
 8008366:	635a      	str	r2, [r3, #52]	; 0x34
 8008368:	4b15      	ldr	r3, [pc, #84]	; (80083c0 <HAL_UART_MspInit+0x2ac>)
 800836a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800836c:	2201      	movs	r2, #1
 800836e:	4013      	ands	r3, r2
 8008370:	60fb      	str	r3, [r7, #12]
 8008372:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DEBUG_TX_Pin|DEBUG_RX_Pin;
 8008374:	214c      	movs	r1, #76	; 0x4c
 8008376:	187b      	adds	r3, r7, r1
 8008378:	2203      	movs	r2, #3
 800837a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800837c:	187b      	adds	r3, r7, r1
 800837e:	2202      	movs	r2, #2
 8008380:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008382:	187b      	adds	r3, r7, r1
 8008384:	2200      	movs	r2, #0
 8008386:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008388:	187b      	adds	r3, r7, r1
 800838a:	2200      	movs	r2, #0
 800838c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 800838e:	187b      	adds	r3, r7, r1
 8008390:	2204      	movs	r2, #4
 8008392:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008394:	187a      	adds	r2, r7, r1
 8008396:	23a0      	movs	r3, #160	; 0xa0
 8008398:	05db      	lsls	r3, r3, #23
 800839a:	0011      	movs	r1, r2
 800839c:	0018      	movs	r0, r3
 800839e:	f001 fb6d 	bl	8009a7c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 3, 0);
 80083a2:	2200      	movs	r2, #0
 80083a4:	2103      	movs	r1, #3
 80083a6:	201d      	movs	r0, #29
 80083a8:	f001 f818 	bl	80093dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 80083ac:	201d      	movs	r0, #29
 80083ae:	f001 f82a 	bl	8009406 <HAL_NVIC_EnableIRQ>
}
 80083b2:	46c0      	nop			; (mov r8, r8)
 80083b4:	46bd      	mov	sp, r7
 80083b6:	b019      	add	sp, #100	; 0x64
 80083b8:	bd90      	pop	{r4, r7, pc}
 80083ba:	46c0      	nop			; (mov r8, r8)
 80083bc:	40013800 	.word	0x40013800
 80083c0:	40021000 	.word	0x40021000
 80083c4:	40004400 	.word	0x40004400
 80083c8:	40004800 	.word	0x40004800
 80083cc:	50000400 	.word	0x50000400
 80083d0:	40004c00 	.word	0x40004c00

080083d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80083d8:	e7fe      	b.n	80083d8 <NMI_Handler+0x4>

080083da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80083da:	b580      	push	{r7, lr}
 80083dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80083de:	e7fe      	b.n	80083de <HardFault_Handler+0x4>

080083e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80083e4:	46c0      	nop			; (mov r8, r8)
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}

080083ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80083ea:	b580      	push	{r7, lr}
 80083ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80083ee:	46c0      	nop			; (mov r8, r8)
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80083f8:	f000 ff04 	bl	8009204 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80083fc:	46c0      	nop			; (mov r8, r8)
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
	...

08008404 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8008408:	4b03      	ldr	r3, [pc, #12]	; (8008418 <DMA1_Channel1_IRQHandler+0x14>)
 800840a:	0018      	movs	r0, r3
 800840c:	f001 f9f4 	bl	80097f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8008410:	46c0      	nop			; (mov r8, r8)
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
 8008416:	46c0      	nop			; (mov r8, r8)
 8008418:	20000454 	.word	0x20000454

0800841c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8008420:	4b03      	ldr	r3, [pc, #12]	; (8008430 <TIM3_IRQHandler+0x14>)
 8008422:	0018      	movs	r0, r3
 8008424:	f003 fe12 	bl	800c04c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8008428:	46c0      	nop			; (mov r8, r8)
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
 800842e:	46c0      	nop			; (mov r8, r8)
 8008430:	20000324 	.word	0x20000324

08008434 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8008438:	4b03      	ldr	r3, [pc, #12]	; (8008448 <TIM14_IRQHandler+0x14>)
 800843a:	0018      	movs	r0, r3
 800843c:	f003 fe06 	bl	800c04c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8008440:	46c0      	nop			; (mov r8, r8)
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}
 8008446:	46c0      	nop			; (mov r8, r8)
 8008448:	20000370 	.word	0x20000370

0800844c <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8008450:	4b03      	ldr	r3, [pc, #12]	; (8008460 <TIM16_IRQHandler+0x14>)
 8008452:	0018      	movs	r0, r3
 8008454:	f003 fdfa 	bl	800c04c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8008458:	46c0      	nop			; (mov r8, r8)
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
 800845e:	46c0      	nop			; (mov r8, r8)
 8008460:	200003bc 	.word	0x200003bc

08008464 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8008468:	4b03      	ldr	r3, [pc, #12]	; (8008478 <TIM17_IRQHandler+0x14>)
 800846a:	0018      	movs	r0, r3
 800846c:	f003 fdee 	bl	800c04c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8008470:	46c0      	nop			; (mov r8, r8)
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}
 8008476:	46c0      	nop			; (mov r8, r8)
 8008478:	20000408 	.word	0x20000408

0800847c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8008480:	4b03      	ldr	r3, [pc, #12]	; (8008490 <SPI1_IRQHandler+0x14>)
 8008482:	0018      	movs	r0, r3
 8008484:	f002 fffe 	bl	800b484 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8008488:	46c0      	nop			; (mov r8, r8)
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
 800848e:	46c0      	nop			; (mov r8, r8)
 8008490:	200002c0 	.word	0x200002c0

08008494 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008498:	4b03      	ldr	r3, [pc, #12]	; (80084a8 <USART1_IRQHandler+0x14>)
 800849a:	0018      	movs	r0, r3
 800849c:	f004 fc3c 	bl	800cd18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80084a0:	46c0      	nop			; (mov r8, r8)
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
 80084a6:	46c0      	nop			; (mov r8, r8)
 80084a8:	200004b0 	.word	0x200004b0

080084ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80084b0:	4b03      	ldr	r3, [pc, #12]	; (80084c0 <USART2_IRQHandler+0x14>)
 80084b2:	0018      	movs	r0, r3
 80084b4:	f004 fc30 	bl	800cd18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80084b8:	46c0      	nop			; (mov r8, r8)
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
 80084be:	46c0      	nop			; (mov r8, r8)
 80084c0:	20000544 	.word	0x20000544

080084c4 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 interrupts.
  */
void USART3_4_IRQHandler(void)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80084c8:	4b05      	ldr	r3, [pc, #20]	; (80084e0 <USART3_4_IRQHandler+0x1c>)
 80084ca:	0018      	movs	r0, r3
 80084cc:	f004 fc24 	bl	800cd18 <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart4);
 80084d0:	4b04      	ldr	r3, [pc, #16]	; (80084e4 <USART3_4_IRQHandler+0x20>)
 80084d2:	0018      	movs	r0, r3
 80084d4:	f004 fc20 	bl	800cd18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 80084d8:	46c0      	nop			; (mov r8, r8)
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
 80084de:	46c0      	nop			; (mov r8, r8)
 80084e0:	200005d8 	.word	0x200005d8
 80084e4:	2000066c 	.word	0x2000066c

080084e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	af00      	add	r7, sp, #0
	return 1;
 80084ec:	2301      	movs	r3, #1
}
 80084ee:	0018      	movs	r0, r3
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <_kill>:

int _kill(int pid, int sig)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b082      	sub	sp, #8
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80084fe:	f006 fa3f 	bl	800e980 <__errno>
 8008502:	0003      	movs	r3, r0
 8008504:	2216      	movs	r2, #22
 8008506:	601a      	str	r2, [r3, #0]
	return -1;
 8008508:	2301      	movs	r3, #1
 800850a:	425b      	negs	r3, r3
}
 800850c:	0018      	movs	r0, r3
 800850e:	46bd      	mov	sp, r7
 8008510:	b002      	add	sp, #8
 8008512:	bd80      	pop	{r7, pc}

08008514 <_exit>:

void _exit (int status)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b082      	sub	sp, #8
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800851c:	2301      	movs	r3, #1
 800851e:	425a      	negs	r2, r3
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	0011      	movs	r1, r2
 8008524:	0018      	movs	r0, r3
 8008526:	f7ff ffe5 	bl	80084f4 <_kill>
	while (1) {}		/* Make sure we hang here */
 800852a:	e7fe      	b.n	800852a <_exit+0x16>

0800852c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b086      	sub	sp, #24
 8008530:	af00      	add	r7, sp, #0
 8008532:	60f8      	str	r0, [r7, #12]
 8008534:	60b9      	str	r1, [r7, #8]
 8008536:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008538:	2300      	movs	r3, #0
 800853a:	617b      	str	r3, [r7, #20]
 800853c:	e00a      	b.n	8008554 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800853e:	e000      	b.n	8008542 <_read+0x16>
 8008540:	bf00      	nop
 8008542:	0001      	movs	r1, r0
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	1c5a      	adds	r2, r3, #1
 8008548:	60ba      	str	r2, [r7, #8]
 800854a:	b2ca      	uxtb	r2, r1
 800854c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	3301      	adds	r3, #1
 8008552:	617b      	str	r3, [r7, #20]
 8008554:	697a      	ldr	r2, [r7, #20]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	429a      	cmp	r2, r3
 800855a:	dbf0      	blt.n	800853e <_read+0x12>
	}

return len;
 800855c:	687b      	ldr	r3, [r7, #4]
}
 800855e:	0018      	movs	r0, r3
 8008560:	46bd      	mov	sp, r7
 8008562:	b006      	add	sp, #24
 8008564:	bd80      	pop	{r7, pc}

08008566 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008566:	b580      	push	{r7, lr}
 8008568:	b086      	sub	sp, #24
 800856a:	af00      	add	r7, sp, #0
 800856c:	60f8      	str	r0, [r7, #12]
 800856e:	60b9      	str	r1, [r7, #8]
 8008570:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008572:	2300      	movs	r3, #0
 8008574:	617b      	str	r3, [r7, #20]
 8008576:	e009      	b.n	800858c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	1c5a      	adds	r2, r3, #1
 800857c:	60ba      	str	r2, [r7, #8]
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	0018      	movs	r0, r3
 8008582:	e000      	b.n	8008586 <_write+0x20>
 8008584:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	3301      	adds	r3, #1
 800858a:	617b      	str	r3, [r7, #20]
 800858c:	697a      	ldr	r2, [r7, #20]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	429a      	cmp	r2, r3
 8008592:	dbf1      	blt.n	8008578 <_write+0x12>
	}
	return len;
 8008594:	687b      	ldr	r3, [r7, #4]
}
 8008596:	0018      	movs	r0, r3
 8008598:	46bd      	mov	sp, r7
 800859a:	b006      	add	sp, #24
 800859c:	bd80      	pop	{r7, pc}

0800859e <_close>:

int _close(int file)
{
 800859e:	b580      	push	{r7, lr}
 80085a0:	b082      	sub	sp, #8
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	6078      	str	r0, [r7, #4]
	return -1;
 80085a6:	2301      	movs	r3, #1
 80085a8:	425b      	negs	r3, r3
}
 80085aa:	0018      	movs	r0, r3
 80085ac:	46bd      	mov	sp, r7
 80085ae:	b002      	add	sp, #8
 80085b0:	bd80      	pop	{r7, pc}

080085b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80085b2:	b580      	push	{r7, lr}
 80085b4:	b082      	sub	sp, #8
 80085b6:	af00      	add	r7, sp, #0
 80085b8:	6078      	str	r0, [r7, #4]
 80085ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	2280      	movs	r2, #128	; 0x80
 80085c0:	0192      	lsls	r2, r2, #6
 80085c2:	605a      	str	r2, [r3, #4]
	return 0;
 80085c4:	2300      	movs	r3, #0
}
 80085c6:	0018      	movs	r0, r3
 80085c8:	46bd      	mov	sp, r7
 80085ca:	b002      	add	sp, #8
 80085cc:	bd80      	pop	{r7, pc}

080085ce <_isatty>:

int _isatty(int file)
{
 80085ce:	b580      	push	{r7, lr}
 80085d0:	b082      	sub	sp, #8
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6078      	str	r0, [r7, #4]
	return 1;
 80085d6:	2301      	movs	r3, #1
}
 80085d8:	0018      	movs	r0, r3
 80085da:	46bd      	mov	sp, r7
 80085dc:	b002      	add	sp, #8
 80085de:	bd80      	pop	{r7, pc}

080085e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b084      	sub	sp, #16
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	60f8      	str	r0, [r7, #12]
 80085e8:	60b9      	str	r1, [r7, #8]
 80085ea:	607a      	str	r2, [r7, #4]
	return 0;
 80085ec:	2300      	movs	r3, #0
}
 80085ee:	0018      	movs	r0, r3
 80085f0:	46bd      	mov	sp, r7
 80085f2:	b004      	add	sp, #16
 80085f4:	bd80      	pop	{r7, pc}
	...

080085f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b086      	sub	sp, #24
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008600:	4a14      	ldr	r2, [pc, #80]	; (8008654 <_sbrk+0x5c>)
 8008602:	4b15      	ldr	r3, [pc, #84]	; (8008658 <_sbrk+0x60>)
 8008604:	1ad3      	subs	r3, r2, r3
 8008606:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800860c:	4b13      	ldr	r3, [pc, #76]	; (800865c <_sbrk+0x64>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d102      	bne.n	800861a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008614:	4b11      	ldr	r3, [pc, #68]	; (800865c <_sbrk+0x64>)
 8008616:	4a12      	ldr	r2, [pc, #72]	; (8008660 <_sbrk+0x68>)
 8008618:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800861a:	4b10      	ldr	r3, [pc, #64]	; (800865c <_sbrk+0x64>)
 800861c:	681a      	ldr	r2, [r3, #0]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	18d3      	adds	r3, r2, r3
 8008622:	693a      	ldr	r2, [r7, #16]
 8008624:	429a      	cmp	r2, r3
 8008626:	d207      	bcs.n	8008638 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008628:	f006 f9aa 	bl	800e980 <__errno>
 800862c:	0003      	movs	r3, r0
 800862e:	220c      	movs	r2, #12
 8008630:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008632:	2301      	movs	r3, #1
 8008634:	425b      	negs	r3, r3
 8008636:	e009      	b.n	800864c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008638:	4b08      	ldr	r3, [pc, #32]	; (800865c <_sbrk+0x64>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800863e:	4b07      	ldr	r3, [pc, #28]	; (800865c <_sbrk+0x64>)
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	18d2      	adds	r2, r2, r3
 8008646:	4b05      	ldr	r3, [pc, #20]	; (800865c <_sbrk+0x64>)
 8008648:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800864a:	68fb      	ldr	r3, [r7, #12]
}
 800864c:	0018      	movs	r0, r3
 800864e:	46bd      	mov	sp, r7
 8008650:	b006      	add	sp, #24
 8008652:	bd80      	pop	{r7, pc}
 8008654:	20009000 	.word	0x20009000
 8008658:	00000400 	.word	0x00000400
 800865c:	20000ce8 	.word	0x20000ce8
 8008660:	20000d28 	.word	0x20000d28

08008664 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008668:	46c0      	nop			; (mov r8, r8)
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}
	...

08008670 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8008670:	b590      	push	{r4, r7, lr}
 8008672:	b087      	sub	sp, #28
 8008674:	af02      	add	r7, sp, #8
 8008676:	0002      	movs	r2, r0
 8008678:	1dfb      	adds	r3, r7, #7
 800867a:	701a      	strb	r2, [r3, #0]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 800867c:	240f      	movs	r4, #15
 800867e:	193a      	adds	r2, r7, r4
 8008680:	1df9      	adds	r1, r7, #7
 8008682:	4806      	ldr	r0, [pc, #24]	; (800869c <W25qxx_Spi+0x2c>)
 8008684:	2364      	movs	r3, #100	; 0x64
 8008686:	9300      	str	r3, [sp, #0]
 8008688:	2301      	movs	r3, #1
 800868a:	f002 fd29 	bl	800b0e0 <HAL_SPI_TransmitReceive>
	return ret;
 800868e:	193b      	adds	r3, r7, r4
 8008690:	781b      	ldrb	r3, [r3, #0]
}
 8008692:	0018      	movs	r0, r3
 8008694:	46bd      	mov	sp, r7
 8008696:	b005      	add	sp, #20
 8008698:	bd90      	pop	{r4, r7, pc}
 800869a:	46c0      	nop			; (mov r8, r8)
 800869c:	200002c0 	.word	0x200002c0

080086a0 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 80086a6:	2300      	movs	r3, #0
 80086a8:	60fb      	str	r3, [r7, #12]
 80086aa:	2300      	movs	r3, #0
 80086ac:	60bb      	str	r3, [r7, #8]
 80086ae:	2300      	movs	r3, #0
 80086b0:	607b      	str	r3, [r7, #4]
 80086b2:	2300      	movs	r3, #0
 80086b4:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80086b6:	4b15      	ldr	r3, [pc, #84]	; (800870c <W25qxx_ReadID+0x6c>)
 80086b8:	2200      	movs	r2, #0
 80086ba:	2108      	movs	r1, #8
 80086bc:	0018      	movs	r0, r3
 80086be:	f001 fb41 	bl	8009d44 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 80086c2:	209f      	movs	r0, #159	; 0x9f
 80086c4:	f7ff ffd4 	bl	8008670 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80086c8:	20a5      	movs	r0, #165	; 0xa5
 80086ca:	f7ff ffd1 	bl	8008670 <W25qxx_Spi>
 80086ce:	0003      	movs	r3, r0
 80086d0:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80086d2:	20a5      	movs	r0, #165	; 0xa5
 80086d4:	f7ff ffcc 	bl	8008670 <W25qxx_Spi>
 80086d8:	0003      	movs	r3, r0
 80086da:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80086dc:	20a5      	movs	r0, #165	; 0xa5
 80086de:	f7ff ffc7 	bl	8008670 <W25qxx_Spi>
 80086e2:	0003      	movs	r3, r0
 80086e4:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80086e6:	4b09      	ldr	r3, [pc, #36]	; (800870c <W25qxx_ReadID+0x6c>)
 80086e8:	2201      	movs	r2, #1
 80086ea:	2108      	movs	r1, #8
 80086ec:	0018      	movs	r0, r3
 80086ee:	f001 fb29 	bl	8009d44 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	041a      	lsls	r2, r3, #16
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	021b      	lsls	r3, r3, #8
 80086fa:	4313      	orrs	r3, r2
 80086fc:	683a      	ldr	r2, [r7, #0]
 80086fe:	4313      	orrs	r3, r2
 8008700:	60fb      	str	r3, [r7, #12]
	return Temp;
 8008702:	68fb      	ldr	r3, [r7, #12]
}
 8008704:	0018      	movs	r0, r3
 8008706:	46bd      	mov	sp, r7
 8008708:	b004      	add	sp, #16
 800870a:	bd80      	pop	{r7, pc}
 800870c:	50000c00 	.word	0x50000c00

08008710 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8008710:	b590      	push	{r4, r7, lr}
 8008712:	b083      	sub	sp, #12
 8008714:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8008716:	4b1d      	ldr	r3, [pc, #116]	; (800878c <W25qxx_ReadUniqID+0x7c>)
 8008718:	2200      	movs	r2, #0
 800871a:	2108      	movs	r1, #8
 800871c:	0018      	movs	r0, r3
 800871e:	f001 fb11 	bl	8009d44 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8008722:	204b      	movs	r0, #75	; 0x4b
 8008724:	f7ff ffa4 	bl	8008670 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8008728:	1dfb      	adds	r3, r7, #7
 800872a:	2200      	movs	r2, #0
 800872c:	701a      	strb	r2, [r3, #0]
 800872e:	e007      	b.n	8008740 <W25qxx_ReadUniqID+0x30>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8008730:	20a5      	movs	r0, #165	; 0xa5
 8008732:	f7ff ff9d 	bl	8008670 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8008736:	1dfb      	adds	r3, r7, #7
 8008738:	781a      	ldrb	r2, [r3, #0]
 800873a:	1dfb      	adds	r3, r7, #7
 800873c:	3201      	adds	r2, #1
 800873e:	701a      	strb	r2, [r3, #0]
 8008740:	1dfb      	adds	r3, r7, #7
 8008742:	781b      	ldrb	r3, [r3, #0]
 8008744:	2b03      	cmp	r3, #3
 8008746:	d9f3      	bls.n	8008730 <W25qxx_ReadUniqID+0x20>
	for (uint8_t i = 0; i < 8; i++)
 8008748:	1dbb      	adds	r3, r7, #6
 800874a:	2200      	movs	r2, #0
 800874c:	701a      	strb	r2, [r3, #0]
 800874e:	e00e      	b.n	800876e <W25qxx_ReadUniqID+0x5e>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8008750:	1dbb      	adds	r3, r7, #6
 8008752:	781c      	ldrb	r4, [r3, #0]
 8008754:	20a5      	movs	r0, #165	; 0xa5
 8008756:	f7ff ff8b 	bl	8008670 <W25qxx_Spi>
 800875a:	0003      	movs	r3, r0
 800875c:	001a      	movs	r2, r3
 800875e:	4b0c      	ldr	r3, [pc, #48]	; (8008790 <W25qxx_ReadUniqID+0x80>)
 8008760:	191b      	adds	r3, r3, r4
 8008762:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8008764:	1dbb      	adds	r3, r7, #6
 8008766:	781a      	ldrb	r2, [r3, #0]
 8008768:	1dbb      	adds	r3, r7, #6
 800876a:	3201      	adds	r2, #1
 800876c:	701a      	strb	r2, [r3, #0]
 800876e:	1dbb      	adds	r3, r7, #6
 8008770:	781b      	ldrb	r3, [r3, #0]
 8008772:	2b07      	cmp	r3, #7
 8008774:	d9ec      	bls.n	8008750 <W25qxx_ReadUniqID+0x40>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8008776:	4b05      	ldr	r3, [pc, #20]	; (800878c <W25qxx_ReadUniqID+0x7c>)
 8008778:	2201      	movs	r2, #1
 800877a:	2108      	movs	r1, #8
 800877c:	0018      	movs	r0, r3
 800877e:	f001 fae1 	bl	8009d44 <HAL_GPIO_WritePin>
}
 8008782:	46c0      	nop			; (mov r8, r8)
 8008784:	46bd      	mov	sp, r7
 8008786:	b003      	add	sp, #12
 8008788:	bd90      	pop	{r4, r7, pc}
 800878a:	46c0      	nop			; (mov r8, r8)
 800878c:	50000c00 	.word	0x50000c00
 8008790:	20000cec 	.word	0x20000cec

08008794 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8008798:	4b0a      	ldr	r3, [pc, #40]	; (80087c4 <W25qxx_WriteEnable+0x30>)
 800879a:	2200      	movs	r2, #0
 800879c:	2108      	movs	r1, #8
 800879e:	0018      	movs	r0, r3
 80087a0:	f001 fad0 	bl	8009d44 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 80087a4:	2006      	movs	r0, #6
 80087a6:	f7ff ff63 	bl	8008670 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80087aa:	4b06      	ldr	r3, [pc, #24]	; (80087c4 <W25qxx_WriteEnable+0x30>)
 80087ac:	2201      	movs	r2, #1
 80087ae:	2108      	movs	r1, #8
 80087b0:	0018      	movs	r0, r3
 80087b2:	f001 fac7 	bl	8009d44 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 80087b6:	2001      	movs	r0, #1
 80087b8:	f000 fd40 	bl	800923c <HAL_Delay>
}
 80087bc:	46c0      	nop			; (mov r8, r8)
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
 80087c2:	46c0      	nop			; (mov r8, r8)
 80087c4:	50000c00 	.word	0x50000c00

080087c8 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 80087c8:	b5b0      	push	{r4, r5, r7, lr}
 80087ca:	b084      	sub	sp, #16
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	0002      	movs	r2, r0
 80087d0:	1dfb      	adds	r3, r7, #7
 80087d2:	701a      	strb	r2, [r3, #0]
	uint8_t status = 0;
 80087d4:	240f      	movs	r4, #15
 80087d6:	193b      	adds	r3, r7, r4
 80087d8:	2200      	movs	r2, #0
 80087da:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80087dc:	4b24      	ldr	r3, [pc, #144]	; (8008870 <W25qxx_ReadStatusRegister+0xa8>)
 80087de:	2200      	movs	r2, #0
 80087e0:	2108      	movs	r1, #8
 80087e2:	0018      	movs	r0, r3
 80087e4:	f001 faae 	bl	8009d44 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 80087e8:	1dfb      	adds	r3, r7, #7
 80087ea:	781b      	ldrb	r3, [r3, #0]
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d10f      	bne.n	8008810 <W25qxx_ReadStatusRegister+0x48>
	{
		W25qxx_Spi(0x05);
 80087f0:	2005      	movs	r0, #5
 80087f2:	f7ff ff3d 	bl	8008670 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80087f6:	0025      	movs	r5, r4
 80087f8:	193c      	adds	r4, r7, r4
 80087fa:	20a5      	movs	r0, #165	; 0xa5
 80087fc:	f7ff ff38 	bl	8008670 <W25qxx_Spi>
 8008800:	0003      	movs	r3, r0
 8008802:	7023      	strb	r3, [r4, #0]
		w25qxx.StatusRegister1 = status;
 8008804:	4b1b      	ldr	r3, [pc, #108]	; (8008874 <W25qxx_ReadStatusRegister+0xac>)
 8008806:	197a      	adds	r2, r7, r5
 8008808:	2124      	movs	r1, #36	; 0x24
 800880a:	7812      	ldrb	r2, [r2, #0]
 800880c:	545a      	strb	r2, [r3, r1]
 800880e:	e022      	b.n	8008856 <W25qxx_ReadStatusRegister+0x8e>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8008810:	1dfb      	adds	r3, r7, #7
 8008812:	781b      	ldrb	r3, [r3, #0]
 8008814:	2b02      	cmp	r3, #2
 8008816:	d10f      	bne.n	8008838 <W25qxx_ReadStatusRegister+0x70>
	{
		W25qxx_Spi(0x35);
 8008818:	2035      	movs	r0, #53	; 0x35
 800881a:	f7ff ff29 	bl	8008670 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800881e:	250f      	movs	r5, #15
 8008820:	197c      	adds	r4, r7, r5
 8008822:	20a5      	movs	r0, #165	; 0xa5
 8008824:	f7ff ff24 	bl	8008670 <W25qxx_Spi>
 8008828:	0003      	movs	r3, r0
 800882a:	7023      	strb	r3, [r4, #0]
		w25qxx.StatusRegister2 = status;
 800882c:	4b11      	ldr	r3, [pc, #68]	; (8008874 <W25qxx_ReadStatusRegister+0xac>)
 800882e:	197a      	adds	r2, r7, r5
 8008830:	2125      	movs	r1, #37	; 0x25
 8008832:	7812      	ldrb	r2, [r2, #0]
 8008834:	545a      	strb	r2, [r3, r1]
 8008836:	e00e      	b.n	8008856 <W25qxx_ReadStatusRegister+0x8e>
	}
	else
	{
		W25qxx_Spi(0x15);
 8008838:	2015      	movs	r0, #21
 800883a:	f7ff ff19 	bl	8008670 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800883e:	250f      	movs	r5, #15
 8008840:	197c      	adds	r4, r7, r5
 8008842:	20a5      	movs	r0, #165	; 0xa5
 8008844:	f7ff ff14 	bl	8008670 <W25qxx_Spi>
 8008848:	0003      	movs	r3, r0
 800884a:	7023      	strb	r3, [r4, #0]
		w25qxx.StatusRegister3 = status;
 800884c:	4b09      	ldr	r3, [pc, #36]	; (8008874 <W25qxx_ReadStatusRegister+0xac>)
 800884e:	197a      	adds	r2, r7, r5
 8008850:	2126      	movs	r1, #38	; 0x26
 8008852:	7812      	ldrb	r2, [r2, #0]
 8008854:	545a      	strb	r2, [r3, r1]
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8008856:	4b06      	ldr	r3, [pc, #24]	; (8008870 <W25qxx_ReadStatusRegister+0xa8>)
 8008858:	2201      	movs	r2, #1
 800885a:	2108      	movs	r1, #8
 800885c:	0018      	movs	r0, r3
 800885e:	f001 fa71 	bl	8009d44 <HAL_GPIO_WritePin>
	return status;
 8008862:	230f      	movs	r3, #15
 8008864:	18fb      	adds	r3, r7, r3
 8008866:	781b      	ldrb	r3, [r3, #0]
}
 8008868:	0018      	movs	r0, r3
 800886a:	46bd      	mov	sp, r7
 800886c:	b004      	add	sp, #16
 800886e:	bdb0      	pop	{r4, r5, r7, pc}
 8008870:	50000c00 	.word	0x50000c00
 8008874:	20000cec 	.word	0x20000cec

08008878 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 800887c:	2001      	movs	r0, #1
 800887e:	f000 fcdd 	bl	800923c <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8008882:	4b12      	ldr	r3, [pc, #72]	; (80088cc <W25qxx_WaitForWriteEnd+0x54>)
 8008884:	2200      	movs	r2, #0
 8008886:	2108      	movs	r1, #8
 8008888:	0018      	movs	r0, r3
 800888a:	f001 fa5b 	bl	8009d44 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 800888e:	2005      	movs	r0, #5
 8008890:	f7ff feee 	bl	8008670 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8008894:	20a5      	movs	r0, #165	; 0xa5
 8008896:	f7ff feeb 	bl	8008670 <W25qxx_Spi>
 800889a:	0003      	movs	r3, r0
 800889c:	0019      	movs	r1, r3
 800889e:	4b0c      	ldr	r3, [pc, #48]	; (80088d0 <W25qxx_WaitForWriteEnd+0x58>)
 80088a0:	2224      	movs	r2, #36	; 0x24
 80088a2:	5499      	strb	r1, [r3, r2]
		W25qxx_Delay(1);
 80088a4:	2001      	movs	r0, #1
 80088a6:	f000 fcc9 	bl	800923c <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 80088aa:	4b09      	ldr	r3, [pc, #36]	; (80088d0 <W25qxx_WaitForWriteEnd+0x58>)
 80088ac:	2224      	movs	r2, #36	; 0x24
 80088ae:	5c9b      	ldrb	r3, [r3, r2]
 80088b0:	001a      	movs	r2, r3
 80088b2:	2301      	movs	r3, #1
 80088b4:	4013      	ands	r3, r2
 80088b6:	d1ed      	bne.n	8008894 <W25qxx_WaitForWriteEnd+0x1c>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80088b8:	4b04      	ldr	r3, [pc, #16]	; (80088cc <W25qxx_WaitForWriteEnd+0x54>)
 80088ba:	2201      	movs	r2, #1
 80088bc:	2108      	movs	r1, #8
 80088be:	0018      	movs	r0, r3
 80088c0:	f001 fa40 	bl	8009d44 <HAL_GPIO_WritePin>
}
 80088c4:	46c0      	nop			; (mov r8, r8)
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}
 80088ca:	46c0      	nop			; (mov r8, r8)
 80088cc:	50000c00 	.word	0x50000c00
 80088d0:	20000cec 	.word	0x20000cec

080088d4 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b082      	sub	sp, #8
 80088d8:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 80088da:	4b58      	ldr	r3, [pc, #352]	; (8008a3c <W25qxx_Init+0x168>)
 80088dc:	2227      	movs	r2, #39	; 0x27
 80088de:	2101      	movs	r1, #1
 80088e0:	5499      	strb	r1, [r3, r2]
	while (HAL_GetTick() < 100)
 80088e2:	e002      	b.n	80088ea <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 80088e4:	2001      	movs	r0, #1
 80088e6:	f000 fca9 	bl	800923c <HAL_Delay>
	while (HAL_GetTick() < 100)
 80088ea:	f000 fc9d 	bl	8009228 <HAL_GetTick>
 80088ee:	0003      	movs	r3, r0
 80088f0:	2b63      	cmp	r3, #99	; 0x63
 80088f2:	d9f7      	bls.n	80088e4 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80088f4:	4b52      	ldr	r3, [pc, #328]	; (8008a40 <W25qxx_Init+0x16c>)
 80088f6:	2201      	movs	r2, #1
 80088f8:	2108      	movs	r1, #8
 80088fa:	0018      	movs	r0, r3
 80088fc:	f001 fa22 	bl	8009d44 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8008900:	2064      	movs	r0, #100	; 0x64
 8008902:	f000 fc9b 	bl	800923c <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 8008906:	f7ff fecb 	bl	80086a0 <W25qxx_ReadID>
 800890a:	0003      	movs	r3, r0
 800890c:	607b      	str	r3, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	22ff      	movs	r2, #255	; 0xff
 8008912:	4013      	ands	r3, r2
 8008914:	3b11      	subs	r3, #17
 8008916:	2b0f      	cmp	r3, #15
 8008918:	d84d      	bhi.n	80089b6 <W25qxx_Init+0xe2>
 800891a:	009a      	lsls	r2, r3, #2
 800891c:	4b49      	ldr	r3, [pc, #292]	; (8008a44 <W25qxx_Init+0x170>)
 800891e:	18d3      	adds	r3, r2, r3
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	469f      	mov	pc, r3
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8008924:	4b45      	ldr	r3, [pc, #276]	; (8008a3c <W25qxx_Init+0x168>)
 8008926:	220a      	movs	r2, #10
 8008928:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 800892a:	4b44      	ldr	r3, [pc, #272]	; (8008a3c <W25qxx_Init+0x168>)
 800892c:	2280      	movs	r2, #128	; 0x80
 800892e:	00d2      	lsls	r2, r2, #3
 8008930:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 8008932:	e046      	b.n	80089c2 <W25qxx_Init+0xee>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8008934:	4b41      	ldr	r3, [pc, #260]	; (8008a3c <W25qxx_Init+0x168>)
 8008936:	2209      	movs	r2, #9
 8008938:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 800893a:	4b40      	ldr	r3, [pc, #256]	; (8008a3c <W25qxx_Init+0x168>)
 800893c:	2280      	movs	r2, #128	; 0x80
 800893e:	0092      	lsls	r2, r2, #2
 8008940:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 8008942:	e03e      	b.n	80089c2 <W25qxx_Init+0xee>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8008944:	4b3d      	ldr	r3, [pc, #244]	; (8008a3c <W25qxx_Init+0x168>)
 8008946:	2208      	movs	r2, #8
 8008948:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 800894a:	4b3c      	ldr	r3, [pc, #240]	; (8008a3c <W25qxx_Init+0x168>)
 800894c:	2280      	movs	r2, #128	; 0x80
 800894e:	0052      	lsls	r2, r2, #1
 8008950:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 8008952:	e036      	b.n	80089c2 <W25qxx_Init+0xee>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8008954:	4b39      	ldr	r3, [pc, #228]	; (8008a3c <W25qxx_Init+0x168>)
 8008956:	2207      	movs	r2, #7
 8008958:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 800895a:	4b38      	ldr	r3, [pc, #224]	; (8008a3c <W25qxx_Init+0x168>)
 800895c:	2280      	movs	r2, #128	; 0x80
 800895e:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 8008960:	e02f      	b.n	80089c2 <W25qxx_Init+0xee>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8008962:	4b36      	ldr	r3, [pc, #216]	; (8008a3c <W25qxx_Init+0x168>)
 8008964:	2206      	movs	r2, #6
 8008966:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8008968:	4b34      	ldr	r3, [pc, #208]	; (8008a3c <W25qxx_Init+0x168>)
 800896a:	2240      	movs	r2, #64	; 0x40
 800896c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 800896e:	e028      	b.n	80089c2 <W25qxx_Init+0xee>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8008970:	4b32      	ldr	r3, [pc, #200]	; (8008a3c <W25qxx_Init+0x168>)
 8008972:	2205      	movs	r2, #5
 8008974:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8008976:	4b31      	ldr	r3, [pc, #196]	; (8008a3c <W25qxx_Init+0x168>)
 8008978:	2220      	movs	r2, #32
 800897a:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 800897c:	e021      	b.n	80089c2 <W25qxx_Init+0xee>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 800897e:	4b2f      	ldr	r3, [pc, #188]	; (8008a3c <W25qxx_Init+0x168>)
 8008980:	2204      	movs	r2, #4
 8008982:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8008984:	4b2d      	ldr	r3, [pc, #180]	; (8008a3c <W25qxx_Init+0x168>)
 8008986:	2210      	movs	r2, #16
 8008988:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 800898a:	e01a      	b.n	80089c2 <W25qxx_Init+0xee>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 800898c:	4b2b      	ldr	r3, [pc, #172]	; (8008a3c <W25qxx_Init+0x168>)
 800898e:	2203      	movs	r2, #3
 8008990:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8008992:	4b2a      	ldr	r3, [pc, #168]	; (8008a3c <W25qxx_Init+0x168>)
 8008994:	2208      	movs	r2, #8
 8008996:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 8008998:	e013      	b.n	80089c2 <W25qxx_Init+0xee>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 800899a:	4b28      	ldr	r3, [pc, #160]	; (8008a3c <W25qxx_Init+0x168>)
 800899c:	2202      	movs	r2, #2
 800899e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 80089a0:	4b26      	ldr	r3, [pc, #152]	; (8008a3c <W25qxx_Init+0x168>)
 80089a2:	2204      	movs	r2, #4
 80089a4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 80089a6:	e00c      	b.n	80089c2 <W25qxx_Init+0xee>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 80089a8:	4b24      	ldr	r3, [pc, #144]	; (8008a3c <W25qxx_Init+0x168>)
 80089aa:	2201      	movs	r2, #1
 80089ac:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 80089ae:	4b23      	ldr	r3, [pc, #140]	; (8008a3c <W25qxx_Init+0x168>)
 80089b0:	2202      	movs	r2, #2
 80089b2:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 80089b4:	e005      	b.n	80089c2 <W25qxx_Init+0xee>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 80089b6:	4b21      	ldr	r3, [pc, #132]	; (8008a3c <W25qxx_Init+0x168>)
 80089b8:	2227      	movs	r2, #39	; 0x27
 80089ba:	2100      	movs	r1, #0
 80089bc:	5499      	strb	r1, [r3, r2]
		return false;
 80089be:	2300      	movs	r3, #0
 80089c0:	e038      	b.n	8008a34 <W25qxx_Init+0x160>
	}
	w25qxx.PageSize = 256;
 80089c2:	4b1e      	ldr	r3, [pc, #120]	; (8008a3c <W25qxx_Init+0x168>)
 80089c4:	2280      	movs	r2, #128	; 0x80
 80089c6:	0052      	lsls	r2, r2, #1
 80089c8:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 80089ca:	4b1c      	ldr	r3, [pc, #112]	; (8008a3c <W25qxx_Init+0x168>)
 80089cc:	2280      	movs	r2, #128	; 0x80
 80089ce:	0152      	lsls	r2, r2, #5
 80089d0:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 80089d2:	4b1a      	ldr	r3, [pc, #104]	; (8008a3c <W25qxx_Init+0x168>)
 80089d4:	69db      	ldr	r3, [r3, #28]
 80089d6:	011a      	lsls	r2, r3, #4
 80089d8:	4b18      	ldr	r3, [pc, #96]	; (8008a3c <W25qxx_Init+0x168>)
 80089da:	615a      	str	r2, [r3, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 80089dc:	4b17      	ldr	r3, [pc, #92]	; (8008a3c <W25qxx_Init+0x168>)
 80089de:	695a      	ldr	r2, [r3, #20]
 80089e0:	4b16      	ldr	r3, [pc, #88]	; (8008a3c <W25qxx_Init+0x168>)
 80089e2:	691b      	ldr	r3, [r3, #16]
 80089e4:	435a      	muls	r2, r3
 80089e6:	4b15      	ldr	r3, [pc, #84]	; (8008a3c <W25qxx_Init+0x168>)
 80089e8:	895b      	ldrh	r3, [r3, #10]
 80089ea:	0019      	movs	r1, r3
 80089ec:	0010      	movs	r0, r2
 80089ee:	f7f7 fbad 	bl	800014c <__udivsi3>
 80089f2:	0003      	movs	r3, r0
 80089f4:	001a      	movs	r2, r3
 80089f6:	4b11      	ldr	r3, [pc, #68]	; (8008a3c <W25qxx_Init+0x168>)
 80089f8:	60da      	str	r2, [r3, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 80089fa:	4b10      	ldr	r3, [pc, #64]	; (8008a3c <W25qxx_Init+0x168>)
 80089fc:	691b      	ldr	r3, [r3, #16]
 80089fe:	011a      	lsls	r2, r3, #4
 8008a00:	4b0e      	ldr	r3, [pc, #56]	; (8008a3c <W25qxx_Init+0x168>)
 8008a02:	619a      	str	r2, [r3, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8008a04:	4b0d      	ldr	r3, [pc, #52]	; (8008a3c <W25qxx_Init+0x168>)
 8008a06:	695a      	ldr	r2, [r3, #20]
 8008a08:	4b0c      	ldr	r3, [pc, #48]	; (8008a3c <W25qxx_Init+0x168>)
 8008a0a:	691b      	ldr	r3, [r3, #16]
 8008a0c:	4353      	muls	r3, r2
 8008a0e:	0a9a      	lsrs	r2, r3, #10
 8008a10:	4b0a      	ldr	r3, [pc, #40]	; (8008a3c <W25qxx_Init+0x168>)
 8008a12:	621a      	str	r2, [r3, #32]
	W25qxx_ReadUniqID();
 8008a14:	f7ff fe7c 	bl	8008710 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8008a18:	2001      	movs	r0, #1
 8008a1a:	f7ff fed5 	bl	80087c8 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8008a1e:	2002      	movs	r0, #2
 8008a20:	f7ff fed2 	bl	80087c8 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8008a24:	2003      	movs	r0, #3
 8008a26:	f7ff fecf 	bl	80087c8 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 8008a2a:	4b04      	ldr	r3, [pc, #16]	; (8008a3c <W25qxx_Init+0x168>)
 8008a2c:	2227      	movs	r2, #39	; 0x27
 8008a2e:	2100      	movs	r1, #0
 8008a30:	5499      	strb	r1, [r3, r2]
	return true;
 8008a32:	2301      	movs	r3, #1
}
 8008a34:	0018      	movs	r0, r3
 8008a36:	46bd      	mov	sp, r7
 8008a38:	b002      	add	sp, #8
 8008a3a:	bd80      	pop	{r7, pc}
 8008a3c:	20000cec 	.word	0x20000cec
 8008a40:	50000c00 	.word	0x50000c00
 8008a44:	08013434 	.word	0x08013434

08008a48 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b082      	sub	sp, #8
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8008a50:	e002      	b.n	8008a58 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 8008a52:	2001      	movs	r0, #1
 8008a54:	f000 fbf2 	bl	800923c <HAL_Delay>
	while (w25qxx.Lock == 1)
 8008a58:	4b26      	ldr	r3, [pc, #152]	; (8008af4 <W25qxx_EraseSector+0xac>)
 8008a5a:	2227      	movs	r2, #39	; 0x27
 8008a5c:	5c9b      	ldrb	r3, [r3, r2]
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	d0f7      	beq.n	8008a52 <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 8008a62:	4b24      	ldr	r3, [pc, #144]	; (8008af4 <W25qxx_EraseSector+0xac>)
 8008a64:	2227      	movs	r2, #39	; 0x27
 8008a66:	2101      	movs	r1, #1
 8008a68:	5499      	strb	r1, [r3, r2]
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
#endif
	W25qxx_WaitForWriteEnd();
 8008a6a:	f7ff ff05 	bl	8008878 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 8008a6e:	4b21      	ldr	r3, [pc, #132]	; (8008af4 <W25qxx_EraseSector+0xac>)
 8008a70:	691a      	ldr	r2, [r3, #16]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	4353      	muls	r3, r2
 8008a76:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 8008a78:	f7ff fe8c 	bl	8008794 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8008a7c:	4b1e      	ldr	r3, [pc, #120]	; (8008af8 <W25qxx_EraseSector+0xb0>)
 8008a7e:	2200      	movs	r2, #0
 8008a80:	2108      	movs	r1, #8
 8008a82:	0018      	movs	r0, r3
 8008a84:	f001 f95e 	bl	8009d44 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8008a88:	4b1a      	ldr	r3, [pc, #104]	; (8008af4 <W25qxx_EraseSector+0xac>)
 8008a8a:	781b      	ldrb	r3, [r3, #0]
 8008a8c:	2b08      	cmp	r3, #8
 8008a8e:	d909      	bls.n	8008aa4 <W25qxx_EraseSector+0x5c>
	{
		W25qxx_Spi(0x21);
 8008a90:	2021      	movs	r0, #33	; 0x21
 8008a92:	f7ff fded 	bl	8008670 <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	0e1b      	lsrs	r3, r3, #24
 8008a9a:	b2db      	uxtb	r3, r3
 8008a9c:	0018      	movs	r0, r3
 8008a9e:	f7ff fde7 	bl	8008670 <W25qxx_Spi>
 8008aa2:	e002      	b.n	8008aaa <W25qxx_EraseSector+0x62>
	}
	else
	{
		W25qxx_Spi(0x20);
 8008aa4:	2020      	movs	r0, #32
 8008aa6:	f7ff fde3 	bl	8008670 <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	0c1b      	lsrs	r3, r3, #16
 8008aae:	b2db      	uxtb	r3, r3
 8008ab0:	0018      	movs	r0, r3
 8008ab2:	f7ff fddd 	bl	8008670 <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	0a1b      	lsrs	r3, r3, #8
 8008aba:	b2db      	uxtb	r3, r3
 8008abc:	0018      	movs	r0, r3
 8008abe:	f7ff fdd7 	bl	8008670 <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	b2db      	uxtb	r3, r3
 8008ac6:	0018      	movs	r0, r3
 8008ac8:	f7ff fdd2 	bl	8008670 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8008acc:	4b0a      	ldr	r3, [pc, #40]	; (8008af8 <W25qxx_EraseSector+0xb0>)
 8008ace:	2201      	movs	r2, #1
 8008ad0:	2108      	movs	r1, #8
 8008ad2:	0018      	movs	r0, r3
 8008ad4:	f001 f936 	bl	8009d44 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8008ad8:	f7ff fece 	bl	8008878 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
#endif
	W25qxx_Delay(1);
 8008adc:	2001      	movs	r0, #1
 8008ade:	f000 fbad 	bl	800923c <HAL_Delay>
	w25qxx.Lock = 0;
 8008ae2:	4b04      	ldr	r3, [pc, #16]	; (8008af4 <W25qxx_EraseSector+0xac>)
 8008ae4:	2227      	movs	r2, #39	; 0x27
 8008ae6:	2100      	movs	r1, #0
 8008ae8:	5499      	strb	r1, [r3, r2]
}
 8008aea:	46c0      	nop			; (mov r8, r8)
 8008aec:	46bd      	mov	sp, r7
 8008aee:	b002      	add	sp, #8
 8008af0:	bd80      	pop	{r7, pc}
 8008af2:	46c0      	nop			; (mov r8, r8)
 8008af4:	20000cec 	.word	0x20000cec
 8008af8:	50000c00 	.word	0x50000c00

08008afc <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b082      	sub	sp, #8
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8008b04:	4b07      	ldr	r3, [pc, #28]	; (8008b24 <W25qxx_SectorToPage+0x28>)
 8008b06:	691b      	ldr	r3, [r3, #16]
 8008b08:	687a      	ldr	r2, [r7, #4]
 8008b0a:	435a      	muls	r2, r3
 8008b0c:	4b05      	ldr	r3, [pc, #20]	; (8008b24 <W25qxx_SectorToPage+0x28>)
 8008b0e:	895b      	ldrh	r3, [r3, #10]
 8008b10:	0019      	movs	r1, r3
 8008b12:	0010      	movs	r0, r2
 8008b14:	f7f7 fb1a 	bl	800014c <__udivsi3>
 8008b18:	0003      	movs	r3, r0
}
 8008b1a:	0018      	movs	r0, r3
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	b002      	add	sp, #8
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	46c0      	nop			; (mov r8, r8)
 8008b24:	20000cec 	.word	0x20000cec

08008b28 <W25qxx_WriteByte>:
	w25qxx.Lock = 0;
	return false;
}
//###################################################################################################################
void W25qxx_WriteByte(uint8_t pBuffer, uint32_t WriteAddr_inBytes)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b082      	sub	sp, #8
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	0002      	movs	r2, r0
 8008b30:	6039      	str	r1, [r7, #0]
 8008b32:	1dfb      	adds	r3, r7, #7
 8008b34:	701a      	strb	r2, [r3, #0]
	while (w25qxx.Lock == 1)
 8008b36:	e002      	b.n	8008b3e <W25qxx_WriteByte+0x16>
		W25qxx_Delay(1);
 8008b38:	2001      	movs	r0, #1
 8008b3a:	f000 fb7f 	bl	800923c <HAL_Delay>
	while (w25qxx.Lock == 1)
 8008b3e:	4b25      	ldr	r3, [pc, #148]	; (8008bd4 <W25qxx_WriteByte+0xac>)
 8008b40:	2227      	movs	r2, #39	; 0x27
 8008b42:	5c9b      	ldrb	r3, [r3, r2]
 8008b44:	2b01      	cmp	r3, #1
 8008b46:	d0f7      	beq.n	8008b38 <W25qxx_WriteByte+0x10>
	w25qxx.Lock = 1;
 8008b48:	4b22      	ldr	r3, [pc, #136]	; (8008bd4 <W25qxx_WriteByte+0xac>)
 8008b4a:	2227      	movs	r2, #39	; 0x27
 8008b4c:	2101      	movs	r1, #1
 8008b4e:	5499      	strb	r1, [r3, r2]
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx WriteByte 0x%02X at address %d begin...", pBuffer, WriteAddr_inBytes);
#endif
	W25qxx_WaitForWriteEnd();
 8008b50:	f7ff fe92 	bl	8008878 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 8008b54:	f7ff fe1e 	bl	8008794 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8008b58:	4b1f      	ldr	r3, [pc, #124]	; (8008bd8 <W25qxx_WriteByte+0xb0>)
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	2108      	movs	r1, #8
 8008b5e:	0018      	movs	r0, r3
 8008b60:	f001 f8f0 	bl	8009d44 <HAL_GPIO_WritePin>

	if (w25qxx.ID >= W25Q256)
 8008b64:	4b1b      	ldr	r3, [pc, #108]	; (8008bd4 <W25qxx_WriteByte+0xac>)
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	2b08      	cmp	r3, #8
 8008b6a:	d909      	bls.n	8008b80 <W25qxx_WriteByte+0x58>
	{
		W25qxx_Spi(0x12);
 8008b6c:	2012      	movs	r0, #18
 8008b6e:	f7ff fd7f 	bl	8008670 <W25qxx_Spi>
		W25qxx_Spi((WriteAddr_inBytes & 0xFF000000) >> 24);
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	0e1b      	lsrs	r3, r3, #24
 8008b76:	b2db      	uxtb	r3, r3
 8008b78:	0018      	movs	r0, r3
 8008b7a:	f7ff fd79 	bl	8008670 <W25qxx_Spi>
 8008b7e:	e002      	b.n	8008b86 <W25qxx_WriteByte+0x5e>
	}
	else
	{
		W25qxx_Spi(0x02);
 8008b80:	2002      	movs	r0, #2
 8008b82:	f7ff fd75 	bl	8008670 <W25qxx_Spi>
	}
	W25qxx_Spi((WriteAddr_inBytes & 0xFF0000) >> 16);
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	0c1b      	lsrs	r3, r3, #16
 8008b8a:	b2db      	uxtb	r3, r3
 8008b8c:	0018      	movs	r0, r3
 8008b8e:	f7ff fd6f 	bl	8008670 <W25qxx_Spi>
	W25qxx_Spi((WriteAddr_inBytes & 0xFF00) >> 8);
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	0a1b      	lsrs	r3, r3, #8
 8008b96:	b2db      	uxtb	r3, r3
 8008b98:	0018      	movs	r0, r3
 8008b9a:	f7ff fd69 	bl	8008670 <W25qxx_Spi>
	W25qxx_Spi(WriteAddr_inBytes & 0xFF);
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	b2db      	uxtb	r3, r3
 8008ba2:	0018      	movs	r0, r3
 8008ba4:	f7ff fd64 	bl	8008670 <W25qxx_Spi>
	W25qxx_Spi(pBuffer);
 8008ba8:	1dfb      	adds	r3, r7, #7
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	0018      	movs	r0, r3
 8008bae:	f7ff fd5f 	bl	8008670 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8008bb2:	4b09      	ldr	r3, [pc, #36]	; (8008bd8 <W25qxx_WriteByte+0xb0>)
 8008bb4:	2201      	movs	r2, #1
 8008bb6:	2108      	movs	r1, #8
 8008bb8:	0018      	movs	r0, r3
 8008bba:	f001 f8c3 	bl	8009d44 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8008bbe:	f7ff fe5b 	bl	8008878 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WriteByte done after %d ms\r\n", HAL_GetTick() - StartTime);
#endif
	w25qxx.Lock = 0;
 8008bc2:	4b04      	ldr	r3, [pc, #16]	; (8008bd4 <W25qxx_WriteByte+0xac>)
 8008bc4:	2227      	movs	r2, #39	; 0x27
 8008bc6:	2100      	movs	r1, #0
 8008bc8:	5499      	strb	r1, [r3, r2]
}
 8008bca:	46c0      	nop			; (mov r8, r8)
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	b002      	add	sp, #8
 8008bd0:	bd80      	pop	{r7, pc}
 8008bd2:	46c0      	nop			; (mov r8, r8)
 8008bd4:	20000cec 	.word	0x20000cec
 8008bd8:	50000c00 	.word	0x50000c00

08008bdc <W25qxx_WritePage>:
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b084      	sub	sp, #16
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	60f8      	str	r0, [r7, #12]
 8008be4:	60b9      	str	r1, [r7, #8]
 8008be6:	607a      	str	r2, [r7, #4]
 8008be8:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8008bea:	e002      	b.n	8008bf2 <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8008bec:	2001      	movs	r0, #1
 8008bee:	f000 fb25 	bl	800923c <HAL_Delay>
	while (w25qxx.Lock == 1)
 8008bf2:	4b3a      	ldr	r3, [pc, #232]	; (8008cdc <W25qxx_WritePage+0x100>)
 8008bf4:	2227      	movs	r2, #39	; 0x27
 8008bf6:	5c9b      	ldrb	r3, [r3, r2]
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	d0f7      	beq.n	8008bec <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 8008bfc:	4b37      	ldr	r3, [pc, #220]	; (8008cdc <W25qxx_WritePage+0x100>)
 8008bfe:	2227      	movs	r2, #39	; 0x27
 8008c00:	2101      	movs	r1, #1
 8008c02:	5499      	strb	r1, [r3, r2]
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8008c04:	683a      	ldr	r2, [r7, #0]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	18d3      	adds	r3, r2, r3
 8008c0a:	4a34      	ldr	r2, [pc, #208]	; (8008cdc <W25qxx_WritePage+0x100>)
 8008c0c:	8952      	ldrh	r2, [r2, #10]
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d802      	bhi.n	8008c18 <W25qxx_WritePage+0x3c>
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d105      	bne.n	8008c24 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8008c18:	4b30      	ldr	r3, [pc, #192]	; (8008cdc <W25qxx_WritePage+0x100>)
 8008c1a:	895b      	ldrh	r3, [r3, #10]
 8008c1c:	001a      	movs	r2, r3
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	1ad3      	subs	r3, r2, r3
 8008c22:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8008c24:	687a      	ldr	r2, [r7, #4]
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	18d3      	adds	r3, r2, r3
 8008c2a:	4a2c      	ldr	r2, [pc, #176]	; (8008cdc <W25qxx_WritePage+0x100>)
 8008c2c:	8952      	ldrh	r2, [r2, #10]
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d905      	bls.n	8008c3e <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8008c32:	4b2a      	ldr	r3, [pc, #168]	; (8008cdc <W25qxx_WritePage+0x100>)
 8008c34:	895b      	ldrh	r3, [r3, #10]
 8008c36:	001a      	movs	r2, r3
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	1ad3      	subs	r3, r2, r3
 8008c3c:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	W25qxx_WaitForWriteEnd();
 8008c3e:	f7ff fe1b 	bl	8008878 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 8008c42:	f7ff fda7 	bl	8008794 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8008c46:	4b26      	ldr	r3, [pc, #152]	; (8008ce0 <W25qxx_WritePage+0x104>)
 8008c48:	2200      	movs	r2, #0
 8008c4a:	2108      	movs	r1, #8
 8008c4c:	0018      	movs	r0, r3
 8008c4e:	f001 f879 	bl	8009d44 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8008c52:	4b22      	ldr	r3, [pc, #136]	; (8008cdc <W25qxx_WritePage+0x100>)
 8008c54:	895b      	ldrh	r3, [r3, #10]
 8008c56:	001a      	movs	r2, r3
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	4353      	muls	r3, r2
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	18d3      	adds	r3, r2, r3
 8008c60:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 8008c62:	4b1e      	ldr	r3, [pc, #120]	; (8008cdc <W25qxx_WritePage+0x100>)
 8008c64:	781b      	ldrb	r3, [r3, #0]
 8008c66:	2b08      	cmp	r3, #8
 8008c68:	d909      	bls.n	8008c7e <W25qxx_WritePage+0xa2>
	{
		W25qxx_Spi(0x12);
 8008c6a:	2012      	movs	r0, #18
 8008c6c:	f7ff fd00 	bl	8008670 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	0e1b      	lsrs	r3, r3, #24
 8008c74:	b2db      	uxtb	r3, r3
 8008c76:	0018      	movs	r0, r3
 8008c78:	f7ff fcfa 	bl	8008670 <W25qxx_Spi>
 8008c7c:	e002      	b.n	8008c84 <W25qxx_WritePage+0xa8>
	}
	else
	{
		W25qxx_Spi(0x02);
 8008c7e:	2002      	movs	r0, #2
 8008c80:	f7ff fcf6 	bl	8008670 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	0c1b      	lsrs	r3, r3, #16
 8008c88:	b2db      	uxtb	r3, r3
 8008c8a:	0018      	movs	r0, r3
 8008c8c:	f7ff fcf0 	bl	8008670 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	0a1b      	lsrs	r3, r3, #8
 8008c94:	b2db      	uxtb	r3, r3
 8008c96:	0018      	movs	r0, r3
 8008c98:	f7ff fcea 	bl	8008670 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	0018      	movs	r0, r3
 8008ca2:	f7ff fce5 	bl	8008670 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	b29a      	uxth	r2, r3
 8008caa:	68f9      	ldr	r1, [r7, #12]
 8008cac:	480d      	ldr	r0, [pc, #52]	; (8008ce4 <W25qxx_WritePage+0x108>)
 8008cae:	2364      	movs	r3, #100	; 0x64
 8008cb0:	f001 ff72 	bl	800ab98 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8008cb4:	4b0a      	ldr	r3, [pc, #40]	; (8008ce0 <W25qxx_WritePage+0x104>)
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	2108      	movs	r1, #8
 8008cba:	0018      	movs	r0, r3
 8008cbc:	f001 f842 	bl	8009d44 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8008cc0:	f7ff fdda 	bl	8008878 <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8008cc4:	2001      	movs	r0, #1
 8008cc6:	f000 fab9 	bl	800923c <HAL_Delay>
	w25qxx.Lock = 0;
 8008cca:	4b04      	ldr	r3, [pc, #16]	; (8008cdc <W25qxx_WritePage+0x100>)
 8008ccc:	2227      	movs	r2, #39	; 0x27
 8008cce:	2100      	movs	r1, #0
 8008cd0:	5499      	strb	r1, [r3, r2]
}
 8008cd2:	46c0      	nop			; (mov r8, r8)
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	b004      	add	sp, #16
 8008cd8:	bd80      	pop	{r7, pc}
 8008cda:	46c0      	nop			; (mov r8, r8)
 8008cdc:	20000cec 	.word	0x20000cec
 8008ce0:	50000c00 	.word	0x50000c00
 8008ce4:	200002c0 	.word	0x200002c0

08008ce8 <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8008ce8:	b590      	push	{r4, r7, lr}
 8008cea:	b089      	sub	sp, #36	; 0x24
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	60f8      	str	r0, [r7, #12]
 8008cf0:	60b9      	str	r1, [r7, #8]
 8008cf2:	607a      	str	r2, [r7, #4]
 8008cf4:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 8008cf6:	4b2d      	ldr	r3, [pc, #180]	; (8008dac <W25qxx_WriteSector+0xc4>)
 8008cf8:	691b      	ldr	r3, [r3, #16]
 8008cfa:	683a      	ldr	r2, [r7, #0]
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d802      	bhi.n	8008d06 <W25qxx_WriteSector+0x1e>
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d102      	bne.n	8008d0c <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 8008d06:	4b29      	ldr	r3, [pc, #164]	; (8008dac <W25qxx_WriteSector+0xc4>)
 8008d08:	691b      	ldr	r3, [r3, #16]
 8008d0a:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8008d0c:	4b27      	ldr	r3, [pc, #156]	; (8008dac <W25qxx_WriteSector+0xc4>)
 8008d0e:	691b      	ldr	r3, [r3, #16]
 8008d10:	687a      	ldr	r2, [r7, #4]
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d245      	bcs.n	8008da2 <W25qxx_WriteSector+0xba>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 8008d16:	687a      	ldr	r2, [r7, #4]
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	18d2      	adds	r2, r2, r3
 8008d1c:	4b23      	ldr	r3, [pc, #140]	; (8008dac <W25qxx_WriteSector+0xc4>)
 8008d1e:	691b      	ldr	r3, [r3, #16]
 8008d20:	429a      	cmp	r2, r3
 8008d22:	d905      	bls.n	8008d30 <W25qxx_WriteSector+0x48>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 8008d24:	4b21      	ldr	r3, [pc, #132]	; (8008dac <W25qxx_WriteSector+0xc4>)
 8008d26:	691a      	ldr	r2, [r3, #16]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	1ad3      	subs	r3, r2, r3
 8008d2c:	61bb      	str	r3, [r7, #24]
 8008d2e:	e001      	b.n	8008d34 <W25qxx_WriteSector+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	0018      	movs	r0, r3
 8008d38:	f7ff fee0 	bl	8008afc <W25qxx_SectorToPage>
 8008d3c:	0004      	movs	r4, r0
 8008d3e:	4b1b      	ldr	r3, [pc, #108]	; (8008dac <W25qxx_WriteSector+0xc4>)
 8008d40:	895b      	ldrh	r3, [r3, #10]
 8008d42:	0019      	movs	r1, r3
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f7f7 fa01 	bl	800014c <__udivsi3>
 8008d4a:	0003      	movs	r3, r0
 8008d4c:	18e3      	adds	r3, r4, r3
 8008d4e:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8008d50:	4b16      	ldr	r3, [pc, #88]	; (8008dac <W25qxx_WriteSector+0xc4>)
 8008d52:	895b      	ldrh	r3, [r3, #10]
 8008d54:	001a      	movs	r2, r3
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	0011      	movs	r1, r2
 8008d5a:	0018      	movs	r0, r3
 8008d5c:	f7f7 fa7c 	bl	8000258 <__aeabi_uidivmod>
 8008d60:	000b      	movs	r3, r1
 8008d62:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 8008d64:	69bb      	ldr	r3, [r7, #24]
 8008d66:	697a      	ldr	r2, [r7, #20]
 8008d68:	69f9      	ldr	r1, [r7, #28]
 8008d6a:	68f8      	ldr	r0, [r7, #12]
 8008d6c:	f7ff ff36 	bl	8008bdc <W25qxx_WritePage>
		StartPage++;
 8008d70:	69fb      	ldr	r3, [r7, #28]
 8008d72:	3301      	adds	r3, #1
 8008d74:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 8008d76:	4b0d      	ldr	r3, [pc, #52]	; (8008dac <W25qxx_WriteSector+0xc4>)
 8008d78:	895b      	ldrh	r3, [r3, #10]
 8008d7a:	001a      	movs	r2, r3
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	1a9a      	subs	r2, r3, r2
 8008d80:	69bb      	ldr	r3, [r7, #24]
 8008d82:	18d3      	adds	r3, r2, r3
 8008d84:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8008d86:	4b09      	ldr	r3, [pc, #36]	; (8008dac <W25qxx_WriteSector+0xc4>)
 8008d88:	895b      	ldrh	r3, [r3, #10]
 8008d8a:	001a      	movs	r2, r3
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	1ad3      	subs	r3, r2, r3
 8008d90:	68fa      	ldr	r2, [r7, #12]
 8008d92:	18d3      	adds	r3, r2, r3
 8008d94:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8008d96:	2300      	movs	r3, #0
 8008d98:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 8008d9a:	69bb      	ldr	r3, [r7, #24]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	dce1      	bgt.n	8008d64 <W25qxx_WriteSector+0x7c>
 8008da0:	e000      	b.n	8008da4 <W25qxx_WriteSector+0xbc>
		return;
 8008da2:	46c0      	nop			; (mov r8, r8)
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 8008da4:	46bd      	mov	sp, r7
 8008da6:	b009      	add	sp, #36	; 0x24
 8008da8:	bd90      	pop	{r4, r7, pc}
 8008daa:	46c0      	nop			; (mov r8, r8)
 8008dac:	20000cec 	.word	0x20000cec

08008db0 <W25qxx_ReadByte>:
	W25qxx_Delay(100);
#endif
}
//###################################################################################################################
void W25qxx_ReadByte(uint8_t *pBuffer, uint32_t Bytes_Address)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b082      	sub	sp, #8
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]
	while (w25qxx.Lock == 1)
 8008dba:	e002      	b.n	8008dc2 <W25qxx_ReadByte+0x12>
		W25qxx_Delay(1);
 8008dbc:	2001      	movs	r0, #1
 8008dbe:	f000 fa3d 	bl	800923c <HAL_Delay>
	while (w25qxx.Lock == 1)
 8008dc2:	4b24      	ldr	r3, [pc, #144]	; (8008e54 <W25qxx_ReadByte+0xa4>)
 8008dc4:	2227      	movs	r2, #39	; 0x27
 8008dc6:	5c9b      	ldrb	r3, [r3, r2]
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	d0f7      	beq.n	8008dbc <W25qxx_ReadByte+0xc>
	w25qxx.Lock = 1;
 8008dcc:	4b21      	ldr	r3, [pc, #132]	; (8008e54 <W25qxx_ReadByte+0xa4>)
 8008dce:	2227      	movs	r2, #39	; 0x27
 8008dd0:	2101      	movs	r1, #1
 8008dd2:	5499      	strb	r1, [r3, r2]
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx ReadByte at address %d begin...\r\n", Bytes_Address);
#endif
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8008dd4:	4b20      	ldr	r3, [pc, #128]	; (8008e58 <W25qxx_ReadByte+0xa8>)
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	2108      	movs	r1, #8
 8008dda:	0018      	movs	r0, r3
 8008ddc:	f000 ffb2 	bl	8009d44 <HAL_GPIO_WritePin>

	if (w25qxx.ID >= W25Q256)
 8008de0:	4b1c      	ldr	r3, [pc, #112]	; (8008e54 <W25qxx_ReadByte+0xa4>)
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	2b08      	cmp	r3, #8
 8008de6:	d909      	bls.n	8008dfc <W25qxx_ReadByte+0x4c>
	{
		W25qxx_Spi(0x0C);
 8008de8:	200c      	movs	r0, #12
 8008dea:	f7ff fc41 	bl	8008670 <W25qxx_Spi>
		W25qxx_Spi((Bytes_Address & 0xFF000000) >> 24);
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	0e1b      	lsrs	r3, r3, #24
 8008df2:	b2db      	uxtb	r3, r3
 8008df4:	0018      	movs	r0, r3
 8008df6:	f7ff fc3b 	bl	8008670 <W25qxx_Spi>
 8008dfa:	e002      	b.n	8008e02 <W25qxx_ReadByte+0x52>
	}
	else
	{
		W25qxx_Spi(0x0B);
 8008dfc:	200b      	movs	r0, #11
 8008dfe:	f7ff fc37 	bl	8008670 <W25qxx_Spi>
	}
	W25qxx_Spi((Bytes_Address & 0xFF0000) >> 16);
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	0c1b      	lsrs	r3, r3, #16
 8008e06:	b2db      	uxtb	r3, r3
 8008e08:	0018      	movs	r0, r3
 8008e0a:	f7ff fc31 	bl	8008670 <W25qxx_Spi>
	W25qxx_Spi((Bytes_Address & 0xFF00) >> 8);
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	0a1b      	lsrs	r3, r3, #8
 8008e12:	b2db      	uxtb	r3, r3
 8008e14:	0018      	movs	r0, r3
 8008e16:	f7ff fc2b 	bl	8008670 <W25qxx_Spi>
	W25qxx_Spi(Bytes_Address & 0xFF);
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	b2db      	uxtb	r3, r3
 8008e1e:	0018      	movs	r0, r3
 8008e20:	f7ff fc26 	bl	8008670 <W25qxx_Spi>
	W25qxx_Spi(0);
 8008e24:	2000      	movs	r0, #0
 8008e26:	f7ff fc23 	bl	8008670 <W25qxx_Spi>
	*pBuffer = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8008e2a:	20a5      	movs	r0, #165	; 0xa5
 8008e2c:	f7ff fc20 	bl	8008670 <W25qxx_Spi>
 8008e30:	0003      	movs	r3, r0
 8008e32:	001a      	movs	r2, r3
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8008e38:	4b07      	ldr	r3, [pc, #28]	; (8008e58 <W25qxx_ReadByte+0xa8>)
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	2108      	movs	r1, #8
 8008e3e:	0018      	movs	r0, r3
 8008e40:	f000 ff80 	bl	8009d44 <HAL_GPIO_WritePin>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadByte 0x%02X done after %d ms\r\n", *pBuffer, HAL_GetTick() - StartTime);
#endif
	w25qxx.Lock = 0;
 8008e44:	4b03      	ldr	r3, [pc, #12]	; (8008e54 <W25qxx_ReadByte+0xa4>)
 8008e46:	2227      	movs	r2, #39	; 0x27
 8008e48:	2100      	movs	r1, #0
 8008e4a:	5499      	strb	r1, [r3, r2]
}
 8008e4c:	46c0      	nop			; (mov r8, r8)
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	b002      	add	sp, #8
 8008e52:	bd80      	pop	{r7, pc}
 8008e54:	20000cec 	.word	0x20000cec
 8008e58:	50000c00 	.word	0x50000c00

08008e5c <W25qxx_ReadBytes>:
//###################################################################################################################
void W25qxx_ReadBytes(uint8_t *pBuffer, uint32_t ReadAddr, uint32_t NumByteToRead)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b084      	sub	sp, #16
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	60f8      	str	r0, [r7, #12]
 8008e64:	60b9      	str	r1, [r7, #8]
 8008e66:	607a      	str	r2, [r7, #4]
	while (w25qxx.Lock == 1)
 8008e68:	e002      	b.n	8008e70 <W25qxx_ReadBytes+0x14>
		W25qxx_Delay(1);
 8008e6a:	2001      	movs	r0, #1
 8008e6c:	f000 f9e6 	bl	800923c <HAL_Delay>
	while (w25qxx.Lock == 1)
 8008e70:	4b26      	ldr	r3, [pc, #152]	; (8008f0c <W25qxx_ReadBytes+0xb0>)
 8008e72:	2227      	movs	r2, #39	; 0x27
 8008e74:	5c9b      	ldrb	r3, [r3, r2]
 8008e76:	2b01      	cmp	r3, #1
 8008e78:	d0f7      	beq.n	8008e6a <W25qxx_ReadBytes+0xe>
	w25qxx.Lock = 1;
 8008e7a:	4b24      	ldr	r3, [pc, #144]	; (8008f0c <W25qxx_ReadBytes+0xb0>)
 8008e7c:	2227      	movs	r2, #39	; 0x27
 8008e7e:	2101      	movs	r1, #1
 8008e80:	5499      	strb	r1, [r3, r2]
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx ReadBytes at Address:%d, %d Bytes  begin...\r\n", ReadAddr, NumByteToRead);
#endif
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8008e82:	4b23      	ldr	r3, [pc, #140]	; (8008f10 <W25qxx_ReadBytes+0xb4>)
 8008e84:	2200      	movs	r2, #0
 8008e86:	2108      	movs	r1, #8
 8008e88:	0018      	movs	r0, r3
 8008e8a:	f000 ff5b 	bl	8009d44 <HAL_GPIO_WritePin>

	if (w25qxx.ID >= W25Q256)
 8008e8e:	4b1f      	ldr	r3, [pc, #124]	; (8008f0c <W25qxx_ReadBytes+0xb0>)
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	2b08      	cmp	r3, #8
 8008e94:	d909      	bls.n	8008eaa <W25qxx_ReadBytes+0x4e>
	{
		W25qxx_Spi(0x0C);
 8008e96:	200c      	movs	r0, #12
 8008e98:	f7ff fbea 	bl	8008670 <W25qxx_Spi>
		W25qxx_Spi((ReadAddr & 0xFF000000) >> 24);
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	0e1b      	lsrs	r3, r3, #24
 8008ea0:	b2db      	uxtb	r3, r3
 8008ea2:	0018      	movs	r0, r3
 8008ea4:	f7ff fbe4 	bl	8008670 <W25qxx_Spi>
 8008ea8:	e002      	b.n	8008eb0 <W25qxx_ReadBytes+0x54>
	}
	else
	{
		W25qxx_Spi(0x0B);
 8008eaa:	200b      	movs	r0, #11
 8008eac:	f7ff fbe0 	bl	8008670 <W25qxx_Spi>
	}
	W25qxx_Spi((ReadAddr & 0xFF0000) >> 16);
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	0c1b      	lsrs	r3, r3, #16
 8008eb4:	b2db      	uxtb	r3, r3
 8008eb6:	0018      	movs	r0, r3
 8008eb8:	f7ff fbda 	bl	8008670 <W25qxx_Spi>
	W25qxx_Spi((ReadAddr & 0xFF00) >> 8);
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	0a1b      	lsrs	r3, r3, #8
 8008ec0:	b2db      	uxtb	r3, r3
 8008ec2:	0018      	movs	r0, r3
 8008ec4:	f7ff fbd4 	bl	8008670 <W25qxx_Spi>
	W25qxx_Spi(ReadAddr & 0xFF);
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	b2db      	uxtb	r3, r3
 8008ecc:	0018      	movs	r0, r3
 8008ece:	f7ff fbcf 	bl	8008670 <W25qxx_Spi>
	W25qxx_Spi(0);
 8008ed2:	2000      	movs	r0, #0
 8008ed4:	f7ff fbcc 	bl	8008670 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead, 2000);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	b29a      	uxth	r2, r3
 8008edc:	23fa      	movs	r3, #250	; 0xfa
 8008ede:	00db      	lsls	r3, r3, #3
 8008ee0:	68f9      	ldr	r1, [r7, #12]
 8008ee2:	480c      	ldr	r0, [pc, #48]	; (8008f14 <W25qxx_ReadBytes+0xb8>)
 8008ee4:	f001 ffb0 	bl	800ae48 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8008ee8:	4b09      	ldr	r3, [pc, #36]	; (8008f10 <W25qxx_ReadBytes+0xb4>)
 8008eea:	2201      	movs	r2, #1
 8008eec:	2108      	movs	r1, #8
 8008eee:	0018      	movs	r0, r3
 8008ef0:	f000 ff28 	bl	8009d44 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadBytes done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8008ef4:	2001      	movs	r0, #1
 8008ef6:	f000 f9a1 	bl	800923c <HAL_Delay>
	w25qxx.Lock = 0;
 8008efa:	4b04      	ldr	r3, [pc, #16]	; (8008f0c <W25qxx_ReadBytes+0xb0>)
 8008efc:	2227      	movs	r2, #39	; 0x27
 8008efe:	2100      	movs	r1, #0
 8008f00:	5499      	strb	r1, [r3, r2]
}
 8008f02:	46c0      	nop			; (mov r8, r8)
 8008f04:	46bd      	mov	sp, r7
 8008f06:	b004      	add	sp, #16
 8008f08:	bd80      	pop	{r7, pc}
 8008f0a:	46c0      	nop			; (mov r8, r8)
 8008f0c:	20000cec 	.word	0x20000cec
 8008f10:	50000c00 	.word	0x50000c00
 8008f14:	200002c0 	.word	0x200002c0

08008f18 <W25qxx_ReadPage>:
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b084      	sub	sp, #16
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	60f8      	str	r0, [r7, #12]
 8008f20:	60b9      	str	r1, [r7, #8]
 8008f22:	607a      	str	r2, [r7, #4]
 8008f24:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8008f26:	e002      	b.n	8008f2e <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8008f28:	2001      	movs	r0, #1
 8008f2a:	f000 f987 	bl	800923c <HAL_Delay>
	while (w25qxx.Lock == 1)
 8008f2e:	4b36      	ldr	r3, [pc, #216]	; (8009008 <W25qxx_ReadPage+0xf0>)
 8008f30:	2227      	movs	r2, #39	; 0x27
 8008f32:	5c9b      	ldrb	r3, [r3, r2]
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	d0f7      	beq.n	8008f28 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 8008f38:	4b33      	ldr	r3, [pc, #204]	; (8009008 <W25qxx_ReadPage+0xf0>)
 8008f3a:	2227      	movs	r2, #39	; 0x27
 8008f3c:	2101      	movs	r1, #1
 8008f3e:	5499      	strb	r1, [r3, r2]
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 8008f40:	4b31      	ldr	r3, [pc, #196]	; (8009008 <W25qxx_ReadPage+0xf0>)
 8008f42:	895b      	ldrh	r3, [r3, #10]
 8008f44:	001a      	movs	r2, r3
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d802      	bhi.n	8008f52 <W25qxx_ReadPage+0x3a>
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d102      	bne.n	8008f58 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 8008f52:	4b2d      	ldr	r3, [pc, #180]	; (8009008 <W25qxx_ReadPage+0xf0>)
 8008f54:	895b      	ldrh	r3, [r3, #10]
 8008f56:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8008f58:	687a      	ldr	r2, [r7, #4]
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	18d3      	adds	r3, r2, r3
 8008f5e:	4a2a      	ldr	r2, [pc, #168]	; (8009008 <W25qxx_ReadPage+0xf0>)
 8008f60:	8952      	ldrh	r2, [r2, #10]
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d905      	bls.n	8008f72 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8008f66:	4b28      	ldr	r3, [pc, #160]	; (8009008 <W25qxx_ReadPage+0xf0>)
 8008f68:	895b      	ldrh	r3, [r3, #10]
 8008f6a:	001a      	movs	r2, r3
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	1ad3      	subs	r3, r2, r3
 8008f70:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 8008f72:	4b25      	ldr	r3, [pc, #148]	; (8009008 <W25qxx_ReadPage+0xf0>)
 8008f74:	895b      	ldrh	r3, [r3, #10]
 8008f76:	001a      	movs	r2, r3
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	4353      	muls	r3, r2
 8008f7c:	687a      	ldr	r2, [r7, #4]
 8008f7e:	18d3      	adds	r3, r2, r3
 8008f80:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8008f82:	4b22      	ldr	r3, [pc, #136]	; (800900c <W25qxx_ReadPage+0xf4>)
 8008f84:	2200      	movs	r2, #0
 8008f86:	2108      	movs	r1, #8
 8008f88:	0018      	movs	r0, r3
 8008f8a:	f000 fedb 	bl	8009d44 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8008f8e:	4b1e      	ldr	r3, [pc, #120]	; (8009008 <W25qxx_ReadPage+0xf0>)
 8008f90:	781b      	ldrb	r3, [r3, #0]
 8008f92:	2b08      	cmp	r3, #8
 8008f94:	d909      	bls.n	8008faa <W25qxx_ReadPage+0x92>
	{
		W25qxx_Spi(0x0C);
 8008f96:	200c      	movs	r0, #12
 8008f98:	f7ff fb6a 	bl	8008670 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	0e1b      	lsrs	r3, r3, #24
 8008fa0:	b2db      	uxtb	r3, r3
 8008fa2:	0018      	movs	r0, r3
 8008fa4:	f7ff fb64 	bl	8008670 <W25qxx_Spi>
 8008fa8:	e002      	b.n	8008fb0 <W25qxx_ReadPage+0x98>
	}
	else
	{
		W25qxx_Spi(0x0B);
 8008faa:	200b      	movs	r0, #11
 8008fac:	f7ff fb60 	bl	8008670 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	0c1b      	lsrs	r3, r3, #16
 8008fb4:	b2db      	uxtb	r3, r3
 8008fb6:	0018      	movs	r0, r3
 8008fb8:	f7ff fb5a 	bl	8008670 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	0a1b      	lsrs	r3, r3, #8
 8008fc0:	b2db      	uxtb	r3, r3
 8008fc2:	0018      	movs	r0, r3
 8008fc4:	f7ff fb54 	bl	8008670 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	b2db      	uxtb	r3, r3
 8008fcc:	0018      	movs	r0, r3
 8008fce:	f7ff fb4f 	bl	8008670 <W25qxx_Spi>
	W25qxx_Spi(0);
 8008fd2:	2000      	movs	r0, #0
 8008fd4:	f7ff fb4c 	bl	8008670 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	b29a      	uxth	r2, r3
 8008fdc:	68f9      	ldr	r1, [r7, #12]
 8008fde:	480c      	ldr	r0, [pc, #48]	; (8009010 <W25qxx_ReadPage+0xf8>)
 8008fe0:	2364      	movs	r3, #100	; 0x64
 8008fe2:	f001 ff31 	bl	800ae48 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8008fe6:	4b09      	ldr	r3, [pc, #36]	; (800900c <W25qxx_ReadPage+0xf4>)
 8008fe8:	2201      	movs	r2, #1
 8008fea:	2108      	movs	r1, #8
 8008fec:	0018      	movs	r0, r3
 8008fee:	f000 fea9 	bl	8009d44 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8008ff2:	2001      	movs	r0, #1
 8008ff4:	f000 f922 	bl	800923c <HAL_Delay>
	w25qxx.Lock = 0;
 8008ff8:	4b03      	ldr	r3, [pc, #12]	; (8009008 <W25qxx_ReadPage+0xf0>)
 8008ffa:	2227      	movs	r2, #39	; 0x27
 8008ffc:	2100      	movs	r1, #0
 8008ffe:	5499      	strb	r1, [r3, r2]
}
 8009000:	46c0      	nop			; (mov r8, r8)
 8009002:	46bd      	mov	sp, r7
 8009004:	b004      	add	sp, #16
 8009006:	bd80      	pop	{r7, pc}
 8009008:	20000cec 	.word	0x20000cec
 800900c:	50000c00 	.word	0x50000c00
 8009010:	200002c0 	.word	0x200002c0

08009014 <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 8009014:	b590      	push	{r4, r7, lr}
 8009016:	b089      	sub	sp, #36	; 0x24
 8009018:	af00      	add	r7, sp, #0
 800901a:	60f8      	str	r0, [r7, #12]
 800901c:	60b9      	str	r1, [r7, #8]
 800901e:	607a      	str	r2, [r7, #4]
 8009020:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 8009022:	4b2d      	ldr	r3, [pc, #180]	; (80090d8 <W25qxx_ReadSector+0xc4>)
 8009024:	691b      	ldr	r3, [r3, #16]
 8009026:	683a      	ldr	r2, [r7, #0]
 8009028:	429a      	cmp	r2, r3
 800902a:	d802      	bhi.n	8009032 <W25qxx_ReadSector+0x1e>
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d102      	bne.n	8009038 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 8009032:	4b29      	ldr	r3, [pc, #164]	; (80090d8 <W25qxx_ReadSector+0xc4>)
 8009034:	691b      	ldr	r3, [r3, #16]
 8009036:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8009038:	4b27      	ldr	r3, [pc, #156]	; (80090d8 <W25qxx_ReadSector+0xc4>)
 800903a:	691b      	ldr	r3, [r3, #16]
 800903c:	687a      	ldr	r2, [r7, #4]
 800903e:	429a      	cmp	r2, r3
 8009040:	d245      	bcs.n	80090ce <W25qxx_ReadSector+0xba>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 8009042:	687a      	ldr	r2, [r7, #4]
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	18d2      	adds	r2, r2, r3
 8009048:	4b23      	ldr	r3, [pc, #140]	; (80090d8 <W25qxx_ReadSector+0xc4>)
 800904a:	691b      	ldr	r3, [r3, #16]
 800904c:	429a      	cmp	r2, r3
 800904e:	d905      	bls.n	800905c <W25qxx_ReadSector+0x48>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 8009050:	4b21      	ldr	r3, [pc, #132]	; (80090d8 <W25qxx_ReadSector+0xc4>)
 8009052:	691a      	ldr	r2, [r3, #16]
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	1ad3      	subs	r3, r2, r3
 8009058:	61bb      	str	r3, [r7, #24]
 800905a:	e001      	b.n	8009060 <W25qxx_ReadSector+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	0018      	movs	r0, r3
 8009064:	f7ff fd4a 	bl	8008afc <W25qxx_SectorToPage>
 8009068:	0004      	movs	r4, r0
 800906a:	4b1b      	ldr	r3, [pc, #108]	; (80090d8 <W25qxx_ReadSector+0xc4>)
 800906c:	895b      	ldrh	r3, [r3, #10]
 800906e:	0019      	movs	r1, r3
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f7f7 f86b 	bl	800014c <__udivsi3>
 8009076:	0003      	movs	r3, r0
 8009078:	18e3      	adds	r3, r4, r3
 800907a:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 800907c:	4b16      	ldr	r3, [pc, #88]	; (80090d8 <W25qxx_ReadSector+0xc4>)
 800907e:	895b      	ldrh	r3, [r3, #10]
 8009080:	001a      	movs	r2, r3
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	0011      	movs	r1, r2
 8009086:	0018      	movs	r0, r3
 8009088:	f7f7 f8e6 	bl	8000258 <__aeabi_uidivmod>
 800908c:	000b      	movs	r3, r1
 800908e:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8009090:	69bb      	ldr	r3, [r7, #24]
 8009092:	697a      	ldr	r2, [r7, #20]
 8009094:	69f9      	ldr	r1, [r7, #28]
 8009096:	68f8      	ldr	r0, [r7, #12]
 8009098:	f7ff ff3e 	bl	8008f18 <W25qxx_ReadPage>
		StartPage++;
 800909c:	69fb      	ldr	r3, [r7, #28]
 800909e:	3301      	adds	r3, #1
 80090a0:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 80090a2:	4b0d      	ldr	r3, [pc, #52]	; (80090d8 <W25qxx_ReadSector+0xc4>)
 80090a4:	895b      	ldrh	r3, [r3, #10]
 80090a6:	001a      	movs	r2, r3
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	1a9a      	subs	r2, r3, r2
 80090ac:	69bb      	ldr	r3, [r7, #24]
 80090ae:	18d3      	adds	r3, r2, r3
 80090b0:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 80090b2:	4b09      	ldr	r3, [pc, #36]	; (80090d8 <W25qxx_ReadSector+0xc4>)
 80090b4:	895b      	ldrh	r3, [r3, #10]
 80090b6:	001a      	movs	r2, r3
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	1ad3      	subs	r3, r2, r3
 80090bc:	68fa      	ldr	r2, [r7, #12]
 80090be:	18d3      	adds	r3, r2, r3
 80090c0:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 80090c2:	2300      	movs	r3, #0
 80090c4:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 80090c6:	69bb      	ldr	r3, [r7, #24]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	dce1      	bgt.n	8009090 <W25qxx_ReadSector+0x7c>
 80090cc:	e000      	b.n	80090d0 <W25qxx_ReadSector+0xbc>
		return;
 80090ce:	46c0      	nop			; (mov r8, r8)
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
#endif

}
 80090d0:	46bd      	mov	sp, r7
 80090d2:	b009      	add	sp, #36	; 0x24
 80090d4:	bd90      	pop	{r4, r7, pc}
 80090d6:	46c0      	nop			; (mov r8, r8)
 80090d8:	20000cec 	.word	0x20000cec

080090dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80090dc:	480d      	ldr	r0, [pc, #52]	; (8009114 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80090de:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80090e0:	f7ff fac0 	bl	8008664 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80090e4:	480c      	ldr	r0, [pc, #48]	; (8009118 <LoopForever+0x6>)
  ldr r1, =_edata
 80090e6:	490d      	ldr	r1, [pc, #52]	; (800911c <LoopForever+0xa>)
  ldr r2, =_sidata
 80090e8:	4a0d      	ldr	r2, [pc, #52]	; (8009120 <LoopForever+0xe>)
  movs r3, #0
 80090ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80090ec:	e002      	b.n	80090f4 <LoopCopyDataInit>

080090ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80090ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80090f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80090f2:	3304      	adds	r3, #4

080090f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80090f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80090f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80090f8:	d3f9      	bcc.n	80090ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80090fa:	4a0a      	ldr	r2, [pc, #40]	; (8009124 <LoopForever+0x12>)
  ldr r4, =_ebss
 80090fc:	4c0a      	ldr	r4, [pc, #40]	; (8009128 <LoopForever+0x16>)
  movs r3, #0
 80090fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009100:	e001      	b.n	8009106 <LoopFillZerobss>

08009102 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009102:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009104:	3204      	adds	r2, #4

08009106 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009106:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009108:	d3fb      	bcc.n	8009102 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800910a:	f005 fc3f 	bl	800e98c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800910e:	f7fa ff67 	bl	8003fe0 <main>

08009112 <LoopForever>:

LoopForever:
  b LoopForever
 8009112:	e7fe      	b.n	8009112 <LoopForever>
  ldr   r0, =_estack
 8009114:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8009118:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800911c:	20000290 	.word	0x20000290
  ldr r2, =_sidata
 8009120:	08013938 	.word	0x08013938
  ldr r2, =_sbss
 8009124:	20000290 	.word	0x20000290
  ldr r4, =_ebss
 8009128:	20000d28 	.word	0x20000d28

0800912c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800912c:	e7fe      	b.n	800912c <ADC1_IRQHandler>
	...

08009130 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b082      	sub	sp, #8
 8009134:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8009136:	1dfb      	adds	r3, r7, #7
 8009138:	2200      	movs	r2, #0
 800913a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800913c:	4b0b      	ldr	r3, [pc, #44]	; (800916c <HAL_Init+0x3c>)
 800913e:	681a      	ldr	r2, [r3, #0]
 8009140:	4b0a      	ldr	r3, [pc, #40]	; (800916c <HAL_Init+0x3c>)
 8009142:	2180      	movs	r1, #128	; 0x80
 8009144:	0049      	lsls	r1, r1, #1
 8009146:	430a      	orrs	r2, r1
 8009148:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800914a:	2000      	movs	r0, #0
 800914c:	f000 f810 	bl	8009170 <HAL_InitTick>
 8009150:	1e03      	subs	r3, r0, #0
 8009152:	d003      	beq.n	800915c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8009154:	1dfb      	adds	r3, r7, #7
 8009156:	2201      	movs	r2, #1
 8009158:	701a      	strb	r2, [r3, #0]
 800915a:	e001      	b.n	8009160 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800915c:	f7fe fe7e 	bl	8007e5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8009160:	1dfb      	adds	r3, r7, #7
 8009162:	781b      	ldrb	r3, [r3, #0]
}
 8009164:	0018      	movs	r0, r3
 8009166:	46bd      	mov	sp, r7
 8009168:	b002      	add	sp, #8
 800916a:	bd80      	pop	{r7, pc}
 800916c:	40022000 	.word	0x40022000

08009170 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009170:	b590      	push	{r4, r7, lr}
 8009172:	b085      	sub	sp, #20
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8009178:	230f      	movs	r3, #15
 800917a:	18fb      	adds	r3, r7, r3
 800917c:	2200      	movs	r2, #0
 800917e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8009180:	4b1d      	ldr	r3, [pc, #116]	; (80091f8 <HAL_InitTick+0x88>)
 8009182:	781b      	ldrb	r3, [r3, #0]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d02b      	beq.n	80091e0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8009188:	4b1c      	ldr	r3, [pc, #112]	; (80091fc <HAL_InitTick+0x8c>)
 800918a:	681c      	ldr	r4, [r3, #0]
 800918c:	4b1a      	ldr	r3, [pc, #104]	; (80091f8 <HAL_InitTick+0x88>)
 800918e:	781b      	ldrb	r3, [r3, #0]
 8009190:	0019      	movs	r1, r3
 8009192:	23fa      	movs	r3, #250	; 0xfa
 8009194:	0098      	lsls	r0, r3, #2
 8009196:	f7f6 ffd9 	bl	800014c <__udivsi3>
 800919a:	0003      	movs	r3, r0
 800919c:	0019      	movs	r1, r3
 800919e:	0020      	movs	r0, r4
 80091a0:	f7f6 ffd4 	bl	800014c <__udivsi3>
 80091a4:	0003      	movs	r3, r0
 80091a6:	0018      	movs	r0, r3
 80091a8:	f000 f93d 	bl	8009426 <HAL_SYSTICK_Config>
 80091ac:	1e03      	subs	r3, r0, #0
 80091ae:	d112      	bne.n	80091d6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2b03      	cmp	r3, #3
 80091b4:	d80a      	bhi.n	80091cc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80091b6:	6879      	ldr	r1, [r7, #4]
 80091b8:	2301      	movs	r3, #1
 80091ba:	425b      	negs	r3, r3
 80091bc:	2200      	movs	r2, #0
 80091be:	0018      	movs	r0, r3
 80091c0:	f000 f90c 	bl	80093dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80091c4:	4b0e      	ldr	r3, [pc, #56]	; (8009200 <HAL_InitTick+0x90>)
 80091c6:	687a      	ldr	r2, [r7, #4]
 80091c8:	601a      	str	r2, [r3, #0]
 80091ca:	e00d      	b.n	80091e8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80091cc:	230f      	movs	r3, #15
 80091ce:	18fb      	adds	r3, r7, r3
 80091d0:	2201      	movs	r2, #1
 80091d2:	701a      	strb	r2, [r3, #0]
 80091d4:	e008      	b.n	80091e8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80091d6:	230f      	movs	r3, #15
 80091d8:	18fb      	adds	r3, r7, r3
 80091da:	2201      	movs	r2, #1
 80091dc:	701a      	strb	r2, [r3, #0]
 80091de:	e003      	b.n	80091e8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80091e0:	230f      	movs	r3, #15
 80091e2:	18fb      	adds	r3, r7, r3
 80091e4:	2201      	movs	r2, #1
 80091e6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80091e8:	230f      	movs	r3, #15
 80091ea:	18fb      	adds	r3, r7, r3
 80091ec:	781b      	ldrb	r3, [r3, #0]
}
 80091ee:	0018      	movs	r0, r3
 80091f0:	46bd      	mov	sp, r7
 80091f2:	b005      	add	sp, #20
 80091f4:	bd90      	pop	{r4, r7, pc}
 80091f6:	46c0      	nop			; (mov r8, r8)
 80091f8:	200000b8 	.word	0x200000b8
 80091fc:	200000b0 	.word	0x200000b0
 8009200:	200000b4 	.word	0x200000b4

08009204 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8009208:	4b05      	ldr	r3, [pc, #20]	; (8009220 <HAL_IncTick+0x1c>)
 800920a:	781b      	ldrb	r3, [r3, #0]
 800920c:	001a      	movs	r2, r3
 800920e:	4b05      	ldr	r3, [pc, #20]	; (8009224 <HAL_IncTick+0x20>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	18d2      	adds	r2, r2, r3
 8009214:	4b03      	ldr	r3, [pc, #12]	; (8009224 <HAL_IncTick+0x20>)
 8009216:	601a      	str	r2, [r3, #0]
}
 8009218:	46c0      	nop			; (mov r8, r8)
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}
 800921e:	46c0      	nop			; (mov r8, r8)
 8009220:	200000b8 	.word	0x200000b8
 8009224:	20000d14 	.word	0x20000d14

08009228 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	af00      	add	r7, sp, #0
  return uwTick;
 800922c:	4b02      	ldr	r3, [pc, #8]	; (8009238 <HAL_GetTick+0x10>)
 800922e:	681b      	ldr	r3, [r3, #0]
}
 8009230:	0018      	movs	r0, r3
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	46c0      	nop			; (mov r8, r8)
 8009238:	20000d14 	.word	0x20000d14

0800923c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b084      	sub	sp, #16
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009244:	f7ff fff0 	bl	8009228 <HAL_GetTick>
 8009248:	0003      	movs	r3, r0
 800924a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	3301      	adds	r3, #1
 8009254:	d005      	beq.n	8009262 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009256:	4b0a      	ldr	r3, [pc, #40]	; (8009280 <HAL_Delay+0x44>)
 8009258:	781b      	ldrb	r3, [r3, #0]
 800925a:	001a      	movs	r2, r3
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	189b      	adds	r3, r3, r2
 8009260:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009262:	46c0      	nop			; (mov r8, r8)
 8009264:	f7ff ffe0 	bl	8009228 <HAL_GetTick>
 8009268:	0002      	movs	r2, r0
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	1ad3      	subs	r3, r2, r3
 800926e:	68fa      	ldr	r2, [r7, #12]
 8009270:	429a      	cmp	r2, r3
 8009272:	d8f7      	bhi.n	8009264 <HAL_Delay+0x28>
  {
  }
}
 8009274:	46c0      	nop			; (mov r8, r8)
 8009276:	46c0      	nop			; (mov r8, r8)
 8009278:	46bd      	mov	sp, r7
 800927a:	b004      	add	sp, #16
 800927c:	bd80      	pop	{r7, pc}
 800927e:	46c0      	nop			; (mov r8, r8)
 8009280:	200000b8 	.word	0x200000b8

08009284 <__NVIC_EnableIRQ>:
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b082      	sub	sp, #8
 8009288:	af00      	add	r7, sp, #0
 800928a:	0002      	movs	r2, r0
 800928c:	1dfb      	adds	r3, r7, #7
 800928e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8009290:	1dfb      	adds	r3, r7, #7
 8009292:	781b      	ldrb	r3, [r3, #0]
 8009294:	2b7f      	cmp	r3, #127	; 0x7f
 8009296:	d809      	bhi.n	80092ac <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009298:	1dfb      	adds	r3, r7, #7
 800929a:	781b      	ldrb	r3, [r3, #0]
 800929c:	001a      	movs	r2, r3
 800929e:	231f      	movs	r3, #31
 80092a0:	401a      	ands	r2, r3
 80092a2:	4b04      	ldr	r3, [pc, #16]	; (80092b4 <__NVIC_EnableIRQ+0x30>)
 80092a4:	2101      	movs	r1, #1
 80092a6:	4091      	lsls	r1, r2
 80092a8:	000a      	movs	r2, r1
 80092aa:	601a      	str	r2, [r3, #0]
}
 80092ac:	46c0      	nop			; (mov r8, r8)
 80092ae:	46bd      	mov	sp, r7
 80092b0:	b002      	add	sp, #8
 80092b2:	bd80      	pop	{r7, pc}
 80092b4:	e000e100 	.word	0xe000e100

080092b8 <__NVIC_SetPriority>:
{
 80092b8:	b590      	push	{r4, r7, lr}
 80092ba:	b083      	sub	sp, #12
 80092bc:	af00      	add	r7, sp, #0
 80092be:	0002      	movs	r2, r0
 80092c0:	6039      	str	r1, [r7, #0]
 80092c2:	1dfb      	adds	r3, r7, #7
 80092c4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80092c6:	1dfb      	adds	r3, r7, #7
 80092c8:	781b      	ldrb	r3, [r3, #0]
 80092ca:	2b7f      	cmp	r3, #127	; 0x7f
 80092cc:	d828      	bhi.n	8009320 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80092ce:	4a2f      	ldr	r2, [pc, #188]	; (800938c <__NVIC_SetPriority+0xd4>)
 80092d0:	1dfb      	adds	r3, r7, #7
 80092d2:	781b      	ldrb	r3, [r3, #0]
 80092d4:	b25b      	sxtb	r3, r3
 80092d6:	089b      	lsrs	r3, r3, #2
 80092d8:	33c0      	adds	r3, #192	; 0xc0
 80092da:	009b      	lsls	r3, r3, #2
 80092dc:	589b      	ldr	r3, [r3, r2]
 80092de:	1dfa      	adds	r2, r7, #7
 80092e0:	7812      	ldrb	r2, [r2, #0]
 80092e2:	0011      	movs	r1, r2
 80092e4:	2203      	movs	r2, #3
 80092e6:	400a      	ands	r2, r1
 80092e8:	00d2      	lsls	r2, r2, #3
 80092ea:	21ff      	movs	r1, #255	; 0xff
 80092ec:	4091      	lsls	r1, r2
 80092ee:	000a      	movs	r2, r1
 80092f0:	43d2      	mvns	r2, r2
 80092f2:	401a      	ands	r2, r3
 80092f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	019b      	lsls	r3, r3, #6
 80092fa:	22ff      	movs	r2, #255	; 0xff
 80092fc:	401a      	ands	r2, r3
 80092fe:	1dfb      	adds	r3, r7, #7
 8009300:	781b      	ldrb	r3, [r3, #0]
 8009302:	0018      	movs	r0, r3
 8009304:	2303      	movs	r3, #3
 8009306:	4003      	ands	r3, r0
 8009308:	00db      	lsls	r3, r3, #3
 800930a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800930c:	481f      	ldr	r0, [pc, #124]	; (800938c <__NVIC_SetPriority+0xd4>)
 800930e:	1dfb      	adds	r3, r7, #7
 8009310:	781b      	ldrb	r3, [r3, #0]
 8009312:	b25b      	sxtb	r3, r3
 8009314:	089b      	lsrs	r3, r3, #2
 8009316:	430a      	orrs	r2, r1
 8009318:	33c0      	adds	r3, #192	; 0xc0
 800931a:	009b      	lsls	r3, r3, #2
 800931c:	501a      	str	r2, [r3, r0]
}
 800931e:	e031      	b.n	8009384 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009320:	4a1b      	ldr	r2, [pc, #108]	; (8009390 <__NVIC_SetPriority+0xd8>)
 8009322:	1dfb      	adds	r3, r7, #7
 8009324:	781b      	ldrb	r3, [r3, #0]
 8009326:	0019      	movs	r1, r3
 8009328:	230f      	movs	r3, #15
 800932a:	400b      	ands	r3, r1
 800932c:	3b08      	subs	r3, #8
 800932e:	089b      	lsrs	r3, r3, #2
 8009330:	3306      	adds	r3, #6
 8009332:	009b      	lsls	r3, r3, #2
 8009334:	18d3      	adds	r3, r2, r3
 8009336:	3304      	adds	r3, #4
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	1dfa      	adds	r2, r7, #7
 800933c:	7812      	ldrb	r2, [r2, #0]
 800933e:	0011      	movs	r1, r2
 8009340:	2203      	movs	r2, #3
 8009342:	400a      	ands	r2, r1
 8009344:	00d2      	lsls	r2, r2, #3
 8009346:	21ff      	movs	r1, #255	; 0xff
 8009348:	4091      	lsls	r1, r2
 800934a:	000a      	movs	r2, r1
 800934c:	43d2      	mvns	r2, r2
 800934e:	401a      	ands	r2, r3
 8009350:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	019b      	lsls	r3, r3, #6
 8009356:	22ff      	movs	r2, #255	; 0xff
 8009358:	401a      	ands	r2, r3
 800935a:	1dfb      	adds	r3, r7, #7
 800935c:	781b      	ldrb	r3, [r3, #0]
 800935e:	0018      	movs	r0, r3
 8009360:	2303      	movs	r3, #3
 8009362:	4003      	ands	r3, r0
 8009364:	00db      	lsls	r3, r3, #3
 8009366:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009368:	4809      	ldr	r0, [pc, #36]	; (8009390 <__NVIC_SetPriority+0xd8>)
 800936a:	1dfb      	adds	r3, r7, #7
 800936c:	781b      	ldrb	r3, [r3, #0]
 800936e:	001c      	movs	r4, r3
 8009370:	230f      	movs	r3, #15
 8009372:	4023      	ands	r3, r4
 8009374:	3b08      	subs	r3, #8
 8009376:	089b      	lsrs	r3, r3, #2
 8009378:	430a      	orrs	r2, r1
 800937a:	3306      	adds	r3, #6
 800937c:	009b      	lsls	r3, r3, #2
 800937e:	18c3      	adds	r3, r0, r3
 8009380:	3304      	adds	r3, #4
 8009382:	601a      	str	r2, [r3, #0]
}
 8009384:	46c0      	nop			; (mov r8, r8)
 8009386:	46bd      	mov	sp, r7
 8009388:	b003      	add	sp, #12
 800938a:	bd90      	pop	{r4, r7, pc}
 800938c:	e000e100 	.word	0xe000e100
 8009390:	e000ed00 	.word	0xe000ed00

08009394 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b082      	sub	sp, #8
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	1e5a      	subs	r2, r3, #1
 80093a0:	2380      	movs	r3, #128	; 0x80
 80093a2:	045b      	lsls	r3, r3, #17
 80093a4:	429a      	cmp	r2, r3
 80093a6:	d301      	bcc.n	80093ac <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80093a8:	2301      	movs	r3, #1
 80093aa:	e010      	b.n	80093ce <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80093ac:	4b0a      	ldr	r3, [pc, #40]	; (80093d8 <SysTick_Config+0x44>)
 80093ae:	687a      	ldr	r2, [r7, #4]
 80093b0:	3a01      	subs	r2, #1
 80093b2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80093b4:	2301      	movs	r3, #1
 80093b6:	425b      	negs	r3, r3
 80093b8:	2103      	movs	r1, #3
 80093ba:	0018      	movs	r0, r3
 80093bc:	f7ff ff7c 	bl	80092b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80093c0:	4b05      	ldr	r3, [pc, #20]	; (80093d8 <SysTick_Config+0x44>)
 80093c2:	2200      	movs	r2, #0
 80093c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80093c6:	4b04      	ldr	r3, [pc, #16]	; (80093d8 <SysTick_Config+0x44>)
 80093c8:	2207      	movs	r2, #7
 80093ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80093cc:	2300      	movs	r3, #0
}
 80093ce:	0018      	movs	r0, r3
 80093d0:	46bd      	mov	sp, r7
 80093d2:	b002      	add	sp, #8
 80093d4:	bd80      	pop	{r7, pc}
 80093d6:	46c0      	nop			; (mov r8, r8)
 80093d8:	e000e010 	.word	0xe000e010

080093dc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	60b9      	str	r1, [r7, #8]
 80093e4:	607a      	str	r2, [r7, #4]
 80093e6:	210f      	movs	r1, #15
 80093e8:	187b      	adds	r3, r7, r1
 80093ea:	1c02      	adds	r2, r0, #0
 80093ec:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80093ee:	68ba      	ldr	r2, [r7, #8]
 80093f0:	187b      	adds	r3, r7, r1
 80093f2:	781b      	ldrb	r3, [r3, #0]
 80093f4:	b25b      	sxtb	r3, r3
 80093f6:	0011      	movs	r1, r2
 80093f8:	0018      	movs	r0, r3
 80093fa:	f7ff ff5d 	bl	80092b8 <__NVIC_SetPriority>
}
 80093fe:	46c0      	nop			; (mov r8, r8)
 8009400:	46bd      	mov	sp, r7
 8009402:	b004      	add	sp, #16
 8009404:	bd80      	pop	{r7, pc}

08009406 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009406:	b580      	push	{r7, lr}
 8009408:	b082      	sub	sp, #8
 800940a:	af00      	add	r7, sp, #0
 800940c:	0002      	movs	r2, r0
 800940e:	1dfb      	adds	r3, r7, #7
 8009410:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009412:	1dfb      	adds	r3, r7, #7
 8009414:	781b      	ldrb	r3, [r3, #0]
 8009416:	b25b      	sxtb	r3, r3
 8009418:	0018      	movs	r0, r3
 800941a:	f7ff ff33 	bl	8009284 <__NVIC_EnableIRQ>
}
 800941e:	46c0      	nop			; (mov r8, r8)
 8009420:	46bd      	mov	sp, r7
 8009422:	b002      	add	sp, #8
 8009424:	bd80      	pop	{r7, pc}

08009426 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009426:	b580      	push	{r7, lr}
 8009428:	b082      	sub	sp, #8
 800942a:	af00      	add	r7, sp, #0
 800942c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	0018      	movs	r0, r3
 8009432:	f7ff ffaf 	bl	8009394 <SysTick_Config>
 8009436:	0003      	movs	r3, r0
}
 8009438:	0018      	movs	r0, r3
 800943a:	46bd      	mov	sp, r7
 800943c:	b002      	add	sp, #8
 800943e:	bd80      	pop	{r7, pc}

08009440 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b082      	sub	sp, #8
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d101      	bne.n	8009452 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800944e:	2301      	movs	r3, #1
 8009450:	e077      	b.n	8009542 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	4a3d      	ldr	r2, [pc, #244]	; (800954c <HAL_DMA_Init+0x10c>)
 8009458:	4694      	mov	ip, r2
 800945a:	4463      	add	r3, ip
 800945c:	2114      	movs	r1, #20
 800945e:	0018      	movs	r0, r3
 8009460:	f7f6 fe74 	bl	800014c <__udivsi3>
 8009464:	0003      	movs	r3, r0
 8009466:	009a      	lsls	r2, r3, #2
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2225      	movs	r2, #37	; 0x25
 8009470:	2102      	movs	r1, #2
 8009472:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	681a      	ldr	r2, [r3, #0]
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	4934      	ldr	r1, [pc, #208]	; (8009550 <HAL_DMA_Init+0x110>)
 8009480:	400a      	ands	r2, r1
 8009482:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	6819      	ldr	r1, [r3, #0]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	689a      	ldr	r2, [r3, #8]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	68db      	ldr	r3, [r3, #12]
 8009492:	431a      	orrs	r2, r3
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	691b      	ldr	r3, [r3, #16]
 8009498:	431a      	orrs	r2, r3
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	695b      	ldr	r3, [r3, #20]
 800949e:	431a      	orrs	r2, r3
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	699b      	ldr	r3, [r3, #24]
 80094a4:	431a      	orrs	r2, r3
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	69db      	ldr	r3, [r3, #28]
 80094aa:	431a      	orrs	r2, r3
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6a1b      	ldr	r3, [r3, #32]
 80094b0:	431a      	orrs	r2, r3
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	430a      	orrs	r2, r1
 80094b8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	0018      	movs	r0, r3
 80094be:	f000 fa8d 	bl	80099dc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	689a      	ldr	r2, [r3, #8]
 80094c6:	2380      	movs	r3, #128	; 0x80
 80094c8:	01db      	lsls	r3, r3, #7
 80094ca:	429a      	cmp	r2, r3
 80094cc:	d102      	bne.n	80094d4 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2200      	movs	r2, #0
 80094d2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	685a      	ldr	r2, [r3, #4]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094dc:	213f      	movs	r1, #63	; 0x3f
 80094de:	400a      	ands	r2, r1
 80094e0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094e6:	687a      	ldr	r2, [r7, #4]
 80094e8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80094ea:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d011      	beq.n	8009518 <HAL_DMA_Init+0xd8>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	2b04      	cmp	r3, #4
 80094fa:	d80d      	bhi.n	8009518 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	0018      	movs	r0, r3
 8009500:	f000 fa98 	bl	8009a34 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009508:	2200      	movs	r2, #0
 800950a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009510:	687a      	ldr	r2, [r7, #4]
 8009512:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009514:	605a      	str	r2, [r3, #4]
 8009516:	e008      	b.n	800952a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2200      	movs	r2, #0
 800951c:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2200      	movs	r2, #0
 8009522:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2200      	movs	r2, #0
 8009528:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2200      	movs	r2, #0
 800952e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2225      	movs	r2, #37	; 0x25
 8009534:	2101      	movs	r1, #1
 8009536:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2224      	movs	r2, #36	; 0x24
 800953c:	2100      	movs	r1, #0
 800953e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009540:	2300      	movs	r3, #0
}
 8009542:	0018      	movs	r0, r3
 8009544:	46bd      	mov	sp, r7
 8009546:	b002      	add	sp, #8
 8009548:	bd80      	pop	{r7, pc}
 800954a:	46c0      	nop			; (mov r8, r8)
 800954c:	bffdfff8 	.word	0xbffdfff8
 8009550:	ffff800f 	.word	0xffff800f

08009554 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b086      	sub	sp, #24
 8009558:	af00      	add	r7, sp, #0
 800955a:	60f8      	str	r0, [r7, #12]
 800955c:	60b9      	str	r1, [r7, #8]
 800955e:	607a      	str	r2, [r7, #4]
 8009560:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009562:	2317      	movs	r3, #23
 8009564:	18fb      	adds	r3, r7, r3
 8009566:	2200      	movs	r2, #0
 8009568:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2224      	movs	r2, #36	; 0x24
 800956e:	5c9b      	ldrb	r3, [r3, r2]
 8009570:	2b01      	cmp	r3, #1
 8009572:	d101      	bne.n	8009578 <HAL_DMA_Start_IT+0x24>
 8009574:	2302      	movs	r3, #2
 8009576:	e06f      	b.n	8009658 <HAL_DMA_Start_IT+0x104>
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2224      	movs	r2, #36	; 0x24
 800957c:	2101      	movs	r1, #1
 800957e:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	2225      	movs	r2, #37	; 0x25
 8009584:	5c9b      	ldrb	r3, [r3, r2]
 8009586:	b2db      	uxtb	r3, r3
 8009588:	2b01      	cmp	r3, #1
 800958a:	d157      	bne.n	800963c <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2225      	movs	r2, #37	; 0x25
 8009590:	2102      	movs	r1, #2
 8009592:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	2200      	movs	r2, #0
 8009598:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	681a      	ldr	r2, [r3, #0]
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	2101      	movs	r1, #1
 80095a6:	438a      	bics	r2, r1
 80095a8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	687a      	ldr	r2, [r7, #4]
 80095ae:	68b9      	ldr	r1, [r7, #8]
 80095b0:	68f8      	ldr	r0, [r7, #12]
 80095b2:	f000 f9d3 	bl	800995c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d008      	beq.n	80095d0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	681a      	ldr	r2, [r3, #0]
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	210e      	movs	r1, #14
 80095ca:	430a      	orrs	r2, r1
 80095cc:	601a      	str	r2, [r3, #0]
 80095ce:	e00f      	b.n	80095f0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	681a      	ldr	r2, [r3, #0]
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	2104      	movs	r1, #4
 80095dc:	438a      	bics	r2, r1
 80095de:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	681a      	ldr	r2, [r3, #0]
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	210a      	movs	r1, #10
 80095ec:	430a      	orrs	r2, r1
 80095ee:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095f4:	681a      	ldr	r2, [r3, #0]
 80095f6:	2380      	movs	r3, #128	; 0x80
 80095f8:	025b      	lsls	r3, r3, #9
 80095fa:	4013      	ands	r3, r2
 80095fc:	d008      	beq.n	8009610 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009602:	681a      	ldr	r2, [r3, #0]
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009608:	2180      	movs	r1, #128	; 0x80
 800960a:	0049      	lsls	r1, r1, #1
 800960c:	430a      	orrs	r2, r1
 800960e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009614:	2b00      	cmp	r3, #0
 8009616:	d008      	beq.n	800962a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800961c:	681a      	ldr	r2, [r3, #0]
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009622:	2180      	movs	r1, #128	; 0x80
 8009624:	0049      	lsls	r1, r1, #1
 8009626:	430a      	orrs	r2, r1
 8009628:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	681a      	ldr	r2, [r3, #0]
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	2101      	movs	r1, #1
 8009636:	430a      	orrs	r2, r1
 8009638:	601a      	str	r2, [r3, #0]
 800963a:	e00a      	b.n	8009652 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2280      	movs	r2, #128	; 0x80
 8009640:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	2224      	movs	r2, #36	; 0x24
 8009646:	2100      	movs	r1, #0
 8009648:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800964a:	2317      	movs	r3, #23
 800964c:	18fb      	adds	r3, r7, r3
 800964e:	2201      	movs	r2, #1
 8009650:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8009652:	2317      	movs	r3, #23
 8009654:	18fb      	adds	r3, r7, r3
 8009656:	781b      	ldrb	r3, [r3, #0]
}
 8009658:	0018      	movs	r0, r3
 800965a:	46bd      	mov	sp, r7
 800965c:	b006      	add	sp, #24
 800965e:	bd80      	pop	{r7, pc}

08009660 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b082      	sub	sp, #8
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d101      	bne.n	8009672 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800966e:	2301      	movs	r3, #1
 8009670:	e050      	b.n	8009714 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2225      	movs	r2, #37	; 0x25
 8009676:	5c9b      	ldrb	r3, [r3, r2]
 8009678:	b2db      	uxtb	r3, r3
 800967a:	2b02      	cmp	r3, #2
 800967c:	d008      	beq.n	8009690 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2204      	movs	r2, #4
 8009682:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2224      	movs	r2, #36	; 0x24
 8009688:	2100      	movs	r1, #0
 800968a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800968c:	2301      	movs	r3, #1
 800968e:	e041      	b.n	8009714 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	681a      	ldr	r2, [r3, #0]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	210e      	movs	r1, #14
 800969c:	438a      	bics	r2, r1
 800969e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096a4:	681a      	ldr	r2, [r3, #0]
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096aa:	491c      	ldr	r1, [pc, #112]	; (800971c <HAL_DMA_Abort+0xbc>)
 80096ac:	400a      	ands	r2, r1
 80096ae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	681a      	ldr	r2, [r3, #0]
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	2101      	movs	r1, #1
 80096bc:	438a      	bics	r2, r1
 80096be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80096c0:	4b17      	ldr	r3, [pc, #92]	; (8009720 <HAL_DMA_Abort+0xc0>)
 80096c2:	6859      	ldr	r1, [r3, #4]
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096c8:	221c      	movs	r2, #28
 80096ca:	4013      	ands	r3, r2
 80096cc:	2201      	movs	r2, #1
 80096ce:	409a      	lsls	r2, r3
 80096d0:	4b13      	ldr	r3, [pc, #76]	; (8009720 <HAL_DMA_Abort+0xc0>)
 80096d2:	430a      	orrs	r2, r1
 80096d4:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096da:	687a      	ldr	r2, [r7, #4]
 80096dc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80096de:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d00c      	beq.n	8009702 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096ec:	681a      	ldr	r2, [r3, #0]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096f2:	490a      	ldr	r1, [pc, #40]	; (800971c <HAL_DMA_Abort+0xbc>)
 80096f4:	400a      	ands	r2, r1
 80096f6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096fc:	687a      	ldr	r2, [r7, #4]
 80096fe:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009700:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2225      	movs	r2, #37	; 0x25
 8009706:	2101      	movs	r1, #1
 8009708:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2224      	movs	r2, #36	; 0x24
 800970e:	2100      	movs	r1, #0
 8009710:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8009712:	2300      	movs	r3, #0
}
 8009714:	0018      	movs	r0, r3
 8009716:	46bd      	mov	sp, r7
 8009718:	b002      	add	sp, #8
 800971a:	bd80      	pop	{r7, pc}
 800971c:	fffffeff 	.word	0xfffffeff
 8009720:	40020000 	.word	0x40020000

08009724 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b084      	sub	sp, #16
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800972c:	210f      	movs	r1, #15
 800972e:	187b      	adds	r3, r7, r1
 8009730:	2200      	movs	r2, #0
 8009732:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2225      	movs	r2, #37	; 0x25
 8009738:	5c9b      	ldrb	r3, [r3, r2]
 800973a:	b2db      	uxtb	r3, r3
 800973c:	2b02      	cmp	r3, #2
 800973e:	d006      	beq.n	800974e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2204      	movs	r2, #4
 8009744:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8009746:	187b      	adds	r3, r7, r1
 8009748:	2201      	movs	r2, #1
 800974a:	701a      	strb	r2, [r3, #0]
 800974c:	e049      	b.n	80097e2 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	681a      	ldr	r2, [r3, #0]
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	210e      	movs	r1, #14
 800975a:	438a      	bics	r2, r1
 800975c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	681a      	ldr	r2, [r3, #0]
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	2101      	movs	r1, #1
 800976a:	438a      	bics	r2, r1
 800976c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009772:	681a      	ldr	r2, [r3, #0]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009778:	491d      	ldr	r1, [pc, #116]	; (80097f0 <HAL_DMA_Abort_IT+0xcc>)
 800977a:	400a      	ands	r2, r1
 800977c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800977e:	4b1d      	ldr	r3, [pc, #116]	; (80097f4 <HAL_DMA_Abort_IT+0xd0>)
 8009780:	6859      	ldr	r1, [r3, #4]
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009786:	221c      	movs	r2, #28
 8009788:	4013      	ands	r3, r2
 800978a:	2201      	movs	r2, #1
 800978c:	409a      	lsls	r2, r3
 800978e:	4b19      	ldr	r3, [pc, #100]	; (80097f4 <HAL_DMA_Abort_IT+0xd0>)
 8009790:	430a      	orrs	r2, r1
 8009792:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800979c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d00c      	beq.n	80097c0 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097aa:	681a      	ldr	r2, [r3, #0]
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097b0:	490f      	ldr	r1, [pc, #60]	; (80097f0 <HAL_DMA_Abort_IT+0xcc>)
 80097b2:	400a      	ands	r2, r1
 80097b4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097ba:	687a      	ldr	r2, [r7, #4]
 80097bc:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80097be:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2225      	movs	r2, #37	; 0x25
 80097c4:	2101      	movs	r1, #1
 80097c6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2224      	movs	r2, #36	; 0x24
 80097cc:	2100      	movs	r1, #0
 80097ce:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d004      	beq.n	80097e2 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097dc:	687a      	ldr	r2, [r7, #4]
 80097de:	0010      	movs	r0, r2
 80097e0:	4798      	blx	r3
    }
  }
  return status;
 80097e2:	230f      	movs	r3, #15
 80097e4:	18fb      	adds	r3, r7, r3
 80097e6:	781b      	ldrb	r3, [r3, #0]
}
 80097e8:	0018      	movs	r0, r3
 80097ea:	46bd      	mov	sp, r7
 80097ec:	b004      	add	sp, #16
 80097ee:	bd80      	pop	{r7, pc}
 80097f0:	fffffeff 	.word	0xfffffeff
 80097f4:	40020000 	.word	0x40020000

080097f8 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b084      	sub	sp, #16
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8009800:	4b55      	ldr	r3, [pc, #340]	; (8009958 <HAL_DMA_IRQHandler+0x160>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009812:	221c      	movs	r2, #28
 8009814:	4013      	ands	r3, r2
 8009816:	2204      	movs	r2, #4
 8009818:	409a      	lsls	r2, r3
 800981a:	0013      	movs	r3, r2
 800981c:	68fa      	ldr	r2, [r7, #12]
 800981e:	4013      	ands	r3, r2
 8009820:	d027      	beq.n	8009872 <HAL_DMA_IRQHandler+0x7a>
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	2204      	movs	r2, #4
 8009826:	4013      	ands	r3, r2
 8009828:	d023      	beq.n	8009872 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	2220      	movs	r2, #32
 8009832:	4013      	ands	r3, r2
 8009834:	d107      	bne.n	8009846 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	681a      	ldr	r2, [r3, #0]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	2104      	movs	r1, #4
 8009842:	438a      	bics	r2, r1
 8009844:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8009846:	4b44      	ldr	r3, [pc, #272]	; (8009958 <HAL_DMA_IRQHandler+0x160>)
 8009848:	6859      	ldr	r1, [r3, #4]
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800984e:	221c      	movs	r2, #28
 8009850:	4013      	ands	r3, r2
 8009852:	2204      	movs	r2, #4
 8009854:	409a      	lsls	r2, r3
 8009856:	4b40      	ldr	r3, [pc, #256]	; (8009958 <HAL_DMA_IRQHandler+0x160>)
 8009858:	430a      	orrs	r2, r1
 800985a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009860:	2b00      	cmp	r3, #0
 8009862:	d100      	bne.n	8009866 <HAL_DMA_IRQHandler+0x6e>
 8009864:	e073      	b.n	800994e <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800986a:	687a      	ldr	r2, [r7, #4]
 800986c:	0010      	movs	r0, r2
 800986e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8009870:	e06d      	b.n	800994e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009876:	221c      	movs	r2, #28
 8009878:	4013      	ands	r3, r2
 800987a:	2202      	movs	r2, #2
 800987c:	409a      	lsls	r2, r3
 800987e:	0013      	movs	r3, r2
 8009880:	68fa      	ldr	r2, [r7, #12]
 8009882:	4013      	ands	r3, r2
 8009884:	d02e      	beq.n	80098e4 <HAL_DMA_IRQHandler+0xec>
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	2202      	movs	r2, #2
 800988a:	4013      	ands	r3, r2
 800988c:	d02a      	beq.n	80098e4 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	2220      	movs	r2, #32
 8009896:	4013      	ands	r3, r2
 8009898:	d10b      	bne.n	80098b2 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	681a      	ldr	r2, [r3, #0]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	210a      	movs	r1, #10
 80098a6:	438a      	bics	r2, r1
 80098a8:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2225      	movs	r2, #37	; 0x25
 80098ae:	2101      	movs	r1, #1
 80098b0:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80098b2:	4b29      	ldr	r3, [pc, #164]	; (8009958 <HAL_DMA_IRQHandler+0x160>)
 80098b4:	6859      	ldr	r1, [r3, #4]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098ba:	221c      	movs	r2, #28
 80098bc:	4013      	ands	r3, r2
 80098be:	2202      	movs	r2, #2
 80098c0:	409a      	lsls	r2, r3
 80098c2:	4b25      	ldr	r3, [pc, #148]	; (8009958 <HAL_DMA_IRQHandler+0x160>)
 80098c4:	430a      	orrs	r2, r1
 80098c6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2224      	movs	r2, #36	; 0x24
 80098cc:	2100      	movs	r1, #0
 80098ce:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d03a      	beq.n	800994e <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098dc:	687a      	ldr	r2, [r7, #4]
 80098de:	0010      	movs	r0, r2
 80098e0:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80098e2:	e034      	b.n	800994e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098e8:	221c      	movs	r2, #28
 80098ea:	4013      	ands	r3, r2
 80098ec:	2208      	movs	r2, #8
 80098ee:	409a      	lsls	r2, r3
 80098f0:	0013      	movs	r3, r2
 80098f2:	68fa      	ldr	r2, [r7, #12]
 80098f4:	4013      	ands	r3, r2
 80098f6:	d02b      	beq.n	8009950 <HAL_DMA_IRQHandler+0x158>
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	2208      	movs	r2, #8
 80098fc:	4013      	ands	r3, r2
 80098fe:	d027      	beq.n	8009950 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	681a      	ldr	r2, [r3, #0]
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	210e      	movs	r1, #14
 800990c:	438a      	bics	r2, r1
 800990e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8009910:	4b11      	ldr	r3, [pc, #68]	; (8009958 <HAL_DMA_IRQHandler+0x160>)
 8009912:	6859      	ldr	r1, [r3, #4]
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009918:	221c      	movs	r2, #28
 800991a:	4013      	ands	r3, r2
 800991c:	2201      	movs	r2, #1
 800991e:	409a      	lsls	r2, r3
 8009920:	4b0d      	ldr	r3, [pc, #52]	; (8009958 <HAL_DMA_IRQHandler+0x160>)
 8009922:	430a      	orrs	r2, r1
 8009924:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2201      	movs	r2, #1
 800992a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2225      	movs	r2, #37	; 0x25
 8009930:	2101      	movs	r1, #1
 8009932:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2224      	movs	r2, #36	; 0x24
 8009938:	2100      	movs	r1, #0
 800993a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009940:	2b00      	cmp	r3, #0
 8009942:	d005      	beq.n	8009950 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009948:	687a      	ldr	r2, [r7, #4]
 800994a:	0010      	movs	r0, r2
 800994c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800994e:	46c0      	nop			; (mov r8, r8)
 8009950:	46c0      	nop			; (mov r8, r8)
}
 8009952:	46bd      	mov	sp, r7
 8009954:	b004      	add	sp, #16
 8009956:	bd80      	pop	{r7, pc}
 8009958:	40020000 	.word	0x40020000

0800995c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b084      	sub	sp, #16
 8009960:	af00      	add	r7, sp, #0
 8009962:	60f8      	str	r0, [r7, #12]
 8009964:	60b9      	str	r1, [r7, #8]
 8009966:	607a      	str	r2, [r7, #4]
 8009968:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800996e:	68fa      	ldr	r2, [r7, #12]
 8009970:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8009972:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009978:	2b00      	cmp	r3, #0
 800997a:	d004      	beq.n	8009986 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009980:	68fa      	ldr	r2, [r7, #12]
 8009982:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009984:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8009986:	4b14      	ldr	r3, [pc, #80]	; (80099d8 <DMA_SetConfig+0x7c>)
 8009988:	6859      	ldr	r1, [r3, #4]
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800998e:	221c      	movs	r2, #28
 8009990:	4013      	ands	r3, r2
 8009992:	2201      	movs	r2, #1
 8009994:	409a      	lsls	r2, r3
 8009996:	4b10      	ldr	r3, [pc, #64]	; (80099d8 <DMA_SetConfig+0x7c>)
 8009998:	430a      	orrs	r2, r1
 800999a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	683a      	ldr	r2, [r7, #0]
 80099a2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	689b      	ldr	r3, [r3, #8]
 80099a8:	2b10      	cmp	r3, #16
 80099aa:	d108      	bne.n	80099be <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	687a      	ldr	r2, [r7, #4]
 80099b2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	68ba      	ldr	r2, [r7, #8]
 80099ba:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80099bc:	e007      	b.n	80099ce <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	68ba      	ldr	r2, [r7, #8]
 80099c4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	687a      	ldr	r2, [r7, #4]
 80099cc:	60da      	str	r2, [r3, #12]
}
 80099ce:	46c0      	nop			; (mov r8, r8)
 80099d0:	46bd      	mov	sp, r7
 80099d2:	b004      	add	sp, #16
 80099d4:	bd80      	pop	{r7, pc}
 80099d6:	46c0      	nop			; (mov r8, r8)
 80099d8:	40020000 	.word	0x40020000

080099dc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b084      	sub	sp, #16
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099e8:	089b      	lsrs	r3, r3, #2
 80099ea:	4a10      	ldr	r2, [pc, #64]	; (8009a2c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80099ec:	4694      	mov	ip, r2
 80099ee:	4463      	add	r3, ip
 80099f0:	009b      	lsls	r3, r3, #2
 80099f2:	001a      	movs	r2, r3
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	001a      	movs	r2, r3
 80099fe:	23ff      	movs	r3, #255	; 0xff
 8009a00:	4013      	ands	r3, r2
 8009a02:	3b08      	subs	r3, #8
 8009a04:	2114      	movs	r1, #20
 8009a06:	0018      	movs	r0, r3
 8009a08:	f7f6 fba0 	bl	800014c <__udivsi3>
 8009a0c:	0003      	movs	r3, r0
 8009a0e:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	4a07      	ldr	r2, [pc, #28]	; (8009a30 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8009a14:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	221f      	movs	r2, #31
 8009a1a:	4013      	ands	r3, r2
 8009a1c:	2201      	movs	r2, #1
 8009a1e:	409a      	lsls	r2, r3
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8009a24:	46c0      	nop			; (mov r8, r8)
 8009a26:	46bd      	mov	sp, r7
 8009a28:	b004      	add	sp, #16
 8009a2a:	bd80      	pop	{r7, pc}
 8009a2c:	10008200 	.word	0x10008200
 8009a30:	40020880 	.word	0x40020880

08009a34 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b084      	sub	sp, #16
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	685b      	ldr	r3, [r3, #4]
 8009a40:	223f      	movs	r2, #63	; 0x3f
 8009a42:	4013      	ands	r3, r2
 8009a44:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	4a0a      	ldr	r2, [pc, #40]	; (8009a74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8009a4a:	4694      	mov	ip, r2
 8009a4c:	4463      	add	r3, ip
 8009a4e:	009b      	lsls	r3, r3, #2
 8009a50:	001a      	movs	r2, r3
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	4a07      	ldr	r2, [pc, #28]	; (8009a78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8009a5a:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	3b01      	subs	r3, #1
 8009a60:	2203      	movs	r2, #3
 8009a62:	4013      	ands	r3, r2
 8009a64:	2201      	movs	r2, #1
 8009a66:	409a      	lsls	r2, r3
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	659a      	str	r2, [r3, #88]	; 0x58
}
 8009a6c:	46c0      	nop			; (mov r8, r8)
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	b004      	add	sp, #16
 8009a72:	bd80      	pop	{r7, pc}
 8009a74:	1000823f 	.word	0x1000823f
 8009a78:	40020940 	.word	0x40020940

08009a7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b086      	sub	sp, #24
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
 8009a84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009a86:	2300      	movs	r3, #0
 8009a88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009a8a:	e147      	b.n	8009d1c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	2101      	movs	r1, #1
 8009a92:	697a      	ldr	r2, [r7, #20]
 8009a94:	4091      	lsls	r1, r2
 8009a96:	000a      	movs	r2, r1
 8009a98:	4013      	ands	r3, r2
 8009a9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d100      	bne.n	8009aa4 <HAL_GPIO_Init+0x28>
 8009aa2:	e138      	b.n	8009d16 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	685b      	ldr	r3, [r3, #4]
 8009aa8:	2203      	movs	r2, #3
 8009aaa:	4013      	ands	r3, r2
 8009aac:	2b01      	cmp	r3, #1
 8009aae:	d005      	beq.n	8009abc <HAL_GPIO_Init+0x40>
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	2203      	movs	r2, #3
 8009ab6:	4013      	ands	r3, r2
 8009ab8:	2b02      	cmp	r3, #2
 8009aba:	d130      	bne.n	8009b1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	689b      	ldr	r3, [r3, #8]
 8009ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	005b      	lsls	r3, r3, #1
 8009ac6:	2203      	movs	r2, #3
 8009ac8:	409a      	lsls	r2, r3
 8009aca:	0013      	movs	r3, r2
 8009acc:	43da      	mvns	r2, r3
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	4013      	ands	r3, r2
 8009ad2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	68da      	ldr	r2, [r3, #12]
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	005b      	lsls	r3, r3, #1
 8009adc:	409a      	lsls	r2, r3
 8009ade:	0013      	movs	r3, r2
 8009ae0:	693a      	ldr	r2, [r7, #16]
 8009ae2:	4313      	orrs	r3, r2
 8009ae4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	693a      	ldr	r2, [r7, #16]
 8009aea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	685b      	ldr	r3, [r3, #4]
 8009af0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009af2:	2201      	movs	r2, #1
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	409a      	lsls	r2, r3
 8009af8:	0013      	movs	r3, r2
 8009afa:	43da      	mvns	r2, r3
 8009afc:	693b      	ldr	r3, [r7, #16]
 8009afe:	4013      	ands	r3, r2
 8009b00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	685b      	ldr	r3, [r3, #4]
 8009b06:	091b      	lsrs	r3, r3, #4
 8009b08:	2201      	movs	r2, #1
 8009b0a:	401a      	ands	r2, r3
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	409a      	lsls	r2, r3
 8009b10:	0013      	movs	r3, r2
 8009b12:	693a      	ldr	r2, [r7, #16]
 8009b14:	4313      	orrs	r3, r2
 8009b16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	693a      	ldr	r2, [r7, #16]
 8009b1c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	685b      	ldr	r3, [r3, #4]
 8009b22:	2203      	movs	r2, #3
 8009b24:	4013      	ands	r3, r2
 8009b26:	2b03      	cmp	r3, #3
 8009b28:	d017      	beq.n	8009b5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	68db      	ldr	r3, [r3, #12]
 8009b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	005b      	lsls	r3, r3, #1
 8009b34:	2203      	movs	r2, #3
 8009b36:	409a      	lsls	r2, r3
 8009b38:	0013      	movs	r3, r2
 8009b3a:	43da      	mvns	r2, r3
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	4013      	ands	r3, r2
 8009b40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	689a      	ldr	r2, [r3, #8]
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	005b      	lsls	r3, r3, #1
 8009b4a:	409a      	lsls	r2, r3
 8009b4c:	0013      	movs	r3, r2
 8009b4e:	693a      	ldr	r2, [r7, #16]
 8009b50:	4313      	orrs	r3, r2
 8009b52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	693a      	ldr	r2, [r7, #16]
 8009b58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	685b      	ldr	r3, [r3, #4]
 8009b5e:	2203      	movs	r2, #3
 8009b60:	4013      	ands	r3, r2
 8009b62:	2b02      	cmp	r3, #2
 8009b64:	d123      	bne.n	8009bae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	08da      	lsrs	r2, r3, #3
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	3208      	adds	r2, #8
 8009b6e:	0092      	lsls	r2, r2, #2
 8009b70:	58d3      	ldr	r3, [r2, r3]
 8009b72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	2207      	movs	r2, #7
 8009b78:	4013      	ands	r3, r2
 8009b7a:	009b      	lsls	r3, r3, #2
 8009b7c:	220f      	movs	r2, #15
 8009b7e:	409a      	lsls	r2, r3
 8009b80:	0013      	movs	r3, r2
 8009b82:	43da      	mvns	r2, r3
 8009b84:	693b      	ldr	r3, [r7, #16]
 8009b86:	4013      	ands	r3, r2
 8009b88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	691a      	ldr	r2, [r3, #16]
 8009b8e:	697b      	ldr	r3, [r7, #20]
 8009b90:	2107      	movs	r1, #7
 8009b92:	400b      	ands	r3, r1
 8009b94:	009b      	lsls	r3, r3, #2
 8009b96:	409a      	lsls	r2, r3
 8009b98:	0013      	movs	r3, r2
 8009b9a:	693a      	ldr	r2, [r7, #16]
 8009b9c:	4313      	orrs	r3, r2
 8009b9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	08da      	lsrs	r2, r3, #3
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	3208      	adds	r2, #8
 8009ba8:	0092      	lsls	r2, r2, #2
 8009baa:	6939      	ldr	r1, [r7, #16]
 8009bac:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	005b      	lsls	r3, r3, #1
 8009bb8:	2203      	movs	r2, #3
 8009bba:	409a      	lsls	r2, r3
 8009bbc:	0013      	movs	r3, r2
 8009bbe:	43da      	mvns	r2, r3
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	4013      	ands	r3, r2
 8009bc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	685b      	ldr	r3, [r3, #4]
 8009bca:	2203      	movs	r2, #3
 8009bcc:	401a      	ands	r2, r3
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	005b      	lsls	r3, r3, #1
 8009bd2:	409a      	lsls	r2, r3
 8009bd4:	0013      	movs	r3, r2
 8009bd6:	693a      	ldr	r2, [r7, #16]
 8009bd8:	4313      	orrs	r3, r2
 8009bda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	693a      	ldr	r2, [r7, #16]
 8009be0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	685a      	ldr	r2, [r3, #4]
 8009be6:	23c0      	movs	r3, #192	; 0xc0
 8009be8:	029b      	lsls	r3, r3, #10
 8009bea:	4013      	ands	r3, r2
 8009bec:	d100      	bne.n	8009bf0 <HAL_GPIO_Init+0x174>
 8009bee:	e092      	b.n	8009d16 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8009bf0:	4a50      	ldr	r2, [pc, #320]	; (8009d34 <HAL_GPIO_Init+0x2b8>)
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	089b      	lsrs	r3, r3, #2
 8009bf6:	3318      	adds	r3, #24
 8009bf8:	009b      	lsls	r3, r3, #2
 8009bfa:	589b      	ldr	r3, [r3, r2]
 8009bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	2203      	movs	r2, #3
 8009c02:	4013      	ands	r3, r2
 8009c04:	00db      	lsls	r3, r3, #3
 8009c06:	220f      	movs	r2, #15
 8009c08:	409a      	lsls	r2, r3
 8009c0a:	0013      	movs	r3, r2
 8009c0c:	43da      	mvns	r2, r3
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	4013      	ands	r3, r2
 8009c12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8009c14:	687a      	ldr	r2, [r7, #4]
 8009c16:	23a0      	movs	r3, #160	; 0xa0
 8009c18:	05db      	lsls	r3, r3, #23
 8009c1a:	429a      	cmp	r2, r3
 8009c1c:	d013      	beq.n	8009c46 <HAL_GPIO_Init+0x1ca>
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	4a45      	ldr	r2, [pc, #276]	; (8009d38 <HAL_GPIO_Init+0x2bc>)
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d00d      	beq.n	8009c42 <HAL_GPIO_Init+0x1c6>
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	4a44      	ldr	r2, [pc, #272]	; (8009d3c <HAL_GPIO_Init+0x2c0>)
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	d007      	beq.n	8009c3e <HAL_GPIO_Init+0x1c2>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	4a43      	ldr	r2, [pc, #268]	; (8009d40 <HAL_GPIO_Init+0x2c4>)
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d101      	bne.n	8009c3a <HAL_GPIO_Init+0x1be>
 8009c36:	2303      	movs	r3, #3
 8009c38:	e006      	b.n	8009c48 <HAL_GPIO_Init+0x1cc>
 8009c3a:	2305      	movs	r3, #5
 8009c3c:	e004      	b.n	8009c48 <HAL_GPIO_Init+0x1cc>
 8009c3e:	2302      	movs	r3, #2
 8009c40:	e002      	b.n	8009c48 <HAL_GPIO_Init+0x1cc>
 8009c42:	2301      	movs	r3, #1
 8009c44:	e000      	b.n	8009c48 <HAL_GPIO_Init+0x1cc>
 8009c46:	2300      	movs	r3, #0
 8009c48:	697a      	ldr	r2, [r7, #20]
 8009c4a:	2103      	movs	r1, #3
 8009c4c:	400a      	ands	r2, r1
 8009c4e:	00d2      	lsls	r2, r2, #3
 8009c50:	4093      	lsls	r3, r2
 8009c52:	693a      	ldr	r2, [r7, #16]
 8009c54:	4313      	orrs	r3, r2
 8009c56:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8009c58:	4936      	ldr	r1, [pc, #216]	; (8009d34 <HAL_GPIO_Init+0x2b8>)
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	089b      	lsrs	r3, r3, #2
 8009c5e:	3318      	adds	r3, #24
 8009c60:	009b      	lsls	r3, r3, #2
 8009c62:	693a      	ldr	r2, [r7, #16]
 8009c64:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009c66:	4b33      	ldr	r3, [pc, #204]	; (8009d34 <HAL_GPIO_Init+0x2b8>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	43da      	mvns	r2, r3
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	4013      	ands	r3, r2
 8009c74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	685a      	ldr	r2, [r3, #4]
 8009c7a:	2380      	movs	r3, #128	; 0x80
 8009c7c:	035b      	lsls	r3, r3, #13
 8009c7e:	4013      	ands	r3, r2
 8009c80:	d003      	beq.n	8009c8a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8009c82:	693a      	ldr	r2, [r7, #16]
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	4313      	orrs	r3, r2
 8009c88:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009c8a:	4b2a      	ldr	r3, [pc, #168]	; (8009d34 <HAL_GPIO_Init+0x2b8>)
 8009c8c:	693a      	ldr	r2, [r7, #16]
 8009c8e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8009c90:	4b28      	ldr	r3, [pc, #160]	; (8009d34 <HAL_GPIO_Init+0x2b8>)
 8009c92:	685b      	ldr	r3, [r3, #4]
 8009c94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	43da      	mvns	r2, r3
 8009c9a:	693b      	ldr	r3, [r7, #16]
 8009c9c:	4013      	ands	r3, r2
 8009c9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	685a      	ldr	r2, [r3, #4]
 8009ca4:	2380      	movs	r3, #128	; 0x80
 8009ca6:	039b      	lsls	r3, r3, #14
 8009ca8:	4013      	ands	r3, r2
 8009caa:	d003      	beq.n	8009cb4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8009cac:	693a      	ldr	r2, [r7, #16]
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	4313      	orrs	r3, r2
 8009cb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8009cb4:	4b1f      	ldr	r3, [pc, #124]	; (8009d34 <HAL_GPIO_Init+0x2b8>)
 8009cb6:	693a      	ldr	r2, [r7, #16]
 8009cb8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8009cba:	4a1e      	ldr	r2, [pc, #120]	; (8009d34 <HAL_GPIO_Init+0x2b8>)
 8009cbc:	2384      	movs	r3, #132	; 0x84
 8009cbe:	58d3      	ldr	r3, [r2, r3]
 8009cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	43da      	mvns	r2, r3
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	4013      	ands	r3, r2
 8009cca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	685a      	ldr	r2, [r3, #4]
 8009cd0:	2380      	movs	r3, #128	; 0x80
 8009cd2:	029b      	lsls	r3, r3, #10
 8009cd4:	4013      	ands	r3, r2
 8009cd6:	d003      	beq.n	8009ce0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8009cd8:	693a      	ldr	r2, [r7, #16]
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	4313      	orrs	r3, r2
 8009cde:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8009ce0:	4914      	ldr	r1, [pc, #80]	; (8009d34 <HAL_GPIO_Init+0x2b8>)
 8009ce2:	2284      	movs	r2, #132	; 0x84
 8009ce4:	693b      	ldr	r3, [r7, #16]
 8009ce6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8009ce8:	4a12      	ldr	r2, [pc, #72]	; (8009d34 <HAL_GPIO_Init+0x2b8>)
 8009cea:	2380      	movs	r3, #128	; 0x80
 8009cec:	58d3      	ldr	r3, [r2, r3]
 8009cee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	43da      	mvns	r2, r3
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	4013      	ands	r3, r2
 8009cf8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	685a      	ldr	r2, [r3, #4]
 8009cfe:	2380      	movs	r3, #128	; 0x80
 8009d00:	025b      	lsls	r3, r3, #9
 8009d02:	4013      	ands	r3, r2
 8009d04:	d003      	beq.n	8009d0e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8009d06:	693a      	ldr	r2, [r7, #16]
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	4313      	orrs	r3, r2
 8009d0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8009d0e:	4909      	ldr	r1, [pc, #36]	; (8009d34 <HAL_GPIO_Init+0x2b8>)
 8009d10:	2280      	movs	r2, #128	; 0x80
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	3301      	adds	r3, #1
 8009d1a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	681a      	ldr	r2, [r3, #0]
 8009d20:	697b      	ldr	r3, [r7, #20]
 8009d22:	40da      	lsrs	r2, r3
 8009d24:	1e13      	subs	r3, r2, #0
 8009d26:	d000      	beq.n	8009d2a <HAL_GPIO_Init+0x2ae>
 8009d28:	e6b0      	b.n	8009a8c <HAL_GPIO_Init+0x10>
  }
}
 8009d2a:	46c0      	nop			; (mov r8, r8)
 8009d2c:	46c0      	nop			; (mov r8, r8)
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	b006      	add	sp, #24
 8009d32:	bd80      	pop	{r7, pc}
 8009d34:	40021800 	.word	0x40021800
 8009d38:	50000400 	.word	0x50000400
 8009d3c:	50000800 	.word	0x50000800
 8009d40:	50000c00 	.word	0x50000c00

08009d44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b082      	sub	sp, #8
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
 8009d4c:	0008      	movs	r0, r1
 8009d4e:	0011      	movs	r1, r2
 8009d50:	1cbb      	adds	r3, r7, #2
 8009d52:	1c02      	adds	r2, r0, #0
 8009d54:	801a      	strh	r2, [r3, #0]
 8009d56:	1c7b      	adds	r3, r7, #1
 8009d58:	1c0a      	adds	r2, r1, #0
 8009d5a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009d5c:	1c7b      	adds	r3, r7, #1
 8009d5e:	781b      	ldrb	r3, [r3, #0]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d004      	beq.n	8009d6e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009d64:	1cbb      	adds	r3, r7, #2
 8009d66:	881a      	ldrh	r2, [r3, #0]
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009d6c:	e003      	b.n	8009d76 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009d6e:	1cbb      	adds	r3, r7, #2
 8009d70:	881a      	ldrh	r2, [r3, #0]
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009d76:	46c0      	nop			; (mov r8, r8)
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	b002      	add	sp, #8
 8009d7c:	bd80      	pop	{r7, pc}

08009d7e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009d7e:	b580      	push	{r7, lr}
 8009d80:	b084      	sub	sp, #16
 8009d82:	af00      	add	r7, sp, #0
 8009d84:	6078      	str	r0, [r7, #4]
 8009d86:	000a      	movs	r2, r1
 8009d88:	1cbb      	adds	r3, r7, #2
 8009d8a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	695b      	ldr	r3, [r3, #20]
 8009d90:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009d92:	1cbb      	adds	r3, r7, #2
 8009d94:	881b      	ldrh	r3, [r3, #0]
 8009d96:	68fa      	ldr	r2, [r7, #12]
 8009d98:	4013      	ands	r3, r2
 8009d9a:	041a      	lsls	r2, r3, #16
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	43db      	mvns	r3, r3
 8009da0:	1cb9      	adds	r1, r7, #2
 8009da2:	8809      	ldrh	r1, [r1, #0]
 8009da4:	400b      	ands	r3, r1
 8009da6:	431a      	orrs	r2, r3
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	619a      	str	r2, [r3, #24]
}
 8009dac:	46c0      	nop			; (mov r8, r8)
 8009dae:	46bd      	mov	sp, r7
 8009db0:	b004      	add	sp, #16
 8009db2:	bd80      	pop	{r7, pc}

08009db4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b084      	sub	sp, #16
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8009dbc:	4b19      	ldr	r3, [pc, #100]	; (8009e24 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4a19      	ldr	r2, [pc, #100]	; (8009e28 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8009dc2:	4013      	ands	r3, r2
 8009dc4:	0019      	movs	r1, r3
 8009dc6:	4b17      	ldr	r3, [pc, #92]	; (8009e24 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8009dc8:	687a      	ldr	r2, [r7, #4]
 8009dca:	430a      	orrs	r2, r1
 8009dcc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009dce:	687a      	ldr	r2, [r7, #4]
 8009dd0:	2380      	movs	r3, #128	; 0x80
 8009dd2:	009b      	lsls	r3, r3, #2
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	d11f      	bne.n	8009e18 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8009dd8:	4b14      	ldr	r3, [pc, #80]	; (8009e2c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8009dda:	681a      	ldr	r2, [r3, #0]
 8009ddc:	0013      	movs	r3, r2
 8009dde:	005b      	lsls	r3, r3, #1
 8009de0:	189b      	adds	r3, r3, r2
 8009de2:	005b      	lsls	r3, r3, #1
 8009de4:	4912      	ldr	r1, [pc, #72]	; (8009e30 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8009de6:	0018      	movs	r0, r3
 8009de8:	f7f6 f9b0 	bl	800014c <__udivsi3>
 8009dec:	0003      	movs	r3, r0
 8009dee:	3301      	adds	r3, #1
 8009df0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009df2:	e008      	b.n	8009e06 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d003      	beq.n	8009e02 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	3b01      	subs	r3, #1
 8009dfe:	60fb      	str	r3, [r7, #12]
 8009e00:	e001      	b.n	8009e06 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8009e02:	2303      	movs	r3, #3
 8009e04:	e009      	b.n	8009e1a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009e06:	4b07      	ldr	r3, [pc, #28]	; (8009e24 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8009e08:	695a      	ldr	r2, [r3, #20]
 8009e0a:	2380      	movs	r3, #128	; 0x80
 8009e0c:	00db      	lsls	r3, r3, #3
 8009e0e:	401a      	ands	r2, r3
 8009e10:	2380      	movs	r3, #128	; 0x80
 8009e12:	00db      	lsls	r3, r3, #3
 8009e14:	429a      	cmp	r2, r3
 8009e16:	d0ed      	beq.n	8009df4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8009e18:	2300      	movs	r3, #0
}
 8009e1a:	0018      	movs	r0, r3
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	b004      	add	sp, #16
 8009e20:	bd80      	pop	{r7, pc}
 8009e22:	46c0      	nop			; (mov r8, r8)
 8009e24:	40007000 	.word	0x40007000
 8009e28:	fffff9ff 	.word	0xfffff9ff
 8009e2c:	200000b0 	.word	0x200000b0
 8009e30:	000f4240 	.word	0x000f4240

08009e34 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8009e38:	4b03      	ldr	r3, [pc, #12]	; (8009e48 <LL_RCC_GetAPB1Prescaler+0x14>)
 8009e3a:	689a      	ldr	r2, [r3, #8]
 8009e3c:	23e0      	movs	r3, #224	; 0xe0
 8009e3e:	01db      	lsls	r3, r3, #7
 8009e40:	4013      	ands	r3, r2
}
 8009e42:	0018      	movs	r0, r3
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}
 8009e48:	40021000 	.word	0x40021000

08009e4c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b088      	sub	sp, #32
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d101      	bne.n	8009e5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	e2f3      	b.n	800a446 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	2201      	movs	r2, #1
 8009e64:	4013      	ands	r3, r2
 8009e66:	d100      	bne.n	8009e6a <HAL_RCC_OscConfig+0x1e>
 8009e68:	e07c      	b.n	8009f64 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009e6a:	4bc3      	ldr	r3, [pc, #780]	; (800a178 <HAL_RCC_OscConfig+0x32c>)
 8009e6c:	689b      	ldr	r3, [r3, #8]
 8009e6e:	2238      	movs	r2, #56	; 0x38
 8009e70:	4013      	ands	r3, r2
 8009e72:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009e74:	4bc0      	ldr	r3, [pc, #768]	; (800a178 <HAL_RCC_OscConfig+0x32c>)
 8009e76:	68db      	ldr	r3, [r3, #12]
 8009e78:	2203      	movs	r2, #3
 8009e7a:	4013      	ands	r3, r2
 8009e7c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8009e7e:	69bb      	ldr	r3, [r7, #24]
 8009e80:	2b10      	cmp	r3, #16
 8009e82:	d102      	bne.n	8009e8a <HAL_RCC_OscConfig+0x3e>
 8009e84:	697b      	ldr	r3, [r7, #20]
 8009e86:	2b03      	cmp	r3, #3
 8009e88:	d002      	beq.n	8009e90 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8009e8a:	69bb      	ldr	r3, [r7, #24]
 8009e8c:	2b08      	cmp	r3, #8
 8009e8e:	d10b      	bne.n	8009ea8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e90:	4bb9      	ldr	r3, [pc, #740]	; (800a178 <HAL_RCC_OscConfig+0x32c>)
 8009e92:	681a      	ldr	r2, [r3, #0]
 8009e94:	2380      	movs	r3, #128	; 0x80
 8009e96:	029b      	lsls	r3, r3, #10
 8009e98:	4013      	ands	r3, r2
 8009e9a:	d062      	beq.n	8009f62 <HAL_RCC_OscConfig+0x116>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d15e      	bne.n	8009f62 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	e2ce      	b.n	800a446 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	685a      	ldr	r2, [r3, #4]
 8009eac:	2380      	movs	r3, #128	; 0x80
 8009eae:	025b      	lsls	r3, r3, #9
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	d107      	bne.n	8009ec4 <HAL_RCC_OscConfig+0x78>
 8009eb4:	4bb0      	ldr	r3, [pc, #704]	; (800a178 <HAL_RCC_OscConfig+0x32c>)
 8009eb6:	681a      	ldr	r2, [r3, #0]
 8009eb8:	4baf      	ldr	r3, [pc, #700]	; (800a178 <HAL_RCC_OscConfig+0x32c>)
 8009eba:	2180      	movs	r1, #128	; 0x80
 8009ebc:	0249      	lsls	r1, r1, #9
 8009ebe:	430a      	orrs	r2, r1
 8009ec0:	601a      	str	r2, [r3, #0]
 8009ec2:	e020      	b.n	8009f06 <HAL_RCC_OscConfig+0xba>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	685a      	ldr	r2, [r3, #4]
 8009ec8:	23a0      	movs	r3, #160	; 0xa0
 8009eca:	02db      	lsls	r3, r3, #11
 8009ecc:	429a      	cmp	r2, r3
 8009ece:	d10e      	bne.n	8009eee <HAL_RCC_OscConfig+0xa2>
 8009ed0:	4ba9      	ldr	r3, [pc, #676]	; (800a178 <HAL_RCC_OscConfig+0x32c>)
 8009ed2:	681a      	ldr	r2, [r3, #0]
 8009ed4:	4ba8      	ldr	r3, [pc, #672]	; (800a178 <HAL_RCC_OscConfig+0x32c>)
 8009ed6:	2180      	movs	r1, #128	; 0x80
 8009ed8:	02c9      	lsls	r1, r1, #11
 8009eda:	430a      	orrs	r2, r1
 8009edc:	601a      	str	r2, [r3, #0]
 8009ede:	4ba6      	ldr	r3, [pc, #664]	; (800a178 <HAL_RCC_OscConfig+0x32c>)
 8009ee0:	681a      	ldr	r2, [r3, #0]
 8009ee2:	4ba5      	ldr	r3, [pc, #660]	; (800a178 <HAL_RCC_OscConfig+0x32c>)
 8009ee4:	2180      	movs	r1, #128	; 0x80
 8009ee6:	0249      	lsls	r1, r1, #9
 8009ee8:	430a      	orrs	r2, r1
 8009eea:	601a      	str	r2, [r3, #0]
 8009eec:	e00b      	b.n	8009f06 <HAL_RCC_OscConfig+0xba>
 8009eee:	4ba2      	ldr	r3, [pc, #648]	; (800a178 <HAL_RCC_OscConfig+0x32c>)
 8009ef0:	681a      	ldr	r2, [r3, #0]
 8009ef2:	4ba1      	ldr	r3, [pc, #644]	; (800a178 <HAL_RCC_OscConfig+0x32c>)
 8009ef4:	49a1      	ldr	r1, [pc, #644]	; (800a17c <HAL_RCC_OscConfig+0x330>)
 8009ef6:	400a      	ands	r2, r1
 8009ef8:	601a      	str	r2, [r3, #0]
 8009efa:	4b9f      	ldr	r3, [pc, #636]	; (800a178 <HAL_RCC_OscConfig+0x32c>)
 8009efc:	681a      	ldr	r2, [r3, #0]
 8009efe:	4b9e      	ldr	r3, [pc, #632]	; (800a178 <HAL_RCC_OscConfig+0x32c>)
 8009f00:	499f      	ldr	r1, [pc, #636]	; (800a180 <HAL_RCC_OscConfig+0x334>)
 8009f02:	400a      	ands	r2, r1
 8009f04:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	685b      	ldr	r3, [r3, #4]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d014      	beq.n	8009f38 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f0e:	f7ff f98b 	bl	8009228 <HAL_GetTick>
 8009f12:	0003      	movs	r3, r0
 8009f14:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009f16:	e008      	b.n	8009f2a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009f18:	f7ff f986 	bl	8009228 <HAL_GetTick>
 8009f1c:	0002      	movs	r2, r0
 8009f1e:	693b      	ldr	r3, [r7, #16]
 8009f20:	1ad3      	subs	r3, r2, r3
 8009f22:	2b64      	cmp	r3, #100	; 0x64
 8009f24:	d901      	bls.n	8009f2a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8009f26:	2303      	movs	r3, #3
 8009f28:	e28d      	b.n	800a446 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009f2a:	4b93      	ldr	r3, [pc, #588]	; (800a178 <HAL_RCC_OscConfig+0x32c>)
 8009f2c:	681a      	ldr	r2, [r3, #0]
 8009f2e:	2380      	movs	r3, #128	; 0x80
 8009f30:	029b      	lsls	r3, r3, #10
 8009f32:	4013      	ands	r3, r2
 8009f34:	d0f0      	beq.n	8009f18 <HAL_RCC_OscConfig+0xcc>
 8009f36:	e015      	b.n	8009f64 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f38:	f7ff f976 	bl	8009228 <HAL_GetTick>
 8009f3c:	0003      	movs	r3, r0
 8009f3e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009f40:	e008      	b.n	8009f54 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009f42:	f7ff f971 	bl	8009228 <HAL_GetTick>
 8009f46:	0002      	movs	r2, r0
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	1ad3      	subs	r3, r2, r3
 8009f4c:	2b64      	cmp	r3, #100	; 0x64
 8009f4e:	d901      	bls.n	8009f54 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8009f50:	2303      	movs	r3, #3
 8009f52:	e278      	b.n	800a446 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009f54:	4b88      	ldr	r3, [pc, #544]	; (800a178 <HAL_RCC_OscConfig+0x32c>)
 8009f56:	681a      	ldr	r2, [r3, #0]
 8009f58:	2380      	movs	r3, #128	; 0x80
 8009f5a:	029b      	lsls	r3, r3, #10
 8009f5c:	4013      	ands	r3, r2
 8009f5e:	d1f0      	bne.n	8009f42 <HAL_RCC_OscConfig+0xf6>
 8009f60:	e000      	b.n	8009f64 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009f62:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	2202      	movs	r2, #2
 8009f6a:	4013      	ands	r3, r2
 8009f6c:	d100      	bne.n	8009f70 <HAL_RCC_OscConfig+0x124>
 8009f6e:	e099      	b.n	800a0a4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009f70:	4b81      	ldr	r3, [pc, #516]	; (800a178 <HAL_RCC_OscConfig+0x32c>)
 8009f72:	689b      	ldr	r3, [r3, #8]
 8009f74:	2238      	movs	r2, #56	; 0x38
 8009f76:	4013      	ands	r3, r2
 8009f78:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009f7a:	4b7f      	ldr	r3, [pc, #508]	; (800a178 <HAL_RCC_OscConfig+0x32c>)
 8009f7c:	68db      	ldr	r3, [r3, #12]
 8009f7e:	2203      	movs	r2, #3
 8009f80:	4013      	ands	r3, r2
 8009f82:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8009f84:	69bb      	ldr	r3, [r7, #24]
 8009f86:	2b10      	cmp	r3, #16
 8009f88:	d102      	bne.n	8009f90 <HAL_RCC_OscConfig+0x144>
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	2b02      	cmp	r3, #2
 8009f8e:	d002      	beq.n	8009f96 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8009f90:	69bb      	ldr	r3, [r7, #24]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d135      	bne.n	800a002 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009f96:	4b78      	ldr	r3, [pc, #480]	; (800a178 <HAL_RCC_OscConfig+0x32c>)
 8009f98:	681a      	ldr	r2, [r3, #0]
 8009f9a:	2380      	movs	r3, #128	; 0x80
 8009f9c:	00db      	lsls	r3, r3, #3
 8009f9e:	4013      	ands	r3, r2
 8009fa0:	d005      	beq.n	8009fae <HAL_RCC_OscConfig+0x162>
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	68db      	ldr	r3, [r3, #12]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d101      	bne.n	8009fae <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8009faa:	2301      	movs	r3, #1
 8009fac:	e24b      	b.n	800a446 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009fae:	4b72      	ldr	r3, [pc, #456]	; (800a178 <HAL_RCC_OscConfig+0x32c>)
 8009fb0:	685b      	ldr	r3, [r3, #4]
 8009fb2:	4a74      	ldr	r2, [pc, #464]	; (800a184 <HAL_RCC_OscConfig+0x338>)
 8009fb4:	4013      	ands	r3, r2
 8009fb6:	0019      	movs	r1, r3
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	695b      	ldr	r3, [r3, #20]
 8009fbc:	021a      	lsls	r2, r3, #8
 8009fbe:	4b6e      	ldr	r3, [pc, #440]	; (800a178 <HAL_RCC_OscConfig+0x32c>)
 8009fc0:	430a      	orrs	r2, r1
 8009fc2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009fc4:	69bb      	ldr	r3, [r7, #24]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d112      	bne.n	8009ff0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8009fca:	4b6b      	ldr	r3, [pc, #428]	; (800a178 <HAL_RCC_OscConfig+0x32c>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	4a6e      	ldr	r2, [pc, #440]	; (800a188 <HAL_RCC_OscConfig+0x33c>)
 8009fd0:	4013      	ands	r3, r2
 8009fd2:	0019      	movs	r1, r3
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	691a      	ldr	r2, [r3, #16]
 8009fd8:	4b67      	ldr	r3, [pc, #412]	; (800a178 <HAL_RCC_OscConfig+0x32c>)
 8009fda:	430a      	orrs	r2, r1
 8009fdc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8009fde:	4b66      	ldr	r3, [pc, #408]	; (800a178 <HAL_RCC_OscConfig+0x32c>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	0adb      	lsrs	r3, r3, #11
 8009fe4:	2207      	movs	r2, #7
 8009fe6:	4013      	ands	r3, r2
 8009fe8:	4a68      	ldr	r2, [pc, #416]	; (800a18c <HAL_RCC_OscConfig+0x340>)
 8009fea:	40da      	lsrs	r2, r3
 8009fec:	4b68      	ldr	r3, [pc, #416]	; (800a190 <HAL_RCC_OscConfig+0x344>)
 8009fee:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009ff0:	4b68      	ldr	r3, [pc, #416]	; (800a194 <HAL_RCC_OscConfig+0x348>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	0018      	movs	r0, r3
 8009ff6:	f7ff f8bb 	bl	8009170 <HAL_InitTick>
 8009ffa:	1e03      	subs	r3, r0, #0
 8009ffc:	d051      	beq.n	800a0a2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8009ffe:	2301      	movs	r3, #1
 800a000:	e221      	b.n	800a446 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	68db      	ldr	r3, [r3, #12]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d030      	beq.n	800a06c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800a00a:	4b5b      	ldr	r3, [pc, #364]	; (800a178 <HAL_RCC_OscConfig+0x32c>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	4a5e      	ldr	r2, [pc, #376]	; (800a188 <HAL_RCC_OscConfig+0x33c>)
 800a010:	4013      	ands	r3, r2
 800a012:	0019      	movs	r1, r3
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	691a      	ldr	r2, [r3, #16]
 800a018:	4b57      	ldr	r3, [pc, #348]	; (800a178 <HAL_RCC_OscConfig+0x32c>)
 800a01a:	430a      	orrs	r2, r1
 800a01c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800a01e:	4b56      	ldr	r3, [pc, #344]	; (800a178 <HAL_RCC_OscConfig+0x32c>)
 800a020:	681a      	ldr	r2, [r3, #0]
 800a022:	4b55      	ldr	r3, [pc, #340]	; (800a178 <HAL_RCC_OscConfig+0x32c>)
 800a024:	2180      	movs	r1, #128	; 0x80
 800a026:	0049      	lsls	r1, r1, #1
 800a028:	430a      	orrs	r2, r1
 800a02a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a02c:	f7ff f8fc 	bl	8009228 <HAL_GetTick>
 800a030:	0003      	movs	r3, r0
 800a032:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a034:	e008      	b.n	800a048 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a036:	f7ff f8f7 	bl	8009228 <HAL_GetTick>
 800a03a:	0002      	movs	r2, r0
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	1ad3      	subs	r3, r2, r3
 800a040:	2b02      	cmp	r3, #2
 800a042:	d901      	bls.n	800a048 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800a044:	2303      	movs	r3, #3
 800a046:	e1fe      	b.n	800a446 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a048:	4b4b      	ldr	r3, [pc, #300]	; (800a178 <HAL_RCC_OscConfig+0x32c>)
 800a04a:	681a      	ldr	r2, [r3, #0]
 800a04c:	2380      	movs	r3, #128	; 0x80
 800a04e:	00db      	lsls	r3, r3, #3
 800a050:	4013      	ands	r3, r2
 800a052:	d0f0      	beq.n	800a036 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a054:	4b48      	ldr	r3, [pc, #288]	; (800a178 <HAL_RCC_OscConfig+0x32c>)
 800a056:	685b      	ldr	r3, [r3, #4]
 800a058:	4a4a      	ldr	r2, [pc, #296]	; (800a184 <HAL_RCC_OscConfig+0x338>)
 800a05a:	4013      	ands	r3, r2
 800a05c:	0019      	movs	r1, r3
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	695b      	ldr	r3, [r3, #20]
 800a062:	021a      	lsls	r2, r3, #8
 800a064:	4b44      	ldr	r3, [pc, #272]	; (800a178 <HAL_RCC_OscConfig+0x32c>)
 800a066:	430a      	orrs	r2, r1
 800a068:	605a      	str	r2, [r3, #4]
 800a06a:	e01b      	b.n	800a0a4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800a06c:	4b42      	ldr	r3, [pc, #264]	; (800a178 <HAL_RCC_OscConfig+0x32c>)
 800a06e:	681a      	ldr	r2, [r3, #0]
 800a070:	4b41      	ldr	r3, [pc, #260]	; (800a178 <HAL_RCC_OscConfig+0x32c>)
 800a072:	4949      	ldr	r1, [pc, #292]	; (800a198 <HAL_RCC_OscConfig+0x34c>)
 800a074:	400a      	ands	r2, r1
 800a076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a078:	f7ff f8d6 	bl	8009228 <HAL_GetTick>
 800a07c:	0003      	movs	r3, r0
 800a07e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a080:	e008      	b.n	800a094 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a082:	f7ff f8d1 	bl	8009228 <HAL_GetTick>
 800a086:	0002      	movs	r2, r0
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	1ad3      	subs	r3, r2, r3
 800a08c:	2b02      	cmp	r3, #2
 800a08e:	d901      	bls.n	800a094 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800a090:	2303      	movs	r3, #3
 800a092:	e1d8      	b.n	800a446 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a094:	4b38      	ldr	r3, [pc, #224]	; (800a178 <HAL_RCC_OscConfig+0x32c>)
 800a096:	681a      	ldr	r2, [r3, #0]
 800a098:	2380      	movs	r3, #128	; 0x80
 800a09a:	00db      	lsls	r3, r3, #3
 800a09c:	4013      	ands	r3, r2
 800a09e:	d1f0      	bne.n	800a082 <HAL_RCC_OscConfig+0x236>
 800a0a0:	e000      	b.n	800a0a4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a0a2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	2208      	movs	r2, #8
 800a0aa:	4013      	ands	r3, r2
 800a0ac:	d047      	beq.n	800a13e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800a0ae:	4b32      	ldr	r3, [pc, #200]	; (800a178 <HAL_RCC_OscConfig+0x32c>)
 800a0b0:	689b      	ldr	r3, [r3, #8]
 800a0b2:	2238      	movs	r2, #56	; 0x38
 800a0b4:	4013      	ands	r3, r2
 800a0b6:	2b18      	cmp	r3, #24
 800a0b8:	d10a      	bne.n	800a0d0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800a0ba:	4b2f      	ldr	r3, [pc, #188]	; (800a178 <HAL_RCC_OscConfig+0x32c>)
 800a0bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0be:	2202      	movs	r2, #2
 800a0c0:	4013      	ands	r3, r2
 800a0c2:	d03c      	beq.n	800a13e <HAL_RCC_OscConfig+0x2f2>
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	699b      	ldr	r3, [r3, #24]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d138      	bne.n	800a13e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	e1ba      	b.n	800a446 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	699b      	ldr	r3, [r3, #24]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d019      	beq.n	800a10c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800a0d8:	4b27      	ldr	r3, [pc, #156]	; (800a178 <HAL_RCC_OscConfig+0x32c>)
 800a0da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a0dc:	4b26      	ldr	r3, [pc, #152]	; (800a178 <HAL_RCC_OscConfig+0x32c>)
 800a0de:	2101      	movs	r1, #1
 800a0e0:	430a      	orrs	r2, r1
 800a0e2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0e4:	f7ff f8a0 	bl	8009228 <HAL_GetTick>
 800a0e8:	0003      	movs	r3, r0
 800a0ea:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a0ec:	e008      	b.n	800a100 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a0ee:	f7ff f89b 	bl	8009228 <HAL_GetTick>
 800a0f2:	0002      	movs	r2, r0
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	1ad3      	subs	r3, r2, r3
 800a0f8:	2b02      	cmp	r3, #2
 800a0fa:	d901      	bls.n	800a100 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800a0fc:	2303      	movs	r3, #3
 800a0fe:	e1a2      	b.n	800a446 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a100:	4b1d      	ldr	r3, [pc, #116]	; (800a178 <HAL_RCC_OscConfig+0x32c>)
 800a102:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a104:	2202      	movs	r2, #2
 800a106:	4013      	ands	r3, r2
 800a108:	d0f1      	beq.n	800a0ee <HAL_RCC_OscConfig+0x2a2>
 800a10a:	e018      	b.n	800a13e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800a10c:	4b1a      	ldr	r3, [pc, #104]	; (800a178 <HAL_RCC_OscConfig+0x32c>)
 800a10e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a110:	4b19      	ldr	r3, [pc, #100]	; (800a178 <HAL_RCC_OscConfig+0x32c>)
 800a112:	2101      	movs	r1, #1
 800a114:	438a      	bics	r2, r1
 800a116:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a118:	f7ff f886 	bl	8009228 <HAL_GetTick>
 800a11c:	0003      	movs	r3, r0
 800a11e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a120:	e008      	b.n	800a134 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a122:	f7ff f881 	bl	8009228 <HAL_GetTick>
 800a126:	0002      	movs	r2, r0
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	1ad3      	subs	r3, r2, r3
 800a12c:	2b02      	cmp	r3, #2
 800a12e:	d901      	bls.n	800a134 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800a130:	2303      	movs	r3, #3
 800a132:	e188      	b.n	800a446 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a134:	4b10      	ldr	r3, [pc, #64]	; (800a178 <HAL_RCC_OscConfig+0x32c>)
 800a136:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a138:	2202      	movs	r2, #2
 800a13a:	4013      	ands	r3, r2
 800a13c:	d1f1      	bne.n	800a122 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	2204      	movs	r2, #4
 800a144:	4013      	ands	r3, r2
 800a146:	d100      	bne.n	800a14a <HAL_RCC_OscConfig+0x2fe>
 800a148:	e0c6      	b.n	800a2d8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a14a:	231f      	movs	r3, #31
 800a14c:	18fb      	adds	r3, r7, r3
 800a14e:	2200      	movs	r2, #0
 800a150:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800a152:	4b09      	ldr	r3, [pc, #36]	; (800a178 <HAL_RCC_OscConfig+0x32c>)
 800a154:	689b      	ldr	r3, [r3, #8]
 800a156:	2238      	movs	r2, #56	; 0x38
 800a158:	4013      	ands	r3, r2
 800a15a:	2b20      	cmp	r3, #32
 800a15c:	d11e      	bne.n	800a19c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800a15e:	4b06      	ldr	r3, [pc, #24]	; (800a178 <HAL_RCC_OscConfig+0x32c>)
 800a160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a162:	2202      	movs	r2, #2
 800a164:	4013      	ands	r3, r2
 800a166:	d100      	bne.n	800a16a <HAL_RCC_OscConfig+0x31e>
 800a168:	e0b6      	b.n	800a2d8 <HAL_RCC_OscConfig+0x48c>
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	689b      	ldr	r3, [r3, #8]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d000      	beq.n	800a174 <HAL_RCC_OscConfig+0x328>
 800a172:	e0b1      	b.n	800a2d8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800a174:	2301      	movs	r3, #1
 800a176:	e166      	b.n	800a446 <HAL_RCC_OscConfig+0x5fa>
 800a178:	40021000 	.word	0x40021000
 800a17c:	fffeffff 	.word	0xfffeffff
 800a180:	fffbffff 	.word	0xfffbffff
 800a184:	ffff80ff 	.word	0xffff80ff
 800a188:	ffffc7ff 	.word	0xffffc7ff
 800a18c:	00f42400 	.word	0x00f42400
 800a190:	200000b0 	.word	0x200000b0
 800a194:	200000b4 	.word	0x200000b4
 800a198:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a19c:	4bac      	ldr	r3, [pc, #688]	; (800a450 <HAL_RCC_OscConfig+0x604>)
 800a19e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a1a0:	2380      	movs	r3, #128	; 0x80
 800a1a2:	055b      	lsls	r3, r3, #21
 800a1a4:	4013      	ands	r3, r2
 800a1a6:	d101      	bne.n	800a1ac <HAL_RCC_OscConfig+0x360>
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	e000      	b.n	800a1ae <HAL_RCC_OscConfig+0x362>
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d011      	beq.n	800a1d6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800a1b2:	4ba7      	ldr	r3, [pc, #668]	; (800a450 <HAL_RCC_OscConfig+0x604>)
 800a1b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a1b6:	4ba6      	ldr	r3, [pc, #664]	; (800a450 <HAL_RCC_OscConfig+0x604>)
 800a1b8:	2180      	movs	r1, #128	; 0x80
 800a1ba:	0549      	lsls	r1, r1, #21
 800a1bc:	430a      	orrs	r2, r1
 800a1be:	63da      	str	r2, [r3, #60]	; 0x3c
 800a1c0:	4ba3      	ldr	r3, [pc, #652]	; (800a450 <HAL_RCC_OscConfig+0x604>)
 800a1c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a1c4:	2380      	movs	r3, #128	; 0x80
 800a1c6:	055b      	lsls	r3, r3, #21
 800a1c8:	4013      	ands	r3, r2
 800a1ca:	60fb      	str	r3, [r7, #12]
 800a1cc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800a1ce:	231f      	movs	r3, #31
 800a1d0:	18fb      	adds	r3, r7, r3
 800a1d2:	2201      	movs	r2, #1
 800a1d4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a1d6:	4b9f      	ldr	r3, [pc, #636]	; (800a454 <HAL_RCC_OscConfig+0x608>)
 800a1d8:	681a      	ldr	r2, [r3, #0]
 800a1da:	2380      	movs	r3, #128	; 0x80
 800a1dc:	005b      	lsls	r3, r3, #1
 800a1de:	4013      	ands	r3, r2
 800a1e0:	d11a      	bne.n	800a218 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a1e2:	4b9c      	ldr	r3, [pc, #624]	; (800a454 <HAL_RCC_OscConfig+0x608>)
 800a1e4:	681a      	ldr	r2, [r3, #0]
 800a1e6:	4b9b      	ldr	r3, [pc, #620]	; (800a454 <HAL_RCC_OscConfig+0x608>)
 800a1e8:	2180      	movs	r1, #128	; 0x80
 800a1ea:	0049      	lsls	r1, r1, #1
 800a1ec:	430a      	orrs	r2, r1
 800a1ee:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800a1f0:	f7ff f81a 	bl	8009228 <HAL_GetTick>
 800a1f4:	0003      	movs	r3, r0
 800a1f6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a1f8:	e008      	b.n	800a20c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a1fa:	f7ff f815 	bl	8009228 <HAL_GetTick>
 800a1fe:	0002      	movs	r2, r0
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	1ad3      	subs	r3, r2, r3
 800a204:	2b02      	cmp	r3, #2
 800a206:	d901      	bls.n	800a20c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800a208:	2303      	movs	r3, #3
 800a20a:	e11c      	b.n	800a446 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a20c:	4b91      	ldr	r3, [pc, #580]	; (800a454 <HAL_RCC_OscConfig+0x608>)
 800a20e:	681a      	ldr	r2, [r3, #0]
 800a210:	2380      	movs	r3, #128	; 0x80
 800a212:	005b      	lsls	r3, r3, #1
 800a214:	4013      	ands	r3, r2
 800a216:	d0f0      	beq.n	800a1fa <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	689b      	ldr	r3, [r3, #8]
 800a21c:	2b01      	cmp	r3, #1
 800a21e:	d106      	bne.n	800a22e <HAL_RCC_OscConfig+0x3e2>
 800a220:	4b8b      	ldr	r3, [pc, #556]	; (800a450 <HAL_RCC_OscConfig+0x604>)
 800a222:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a224:	4b8a      	ldr	r3, [pc, #552]	; (800a450 <HAL_RCC_OscConfig+0x604>)
 800a226:	2101      	movs	r1, #1
 800a228:	430a      	orrs	r2, r1
 800a22a:	65da      	str	r2, [r3, #92]	; 0x5c
 800a22c:	e01c      	b.n	800a268 <HAL_RCC_OscConfig+0x41c>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	689b      	ldr	r3, [r3, #8]
 800a232:	2b05      	cmp	r3, #5
 800a234:	d10c      	bne.n	800a250 <HAL_RCC_OscConfig+0x404>
 800a236:	4b86      	ldr	r3, [pc, #536]	; (800a450 <HAL_RCC_OscConfig+0x604>)
 800a238:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a23a:	4b85      	ldr	r3, [pc, #532]	; (800a450 <HAL_RCC_OscConfig+0x604>)
 800a23c:	2104      	movs	r1, #4
 800a23e:	430a      	orrs	r2, r1
 800a240:	65da      	str	r2, [r3, #92]	; 0x5c
 800a242:	4b83      	ldr	r3, [pc, #524]	; (800a450 <HAL_RCC_OscConfig+0x604>)
 800a244:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a246:	4b82      	ldr	r3, [pc, #520]	; (800a450 <HAL_RCC_OscConfig+0x604>)
 800a248:	2101      	movs	r1, #1
 800a24a:	430a      	orrs	r2, r1
 800a24c:	65da      	str	r2, [r3, #92]	; 0x5c
 800a24e:	e00b      	b.n	800a268 <HAL_RCC_OscConfig+0x41c>
 800a250:	4b7f      	ldr	r3, [pc, #508]	; (800a450 <HAL_RCC_OscConfig+0x604>)
 800a252:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a254:	4b7e      	ldr	r3, [pc, #504]	; (800a450 <HAL_RCC_OscConfig+0x604>)
 800a256:	2101      	movs	r1, #1
 800a258:	438a      	bics	r2, r1
 800a25a:	65da      	str	r2, [r3, #92]	; 0x5c
 800a25c:	4b7c      	ldr	r3, [pc, #496]	; (800a450 <HAL_RCC_OscConfig+0x604>)
 800a25e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a260:	4b7b      	ldr	r3, [pc, #492]	; (800a450 <HAL_RCC_OscConfig+0x604>)
 800a262:	2104      	movs	r1, #4
 800a264:	438a      	bics	r2, r1
 800a266:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	689b      	ldr	r3, [r3, #8]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d014      	beq.n	800a29a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a270:	f7fe ffda 	bl	8009228 <HAL_GetTick>
 800a274:	0003      	movs	r3, r0
 800a276:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a278:	e009      	b.n	800a28e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a27a:	f7fe ffd5 	bl	8009228 <HAL_GetTick>
 800a27e:	0002      	movs	r2, r0
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	1ad3      	subs	r3, r2, r3
 800a284:	4a74      	ldr	r2, [pc, #464]	; (800a458 <HAL_RCC_OscConfig+0x60c>)
 800a286:	4293      	cmp	r3, r2
 800a288:	d901      	bls.n	800a28e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800a28a:	2303      	movs	r3, #3
 800a28c:	e0db      	b.n	800a446 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a28e:	4b70      	ldr	r3, [pc, #448]	; (800a450 <HAL_RCC_OscConfig+0x604>)
 800a290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a292:	2202      	movs	r2, #2
 800a294:	4013      	ands	r3, r2
 800a296:	d0f0      	beq.n	800a27a <HAL_RCC_OscConfig+0x42e>
 800a298:	e013      	b.n	800a2c2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a29a:	f7fe ffc5 	bl	8009228 <HAL_GetTick>
 800a29e:	0003      	movs	r3, r0
 800a2a0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a2a2:	e009      	b.n	800a2b8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a2a4:	f7fe ffc0 	bl	8009228 <HAL_GetTick>
 800a2a8:	0002      	movs	r2, r0
 800a2aa:	693b      	ldr	r3, [r7, #16]
 800a2ac:	1ad3      	subs	r3, r2, r3
 800a2ae:	4a6a      	ldr	r2, [pc, #424]	; (800a458 <HAL_RCC_OscConfig+0x60c>)
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d901      	bls.n	800a2b8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800a2b4:	2303      	movs	r3, #3
 800a2b6:	e0c6      	b.n	800a446 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a2b8:	4b65      	ldr	r3, [pc, #404]	; (800a450 <HAL_RCC_OscConfig+0x604>)
 800a2ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2bc:	2202      	movs	r2, #2
 800a2be:	4013      	ands	r3, r2
 800a2c0:	d1f0      	bne.n	800a2a4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800a2c2:	231f      	movs	r3, #31
 800a2c4:	18fb      	adds	r3, r7, r3
 800a2c6:	781b      	ldrb	r3, [r3, #0]
 800a2c8:	2b01      	cmp	r3, #1
 800a2ca:	d105      	bne.n	800a2d8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800a2cc:	4b60      	ldr	r3, [pc, #384]	; (800a450 <HAL_RCC_OscConfig+0x604>)
 800a2ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a2d0:	4b5f      	ldr	r3, [pc, #380]	; (800a450 <HAL_RCC_OscConfig+0x604>)
 800a2d2:	4962      	ldr	r1, [pc, #392]	; (800a45c <HAL_RCC_OscConfig+0x610>)
 800a2d4:	400a      	ands	r2, r1
 800a2d6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	69db      	ldr	r3, [r3, #28]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d100      	bne.n	800a2e2 <HAL_RCC_OscConfig+0x496>
 800a2e0:	e0b0      	b.n	800a444 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a2e2:	4b5b      	ldr	r3, [pc, #364]	; (800a450 <HAL_RCC_OscConfig+0x604>)
 800a2e4:	689b      	ldr	r3, [r3, #8]
 800a2e6:	2238      	movs	r2, #56	; 0x38
 800a2e8:	4013      	ands	r3, r2
 800a2ea:	2b10      	cmp	r3, #16
 800a2ec:	d100      	bne.n	800a2f0 <HAL_RCC_OscConfig+0x4a4>
 800a2ee:	e078      	b.n	800a3e2 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	69db      	ldr	r3, [r3, #28]
 800a2f4:	2b02      	cmp	r3, #2
 800a2f6:	d153      	bne.n	800a3a0 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a2f8:	4b55      	ldr	r3, [pc, #340]	; (800a450 <HAL_RCC_OscConfig+0x604>)
 800a2fa:	681a      	ldr	r2, [r3, #0]
 800a2fc:	4b54      	ldr	r3, [pc, #336]	; (800a450 <HAL_RCC_OscConfig+0x604>)
 800a2fe:	4958      	ldr	r1, [pc, #352]	; (800a460 <HAL_RCC_OscConfig+0x614>)
 800a300:	400a      	ands	r2, r1
 800a302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a304:	f7fe ff90 	bl	8009228 <HAL_GetTick>
 800a308:	0003      	movs	r3, r0
 800a30a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a30c:	e008      	b.n	800a320 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a30e:	f7fe ff8b 	bl	8009228 <HAL_GetTick>
 800a312:	0002      	movs	r2, r0
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	1ad3      	subs	r3, r2, r3
 800a318:	2b02      	cmp	r3, #2
 800a31a:	d901      	bls.n	800a320 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800a31c:	2303      	movs	r3, #3
 800a31e:	e092      	b.n	800a446 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a320:	4b4b      	ldr	r3, [pc, #300]	; (800a450 <HAL_RCC_OscConfig+0x604>)
 800a322:	681a      	ldr	r2, [r3, #0]
 800a324:	2380      	movs	r3, #128	; 0x80
 800a326:	049b      	lsls	r3, r3, #18
 800a328:	4013      	ands	r3, r2
 800a32a:	d1f0      	bne.n	800a30e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a32c:	4b48      	ldr	r3, [pc, #288]	; (800a450 <HAL_RCC_OscConfig+0x604>)
 800a32e:	68db      	ldr	r3, [r3, #12]
 800a330:	4a4c      	ldr	r2, [pc, #304]	; (800a464 <HAL_RCC_OscConfig+0x618>)
 800a332:	4013      	ands	r3, r2
 800a334:	0019      	movs	r1, r3
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6a1a      	ldr	r2, [r3, #32]
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a33e:	431a      	orrs	r2, r3
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a344:	021b      	lsls	r3, r3, #8
 800a346:	431a      	orrs	r2, r3
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a34c:	431a      	orrs	r2, r3
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a352:	431a      	orrs	r2, r3
 800a354:	4b3e      	ldr	r3, [pc, #248]	; (800a450 <HAL_RCC_OscConfig+0x604>)
 800a356:	430a      	orrs	r2, r1
 800a358:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a35a:	4b3d      	ldr	r3, [pc, #244]	; (800a450 <HAL_RCC_OscConfig+0x604>)
 800a35c:	681a      	ldr	r2, [r3, #0]
 800a35e:	4b3c      	ldr	r3, [pc, #240]	; (800a450 <HAL_RCC_OscConfig+0x604>)
 800a360:	2180      	movs	r1, #128	; 0x80
 800a362:	0449      	lsls	r1, r1, #17
 800a364:	430a      	orrs	r2, r1
 800a366:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800a368:	4b39      	ldr	r3, [pc, #228]	; (800a450 <HAL_RCC_OscConfig+0x604>)
 800a36a:	68da      	ldr	r2, [r3, #12]
 800a36c:	4b38      	ldr	r3, [pc, #224]	; (800a450 <HAL_RCC_OscConfig+0x604>)
 800a36e:	2180      	movs	r1, #128	; 0x80
 800a370:	0549      	lsls	r1, r1, #21
 800a372:	430a      	orrs	r2, r1
 800a374:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a376:	f7fe ff57 	bl	8009228 <HAL_GetTick>
 800a37a:	0003      	movs	r3, r0
 800a37c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a37e:	e008      	b.n	800a392 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a380:	f7fe ff52 	bl	8009228 <HAL_GetTick>
 800a384:	0002      	movs	r2, r0
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	1ad3      	subs	r3, r2, r3
 800a38a:	2b02      	cmp	r3, #2
 800a38c:	d901      	bls.n	800a392 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800a38e:	2303      	movs	r3, #3
 800a390:	e059      	b.n	800a446 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a392:	4b2f      	ldr	r3, [pc, #188]	; (800a450 <HAL_RCC_OscConfig+0x604>)
 800a394:	681a      	ldr	r2, [r3, #0]
 800a396:	2380      	movs	r3, #128	; 0x80
 800a398:	049b      	lsls	r3, r3, #18
 800a39a:	4013      	ands	r3, r2
 800a39c:	d0f0      	beq.n	800a380 <HAL_RCC_OscConfig+0x534>
 800a39e:	e051      	b.n	800a444 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a3a0:	4b2b      	ldr	r3, [pc, #172]	; (800a450 <HAL_RCC_OscConfig+0x604>)
 800a3a2:	681a      	ldr	r2, [r3, #0]
 800a3a4:	4b2a      	ldr	r3, [pc, #168]	; (800a450 <HAL_RCC_OscConfig+0x604>)
 800a3a6:	492e      	ldr	r1, [pc, #184]	; (800a460 <HAL_RCC_OscConfig+0x614>)
 800a3a8:	400a      	ands	r2, r1
 800a3aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3ac:	f7fe ff3c 	bl	8009228 <HAL_GetTick>
 800a3b0:	0003      	movs	r3, r0
 800a3b2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a3b4:	e008      	b.n	800a3c8 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a3b6:	f7fe ff37 	bl	8009228 <HAL_GetTick>
 800a3ba:	0002      	movs	r2, r0
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	1ad3      	subs	r3, r2, r3
 800a3c0:	2b02      	cmp	r3, #2
 800a3c2:	d901      	bls.n	800a3c8 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 800a3c4:	2303      	movs	r3, #3
 800a3c6:	e03e      	b.n	800a446 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a3c8:	4b21      	ldr	r3, [pc, #132]	; (800a450 <HAL_RCC_OscConfig+0x604>)
 800a3ca:	681a      	ldr	r2, [r3, #0]
 800a3cc:	2380      	movs	r3, #128	; 0x80
 800a3ce:	049b      	lsls	r3, r3, #18
 800a3d0:	4013      	ands	r3, r2
 800a3d2:	d1f0      	bne.n	800a3b6 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800a3d4:	4b1e      	ldr	r3, [pc, #120]	; (800a450 <HAL_RCC_OscConfig+0x604>)
 800a3d6:	68da      	ldr	r2, [r3, #12]
 800a3d8:	4b1d      	ldr	r3, [pc, #116]	; (800a450 <HAL_RCC_OscConfig+0x604>)
 800a3da:	4923      	ldr	r1, [pc, #140]	; (800a468 <HAL_RCC_OscConfig+0x61c>)
 800a3dc:	400a      	ands	r2, r1
 800a3de:	60da      	str	r2, [r3, #12]
 800a3e0:	e030      	b.n	800a444 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	69db      	ldr	r3, [r3, #28]
 800a3e6:	2b01      	cmp	r3, #1
 800a3e8:	d101      	bne.n	800a3ee <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	e02b      	b.n	800a446 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800a3ee:	4b18      	ldr	r3, [pc, #96]	; (800a450 <HAL_RCC_OscConfig+0x604>)
 800a3f0:	68db      	ldr	r3, [r3, #12]
 800a3f2:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	2203      	movs	r2, #3
 800a3f8:	401a      	ands	r2, r3
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6a1b      	ldr	r3, [r3, #32]
 800a3fe:	429a      	cmp	r2, r3
 800a400:	d11e      	bne.n	800a440 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	2270      	movs	r2, #112	; 0x70
 800a406:	401a      	ands	r2, r3
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d117      	bne.n	800a440 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a410:	697a      	ldr	r2, [r7, #20]
 800a412:	23fe      	movs	r3, #254	; 0xfe
 800a414:	01db      	lsls	r3, r3, #7
 800a416:	401a      	ands	r2, r3
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a41c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a41e:	429a      	cmp	r2, r3
 800a420:	d10e      	bne.n	800a440 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a422:	697a      	ldr	r2, [r7, #20]
 800a424:	23f8      	movs	r3, #248	; 0xf8
 800a426:	039b      	lsls	r3, r3, #14
 800a428:	401a      	ands	r2, r3
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a42e:	429a      	cmp	r2, r3
 800a430:	d106      	bne.n	800a440 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800a432:	697b      	ldr	r3, [r7, #20]
 800a434:	0f5b      	lsrs	r3, r3, #29
 800a436:	075a      	lsls	r2, r3, #29
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a43c:	429a      	cmp	r2, r3
 800a43e:	d001      	beq.n	800a444 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 800a440:	2301      	movs	r3, #1
 800a442:	e000      	b.n	800a446 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 800a444:	2300      	movs	r3, #0
}
 800a446:	0018      	movs	r0, r3
 800a448:	46bd      	mov	sp, r7
 800a44a:	b008      	add	sp, #32
 800a44c:	bd80      	pop	{r7, pc}
 800a44e:	46c0      	nop			; (mov r8, r8)
 800a450:	40021000 	.word	0x40021000
 800a454:	40007000 	.word	0x40007000
 800a458:	00001388 	.word	0x00001388
 800a45c:	efffffff 	.word	0xefffffff
 800a460:	feffffff 	.word	0xfeffffff
 800a464:	1fc1808c 	.word	0x1fc1808c
 800a468:	effefffc 	.word	0xeffefffc

0800a46c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b084      	sub	sp, #16
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d101      	bne.n	800a480 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a47c:	2301      	movs	r3, #1
 800a47e:	e0e9      	b.n	800a654 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a480:	4b76      	ldr	r3, [pc, #472]	; (800a65c <HAL_RCC_ClockConfig+0x1f0>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	2207      	movs	r2, #7
 800a486:	4013      	ands	r3, r2
 800a488:	683a      	ldr	r2, [r7, #0]
 800a48a:	429a      	cmp	r2, r3
 800a48c:	d91e      	bls.n	800a4cc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a48e:	4b73      	ldr	r3, [pc, #460]	; (800a65c <HAL_RCC_ClockConfig+0x1f0>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	2207      	movs	r2, #7
 800a494:	4393      	bics	r3, r2
 800a496:	0019      	movs	r1, r3
 800a498:	4b70      	ldr	r3, [pc, #448]	; (800a65c <HAL_RCC_ClockConfig+0x1f0>)
 800a49a:	683a      	ldr	r2, [r7, #0]
 800a49c:	430a      	orrs	r2, r1
 800a49e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a4a0:	f7fe fec2 	bl	8009228 <HAL_GetTick>
 800a4a4:	0003      	movs	r3, r0
 800a4a6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a4a8:	e009      	b.n	800a4be <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a4aa:	f7fe febd 	bl	8009228 <HAL_GetTick>
 800a4ae:	0002      	movs	r2, r0
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	1ad3      	subs	r3, r2, r3
 800a4b4:	4a6a      	ldr	r2, [pc, #424]	; (800a660 <HAL_RCC_ClockConfig+0x1f4>)
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	d901      	bls.n	800a4be <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800a4ba:	2303      	movs	r3, #3
 800a4bc:	e0ca      	b.n	800a654 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a4be:	4b67      	ldr	r3, [pc, #412]	; (800a65c <HAL_RCC_ClockConfig+0x1f0>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	2207      	movs	r2, #7
 800a4c4:	4013      	ands	r3, r2
 800a4c6:	683a      	ldr	r2, [r7, #0]
 800a4c8:	429a      	cmp	r2, r3
 800a4ca:	d1ee      	bne.n	800a4aa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	2202      	movs	r2, #2
 800a4d2:	4013      	ands	r3, r2
 800a4d4:	d015      	beq.n	800a502 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	2204      	movs	r2, #4
 800a4dc:	4013      	ands	r3, r2
 800a4de:	d006      	beq.n	800a4ee <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800a4e0:	4b60      	ldr	r3, [pc, #384]	; (800a664 <HAL_RCC_ClockConfig+0x1f8>)
 800a4e2:	689a      	ldr	r2, [r3, #8]
 800a4e4:	4b5f      	ldr	r3, [pc, #380]	; (800a664 <HAL_RCC_ClockConfig+0x1f8>)
 800a4e6:	21e0      	movs	r1, #224	; 0xe0
 800a4e8:	01c9      	lsls	r1, r1, #7
 800a4ea:	430a      	orrs	r2, r1
 800a4ec:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a4ee:	4b5d      	ldr	r3, [pc, #372]	; (800a664 <HAL_RCC_ClockConfig+0x1f8>)
 800a4f0:	689b      	ldr	r3, [r3, #8]
 800a4f2:	4a5d      	ldr	r2, [pc, #372]	; (800a668 <HAL_RCC_ClockConfig+0x1fc>)
 800a4f4:	4013      	ands	r3, r2
 800a4f6:	0019      	movs	r1, r3
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	689a      	ldr	r2, [r3, #8]
 800a4fc:	4b59      	ldr	r3, [pc, #356]	; (800a664 <HAL_RCC_ClockConfig+0x1f8>)
 800a4fe:	430a      	orrs	r2, r1
 800a500:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	2201      	movs	r2, #1
 800a508:	4013      	ands	r3, r2
 800a50a:	d057      	beq.n	800a5bc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	685b      	ldr	r3, [r3, #4]
 800a510:	2b01      	cmp	r3, #1
 800a512:	d107      	bne.n	800a524 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a514:	4b53      	ldr	r3, [pc, #332]	; (800a664 <HAL_RCC_ClockConfig+0x1f8>)
 800a516:	681a      	ldr	r2, [r3, #0]
 800a518:	2380      	movs	r3, #128	; 0x80
 800a51a:	029b      	lsls	r3, r3, #10
 800a51c:	4013      	ands	r3, r2
 800a51e:	d12b      	bne.n	800a578 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a520:	2301      	movs	r3, #1
 800a522:	e097      	b.n	800a654 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	685b      	ldr	r3, [r3, #4]
 800a528:	2b02      	cmp	r3, #2
 800a52a:	d107      	bne.n	800a53c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a52c:	4b4d      	ldr	r3, [pc, #308]	; (800a664 <HAL_RCC_ClockConfig+0x1f8>)
 800a52e:	681a      	ldr	r2, [r3, #0]
 800a530:	2380      	movs	r3, #128	; 0x80
 800a532:	049b      	lsls	r3, r3, #18
 800a534:	4013      	ands	r3, r2
 800a536:	d11f      	bne.n	800a578 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a538:	2301      	movs	r3, #1
 800a53a:	e08b      	b.n	800a654 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	685b      	ldr	r3, [r3, #4]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d107      	bne.n	800a554 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a544:	4b47      	ldr	r3, [pc, #284]	; (800a664 <HAL_RCC_ClockConfig+0x1f8>)
 800a546:	681a      	ldr	r2, [r3, #0]
 800a548:	2380      	movs	r3, #128	; 0x80
 800a54a:	00db      	lsls	r3, r3, #3
 800a54c:	4013      	ands	r3, r2
 800a54e:	d113      	bne.n	800a578 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a550:	2301      	movs	r3, #1
 800a552:	e07f      	b.n	800a654 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	685b      	ldr	r3, [r3, #4]
 800a558:	2b03      	cmp	r3, #3
 800a55a:	d106      	bne.n	800a56a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a55c:	4b41      	ldr	r3, [pc, #260]	; (800a664 <HAL_RCC_ClockConfig+0x1f8>)
 800a55e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a560:	2202      	movs	r2, #2
 800a562:	4013      	ands	r3, r2
 800a564:	d108      	bne.n	800a578 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a566:	2301      	movs	r3, #1
 800a568:	e074      	b.n	800a654 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a56a:	4b3e      	ldr	r3, [pc, #248]	; (800a664 <HAL_RCC_ClockConfig+0x1f8>)
 800a56c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a56e:	2202      	movs	r2, #2
 800a570:	4013      	ands	r3, r2
 800a572:	d101      	bne.n	800a578 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a574:	2301      	movs	r3, #1
 800a576:	e06d      	b.n	800a654 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a578:	4b3a      	ldr	r3, [pc, #232]	; (800a664 <HAL_RCC_ClockConfig+0x1f8>)
 800a57a:	689b      	ldr	r3, [r3, #8]
 800a57c:	2207      	movs	r2, #7
 800a57e:	4393      	bics	r3, r2
 800a580:	0019      	movs	r1, r3
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	685a      	ldr	r2, [r3, #4]
 800a586:	4b37      	ldr	r3, [pc, #220]	; (800a664 <HAL_RCC_ClockConfig+0x1f8>)
 800a588:	430a      	orrs	r2, r1
 800a58a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a58c:	f7fe fe4c 	bl	8009228 <HAL_GetTick>
 800a590:	0003      	movs	r3, r0
 800a592:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a594:	e009      	b.n	800a5aa <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a596:	f7fe fe47 	bl	8009228 <HAL_GetTick>
 800a59a:	0002      	movs	r2, r0
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	1ad3      	subs	r3, r2, r3
 800a5a0:	4a2f      	ldr	r2, [pc, #188]	; (800a660 <HAL_RCC_ClockConfig+0x1f4>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d901      	bls.n	800a5aa <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800a5a6:	2303      	movs	r3, #3
 800a5a8:	e054      	b.n	800a654 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a5aa:	4b2e      	ldr	r3, [pc, #184]	; (800a664 <HAL_RCC_ClockConfig+0x1f8>)
 800a5ac:	689b      	ldr	r3, [r3, #8]
 800a5ae:	2238      	movs	r2, #56	; 0x38
 800a5b0:	401a      	ands	r2, r3
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	685b      	ldr	r3, [r3, #4]
 800a5b6:	00db      	lsls	r3, r3, #3
 800a5b8:	429a      	cmp	r2, r3
 800a5ba:	d1ec      	bne.n	800a596 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a5bc:	4b27      	ldr	r3, [pc, #156]	; (800a65c <HAL_RCC_ClockConfig+0x1f0>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	2207      	movs	r2, #7
 800a5c2:	4013      	ands	r3, r2
 800a5c4:	683a      	ldr	r2, [r7, #0]
 800a5c6:	429a      	cmp	r2, r3
 800a5c8:	d21e      	bcs.n	800a608 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a5ca:	4b24      	ldr	r3, [pc, #144]	; (800a65c <HAL_RCC_ClockConfig+0x1f0>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	2207      	movs	r2, #7
 800a5d0:	4393      	bics	r3, r2
 800a5d2:	0019      	movs	r1, r3
 800a5d4:	4b21      	ldr	r3, [pc, #132]	; (800a65c <HAL_RCC_ClockConfig+0x1f0>)
 800a5d6:	683a      	ldr	r2, [r7, #0]
 800a5d8:	430a      	orrs	r2, r1
 800a5da:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a5dc:	f7fe fe24 	bl	8009228 <HAL_GetTick>
 800a5e0:	0003      	movs	r3, r0
 800a5e2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a5e4:	e009      	b.n	800a5fa <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a5e6:	f7fe fe1f 	bl	8009228 <HAL_GetTick>
 800a5ea:	0002      	movs	r2, r0
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	1ad3      	subs	r3, r2, r3
 800a5f0:	4a1b      	ldr	r2, [pc, #108]	; (800a660 <HAL_RCC_ClockConfig+0x1f4>)
 800a5f2:	4293      	cmp	r3, r2
 800a5f4:	d901      	bls.n	800a5fa <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800a5f6:	2303      	movs	r3, #3
 800a5f8:	e02c      	b.n	800a654 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a5fa:	4b18      	ldr	r3, [pc, #96]	; (800a65c <HAL_RCC_ClockConfig+0x1f0>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	2207      	movs	r2, #7
 800a600:	4013      	ands	r3, r2
 800a602:	683a      	ldr	r2, [r7, #0]
 800a604:	429a      	cmp	r2, r3
 800a606:	d1ee      	bne.n	800a5e6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	2204      	movs	r2, #4
 800a60e:	4013      	ands	r3, r2
 800a610:	d009      	beq.n	800a626 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800a612:	4b14      	ldr	r3, [pc, #80]	; (800a664 <HAL_RCC_ClockConfig+0x1f8>)
 800a614:	689b      	ldr	r3, [r3, #8]
 800a616:	4a15      	ldr	r2, [pc, #84]	; (800a66c <HAL_RCC_ClockConfig+0x200>)
 800a618:	4013      	ands	r3, r2
 800a61a:	0019      	movs	r1, r3
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	68da      	ldr	r2, [r3, #12]
 800a620:	4b10      	ldr	r3, [pc, #64]	; (800a664 <HAL_RCC_ClockConfig+0x1f8>)
 800a622:	430a      	orrs	r2, r1
 800a624:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800a626:	f000 f829 	bl	800a67c <HAL_RCC_GetSysClockFreq>
 800a62a:	0001      	movs	r1, r0
 800a62c:	4b0d      	ldr	r3, [pc, #52]	; (800a664 <HAL_RCC_ClockConfig+0x1f8>)
 800a62e:	689b      	ldr	r3, [r3, #8]
 800a630:	0a1b      	lsrs	r3, r3, #8
 800a632:	220f      	movs	r2, #15
 800a634:	401a      	ands	r2, r3
 800a636:	4b0e      	ldr	r3, [pc, #56]	; (800a670 <HAL_RCC_ClockConfig+0x204>)
 800a638:	0092      	lsls	r2, r2, #2
 800a63a:	58d3      	ldr	r3, [r2, r3]
 800a63c:	221f      	movs	r2, #31
 800a63e:	4013      	ands	r3, r2
 800a640:	000a      	movs	r2, r1
 800a642:	40da      	lsrs	r2, r3
 800a644:	4b0b      	ldr	r3, [pc, #44]	; (800a674 <HAL_RCC_ClockConfig+0x208>)
 800a646:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800a648:	4b0b      	ldr	r3, [pc, #44]	; (800a678 <HAL_RCC_ClockConfig+0x20c>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	0018      	movs	r0, r3
 800a64e:	f7fe fd8f 	bl	8009170 <HAL_InitTick>
 800a652:	0003      	movs	r3, r0
}
 800a654:	0018      	movs	r0, r3
 800a656:	46bd      	mov	sp, r7
 800a658:	b004      	add	sp, #16
 800a65a:	bd80      	pop	{r7, pc}
 800a65c:	40022000 	.word	0x40022000
 800a660:	00001388 	.word	0x00001388
 800a664:	40021000 	.word	0x40021000
 800a668:	fffff0ff 	.word	0xfffff0ff
 800a66c:	ffff8fff 	.word	0xffff8fff
 800a670:	080133d4 	.word	0x080133d4
 800a674:	200000b0 	.word	0x200000b0
 800a678:	200000b4 	.word	0x200000b4

0800a67c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b086      	sub	sp, #24
 800a680:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a682:	4b3c      	ldr	r3, [pc, #240]	; (800a774 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a684:	689b      	ldr	r3, [r3, #8]
 800a686:	2238      	movs	r2, #56	; 0x38
 800a688:	4013      	ands	r3, r2
 800a68a:	d10f      	bne.n	800a6ac <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800a68c:	4b39      	ldr	r3, [pc, #228]	; (800a774 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	0adb      	lsrs	r3, r3, #11
 800a692:	2207      	movs	r2, #7
 800a694:	4013      	ands	r3, r2
 800a696:	2201      	movs	r2, #1
 800a698:	409a      	lsls	r2, r3
 800a69a:	0013      	movs	r3, r2
 800a69c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800a69e:	6839      	ldr	r1, [r7, #0]
 800a6a0:	4835      	ldr	r0, [pc, #212]	; (800a778 <HAL_RCC_GetSysClockFreq+0xfc>)
 800a6a2:	f7f5 fd53 	bl	800014c <__udivsi3>
 800a6a6:	0003      	movs	r3, r0
 800a6a8:	613b      	str	r3, [r7, #16]
 800a6aa:	e05d      	b.n	800a768 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a6ac:	4b31      	ldr	r3, [pc, #196]	; (800a774 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a6ae:	689b      	ldr	r3, [r3, #8]
 800a6b0:	2238      	movs	r2, #56	; 0x38
 800a6b2:	4013      	ands	r3, r2
 800a6b4:	2b08      	cmp	r3, #8
 800a6b6:	d102      	bne.n	800a6be <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a6b8:	4b30      	ldr	r3, [pc, #192]	; (800a77c <HAL_RCC_GetSysClockFreq+0x100>)
 800a6ba:	613b      	str	r3, [r7, #16]
 800a6bc:	e054      	b.n	800a768 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a6be:	4b2d      	ldr	r3, [pc, #180]	; (800a774 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a6c0:	689b      	ldr	r3, [r3, #8]
 800a6c2:	2238      	movs	r2, #56	; 0x38
 800a6c4:	4013      	ands	r3, r2
 800a6c6:	2b10      	cmp	r3, #16
 800a6c8:	d138      	bne.n	800a73c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800a6ca:	4b2a      	ldr	r3, [pc, #168]	; (800a774 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a6cc:	68db      	ldr	r3, [r3, #12]
 800a6ce:	2203      	movs	r2, #3
 800a6d0:	4013      	ands	r3, r2
 800a6d2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a6d4:	4b27      	ldr	r3, [pc, #156]	; (800a774 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a6d6:	68db      	ldr	r3, [r3, #12]
 800a6d8:	091b      	lsrs	r3, r3, #4
 800a6da:	2207      	movs	r2, #7
 800a6dc:	4013      	ands	r3, r2
 800a6de:	3301      	adds	r3, #1
 800a6e0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	2b03      	cmp	r3, #3
 800a6e6:	d10d      	bne.n	800a704 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a6e8:	68b9      	ldr	r1, [r7, #8]
 800a6ea:	4824      	ldr	r0, [pc, #144]	; (800a77c <HAL_RCC_GetSysClockFreq+0x100>)
 800a6ec:	f7f5 fd2e 	bl	800014c <__udivsi3>
 800a6f0:	0003      	movs	r3, r0
 800a6f2:	0019      	movs	r1, r3
 800a6f4:	4b1f      	ldr	r3, [pc, #124]	; (800a774 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a6f6:	68db      	ldr	r3, [r3, #12]
 800a6f8:	0a1b      	lsrs	r3, r3, #8
 800a6fa:	227f      	movs	r2, #127	; 0x7f
 800a6fc:	4013      	ands	r3, r2
 800a6fe:	434b      	muls	r3, r1
 800a700:	617b      	str	r3, [r7, #20]
        break;
 800a702:	e00d      	b.n	800a720 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800a704:	68b9      	ldr	r1, [r7, #8]
 800a706:	481c      	ldr	r0, [pc, #112]	; (800a778 <HAL_RCC_GetSysClockFreq+0xfc>)
 800a708:	f7f5 fd20 	bl	800014c <__udivsi3>
 800a70c:	0003      	movs	r3, r0
 800a70e:	0019      	movs	r1, r3
 800a710:	4b18      	ldr	r3, [pc, #96]	; (800a774 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a712:	68db      	ldr	r3, [r3, #12]
 800a714:	0a1b      	lsrs	r3, r3, #8
 800a716:	227f      	movs	r2, #127	; 0x7f
 800a718:	4013      	ands	r3, r2
 800a71a:	434b      	muls	r3, r1
 800a71c:	617b      	str	r3, [r7, #20]
        break;
 800a71e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800a720:	4b14      	ldr	r3, [pc, #80]	; (800a774 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a722:	68db      	ldr	r3, [r3, #12]
 800a724:	0f5b      	lsrs	r3, r3, #29
 800a726:	2207      	movs	r2, #7
 800a728:	4013      	ands	r3, r2
 800a72a:	3301      	adds	r3, #1
 800a72c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800a72e:	6879      	ldr	r1, [r7, #4]
 800a730:	6978      	ldr	r0, [r7, #20]
 800a732:	f7f5 fd0b 	bl	800014c <__udivsi3>
 800a736:	0003      	movs	r3, r0
 800a738:	613b      	str	r3, [r7, #16]
 800a73a:	e015      	b.n	800a768 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800a73c:	4b0d      	ldr	r3, [pc, #52]	; (800a774 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a73e:	689b      	ldr	r3, [r3, #8]
 800a740:	2238      	movs	r2, #56	; 0x38
 800a742:	4013      	ands	r3, r2
 800a744:	2b20      	cmp	r3, #32
 800a746:	d103      	bne.n	800a750 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800a748:	2380      	movs	r3, #128	; 0x80
 800a74a:	021b      	lsls	r3, r3, #8
 800a74c:	613b      	str	r3, [r7, #16]
 800a74e:	e00b      	b.n	800a768 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800a750:	4b08      	ldr	r3, [pc, #32]	; (800a774 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a752:	689b      	ldr	r3, [r3, #8]
 800a754:	2238      	movs	r2, #56	; 0x38
 800a756:	4013      	ands	r3, r2
 800a758:	2b18      	cmp	r3, #24
 800a75a:	d103      	bne.n	800a764 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800a75c:	23fa      	movs	r3, #250	; 0xfa
 800a75e:	01db      	lsls	r3, r3, #7
 800a760:	613b      	str	r3, [r7, #16]
 800a762:	e001      	b.n	800a768 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800a764:	2300      	movs	r3, #0
 800a766:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800a768:	693b      	ldr	r3, [r7, #16]
}
 800a76a:	0018      	movs	r0, r3
 800a76c:	46bd      	mov	sp, r7
 800a76e:	b006      	add	sp, #24
 800a770:	bd80      	pop	{r7, pc}
 800a772:	46c0      	nop			; (mov r8, r8)
 800a774:	40021000 	.word	0x40021000
 800a778:	00f42400 	.word	0x00f42400
 800a77c:	007a1200 	.word	0x007a1200

0800a780 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a784:	4b02      	ldr	r3, [pc, #8]	; (800a790 <HAL_RCC_GetHCLKFreq+0x10>)
 800a786:	681b      	ldr	r3, [r3, #0]
}
 800a788:	0018      	movs	r0, r3
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}
 800a78e:	46c0      	nop			; (mov r8, r8)
 800a790:	200000b0 	.word	0x200000b0

0800a794 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a794:	b5b0      	push	{r4, r5, r7, lr}
 800a796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800a798:	f7ff fff2 	bl	800a780 <HAL_RCC_GetHCLKFreq>
 800a79c:	0004      	movs	r4, r0
 800a79e:	f7ff fb49 	bl	8009e34 <LL_RCC_GetAPB1Prescaler>
 800a7a2:	0003      	movs	r3, r0
 800a7a4:	0b1a      	lsrs	r2, r3, #12
 800a7a6:	4b05      	ldr	r3, [pc, #20]	; (800a7bc <HAL_RCC_GetPCLK1Freq+0x28>)
 800a7a8:	0092      	lsls	r2, r2, #2
 800a7aa:	58d3      	ldr	r3, [r2, r3]
 800a7ac:	221f      	movs	r2, #31
 800a7ae:	4013      	ands	r3, r2
 800a7b0:	40dc      	lsrs	r4, r3
 800a7b2:	0023      	movs	r3, r4
}
 800a7b4:	0018      	movs	r0, r3
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bdb0      	pop	{r4, r5, r7, pc}
 800a7ba:	46c0      	nop			; (mov r8, r8)
 800a7bc:	08013414 	.word	0x08013414

0800a7c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b086      	sub	sp, #24
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800a7c8:	2313      	movs	r3, #19
 800a7ca:	18fb      	adds	r3, r7, r3
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a7d0:	2312      	movs	r3, #18
 800a7d2:	18fb      	adds	r3, r7, r3
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681a      	ldr	r2, [r3, #0]
 800a7dc:	2380      	movs	r3, #128	; 0x80
 800a7de:	029b      	lsls	r3, r3, #10
 800a7e0:	4013      	ands	r3, r2
 800a7e2:	d100      	bne.n	800a7e6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 800a7e4:	e0a3      	b.n	800a92e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a7e6:	2011      	movs	r0, #17
 800a7e8:	183b      	adds	r3, r7, r0
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a7ee:	4b86      	ldr	r3, [pc, #536]	; (800aa08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a7f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a7f2:	2380      	movs	r3, #128	; 0x80
 800a7f4:	055b      	lsls	r3, r3, #21
 800a7f6:	4013      	ands	r3, r2
 800a7f8:	d110      	bne.n	800a81c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a7fa:	4b83      	ldr	r3, [pc, #524]	; (800aa08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a7fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a7fe:	4b82      	ldr	r3, [pc, #520]	; (800aa08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a800:	2180      	movs	r1, #128	; 0x80
 800a802:	0549      	lsls	r1, r1, #21
 800a804:	430a      	orrs	r2, r1
 800a806:	63da      	str	r2, [r3, #60]	; 0x3c
 800a808:	4b7f      	ldr	r3, [pc, #508]	; (800aa08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a80a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a80c:	2380      	movs	r3, #128	; 0x80
 800a80e:	055b      	lsls	r3, r3, #21
 800a810:	4013      	ands	r3, r2
 800a812:	60bb      	str	r3, [r7, #8]
 800a814:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a816:	183b      	adds	r3, r7, r0
 800a818:	2201      	movs	r2, #1
 800a81a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a81c:	4b7b      	ldr	r3, [pc, #492]	; (800aa0c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800a81e:	681a      	ldr	r2, [r3, #0]
 800a820:	4b7a      	ldr	r3, [pc, #488]	; (800aa0c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800a822:	2180      	movs	r1, #128	; 0x80
 800a824:	0049      	lsls	r1, r1, #1
 800a826:	430a      	orrs	r2, r1
 800a828:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a82a:	f7fe fcfd 	bl	8009228 <HAL_GetTick>
 800a82e:	0003      	movs	r3, r0
 800a830:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a832:	e00b      	b.n	800a84c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a834:	f7fe fcf8 	bl	8009228 <HAL_GetTick>
 800a838:	0002      	movs	r2, r0
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	1ad3      	subs	r3, r2, r3
 800a83e:	2b02      	cmp	r3, #2
 800a840:	d904      	bls.n	800a84c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800a842:	2313      	movs	r3, #19
 800a844:	18fb      	adds	r3, r7, r3
 800a846:	2203      	movs	r2, #3
 800a848:	701a      	strb	r2, [r3, #0]
        break;
 800a84a:	e005      	b.n	800a858 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a84c:	4b6f      	ldr	r3, [pc, #444]	; (800aa0c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800a84e:	681a      	ldr	r2, [r3, #0]
 800a850:	2380      	movs	r3, #128	; 0x80
 800a852:	005b      	lsls	r3, r3, #1
 800a854:	4013      	ands	r3, r2
 800a856:	d0ed      	beq.n	800a834 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800a858:	2313      	movs	r3, #19
 800a85a:	18fb      	adds	r3, r7, r3
 800a85c:	781b      	ldrb	r3, [r3, #0]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d154      	bne.n	800a90c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a862:	4b69      	ldr	r3, [pc, #420]	; (800aa08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a864:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a866:	23c0      	movs	r3, #192	; 0xc0
 800a868:	009b      	lsls	r3, r3, #2
 800a86a:	4013      	ands	r3, r2
 800a86c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a86e:	697b      	ldr	r3, [r7, #20]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d019      	beq.n	800a8a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	699b      	ldr	r3, [r3, #24]
 800a878:	697a      	ldr	r2, [r7, #20]
 800a87a:	429a      	cmp	r2, r3
 800a87c:	d014      	beq.n	800a8a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a87e:	4b62      	ldr	r3, [pc, #392]	; (800aa08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a882:	4a63      	ldr	r2, [pc, #396]	; (800aa10 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800a884:	4013      	ands	r3, r2
 800a886:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a888:	4b5f      	ldr	r3, [pc, #380]	; (800aa08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a88a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a88c:	4b5e      	ldr	r3, [pc, #376]	; (800aa08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a88e:	2180      	movs	r1, #128	; 0x80
 800a890:	0249      	lsls	r1, r1, #9
 800a892:	430a      	orrs	r2, r1
 800a894:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a896:	4b5c      	ldr	r3, [pc, #368]	; (800aa08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a898:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a89a:	4b5b      	ldr	r3, [pc, #364]	; (800aa08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a89c:	495d      	ldr	r1, [pc, #372]	; (800aa14 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800a89e:	400a      	ands	r2, r1
 800a8a0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a8a2:	4b59      	ldr	r3, [pc, #356]	; (800aa08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a8a4:	697a      	ldr	r2, [r7, #20]
 800a8a6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a8a8:	697b      	ldr	r3, [r7, #20]
 800a8aa:	2201      	movs	r2, #1
 800a8ac:	4013      	ands	r3, r2
 800a8ae:	d016      	beq.n	800a8de <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8b0:	f7fe fcba 	bl	8009228 <HAL_GetTick>
 800a8b4:	0003      	movs	r3, r0
 800a8b6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a8b8:	e00c      	b.n	800a8d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a8ba:	f7fe fcb5 	bl	8009228 <HAL_GetTick>
 800a8be:	0002      	movs	r2, r0
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	1ad3      	subs	r3, r2, r3
 800a8c4:	4a54      	ldr	r2, [pc, #336]	; (800aa18 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a8c6:	4293      	cmp	r3, r2
 800a8c8:	d904      	bls.n	800a8d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800a8ca:	2313      	movs	r3, #19
 800a8cc:	18fb      	adds	r3, r7, r3
 800a8ce:	2203      	movs	r2, #3
 800a8d0:	701a      	strb	r2, [r3, #0]
            break;
 800a8d2:	e004      	b.n	800a8de <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a8d4:	4b4c      	ldr	r3, [pc, #304]	; (800aa08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a8d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8d8:	2202      	movs	r2, #2
 800a8da:	4013      	ands	r3, r2
 800a8dc:	d0ed      	beq.n	800a8ba <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800a8de:	2313      	movs	r3, #19
 800a8e0:	18fb      	adds	r3, r7, r3
 800a8e2:	781b      	ldrb	r3, [r3, #0]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d10a      	bne.n	800a8fe <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a8e8:	4b47      	ldr	r3, [pc, #284]	; (800aa08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a8ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8ec:	4a48      	ldr	r2, [pc, #288]	; (800aa10 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800a8ee:	4013      	ands	r3, r2
 800a8f0:	0019      	movs	r1, r3
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	699a      	ldr	r2, [r3, #24]
 800a8f6:	4b44      	ldr	r3, [pc, #272]	; (800aa08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a8f8:	430a      	orrs	r2, r1
 800a8fa:	65da      	str	r2, [r3, #92]	; 0x5c
 800a8fc:	e00c      	b.n	800a918 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a8fe:	2312      	movs	r3, #18
 800a900:	18fb      	adds	r3, r7, r3
 800a902:	2213      	movs	r2, #19
 800a904:	18ba      	adds	r2, r7, r2
 800a906:	7812      	ldrb	r2, [r2, #0]
 800a908:	701a      	strb	r2, [r3, #0]
 800a90a:	e005      	b.n	800a918 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a90c:	2312      	movs	r3, #18
 800a90e:	18fb      	adds	r3, r7, r3
 800a910:	2213      	movs	r2, #19
 800a912:	18ba      	adds	r2, r7, r2
 800a914:	7812      	ldrb	r2, [r2, #0]
 800a916:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a918:	2311      	movs	r3, #17
 800a91a:	18fb      	adds	r3, r7, r3
 800a91c:	781b      	ldrb	r3, [r3, #0]
 800a91e:	2b01      	cmp	r3, #1
 800a920:	d105      	bne.n	800a92e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a922:	4b39      	ldr	r3, [pc, #228]	; (800aa08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a924:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a926:	4b38      	ldr	r3, [pc, #224]	; (800aa08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a928:	493c      	ldr	r1, [pc, #240]	; (800aa1c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800a92a:	400a      	ands	r2, r1
 800a92c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	2201      	movs	r2, #1
 800a934:	4013      	ands	r3, r2
 800a936:	d009      	beq.n	800a94c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a938:	4b33      	ldr	r3, [pc, #204]	; (800aa08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a93a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a93c:	2203      	movs	r2, #3
 800a93e:	4393      	bics	r3, r2
 800a940:	0019      	movs	r1, r3
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	685a      	ldr	r2, [r3, #4]
 800a946:	4b30      	ldr	r3, [pc, #192]	; (800aa08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a948:	430a      	orrs	r2, r1
 800a94a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	2202      	movs	r2, #2
 800a952:	4013      	ands	r3, r2
 800a954:	d009      	beq.n	800a96a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a956:	4b2c      	ldr	r3, [pc, #176]	; (800aa08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a95a:	220c      	movs	r2, #12
 800a95c:	4393      	bics	r3, r2
 800a95e:	0019      	movs	r1, r3
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	689a      	ldr	r2, [r3, #8]
 800a964:	4b28      	ldr	r3, [pc, #160]	; (800aa08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a966:	430a      	orrs	r2, r1
 800a968:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	2220      	movs	r2, #32
 800a970:	4013      	ands	r3, r2
 800a972:	d009      	beq.n	800a988 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a974:	4b24      	ldr	r3, [pc, #144]	; (800aa08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a978:	4a29      	ldr	r2, [pc, #164]	; (800aa20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a97a:	4013      	ands	r3, r2
 800a97c:	0019      	movs	r1, r3
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	68da      	ldr	r2, [r3, #12]
 800a982:	4b21      	ldr	r3, [pc, #132]	; (800aa08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a984:	430a      	orrs	r2, r1
 800a986:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681a      	ldr	r2, [r3, #0]
 800a98c:	2380      	movs	r3, #128	; 0x80
 800a98e:	01db      	lsls	r3, r3, #7
 800a990:	4013      	ands	r3, r2
 800a992:	d015      	beq.n	800a9c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a994:	4b1c      	ldr	r3, [pc, #112]	; (800aa08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a998:	009b      	lsls	r3, r3, #2
 800a99a:	0899      	lsrs	r1, r3, #2
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	695a      	ldr	r2, [r3, #20]
 800a9a0:	4b19      	ldr	r3, [pc, #100]	; (800aa08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a9a2:	430a      	orrs	r2, r1
 800a9a4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	695a      	ldr	r2, [r3, #20]
 800a9aa:	2380      	movs	r3, #128	; 0x80
 800a9ac:	05db      	lsls	r3, r3, #23
 800a9ae:	429a      	cmp	r2, r3
 800a9b0:	d106      	bne.n	800a9c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800a9b2:	4b15      	ldr	r3, [pc, #84]	; (800aa08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a9b4:	68da      	ldr	r2, [r3, #12]
 800a9b6:	4b14      	ldr	r3, [pc, #80]	; (800aa08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a9b8:	2180      	movs	r1, #128	; 0x80
 800a9ba:	0249      	lsls	r1, r1, #9
 800a9bc:	430a      	orrs	r2, r1
 800a9be:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681a      	ldr	r2, [r3, #0]
 800a9c4:	2380      	movs	r3, #128	; 0x80
 800a9c6:	011b      	lsls	r3, r3, #4
 800a9c8:	4013      	ands	r3, r2
 800a9ca:	d016      	beq.n	800a9fa <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800a9cc:	4b0e      	ldr	r3, [pc, #56]	; (800aa08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a9ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9d0:	4a14      	ldr	r2, [pc, #80]	; (800aa24 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800a9d2:	4013      	ands	r3, r2
 800a9d4:	0019      	movs	r1, r3
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	691a      	ldr	r2, [r3, #16]
 800a9da:	4b0b      	ldr	r3, [pc, #44]	; (800aa08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a9dc:	430a      	orrs	r2, r1
 800a9de:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	691a      	ldr	r2, [r3, #16]
 800a9e4:	2380      	movs	r3, #128	; 0x80
 800a9e6:	01db      	lsls	r3, r3, #7
 800a9e8:	429a      	cmp	r2, r3
 800a9ea:	d106      	bne.n	800a9fa <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800a9ec:	4b06      	ldr	r3, [pc, #24]	; (800aa08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a9ee:	68da      	ldr	r2, [r3, #12]
 800a9f0:	4b05      	ldr	r3, [pc, #20]	; (800aa08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a9f2:	2180      	movs	r1, #128	; 0x80
 800a9f4:	0249      	lsls	r1, r1, #9
 800a9f6:	430a      	orrs	r2, r1
 800a9f8:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800a9fa:	2312      	movs	r3, #18
 800a9fc:	18fb      	adds	r3, r7, r3
 800a9fe:	781b      	ldrb	r3, [r3, #0]
}
 800aa00:	0018      	movs	r0, r3
 800aa02:	46bd      	mov	sp, r7
 800aa04:	b006      	add	sp, #24
 800aa06:	bd80      	pop	{r7, pc}
 800aa08:	40021000 	.word	0x40021000
 800aa0c:	40007000 	.word	0x40007000
 800aa10:	fffffcff 	.word	0xfffffcff
 800aa14:	fffeffff 	.word	0xfffeffff
 800aa18:	00001388 	.word	0x00001388
 800aa1c:	efffffff 	.word	0xefffffff
 800aa20:	ffffcfff 	.word	0xffffcfff
 800aa24:	ffff3fff 	.word	0xffff3fff

0800aa28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b084      	sub	sp, #16
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d101      	bne.n	800aa3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800aa36:	2301      	movs	r3, #1
 800aa38:	e0a8      	b.n	800ab8c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d109      	bne.n	800aa56 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	685a      	ldr	r2, [r3, #4]
 800aa46:	2382      	movs	r3, #130	; 0x82
 800aa48:	005b      	lsls	r3, r3, #1
 800aa4a:	429a      	cmp	r2, r3
 800aa4c:	d009      	beq.n	800aa62 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2200      	movs	r2, #0
 800aa52:	61da      	str	r2, [r3, #28]
 800aa54:	e005      	b.n	800aa62 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2200      	movs	r2, #0
 800aa60:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2200      	movs	r2, #0
 800aa66:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	225d      	movs	r2, #93	; 0x5d
 800aa6c:	5c9b      	ldrb	r3, [r3, r2]
 800aa6e:	b2db      	uxtb	r3, r3
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d107      	bne.n	800aa84 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	225c      	movs	r2, #92	; 0x5c
 800aa78:	2100      	movs	r1, #0
 800aa7a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	0018      	movs	r0, r3
 800aa80:	f7fd fa10 	bl	8007ea4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	225d      	movs	r2, #93	; 0x5d
 800aa88:	2102      	movs	r1, #2
 800aa8a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	681a      	ldr	r2, [r3, #0]
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	2140      	movs	r1, #64	; 0x40
 800aa98:	438a      	bics	r2, r1
 800aa9a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	68da      	ldr	r2, [r3, #12]
 800aaa0:	23e0      	movs	r3, #224	; 0xe0
 800aaa2:	00db      	lsls	r3, r3, #3
 800aaa4:	429a      	cmp	r2, r3
 800aaa6:	d902      	bls.n	800aaae <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	60fb      	str	r3, [r7, #12]
 800aaac:	e002      	b.n	800aab4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800aaae:	2380      	movs	r3, #128	; 0x80
 800aab0:	015b      	lsls	r3, r3, #5
 800aab2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	68da      	ldr	r2, [r3, #12]
 800aab8:	23f0      	movs	r3, #240	; 0xf0
 800aaba:	011b      	lsls	r3, r3, #4
 800aabc:	429a      	cmp	r2, r3
 800aabe:	d008      	beq.n	800aad2 <HAL_SPI_Init+0xaa>
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	68da      	ldr	r2, [r3, #12]
 800aac4:	23e0      	movs	r3, #224	; 0xe0
 800aac6:	00db      	lsls	r3, r3, #3
 800aac8:	429a      	cmp	r2, r3
 800aaca:	d002      	beq.n	800aad2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2200      	movs	r2, #0
 800aad0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	685a      	ldr	r2, [r3, #4]
 800aad6:	2382      	movs	r3, #130	; 0x82
 800aad8:	005b      	lsls	r3, r3, #1
 800aada:	401a      	ands	r2, r3
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6899      	ldr	r1, [r3, #8]
 800aae0:	2384      	movs	r3, #132	; 0x84
 800aae2:	021b      	lsls	r3, r3, #8
 800aae4:	400b      	ands	r3, r1
 800aae6:	431a      	orrs	r2, r3
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	691b      	ldr	r3, [r3, #16]
 800aaec:	2102      	movs	r1, #2
 800aaee:	400b      	ands	r3, r1
 800aaf0:	431a      	orrs	r2, r3
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	695b      	ldr	r3, [r3, #20]
 800aaf6:	2101      	movs	r1, #1
 800aaf8:	400b      	ands	r3, r1
 800aafa:	431a      	orrs	r2, r3
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	6999      	ldr	r1, [r3, #24]
 800ab00:	2380      	movs	r3, #128	; 0x80
 800ab02:	009b      	lsls	r3, r3, #2
 800ab04:	400b      	ands	r3, r1
 800ab06:	431a      	orrs	r2, r3
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	69db      	ldr	r3, [r3, #28]
 800ab0c:	2138      	movs	r1, #56	; 0x38
 800ab0e:	400b      	ands	r3, r1
 800ab10:	431a      	orrs	r2, r3
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6a1b      	ldr	r3, [r3, #32]
 800ab16:	2180      	movs	r1, #128	; 0x80
 800ab18:	400b      	ands	r3, r1
 800ab1a:	431a      	orrs	r2, r3
 800ab1c:	0011      	movs	r1, r2
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ab22:	2380      	movs	r3, #128	; 0x80
 800ab24:	019b      	lsls	r3, r3, #6
 800ab26:	401a      	ands	r2, r3
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	430a      	orrs	r2, r1
 800ab2e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	699b      	ldr	r3, [r3, #24]
 800ab34:	0c1b      	lsrs	r3, r3, #16
 800ab36:	2204      	movs	r2, #4
 800ab38:	401a      	ands	r2, r3
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab3e:	2110      	movs	r1, #16
 800ab40:	400b      	ands	r3, r1
 800ab42:	431a      	orrs	r2, r3
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab48:	2108      	movs	r1, #8
 800ab4a:	400b      	ands	r3, r1
 800ab4c:	431a      	orrs	r2, r3
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	68d9      	ldr	r1, [r3, #12]
 800ab52:	23f0      	movs	r3, #240	; 0xf0
 800ab54:	011b      	lsls	r3, r3, #4
 800ab56:	400b      	ands	r3, r1
 800ab58:	431a      	orrs	r2, r3
 800ab5a:	0011      	movs	r1, r2
 800ab5c:	68fa      	ldr	r2, [r7, #12]
 800ab5e:	2380      	movs	r3, #128	; 0x80
 800ab60:	015b      	lsls	r3, r3, #5
 800ab62:	401a      	ands	r2, r3
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	430a      	orrs	r2, r1
 800ab6a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	69da      	ldr	r2, [r3, #28]
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	4907      	ldr	r1, [pc, #28]	; (800ab94 <HAL_SPI_Init+0x16c>)
 800ab78:	400a      	ands	r2, r1
 800ab7a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	225d      	movs	r2, #93	; 0x5d
 800ab86:	2101      	movs	r1, #1
 800ab88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ab8a:	2300      	movs	r3, #0
}
 800ab8c:	0018      	movs	r0, r3
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	b004      	add	sp, #16
 800ab92:	bd80      	pop	{r7, pc}
 800ab94:	fffff7ff 	.word	0xfffff7ff

0800ab98 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b088      	sub	sp, #32
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	60f8      	str	r0, [r7, #12]
 800aba0:	60b9      	str	r1, [r7, #8]
 800aba2:	603b      	str	r3, [r7, #0]
 800aba4:	1dbb      	adds	r3, r7, #6
 800aba6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800aba8:	231f      	movs	r3, #31
 800abaa:	18fb      	adds	r3, r7, r3
 800abac:	2200      	movs	r2, #0
 800abae:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	225c      	movs	r2, #92	; 0x5c
 800abb4:	5c9b      	ldrb	r3, [r3, r2]
 800abb6:	2b01      	cmp	r3, #1
 800abb8:	d101      	bne.n	800abbe <HAL_SPI_Transmit+0x26>
 800abba:	2302      	movs	r3, #2
 800abbc:	e140      	b.n	800ae40 <HAL_SPI_Transmit+0x2a8>
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	225c      	movs	r2, #92	; 0x5c
 800abc2:	2101      	movs	r1, #1
 800abc4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800abc6:	f7fe fb2f 	bl	8009228 <HAL_GetTick>
 800abca:	0003      	movs	r3, r0
 800abcc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800abce:	2316      	movs	r3, #22
 800abd0:	18fb      	adds	r3, r7, r3
 800abd2:	1dba      	adds	r2, r7, #6
 800abd4:	8812      	ldrh	r2, [r2, #0]
 800abd6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	225d      	movs	r2, #93	; 0x5d
 800abdc:	5c9b      	ldrb	r3, [r3, r2]
 800abde:	b2db      	uxtb	r3, r3
 800abe0:	2b01      	cmp	r3, #1
 800abe2:	d004      	beq.n	800abee <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800abe4:	231f      	movs	r3, #31
 800abe6:	18fb      	adds	r3, r7, r3
 800abe8:	2202      	movs	r2, #2
 800abea:	701a      	strb	r2, [r3, #0]
    goto error;
 800abec:	e11d      	b.n	800ae2a <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d003      	beq.n	800abfc <HAL_SPI_Transmit+0x64>
 800abf4:	1dbb      	adds	r3, r7, #6
 800abf6:	881b      	ldrh	r3, [r3, #0]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d104      	bne.n	800ac06 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800abfc:	231f      	movs	r3, #31
 800abfe:	18fb      	adds	r3, r7, r3
 800ac00:	2201      	movs	r2, #1
 800ac02:	701a      	strb	r2, [r3, #0]
    goto error;
 800ac04:	e111      	b.n	800ae2a <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	225d      	movs	r2, #93	; 0x5d
 800ac0a:	2103      	movs	r1, #3
 800ac0c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	2200      	movs	r2, #0
 800ac12:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	68ba      	ldr	r2, [r7, #8]
 800ac18:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	1dba      	adds	r2, r7, #6
 800ac1e:	8812      	ldrh	r2, [r2, #0]
 800ac20:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	1dba      	adds	r2, r7, #6
 800ac26:	8812      	ldrh	r2, [r2, #0]
 800ac28:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	2244      	movs	r2, #68	; 0x44
 800ac34:	2100      	movs	r1, #0
 800ac36:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	2246      	movs	r2, #70	; 0x46
 800ac3c:	2100      	movs	r1, #0
 800ac3e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	2200      	movs	r2, #0
 800ac44:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	689a      	ldr	r2, [r3, #8]
 800ac50:	2380      	movs	r3, #128	; 0x80
 800ac52:	021b      	lsls	r3, r3, #8
 800ac54:	429a      	cmp	r2, r3
 800ac56:	d110      	bne.n	800ac7a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	681a      	ldr	r2, [r3, #0]
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	2140      	movs	r1, #64	; 0x40
 800ac64:	438a      	bics	r2, r1
 800ac66:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	681a      	ldr	r2, [r3, #0]
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	2180      	movs	r1, #128	; 0x80
 800ac74:	01c9      	lsls	r1, r1, #7
 800ac76:	430a      	orrs	r2, r1
 800ac78:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	2240      	movs	r2, #64	; 0x40
 800ac82:	4013      	ands	r3, r2
 800ac84:	2b40      	cmp	r3, #64	; 0x40
 800ac86:	d007      	beq.n	800ac98 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	681a      	ldr	r2, [r3, #0]
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	2140      	movs	r1, #64	; 0x40
 800ac94:	430a      	orrs	r2, r1
 800ac96:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	68da      	ldr	r2, [r3, #12]
 800ac9c:	23e0      	movs	r3, #224	; 0xe0
 800ac9e:	00db      	lsls	r3, r3, #3
 800aca0:	429a      	cmp	r2, r3
 800aca2:	d94e      	bls.n	800ad42 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	685b      	ldr	r3, [r3, #4]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d004      	beq.n	800acb6 <HAL_SPI_Transmit+0x11e>
 800acac:	2316      	movs	r3, #22
 800acae:	18fb      	adds	r3, r7, r3
 800acb0:	881b      	ldrh	r3, [r3, #0]
 800acb2:	2b01      	cmp	r3, #1
 800acb4:	d13f      	bne.n	800ad36 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acba:	881a      	ldrh	r2, [r3, #0]
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acc6:	1c9a      	adds	r2, r3, #2
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800acd0:	b29b      	uxth	r3, r3
 800acd2:	3b01      	subs	r3, #1
 800acd4:	b29a      	uxth	r2, r3
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800acda:	e02c      	b.n	800ad36 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	689b      	ldr	r3, [r3, #8]
 800ace2:	2202      	movs	r2, #2
 800ace4:	4013      	ands	r3, r2
 800ace6:	2b02      	cmp	r3, #2
 800ace8:	d112      	bne.n	800ad10 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acee:	881a      	ldrh	r2, [r3, #0]
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acfa:	1c9a      	adds	r2, r3, #2
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ad04:	b29b      	uxth	r3, r3
 800ad06:	3b01      	subs	r3, #1
 800ad08:	b29a      	uxth	r2, r3
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ad0e:	e012      	b.n	800ad36 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ad10:	f7fe fa8a 	bl	8009228 <HAL_GetTick>
 800ad14:	0002      	movs	r2, r0
 800ad16:	69bb      	ldr	r3, [r7, #24]
 800ad18:	1ad3      	subs	r3, r2, r3
 800ad1a:	683a      	ldr	r2, [r7, #0]
 800ad1c:	429a      	cmp	r2, r3
 800ad1e:	d802      	bhi.n	800ad26 <HAL_SPI_Transmit+0x18e>
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	3301      	adds	r3, #1
 800ad24:	d102      	bne.n	800ad2c <HAL_SPI_Transmit+0x194>
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d104      	bne.n	800ad36 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 800ad2c:	231f      	movs	r3, #31
 800ad2e:	18fb      	adds	r3, r7, r3
 800ad30:	2203      	movs	r2, #3
 800ad32:	701a      	strb	r2, [r3, #0]
          goto error;
 800ad34:	e079      	b.n	800ae2a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ad3a:	b29b      	uxth	r3, r3
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d1cd      	bne.n	800acdc <HAL_SPI_Transmit+0x144>
 800ad40:	e04f      	b.n	800ade2 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	685b      	ldr	r3, [r3, #4]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d004      	beq.n	800ad54 <HAL_SPI_Transmit+0x1bc>
 800ad4a:	2316      	movs	r3, #22
 800ad4c:	18fb      	adds	r3, r7, r3
 800ad4e:	881b      	ldrh	r3, [r3, #0]
 800ad50:	2b01      	cmp	r3, #1
 800ad52:	d141      	bne.n	800add8 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	330c      	adds	r3, #12
 800ad5e:	7812      	ldrb	r2, [r2, #0]
 800ad60:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad66:	1c5a      	adds	r2, r3, #1
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ad70:	b29b      	uxth	r3, r3
 800ad72:	3b01      	subs	r3, #1
 800ad74:	b29a      	uxth	r2, r3
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800ad7a:	e02d      	b.n	800add8 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	689b      	ldr	r3, [r3, #8]
 800ad82:	2202      	movs	r2, #2
 800ad84:	4013      	ands	r3, r2
 800ad86:	2b02      	cmp	r3, #2
 800ad88:	d113      	bne.n	800adb2 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	330c      	adds	r3, #12
 800ad94:	7812      	ldrb	r2, [r2, #0]
 800ad96:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad9c:	1c5a      	adds	r2, r3, #1
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ada6:	b29b      	uxth	r3, r3
 800ada8:	3b01      	subs	r3, #1
 800adaa:	b29a      	uxth	r2, r3
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	87da      	strh	r2, [r3, #62]	; 0x3e
 800adb0:	e012      	b.n	800add8 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800adb2:	f7fe fa39 	bl	8009228 <HAL_GetTick>
 800adb6:	0002      	movs	r2, r0
 800adb8:	69bb      	ldr	r3, [r7, #24]
 800adba:	1ad3      	subs	r3, r2, r3
 800adbc:	683a      	ldr	r2, [r7, #0]
 800adbe:	429a      	cmp	r2, r3
 800adc0:	d802      	bhi.n	800adc8 <HAL_SPI_Transmit+0x230>
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	3301      	adds	r3, #1
 800adc6:	d102      	bne.n	800adce <HAL_SPI_Transmit+0x236>
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d104      	bne.n	800add8 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800adce:	231f      	movs	r3, #31
 800add0:	18fb      	adds	r3, r7, r3
 800add2:	2203      	movs	r2, #3
 800add4:	701a      	strb	r2, [r3, #0]
          goto error;
 800add6:	e028      	b.n	800ae2a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800addc:	b29b      	uxth	r3, r3
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d1cc      	bne.n	800ad7c <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ade2:	69ba      	ldr	r2, [r7, #24]
 800ade4:	6839      	ldr	r1, [r7, #0]
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	0018      	movs	r0, r3
 800adea:	f000 fdf5 	bl	800b9d8 <SPI_EndRxTxTransaction>
 800adee:	1e03      	subs	r3, r0, #0
 800adf0:	d002      	beq.n	800adf8 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	2220      	movs	r2, #32
 800adf6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	689b      	ldr	r3, [r3, #8]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d10a      	bne.n	800ae16 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ae00:	2300      	movs	r3, #0
 800ae02:	613b      	str	r3, [r7, #16]
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	68db      	ldr	r3, [r3, #12]
 800ae0a:	613b      	str	r3, [r7, #16]
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	689b      	ldr	r3, [r3, #8]
 800ae12:	613b      	str	r3, [r7, #16]
 800ae14:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d004      	beq.n	800ae28 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800ae1e:	231f      	movs	r3, #31
 800ae20:	18fb      	adds	r3, r7, r3
 800ae22:	2201      	movs	r2, #1
 800ae24:	701a      	strb	r2, [r3, #0]
 800ae26:	e000      	b.n	800ae2a <HAL_SPI_Transmit+0x292>
  }

error:
 800ae28:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	225d      	movs	r2, #93	; 0x5d
 800ae2e:	2101      	movs	r1, #1
 800ae30:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	225c      	movs	r2, #92	; 0x5c
 800ae36:	2100      	movs	r1, #0
 800ae38:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800ae3a:	231f      	movs	r3, #31
 800ae3c:	18fb      	adds	r3, r7, r3
 800ae3e:	781b      	ldrb	r3, [r3, #0]
}
 800ae40:	0018      	movs	r0, r3
 800ae42:	46bd      	mov	sp, r7
 800ae44:	b008      	add	sp, #32
 800ae46:	bd80      	pop	{r7, pc}

0800ae48 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ae48:	b590      	push	{r4, r7, lr}
 800ae4a:	b089      	sub	sp, #36	; 0x24
 800ae4c:	af02      	add	r7, sp, #8
 800ae4e:	60f8      	str	r0, [r7, #12]
 800ae50:	60b9      	str	r1, [r7, #8]
 800ae52:	603b      	str	r3, [r7, #0]
 800ae54:	1dbb      	adds	r3, r7, #6
 800ae56:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ae58:	2317      	movs	r3, #23
 800ae5a:	18fb      	adds	r3, r7, r3
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	685a      	ldr	r2, [r3, #4]
 800ae64:	2382      	movs	r3, #130	; 0x82
 800ae66:	005b      	lsls	r3, r3, #1
 800ae68:	429a      	cmp	r2, r3
 800ae6a:	d113      	bne.n	800ae94 <HAL_SPI_Receive+0x4c>
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	689b      	ldr	r3, [r3, #8]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d10f      	bne.n	800ae94 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	225d      	movs	r2, #93	; 0x5d
 800ae78:	2104      	movs	r1, #4
 800ae7a:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800ae7c:	1dbb      	adds	r3, r7, #6
 800ae7e:	881c      	ldrh	r4, [r3, #0]
 800ae80:	68ba      	ldr	r2, [r7, #8]
 800ae82:	68b9      	ldr	r1, [r7, #8]
 800ae84:	68f8      	ldr	r0, [r7, #12]
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	9300      	str	r3, [sp, #0]
 800ae8a:	0023      	movs	r3, r4
 800ae8c:	f000 f928 	bl	800b0e0 <HAL_SPI_TransmitReceive>
 800ae90:	0003      	movs	r3, r0
 800ae92:	e11c      	b.n	800b0ce <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	225c      	movs	r2, #92	; 0x5c
 800ae98:	5c9b      	ldrb	r3, [r3, r2]
 800ae9a:	2b01      	cmp	r3, #1
 800ae9c:	d101      	bne.n	800aea2 <HAL_SPI_Receive+0x5a>
 800ae9e:	2302      	movs	r3, #2
 800aea0:	e115      	b.n	800b0ce <HAL_SPI_Receive+0x286>
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	225c      	movs	r2, #92	; 0x5c
 800aea6:	2101      	movs	r1, #1
 800aea8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800aeaa:	f7fe f9bd 	bl	8009228 <HAL_GetTick>
 800aeae:	0003      	movs	r3, r0
 800aeb0:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	225d      	movs	r2, #93	; 0x5d
 800aeb6:	5c9b      	ldrb	r3, [r3, r2]
 800aeb8:	b2db      	uxtb	r3, r3
 800aeba:	2b01      	cmp	r3, #1
 800aebc:	d004      	beq.n	800aec8 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 800aebe:	2317      	movs	r3, #23
 800aec0:	18fb      	adds	r3, r7, r3
 800aec2:	2202      	movs	r2, #2
 800aec4:	701a      	strb	r2, [r3, #0]
    goto error;
 800aec6:	e0f7      	b.n	800b0b8 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d003      	beq.n	800aed6 <HAL_SPI_Receive+0x8e>
 800aece:	1dbb      	adds	r3, r7, #6
 800aed0:	881b      	ldrh	r3, [r3, #0]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d104      	bne.n	800aee0 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 800aed6:	2317      	movs	r3, #23
 800aed8:	18fb      	adds	r3, r7, r3
 800aeda:	2201      	movs	r2, #1
 800aedc:	701a      	strb	r2, [r3, #0]
    goto error;
 800aede:	e0eb      	b.n	800b0b8 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	225d      	movs	r2, #93	; 0x5d
 800aee4:	2104      	movs	r1, #4
 800aee6:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	2200      	movs	r2, #0
 800aeec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	68ba      	ldr	r2, [r7, #8]
 800aef2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	1dba      	adds	r2, r7, #6
 800aef8:	2144      	movs	r1, #68	; 0x44
 800aefa:	8812      	ldrh	r2, [r2, #0]
 800aefc:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	1dba      	adds	r2, r7, #6
 800af02:	2146      	movs	r1, #70	; 0x46
 800af04:	8812      	ldrh	r2, [r2, #0]
 800af06:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	2200      	movs	r2, #0
 800af0c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	2200      	movs	r2, #0
 800af12:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	2200      	movs	r2, #0
 800af18:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	2200      	movs	r2, #0
 800af1e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	2200      	movs	r2, #0
 800af24:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	68da      	ldr	r2, [r3, #12]
 800af2a:	23e0      	movs	r3, #224	; 0xe0
 800af2c:	00db      	lsls	r3, r3, #3
 800af2e:	429a      	cmp	r2, r3
 800af30:	d908      	bls.n	800af44 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	685a      	ldr	r2, [r3, #4]
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	4966      	ldr	r1, [pc, #408]	; (800b0d8 <HAL_SPI_Receive+0x290>)
 800af3e:	400a      	ands	r2, r1
 800af40:	605a      	str	r2, [r3, #4]
 800af42:	e008      	b.n	800af56 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	685a      	ldr	r2, [r3, #4]
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	2180      	movs	r1, #128	; 0x80
 800af50:	0149      	lsls	r1, r1, #5
 800af52:	430a      	orrs	r2, r1
 800af54:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	689a      	ldr	r2, [r3, #8]
 800af5a:	2380      	movs	r3, #128	; 0x80
 800af5c:	021b      	lsls	r3, r3, #8
 800af5e:	429a      	cmp	r2, r3
 800af60:	d10f      	bne.n	800af82 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	681a      	ldr	r2, [r3, #0]
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	2140      	movs	r1, #64	; 0x40
 800af6e:	438a      	bics	r2, r1
 800af70:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	681a      	ldr	r2, [r3, #0]
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	4957      	ldr	r1, [pc, #348]	; (800b0dc <HAL_SPI_Receive+0x294>)
 800af7e:	400a      	ands	r2, r1
 800af80:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	2240      	movs	r2, #64	; 0x40
 800af8a:	4013      	ands	r3, r2
 800af8c:	2b40      	cmp	r3, #64	; 0x40
 800af8e:	d007      	beq.n	800afa0 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	681a      	ldr	r2, [r3, #0]
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	2140      	movs	r1, #64	; 0x40
 800af9c:	430a      	orrs	r2, r1
 800af9e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	68da      	ldr	r2, [r3, #12]
 800afa4:	23e0      	movs	r3, #224	; 0xe0
 800afa6:	00db      	lsls	r3, r3, #3
 800afa8:	429a      	cmp	r2, r3
 800afaa:	d900      	bls.n	800afae <HAL_SPI_Receive+0x166>
 800afac:	e069      	b.n	800b082 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800afae:	e031      	b.n	800b014 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	689b      	ldr	r3, [r3, #8]
 800afb6:	2201      	movs	r2, #1
 800afb8:	4013      	ands	r3, r2
 800afba:	2b01      	cmp	r3, #1
 800afbc:	d117      	bne.n	800afee <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	330c      	adds	r3, #12
 800afc4:	001a      	movs	r2, r3
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afca:	7812      	ldrb	r2, [r2, #0]
 800afcc:	b2d2      	uxtb	r2, r2
 800afce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afd4:	1c5a      	adds	r2, r3, #1
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	2246      	movs	r2, #70	; 0x46
 800afde:	5a9b      	ldrh	r3, [r3, r2]
 800afe0:	b29b      	uxth	r3, r3
 800afe2:	3b01      	subs	r3, #1
 800afe4:	b299      	uxth	r1, r3
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	2246      	movs	r2, #70	; 0x46
 800afea:	5299      	strh	r1, [r3, r2]
 800afec:	e012      	b.n	800b014 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800afee:	f7fe f91b 	bl	8009228 <HAL_GetTick>
 800aff2:	0002      	movs	r2, r0
 800aff4:	693b      	ldr	r3, [r7, #16]
 800aff6:	1ad3      	subs	r3, r2, r3
 800aff8:	683a      	ldr	r2, [r7, #0]
 800affa:	429a      	cmp	r2, r3
 800affc:	d802      	bhi.n	800b004 <HAL_SPI_Receive+0x1bc>
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	3301      	adds	r3, #1
 800b002:	d102      	bne.n	800b00a <HAL_SPI_Receive+0x1c2>
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d104      	bne.n	800b014 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 800b00a:	2317      	movs	r3, #23
 800b00c:	18fb      	adds	r3, r7, r3
 800b00e:	2203      	movs	r2, #3
 800b010:	701a      	strb	r2, [r3, #0]
          goto error;
 800b012:	e051      	b.n	800b0b8 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	2246      	movs	r2, #70	; 0x46
 800b018:	5a9b      	ldrh	r3, [r3, r2]
 800b01a:	b29b      	uxth	r3, r3
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d1c7      	bne.n	800afb0 <HAL_SPI_Receive+0x168>
 800b020:	e035      	b.n	800b08e <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	689b      	ldr	r3, [r3, #8]
 800b028:	2201      	movs	r2, #1
 800b02a:	4013      	ands	r3, r2
 800b02c:	2b01      	cmp	r3, #1
 800b02e:	d115      	bne.n	800b05c <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	68da      	ldr	r2, [r3, #12]
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b03a:	b292      	uxth	r2, r2
 800b03c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b042:	1c9a      	adds	r2, r3, #2
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	2246      	movs	r2, #70	; 0x46
 800b04c:	5a9b      	ldrh	r3, [r3, r2]
 800b04e:	b29b      	uxth	r3, r3
 800b050:	3b01      	subs	r3, #1
 800b052:	b299      	uxth	r1, r3
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	2246      	movs	r2, #70	; 0x46
 800b058:	5299      	strh	r1, [r3, r2]
 800b05a:	e012      	b.n	800b082 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b05c:	f7fe f8e4 	bl	8009228 <HAL_GetTick>
 800b060:	0002      	movs	r2, r0
 800b062:	693b      	ldr	r3, [r7, #16]
 800b064:	1ad3      	subs	r3, r2, r3
 800b066:	683a      	ldr	r2, [r7, #0]
 800b068:	429a      	cmp	r2, r3
 800b06a:	d802      	bhi.n	800b072 <HAL_SPI_Receive+0x22a>
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	3301      	adds	r3, #1
 800b070:	d102      	bne.n	800b078 <HAL_SPI_Receive+0x230>
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d104      	bne.n	800b082 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 800b078:	2317      	movs	r3, #23
 800b07a:	18fb      	adds	r3, r7, r3
 800b07c:	2203      	movs	r2, #3
 800b07e:	701a      	strb	r2, [r3, #0]
          goto error;
 800b080:	e01a      	b.n	800b0b8 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	2246      	movs	r2, #70	; 0x46
 800b086:	5a9b      	ldrh	r3, [r3, r2]
 800b088:	b29b      	uxth	r3, r3
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d1c9      	bne.n	800b022 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b08e:	693a      	ldr	r2, [r7, #16]
 800b090:	6839      	ldr	r1, [r7, #0]
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	0018      	movs	r0, r3
 800b096:	f000 fc41 	bl	800b91c <SPI_EndRxTransaction>
 800b09a:	1e03      	subs	r3, r0, #0
 800b09c:	d002      	beq.n	800b0a4 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	2220      	movs	r2, #32
 800b0a2:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d004      	beq.n	800b0b6 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 800b0ac:	2317      	movs	r3, #23
 800b0ae:	18fb      	adds	r3, r7, r3
 800b0b0:	2201      	movs	r2, #1
 800b0b2:	701a      	strb	r2, [r3, #0]
 800b0b4:	e000      	b.n	800b0b8 <HAL_SPI_Receive+0x270>
  }

error :
 800b0b6:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	225d      	movs	r2, #93	; 0x5d
 800b0bc:	2101      	movs	r1, #1
 800b0be:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	225c      	movs	r2, #92	; 0x5c
 800b0c4:	2100      	movs	r1, #0
 800b0c6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800b0c8:	2317      	movs	r3, #23
 800b0ca:	18fb      	adds	r3, r7, r3
 800b0cc:	781b      	ldrb	r3, [r3, #0]
}
 800b0ce:	0018      	movs	r0, r3
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	b007      	add	sp, #28
 800b0d4:	bd90      	pop	{r4, r7, pc}
 800b0d6:	46c0      	nop			; (mov r8, r8)
 800b0d8:	ffffefff 	.word	0xffffefff
 800b0dc:	ffffbfff 	.word	0xffffbfff

0800b0e0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b08a      	sub	sp, #40	; 0x28
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	60f8      	str	r0, [r7, #12]
 800b0e8:	60b9      	str	r1, [r7, #8]
 800b0ea:	607a      	str	r2, [r7, #4]
 800b0ec:	001a      	movs	r2, r3
 800b0ee:	1cbb      	adds	r3, r7, #2
 800b0f0:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b0f2:	2301      	movs	r3, #1
 800b0f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b0f6:	2323      	movs	r3, #35	; 0x23
 800b0f8:	18fb      	adds	r3, r7, r3
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	225c      	movs	r2, #92	; 0x5c
 800b102:	5c9b      	ldrb	r3, [r3, r2]
 800b104:	2b01      	cmp	r3, #1
 800b106:	d101      	bne.n	800b10c <HAL_SPI_TransmitReceive+0x2c>
 800b108:	2302      	movs	r3, #2
 800b10a:	e1b5      	b.n	800b478 <HAL_SPI_TransmitReceive+0x398>
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	225c      	movs	r2, #92	; 0x5c
 800b110:	2101      	movs	r1, #1
 800b112:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b114:	f7fe f888 	bl	8009228 <HAL_GetTick>
 800b118:	0003      	movs	r3, r0
 800b11a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b11c:	201b      	movs	r0, #27
 800b11e:	183b      	adds	r3, r7, r0
 800b120:	68fa      	ldr	r2, [r7, #12]
 800b122:	215d      	movs	r1, #93	; 0x5d
 800b124:	5c52      	ldrb	r2, [r2, r1]
 800b126:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	685b      	ldr	r3, [r3, #4]
 800b12c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800b12e:	2312      	movs	r3, #18
 800b130:	18fb      	adds	r3, r7, r3
 800b132:	1cba      	adds	r2, r7, #2
 800b134:	8812      	ldrh	r2, [r2, #0]
 800b136:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b138:	183b      	adds	r3, r7, r0
 800b13a:	781b      	ldrb	r3, [r3, #0]
 800b13c:	2b01      	cmp	r3, #1
 800b13e:	d011      	beq.n	800b164 <HAL_SPI_TransmitReceive+0x84>
 800b140:	697a      	ldr	r2, [r7, #20]
 800b142:	2382      	movs	r3, #130	; 0x82
 800b144:	005b      	lsls	r3, r3, #1
 800b146:	429a      	cmp	r2, r3
 800b148:	d107      	bne.n	800b15a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	689b      	ldr	r3, [r3, #8]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d103      	bne.n	800b15a <HAL_SPI_TransmitReceive+0x7a>
 800b152:	183b      	adds	r3, r7, r0
 800b154:	781b      	ldrb	r3, [r3, #0]
 800b156:	2b04      	cmp	r3, #4
 800b158:	d004      	beq.n	800b164 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800b15a:	2323      	movs	r3, #35	; 0x23
 800b15c:	18fb      	adds	r3, r7, r3
 800b15e:	2202      	movs	r2, #2
 800b160:	701a      	strb	r2, [r3, #0]
    goto error;
 800b162:	e17e      	b.n	800b462 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d006      	beq.n	800b178 <HAL_SPI_TransmitReceive+0x98>
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d003      	beq.n	800b178 <HAL_SPI_TransmitReceive+0x98>
 800b170:	1cbb      	adds	r3, r7, #2
 800b172:	881b      	ldrh	r3, [r3, #0]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d104      	bne.n	800b182 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800b178:	2323      	movs	r3, #35	; 0x23
 800b17a:	18fb      	adds	r3, r7, r3
 800b17c:	2201      	movs	r2, #1
 800b17e:	701a      	strb	r2, [r3, #0]
    goto error;
 800b180:	e16f      	b.n	800b462 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	225d      	movs	r2, #93	; 0x5d
 800b186:	5c9b      	ldrb	r3, [r3, r2]
 800b188:	b2db      	uxtb	r3, r3
 800b18a:	2b04      	cmp	r3, #4
 800b18c:	d003      	beq.n	800b196 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	225d      	movs	r2, #93	; 0x5d
 800b192:	2105      	movs	r1, #5
 800b194:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	2200      	movs	r2, #0
 800b19a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	687a      	ldr	r2, [r7, #4]
 800b1a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	1cba      	adds	r2, r7, #2
 800b1a6:	2146      	movs	r1, #70	; 0x46
 800b1a8:	8812      	ldrh	r2, [r2, #0]
 800b1aa:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	1cba      	adds	r2, r7, #2
 800b1b0:	2144      	movs	r1, #68	; 0x44
 800b1b2:	8812      	ldrh	r2, [r2, #0]
 800b1b4:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	68ba      	ldr	r2, [r7, #8]
 800b1ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	1cba      	adds	r2, r7, #2
 800b1c0:	8812      	ldrh	r2, [r2, #0]
 800b1c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	1cba      	adds	r2, r7, #2
 800b1c8:	8812      	ldrh	r2, [r2, #0]
 800b1ca:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	68da      	ldr	r2, [r3, #12]
 800b1dc:	23e0      	movs	r3, #224	; 0xe0
 800b1de:	00db      	lsls	r3, r3, #3
 800b1e0:	429a      	cmp	r2, r3
 800b1e2:	d908      	bls.n	800b1f6 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	685a      	ldr	r2, [r3, #4]
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	49a4      	ldr	r1, [pc, #656]	; (800b480 <HAL_SPI_TransmitReceive+0x3a0>)
 800b1f0:	400a      	ands	r2, r1
 800b1f2:	605a      	str	r2, [r3, #4]
 800b1f4:	e008      	b.n	800b208 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	685a      	ldr	r2, [r3, #4]
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	2180      	movs	r1, #128	; 0x80
 800b202:	0149      	lsls	r1, r1, #5
 800b204:	430a      	orrs	r2, r1
 800b206:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	2240      	movs	r2, #64	; 0x40
 800b210:	4013      	ands	r3, r2
 800b212:	2b40      	cmp	r3, #64	; 0x40
 800b214:	d007      	beq.n	800b226 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	681a      	ldr	r2, [r3, #0]
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	2140      	movs	r1, #64	; 0x40
 800b222:	430a      	orrs	r2, r1
 800b224:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	68da      	ldr	r2, [r3, #12]
 800b22a:	23e0      	movs	r3, #224	; 0xe0
 800b22c:	00db      	lsls	r3, r3, #3
 800b22e:	429a      	cmp	r2, r3
 800b230:	d800      	bhi.n	800b234 <HAL_SPI_TransmitReceive+0x154>
 800b232:	e07f      	b.n	800b334 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	685b      	ldr	r3, [r3, #4]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d005      	beq.n	800b248 <HAL_SPI_TransmitReceive+0x168>
 800b23c:	2312      	movs	r3, #18
 800b23e:	18fb      	adds	r3, r7, r3
 800b240:	881b      	ldrh	r3, [r3, #0]
 800b242:	2b01      	cmp	r3, #1
 800b244:	d000      	beq.n	800b248 <HAL_SPI_TransmitReceive+0x168>
 800b246:	e069      	b.n	800b31c <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b24c:	881a      	ldrh	r2, [r3, #0]
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b258:	1c9a      	adds	r2, r3, #2
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b262:	b29b      	uxth	r3, r3
 800b264:	3b01      	subs	r3, #1
 800b266:	b29a      	uxth	r2, r3
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b26c:	e056      	b.n	800b31c <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	689b      	ldr	r3, [r3, #8]
 800b274:	2202      	movs	r2, #2
 800b276:	4013      	ands	r3, r2
 800b278:	2b02      	cmp	r3, #2
 800b27a:	d11b      	bne.n	800b2b4 <HAL_SPI_TransmitReceive+0x1d4>
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b280:	b29b      	uxth	r3, r3
 800b282:	2b00      	cmp	r3, #0
 800b284:	d016      	beq.n	800b2b4 <HAL_SPI_TransmitReceive+0x1d4>
 800b286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b288:	2b01      	cmp	r3, #1
 800b28a:	d113      	bne.n	800b2b4 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b290:	881a      	ldrh	r2, [r3, #0]
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b29c:	1c9a      	adds	r2, r3, #2
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b2a6:	b29b      	uxth	r3, r3
 800b2a8:	3b01      	subs	r3, #1
 800b2aa:	b29a      	uxth	r2, r3
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	689b      	ldr	r3, [r3, #8]
 800b2ba:	2201      	movs	r2, #1
 800b2bc:	4013      	ands	r3, r2
 800b2be:	2b01      	cmp	r3, #1
 800b2c0:	d11c      	bne.n	800b2fc <HAL_SPI_TransmitReceive+0x21c>
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	2246      	movs	r2, #70	; 0x46
 800b2c6:	5a9b      	ldrh	r3, [r3, r2]
 800b2c8:	b29b      	uxth	r3, r3
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d016      	beq.n	800b2fc <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	68da      	ldr	r2, [r3, #12]
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2d8:	b292      	uxth	r2, r2
 800b2da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2e0:	1c9a      	adds	r2, r3, #2
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	2246      	movs	r2, #70	; 0x46
 800b2ea:	5a9b      	ldrh	r3, [r3, r2]
 800b2ec:	b29b      	uxth	r3, r3
 800b2ee:	3b01      	subs	r3, #1
 800b2f0:	b299      	uxth	r1, r3
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	2246      	movs	r2, #70	; 0x46
 800b2f6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b2fc:	f7fd ff94 	bl	8009228 <HAL_GetTick>
 800b300:	0002      	movs	r2, r0
 800b302:	69fb      	ldr	r3, [r7, #28]
 800b304:	1ad3      	subs	r3, r2, r3
 800b306:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b308:	429a      	cmp	r2, r3
 800b30a:	d807      	bhi.n	800b31c <HAL_SPI_TransmitReceive+0x23c>
 800b30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b30e:	3301      	adds	r3, #1
 800b310:	d004      	beq.n	800b31c <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 800b312:	2323      	movs	r3, #35	; 0x23
 800b314:	18fb      	adds	r3, r7, r3
 800b316:	2203      	movs	r2, #3
 800b318:	701a      	strb	r2, [r3, #0]
        goto error;
 800b31a:	e0a2      	b.n	800b462 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b320:	b29b      	uxth	r3, r3
 800b322:	2b00      	cmp	r3, #0
 800b324:	d1a3      	bne.n	800b26e <HAL_SPI_TransmitReceive+0x18e>
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	2246      	movs	r2, #70	; 0x46
 800b32a:	5a9b      	ldrh	r3, [r3, r2]
 800b32c:	b29b      	uxth	r3, r3
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d19d      	bne.n	800b26e <HAL_SPI_TransmitReceive+0x18e>
 800b332:	e085      	b.n	800b440 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	685b      	ldr	r3, [r3, #4]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d005      	beq.n	800b348 <HAL_SPI_TransmitReceive+0x268>
 800b33c:	2312      	movs	r3, #18
 800b33e:	18fb      	adds	r3, r7, r3
 800b340:	881b      	ldrh	r3, [r3, #0]
 800b342:	2b01      	cmp	r3, #1
 800b344:	d000      	beq.n	800b348 <HAL_SPI_TransmitReceive+0x268>
 800b346:	e070      	b.n	800b42a <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	330c      	adds	r3, #12
 800b352:	7812      	ldrb	r2, [r2, #0]
 800b354:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b35a:	1c5a      	adds	r2, r3, #1
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b364:	b29b      	uxth	r3, r3
 800b366:	3b01      	subs	r3, #1
 800b368:	b29a      	uxth	r2, r3
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b36e:	e05c      	b.n	800b42a <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	689b      	ldr	r3, [r3, #8]
 800b376:	2202      	movs	r2, #2
 800b378:	4013      	ands	r3, r2
 800b37a:	2b02      	cmp	r3, #2
 800b37c:	d11c      	bne.n	800b3b8 <HAL_SPI_TransmitReceive+0x2d8>
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b382:	b29b      	uxth	r3, r3
 800b384:	2b00      	cmp	r3, #0
 800b386:	d017      	beq.n	800b3b8 <HAL_SPI_TransmitReceive+0x2d8>
 800b388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b38a:	2b01      	cmp	r3, #1
 800b38c:	d114      	bne.n	800b3b8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	330c      	adds	r3, #12
 800b398:	7812      	ldrb	r2, [r2, #0]
 800b39a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3a0:	1c5a      	adds	r2, r3, #1
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b3aa:	b29b      	uxth	r3, r3
 800b3ac:	3b01      	subs	r3, #1
 800b3ae:	b29a      	uxth	r2, r3
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	689b      	ldr	r3, [r3, #8]
 800b3be:	2201      	movs	r2, #1
 800b3c0:	4013      	ands	r3, r2
 800b3c2:	2b01      	cmp	r3, #1
 800b3c4:	d11e      	bne.n	800b404 <HAL_SPI_TransmitReceive+0x324>
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	2246      	movs	r2, #70	; 0x46
 800b3ca:	5a9b      	ldrh	r3, [r3, r2]
 800b3cc:	b29b      	uxth	r3, r3
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d018      	beq.n	800b404 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	330c      	adds	r3, #12
 800b3d8:	001a      	movs	r2, r3
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3de:	7812      	ldrb	r2, [r2, #0]
 800b3e0:	b2d2      	uxtb	r2, r2
 800b3e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3e8:	1c5a      	adds	r2, r3, #1
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	2246      	movs	r2, #70	; 0x46
 800b3f2:	5a9b      	ldrh	r3, [r3, r2]
 800b3f4:	b29b      	uxth	r3, r3
 800b3f6:	3b01      	subs	r3, #1
 800b3f8:	b299      	uxth	r1, r3
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	2246      	movs	r2, #70	; 0x46
 800b3fe:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b400:	2301      	movs	r3, #1
 800b402:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b404:	f7fd ff10 	bl	8009228 <HAL_GetTick>
 800b408:	0002      	movs	r2, r0
 800b40a:	69fb      	ldr	r3, [r7, #28]
 800b40c:	1ad3      	subs	r3, r2, r3
 800b40e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b410:	429a      	cmp	r2, r3
 800b412:	d802      	bhi.n	800b41a <HAL_SPI_TransmitReceive+0x33a>
 800b414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b416:	3301      	adds	r3, #1
 800b418:	d102      	bne.n	800b420 <HAL_SPI_TransmitReceive+0x340>
 800b41a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d104      	bne.n	800b42a <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 800b420:	2323      	movs	r3, #35	; 0x23
 800b422:	18fb      	adds	r3, r7, r3
 800b424:	2203      	movs	r2, #3
 800b426:	701a      	strb	r2, [r3, #0]
        goto error;
 800b428:	e01b      	b.n	800b462 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b42e:	b29b      	uxth	r3, r3
 800b430:	2b00      	cmp	r3, #0
 800b432:	d19d      	bne.n	800b370 <HAL_SPI_TransmitReceive+0x290>
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	2246      	movs	r2, #70	; 0x46
 800b438:	5a9b      	ldrh	r3, [r3, r2]
 800b43a:	b29b      	uxth	r3, r3
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d197      	bne.n	800b370 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b440:	69fa      	ldr	r2, [r7, #28]
 800b442:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	0018      	movs	r0, r3
 800b448:	f000 fac6 	bl	800b9d8 <SPI_EndRxTxTransaction>
 800b44c:	1e03      	subs	r3, r0, #0
 800b44e:	d007      	beq.n	800b460 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 800b450:	2323      	movs	r3, #35	; 0x23
 800b452:	18fb      	adds	r3, r7, r3
 800b454:	2201      	movs	r2, #1
 800b456:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	2220      	movs	r2, #32
 800b45c:	661a      	str	r2, [r3, #96]	; 0x60
 800b45e:	e000      	b.n	800b462 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 800b460:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	225d      	movs	r2, #93	; 0x5d
 800b466:	2101      	movs	r1, #1
 800b468:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	225c      	movs	r2, #92	; 0x5c
 800b46e:	2100      	movs	r1, #0
 800b470:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800b472:	2323      	movs	r3, #35	; 0x23
 800b474:	18fb      	adds	r3, r7, r3
 800b476:	781b      	ldrb	r3, [r3, #0]
}
 800b478:	0018      	movs	r0, r3
 800b47a:	46bd      	mov	sp, r7
 800b47c:	b00a      	add	sp, #40	; 0x28
 800b47e:	bd80      	pop	{r7, pc}
 800b480:	ffffefff 	.word	0xffffefff

0800b484 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b088      	sub	sp, #32
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	685b      	ldr	r3, [r3, #4]
 800b492:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	689b      	ldr	r3, [r3, #8]
 800b49a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800b49c:	69bb      	ldr	r3, [r7, #24]
 800b49e:	099b      	lsrs	r3, r3, #6
 800b4a0:	001a      	movs	r2, r3
 800b4a2:	2301      	movs	r3, #1
 800b4a4:	4013      	ands	r3, r2
 800b4a6:	d10f      	bne.n	800b4c8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800b4a8:	69bb      	ldr	r3, [r7, #24]
 800b4aa:	2201      	movs	r2, #1
 800b4ac:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800b4ae:	d00b      	beq.n	800b4c8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800b4b0:	69fb      	ldr	r3, [r7, #28]
 800b4b2:	099b      	lsrs	r3, r3, #6
 800b4b4:	001a      	movs	r2, r3
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	4013      	ands	r3, r2
 800b4ba:	d005      	beq.n	800b4c8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4c0:	687a      	ldr	r2, [r7, #4]
 800b4c2:	0010      	movs	r0, r2
 800b4c4:	4798      	blx	r3
    return;
 800b4c6:	e0d5      	b.n	800b674 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800b4c8:	69bb      	ldr	r3, [r7, #24]
 800b4ca:	085b      	lsrs	r3, r3, #1
 800b4cc:	001a      	movs	r2, r3
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	4013      	ands	r3, r2
 800b4d2:	d00b      	beq.n	800b4ec <HAL_SPI_IRQHandler+0x68>
 800b4d4:	69fb      	ldr	r3, [r7, #28]
 800b4d6:	09db      	lsrs	r3, r3, #7
 800b4d8:	001a      	movs	r2, r3
 800b4da:	2301      	movs	r3, #1
 800b4dc:	4013      	ands	r3, r2
 800b4de:	d005      	beq.n	800b4ec <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4e4:	687a      	ldr	r2, [r7, #4]
 800b4e6:	0010      	movs	r0, r2
 800b4e8:	4798      	blx	r3
    return;
 800b4ea:	e0c3      	b.n	800b674 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800b4ec:	69bb      	ldr	r3, [r7, #24]
 800b4ee:	095b      	lsrs	r3, r3, #5
 800b4f0:	001a      	movs	r2, r3
 800b4f2:	2301      	movs	r3, #1
 800b4f4:	4013      	ands	r3, r2
 800b4f6:	d10c      	bne.n	800b512 <HAL_SPI_IRQHandler+0x8e>
 800b4f8:	69bb      	ldr	r3, [r7, #24]
 800b4fa:	099b      	lsrs	r3, r3, #6
 800b4fc:	001a      	movs	r2, r3
 800b4fe:	2301      	movs	r3, #1
 800b500:	4013      	ands	r3, r2
 800b502:	d106      	bne.n	800b512 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800b504:	69bb      	ldr	r3, [r7, #24]
 800b506:	0a1b      	lsrs	r3, r3, #8
 800b508:	001a      	movs	r2, r3
 800b50a:	2301      	movs	r3, #1
 800b50c:	4013      	ands	r3, r2
 800b50e:	d100      	bne.n	800b512 <HAL_SPI_IRQHandler+0x8e>
 800b510:	e0b0      	b.n	800b674 <HAL_SPI_IRQHandler+0x1f0>
 800b512:	69fb      	ldr	r3, [r7, #28]
 800b514:	095b      	lsrs	r3, r3, #5
 800b516:	001a      	movs	r2, r3
 800b518:	2301      	movs	r3, #1
 800b51a:	4013      	ands	r3, r2
 800b51c:	d100      	bne.n	800b520 <HAL_SPI_IRQHandler+0x9c>
 800b51e:	e0a9      	b.n	800b674 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800b520:	69bb      	ldr	r3, [r7, #24]
 800b522:	099b      	lsrs	r3, r3, #6
 800b524:	001a      	movs	r2, r3
 800b526:	2301      	movs	r3, #1
 800b528:	4013      	ands	r3, r2
 800b52a:	d023      	beq.n	800b574 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	225d      	movs	r2, #93	; 0x5d
 800b530:	5c9b      	ldrb	r3, [r3, r2]
 800b532:	b2db      	uxtb	r3, r3
 800b534:	2b03      	cmp	r3, #3
 800b536:	d011      	beq.n	800b55c <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b53c:	2204      	movs	r2, #4
 800b53e:	431a      	orrs	r2, r3
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b544:	2300      	movs	r3, #0
 800b546:	617b      	str	r3, [r7, #20]
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	68db      	ldr	r3, [r3, #12]
 800b54e:	617b      	str	r3, [r7, #20]
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	689b      	ldr	r3, [r3, #8]
 800b556:	617b      	str	r3, [r7, #20]
 800b558:	697b      	ldr	r3, [r7, #20]
 800b55a:	e00b      	b.n	800b574 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b55c:	2300      	movs	r3, #0
 800b55e:	613b      	str	r3, [r7, #16]
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	68db      	ldr	r3, [r3, #12]
 800b566:	613b      	str	r3, [r7, #16]
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	689b      	ldr	r3, [r3, #8]
 800b56e:	613b      	str	r3, [r7, #16]
 800b570:	693b      	ldr	r3, [r7, #16]
        return;
 800b572:	e07f      	b.n	800b674 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800b574:	69bb      	ldr	r3, [r7, #24]
 800b576:	095b      	lsrs	r3, r3, #5
 800b578:	001a      	movs	r2, r3
 800b57a:	2301      	movs	r3, #1
 800b57c:	4013      	ands	r3, r2
 800b57e:	d014      	beq.n	800b5aa <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b584:	2201      	movs	r2, #1
 800b586:	431a      	orrs	r2, r3
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b58c:	2300      	movs	r3, #0
 800b58e:	60fb      	str	r3, [r7, #12]
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	689b      	ldr	r3, [r3, #8]
 800b596:	60fb      	str	r3, [r7, #12]
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	681a      	ldr	r2, [r3, #0]
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	2140      	movs	r1, #64	; 0x40
 800b5a4:	438a      	bics	r2, r1
 800b5a6:	601a      	str	r2, [r3, #0]
 800b5a8:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800b5aa:	69bb      	ldr	r3, [r7, #24]
 800b5ac:	0a1b      	lsrs	r3, r3, #8
 800b5ae:	001a      	movs	r2, r3
 800b5b0:	2301      	movs	r3, #1
 800b5b2:	4013      	ands	r3, r2
 800b5b4:	d00c      	beq.n	800b5d0 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b5ba:	2208      	movs	r2, #8
 800b5bc:	431a      	orrs	r2, r3
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	60bb      	str	r3, [r7, #8]
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	689b      	ldr	r3, [r3, #8]
 800b5cc:	60bb      	str	r3, [r7, #8]
 800b5ce:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d04c      	beq.n	800b672 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	685a      	ldr	r2, [r3, #4]
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	21e0      	movs	r1, #224	; 0xe0
 800b5e4:	438a      	bics	r2, r1
 800b5e6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	225d      	movs	r2, #93	; 0x5d
 800b5ec:	2101      	movs	r1, #1
 800b5ee:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800b5f0:	69fb      	ldr	r3, [r7, #28]
 800b5f2:	2202      	movs	r2, #2
 800b5f4:	4013      	ands	r3, r2
 800b5f6:	d103      	bne.n	800b600 <HAL_SPI_IRQHandler+0x17c>
 800b5f8:	69fb      	ldr	r3, [r7, #28]
 800b5fa:	2201      	movs	r2, #1
 800b5fc:	4013      	ands	r3, r2
 800b5fe:	d032      	beq.n	800b666 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	685a      	ldr	r2, [r3, #4]
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	2103      	movs	r1, #3
 800b60c:	438a      	bics	r2, r1
 800b60e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b614:	2b00      	cmp	r3, #0
 800b616:	d010      	beq.n	800b63a <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b61c:	4a17      	ldr	r2, [pc, #92]	; (800b67c <HAL_SPI_IRQHandler+0x1f8>)
 800b61e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b624:	0018      	movs	r0, r3
 800b626:	f7fe f87d 	bl	8009724 <HAL_DMA_Abort_IT>
 800b62a:	1e03      	subs	r3, r0, #0
 800b62c:	d005      	beq.n	800b63a <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b632:	2240      	movs	r2, #64	; 0x40
 800b634:	431a      	orrs	r2, r3
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d016      	beq.n	800b670 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b646:	4a0d      	ldr	r2, [pc, #52]	; (800b67c <HAL_SPI_IRQHandler+0x1f8>)
 800b648:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b64e:	0018      	movs	r0, r3
 800b650:	f7fe f868 	bl	8009724 <HAL_DMA_Abort_IT>
 800b654:	1e03      	subs	r3, r0, #0
 800b656:	d00b      	beq.n	800b670 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b65c:	2240      	movs	r2, #64	; 0x40
 800b65e:	431a      	orrs	r2, r3
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800b664:	e004      	b.n	800b670 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	0018      	movs	r0, r3
 800b66a:	f000 f809 	bl	800b680 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800b66e:	e000      	b.n	800b672 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 800b670:	46c0      	nop			; (mov r8, r8)
    return;
 800b672:	46c0      	nop			; (mov r8, r8)
  }
}
 800b674:	46bd      	mov	sp, r7
 800b676:	b008      	add	sp, #32
 800b678:	bd80      	pop	{r7, pc}
 800b67a:	46c0      	nop			; (mov r8, r8)
 800b67c:	0800b691 	.word	0x0800b691

0800b680 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b082      	sub	sp, #8
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800b688:	46c0      	nop			; (mov r8, r8)
 800b68a:	46bd      	mov	sp, r7
 800b68c:	b002      	add	sp, #8
 800b68e:	bd80      	pop	{r7, pc}

0800b690 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b084      	sub	sp, #16
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b69c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	2246      	movs	r2, #70	; 0x46
 800b6a2:	2100      	movs	r1, #0
 800b6a4:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	0018      	movs	r0, r3
 800b6b0:	f7ff ffe6 	bl	800b680 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b6b4:	46c0      	nop			; (mov r8, r8)
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	b004      	add	sp, #16
 800b6ba:	bd80      	pop	{r7, pc}

0800b6bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b088      	sub	sp, #32
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	60f8      	str	r0, [r7, #12]
 800b6c4:	60b9      	str	r1, [r7, #8]
 800b6c6:	603b      	str	r3, [r7, #0]
 800b6c8:	1dfb      	adds	r3, r7, #7
 800b6ca:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b6cc:	f7fd fdac 	bl	8009228 <HAL_GetTick>
 800b6d0:	0002      	movs	r2, r0
 800b6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6d4:	1a9b      	subs	r3, r3, r2
 800b6d6:	683a      	ldr	r2, [r7, #0]
 800b6d8:	18d3      	adds	r3, r2, r3
 800b6da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b6dc:	f7fd fda4 	bl	8009228 <HAL_GetTick>
 800b6e0:	0003      	movs	r3, r0
 800b6e2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b6e4:	4b3a      	ldr	r3, [pc, #232]	; (800b7d0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	015b      	lsls	r3, r3, #5
 800b6ea:	0d1b      	lsrs	r3, r3, #20
 800b6ec:	69fa      	ldr	r2, [r7, #28]
 800b6ee:	4353      	muls	r3, r2
 800b6f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b6f2:	e058      	b.n	800b7a6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	3301      	adds	r3, #1
 800b6f8:	d055      	beq.n	800b7a6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b6fa:	f7fd fd95 	bl	8009228 <HAL_GetTick>
 800b6fe:	0002      	movs	r2, r0
 800b700:	69bb      	ldr	r3, [r7, #24]
 800b702:	1ad3      	subs	r3, r2, r3
 800b704:	69fa      	ldr	r2, [r7, #28]
 800b706:	429a      	cmp	r2, r3
 800b708:	d902      	bls.n	800b710 <SPI_WaitFlagStateUntilTimeout+0x54>
 800b70a:	69fb      	ldr	r3, [r7, #28]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d142      	bne.n	800b796 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	685a      	ldr	r2, [r3, #4]
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	21e0      	movs	r1, #224	; 0xe0
 800b71c:	438a      	bics	r2, r1
 800b71e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	685a      	ldr	r2, [r3, #4]
 800b724:	2382      	movs	r3, #130	; 0x82
 800b726:	005b      	lsls	r3, r3, #1
 800b728:	429a      	cmp	r2, r3
 800b72a:	d113      	bne.n	800b754 <SPI_WaitFlagStateUntilTimeout+0x98>
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	689a      	ldr	r2, [r3, #8]
 800b730:	2380      	movs	r3, #128	; 0x80
 800b732:	021b      	lsls	r3, r3, #8
 800b734:	429a      	cmp	r2, r3
 800b736:	d005      	beq.n	800b744 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	689a      	ldr	r2, [r3, #8]
 800b73c:	2380      	movs	r3, #128	; 0x80
 800b73e:	00db      	lsls	r3, r3, #3
 800b740:	429a      	cmp	r2, r3
 800b742:	d107      	bne.n	800b754 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	681a      	ldr	r2, [r3, #0]
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	2140      	movs	r1, #64	; 0x40
 800b750:	438a      	bics	r2, r1
 800b752:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b758:	2380      	movs	r3, #128	; 0x80
 800b75a:	019b      	lsls	r3, r3, #6
 800b75c:	429a      	cmp	r2, r3
 800b75e:	d110      	bne.n	800b782 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	681a      	ldr	r2, [r3, #0]
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	491a      	ldr	r1, [pc, #104]	; (800b7d4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800b76c:	400a      	ands	r2, r1
 800b76e:	601a      	str	r2, [r3, #0]
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	681a      	ldr	r2, [r3, #0]
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	2180      	movs	r1, #128	; 0x80
 800b77c:	0189      	lsls	r1, r1, #6
 800b77e:	430a      	orrs	r2, r1
 800b780:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	225d      	movs	r2, #93	; 0x5d
 800b786:	2101      	movs	r1, #1
 800b788:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	225c      	movs	r2, #92	; 0x5c
 800b78e:	2100      	movs	r1, #0
 800b790:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800b792:	2303      	movs	r3, #3
 800b794:	e017      	b.n	800b7c6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b796:	697b      	ldr	r3, [r7, #20]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d101      	bne.n	800b7a0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800b79c:	2300      	movs	r3, #0
 800b79e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b7a0:	697b      	ldr	r3, [r7, #20]
 800b7a2:	3b01      	subs	r3, #1
 800b7a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	689b      	ldr	r3, [r3, #8]
 800b7ac:	68ba      	ldr	r2, [r7, #8]
 800b7ae:	4013      	ands	r3, r2
 800b7b0:	68ba      	ldr	r2, [r7, #8]
 800b7b2:	1ad3      	subs	r3, r2, r3
 800b7b4:	425a      	negs	r2, r3
 800b7b6:	4153      	adcs	r3, r2
 800b7b8:	b2db      	uxtb	r3, r3
 800b7ba:	001a      	movs	r2, r3
 800b7bc:	1dfb      	adds	r3, r7, #7
 800b7be:	781b      	ldrb	r3, [r3, #0]
 800b7c0:	429a      	cmp	r2, r3
 800b7c2:	d197      	bne.n	800b6f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b7c4:	2300      	movs	r3, #0
}
 800b7c6:	0018      	movs	r0, r3
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	b008      	add	sp, #32
 800b7cc:	bd80      	pop	{r7, pc}
 800b7ce:	46c0      	nop			; (mov r8, r8)
 800b7d0:	200000b0 	.word	0x200000b0
 800b7d4:	ffffdfff 	.word	0xffffdfff

0800b7d8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b08a      	sub	sp, #40	; 0x28
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	60f8      	str	r0, [r7, #12]
 800b7e0:	60b9      	str	r1, [r7, #8]
 800b7e2:	607a      	str	r2, [r7, #4]
 800b7e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800b7e6:	2317      	movs	r3, #23
 800b7e8:	18fb      	adds	r3, r7, r3
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800b7ee:	f7fd fd1b 	bl	8009228 <HAL_GetTick>
 800b7f2:	0002      	movs	r2, r0
 800b7f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7f6:	1a9b      	subs	r3, r3, r2
 800b7f8:	683a      	ldr	r2, [r7, #0]
 800b7fa:	18d3      	adds	r3, r2, r3
 800b7fc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800b7fe:	f7fd fd13 	bl	8009228 <HAL_GetTick>
 800b802:	0003      	movs	r3, r0
 800b804:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	330c      	adds	r3, #12
 800b80c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800b80e:	4b41      	ldr	r3, [pc, #260]	; (800b914 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800b810:	681a      	ldr	r2, [r3, #0]
 800b812:	0013      	movs	r3, r2
 800b814:	009b      	lsls	r3, r3, #2
 800b816:	189b      	adds	r3, r3, r2
 800b818:	00da      	lsls	r2, r3, #3
 800b81a:	1ad3      	subs	r3, r2, r3
 800b81c:	0d1b      	lsrs	r3, r3, #20
 800b81e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b820:	4353      	muls	r3, r2
 800b822:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800b824:	e068      	b.n	800b8f8 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800b826:	68ba      	ldr	r2, [r7, #8]
 800b828:	23c0      	movs	r3, #192	; 0xc0
 800b82a:	00db      	lsls	r3, r3, #3
 800b82c:	429a      	cmp	r2, r3
 800b82e:	d10a      	bne.n	800b846 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d107      	bne.n	800b846 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800b836:	69fb      	ldr	r3, [r7, #28]
 800b838:	781b      	ldrb	r3, [r3, #0]
 800b83a:	b2da      	uxtb	r2, r3
 800b83c:	2117      	movs	r1, #23
 800b83e:	187b      	adds	r3, r7, r1
 800b840:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800b842:	187b      	adds	r3, r7, r1
 800b844:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	3301      	adds	r3, #1
 800b84a:	d055      	beq.n	800b8f8 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b84c:	f7fd fcec 	bl	8009228 <HAL_GetTick>
 800b850:	0002      	movs	r2, r0
 800b852:	6a3b      	ldr	r3, [r7, #32]
 800b854:	1ad3      	subs	r3, r2, r3
 800b856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b858:	429a      	cmp	r2, r3
 800b85a:	d902      	bls.n	800b862 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800b85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d142      	bne.n	800b8e8 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	685a      	ldr	r2, [r3, #4]
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	21e0      	movs	r1, #224	; 0xe0
 800b86e:	438a      	bics	r2, r1
 800b870:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	685a      	ldr	r2, [r3, #4]
 800b876:	2382      	movs	r3, #130	; 0x82
 800b878:	005b      	lsls	r3, r3, #1
 800b87a:	429a      	cmp	r2, r3
 800b87c:	d113      	bne.n	800b8a6 <SPI_WaitFifoStateUntilTimeout+0xce>
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	689a      	ldr	r2, [r3, #8]
 800b882:	2380      	movs	r3, #128	; 0x80
 800b884:	021b      	lsls	r3, r3, #8
 800b886:	429a      	cmp	r2, r3
 800b888:	d005      	beq.n	800b896 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	689a      	ldr	r2, [r3, #8]
 800b88e:	2380      	movs	r3, #128	; 0x80
 800b890:	00db      	lsls	r3, r3, #3
 800b892:	429a      	cmp	r2, r3
 800b894:	d107      	bne.n	800b8a6 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	681a      	ldr	r2, [r3, #0]
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	2140      	movs	r1, #64	; 0x40
 800b8a2:	438a      	bics	r2, r1
 800b8a4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b8aa:	2380      	movs	r3, #128	; 0x80
 800b8ac:	019b      	lsls	r3, r3, #6
 800b8ae:	429a      	cmp	r2, r3
 800b8b0:	d110      	bne.n	800b8d4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	681a      	ldr	r2, [r3, #0]
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	4916      	ldr	r1, [pc, #88]	; (800b918 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800b8be:	400a      	ands	r2, r1
 800b8c0:	601a      	str	r2, [r3, #0]
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	681a      	ldr	r2, [r3, #0]
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	2180      	movs	r1, #128	; 0x80
 800b8ce:	0189      	lsls	r1, r1, #6
 800b8d0:	430a      	orrs	r2, r1
 800b8d2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	225d      	movs	r2, #93	; 0x5d
 800b8d8:	2101      	movs	r1, #1
 800b8da:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	225c      	movs	r2, #92	; 0x5c
 800b8e0:	2100      	movs	r1, #0
 800b8e2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800b8e4:	2303      	movs	r3, #3
 800b8e6:	e010      	b.n	800b90a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b8e8:	69bb      	ldr	r3, [r7, #24]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d101      	bne.n	800b8f2 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800b8f2:	69bb      	ldr	r3, [r7, #24]
 800b8f4:	3b01      	subs	r3, #1
 800b8f6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	689b      	ldr	r3, [r3, #8]
 800b8fe:	68ba      	ldr	r2, [r7, #8]
 800b900:	4013      	ands	r3, r2
 800b902:	687a      	ldr	r2, [r7, #4]
 800b904:	429a      	cmp	r2, r3
 800b906:	d18e      	bne.n	800b826 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800b908:	2300      	movs	r3, #0
}
 800b90a:	0018      	movs	r0, r3
 800b90c:	46bd      	mov	sp, r7
 800b90e:	b00a      	add	sp, #40	; 0x28
 800b910:	bd80      	pop	{r7, pc}
 800b912:	46c0      	nop			; (mov r8, r8)
 800b914:	200000b0 	.word	0x200000b0
 800b918:	ffffdfff 	.word	0xffffdfff

0800b91c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b086      	sub	sp, #24
 800b920:	af02      	add	r7, sp, #8
 800b922:	60f8      	str	r0, [r7, #12]
 800b924:	60b9      	str	r1, [r7, #8]
 800b926:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	685a      	ldr	r2, [r3, #4]
 800b92c:	2382      	movs	r3, #130	; 0x82
 800b92e:	005b      	lsls	r3, r3, #1
 800b930:	429a      	cmp	r2, r3
 800b932:	d113      	bne.n	800b95c <SPI_EndRxTransaction+0x40>
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	689a      	ldr	r2, [r3, #8]
 800b938:	2380      	movs	r3, #128	; 0x80
 800b93a:	021b      	lsls	r3, r3, #8
 800b93c:	429a      	cmp	r2, r3
 800b93e:	d005      	beq.n	800b94c <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	689a      	ldr	r2, [r3, #8]
 800b944:	2380      	movs	r3, #128	; 0x80
 800b946:	00db      	lsls	r3, r3, #3
 800b948:	429a      	cmp	r2, r3
 800b94a:	d107      	bne.n	800b95c <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	681a      	ldr	r2, [r3, #0]
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	2140      	movs	r1, #64	; 0x40
 800b958:	438a      	bics	r2, r1
 800b95a:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b95c:	68ba      	ldr	r2, [r7, #8]
 800b95e:	68f8      	ldr	r0, [r7, #12]
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	9300      	str	r3, [sp, #0]
 800b964:	0013      	movs	r3, r2
 800b966:	2200      	movs	r2, #0
 800b968:	2180      	movs	r1, #128	; 0x80
 800b96a:	f7ff fea7 	bl	800b6bc <SPI_WaitFlagStateUntilTimeout>
 800b96e:	1e03      	subs	r3, r0, #0
 800b970:	d007      	beq.n	800b982 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b976:	2220      	movs	r2, #32
 800b978:	431a      	orrs	r2, r3
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b97e:	2303      	movs	r3, #3
 800b980:	e026      	b.n	800b9d0 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	685a      	ldr	r2, [r3, #4]
 800b986:	2382      	movs	r3, #130	; 0x82
 800b988:	005b      	lsls	r3, r3, #1
 800b98a:	429a      	cmp	r2, r3
 800b98c:	d11f      	bne.n	800b9ce <SPI_EndRxTransaction+0xb2>
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	689a      	ldr	r2, [r3, #8]
 800b992:	2380      	movs	r3, #128	; 0x80
 800b994:	021b      	lsls	r3, r3, #8
 800b996:	429a      	cmp	r2, r3
 800b998:	d005      	beq.n	800b9a6 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	689a      	ldr	r2, [r3, #8]
 800b99e:	2380      	movs	r3, #128	; 0x80
 800b9a0:	00db      	lsls	r3, r3, #3
 800b9a2:	429a      	cmp	r2, r3
 800b9a4:	d113      	bne.n	800b9ce <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b9a6:	68ba      	ldr	r2, [r7, #8]
 800b9a8:	23c0      	movs	r3, #192	; 0xc0
 800b9aa:	00d9      	lsls	r1, r3, #3
 800b9ac:	68f8      	ldr	r0, [r7, #12]
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	9300      	str	r3, [sp, #0]
 800b9b2:	0013      	movs	r3, r2
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	f7ff ff0f 	bl	800b7d8 <SPI_WaitFifoStateUntilTimeout>
 800b9ba:	1e03      	subs	r3, r0, #0
 800b9bc:	d007      	beq.n	800b9ce <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b9c2:	2220      	movs	r2, #32
 800b9c4:	431a      	orrs	r2, r3
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800b9ca:	2303      	movs	r3, #3
 800b9cc:	e000      	b.n	800b9d0 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800b9ce:	2300      	movs	r3, #0
}
 800b9d0:	0018      	movs	r0, r3
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	b004      	add	sp, #16
 800b9d6:	bd80      	pop	{r7, pc}

0800b9d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b086      	sub	sp, #24
 800b9dc:	af02      	add	r7, sp, #8
 800b9de:	60f8      	str	r0, [r7, #12]
 800b9e0:	60b9      	str	r1, [r7, #8]
 800b9e2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b9e4:	68ba      	ldr	r2, [r7, #8]
 800b9e6:	23c0      	movs	r3, #192	; 0xc0
 800b9e8:	0159      	lsls	r1, r3, #5
 800b9ea:	68f8      	ldr	r0, [r7, #12]
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	9300      	str	r3, [sp, #0]
 800b9f0:	0013      	movs	r3, r2
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	f7ff fef0 	bl	800b7d8 <SPI_WaitFifoStateUntilTimeout>
 800b9f8:	1e03      	subs	r3, r0, #0
 800b9fa:	d007      	beq.n	800ba0c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ba00:	2220      	movs	r2, #32
 800ba02:	431a      	orrs	r2, r3
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ba08:	2303      	movs	r3, #3
 800ba0a:	e027      	b.n	800ba5c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ba0c:	68ba      	ldr	r2, [r7, #8]
 800ba0e:	68f8      	ldr	r0, [r7, #12]
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	9300      	str	r3, [sp, #0]
 800ba14:	0013      	movs	r3, r2
 800ba16:	2200      	movs	r2, #0
 800ba18:	2180      	movs	r1, #128	; 0x80
 800ba1a:	f7ff fe4f 	bl	800b6bc <SPI_WaitFlagStateUntilTimeout>
 800ba1e:	1e03      	subs	r3, r0, #0
 800ba20:	d007      	beq.n	800ba32 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ba26:	2220      	movs	r2, #32
 800ba28:	431a      	orrs	r2, r3
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ba2e:	2303      	movs	r3, #3
 800ba30:	e014      	b.n	800ba5c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ba32:	68ba      	ldr	r2, [r7, #8]
 800ba34:	23c0      	movs	r3, #192	; 0xc0
 800ba36:	00d9      	lsls	r1, r3, #3
 800ba38:	68f8      	ldr	r0, [r7, #12]
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	9300      	str	r3, [sp, #0]
 800ba3e:	0013      	movs	r3, r2
 800ba40:	2200      	movs	r2, #0
 800ba42:	f7ff fec9 	bl	800b7d8 <SPI_WaitFifoStateUntilTimeout>
 800ba46:	1e03      	subs	r3, r0, #0
 800ba48:	d007      	beq.n	800ba5a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ba4e:	2220      	movs	r2, #32
 800ba50:	431a      	orrs	r2, r3
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ba56:	2303      	movs	r3, #3
 800ba58:	e000      	b.n	800ba5c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800ba5a:	2300      	movs	r3, #0
}
 800ba5c:	0018      	movs	r0, r3
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	b004      	add	sp, #16
 800ba62:	bd80      	pop	{r7, pc}

0800ba64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b082      	sub	sp, #8
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d101      	bne.n	800ba76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ba72:	2301      	movs	r3, #1
 800ba74:	e04a      	b.n	800bb0c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	223d      	movs	r2, #61	; 0x3d
 800ba7a:	5c9b      	ldrb	r3, [r3, r2]
 800ba7c:	b2db      	uxtb	r3, r3
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d107      	bne.n	800ba92 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	223c      	movs	r2, #60	; 0x3c
 800ba86:	2100      	movs	r1, #0
 800ba88:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	0018      	movs	r0, r3
 800ba8e:	f7fc fadd 	bl	800804c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	223d      	movs	r2, #61	; 0x3d
 800ba96:	2102      	movs	r1, #2
 800ba98:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681a      	ldr	r2, [r3, #0]
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	3304      	adds	r3, #4
 800baa2:	0019      	movs	r1, r3
 800baa4:	0010      	movs	r0, r2
 800baa6:	f000 fdb3 	bl	800c610 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	2248      	movs	r2, #72	; 0x48
 800baae:	2101      	movs	r1, #1
 800bab0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	223e      	movs	r2, #62	; 0x3e
 800bab6:	2101      	movs	r1, #1
 800bab8:	5499      	strb	r1, [r3, r2]
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	223f      	movs	r2, #63	; 0x3f
 800babe:	2101      	movs	r1, #1
 800bac0:	5499      	strb	r1, [r3, r2]
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2240      	movs	r2, #64	; 0x40
 800bac6:	2101      	movs	r1, #1
 800bac8:	5499      	strb	r1, [r3, r2]
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	2241      	movs	r2, #65	; 0x41
 800bace:	2101      	movs	r1, #1
 800bad0:	5499      	strb	r1, [r3, r2]
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2242      	movs	r2, #66	; 0x42
 800bad6:	2101      	movs	r1, #1
 800bad8:	5499      	strb	r1, [r3, r2]
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2243      	movs	r2, #67	; 0x43
 800bade:	2101      	movs	r1, #1
 800bae0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	2244      	movs	r2, #68	; 0x44
 800bae6:	2101      	movs	r1, #1
 800bae8:	5499      	strb	r1, [r3, r2]
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	2245      	movs	r2, #69	; 0x45
 800baee:	2101      	movs	r1, #1
 800baf0:	5499      	strb	r1, [r3, r2]
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	2246      	movs	r2, #70	; 0x46
 800baf6:	2101      	movs	r1, #1
 800baf8:	5499      	strb	r1, [r3, r2]
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2247      	movs	r2, #71	; 0x47
 800bafe:	2101      	movs	r1, #1
 800bb00:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	223d      	movs	r2, #61	; 0x3d
 800bb06:	2101      	movs	r1, #1
 800bb08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bb0a:	2300      	movs	r3, #0
}
 800bb0c:	0018      	movs	r0, r3
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	b002      	add	sp, #8
 800bb12:	bd80      	pop	{r7, pc}

0800bb14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b084      	sub	sp, #16
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	223d      	movs	r2, #61	; 0x3d
 800bb20:	5c9b      	ldrb	r3, [r3, r2]
 800bb22:	b2db      	uxtb	r3, r3
 800bb24:	2b01      	cmp	r3, #1
 800bb26:	d001      	beq.n	800bb2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bb28:	2301      	movs	r3, #1
 800bb2a:	e03c      	b.n	800bba6 <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	223d      	movs	r2, #61	; 0x3d
 800bb30:	2102      	movs	r1, #2
 800bb32:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	68da      	ldr	r2, [r3, #12]
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	2101      	movs	r1, #1
 800bb40:	430a      	orrs	r2, r1
 800bb42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	4a19      	ldr	r2, [pc, #100]	; (800bbb0 <HAL_TIM_Base_Start_IT+0x9c>)
 800bb4a:	4293      	cmp	r3, r2
 800bb4c:	d009      	beq.n	800bb62 <HAL_TIM_Base_Start_IT+0x4e>
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	4a18      	ldr	r2, [pc, #96]	; (800bbb4 <HAL_TIM_Base_Start_IT+0xa0>)
 800bb54:	4293      	cmp	r3, r2
 800bb56:	d004      	beq.n	800bb62 <HAL_TIM_Base_Start_IT+0x4e>
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	4a16      	ldr	r2, [pc, #88]	; (800bbb8 <HAL_TIM_Base_Start_IT+0xa4>)
 800bb5e:	4293      	cmp	r3, r2
 800bb60:	d116      	bne.n	800bb90 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	689b      	ldr	r3, [r3, #8]
 800bb68:	4a14      	ldr	r2, [pc, #80]	; (800bbbc <HAL_TIM_Base_Start_IT+0xa8>)
 800bb6a:	4013      	ands	r3, r2
 800bb6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	2b06      	cmp	r3, #6
 800bb72:	d016      	beq.n	800bba2 <HAL_TIM_Base_Start_IT+0x8e>
 800bb74:	68fa      	ldr	r2, [r7, #12]
 800bb76:	2380      	movs	r3, #128	; 0x80
 800bb78:	025b      	lsls	r3, r3, #9
 800bb7a:	429a      	cmp	r2, r3
 800bb7c:	d011      	beq.n	800bba2 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	681a      	ldr	r2, [r3, #0]
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	2101      	movs	r1, #1
 800bb8a:	430a      	orrs	r2, r1
 800bb8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb8e:	e008      	b.n	800bba2 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	681a      	ldr	r2, [r3, #0]
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	2101      	movs	r1, #1
 800bb9c:	430a      	orrs	r2, r1
 800bb9e:	601a      	str	r2, [r3, #0]
 800bba0:	e000      	b.n	800bba4 <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bba2:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800bba4:	2300      	movs	r3, #0
}
 800bba6:	0018      	movs	r0, r3
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	b004      	add	sp, #16
 800bbac:	bd80      	pop	{r7, pc}
 800bbae:	46c0      	nop			; (mov r8, r8)
 800bbb0:	40012c00 	.word	0x40012c00
 800bbb4:	40000400 	.word	0x40000400
 800bbb8:	40014000 	.word	0x40014000
 800bbbc:	00010007 	.word	0x00010007

0800bbc0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b082      	sub	sp, #8
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	68da      	ldr	r2, [r3, #12]
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	2101      	movs	r1, #1
 800bbd4:	438a      	bics	r2, r1
 800bbd6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	6a1b      	ldr	r3, [r3, #32]
 800bbde:	4a0d      	ldr	r2, [pc, #52]	; (800bc14 <HAL_TIM_Base_Stop_IT+0x54>)
 800bbe0:	4013      	ands	r3, r2
 800bbe2:	d10d      	bne.n	800bc00 <HAL_TIM_Base_Stop_IT+0x40>
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	6a1b      	ldr	r3, [r3, #32]
 800bbea:	4a0b      	ldr	r2, [pc, #44]	; (800bc18 <HAL_TIM_Base_Stop_IT+0x58>)
 800bbec:	4013      	ands	r3, r2
 800bbee:	d107      	bne.n	800bc00 <HAL_TIM_Base_Stop_IT+0x40>
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	681a      	ldr	r2, [r3, #0]
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	2101      	movs	r1, #1
 800bbfc:	438a      	bics	r2, r1
 800bbfe:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	223d      	movs	r2, #61	; 0x3d
 800bc04:	2101      	movs	r1, #1
 800bc06:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800bc08:	2300      	movs	r3, #0
}
 800bc0a:	0018      	movs	r0, r3
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	b002      	add	sp, #8
 800bc10:	bd80      	pop	{r7, pc}
 800bc12:	46c0      	nop			; (mov r8, r8)
 800bc14:	00001111 	.word	0x00001111
 800bc18:	00000444 	.word	0x00000444

0800bc1c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b082      	sub	sp, #8
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d101      	bne.n	800bc2e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	e04a      	b.n	800bcc4 <HAL_TIM_IC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	223d      	movs	r2, #61	; 0x3d
 800bc32:	5c9b      	ldrb	r3, [r3, r2]
 800bc34:	b2db      	uxtb	r3, r3
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d107      	bne.n	800bc4a <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	223c      	movs	r2, #60	; 0x3c
 800bc3e:	2100      	movs	r1, #0
 800bc40:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	0018      	movs	r0, r3
 800bc46:	f7fc f981 	bl	8007f4c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	223d      	movs	r2, #61	; 0x3d
 800bc4e:	2102      	movs	r1, #2
 800bc50:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681a      	ldr	r2, [r3, #0]
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	3304      	adds	r3, #4
 800bc5a:	0019      	movs	r1, r3
 800bc5c:	0010      	movs	r0, r2
 800bc5e:	f000 fcd7 	bl	800c610 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	2248      	movs	r2, #72	; 0x48
 800bc66:	2101      	movs	r1, #1
 800bc68:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	223e      	movs	r2, #62	; 0x3e
 800bc6e:	2101      	movs	r1, #1
 800bc70:	5499      	strb	r1, [r3, r2]
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	223f      	movs	r2, #63	; 0x3f
 800bc76:	2101      	movs	r1, #1
 800bc78:	5499      	strb	r1, [r3, r2]
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2240      	movs	r2, #64	; 0x40
 800bc7e:	2101      	movs	r1, #1
 800bc80:	5499      	strb	r1, [r3, r2]
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2241      	movs	r2, #65	; 0x41
 800bc86:	2101      	movs	r1, #1
 800bc88:	5499      	strb	r1, [r3, r2]
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	2242      	movs	r2, #66	; 0x42
 800bc8e:	2101      	movs	r1, #1
 800bc90:	5499      	strb	r1, [r3, r2]
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2243      	movs	r2, #67	; 0x43
 800bc96:	2101      	movs	r1, #1
 800bc98:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	2244      	movs	r2, #68	; 0x44
 800bc9e:	2101      	movs	r1, #1
 800bca0:	5499      	strb	r1, [r3, r2]
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	2245      	movs	r2, #69	; 0x45
 800bca6:	2101      	movs	r1, #1
 800bca8:	5499      	strb	r1, [r3, r2]
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2246      	movs	r2, #70	; 0x46
 800bcae:	2101      	movs	r1, #1
 800bcb0:	5499      	strb	r1, [r3, r2]
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2247      	movs	r2, #71	; 0x47
 800bcb6:	2101      	movs	r1, #1
 800bcb8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	223d      	movs	r2, #61	; 0x3d
 800bcbe:	2101      	movs	r1, #1
 800bcc0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bcc2:	2300      	movs	r3, #0
}
 800bcc4:	0018      	movs	r0, r3
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	b002      	add	sp, #8
 800bcca:	bd80      	pop	{r7, pc}

0800bccc <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b086      	sub	sp, #24
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	60f8      	str	r0, [r7, #12]
 800bcd4:	60b9      	str	r1, [r7, #8]
 800bcd6:	607a      	str	r2, [r7, #4]
 800bcd8:	001a      	movs	r2, r3
 800bcda:	1cbb      	adds	r3, r7, #2
 800bcdc:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bcde:	2317      	movs	r3, #23
 800bce0:	18fb      	adds	r3, r7, r3
 800bce2:	2200      	movs	r2, #0
 800bce4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800bce6:	68bb      	ldr	r3, [r7, #8]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d104      	bne.n	800bcf6 <HAL_TIM_IC_Start_DMA+0x2a>
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	223e      	movs	r2, #62	; 0x3e
 800bcf0:	5c9b      	ldrb	r3, [r3, r2]
 800bcf2:	b2db      	uxtb	r3, r3
 800bcf4:	e023      	b.n	800bd3e <HAL_TIM_IC_Start_DMA+0x72>
 800bcf6:	68bb      	ldr	r3, [r7, #8]
 800bcf8:	2b04      	cmp	r3, #4
 800bcfa:	d104      	bne.n	800bd06 <HAL_TIM_IC_Start_DMA+0x3a>
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	223f      	movs	r2, #63	; 0x3f
 800bd00:	5c9b      	ldrb	r3, [r3, r2]
 800bd02:	b2db      	uxtb	r3, r3
 800bd04:	e01b      	b.n	800bd3e <HAL_TIM_IC_Start_DMA+0x72>
 800bd06:	68bb      	ldr	r3, [r7, #8]
 800bd08:	2b08      	cmp	r3, #8
 800bd0a:	d104      	bne.n	800bd16 <HAL_TIM_IC_Start_DMA+0x4a>
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	2240      	movs	r2, #64	; 0x40
 800bd10:	5c9b      	ldrb	r3, [r3, r2]
 800bd12:	b2db      	uxtb	r3, r3
 800bd14:	e013      	b.n	800bd3e <HAL_TIM_IC_Start_DMA+0x72>
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	2b0c      	cmp	r3, #12
 800bd1a:	d104      	bne.n	800bd26 <HAL_TIM_IC_Start_DMA+0x5a>
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	2241      	movs	r2, #65	; 0x41
 800bd20:	5c9b      	ldrb	r3, [r3, r2]
 800bd22:	b2db      	uxtb	r3, r3
 800bd24:	e00b      	b.n	800bd3e <HAL_TIM_IC_Start_DMA+0x72>
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	2b10      	cmp	r3, #16
 800bd2a:	d104      	bne.n	800bd36 <HAL_TIM_IC_Start_DMA+0x6a>
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	2242      	movs	r2, #66	; 0x42
 800bd30:	5c9b      	ldrb	r3, [r3, r2]
 800bd32:	b2db      	uxtb	r3, r3
 800bd34:	e003      	b.n	800bd3e <HAL_TIM_IC_Start_DMA+0x72>
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	2243      	movs	r2, #67	; 0x43
 800bd3a:	5c9b      	ldrb	r3, [r3, r2]
 800bd3c:	b2db      	uxtb	r3, r3
 800bd3e:	2216      	movs	r2, #22
 800bd40:	18ba      	adds	r2, r7, r2
 800bd42:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800bd44:	68bb      	ldr	r3, [r7, #8]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d104      	bne.n	800bd54 <HAL_TIM_IC_Start_DMA+0x88>
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	2244      	movs	r2, #68	; 0x44
 800bd4e:	5c9b      	ldrb	r3, [r3, r2]
 800bd50:	b2db      	uxtb	r3, r3
 800bd52:	e013      	b.n	800bd7c <HAL_TIM_IC_Start_DMA+0xb0>
 800bd54:	68bb      	ldr	r3, [r7, #8]
 800bd56:	2b04      	cmp	r3, #4
 800bd58:	d104      	bne.n	800bd64 <HAL_TIM_IC_Start_DMA+0x98>
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	2245      	movs	r2, #69	; 0x45
 800bd5e:	5c9b      	ldrb	r3, [r3, r2]
 800bd60:	b2db      	uxtb	r3, r3
 800bd62:	e00b      	b.n	800bd7c <HAL_TIM_IC_Start_DMA+0xb0>
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	2b08      	cmp	r3, #8
 800bd68:	d104      	bne.n	800bd74 <HAL_TIM_IC_Start_DMA+0xa8>
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	2246      	movs	r2, #70	; 0x46
 800bd6e:	5c9b      	ldrb	r3, [r3, r2]
 800bd70:	b2db      	uxtb	r3, r3
 800bd72:	e003      	b.n	800bd7c <HAL_TIM_IC_Start_DMA+0xb0>
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	2247      	movs	r2, #71	; 0x47
 800bd78:	5c9b      	ldrb	r3, [r3, r2]
 800bd7a:	b2db      	uxtb	r3, r3
 800bd7c:	2115      	movs	r1, #21
 800bd7e:	187a      	adds	r2, r7, r1
 800bd80:	7013      	strb	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 800bd82:	2316      	movs	r3, #22
 800bd84:	18fb      	adds	r3, r7, r3
 800bd86:	781b      	ldrb	r3, [r3, #0]
 800bd88:	2b02      	cmp	r3, #2
 800bd8a:	d003      	beq.n	800bd94 <HAL_TIM_IC_Start_DMA+0xc8>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 800bd8c:	187b      	adds	r3, r7, r1
 800bd8e:	781b      	ldrb	r3, [r3, #0]
 800bd90:	2b02      	cmp	r3, #2
 800bd92:	d101      	bne.n	800bd98 <HAL_TIM_IC_Start_DMA+0xcc>
  {
    return HAL_BUSY;
 800bd94:	2302      	movs	r3, #2
 800bd96:	e146      	b.n	800c026 <HAL_TIM_IC_Start_DMA+0x35a>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 800bd98:	2316      	movs	r3, #22
 800bd9a:	18fb      	adds	r3, r7, r3
 800bd9c:	781b      	ldrb	r3, [r3, #0]
 800bd9e:	2b01      	cmp	r3, #1
 800bda0:	d156      	bne.n	800be50 <HAL_TIM_IC_Start_DMA+0x184>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 800bda2:	2315      	movs	r3, #21
 800bda4:	18fb      	adds	r3, r7, r3
 800bda6:	781b      	ldrb	r3, [r3, #0]
 800bda8:	2b01      	cmp	r3, #1
 800bdaa:	d151      	bne.n	800be50 <HAL_TIM_IC_Start_DMA+0x184>
  {
    if ((pData == NULL) || (Length == 0U))
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d003      	beq.n	800bdba <HAL_TIM_IC_Start_DMA+0xee>
 800bdb2:	1cbb      	adds	r3, r7, #2
 800bdb4:	881b      	ldrh	r3, [r3, #0]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d101      	bne.n	800bdbe <HAL_TIM_IC_Start_DMA+0xf2>
    {
      return HAL_ERROR;
 800bdba:	2301      	movs	r3, #1
 800bdbc:	e133      	b.n	800c026 <HAL_TIM_IC_Start_DMA+0x35a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d104      	bne.n	800bdce <HAL_TIM_IC_Start_DMA+0x102>
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	223e      	movs	r2, #62	; 0x3e
 800bdc8:	2102      	movs	r1, #2
 800bdca:	5499      	strb	r1, [r3, r2]
 800bdcc:	e023      	b.n	800be16 <HAL_TIM_IC_Start_DMA+0x14a>
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	2b04      	cmp	r3, #4
 800bdd2:	d104      	bne.n	800bdde <HAL_TIM_IC_Start_DMA+0x112>
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	223f      	movs	r2, #63	; 0x3f
 800bdd8:	2102      	movs	r1, #2
 800bdda:	5499      	strb	r1, [r3, r2]
 800bddc:	e01b      	b.n	800be16 <HAL_TIM_IC_Start_DMA+0x14a>
 800bdde:	68bb      	ldr	r3, [r7, #8]
 800bde0:	2b08      	cmp	r3, #8
 800bde2:	d104      	bne.n	800bdee <HAL_TIM_IC_Start_DMA+0x122>
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	2240      	movs	r2, #64	; 0x40
 800bde8:	2102      	movs	r1, #2
 800bdea:	5499      	strb	r1, [r3, r2]
 800bdec:	e013      	b.n	800be16 <HAL_TIM_IC_Start_DMA+0x14a>
 800bdee:	68bb      	ldr	r3, [r7, #8]
 800bdf0:	2b0c      	cmp	r3, #12
 800bdf2:	d104      	bne.n	800bdfe <HAL_TIM_IC_Start_DMA+0x132>
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	2241      	movs	r2, #65	; 0x41
 800bdf8:	2102      	movs	r1, #2
 800bdfa:	5499      	strb	r1, [r3, r2]
 800bdfc:	e00b      	b.n	800be16 <HAL_TIM_IC_Start_DMA+0x14a>
 800bdfe:	68bb      	ldr	r3, [r7, #8]
 800be00:	2b10      	cmp	r3, #16
 800be02:	d104      	bne.n	800be0e <HAL_TIM_IC_Start_DMA+0x142>
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	2242      	movs	r2, #66	; 0x42
 800be08:	2102      	movs	r1, #2
 800be0a:	5499      	strb	r1, [r3, r2]
 800be0c:	e003      	b.n	800be16 <HAL_TIM_IC_Start_DMA+0x14a>
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	2243      	movs	r2, #67	; 0x43
 800be12:	2102      	movs	r1, #2
 800be14:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d104      	bne.n	800be26 <HAL_TIM_IC_Start_DMA+0x15a>
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	2244      	movs	r2, #68	; 0x44
 800be20:	2102      	movs	r1, #2
 800be22:	5499      	strb	r1, [r3, r2]
    if ((pData == NULL) || (Length == 0U))
 800be24:	e016      	b.n	800be54 <HAL_TIM_IC_Start_DMA+0x188>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800be26:	68bb      	ldr	r3, [r7, #8]
 800be28:	2b04      	cmp	r3, #4
 800be2a:	d104      	bne.n	800be36 <HAL_TIM_IC_Start_DMA+0x16a>
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	2245      	movs	r2, #69	; 0x45
 800be30:	2102      	movs	r1, #2
 800be32:	5499      	strb	r1, [r3, r2]
    if ((pData == NULL) || (Length == 0U))
 800be34:	e00e      	b.n	800be54 <HAL_TIM_IC_Start_DMA+0x188>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800be36:	68bb      	ldr	r3, [r7, #8]
 800be38:	2b08      	cmp	r3, #8
 800be3a:	d104      	bne.n	800be46 <HAL_TIM_IC_Start_DMA+0x17a>
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	2246      	movs	r2, #70	; 0x46
 800be40:	2102      	movs	r1, #2
 800be42:	5499      	strb	r1, [r3, r2]
    if ((pData == NULL) || (Length == 0U))
 800be44:	e006      	b.n	800be54 <HAL_TIM_IC_Start_DMA+0x188>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	2247      	movs	r2, #71	; 0x47
 800be4a:	2102      	movs	r1, #2
 800be4c:	5499      	strb	r1, [r3, r2]
    if ((pData == NULL) || (Length == 0U))
 800be4e:	e001      	b.n	800be54 <HAL_TIM_IC_Start_DMA+0x188>
    }
  }
  else
  {
    return HAL_ERROR;
 800be50:	2301      	movs	r3, #1
 800be52:	e0e8      	b.n	800c026 <HAL_TIM_IC_Start_DMA+0x35a>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	68b9      	ldr	r1, [r7, #8]
 800be5a:	2201      	movs	r2, #1
 800be5c:	0018      	movs	r0, r3
 800be5e:	f000 fd6d 	bl	800c93c <TIM_CCxChannelCmd>

  switch (Channel)
 800be62:	68bb      	ldr	r3, [r7, #8]
 800be64:	2b0c      	cmp	r3, #12
 800be66:	d100      	bne.n	800be6a <HAL_TIM_IC_Start_DMA+0x19e>
 800be68:	e080      	b.n	800bf6c <HAL_TIM_IC_Start_DMA+0x2a0>
 800be6a:	68bb      	ldr	r3, [r7, #8]
 800be6c:	2b0c      	cmp	r3, #12
 800be6e:	d900      	bls.n	800be72 <HAL_TIM_IC_Start_DMA+0x1a6>
 800be70:	e0a1      	b.n	800bfb6 <HAL_TIM_IC_Start_DMA+0x2ea>
 800be72:	68bb      	ldr	r3, [r7, #8]
 800be74:	2b08      	cmp	r3, #8
 800be76:	d054      	beq.n	800bf22 <HAL_TIM_IC_Start_DMA+0x256>
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	2b08      	cmp	r3, #8
 800be7c:	d900      	bls.n	800be80 <HAL_TIM_IC_Start_DMA+0x1b4>
 800be7e:	e09a      	b.n	800bfb6 <HAL_TIM_IC_Start_DMA+0x2ea>
 800be80:	68bb      	ldr	r3, [r7, #8]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d003      	beq.n	800be8e <HAL_TIM_IC_Start_DMA+0x1c2>
 800be86:	68bb      	ldr	r3, [r7, #8]
 800be88:	2b04      	cmp	r3, #4
 800be8a:	d025      	beq.n	800bed8 <HAL_TIM_IC_Start_DMA+0x20c>
 800be8c:	e093      	b.n	800bfb6 <HAL_TIM_IC_Start_DMA+0x2ea>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be92:	4a67      	ldr	r2, [pc, #412]	; (800c030 <HAL_TIM_IC_Start_DMA+0x364>)
 800be94:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be9a:	4a66      	ldr	r2, [pc, #408]	; (800c034 <HAL_TIM_IC_Start_DMA+0x368>)
 800be9c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bea2:	4a65      	ldr	r2, [pc, #404]	; (800c038 <HAL_TIM_IC_Start_DMA+0x36c>)
 800bea4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	3334      	adds	r3, #52	; 0x34
 800beb0:	0019      	movs	r1, r3
 800beb2:	687a      	ldr	r2, [r7, #4]
 800beb4:	1cbb      	adds	r3, r7, #2
 800beb6:	881b      	ldrh	r3, [r3, #0]
 800beb8:	f7fd fb4c 	bl	8009554 <HAL_DMA_Start_IT>
 800bebc:	1e03      	subs	r3, r0, #0
 800bebe:	d001      	beq.n	800bec4 <HAL_TIM_IC_Start_DMA+0x1f8>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800bec0:	2301      	movs	r3, #1
 800bec2:	e0b0      	b.n	800c026 <HAL_TIM_IC_Start_DMA+0x35a>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	68da      	ldr	r2, [r3, #12]
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	2180      	movs	r1, #128	; 0x80
 800bed0:	0089      	lsls	r1, r1, #2
 800bed2:	430a      	orrs	r2, r1
 800bed4:	60da      	str	r2, [r3, #12]
      break;
 800bed6:	e073      	b.n	800bfc0 <HAL_TIM_IC_Start_DMA+0x2f4>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bedc:	4a54      	ldr	r2, [pc, #336]	; (800c030 <HAL_TIM_IC_Start_DMA+0x364>)
 800bede:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bee4:	4a53      	ldr	r2, [pc, #332]	; (800c034 <HAL_TIM_IC_Start_DMA+0x368>)
 800bee6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800beec:	4a52      	ldr	r2, [pc, #328]	; (800c038 <HAL_TIM_IC_Start_DMA+0x36c>)
 800beee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	3338      	adds	r3, #56	; 0x38
 800befa:	0019      	movs	r1, r3
 800befc:	687a      	ldr	r2, [r7, #4]
 800befe:	1cbb      	adds	r3, r7, #2
 800bf00:	881b      	ldrh	r3, [r3, #0]
 800bf02:	f7fd fb27 	bl	8009554 <HAL_DMA_Start_IT>
 800bf06:	1e03      	subs	r3, r0, #0
 800bf08:	d001      	beq.n	800bf0e <HAL_TIM_IC_Start_DMA+0x242>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800bf0a:	2301      	movs	r3, #1
 800bf0c:	e08b      	b.n	800c026 <HAL_TIM_IC_Start_DMA+0x35a>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	68da      	ldr	r2, [r3, #12]
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	2180      	movs	r1, #128	; 0x80
 800bf1a:	00c9      	lsls	r1, r1, #3
 800bf1c:	430a      	orrs	r2, r1
 800bf1e:	60da      	str	r2, [r3, #12]
      break;
 800bf20:	e04e      	b.n	800bfc0 <HAL_TIM_IC_Start_DMA+0x2f4>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf26:	4a42      	ldr	r2, [pc, #264]	; (800c030 <HAL_TIM_IC_Start_DMA+0x364>)
 800bf28:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf2e:	4a41      	ldr	r2, [pc, #260]	; (800c034 <HAL_TIM_IC_Start_DMA+0x368>)
 800bf30:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf36:	4a40      	ldr	r2, [pc, #256]	; (800c038 <HAL_TIM_IC_Start_DMA+0x36c>)
 800bf38:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	333c      	adds	r3, #60	; 0x3c
 800bf44:	0019      	movs	r1, r3
 800bf46:	687a      	ldr	r2, [r7, #4]
 800bf48:	1cbb      	adds	r3, r7, #2
 800bf4a:	881b      	ldrh	r3, [r3, #0]
 800bf4c:	f7fd fb02 	bl	8009554 <HAL_DMA_Start_IT>
 800bf50:	1e03      	subs	r3, r0, #0
 800bf52:	d001      	beq.n	800bf58 <HAL_TIM_IC_Start_DMA+0x28c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800bf54:	2301      	movs	r3, #1
 800bf56:	e066      	b.n	800c026 <HAL_TIM_IC_Start_DMA+0x35a>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	68da      	ldr	r2, [r3, #12]
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	2180      	movs	r1, #128	; 0x80
 800bf64:	0109      	lsls	r1, r1, #4
 800bf66:	430a      	orrs	r2, r1
 800bf68:	60da      	str	r2, [r3, #12]
      break;
 800bf6a:	e029      	b.n	800bfc0 <HAL_TIM_IC_Start_DMA+0x2f4>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf70:	4a2f      	ldr	r2, [pc, #188]	; (800c030 <HAL_TIM_IC_Start_DMA+0x364>)
 800bf72:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf78:	4a2e      	ldr	r2, [pc, #184]	; (800c034 <HAL_TIM_IC_Start_DMA+0x368>)
 800bf7a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf80:	4a2d      	ldr	r2, [pc, #180]	; (800c038 <HAL_TIM_IC_Start_DMA+0x36c>)
 800bf82:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	3340      	adds	r3, #64	; 0x40
 800bf8e:	0019      	movs	r1, r3
 800bf90:	687a      	ldr	r2, [r7, #4]
 800bf92:	1cbb      	adds	r3, r7, #2
 800bf94:	881b      	ldrh	r3, [r3, #0]
 800bf96:	f7fd fadd 	bl	8009554 <HAL_DMA_Start_IT>
 800bf9a:	1e03      	subs	r3, r0, #0
 800bf9c:	d001      	beq.n	800bfa2 <HAL_TIM_IC_Start_DMA+0x2d6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800bf9e:	2301      	movs	r3, #1
 800bfa0:	e041      	b.n	800c026 <HAL_TIM_IC_Start_DMA+0x35a>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	68da      	ldr	r2, [r3, #12]
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	2180      	movs	r1, #128	; 0x80
 800bfae:	0149      	lsls	r1, r1, #5
 800bfb0:	430a      	orrs	r2, r1
 800bfb2:	60da      	str	r2, [r3, #12]
      break;
 800bfb4:	e004      	b.n	800bfc0 <HAL_TIM_IC_Start_DMA+0x2f4>
    }

    default:
      status = HAL_ERROR;
 800bfb6:	2317      	movs	r3, #23
 800bfb8:	18fb      	adds	r3, r7, r3
 800bfba:	2201      	movs	r2, #1
 800bfbc:	701a      	strb	r2, [r3, #0]
      break;
 800bfbe:	46c0      	nop			; (mov r8, r8)
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	4a1d      	ldr	r2, [pc, #116]	; (800c03c <HAL_TIM_IC_Start_DMA+0x370>)
 800bfc6:	4293      	cmp	r3, r2
 800bfc8:	d009      	beq.n	800bfde <HAL_TIM_IC_Start_DMA+0x312>
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	4a1c      	ldr	r2, [pc, #112]	; (800c040 <HAL_TIM_IC_Start_DMA+0x374>)
 800bfd0:	4293      	cmp	r3, r2
 800bfd2:	d004      	beq.n	800bfde <HAL_TIM_IC_Start_DMA+0x312>
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	4a1a      	ldr	r2, [pc, #104]	; (800c044 <HAL_TIM_IC_Start_DMA+0x378>)
 800bfda:	4293      	cmp	r3, r2
 800bfdc:	d116      	bne.n	800c00c <HAL_TIM_IC_Start_DMA+0x340>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	689b      	ldr	r3, [r3, #8]
 800bfe4:	4a18      	ldr	r2, [pc, #96]	; (800c048 <HAL_TIM_IC_Start_DMA+0x37c>)
 800bfe6:	4013      	ands	r3, r2
 800bfe8:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bfea:	693b      	ldr	r3, [r7, #16]
 800bfec:	2b06      	cmp	r3, #6
 800bfee:	d016      	beq.n	800c01e <HAL_TIM_IC_Start_DMA+0x352>
 800bff0:	693a      	ldr	r2, [r7, #16]
 800bff2:	2380      	movs	r3, #128	; 0x80
 800bff4:	025b      	lsls	r3, r3, #9
 800bff6:	429a      	cmp	r2, r3
 800bff8:	d011      	beq.n	800c01e <HAL_TIM_IC_Start_DMA+0x352>
    {
      __HAL_TIM_ENABLE(htim);
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	681a      	ldr	r2, [r3, #0]
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	2101      	movs	r1, #1
 800c006:	430a      	orrs	r2, r1
 800c008:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c00a:	e008      	b.n	800c01e <HAL_TIM_IC_Start_DMA+0x352>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	681a      	ldr	r2, [r3, #0]
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	2101      	movs	r1, #1
 800c018:	430a      	orrs	r2, r1
 800c01a:	601a      	str	r2, [r3, #0]
 800c01c:	e000      	b.n	800c020 <HAL_TIM_IC_Start_DMA+0x354>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c01e:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return status;
 800c020:	2317      	movs	r3, #23
 800c022:	18fb      	adds	r3, r7, r3
 800c024:	781b      	ldrb	r3, [r3, #0]
}
 800c026:	0018      	movs	r0, r3
 800c028:	46bd      	mov	sp, r7
 800c02a:	b006      	add	sp, #24
 800c02c:	bd80      	pop	{r7, pc}
 800c02e:	46c0      	nop			; (mov r8, r8)
 800c030:	0800c4dd 	.word	0x0800c4dd
 800c034:	0800c5a7 	.word	0x0800c5a7
 800c038:	0800c449 	.word	0x0800c449
 800c03c:	40012c00 	.word	0x40012c00
 800c040:	40000400 	.word	0x40000400
 800c044:	40014000 	.word	0x40014000
 800c048:	00010007 	.word	0x00010007

0800c04c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b082      	sub	sp, #8
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	691b      	ldr	r3, [r3, #16]
 800c05a:	2202      	movs	r2, #2
 800c05c:	4013      	ands	r3, r2
 800c05e:	2b02      	cmp	r3, #2
 800c060:	d124      	bne.n	800c0ac <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	68db      	ldr	r3, [r3, #12]
 800c068:	2202      	movs	r2, #2
 800c06a:	4013      	ands	r3, r2
 800c06c:	2b02      	cmp	r3, #2
 800c06e:	d11d      	bne.n	800c0ac <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	2203      	movs	r2, #3
 800c076:	4252      	negs	r2, r2
 800c078:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	2201      	movs	r2, #1
 800c07e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	699b      	ldr	r3, [r3, #24]
 800c086:	2203      	movs	r2, #3
 800c088:	4013      	ands	r3, r2
 800c08a:	d004      	beq.n	800c096 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	0018      	movs	r0, r3
 800c090:	f7fb f956 	bl	8007340 <HAL_TIM_IC_CaptureCallback>
 800c094:	e007      	b.n	800c0a6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	0018      	movs	r0, r3
 800c09a:	f000 f9ad 	bl	800c3f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	0018      	movs	r0, r3
 800c0a2:	f000 f9b9 	bl	800c418 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	691b      	ldr	r3, [r3, #16]
 800c0b2:	2204      	movs	r2, #4
 800c0b4:	4013      	ands	r3, r2
 800c0b6:	2b04      	cmp	r3, #4
 800c0b8:	d125      	bne.n	800c106 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	68db      	ldr	r3, [r3, #12]
 800c0c0:	2204      	movs	r2, #4
 800c0c2:	4013      	ands	r3, r2
 800c0c4:	2b04      	cmp	r3, #4
 800c0c6:	d11e      	bne.n	800c106 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	2205      	movs	r2, #5
 800c0ce:	4252      	negs	r2, r2
 800c0d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	2202      	movs	r2, #2
 800c0d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	699a      	ldr	r2, [r3, #24]
 800c0de:	23c0      	movs	r3, #192	; 0xc0
 800c0e0:	009b      	lsls	r3, r3, #2
 800c0e2:	4013      	ands	r3, r2
 800c0e4:	d004      	beq.n	800c0f0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	0018      	movs	r0, r3
 800c0ea:	f7fb f929 	bl	8007340 <HAL_TIM_IC_CaptureCallback>
 800c0ee:	e007      	b.n	800c100 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	0018      	movs	r0, r3
 800c0f4:	f000 f980 	bl	800c3f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	0018      	movs	r0, r3
 800c0fc:	f000 f98c 	bl	800c418 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2200      	movs	r2, #0
 800c104:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	691b      	ldr	r3, [r3, #16]
 800c10c:	2208      	movs	r2, #8
 800c10e:	4013      	ands	r3, r2
 800c110:	2b08      	cmp	r3, #8
 800c112:	d124      	bne.n	800c15e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	68db      	ldr	r3, [r3, #12]
 800c11a:	2208      	movs	r2, #8
 800c11c:	4013      	ands	r3, r2
 800c11e:	2b08      	cmp	r3, #8
 800c120:	d11d      	bne.n	800c15e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	2209      	movs	r2, #9
 800c128:	4252      	negs	r2, r2
 800c12a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2204      	movs	r2, #4
 800c130:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	69db      	ldr	r3, [r3, #28]
 800c138:	2203      	movs	r2, #3
 800c13a:	4013      	ands	r3, r2
 800c13c:	d004      	beq.n	800c148 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	0018      	movs	r0, r3
 800c142:	f7fb f8fd 	bl	8007340 <HAL_TIM_IC_CaptureCallback>
 800c146:	e007      	b.n	800c158 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	0018      	movs	r0, r3
 800c14c:	f000 f954 	bl	800c3f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	0018      	movs	r0, r3
 800c154:	f000 f960 	bl	800c418 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2200      	movs	r2, #0
 800c15c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	691b      	ldr	r3, [r3, #16]
 800c164:	2210      	movs	r2, #16
 800c166:	4013      	ands	r3, r2
 800c168:	2b10      	cmp	r3, #16
 800c16a:	d125      	bne.n	800c1b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	68db      	ldr	r3, [r3, #12]
 800c172:	2210      	movs	r2, #16
 800c174:	4013      	ands	r3, r2
 800c176:	2b10      	cmp	r3, #16
 800c178:	d11e      	bne.n	800c1b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	2211      	movs	r2, #17
 800c180:	4252      	negs	r2, r2
 800c182:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2208      	movs	r2, #8
 800c188:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	69da      	ldr	r2, [r3, #28]
 800c190:	23c0      	movs	r3, #192	; 0xc0
 800c192:	009b      	lsls	r3, r3, #2
 800c194:	4013      	ands	r3, r2
 800c196:	d004      	beq.n	800c1a2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	0018      	movs	r0, r3
 800c19c:	f7fb f8d0 	bl	8007340 <HAL_TIM_IC_CaptureCallback>
 800c1a0:	e007      	b.n	800c1b2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	0018      	movs	r0, r3
 800c1a6:	f000 f927 	bl	800c3f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	0018      	movs	r0, r3
 800c1ae:	f000 f933 	bl	800c418 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	691b      	ldr	r3, [r3, #16]
 800c1be:	2201      	movs	r2, #1
 800c1c0:	4013      	ands	r3, r2
 800c1c2:	2b01      	cmp	r3, #1
 800c1c4:	d10f      	bne.n	800c1e6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	68db      	ldr	r3, [r3, #12]
 800c1cc:	2201      	movs	r2, #1
 800c1ce:	4013      	ands	r3, r2
 800c1d0:	2b01      	cmp	r3, #1
 800c1d2:	d108      	bne.n	800c1e6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	2202      	movs	r2, #2
 800c1da:	4252      	negs	r2, r2
 800c1dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	0018      	movs	r0, r3
 800c1e2:	f7f8 fe7d 	bl	8004ee0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	691b      	ldr	r3, [r3, #16]
 800c1ec:	2280      	movs	r2, #128	; 0x80
 800c1ee:	4013      	ands	r3, r2
 800c1f0:	2b80      	cmp	r3, #128	; 0x80
 800c1f2:	d10f      	bne.n	800c214 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	68db      	ldr	r3, [r3, #12]
 800c1fa:	2280      	movs	r2, #128	; 0x80
 800c1fc:	4013      	ands	r3, r2
 800c1fe:	2b80      	cmp	r3, #128	; 0x80
 800c200:	d108      	bne.n	800c214 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	2281      	movs	r2, #129	; 0x81
 800c208:	4252      	negs	r2, r2
 800c20a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	0018      	movs	r0, r3
 800c210:	f000 fc28 	bl	800ca64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	691a      	ldr	r2, [r3, #16]
 800c21a:	2380      	movs	r3, #128	; 0x80
 800c21c:	005b      	lsls	r3, r3, #1
 800c21e:	401a      	ands	r2, r3
 800c220:	2380      	movs	r3, #128	; 0x80
 800c222:	005b      	lsls	r3, r3, #1
 800c224:	429a      	cmp	r2, r3
 800c226:	d10e      	bne.n	800c246 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	68db      	ldr	r3, [r3, #12]
 800c22e:	2280      	movs	r2, #128	; 0x80
 800c230:	4013      	ands	r3, r2
 800c232:	2b80      	cmp	r3, #128	; 0x80
 800c234:	d107      	bne.n	800c246 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	4a1c      	ldr	r2, [pc, #112]	; (800c2ac <HAL_TIM_IRQHandler+0x260>)
 800c23c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	0018      	movs	r0, r3
 800c242:	f000 fc17 	bl	800ca74 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	691b      	ldr	r3, [r3, #16]
 800c24c:	2240      	movs	r2, #64	; 0x40
 800c24e:	4013      	ands	r3, r2
 800c250:	2b40      	cmp	r3, #64	; 0x40
 800c252:	d10f      	bne.n	800c274 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	68db      	ldr	r3, [r3, #12]
 800c25a:	2240      	movs	r2, #64	; 0x40
 800c25c:	4013      	ands	r3, r2
 800c25e:	2b40      	cmp	r3, #64	; 0x40
 800c260:	d108      	bne.n	800c274 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	2241      	movs	r2, #65	; 0x41
 800c268:	4252      	negs	r2, r2
 800c26a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	0018      	movs	r0, r3
 800c270:	f000 f8da 	bl	800c428 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	691b      	ldr	r3, [r3, #16]
 800c27a:	2220      	movs	r2, #32
 800c27c:	4013      	ands	r3, r2
 800c27e:	2b20      	cmp	r3, #32
 800c280:	d10f      	bne.n	800c2a2 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	68db      	ldr	r3, [r3, #12]
 800c288:	2220      	movs	r2, #32
 800c28a:	4013      	ands	r3, r2
 800c28c:	2b20      	cmp	r3, #32
 800c28e:	d108      	bne.n	800c2a2 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	2221      	movs	r2, #33	; 0x21
 800c296:	4252      	negs	r2, r2
 800c298:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	0018      	movs	r0, r3
 800c29e:	f000 fbd9 	bl	800ca54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c2a2:	46c0      	nop			; (mov r8, r8)
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	b002      	add	sp, #8
 800c2a8:	bd80      	pop	{r7, pc}
 800c2aa:	46c0      	nop			; (mov r8, r8)
 800c2ac:	fffffeff 	.word	0xfffffeff

0800c2b0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b086      	sub	sp, #24
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	60f8      	str	r0, [r7, #12]
 800c2b8:	60b9      	str	r1, [r7, #8]
 800c2ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c2bc:	2317      	movs	r3, #23
 800c2be:	18fb      	adds	r3, r7, r3
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	223c      	movs	r2, #60	; 0x3c
 800c2c8:	5c9b      	ldrb	r3, [r3, r2]
 800c2ca:	2b01      	cmp	r3, #1
 800c2cc:	d101      	bne.n	800c2d2 <HAL_TIM_IC_ConfigChannel+0x22>
 800c2ce:	2302      	movs	r3, #2
 800c2d0:	e08c      	b.n	800c3ec <HAL_TIM_IC_ConfigChannel+0x13c>
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	223c      	movs	r2, #60	; 0x3c
 800c2d6:	2101      	movs	r1, #1
 800c2d8:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d11b      	bne.n	800c318 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	6818      	ldr	r0, [r3, #0]
 800c2e4:	68bb      	ldr	r3, [r7, #8]
 800c2e6:	6819      	ldr	r1, [r3, #0]
 800c2e8:	68bb      	ldr	r3, [r7, #8]
 800c2ea:	685a      	ldr	r2, [r3, #4]
 800c2ec:	68bb      	ldr	r3, [r7, #8]
 800c2ee:	68db      	ldr	r3, [r3, #12]
 800c2f0:	f000 fa04 	bl	800c6fc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	699a      	ldr	r2, [r3, #24]
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	210c      	movs	r1, #12
 800c300:	438a      	bics	r2, r1
 800c302:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	6999      	ldr	r1, [r3, #24]
 800c30a:	68bb      	ldr	r3, [r7, #8]
 800c30c:	689a      	ldr	r2, [r3, #8]
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	430a      	orrs	r2, r1
 800c314:	619a      	str	r2, [r3, #24]
 800c316:	e062      	b.n	800c3de <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	2b04      	cmp	r3, #4
 800c31c:	d11c      	bne.n	800c358 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	6818      	ldr	r0, [r3, #0]
 800c322:	68bb      	ldr	r3, [r7, #8]
 800c324:	6819      	ldr	r1, [r3, #0]
 800c326:	68bb      	ldr	r3, [r7, #8]
 800c328:	685a      	ldr	r2, [r3, #4]
 800c32a:	68bb      	ldr	r3, [r7, #8]
 800c32c:	68db      	ldr	r3, [r3, #12]
 800c32e:	f000 fa3d 	bl	800c7ac <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	699a      	ldr	r2, [r3, #24]
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	492d      	ldr	r1, [pc, #180]	; (800c3f4 <HAL_TIM_IC_ConfigChannel+0x144>)
 800c33e:	400a      	ands	r2, r1
 800c340:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	6999      	ldr	r1, [r3, #24]
 800c348:	68bb      	ldr	r3, [r7, #8]
 800c34a:	689b      	ldr	r3, [r3, #8]
 800c34c:	021a      	lsls	r2, r3, #8
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	430a      	orrs	r2, r1
 800c354:	619a      	str	r2, [r3, #24]
 800c356:	e042      	b.n	800c3de <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	2b08      	cmp	r3, #8
 800c35c:	d11b      	bne.n	800c396 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	6818      	ldr	r0, [r3, #0]
 800c362:	68bb      	ldr	r3, [r7, #8]
 800c364:	6819      	ldr	r1, [r3, #0]
 800c366:	68bb      	ldr	r3, [r7, #8]
 800c368:	685a      	ldr	r2, [r3, #4]
 800c36a:	68bb      	ldr	r3, [r7, #8]
 800c36c:	68db      	ldr	r3, [r3, #12]
 800c36e:	f000 fa5f 	bl	800c830 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	69da      	ldr	r2, [r3, #28]
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	210c      	movs	r1, #12
 800c37e:	438a      	bics	r2, r1
 800c380:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	69d9      	ldr	r1, [r3, #28]
 800c388:	68bb      	ldr	r3, [r7, #8]
 800c38a:	689a      	ldr	r2, [r3, #8]
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	430a      	orrs	r2, r1
 800c392:	61da      	str	r2, [r3, #28]
 800c394:	e023      	b.n	800c3de <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2b0c      	cmp	r3, #12
 800c39a:	d11c      	bne.n	800c3d6 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	6818      	ldr	r0, [r3, #0]
 800c3a0:	68bb      	ldr	r3, [r7, #8]
 800c3a2:	6819      	ldr	r1, [r3, #0]
 800c3a4:	68bb      	ldr	r3, [r7, #8]
 800c3a6:	685a      	ldr	r2, [r3, #4]
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	68db      	ldr	r3, [r3, #12]
 800c3ac:	f000 fa80 	bl	800c8b0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	69da      	ldr	r2, [r3, #28]
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	490e      	ldr	r1, [pc, #56]	; (800c3f4 <HAL_TIM_IC_ConfigChannel+0x144>)
 800c3bc:	400a      	ands	r2, r1
 800c3be:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	69d9      	ldr	r1, [r3, #28]
 800c3c6:	68bb      	ldr	r3, [r7, #8]
 800c3c8:	689b      	ldr	r3, [r3, #8]
 800c3ca:	021a      	lsls	r2, r3, #8
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	430a      	orrs	r2, r1
 800c3d2:	61da      	str	r2, [r3, #28]
 800c3d4:	e003      	b.n	800c3de <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 800c3d6:	2317      	movs	r3, #23
 800c3d8:	18fb      	adds	r3, r7, r3
 800c3da:	2201      	movs	r2, #1
 800c3dc:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	223c      	movs	r2, #60	; 0x3c
 800c3e2:	2100      	movs	r1, #0
 800c3e4:	5499      	strb	r1, [r3, r2]

  return status;
 800c3e6:	2317      	movs	r3, #23
 800c3e8:	18fb      	adds	r3, r7, r3
 800c3ea:	781b      	ldrb	r3, [r3, #0]
}
 800c3ec:	0018      	movs	r0, r3
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	b006      	add	sp, #24
 800c3f2:	bd80      	pop	{r7, pc}
 800c3f4:	fffff3ff 	.word	0xfffff3ff

0800c3f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b082      	sub	sp, #8
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c400:	46c0      	nop			; (mov r8, r8)
 800c402:	46bd      	mov	sp, r7
 800c404:	b002      	add	sp, #8
 800c406:	bd80      	pop	{r7, pc}

0800c408 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b082      	sub	sp, #8
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800c410:	46c0      	nop			; (mov r8, r8)
 800c412:	46bd      	mov	sp, r7
 800c414:	b002      	add	sp, #8
 800c416:	bd80      	pop	{r7, pc}

0800c418 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b082      	sub	sp, #8
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c420:	46c0      	nop			; (mov r8, r8)
 800c422:	46bd      	mov	sp, r7
 800c424:	b002      	add	sp, #8
 800c426:	bd80      	pop	{r7, pc}

0800c428 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b082      	sub	sp, #8
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c430:	46c0      	nop			; (mov r8, r8)
 800c432:	46bd      	mov	sp, r7
 800c434:	b002      	add	sp, #8
 800c436:	bd80      	pop	{r7, pc}

0800c438 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b082      	sub	sp, #8
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800c440:	46c0      	nop			; (mov r8, r8)
 800c442:	46bd      	mov	sp, r7
 800c444:	b002      	add	sp, #8
 800c446:	bd80      	pop	{r7, pc}

0800c448 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b084      	sub	sp, #16
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c454:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c45a:	687a      	ldr	r2, [r7, #4]
 800c45c:	429a      	cmp	r2, r3
 800c45e:	d107      	bne.n	800c470 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	2201      	movs	r2, #1
 800c464:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	223e      	movs	r2, #62	; 0x3e
 800c46a:	2101      	movs	r1, #1
 800c46c:	5499      	strb	r1, [r3, r2]
 800c46e:	e02a      	b.n	800c4c6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c474:	687a      	ldr	r2, [r7, #4]
 800c476:	429a      	cmp	r2, r3
 800c478:	d107      	bne.n	800c48a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	2202      	movs	r2, #2
 800c47e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	223f      	movs	r2, #63	; 0x3f
 800c484:	2101      	movs	r1, #1
 800c486:	5499      	strb	r1, [r3, r2]
 800c488:	e01d      	b.n	800c4c6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c48e:	687a      	ldr	r2, [r7, #4]
 800c490:	429a      	cmp	r2, r3
 800c492:	d107      	bne.n	800c4a4 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	2204      	movs	r2, #4
 800c498:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	2240      	movs	r2, #64	; 0x40
 800c49e:	2101      	movs	r1, #1
 800c4a0:	5499      	strb	r1, [r3, r2]
 800c4a2:	e010      	b.n	800c4c6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4a8:	687a      	ldr	r2, [r7, #4]
 800c4aa:	429a      	cmp	r2, r3
 800c4ac:	d107      	bne.n	800c4be <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	2208      	movs	r2, #8
 800c4b2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	2241      	movs	r2, #65	; 0x41
 800c4b8:	2101      	movs	r1, #1
 800c4ba:	5499      	strb	r1, [r3, r2]
 800c4bc:	e003      	b.n	800c4c6 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	223d      	movs	r2, #61	; 0x3d
 800c4c2:	2101      	movs	r1, #1
 800c4c4:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	0018      	movs	r0, r3
 800c4ca:	f7ff ffb5 	bl	800c438 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	771a      	strb	r2, [r3, #28]
}
 800c4d4:	46c0      	nop			; (mov r8, r8)
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	b004      	add	sp, #16
 800c4da:	bd80      	pop	{r7, pc}

0800c4dc <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b084      	sub	sp, #16
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4e8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4ee:	687a      	ldr	r2, [r7, #4]
 800c4f0:	429a      	cmp	r2, r3
 800c4f2:	d10f      	bne.n	800c514 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	2201      	movs	r2, #1
 800c4f8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	69db      	ldr	r3, [r3, #28]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d146      	bne.n	800c590 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	223e      	movs	r2, #62	; 0x3e
 800c506:	2101      	movs	r1, #1
 800c508:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	2244      	movs	r2, #68	; 0x44
 800c50e:	2101      	movs	r1, #1
 800c510:	5499      	strb	r1, [r3, r2]
 800c512:	e03d      	b.n	800c590 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c518:	687a      	ldr	r2, [r7, #4]
 800c51a:	429a      	cmp	r2, r3
 800c51c:	d10f      	bne.n	800c53e <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	2202      	movs	r2, #2
 800c522:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	69db      	ldr	r3, [r3, #28]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d131      	bne.n	800c590 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	223f      	movs	r2, #63	; 0x3f
 800c530:	2101      	movs	r1, #1
 800c532:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	2245      	movs	r2, #69	; 0x45
 800c538:	2101      	movs	r1, #1
 800c53a:	5499      	strb	r1, [r3, r2]
 800c53c:	e028      	b.n	800c590 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c542:	687a      	ldr	r2, [r7, #4]
 800c544:	429a      	cmp	r2, r3
 800c546:	d10f      	bne.n	800c568 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	2204      	movs	r2, #4
 800c54c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	69db      	ldr	r3, [r3, #28]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d11c      	bne.n	800c590 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	2240      	movs	r2, #64	; 0x40
 800c55a:	2101      	movs	r1, #1
 800c55c:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	2246      	movs	r2, #70	; 0x46
 800c562:	2101      	movs	r1, #1
 800c564:	5499      	strb	r1, [r3, r2]
 800c566:	e013      	b.n	800c590 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c56c:	687a      	ldr	r2, [r7, #4]
 800c56e:	429a      	cmp	r2, r3
 800c570:	d10e      	bne.n	800c590 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	2208      	movs	r2, #8
 800c576:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	69db      	ldr	r3, [r3, #28]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d107      	bne.n	800c590 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	2241      	movs	r2, #65	; 0x41
 800c584:	2101      	movs	r1, #1
 800c586:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	2247      	movs	r2, #71	; 0x47
 800c58c:	2101      	movs	r1, #1
 800c58e:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	0018      	movs	r0, r3
 800c594:	f7fa fed4 	bl	8007340 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	2200      	movs	r2, #0
 800c59c:	771a      	strb	r2, [r3, #28]
}
 800c59e:	46c0      	nop			; (mov r8, r8)
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	b004      	add	sp, #16
 800c5a4:	bd80      	pop	{r7, pc}

0800c5a6 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c5a6:	b580      	push	{r7, lr}
 800c5a8:	b084      	sub	sp, #16
 800c5aa:	af00      	add	r7, sp, #0
 800c5ac:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5b2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5b8:	687a      	ldr	r2, [r7, #4]
 800c5ba:	429a      	cmp	r2, r3
 800c5bc:	d103      	bne.n	800c5c6 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	2201      	movs	r2, #1
 800c5c2:	771a      	strb	r2, [r3, #28]
 800c5c4:	e019      	b.n	800c5fa <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5ca:	687a      	ldr	r2, [r7, #4]
 800c5cc:	429a      	cmp	r2, r3
 800c5ce:	d103      	bne.n	800c5d8 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	2202      	movs	r2, #2
 800c5d4:	771a      	strb	r2, [r3, #28]
 800c5d6:	e010      	b.n	800c5fa <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5dc:	687a      	ldr	r2, [r7, #4]
 800c5de:	429a      	cmp	r2, r3
 800c5e0:	d103      	bne.n	800c5ea <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	2204      	movs	r2, #4
 800c5e6:	771a      	strb	r2, [r3, #28]
 800c5e8:	e007      	b.n	800c5fa <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5ee:	687a      	ldr	r2, [r7, #4]
 800c5f0:	429a      	cmp	r2, r3
 800c5f2:	d102      	bne.n	800c5fa <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	2208      	movs	r2, #8
 800c5f8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	0018      	movs	r0, r3
 800c5fe:	f7ff ff03 	bl	800c408 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	2200      	movs	r2, #0
 800c606:	771a      	strb	r2, [r3, #28]
}
 800c608:	46c0      	nop			; (mov r8, r8)
 800c60a:	46bd      	mov	sp, r7
 800c60c:	b004      	add	sp, #16
 800c60e:	bd80      	pop	{r7, pc}

0800c610 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b084      	sub	sp, #16
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
 800c618:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	4a2f      	ldr	r2, [pc, #188]	; (800c6e0 <TIM_Base_SetConfig+0xd0>)
 800c624:	4293      	cmp	r3, r2
 800c626:	d003      	beq.n	800c630 <TIM_Base_SetConfig+0x20>
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	4a2e      	ldr	r2, [pc, #184]	; (800c6e4 <TIM_Base_SetConfig+0xd4>)
 800c62c:	4293      	cmp	r3, r2
 800c62e:	d108      	bne.n	800c642 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	2270      	movs	r2, #112	; 0x70
 800c634:	4393      	bics	r3, r2
 800c636:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	685b      	ldr	r3, [r3, #4]
 800c63c:	68fa      	ldr	r2, [r7, #12]
 800c63e:	4313      	orrs	r3, r2
 800c640:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	4a26      	ldr	r2, [pc, #152]	; (800c6e0 <TIM_Base_SetConfig+0xd0>)
 800c646:	4293      	cmp	r3, r2
 800c648:	d013      	beq.n	800c672 <TIM_Base_SetConfig+0x62>
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	4a25      	ldr	r2, [pc, #148]	; (800c6e4 <TIM_Base_SetConfig+0xd4>)
 800c64e:	4293      	cmp	r3, r2
 800c650:	d00f      	beq.n	800c672 <TIM_Base_SetConfig+0x62>
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	4a24      	ldr	r2, [pc, #144]	; (800c6e8 <TIM_Base_SetConfig+0xd8>)
 800c656:	4293      	cmp	r3, r2
 800c658:	d00b      	beq.n	800c672 <TIM_Base_SetConfig+0x62>
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	4a23      	ldr	r2, [pc, #140]	; (800c6ec <TIM_Base_SetConfig+0xdc>)
 800c65e:	4293      	cmp	r3, r2
 800c660:	d007      	beq.n	800c672 <TIM_Base_SetConfig+0x62>
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	4a22      	ldr	r2, [pc, #136]	; (800c6f0 <TIM_Base_SetConfig+0xe0>)
 800c666:	4293      	cmp	r3, r2
 800c668:	d003      	beq.n	800c672 <TIM_Base_SetConfig+0x62>
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	4a21      	ldr	r2, [pc, #132]	; (800c6f4 <TIM_Base_SetConfig+0xe4>)
 800c66e:	4293      	cmp	r3, r2
 800c670:	d108      	bne.n	800c684 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	4a20      	ldr	r2, [pc, #128]	; (800c6f8 <TIM_Base_SetConfig+0xe8>)
 800c676:	4013      	ands	r3, r2
 800c678:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	68db      	ldr	r3, [r3, #12]
 800c67e:	68fa      	ldr	r2, [r7, #12]
 800c680:	4313      	orrs	r3, r2
 800c682:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	2280      	movs	r2, #128	; 0x80
 800c688:	4393      	bics	r3, r2
 800c68a:	001a      	movs	r2, r3
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	695b      	ldr	r3, [r3, #20]
 800c690:	4313      	orrs	r3, r2
 800c692:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	68fa      	ldr	r2, [r7, #12]
 800c698:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	689a      	ldr	r2, [r3, #8]
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	681a      	ldr	r2, [r3, #0]
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	4a0c      	ldr	r2, [pc, #48]	; (800c6e0 <TIM_Base_SetConfig+0xd0>)
 800c6ae:	4293      	cmp	r3, r2
 800c6b0:	d00b      	beq.n	800c6ca <TIM_Base_SetConfig+0xba>
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	4a0d      	ldr	r2, [pc, #52]	; (800c6ec <TIM_Base_SetConfig+0xdc>)
 800c6b6:	4293      	cmp	r3, r2
 800c6b8:	d007      	beq.n	800c6ca <TIM_Base_SetConfig+0xba>
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	4a0c      	ldr	r2, [pc, #48]	; (800c6f0 <TIM_Base_SetConfig+0xe0>)
 800c6be:	4293      	cmp	r3, r2
 800c6c0:	d003      	beq.n	800c6ca <TIM_Base_SetConfig+0xba>
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	4a0b      	ldr	r2, [pc, #44]	; (800c6f4 <TIM_Base_SetConfig+0xe4>)
 800c6c6:	4293      	cmp	r3, r2
 800c6c8:	d103      	bne.n	800c6d2 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	691a      	ldr	r2, [r3, #16]
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	2201      	movs	r2, #1
 800c6d6:	615a      	str	r2, [r3, #20]
}
 800c6d8:	46c0      	nop			; (mov r8, r8)
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	b004      	add	sp, #16
 800c6de:	bd80      	pop	{r7, pc}
 800c6e0:	40012c00 	.word	0x40012c00
 800c6e4:	40000400 	.word	0x40000400
 800c6e8:	40002000 	.word	0x40002000
 800c6ec:	40014000 	.word	0x40014000
 800c6f0:	40014400 	.word	0x40014400
 800c6f4:	40014800 	.word	0x40014800
 800c6f8:	fffffcff 	.word	0xfffffcff

0800c6fc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b086      	sub	sp, #24
 800c700:	af00      	add	r7, sp, #0
 800c702:	60f8      	str	r0, [r7, #12]
 800c704:	60b9      	str	r1, [r7, #8]
 800c706:	607a      	str	r2, [r7, #4]
 800c708:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	6a1b      	ldr	r3, [r3, #32]
 800c70e:	2201      	movs	r2, #1
 800c710:	4393      	bics	r3, r2
 800c712:	001a      	movs	r2, r3
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	699b      	ldr	r3, [r3, #24]
 800c71c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	6a1b      	ldr	r3, [r3, #32]
 800c722:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	4a1e      	ldr	r2, [pc, #120]	; (800c7a0 <TIM_TI1_SetConfig+0xa4>)
 800c728:	4293      	cmp	r3, r2
 800c72a:	d007      	beq.n	800c73c <TIM_TI1_SetConfig+0x40>
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	4a1d      	ldr	r2, [pc, #116]	; (800c7a4 <TIM_TI1_SetConfig+0xa8>)
 800c730:	4293      	cmp	r3, r2
 800c732:	d003      	beq.n	800c73c <TIM_TI1_SetConfig+0x40>
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	4a1c      	ldr	r2, [pc, #112]	; (800c7a8 <TIM_TI1_SetConfig+0xac>)
 800c738:	4293      	cmp	r3, r2
 800c73a:	d101      	bne.n	800c740 <TIM_TI1_SetConfig+0x44>
 800c73c:	2301      	movs	r3, #1
 800c73e:	e000      	b.n	800c742 <TIM_TI1_SetConfig+0x46>
 800c740:	2300      	movs	r3, #0
 800c742:	2b00      	cmp	r3, #0
 800c744:	d008      	beq.n	800c758 <TIM_TI1_SetConfig+0x5c>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800c746:	697b      	ldr	r3, [r7, #20]
 800c748:	2203      	movs	r2, #3
 800c74a:	4393      	bics	r3, r2
 800c74c:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800c74e:	697a      	ldr	r2, [r7, #20]
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	4313      	orrs	r3, r2
 800c754:	617b      	str	r3, [r7, #20]
 800c756:	e003      	b.n	800c760 <TIM_TI1_SetConfig+0x64>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800c758:	697b      	ldr	r3, [r7, #20]
 800c75a:	2201      	movs	r2, #1
 800c75c:	4313      	orrs	r3, r2
 800c75e:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c760:	697b      	ldr	r3, [r7, #20]
 800c762:	22f0      	movs	r2, #240	; 0xf0
 800c764:	4393      	bics	r3, r2
 800c766:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	011b      	lsls	r3, r3, #4
 800c76c:	22ff      	movs	r2, #255	; 0xff
 800c76e:	4013      	ands	r3, r2
 800c770:	697a      	ldr	r2, [r7, #20]
 800c772:	4313      	orrs	r3, r2
 800c774:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c776:	693b      	ldr	r3, [r7, #16]
 800c778:	220a      	movs	r2, #10
 800c77a:	4393      	bics	r3, r2
 800c77c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800c77e:	68bb      	ldr	r3, [r7, #8]
 800c780:	220a      	movs	r2, #10
 800c782:	4013      	ands	r3, r2
 800c784:	693a      	ldr	r2, [r7, #16]
 800c786:	4313      	orrs	r3, r2
 800c788:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	697a      	ldr	r2, [r7, #20]
 800c78e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	693a      	ldr	r2, [r7, #16]
 800c794:	621a      	str	r2, [r3, #32]
}
 800c796:	46c0      	nop			; (mov r8, r8)
 800c798:	46bd      	mov	sp, r7
 800c79a:	b006      	add	sp, #24
 800c79c:	bd80      	pop	{r7, pc}
 800c79e:	46c0      	nop			; (mov r8, r8)
 800c7a0:	40012c00 	.word	0x40012c00
 800c7a4:	40000400 	.word	0x40000400
 800c7a8:	40014000 	.word	0x40014000

0800c7ac <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b086      	sub	sp, #24
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	60f8      	str	r0, [r7, #12]
 800c7b4:	60b9      	str	r1, [r7, #8]
 800c7b6:	607a      	str	r2, [r7, #4]
 800c7b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	6a1b      	ldr	r3, [r3, #32]
 800c7be:	2210      	movs	r2, #16
 800c7c0:	4393      	bics	r3, r2
 800c7c2:	001a      	movs	r2, r3
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	699b      	ldr	r3, [r3, #24]
 800c7cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	6a1b      	ldr	r3, [r3, #32]
 800c7d2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800c7d4:	697b      	ldr	r3, [r7, #20]
 800c7d6:	4a14      	ldr	r2, [pc, #80]	; (800c828 <TIM_TI2_SetConfig+0x7c>)
 800c7d8:	4013      	ands	r3, r2
 800c7da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	021b      	lsls	r3, r3, #8
 800c7e0:	697a      	ldr	r2, [r7, #20]
 800c7e2:	4313      	orrs	r3, r2
 800c7e4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c7e6:	697b      	ldr	r3, [r7, #20]
 800c7e8:	4a10      	ldr	r2, [pc, #64]	; (800c82c <TIM_TI2_SetConfig+0x80>)
 800c7ea:	4013      	ands	r3, r2
 800c7ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800c7ee:	683b      	ldr	r3, [r7, #0]
 800c7f0:	031b      	lsls	r3, r3, #12
 800c7f2:	041b      	lsls	r3, r3, #16
 800c7f4:	0c1b      	lsrs	r3, r3, #16
 800c7f6:	697a      	ldr	r2, [r7, #20]
 800c7f8:	4313      	orrs	r3, r2
 800c7fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c7fc:	693b      	ldr	r3, [r7, #16]
 800c7fe:	22a0      	movs	r2, #160	; 0xa0
 800c800:	4393      	bics	r3, r2
 800c802:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800c804:	68bb      	ldr	r3, [r7, #8]
 800c806:	011b      	lsls	r3, r3, #4
 800c808:	22a0      	movs	r2, #160	; 0xa0
 800c80a:	4013      	ands	r3, r2
 800c80c:	693a      	ldr	r2, [r7, #16]
 800c80e:	4313      	orrs	r3, r2
 800c810:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	697a      	ldr	r2, [r7, #20]
 800c816:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	693a      	ldr	r2, [r7, #16]
 800c81c:	621a      	str	r2, [r3, #32]
}
 800c81e:	46c0      	nop			; (mov r8, r8)
 800c820:	46bd      	mov	sp, r7
 800c822:	b006      	add	sp, #24
 800c824:	bd80      	pop	{r7, pc}
 800c826:	46c0      	nop			; (mov r8, r8)
 800c828:	fffffcff 	.word	0xfffffcff
 800c82c:	ffff0fff 	.word	0xffff0fff

0800c830 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b086      	sub	sp, #24
 800c834:	af00      	add	r7, sp, #0
 800c836:	60f8      	str	r0, [r7, #12]
 800c838:	60b9      	str	r1, [r7, #8]
 800c83a:	607a      	str	r2, [r7, #4]
 800c83c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	6a1b      	ldr	r3, [r3, #32]
 800c842:	4a19      	ldr	r2, [pc, #100]	; (800c8a8 <TIM_TI3_SetConfig+0x78>)
 800c844:	401a      	ands	r2, r3
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	69db      	ldr	r3, [r3, #28]
 800c84e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	6a1b      	ldr	r3, [r3, #32]
 800c854:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800c856:	697b      	ldr	r3, [r7, #20]
 800c858:	2203      	movs	r2, #3
 800c85a:	4393      	bics	r3, r2
 800c85c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800c85e:	697a      	ldr	r2, [r7, #20]
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	4313      	orrs	r3, r2
 800c864:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800c866:	697b      	ldr	r3, [r7, #20]
 800c868:	22f0      	movs	r2, #240	; 0xf0
 800c86a:	4393      	bics	r3, r2
 800c86c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800c86e:	683b      	ldr	r3, [r7, #0]
 800c870:	011b      	lsls	r3, r3, #4
 800c872:	22ff      	movs	r2, #255	; 0xff
 800c874:	4013      	ands	r3, r2
 800c876:	697a      	ldr	r2, [r7, #20]
 800c878:	4313      	orrs	r3, r2
 800c87a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800c87c:	693b      	ldr	r3, [r7, #16]
 800c87e:	4a0b      	ldr	r2, [pc, #44]	; (800c8ac <TIM_TI3_SetConfig+0x7c>)
 800c880:	4013      	ands	r3, r2
 800c882:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800c884:	68bb      	ldr	r3, [r7, #8]
 800c886:	021a      	lsls	r2, r3, #8
 800c888:	23a0      	movs	r3, #160	; 0xa0
 800c88a:	011b      	lsls	r3, r3, #4
 800c88c:	4013      	ands	r3, r2
 800c88e:	693a      	ldr	r2, [r7, #16]
 800c890:	4313      	orrs	r3, r2
 800c892:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	697a      	ldr	r2, [r7, #20]
 800c898:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	693a      	ldr	r2, [r7, #16]
 800c89e:	621a      	str	r2, [r3, #32]
}
 800c8a0:	46c0      	nop			; (mov r8, r8)
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	b006      	add	sp, #24
 800c8a6:	bd80      	pop	{r7, pc}
 800c8a8:	fffffeff 	.word	0xfffffeff
 800c8ac:	fffff5ff 	.word	0xfffff5ff

0800c8b0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b086      	sub	sp, #24
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	60f8      	str	r0, [r7, #12]
 800c8b8:	60b9      	str	r1, [r7, #8]
 800c8ba:	607a      	str	r2, [r7, #4]
 800c8bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	6a1b      	ldr	r3, [r3, #32]
 800c8c2:	4a1a      	ldr	r2, [pc, #104]	; (800c92c <TIM_TI4_SetConfig+0x7c>)
 800c8c4:	401a      	ands	r2, r3
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	69db      	ldr	r3, [r3, #28]
 800c8ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	6a1b      	ldr	r3, [r3, #32]
 800c8d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800c8d6:	697b      	ldr	r3, [r7, #20]
 800c8d8:	4a15      	ldr	r2, [pc, #84]	; (800c930 <TIM_TI4_SetConfig+0x80>)
 800c8da:	4013      	ands	r3, r2
 800c8dc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	021b      	lsls	r3, r3, #8
 800c8e2:	697a      	ldr	r2, [r7, #20]
 800c8e4:	4313      	orrs	r3, r2
 800c8e6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800c8e8:	697b      	ldr	r3, [r7, #20]
 800c8ea:	4a12      	ldr	r2, [pc, #72]	; (800c934 <TIM_TI4_SetConfig+0x84>)
 800c8ec:	4013      	ands	r3, r2
 800c8ee:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	031b      	lsls	r3, r3, #12
 800c8f4:	041b      	lsls	r3, r3, #16
 800c8f6:	0c1b      	lsrs	r3, r3, #16
 800c8f8:	697a      	ldr	r2, [r7, #20]
 800c8fa:	4313      	orrs	r3, r2
 800c8fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800c8fe:	693b      	ldr	r3, [r7, #16]
 800c900:	4a0d      	ldr	r2, [pc, #52]	; (800c938 <TIM_TI4_SetConfig+0x88>)
 800c902:	4013      	ands	r3, r2
 800c904:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800c906:	68bb      	ldr	r3, [r7, #8]
 800c908:	031a      	lsls	r2, r3, #12
 800c90a:	23a0      	movs	r3, #160	; 0xa0
 800c90c:	021b      	lsls	r3, r3, #8
 800c90e:	4013      	ands	r3, r2
 800c910:	693a      	ldr	r2, [r7, #16]
 800c912:	4313      	orrs	r3, r2
 800c914:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	697a      	ldr	r2, [r7, #20]
 800c91a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	693a      	ldr	r2, [r7, #16]
 800c920:	621a      	str	r2, [r3, #32]
}
 800c922:	46c0      	nop			; (mov r8, r8)
 800c924:	46bd      	mov	sp, r7
 800c926:	b006      	add	sp, #24
 800c928:	bd80      	pop	{r7, pc}
 800c92a:	46c0      	nop			; (mov r8, r8)
 800c92c:	ffffefff 	.word	0xffffefff
 800c930:	fffffcff 	.word	0xfffffcff
 800c934:	ffff0fff 	.word	0xffff0fff
 800c938:	ffff5fff 	.word	0xffff5fff

0800c93c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b086      	sub	sp, #24
 800c940:	af00      	add	r7, sp, #0
 800c942:	60f8      	str	r0, [r7, #12]
 800c944:	60b9      	str	r1, [r7, #8]
 800c946:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c948:	68bb      	ldr	r3, [r7, #8]
 800c94a:	221f      	movs	r2, #31
 800c94c:	4013      	ands	r3, r2
 800c94e:	2201      	movs	r2, #1
 800c950:	409a      	lsls	r2, r3
 800c952:	0013      	movs	r3, r2
 800c954:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	6a1b      	ldr	r3, [r3, #32]
 800c95a:	697a      	ldr	r2, [r7, #20]
 800c95c:	43d2      	mvns	r2, r2
 800c95e:	401a      	ands	r2, r3
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	6a1a      	ldr	r2, [r3, #32]
 800c968:	68bb      	ldr	r3, [r7, #8]
 800c96a:	211f      	movs	r1, #31
 800c96c:	400b      	ands	r3, r1
 800c96e:	6879      	ldr	r1, [r7, #4]
 800c970:	4099      	lsls	r1, r3
 800c972:	000b      	movs	r3, r1
 800c974:	431a      	orrs	r2, r3
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	621a      	str	r2, [r3, #32]
}
 800c97a:	46c0      	nop			; (mov r8, r8)
 800c97c:	46bd      	mov	sp, r7
 800c97e:	b006      	add	sp, #24
 800c980:	bd80      	pop	{r7, pc}
	...

0800c984 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b084      	sub	sp, #16
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
 800c98c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	223c      	movs	r2, #60	; 0x3c
 800c992:	5c9b      	ldrb	r3, [r3, r2]
 800c994:	2b01      	cmp	r3, #1
 800c996:	d101      	bne.n	800c99c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c998:	2302      	movs	r3, #2
 800c99a:	e04f      	b.n	800ca3c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	223c      	movs	r2, #60	; 0x3c
 800c9a0:	2101      	movs	r1, #1
 800c9a2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	223d      	movs	r2, #61	; 0x3d
 800c9a8:	2102      	movs	r1, #2
 800c9aa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	685b      	ldr	r3, [r3, #4]
 800c9b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	689b      	ldr	r3, [r3, #8]
 800c9ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	4a20      	ldr	r2, [pc, #128]	; (800ca44 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800c9c2:	4293      	cmp	r3, r2
 800c9c4:	d108      	bne.n	800c9d8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	4a1f      	ldr	r2, [pc, #124]	; (800ca48 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800c9ca:	4013      	ands	r3, r2
 800c9cc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c9ce:	683b      	ldr	r3, [r7, #0]
 800c9d0:	685b      	ldr	r3, [r3, #4]
 800c9d2:	68fa      	ldr	r2, [r7, #12]
 800c9d4:	4313      	orrs	r3, r2
 800c9d6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	2270      	movs	r2, #112	; 0x70
 800c9dc:	4393      	bics	r3, r2
 800c9de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	68fa      	ldr	r2, [r7, #12]
 800c9e6:	4313      	orrs	r3, r2
 800c9e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	68fa      	ldr	r2, [r7, #12]
 800c9f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	4a13      	ldr	r2, [pc, #76]	; (800ca44 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800c9f8:	4293      	cmp	r3, r2
 800c9fa:	d009      	beq.n	800ca10 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	4a12      	ldr	r2, [pc, #72]	; (800ca4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800ca02:	4293      	cmp	r3, r2
 800ca04:	d004      	beq.n	800ca10 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	4a11      	ldr	r2, [pc, #68]	; (800ca50 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800ca0c:	4293      	cmp	r3, r2
 800ca0e:	d10c      	bne.n	800ca2a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ca10:	68bb      	ldr	r3, [r7, #8]
 800ca12:	2280      	movs	r2, #128	; 0x80
 800ca14:	4393      	bics	r3, r2
 800ca16:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	689b      	ldr	r3, [r3, #8]
 800ca1c:	68ba      	ldr	r2, [r7, #8]
 800ca1e:	4313      	orrs	r3, r2
 800ca20:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	68ba      	ldr	r2, [r7, #8]
 800ca28:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	223d      	movs	r2, #61	; 0x3d
 800ca2e:	2101      	movs	r1, #1
 800ca30:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	223c      	movs	r2, #60	; 0x3c
 800ca36:	2100      	movs	r1, #0
 800ca38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ca3a:	2300      	movs	r3, #0
}
 800ca3c:	0018      	movs	r0, r3
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	b004      	add	sp, #16
 800ca42:	bd80      	pop	{r7, pc}
 800ca44:	40012c00 	.word	0x40012c00
 800ca48:	ff0fffff 	.word	0xff0fffff
 800ca4c:	40000400 	.word	0x40000400
 800ca50:	40014000 	.word	0x40014000

0800ca54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b082      	sub	sp, #8
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ca5c:	46c0      	nop			; (mov r8, r8)
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	b002      	add	sp, #8
 800ca62:	bd80      	pop	{r7, pc}

0800ca64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b082      	sub	sp, #8
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ca6c:	46c0      	nop			; (mov r8, r8)
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	b002      	add	sp, #8
 800ca72:	bd80      	pop	{r7, pc}

0800ca74 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b082      	sub	sp, #8
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ca7c:	46c0      	nop			; (mov r8, r8)
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	b002      	add	sp, #8
 800ca82:	bd80      	pop	{r7, pc}

0800ca84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b082      	sub	sp, #8
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d101      	bne.n	800ca96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ca92:	2301      	movs	r3, #1
 800ca94:	e046      	b.n	800cb24 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	2288      	movs	r2, #136	; 0x88
 800ca9a:	589b      	ldr	r3, [r3, r2]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d107      	bne.n	800cab0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	2284      	movs	r2, #132	; 0x84
 800caa4:	2100      	movs	r1, #0
 800caa6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	0018      	movs	r0, r3
 800caac:	f7fb fb32 	bl	8008114 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2288      	movs	r2, #136	; 0x88
 800cab4:	2124      	movs	r1, #36	; 0x24
 800cab6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	681a      	ldr	r2, [r3, #0]
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	2101      	movs	r1, #1
 800cac4:	438a      	bics	r2, r1
 800cac6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	0018      	movs	r0, r3
 800cacc:	f000 fc5e 	bl	800d38c <UART_SetConfig>
 800cad0:	0003      	movs	r3, r0
 800cad2:	2b01      	cmp	r3, #1
 800cad4:	d101      	bne.n	800cada <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800cad6:	2301      	movs	r3, #1
 800cad8:	e024      	b.n	800cb24 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d003      	beq.n	800caea <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	0018      	movs	r0, r3
 800cae6:	f000 fdf5 	bl	800d6d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	685a      	ldr	r2, [r3, #4]
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	490d      	ldr	r1, [pc, #52]	; (800cb2c <HAL_UART_Init+0xa8>)
 800caf6:	400a      	ands	r2, r1
 800caf8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	689a      	ldr	r2, [r3, #8]
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	212a      	movs	r1, #42	; 0x2a
 800cb06:	438a      	bics	r2, r1
 800cb08:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	681a      	ldr	r2, [r3, #0]
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	2101      	movs	r1, #1
 800cb16:	430a      	orrs	r2, r1
 800cb18:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	0018      	movs	r0, r3
 800cb1e:	f000 fe8d 	bl	800d83c <UART_CheckIdleState>
 800cb22:	0003      	movs	r3, r0
}
 800cb24:	0018      	movs	r0, r3
 800cb26:	46bd      	mov	sp, r7
 800cb28:	b002      	add	sp, #8
 800cb2a:	bd80      	pop	{r7, pc}
 800cb2c:	ffffb7ff 	.word	0xffffb7ff

0800cb30 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b08a      	sub	sp, #40	; 0x28
 800cb34:	af02      	add	r7, sp, #8
 800cb36:	60f8      	str	r0, [r7, #12]
 800cb38:	60b9      	str	r1, [r7, #8]
 800cb3a:	603b      	str	r3, [r7, #0]
 800cb3c:	1dbb      	adds	r3, r7, #6
 800cb3e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	2288      	movs	r2, #136	; 0x88
 800cb44:	589b      	ldr	r3, [r3, r2]
 800cb46:	2b20      	cmp	r3, #32
 800cb48:	d000      	beq.n	800cb4c <HAL_UART_Transmit+0x1c>
 800cb4a:	e088      	b.n	800cc5e <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 800cb4c:	68bb      	ldr	r3, [r7, #8]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d003      	beq.n	800cb5a <HAL_UART_Transmit+0x2a>
 800cb52:	1dbb      	adds	r3, r7, #6
 800cb54:	881b      	ldrh	r3, [r3, #0]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d101      	bne.n	800cb5e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800cb5a:	2301      	movs	r3, #1
 800cb5c:	e080      	b.n	800cc60 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	689a      	ldr	r2, [r3, #8]
 800cb62:	2380      	movs	r3, #128	; 0x80
 800cb64:	015b      	lsls	r3, r3, #5
 800cb66:	429a      	cmp	r2, r3
 800cb68:	d109      	bne.n	800cb7e <HAL_UART_Transmit+0x4e>
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	691b      	ldr	r3, [r3, #16]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d105      	bne.n	800cb7e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800cb72:	68bb      	ldr	r3, [r7, #8]
 800cb74:	2201      	movs	r2, #1
 800cb76:	4013      	ands	r3, r2
 800cb78:	d001      	beq.n	800cb7e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800cb7a:	2301      	movs	r3, #1
 800cb7c:	e070      	b.n	800cc60 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	2290      	movs	r2, #144	; 0x90
 800cb82:	2100      	movs	r1, #0
 800cb84:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	2288      	movs	r2, #136	; 0x88
 800cb8a:	2121      	movs	r1, #33	; 0x21
 800cb8c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cb8e:	f7fc fb4b 	bl	8009228 <HAL_GetTick>
 800cb92:	0003      	movs	r3, r0
 800cb94:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	1dba      	adds	r2, r7, #6
 800cb9a:	2154      	movs	r1, #84	; 0x54
 800cb9c:	8812      	ldrh	r2, [r2, #0]
 800cb9e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	1dba      	adds	r2, r7, #6
 800cba4:	2156      	movs	r1, #86	; 0x56
 800cba6:	8812      	ldrh	r2, [r2, #0]
 800cba8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	689a      	ldr	r2, [r3, #8]
 800cbae:	2380      	movs	r3, #128	; 0x80
 800cbb0:	015b      	lsls	r3, r3, #5
 800cbb2:	429a      	cmp	r2, r3
 800cbb4:	d108      	bne.n	800cbc8 <HAL_UART_Transmit+0x98>
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	691b      	ldr	r3, [r3, #16]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d104      	bne.n	800cbc8 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cbc2:	68bb      	ldr	r3, [r7, #8]
 800cbc4:	61bb      	str	r3, [r7, #24]
 800cbc6:	e003      	b.n	800cbd0 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800cbc8:	68bb      	ldr	r3, [r7, #8]
 800cbca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cbcc:	2300      	movs	r3, #0
 800cbce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800cbd0:	e02c      	b.n	800cc2c <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cbd2:	697a      	ldr	r2, [r7, #20]
 800cbd4:	68f8      	ldr	r0, [r7, #12]
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	9300      	str	r3, [sp, #0]
 800cbda:	0013      	movs	r3, r2
 800cbdc:	2200      	movs	r2, #0
 800cbde:	2180      	movs	r1, #128	; 0x80
 800cbe0:	f000 fe7a 	bl	800d8d8 <UART_WaitOnFlagUntilTimeout>
 800cbe4:	1e03      	subs	r3, r0, #0
 800cbe6:	d001      	beq.n	800cbec <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 800cbe8:	2303      	movs	r3, #3
 800cbea:	e039      	b.n	800cc60 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 800cbec:	69fb      	ldr	r3, [r7, #28]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d10b      	bne.n	800cc0a <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cbf2:	69bb      	ldr	r3, [r7, #24]
 800cbf4:	881b      	ldrh	r3, [r3, #0]
 800cbf6:	001a      	movs	r2, r3
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	05d2      	lsls	r2, r2, #23
 800cbfe:	0dd2      	lsrs	r2, r2, #23
 800cc00:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800cc02:	69bb      	ldr	r3, [r7, #24]
 800cc04:	3302      	adds	r3, #2
 800cc06:	61bb      	str	r3, [r7, #24]
 800cc08:	e007      	b.n	800cc1a <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800cc0a:	69fb      	ldr	r3, [r7, #28]
 800cc0c:	781a      	ldrb	r2, [r3, #0]
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800cc14:	69fb      	ldr	r3, [r7, #28]
 800cc16:	3301      	adds	r3, #1
 800cc18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	2256      	movs	r2, #86	; 0x56
 800cc1e:	5a9b      	ldrh	r3, [r3, r2]
 800cc20:	b29b      	uxth	r3, r3
 800cc22:	3b01      	subs	r3, #1
 800cc24:	b299      	uxth	r1, r3
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	2256      	movs	r2, #86	; 0x56
 800cc2a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	2256      	movs	r2, #86	; 0x56
 800cc30:	5a9b      	ldrh	r3, [r3, r2]
 800cc32:	b29b      	uxth	r3, r3
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d1cc      	bne.n	800cbd2 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cc38:	697a      	ldr	r2, [r7, #20]
 800cc3a:	68f8      	ldr	r0, [r7, #12]
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	9300      	str	r3, [sp, #0]
 800cc40:	0013      	movs	r3, r2
 800cc42:	2200      	movs	r2, #0
 800cc44:	2140      	movs	r1, #64	; 0x40
 800cc46:	f000 fe47 	bl	800d8d8 <UART_WaitOnFlagUntilTimeout>
 800cc4a:	1e03      	subs	r3, r0, #0
 800cc4c:	d001      	beq.n	800cc52 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 800cc4e:	2303      	movs	r3, #3
 800cc50:	e006      	b.n	800cc60 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	2288      	movs	r2, #136	; 0x88
 800cc56:	2120      	movs	r1, #32
 800cc58:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	e000      	b.n	800cc60 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 800cc5e:	2302      	movs	r3, #2
  }
}
 800cc60:	0018      	movs	r0, r3
 800cc62:	46bd      	mov	sp, r7
 800cc64:	b008      	add	sp, #32
 800cc66:	bd80      	pop	{r7, pc}

0800cc68 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b088      	sub	sp, #32
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	60f8      	str	r0, [r7, #12]
 800cc70:	60b9      	str	r1, [r7, #8]
 800cc72:	1dbb      	adds	r3, r7, #6
 800cc74:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	228c      	movs	r2, #140	; 0x8c
 800cc7a:	589b      	ldr	r3, [r3, r2]
 800cc7c:	2b20      	cmp	r3, #32
 800cc7e:	d145      	bne.n	800cd0c <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 800cc80:	68bb      	ldr	r3, [r7, #8]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d003      	beq.n	800cc8e <HAL_UART_Receive_IT+0x26>
 800cc86:	1dbb      	adds	r3, r7, #6
 800cc88:	881b      	ldrh	r3, [r3, #0]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d101      	bne.n	800cc92 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800cc8e:	2301      	movs	r3, #1
 800cc90:	e03d      	b.n	800cd0e <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	689a      	ldr	r2, [r3, #8]
 800cc96:	2380      	movs	r3, #128	; 0x80
 800cc98:	015b      	lsls	r3, r3, #5
 800cc9a:	429a      	cmp	r2, r3
 800cc9c:	d109      	bne.n	800ccb2 <HAL_UART_Receive_IT+0x4a>
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	691b      	ldr	r3, [r3, #16]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d105      	bne.n	800ccb2 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800cca6:	68bb      	ldr	r3, [r7, #8]
 800cca8:	2201      	movs	r2, #1
 800ccaa:	4013      	ands	r3, r2
 800ccac:	d001      	beq.n	800ccb2 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800ccae:	2301      	movs	r3, #1
 800ccb0:	e02d      	b.n	800cd0e <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	685a      	ldr	r2, [r3, #4]
 800ccbe:	2380      	movs	r3, #128	; 0x80
 800ccc0:	041b      	lsls	r3, r3, #16
 800ccc2:	4013      	ands	r3, r2
 800ccc4:	d019      	beq.n	800ccfa <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ccc6:	f3ef 8310 	mrs	r3, PRIMASK
 800ccca:	613b      	str	r3, [r7, #16]
  return(result);
 800cccc:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ccce:	61fb      	str	r3, [r7, #28]
 800ccd0:	2301      	movs	r3, #1
 800ccd2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ccd4:	697b      	ldr	r3, [r7, #20]
 800ccd6:	f383 8810 	msr	PRIMASK, r3
}
 800ccda:	46c0      	nop			; (mov r8, r8)
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	681a      	ldr	r2, [r3, #0]
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	2180      	movs	r1, #128	; 0x80
 800cce8:	04c9      	lsls	r1, r1, #19
 800ccea:	430a      	orrs	r2, r1
 800ccec:	601a      	str	r2, [r3, #0]
 800ccee:	69fb      	ldr	r3, [r7, #28]
 800ccf0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ccf2:	69bb      	ldr	r3, [r7, #24]
 800ccf4:	f383 8810 	msr	PRIMASK, r3
}
 800ccf8:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ccfa:	1dbb      	adds	r3, r7, #6
 800ccfc:	881a      	ldrh	r2, [r3, #0]
 800ccfe:	68b9      	ldr	r1, [r7, #8]
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	0018      	movs	r0, r3
 800cd04:	f000 feb0 	bl	800da68 <UART_Start_Receive_IT>
 800cd08:	0003      	movs	r3, r0
 800cd0a:	e000      	b.n	800cd0e <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 800cd0c:	2302      	movs	r3, #2
  }
}
 800cd0e:	0018      	movs	r0, r3
 800cd10:	46bd      	mov	sp, r7
 800cd12:	b008      	add	sp, #32
 800cd14:	bd80      	pop	{r7, pc}
	...

0800cd18 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cd18:	b5b0      	push	{r4, r5, r7, lr}
 800cd1a:	b0aa      	sub	sp, #168	; 0xa8
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	69db      	ldr	r3, [r3, #28]
 800cd26:	22a4      	movs	r2, #164	; 0xa4
 800cd28:	18b9      	adds	r1, r7, r2
 800cd2a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	20a0      	movs	r0, #160	; 0xa0
 800cd34:	1839      	adds	r1, r7, r0
 800cd36:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	689b      	ldr	r3, [r3, #8]
 800cd3e:	249c      	movs	r4, #156	; 0x9c
 800cd40:	1939      	adds	r1, r7, r4
 800cd42:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800cd44:	0011      	movs	r1, r2
 800cd46:	18bb      	adds	r3, r7, r2
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	4aa2      	ldr	r2, [pc, #648]	; (800cfd4 <HAL_UART_IRQHandler+0x2bc>)
 800cd4c:	4013      	ands	r3, r2
 800cd4e:	2298      	movs	r2, #152	; 0x98
 800cd50:	18bd      	adds	r5, r7, r2
 800cd52:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800cd54:	18bb      	adds	r3, r7, r2
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d11a      	bne.n	800cd92 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cd5c:	187b      	adds	r3, r7, r1
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	2220      	movs	r2, #32
 800cd62:	4013      	ands	r3, r2
 800cd64:	d015      	beq.n	800cd92 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cd66:	183b      	adds	r3, r7, r0
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	2220      	movs	r2, #32
 800cd6c:	4013      	ands	r3, r2
 800cd6e:	d105      	bne.n	800cd7c <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cd70:	193b      	adds	r3, r7, r4
 800cd72:	681a      	ldr	r2, [r3, #0]
 800cd74:	2380      	movs	r3, #128	; 0x80
 800cd76:	055b      	lsls	r3, r3, #21
 800cd78:	4013      	ands	r3, r2
 800cd7a:	d00a      	beq.n	800cd92 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d100      	bne.n	800cd86 <HAL_UART_IRQHandler+0x6e>
 800cd84:	e2dc      	b.n	800d340 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd8a:	687a      	ldr	r2, [r7, #4]
 800cd8c:	0010      	movs	r0, r2
 800cd8e:	4798      	blx	r3
      }
      return;
 800cd90:	e2d6      	b.n	800d340 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800cd92:	2398      	movs	r3, #152	; 0x98
 800cd94:	18fb      	adds	r3, r7, r3
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d100      	bne.n	800cd9e <HAL_UART_IRQHandler+0x86>
 800cd9c:	e122      	b.n	800cfe4 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800cd9e:	239c      	movs	r3, #156	; 0x9c
 800cda0:	18fb      	adds	r3, r7, r3
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	4a8c      	ldr	r2, [pc, #560]	; (800cfd8 <HAL_UART_IRQHandler+0x2c0>)
 800cda6:	4013      	ands	r3, r2
 800cda8:	d106      	bne.n	800cdb8 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800cdaa:	23a0      	movs	r3, #160	; 0xa0
 800cdac:	18fb      	adds	r3, r7, r3
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	4a8a      	ldr	r2, [pc, #552]	; (800cfdc <HAL_UART_IRQHandler+0x2c4>)
 800cdb2:	4013      	ands	r3, r2
 800cdb4:	d100      	bne.n	800cdb8 <HAL_UART_IRQHandler+0xa0>
 800cdb6:	e115      	b.n	800cfe4 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cdb8:	23a4      	movs	r3, #164	; 0xa4
 800cdba:	18fb      	adds	r3, r7, r3
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	2201      	movs	r2, #1
 800cdc0:	4013      	ands	r3, r2
 800cdc2:	d012      	beq.n	800cdea <HAL_UART_IRQHandler+0xd2>
 800cdc4:	23a0      	movs	r3, #160	; 0xa0
 800cdc6:	18fb      	adds	r3, r7, r3
 800cdc8:	681a      	ldr	r2, [r3, #0]
 800cdca:	2380      	movs	r3, #128	; 0x80
 800cdcc:	005b      	lsls	r3, r3, #1
 800cdce:	4013      	ands	r3, r2
 800cdd0:	d00b      	beq.n	800cdea <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	2201      	movs	r2, #1
 800cdd8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	2290      	movs	r2, #144	; 0x90
 800cdde:	589b      	ldr	r3, [r3, r2]
 800cde0:	2201      	movs	r2, #1
 800cde2:	431a      	orrs	r2, r3
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2190      	movs	r1, #144	; 0x90
 800cde8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cdea:	23a4      	movs	r3, #164	; 0xa4
 800cdec:	18fb      	adds	r3, r7, r3
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	2202      	movs	r2, #2
 800cdf2:	4013      	ands	r3, r2
 800cdf4:	d011      	beq.n	800ce1a <HAL_UART_IRQHandler+0x102>
 800cdf6:	239c      	movs	r3, #156	; 0x9c
 800cdf8:	18fb      	adds	r3, r7, r3
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	2201      	movs	r2, #1
 800cdfe:	4013      	ands	r3, r2
 800ce00:	d00b      	beq.n	800ce1a <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	2202      	movs	r2, #2
 800ce08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	2290      	movs	r2, #144	; 0x90
 800ce0e:	589b      	ldr	r3, [r3, r2]
 800ce10:	2204      	movs	r2, #4
 800ce12:	431a      	orrs	r2, r3
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2190      	movs	r1, #144	; 0x90
 800ce18:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ce1a:	23a4      	movs	r3, #164	; 0xa4
 800ce1c:	18fb      	adds	r3, r7, r3
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	2204      	movs	r2, #4
 800ce22:	4013      	ands	r3, r2
 800ce24:	d011      	beq.n	800ce4a <HAL_UART_IRQHandler+0x132>
 800ce26:	239c      	movs	r3, #156	; 0x9c
 800ce28:	18fb      	adds	r3, r7, r3
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	2201      	movs	r2, #1
 800ce2e:	4013      	ands	r3, r2
 800ce30:	d00b      	beq.n	800ce4a <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	2204      	movs	r2, #4
 800ce38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	2290      	movs	r2, #144	; 0x90
 800ce3e:	589b      	ldr	r3, [r3, r2]
 800ce40:	2202      	movs	r2, #2
 800ce42:	431a      	orrs	r2, r3
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2190      	movs	r1, #144	; 0x90
 800ce48:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ce4a:	23a4      	movs	r3, #164	; 0xa4
 800ce4c:	18fb      	adds	r3, r7, r3
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	2208      	movs	r2, #8
 800ce52:	4013      	ands	r3, r2
 800ce54:	d017      	beq.n	800ce86 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ce56:	23a0      	movs	r3, #160	; 0xa0
 800ce58:	18fb      	adds	r3, r7, r3
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	2220      	movs	r2, #32
 800ce5e:	4013      	ands	r3, r2
 800ce60:	d105      	bne.n	800ce6e <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ce62:	239c      	movs	r3, #156	; 0x9c
 800ce64:	18fb      	adds	r3, r7, r3
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	4a5b      	ldr	r2, [pc, #364]	; (800cfd8 <HAL_UART_IRQHandler+0x2c0>)
 800ce6a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ce6c:	d00b      	beq.n	800ce86 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	2208      	movs	r2, #8
 800ce74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	2290      	movs	r2, #144	; 0x90
 800ce7a:	589b      	ldr	r3, [r3, r2]
 800ce7c:	2208      	movs	r2, #8
 800ce7e:	431a      	orrs	r2, r3
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	2190      	movs	r1, #144	; 0x90
 800ce84:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ce86:	23a4      	movs	r3, #164	; 0xa4
 800ce88:	18fb      	adds	r3, r7, r3
 800ce8a:	681a      	ldr	r2, [r3, #0]
 800ce8c:	2380      	movs	r3, #128	; 0x80
 800ce8e:	011b      	lsls	r3, r3, #4
 800ce90:	4013      	ands	r3, r2
 800ce92:	d013      	beq.n	800cebc <HAL_UART_IRQHandler+0x1a4>
 800ce94:	23a0      	movs	r3, #160	; 0xa0
 800ce96:	18fb      	adds	r3, r7, r3
 800ce98:	681a      	ldr	r2, [r3, #0]
 800ce9a:	2380      	movs	r3, #128	; 0x80
 800ce9c:	04db      	lsls	r3, r3, #19
 800ce9e:	4013      	ands	r3, r2
 800cea0:	d00c      	beq.n	800cebc <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	2280      	movs	r2, #128	; 0x80
 800cea8:	0112      	lsls	r2, r2, #4
 800ceaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	2290      	movs	r2, #144	; 0x90
 800ceb0:	589b      	ldr	r3, [r3, r2]
 800ceb2:	2220      	movs	r2, #32
 800ceb4:	431a      	orrs	r2, r3
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	2190      	movs	r1, #144	; 0x90
 800ceba:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2290      	movs	r2, #144	; 0x90
 800cec0:	589b      	ldr	r3, [r3, r2]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d100      	bne.n	800cec8 <HAL_UART_IRQHandler+0x1b0>
 800cec6:	e23d      	b.n	800d344 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cec8:	23a4      	movs	r3, #164	; 0xa4
 800ceca:	18fb      	adds	r3, r7, r3
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	2220      	movs	r2, #32
 800ced0:	4013      	ands	r3, r2
 800ced2:	d015      	beq.n	800cf00 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ced4:	23a0      	movs	r3, #160	; 0xa0
 800ced6:	18fb      	adds	r3, r7, r3
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	2220      	movs	r2, #32
 800cedc:	4013      	ands	r3, r2
 800cede:	d106      	bne.n	800ceee <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cee0:	239c      	movs	r3, #156	; 0x9c
 800cee2:	18fb      	adds	r3, r7, r3
 800cee4:	681a      	ldr	r2, [r3, #0]
 800cee6:	2380      	movs	r3, #128	; 0x80
 800cee8:	055b      	lsls	r3, r3, #21
 800ceea:	4013      	ands	r3, r2
 800ceec:	d008      	beq.n	800cf00 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d004      	beq.n	800cf00 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cefa:	687a      	ldr	r2, [r7, #4]
 800cefc:	0010      	movs	r0, r2
 800cefe:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	2290      	movs	r2, #144	; 0x90
 800cf04:	589b      	ldr	r3, [r3, r2]
 800cf06:	2194      	movs	r1, #148	; 0x94
 800cf08:	187a      	adds	r2, r7, r1
 800cf0a:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	689b      	ldr	r3, [r3, #8]
 800cf12:	2240      	movs	r2, #64	; 0x40
 800cf14:	4013      	ands	r3, r2
 800cf16:	2b40      	cmp	r3, #64	; 0x40
 800cf18:	d004      	beq.n	800cf24 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800cf1a:	187b      	adds	r3, r7, r1
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	2228      	movs	r2, #40	; 0x28
 800cf20:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cf22:	d04c      	beq.n	800cfbe <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	0018      	movs	r0, r3
 800cf28:	f000 fec2 	bl	800dcb0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	689b      	ldr	r3, [r3, #8]
 800cf32:	2240      	movs	r2, #64	; 0x40
 800cf34:	4013      	ands	r3, r2
 800cf36:	2b40      	cmp	r3, #64	; 0x40
 800cf38:	d13c      	bne.n	800cfb4 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf3a:	f3ef 8310 	mrs	r3, PRIMASK
 800cf3e:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800cf40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cf42:	2090      	movs	r0, #144	; 0x90
 800cf44:	183a      	adds	r2, r7, r0
 800cf46:	6013      	str	r3, [r2, #0]
 800cf48:	2301      	movs	r3, #1
 800cf4a:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cf4e:	f383 8810 	msr	PRIMASK, r3
}
 800cf52:	46c0      	nop			; (mov r8, r8)
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	689a      	ldr	r2, [r3, #8]
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	2140      	movs	r1, #64	; 0x40
 800cf60:	438a      	bics	r2, r1
 800cf62:	609a      	str	r2, [r3, #8]
 800cf64:	183b      	adds	r3, r7, r0
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cf6c:	f383 8810 	msr	PRIMASK, r3
}
 800cf70:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	2280      	movs	r2, #128	; 0x80
 800cf76:	589b      	ldr	r3, [r3, r2]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d016      	beq.n	800cfaa <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	2280      	movs	r2, #128	; 0x80
 800cf80:	589b      	ldr	r3, [r3, r2]
 800cf82:	4a17      	ldr	r2, [pc, #92]	; (800cfe0 <HAL_UART_IRQHandler+0x2c8>)
 800cf84:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	2280      	movs	r2, #128	; 0x80
 800cf8a:	589b      	ldr	r3, [r3, r2]
 800cf8c:	0018      	movs	r0, r3
 800cf8e:	f7fc fbc9 	bl	8009724 <HAL_DMA_Abort_IT>
 800cf92:	1e03      	subs	r3, r0, #0
 800cf94:	d01c      	beq.n	800cfd0 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	2280      	movs	r2, #128	; 0x80
 800cf9a:	589b      	ldr	r3, [r3, r2]
 800cf9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf9e:	687a      	ldr	r2, [r7, #4]
 800cfa0:	2180      	movs	r1, #128	; 0x80
 800cfa2:	5852      	ldr	r2, [r2, r1]
 800cfa4:	0010      	movs	r0, r2
 800cfa6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cfa8:	e012      	b.n	800cfd0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	0018      	movs	r0, r3
 800cfae:	f7f7 fe8d 	bl	8004ccc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cfb2:	e00d      	b.n	800cfd0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	0018      	movs	r0, r3
 800cfb8:	f7f7 fe88 	bl	8004ccc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cfbc:	e008      	b.n	800cfd0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	0018      	movs	r0, r3
 800cfc2:	f7f7 fe83 	bl	8004ccc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	2290      	movs	r2, #144	; 0x90
 800cfca:	2100      	movs	r1, #0
 800cfcc:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800cfce:	e1b9      	b.n	800d344 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cfd0:	46c0      	nop			; (mov r8, r8)
    return;
 800cfd2:	e1b7      	b.n	800d344 <HAL_UART_IRQHandler+0x62c>
 800cfd4:	0000080f 	.word	0x0000080f
 800cfd8:	10000001 	.word	0x10000001
 800cfdc:	04000120 	.word	0x04000120
 800cfe0:	0800dd7d 	.word	0x0800dd7d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cfe8:	2b01      	cmp	r3, #1
 800cfea:	d000      	beq.n	800cfee <HAL_UART_IRQHandler+0x2d6>
 800cfec:	e13e      	b.n	800d26c <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800cfee:	23a4      	movs	r3, #164	; 0xa4
 800cff0:	18fb      	adds	r3, r7, r3
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	2210      	movs	r2, #16
 800cff6:	4013      	ands	r3, r2
 800cff8:	d100      	bne.n	800cffc <HAL_UART_IRQHandler+0x2e4>
 800cffa:	e137      	b.n	800d26c <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800cffc:	23a0      	movs	r3, #160	; 0xa0
 800cffe:	18fb      	adds	r3, r7, r3
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	2210      	movs	r2, #16
 800d004:	4013      	ands	r3, r2
 800d006:	d100      	bne.n	800d00a <HAL_UART_IRQHandler+0x2f2>
 800d008:	e130      	b.n	800d26c <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	2210      	movs	r2, #16
 800d010:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	689b      	ldr	r3, [r3, #8]
 800d018:	2240      	movs	r2, #64	; 0x40
 800d01a:	4013      	ands	r3, r2
 800d01c:	2b40      	cmp	r3, #64	; 0x40
 800d01e:	d000      	beq.n	800d022 <HAL_UART_IRQHandler+0x30a>
 800d020:	e0a4      	b.n	800d16c <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	2280      	movs	r2, #128	; 0x80
 800d026:	589b      	ldr	r3, [r3, r2]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	685a      	ldr	r2, [r3, #4]
 800d02c:	217e      	movs	r1, #126	; 0x7e
 800d02e:	187b      	adds	r3, r7, r1
 800d030:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800d032:	187b      	adds	r3, r7, r1
 800d034:	881b      	ldrh	r3, [r3, #0]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d100      	bne.n	800d03c <HAL_UART_IRQHandler+0x324>
 800d03a:	e185      	b.n	800d348 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	225c      	movs	r2, #92	; 0x5c
 800d040:	5a9b      	ldrh	r3, [r3, r2]
 800d042:	187a      	adds	r2, r7, r1
 800d044:	8812      	ldrh	r2, [r2, #0]
 800d046:	429a      	cmp	r2, r3
 800d048:	d300      	bcc.n	800d04c <HAL_UART_IRQHandler+0x334>
 800d04a:	e17d      	b.n	800d348 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	187a      	adds	r2, r7, r1
 800d050:	215e      	movs	r1, #94	; 0x5e
 800d052:	8812      	ldrh	r2, [r2, #0]
 800d054:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	2280      	movs	r2, #128	; 0x80
 800d05a:	589b      	ldr	r3, [r3, r2]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	2220      	movs	r2, #32
 800d062:	4013      	ands	r3, r2
 800d064:	d170      	bne.n	800d148 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d066:	f3ef 8310 	mrs	r3, PRIMASK
 800d06a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800d06c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d06e:	67bb      	str	r3, [r7, #120]	; 0x78
 800d070:	2301      	movs	r3, #1
 800d072:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d076:	f383 8810 	msr	PRIMASK, r3
}
 800d07a:	46c0      	nop			; (mov r8, r8)
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	681a      	ldr	r2, [r3, #0]
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	49b4      	ldr	r1, [pc, #720]	; (800d358 <HAL_UART_IRQHandler+0x640>)
 800d088:	400a      	ands	r2, r1
 800d08a:	601a      	str	r2, [r3, #0]
 800d08c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d08e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d092:	f383 8810 	msr	PRIMASK, r3
}
 800d096:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d098:	f3ef 8310 	mrs	r3, PRIMASK
 800d09c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800d09e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d0a0:	677b      	str	r3, [r7, #116]	; 0x74
 800d0a2:	2301      	movs	r3, #1
 800d0a4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d0a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0a8:	f383 8810 	msr	PRIMASK, r3
}
 800d0ac:	46c0      	nop			; (mov r8, r8)
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	689a      	ldr	r2, [r3, #8]
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	2101      	movs	r1, #1
 800d0ba:	438a      	bics	r2, r1
 800d0bc:	609a      	str	r2, [r3, #8]
 800d0be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d0c0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d0c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d0c4:	f383 8810 	msr	PRIMASK, r3
}
 800d0c8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d0ca:	f3ef 8310 	mrs	r3, PRIMASK
 800d0ce:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800d0d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d0d2:	673b      	str	r3, [r7, #112]	; 0x70
 800d0d4:	2301      	movs	r3, #1
 800d0d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d0d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d0da:	f383 8810 	msr	PRIMASK, r3
}
 800d0de:	46c0      	nop			; (mov r8, r8)
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	689a      	ldr	r2, [r3, #8]
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	2140      	movs	r1, #64	; 0x40
 800d0ec:	438a      	bics	r2, r1
 800d0ee:	609a      	str	r2, [r3, #8]
 800d0f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d0f2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d0f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0f6:	f383 8810 	msr	PRIMASK, r3
}
 800d0fa:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	228c      	movs	r2, #140	; 0x8c
 800d100:	2120      	movs	r1, #32
 800d102:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2200      	movs	r2, #0
 800d108:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d10a:	f3ef 8310 	mrs	r3, PRIMASK
 800d10e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800d110:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d112:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d114:	2301      	movs	r3, #1
 800d116:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d118:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d11a:	f383 8810 	msr	PRIMASK, r3
}
 800d11e:	46c0      	nop			; (mov r8, r8)
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	681a      	ldr	r2, [r3, #0]
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	2110      	movs	r1, #16
 800d12c:	438a      	bics	r2, r1
 800d12e:	601a      	str	r2, [r3, #0]
 800d130:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d132:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d134:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d136:	f383 8810 	msr	PRIMASK, r3
}
 800d13a:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2280      	movs	r2, #128	; 0x80
 800d140:	589b      	ldr	r3, [r3, r2]
 800d142:	0018      	movs	r0, r3
 800d144:	f7fc fa8c 	bl	8009660 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	2202      	movs	r2, #2
 800d14c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	225c      	movs	r2, #92	; 0x5c
 800d152:	5a9a      	ldrh	r2, [r3, r2]
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	215e      	movs	r1, #94	; 0x5e
 800d158:	5a5b      	ldrh	r3, [r3, r1]
 800d15a:	b29b      	uxth	r3, r3
 800d15c:	1ad3      	subs	r3, r2, r3
 800d15e:	b29a      	uxth	r2, r3
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	0011      	movs	r1, r2
 800d164:	0018      	movs	r0, r3
 800d166:	f000 f905 	bl	800d374 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d16a:	e0ed      	b.n	800d348 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	225c      	movs	r2, #92	; 0x5c
 800d170:	5a99      	ldrh	r1, [r3, r2]
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	225e      	movs	r2, #94	; 0x5e
 800d176:	5a9b      	ldrh	r3, [r3, r2]
 800d178:	b29a      	uxth	r2, r3
 800d17a:	208e      	movs	r0, #142	; 0x8e
 800d17c:	183b      	adds	r3, r7, r0
 800d17e:	1a8a      	subs	r2, r1, r2
 800d180:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	225e      	movs	r2, #94	; 0x5e
 800d186:	5a9b      	ldrh	r3, [r3, r2]
 800d188:	b29b      	uxth	r3, r3
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d100      	bne.n	800d190 <HAL_UART_IRQHandler+0x478>
 800d18e:	e0dd      	b.n	800d34c <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 800d190:	183b      	adds	r3, r7, r0
 800d192:	881b      	ldrh	r3, [r3, #0]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d100      	bne.n	800d19a <HAL_UART_IRQHandler+0x482>
 800d198:	e0d8      	b.n	800d34c <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d19a:	f3ef 8310 	mrs	r3, PRIMASK
 800d19e:	60fb      	str	r3, [r7, #12]
  return(result);
 800d1a0:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d1a2:	2488      	movs	r4, #136	; 0x88
 800d1a4:	193a      	adds	r2, r7, r4
 800d1a6:	6013      	str	r3, [r2, #0]
 800d1a8:	2301      	movs	r3, #1
 800d1aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d1ac:	693b      	ldr	r3, [r7, #16]
 800d1ae:	f383 8810 	msr	PRIMASK, r3
}
 800d1b2:	46c0      	nop			; (mov r8, r8)
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	681a      	ldr	r2, [r3, #0]
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	4967      	ldr	r1, [pc, #412]	; (800d35c <HAL_UART_IRQHandler+0x644>)
 800d1c0:	400a      	ands	r2, r1
 800d1c2:	601a      	str	r2, [r3, #0]
 800d1c4:	193b      	adds	r3, r7, r4
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d1ca:	697b      	ldr	r3, [r7, #20]
 800d1cc:	f383 8810 	msr	PRIMASK, r3
}
 800d1d0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d1d2:	f3ef 8310 	mrs	r3, PRIMASK
 800d1d6:	61bb      	str	r3, [r7, #24]
  return(result);
 800d1d8:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d1da:	2484      	movs	r4, #132	; 0x84
 800d1dc:	193a      	adds	r2, r7, r4
 800d1de:	6013      	str	r3, [r2, #0]
 800d1e0:	2301      	movs	r3, #1
 800d1e2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d1e4:	69fb      	ldr	r3, [r7, #28]
 800d1e6:	f383 8810 	msr	PRIMASK, r3
}
 800d1ea:	46c0      	nop			; (mov r8, r8)
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	689a      	ldr	r2, [r3, #8]
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	495a      	ldr	r1, [pc, #360]	; (800d360 <HAL_UART_IRQHandler+0x648>)
 800d1f8:	400a      	ands	r2, r1
 800d1fa:	609a      	str	r2, [r3, #8]
 800d1fc:	193b      	adds	r3, r7, r4
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d202:	6a3b      	ldr	r3, [r7, #32]
 800d204:	f383 8810 	msr	PRIMASK, r3
}
 800d208:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	228c      	movs	r2, #140	; 0x8c
 800d20e:	2120      	movs	r1, #32
 800d210:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	2200      	movs	r2, #0
 800d216:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	2200      	movs	r2, #0
 800d21c:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d21e:	f3ef 8310 	mrs	r3, PRIMASK
 800d222:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800d224:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d226:	2480      	movs	r4, #128	; 0x80
 800d228:	193a      	adds	r2, r7, r4
 800d22a:	6013      	str	r3, [r2, #0]
 800d22c:	2301      	movs	r3, #1
 800d22e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d232:	f383 8810 	msr	PRIMASK, r3
}
 800d236:	46c0      	nop			; (mov r8, r8)
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	681a      	ldr	r2, [r3, #0]
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	2110      	movs	r1, #16
 800d244:	438a      	bics	r2, r1
 800d246:	601a      	str	r2, [r3, #0]
 800d248:	193b      	adds	r3, r7, r4
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d24e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d250:	f383 8810 	msr	PRIMASK, r3
}
 800d254:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	2202      	movs	r2, #2
 800d25a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d25c:	183b      	adds	r3, r7, r0
 800d25e:	881a      	ldrh	r2, [r3, #0]
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	0011      	movs	r1, r2
 800d264:	0018      	movs	r0, r3
 800d266:	f000 f885 	bl	800d374 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d26a:	e06f      	b.n	800d34c <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d26c:	23a4      	movs	r3, #164	; 0xa4
 800d26e:	18fb      	adds	r3, r7, r3
 800d270:	681a      	ldr	r2, [r3, #0]
 800d272:	2380      	movs	r3, #128	; 0x80
 800d274:	035b      	lsls	r3, r3, #13
 800d276:	4013      	ands	r3, r2
 800d278:	d010      	beq.n	800d29c <HAL_UART_IRQHandler+0x584>
 800d27a:	239c      	movs	r3, #156	; 0x9c
 800d27c:	18fb      	adds	r3, r7, r3
 800d27e:	681a      	ldr	r2, [r3, #0]
 800d280:	2380      	movs	r3, #128	; 0x80
 800d282:	03db      	lsls	r3, r3, #15
 800d284:	4013      	ands	r3, r2
 800d286:	d009      	beq.n	800d29c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	2280      	movs	r2, #128	; 0x80
 800d28e:	0352      	lsls	r2, r2, #13
 800d290:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	0018      	movs	r0, r3
 800d296:	f001 fa15 	bl	800e6c4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d29a:	e05a      	b.n	800d352 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d29c:	23a4      	movs	r3, #164	; 0xa4
 800d29e:	18fb      	adds	r3, r7, r3
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	2280      	movs	r2, #128	; 0x80
 800d2a4:	4013      	ands	r3, r2
 800d2a6:	d016      	beq.n	800d2d6 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d2a8:	23a0      	movs	r3, #160	; 0xa0
 800d2aa:	18fb      	adds	r3, r7, r3
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	2280      	movs	r2, #128	; 0x80
 800d2b0:	4013      	ands	r3, r2
 800d2b2:	d106      	bne.n	800d2c2 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d2b4:	239c      	movs	r3, #156	; 0x9c
 800d2b6:	18fb      	adds	r3, r7, r3
 800d2b8:	681a      	ldr	r2, [r3, #0]
 800d2ba:	2380      	movs	r3, #128	; 0x80
 800d2bc:	041b      	lsls	r3, r3, #16
 800d2be:	4013      	ands	r3, r2
 800d2c0:	d009      	beq.n	800d2d6 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d042      	beq.n	800d350 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d2ce:	687a      	ldr	r2, [r7, #4]
 800d2d0:	0010      	movs	r0, r2
 800d2d2:	4798      	blx	r3
    }
    return;
 800d2d4:	e03c      	b.n	800d350 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d2d6:	23a4      	movs	r3, #164	; 0xa4
 800d2d8:	18fb      	adds	r3, r7, r3
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	2240      	movs	r2, #64	; 0x40
 800d2de:	4013      	ands	r3, r2
 800d2e0:	d00a      	beq.n	800d2f8 <HAL_UART_IRQHandler+0x5e0>
 800d2e2:	23a0      	movs	r3, #160	; 0xa0
 800d2e4:	18fb      	adds	r3, r7, r3
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	2240      	movs	r2, #64	; 0x40
 800d2ea:	4013      	ands	r3, r2
 800d2ec:	d004      	beq.n	800d2f8 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	0018      	movs	r0, r3
 800d2f2:	f000 fd5a 	bl	800ddaa <UART_EndTransmit_IT>
    return;
 800d2f6:	e02c      	b.n	800d352 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d2f8:	23a4      	movs	r3, #164	; 0xa4
 800d2fa:	18fb      	adds	r3, r7, r3
 800d2fc:	681a      	ldr	r2, [r3, #0]
 800d2fe:	2380      	movs	r3, #128	; 0x80
 800d300:	041b      	lsls	r3, r3, #16
 800d302:	4013      	ands	r3, r2
 800d304:	d00b      	beq.n	800d31e <HAL_UART_IRQHandler+0x606>
 800d306:	23a0      	movs	r3, #160	; 0xa0
 800d308:	18fb      	adds	r3, r7, r3
 800d30a:	681a      	ldr	r2, [r3, #0]
 800d30c:	2380      	movs	r3, #128	; 0x80
 800d30e:	05db      	lsls	r3, r3, #23
 800d310:	4013      	ands	r3, r2
 800d312:	d004      	beq.n	800d31e <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	0018      	movs	r0, r3
 800d318:	f001 f9e4 	bl	800e6e4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d31c:	e019      	b.n	800d352 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d31e:	23a4      	movs	r3, #164	; 0xa4
 800d320:	18fb      	adds	r3, r7, r3
 800d322:	681a      	ldr	r2, [r3, #0]
 800d324:	2380      	movs	r3, #128	; 0x80
 800d326:	045b      	lsls	r3, r3, #17
 800d328:	4013      	ands	r3, r2
 800d32a:	d012      	beq.n	800d352 <HAL_UART_IRQHandler+0x63a>
 800d32c:	23a0      	movs	r3, #160	; 0xa0
 800d32e:	18fb      	adds	r3, r7, r3
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	2b00      	cmp	r3, #0
 800d334:	da0d      	bge.n	800d352 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	0018      	movs	r0, r3
 800d33a:	f001 f9cb 	bl	800e6d4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d33e:	e008      	b.n	800d352 <HAL_UART_IRQHandler+0x63a>
      return;
 800d340:	46c0      	nop			; (mov r8, r8)
 800d342:	e006      	b.n	800d352 <HAL_UART_IRQHandler+0x63a>
    return;
 800d344:	46c0      	nop			; (mov r8, r8)
 800d346:	e004      	b.n	800d352 <HAL_UART_IRQHandler+0x63a>
      return;
 800d348:	46c0      	nop			; (mov r8, r8)
 800d34a:	e002      	b.n	800d352 <HAL_UART_IRQHandler+0x63a>
      return;
 800d34c:	46c0      	nop			; (mov r8, r8)
 800d34e:	e000      	b.n	800d352 <HAL_UART_IRQHandler+0x63a>
    return;
 800d350:	46c0      	nop			; (mov r8, r8)
  }
}
 800d352:	46bd      	mov	sp, r7
 800d354:	b02a      	add	sp, #168	; 0xa8
 800d356:	bdb0      	pop	{r4, r5, r7, pc}
 800d358:	fffffeff 	.word	0xfffffeff
 800d35c:	fffffedf 	.word	0xfffffedf
 800d360:	effffffe 	.word	0xeffffffe

0800d364 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b082      	sub	sp, #8
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d36c:	46c0      	nop			; (mov r8, r8)
 800d36e:	46bd      	mov	sp, r7
 800d370:	b002      	add	sp, #8
 800d372:	bd80      	pop	{r7, pc}

0800d374 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b082      	sub	sp, #8
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
 800d37c:	000a      	movs	r2, r1
 800d37e:	1cbb      	adds	r3, r7, #2
 800d380:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d382:	46c0      	nop			; (mov r8, r8)
 800d384:	46bd      	mov	sp, r7
 800d386:	b002      	add	sp, #8
 800d388:	bd80      	pop	{r7, pc}
	...

0800d38c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b088      	sub	sp, #32
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d394:	231a      	movs	r3, #26
 800d396:	18fb      	adds	r3, r7, r3
 800d398:	2200      	movs	r2, #0
 800d39a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	689a      	ldr	r2, [r3, #8]
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	691b      	ldr	r3, [r3, #16]
 800d3a4:	431a      	orrs	r2, r3
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	695b      	ldr	r3, [r3, #20]
 800d3aa:	431a      	orrs	r2, r3
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	69db      	ldr	r3, [r3, #28]
 800d3b0:	4313      	orrs	r3, r2
 800d3b2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	4abc      	ldr	r2, [pc, #752]	; (800d6ac <UART_SetConfig+0x320>)
 800d3bc:	4013      	ands	r3, r2
 800d3be:	0019      	movs	r1, r3
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	69fa      	ldr	r2, [r7, #28]
 800d3c6:	430a      	orrs	r2, r1
 800d3c8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	685b      	ldr	r3, [r3, #4]
 800d3d0:	4ab7      	ldr	r2, [pc, #732]	; (800d6b0 <UART_SetConfig+0x324>)
 800d3d2:	4013      	ands	r3, r2
 800d3d4:	0019      	movs	r1, r3
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	68da      	ldr	r2, [r3, #12]
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	430a      	orrs	r2, r1
 800d3e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	699b      	ldr	r3, [r3, #24]
 800d3e6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	6a1b      	ldr	r3, [r3, #32]
 800d3ec:	69fa      	ldr	r2, [r7, #28]
 800d3ee:	4313      	orrs	r3, r2
 800d3f0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	689b      	ldr	r3, [r3, #8]
 800d3f8:	4aae      	ldr	r2, [pc, #696]	; (800d6b4 <UART_SetConfig+0x328>)
 800d3fa:	4013      	ands	r3, r2
 800d3fc:	0019      	movs	r1, r3
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	69fa      	ldr	r2, [r7, #28]
 800d404:	430a      	orrs	r2, r1
 800d406:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d40e:	220f      	movs	r2, #15
 800d410:	4393      	bics	r3, r2
 800d412:	0019      	movs	r1, r3
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	430a      	orrs	r2, r1
 800d41e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	4aa4      	ldr	r2, [pc, #656]	; (800d6b8 <UART_SetConfig+0x32c>)
 800d426:	4293      	cmp	r3, r2
 800d428:	d127      	bne.n	800d47a <UART_SetConfig+0xee>
 800d42a:	4ba4      	ldr	r3, [pc, #656]	; (800d6bc <UART_SetConfig+0x330>)
 800d42c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d42e:	2203      	movs	r2, #3
 800d430:	4013      	ands	r3, r2
 800d432:	2b03      	cmp	r3, #3
 800d434:	d017      	beq.n	800d466 <UART_SetConfig+0xda>
 800d436:	d81b      	bhi.n	800d470 <UART_SetConfig+0xe4>
 800d438:	2b02      	cmp	r3, #2
 800d43a:	d00a      	beq.n	800d452 <UART_SetConfig+0xc6>
 800d43c:	d818      	bhi.n	800d470 <UART_SetConfig+0xe4>
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d002      	beq.n	800d448 <UART_SetConfig+0xbc>
 800d442:	2b01      	cmp	r3, #1
 800d444:	d00a      	beq.n	800d45c <UART_SetConfig+0xd0>
 800d446:	e013      	b.n	800d470 <UART_SetConfig+0xe4>
 800d448:	231b      	movs	r3, #27
 800d44a:	18fb      	adds	r3, r7, r3
 800d44c:	2200      	movs	r2, #0
 800d44e:	701a      	strb	r2, [r3, #0]
 800d450:	e058      	b.n	800d504 <UART_SetConfig+0x178>
 800d452:	231b      	movs	r3, #27
 800d454:	18fb      	adds	r3, r7, r3
 800d456:	2202      	movs	r2, #2
 800d458:	701a      	strb	r2, [r3, #0]
 800d45a:	e053      	b.n	800d504 <UART_SetConfig+0x178>
 800d45c:	231b      	movs	r3, #27
 800d45e:	18fb      	adds	r3, r7, r3
 800d460:	2204      	movs	r2, #4
 800d462:	701a      	strb	r2, [r3, #0]
 800d464:	e04e      	b.n	800d504 <UART_SetConfig+0x178>
 800d466:	231b      	movs	r3, #27
 800d468:	18fb      	adds	r3, r7, r3
 800d46a:	2208      	movs	r2, #8
 800d46c:	701a      	strb	r2, [r3, #0]
 800d46e:	e049      	b.n	800d504 <UART_SetConfig+0x178>
 800d470:	231b      	movs	r3, #27
 800d472:	18fb      	adds	r3, r7, r3
 800d474:	2210      	movs	r2, #16
 800d476:	701a      	strb	r2, [r3, #0]
 800d478:	e044      	b.n	800d504 <UART_SetConfig+0x178>
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	4a90      	ldr	r2, [pc, #576]	; (800d6c0 <UART_SetConfig+0x334>)
 800d480:	4293      	cmp	r3, r2
 800d482:	d127      	bne.n	800d4d4 <UART_SetConfig+0x148>
 800d484:	4b8d      	ldr	r3, [pc, #564]	; (800d6bc <UART_SetConfig+0x330>)
 800d486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d488:	220c      	movs	r2, #12
 800d48a:	4013      	ands	r3, r2
 800d48c:	2b0c      	cmp	r3, #12
 800d48e:	d017      	beq.n	800d4c0 <UART_SetConfig+0x134>
 800d490:	d81b      	bhi.n	800d4ca <UART_SetConfig+0x13e>
 800d492:	2b08      	cmp	r3, #8
 800d494:	d00a      	beq.n	800d4ac <UART_SetConfig+0x120>
 800d496:	d818      	bhi.n	800d4ca <UART_SetConfig+0x13e>
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d002      	beq.n	800d4a2 <UART_SetConfig+0x116>
 800d49c:	2b04      	cmp	r3, #4
 800d49e:	d00a      	beq.n	800d4b6 <UART_SetConfig+0x12a>
 800d4a0:	e013      	b.n	800d4ca <UART_SetConfig+0x13e>
 800d4a2:	231b      	movs	r3, #27
 800d4a4:	18fb      	adds	r3, r7, r3
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	701a      	strb	r2, [r3, #0]
 800d4aa:	e02b      	b.n	800d504 <UART_SetConfig+0x178>
 800d4ac:	231b      	movs	r3, #27
 800d4ae:	18fb      	adds	r3, r7, r3
 800d4b0:	2202      	movs	r2, #2
 800d4b2:	701a      	strb	r2, [r3, #0]
 800d4b4:	e026      	b.n	800d504 <UART_SetConfig+0x178>
 800d4b6:	231b      	movs	r3, #27
 800d4b8:	18fb      	adds	r3, r7, r3
 800d4ba:	2204      	movs	r2, #4
 800d4bc:	701a      	strb	r2, [r3, #0]
 800d4be:	e021      	b.n	800d504 <UART_SetConfig+0x178>
 800d4c0:	231b      	movs	r3, #27
 800d4c2:	18fb      	adds	r3, r7, r3
 800d4c4:	2208      	movs	r2, #8
 800d4c6:	701a      	strb	r2, [r3, #0]
 800d4c8:	e01c      	b.n	800d504 <UART_SetConfig+0x178>
 800d4ca:	231b      	movs	r3, #27
 800d4cc:	18fb      	adds	r3, r7, r3
 800d4ce:	2210      	movs	r2, #16
 800d4d0:	701a      	strb	r2, [r3, #0]
 800d4d2:	e017      	b.n	800d504 <UART_SetConfig+0x178>
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	4a7a      	ldr	r2, [pc, #488]	; (800d6c4 <UART_SetConfig+0x338>)
 800d4da:	4293      	cmp	r3, r2
 800d4dc:	d104      	bne.n	800d4e8 <UART_SetConfig+0x15c>
 800d4de:	231b      	movs	r3, #27
 800d4e0:	18fb      	adds	r3, r7, r3
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	701a      	strb	r2, [r3, #0]
 800d4e6:	e00d      	b.n	800d504 <UART_SetConfig+0x178>
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	4a76      	ldr	r2, [pc, #472]	; (800d6c8 <UART_SetConfig+0x33c>)
 800d4ee:	4293      	cmp	r3, r2
 800d4f0:	d104      	bne.n	800d4fc <UART_SetConfig+0x170>
 800d4f2:	231b      	movs	r3, #27
 800d4f4:	18fb      	adds	r3, r7, r3
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	701a      	strb	r2, [r3, #0]
 800d4fa:	e003      	b.n	800d504 <UART_SetConfig+0x178>
 800d4fc:	231b      	movs	r3, #27
 800d4fe:	18fb      	adds	r3, r7, r3
 800d500:	2210      	movs	r2, #16
 800d502:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	69da      	ldr	r2, [r3, #28]
 800d508:	2380      	movs	r3, #128	; 0x80
 800d50a:	021b      	lsls	r3, r3, #8
 800d50c:	429a      	cmp	r2, r3
 800d50e:	d000      	beq.n	800d512 <UART_SetConfig+0x186>
 800d510:	e065      	b.n	800d5de <UART_SetConfig+0x252>
  {
    switch (clocksource)
 800d512:	231b      	movs	r3, #27
 800d514:	18fb      	adds	r3, r7, r3
 800d516:	781b      	ldrb	r3, [r3, #0]
 800d518:	2b08      	cmp	r3, #8
 800d51a:	d015      	beq.n	800d548 <UART_SetConfig+0x1bc>
 800d51c:	dc18      	bgt.n	800d550 <UART_SetConfig+0x1c4>
 800d51e:	2b04      	cmp	r3, #4
 800d520:	d00d      	beq.n	800d53e <UART_SetConfig+0x1b2>
 800d522:	dc15      	bgt.n	800d550 <UART_SetConfig+0x1c4>
 800d524:	2b00      	cmp	r3, #0
 800d526:	d002      	beq.n	800d52e <UART_SetConfig+0x1a2>
 800d528:	2b02      	cmp	r3, #2
 800d52a:	d005      	beq.n	800d538 <UART_SetConfig+0x1ac>
 800d52c:	e010      	b.n	800d550 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d52e:	f7fd f931 	bl	800a794 <HAL_RCC_GetPCLK1Freq>
 800d532:	0003      	movs	r3, r0
 800d534:	617b      	str	r3, [r7, #20]
        break;
 800d536:	e012      	b.n	800d55e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d538:	4b64      	ldr	r3, [pc, #400]	; (800d6cc <UART_SetConfig+0x340>)
 800d53a:	617b      	str	r3, [r7, #20]
        break;
 800d53c:	e00f      	b.n	800d55e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d53e:	f7fd f89d 	bl	800a67c <HAL_RCC_GetSysClockFreq>
 800d542:	0003      	movs	r3, r0
 800d544:	617b      	str	r3, [r7, #20]
        break;
 800d546:	e00a      	b.n	800d55e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d548:	2380      	movs	r3, #128	; 0x80
 800d54a:	021b      	lsls	r3, r3, #8
 800d54c:	617b      	str	r3, [r7, #20]
        break;
 800d54e:	e006      	b.n	800d55e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800d550:	2300      	movs	r3, #0
 800d552:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800d554:	231a      	movs	r3, #26
 800d556:	18fb      	adds	r3, r7, r3
 800d558:	2201      	movs	r2, #1
 800d55a:	701a      	strb	r2, [r3, #0]
        break;
 800d55c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d55e:	697b      	ldr	r3, [r7, #20]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d100      	bne.n	800d566 <UART_SetConfig+0x1da>
 800d564:	e08d      	b.n	800d682 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d56a:	4b59      	ldr	r3, [pc, #356]	; (800d6d0 <UART_SetConfig+0x344>)
 800d56c:	0052      	lsls	r2, r2, #1
 800d56e:	5ad3      	ldrh	r3, [r2, r3]
 800d570:	0019      	movs	r1, r3
 800d572:	6978      	ldr	r0, [r7, #20]
 800d574:	f7f2 fdea 	bl	800014c <__udivsi3>
 800d578:	0003      	movs	r3, r0
 800d57a:	005a      	lsls	r2, r3, #1
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	685b      	ldr	r3, [r3, #4]
 800d580:	085b      	lsrs	r3, r3, #1
 800d582:	18d2      	adds	r2, r2, r3
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	685b      	ldr	r3, [r3, #4]
 800d588:	0019      	movs	r1, r3
 800d58a:	0010      	movs	r0, r2
 800d58c:	f7f2 fdde 	bl	800014c <__udivsi3>
 800d590:	0003      	movs	r3, r0
 800d592:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d594:	693b      	ldr	r3, [r7, #16]
 800d596:	2b0f      	cmp	r3, #15
 800d598:	d91c      	bls.n	800d5d4 <UART_SetConfig+0x248>
 800d59a:	693a      	ldr	r2, [r7, #16]
 800d59c:	2380      	movs	r3, #128	; 0x80
 800d59e:	025b      	lsls	r3, r3, #9
 800d5a0:	429a      	cmp	r2, r3
 800d5a2:	d217      	bcs.n	800d5d4 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d5a4:	693b      	ldr	r3, [r7, #16]
 800d5a6:	b29a      	uxth	r2, r3
 800d5a8:	200e      	movs	r0, #14
 800d5aa:	183b      	adds	r3, r7, r0
 800d5ac:	210f      	movs	r1, #15
 800d5ae:	438a      	bics	r2, r1
 800d5b0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d5b2:	693b      	ldr	r3, [r7, #16]
 800d5b4:	085b      	lsrs	r3, r3, #1
 800d5b6:	b29b      	uxth	r3, r3
 800d5b8:	2207      	movs	r2, #7
 800d5ba:	4013      	ands	r3, r2
 800d5bc:	b299      	uxth	r1, r3
 800d5be:	183b      	adds	r3, r7, r0
 800d5c0:	183a      	adds	r2, r7, r0
 800d5c2:	8812      	ldrh	r2, [r2, #0]
 800d5c4:	430a      	orrs	r2, r1
 800d5c6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	183a      	adds	r2, r7, r0
 800d5ce:	8812      	ldrh	r2, [r2, #0]
 800d5d0:	60da      	str	r2, [r3, #12]
 800d5d2:	e056      	b.n	800d682 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800d5d4:	231a      	movs	r3, #26
 800d5d6:	18fb      	adds	r3, r7, r3
 800d5d8:	2201      	movs	r2, #1
 800d5da:	701a      	strb	r2, [r3, #0]
 800d5dc:	e051      	b.n	800d682 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d5de:	231b      	movs	r3, #27
 800d5e0:	18fb      	adds	r3, r7, r3
 800d5e2:	781b      	ldrb	r3, [r3, #0]
 800d5e4:	2b08      	cmp	r3, #8
 800d5e6:	d015      	beq.n	800d614 <UART_SetConfig+0x288>
 800d5e8:	dc18      	bgt.n	800d61c <UART_SetConfig+0x290>
 800d5ea:	2b04      	cmp	r3, #4
 800d5ec:	d00d      	beq.n	800d60a <UART_SetConfig+0x27e>
 800d5ee:	dc15      	bgt.n	800d61c <UART_SetConfig+0x290>
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d002      	beq.n	800d5fa <UART_SetConfig+0x26e>
 800d5f4:	2b02      	cmp	r3, #2
 800d5f6:	d005      	beq.n	800d604 <UART_SetConfig+0x278>
 800d5f8:	e010      	b.n	800d61c <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d5fa:	f7fd f8cb 	bl	800a794 <HAL_RCC_GetPCLK1Freq>
 800d5fe:	0003      	movs	r3, r0
 800d600:	617b      	str	r3, [r7, #20]
        break;
 800d602:	e012      	b.n	800d62a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d604:	4b31      	ldr	r3, [pc, #196]	; (800d6cc <UART_SetConfig+0x340>)
 800d606:	617b      	str	r3, [r7, #20]
        break;
 800d608:	e00f      	b.n	800d62a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d60a:	f7fd f837 	bl	800a67c <HAL_RCC_GetSysClockFreq>
 800d60e:	0003      	movs	r3, r0
 800d610:	617b      	str	r3, [r7, #20]
        break;
 800d612:	e00a      	b.n	800d62a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d614:	2380      	movs	r3, #128	; 0x80
 800d616:	021b      	lsls	r3, r3, #8
 800d618:	617b      	str	r3, [r7, #20]
        break;
 800d61a:	e006      	b.n	800d62a <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 800d61c:	2300      	movs	r3, #0
 800d61e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800d620:	231a      	movs	r3, #26
 800d622:	18fb      	adds	r3, r7, r3
 800d624:	2201      	movs	r2, #1
 800d626:	701a      	strb	r2, [r3, #0]
        break;
 800d628:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800d62a:	697b      	ldr	r3, [r7, #20]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d028      	beq.n	800d682 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d634:	4b26      	ldr	r3, [pc, #152]	; (800d6d0 <UART_SetConfig+0x344>)
 800d636:	0052      	lsls	r2, r2, #1
 800d638:	5ad3      	ldrh	r3, [r2, r3]
 800d63a:	0019      	movs	r1, r3
 800d63c:	6978      	ldr	r0, [r7, #20]
 800d63e:	f7f2 fd85 	bl	800014c <__udivsi3>
 800d642:	0003      	movs	r3, r0
 800d644:	001a      	movs	r2, r3
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	685b      	ldr	r3, [r3, #4]
 800d64a:	085b      	lsrs	r3, r3, #1
 800d64c:	18d2      	adds	r2, r2, r3
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	685b      	ldr	r3, [r3, #4]
 800d652:	0019      	movs	r1, r3
 800d654:	0010      	movs	r0, r2
 800d656:	f7f2 fd79 	bl	800014c <__udivsi3>
 800d65a:	0003      	movs	r3, r0
 800d65c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d65e:	693b      	ldr	r3, [r7, #16]
 800d660:	2b0f      	cmp	r3, #15
 800d662:	d90a      	bls.n	800d67a <UART_SetConfig+0x2ee>
 800d664:	693a      	ldr	r2, [r7, #16]
 800d666:	2380      	movs	r3, #128	; 0x80
 800d668:	025b      	lsls	r3, r3, #9
 800d66a:	429a      	cmp	r2, r3
 800d66c:	d205      	bcs.n	800d67a <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d66e:	693b      	ldr	r3, [r7, #16]
 800d670:	b29a      	uxth	r2, r3
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	60da      	str	r2, [r3, #12]
 800d678:	e003      	b.n	800d682 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800d67a:	231a      	movs	r3, #26
 800d67c:	18fb      	adds	r3, r7, r3
 800d67e:	2201      	movs	r2, #1
 800d680:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	226a      	movs	r2, #106	; 0x6a
 800d686:	2101      	movs	r1, #1
 800d688:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	2268      	movs	r2, #104	; 0x68
 800d68e:	2101      	movs	r1, #1
 800d690:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	2200      	movs	r2, #0
 800d696:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	2200      	movs	r2, #0
 800d69c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800d69e:	231a      	movs	r3, #26
 800d6a0:	18fb      	adds	r3, r7, r3
 800d6a2:	781b      	ldrb	r3, [r3, #0]
}
 800d6a4:	0018      	movs	r0, r3
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	b008      	add	sp, #32
 800d6aa:	bd80      	pop	{r7, pc}
 800d6ac:	cfff69f3 	.word	0xcfff69f3
 800d6b0:	ffffcfff 	.word	0xffffcfff
 800d6b4:	11fff4ff 	.word	0x11fff4ff
 800d6b8:	40013800 	.word	0x40013800
 800d6bc:	40021000 	.word	0x40021000
 800d6c0:	40004400 	.word	0x40004400
 800d6c4:	40004800 	.word	0x40004800
 800d6c8:	40004c00 	.word	0x40004c00
 800d6cc:	00f42400 	.word	0x00f42400
 800d6d0:	08013474 	.word	0x08013474

0800d6d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b082      	sub	sp, #8
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6e0:	2201      	movs	r2, #1
 800d6e2:	4013      	ands	r3, r2
 800d6e4:	d00b      	beq.n	800d6fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	685b      	ldr	r3, [r3, #4]
 800d6ec:	4a4a      	ldr	r2, [pc, #296]	; (800d818 <UART_AdvFeatureConfig+0x144>)
 800d6ee:	4013      	ands	r3, r2
 800d6f0:	0019      	movs	r1, r3
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	430a      	orrs	r2, r1
 800d6fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d702:	2202      	movs	r2, #2
 800d704:	4013      	ands	r3, r2
 800d706:	d00b      	beq.n	800d720 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	685b      	ldr	r3, [r3, #4]
 800d70e:	4a43      	ldr	r2, [pc, #268]	; (800d81c <UART_AdvFeatureConfig+0x148>)
 800d710:	4013      	ands	r3, r2
 800d712:	0019      	movs	r1, r3
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	430a      	orrs	r2, r1
 800d71e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d724:	2204      	movs	r2, #4
 800d726:	4013      	ands	r3, r2
 800d728:	d00b      	beq.n	800d742 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	685b      	ldr	r3, [r3, #4]
 800d730:	4a3b      	ldr	r2, [pc, #236]	; (800d820 <UART_AdvFeatureConfig+0x14c>)
 800d732:	4013      	ands	r3, r2
 800d734:	0019      	movs	r1, r3
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	430a      	orrs	r2, r1
 800d740:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d746:	2208      	movs	r2, #8
 800d748:	4013      	ands	r3, r2
 800d74a:	d00b      	beq.n	800d764 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	685b      	ldr	r3, [r3, #4]
 800d752:	4a34      	ldr	r2, [pc, #208]	; (800d824 <UART_AdvFeatureConfig+0x150>)
 800d754:	4013      	ands	r3, r2
 800d756:	0019      	movs	r1, r3
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	430a      	orrs	r2, r1
 800d762:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d768:	2210      	movs	r2, #16
 800d76a:	4013      	ands	r3, r2
 800d76c:	d00b      	beq.n	800d786 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	689b      	ldr	r3, [r3, #8]
 800d774:	4a2c      	ldr	r2, [pc, #176]	; (800d828 <UART_AdvFeatureConfig+0x154>)
 800d776:	4013      	ands	r3, r2
 800d778:	0019      	movs	r1, r3
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	430a      	orrs	r2, r1
 800d784:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d78a:	2220      	movs	r2, #32
 800d78c:	4013      	ands	r3, r2
 800d78e:	d00b      	beq.n	800d7a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	689b      	ldr	r3, [r3, #8]
 800d796:	4a25      	ldr	r2, [pc, #148]	; (800d82c <UART_AdvFeatureConfig+0x158>)
 800d798:	4013      	ands	r3, r2
 800d79a:	0019      	movs	r1, r3
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	430a      	orrs	r2, r1
 800d7a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7ac:	2240      	movs	r2, #64	; 0x40
 800d7ae:	4013      	ands	r3, r2
 800d7b0:	d01d      	beq.n	800d7ee <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	685b      	ldr	r3, [r3, #4]
 800d7b8:	4a1d      	ldr	r2, [pc, #116]	; (800d830 <UART_AdvFeatureConfig+0x15c>)
 800d7ba:	4013      	ands	r3, r2
 800d7bc:	0019      	movs	r1, r3
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	430a      	orrs	r2, r1
 800d7c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d7ce:	2380      	movs	r3, #128	; 0x80
 800d7d0:	035b      	lsls	r3, r3, #13
 800d7d2:	429a      	cmp	r2, r3
 800d7d4:	d10b      	bne.n	800d7ee <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	685b      	ldr	r3, [r3, #4]
 800d7dc:	4a15      	ldr	r2, [pc, #84]	; (800d834 <UART_AdvFeatureConfig+0x160>)
 800d7de:	4013      	ands	r3, r2
 800d7e0:	0019      	movs	r1, r3
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	430a      	orrs	r2, r1
 800d7ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7f2:	2280      	movs	r2, #128	; 0x80
 800d7f4:	4013      	ands	r3, r2
 800d7f6:	d00b      	beq.n	800d810 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	685b      	ldr	r3, [r3, #4]
 800d7fe:	4a0e      	ldr	r2, [pc, #56]	; (800d838 <UART_AdvFeatureConfig+0x164>)
 800d800:	4013      	ands	r3, r2
 800d802:	0019      	movs	r1, r3
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	430a      	orrs	r2, r1
 800d80e:	605a      	str	r2, [r3, #4]
  }
}
 800d810:	46c0      	nop			; (mov r8, r8)
 800d812:	46bd      	mov	sp, r7
 800d814:	b002      	add	sp, #8
 800d816:	bd80      	pop	{r7, pc}
 800d818:	fffdffff 	.word	0xfffdffff
 800d81c:	fffeffff 	.word	0xfffeffff
 800d820:	fffbffff 	.word	0xfffbffff
 800d824:	ffff7fff 	.word	0xffff7fff
 800d828:	ffffefff 	.word	0xffffefff
 800d82c:	ffffdfff 	.word	0xffffdfff
 800d830:	ffefffff 	.word	0xffefffff
 800d834:	ff9fffff 	.word	0xff9fffff
 800d838:	fff7ffff 	.word	0xfff7ffff

0800d83c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b086      	sub	sp, #24
 800d840:	af02      	add	r7, sp, #8
 800d842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	2290      	movs	r2, #144	; 0x90
 800d848:	2100      	movs	r1, #0
 800d84a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d84c:	f7fb fcec 	bl	8009228 <HAL_GetTick>
 800d850:	0003      	movs	r3, r0
 800d852:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	2208      	movs	r2, #8
 800d85c:	4013      	ands	r3, r2
 800d85e:	2b08      	cmp	r3, #8
 800d860:	d10c      	bne.n	800d87c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	2280      	movs	r2, #128	; 0x80
 800d866:	0391      	lsls	r1, r2, #14
 800d868:	6878      	ldr	r0, [r7, #4]
 800d86a:	4a1a      	ldr	r2, [pc, #104]	; (800d8d4 <UART_CheckIdleState+0x98>)
 800d86c:	9200      	str	r2, [sp, #0]
 800d86e:	2200      	movs	r2, #0
 800d870:	f000 f832 	bl	800d8d8 <UART_WaitOnFlagUntilTimeout>
 800d874:	1e03      	subs	r3, r0, #0
 800d876:	d001      	beq.n	800d87c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d878:	2303      	movs	r3, #3
 800d87a:	e026      	b.n	800d8ca <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	2204      	movs	r2, #4
 800d884:	4013      	ands	r3, r2
 800d886:	2b04      	cmp	r3, #4
 800d888:	d10c      	bne.n	800d8a4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	2280      	movs	r2, #128	; 0x80
 800d88e:	03d1      	lsls	r1, r2, #15
 800d890:	6878      	ldr	r0, [r7, #4]
 800d892:	4a10      	ldr	r2, [pc, #64]	; (800d8d4 <UART_CheckIdleState+0x98>)
 800d894:	9200      	str	r2, [sp, #0]
 800d896:	2200      	movs	r2, #0
 800d898:	f000 f81e 	bl	800d8d8 <UART_WaitOnFlagUntilTimeout>
 800d89c:	1e03      	subs	r3, r0, #0
 800d89e:	d001      	beq.n	800d8a4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d8a0:	2303      	movs	r3, #3
 800d8a2:	e012      	b.n	800d8ca <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	2288      	movs	r2, #136	; 0x88
 800d8a8:	2120      	movs	r1, #32
 800d8aa:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	228c      	movs	r2, #140	; 0x8c
 800d8b0:	2120      	movs	r1, #32
 800d8b2:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	2200      	movs	r2, #0
 800d8be:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	2284      	movs	r2, #132	; 0x84
 800d8c4:	2100      	movs	r1, #0
 800d8c6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d8c8:	2300      	movs	r3, #0
}
 800d8ca:	0018      	movs	r0, r3
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	b004      	add	sp, #16
 800d8d0:	bd80      	pop	{r7, pc}
 800d8d2:	46c0      	nop			; (mov r8, r8)
 800d8d4:	01ffffff 	.word	0x01ffffff

0800d8d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b094      	sub	sp, #80	; 0x50
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	60f8      	str	r0, [r7, #12]
 800d8e0:	60b9      	str	r1, [r7, #8]
 800d8e2:	603b      	str	r3, [r7, #0]
 800d8e4:	1dfb      	adds	r3, r7, #7
 800d8e6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d8e8:	e0a7      	b.n	800da3a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d8ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d8ec:	3301      	adds	r3, #1
 800d8ee:	d100      	bne.n	800d8f2 <UART_WaitOnFlagUntilTimeout+0x1a>
 800d8f0:	e0a3      	b.n	800da3a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d8f2:	f7fb fc99 	bl	8009228 <HAL_GetTick>
 800d8f6:	0002      	movs	r2, r0
 800d8f8:	683b      	ldr	r3, [r7, #0]
 800d8fa:	1ad3      	subs	r3, r2, r3
 800d8fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d8fe:	429a      	cmp	r2, r3
 800d900:	d302      	bcc.n	800d908 <UART_WaitOnFlagUntilTimeout+0x30>
 800d902:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d904:	2b00      	cmp	r3, #0
 800d906:	d13f      	bne.n	800d988 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d908:	f3ef 8310 	mrs	r3, PRIMASK
 800d90c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800d90e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d910:	647b      	str	r3, [r7, #68]	; 0x44
 800d912:	2301      	movs	r3, #1
 800d914:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d918:	f383 8810 	msr	PRIMASK, r3
}
 800d91c:	46c0      	nop			; (mov r8, r8)
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	681a      	ldr	r2, [r3, #0]
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	494e      	ldr	r1, [pc, #312]	; (800da64 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800d92a:	400a      	ands	r2, r1
 800d92c:	601a      	str	r2, [r3, #0]
 800d92e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d930:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d934:	f383 8810 	msr	PRIMASK, r3
}
 800d938:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d93a:	f3ef 8310 	mrs	r3, PRIMASK
 800d93e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800d940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d942:	643b      	str	r3, [r7, #64]	; 0x40
 800d944:	2301      	movs	r3, #1
 800d946:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d94a:	f383 8810 	msr	PRIMASK, r3
}
 800d94e:	46c0      	nop			; (mov r8, r8)
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	689a      	ldr	r2, [r3, #8]
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	2101      	movs	r1, #1
 800d95c:	438a      	bics	r2, r1
 800d95e:	609a      	str	r2, [r3, #8]
 800d960:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d962:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d966:	f383 8810 	msr	PRIMASK, r3
}
 800d96a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	2288      	movs	r2, #136	; 0x88
 800d970:	2120      	movs	r1, #32
 800d972:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	228c      	movs	r2, #140	; 0x8c
 800d978:	2120      	movs	r1, #32
 800d97a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	2284      	movs	r2, #132	; 0x84
 800d980:	2100      	movs	r1, #0
 800d982:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800d984:	2303      	movs	r3, #3
 800d986:	e069      	b.n	800da5c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	2204      	movs	r2, #4
 800d990:	4013      	ands	r3, r2
 800d992:	d052      	beq.n	800da3a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	69da      	ldr	r2, [r3, #28]
 800d99a:	2380      	movs	r3, #128	; 0x80
 800d99c:	011b      	lsls	r3, r3, #4
 800d99e:	401a      	ands	r2, r3
 800d9a0:	2380      	movs	r3, #128	; 0x80
 800d9a2:	011b      	lsls	r3, r3, #4
 800d9a4:	429a      	cmp	r2, r3
 800d9a6:	d148      	bne.n	800da3a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	2280      	movs	r2, #128	; 0x80
 800d9ae:	0112      	lsls	r2, r2, #4
 800d9b0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d9b2:	f3ef 8310 	mrs	r3, PRIMASK
 800d9b6:	613b      	str	r3, [r7, #16]
  return(result);
 800d9b8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d9ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d9bc:	2301      	movs	r3, #1
 800d9be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d9c0:	697b      	ldr	r3, [r7, #20]
 800d9c2:	f383 8810 	msr	PRIMASK, r3
}
 800d9c6:	46c0      	nop			; (mov r8, r8)
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	681a      	ldr	r2, [r3, #0]
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	4924      	ldr	r1, [pc, #144]	; (800da64 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800d9d4:	400a      	ands	r2, r1
 800d9d6:	601a      	str	r2, [r3, #0]
 800d9d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d9da:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d9dc:	69bb      	ldr	r3, [r7, #24]
 800d9de:	f383 8810 	msr	PRIMASK, r3
}
 800d9e2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d9e4:	f3ef 8310 	mrs	r3, PRIMASK
 800d9e8:	61fb      	str	r3, [r7, #28]
  return(result);
 800d9ea:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d9ec:	64bb      	str	r3, [r7, #72]	; 0x48
 800d9ee:	2301      	movs	r3, #1
 800d9f0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d9f2:	6a3b      	ldr	r3, [r7, #32]
 800d9f4:	f383 8810 	msr	PRIMASK, r3
}
 800d9f8:	46c0      	nop			; (mov r8, r8)
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	689a      	ldr	r2, [r3, #8]
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	2101      	movs	r1, #1
 800da06:	438a      	bics	r2, r1
 800da08:	609a      	str	r2, [r3, #8]
 800da0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da0c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da10:	f383 8810 	msr	PRIMASK, r3
}
 800da14:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	2288      	movs	r2, #136	; 0x88
 800da1a:	2120      	movs	r1, #32
 800da1c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	228c      	movs	r2, #140	; 0x8c
 800da22:	2120      	movs	r1, #32
 800da24:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	2290      	movs	r2, #144	; 0x90
 800da2a:	2120      	movs	r1, #32
 800da2c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	2284      	movs	r2, #132	; 0x84
 800da32:	2100      	movs	r1, #0
 800da34:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800da36:	2303      	movs	r3, #3
 800da38:	e010      	b.n	800da5c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	69db      	ldr	r3, [r3, #28]
 800da40:	68ba      	ldr	r2, [r7, #8]
 800da42:	4013      	ands	r3, r2
 800da44:	68ba      	ldr	r2, [r7, #8]
 800da46:	1ad3      	subs	r3, r2, r3
 800da48:	425a      	negs	r2, r3
 800da4a:	4153      	adcs	r3, r2
 800da4c:	b2db      	uxtb	r3, r3
 800da4e:	001a      	movs	r2, r3
 800da50:	1dfb      	adds	r3, r7, #7
 800da52:	781b      	ldrb	r3, [r3, #0]
 800da54:	429a      	cmp	r2, r3
 800da56:	d100      	bne.n	800da5a <UART_WaitOnFlagUntilTimeout+0x182>
 800da58:	e747      	b.n	800d8ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800da5a:	2300      	movs	r3, #0
}
 800da5c:	0018      	movs	r0, r3
 800da5e:	46bd      	mov	sp, r7
 800da60:	b014      	add	sp, #80	; 0x50
 800da62:	bd80      	pop	{r7, pc}
 800da64:	fffffe5f 	.word	0xfffffe5f

0800da68 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b098      	sub	sp, #96	; 0x60
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	60f8      	str	r0, [r7, #12]
 800da70:	60b9      	str	r1, [r7, #8]
 800da72:	1dbb      	adds	r3, r7, #6
 800da74:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	68ba      	ldr	r2, [r7, #8]
 800da7a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	1dba      	adds	r2, r7, #6
 800da80:	215c      	movs	r1, #92	; 0x5c
 800da82:	8812      	ldrh	r2, [r2, #0]
 800da84:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	1dba      	adds	r2, r7, #6
 800da8a:	215e      	movs	r1, #94	; 0x5e
 800da8c:	8812      	ldrh	r2, [r2, #0]
 800da8e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	2200      	movs	r2, #0
 800da94:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	689a      	ldr	r2, [r3, #8]
 800da9a:	2380      	movs	r3, #128	; 0x80
 800da9c:	015b      	lsls	r3, r3, #5
 800da9e:	429a      	cmp	r2, r3
 800daa0:	d10d      	bne.n	800dabe <UART_Start_Receive_IT+0x56>
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	691b      	ldr	r3, [r3, #16]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d104      	bne.n	800dab4 <UART_Start_Receive_IT+0x4c>
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	2260      	movs	r2, #96	; 0x60
 800daae:	497b      	ldr	r1, [pc, #492]	; (800dc9c <UART_Start_Receive_IT+0x234>)
 800dab0:	5299      	strh	r1, [r3, r2]
 800dab2:	e02e      	b.n	800db12 <UART_Start_Receive_IT+0xaa>
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	2260      	movs	r2, #96	; 0x60
 800dab8:	21ff      	movs	r1, #255	; 0xff
 800daba:	5299      	strh	r1, [r3, r2]
 800dabc:	e029      	b.n	800db12 <UART_Start_Receive_IT+0xaa>
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	689b      	ldr	r3, [r3, #8]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d10d      	bne.n	800dae2 <UART_Start_Receive_IT+0x7a>
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	691b      	ldr	r3, [r3, #16]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d104      	bne.n	800dad8 <UART_Start_Receive_IT+0x70>
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	2260      	movs	r2, #96	; 0x60
 800dad2:	21ff      	movs	r1, #255	; 0xff
 800dad4:	5299      	strh	r1, [r3, r2]
 800dad6:	e01c      	b.n	800db12 <UART_Start_Receive_IT+0xaa>
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	2260      	movs	r2, #96	; 0x60
 800dadc:	217f      	movs	r1, #127	; 0x7f
 800dade:	5299      	strh	r1, [r3, r2]
 800dae0:	e017      	b.n	800db12 <UART_Start_Receive_IT+0xaa>
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	689a      	ldr	r2, [r3, #8]
 800dae6:	2380      	movs	r3, #128	; 0x80
 800dae8:	055b      	lsls	r3, r3, #21
 800daea:	429a      	cmp	r2, r3
 800daec:	d10d      	bne.n	800db0a <UART_Start_Receive_IT+0xa2>
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	691b      	ldr	r3, [r3, #16]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d104      	bne.n	800db00 <UART_Start_Receive_IT+0x98>
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	2260      	movs	r2, #96	; 0x60
 800dafa:	217f      	movs	r1, #127	; 0x7f
 800dafc:	5299      	strh	r1, [r3, r2]
 800dafe:	e008      	b.n	800db12 <UART_Start_Receive_IT+0xaa>
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	2260      	movs	r2, #96	; 0x60
 800db04:	213f      	movs	r1, #63	; 0x3f
 800db06:	5299      	strh	r1, [r3, r2]
 800db08:	e003      	b.n	800db12 <UART_Start_Receive_IT+0xaa>
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	2260      	movs	r2, #96	; 0x60
 800db0e:	2100      	movs	r1, #0
 800db10:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	2290      	movs	r2, #144	; 0x90
 800db16:	2100      	movs	r1, #0
 800db18:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	228c      	movs	r2, #140	; 0x8c
 800db1e:	2122      	movs	r1, #34	; 0x22
 800db20:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db22:	f3ef 8310 	mrs	r3, PRIMASK
 800db26:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 800db28:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800db2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800db2c:	2301      	movs	r3, #1
 800db2e:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db32:	f383 8810 	msr	PRIMASK, r3
}
 800db36:	46c0      	nop			; (mov r8, r8)
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	689a      	ldr	r2, [r3, #8]
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	2101      	movs	r1, #1
 800db44:	430a      	orrs	r2, r1
 800db46:	609a      	str	r2, [r3, #8]
 800db48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800db4a:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db4e:	f383 8810 	msr	PRIMASK, r3
}
 800db52:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800db58:	2380      	movs	r3, #128	; 0x80
 800db5a:	059b      	lsls	r3, r3, #22
 800db5c:	429a      	cmp	r2, r3
 800db5e:	d150      	bne.n	800dc02 <UART_Start_Receive_IT+0x19a>
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	2268      	movs	r2, #104	; 0x68
 800db64:	5a9b      	ldrh	r3, [r3, r2]
 800db66:	1dba      	adds	r2, r7, #6
 800db68:	8812      	ldrh	r2, [r2, #0]
 800db6a:	429a      	cmp	r2, r3
 800db6c:	d349      	bcc.n	800dc02 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	689a      	ldr	r2, [r3, #8]
 800db72:	2380      	movs	r3, #128	; 0x80
 800db74:	015b      	lsls	r3, r3, #5
 800db76:	429a      	cmp	r2, r3
 800db78:	d107      	bne.n	800db8a <UART_Start_Receive_IT+0x122>
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	691b      	ldr	r3, [r3, #16]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d103      	bne.n	800db8a <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	4a46      	ldr	r2, [pc, #280]	; (800dca0 <UART_Start_Receive_IT+0x238>)
 800db86:	675a      	str	r2, [r3, #116]	; 0x74
 800db88:	e002      	b.n	800db90 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	4a45      	ldr	r2, [pc, #276]	; (800dca4 <UART_Start_Receive_IT+0x23c>)
 800db8e:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	691b      	ldr	r3, [r3, #16]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d019      	beq.n	800dbcc <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db98:	f3ef 8310 	mrs	r3, PRIMASK
 800db9c:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800db9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dba0:	65bb      	str	r3, [r7, #88]	; 0x58
 800dba2:	2301      	movs	r3, #1
 800dba4:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dba8:	f383 8810 	msr	PRIMASK, r3
}
 800dbac:	46c0      	nop			; (mov r8, r8)
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	681a      	ldr	r2, [r3, #0]
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	2180      	movs	r1, #128	; 0x80
 800dbba:	0049      	lsls	r1, r1, #1
 800dbbc:	430a      	orrs	r2, r1
 800dbbe:	601a      	str	r2, [r3, #0]
 800dbc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dbc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dbc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbc6:	f383 8810 	msr	PRIMASK, r3
}
 800dbca:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dbcc:	f3ef 8310 	mrs	r3, PRIMASK
 800dbd0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800dbd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800dbd4:	657b      	str	r3, [r7, #84]	; 0x54
 800dbd6:	2301      	movs	r3, #1
 800dbd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dbda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbdc:	f383 8810 	msr	PRIMASK, r3
}
 800dbe0:	46c0      	nop			; (mov r8, r8)
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	689a      	ldr	r2, [r3, #8]
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	2180      	movs	r1, #128	; 0x80
 800dbee:	0549      	lsls	r1, r1, #21
 800dbf0:	430a      	orrs	r2, r1
 800dbf2:	609a      	str	r2, [r3, #8]
 800dbf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dbf6:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dbf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbfa:	f383 8810 	msr	PRIMASK, r3
}
 800dbfe:	46c0      	nop			; (mov r8, r8)
 800dc00:	e047      	b.n	800dc92 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	689a      	ldr	r2, [r3, #8]
 800dc06:	2380      	movs	r3, #128	; 0x80
 800dc08:	015b      	lsls	r3, r3, #5
 800dc0a:	429a      	cmp	r2, r3
 800dc0c:	d107      	bne.n	800dc1e <UART_Start_Receive_IT+0x1b6>
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	691b      	ldr	r3, [r3, #16]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d103      	bne.n	800dc1e <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	4a23      	ldr	r2, [pc, #140]	; (800dca8 <UART_Start_Receive_IT+0x240>)
 800dc1a:	675a      	str	r2, [r3, #116]	; 0x74
 800dc1c:	e002      	b.n	800dc24 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	4a22      	ldr	r2, [pc, #136]	; (800dcac <UART_Start_Receive_IT+0x244>)
 800dc22:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	691b      	ldr	r3, [r3, #16]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d019      	beq.n	800dc60 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc2c:	f3ef 8310 	mrs	r3, PRIMASK
 800dc30:	61fb      	str	r3, [r7, #28]
  return(result);
 800dc32:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800dc34:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dc36:	2301      	movs	r3, #1
 800dc38:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc3a:	6a3b      	ldr	r3, [r7, #32]
 800dc3c:	f383 8810 	msr	PRIMASK, r3
}
 800dc40:	46c0      	nop			; (mov r8, r8)
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	681a      	ldr	r2, [r3, #0]
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	2190      	movs	r1, #144	; 0x90
 800dc4e:	0049      	lsls	r1, r1, #1
 800dc50:	430a      	orrs	r2, r1
 800dc52:	601a      	str	r2, [r3, #0]
 800dc54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc56:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc5a:	f383 8810 	msr	PRIMASK, r3
}
 800dc5e:	e018      	b.n	800dc92 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc60:	f3ef 8310 	mrs	r3, PRIMASK
 800dc64:	613b      	str	r3, [r7, #16]
  return(result);
 800dc66:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800dc68:	653b      	str	r3, [r7, #80]	; 0x50
 800dc6a:	2301      	movs	r3, #1
 800dc6c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc6e:	697b      	ldr	r3, [r7, #20]
 800dc70:	f383 8810 	msr	PRIMASK, r3
}
 800dc74:	46c0      	nop			; (mov r8, r8)
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	681a      	ldr	r2, [r3, #0]
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	2120      	movs	r1, #32
 800dc82:	430a      	orrs	r2, r1
 800dc84:	601a      	str	r2, [r3, #0]
 800dc86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc88:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc8a:	69bb      	ldr	r3, [r7, #24]
 800dc8c:	f383 8810 	msr	PRIMASK, r3
}
 800dc90:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 800dc92:	2300      	movs	r3, #0
}
 800dc94:	0018      	movs	r0, r3
 800dc96:	46bd      	mov	sp, r7
 800dc98:	b018      	add	sp, #96	; 0x60
 800dc9a:	bd80      	pop	{r7, pc}
 800dc9c:	000001ff 	.word	0x000001ff
 800dca0:	0800e3d9 	.word	0x0800e3d9
 800dca4:	0800e0ed 	.word	0x0800e0ed
 800dca8:	0800df79 	.word	0x0800df79
 800dcac:	0800de05 	.word	0x0800de05

0800dcb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b08e      	sub	sp, #56	; 0x38
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dcb8:	f3ef 8310 	mrs	r3, PRIMASK
 800dcbc:	617b      	str	r3, [r7, #20]
  return(result);
 800dcbe:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dcc0:	637b      	str	r3, [r7, #52]	; 0x34
 800dcc2:	2301      	movs	r3, #1
 800dcc4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dcc6:	69bb      	ldr	r3, [r7, #24]
 800dcc8:	f383 8810 	msr	PRIMASK, r3
}
 800dccc:	46c0      	nop			; (mov r8, r8)
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	681a      	ldr	r2, [r3, #0]
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	4926      	ldr	r1, [pc, #152]	; (800dd74 <UART_EndRxTransfer+0xc4>)
 800dcda:	400a      	ands	r2, r1
 800dcdc:	601a      	str	r2, [r3, #0]
 800dcde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dce0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dce2:	69fb      	ldr	r3, [r7, #28]
 800dce4:	f383 8810 	msr	PRIMASK, r3
}
 800dce8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dcea:	f3ef 8310 	mrs	r3, PRIMASK
 800dcee:	623b      	str	r3, [r7, #32]
  return(result);
 800dcf0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dcf2:	633b      	str	r3, [r7, #48]	; 0x30
 800dcf4:	2301      	movs	r3, #1
 800dcf6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dcf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcfa:	f383 8810 	msr	PRIMASK, r3
}
 800dcfe:	46c0      	nop			; (mov r8, r8)
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	689a      	ldr	r2, [r3, #8]
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	491b      	ldr	r1, [pc, #108]	; (800dd78 <UART_EndRxTransfer+0xc8>)
 800dd0c:	400a      	ands	r2, r1
 800dd0e:	609a      	str	r2, [r3, #8]
 800dd10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd12:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd16:	f383 8810 	msr	PRIMASK, r3
}
 800dd1a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd20:	2b01      	cmp	r3, #1
 800dd22:	d118      	bne.n	800dd56 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd24:	f3ef 8310 	mrs	r3, PRIMASK
 800dd28:	60bb      	str	r3, [r7, #8]
  return(result);
 800dd2a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dd2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dd2e:	2301      	movs	r3, #1
 800dd30:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	f383 8810 	msr	PRIMASK, r3
}
 800dd38:	46c0      	nop			; (mov r8, r8)
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	681a      	ldr	r2, [r3, #0]
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	2110      	movs	r1, #16
 800dd46:	438a      	bics	r2, r1
 800dd48:	601a      	str	r2, [r3, #0]
 800dd4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd4c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd4e:	693b      	ldr	r3, [r7, #16]
 800dd50:	f383 8810 	msr	PRIMASK, r3
}
 800dd54:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	228c      	movs	r2, #140	; 0x8c
 800dd5a:	2120      	movs	r1, #32
 800dd5c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	2200      	movs	r2, #0
 800dd62:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	2200      	movs	r2, #0
 800dd68:	675a      	str	r2, [r3, #116]	; 0x74
}
 800dd6a:	46c0      	nop			; (mov r8, r8)
 800dd6c:	46bd      	mov	sp, r7
 800dd6e:	b00e      	add	sp, #56	; 0x38
 800dd70:	bd80      	pop	{r7, pc}
 800dd72:	46c0      	nop			; (mov r8, r8)
 800dd74:	fffffedf 	.word	0xfffffedf
 800dd78:	effffffe 	.word	0xeffffffe

0800dd7c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b084      	sub	sp, #16
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd88:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	225e      	movs	r2, #94	; 0x5e
 800dd8e:	2100      	movs	r1, #0
 800dd90:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	2256      	movs	r2, #86	; 0x56
 800dd96:	2100      	movs	r1, #0
 800dd98:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	0018      	movs	r0, r3
 800dd9e:	f7f6 ff95 	bl	8004ccc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dda2:	46c0      	nop			; (mov r8, r8)
 800dda4:	46bd      	mov	sp, r7
 800dda6:	b004      	add	sp, #16
 800dda8:	bd80      	pop	{r7, pc}

0800ddaa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ddaa:	b580      	push	{r7, lr}
 800ddac:	b086      	sub	sp, #24
 800ddae:	af00      	add	r7, sp, #0
 800ddb0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ddb2:	f3ef 8310 	mrs	r3, PRIMASK
 800ddb6:	60bb      	str	r3, [r7, #8]
  return(result);
 800ddb8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ddba:	617b      	str	r3, [r7, #20]
 800ddbc:	2301      	movs	r3, #1
 800ddbe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	f383 8810 	msr	PRIMASK, r3
}
 800ddc6:	46c0      	nop			; (mov r8, r8)
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	681a      	ldr	r2, [r3, #0]
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	2140      	movs	r1, #64	; 0x40
 800ddd4:	438a      	bics	r2, r1
 800ddd6:	601a      	str	r2, [r3, #0]
 800ddd8:	697b      	ldr	r3, [r7, #20]
 800ddda:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dddc:	693b      	ldr	r3, [r7, #16]
 800ddde:	f383 8810 	msr	PRIMASK, r3
}
 800dde2:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	2288      	movs	r2, #136	; 0x88
 800dde8:	2120      	movs	r1, #32
 800ddea:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	2200      	movs	r2, #0
 800ddf0:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	0018      	movs	r0, r3
 800ddf6:	f7ff fab5 	bl	800d364 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ddfa:	46c0      	nop			; (mov r8, r8)
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	b006      	add	sp, #24
 800de00:	bd80      	pop	{r7, pc}
	...

0800de04 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800de04:	b580      	push	{r7, lr}
 800de06:	b090      	sub	sp, #64	; 0x40
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800de0c:	203e      	movs	r0, #62	; 0x3e
 800de0e:	183b      	adds	r3, r7, r0
 800de10:	687a      	ldr	r2, [r7, #4]
 800de12:	2160      	movs	r1, #96	; 0x60
 800de14:	5a52      	ldrh	r2, [r2, r1]
 800de16:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	228c      	movs	r2, #140	; 0x8c
 800de1c:	589b      	ldr	r3, [r3, r2]
 800de1e:	2b22      	cmp	r3, #34	; 0x22
 800de20:	d000      	beq.n	800de24 <UART_RxISR_8BIT+0x20>
 800de22:	e09a      	b.n	800df5a <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800de2a:	213c      	movs	r1, #60	; 0x3c
 800de2c:	187b      	adds	r3, r7, r1
 800de2e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800de30:	187b      	adds	r3, r7, r1
 800de32:	881b      	ldrh	r3, [r3, #0]
 800de34:	b2da      	uxtb	r2, r3
 800de36:	183b      	adds	r3, r7, r0
 800de38:	881b      	ldrh	r3, [r3, #0]
 800de3a:	b2d9      	uxtb	r1, r3
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de40:	400a      	ands	r2, r1
 800de42:	b2d2      	uxtb	r2, r2
 800de44:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de4a:	1c5a      	adds	r2, r3, #1
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	225e      	movs	r2, #94	; 0x5e
 800de54:	5a9b      	ldrh	r3, [r3, r2]
 800de56:	b29b      	uxth	r3, r3
 800de58:	3b01      	subs	r3, #1
 800de5a:	b299      	uxth	r1, r3
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	225e      	movs	r2, #94	; 0x5e
 800de60:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	225e      	movs	r2, #94	; 0x5e
 800de66:	5a9b      	ldrh	r3, [r3, r2]
 800de68:	b29b      	uxth	r3, r3
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d000      	beq.n	800de70 <UART_RxISR_8BIT+0x6c>
 800de6e:	e07c      	b.n	800df6a <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de70:	f3ef 8310 	mrs	r3, PRIMASK
 800de74:	61bb      	str	r3, [r7, #24]
  return(result);
 800de76:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800de78:	63bb      	str	r3, [r7, #56]	; 0x38
 800de7a:	2301      	movs	r3, #1
 800de7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de7e:	69fb      	ldr	r3, [r7, #28]
 800de80:	f383 8810 	msr	PRIMASK, r3
}
 800de84:	46c0      	nop			; (mov r8, r8)
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	681a      	ldr	r2, [r3, #0]
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	4938      	ldr	r1, [pc, #224]	; (800df74 <UART_RxISR_8BIT+0x170>)
 800de92:	400a      	ands	r2, r1
 800de94:	601a      	str	r2, [r3, #0]
 800de96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de98:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de9a:	6a3b      	ldr	r3, [r7, #32]
 800de9c:	f383 8810 	msr	PRIMASK, r3
}
 800dea0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dea2:	f3ef 8310 	mrs	r3, PRIMASK
 800dea6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800dea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800deaa:	637b      	str	r3, [r7, #52]	; 0x34
 800deac:	2301      	movs	r3, #1
 800deae:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800deb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deb2:	f383 8810 	msr	PRIMASK, r3
}
 800deb6:	46c0      	nop			; (mov r8, r8)
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	689a      	ldr	r2, [r3, #8]
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	2101      	movs	r1, #1
 800dec4:	438a      	bics	r2, r1
 800dec6:	609a      	str	r2, [r3, #8]
 800dec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800deca:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800decc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dece:	f383 8810 	msr	PRIMASK, r3
}
 800ded2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	228c      	movs	r2, #140	; 0x8c
 800ded8:	2120      	movs	r1, #32
 800deda:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	2200      	movs	r2, #0
 800dee0:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	2200      	movs	r2, #0
 800dee6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800deec:	2b01      	cmp	r3, #1
 800deee:	d12f      	bne.n	800df50 <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	2200      	movs	r2, #0
 800def4:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800def6:	f3ef 8310 	mrs	r3, PRIMASK
 800defa:	60fb      	str	r3, [r7, #12]
  return(result);
 800defc:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800defe:	633b      	str	r3, [r7, #48]	; 0x30
 800df00:	2301      	movs	r3, #1
 800df02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df04:	693b      	ldr	r3, [r7, #16]
 800df06:	f383 8810 	msr	PRIMASK, r3
}
 800df0a:	46c0      	nop			; (mov r8, r8)
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	681a      	ldr	r2, [r3, #0]
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	2110      	movs	r1, #16
 800df18:	438a      	bics	r2, r1
 800df1a:	601a      	str	r2, [r3, #0]
 800df1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df1e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df20:	697b      	ldr	r3, [r7, #20]
 800df22:	f383 8810 	msr	PRIMASK, r3
}
 800df26:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	69db      	ldr	r3, [r3, #28]
 800df2e:	2210      	movs	r2, #16
 800df30:	4013      	ands	r3, r2
 800df32:	2b10      	cmp	r3, #16
 800df34:	d103      	bne.n	800df3e <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	2210      	movs	r2, #16
 800df3c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	225c      	movs	r2, #92	; 0x5c
 800df42:	5a9a      	ldrh	r2, [r3, r2]
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	0011      	movs	r1, r2
 800df48:	0018      	movs	r0, r3
 800df4a:	f7ff fa13 	bl	800d374 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800df4e:	e00c      	b.n	800df6a <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	0018      	movs	r0, r3
 800df54:	f7f6 fee8 	bl	8004d28 <HAL_UART_RxCpltCallback>
}
 800df58:	e007      	b.n	800df6a <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	699a      	ldr	r2, [r3, #24]
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	2108      	movs	r1, #8
 800df66:	430a      	orrs	r2, r1
 800df68:	619a      	str	r2, [r3, #24]
}
 800df6a:	46c0      	nop			; (mov r8, r8)
 800df6c:	46bd      	mov	sp, r7
 800df6e:	b010      	add	sp, #64	; 0x40
 800df70:	bd80      	pop	{r7, pc}
 800df72:	46c0      	nop			; (mov r8, r8)
 800df74:	fffffedf 	.word	0xfffffedf

0800df78 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800df78:	b580      	push	{r7, lr}
 800df7a:	b090      	sub	sp, #64	; 0x40
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800df80:	203e      	movs	r0, #62	; 0x3e
 800df82:	183b      	adds	r3, r7, r0
 800df84:	687a      	ldr	r2, [r7, #4]
 800df86:	2160      	movs	r1, #96	; 0x60
 800df88:	5a52      	ldrh	r2, [r2, r1]
 800df8a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	228c      	movs	r2, #140	; 0x8c
 800df90:	589b      	ldr	r3, [r3, r2]
 800df92:	2b22      	cmp	r3, #34	; 0x22
 800df94:	d000      	beq.n	800df98 <UART_RxISR_16BIT+0x20>
 800df96:	e09a      	b.n	800e0ce <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800df9e:	213c      	movs	r1, #60	; 0x3c
 800dfa0:	187b      	adds	r3, r7, r1
 800dfa2:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dfa8:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 800dfaa:	187b      	adds	r3, r7, r1
 800dfac:	183a      	adds	r2, r7, r0
 800dfae:	881b      	ldrh	r3, [r3, #0]
 800dfb0:	8812      	ldrh	r2, [r2, #0]
 800dfb2:	4013      	ands	r3, r2
 800dfb4:	b29a      	uxth	r2, r3
 800dfb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfb8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dfbe:	1c9a      	adds	r2, r3, #2
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	225e      	movs	r2, #94	; 0x5e
 800dfc8:	5a9b      	ldrh	r3, [r3, r2]
 800dfca:	b29b      	uxth	r3, r3
 800dfcc:	3b01      	subs	r3, #1
 800dfce:	b299      	uxth	r1, r3
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	225e      	movs	r2, #94	; 0x5e
 800dfd4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	225e      	movs	r2, #94	; 0x5e
 800dfda:	5a9b      	ldrh	r3, [r3, r2]
 800dfdc:	b29b      	uxth	r3, r3
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d000      	beq.n	800dfe4 <UART_RxISR_16BIT+0x6c>
 800dfe2:	e07c      	b.n	800e0de <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dfe4:	f3ef 8310 	mrs	r3, PRIMASK
 800dfe8:	617b      	str	r3, [r7, #20]
  return(result);
 800dfea:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dfec:	637b      	str	r3, [r7, #52]	; 0x34
 800dfee:	2301      	movs	r3, #1
 800dff0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dff2:	69bb      	ldr	r3, [r7, #24]
 800dff4:	f383 8810 	msr	PRIMASK, r3
}
 800dff8:	46c0      	nop			; (mov r8, r8)
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	681a      	ldr	r2, [r3, #0]
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	4938      	ldr	r1, [pc, #224]	; (800e0e8 <UART_RxISR_16BIT+0x170>)
 800e006:	400a      	ands	r2, r1
 800e008:	601a      	str	r2, [r3, #0]
 800e00a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e00c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e00e:	69fb      	ldr	r3, [r7, #28]
 800e010:	f383 8810 	msr	PRIMASK, r3
}
 800e014:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e016:	f3ef 8310 	mrs	r3, PRIMASK
 800e01a:	623b      	str	r3, [r7, #32]
  return(result);
 800e01c:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e01e:	633b      	str	r3, [r7, #48]	; 0x30
 800e020:	2301      	movs	r3, #1
 800e022:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e026:	f383 8810 	msr	PRIMASK, r3
}
 800e02a:	46c0      	nop			; (mov r8, r8)
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	689a      	ldr	r2, [r3, #8]
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	2101      	movs	r1, #1
 800e038:	438a      	bics	r2, r1
 800e03a:	609a      	str	r2, [r3, #8]
 800e03c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e03e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e042:	f383 8810 	msr	PRIMASK, r3
}
 800e046:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	228c      	movs	r2, #140	; 0x8c
 800e04c:	2120      	movs	r1, #32
 800e04e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	2200      	movs	r2, #0
 800e054:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	2200      	movs	r2, #0
 800e05a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e060:	2b01      	cmp	r3, #1
 800e062:	d12f      	bne.n	800e0c4 <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	2200      	movs	r2, #0
 800e068:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e06a:	f3ef 8310 	mrs	r3, PRIMASK
 800e06e:	60bb      	str	r3, [r7, #8]
  return(result);
 800e070:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e072:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e074:	2301      	movs	r3, #1
 800e076:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	f383 8810 	msr	PRIMASK, r3
}
 800e07e:	46c0      	nop			; (mov r8, r8)
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	681a      	ldr	r2, [r3, #0]
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	2110      	movs	r1, #16
 800e08c:	438a      	bics	r2, r1
 800e08e:	601a      	str	r2, [r3, #0]
 800e090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e092:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e094:	693b      	ldr	r3, [r7, #16]
 800e096:	f383 8810 	msr	PRIMASK, r3
}
 800e09a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	69db      	ldr	r3, [r3, #28]
 800e0a2:	2210      	movs	r2, #16
 800e0a4:	4013      	ands	r3, r2
 800e0a6:	2b10      	cmp	r3, #16
 800e0a8:	d103      	bne.n	800e0b2 <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	2210      	movs	r2, #16
 800e0b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	225c      	movs	r2, #92	; 0x5c
 800e0b6:	5a9a      	ldrh	r2, [r3, r2]
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	0011      	movs	r1, r2
 800e0bc:	0018      	movs	r0, r3
 800e0be:	f7ff f959 	bl	800d374 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e0c2:	e00c      	b.n	800e0de <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	0018      	movs	r0, r3
 800e0c8:	f7f6 fe2e 	bl	8004d28 <HAL_UART_RxCpltCallback>
}
 800e0cc:	e007      	b.n	800e0de <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	699a      	ldr	r2, [r3, #24]
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	2108      	movs	r1, #8
 800e0da:	430a      	orrs	r2, r1
 800e0dc:	619a      	str	r2, [r3, #24]
}
 800e0de:	46c0      	nop			; (mov r8, r8)
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	b010      	add	sp, #64	; 0x40
 800e0e4:	bd80      	pop	{r7, pc}
 800e0e6:	46c0      	nop			; (mov r8, r8)
 800e0e8:	fffffedf 	.word	0xfffffedf

0800e0ec <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b09c      	sub	sp, #112	; 0x70
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800e0f4:	236a      	movs	r3, #106	; 0x6a
 800e0f6:	18fb      	adds	r3, r7, r3
 800e0f8:	687a      	ldr	r2, [r7, #4]
 800e0fa:	2160      	movs	r1, #96	; 0x60
 800e0fc:	5a52      	ldrh	r2, [r2, r1]
 800e0fe:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	69db      	ldr	r3, [r3, #28]
 800e106:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	689b      	ldr	r3, [r3, #8]
 800e116:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	228c      	movs	r2, #140	; 0x8c
 800e11c:	589b      	ldr	r3, [r3, r2]
 800e11e:	2b22      	cmp	r3, #34	; 0x22
 800e120:	d000      	beq.n	800e124 <UART_RxISR_8BIT_FIFOEN+0x38>
 800e122:	e144      	b.n	800e3ae <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e124:	235e      	movs	r3, #94	; 0x5e
 800e126:	18fb      	adds	r3, r7, r3
 800e128:	687a      	ldr	r2, [r7, #4]
 800e12a:	2168      	movs	r1, #104	; 0x68
 800e12c:	5a52      	ldrh	r2, [r2, r1]
 800e12e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e130:	e0eb      	b.n	800e30a <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e138:	215c      	movs	r1, #92	; 0x5c
 800e13a:	187b      	adds	r3, r7, r1
 800e13c:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e13e:	187b      	adds	r3, r7, r1
 800e140:	881b      	ldrh	r3, [r3, #0]
 800e142:	b2da      	uxtb	r2, r3
 800e144:	236a      	movs	r3, #106	; 0x6a
 800e146:	18fb      	adds	r3, r7, r3
 800e148:	881b      	ldrh	r3, [r3, #0]
 800e14a:	b2d9      	uxtb	r1, r3
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e150:	400a      	ands	r2, r1
 800e152:	b2d2      	uxtb	r2, r2
 800e154:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e15a:	1c5a      	adds	r2, r3, #1
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	225e      	movs	r2, #94	; 0x5e
 800e164:	5a9b      	ldrh	r3, [r3, r2]
 800e166:	b29b      	uxth	r3, r3
 800e168:	3b01      	subs	r3, #1
 800e16a:	b299      	uxth	r1, r3
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	225e      	movs	r2, #94	; 0x5e
 800e170:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	69db      	ldr	r3, [r3, #28]
 800e178:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e17a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e17c:	2207      	movs	r2, #7
 800e17e:	4013      	ands	r3, r2
 800e180:	d049      	beq.n	800e216 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e182:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e184:	2201      	movs	r2, #1
 800e186:	4013      	ands	r3, r2
 800e188:	d010      	beq.n	800e1ac <UART_RxISR_8BIT_FIFOEN+0xc0>
 800e18a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e18c:	2380      	movs	r3, #128	; 0x80
 800e18e:	005b      	lsls	r3, r3, #1
 800e190:	4013      	ands	r3, r2
 800e192:	d00b      	beq.n	800e1ac <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	2201      	movs	r2, #1
 800e19a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	2290      	movs	r2, #144	; 0x90
 800e1a0:	589b      	ldr	r3, [r3, r2]
 800e1a2:	2201      	movs	r2, #1
 800e1a4:	431a      	orrs	r2, r3
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	2190      	movs	r1, #144	; 0x90
 800e1aa:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e1ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e1ae:	2202      	movs	r2, #2
 800e1b0:	4013      	ands	r3, r2
 800e1b2:	d00f      	beq.n	800e1d4 <UART_RxISR_8BIT_FIFOEN+0xe8>
 800e1b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e1b6:	2201      	movs	r2, #1
 800e1b8:	4013      	ands	r3, r2
 800e1ba:	d00b      	beq.n	800e1d4 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	2202      	movs	r2, #2
 800e1c2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	2290      	movs	r2, #144	; 0x90
 800e1c8:	589b      	ldr	r3, [r3, r2]
 800e1ca:	2204      	movs	r2, #4
 800e1cc:	431a      	orrs	r2, r3
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	2190      	movs	r1, #144	; 0x90
 800e1d2:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e1d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e1d6:	2204      	movs	r2, #4
 800e1d8:	4013      	ands	r3, r2
 800e1da:	d00f      	beq.n	800e1fc <UART_RxISR_8BIT_FIFOEN+0x110>
 800e1dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e1de:	2201      	movs	r2, #1
 800e1e0:	4013      	ands	r3, r2
 800e1e2:	d00b      	beq.n	800e1fc <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	2204      	movs	r2, #4
 800e1ea:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	2290      	movs	r2, #144	; 0x90
 800e1f0:	589b      	ldr	r3, [r3, r2]
 800e1f2:	2202      	movs	r2, #2
 800e1f4:	431a      	orrs	r2, r3
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	2190      	movs	r1, #144	; 0x90
 800e1fa:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	2290      	movs	r2, #144	; 0x90
 800e200:	589b      	ldr	r3, [r3, r2]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d007      	beq.n	800e216 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	0018      	movs	r0, r3
 800e20a:	f7f6 fd5f 	bl	8004ccc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	2290      	movs	r2, #144	; 0x90
 800e212:	2100      	movs	r1, #0
 800e214:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	225e      	movs	r2, #94	; 0x5e
 800e21a:	5a9b      	ldrh	r3, [r3, r2]
 800e21c:	b29b      	uxth	r3, r3
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d173      	bne.n	800e30a <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e222:	f3ef 8310 	mrs	r3, PRIMASK
 800e226:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800e228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e22a:	65bb      	str	r3, [r7, #88]	; 0x58
 800e22c:	2301      	movs	r3, #1
 800e22e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e232:	f383 8810 	msr	PRIMASK, r3
}
 800e236:	46c0      	nop			; (mov r8, r8)
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	681a      	ldr	r2, [r3, #0]
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	4961      	ldr	r1, [pc, #388]	; (800e3c8 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 800e244:	400a      	ands	r2, r1
 800e246:	601a      	str	r2, [r3, #0]
 800e248:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e24a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e24c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e24e:	f383 8810 	msr	PRIMASK, r3
}
 800e252:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e254:	f3ef 8310 	mrs	r3, PRIMASK
 800e258:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 800e25a:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e25c:	657b      	str	r3, [r7, #84]	; 0x54
 800e25e:	2301      	movs	r3, #1
 800e260:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e264:	f383 8810 	msr	PRIMASK, r3
}
 800e268:	46c0      	nop			; (mov r8, r8)
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	689a      	ldr	r2, [r3, #8]
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	4955      	ldr	r1, [pc, #340]	; (800e3cc <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 800e276:	400a      	ands	r2, r1
 800e278:	609a      	str	r2, [r3, #8]
 800e27a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e27c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e27e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e280:	f383 8810 	msr	PRIMASK, r3
}
 800e284:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	228c      	movs	r2, #140	; 0x8c
 800e28a:	2120      	movs	r1, #32
 800e28c:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	2200      	movs	r2, #0
 800e292:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	2200      	movs	r2, #0
 800e298:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e29e:	2b01      	cmp	r3, #1
 800e2a0:	d12f      	bne.n	800e302 <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e2a8:	f3ef 8310 	mrs	r3, PRIMASK
 800e2ac:	623b      	str	r3, [r7, #32]
  return(result);
 800e2ae:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e2b0:	653b      	str	r3, [r7, #80]	; 0x50
 800e2b2:	2301      	movs	r3, #1
 800e2b4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2b8:	f383 8810 	msr	PRIMASK, r3
}
 800e2bc:	46c0      	nop			; (mov r8, r8)
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	681a      	ldr	r2, [r3, #0]
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	2110      	movs	r1, #16
 800e2ca:	438a      	bics	r2, r1
 800e2cc:	601a      	str	r2, [r3, #0]
 800e2ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2d0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e2d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2d4:	f383 8810 	msr	PRIMASK, r3
}
 800e2d8:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	69db      	ldr	r3, [r3, #28]
 800e2e0:	2210      	movs	r2, #16
 800e2e2:	4013      	ands	r3, r2
 800e2e4:	2b10      	cmp	r3, #16
 800e2e6:	d103      	bne.n	800e2f0 <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	2210      	movs	r2, #16
 800e2ee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	225c      	movs	r2, #92	; 0x5c
 800e2f4:	5a9a      	ldrh	r2, [r3, r2]
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	0011      	movs	r1, r2
 800e2fa:	0018      	movs	r0, r3
 800e2fc:	f7ff f83a 	bl	800d374 <HAL_UARTEx_RxEventCallback>
 800e300:	e003      	b.n	800e30a <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	0018      	movs	r0, r3
 800e306:	f7f6 fd0f 	bl	8004d28 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e30a:	235e      	movs	r3, #94	; 0x5e
 800e30c:	18fb      	adds	r3, r7, r3
 800e30e:	881b      	ldrh	r3, [r3, #0]
 800e310:	2b00      	cmp	r3, #0
 800e312:	d004      	beq.n	800e31e <UART_RxISR_8BIT_FIFOEN+0x232>
 800e314:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e316:	2220      	movs	r2, #32
 800e318:	4013      	ands	r3, r2
 800e31a:	d000      	beq.n	800e31e <UART_RxISR_8BIT_FIFOEN+0x232>
 800e31c:	e709      	b.n	800e132 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e31e:	204e      	movs	r0, #78	; 0x4e
 800e320:	183b      	adds	r3, r7, r0
 800e322:	687a      	ldr	r2, [r7, #4]
 800e324:	215e      	movs	r1, #94	; 0x5e
 800e326:	5a52      	ldrh	r2, [r2, r1]
 800e328:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e32a:	0001      	movs	r1, r0
 800e32c:	187b      	adds	r3, r7, r1
 800e32e:	881b      	ldrh	r3, [r3, #0]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d044      	beq.n	800e3be <UART_RxISR_8BIT_FIFOEN+0x2d2>
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	2268      	movs	r2, #104	; 0x68
 800e338:	5a9b      	ldrh	r3, [r3, r2]
 800e33a:	187a      	adds	r2, r7, r1
 800e33c:	8812      	ldrh	r2, [r2, #0]
 800e33e:	429a      	cmp	r2, r3
 800e340:	d23d      	bcs.n	800e3be <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e342:	f3ef 8310 	mrs	r3, PRIMASK
 800e346:	60bb      	str	r3, [r7, #8]
  return(result);
 800e348:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e34a:	64bb      	str	r3, [r7, #72]	; 0x48
 800e34c:	2301      	movs	r3, #1
 800e34e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	f383 8810 	msr	PRIMASK, r3
}
 800e356:	46c0      	nop			; (mov r8, r8)
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	689a      	ldr	r2, [r3, #8]
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	491b      	ldr	r1, [pc, #108]	; (800e3d0 <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 800e364:	400a      	ands	r2, r1
 800e366:	609a      	str	r2, [r3, #8]
 800e368:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e36a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e36c:	693b      	ldr	r3, [r7, #16]
 800e36e:	f383 8810 	msr	PRIMASK, r3
}
 800e372:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	4a17      	ldr	r2, [pc, #92]	; (800e3d4 <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 800e378:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e37a:	f3ef 8310 	mrs	r3, PRIMASK
 800e37e:	617b      	str	r3, [r7, #20]
  return(result);
 800e380:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e382:	647b      	str	r3, [r7, #68]	; 0x44
 800e384:	2301      	movs	r3, #1
 800e386:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e388:	69bb      	ldr	r3, [r7, #24]
 800e38a:	f383 8810 	msr	PRIMASK, r3
}
 800e38e:	46c0      	nop			; (mov r8, r8)
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	681a      	ldr	r2, [r3, #0]
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	2120      	movs	r1, #32
 800e39c:	430a      	orrs	r2, r1
 800e39e:	601a      	str	r2, [r3, #0]
 800e3a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e3a2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e3a4:	69fb      	ldr	r3, [r7, #28]
 800e3a6:	f383 8810 	msr	PRIMASK, r3
}
 800e3aa:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e3ac:	e007      	b.n	800e3be <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	699a      	ldr	r2, [r3, #24]
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	2108      	movs	r1, #8
 800e3ba:	430a      	orrs	r2, r1
 800e3bc:	619a      	str	r2, [r3, #24]
}
 800e3be:	46c0      	nop			; (mov r8, r8)
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	b01c      	add	sp, #112	; 0x70
 800e3c4:	bd80      	pop	{r7, pc}
 800e3c6:	46c0      	nop			; (mov r8, r8)
 800e3c8:	fffffeff 	.word	0xfffffeff
 800e3cc:	effffffe 	.word	0xeffffffe
 800e3d0:	efffffff 	.word	0xefffffff
 800e3d4:	0800de05 	.word	0x0800de05

0800e3d8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b09e      	sub	sp, #120	; 0x78
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800e3e0:	2372      	movs	r3, #114	; 0x72
 800e3e2:	18fb      	adds	r3, r7, r3
 800e3e4:	687a      	ldr	r2, [r7, #4]
 800e3e6:	2160      	movs	r1, #96	; 0x60
 800e3e8:	5a52      	ldrh	r2, [r2, r1]
 800e3ea:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	69db      	ldr	r3, [r3, #28]
 800e3f2:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	689b      	ldr	r3, [r3, #8]
 800e402:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	228c      	movs	r2, #140	; 0x8c
 800e408:	589b      	ldr	r3, [r3, r2]
 800e40a:	2b22      	cmp	r3, #34	; 0x22
 800e40c:	d000      	beq.n	800e410 <UART_RxISR_16BIT_FIFOEN+0x38>
 800e40e:	e144      	b.n	800e69a <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e410:	2366      	movs	r3, #102	; 0x66
 800e412:	18fb      	adds	r3, r7, r3
 800e414:	687a      	ldr	r2, [r7, #4]
 800e416:	2168      	movs	r1, #104	; 0x68
 800e418:	5a52      	ldrh	r2, [r2, r1]
 800e41a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e41c:	e0eb      	b.n	800e5f6 <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e424:	2164      	movs	r1, #100	; 0x64
 800e426:	187b      	adds	r3, r7, r1
 800e428:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e42e:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 800e430:	187b      	adds	r3, r7, r1
 800e432:	2272      	movs	r2, #114	; 0x72
 800e434:	18ba      	adds	r2, r7, r2
 800e436:	881b      	ldrh	r3, [r3, #0]
 800e438:	8812      	ldrh	r2, [r2, #0]
 800e43a:	4013      	ands	r3, r2
 800e43c:	b29a      	uxth	r2, r3
 800e43e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e440:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e446:	1c9a      	adds	r2, r3, #2
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	225e      	movs	r2, #94	; 0x5e
 800e450:	5a9b      	ldrh	r3, [r3, r2]
 800e452:	b29b      	uxth	r3, r3
 800e454:	3b01      	subs	r3, #1
 800e456:	b299      	uxth	r1, r3
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	225e      	movs	r2, #94	; 0x5e
 800e45c:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	69db      	ldr	r3, [r3, #28]
 800e464:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e466:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e468:	2207      	movs	r2, #7
 800e46a:	4013      	ands	r3, r2
 800e46c:	d049      	beq.n	800e502 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e46e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e470:	2201      	movs	r2, #1
 800e472:	4013      	ands	r3, r2
 800e474:	d010      	beq.n	800e498 <UART_RxISR_16BIT_FIFOEN+0xc0>
 800e476:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e478:	2380      	movs	r3, #128	; 0x80
 800e47a:	005b      	lsls	r3, r3, #1
 800e47c:	4013      	ands	r3, r2
 800e47e:	d00b      	beq.n	800e498 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	2201      	movs	r2, #1
 800e486:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	2290      	movs	r2, #144	; 0x90
 800e48c:	589b      	ldr	r3, [r3, r2]
 800e48e:	2201      	movs	r2, #1
 800e490:	431a      	orrs	r2, r3
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	2190      	movs	r1, #144	; 0x90
 800e496:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e498:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e49a:	2202      	movs	r2, #2
 800e49c:	4013      	ands	r3, r2
 800e49e:	d00f      	beq.n	800e4c0 <UART_RxISR_16BIT_FIFOEN+0xe8>
 800e4a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e4a2:	2201      	movs	r2, #1
 800e4a4:	4013      	ands	r3, r2
 800e4a6:	d00b      	beq.n	800e4c0 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	2202      	movs	r2, #2
 800e4ae:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	2290      	movs	r2, #144	; 0x90
 800e4b4:	589b      	ldr	r3, [r3, r2]
 800e4b6:	2204      	movs	r2, #4
 800e4b8:	431a      	orrs	r2, r3
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	2190      	movs	r1, #144	; 0x90
 800e4be:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e4c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e4c2:	2204      	movs	r2, #4
 800e4c4:	4013      	ands	r3, r2
 800e4c6:	d00f      	beq.n	800e4e8 <UART_RxISR_16BIT_FIFOEN+0x110>
 800e4c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e4ca:	2201      	movs	r2, #1
 800e4cc:	4013      	ands	r3, r2
 800e4ce:	d00b      	beq.n	800e4e8 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	2204      	movs	r2, #4
 800e4d6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	2290      	movs	r2, #144	; 0x90
 800e4dc:	589b      	ldr	r3, [r3, r2]
 800e4de:	2202      	movs	r2, #2
 800e4e0:	431a      	orrs	r2, r3
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	2190      	movs	r1, #144	; 0x90
 800e4e6:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	2290      	movs	r2, #144	; 0x90
 800e4ec:	589b      	ldr	r3, [r3, r2]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d007      	beq.n	800e502 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	0018      	movs	r0, r3
 800e4f6:	f7f6 fbe9 	bl	8004ccc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	2290      	movs	r2, #144	; 0x90
 800e4fe:	2100      	movs	r1, #0
 800e500:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	225e      	movs	r2, #94	; 0x5e
 800e506:	5a9b      	ldrh	r3, [r3, r2]
 800e508:	b29b      	uxth	r3, r3
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d173      	bne.n	800e5f6 <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e50e:	f3ef 8310 	mrs	r3, PRIMASK
 800e512:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800e514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e516:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e518:	2301      	movs	r3, #1
 800e51a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e51c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e51e:	f383 8810 	msr	PRIMASK, r3
}
 800e522:	46c0      	nop			; (mov r8, r8)
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	681a      	ldr	r2, [r3, #0]
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	4961      	ldr	r1, [pc, #388]	; (800e6b4 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 800e530:	400a      	ands	r2, r1
 800e532:	601a      	str	r2, [r3, #0]
 800e534:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e536:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e53a:	f383 8810 	msr	PRIMASK, r3
}
 800e53e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e540:	f3ef 8310 	mrs	r3, PRIMASK
 800e544:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800e546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e548:	65bb      	str	r3, [r7, #88]	; 0x58
 800e54a:	2301      	movs	r3, #1
 800e54c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e54e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e550:	f383 8810 	msr	PRIMASK, r3
}
 800e554:	46c0      	nop			; (mov r8, r8)
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	689a      	ldr	r2, [r3, #8]
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	4955      	ldr	r1, [pc, #340]	; (800e6b8 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 800e562:	400a      	ands	r2, r1
 800e564:	609a      	str	r2, [r3, #8]
 800e566:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e568:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e56a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e56c:	f383 8810 	msr	PRIMASK, r3
}
 800e570:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	228c      	movs	r2, #140	; 0x8c
 800e576:	2120      	movs	r1, #32
 800e578:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	2200      	movs	r2, #0
 800e57e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	2200      	movs	r2, #0
 800e584:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e58a:	2b01      	cmp	r3, #1
 800e58c:	d12f      	bne.n	800e5ee <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	2200      	movs	r2, #0
 800e592:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e594:	f3ef 8310 	mrs	r3, PRIMASK
 800e598:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800e59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e59c:	657b      	str	r3, [r7, #84]	; 0x54
 800e59e:	2301      	movs	r3, #1
 800e5a0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e5a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5a4:	f383 8810 	msr	PRIMASK, r3
}
 800e5a8:	46c0      	nop			; (mov r8, r8)
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	681a      	ldr	r2, [r3, #0]
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	2110      	movs	r1, #16
 800e5b6:	438a      	bics	r2, r1
 800e5b8:	601a      	str	r2, [r3, #0]
 800e5ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e5bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e5be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5c0:	f383 8810 	msr	PRIMASK, r3
}
 800e5c4:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	69db      	ldr	r3, [r3, #28]
 800e5cc:	2210      	movs	r2, #16
 800e5ce:	4013      	ands	r3, r2
 800e5d0:	2b10      	cmp	r3, #16
 800e5d2:	d103      	bne.n	800e5dc <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	2210      	movs	r2, #16
 800e5da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	225c      	movs	r2, #92	; 0x5c
 800e5e0:	5a9a      	ldrh	r2, [r3, r2]
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	0011      	movs	r1, r2
 800e5e6:	0018      	movs	r0, r3
 800e5e8:	f7fe fec4 	bl	800d374 <HAL_UARTEx_RxEventCallback>
 800e5ec:	e003      	b.n	800e5f6 <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	0018      	movs	r0, r3
 800e5f2:	f7f6 fb99 	bl	8004d28 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e5f6:	2366      	movs	r3, #102	; 0x66
 800e5f8:	18fb      	adds	r3, r7, r3
 800e5fa:	881b      	ldrh	r3, [r3, #0]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d004      	beq.n	800e60a <UART_RxISR_16BIT_FIFOEN+0x232>
 800e600:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e602:	2220      	movs	r2, #32
 800e604:	4013      	ands	r3, r2
 800e606:	d000      	beq.n	800e60a <UART_RxISR_16BIT_FIFOEN+0x232>
 800e608:	e709      	b.n	800e41e <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e60a:	2052      	movs	r0, #82	; 0x52
 800e60c:	183b      	adds	r3, r7, r0
 800e60e:	687a      	ldr	r2, [r7, #4]
 800e610:	215e      	movs	r1, #94	; 0x5e
 800e612:	5a52      	ldrh	r2, [r2, r1]
 800e614:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e616:	0001      	movs	r1, r0
 800e618:	187b      	adds	r3, r7, r1
 800e61a:	881b      	ldrh	r3, [r3, #0]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d044      	beq.n	800e6aa <UART_RxISR_16BIT_FIFOEN+0x2d2>
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	2268      	movs	r2, #104	; 0x68
 800e624:	5a9b      	ldrh	r3, [r3, r2]
 800e626:	187a      	adds	r2, r7, r1
 800e628:	8812      	ldrh	r2, [r2, #0]
 800e62a:	429a      	cmp	r2, r3
 800e62c:	d23d      	bcs.n	800e6aa <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e62e:	f3ef 8310 	mrs	r3, PRIMASK
 800e632:	60fb      	str	r3, [r7, #12]
  return(result);
 800e634:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e636:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e638:	2301      	movs	r3, #1
 800e63a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e63c:	693b      	ldr	r3, [r7, #16]
 800e63e:	f383 8810 	msr	PRIMASK, r3
}
 800e642:	46c0      	nop			; (mov r8, r8)
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	689a      	ldr	r2, [r3, #8]
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	491b      	ldr	r1, [pc, #108]	; (800e6bc <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 800e650:	400a      	ands	r2, r1
 800e652:	609a      	str	r2, [r3, #8]
 800e654:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e656:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e658:	697b      	ldr	r3, [r7, #20]
 800e65a:	f383 8810 	msr	PRIMASK, r3
}
 800e65e:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	4a17      	ldr	r2, [pc, #92]	; (800e6c0 <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 800e664:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e666:	f3ef 8310 	mrs	r3, PRIMASK
 800e66a:	61bb      	str	r3, [r7, #24]
  return(result);
 800e66c:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e66e:	64bb      	str	r3, [r7, #72]	; 0x48
 800e670:	2301      	movs	r3, #1
 800e672:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e674:	69fb      	ldr	r3, [r7, #28]
 800e676:	f383 8810 	msr	PRIMASK, r3
}
 800e67a:	46c0      	nop			; (mov r8, r8)
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	681a      	ldr	r2, [r3, #0]
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	2120      	movs	r1, #32
 800e688:	430a      	orrs	r2, r1
 800e68a:	601a      	str	r2, [r3, #0]
 800e68c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e68e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e690:	6a3b      	ldr	r3, [r7, #32]
 800e692:	f383 8810 	msr	PRIMASK, r3
}
 800e696:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e698:	e007      	b.n	800e6aa <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	699a      	ldr	r2, [r3, #24]
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	2108      	movs	r1, #8
 800e6a6:	430a      	orrs	r2, r1
 800e6a8:	619a      	str	r2, [r3, #24]
}
 800e6aa:	46c0      	nop			; (mov r8, r8)
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	b01e      	add	sp, #120	; 0x78
 800e6b0:	bd80      	pop	{r7, pc}
 800e6b2:	46c0      	nop			; (mov r8, r8)
 800e6b4:	fffffeff 	.word	0xfffffeff
 800e6b8:	effffffe 	.word	0xeffffffe
 800e6bc:	efffffff 	.word	0xefffffff
 800e6c0:	0800df79 	.word	0x0800df79

0800e6c4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b082      	sub	sp, #8
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e6cc:	46c0      	nop			; (mov r8, r8)
 800e6ce:	46bd      	mov	sp, r7
 800e6d0:	b002      	add	sp, #8
 800e6d2:	bd80      	pop	{r7, pc}

0800e6d4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b082      	sub	sp, #8
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e6dc:	46c0      	nop			; (mov r8, r8)
 800e6de:	46bd      	mov	sp, r7
 800e6e0:	b002      	add	sp, #8
 800e6e2:	bd80      	pop	{r7, pc}

0800e6e4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b082      	sub	sp, #8
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e6ec:	46c0      	nop			; (mov r8, r8)
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	b002      	add	sp, #8
 800e6f2:	bd80      	pop	{r7, pc}

0800e6f4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b084      	sub	sp, #16
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	2284      	movs	r2, #132	; 0x84
 800e700:	5c9b      	ldrb	r3, [r3, r2]
 800e702:	2b01      	cmp	r3, #1
 800e704:	d101      	bne.n	800e70a <HAL_UARTEx_DisableFifoMode+0x16>
 800e706:	2302      	movs	r3, #2
 800e708:	e027      	b.n	800e75a <HAL_UARTEx_DisableFifoMode+0x66>
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	2284      	movs	r2, #132	; 0x84
 800e70e:	2101      	movs	r1, #1
 800e710:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	2288      	movs	r2, #136	; 0x88
 800e716:	2124      	movs	r1, #36	; 0x24
 800e718:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	681a      	ldr	r2, [r3, #0]
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	2101      	movs	r1, #1
 800e72e:	438a      	bics	r2, r1
 800e730:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	4a0b      	ldr	r2, [pc, #44]	; (800e764 <HAL_UARTEx_DisableFifoMode+0x70>)
 800e736:	4013      	ands	r3, r2
 800e738:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	2200      	movs	r2, #0
 800e73e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	68fa      	ldr	r2, [r7, #12]
 800e746:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	2288      	movs	r2, #136	; 0x88
 800e74c:	2120      	movs	r1, #32
 800e74e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	2284      	movs	r2, #132	; 0x84
 800e754:	2100      	movs	r1, #0
 800e756:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800e758:	2300      	movs	r3, #0
}
 800e75a:	0018      	movs	r0, r3
 800e75c:	46bd      	mov	sp, r7
 800e75e:	b004      	add	sp, #16
 800e760:	bd80      	pop	{r7, pc}
 800e762:	46c0      	nop			; (mov r8, r8)
 800e764:	dfffffff 	.word	0xdfffffff

0800e768 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e768:	b580      	push	{r7, lr}
 800e76a:	b084      	sub	sp, #16
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	6078      	str	r0, [r7, #4]
 800e770:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	2284      	movs	r2, #132	; 0x84
 800e776:	5c9b      	ldrb	r3, [r3, r2]
 800e778:	2b01      	cmp	r3, #1
 800e77a:	d101      	bne.n	800e780 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e77c:	2302      	movs	r3, #2
 800e77e:	e02e      	b.n	800e7de <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	2284      	movs	r2, #132	; 0x84
 800e784:	2101      	movs	r1, #1
 800e786:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	2288      	movs	r2, #136	; 0x88
 800e78c:	2124      	movs	r1, #36	; 0x24
 800e78e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	681a      	ldr	r2, [r3, #0]
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	2101      	movs	r1, #1
 800e7a4:	438a      	bics	r2, r1
 800e7a6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	689b      	ldr	r3, [r3, #8]
 800e7ae:	00db      	lsls	r3, r3, #3
 800e7b0:	08d9      	lsrs	r1, r3, #3
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	683a      	ldr	r2, [r7, #0]
 800e7b8:	430a      	orrs	r2, r1
 800e7ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	0018      	movs	r0, r3
 800e7c0:	f000 f854 	bl	800e86c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	68fa      	ldr	r2, [r7, #12]
 800e7ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	2288      	movs	r2, #136	; 0x88
 800e7d0:	2120      	movs	r1, #32
 800e7d2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	2284      	movs	r2, #132	; 0x84
 800e7d8:	2100      	movs	r1, #0
 800e7da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800e7dc:	2300      	movs	r3, #0
}
 800e7de:	0018      	movs	r0, r3
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	b004      	add	sp, #16
 800e7e4:	bd80      	pop	{r7, pc}
	...

0800e7e8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b084      	sub	sp, #16
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
 800e7f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	2284      	movs	r2, #132	; 0x84
 800e7f6:	5c9b      	ldrb	r3, [r3, r2]
 800e7f8:	2b01      	cmp	r3, #1
 800e7fa:	d101      	bne.n	800e800 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e7fc:	2302      	movs	r3, #2
 800e7fe:	e02f      	b.n	800e860 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	2284      	movs	r2, #132	; 0x84
 800e804:	2101      	movs	r1, #1
 800e806:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	2288      	movs	r2, #136	; 0x88
 800e80c:	2124      	movs	r1, #36	; 0x24
 800e80e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	681a      	ldr	r2, [r3, #0]
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	2101      	movs	r1, #1
 800e824:	438a      	bics	r2, r1
 800e826:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	689b      	ldr	r3, [r3, #8]
 800e82e:	4a0e      	ldr	r2, [pc, #56]	; (800e868 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800e830:	4013      	ands	r3, r2
 800e832:	0019      	movs	r1, r3
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	683a      	ldr	r2, [r7, #0]
 800e83a:	430a      	orrs	r2, r1
 800e83c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	0018      	movs	r0, r3
 800e842:	f000 f813 	bl	800e86c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	68fa      	ldr	r2, [r7, #12]
 800e84c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	2288      	movs	r2, #136	; 0x88
 800e852:	2120      	movs	r1, #32
 800e854:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	2284      	movs	r2, #132	; 0x84
 800e85a:	2100      	movs	r1, #0
 800e85c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800e85e:	2300      	movs	r3, #0
}
 800e860:	0018      	movs	r0, r3
 800e862:	46bd      	mov	sp, r7
 800e864:	b004      	add	sp, #16
 800e866:	bd80      	pop	{r7, pc}
 800e868:	f1ffffff 	.word	0xf1ffffff

0800e86c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e86c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e86e:	b085      	sub	sp, #20
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d108      	bne.n	800e88e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	226a      	movs	r2, #106	; 0x6a
 800e880:	2101      	movs	r1, #1
 800e882:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	2268      	movs	r2, #104	; 0x68
 800e888:	2101      	movs	r1, #1
 800e88a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e88c:	e043      	b.n	800e916 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e88e:	260f      	movs	r6, #15
 800e890:	19bb      	adds	r3, r7, r6
 800e892:	2208      	movs	r2, #8
 800e894:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e896:	200e      	movs	r0, #14
 800e898:	183b      	adds	r3, r7, r0
 800e89a:	2208      	movs	r2, #8
 800e89c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	689b      	ldr	r3, [r3, #8]
 800e8a4:	0e5b      	lsrs	r3, r3, #25
 800e8a6:	b2da      	uxtb	r2, r3
 800e8a8:	240d      	movs	r4, #13
 800e8aa:	193b      	adds	r3, r7, r4
 800e8ac:	2107      	movs	r1, #7
 800e8ae:	400a      	ands	r2, r1
 800e8b0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	689b      	ldr	r3, [r3, #8]
 800e8b8:	0f5b      	lsrs	r3, r3, #29
 800e8ba:	b2da      	uxtb	r2, r3
 800e8bc:	250c      	movs	r5, #12
 800e8be:	197b      	adds	r3, r7, r5
 800e8c0:	2107      	movs	r1, #7
 800e8c2:	400a      	ands	r2, r1
 800e8c4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e8c6:	183b      	adds	r3, r7, r0
 800e8c8:	781b      	ldrb	r3, [r3, #0]
 800e8ca:	197a      	adds	r2, r7, r5
 800e8cc:	7812      	ldrb	r2, [r2, #0]
 800e8ce:	4914      	ldr	r1, [pc, #80]	; (800e920 <UARTEx_SetNbDataToProcess+0xb4>)
 800e8d0:	5c8a      	ldrb	r2, [r1, r2]
 800e8d2:	435a      	muls	r2, r3
 800e8d4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800e8d6:	197b      	adds	r3, r7, r5
 800e8d8:	781b      	ldrb	r3, [r3, #0]
 800e8da:	4a12      	ldr	r2, [pc, #72]	; (800e924 <UARTEx_SetNbDataToProcess+0xb8>)
 800e8dc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e8de:	0019      	movs	r1, r3
 800e8e0:	f7f1 fcbe 	bl	8000260 <__divsi3>
 800e8e4:	0003      	movs	r3, r0
 800e8e6:	b299      	uxth	r1, r3
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	226a      	movs	r2, #106	; 0x6a
 800e8ec:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e8ee:	19bb      	adds	r3, r7, r6
 800e8f0:	781b      	ldrb	r3, [r3, #0]
 800e8f2:	193a      	adds	r2, r7, r4
 800e8f4:	7812      	ldrb	r2, [r2, #0]
 800e8f6:	490a      	ldr	r1, [pc, #40]	; (800e920 <UARTEx_SetNbDataToProcess+0xb4>)
 800e8f8:	5c8a      	ldrb	r2, [r1, r2]
 800e8fa:	435a      	muls	r2, r3
 800e8fc:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800e8fe:	193b      	adds	r3, r7, r4
 800e900:	781b      	ldrb	r3, [r3, #0]
 800e902:	4a08      	ldr	r2, [pc, #32]	; (800e924 <UARTEx_SetNbDataToProcess+0xb8>)
 800e904:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e906:	0019      	movs	r1, r3
 800e908:	f7f1 fcaa 	bl	8000260 <__divsi3>
 800e90c:	0003      	movs	r3, r0
 800e90e:	b299      	uxth	r1, r3
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	2268      	movs	r2, #104	; 0x68
 800e914:	5299      	strh	r1, [r3, r2]
}
 800e916:	46c0      	nop			; (mov r8, r8)
 800e918:	46bd      	mov	sp, r7
 800e91a:	b005      	add	sp, #20
 800e91c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e91e:	46c0      	nop			; (mov r8, r8)
 800e920:	0801348c 	.word	0x0801348c
 800e924:	08013494 	.word	0x08013494

0800e928 <atoi>:
 800e928:	b510      	push	{r4, lr}
 800e92a:	220a      	movs	r2, #10
 800e92c:	2100      	movs	r1, #0
 800e92e:	f000 ffd9 	bl	800f8e4 <strtol>
 800e932:	bd10      	pop	{r4, pc}

0800e934 <gcvt>:
 800e934:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e936:	001c      	movs	r4, r3
 800e938:	0015      	movs	r5, r2
 800e93a:	2300      	movs	r3, #0
 800e93c:	2200      	movs	r2, #0
 800e93e:	b085      	sub	sp, #20
 800e940:	0006      	movs	r6, r0
 800e942:	000f      	movs	r7, r1
 800e944:	f7f1 fd8e 	bl	8000464 <__aeabi_dcmplt>
 800e948:	0023      	movs	r3, r4
 800e94a:	2800      	cmp	r0, #0
 800e94c:	d003      	beq.n	800e956 <gcvt+0x22>
 800e94e:	232d      	movs	r3, #45	; 0x2d
 800e950:	3d01      	subs	r5, #1
 800e952:	7023      	strb	r3, [r4, #0]
 800e954:	1c63      	adds	r3, r4, #1
 800e956:	2200      	movs	r2, #0
 800e958:	4908      	ldr	r1, [pc, #32]	; (800e97c <gcvt+0x48>)
 800e95a:	9203      	str	r2, [sp, #12]
 800e95c:	3267      	adds	r2, #103	; 0x67
 800e95e:	9202      	str	r2, [sp, #8]
 800e960:	9301      	str	r3, [sp, #4]
 800e962:	9500      	str	r5, [sp, #0]
 800e964:	003b      	movs	r3, r7
 800e966:	0032      	movs	r2, r6
 800e968:	6808      	ldr	r0, [r1, #0]
 800e96a:	f001 f849 	bl	800fa00 <_gcvt>
 800e96e:	1e43      	subs	r3, r0, #1
 800e970:	4198      	sbcs	r0, r3
 800e972:	4240      	negs	r0, r0
 800e974:	4004      	ands	r4, r0
 800e976:	0020      	movs	r0, r4
 800e978:	b005      	add	sp, #20
 800e97a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e97c:	200000bc 	.word	0x200000bc

0800e980 <__errno>:
 800e980:	4b01      	ldr	r3, [pc, #4]	; (800e988 <__errno+0x8>)
 800e982:	6818      	ldr	r0, [r3, #0]
 800e984:	4770      	bx	lr
 800e986:	46c0      	nop			; (mov r8, r8)
 800e988:	200000bc 	.word	0x200000bc

0800e98c <__libc_init_array>:
 800e98c:	b570      	push	{r4, r5, r6, lr}
 800e98e:	2600      	movs	r6, #0
 800e990:	4d0c      	ldr	r5, [pc, #48]	; (800e9c4 <__libc_init_array+0x38>)
 800e992:	4c0d      	ldr	r4, [pc, #52]	; (800e9c8 <__libc_init_array+0x3c>)
 800e994:	1b64      	subs	r4, r4, r5
 800e996:	10a4      	asrs	r4, r4, #2
 800e998:	42a6      	cmp	r6, r4
 800e99a:	d109      	bne.n	800e9b0 <__libc_init_array+0x24>
 800e99c:	2600      	movs	r6, #0
 800e99e:	f004 fa61 	bl	8012e64 <_init>
 800e9a2:	4d0a      	ldr	r5, [pc, #40]	; (800e9cc <__libc_init_array+0x40>)
 800e9a4:	4c0a      	ldr	r4, [pc, #40]	; (800e9d0 <__libc_init_array+0x44>)
 800e9a6:	1b64      	subs	r4, r4, r5
 800e9a8:	10a4      	asrs	r4, r4, #2
 800e9aa:	42a6      	cmp	r6, r4
 800e9ac:	d105      	bne.n	800e9ba <__libc_init_array+0x2e>
 800e9ae:	bd70      	pop	{r4, r5, r6, pc}
 800e9b0:	00b3      	lsls	r3, r6, #2
 800e9b2:	58eb      	ldr	r3, [r5, r3]
 800e9b4:	4798      	blx	r3
 800e9b6:	3601      	adds	r6, #1
 800e9b8:	e7ee      	b.n	800e998 <__libc_init_array+0xc>
 800e9ba:	00b3      	lsls	r3, r6, #2
 800e9bc:	58eb      	ldr	r3, [r5, r3]
 800e9be:	4798      	blx	r3
 800e9c0:	3601      	adds	r6, #1
 800e9c2:	e7f2      	b.n	800e9aa <__libc_init_array+0x1e>
 800e9c4:	08013930 	.word	0x08013930
 800e9c8:	08013930 	.word	0x08013930
 800e9cc:	08013930 	.word	0x08013930
 800e9d0:	08013934 	.word	0x08013934

0800e9d4 <memcpy>:
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	b510      	push	{r4, lr}
 800e9d8:	429a      	cmp	r2, r3
 800e9da:	d100      	bne.n	800e9de <memcpy+0xa>
 800e9dc:	bd10      	pop	{r4, pc}
 800e9de:	5ccc      	ldrb	r4, [r1, r3]
 800e9e0:	54c4      	strb	r4, [r0, r3]
 800e9e2:	3301      	adds	r3, #1
 800e9e4:	e7f8      	b.n	800e9d8 <memcpy+0x4>

0800e9e6 <memset>:
 800e9e6:	0003      	movs	r3, r0
 800e9e8:	1882      	adds	r2, r0, r2
 800e9ea:	4293      	cmp	r3, r2
 800e9ec:	d100      	bne.n	800e9f0 <memset+0xa>
 800e9ee:	4770      	bx	lr
 800e9f0:	7019      	strb	r1, [r3, #0]
 800e9f2:	3301      	adds	r3, #1
 800e9f4:	e7f9      	b.n	800e9ea <memset+0x4>
	...

0800e9f8 <siprintf>:
 800e9f8:	b40e      	push	{r1, r2, r3}
 800e9fa:	b500      	push	{lr}
 800e9fc:	490b      	ldr	r1, [pc, #44]	; (800ea2c <siprintf+0x34>)
 800e9fe:	b09c      	sub	sp, #112	; 0x70
 800ea00:	ab1d      	add	r3, sp, #116	; 0x74
 800ea02:	9002      	str	r0, [sp, #8]
 800ea04:	9006      	str	r0, [sp, #24]
 800ea06:	9107      	str	r1, [sp, #28]
 800ea08:	9104      	str	r1, [sp, #16]
 800ea0a:	4809      	ldr	r0, [pc, #36]	; (800ea30 <siprintf+0x38>)
 800ea0c:	4909      	ldr	r1, [pc, #36]	; (800ea34 <siprintf+0x3c>)
 800ea0e:	cb04      	ldmia	r3!, {r2}
 800ea10:	9105      	str	r1, [sp, #20]
 800ea12:	6800      	ldr	r0, [r0, #0]
 800ea14:	a902      	add	r1, sp, #8
 800ea16:	9301      	str	r3, [sp, #4]
 800ea18:	f002 fa82 	bl	8010f20 <_svfiprintf_r>
 800ea1c:	2300      	movs	r3, #0
 800ea1e:	9a02      	ldr	r2, [sp, #8]
 800ea20:	7013      	strb	r3, [r2, #0]
 800ea22:	b01c      	add	sp, #112	; 0x70
 800ea24:	bc08      	pop	{r3}
 800ea26:	b003      	add	sp, #12
 800ea28:	4718      	bx	r3
 800ea2a:	46c0      	nop			; (mov r8, r8)
 800ea2c:	7fffffff 	.word	0x7fffffff
 800ea30:	200000bc 	.word	0x200000bc
 800ea34:	ffff0208 	.word	0xffff0208

0800ea38 <strcat>:
 800ea38:	0002      	movs	r2, r0
 800ea3a:	b510      	push	{r4, lr}
 800ea3c:	7813      	ldrb	r3, [r2, #0]
 800ea3e:	0014      	movs	r4, r2
 800ea40:	3201      	adds	r2, #1
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d1fa      	bne.n	800ea3c <strcat+0x4>
 800ea46:	5cca      	ldrb	r2, [r1, r3]
 800ea48:	54e2      	strb	r2, [r4, r3]
 800ea4a:	3301      	adds	r3, #1
 800ea4c:	2a00      	cmp	r2, #0
 800ea4e:	d1fa      	bne.n	800ea46 <strcat+0xe>
 800ea50:	bd10      	pop	{r4, pc}

0800ea52 <strchr>:
 800ea52:	b2c9      	uxtb	r1, r1
 800ea54:	7803      	ldrb	r3, [r0, #0]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d004      	beq.n	800ea64 <strchr+0x12>
 800ea5a:	428b      	cmp	r3, r1
 800ea5c:	d100      	bne.n	800ea60 <strchr+0xe>
 800ea5e:	4770      	bx	lr
 800ea60:	3001      	adds	r0, #1
 800ea62:	e7f7      	b.n	800ea54 <strchr+0x2>
 800ea64:	424b      	negs	r3, r1
 800ea66:	4159      	adcs	r1, r3
 800ea68:	4249      	negs	r1, r1
 800ea6a:	4008      	ands	r0, r1
 800ea6c:	e7f7      	b.n	800ea5e <strchr+0xc>

0800ea6e <strncpy>:
 800ea6e:	0003      	movs	r3, r0
 800ea70:	b530      	push	{r4, r5, lr}
 800ea72:	001d      	movs	r5, r3
 800ea74:	2a00      	cmp	r2, #0
 800ea76:	d006      	beq.n	800ea86 <strncpy+0x18>
 800ea78:	780c      	ldrb	r4, [r1, #0]
 800ea7a:	3a01      	subs	r2, #1
 800ea7c:	3301      	adds	r3, #1
 800ea7e:	702c      	strb	r4, [r5, #0]
 800ea80:	3101      	adds	r1, #1
 800ea82:	2c00      	cmp	r4, #0
 800ea84:	d1f5      	bne.n	800ea72 <strncpy+0x4>
 800ea86:	2100      	movs	r1, #0
 800ea88:	189a      	adds	r2, r3, r2
 800ea8a:	4293      	cmp	r3, r2
 800ea8c:	d100      	bne.n	800ea90 <strncpy+0x22>
 800ea8e:	bd30      	pop	{r4, r5, pc}
 800ea90:	7019      	strb	r1, [r3, #0]
 800ea92:	3301      	adds	r3, #1
 800ea94:	e7f9      	b.n	800ea8a <strncpy+0x1c>

0800ea96 <strstr>:
 800ea96:	780a      	ldrb	r2, [r1, #0]
 800ea98:	b530      	push	{r4, r5, lr}
 800ea9a:	2a00      	cmp	r2, #0
 800ea9c:	d10c      	bne.n	800eab8 <strstr+0x22>
 800ea9e:	bd30      	pop	{r4, r5, pc}
 800eaa0:	429a      	cmp	r2, r3
 800eaa2:	d108      	bne.n	800eab6 <strstr+0x20>
 800eaa4:	2301      	movs	r3, #1
 800eaa6:	5ccc      	ldrb	r4, [r1, r3]
 800eaa8:	2c00      	cmp	r4, #0
 800eaaa:	d0f8      	beq.n	800ea9e <strstr+0x8>
 800eaac:	5cc5      	ldrb	r5, [r0, r3]
 800eaae:	42a5      	cmp	r5, r4
 800eab0:	d101      	bne.n	800eab6 <strstr+0x20>
 800eab2:	3301      	adds	r3, #1
 800eab4:	e7f7      	b.n	800eaa6 <strstr+0x10>
 800eab6:	3001      	adds	r0, #1
 800eab8:	7803      	ldrb	r3, [r0, #0]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d1f0      	bne.n	800eaa0 <strstr+0xa>
 800eabe:	0018      	movs	r0, r3
 800eac0:	e7ed      	b.n	800ea9e <strstr+0x8>
	...

0800eac4 <sulp>:
 800eac4:	b570      	push	{r4, r5, r6, lr}
 800eac6:	0016      	movs	r6, r2
 800eac8:	000d      	movs	r5, r1
 800eaca:	f001 ff73 	bl	80109b4 <__ulp>
 800eace:	2e00      	cmp	r6, #0
 800ead0:	d00d      	beq.n	800eaee <sulp+0x2a>
 800ead2:	236b      	movs	r3, #107	; 0x6b
 800ead4:	006a      	lsls	r2, r5, #1
 800ead6:	0d52      	lsrs	r2, r2, #21
 800ead8:	1a9b      	subs	r3, r3, r2
 800eada:	2b00      	cmp	r3, #0
 800eadc:	dd07      	ble.n	800eaee <sulp+0x2a>
 800eade:	2400      	movs	r4, #0
 800eae0:	4a03      	ldr	r2, [pc, #12]	; (800eaf0 <sulp+0x2c>)
 800eae2:	051b      	lsls	r3, r3, #20
 800eae4:	189d      	adds	r5, r3, r2
 800eae6:	002b      	movs	r3, r5
 800eae8:	0022      	movs	r2, r4
 800eaea:	f7f3 fba1 	bl	8002230 <__aeabi_dmul>
 800eaee:	bd70      	pop	{r4, r5, r6, pc}
 800eaf0:	3ff00000 	.word	0x3ff00000

0800eaf4 <_strtod_l>:
 800eaf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eaf6:	001d      	movs	r5, r3
 800eaf8:	2300      	movs	r3, #0
 800eafa:	b0a5      	sub	sp, #148	; 0x94
 800eafc:	9320      	str	r3, [sp, #128]	; 0x80
 800eafe:	4bac      	ldr	r3, [pc, #688]	; (800edb0 <_strtod_l+0x2bc>)
 800eb00:	9005      	str	r0, [sp, #20]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	9108      	str	r1, [sp, #32]
 800eb06:	0018      	movs	r0, r3
 800eb08:	9307      	str	r3, [sp, #28]
 800eb0a:	921b      	str	r2, [sp, #108]	; 0x6c
 800eb0c:	f7f1 fb02 	bl	8000114 <strlen>
 800eb10:	2600      	movs	r6, #0
 800eb12:	0004      	movs	r4, r0
 800eb14:	2700      	movs	r7, #0
 800eb16:	9b08      	ldr	r3, [sp, #32]
 800eb18:	931f      	str	r3, [sp, #124]	; 0x7c
 800eb1a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800eb1c:	7813      	ldrb	r3, [r2, #0]
 800eb1e:	2b2b      	cmp	r3, #43	; 0x2b
 800eb20:	d058      	beq.n	800ebd4 <_strtod_l+0xe0>
 800eb22:	d844      	bhi.n	800ebae <_strtod_l+0xba>
 800eb24:	2b0d      	cmp	r3, #13
 800eb26:	d83d      	bhi.n	800eba4 <_strtod_l+0xb0>
 800eb28:	2b08      	cmp	r3, #8
 800eb2a:	d83d      	bhi.n	800eba8 <_strtod_l+0xb4>
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d047      	beq.n	800ebc0 <_strtod_l+0xcc>
 800eb30:	2300      	movs	r3, #0
 800eb32:	930e      	str	r3, [sp, #56]	; 0x38
 800eb34:	2200      	movs	r2, #0
 800eb36:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800eb38:	920a      	str	r2, [sp, #40]	; 0x28
 800eb3a:	9306      	str	r3, [sp, #24]
 800eb3c:	781b      	ldrb	r3, [r3, #0]
 800eb3e:	2b30      	cmp	r3, #48	; 0x30
 800eb40:	d000      	beq.n	800eb44 <_strtod_l+0x50>
 800eb42:	e07f      	b.n	800ec44 <_strtod_l+0x150>
 800eb44:	9b06      	ldr	r3, [sp, #24]
 800eb46:	3220      	adds	r2, #32
 800eb48:	785b      	ldrb	r3, [r3, #1]
 800eb4a:	4393      	bics	r3, r2
 800eb4c:	2b58      	cmp	r3, #88	; 0x58
 800eb4e:	d000      	beq.n	800eb52 <_strtod_l+0x5e>
 800eb50:	e06e      	b.n	800ec30 <_strtod_l+0x13c>
 800eb52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eb54:	9502      	str	r5, [sp, #8]
 800eb56:	9301      	str	r3, [sp, #4]
 800eb58:	ab20      	add	r3, sp, #128	; 0x80
 800eb5a:	9300      	str	r3, [sp, #0]
 800eb5c:	4a95      	ldr	r2, [pc, #596]	; (800edb4 <_strtod_l+0x2c0>)
 800eb5e:	ab21      	add	r3, sp, #132	; 0x84
 800eb60:	9805      	ldr	r0, [sp, #20]
 800eb62:	a91f      	add	r1, sp, #124	; 0x7c
 800eb64:	f001 f886 	bl	800fc74 <__gethex>
 800eb68:	2307      	movs	r3, #7
 800eb6a:	0005      	movs	r5, r0
 800eb6c:	0004      	movs	r4, r0
 800eb6e:	401d      	ands	r5, r3
 800eb70:	4218      	tst	r0, r3
 800eb72:	d006      	beq.n	800eb82 <_strtod_l+0x8e>
 800eb74:	2d06      	cmp	r5, #6
 800eb76:	d12f      	bne.n	800ebd8 <_strtod_l+0xe4>
 800eb78:	9b06      	ldr	r3, [sp, #24]
 800eb7a:	3301      	adds	r3, #1
 800eb7c:	931f      	str	r3, [sp, #124]	; 0x7c
 800eb7e:	2300      	movs	r3, #0
 800eb80:	930e      	str	r3, [sp, #56]	; 0x38
 800eb82:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d002      	beq.n	800eb8e <_strtod_l+0x9a>
 800eb88:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800eb8a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800eb8c:	601a      	str	r2, [r3, #0]
 800eb8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d01c      	beq.n	800ebce <_strtod_l+0xda>
 800eb94:	2380      	movs	r3, #128	; 0x80
 800eb96:	0032      	movs	r2, r6
 800eb98:	061b      	lsls	r3, r3, #24
 800eb9a:	18fb      	adds	r3, r7, r3
 800eb9c:	0010      	movs	r0, r2
 800eb9e:	0019      	movs	r1, r3
 800eba0:	b025      	add	sp, #148	; 0x94
 800eba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eba4:	2b20      	cmp	r3, #32
 800eba6:	d1c3      	bne.n	800eb30 <_strtod_l+0x3c>
 800eba8:	3201      	adds	r2, #1
 800ebaa:	921f      	str	r2, [sp, #124]	; 0x7c
 800ebac:	e7b5      	b.n	800eb1a <_strtod_l+0x26>
 800ebae:	2b2d      	cmp	r3, #45	; 0x2d
 800ebb0:	d1be      	bne.n	800eb30 <_strtod_l+0x3c>
 800ebb2:	3b2c      	subs	r3, #44	; 0x2c
 800ebb4:	930e      	str	r3, [sp, #56]	; 0x38
 800ebb6:	1c53      	adds	r3, r2, #1
 800ebb8:	931f      	str	r3, [sp, #124]	; 0x7c
 800ebba:	7853      	ldrb	r3, [r2, #1]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d1b9      	bne.n	800eb34 <_strtod_l+0x40>
 800ebc0:	9b08      	ldr	r3, [sp, #32]
 800ebc2:	931f      	str	r3, [sp, #124]	; 0x7c
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	930e      	str	r3, [sp, #56]	; 0x38
 800ebc8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d1dc      	bne.n	800eb88 <_strtod_l+0x94>
 800ebce:	0032      	movs	r2, r6
 800ebd0:	003b      	movs	r3, r7
 800ebd2:	e7e3      	b.n	800eb9c <_strtod_l+0xa8>
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	e7ed      	b.n	800ebb4 <_strtod_l+0xc0>
 800ebd8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ebda:	2a00      	cmp	r2, #0
 800ebdc:	d007      	beq.n	800ebee <_strtod_l+0xfa>
 800ebde:	2135      	movs	r1, #53	; 0x35
 800ebe0:	a822      	add	r0, sp, #136	; 0x88
 800ebe2:	f002 f803 	bl	8010bec <__copybits>
 800ebe6:	9920      	ldr	r1, [sp, #128]	; 0x80
 800ebe8:	9805      	ldr	r0, [sp, #20]
 800ebea:	f001 fba3 	bl	8010334 <_Bfree>
 800ebee:	1e68      	subs	r0, r5, #1
 800ebf0:	2804      	cmp	r0, #4
 800ebf2:	d806      	bhi.n	800ec02 <_strtod_l+0x10e>
 800ebf4:	f7f1 fa96 	bl	8000124 <__gnu_thumb1_case_uqi>
 800ebf8:	1816030b 	.word	0x1816030b
 800ebfc:	0b          	.byte	0x0b
 800ebfd:	00          	.byte	0x00
 800ebfe:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800ec00:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 800ec02:	0723      	lsls	r3, r4, #28
 800ec04:	d5bd      	bpl.n	800eb82 <_strtod_l+0x8e>
 800ec06:	2380      	movs	r3, #128	; 0x80
 800ec08:	061b      	lsls	r3, r3, #24
 800ec0a:	431f      	orrs	r7, r3
 800ec0c:	e7b9      	b.n	800eb82 <_strtod_l+0x8e>
 800ec0e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ec10:	4a69      	ldr	r2, [pc, #420]	; (800edb8 <_strtod_l+0x2c4>)
 800ec12:	496a      	ldr	r1, [pc, #424]	; (800edbc <_strtod_l+0x2c8>)
 800ec14:	401a      	ands	r2, r3
 800ec16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ec18:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800ec1a:	185b      	adds	r3, r3, r1
 800ec1c:	051b      	lsls	r3, r3, #20
 800ec1e:	431a      	orrs	r2, r3
 800ec20:	0017      	movs	r7, r2
 800ec22:	e7ee      	b.n	800ec02 <_strtod_l+0x10e>
 800ec24:	4f66      	ldr	r7, [pc, #408]	; (800edc0 <_strtod_l+0x2cc>)
 800ec26:	e7ec      	b.n	800ec02 <_strtod_l+0x10e>
 800ec28:	2601      	movs	r6, #1
 800ec2a:	4f66      	ldr	r7, [pc, #408]	; (800edc4 <_strtod_l+0x2d0>)
 800ec2c:	4276      	negs	r6, r6
 800ec2e:	e7e8      	b.n	800ec02 <_strtod_l+0x10e>
 800ec30:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ec32:	1c5a      	adds	r2, r3, #1
 800ec34:	921f      	str	r2, [sp, #124]	; 0x7c
 800ec36:	785b      	ldrb	r3, [r3, #1]
 800ec38:	2b30      	cmp	r3, #48	; 0x30
 800ec3a:	d0f9      	beq.n	800ec30 <_strtod_l+0x13c>
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d0a0      	beq.n	800eb82 <_strtod_l+0x8e>
 800ec40:	2301      	movs	r3, #1
 800ec42:	930a      	str	r3, [sp, #40]	; 0x28
 800ec44:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ec46:	220a      	movs	r2, #10
 800ec48:	9310      	str	r3, [sp, #64]	; 0x40
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	930f      	str	r3, [sp, #60]	; 0x3c
 800ec4e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ec50:	9309      	str	r3, [sp, #36]	; 0x24
 800ec52:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800ec54:	7805      	ldrb	r5, [r0, #0]
 800ec56:	002b      	movs	r3, r5
 800ec58:	3b30      	subs	r3, #48	; 0x30
 800ec5a:	b2d9      	uxtb	r1, r3
 800ec5c:	2909      	cmp	r1, #9
 800ec5e:	d927      	bls.n	800ecb0 <_strtod_l+0x1bc>
 800ec60:	0022      	movs	r2, r4
 800ec62:	9907      	ldr	r1, [sp, #28]
 800ec64:	f002 fc02 	bl	801146c <strncmp>
 800ec68:	2800      	cmp	r0, #0
 800ec6a:	d033      	beq.n	800ecd4 <_strtod_l+0x1e0>
 800ec6c:	2000      	movs	r0, #0
 800ec6e:	002b      	movs	r3, r5
 800ec70:	4684      	mov	ip, r0
 800ec72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ec74:	900c      	str	r0, [sp, #48]	; 0x30
 800ec76:	9206      	str	r2, [sp, #24]
 800ec78:	2220      	movs	r2, #32
 800ec7a:	0019      	movs	r1, r3
 800ec7c:	4391      	bics	r1, r2
 800ec7e:	000a      	movs	r2, r1
 800ec80:	2100      	movs	r1, #0
 800ec82:	9107      	str	r1, [sp, #28]
 800ec84:	2a45      	cmp	r2, #69	; 0x45
 800ec86:	d000      	beq.n	800ec8a <_strtod_l+0x196>
 800ec88:	e0c5      	b.n	800ee16 <_strtod_l+0x322>
 800ec8a:	9b06      	ldr	r3, [sp, #24]
 800ec8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ec8e:	4303      	orrs	r3, r0
 800ec90:	4313      	orrs	r3, r2
 800ec92:	428b      	cmp	r3, r1
 800ec94:	d094      	beq.n	800ebc0 <_strtod_l+0xcc>
 800ec96:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ec98:	9308      	str	r3, [sp, #32]
 800ec9a:	3301      	adds	r3, #1
 800ec9c:	931f      	str	r3, [sp, #124]	; 0x7c
 800ec9e:	9b08      	ldr	r3, [sp, #32]
 800eca0:	785b      	ldrb	r3, [r3, #1]
 800eca2:	2b2b      	cmp	r3, #43	; 0x2b
 800eca4:	d076      	beq.n	800ed94 <_strtod_l+0x2a0>
 800eca6:	000c      	movs	r4, r1
 800eca8:	2b2d      	cmp	r3, #45	; 0x2d
 800ecaa:	d179      	bne.n	800eda0 <_strtod_l+0x2ac>
 800ecac:	2401      	movs	r4, #1
 800ecae:	e072      	b.n	800ed96 <_strtod_l+0x2a2>
 800ecb0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ecb2:	2908      	cmp	r1, #8
 800ecb4:	dc09      	bgt.n	800ecca <_strtod_l+0x1d6>
 800ecb6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ecb8:	4351      	muls	r1, r2
 800ecba:	185b      	adds	r3, r3, r1
 800ecbc:	930b      	str	r3, [sp, #44]	; 0x2c
 800ecbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ecc0:	3001      	adds	r0, #1
 800ecc2:	3301      	adds	r3, #1
 800ecc4:	9309      	str	r3, [sp, #36]	; 0x24
 800ecc6:	901f      	str	r0, [sp, #124]	; 0x7c
 800ecc8:	e7c3      	b.n	800ec52 <_strtod_l+0x15e>
 800ecca:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800eccc:	4351      	muls	r1, r2
 800ecce:	185b      	adds	r3, r3, r1
 800ecd0:	930f      	str	r3, [sp, #60]	; 0x3c
 800ecd2:	e7f4      	b.n	800ecbe <_strtod_l+0x1ca>
 800ecd4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ecd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ecd8:	191c      	adds	r4, r3, r4
 800ecda:	941f      	str	r4, [sp, #124]	; 0x7c
 800ecdc:	7823      	ldrb	r3, [r4, #0]
 800ecde:	2a00      	cmp	r2, #0
 800ece0:	d039      	beq.n	800ed56 <_strtod_l+0x262>
 800ece2:	900c      	str	r0, [sp, #48]	; 0x30
 800ece4:	9206      	str	r2, [sp, #24]
 800ece6:	001a      	movs	r2, r3
 800ece8:	3a30      	subs	r2, #48	; 0x30
 800ecea:	2a09      	cmp	r2, #9
 800ecec:	d912      	bls.n	800ed14 <_strtod_l+0x220>
 800ecee:	2201      	movs	r2, #1
 800ecf0:	4694      	mov	ip, r2
 800ecf2:	e7c1      	b.n	800ec78 <_strtod_l+0x184>
 800ecf4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ecf6:	3001      	adds	r0, #1
 800ecf8:	1c5a      	adds	r2, r3, #1
 800ecfa:	921f      	str	r2, [sp, #124]	; 0x7c
 800ecfc:	785b      	ldrb	r3, [r3, #1]
 800ecfe:	2b30      	cmp	r3, #48	; 0x30
 800ed00:	d0f8      	beq.n	800ecf4 <_strtod_l+0x200>
 800ed02:	001a      	movs	r2, r3
 800ed04:	3a31      	subs	r2, #49	; 0x31
 800ed06:	2a08      	cmp	r2, #8
 800ed08:	d83f      	bhi.n	800ed8a <_strtod_l+0x296>
 800ed0a:	900c      	str	r0, [sp, #48]	; 0x30
 800ed0c:	2000      	movs	r0, #0
 800ed0e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800ed10:	9006      	str	r0, [sp, #24]
 800ed12:	9210      	str	r2, [sp, #64]	; 0x40
 800ed14:	001a      	movs	r2, r3
 800ed16:	1c41      	adds	r1, r0, #1
 800ed18:	3a30      	subs	r2, #48	; 0x30
 800ed1a:	2b30      	cmp	r3, #48	; 0x30
 800ed1c:	d015      	beq.n	800ed4a <_strtod_l+0x256>
 800ed1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ed20:	185b      	adds	r3, r3, r1
 800ed22:	210a      	movs	r1, #10
 800ed24:	930c      	str	r3, [sp, #48]	; 0x30
 800ed26:	9b06      	ldr	r3, [sp, #24]
 800ed28:	18c4      	adds	r4, r0, r3
 800ed2a:	42a3      	cmp	r3, r4
 800ed2c:	d115      	bne.n	800ed5a <_strtod_l+0x266>
 800ed2e:	9906      	ldr	r1, [sp, #24]
 800ed30:	9b06      	ldr	r3, [sp, #24]
 800ed32:	3101      	adds	r1, #1
 800ed34:	1809      	adds	r1, r1, r0
 800ed36:	181b      	adds	r3, r3, r0
 800ed38:	9106      	str	r1, [sp, #24]
 800ed3a:	2b08      	cmp	r3, #8
 800ed3c:	dc1b      	bgt.n	800ed76 <_strtod_l+0x282>
 800ed3e:	230a      	movs	r3, #10
 800ed40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ed42:	434b      	muls	r3, r1
 800ed44:	2100      	movs	r1, #0
 800ed46:	18d3      	adds	r3, r2, r3
 800ed48:	930b      	str	r3, [sp, #44]	; 0x2c
 800ed4a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ed4c:	0008      	movs	r0, r1
 800ed4e:	1c5a      	adds	r2, r3, #1
 800ed50:	921f      	str	r2, [sp, #124]	; 0x7c
 800ed52:	785b      	ldrb	r3, [r3, #1]
 800ed54:	e7c7      	b.n	800ece6 <_strtod_l+0x1f2>
 800ed56:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ed58:	e7d1      	b.n	800ecfe <_strtod_l+0x20a>
 800ed5a:	2b08      	cmp	r3, #8
 800ed5c:	dc04      	bgt.n	800ed68 <_strtod_l+0x274>
 800ed5e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800ed60:	434d      	muls	r5, r1
 800ed62:	950b      	str	r5, [sp, #44]	; 0x2c
 800ed64:	3301      	adds	r3, #1
 800ed66:	e7e0      	b.n	800ed2a <_strtod_l+0x236>
 800ed68:	1c5d      	adds	r5, r3, #1
 800ed6a:	2d10      	cmp	r5, #16
 800ed6c:	dcfa      	bgt.n	800ed64 <_strtod_l+0x270>
 800ed6e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ed70:	434d      	muls	r5, r1
 800ed72:	950f      	str	r5, [sp, #60]	; 0x3c
 800ed74:	e7f6      	b.n	800ed64 <_strtod_l+0x270>
 800ed76:	9b06      	ldr	r3, [sp, #24]
 800ed78:	2100      	movs	r1, #0
 800ed7a:	2b10      	cmp	r3, #16
 800ed7c:	dce5      	bgt.n	800ed4a <_strtod_l+0x256>
 800ed7e:	230a      	movs	r3, #10
 800ed80:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800ed82:	4343      	muls	r3, r0
 800ed84:	18d3      	adds	r3, r2, r3
 800ed86:	930f      	str	r3, [sp, #60]	; 0x3c
 800ed88:	e7df      	b.n	800ed4a <_strtod_l+0x256>
 800ed8a:	2200      	movs	r2, #0
 800ed8c:	920c      	str	r2, [sp, #48]	; 0x30
 800ed8e:	9206      	str	r2, [sp, #24]
 800ed90:	3201      	adds	r2, #1
 800ed92:	e7ad      	b.n	800ecf0 <_strtod_l+0x1fc>
 800ed94:	2400      	movs	r4, #0
 800ed96:	9b08      	ldr	r3, [sp, #32]
 800ed98:	3302      	adds	r3, #2
 800ed9a:	931f      	str	r3, [sp, #124]	; 0x7c
 800ed9c:	9b08      	ldr	r3, [sp, #32]
 800ed9e:	789b      	ldrb	r3, [r3, #2]
 800eda0:	001a      	movs	r2, r3
 800eda2:	3a30      	subs	r2, #48	; 0x30
 800eda4:	2a09      	cmp	r2, #9
 800eda6:	d913      	bls.n	800edd0 <_strtod_l+0x2dc>
 800eda8:	9a08      	ldr	r2, [sp, #32]
 800edaa:	921f      	str	r2, [sp, #124]	; 0x7c
 800edac:	2200      	movs	r2, #0
 800edae:	e031      	b.n	800ee14 <_strtod_l+0x320>
 800edb0:	08013670 	.word	0x08013670
 800edb4:	080134a8 	.word	0x080134a8
 800edb8:	ffefffff 	.word	0xffefffff
 800edbc:	00000433 	.word	0x00000433
 800edc0:	7ff00000 	.word	0x7ff00000
 800edc4:	7fffffff 	.word	0x7fffffff
 800edc8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800edca:	1c5a      	adds	r2, r3, #1
 800edcc:	921f      	str	r2, [sp, #124]	; 0x7c
 800edce:	785b      	ldrb	r3, [r3, #1]
 800edd0:	2b30      	cmp	r3, #48	; 0x30
 800edd2:	d0f9      	beq.n	800edc8 <_strtod_l+0x2d4>
 800edd4:	2200      	movs	r2, #0
 800edd6:	9207      	str	r2, [sp, #28]
 800edd8:	001a      	movs	r2, r3
 800edda:	3a31      	subs	r2, #49	; 0x31
 800eddc:	2a08      	cmp	r2, #8
 800edde:	d81a      	bhi.n	800ee16 <_strtod_l+0x322>
 800ede0:	3b30      	subs	r3, #48	; 0x30
 800ede2:	001a      	movs	r2, r3
 800ede4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ede6:	9307      	str	r3, [sp, #28]
 800ede8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800edea:	1c59      	adds	r1, r3, #1
 800edec:	911f      	str	r1, [sp, #124]	; 0x7c
 800edee:	785b      	ldrb	r3, [r3, #1]
 800edf0:	001d      	movs	r5, r3
 800edf2:	3d30      	subs	r5, #48	; 0x30
 800edf4:	2d09      	cmp	r5, #9
 800edf6:	d939      	bls.n	800ee6c <_strtod_l+0x378>
 800edf8:	9d07      	ldr	r5, [sp, #28]
 800edfa:	1b49      	subs	r1, r1, r5
 800edfc:	4db0      	ldr	r5, [pc, #704]	; (800f0c0 <_strtod_l+0x5cc>)
 800edfe:	9507      	str	r5, [sp, #28]
 800ee00:	2908      	cmp	r1, #8
 800ee02:	dc03      	bgt.n	800ee0c <_strtod_l+0x318>
 800ee04:	9207      	str	r2, [sp, #28]
 800ee06:	42aa      	cmp	r2, r5
 800ee08:	dd00      	ble.n	800ee0c <_strtod_l+0x318>
 800ee0a:	9507      	str	r5, [sp, #28]
 800ee0c:	2c00      	cmp	r4, #0
 800ee0e:	d002      	beq.n	800ee16 <_strtod_l+0x322>
 800ee10:	9a07      	ldr	r2, [sp, #28]
 800ee12:	4252      	negs	r2, r2
 800ee14:	9207      	str	r2, [sp, #28]
 800ee16:	9a06      	ldr	r2, [sp, #24]
 800ee18:	2a00      	cmp	r2, #0
 800ee1a:	d14b      	bne.n	800eeb4 <_strtod_l+0x3c0>
 800ee1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ee1e:	4310      	orrs	r0, r2
 800ee20:	d000      	beq.n	800ee24 <_strtod_l+0x330>
 800ee22:	e6ae      	b.n	800eb82 <_strtod_l+0x8e>
 800ee24:	4662      	mov	r2, ip
 800ee26:	2a00      	cmp	r2, #0
 800ee28:	d000      	beq.n	800ee2c <_strtod_l+0x338>
 800ee2a:	e6c9      	b.n	800ebc0 <_strtod_l+0xcc>
 800ee2c:	2b69      	cmp	r3, #105	; 0x69
 800ee2e:	d025      	beq.n	800ee7c <_strtod_l+0x388>
 800ee30:	dc21      	bgt.n	800ee76 <_strtod_l+0x382>
 800ee32:	2b49      	cmp	r3, #73	; 0x49
 800ee34:	d022      	beq.n	800ee7c <_strtod_l+0x388>
 800ee36:	2b4e      	cmp	r3, #78	; 0x4e
 800ee38:	d000      	beq.n	800ee3c <_strtod_l+0x348>
 800ee3a:	e6c1      	b.n	800ebc0 <_strtod_l+0xcc>
 800ee3c:	49a1      	ldr	r1, [pc, #644]	; (800f0c4 <_strtod_l+0x5d0>)
 800ee3e:	a81f      	add	r0, sp, #124	; 0x7c
 800ee40:	f001 f966 	bl	8010110 <__match>
 800ee44:	2800      	cmp	r0, #0
 800ee46:	d100      	bne.n	800ee4a <_strtod_l+0x356>
 800ee48:	e6ba      	b.n	800ebc0 <_strtod_l+0xcc>
 800ee4a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ee4c:	781b      	ldrb	r3, [r3, #0]
 800ee4e:	2b28      	cmp	r3, #40	; 0x28
 800ee50:	d12a      	bne.n	800eea8 <_strtod_l+0x3b4>
 800ee52:	499d      	ldr	r1, [pc, #628]	; (800f0c8 <_strtod_l+0x5d4>)
 800ee54:	aa22      	add	r2, sp, #136	; 0x88
 800ee56:	a81f      	add	r0, sp, #124	; 0x7c
 800ee58:	f001 f96e 	bl	8010138 <__hexnan>
 800ee5c:	2805      	cmp	r0, #5
 800ee5e:	d123      	bne.n	800eea8 <_strtod_l+0x3b4>
 800ee60:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ee62:	4a9a      	ldr	r2, [pc, #616]	; (800f0cc <_strtod_l+0x5d8>)
 800ee64:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800ee66:	431a      	orrs	r2, r3
 800ee68:	0017      	movs	r7, r2
 800ee6a:	e68a      	b.n	800eb82 <_strtod_l+0x8e>
 800ee6c:	210a      	movs	r1, #10
 800ee6e:	434a      	muls	r2, r1
 800ee70:	18d2      	adds	r2, r2, r3
 800ee72:	3a30      	subs	r2, #48	; 0x30
 800ee74:	e7b8      	b.n	800ede8 <_strtod_l+0x2f4>
 800ee76:	2b6e      	cmp	r3, #110	; 0x6e
 800ee78:	d0e0      	beq.n	800ee3c <_strtod_l+0x348>
 800ee7a:	e6a1      	b.n	800ebc0 <_strtod_l+0xcc>
 800ee7c:	4994      	ldr	r1, [pc, #592]	; (800f0d0 <_strtod_l+0x5dc>)
 800ee7e:	a81f      	add	r0, sp, #124	; 0x7c
 800ee80:	f001 f946 	bl	8010110 <__match>
 800ee84:	2800      	cmp	r0, #0
 800ee86:	d100      	bne.n	800ee8a <_strtod_l+0x396>
 800ee88:	e69a      	b.n	800ebc0 <_strtod_l+0xcc>
 800ee8a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ee8c:	4991      	ldr	r1, [pc, #580]	; (800f0d4 <_strtod_l+0x5e0>)
 800ee8e:	3b01      	subs	r3, #1
 800ee90:	a81f      	add	r0, sp, #124	; 0x7c
 800ee92:	931f      	str	r3, [sp, #124]	; 0x7c
 800ee94:	f001 f93c 	bl	8010110 <__match>
 800ee98:	2800      	cmp	r0, #0
 800ee9a:	d102      	bne.n	800eea2 <_strtod_l+0x3ae>
 800ee9c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ee9e:	3301      	adds	r3, #1
 800eea0:	931f      	str	r3, [sp, #124]	; 0x7c
 800eea2:	2600      	movs	r6, #0
 800eea4:	4f89      	ldr	r7, [pc, #548]	; (800f0cc <_strtod_l+0x5d8>)
 800eea6:	e66c      	b.n	800eb82 <_strtod_l+0x8e>
 800eea8:	488b      	ldr	r0, [pc, #556]	; (800f0d8 <_strtod_l+0x5e4>)
 800eeaa:	f002 fabb 	bl	8011424 <nan>
 800eeae:	0006      	movs	r6, r0
 800eeb0:	000f      	movs	r7, r1
 800eeb2:	e666      	b.n	800eb82 <_strtod_l+0x8e>
 800eeb4:	9b07      	ldr	r3, [sp, #28]
 800eeb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800eeb8:	1a9b      	subs	r3, r3, r2
 800eeba:	930a      	str	r3, [sp, #40]	; 0x28
 800eebc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d101      	bne.n	800eec6 <_strtod_l+0x3d2>
 800eec2:	9b06      	ldr	r3, [sp, #24]
 800eec4:	9309      	str	r3, [sp, #36]	; 0x24
 800eec6:	9c06      	ldr	r4, [sp, #24]
 800eec8:	2c10      	cmp	r4, #16
 800eeca:	dd00      	ble.n	800eece <_strtod_l+0x3da>
 800eecc:	2410      	movs	r4, #16
 800eece:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800eed0:	f7f4 f830 	bl	8002f34 <__aeabi_ui2d>
 800eed4:	9b06      	ldr	r3, [sp, #24]
 800eed6:	0006      	movs	r6, r0
 800eed8:	000f      	movs	r7, r1
 800eeda:	2b09      	cmp	r3, #9
 800eedc:	dd15      	ble.n	800ef0a <_strtod_l+0x416>
 800eede:	0022      	movs	r2, r4
 800eee0:	4b7e      	ldr	r3, [pc, #504]	; (800f0dc <_strtod_l+0x5e8>)
 800eee2:	3a09      	subs	r2, #9
 800eee4:	00d2      	lsls	r2, r2, #3
 800eee6:	189b      	adds	r3, r3, r2
 800eee8:	681a      	ldr	r2, [r3, #0]
 800eeea:	685b      	ldr	r3, [r3, #4]
 800eeec:	f7f3 f9a0 	bl	8002230 <__aeabi_dmul>
 800eef0:	0006      	movs	r6, r0
 800eef2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800eef4:	000f      	movs	r7, r1
 800eef6:	f7f4 f81d 	bl	8002f34 <__aeabi_ui2d>
 800eefa:	0002      	movs	r2, r0
 800eefc:	000b      	movs	r3, r1
 800eefe:	0030      	movs	r0, r6
 800ef00:	0039      	movs	r1, r7
 800ef02:	f7f2 fa57 	bl	80013b4 <__aeabi_dadd>
 800ef06:	0006      	movs	r6, r0
 800ef08:	000f      	movs	r7, r1
 800ef0a:	9b06      	ldr	r3, [sp, #24]
 800ef0c:	2b0f      	cmp	r3, #15
 800ef0e:	dc39      	bgt.n	800ef84 <_strtod_l+0x490>
 800ef10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d100      	bne.n	800ef18 <_strtod_l+0x424>
 800ef16:	e634      	b.n	800eb82 <_strtod_l+0x8e>
 800ef18:	dd24      	ble.n	800ef64 <_strtod_l+0x470>
 800ef1a:	2b16      	cmp	r3, #22
 800ef1c:	dc09      	bgt.n	800ef32 <_strtod_l+0x43e>
 800ef1e:	496f      	ldr	r1, [pc, #444]	; (800f0dc <_strtod_l+0x5e8>)
 800ef20:	00db      	lsls	r3, r3, #3
 800ef22:	18c9      	adds	r1, r1, r3
 800ef24:	0032      	movs	r2, r6
 800ef26:	6808      	ldr	r0, [r1, #0]
 800ef28:	6849      	ldr	r1, [r1, #4]
 800ef2a:	003b      	movs	r3, r7
 800ef2c:	f7f3 f980 	bl	8002230 <__aeabi_dmul>
 800ef30:	e7bd      	b.n	800eeae <_strtod_l+0x3ba>
 800ef32:	2325      	movs	r3, #37	; 0x25
 800ef34:	9a06      	ldr	r2, [sp, #24]
 800ef36:	1a9b      	subs	r3, r3, r2
 800ef38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ef3a:	4293      	cmp	r3, r2
 800ef3c:	db22      	blt.n	800ef84 <_strtod_l+0x490>
 800ef3e:	240f      	movs	r4, #15
 800ef40:	9b06      	ldr	r3, [sp, #24]
 800ef42:	4d66      	ldr	r5, [pc, #408]	; (800f0dc <_strtod_l+0x5e8>)
 800ef44:	1ae4      	subs	r4, r4, r3
 800ef46:	00e1      	lsls	r1, r4, #3
 800ef48:	1869      	adds	r1, r5, r1
 800ef4a:	0032      	movs	r2, r6
 800ef4c:	6808      	ldr	r0, [r1, #0]
 800ef4e:	6849      	ldr	r1, [r1, #4]
 800ef50:	003b      	movs	r3, r7
 800ef52:	f7f3 f96d 	bl	8002230 <__aeabi_dmul>
 800ef56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef58:	1b1c      	subs	r4, r3, r4
 800ef5a:	00e4      	lsls	r4, r4, #3
 800ef5c:	192c      	adds	r4, r5, r4
 800ef5e:	6822      	ldr	r2, [r4, #0]
 800ef60:	6863      	ldr	r3, [r4, #4]
 800ef62:	e7e3      	b.n	800ef2c <_strtod_l+0x438>
 800ef64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef66:	3316      	adds	r3, #22
 800ef68:	db0c      	blt.n	800ef84 <_strtod_l+0x490>
 800ef6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ef6c:	9a07      	ldr	r2, [sp, #28]
 800ef6e:	0030      	movs	r0, r6
 800ef70:	1a9a      	subs	r2, r3, r2
 800ef72:	4b5a      	ldr	r3, [pc, #360]	; (800f0dc <_strtod_l+0x5e8>)
 800ef74:	00d2      	lsls	r2, r2, #3
 800ef76:	189b      	adds	r3, r3, r2
 800ef78:	0039      	movs	r1, r7
 800ef7a:	681a      	ldr	r2, [r3, #0]
 800ef7c:	685b      	ldr	r3, [r3, #4]
 800ef7e:	f7f2 fd55 	bl	8001a2c <__aeabi_ddiv>
 800ef82:	e794      	b.n	800eeae <_strtod_l+0x3ba>
 800ef84:	9b06      	ldr	r3, [sp, #24]
 800ef86:	1b1c      	subs	r4, r3, r4
 800ef88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef8a:	18e4      	adds	r4, r4, r3
 800ef8c:	2c00      	cmp	r4, #0
 800ef8e:	dd72      	ble.n	800f076 <_strtod_l+0x582>
 800ef90:	230f      	movs	r3, #15
 800ef92:	0021      	movs	r1, r4
 800ef94:	4019      	ands	r1, r3
 800ef96:	421c      	tst	r4, r3
 800ef98:	d00a      	beq.n	800efb0 <_strtod_l+0x4bc>
 800ef9a:	00cb      	lsls	r3, r1, #3
 800ef9c:	494f      	ldr	r1, [pc, #316]	; (800f0dc <_strtod_l+0x5e8>)
 800ef9e:	0032      	movs	r2, r6
 800efa0:	18c9      	adds	r1, r1, r3
 800efa2:	6808      	ldr	r0, [r1, #0]
 800efa4:	6849      	ldr	r1, [r1, #4]
 800efa6:	003b      	movs	r3, r7
 800efa8:	f7f3 f942 	bl	8002230 <__aeabi_dmul>
 800efac:	0006      	movs	r6, r0
 800efae:	000f      	movs	r7, r1
 800efb0:	230f      	movs	r3, #15
 800efb2:	439c      	bics	r4, r3
 800efb4:	d04a      	beq.n	800f04c <_strtod_l+0x558>
 800efb6:	3326      	adds	r3, #38	; 0x26
 800efb8:	33ff      	adds	r3, #255	; 0xff
 800efba:	429c      	cmp	r4, r3
 800efbc:	dd22      	ble.n	800f004 <_strtod_l+0x510>
 800efbe:	2300      	movs	r3, #0
 800efc0:	9306      	str	r3, [sp, #24]
 800efc2:	9307      	str	r3, [sp, #28]
 800efc4:	930b      	str	r3, [sp, #44]	; 0x2c
 800efc6:	9309      	str	r3, [sp, #36]	; 0x24
 800efc8:	2322      	movs	r3, #34	; 0x22
 800efca:	2600      	movs	r6, #0
 800efcc:	9a05      	ldr	r2, [sp, #20]
 800efce:	4f3f      	ldr	r7, [pc, #252]	; (800f0cc <_strtod_l+0x5d8>)
 800efd0:	6013      	str	r3, [r2, #0]
 800efd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800efd4:	42b3      	cmp	r3, r6
 800efd6:	d100      	bne.n	800efda <_strtod_l+0x4e6>
 800efd8:	e5d3      	b.n	800eb82 <_strtod_l+0x8e>
 800efda:	9920      	ldr	r1, [sp, #128]	; 0x80
 800efdc:	9805      	ldr	r0, [sp, #20]
 800efde:	f001 f9a9 	bl	8010334 <_Bfree>
 800efe2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800efe4:	9805      	ldr	r0, [sp, #20]
 800efe6:	f001 f9a5 	bl	8010334 <_Bfree>
 800efea:	9907      	ldr	r1, [sp, #28]
 800efec:	9805      	ldr	r0, [sp, #20]
 800efee:	f001 f9a1 	bl	8010334 <_Bfree>
 800eff2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800eff4:	9805      	ldr	r0, [sp, #20]
 800eff6:	f001 f99d 	bl	8010334 <_Bfree>
 800effa:	9906      	ldr	r1, [sp, #24]
 800effc:	9805      	ldr	r0, [sp, #20]
 800effe:	f001 f999 	bl	8010334 <_Bfree>
 800f002:	e5be      	b.n	800eb82 <_strtod_l+0x8e>
 800f004:	2300      	movs	r3, #0
 800f006:	0030      	movs	r0, r6
 800f008:	0039      	movs	r1, r7
 800f00a:	4d35      	ldr	r5, [pc, #212]	; (800f0e0 <_strtod_l+0x5ec>)
 800f00c:	1124      	asrs	r4, r4, #4
 800f00e:	9308      	str	r3, [sp, #32]
 800f010:	2c01      	cmp	r4, #1
 800f012:	dc1e      	bgt.n	800f052 <_strtod_l+0x55e>
 800f014:	2b00      	cmp	r3, #0
 800f016:	d001      	beq.n	800f01c <_strtod_l+0x528>
 800f018:	0006      	movs	r6, r0
 800f01a:	000f      	movs	r7, r1
 800f01c:	4b31      	ldr	r3, [pc, #196]	; (800f0e4 <_strtod_l+0x5f0>)
 800f01e:	0032      	movs	r2, r6
 800f020:	18ff      	adds	r7, r7, r3
 800f022:	9b08      	ldr	r3, [sp, #32]
 800f024:	00dd      	lsls	r5, r3, #3
 800f026:	4b2e      	ldr	r3, [pc, #184]	; (800f0e0 <_strtod_l+0x5ec>)
 800f028:	195d      	adds	r5, r3, r5
 800f02a:	6828      	ldr	r0, [r5, #0]
 800f02c:	6869      	ldr	r1, [r5, #4]
 800f02e:	003b      	movs	r3, r7
 800f030:	f7f3 f8fe 	bl	8002230 <__aeabi_dmul>
 800f034:	4b25      	ldr	r3, [pc, #148]	; (800f0cc <_strtod_l+0x5d8>)
 800f036:	4a2c      	ldr	r2, [pc, #176]	; (800f0e8 <_strtod_l+0x5f4>)
 800f038:	0006      	movs	r6, r0
 800f03a:	400b      	ands	r3, r1
 800f03c:	4293      	cmp	r3, r2
 800f03e:	d8be      	bhi.n	800efbe <_strtod_l+0x4ca>
 800f040:	4a2a      	ldr	r2, [pc, #168]	; (800f0ec <_strtod_l+0x5f8>)
 800f042:	4293      	cmp	r3, r2
 800f044:	d913      	bls.n	800f06e <_strtod_l+0x57a>
 800f046:	2601      	movs	r6, #1
 800f048:	4f29      	ldr	r7, [pc, #164]	; (800f0f0 <_strtod_l+0x5fc>)
 800f04a:	4276      	negs	r6, r6
 800f04c:	2300      	movs	r3, #0
 800f04e:	9308      	str	r3, [sp, #32]
 800f050:	e087      	b.n	800f162 <_strtod_l+0x66e>
 800f052:	2201      	movs	r2, #1
 800f054:	4214      	tst	r4, r2
 800f056:	d004      	beq.n	800f062 <_strtod_l+0x56e>
 800f058:	682a      	ldr	r2, [r5, #0]
 800f05a:	686b      	ldr	r3, [r5, #4]
 800f05c:	f7f3 f8e8 	bl	8002230 <__aeabi_dmul>
 800f060:	2301      	movs	r3, #1
 800f062:	9a08      	ldr	r2, [sp, #32]
 800f064:	1064      	asrs	r4, r4, #1
 800f066:	3201      	adds	r2, #1
 800f068:	9208      	str	r2, [sp, #32]
 800f06a:	3508      	adds	r5, #8
 800f06c:	e7d0      	b.n	800f010 <_strtod_l+0x51c>
 800f06e:	23d4      	movs	r3, #212	; 0xd4
 800f070:	049b      	lsls	r3, r3, #18
 800f072:	18cf      	adds	r7, r1, r3
 800f074:	e7ea      	b.n	800f04c <_strtod_l+0x558>
 800f076:	2c00      	cmp	r4, #0
 800f078:	d0e8      	beq.n	800f04c <_strtod_l+0x558>
 800f07a:	4264      	negs	r4, r4
 800f07c:	220f      	movs	r2, #15
 800f07e:	0023      	movs	r3, r4
 800f080:	4013      	ands	r3, r2
 800f082:	4214      	tst	r4, r2
 800f084:	d00a      	beq.n	800f09c <_strtod_l+0x5a8>
 800f086:	00da      	lsls	r2, r3, #3
 800f088:	4b14      	ldr	r3, [pc, #80]	; (800f0dc <_strtod_l+0x5e8>)
 800f08a:	0030      	movs	r0, r6
 800f08c:	189b      	adds	r3, r3, r2
 800f08e:	0039      	movs	r1, r7
 800f090:	681a      	ldr	r2, [r3, #0]
 800f092:	685b      	ldr	r3, [r3, #4]
 800f094:	f7f2 fcca 	bl	8001a2c <__aeabi_ddiv>
 800f098:	0006      	movs	r6, r0
 800f09a:	000f      	movs	r7, r1
 800f09c:	1124      	asrs	r4, r4, #4
 800f09e:	d0d5      	beq.n	800f04c <_strtod_l+0x558>
 800f0a0:	2c1f      	cmp	r4, #31
 800f0a2:	dd27      	ble.n	800f0f4 <_strtod_l+0x600>
 800f0a4:	2300      	movs	r3, #0
 800f0a6:	9306      	str	r3, [sp, #24]
 800f0a8:	9307      	str	r3, [sp, #28]
 800f0aa:	930b      	str	r3, [sp, #44]	; 0x2c
 800f0ac:	9309      	str	r3, [sp, #36]	; 0x24
 800f0ae:	2322      	movs	r3, #34	; 0x22
 800f0b0:	9a05      	ldr	r2, [sp, #20]
 800f0b2:	2600      	movs	r6, #0
 800f0b4:	6013      	str	r3, [r2, #0]
 800f0b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f0b8:	2700      	movs	r7, #0
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d18d      	bne.n	800efda <_strtod_l+0x4e6>
 800f0be:	e560      	b.n	800eb82 <_strtod_l+0x8e>
 800f0c0:	00004e1f 	.word	0x00004e1f
 800f0c4:	080134a3 	.word	0x080134a3
 800f0c8:	080134bc 	.word	0x080134bc
 800f0cc:	7ff00000 	.word	0x7ff00000
 800f0d0:	080134a0 	.word	0x080134a0
 800f0d4:	08013866 	.word	0x08013866
 800f0d8:	08013862 	.word	0x08013862
 800f0dc:	08013720 	.word	0x08013720
 800f0e0:	080136f8 	.word	0x080136f8
 800f0e4:	fcb00000 	.word	0xfcb00000
 800f0e8:	7ca00000 	.word	0x7ca00000
 800f0ec:	7c900000 	.word	0x7c900000
 800f0f0:	7fefffff 	.word	0x7fefffff
 800f0f4:	2310      	movs	r3, #16
 800f0f6:	0022      	movs	r2, r4
 800f0f8:	401a      	ands	r2, r3
 800f0fa:	9208      	str	r2, [sp, #32]
 800f0fc:	421c      	tst	r4, r3
 800f0fe:	d001      	beq.n	800f104 <_strtod_l+0x610>
 800f100:	335a      	adds	r3, #90	; 0x5a
 800f102:	9308      	str	r3, [sp, #32]
 800f104:	0030      	movs	r0, r6
 800f106:	0039      	movs	r1, r7
 800f108:	2300      	movs	r3, #0
 800f10a:	4dc5      	ldr	r5, [pc, #788]	; (800f420 <_strtod_l+0x92c>)
 800f10c:	2201      	movs	r2, #1
 800f10e:	4214      	tst	r4, r2
 800f110:	d004      	beq.n	800f11c <_strtod_l+0x628>
 800f112:	682a      	ldr	r2, [r5, #0]
 800f114:	686b      	ldr	r3, [r5, #4]
 800f116:	f7f3 f88b 	bl	8002230 <__aeabi_dmul>
 800f11a:	2301      	movs	r3, #1
 800f11c:	1064      	asrs	r4, r4, #1
 800f11e:	3508      	adds	r5, #8
 800f120:	2c00      	cmp	r4, #0
 800f122:	d1f3      	bne.n	800f10c <_strtod_l+0x618>
 800f124:	2b00      	cmp	r3, #0
 800f126:	d001      	beq.n	800f12c <_strtod_l+0x638>
 800f128:	0006      	movs	r6, r0
 800f12a:	000f      	movs	r7, r1
 800f12c:	9b08      	ldr	r3, [sp, #32]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d00f      	beq.n	800f152 <_strtod_l+0x65e>
 800f132:	236b      	movs	r3, #107	; 0x6b
 800f134:	007a      	lsls	r2, r7, #1
 800f136:	0d52      	lsrs	r2, r2, #21
 800f138:	0039      	movs	r1, r7
 800f13a:	1a9b      	subs	r3, r3, r2
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	dd08      	ble.n	800f152 <_strtod_l+0x65e>
 800f140:	2b1f      	cmp	r3, #31
 800f142:	dc00      	bgt.n	800f146 <_strtod_l+0x652>
 800f144:	e124      	b.n	800f390 <_strtod_l+0x89c>
 800f146:	2600      	movs	r6, #0
 800f148:	2b34      	cmp	r3, #52	; 0x34
 800f14a:	dc00      	bgt.n	800f14e <_strtod_l+0x65a>
 800f14c:	e119      	b.n	800f382 <_strtod_l+0x88e>
 800f14e:	27dc      	movs	r7, #220	; 0xdc
 800f150:	04bf      	lsls	r7, r7, #18
 800f152:	2200      	movs	r2, #0
 800f154:	2300      	movs	r3, #0
 800f156:	0030      	movs	r0, r6
 800f158:	0039      	movs	r1, r7
 800f15a:	f7f1 f97d 	bl	8000458 <__aeabi_dcmpeq>
 800f15e:	2800      	cmp	r0, #0
 800f160:	d1a0      	bne.n	800f0a4 <_strtod_l+0x5b0>
 800f162:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f164:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f166:	9300      	str	r3, [sp, #0]
 800f168:	9910      	ldr	r1, [sp, #64]	; 0x40
 800f16a:	9b06      	ldr	r3, [sp, #24]
 800f16c:	9805      	ldr	r0, [sp, #20]
 800f16e:	f001 f949 	bl	8010404 <__s2b>
 800f172:	900b      	str	r0, [sp, #44]	; 0x2c
 800f174:	2800      	cmp	r0, #0
 800f176:	d100      	bne.n	800f17a <_strtod_l+0x686>
 800f178:	e721      	b.n	800efbe <_strtod_l+0x4ca>
 800f17a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f17c:	9907      	ldr	r1, [sp, #28]
 800f17e:	17da      	asrs	r2, r3, #31
 800f180:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f182:	1a5b      	subs	r3, r3, r1
 800f184:	401a      	ands	r2, r3
 800f186:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f188:	9215      	str	r2, [sp, #84]	; 0x54
 800f18a:	43db      	mvns	r3, r3
 800f18c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f18e:	17db      	asrs	r3, r3, #31
 800f190:	401a      	ands	r2, r3
 800f192:	2300      	movs	r3, #0
 800f194:	921a      	str	r2, [sp, #104]	; 0x68
 800f196:	9306      	str	r3, [sp, #24]
 800f198:	9307      	str	r3, [sp, #28]
 800f19a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f19c:	9805      	ldr	r0, [sp, #20]
 800f19e:	6859      	ldr	r1, [r3, #4]
 800f1a0:	f001 f884 	bl	80102ac <_Balloc>
 800f1a4:	9009      	str	r0, [sp, #36]	; 0x24
 800f1a6:	2800      	cmp	r0, #0
 800f1a8:	d100      	bne.n	800f1ac <_strtod_l+0x6b8>
 800f1aa:	e70d      	b.n	800efc8 <_strtod_l+0x4d4>
 800f1ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f1ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f1b0:	691b      	ldr	r3, [r3, #16]
 800f1b2:	310c      	adds	r1, #12
 800f1b4:	1c9a      	adds	r2, r3, #2
 800f1b6:	0092      	lsls	r2, r2, #2
 800f1b8:	300c      	adds	r0, #12
 800f1ba:	930c      	str	r3, [sp, #48]	; 0x30
 800f1bc:	f7ff fc0a 	bl	800e9d4 <memcpy>
 800f1c0:	ab22      	add	r3, sp, #136	; 0x88
 800f1c2:	9301      	str	r3, [sp, #4]
 800f1c4:	ab21      	add	r3, sp, #132	; 0x84
 800f1c6:	9300      	str	r3, [sp, #0]
 800f1c8:	0032      	movs	r2, r6
 800f1ca:	003b      	movs	r3, r7
 800f1cc:	9805      	ldr	r0, [sp, #20]
 800f1ce:	9612      	str	r6, [sp, #72]	; 0x48
 800f1d0:	9713      	str	r7, [sp, #76]	; 0x4c
 800f1d2:	f001 fc63 	bl	8010a9c <__d2b>
 800f1d6:	9020      	str	r0, [sp, #128]	; 0x80
 800f1d8:	2800      	cmp	r0, #0
 800f1da:	d100      	bne.n	800f1de <_strtod_l+0x6ea>
 800f1dc:	e6f4      	b.n	800efc8 <_strtod_l+0x4d4>
 800f1de:	2101      	movs	r1, #1
 800f1e0:	9805      	ldr	r0, [sp, #20]
 800f1e2:	f001 f9a3 	bl	801052c <__i2b>
 800f1e6:	9007      	str	r0, [sp, #28]
 800f1e8:	2800      	cmp	r0, #0
 800f1ea:	d100      	bne.n	800f1ee <_strtod_l+0x6fa>
 800f1ec:	e6ec      	b.n	800efc8 <_strtod_l+0x4d4>
 800f1ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f1f0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f1f2:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800f1f4:	1ad4      	subs	r4, r2, r3
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	db01      	blt.n	800f1fe <_strtod_l+0x70a>
 800f1fa:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800f1fc:	195d      	adds	r5, r3, r5
 800f1fe:	9908      	ldr	r1, [sp, #32]
 800f200:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800f202:	1a5b      	subs	r3, r3, r1
 800f204:	2136      	movs	r1, #54	; 0x36
 800f206:	189b      	adds	r3, r3, r2
 800f208:	1a8a      	subs	r2, r1, r2
 800f20a:	4986      	ldr	r1, [pc, #536]	; (800f424 <_strtod_l+0x930>)
 800f20c:	2001      	movs	r0, #1
 800f20e:	468c      	mov	ip, r1
 800f210:	2100      	movs	r1, #0
 800f212:	3b01      	subs	r3, #1
 800f214:	9110      	str	r1, [sp, #64]	; 0x40
 800f216:	9014      	str	r0, [sp, #80]	; 0x50
 800f218:	4563      	cmp	r3, ip
 800f21a:	da07      	bge.n	800f22c <_strtod_l+0x738>
 800f21c:	4661      	mov	r1, ip
 800f21e:	1ac9      	subs	r1, r1, r3
 800f220:	1a52      	subs	r2, r2, r1
 800f222:	291f      	cmp	r1, #31
 800f224:	dd00      	ble.n	800f228 <_strtod_l+0x734>
 800f226:	e0b8      	b.n	800f39a <_strtod_l+0x8a6>
 800f228:	4088      	lsls	r0, r1
 800f22a:	9014      	str	r0, [sp, #80]	; 0x50
 800f22c:	18ab      	adds	r3, r5, r2
 800f22e:	930c      	str	r3, [sp, #48]	; 0x30
 800f230:	18a4      	adds	r4, r4, r2
 800f232:	9b08      	ldr	r3, [sp, #32]
 800f234:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f236:	191c      	adds	r4, r3, r4
 800f238:	002b      	movs	r3, r5
 800f23a:	4295      	cmp	r5, r2
 800f23c:	dd00      	ble.n	800f240 <_strtod_l+0x74c>
 800f23e:	0013      	movs	r3, r2
 800f240:	42a3      	cmp	r3, r4
 800f242:	dd00      	ble.n	800f246 <_strtod_l+0x752>
 800f244:	0023      	movs	r3, r4
 800f246:	2b00      	cmp	r3, #0
 800f248:	dd04      	ble.n	800f254 <_strtod_l+0x760>
 800f24a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f24c:	1ae4      	subs	r4, r4, r3
 800f24e:	1ad2      	subs	r2, r2, r3
 800f250:	920c      	str	r2, [sp, #48]	; 0x30
 800f252:	1aed      	subs	r5, r5, r3
 800f254:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f256:	2b00      	cmp	r3, #0
 800f258:	dd17      	ble.n	800f28a <_strtod_l+0x796>
 800f25a:	001a      	movs	r2, r3
 800f25c:	9907      	ldr	r1, [sp, #28]
 800f25e:	9805      	ldr	r0, [sp, #20]
 800f260:	f001 fa2a 	bl	80106b8 <__pow5mult>
 800f264:	9007      	str	r0, [sp, #28]
 800f266:	2800      	cmp	r0, #0
 800f268:	d100      	bne.n	800f26c <_strtod_l+0x778>
 800f26a:	e6ad      	b.n	800efc8 <_strtod_l+0x4d4>
 800f26c:	0001      	movs	r1, r0
 800f26e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f270:	9805      	ldr	r0, [sp, #20]
 800f272:	f001 f971 	bl	8010558 <__multiply>
 800f276:	900f      	str	r0, [sp, #60]	; 0x3c
 800f278:	2800      	cmp	r0, #0
 800f27a:	d100      	bne.n	800f27e <_strtod_l+0x78a>
 800f27c:	e6a4      	b.n	800efc8 <_strtod_l+0x4d4>
 800f27e:	9920      	ldr	r1, [sp, #128]	; 0x80
 800f280:	9805      	ldr	r0, [sp, #20]
 800f282:	f001 f857 	bl	8010334 <_Bfree>
 800f286:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f288:	9320      	str	r3, [sp, #128]	; 0x80
 800f28a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	dd00      	ble.n	800f292 <_strtod_l+0x79e>
 800f290:	e089      	b.n	800f3a6 <_strtod_l+0x8b2>
 800f292:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f294:	2b00      	cmp	r3, #0
 800f296:	dd08      	ble.n	800f2aa <_strtod_l+0x7b6>
 800f298:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f29a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f29c:	9805      	ldr	r0, [sp, #20]
 800f29e:	f001 fa0b 	bl	80106b8 <__pow5mult>
 800f2a2:	9009      	str	r0, [sp, #36]	; 0x24
 800f2a4:	2800      	cmp	r0, #0
 800f2a6:	d100      	bne.n	800f2aa <_strtod_l+0x7b6>
 800f2a8:	e68e      	b.n	800efc8 <_strtod_l+0x4d4>
 800f2aa:	2c00      	cmp	r4, #0
 800f2ac:	dd08      	ble.n	800f2c0 <_strtod_l+0x7cc>
 800f2ae:	0022      	movs	r2, r4
 800f2b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f2b2:	9805      	ldr	r0, [sp, #20]
 800f2b4:	f001 fa5c 	bl	8010770 <__lshift>
 800f2b8:	9009      	str	r0, [sp, #36]	; 0x24
 800f2ba:	2800      	cmp	r0, #0
 800f2bc:	d100      	bne.n	800f2c0 <_strtod_l+0x7cc>
 800f2be:	e683      	b.n	800efc8 <_strtod_l+0x4d4>
 800f2c0:	2d00      	cmp	r5, #0
 800f2c2:	dd08      	ble.n	800f2d6 <_strtod_l+0x7e2>
 800f2c4:	002a      	movs	r2, r5
 800f2c6:	9907      	ldr	r1, [sp, #28]
 800f2c8:	9805      	ldr	r0, [sp, #20]
 800f2ca:	f001 fa51 	bl	8010770 <__lshift>
 800f2ce:	9007      	str	r0, [sp, #28]
 800f2d0:	2800      	cmp	r0, #0
 800f2d2:	d100      	bne.n	800f2d6 <_strtod_l+0x7e2>
 800f2d4:	e678      	b.n	800efc8 <_strtod_l+0x4d4>
 800f2d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f2d8:	9920      	ldr	r1, [sp, #128]	; 0x80
 800f2da:	9805      	ldr	r0, [sp, #20]
 800f2dc:	f001 fad2 	bl	8010884 <__mdiff>
 800f2e0:	9006      	str	r0, [sp, #24]
 800f2e2:	2800      	cmp	r0, #0
 800f2e4:	d100      	bne.n	800f2e8 <_strtod_l+0x7f4>
 800f2e6:	e66f      	b.n	800efc8 <_strtod_l+0x4d4>
 800f2e8:	2200      	movs	r2, #0
 800f2ea:	68c3      	ldr	r3, [r0, #12]
 800f2ec:	9907      	ldr	r1, [sp, #28]
 800f2ee:	60c2      	str	r2, [r0, #12]
 800f2f0:	930f      	str	r3, [sp, #60]	; 0x3c
 800f2f2:	f001 faab 	bl	801084c <__mcmp>
 800f2f6:	2800      	cmp	r0, #0
 800f2f8:	da5f      	bge.n	800f3ba <_strtod_l+0x8c6>
 800f2fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f2fc:	4333      	orrs	r3, r6
 800f2fe:	d000      	beq.n	800f302 <_strtod_l+0x80e>
 800f300:	e08a      	b.n	800f418 <_strtod_l+0x924>
 800f302:	033b      	lsls	r3, r7, #12
 800f304:	d000      	beq.n	800f308 <_strtod_l+0x814>
 800f306:	e087      	b.n	800f418 <_strtod_l+0x924>
 800f308:	22d6      	movs	r2, #214	; 0xd6
 800f30a:	4b47      	ldr	r3, [pc, #284]	; (800f428 <_strtod_l+0x934>)
 800f30c:	04d2      	lsls	r2, r2, #19
 800f30e:	403b      	ands	r3, r7
 800f310:	4293      	cmp	r3, r2
 800f312:	d800      	bhi.n	800f316 <_strtod_l+0x822>
 800f314:	e080      	b.n	800f418 <_strtod_l+0x924>
 800f316:	9b06      	ldr	r3, [sp, #24]
 800f318:	695b      	ldr	r3, [r3, #20]
 800f31a:	930a      	str	r3, [sp, #40]	; 0x28
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d104      	bne.n	800f32a <_strtod_l+0x836>
 800f320:	9b06      	ldr	r3, [sp, #24]
 800f322:	691b      	ldr	r3, [r3, #16]
 800f324:	930a      	str	r3, [sp, #40]	; 0x28
 800f326:	2b01      	cmp	r3, #1
 800f328:	dd76      	ble.n	800f418 <_strtod_l+0x924>
 800f32a:	9906      	ldr	r1, [sp, #24]
 800f32c:	2201      	movs	r2, #1
 800f32e:	9805      	ldr	r0, [sp, #20]
 800f330:	f001 fa1e 	bl	8010770 <__lshift>
 800f334:	9907      	ldr	r1, [sp, #28]
 800f336:	9006      	str	r0, [sp, #24]
 800f338:	f001 fa88 	bl	801084c <__mcmp>
 800f33c:	2800      	cmp	r0, #0
 800f33e:	dd6b      	ble.n	800f418 <_strtod_l+0x924>
 800f340:	9908      	ldr	r1, [sp, #32]
 800f342:	003b      	movs	r3, r7
 800f344:	4a38      	ldr	r2, [pc, #224]	; (800f428 <_strtod_l+0x934>)
 800f346:	2900      	cmp	r1, #0
 800f348:	d100      	bne.n	800f34c <_strtod_l+0x858>
 800f34a:	e092      	b.n	800f472 <_strtod_l+0x97e>
 800f34c:	0011      	movs	r1, r2
 800f34e:	20d6      	movs	r0, #214	; 0xd6
 800f350:	4039      	ands	r1, r7
 800f352:	04c0      	lsls	r0, r0, #19
 800f354:	4281      	cmp	r1, r0
 800f356:	dd00      	ble.n	800f35a <_strtod_l+0x866>
 800f358:	e08b      	b.n	800f472 <_strtod_l+0x97e>
 800f35a:	23dc      	movs	r3, #220	; 0xdc
 800f35c:	049b      	lsls	r3, r3, #18
 800f35e:	4299      	cmp	r1, r3
 800f360:	dc00      	bgt.n	800f364 <_strtod_l+0x870>
 800f362:	e6a4      	b.n	800f0ae <_strtod_l+0x5ba>
 800f364:	0030      	movs	r0, r6
 800f366:	0039      	movs	r1, r7
 800f368:	2200      	movs	r2, #0
 800f36a:	4b30      	ldr	r3, [pc, #192]	; (800f42c <_strtod_l+0x938>)
 800f36c:	f7f2 ff60 	bl	8002230 <__aeabi_dmul>
 800f370:	0006      	movs	r6, r0
 800f372:	000f      	movs	r7, r1
 800f374:	4308      	orrs	r0, r1
 800f376:	d000      	beq.n	800f37a <_strtod_l+0x886>
 800f378:	e62f      	b.n	800efda <_strtod_l+0x4e6>
 800f37a:	2322      	movs	r3, #34	; 0x22
 800f37c:	9a05      	ldr	r2, [sp, #20]
 800f37e:	6013      	str	r3, [r2, #0]
 800f380:	e62b      	b.n	800efda <_strtod_l+0x4e6>
 800f382:	234b      	movs	r3, #75	; 0x4b
 800f384:	1a9a      	subs	r2, r3, r2
 800f386:	3b4c      	subs	r3, #76	; 0x4c
 800f388:	4093      	lsls	r3, r2
 800f38a:	4019      	ands	r1, r3
 800f38c:	000f      	movs	r7, r1
 800f38e:	e6e0      	b.n	800f152 <_strtod_l+0x65e>
 800f390:	2201      	movs	r2, #1
 800f392:	4252      	negs	r2, r2
 800f394:	409a      	lsls	r2, r3
 800f396:	4016      	ands	r6, r2
 800f398:	e6db      	b.n	800f152 <_strtod_l+0x65e>
 800f39a:	4925      	ldr	r1, [pc, #148]	; (800f430 <_strtod_l+0x93c>)
 800f39c:	1acb      	subs	r3, r1, r3
 800f39e:	0001      	movs	r1, r0
 800f3a0:	4099      	lsls	r1, r3
 800f3a2:	9110      	str	r1, [sp, #64]	; 0x40
 800f3a4:	e741      	b.n	800f22a <_strtod_l+0x736>
 800f3a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f3a8:	9920      	ldr	r1, [sp, #128]	; 0x80
 800f3aa:	9805      	ldr	r0, [sp, #20]
 800f3ac:	f001 f9e0 	bl	8010770 <__lshift>
 800f3b0:	9020      	str	r0, [sp, #128]	; 0x80
 800f3b2:	2800      	cmp	r0, #0
 800f3b4:	d000      	beq.n	800f3b8 <_strtod_l+0x8c4>
 800f3b6:	e76c      	b.n	800f292 <_strtod_l+0x79e>
 800f3b8:	e606      	b.n	800efc8 <_strtod_l+0x4d4>
 800f3ba:	970c      	str	r7, [sp, #48]	; 0x30
 800f3bc:	2800      	cmp	r0, #0
 800f3be:	d176      	bne.n	800f4ae <_strtod_l+0x9ba>
 800f3c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f3c2:	033b      	lsls	r3, r7, #12
 800f3c4:	0b1b      	lsrs	r3, r3, #12
 800f3c6:	2a00      	cmp	r2, #0
 800f3c8:	d038      	beq.n	800f43c <_strtod_l+0x948>
 800f3ca:	4a1a      	ldr	r2, [pc, #104]	; (800f434 <_strtod_l+0x940>)
 800f3cc:	4293      	cmp	r3, r2
 800f3ce:	d138      	bne.n	800f442 <_strtod_l+0x94e>
 800f3d0:	2201      	movs	r2, #1
 800f3d2:	9b08      	ldr	r3, [sp, #32]
 800f3d4:	4252      	negs	r2, r2
 800f3d6:	0031      	movs	r1, r6
 800f3d8:	0010      	movs	r0, r2
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d00b      	beq.n	800f3f6 <_strtod_l+0x902>
 800f3de:	24d4      	movs	r4, #212	; 0xd4
 800f3e0:	4b11      	ldr	r3, [pc, #68]	; (800f428 <_strtod_l+0x934>)
 800f3e2:	0010      	movs	r0, r2
 800f3e4:	403b      	ands	r3, r7
 800f3e6:	04e4      	lsls	r4, r4, #19
 800f3e8:	42a3      	cmp	r3, r4
 800f3ea:	d804      	bhi.n	800f3f6 <_strtod_l+0x902>
 800f3ec:	306c      	adds	r0, #108	; 0x6c
 800f3ee:	0d1b      	lsrs	r3, r3, #20
 800f3f0:	1ac3      	subs	r3, r0, r3
 800f3f2:	409a      	lsls	r2, r3
 800f3f4:	0010      	movs	r0, r2
 800f3f6:	4281      	cmp	r1, r0
 800f3f8:	d123      	bne.n	800f442 <_strtod_l+0x94e>
 800f3fa:	4b0f      	ldr	r3, [pc, #60]	; (800f438 <_strtod_l+0x944>)
 800f3fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f3fe:	429a      	cmp	r2, r3
 800f400:	d102      	bne.n	800f408 <_strtod_l+0x914>
 800f402:	1c4b      	adds	r3, r1, #1
 800f404:	d100      	bne.n	800f408 <_strtod_l+0x914>
 800f406:	e5df      	b.n	800efc8 <_strtod_l+0x4d4>
 800f408:	4b07      	ldr	r3, [pc, #28]	; (800f428 <_strtod_l+0x934>)
 800f40a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f40c:	2600      	movs	r6, #0
 800f40e:	401a      	ands	r2, r3
 800f410:	0013      	movs	r3, r2
 800f412:	2280      	movs	r2, #128	; 0x80
 800f414:	0352      	lsls	r2, r2, #13
 800f416:	189f      	adds	r7, r3, r2
 800f418:	9b08      	ldr	r3, [sp, #32]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d1a2      	bne.n	800f364 <_strtod_l+0x870>
 800f41e:	e5dc      	b.n	800efda <_strtod_l+0x4e6>
 800f420:	080134d0 	.word	0x080134d0
 800f424:	fffffc02 	.word	0xfffffc02
 800f428:	7ff00000 	.word	0x7ff00000
 800f42c:	39500000 	.word	0x39500000
 800f430:	fffffbe2 	.word	0xfffffbe2
 800f434:	000fffff 	.word	0x000fffff
 800f438:	7fefffff 	.word	0x7fefffff
 800f43c:	4333      	orrs	r3, r6
 800f43e:	d100      	bne.n	800f442 <_strtod_l+0x94e>
 800f440:	e77e      	b.n	800f340 <_strtod_l+0x84c>
 800f442:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f444:	2b00      	cmp	r3, #0
 800f446:	d01d      	beq.n	800f484 <_strtod_l+0x990>
 800f448:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f44a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f44c:	4213      	tst	r3, r2
 800f44e:	d0e3      	beq.n	800f418 <_strtod_l+0x924>
 800f450:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f452:	0030      	movs	r0, r6
 800f454:	0039      	movs	r1, r7
 800f456:	9a08      	ldr	r2, [sp, #32]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d017      	beq.n	800f48c <_strtod_l+0x998>
 800f45c:	f7ff fb32 	bl	800eac4 <sulp>
 800f460:	0002      	movs	r2, r0
 800f462:	000b      	movs	r3, r1
 800f464:	9812      	ldr	r0, [sp, #72]	; 0x48
 800f466:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800f468:	f7f1 ffa4 	bl	80013b4 <__aeabi_dadd>
 800f46c:	0006      	movs	r6, r0
 800f46e:	000f      	movs	r7, r1
 800f470:	e7d2      	b.n	800f418 <_strtod_l+0x924>
 800f472:	2601      	movs	r6, #1
 800f474:	4013      	ands	r3, r2
 800f476:	4a99      	ldr	r2, [pc, #612]	; (800f6dc <_strtod_l+0xbe8>)
 800f478:	4276      	negs	r6, r6
 800f47a:	189b      	adds	r3, r3, r2
 800f47c:	4a98      	ldr	r2, [pc, #608]	; (800f6e0 <_strtod_l+0xbec>)
 800f47e:	431a      	orrs	r2, r3
 800f480:	0017      	movs	r7, r2
 800f482:	e7c9      	b.n	800f418 <_strtod_l+0x924>
 800f484:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f486:	4233      	tst	r3, r6
 800f488:	d0c6      	beq.n	800f418 <_strtod_l+0x924>
 800f48a:	e7e1      	b.n	800f450 <_strtod_l+0x95c>
 800f48c:	f7ff fb1a 	bl	800eac4 <sulp>
 800f490:	0002      	movs	r2, r0
 800f492:	000b      	movs	r3, r1
 800f494:	9812      	ldr	r0, [sp, #72]	; 0x48
 800f496:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800f498:	f7f3 f936 	bl	8002708 <__aeabi_dsub>
 800f49c:	2200      	movs	r2, #0
 800f49e:	2300      	movs	r3, #0
 800f4a0:	0006      	movs	r6, r0
 800f4a2:	000f      	movs	r7, r1
 800f4a4:	f7f0 ffd8 	bl	8000458 <__aeabi_dcmpeq>
 800f4a8:	2800      	cmp	r0, #0
 800f4aa:	d0b5      	beq.n	800f418 <_strtod_l+0x924>
 800f4ac:	e5ff      	b.n	800f0ae <_strtod_l+0x5ba>
 800f4ae:	9907      	ldr	r1, [sp, #28]
 800f4b0:	9806      	ldr	r0, [sp, #24]
 800f4b2:	f001 fb57 	bl	8010b64 <__ratio>
 800f4b6:	2380      	movs	r3, #128	; 0x80
 800f4b8:	2200      	movs	r2, #0
 800f4ba:	05db      	lsls	r3, r3, #23
 800f4bc:	0004      	movs	r4, r0
 800f4be:	000d      	movs	r5, r1
 800f4c0:	f7f0 ffda 	bl	8000478 <__aeabi_dcmple>
 800f4c4:	2800      	cmp	r0, #0
 800f4c6:	d075      	beq.n	800f5b4 <_strtod_l+0xac0>
 800f4c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d047      	beq.n	800f55e <_strtod_l+0xa6a>
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	4c84      	ldr	r4, [pc, #528]	; (800f6e4 <_strtod_l+0xbf0>)
 800f4d2:	2500      	movs	r5, #0
 800f4d4:	9310      	str	r3, [sp, #64]	; 0x40
 800f4d6:	9411      	str	r4, [sp, #68]	; 0x44
 800f4d8:	4c82      	ldr	r4, [pc, #520]	; (800f6e4 <_strtod_l+0xbf0>)
 800f4da:	4a83      	ldr	r2, [pc, #524]	; (800f6e8 <_strtod_l+0xbf4>)
 800f4dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f4de:	4013      	ands	r3, r2
 800f4e0:	9314      	str	r3, [sp, #80]	; 0x50
 800f4e2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f4e4:	4b81      	ldr	r3, [pc, #516]	; (800f6ec <_strtod_l+0xbf8>)
 800f4e6:	429a      	cmp	r2, r3
 800f4e8:	d000      	beq.n	800f4ec <_strtod_l+0x9f8>
 800f4ea:	e0ac      	b.n	800f646 <_strtod_l+0xb52>
 800f4ec:	4a80      	ldr	r2, [pc, #512]	; (800f6f0 <_strtod_l+0xbfc>)
 800f4ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f4f0:	4694      	mov	ip, r2
 800f4f2:	4463      	add	r3, ip
 800f4f4:	001f      	movs	r7, r3
 800f4f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f4f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f4fa:	0030      	movs	r0, r6
 800f4fc:	0039      	movs	r1, r7
 800f4fe:	920c      	str	r2, [sp, #48]	; 0x30
 800f500:	930d      	str	r3, [sp, #52]	; 0x34
 800f502:	f001 fa57 	bl	80109b4 <__ulp>
 800f506:	0002      	movs	r2, r0
 800f508:	000b      	movs	r3, r1
 800f50a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f50c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800f50e:	f7f2 fe8f 	bl	8002230 <__aeabi_dmul>
 800f512:	0032      	movs	r2, r6
 800f514:	003b      	movs	r3, r7
 800f516:	f7f1 ff4d 	bl	80013b4 <__aeabi_dadd>
 800f51a:	4a73      	ldr	r2, [pc, #460]	; (800f6e8 <_strtod_l+0xbf4>)
 800f51c:	4b75      	ldr	r3, [pc, #468]	; (800f6f4 <_strtod_l+0xc00>)
 800f51e:	0006      	movs	r6, r0
 800f520:	400a      	ands	r2, r1
 800f522:	429a      	cmp	r2, r3
 800f524:	d95e      	bls.n	800f5e4 <_strtod_l+0xaf0>
 800f526:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f528:	4b73      	ldr	r3, [pc, #460]	; (800f6f8 <_strtod_l+0xc04>)
 800f52a:	429a      	cmp	r2, r3
 800f52c:	d103      	bne.n	800f536 <_strtod_l+0xa42>
 800f52e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f530:	3301      	adds	r3, #1
 800f532:	d100      	bne.n	800f536 <_strtod_l+0xa42>
 800f534:	e548      	b.n	800efc8 <_strtod_l+0x4d4>
 800f536:	2601      	movs	r6, #1
 800f538:	4f6f      	ldr	r7, [pc, #444]	; (800f6f8 <_strtod_l+0xc04>)
 800f53a:	4276      	negs	r6, r6
 800f53c:	9920      	ldr	r1, [sp, #128]	; 0x80
 800f53e:	9805      	ldr	r0, [sp, #20]
 800f540:	f000 fef8 	bl	8010334 <_Bfree>
 800f544:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f546:	9805      	ldr	r0, [sp, #20]
 800f548:	f000 fef4 	bl	8010334 <_Bfree>
 800f54c:	9907      	ldr	r1, [sp, #28]
 800f54e:	9805      	ldr	r0, [sp, #20]
 800f550:	f000 fef0 	bl	8010334 <_Bfree>
 800f554:	9906      	ldr	r1, [sp, #24]
 800f556:	9805      	ldr	r0, [sp, #20]
 800f558:	f000 feec 	bl	8010334 <_Bfree>
 800f55c:	e61d      	b.n	800f19a <_strtod_l+0x6a6>
 800f55e:	2e00      	cmp	r6, #0
 800f560:	d11c      	bne.n	800f59c <_strtod_l+0xaa8>
 800f562:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f564:	031b      	lsls	r3, r3, #12
 800f566:	d11f      	bne.n	800f5a8 <_strtod_l+0xab4>
 800f568:	2200      	movs	r2, #0
 800f56a:	0020      	movs	r0, r4
 800f56c:	0029      	movs	r1, r5
 800f56e:	4b5d      	ldr	r3, [pc, #372]	; (800f6e4 <_strtod_l+0xbf0>)
 800f570:	f7f0 ff78 	bl	8000464 <__aeabi_dcmplt>
 800f574:	2800      	cmp	r0, #0
 800f576:	d11a      	bne.n	800f5ae <_strtod_l+0xaba>
 800f578:	0020      	movs	r0, r4
 800f57a:	0029      	movs	r1, r5
 800f57c:	2200      	movs	r2, #0
 800f57e:	4b5f      	ldr	r3, [pc, #380]	; (800f6fc <_strtod_l+0xc08>)
 800f580:	f7f2 fe56 	bl	8002230 <__aeabi_dmul>
 800f584:	0005      	movs	r5, r0
 800f586:	000c      	movs	r4, r1
 800f588:	2380      	movs	r3, #128	; 0x80
 800f58a:	061b      	lsls	r3, r3, #24
 800f58c:	18e3      	adds	r3, r4, r3
 800f58e:	951c      	str	r5, [sp, #112]	; 0x70
 800f590:	931d      	str	r3, [sp, #116]	; 0x74
 800f592:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800f594:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f596:	9210      	str	r2, [sp, #64]	; 0x40
 800f598:	9311      	str	r3, [sp, #68]	; 0x44
 800f59a:	e79e      	b.n	800f4da <_strtod_l+0x9e6>
 800f59c:	2e01      	cmp	r6, #1
 800f59e:	d103      	bne.n	800f5a8 <_strtod_l+0xab4>
 800f5a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d100      	bne.n	800f5a8 <_strtod_l+0xab4>
 800f5a6:	e582      	b.n	800f0ae <_strtod_l+0x5ba>
 800f5a8:	2300      	movs	r3, #0
 800f5aa:	4c55      	ldr	r4, [pc, #340]	; (800f700 <_strtod_l+0xc0c>)
 800f5ac:	e791      	b.n	800f4d2 <_strtod_l+0x9de>
 800f5ae:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f5b0:	4c52      	ldr	r4, [pc, #328]	; (800f6fc <_strtod_l+0xc08>)
 800f5b2:	e7e9      	b.n	800f588 <_strtod_l+0xa94>
 800f5b4:	2200      	movs	r2, #0
 800f5b6:	0020      	movs	r0, r4
 800f5b8:	0029      	movs	r1, r5
 800f5ba:	4b50      	ldr	r3, [pc, #320]	; (800f6fc <_strtod_l+0xc08>)
 800f5bc:	f7f2 fe38 	bl	8002230 <__aeabi_dmul>
 800f5c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f5c2:	0005      	movs	r5, r0
 800f5c4:	000b      	movs	r3, r1
 800f5c6:	000c      	movs	r4, r1
 800f5c8:	2a00      	cmp	r2, #0
 800f5ca:	d107      	bne.n	800f5dc <_strtod_l+0xae8>
 800f5cc:	2280      	movs	r2, #128	; 0x80
 800f5ce:	0612      	lsls	r2, r2, #24
 800f5d0:	188b      	adds	r3, r1, r2
 800f5d2:	9016      	str	r0, [sp, #88]	; 0x58
 800f5d4:	9317      	str	r3, [sp, #92]	; 0x5c
 800f5d6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800f5d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f5da:	e7dc      	b.n	800f596 <_strtod_l+0xaa2>
 800f5dc:	0002      	movs	r2, r0
 800f5de:	9216      	str	r2, [sp, #88]	; 0x58
 800f5e0:	9317      	str	r3, [sp, #92]	; 0x5c
 800f5e2:	e7f8      	b.n	800f5d6 <_strtod_l+0xae2>
 800f5e4:	23d4      	movs	r3, #212	; 0xd4
 800f5e6:	049b      	lsls	r3, r3, #18
 800f5e8:	18cf      	adds	r7, r1, r3
 800f5ea:	9b08      	ldr	r3, [sp, #32]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d1a5      	bne.n	800f53c <_strtod_l+0xa48>
 800f5f0:	4b3d      	ldr	r3, [pc, #244]	; (800f6e8 <_strtod_l+0xbf4>)
 800f5f2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f5f4:	403b      	ands	r3, r7
 800f5f6:	429a      	cmp	r2, r3
 800f5f8:	d1a0      	bne.n	800f53c <_strtod_l+0xa48>
 800f5fa:	0028      	movs	r0, r5
 800f5fc:	0021      	movs	r1, r4
 800f5fe:	f7f0 ffc9 	bl	8000594 <__aeabi_d2lz>
 800f602:	f7f1 f803 	bl	800060c <__aeabi_l2d>
 800f606:	0002      	movs	r2, r0
 800f608:	000b      	movs	r3, r1
 800f60a:	0028      	movs	r0, r5
 800f60c:	0021      	movs	r1, r4
 800f60e:	f7f3 f87b 	bl	8002708 <__aeabi_dsub>
 800f612:	033b      	lsls	r3, r7, #12
 800f614:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f616:	0b1b      	lsrs	r3, r3, #12
 800f618:	4333      	orrs	r3, r6
 800f61a:	4313      	orrs	r3, r2
 800f61c:	0004      	movs	r4, r0
 800f61e:	000d      	movs	r5, r1
 800f620:	4a38      	ldr	r2, [pc, #224]	; (800f704 <_strtod_l+0xc10>)
 800f622:	2b00      	cmp	r3, #0
 800f624:	d055      	beq.n	800f6d2 <_strtod_l+0xbde>
 800f626:	4b38      	ldr	r3, [pc, #224]	; (800f708 <_strtod_l+0xc14>)
 800f628:	f7f0 ff1c 	bl	8000464 <__aeabi_dcmplt>
 800f62c:	2800      	cmp	r0, #0
 800f62e:	d000      	beq.n	800f632 <_strtod_l+0xb3e>
 800f630:	e4d3      	b.n	800efda <_strtod_l+0x4e6>
 800f632:	0020      	movs	r0, r4
 800f634:	0029      	movs	r1, r5
 800f636:	4a35      	ldr	r2, [pc, #212]	; (800f70c <_strtod_l+0xc18>)
 800f638:	4b30      	ldr	r3, [pc, #192]	; (800f6fc <_strtod_l+0xc08>)
 800f63a:	f7f0 ff27 	bl	800048c <__aeabi_dcmpgt>
 800f63e:	2800      	cmp	r0, #0
 800f640:	d100      	bne.n	800f644 <_strtod_l+0xb50>
 800f642:	e77b      	b.n	800f53c <_strtod_l+0xa48>
 800f644:	e4c9      	b.n	800efda <_strtod_l+0x4e6>
 800f646:	9b08      	ldr	r3, [sp, #32]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d02b      	beq.n	800f6a4 <_strtod_l+0xbb0>
 800f64c:	23d4      	movs	r3, #212	; 0xd4
 800f64e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f650:	04db      	lsls	r3, r3, #19
 800f652:	429a      	cmp	r2, r3
 800f654:	d826      	bhi.n	800f6a4 <_strtod_l+0xbb0>
 800f656:	0028      	movs	r0, r5
 800f658:	0021      	movs	r1, r4
 800f65a:	4a2d      	ldr	r2, [pc, #180]	; (800f710 <_strtod_l+0xc1c>)
 800f65c:	4b2d      	ldr	r3, [pc, #180]	; (800f714 <_strtod_l+0xc20>)
 800f65e:	f7f0 ff0b 	bl	8000478 <__aeabi_dcmple>
 800f662:	2800      	cmp	r0, #0
 800f664:	d017      	beq.n	800f696 <_strtod_l+0xba2>
 800f666:	0028      	movs	r0, r5
 800f668:	0021      	movs	r1, r4
 800f66a:	f7f0 ff75 	bl	8000558 <__aeabi_d2uiz>
 800f66e:	2800      	cmp	r0, #0
 800f670:	d100      	bne.n	800f674 <_strtod_l+0xb80>
 800f672:	3001      	adds	r0, #1
 800f674:	f7f3 fc5e 	bl	8002f34 <__aeabi_ui2d>
 800f678:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f67a:	0005      	movs	r5, r0
 800f67c:	000b      	movs	r3, r1
 800f67e:	000c      	movs	r4, r1
 800f680:	2a00      	cmp	r2, #0
 800f682:	d122      	bne.n	800f6ca <_strtod_l+0xbd6>
 800f684:	2280      	movs	r2, #128	; 0x80
 800f686:	0612      	lsls	r2, r2, #24
 800f688:	188b      	adds	r3, r1, r2
 800f68a:	9018      	str	r0, [sp, #96]	; 0x60
 800f68c:	9319      	str	r3, [sp, #100]	; 0x64
 800f68e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f690:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f692:	9210      	str	r2, [sp, #64]	; 0x40
 800f694:	9311      	str	r3, [sp, #68]	; 0x44
 800f696:	22d6      	movs	r2, #214	; 0xd6
 800f698:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f69a:	04d2      	lsls	r2, r2, #19
 800f69c:	189b      	adds	r3, r3, r2
 800f69e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f6a0:	1a9b      	subs	r3, r3, r2
 800f6a2:	9311      	str	r3, [sp, #68]	; 0x44
 800f6a4:	9812      	ldr	r0, [sp, #72]	; 0x48
 800f6a6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800f6a8:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800f6aa:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800f6ac:	f001 f982 	bl	80109b4 <__ulp>
 800f6b0:	0002      	movs	r2, r0
 800f6b2:	000b      	movs	r3, r1
 800f6b4:	0030      	movs	r0, r6
 800f6b6:	0039      	movs	r1, r7
 800f6b8:	f7f2 fdba 	bl	8002230 <__aeabi_dmul>
 800f6bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f6be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f6c0:	f7f1 fe78 	bl	80013b4 <__aeabi_dadd>
 800f6c4:	0006      	movs	r6, r0
 800f6c6:	000f      	movs	r7, r1
 800f6c8:	e78f      	b.n	800f5ea <_strtod_l+0xaf6>
 800f6ca:	0002      	movs	r2, r0
 800f6cc:	9218      	str	r2, [sp, #96]	; 0x60
 800f6ce:	9319      	str	r3, [sp, #100]	; 0x64
 800f6d0:	e7dd      	b.n	800f68e <_strtod_l+0xb9a>
 800f6d2:	4b11      	ldr	r3, [pc, #68]	; (800f718 <_strtod_l+0xc24>)
 800f6d4:	f7f0 fec6 	bl	8000464 <__aeabi_dcmplt>
 800f6d8:	e7b1      	b.n	800f63e <_strtod_l+0xb4a>
 800f6da:	46c0      	nop			; (mov r8, r8)
 800f6dc:	fff00000 	.word	0xfff00000
 800f6e0:	000fffff 	.word	0x000fffff
 800f6e4:	3ff00000 	.word	0x3ff00000
 800f6e8:	7ff00000 	.word	0x7ff00000
 800f6ec:	7fe00000 	.word	0x7fe00000
 800f6f0:	fcb00000 	.word	0xfcb00000
 800f6f4:	7c9fffff 	.word	0x7c9fffff
 800f6f8:	7fefffff 	.word	0x7fefffff
 800f6fc:	3fe00000 	.word	0x3fe00000
 800f700:	bff00000 	.word	0xbff00000
 800f704:	94a03595 	.word	0x94a03595
 800f708:	3fdfffff 	.word	0x3fdfffff
 800f70c:	35afe535 	.word	0x35afe535
 800f710:	ffc00000 	.word	0xffc00000
 800f714:	41dfffff 	.word	0x41dfffff
 800f718:	3fcfffff 	.word	0x3fcfffff

0800f71c <strtof>:
 800f71c:	000a      	movs	r2, r1
 800f71e:	0001      	movs	r1, r0
 800f720:	4824      	ldr	r0, [pc, #144]	; (800f7b4 <strtof+0x98>)
 800f722:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f724:	6800      	ldr	r0, [r0, #0]
 800f726:	4b24      	ldr	r3, [pc, #144]	; (800f7b8 <strtof+0x9c>)
 800f728:	f7ff f9e4 	bl	800eaf4 <_strtod_l>
 800f72c:	0006      	movs	r6, r0
 800f72e:	000c      	movs	r4, r1
 800f730:	0002      	movs	r2, r0
 800f732:	000b      	movs	r3, r1
 800f734:	0030      	movs	r0, r6
 800f736:	0021      	movs	r1, r4
 800f738:	f7f3 fb78 	bl	8002e2c <__aeabi_dcmpun>
 800f73c:	2800      	cmp	r0, #0
 800f73e:	d00d      	beq.n	800f75c <strtof+0x40>
 800f740:	481e      	ldr	r0, [pc, #120]	; (800f7bc <strtof+0xa0>)
 800f742:	2c00      	cmp	r4, #0
 800f744:	da06      	bge.n	800f754 <strtof+0x38>
 800f746:	f001 fe85 	bl	8011454 <nanf>
 800f74a:	2380      	movs	r3, #128	; 0x80
 800f74c:	061b      	lsls	r3, r3, #24
 800f74e:	18c5      	adds	r5, r0, r3
 800f750:	1c28      	adds	r0, r5, #0
 800f752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f754:	f001 fe7e 	bl	8011454 <nanf>
 800f758:	1c05      	adds	r5, r0, #0
 800f75a:	e7f9      	b.n	800f750 <strtof+0x34>
 800f75c:	0021      	movs	r1, r4
 800f75e:	0030      	movs	r0, r6
 800f760:	f7f3 fc56 	bl	8003010 <__aeabi_d2f>
 800f764:	0047      	lsls	r7, r0, #1
 800f766:	087f      	lsrs	r7, r7, #1
 800f768:	1c05      	adds	r5, r0, #0
 800f76a:	4915      	ldr	r1, [pc, #84]	; (800f7c0 <strtof+0xa4>)
 800f76c:	1c38      	adds	r0, r7, #0
 800f76e:	f7f1 fd9d 	bl	80012ac <__aeabi_fcmpun>
 800f772:	2800      	cmp	r0, #0
 800f774:	d1ec      	bne.n	800f750 <strtof+0x34>
 800f776:	4912      	ldr	r1, [pc, #72]	; (800f7c0 <strtof+0xa4>)
 800f778:	1c38      	adds	r0, r7, #0
 800f77a:	f7f0 feb7 	bl	80004ec <__aeabi_fcmple>
 800f77e:	2800      	cmp	r0, #0
 800f780:	d1e6      	bne.n	800f750 <strtof+0x34>
 800f782:	2201      	movs	r2, #1
 800f784:	0064      	lsls	r4, r4, #1
 800f786:	0864      	lsrs	r4, r4, #1
 800f788:	0030      	movs	r0, r6
 800f78a:	0021      	movs	r1, r4
 800f78c:	4b0d      	ldr	r3, [pc, #52]	; (800f7c4 <strtof+0xa8>)
 800f78e:	4252      	negs	r2, r2
 800f790:	f7f3 fb4c 	bl	8002e2c <__aeabi_dcmpun>
 800f794:	2800      	cmp	r0, #0
 800f796:	d108      	bne.n	800f7aa <strtof+0x8e>
 800f798:	2201      	movs	r2, #1
 800f79a:	0030      	movs	r0, r6
 800f79c:	0021      	movs	r1, r4
 800f79e:	4b09      	ldr	r3, [pc, #36]	; (800f7c4 <strtof+0xa8>)
 800f7a0:	4252      	negs	r2, r2
 800f7a2:	f7f0 fe69 	bl	8000478 <__aeabi_dcmple>
 800f7a6:	2800      	cmp	r0, #0
 800f7a8:	d0d2      	beq.n	800f750 <strtof+0x34>
 800f7aa:	2222      	movs	r2, #34	; 0x22
 800f7ac:	4b01      	ldr	r3, [pc, #4]	; (800f7b4 <strtof+0x98>)
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	601a      	str	r2, [r3, #0]
 800f7b2:	e7cd      	b.n	800f750 <strtof+0x34>
 800f7b4:	200000bc 	.word	0x200000bc
 800f7b8:	20000124 	.word	0x20000124
 800f7bc:	08013862 	.word	0x08013862
 800f7c0:	7f7fffff 	.word	0x7f7fffff
 800f7c4:	7fefffff 	.word	0x7fefffff

0800f7c8 <_strtol_l.constprop.0>:
 800f7c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f7ca:	b087      	sub	sp, #28
 800f7cc:	001e      	movs	r6, r3
 800f7ce:	9005      	str	r0, [sp, #20]
 800f7d0:	9101      	str	r1, [sp, #4]
 800f7d2:	9202      	str	r2, [sp, #8]
 800f7d4:	2b01      	cmp	r3, #1
 800f7d6:	d045      	beq.n	800f864 <_strtol_l.constprop.0+0x9c>
 800f7d8:	000b      	movs	r3, r1
 800f7da:	2e24      	cmp	r6, #36	; 0x24
 800f7dc:	d842      	bhi.n	800f864 <_strtol_l.constprop.0+0x9c>
 800f7de:	4a3f      	ldr	r2, [pc, #252]	; (800f8dc <_strtol_l.constprop.0+0x114>)
 800f7e0:	2108      	movs	r1, #8
 800f7e2:	4694      	mov	ip, r2
 800f7e4:	001a      	movs	r2, r3
 800f7e6:	4660      	mov	r0, ip
 800f7e8:	7814      	ldrb	r4, [r2, #0]
 800f7ea:	3301      	adds	r3, #1
 800f7ec:	5d00      	ldrb	r0, [r0, r4]
 800f7ee:	001d      	movs	r5, r3
 800f7f0:	0007      	movs	r7, r0
 800f7f2:	400f      	ands	r7, r1
 800f7f4:	4208      	tst	r0, r1
 800f7f6:	d1f5      	bne.n	800f7e4 <_strtol_l.constprop.0+0x1c>
 800f7f8:	2c2d      	cmp	r4, #45	; 0x2d
 800f7fa:	d13a      	bne.n	800f872 <_strtol_l.constprop.0+0xaa>
 800f7fc:	2701      	movs	r7, #1
 800f7fe:	781c      	ldrb	r4, [r3, #0]
 800f800:	1c95      	adds	r5, r2, #2
 800f802:	2e00      	cmp	r6, #0
 800f804:	d065      	beq.n	800f8d2 <_strtol_l.constprop.0+0x10a>
 800f806:	2e10      	cmp	r6, #16
 800f808:	d109      	bne.n	800f81e <_strtol_l.constprop.0+0x56>
 800f80a:	2c30      	cmp	r4, #48	; 0x30
 800f80c:	d107      	bne.n	800f81e <_strtol_l.constprop.0+0x56>
 800f80e:	2220      	movs	r2, #32
 800f810:	782b      	ldrb	r3, [r5, #0]
 800f812:	4393      	bics	r3, r2
 800f814:	2b58      	cmp	r3, #88	; 0x58
 800f816:	d157      	bne.n	800f8c8 <_strtol_l.constprop.0+0x100>
 800f818:	2610      	movs	r6, #16
 800f81a:	786c      	ldrb	r4, [r5, #1]
 800f81c:	3502      	adds	r5, #2
 800f81e:	4b30      	ldr	r3, [pc, #192]	; (800f8e0 <_strtol_l.constprop.0+0x118>)
 800f820:	0031      	movs	r1, r6
 800f822:	18fb      	adds	r3, r7, r3
 800f824:	0018      	movs	r0, r3
 800f826:	9303      	str	r3, [sp, #12]
 800f828:	f7f0 fd16 	bl	8000258 <__aeabi_uidivmod>
 800f82c:	2300      	movs	r3, #0
 800f82e:	2201      	movs	r2, #1
 800f830:	4684      	mov	ip, r0
 800f832:	0018      	movs	r0, r3
 800f834:	9104      	str	r1, [sp, #16]
 800f836:	4252      	negs	r2, r2
 800f838:	0021      	movs	r1, r4
 800f83a:	3930      	subs	r1, #48	; 0x30
 800f83c:	2909      	cmp	r1, #9
 800f83e:	d81d      	bhi.n	800f87c <_strtol_l.constprop.0+0xb4>
 800f840:	000c      	movs	r4, r1
 800f842:	42a6      	cmp	r6, r4
 800f844:	dd28      	ble.n	800f898 <_strtol_l.constprop.0+0xd0>
 800f846:	2b00      	cmp	r3, #0
 800f848:	db24      	blt.n	800f894 <_strtol_l.constprop.0+0xcc>
 800f84a:	0013      	movs	r3, r2
 800f84c:	4584      	cmp	ip, r0
 800f84e:	d306      	bcc.n	800f85e <_strtol_l.constprop.0+0x96>
 800f850:	d102      	bne.n	800f858 <_strtol_l.constprop.0+0x90>
 800f852:	9904      	ldr	r1, [sp, #16]
 800f854:	42a1      	cmp	r1, r4
 800f856:	db02      	blt.n	800f85e <_strtol_l.constprop.0+0x96>
 800f858:	2301      	movs	r3, #1
 800f85a:	4370      	muls	r0, r6
 800f85c:	1820      	adds	r0, r4, r0
 800f85e:	782c      	ldrb	r4, [r5, #0]
 800f860:	3501      	adds	r5, #1
 800f862:	e7e9      	b.n	800f838 <_strtol_l.constprop.0+0x70>
 800f864:	f7ff f88c 	bl	800e980 <__errno>
 800f868:	2316      	movs	r3, #22
 800f86a:	6003      	str	r3, [r0, #0]
 800f86c:	2000      	movs	r0, #0
 800f86e:	b007      	add	sp, #28
 800f870:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f872:	2c2b      	cmp	r4, #43	; 0x2b
 800f874:	d1c5      	bne.n	800f802 <_strtol_l.constprop.0+0x3a>
 800f876:	781c      	ldrb	r4, [r3, #0]
 800f878:	1c95      	adds	r5, r2, #2
 800f87a:	e7c2      	b.n	800f802 <_strtol_l.constprop.0+0x3a>
 800f87c:	0021      	movs	r1, r4
 800f87e:	3941      	subs	r1, #65	; 0x41
 800f880:	2919      	cmp	r1, #25
 800f882:	d801      	bhi.n	800f888 <_strtol_l.constprop.0+0xc0>
 800f884:	3c37      	subs	r4, #55	; 0x37
 800f886:	e7dc      	b.n	800f842 <_strtol_l.constprop.0+0x7a>
 800f888:	0021      	movs	r1, r4
 800f88a:	3961      	subs	r1, #97	; 0x61
 800f88c:	2919      	cmp	r1, #25
 800f88e:	d803      	bhi.n	800f898 <_strtol_l.constprop.0+0xd0>
 800f890:	3c57      	subs	r4, #87	; 0x57
 800f892:	e7d6      	b.n	800f842 <_strtol_l.constprop.0+0x7a>
 800f894:	0013      	movs	r3, r2
 800f896:	e7e2      	b.n	800f85e <_strtol_l.constprop.0+0x96>
 800f898:	2b00      	cmp	r3, #0
 800f89a:	da09      	bge.n	800f8b0 <_strtol_l.constprop.0+0xe8>
 800f89c:	2322      	movs	r3, #34	; 0x22
 800f89e:	9a05      	ldr	r2, [sp, #20]
 800f8a0:	9803      	ldr	r0, [sp, #12]
 800f8a2:	6013      	str	r3, [r2, #0]
 800f8a4:	9b02      	ldr	r3, [sp, #8]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d0e1      	beq.n	800f86e <_strtol_l.constprop.0+0xa6>
 800f8aa:	1e6b      	subs	r3, r5, #1
 800f8ac:	9301      	str	r3, [sp, #4]
 800f8ae:	e007      	b.n	800f8c0 <_strtol_l.constprop.0+0xf8>
 800f8b0:	2f00      	cmp	r7, #0
 800f8b2:	d000      	beq.n	800f8b6 <_strtol_l.constprop.0+0xee>
 800f8b4:	4240      	negs	r0, r0
 800f8b6:	9a02      	ldr	r2, [sp, #8]
 800f8b8:	2a00      	cmp	r2, #0
 800f8ba:	d0d8      	beq.n	800f86e <_strtol_l.constprop.0+0xa6>
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d1f4      	bne.n	800f8aa <_strtol_l.constprop.0+0xe2>
 800f8c0:	9b02      	ldr	r3, [sp, #8]
 800f8c2:	9a01      	ldr	r2, [sp, #4]
 800f8c4:	601a      	str	r2, [r3, #0]
 800f8c6:	e7d2      	b.n	800f86e <_strtol_l.constprop.0+0xa6>
 800f8c8:	2430      	movs	r4, #48	; 0x30
 800f8ca:	2e00      	cmp	r6, #0
 800f8cc:	d1a7      	bne.n	800f81e <_strtol_l.constprop.0+0x56>
 800f8ce:	3608      	adds	r6, #8
 800f8d0:	e7a5      	b.n	800f81e <_strtol_l.constprop.0+0x56>
 800f8d2:	2c30      	cmp	r4, #48	; 0x30
 800f8d4:	d09b      	beq.n	800f80e <_strtol_l.constprop.0+0x46>
 800f8d6:	260a      	movs	r6, #10
 800f8d8:	e7a1      	b.n	800f81e <_strtol_l.constprop.0+0x56>
 800f8da:	46c0      	nop			; (mov r8, r8)
 800f8dc:	080134f9 	.word	0x080134f9
 800f8e0:	7fffffff 	.word	0x7fffffff

0800f8e4 <strtol>:
 800f8e4:	b510      	push	{r4, lr}
 800f8e6:	0013      	movs	r3, r2
 800f8e8:	000a      	movs	r2, r1
 800f8ea:	0001      	movs	r1, r0
 800f8ec:	4802      	ldr	r0, [pc, #8]	; (800f8f8 <strtol+0x14>)
 800f8ee:	6800      	ldr	r0, [r0, #0]
 800f8f0:	f7ff ff6a 	bl	800f7c8 <_strtol_l.constprop.0>
 800f8f4:	bd10      	pop	{r4, pc}
 800f8f6:	46c0      	nop			; (mov r8, r8)
 800f8f8:	200000bc 	.word	0x200000bc

0800f8fc <print_e>:
 800f8fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f8fe:	b08b      	sub	sp, #44	; 0x2c
 800f900:	000f      	movs	r7, r1
 800f902:	a910      	add	r1, sp, #64	; 0x40
 800f904:	c920      	ldmia	r1!, {r5}
 800f906:	780e      	ldrb	r6, [r1, #0]
 800f908:	a908      	add	r1, sp, #32
 800f90a:	9104      	str	r1, [sp, #16]
 800f90c:	a907      	add	r1, sp, #28
 800f90e:	9103      	str	r1, [sp, #12]
 800f910:	a909      	add	r1, sp, #36	; 0x24
 800f912:	9102      	str	r1, [sp, #8]
 800f914:	1c69      	adds	r1, r5, #1
 800f916:	9101      	str	r1, [sp, #4]
 800f918:	2102      	movs	r1, #2
 800f91a:	9100      	str	r1, [sp, #0]
 800f91c:	f001 fe70 	bl	8011600 <_dtoa_r>
 800f920:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f922:	4b36      	ldr	r3, [pc, #216]	; (800f9fc <print_e+0x100>)
 800f924:	0001      	movs	r1, r0
 800f926:	429a      	cmp	r2, r3
 800f928:	d104      	bne.n	800f934 <print_e+0x38>
 800f92a:	0038      	movs	r0, r7
 800f92c:	f001 fd96 	bl	801145c <strcpy>
 800f930:	b00b      	add	sp, #44	; 0x2c
 800f932:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f934:	7801      	ldrb	r1, [r0, #0]
 800f936:	1c43      	adds	r3, r0, #1
 800f938:	1c7c      	adds	r4, r7, #1
 800f93a:	7039      	strb	r1, [r7, #0]
 800f93c:	2d00      	cmp	r5, #0
 800f93e:	dd01      	ble.n	800f944 <print_e+0x48>
 800f940:	2101      	movs	r1, #1
 800f942:	9112      	str	r1, [sp, #72]	; 0x48
 800f944:	212e      	movs	r1, #46	; 0x2e
 800f946:	7818      	ldrb	r0, [r3, #0]
 800f948:	2800      	cmp	r0, #0
 800f94a:	d001      	beq.n	800f950 <print_e+0x54>
 800f94c:	2d00      	cmp	r5, #0
 800f94e:	dc35      	bgt.n	800f9bc <print_e+0xc0>
 800f950:	2e67      	cmp	r6, #103	; 0x67
 800f952:	d04b      	beq.n	800f9ec <print_e+0xf0>
 800f954:	2e47      	cmp	r6, #71	; 0x47
 800f956:	d04b      	beq.n	800f9f0 <print_e+0xf4>
 800f958:	232e      	movs	r3, #46	; 0x2e
 800f95a:	2130      	movs	r1, #48	; 0x30
 800f95c:	2d00      	cmp	r5, #0
 800f95e:	dc3a      	bgt.n	800f9d6 <print_e+0xda>
 800f960:	1e53      	subs	r3, r2, #1
 800f962:	7026      	strb	r6, [r4, #0]
 800f964:	9309      	str	r3, [sp, #36]	; 0x24
 800f966:	1ca5      	adds	r5, r4, #2
 800f968:	2b00      	cmp	r3, #0
 800f96a:	da43      	bge.n	800f9f4 <print_e+0xf8>
 800f96c:	232d      	movs	r3, #45	; 0x2d
 800f96e:	7063      	strb	r3, [r4, #1]
 800f970:	3b2c      	subs	r3, #44	; 0x2c
 800f972:	1a9b      	subs	r3, r3, r2
 800f974:	9309      	str	r3, [sp, #36]	; 0x24
 800f976:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800f978:	2e63      	cmp	r6, #99	; 0x63
 800f97a:	dd0d      	ble.n	800f998 <print_e+0x9c>
 800f97c:	2164      	movs	r1, #100	; 0x64
 800f97e:	0030      	movs	r0, r6
 800f980:	f7f0 fc6e 	bl	8000260 <__divsi3>
 800f984:	0003      	movs	r3, r0
 800f986:	0002      	movs	r2, r0
 800f988:	2064      	movs	r0, #100	; 0x64
 800f98a:	4240      	negs	r0, r0
 800f98c:	4358      	muls	r0, r3
 800f98e:	3230      	adds	r2, #48	; 0x30
 800f990:	1980      	adds	r0, r0, r6
 800f992:	1ce5      	adds	r5, r4, #3
 800f994:	70a2      	strb	r2, [r4, #2]
 800f996:	9009      	str	r0, [sp, #36]	; 0x24
 800f998:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800f99a:	210a      	movs	r1, #10
 800f99c:	0020      	movs	r0, r4
 800f99e:	f7f0 fc5f 	bl	8000260 <__divsi3>
 800f9a2:	0003      	movs	r3, r0
 800f9a4:	0002      	movs	r2, r0
 800f9a6:	200a      	movs	r0, #10
 800f9a8:	4240      	negs	r0, r0
 800f9aa:	4358      	muls	r0, r3
 800f9ac:	2300      	movs	r3, #0
 800f9ae:	1900      	adds	r0, r0, r4
 800f9b0:	3230      	adds	r2, #48	; 0x30
 800f9b2:	3030      	adds	r0, #48	; 0x30
 800f9b4:	702a      	strb	r2, [r5, #0]
 800f9b6:	7068      	strb	r0, [r5, #1]
 800f9b8:	70ab      	strb	r3, [r5, #2]
 800f9ba:	e7b9      	b.n	800f930 <print_e+0x34>
 800f9bc:	9812      	ldr	r0, [sp, #72]	; 0x48
 800f9be:	2800      	cmp	r0, #0
 800f9c0:	d001      	beq.n	800f9c6 <print_e+0xca>
 800f9c2:	7021      	strb	r1, [r4, #0]
 800f9c4:	3401      	adds	r4, #1
 800f9c6:	7818      	ldrb	r0, [r3, #0]
 800f9c8:	3d01      	subs	r5, #1
 800f9ca:	7020      	strb	r0, [r4, #0]
 800f9cc:	2000      	movs	r0, #0
 800f9ce:	3301      	adds	r3, #1
 800f9d0:	3401      	adds	r4, #1
 800f9d2:	9012      	str	r0, [sp, #72]	; 0x48
 800f9d4:	e7b7      	b.n	800f946 <print_e+0x4a>
 800f9d6:	9812      	ldr	r0, [sp, #72]	; 0x48
 800f9d8:	2800      	cmp	r0, #0
 800f9da:	d001      	beq.n	800f9e0 <print_e+0xe4>
 800f9dc:	7023      	strb	r3, [r4, #0]
 800f9de:	3401      	adds	r4, #1
 800f9e0:	2000      	movs	r0, #0
 800f9e2:	7021      	strb	r1, [r4, #0]
 800f9e4:	3d01      	subs	r5, #1
 800f9e6:	3401      	adds	r4, #1
 800f9e8:	9012      	str	r0, [sp, #72]	; 0x48
 800f9ea:	e7b7      	b.n	800f95c <print_e+0x60>
 800f9ec:	2665      	movs	r6, #101	; 0x65
 800f9ee:	e7b7      	b.n	800f960 <print_e+0x64>
 800f9f0:	2645      	movs	r6, #69	; 0x45
 800f9f2:	e7b5      	b.n	800f960 <print_e+0x64>
 800f9f4:	232b      	movs	r3, #43	; 0x2b
 800f9f6:	7063      	strb	r3, [r4, #1]
 800f9f8:	e7bd      	b.n	800f976 <print_e+0x7a>
 800f9fa:	46c0      	nop			; (mov r8, r8)
 800f9fc:	0000270f 	.word	0x0000270f

0800fa00 <_gcvt>:
 800fa00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa02:	0016      	movs	r6, r2
 800fa04:	001d      	movs	r5, r3
 800fa06:	b08d      	sub	sp, #52	; 0x34
 800fa08:	ab14      	add	r3, sp, #80	; 0x50
 800fa0a:	781b      	ldrb	r3, [r3, #0]
 800fa0c:	0007      	movs	r7, r0
 800fa0e:	9307      	str	r3, [sp, #28]
 800fa10:	2200      	movs	r2, #0
 800fa12:	2300      	movs	r3, #0
 800fa14:	0030      	movs	r0, r6
 800fa16:	0029      	movs	r1, r5
 800fa18:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800fa1a:	f7f0 fd23 	bl	8000464 <__aeabi_dcmplt>
 800fa1e:	2800      	cmp	r0, #0
 800fa20:	d002      	beq.n	800fa28 <_gcvt+0x28>
 800fa22:	2380      	movs	r3, #128	; 0x80
 800fa24:	061b      	lsls	r3, r3, #24
 800fa26:	18ed      	adds	r5, r5, r3
 800fa28:	2200      	movs	r2, #0
 800fa2a:	2300      	movs	r3, #0
 800fa2c:	0030      	movs	r0, r6
 800fa2e:	0029      	movs	r1, r5
 800fa30:	f7f0 fd12 	bl	8000458 <__aeabi_dcmpeq>
 800fa34:	2800      	cmp	r0, #0
 800fa36:	d006      	beq.n	800fa46 <_gcvt+0x46>
 800fa38:	2330      	movs	r3, #48	; 0x30
 800fa3a:	7023      	strb	r3, [r4, #0]
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	7063      	strb	r3, [r4, #1]
 800fa40:	0020      	movs	r0, r4
 800fa42:	b00d      	add	sp, #52	; 0x34
 800fa44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa46:	0030      	movs	r0, r6
 800fa48:	0029      	movs	r1, r5
 800fa4a:	4a52      	ldr	r2, [pc, #328]	; (800fb94 <_gcvt+0x194>)
 800fa4c:	4b52      	ldr	r3, [pc, #328]	; (800fb98 <_gcvt+0x198>)
 800fa4e:	f7f0 fd13 	bl	8000478 <__aeabi_dcmple>
 800fa52:	2800      	cmp	r0, #0
 800fa54:	d00d      	beq.n	800fa72 <_gcvt+0x72>
 800fa56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fa58:	0032      	movs	r2, r6
 800fa5a:	9302      	str	r3, [sp, #8]
 800fa5c:	9b07      	ldr	r3, [sp, #28]
 800fa5e:	0021      	movs	r1, r4
 800fa60:	9301      	str	r3, [sp, #4]
 800fa62:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fa64:	0038      	movs	r0, r7
 800fa66:	3b01      	subs	r3, #1
 800fa68:	9300      	str	r3, [sp, #0]
 800fa6a:	002b      	movs	r3, r5
 800fa6c:	f7ff ff46 	bl	800f8fc <print_e>
 800fa70:	e7e6      	b.n	800fa40 <_gcvt+0x40>
 800fa72:	9812      	ldr	r0, [sp, #72]	; 0x48
 800fa74:	f001 f8a0 	bl	8010bb8 <_mprec_log10>
 800fa78:	0032      	movs	r2, r6
 800fa7a:	002b      	movs	r3, r5
 800fa7c:	f7f0 fcfc 	bl	8000478 <__aeabi_dcmple>
 800fa80:	2800      	cmp	r0, #0
 800fa82:	d1e8      	bne.n	800fa56 <_gcvt+0x56>
 800fa84:	ab0b      	add	r3, sp, #44	; 0x2c
 800fa86:	9304      	str	r3, [sp, #16]
 800fa88:	ab0a      	add	r3, sp, #40	; 0x28
 800fa8a:	9303      	str	r3, [sp, #12]
 800fa8c:	ab09      	add	r3, sp, #36	; 0x24
 800fa8e:	9302      	str	r3, [sp, #8]
 800fa90:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fa92:	0032      	movs	r2, r6
 800fa94:	9301      	str	r3, [sp, #4]
 800fa96:	2302      	movs	r3, #2
 800fa98:	0038      	movs	r0, r7
 800fa9a:	9300      	str	r3, [sp, #0]
 800fa9c:	002b      	movs	r3, r5
 800fa9e:	f001 fdaf 	bl	8011600 <_dtoa_r>
 800faa2:	4b3e      	ldr	r3, [pc, #248]	; (800fb9c <_gcvt+0x19c>)
 800faa4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800faa6:	0001      	movs	r1, r0
 800faa8:	0020      	movs	r0, r4
 800faaa:	429a      	cmp	r2, r3
 800faac:	d00c      	beq.n	800fac8 <_gcvt+0xc8>
 800faae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fab0:	18e5      	adds	r5, r4, r3
 800fab2:	780e      	ldrb	r6, [r1, #0]
 800fab4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fab6:	1a2b      	subs	r3, r5, r0
 800fab8:	2e00      	cmp	r6, #0
 800faba:	d001      	beq.n	800fac0 <_gcvt+0xc0>
 800fabc:	2a00      	cmp	r2, #0
 800fabe:	dc06      	bgt.n	800face <_gcvt+0xce>
 800fac0:	2501      	movs	r5, #1
 800fac2:	2600      	movs	r6, #0
 800fac4:	46ac      	mov	ip, r5
 800fac6:	e00d      	b.n	800fae4 <_gcvt+0xe4>
 800fac8:	f001 fcc8 	bl	801145c <strcpy>
 800facc:	e7b8      	b.n	800fa40 <_gcvt+0x40>
 800face:	3a01      	subs	r2, #1
 800fad0:	7006      	strb	r6, [r0, #0]
 800fad2:	3101      	adds	r1, #1
 800fad4:	9209      	str	r2, [sp, #36]	; 0x24
 800fad6:	3001      	adds	r0, #1
 800fad8:	e7eb      	b.n	800fab2 <_gcvt+0xb2>
 800fada:	2530      	movs	r5, #48	; 0x30
 800fadc:	4666      	mov	r6, ip
 800fade:	7005      	strb	r5, [r0, #0]
 800fae0:	3b01      	subs	r3, #1
 800fae2:	3001      	adds	r0, #1
 800fae4:	0005      	movs	r5, r0
 800fae6:	1e17      	subs	r7, r2, #0
 800fae8:	dc35      	bgt.n	800fb56 <_gcvt+0x156>
 800faea:	2e00      	cmp	r6, #0
 800faec:	d000      	beq.n	800faf0 <_gcvt+0xf0>
 800faee:	9209      	str	r2, [sp, #36]	; 0x24
 800faf0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800faf2:	2a00      	cmp	r2, #0
 800faf4:	d102      	bne.n	800fafc <_gcvt+0xfc>
 800faf6:	780a      	ldrb	r2, [r1, #0]
 800faf8:	2a00      	cmp	r2, #0
 800fafa:	d029      	beq.n	800fb50 <_gcvt+0x150>
 800fafc:	4284      	cmp	r4, r0
 800fafe:	d102      	bne.n	800fb06 <_gcvt+0x106>
 800fb00:	2230      	movs	r2, #48	; 0x30
 800fb02:	1c65      	adds	r5, r4, #1
 800fb04:	7022      	strb	r2, [r4, #0]
 800fb06:	222e      	movs	r2, #46	; 0x2e
 800fb08:	702a      	strb	r2, [r5, #0]
 800fb0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fb0c:	0028      	movs	r0, r5
 800fb0e:	1b57      	subs	r7, r2, r5
 800fb10:	9707      	str	r7, [sp, #28]
 800fb12:	2701      	movs	r7, #1
 800fb14:	2600      	movs	r6, #0
 800fb16:	46bc      	mov	ip, r7
 800fb18:	9f07      	ldr	r7, [sp, #28]
 800fb1a:	42c7      	cmn	r7, r0
 800fb1c:	d422      	bmi.n	800fb64 <_gcvt+0x164>
 800fb1e:	2000      	movs	r0, #0
 800fb20:	4257      	negs	r7, r2
 800fb22:	4282      	cmp	r2, r0
 800fb24:	dc00      	bgt.n	800fb28 <_gcvt+0x128>
 800fb26:	0038      	movs	r0, r7
 800fb28:	3001      	adds	r0, #1
 800fb2a:	182d      	adds	r5, r5, r0
 800fb2c:	2000      	movs	r0, #0
 800fb2e:	4282      	cmp	r2, r0
 800fb30:	dc00      	bgt.n	800fb34 <_gcvt+0x134>
 800fb32:	0038      	movs	r0, r7
 800fb34:	1810      	adds	r0, r2, r0
 800fb36:	2e00      	cmp	r6, #0
 800fb38:	d000      	beq.n	800fb3c <_gcvt+0x13c>
 800fb3a:	9009      	str	r0, [sp, #36]	; 0x24
 800fb3c:	002a      	movs	r2, r5
 800fb3e:	7808      	ldrb	r0, [r1, #0]
 800fb40:	0015      	movs	r5, r2
 800fb42:	2800      	cmp	r0, #0
 800fb44:	d001      	beq.n	800fb4a <_gcvt+0x14a>
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	dc11      	bgt.n	800fb6e <_gcvt+0x16e>
 800fb4a:	9915      	ldr	r1, [sp, #84]	; 0x54
 800fb4c:	2900      	cmp	r1, #0
 800fb4e:	d11d      	bne.n	800fb8c <_gcvt+0x18c>
 800fb50:	2300      	movs	r3, #0
 800fb52:	702b      	strb	r3, [r5, #0]
 800fb54:	e774      	b.n	800fa40 <_gcvt+0x40>
 800fb56:	3a01      	subs	r2, #1
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	dcbe      	bgt.n	800fada <_gcvt+0xda>
 800fb5c:	2e00      	cmp	r6, #0
 800fb5e:	d0c7      	beq.n	800faf0 <_gcvt+0xf0>
 800fb60:	9709      	str	r7, [sp, #36]	; 0x24
 800fb62:	e7c5      	b.n	800faf0 <_gcvt+0xf0>
 800fb64:	2630      	movs	r6, #48	; 0x30
 800fb66:	3001      	adds	r0, #1
 800fb68:	7006      	strb	r6, [r0, #0]
 800fb6a:	4666      	mov	r6, ip
 800fb6c:	e7d4      	b.n	800fb18 <_gcvt+0x118>
 800fb6e:	7010      	strb	r0, [r2, #0]
 800fb70:	3101      	adds	r1, #1
 800fb72:	3b01      	subs	r3, #1
 800fb74:	3201      	adds	r2, #1
 800fb76:	e7e2      	b.n	800fb3e <_gcvt+0x13e>
 800fb78:	700e      	strb	r6, [r1, #0]
 800fb7a:	3101      	adds	r1, #1
 800fb7c:	1a68      	subs	r0, r5, r1
 800fb7e:	2800      	cmp	r0, #0
 800fb80:	dcfa      	bgt.n	800fb78 <_gcvt+0x178>
 800fb82:	43dd      	mvns	r5, r3
 800fb84:	17ed      	asrs	r5, r5, #31
 800fb86:	401d      	ands	r5, r3
 800fb88:	1955      	adds	r5, r2, r5
 800fb8a:	e7e1      	b.n	800fb50 <_gcvt+0x150>
 800fb8c:	0011      	movs	r1, r2
 800fb8e:	2630      	movs	r6, #48	; 0x30
 800fb90:	189d      	adds	r5, r3, r2
 800fb92:	e7f3      	b.n	800fb7c <_gcvt+0x17c>
 800fb94:	eb1c432d 	.word	0xeb1c432d
 800fb98:	3f1a36e2 	.word	0x3f1a36e2
 800fb9c:	0000270f 	.word	0x0000270f

0800fba0 <rshift>:
 800fba0:	0002      	movs	r2, r0
 800fba2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fba4:	6904      	ldr	r4, [r0, #16]
 800fba6:	3214      	adds	r2, #20
 800fba8:	0013      	movs	r3, r2
 800fbaa:	b085      	sub	sp, #20
 800fbac:	114f      	asrs	r7, r1, #5
 800fbae:	42bc      	cmp	r4, r7
 800fbb0:	dd31      	ble.n	800fc16 <rshift+0x76>
 800fbb2:	00bb      	lsls	r3, r7, #2
 800fbb4:	18d3      	adds	r3, r2, r3
 800fbb6:	261f      	movs	r6, #31
 800fbb8:	9301      	str	r3, [sp, #4]
 800fbba:	000b      	movs	r3, r1
 800fbbc:	00a5      	lsls	r5, r4, #2
 800fbbe:	4033      	ands	r3, r6
 800fbc0:	1955      	adds	r5, r2, r5
 800fbc2:	9302      	str	r3, [sp, #8]
 800fbc4:	4231      	tst	r1, r6
 800fbc6:	d10c      	bne.n	800fbe2 <rshift+0x42>
 800fbc8:	0016      	movs	r6, r2
 800fbca:	9901      	ldr	r1, [sp, #4]
 800fbcc:	428d      	cmp	r5, r1
 800fbce:	d838      	bhi.n	800fc42 <rshift+0xa2>
 800fbd0:	9901      	ldr	r1, [sp, #4]
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	3903      	subs	r1, #3
 800fbd6:	428d      	cmp	r5, r1
 800fbd8:	d301      	bcc.n	800fbde <rshift+0x3e>
 800fbda:	1be3      	subs	r3, r4, r7
 800fbdc:	009b      	lsls	r3, r3, #2
 800fbde:	18d3      	adds	r3, r2, r3
 800fbe0:	e019      	b.n	800fc16 <rshift+0x76>
 800fbe2:	2120      	movs	r1, #32
 800fbe4:	9b02      	ldr	r3, [sp, #8]
 800fbe6:	9e01      	ldr	r6, [sp, #4]
 800fbe8:	1acb      	subs	r3, r1, r3
 800fbea:	9303      	str	r3, [sp, #12]
 800fbec:	ce02      	ldmia	r6!, {r1}
 800fbee:	9b02      	ldr	r3, [sp, #8]
 800fbf0:	4694      	mov	ip, r2
 800fbf2:	40d9      	lsrs	r1, r3
 800fbf4:	9100      	str	r1, [sp, #0]
 800fbf6:	42b5      	cmp	r5, r6
 800fbf8:	d816      	bhi.n	800fc28 <rshift+0x88>
 800fbfa:	9e01      	ldr	r6, [sp, #4]
 800fbfc:	2300      	movs	r3, #0
 800fbfe:	3601      	adds	r6, #1
 800fc00:	42b5      	cmp	r5, r6
 800fc02:	d302      	bcc.n	800fc0a <rshift+0x6a>
 800fc04:	1be3      	subs	r3, r4, r7
 800fc06:	009b      	lsls	r3, r3, #2
 800fc08:	3b04      	subs	r3, #4
 800fc0a:	9900      	ldr	r1, [sp, #0]
 800fc0c:	18d3      	adds	r3, r2, r3
 800fc0e:	6019      	str	r1, [r3, #0]
 800fc10:	2900      	cmp	r1, #0
 800fc12:	d000      	beq.n	800fc16 <rshift+0x76>
 800fc14:	3304      	adds	r3, #4
 800fc16:	1a99      	subs	r1, r3, r2
 800fc18:	1089      	asrs	r1, r1, #2
 800fc1a:	6101      	str	r1, [r0, #16]
 800fc1c:	4293      	cmp	r3, r2
 800fc1e:	d101      	bne.n	800fc24 <rshift+0x84>
 800fc20:	2300      	movs	r3, #0
 800fc22:	6143      	str	r3, [r0, #20]
 800fc24:	b005      	add	sp, #20
 800fc26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc28:	6833      	ldr	r3, [r6, #0]
 800fc2a:	9903      	ldr	r1, [sp, #12]
 800fc2c:	408b      	lsls	r3, r1
 800fc2e:	9900      	ldr	r1, [sp, #0]
 800fc30:	4319      	orrs	r1, r3
 800fc32:	4663      	mov	r3, ip
 800fc34:	c302      	stmia	r3!, {r1}
 800fc36:	469c      	mov	ip, r3
 800fc38:	ce02      	ldmia	r6!, {r1}
 800fc3a:	9b02      	ldr	r3, [sp, #8]
 800fc3c:	40d9      	lsrs	r1, r3
 800fc3e:	9100      	str	r1, [sp, #0]
 800fc40:	e7d9      	b.n	800fbf6 <rshift+0x56>
 800fc42:	c908      	ldmia	r1!, {r3}
 800fc44:	c608      	stmia	r6!, {r3}
 800fc46:	e7c1      	b.n	800fbcc <rshift+0x2c>

0800fc48 <__hexdig_fun>:
 800fc48:	0002      	movs	r2, r0
 800fc4a:	3a30      	subs	r2, #48	; 0x30
 800fc4c:	0003      	movs	r3, r0
 800fc4e:	2a09      	cmp	r2, #9
 800fc50:	d802      	bhi.n	800fc58 <__hexdig_fun+0x10>
 800fc52:	3b20      	subs	r3, #32
 800fc54:	b2d8      	uxtb	r0, r3
 800fc56:	4770      	bx	lr
 800fc58:	0002      	movs	r2, r0
 800fc5a:	3a61      	subs	r2, #97	; 0x61
 800fc5c:	2a05      	cmp	r2, #5
 800fc5e:	d801      	bhi.n	800fc64 <__hexdig_fun+0x1c>
 800fc60:	3b47      	subs	r3, #71	; 0x47
 800fc62:	e7f7      	b.n	800fc54 <__hexdig_fun+0xc>
 800fc64:	001a      	movs	r2, r3
 800fc66:	3a41      	subs	r2, #65	; 0x41
 800fc68:	2000      	movs	r0, #0
 800fc6a:	2a05      	cmp	r2, #5
 800fc6c:	d8f3      	bhi.n	800fc56 <__hexdig_fun+0xe>
 800fc6e:	3b27      	subs	r3, #39	; 0x27
 800fc70:	e7f0      	b.n	800fc54 <__hexdig_fun+0xc>
	...

0800fc74 <__gethex>:
 800fc74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc76:	b08d      	sub	sp, #52	; 0x34
 800fc78:	930a      	str	r3, [sp, #40]	; 0x28
 800fc7a:	4bbf      	ldr	r3, [pc, #764]	; (800ff78 <__gethex+0x304>)
 800fc7c:	9005      	str	r0, [sp, #20]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	9109      	str	r1, [sp, #36]	; 0x24
 800fc82:	0018      	movs	r0, r3
 800fc84:	9202      	str	r2, [sp, #8]
 800fc86:	9307      	str	r3, [sp, #28]
 800fc88:	f7f0 fa44 	bl	8000114 <strlen>
 800fc8c:	2202      	movs	r2, #2
 800fc8e:	9b07      	ldr	r3, [sp, #28]
 800fc90:	4252      	negs	r2, r2
 800fc92:	181b      	adds	r3, r3, r0
 800fc94:	3b01      	subs	r3, #1
 800fc96:	781b      	ldrb	r3, [r3, #0]
 800fc98:	9003      	str	r0, [sp, #12]
 800fc9a:	930b      	str	r3, [sp, #44]	; 0x2c
 800fc9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc9e:	6819      	ldr	r1, [r3, #0]
 800fca0:	1c8b      	adds	r3, r1, #2
 800fca2:	1a52      	subs	r2, r2, r1
 800fca4:	18d1      	adds	r1, r2, r3
 800fca6:	9301      	str	r3, [sp, #4]
 800fca8:	9108      	str	r1, [sp, #32]
 800fcaa:	9901      	ldr	r1, [sp, #4]
 800fcac:	3301      	adds	r3, #1
 800fcae:	7808      	ldrb	r0, [r1, #0]
 800fcb0:	2830      	cmp	r0, #48	; 0x30
 800fcb2:	d0f7      	beq.n	800fca4 <__gethex+0x30>
 800fcb4:	f7ff ffc8 	bl	800fc48 <__hexdig_fun>
 800fcb8:	2300      	movs	r3, #0
 800fcba:	001c      	movs	r4, r3
 800fcbc:	9304      	str	r3, [sp, #16]
 800fcbe:	4298      	cmp	r0, r3
 800fcc0:	d11f      	bne.n	800fd02 <__gethex+0x8e>
 800fcc2:	9a03      	ldr	r2, [sp, #12]
 800fcc4:	9907      	ldr	r1, [sp, #28]
 800fcc6:	9801      	ldr	r0, [sp, #4]
 800fcc8:	f001 fbd0 	bl	801146c <strncmp>
 800fccc:	0007      	movs	r7, r0
 800fcce:	42a0      	cmp	r0, r4
 800fcd0:	d000      	beq.n	800fcd4 <__gethex+0x60>
 800fcd2:	e06b      	b.n	800fdac <__gethex+0x138>
 800fcd4:	9b01      	ldr	r3, [sp, #4]
 800fcd6:	9a03      	ldr	r2, [sp, #12]
 800fcd8:	5c98      	ldrb	r0, [r3, r2]
 800fcda:	189d      	adds	r5, r3, r2
 800fcdc:	f7ff ffb4 	bl	800fc48 <__hexdig_fun>
 800fce0:	2301      	movs	r3, #1
 800fce2:	9304      	str	r3, [sp, #16]
 800fce4:	42a0      	cmp	r0, r4
 800fce6:	d030      	beq.n	800fd4a <__gethex+0xd6>
 800fce8:	9501      	str	r5, [sp, #4]
 800fcea:	9b01      	ldr	r3, [sp, #4]
 800fcec:	7818      	ldrb	r0, [r3, #0]
 800fcee:	2830      	cmp	r0, #48	; 0x30
 800fcf0:	d009      	beq.n	800fd06 <__gethex+0x92>
 800fcf2:	f7ff ffa9 	bl	800fc48 <__hexdig_fun>
 800fcf6:	4242      	negs	r2, r0
 800fcf8:	4142      	adcs	r2, r0
 800fcfa:	2301      	movs	r3, #1
 800fcfc:	002c      	movs	r4, r5
 800fcfe:	9204      	str	r2, [sp, #16]
 800fd00:	9308      	str	r3, [sp, #32]
 800fd02:	9d01      	ldr	r5, [sp, #4]
 800fd04:	e004      	b.n	800fd10 <__gethex+0x9c>
 800fd06:	9b01      	ldr	r3, [sp, #4]
 800fd08:	3301      	adds	r3, #1
 800fd0a:	9301      	str	r3, [sp, #4]
 800fd0c:	e7ed      	b.n	800fcea <__gethex+0x76>
 800fd0e:	3501      	adds	r5, #1
 800fd10:	7828      	ldrb	r0, [r5, #0]
 800fd12:	f7ff ff99 	bl	800fc48 <__hexdig_fun>
 800fd16:	1e07      	subs	r7, r0, #0
 800fd18:	d1f9      	bne.n	800fd0e <__gethex+0x9a>
 800fd1a:	0028      	movs	r0, r5
 800fd1c:	9a03      	ldr	r2, [sp, #12]
 800fd1e:	9907      	ldr	r1, [sp, #28]
 800fd20:	f001 fba4 	bl	801146c <strncmp>
 800fd24:	2800      	cmp	r0, #0
 800fd26:	d10e      	bne.n	800fd46 <__gethex+0xd2>
 800fd28:	2c00      	cmp	r4, #0
 800fd2a:	d107      	bne.n	800fd3c <__gethex+0xc8>
 800fd2c:	9b03      	ldr	r3, [sp, #12]
 800fd2e:	18ed      	adds	r5, r5, r3
 800fd30:	002c      	movs	r4, r5
 800fd32:	7828      	ldrb	r0, [r5, #0]
 800fd34:	f7ff ff88 	bl	800fc48 <__hexdig_fun>
 800fd38:	2800      	cmp	r0, #0
 800fd3a:	d102      	bne.n	800fd42 <__gethex+0xce>
 800fd3c:	1b64      	subs	r4, r4, r5
 800fd3e:	00a7      	lsls	r7, r4, #2
 800fd40:	e003      	b.n	800fd4a <__gethex+0xd6>
 800fd42:	3501      	adds	r5, #1
 800fd44:	e7f5      	b.n	800fd32 <__gethex+0xbe>
 800fd46:	2c00      	cmp	r4, #0
 800fd48:	d1f8      	bne.n	800fd3c <__gethex+0xc8>
 800fd4a:	2220      	movs	r2, #32
 800fd4c:	782b      	ldrb	r3, [r5, #0]
 800fd4e:	002e      	movs	r6, r5
 800fd50:	4393      	bics	r3, r2
 800fd52:	2b50      	cmp	r3, #80	; 0x50
 800fd54:	d11d      	bne.n	800fd92 <__gethex+0x11e>
 800fd56:	786b      	ldrb	r3, [r5, #1]
 800fd58:	2b2b      	cmp	r3, #43	; 0x2b
 800fd5a:	d02c      	beq.n	800fdb6 <__gethex+0x142>
 800fd5c:	2b2d      	cmp	r3, #45	; 0x2d
 800fd5e:	d02e      	beq.n	800fdbe <__gethex+0x14a>
 800fd60:	2300      	movs	r3, #0
 800fd62:	1c6e      	adds	r6, r5, #1
 800fd64:	9306      	str	r3, [sp, #24]
 800fd66:	7830      	ldrb	r0, [r6, #0]
 800fd68:	f7ff ff6e 	bl	800fc48 <__hexdig_fun>
 800fd6c:	1e43      	subs	r3, r0, #1
 800fd6e:	b2db      	uxtb	r3, r3
 800fd70:	2b18      	cmp	r3, #24
 800fd72:	d82b      	bhi.n	800fdcc <__gethex+0x158>
 800fd74:	3810      	subs	r0, #16
 800fd76:	0004      	movs	r4, r0
 800fd78:	7870      	ldrb	r0, [r6, #1]
 800fd7a:	f7ff ff65 	bl	800fc48 <__hexdig_fun>
 800fd7e:	1e43      	subs	r3, r0, #1
 800fd80:	b2db      	uxtb	r3, r3
 800fd82:	3601      	adds	r6, #1
 800fd84:	2b18      	cmp	r3, #24
 800fd86:	d91c      	bls.n	800fdc2 <__gethex+0x14e>
 800fd88:	9b06      	ldr	r3, [sp, #24]
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d000      	beq.n	800fd90 <__gethex+0x11c>
 800fd8e:	4264      	negs	r4, r4
 800fd90:	193f      	adds	r7, r7, r4
 800fd92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd94:	601e      	str	r6, [r3, #0]
 800fd96:	9b04      	ldr	r3, [sp, #16]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d019      	beq.n	800fdd0 <__gethex+0x15c>
 800fd9c:	2600      	movs	r6, #0
 800fd9e:	9b08      	ldr	r3, [sp, #32]
 800fda0:	42b3      	cmp	r3, r6
 800fda2:	d100      	bne.n	800fda6 <__gethex+0x132>
 800fda4:	3606      	adds	r6, #6
 800fda6:	0030      	movs	r0, r6
 800fda8:	b00d      	add	sp, #52	; 0x34
 800fdaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fdac:	2301      	movs	r3, #1
 800fdae:	2700      	movs	r7, #0
 800fdb0:	9d01      	ldr	r5, [sp, #4]
 800fdb2:	9304      	str	r3, [sp, #16]
 800fdb4:	e7c9      	b.n	800fd4a <__gethex+0xd6>
 800fdb6:	2300      	movs	r3, #0
 800fdb8:	9306      	str	r3, [sp, #24]
 800fdba:	1cae      	adds	r6, r5, #2
 800fdbc:	e7d3      	b.n	800fd66 <__gethex+0xf2>
 800fdbe:	2301      	movs	r3, #1
 800fdc0:	e7fa      	b.n	800fdb8 <__gethex+0x144>
 800fdc2:	230a      	movs	r3, #10
 800fdc4:	435c      	muls	r4, r3
 800fdc6:	1824      	adds	r4, r4, r0
 800fdc8:	3c10      	subs	r4, #16
 800fdca:	e7d5      	b.n	800fd78 <__gethex+0x104>
 800fdcc:	002e      	movs	r6, r5
 800fdce:	e7e0      	b.n	800fd92 <__gethex+0x11e>
 800fdd0:	9b01      	ldr	r3, [sp, #4]
 800fdd2:	9904      	ldr	r1, [sp, #16]
 800fdd4:	1aeb      	subs	r3, r5, r3
 800fdd6:	3b01      	subs	r3, #1
 800fdd8:	2b07      	cmp	r3, #7
 800fdda:	dc0a      	bgt.n	800fdf2 <__gethex+0x17e>
 800fddc:	9805      	ldr	r0, [sp, #20]
 800fdde:	f000 fa65 	bl	80102ac <_Balloc>
 800fde2:	1e04      	subs	r4, r0, #0
 800fde4:	d108      	bne.n	800fdf8 <__gethex+0x184>
 800fde6:	0002      	movs	r2, r0
 800fde8:	21de      	movs	r1, #222	; 0xde
 800fdea:	4b64      	ldr	r3, [pc, #400]	; (800ff7c <__gethex+0x308>)
 800fdec:	4864      	ldr	r0, [pc, #400]	; (800ff80 <__gethex+0x30c>)
 800fdee:	f001 fb5d 	bl	80114ac <__assert_func>
 800fdf2:	3101      	adds	r1, #1
 800fdf4:	105b      	asrs	r3, r3, #1
 800fdf6:	e7ef      	b.n	800fdd8 <__gethex+0x164>
 800fdf8:	0003      	movs	r3, r0
 800fdfa:	3314      	adds	r3, #20
 800fdfc:	9304      	str	r3, [sp, #16]
 800fdfe:	9309      	str	r3, [sp, #36]	; 0x24
 800fe00:	2300      	movs	r3, #0
 800fe02:	001e      	movs	r6, r3
 800fe04:	9306      	str	r3, [sp, #24]
 800fe06:	9b01      	ldr	r3, [sp, #4]
 800fe08:	42ab      	cmp	r3, r5
 800fe0a:	d340      	bcc.n	800fe8e <__gethex+0x21a>
 800fe0c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800fe0e:	9b04      	ldr	r3, [sp, #16]
 800fe10:	c540      	stmia	r5!, {r6}
 800fe12:	1aed      	subs	r5, r5, r3
 800fe14:	10ad      	asrs	r5, r5, #2
 800fe16:	0030      	movs	r0, r6
 800fe18:	6125      	str	r5, [r4, #16]
 800fe1a:	f000 fb3f 	bl	801049c <__hi0bits>
 800fe1e:	9b02      	ldr	r3, [sp, #8]
 800fe20:	016d      	lsls	r5, r5, #5
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	1a2e      	subs	r6, r5, r0
 800fe26:	9301      	str	r3, [sp, #4]
 800fe28:	429e      	cmp	r6, r3
 800fe2a:	dd5a      	ble.n	800fee2 <__gethex+0x26e>
 800fe2c:	1af6      	subs	r6, r6, r3
 800fe2e:	0031      	movs	r1, r6
 800fe30:	0020      	movs	r0, r4
 800fe32:	f000 fefc 	bl	8010c2e <__any_on>
 800fe36:	1e05      	subs	r5, r0, #0
 800fe38:	d016      	beq.n	800fe68 <__gethex+0x1f4>
 800fe3a:	2501      	movs	r5, #1
 800fe3c:	211f      	movs	r1, #31
 800fe3e:	0028      	movs	r0, r5
 800fe40:	1e73      	subs	r3, r6, #1
 800fe42:	4019      	ands	r1, r3
 800fe44:	4088      	lsls	r0, r1
 800fe46:	0001      	movs	r1, r0
 800fe48:	115a      	asrs	r2, r3, #5
 800fe4a:	9804      	ldr	r0, [sp, #16]
 800fe4c:	0092      	lsls	r2, r2, #2
 800fe4e:	5812      	ldr	r2, [r2, r0]
 800fe50:	420a      	tst	r2, r1
 800fe52:	d009      	beq.n	800fe68 <__gethex+0x1f4>
 800fe54:	42ab      	cmp	r3, r5
 800fe56:	dd06      	ble.n	800fe66 <__gethex+0x1f2>
 800fe58:	0020      	movs	r0, r4
 800fe5a:	1eb1      	subs	r1, r6, #2
 800fe5c:	f000 fee7 	bl	8010c2e <__any_on>
 800fe60:	3502      	adds	r5, #2
 800fe62:	2800      	cmp	r0, #0
 800fe64:	d100      	bne.n	800fe68 <__gethex+0x1f4>
 800fe66:	2502      	movs	r5, #2
 800fe68:	0031      	movs	r1, r6
 800fe6a:	0020      	movs	r0, r4
 800fe6c:	f7ff fe98 	bl	800fba0 <rshift>
 800fe70:	19bf      	adds	r7, r7, r6
 800fe72:	9b02      	ldr	r3, [sp, #8]
 800fe74:	689b      	ldr	r3, [r3, #8]
 800fe76:	9303      	str	r3, [sp, #12]
 800fe78:	42bb      	cmp	r3, r7
 800fe7a:	da42      	bge.n	800ff02 <__gethex+0x28e>
 800fe7c:	0021      	movs	r1, r4
 800fe7e:	9805      	ldr	r0, [sp, #20]
 800fe80:	f000 fa58 	bl	8010334 <_Bfree>
 800fe84:	2300      	movs	r3, #0
 800fe86:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fe88:	26a3      	movs	r6, #163	; 0xa3
 800fe8a:	6013      	str	r3, [r2, #0]
 800fe8c:	e78b      	b.n	800fda6 <__gethex+0x132>
 800fe8e:	1e6b      	subs	r3, r5, #1
 800fe90:	9308      	str	r3, [sp, #32]
 800fe92:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fe94:	781b      	ldrb	r3, [r3, #0]
 800fe96:	4293      	cmp	r3, r2
 800fe98:	d014      	beq.n	800fec4 <__gethex+0x250>
 800fe9a:	9b06      	ldr	r3, [sp, #24]
 800fe9c:	2b20      	cmp	r3, #32
 800fe9e:	d104      	bne.n	800feaa <__gethex+0x236>
 800fea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fea2:	c340      	stmia	r3!, {r6}
 800fea4:	2600      	movs	r6, #0
 800fea6:	9309      	str	r3, [sp, #36]	; 0x24
 800fea8:	9606      	str	r6, [sp, #24]
 800feaa:	9b08      	ldr	r3, [sp, #32]
 800feac:	7818      	ldrb	r0, [r3, #0]
 800feae:	f7ff fecb 	bl	800fc48 <__hexdig_fun>
 800feb2:	230f      	movs	r3, #15
 800feb4:	4018      	ands	r0, r3
 800feb6:	9b06      	ldr	r3, [sp, #24]
 800feb8:	9d08      	ldr	r5, [sp, #32]
 800feba:	4098      	lsls	r0, r3
 800febc:	3304      	adds	r3, #4
 800febe:	4306      	orrs	r6, r0
 800fec0:	9306      	str	r3, [sp, #24]
 800fec2:	e7a0      	b.n	800fe06 <__gethex+0x192>
 800fec4:	2301      	movs	r3, #1
 800fec6:	9a03      	ldr	r2, [sp, #12]
 800fec8:	1a9d      	subs	r5, r3, r2
 800feca:	9b08      	ldr	r3, [sp, #32]
 800fecc:	195d      	adds	r5, r3, r5
 800fece:	9b01      	ldr	r3, [sp, #4]
 800fed0:	429d      	cmp	r5, r3
 800fed2:	d3e2      	bcc.n	800fe9a <__gethex+0x226>
 800fed4:	0028      	movs	r0, r5
 800fed6:	9907      	ldr	r1, [sp, #28]
 800fed8:	f001 fac8 	bl	801146c <strncmp>
 800fedc:	2800      	cmp	r0, #0
 800fede:	d1dc      	bne.n	800fe9a <__gethex+0x226>
 800fee0:	e791      	b.n	800fe06 <__gethex+0x192>
 800fee2:	9b01      	ldr	r3, [sp, #4]
 800fee4:	2500      	movs	r5, #0
 800fee6:	429e      	cmp	r6, r3
 800fee8:	dac3      	bge.n	800fe72 <__gethex+0x1fe>
 800feea:	1b9e      	subs	r6, r3, r6
 800feec:	0021      	movs	r1, r4
 800feee:	0032      	movs	r2, r6
 800fef0:	9805      	ldr	r0, [sp, #20]
 800fef2:	f000 fc3d 	bl	8010770 <__lshift>
 800fef6:	0003      	movs	r3, r0
 800fef8:	3314      	adds	r3, #20
 800fefa:	0004      	movs	r4, r0
 800fefc:	1bbf      	subs	r7, r7, r6
 800fefe:	9304      	str	r3, [sp, #16]
 800ff00:	e7b7      	b.n	800fe72 <__gethex+0x1fe>
 800ff02:	9b02      	ldr	r3, [sp, #8]
 800ff04:	685e      	ldr	r6, [r3, #4]
 800ff06:	42be      	cmp	r6, r7
 800ff08:	dd71      	ble.n	800ffee <__gethex+0x37a>
 800ff0a:	9b01      	ldr	r3, [sp, #4]
 800ff0c:	1bf6      	subs	r6, r6, r7
 800ff0e:	42b3      	cmp	r3, r6
 800ff10:	dc38      	bgt.n	800ff84 <__gethex+0x310>
 800ff12:	9b02      	ldr	r3, [sp, #8]
 800ff14:	68db      	ldr	r3, [r3, #12]
 800ff16:	2b02      	cmp	r3, #2
 800ff18:	d026      	beq.n	800ff68 <__gethex+0x2f4>
 800ff1a:	2b03      	cmp	r3, #3
 800ff1c:	d028      	beq.n	800ff70 <__gethex+0x2fc>
 800ff1e:	2b01      	cmp	r3, #1
 800ff20:	d119      	bne.n	800ff56 <__gethex+0x2e2>
 800ff22:	9b01      	ldr	r3, [sp, #4]
 800ff24:	42b3      	cmp	r3, r6
 800ff26:	d116      	bne.n	800ff56 <__gethex+0x2e2>
 800ff28:	2b01      	cmp	r3, #1
 800ff2a:	d10d      	bne.n	800ff48 <__gethex+0x2d4>
 800ff2c:	9b02      	ldr	r3, [sp, #8]
 800ff2e:	2662      	movs	r6, #98	; 0x62
 800ff30:	685b      	ldr	r3, [r3, #4]
 800ff32:	9301      	str	r3, [sp, #4]
 800ff34:	9a01      	ldr	r2, [sp, #4]
 800ff36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff38:	601a      	str	r2, [r3, #0]
 800ff3a:	2301      	movs	r3, #1
 800ff3c:	9a04      	ldr	r2, [sp, #16]
 800ff3e:	6123      	str	r3, [r4, #16]
 800ff40:	6013      	str	r3, [r2, #0]
 800ff42:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ff44:	601c      	str	r4, [r3, #0]
 800ff46:	e72e      	b.n	800fda6 <__gethex+0x132>
 800ff48:	9901      	ldr	r1, [sp, #4]
 800ff4a:	0020      	movs	r0, r4
 800ff4c:	3901      	subs	r1, #1
 800ff4e:	f000 fe6e 	bl	8010c2e <__any_on>
 800ff52:	2800      	cmp	r0, #0
 800ff54:	d1ea      	bne.n	800ff2c <__gethex+0x2b8>
 800ff56:	0021      	movs	r1, r4
 800ff58:	9805      	ldr	r0, [sp, #20]
 800ff5a:	f000 f9eb 	bl	8010334 <_Bfree>
 800ff5e:	2300      	movs	r3, #0
 800ff60:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ff62:	2650      	movs	r6, #80	; 0x50
 800ff64:	6013      	str	r3, [r2, #0]
 800ff66:	e71e      	b.n	800fda6 <__gethex+0x132>
 800ff68:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d1f3      	bne.n	800ff56 <__gethex+0x2e2>
 800ff6e:	e7dd      	b.n	800ff2c <__gethex+0x2b8>
 800ff70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d1da      	bne.n	800ff2c <__gethex+0x2b8>
 800ff76:	e7ee      	b.n	800ff56 <__gethex+0x2e2>
 800ff78:	08013670 	.word	0x08013670
 800ff7c:	080135f9 	.word	0x080135f9
 800ff80:	0801360a 	.word	0x0801360a
 800ff84:	1e77      	subs	r7, r6, #1
 800ff86:	2d00      	cmp	r5, #0
 800ff88:	d12f      	bne.n	800ffea <__gethex+0x376>
 800ff8a:	2f00      	cmp	r7, #0
 800ff8c:	d004      	beq.n	800ff98 <__gethex+0x324>
 800ff8e:	0039      	movs	r1, r7
 800ff90:	0020      	movs	r0, r4
 800ff92:	f000 fe4c 	bl	8010c2e <__any_on>
 800ff96:	0005      	movs	r5, r0
 800ff98:	231f      	movs	r3, #31
 800ff9a:	117a      	asrs	r2, r7, #5
 800ff9c:	401f      	ands	r7, r3
 800ff9e:	3b1e      	subs	r3, #30
 800ffa0:	40bb      	lsls	r3, r7
 800ffa2:	9904      	ldr	r1, [sp, #16]
 800ffa4:	0092      	lsls	r2, r2, #2
 800ffa6:	5852      	ldr	r2, [r2, r1]
 800ffa8:	421a      	tst	r2, r3
 800ffaa:	d001      	beq.n	800ffb0 <__gethex+0x33c>
 800ffac:	2302      	movs	r3, #2
 800ffae:	431d      	orrs	r5, r3
 800ffb0:	9b01      	ldr	r3, [sp, #4]
 800ffb2:	0031      	movs	r1, r6
 800ffb4:	1b9b      	subs	r3, r3, r6
 800ffb6:	2602      	movs	r6, #2
 800ffb8:	0020      	movs	r0, r4
 800ffba:	9301      	str	r3, [sp, #4]
 800ffbc:	f7ff fdf0 	bl	800fba0 <rshift>
 800ffc0:	9b02      	ldr	r3, [sp, #8]
 800ffc2:	685f      	ldr	r7, [r3, #4]
 800ffc4:	2d00      	cmp	r5, #0
 800ffc6:	d041      	beq.n	801004c <__gethex+0x3d8>
 800ffc8:	9b02      	ldr	r3, [sp, #8]
 800ffca:	68db      	ldr	r3, [r3, #12]
 800ffcc:	2b02      	cmp	r3, #2
 800ffce:	d010      	beq.n	800fff2 <__gethex+0x37e>
 800ffd0:	2b03      	cmp	r3, #3
 800ffd2:	d012      	beq.n	800fffa <__gethex+0x386>
 800ffd4:	2b01      	cmp	r3, #1
 800ffd6:	d106      	bne.n	800ffe6 <__gethex+0x372>
 800ffd8:	07aa      	lsls	r2, r5, #30
 800ffda:	d504      	bpl.n	800ffe6 <__gethex+0x372>
 800ffdc:	9a04      	ldr	r2, [sp, #16]
 800ffde:	6810      	ldr	r0, [r2, #0]
 800ffe0:	4305      	orrs	r5, r0
 800ffe2:	421d      	tst	r5, r3
 800ffe4:	d10c      	bne.n	8010000 <__gethex+0x38c>
 800ffe6:	2310      	movs	r3, #16
 800ffe8:	e02f      	b.n	801004a <__gethex+0x3d6>
 800ffea:	2501      	movs	r5, #1
 800ffec:	e7d4      	b.n	800ff98 <__gethex+0x324>
 800ffee:	2601      	movs	r6, #1
 800fff0:	e7e8      	b.n	800ffc4 <__gethex+0x350>
 800fff2:	2301      	movs	r3, #1
 800fff4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800fff6:	1a9b      	subs	r3, r3, r2
 800fff8:	9313      	str	r3, [sp, #76]	; 0x4c
 800fffa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d0f2      	beq.n	800ffe6 <__gethex+0x372>
 8010000:	6923      	ldr	r3, [r4, #16]
 8010002:	2000      	movs	r0, #0
 8010004:	9303      	str	r3, [sp, #12]
 8010006:	009b      	lsls	r3, r3, #2
 8010008:	9304      	str	r3, [sp, #16]
 801000a:	0023      	movs	r3, r4
 801000c:	9a04      	ldr	r2, [sp, #16]
 801000e:	3314      	adds	r3, #20
 8010010:	1899      	adds	r1, r3, r2
 8010012:	681a      	ldr	r2, [r3, #0]
 8010014:	1c55      	adds	r5, r2, #1
 8010016:	d01e      	beq.n	8010056 <__gethex+0x3e2>
 8010018:	3201      	adds	r2, #1
 801001a:	601a      	str	r2, [r3, #0]
 801001c:	0023      	movs	r3, r4
 801001e:	3314      	adds	r3, #20
 8010020:	2e02      	cmp	r6, #2
 8010022:	d140      	bne.n	80100a6 <__gethex+0x432>
 8010024:	9a02      	ldr	r2, [sp, #8]
 8010026:	9901      	ldr	r1, [sp, #4]
 8010028:	6812      	ldr	r2, [r2, #0]
 801002a:	3a01      	subs	r2, #1
 801002c:	428a      	cmp	r2, r1
 801002e:	d10b      	bne.n	8010048 <__gethex+0x3d4>
 8010030:	114a      	asrs	r2, r1, #5
 8010032:	211f      	movs	r1, #31
 8010034:	9801      	ldr	r0, [sp, #4]
 8010036:	0092      	lsls	r2, r2, #2
 8010038:	4001      	ands	r1, r0
 801003a:	2001      	movs	r0, #1
 801003c:	0005      	movs	r5, r0
 801003e:	408d      	lsls	r5, r1
 8010040:	58d3      	ldr	r3, [r2, r3]
 8010042:	422b      	tst	r3, r5
 8010044:	d000      	beq.n	8010048 <__gethex+0x3d4>
 8010046:	2601      	movs	r6, #1
 8010048:	2320      	movs	r3, #32
 801004a:	431e      	orrs	r6, r3
 801004c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801004e:	601c      	str	r4, [r3, #0]
 8010050:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010052:	601f      	str	r7, [r3, #0]
 8010054:	e6a7      	b.n	800fda6 <__gethex+0x132>
 8010056:	c301      	stmia	r3!, {r0}
 8010058:	4299      	cmp	r1, r3
 801005a:	d8da      	bhi.n	8010012 <__gethex+0x39e>
 801005c:	9b03      	ldr	r3, [sp, #12]
 801005e:	68a2      	ldr	r2, [r4, #8]
 8010060:	4293      	cmp	r3, r2
 8010062:	db17      	blt.n	8010094 <__gethex+0x420>
 8010064:	6863      	ldr	r3, [r4, #4]
 8010066:	9805      	ldr	r0, [sp, #20]
 8010068:	1c59      	adds	r1, r3, #1
 801006a:	f000 f91f 	bl	80102ac <_Balloc>
 801006e:	1e05      	subs	r5, r0, #0
 8010070:	d103      	bne.n	801007a <__gethex+0x406>
 8010072:	0002      	movs	r2, r0
 8010074:	2184      	movs	r1, #132	; 0x84
 8010076:	4b1c      	ldr	r3, [pc, #112]	; (80100e8 <__gethex+0x474>)
 8010078:	e6b8      	b.n	800fdec <__gethex+0x178>
 801007a:	0021      	movs	r1, r4
 801007c:	6923      	ldr	r3, [r4, #16]
 801007e:	310c      	adds	r1, #12
 8010080:	1c9a      	adds	r2, r3, #2
 8010082:	0092      	lsls	r2, r2, #2
 8010084:	300c      	adds	r0, #12
 8010086:	f7fe fca5 	bl	800e9d4 <memcpy>
 801008a:	0021      	movs	r1, r4
 801008c:	9805      	ldr	r0, [sp, #20]
 801008e:	f000 f951 	bl	8010334 <_Bfree>
 8010092:	002c      	movs	r4, r5
 8010094:	6923      	ldr	r3, [r4, #16]
 8010096:	1c5a      	adds	r2, r3, #1
 8010098:	6122      	str	r2, [r4, #16]
 801009a:	2201      	movs	r2, #1
 801009c:	3304      	adds	r3, #4
 801009e:	009b      	lsls	r3, r3, #2
 80100a0:	18e3      	adds	r3, r4, r3
 80100a2:	605a      	str	r2, [r3, #4]
 80100a4:	e7ba      	b.n	801001c <__gethex+0x3a8>
 80100a6:	6922      	ldr	r2, [r4, #16]
 80100a8:	9903      	ldr	r1, [sp, #12]
 80100aa:	428a      	cmp	r2, r1
 80100ac:	dd09      	ble.n	80100c2 <__gethex+0x44e>
 80100ae:	2101      	movs	r1, #1
 80100b0:	0020      	movs	r0, r4
 80100b2:	f7ff fd75 	bl	800fba0 <rshift>
 80100b6:	9b02      	ldr	r3, [sp, #8]
 80100b8:	3701      	adds	r7, #1
 80100ba:	689b      	ldr	r3, [r3, #8]
 80100bc:	42bb      	cmp	r3, r7
 80100be:	dac2      	bge.n	8010046 <__gethex+0x3d2>
 80100c0:	e6dc      	b.n	800fe7c <__gethex+0x208>
 80100c2:	221f      	movs	r2, #31
 80100c4:	9d01      	ldr	r5, [sp, #4]
 80100c6:	9901      	ldr	r1, [sp, #4]
 80100c8:	2601      	movs	r6, #1
 80100ca:	4015      	ands	r5, r2
 80100cc:	4211      	tst	r1, r2
 80100ce:	d0bb      	beq.n	8010048 <__gethex+0x3d4>
 80100d0:	9a04      	ldr	r2, [sp, #16]
 80100d2:	189b      	adds	r3, r3, r2
 80100d4:	3b04      	subs	r3, #4
 80100d6:	6818      	ldr	r0, [r3, #0]
 80100d8:	f000 f9e0 	bl	801049c <__hi0bits>
 80100dc:	2320      	movs	r3, #32
 80100de:	1b5d      	subs	r5, r3, r5
 80100e0:	42a8      	cmp	r0, r5
 80100e2:	dbe4      	blt.n	80100ae <__gethex+0x43a>
 80100e4:	e7b0      	b.n	8010048 <__gethex+0x3d4>
 80100e6:	46c0      	nop			; (mov r8, r8)
 80100e8:	080135f9 	.word	0x080135f9

080100ec <L_shift>:
 80100ec:	2308      	movs	r3, #8
 80100ee:	b570      	push	{r4, r5, r6, lr}
 80100f0:	2520      	movs	r5, #32
 80100f2:	1a9a      	subs	r2, r3, r2
 80100f4:	0092      	lsls	r2, r2, #2
 80100f6:	1aad      	subs	r5, r5, r2
 80100f8:	6843      	ldr	r3, [r0, #4]
 80100fa:	6806      	ldr	r6, [r0, #0]
 80100fc:	001c      	movs	r4, r3
 80100fe:	40ac      	lsls	r4, r5
 8010100:	40d3      	lsrs	r3, r2
 8010102:	4334      	orrs	r4, r6
 8010104:	6004      	str	r4, [r0, #0]
 8010106:	6043      	str	r3, [r0, #4]
 8010108:	3004      	adds	r0, #4
 801010a:	4288      	cmp	r0, r1
 801010c:	d3f4      	bcc.n	80100f8 <L_shift+0xc>
 801010e:	bd70      	pop	{r4, r5, r6, pc}

08010110 <__match>:
 8010110:	b530      	push	{r4, r5, lr}
 8010112:	6803      	ldr	r3, [r0, #0]
 8010114:	780c      	ldrb	r4, [r1, #0]
 8010116:	3301      	adds	r3, #1
 8010118:	2c00      	cmp	r4, #0
 801011a:	d102      	bne.n	8010122 <__match+0x12>
 801011c:	6003      	str	r3, [r0, #0]
 801011e:	2001      	movs	r0, #1
 8010120:	bd30      	pop	{r4, r5, pc}
 8010122:	781a      	ldrb	r2, [r3, #0]
 8010124:	0015      	movs	r5, r2
 8010126:	3d41      	subs	r5, #65	; 0x41
 8010128:	2d19      	cmp	r5, #25
 801012a:	d800      	bhi.n	801012e <__match+0x1e>
 801012c:	3220      	adds	r2, #32
 801012e:	3101      	adds	r1, #1
 8010130:	42a2      	cmp	r2, r4
 8010132:	d0ef      	beq.n	8010114 <__match+0x4>
 8010134:	2000      	movs	r0, #0
 8010136:	e7f3      	b.n	8010120 <__match+0x10>

08010138 <__hexnan>:
 8010138:	b5f0      	push	{r4, r5, r6, r7, lr}
 801013a:	680b      	ldr	r3, [r1, #0]
 801013c:	b08b      	sub	sp, #44	; 0x2c
 801013e:	9201      	str	r2, [sp, #4]
 8010140:	9901      	ldr	r1, [sp, #4]
 8010142:	115a      	asrs	r2, r3, #5
 8010144:	0092      	lsls	r2, r2, #2
 8010146:	188a      	adds	r2, r1, r2
 8010148:	9202      	str	r2, [sp, #8]
 801014a:	0019      	movs	r1, r3
 801014c:	221f      	movs	r2, #31
 801014e:	4011      	ands	r1, r2
 8010150:	9008      	str	r0, [sp, #32]
 8010152:	9106      	str	r1, [sp, #24]
 8010154:	4213      	tst	r3, r2
 8010156:	d002      	beq.n	801015e <__hexnan+0x26>
 8010158:	9b02      	ldr	r3, [sp, #8]
 801015a:	3304      	adds	r3, #4
 801015c:	9302      	str	r3, [sp, #8]
 801015e:	9b02      	ldr	r3, [sp, #8]
 8010160:	2500      	movs	r5, #0
 8010162:	1f1e      	subs	r6, r3, #4
 8010164:	0037      	movs	r7, r6
 8010166:	0034      	movs	r4, r6
 8010168:	9b08      	ldr	r3, [sp, #32]
 801016a:	6035      	str	r5, [r6, #0]
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	9507      	str	r5, [sp, #28]
 8010170:	9305      	str	r3, [sp, #20]
 8010172:	9503      	str	r5, [sp, #12]
 8010174:	9b05      	ldr	r3, [sp, #20]
 8010176:	3301      	adds	r3, #1
 8010178:	9309      	str	r3, [sp, #36]	; 0x24
 801017a:	9b05      	ldr	r3, [sp, #20]
 801017c:	785b      	ldrb	r3, [r3, #1]
 801017e:	9304      	str	r3, [sp, #16]
 8010180:	2b00      	cmp	r3, #0
 8010182:	d028      	beq.n	80101d6 <__hexnan+0x9e>
 8010184:	9804      	ldr	r0, [sp, #16]
 8010186:	f7ff fd5f 	bl	800fc48 <__hexdig_fun>
 801018a:	2800      	cmp	r0, #0
 801018c:	d154      	bne.n	8010238 <__hexnan+0x100>
 801018e:	9b04      	ldr	r3, [sp, #16]
 8010190:	2b20      	cmp	r3, #32
 8010192:	d819      	bhi.n	80101c8 <__hexnan+0x90>
 8010194:	9b03      	ldr	r3, [sp, #12]
 8010196:	9a07      	ldr	r2, [sp, #28]
 8010198:	4293      	cmp	r3, r2
 801019a:	dd12      	ble.n	80101c2 <__hexnan+0x8a>
 801019c:	42bc      	cmp	r4, r7
 801019e:	d206      	bcs.n	80101ae <__hexnan+0x76>
 80101a0:	2d07      	cmp	r5, #7
 80101a2:	dc04      	bgt.n	80101ae <__hexnan+0x76>
 80101a4:	002a      	movs	r2, r5
 80101a6:	0039      	movs	r1, r7
 80101a8:	0020      	movs	r0, r4
 80101aa:	f7ff ff9f 	bl	80100ec <L_shift>
 80101ae:	9b01      	ldr	r3, [sp, #4]
 80101b0:	2508      	movs	r5, #8
 80101b2:	429c      	cmp	r4, r3
 80101b4:	d905      	bls.n	80101c2 <__hexnan+0x8a>
 80101b6:	1f27      	subs	r7, r4, #4
 80101b8:	2500      	movs	r5, #0
 80101ba:	003c      	movs	r4, r7
 80101bc:	9b03      	ldr	r3, [sp, #12]
 80101be:	603d      	str	r5, [r7, #0]
 80101c0:	9307      	str	r3, [sp, #28]
 80101c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80101c4:	9305      	str	r3, [sp, #20]
 80101c6:	e7d5      	b.n	8010174 <__hexnan+0x3c>
 80101c8:	9b04      	ldr	r3, [sp, #16]
 80101ca:	2b29      	cmp	r3, #41	; 0x29
 80101cc:	d159      	bne.n	8010282 <__hexnan+0x14a>
 80101ce:	9b05      	ldr	r3, [sp, #20]
 80101d0:	9a08      	ldr	r2, [sp, #32]
 80101d2:	3302      	adds	r3, #2
 80101d4:	6013      	str	r3, [r2, #0]
 80101d6:	9b03      	ldr	r3, [sp, #12]
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d052      	beq.n	8010282 <__hexnan+0x14a>
 80101dc:	42bc      	cmp	r4, r7
 80101de:	d206      	bcs.n	80101ee <__hexnan+0xb6>
 80101e0:	2d07      	cmp	r5, #7
 80101e2:	dc04      	bgt.n	80101ee <__hexnan+0xb6>
 80101e4:	002a      	movs	r2, r5
 80101e6:	0039      	movs	r1, r7
 80101e8:	0020      	movs	r0, r4
 80101ea:	f7ff ff7f 	bl	80100ec <L_shift>
 80101ee:	9b01      	ldr	r3, [sp, #4]
 80101f0:	429c      	cmp	r4, r3
 80101f2:	d935      	bls.n	8010260 <__hexnan+0x128>
 80101f4:	001a      	movs	r2, r3
 80101f6:	0023      	movs	r3, r4
 80101f8:	cb02      	ldmia	r3!, {r1}
 80101fa:	c202      	stmia	r2!, {r1}
 80101fc:	429e      	cmp	r6, r3
 80101fe:	d2fb      	bcs.n	80101f8 <__hexnan+0xc0>
 8010200:	9b02      	ldr	r3, [sp, #8]
 8010202:	1c61      	adds	r1, r4, #1
 8010204:	1eda      	subs	r2, r3, #3
 8010206:	2304      	movs	r3, #4
 8010208:	4291      	cmp	r1, r2
 801020a:	d805      	bhi.n	8010218 <__hexnan+0xe0>
 801020c:	9b02      	ldr	r3, [sp, #8]
 801020e:	3b04      	subs	r3, #4
 8010210:	1b1b      	subs	r3, r3, r4
 8010212:	089b      	lsrs	r3, r3, #2
 8010214:	3301      	adds	r3, #1
 8010216:	009b      	lsls	r3, r3, #2
 8010218:	9a01      	ldr	r2, [sp, #4]
 801021a:	18d3      	adds	r3, r2, r3
 801021c:	2200      	movs	r2, #0
 801021e:	c304      	stmia	r3!, {r2}
 8010220:	429e      	cmp	r6, r3
 8010222:	d2fc      	bcs.n	801021e <__hexnan+0xe6>
 8010224:	6833      	ldr	r3, [r6, #0]
 8010226:	2b00      	cmp	r3, #0
 8010228:	d104      	bne.n	8010234 <__hexnan+0xfc>
 801022a:	9b01      	ldr	r3, [sp, #4]
 801022c:	429e      	cmp	r6, r3
 801022e:	d126      	bne.n	801027e <__hexnan+0x146>
 8010230:	2301      	movs	r3, #1
 8010232:	6033      	str	r3, [r6, #0]
 8010234:	2005      	movs	r0, #5
 8010236:	e025      	b.n	8010284 <__hexnan+0x14c>
 8010238:	9b03      	ldr	r3, [sp, #12]
 801023a:	3501      	adds	r5, #1
 801023c:	3301      	adds	r3, #1
 801023e:	9303      	str	r3, [sp, #12]
 8010240:	2d08      	cmp	r5, #8
 8010242:	dd06      	ble.n	8010252 <__hexnan+0x11a>
 8010244:	9b01      	ldr	r3, [sp, #4]
 8010246:	429c      	cmp	r4, r3
 8010248:	d9bb      	bls.n	80101c2 <__hexnan+0x8a>
 801024a:	2300      	movs	r3, #0
 801024c:	2501      	movs	r5, #1
 801024e:	3c04      	subs	r4, #4
 8010250:	6023      	str	r3, [r4, #0]
 8010252:	220f      	movs	r2, #15
 8010254:	6823      	ldr	r3, [r4, #0]
 8010256:	4010      	ands	r0, r2
 8010258:	011b      	lsls	r3, r3, #4
 801025a:	4318      	orrs	r0, r3
 801025c:	6020      	str	r0, [r4, #0]
 801025e:	e7b0      	b.n	80101c2 <__hexnan+0x8a>
 8010260:	9b06      	ldr	r3, [sp, #24]
 8010262:	2b00      	cmp	r3, #0
 8010264:	d0de      	beq.n	8010224 <__hexnan+0xec>
 8010266:	2120      	movs	r1, #32
 8010268:	9a06      	ldr	r2, [sp, #24]
 801026a:	9b02      	ldr	r3, [sp, #8]
 801026c:	1a89      	subs	r1, r1, r2
 801026e:	2201      	movs	r2, #1
 8010270:	4252      	negs	r2, r2
 8010272:	40ca      	lsrs	r2, r1
 8010274:	3b04      	subs	r3, #4
 8010276:	6819      	ldr	r1, [r3, #0]
 8010278:	400a      	ands	r2, r1
 801027a:	601a      	str	r2, [r3, #0]
 801027c:	e7d2      	b.n	8010224 <__hexnan+0xec>
 801027e:	3e04      	subs	r6, #4
 8010280:	e7d0      	b.n	8010224 <__hexnan+0xec>
 8010282:	2004      	movs	r0, #4
 8010284:	b00b      	add	sp, #44	; 0x2c
 8010286:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010288 <__ascii_mbtowc>:
 8010288:	b082      	sub	sp, #8
 801028a:	2900      	cmp	r1, #0
 801028c:	d100      	bne.n	8010290 <__ascii_mbtowc+0x8>
 801028e:	a901      	add	r1, sp, #4
 8010290:	1e10      	subs	r0, r2, #0
 8010292:	d006      	beq.n	80102a2 <__ascii_mbtowc+0x1a>
 8010294:	2b00      	cmp	r3, #0
 8010296:	d006      	beq.n	80102a6 <__ascii_mbtowc+0x1e>
 8010298:	7813      	ldrb	r3, [r2, #0]
 801029a:	600b      	str	r3, [r1, #0]
 801029c:	7810      	ldrb	r0, [r2, #0]
 801029e:	1e43      	subs	r3, r0, #1
 80102a0:	4198      	sbcs	r0, r3
 80102a2:	b002      	add	sp, #8
 80102a4:	4770      	bx	lr
 80102a6:	2002      	movs	r0, #2
 80102a8:	4240      	negs	r0, r0
 80102aa:	e7fa      	b.n	80102a2 <__ascii_mbtowc+0x1a>

080102ac <_Balloc>:
 80102ac:	b570      	push	{r4, r5, r6, lr}
 80102ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80102b0:	0006      	movs	r6, r0
 80102b2:	000c      	movs	r4, r1
 80102b4:	2d00      	cmp	r5, #0
 80102b6:	d10e      	bne.n	80102d6 <_Balloc+0x2a>
 80102b8:	2010      	movs	r0, #16
 80102ba:	f001 ffcb 	bl	8012254 <malloc>
 80102be:	1e02      	subs	r2, r0, #0
 80102c0:	6270      	str	r0, [r6, #36]	; 0x24
 80102c2:	d104      	bne.n	80102ce <_Balloc+0x22>
 80102c4:	2166      	movs	r1, #102	; 0x66
 80102c6:	4b19      	ldr	r3, [pc, #100]	; (801032c <_Balloc+0x80>)
 80102c8:	4819      	ldr	r0, [pc, #100]	; (8010330 <_Balloc+0x84>)
 80102ca:	f001 f8ef 	bl	80114ac <__assert_func>
 80102ce:	6045      	str	r5, [r0, #4]
 80102d0:	6085      	str	r5, [r0, #8]
 80102d2:	6005      	str	r5, [r0, #0]
 80102d4:	60c5      	str	r5, [r0, #12]
 80102d6:	6a75      	ldr	r5, [r6, #36]	; 0x24
 80102d8:	68eb      	ldr	r3, [r5, #12]
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d013      	beq.n	8010306 <_Balloc+0x5a>
 80102de:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80102e0:	00a2      	lsls	r2, r4, #2
 80102e2:	68db      	ldr	r3, [r3, #12]
 80102e4:	189b      	adds	r3, r3, r2
 80102e6:	6818      	ldr	r0, [r3, #0]
 80102e8:	2800      	cmp	r0, #0
 80102ea:	d118      	bne.n	801031e <_Balloc+0x72>
 80102ec:	2101      	movs	r1, #1
 80102ee:	000d      	movs	r5, r1
 80102f0:	40a5      	lsls	r5, r4
 80102f2:	1d6a      	adds	r2, r5, #5
 80102f4:	0030      	movs	r0, r6
 80102f6:	0092      	lsls	r2, r2, #2
 80102f8:	f000 fcbc 	bl	8010c74 <_calloc_r>
 80102fc:	2800      	cmp	r0, #0
 80102fe:	d00c      	beq.n	801031a <_Balloc+0x6e>
 8010300:	6044      	str	r4, [r0, #4]
 8010302:	6085      	str	r5, [r0, #8]
 8010304:	e00d      	b.n	8010322 <_Balloc+0x76>
 8010306:	2221      	movs	r2, #33	; 0x21
 8010308:	2104      	movs	r1, #4
 801030a:	0030      	movs	r0, r6
 801030c:	f000 fcb2 	bl	8010c74 <_calloc_r>
 8010310:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8010312:	60e8      	str	r0, [r5, #12]
 8010314:	68db      	ldr	r3, [r3, #12]
 8010316:	2b00      	cmp	r3, #0
 8010318:	d1e1      	bne.n	80102de <_Balloc+0x32>
 801031a:	2000      	movs	r0, #0
 801031c:	bd70      	pop	{r4, r5, r6, pc}
 801031e:	6802      	ldr	r2, [r0, #0]
 8010320:	601a      	str	r2, [r3, #0]
 8010322:	2300      	movs	r3, #0
 8010324:	6103      	str	r3, [r0, #16]
 8010326:	60c3      	str	r3, [r0, #12]
 8010328:	e7f8      	b.n	801031c <_Balloc+0x70>
 801032a:	46c0      	nop			; (mov r8, r8)
 801032c:	08013684 	.word	0x08013684
 8010330:	0801369b 	.word	0x0801369b

08010334 <_Bfree>:
 8010334:	b570      	push	{r4, r5, r6, lr}
 8010336:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010338:	0005      	movs	r5, r0
 801033a:	000c      	movs	r4, r1
 801033c:	2e00      	cmp	r6, #0
 801033e:	d10e      	bne.n	801035e <_Bfree+0x2a>
 8010340:	2010      	movs	r0, #16
 8010342:	f001 ff87 	bl	8012254 <malloc>
 8010346:	1e02      	subs	r2, r0, #0
 8010348:	6268      	str	r0, [r5, #36]	; 0x24
 801034a:	d104      	bne.n	8010356 <_Bfree+0x22>
 801034c:	218a      	movs	r1, #138	; 0x8a
 801034e:	4b09      	ldr	r3, [pc, #36]	; (8010374 <_Bfree+0x40>)
 8010350:	4809      	ldr	r0, [pc, #36]	; (8010378 <_Bfree+0x44>)
 8010352:	f001 f8ab 	bl	80114ac <__assert_func>
 8010356:	6046      	str	r6, [r0, #4]
 8010358:	6086      	str	r6, [r0, #8]
 801035a:	6006      	str	r6, [r0, #0]
 801035c:	60c6      	str	r6, [r0, #12]
 801035e:	2c00      	cmp	r4, #0
 8010360:	d007      	beq.n	8010372 <_Bfree+0x3e>
 8010362:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010364:	6862      	ldr	r2, [r4, #4]
 8010366:	68db      	ldr	r3, [r3, #12]
 8010368:	0092      	lsls	r2, r2, #2
 801036a:	189b      	adds	r3, r3, r2
 801036c:	681a      	ldr	r2, [r3, #0]
 801036e:	6022      	str	r2, [r4, #0]
 8010370:	601c      	str	r4, [r3, #0]
 8010372:	bd70      	pop	{r4, r5, r6, pc}
 8010374:	08013684 	.word	0x08013684
 8010378:	0801369b 	.word	0x0801369b

0801037c <__multadd>:
 801037c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801037e:	000e      	movs	r6, r1
 8010380:	9001      	str	r0, [sp, #4]
 8010382:	000c      	movs	r4, r1
 8010384:	001d      	movs	r5, r3
 8010386:	2000      	movs	r0, #0
 8010388:	690f      	ldr	r7, [r1, #16]
 801038a:	3614      	adds	r6, #20
 801038c:	6833      	ldr	r3, [r6, #0]
 801038e:	3001      	adds	r0, #1
 8010390:	b299      	uxth	r1, r3
 8010392:	4351      	muls	r1, r2
 8010394:	0c1b      	lsrs	r3, r3, #16
 8010396:	4353      	muls	r3, r2
 8010398:	1949      	adds	r1, r1, r5
 801039a:	0c0d      	lsrs	r5, r1, #16
 801039c:	195b      	adds	r3, r3, r5
 801039e:	0c1d      	lsrs	r5, r3, #16
 80103a0:	b289      	uxth	r1, r1
 80103a2:	041b      	lsls	r3, r3, #16
 80103a4:	185b      	adds	r3, r3, r1
 80103a6:	c608      	stmia	r6!, {r3}
 80103a8:	4287      	cmp	r7, r0
 80103aa:	dcef      	bgt.n	801038c <__multadd+0x10>
 80103ac:	2d00      	cmp	r5, #0
 80103ae:	d022      	beq.n	80103f6 <__multadd+0x7a>
 80103b0:	68a3      	ldr	r3, [r4, #8]
 80103b2:	42bb      	cmp	r3, r7
 80103b4:	dc19      	bgt.n	80103ea <__multadd+0x6e>
 80103b6:	6863      	ldr	r3, [r4, #4]
 80103b8:	9801      	ldr	r0, [sp, #4]
 80103ba:	1c59      	adds	r1, r3, #1
 80103bc:	f7ff ff76 	bl	80102ac <_Balloc>
 80103c0:	1e06      	subs	r6, r0, #0
 80103c2:	d105      	bne.n	80103d0 <__multadd+0x54>
 80103c4:	0002      	movs	r2, r0
 80103c6:	21b5      	movs	r1, #181	; 0xb5
 80103c8:	4b0c      	ldr	r3, [pc, #48]	; (80103fc <__multadd+0x80>)
 80103ca:	480d      	ldr	r0, [pc, #52]	; (8010400 <__multadd+0x84>)
 80103cc:	f001 f86e 	bl	80114ac <__assert_func>
 80103d0:	0021      	movs	r1, r4
 80103d2:	6923      	ldr	r3, [r4, #16]
 80103d4:	310c      	adds	r1, #12
 80103d6:	1c9a      	adds	r2, r3, #2
 80103d8:	0092      	lsls	r2, r2, #2
 80103da:	300c      	adds	r0, #12
 80103dc:	f7fe fafa 	bl	800e9d4 <memcpy>
 80103e0:	0021      	movs	r1, r4
 80103e2:	9801      	ldr	r0, [sp, #4]
 80103e4:	f7ff ffa6 	bl	8010334 <_Bfree>
 80103e8:	0034      	movs	r4, r6
 80103ea:	1d3b      	adds	r3, r7, #4
 80103ec:	009b      	lsls	r3, r3, #2
 80103ee:	18e3      	adds	r3, r4, r3
 80103f0:	605d      	str	r5, [r3, #4]
 80103f2:	1c7b      	adds	r3, r7, #1
 80103f4:	6123      	str	r3, [r4, #16]
 80103f6:	0020      	movs	r0, r4
 80103f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80103fa:	46c0      	nop			; (mov r8, r8)
 80103fc:	080135f9 	.word	0x080135f9
 8010400:	0801369b 	.word	0x0801369b

08010404 <__s2b>:
 8010404:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010406:	0006      	movs	r6, r0
 8010408:	0018      	movs	r0, r3
 801040a:	000c      	movs	r4, r1
 801040c:	3008      	adds	r0, #8
 801040e:	2109      	movs	r1, #9
 8010410:	9301      	str	r3, [sp, #4]
 8010412:	0015      	movs	r5, r2
 8010414:	f7ef ff24 	bl	8000260 <__divsi3>
 8010418:	2301      	movs	r3, #1
 801041a:	2100      	movs	r1, #0
 801041c:	4283      	cmp	r3, r0
 801041e:	db0a      	blt.n	8010436 <__s2b+0x32>
 8010420:	0030      	movs	r0, r6
 8010422:	f7ff ff43 	bl	80102ac <_Balloc>
 8010426:	1e01      	subs	r1, r0, #0
 8010428:	d108      	bne.n	801043c <__s2b+0x38>
 801042a:	0002      	movs	r2, r0
 801042c:	4b19      	ldr	r3, [pc, #100]	; (8010494 <__s2b+0x90>)
 801042e:	481a      	ldr	r0, [pc, #104]	; (8010498 <__s2b+0x94>)
 8010430:	31ce      	adds	r1, #206	; 0xce
 8010432:	f001 f83b 	bl	80114ac <__assert_func>
 8010436:	005b      	lsls	r3, r3, #1
 8010438:	3101      	adds	r1, #1
 801043a:	e7ef      	b.n	801041c <__s2b+0x18>
 801043c:	9b08      	ldr	r3, [sp, #32]
 801043e:	6143      	str	r3, [r0, #20]
 8010440:	2301      	movs	r3, #1
 8010442:	6103      	str	r3, [r0, #16]
 8010444:	2d09      	cmp	r5, #9
 8010446:	dd18      	ble.n	801047a <__s2b+0x76>
 8010448:	0023      	movs	r3, r4
 801044a:	3309      	adds	r3, #9
 801044c:	001f      	movs	r7, r3
 801044e:	9300      	str	r3, [sp, #0]
 8010450:	1964      	adds	r4, r4, r5
 8010452:	783b      	ldrb	r3, [r7, #0]
 8010454:	220a      	movs	r2, #10
 8010456:	0030      	movs	r0, r6
 8010458:	3b30      	subs	r3, #48	; 0x30
 801045a:	f7ff ff8f 	bl	801037c <__multadd>
 801045e:	3701      	adds	r7, #1
 8010460:	0001      	movs	r1, r0
 8010462:	42a7      	cmp	r7, r4
 8010464:	d1f5      	bne.n	8010452 <__s2b+0x4e>
 8010466:	002c      	movs	r4, r5
 8010468:	9b00      	ldr	r3, [sp, #0]
 801046a:	3c08      	subs	r4, #8
 801046c:	191c      	adds	r4, r3, r4
 801046e:	002f      	movs	r7, r5
 8010470:	9b01      	ldr	r3, [sp, #4]
 8010472:	429f      	cmp	r7, r3
 8010474:	db04      	blt.n	8010480 <__s2b+0x7c>
 8010476:	0008      	movs	r0, r1
 8010478:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801047a:	2509      	movs	r5, #9
 801047c:	340a      	adds	r4, #10
 801047e:	e7f6      	b.n	801046e <__s2b+0x6a>
 8010480:	1b63      	subs	r3, r4, r5
 8010482:	5ddb      	ldrb	r3, [r3, r7]
 8010484:	220a      	movs	r2, #10
 8010486:	0030      	movs	r0, r6
 8010488:	3b30      	subs	r3, #48	; 0x30
 801048a:	f7ff ff77 	bl	801037c <__multadd>
 801048e:	3701      	adds	r7, #1
 8010490:	0001      	movs	r1, r0
 8010492:	e7ed      	b.n	8010470 <__s2b+0x6c>
 8010494:	080135f9 	.word	0x080135f9
 8010498:	0801369b 	.word	0x0801369b

0801049c <__hi0bits>:
 801049c:	0003      	movs	r3, r0
 801049e:	0c02      	lsrs	r2, r0, #16
 80104a0:	2000      	movs	r0, #0
 80104a2:	4282      	cmp	r2, r0
 80104a4:	d101      	bne.n	80104aa <__hi0bits+0xe>
 80104a6:	041b      	lsls	r3, r3, #16
 80104a8:	3010      	adds	r0, #16
 80104aa:	0e1a      	lsrs	r2, r3, #24
 80104ac:	d101      	bne.n	80104b2 <__hi0bits+0x16>
 80104ae:	3008      	adds	r0, #8
 80104b0:	021b      	lsls	r3, r3, #8
 80104b2:	0f1a      	lsrs	r2, r3, #28
 80104b4:	d101      	bne.n	80104ba <__hi0bits+0x1e>
 80104b6:	3004      	adds	r0, #4
 80104b8:	011b      	lsls	r3, r3, #4
 80104ba:	0f9a      	lsrs	r2, r3, #30
 80104bc:	d101      	bne.n	80104c2 <__hi0bits+0x26>
 80104be:	3002      	adds	r0, #2
 80104c0:	009b      	lsls	r3, r3, #2
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	db03      	blt.n	80104ce <__hi0bits+0x32>
 80104c6:	3001      	adds	r0, #1
 80104c8:	005b      	lsls	r3, r3, #1
 80104ca:	d400      	bmi.n	80104ce <__hi0bits+0x32>
 80104cc:	2020      	movs	r0, #32
 80104ce:	4770      	bx	lr

080104d0 <__lo0bits>:
 80104d0:	6803      	ldr	r3, [r0, #0]
 80104d2:	0002      	movs	r2, r0
 80104d4:	2107      	movs	r1, #7
 80104d6:	0018      	movs	r0, r3
 80104d8:	4008      	ands	r0, r1
 80104da:	420b      	tst	r3, r1
 80104dc:	d00d      	beq.n	80104fa <__lo0bits+0x2a>
 80104de:	3906      	subs	r1, #6
 80104e0:	2000      	movs	r0, #0
 80104e2:	420b      	tst	r3, r1
 80104e4:	d105      	bne.n	80104f2 <__lo0bits+0x22>
 80104e6:	3002      	adds	r0, #2
 80104e8:	4203      	tst	r3, r0
 80104ea:	d003      	beq.n	80104f4 <__lo0bits+0x24>
 80104ec:	40cb      	lsrs	r3, r1
 80104ee:	0008      	movs	r0, r1
 80104f0:	6013      	str	r3, [r2, #0]
 80104f2:	4770      	bx	lr
 80104f4:	089b      	lsrs	r3, r3, #2
 80104f6:	6013      	str	r3, [r2, #0]
 80104f8:	e7fb      	b.n	80104f2 <__lo0bits+0x22>
 80104fa:	b299      	uxth	r1, r3
 80104fc:	2900      	cmp	r1, #0
 80104fe:	d101      	bne.n	8010504 <__lo0bits+0x34>
 8010500:	2010      	movs	r0, #16
 8010502:	0c1b      	lsrs	r3, r3, #16
 8010504:	b2d9      	uxtb	r1, r3
 8010506:	2900      	cmp	r1, #0
 8010508:	d101      	bne.n	801050e <__lo0bits+0x3e>
 801050a:	3008      	adds	r0, #8
 801050c:	0a1b      	lsrs	r3, r3, #8
 801050e:	0719      	lsls	r1, r3, #28
 8010510:	d101      	bne.n	8010516 <__lo0bits+0x46>
 8010512:	3004      	adds	r0, #4
 8010514:	091b      	lsrs	r3, r3, #4
 8010516:	0799      	lsls	r1, r3, #30
 8010518:	d101      	bne.n	801051e <__lo0bits+0x4e>
 801051a:	3002      	adds	r0, #2
 801051c:	089b      	lsrs	r3, r3, #2
 801051e:	07d9      	lsls	r1, r3, #31
 8010520:	d4e9      	bmi.n	80104f6 <__lo0bits+0x26>
 8010522:	3001      	adds	r0, #1
 8010524:	085b      	lsrs	r3, r3, #1
 8010526:	d1e6      	bne.n	80104f6 <__lo0bits+0x26>
 8010528:	2020      	movs	r0, #32
 801052a:	e7e2      	b.n	80104f2 <__lo0bits+0x22>

0801052c <__i2b>:
 801052c:	b510      	push	{r4, lr}
 801052e:	000c      	movs	r4, r1
 8010530:	2101      	movs	r1, #1
 8010532:	f7ff febb 	bl	80102ac <_Balloc>
 8010536:	2800      	cmp	r0, #0
 8010538:	d106      	bne.n	8010548 <__i2b+0x1c>
 801053a:	21a0      	movs	r1, #160	; 0xa0
 801053c:	0002      	movs	r2, r0
 801053e:	4b04      	ldr	r3, [pc, #16]	; (8010550 <__i2b+0x24>)
 8010540:	4804      	ldr	r0, [pc, #16]	; (8010554 <__i2b+0x28>)
 8010542:	0049      	lsls	r1, r1, #1
 8010544:	f000 ffb2 	bl	80114ac <__assert_func>
 8010548:	2301      	movs	r3, #1
 801054a:	6144      	str	r4, [r0, #20]
 801054c:	6103      	str	r3, [r0, #16]
 801054e:	bd10      	pop	{r4, pc}
 8010550:	080135f9 	.word	0x080135f9
 8010554:	0801369b 	.word	0x0801369b

08010558 <__multiply>:
 8010558:	b5f0      	push	{r4, r5, r6, r7, lr}
 801055a:	690b      	ldr	r3, [r1, #16]
 801055c:	0014      	movs	r4, r2
 801055e:	6912      	ldr	r2, [r2, #16]
 8010560:	000d      	movs	r5, r1
 8010562:	b089      	sub	sp, #36	; 0x24
 8010564:	4293      	cmp	r3, r2
 8010566:	da01      	bge.n	801056c <__multiply+0x14>
 8010568:	0025      	movs	r5, r4
 801056a:	000c      	movs	r4, r1
 801056c:	692f      	ldr	r7, [r5, #16]
 801056e:	6926      	ldr	r6, [r4, #16]
 8010570:	6869      	ldr	r1, [r5, #4]
 8010572:	19bb      	adds	r3, r7, r6
 8010574:	9302      	str	r3, [sp, #8]
 8010576:	68ab      	ldr	r3, [r5, #8]
 8010578:	19ba      	adds	r2, r7, r6
 801057a:	4293      	cmp	r3, r2
 801057c:	da00      	bge.n	8010580 <__multiply+0x28>
 801057e:	3101      	adds	r1, #1
 8010580:	f7ff fe94 	bl	80102ac <_Balloc>
 8010584:	9001      	str	r0, [sp, #4]
 8010586:	2800      	cmp	r0, #0
 8010588:	d106      	bne.n	8010598 <__multiply+0x40>
 801058a:	215e      	movs	r1, #94	; 0x5e
 801058c:	0002      	movs	r2, r0
 801058e:	4b48      	ldr	r3, [pc, #288]	; (80106b0 <__multiply+0x158>)
 8010590:	4848      	ldr	r0, [pc, #288]	; (80106b4 <__multiply+0x15c>)
 8010592:	31ff      	adds	r1, #255	; 0xff
 8010594:	f000 ff8a 	bl	80114ac <__assert_func>
 8010598:	9b01      	ldr	r3, [sp, #4]
 801059a:	2200      	movs	r2, #0
 801059c:	3314      	adds	r3, #20
 801059e:	469c      	mov	ip, r3
 80105a0:	19bb      	adds	r3, r7, r6
 80105a2:	009b      	lsls	r3, r3, #2
 80105a4:	4463      	add	r3, ip
 80105a6:	9303      	str	r3, [sp, #12]
 80105a8:	4663      	mov	r3, ip
 80105aa:	9903      	ldr	r1, [sp, #12]
 80105ac:	428b      	cmp	r3, r1
 80105ae:	d32c      	bcc.n	801060a <__multiply+0xb2>
 80105b0:	002b      	movs	r3, r5
 80105b2:	0022      	movs	r2, r4
 80105b4:	3314      	adds	r3, #20
 80105b6:	00bf      	lsls	r7, r7, #2
 80105b8:	3214      	adds	r2, #20
 80105ba:	9306      	str	r3, [sp, #24]
 80105bc:	00b6      	lsls	r6, r6, #2
 80105be:	19db      	adds	r3, r3, r7
 80105c0:	9304      	str	r3, [sp, #16]
 80105c2:	1993      	adds	r3, r2, r6
 80105c4:	9307      	str	r3, [sp, #28]
 80105c6:	2304      	movs	r3, #4
 80105c8:	9305      	str	r3, [sp, #20]
 80105ca:	002b      	movs	r3, r5
 80105cc:	9904      	ldr	r1, [sp, #16]
 80105ce:	3315      	adds	r3, #21
 80105d0:	9200      	str	r2, [sp, #0]
 80105d2:	4299      	cmp	r1, r3
 80105d4:	d305      	bcc.n	80105e2 <__multiply+0x8a>
 80105d6:	1b4b      	subs	r3, r1, r5
 80105d8:	3b15      	subs	r3, #21
 80105da:	089b      	lsrs	r3, r3, #2
 80105dc:	3301      	adds	r3, #1
 80105de:	009b      	lsls	r3, r3, #2
 80105e0:	9305      	str	r3, [sp, #20]
 80105e2:	9b07      	ldr	r3, [sp, #28]
 80105e4:	9a00      	ldr	r2, [sp, #0]
 80105e6:	429a      	cmp	r2, r3
 80105e8:	d311      	bcc.n	801060e <__multiply+0xb6>
 80105ea:	9b02      	ldr	r3, [sp, #8]
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	dd06      	ble.n	80105fe <__multiply+0xa6>
 80105f0:	9b03      	ldr	r3, [sp, #12]
 80105f2:	3b04      	subs	r3, #4
 80105f4:	9303      	str	r3, [sp, #12]
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	9300      	str	r3, [sp, #0]
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d053      	beq.n	80106a6 <__multiply+0x14e>
 80105fe:	9b01      	ldr	r3, [sp, #4]
 8010600:	9a02      	ldr	r2, [sp, #8]
 8010602:	0018      	movs	r0, r3
 8010604:	611a      	str	r2, [r3, #16]
 8010606:	b009      	add	sp, #36	; 0x24
 8010608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801060a:	c304      	stmia	r3!, {r2}
 801060c:	e7cd      	b.n	80105aa <__multiply+0x52>
 801060e:	9b00      	ldr	r3, [sp, #0]
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	b298      	uxth	r0, r3
 8010614:	2800      	cmp	r0, #0
 8010616:	d01b      	beq.n	8010650 <__multiply+0xf8>
 8010618:	4667      	mov	r7, ip
 801061a:	2400      	movs	r4, #0
 801061c:	9e06      	ldr	r6, [sp, #24]
 801061e:	ce02      	ldmia	r6!, {r1}
 8010620:	683a      	ldr	r2, [r7, #0]
 8010622:	b28b      	uxth	r3, r1
 8010624:	4343      	muls	r3, r0
 8010626:	b292      	uxth	r2, r2
 8010628:	189b      	adds	r3, r3, r2
 801062a:	191b      	adds	r3, r3, r4
 801062c:	0c0c      	lsrs	r4, r1, #16
 801062e:	4344      	muls	r4, r0
 8010630:	683a      	ldr	r2, [r7, #0]
 8010632:	0c11      	lsrs	r1, r2, #16
 8010634:	1861      	adds	r1, r4, r1
 8010636:	0c1c      	lsrs	r4, r3, #16
 8010638:	1909      	adds	r1, r1, r4
 801063a:	0c0c      	lsrs	r4, r1, #16
 801063c:	b29b      	uxth	r3, r3
 801063e:	0409      	lsls	r1, r1, #16
 8010640:	430b      	orrs	r3, r1
 8010642:	c708      	stmia	r7!, {r3}
 8010644:	9b04      	ldr	r3, [sp, #16]
 8010646:	42b3      	cmp	r3, r6
 8010648:	d8e9      	bhi.n	801061e <__multiply+0xc6>
 801064a:	4663      	mov	r3, ip
 801064c:	9a05      	ldr	r2, [sp, #20]
 801064e:	509c      	str	r4, [r3, r2]
 8010650:	9b00      	ldr	r3, [sp, #0]
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	0c1e      	lsrs	r6, r3, #16
 8010656:	d020      	beq.n	801069a <__multiply+0x142>
 8010658:	4663      	mov	r3, ip
 801065a:	002c      	movs	r4, r5
 801065c:	4660      	mov	r0, ip
 801065e:	2700      	movs	r7, #0
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	3414      	adds	r4, #20
 8010664:	6822      	ldr	r2, [r4, #0]
 8010666:	b29b      	uxth	r3, r3
 8010668:	b291      	uxth	r1, r2
 801066a:	4371      	muls	r1, r6
 801066c:	6802      	ldr	r2, [r0, #0]
 801066e:	0c12      	lsrs	r2, r2, #16
 8010670:	1889      	adds	r1, r1, r2
 8010672:	19cf      	adds	r7, r1, r7
 8010674:	0439      	lsls	r1, r7, #16
 8010676:	430b      	orrs	r3, r1
 8010678:	6003      	str	r3, [r0, #0]
 801067a:	cc02      	ldmia	r4!, {r1}
 801067c:	6843      	ldr	r3, [r0, #4]
 801067e:	0c09      	lsrs	r1, r1, #16
 8010680:	4371      	muls	r1, r6
 8010682:	b29b      	uxth	r3, r3
 8010684:	0c3f      	lsrs	r7, r7, #16
 8010686:	18cb      	adds	r3, r1, r3
 8010688:	9a04      	ldr	r2, [sp, #16]
 801068a:	19db      	adds	r3, r3, r7
 801068c:	0c1f      	lsrs	r7, r3, #16
 801068e:	3004      	adds	r0, #4
 8010690:	42a2      	cmp	r2, r4
 8010692:	d8e7      	bhi.n	8010664 <__multiply+0x10c>
 8010694:	4662      	mov	r2, ip
 8010696:	9905      	ldr	r1, [sp, #20]
 8010698:	5053      	str	r3, [r2, r1]
 801069a:	9b00      	ldr	r3, [sp, #0]
 801069c:	3304      	adds	r3, #4
 801069e:	9300      	str	r3, [sp, #0]
 80106a0:	2304      	movs	r3, #4
 80106a2:	449c      	add	ip, r3
 80106a4:	e79d      	b.n	80105e2 <__multiply+0x8a>
 80106a6:	9b02      	ldr	r3, [sp, #8]
 80106a8:	3b01      	subs	r3, #1
 80106aa:	9302      	str	r3, [sp, #8]
 80106ac:	e79d      	b.n	80105ea <__multiply+0x92>
 80106ae:	46c0      	nop			; (mov r8, r8)
 80106b0:	080135f9 	.word	0x080135f9
 80106b4:	0801369b 	.word	0x0801369b

080106b8 <__pow5mult>:
 80106b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80106ba:	2303      	movs	r3, #3
 80106bc:	0015      	movs	r5, r2
 80106be:	0007      	movs	r7, r0
 80106c0:	000e      	movs	r6, r1
 80106c2:	401a      	ands	r2, r3
 80106c4:	421d      	tst	r5, r3
 80106c6:	d008      	beq.n	80106da <__pow5mult+0x22>
 80106c8:	4925      	ldr	r1, [pc, #148]	; (8010760 <__pow5mult+0xa8>)
 80106ca:	3a01      	subs	r2, #1
 80106cc:	0092      	lsls	r2, r2, #2
 80106ce:	5852      	ldr	r2, [r2, r1]
 80106d0:	2300      	movs	r3, #0
 80106d2:	0031      	movs	r1, r6
 80106d4:	f7ff fe52 	bl	801037c <__multadd>
 80106d8:	0006      	movs	r6, r0
 80106da:	10ad      	asrs	r5, r5, #2
 80106dc:	d03d      	beq.n	801075a <__pow5mult+0xa2>
 80106de:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80106e0:	2c00      	cmp	r4, #0
 80106e2:	d10f      	bne.n	8010704 <__pow5mult+0x4c>
 80106e4:	2010      	movs	r0, #16
 80106e6:	f001 fdb5 	bl	8012254 <malloc>
 80106ea:	1e02      	subs	r2, r0, #0
 80106ec:	6278      	str	r0, [r7, #36]	; 0x24
 80106ee:	d105      	bne.n	80106fc <__pow5mult+0x44>
 80106f0:	21d7      	movs	r1, #215	; 0xd7
 80106f2:	4b1c      	ldr	r3, [pc, #112]	; (8010764 <__pow5mult+0xac>)
 80106f4:	481c      	ldr	r0, [pc, #112]	; (8010768 <__pow5mult+0xb0>)
 80106f6:	0049      	lsls	r1, r1, #1
 80106f8:	f000 fed8 	bl	80114ac <__assert_func>
 80106fc:	6044      	str	r4, [r0, #4]
 80106fe:	6084      	str	r4, [r0, #8]
 8010700:	6004      	str	r4, [r0, #0]
 8010702:	60c4      	str	r4, [r0, #12]
 8010704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010706:	689c      	ldr	r4, [r3, #8]
 8010708:	9301      	str	r3, [sp, #4]
 801070a:	2c00      	cmp	r4, #0
 801070c:	d108      	bne.n	8010720 <__pow5mult+0x68>
 801070e:	0038      	movs	r0, r7
 8010710:	4916      	ldr	r1, [pc, #88]	; (801076c <__pow5mult+0xb4>)
 8010712:	f7ff ff0b 	bl	801052c <__i2b>
 8010716:	9b01      	ldr	r3, [sp, #4]
 8010718:	0004      	movs	r4, r0
 801071a:	6098      	str	r0, [r3, #8]
 801071c:	2300      	movs	r3, #0
 801071e:	6003      	str	r3, [r0, #0]
 8010720:	2301      	movs	r3, #1
 8010722:	421d      	tst	r5, r3
 8010724:	d00a      	beq.n	801073c <__pow5mult+0x84>
 8010726:	0031      	movs	r1, r6
 8010728:	0022      	movs	r2, r4
 801072a:	0038      	movs	r0, r7
 801072c:	f7ff ff14 	bl	8010558 <__multiply>
 8010730:	0031      	movs	r1, r6
 8010732:	9001      	str	r0, [sp, #4]
 8010734:	0038      	movs	r0, r7
 8010736:	f7ff fdfd 	bl	8010334 <_Bfree>
 801073a:	9e01      	ldr	r6, [sp, #4]
 801073c:	106d      	asrs	r5, r5, #1
 801073e:	d00c      	beq.n	801075a <__pow5mult+0xa2>
 8010740:	6820      	ldr	r0, [r4, #0]
 8010742:	2800      	cmp	r0, #0
 8010744:	d107      	bne.n	8010756 <__pow5mult+0x9e>
 8010746:	0022      	movs	r2, r4
 8010748:	0021      	movs	r1, r4
 801074a:	0038      	movs	r0, r7
 801074c:	f7ff ff04 	bl	8010558 <__multiply>
 8010750:	2300      	movs	r3, #0
 8010752:	6020      	str	r0, [r4, #0]
 8010754:	6003      	str	r3, [r0, #0]
 8010756:	0004      	movs	r4, r0
 8010758:	e7e2      	b.n	8010720 <__pow5mult+0x68>
 801075a:	0030      	movs	r0, r6
 801075c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801075e:	46c0      	nop			; (mov r8, r8)
 8010760:	080137e8 	.word	0x080137e8
 8010764:	08013684 	.word	0x08013684
 8010768:	0801369b 	.word	0x0801369b
 801076c:	00000271 	.word	0x00000271

08010770 <__lshift>:
 8010770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010772:	000c      	movs	r4, r1
 8010774:	0017      	movs	r7, r2
 8010776:	6923      	ldr	r3, [r4, #16]
 8010778:	1155      	asrs	r5, r2, #5
 801077a:	b087      	sub	sp, #28
 801077c:	18eb      	adds	r3, r5, r3
 801077e:	9302      	str	r3, [sp, #8]
 8010780:	3301      	adds	r3, #1
 8010782:	9301      	str	r3, [sp, #4]
 8010784:	6849      	ldr	r1, [r1, #4]
 8010786:	68a3      	ldr	r3, [r4, #8]
 8010788:	9004      	str	r0, [sp, #16]
 801078a:	9a01      	ldr	r2, [sp, #4]
 801078c:	4293      	cmp	r3, r2
 801078e:	db10      	blt.n	80107b2 <__lshift+0x42>
 8010790:	9804      	ldr	r0, [sp, #16]
 8010792:	f7ff fd8b 	bl	80102ac <_Balloc>
 8010796:	2300      	movs	r3, #0
 8010798:	0002      	movs	r2, r0
 801079a:	0006      	movs	r6, r0
 801079c:	0019      	movs	r1, r3
 801079e:	3214      	adds	r2, #20
 80107a0:	4298      	cmp	r0, r3
 80107a2:	d10c      	bne.n	80107be <__lshift+0x4e>
 80107a4:	21da      	movs	r1, #218	; 0xda
 80107a6:	0002      	movs	r2, r0
 80107a8:	4b26      	ldr	r3, [pc, #152]	; (8010844 <__lshift+0xd4>)
 80107aa:	4827      	ldr	r0, [pc, #156]	; (8010848 <__lshift+0xd8>)
 80107ac:	31ff      	adds	r1, #255	; 0xff
 80107ae:	f000 fe7d 	bl	80114ac <__assert_func>
 80107b2:	3101      	adds	r1, #1
 80107b4:	005b      	lsls	r3, r3, #1
 80107b6:	e7e8      	b.n	801078a <__lshift+0x1a>
 80107b8:	0098      	lsls	r0, r3, #2
 80107ba:	5011      	str	r1, [r2, r0]
 80107bc:	3301      	adds	r3, #1
 80107be:	42ab      	cmp	r3, r5
 80107c0:	dbfa      	blt.n	80107b8 <__lshift+0x48>
 80107c2:	43eb      	mvns	r3, r5
 80107c4:	17db      	asrs	r3, r3, #31
 80107c6:	401d      	ands	r5, r3
 80107c8:	211f      	movs	r1, #31
 80107ca:	0023      	movs	r3, r4
 80107cc:	0038      	movs	r0, r7
 80107ce:	00ad      	lsls	r5, r5, #2
 80107d0:	1955      	adds	r5, r2, r5
 80107d2:	6922      	ldr	r2, [r4, #16]
 80107d4:	3314      	adds	r3, #20
 80107d6:	0092      	lsls	r2, r2, #2
 80107d8:	4008      	ands	r0, r1
 80107da:	4684      	mov	ip, r0
 80107dc:	189a      	adds	r2, r3, r2
 80107de:	420f      	tst	r7, r1
 80107e0:	d02a      	beq.n	8010838 <__lshift+0xc8>
 80107e2:	3101      	adds	r1, #1
 80107e4:	1a09      	subs	r1, r1, r0
 80107e6:	9105      	str	r1, [sp, #20]
 80107e8:	2100      	movs	r1, #0
 80107ea:	9503      	str	r5, [sp, #12]
 80107ec:	4667      	mov	r7, ip
 80107ee:	6818      	ldr	r0, [r3, #0]
 80107f0:	40b8      	lsls	r0, r7
 80107f2:	4301      	orrs	r1, r0
 80107f4:	9803      	ldr	r0, [sp, #12]
 80107f6:	c002      	stmia	r0!, {r1}
 80107f8:	cb02      	ldmia	r3!, {r1}
 80107fa:	9003      	str	r0, [sp, #12]
 80107fc:	9805      	ldr	r0, [sp, #20]
 80107fe:	40c1      	lsrs	r1, r0
 8010800:	429a      	cmp	r2, r3
 8010802:	d8f3      	bhi.n	80107ec <__lshift+0x7c>
 8010804:	0020      	movs	r0, r4
 8010806:	3015      	adds	r0, #21
 8010808:	2304      	movs	r3, #4
 801080a:	4282      	cmp	r2, r0
 801080c:	d304      	bcc.n	8010818 <__lshift+0xa8>
 801080e:	1b13      	subs	r3, r2, r4
 8010810:	3b15      	subs	r3, #21
 8010812:	089b      	lsrs	r3, r3, #2
 8010814:	3301      	adds	r3, #1
 8010816:	009b      	lsls	r3, r3, #2
 8010818:	50e9      	str	r1, [r5, r3]
 801081a:	2900      	cmp	r1, #0
 801081c:	d002      	beq.n	8010824 <__lshift+0xb4>
 801081e:	9b02      	ldr	r3, [sp, #8]
 8010820:	3302      	adds	r3, #2
 8010822:	9301      	str	r3, [sp, #4]
 8010824:	9b01      	ldr	r3, [sp, #4]
 8010826:	9804      	ldr	r0, [sp, #16]
 8010828:	3b01      	subs	r3, #1
 801082a:	0021      	movs	r1, r4
 801082c:	6133      	str	r3, [r6, #16]
 801082e:	f7ff fd81 	bl	8010334 <_Bfree>
 8010832:	0030      	movs	r0, r6
 8010834:	b007      	add	sp, #28
 8010836:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010838:	cb02      	ldmia	r3!, {r1}
 801083a:	c502      	stmia	r5!, {r1}
 801083c:	429a      	cmp	r2, r3
 801083e:	d8fb      	bhi.n	8010838 <__lshift+0xc8>
 8010840:	e7f0      	b.n	8010824 <__lshift+0xb4>
 8010842:	46c0      	nop			; (mov r8, r8)
 8010844:	080135f9 	.word	0x080135f9
 8010848:	0801369b 	.word	0x0801369b

0801084c <__mcmp>:
 801084c:	6902      	ldr	r2, [r0, #16]
 801084e:	690b      	ldr	r3, [r1, #16]
 8010850:	b530      	push	{r4, r5, lr}
 8010852:	0004      	movs	r4, r0
 8010854:	1ad0      	subs	r0, r2, r3
 8010856:	429a      	cmp	r2, r3
 8010858:	d10d      	bne.n	8010876 <__mcmp+0x2a>
 801085a:	009b      	lsls	r3, r3, #2
 801085c:	3414      	adds	r4, #20
 801085e:	3114      	adds	r1, #20
 8010860:	18e2      	adds	r2, r4, r3
 8010862:	18c9      	adds	r1, r1, r3
 8010864:	3a04      	subs	r2, #4
 8010866:	3904      	subs	r1, #4
 8010868:	6815      	ldr	r5, [r2, #0]
 801086a:	680b      	ldr	r3, [r1, #0]
 801086c:	429d      	cmp	r5, r3
 801086e:	d003      	beq.n	8010878 <__mcmp+0x2c>
 8010870:	2001      	movs	r0, #1
 8010872:	429d      	cmp	r5, r3
 8010874:	d303      	bcc.n	801087e <__mcmp+0x32>
 8010876:	bd30      	pop	{r4, r5, pc}
 8010878:	4294      	cmp	r4, r2
 801087a:	d3f3      	bcc.n	8010864 <__mcmp+0x18>
 801087c:	e7fb      	b.n	8010876 <__mcmp+0x2a>
 801087e:	4240      	negs	r0, r0
 8010880:	e7f9      	b.n	8010876 <__mcmp+0x2a>
	...

08010884 <__mdiff>:
 8010884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010886:	000e      	movs	r6, r1
 8010888:	0007      	movs	r7, r0
 801088a:	0011      	movs	r1, r2
 801088c:	0030      	movs	r0, r6
 801088e:	b087      	sub	sp, #28
 8010890:	0014      	movs	r4, r2
 8010892:	f7ff ffdb 	bl	801084c <__mcmp>
 8010896:	1e05      	subs	r5, r0, #0
 8010898:	d110      	bne.n	80108bc <__mdiff+0x38>
 801089a:	0001      	movs	r1, r0
 801089c:	0038      	movs	r0, r7
 801089e:	f7ff fd05 	bl	80102ac <_Balloc>
 80108a2:	1e02      	subs	r2, r0, #0
 80108a4:	d104      	bne.n	80108b0 <__mdiff+0x2c>
 80108a6:	4b40      	ldr	r3, [pc, #256]	; (80109a8 <__mdiff+0x124>)
 80108a8:	4940      	ldr	r1, [pc, #256]	; (80109ac <__mdiff+0x128>)
 80108aa:	4841      	ldr	r0, [pc, #260]	; (80109b0 <__mdiff+0x12c>)
 80108ac:	f000 fdfe 	bl	80114ac <__assert_func>
 80108b0:	2301      	movs	r3, #1
 80108b2:	6145      	str	r5, [r0, #20]
 80108b4:	6103      	str	r3, [r0, #16]
 80108b6:	0010      	movs	r0, r2
 80108b8:	b007      	add	sp, #28
 80108ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80108bc:	2301      	movs	r3, #1
 80108be:	9301      	str	r3, [sp, #4]
 80108c0:	2800      	cmp	r0, #0
 80108c2:	db04      	blt.n	80108ce <__mdiff+0x4a>
 80108c4:	0023      	movs	r3, r4
 80108c6:	0034      	movs	r4, r6
 80108c8:	001e      	movs	r6, r3
 80108ca:	2300      	movs	r3, #0
 80108cc:	9301      	str	r3, [sp, #4]
 80108ce:	0038      	movs	r0, r7
 80108d0:	6861      	ldr	r1, [r4, #4]
 80108d2:	f7ff fceb 	bl	80102ac <_Balloc>
 80108d6:	1e02      	subs	r2, r0, #0
 80108d8:	d103      	bne.n	80108e2 <__mdiff+0x5e>
 80108da:	2190      	movs	r1, #144	; 0x90
 80108dc:	4b32      	ldr	r3, [pc, #200]	; (80109a8 <__mdiff+0x124>)
 80108de:	0089      	lsls	r1, r1, #2
 80108e0:	e7e3      	b.n	80108aa <__mdiff+0x26>
 80108e2:	9b01      	ldr	r3, [sp, #4]
 80108e4:	2700      	movs	r7, #0
 80108e6:	60c3      	str	r3, [r0, #12]
 80108e8:	6920      	ldr	r0, [r4, #16]
 80108ea:	3414      	adds	r4, #20
 80108ec:	9401      	str	r4, [sp, #4]
 80108ee:	9b01      	ldr	r3, [sp, #4]
 80108f0:	0084      	lsls	r4, r0, #2
 80108f2:	191b      	adds	r3, r3, r4
 80108f4:	0034      	movs	r4, r6
 80108f6:	9302      	str	r3, [sp, #8]
 80108f8:	6933      	ldr	r3, [r6, #16]
 80108fa:	3414      	adds	r4, #20
 80108fc:	0099      	lsls	r1, r3, #2
 80108fe:	1863      	adds	r3, r4, r1
 8010900:	9303      	str	r3, [sp, #12]
 8010902:	0013      	movs	r3, r2
 8010904:	3314      	adds	r3, #20
 8010906:	469c      	mov	ip, r3
 8010908:	9305      	str	r3, [sp, #20]
 801090a:	9b01      	ldr	r3, [sp, #4]
 801090c:	9304      	str	r3, [sp, #16]
 801090e:	9b04      	ldr	r3, [sp, #16]
 8010910:	cc02      	ldmia	r4!, {r1}
 8010912:	cb20      	ldmia	r3!, {r5}
 8010914:	9304      	str	r3, [sp, #16]
 8010916:	b2ab      	uxth	r3, r5
 8010918:	19df      	adds	r7, r3, r7
 801091a:	b28b      	uxth	r3, r1
 801091c:	1afb      	subs	r3, r7, r3
 801091e:	0c09      	lsrs	r1, r1, #16
 8010920:	0c2d      	lsrs	r5, r5, #16
 8010922:	1a6d      	subs	r5, r5, r1
 8010924:	1419      	asrs	r1, r3, #16
 8010926:	186d      	adds	r5, r5, r1
 8010928:	4661      	mov	r1, ip
 801092a:	142f      	asrs	r7, r5, #16
 801092c:	b29b      	uxth	r3, r3
 801092e:	042d      	lsls	r5, r5, #16
 8010930:	432b      	orrs	r3, r5
 8010932:	c108      	stmia	r1!, {r3}
 8010934:	9b03      	ldr	r3, [sp, #12]
 8010936:	468c      	mov	ip, r1
 8010938:	42a3      	cmp	r3, r4
 801093a:	d8e8      	bhi.n	801090e <__mdiff+0x8a>
 801093c:	0031      	movs	r1, r6
 801093e:	9c03      	ldr	r4, [sp, #12]
 8010940:	3115      	adds	r1, #21
 8010942:	2304      	movs	r3, #4
 8010944:	428c      	cmp	r4, r1
 8010946:	d304      	bcc.n	8010952 <__mdiff+0xce>
 8010948:	1ba3      	subs	r3, r4, r6
 801094a:	3b15      	subs	r3, #21
 801094c:	089b      	lsrs	r3, r3, #2
 801094e:	3301      	adds	r3, #1
 8010950:	009b      	lsls	r3, r3, #2
 8010952:	9901      	ldr	r1, [sp, #4]
 8010954:	18cc      	adds	r4, r1, r3
 8010956:	9905      	ldr	r1, [sp, #20]
 8010958:	0026      	movs	r6, r4
 801095a:	18cb      	adds	r3, r1, r3
 801095c:	469c      	mov	ip, r3
 801095e:	9902      	ldr	r1, [sp, #8]
 8010960:	428e      	cmp	r6, r1
 8010962:	d310      	bcc.n	8010986 <__mdiff+0x102>
 8010964:	9e02      	ldr	r6, [sp, #8]
 8010966:	1ee1      	subs	r1, r4, #3
 8010968:	2500      	movs	r5, #0
 801096a:	428e      	cmp	r6, r1
 801096c:	d304      	bcc.n	8010978 <__mdiff+0xf4>
 801096e:	0031      	movs	r1, r6
 8010970:	3103      	adds	r1, #3
 8010972:	1b0c      	subs	r4, r1, r4
 8010974:	08a4      	lsrs	r4, r4, #2
 8010976:	00a5      	lsls	r5, r4, #2
 8010978:	195b      	adds	r3, r3, r5
 801097a:	3b04      	subs	r3, #4
 801097c:	6819      	ldr	r1, [r3, #0]
 801097e:	2900      	cmp	r1, #0
 8010980:	d00f      	beq.n	80109a2 <__mdiff+0x11e>
 8010982:	6110      	str	r0, [r2, #16]
 8010984:	e797      	b.n	80108b6 <__mdiff+0x32>
 8010986:	ce02      	ldmia	r6!, {r1}
 8010988:	b28d      	uxth	r5, r1
 801098a:	19ed      	adds	r5, r5, r7
 801098c:	0c0f      	lsrs	r7, r1, #16
 801098e:	1429      	asrs	r1, r5, #16
 8010990:	1879      	adds	r1, r7, r1
 8010992:	140f      	asrs	r7, r1, #16
 8010994:	b2ad      	uxth	r5, r5
 8010996:	0409      	lsls	r1, r1, #16
 8010998:	430d      	orrs	r5, r1
 801099a:	4661      	mov	r1, ip
 801099c:	c120      	stmia	r1!, {r5}
 801099e:	468c      	mov	ip, r1
 80109a0:	e7dd      	b.n	801095e <__mdiff+0xda>
 80109a2:	3801      	subs	r0, #1
 80109a4:	e7e9      	b.n	801097a <__mdiff+0xf6>
 80109a6:	46c0      	nop			; (mov r8, r8)
 80109a8:	080135f9 	.word	0x080135f9
 80109ac:	00000232 	.word	0x00000232
 80109b0:	0801369b 	.word	0x0801369b

080109b4 <__ulp>:
 80109b4:	4b0f      	ldr	r3, [pc, #60]	; (80109f4 <__ulp+0x40>)
 80109b6:	4019      	ands	r1, r3
 80109b8:	4b0f      	ldr	r3, [pc, #60]	; (80109f8 <__ulp+0x44>)
 80109ba:	18c9      	adds	r1, r1, r3
 80109bc:	2900      	cmp	r1, #0
 80109be:	dd04      	ble.n	80109ca <__ulp+0x16>
 80109c0:	2200      	movs	r2, #0
 80109c2:	000b      	movs	r3, r1
 80109c4:	0010      	movs	r0, r2
 80109c6:	0019      	movs	r1, r3
 80109c8:	4770      	bx	lr
 80109ca:	4249      	negs	r1, r1
 80109cc:	2200      	movs	r2, #0
 80109ce:	2300      	movs	r3, #0
 80109d0:	1509      	asrs	r1, r1, #20
 80109d2:	2913      	cmp	r1, #19
 80109d4:	dc04      	bgt.n	80109e0 <__ulp+0x2c>
 80109d6:	2080      	movs	r0, #128	; 0x80
 80109d8:	0300      	lsls	r0, r0, #12
 80109da:	4108      	asrs	r0, r1
 80109dc:	0003      	movs	r3, r0
 80109de:	e7f1      	b.n	80109c4 <__ulp+0x10>
 80109e0:	3914      	subs	r1, #20
 80109e2:	2001      	movs	r0, #1
 80109e4:	291e      	cmp	r1, #30
 80109e6:	dc02      	bgt.n	80109ee <__ulp+0x3a>
 80109e8:	2080      	movs	r0, #128	; 0x80
 80109ea:	0600      	lsls	r0, r0, #24
 80109ec:	40c8      	lsrs	r0, r1
 80109ee:	0002      	movs	r2, r0
 80109f0:	e7e8      	b.n	80109c4 <__ulp+0x10>
 80109f2:	46c0      	nop			; (mov r8, r8)
 80109f4:	7ff00000 	.word	0x7ff00000
 80109f8:	fcc00000 	.word	0xfcc00000

080109fc <__b2d>:
 80109fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80109fe:	0006      	movs	r6, r0
 8010a00:	6903      	ldr	r3, [r0, #16]
 8010a02:	3614      	adds	r6, #20
 8010a04:	009b      	lsls	r3, r3, #2
 8010a06:	18f3      	adds	r3, r6, r3
 8010a08:	1f1d      	subs	r5, r3, #4
 8010a0a:	682c      	ldr	r4, [r5, #0]
 8010a0c:	000f      	movs	r7, r1
 8010a0e:	0020      	movs	r0, r4
 8010a10:	9301      	str	r3, [sp, #4]
 8010a12:	f7ff fd43 	bl	801049c <__hi0bits>
 8010a16:	2320      	movs	r3, #32
 8010a18:	1a1b      	subs	r3, r3, r0
 8010a1a:	491f      	ldr	r1, [pc, #124]	; (8010a98 <__b2d+0x9c>)
 8010a1c:	603b      	str	r3, [r7, #0]
 8010a1e:	280a      	cmp	r0, #10
 8010a20:	dc16      	bgt.n	8010a50 <__b2d+0x54>
 8010a22:	230b      	movs	r3, #11
 8010a24:	0027      	movs	r7, r4
 8010a26:	1a1b      	subs	r3, r3, r0
 8010a28:	40df      	lsrs	r7, r3
 8010a2a:	4339      	orrs	r1, r7
 8010a2c:	469c      	mov	ip, r3
 8010a2e:	000b      	movs	r3, r1
 8010a30:	2100      	movs	r1, #0
 8010a32:	42ae      	cmp	r6, r5
 8010a34:	d202      	bcs.n	8010a3c <__b2d+0x40>
 8010a36:	9901      	ldr	r1, [sp, #4]
 8010a38:	3908      	subs	r1, #8
 8010a3a:	6809      	ldr	r1, [r1, #0]
 8010a3c:	3015      	adds	r0, #21
 8010a3e:	4084      	lsls	r4, r0
 8010a40:	4660      	mov	r0, ip
 8010a42:	40c1      	lsrs	r1, r0
 8010a44:	430c      	orrs	r4, r1
 8010a46:	0022      	movs	r2, r4
 8010a48:	0010      	movs	r0, r2
 8010a4a:	0019      	movs	r1, r3
 8010a4c:	b003      	add	sp, #12
 8010a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a50:	2700      	movs	r7, #0
 8010a52:	42ae      	cmp	r6, r5
 8010a54:	d202      	bcs.n	8010a5c <__b2d+0x60>
 8010a56:	9d01      	ldr	r5, [sp, #4]
 8010a58:	3d08      	subs	r5, #8
 8010a5a:	682f      	ldr	r7, [r5, #0]
 8010a5c:	230b      	movs	r3, #11
 8010a5e:	425b      	negs	r3, r3
 8010a60:	469c      	mov	ip, r3
 8010a62:	4484      	add	ip, r0
 8010a64:	280b      	cmp	r0, #11
 8010a66:	d013      	beq.n	8010a90 <__b2d+0x94>
 8010a68:	4663      	mov	r3, ip
 8010a6a:	2020      	movs	r0, #32
 8010a6c:	409c      	lsls	r4, r3
 8010a6e:	1ac0      	subs	r0, r0, r3
 8010a70:	003b      	movs	r3, r7
 8010a72:	40c3      	lsrs	r3, r0
 8010a74:	431c      	orrs	r4, r3
 8010a76:	4321      	orrs	r1, r4
 8010a78:	000b      	movs	r3, r1
 8010a7a:	2100      	movs	r1, #0
 8010a7c:	42b5      	cmp	r5, r6
 8010a7e:	d901      	bls.n	8010a84 <__b2d+0x88>
 8010a80:	3d04      	subs	r5, #4
 8010a82:	6829      	ldr	r1, [r5, #0]
 8010a84:	4664      	mov	r4, ip
 8010a86:	40c1      	lsrs	r1, r0
 8010a88:	40a7      	lsls	r7, r4
 8010a8a:	430f      	orrs	r7, r1
 8010a8c:	003a      	movs	r2, r7
 8010a8e:	e7db      	b.n	8010a48 <__b2d+0x4c>
 8010a90:	4321      	orrs	r1, r4
 8010a92:	000b      	movs	r3, r1
 8010a94:	e7fa      	b.n	8010a8c <__b2d+0x90>
 8010a96:	46c0      	nop			; (mov r8, r8)
 8010a98:	3ff00000 	.word	0x3ff00000

08010a9c <__d2b>:
 8010a9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010a9e:	2101      	movs	r1, #1
 8010aa0:	0014      	movs	r4, r2
 8010aa2:	001e      	movs	r6, r3
 8010aa4:	9f08      	ldr	r7, [sp, #32]
 8010aa6:	f7ff fc01 	bl	80102ac <_Balloc>
 8010aaa:	1e05      	subs	r5, r0, #0
 8010aac:	d105      	bne.n	8010aba <__d2b+0x1e>
 8010aae:	0002      	movs	r2, r0
 8010ab0:	4b26      	ldr	r3, [pc, #152]	; (8010b4c <__d2b+0xb0>)
 8010ab2:	4927      	ldr	r1, [pc, #156]	; (8010b50 <__d2b+0xb4>)
 8010ab4:	4827      	ldr	r0, [pc, #156]	; (8010b54 <__d2b+0xb8>)
 8010ab6:	f000 fcf9 	bl	80114ac <__assert_func>
 8010aba:	0333      	lsls	r3, r6, #12
 8010abc:	0076      	lsls	r6, r6, #1
 8010abe:	0b1b      	lsrs	r3, r3, #12
 8010ac0:	0d76      	lsrs	r6, r6, #21
 8010ac2:	d124      	bne.n	8010b0e <__d2b+0x72>
 8010ac4:	9301      	str	r3, [sp, #4]
 8010ac6:	2c00      	cmp	r4, #0
 8010ac8:	d027      	beq.n	8010b1a <__d2b+0x7e>
 8010aca:	4668      	mov	r0, sp
 8010acc:	9400      	str	r4, [sp, #0]
 8010ace:	f7ff fcff 	bl	80104d0 <__lo0bits>
 8010ad2:	9c00      	ldr	r4, [sp, #0]
 8010ad4:	2800      	cmp	r0, #0
 8010ad6:	d01e      	beq.n	8010b16 <__d2b+0x7a>
 8010ad8:	9b01      	ldr	r3, [sp, #4]
 8010ada:	2120      	movs	r1, #32
 8010adc:	001a      	movs	r2, r3
 8010ade:	1a09      	subs	r1, r1, r0
 8010ae0:	408a      	lsls	r2, r1
 8010ae2:	40c3      	lsrs	r3, r0
 8010ae4:	4322      	orrs	r2, r4
 8010ae6:	616a      	str	r2, [r5, #20]
 8010ae8:	9301      	str	r3, [sp, #4]
 8010aea:	9c01      	ldr	r4, [sp, #4]
 8010aec:	61ac      	str	r4, [r5, #24]
 8010aee:	1e63      	subs	r3, r4, #1
 8010af0:	419c      	sbcs	r4, r3
 8010af2:	3401      	adds	r4, #1
 8010af4:	612c      	str	r4, [r5, #16]
 8010af6:	2e00      	cmp	r6, #0
 8010af8:	d018      	beq.n	8010b2c <__d2b+0x90>
 8010afa:	4b17      	ldr	r3, [pc, #92]	; (8010b58 <__d2b+0xbc>)
 8010afc:	18f6      	adds	r6, r6, r3
 8010afe:	2335      	movs	r3, #53	; 0x35
 8010b00:	1836      	adds	r6, r6, r0
 8010b02:	1a18      	subs	r0, r3, r0
 8010b04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b06:	603e      	str	r6, [r7, #0]
 8010b08:	6018      	str	r0, [r3, #0]
 8010b0a:	0028      	movs	r0, r5
 8010b0c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010b0e:	2280      	movs	r2, #128	; 0x80
 8010b10:	0352      	lsls	r2, r2, #13
 8010b12:	4313      	orrs	r3, r2
 8010b14:	e7d6      	b.n	8010ac4 <__d2b+0x28>
 8010b16:	616c      	str	r4, [r5, #20]
 8010b18:	e7e7      	b.n	8010aea <__d2b+0x4e>
 8010b1a:	a801      	add	r0, sp, #4
 8010b1c:	f7ff fcd8 	bl	80104d0 <__lo0bits>
 8010b20:	2401      	movs	r4, #1
 8010b22:	9b01      	ldr	r3, [sp, #4]
 8010b24:	612c      	str	r4, [r5, #16]
 8010b26:	616b      	str	r3, [r5, #20]
 8010b28:	3020      	adds	r0, #32
 8010b2a:	e7e4      	b.n	8010af6 <__d2b+0x5a>
 8010b2c:	4b0b      	ldr	r3, [pc, #44]	; (8010b5c <__d2b+0xc0>)
 8010b2e:	18c0      	adds	r0, r0, r3
 8010b30:	4b0b      	ldr	r3, [pc, #44]	; (8010b60 <__d2b+0xc4>)
 8010b32:	6038      	str	r0, [r7, #0]
 8010b34:	18e3      	adds	r3, r4, r3
 8010b36:	009b      	lsls	r3, r3, #2
 8010b38:	18eb      	adds	r3, r5, r3
 8010b3a:	6958      	ldr	r0, [r3, #20]
 8010b3c:	f7ff fcae 	bl	801049c <__hi0bits>
 8010b40:	0164      	lsls	r4, r4, #5
 8010b42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b44:	1a24      	subs	r4, r4, r0
 8010b46:	601c      	str	r4, [r3, #0]
 8010b48:	e7df      	b.n	8010b0a <__d2b+0x6e>
 8010b4a:	46c0      	nop			; (mov r8, r8)
 8010b4c:	080135f9 	.word	0x080135f9
 8010b50:	0000030a 	.word	0x0000030a
 8010b54:	0801369b 	.word	0x0801369b
 8010b58:	fffffbcd 	.word	0xfffffbcd
 8010b5c:	fffffbce 	.word	0xfffffbce
 8010b60:	3fffffff 	.word	0x3fffffff

08010b64 <__ratio>:
 8010b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b66:	b087      	sub	sp, #28
 8010b68:	000f      	movs	r7, r1
 8010b6a:	a904      	add	r1, sp, #16
 8010b6c:	0006      	movs	r6, r0
 8010b6e:	f7ff ff45 	bl	80109fc <__b2d>
 8010b72:	9000      	str	r0, [sp, #0]
 8010b74:	9101      	str	r1, [sp, #4]
 8010b76:	9c00      	ldr	r4, [sp, #0]
 8010b78:	9d01      	ldr	r5, [sp, #4]
 8010b7a:	0038      	movs	r0, r7
 8010b7c:	a905      	add	r1, sp, #20
 8010b7e:	f7ff ff3d 	bl	80109fc <__b2d>
 8010b82:	9002      	str	r0, [sp, #8]
 8010b84:	9103      	str	r1, [sp, #12]
 8010b86:	9a02      	ldr	r2, [sp, #8]
 8010b88:	9b03      	ldr	r3, [sp, #12]
 8010b8a:	6931      	ldr	r1, [r6, #16]
 8010b8c:	6938      	ldr	r0, [r7, #16]
 8010b8e:	9e05      	ldr	r6, [sp, #20]
 8010b90:	1a08      	subs	r0, r1, r0
 8010b92:	9904      	ldr	r1, [sp, #16]
 8010b94:	0140      	lsls	r0, r0, #5
 8010b96:	1b89      	subs	r1, r1, r6
 8010b98:	1841      	adds	r1, r0, r1
 8010b9a:	0508      	lsls	r0, r1, #20
 8010b9c:	2900      	cmp	r1, #0
 8010b9e:	dd07      	ble.n	8010bb0 <__ratio+0x4c>
 8010ba0:	9901      	ldr	r1, [sp, #4]
 8010ba2:	1845      	adds	r5, r0, r1
 8010ba4:	0020      	movs	r0, r4
 8010ba6:	0029      	movs	r1, r5
 8010ba8:	f7f0 ff40 	bl	8001a2c <__aeabi_ddiv>
 8010bac:	b007      	add	sp, #28
 8010bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010bb0:	9903      	ldr	r1, [sp, #12]
 8010bb2:	1a0b      	subs	r3, r1, r0
 8010bb4:	e7f6      	b.n	8010ba4 <__ratio+0x40>
	...

08010bb8 <_mprec_log10>:
 8010bb8:	b510      	push	{r4, lr}
 8010bba:	0004      	movs	r4, r0
 8010bbc:	2817      	cmp	r0, #23
 8010bbe:	dc05      	bgt.n	8010bcc <_mprec_log10+0x14>
 8010bc0:	4c07      	ldr	r4, [pc, #28]	; (8010be0 <_mprec_log10+0x28>)
 8010bc2:	00c0      	lsls	r0, r0, #3
 8010bc4:	1824      	adds	r4, r4, r0
 8010bc6:	6820      	ldr	r0, [r4, #0]
 8010bc8:	6861      	ldr	r1, [r4, #4]
 8010bca:	bd10      	pop	{r4, pc}
 8010bcc:	2000      	movs	r0, #0
 8010bce:	4905      	ldr	r1, [pc, #20]	; (8010be4 <_mprec_log10+0x2c>)
 8010bd0:	2200      	movs	r2, #0
 8010bd2:	4b05      	ldr	r3, [pc, #20]	; (8010be8 <_mprec_log10+0x30>)
 8010bd4:	3c01      	subs	r4, #1
 8010bd6:	f7f1 fb2b 	bl	8002230 <__aeabi_dmul>
 8010bda:	2c00      	cmp	r4, #0
 8010bdc:	d1f8      	bne.n	8010bd0 <_mprec_log10+0x18>
 8010bde:	e7f4      	b.n	8010bca <_mprec_log10+0x12>
 8010be0:	08013720 	.word	0x08013720
 8010be4:	3ff00000 	.word	0x3ff00000
 8010be8:	40240000 	.word	0x40240000

08010bec <__copybits>:
 8010bec:	b570      	push	{r4, r5, r6, lr}
 8010bee:	0014      	movs	r4, r2
 8010bf0:	0005      	movs	r5, r0
 8010bf2:	3901      	subs	r1, #1
 8010bf4:	6913      	ldr	r3, [r2, #16]
 8010bf6:	1149      	asrs	r1, r1, #5
 8010bf8:	3101      	adds	r1, #1
 8010bfa:	0089      	lsls	r1, r1, #2
 8010bfc:	3414      	adds	r4, #20
 8010bfe:	009b      	lsls	r3, r3, #2
 8010c00:	1841      	adds	r1, r0, r1
 8010c02:	18e3      	adds	r3, r4, r3
 8010c04:	42a3      	cmp	r3, r4
 8010c06:	d80d      	bhi.n	8010c24 <__copybits+0x38>
 8010c08:	0014      	movs	r4, r2
 8010c0a:	3411      	adds	r4, #17
 8010c0c:	2500      	movs	r5, #0
 8010c0e:	429c      	cmp	r4, r3
 8010c10:	d803      	bhi.n	8010c1a <__copybits+0x2e>
 8010c12:	1a9b      	subs	r3, r3, r2
 8010c14:	3b11      	subs	r3, #17
 8010c16:	089b      	lsrs	r3, r3, #2
 8010c18:	009d      	lsls	r5, r3, #2
 8010c1a:	2300      	movs	r3, #0
 8010c1c:	1940      	adds	r0, r0, r5
 8010c1e:	4281      	cmp	r1, r0
 8010c20:	d803      	bhi.n	8010c2a <__copybits+0x3e>
 8010c22:	bd70      	pop	{r4, r5, r6, pc}
 8010c24:	cc40      	ldmia	r4!, {r6}
 8010c26:	c540      	stmia	r5!, {r6}
 8010c28:	e7ec      	b.n	8010c04 <__copybits+0x18>
 8010c2a:	c008      	stmia	r0!, {r3}
 8010c2c:	e7f7      	b.n	8010c1e <__copybits+0x32>

08010c2e <__any_on>:
 8010c2e:	0002      	movs	r2, r0
 8010c30:	6900      	ldr	r0, [r0, #16]
 8010c32:	b510      	push	{r4, lr}
 8010c34:	3214      	adds	r2, #20
 8010c36:	114b      	asrs	r3, r1, #5
 8010c38:	4298      	cmp	r0, r3
 8010c3a:	db13      	blt.n	8010c64 <__any_on+0x36>
 8010c3c:	dd0c      	ble.n	8010c58 <__any_on+0x2a>
 8010c3e:	241f      	movs	r4, #31
 8010c40:	0008      	movs	r0, r1
 8010c42:	4020      	ands	r0, r4
 8010c44:	4221      	tst	r1, r4
 8010c46:	d007      	beq.n	8010c58 <__any_on+0x2a>
 8010c48:	0099      	lsls	r1, r3, #2
 8010c4a:	588c      	ldr	r4, [r1, r2]
 8010c4c:	0021      	movs	r1, r4
 8010c4e:	40c1      	lsrs	r1, r0
 8010c50:	4081      	lsls	r1, r0
 8010c52:	2001      	movs	r0, #1
 8010c54:	428c      	cmp	r4, r1
 8010c56:	d104      	bne.n	8010c62 <__any_on+0x34>
 8010c58:	009b      	lsls	r3, r3, #2
 8010c5a:	18d3      	adds	r3, r2, r3
 8010c5c:	4293      	cmp	r3, r2
 8010c5e:	d803      	bhi.n	8010c68 <__any_on+0x3a>
 8010c60:	2000      	movs	r0, #0
 8010c62:	bd10      	pop	{r4, pc}
 8010c64:	0003      	movs	r3, r0
 8010c66:	e7f7      	b.n	8010c58 <__any_on+0x2a>
 8010c68:	3b04      	subs	r3, #4
 8010c6a:	6819      	ldr	r1, [r3, #0]
 8010c6c:	2900      	cmp	r1, #0
 8010c6e:	d0f5      	beq.n	8010c5c <__any_on+0x2e>
 8010c70:	2001      	movs	r0, #1
 8010c72:	e7f6      	b.n	8010c62 <__any_on+0x34>

08010c74 <_calloc_r>:
 8010c74:	b570      	push	{r4, r5, r6, lr}
 8010c76:	0c13      	lsrs	r3, r2, #16
 8010c78:	0c0d      	lsrs	r5, r1, #16
 8010c7a:	d11e      	bne.n	8010cba <_calloc_r+0x46>
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d10c      	bne.n	8010c9a <_calloc_r+0x26>
 8010c80:	b289      	uxth	r1, r1
 8010c82:	b294      	uxth	r4, r2
 8010c84:	434c      	muls	r4, r1
 8010c86:	0021      	movs	r1, r4
 8010c88:	f000 f842 	bl	8010d10 <_malloc_r>
 8010c8c:	1e05      	subs	r5, r0, #0
 8010c8e:	d01b      	beq.n	8010cc8 <_calloc_r+0x54>
 8010c90:	0022      	movs	r2, r4
 8010c92:	2100      	movs	r1, #0
 8010c94:	f7fd fea7 	bl	800e9e6 <memset>
 8010c98:	e016      	b.n	8010cc8 <_calloc_r+0x54>
 8010c9a:	1c1d      	adds	r5, r3, #0
 8010c9c:	1c0b      	adds	r3, r1, #0
 8010c9e:	b292      	uxth	r2, r2
 8010ca0:	b289      	uxth	r1, r1
 8010ca2:	b29c      	uxth	r4, r3
 8010ca4:	4351      	muls	r1, r2
 8010ca6:	b2ab      	uxth	r3, r5
 8010ca8:	4363      	muls	r3, r4
 8010caa:	0c0c      	lsrs	r4, r1, #16
 8010cac:	191c      	adds	r4, r3, r4
 8010cae:	0c22      	lsrs	r2, r4, #16
 8010cb0:	d107      	bne.n	8010cc2 <_calloc_r+0x4e>
 8010cb2:	0424      	lsls	r4, r4, #16
 8010cb4:	b289      	uxth	r1, r1
 8010cb6:	430c      	orrs	r4, r1
 8010cb8:	e7e5      	b.n	8010c86 <_calloc_r+0x12>
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d101      	bne.n	8010cc2 <_calloc_r+0x4e>
 8010cbe:	1c13      	adds	r3, r2, #0
 8010cc0:	e7ed      	b.n	8010c9e <_calloc_r+0x2a>
 8010cc2:	230c      	movs	r3, #12
 8010cc4:	2500      	movs	r5, #0
 8010cc6:	6003      	str	r3, [r0, #0]
 8010cc8:	0028      	movs	r0, r5
 8010cca:	bd70      	pop	{r4, r5, r6, pc}

08010ccc <sbrk_aligned>:
 8010ccc:	b570      	push	{r4, r5, r6, lr}
 8010cce:	4e0f      	ldr	r6, [pc, #60]	; (8010d0c <sbrk_aligned+0x40>)
 8010cd0:	000d      	movs	r5, r1
 8010cd2:	6831      	ldr	r1, [r6, #0]
 8010cd4:	0004      	movs	r4, r0
 8010cd6:	2900      	cmp	r1, #0
 8010cd8:	d102      	bne.n	8010ce0 <sbrk_aligned+0x14>
 8010cda:	f000 fba9 	bl	8011430 <_sbrk_r>
 8010cde:	6030      	str	r0, [r6, #0]
 8010ce0:	0029      	movs	r1, r5
 8010ce2:	0020      	movs	r0, r4
 8010ce4:	f000 fba4 	bl	8011430 <_sbrk_r>
 8010ce8:	1c43      	adds	r3, r0, #1
 8010cea:	d00a      	beq.n	8010d02 <sbrk_aligned+0x36>
 8010cec:	2303      	movs	r3, #3
 8010cee:	1cc5      	adds	r5, r0, #3
 8010cf0:	439d      	bics	r5, r3
 8010cf2:	42a8      	cmp	r0, r5
 8010cf4:	d007      	beq.n	8010d06 <sbrk_aligned+0x3a>
 8010cf6:	1a29      	subs	r1, r5, r0
 8010cf8:	0020      	movs	r0, r4
 8010cfa:	f000 fb99 	bl	8011430 <_sbrk_r>
 8010cfe:	1c43      	adds	r3, r0, #1
 8010d00:	d101      	bne.n	8010d06 <sbrk_aligned+0x3a>
 8010d02:	2501      	movs	r5, #1
 8010d04:	426d      	negs	r5, r5
 8010d06:	0028      	movs	r0, r5
 8010d08:	bd70      	pop	{r4, r5, r6, pc}
 8010d0a:	46c0      	nop			; (mov r8, r8)
 8010d0c:	20000d1c 	.word	0x20000d1c

08010d10 <_malloc_r>:
 8010d10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010d12:	2203      	movs	r2, #3
 8010d14:	1ccb      	adds	r3, r1, #3
 8010d16:	4393      	bics	r3, r2
 8010d18:	3308      	adds	r3, #8
 8010d1a:	0006      	movs	r6, r0
 8010d1c:	001f      	movs	r7, r3
 8010d1e:	2b0c      	cmp	r3, #12
 8010d20:	d232      	bcs.n	8010d88 <_malloc_r+0x78>
 8010d22:	270c      	movs	r7, #12
 8010d24:	42b9      	cmp	r1, r7
 8010d26:	d831      	bhi.n	8010d8c <_malloc_r+0x7c>
 8010d28:	0030      	movs	r0, r6
 8010d2a:	f001 fabb 	bl	80122a4 <__malloc_lock>
 8010d2e:	4d32      	ldr	r5, [pc, #200]	; (8010df8 <_malloc_r+0xe8>)
 8010d30:	682b      	ldr	r3, [r5, #0]
 8010d32:	001c      	movs	r4, r3
 8010d34:	2c00      	cmp	r4, #0
 8010d36:	d12e      	bne.n	8010d96 <_malloc_r+0x86>
 8010d38:	0039      	movs	r1, r7
 8010d3a:	0030      	movs	r0, r6
 8010d3c:	f7ff ffc6 	bl	8010ccc <sbrk_aligned>
 8010d40:	0004      	movs	r4, r0
 8010d42:	1c43      	adds	r3, r0, #1
 8010d44:	d11e      	bne.n	8010d84 <_malloc_r+0x74>
 8010d46:	682c      	ldr	r4, [r5, #0]
 8010d48:	0025      	movs	r5, r4
 8010d4a:	2d00      	cmp	r5, #0
 8010d4c:	d14a      	bne.n	8010de4 <_malloc_r+0xd4>
 8010d4e:	6823      	ldr	r3, [r4, #0]
 8010d50:	0029      	movs	r1, r5
 8010d52:	18e3      	adds	r3, r4, r3
 8010d54:	0030      	movs	r0, r6
 8010d56:	9301      	str	r3, [sp, #4]
 8010d58:	f000 fb6a 	bl	8011430 <_sbrk_r>
 8010d5c:	9b01      	ldr	r3, [sp, #4]
 8010d5e:	4283      	cmp	r3, r0
 8010d60:	d143      	bne.n	8010dea <_malloc_r+0xda>
 8010d62:	6823      	ldr	r3, [r4, #0]
 8010d64:	3703      	adds	r7, #3
 8010d66:	1aff      	subs	r7, r7, r3
 8010d68:	2303      	movs	r3, #3
 8010d6a:	439f      	bics	r7, r3
 8010d6c:	3708      	adds	r7, #8
 8010d6e:	2f0c      	cmp	r7, #12
 8010d70:	d200      	bcs.n	8010d74 <_malloc_r+0x64>
 8010d72:	270c      	movs	r7, #12
 8010d74:	0039      	movs	r1, r7
 8010d76:	0030      	movs	r0, r6
 8010d78:	f7ff ffa8 	bl	8010ccc <sbrk_aligned>
 8010d7c:	1c43      	adds	r3, r0, #1
 8010d7e:	d034      	beq.n	8010dea <_malloc_r+0xda>
 8010d80:	6823      	ldr	r3, [r4, #0]
 8010d82:	19df      	adds	r7, r3, r7
 8010d84:	6027      	str	r7, [r4, #0]
 8010d86:	e013      	b.n	8010db0 <_malloc_r+0xa0>
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	dacb      	bge.n	8010d24 <_malloc_r+0x14>
 8010d8c:	230c      	movs	r3, #12
 8010d8e:	2500      	movs	r5, #0
 8010d90:	6033      	str	r3, [r6, #0]
 8010d92:	0028      	movs	r0, r5
 8010d94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010d96:	6822      	ldr	r2, [r4, #0]
 8010d98:	1bd1      	subs	r1, r2, r7
 8010d9a:	d420      	bmi.n	8010dde <_malloc_r+0xce>
 8010d9c:	290b      	cmp	r1, #11
 8010d9e:	d917      	bls.n	8010dd0 <_malloc_r+0xc0>
 8010da0:	19e2      	adds	r2, r4, r7
 8010da2:	6027      	str	r7, [r4, #0]
 8010da4:	42a3      	cmp	r3, r4
 8010da6:	d111      	bne.n	8010dcc <_malloc_r+0xbc>
 8010da8:	602a      	str	r2, [r5, #0]
 8010daa:	6863      	ldr	r3, [r4, #4]
 8010dac:	6011      	str	r1, [r2, #0]
 8010dae:	6053      	str	r3, [r2, #4]
 8010db0:	0030      	movs	r0, r6
 8010db2:	0025      	movs	r5, r4
 8010db4:	f001 fa7e 	bl	80122b4 <__malloc_unlock>
 8010db8:	2207      	movs	r2, #7
 8010dba:	350b      	adds	r5, #11
 8010dbc:	1d23      	adds	r3, r4, #4
 8010dbe:	4395      	bics	r5, r2
 8010dc0:	1aea      	subs	r2, r5, r3
 8010dc2:	429d      	cmp	r5, r3
 8010dc4:	d0e5      	beq.n	8010d92 <_malloc_r+0x82>
 8010dc6:	1b5b      	subs	r3, r3, r5
 8010dc8:	50a3      	str	r3, [r4, r2]
 8010dca:	e7e2      	b.n	8010d92 <_malloc_r+0x82>
 8010dcc:	605a      	str	r2, [r3, #4]
 8010dce:	e7ec      	b.n	8010daa <_malloc_r+0x9a>
 8010dd0:	6862      	ldr	r2, [r4, #4]
 8010dd2:	42a3      	cmp	r3, r4
 8010dd4:	d101      	bne.n	8010dda <_malloc_r+0xca>
 8010dd6:	602a      	str	r2, [r5, #0]
 8010dd8:	e7ea      	b.n	8010db0 <_malloc_r+0xa0>
 8010dda:	605a      	str	r2, [r3, #4]
 8010ddc:	e7e8      	b.n	8010db0 <_malloc_r+0xa0>
 8010dde:	0023      	movs	r3, r4
 8010de0:	6864      	ldr	r4, [r4, #4]
 8010de2:	e7a7      	b.n	8010d34 <_malloc_r+0x24>
 8010de4:	002c      	movs	r4, r5
 8010de6:	686d      	ldr	r5, [r5, #4]
 8010de8:	e7af      	b.n	8010d4a <_malloc_r+0x3a>
 8010dea:	230c      	movs	r3, #12
 8010dec:	0030      	movs	r0, r6
 8010dee:	6033      	str	r3, [r6, #0]
 8010df0:	f001 fa60 	bl	80122b4 <__malloc_unlock>
 8010df4:	e7cd      	b.n	8010d92 <_malloc_r+0x82>
 8010df6:	46c0      	nop			; (mov r8, r8)
 8010df8:	20000d18 	.word	0x20000d18

08010dfc <_realloc_r>:
 8010dfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010dfe:	0007      	movs	r7, r0
 8010e00:	000e      	movs	r6, r1
 8010e02:	0014      	movs	r4, r2
 8010e04:	2900      	cmp	r1, #0
 8010e06:	d105      	bne.n	8010e14 <_realloc_r+0x18>
 8010e08:	0011      	movs	r1, r2
 8010e0a:	f7ff ff81 	bl	8010d10 <_malloc_r>
 8010e0e:	0005      	movs	r5, r0
 8010e10:	0028      	movs	r0, r5
 8010e12:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010e14:	2a00      	cmp	r2, #0
 8010e16:	d103      	bne.n	8010e20 <_realloc_r+0x24>
 8010e18:	f001 fa54 	bl	80122c4 <_free_r>
 8010e1c:	0025      	movs	r5, r4
 8010e1e:	e7f7      	b.n	8010e10 <_realloc_r+0x14>
 8010e20:	f001 fa9a 	bl	8012358 <_malloc_usable_size_r>
 8010e24:	9001      	str	r0, [sp, #4]
 8010e26:	4284      	cmp	r4, r0
 8010e28:	d803      	bhi.n	8010e32 <_realloc_r+0x36>
 8010e2a:	0035      	movs	r5, r6
 8010e2c:	0843      	lsrs	r3, r0, #1
 8010e2e:	42a3      	cmp	r3, r4
 8010e30:	d3ee      	bcc.n	8010e10 <_realloc_r+0x14>
 8010e32:	0021      	movs	r1, r4
 8010e34:	0038      	movs	r0, r7
 8010e36:	f7ff ff6b 	bl	8010d10 <_malloc_r>
 8010e3a:	1e05      	subs	r5, r0, #0
 8010e3c:	d0e8      	beq.n	8010e10 <_realloc_r+0x14>
 8010e3e:	9b01      	ldr	r3, [sp, #4]
 8010e40:	0022      	movs	r2, r4
 8010e42:	429c      	cmp	r4, r3
 8010e44:	d900      	bls.n	8010e48 <_realloc_r+0x4c>
 8010e46:	001a      	movs	r2, r3
 8010e48:	0031      	movs	r1, r6
 8010e4a:	0028      	movs	r0, r5
 8010e4c:	f7fd fdc2 	bl	800e9d4 <memcpy>
 8010e50:	0031      	movs	r1, r6
 8010e52:	0038      	movs	r0, r7
 8010e54:	f001 fa36 	bl	80122c4 <_free_r>
 8010e58:	e7da      	b.n	8010e10 <_realloc_r+0x14>
	...

08010e5c <__ssputs_r>:
 8010e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e5e:	688e      	ldr	r6, [r1, #8]
 8010e60:	b085      	sub	sp, #20
 8010e62:	0007      	movs	r7, r0
 8010e64:	000c      	movs	r4, r1
 8010e66:	9203      	str	r2, [sp, #12]
 8010e68:	9301      	str	r3, [sp, #4]
 8010e6a:	429e      	cmp	r6, r3
 8010e6c:	d83c      	bhi.n	8010ee8 <__ssputs_r+0x8c>
 8010e6e:	2390      	movs	r3, #144	; 0x90
 8010e70:	898a      	ldrh	r2, [r1, #12]
 8010e72:	00db      	lsls	r3, r3, #3
 8010e74:	421a      	tst	r2, r3
 8010e76:	d034      	beq.n	8010ee2 <__ssputs_r+0x86>
 8010e78:	6909      	ldr	r1, [r1, #16]
 8010e7a:	6823      	ldr	r3, [r4, #0]
 8010e7c:	6960      	ldr	r0, [r4, #20]
 8010e7e:	1a5b      	subs	r3, r3, r1
 8010e80:	9302      	str	r3, [sp, #8]
 8010e82:	2303      	movs	r3, #3
 8010e84:	4343      	muls	r3, r0
 8010e86:	0fdd      	lsrs	r5, r3, #31
 8010e88:	18ed      	adds	r5, r5, r3
 8010e8a:	9b01      	ldr	r3, [sp, #4]
 8010e8c:	9802      	ldr	r0, [sp, #8]
 8010e8e:	3301      	adds	r3, #1
 8010e90:	181b      	adds	r3, r3, r0
 8010e92:	106d      	asrs	r5, r5, #1
 8010e94:	42ab      	cmp	r3, r5
 8010e96:	d900      	bls.n	8010e9a <__ssputs_r+0x3e>
 8010e98:	001d      	movs	r5, r3
 8010e9a:	0553      	lsls	r3, r2, #21
 8010e9c:	d532      	bpl.n	8010f04 <__ssputs_r+0xa8>
 8010e9e:	0029      	movs	r1, r5
 8010ea0:	0038      	movs	r0, r7
 8010ea2:	f7ff ff35 	bl	8010d10 <_malloc_r>
 8010ea6:	1e06      	subs	r6, r0, #0
 8010ea8:	d109      	bne.n	8010ebe <__ssputs_r+0x62>
 8010eaa:	230c      	movs	r3, #12
 8010eac:	603b      	str	r3, [r7, #0]
 8010eae:	2340      	movs	r3, #64	; 0x40
 8010eb0:	2001      	movs	r0, #1
 8010eb2:	89a2      	ldrh	r2, [r4, #12]
 8010eb4:	4240      	negs	r0, r0
 8010eb6:	4313      	orrs	r3, r2
 8010eb8:	81a3      	strh	r3, [r4, #12]
 8010eba:	b005      	add	sp, #20
 8010ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ebe:	9a02      	ldr	r2, [sp, #8]
 8010ec0:	6921      	ldr	r1, [r4, #16]
 8010ec2:	f7fd fd87 	bl	800e9d4 <memcpy>
 8010ec6:	89a3      	ldrh	r3, [r4, #12]
 8010ec8:	4a14      	ldr	r2, [pc, #80]	; (8010f1c <__ssputs_r+0xc0>)
 8010eca:	401a      	ands	r2, r3
 8010ecc:	2380      	movs	r3, #128	; 0x80
 8010ece:	4313      	orrs	r3, r2
 8010ed0:	81a3      	strh	r3, [r4, #12]
 8010ed2:	9b02      	ldr	r3, [sp, #8]
 8010ed4:	6126      	str	r6, [r4, #16]
 8010ed6:	18f6      	adds	r6, r6, r3
 8010ed8:	6026      	str	r6, [r4, #0]
 8010eda:	6165      	str	r5, [r4, #20]
 8010edc:	9e01      	ldr	r6, [sp, #4]
 8010ede:	1aed      	subs	r5, r5, r3
 8010ee0:	60a5      	str	r5, [r4, #8]
 8010ee2:	9b01      	ldr	r3, [sp, #4]
 8010ee4:	429e      	cmp	r6, r3
 8010ee6:	d900      	bls.n	8010eea <__ssputs_r+0x8e>
 8010ee8:	9e01      	ldr	r6, [sp, #4]
 8010eea:	0032      	movs	r2, r6
 8010eec:	9903      	ldr	r1, [sp, #12]
 8010eee:	6820      	ldr	r0, [r4, #0]
 8010ef0:	f001 f9c5 	bl	801227e <memmove>
 8010ef4:	68a3      	ldr	r3, [r4, #8]
 8010ef6:	2000      	movs	r0, #0
 8010ef8:	1b9b      	subs	r3, r3, r6
 8010efa:	60a3      	str	r3, [r4, #8]
 8010efc:	6823      	ldr	r3, [r4, #0]
 8010efe:	199e      	adds	r6, r3, r6
 8010f00:	6026      	str	r6, [r4, #0]
 8010f02:	e7da      	b.n	8010eba <__ssputs_r+0x5e>
 8010f04:	002a      	movs	r2, r5
 8010f06:	0038      	movs	r0, r7
 8010f08:	f7ff ff78 	bl	8010dfc <_realloc_r>
 8010f0c:	1e06      	subs	r6, r0, #0
 8010f0e:	d1e0      	bne.n	8010ed2 <__ssputs_r+0x76>
 8010f10:	0038      	movs	r0, r7
 8010f12:	6921      	ldr	r1, [r4, #16]
 8010f14:	f001 f9d6 	bl	80122c4 <_free_r>
 8010f18:	e7c7      	b.n	8010eaa <__ssputs_r+0x4e>
 8010f1a:	46c0      	nop			; (mov r8, r8)
 8010f1c:	fffffb7f 	.word	0xfffffb7f

08010f20 <_svfiprintf_r>:
 8010f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f22:	b0a1      	sub	sp, #132	; 0x84
 8010f24:	9003      	str	r0, [sp, #12]
 8010f26:	001d      	movs	r5, r3
 8010f28:	898b      	ldrh	r3, [r1, #12]
 8010f2a:	000f      	movs	r7, r1
 8010f2c:	0016      	movs	r6, r2
 8010f2e:	061b      	lsls	r3, r3, #24
 8010f30:	d511      	bpl.n	8010f56 <_svfiprintf_r+0x36>
 8010f32:	690b      	ldr	r3, [r1, #16]
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d10e      	bne.n	8010f56 <_svfiprintf_r+0x36>
 8010f38:	2140      	movs	r1, #64	; 0x40
 8010f3a:	f7ff fee9 	bl	8010d10 <_malloc_r>
 8010f3e:	6038      	str	r0, [r7, #0]
 8010f40:	6138      	str	r0, [r7, #16]
 8010f42:	2800      	cmp	r0, #0
 8010f44:	d105      	bne.n	8010f52 <_svfiprintf_r+0x32>
 8010f46:	230c      	movs	r3, #12
 8010f48:	9a03      	ldr	r2, [sp, #12]
 8010f4a:	3801      	subs	r0, #1
 8010f4c:	6013      	str	r3, [r2, #0]
 8010f4e:	b021      	add	sp, #132	; 0x84
 8010f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f52:	2340      	movs	r3, #64	; 0x40
 8010f54:	617b      	str	r3, [r7, #20]
 8010f56:	2300      	movs	r3, #0
 8010f58:	ac08      	add	r4, sp, #32
 8010f5a:	6163      	str	r3, [r4, #20]
 8010f5c:	3320      	adds	r3, #32
 8010f5e:	7663      	strb	r3, [r4, #25]
 8010f60:	3310      	adds	r3, #16
 8010f62:	76a3      	strb	r3, [r4, #26]
 8010f64:	9507      	str	r5, [sp, #28]
 8010f66:	0035      	movs	r5, r6
 8010f68:	782b      	ldrb	r3, [r5, #0]
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d001      	beq.n	8010f72 <_svfiprintf_r+0x52>
 8010f6e:	2b25      	cmp	r3, #37	; 0x25
 8010f70:	d147      	bne.n	8011002 <_svfiprintf_r+0xe2>
 8010f72:	1bab      	subs	r3, r5, r6
 8010f74:	9305      	str	r3, [sp, #20]
 8010f76:	42b5      	cmp	r5, r6
 8010f78:	d00c      	beq.n	8010f94 <_svfiprintf_r+0x74>
 8010f7a:	0032      	movs	r2, r6
 8010f7c:	0039      	movs	r1, r7
 8010f7e:	9803      	ldr	r0, [sp, #12]
 8010f80:	f7ff ff6c 	bl	8010e5c <__ssputs_r>
 8010f84:	1c43      	adds	r3, r0, #1
 8010f86:	d100      	bne.n	8010f8a <_svfiprintf_r+0x6a>
 8010f88:	e0ae      	b.n	80110e8 <_svfiprintf_r+0x1c8>
 8010f8a:	6962      	ldr	r2, [r4, #20]
 8010f8c:	9b05      	ldr	r3, [sp, #20]
 8010f8e:	4694      	mov	ip, r2
 8010f90:	4463      	add	r3, ip
 8010f92:	6163      	str	r3, [r4, #20]
 8010f94:	782b      	ldrb	r3, [r5, #0]
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d100      	bne.n	8010f9c <_svfiprintf_r+0x7c>
 8010f9a:	e0a5      	b.n	80110e8 <_svfiprintf_r+0x1c8>
 8010f9c:	2201      	movs	r2, #1
 8010f9e:	2300      	movs	r3, #0
 8010fa0:	4252      	negs	r2, r2
 8010fa2:	6062      	str	r2, [r4, #4]
 8010fa4:	a904      	add	r1, sp, #16
 8010fa6:	3254      	adds	r2, #84	; 0x54
 8010fa8:	1852      	adds	r2, r2, r1
 8010faa:	1c6e      	adds	r6, r5, #1
 8010fac:	6023      	str	r3, [r4, #0]
 8010fae:	60e3      	str	r3, [r4, #12]
 8010fb0:	60a3      	str	r3, [r4, #8]
 8010fb2:	7013      	strb	r3, [r2, #0]
 8010fb4:	65a3      	str	r3, [r4, #88]	; 0x58
 8010fb6:	2205      	movs	r2, #5
 8010fb8:	7831      	ldrb	r1, [r6, #0]
 8010fba:	4854      	ldr	r0, [pc, #336]	; (801110c <_svfiprintf_r+0x1ec>)
 8010fbc:	f001 f954 	bl	8012268 <memchr>
 8010fc0:	1c75      	adds	r5, r6, #1
 8010fc2:	2800      	cmp	r0, #0
 8010fc4:	d11f      	bne.n	8011006 <_svfiprintf_r+0xe6>
 8010fc6:	6822      	ldr	r2, [r4, #0]
 8010fc8:	06d3      	lsls	r3, r2, #27
 8010fca:	d504      	bpl.n	8010fd6 <_svfiprintf_r+0xb6>
 8010fcc:	2353      	movs	r3, #83	; 0x53
 8010fce:	a904      	add	r1, sp, #16
 8010fd0:	185b      	adds	r3, r3, r1
 8010fd2:	2120      	movs	r1, #32
 8010fd4:	7019      	strb	r1, [r3, #0]
 8010fd6:	0713      	lsls	r3, r2, #28
 8010fd8:	d504      	bpl.n	8010fe4 <_svfiprintf_r+0xc4>
 8010fda:	2353      	movs	r3, #83	; 0x53
 8010fdc:	a904      	add	r1, sp, #16
 8010fde:	185b      	adds	r3, r3, r1
 8010fe0:	212b      	movs	r1, #43	; 0x2b
 8010fe2:	7019      	strb	r1, [r3, #0]
 8010fe4:	7833      	ldrb	r3, [r6, #0]
 8010fe6:	2b2a      	cmp	r3, #42	; 0x2a
 8010fe8:	d016      	beq.n	8011018 <_svfiprintf_r+0xf8>
 8010fea:	0035      	movs	r5, r6
 8010fec:	2100      	movs	r1, #0
 8010fee:	200a      	movs	r0, #10
 8010ff0:	68e3      	ldr	r3, [r4, #12]
 8010ff2:	782a      	ldrb	r2, [r5, #0]
 8010ff4:	1c6e      	adds	r6, r5, #1
 8010ff6:	3a30      	subs	r2, #48	; 0x30
 8010ff8:	2a09      	cmp	r2, #9
 8010ffa:	d94e      	bls.n	801109a <_svfiprintf_r+0x17a>
 8010ffc:	2900      	cmp	r1, #0
 8010ffe:	d111      	bne.n	8011024 <_svfiprintf_r+0x104>
 8011000:	e017      	b.n	8011032 <_svfiprintf_r+0x112>
 8011002:	3501      	adds	r5, #1
 8011004:	e7b0      	b.n	8010f68 <_svfiprintf_r+0x48>
 8011006:	4b41      	ldr	r3, [pc, #260]	; (801110c <_svfiprintf_r+0x1ec>)
 8011008:	6822      	ldr	r2, [r4, #0]
 801100a:	1ac0      	subs	r0, r0, r3
 801100c:	2301      	movs	r3, #1
 801100e:	4083      	lsls	r3, r0
 8011010:	4313      	orrs	r3, r2
 8011012:	002e      	movs	r6, r5
 8011014:	6023      	str	r3, [r4, #0]
 8011016:	e7ce      	b.n	8010fb6 <_svfiprintf_r+0x96>
 8011018:	9b07      	ldr	r3, [sp, #28]
 801101a:	1d19      	adds	r1, r3, #4
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	9107      	str	r1, [sp, #28]
 8011020:	2b00      	cmp	r3, #0
 8011022:	db01      	blt.n	8011028 <_svfiprintf_r+0x108>
 8011024:	930b      	str	r3, [sp, #44]	; 0x2c
 8011026:	e004      	b.n	8011032 <_svfiprintf_r+0x112>
 8011028:	425b      	negs	r3, r3
 801102a:	60e3      	str	r3, [r4, #12]
 801102c:	2302      	movs	r3, #2
 801102e:	4313      	orrs	r3, r2
 8011030:	6023      	str	r3, [r4, #0]
 8011032:	782b      	ldrb	r3, [r5, #0]
 8011034:	2b2e      	cmp	r3, #46	; 0x2e
 8011036:	d10a      	bne.n	801104e <_svfiprintf_r+0x12e>
 8011038:	786b      	ldrb	r3, [r5, #1]
 801103a:	2b2a      	cmp	r3, #42	; 0x2a
 801103c:	d135      	bne.n	80110aa <_svfiprintf_r+0x18a>
 801103e:	9b07      	ldr	r3, [sp, #28]
 8011040:	3502      	adds	r5, #2
 8011042:	1d1a      	adds	r2, r3, #4
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	9207      	str	r2, [sp, #28]
 8011048:	2b00      	cmp	r3, #0
 801104a:	db2b      	blt.n	80110a4 <_svfiprintf_r+0x184>
 801104c:	9309      	str	r3, [sp, #36]	; 0x24
 801104e:	4e30      	ldr	r6, [pc, #192]	; (8011110 <_svfiprintf_r+0x1f0>)
 8011050:	2203      	movs	r2, #3
 8011052:	0030      	movs	r0, r6
 8011054:	7829      	ldrb	r1, [r5, #0]
 8011056:	f001 f907 	bl	8012268 <memchr>
 801105a:	2800      	cmp	r0, #0
 801105c:	d006      	beq.n	801106c <_svfiprintf_r+0x14c>
 801105e:	2340      	movs	r3, #64	; 0x40
 8011060:	1b80      	subs	r0, r0, r6
 8011062:	4083      	lsls	r3, r0
 8011064:	6822      	ldr	r2, [r4, #0]
 8011066:	3501      	adds	r5, #1
 8011068:	4313      	orrs	r3, r2
 801106a:	6023      	str	r3, [r4, #0]
 801106c:	7829      	ldrb	r1, [r5, #0]
 801106e:	2206      	movs	r2, #6
 8011070:	4828      	ldr	r0, [pc, #160]	; (8011114 <_svfiprintf_r+0x1f4>)
 8011072:	1c6e      	adds	r6, r5, #1
 8011074:	7621      	strb	r1, [r4, #24]
 8011076:	f001 f8f7 	bl	8012268 <memchr>
 801107a:	2800      	cmp	r0, #0
 801107c:	d03c      	beq.n	80110f8 <_svfiprintf_r+0x1d8>
 801107e:	4b26      	ldr	r3, [pc, #152]	; (8011118 <_svfiprintf_r+0x1f8>)
 8011080:	2b00      	cmp	r3, #0
 8011082:	d125      	bne.n	80110d0 <_svfiprintf_r+0x1b0>
 8011084:	2207      	movs	r2, #7
 8011086:	9b07      	ldr	r3, [sp, #28]
 8011088:	3307      	adds	r3, #7
 801108a:	4393      	bics	r3, r2
 801108c:	3308      	adds	r3, #8
 801108e:	9307      	str	r3, [sp, #28]
 8011090:	6963      	ldr	r3, [r4, #20]
 8011092:	9a04      	ldr	r2, [sp, #16]
 8011094:	189b      	adds	r3, r3, r2
 8011096:	6163      	str	r3, [r4, #20]
 8011098:	e765      	b.n	8010f66 <_svfiprintf_r+0x46>
 801109a:	4343      	muls	r3, r0
 801109c:	0035      	movs	r5, r6
 801109e:	2101      	movs	r1, #1
 80110a0:	189b      	adds	r3, r3, r2
 80110a2:	e7a6      	b.n	8010ff2 <_svfiprintf_r+0xd2>
 80110a4:	2301      	movs	r3, #1
 80110a6:	425b      	negs	r3, r3
 80110a8:	e7d0      	b.n	801104c <_svfiprintf_r+0x12c>
 80110aa:	2300      	movs	r3, #0
 80110ac:	200a      	movs	r0, #10
 80110ae:	001a      	movs	r2, r3
 80110b0:	3501      	adds	r5, #1
 80110b2:	6063      	str	r3, [r4, #4]
 80110b4:	7829      	ldrb	r1, [r5, #0]
 80110b6:	1c6e      	adds	r6, r5, #1
 80110b8:	3930      	subs	r1, #48	; 0x30
 80110ba:	2909      	cmp	r1, #9
 80110bc:	d903      	bls.n	80110c6 <_svfiprintf_r+0x1a6>
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d0c5      	beq.n	801104e <_svfiprintf_r+0x12e>
 80110c2:	9209      	str	r2, [sp, #36]	; 0x24
 80110c4:	e7c3      	b.n	801104e <_svfiprintf_r+0x12e>
 80110c6:	4342      	muls	r2, r0
 80110c8:	0035      	movs	r5, r6
 80110ca:	2301      	movs	r3, #1
 80110cc:	1852      	adds	r2, r2, r1
 80110ce:	e7f1      	b.n	80110b4 <_svfiprintf_r+0x194>
 80110d0:	ab07      	add	r3, sp, #28
 80110d2:	9300      	str	r3, [sp, #0]
 80110d4:	003a      	movs	r2, r7
 80110d6:	0021      	movs	r1, r4
 80110d8:	4b10      	ldr	r3, [pc, #64]	; (801111c <_svfiprintf_r+0x1fc>)
 80110da:	9803      	ldr	r0, [sp, #12]
 80110dc:	e000      	b.n	80110e0 <_svfiprintf_r+0x1c0>
 80110de:	bf00      	nop
 80110e0:	9004      	str	r0, [sp, #16]
 80110e2:	9b04      	ldr	r3, [sp, #16]
 80110e4:	3301      	adds	r3, #1
 80110e6:	d1d3      	bne.n	8011090 <_svfiprintf_r+0x170>
 80110e8:	89bb      	ldrh	r3, [r7, #12]
 80110ea:	980d      	ldr	r0, [sp, #52]	; 0x34
 80110ec:	065b      	lsls	r3, r3, #25
 80110ee:	d400      	bmi.n	80110f2 <_svfiprintf_r+0x1d2>
 80110f0:	e72d      	b.n	8010f4e <_svfiprintf_r+0x2e>
 80110f2:	2001      	movs	r0, #1
 80110f4:	4240      	negs	r0, r0
 80110f6:	e72a      	b.n	8010f4e <_svfiprintf_r+0x2e>
 80110f8:	ab07      	add	r3, sp, #28
 80110fa:	9300      	str	r3, [sp, #0]
 80110fc:	003a      	movs	r2, r7
 80110fe:	0021      	movs	r1, r4
 8011100:	4b06      	ldr	r3, [pc, #24]	; (801111c <_svfiprintf_r+0x1fc>)
 8011102:	9803      	ldr	r0, [sp, #12]
 8011104:	f000 f87c 	bl	8011200 <_printf_i>
 8011108:	e7ea      	b.n	80110e0 <_svfiprintf_r+0x1c0>
 801110a:	46c0      	nop			; (mov r8, r8)
 801110c:	080137f4 	.word	0x080137f4
 8011110:	080137fa 	.word	0x080137fa
 8011114:	080137fe 	.word	0x080137fe
 8011118:	00000000 	.word	0x00000000
 801111c:	08010e5d 	.word	0x08010e5d

08011120 <_printf_common>:
 8011120:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011122:	0015      	movs	r5, r2
 8011124:	9301      	str	r3, [sp, #4]
 8011126:	688a      	ldr	r2, [r1, #8]
 8011128:	690b      	ldr	r3, [r1, #16]
 801112a:	000c      	movs	r4, r1
 801112c:	9000      	str	r0, [sp, #0]
 801112e:	4293      	cmp	r3, r2
 8011130:	da00      	bge.n	8011134 <_printf_common+0x14>
 8011132:	0013      	movs	r3, r2
 8011134:	0022      	movs	r2, r4
 8011136:	602b      	str	r3, [r5, #0]
 8011138:	3243      	adds	r2, #67	; 0x43
 801113a:	7812      	ldrb	r2, [r2, #0]
 801113c:	2a00      	cmp	r2, #0
 801113e:	d001      	beq.n	8011144 <_printf_common+0x24>
 8011140:	3301      	adds	r3, #1
 8011142:	602b      	str	r3, [r5, #0]
 8011144:	6823      	ldr	r3, [r4, #0]
 8011146:	069b      	lsls	r3, r3, #26
 8011148:	d502      	bpl.n	8011150 <_printf_common+0x30>
 801114a:	682b      	ldr	r3, [r5, #0]
 801114c:	3302      	adds	r3, #2
 801114e:	602b      	str	r3, [r5, #0]
 8011150:	6822      	ldr	r2, [r4, #0]
 8011152:	2306      	movs	r3, #6
 8011154:	0017      	movs	r7, r2
 8011156:	401f      	ands	r7, r3
 8011158:	421a      	tst	r2, r3
 801115a:	d027      	beq.n	80111ac <_printf_common+0x8c>
 801115c:	0023      	movs	r3, r4
 801115e:	3343      	adds	r3, #67	; 0x43
 8011160:	781b      	ldrb	r3, [r3, #0]
 8011162:	1e5a      	subs	r2, r3, #1
 8011164:	4193      	sbcs	r3, r2
 8011166:	6822      	ldr	r2, [r4, #0]
 8011168:	0692      	lsls	r2, r2, #26
 801116a:	d430      	bmi.n	80111ce <_printf_common+0xae>
 801116c:	0022      	movs	r2, r4
 801116e:	9901      	ldr	r1, [sp, #4]
 8011170:	9800      	ldr	r0, [sp, #0]
 8011172:	9e08      	ldr	r6, [sp, #32]
 8011174:	3243      	adds	r2, #67	; 0x43
 8011176:	47b0      	blx	r6
 8011178:	1c43      	adds	r3, r0, #1
 801117a:	d025      	beq.n	80111c8 <_printf_common+0xa8>
 801117c:	2306      	movs	r3, #6
 801117e:	6820      	ldr	r0, [r4, #0]
 8011180:	682a      	ldr	r2, [r5, #0]
 8011182:	68e1      	ldr	r1, [r4, #12]
 8011184:	2500      	movs	r5, #0
 8011186:	4003      	ands	r3, r0
 8011188:	2b04      	cmp	r3, #4
 801118a:	d103      	bne.n	8011194 <_printf_common+0x74>
 801118c:	1a8d      	subs	r5, r1, r2
 801118e:	43eb      	mvns	r3, r5
 8011190:	17db      	asrs	r3, r3, #31
 8011192:	401d      	ands	r5, r3
 8011194:	68a3      	ldr	r3, [r4, #8]
 8011196:	6922      	ldr	r2, [r4, #16]
 8011198:	4293      	cmp	r3, r2
 801119a:	dd01      	ble.n	80111a0 <_printf_common+0x80>
 801119c:	1a9b      	subs	r3, r3, r2
 801119e:	18ed      	adds	r5, r5, r3
 80111a0:	2700      	movs	r7, #0
 80111a2:	42bd      	cmp	r5, r7
 80111a4:	d120      	bne.n	80111e8 <_printf_common+0xc8>
 80111a6:	2000      	movs	r0, #0
 80111a8:	e010      	b.n	80111cc <_printf_common+0xac>
 80111aa:	3701      	adds	r7, #1
 80111ac:	68e3      	ldr	r3, [r4, #12]
 80111ae:	682a      	ldr	r2, [r5, #0]
 80111b0:	1a9b      	subs	r3, r3, r2
 80111b2:	42bb      	cmp	r3, r7
 80111b4:	ddd2      	ble.n	801115c <_printf_common+0x3c>
 80111b6:	0022      	movs	r2, r4
 80111b8:	2301      	movs	r3, #1
 80111ba:	9901      	ldr	r1, [sp, #4]
 80111bc:	9800      	ldr	r0, [sp, #0]
 80111be:	9e08      	ldr	r6, [sp, #32]
 80111c0:	3219      	adds	r2, #25
 80111c2:	47b0      	blx	r6
 80111c4:	1c43      	adds	r3, r0, #1
 80111c6:	d1f0      	bne.n	80111aa <_printf_common+0x8a>
 80111c8:	2001      	movs	r0, #1
 80111ca:	4240      	negs	r0, r0
 80111cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80111ce:	2030      	movs	r0, #48	; 0x30
 80111d0:	18e1      	adds	r1, r4, r3
 80111d2:	3143      	adds	r1, #67	; 0x43
 80111d4:	7008      	strb	r0, [r1, #0]
 80111d6:	0021      	movs	r1, r4
 80111d8:	1c5a      	adds	r2, r3, #1
 80111da:	3145      	adds	r1, #69	; 0x45
 80111dc:	7809      	ldrb	r1, [r1, #0]
 80111de:	18a2      	adds	r2, r4, r2
 80111e0:	3243      	adds	r2, #67	; 0x43
 80111e2:	3302      	adds	r3, #2
 80111e4:	7011      	strb	r1, [r2, #0]
 80111e6:	e7c1      	b.n	801116c <_printf_common+0x4c>
 80111e8:	0022      	movs	r2, r4
 80111ea:	2301      	movs	r3, #1
 80111ec:	9901      	ldr	r1, [sp, #4]
 80111ee:	9800      	ldr	r0, [sp, #0]
 80111f0:	9e08      	ldr	r6, [sp, #32]
 80111f2:	321a      	adds	r2, #26
 80111f4:	47b0      	blx	r6
 80111f6:	1c43      	adds	r3, r0, #1
 80111f8:	d0e6      	beq.n	80111c8 <_printf_common+0xa8>
 80111fa:	3701      	adds	r7, #1
 80111fc:	e7d1      	b.n	80111a2 <_printf_common+0x82>
	...

08011200 <_printf_i>:
 8011200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011202:	b08b      	sub	sp, #44	; 0x2c
 8011204:	9206      	str	r2, [sp, #24]
 8011206:	000a      	movs	r2, r1
 8011208:	3243      	adds	r2, #67	; 0x43
 801120a:	9307      	str	r3, [sp, #28]
 801120c:	9005      	str	r0, [sp, #20]
 801120e:	9204      	str	r2, [sp, #16]
 8011210:	7e0a      	ldrb	r2, [r1, #24]
 8011212:	000c      	movs	r4, r1
 8011214:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011216:	2a78      	cmp	r2, #120	; 0x78
 8011218:	d807      	bhi.n	801122a <_printf_i+0x2a>
 801121a:	2a62      	cmp	r2, #98	; 0x62
 801121c:	d809      	bhi.n	8011232 <_printf_i+0x32>
 801121e:	2a00      	cmp	r2, #0
 8011220:	d100      	bne.n	8011224 <_printf_i+0x24>
 8011222:	e0c1      	b.n	80113a8 <_printf_i+0x1a8>
 8011224:	2a58      	cmp	r2, #88	; 0x58
 8011226:	d100      	bne.n	801122a <_printf_i+0x2a>
 8011228:	e08c      	b.n	8011344 <_printf_i+0x144>
 801122a:	0026      	movs	r6, r4
 801122c:	3642      	adds	r6, #66	; 0x42
 801122e:	7032      	strb	r2, [r6, #0]
 8011230:	e022      	b.n	8011278 <_printf_i+0x78>
 8011232:	0010      	movs	r0, r2
 8011234:	3863      	subs	r0, #99	; 0x63
 8011236:	2815      	cmp	r0, #21
 8011238:	d8f7      	bhi.n	801122a <_printf_i+0x2a>
 801123a:	f7ee ff7d 	bl	8000138 <__gnu_thumb1_case_shi>
 801123e:	0016      	.short	0x0016
 8011240:	fff6001f 	.word	0xfff6001f
 8011244:	fff6fff6 	.word	0xfff6fff6
 8011248:	001ffff6 	.word	0x001ffff6
 801124c:	fff6fff6 	.word	0xfff6fff6
 8011250:	fff6fff6 	.word	0xfff6fff6
 8011254:	003600a8 	.word	0x003600a8
 8011258:	fff6009a 	.word	0xfff6009a
 801125c:	00b9fff6 	.word	0x00b9fff6
 8011260:	0036fff6 	.word	0x0036fff6
 8011264:	fff6fff6 	.word	0xfff6fff6
 8011268:	009e      	.short	0x009e
 801126a:	0026      	movs	r6, r4
 801126c:	681a      	ldr	r2, [r3, #0]
 801126e:	3642      	adds	r6, #66	; 0x42
 8011270:	1d11      	adds	r1, r2, #4
 8011272:	6019      	str	r1, [r3, #0]
 8011274:	6813      	ldr	r3, [r2, #0]
 8011276:	7033      	strb	r3, [r6, #0]
 8011278:	2301      	movs	r3, #1
 801127a:	e0a7      	b.n	80113cc <_printf_i+0x1cc>
 801127c:	6808      	ldr	r0, [r1, #0]
 801127e:	6819      	ldr	r1, [r3, #0]
 8011280:	1d0a      	adds	r2, r1, #4
 8011282:	0605      	lsls	r5, r0, #24
 8011284:	d50b      	bpl.n	801129e <_printf_i+0x9e>
 8011286:	680d      	ldr	r5, [r1, #0]
 8011288:	601a      	str	r2, [r3, #0]
 801128a:	2d00      	cmp	r5, #0
 801128c:	da03      	bge.n	8011296 <_printf_i+0x96>
 801128e:	232d      	movs	r3, #45	; 0x2d
 8011290:	9a04      	ldr	r2, [sp, #16]
 8011292:	426d      	negs	r5, r5
 8011294:	7013      	strb	r3, [r2, #0]
 8011296:	4b61      	ldr	r3, [pc, #388]	; (801141c <_printf_i+0x21c>)
 8011298:	270a      	movs	r7, #10
 801129a:	9303      	str	r3, [sp, #12]
 801129c:	e01b      	b.n	80112d6 <_printf_i+0xd6>
 801129e:	680d      	ldr	r5, [r1, #0]
 80112a0:	601a      	str	r2, [r3, #0]
 80112a2:	0641      	lsls	r1, r0, #25
 80112a4:	d5f1      	bpl.n	801128a <_printf_i+0x8a>
 80112a6:	b22d      	sxth	r5, r5
 80112a8:	e7ef      	b.n	801128a <_printf_i+0x8a>
 80112aa:	680d      	ldr	r5, [r1, #0]
 80112ac:	6819      	ldr	r1, [r3, #0]
 80112ae:	1d08      	adds	r0, r1, #4
 80112b0:	6018      	str	r0, [r3, #0]
 80112b2:	062e      	lsls	r6, r5, #24
 80112b4:	d501      	bpl.n	80112ba <_printf_i+0xba>
 80112b6:	680d      	ldr	r5, [r1, #0]
 80112b8:	e003      	b.n	80112c2 <_printf_i+0xc2>
 80112ba:	066d      	lsls	r5, r5, #25
 80112bc:	d5fb      	bpl.n	80112b6 <_printf_i+0xb6>
 80112be:	680d      	ldr	r5, [r1, #0]
 80112c0:	b2ad      	uxth	r5, r5
 80112c2:	4b56      	ldr	r3, [pc, #344]	; (801141c <_printf_i+0x21c>)
 80112c4:	2708      	movs	r7, #8
 80112c6:	9303      	str	r3, [sp, #12]
 80112c8:	2a6f      	cmp	r2, #111	; 0x6f
 80112ca:	d000      	beq.n	80112ce <_printf_i+0xce>
 80112cc:	3702      	adds	r7, #2
 80112ce:	0023      	movs	r3, r4
 80112d0:	2200      	movs	r2, #0
 80112d2:	3343      	adds	r3, #67	; 0x43
 80112d4:	701a      	strb	r2, [r3, #0]
 80112d6:	6863      	ldr	r3, [r4, #4]
 80112d8:	60a3      	str	r3, [r4, #8]
 80112da:	2b00      	cmp	r3, #0
 80112dc:	db03      	blt.n	80112e6 <_printf_i+0xe6>
 80112de:	2204      	movs	r2, #4
 80112e0:	6821      	ldr	r1, [r4, #0]
 80112e2:	4391      	bics	r1, r2
 80112e4:	6021      	str	r1, [r4, #0]
 80112e6:	2d00      	cmp	r5, #0
 80112e8:	d102      	bne.n	80112f0 <_printf_i+0xf0>
 80112ea:	9e04      	ldr	r6, [sp, #16]
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d00c      	beq.n	801130a <_printf_i+0x10a>
 80112f0:	9e04      	ldr	r6, [sp, #16]
 80112f2:	0028      	movs	r0, r5
 80112f4:	0039      	movs	r1, r7
 80112f6:	f7ee ffaf 	bl	8000258 <__aeabi_uidivmod>
 80112fa:	9b03      	ldr	r3, [sp, #12]
 80112fc:	3e01      	subs	r6, #1
 80112fe:	5c5b      	ldrb	r3, [r3, r1]
 8011300:	7033      	strb	r3, [r6, #0]
 8011302:	002b      	movs	r3, r5
 8011304:	0005      	movs	r5, r0
 8011306:	429f      	cmp	r7, r3
 8011308:	d9f3      	bls.n	80112f2 <_printf_i+0xf2>
 801130a:	2f08      	cmp	r7, #8
 801130c:	d109      	bne.n	8011322 <_printf_i+0x122>
 801130e:	6823      	ldr	r3, [r4, #0]
 8011310:	07db      	lsls	r3, r3, #31
 8011312:	d506      	bpl.n	8011322 <_printf_i+0x122>
 8011314:	6863      	ldr	r3, [r4, #4]
 8011316:	6922      	ldr	r2, [r4, #16]
 8011318:	4293      	cmp	r3, r2
 801131a:	dc02      	bgt.n	8011322 <_printf_i+0x122>
 801131c:	2330      	movs	r3, #48	; 0x30
 801131e:	3e01      	subs	r6, #1
 8011320:	7033      	strb	r3, [r6, #0]
 8011322:	9b04      	ldr	r3, [sp, #16]
 8011324:	1b9b      	subs	r3, r3, r6
 8011326:	6123      	str	r3, [r4, #16]
 8011328:	9b07      	ldr	r3, [sp, #28]
 801132a:	0021      	movs	r1, r4
 801132c:	9300      	str	r3, [sp, #0]
 801132e:	9805      	ldr	r0, [sp, #20]
 8011330:	9b06      	ldr	r3, [sp, #24]
 8011332:	aa09      	add	r2, sp, #36	; 0x24
 8011334:	f7ff fef4 	bl	8011120 <_printf_common>
 8011338:	1c43      	adds	r3, r0, #1
 801133a:	d14c      	bne.n	80113d6 <_printf_i+0x1d6>
 801133c:	2001      	movs	r0, #1
 801133e:	4240      	negs	r0, r0
 8011340:	b00b      	add	sp, #44	; 0x2c
 8011342:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011344:	3145      	adds	r1, #69	; 0x45
 8011346:	700a      	strb	r2, [r1, #0]
 8011348:	4a34      	ldr	r2, [pc, #208]	; (801141c <_printf_i+0x21c>)
 801134a:	9203      	str	r2, [sp, #12]
 801134c:	681a      	ldr	r2, [r3, #0]
 801134e:	6821      	ldr	r1, [r4, #0]
 8011350:	ca20      	ldmia	r2!, {r5}
 8011352:	601a      	str	r2, [r3, #0]
 8011354:	0608      	lsls	r0, r1, #24
 8011356:	d516      	bpl.n	8011386 <_printf_i+0x186>
 8011358:	07cb      	lsls	r3, r1, #31
 801135a:	d502      	bpl.n	8011362 <_printf_i+0x162>
 801135c:	2320      	movs	r3, #32
 801135e:	4319      	orrs	r1, r3
 8011360:	6021      	str	r1, [r4, #0]
 8011362:	2710      	movs	r7, #16
 8011364:	2d00      	cmp	r5, #0
 8011366:	d1b2      	bne.n	80112ce <_printf_i+0xce>
 8011368:	2320      	movs	r3, #32
 801136a:	6822      	ldr	r2, [r4, #0]
 801136c:	439a      	bics	r2, r3
 801136e:	6022      	str	r2, [r4, #0]
 8011370:	e7ad      	b.n	80112ce <_printf_i+0xce>
 8011372:	2220      	movs	r2, #32
 8011374:	6809      	ldr	r1, [r1, #0]
 8011376:	430a      	orrs	r2, r1
 8011378:	6022      	str	r2, [r4, #0]
 801137a:	0022      	movs	r2, r4
 801137c:	2178      	movs	r1, #120	; 0x78
 801137e:	3245      	adds	r2, #69	; 0x45
 8011380:	7011      	strb	r1, [r2, #0]
 8011382:	4a27      	ldr	r2, [pc, #156]	; (8011420 <_printf_i+0x220>)
 8011384:	e7e1      	b.n	801134a <_printf_i+0x14a>
 8011386:	0648      	lsls	r0, r1, #25
 8011388:	d5e6      	bpl.n	8011358 <_printf_i+0x158>
 801138a:	b2ad      	uxth	r5, r5
 801138c:	e7e4      	b.n	8011358 <_printf_i+0x158>
 801138e:	681a      	ldr	r2, [r3, #0]
 8011390:	680d      	ldr	r5, [r1, #0]
 8011392:	1d10      	adds	r0, r2, #4
 8011394:	6949      	ldr	r1, [r1, #20]
 8011396:	6018      	str	r0, [r3, #0]
 8011398:	6813      	ldr	r3, [r2, #0]
 801139a:	062e      	lsls	r6, r5, #24
 801139c:	d501      	bpl.n	80113a2 <_printf_i+0x1a2>
 801139e:	6019      	str	r1, [r3, #0]
 80113a0:	e002      	b.n	80113a8 <_printf_i+0x1a8>
 80113a2:	066d      	lsls	r5, r5, #25
 80113a4:	d5fb      	bpl.n	801139e <_printf_i+0x19e>
 80113a6:	8019      	strh	r1, [r3, #0]
 80113a8:	2300      	movs	r3, #0
 80113aa:	9e04      	ldr	r6, [sp, #16]
 80113ac:	6123      	str	r3, [r4, #16]
 80113ae:	e7bb      	b.n	8011328 <_printf_i+0x128>
 80113b0:	681a      	ldr	r2, [r3, #0]
 80113b2:	1d11      	adds	r1, r2, #4
 80113b4:	6019      	str	r1, [r3, #0]
 80113b6:	6816      	ldr	r6, [r2, #0]
 80113b8:	2100      	movs	r1, #0
 80113ba:	0030      	movs	r0, r6
 80113bc:	6862      	ldr	r2, [r4, #4]
 80113be:	f000 ff53 	bl	8012268 <memchr>
 80113c2:	2800      	cmp	r0, #0
 80113c4:	d001      	beq.n	80113ca <_printf_i+0x1ca>
 80113c6:	1b80      	subs	r0, r0, r6
 80113c8:	6060      	str	r0, [r4, #4]
 80113ca:	6863      	ldr	r3, [r4, #4]
 80113cc:	6123      	str	r3, [r4, #16]
 80113ce:	2300      	movs	r3, #0
 80113d0:	9a04      	ldr	r2, [sp, #16]
 80113d2:	7013      	strb	r3, [r2, #0]
 80113d4:	e7a8      	b.n	8011328 <_printf_i+0x128>
 80113d6:	6923      	ldr	r3, [r4, #16]
 80113d8:	0032      	movs	r2, r6
 80113da:	9906      	ldr	r1, [sp, #24]
 80113dc:	9805      	ldr	r0, [sp, #20]
 80113de:	9d07      	ldr	r5, [sp, #28]
 80113e0:	47a8      	blx	r5
 80113e2:	1c43      	adds	r3, r0, #1
 80113e4:	d0aa      	beq.n	801133c <_printf_i+0x13c>
 80113e6:	6823      	ldr	r3, [r4, #0]
 80113e8:	079b      	lsls	r3, r3, #30
 80113ea:	d415      	bmi.n	8011418 <_printf_i+0x218>
 80113ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80113ee:	68e0      	ldr	r0, [r4, #12]
 80113f0:	4298      	cmp	r0, r3
 80113f2:	daa5      	bge.n	8011340 <_printf_i+0x140>
 80113f4:	0018      	movs	r0, r3
 80113f6:	e7a3      	b.n	8011340 <_printf_i+0x140>
 80113f8:	0022      	movs	r2, r4
 80113fa:	2301      	movs	r3, #1
 80113fc:	9906      	ldr	r1, [sp, #24]
 80113fe:	9805      	ldr	r0, [sp, #20]
 8011400:	9e07      	ldr	r6, [sp, #28]
 8011402:	3219      	adds	r2, #25
 8011404:	47b0      	blx	r6
 8011406:	1c43      	adds	r3, r0, #1
 8011408:	d098      	beq.n	801133c <_printf_i+0x13c>
 801140a:	3501      	adds	r5, #1
 801140c:	68e3      	ldr	r3, [r4, #12]
 801140e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011410:	1a9b      	subs	r3, r3, r2
 8011412:	42ab      	cmp	r3, r5
 8011414:	dcf0      	bgt.n	80113f8 <_printf_i+0x1f8>
 8011416:	e7e9      	b.n	80113ec <_printf_i+0x1ec>
 8011418:	2500      	movs	r5, #0
 801141a:	e7f7      	b.n	801140c <_printf_i+0x20c>
 801141c:	08013805 	.word	0x08013805
 8011420:	08013816 	.word	0x08013816

08011424 <nan>:
 8011424:	2000      	movs	r0, #0
 8011426:	4901      	ldr	r1, [pc, #4]	; (801142c <nan+0x8>)
 8011428:	4770      	bx	lr
 801142a:	46c0      	nop			; (mov r8, r8)
 801142c:	7ff80000 	.word	0x7ff80000

08011430 <_sbrk_r>:
 8011430:	2300      	movs	r3, #0
 8011432:	b570      	push	{r4, r5, r6, lr}
 8011434:	4d06      	ldr	r5, [pc, #24]	; (8011450 <_sbrk_r+0x20>)
 8011436:	0004      	movs	r4, r0
 8011438:	0008      	movs	r0, r1
 801143a:	602b      	str	r3, [r5, #0]
 801143c:	f7f7 f8dc 	bl	80085f8 <_sbrk>
 8011440:	1c43      	adds	r3, r0, #1
 8011442:	d103      	bne.n	801144c <_sbrk_r+0x1c>
 8011444:	682b      	ldr	r3, [r5, #0]
 8011446:	2b00      	cmp	r3, #0
 8011448:	d000      	beq.n	801144c <_sbrk_r+0x1c>
 801144a:	6023      	str	r3, [r4, #0]
 801144c:	bd70      	pop	{r4, r5, r6, pc}
 801144e:	46c0      	nop			; (mov r8, r8)
 8011450:	20000d20 	.word	0x20000d20

08011454 <nanf>:
 8011454:	4800      	ldr	r0, [pc, #0]	; (8011458 <nanf+0x4>)
 8011456:	4770      	bx	lr
 8011458:	7fc00000 	.word	0x7fc00000

0801145c <strcpy>:
 801145c:	0003      	movs	r3, r0
 801145e:	780a      	ldrb	r2, [r1, #0]
 8011460:	3101      	adds	r1, #1
 8011462:	701a      	strb	r2, [r3, #0]
 8011464:	3301      	adds	r3, #1
 8011466:	2a00      	cmp	r2, #0
 8011468:	d1f9      	bne.n	801145e <strcpy+0x2>
 801146a:	4770      	bx	lr

0801146c <strncmp>:
 801146c:	b530      	push	{r4, r5, lr}
 801146e:	0005      	movs	r5, r0
 8011470:	1e10      	subs	r0, r2, #0
 8011472:	d008      	beq.n	8011486 <strncmp+0x1a>
 8011474:	2400      	movs	r4, #0
 8011476:	3a01      	subs	r2, #1
 8011478:	5d2b      	ldrb	r3, [r5, r4]
 801147a:	5d08      	ldrb	r0, [r1, r4]
 801147c:	4283      	cmp	r3, r0
 801147e:	d101      	bne.n	8011484 <strncmp+0x18>
 8011480:	4294      	cmp	r4, r2
 8011482:	d101      	bne.n	8011488 <strncmp+0x1c>
 8011484:	1a18      	subs	r0, r3, r0
 8011486:	bd30      	pop	{r4, r5, pc}
 8011488:	3401      	adds	r4, #1
 801148a:	2b00      	cmp	r3, #0
 801148c:	d1f4      	bne.n	8011478 <strncmp+0xc>
 801148e:	e7f9      	b.n	8011484 <strncmp+0x18>

08011490 <__ascii_wctomb>:
 8011490:	0003      	movs	r3, r0
 8011492:	1e08      	subs	r0, r1, #0
 8011494:	d005      	beq.n	80114a2 <__ascii_wctomb+0x12>
 8011496:	2aff      	cmp	r2, #255	; 0xff
 8011498:	d904      	bls.n	80114a4 <__ascii_wctomb+0x14>
 801149a:	228a      	movs	r2, #138	; 0x8a
 801149c:	2001      	movs	r0, #1
 801149e:	601a      	str	r2, [r3, #0]
 80114a0:	4240      	negs	r0, r0
 80114a2:	4770      	bx	lr
 80114a4:	2001      	movs	r0, #1
 80114a6:	700a      	strb	r2, [r1, #0]
 80114a8:	e7fb      	b.n	80114a2 <__ascii_wctomb+0x12>
	...

080114ac <__assert_func>:
 80114ac:	b530      	push	{r4, r5, lr}
 80114ae:	0014      	movs	r4, r2
 80114b0:	001a      	movs	r2, r3
 80114b2:	4b09      	ldr	r3, [pc, #36]	; (80114d8 <__assert_func+0x2c>)
 80114b4:	0005      	movs	r5, r0
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	b085      	sub	sp, #20
 80114ba:	68d8      	ldr	r0, [r3, #12]
 80114bc:	4b07      	ldr	r3, [pc, #28]	; (80114dc <__assert_func+0x30>)
 80114be:	2c00      	cmp	r4, #0
 80114c0:	d101      	bne.n	80114c6 <__assert_func+0x1a>
 80114c2:	4b07      	ldr	r3, [pc, #28]	; (80114e0 <__assert_func+0x34>)
 80114c4:	001c      	movs	r4, r3
 80114c6:	9301      	str	r3, [sp, #4]
 80114c8:	9100      	str	r1, [sp, #0]
 80114ca:	002b      	movs	r3, r5
 80114cc:	4905      	ldr	r1, [pc, #20]	; (80114e4 <__assert_func+0x38>)
 80114ce:	9402      	str	r4, [sp, #8]
 80114d0:	f000 feb0 	bl	8012234 <fiprintf>
 80114d4:	f001 f978 	bl	80127c8 <abort>
 80114d8:	200000bc 	.word	0x200000bc
 80114dc:	08013827 	.word	0x08013827
 80114e0:	08013862 	.word	0x08013862
 80114e4:	08013834 	.word	0x08013834

080114e8 <quorem>:
 80114e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80114ea:	0006      	movs	r6, r0
 80114ec:	690b      	ldr	r3, [r1, #16]
 80114ee:	6932      	ldr	r2, [r6, #16]
 80114f0:	b087      	sub	sp, #28
 80114f2:	2000      	movs	r0, #0
 80114f4:	9103      	str	r1, [sp, #12]
 80114f6:	429a      	cmp	r2, r3
 80114f8:	db65      	blt.n	80115c6 <quorem+0xde>
 80114fa:	3b01      	subs	r3, #1
 80114fc:	009c      	lsls	r4, r3, #2
 80114fe:	9300      	str	r3, [sp, #0]
 8011500:	000b      	movs	r3, r1
 8011502:	3314      	adds	r3, #20
 8011504:	9305      	str	r3, [sp, #20]
 8011506:	191b      	adds	r3, r3, r4
 8011508:	9304      	str	r3, [sp, #16]
 801150a:	0033      	movs	r3, r6
 801150c:	3314      	adds	r3, #20
 801150e:	9302      	str	r3, [sp, #8]
 8011510:	191c      	adds	r4, r3, r4
 8011512:	9b04      	ldr	r3, [sp, #16]
 8011514:	6827      	ldr	r7, [r4, #0]
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	0038      	movs	r0, r7
 801151a:	1c5d      	adds	r5, r3, #1
 801151c:	0029      	movs	r1, r5
 801151e:	9301      	str	r3, [sp, #4]
 8011520:	f7ee fe14 	bl	800014c <__udivsi3>
 8011524:	9001      	str	r0, [sp, #4]
 8011526:	42af      	cmp	r7, r5
 8011528:	d324      	bcc.n	8011574 <quorem+0x8c>
 801152a:	2500      	movs	r5, #0
 801152c:	46ac      	mov	ip, r5
 801152e:	9802      	ldr	r0, [sp, #8]
 8011530:	9f05      	ldr	r7, [sp, #20]
 8011532:	cf08      	ldmia	r7!, {r3}
 8011534:	9a01      	ldr	r2, [sp, #4]
 8011536:	b299      	uxth	r1, r3
 8011538:	4351      	muls	r1, r2
 801153a:	0c1b      	lsrs	r3, r3, #16
 801153c:	4353      	muls	r3, r2
 801153e:	1949      	adds	r1, r1, r5
 8011540:	0c0a      	lsrs	r2, r1, #16
 8011542:	189b      	adds	r3, r3, r2
 8011544:	6802      	ldr	r2, [r0, #0]
 8011546:	b289      	uxth	r1, r1
 8011548:	b292      	uxth	r2, r2
 801154a:	4462      	add	r2, ip
 801154c:	1a52      	subs	r2, r2, r1
 801154e:	6801      	ldr	r1, [r0, #0]
 8011550:	0c1d      	lsrs	r5, r3, #16
 8011552:	0c09      	lsrs	r1, r1, #16
 8011554:	b29b      	uxth	r3, r3
 8011556:	1acb      	subs	r3, r1, r3
 8011558:	1411      	asrs	r1, r2, #16
 801155a:	185b      	adds	r3, r3, r1
 801155c:	1419      	asrs	r1, r3, #16
 801155e:	b292      	uxth	r2, r2
 8011560:	041b      	lsls	r3, r3, #16
 8011562:	431a      	orrs	r2, r3
 8011564:	9b04      	ldr	r3, [sp, #16]
 8011566:	468c      	mov	ip, r1
 8011568:	c004      	stmia	r0!, {r2}
 801156a:	42bb      	cmp	r3, r7
 801156c:	d2e1      	bcs.n	8011532 <quorem+0x4a>
 801156e:	6823      	ldr	r3, [r4, #0]
 8011570:	2b00      	cmp	r3, #0
 8011572:	d030      	beq.n	80115d6 <quorem+0xee>
 8011574:	0030      	movs	r0, r6
 8011576:	9903      	ldr	r1, [sp, #12]
 8011578:	f7ff f968 	bl	801084c <__mcmp>
 801157c:	2800      	cmp	r0, #0
 801157e:	db21      	blt.n	80115c4 <quorem+0xdc>
 8011580:	0030      	movs	r0, r6
 8011582:	2400      	movs	r4, #0
 8011584:	9b01      	ldr	r3, [sp, #4]
 8011586:	9903      	ldr	r1, [sp, #12]
 8011588:	3301      	adds	r3, #1
 801158a:	9301      	str	r3, [sp, #4]
 801158c:	3014      	adds	r0, #20
 801158e:	3114      	adds	r1, #20
 8011590:	6803      	ldr	r3, [r0, #0]
 8011592:	c920      	ldmia	r1!, {r5}
 8011594:	b29a      	uxth	r2, r3
 8011596:	1914      	adds	r4, r2, r4
 8011598:	b2aa      	uxth	r2, r5
 801159a:	1aa2      	subs	r2, r4, r2
 801159c:	0c1b      	lsrs	r3, r3, #16
 801159e:	0c2d      	lsrs	r5, r5, #16
 80115a0:	1414      	asrs	r4, r2, #16
 80115a2:	1b5b      	subs	r3, r3, r5
 80115a4:	191b      	adds	r3, r3, r4
 80115a6:	141c      	asrs	r4, r3, #16
 80115a8:	b292      	uxth	r2, r2
 80115aa:	041b      	lsls	r3, r3, #16
 80115ac:	4313      	orrs	r3, r2
 80115ae:	c008      	stmia	r0!, {r3}
 80115b0:	9b04      	ldr	r3, [sp, #16]
 80115b2:	428b      	cmp	r3, r1
 80115b4:	d2ec      	bcs.n	8011590 <quorem+0xa8>
 80115b6:	9b00      	ldr	r3, [sp, #0]
 80115b8:	9a02      	ldr	r2, [sp, #8]
 80115ba:	009b      	lsls	r3, r3, #2
 80115bc:	18d3      	adds	r3, r2, r3
 80115be:	681a      	ldr	r2, [r3, #0]
 80115c0:	2a00      	cmp	r2, #0
 80115c2:	d015      	beq.n	80115f0 <quorem+0x108>
 80115c4:	9801      	ldr	r0, [sp, #4]
 80115c6:	b007      	add	sp, #28
 80115c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80115ca:	6823      	ldr	r3, [r4, #0]
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d106      	bne.n	80115de <quorem+0xf6>
 80115d0:	9b00      	ldr	r3, [sp, #0]
 80115d2:	3b01      	subs	r3, #1
 80115d4:	9300      	str	r3, [sp, #0]
 80115d6:	9b02      	ldr	r3, [sp, #8]
 80115d8:	3c04      	subs	r4, #4
 80115da:	42a3      	cmp	r3, r4
 80115dc:	d3f5      	bcc.n	80115ca <quorem+0xe2>
 80115de:	9b00      	ldr	r3, [sp, #0]
 80115e0:	6133      	str	r3, [r6, #16]
 80115e2:	e7c7      	b.n	8011574 <quorem+0x8c>
 80115e4:	681a      	ldr	r2, [r3, #0]
 80115e6:	2a00      	cmp	r2, #0
 80115e8:	d106      	bne.n	80115f8 <quorem+0x110>
 80115ea:	9a00      	ldr	r2, [sp, #0]
 80115ec:	3a01      	subs	r2, #1
 80115ee:	9200      	str	r2, [sp, #0]
 80115f0:	9a02      	ldr	r2, [sp, #8]
 80115f2:	3b04      	subs	r3, #4
 80115f4:	429a      	cmp	r2, r3
 80115f6:	d3f5      	bcc.n	80115e4 <quorem+0xfc>
 80115f8:	9b00      	ldr	r3, [sp, #0]
 80115fa:	6133      	str	r3, [r6, #16]
 80115fc:	e7e2      	b.n	80115c4 <quorem+0xdc>
	...

08011600 <_dtoa_r>:
 8011600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011602:	b09d      	sub	sp, #116	; 0x74
 8011604:	9202      	str	r2, [sp, #8]
 8011606:	9303      	str	r3, [sp, #12]
 8011608:	9b02      	ldr	r3, [sp, #8]
 801160a:	9c03      	ldr	r4, [sp, #12]
 801160c:	9308      	str	r3, [sp, #32]
 801160e:	9409      	str	r4, [sp, #36]	; 0x24
 8011610:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8011612:	0007      	movs	r7, r0
 8011614:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8011616:	2c00      	cmp	r4, #0
 8011618:	d10e      	bne.n	8011638 <_dtoa_r+0x38>
 801161a:	2010      	movs	r0, #16
 801161c:	f000 fe1a 	bl	8012254 <malloc>
 8011620:	1e02      	subs	r2, r0, #0
 8011622:	6278      	str	r0, [r7, #36]	; 0x24
 8011624:	d104      	bne.n	8011630 <_dtoa_r+0x30>
 8011626:	21ea      	movs	r1, #234	; 0xea
 8011628:	4bc7      	ldr	r3, [pc, #796]	; (8011948 <_dtoa_r+0x348>)
 801162a:	48c8      	ldr	r0, [pc, #800]	; (801194c <_dtoa_r+0x34c>)
 801162c:	f7ff ff3e 	bl	80114ac <__assert_func>
 8011630:	6044      	str	r4, [r0, #4]
 8011632:	6084      	str	r4, [r0, #8]
 8011634:	6004      	str	r4, [r0, #0]
 8011636:	60c4      	str	r4, [r0, #12]
 8011638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801163a:	6819      	ldr	r1, [r3, #0]
 801163c:	2900      	cmp	r1, #0
 801163e:	d00a      	beq.n	8011656 <_dtoa_r+0x56>
 8011640:	685a      	ldr	r2, [r3, #4]
 8011642:	2301      	movs	r3, #1
 8011644:	4093      	lsls	r3, r2
 8011646:	604a      	str	r2, [r1, #4]
 8011648:	608b      	str	r3, [r1, #8]
 801164a:	0038      	movs	r0, r7
 801164c:	f7fe fe72 	bl	8010334 <_Bfree>
 8011650:	2200      	movs	r2, #0
 8011652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011654:	601a      	str	r2, [r3, #0]
 8011656:	9b03      	ldr	r3, [sp, #12]
 8011658:	2b00      	cmp	r3, #0
 801165a:	da20      	bge.n	801169e <_dtoa_r+0x9e>
 801165c:	2301      	movs	r3, #1
 801165e:	602b      	str	r3, [r5, #0]
 8011660:	9b03      	ldr	r3, [sp, #12]
 8011662:	005b      	lsls	r3, r3, #1
 8011664:	085b      	lsrs	r3, r3, #1
 8011666:	9309      	str	r3, [sp, #36]	; 0x24
 8011668:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801166a:	4bb9      	ldr	r3, [pc, #740]	; (8011950 <_dtoa_r+0x350>)
 801166c:	4ab8      	ldr	r2, [pc, #736]	; (8011950 <_dtoa_r+0x350>)
 801166e:	402b      	ands	r3, r5
 8011670:	4293      	cmp	r3, r2
 8011672:	d117      	bne.n	80116a4 <_dtoa_r+0xa4>
 8011674:	4bb7      	ldr	r3, [pc, #732]	; (8011954 <_dtoa_r+0x354>)
 8011676:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8011678:	0328      	lsls	r0, r5, #12
 801167a:	6013      	str	r3, [r2, #0]
 801167c:	9b02      	ldr	r3, [sp, #8]
 801167e:	0b00      	lsrs	r0, r0, #12
 8011680:	4318      	orrs	r0, r3
 8011682:	d101      	bne.n	8011688 <_dtoa_r+0x88>
 8011684:	f000 fdbf 	bl	8012206 <_dtoa_r+0xc06>
 8011688:	48b3      	ldr	r0, [pc, #716]	; (8011958 <_dtoa_r+0x358>)
 801168a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801168c:	9006      	str	r0, [sp, #24]
 801168e:	2b00      	cmp	r3, #0
 8011690:	d002      	beq.n	8011698 <_dtoa_r+0x98>
 8011692:	4bb2      	ldr	r3, [pc, #712]	; (801195c <_dtoa_r+0x35c>)
 8011694:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8011696:	6013      	str	r3, [r2, #0]
 8011698:	9806      	ldr	r0, [sp, #24]
 801169a:	b01d      	add	sp, #116	; 0x74
 801169c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801169e:	2300      	movs	r3, #0
 80116a0:	602b      	str	r3, [r5, #0]
 80116a2:	e7e1      	b.n	8011668 <_dtoa_r+0x68>
 80116a4:	9b08      	ldr	r3, [sp, #32]
 80116a6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80116a8:	9312      	str	r3, [sp, #72]	; 0x48
 80116aa:	9413      	str	r4, [sp, #76]	; 0x4c
 80116ac:	9812      	ldr	r0, [sp, #72]	; 0x48
 80116ae:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80116b0:	2200      	movs	r2, #0
 80116b2:	2300      	movs	r3, #0
 80116b4:	f7ee fed0 	bl	8000458 <__aeabi_dcmpeq>
 80116b8:	1e04      	subs	r4, r0, #0
 80116ba:	d009      	beq.n	80116d0 <_dtoa_r+0xd0>
 80116bc:	2301      	movs	r3, #1
 80116be:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80116c0:	6013      	str	r3, [r2, #0]
 80116c2:	4ba7      	ldr	r3, [pc, #668]	; (8011960 <_dtoa_r+0x360>)
 80116c4:	9306      	str	r3, [sp, #24]
 80116c6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d0e5      	beq.n	8011698 <_dtoa_r+0x98>
 80116cc:	4ba5      	ldr	r3, [pc, #660]	; (8011964 <_dtoa_r+0x364>)
 80116ce:	e7e1      	b.n	8011694 <_dtoa_r+0x94>
 80116d0:	ab1a      	add	r3, sp, #104	; 0x68
 80116d2:	9301      	str	r3, [sp, #4]
 80116d4:	ab1b      	add	r3, sp, #108	; 0x6c
 80116d6:	9300      	str	r3, [sp, #0]
 80116d8:	0038      	movs	r0, r7
 80116da:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80116dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80116de:	f7ff f9dd 	bl	8010a9c <__d2b>
 80116e2:	006e      	lsls	r6, r5, #1
 80116e4:	9005      	str	r0, [sp, #20]
 80116e6:	0d76      	lsrs	r6, r6, #21
 80116e8:	d100      	bne.n	80116ec <_dtoa_r+0xec>
 80116ea:	e07c      	b.n	80117e6 <_dtoa_r+0x1e6>
 80116ec:	9812      	ldr	r0, [sp, #72]	; 0x48
 80116ee:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80116f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80116f2:	4a9d      	ldr	r2, [pc, #628]	; (8011968 <_dtoa_r+0x368>)
 80116f4:	031b      	lsls	r3, r3, #12
 80116f6:	0b1b      	lsrs	r3, r3, #12
 80116f8:	431a      	orrs	r2, r3
 80116fa:	0011      	movs	r1, r2
 80116fc:	4b9b      	ldr	r3, [pc, #620]	; (801196c <_dtoa_r+0x36c>)
 80116fe:	9418      	str	r4, [sp, #96]	; 0x60
 8011700:	18f6      	adds	r6, r6, r3
 8011702:	2200      	movs	r2, #0
 8011704:	4b9a      	ldr	r3, [pc, #616]	; (8011970 <_dtoa_r+0x370>)
 8011706:	f7f0 ffff 	bl	8002708 <__aeabi_dsub>
 801170a:	4a9a      	ldr	r2, [pc, #616]	; (8011974 <_dtoa_r+0x374>)
 801170c:	4b9a      	ldr	r3, [pc, #616]	; (8011978 <_dtoa_r+0x378>)
 801170e:	f7f0 fd8f 	bl	8002230 <__aeabi_dmul>
 8011712:	4a9a      	ldr	r2, [pc, #616]	; (801197c <_dtoa_r+0x37c>)
 8011714:	4b9a      	ldr	r3, [pc, #616]	; (8011980 <_dtoa_r+0x380>)
 8011716:	f7ef fe4d 	bl	80013b4 <__aeabi_dadd>
 801171a:	0004      	movs	r4, r0
 801171c:	0030      	movs	r0, r6
 801171e:	000d      	movs	r5, r1
 8011720:	f7f1 fbd8 	bl	8002ed4 <__aeabi_i2d>
 8011724:	4a97      	ldr	r2, [pc, #604]	; (8011984 <_dtoa_r+0x384>)
 8011726:	4b98      	ldr	r3, [pc, #608]	; (8011988 <_dtoa_r+0x388>)
 8011728:	f7f0 fd82 	bl	8002230 <__aeabi_dmul>
 801172c:	0002      	movs	r2, r0
 801172e:	000b      	movs	r3, r1
 8011730:	0020      	movs	r0, r4
 8011732:	0029      	movs	r1, r5
 8011734:	f7ef fe3e 	bl	80013b4 <__aeabi_dadd>
 8011738:	0004      	movs	r4, r0
 801173a:	000d      	movs	r5, r1
 801173c:	f7f1 fb94 	bl	8002e68 <__aeabi_d2iz>
 8011740:	2200      	movs	r2, #0
 8011742:	9002      	str	r0, [sp, #8]
 8011744:	2300      	movs	r3, #0
 8011746:	0020      	movs	r0, r4
 8011748:	0029      	movs	r1, r5
 801174a:	f7ee fe8b 	bl	8000464 <__aeabi_dcmplt>
 801174e:	2800      	cmp	r0, #0
 8011750:	d00b      	beq.n	801176a <_dtoa_r+0x16a>
 8011752:	9802      	ldr	r0, [sp, #8]
 8011754:	f7f1 fbbe 	bl	8002ed4 <__aeabi_i2d>
 8011758:	002b      	movs	r3, r5
 801175a:	0022      	movs	r2, r4
 801175c:	f7ee fe7c 	bl	8000458 <__aeabi_dcmpeq>
 8011760:	4243      	negs	r3, r0
 8011762:	4158      	adcs	r0, r3
 8011764:	9b02      	ldr	r3, [sp, #8]
 8011766:	1a1b      	subs	r3, r3, r0
 8011768:	9302      	str	r3, [sp, #8]
 801176a:	2301      	movs	r3, #1
 801176c:	9316      	str	r3, [sp, #88]	; 0x58
 801176e:	9b02      	ldr	r3, [sp, #8]
 8011770:	2b16      	cmp	r3, #22
 8011772:	d80f      	bhi.n	8011794 <_dtoa_r+0x194>
 8011774:	9812      	ldr	r0, [sp, #72]	; 0x48
 8011776:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8011778:	00da      	lsls	r2, r3, #3
 801177a:	4b84      	ldr	r3, [pc, #528]	; (801198c <_dtoa_r+0x38c>)
 801177c:	189b      	adds	r3, r3, r2
 801177e:	681a      	ldr	r2, [r3, #0]
 8011780:	685b      	ldr	r3, [r3, #4]
 8011782:	f7ee fe6f 	bl	8000464 <__aeabi_dcmplt>
 8011786:	2800      	cmp	r0, #0
 8011788:	d049      	beq.n	801181e <_dtoa_r+0x21e>
 801178a:	9b02      	ldr	r3, [sp, #8]
 801178c:	3b01      	subs	r3, #1
 801178e:	9302      	str	r3, [sp, #8]
 8011790:	2300      	movs	r3, #0
 8011792:	9316      	str	r3, [sp, #88]	; 0x58
 8011794:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8011796:	1b9e      	subs	r6, r3, r6
 8011798:	2300      	movs	r3, #0
 801179a:	930a      	str	r3, [sp, #40]	; 0x28
 801179c:	0033      	movs	r3, r6
 801179e:	3b01      	subs	r3, #1
 80117a0:	930d      	str	r3, [sp, #52]	; 0x34
 80117a2:	d504      	bpl.n	80117ae <_dtoa_r+0x1ae>
 80117a4:	2301      	movs	r3, #1
 80117a6:	1b9b      	subs	r3, r3, r6
 80117a8:	930a      	str	r3, [sp, #40]	; 0x28
 80117aa:	2300      	movs	r3, #0
 80117ac:	930d      	str	r3, [sp, #52]	; 0x34
 80117ae:	9b02      	ldr	r3, [sp, #8]
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	db36      	blt.n	8011822 <_dtoa_r+0x222>
 80117b4:	9a02      	ldr	r2, [sp, #8]
 80117b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80117b8:	4694      	mov	ip, r2
 80117ba:	4463      	add	r3, ip
 80117bc:	930d      	str	r3, [sp, #52]	; 0x34
 80117be:	2300      	movs	r3, #0
 80117c0:	9215      	str	r2, [sp, #84]	; 0x54
 80117c2:	930e      	str	r3, [sp, #56]	; 0x38
 80117c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80117c6:	2401      	movs	r4, #1
 80117c8:	2b09      	cmp	r3, #9
 80117ca:	d864      	bhi.n	8011896 <_dtoa_r+0x296>
 80117cc:	2b05      	cmp	r3, #5
 80117ce:	dd02      	ble.n	80117d6 <_dtoa_r+0x1d6>
 80117d0:	2400      	movs	r4, #0
 80117d2:	3b04      	subs	r3, #4
 80117d4:	9322      	str	r3, [sp, #136]	; 0x88
 80117d6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80117d8:	1e98      	subs	r0, r3, #2
 80117da:	2803      	cmp	r0, #3
 80117dc:	d864      	bhi.n	80118a8 <_dtoa_r+0x2a8>
 80117de:	f7ee fca1 	bl	8000124 <__gnu_thumb1_case_uqi>
 80117e2:	3829      	.short	0x3829
 80117e4:	5836      	.short	0x5836
 80117e6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80117e8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80117ea:	189e      	adds	r6, r3, r2
 80117ec:	4b68      	ldr	r3, [pc, #416]	; (8011990 <_dtoa_r+0x390>)
 80117ee:	18f2      	adds	r2, r6, r3
 80117f0:	2a20      	cmp	r2, #32
 80117f2:	dd0f      	ble.n	8011814 <_dtoa_r+0x214>
 80117f4:	2340      	movs	r3, #64	; 0x40
 80117f6:	1a9b      	subs	r3, r3, r2
 80117f8:	409d      	lsls	r5, r3
 80117fa:	4b66      	ldr	r3, [pc, #408]	; (8011994 <_dtoa_r+0x394>)
 80117fc:	9802      	ldr	r0, [sp, #8]
 80117fe:	18f3      	adds	r3, r6, r3
 8011800:	40d8      	lsrs	r0, r3
 8011802:	4328      	orrs	r0, r5
 8011804:	f7f1 fb96 	bl	8002f34 <__aeabi_ui2d>
 8011808:	2301      	movs	r3, #1
 801180a:	4c63      	ldr	r4, [pc, #396]	; (8011998 <_dtoa_r+0x398>)
 801180c:	3e01      	subs	r6, #1
 801180e:	1909      	adds	r1, r1, r4
 8011810:	9318      	str	r3, [sp, #96]	; 0x60
 8011812:	e776      	b.n	8011702 <_dtoa_r+0x102>
 8011814:	2320      	movs	r3, #32
 8011816:	9802      	ldr	r0, [sp, #8]
 8011818:	1a9b      	subs	r3, r3, r2
 801181a:	4098      	lsls	r0, r3
 801181c:	e7f2      	b.n	8011804 <_dtoa_r+0x204>
 801181e:	9016      	str	r0, [sp, #88]	; 0x58
 8011820:	e7b8      	b.n	8011794 <_dtoa_r+0x194>
 8011822:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011824:	9a02      	ldr	r2, [sp, #8]
 8011826:	1a9b      	subs	r3, r3, r2
 8011828:	930a      	str	r3, [sp, #40]	; 0x28
 801182a:	4253      	negs	r3, r2
 801182c:	930e      	str	r3, [sp, #56]	; 0x38
 801182e:	2300      	movs	r3, #0
 8011830:	9315      	str	r3, [sp, #84]	; 0x54
 8011832:	e7c7      	b.n	80117c4 <_dtoa_r+0x1c4>
 8011834:	2300      	movs	r3, #0
 8011836:	930f      	str	r3, [sp, #60]	; 0x3c
 8011838:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801183a:	930c      	str	r3, [sp, #48]	; 0x30
 801183c:	9307      	str	r3, [sp, #28]
 801183e:	2b00      	cmp	r3, #0
 8011840:	dc13      	bgt.n	801186a <_dtoa_r+0x26a>
 8011842:	2301      	movs	r3, #1
 8011844:	001a      	movs	r2, r3
 8011846:	930c      	str	r3, [sp, #48]	; 0x30
 8011848:	9307      	str	r3, [sp, #28]
 801184a:	9223      	str	r2, [sp, #140]	; 0x8c
 801184c:	e00d      	b.n	801186a <_dtoa_r+0x26a>
 801184e:	2301      	movs	r3, #1
 8011850:	e7f1      	b.n	8011836 <_dtoa_r+0x236>
 8011852:	2300      	movs	r3, #0
 8011854:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8011856:	930f      	str	r3, [sp, #60]	; 0x3c
 8011858:	4694      	mov	ip, r2
 801185a:	9b02      	ldr	r3, [sp, #8]
 801185c:	4463      	add	r3, ip
 801185e:	930c      	str	r3, [sp, #48]	; 0x30
 8011860:	3301      	adds	r3, #1
 8011862:	9307      	str	r3, [sp, #28]
 8011864:	2b00      	cmp	r3, #0
 8011866:	dc00      	bgt.n	801186a <_dtoa_r+0x26a>
 8011868:	2301      	movs	r3, #1
 801186a:	2200      	movs	r2, #0
 801186c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801186e:	6042      	str	r2, [r0, #4]
 8011870:	3204      	adds	r2, #4
 8011872:	0015      	movs	r5, r2
 8011874:	3514      	adds	r5, #20
 8011876:	6841      	ldr	r1, [r0, #4]
 8011878:	429d      	cmp	r5, r3
 801187a:	d919      	bls.n	80118b0 <_dtoa_r+0x2b0>
 801187c:	0038      	movs	r0, r7
 801187e:	f7fe fd15 	bl	80102ac <_Balloc>
 8011882:	9006      	str	r0, [sp, #24]
 8011884:	2800      	cmp	r0, #0
 8011886:	d117      	bne.n	80118b8 <_dtoa_r+0x2b8>
 8011888:	21d5      	movs	r1, #213	; 0xd5
 801188a:	0002      	movs	r2, r0
 801188c:	4b43      	ldr	r3, [pc, #268]	; (801199c <_dtoa_r+0x39c>)
 801188e:	0049      	lsls	r1, r1, #1
 8011890:	e6cb      	b.n	801162a <_dtoa_r+0x2a>
 8011892:	2301      	movs	r3, #1
 8011894:	e7de      	b.n	8011854 <_dtoa_r+0x254>
 8011896:	2300      	movs	r3, #0
 8011898:	940f      	str	r4, [sp, #60]	; 0x3c
 801189a:	9322      	str	r3, [sp, #136]	; 0x88
 801189c:	3b01      	subs	r3, #1
 801189e:	930c      	str	r3, [sp, #48]	; 0x30
 80118a0:	9307      	str	r3, [sp, #28]
 80118a2:	2200      	movs	r2, #0
 80118a4:	3313      	adds	r3, #19
 80118a6:	e7d0      	b.n	801184a <_dtoa_r+0x24a>
 80118a8:	2301      	movs	r3, #1
 80118aa:	930f      	str	r3, [sp, #60]	; 0x3c
 80118ac:	3b02      	subs	r3, #2
 80118ae:	e7f6      	b.n	801189e <_dtoa_r+0x29e>
 80118b0:	3101      	adds	r1, #1
 80118b2:	6041      	str	r1, [r0, #4]
 80118b4:	0052      	lsls	r2, r2, #1
 80118b6:	e7dc      	b.n	8011872 <_dtoa_r+0x272>
 80118b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118ba:	9a06      	ldr	r2, [sp, #24]
 80118bc:	601a      	str	r2, [r3, #0]
 80118be:	9b07      	ldr	r3, [sp, #28]
 80118c0:	2b0e      	cmp	r3, #14
 80118c2:	d900      	bls.n	80118c6 <_dtoa_r+0x2c6>
 80118c4:	e0eb      	b.n	8011a9e <_dtoa_r+0x49e>
 80118c6:	2c00      	cmp	r4, #0
 80118c8:	d100      	bne.n	80118cc <_dtoa_r+0x2cc>
 80118ca:	e0e8      	b.n	8011a9e <_dtoa_r+0x49e>
 80118cc:	9b02      	ldr	r3, [sp, #8]
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	dd68      	ble.n	80119a4 <_dtoa_r+0x3a4>
 80118d2:	001a      	movs	r2, r3
 80118d4:	210f      	movs	r1, #15
 80118d6:	4b2d      	ldr	r3, [pc, #180]	; (801198c <_dtoa_r+0x38c>)
 80118d8:	400a      	ands	r2, r1
 80118da:	00d2      	lsls	r2, r2, #3
 80118dc:	189b      	adds	r3, r3, r2
 80118de:	681d      	ldr	r5, [r3, #0]
 80118e0:	685e      	ldr	r6, [r3, #4]
 80118e2:	9b02      	ldr	r3, [sp, #8]
 80118e4:	111c      	asrs	r4, r3, #4
 80118e6:	2302      	movs	r3, #2
 80118e8:	9310      	str	r3, [sp, #64]	; 0x40
 80118ea:	9b02      	ldr	r3, [sp, #8]
 80118ec:	05db      	lsls	r3, r3, #23
 80118ee:	d50b      	bpl.n	8011908 <_dtoa_r+0x308>
 80118f0:	4b2b      	ldr	r3, [pc, #172]	; (80119a0 <_dtoa_r+0x3a0>)
 80118f2:	400c      	ands	r4, r1
 80118f4:	6a1a      	ldr	r2, [r3, #32]
 80118f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118f8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80118fa:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80118fc:	f7f0 f896 	bl	8001a2c <__aeabi_ddiv>
 8011900:	2303      	movs	r3, #3
 8011902:	9008      	str	r0, [sp, #32]
 8011904:	9109      	str	r1, [sp, #36]	; 0x24
 8011906:	9310      	str	r3, [sp, #64]	; 0x40
 8011908:	4b25      	ldr	r3, [pc, #148]	; (80119a0 <_dtoa_r+0x3a0>)
 801190a:	9314      	str	r3, [sp, #80]	; 0x50
 801190c:	2c00      	cmp	r4, #0
 801190e:	d108      	bne.n	8011922 <_dtoa_r+0x322>
 8011910:	9808      	ldr	r0, [sp, #32]
 8011912:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011914:	002a      	movs	r2, r5
 8011916:	0033      	movs	r3, r6
 8011918:	f7f0 f888 	bl	8001a2c <__aeabi_ddiv>
 801191c:	9008      	str	r0, [sp, #32]
 801191e:	9109      	str	r1, [sp, #36]	; 0x24
 8011920:	e05c      	b.n	80119dc <_dtoa_r+0x3dc>
 8011922:	2301      	movs	r3, #1
 8011924:	421c      	tst	r4, r3
 8011926:	d00b      	beq.n	8011940 <_dtoa_r+0x340>
 8011928:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801192a:	0028      	movs	r0, r5
 801192c:	3301      	adds	r3, #1
 801192e:	9310      	str	r3, [sp, #64]	; 0x40
 8011930:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011932:	0031      	movs	r1, r6
 8011934:	681a      	ldr	r2, [r3, #0]
 8011936:	685b      	ldr	r3, [r3, #4]
 8011938:	f7f0 fc7a 	bl	8002230 <__aeabi_dmul>
 801193c:	0005      	movs	r5, r0
 801193e:	000e      	movs	r6, r1
 8011940:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011942:	1064      	asrs	r4, r4, #1
 8011944:	3308      	adds	r3, #8
 8011946:	e7e0      	b.n	801190a <_dtoa_r+0x30a>
 8011948:	08013684 	.word	0x08013684
 801194c:	08013872 	.word	0x08013872
 8011950:	7ff00000 	.word	0x7ff00000
 8011954:	0000270f 	.word	0x0000270f
 8011958:	0801386c 	.word	0x0801386c
 801195c:	0801386f 	.word	0x0801386f
 8011960:	08013870 	.word	0x08013870
 8011964:	08013871 	.word	0x08013871
 8011968:	3ff00000 	.word	0x3ff00000
 801196c:	fffffc01 	.word	0xfffffc01
 8011970:	3ff80000 	.word	0x3ff80000
 8011974:	636f4361 	.word	0x636f4361
 8011978:	3fd287a7 	.word	0x3fd287a7
 801197c:	8b60c8b3 	.word	0x8b60c8b3
 8011980:	3fc68a28 	.word	0x3fc68a28
 8011984:	509f79fb 	.word	0x509f79fb
 8011988:	3fd34413 	.word	0x3fd34413
 801198c:	08013720 	.word	0x08013720
 8011990:	00000432 	.word	0x00000432
 8011994:	00000412 	.word	0x00000412
 8011998:	fe100000 	.word	0xfe100000
 801199c:	080135f9 	.word	0x080135f9
 80119a0:	080136f8 	.word	0x080136f8
 80119a4:	2302      	movs	r3, #2
 80119a6:	9310      	str	r3, [sp, #64]	; 0x40
 80119a8:	9b02      	ldr	r3, [sp, #8]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d016      	beq.n	80119dc <_dtoa_r+0x3dc>
 80119ae:	9812      	ldr	r0, [sp, #72]	; 0x48
 80119b0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80119b2:	425c      	negs	r4, r3
 80119b4:	230f      	movs	r3, #15
 80119b6:	4ab6      	ldr	r2, [pc, #728]	; (8011c90 <_dtoa_r+0x690>)
 80119b8:	4023      	ands	r3, r4
 80119ba:	00db      	lsls	r3, r3, #3
 80119bc:	18d3      	adds	r3, r2, r3
 80119be:	681a      	ldr	r2, [r3, #0]
 80119c0:	685b      	ldr	r3, [r3, #4]
 80119c2:	f7f0 fc35 	bl	8002230 <__aeabi_dmul>
 80119c6:	2601      	movs	r6, #1
 80119c8:	2300      	movs	r3, #0
 80119ca:	9008      	str	r0, [sp, #32]
 80119cc:	9109      	str	r1, [sp, #36]	; 0x24
 80119ce:	4db1      	ldr	r5, [pc, #708]	; (8011c94 <_dtoa_r+0x694>)
 80119d0:	1124      	asrs	r4, r4, #4
 80119d2:	2c00      	cmp	r4, #0
 80119d4:	d000      	beq.n	80119d8 <_dtoa_r+0x3d8>
 80119d6:	e094      	b.n	8011b02 <_dtoa_r+0x502>
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d19f      	bne.n	801191c <_dtoa_r+0x31c>
 80119dc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d100      	bne.n	80119e4 <_dtoa_r+0x3e4>
 80119e2:	e09b      	b.n	8011b1c <_dtoa_r+0x51c>
 80119e4:	9c08      	ldr	r4, [sp, #32]
 80119e6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80119e8:	2200      	movs	r2, #0
 80119ea:	0020      	movs	r0, r4
 80119ec:	0029      	movs	r1, r5
 80119ee:	4baa      	ldr	r3, [pc, #680]	; (8011c98 <_dtoa_r+0x698>)
 80119f0:	f7ee fd38 	bl	8000464 <__aeabi_dcmplt>
 80119f4:	2800      	cmp	r0, #0
 80119f6:	d100      	bne.n	80119fa <_dtoa_r+0x3fa>
 80119f8:	e090      	b.n	8011b1c <_dtoa_r+0x51c>
 80119fa:	9b07      	ldr	r3, [sp, #28]
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d100      	bne.n	8011a02 <_dtoa_r+0x402>
 8011a00:	e08c      	b.n	8011b1c <_dtoa_r+0x51c>
 8011a02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	dd46      	ble.n	8011a96 <_dtoa_r+0x496>
 8011a08:	9b02      	ldr	r3, [sp, #8]
 8011a0a:	2200      	movs	r2, #0
 8011a0c:	0020      	movs	r0, r4
 8011a0e:	0029      	movs	r1, r5
 8011a10:	1e5e      	subs	r6, r3, #1
 8011a12:	4ba2      	ldr	r3, [pc, #648]	; (8011c9c <_dtoa_r+0x69c>)
 8011a14:	f7f0 fc0c 	bl	8002230 <__aeabi_dmul>
 8011a18:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011a1a:	9008      	str	r0, [sp, #32]
 8011a1c:	9109      	str	r1, [sp, #36]	; 0x24
 8011a1e:	3301      	adds	r3, #1
 8011a20:	9310      	str	r3, [sp, #64]	; 0x40
 8011a22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011a24:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011a26:	9c08      	ldr	r4, [sp, #32]
 8011a28:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8011a2a:	9314      	str	r3, [sp, #80]	; 0x50
 8011a2c:	f7f1 fa52 	bl	8002ed4 <__aeabi_i2d>
 8011a30:	0022      	movs	r2, r4
 8011a32:	002b      	movs	r3, r5
 8011a34:	f7f0 fbfc 	bl	8002230 <__aeabi_dmul>
 8011a38:	2200      	movs	r2, #0
 8011a3a:	4b99      	ldr	r3, [pc, #612]	; (8011ca0 <_dtoa_r+0x6a0>)
 8011a3c:	f7ef fcba 	bl	80013b4 <__aeabi_dadd>
 8011a40:	9010      	str	r0, [sp, #64]	; 0x40
 8011a42:	9111      	str	r1, [sp, #68]	; 0x44
 8011a44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011a46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011a48:	9208      	str	r2, [sp, #32]
 8011a4a:	9309      	str	r3, [sp, #36]	; 0x24
 8011a4c:	4a95      	ldr	r2, [pc, #596]	; (8011ca4 <_dtoa_r+0x6a4>)
 8011a4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011a50:	4694      	mov	ip, r2
 8011a52:	4463      	add	r3, ip
 8011a54:	9317      	str	r3, [sp, #92]	; 0x5c
 8011a56:	9309      	str	r3, [sp, #36]	; 0x24
 8011a58:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d161      	bne.n	8011b22 <_dtoa_r+0x522>
 8011a5e:	2200      	movs	r2, #0
 8011a60:	0020      	movs	r0, r4
 8011a62:	0029      	movs	r1, r5
 8011a64:	4b90      	ldr	r3, [pc, #576]	; (8011ca8 <_dtoa_r+0x6a8>)
 8011a66:	f7f0 fe4f 	bl	8002708 <__aeabi_dsub>
 8011a6a:	9a08      	ldr	r2, [sp, #32]
 8011a6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011a6e:	0004      	movs	r4, r0
 8011a70:	000d      	movs	r5, r1
 8011a72:	f7ee fd0b 	bl	800048c <__aeabi_dcmpgt>
 8011a76:	2800      	cmp	r0, #0
 8011a78:	d000      	beq.n	8011a7c <_dtoa_r+0x47c>
 8011a7a:	e2af      	b.n	8011fdc <_dtoa_r+0x9dc>
 8011a7c:	488b      	ldr	r0, [pc, #556]	; (8011cac <_dtoa_r+0x6ac>)
 8011a7e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011a80:	4684      	mov	ip, r0
 8011a82:	4461      	add	r1, ip
 8011a84:	000b      	movs	r3, r1
 8011a86:	0020      	movs	r0, r4
 8011a88:	0029      	movs	r1, r5
 8011a8a:	9a08      	ldr	r2, [sp, #32]
 8011a8c:	f7ee fcea 	bl	8000464 <__aeabi_dcmplt>
 8011a90:	2800      	cmp	r0, #0
 8011a92:	d000      	beq.n	8011a96 <_dtoa_r+0x496>
 8011a94:	e29f      	b.n	8011fd6 <_dtoa_r+0x9d6>
 8011a96:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011a98:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8011a9a:	9308      	str	r3, [sp, #32]
 8011a9c:	9409      	str	r4, [sp, #36]	; 0x24
 8011a9e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	da00      	bge.n	8011aa6 <_dtoa_r+0x4a6>
 8011aa4:	e172      	b.n	8011d8c <_dtoa_r+0x78c>
 8011aa6:	9a02      	ldr	r2, [sp, #8]
 8011aa8:	2a0e      	cmp	r2, #14
 8011aaa:	dd00      	ble.n	8011aae <_dtoa_r+0x4ae>
 8011aac:	e16e      	b.n	8011d8c <_dtoa_r+0x78c>
 8011aae:	4b78      	ldr	r3, [pc, #480]	; (8011c90 <_dtoa_r+0x690>)
 8011ab0:	00d2      	lsls	r2, r2, #3
 8011ab2:	189b      	adds	r3, r3, r2
 8011ab4:	685c      	ldr	r4, [r3, #4]
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	930a      	str	r3, [sp, #40]	; 0x28
 8011aba:	940b      	str	r4, [sp, #44]	; 0x2c
 8011abc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	db00      	blt.n	8011ac4 <_dtoa_r+0x4c4>
 8011ac2:	e0f7      	b.n	8011cb4 <_dtoa_r+0x6b4>
 8011ac4:	9b07      	ldr	r3, [sp, #28]
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	dd00      	ble.n	8011acc <_dtoa_r+0x4cc>
 8011aca:	e0f3      	b.n	8011cb4 <_dtoa_r+0x6b4>
 8011acc:	d000      	beq.n	8011ad0 <_dtoa_r+0x4d0>
 8011ace:	e282      	b.n	8011fd6 <_dtoa_r+0x9d6>
 8011ad0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8011ad2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011ad4:	2200      	movs	r2, #0
 8011ad6:	4b74      	ldr	r3, [pc, #464]	; (8011ca8 <_dtoa_r+0x6a8>)
 8011ad8:	f7f0 fbaa 	bl	8002230 <__aeabi_dmul>
 8011adc:	9a08      	ldr	r2, [sp, #32]
 8011ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ae0:	f7ee fcde 	bl	80004a0 <__aeabi_dcmpge>
 8011ae4:	9e07      	ldr	r6, [sp, #28]
 8011ae6:	0035      	movs	r5, r6
 8011ae8:	2800      	cmp	r0, #0
 8011aea:	d000      	beq.n	8011aee <_dtoa_r+0x4ee>
 8011aec:	e259      	b.n	8011fa2 <_dtoa_r+0x9a2>
 8011aee:	9b06      	ldr	r3, [sp, #24]
 8011af0:	9a06      	ldr	r2, [sp, #24]
 8011af2:	3301      	adds	r3, #1
 8011af4:	9308      	str	r3, [sp, #32]
 8011af6:	2331      	movs	r3, #49	; 0x31
 8011af8:	7013      	strb	r3, [r2, #0]
 8011afa:	9b02      	ldr	r3, [sp, #8]
 8011afc:	3301      	adds	r3, #1
 8011afe:	9302      	str	r3, [sp, #8]
 8011b00:	e254      	b.n	8011fac <_dtoa_r+0x9ac>
 8011b02:	4234      	tst	r4, r6
 8011b04:	d007      	beq.n	8011b16 <_dtoa_r+0x516>
 8011b06:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011b08:	3301      	adds	r3, #1
 8011b0a:	9310      	str	r3, [sp, #64]	; 0x40
 8011b0c:	682a      	ldr	r2, [r5, #0]
 8011b0e:	686b      	ldr	r3, [r5, #4]
 8011b10:	f7f0 fb8e 	bl	8002230 <__aeabi_dmul>
 8011b14:	0033      	movs	r3, r6
 8011b16:	1064      	asrs	r4, r4, #1
 8011b18:	3508      	adds	r5, #8
 8011b1a:	e75a      	b.n	80119d2 <_dtoa_r+0x3d2>
 8011b1c:	9e02      	ldr	r6, [sp, #8]
 8011b1e:	9b07      	ldr	r3, [sp, #28]
 8011b20:	e780      	b.n	8011a24 <_dtoa_r+0x424>
 8011b22:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011b24:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011b26:	1e5a      	subs	r2, r3, #1
 8011b28:	4b59      	ldr	r3, [pc, #356]	; (8011c90 <_dtoa_r+0x690>)
 8011b2a:	00d2      	lsls	r2, r2, #3
 8011b2c:	189b      	adds	r3, r3, r2
 8011b2e:	681a      	ldr	r2, [r3, #0]
 8011b30:	685b      	ldr	r3, [r3, #4]
 8011b32:	2900      	cmp	r1, #0
 8011b34:	d051      	beq.n	8011bda <_dtoa_r+0x5da>
 8011b36:	2000      	movs	r0, #0
 8011b38:	495d      	ldr	r1, [pc, #372]	; (8011cb0 <_dtoa_r+0x6b0>)
 8011b3a:	f7ef ff77 	bl	8001a2c <__aeabi_ddiv>
 8011b3e:	9a08      	ldr	r2, [sp, #32]
 8011b40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b42:	f7f0 fde1 	bl	8002708 <__aeabi_dsub>
 8011b46:	9a06      	ldr	r2, [sp, #24]
 8011b48:	9b06      	ldr	r3, [sp, #24]
 8011b4a:	4694      	mov	ip, r2
 8011b4c:	9317      	str	r3, [sp, #92]	; 0x5c
 8011b4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011b50:	9010      	str	r0, [sp, #64]	; 0x40
 8011b52:	9111      	str	r1, [sp, #68]	; 0x44
 8011b54:	4463      	add	r3, ip
 8011b56:	9319      	str	r3, [sp, #100]	; 0x64
 8011b58:	0029      	movs	r1, r5
 8011b5a:	0020      	movs	r0, r4
 8011b5c:	f7f1 f984 	bl	8002e68 <__aeabi_d2iz>
 8011b60:	9014      	str	r0, [sp, #80]	; 0x50
 8011b62:	f7f1 f9b7 	bl	8002ed4 <__aeabi_i2d>
 8011b66:	0002      	movs	r2, r0
 8011b68:	000b      	movs	r3, r1
 8011b6a:	0020      	movs	r0, r4
 8011b6c:	0029      	movs	r1, r5
 8011b6e:	f7f0 fdcb 	bl	8002708 <__aeabi_dsub>
 8011b72:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011b74:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011b76:	3301      	adds	r3, #1
 8011b78:	9308      	str	r3, [sp, #32]
 8011b7a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011b7c:	0004      	movs	r4, r0
 8011b7e:	3330      	adds	r3, #48	; 0x30
 8011b80:	7013      	strb	r3, [r2, #0]
 8011b82:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011b84:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011b86:	000d      	movs	r5, r1
 8011b88:	f7ee fc6c 	bl	8000464 <__aeabi_dcmplt>
 8011b8c:	2800      	cmp	r0, #0
 8011b8e:	d175      	bne.n	8011c7c <_dtoa_r+0x67c>
 8011b90:	0022      	movs	r2, r4
 8011b92:	002b      	movs	r3, r5
 8011b94:	2000      	movs	r0, #0
 8011b96:	4940      	ldr	r1, [pc, #256]	; (8011c98 <_dtoa_r+0x698>)
 8011b98:	f7f0 fdb6 	bl	8002708 <__aeabi_dsub>
 8011b9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011b9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011ba0:	f7ee fc60 	bl	8000464 <__aeabi_dcmplt>
 8011ba4:	2800      	cmp	r0, #0
 8011ba6:	d000      	beq.n	8011baa <_dtoa_r+0x5aa>
 8011ba8:	e0d2      	b.n	8011d50 <_dtoa_r+0x750>
 8011baa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011bac:	9a08      	ldr	r2, [sp, #32]
 8011bae:	4293      	cmp	r3, r2
 8011bb0:	d100      	bne.n	8011bb4 <_dtoa_r+0x5b4>
 8011bb2:	e770      	b.n	8011a96 <_dtoa_r+0x496>
 8011bb4:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011bb6:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011bb8:	2200      	movs	r2, #0
 8011bba:	4b38      	ldr	r3, [pc, #224]	; (8011c9c <_dtoa_r+0x69c>)
 8011bbc:	f7f0 fb38 	bl	8002230 <__aeabi_dmul>
 8011bc0:	4b36      	ldr	r3, [pc, #216]	; (8011c9c <_dtoa_r+0x69c>)
 8011bc2:	9010      	str	r0, [sp, #64]	; 0x40
 8011bc4:	9111      	str	r1, [sp, #68]	; 0x44
 8011bc6:	2200      	movs	r2, #0
 8011bc8:	0020      	movs	r0, r4
 8011bca:	0029      	movs	r1, r5
 8011bcc:	f7f0 fb30 	bl	8002230 <__aeabi_dmul>
 8011bd0:	9b08      	ldr	r3, [sp, #32]
 8011bd2:	0004      	movs	r4, r0
 8011bd4:	000d      	movs	r5, r1
 8011bd6:	9317      	str	r3, [sp, #92]	; 0x5c
 8011bd8:	e7be      	b.n	8011b58 <_dtoa_r+0x558>
 8011bda:	9808      	ldr	r0, [sp, #32]
 8011bdc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011bde:	f7f0 fb27 	bl	8002230 <__aeabi_dmul>
 8011be2:	9a06      	ldr	r2, [sp, #24]
 8011be4:	9b06      	ldr	r3, [sp, #24]
 8011be6:	4694      	mov	ip, r2
 8011be8:	9308      	str	r3, [sp, #32]
 8011bea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011bec:	9010      	str	r0, [sp, #64]	; 0x40
 8011bee:	9111      	str	r1, [sp, #68]	; 0x44
 8011bf0:	4463      	add	r3, ip
 8011bf2:	9319      	str	r3, [sp, #100]	; 0x64
 8011bf4:	0029      	movs	r1, r5
 8011bf6:	0020      	movs	r0, r4
 8011bf8:	f7f1 f936 	bl	8002e68 <__aeabi_d2iz>
 8011bfc:	9017      	str	r0, [sp, #92]	; 0x5c
 8011bfe:	f7f1 f969 	bl	8002ed4 <__aeabi_i2d>
 8011c02:	0002      	movs	r2, r0
 8011c04:	000b      	movs	r3, r1
 8011c06:	0020      	movs	r0, r4
 8011c08:	0029      	movs	r1, r5
 8011c0a:	f7f0 fd7d 	bl	8002708 <__aeabi_dsub>
 8011c0e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011c10:	9a08      	ldr	r2, [sp, #32]
 8011c12:	3330      	adds	r3, #48	; 0x30
 8011c14:	7013      	strb	r3, [r2, #0]
 8011c16:	0013      	movs	r3, r2
 8011c18:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8011c1a:	3301      	adds	r3, #1
 8011c1c:	0004      	movs	r4, r0
 8011c1e:	000d      	movs	r5, r1
 8011c20:	9308      	str	r3, [sp, #32]
 8011c22:	4293      	cmp	r3, r2
 8011c24:	d12c      	bne.n	8011c80 <_dtoa_r+0x680>
 8011c26:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011c28:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011c2a:	9a06      	ldr	r2, [sp, #24]
 8011c2c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011c2e:	4694      	mov	ip, r2
 8011c30:	4463      	add	r3, ip
 8011c32:	2200      	movs	r2, #0
 8011c34:	9308      	str	r3, [sp, #32]
 8011c36:	4b1e      	ldr	r3, [pc, #120]	; (8011cb0 <_dtoa_r+0x6b0>)
 8011c38:	f7ef fbbc 	bl	80013b4 <__aeabi_dadd>
 8011c3c:	0002      	movs	r2, r0
 8011c3e:	000b      	movs	r3, r1
 8011c40:	0020      	movs	r0, r4
 8011c42:	0029      	movs	r1, r5
 8011c44:	f7ee fc22 	bl	800048c <__aeabi_dcmpgt>
 8011c48:	2800      	cmp	r0, #0
 8011c4a:	d000      	beq.n	8011c4e <_dtoa_r+0x64e>
 8011c4c:	e080      	b.n	8011d50 <_dtoa_r+0x750>
 8011c4e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011c50:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011c52:	2000      	movs	r0, #0
 8011c54:	4916      	ldr	r1, [pc, #88]	; (8011cb0 <_dtoa_r+0x6b0>)
 8011c56:	f7f0 fd57 	bl	8002708 <__aeabi_dsub>
 8011c5a:	0002      	movs	r2, r0
 8011c5c:	000b      	movs	r3, r1
 8011c5e:	0020      	movs	r0, r4
 8011c60:	0029      	movs	r1, r5
 8011c62:	f7ee fbff 	bl	8000464 <__aeabi_dcmplt>
 8011c66:	2800      	cmp	r0, #0
 8011c68:	d100      	bne.n	8011c6c <_dtoa_r+0x66c>
 8011c6a:	e714      	b.n	8011a96 <_dtoa_r+0x496>
 8011c6c:	9b08      	ldr	r3, [sp, #32]
 8011c6e:	001a      	movs	r2, r3
 8011c70:	3a01      	subs	r2, #1
 8011c72:	9208      	str	r2, [sp, #32]
 8011c74:	7812      	ldrb	r2, [r2, #0]
 8011c76:	2a30      	cmp	r2, #48	; 0x30
 8011c78:	d0f8      	beq.n	8011c6c <_dtoa_r+0x66c>
 8011c7a:	9308      	str	r3, [sp, #32]
 8011c7c:	9602      	str	r6, [sp, #8]
 8011c7e:	e055      	b.n	8011d2c <_dtoa_r+0x72c>
 8011c80:	2200      	movs	r2, #0
 8011c82:	4b06      	ldr	r3, [pc, #24]	; (8011c9c <_dtoa_r+0x69c>)
 8011c84:	f7f0 fad4 	bl	8002230 <__aeabi_dmul>
 8011c88:	0004      	movs	r4, r0
 8011c8a:	000d      	movs	r5, r1
 8011c8c:	e7b2      	b.n	8011bf4 <_dtoa_r+0x5f4>
 8011c8e:	46c0      	nop			; (mov r8, r8)
 8011c90:	08013720 	.word	0x08013720
 8011c94:	080136f8 	.word	0x080136f8
 8011c98:	3ff00000 	.word	0x3ff00000
 8011c9c:	40240000 	.word	0x40240000
 8011ca0:	401c0000 	.word	0x401c0000
 8011ca4:	fcc00000 	.word	0xfcc00000
 8011ca8:	40140000 	.word	0x40140000
 8011cac:	7cc00000 	.word	0x7cc00000
 8011cb0:	3fe00000 	.word	0x3fe00000
 8011cb4:	9b07      	ldr	r3, [sp, #28]
 8011cb6:	9e06      	ldr	r6, [sp, #24]
 8011cb8:	3b01      	subs	r3, #1
 8011cba:	199b      	adds	r3, r3, r6
 8011cbc:	930c      	str	r3, [sp, #48]	; 0x30
 8011cbe:	9c08      	ldr	r4, [sp, #32]
 8011cc0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8011cc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011cc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011cc6:	0020      	movs	r0, r4
 8011cc8:	0029      	movs	r1, r5
 8011cca:	f7ef feaf 	bl	8001a2c <__aeabi_ddiv>
 8011cce:	f7f1 f8cb 	bl	8002e68 <__aeabi_d2iz>
 8011cd2:	9007      	str	r0, [sp, #28]
 8011cd4:	f7f1 f8fe 	bl	8002ed4 <__aeabi_i2d>
 8011cd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011cda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011cdc:	f7f0 faa8 	bl	8002230 <__aeabi_dmul>
 8011ce0:	0002      	movs	r2, r0
 8011ce2:	000b      	movs	r3, r1
 8011ce4:	0020      	movs	r0, r4
 8011ce6:	0029      	movs	r1, r5
 8011ce8:	f7f0 fd0e 	bl	8002708 <__aeabi_dsub>
 8011cec:	0033      	movs	r3, r6
 8011cee:	9a07      	ldr	r2, [sp, #28]
 8011cf0:	3601      	adds	r6, #1
 8011cf2:	3230      	adds	r2, #48	; 0x30
 8011cf4:	701a      	strb	r2, [r3, #0]
 8011cf6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011cf8:	9608      	str	r6, [sp, #32]
 8011cfa:	429a      	cmp	r2, r3
 8011cfc:	d139      	bne.n	8011d72 <_dtoa_r+0x772>
 8011cfe:	0002      	movs	r2, r0
 8011d00:	000b      	movs	r3, r1
 8011d02:	f7ef fb57 	bl	80013b4 <__aeabi_dadd>
 8011d06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011d08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011d0a:	0004      	movs	r4, r0
 8011d0c:	000d      	movs	r5, r1
 8011d0e:	f7ee fbbd 	bl	800048c <__aeabi_dcmpgt>
 8011d12:	2800      	cmp	r0, #0
 8011d14:	d11b      	bne.n	8011d4e <_dtoa_r+0x74e>
 8011d16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011d18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011d1a:	0020      	movs	r0, r4
 8011d1c:	0029      	movs	r1, r5
 8011d1e:	f7ee fb9b 	bl	8000458 <__aeabi_dcmpeq>
 8011d22:	2800      	cmp	r0, #0
 8011d24:	d002      	beq.n	8011d2c <_dtoa_r+0x72c>
 8011d26:	9b07      	ldr	r3, [sp, #28]
 8011d28:	07db      	lsls	r3, r3, #31
 8011d2a:	d410      	bmi.n	8011d4e <_dtoa_r+0x74e>
 8011d2c:	0038      	movs	r0, r7
 8011d2e:	9905      	ldr	r1, [sp, #20]
 8011d30:	f7fe fb00 	bl	8010334 <_Bfree>
 8011d34:	2300      	movs	r3, #0
 8011d36:	9a08      	ldr	r2, [sp, #32]
 8011d38:	9802      	ldr	r0, [sp, #8]
 8011d3a:	7013      	strb	r3, [r2, #0]
 8011d3c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8011d3e:	3001      	adds	r0, #1
 8011d40:	6018      	str	r0, [r3, #0]
 8011d42:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d100      	bne.n	8011d4a <_dtoa_r+0x74a>
 8011d48:	e4a6      	b.n	8011698 <_dtoa_r+0x98>
 8011d4a:	601a      	str	r2, [r3, #0]
 8011d4c:	e4a4      	b.n	8011698 <_dtoa_r+0x98>
 8011d4e:	9e02      	ldr	r6, [sp, #8]
 8011d50:	9b08      	ldr	r3, [sp, #32]
 8011d52:	9308      	str	r3, [sp, #32]
 8011d54:	3b01      	subs	r3, #1
 8011d56:	781a      	ldrb	r2, [r3, #0]
 8011d58:	2a39      	cmp	r2, #57	; 0x39
 8011d5a:	d106      	bne.n	8011d6a <_dtoa_r+0x76a>
 8011d5c:	9a06      	ldr	r2, [sp, #24]
 8011d5e:	429a      	cmp	r2, r3
 8011d60:	d1f7      	bne.n	8011d52 <_dtoa_r+0x752>
 8011d62:	2230      	movs	r2, #48	; 0x30
 8011d64:	9906      	ldr	r1, [sp, #24]
 8011d66:	3601      	adds	r6, #1
 8011d68:	700a      	strb	r2, [r1, #0]
 8011d6a:	781a      	ldrb	r2, [r3, #0]
 8011d6c:	3201      	adds	r2, #1
 8011d6e:	701a      	strb	r2, [r3, #0]
 8011d70:	e784      	b.n	8011c7c <_dtoa_r+0x67c>
 8011d72:	2200      	movs	r2, #0
 8011d74:	4baa      	ldr	r3, [pc, #680]	; (8012020 <_dtoa_r+0xa20>)
 8011d76:	f7f0 fa5b 	bl	8002230 <__aeabi_dmul>
 8011d7a:	2200      	movs	r2, #0
 8011d7c:	2300      	movs	r3, #0
 8011d7e:	0004      	movs	r4, r0
 8011d80:	000d      	movs	r5, r1
 8011d82:	f7ee fb69 	bl	8000458 <__aeabi_dcmpeq>
 8011d86:	2800      	cmp	r0, #0
 8011d88:	d09b      	beq.n	8011cc2 <_dtoa_r+0x6c2>
 8011d8a:	e7cf      	b.n	8011d2c <_dtoa_r+0x72c>
 8011d8c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8011d8e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8011d90:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8011d92:	2d00      	cmp	r5, #0
 8011d94:	d012      	beq.n	8011dbc <_dtoa_r+0x7bc>
 8011d96:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8011d98:	2a01      	cmp	r2, #1
 8011d9a:	dc66      	bgt.n	8011e6a <_dtoa_r+0x86a>
 8011d9c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011d9e:	2a00      	cmp	r2, #0
 8011da0:	d05d      	beq.n	8011e5e <_dtoa_r+0x85e>
 8011da2:	4aa0      	ldr	r2, [pc, #640]	; (8012024 <_dtoa_r+0xa24>)
 8011da4:	189b      	adds	r3, r3, r2
 8011da6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011da8:	2101      	movs	r1, #1
 8011daa:	18d2      	adds	r2, r2, r3
 8011dac:	920a      	str	r2, [sp, #40]	; 0x28
 8011dae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011db0:	0038      	movs	r0, r7
 8011db2:	18d3      	adds	r3, r2, r3
 8011db4:	930d      	str	r3, [sp, #52]	; 0x34
 8011db6:	f7fe fbb9 	bl	801052c <__i2b>
 8011dba:	0005      	movs	r5, r0
 8011dbc:	2c00      	cmp	r4, #0
 8011dbe:	dd0e      	ble.n	8011dde <_dtoa_r+0x7de>
 8011dc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	dd0b      	ble.n	8011dde <_dtoa_r+0x7de>
 8011dc6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011dc8:	0023      	movs	r3, r4
 8011dca:	4294      	cmp	r4, r2
 8011dcc:	dd00      	ble.n	8011dd0 <_dtoa_r+0x7d0>
 8011dce:	0013      	movs	r3, r2
 8011dd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011dd2:	1ae4      	subs	r4, r4, r3
 8011dd4:	1ad2      	subs	r2, r2, r3
 8011dd6:	920a      	str	r2, [sp, #40]	; 0x28
 8011dd8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011dda:	1ad3      	subs	r3, r2, r3
 8011ddc:	930d      	str	r3, [sp, #52]	; 0x34
 8011dde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d01f      	beq.n	8011e24 <_dtoa_r+0x824>
 8011de4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d054      	beq.n	8011e94 <_dtoa_r+0x894>
 8011dea:	2e00      	cmp	r6, #0
 8011dec:	dd11      	ble.n	8011e12 <_dtoa_r+0x812>
 8011dee:	0029      	movs	r1, r5
 8011df0:	0032      	movs	r2, r6
 8011df2:	0038      	movs	r0, r7
 8011df4:	f7fe fc60 	bl	80106b8 <__pow5mult>
 8011df8:	9a05      	ldr	r2, [sp, #20]
 8011dfa:	0001      	movs	r1, r0
 8011dfc:	0005      	movs	r5, r0
 8011dfe:	0038      	movs	r0, r7
 8011e00:	f7fe fbaa 	bl	8010558 <__multiply>
 8011e04:	9905      	ldr	r1, [sp, #20]
 8011e06:	9014      	str	r0, [sp, #80]	; 0x50
 8011e08:	0038      	movs	r0, r7
 8011e0a:	f7fe fa93 	bl	8010334 <_Bfree>
 8011e0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011e10:	9305      	str	r3, [sp, #20]
 8011e12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011e14:	1b9a      	subs	r2, r3, r6
 8011e16:	42b3      	cmp	r3, r6
 8011e18:	d004      	beq.n	8011e24 <_dtoa_r+0x824>
 8011e1a:	0038      	movs	r0, r7
 8011e1c:	9905      	ldr	r1, [sp, #20]
 8011e1e:	f7fe fc4b 	bl	80106b8 <__pow5mult>
 8011e22:	9005      	str	r0, [sp, #20]
 8011e24:	2101      	movs	r1, #1
 8011e26:	0038      	movs	r0, r7
 8011e28:	f7fe fb80 	bl	801052c <__i2b>
 8011e2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011e2e:	0006      	movs	r6, r0
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	dd31      	ble.n	8011e98 <_dtoa_r+0x898>
 8011e34:	001a      	movs	r2, r3
 8011e36:	0001      	movs	r1, r0
 8011e38:	0038      	movs	r0, r7
 8011e3a:	f7fe fc3d 	bl	80106b8 <__pow5mult>
 8011e3e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011e40:	0006      	movs	r6, r0
 8011e42:	2b01      	cmp	r3, #1
 8011e44:	dd2d      	ble.n	8011ea2 <_dtoa_r+0x8a2>
 8011e46:	2300      	movs	r3, #0
 8011e48:	930e      	str	r3, [sp, #56]	; 0x38
 8011e4a:	6933      	ldr	r3, [r6, #16]
 8011e4c:	3303      	adds	r3, #3
 8011e4e:	009b      	lsls	r3, r3, #2
 8011e50:	18f3      	adds	r3, r6, r3
 8011e52:	6858      	ldr	r0, [r3, #4]
 8011e54:	f7fe fb22 	bl	801049c <__hi0bits>
 8011e58:	2320      	movs	r3, #32
 8011e5a:	1a18      	subs	r0, r3, r0
 8011e5c:	e039      	b.n	8011ed2 <_dtoa_r+0x8d2>
 8011e5e:	2336      	movs	r3, #54	; 0x36
 8011e60:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8011e62:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8011e64:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8011e66:	1a9b      	subs	r3, r3, r2
 8011e68:	e79d      	b.n	8011da6 <_dtoa_r+0x7a6>
 8011e6a:	9b07      	ldr	r3, [sp, #28]
 8011e6c:	1e5e      	subs	r6, r3, #1
 8011e6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011e70:	42b3      	cmp	r3, r6
 8011e72:	db07      	blt.n	8011e84 <_dtoa_r+0x884>
 8011e74:	1b9e      	subs	r6, r3, r6
 8011e76:	9b07      	ldr	r3, [sp, #28]
 8011e78:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	da93      	bge.n	8011da6 <_dtoa_r+0x7a6>
 8011e7e:	1ae4      	subs	r4, r4, r3
 8011e80:	2300      	movs	r3, #0
 8011e82:	e790      	b.n	8011da6 <_dtoa_r+0x7a6>
 8011e84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011e86:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011e88:	1af3      	subs	r3, r6, r3
 8011e8a:	18d3      	adds	r3, r2, r3
 8011e8c:	960e      	str	r6, [sp, #56]	; 0x38
 8011e8e:	9315      	str	r3, [sp, #84]	; 0x54
 8011e90:	2600      	movs	r6, #0
 8011e92:	e7f0      	b.n	8011e76 <_dtoa_r+0x876>
 8011e94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011e96:	e7c0      	b.n	8011e1a <_dtoa_r+0x81a>
 8011e98:	2300      	movs	r3, #0
 8011e9a:	930e      	str	r3, [sp, #56]	; 0x38
 8011e9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011e9e:	2b01      	cmp	r3, #1
 8011ea0:	dc13      	bgt.n	8011eca <_dtoa_r+0x8ca>
 8011ea2:	2300      	movs	r3, #0
 8011ea4:	930e      	str	r3, [sp, #56]	; 0x38
 8011ea6:	9b08      	ldr	r3, [sp, #32]
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d10e      	bne.n	8011eca <_dtoa_r+0x8ca>
 8011eac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011eae:	031b      	lsls	r3, r3, #12
 8011eb0:	d10b      	bne.n	8011eca <_dtoa_r+0x8ca>
 8011eb2:	4b5d      	ldr	r3, [pc, #372]	; (8012028 <_dtoa_r+0xa28>)
 8011eb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011eb6:	4213      	tst	r3, r2
 8011eb8:	d007      	beq.n	8011eca <_dtoa_r+0x8ca>
 8011eba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011ebc:	3301      	adds	r3, #1
 8011ebe:	930a      	str	r3, [sp, #40]	; 0x28
 8011ec0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011ec2:	3301      	adds	r3, #1
 8011ec4:	930d      	str	r3, [sp, #52]	; 0x34
 8011ec6:	2301      	movs	r3, #1
 8011ec8:	930e      	str	r3, [sp, #56]	; 0x38
 8011eca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011ecc:	2001      	movs	r0, #1
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d1bb      	bne.n	8011e4a <_dtoa_r+0x84a>
 8011ed2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011ed4:	221f      	movs	r2, #31
 8011ed6:	1818      	adds	r0, r3, r0
 8011ed8:	0003      	movs	r3, r0
 8011eda:	4013      	ands	r3, r2
 8011edc:	4210      	tst	r0, r2
 8011ede:	d046      	beq.n	8011f6e <_dtoa_r+0x96e>
 8011ee0:	3201      	adds	r2, #1
 8011ee2:	1ad2      	subs	r2, r2, r3
 8011ee4:	2a04      	cmp	r2, #4
 8011ee6:	dd3f      	ble.n	8011f68 <_dtoa_r+0x968>
 8011ee8:	221c      	movs	r2, #28
 8011eea:	1ad3      	subs	r3, r2, r3
 8011eec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011eee:	18e4      	adds	r4, r4, r3
 8011ef0:	18d2      	adds	r2, r2, r3
 8011ef2:	920a      	str	r2, [sp, #40]	; 0x28
 8011ef4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011ef6:	18d3      	adds	r3, r2, r3
 8011ef8:	930d      	str	r3, [sp, #52]	; 0x34
 8011efa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	dd05      	ble.n	8011f0c <_dtoa_r+0x90c>
 8011f00:	001a      	movs	r2, r3
 8011f02:	0038      	movs	r0, r7
 8011f04:	9905      	ldr	r1, [sp, #20]
 8011f06:	f7fe fc33 	bl	8010770 <__lshift>
 8011f0a:	9005      	str	r0, [sp, #20]
 8011f0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	dd05      	ble.n	8011f1e <_dtoa_r+0x91e>
 8011f12:	0031      	movs	r1, r6
 8011f14:	001a      	movs	r2, r3
 8011f16:	0038      	movs	r0, r7
 8011f18:	f7fe fc2a 	bl	8010770 <__lshift>
 8011f1c:	0006      	movs	r6, r0
 8011f1e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d026      	beq.n	8011f72 <_dtoa_r+0x972>
 8011f24:	0031      	movs	r1, r6
 8011f26:	9805      	ldr	r0, [sp, #20]
 8011f28:	f7fe fc90 	bl	801084c <__mcmp>
 8011f2c:	2800      	cmp	r0, #0
 8011f2e:	da20      	bge.n	8011f72 <_dtoa_r+0x972>
 8011f30:	9b02      	ldr	r3, [sp, #8]
 8011f32:	220a      	movs	r2, #10
 8011f34:	3b01      	subs	r3, #1
 8011f36:	9302      	str	r3, [sp, #8]
 8011f38:	0038      	movs	r0, r7
 8011f3a:	2300      	movs	r3, #0
 8011f3c:	9905      	ldr	r1, [sp, #20]
 8011f3e:	f7fe fa1d 	bl	801037c <__multadd>
 8011f42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011f44:	9005      	str	r0, [sp, #20]
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d100      	bne.n	8011f4c <_dtoa_r+0x94c>
 8011f4a:	e166      	b.n	801221a <_dtoa_r+0xc1a>
 8011f4c:	2300      	movs	r3, #0
 8011f4e:	0029      	movs	r1, r5
 8011f50:	220a      	movs	r2, #10
 8011f52:	0038      	movs	r0, r7
 8011f54:	f7fe fa12 	bl	801037c <__multadd>
 8011f58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011f5a:	0005      	movs	r5, r0
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	dc47      	bgt.n	8011ff0 <_dtoa_r+0x9f0>
 8011f60:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011f62:	2b02      	cmp	r3, #2
 8011f64:	dc0d      	bgt.n	8011f82 <_dtoa_r+0x982>
 8011f66:	e043      	b.n	8011ff0 <_dtoa_r+0x9f0>
 8011f68:	2a04      	cmp	r2, #4
 8011f6a:	d0c6      	beq.n	8011efa <_dtoa_r+0x8fa>
 8011f6c:	0013      	movs	r3, r2
 8011f6e:	331c      	adds	r3, #28
 8011f70:	e7bc      	b.n	8011eec <_dtoa_r+0x8ec>
 8011f72:	9b07      	ldr	r3, [sp, #28]
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	dc35      	bgt.n	8011fe4 <_dtoa_r+0x9e4>
 8011f78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011f7a:	2b02      	cmp	r3, #2
 8011f7c:	dd32      	ble.n	8011fe4 <_dtoa_r+0x9e4>
 8011f7e:	9b07      	ldr	r3, [sp, #28]
 8011f80:	930c      	str	r3, [sp, #48]	; 0x30
 8011f82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d10c      	bne.n	8011fa2 <_dtoa_r+0x9a2>
 8011f88:	0031      	movs	r1, r6
 8011f8a:	2205      	movs	r2, #5
 8011f8c:	0038      	movs	r0, r7
 8011f8e:	f7fe f9f5 	bl	801037c <__multadd>
 8011f92:	0006      	movs	r6, r0
 8011f94:	0001      	movs	r1, r0
 8011f96:	9805      	ldr	r0, [sp, #20]
 8011f98:	f7fe fc58 	bl	801084c <__mcmp>
 8011f9c:	2800      	cmp	r0, #0
 8011f9e:	dd00      	ble.n	8011fa2 <_dtoa_r+0x9a2>
 8011fa0:	e5a5      	b.n	8011aee <_dtoa_r+0x4ee>
 8011fa2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011fa4:	43db      	mvns	r3, r3
 8011fa6:	9302      	str	r3, [sp, #8]
 8011fa8:	9b06      	ldr	r3, [sp, #24]
 8011faa:	9308      	str	r3, [sp, #32]
 8011fac:	2400      	movs	r4, #0
 8011fae:	0031      	movs	r1, r6
 8011fb0:	0038      	movs	r0, r7
 8011fb2:	f7fe f9bf 	bl	8010334 <_Bfree>
 8011fb6:	2d00      	cmp	r5, #0
 8011fb8:	d100      	bne.n	8011fbc <_dtoa_r+0x9bc>
 8011fba:	e6b7      	b.n	8011d2c <_dtoa_r+0x72c>
 8011fbc:	2c00      	cmp	r4, #0
 8011fbe:	d005      	beq.n	8011fcc <_dtoa_r+0x9cc>
 8011fc0:	42ac      	cmp	r4, r5
 8011fc2:	d003      	beq.n	8011fcc <_dtoa_r+0x9cc>
 8011fc4:	0021      	movs	r1, r4
 8011fc6:	0038      	movs	r0, r7
 8011fc8:	f7fe f9b4 	bl	8010334 <_Bfree>
 8011fcc:	0029      	movs	r1, r5
 8011fce:	0038      	movs	r0, r7
 8011fd0:	f7fe f9b0 	bl	8010334 <_Bfree>
 8011fd4:	e6aa      	b.n	8011d2c <_dtoa_r+0x72c>
 8011fd6:	2600      	movs	r6, #0
 8011fd8:	0035      	movs	r5, r6
 8011fda:	e7e2      	b.n	8011fa2 <_dtoa_r+0x9a2>
 8011fdc:	9602      	str	r6, [sp, #8]
 8011fde:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8011fe0:	0035      	movs	r5, r6
 8011fe2:	e584      	b.n	8011aee <_dtoa_r+0x4ee>
 8011fe4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d100      	bne.n	8011fec <_dtoa_r+0x9ec>
 8011fea:	e0ce      	b.n	801218a <_dtoa_r+0xb8a>
 8011fec:	9b07      	ldr	r3, [sp, #28]
 8011fee:	930c      	str	r3, [sp, #48]	; 0x30
 8011ff0:	2c00      	cmp	r4, #0
 8011ff2:	dd05      	ble.n	8012000 <_dtoa_r+0xa00>
 8011ff4:	0029      	movs	r1, r5
 8011ff6:	0022      	movs	r2, r4
 8011ff8:	0038      	movs	r0, r7
 8011ffa:	f7fe fbb9 	bl	8010770 <__lshift>
 8011ffe:	0005      	movs	r5, r0
 8012000:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012002:	0028      	movs	r0, r5
 8012004:	2b00      	cmp	r3, #0
 8012006:	d022      	beq.n	801204e <_dtoa_r+0xa4e>
 8012008:	0038      	movs	r0, r7
 801200a:	6869      	ldr	r1, [r5, #4]
 801200c:	f7fe f94e 	bl	80102ac <_Balloc>
 8012010:	1e04      	subs	r4, r0, #0
 8012012:	d10f      	bne.n	8012034 <_dtoa_r+0xa34>
 8012014:	0002      	movs	r2, r0
 8012016:	4b05      	ldr	r3, [pc, #20]	; (801202c <_dtoa_r+0xa2c>)
 8012018:	4905      	ldr	r1, [pc, #20]	; (8012030 <_dtoa_r+0xa30>)
 801201a:	f7ff fb06 	bl	801162a <_dtoa_r+0x2a>
 801201e:	46c0      	nop			; (mov r8, r8)
 8012020:	40240000 	.word	0x40240000
 8012024:	00000433 	.word	0x00000433
 8012028:	7ff00000 	.word	0x7ff00000
 801202c:	080135f9 	.word	0x080135f9
 8012030:	000002ea 	.word	0x000002ea
 8012034:	0029      	movs	r1, r5
 8012036:	692b      	ldr	r3, [r5, #16]
 8012038:	310c      	adds	r1, #12
 801203a:	1c9a      	adds	r2, r3, #2
 801203c:	0092      	lsls	r2, r2, #2
 801203e:	300c      	adds	r0, #12
 8012040:	f7fc fcc8 	bl	800e9d4 <memcpy>
 8012044:	2201      	movs	r2, #1
 8012046:	0021      	movs	r1, r4
 8012048:	0038      	movs	r0, r7
 801204a:	f7fe fb91 	bl	8010770 <__lshift>
 801204e:	9b06      	ldr	r3, [sp, #24]
 8012050:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012052:	930a      	str	r3, [sp, #40]	; 0x28
 8012054:	3b01      	subs	r3, #1
 8012056:	189b      	adds	r3, r3, r2
 8012058:	2201      	movs	r2, #1
 801205a:	002c      	movs	r4, r5
 801205c:	0005      	movs	r5, r0
 801205e:	9314      	str	r3, [sp, #80]	; 0x50
 8012060:	9b08      	ldr	r3, [sp, #32]
 8012062:	4013      	ands	r3, r2
 8012064:	930f      	str	r3, [sp, #60]	; 0x3c
 8012066:	0031      	movs	r1, r6
 8012068:	9805      	ldr	r0, [sp, #20]
 801206a:	f7ff fa3d 	bl	80114e8 <quorem>
 801206e:	0003      	movs	r3, r0
 8012070:	0021      	movs	r1, r4
 8012072:	3330      	adds	r3, #48	; 0x30
 8012074:	900d      	str	r0, [sp, #52]	; 0x34
 8012076:	9805      	ldr	r0, [sp, #20]
 8012078:	9307      	str	r3, [sp, #28]
 801207a:	f7fe fbe7 	bl	801084c <__mcmp>
 801207e:	002a      	movs	r2, r5
 8012080:	900e      	str	r0, [sp, #56]	; 0x38
 8012082:	0031      	movs	r1, r6
 8012084:	0038      	movs	r0, r7
 8012086:	f7fe fbfd 	bl	8010884 <__mdiff>
 801208a:	68c3      	ldr	r3, [r0, #12]
 801208c:	9008      	str	r0, [sp, #32]
 801208e:	9310      	str	r3, [sp, #64]	; 0x40
 8012090:	2301      	movs	r3, #1
 8012092:	930c      	str	r3, [sp, #48]	; 0x30
 8012094:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012096:	2b00      	cmp	r3, #0
 8012098:	d104      	bne.n	80120a4 <_dtoa_r+0xaa4>
 801209a:	0001      	movs	r1, r0
 801209c:	9805      	ldr	r0, [sp, #20]
 801209e:	f7fe fbd5 	bl	801084c <__mcmp>
 80120a2:	900c      	str	r0, [sp, #48]	; 0x30
 80120a4:	0038      	movs	r0, r7
 80120a6:	9908      	ldr	r1, [sp, #32]
 80120a8:	f7fe f944 	bl	8010334 <_Bfree>
 80120ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80120ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80120b0:	3301      	adds	r3, #1
 80120b2:	9308      	str	r3, [sp, #32]
 80120b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80120b6:	4313      	orrs	r3, r2
 80120b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80120ba:	4313      	orrs	r3, r2
 80120bc:	d10c      	bne.n	80120d8 <_dtoa_r+0xad8>
 80120be:	9b07      	ldr	r3, [sp, #28]
 80120c0:	2b39      	cmp	r3, #57	; 0x39
 80120c2:	d026      	beq.n	8012112 <_dtoa_r+0xb12>
 80120c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	dd02      	ble.n	80120d0 <_dtoa_r+0xad0>
 80120ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80120cc:	3331      	adds	r3, #49	; 0x31
 80120ce:	9307      	str	r3, [sp, #28]
 80120d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80120d2:	9a07      	ldr	r2, [sp, #28]
 80120d4:	701a      	strb	r2, [r3, #0]
 80120d6:	e76a      	b.n	8011fae <_dtoa_r+0x9ae>
 80120d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80120da:	2b00      	cmp	r3, #0
 80120dc:	db04      	blt.n	80120e8 <_dtoa_r+0xae8>
 80120de:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80120e0:	4313      	orrs	r3, r2
 80120e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80120e4:	4313      	orrs	r3, r2
 80120e6:	d11f      	bne.n	8012128 <_dtoa_r+0xb28>
 80120e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	ddf0      	ble.n	80120d0 <_dtoa_r+0xad0>
 80120ee:	9905      	ldr	r1, [sp, #20]
 80120f0:	2201      	movs	r2, #1
 80120f2:	0038      	movs	r0, r7
 80120f4:	f7fe fb3c 	bl	8010770 <__lshift>
 80120f8:	0031      	movs	r1, r6
 80120fa:	9005      	str	r0, [sp, #20]
 80120fc:	f7fe fba6 	bl	801084c <__mcmp>
 8012100:	2800      	cmp	r0, #0
 8012102:	dc03      	bgt.n	801210c <_dtoa_r+0xb0c>
 8012104:	d1e4      	bne.n	80120d0 <_dtoa_r+0xad0>
 8012106:	9b07      	ldr	r3, [sp, #28]
 8012108:	07db      	lsls	r3, r3, #31
 801210a:	d5e1      	bpl.n	80120d0 <_dtoa_r+0xad0>
 801210c:	9b07      	ldr	r3, [sp, #28]
 801210e:	2b39      	cmp	r3, #57	; 0x39
 8012110:	d1db      	bne.n	80120ca <_dtoa_r+0xaca>
 8012112:	2339      	movs	r3, #57	; 0x39
 8012114:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012116:	7013      	strb	r3, [r2, #0]
 8012118:	9b08      	ldr	r3, [sp, #32]
 801211a:	9308      	str	r3, [sp, #32]
 801211c:	3b01      	subs	r3, #1
 801211e:	781a      	ldrb	r2, [r3, #0]
 8012120:	2a39      	cmp	r2, #57	; 0x39
 8012122:	d068      	beq.n	80121f6 <_dtoa_r+0xbf6>
 8012124:	3201      	adds	r2, #1
 8012126:	e7d5      	b.n	80120d4 <_dtoa_r+0xad4>
 8012128:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801212a:	2b00      	cmp	r3, #0
 801212c:	dd07      	ble.n	801213e <_dtoa_r+0xb3e>
 801212e:	9b07      	ldr	r3, [sp, #28]
 8012130:	2b39      	cmp	r3, #57	; 0x39
 8012132:	d0ee      	beq.n	8012112 <_dtoa_r+0xb12>
 8012134:	9b07      	ldr	r3, [sp, #28]
 8012136:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012138:	3301      	adds	r3, #1
 801213a:	7013      	strb	r3, [r2, #0]
 801213c:	e737      	b.n	8011fae <_dtoa_r+0x9ae>
 801213e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012140:	9a07      	ldr	r2, [sp, #28]
 8012142:	701a      	strb	r2, [r3, #0]
 8012144:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012146:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012148:	4293      	cmp	r3, r2
 801214a:	d03e      	beq.n	80121ca <_dtoa_r+0xbca>
 801214c:	2300      	movs	r3, #0
 801214e:	220a      	movs	r2, #10
 8012150:	9905      	ldr	r1, [sp, #20]
 8012152:	0038      	movs	r0, r7
 8012154:	f7fe f912 	bl	801037c <__multadd>
 8012158:	2300      	movs	r3, #0
 801215a:	9005      	str	r0, [sp, #20]
 801215c:	220a      	movs	r2, #10
 801215e:	0021      	movs	r1, r4
 8012160:	0038      	movs	r0, r7
 8012162:	42ac      	cmp	r4, r5
 8012164:	d106      	bne.n	8012174 <_dtoa_r+0xb74>
 8012166:	f7fe f909 	bl	801037c <__multadd>
 801216a:	0004      	movs	r4, r0
 801216c:	0005      	movs	r5, r0
 801216e:	9b08      	ldr	r3, [sp, #32]
 8012170:	930a      	str	r3, [sp, #40]	; 0x28
 8012172:	e778      	b.n	8012066 <_dtoa_r+0xa66>
 8012174:	f7fe f902 	bl	801037c <__multadd>
 8012178:	0029      	movs	r1, r5
 801217a:	0004      	movs	r4, r0
 801217c:	2300      	movs	r3, #0
 801217e:	220a      	movs	r2, #10
 8012180:	0038      	movs	r0, r7
 8012182:	f7fe f8fb 	bl	801037c <__multadd>
 8012186:	0005      	movs	r5, r0
 8012188:	e7f1      	b.n	801216e <_dtoa_r+0xb6e>
 801218a:	9b07      	ldr	r3, [sp, #28]
 801218c:	930c      	str	r3, [sp, #48]	; 0x30
 801218e:	2400      	movs	r4, #0
 8012190:	0031      	movs	r1, r6
 8012192:	9805      	ldr	r0, [sp, #20]
 8012194:	f7ff f9a8 	bl	80114e8 <quorem>
 8012198:	9b06      	ldr	r3, [sp, #24]
 801219a:	3030      	adds	r0, #48	; 0x30
 801219c:	5518      	strb	r0, [r3, r4]
 801219e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80121a0:	3401      	adds	r4, #1
 80121a2:	9007      	str	r0, [sp, #28]
 80121a4:	42a3      	cmp	r3, r4
 80121a6:	dd07      	ble.n	80121b8 <_dtoa_r+0xbb8>
 80121a8:	2300      	movs	r3, #0
 80121aa:	220a      	movs	r2, #10
 80121ac:	0038      	movs	r0, r7
 80121ae:	9905      	ldr	r1, [sp, #20]
 80121b0:	f7fe f8e4 	bl	801037c <__multadd>
 80121b4:	9005      	str	r0, [sp, #20]
 80121b6:	e7eb      	b.n	8012190 <_dtoa_r+0xb90>
 80121b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80121ba:	2001      	movs	r0, #1
 80121bc:	2b00      	cmp	r3, #0
 80121be:	dd00      	ble.n	80121c2 <_dtoa_r+0xbc2>
 80121c0:	0018      	movs	r0, r3
 80121c2:	2400      	movs	r4, #0
 80121c4:	9b06      	ldr	r3, [sp, #24]
 80121c6:	181b      	adds	r3, r3, r0
 80121c8:	9308      	str	r3, [sp, #32]
 80121ca:	9905      	ldr	r1, [sp, #20]
 80121cc:	2201      	movs	r2, #1
 80121ce:	0038      	movs	r0, r7
 80121d0:	f7fe face 	bl	8010770 <__lshift>
 80121d4:	0031      	movs	r1, r6
 80121d6:	9005      	str	r0, [sp, #20]
 80121d8:	f7fe fb38 	bl	801084c <__mcmp>
 80121dc:	2800      	cmp	r0, #0
 80121de:	dc9b      	bgt.n	8012118 <_dtoa_r+0xb18>
 80121e0:	d102      	bne.n	80121e8 <_dtoa_r+0xbe8>
 80121e2:	9b07      	ldr	r3, [sp, #28]
 80121e4:	07db      	lsls	r3, r3, #31
 80121e6:	d497      	bmi.n	8012118 <_dtoa_r+0xb18>
 80121e8:	9b08      	ldr	r3, [sp, #32]
 80121ea:	9308      	str	r3, [sp, #32]
 80121ec:	3b01      	subs	r3, #1
 80121ee:	781a      	ldrb	r2, [r3, #0]
 80121f0:	2a30      	cmp	r2, #48	; 0x30
 80121f2:	d0fa      	beq.n	80121ea <_dtoa_r+0xbea>
 80121f4:	e6db      	b.n	8011fae <_dtoa_r+0x9ae>
 80121f6:	9a06      	ldr	r2, [sp, #24]
 80121f8:	429a      	cmp	r2, r3
 80121fa:	d18e      	bne.n	801211a <_dtoa_r+0xb1a>
 80121fc:	9b02      	ldr	r3, [sp, #8]
 80121fe:	3301      	adds	r3, #1
 8012200:	9302      	str	r3, [sp, #8]
 8012202:	2331      	movs	r3, #49	; 0x31
 8012204:	e799      	b.n	801213a <_dtoa_r+0xb3a>
 8012206:	4b09      	ldr	r3, [pc, #36]	; (801222c <_dtoa_r+0xc2c>)
 8012208:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801220a:	9306      	str	r3, [sp, #24]
 801220c:	4b08      	ldr	r3, [pc, #32]	; (8012230 <_dtoa_r+0xc30>)
 801220e:	2a00      	cmp	r2, #0
 8012210:	d001      	beq.n	8012216 <_dtoa_r+0xc16>
 8012212:	f7ff fa3f 	bl	8011694 <_dtoa_r+0x94>
 8012216:	f7ff fa3f 	bl	8011698 <_dtoa_r+0x98>
 801221a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801221c:	2b00      	cmp	r3, #0
 801221e:	dcb6      	bgt.n	801218e <_dtoa_r+0xb8e>
 8012220:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012222:	2b02      	cmp	r3, #2
 8012224:	dd00      	ble.n	8012228 <_dtoa_r+0xc28>
 8012226:	e6ac      	b.n	8011f82 <_dtoa_r+0x982>
 8012228:	e7b1      	b.n	801218e <_dtoa_r+0xb8e>
 801222a:	46c0      	nop			; (mov r8, r8)
 801222c:	08013863 	.word	0x08013863
 8012230:	0801386b 	.word	0x0801386b

08012234 <fiprintf>:
 8012234:	b40e      	push	{r1, r2, r3}
 8012236:	b503      	push	{r0, r1, lr}
 8012238:	0001      	movs	r1, r0
 801223a:	ab03      	add	r3, sp, #12
 801223c:	4804      	ldr	r0, [pc, #16]	; (8012250 <fiprintf+0x1c>)
 801223e:	cb04      	ldmia	r3!, {r2}
 8012240:	6800      	ldr	r0, [r0, #0]
 8012242:	9301      	str	r3, [sp, #4]
 8012244:	f000 f8b8 	bl	80123b8 <_vfiprintf_r>
 8012248:	b002      	add	sp, #8
 801224a:	bc08      	pop	{r3}
 801224c:	b003      	add	sp, #12
 801224e:	4718      	bx	r3
 8012250:	200000bc 	.word	0x200000bc

08012254 <malloc>:
 8012254:	b510      	push	{r4, lr}
 8012256:	4b03      	ldr	r3, [pc, #12]	; (8012264 <malloc+0x10>)
 8012258:	0001      	movs	r1, r0
 801225a:	6818      	ldr	r0, [r3, #0]
 801225c:	f7fe fd58 	bl	8010d10 <_malloc_r>
 8012260:	bd10      	pop	{r4, pc}
 8012262:	46c0      	nop			; (mov r8, r8)
 8012264:	200000bc 	.word	0x200000bc

08012268 <memchr>:
 8012268:	b2c9      	uxtb	r1, r1
 801226a:	1882      	adds	r2, r0, r2
 801226c:	4290      	cmp	r0, r2
 801226e:	d101      	bne.n	8012274 <memchr+0xc>
 8012270:	2000      	movs	r0, #0
 8012272:	4770      	bx	lr
 8012274:	7803      	ldrb	r3, [r0, #0]
 8012276:	428b      	cmp	r3, r1
 8012278:	d0fb      	beq.n	8012272 <memchr+0xa>
 801227a:	3001      	adds	r0, #1
 801227c:	e7f6      	b.n	801226c <memchr+0x4>

0801227e <memmove>:
 801227e:	b510      	push	{r4, lr}
 8012280:	4288      	cmp	r0, r1
 8012282:	d902      	bls.n	801228a <memmove+0xc>
 8012284:	188b      	adds	r3, r1, r2
 8012286:	4298      	cmp	r0, r3
 8012288:	d303      	bcc.n	8012292 <memmove+0x14>
 801228a:	2300      	movs	r3, #0
 801228c:	e007      	b.n	801229e <memmove+0x20>
 801228e:	5c8b      	ldrb	r3, [r1, r2]
 8012290:	5483      	strb	r3, [r0, r2]
 8012292:	3a01      	subs	r2, #1
 8012294:	d2fb      	bcs.n	801228e <memmove+0x10>
 8012296:	bd10      	pop	{r4, pc}
 8012298:	5ccc      	ldrb	r4, [r1, r3]
 801229a:	54c4      	strb	r4, [r0, r3]
 801229c:	3301      	adds	r3, #1
 801229e:	429a      	cmp	r2, r3
 80122a0:	d1fa      	bne.n	8012298 <memmove+0x1a>
 80122a2:	e7f8      	b.n	8012296 <memmove+0x18>

080122a4 <__malloc_lock>:
 80122a4:	b510      	push	{r4, lr}
 80122a6:	4802      	ldr	r0, [pc, #8]	; (80122b0 <__malloc_lock+0xc>)
 80122a8:	f000 fc65 	bl	8012b76 <__retarget_lock_acquire_recursive>
 80122ac:	bd10      	pop	{r4, pc}
 80122ae:	46c0      	nop			; (mov r8, r8)
 80122b0:	20000d24 	.word	0x20000d24

080122b4 <__malloc_unlock>:
 80122b4:	b510      	push	{r4, lr}
 80122b6:	4802      	ldr	r0, [pc, #8]	; (80122c0 <__malloc_unlock+0xc>)
 80122b8:	f000 fc5e 	bl	8012b78 <__retarget_lock_release_recursive>
 80122bc:	bd10      	pop	{r4, pc}
 80122be:	46c0      	nop			; (mov r8, r8)
 80122c0:	20000d24 	.word	0x20000d24

080122c4 <_free_r>:
 80122c4:	b570      	push	{r4, r5, r6, lr}
 80122c6:	0005      	movs	r5, r0
 80122c8:	2900      	cmp	r1, #0
 80122ca:	d010      	beq.n	80122ee <_free_r+0x2a>
 80122cc:	1f0c      	subs	r4, r1, #4
 80122ce:	6823      	ldr	r3, [r4, #0]
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	da00      	bge.n	80122d6 <_free_r+0x12>
 80122d4:	18e4      	adds	r4, r4, r3
 80122d6:	0028      	movs	r0, r5
 80122d8:	f7ff ffe4 	bl	80122a4 <__malloc_lock>
 80122dc:	4a1d      	ldr	r2, [pc, #116]	; (8012354 <_free_r+0x90>)
 80122de:	6813      	ldr	r3, [r2, #0]
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d105      	bne.n	80122f0 <_free_r+0x2c>
 80122e4:	6063      	str	r3, [r4, #4]
 80122e6:	6014      	str	r4, [r2, #0]
 80122e8:	0028      	movs	r0, r5
 80122ea:	f7ff ffe3 	bl	80122b4 <__malloc_unlock>
 80122ee:	bd70      	pop	{r4, r5, r6, pc}
 80122f0:	42a3      	cmp	r3, r4
 80122f2:	d908      	bls.n	8012306 <_free_r+0x42>
 80122f4:	6821      	ldr	r1, [r4, #0]
 80122f6:	1860      	adds	r0, r4, r1
 80122f8:	4283      	cmp	r3, r0
 80122fa:	d1f3      	bne.n	80122e4 <_free_r+0x20>
 80122fc:	6818      	ldr	r0, [r3, #0]
 80122fe:	685b      	ldr	r3, [r3, #4]
 8012300:	1841      	adds	r1, r0, r1
 8012302:	6021      	str	r1, [r4, #0]
 8012304:	e7ee      	b.n	80122e4 <_free_r+0x20>
 8012306:	001a      	movs	r2, r3
 8012308:	685b      	ldr	r3, [r3, #4]
 801230a:	2b00      	cmp	r3, #0
 801230c:	d001      	beq.n	8012312 <_free_r+0x4e>
 801230e:	42a3      	cmp	r3, r4
 8012310:	d9f9      	bls.n	8012306 <_free_r+0x42>
 8012312:	6811      	ldr	r1, [r2, #0]
 8012314:	1850      	adds	r0, r2, r1
 8012316:	42a0      	cmp	r0, r4
 8012318:	d10b      	bne.n	8012332 <_free_r+0x6e>
 801231a:	6820      	ldr	r0, [r4, #0]
 801231c:	1809      	adds	r1, r1, r0
 801231e:	1850      	adds	r0, r2, r1
 8012320:	6011      	str	r1, [r2, #0]
 8012322:	4283      	cmp	r3, r0
 8012324:	d1e0      	bne.n	80122e8 <_free_r+0x24>
 8012326:	6818      	ldr	r0, [r3, #0]
 8012328:	685b      	ldr	r3, [r3, #4]
 801232a:	1841      	adds	r1, r0, r1
 801232c:	6011      	str	r1, [r2, #0]
 801232e:	6053      	str	r3, [r2, #4]
 8012330:	e7da      	b.n	80122e8 <_free_r+0x24>
 8012332:	42a0      	cmp	r0, r4
 8012334:	d902      	bls.n	801233c <_free_r+0x78>
 8012336:	230c      	movs	r3, #12
 8012338:	602b      	str	r3, [r5, #0]
 801233a:	e7d5      	b.n	80122e8 <_free_r+0x24>
 801233c:	6821      	ldr	r1, [r4, #0]
 801233e:	1860      	adds	r0, r4, r1
 8012340:	4283      	cmp	r3, r0
 8012342:	d103      	bne.n	801234c <_free_r+0x88>
 8012344:	6818      	ldr	r0, [r3, #0]
 8012346:	685b      	ldr	r3, [r3, #4]
 8012348:	1841      	adds	r1, r0, r1
 801234a:	6021      	str	r1, [r4, #0]
 801234c:	6063      	str	r3, [r4, #4]
 801234e:	6054      	str	r4, [r2, #4]
 8012350:	e7ca      	b.n	80122e8 <_free_r+0x24>
 8012352:	46c0      	nop			; (mov r8, r8)
 8012354:	20000d18 	.word	0x20000d18

08012358 <_malloc_usable_size_r>:
 8012358:	1f0b      	subs	r3, r1, #4
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	1f18      	subs	r0, r3, #4
 801235e:	2b00      	cmp	r3, #0
 8012360:	da01      	bge.n	8012366 <_malloc_usable_size_r+0xe>
 8012362:	580b      	ldr	r3, [r1, r0]
 8012364:	18c0      	adds	r0, r0, r3
 8012366:	4770      	bx	lr

08012368 <__sfputc_r>:
 8012368:	6893      	ldr	r3, [r2, #8]
 801236a:	b510      	push	{r4, lr}
 801236c:	3b01      	subs	r3, #1
 801236e:	6093      	str	r3, [r2, #8]
 8012370:	2b00      	cmp	r3, #0
 8012372:	da04      	bge.n	801237e <__sfputc_r+0x16>
 8012374:	6994      	ldr	r4, [r2, #24]
 8012376:	42a3      	cmp	r3, r4
 8012378:	db07      	blt.n	801238a <__sfputc_r+0x22>
 801237a:	290a      	cmp	r1, #10
 801237c:	d005      	beq.n	801238a <__sfputc_r+0x22>
 801237e:	6813      	ldr	r3, [r2, #0]
 8012380:	1c58      	adds	r0, r3, #1
 8012382:	6010      	str	r0, [r2, #0]
 8012384:	7019      	strb	r1, [r3, #0]
 8012386:	0008      	movs	r0, r1
 8012388:	bd10      	pop	{r4, pc}
 801238a:	f000 f94f 	bl	801262c <__swbuf_r>
 801238e:	0001      	movs	r1, r0
 8012390:	e7f9      	b.n	8012386 <__sfputc_r+0x1e>

08012392 <__sfputs_r>:
 8012392:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012394:	0006      	movs	r6, r0
 8012396:	000f      	movs	r7, r1
 8012398:	0014      	movs	r4, r2
 801239a:	18d5      	adds	r5, r2, r3
 801239c:	42ac      	cmp	r4, r5
 801239e:	d101      	bne.n	80123a4 <__sfputs_r+0x12>
 80123a0:	2000      	movs	r0, #0
 80123a2:	e007      	b.n	80123b4 <__sfputs_r+0x22>
 80123a4:	7821      	ldrb	r1, [r4, #0]
 80123a6:	003a      	movs	r2, r7
 80123a8:	0030      	movs	r0, r6
 80123aa:	f7ff ffdd 	bl	8012368 <__sfputc_r>
 80123ae:	3401      	adds	r4, #1
 80123b0:	1c43      	adds	r3, r0, #1
 80123b2:	d1f3      	bne.n	801239c <__sfputs_r+0xa>
 80123b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080123b8 <_vfiprintf_r>:
 80123b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80123ba:	b0a1      	sub	sp, #132	; 0x84
 80123bc:	0006      	movs	r6, r0
 80123be:	000c      	movs	r4, r1
 80123c0:	001f      	movs	r7, r3
 80123c2:	9203      	str	r2, [sp, #12]
 80123c4:	2800      	cmp	r0, #0
 80123c6:	d004      	beq.n	80123d2 <_vfiprintf_r+0x1a>
 80123c8:	6983      	ldr	r3, [r0, #24]
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d101      	bne.n	80123d2 <_vfiprintf_r+0x1a>
 80123ce:	f000 fb31 	bl	8012a34 <__sinit>
 80123d2:	4b8e      	ldr	r3, [pc, #568]	; (801260c <_vfiprintf_r+0x254>)
 80123d4:	429c      	cmp	r4, r3
 80123d6:	d11c      	bne.n	8012412 <_vfiprintf_r+0x5a>
 80123d8:	6874      	ldr	r4, [r6, #4]
 80123da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80123dc:	07db      	lsls	r3, r3, #31
 80123de:	d405      	bmi.n	80123ec <_vfiprintf_r+0x34>
 80123e0:	89a3      	ldrh	r3, [r4, #12]
 80123e2:	059b      	lsls	r3, r3, #22
 80123e4:	d402      	bmi.n	80123ec <_vfiprintf_r+0x34>
 80123e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80123e8:	f000 fbc5 	bl	8012b76 <__retarget_lock_acquire_recursive>
 80123ec:	89a3      	ldrh	r3, [r4, #12]
 80123ee:	071b      	lsls	r3, r3, #28
 80123f0:	d502      	bpl.n	80123f8 <_vfiprintf_r+0x40>
 80123f2:	6923      	ldr	r3, [r4, #16]
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d11d      	bne.n	8012434 <_vfiprintf_r+0x7c>
 80123f8:	0021      	movs	r1, r4
 80123fa:	0030      	movs	r0, r6
 80123fc:	f000 f96c 	bl	80126d8 <__swsetup_r>
 8012400:	2800      	cmp	r0, #0
 8012402:	d017      	beq.n	8012434 <_vfiprintf_r+0x7c>
 8012404:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012406:	07db      	lsls	r3, r3, #31
 8012408:	d50d      	bpl.n	8012426 <_vfiprintf_r+0x6e>
 801240a:	2001      	movs	r0, #1
 801240c:	4240      	negs	r0, r0
 801240e:	b021      	add	sp, #132	; 0x84
 8012410:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012412:	4b7f      	ldr	r3, [pc, #508]	; (8012610 <_vfiprintf_r+0x258>)
 8012414:	429c      	cmp	r4, r3
 8012416:	d101      	bne.n	801241c <_vfiprintf_r+0x64>
 8012418:	68b4      	ldr	r4, [r6, #8]
 801241a:	e7de      	b.n	80123da <_vfiprintf_r+0x22>
 801241c:	4b7d      	ldr	r3, [pc, #500]	; (8012614 <_vfiprintf_r+0x25c>)
 801241e:	429c      	cmp	r4, r3
 8012420:	d1db      	bne.n	80123da <_vfiprintf_r+0x22>
 8012422:	68f4      	ldr	r4, [r6, #12]
 8012424:	e7d9      	b.n	80123da <_vfiprintf_r+0x22>
 8012426:	89a3      	ldrh	r3, [r4, #12]
 8012428:	059b      	lsls	r3, r3, #22
 801242a:	d4ee      	bmi.n	801240a <_vfiprintf_r+0x52>
 801242c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801242e:	f000 fba3 	bl	8012b78 <__retarget_lock_release_recursive>
 8012432:	e7ea      	b.n	801240a <_vfiprintf_r+0x52>
 8012434:	2300      	movs	r3, #0
 8012436:	ad08      	add	r5, sp, #32
 8012438:	616b      	str	r3, [r5, #20]
 801243a:	3320      	adds	r3, #32
 801243c:	766b      	strb	r3, [r5, #25]
 801243e:	3310      	adds	r3, #16
 8012440:	76ab      	strb	r3, [r5, #26]
 8012442:	9707      	str	r7, [sp, #28]
 8012444:	9f03      	ldr	r7, [sp, #12]
 8012446:	783b      	ldrb	r3, [r7, #0]
 8012448:	2b00      	cmp	r3, #0
 801244a:	d001      	beq.n	8012450 <_vfiprintf_r+0x98>
 801244c:	2b25      	cmp	r3, #37	; 0x25
 801244e:	d14e      	bne.n	80124ee <_vfiprintf_r+0x136>
 8012450:	9b03      	ldr	r3, [sp, #12]
 8012452:	1afb      	subs	r3, r7, r3
 8012454:	9305      	str	r3, [sp, #20]
 8012456:	9b03      	ldr	r3, [sp, #12]
 8012458:	429f      	cmp	r7, r3
 801245a:	d00d      	beq.n	8012478 <_vfiprintf_r+0xc0>
 801245c:	9b05      	ldr	r3, [sp, #20]
 801245e:	0021      	movs	r1, r4
 8012460:	0030      	movs	r0, r6
 8012462:	9a03      	ldr	r2, [sp, #12]
 8012464:	f7ff ff95 	bl	8012392 <__sfputs_r>
 8012468:	1c43      	adds	r3, r0, #1
 801246a:	d100      	bne.n	801246e <_vfiprintf_r+0xb6>
 801246c:	e0b5      	b.n	80125da <_vfiprintf_r+0x222>
 801246e:	696a      	ldr	r2, [r5, #20]
 8012470:	9b05      	ldr	r3, [sp, #20]
 8012472:	4694      	mov	ip, r2
 8012474:	4463      	add	r3, ip
 8012476:	616b      	str	r3, [r5, #20]
 8012478:	783b      	ldrb	r3, [r7, #0]
 801247a:	2b00      	cmp	r3, #0
 801247c:	d100      	bne.n	8012480 <_vfiprintf_r+0xc8>
 801247e:	e0ac      	b.n	80125da <_vfiprintf_r+0x222>
 8012480:	2201      	movs	r2, #1
 8012482:	1c7b      	adds	r3, r7, #1
 8012484:	9303      	str	r3, [sp, #12]
 8012486:	2300      	movs	r3, #0
 8012488:	4252      	negs	r2, r2
 801248a:	606a      	str	r2, [r5, #4]
 801248c:	a904      	add	r1, sp, #16
 801248e:	3254      	adds	r2, #84	; 0x54
 8012490:	1852      	adds	r2, r2, r1
 8012492:	602b      	str	r3, [r5, #0]
 8012494:	60eb      	str	r3, [r5, #12]
 8012496:	60ab      	str	r3, [r5, #8]
 8012498:	7013      	strb	r3, [r2, #0]
 801249a:	65ab      	str	r3, [r5, #88]	; 0x58
 801249c:	9b03      	ldr	r3, [sp, #12]
 801249e:	2205      	movs	r2, #5
 80124a0:	7819      	ldrb	r1, [r3, #0]
 80124a2:	485d      	ldr	r0, [pc, #372]	; (8012618 <_vfiprintf_r+0x260>)
 80124a4:	f7ff fee0 	bl	8012268 <memchr>
 80124a8:	9b03      	ldr	r3, [sp, #12]
 80124aa:	1c5f      	adds	r7, r3, #1
 80124ac:	2800      	cmp	r0, #0
 80124ae:	d120      	bne.n	80124f2 <_vfiprintf_r+0x13a>
 80124b0:	682a      	ldr	r2, [r5, #0]
 80124b2:	06d3      	lsls	r3, r2, #27
 80124b4:	d504      	bpl.n	80124c0 <_vfiprintf_r+0x108>
 80124b6:	2353      	movs	r3, #83	; 0x53
 80124b8:	a904      	add	r1, sp, #16
 80124ba:	185b      	adds	r3, r3, r1
 80124bc:	2120      	movs	r1, #32
 80124be:	7019      	strb	r1, [r3, #0]
 80124c0:	0713      	lsls	r3, r2, #28
 80124c2:	d504      	bpl.n	80124ce <_vfiprintf_r+0x116>
 80124c4:	2353      	movs	r3, #83	; 0x53
 80124c6:	a904      	add	r1, sp, #16
 80124c8:	185b      	adds	r3, r3, r1
 80124ca:	212b      	movs	r1, #43	; 0x2b
 80124cc:	7019      	strb	r1, [r3, #0]
 80124ce:	9b03      	ldr	r3, [sp, #12]
 80124d0:	781b      	ldrb	r3, [r3, #0]
 80124d2:	2b2a      	cmp	r3, #42	; 0x2a
 80124d4:	d016      	beq.n	8012504 <_vfiprintf_r+0x14c>
 80124d6:	2100      	movs	r1, #0
 80124d8:	68eb      	ldr	r3, [r5, #12]
 80124da:	9f03      	ldr	r7, [sp, #12]
 80124dc:	783a      	ldrb	r2, [r7, #0]
 80124de:	1c78      	adds	r0, r7, #1
 80124e0:	3a30      	subs	r2, #48	; 0x30
 80124e2:	4684      	mov	ip, r0
 80124e4:	2a09      	cmp	r2, #9
 80124e6:	d94f      	bls.n	8012588 <_vfiprintf_r+0x1d0>
 80124e8:	2900      	cmp	r1, #0
 80124ea:	d111      	bne.n	8012510 <_vfiprintf_r+0x158>
 80124ec:	e017      	b.n	801251e <_vfiprintf_r+0x166>
 80124ee:	3701      	adds	r7, #1
 80124f0:	e7a9      	b.n	8012446 <_vfiprintf_r+0x8e>
 80124f2:	4b49      	ldr	r3, [pc, #292]	; (8012618 <_vfiprintf_r+0x260>)
 80124f4:	682a      	ldr	r2, [r5, #0]
 80124f6:	1ac0      	subs	r0, r0, r3
 80124f8:	2301      	movs	r3, #1
 80124fa:	4083      	lsls	r3, r0
 80124fc:	4313      	orrs	r3, r2
 80124fe:	602b      	str	r3, [r5, #0]
 8012500:	9703      	str	r7, [sp, #12]
 8012502:	e7cb      	b.n	801249c <_vfiprintf_r+0xe4>
 8012504:	9b07      	ldr	r3, [sp, #28]
 8012506:	1d19      	adds	r1, r3, #4
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	9107      	str	r1, [sp, #28]
 801250c:	2b00      	cmp	r3, #0
 801250e:	db01      	blt.n	8012514 <_vfiprintf_r+0x15c>
 8012510:	930b      	str	r3, [sp, #44]	; 0x2c
 8012512:	e004      	b.n	801251e <_vfiprintf_r+0x166>
 8012514:	425b      	negs	r3, r3
 8012516:	60eb      	str	r3, [r5, #12]
 8012518:	2302      	movs	r3, #2
 801251a:	4313      	orrs	r3, r2
 801251c:	602b      	str	r3, [r5, #0]
 801251e:	783b      	ldrb	r3, [r7, #0]
 8012520:	2b2e      	cmp	r3, #46	; 0x2e
 8012522:	d10a      	bne.n	801253a <_vfiprintf_r+0x182>
 8012524:	787b      	ldrb	r3, [r7, #1]
 8012526:	2b2a      	cmp	r3, #42	; 0x2a
 8012528:	d137      	bne.n	801259a <_vfiprintf_r+0x1e2>
 801252a:	9b07      	ldr	r3, [sp, #28]
 801252c:	3702      	adds	r7, #2
 801252e:	1d1a      	adds	r2, r3, #4
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	9207      	str	r2, [sp, #28]
 8012534:	2b00      	cmp	r3, #0
 8012536:	db2d      	blt.n	8012594 <_vfiprintf_r+0x1dc>
 8012538:	9309      	str	r3, [sp, #36]	; 0x24
 801253a:	2203      	movs	r2, #3
 801253c:	7839      	ldrb	r1, [r7, #0]
 801253e:	4837      	ldr	r0, [pc, #220]	; (801261c <_vfiprintf_r+0x264>)
 8012540:	f7ff fe92 	bl	8012268 <memchr>
 8012544:	2800      	cmp	r0, #0
 8012546:	d007      	beq.n	8012558 <_vfiprintf_r+0x1a0>
 8012548:	4b34      	ldr	r3, [pc, #208]	; (801261c <_vfiprintf_r+0x264>)
 801254a:	682a      	ldr	r2, [r5, #0]
 801254c:	1ac0      	subs	r0, r0, r3
 801254e:	2340      	movs	r3, #64	; 0x40
 8012550:	4083      	lsls	r3, r0
 8012552:	4313      	orrs	r3, r2
 8012554:	3701      	adds	r7, #1
 8012556:	602b      	str	r3, [r5, #0]
 8012558:	7839      	ldrb	r1, [r7, #0]
 801255a:	1c7b      	adds	r3, r7, #1
 801255c:	2206      	movs	r2, #6
 801255e:	4830      	ldr	r0, [pc, #192]	; (8012620 <_vfiprintf_r+0x268>)
 8012560:	9303      	str	r3, [sp, #12]
 8012562:	7629      	strb	r1, [r5, #24]
 8012564:	f7ff fe80 	bl	8012268 <memchr>
 8012568:	2800      	cmp	r0, #0
 801256a:	d045      	beq.n	80125f8 <_vfiprintf_r+0x240>
 801256c:	4b2d      	ldr	r3, [pc, #180]	; (8012624 <_vfiprintf_r+0x26c>)
 801256e:	2b00      	cmp	r3, #0
 8012570:	d127      	bne.n	80125c2 <_vfiprintf_r+0x20a>
 8012572:	2207      	movs	r2, #7
 8012574:	9b07      	ldr	r3, [sp, #28]
 8012576:	3307      	adds	r3, #7
 8012578:	4393      	bics	r3, r2
 801257a:	3308      	adds	r3, #8
 801257c:	9307      	str	r3, [sp, #28]
 801257e:	696b      	ldr	r3, [r5, #20]
 8012580:	9a04      	ldr	r2, [sp, #16]
 8012582:	189b      	adds	r3, r3, r2
 8012584:	616b      	str	r3, [r5, #20]
 8012586:	e75d      	b.n	8012444 <_vfiprintf_r+0x8c>
 8012588:	210a      	movs	r1, #10
 801258a:	434b      	muls	r3, r1
 801258c:	4667      	mov	r7, ip
 801258e:	189b      	adds	r3, r3, r2
 8012590:	3909      	subs	r1, #9
 8012592:	e7a3      	b.n	80124dc <_vfiprintf_r+0x124>
 8012594:	2301      	movs	r3, #1
 8012596:	425b      	negs	r3, r3
 8012598:	e7ce      	b.n	8012538 <_vfiprintf_r+0x180>
 801259a:	2300      	movs	r3, #0
 801259c:	001a      	movs	r2, r3
 801259e:	3701      	adds	r7, #1
 80125a0:	606b      	str	r3, [r5, #4]
 80125a2:	7839      	ldrb	r1, [r7, #0]
 80125a4:	1c78      	adds	r0, r7, #1
 80125a6:	3930      	subs	r1, #48	; 0x30
 80125a8:	4684      	mov	ip, r0
 80125aa:	2909      	cmp	r1, #9
 80125ac:	d903      	bls.n	80125b6 <_vfiprintf_r+0x1fe>
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d0c3      	beq.n	801253a <_vfiprintf_r+0x182>
 80125b2:	9209      	str	r2, [sp, #36]	; 0x24
 80125b4:	e7c1      	b.n	801253a <_vfiprintf_r+0x182>
 80125b6:	230a      	movs	r3, #10
 80125b8:	435a      	muls	r2, r3
 80125ba:	4667      	mov	r7, ip
 80125bc:	1852      	adds	r2, r2, r1
 80125be:	3b09      	subs	r3, #9
 80125c0:	e7ef      	b.n	80125a2 <_vfiprintf_r+0x1ea>
 80125c2:	ab07      	add	r3, sp, #28
 80125c4:	9300      	str	r3, [sp, #0]
 80125c6:	0022      	movs	r2, r4
 80125c8:	0029      	movs	r1, r5
 80125ca:	0030      	movs	r0, r6
 80125cc:	4b16      	ldr	r3, [pc, #88]	; (8012628 <_vfiprintf_r+0x270>)
 80125ce:	e000      	b.n	80125d2 <_vfiprintf_r+0x21a>
 80125d0:	bf00      	nop
 80125d2:	9004      	str	r0, [sp, #16]
 80125d4:	9b04      	ldr	r3, [sp, #16]
 80125d6:	3301      	adds	r3, #1
 80125d8:	d1d1      	bne.n	801257e <_vfiprintf_r+0x1c6>
 80125da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80125dc:	07db      	lsls	r3, r3, #31
 80125de:	d405      	bmi.n	80125ec <_vfiprintf_r+0x234>
 80125e0:	89a3      	ldrh	r3, [r4, #12]
 80125e2:	059b      	lsls	r3, r3, #22
 80125e4:	d402      	bmi.n	80125ec <_vfiprintf_r+0x234>
 80125e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80125e8:	f000 fac6 	bl	8012b78 <__retarget_lock_release_recursive>
 80125ec:	89a3      	ldrh	r3, [r4, #12]
 80125ee:	065b      	lsls	r3, r3, #25
 80125f0:	d500      	bpl.n	80125f4 <_vfiprintf_r+0x23c>
 80125f2:	e70a      	b.n	801240a <_vfiprintf_r+0x52>
 80125f4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80125f6:	e70a      	b.n	801240e <_vfiprintf_r+0x56>
 80125f8:	ab07      	add	r3, sp, #28
 80125fa:	9300      	str	r3, [sp, #0]
 80125fc:	0022      	movs	r2, r4
 80125fe:	0029      	movs	r1, r5
 8012600:	0030      	movs	r0, r6
 8012602:	4b09      	ldr	r3, [pc, #36]	; (8012628 <_vfiprintf_r+0x270>)
 8012604:	f7fe fdfc 	bl	8011200 <_printf_i>
 8012608:	e7e3      	b.n	80125d2 <_vfiprintf_r+0x21a>
 801260a:	46c0      	nop			; (mov r8, r8)
 801260c:	080138f0 	.word	0x080138f0
 8012610:	08013910 	.word	0x08013910
 8012614:	080138d0 	.word	0x080138d0
 8012618:	080137f4 	.word	0x080137f4
 801261c:	080137fa 	.word	0x080137fa
 8012620:	080137fe 	.word	0x080137fe
 8012624:	00000000 	.word	0x00000000
 8012628:	08012393 	.word	0x08012393

0801262c <__swbuf_r>:
 801262c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801262e:	0005      	movs	r5, r0
 8012630:	000e      	movs	r6, r1
 8012632:	0014      	movs	r4, r2
 8012634:	2800      	cmp	r0, #0
 8012636:	d004      	beq.n	8012642 <__swbuf_r+0x16>
 8012638:	6983      	ldr	r3, [r0, #24]
 801263a:	2b00      	cmp	r3, #0
 801263c:	d101      	bne.n	8012642 <__swbuf_r+0x16>
 801263e:	f000 f9f9 	bl	8012a34 <__sinit>
 8012642:	4b22      	ldr	r3, [pc, #136]	; (80126cc <__swbuf_r+0xa0>)
 8012644:	429c      	cmp	r4, r3
 8012646:	d12e      	bne.n	80126a6 <__swbuf_r+0x7a>
 8012648:	686c      	ldr	r4, [r5, #4]
 801264a:	69a3      	ldr	r3, [r4, #24]
 801264c:	60a3      	str	r3, [r4, #8]
 801264e:	89a3      	ldrh	r3, [r4, #12]
 8012650:	071b      	lsls	r3, r3, #28
 8012652:	d532      	bpl.n	80126ba <__swbuf_r+0x8e>
 8012654:	6923      	ldr	r3, [r4, #16]
 8012656:	2b00      	cmp	r3, #0
 8012658:	d02f      	beq.n	80126ba <__swbuf_r+0x8e>
 801265a:	6823      	ldr	r3, [r4, #0]
 801265c:	6922      	ldr	r2, [r4, #16]
 801265e:	b2f7      	uxtb	r7, r6
 8012660:	1a98      	subs	r0, r3, r2
 8012662:	6963      	ldr	r3, [r4, #20]
 8012664:	b2f6      	uxtb	r6, r6
 8012666:	4283      	cmp	r3, r0
 8012668:	dc05      	bgt.n	8012676 <__swbuf_r+0x4a>
 801266a:	0021      	movs	r1, r4
 801266c:	0028      	movs	r0, r5
 801266e:	f000 f93f 	bl	80128f0 <_fflush_r>
 8012672:	2800      	cmp	r0, #0
 8012674:	d127      	bne.n	80126c6 <__swbuf_r+0x9a>
 8012676:	68a3      	ldr	r3, [r4, #8]
 8012678:	3001      	adds	r0, #1
 801267a:	3b01      	subs	r3, #1
 801267c:	60a3      	str	r3, [r4, #8]
 801267e:	6823      	ldr	r3, [r4, #0]
 8012680:	1c5a      	adds	r2, r3, #1
 8012682:	6022      	str	r2, [r4, #0]
 8012684:	701f      	strb	r7, [r3, #0]
 8012686:	6963      	ldr	r3, [r4, #20]
 8012688:	4283      	cmp	r3, r0
 801268a:	d004      	beq.n	8012696 <__swbuf_r+0x6a>
 801268c:	89a3      	ldrh	r3, [r4, #12]
 801268e:	07db      	lsls	r3, r3, #31
 8012690:	d507      	bpl.n	80126a2 <__swbuf_r+0x76>
 8012692:	2e0a      	cmp	r6, #10
 8012694:	d105      	bne.n	80126a2 <__swbuf_r+0x76>
 8012696:	0021      	movs	r1, r4
 8012698:	0028      	movs	r0, r5
 801269a:	f000 f929 	bl	80128f0 <_fflush_r>
 801269e:	2800      	cmp	r0, #0
 80126a0:	d111      	bne.n	80126c6 <__swbuf_r+0x9a>
 80126a2:	0030      	movs	r0, r6
 80126a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80126a6:	4b0a      	ldr	r3, [pc, #40]	; (80126d0 <__swbuf_r+0xa4>)
 80126a8:	429c      	cmp	r4, r3
 80126aa:	d101      	bne.n	80126b0 <__swbuf_r+0x84>
 80126ac:	68ac      	ldr	r4, [r5, #8]
 80126ae:	e7cc      	b.n	801264a <__swbuf_r+0x1e>
 80126b0:	4b08      	ldr	r3, [pc, #32]	; (80126d4 <__swbuf_r+0xa8>)
 80126b2:	429c      	cmp	r4, r3
 80126b4:	d1c9      	bne.n	801264a <__swbuf_r+0x1e>
 80126b6:	68ec      	ldr	r4, [r5, #12]
 80126b8:	e7c7      	b.n	801264a <__swbuf_r+0x1e>
 80126ba:	0021      	movs	r1, r4
 80126bc:	0028      	movs	r0, r5
 80126be:	f000 f80b 	bl	80126d8 <__swsetup_r>
 80126c2:	2800      	cmp	r0, #0
 80126c4:	d0c9      	beq.n	801265a <__swbuf_r+0x2e>
 80126c6:	2601      	movs	r6, #1
 80126c8:	4276      	negs	r6, r6
 80126ca:	e7ea      	b.n	80126a2 <__swbuf_r+0x76>
 80126cc:	080138f0 	.word	0x080138f0
 80126d0:	08013910 	.word	0x08013910
 80126d4:	080138d0 	.word	0x080138d0

080126d8 <__swsetup_r>:
 80126d8:	4b37      	ldr	r3, [pc, #220]	; (80127b8 <__swsetup_r+0xe0>)
 80126da:	b570      	push	{r4, r5, r6, lr}
 80126dc:	681d      	ldr	r5, [r3, #0]
 80126de:	0006      	movs	r6, r0
 80126e0:	000c      	movs	r4, r1
 80126e2:	2d00      	cmp	r5, #0
 80126e4:	d005      	beq.n	80126f2 <__swsetup_r+0x1a>
 80126e6:	69ab      	ldr	r3, [r5, #24]
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d102      	bne.n	80126f2 <__swsetup_r+0x1a>
 80126ec:	0028      	movs	r0, r5
 80126ee:	f000 f9a1 	bl	8012a34 <__sinit>
 80126f2:	4b32      	ldr	r3, [pc, #200]	; (80127bc <__swsetup_r+0xe4>)
 80126f4:	429c      	cmp	r4, r3
 80126f6:	d10f      	bne.n	8012718 <__swsetup_r+0x40>
 80126f8:	686c      	ldr	r4, [r5, #4]
 80126fa:	230c      	movs	r3, #12
 80126fc:	5ee2      	ldrsh	r2, [r4, r3]
 80126fe:	b293      	uxth	r3, r2
 8012700:	0711      	lsls	r1, r2, #28
 8012702:	d42d      	bmi.n	8012760 <__swsetup_r+0x88>
 8012704:	06d9      	lsls	r1, r3, #27
 8012706:	d411      	bmi.n	801272c <__swsetup_r+0x54>
 8012708:	2309      	movs	r3, #9
 801270a:	2001      	movs	r0, #1
 801270c:	6033      	str	r3, [r6, #0]
 801270e:	3337      	adds	r3, #55	; 0x37
 8012710:	4313      	orrs	r3, r2
 8012712:	81a3      	strh	r3, [r4, #12]
 8012714:	4240      	negs	r0, r0
 8012716:	bd70      	pop	{r4, r5, r6, pc}
 8012718:	4b29      	ldr	r3, [pc, #164]	; (80127c0 <__swsetup_r+0xe8>)
 801271a:	429c      	cmp	r4, r3
 801271c:	d101      	bne.n	8012722 <__swsetup_r+0x4a>
 801271e:	68ac      	ldr	r4, [r5, #8]
 8012720:	e7eb      	b.n	80126fa <__swsetup_r+0x22>
 8012722:	4b28      	ldr	r3, [pc, #160]	; (80127c4 <__swsetup_r+0xec>)
 8012724:	429c      	cmp	r4, r3
 8012726:	d1e8      	bne.n	80126fa <__swsetup_r+0x22>
 8012728:	68ec      	ldr	r4, [r5, #12]
 801272a:	e7e6      	b.n	80126fa <__swsetup_r+0x22>
 801272c:	075b      	lsls	r3, r3, #29
 801272e:	d513      	bpl.n	8012758 <__swsetup_r+0x80>
 8012730:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012732:	2900      	cmp	r1, #0
 8012734:	d008      	beq.n	8012748 <__swsetup_r+0x70>
 8012736:	0023      	movs	r3, r4
 8012738:	3344      	adds	r3, #68	; 0x44
 801273a:	4299      	cmp	r1, r3
 801273c:	d002      	beq.n	8012744 <__swsetup_r+0x6c>
 801273e:	0030      	movs	r0, r6
 8012740:	f7ff fdc0 	bl	80122c4 <_free_r>
 8012744:	2300      	movs	r3, #0
 8012746:	6363      	str	r3, [r4, #52]	; 0x34
 8012748:	2224      	movs	r2, #36	; 0x24
 801274a:	89a3      	ldrh	r3, [r4, #12]
 801274c:	4393      	bics	r3, r2
 801274e:	81a3      	strh	r3, [r4, #12]
 8012750:	2300      	movs	r3, #0
 8012752:	6063      	str	r3, [r4, #4]
 8012754:	6923      	ldr	r3, [r4, #16]
 8012756:	6023      	str	r3, [r4, #0]
 8012758:	2308      	movs	r3, #8
 801275a:	89a2      	ldrh	r2, [r4, #12]
 801275c:	4313      	orrs	r3, r2
 801275e:	81a3      	strh	r3, [r4, #12]
 8012760:	6923      	ldr	r3, [r4, #16]
 8012762:	2b00      	cmp	r3, #0
 8012764:	d10b      	bne.n	801277e <__swsetup_r+0xa6>
 8012766:	21a0      	movs	r1, #160	; 0xa0
 8012768:	2280      	movs	r2, #128	; 0x80
 801276a:	89a3      	ldrh	r3, [r4, #12]
 801276c:	0089      	lsls	r1, r1, #2
 801276e:	0092      	lsls	r2, r2, #2
 8012770:	400b      	ands	r3, r1
 8012772:	4293      	cmp	r3, r2
 8012774:	d003      	beq.n	801277e <__swsetup_r+0xa6>
 8012776:	0021      	movs	r1, r4
 8012778:	0030      	movs	r0, r6
 801277a:	f000 fa27 	bl	8012bcc <__smakebuf_r>
 801277e:	220c      	movs	r2, #12
 8012780:	5ea3      	ldrsh	r3, [r4, r2]
 8012782:	2001      	movs	r0, #1
 8012784:	001a      	movs	r2, r3
 8012786:	b299      	uxth	r1, r3
 8012788:	4002      	ands	r2, r0
 801278a:	4203      	tst	r3, r0
 801278c:	d00f      	beq.n	80127ae <__swsetup_r+0xd6>
 801278e:	2200      	movs	r2, #0
 8012790:	60a2      	str	r2, [r4, #8]
 8012792:	6962      	ldr	r2, [r4, #20]
 8012794:	4252      	negs	r2, r2
 8012796:	61a2      	str	r2, [r4, #24]
 8012798:	2000      	movs	r0, #0
 801279a:	6922      	ldr	r2, [r4, #16]
 801279c:	4282      	cmp	r2, r0
 801279e:	d1ba      	bne.n	8012716 <__swsetup_r+0x3e>
 80127a0:	060a      	lsls	r2, r1, #24
 80127a2:	d5b8      	bpl.n	8012716 <__swsetup_r+0x3e>
 80127a4:	2240      	movs	r2, #64	; 0x40
 80127a6:	4313      	orrs	r3, r2
 80127a8:	81a3      	strh	r3, [r4, #12]
 80127aa:	3801      	subs	r0, #1
 80127ac:	e7b3      	b.n	8012716 <__swsetup_r+0x3e>
 80127ae:	0788      	lsls	r0, r1, #30
 80127b0:	d400      	bmi.n	80127b4 <__swsetup_r+0xdc>
 80127b2:	6962      	ldr	r2, [r4, #20]
 80127b4:	60a2      	str	r2, [r4, #8]
 80127b6:	e7ef      	b.n	8012798 <__swsetup_r+0xc0>
 80127b8:	200000bc 	.word	0x200000bc
 80127bc:	080138f0 	.word	0x080138f0
 80127c0:	08013910 	.word	0x08013910
 80127c4:	080138d0 	.word	0x080138d0

080127c8 <abort>:
 80127c8:	2006      	movs	r0, #6
 80127ca:	b510      	push	{r4, lr}
 80127cc:	f000 fa6c 	bl	8012ca8 <raise>
 80127d0:	2001      	movs	r0, #1
 80127d2:	f7f5 fe9f 	bl	8008514 <_exit>
	...

080127d8 <__sflush_r>:
 80127d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80127da:	898b      	ldrh	r3, [r1, #12]
 80127dc:	0005      	movs	r5, r0
 80127de:	000c      	movs	r4, r1
 80127e0:	071a      	lsls	r2, r3, #28
 80127e2:	d45f      	bmi.n	80128a4 <__sflush_r+0xcc>
 80127e4:	684a      	ldr	r2, [r1, #4]
 80127e6:	2a00      	cmp	r2, #0
 80127e8:	dc04      	bgt.n	80127f4 <__sflush_r+0x1c>
 80127ea:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80127ec:	2a00      	cmp	r2, #0
 80127ee:	dc01      	bgt.n	80127f4 <__sflush_r+0x1c>
 80127f0:	2000      	movs	r0, #0
 80127f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80127f4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80127f6:	2f00      	cmp	r7, #0
 80127f8:	d0fa      	beq.n	80127f0 <__sflush_r+0x18>
 80127fa:	2200      	movs	r2, #0
 80127fc:	2180      	movs	r1, #128	; 0x80
 80127fe:	682e      	ldr	r6, [r5, #0]
 8012800:	602a      	str	r2, [r5, #0]
 8012802:	001a      	movs	r2, r3
 8012804:	0149      	lsls	r1, r1, #5
 8012806:	400a      	ands	r2, r1
 8012808:	420b      	tst	r3, r1
 801280a:	d034      	beq.n	8012876 <__sflush_r+0x9e>
 801280c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801280e:	89a3      	ldrh	r3, [r4, #12]
 8012810:	075b      	lsls	r3, r3, #29
 8012812:	d506      	bpl.n	8012822 <__sflush_r+0x4a>
 8012814:	6863      	ldr	r3, [r4, #4]
 8012816:	1ac0      	subs	r0, r0, r3
 8012818:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801281a:	2b00      	cmp	r3, #0
 801281c:	d001      	beq.n	8012822 <__sflush_r+0x4a>
 801281e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012820:	1ac0      	subs	r0, r0, r3
 8012822:	0002      	movs	r2, r0
 8012824:	6a21      	ldr	r1, [r4, #32]
 8012826:	2300      	movs	r3, #0
 8012828:	0028      	movs	r0, r5
 801282a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 801282c:	47b8      	blx	r7
 801282e:	89a1      	ldrh	r1, [r4, #12]
 8012830:	1c43      	adds	r3, r0, #1
 8012832:	d106      	bne.n	8012842 <__sflush_r+0x6a>
 8012834:	682b      	ldr	r3, [r5, #0]
 8012836:	2b1d      	cmp	r3, #29
 8012838:	d831      	bhi.n	801289e <__sflush_r+0xc6>
 801283a:	4a2c      	ldr	r2, [pc, #176]	; (80128ec <__sflush_r+0x114>)
 801283c:	40da      	lsrs	r2, r3
 801283e:	07d3      	lsls	r3, r2, #31
 8012840:	d52d      	bpl.n	801289e <__sflush_r+0xc6>
 8012842:	2300      	movs	r3, #0
 8012844:	6063      	str	r3, [r4, #4]
 8012846:	6923      	ldr	r3, [r4, #16]
 8012848:	6023      	str	r3, [r4, #0]
 801284a:	04cb      	lsls	r3, r1, #19
 801284c:	d505      	bpl.n	801285a <__sflush_r+0x82>
 801284e:	1c43      	adds	r3, r0, #1
 8012850:	d102      	bne.n	8012858 <__sflush_r+0x80>
 8012852:	682b      	ldr	r3, [r5, #0]
 8012854:	2b00      	cmp	r3, #0
 8012856:	d100      	bne.n	801285a <__sflush_r+0x82>
 8012858:	6560      	str	r0, [r4, #84]	; 0x54
 801285a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801285c:	602e      	str	r6, [r5, #0]
 801285e:	2900      	cmp	r1, #0
 8012860:	d0c6      	beq.n	80127f0 <__sflush_r+0x18>
 8012862:	0023      	movs	r3, r4
 8012864:	3344      	adds	r3, #68	; 0x44
 8012866:	4299      	cmp	r1, r3
 8012868:	d002      	beq.n	8012870 <__sflush_r+0x98>
 801286a:	0028      	movs	r0, r5
 801286c:	f7ff fd2a 	bl	80122c4 <_free_r>
 8012870:	2000      	movs	r0, #0
 8012872:	6360      	str	r0, [r4, #52]	; 0x34
 8012874:	e7bd      	b.n	80127f2 <__sflush_r+0x1a>
 8012876:	2301      	movs	r3, #1
 8012878:	0028      	movs	r0, r5
 801287a:	6a21      	ldr	r1, [r4, #32]
 801287c:	47b8      	blx	r7
 801287e:	1c43      	adds	r3, r0, #1
 8012880:	d1c5      	bne.n	801280e <__sflush_r+0x36>
 8012882:	682b      	ldr	r3, [r5, #0]
 8012884:	2b00      	cmp	r3, #0
 8012886:	d0c2      	beq.n	801280e <__sflush_r+0x36>
 8012888:	2b1d      	cmp	r3, #29
 801288a:	d001      	beq.n	8012890 <__sflush_r+0xb8>
 801288c:	2b16      	cmp	r3, #22
 801288e:	d101      	bne.n	8012894 <__sflush_r+0xbc>
 8012890:	602e      	str	r6, [r5, #0]
 8012892:	e7ad      	b.n	80127f0 <__sflush_r+0x18>
 8012894:	2340      	movs	r3, #64	; 0x40
 8012896:	89a2      	ldrh	r2, [r4, #12]
 8012898:	4313      	orrs	r3, r2
 801289a:	81a3      	strh	r3, [r4, #12]
 801289c:	e7a9      	b.n	80127f2 <__sflush_r+0x1a>
 801289e:	2340      	movs	r3, #64	; 0x40
 80128a0:	430b      	orrs	r3, r1
 80128a2:	e7fa      	b.n	801289a <__sflush_r+0xc2>
 80128a4:	690f      	ldr	r7, [r1, #16]
 80128a6:	2f00      	cmp	r7, #0
 80128a8:	d0a2      	beq.n	80127f0 <__sflush_r+0x18>
 80128aa:	680a      	ldr	r2, [r1, #0]
 80128ac:	600f      	str	r7, [r1, #0]
 80128ae:	1bd2      	subs	r2, r2, r7
 80128b0:	9201      	str	r2, [sp, #4]
 80128b2:	2200      	movs	r2, #0
 80128b4:	079b      	lsls	r3, r3, #30
 80128b6:	d100      	bne.n	80128ba <__sflush_r+0xe2>
 80128b8:	694a      	ldr	r2, [r1, #20]
 80128ba:	60a2      	str	r2, [r4, #8]
 80128bc:	9b01      	ldr	r3, [sp, #4]
 80128be:	2b00      	cmp	r3, #0
 80128c0:	dc00      	bgt.n	80128c4 <__sflush_r+0xec>
 80128c2:	e795      	b.n	80127f0 <__sflush_r+0x18>
 80128c4:	003a      	movs	r2, r7
 80128c6:	0028      	movs	r0, r5
 80128c8:	9b01      	ldr	r3, [sp, #4]
 80128ca:	6a21      	ldr	r1, [r4, #32]
 80128cc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80128ce:	47b0      	blx	r6
 80128d0:	2800      	cmp	r0, #0
 80128d2:	dc06      	bgt.n	80128e2 <__sflush_r+0x10a>
 80128d4:	2340      	movs	r3, #64	; 0x40
 80128d6:	2001      	movs	r0, #1
 80128d8:	89a2      	ldrh	r2, [r4, #12]
 80128da:	4240      	negs	r0, r0
 80128dc:	4313      	orrs	r3, r2
 80128de:	81a3      	strh	r3, [r4, #12]
 80128e0:	e787      	b.n	80127f2 <__sflush_r+0x1a>
 80128e2:	9b01      	ldr	r3, [sp, #4]
 80128e4:	183f      	adds	r7, r7, r0
 80128e6:	1a1b      	subs	r3, r3, r0
 80128e8:	9301      	str	r3, [sp, #4]
 80128ea:	e7e7      	b.n	80128bc <__sflush_r+0xe4>
 80128ec:	20400001 	.word	0x20400001

080128f0 <_fflush_r>:
 80128f0:	690b      	ldr	r3, [r1, #16]
 80128f2:	b570      	push	{r4, r5, r6, lr}
 80128f4:	0005      	movs	r5, r0
 80128f6:	000c      	movs	r4, r1
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d102      	bne.n	8012902 <_fflush_r+0x12>
 80128fc:	2500      	movs	r5, #0
 80128fe:	0028      	movs	r0, r5
 8012900:	bd70      	pop	{r4, r5, r6, pc}
 8012902:	2800      	cmp	r0, #0
 8012904:	d004      	beq.n	8012910 <_fflush_r+0x20>
 8012906:	6983      	ldr	r3, [r0, #24]
 8012908:	2b00      	cmp	r3, #0
 801290a:	d101      	bne.n	8012910 <_fflush_r+0x20>
 801290c:	f000 f892 	bl	8012a34 <__sinit>
 8012910:	4b14      	ldr	r3, [pc, #80]	; (8012964 <_fflush_r+0x74>)
 8012912:	429c      	cmp	r4, r3
 8012914:	d11b      	bne.n	801294e <_fflush_r+0x5e>
 8012916:	686c      	ldr	r4, [r5, #4]
 8012918:	220c      	movs	r2, #12
 801291a:	5ea3      	ldrsh	r3, [r4, r2]
 801291c:	2b00      	cmp	r3, #0
 801291e:	d0ed      	beq.n	80128fc <_fflush_r+0xc>
 8012920:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012922:	07d2      	lsls	r2, r2, #31
 8012924:	d404      	bmi.n	8012930 <_fflush_r+0x40>
 8012926:	059b      	lsls	r3, r3, #22
 8012928:	d402      	bmi.n	8012930 <_fflush_r+0x40>
 801292a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801292c:	f000 f923 	bl	8012b76 <__retarget_lock_acquire_recursive>
 8012930:	0028      	movs	r0, r5
 8012932:	0021      	movs	r1, r4
 8012934:	f7ff ff50 	bl	80127d8 <__sflush_r>
 8012938:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801293a:	0005      	movs	r5, r0
 801293c:	07db      	lsls	r3, r3, #31
 801293e:	d4de      	bmi.n	80128fe <_fflush_r+0xe>
 8012940:	89a3      	ldrh	r3, [r4, #12]
 8012942:	059b      	lsls	r3, r3, #22
 8012944:	d4db      	bmi.n	80128fe <_fflush_r+0xe>
 8012946:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012948:	f000 f916 	bl	8012b78 <__retarget_lock_release_recursive>
 801294c:	e7d7      	b.n	80128fe <_fflush_r+0xe>
 801294e:	4b06      	ldr	r3, [pc, #24]	; (8012968 <_fflush_r+0x78>)
 8012950:	429c      	cmp	r4, r3
 8012952:	d101      	bne.n	8012958 <_fflush_r+0x68>
 8012954:	68ac      	ldr	r4, [r5, #8]
 8012956:	e7df      	b.n	8012918 <_fflush_r+0x28>
 8012958:	4b04      	ldr	r3, [pc, #16]	; (801296c <_fflush_r+0x7c>)
 801295a:	429c      	cmp	r4, r3
 801295c:	d1dc      	bne.n	8012918 <_fflush_r+0x28>
 801295e:	68ec      	ldr	r4, [r5, #12]
 8012960:	e7da      	b.n	8012918 <_fflush_r+0x28>
 8012962:	46c0      	nop			; (mov r8, r8)
 8012964:	080138f0 	.word	0x080138f0
 8012968:	08013910 	.word	0x08013910
 801296c:	080138d0 	.word	0x080138d0

08012970 <std>:
 8012970:	2300      	movs	r3, #0
 8012972:	b510      	push	{r4, lr}
 8012974:	0004      	movs	r4, r0
 8012976:	6003      	str	r3, [r0, #0]
 8012978:	6043      	str	r3, [r0, #4]
 801297a:	6083      	str	r3, [r0, #8]
 801297c:	8181      	strh	r1, [r0, #12]
 801297e:	6643      	str	r3, [r0, #100]	; 0x64
 8012980:	0019      	movs	r1, r3
 8012982:	81c2      	strh	r2, [r0, #14]
 8012984:	6103      	str	r3, [r0, #16]
 8012986:	6143      	str	r3, [r0, #20]
 8012988:	6183      	str	r3, [r0, #24]
 801298a:	2208      	movs	r2, #8
 801298c:	305c      	adds	r0, #92	; 0x5c
 801298e:	f7fc f82a 	bl	800e9e6 <memset>
 8012992:	4b05      	ldr	r3, [pc, #20]	; (80129a8 <std+0x38>)
 8012994:	6224      	str	r4, [r4, #32]
 8012996:	6263      	str	r3, [r4, #36]	; 0x24
 8012998:	4b04      	ldr	r3, [pc, #16]	; (80129ac <std+0x3c>)
 801299a:	62a3      	str	r3, [r4, #40]	; 0x28
 801299c:	4b04      	ldr	r3, [pc, #16]	; (80129b0 <std+0x40>)
 801299e:	62e3      	str	r3, [r4, #44]	; 0x2c
 80129a0:	4b04      	ldr	r3, [pc, #16]	; (80129b4 <std+0x44>)
 80129a2:	6323      	str	r3, [r4, #48]	; 0x30
 80129a4:	bd10      	pop	{r4, pc}
 80129a6:	46c0      	nop			; (mov r8, r8)
 80129a8:	08012ce9 	.word	0x08012ce9
 80129ac:	08012d11 	.word	0x08012d11
 80129b0:	08012d49 	.word	0x08012d49
 80129b4:	08012d75 	.word	0x08012d75

080129b8 <_cleanup_r>:
 80129b8:	b510      	push	{r4, lr}
 80129ba:	4902      	ldr	r1, [pc, #8]	; (80129c4 <_cleanup_r+0xc>)
 80129bc:	f000 f8ba 	bl	8012b34 <_fwalk_reent>
 80129c0:	bd10      	pop	{r4, pc}
 80129c2:	46c0      	nop			; (mov r8, r8)
 80129c4:	080128f1 	.word	0x080128f1

080129c8 <__sfmoreglue>:
 80129c8:	b570      	push	{r4, r5, r6, lr}
 80129ca:	2568      	movs	r5, #104	; 0x68
 80129cc:	1e4a      	subs	r2, r1, #1
 80129ce:	4355      	muls	r5, r2
 80129d0:	000e      	movs	r6, r1
 80129d2:	0029      	movs	r1, r5
 80129d4:	3174      	adds	r1, #116	; 0x74
 80129d6:	f7fe f99b 	bl	8010d10 <_malloc_r>
 80129da:	1e04      	subs	r4, r0, #0
 80129dc:	d008      	beq.n	80129f0 <__sfmoreglue+0x28>
 80129de:	2100      	movs	r1, #0
 80129e0:	002a      	movs	r2, r5
 80129e2:	6001      	str	r1, [r0, #0]
 80129e4:	6046      	str	r6, [r0, #4]
 80129e6:	300c      	adds	r0, #12
 80129e8:	60a0      	str	r0, [r4, #8]
 80129ea:	3268      	adds	r2, #104	; 0x68
 80129ec:	f7fb fffb 	bl	800e9e6 <memset>
 80129f0:	0020      	movs	r0, r4
 80129f2:	bd70      	pop	{r4, r5, r6, pc}

080129f4 <__sfp_lock_acquire>:
 80129f4:	b510      	push	{r4, lr}
 80129f6:	4802      	ldr	r0, [pc, #8]	; (8012a00 <__sfp_lock_acquire+0xc>)
 80129f8:	f000 f8bd 	bl	8012b76 <__retarget_lock_acquire_recursive>
 80129fc:	bd10      	pop	{r4, pc}
 80129fe:	46c0      	nop			; (mov r8, r8)
 8012a00:	20000d25 	.word	0x20000d25

08012a04 <__sfp_lock_release>:
 8012a04:	b510      	push	{r4, lr}
 8012a06:	4802      	ldr	r0, [pc, #8]	; (8012a10 <__sfp_lock_release+0xc>)
 8012a08:	f000 f8b6 	bl	8012b78 <__retarget_lock_release_recursive>
 8012a0c:	bd10      	pop	{r4, pc}
 8012a0e:	46c0      	nop			; (mov r8, r8)
 8012a10:	20000d25 	.word	0x20000d25

08012a14 <__sinit_lock_acquire>:
 8012a14:	b510      	push	{r4, lr}
 8012a16:	4802      	ldr	r0, [pc, #8]	; (8012a20 <__sinit_lock_acquire+0xc>)
 8012a18:	f000 f8ad 	bl	8012b76 <__retarget_lock_acquire_recursive>
 8012a1c:	bd10      	pop	{r4, pc}
 8012a1e:	46c0      	nop			; (mov r8, r8)
 8012a20:	20000d26 	.word	0x20000d26

08012a24 <__sinit_lock_release>:
 8012a24:	b510      	push	{r4, lr}
 8012a26:	4802      	ldr	r0, [pc, #8]	; (8012a30 <__sinit_lock_release+0xc>)
 8012a28:	f000 f8a6 	bl	8012b78 <__retarget_lock_release_recursive>
 8012a2c:	bd10      	pop	{r4, pc}
 8012a2e:	46c0      	nop			; (mov r8, r8)
 8012a30:	20000d26 	.word	0x20000d26

08012a34 <__sinit>:
 8012a34:	b513      	push	{r0, r1, r4, lr}
 8012a36:	0004      	movs	r4, r0
 8012a38:	f7ff ffec 	bl	8012a14 <__sinit_lock_acquire>
 8012a3c:	69a3      	ldr	r3, [r4, #24]
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d002      	beq.n	8012a48 <__sinit+0x14>
 8012a42:	f7ff ffef 	bl	8012a24 <__sinit_lock_release>
 8012a46:	bd13      	pop	{r0, r1, r4, pc}
 8012a48:	64a3      	str	r3, [r4, #72]	; 0x48
 8012a4a:	64e3      	str	r3, [r4, #76]	; 0x4c
 8012a4c:	6523      	str	r3, [r4, #80]	; 0x50
 8012a4e:	4b13      	ldr	r3, [pc, #76]	; (8012a9c <__sinit+0x68>)
 8012a50:	4a13      	ldr	r2, [pc, #76]	; (8012aa0 <__sinit+0x6c>)
 8012a52:	681b      	ldr	r3, [r3, #0]
 8012a54:	62a2      	str	r2, [r4, #40]	; 0x28
 8012a56:	9301      	str	r3, [sp, #4]
 8012a58:	42a3      	cmp	r3, r4
 8012a5a:	d101      	bne.n	8012a60 <__sinit+0x2c>
 8012a5c:	2301      	movs	r3, #1
 8012a5e:	61a3      	str	r3, [r4, #24]
 8012a60:	0020      	movs	r0, r4
 8012a62:	f000 f81f 	bl	8012aa4 <__sfp>
 8012a66:	6060      	str	r0, [r4, #4]
 8012a68:	0020      	movs	r0, r4
 8012a6a:	f000 f81b 	bl	8012aa4 <__sfp>
 8012a6e:	60a0      	str	r0, [r4, #8]
 8012a70:	0020      	movs	r0, r4
 8012a72:	f000 f817 	bl	8012aa4 <__sfp>
 8012a76:	2200      	movs	r2, #0
 8012a78:	2104      	movs	r1, #4
 8012a7a:	60e0      	str	r0, [r4, #12]
 8012a7c:	6860      	ldr	r0, [r4, #4]
 8012a7e:	f7ff ff77 	bl	8012970 <std>
 8012a82:	2201      	movs	r2, #1
 8012a84:	2109      	movs	r1, #9
 8012a86:	68a0      	ldr	r0, [r4, #8]
 8012a88:	f7ff ff72 	bl	8012970 <std>
 8012a8c:	2202      	movs	r2, #2
 8012a8e:	2112      	movs	r1, #18
 8012a90:	68e0      	ldr	r0, [r4, #12]
 8012a92:	f7ff ff6d 	bl	8012970 <std>
 8012a96:	2301      	movs	r3, #1
 8012a98:	61a3      	str	r3, [r4, #24]
 8012a9a:	e7d2      	b.n	8012a42 <__sinit+0xe>
 8012a9c:	0801349c 	.word	0x0801349c
 8012aa0:	080129b9 	.word	0x080129b9

08012aa4 <__sfp>:
 8012aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012aa6:	0007      	movs	r7, r0
 8012aa8:	f7ff ffa4 	bl	80129f4 <__sfp_lock_acquire>
 8012aac:	4b1f      	ldr	r3, [pc, #124]	; (8012b2c <__sfp+0x88>)
 8012aae:	681e      	ldr	r6, [r3, #0]
 8012ab0:	69b3      	ldr	r3, [r6, #24]
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d102      	bne.n	8012abc <__sfp+0x18>
 8012ab6:	0030      	movs	r0, r6
 8012ab8:	f7ff ffbc 	bl	8012a34 <__sinit>
 8012abc:	3648      	adds	r6, #72	; 0x48
 8012abe:	68b4      	ldr	r4, [r6, #8]
 8012ac0:	6873      	ldr	r3, [r6, #4]
 8012ac2:	3b01      	subs	r3, #1
 8012ac4:	d504      	bpl.n	8012ad0 <__sfp+0x2c>
 8012ac6:	6833      	ldr	r3, [r6, #0]
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d022      	beq.n	8012b12 <__sfp+0x6e>
 8012acc:	6836      	ldr	r6, [r6, #0]
 8012ace:	e7f6      	b.n	8012abe <__sfp+0x1a>
 8012ad0:	220c      	movs	r2, #12
 8012ad2:	5ea5      	ldrsh	r5, [r4, r2]
 8012ad4:	2d00      	cmp	r5, #0
 8012ad6:	d11a      	bne.n	8012b0e <__sfp+0x6a>
 8012ad8:	0020      	movs	r0, r4
 8012ada:	4b15      	ldr	r3, [pc, #84]	; (8012b30 <__sfp+0x8c>)
 8012adc:	3058      	adds	r0, #88	; 0x58
 8012ade:	60e3      	str	r3, [r4, #12]
 8012ae0:	6665      	str	r5, [r4, #100]	; 0x64
 8012ae2:	f000 f847 	bl	8012b74 <__retarget_lock_init_recursive>
 8012ae6:	f7ff ff8d 	bl	8012a04 <__sfp_lock_release>
 8012aea:	0020      	movs	r0, r4
 8012aec:	2208      	movs	r2, #8
 8012aee:	0029      	movs	r1, r5
 8012af0:	6025      	str	r5, [r4, #0]
 8012af2:	60a5      	str	r5, [r4, #8]
 8012af4:	6065      	str	r5, [r4, #4]
 8012af6:	6125      	str	r5, [r4, #16]
 8012af8:	6165      	str	r5, [r4, #20]
 8012afa:	61a5      	str	r5, [r4, #24]
 8012afc:	305c      	adds	r0, #92	; 0x5c
 8012afe:	f7fb ff72 	bl	800e9e6 <memset>
 8012b02:	6365      	str	r5, [r4, #52]	; 0x34
 8012b04:	63a5      	str	r5, [r4, #56]	; 0x38
 8012b06:	64a5      	str	r5, [r4, #72]	; 0x48
 8012b08:	64e5      	str	r5, [r4, #76]	; 0x4c
 8012b0a:	0020      	movs	r0, r4
 8012b0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b0e:	3468      	adds	r4, #104	; 0x68
 8012b10:	e7d7      	b.n	8012ac2 <__sfp+0x1e>
 8012b12:	2104      	movs	r1, #4
 8012b14:	0038      	movs	r0, r7
 8012b16:	f7ff ff57 	bl	80129c8 <__sfmoreglue>
 8012b1a:	1e04      	subs	r4, r0, #0
 8012b1c:	6030      	str	r0, [r6, #0]
 8012b1e:	d1d5      	bne.n	8012acc <__sfp+0x28>
 8012b20:	f7ff ff70 	bl	8012a04 <__sfp_lock_release>
 8012b24:	230c      	movs	r3, #12
 8012b26:	603b      	str	r3, [r7, #0]
 8012b28:	e7ef      	b.n	8012b0a <__sfp+0x66>
 8012b2a:	46c0      	nop			; (mov r8, r8)
 8012b2c:	0801349c 	.word	0x0801349c
 8012b30:	ffff0001 	.word	0xffff0001

08012b34 <_fwalk_reent>:
 8012b34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012b36:	0004      	movs	r4, r0
 8012b38:	0006      	movs	r6, r0
 8012b3a:	2700      	movs	r7, #0
 8012b3c:	9101      	str	r1, [sp, #4]
 8012b3e:	3448      	adds	r4, #72	; 0x48
 8012b40:	6863      	ldr	r3, [r4, #4]
 8012b42:	68a5      	ldr	r5, [r4, #8]
 8012b44:	9300      	str	r3, [sp, #0]
 8012b46:	9b00      	ldr	r3, [sp, #0]
 8012b48:	3b01      	subs	r3, #1
 8012b4a:	9300      	str	r3, [sp, #0]
 8012b4c:	d504      	bpl.n	8012b58 <_fwalk_reent+0x24>
 8012b4e:	6824      	ldr	r4, [r4, #0]
 8012b50:	2c00      	cmp	r4, #0
 8012b52:	d1f5      	bne.n	8012b40 <_fwalk_reent+0xc>
 8012b54:	0038      	movs	r0, r7
 8012b56:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012b58:	89ab      	ldrh	r3, [r5, #12]
 8012b5a:	2b01      	cmp	r3, #1
 8012b5c:	d908      	bls.n	8012b70 <_fwalk_reent+0x3c>
 8012b5e:	220e      	movs	r2, #14
 8012b60:	5eab      	ldrsh	r3, [r5, r2]
 8012b62:	3301      	adds	r3, #1
 8012b64:	d004      	beq.n	8012b70 <_fwalk_reent+0x3c>
 8012b66:	0029      	movs	r1, r5
 8012b68:	0030      	movs	r0, r6
 8012b6a:	9b01      	ldr	r3, [sp, #4]
 8012b6c:	4798      	blx	r3
 8012b6e:	4307      	orrs	r7, r0
 8012b70:	3568      	adds	r5, #104	; 0x68
 8012b72:	e7e8      	b.n	8012b46 <_fwalk_reent+0x12>

08012b74 <__retarget_lock_init_recursive>:
 8012b74:	4770      	bx	lr

08012b76 <__retarget_lock_acquire_recursive>:
 8012b76:	4770      	bx	lr

08012b78 <__retarget_lock_release_recursive>:
 8012b78:	4770      	bx	lr
	...

08012b7c <__swhatbuf_r>:
 8012b7c:	b570      	push	{r4, r5, r6, lr}
 8012b7e:	000e      	movs	r6, r1
 8012b80:	001d      	movs	r5, r3
 8012b82:	230e      	movs	r3, #14
 8012b84:	5ec9      	ldrsh	r1, [r1, r3]
 8012b86:	0014      	movs	r4, r2
 8012b88:	b096      	sub	sp, #88	; 0x58
 8012b8a:	2900      	cmp	r1, #0
 8012b8c:	da08      	bge.n	8012ba0 <__swhatbuf_r+0x24>
 8012b8e:	220c      	movs	r2, #12
 8012b90:	5eb3      	ldrsh	r3, [r6, r2]
 8012b92:	2200      	movs	r2, #0
 8012b94:	602a      	str	r2, [r5, #0]
 8012b96:	061b      	lsls	r3, r3, #24
 8012b98:	d411      	bmi.n	8012bbe <__swhatbuf_r+0x42>
 8012b9a:	2380      	movs	r3, #128	; 0x80
 8012b9c:	00db      	lsls	r3, r3, #3
 8012b9e:	e00f      	b.n	8012bc0 <__swhatbuf_r+0x44>
 8012ba0:	466a      	mov	r2, sp
 8012ba2:	f000 f913 	bl	8012dcc <_fstat_r>
 8012ba6:	2800      	cmp	r0, #0
 8012ba8:	dbf1      	blt.n	8012b8e <__swhatbuf_r+0x12>
 8012baa:	23f0      	movs	r3, #240	; 0xf0
 8012bac:	9901      	ldr	r1, [sp, #4]
 8012bae:	021b      	lsls	r3, r3, #8
 8012bb0:	4019      	ands	r1, r3
 8012bb2:	4b05      	ldr	r3, [pc, #20]	; (8012bc8 <__swhatbuf_r+0x4c>)
 8012bb4:	18c9      	adds	r1, r1, r3
 8012bb6:	424b      	negs	r3, r1
 8012bb8:	4159      	adcs	r1, r3
 8012bba:	6029      	str	r1, [r5, #0]
 8012bbc:	e7ed      	b.n	8012b9a <__swhatbuf_r+0x1e>
 8012bbe:	2340      	movs	r3, #64	; 0x40
 8012bc0:	2000      	movs	r0, #0
 8012bc2:	6023      	str	r3, [r4, #0]
 8012bc4:	b016      	add	sp, #88	; 0x58
 8012bc6:	bd70      	pop	{r4, r5, r6, pc}
 8012bc8:	ffffe000 	.word	0xffffe000

08012bcc <__smakebuf_r>:
 8012bcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012bce:	2602      	movs	r6, #2
 8012bd0:	898b      	ldrh	r3, [r1, #12]
 8012bd2:	0005      	movs	r5, r0
 8012bd4:	000c      	movs	r4, r1
 8012bd6:	4233      	tst	r3, r6
 8012bd8:	d006      	beq.n	8012be8 <__smakebuf_r+0x1c>
 8012bda:	0023      	movs	r3, r4
 8012bdc:	3347      	adds	r3, #71	; 0x47
 8012bde:	6023      	str	r3, [r4, #0]
 8012be0:	6123      	str	r3, [r4, #16]
 8012be2:	2301      	movs	r3, #1
 8012be4:	6163      	str	r3, [r4, #20]
 8012be6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8012be8:	466a      	mov	r2, sp
 8012bea:	ab01      	add	r3, sp, #4
 8012bec:	f7ff ffc6 	bl	8012b7c <__swhatbuf_r>
 8012bf0:	9900      	ldr	r1, [sp, #0]
 8012bf2:	0007      	movs	r7, r0
 8012bf4:	0028      	movs	r0, r5
 8012bf6:	f7fe f88b 	bl	8010d10 <_malloc_r>
 8012bfa:	2800      	cmp	r0, #0
 8012bfc:	d108      	bne.n	8012c10 <__smakebuf_r+0x44>
 8012bfe:	220c      	movs	r2, #12
 8012c00:	5ea3      	ldrsh	r3, [r4, r2]
 8012c02:	059a      	lsls	r2, r3, #22
 8012c04:	d4ef      	bmi.n	8012be6 <__smakebuf_r+0x1a>
 8012c06:	2203      	movs	r2, #3
 8012c08:	4393      	bics	r3, r2
 8012c0a:	431e      	orrs	r6, r3
 8012c0c:	81a6      	strh	r6, [r4, #12]
 8012c0e:	e7e4      	b.n	8012bda <__smakebuf_r+0xe>
 8012c10:	4b0f      	ldr	r3, [pc, #60]	; (8012c50 <__smakebuf_r+0x84>)
 8012c12:	62ab      	str	r3, [r5, #40]	; 0x28
 8012c14:	2380      	movs	r3, #128	; 0x80
 8012c16:	89a2      	ldrh	r2, [r4, #12]
 8012c18:	6020      	str	r0, [r4, #0]
 8012c1a:	4313      	orrs	r3, r2
 8012c1c:	81a3      	strh	r3, [r4, #12]
 8012c1e:	9b00      	ldr	r3, [sp, #0]
 8012c20:	6120      	str	r0, [r4, #16]
 8012c22:	6163      	str	r3, [r4, #20]
 8012c24:	9b01      	ldr	r3, [sp, #4]
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d00d      	beq.n	8012c46 <__smakebuf_r+0x7a>
 8012c2a:	0028      	movs	r0, r5
 8012c2c:	230e      	movs	r3, #14
 8012c2e:	5ee1      	ldrsh	r1, [r4, r3]
 8012c30:	f000 f8de 	bl	8012df0 <_isatty_r>
 8012c34:	2800      	cmp	r0, #0
 8012c36:	d006      	beq.n	8012c46 <__smakebuf_r+0x7a>
 8012c38:	2203      	movs	r2, #3
 8012c3a:	89a3      	ldrh	r3, [r4, #12]
 8012c3c:	4393      	bics	r3, r2
 8012c3e:	001a      	movs	r2, r3
 8012c40:	2301      	movs	r3, #1
 8012c42:	4313      	orrs	r3, r2
 8012c44:	81a3      	strh	r3, [r4, #12]
 8012c46:	89a0      	ldrh	r0, [r4, #12]
 8012c48:	4307      	orrs	r7, r0
 8012c4a:	81a7      	strh	r7, [r4, #12]
 8012c4c:	e7cb      	b.n	8012be6 <__smakebuf_r+0x1a>
 8012c4e:	46c0      	nop			; (mov r8, r8)
 8012c50:	080129b9 	.word	0x080129b9

08012c54 <_raise_r>:
 8012c54:	b570      	push	{r4, r5, r6, lr}
 8012c56:	0004      	movs	r4, r0
 8012c58:	000d      	movs	r5, r1
 8012c5a:	291f      	cmp	r1, #31
 8012c5c:	d904      	bls.n	8012c68 <_raise_r+0x14>
 8012c5e:	2316      	movs	r3, #22
 8012c60:	6003      	str	r3, [r0, #0]
 8012c62:	2001      	movs	r0, #1
 8012c64:	4240      	negs	r0, r0
 8012c66:	bd70      	pop	{r4, r5, r6, pc}
 8012c68:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d004      	beq.n	8012c78 <_raise_r+0x24>
 8012c6e:	008a      	lsls	r2, r1, #2
 8012c70:	189b      	adds	r3, r3, r2
 8012c72:	681a      	ldr	r2, [r3, #0]
 8012c74:	2a00      	cmp	r2, #0
 8012c76:	d108      	bne.n	8012c8a <_raise_r+0x36>
 8012c78:	0020      	movs	r0, r4
 8012c7a:	f000 f831 	bl	8012ce0 <_getpid_r>
 8012c7e:	002a      	movs	r2, r5
 8012c80:	0001      	movs	r1, r0
 8012c82:	0020      	movs	r0, r4
 8012c84:	f000 f81a 	bl	8012cbc <_kill_r>
 8012c88:	e7ed      	b.n	8012c66 <_raise_r+0x12>
 8012c8a:	2000      	movs	r0, #0
 8012c8c:	2a01      	cmp	r2, #1
 8012c8e:	d0ea      	beq.n	8012c66 <_raise_r+0x12>
 8012c90:	1c51      	adds	r1, r2, #1
 8012c92:	d103      	bne.n	8012c9c <_raise_r+0x48>
 8012c94:	2316      	movs	r3, #22
 8012c96:	3001      	adds	r0, #1
 8012c98:	6023      	str	r3, [r4, #0]
 8012c9a:	e7e4      	b.n	8012c66 <_raise_r+0x12>
 8012c9c:	2400      	movs	r4, #0
 8012c9e:	0028      	movs	r0, r5
 8012ca0:	601c      	str	r4, [r3, #0]
 8012ca2:	4790      	blx	r2
 8012ca4:	0020      	movs	r0, r4
 8012ca6:	e7de      	b.n	8012c66 <_raise_r+0x12>

08012ca8 <raise>:
 8012ca8:	b510      	push	{r4, lr}
 8012caa:	4b03      	ldr	r3, [pc, #12]	; (8012cb8 <raise+0x10>)
 8012cac:	0001      	movs	r1, r0
 8012cae:	6818      	ldr	r0, [r3, #0]
 8012cb0:	f7ff ffd0 	bl	8012c54 <_raise_r>
 8012cb4:	bd10      	pop	{r4, pc}
 8012cb6:	46c0      	nop			; (mov r8, r8)
 8012cb8:	200000bc 	.word	0x200000bc

08012cbc <_kill_r>:
 8012cbc:	2300      	movs	r3, #0
 8012cbe:	b570      	push	{r4, r5, r6, lr}
 8012cc0:	4d06      	ldr	r5, [pc, #24]	; (8012cdc <_kill_r+0x20>)
 8012cc2:	0004      	movs	r4, r0
 8012cc4:	0008      	movs	r0, r1
 8012cc6:	0011      	movs	r1, r2
 8012cc8:	602b      	str	r3, [r5, #0]
 8012cca:	f7f5 fc13 	bl	80084f4 <_kill>
 8012cce:	1c43      	adds	r3, r0, #1
 8012cd0:	d103      	bne.n	8012cda <_kill_r+0x1e>
 8012cd2:	682b      	ldr	r3, [r5, #0]
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d000      	beq.n	8012cda <_kill_r+0x1e>
 8012cd8:	6023      	str	r3, [r4, #0]
 8012cda:	bd70      	pop	{r4, r5, r6, pc}
 8012cdc:	20000d20 	.word	0x20000d20

08012ce0 <_getpid_r>:
 8012ce0:	b510      	push	{r4, lr}
 8012ce2:	f7f5 fc01 	bl	80084e8 <_getpid>
 8012ce6:	bd10      	pop	{r4, pc}

08012ce8 <__sread>:
 8012ce8:	b570      	push	{r4, r5, r6, lr}
 8012cea:	000c      	movs	r4, r1
 8012cec:	250e      	movs	r5, #14
 8012cee:	5f49      	ldrsh	r1, [r1, r5]
 8012cf0:	f000 f8a4 	bl	8012e3c <_read_r>
 8012cf4:	2800      	cmp	r0, #0
 8012cf6:	db03      	blt.n	8012d00 <__sread+0x18>
 8012cf8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8012cfa:	181b      	adds	r3, r3, r0
 8012cfc:	6563      	str	r3, [r4, #84]	; 0x54
 8012cfe:	bd70      	pop	{r4, r5, r6, pc}
 8012d00:	89a3      	ldrh	r3, [r4, #12]
 8012d02:	4a02      	ldr	r2, [pc, #8]	; (8012d0c <__sread+0x24>)
 8012d04:	4013      	ands	r3, r2
 8012d06:	81a3      	strh	r3, [r4, #12]
 8012d08:	e7f9      	b.n	8012cfe <__sread+0x16>
 8012d0a:	46c0      	nop			; (mov r8, r8)
 8012d0c:	ffffefff 	.word	0xffffefff

08012d10 <__swrite>:
 8012d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d12:	001f      	movs	r7, r3
 8012d14:	898b      	ldrh	r3, [r1, #12]
 8012d16:	0005      	movs	r5, r0
 8012d18:	000c      	movs	r4, r1
 8012d1a:	0016      	movs	r6, r2
 8012d1c:	05db      	lsls	r3, r3, #23
 8012d1e:	d505      	bpl.n	8012d2c <__swrite+0x1c>
 8012d20:	230e      	movs	r3, #14
 8012d22:	5ec9      	ldrsh	r1, [r1, r3]
 8012d24:	2200      	movs	r2, #0
 8012d26:	2302      	movs	r3, #2
 8012d28:	f000 f874 	bl	8012e14 <_lseek_r>
 8012d2c:	89a3      	ldrh	r3, [r4, #12]
 8012d2e:	4a05      	ldr	r2, [pc, #20]	; (8012d44 <__swrite+0x34>)
 8012d30:	0028      	movs	r0, r5
 8012d32:	4013      	ands	r3, r2
 8012d34:	81a3      	strh	r3, [r4, #12]
 8012d36:	0032      	movs	r2, r6
 8012d38:	230e      	movs	r3, #14
 8012d3a:	5ee1      	ldrsh	r1, [r4, r3]
 8012d3c:	003b      	movs	r3, r7
 8012d3e:	f000 f81f 	bl	8012d80 <_write_r>
 8012d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d44:	ffffefff 	.word	0xffffefff

08012d48 <__sseek>:
 8012d48:	b570      	push	{r4, r5, r6, lr}
 8012d4a:	000c      	movs	r4, r1
 8012d4c:	250e      	movs	r5, #14
 8012d4e:	5f49      	ldrsh	r1, [r1, r5]
 8012d50:	f000 f860 	bl	8012e14 <_lseek_r>
 8012d54:	89a3      	ldrh	r3, [r4, #12]
 8012d56:	1c42      	adds	r2, r0, #1
 8012d58:	d103      	bne.n	8012d62 <__sseek+0x1a>
 8012d5a:	4a05      	ldr	r2, [pc, #20]	; (8012d70 <__sseek+0x28>)
 8012d5c:	4013      	ands	r3, r2
 8012d5e:	81a3      	strh	r3, [r4, #12]
 8012d60:	bd70      	pop	{r4, r5, r6, pc}
 8012d62:	2280      	movs	r2, #128	; 0x80
 8012d64:	0152      	lsls	r2, r2, #5
 8012d66:	4313      	orrs	r3, r2
 8012d68:	81a3      	strh	r3, [r4, #12]
 8012d6a:	6560      	str	r0, [r4, #84]	; 0x54
 8012d6c:	e7f8      	b.n	8012d60 <__sseek+0x18>
 8012d6e:	46c0      	nop			; (mov r8, r8)
 8012d70:	ffffefff 	.word	0xffffefff

08012d74 <__sclose>:
 8012d74:	b510      	push	{r4, lr}
 8012d76:	230e      	movs	r3, #14
 8012d78:	5ec9      	ldrsh	r1, [r1, r3]
 8012d7a:	f000 f815 	bl	8012da8 <_close_r>
 8012d7e:	bd10      	pop	{r4, pc}

08012d80 <_write_r>:
 8012d80:	b570      	push	{r4, r5, r6, lr}
 8012d82:	0004      	movs	r4, r0
 8012d84:	0008      	movs	r0, r1
 8012d86:	0011      	movs	r1, r2
 8012d88:	001a      	movs	r2, r3
 8012d8a:	2300      	movs	r3, #0
 8012d8c:	4d05      	ldr	r5, [pc, #20]	; (8012da4 <_write_r+0x24>)
 8012d8e:	602b      	str	r3, [r5, #0]
 8012d90:	f7f5 fbe9 	bl	8008566 <_write>
 8012d94:	1c43      	adds	r3, r0, #1
 8012d96:	d103      	bne.n	8012da0 <_write_r+0x20>
 8012d98:	682b      	ldr	r3, [r5, #0]
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d000      	beq.n	8012da0 <_write_r+0x20>
 8012d9e:	6023      	str	r3, [r4, #0]
 8012da0:	bd70      	pop	{r4, r5, r6, pc}
 8012da2:	46c0      	nop			; (mov r8, r8)
 8012da4:	20000d20 	.word	0x20000d20

08012da8 <_close_r>:
 8012da8:	2300      	movs	r3, #0
 8012daa:	b570      	push	{r4, r5, r6, lr}
 8012dac:	4d06      	ldr	r5, [pc, #24]	; (8012dc8 <_close_r+0x20>)
 8012dae:	0004      	movs	r4, r0
 8012db0:	0008      	movs	r0, r1
 8012db2:	602b      	str	r3, [r5, #0]
 8012db4:	f7f5 fbf3 	bl	800859e <_close>
 8012db8:	1c43      	adds	r3, r0, #1
 8012dba:	d103      	bne.n	8012dc4 <_close_r+0x1c>
 8012dbc:	682b      	ldr	r3, [r5, #0]
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	d000      	beq.n	8012dc4 <_close_r+0x1c>
 8012dc2:	6023      	str	r3, [r4, #0]
 8012dc4:	bd70      	pop	{r4, r5, r6, pc}
 8012dc6:	46c0      	nop			; (mov r8, r8)
 8012dc8:	20000d20 	.word	0x20000d20

08012dcc <_fstat_r>:
 8012dcc:	2300      	movs	r3, #0
 8012dce:	b570      	push	{r4, r5, r6, lr}
 8012dd0:	4d06      	ldr	r5, [pc, #24]	; (8012dec <_fstat_r+0x20>)
 8012dd2:	0004      	movs	r4, r0
 8012dd4:	0008      	movs	r0, r1
 8012dd6:	0011      	movs	r1, r2
 8012dd8:	602b      	str	r3, [r5, #0]
 8012dda:	f7f5 fbea 	bl	80085b2 <_fstat>
 8012dde:	1c43      	adds	r3, r0, #1
 8012de0:	d103      	bne.n	8012dea <_fstat_r+0x1e>
 8012de2:	682b      	ldr	r3, [r5, #0]
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d000      	beq.n	8012dea <_fstat_r+0x1e>
 8012de8:	6023      	str	r3, [r4, #0]
 8012dea:	bd70      	pop	{r4, r5, r6, pc}
 8012dec:	20000d20 	.word	0x20000d20

08012df0 <_isatty_r>:
 8012df0:	2300      	movs	r3, #0
 8012df2:	b570      	push	{r4, r5, r6, lr}
 8012df4:	4d06      	ldr	r5, [pc, #24]	; (8012e10 <_isatty_r+0x20>)
 8012df6:	0004      	movs	r4, r0
 8012df8:	0008      	movs	r0, r1
 8012dfa:	602b      	str	r3, [r5, #0]
 8012dfc:	f7f5 fbe7 	bl	80085ce <_isatty>
 8012e00:	1c43      	adds	r3, r0, #1
 8012e02:	d103      	bne.n	8012e0c <_isatty_r+0x1c>
 8012e04:	682b      	ldr	r3, [r5, #0]
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d000      	beq.n	8012e0c <_isatty_r+0x1c>
 8012e0a:	6023      	str	r3, [r4, #0]
 8012e0c:	bd70      	pop	{r4, r5, r6, pc}
 8012e0e:	46c0      	nop			; (mov r8, r8)
 8012e10:	20000d20 	.word	0x20000d20

08012e14 <_lseek_r>:
 8012e14:	b570      	push	{r4, r5, r6, lr}
 8012e16:	0004      	movs	r4, r0
 8012e18:	0008      	movs	r0, r1
 8012e1a:	0011      	movs	r1, r2
 8012e1c:	001a      	movs	r2, r3
 8012e1e:	2300      	movs	r3, #0
 8012e20:	4d05      	ldr	r5, [pc, #20]	; (8012e38 <_lseek_r+0x24>)
 8012e22:	602b      	str	r3, [r5, #0]
 8012e24:	f7f5 fbdc 	bl	80085e0 <_lseek>
 8012e28:	1c43      	adds	r3, r0, #1
 8012e2a:	d103      	bne.n	8012e34 <_lseek_r+0x20>
 8012e2c:	682b      	ldr	r3, [r5, #0]
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d000      	beq.n	8012e34 <_lseek_r+0x20>
 8012e32:	6023      	str	r3, [r4, #0]
 8012e34:	bd70      	pop	{r4, r5, r6, pc}
 8012e36:	46c0      	nop			; (mov r8, r8)
 8012e38:	20000d20 	.word	0x20000d20

08012e3c <_read_r>:
 8012e3c:	b570      	push	{r4, r5, r6, lr}
 8012e3e:	0004      	movs	r4, r0
 8012e40:	0008      	movs	r0, r1
 8012e42:	0011      	movs	r1, r2
 8012e44:	001a      	movs	r2, r3
 8012e46:	2300      	movs	r3, #0
 8012e48:	4d05      	ldr	r5, [pc, #20]	; (8012e60 <_read_r+0x24>)
 8012e4a:	602b      	str	r3, [r5, #0]
 8012e4c:	f7f5 fb6e 	bl	800852c <_read>
 8012e50:	1c43      	adds	r3, r0, #1
 8012e52:	d103      	bne.n	8012e5c <_read_r+0x20>
 8012e54:	682b      	ldr	r3, [r5, #0]
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d000      	beq.n	8012e5c <_read_r+0x20>
 8012e5a:	6023      	str	r3, [r4, #0]
 8012e5c:	bd70      	pop	{r4, r5, r6, pc}
 8012e5e:	46c0      	nop			; (mov r8, r8)
 8012e60:	20000d20 	.word	0x20000d20

08012e64 <_init>:
 8012e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e66:	46c0      	nop			; (mov r8, r8)
 8012e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e6a:	bc08      	pop	{r3}
 8012e6c:	469e      	mov	lr, r3
 8012e6e:	4770      	bx	lr

08012e70 <_fini>:
 8012e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e72:	46c0      	nop			; (mov r8, r8)
 8012e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e76:	bc08      	pop	{r3}
 8012e78:	469e      	mov	lr, r3
 8012e7a:	4770      	bx	lr
